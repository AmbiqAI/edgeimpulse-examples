
build/main.axf:     file format elf32-littlearm


Disassembly of section .text:

00018000 <g_am_pfnVectors>:
   18000:	00 40 00 10 05 06 02 00 f9 05 02 00 fd 05 02 00     .@..............
   18010:	fd 05 02 00 fd 05 02 00 fd 05 02 00 00 00 00 00     ................
	...
   1802c:	81 f7 02 00 01 06 02 00 00 00 00 00 b1 f7 02 00     ................
   1803c:	15 f8 02 00 01 06 02 00 01 06 02 00 01 06 02 00     ................
   1804c:	01 06 02 00 01 06 02 00 01 06 02 00 01 06 02 00     ................
   1805c:	01 06 02 00 01 06 02 00 01 06 02 00 01 06 02 00     ................
   1806c:	01 06 02 00 01 06 02 00 01 06 02 00 01 06 02 00     ................
   1807c:	01 06 02 00 01 06 02 00 01 06 02 00 01 06 02 00     ................
   1808c:	01 06 02 00 01 06 02 00 01 06 02 00 01 06 02 00     ................
   1809c:	01 06 02 00 01 06 02 00 01 06 02 00 01 06 02 00     ................
   180ac:	01 06 02 00 01 06 02 00 01 06 02 00 01 06 02 00     ................
   180bc:	01 06 02 00 bd f8 02 00 dd f8 02 00 01 06 02 00     ................
   180cc:	01 06 02 00 01 06 02 00 01 06 02 00 01 06 02 00     ................
   180dc:	01 06 02 00 01 06 02 00 01 06 02 00 59 e6 02 00     ............Y...
   180ec:	01 06 02 00 01 06 02 00 01 06 02 00 01 06 02 00     ................
   180fc:	01 06 02 00 85 e3 02 00 99 e3 02 00 b1 e3 02 00     ................
   1810c:	01 06 02 00 01 06 02 00 01 06 02 00 01 06 02 00     ................
   1811c:	01 06 02 00 e9 d9 02 00 01 06 02 00 01 06 02 00     ................
   1812c:	01 06 02 00 01 06 02 00 01 06 02 00 01 06 02 00     ................
   1813c:	01 06 02 00 01 06 02 00 01 06 02 00 01 06 02 00     ................
   1814c:	01 06 02 00 31 e8 02 00 59 e8 02 00 81 e8 02 00     ....1...Y.......
   1815c:	01 06 02 00 01 06 02 00 01 06 02 00 01 06 02 00     ................
   1816c:	01 06 02 00 01 06 02 00 01 06 02 00 01 06 02 00     ................
   1817c:	01 06 02 00 01 06 02 00 01 06 02 00 01 06 02 00     ................
   1818c:	01 06 02 00                                         ....

00018190 <__Patchable>:
	...

00018200 <memcpy>:
   18200:	4684      	mov	ip, r0
   18202:	ea41 0300 	orr.w	r3, r1, r0
   18206:	f013 0303 	ands.w	r3, r3, #3
   1820a:	d16d      	bne.n	182e8 <memcpy+0xe8>
   1820c:	3a40      	subs	r2, #64	; 0x40
   1820e:	d341      	bcc.n	18294 <memcpy+0x94>
   18210:	f851 3b04 	ldr.w	r3, [r1], #4
   18214:	f840 3b04 	str.w	r3, [r0], #4
   18218:	f851 3b04 	ldr.w	r3, [r1], #4
   1821c:	f840 3b04 	str.w	r3, [r0], #4
   18220:	f851 3b04 	ldr.w	r3, [r1], #4
   18224:	f840 3b04 	str.w	r3, [r0], #4
   18228:	f851 3b04 	ldr.w	r3, [r1], #4
   1822c:	f840 3b04 	str.w	r3, [r0], #4
   18230:	f851 3b04 	ldr.w	r3, [r1], #4
   18234:	f840 3b04 	str.w	r3, [r0], #4
   18238:	f851 3b04 	ldr.w	r3, [r1], #4
   1823c:	f840 3b04 	str.w	r3, [r0], #4
   18240:	f851 3b04 	ldr.w	r3, [r1], #4
   18244:	f840 3b04 	str.w	r3, [r0], #4
   18248:	f851 3b04 	ldr.w	r3, [r1], #4
   1824c:	f840 3b04 	str.w	r3, [r0], #4
   18250:	f851 3b04 	ldr.w	r3, [r1], #4
   18254:	f840 3b04 	str.w	r3, [r0], #4
   18258:	f851 3b04 	ldr.w	r3, [r1], #4
   1825c:	f840 3b04 	str.w	r3, [r0], #4
   18260:	f851 3b04 	ldr.w	r3, [r1], #4
   18264:	f840 3b04 	str.w	r3, [r0], #4
   18268:	f851 3b04 	ldr.w	r3, [r1], #4
   1826c:	f840 3b04 	str.w	r3, [r0], #4
   18270:	f851 3b04 	ldr.w	r3, [r1], #4
   18274:	f840 3b04 	str.w	r3, [r0], #4
   18278:	f851 3b04 	ldr.w	r3, [r1], #4
   1827c:	f840 3b04 	str.w	r3, [r0], #4
   18280:	f851 3b04 	ldr.w	r3, [r1], #4
   18284:	f840 3b04 	str.w	r3, [r0], #4
   18288:	f851 3b04 	ldr.w	r3, [r1], #4
   1828c:	f840 3b04 	str.w	r3, [r0], #4
   18290:	3a40      	subs	r2, #64	; 0x40
   18292:	d2bd      	bcs.n	18210 <memcpy+0x10>
   18294:	3230      	adds	r2, #48	; 0x30
   18296:	d311      	bcc.n	182bc <memcpy+0xbc>
   18298:	f851 3b04 	ldr.w	r3, [r1], #4
   1829c:	f840 3b04 	str.w	r3, [r0], #4
   182a0:	f851 3b04 	ldr.w	r3, [r1], #4
   182a4:	f840 3b04 	str.w	r3, [r0], #4
   182a8:	f851 3b04 	ldr.w	r3, [r1], #4
   182ac:	f840 3b04 	str.w	r3, [r0], #4
   182b0:	f851 3b04 	ldr.w	r3, [r1], #4
   182b4:	f840 3b04 	str.w	r3, [r0], #4
   182b8:	3a10      	subs	r2, #16
   182ba:	d2ed      	bcs.n	18298 <memcpy+0x98>
   182bc:	320c      	adds	r2, #12
   182be:	d305      	bcc.n	182cc <memcpy+0xcc>
   182c0:	f851 3b04 	ldr.w	r3, [r1], #4
   182c4:	f840 3b04 	str.w	r3, [r0], #4
   182c8:	3a04      	subs	r2, #4
   182ca:	d2f9      	bcs.n	182c0 <memcpy+0xc0>
   182cc:	3204      	adds	r2, #4
   182ce:	d008      	beq.n	182e2 <memcpy+0xe2>
   182d0:	07d2      	lsls	r2, r2, #31
   182d2:	bf1c      	itt	ne
   182d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   182d8:	f800 3b01 	strbne.w	r3, [r0], #1
   182dc:	d301      	bcc.n	182e2 <memcpy+0xe2>
   182de:	880b      	ldrh	r3, [r1, #0]
   182e0:	8003      	strh	r3, [r0, #0]
   182e2:	4660      	mov	r0, ip
   182e4:	4770      	bx	lr
   182e6:	bf00      	nop
   182e8:	2a08      	cmp	r2, #8
   182ea:	d313      	bcc.n	18314 <memcpy+0x114>
   182ec:	078b      	lsls	r3, r1, #30
   182ee:	d08d      	beq.n	1820c <memcpy+0xc>
   182f0:	f010 0303 	ands.w	r3, r0, #3
   182f4:	d08a      	beq.n	1820c <memcpy+0xc>
   182f6:	f1c3 0304 	rsb	r3, r3, #4
   182fa:	1ad2      	subs	r2, r2, r3
   182fc:	07db      	lsls	r3, r3, #31
   182fe:	bf1c      	itt	ne
   18300:	f811 3b01 	ldrbne.w	r3, [r1], #1
   18304:	f800 3b01 	strbne.w	r3, [r0], #1
   18308:	d380      	bcc.n	1820c <memcpy+0xc>
   1830a:	f831 3b02 	ldrh.w	r3, [r1], #2
   1830e:	f820 3b02 	strh.w	r3, [r0], #2
   18312:	e77b      	b.n	1820c <memcpy+0xc>
   18314:	3a04      	subs	r2, #4
   18316:	d3d9      	bcc.n	182cc <memcpy+0xcc>
   18318:	3a01      	subs	r2, #1
   1831a:	f811 3b01 	ldrb.w	r3, [r1], #1
   1831e:	f800 3b01 	strb.w	r3, [r0], #1
   18322:	d2f9      	bcs.n	18318 <memcpy+0x118>
   18324:	780b      	ldrb	r3, [r1, #0]
   18326:	7003      	strb	r3, [r0, #0]
   18328:	784b      	ldrb	r3, [r1, #1]
   1832a:	7043      	strb	r3, [r0, #1]
   1832c:	788b      	ldrb	r3, [r1, #2]
   1832e:	7083      	strb	r3, [r0, #2]
   18330:	4660      	mov	r0, ip
   18332:	4770      	bx	lr
	...
   18340:	eba2 0003 	sub.w	r0, r2, r3
   18344:	4770      	bx	lr
   18346:	bf00      	nop

00018348 <strcmp>:
   18348:	7802      	ldrb	r2, [r0, #0]
   1834a:	780b      	ldrb	r3, [r1, #0]
   1834c:	2a01      	cmp	r2, #1
   1834e:	bf28      	it	cs
   18350:	429a      	cmpcs	r2, r3
   18352:	d1f5      	bne.n	18340 <memcpy+0x140>
   18354:	e96d 4504 	strd	r4, r5, [sp, #-16]!
   18358:	ea40 0401 	orr.w	r4, r0, r1
   1835c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   18360:	f06f 0c00 	mvn.w	ip, #0
   18364:	ea4f 7244 	mov.w	r2, r4, lsl #29
   18368:	b312      	cbz	r2, 183b0 <strcmp+0x68>
   1836a:	ea80 0401 	eor.w	r4, r0, r1
   1836e:	f014 0f07 	tst.w	r4, #7
   18372:	d16a      	bne.n	1844a <strcmp+0x102>
   18374:	f000 0407 	and.w	r4, r0, #7
   18378:	f020 0007 	bic.w	r0, r0, #7
   1837c:	f004 0503 	and.w	r5, r4, #3
   18380:	f021 0107 	bic.w	r1, r1, #7
   18384:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   18388:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   1838c:	f014 0f04 	tst.w	r4, #4
   18390:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   18394:	fa0c f405 	lsl.w	r4, ip, r5
   18398:	ea62 0204 	orn	r2, r2, r4
   1839c:	ea66 0604 	orn	r6, r6, r4
   183a0:	d00a      	beq.n	183b8 <strcmp+0x70>
   183a2:	ea63 0304 	orn	r3, r3, r4
   183a6:	4662      	mov	r2, ip
   183a8:	ea67 0704 	orn	r7, r7, r4
   183ac:	4666      	mov	r6, ip
   183ae:	e003      	b.n	183b8 <strcmp+0x70>
   183b0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   183b4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   183b8:	fa82 f54c 	uadd8	r5, r2, ip
   183bc:	ea82 0406 	eor.w	r4, r2, r6
   183c0:	faa4 f48c 	sel	r4, r4, ip
   183c4:	bb6c      	cbnz	r4, 18422 <strcmp+0xda>
   183c6:	fa83 f54c 	uadd8	r5, r3, ip
   183ca:	ea83 0507 	eor.w	r5, r3, r7
   183ce:	faa5 f58c 	sel	r5, r5, ip
   183d2:	b995      	cbnz	r5, 183fa <strcmp+0xb2>
   183d4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
   183d8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
   183dc:	fa82 f54c 	uadd8	r5, r2, ip
   183e0:	ea82 0406 	eor.w	r4, r2, r6
   183e4:	faa4 f48c 	sel	r4, r4, ip
   183e8:	fa83 f54c 	uadd8	r5, r3, ip
   183ec:	ea83 0507 	eor.w	r5, r3, r7
   183f0:	faa5 f58c 	sel	r5, r5, ip
   183f4:	4325      	orrs	r5, r4
   183f6:	d0db      	beq.n	183b0 <strcmp+0x68>
   183f8:	b99c      	cbnz	r4, 18422 <strcmp+0xda>
   183fa:	ba2d      	rev	r5, r5
   183fc:	fab5 f485 	clz	r4, r5
   18400:	f024 0407 	bic.w	r4, r4, #7
   18404:	fa27 f104 	lsr.w	r1, r7, r4
   18408:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1840c:	fa23 f304 	lsr.w	r3, r3, r4
   18410:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   18414:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   18418:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1841c:	eba0 0001 	sub.w	r0, r0, r1
   18420:	4770      	bx	lr
   18422:	ba24      	rev	r4, r4
   18424:	fab4 f484 	clz	r4, r4
   18428:	f024 0407 	bic.w	r4, r4, #7
   1842c:	fa26 f104 	lsr.w	r1, r6, r4
   18430:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   18434:	fa22 f204 	lsr.w	r2, r2, r4
   18438:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1843c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   18440:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   18444:	eba0 0001 	sub.w	r0, r0, r1
   18448:	4770      	bx	lr
   1844a:	f014 0f03 	tst.w	r4, #3
   1844e:	d13c      	bne.n	184ca <strcmp+0x182>
   18450:	f010 0403 	ands.w	r4, r0, #3
   18454:	d128      	bne.n	184a8 <strcmp+0x160>
   18456:	f850 2b08 	ldr.w	r2, [r0], #8
   1845a:	f851 3b08 	ldr.w	r3, [r1], #8
   1845e:	fa82 f54c 	uadd8	r5, r2, ip
   18462:	ea82 0503 	eor.w	r5, r2, r3
   18466:	faa5 f58c 	sel	r5, r5, ip
   1846a:	b95d      	cbnz	r5, 18484 <strcmp+0x13c>
   1846c:	f850 2c04 	ldr.w	r2, [r0, #-4]
   18470:	f851 3c04 	ldr.w	r3, [r1, #-4]
   18474:	fa82 f54c 	uadd8	r5, r2, ip
   18478:	ea82 0503 	eor.w	r5, r2, r3
   1847c:	faa5 f58c 	sel	r5, r5, ip
   18480:	2d00      	cmp	r5, #0
   18482:	d0e8      	beq.n	18456 <strcmp+0x10e>
   18484:	ba2d      	rev	r5, r5
   18486:	fab5 f485 	clz	r4, r5
   1848a:	f024 0407 	bic.w	r4, r4, #7
   1848e:	fa23 f104 	lsr.w	r1, r3, r4
   18492:	fa22 f204 	lsr.w	r2, r2, r4
   18496:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1849a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1849e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   184a2:	eba0 0001 	sub.w	r0, r0, r1
   184a6:	4770      	bx	lr
   184a8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   184ac:	f020 0003 	bic.w	r0, r0, #3
   184b0:	f850 2b08 	ldr.w	r2, [r0], #8
   184b4:	f021 0103 	bic.w	r1, r1, #3
   184b8:	f851 3b08 	ldr.w	r3, [r1], #8
   184bc:	fa0c f404 	lsl.w	r4, ip, r4
   184c0:	ea62 0204 	orn	r2, r2, r4
   184c4:	ea63 0304 	orn	r3, r3, r4
   184c8:	e7c9      	b.n	1845e <strcmp+0x116>
   184ca:	f010 0403 	ands.w	r4, r0, #3
   184ce:	d01a      	beq.n	18506 <strcmp+0x1be>
   184d0:	eba1 0104 	sub.w	r1, r1, r4
   184d4:	f020 0003 	bic.w	r0, r0, #3
   184d8:	07e4      	lsls	r4, r4, #31
   184da:	f850 2b04 	ldr.w	r2, [r0], #4
   184de:	d006      	beq.n	184ee <strcmp+0x1a6>
   184e0:	d20f      	bcs.n	18502 <strcmp+0x1ba>
   184e2:	788b      	ldrb	r3, [r1, #2]
   184e4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
   184e8:	1ae4      	subs	r4, r4, r3
   184ea:	d106      	bne.n	184fa <strcmp+0x1b2>
   184ec:	b12b      	cbz	r3, 184fa <strcmp+0x1b2>
   184ee:	78cb      	ldrb	r3, [r1, #3]
   184f0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
   184f4:	1ae4      	subs	r4, r4, r3
   184f6:	d100      	bne.n	184fa <strcmp+0x1b2>
   184f8:	b91b      	cbnz	r3, 18502 <strcmp+0x1ba>
   184fa:	4620      	mov	r0, r4
   184fc:	f85d 4b10 	ldr.w	r4, [sp], #16
   18500:	4770      	bx	lr
   18502:	f101 0104 	add.w	r1, r1, #4
   18506:	f850 2b04 	ldr.w	r2, [r0], #4
   1850a:	07cc      	lsls	r4, r1, #31
   1850c:	f021 0103 	bic.w	r1, r1, #3
   18510:	f851 3b04 	ldr.w	r3, [r1], #4
   18514:	d848      	bhi.n	185a8 <strcmp+0x260>
   18516:	d224      	bcs.n	18562 <strcmp+0x21a>
   18518:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
   1851c:	fa82 f54c 	uadd8	r5, r2, ip
   18520:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
   18524:	faa5 f58c 	sel	r5, r5, ip
   18528:	d10a      	bne.n	18540 <strcmp+0x1f8>
   1852a:	b965      	cbnz	r5, 18546 <strcmp+0x1fe>
   1852c:	f851 3b04 	ldr.w	r3, [r1], #4
   18530:	ea84 0402 	eor.w	r4, r4, r2
   18534:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
   18538:	d10e      	bne.n	18558 <strcmp+0x210>
   1853a:	f850 2b04 	ldr.w	r2, [r0], #4
   1853e:	e7eb      	b.n	18518 <strcmp+0x1d0>
   18540:	ea4f 2313 	mov.w	r3, r3, lsr #8
   18544:	e055      	b.n	185f2 <strcmp+0x2aa>
   18546:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
   1854a:	d14d      	bne.n	185e8 <strcmp+0x2a0>
   1854c:	7808      	ldrb	r0, [r1, #0]
   1854e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   18552:	f1c0 0000 	rsb	r0, r0, #0
   18556:	4770      	bx	lr
   18558:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1855c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   18560:	e047      	b.n	185f2 <strcmp+0x2aa>
   18562:	ea02 441c 	and.w	r4, r2, ip, lsr #16
   18566:	fa82 f54c 	uadd8	r5, r2, ip
   1856a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
   1856e:	faa5 f58c 	sel	r5, r5, ip
   18572:	d10a      	bne.n	1858a <strcmp+0x242>
   18574:	b965      	cbnz	r5, 18590 <strcmp+0x248>
   18576:	f851 3b04 	ldr.w	r3, [r1], #4
   1857a:	ea84 0402 	eor.w	r4, r4, r2
   1857e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
   18582:	d10c      	bne.n	1859e <strcmp+0x256>
   18584:	f850 2b04 	ldr.w	r2, [r0], #4
   18588:	e7eb      	b.n	18562 <strcmp+0x21a>
   1858a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   1858e:	e030      	b.n	185f2 <strcmp+0x2aa>
   18590:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
   18594:	d128      	bne.n	185e8 <strcmp+0x2a0>
   18596:	880b      	ldrh	r3, [r1, #0]
   18598:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1859c:	e029      	b.n	185f2 <strcmp+0x2aa>
   1859e:	ea4f 4212 	mov.w	r2, r2, lsr #16
   185a2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
   185a6:	e024      	b.n	185f2 <strcmp+0x2aa>
   185a8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
   185ac:	fa82 f54c 	uadd8	r5, r2, ip
   185b0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
   185b4:	faa5 f58c 	sel	r5, r5, ip
   185b8:	d10a      	bne.n	185d0 <strcmp+0x288>
   185ba:	b965      	cbnz	r5, 185d6 <strcmp+0x28e>
   185bc:	f851 3b04 	ldr.w	r3, [r1], #4
   185c0:	ea84 0402 	eor.w	r4, r4, r2
   185c4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
   185c8:	d109      	bne.n	185de <strcmp+0x296>
   185ca:	f850 2b04 	ldr.w	r2, [r0], #4
   185ce:	e7eb      	b.n	185a8 <strcmp+0x260>
   185d0:	ea4f 6313 	mov.w	r3, r3, lsr #24
   185d4:	e00d      	b.n	185f2 <strcmp+0x2aa>
   185d6:	f015 0fff 	tst.w	r5, #255	; 0xff
   185da:	d105      	bne.n	185e8 <strcmp+0x2a0>
   185dc:	680b      	ldr	r3, [r1, #0]
   185de:	ea4f 2212 	mov.w	r2, r2, lsr #8
   185e2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   185e6:	e004      	b.n	185f2 <strcmp+0x2aa>
   185e8:	f04f 0000 	mov.w	r0, #0
   185ec:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   185f0:	4770      	bx	lr
   185f2:	ba12      	rev	r2, r2
   185f4:	ba1b      	rev	r3, r3
   185f6:	fa82 f44c 	uadd8	r4, r2, ip
   185fa:	ea82 0403 	eor.w	r4, r2, r3
   185fe:	faa4 f58c 	sel	r5, r4, ip
   18602:	fab5 f485 	clz	r4, r5
   18606:	fa02 f204 	lsl.w	r2, r2, r4
   1860a:	fa03 f304 	lsl.w	r3, r3, r4
   1860e:	ea4f 6012 	mov.w	r0, r2, lsr #24
   18612:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   18616:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
   1861a:	4770      	bx	lr
   1861c:	0000      	movs	r0, r0
	...

00018620 <memchr>:
   18620:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   18624:	2a10      	cmp	r2, #16
   18626:	db2b      	blt.n	18680 <memchr+0x60>
   18628:	f010 0f07 	tst.w	r0, #7
   1862c:	d008      	beq.n	18640 <memchr+0x20>
   1862e:	f810 3b01 	ldrb.w	r3, [r0], #1
   18632:	3a01      	subs	r2, #1
   18634:	428b      	cmp	r3, r1
   18636:	d02d      	beq.n	18694 <memchr+0x74>
   18638:	f010 0f07 	tst.w	r0, #7
   1863c:	b342      	cbz	r2, 18690 <memchr+0x70>
   1863e:	d1f6      	bne.n	1862e <memchr+0xe>
   18640:	b4f0      	push	{r4, r5, r6, r7}
   18642:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   18646:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1864a:	f022 0407 	bic.w	r4, r2, #7
   1864e:	f07f 0700 	mvns.w	r7, #0
   18652:	2300      	movs	r3, #0
   18654:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   18658:	3c08      	subs	r4, #8
   1865a:	ea85 0501 	eor.w	r5, r5, r1
   1865e:	ea86 0601 	eor.w	r6, r6, r1
   18662:	fa85 f547 	uadd8	r5, r5, r7
   18666:	faa3 f587 	sel	r5, r3, r7
   1866a:	fa86 f647 	uadd8	r6, r6, r7
   1866e:	faa5 f687 	sel	r6, r5, r7
   18672:	b98e      	cbnz	r6, 18698 <memchr+0x78>
   18674:	d1ee      	bne.n	18654 <memchr+0x34>
   18676:	bcf0      	pop	{r4, r5, r6, r7}
   18678:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1867c:	f002 0207 	and.w	r2, r2, #7
   18680:	b132      	cbz	r2, 18690 <memchr+0x70>
   18682:	f810 3b01 	ldrb.w	r3, [r0], #1
   18686:	3a01      	subs	r2, #1
   18688:	ea83 0301 	eor.w	r3, r3, r1
   1868c:	b113      	cbz	r3, 18694 <memchr+0x74>
   1868e:	d1f8      	bne.n	18682 <memchr+0x62>
   18690:	2000      	movs	r0, #0
   18692:	4770      	bx	lr
   18694:	3801      	subs	r0, #1
   18696:	4770      	bx	lr
   18698:	2d00      	cmp	r5, #0
   1869a:	bf06      	itte	eq
   1869c:	4635      	moveq	r5, r6
   1869e:	3803      	subeq	r0, #3
   186a0:	3807      	subne	r0, #7
   186a2:	f015 0f01 	tst.w	r5, #1
   186a6:	d107      	bne.n	186b8 <memchr+0x98>
   186a8:	3001      	adds	r0, #1
   186aa:	f415 7f80 	tst.w	r5, #256	; 0x100
   186ae:	bf02      	ittt	eq
   186b0:	3001      	addeq	r0, #1
   186b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   186b6:	3001      	addeq	r0, #1
   186b8:	bcf0      	pop	{r4, r5, r6, r7}
   186ba:	3801      	subs	r0, #1
   186bc:	4770      	bx	lr
   186be:	bf00      	nop

000186c0 <strlen>:
   186c0:	f890 f000 	pld	[r0]
   186c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   186c8:	f020 0107 	bic.w	r1, r0, #7
   186cc:	f06f 0c00 	mvn.w	ip, #0
   186d0:	f010 0407 	ands.w	r4, r0, #7
   186d4:	f891 f020 	pld	[r1, #32]
   186d8:	f040 8049 	bne.w	1876e <strlen+0xae>
   186dc:	f04f 0400 	mov.w	r4, #0
   186e0:	f06f 0007 	mvn.w	r0, #7
   186e4:	e9d1 2300 	ldrd	r2, r3, [r1]
   186e8:	f891 f040 	pld	[r1, #64]	; 0x40
   186ec:	f100 0008 	add.w	r0, r0, #8
   186f0:	fa82 f24c 	uadd8	r2, r2, ip
   186f4:	faa4 f28c 	sel	r2, r4, ip
   186f8:	fa83 f34c 	uadd8	r3, r3, ip
   186fc:	faa2 f38c 	sel	r3, r2, ip
   18700:	bb4b      	cbnz	r3, 18756 <strlen+0x96>
   18702:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   18706:	fa82 f24c 	uadd8	r2, r2, ip
   1870a:	f100 0008 	add.w	r0, r0, #8
   1870e:	faa4 f28c 	sel	r2, r4, ip
   18712:	fa83 f34c 	uadd8	r3, r3, ip
   18716:	faa2 f38c 	sel	r3, r2, ip
   1871a:	b9e3      	cbnz	r3, 18756 <strlen+0x96>
   1871c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   18720:	fa82 f24c 	uadd8	r2, r2, ip
   18724:	f100 0008 	add.w	r0, r0, #8
   18728:	faa4 f28c 	sel	r2, r4, ip
   1872c:	fa83 f34c 	uadd8	r3, r3, ip
   18730:	faa2 f38c 	sel	r3, r2, ip
   18734:	b97b      	cbnz	r3, 18756 <strlen+0x96>
   18736:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   1873a:	f101 0120 	add.w	r1, r1, #32
   1873e:	fa82 f24c 	uadd8	r2, r2, ip
   18742:	f100 0008 	add.w	r0, r0, #8
   18746:	faa4 f28c 	sel	r2, r4, ip
   1874a:	fa83 f34c 	uadd8	r3, r3, ip
   1874e:	faa2 f38c 	sel	r3, r2, ip
   18752:	2b00      	cmp	r3, #0
   18754:	d0c6      	beq.n	186e4 <strlen+0x24>
   18756:	2a00      	cmp	r2, #0
   18758:	bf04      	itt	eq
   1875a:	3004      	addeq	r0, #4
   1875c:	461a      	moveq	r2, r3
   1875e:	ba12      	rev	r2, r2
   18760:	fab2 f282 	clz	r2, r2
   18764:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   18768:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   1876c:	4770      	bx	lr
   1876e:	e9d1 2300 	ldrd	r2, r3, [r1]
   18772:	f004 0503 	and.w	r5, r4, #3
   18776:	f1c4 0000 	rsb	r0, r4, #0
   1877a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1877e:	f014 0f04 	tst.w	r4, #4
   18782:	f891 f040 	pld	[r1, #64]	; 0x40
   18786:	fa0c f505 	lsl.w	r5, ip, r5
   1878a:	ea62 0205 	orn	r2, r2, r5
   1878e:	bf1c      	itt	ne
   18790:	ea63 0305 	ornne	r3, r3, r5
   18794:	4662      	movne	r2, ip
   18796:	f04f 0400 	mov.w	r4, #0
   1879a:	e7a9      	b.n	186f0 <strlen+0x30>

0001879c <__aeabi_drsub>:
   1879c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   187a0:	e002      	b.n	187a8 <__adddf3>
   187a2:	bf00      	nop

000187a4 <__aeabi_dsub>:
   187a4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000187a8 <__adddf3>:
   187a8:	b530      	push	{r4, r5, lr}
   187aa:	ea4f 0441 	mov.w	r4, r1, lsl #1
   187ae:	ea4f 0543 	mov.w	r5, r3, lsl #1
   187b2:	ea94 0f05 	teq	r4, r5
   187b6:	bf08      	it	eq
   187b8:	ea90 0f02 	teqeq	r0, r2
   187bc:	bf1f      	itttt	ne
   187be:	ea54 0c00 	orrsne.w	ip, r4, r0
   187c2:	ea55 0c02 	orrsne.w	ip, r5, r2
   187c6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   187ca:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   187ce:	f000 80e2 	beq.w	18996 <__adddf3+0x1ee>
   187d2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   187d6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   187da:	bfb8      	it	lt
   187dc:	426d      	neglt	r5, r5
   187de:	dd0c      	ble.n	187fa <__adddf3+0x52>
   187e0:	442c      	add	r4, r5
   187e2:	ea80 0202 	eor.w	r2, r0, r2
   187e6:	ea81 0303 	eor.w	r3, r1, r3
   187ea:	ea82 0000 	eor.w	r0, r2, r0
   187ee:	ea83 0101 	eor.w	r1, r3, r1
   187f2:	ea80 0202 	eor.w	r2, r0, r2
   187f6:	ea81 0303 	eor.w	r3, r1, r3
   187fa:	2d36      	cmp	r5, #54	; 0x36
   187fc:	bf88      	it	hi
   187fe:	bd30      	pophi	{r4, r5, pc}
   18800:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   18804:	ea4f 3101 	mov.w	r1, r1, lsl #12
   18808:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1880c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   18810:	d002      	beq.n	18818 <__adddf3+0x70>
   18812:	4240      	negs	r0, r0
   18814:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18818:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1881c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   18820:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   18824:	d002      	beq.n	1882c <__adddf3+0x84>
   18826:	4252      	negs	r2, r2
   18828:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1882c:	ea94 0f05 	teq	r4, r5
   18830:	f000 80a7 	beq.w	18982 <__adddf3+0x1da>
   18834:	f1a4 0401 	sub.w	r4, r4, #1
   18838:	f1d5 0e20 	rsbs	lr, r5, #32
   1883c:	db0d      	blt.n	1885a <__adddf3+0xb2>
   1883e:	fa02 fc0e 	lsl.w	ip, r2, lr
   18842:	fa22 f205 	lsr.w	r2, r2, r5
   18846:	1880      	adds	r0, r0, r2
   18848:	f141 0100 	adc.w	r1, r1, #0
   1884c:	fa03 f20e 	lsl.w	r2, r3, lr
   18850:	1880      	adds	r0, r0, r2
   18852:	fa43 f305 	asr.w	r3, r3, r5
   18856:	4159      	adcs	r1, r3
   18858:	e00e      	b.n	18878 <__adddf3+0xd0>
   1885a:	f1a5 0520 	sub.w	r5, r5, #32
   1885e:	f10e 0e20 	add.w	lr, lr, #32
   18862:	2a01      	cmp	r2, #1
   18864:	fa03 fc0e 	lsl.w	ip, r3, lr
   18868:	bf28      	it	cs
   1886a:	f04c 0c02 	orrcs.w	ip, ip, #2
   1886e:	fa43 f305 	asr.w	r3, r3, r5
   18872:	18c0      	adds	r0, r0, r3
   18874:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   18878:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1887c:	d507      	bpl.n	1888e <__adddf3+0xe6>
   1887e:	f04f 0e00 	mov.w	lr, #0
   18882:	f1dc 0c00 	rsbs	ip, ip, #0
   18886:	eb7e 0000 	sbcs.w	r0, lr, r0
   1888a:	eb6e 0101 	sbc.w	r1, lr, r1
   1888e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   18892:	d31b      	bcc.n	188cc <__adddf3+0x124>
   18894:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   18898:	d30c      	bcc.n	188b4 <__adddf3+0x10c>
   1889a:	0849      	lsrs	r1, r1, #1
   1889c:	ea5f 0030 	movs.w	r0, r0, rrx
   188a0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   188a4:	f104 0401 	add.w	r4, r4, #1
   188a8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   188ac:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   188b0:	f080 809a 	bcs.w	189e8 <__adddf3+0x240>
   188b4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   188b8:	bf08      	it	eq
   188ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   188be:	f150 0000 	adcs.w	r0, r0, #0
   188c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   188c6:	ea41 0105 	orr.w	r1, r1, r5
   188ca:	bd30      	pop	{r4, r5, pc}
   188cc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   188d0:	4140      	adcs	r0, r0
   188d2:	eb41 0101 	adc.w	r1, r1, r1
   188d6:	3c01      	subs	r4, #1
   188d8:	bf28      	it	cs
   188da:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   188de:	d2e9      	bcs.n	188b4 <__adddf3+0x10c>
   188e0:	f091 0f00 	teq	r1, #0
   188e4:	bf04      	itt	eq
   188e6:	4601      	moveq	r1, r0
   188e8:	2000      	moveq	r0, #0
   188ea:	fab1 f381 	clz	r3, r1
   188ee:	bf08      	it	eq
   188f0:	3320      	addeq	r3, #32
   188f2:	f1a3 030b 	sub.w	r3, r3, #11
   188f6:	f1b3 0220 	subs.w	r2, r3, #32
   188fa:	da0c      	bge.n	18916 <__adddf3+0x16e>
   188fc:	320c      	adds	r2, #12
   188fe:	dd08      	ble.n	18912 <__adddf3+0x16a>
   18900:	f102 0c14 	add.w	ip, r2, #20
   18904:	f1c2 020c 	rsb	r2, r2, #12
   18908:	fa01 f00c 	lsl.w	r0, r1, ip
   1890c:	fa21 f102 	lsr.w	r1, r1, r2
   18910:	e00c      	b.n	1892c <__adddf3+0x184>
   18912:	f102 0214 	add.w	r2, r2, #20
   18916:	bfd8      	it	le
   18918:	f1c2 0c20 	rsble	ip, r2, #32
   1891c:	fa01 f102 	lsl.w	r1, r1, r2
   18920:	fa20 fc0c 	lsr.w	ip, r0, ip
   18924:	bfdc      	itt	le
   18926:	ea41 010c 	orrle.w	r1, r1, ip
   1892a:	4090      	lslle	r0, r2
   1892c:	1ae4      	subs	r4, r4, r3
   1892e:	bfa2      	ittt	ge
   18930:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   18934:	4329      	orrge	r1, r5
   18936:	bd30      	popge	{r4, r5, pc}
   18938:	ea6f 0404 	mvn.w	r4, r4
   1893c:	3c1f      	subs	r4, #31
   1893e:	da1c      	bge.n	1897a <__adddf3+0x1d2>
   18940:	340c      	adds	r4, #12
   18942:	dc0e      	bgt.n	18962 <__adddf3+0x1ba>
   18944:	f104 0414 	add.w	r4, r4, #20
   18948:	f1c4 0220 	rsb	r2, r4, #32
   1894c:	fa20 f004 	lsr.w	r0, r0, r4
   18950:	fa01 f302 	lsl.w	r3, r1, r2
   18954:	ea40 0003 	orr.w	r0, r0, r3
   18958:	fa21 f304 	lsr.w	r3, r1, r4
   1895c:	ea45 0103 	orr.w	r1, r5, r3
   18960:	bd30      	pop	{r4, r5, pc}
   18962:	f1c4 040c 	rsb	r4, r4, #12
   18966:	f1c4 0220 	rsb	r2, r4, #32
   1896a:	fa20 f002 	lsr.w	r0, r0, r2
   1896e:	fa01 f304 	lsl.w	r3, r1, r4
   18972:	ea40 0003 	orr.w	r0, r0, r3
   18976:	4629      	mov	r1, r5
   18978:	bd30      	pop	{r4, r5, pc}
   1897a:	fa21 f004 	lsr.w	r0, r1, r4
   1897e:	4629      	mov	r1, r5
   18980:	bd30      	pop	{r4, r5, pc}
   18982:	f094 0f00 	teq	r4, #0
   18986:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1898a:	bf06      	itte	eq
   1898c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   18990:	3401      	addeq	r4, #1
   18992:	3d01      	subne	r5, #1
   18994:	e74e      	b.n	18834 <__adddf3+0x8c>
   18996:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1899a:	bf18      	it	ne
   1899c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   189a0:	d029      	beq.n	189f6 <__adddf3+0x24e>
   189a2:	ea94 0f05 	teq	r4, r5
   189a6:	bf08      	it	eq
   189a8:	ea90 0f02 	teqeq	r0, r2
   189ac:	d005      	beq.n	189ba <__adddf3+0x212>
   189ae:	ea54 0c00 	orrs.w	ip, r4, r0
   189b2:	bf04      	itt	eq
   189b4:	4619      	moveq	r1, r3
   189b6:	4610      	moveq	r0, r2
   189b8:	bd30      	pop	{r4, r5, pc}
   189ba:	ea91 0f03 	teq	r1, r3
   189be:	bf1e      	ittt	ne
   189c0:	2100      	movne	r1, #0
   189c2:	2000      	movne	r0, #0
   189c4:	bd30      	popne	{r4, r5, pc}
   189c6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   189ca:	d105      	bne.n	189d8 <__adddf3+0x230>
   189cc:	0040      	lsls	r0, r0, #1
   189ce:	4149      	adcs	r1, r1
   189d0:	bf28      	it	cs
   189d2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   189d6:	bd30      	pop	{r4, r5, pc}
   189d8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   189dc:	bf3c      	itt	cc
   189de:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   189e2:	bd30      	popcc	{r4, r5, pc}
   189e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   189e8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   189ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   189f0:	f04f 0000 	mov.w	r0, #0
   189f4:	bd30      	pop	{r4, r5, pc}
   189f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   189fa:	bf1a      	itte	ne
   189fc:	4619      	movne	r1, r3
   189fe:	4610      	movne	r0, r2
   18a00:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   18a04:	bf1c      	itt	ne
   18a06:	460b      	movne	r3, r1
   18a08:	4602      	movne	r2, r0
   18a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   18a0e:	bf06      	itte	eq
   18a10:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   18a14:	ea91 0f03 	teqeq	r1, r3
   18a18:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   18a1c:	bd30      	pop	{r4, r5, pc}
   18a1e:	bf00      	nop

00018a20 <__aeabi_ui2d>:
   18a20:	f090 0f00 	teq	r0, #0
   18a24:	bf04      	itt	eq
   18a26:	2100      	moveq	r1, #0
   18a28:	4770      	bxeq	lr
   18a2a:	b530      	push	{r4, r5, lr}
   18a2c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   18a30:	f104 0432 	add.w	r4, r4, #50	; 0x32
   18a34:	f04f 0500 	mov.w	r5, #0
   18a38:	f04f 0100 	mov.w	r1, #0
   18a3c:	e750      	b.n	188e0 <__adddf3+0x138>
   18a3e:	bf00      	nop

00018a40 <__aeabi_i2d>:
   18a40:	f090 0f00 	teq	r0, #0
   18a44:	bf04      	itt	eq
   18a46:	2100      	moveq	r1, #0
   18a48:	4770      	bxeq	lr
   18a4a:	b530      	push	{r4, r5, lr}
   18a4c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   18a50:	f104 0432 	add.w	r4, r4, #50	; 0x32
   18a54:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   18a58:	bf48      	it	mi
   18a5a:	4240      	negmi	r0, r0
   18a5c:	f04f 0100 	mov.w	r1, #0
   18a60:	e73e      	b.n	188e0 <__adddf3+0x138>
   18a62:	bf00      	nop

00018a64 <__aeabi_f2d>:
   18a64:	0042      	lsls	r2, r0, #1
   18a66:	ea4f 01e2 	mov.w	r1, r2, asr #3
   18a6a:	ea4f 0131 	mov.w	r1, r1, rrx
   18a6e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   18a72:	bf1f      	itttt	ne
   18a74:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   18a78:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   18a7c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   18a80:	4770      	bxne	lr
   18a82:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   18a86:	bf08      	it	eq
   18a88:	4770      	bxeq	lr
   18a8a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   18a8e:	bf04      	itt	eq
   18a90:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   18a94:	4770      	bxeq	lr
   18a96:	b530      	push	{r4, r5, lr}
   18a98:	f44f 7460 	mov.w	r4, #896	; 0x380
   18a9c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   18aa0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   18aa4:	e71c      	b.n	188e0 <__adddf3+0x138>
   18aa6:	bf00      	nop

00018aa8 <__aeabi_ul2d>:
   18aa8:	ea50 0201 	orrs.w	r2, r0, r1
   18aac:	bf08      	it	eq
   18aae:	4770      	bxeq	lr
   18ab0:	b530      	push	{r4, r5, lr}
   18ab2:	f04f 0500 	mov.w	r5, #0
   18ab6:	e00a      	b.n	18ace <__aeabi_l2d+0x16>

00018ab8 <__aeabi_l2d>:
   18ab8:	ea50 0201 	orrs.w	r2, r0, r1
   18abc:	bf08      	it	eq
   18abe:	4770      	bxeq	lr
   18ac0:	b530      	push	{r4, r5, lr}
   18ac2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   18ac6:	d502      	bpl.n	18ace <__aeabi_l2d+0x16>
   18ac8:	4240      	negs	r0, r0
   18aca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18ace:	f44f 6480 	mov.w	r4, #1024	; 0x400
   18ad2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   18ad6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   18ada:	f43f aed8 	beq.w	1888e <__adddf3+0xe6>
   18ade:	f04f 0203 	mov.w	r2, #3
   18ae2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   18ae6:	bf18      	it	ne
   18ae8:	3203      	addne	r2, #3
   18aea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   18aee:	bf18      	it	ne
   18af0:	3203      	addne	r2, #3
   18af2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   18af6:	f1c2 0320 	rsb	r3, r2, #32
   18afa:	fa00 fc03 	lsl.w	ip, r0, r3
   18afe:	fa20 f002 	lsr.w	r0, r0, r2
   18b02:	fa01 fe03 	lsl.w	lr, r1, r3
   18b06:	ea40 000e 	orr.w	r0, r0, lr
   18b0a:	fa21 f102 	lsr.w	r1, r1, r2
   18b0e:	4414      	add	r4, r2
   18b10:	e6bd      	b.n	1888e <__adddf3+0xe6>
   18b12:	bf00      	nop

00018b14 <__aeabi_dmul>:
   18b14:	b570      	push	{r4, r5, r6, lr}
   18b16:	f04f 0cff 	mov.w	ip, #255	; 0xff
   18b1a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   18b1e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   18b22:	bf1d      	ittte	ne
   18b24:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   18b28:	ea94 0f0c 	teqne	r4, ip
   18b2c:	ea95 0f0c 	teqne	r5, ip
   18b30:	f000 f8de 	bleq	18cf0 <__aeabi_dmul+0x1dc>
   18b34:	442c      	add	r4, r5
   18b36:	ea81 0603 	eor.w	r6, r1, r3
   18b3a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   18b3e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   18b42:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   18b46:	bf18      	it	ne
   18b48:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   18b4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18b50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   18b54:	d038      	beq.n	18bc8 <__aeabi_dmul+0xb4>
   18b56:	fba0 ce02 	umull	ip, lr, r0, r2
   18b5a:	f04f 0500 	mov.w	r5, #0
   18b5e:	fbe1 e502 	umlal	lr, r5, r1, r2
   18b62:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   18b66:	fbe0 e503 	umlal	lr, r5, r0, r3
   18b6a:	f04f 0600 	mov.w	r6, #0
   18b6e:	fbe1 5603 	umlal	r5, r6, r1, r3
   18b72:	f09c 0f00 	teq	ip, #0
   18b76:	bf18      	it	ne
   18b78:	f04e 0e01 	orrne.w	lr, lr, #1
   18b7c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   18b80:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   18b84:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   18b88:	d204      	bcs.n	18b94 <__aeabi_dmul+0x80>
   18b8a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   18b8e:	416d      	adcs	r5, r5
   18b90:	eb46 0606 	adc.w	r6, r6, r6
   18b94:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   18b98:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   18b9c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   18ba0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   18ba4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   18ba8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   18bac:	bf88      	it	hi
   18bae:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   18bb2:	d81e      	bhi.n	18bf2 <__aeabi_dmul+0xde>
   18bb4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   18bb8:	bf08      	it	eq
   18bba:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   18bbe:	f150 0000 	adcs.w	r0, r0, #0
   18bc2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   18bc6:	bd70      	pop	{r4, r5, r6, pc}
   18bc8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   18bcc:	ea46 0101 	orr.w	r1, r6, r1
   18bd0:	ea40 0002 	orr.w	r0, r0, r2
   18bd4:	ea81 0103 	eor.w	r1, r1, r3
   18bd8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   18bdc:	bfc2      	ittt	gt
   18bde:	ebd4 050c 	rsbsgt	r5, r4, ip
   18be2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   18be6:	bd70      	popgt	{r4, r5, r6, pc}
   18be8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18bec:	f04f 0e00 	mov.w	lr, #0
   18bf0:	3c01      	subs	r4, #1
   18bf2:	f300 80ab 	bgt.w	18d4c <__aeabi_dmul+0x238>
   18bf6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   18bfa:	bfde      	ittt	le
   18bfc:	2000      	movle	r0, #0
   18bfe:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   18c02:	bd70      	pople	{r4, r5, r6, pc}
   18c04:	f1c4 0400 	rsb	r4, r4, #0
   18c08:	3c20      	subs	r4, #32
   18c0a:	da35      	bge.n	18c78 <__aeabi_dmul+0x164>
   18c0c:	340c      	adds	r4, #12
   18c0e:	dc1b      	bgt.n	18c48 <__aeabi_dmul+0x134>
   18c10:	f104 0414 	add.w	r4, r4, #20
   18c14:	f1c4 0520 	rsb	r5, r4, #32
   18c18:	fa00 f305 	lsl.w	r3, r0, r5
   18c1c:	fa20 f004 	lsr.w	r0, r0, r4
   18c20:	fa01 f205 	lsl.w	r2, r1, r5
   18c24:	ea40 0002 	orr.w	r0, r0, r2
   18c28:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   18c2c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   18c30:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   18c34:	fa21 f604 	lsr.w	r6, r1, r4
   18c38:	eb42 0106 	adc.w	r1, r2, r6
   18c3c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   18c40:	bf08      	it	eq
   18c42:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   18c46:	bd70      	pop	{r4, r5, r6, pc}
   18c48:	f1c4 040c 	rsb	r4, r4, #12
   18c4c:	f1c4 0520 	rsb	r5, r4, #32
   18c50:	fa00 f304 	lsl.w	r3, r0, r4
   18c54:	fa20 f005 	lsr.w	r0, r0, r5
   18c58:	fa01 f204 	lsl.w	r2, r1, r4
   18c5c:	ea40 0002 	orr.w	r0, r0, r2
   18c60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   18c64:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   18c68:	f141 0100 	adc.w	r1, r1, #0
   18c6c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   18c70:	bf08      	it	eq
   18c72:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   18c76:	bd70      	pop	{r4, r5, r6, pc}
   18c78:	f1c4 0520 	rsb	r5, r4, #32
   18c7c:	fa00 f205 	lsl.w	r2, r0, r5
   18c80:	ea4e 0e02 	orr.w	lr, lr, r2
   18c84:	fa20 f304 	lsr.w	r3, r0, r4
   18c88:	fa01 f205 	lsl.w	r2, r1, r5
   18c8c:	ea43 0302 	orr.w	r3, r3, r2
   18c90:	fa21 f004 	lsr.w	r0, r1, r4
   18c94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   18c98:	fa21 f204 	lsr.w	r2, r1, r4
   18c9c:	ea20 0002 	bic.w	r0, r0, r2
   18ca0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   18ca4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   18ca8:	bf08      	it	eq
   18caa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   18cae:	bd70      	pop	{r4, r5, r6, pc}
   18cb0:	f094 0f00 	teq	r4, #0
   18cb4:	d10f      	bne.n	18cd6 <__aeabi_dmul+0x1c2>
   18cb6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   18cba:	0040      	lsls	r0, r0, #1
   18cbc:	eb41 0101 	adc.w	r1, r1, r1
   18cc0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   18cc4:	bf08      	it	eq
   18cc6:	3c01      	subeq	r4, #1
   18cc8:	d0f7      	beq.n	18cba <__aeabi_dmul+0x1a6>
   18cca:	ea41 0106 	orr.w	r1, r1, r6
   18cce:	f095 0f00 	teq	r5, #0
   18cd2:	bf18      	it	ne
   18cd4:	4770      	bxne	lr
   18cd6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   18cda:	0052      	lsls	r2, r2, #1
   18cdc:	eb43 0303 	adc.w	r3, r3, r3
   18ce0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   18ce4:	bf08      	it	eq
   18ce6:	3d01      	subeq	r5, #1
   18ce8:	d0f7      	beq.n	18cda <__aeabi_dmul+0x1c6>
   18cea:	ea43 0306 	orr.w	r3, r3, r6
   18cee:	4770      	bx	lr
   18cf0:	ea94 0f0c 	teq	r4, ip
   18cf4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   18cf8:	bf18      	it	ne
   18cfa:	ea95 0f0c 	teqne	r5, ip
   18cfe:	d00c      	beq.n	18d1a <__aeabi_dmul+0x206>
   18d00:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   18d04:	bf18      	it	ne
   18d06:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   18d0a:	d1d1      	bne.n	18cb0 <__aeabi_dmul+0x19c>
   18d0c:	ea81 0103 	eor.w	r1, r1, r3
   18d10:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   18d14:	f04f 0000 	mov.w	r0, #0
   18d18:	bd70      	pop	{r4, r5, r6, pc}
   18d1a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   18d1e:	bf06      	itte	eq
   18d20:	4610      	moveq	r0, r2
   18d22:	4619      	moveq	r1, r3
   18d24:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   18d28:	d019      	beq.n	18d5e <__aeabi_dmul+0x24a>
   18d2a:	ea94 0f0c 	teq	r4, ip
   18d2e:	d102      	bne.n	18d36 <__aeabi_dmul+0x222>
   18d30:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   18d34:	d113      	bne.n	18d5e <__aeabi_dmul+0x24a>
   18d36:	ea95 0f0c 	teq	r5, ip
   18d3a:	d105      	bne.n	18d48 <__aeabi_dmul+0x234>
   18d3c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   18d40:	bf1c      	itt	ne
   18d42:	4610      	movne	r0, r2
   18d44:	4619      	movne	r1, r3
   18d46:	d10a      	bne.n	18d5e <__aeabi_dmul+0x24a>
   18d48:	ea81 0103 	eor.w	r1, r1, r3
   18d4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   18d50:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   18d54:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   18d58:	f04f 0000 	mov.w	r0, #0
   18d5c:	bd70      	pop	{r4, r5, r6, pc}
   18d5e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   18d62:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   18d66:	bd70      	pop	{r4, r5, r6, pc}

00018d68 <__aeabi_ddiv>:
   18d68:	b570      	push	{r4, r5, r6, lr}
   18d6a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   18d6e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   18d72:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   18d76:	bf1d      	ittte	ne
   18d78:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   18d7c:	ea94 0f0c 	teqne	r4, ip
   18d80:	ea95 0f0c 	teqne	r5, ip
   18d84:	f000 f8a7 	bleq	18ed6 <__aeabi_ddiv+0x16e>
   18d88:	eba4 0405 	sub.w	r4, r4, r5
   18d8c:	ea81 0e03 	eor.w	lr, r1, r3
   18d90:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   18d94:	ea4f 3101 	mov.w	r1, r1, lsl #12
   18d98:	f000 8088 	beq.w	18eac <__aeabi_ddiv+0x144>
   18d9c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   18da0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   18da4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   18da8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   18dac:	ea4f 2202 	mov.w	r2, r2, lsl #8
   18db0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   18db4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   18db8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   18dbc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   18dc0:	429d      	cmp	r5, r3
   18dc2:	bf08      	it	eq
   18dc4:	4296      	cmpeq	r6, r2
   18dc6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   18dca:	f504 7440 	add.w	r4, r4, #768	; 0x300
   18dce:	d202      	bcs.n	18dd6 <__aeabi_ddiv+0x6e>
   18dd0:	085b      	lsrs	r3, r3, #1
   18dd2:	ea4f 0232 	mov.w	r2, r2, rrx
   18dd6:	1ab6      	subs	r6, r6, r2
   18dd8:	eb65 0503 	sbc.w	r5, r5, r3
   18ddc:	085b      	lsrs	r3, r3, #1
   18dde:	ea4f 0232 	mov.w	r2, r2, rrx
   18de2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   18de6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   18dea:	ebb6 0e02 	subs.w	lr, r6, r2
   18dee:	eb75 0e03 	sbcs.w	lr, r5, r3
   18df2:	bf22      	ittt	cs
   18df4:	1ab6      	subcs	r6, r6, r2
   18df6:	4675      	movcs	r5, lr
   18df8:	ea40 000c 	orrcs.w	r0, r0, ip
   18dfc:	085b      	lsrs	r3, r3, #1
   18dfe:	ea4f 0232 	mov.w	r2, r2, rrx
   18e02:	ebb6 0e02 	subs.w	lr, r6, r2
   18e06:	eb75 0e03 	sbcs.w	lr, r5, r3
   18e0a:	bf22      	ittt	cs
   18e0c:	1ab6      	subcs	r6, r6, r2
   18e0e:	4675      	movcs	r5, lr
   18e10:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   18e14:	085b      	lsrs	r3, r3, #1
   18e16:	ea4f 0232 	mov.w	r2, r2, rrx
   18e1a:	ebb6 0e02 	subs.w	lr, r6, r2
   18e1e:	eb75 0e03 	sbcs.w	lr, r5, r3
   18e22:	bf22      	ittt	cs
   18e24:	1ab6      	subcs	r6, r6, r2
   18e26:	4675      	movcs	r5, lr
   18e28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   18e2c:	085b      	lsrs	r3, r3, #1
   18e2e:	ea4f 0232 	mov.w	r2, r2, rrx
   18e32:	ebb6 0e02 	subs.w	lr, r6, r2
   18e36:	eb75 0e03 	sbcs.w	lr, r5, r3
   18e3a:	bf22      	ittt	cs
   18e3c:	1ab6      	subcs	r6, r6, r2
   18e3e:	4675      	movcs	r5, lr
   18e40:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   18e44:	ea55 0e06 	orrs.w	lr, r5, r6
   18e48:	d018      	beq.n	18e7c <__aeabi_ddiv+0x114>
   18e4a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   18e4e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   18e52:	ea4f 1606 	mov.w	r6, r6, lsl #4
   18e56:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   18e5a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   18e5e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   18e62:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   18e66:	d1c0      	bne.n	18dea <__aeabi_ddiv+0x82>
   18e68:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   18e6c:	d10b      	bne.n	18e86 <__aeabi_ddiv+0x11e>
   18e6e:	ea41 0100 	orr.w	r1, r1, r0
   18e72:	f04f 0000 	mov.w	r0, #0
   18e76:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   18e7a:	e7b6      	b.n	18dea <__aeabi_ddiv+0x82>
   18e7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   18e80:	bf04      	itt	eq
   18e82:	4301      	orreq	r1, r0
   18e84:	2000      	moveq	r0, #0
   18e86:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   18e8a:	bf88      	it	hi
   18e8c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   18e90:	f63f aeaf 	bhi.w	18bf2 <__aeabi_dmul+0xde>
   18e94:	ebb5 0c03 	subs.w	ip, r5, r3
   18e98:	bf04      	itt	eq
   18e9a:	ebb6 0c02 	subseq.w	ip, r6, r2
   18e9e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   18ea2:	f150 0000 	adcs.w	r0, r0, #0
   18ea6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   18eaa:	bd70      	pop	{r4, r5, r6, pc}
   18eac:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   18eb0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   18eb4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   18eb8:	bfc2      	ittt	gt
   18eba:	ebd4 050c 	rsbsgt	r5, r4, ip
   18ebe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   18ec2:	bd70      	popgt	{r4, r5, r6, pc}
   18ec4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18ec8:	f04f 0e00 	mov.w	lr, #0
   18ecc:	3c01      	subs	r4, #1
   18ece:	e690      	b.n	18bf2 <__aeabi_dmul+0xde>
   18ed0:	ea45 0e06 	orr.w	lr, r5, r6
   18ed4:	e68d      	b.n	18bf2 <__aeabi_dmul+0xde>
   18ed6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   18eda:	ea94 0f0c 	teq	r4, ip
   18ede:	bf08      	it	eq
   18ee0:	ea95 0f0c 	teqeq	r5, ip
   18ee4:	f43f af3b 	beq.w	18d5e <__aeabi_dmul+0x24a>
   18ee8:	ea94 0f0c 	teq	r4, ip
   18eec:	d10a      	bne.n	18f04 <__aeabi_ddiv+0x19c>
   18eee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   18ef2:	f47f af34 	bne.w	18d5e <__aeabi_dmul+0x24a>
   18ef6:	ea95 0f0c 	teq	r5, ip
   18efa:	f47f af25 	bne.w	18d48 <__aeabi_dmul+0x234>
   18efe:	4610      	mov	r0, r2
   18f00:	4619      	mov	r1, r3
   18f02:	e72c      	b.n	18d5e <__aeabi_dmul+0x24a>
   18f04:	ea95 0f0c 	teq	r5, ip
   18f08:	d106      	bne.n	18f18 <__aeabi_ddiv+0x1b0>
   18f0a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   18f0e:	f43f aefd 	beq.w	18d0c <__aeabi_dmul+0x1f8>
   18f12:	4610      	mov	r0, r2
   18f14:	4619      	mov	r1, r3
   18f16:	e722      	b.n	18d5e <__aeabi_dmul+0x24a>
   18f18:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   18f1c:	bf18      	it	ne
   18f1e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   18f22:	f47f aec5 	bne.w	18cb0 <__aeabi_dmul+0x19c>
   18f26:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   18f2a:	f47f af0d 	bne.w	18d48 <__aeabi_dmul+0x234>
   18f2e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   18f32:	f47f aeeb 	bne.w	18d0c <__aeabi_dmul+0x1f8>
   18f36:	e712      	b.n	18d5e <__aeabi_dmul+0x24a>

00018f38 <__gedf2>:
   18f38:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   18f3c:	e006      	b.n	18f4c <__cmpdf2+0x4>
   18f3e:	bf00      	nop

00018f40 <__ledf2>:
   18f40:	f04f 0c01 	mov.w	ip, #1
   18f44:	e002      	b.n	18f4c <__cmpdf2+0x4>
   18f46:	bf00      	nop

00018f48 <__cmpdf2>:
   18f48:	f04f 0c01 	mov.w	ip, #1
   18f4c:	f84d cd04 	str.w	ip, [sp, #-4]!
   18f50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   18f54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   18f58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   18f5c:	bf18      	it	ne
   18f5e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   18f62:	d01b      	beq.n	18f9c <__cmpdf2+0x54>
   18f64:	b001      	add	sp, #4
   18f66:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   18f6a:	bf0c      	ite	eq
   18f6c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   18f70:	ea91 0f03 	teqne	r1, r3
   18f74:	bf02      	ittt	eq
   18f76:	ea90 0f02 	teqeq	r0, r2
   18f7a:	2000      	moveq	r0, #0
   18f7c:	4770      	bxeq	lr
   18f7e:	f110 0f00 	cmn.w	r0, #0
   18f82:	ea91 0f03 	teq	r1, r3
   18f86:	bf58      	it	pl
   18f88:	4299      	cmppl	r1, r3
   18f8a:	bf08      	it	eq
   18f8c:	4290      	cmpeq	r0, r2
   18f8e:	bf2c      	ite	cs
   18f90:	17d8      	asrcs	r0, r3, #31
   18f92:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   18f96:	f040 0001 	orr.w	r0, r0, #1
   18f9a:	4770      	bx	lr
   18f9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   18fa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   18fa4:	d102      	bne.n	18fac <__cmpdf2+0x64>
   18fa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   18faa:	d107      	bne.n	18fbc <__cmpdf2+0x74>
   18fac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   18fb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   18fb4:	d1d6      	bne.n	18f64 <__cmpdf2+0x1c>
   18fb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   18fba:	d0d3      	beq.n	18f64 <__cmpdf2+0x1c>
   18fbc:	f85d 0b04 	ldr.w	r0, [sp], #4
   18fc0:	4770      	bx	lr
   18fc2:	bf00      	nop

00018fc4 <__aeabi_cdrcmple>:
   18fc4:	4684      	mov	ip, r0
   18fc6:	4610      	mov	r0, r2
   18fc8:	4662      	mov	r2, ip
   18fca:	468c      	mov	ip, r1
   18fcc:	4619      	mov	r1, r3
   18fce:	4663      	mov	r3, ip
   18fd0:	e000      	b.n	18fd4 <__aeabi_cdcmpeq>
   18fd2:	bf00      	nop

00018fd4 <__aeabi_cdcmpeq>:
   18fd4:	b501      	push	{r0, lr}
   18fd6:	f7ff ffb7 	bl	18f48 <__cmpdf2>
   18fda:	2800      	cmp	r0, #0
   18fdc:	bf48      	it	mi
   18fde:	f110 0f00 	cmnmi.w	r0, #0
   18fe2:	bd01      	pop	{r0, pc}

00018fe4 <__aeabi_dcmpeq>:
   18fe4:	f84d ed08 	str.w	lr, [sp, #-8]!
   18fe8:	f7ff fff4 	bl	18fd4 <__aeabi_cdcmpeq>
   18fec:	bf0c      	ite	eq
   18fee:	2001      	moveq	r0, #1
   18ff0:	2000      	movne	r0, #0
   18ff2:	f85d fb08 	ldr.w	pc, [sp], #8
   18ff6:	bf00      	nop

00018ff8 <__aeabi_dcmplt>:
   18ff8:	f84d ed08 	str.w	lr, [sp, #-8]!
   18ffc:	f7ff ffea 	bl	18fd4 <__aeabi_cdcmpeq>
   19000:	bf34      	ite	cc
   19002:	2001      	movcc	r0, #1
   19004:	2000      	movcs	r0, #0
   19006:	f85d fb08 	ldr.w	pc, [sp], #8
   1900a:	bf00      	nop

0001900c <__aeabi_dcmple>:
   1900c:	f84d ed08 	str.w	lr, [sp, #-8]!
   19010:	f7ff ffe0 	bl	18fd4 <__aeabi_cdcmpeq>
   19014:	bf94      	ite	ls
   19016:	2001      	movls	r0, #1
   19018:	2000      	movhi	r0, #0
   1901a:	f85d fb08 	ldr.w	pc, [sp], #8
   1901e:	bf00      	nop

00019020 <__aeabi_dcmpge>:
   19020:	f84d ed08 	str.w	lr, [sp, #-8]!
   19024:	f7ff ffce 	bl	18fc4 <__aeabi_cdrcmple>
   19028:	bf94      	ite	ls
   1902a:	2001      	movls	r0, #1
   1902c:	2000      	movhi	r0, #0
   1902e:	f85d fb08 	ldr.w	pc, [sp], #8
   19032:	bf00      	nop

00019034 <__aeabi_dcmpgt>:
   19034:	f84d ed08 	str.w	lr, [sp, #-8]!
   19038:	f7ff ffc4 	bl	18fc4 <__aeabi_cdrcmple>
   1903c:	bf34      	ite	cc
   1903e:	2001      	movcc	r0, #1
   19040:	2000      	movcs	r0, #0
   19042:	f85d fb08 	ldr.w	pc, [sp], #8
   19046:	bf00      	nop

00019048 <__aeabi_dcmpun>:
   19048:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1904c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   19050:	d102      	bne.n	19058 <__aeabi_dcmpun+0x10>
   19052:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   19056:	d10a      	bne.n	1906e <__aeabi_dcmpun+0x26>
   19058:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1905c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   19060:	d102      	bne.n	19068 <__aeabi_dcmpun+0x20>
   19062:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   19066:	d102      	bne.n	1906e <__aeabi_dcmpun+0x26>
   19068:	f04f 0000 	mov.w	r0, #0
   1906c:	4770      	bx	lr
   1906e:	f04f 0001 	mov.w	r0, #1
   19072:	4770      	bx	lr

00019074 <__aeabi_d2iz>:
   19074:	ea4f 0241 	mov.w	r2, r1, lsl #1
   19078:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1907c:	d215      	bcs.n	190aa <__aeabi_d2iz+0x36>
   1907e:	d511      	bpl.n	190a4 <__aeabi_d2iz+0x30>
   19080:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   19084:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   19088:	d912      	bls.n	190b0 <__aeabi_d2iz+0x3c>
   1908a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1908e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   19092:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   19096:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1909a:	fa23 f002 	lsr.w	r0, r3, r2
   1909e:	bf18      	it	ne
   190a0:	4240      	negne	r0, r0
   190a2:	4770      	bx	lr
   190a4:	f04f 0000 	mov.w	r0, #0
   190a8:	4770      	bx	lr
   190aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   190ae:	d105      	bne.n	190bc <__aeabi_d2iz+0x48>
   190b0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   190b4:	bf08      	it	eq
   190b6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   190ba:	4770      	bx	lr
   190bc:	f04f 0000 	mov.w	r0, #0
   190c0:	4770      	bx	lr
   190c2:	bf00      	nop

000190c4 <__aeabi_d2f>:
   190c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   190c8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   190cc:	bf24      	itt	cs
   190ce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   190d2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   190d6:	d90d      	bls.n	190f4 <__aeabi_d2f+0x30>
   190d8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   190dc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   190e0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   190e4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   190e8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   190ec:	bf08      	it	eq
   190ee:	f020 0001 	biceq.w	r0, r0, #1
   190f2:	4770      	bx	lr
   190f4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   190f8:	d121      	bne.n	1913e <__aeabi_d2f+0x7a>
   190fa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   190fe:	bfbc      	itt	lt
   19100:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   19104:	4770      	bxlt	lr
   19106:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1910a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   1910e:	f1c2 0218 	rsb	r2, r2, #24
   19112:	f1c2 0c20 	rsb	ip, r2, #32
   19116:	fa10 f30c 	lsls.w	r3, r0, ip
   1911a:	fa20 f002 	lsr.w	r0, r0, r2
   1911e:	bf18      	it	ne
   19120:	f040 0001 	orrne.w	r0, r0, #1
   19124:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   19128:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   1912c:	fa03 fc0c 	lsl.w	ip, r3, ip
   19130:	ea40 000c 	orr.w	r0, r0, ip
   19134:	fa23 f302 	lsr.w	r3, r3, r2
   19138:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1913c:	e7cc      	b.n	190d8 <__aeabi_d2f+0x14>
   1913e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   19142:	d107      	bne.n	19154 <__aeabi_d2f+0x90>
   19144:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   19148:	bf1e      	ittt	ne
   1914a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   1914e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   19152:	4770      	bxne	lr
   19154:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   19158:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1915c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   19160:	4770      	bx	lr
   19162:	bf00      	nop

00019164 <__aeabi_ldivmod>:
   19164:	b97b      	cbnz	r3, 19186 <__aeabi_ldivmod+0x22>
   19166:	b972      	cbnz	r2, 19186 <__aeabi_ldivmod+0x22>
   19168:	2900      	cmp	r1, #0
   1916a:	bfbe      	ittt	lt
   1916c:	2000      	movlt	r0, #0
   1916e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   19172:	e006      	blt.n	19182 <__aeabi_ldivmod+0x1e>
   19174:	bf08      	it	eq
   19176:	2800      	cmpeq	r0, #0
   19178:	bf1c      	itt	ne
   1917a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   1917e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   19182:	f000 b9bf 	b.w	19504 <__aeabi_idiv0>
   19186:	f1ad 0c08 	sub.w	ip, sp, #8
   1918a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1918e:	2900      	cmp	r1, #0
   19190:	db09      	blt.n	191a6 <__aeabi_ldivmod+0x42>
   19192:	2b00      	cmp	r3, #0
   19194:	db1a      	blt.n	191cc <__aeabi_ldivmod+0x68>
   19196:	f000 f84d 	bl	19234 <__udivmoddi4>
   1919a:	f8dd e004 	ldr.w	lr, [sp, #4]
   1919e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   191a2:	b004      	add	sp, #16
   191a4:	4770      	bx	lr
   191a6:	4240      	negs	r0, r0
   191a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   191ac:	2b00      	cmp	r3, #0
   191ae:	db1b      	blt.n	191e8 <__aeabi_ldivmod+0x84>
   191b0:	f000 f840 	bl	19234 <__udivmoddi4>
   191b4:	f8dd e004 	ldr.w	lr, [sp, #4]
   191b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   191bc:	b004      	add	sp, #16
   191be:	4240      	negs	r0, r0
   191c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   191c4:	4252      	negs	r2, r2
   191c6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   191ca:	4770      	bx	lr
   191cc:	4252      	negs	r2, r2
   191ce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   191d2:	f000 f82f 	bl	19234 <__udivmoddi4>
   191d6:	f8dd e004 	ldr.w	lr, [sp, #4]
   191da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   191de:	b004      	add	sp, #16
   191e0:	4240      	negs	r0, r0
   191e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   191e6:	4770      	bx	lr
   191e8:	4252      	negs	r2, r2
   191ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   191ee:	f000 f821 	bl	19234 <__udivmoddi4>
   191f2:	f8dd e004 	ldr.w	lr, [sp, #4]
   191f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   191fa:	b004      	add	sp, #16
   191fc:	4252      	negs	r2, r2
   191fe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   19202:	4770      	bx	lr

00019204 <__aeabi_uldivmod>:
   19204:	b953      	cbnz	r3, 1921c <__aeabi_uldivmod+0x18>
   19206:	b94a      	cbnz	r2, 1921c <__aeabi_uldivmod+0x18>
   19208:	2900      	cmp	r1, #0
   1920a:	bf08      	it	eq
   1920c:	2800      	cmpeq	r0, #0
   1920e:	bf1c      	itt	ne
   19210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   19214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   19218:	f000 b974 	b.w	19504 <__aeabi_idiv0>
   1921c:	f1ad 0c08 	sub.w	ip, sp, #8
   19220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   19224:	f000 f806 	bl	19234 <__udivmoddi4>
   19228:	f8dd e004 	ldr.w	lr, [sp, #4]
   1922c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   19230:	b004      	add	sp, #16
   19232:	4770      	bx	lr

00019234 <__udivmoddi4>:
   19234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19238:	9d08      	ldr	r5, [sp, #32]
   1923a:	4604      	mov	r4, r0
   1923c:	468e      	mov	lr, r1
   1923e:	2b00      	cmp	r3, #0
   19240:	d14d      	bne.n	192de <__udivmoddi4+0xaa>
   19242:	428a      	cmp	r2, r1
   19244:	4694      	mov	ip, r2
   19246:	d969      	bls.n	1931c <__udivmoddi4+0xe8>
   19248:	fab2 f282 	clz	r2, r2
   1924c:	b152      	cbz	r2, 19264 <__udivmoddi4+0x30>
   1924e:	fa01 f302 	lsl.w	r3, r1, r2
   19252:	f1c2 0120 	rsb	r1, r2, #32
   19256:	fa20 f101 	lsr.w	r1, r0, r1
   1925a:	fa0c fc02 	lsl.w	ip, ip, r2
   1925e:	ea41 0e03 	orr.w	lr, r1, r3
   19262:	4094      	lsls	r4, r2
   19264:	ea4f 481c 	mov.w	r8, ip, lsr #16
   19268:	0c21      	lsrs	r1, r4, #16
   1926a:	fbbe f6f8 	udiv	r6, lr, r8
   1926e:	fa1f f78c 	uxth.w	r7, ip
   19272:	fb08 e316 	mls	r3, r8, r6, lr
   19276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   1927a:	fb06 f107 	mul.w	r1, r6, r7
   1927e:	4299      	cmp	r1, r3
   19280:	d90a      	bls.n	19298 <__udivmoddi4+0x64>
   19282:	eb1c 0303 	adds.w	r3, ip, r3
   19286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   1928a:	f080 811f 	bcs.w	194cc <__udivmoddi4+0x298>
   1928e:	4299      	cmp	r1, r3
   19290:	f240 811c 	bls.w	194cc <__udivmoddi4+0x298>
   19294:	3e02      	subs	r6, #2
   19296:	4463      	add	r3, ip
   19298:	1a5b      	subs	r3, r3, r1
   1929a:	b2a4      	uxth	r4, r4
   1929c:	fbb3 f0f8 	udiv	r0, r3, r8
   192a0:	fb08 3310 	mls	r3, r8, r0, r3
   192a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   192a8:	fb00 f707 	mul.w	r7, r0, r7
   192ac:	42a7      	cmp	r7, r4
   192ae:	d90a      	bls.n	192c6 <__udivmoddi4+0x92>
   192b0:	eb1c 0404 	adds.w	r4, ip, r4
   192b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   192b8:	f080 810a 	bcs.w	194d0 <__udivmoddi4+0x29c>
   192bc:	42a7      	cmp	r7, r4
   192be:	f240 8107 	bls.w	194d0 <__udivmoddi4+0x29c>
   192c2:	4464      	add	r4, ip
   192c4:	3802      	subs	r0, #2
   192c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   192ca:	1be4      	subs	r4, r4, r7
   192cc:	2600      	movs	r6, #0
   192ce:	b11d      	cbz	r5, 192d8 <__udivmoddi4+0xa4>
   192d0:	40d4      	lsrs	r4, r2
   192d2:	2300      	movs	r3, #0
   192d4:	e9c5 4300 	strd	r4, r3, [r5]
   192d8:	4631      	mov	r1, r6
   192da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   192de:	428b      	cmp	r3, r1
   192e0:	d909      	bls.n	192f6 <__udivmoddi4+0xc2>
   192e2:	2d00      	cmp	r5, #0
   192e4:	f000 80ef 	beq.w	194c6 <__udivmoddi4+0x292>
   192e8:	2600      	movs	r6, #0
   192ea:	e9c5 0100 	strd	r0, r1, [r5]
   192ee:	4630      	mov	r0, r6
   192f0:	4631      	mov	r1, r6
   192f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   192f6:	fab3 f683 	clz	r6, r3
   192fa:	2e00      	cmp	r6, #0
   192fc:	d14a      	bne.n	19394 <__udivmoddi4+0x160>
   192fe:	428b      	cmp	r3, r1
   19300:	d302      	bcc.n	19308 <__udivmoddi4+0xd4>
   19302:	4282      	cmp	r2, r0
   19304:	f200 80f9 	bhi.w	194fa <__udivmoddi4+0x2c6>
   19308:	1a84      	subs	r4, r0, r2
   1930a:	eb61 0303 	sbc.w	r3, r1, r3
   1930e:	2001      	movs	r0, #1
   19310:	469e      	mov	lr, r3
   19312:	2d00      	cmp	r5, #0
   19314:	d0e0      	beq.n	192d8 <__udivmoddi4+0xa4>
   19316:	e9c5 4e00 	strd	r4, lr, [r5]
   1931a:	e7dd      	b.n	192d8 <__udivmoddi4+0xa4>
   1931c:	b902      	cbnz	r2, 19320 <__udivmoddi4+0xec>
   1931e:	deff      	udf	#255	; 0xff
   19320:	fab2 f282 	clz	r2, r2
   19324:	2a00      	cmp	r2, #0
   19326:	f040 8092 	bne.w	1944e <__udivmoddi4+0x21a>
   1932a:	eba1 010c 	sub.w	r1, r1, ip
   1932e:	ea4f 471c 	mov.w	r7, ip, lsr #16
   19332:	fa1f fe8c 	uxth.w	lr, ip
   19336:	2601      	movs	r6, #1
   19338:	0c20      	lsrs	r0, r4, #16
   1933a:	fbb1 f3f7 	udiv	r3, r1, r7
   1933e:	fb07 1113 	mls	r1, r7, r3, r1
   19342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   19346:	fb0e f003 	mul.w	r0, lr, r3
   1934a:	4288      	cmp	r0, r1
   1934c:	d908      	bls.n	19360 <__udivmoddi4+0x12c>
   1934e:	eb1c 0101 	adds.w	r1, ip, r1
   19352:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   19356:	d202      	bcs.n	1935e <__udivmoddi4+0x12a>
   19358:	4288      	cmp	r0, r1
   1935a:	f200 80cb 	bhi.w	194f4 <__udivmoddi4+0x2c0>
   1935e:	4643      	mov	r3, r8
   19360:	1a09      	subs	r1, r1, r0
   19362:	b2a4      	uxth	r4, r4
   19364:	fbb1 f0f7 	udiv	r0, r1, r7
   19368:	fb07 1110 	mls	r1, r7, r0, r1
   1936c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   19370:	fb0e fe00 	mul.w	lr, lr, r0
   19374:	45a6      	cmp	lr, r4
   19376:	d908      	bls.n	1938a <__udivmoddi4+0x156>
   19378:	eb1c 0404 	adds.w	r4, ip, r4
   1937c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   19380:	d202      	bcs.n	19388 <__udivmoddi4+0x154>
   19382:	45a6      	cmp	lr, r4
   19384:	f200 80bb 	bhi.w	194fe <__udivmoddi4+0x2ca>
   19388:	4608      	mov	r0, r1
   1938a:	eba4 040e 	sub.w	r4, r4, lr
   1938e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   19392:	e79c      	b.n	192ce <__udivmoddi4+0x9a>
   19394:	f1c6 0720 	rsb	r7, r6, #32
   19398:	40b3      	lsls	r3, r6
   1939a:	fa22 fc07 	lsr.w	ip, r2, r7
   1939e:	ea4c 0c03 	orr.w	ip, ip, r3
   193a2:	fa20 f407 	lsr.w	r4, r0, r7
   193a6:	fa01 f306 	lsl.w	r3, r1, r6
   193aa:	431c      	orrs	r4, r3
   193ac:	40f9      	lsrs	r1, r7
   193ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
   193b2:	fa00 f306 	lsl.w	r3, r0, r6
   193b6:	fbb1 f8f9 	udiv	r8, r1, r9
   193ba:	0c20      	lsrs	r0, r4, #16
   193bc:	fa1f fe8c 	uxth.w	lr, ip
   193c0:	fb09 1118 	mls	r1, r9, r8, r1
   193c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   193c8:	fb08 f00e 	mul.w	r0, r8, lr
   193cc:	4288      	cmp	r0, r1
   193ce:	fa02 f206 	lsl.w	r2, r2, r6
   193d2:	d90b      	bls.n	193ec <__udivmoddi4+0x1b8>
   193d4:	eb1c 0101 	adds.w	r1, ip, r1
   193d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   193dc:	f080 8088 	bcs.w	194f0 <__udivmoddi4+0x2bc>
   193e0:	4288      	cmp	r0, r1
   193e2:	f240 8085 	bls.w	194f0 <__udivmoddi4+0x2bc>
   193e6:	f1a8 0802 	sub.w	r8, r8, #2
   193ea:	4461      	add	r1, ip
   193ec:	1a09      	subs	r1, r1, r0
   193ee:	b2a4      	uxth	r4, r4
   193f0:	fbb1 f0f9 	udiv	r0, r1, r9
   193f4:	fb09 1110 	mls	r1, r9, r0, r1
   193f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   193fc:	fb00 fe0e 	mul.w	lr, r0, lr
   19400:	458e      	cmp	lr, r1
   19402:	d908      	bls.n	19416 <__udivmoddi4+0x1e2>
   19404:	eb1c 0101 	adds.w	r1, ip, r1
   19408:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
   1940c:	d26c      	bcs.n	194e8 <__udivmoddi4+0x2b4>
   1940e:	458e      	cmp	lr, r1
   19410:	d96a      	bls.n	194e8 <__udivmoddi4+0x2b4>
   19412:	3802      	subs	r0, #2
   19414:	4461      	add	r1, ip
   19416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   1941a:	fba0 9402 	umull	r9, r4, r0, r2
   1941e:	eba1 010e 	sub.w	r1, r1, lr
   19422:	42a1      	cmp	r1, r4
   19424:	46c8      	mov	r8, r9
   19426:	46a6      	mov	lr, r4
   19428:	d356      	bcc.n	194d8 <__udivmoddi4+0x2a4>
   1942a:	d053      	beq.n	194d4 <__udivmoddi4+0x2a0>
   1942c:	b15d      	cbz	r5, 19446 <__udivmoddi4+0x212>
   1942e:	ebb3 0208 	subs.w	r2, r3, r8
   19432:	eb61 010e 	sbc.w	r1, r1, lr
   19436:	fa01 f707 	lsl.w	r7, r1, r7
   1943a:	fa22 f306 	lsr.w	r3, r2, r6
   1943e:	40f1      	lsrs	r1, r6
   19440:	431f      	orrs	r7, r3
   19442:	e9c5 7100 	strd	r7, r1, [r5]
   19446:	2600      	movs	r6, #0
   19448:	4631      	mov	r1, r6
   1944a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1944e:	f1c2 0320 	rsb	r3, r2, #32
   19452:	40d8      	lsrs	r0, r3
   19454:	fa0c fc02 	lsl.w	ip, ip, r2
   19458:	fa21 f303 	lsr.w	r3, r1, r3
   1945c:	4091      	lsls	r1, r2
   1945e:	4301      	orrs	r1, r0
   19460:	ea4f 471c 	mov.w	r7, ip, lsr #16
   19464:	fa1f fe8c 	uxth.w	lr, ip
   19468:	fbb3 f0f7 	udiv	r0, r3, r7
   1946c:	fb07 3610 	mls	r6, r7, r0, r3
   19470:	0c0b      	lsrs	r3, r1, #16
   19472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   19476:	fb00 f60e 	mul.w	r6, r0, lr
   1947a:	429e      	cmp	r6, r3
   1947c:	fa04 f402 	lsl.w	r4, r4, r2
   19480:	d908      	bls.n	19494 <__udivmoddi4+0x260>
   19482:	eb1c 0303 	adds.w	r3, ip, r3
   19486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
   1948a:	d22f      	bcs.n	194ec <__udivmoddi4+0x2b8>
   1948c:	429e      	cmp	r6, r3
   1948e:	d92d      	bls.n	194ec <__udivmoddi4+0x2b8>
   19490:	3802      	subs	r0, #2
   19492:	4463      	add	r3, ip
   19494:	1b9b      	subs	r3, r3, r6
   19496:	b289      	uxth	r1, r1
   19498:	fbb3 f6f7 	udiv	r6, r3, r7
   1949c:	fb07 3316 	mls	r3, r7, r6, r3
   194a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   194a4:	fb06 f30e 	mul.w	r3, r6, lr
   194a8:	428b      	cmp	r3, r1
   194aa:	d908      	bls.n	194be <__udivmoddi4+0x28a>
   194ac:	eb1c 0101 	adds.w	r1, ip, r1
   194b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
   194b4:	d216      	bcs.n	194e4 <__udivmoddi4+0x2b0>
   194b6:	428b      	cmp	r3, r1
   194b8:	d914      	bls.n	194e4 <__udivmoddi4+0x2b0>
   194ba:	3e02      	subs	r6, #2
   194bc:	4461      	add	r1, ip
   194be:	1ac9      	subs	r1, r1, r3
   194c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   194c4:	e738      	b.n	19338 <__udivmoddi4+0x104>
   194c6:	462e      	mov	r6, r5
   194c8:	4628      	mov	r0, r5
   194ca:	e705      	b.n	192d8 <__udivmoddi4+0xa4>
   194cc:	4606      	mov	r6, r0
   194ce:	e6e3      	b.n	19298 <__udivmoddi4+0x64>
   194d0:	4618      	mov	r0, r3
   194d2:	e6f8      	b.n	192c6 <__udivmoddi4+0x92>
   194d4:	454b      	cmp	r3, r9
   194d6:	d2a9      	bcs.n	1942c <__udivmoddi4+0x1f8>
   194d8:	ebb9 0802 	subs.w	r8, r9, r2
   194dc:	eb64 0e0c 	sbc.w	lr, r4, ip
   194e0:	3801      	subs	r0, #1
   194e2:	e7a3      	b.n	1942c <__udivmoddi4+0x1f8>
   194e4:	4646      	mov	r6, r8
   194e6:	e7ea      	b.n	194be <__udivmoddi4+0x28a>
   194e8:	4620      	mov	r0, r4
   194ea:	e794      	b.n	19416 <__udivmoddi4+0x1e2>
   194ec:	4640      	mov	r0, r8
   194ee:	e7d1      	b.n	19494 <__udivmoddi4+0x260>
   194f0:	46d0      	mov	r8, sl
   194f2:	e77b      	b.n	193ec <__udivmoddi4+0x1b8>
   194f4:	3b02      	subs	r3, #2
   194f6:	4461      	add	r1, ip
   194f8:	e732      	b.n	19360 <__udivmoddi4+0x12c>
   194fa:	4630      	mov	r0, r6
   194fc:	e709      	b.n	19312 <__udivmoddi4+0xde>
   194fe:	4464      	add	r4, ip
   19500:	3802      	subs	r0, #2
   19502:	e742      	b.n	1938a <__udivmoddi4+0x156>

00019504 <__aeabi_idiv0>:
   19504:	4770      	bx	lr
   19506:	bf00      	nop

00019508 <d_make_comp>:
   19508:	b570      	push	{r4, r5, r6, lr}
   1950a:	1e4c      	subs	r4, r1, #1
   1950c:	2c4f      	cmp	r4, #79	; 0x4f
   1950e:	d841      	bhi.n	19594 <d_make_comp+0x8c>
   19510:	e8df f004 	tbb	[pc, r4]
   19514:	28282828 	.word	0x28282828
   19518:	40404040 	.word	0x40404040
   1951c:	3e283e3e 	.word	0x3e283e3e
   19520:	3e3e3e3e 	.word	0x3e3e3e3e
   19524:	3e3e3e3e 	.word	0x3e3e3e3e
   19528:	403e3e3e 	.word	0x403e3e3e
   1952c:	2a2a2a2a 	.word	0x2a2a2a2a
   19530:	2a2a2a2a 	.word	0x2a2a2a2a
   19534:	3e3e3e28 	.word	0x3e3e3e28
   19538:	3e403e3e 	.word	0x3e403e3e
   1953c:	4028292a 	.word	0x4028292a
   19540:	3e2a2a28 	.word	0x3e2a2a28
   19544:	3e404029 	.word	0x3e404029
   19548:	28283e3e 	.word	0x28283e3e
   1954c:	3e282828 	.word	0x3e282828
   19550:	283e2828 	.word	0x283e2828
   19554:	3e3e4040 	.word	0x3e3e4040
   19558:	4040403e 	.word	0x4040403e
   1955c:	283e3e3e 	.word	0x283e3e3e
   19560:	2a2a282a 	.word	0x2a2a282a
   19564:	b1b2      	cbz	r2, 19594 <d_make_comp+0x8c>
   19566:	b1ab      	cbz	r3, 19594 <d_make_comp+0x8c>
   19568:	e9d0 4505 	ldrd	r4, r5, [r0, #20]
   1956c:	42ac      	cmp	r4, r5
   1956e:	da11      	bge.n	19594 <d_make_comp+0x8c>
   19570:	6905      	ldr	r5, [r0, #16]
   19572:	eb04 0e84 	add.w	lr, r4, r4, lsl #2
   19576:	eb05 0c8e 	add.w	ip, r5, lr, lsl #2
   1957a:	3401      	adds	r4, #1
   1957c:	2600      	movs	r6, #0
   1957e:	e9cc 6601 	strd	r6, r6, [ip, #4]
   19582:	6144      	str	r4, [r0, #20]
   19584:	f805 102e 	strb.w	r1, [r5, lr, lsl #2]
   19588:	4660      	mov	r0, ip
   1958a:	e9cc 2303 	strd	r2, r3, [ip, #12]
   1958e:	bd70      	pop	{r4, r5, r6, pc}
   19590:	2a00      	cmp	r2, #0
   19592:	d1e9      	bne.n	19568 <d_make_comp+0x60>
   19594:	f04f 0c00 	mov.w	ip, #0
   19598:	4660      	mov	r0, ip
   1959a:	bd70      	pop	{r4, r5, r6, pc}

0001959c <d_number>:
   1959c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1959e:	68c2      	ldr	r2, [r0, #12]
   195a0:	7811      	ldrb	r1, [r2, #0]
   195a2:	296e      	cmp	r1, #110	; 0x6e
   195a4:	4686      	mov	lr, r0
   195a6:	d025      	beq.n	195f4 <d_number+0x58>
   195a8:	3930      	subs	r1, #48	; 0x30
   195aa:	b2cb      	uxtb	r3, r1
   195ac:	2b09      	cmp	r3, #9
   195ae:	d82b      	bhi.n	19608 <d_number+0x6c>
   195b0:	2600      	movs	r6, #0
   195b2:	4d16      	ldr	r5, [pc, #88]	; (1960c <d_number+0x70>)
   195b4:	2000      	movs	r0, #0
   195b6:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   195ba:	e002      	b.n	195c2 <d_number+0x26>
   195bc:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
   195c0:	dc15      	bgt.n	195ee <d_number+0x52>
   195c2:	3201      	adds	r2, #1
   195c4:	f8ce 200c 	str.w	r2, [lr, #12]
   195c8:	7813      	ldrb	r3, [r2, #0]
   195ca:	3b30      	subs	r3, #48	; 0x30
   195cc:	fa5f fc83 	uxtb.w	ip, r3
   195d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   195d4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
   195d8:	f1bc 0f09 	cmp.w	ip, #9
   195dc:	4619      	mov	r1, r3
   195de:	eba4 0303 	sub.w	r3, r4, r3
   195e2:	fba5 7303 	umull	r7, r3, r5, r3
   195e6:	d9e9      	bls.n	195bc <d_number+0x20>
   195e8:	b106      	cbz	r6, 195ec <d_number+0x50>
   195ea:	4240      	negs	r0, r0
   195ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   195ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   195f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   195f4:	1c53      	adds	r3, r2, #1
   195f6:	60c3      	str	r3, [r0, #12]
   195f8:	7851      	ldrb	r1, [r2, #1]
   195fa:	3930      	subs	r1, #48	; 0x30
   195fc:	b2ca      	uxtb	r2, r1
   195fe:	2a09      	cmp	r2, #9
   19600:	d802      	bhi.n	19608 <d_number+0x6c>
   19602:	461a      	mov	r2, r3
   19604:	2601      	movs	r6, #1
   19606:	e7d4      	b.n	195b2 <d_number+0x16>
   19608:	2000      	movs	r0, #0
   1960a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1960c:	cccccccd 	.word	0xcccccccd

00019610 <d_call_offset>:
   19610:	b510      	push	{r4, lr}
   19612:	4604      	mov	r4, r0
   19614:	b929      	cbnz	r1, 19622 <d_call_offset+0x12>
   19616:	68c3      	ldr	r3, [r0, #12]
   19618:	781a      	ldrb	r2, [r3, #0]
   1961a:	b16a      	cbz	r2, 19638 <d_call_offset+0x28>
   1961c:	1c5a      	adds	r2, r3, #1
   1961e:	60c2      	str	r2, [r0, #12]
   19620:	7819      	ldrb	r1, [r3, #0]
   19622:	2968      	cmp	r1, #104	; 0x68
   19624:	d00c      	beq.n	19640 <d_call_offset+0x30>
   19626:	2976      	cmp	r1, #118	; 0x76
   19628:	d106      	bne.n	19638 <d_call_offset+0x28>
   1962a:	4620      	mov	r0, r4
   1962c:	f7ff ffb6 	bl	1959c <d_number>
   19630:	68e3      	ldr	r3, [r4, #12]
   19632:	781a      	ldrb	r2, [r3, #0]
   19634:	2a5f      	cmp	r2, #95	; 0x5f
   19636:	d001      	beq.n	1963c <d_call_offset+0x2c>
   19638:	2000      	movs	r0, #0
   1963a:	bd10      	pop	{r4, pc}
   1963c:	3301      	adds	r3, #1
   1963e:	60e3      	str	r3, [r4, #12]
   19640:	4620      	mov	r0, r4
   19642:	f7ff ffab 	bl	1959c <d_number>
   19646:	68e3      	ldr	r3, [r4, #12]
   19648:	781a      	ldrb	r2, [r3, #0]
   1964a:	2a5f      	cmp	r2, #95	; 0x5f
   1964c:	d1f4      	bne.n	19638 <d_call_offset+0x28>
   1964e:	3301      	adds	r3, #1
   19650:	60e3      	str	r3, [r4, #12]
   19652:	2001      	movs	r0, #1
   19654:	bd10      	pop	{r4, pc}
   19656:	bf00      	nop

00019658 <d_ref_qualifier>:
   19658:	b410      	push	{r4}
   1965a:	68c3      	ldr	r3, [r0, #12]
   1965c:	460a      	mov	r2, r1
   1965e:	7819      	ldrb	r1, [r3, #0]
   19660:	2952      	cmp	r1, #82	; 0x52
   19662:	d00f      	beq.n	19684 <d_ref_qualifier+0x2c>
   19664:	294f      	cmp	r1, #79	; 0x4f
   19666:	d003      	beq.n	19670 <d_ref_qualifier+0x18>
   19668:	4610      	mov	r0, r2
   1966a:	f85d 4b04 	ldr.w	r4, [sp], #4
   1966e:	4770      	bx	lr
   19670:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
   19672:	3403      	adds	r4, #3
   19674:	2120      	movs	r1, #32
   19676:	62c4      	str	r4, [r0, #44]	; 0x2c
   19678:	3301      	adds	r3, #1
   1967a:	60c3      	str	r3, [r0, #12]
   1967c:	f85d 4b04 	ldr.w	r4, [sp], #4
   19680:	2300      	movs	r3, #0
   19682:	e741      	b.n	19508 <d_make_comp>
   19684:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
   19686:	3402      	adds	r4, #2
   19688:	211f      	movs	r1, #31
   1968a:	62c4      	str	r4, [r0, #44]	; 0x2c
   1968c:	e7f4      	b.n	19678 <d_ref_qualifier+0x20>
   1968e:	bf00      	nop

00019690 <d_count_templates_scopes>:
   19690:	2900      	cmp	r1, #0
   19692:	d065      	beq.n	19760 <d_count_templates_scopes+0xd0>
   19694:	b570      	push	{r4, r5, r6, lr}
   19696:	4606      	mov	r6, r0
   19698:	460c      	mov	r4, r1
   1969a:	68a3      	ldr	r3, [r4, #8]
   1969c:	2b01      	cmp	r3, #1
   1969e:	dc38      	bgt.n	19712 <d_count_templates_scopes+0x82>
   196a0:	f8d6 511c 	ldr.w	r5, [r6, #284]	; 0x11c
   196a4:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   196a8:	f103 0301 	add.w	r3, r3, #1
   196ac:	dc31      	bgt.n	19712 <d_count_templates_scopes+0x82>
   196ae:	7822      	ldrb	r2, [r4, #0]
   196b0:	60a3      	str	r3, [r4, #8]
   196b2:	1e53      	subs	r3, r2, #1
   196b4:	2b4f      	cmp	r3, #79	; 0x4f
   196b6:	d82c      	bhi.n	19712 <d_count_templates_scopes+0x82>
   196b8:	e8df f003 	tbb	[pc, r3]
   196bc:	4b303030 	.word	0x4b303030
   196c0:	2c2c2b2b 	.word	0x2c2c2b2b
   196c4:	30303030 	.word	0x30303030
   196c8:	30303030 	.word	0x30303030
   196cc:	30303030 	.word	0x30303030
   196d0:	2b303030 	.word	0x2b303030
   196d4:	30303030 	.word	0x30303030
   196d8:	30303030 	.word	0x30303030
   196dc:	41413030 	.word	0x41413030
   196e0:	302b3030 	.word	0x302b3030
   196e4:	28303030 	.word	0x28303030
   196e8:	30303030 	.word	0x30303030
   196ec:	302c2b30 	.word	0x302c2b30
   196f0:	30303030 	.word	0x30303030
   196f4:	30303030 	.word	0x30303030
   196f8:	30303030 	.word	0x30303030
   196fc:	28302b2b 	.word	0x28302b2b
   19700:	2b282828 	.word	0x2b282828
   19704:	30303030 	.word	0x30303030
   19708:	30303030 	.word	0x30303030
   1970c:	68e4      	ldr	r4, [r4, #12]
   1970e:	2c00      	cmp	r4, #0
   19710:	d1c3      	bne.n	1969a <d_count_templates_scopes+0xa>
   19712:	bd70      	pop	{r4, r5, r6, pc}
   19714:	6924      	ldr	r4, [r4, #16]
   19716:	2c00      	cmp	r4, #0
   19718:	d1bf      	bne.n	1969a <d_count_templates_scopes+0xa>
   1971a:	e7fa      	b.n	19712 <d_count_templates_scopes+0x82>
   1971c:	68e1      	ldr	r1, [r4, #12]
   1971e:	3501      	adds	r5, #1
   19720:	4630      	mov	r0, r6
   19722:	f8c6 511c 	str.w	r5, [r6, #284]	; 0x11c
   19726:	f7ff ffb3 	bl	19690 <d_count_templates_scopes>
   1972a:	6921      	ldr	r1, [r4, #16]
   1972c:	4630      	mov	r0, r6
   1972e:	f7ff ffaf 	bl	19690 <d_count_templates_scopes>
   19732:	f8d6 311c 	ldr.w	r3, [r6, #284]	; 0x11c
   19736:	3b01      	subs	r3, #1
   19738:	f8c6 311c 	str.w	r3, [r6, #284]	; 0x11c
   1973c:	bd70      	pop	{r4, r5, r6, pc}
   1973e:	68e1      	ldr	r1, [r4, #12]
   19740:	780b      	ldrb	r3, [r1, #0]
   19742:	2b05      	cmp	r3, #5
   19744:	d1eb      	bne.n	1971e <d_count_templates_scopes+0x8e>
   19746:	f8d6 3138 	ldr.w	r3, [r6, #312]	; 0x138
   1974a:	3301      	adds	r3, #1
   1974c:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
   19750:	e7e5      	b.n	1971e <d_count_templates_scopes+0x8e>
   19752:	f8d6 3144 	ldr.w	r3, [r6, #324]	; 0x144
   19756:	68e1      	ldr	r1, [r4, #12]
   19758:	3301      	adds	r3, #1
   1975a:	f8c6 3144 	str.w	r3, [r6, #324]	; 0x144
   1975e:	e7de      	b.n	1971e <d_count_templates_scopes+0x8e>
   19760:	4770      	bx	lr
   19762:	bf00      	nop

00019764 <d_discriminator>:
   19764:	68c3      	ldr	r3, [r0, #12]
   19766:	781a      	ldrb	r2, [r3, #0]
   19768:	2a5f      	cmp	r2, #95	; 0x5f
   1976a:	d001      	beq.n	19770 <d_discriminator+0xc>
   1976c:	2001      	movs	r0, #1
   1976e:	4770      	bx	lr
   19770:	b510      	push	{r4, lr}
   19772:	1c5a      	adds	r2, r3, #1
   19774:	60c2      	str	r2, [r0, #12]
   19776:	785a      	ldrb	r2, [r3, #1]
   19778:	2a5f      	cmp	r2, #95	; 0x5f
   1977a:	4604      	mov	r4, r0
   1977c:	d004      	beq.n	19788 <d_discriminator+0x24>
   1977e:	f7ff ff0d 	bl	1959c <d_number>
   19782:	43c0      	mvns	r0, r0
   19784:	0fc0      	lsrs	r0, r0, #31
   19786:	bd10      	pop	{r4, pc}
   19788:	3302      	adds	r3, #2
   1978a:	60c3      	str	r3, [r0, #12]
   1978c:	f7ff ff06 	bl	1959c <d_number>
   19790:	2800      	cmp	r0, #0
   19792:	db09      	blt.n	197a8 <d_discriminator+0x44>
   19794:	2809      	cmp	r0, #9
   19796:	dd05      	ble.n	197a4 <d_discriminator+0x40>
   19798:	68e3      	ldr	r3, [r4, #12]
   1979a:	781a      	ldrb	r2, [r3, #0]
   1979c:	2a5f      	cmp	r2, #95	; 0x5f
   1979e:	d103      	bne.n	197a8 <d_discriminator+0x44>
   197a0:	3301      	adds	r3, #1
   197a2:	60e3      	str	r3, [r4, #12]
   197a4:	2001      	movs	r0, #1
   197a6:	bd10      	pop	{r4, pc}
   197a8:	2000      	movs	r0, #0
   197aa:	bd10      	pop	{r4, pc}

000197ac <d_index_template_argument.part.0>:
   197ac:	b928      	cbnz	r0, 197ba <d_index_template_argument.part.0+0xe>
   197ae:	e009      	b.n	197c4 <d_index_template_argument.part.0+0x18>
   197b0:	2900      	cmp	r1, #0
   197b2:	dd08      	ble.n	197c6 <d_index_template_argument.part.0+0x1a>
   197b4:	6900      	ldr	r0, [r0, #16]
   197b6:	3901      	subs	r1, #1
   197b8:	b140      	cbz	r0, 197cc <d_index_template_argument.part.0+0x20>
   197ba:	7803      	ldrb	r3, [r0, #0]
   197bc:	2b2f      	cmp	r3, #47	; 0x2f
   197be:	d0f7      	beq.n	197b0 <d_index_template_argument.part.0+0x4>
   197c0:	2000      	movs	r0, #0
   197c2:	4770      	bx	lr
   197c4:	4770      	bx	lr
   197c6:	d1fb      	bne.n	197c0 <d_index_template_argument.part.0+0x14>
   197c8:	68c0      	ldr	r0, [r0, #12]
   197ca:	4770      	bx	lr
   197cc:	4770      	bx	lr
   197ce:	bf00      	nop

000197d0 <d_growable_string_callback_adapter>:
   197d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   197d2:	4614      	mov	r4, r2
   197d4:	6852      	ldr	r2, [r2, #4]
   197d6:	68a5      	ldr	r5, [r4, #8]
   197d8:	1c4b      	adds	r3, r1, #1
   197da:	4413      	add	r3, r2
   197dc:	42ab      	cmp	r3, r5
   197de:	b083      	sub	sp, #12
   197e0:	460e      	mov	r6, r1
   197e2:	4607      	mov	r7, r0
   197e4:	d811      	bhi.n	1980a <d_growable_string_callback_adapter+0x3a>
   197e6:	68e5      	ldr	r5, [r4, #12]
   197e8:	b96d      	cbnz	r5, 19806 <d_growable_string_callback_adapter+0x36>
   197ea:	6863      	ldr	r3, [r4, #4]
   197ec:	6820      	ldr	r0, [r4, #0]
   197ee:	4632      	mov	r2, r6
   197f0:	4418      	add	r0, r3
   197f2:	4639      	mov	r1, r7
   197f4:	f7fe fd04 	bl	18200 <memcpy>
   197f8:	e9d4 3200 	ldrd	r3, r2, [r4]
   197fc:	4433      	add	r3, r6
   197fe:	549d      	strb	r5, [r3, r2]
   19800:	6863      	ldr	r3, [r4, #4]
   19802:	4433      	add	r3, r6
   19804:	6063      	str	r3, [r4, #4]
   19806:	b003      	add	sp, #12
   19808:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1980a:	68e2      	ldr	r2, [r4, #12]
   1980c:	2a00      	cmp	r2, #0
   1980e:	d1fa      	bne.n	19806 <d_growable_string_callback_adapter+0x36>
   19810:	b155      	cbz	r5, 19828 <d_growable_string_callback_adapter+0x58>
   19812:	006d      	lsls	r5, r5, #1
   19814:	42ab      	cmp	r3, r5
   19816:	d8fc      	bhi.n	19812 <d_growable_string_callback_adapter+0x42>
   19818:	6820      	ldr	r0, [r4, #0]
   1981a:	4629      	mov	r1, r5
   1981c:	f01e fd52 	bl	382c4 <realloc>
   19820:	b138      	cbz	r0, 19832 <d_growable_string_callback_adapter+0x62>
   19822:	6020      	str	r0, [r4, #0]
   19824:	60a5      	str	r5, [r4, #8]
   19826:	e7de      	b.n	197e6 <d_growable_string_callback_adapter+0x16>
   19828:	2b02      	cmp	r3, #2
   1982a:	f04f 0502 	mov.w	r5, #2
   1982e:	d8f0      	bhi.n	19812 <d_growable_string_callback_adapter+0x42>
   19830:	e7f2      	b.n	19818 <d_growable_string_callback_adapter+0x48>
   19832:	9001      	str	r0, [sp, #4]
   19834:	6820      	ldr	r0, [r4, #0]
   19836:	f01e fcd1 	bl	381dc <free>
   1983a:	9b01      	ldr	r3, [sp, #4]
   1983c:	2201      	movs	r2, #1
   1983e:	e9c4 3300 	strd	r3, r3, [r4]
   19842:	e9c4 3202 	strd	r3, r2, [r4, #8]
   19846:	e7de      	b.n	19806 <d_growable_string_callback_adapter+0x36>

00019848 <next_is_type_qual.isra.0>:
   19848:	7803      	ldrb	r3, [r0, #0]
   1984a:	2b72      	cmp	r3, #114	; 0x72
   1984c:	d007      	beq.n	1985e <next_is_type_qual.isra.0+0x16>
   1984e:	2b56      	cmp	r3, #86	; 0x56
   19850:	d005      	beq.n	1985e <next_is_type_qual.isra.0+0x16>
   19852:	2b4b      	cmp	r3, #75	; 0x4b
   19854:	d003      	beq.n	1985e <next_is_type_qual.isra.0+0x16>
   19856:	2b44      	cmp	r3, #68	; 0x44
   19858:	d003      	beq.n	19862 <next_is_type_qual.isra.0+0x1a>
   1985a:	2000      	movs	r0, #0
   1985c:	4770      	bx	lr
   1985e:	2001      	movs	r0, #1
   19860:	4770      	bx	lr
   19862:	7840      	ldrb	r0, [r0, #1]
   19864:	f000 03df 	and.w	r3, r0, #223	; 0xdf
   19868:	2b4f      	cmp	r3, #79	; 0x4f
   1986a:	d0f8      	beq.n	1985e <next_is_type_qual.isra.0+0x16>
   1986c:	3877      	subs	r0, #119	; 0x77
   1986e:	2801      	cmp	r0, #1
   19870:	bf8c      	ite	hi
   19872:	2000      	movhi	r0, #0
   19874:	2001      	movls	r0, #1
   19876:	4770      	bx	lr

00019878 <d_append_char>:
   19878:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   1987c:	2bff      	cmp	r3, #255	; 0xff
   1987e:	b570      	push	{r4, r5, r6, lr}
   19880:	4604      	mov	r4, r0
   19882:	460d      	mov	r5, r1
   19884:	d006      	beq.n	19894 <d_append_char+0x1c>
   19886:	1c5a      	adds	r2, r3, #1
   19888:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1988c:	54e5      	strb	r5, [r4, r3]
   1988e:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   19892:	bd70      	pop	{r4, r5, r6, pc}
   19894:	2600      	movs	r6, #0
   19896:	4619      	mov	r1, r3
   19898:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   1989c:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	; 0x108
   198a0:	4798      	blx	r3
   198a2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   198a6:	2201      	movs	r2, #1
   198a8:	4413      	add	r3, r2
   198aa:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   198ae:	4633      	mov	r3, r6
   198b0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   198b4:	54e5      	strb	r5, [r4, r3]
   198b6:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   198ba:	bd70      	pop	{r4, r5, r6, pc}

000198bc <d_lookup_template_argument>:
   198bc:	4603      	mov	r3, r0
   198be:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
   198c2:	b190      	cbz	r0, 198ea <d_lookup_template_argument+0x2e>
   198c4:	68cb      	ldr	r3, [r1, #12]
   198c6:	6842      	ldr	r2, [r0, #4]
   198c8:	2b00      	cmp	r3, #0
   198ca:	6910      	ldr	r0, [r2, #16]
   198cc:	db0b      	blt.n	198e6 <d_lookup_template_argument+0x2a>
   198ce:	b920      	cbnz	r0, 198da <d_lookup_template_argument+0x1e>
   198d0:	e009      	b.n	198e6 <d_lookup_template_argument+0x2a>
   198d2:	b13b      	cbz	r3, 198e4 <d_lookup_template_argument+0x28>
   198d4:	6900      	ldr	r0, [r0, #16]
   198d6:	3b01      	subs	r3, #1
   198d8:	b130      	cbz	r0, 198e8 <d_lookup_template_argument+0x2c>
   198da:	7802      	ldrb	r2, [r0, #0]
   198dc:	2a2f      	cmp	r2, #47	; 0x2f
   198de:	d0f8      	beq.n	198d2 <d_lookup_template_argument+0x16>
   198e0:	2000      	movs	r0, #0
   198e2:	4770      	bx	lr
   198e4:	68c0      	ldr	r0, [r0, #12]
   198e6:	4770      	bx	lr
   198e8:	4770      	bx	lr
   198ea:	2201      	movs	r2, #1
   198ec:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   198f0:	4770      	bx	lr
   198f2:	bf00      	nop

000198f4 <d_find_pack>:
   198f4:	2900      	cmp	r1, #0
   198f6:	d042      	beq.n	1997e <d_find_pack+0x8a>
   198f8:	b538      	push	{r3, r4, r5, lr}
   198fa:	4605      	mov	r5, r0
   198fc:	460c      	mov	r4, r1
   198fe:	7823      	ldrb	r3, [r4, #0]
   19900:	2b4c      	cmp	r3, #76	; 0x4c
   19902:	d832      	bhi.n	1996a <d_find_pack+0x76>
   19904:	e8df f003 	tbb	[pc, r3]
   19908:	3131312f 	.word	0x3131312f
   1990c:	372f2731 	.word	0x372f2731
   19910:	31313137 	.word	0x31313137
   19914:	31313131 	.word	0x31313131
   19918:	31313131 	.word	0x31313131
   1991c:	31313131 	.word	0x31313131
   19920:	3131312f 	.word	0x3131312f
   19924:	31313131 	.word	0x31313131
   19928:	31313131 	.word	0x31313131
   1992c:	2f313131 	.word	0x2f313131
   19930:	31313131 	.word	0x31313131
   19934:	3131312f 	.word	0x3131312f
   19938:	372f3131 	.word	0x372f3131
   1993c:	31313131 	.word	0x31313131
   19940:	31313131 	.word	0x31313131
   19944:	31313131 	.word	0x31313131
   19948:	312f2f31 	.word	0x312f2f31
   1994c:	2f2f3131 	.word	0x2f2f3131
   19950:	2f31312f 	.word	0x2f31312f
   19954:	2f          	.byte	0x2f
   19955:	00          	.byte	0x00
   19956:	4621      	mov	r1, r4
   19958:	4628      	mov	r0, r5
   1995a:	f7ff ffaf 	bl	198bc <d_lookup_template_argument>
   1995e:	b110      	cbz	r0, 19966 <d_find_pack+0x72>
   19960:	7803      	ldrb	r3, [r0, #0]
   19962:	2b2f      	cmp	r3, #47	; 0x2f
   19964:	d000      	beq.n	19968 <d_find_pack+0x74>
   19966:	2000      	movs	r0, #0
   19968:	bd38      	pop	{r3, r4, r5, pc}
   1996a:	68e1      	ldr	r1, [r4, #12]
   1996c:	4628      	mov	r0, r5
   1996e:	f7ff ffc1 	bl	198f4 <d_find_pack>
   19972:	2800      	cmp	r0, #0
   19974:	d1f8      	bne.n	19968 <d_find_pack+0x74>
   19976:	6924      	ldr	r4, [r4, #16]
   19978:	2c00      	cmp	r4, #0
   1997a:	d1c0      	bne.n	198fe <d_find_pack+0xa>
   1997c:	e7f3      	b.n	19966 <d_find_pack+0x72>
   1997e:	2000      	movs	r0, #0
   19980:	4770      	bx	lr
   19982:	bf00      	nop

00019984 <d_append_string>:
   19984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19988:	4604      	mov	r4, r0
   1998a:	4608      	mov	r0, r1
   1998c:	460d      	mov	r5, r1
   1998e:	f7fe fe97 	bl	186c0 <strlen>
   19992:	b340      	cbz	r0, 199e6 <d_append_string+0x62>
   19994:	3d01      	subs	r5, #1
   19996:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1999a:	182f      	adds	r7, r5, r0
   1999c:	f04f 0800 	mov.w	r8, #0
   199a0:	e009      	b.n	199b6 <d_append_string+0x32>
   199a2:	460b      	mov	r3, r1
   199a4:	42bd      	cmp	r5, r7
   199a6:	f101 0101 	add.w	r1, r1, #1
   199aa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   199ae:	54e6      	strb	r6, [r4, r3]
   199b0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   199b4:	d017      	beq.n	199e6 <d_append_string+0x62>
   199b6:	29ff      	cmp	r1, #255	; 0xff
   199b8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   199bc:	d1f1      	bne.n	199a2 <d_append_string+0x1e>
   199be:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   199c2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   199c6:	4620      	mov	r0, r4
   199c8:	4798      	blx	r3
   199ca:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   199ce:	2101      	movs	r1, #1
   199d0:	440b      	add	r3, r1
   199d2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   199d6:	2300      	movs	r3, #0
   199d8:	42bd      	cmp	r5, r7
   199da:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   199de:	54e6      	strb	r6, [r4, r3]
   199e0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   199e4:	d1e7      	bne.n	199b6 <d_append_string+0x32>
   199e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   199ea:	bf00      	nop

000199ec <d_template_param>:
   199ec:	b538      	push	{r3, r4, r5, lr}
   199ee:	68c3      	ldr	r3, [r0, #12]
   199f0:	781a      	ldrb	r2, [r3, #0]
   199f2:	2a54      	cmp	r2, #84	; 0x54
   199f4:	d124      	bne.n	19a40 <d_template_param+0x54>
   199f6:	1c5a      	adds	r2, r3, #1
   199f8:	60c2      	str	r2, [r0, #12]
   199fa:	785a      	ldrb	r2, [r3, #1]
   199fc:	2a5f      	cmp	r2, #95	; 0x5f
   199fe:	4604      	mov	r4, r0
   19a00:	d020      	beq.n	19a44 <d_template_param+0x58>
   19a02:	2a6e      	cmp	r2, #110	; 0x6e
   19a04:	d01c      	beq.n	19a40 <d_template_param+0x54>
   19a06:	f7ff fdc9 	bl	1959c <d_number>
   19a0a:	1c42      	adds	r2, r0, #1
   19a0c:	d418      	bmi.n	19a40 <d_template_param+0x54>
   19a0e:	68e3      	ldr	r3, [r4, #12]
   19a10:	7819      	ldrb	r1, [r3, #0]
   19a12:	295f      	cmp	r1, #95	; 0x5f
   19a14:	d114      	bne.n	19a40 <d_template_param+0x54>
   19a16:	3301      	adds	r3, #1
   19a18:	60e3      	str	r3, [r4, #12]
   19a1a:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
   19a1e:	428b      	cmp	r3, r1
   19a20:	da0e      	bge.n	19a40 <d_template_param+0x54>
   19a22:	6921      	ldr	r1, [r4, #16]
   19a24:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   19a28:	eb01 008c 	add.w	r0, r1, ip, lsl #2
   19a2c:	3301      	adds	r3, #1
   19a2e:	2500      	movs	r5, #0
   19a30:	e9c0 5501 	strd	r5, r5, [r0, #4]
   19a34:	6163      	str	r3, [r4, #20]
   19a36:	2305      	movs	r3, #5
   19a38:	f801 302c 	strb.w	r3, [r1, ip, lsl #2]
   19a3c:	60c2      	str	r2, [r0, #12]
   19a3e:	bd38      	pop	{r3, r4, r5, pc}
   19a40:	2000      	movs	r0, #0
   19a42:	bd38      	pop	{r3, r4, r5, pc}
   19a44:	3302      	adds	r3, #2
   19a46:	60c3      	str	r3, [r0, #12]
   19a48:	2200      	movs	r2, #0
   19a4a:	e7e6      	b.n	19a1a <d_template_param+0x2e>

00019a4c <d_append_num>:
   19a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19a50:	b088      	sub	sp, #32
   19a52:	460a      	mov	r2, r1
   19a54:	4604      	mov	r4, r0
   19a56:	491a      	ldr	r1, [pc, #104]	; (19ac0 <d_append_num+0x74>)
   19a58:	a801      	add	r0, sp, #4
   19a5a:	f01e fc3f 	bl	382dc <sprintf>
   19a5e:	a801      	add	r0, sp, #4
   19a60:	f7fe fe2e 	bl	186c0 <strlen>
   19a64:	b340      	cbz	r0, 19ab8 <d_append_num+0x6c>
   19a66:	ad01      	add	r5, sp, #4
   19a68:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19a6c:	182f      	adds	r7, r5, r0
   19a6e:	f04f 0800 	mov.w	r8, #0
   19a72:	e009      	b.n	19a88 <d_append_num+0x3c>
   19a74:	460b      	mov	r3, r1
   19a76:	42af      	cmp	r7, r5
   19a78:	f101 0101 	add.w	r1, r1, #1
   19a7c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19a80:	54e6      	strb	r6, [r4, r3]
   19a82:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19a86:	d017      	beq.n	19ab8 <d_append_num+0x6c>
   19a88:	29ff      	cmp	r1, #255	; 0xff
   19a8a:	f815 6b01 	ldrb.w	r6, [r5], #1
   19a8e:	d1f1      	bne.n	19a74 <d_append_num+0x28>
   19a90:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   19a94:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19a98:	4620      	mov	r0, r4
   19a9a:	4798      	blx	r3
   19a9c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   19aa0:	2101      	movs	r1, #1
   19aa2:	440b      	add	r3, r1
   19aa4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   19aa8:	2300      	movs	r3, #0
   19aaa:	42af      	cmp	r7, r5
   19aac:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19ab0:	54e6      	strb	r6, [r4, r3]
   19ab2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19ab6:	d1e7      	bne.n	19a88 <d_append_num+0x3c>
   19ab8:	b008      	add	sp, #32
   19aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19abe:	bf00      	nop
   19ac0:	0004382c 	.word	0x0004382c

00019ac4 <d_source_name>:
   19ac4:	b570      	push	{r4, r5, r6, lr}
   19ac6:	4604      	mov	r4, r0
   19ac8:	f7ff fd68 	bl	1959c <d_number>
   19acc:	1e05      	subs	r5, r0, #0
   19ace:	dd46      	ble.n	19b5e <d_source_name+0x9a>
   19ad0:	68e6      	ldr	r6, [r4, #12]
   19ad2:	6863      	ldr	r3, [r4, #4]
   19ad4:	1b9b      	subs	r3, r3, r6
   19ad6:	429d      	cmp	r5, r3
   19ad8:	dc3e      	bgt.n	19b58 <d_source_name+0x94>
   19ada:	68a2      	ldr	r2, [r4, #8]
   19adc:	1973      	adds	r3, r6, r5
   19ade:	0752      	lsls	r2, r2, #29
   19ae0:	60e3      	str	r3, [r4, #12]
   19ae2:	d504      	bpl.n	19aee <d_source_name+0x2a>
   19ae4:	5d72      	ldrb	r2, [r6, r5]
   19ae6:	2a24      	cmp	r2, #36	; 0x24
   19ae8:	bf04      	itt	eq
   19aea:	3301      	addeq	r3, #1
   19aec:	60e3      	streq	r3, [r4, #12]
   19aee:	2d09      	cmp	r5, #9
   19af0:	dd22      	ble.n	19b38 <d_source_name+0x74>
   19af2:	492a      	ldr	r1, [pc, #168]	; (19b9c <d_source_name+0xd8>)
   19af4:	2208      	movs	r2, #8
   19af6:	4630      	mov	r0, r6
   19af8:	f01e fb78 	bl	381ec <memcmp>
   19afc:	b930      	cbnz	r0, 19b0c <d_source_name+0x48>
   19afe:	7a33      	ldrb	r3, [r6, #8]
   19b00:	2b2e      	cmp	r3, #46	; 0x2e
   19b02:	d02e      	beq.n	19b62 <d_source_name+0x9e>
   19b04:	2b5f      	cmp	r3, #95	; 0x5f
   19b06:	d02c      	beq.n	19b62 <d_source_name+0x9e>
   19b08:	2b24      	cmp	r3, #36	; 0x24
   19b0a:	d02a      	beq.n	19b62 <d_source_name+0x9e>
   19b0c:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   19b10:	4293      	cmp	r3, r2
   19b12:	da21      	bge.n	19b58 <d_source_name+0x94>
   19b14:	6920      	ldr	r0, [r4, #16]
   19b16:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   19b1a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   19b1e:	3301      	adds	r3, #1
   19b20:	2200      	movs	r2, #0
   19b22:	e9c0 2201 	strd	r2, r2, [r0, #4]
   19b26:	6163      	str	r3, [r4, #20]
   19b28:	2300      	movs	r3, #0
   19b2a:	7003      	strb	r3, [r0, #0]
   19b2c:	e9c0 3301 	strd	r3, r3, [r0, #4]
   19b30:	e9c0 6503 	strd	r6, r5, [r0, #12]
   19b34:	62a0      	str	r0, [r4, #40]	; 0x28
   19b36:	bd70      	pop	{r4, r5, r6, pc}
   19b38:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   19b3c:	4293      	cmp	r3, r2
   19b3e:	da0b      	bge.n	19b58 <d_source_name+0x94>
   19b40:	6920      	ldr	r0, [r4, #16]
   19b42:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   19b46:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   19b4a:	3301      	adds	r3, #1
   19b4c:	2200      	movs	r2, #0
   19b4e:	e9c0 2201 	strd	r2, r2, [r0, #4]
   19b52:	6163      	str	r3, [r4, #20]
   19b54:	2e00      	cmp	r6, #0
   19b56:	d1e7      	bne.n	19b28 <d_source_name+0x64>
   19b58:	2000      	movs	r0, #0
   19b5a:	62a0      	str	r0, [r4, #40]	; 0x28
   19b5c:	bd70      	pop	{r4, r5, r6, pc}
   19b5e:	2000      	movs	r0, #0
   19b60:	bd70      	pop	{r4, r5, r6, pc}
   19b62:	7a73      	ldrb	r3, [r6, #9]
   19b64:	2b4e      	cmp	r3, #78	; 0x4e
   19b66:	d1d1      	bne.n	19b0c <d_source_name+0x48>
   19b68:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   19b6a:	6963      	ldr	r3, [r4, #20]
   19b6c:	69a1      	ldr	r1, [r4, #24]
   19b6e:	3216      	adds	r2, #22
   19b70:	1b55      	subs	r5, r2, r5
   19b72:	428b      	cmp	r3, r1
   19b74:	62e5      	str	r5, [r4, #44]	; 0x2c
   19b76:	daef      	bge.n	19b58 <d_source_name+0x94>
   19b78:	6922      	ldr	r2, [r4, #16]
   19b7a:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   19b7e:	0081      	lsls	r1, r0, #2
   19b80:	3301      	adds	r3, #1
   19b82:	6163      	str	r3, [r4, #20]
   19b84:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   19b88:	2300      	movs	r3, #0
   19b8a:	e9c0 3301 	strd	r3, r3, [r0, #4]
   19b8e:	5453      	strb	r3, [r2, r1]
   19b90:	4a03      	ldr	r2, [pc, #12]	; (19ba0 <d_source_name+0xdc>)
   19b92:	2315      	movs	r3, #21
   19b94:	e9c0 2303 	strd	r2, r3, [r0, #12]
   19b98:	e7df      	b.n	19b5a <d_source_name+0x96>
   19b9a:	bf00      	nop
   19b9c:	00043830 	.word	0x00043830
   19ba0:	0004383c 	.word	0x0004383c

00019ba4 <d_substitution>:
   19ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19ba8:	68c3      	ldr	r3, [r0, #12]
   19baa:	781a      	ldrb	r2, [r3, #0]
   19bac:	2a53      	cmp	r2, #83	; 0x53
   19bae:	d131      	bne.n	19c14 <d_substitution+0x70>
   19bb0:	1c5a      	adds	r2, r3, #1
   19bb2:	60c2      	str	r2, [r0, #12]
   19bb4:	785a      	ldrb	r2, [r3, #1]
   19bb6:	4604      	mov	r4, r0
   19bb8:	b3a2      	cbz	r2, 19c24 <d_substitution+0x80>
   19bba:	1c9a      	adds	r2, r3, #2
   19bbc:	60c2      	str	r2, [r0, #12]
   19bbe:	785a      	ldrb	r2, [r3, #1]
   19bc0:	2a5f      	cmp	r2, #95	; 0x5f
   19bc2:	d044      	beq.n	19c4e <d_substitution+0xaa>
   19bc4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   19bc8:	b2d8      	uxtb	r0, r3
   19bca:	2809      	cmp	r0, #9
   19bcc:	d826      	bhi.n	19c1c <d_substitution+0x78>
   19bce:	2100      	movs	r1, #0
   19bd0:	e00d      	b.n	19bee <d_substitution+0x4a>
   19bd2:	3b30      	subs	r3, #48	; 0x30
   19bd4:	4299      	cmp	r1, r3
   19bd6:	d81d      	bhi.n	19c14 <d_substitution+0x70>
   19bd8:	68e0      	ldr	r0, [r4, #12]
   19bda:	7802      	ldrb	r2, [r0, #0]
   19bdc:	4619      	mov	r1, r3
   19bde:	1c45      	adds	r5, r0, #1
   19be0:	b11a      	cbz	r2, 19bea <d_substitution+0x46>
   19be2:	60e5      	str	r5, [r4, #12]
   19be4:	7802      	ldrb	r2, [r0, #0]
   19be6:	2a5f      	cmp	r2, #95	; 0x5f
   19be8:	d03b      	beq.n	19c62 <d_substitution+0xbe>
   19bea:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   19bee:	b2d8      	uxtb	r0, r3
   19bf0:	2809      	cmp	r0, #9
   19bf2:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
   19bf6:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
   19bfa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   19bfe:	d9e8      	bls.n	19bd2 <d_substitution+0x2e>
   19c00:	f1bc 0f19 	cmp.w	ip, #25
   19c04:	d806      	bhi.n	19c14 <d_substitution+0x70>
   19c06:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
   19c0a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   19c0e:	3b37      	subs	r3, #55	; 0x37
   19c10:	4299      	cmp	r1, r3
   19c12:	d9e1      	bls.n	19bd8 <d_substitution+0x34>
   19c14:	2500      	movs	r5, #0
   19c16:	4628      	mov	r0, r5
   19c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19c1c:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
   19c20:	2819      	cmp	r0, #25
   19c22:	d9d4      	bls.n	19bce <d_substitution+0x2a>
   19c24:	68a3      	ldr	r3, [r4, #8]
   19c26:	f003 0308 	and.w	r3, r3, #8
   19c2a:	2b00      	cmp	r3, #0
   19c2c:	bf14      	ite	ne
   19c2e:	2501      	movne	r5, #1
   19c30:	2500      	moveq	r5, #0
   19c32:	d100      	bne.n	19c36 <d_substitution+0x92>
   19c34:	b9b9      	cbnz	r1, 19c66 <d_substitution+0xc2>
   19c36:	4b3f      	ldr	r3, [pc, #252]	; (19d34 <d_substitution+0x190>)
   19c38:	2174      	movs	r1, #116	; 0x74
   19c3a:	f103 00a8 	add.w	r0, r3, #168	; 0xa8
   19c3e:	e001      	b.n	19c44 <d_substitution+0xa0>
   19c40:	f813 1f1c 	ldrb.w	r1, [r3, #28]!
   19c44:	4291      	cmp	r1, r2
   19c46:	d015      	beq.n	19c74 <d_substitution+0xd0>
   19c48:	4283      	cmp	r3, r0
   19c4a:	d1f9      	bne.n	19c40 <d_substitution+0x9c>
   19c4c:	e7e2      	b.n	19c14 <d_substitution+0x70>
   19c4e:	2300      	movs	r3, #0
   19c50:	6a22      	ldr	r2, [r4, #32]
   19c52:	429a      	cmp	r2, r3
   19c54:	d9de      	bls.n	19c14 <d_substitution+0x70>
   19c56:	69e2      	ldr	r2, [r4, #28]
   19c58:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   19c5c:	4628      	mov	r0, r5
   19c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19c62:	3301      	adds	r3, #1
   19c64:	e7f4      	b.n	19c50 <d_substitution+0xac>
   19c66:	68e3      	ldr	r3, [r4, #12]
   19c68:	781b      	ldrb	r3, [r3, #0]
   19c6a:	3b43      	subs	r3, #67	; 0x43
   19c6c:	2b01      	cmp	r3, #1
   19c6e:	bf98      	it	ls
   19c70:	460d      	movls	r5, r1
   19c72:	e7e0      	b.n	19c36 <d_substitution+0x92>
   19c74:	695e      	ldr	r6, [r3, #20]
   19c76:	2e00      	cmp	r6, #0
   19c78:	d054      	beq.n	19d24 <d_substitution+0x180>
   19c7a:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
   19c7e:	4282      	cmp	r2, r0
   19c80:	f8d3 8018 	ldr.w	r8, [r3, #24]
   19c84:	da53      	bge.n	19d2e <d_substitution+0x18a>
   19c86:	6927      	ldr	r7, [r4, #16]
   19c88:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
   19c8c:	eb07 018c 	add.w	r1, r7, ip, lsl #2
   19c90:	f04f 0e00 	mov.w	lr, #0
   19c94:	e9c1 ee01 	strd	lr, lr, [r1, #4]
   19c98:	3201      	adds	r2, #1
   19c9a:	f04f 0e18 	mov.w	lr, #24
   19c9e:	6162      	str	r2, [r4, #20]
   19ca0:	f807 e02c 	strb.w	lr, [r7, ip, lsl #2]
   19ca4:	e9c1 6803 	strd	r6, r8, [r1, #12]
   19ca8:	62a1      	str	r1, [r4, #40]	; 0x28
   19caa:	2d00      	cmp	r5, #0
   19cac:	d037      	beq.n	19d1e <d_substitution+0x17a>
   19cae:	e9d3 7103 	ldrd	r7, r1, [r3, #12]
   19cb2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   19cb4:	4290      	cmp	r0, r2
   19cb6:	440b      	add	r3, r1
   19cb8:	62e3      	str	r3, [r4, #44]	; 0x2c
   19cba:	dd36      	ble.n	19d2a <d_substitution+0x186>
   19cbc:	6923      	ldr	r3, [r4, #16]
   19cbe:	eb02 0082 	add.w	r0, r2, r2, lsl #2
   19cc2:	eb03 0580 	add.w	r5, r3, r0, lsl #2
   19cc6:	3201      	adds	r2, #1
   19cc8:	2600      	movs	r6, #0
   19cca:	e9c5 6601 	strd	r6, r6, [r5, #4]
   19cce:	6162      	str	r2, [r4, #20]
   19cd0:	2218      	movs	r2, #24
   19cd2:	f803 2020 	strb.w	r2, [r3, r0, lsl #2]
   19cd6:	e9c5 7103 	strd	r7, r1, [r5, #12]
   19cda:	68e3      	ldr	r3, [r4, #12]
   19cdc:	781a      	ldrb	r2, [r3, #0]
   19cde:	2a42      	cmp	r2, #66	; 0x42
   19ce0:	d199      	bne.n	19c16 <d_substitution+0x72>
   19ce2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   19ce4:	3301      	adds	r3, #1
   19ce6:	60e3      	str	r3, [r4, #12]
   19ce8:	4620      	mov	r0, r4
   19cea:	f7ff feeb 	bl	19ac4 <d_source_name>
   19cee:	462a      	mov	r2, r5
   19cf0:	4603      	mov	r3, r0
   19cf2:	214c      	movs	r1, #76	; 0x4c
   19cf4:	4620      	mov	r0, r4
   19cf6:	f7ff fc07 	bl	19508 <d_make_comp>
   19cfa:	68e3      	ldr	r3, [r4, #12]
   19cfc:	781a      	ldrb	r2, [r3, #0]
   19cfe:	2a42      	cmp	r2, #66	; 0x42
   19d00:	4605      	mov	r5, r0
   19d02:	d0ef      	beq.n	19ce4 <d_substitution+0x140>
   19d04:	62a6      	str	r6, [r4, #40]	; 0x28
   19d06:	2800      	cmp	r0, #0
   19d08:	d084      	beq.n	19c14 <d_substitution+0x70>
   19d0a:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
   19d0e:	4293      	cmp	r3, r2
   19d10:	da80      	bge.n	19c14 <d_substitution+0x70>
   19d12:	69e1      	ldr	r1, [r4, #28]
   19d14:	1c5a      	adds	r2, r3, #1
   19d16:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   19d1a:	6222      	str	r2, [r4, #32]
   19d1c:	e77b      	b.n	19c16 <d_substitution+0x72>
   19d1e:	e9d3 7101 	ldrd	r7, r1, [r3, #4]
   19d22:	e7c6      	b.n	19cb2 <d_substitution+0x10e>
   19d24:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
   19d28:	e7bf      	b.n	19caa <d_substitution+0x106>
   19d2a:	2500      	movs	r5, #0
   19d2c:	e7d5      	b.n	19cda <d_substitution+0x136>
   19d2e:	2100      	movs	r1, #0
   19d30:	e7ba      	b.n	19ca8 <d_substitution+0x104>
   19d32:	bf00      	nop
   19d34:	0003ee3c 	.word	0x0003ee3c

00019d38 <d_print_java_identifier>:
   19d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19d3c:	188f      	adds	r7, r1, r2
   19d3e:	42b9      	cmp	r1, r7
   19d40:	d24a      	bcs.n	19dd8 <d_print_java_identifier+0xa0>
   19d42:	460c      	mov	r4, r1
   19d44:	4605      	mov	r5, r0
   19d46:	f04f 0800 	mov.w	r8, #0
   19d4a:	e00c      	b.n	19d66 <d_print_java_identifier+0x2e>
   19d4c:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   19d50:	29ff      	cmp	r1, #255	; 0xff
   19d52:	d033      	beq.n	19dbc <d_print_java_identifier+0x84>
   19d54:	1c4b      	adds	r3, r1, #1
   19d56:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
   19d5a:	546e      	strb	r6, [r5, r1]
   19d5c:	f885 6104 	strb.w	r6, [r5, #260]	; 0x104
   19d60:	3401      	adds	r4, #1
   19d62:	42a7      	cmp	r7, r4
   19d64:	d938      	bls.n	19dd8 <d_print_java_identifier+0xa0>
   19d66:	1b3b      	subs	r3, r7, r4
   19d68:	2b03      	cmp	r3, #3
   19d6a:	7826      	ldrb	r6, [r4, #0]
   19d6c:	ddee      	ble.n	19d4c <d_print_java_identifier+0x14>
   19d6e:	2e5f      	cmp	r6, #95	; 0x5f
   19d70:	d1ec      	bne.n	19d4c <d_print_java_identifier+0x14>
   19d72:	7863      	ldrb	r3, [r4, #1]
   19d74:	2b5f      	cmp	r3, #95	; 0x5f
   19d76:	d1e9      	bne.n	19d4c <d_print_java_identifier+0x14>
   19d78:	78a3      	ldrb	r3, [r4, #2]
   19d7a:	2b55      	cmp	r3, #85	; 0x55
   19d7c:	d1e6      	bne.n	19d4c <d_print_java_identifier+0x14>
   19d7e:	1ce2      	adds	r2, r4, #3
   19d80:	4297      	cmp	r7, r2
   19d82:	d9e3      	bls.n	19d4c <d_print_java_identifier+0x14>
   19d84:	2100      	movs	r1, #0
   19d86:	e005      	b.n	19d94 <d_print_java_identifier+0x5c>
   19d88:	f1a6 0337 	sub.w	r3, r6, #55	; 0x37
   19d8c:	42ba      	cmp	r2, r7
   19d8e:	eb03 1101 	add.w	r1, r3, r1, lsl #4
   19d92:	d023      	beq.n	19ddc <d_print_java_identifier+0xa4>
   19d94:	4691      	mov	r9, r2
   19d96:	f812 6b01 	ldrb.w	r6, [r2], #1
   19d9a:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   19d9e:	b2d8      	uxtb	r0, r3
   19da0:	2809      	cmp	r0, #9
   19da2:	f1a6 0c41 	sub.w	ip, r6, #65	; 0x41
   19da6:	d9f1      	bls.n	19d8c <d_print_java_identifier+0x54>
   19da8:	f1bc 0f05 	cmp.w	ip, #5
   19dac:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
   19db0:	d9ea      	bls.n	19d88 <d_print_java_identifier+0x50>
   19db2:	2b05      	cmp	r3, #5
   19db4:	d814      	bhi.n	19de0 <d_print_java_identifier+0xa8>
   19db6:	f1a6 0357 	sub.w	r3, r6, #87	; 0x57
   19dba:	e7e7      	b.n	19d8c <d_print_java_identifier+0x54>
   19dbc:	e9d5 3242 	ldrd	r3, r2, [r5, #264]	; 0x108
   19dc0:	f885 80ff 	strb.w	r8, [r5, #255]	; 0xff
   19dc4:	4628      	mov	r0, r5
   19dc6:	4798      	blx	r3
   19dc8:	f8d5 2128 	ldr.w	r2, [r5, #296]	; 0x128
   19dcc:	2301      	movs	r3, #1
   19dce:	441a      	add	r2, r3
   19dd0:	f8c5 2128 	str.w	r2, [r5, #296]	; 0x128
   19dd4:	2100      	movs	r1, #0
   19dd6:	e7be      	b.n	19d56 <d_print_java_identifier+0x1e>
   19dd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19ddc:	265f      	movs	r6, #95	; 0x5f
   19dde:	e7b5      	b.n	19d4c <d_print_java_identifier+0x14>
   19de0:	454f      	cmp	r7, r9
   19de2:	d9fb      	bls.n	19ddc <d_print_java_identifier+0xa4>
   19de4:	2e5f      	cmp	r6, #95	; 0x5f
   19de6:	d1f9      	bne.n	19ddc <d_print_java_identifier+0xa4>
   19de8:	29ff      	cmp	r1, #255	; 0xff
   19dea:	d8af      	bhi.n	19d4c <d_print_java_identifier+0x14>
   19dec:	b2ce      	uxtb	r6, r1
   19dee:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   19df2:	29ff      	cmp	r1, #255	; 0xff
   19df4:	d007      	beq.n	19e06 <d_print_java_identifier+0xce>
   19df6:	1c4b      	adds	r3, r1, #1
   19df8:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
   19dfc:	464c      	mov	r4, r9
   19dfe:	546e      	strb	r6, [r5, r1]
   19e00:	f885 6104 	strb.w	r6, [r5, #260]	; 0x104
   19e04:	e7ac      	b.n	19d60 <d_print_java_identifier+0x28>
   19e06:	e9d5 3242 	ldrd	r3, r2, [r5, #264]	; 0x108
   19e0a:	f885 80ff 	strb.w	r8, [r5, #255]	; 0xff
   19e0e:	4628      	mov	r0, r5
   19e10:	4798      	blx	r3
   19e12:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
   19e16:	3301      	adds	r3, #1
   19e18:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
   19e1c:	2100      	movs	r1, #0
   19e1e:	e7ea      	b.n	19df6 <d_print_java_identifier+0xbe>

00019e20 <d_type>:
   19e20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19e24:	68c2      	ldr	r2, [r0, #12]
   19e26:	b083      	sub	sp, #12
   19e28:	4604      	mov	r4, r0
   19e2a:	4610      	mov	r0, r2
   19e2c:	f7ff fd0c 	bl	19848 <next_is_type_qual.isra.0>
   19e30:	2800      	cmp	r0, #0
   19e32:	d16e      	bne.n	19f12 <d_type+0xf2>
   19e34:	7811      	ldrb	r1, [r2, #0]
   19e36:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   19e3a:	2b4a      	cmp	r3, #74	; 0x4a
   19e3c:	d864      	bhi.n	19f08 <d_type+0xe8>
   19e3e:	e8df f013 	tbh	[pc, r3, lsl #1]
   19e42:	00b8      	.short	0x00b8
   19e44:	00b800b8 	.word	0x00b800b8
   19e48:	00b800b8 	.word	0x00b800b8
   19e4c:	00b800b8 	.word	0x00b800b8
   19e50:	00b800b8 	.word	0x00b800b8
   19e54:	006300b8 	.word	0x006300b8
   19e58:	00630063 	.word	0x00630063
   19e5c:	00630063 	.word	0x00630063
   19e60:	00630063 	.word	0x00630063
   19e64:	006301fd 	.word	0x006301fd
   19e68:	014300cd 	.word	0x014300cd
   19e6c:	013d0063 	.word	0x013d0063
   19e70:	006301df 	.word	0x006301df
   19e74:	00630063 	.word	0x00630063
   19e78:	00630063 	.word	0x00630063
   19e7c:	00b8023e 	.word	0x00b8023e
   19e80:	01c301d1 	.word	0x01c301d1
   19e84:	01b50063 	.word	0x01b50063
   19e88:	00f30119 	.word	0x00f30119
   19e8c:	006300db 	.word	0x006300db
   19e90:	00630063 	.word	0x00630063
   19e94:	00b80063 	.word	0x00b80063
   19e98:	00630063 	.word	0x00630063
   19e9c:	00630063 	.word	0x00630063
   19ea0:	00630063 	.word	0x00630063
   19ea4:	00980098 	.word	0x00980098
   19ea8:	00980098 	.word	0x00980098
   19eac:	00980098 	.word	0x00980098
   19eb0:	00980098 	.word	0x00980098
   19eb4:	00980098 	.word	0x00980098
   19eb8:	00980063 	.word	0x00980063
   19ebc:	00980098 	.word	0x00980098
   19ec0:	00630098 	.word	0x00630098
   19ec4:	00630063 	.word	0x00630063
   19ec8:	00980098 	.word	0x00980098
   19ecc:	009801ed 	.word	0x009801ed
   19ed0:	00980098 	.word	0x00980098
   19ed4:	00980098 	.word	0x00980098
   19ed8:	2301      	movs	r3, #1
   19eda:	6b25      	ldr	r5, [r4, #48]	; 0x30
   19edc:	6323      	str	r3, [r4, #48]	; 0x30
   19ede:	4620      	mov	r0, r4
   19ee0:	f001 fbca 	bl	1b678 <d_expression_1>
   19ee4:	6325      	str	r5, [r4, #48]	; 0x30
   19ee6:	4602      	mov	r2, r0
   19ee8:	2300      	movs	r3, #0
   19eea:	2143      	movs	r1, #67	; 0x43
   19eec:	4620      	mov	r0, r4
   19eee:	f7ff fb0b 	bl	19508 <d_make_comp>
   19ef2:	4605      	mov	r5, r0
   19ef4:	9001      	str	r0, [sp, #4]
   19ef6:	b138      	cbz	r0, 19f08 <d_type+0xe8>
   19ef8:	68e3      	ldr	r3, [r4, #12]
   19efa:	781a      	ldrb	r2, [r3, #0]
   19efc:	b122      	cbz	r2, 19f08 <d_type+0xe8>
   19efe:	1c5a      	adds	r2, r3, #1
   19f00:	60e2      	str	r2, [r4, #12]
   19f02:	781b      	ldrb	r3, [r3, #0]
   19f04:	2b45      	cmp	r3, #69	; 0x45
   19f06:	d05b      	beq.n	19fc0 <d_type+0x1a0>
   19f08:	2500      	movs	r5, #0
   19f0a:	4628      	mov	r0, r5
   19f0c:	b003      	add	sp, #12
   19f0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19f12:	2200      	movs	r2, #0
   19f14:	a901      	add	r1, sp, #4
   19f16:	4620      	mov	r0, r4
   19f18:	f001 fdf0 	bl	1bafc <d_cv_qualifiers>
   19f1c:	4605      	mov	r5, r0
   19f1e:	2800      	cmp	r0, #0
   19f20:	d0f2      	beq.n	19f08 <d_type+0xe8>
   19f22:	68e3      	ldr	r3, [r4, #12]
   19f24:	781b      	ldrb	r3, [r3, #0]
   19f26:	2b46      	cmp	r3, #70	; 0x46
   19f28:	4620      	mov	r0, r4
   19f2a:	d01e      	beq.n	19f6a <d_type+0x14a>
   19f2c:	f7ff ff78 	bl	19e20 <d_type>
   19f30:	6028      	str	r0, [r5, #0]
   19f32:	2800      	cmp	r0, #0
   19f34:	d0e8      	beq.n	19f08 <d_type+0xe8>
   19f36:	7803      	ldrb	r3, [r0, #0]
   19f38:	3b1f      	subs	r3, #31
   19f3a:	2b01      	cmp	r3, #1
   19f3c:	d805      	bhi.n	19f4a <d_type+0x12a>
   19f3e:	9a01      	ldr	r2, [sp, #4]
   19f40:	68c3      	ldr	r3, [r0, #12]
   19f42:	60c2      	str	r2, [r0, #12]
   19f44:	682a      	ldr	r2, [r5, #0]
   19f46:	9201      	str	r2, [sp, #4]
   19f48:	602b      	str	r3, [r5, #0]
   19f4a:	9d01      	ldr	r5, [sp, #4]
   19f4c:	2d00      	cmp	r5, #0
   19f4e:	d0db      	beq.n	19f08 <d_type+0xe8>
   19f50:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
   19f54:	4293      	cmp	r3, r2
   19f56:	dad7      	bge.n	19f08 <d_type+0xe8>
   19f58:	69e1      	ldr	r1, [r4, #28]
   19f5a:	1c5a      	adds	r2, r3, #1
   19f5c:	4628      	mov	r0, r5
   19f5e:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
   19f62:	6222      	str	r2, [r4, #32]
   19f64:	b003      	add	sp, #12
   19f66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19f6a:	f000 fc7f 	bl	1a86c <d_function_type>
   19f6e:	6028      	str	r0, [r5, #0]
   19f70:	e7df      	b.n	19f32 <d_type+0x112>
   19f72:	48b1      	ldr	r0, [pc, #708]	; (1a238 <d_type+0x418>)
   19f74:	6963      	ldr	r3, [r4, #20]
   19f76:	3961      	subs	r1, #97	; 0x61
   19f78:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   19f7c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   19f80:	69a0      	ldr	r0, [r4, #24]
   19f82:	4283      	cmp	r3, r0
   19f84:	f280 8384 	bge.w	1a690 <d_type+0x870>
   19f88:	6920      	ldr	r0, [r4, #16]
   19f8a:	eb03 0683 	add.w	r6, r3, r3, lsl #2
   19f8e:	1c57      	adds	r7, r2, #1
   19f90:	3301      	adds	r3, #1
   19f92:	eb00 0586 	add.w	r5, r0, r6, lsl #2
   19f96:	2200      	movs	r2, #0
   19f98:	e9c5 2201 	strd	r2, r2, [r5, #4]
   19f9c:	6163      	str	r3, [r4, #20]
   19f9e:	2327      	movs	r3, #39	; 0x27
   19fa0:	f800 3026 	strb.w	r3, [r0, r6, lsl #2]
   19fa4:	60e9      	str	r1, [r5, #12]
   19fa6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   19fa8:	6849      	ldr	r1, [r1, #4]
   19faa:	60e7      	str	r7, [r4, #12]
   19fac:	440b      	add	r3, r1
   19fae:	62e3      	str	r3, [r4, #44]	; 0x2c
   19fb0:	e7ab      	b.n	19f0a <d_type+0xea>
   19fb2:	4620      	mov	r0, r4
   19fb4:	f000 fe2a 	bl	1ac0c <d_name>
   19fb8:	4605      	mov	r5, r0
   19fba:	9001      	str	r0, [sp, #4]
   19fbc:	2d00      	cmp	r5, #0
   19fbe:	d0a3      	beq.n	19f08 <d_type+0xe8>
   19fc0:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
   19fc4:	4293      	cmp	r3, r2
   19fc6:	da9f      	bge.n	19f08 <d_type+0xe8>
   19fc8:	69e1      	ldr	r1, [r4, #28]
   19fca:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
   19fce:	9d01      	ldr	r5, [sp, #4]
   19fd0:	1c5a      	adds	r2, r3, #1
   19fd2:	4628      	mov	r0, r5
   19fd4:	6222      	str	r2, [r4, #32]
   19fd6:	b003      	add	sp, #12
   19fd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19fdc:	3201      	adds	r2, #1
   19fde:	60e2      	str	r2, [r4, #12]
   19fe0:	4620      	mov	r0, r4
   19fe2:	f7ff ff1d 	bl	19e20 <d_type>
   19fe6:	2300      	movs	r3, #0
   19fe8:	4602      	mov	r2, r0
   19fea:	2125      	movs	r1, #37	; 0x25
   19fec:	4620      	mov	r0, r4
   19fee:	f7ff fa8b 	bl	19508 <d_make_comp>
   19ff2:	4605      	mov	r5, r0
   19ff4:	9001      	str	r0, [sp, #4]
   19ff6:	e7e1      	b.n	19fbc <d_type+0x19c>
   19ff8:	3201      	adds	r2, #1
   19ffa:	60e2      	str	r2, [r4, #12]
   19ffc:	4620      	mov	r0, r4
   19ffe:	f7ff fd61 	bl	19ac4 <d_source_name>
   1a002:	68e3      	ldr	r3, [r4, #12]
   1a004:	9001      	str	r0, [sp, #4]
   1a006:	781a      	ldrb	r2, [r3, #0]
   1a008:	2a49      	cmp	r2, #73	; 0x49
   1a00a:	4605      	mov	r5, r0
   1a00c:	f000 82d0 	beq.w	1a5b0 <d_type+0x790>
   1a010:	4620      	mov	r0, r4
   1a012:	f7ff ff05 	bl	19e20 <d_type>
   1a016:	9b01      	ldr	r3, [sp, #4]
   1a018:	4602      	mov	r2, r0
   1a01a:	2121      	movs	r1, #33	; 0x21
   1a01c:	4620      	mov	r0, r4
   1a01e:	f7ff fa73 	bl	19508 <d_make_comp>
   1a022:	4605      	mov	r5, r0
   1a024:	9001      	str	r0, [sp, #4]
   1a026:	e7c9      	b.n	19fbc <d_type+0x19c>
   1a028:	4620      	mov	r0, r4
   1a02a:	f7ff fcdf 	bl	199ec <d_template_param>
   1a02e:	68e6      	ldr	r6, [r4, #12]
   1a030:	9001      	str	r0, [sp, #4]
   1a032:	7833      	ldrb	r3, [r6, #0]
   1a034:	2b49      	cmp	r3, #73	; 0x49
   1a036:	4605      	mov	r5, r0
   1a038:	d1c0      	bne.n	19fbc <d_type+0x19c>
   1a03a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1a03c:	2b00      	cmp	r3, #0
   1a03e:	f040 82df 	bne.w	1a600 <d_type+0x7e0>
   1a042:	2800      	cmp	r0, #0
   1a044:	f43f af60 	beq.w	19f08 <d_type+0xe8>
   1a048:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
   1a04c:	428a      	cmp	r2, r1
   1a04e:	f6bf af5b 	bge.w	19f08 <d_type+0xe8>
   1a052:	69e1      	ldr	r1, [r4, #28]
   1a054:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   1a058:	3201      	adds	r2, #1
   1a05a:	6222      	str	r2, [r4, #32]
   1a05c:	7832      	ldrb	r2, [r6, #0]
   1a05e:	3a49      	subs	r2, #73	; 0x49
   1a060:	2a01      	cmp	r2, #1
   1a062:	d805      	bhi.n	1a070 <d_type+0x250>
   1a064:	3601      	adds	r6, #1
   1a066:	60e6      	str	r6, [r4, #12]
   1a068:	4620      	mov	r0, r4
   1a06a:	f001 fe1b 	bl	1bca4 <d_template_args_1>
   1a06e:	4603      	mov	r3, r0
   1a070:	462a      	mov	r2, r5
   1a072:	e01c      	b.n	1a0ae <d_type+0x28e>
   1a074:	7853      	ldrb	r3, [r2, #1]
   1a076:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   1a07a:	2a09      	cmp	r2, #9
   1a07c:	d905      	bls.n	1a08a <d_type+0x26a>
   1a07e:	2b5f      	cmp	r3, #95	; 0x5f
   1a080:	d003      	beq.n	1a08a <d_type+0x26a>
   1a082:	3b41      	subs	r3, #65	; 0x41
   1a084:	2b19      	cmp	r3, #25
   1a086:	f200 82ae 	bhi.w	1a5e6 <d_type+0x7c6>
   1a08a:	2100      	movs	r1, #0
   1a08c:	4620      	mov	r0, r4
   1a08e:	f7ff fd89 	bl	19ba4 <d_substitution>
   1a092:	68e3      	ldr	r3, [r4, #12]
   1a094:	9001      	str	r0, [sp, #4]
   1a096:	781a      	ldrb	r2, [r3, #0]
   1a098:	2a49      	cmp	r2, #73	; 0x49
   1a09a:	4605      	mov	r5, r0
   1a09c:	f47f af35 	bne.w	19f0a <d_type+0xea>
   1a0a0:	3301      	adds	r3, #1
   1a0a2:	60e3      	str	r3, [r4, #12]
   1a0a4:	4620      	mov	r0, r4
   1a0a6:	f001 fdfd 	bl	1bca4 <d_template_args_1>
   1a0aa:	462a      	mov	r2, r5
   1a0ac:	4603      	mov	r3, r0
   1a0ae:	2104      	movs	r1, #4
   1a0b0:	4620      	mov	r0, r4
   1a0b2:	f7ff fa29 	bl	19508 <d_make_comp>
   1a0b6:	4605      	mov	r5, r0
   1a0b8:	9001      	str	r0, [sp, #4]
   1a0ba:	e77f      	b.n	19fbc <d_type+0x19c>
   1a0bc:	4620      	mov	r0, r4
   1a0be:	f000 fbd5 	bl	1a86c <d_function_type>
   1a0c2:	4605      	mov	r5, r0
   1a0c4:	9001      	str	r0, [sp, #4]
   1a0c6:	e779      	b.n	19fbc <d_type+0x19c>
   1a0c8:	1c53      	adds	r3, r2, #1
   1a0ca:	60e3      	str	r3, [r4, #12]
   1a0cc:	7853      	ldrb	r3, [r2, #1]
   1a0ce:	2b00      	cmp	r3, #0
   1a0d0:	f43f af1a 	beq.w	19f08 <d_type+0xe8>
   1a0d4:	1c93      	adds	r3, r2, #2
   1a0d6:	60e3      	str	r3, [r4, #12]
   1a0d8:	7853      	ldrb	r3, [r2, #1]
   1a0da:	3b46      	subs	r3, #70	; 0x46
   1a0dc:	2b30      	cmp	r3, #48	; 0x30
   1a0de:	f63f af13 	bhi.w	19f08 <d_type+0xe8>
   1a0e2:	a101      	add	r1, pc, #4	; (adr r1, 1a0e8 <d_type+0x2c8>)
   1a0e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1a0e8:	0001a2ef 	.word	0x0001a2ef
   1a0ec:	00019f09 	.word	0x00019f09
   1a0f0:	00019f09 	.word	0x00019f09
   1a0f4:	00019f09 	.word	0x00019f09
   1a0f8:	00019f09 	.word	0x00019f09
   1a0fc:	00019f09 	.word	0x00019f09
   1a100:	00019f09 	.word	0x00019f09
   1a104:	00019f09 	.word	0x00019f09
   1a108:	00019f09 	.word	0x00019f09
   1a10c:	00019f09 	.word	0x00019f09
   1a110:	00019f09 	.word	0x00019f09
   1a114:	00019f09 	.word	0x00019f09
   1a118:	00019f09 	.word	0x00019f09
   1a11c:	00019f09 	.word	0x00019f09
   1a120:	00019ed9 	.word	0x00019ed9
   1a124:	00019f09 	.word	0x00019f09
   1a128:	00019f09 	.word	0x00019f09
   1a12c:	00019f09 	.word	0x00019f09
   1a130:	00019f09 	.word	0x00019f09
   1a134:	00019f09 	.word	0x00019f09
   1a138:	00019f09 	.word	0x00019f09
   1a13c:	00019f09 	.word	0x00019f09
   1a140:	00019f09 	.word	0x00019f09
   1a144:	00019f09 	.word	0x00019f09
   1a148:	00019f09 	.word	0x00019f09
   1a14c:	00019f09 	.word	0x00019f09
   1a150:	00019f09 	.word	0x00019f09
   1a154:	0001a38f 	.word	0x0001a38f
   1a158:	00019f09 	.word	0x00019f09
   1a15c:	0001a363 	.word	0x0001a363
   1a160:	0001a44b 	.word	0x0001a44b
   1a164:	0001a41b 	.word	0x0001a41b
   1a168:	0001a3eb 	.word	0x0001a3eb
   1a16c:	00019f09 	.word	0x00019f09
   1a170:	0001a3bb 	.word	0x0001a3bb
   1a174:	0001a57d 	.word	0x0001a57d
   1a178:	00019f09 	.word	0x00019f09
   1a17c:	00019f09 	.word	0x00019f09
   1a180:	00019f09 	.word	0x00019f09
   1a184:	00019f09 	.word	0x00019f09
   1a188:	0001a54d 	.word	0x0001a54d
   1a18c:	00019f09 	.word	0x00019f09
   1a190:	0001a535 	.word	0x0001a535
   1a194:	00019f09 	.word	0x00019f09
   1a198:	00019f09 	.word	0x00019f09
   1a19c:	0001a505 	.word	0x0001a505
   1a1a0:	00019ed9 	.word	0x00019ed9
   1a1a4:	0001a4d5 	.word	0x0001a4d5
   1a1a8:	0001a47b 	.word	0x0001a47b
   1a1ac:	3201      	adds	r2, #1
   1a1ae:	60e2      	str	r2, [r4, #12]
   1a1b0:	4620      	mov	r0, r4
   1a1b2:	f7ff fe35 	bl	19e20 <d_type>
   1a1b6:	2300      	movs	r3, #0
   1a1b8:	4602      	mov	r2, r0
   1a1ba:	2123      	movs	r1, #35	; 0x23
   1a1bc:	4620      	mov	r0, r4
   1a1be:	f7ff f9a3 	bl	19508 <d_make_comp>
   1a1c2:	4605      	mov	r5, r0
   1a1c4:	9001      	str	r0, [sp, #4]
   1a1c6:	e6f9      	b.n	19fbc <d_type+0x19c>
   1a1c8:	3201      	adds	r2, #1
   1a1ca:	60e2      	str	r2, [r4, #12]
   1a1cc:	4620      	mov	r0, r4
   1a1ce:	f7ff fe27 	bl	19e20 <d_type>
   1a1d2:	2300      	movs	r3, #0
   1a1d4:	4602      	mov	r2, r0
   1a1d6:	2122      	movs	r1, #34	; 0x22
   1a1d8:	4620      	mov	r0, r4
   1a1da:	f7ff f995 	bl	19508 <d_make_comp>
   1a1de:	4605      	mov	r5, r0
   1a1e0:	9001      	str	r0, [sp, #4]
   1a1e2:	e6eb      	b.n	19fbc <d_type+0x19c>
   1a1e4:	3201      	adds	r2, #1
   1a1e6:	60e2      	str	r2, [r4, #12]
   1a1e8:	4620      	mov	r0, r4
   1a1ea:	f7ff fe19 	bl	19e20 <d_type>
   1a1ee:	2300      	movs	r3, #0
   1a1f0:	4602      	mov	r2, r0
   1a1f2:	2124      	movs	r1, #36	; 0x24
   1a1f4:	4620      	mov	r0, r4
   1a1f6:	f7ff f987 	bl	19508 <d_make_comp>
   1a1fa:	4605      	mov	r5, r0
   1a1fc:	9001      	str	r0, [sp, #4]
   1a1fe:	e6dd      	b.n	19fbc <d_type+0x19c>
   1a200:	3201      	adds	r2, #1
   1a202:	60e2      	str	r2, [r4, #12]
   1a204:	4620      	mov	r0, r4
   1a206:	f7ff fe0b 	bl	19e20 <d_type>
   1a20a:	2300      	movs	r3, #0
   1a20c:	4602      	mov	r2, r0
   1a20e:	2126      	movs	r1, #38	; 0x26
   1a210:	4620      	mov	r0, r4
   1a212:	f7ff f979 	bl	19508 <d_make_comp>
   1a216:	4605      	mov	r5, r0
   1a218:	9001      	str	r0, [sp, #4]
   1a21a:	e6cf      	b.n	19fbc <d_type+0x19c>
   1a21c:	3201      	adds	r2, #1
   1a21e:	60e2      	str	r2, [r4, #12]
   1a220:	4620      	mov	r0, r4
   1a222:	f7ff fc4f 	bl	19ac4 <d_source_name>
   1a226:	2300      	movs	r3, #0
   1a228:	4602      	mov	r2, r0
   1a22a:	2128      	movs	r1, #40	; 0x28
   1a22c:	4620      	mov	r0, r4
   1a22e:	f7ff f96b 	bl	19508 <d_make_comp>
   1a232:	4605      	mov	r5, r0
   1a234:	9001      	str	r0, [sp, #4]
   1a236:	e6c1      	b.n	19fbc <d_type+0x19c>
   1a238:	0003ef00 	.word	0x0003ef00
   1a23c:	1c51      	adds	r1, r2, #1
   1a23e:	60e1      	str	r1, [r4, #12]
   1a240:	7853      	ldrb	r3, [r2, #1]
   1a242:	2b5f      	cmp	r3, #95	; 0x5f
   1a244:	f000 81b2 	beq.w	1a5ac <d_type+0x78c>
   1a248:	3b30      	subs	r3, #48	; 0x30
   1a24a:	2b09      	cmp	r3, #9
   1a24c:	f200 81bd 	bhi.w	1a5ca <d_type+0x7aa>
   1a250:	460b      	mov	r3, r1
   1a252:	461d      	mov	r5, r3
   1a254:	3301      	adds	r3, #1
   1a256:	60e3      	str	r3, [r4, #12]
   1a258:	781a      	ldrb	r2, [r3, #0]
   1a25a:	3a30      	subs	r2, #48	; 0x30
   1a25c:	2a09      	cmp	r2, #9
   1a25e:	d9f8      	bls.n	1a252 <d_type+0x432>
   1a260:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
   1a264:	4282      	cmp	r2, r0
   1a266:	eba3 0c01 	sub.w	ip, r3, r1
   1a26a:	f6bf ae4d 	bge.w	19f08 <d_type+0xe8>
   1a26e:	f8d4 e010 	ldr.w	lr, [r4, #16]
   1a272:	eb02 0082 	add.w	r0, r2, r2, lsl #2
   1a276:	eb0e 0680 	add.w	r6, lr, r0, lsl #2
   1a27a:	0087      	lsls	r7, r0, #2
   1a27c:	2000      	movs	r0, #0
   1a27e:	3201      	adds	r2, #1
   1a280:	4584      	cmp	ip, r0
   1a282:	e9c6 0001 	strd	r0, r0, [r6, #4]
   1a286:	6162      	str	r2, [r4, #20]
   1a288:	f77f ae3e 	ble.w	19f08 <d_type+0xe8>
   1a28c:	e9c6 0001 	strd	r0, r0, [r6, #4]
   1a290:	f80e 0007 	strb.w	r0, [lr, r7]
   1a294:	e9c6 1c03 	strd	r1, ip, [r6, #12]
   1a298:	786a      	ldrb	r2, [r5, #1]
   1a29a:	4619      	mov	r1, r3
   1a29c:	2a5f      	cmp	r2, #95	; 0x5f
   1a29e:	f47f ae33 	bne.w	19f08 <d_type+0xe8>
   1a2a2:	3101      	adds	r1, #1
   1a2a4:	60e1      	str	r1, [r4, #12]
   1a2a6:	4620      	mov	r0, r4
   1a2a8:	f7ff fdba 	bl	19e20 <d_type>
   1a2ac:	4632      	mov	r2, r6
   1a2ae:	4603      	mov	r3, r0
   1a2b0:	212a      	movs	r1, #42	; 0x2a
   1a2b2:	4620      	mov	r0, r4
   1a2b4:	f7ff f928 	bl	19508 <d_make_comp>
   1a2b8:	4605      	mov	r5, r0
   1a2ba:	9001      	str	r0, [sp, #4]
   1a2bc:	e67e      	b.n	19fbc <d_type+0x19c>
   1a2be:	3201      	adds	r2, #1
   1a2c0:	60e2      	str	r2, [r4, #12]
   1a2c2:	4620      	mov	r0, r4
   1a2c4:	f7ff fdac 	bl	19e20 <d_type>
   1a2c8:	4605      	mov	r5, r0
   1a2ca:	2800      	cmp	r0, #0
   1a2cc:	f43f ae1c 	beq.w	19f08 <d_type+0xe8>
   1a2d0:	4620      	mov	r0, r4
   1a2d2:	f7ff fda5 	bl	19e20 <d_type>
   1a2d6:	4603      	mov	r3, r0
   1a2d8:	2800      	cmp	r0, #0
   1a2da:	f43f ae15 	beq.w	19f08 <d_type+0xe8>
   1a2de:	462a      	mov	r2, r5
   1a2e0:	212b      	movs	r1, #43	; 0x2b
   1a2e2:	4620      	mov	r0, r4
   1a2e4:	f7ff f910 	bl	19508 <d_make_comp>
   1a2e8:	4605      	mov	r5, r0
   1a2ea:	9001      	str	r0, [sp, #4]
   1a2ec:	e666      	b.n	19fbc <d_type+0x19c>
   1a2ee:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
   1a2f2:	428b      	cmp	r3, r1
   1a2f4:	f280 81d0 	bge.w	1a698 <d_type+0x878>
   1a2f8:	6921      	ldr	r1, [r4, #16]
   1a2fa:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   1a2fe:	eb01 0580 	add.w	r5, r1, r0, lsl #2
   1a302:	3301      	adds	r3, #1
   1a304:	2600      	movs	r6, #0
   1a306:	e9c5 6601 	strd	r6, r6, [r5, #4]
   1a30a:	6163      	str	r3, [r4, #20]
   1a30c:	232c      	movs	r3, #44	; 0x2c
   1a30e:	9501      	str	r5, [sp, #4]
   1a310:	f801 3020 	strb.w	r3, [r1, r0, lsl #2]
   1a314:	7893      	ldrb	r3, [r2, #2]
   1a316:	3b30      	subs	r3, #48	; 0x30
   1a318:	b2db      	uxtb	r3, r3
   1a31a:	2b09      	cmp	r3, #9
   1a31c:	bf94      	ite	ls
   1a31e:	2301      	movls	r3, #1
   1a320:	4633      	movhi	r3, r6
   1a322:	822b      	strh	r3, [r5, #16]
   1a324:	d803      	bhi.n	1a32e <d_type+0x50e>
   1a326:	4620      	mov	r0, r4
   1a328:	f7ff f938 	bl	1959c <d_number>
   1a32c:	9d01      	ldr	r5, [sp, #4]
   1a32e:	4620      	mov	r0, r4
   1a330:	f7ff fd76 	bl	19e20 <d_type>
   1a334:	9b01      	ldr	r3, [sp, #4]
   1a336:	60e8      	str	r0, [r5, #12]
   1a338:	68db      	ldr	r3, [r3, #12]
   1a33a:	2b00      	cmp	r3, #0
   1a33c:	f43f ade4 	beq.w	19f08 <d_type+0xe8>
   1a340:	4620      	mov	r0, r4
   1a342:	f7ff f92b 	bl	1959c <d_number>
   1a346:	68e2      	ldr	r2, [r4, #12]
   1a348:	7813      	ldrb	r3, [r2, #0]
   1a34a:	b113      	cbz	r3, 1a352 <d_type+0x532>
   1a34c:	1c53      	adds	r3, r2, #1
   1a34e:	60e3      	str	r3, [r4, #12]
   1a350:	7813      	ldrb	r3, [r2, #0]
   1a352:	9d01      	ldr	r5, [sp, #4]
   1a354:	f1a3 0373 	sub.w	r3, r3, #115	; 0x73
   1a358:	fab3 f383 	clz	r3, r3
   1a35c:	095b      	lsrs	r3, r3, #5
   1a35e:	826b      	strh	r3, [r5, #18]
   1a360:	e5d3      	b.n	19f0a <d_type+0xea>
   1a362:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1a366:	4293      	cmp	r3, r2
   1a368:	f6bf adce 	bge.w	19f08 <d_type+0xe8>
   1a36c:	6922      	ldr	r2, [r4, #16]
   1a36e:	49be      	ldr	r1, [pc, #760]	; (1a668 <d_type+0x848>)
   1a370:	eb03 0583 	add.w	r5, r3, r3, lsl #2
   1a374:	00a8      	lsls	r0, r5, #2
   1a376:	3301      	adds	r3, #1
   1a378:	6163      	str	r3, [r4, #20]
   1a37a:	eb02 0585 	add.w	r5, r2, r5, lsl #2
   1a37e:	2300      	movs	r3, #0
   1a380:	e9c5 3301 	strd	r3, r3, [r5, #4]
   1a384:	5413      	strb	r3, [r2, r0]
   1a386:	230e      	movs	r3, #14
   1a388:	e9c5 1303 	strd	r1, r3, [r5, #12]
   1a38c:	e5bd      	b.n	19f0a <d_type+0xea>
   1a38e:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1a392:	4293      	cmp	r3, r2
   1a394:	f6bf adb8 	bge.w	19f08 <d_type+0xe8>
   1a398:	6922      	ldr	r2, [r4, #16]
   1a39a:	49b4      	ldr	r1, [pc, #720]	; (1a66c <d_type+0x84c>)
   1a39c:	eb03 0583 	add.w	r5, r3, r3, lsl #2
   1a3a0:	00a8      	lsls	r0, r5, #2
   1a3a2:	3301      	adds	r3, #1
   1a3a4:	6163      	str	r3, [r4, #20]
   1a3a6:	eb02 0585 	add.w	r5, r2, r5, lsl #2
   1a3aa:	2300      	movs	r3, #0
   1a3ac:	e9c5 3301 	strd	r3, r3, [r5, #4]
   1a3b0:	5413      	strb	r3, [r2, r0]
   1a3b2:	2304      	movs	r3, #4
   1a3b4:	e9c5 1303 	strd	r1, r3, [r5, #12]
   1a3b8:	e5a7      	b.n	19f0a <d_type+0xea>
   1a3ba:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1a3be:	4293      	cmp	r3, r2
   1a3c0:	f280 8166 	bge.w	1a690 <d_type+0x870>
   1a3c4:	6922      	ldr	r2, [r4, #16]
   1a3c6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1a3ca:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   1a3ce:	3301      	adds	r3, #1
   1a3d0:	2000      	movs	r0, #0
   1a3d2:	e9c5 0001 	strd	r0, r0, [r5, #4]
   1a3d6:	6163      	str	r3, [r4, #20]
   1a3d8:	2327      	movs	r3, #39	; 0x27
   1a3da:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   1a3de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1a3e0:	4aa3      	ldr	r2, [pc, #652]	; (1a670 <d_type+0x850>)
   1a3e2:	60ea      	str	r2, [r5, #12]
   1a3e4:	3304      	adds	r3, #4
   1a3e6:	62e3      	str	r3, [r4, #44]	; 0x2c
   1a3e8:	e58f      	b.n	19f0a <d_type+0xea>
   1a3ea:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1a3ee:	4293      	cmp	r3, r2
   1a3f0:	f280 814e 	bge.w	1a690 <d_type+0x870>
   1a3f4:	6922      	ldr	r2, [r4, #16]
   1a3f6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1a3fa:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   1a3fe:	3301      	adds	r3, #1
   1a400:	2000      	movs	r0, #0
   1a402:	e9c5 0001 	strd	r0, r0, [r5, #4]
   1a406:	6163      	str	r3, [r4, #20]
   1a408:	2327      	movs	r3, #39	; 0x27
   1a40a:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   1a40e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1a410:	4a98      	ldr	r2, [pc, #608]	; (1a674 <d_type+0x854>)
   1a412:	60ea      	str	r2, [r5, #12]
   1a414:	3309      	adds	r3, #9
   1a416:	62e3      	str	r3, [r4, #44]	; 0x2c
   1a418:	e577      	b.n	19f0a <d_type+0xea>
   1a41a:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1a41e:	4293      	cmp	r3, r2
   1a420:	f280 8136 	bge.w	1a690 <d_type+0x870>
   1a424:	6922      	ldr	r2, [r4, #16]
   1a426:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1a42a:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   1a42e:	3301      	adds	r3, #1
   1a430:	2000      	movs	r0, #0
   1a432:	e9c5 0001 	strd	r0, r0, [r5, #4]
   1a436:	6163      	str	r3, [r4, #20]
   1a438:	2327      	movs	r3, #39	; 0x27
   1a43a:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   1a43e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1a440:	4a8d      	ldr	r2, [pc, #564]	; (1a678 <d_type+0x858>)
   1a442:	60ea      	str	r2, [r5, #12]
   1a444:	330a      	adds	r3, #10
   1a446:	62e3      	str	r3, [r4, #44]	; 0x2c
   1a448:	e55f      	b.n	19f0a <d_type+0xea>
   1a44a:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1a44e:	4293      	cmp	r3, r2
   1a450:	f280 811e 	bge.w	1a690 <d_type+0x870>
   1a454:	6922      	ldr	r2, [r4, #16]
   1a456:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1a45a:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   1a45e:	3301      	adds	r3, #1
   1a460:	2000      	movs	r0, #0
   1a462:	e9c5 0001 	strd	r0, r0, [r5, #4]
   1a466:	6163      	str	r3, [r4, #20]
   1a468:	2327      	movs	r3, #39	; 0x27
   1a46a:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   1a46e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1a470:	4a82      	ldr	r2, [pc, #520]	; (1a67c <d_type+0x85c>)
   1a472:	60ea      	str	r2, [r5, #12]
   1a474:	3309      	adds	r3, #9
   1a476:	62e3      	str	r3, [r4, #44]	; 0x2c
   1a478:	e547      	b.n	19f0a <d_type+0xea>
   1a47a:	7893      	ldrb	r3, [r2, #2]
   1a47c:	2b5f      	cmp	r3, #95	; 0x5f
   1a47e:	f000 80e5 	beq.w	1a64c <d_type+0x82c>
   1a482:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1a486:	4293      	cmp	r3, r2
   1a488:	f6bf ad3e 	bge.w	19f08 <d_type+0xe8>
   1a48c:	6922      	ldr	r2, [r4, #16]
   1a48e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1a492:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   1a496:	3301      	adds	r3, #1
   1a498:	2000      	movs	r0, #0
   1a49a:	e9c5 0001 	strd	r0, r0, [r5, #4]
   1a49e:	6163      	str	r3, [r4, #20]
   1a4a0:	2342      	movs	r3, #66	; 0x42
   1a4a2:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   1a4a6:	4620      	mov	r0, r4
   1a4a8:	f7ff f878 	bl	1959c <d_number>
   1a4ac:	60e8      	str	r0, [r5, #12]
   1a4ae:	68e3      	ldr	r3, [r4, #12]
   1a4b0:	781a      	ldrb	r2, [r3, #0]
   1a4b2:	2a5f      	cmp	r2, #95	; 0x5f
   1a4b4:	f47f ad28 	bne.w	19f08 <d_type+0xe8>
   1a4b8:	3301      	adds	r3, #1
   1a4ba:	60e3      	str	r3, [r4, #12]
   1a4bc:	4620      	mov	r0, r4
   1a4be:	f7ff fcaf 	bl	19e20 <d_type>
   1a4c2:	462a      	mov	r2, r5
   1a4c4:	4603      	mov	r3, r0
   1a4c6:	212d      	movs	r1, #45	; 0x2d
   1a4c8:	4620      	mov	r0, r4
   1a4ca:	f7ff f81d 	bl	19508 <d_make_comp>
   1a4ce:	4605      	mov	r5, r0
   1a4d0:	9001      	str	r0, [sp, #4]
   1a4d2:	e573      	b.n	19fbc <d_type+0x19c>
   1a4d4:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1a4d8:	4293      	cmp	r3, r2
   1a4da:	f280 80d9 	bge.w	1a690 <d_type+0x870>
   1a4de:	6922      	ldr	r2, [r4, #16]
   1a4e0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1a4e4:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   1a4e8:	3301      	adds	r3, #1
   1a4ea:	2000      	movs	r0, #0
   1a4ec:	e9c5 0001 	strd	r0, r0, [r5, #4]
   1a4f0:	6163      	str	r3, [r4, #20]
   1a4f2:	2327      	movs	r3, #39	; 0x27
   1a4f4:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   1a4f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1a4fa:	4a61      	ldr	r2, [pc, #388]	; (1a680 <d_type+0x860>)
   1a4fc:	60ea      	str	r2, [r5, #12]
   1a4fe:	3307      	adds	r3, #7
   1a500:	62e3      	str	r3, [r4, #44]	; 0x2c
   1a502:	e502      	b.n	19f0a <d_type+0xea>
   1a504:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1a508:	4293      	cmp	r3, r2
   1a50a:	f280 80c1 	bge.w	1a690 <d_type+0x870>
   1a50e:	6922      	ldr	r2, [r4, #16]
   1a510:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1a514:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   1a518:	3301      	adds	r3, #1
   1a51a:	2000      	movs	r0, #0
   1a51c:	e9c5 0001 	strd	r0, r0, [r5, #4]
   1a520:	6163      	str	r3, [r4, #20]
   1a522:	2327      	movs	r3, #39	; 0x27
   1a524:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   1a528:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1a52a:	4a56      	ldr	r2, [pc, #344]	; (1a684 <d_type+0x864>)
   1a52c:	60ea      	str	r2, [r5, #12]
   1a52e:	3308      	adds	r3, #8
   1a530:	62e3      	str	r3, [r4, #44]	; 0x2c
   1a532:	e4ea      	b.n	19f0a <d_type+0xea>
   1a534:	4620      	mov	r0, r4
   1a536:	f7ff fc73 	bl	19e20 <d_type>
   1a53a:	2300      	movs	r3, #0
   1a53c:	4602      	mov	r2, r0
   1a53e:	214b      	movs	r1, #75	; 0x4b
   1a540:	4620      	mov	r0, r4
   1a542:	f7fe ffe1 	bl	19508 <d_make_comp>
   1a546:	4605      	mov	r5, r0
   1a548:	9001      	str	r0, [sp, #4]
   1a54a:	e537      	b.n	19fbc <d_type+0x19c>
   1a54c:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1a550:	4293      	cmp	r3, r2
   1a552:	f280 809d 	bge.w	1a690 <d_type+0x870>
   1a556:	6922      	ldr	r2, [r4, #16]
   1a558:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1a55c:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   1a560:	3301      	adds	r3, #1
   1a562:	2000      	movs	r0, #0
   1a564:	e9c5 0001 	strd	r0, r0, [r5, #4]
   1a568:	6163      	str	r3, [r4, #20]
   1a56a:	2327      	movs	r3, #39	; 0x27
   1a56c:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   1a570:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1a572:	4a45      	ldr	r2, [pc, #276]	; (1a688 <d_type+0x868>)
   1a574:	60ea      	str	r2, [r5, #12]
   1a576:	3311      	adds	r3, #17
   1a578:	62e3      	str	r3, [r4, #44]	; 0x2c
   1a57a:	e4c6      	b.n	19f0a <d_type+0xea>
   1a57c:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1a580:	4293      	cmp	r3, r2
   1a582:	f280 8085 	bge.w	1a690 <d_type+0x870>
   1a586:	6922      	ldr	r2, [r4, #16]
   1a588:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1a58c:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   1a590:	3301      	adds	r3, #1
   1a592:	2000      	movs	r0, #0
   1a594:	e9c5 0001 	strd	r0, r0, [r5, #4]
   1a598:	6163      	str	r3, [r4, #20]
   1a59a:	2327      	movs	r3, #39	; 0x27
   1a59c:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   1a5a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1a5a2:	4a3a      	ldr	r2, [pc, #232]	; (1a68c <d_type+0x86c>)
   1a5a4:	60ea      	str	r2, [r5, #12]
   1a5a6:	3308      	adds	r3, #8
   1a5a8:	62e3      	str	r3, [r4, #44]	; 0x2c
   1a5aa:	e4ae      	b.n	19f0a <d_type+0xea>
   1a5ac:	2600      	movs	r6, #0
   1a5ae:	e678      	b.n	1a2a2 <d_type+0x482>
   1a5b0:	3301      	adds	r3, #1
   1a5b2:	60e3      	str	r3, [r4, #12]
   1a5b4:	4620      	mov	r0, r4
   1a5b6:	f001 fb75 	bl	1bca4 <d_template_args_1>
   1a5ba:	462a      	mov	r2, r5
   1a5bc:	4603      	mov	r3, r0
   1a5be:	2104      	movs	r1, #4
   1a5c0:	4620      	mov	r0, r4
   1a5c2:	f7fe ffa1 	bl	19508 <d_make_comp>
   1a5c6:	9001      	str	r0, [sp, #4]
   1a5c8:	e522      	b.n	1a010 <d_type+0x1f0>
   1a5ca:	2301      	movs	r3, #1
   1a5cc:	6b25      	ldr	r5, [r4, #48]	; 0x30
   1a5ce:	6323      	str	r3, [r4, #48]	; 0x30
   1a5d0:	4620      	mov	r0, r4
   1a5d2:	f001 f851 	bl	1b678 <d_expression_1>
   1a5d6:	6325      	str	r5, [r4, #48]	; 0x30
   1a5d8:	4606      	mov	r6, r0
   1a5da:	2800      	cmp	r0, #0
   1a5dc:	f43f ac94 	beq.w	19f08 <d_type+0xe8>
   1a5e0:	68e1      	ldr	r1, [r4, #12]
   1a5e2:	780a      	ldrb	r2, [r1, #0]
   1a5e4:	e65a      	b.n	1a29c <d_type+0x47c>
   1a5e6:	4620      	mov	r0, r4
   1a5e8:	f000 fb10 	bl	1ac0c <d_name>
   1a5ec:	4605      	mov	r5, r0
   1a5ee:	9001      	str	r0, [sp, #4]
   1a5f0:	2800      	cmp	r0, #0
   1a5f2:	f43f ac89 	beq.w	19f08 <d_type+0xe8>
   1a5f6:	7803      	ldrb	r3, [r0, #0]
   1a5f8:	2b18      	cmp	r3, #24
   1a5fa:	f47f ace1 	bne.w	19fc0 <d_type+0x1a0>
   1a5fe:	e484      	b.n	19f0a <d_type+0xea>
   1a600:	1c73      	adds	r3, r6, #1
   1a602:	60e3      	str	r3, [r4, #12]
   1a604:	4620      	mov	r0, r4
   1a606:	f8d4 9014 	ldr.w	r9, [r4, #20]
   1a60a:	f8d4 8020 	ldr.w	r8, [r4, #32]
   1a60e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   1a610:	f001 fb48 	bl	1bca4 <d_template_args_1>
   1a614:	68e3      	ldr	r3, [r4, #12]
   1a616:	781b      	ldrb	r3, [r3, #0]
   1a618:	2b49      	cmp	r3, #73	; 0x49
   1a61a:	d007      	beq.n	1a62c <d_type+0x80c>
   1a61c:	9d01      	ldr	r5, [sp, #4]
   1a61e:	60e6      	str	r6, [r4, #12]
   1a620:	f8c4 9014 	str.w	r9, [r4, #20]
   1a624:	f8c4 8020 	str.w	r8, [r4, #32]
   1a628:	62e7      	str	r7, [r4, #44]	; 0x2c
   1a62a:	e4c7      	b.n	19fbc <d_type+0x19c>
   1a62c:	9a01      	ldr	r2, [sp, #4]
   1a62e:	2a00      	cmp	r2, #0
   1a630:	f43f ac6a 	beq.w	19f08 <d_type+0xe8>
   1a634:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
   1a638:	4299      	cmp	r1, r3
   1a63a:	f6bf ac65 	bge.w	19f08 <d_type+0xe8>
   1a63e:	69e5      	ldr	r5, [r4, #28]
   1a640:	f845 2021 	str.w	r2, [r5, r1, lsl #2]
   1a644:	3101      	adds	r1, #1
   1a646:	4603      	mov	r3, r0
   1a648:	6221      	str	r1, [r4, #32]
   1a64a:	e530      	b.n	1a0ae <d_type+0x28e>
   1a64c:	3203      	adds	r2, #3
   1a64e:	2301      	movs	r3, #1
   1a650:	6b25      	ldr	r5, [r4, #48]	; 0x30
   1a652:	60e2      	str	r2, [r4, #12]
   1a654:	6323      	str	r3, [r4, #48]	; 0x30
   1a656:	4620      	mov	r0, r4
   1a658:	f001 f80e 	bl	1b678 <d_expression_1>
   1a65c:	6325      	str	r5, [r4, #48]	; 0x30
   1a65e:	4605      	mov	r5, r0
   1a660:	2800      	cmp	r0, #0
   1a662:	f47f af24 	bne.w	1a4ae <d_type+0x68e>
   1a666:	e44f      	b.n	19f08 <d_type+0xe8>
   1a668:	0004385c 	.word	0x0004385c
   1a66c:	00043854 	.word	0x00043854
   1a670:	0003f144 	.word	0x0003f144
   1a674:	0003f108 	.word	0x0003f108
   1a678:	0003f130 	.word	0x0003f130
   1a67c:	0003f11c 	.word	0x0003f11c
   1a680:	0003f158 	.word	0x0003f158
   1a684:	0003f16c 	.word	0x0003f16c
   1a688:	0003f194 	.word	0x0003f194
   1a68c:	0003f180 	.word	0x0003f180
   1a690:	2300      	movs	r3, #0
   1a692:	9301      	str	r3, [sp, #4]
   1a694:	68db      	ldr	r3, [r3, #12]
   1a696:	deff      	udf	#255	; 0xff
   1a698:	2300      	movs	r3, #0
   1a69a:	701b      	strb	r3, [r3, #0]
   1a69c:	deff      	udf	#255	; 0xff
   1a69e:	bf00      	nop

0001a6a0 <d_operator_name>:
   1a6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a6a2:	68c3      	ldr	r3, [r0, #12]
   1a6a4:	781f      	ldrb	r7, [r3, #0]
   1a6a6:	4606      	mov	r6, r0
   1a6a8:	bb77      	cbnz	r7, 1a708 <d_operator_name+0x68>
   1a6aa:	f04f 0e00 	mov.w	lr, #0
   1a6ae:	4d3d      	ldr	r5, [pc, #244]	; (1a7a4 <d_operator_name+0x104>)
   1a6b0:	2145      	movs	r1, #69	; 0x45
   1a6b2:	2200      	movs	r2, #0
   1a6b4:	1a8b      	subs	r3, r1, r2
   1a6b6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   1a6ba:	eb02 0363 	add.w	r3, r2, r3, asr #1
   1a6be:	0118      	lsls	r0, r3, #4
   1a6c0:	eb05 1c03 	add.w	ip, r5, r3, lsl #4
   1a6c4:	582c      	ldr	r4, [r5, r0]
   1a6c6:	7820      	ldrb	r0, [r4, #0]
   1a6c8:	42b8      	cmp	r0, r7
   1a6ca:	d006      	beq.n	1a6da <d_operator_name+0x3a>
   1a6cc:	bf94      	ite	ls
   1a6ce:	1c5a      	addls	r2, r3, #1
   1a6d0:	4619      	movhi	r1, r3
   1a6d2:	428a      	cmp	r2, r1
   1a6d4:	d1ee      	bne.n	1a6b4 <d_operator_name+0x14>
   1a6d6:	2000      	movs	r0, #0
   1a6d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a6da:	7860      	ldrb	r0, [r4, #1]
   1a6dc:	4570      	cmp	r0, lr
   1a6de:	d1f5      	bne.n	1a6cc <d_operator_name+0x2c>
   1a6e0:	e9d6 3205 	ldrd	r3, r2, [r6, #20]
   1a6e4:	4293      	cmp	r3, r2
   1a6e6:	daf6      	bge.n	1a6d6 <d_operator_name+0x36>
   1a6e8:	6932      	ldr	r2, [r6, #16]
   1a6ea:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1a6ee:	eb02 0081 	add.w	r0, r2, r1, lsl #2
   1a6f2:	3301      	adds	r3, #1
   1a6f4:	2400      	movs	r4, #0
   1a6f6:	e9c0 4401 	strd	r4, r4, [r0, #4]
   1a6fa:	6173      	str	r3, [r6, #20]
   1a6fc:	2332      	movs	r3, #50	; 0x32
   1a6fe:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   1a702:	f8c0 c00c 	str.w	ip, [r0, #12]
   1a706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a708:	1c5a      	adds	r2, r3, #1
   1a70a:	60c2      	str	r2, [r0, #12]
   1a70c:	f893 e001 	ldrb.w	lr, [r3, #1]
   1a710:	781f      	ldrb	r7, [r3, #0]
   1a712:	f1be 0f00 	cmp.w	lr, #0
   1a716:	d102      	bne.n	1a71e <d_operator_name+0x7e>
   1a718:	2f76      	cmp	r7, #118	; 0x76
   1a71a:	d0c8      	beq.n	1a6ae <d_operator_name+0xe>
   1a71c:	e7c5      	b.n	1a6aa <d_operator_name+0xa>
   1a71e:	1c9a      	adds	r2, r3, #2
   1a720:	60c2      	str	r2, [r0, #12]
   1a722:	2f76      	cmp	r7, #118	; 0x76
   1a724:	f893 e001 	ldrb.w	lr, [r3, #1]
   1a728:	d11f      	bne.n	1a76a <d_operator_name+0xca>
   1a72a:	f1ae 0430 	sub.w	r4, lr, #48	; 0x30
   1a72e:	b2e3      	uxtb	r3, r4
   1a730:	2b09      	cmp	r3, #9
   1a732:	d8bc      	bhi.n	1a6ae <d_operator_name+0xe>
   1a734:	f7ff f9c6 	bl	19ac4 <d_source_name>
   1a738:	e9d6 3105 	ldrd	r3, r1, [r6, #20]
   1a73c:	428b      	cmp	r3, r1
   1a73e:	4602      	mov	r2, r0
   1a740:	dac9      	bge.n	1a6d6 <d_operator_name+0x36>
   1a742:	6937      	ldr	r7, [r6, #16]
   1a744:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1a748:	eb07 0081 	add.w	r0, r7, r1, lsl #2
   1a74c:	3301      	adds	r3, #1
   1a74e:	2500      	movs	r5, #0
   1a750:	e9c0 5501 	strd	r5, r5, [r0, #4]
   1a754:	0089      	lsls	r1, r1, #2
   1a756:	6173      	str	r3, [r6, #20]
   1a758:	2a00      	cmp	r2, #0
   1a75a:	d0bc      	beq.n	1a6d6 <d_operator_name+0x36>
   1a75c:	2333      	movs	r3, #51	; 0x33
   1a75e:	e9c0 5501 	strd	r5, r5, [r0, #4]
   1a762:	547b      	strb	r3, [r7, r1]
   1a764:	e9c0 4203 	strd	r4, r2, [r0, #12]
   1a768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a76a:	2f63      	cmp	r7, #99	; 0x63
   1a76c:	d19f      	bne.n	1a6ae <d_operator_name+0xe>
   1a76e:	f1be 0f76 	cmp.w	lr, #118	; 0x76
   1a772:	d19c      	bne.n	1a6ae <d_operator_name+0xe>
   1a774:	e9d0 340c 	ldrd	r3, r4, [r0, #48]	; 0x30
   1a778:	fab3 f383 	clz	r3, r3
   1a77c:	095b      	lsrs	r3, r3, #5
   1a77e:	6343      	str	r3, [r0, #52]	; 0x34
   1a780:	f7ff fb4e 	bl	19e20 <d_type>
   1a784:	6b73      	ldr	r3, [r6, #52]	; 0x34
   1a786:	4602      	mov	r2, r0
   1a788:	b133      	cbz	r3, 1a798 <d_operator_name+0xf8>
   1a78a:	2300      	movs	r3, #0
   1a78c:	2135      	movs	r1, #53	; 0x35
   1a78e:	4630      	mov	r0, r6
   1a790:	f7fe feba 	bl	19508 <d_make_comp>
   1a794:	6374      	str	r4, [r6, #52]	; 0x34
   1a796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a798:	2134      	movs	r1, #52	; 0x34
   1a79a:	4630      	mov	r0, r6
   1a79c:	f7fe feb4 	bl	19508 <d_make_comp>
   1a7a0:	e7f8      	b.n	1a794 <d_operator_name+0xf4>
   1a7a2:	bf00      	nop
   1a7a4:	0003f1a8 	.word	0x0003f1a8

0001a7a8 <d_parmlist>:
   1a7a8:	b530      	push	{r4, r5, lr}
   1a7aa:	68c2      	ldr	r2, [r0, #12]
   1a7ac:	b083      	sub	sp, #12
   1a7ae:	2300      	movs	r3, #0
   1a7b0:	9301      	str	r3, [sp, #4]
   1a7b2:	7813      	ldrb	r3, [r2, #0]
   1a7b4:	b323      	cbz	r3, 1a800 <d_parmlist+0x58>
   1a7b6:	4604      	mov	r4, r0
   1a7b8:	ad01      	add	r5, sp, #4
   1a7ba:	e011      	b.n	1a7e0 <d_parmlist+0x38>
   1a7bc:	2b4f      	cmp	r3, #79	; 0x4f
   1a7be:	d016      	beq.n	1a7ee <d_parmlist+0x46>
   1a7c0:	f7ff fb2e 	bl	19e20 <d_type>
   1a7c4:	4602      	mov	r2, r0
   1a7c6:	2300      	movs	r3, #0
   1a7c8:	212e      	movs	r1, #46	; 0x2e
   1a7ca:	4620      	mov	r0, r4
   1a7cc:	b1c2      	cbz	r2, 1a800 <d_parmlist+0x58>
   1a7ce:	f7fe fe9b 	bl	19508 <d_make_comp>
   1a7d2:	6028      	str	r0, [r5, #0]
   1a7d4:	b1a0      	cbz	r0, 1a800 <d_parmlist+0x58>
   1a7d6:	68e2      	ldr	r2, [r4, #12]
   1a7d8:	7813      	ldrb	r3, [r2, #0]
   1a7da:	f100 0510 	add.w	r5, r0, #16
   1a7de:	b14b      	cbz	r3, 1a7f4 <d_parmlist+0x4c>
   1a7e0:	2b45      	cmp	r3, #69	; 0x45
   1a7e2:	4620      	mov	r0, r4
   1a7e4:	d006      	beq.n	1a7f4 <d_parmlist+0x4c>
   1a7e6:	2b2e      	cmp	r3, #46	; 0x2e
   1a7e8:	d004      	beq.n	1a7f4 <d_parmlist+0x4c>
   1a7ea:	2b52      	cmp	r3, #82	; 0x52
   1a7ec:	d1e6      	bne.n	1a7bc <d_parmlist+0x14>
   1a7ee:	7853      	ldrb	r3, [r2, #1]
   1a7f0:	2b45      	cmp	r3, #69	; 0x45
   1a7f2:	d1e5      	bne.n	1a7c0 <d_parmlist+0x18>
   1a7f4:	9801      	ldr	r0, [sp, #4]
   1a7f6:	b118      	cbz	r0, 1a800 <d_parmlist+0x58>
   1a7f8:	6903      	ldr	r3, [r0, #16]
   1a7fa:	b123      	cbz	r3, 1a806 <d_parmlist+0x5e>
   1a7fc:	b003      	add	sp, #12
   1a7fe:	bd30      	pop	{r4, r5, pc}
   1a800:	2000      	movs	r0, #0
   1a802:	b003      	add	sp, #12
   1a804:	bd30      	pop	{r4, r5, pc}
   1a806:	68c2      	ldr	r2, [r0, #12]
   1a808:	7811      	ldrb	r1, [r2, #0]
   1a80a:	2927      	cmp	r1, #39	; 0x27
   1a80c:	d1f6      	bne.n	1a7fc <d_parmlist+0x54>
   1a80e:	68d2      	ldr	r2, [r2, #12]
   1a810:	7c11      	ldrb	r1, [r2, #16]
   1a812:	2909      	cmp	r1, #9
   1a814:	d1f2      	bne.n	1a7fc <d_parmlist+0x54>
   1a816:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   1a818:	6852      	ldr	r2, [r2, #4]
   1a81a:	1a89      	subs	r1, r1, r2
   1a81c:	62e1      	str	r1, [r4, #44]	; 0x2c
   1a81e:	60c3      	str	r3, [r0, #12]
   1a820:	e7ec      	b.n	1a7fc <d_parmlist+0x54>
   1a822:	bf00      	nop

0001a824 <d_bare_function_type>:
   1a824:	b570      	push	{r4, r5, r6, lr}
   1a826:	68c3      	ldr	r3, [r0, #12]
   1a828:	781a      	ldrb	r2, [r3, #0]
   1a82a:	2a4a      	cmp	r2, #74	; 0x4a
   1a82c:	4605      	mov	r5, r0
   1a82e:	d01a      	beq.n	1a866 <d_bare_function_type+0x42>
   1a830:	b181      	cbz	r1, 1a854 <d_bare_function_type+0x30>
   1a832:	4628      	mov	r0, r5
   1a834:	f7ff faf4 	bl	19e20 <d_type>
   1a838:	4604      	mov	r4, r0
   1a83a:	b190      	cbz	r0, 1a862 <d_bare_function_type+0x3e>
   1a83c:	4628      	mov	r0, r5
   1a83e:	f7ff ffb3 	bl	1a7a8 <d_parmlist>
   1a842:	4603      	mov	r3, r0
   1a844:	b168      	cbz	r0, 1a862 <d_bare_function_type+0x3e>
   1a846:	4622      	mov	r2, r4
   1a848:	4628      	mov	r0, r5
   1a84a:	2129      	movs	r1, #41	; 0x29
   1a84c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a850:	f7fe be5a 	b.w	19508 <d_make_comp>
   1a854:	4628      	mov	r0, r5
   1a856:	460c      	mov	r4, r1
   1a858:	f7ff ffa6 	bl	1a7a8 <d_parmlist>
   1a85c:	4603      	mov	r3, r0
   1a85e:	2800      	cmp	r0, #0
   1a860:	d1f1      	bne.n	1a846 <d_bare_function_type+0x22>
   1a862:	2000      	movs	r0, #0
   1a864:	bd70      	pop	{r4, r5, r6, pc}
   1a866:	3301      	adds	r3, #1
   1a868:	60c3      	str	r3, [r0, #12]
   1a86a:	e7e2      	b.n	1a832 <d_bare_function_type+0xe>

0001a86c <d_function_type>:
   1a86c:	b510      	push	{r4, lr}
   1a86e:	4604      	mov	r4, r0
   1a870:	6880      	ldr	r0, [r0, #8]
   1a872:	f410 2080 	ands.w	r0, r0, #262144	; 0x40000
   1a876:	d10b      	bne.n	1a890 <d_function_type+0x24>
   1a878:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   1a87a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   1a87e:	d806      	bhi.n	1a88e <d_function_type+0x22>
   1a880:	1c51      	adds	r1, r2, #1
   1a882:	68e3      	ldr	r3, [r4, #12]
   1a884:	63a1      	str	r1, [r4, #56]	; 0x38
   1a886:	7819      	ldrb	r1, [r3, #0]
   1a888:	2946      	cmp	r1, #70	; 0x46
   1a88a:	d007      	beq.n	1a89c <d_function_type+0x30>
   1a88c:	63a2      	str	r2, [r4, #56]	; 0x38
   1a88e:	bd10      	pop	{r4, pc}
   1a890:	68e3      	ldr	r3, [r4, #12]
   1a892:	781a      	ldrb	r2, [r3, #0]
   1a894:	2a46      	cmp	r2, #70	; 0x46
   1a896:	d001      	beq.n	1a89c <d_function_type+0x30>
   1a898:	2000      	movs	r0, #0
   1a89a:	bd10      	pop	{r4, pc}
   1a89c:	1c5a      	adds	r2, r3, #1
   1a89e:	60e2      	str	r2, [r4, #12]
   1a8a0:	785a      	ldrb	r2, [r3, #1]
   1a8a2:	2a59      	cmp	r2, #89	; 0x59
   1a8a4:	bf04      	itt	eq
   1a8a6:	3302      	addeq	r3, #2
   1a8a8:	60e3      	streq	r3, [r4, #12]
   1a8aa:	2101      	movs	r1, #1
   1a8ac:	4620      	mov	r0, r4
   1a8ae:	f7ff ffb9 	bl	1a824 <d_bare_function_type>
   1a8b2:	4601      	mov	r1, r0
   1a8b4:	4620      	mov	r0, r4
   1a8b6:	f7fe fecf 	bl	19658 <d_ref_qualifier>
   1a8ba:	68e3      	ldr	r3, [r4, #12]
   1a8bc:	781a      	ldrb	r2, [r3, #0]
   1a8be:	2a45      	cmp	r2, #69	; 0x45
   1a8c0:	bf04      	itt	eq
   1a8c2:	3301      	addeq	r3, #1
   1a8c4:	60e3      	streq	r3, [r4, #12]
   1a8c6:	68a3      	ldr	r3, [r4, #8]
   1a8c8:	bf18      	it	ne
   1a8ca:	2000      	movne	r0, #0
   1a8cc:	035b      	lsls	r3, r3, #13
   1a8ce:	d4de      	bmi.n	1a88e <d_function_type+0x22>
   1a8d0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   1a8d2:	3a01      	subs	r2, #1
   1a8d4:	e7da      	b.n	1a88c <d_function_type+0x20>
   1a8d6:	bf00      	nop

0001a8d8 <d_unqualified_name>:
   1a8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a8da:	68c3      	ldr	r3, [r0, #12]
   1a8dc:	781a      	ldrb	r2, [r3, #0]
   1a8de:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1a8e2:	2909      	cmp	r1, #9
   1a8e4:	4604      	mov	r4, r0
   1a8e6:	d961      	bls.n	1a9ac <d_unqualified_name+0xd4>
   1a8e8:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
   1a8ec:	2919      	cmp	r1, #25
   1a8ee:	d814      	bhi.n	1a91a <d_unqualified_name+0x42>
   1a8f0:	2a6f      	cmp	r2, #111	; 0x6f
   1a8f2:	d104      	bne.n	1a8fe <d_unqualified_name+0x26>
   1a8f4:	785a      	ldrb	r2, [r3, #1]
   1a8f6:	2a6e      	cmp	r2, #110	; 0x6e
   1a8f8:	bf04      	itt	eq
   1a8fa:	3302      	addeq	r3, #2
   1a8fc:	60c3      	streq	r3, [r0, #12]
   1a8fe:	4620      	mov	r0, r4
   1a900:	f7ff fece 	bl	1a6a0 <d_operator_name>
   1a904:	4605      	mov	r5, r0
   1a906:	b110      	cbz	r0, 1a90e <d_unqualified_name+0x36>
   1a908:	7803      	ldrb	r3, [r0, #0]
   1a90a:	2b32      	cmp	r3, #50	; 0x32
   1a90c:	d069      	beq.n	1a9e2 <d_unqualified_name+0x10a>
   1a90e:	68e3      	ldr	r3, [r4, #12]
   1a910:	7819      	ldrb	r1, [r3, #0]
   1a912:	2942      	cmp	r1, #66	; 0x42
   1a914:	d051      	beq.n	1a9ba <d_unqualified_name+0xe2>
   1a916:	4628      	mov	r0, r5
   1a918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a91a:	f1a2 0143 	sub.w	r1, r2, #67	; 0x43
   1a91e:	2901      	cmp	r1, #1
   1a920:	f240 808b 	bls.w	1aa3a <d_unqualified_name+0x162>
   1a924:	2a4c      	cmp	r2, #76	; 0x4c
   1a926:	d079      	beq.n	1aa1c <d_unqualified_name+0x144>
   1a928:	2a55      	cmp	r2, #85	; 0x55
   1a92a:	f040 8083 	bne.w	1aa34 <d_unqualified_name+0x15c>
   1a92e:	785a      	ldrb	r2, [r3, #1]
   1a930:	2a6c      	cmp	r2, #108	; 0x6c
   1a932:	f000 80d5 	beq.w	1aae0 <d_unqualified_name+0x208>
   1a936:	2a74      	cmp	r2, #116	; 0x74
   1a938:	d17c      	bne.n	1aa34 <d_unqualified_name+0x15c>
   1a93a:	1c5a      	adds	r2, r3, #1
   1a93c:	60c2      	str	r2, [r0, #12]
   1a93e:	7859      	ldrb	r1, [r3, #1]
   1a940:	2974      	cmp	r1, #116	; 0x74
   1a942:	f040 8098 	bne.w	1aa76 <d_unqualified_name+0x19e>
   1a946:	1c9a      	adds	r2, r3, #2
   1a948:	60c2      	str	r2, [r0, #12]
   1a94a:	789a      	ldrb	r2, [r3, #2]
   1a94c:	2a5f      	cmp	r2, #95	; 0x5f
   1a94e:	f000 8145 	beq.w	1abdc <d_unqualified_name+0x304>
   1a952:	2a6e      	cmp	r2, #110	; 0x6e
   1a954:	d06e      	beq.n	1aa34 <d_unqualified_name+0x15c>
   1a956:	f7fe fe21 	bl	1959c <d_number>
   1a95a:	3001      	adds	r0, #1
   1a95c:	68e3      	ldr	r3, [r4, #12]
   1a95e:	f100 8136 	bmi.w	1abce <d_unqualified_name+0x2f6>
   1a962:	7819      	ldrb	r1, [r3, #0]
   1a964:	295f      	cmp	r1, #95	; 0x5f
   1a966:	d177      	bne.n	1aa58 <d_unqualified_name+0x180>
   1a968:	3301      	adds	r3, #1
   1a96a:	60e3      	str	r3, [r4, #12]
   1a96c:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1a970:	4293      	cmp	r3, r2
   1a972:	f280 812b 	bge.w	1abcc <d_unqualified_name+0x2f4>
   1a976:	6922      	ldr	r2, [r4, #16]
   1a978:	eb03 0683 	add.w	r6, r3, r3, lsl #2
   1a97c:	eb02 0586 	add.w	r5, r2, r6, lsl #2
   1a980:	3301      	adds	r3, #1
   1a982:	2100      	movs	r1, #0
   1a984:	e9c5 1101 	strd	r1, r1, [r5, #4]
   1a988:	6163      	str	r3, [r4, #20]
   1a98a:	2348      	movs	r3, #72	; 0x48
   1a98c:	f802 3026 	strb.w	r3, [r2, r6, lsl #2]
   1a990:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
   1a994:	429a      	cmp	r2, r3
   1a996:	60e8      	str	r0, [r5, #12]
   1a998:	f280 8124 	bge.w	1abe4 <d_unqualified_name+0x30c>
   1a99c:	69e1      	ldr	r1, [r4, #28]
   1a99e:	68e3      	ldr	r3, [r4, #12]
   1a9a0:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
   1a9a4:	3201      	adds	r2, #1
   1a9a6:	6222      	str	r2, [r4, #32]
   1a9a8:	7819      	ldrb	r1, [r3, #0]
   1a9aa:	e7b2      	b.n	1a912 <d_unqualified_name+0x3a>
   1a9ac:	f7ff f88a 	bl	19ac4 <d_source_name>
   1a9b0:	68e3      	ldr	r3, [r4, #12]
   1a9b2:	7819      	ldrb	r1, [r3, #0]
   1a9b4:	2942      	cmp	r1, #66	; 0x42
   1a9b6:	4605      	mov	r5, r0
   1a9b8:	d1ad      	bne.n	1a916 <d_unqualified_name+0x3e>
   1a9ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1a9bc:	3301      	adds	r3, #1
   1a9be:	60e3      	str	r3, [r4, #12]
   1a9c0:	4620      	mov	r0, r4
   1a9c2:	f7ff f87f 	bl	19ac4 <d_source_name>
   1a9c6:	462a      	mov	r2, r5
   1a9c8:	4603      	mov	r3, r0
   1a9ca:	214c      	movs	r1, #76	; 0x4c
   1a9cc:	4620      	mov	r0, r4
   1a9ce:	f7fe fd9b 	bl	19508 <d_make_comp>
   1a9d2:	68e3      	ldr	r3, [r4, #12]
   1a9d4:	7819      	ldrb	r1, [r3, #0]
   1a9d6:	2942      	cmp	r1, #66	; 0x42
   1a9d8:	4605      	mov	r5, r0
   1a9da:	d0ef      	beq.n	1a9bc <d_unqualified_name+0xe4>
   1a9dc:	62a6      	str	r6, [r4, #40]	; 0x28
   1a9de:	4628      	mov	r0, r5
   1a9e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a9e2:	68c2      	ldr	r2, [r0, #12]
   1a9e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1a9e6:	6891      	ldr	r1, [r2, #8]
   1a9e8:	6812      	ldr	r2, [r2, #0]
   1a9ea:	3307      	adds	r3, #7
   1a9ec:	440b      	add	r3, r1
   1a9ee:	62e3      	str	r3, [r4, #44]	; 0x2c
   1a9f0:	7813      	ldrb	r3, [r2, #0]
   1a9f2:	2b6c      	cmp	r3, #108	; 0x6c
   1a9f4:	d18b      	bne.n	1a90e <d_unqualified_name+0x36>
   1a9f6:	7853      	ldrb	r3, [r2, #1]
   1a9f8:	2b69      	cmp	r3, #105	; 0x69
   1a9fa:	d188      	bne.n	1a90e <d_unqualified_name+0x36>
   1a9fc:	7893      	ldrb	r3, [r2, #2]
   1a9fe:	2b00      	cmp	r3, #0
   1aa00:	d185      	bne.n	1a90e <d_unqualified_name+0x36>
   1aa02:	4620      	mov	r0, r4
   1aa04:	f7ff f85e 	bl	19ac4 <d_source_name>
   1aa08:	462a      	mov	r2, r5
   1aa0a:	4603      	mov	r3, r0
   1aa0c:	2137      	movs	r1, #55	; 0x37
   1aa0e:	4620      	mov	r0, r4
   1aa10:	f7fe fd7a 	bl	19508 <d_make_comp>
   1aa14:	68e3      	ldr	r3, [r4, #12]
   1aa16:	4605      	mov	r5, r0
   1aa18:	7819      	ldrb	r1, [r3, #0]
   1aa1a:	e77a      	b.n	1a912 <d_unqualified_name+0x3a>
   1aa1c:	3301      	adds	r3, #1
   1aa1e:	60c3      	str	r3, [r0, #12]
   1aa20:	f7ff f850 	bl	19ac4 <d_source_name>
   1aa24:	4605      	mov	r5, r0
   1aa26:	b128      	cbz	r0, 1aa34 <d_unqualified_name+0x15c>
   1aa28:	4620      	mov	r0, r4
   1aa2a:	f7fe fe9b 	bl	19764 <d_discriminator>
   1aa2e:	2800      	cmp	r0, #0
   1aa30:	f47f af6d 	bne.w	1a90e <d_unqualified_name+0x36>
   1aa34:	2500      	movs	r5, #0
   1aa36:	4628      	mov	r0, r5
   1aa38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1aa3a:	6a80      	ldr	r0, [r0, #40]	; 0x28
   1aa3c:	b180      	cbz	r0, 1aa60 <d_unqualified_name+0x188>
   1aa3e:	7801      	ldrb	r1, [r0, #0]
   1aa40:	b961      	cbnz	r1, 1aa5c <d_unqualified_name+0x184>
   1aa42:	6901      	ldr	r1, [r0, #16]
   1aa44:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1aa46:	440a      	add	r2, r1
   1aa48:	62e2      	str	r2, [r4, #44]	; 0x2c
   1aa4a:	7819      	ldrb	r1, [r3, #0]
   1aa4c:	2943      	cmp	r1, #67	; 0x43
   1aa4e:	460a      	mov	r2, r1
   1aa50:	f000 8086 	beq.w	1ab60 <d_unqualified_name+0x288>
   1aa54:	2944      	cmp	r1, #68	; 0x44
   1aa56:	d005      	beq.n	1aa64 <d_unqualified_name+0x18c>
   1aa58:	2500      	movs	r5, #0
   1aa5a:	e75a      	b.n	1a912 <d_unqualified_name+0x3a>
   1aa5c:	2918      	cmp	r1, #24
   1aa5e:	d0f0      	beq.n	1aa42 <d_unqualified_name+0x16a>
   1aa60:	2a43      	cmp	r2, #67	; 0x43
   1aa62:	d07d      	beq.n	1ab60 <d_unqualified_name+0x288>
   1aa64:	7859      	ldrb	r1, [r3, #1]
   1aa66:	3930      	subs	r1, #48	; 0x30
   1aa68:	2905      	cmp	r1, #5
   1aa6a:	d836      	bhi.n	1aada <d_unqualified_name+0x202>
   1aa6c:	e8df f001 	tbb	[pc, r1]
   1aa70:	35292c06 	.word	0x35292c06
   1aa74:	2f32      	.short	0x2f32
   1aa76:	4613      	mov	r3, r2
   1aa78:	2500      	movs	r5, #0
   1aa7a:	e74a      	b.n	1a912 <d_unqualified_name+0x3a>
   1aa7c:	f04f 0e01 	mov.w	lr, #1
   1aa80:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
   1aa84:	1c9f      	adds	r7, r3, #2
   1aa86:	428a      	cmp	r2, r1
   1aa88:	60e7      	str	r7, [r4, #12]
   1aa8a:	f280 80a3 	bge.w	1abd4 <d_unqualified_name+0x2fc>
   1aa8e:	f8d4 c010 	ldr.w	ip, [r4, #16]
   1aa92:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   1aa96:	eb0c 0581 	add.w	r5, ip, r1, lsl #2
   1aa9a:	3201      	adds	r2, #1
   1aa9c:	2600      	movs	r6, #0
   1aa9e:	e9c5 6601 	strd	r6, r6, [r5, #4]
   1aaa2:	0089      	lsls	r1, r1, #2
   1aaa4:	6162      	str	r2, [r4, #20]
   1aaa6:	2800      	cmp	r0, #0
   1aaa8:	f000 8094 	beq.w	1abd4 <d_unqualified_name+0x2fc>
   1aaac:	e9c5 6601 	strd	r6, r6, [r5, #4]
   1aab0:	2208      	movs	r2, #8
   1aab2:	f80c 2001 	strb.w	r2, [ip, r1]
   1aab6:	f885 e00c 	strb.w	lr, [r5, #12]
   1aaba:	6128      	str	r0, [r5, #16]
   1aabc:	7899      	ldrb	r1, [r3, #2]
   1aabe:	463b      	mov	r3, r7
   1aac0:	e727      	b.n	1a912 <d_unqualified_name+0x3a>
   1aac2:	f04f 0e03 	mov.w	lr, #3
   1aac6:	e7db      	b.n	1aa80 <d_unqualified_name+0x1a8>
   1aac8:	f04f 0e02 	mov.w	lr, #2
   1aacc:	e7d8      	b.n	1aa80 <d_unqualified_name+0x1a8>
   1aace:	f04f 0e05 	mov.w	lr, #5
   1aad2:	e7d5      	b.n	1aa80 <d_unqualified_name+0x1a8>
   1aad4:	f04f 0e04 	mov.w	lr, #4
   1aad8:	e7d2      	b.n	1aa80 <d_unqualified_name+0x1a8>
   1aada:	4611      	mov	r1, r2
   1aadc:	2500      	movs	r5, #0
   1aade:	e718      	b.n	1a912 <d_unqualified_name+0x3a>
   1aae0:	1c5a      	adds	r2, r3, #1
   1aae2:	60c2      	str	r2, [r0, #12]
   1aae4:	7859      	ldrb	r1, [r3, #1]
   1aae6:	296c      	cmp	r1, #108	; 0x6c
   1aae8:	d1c5      	bne.n	1aa76 <d_unqualified_name+0x19e>
   1aaea:	3302      	adds	r3, #2
   1aaec:	60c3      	str	r3, [r0, #12]
   1aaee:	f7ff fe5b 	bl	1a7a8 <d_parmlist>
   1aaf2:	68e3      	ldr	r3, [r4, #12]
   1aaf4:	4606      	mov	r6, r0
   1aaf6:	2800      	cmp	r0, #0
   1aaf8:	d069      	beq.n	1abce <d_unqualified_name+0x2f6>
   1aafa:	7819      	ldrb	r1, [r3, #0]
   1aafc:	2945      	cmp	r1, #69	; 0x45
   1aafe:	d1ab      	bne.n	1aa58 <d_unqualified_name+0x180>
   1ab00:	1c5a      	adds	r2, r3, #1
   1ab02:	60e2      	str	r2, [r4, #12]
   1ab04:	785a      	ldrb	r2, [r3, #1]
   1ab06:	2a5f      	cmp	r2, #95	; 0x5f
   1ab08:	d073      	beq.n	1abf2 <d_unqualified_name+0x31a>
   1ab0a:	2a6e      	cmp	r2, #110	; 0x6e
   1ab0c:	d092      	beq.n	1aa34 <d_unqualified_name+0x15c>
   1ab0e:	4620      	mov	r0, r4
   1ab10:	f7fe fd44 	bl	1959c <d_number>
   1ab14:	3001      	adds	r0, #1
   1ab16:	68e3      	ldr	r3, [r4, #12]
   1ab18:	d459      	bmi.n	1abce <d_unqualified_name+0x2f6>
   1ab1a:	7819      	ldrb	r1, [r3, #0]
   1ab1c:	295f      	cmp	r1, #95	; 0x5f
   1ab1e:	d19b      	bne.n	1aa58 <d_unqualified_name+0x180>
   1ab20:	3301      	adds	r3, #1
   1ab22:	60e3      	str	r3, [r4, #12]
   1ab24:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
   1ab28:	428a      	cmp	r2, r1
   1ab2a:	da5f      	bge.n	1abec <d_unqualified_name+0x314>
   1ab2c:	6921      	ldr	r1, [r4, #16]
   1ab2e:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
   1ab32:	eb01 058c 	add.w	r5, r1, ip, lsl #2
   1ab36:	3201      	adds	r2, #1
   1ab38:	2700      	movs	r7, #0
   1ab3a:	e9c5 7701 	strd	r7, r7, [r5, #4]
   1ab3e:	6162      	str	r2, [r4, #20]
   1ab40:	2246      	movs	r2, #70	; 0x46
   1ab42:	f801 202c 	strb.w	r2, [r1, ip, lsl #2]
   1ab46:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
   1ab4a:	428a      	cmp	r2, r1
   1ab4c:	e9c5 6003 	strd	r6, r0, [r5, #12]
   1ab50:	da4c      	bge.n	1abec <d_unqualified_name+0x314>
   1ab52:	69e1      	ldr	r1, [r4, #28]
   1ab54:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
   1ab58:	3201      	adds	r2, #1
   1ab5a:	6222      	str	r2, [r4, #32]
   1ab5c:	7819      	ldrb	r1, [r3, #0]
   1ab5e:	e6d8      	b.n	1a912 <d_unqualified_name+0x3a>
   1ab60:	785a      	ldrb	r2, [r3, #1]
   1ab62:	2a49      	cmp	r2, #73	; 0x49
   1ab64:	d022      	beq.n	1abac <d_unqualified_name+0x2d4>
   1ab66:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   1ab6a:	2904      	cmp	r1, #4
   1ab6c:	f63f af62 	bhi.w	1aa34 <d_unqualified_name+0x15c>
   1ab70:	3a30      	subs	r2, #48	; 0x30
   1ab72:	3302      	adds	r3, #2
   1ab74:	b2d7      	uxtb	r7, r2
   1ab76:	60e3      	str	r3, [r4, #12]
   1ab78:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1ab7c:	4293      	cmp	r3, r2
   1ab7e:	da25      	bge.n	1abcc <d_unqualified_name+0x2f4>
   1ab80:	6922      	ldr	r2, [r4, #16]
   1ab82:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1ab86:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   1ab8a:	3301      	adds	r3, #1
   1ab8c:	2600      	movs	r6, #0
   1ab8e:	e9c5 6601 	strd	r6, r6, [r5, #4]
   1ab92:	0089      	lsls	r1, r1, #2
   1ab94:	6163      	str	r3, [r4, #20]
   1ab96:	2800      	cmp	r0, #0
   1ab98:	d033      	beq.n	1ac02 <d_unqualified_name+0x32a>
   1ab9a:	2307      	movs	r3, #7
   1ab9c:	e9c5 6601 	strd	r6, r6, [r5, #4]
   1aba0:	5453      	strb	r3, [r2, r1]
   1aba2:	68e3      	ldr	r3, [r4, #12]
   1aba4:	732f      	strb	r7, [r5, #12]
   1aba6:	6128      	str	r0, [r5, #16]
   1aba8:	7819      	ldrb	r1, [r3, #0]
   1abaa:	e6b2      	b.n	1a912 <d_unqualified_name+0x3a>
   1abac:	1c58      	adds	r0, r3, #1
   1abae:	60e0      	str	r0, [r4, #12]
   1abb0:	789a      	ldrb	r2, [r3, #2]
   1abb2:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   1abb6:	2904      	cmp	r1, #4
   1abb8:	d81f      	bhi.n	1abfa <d_unqualified_name+0x322>
   1abba:	3303      	adds	r3, #3
   1abbc:	3a30      	subs	r2, #48	; 0x30
   1abbe:	60e3      	str	r3, [r4, #12]
   1abc0:	4620      	mov	r0, r4
   1abc2:	b2d7      	uxtb	r7, r2
   1abc4:	f7ff f92c 	bl	19e20 <d_type>
   1abc8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1abca:	e7d5      	b.n	1ab78 <d_unqualified_name+0x2a0>
   1abcc:	68e3      	ldr	r3, [r4, #12]
   1abce:	7819      	ldrb	r1, [r3, #0]
   1abd0:	2500      	movs	r5, #0
   1abd2:	e69e      	b.n	1a912 <d_unqualified_name+0x3a>
   1abd4:	7899      	ldrb	r1, [r3, #2]
   1abd6:	2500      	movs	r5, #0
   1abd8:	463b      	mov	r3, r7
   1abda:	e69a      	b.n	1a912 <d_unqualified_name+0x3a>
   1abdc:	3303      	adds	r3, #3
   1abde:	60c3      	str	r3, [r0, #12]
   1abe0:	2000      	movs	r0, #0
   1abe2:	e6c3      	b.n	1a96c <d_unqualified_name+0x94>
   1abe4:	68e3      	ldr	r3, [r4, #12]
   1abe6:	460d      	mov	r5, r1
   1abe8:	7819      	ldrb	r1, [r3, #0]
   1abea:	e692      	b.n	1a912 <d_unqualified_name+0x3a>
   1abec:	7819      	ldrb	r1, [r3, #0]
   1abee:	2500      	movs	r5, #0
   1abf0:	e68f      	b.n	1a912 <d_unqualified_name+0x3a>
   1abf2:	3302      	adds	r3, #2
   1abf4:	60e3      	str	r3, [r4, #12]
   1abf6:	2000      	movs	r0, #0
   1abf8:	e794      	b.n	1ab24 <d_unqualified_name+0x24c>
   1abfa:	7859      	ldrb	r1, [r3, #1]
   1abfc:	2500      	movs	r5, #0
   1abfe:	4603      	mov	r3, r0
   1ac00:	e687      	b.n	1a912 <d_unqualified_name+0x3a>
   1ac02:	68e3      	ldr	r3, [r4, #12]
   1ac04:	4605      	mov	r5, r0
   1ac06:	7819      	ldrb	r1, [r3, #0]
   1ac08:	e683      	b.n	1a912 <d_unqualified_name+0x3a>
   1ac0a:	bf00      	nop

0001ac0c <d_name>:
   1ac0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ac10:	68c2      	ldr	r2, [r0, #12]
   1ac12:	7813      	ldrb	r3, [r2, #0]
   1ac14:	3b4e      	subs	r3, #78	; 0x4e
   1ac16:	b084      	sub	sp, #16
   1ac18:	4604      	mov	r4, r0
   1ac1a:	2b0c      	cmp	r3, #12
   1ac1c:	d808      	bhi.n	1ac30 <d_name+0x24>
   1ac1e:	e8df f003 	tbb	[pc, r3]
   1ac22:	0731      	.short	0x0731
   1ac24:	17070707 	.word	0x17070707
   1ac28:	07071307 	.word	0x07071307
   1ac2c:	0707      	.short	0x0707
   1ac2e:	85          	.byte	0x85
   1ac2f:	00          	.byte	0x00
   1ac30:	f7ff fe52 	bl	1a8d8 <d_unqualified_name>
   1ac34:	68e3      	ldr	r3, [r4, #12]
   1ac36:	781a      	ldrb	r2, [r3, #0]
   1ac38:	2a49      	cmp	r2, #73	; 0x49
   1ac3a:	4605      	mov	r5, r0
   1ac3c:	f000 80c9 	beq.w	1add2 <d_name+0x1c6>
   1ac40:	4628      	mov	r0, r5
   1ac42:	b004      	add	sp, #16
   1ac44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ac48:	b004      	add	sp, #16
   1ac4a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ac4e:	e643      	b.n	1a8d8 <d_unqualified_name>
   1ac50:	7853      	ldrb	r3, [r2, #1]
   1ac52:	2b74      	cmp	r3, #116	; 0x74
   1ac54:	f000 80cf 	beq.w	1adf6 <d_name+0x1ea>
   1ac58:	2100      	movs	r1, #0
   1ac5a:	f7fe ffa3 	bl	19ba4 <d_substitution>
   1ac5e:	68e3      	ldr	r3, [r4, #12]
   1ac60:	781a      	ldrb	r2, [r3, #0]
   1ac62:	2a49      	cmp	r2, #73	; 0x49
   1ac64:	4605      	mov	r5, r0
   1ac66:	d1eb      	bne.n	1ac40 <d_name+0x34>
   1ac68:	3301      	adds	r3, #1
   1ac6a:	60e3      	str	r3, [r4, #12]
   1ac6c:	4620      	mov	r0, r4
   1ac6e:	f001 f819 	bl	1bca4 <d_template_args_1>
   1ac72:	4603      	mov	r3, r0
   1ac74:	462a      	mov	r2, r5
   1ac76:	2104      	movs	r1, #4
   1ac78:	4620      	mov	r0, r4
   1ac7a:	b004      	add	sp, #16
   1ac7c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ac80:	f7fe bc42 	b.w	19508 <d_make_comp>
   1ac84:	3201      	adds	r2, #1
   1ac86:	60c2      	str	r2, [r0, #12]
   1ac88:	a903      	add	r1, sp, #12
   1ac8a:	2201      	movs	r2, #1
   1ac8c:	f000 ff36 	bl	1bafc <d_cv_qualifiers>
   1ac90:	4607      	mov	r7, r0
   1ac92:	2800      	cmp	r0, #0
   1ac94:	f000 80e7 	beq.w	1ae66 <d_name+0x25a>
   1ac98:	2100      	movs	r1, #0
   1ac9a:	4620      	mov	r0, r4
   1ac9c:	f7fe fcdc 	bl	19658 <d_ref_qualifier>
   1aca0:	68e2      	ldr	r2, [r4, #12]
   1aca2:	7816      	ldrb	r6, [r2, #0]
   1aca4:	4680      	mov	r8, r0
   1aca6:	b336      	cbz	r6, 1acf6 <d_name+0xea>
   1aca8:	f8df 9334 	ldr.w	r9, [pc, #820]	; 1afe0 <d_name+0x3d4>
   1acac:	f04f 0a00 	mov.w	sl, #0
   1acb0:	2e44      	cmp	r6, #68	; 0x44
   1acb2:	f000 80dd 	beq.w	1ae70 <d_name+0x264>
   1acb6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   1acba:	b2db      	uxtb	r3, r3
   1acbc:	2b1c      	cmp	r3, #28
   1acbe:	f240 811a 	bls.w	1aef6 <d_name+0x2ea>
   1acc2:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
   1acc6:	2b19      	cmp	r3, #25
   1acc8:	f200 8117 	bhi.w	1aefa <d_name+0x2ee>
   1accc:	4620      	mov	r0, r4
   1acce:	f7ff fe03 	bl	1a8d8 <d_unqualified_name>
   1acd2:	4605      	mov	r5, r0
   1acd4:	f1ba 0f00 	cmp.w	sl, #0
   1acd8:	d006      	beq.n	1ace8 <d_name+0xdc>
   1acda:	2101      	movs	r1, #1
   1acdc:	462b      	mov	r3, r5
   1acde:	4652      	mov	r2, sl
   1ace0:	4620      	mov	r0, r4
   1ace2:	f7fe fc11 	bl	19508 <d_make_comp>
   1ace6:	4605      	mov	r5, r0
   1ace8:	2e53      	cmp	r6, #83	; 0x53
   1acea:	d10d      	bne.n	1ad08 <d_name+0xfc>
   1acec:	68e2      	ldr	r2, [r4, #12]
   1acee:	46aa      	mov	sl, r5
   1acf0:	7816      	ldrb	r6, [r2, #0]
   1acf2:	2e00      	cmp	r6, #0
   1acf4:	d1dc      	bne.n	1acb0 <d_name+0xa4>
   1acf6:	2500      	movs	r5, #0
   1acf8:	603d      	str	r5, [r7, #0]
   1acfa:	e7a1      	b.n	1ac40 <d_name+0x34>
   1acfc:	f7ff f890 	bl	19e20 <d_type>
   1ad00:	4605      	mov	r5, r0
   1ad02:	f1ba 0f00 	cmp.w	sl, #0
   1ad06:	d1e8      	bne.n	1acda <d_name+0xce>
   1ad08:	68e2      	ldr	r2, [r4, #12]
   1ad0a:	7816      	ldrb	r6, [r2, #0]
   1ad0c:	2e45      	cmp	r6, #69	; 0x45
   1ad0e:	f000 80be 	beq.w	1ae8e <d_name+0x282>
   1ad12:	2d00      	cmp	r5, #0
   1ad14:	d0ef      	beq.n	1acf6 <d_name+0xea>
   1ad16:	e9d4 3108 	ldrd	r3, r1, [r4, #32]
   1ad1a:	428b      	cmp	r3, r1
   1ad1c:	daeb      	bge.n	1acf6 <d_name+0xea>
   1ad1e:	69e1      	ldr	r1, [r4, #28]
   1ad20:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
   1ad24:	3301      	adds	r3, #1
   1ad26:	6223      	str	r3, [r4, #32]
   1ad28:	46aa      	mov	sl, r5
   1ad2a:	e7e1      	b.n	1acf0 <d_name+0xe4>
   1ad2c:	1c53      	adds	r3, r2, #1
   1ad2e:	60c3      	str	r3, [r0, #12]
   1ad30:	7853      	ldrb	r3, [r2, #1]
   1ad32:	2b47      	cmp	r3, #71	; 0x47
   1ad34:	d002      	beq.n	1ad3c <d_name+0x130>
   1ad36:	2b54      	cmp	r3, #84	; 0x54
   1ad38:	f040 80b7 	bne.w	1aeaa <d_name+0x29e>
   1ad3c:	4620      	mov	r0, r4
   1ad3e:	f000 f9cf 	bl	1b0e0 <d_special_name>
   1ad42:	4605      	mov	r5, r0
   1ad44:	2d00      	cmp	r5, #0
   1ad46:	f000 808e 	beq.w	1ae66 <d_name+0x25a>
   1ad4a:	68e3      	ldr	r3, [r4, #12]
   1ad4c:	781a      	ldrb	r2, [r3, #0]
   1ad4e:	2a45      	cmp	r2, #69	; 0x45
   1ad50:	f040 8089 	bne.w	1ae66 <d_name+0x25a>
   1ad54:	1c5a      	adds	r2, r3, #1
   1ad56:	60e2      	str	r2, [r4, #12]
   1ad58:	785a      	ldrb	r2, [r3, #1]
   1ad5a:	2a73      	cmp	r2, #115	; 0x73
   1ad5c:	f000 8101 	beq.w	1af62 <d_name+0x356>
   1ad60:	2a64      	cmp	r2, #100	; 0x64
   1ad62:	f000 80a7 	beq.w	1aeb4 <d_name+0x2a8>
   1ad66:	4620      	mov	r0, r4
   1ad68:	f7ff ff50 	bl	1ac0c <d_name>
   1ad6c:	4603      	mov	r3, r0
   1ad6e:	b320      	cbz	r0, 1adba <d_name+0x1ae>
   1ad70:	7802      	ldrb	r2, [r0, #0]
   1ad72:	2a46      	cmp	r2, #70	; 0x46
   1ad74:	d021      	beq.n	1adba <d_name+0x1ae>
   1ad76:	2a48      	cmp	r2, #72	; 0x48
   1ad78:	d01f      	beq.n	1adba <d_name+0x1ae>
   1ad7a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1ad7e:	4620      	mov	r0, r4
   1ad80:	9301      	str	r3, [sp, #4]
   1ad82:	f7fe fcef 	bl	19764 <d_discriminator>
   1ad86:	9b01      	ldr	r3, [sp, #4]
   1ad88:	2800      	cmp	r0, #0
   1ad8a:	d06c      	beq.n	1ae66 <d_name+0x25a>
   1ad8c:	1c72      	adds	r2, r6, #1
   1ad8e:	d014      	beq.n	1adba <d_name+0x1ae>
   1ad90:	469c      	mov	ip, r3
   1ad92:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
   1ad96:	429a      	cmp	r2, r3
   1ad98:	f280 8112 	bge.w	1afc0 <d_name+0x3b4>
   1ad9c:	6921      	ldr	r1, [r4, #16]
   1ad9e:	eb02 0082 	add.w	r0, r2, r2, lsl #2
   1ada2:	eb01 0380 	add.w	r3, r1, r0, lsl #2
   1ada6:	3201      	adds	r2, #1
   1ada8:	2700      	movs	r7, #0
   1adaa:	e9c3 7701 	strd	r7, r7, [r3, #4]
   1adae:	6162      	str	r2, [r4, #20]
   1adb0:	2247      	movs	r2, #71	; 0x47
   1adb2:	f801 2020 	strb.w	r2, [r1, r0, lsl #2]
   1adb6:	e9c3 c603 	strd	ip, r6, [r3, #12]
   1adba:	782a      	ldrb	r2, [r5, #0]
   1adbc:	2a03      	cmp	r2, #3
   1adbe:	d105      	bne.n	1adcc <d_name+0x1c0>
   1adc0:	692a      	ldr	r2, [r5, #16]
   1adc2:	7811      	ldrb	r1, [r2, #0]
   1adc4:	2929      	cmp	r1, #41	; 0x29
   1adc6:	bf04      	itt	eq
   1adc8:	2100      	moveq	r1, #0
   1adca:	60d1      	streq	r1, [r2, #12]
   1adcc:	462a      	mov	r2, r5
   1adce:	2102      	movs	r1, #2
   1add0:	e752      	b.n	1ac78 <d_name+0x6c>
   1add2:	2800      	cmp	r0, #0
   1add4:	d047      	beq.n	1ae66 <d_name+0x25a>
   1add6:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
   1adda:	428a      	cmp	r2, r1
   1addc:	da43      	bge.n	1ae66 <d_name+0x25a>
   1adde:	69e1      	ldr	r1, [r4, #28]
   1ade0:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   1ade4:	3201      	adds	r2, #1
   1ade6:	6222      	str	r2, [r4, #32]
   1ade8:	781a      	ldrb	r2, [r3, #0]
   1adea:	3a49      	subs	r2, #73	; 0x49
   1adec:	2a01      	cmp	r2, #1
   1adee:	f67f af3b 	bls.w	1ac68 <d_name+0x5c>
   1adf2:	2300      	movs	r3, #0
   1adf4:	e73e      	b.n	1ac74 <d_name+0x68>
   1adf6:	e9d0 3105 	ldrd	r3, r1, [r0, #20]
   1adfa:	3202      	adds	r2, #2
   1adfc:	428b      	cmp	r3, r1
   1adfe:	60c2      	str	r2, [r0, #12]
   1ae00:	f280 80cc 	bge.w	1af9c <d_name+0x390>
   1ae04:	6902      	ldr	r2, [r0, #16]
   1ae06:	eb03 0583 	add.w	r5, r3, r3, lsl #2
   1ae0a:	00a9      	lsls	r1, r5, #2
   1ae0c:	3301      	adds	r3, #1
   1ae0e:	6143      	str	r3, [r0, #20]
   1ae10:	eb02 0585 	add.w	r5, r2, r5, lsl #2
   1ae14:	2300      	movs	r3, #0
   1ae16:	e9c5 3301 	strd	r3, r3, [r5, #4]
   1ae1a:	5453      	strb	r3, [r2, r1]
   1ae1c:	4a6e      	ldr	r2, [pc, #440]	; (1afd8 <d_name+0x3cc>)
   1ae1e:	2303      	movs	r3, #3
   1ae20:	e9c5 2303 	strd	r2, r3, [r5, #12]
   1ae24:	4620      	mov	r0, r4
   1ae26:	f7ff fd57 	bl	1a8d8 <d_unqualified_name>
   1ae2a:	462a      	mov	r2, r5
   1ae2c:	4603      	mov	r3, r0
   1ae2e:	2101      	movs	r1, #1
   1ae30:	4620      	mov	r0, r4
   1ae32:	f7fe fb69 	bl	19508 <d_make_comp>
   1ae36:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1ae38:	68e3      	ldr	r3, [r4, #12]
   1ae3a:	3203      	adds	r2, #3
   1ae3c:	62e2      	str	r2, [r4, #44]	; 0x2c
   1ae3e:	781a      	ldrb	r2, [r3, #0]
   1ae40:	2a49      	cmp	r2, #73	; 0x49
   1ae42:	4605      	mov	r5, r0
   1ae44:	f47f aefc 	bne.w	1ac40 <d_name+0x34>
   1ae48:	b168      	cbz	r0, 1ae66 <d_name+0x25a>
   1ae4a:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
   1ae4e:	428a      	cmp	r2, r1
   1ae50:	da09      	bge.n	1ae66 <d_name+0x25a>
   1ae52:	69e1      	ldr	r1, [r4, #28]
   1ae54:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   1ae58:	3201      	adds	r2, #1
   1ae5a:	6222      	str	r2, [r4, #32]
   1ae5c:	781a      	ldrb	r2, [r3, #0]
   1ae5e:	3a49      	subs	r2, #73	; 0x49
   1ae60:	2a01      	cmp	r2, #1
   1ae62:	d8c6      	bhi.n	1adf2 <d_name+0x1e6>
   1ae64:	e700      	b.n	1ac68 <d_name+0x5c>
   1ae66:	2500      	movs	r5, #0
   1ae68:	4628      	mov	r0, r5
   1ae6a:	b004      	add	sp, #16
   1ae6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ae70:	7853      	ldrb	r3, [r2, #1]
   1ae72:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1ae76:	2b54      	cmp	r3, #84	; 0x54
   1ae78:	4620      	mov	r0, r4
   1ae7a:	f43f af3f 	beq.w	1acfc <d_name+0xf0>
   1ae7e:	f7ff fd2b 	bl	1a8d8 <d_unqualified_name>
   1ae82:	4605      	mov	r5, r0
   1ae84:	f1ba 0f00 	cmp.w	sl, #0
   1ae88:	f47f af27 	bne.w	1acda <d_name+0xce>
   1ae8c:	e73c      	b.n	1ad08 <d_name+0xfc>
   1ae8e:	2315      	movs	r3, #21
   1ae90:	fa29 f303 	lsr.w	r3, r9, r3
   1ae94:	07d9      	lsls	r1, r3, #31
   1ae96:	d53f      	bpl.n	1af18 <d_name+0x30c>
   1ae98:	4620      	mov	r0, r4
   1ae9a:	f7ff fd1d 	bl	1a8d8 <d_unqualified_name>
   1ae9e:	b115      	cbz	r5, 1aea6 <d_name+0x29a>
   1aea0:	46aa      	mov	sl, r5
   1aea2:	4605      	mov	r5, r0
   1aea4:	e719      	b.n	1acda <d_name+0xce>
   1aea6:	4605      	mov	r5, r0
   1aea8:	e72e      	b.n	1ad08 <d_name+0xfc>
   1aeaa:	2100      	movs	r1, #0
   1aeac:	f000 f89a 	bl	1afe4 <d_encoding.part.0>
   1aeb0:	4605      	mov	r5, r0
   1aeb2:	e747      	b.n	1ad44 <d_name+0x138>
   1aeb4:	1c9a      	adds	r2, r3, #2
   1aeb6:	60e2      	str	r2, [r4, #12]
   1aeb8:	789a      	ldrb	r2, [r3, #2]
   1aeba:	2a5f      	cmp	r2, #95	; 0x5f
   1aebc:	d07c      	beq.n	1afb8 <d_name+0x3ac>
   1aebe:	2a6e      	cmp	r2, #110	; 0x6e
   1aec0:	d0d1      	beq.n	1ae66 <d_name+0x25a>
   1aec2:	4620      	mov	r0, r4
   1aec4:	f7fe fb6a 	bl	1959c <d_number>
   1aec8:	1c46      	adds	r6, r0, #1
   1aeca:	d4cc      	bmi.n	1ae66 <d_name+0x25a>
   1aecc:	68e3      	ldr	r3, [r4, #12]
   1aece:	781a      	ldrb	r2, [r3, #0]
   1aed0:	2a5f      	cmp	r2, #95	; 0x5f
   1aed2:	d1c8      	bne.n	1ae66 <d_name+0x25a>
   1aed4:	3301      	adds	r3, #1
   1aed6:	60e3      	str	r3, [r4, #12]
   1aed8:	4620      	mov	r0, r4
   1aeda:	f7ff fe97 	bl	1ac0c <d_name>
   1aede:	4603      	mov	r3, r0
   1aee0:	2800      	cmp	r0, #0
   1aee2:	f43f af55 	beq.w	1ad90 <d_name+0x184>
   1aee6:	781a      	ldrb	r2, [r3, #0]
   1aee8:	2a46      	cmp	r2, #70	; 0x46
   1aeea:	f43f af51 	beq.w	1ad90 <d_name+0x184>
   1aeee:	2a48      	cmp	r2, #72	; 0x48
   1aef0:	f43f af4e 	beq.w	1ad90 <d_name+0x184>
   1aef4:	e743      	b.n	1ad7e <d_name+0x172>
   1aef6:	4655      	mov	r5, sl
   1aef8:	e7ca      	b.n	1ae90 <d_name+0x284>
   1aefa:	2e55      	cmp	r6, #85	; 0x55
   1aefc:	d02f      	beq.n	1af5e <d_name+0x352>
   1aefe:	2e53      	cmp	r6, #83	; 0x53
   1af00:	d109      	bne.n	1af16 <d_name+0x30a>
   1af02:	2101      	movs	r1, #1
   1af04:	4620      	mov	r0, r4
   1af06:	f7fe fe4d 	bl	19ba4 <d_substitution>
   1af0a:	4605      	mov	r5, r0
   1af0c:	f1ba 0f00 	cmp.w	sl, #0
   1af10:	f47f aee3 	bne.w	1acda <d_name+0xce>
   1af14:	e6ea      	b.n	1acec <d_name+0xe0>
   1af16:	4655      	mov	r5, sl
   1af18:	2e49      	cmp	r6, #73	; 0x49
   1af1a:	d041      	beq.n	1afa0 <d_name+0x394>
   1af1c:	2e54      	cmp	r6, #84	; 0x54
   1af1e:	d051      	beq.n	1afc4 <d_name+0x3b8>
   1af20:	2e45      	cmp	r6, #69	; 0x45
   1af22:	d009      	beq.n	1af38 <d_name+0x32c>
   1af24:	2e4d      	cmp	r6, #77	; 0x4d
   1af26:	f47f aee6 	bne.w	1acf6 <d_name+0xea>
   1af2a:	2d00      	cmp	r5, #0
   1af2c:	f43f aee3 	beq.w	1acf6 <d_name+0xea>
   1af30:	3201      	adds	r2, #1
   1af32:	60e2      	str	r2, [r4, #12]
   1af34:	46aa      	mov	sl, r5
   1af36:	e6db      	b.n	1acf0 <d_name+0xe4>
   1af38:	603d      	str	r5, [r7, #0]
   1af3a:	2d00      	cmp	r5, #0
   1af3c:	d093      	beq.n	1ae66 <d_name+0x25a>
   1af3e:	f1b8 0f00 	cmp.w	r8, #0
   1af42:	d004      	beq.n	1af4e <d_name+0x342>
   1af44:	9b03      	ldr	r3, [sp, #12]
   1af46:	f8c8 300c 	str.w	r3, [r8, #12]
   1af4a:	f8cd 800c 	str.w	r8, [sp, #12]
   1af4e:	68e3      	ldr	r3, [r4, #12]
   1af50:	781a      	ldrb	r2, [r3, #0]
   1af52:	2a45      	cmp	r2, #69	; 0x45
   1af54:	d187      	bne.n	1ae66 <d_name+0x25a>
   1af56:	3301      	adds	r3, #1
   1af58:	9d03      	ldr	r5, [sp, #12]
   1af5a:	60e3      	str	r3, [r4, #12]
   1af5c:	e670      	b.n	1ac40 <d_name+0x34>
   1af5e:	4655      	mov	r5, sl
   1af60:	e79a      	b.n	1ae98 <d_name+0x28c>
   1af62:	3302      	adds	r3, #2
   1af64:	60e3      	str	r3, [r4, #12]
   1af66:	4620      	mov	r0, r4
   1af68:	f7fe fbfc 	bl	19764 <d_discriminator>
   1af6c:	2800      	cmp	r0, #0
   1af6e:	f43f af7a 	beq.w	1ae66 <d_name+0x25a>
   1af72:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
   1af76:	429a      	cmp	r2, r3
   1af78:	da22      	bge.n	1afc0 <d_name+0x3b4>
   1af7a:	6921      	ldr	r1, [r4, #16]
   1af7c:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   1af80:	0098      	lsls	r0, r3, #2
   1af82:	3201      	adds	r2, #1
   1af84:	6162      	str	r2, [r4, #20]
   1af86:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1af8a:	2200      	movs	r2, #0
   1af8c:	e9c3 2201 	strd	r2, r2, [r3, #4]
   1af90:	540a      	strb	r2, [r1, r0]
   1af92:	4912      	ldr	r1, [pc, #72]	; (1afdc <d_name+0x3d0>)
   1af94:	220e      	movs	r2, #14
   1af96:	e9c3 1203 	strd	r1, r2, [r3, #12]
   1af9a:	e70e      	b.n	1adba <d_name+0x1ae>
   1af9c:	2500      	movs	r5, #0
   1af9e:	e741      	b.n	1ae24 <d_name+0x218>
   1afa0:	2d00      	cmp	r5, #0
   1afa2:	f43f aea8 	beq.w	1acf6 <d_name+0xea>
   1afa6:	3201      	adds	r2, #1
   1afa8:	60e2      	str	r2, [r4, #12]
   1afaa:	4620      	mov	r0, r4
   1afac:	f000 fe7a 	bl	1bca4 <d_template_args_1>
   1afb0:	46aa      	mov	sl, r5
   1afb2:	2104      	movs	r1, #4
   1afb4:	4605      	mov	r5, r0
   1afb6:	e691      	b.n	1acdc <d_name+0xd0>
   1afb8:	3303      	adds	r3, #3
   1afba:	60e3      	str	r3, [r4, #12]
   1afbc:	2600      	movs	r6, #0
   1afbe:	e78b      	b.n	1aed8 <d_name+0x2cc>
   1afc0:	2300      	movs	r3, #0
   1afc2:	e6fa      	b.n	1adba <d_name+0x1ae>
   1afc4:	4620      	mov	r0, r4
   1afc6:	f7fe fd11 	bl	199ec <d_template_param>
   1afca:	46aa      	mov	sl, r5
   1afcc:	4605      	mov	r5, r0
   1afce:	f1ba 0f00 	cmp.w	sl, #0
   1afd2:	f47f ae82 	bne.w	1acda <d_name+0xce>
   1afd6:	e697      	b.n	1ad08 <d_name+0xfc>
   1afd8:	0004387c 	.word	0x0004387c
   1afdc:	0004386c 	.word	0x0004386c
   1afe0:	100803ff 	.word	0x100803ff

0001afe4 <d_encoding.part.0>:
   1afe4:	b570      	push	{r4, r5, r6, lr}
   1afe6:	4605      	mov	r5, r0
   1afe8:	460e      	mov	r6, r1
   1afea:	f7ff fe0f 	bl	1ac0c <d_name>
   1afee:	2800      	cmp	r0, #0
   1aff0:	d049      	beq.n	1b086 <d_encoding.part.0+0xa2>
   1aff2:	4604      	mov	r4, r0
   1aff4:	b1ee      	cbz	r6, 1b032 <d_encoding.part.0+0x4e>
   1aff6:	68ab      	ldr	r3, [r5, #8]
   1aff8:	07db      	lsls	r3, r3, #31
   1affa:	d41a      	bmi.n	1b032 <d_encoding.part.0+0x4e>
   1affc:	7823      	ldrb	r3, [r4, #0]
   1affe:	2b4d      	cmp	r3, #77	; 0x4d
   1b000:	f1a3 011c 	sub.w	r1, r3, #28
   1b004:	f1a3 024f 	sub.w	r2, r3, #79	; 0x4f
   1b008:	d035      	beq.n	1b076 <d_encoding.part.0+0x92>
   1b00a:	d832      	bhi.n	1b072 <d_encoding.part.0+0x8e>
   1b00c:	2904      	cmp	r1, #4
   1b00e:	d932      	bls.n	1b076 <d_encoding.part.0+0x92>
   1b010:	2b02      	cmp	r3, #2
   1b012:	d10c      	bne.n	1b02e <d_encoding.part.0+0x4a>
   1b014:	6923      	ldr	r3, [r4, #16]
   1b016:	2b00      	cmp	r3, #0
   1b018:	d035      	beq.n	1b086 <d_encoding.part.0+0xa2>
   1b01a:	781a      	ldrb	r2, [r3, #0]
   1b01c:	2a4d      	cmp	r2, #77	; 0x4d
   1b01e:	f1a2 001c 	sub.w	r0, r2, #28
   1b022:	f1a2 014f 	sub.w	r1, r2, #79	; 0x4f
   1b026:	d02a      	beq.n	1b07e <d_encoding.part.0+0x9a>
   1b028:	d827      	bhi.n	1b07a <d_encoding.part.0+0x96>
   1b02a:	2804      	cmp	r0, #4
   1b02c:	d927      	bls.n	1b07e <d_encoding.part.0+0x9a>
   1b02e:	4620      	mov	r0, r4
   1b030:	bd70      	pop	{r4, r5, r6, pc}
   1b032:	68eb      	ldr	r3, [r5, #12]
   1b034:	781b      	ldrb	r3, [r3, #0]
   1b036:	2b00      	cmp	r3, #0
   1b038:	d0f9      	beq.n	1b02e <d_encoding.part.0+0x4a>
   1b03a:	2b45      	cmp	r3, #69	; 0x45
   1b03c:	d0f7      	beq.n	1b02e <d_encoding.part.0+0x4a>
   1b03e:	4621      	mov	r1, r4
   1b040:	780b      	ldrb	r3, [r1, #0]
   1b042:	2b04      	cmp	r3, #4
   1b044:	d032      	beq.n	1b0ac <d_encoding.part.0+0xc8>
   1b046:	d826      	bhi.n	1b096 <d_encoding.part.0+0xb2>
   1b048:	2b02      	cmp	r3, #2
   1b04a:	d122      	bne.n	1b092 <d_encoding.part.0+0xae>
   1b04c:	6909      	ldr	r1, [r1, #16]
   1b04e:	2900      	cmp	r1, #0
   1b050:	d1f6      	bne.n	1b040 <d_encoding.part.0+0x5c>
   1b052:	4628      	mov	r0, r5
   1b054:	f7ff fbe6 	bl	1a824 <d_bare_function_type>
   1b058:	b1a8      	cbz	r0, 1b086 <d_encoding.part.0+0xa2>
   1b05a:	b916      	cbnz	r6, 1b062 <d_encoding.part.0+0x7e>
   1b05c:	7823      	ldrb	r3, [r4, #0]
   1b05e:	2b02      	cmp	r3, #2
   1b060:	d038      	beq.n	1b0d4 <d_encoding.part.0+0xf0>
   1b062:	4603      	mov	r3, r0
   1b064:	4622      	mov	r2, r4
   1b066:	4628      	mov	r0, r5
   1b068:	2103      	movs	r1, #3
   1b06a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1b06e:	f7fe ba4b 	b.w	19508 <d_make_comp>
   1b072:	2a01      	cmp	r2, #1
   1b074:	d8db      	bhi.n	1b02e <d_encoding.part.0+0x4a>
   1b076:	68e4      	ldr	r4, [r4, #12]
   1b078:	e7c0      	b.n	1affc <d_encoding.part.0+0x18>
   1b07a:	2901      	cmp	r1, #1
   1b07c:	d8d7      	bhi.n	1b02e <d_encoding.part.0+0x4a>
   1b07e:	68db      	ldr	r3, [r3, #12]
   1b080:	6123      	str	r3, [r4, #16]
   1b082:	2b00      	cmp	r3, #0
   1b084:	d1c9      	bne.n	1b01a <d_encoding.part.0+0x36>
   1b086:	2400      	movs	r4, #0
   1b088:	4620      	mov	r0, r4
   1b08a:	bd70      	pop	{r4, r5, r6, pc}
   1b08c:	3b1c      	subs	r3, #28
   1b08e:	2b04      	cmp	r3, #4
   1b090:	d908      	bls.n	1b0a4 <d_encoding.part.0+0xc0>
   1b092:	2100      	movs	r1, #0
   1b094:	e7dd      	b.n	1b052 <d_encoding.part.0+0x6e>
   1b096:	2b4d      	cmp	r3, #77	; 0x4d
   1b098:	f1a3 024f 	sub.w	r2, r3, #79	; 0x4f
   1b09c:	d002      	beq.n	1b0a4 <d_encoding.part.0+0xc0>
   1b09e:	d9f5      	bls.n	1b08c <d_encoding.part.0+0xa8>
   1b0a0:	2a01      	cmp	r2, #1
   1b0a2:	d8f6      	bhi.n	1b092 <d_encoding.part.0+0xae>
   1b0a4:	68c9      	ldr	r1, [r1, #12]
   1b0a6:	2900      	cmp	r1, #0
   1b0a8:	d1ca      	bne.n	1b040 <d_encoding.part.0+0x5c>
   1b0aa:	e7d2      	b.n	1b052 <d_encoding.part.0+0x6e>
   1b0ac:	68cb      	ldr	r3, [r1, #12]
   1b0ae:	b15b      	cbz	r3, 1b0c8 <d_encoding.part.0+0xe4>
   1b0b0:	7819      	ldrb	r1, [r3, #0]
   1b0b2:	2908      	cmp	r1, #8
   1b0b4:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
   1b0b8:	d808      	bhi.n	1b0cc <d_encoding.part.0+0xe8>
   1b0ba:	2906      	cmp	r1, #6
   1b0bc:	d8e9      	bhi.n	1b092 <d_encoding.part.0+0xae>
   1b0be:	2a01      	cmp	r2, #1
   1b0c0:	d802      	bhi.n	1b0c8 <d_encoding.part.0+0xe4>
   1b0c2:	691b      	ldr	r3, [r3, #16]
   1b0c4:	2b00      	cmp	r3, #0
   1b0c6:	d1f3      	bne.n	1b0b0 <d_encoding.part.0+0xcc>
   1b0c8:	2101      	movs	r1, #1
   1b0ca:	e7c2      	b.n	1b052 <d_encoding.part.0+0x6e>
   1b0cc:	3935      	subs	r1, #53	; 0x35
   1b0ce:	bf18      	it	ne
   1b0d0:	2101      	movne	r1, #1
   1b0d2:	e7be      	b.n	1b052 <d_encoding.part.0+0x6e>
   1b0d4:	7803      	ldrb	r3, [r0, #0]
   1b0d6:	2b29      	cmp	r3, #41	; 0x29
   1b0d8:	bf08      	it	eq
   1b0da:	60c6      	streq	r6, [r0, #12]
   1b0dc:	e7c1      	b.n	1b062 <d_encoding.part.0+0x7e>
   1b0de:	bf00      	nop

0001b0e0 <d_special_name>:
   1b0e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b0e4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   1b0e6:	68c3      	ldr	r3, [r0, #12]
   1b0e8:	f101 0214 	add.w	r2, r1, #20
   1b0ec:	62c2      	str	r2, [r0, #44]	; 0x2c
   1b0ee:	781a      	ldrb	r2, [r3, #0]
   1b0f0:	2a54      	cmp	r2, #84	; 0x54
   1b0f2:	b082      	sub	sp, #8
   1b0f4:	4604      	mov	r4, r0
   1b0f6:	d075      	beq.n	1b1e4 <d_special_name+0x104>
   1b0f8:	2a47      	cmp	r2, #71	; 0x47
   1b0fa:	d128      	bne.n	1b14e <d_special_name+0x6e>
   1b0fc:	1c5a      	adds	r2, r3, #1
   1b0fe:	60c2      	str	r2, [r0, #12]
   1b100:	785a      	ldrb	r2, [r3, #1]
   1b102:	b322      	cbz	r2, 1b14e <d_special_name+0x6e>
   1b104:	1c9a      	adds	r2, r3, #2
   1b106:	60c2      	str	r2, [r0, #12]
   1b108:	785a      	ldrb	r2, [r3, #1]
   1b10a:	2a56      	cmp	r2, #86	; 0x56
   1b10c:	d823      	bhi.n	1b156 <d_special_name+0x76>
   1b10e:	2a40      	cmp	r2, #64	; 0x40
   1b110:	d91d      	bls.n	1b14e <d_special_name+0x6e>
   1b112:	3a41      	subs	r2, #65	; 0x41
   1b114:	2a15      	cmp	r2, #21
   1b116:	d81a      	bhi.n	1b14e <d_special_name+0x6e>
   1b118:	e8df f012 	tbh	[pc, r2, lsl #1]
   1b11c:	0019011d 	.word	0x0019011d
   1b120:	00190019 	.word	0x00190019
   1b124:	00190019 	.word	0x00190019
   1b128:	00190019 	.word	0x00190019
   1b12c:	00190019 	.word	0x00190019
   1b130:	00190019 	.word	0x00190019
   1b134:	00190019 	.word	0x00190019
   1b138:	00190019 	.word	0x00190019
   1b13c:	00ff0019 	.word	0x00ff0019
   1b140:	00e90019 	.word	0x00e90019
   1b144:	00de0019 	.word	0x00de0019
   1b148:	68e3      	ldr	r3, [r4, #12]
   1b14a:	3302      	adds	r3, #2
   1b14c:	60e3      	str	r3, [r4, #12]
   1b14e:	2000      	movs	r0, #0
   1b150:	b002      	add	sp, #8
   1b152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b156:	2a72      	cmp	r2, #114	; 0x72
   1b158:	d1f9      	bne.n	1b14e <d_special_name+0x6e>
   1b15a:	f7fe fa1f 	bl	1959c <d_number>
   1b15e:	2801      	cmp	r0, #1
   1b160:	ddf5      	ble.n	1b14e <d_special_name+0x6e>
   1b162:	68e3      	ldr	r3, [r4, #12]
   1b164:	781a      	ldrb	r2, [r3, #0]
   1b166:	2a00      	cmp	r2, #0
   1b168:	d0f1      	beq.n	1b14e <d_special_name+0x6e>
   1b16a:	1c5e      	adds	r6, r3, #1
   1b16c:	60e6      	str	r6, [r4, #12]
   1b16e:	781b      	ldrb	r3, [r3, #0]
   1b170:	2b5f      	cmp	r3, #95	; 0x5f
   1b172:	d1ec      	bne.n	1b14e <d_special_name+0x6e>
   1b174:	2200      	movs	r2, #0
   1b176:	1e45      	subs	r5, r0, #1
   1b178:	4617      	mov	r7, r2
   1b17a:	f04f 0841 	mov.w	r8, #65	; 0x41
   1b17e:	7833      	ldrb	r3, [r6, #0]
   1b180:	2b00      	cmp	r3, #0
   1b182:	d0e4      	beq.n	1b14e <d_special_name+0x6e>
   1b184:	2b24      	cmp	r3, #36	; 0x24
   1b186:	f040 819f 	bne.w	1b4c8 <d_special_name+0x3e8>
   1b18a:	7873      	ldrb	r3, [r6, #1]
   1b18c:	2b53      	cmp	r3, #83	; 0x53
   1b18e:	f000 81c0 	beq.w	1b512 <d_special_name+0x432>
   1b192:	2b5f      	cmp	r3, #95	; 0x5f
   1b194:	f000 81bb 	beq.w	1b50e <d_special_name+0x42e>
   1b198:	2b24      	cmp	r3, #36	; 0x24
   1b19a:	d1d8      	bne.n	1b14e <d_special_name+0x6e>
   1b19c:	4619      	mov	r1, r3
   1b19e:	e9d4 0305 	ldrd	r0, r3, [r4, #20]
   1b1a2:	4298      	cmp	r0, r3
   1b1a4:	dad0      	bge.n	1b148 <d_special_name+0x68>
   1b1a6:	6926      	ldr	r6, [r4, #16]
   1b1a8:	eb00 0c80 	add.w	ip, r0, r0, lsl #2
   1b1ac:	eb06 038c 	add.w	r3, r6, ip, lsl #2
   1b1b0:	3001      	adds	r0, #1
   1b1b2:	e9c3 7701 	strd	r7, r7, [r3, #4]
   1b1b6:	6160      	str	r0, [r4, #20]
   1b1b8:	f806 802c 	strb.w	r8, [r6, ip, lsl #2]
   1b1bc:	68e6      	ldr	r6, [r4, #12]
   1b1be:	60d9      	str	r1, [r3, #12]
   1b1c0:	3602      	adds	r6, #2
   1b1c2:	3d02      	subs	r5, #2
   1b1c4:	60e6      	str	r6, [r4, #12]
   1b1c6:	2a00      	cmp	r2, #0
   1b1c8:	f000 819f 	beq.w	1b50a <d_special_name+0x42a>
   1b1cc:	2140      	movs	r1, #64	; 0x40
   1b1ce:	4620      	mov	r0, r4
   1b1d0:	f7fe f99a 	bl	19508 <d_make_comp>
   1b1d4:	4602      	mov	r2, r0
   1b1d6:	2800      	cmp	r0, #0
   1b1d8:	d0b9      	beq.n	1b14e <d_special_name+0x6e>
   1b1da:	2d00      	cmp	r5, #0
   1b1dc:	dccf      	bgt.n	1b17e <d_special_name+0x9e>
   1b1de:	2300      	movs	r3, #0
   1b1e0:	213f      	movs	r1, #63	; 0x3f
   1b1e2:	e07e      	b.n	1b2e2 <d_special_name+0x202>
   1b1e4:	1c5a      	adds	r2, r3, #1
   1b1e6:	60c2      	str	r2, [r0, #12]
   1b1e8:	785a      	ldrb	r2, [r3, #1]
   1b1ea:	2a00      	cmp	r2, #0
   1b1ec:	d0af      	beq.n	1b14e <d_special_name+0x6e>
   1b1ee:	1c9a      	adds	r2, r3, #2
   1b1f0:	60c2      	str	r2, [r0, #12]
   1b1f2:	785b      	ldrb	r3, [r3, #1]
   1b1f4:	3b41      	subs	r3, #65	; 0x41
   1b1f6:	2b35      	cmp	r3, #53	; 0x35
   1b1f8:	d8a9      	bhi.n	1b14e <d_special_name+0x6e>
   1b1fa:	a201      	add	r2, pc, #4	; (adr r2, 1b200 <d_special_name+0x120>)
   1b1fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1b200:	0001b393 	.word	0x0001b393
   1b204:	0001b14f 	.word	0x0001b14f
   1b208:	0001b39f 	.word	0x0001b39f
   1b20c:	0001b14f 	.word	0x0001b14f
   1b210:	0001b14f 	.word	0x0001b14f
   1b214:	0001b3d3 	.word	0x0001b3d3
   1b218:	0001b14f 	.word	0x0001b14f
   1b21c:	0001b437 	.word	0x0001b437
   1b220:	0001b4b1 	.word	0x0001b4b1
   1b224:	0001b4a5 	.word	0x0001b4a5
   1b228:	0001b14f 	.word	0x0001b14f
   1b22c:	0001b14f 	.word	0x0001b14f
   1b230:	0001b14f 	.word	0x0001b14f
   1b234:	0001b14f 	.word	0x0001b14f
   1b238:	0001b14f 	.word	0x0001b14f
   1b23c:	0001b14f 	.word	0x0001b14f
   1b240:	0001b14f 	.word	0x0001b14f
   1b244:	0001b14f 	.word	0x0001b14f
   1b248:	0001b4bd 	.word	0x0001b4bd
   1b24c:	0001b443 	.word	0x0001b443
   1b250:	0001b14f 	.word	0x0001b14f
   1b254:	0001b453 	.word	0x0001b453
   1b258:	0001b463 	.word	0x0001b463
   1b25c:	0001b14f 	.word	0x0001b14f
   1b260:	0001b14f 	.word	0x0001b14f
   1b264:	0001b14f 	.word	0x0001b14f
   1b268:	0001b14f 	.word	0x0001b14f
   1b26c:	0001b14f 	.word	0x0001b14f
   1b270:	0001b14f 	.word	0x0001b14f
   1b274:	0001b14f 	.word	0x0001b14f
   1b278:	0001b14f 	.word	0x0001b14f
   1b27c:	0001b14f 	.word	0x0001b14f
   1b280:	0001b14f 	.word	0x0001b14f
   1b284:	0001b14f 	.word	0x0001b14f
   1b288:	0001b46f 	.word	0x0001b46f
   1b28c:	0001b14f 	.word	0x0001b14f
   1b290:	0001b14f 	.word	0x0001b14f
   1b294:	0001b14f 	.word	0x0001b14f
   1b298:	0001b14f 	.word	0x0001b14f
   1b29c:	0001b3df 	.word	0x0001b3df
   1b2a0:	0001b14f 	.word	0x0001b14f
   1b2a4:	0001b14f 	.word	0x0001b14f
   1b2a8:	0001b14f 	.word	0x0001b14f
   1b2ac:	0001b14f 	.word	0x0001b14f
   1b2b0:	0001b14f 	.word	0x0001b14f
   1b2b4:	0001b14f 	.word	0x0001b14f
   1b2b8:	0001b14f 	.word	0x0001b14f
   1b2bc:	0001b14f 	.word	0x0001b14f
   1b2c0:	0001b14f 	.word	0x0001b14f
   1b2c4:	0001b14f 	.word	0x0001b14f
   1b2c8:	0001b14f 	.word	0x0001b14f
   1b2cc:	0001b14f 	.word	0x0001b14f
   1b2d0:	0001b14f 	.word	0x0001b14f
   1b2d4:	0001b40b 	.word	0x0001b40b
   1b2d8:	f7ff fc98 	bl	1ac0c <d_name>
   1b2dc:	2300      	movs	r3, #0
   1b2de:	4602      	mov	r2, r0
   1b2e0:	2113      	movs	r1, #19
   1b2e2:	4620      	mov	r0, r4
   1b2e4:	b002      	add	sp, #8
   1b2e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1b2ea:	f7fe b90d 	b.w	19508 <d_make_comp>
   1b2ee:	789a      	ldrb	r2, [r3, #2]
   1b2f0:	2a00      	cmp	r2, #0
   1b2f2:	f000 8110 	beq.w	1b516 <d_special_name+0x436>
   1b2f6:	1cda      	adds	r2, r3, #3
   1b2f8:	60c2      	str	r2, [r0, #12]
   1b2fa:	789a      	ldrb	r2, [r3, #2]
   1b2fc:	78db      	ldrb	r3, [r3, #3]
   1b2fe:	2a6e      	cmp	r2, #110	; 0x6e
   1b300:	d03a      	beq.n	1b378 <d_special_name+0x298>
   1b302:	2b47      	cmp	r3, #71	; 0x47
   1b304:	d002      	beq.n	1b30c <d_special_name+0x22c>
   1b306:	2b54      	cmp	r3, #84	; 0x54
   1b308:	f040 8105 	bne.w	1b516 <d_special_name+0x436>
   1b30c:	4620      	mov	r0, r4
   1b30e:	f7ff fee7 	bl	1b0e0 <d_special_name>
   1b312:	4602      	mov	r2, r0
   1b314:	2300      	movs	r3, #0
   1b316:	2149      	movs	r1, #73	; 0x49
   1b318:	e7e3      	b.n	1b2e2 <d_special_name+0x202>
   1b31a:	f7ff fc77 	bl	1ac0c <d_name>
   1b31e:	e9d4 1305 	ldrd	r1, r3, [r4, #20]
   1b322:	4299      	cmp	r1, r3
   1b324:	4602      	mov	r2, r0
   1b326:	f280 8100 	bge.w	1b52a <d_special_name+0x44a>
   1b32a:	9001      	str	r0, [sp, #4]
   1b32c:	6920      	ldr	r0, [r4, #16]
   1b32e:	eb01 0681 	add.w	r6, r1, r1, lsl #2
   1b332:	eb00 0586 	add.w	r5, r0, r6, lsl #2
   1b336:	2300      	movs	r3, #0
   1b338:	e9c5 3301 	strd	r3, r3, [r5, #4]
   1b33c:	3101      	adds	r1, #1
   1b33e:	2342      	movs	r3, #66	; 0x42
   1b340:	6161      	str	r1, [r4, #20]
   1b342:	f800 3026 	strb.w	r3, [r0, r6, lsl #2]
   1b346:	4620      	mov	r0, r4
   1b348:	f7fe f928 	bl	1959c <d_number>
   1b34c:	9a01      	ldr	r2, [sp, #4]
   1b34e:	60e8      	str	r0, [r5, #12]
   1b350:	462b      	mov	r3, r5
   1b352:	2116      	movs	r1, #22
   1b354:	e7c5      	b.n	1b2e2 <d_special_name+0x202>
   1b356:	789b      	ldrb	r3, [r3, #2]
   1b358:	2b47      	cmp	r3, #71	; 0x47
   1b35a:	d001      	beq.n	1b360 <d_special_name+0x280>
   1b35c:	2b54      	cmp	r3, #84	; 0x54
   1b35e:	d106      	bne.n	1b36e <d_special_name+0x28e>
   1b360:	4620      	mov	r0, r4
   1b362:	f7ff febd 	bl	1b0e0 <d_special_name>
   1b366:	4602      	mov	r2, r0
   1b368:	2300      	movs	r3, #0
   1b36a:	2117      	movs	r1, #23
   1b36c:	e7b9      	b.n	1b2e2 <d_special_name+0x202>
   1b36e:	2100      	movs	r1, #0
   1b370:	f7ff fe38 	bl	1afe4 <d_encoding.part.0>
   1b374:	4602      	mov	r2, r0
   1b376:	e7f7      	b.n	1b368 <d_special_name+0x288>
   1b378:	2b47      	cmp	r3, #71	; 0x47
   1b37a:	f000 80e2 	beq.w	1b542 <d_special_name+0x462>
   1b37e:	2b54      	cmp	r3, #84	; 0x54
   1b380:	f000 80df 	beq.w	1b542 <d_special_name+0x462>
   1b384:	2100      	movs	r1, #0
   1b386:	f7ff fe2d 	bl	1afe4 <d_encoding.part.0>
   1b38a:	4602      	mov	r2, r0
   1b38c:	2300      	movs	r3, #0
   1b38e:	214a      	movs	r1, #74	; 0x4a
   1b390:	e7a7      	b.n	1b2e2 <d_special_name+0x202>
   1b392:	f000 fc5d 	bl	1bc50 <d_template_arg>
   1b396:	2300      	movs	r3, #0
   1b398:	4602      	mov	r2, r0
   1b39a:	2130      	movs	r1, #48	; 0x30
   1b39c:	e7a1      	b.n	1b2e2 <d_special_name+0x202>
   1b39e:	f7fe fd3f 	bl	19e20 <d_type>
   1b3a2:	4605      	mov	r5, r0
   1b3a4:	4620      	mov	r0, r4
   1b3a6:	f7fe f8f9 	bl	1959c <d_number>
   1b3aa:	2800      	cmp	r0, #0
   1b3ac:	f6ff aecf 	blt.w	1b14e <d_special_name+0x6e>
   1b3b0:	68e3      	ldr	r3, [r4, #12]
   1b3b2:	781a      	ldrb	r2, [r3, #0]
   1b3b4:	2a5f      	cmp	r2, #95	; 0x5f
   1b3b6:	f47f aeca 	bne.w	1b14e <d_special_name+0x6e>
   1b3ba:	3301      	adds	r3, #1
   1b3bc:	60e3      	str	r3, [r4, #12]
   1b3be:	4620      	mov	r0, r4
   1b3c0:	f7fe fd2e 	bl	19e20 <d_type>
   1b3c4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   1b3c6:	3105      	adds	r1, #5
   1b3c8:	62e1      	str	r1, [r4, #44]	; 0x2c
   1b3ca:	4602      	mov	r2, r0
   1b3cc:	462b      	mov	r3, r5
   1b3ce:	210b      	movs	r1, #11
   1b3d0:	e787      	b.n	1b2e2 <d_special_name+0x202>
   1b3d2:	f7fe fd25 	bl	19e20 <d_type>
   1b3d6:	2300      	movs	r3, #0
   1b3d8:	4602      	mov	r2, r0
   1b3da:	210e      	movs	r1, #14
   1b3dc:	e781      	b.n	1b2e2 <d_special_name+0x202>
   1b3de:	2168      	movs	r1, #104	; 0x68
   1b3e0:	f7fe f916 	bl	19610 <d_call_offset>
   1b3e4:	2800      	cmp	r0, #0
   1b3e6:	f43f aeb2 	beq.w	1b14e <d_special_name+0x6e>
   1b3ea:	68e3      	ldr	r3, [r4, #12]
   1b3ec:	781b      	ldrb	r3, [r3, #0]
   1b3ee:	2b47      	cmp	r3, #71	; 0x47
   1b3f0:	f000 809d 	beq.w	1b52e <d_special_name+0x44e>
   1b3f4:	2b54      	cmp	r3, #84	; 0x54
   1b3f6:	f000 809a 	beq.w	1b52e <d_special_name+0x44e>
   1b3fa:	2100      	movs	r1, #0
   1b3fc:	4620      	mov	r0, r4
   1b3fe:	f7ff fdf1 	bl	1afe4 <d_encoding.part.0>
   1b402:	4602      	mov	r2, r0
   1b404:	2300      	movs	r3, #0
   1b406:	210f      	movs	r1, #15
   1b408:	e76b      	b.n	1b2e2 <d_special_name+0x202>
   1b40a:	2176      	movs	r1, #118	; 0x76
   1b40c:	f7fe f900 	bl	19610 <d_call_offset>
   1b410:	2800      	cmp	r0, #0
   1b412:	f43f ae9c 	beq.w	1b14e <d_special_name+0x6e>
   1b416:	68e3      	ldr	r3, [r4, #12]
   1b418:	781b      	ldrb	r3, [r3, #0]
   1b41a:	2b47      	cmp	r3, #71	; 0x47
   1b41c:	f000 808c 	beq.w	1b538 <d_special_name+0x458>
   1b420:	2b54      	cmp	r3, #84	; 0x54
   1b422:	f000 8089 	beq.w	1b538 <d_special_name+0x458>
   1b426:	2100      	movs	r1, #0
   1b428:	4620      	mov	r0, r4
   1b42a:	f7ff fddb 	bl	1afe4 <d_encoding.part.0>
   1b42e:	4602      	mov	r2, r0
   1b430:	2300      	movs	r3, #0
   1b432:	2110      	movs	r1, #16
   1b434:	e755      	b.n	1b2e2 <d_special_name+0x202>
   1b436:	f7ff fbe9 	bl	1ac0c <d_name>
   1b43a:	2300      	movs	r3, #0
   1b43c:	4602      	mov	r2, r0
   1b43e:	2114      	movs	r1, #20
   1b440:	e74f      	b.n	1b2e2 <d_special_name+0x202>
   1b442:	310a      	adds	r1, #10
   1b444:	62c1      	str	r1, [r0, #44]	; 0x2c
   1b446:	f7fe fceb 	bl	19e20 <d_type>
   1b44a:	2300      	movs	r3, #0
   1b44c:	4602      	mov	r2, r0
   1b44e:	210a      	movs	r1, #10
   1b450:	e747      	b.n	1b2e2 <d_special_name+0x202>
   1b452:	310f      	adds	r1, #15
   1b454:	62c1      	str	r1, [r0, #44]	; 0x2c
   1b456:	f7fe fce3 	bl	19e20 <d_type>
   1b45a:	2300      	movs	r3, #0
   1b45c:	4602      	mov	r2, r0
   1b45e:	2109      	movs	r1, #9
   1b460:	e73f      	b.n	1b2e2 <d_special_name+0x202>
   1b462:	f7ff fbd3 	bl	1ac0c <d_name>
   1b466:	2300      	movs	r3, #0
   1b468:	4602      	mov	r2, r0
   1b46a:	2115      	movs	r1, #21
   1b46c:	e739      	b.n	1b2e2 <d_special_name+0x202>
   1b46e:	2100      	movs	r1, #0
   1b470:	f7fe f8ce 	bl	19610 <d_call_offset>
   1b474:	2800      	cmp	r0, #0
   1b476:	f43f ae6a 	beq.w	1b14e <d_special_name+0x6e>
   1b47a:	2100      	movs	r1, #0
   1b47c:	4620      	mov	r0, r4
   1b47e:	f7fe f8c7 	bl	19610 <d_call_offset>
   1b482:	2800      	cmp	r0, #0
   1b484:	f43f ae63 	beq.w	1b14e <d_special_name+0x6e>
   1b488:	68e3      	ldr	r3, [r4, #12]
   1b48a:	781b      	ldrb	r3, [r3, #0]
   1b48c:	2b47      	cmp	r3, #71	; 0x47
   1b48e:	d05d      	beq.n	1b54c <d_special_name+0x46c>
   1b490:	2b54      	cmp	r3, #84	; 0x54
   1b492:	d05b      	beq.n	1b54c <d_special_name+0x46c>
   1b494:	2100      	movs	r1, #0
   1b496:	4620      	mov	r0, r4
   1b498:	f7ff fda4 	bl	1afe4 <d_encoding.part.0>
   1b49c:	4602      	mov	r2, r0
   1b49e:	2300      	movs	r3, #0
   1b4a0:	2111      	movs	r1, #17
   1b4a2:	e71e      	b.n	1b2e2 <d_special_name+0x202>
   1b4a4:	f7fe fcbc 	bl	19e20 <d_type>
   1b4a8:	2300      	movs	r3, #0
   1b4aa:	4602      	mov	r2, r0
   1b4ac:	2112      	movs	r1, #18
   1b4ae:	e718      	b.n	1b2e2 <d_special_name+0x202>
   1b4b0:	f7fe fcb6 	bl	19e20 <d_type>
   1b4b4:	2300      	movs	r3, #0
   1b4b6:	4602      	mov	r2, r0
   1b4b8:	210c      	movs	r1, #12
   1b4ba:	e712      	b.n	1b2e2 <d_special_name+0x202>
   1b4bc:	f7fe fcb0 	bl	19e20 <d_type>
   1b4c0:	2300      	movs	r3, #0
   1b4c2:	4602      	mov	r2, r0
   1b4c4:	210d      	movs	r1, #13
   1b4c6:	e70c      	b.n	1b2e2 <d_special_name+0x202>
   1b4c8:	46b4      	mov	ip, r6
   1b4ca:	2100      	movs	r1, #0
   1b4cc:	e004      	b.n	1b4d8 <d_special_name+0x3f8>
   1b4ce:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
   1b4d2:	b123      	cbz	r3, 1b4de <d_special_name+0x3fe>
   1b4d4:	2b24      	cmp	r3, #36	; 0x24
   1b4d6:	d002      	beq.n	1b4de <d_special_name+0x3fe>
   1b4d8:	3101      	adds	r1, #1
   1b4da:	42a9      	cmp	r1, r5
   1b4dc:	dbf7      	blt.n	1b4ce <d_special_name+0x3ee>
   1b4de:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
   1b4e2:	4283      	cmp	r3, r0
   1b4e4:	da1d      	bge.n	1b522 <d_special_name+0x442>
   1b4e6:	6920      	ldr	r0, [r4, #16]
   1b4e8:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   1b4ec:	3301      	adds	r3, #1
   1b4ee:	6163      	str	r3, [r4, #20]
   1b4f0:	eb00 038c 	add.w	r3, r0, ip, lsl #2
   1b4f4:	e9c3 7701 	strd	r7, r7, [r3, #4]
   1b4f8:	f800 702c 	strb.w	r7, [r0, ip, lsl #2]
   1b4fc:	e9c3 6103 	strd	r6, r1, [r3, #12]
   1b500:	68e6      	ldr	r6, [r4, #12]
   1b502:	440e      	add	r6, r1
   1b504:	1a6d      	subs	r5, r5, r1
   1b506:	60e6      	str	r6, [r4, #12]
   1b508:	e65d      	b.n	1b1c6 <d_special_name+0xe6>
   1b50a:	461a      	mov	r2, r3
   1b50c:	e665      	b.n	1b1da <d_special_name+0xfa>
   1b50e:	212e      	movs	r1, #46	; 0x2e
   1b510:	e645      	b.n	1b19e <d_special_name+0xbe>
   1b512:	212f      	movs	r1, #47	; 0x2f
   1b514:	e643      	b.n	1b19e <d_special_name+0xbe>
   1b516:	2100      	movs	r1, #0
   1b518:	4620      	mov	r0, r4
   1b51a:	f7ff fd63 	bl	1afe4 <d_encoding.part.0>
   1b51e:	4602      	mov	r2, r0
   1b520:	e6f8      	b.n	1b314 <d_special_name+0x234>
   1b522:	68e3      	ldr	r3, [r4, #12]
   1b524:	440b      	add	r3, r1
   1b526:	60e3      	str	r3, [r4, #12]
   1b528:	e611      	b.n	1b14e <d_special_name+0x6e>
   1b52a:	2500      	movs	r5, #0
   1b52c:	e710      	b.n	1b350 <d_special_name+0x270>
   1b52e:	4620      	mov	r0, r4
   1b530:	f7ff fdd6 	bl	1b0e0 <d_special_name>
   1b534:	4602      	mov	r2, r0
   1b536:	e765      	b.n	1b404 <d_special_name+0x324>
   1b538:	4620      	mov	r0, r4
   1b53a:	f7ff fdd1 	bl	1b0e0 <d_special_name>
   1b53e:	4602      	mov	r2, r0
   1b540:	e776      	b.n	1b430 <d_special_name+0x350>
   1b542:	4620      	mov	r0, r4
   1b544:	f7ff fdcc 	bl	1b0e0 <d_special_name>
   1b548:	4602      	mov	r2, r0
   1b54a:	e71f      	b.n	1b38c <d_special_name+0x2ac>
   1b54c:	4620      	mov	r0, r4
   1b54e:	f7ff fdc7 	bl	1b0e0 <d_special_name>
   1b552:	4602      	mov	r2, r0
   1b554:	e7a3      	b.n	1b49e <d_special_name+0x3be>
   1b556:	bf00      	nop

0001b558 <d_expr_primary>:
   1b558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b55a:	68c2      	ldr	r2, [r0, #12]
   1b55c:	7813      	ldrb	r3, [r2, #0]
   1b55e:	2b4c      	cmp	r3, #76	; 0x4c
   1b560:	d132      	bne.n	1b5c8 <d_expr_primary+0x70>
   1b562:	1c53      	adds	r3, r2, #1
   1b564:	60c3      	str	r3, [r0, #12]
   1b566:	7851      	ldrb	r1, [r2, #1]
   1b568:	295f      	cmp	r1, #95	; 0x5f
   1b56a:	4604      	mov	r4, r0
   1b56c:	d051      	beq.n	1b612 <d_expr_primary+0xba>
   1b56e:	295a      	cmp	r1, #90	; 0x5a
   1b570:	d113      	bne.n	1b59a <d_expr_primary+0x42>
   1b572:	1c5a      	adds	r2, r3, #1
   1b574:	60e2      	str	r2, [r4, #12]
   1b576:	785b      	ldrb	r3, [r3, #1]
   1b578:	2b47      	cmp	r3, #71	; 0x47
   1b57a:	d043      	beq.n	1b604 <d_expr_primary+0xac>
   1b57c:	2b54      	cmp	r3, #84	; 0x54
   1b57e:	d041      	beq.n	1b604 <d_expr_primary+0xac>
   1b580:	2100      	movs	r1, #0
   1b582:	4620      	mov	r0, r4
   1b584:	f7ff fd2e 	bl	1afe4 <d_encoding.part.0>
   1b588:	68e3      	ldr	r3, [r4, #12]
   1b58a:	781a      	ldrb	r2, [r3, #0]
   1b58c:	4606      	mov	r6, r0
   1b58e:	2a45      	cmp	r2, #69	; 0x45
   1b590:	d11a      	bne.n	1b5c8 <d_expr_primary+0x70>
   1b592:	3301      	adds	r3, #1
   1b594:	60e3      	str	r3, [r4, #12]
   1b596:	4630      	mov	r0, r6
   1b598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b59a:	f7fe fc41 	bl	19e20 <d_type>
   1b59e:	4606      	mov	r6, r0
   1b5a0:	b190      	cbz	r0, 1b5c8 <d_expr_primary+0x70>
   1b5a2:	7803      	ldrb	r3, [r0, #0]
   1b5a4:	2b27      	cmp	r3, #39	; 0x27
   1b5a6:	d012      	beq.n	1b5ce <d_expr_primary+0x76>
   1b5a8:	68e2      	ldr	r2, [r4, #12]
   1b5aa:	7815      	ldrb	r5, [r2, #0]
   1b5ac:	2d6e      	cmp	r5, #110	; 0x6e
   1b5ae:	d023      	beq.n	1b5f8 <d_expr_primary+0xa0>
   1b5b0:	213d      	movs	r1, #61	; 0x3d
   1b5b2:	2d45      	cmp	r5, #69	; 0x45
   1b5b4:	d059      	beq.n	1b66a <d_expr_primary+0x112>
   1b5b6:	4613      	mov	r3, r2
   1b5b8:	e003      	b.n	1b5c2 <d_expr_primary+0x6a>
   1b5ba:	60e3      	str	r3, [r4, #12]
   1b5bc:	781d      	ldrb	r5, [r3, #0]
   1b5be:	2d45      	cmp	r5, #69	; 0x45
   1b5c0:	d02f      	beq.n	1b622 <d_expr_primary+0xca>
   1b5c2:	3301      	adds	r3, #1
   1b5c4:	2d00      	cmp	r5, #0
   1b5c6:	d1f8      	bne.n	1b5ba <d_expr_primary+0x62>
   1b5c8:	2600      	movs	r6, #0
   1b5ca:	4630      	mov	r0, r6
   1b5cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b5ce:	68c3      	ldr	r3, [r0, #12]
   1b5d0:	7c1a      	ldrb	r2, [r3, #16]
   1b5d2:	b11a      	cbz	r2, 1b5dc <d_expr_primary+0x84>
   1b5d4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1b5d6:	6859      	ldr	r1, [r3, #4]
   1b5d8:	1a52      	subs	r2, r2, r1
   1b5da:	62e2      	str	r2, [r4, #44]	; 0x2c
   1b5dc:	4925      	ldr	r1, [pc, #148]	; (1b674 <d_expr_primary+0x11c>)
   1b5de:	6818      	ldr	r0, [r3, #0]
   1b5e0:	f7fc feb2 	bl	18348 <strcmp>
   1b5e4:	2800      	cmp	r0, #0
   1b5e6:	d1df      	bne.n	1b5a8 <d_expr_primary+0x50>
   1b5e8:	68e2      	ldr	r2, [r4, #12]
   1b5ea:	7815      	ldrb	r5, [r2, #0]
   1b5ec:	2d45      	cmp	r5, #69	; 0x45
   1b5ee:	d03e      	beq.n	1b66e <d_expr_primary+0x116>
   1b5f0:	2d6e      	cmp	r5, #110	; 0x6e
   1b5f2:	d001      	beq.n	1b5f8 <d_expr_primary+0xa0>
   1b5f4:	213d      	movs	r1, #61	; 0x3d
   1b5f6:	e7de      	b.n	1b5b6 <d_expr_primary+0x5e>
   1b5f8:	1c53      	adds	r3, r2, #1
   1b5fa:	60e3      	str	r3, [r4, #12]
   1b5fc:	7855      	ldrb	r5, [r2, #1]
   1b5fe:	213e      	movs	r1, #62	; 0x3e
   1b600:	461a      	mov	r2, r3
   1b602:	e7d6      	b.n	1b5b2 <d_expr_primary+0x5a>
   1b604:	4620      	mov	r0, r4
   1b606:	f7ff fd6b 	bl	1b0e0 <d_special_name>
   1b60a:	68e3      	ldr	r3, [r4, #12]
   1b60c:	4606      	mov	r6, r0
   1b60e:	781a      	ldrb	r2, [r3, #0]
   1b610:	e7bd      	b.n	1b58e <d_expr_primary+0x36>
   1b612:	1c93      	adds	r3, r2, #2
   1b614:	60c3      	str	r3, [r0, #12]
   1b616:	7892      	ldrb	r2, [r2, #2]
   1b618:	2a5a      	cmp	r2, #90	; 0x5a
   1b61a:	bf18      	it	ne
   1b61c:	2600      	movne	r6, #0
   1b61e:	d1b6      	bne.n	1b58e <d_expr_primary+0x36>
   1b620:	e7a7      	b.n	1b572 <d_expr_primary+0x1a>
   1b622:	1a9d      	subs	r5, r3, r2
   1b624:	e9d4 0305 	ldrd	r0, r3, [r4, #20]
   1b628:	4298      	cmp	r0, r3
   1b62a:	da1c      	bge.n	1b666 <d_expr_primary+0x10e>
   1b62c:	f8d4 e010 	ldr.w	lr, [r4, #16]
   1b630:	eb00 0780 	add.w	r7, r0, r0, lsl #2
   1b634:	eb0e 0387 	add.w	r3, lr, r7, lsl #2
   1b638:	ea4f 0c87 	mov.w	ip, r7, lsl #2
   1b63c:	2700      	movs	r7, #0
   1b63e:	3001      	adds	r0, #1
   1b640:	42bd      	cmp	r5, r7
   1b642:	e9c3 7701 	strd	r7, r7, [r3, #4]
   1b646:	6160      	str	r0, [r4, #20]
   1b648:	dd0d      	ble.n	1b666 <d_expr_primary+0x10e>
   1b64a:	e9c3 7701 	strd	r7, r7, [r3, #4]
   1b64e:	f80e 700c 	strb.w	r7, [lr, ip]
   1b652:	e9c3 2503 	strd	r2, r5, [r3, #12]
   1b656:	4632      	mov	r2, r6
   1b658:	4620      	mov	r0, r4
   1b65a:	f7fd ff55 	bl	19508 <d_make_comp>
   1b65e:	68e3      	ldr	r3, [r4, #12]
   1b660:	4606      	mov	r6, r0
   1b662:	781a      	ldrb	r2, [r3, #0]
   1b664:	e793      	b.n	1b58e <d_expr_primary+0x36>
   1b666:	2300      	movs	r3, #0
   1b668:	e7f5      	b.n	1b656 <d_expr_primary+0xfe>
   1b66a:	2500      	movs	r5, #0
   1b66c:	e7da      	b.n	1b624 <d_expr_primary+0xcc>
   1b66e:	3201      	adds	r2, #1
   1b670:	60e2      	str	r2, [r4, #12]
   1b672:	e7aa      	b.n	1b5ca <d_expr_primary+0x72>
   1b674:	00043880 	.word	0x00043880

0001b678 <d_expression_1>:
   1b678:	68c2      	ldr	r2, [r0, #12]
   1b67a:	7813      	ldrb	r3, [r2, #0]
   1b67c:	2b4c      	cmp	r3, #76	; 0x4c
   1b67e:	f000 809c 	beq.w	1b7ba <d_expression_1+0x142>
   1b682:	2b54      	cmp	r3, #84	; 0x54
   1b684:	f000 809a 	beq.w	1b7bc <d_expression_1+0x144>
   1b688:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b68a:	2b73      	cmp	r3, #115	; 0x73
   1b68c:	b083      	sub	sp, #12
   1b68e:	4604      	mov	r4, r0
   1b690:	d065      	beq.n	1b75e <d_expression_1+0xe6>
   1b692:	2b66      	cmp	r3, #102	; 0x66
   1b694:	d033      	beq.n	1b6fe <d_expression_1+0x86>
   1b696:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1b69a:	2909      	cmp	r1, #9
   1b69c:	d80e      	bhi.n	1b6bc <d_expression_1+0x44>
   1b69e:	4620      	mov	r0, r4
   1b6a0:	f7ff f91a 	bl	1a8d8 <d_unqualified_name>
   1b6a4:	4605      	mov	r5, r0
   1b6a6:	2800      	cmp	r0, #0
   1b6a8:	f000 8083 	beq.w	1b7b2 <d_expression_1+0x13a>
   1b6ac:	68e3      	ldr	r3, [r4, #12]
   1b6ae:	781a      	ldrb	r2, [r3, #0]
   1b6b0:	2a49      	cmp	r2, #73	; 0x49
   1b6b2:	f000 8085 	beq.w	1b7c0 <d_expression_1+0x148>
   1b6b6:	4628      	mov	r0, r5
   1b6b8:	b003      	add	sp, #12
   1b6ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b6bc:	2b6f      	cmp	r3, #111	; 0x6f
   1b6be:	d05b      	beq.n	1b778 <d_expression_1+0x100>
   1b6c0:	2b69      	cmp	r3, #105	; 0x69
   1b6c2:	f040 808b 	bne.w	1b7dc <d_expression_1+0x164>
   1b6c6:	7853      	ldrb	r3, [r2, #1]
   1b6c8:	2b6c      	cmp	r3, #108	; 0x6c
   1b6ca:	f000 80a5 	beq.w	1b818 <d_expression_1+0x1a0>
   1b6ce:	4620      	mov	r0, r4
   1b6d0:	f7fe ffe6 	bl	1a6a0 <d_operator_name>
   1b6d4:	4605      	mov	r5, r0
   1b6d6:	2800      	cmp	r0, #0
   1b6d8:	d06b      	beq.n	1b7b2 <d_expression_1+0x13a>
   1b6da:	7803      	ldrb	r3, [r0, #0]
   1b6dc:	2b32      	cmp	r3, #50	; 0x32
   1b6de:	d051      	beq.n	1b784 <d_expression_1+0x10c>
   1b6e0:	2b34      	cmp	r3, #52	; 0x34
   1b6e2:	f000 818e 	beq.w	1ba02 <d_expression_1+0x38a>
   1b6e6:	d864      	bhi.n	1b7b2 <d_expression_1+0x13a>
   1b6e8:	2b33      	cmp	r3, #51	; 0x33
   1b6ea:	d162      	bne.n	1b7b2 <d_expression_1+0x13a>
   1b6ec:	68c3      	ldr	r3, [r0, #12]
   1b6ee:	2b03      	cmp	r3, #3
   1b6f0:	d85f      	bhi.n	1b7b2 <d_expression_1+0x13a>
   1b6f2:	e8df f013 	tbh	[pc, r3, lsl #1]
   1b6f6:	00d9      	.short	0x00d9
   1b6f8:	005e00dd 	.word	0x005e00dd
   1b6fc:	005e      	.short	0x005e
   1b6fe:	7853      	ldrb	r3, [r2, #1]
   1b700:	2b70      	cmp	r3, #112	; 0x70
   1b702:	d1e4      	bne.n	1b6ce <d_expression_1+0x56>
   1b704:	1c93      	adds	r3, r2, #2
   1b706:	60c3      	str	r3, [r0, #12]
   1b708:	7893      	ldrb	r3, [r2, #2]
   1b70a:	2b54      	cmp	r3, #84	; 0x54
   1b70c:	f000 8121 	beq.w	1b952 <d_expression_1+0x2da>
   1b710:	2b5f      	cmp	r3, #95	; 0x5f
   1b712:	f000 80a9 	beq.w	1b868 <d_expression_1+0x1f0>
   1b716:	2b6e      	cmp	r3, #110	; 0x6e
   1b718:	d04b      	beq.n	1b7b2 <d_expression_1+0x13a>
   1b71a:	f7fd ff3f 	bl	1959c <d_number>
   1b71e:	1c41      	adds	r1, r0, #1
   1b720:	d447      	bmi.n	1b7b2 <d_expression_1+0x13a>
   1b722:	68e3      	ldr	r3, [r4, #12]
   1b724:	781a      	ldrb	r2, [r3, #0]
   1b726:	2a5f      	cmp	r2, #95	; 0x5f
   1b728:	d143      	bne.n	1b7b2 <d_expression_1+0x13a>
   1b72a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1b72e:	3301      	adds	r3, #1
   1b730:	4291      	cmp	r1, r2
   1b732:	60e3      	str	r3, [r4, #12]
   1b734:	d03d      	beq.n	1b7b2 <d_expression_1+0x13a>
   1b736:	3002      	adds	r0, #2
   1b738:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1b73c:	4293      	cmp	r3, r2
   1b73e:	da38      	bge.n	1b7b2 <d_expression_1+0x13a>
   1b740:	6922      	ldr	r2, [r4, #16]
   1b742:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1b746:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   1b74a:	3301      	adds	r3, #1
   1b74c:	2600      	movs	r6, #0
   1b74e:	e9c5 6601 	strd	r6, r6, [r5, #4]
   1b752:	6163      	str	r3, [r4, #20]
   1b754:	2306      	movs	r3, #6
   1b756:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   1b75a:	60e8      	str	r0, [r5, #12]
   1b75c:	e7ab      	b.n	1b6b6 <d_expression_1+0x3e>
   1b75e:	7853      	ldrb	r3, [r2, #1]
   1b760:	2b72      	cmp	r3, #114	; 0x72
   1b762:	d049      	beq.n	1b7f8 <d_expression_1+0x180>
   1b764:	2b70      	cmp	r3, #112	; 0x70
   1b766:	d1b2      	bne.n	1b6ce <d_expression_1+0x56>
   1b768:	3202      	adds	r2, #2
   1b76a:	60c2      	str	r2, [r0, #12]
   1b76c:	f7ff ff84 	bl	1b678 <d_expression_1>
   1b770:	2300      	movs	r3, #0
   1b772:	4602      	mov	r2, r0
   1b774:	214b      	movs	r1, #75	; 0x4b
   1b776:	e02b      	b.n	1b7d0 <d_expression_1+0x158>
   1b778:	7853      	ldrb	r3, [r2, #1]
   1b77a:	2b6e      	cmp	r3, #110	; 0x6e
   1b77c:	d1a7      	bne.n	1b6ce <d_expression_1+0x56>
   1b77e:	3202      	adds	r2, #2
   1b780:	60c2      	str	r2, [r0, #12]
   1b782:	e78c      	b.n	1b69e <d_expression_1+0x26>
   1b784:	68c1      	ldr	r1, [r0, #12]
   1b786:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1b788:	688a      	ldr	r2, [r1, #8]
   1b78a:	680e      	ldr	r6, [r1, #0]
   1b78c:	3a02      	subs	r2, #2
   1b78e:	4413      	add	r3, r2
   1b790:	62e3      	str	r3, [r4, #44]	; 0x2c
   1b792:	7833      	ldrb	r3, [r6, #0]
   1b794:	2b73      	cmp	r3, #115	; 0x73
   1b796:	d150      	bne.n	1b83a <d_expression_1+0x1c2>
   1b798:	7872      	ldrb	r2, [r6, #1]
   1b79a:	2a74      	cmp	r2, #116	; 0x74
   1b79c:	d14d      	bne.n	1b83a <d_expression_1+0x1c2>
   1b79e:	78b2      	ldrb	r2, [r6, #2]
   1b7a0:	2a00      	cmp	r2, #0
   1b7a2:	d14a      	bne.n	1b83a <d_expression_1+0x1c2>
   1b7a4:	4620      	mov	r0, r4
   1b7a6:	f7fe fb3b 	bl	19e20 <d_type>
   1b7aa:	462a      	mov	r2, r5
   1b7ac:	4603      	mov	r3, r0
   1b7ae:	2137      	movs	r1, #55	; 0x37
   1b7b0:	e00e      	b.n	1b7d0 <d_expression_1+0x158>
   1b7b2:	2500      	movs	r5, #0
   1b7b4:	4628      	mov	r0, r5
   1b7b6:	b003      	add	sp, #12
   1b7b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b7ba:	e6cd      	b.n	1b558 <d_expr_primary>
   1b7bc:	f7fe b916 	b.w	199ec <d_template_param>
   1b7c0:	3301      	adds	r3, #1
   1b7c2:	60e3      	str	r3, [r4, #12]
   1b7c4:	4620      	mov	r0, r4
   1b7c6:	f000 fa6d 	bl	1bca4 <d_template_args_1>
   1b7ca:	462a      	mov	r2, r5
   1b7cc:	4603      	mov	r3, r0
   1b7ce:	2104      	movs	r1, #4
   1b7d0:	4620      	mov	r0, r4
   1b7d2:	b003      	add	sp, #12
   1b7d4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1b7d8:	f7fd be96 	b.w	19508 <d_make_comp>
   1b7dc:	2b74      	cmp	r3, #116	; 0x74
   1b7de:	f47f af76 	bne.w	1b6ce <d_expression_1+0x56>
   1b7e2:	7853      	ldrb	r3, [r2, #1]
   1b7e4:	2b6c      	cmp	r3, #108	; 0x6c
   1b7e6:	f47f af72 	bne.w	1b6ce <d_expression_1+0x56>
   1b7ea:	3202      	adds	r2, #2
   1b7ec:	60e2      	str	r2, [r4, #12]
   1b7ee:	f7fe fb17 	bl	19e20 <d_type>
   1b7f2:	68e2      	ldr	r2, [r4, #12]
   1b7f4:	4605      	mov	r5, r0
   1b7f6:	e012      	b.n	1b81e <d_expression_1+0x1a6>
   1b7f8:	3202      	adds	r2, #2
   1b7fa:	60c2      	str	r2, [r0, #12]
   1b7fc:	f7fe fb10 	bl	19e20 <d_type>
   1b800:	4605      	mov	r5, r0
   1b802:	4620      	mov	r0, r4
   1b804:	f7ff f868 	bl	1a8d8 <d_unqualified_name>
   1b808:	68e3      	ldr	r3, [r4, #12]
   1b80a:	7819      	ldrb	r1, [r3, #0]
   1b80c:	2949      	cmp	r1, #73	; 0x49
   1b80e:	d01b      	beq.n	1b848 <d_expression_1+0x1d0>
   1b810:	4603      	mov	r3, r0
   1b812:	462a      	mov	r2, r5
   1b814:	2101      	movs	r1, #1
   1b816:	e7db      	b.n	1b7d0 <d_expression_1+0x158>
   1b818:	3202      	adds	r2, #2
   1b81a:	60e2      	str	r2, [r4, #12]
   1b81c:	2500      	movs	r5, #0
   1b81e:	7811      	ldrb	r1, [r2, #0]
   1b820:	2900      	cmp	r1, #0
   1b822:	d0c6      	beq.n	1b7b2 <d_expression_1+0x13a>
   1b824:	7853      	ldrb	r3, [r2, #1]
   1b826:	2b00      	cmp	r3, #0
   1b828:	d0c3      	beq.n	1b7b2 <d_expression_1+0x13a>
   1b82a:	2145      	movs	r1, #69	; 0x45
   1b82c:	4620      	mov	r0, r4
   1b82e:	f000 f92b 	bl	1ba88 <d_exprlist>
   1b832:	462a      	mov	r2, r5
   1b834:	4603      	mov	r3, r0
   1b836:	2131      	movs	r1, #49	; 0x31
   1b838:	e7ca      	b.n	1b7d0 <d_expression_1+0x158>
   1b83a:	68cf      	ldr	r7, [r1, #12]
   1b83c:	2f03      	cmp	r7, #3
   1b83e:	d8b8      	bhi.n	1b7b2 <d_expression_1+0x13a>
   1b840:	e8df f007 	tbb	[pc, r7]
   1b844:	3b611632 	.word	0x3b611632
   1b848:	3301      	adds	r3, #1
   1b84a:	9001      	str	r0, [sp, #4]
   1b84c:	60e3      	str	r3, [r4, #12]
   1b84e:	4620      	mov	r0, r4
   1b850:	f000 fa28 	bl	1bca4 <d_template_args_1>
   1b854:	9a01      	ldr	r2, [sp, #4]
   1b856:	4603      	mov	r3, r0
   1b858:	2104      	movs	r1, #4
   1b85a:	4620      	mov	r0, r4
   1b85c:	f7fd fe54 	bl	19508 <d_make_comp>
   1b860:	462a      	mov	r2, r5
   1b862:	4603      	mov	r3, r0
   1b864:	2101      	movs	r1, #1
   1b866:	e7b3      	b.n	1b7d0 <d_expression_1+0x158>
   1b868:	3203      	adds	r2, #3
   1b86a:	60c2      	str	r2, [r0, #12]
   1b86c:	2001      	movs	r0, #1
   1b86e:	e763      	b.n	1b738 <d_expression_1+0xc0>
   1b870:	7832      	ldrb	r2, [r6, #0]
   1b872:	2a70      	cmp	r2, #112	; 0x70
   1b874:	d076      	beq.n	1b964 <d_expression_1+0x2ec>
   1b876:	2a6d      	cmp	r2, #109	; 0x6d
   1b878:	d074      	beq.n	1b964 <d_expression_1+0x2ec>
   1b87a:	2700      	movs	r7, #0
   1b87c:	2b73      	cmp	r3, #115	; 0x73
   1b87e:	d16c      	bne.n	1b95a <d_expression_1+0x2e2>
   1b880:	7873      	ldrb	r3, [r6, #1]
   1b882:	2b50      	cmp	r3, #80	; 0x50
   1b884:	d169      	bne.n	1b95a <d_expression_1+0x2e2>
   1b886:	78b3      	ldrb	r3, [r6, #2]
   1b888:	2b00      	cmp	r3, #0
   1b88a:	d166      	bne.n	1b95a <d_expression_1+0x2e2>
   1b88c:	4620      	mov	r0, r4
   1b88e:	f000 fa09 	bl	1bca4 <d_template_args_1>
   1b892:	4603      	mov	r3, r0
   1b894:	b12f      	cbz	r7, 1b8a2 <d_expression_1+0x22a>
   1b896:	461a      	mov	r2, r3
   1b898:	2139      	movs	r1, #57	; 0x39
   1b89a:	4620      	mov	r0, r4
   1b89c:	f7fd fe34 	bl	19508 <d_make_comp>
   1b8a0:	4603      	mov	r3, r0
   1b8a2:	462a      	mov	r2, r5
   1b8a4:	2137      	movs	r1, #55	; 0x37
   1b8a6:	e793      	b.n	1b7d0 <d_expression_1+0x158>
   1b8a8:	2300      	movs	r3, #0
   1b8aa:	462a      	mov	r2, r5
   1b8ac:	2136      	movs	r1, #54	; 0x36
   1b8ae:	e78f      	b.n	1b7d0 <d_expression_1+0x158>
   1b8b0:	4620      	mov	r0, r4
   1b8b2:	f7ff fee1 	bl	1b678 <d_expression_1>
   1b8b6:	4603      	mov	r3, r0
   1b8b8:	e7f3      	b.n	1b8a2 <d_expression_1+0x22a>
   1b8ba:	2b71      	cmp	r3, #113	; 0x71
   1b8bc:	d15e      	bne.n	1b97c <d_expression_1+0x304>
   1b8be:	7873      	ldrb	r3, [r6, #1]
   1b8c0:	2b75      	cmp	r3, #117	; 0x75
   1b8c2:	d15b      	bne.n	1b97c <d_expression_1+0x304>
   1b8c4:	78b3      	ldrb	r3, [r6, #2]
   1b8c6:	2b00      	cmp	r3, #0
   1b8c8:	d158      	bne.n	1b97c <d_expression_1+0x304>
   1b8ca:	4620      	mov	r0, r4
   1b8cc:	f7ff fed4 	bl	1b678 <d_expression_1>
   1b8d0:	4606      	mov	r6, r0
   1b8d2:	4620      	mov	r0, r4
   1b8d4:	f7ff fed0 	bl	1b678 <d_expression_1>
   1b8d8:	4607      	mov	r7, r0
   1b8da:	4620      	mov	r0, r4
   1b8dc:	f7ff fecc 	bl	1b678 <d_expression_1>
   1b8e0:	4603      	mov	r3, r0
   1b8e2:	2800      	cmp	r0, #0
   1b8e4:	f43f af65 	beq.w	1b7b2 <d_expression_1+0x13a>
   1b8e8:	463a      	mov	r2, r7
   1b8ea:	213c      	movs	r1, #60	; 0x3c
   1b8ec:	4620      	mov	r0, r4
   1b8ee:	f7fd fe0b 	bl	19508 <d_make_comp>
   1b8f2:	4632      	mov	r2, r6
   1b8f4:	4603      	mov	r3, r0
   1b8f6:	213b      	movs	r1, #59	; 0x3b
   1b8f8:	4620      	mov	r0, r4
   1b8fa:	f7fd fe05 	bl	19508 <d_make_comp>
   1b8fe:	462a      	mov	r2, r5
   1b900:	4603      	mov	r3, r0
   1b902:	213a      	movs	r1, #58	; 0x3a
   1b904:	e764      	b.n	1b7d0 <d_expression_1+0x158>
   1b906:	68eb      	ldr	r3, [r5, #12]
   1b908:	681b      	ldr	r3, [r3, #0]
   1b90a:	785a      	ldrb	r2, [r3, #1]
   1b90c:	2a63      	cmp	r2, #99	; 0x63
   1b90e:	f000 808c 	beq.w	1ba2a <d_expression_1+0x3b2>
   1b912:	7833      	ldrb	r3, [r6, #0]
   1b914:	2b66      	cmp	r3, #102	; 0x66
   1b916:	f000 8096 	beq.w	1ba46 <d_expression_1+0x3ce>
   1b91a:	4620      	mov	r0, r4
   1b91c:	f7ff feac 	bl	1b678 <d_expression_1>
   1b920:	4607      	mov	r7, r0
   1b922:	7833      	ldrb	r3, [r6, #0]
   1b924:	2b63      	cmp	r3, #99	; 0x63
   1b926:	d150      	bne.n	1b9ca <d_expression_1+0x352>
   1b928:	7872      	ldrb	r2, [r6, #1]
   1b92a:	2a6c      	cmp	r2, #108	; 0x6c
   1b92c:	d14d      	bne.n	1b9ca <d_expression_1+0x352>
   1b92e:	78b2      	ldrb	r2, [r6, #2]
   1b930:	2a00      	cmp	r2, #0
   1b932:	d14a      	bne.n	1b9ca <d_expression_1+0x352>
   1b934:	2145      	movs	r1, #69	; 0x45
   1b936:	4620      	mov	r0, r4
   1b938:	f000 f8a6 	bl	1ba88 <d_exprlist>
   1b93c:	4606      	mov	r6, r0
   1b93e:	2139      	movs	r1, #57	; 0x39
   1b940:	4633      	mov	r3, r6
   1b942:	463a      	mov	r2, r7
   1b944:	4620      	mov	r0, r4
   1b946:	f7fd fddf 	bl	19508 <d_make_comp>
   1b94a:	462a      	mov	r2, r5
   1b94c:	4603      	mov	r3, r0
   1b94e:	2138      	movs	r1, #56	; 0x38
   1b950:	e73e      	b.n	1b7d0 <d_expression_1+0x158>
   1b952:	3203      	adds	r2, #3
   1b954:	60c2      	str	r2, [r0, #12]
   1b956:	2000      	movs	r0, #0
   1b958:	e6ee      	b.n	1b738 <d_expression_1+0xc0>
   1b95a:	4620      	mov	r0, r4
   1b95c:	f7ff fe8c 	bl	1b678 <d_expression_1>
   1b960:	4603      	mov	r3, r0
   1b962:	e797      	b.n	1b894 <d_expression_1+0x21c>
   1b964:	7871      	ldrb	r1, [r6, #1]
   1b966:	4291      	cmp	r1, r2
   1b968:	d187      	bne.n	1b87a <d_expression_1+0x202>
   1b96a:	68e2      	ldr	r2, [r4, #12]
   1b96c:	7811      	ldrb	r1, [r2, #0]
   1b96e:	295f      	cmp	r1, #95	; 0x5f
   1b970:	d184      	bne.n	1b87c <d_expression_1+0x204>
   1b972:	3201      	adds	r2, #1
   1b974:	60e2      	str	r2, [r4, #12]
   1b976:	7833      	ldrb	r3, [r6, #0]
   1b978:	2700      	movs	r7, #0
   1b97a:	e77f      	b.n	1b87c <d_expression_1+0x204>
   1b97c:	7833      	ldrb	r3, [r6, #0]
   1b97e:	2b66      	cmp	r3, #102	; 0x66
   1b980:	d06d      	beq.n	1ba5e <d_expression_1+0x3e6>
   1b982:	2b6e      	cmp	r3, #110	; 0x6e
   1b984:	f47f af15 	bne.w	1b7b2 <d_expression_1+0x13a>
   1b988:	7873      	ldrb	r3, [r6, #1]
   1b98a:	2b77      	cmp	r3, #119	; 0x77
   1b98c:	d002      	beq.n	1b994 <d_expression_1+0x31c>
   1b98e:	2b61      	cmp	r3, #97	; 0x61
   1b990:	f47f af0f 	bne.w	1b7b2 <d_expression_1+0x13a>
   1b994:	215f      	movs	r1, #95	; 0x5f
   1b996:	4620      	mov	r0, r4
   1b998:	f000 f876 	bl	1ba88 <d_exprlist>
   1b99c:	4606      	mov	r6, r0
   1b99e:	4620      	mov	r0, r4
   1b9a0:	f7fe fa3e 	bl	19e20 <d_type>
   1b9a4:	68e3      	ldr	r3, [r4, #12]
   1b9a6:	781a      	ldrb	r2, [r3, #0]
   1b9a8:	2a45      	cmp	r2, #69	; 0x45
   1b9aa:	4607      	mov	r7, r0
   1b9ac:	d067      	beq.n	1ba7e <d_expression_1+0x406>
   1b9ae:	2a70      	cmp	r2, #112	; 0x70
   1b9b0:	d059      	beq.n	1ba66 <d_expression_1+0x3ee>
   1b9b2:	2a69      	cmp	r2, #105	; 0x69
   1b9b4:	f47f aefd 	bne.w	1b7b2 <d_expression_1+0x13a>
   1b9b8:	785b      	ldrb	r3, [r3, #1]
   1b9ba:	2b6c      	cmp	r3, #108	; 0x6c
   1b9bc:	f47f aef9 	bne.w	1b7b2 <d_expression_1+0x13a>
   1b9c0:	4620      	mov	r0, r4
   1b9c2:	f7ff fe59 	bl	1b678 <d_expression_1>
   1b9c6:	4603      	mov	r3, r0
   1b9c8:	e78e      	b.n	1b8e8 <d_expression_1+0x270>
   1b9ca:	2b64      	cmp	r3, #100	; 0x64
   1b9cc:	d126      	bne.n	1ba1c <d_expression_1+0x3a4>
   1b9ce:	7872      	ldrb	r2, [r6, #1]
   1b9d0:	2a74      	cmp	r2, #116	; 0x74
   1b9d2:	d123      	bne.n	1ba1c <d_expression_1+0x3a4>
   1b9d4:	78b2      	ldrb	r2, [r6, #2]
   1b9d6:	bb0a      	cbnz	r2, 1ba1c <d_expression_1+0x3a4>
   1b9d8:	4620      	mov	r0, r4
   1b9da:	f7fe ff7d 	bl	1a8d8 <d_unqualified_name>
   1b9de:	68e3      	ldr	r3, [r4, #12]
   1b9e0:	781a      	ldrb	r2, [r3, #0]
   1b9e2:	2a49      	cmp	r2, #73	; 0x49
   1b9e4:	4606      	mov	r6, r0
   1b9e6:	d1aa      	bne.n	1b93e <d_expression_1+0x2c6>
   1b9e8:	3301      	adds	r3, #1
   1b9ea:	60e3      	str	r3, [r4, #12]
   1b9ec:	4620      	mov	r0, r4
   1b9ee:	f000 f959 	bl	1bca4 <d_template_args_1>
   1b9f2:	4632      	mov	r2, r6
   1b9f4:	4603      	mov	r3, r0
   1b9f6:	2104      	movs	r1, #4
   1b9f8:	4620      	mov	r0, r4
   1b9fa:	f7fd fd85 	bl	19508 <d_make_comp>
   1b9fe:	4606      	mov	r6, r0
   1ba00:	e79d      	b.n	1b93e <d_expression_1+0x2c6>
   1ba02:	68e3      	ldr	r3, [r4, #12]
   1ba04:	781a      	ldrb	r2, [r3, #0]
   1ba06:	2a5f      	cmp	r2, #95	; 0x5f
   1ba08:	f47f af52 	bne.w	1b8b0 <d_expression_1+0x238>
   1ba0c:	3301      	adds	r3, #1
   1ba0e:	60e3      	str	r3, [r4, #12]
   1ba10:	2145      	movs	r1, #69	; 0x45
   1ba12:	4620      	mov	r0, r4
   1ba14:	f000 f838 	bl	1ba88 <d_exprlist>
   1ba18:	4603      	mov	r3, r0
   1ba1a:	e742      	b.n	1b8a2 <d_expression_1+0x22a>
   1ba1c:	2b70      	cmp	r3, #112	; 0x70
   1ba1e:	d017      	beq.n	1ba50 <d_expression_1+0x3d8>
   1ba20:	4620      	mov	r0, r4
   1ba22:	f7ff fe29 	bl	1b678 <d_expression_1>
   1ba26:	4606      	mov	r6, r0
   1ba28:	e789      	b.n	1b93e <d_expression_1+0x2c6>
   1ba2a:	781b      	ldrb	r3, [r3, #0]
   1ba2c:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
   1ba30:	2a01      	cmp	r2, #1
   1ba32:	d903      	bls.n	1ba3c <d_expression_1+0x3c4>
   1ba34:	3b72      	subs	r3, #114	; 0x72
   1ba36:	2b01      	cmp	r3, #1
   1ba38:	f63f af6b 	bhi.w	1b912 <d_expression_1+0x29a>
   1ba3c:	4620      	mov	r0, r4
   1ba3e:	f7fe f9ef 	bl	19e20 <d_type>
   1ba42:	4607      	mov	r7, r0
   1ba44:	e76d      	b.n	1b922 <d_expression_1+0x2aa>
   1ba46:	4620      	mov	r0, r4
   1ba48:	f7fe fe2a 	bl	1a6a0 <d_operator_name>
   1ba4c:	4607      	mov	r7, r0
   1ba4e:	e768      	b.n	1b922 <d_expression_1+0x2aa>
   1ba50:	7873      	ldrb	r3, [r6, #1]
   1ba52:	2b74      	cmp	r3, #116	; 0x74
   1ba54:	d1e4      	bne.n	1ba20 <d_expression_1+0x3a8>
   1ba56:	78b3      	ldrb	r3, [r6, #2]
   1ba58:	2b00      	cmp	r3, #0
   1ba5a:	d0bd      	beq.n	1b9d8 <d_expression_1+0x360>
   1ba5c:	e7e0      	b.n	1ba20 <d_expression_1+0x3a8>
   1ba5e:	4620      	mov	r0, r4
   1ba60:	f7fe fe1e 	bl	1a6a0 <d_operator_name>
   1ba64:	e734      	b.n	1b8d0 <d_expression_1+0x258>
   1ba66:	785a      	ldrb	r2, [r3, #1]
   1ba68:	2a69      	cmp	r2, #105	; 0x69
   1ba6a:	f47f aea2 	bne.w	1b7b2 <d_expression_1+0x13a>
   1ba6e:	3302      	adds	r3, #2
   1ba70:	60e3      	str	r3, [r4, #12]
   1ba72:	2145      	movs	r1, #69	; 0x45
   1ba74:	4620      	mov	r0, r4
   1ba76:	f000 f807 	bl	1ba88 <d_exprlist>
   1ba7a:	4603      	mov	r3, r0
   1ba7c:	e734      	b.n	1b8e8 <d_expression_1+0x270>
   1ba7e:	3301      	adds	r3, #1
   1ba80:	60e3      	str	r3, [r4, #12]
   1ba82:	2300      	movs	r3, #0
   1ba84:	e730      	b.n	1b8e8 <d_expression_1+0x270>
   1ba86:	bf00      	nop

0001ba88 <d_exprlist>:
   1ba88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ba8c:	68c2      	ldr	r2, [r0, #12]
   1ba8e:	460e      	mov	r6, r1
   1ba90:	7811      	ldrb	r1, [r2, #0]
   1ba92:	b082      	sub	sp, #8
   1ba94:	2300      	movs	r3, #0
   1ba96:	42b1      	cmp	r1, r6
   1ba98:	4604      	mov	r4, r0
   1ba9a:	9301      	str	r3, [sp, #4]
   1ba9c:	d024      	beq.n	1bae8 <d_exprlist+0x60>
   1ba9e:	ad01      	add	r5, sp, #4
   1baa0:	2701      	movs	r7, #1
   1baa2:	e009      	b.n	1bab8 <d_exprlist+0x30>
   1baa4:	f7fd fd30 	bl	19508 <d_make_comp>
   1baa8:	6028      	str	r0, [r5, #0]
   1baaa:	f100 0510 	add.w	r5, r0, #16
   1baae:	b188      	cbz	r0, 1bad4 <d_exprlist+0x4c>
   1bab0:	68e3      	ldr	r3, [r4, #12]
   1bab2:	781a      	ldrb	r2, [r3, #0]
   1bab4:	42b2      	cmp	r2, r6
   1bab6:	d011      	beq.n	1badc <d_exprlist+0x54>
   1bab8:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
   1babc:	6327      	str	r7, [r4, #48]	; 0x30
   1babe:	4620      	mov	r0, r4
   1bac0:	f7ff fdda 	bl	1b678 <d_expression_1>
   1bac4:	4602      	mov	r2, r0
   1bac6:	2300      	movs	r3, #0
   1bac8:	212e      	movs	r1, #46	; 0x2e
   1baca:	4620      	mov	r0, r4
   1bacc:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
   1bad0:	2a00      	cmp	r2, #0
   1bad2:	d1e7      	bne.n	1baa4 <d_exprlist+0x1c>
   1bad4:	2000      	movs	r0, #0
   1bad6:	b002      	add	sp, #8
   1bad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1badc:	9801      	ldr	r0, [sp, #4]
   1bade:	3301      	adds	r3, #1
   1bae0:	60e3      	str	r3, [r4, #12]
   1bae2:	b002      	add	sp, #8
   1bae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bae8:	3201      	adds	r2, #1
   1baea:	60c2      	str	r2, [r0, #12]
   1baec:	212e      	movs	r1, #46	; 0x2e
   1baee:	461a      	mov	r2, r3
   1baf0:	b002      	add	sp, #8
   1baf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1baf6:	f7fd bd07 	b.w	19508 <d_make_comp>
   1bafa:	bf00      	nop

0001bafc <d_cv_qualifiers>:
   1bafc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bb00:	460f      	mov	r7, r1
   1bb02:	68c1      	ldr	r1, [r0, #12]
   1bb04:	f1b2 0900 	subs.w	r9, r2, #0
   1bb08:	b083      	sub	sp, #12
   1bb0a:	780a      	ldrb	r2, [r1, #0]
   1bb0c:	4604      	mov	r4, r0
   1bb0e:	bf15      	itete	ne
   1bb10:	f04f 0a1e 	movne.w	sl, #30
   1bb14:	f04f 0a1b 	moveq.w	sl, #27
   1bb18:	f04f 081d 	movne.w	r8, #29
   1bb1c:	f04f 081a 	moveq.w	r8, #26
   1bb20:	bf14      	ite	ne
   1bb22:	261c      	movne	r6, #28
   1bb24:	2619      	moveq	r6, #25
   1bb26:	463d      	mov	r5, r7
   1bb28:	f04f 0b01 	mov.w	fp, #1
   1bb2c:	e01b      	b.n	1bb66 <d_cv_qualifiers+0x6a>
   1bb2e:	2a56      	cmp	r2, #86	; 0x56
   1bb30:	d033      	beq.n	1bb9a <d_cv_qualifiers+0x9e>
   1bb32:	2a4b      	cmp	r2, #75	; 0x4b
   1bb34:	d037      	beq.n	1bba6 <d_cv_qualifiers+0xaa>
   1bb36:	784b      	ldrb	r3, [r1, #1]
   1bb38:	b353      	cbz	r3, 1bb90 <d_cv_qualifiers+0x94>
   1bb3a:	1c8b      	adds	r3, r1, #2
   1bb3c:	60e3      	str	r3, [r4, #12]
   1bb3e:	7849      	ldrb	r1, [r1, #1]
   1bb40:	2978      	cmp	r1, #120	; 0x78
   1bb42:	d050      	beq.n	1bbe6 <d_cv_qualifiers+0xea>
   1bb44:	296f      	cmp	r1, #111	; 0x6f
   1bb46:	d134      	bne.n	1bbb2 <d_cv_qualifiers+0xb6>
   1bb48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1bb4a:	3309      	adds	r3, #9
   1bb4c:	62e3      	str	r3, [r4, #44]	; 0x2c
   1bb4e:	214f      	movs	r1, #79	; 0x4f
   1bb50:	2300      	movs	r3, #0
   1bb52:	2200      	movs	r2, #0
   1bb54:	4620      	mov	r0, r4
   1bb56:	f7fd fcd7 	bl	19508 <d_make_comp>
   1bb5a:	6028      	str	r0, [r5, #0]
   1bb5c:	b1c0      	cbz	r0, 1bb90 <d_cv_qualifiers+0x94>
   1bb5e:	68e1      	ldr	r1, [r4, #12]
   1bb60:	780a      	ldrb	r2, [r1, #0]
   1bb62:	f100 050c 	add.w	r5, r0, #12
   1bb66:	4608      	mov	r0, r1
   1bb68:	f7fd fe6e 	bl	19848 <next_is_type_qual.isra.0>
   1bb6c:	2800      	cmp	r0, #0
   1bb6e:	d040      	beq.n	1bbf2 <d_cv_qualifiers+0xf6>
   1bb70:	1c4b      	adds	r3, r1, #1
   1bb72:	2a72      	cmp	r2, #114	; 0x72
   1bb74:	60e3      	str	r3, [r4, #12]
   1bb76:	d1da      	bne.n	1bb2e <d_cv_qualifiers+0x32>
   1bb78:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1bb7a:	3309      	adds	r3, #9
   1bb7c:	62e3      	str	r3, [r4, #44]	; 0x2c
   1bb7e:	4631      	mov	r1, r6
   1bb80:	2300      	movs	r3, #0
   1bb82:	2200      	movs	r2, #0
   1bb84:	4620      	mov	r0, r4
   1bb86:	f7fd fcbf 	bl	19508 <d_make_comp>
   1bb8a:	6028      	str	r0, [r5, #0]
   1bb8c:	2800      	cmp	r0, #0
   1bb8e:	d1e6      	bne.n	1bb5e <d_cv_qualifiers+0x62>
   1bb90:	2500      	movs	r5, #0
   1bb92:	4628      	mov	r0, r5
   1bb94:	b003      	add	sp, #12
   1bb96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bb9a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1bb9c:	3309      	adds	r3, #9
   1bb9e:	62e3      	str	r3, [r4, #44]	; 0x2c
   1bba0:	4641      	mov	r1, r8
   1bba2:	2300      	movs	r3, #0
   1bba4:	e7d5      	b.n	1bb52 <d_cv_qualifiers+0x56>
   1bba6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1bba8:	3306      	adds	r3, #6
   1bbaa:	62e3      	str	r3, [r4, #44]	; 0x2c
   1bbac:	4651      	mov	r1, sl
   1bbae:	2300      	movs	r3, #0
   1bbb0:	e7cf      	b.n	1bb52 <d_cv_qualifiers+0x56>
   1bbb2:	294f      	cmp	r1, #79	; 0x4f
   1bbb4:	d139      	bne.n	1bc2a <d_cv_qualifiers+0x12e>
   1bbb6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1bbb8:	9101      	str	r1, [sp, #4]
   1bbba:	3309      	adds	r3, #9
   1bbbc:	62e3      	str	r3, [r4, #44]	; 0x2c
   1bbbe:	4620      	mov	r0, r4
   1bbc0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1bbc2:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
   1bbc6:	9300      	str	r3, [sp, #0]
   1bbc8:	f7ff fd56 	bl	1b678 <d_expression_1>
   1bbcc:	9b00      	ldr	r3, [sp, #0]
   1bbce:	6323      	str	r3, [r4, #48]	; 0x30
   1bbd0:	9901      	ldr	r1, [sp, #4]
   1bbd2:	4603      	mov	r3, r0
   1bbd4:	2800      	cmp	r0, #0
   1bbd6:	d0db      	beq.n	1bb90 <d_cv_qualifiers+0x94>
   1bbd8:	68e2      	ldr	r2, [r4, #12]
   1bbda:	7810      	ldrb	r0, [r2, #0]
   1bbdc:	2845      	cmp	r0, #69	; 0x45
   1bbde:	d1d7      	bne.n	1bb90 <d_cv_qualifiers+0x94>
   1bbe0:	3201      	adds	r2, #1
   1bbe2:	60e2      	str	r2, [r4, #12]
   1bbe4:	e7b5      	b.n	1bb52 <d_cv_qualifiers+0x56>
   1bbe6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1bbe8:	3311      	adds	r3, #17
   1bbea:	62e3      	str	r3, [r4, #44]	; 0x2c
   1bbec:	214d      	movs	r1, #77	; 0x4d
   1bbee:	2300      	movs	r3, #0
   1bbf0:	e7af      	b.n	1bb52 <d_cv_qualifiers+0x56>
   1bbf2:	f1b9 0f00 	cmp.w	r9, #0
   1bbf6:	d1cc      	bne.n	1bb92 <d_cv_qualifiers+0x96>
   1bbf8:	2a46      	cmp	r2, #70	; 0x46
   1bbfa:	d1ca      	bne.n	1bb92 <d_cv_qualifiers+0x96>
   1bbfc:	42bd      	cmp	r5, r7
   1bbfe:	d0c8      	beq.n	1bb92 <d_cv_qualifiers+0x96>
   1bc00:	201d      	movs	r0, #29
   1bc02:	211e      	movs	r1, #30
   1bc04:	221c      	movs	r2, #28
   1bc06:	e004      	b.n	1bc12 <d_cv_qualifiers+0x116>
   1bc08:	2b19      	cmp	r3, #25
   1bc0a:	d00c      	beq.n	1bc26 <d_cv_qualifiers+0x12a>
   1bc0c:	370c      	adds	r7, #12
   1bc0e:	42bd      	cmp	r5, r7
   1bc10:	d0bf      	beq.n	1bb92 <d_cv_qualifiers+0x96>
   1bc12:	683f      	ldr	r7, [r7, #0]
   1bc14:	783b      	ldrb	r3, [r7, #0]
   1bc16:	2b1a      	cmp	r3, #26
   1bc18:	d003      	beq.n	1bc22 <d_cv_qualifiers+0x126>
   1bc1a:	2b1b      	cmp	r3, #27
   1bc1c:	d1f4      	bne.n	1bc08 <d_cv_qualifiers+0x10c>
   1bc1e:	7039      	strb	r1, [r7, #0]
   1bc20:	e7f4      	b.n	1bc0c <d_cv_qualifiers+0x110>
   1bc22:	7038      	strb	r0, [r7, #0]
   1bc24:	e7f2      	b.n	1bc0c <d_cv_qualifiers+0x110>
   1bc26:	703a      	strb	r2, [r7, #0]
   1bc28:	e7f0      	b.n	1bc0c <d_cv_qualifiers+0x110>
   1bc2a:	2977      	cmp	r1, #119	; 0x77
   1bc2c:	d1b0      	bne.n	1bb90 <d_cv_qualifiers+0x94>
   1bc2e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1bc30:	3306      	adds	r3, #6
   1bc32:	62e3      	str	r3, [r4, #44]	; 0x2c
   1bc34:	4620      	mov	r0, r4
   1bc36:	f7fe fdb7 	bl	1a7a8 <d_parmlist>
   1bc3a:	4603      	mov	r3, r0
   1bc3c:	2800      	cmp	r0, #0
   1bc3e:	d0a7      	beq.n	1bb90 <d_cv_qualifiers+0x94>
   1bc40:	68e2      	ldr	r2, [r4, #12]
   1bc42:	7811      	ldrb	r1, [r2, #0]
   1bc44:	2945      	cmp	r1, #69	; 0x45
   1bc46:	d1a3      	bne.n	1bb90 <d_cv_qualifiers+0x94>
   1bc48:	3201      	adds	r2, #1
   1bc4a:	60e2      	str	r2, [r4, #12]
   1bc4c:	2150      	movs	r1, #80	; 0x50
   1bc4e:	e780      	b.n	1bb52 <d_cv_qualifiers+0x56>

0001bc50 <d_template_arg>:
   1bc50:	b538      	push	{r3, r4, r5, lr}
   1bc52:	68c2      	ldr	r2, [r0, #12]
   1bc54:	7813      	ldrb	r3, [r2, #0]
   1bc56:	2b4c      	cmp	r3, #76	; 0x4c
   1bc58:	d01f      	beq.n	1bc9a <d_template_arg+0x4a>
   1bc5a:	4604      	mov	r4, r0
   1bc5c:	d807      	bhi.n	1bc6e <d_template_arg+0x1e>
   1bc5e:	3b49      	subs	r3, #73	; 0x49
   1bc60:	2b01      	cmp	r3, #1
   1bc62:	d815      	bhi.n	1bc90 <d_template_arg+0x40>
   1bc64:	3201      	adds	r2, #1
   1bc66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1bc6a:	60c2      	str	r2, [r0, #12]
   1bc6c:	e01a      	b.n	1bca4 <d_template_args_1>
   1bc6e:	2b58      	cmp	r3, #88	; 0x58
   1bc70:	d10e      	bne.n	1bc90 <d_template_arg+0x40>
   1bc72:	3201      	adds	r2, #1
   1bc74:	2301      	movs	r3, #1
   1bc76:	6b05      	ldr	r5, [r0, #48]	; 0x30
   1bc78:	60c2      	str	r2, [r0, #12]
   1bc7a:	6303      	str	r3, [r0, #48]	; 0x30
   1bc7c:	f7ff fcfc 	bl	1b678 <d_expression_1>
   1bc80:	68e3      	ldr	r3, [r4, #12]
   1bc82:	6325      	str	r5, [r4, #48]	; 0x30
   1bc84:	781a      	ldrb	r2, [r3, #0]
   1bc86:	2a45      	cmp	r2, #69	; 0x45
   1bc88:	d10a      	bne.n	1bca0 <d_template_arg+0x50>
   1bc8a:	3301      	adds	r3, #1
   1bc8c:	60e3      	str	r3, [r4, #12]
   1bc8e:	bd38      	pop	{r3, r4, r5, pc}
   1bc90:	4620      	mov	r0, r4
   1bc92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1bc96:	f7fe b8c3 	b.w	19e20 <d_type>
   1bc9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1bc9e:	e45b      	b.n	1b558 <d_expr_primary>
   1bca0:	2000      	movs	r0, #0
   1bca2:	bd38      	pop	{r3, r4, r5, pc}

0001bca4 <d_template_args_1>:
   1bca4:	b570      	push	{r4, r5, r6, lr}
   1bca6:	68c3      	ldr	r3, [r0, #12]
   1bca8:	6a86      	ldr	r6, [r0, #40]	; 0x28
   1bcaa:	781a      	ldrb	r2, [r3, #0]
   1bcac:	2a45      	cmp	r2, #69	; 0x45
   1bcae:	b082      	sub	sp, #8
   1bcb0:	4604      	mov	r4, r0
   1bcb2:	d01f      	beq.n	1bcf4 <d_template_args_1+0x50>
   1bcb4:	2300      	movs	r3, #0
   1bcb6:	9301      	str	r3, [sp, #4]
   1bcb8:	ad01      	add	r5, sp, #4
   1bcba:	e009      	b.n	1bcd0 <d_template_args_1+0x2c>
   1bcbc:	f7fd fc24 	bl	19508 <d_make_comp>
   1bcc0:	6028      	str	r0, [r5, #0]
   1bcc2:	f100 0510 	add.w	r5, r0, #16
   1bcc6:	b160      	cbz	r0, 1bce2 <d_template_args_1+0x3e>
   1bcc8:	68e3      	ldr	r3, [r4, #12]
   1bcca:	781a      	ldrb	r2, [r3, #0]
   1bccc:	2a45      	cmp	r2, #69	; 0x45
   1bcce:	d00b      	beq.n	1bce8 <d_template_args_1+0x44>
   1bcd0:	4620      	mov	r0, r4
   1bcd2:	f7ff ffbd 	bl	1bc50 <d_template_arg>
   1bcd6:	4602      	mov	r2, r0
   1bcd8:	2300      	movs	r3, #0
   1bcda:	212f      	movs	r1, #47	; 0x2f
   1bcdc:	4620      	mov	r0, r4
   1bcde:	2a00      	cmp	r2, #0
   1bce0:	d1ec      	bne.n	1bcbc <d_template_args_1+0x18>
   1bce2:	2000      	movs	r0, #0
   1bce4:	b002      	add	sp, #8
   1bce6:	bd70      	pop	{r4, r5, r6, pc}
   1bce8:	9801      	ldr	r0, [sp, #4]
   1bcea:	62a6      	str	r6, [r4, #40]	; 0x28
   1bcec:	3301      	adds	r3, #1
   1bcee:	60e3      	str	r3, [r4, #12]
   1bcf0:	b002      	add	sp, #8
   1bcf2:	bd70      	pop	{r4, r5, r6, pc}
   1bcf4:	1c5a      	adds	r2, r3, #1
   1bcf6:	2300      	movs	r3, #0
   1bcf8:	60c2      	str	r2, [r0, #12]
   1bcfa:	212f      	movs	r1, #47	; 0x2f
   1bcfc:	461a      	mov	r2, r3
   1bcfe:	b002      	add	sp, #8
   1bd00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1bd04:	f7fd bc00 	b.w	19508 <d_make_comp>

0001bd08 <d_print_comp_inner>:
   1bd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bd0c:	4604      	mov	r4, r0
   1bd0e:	b093      	sub	sp, #76	; 0x4c
   1bd10:	2a00      	cmp	r2, #0
   1bd12:	d05c      	beq.n	1bdce <d_print_comp_inner+0xc6>
   1bd14:	f8d0 5118 	ldr.w	r5, [r0, #280]	; 0x118
   1bd18:	2d00      	cmp	r5, #0
   1bd1a:	d15b      	bne.n	1bdd4 <d_print_comp_inner+0xcc>
   1bd1c:	7813      	ldrb	r3, [r2, #0]
   1bd1e:	4616      	mov	r6, r2
   1bd20:	2b50      	cmp	r3, #80	; 0x50
   1bd22:	d854      	bhi.n	1bdce <d_print_comp_inner+0xc6>
   1bd24:	e8df f013 	tbh	[pc, r3, lsl #1]
   1bd28:	011209bc 	.word	0x011209bc
   1bd2c:	05550112 	.word	0x05550112
   1bd30:	0840086c 	.word	0x0840086c
   1bd34:	008c07e7 	.word	0x008c07e7
   1bd38:	08cd0080 	.word	0x08cd0080
   1bd3c:	08f408a6 	.word	0x08f408a6
   1bd40:	069505e7 	.word	0x069505e7
   1bd44:	0635066e 	.word	0x0635066e
   1bd48:	025a060e 	.word	0x025a060e
   1bd4c:	020c0233 	.word	0x020c0233
   1bd50:	094201e5 	.word	0x094201e5
   1bd54:	0969091b 	.word	0x0969091b
   1bd58:	008e075b 	.word	0x008e075b
   1bd5c:	008e008e 	.word	0x008e008e
   1bd60:	00590059 	.word	0x00590059
   1bd64:	00590059 	.word	0x00590059
   1bd68:	00590059 	.word	0x00590059
   1bd6c:	00ba0059 	.word	0x00ba0059
   1bd70:	005900ba 	.word	0x005900ba
   1bd74:	09900059 	.word	0x09900059
   1bd78:	081a0078 	.word	0x081a0078
   1bd7c:	00a406ff 	.word	0x00a406ff
   1bd80:	00a406bc 	.word	0x00a406bc
   1bd84:	00dd00dd 	.word	0x00dd00dd
   1bd88:	048e04b3 	.word	0x048e04b3
   1bd8c:	042c0453 	.word	0x042c0453
   1bd90:	04050053 	.word	0x04050053
   1bd94:	03cf03fd 	.word	0x03cf03fd
   1bd98:	00530786 	.word	0x00530786
   1bd9c:	005305b3 	.word	0x005305b3
   1bda0:	013d0053 	.word	0x013d0053
   1bda4:	04e0013d 	.word	0x04e0013d
   1bda8:	01ad04da 	.word	0x01ad04da
   1bdac:	052e017d 	.word	0x052e017d
   1bdb0:	03a80507 	.word	0x03a80507
   1bdb4:	00530381 	.word	0x00530381
   1bdb8:	0333035a 	.word	0x0333035a
   1bdbc:	02ac030c 	.word	0x02ac030c
   1bdc0:	00590281 	.word	0x00590281
   1bdc4:	005901ba 	.word	0x005901ba
   1bdc8:	0059      	.short	0x0059
   1bdca:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1bdce:	2301      	movs	r3, #1
   1bdd0:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   1bdd4:	b013      	add	sp, #76	; 0x4c
   1bdd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bdda:	2200      	movs	r2, #0
   1bddc:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1bde0:	9302      	str	r3, [sp, #8]
   1bde2:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   1bde6:	9305      	str	r3, [sp, #20]
   1bde8:	ab02      	add	r3, sp, #8
   1bdea:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1bdee:	2300      	movs	r3, #0
   1bdf0:	9603      	str	r6, [sp, #12]
   1bdf2:	9304      	str	r3, [sp, #16]
   1bdf4:	2a00      	cmp	r2, #0
   1bdf6:	d072      	beq.n	1bede <d_print_comp_inner+0x1d6>
   1bdf8:	2111      	movs	r1, #17
   1bdfa:	4620      	mov	r0, r4
   1bdfc:	f002 f818 	bl	1de30 <d_print_comp>
   1be00:	9b04      	ldr	r3, [sp, #16]
   1be02:	2b00      	cmp	r3, #0
   1be04:	f001 832b 	beq.w	1d45e <d_print_comp_inner+0x1756>
   1be08:	9b02      	ldr	r3, [sp, #8]
   1be0a:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1be0e:	2d00      	cmp	r5, #0
   1be10:	d0e0      	beq.n	1bdd4 <d_print_comp_inner+0xcc>
   1be12:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
   1be16:	e7dd      	b.n	1bdd4 <d_print_comp_inner+0xcc>
   1be18:	68f2      	ldr	r2, [r6, #12]
   1be1a:	2111      	movs	r1, #17
   1be1c:	4620      	mov	r0, r4
   1be1e:	b013      	add	sp, #76	; 0x4c
   1be20:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be24:	f002 b804 	b.w	1de30 <d_print_comp>
   1be28:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1be2c:	29ff      	cmp	r1, #255	; 0xff
   1be2e:	f001 8590 	beq.w	1d952 <d_print_comp_inner+0x1c4a>
   1be32:	1c4a      	adds	r2, r1, #1
   1be34:	237e      	movs	r3, #126	; 0x7e
   1be36:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1be3a:	5463      	strb	r3, [r4, r1]
   1be3c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1be40:	6932      	ldr	r2, [r6, #16]
   1be42:	e7ea      	b.n	1be1a <d_print_comp_inner+0x112>
   1be44:	f8d0 e114 	ldr.w	lr, [r0, #276]	; 0x114
   1be48:	f1be 0f00 	cmp.w	lr, #0
   1be4c:	d03c      	beq.n	1bec8 <d_print_comp_inner+0x1c0>
   1be4e:	4672      	mov	r2, lr
   1be50:	6891      	ldr	r1, [r2, #8]
   1be52:	b949      	cbnz	r1, 1be68 <d_print_comp_inner+0x160>
   1be54:	6850      	ldr	r0, [r2, #4]
   1be56:	7800      	ldrb	r0, [r0, #0]
   1be58:	f1a0 0c19 	sub.w	ip, r0, #25
   1be5c:	f1bc 0f02 	cmp.w	ip, #2
   1be60:	f201 8529 	bhi.w	1d8b6 <d_print_comp_inner+0x1bae>
   1be64:	4283      	cmp	r3, r0
   1be66:	d0d7      	beq.n	1be18 <d_print_comp_inner+0x110>
   1be68:	6812      	ldr	r2, [r2, #0]
   1be6a:	2a00      	cmp	r2, #0
   1be6c:	d1f0      	bne.n	1be50 <d_print_comp_inner+0x148>
   1be6e:	e02b      	b.n	1bec8 <d_print_comp_inner+0x1c0>
   1be70:	e9d0 3144 	ldrd	r3, r1, [r0, #272]	; 0x110
   1be74:	aa02      	add	r2, sp, #8
   1be76:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
   1be7a:	2200      	movs	r2, #0
   1be7c:	e9cd 1602 	strd	r1, r6, [sp, #8]
   1be80:	9204      	str	r2, [sp, #16]
   1be82:	2111      	movs	r1, #17
   1be84:	6932      	ldr	r2, [r6, #16]
   1be86:	9305      	str	r3, [sp, #20]
   1be88:	f001 ffd2 	bl	1de30 <d_print_comp>
   1be8c:	9b04      	ldr	r3, [sp, #16]
   1be8e:	2b00      	cmp	r3, #0
   1be90:	f001 84f3 	beq.w	1d87a <d_print_comp_inner+0x1b72>
   1be94:	9b02      	ldr	r3, [sp, #8]
   1be96:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1be9a:	e79b      	b.n	1bdd4 <d_print_comp_inner+0xcc>
   1be9c:	f8d0 5120 	ldr.w	r5, [r0, #288]	; 0x120
   1bea0:	68f0      	ldr	r0, [r6, #12]
   1bea2:	7803      	ldrb	r3, [r0, #0]
   1bea4:	2d00      	cmp	r5, #0
   1bea6:	f041 8354 	bne.w	1d552 <d_print_comp_inner+0x184a>
   1beaa:	2b05      	cmp	r3, #5
   1beac:	f001 85fe 	beq.w	1daac <d_print_comp_inner+0x1da4>
   1beb0:	2b23      	cmp	r3, #35	; 0x23
   1beb2:	f001 832b 	beq.w	1d50c <d_print_comp_inner+0x1804>
   1beb6:	7832      	ldrb	r2, [r6, #0]
   1beb8:	429a      	cmp	r2, r3
   1beba:	f001 8327 	beq.w	1d50c <d_print_comp_inner+0x1804>
   1bebe:	2b24      	cmp	r3, #36	; 0x24
   1bec0:	f001 8643 	beq.w	1db4a <d_print_comp_inner+0x1e42>
   1bec4:	f8d4 e114 	ldr.w	lr, [r4, #276]	; 0x114
   1bec8:	f8cd e008 	str.w	lr, [sp, #8]
   1becc:	ab02      	add	r3, sp, #8
   1bece:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1bed2:	2300      	movs	r3, #0
   1bed4:	e9cd 6303 	strd	r6, r3, [sp, #12]
   1bed8:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   1bedc:	9305      	str	r3, [sp, #20]
   1bede:	68f2      	ldr	r2, [r6, #12]
   1bee0:	e78a      	b.n	1bdf8 <d_print_comp_inner+0xf0>
   1bee2:	68f2      	ldr	r2, [r6, #12]
   1bee4:	b112      	cbz	r2, 1beec <d_print_comp_inner+0x1e4>
   1bee6:	2111      	movs	r1, #17
   1bee8:	f001 ffa2 	bl	1de30 <d_print_comp>
   1beec:	6933      	ldr	r3, [r6, #16]
   1beee:	2b00      	cmp	r3, #0
   1bef0:	f43f af70 	beq.w	1bdd4 <d_print_comp_inner+0xcc>
   1bef4:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
   1bef8:	2dfd      	cmp	r5, #253	; 0xfd
   1befa:	f201 84df 	bhi.w	1d8bc <d_print_comp_inner+0x1bb4>
   1befe:	f8df 83b0 	ldr.w	r8, [pc, #944]	; 1c2b0 <d_print_comp_inner+0x5a8>
   1bf02:	272c      	movs	r7, #44	; 0x2c
   1bf04:	f108 0a01 	add.w	sl, r8, #1
   1bf08:	f04f 0900 	mov.w	r9, #0
   1bf0c:	4629      	mov	r1, r5
   1bf0e:	e00b      	b.n	1bf28 <d_print_comp_inner+0x220>
   1bf10:	460b      	mov	r3, r1
   1bf12:	3101      	adds	r1, #1
   1bf14:	45d0      	cmp	r8, sl
   1bf16:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1bf1a:	54e7      	strb	r7, [r4, r3]
   1bf1c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1bf20:	f001 82a4 	beq.w	1d46c <d_print_comp_inner+0x1764>
   1bf24:	f818 7f01 	ldrb.w	r7, [r8, #1]!
   1bf28:	29ff      	cmp	r1, #255	; 0xff
   1bf2a:	d1f1      	bne.n	1bf10 <d_print_comp_inner+0x208>
   1bf2c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1bf30:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1bf34:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1bf38:	4620      	mov	r0, r4
   1bf3a:	4798      	blx	r3
   1bf3c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1bf40:	3301      	adds	r3, #1
   1bf42:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1bf46:	2101      	movs	r1, #1
   1bf48:	2300      	movs	r3, #0
   1bf4a:	e7e3      	b.n	1bf14 <d_print_comp_inner+0x20c>
   1bf4c:	4dd0      	ldr	r5, [pc, #832]	; (1c290 <d_print_comp_inner+0x588>)
   1bf4e:	68f2      	ldr	r2, [r6, #12]
   1bf50:	2111      	movs	r1, #17
   1bf52:	f001 ff6d 	bl	1de30 <d_print_comp>
   1bf56:	f105 0801 	add.w	r8, r5, #1
   1bf5a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1bf5e:	273a      	movs	r7, #58	; 0x3a
   1bf60:	f04f 0900 	mov.w	r9, #0
   1bf64:	e00b      	b.n	1bf7e <d_print_comp_inner+0x276>
   1bf66:	460b      	mov	r3, r1
   1bf68:	3101      	adds	r1, #1
   1bf6a:	45a8      	cmp	r8, r5
   1bf6c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1bf70:	54e7      	strb	r7, [r4, r3]
   1bf72:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1bf76:	f001 80e7 	beq.w	1d148 <d_print_comp_inner+0x1440>
   1bf7a:	f815 7f01 	ldrb.w	r7, [r5, #1]!
   1bf7e:	29ff      	cmp	r1, #255	; 0xff
   1bf80:	d1f1      	bne.n	1bf66 <d_print_comp_inner+0x25e>
   1bf82:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1bf86:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1bf8a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1bf8e:	4620      	mov	r0, r4
   1bf90:	4798      	blx	r3
   1bf92:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1bf96:	3301      	adds	r3, #1
   1bf98:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1bf9c:	2101      	movs	r1, #1
   1bf9e:	2300      	movs	r3, #0
   1bfa0:	e7e3      	b.n	1bf6a <d_print_comp_inner+0x262>
   1bfa2:	68f2      	ldr	r2, [r6, #12]
   1bfa4:	7811      	ldrb	r1, [r2, #0]
   1bfa6:	2927      	cmp	r1, #39	; 0x27
   1bfa8:	f041 83a4 	bne.w	1d6f4 <d_print_comp_inner+0x19ec>
   1bfac:	68d1      	ldr	r1, [r2, #12]
   1bfae:	7c0d      	ldrb	r5, [r1, #16]
   1bfb0:	2d06      	cmp	r5, #6
   1bfb2:	f201 82b0 	bhi.w	1d516 <d_print_comp_inner+0x180e>
   1bfb6:	2d00      	cmp	r5, #0
   1bfb8:	f041 8556 	bne.w	1da68 <d_print_comp_inner+0x1d60>
   1bfbc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1bfc0:	29ff      	cmp	r1, #255	; 0xff
   1bfc2:	f001 8519 	beq.w	1d9f8 <d_print_comp_inner+0x1cf0>
   1bfc6:	1c4b      	adds	r3, r1, #1
   1bfc8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1bfcc:	2328      	movs	r3, #40	; 0x28
   1bfce:	5463      	strb	r3, [r4, r1]
   1bfd0:	4620      	mov	r0, r4
   1bfd2:	2111      	movs	r1, #17
   1bfd4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1bfd8:	f001 ff2a 	bl	1de30 <d_print_comp>
   1bfdc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1bfe0:	29ff      	cmp	r1, #255	; 0xff
   1bfe2:	f001 84f9 	beq.w	1d9d8 <d_print_comp_inner+0x1cd0>
   1bfe6:	1c4b      	adds	r3, r1, #1
   1bfe8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1bfec:	2329      	movs	r3, #41	; 0x29
   1bfee:	5463      	strb	r3, [r4, r1]
   1bff0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1bff4:	7833      	ldrb	r3, [r6, #0]
   1bff6:	2b3e      	cmp	r3, #62	; 0x3e
   1bff8:	f001 84e8 	beq.w	1d9cc <d_print_comp_inner+0x1cc4>
   1bffc:	2d08      	cmp	r5, #8
   1bffe:	f47f af1f 	bne.w	1be40 <d_print_comp_inner+0x138>
   1c002:	215b      	movs	r1, #91	; 0x5b
   1c004:	4620      	mov	r0, r4
   1c006:	f7fd fc37 	bl	19878 <d_append_char>
   1c00a:	2111      	movs	r1, #17
   1c00c:	6932      	ldr	r2, [r6, #16]
   1c00e:	4620      	mov	r0, r4
   1c010:	f001 ff0e 	bl	1de30 <d_print_comp>
   1c014:	215d      	movs	r1, #93	; 0x5d
   1c016:	4620      	mov	r0, r4
   1c018:	b013      	add	sp, #76	; 0x4c
   1c01a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c01e:	f7fd bc2b 	b.w	19878 <d_append_char>
   1c022:	68f2      	ldr	r2, [r6, #12]
   1c024:	499b      	ldr	r1, [pc, #620]	; (1c294 <d_print_comp_inner+0x58c>)
   1c026:	a802      	add	r0, sp, #8
   1c028:	f01c f958 	bl	382dc <sprintf>
   1c02c:	a802      	add	r0, sp, #8
   1c02e:	f7fc fb47 	bl	186c0 <strlen>
   1c032:	2800      	cmp	r0, #0
   1c034:	f43f aece 	beq.w	1bdd4 <d_print_comp_inner+0xcc>
   1c038:	ad02      	add	r5, sp, #8
   1c03a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1c03e:	182f      	adds	r7, r5, r0
   1c040:	f04f 0800 	mov.w	r8, #0
   1c044:	e009      	b.n	1c05a <d_print_comp_inner+0x352>
   1c046:	460b      	mov	r3, r1
   1c048:	3101      	adds	r1, #1
   1c04a:	42af      	cmp	r7, r5
   1c04c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1c050:	54e6      	strb	r6, [r4, r3]
   1c052:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1c056:	f43f aebd 	beq.w	1bdd4 <d_print_comp_inner+0xcc>
   1c05a:	29ff      	cmp	r1, #255	; 0xff
   1c05c:	f815 6b01 	ldrb.w	r6, [r5], #1
   1c060:	d1f1      	bne.n	1c046 <d_print_comp_inner+0x33e>
   1c062:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1c066:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1c06a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1c06e:	4620      	mov	r0, r4
   1c070:	4798      	blx	r3
   1c072:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1c076:	3301      	adds	r3, #1
   1c078:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1c07c:	2101      	movs	r1, #1
   1c07e:	2300      	movs	r3, #0
   1c080:	e7e3      	b.n	1c04a <d_print_comp_inner+0x342>
   1c082:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1c086:	7b35      	ldrb	r5, [r6, #12]
   1c088:	29ff      	cmp	r1, #255	; 0xff
   1c08a:	f001 8428 	beq.w	1d8de <d_print_comp_inner+0x1bd6>
   1c08e:	1c4b      	adds	r3, r1, #1
   1c090:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1c094:	5465      	strb	r5, [r4, r1]
   1c096:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1c09a:	e69b      	b.n	1bdd4 <d_print_comp_inner+0xcc>
   1c09c:	4f7e      	ldr	r7, [pc, #504]	; (1c298 <d_print_comp_inner+0x590>)
   1c09e:	68f2      	ldr	r2, [r6, #12]
   1c0a0:	2111      	movs	r1, #17
   1c0a2:	f001 fec5 	bl	1de30 <d_print_comp>
   1c0a6:	f107 0907 	add.w	r9, r7, #7
   1c0aa:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1c0ae:	2520      	movs	r5, #32
   1c0b0:	f04f 0800 	mov.w	r8, #0
   1c0b4:	e00b      	b.n	1c0ce <d_print_comp_inner+0x3c6>
   1c0b6:	460b      	mov	r3, r1
   1c0b8:	3101      	adds	r1, #1
   1c0ba:	45b9      	cmp	r9, r7
   1c0bc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1c0c0:	54e5      	strb	r5, [r4, r3]
   1c0c2:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1c0c6:	f001 8025 	beq.w	1d114 <d_print_comp_inner+0x140c>
   1c0ca:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1c0ce:	29ff      	cmp	r1, #255	; 0xff
   1c0d0:	d1f1      	bne.n	1c0b6 <d_print_comp_inner+0x3ae>
   1c0d2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1c0d6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1c0da:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1c0de:	4620      	mov	r0, r4
   1c0e0:	4798      	blx	r3
   1c0e2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1c0e6:	3301      	adds	r3, #1
   1c0e8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1c0ec:	2101      	movs	r1, #1
   1c0ee:	2300      	movs	r3, #0
   1c0f0:	e7e3      	b.n	1c0ba <d_print_comp_inner+0x3b2>
   1c0f2:	4f6a      	ldr	r7, [pc, #424]	; (1c29c <d_print_comp_inner+0x594>)
   1c0f4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1c0f8:	f107 0915 	add.w	r9, r7, #21
   1c0fc:	2554      	movs	r5, #84	; 0x54
   1c0fe:	f04f 0800 	mov.w	r8, #0
   1c102:	e00b      	b.n	1c11c <d_print_comp_inner+0x414>
   1c104:	460b      	mov	r3, r1
   1c106:	3101      	adds	r1, #1
   1c108:	454f      	cmp	r7, r9
   1c10a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1c10e:	54e5      	strb	r5, [r4, r3]
   1c110:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1c114:	f43f ae80 	beq.w	1be18 <d_print_comp_inner+0x110>
   1c118:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1c11c:	29ff      	cmp	r1, #255	; 0xff
   1c11e:	d1f1      	bne.n	1c104 <d_print_comp_inner+0x3fc>
   1c120:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1c124:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1c128:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1c12c:	4620      	mov	r0, r4
   1c12e:	4798      	blx	r3
   1c130:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1c134:	3301      	adds	r3, #1
   1c136:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1c13a:	2101      	movs	r1, #1
   1c13c:	2300      	movs	r3, #0
   1c13e:	e7e3      	b.n	1c108 <d_print_comp_inner+0x400>
   1c140:	4f57      	ldr	r7, [pc, #348]	; (1c2a0 <d_print_comp_inner+0x598>)
   1c142:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1c146:	f107 0912 	add.w	r9, r7, #18
   1c14a:	2567      	movs	r5, #103	; 0x67
   1c14c:	f04f 0800 	mov.w	r8, #0
   1c150:	e00b      	b.n	1c16a <d_print_comp_inner+0x462>
   1c152:	460b      	mov	r3, r1
   1c154:	3101      	adds	r1, #1
   1c156:	454f      	cmp	r7, r9
   1c158:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1c15c:	54e5      	strb	r5, [r4, r3]
   1c15e:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1c162:	f43f ae59 	beq.w	1be18 <d_print_comp_inner+0x110>
   1c166:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1c16a:	29ff      	cmp	r1, #255	; 0xff
   1c16c:	d1f1      	bne.n	1c152 <d_print_comp_inner+0x44a>
   1c16e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1c172:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1c176:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1c17a:	4620      	mov	r0, r4
   1c17c:	4798      	blx	r3
   1c17e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1c182:	3301      	adds	r3, #1
   1c184:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1c188:	2101      	movs	r1, #1
   1c18a:	2300      	movs	r3, #0
   1c18c:	e7e3      	b.n	1c156 <d_print_comp_inner+0x44e>
   1c18e:	4f45      	ldr	r7, [pc, #276]	; (1c2a4 <d_print_comp_inner+0x59c>)
   1c190:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1c194:	f107 090e 	add.w	r9, r7, #14
   1c198:	256a      	movs	r5, #106	; 0x6a
   1c19a:	f04f 0800 	mov.w	r8, #0
   1c19e:	e00b      	b.n	1c1b8 <d_print_comp_inner+0x4b0>
   1c1a0:	460b      	mov	r3, r1
   1c1a2:	3101      	adds	r1, #1
   1c1a4:	45b9      	cmp	r9, r7
   1c1a6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1c1aa:	54e5      	strb	r5, [r4, r3]
   1c1ac:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1c1b0:	f43f ae32 	beq.w	1be18 <d_print_comp_inner+0x110>
   1c1b4:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1c1b8:	29ff      	cmp	r1, #255	; 0xff
   1c1ba:	d1f1      	bne.n	1c1a0 <d_print_comp_inner+0x498>
   1c1bc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1c1c0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1c1c4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1c1c8:	4620      	mov	r0, r4
   1c1ca:	4798      	blx	r3
   1c1cc:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1c1d0:	3301      	adds	r3, #1
   1c1d2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1c1d6:	2101      	movs	r1, #1
   1c1d8:	2300      	movs	r3, #0
   1c1da:	e7e3      	b.n	1c1a4 <d_print_comp_inner+0x49c>
   1c1dc:	4f32      	ldr	r7, [pc, #200]	; (1c2a8 <d_print_comp_inner+0x5a0>)
   1c1de:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1c1e2:	f107 0919 	add.w	r9, r7, #25
   1c1e6:	2563      	movs	r5, #99	; 0x63
   1c1e8:	f04f 0800 	mov.w	r8, #0
   1c1ec:	e00b      	b.n	1c206 <d_print_comp_inner+0x4fe>
   1c1ee:	460b      	mov	r3, r1
   1c1f0:	3101      	adds	r1, #1
   1c1f2:	454f      	cmp	r7, r9
   1c1f4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1c1f8:	54e5      	strb	r5, [r4, r3]
   1c1fa:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1c1fe:	f43f ae0b 	beq.w	1be18 <d_print_comp_inner+0x110>
   1c202:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1c206:	29ff      	cmp	r1, #255	; 0xff
   1c208:	d1f1      	bne.n	1c1ee <d_print_comp_inner+0x4e6>
   1c20a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1c20e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1c212:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1c216:	4620      	mov	r0, r4
   1c218:	4798      	blx	r3
   1c21a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1c21e:	3301      	adds	r3, #1
   1c220:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1c224:	2101      	movs	r1, #1
   1c226:	2300      	movs	r3, #0
   1c228:	e7e3      	b.n	1c1f2 <d_print_comp_inner+0x4ea>
   1c22a:	4f20      	ldr	r7, [pc, #128]	; (1c2ac <d_print_comp_inner+0x5a4>)
   1c22c:	68f2      	ldr	r2, [r6, #12]
   1c22e:	2111      	movs	r1, #17
   1c230:	f001 fdfe 	bl	1de30 <d_print_comp>
   1c234:	f107 0904 	add.w	r9, r7, #4
   1c238:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1c23c:	255b      	movs	r5, #91	; 0x5b
   1c23e:	f04f 0800 	mov.w	r8, #0
   1c242:	e00b      	b.n	1c25c <d_print_comp_inner+0x554>
   1c244:	460b      	mov	r3, r1
   1c246:	3101      	adds	r1, #1
   1c248:	45b9      	cmp	r9, r7
   1c24a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1c24e:	54e5      	strb	r5, [r4, r3]
   1c250:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1c254:	f000 875e 	beq.w	1d114 <d_print_comp_inner+0x140c>
   1c258:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1c25c:	29ff      	cmp	r1, #255	; 0xff
   1c25e:	d1f1      	bne.n	1c244 <d_print_comp_inner+0x53c>
   1c260:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1c264:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1c268:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1c26c:	4620      	mov	r0, r4
   1c26e:	4798      	blx	r3
   1c270:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1c274:	3301      	adds	r3, #1
   1c276:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1c27a:	2101      	movs	r1, #1
   1c27c:	2300      	movs	r3, #0
   1c27e:	e7e3      	b.n	1c248 <d_print_comp_inner+0x540>
   1c280:	68f1      	ldr	r1, [r6, #12]
   1c282:	f7fd fb37 	bl	198f4 <d_find_pack>
   1c286:	f04f 0800 	mov.w	r8, #0
   1c28a:	b9a0      	cbnz	r0, 1c2b6 <d_print_comp_inner+0x5ae>
   1c28c:	f001 bcda 	b.w	1dc44 <d_print_comp_inner+0x1f3c>
   1c290:	0004389c 	.word	0x0004389c
   1c294:	0004382c 	.word	0x0004382c
   1c298:	00043b18 	.word	0x00043b18
   1c29c:	000439a8 	.word	0x000439a8
   1c2a0:	00043994 	.word	0x00043994
   1c2a4:	00043984 	.word	0x00043984
   1c2a8:	00043968 	.word	0x00043968
   1c2ac:	00043894 	.word	0x00043894
   1c2b0:	00043a3c 	.word	0x00043a3c
   1c2b4:	4690      	mov	r8, r2
   1c2b6:	7803      	ldrb	r3, [r0, #0]
   1c2b8:	2b2f      	cmp	r3, #47	; 0x2f
   1c2ba:	f108 0201 	add.w	r2, r8, #1
   1c2be:	f041 8117 	bne.w	1d4f0 <d_print_comp_inner+0x17e8>
   1c2c2:	68c3      	ldr	r3, [r0, #12]
   1c2c4:	2b00      	cmp	r3, #0
   1c2c6:	f001 8113 	beq.w	1d4f0 <d_print_comp_inner+0x17e8>
   1c2ca:	6900      	ldr	r0, [r0, #16]
   1c2cc:	2800      	cmp	r0, #0
   1c2ce:	d1f1      	bne.n	1c2b4 <d_print_comp_inner+0x5ac>
   1c2d0:	46c2      	mov	sl, r8
   1c2d2:	f8d6 900c 	ldr.w	r9, [r6, #12]
   1c2d6:	4690      	mov	r8, r2
   1c2d8:	e003      	b.n	1c2e2 <d_print_comp_inner+0x5da>
   1c2da:	3501      	adds	r5, #1
   1c2dc:	4545      	cmp	r5, r8
   1c2de:	f6bf ad79 	bge.w	1bdd4 <d_print_comp_inner+0xcc>
   1c2e2:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
   1c2e6:	464a      	mov	r2, r9
   1c2e8:	2111      	movs	r1, #17
   1c2ea:	4620      	mov	r0, r4
   1c2ec:	f001 fda0 	bl	1de30 <d_print_comp>
   1c2f0:	45aa      	cmp	sl, r5
   1c2f2:	ddf2      	ble.n	1c2da <d_print_comp_inner+0x5d2>
   1c2f4:	4fcb      	ldr	r7, [pc, #812]	; (1c624 <d_print_comp_inner+0x91c>)
   1c2f6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1c2fa:	f107 0b01 	add.w	fp, r7, #1
   1c2fe:	262c      	movs	r6, #44	; 0x2c
   1c300:	e00a      	b.n	1c318 <d_print_comp_inner+0x610>
   1c302:	460b      	mov	r3, r1
   1c304:	3101      	adds	r1, #1
   1c306:	45bb      	cmp	fp, r7
   1c308:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1c30c:	54e6      	strb	r6, [r4, r3]
   1c30e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1c312:	d0e2      	beq.n	1c2da <d_print_comp_inner+0x5d2>
   1c314:	f817 6f01 	ldrb.w	r6, [r7, #1]!
   1c318:	29ff      	cmp	r1, #255	; 0xff
   1c31a:	d1f2      	bne.n	1c302 <d_print_comp_inner+0x5fa>
   1c31c:	f04f 0200 	mov.w	r2, #0
   1c320:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1c324:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   1c328:	4620      	mov	r0, r4
   1c32a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1c32e:	4798      	blx	r3
   1c330:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1c334:	3301      	adds	r3, #1
   1c336:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1c33a:	2101      	movs	r1, #1
   1c33c:	2300      	movs	r3, #0
   1c33e:	e7e2      	b.n	1c306 <d_print_comp_inner+0x5fe>
   1c340:	4fb9      	ldr	r7, [pc, #740]	; (1c628 <d_print_comp_inner+0x920>)
   1c342:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1c346:	f107 0919 	add.w	r9, r7, #25
   1c34a:	256e      	movs	r5, #110	; 0x6e
   1c34c:	f04f 0800 	mov.w	r8, #0
   1c350:	e00b      	b.n	1c36a <d_print_comp_inner+0x662>
   1c352:	460b      	mov	r3, r1
   1c354:	3101      	adds	r1, #1
   1c356:	45b9      	cmp	r9, r7
   1c358:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1c35c:	54e5      	strb	r5, [r4, r3]
   1c35e:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1c362:	f43f ad59 	beq.w	1be18 <d_print_comp_inner+0x110>
   1c366:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1c36a:	29ff      	cmp	r1, #255	; 0xff
   1c36c:	d1f1      	bne.n	1c352 <d_print_comp_inner+0x64a>
   1c36e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1c372:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1c376:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1c37a:	4620      	mov	r0, r4
   1c37c:	4798      	blx	r3
   1c37e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1c382:	3301      	adds	r3, #1
   1c384:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1c388:	2101      	movs	r1, #1
   1c38a:	2300      	movs	r3, #0
   1c38c:	e7e3      	b.n	1c356 <d_print_comp_inner+0x64e>
   1c38e:	4fa7      	ldr	r7, [pc, #668]	; (1c62c <d_print_comp_inner+0x924>)
   1c390:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1c394:	f107 0915 	add.w	r9, r7, #21
   1c398:	2574      	movs	r5, #116	; 0x74
   1c39a:	f04f 0800 	mov.w	r8, #0
   1c39e:	e00b      	b.n	1c3b8 <d_print_comp_inner+0x6b0>
   1c3a0:	460b      	mov	r3, r1
   1c3a2:	3101      	adds	r1, #1
   1c3a4:	45b9      	cmp	r9, r7
   1c3a6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1c3aa:	54e5      	strb	r5, [r4, r3]
   1c3ac:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1c3b0:	f43f ad32 	beq.w	1be18 <d_print_comp_inner+0x110>
   1c3b4:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1c3b8:	29ff      	cmp	r1, #255	; 0xff
   1c3ba:	d1f1      	bne.n	1c3a0 <d_print_comp_inner+0x698>
   1c3bc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1c3c0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1c3c4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1c3c8:	4620      	mov	r0, r4
   1c3ca:	4798      	blx	r3
   1c3cc:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1c3d0:	3301      	adds	r3, #1
   1c3d2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1c3d6:	2101      	movs	r1, #1
   1c3d8:	2300      	movs	r3, #0
   1c3da:	e7e3      	b.n	1c3a4 <d_print_comp_inner+0x69c>
   1c3dc:	4f94      	ldr	r7, [pc, #592]	; (1c630 <d_print_comp_inner+0x928>)
   1c3de:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1c3e2:	f107 090d 	add.w	r9, r7, #13
   1c3e6:	257b      	movs	r5, #123	; 0x7b
   1c3e8:	f04f 0800 	mov.w	r8, #0
   1c3ec:	e00b      	b.n	1c406 <d_print_comp_inner+0x6fe>
   1c3ee:	460b      	mov	r3, r1
   1c3f0:	3101      	adds	r1, #1
   1c3f2:	454f      	cmp	r7, r9
   1c3f4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1c3f8:	54e5      	strb	r5, [r4, r3]
   1c3fa:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1c3fe:	f000 8738 	beq.w	1d272 <d_print_comp_inner+0x156a>
   1c402:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1c406:	29ff      	cmp	r1, #255	; 0xff
   1c408:	d1f1      	bne.n	1c3ee <d_print_comp_inner+0x6e6>
   1c40a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1c40e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1c412:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1c416:	4620      	mov	r0, r4
   1c418:	4798      	blx	r3
   1c41a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1c41e:	3301      	adds	r3, #1
   1c420:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1c424:	2101      	movs	r1, #1
   1c426:	2300      	movs	r3, #0
   1c428:	e7e3      	b.n	1c3f2 <d_print_comp_inner+0x6ea>
   1c42a:	4f82      	ldr	r7, [pc, #520]	; (1c634 <d_print_comp_inner+0x92c>)
   1c42c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1c430:	f107 0907 	add.w	r9, r7, #7
   1c434:	257b      	movs	r5, #123	; 0x7b
   1c436:	f04f 0800 	mov.w	r8, #0
   1c43a:	e00b      	b.n	1c454 <d_print_comp_inner+0x74c>
   1c43c:	460b      	mov	r3, r1
   1c43e:	3101      	adds	r1, #1
   1c440:	45b9      	cmp	r9, r7
   1c442:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1c446:	54e5      	strb	r5, [r4, r3]
   1c448:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1c44c:	f000 8754 	beq.w	1d2f8 <d_print_comp_inner+0x15f0>
   1c450:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1c454:	29ff      	cmp	r1, #255	; 0xff
   1c456:	d1f1      	bne.n	1c43c <d_print_comp_inner+0x734>
   1c458:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1c45c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1c460:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1c464:	4620      	mov	r0, r4
   1c466:	4798      	blx	r3
   1c468:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1c46c:	3301      	adds	r3, #1
   1c46e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1c472:	2101      	movs	r1, #1
   1c474:	2300      	movs	r3, #0
   1c476:	e7e3      	b.n	1c440 <d_print_comp_inner+0x738>
   1c478:	4f6f      	ldr	r7, [pc, #444]	; (1c638 <d_print_comp_inner+0x930>)
   1c47a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1c47e:	f107 091b 	add.w	r9, r7, #27
   1c482:	2567      	movs	r5, #103	; 0x67
   1c484:	f04f 0800 	mov.w	r8, #0
   1c488:	e00b      	b.n	1c4a2 <d_print_comp_inner+0x79a>
   1c48a:	460b      	mov	r3, r1
   1c48c:	3101      	adds	r1, #1
   1c48e:	45b9      	cmp	r9, r7
   1c490:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1c494:	54e5      	strb	r5, [r4, r3]
   1c496:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1c49a:	f43f acbd 	beq.w	1be18 <d_print_comp_inner+0x110>
   1c49e:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1c4a2:	29ff      	cmp	r1, #255	; 0xff
   1c4a4:	d1f1      	bne.n	1c48a <d_print_comp_inner+0x782>
   1c4a6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1c4aa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1c4ae:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1c4b2:	4620      	mov	r0, r4
   1c4b4:	4798      	blx	r3
   1c4b6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1c4ba:	3301      	adds	r3, #1
   1c4bc:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1c4c0:	2101      	movs	r1, #1
   1c4c2:	2300      	movs	r3, #0
   1c4c4:	e7e3      	b.n	1c48e <d_print_comp_inner+0x786>
   1c4c6:	e9d6 7503 	ldrd	r7, r5, [r6, #12]
   1c4ca:	783b      	ldrb	r3, [r7, #0]
   1c4cc:	2b32      	cmp	r3, #50	; 0x32
   1c4ce:	f001 8127 	beq.w	1d720 <d_print_comp_inner+0x1a18>
   1c4d2:	2b34      	cmp	r3, #52	; 0x34
   1c4d4:	f041 84a0 	bne.w	1de18 <d_print_comp_inner+0x2110>
   1c4d8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1c4dc:	29ff      	cmp	r1, #255	; 0xff
   1c4de:	f001 842b 	beq.w	1dd38 <d_print_comp_inner+0x2030>
   1c4e2:	1c4b      	adds	r3, r1, #1
   1c4e4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1c4e8:	2328      	movs	r3, #40	; 0x28
   1c4ea:	5463      	strb	r3, [r4, r1]
   1c4ec:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1c4f0:	2111      	movs	r1, #17
   1c4f2:	68fa      	ldr	r2, [r7, #12]
   1c4f4:	4620      	mov	r0, r4
   1c4f6:	f001 fc9b 	bl	1de30 <d_print_comp>
   1c4fa:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1c4fe:	29ff      	cmp	r1, #255	; 0xff
   1c500:	f001 8409 	beq.w	1dd16 <d_print_comp_inner+0x200e>
   1c504:	2329      	movs	r3, #41	; 0x29
   1c506:	1c4a      	adds	r2, r1, #1
   1c508:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1c50c:	5463      	strb	r3, [r4, r1]
   1c50e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1c512:	462a      	mov	r2, r5
   1c514:	2111      	movs	r1, #17
   1c516:	4620      	mov	r0, r4
   1c518:	b013      	add	sp, #76	; 0x4c
   1c51a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c51e:	f002 bd59 	b.w	1efd4 <d_print_subexpr>
   1c522:	68f2      	ldr	r2, [r6, #12]
   1c524:	2111      	movs	r1, #17
   1c526:	4620      	mov	r0, r4
   1c528:	b013      	add	sp, #76	; 0x4c
   1c52a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c52e:	f002 bb69 	b.w	1ec04 <d_print_expr_op>
   1c532:	4f42      	ldr	r7, [pc, #264]	; (1c63c <d_print_comp_inner+0x934>)
   1c534:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1c538:	f107 0908 	add.w	r9, r7, #8
   1c53c:	256f      	movs	r5, #111	; 0x6f
   1c53e:	f04f 0800 	mov.w	r8, #0
   1c542:	e00b      	b.n	1c55c <d_print_comp_inner+0x854>
   1c544:	460b      	mov	r3, r1
   1c546:	3101      	adds	r1, #1
   1c548:	454f      	cmp	r7, r9
   1c54a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1c54e:	54e5      	strb	r5, [r4, r3]
   1c550:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1c554:	f000 8705 	beq.w	1d362 <d_print_comp_inner+0x165a>
   1c558:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1c55c:	29ff      	cmp	r1, #255	; 0xff
   1c55e:	d1f1      	bne.n	1c544 <d_print_comp_inner+0x83c>
   1c560:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1c564:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1c568:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1c56c:	4620      	mov	r0, r4
   1c56e:	4798      	blx	r3
   1c570:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1c574:	3301      	adds	r3, #1
   1c576:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1c57a:	2101      	movs	r1, #1
   1c57c:	2300      	movs	r3, #0
   1c57e:	e7e3      	b.n	1c548 <d_print_comp_inner+0x840>
   1c580:	4f2e      	ldr	r7, [pc, #184]	; (1c63c <d_print_comp_inner+0x934>)
   1c582:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1c586:	f107 0908 	add.w	r9, r7, #8
   1c58a:	256f      	movs	r5, #111	; 0x6f
   1c58c:	f04f 0800 	mov.w	r8, #0
   1c590:	e00b      	b.n	1c5aa <d_print_comp_inner+0x8a2>
   1c592:	460b      	mov	r3, r1
   1c594:	3101      	adds	r1, #1
   1c596:	454f      	cmp	r7, r9
   1c598:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1c59c:	54e5      	strb	r5, [r4, r3]
   1c59e:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1c5a2:	f43f ac4d 	beq.w	1be40 <d_print_comp_inner+0x138>
   1c5a6:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1c5aa:	29ff      	cmp	r1, #255	; 0xff
   1c5ac:	d1f1      	bne.n	1c592 <d_print_comp_inner+0x88a>
   1c5ae:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1c5b2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1c5b6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1c5ba:	4620      	mov	r0, r4
   1c5bc:	4798      	blx	r3
   1c5be:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1c5c2:	3301      	adds	r3, #1
   1c5c4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1c5c8:	2101      	movs	r1, #1
   1c5ca:	2300      	movs	r3, #0
   1c5cc:	e7e3      	b.n	1c596 <d_print_comp_inner+0x88e>
   1c5ce:	68f7      	ldr	r7, [r6, #12]
   1c5d0:	4e1b      	ldr	r6, [pc, #108]	; (1c640 <d_print_comp_inner+0x938>)
   1c5d2:	f8d7 8008 	ldr.w	r8, [r7, #8]
   1c5d6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1c5da:	f106 0a07 	add.w	sl, r6, #7
   1c5de:	256f      	movs	r5, #111	; 0x6f
   1c5e0:	f04f 0900 	mov.w	r9, #0
   1c5e4:	e00b      	b.n	1c5fe <d_print_comp_inner+0x8f6>
   1c5e6:	460b      	mov	r3, r1
   1c5e8:	3101      	adds	r1, #1
   1c5ea:	45b2      	cmp	sl, r6
   1c5ec:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1c5f0:	54e5      	strb	r5, [r4, r3]
   1c5f2:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1c5f6:	f000 86eb 	beq.w	1d3d0 <d_print_comp_inner+0x16c8>
   1c5fa:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   1c5fe:	29ff      	cmp	r1, #255	; 0xff
   1c600:	d1f1      	bne.n	1c5e6 <d_print_comp_inner+0x8de>
   1c602:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1c606:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1c60a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1c60e:	4620      	mov	r0, r4
   1c610:	4798      	blx	r3
   1c612:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1c616:	3301      	adds	r3, #1
   1c618:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1c61c:	2101      	movs	r1, #1
   1c61e:	2300      	movs	r3, #0
   1c620:	e7e3      	b.n	1c5ea <d_print_comp_inner+0x8e2>
   1c622:	bf00      	nop
   1c624:	00043a3c 	.word	0x00043a3c
   1c628:	00043a08 	.word	0x00043a08
   1c62c:	00043a0c 	.word	0x00043a0c
   1c630:	00043b08 	.word	0x00043b08
   1c634:	00043af8 	.word	0x00043af8
   1c638:	00043ad8 	.word	0x00043ad8
   1c63c:	00043a4c 	.word	0x00043a4c
   1c640:	00043a40 	.word	0x00043a40
   1c644:	e9d6 2503 	ldrd	r2, r5, [r6, #12]
   1c648:	b112      	cbz	r2, 1c650 <d_print_comp_inner+0x948>
   1c64a:	2111      	movs	r1, #17
   1c64c:	f001 fbf0 	bl	1de30 <d_print_comp>
   1c650:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1c654:	29ff      	cmp	r1, #255	; 0xff
   1c656:	f001 8162 	beq.w	1d91e <d_print_comp_inner+0x1c16>
   1c65a:	1c4a      	adds	r2, r1, #1
   1c65c:	237b      	movs	r3, #123	; 0x7b
   1c65e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1c662:	4620      	mov	r0, r4
   1c664:	5463      	strb	r3, [r4, r1]
   1c666:	462a      	mov	r2, r5
   1c668:	2111      	movs	r1, #17
   1c66a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1c66e:	f001 fbdf 	bl	1de30 <d_print_comp>
   1c672:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1c676:	29ff      	cmp	r1, #255	; 0xff
   1c678:	f000 862e 	beq.w	1d2d8 <d_print_comp_inner+0x15d0>
   1c67c:	1c4a      	adds	r2, r1, #1
   1c67e:	237d      	movs	r3, #125	; 0x7d
   1c680:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1c684:	5463      	strb	r3, [r4, r1]
   1c686:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1c68a:	f7ff bba3 	b.w	1bdd4 <d_print_comp_inner+0xcc>
   1c68e:	4fc5      	ldr	r7, [pc, #788]	; (1c9a4 <d_print_comp_inner+0xc9c>)
   1c690:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1c694:	f107 091d 	add.w	r9, r7, #29
   1c698:	2574      	movs	r5, #116	; 0x74
   1c69a:	f04f 0800 	mov.w	r8, #0
   1c69e:	e00b      	b.n	1c6b8 <d_print_comp_inner+0x9b0>
   1c6a0:	460b      	mov	r3, r1
   1c6a2:	3101      	adds	r1, #1
   1c6a4:	45b9      	cmp	r9, r7
   1c6a6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1c6aa:	54e5      	strb	r5, [r4, r3]
   1c6ac:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1c6b0:	f43f abb2 	beq.w	1be18 <d_print_comp_inner+0x110>
   1c6b4:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1c6b8:	29ff      	cmp	r1, #255	; 0xff
   1c6ba:	d1f1      	bne.n	1c6a0 <d_print_comp_inner+0x998>
   1c6bc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1c6c0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1c6c4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1c6c8:	4620      	mov	r0, r4
   1c6ca:	4798      	blx	r3
   1c6cc:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1c6d0:	3301      	adds	r3, #1
   1c6d2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1c6d6:	2101      	movs	r1, #1
   1c6d8:	2300      	movs	r3, #0
   1c6da:	e7e3      	b.n	1c6a4 <d_print_comp_inner+0x99c>
   1c6dc:	68f2      	ldr	r2, [r6, #12]
   1c6de:	2111      	movs	r1, #17
   1c6e0:	f001 fba6 	bl	1de30 <d_print_comp>
   1c6e4:	f7ff bbac 	b.w	1be40 <d_print_comp_inner+0x138>
   1c6e8:	4faf      	ldr	r7, [pc, #700]	; (1c9a8 <d_print_comp_inner+0xca0>)
   1c6ea:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1c6ee:	f107 090d 	add.w	r9, r7, #13
   1c6f2:	256a      	movs	r5, #106	; 0x6a
   1c6f4:	f04f 0800 	mov.w	r8, #0
   1c6f8:	e00b      	b.n	1c712 <d_print_comp_inner+0xa0a>
   1c6fa:	460b      	mov	r3, r1
   1c6fc:	3101      	adds	r1, #1
   1c6fe:	45b9      	cmp	r9, r7
   1c700:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1c704:	54e5      	strb	r5, [r4, r3]
   1c706:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1c70a:	f43f ab85 	beq.w	1be18 <d_print_comp_inner+0x110>
   1c70e:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1c712:	29ff      	cmp	r1, #255	; 0xff
   1c714:	d1f1      	bne.n	1c6fa <d_print_comp_inner+0x9f2>
   1c716:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1c71a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1c71e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1c722:	4620      	mov	r0, r4
   1c724:	4798      	blx	r3
   1c726:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1c72a:	3301      	adds	r3, #1
   1c72c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1c730:	2101      	movs	r1, #1
   1c732:	2300      	movs	r3, #0
   1c734:	e7e3      	b.n	1c6fe <d_print_comp_inner+0x9f6>
   1c736:	4f9d      	ldr	r7, [pc, #628]	; (1c9ac <d_print_comp_inner+0xca4>)
   1c738:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1c73c:	f107 091c 	add.w	r9, r7, #28
   1c740:	2567      	movs	r5, #103	; 0x67
   1c742:	f04f 0800 	mov.w	r8, #0
   1c746:	e00b      	b.n	1c760 <d_print_comp_inner+0xa58>
   1c748:	460b      	mov	r3, r1
   1c74a:	3101      	adds	r1, #1
   1c74c:	45b9      	cmp	r9, r7
   1c74e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1c752:	54e5      	strb	r5, [r4, r3]
   1c754:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1c758:	f43f ab5e 	beq.w	1be18 <d_print_comp_inner+0x110>
   1c75c:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1c760:	29ff      	cmp	r1, #255	; 0xff
   1c762:	d1f1      	bne.n	1c748 <d_print_comp_inner+0xa40>
   1c764:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1c768:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1c76c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1c770:	4620      	mov	r0, r4
   1c772:	4798      	blx	r3
   1c774:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1c778:	3301      	adds	r3, #1
   1c77a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1c77e:	2101      	movs	r1, #1
   1c780:	2300      	movs	r3, #0
   1c782:	e7e3      	b.n	1c74c <d_print_comp_inner+0xa44>
   1c784:	4f8a      	ldr	r7, [pc, #552]	; (1c9b0 <d_print_comp_inner+0xca8>)
   1c786:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1c78a:	f107 0909 	add.w	r9, r7, #9
   1c78e:	2564      	movs	r5, #100	; 0x64
   1c790:	f04f 0800 	mov.w	r8, #0
   1c794:	e00b      	b.n	1c7ae <d_print_comp_inner+0xaa6>
   1c796:	460b      	mov	r3, r1
   1c798:	3101      	adds	r1, #1
   1c79a:	45b9      	cmp	r9, r7
   1c79c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1c7a0:	54e5      	strb	r5, [r4, r3]
   1c7a2:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1c7a6:	f000 8647 	beq.w	1d438 <d_print_comp_inner+0x1730>
   1c7aa:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1c7ae:	29ff      	cmp	r1, #255	; 0xff
   1c7b0:	d1f1      	bne.n	1c796 <d_print_comp_inner+0xa8e>
   1c7b2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1c7b6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1c7ba:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1c7be:	4620      	mov	r0, r4
   1c7c0:	4798      	blx	r3
   1c7c2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1c7c6:	3301      	adds	r3, #1
   1c7c8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1c7cc:	2101      	movs	r1, #1
   1c7ce:	2300      	movs	r3, #0
   1c7d0:	e7e3      	b.n	1c79a <d_print_comp_inner+0xa92>
   1c7d2:	68f7      	ldr	r7, [r6, #12]
   1c7d4:	f8d0 9114 	ldr.w	r9, [r0, #276]	; 0x114
   1c7d8:	2200      	movs	r2, #0
   1c7da:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
   1c7de:	2f00      	cmp	r7, #0
   1c7e0:	f43f aaf5 	beq.w	1bdce <d_print_comp_inner+0xc6>
   1c7e4:	f10d 0808 	add.w	r8, sp, #8
   1c7e8:	f8d0 c110 	ldr.w	ip, [r0, #272]	; 0x110
   1c7ec:	4643      	mov	r3, r8
   1c7ee:	4611      	mov	r1, r2
   1c7f0:	4696      	mov	lr, r2
   1c7f2:	e9c3 2700 	strd	r2, r7, [r3]
   1c7f6:	e9c3 ec02 	strd	lr, ip, [r3, #8]
   1c7fa:	783a      	ldrb	r2, [r7, #0]
   1c7fc:	2a4d      	cmp	r2, #77	; 0x4d
   1c7fe:	469a      	mov	sl, r3
   1c800:	f1a2 0b1c 	sub.w	fp, r2, #28
   1c804:	f1a2 004f 	sub.w	r0, r2, #79	; 0x4f
   1c808:	f101 0501 	add.w	r5, r1, #1
   1c80c:	f000 8663 	beq.w	1d4d6 <d_print_comp_inner+0x17ce>
   1c810:	f200 8493 	bhi.w	1d13a <d_print_comp_inner+0x1432>
   1c814:	f1bb 0f04 	cmp.w	fp, #4
   1c818:	f240 865d 	bls.w	1d4d6 <d_print_comp_inner+0x17ce>
   1c81c:	2a02      	cmp	r2, #2
   1c81e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1c822:	d114      	bne.n	1c84e <d_print_comp_inner+0xb46>
   1c824:	693f      	ldr	r7, [r7, #16]
   1c826:	783a      	ldrb	r2, [r7, #0]
   1c828:	2a47      	cmp	r2, #71	; 0x47
   1c82a:	f001 8249 	beq.w	1dcc0 <d_print_comp_inner+0x1fb8>
   1c82e:	eb08 1101 	add.w	r1, r8, r1, lsl #4
   1c832:	f04f 0a00 	mov.w	sl, #0
   1c836:	2a4d      	cmp	r2, #77	; 0x4d
   1c838:	f1a2 034f 	sub.w	r3, r2, #79	; 0x4f
   1c83c:	f1a2 001c 	sub.w	r0, r2, #28
   1c840:	f001 8001 	beq.w	1d846 <d_print_comp_inner+0x1b3e>
   1c844:	f200 87fc 	bhi.w	1d840 <d_print_comp_inner+0x1b38>
   1c848:	2804      	cmp	r0, #4
   1c84a:	f240 87fc 	bls.w	1d846 <d_print_comp_inner+0x1b3e>
   1c84e:	2a04      	cmp	r2, #4
   1c850:	bf04      	itt	eq
   1c852:	e9cd c700 	strdeq	ip, r7, [sp]
   1c856:	f8c4 d110 	streq.w	sp, [r4, #272]	; 0x110
   1c85a:	6932      	ldr	r2, [r6, #16]
   1c85c:	2111      	movs	r1, #17
   1c85e:	4620      	mov	r0, r4
   1c860:	f001 fae6 	bl	1de30 <d_print_comp>
   1c864:	783b      	ldrb	r3, [r7, #0]
   1c866:	2b04      	cmp	r3, #4
   1c868:	d102      	bne.n	1c870 <d_print_comp_inner+0xb68>
   1c86a:	9b00      	ldr	r3, [sp, #0]
   1c86c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1c870:	eb08 1505 	add.w	r5, r8, r5, lsl #4
   1c874:	2720      	movs	r7, #32
   1c876:	f855 6c08 	ldr.w	r6, [r5, #-8]
   1c87a:	2e00      	cmp	r6, #0
   1c87c:	f000 8618 	beq.w	1d4b0 <d_print_comp_inner+0x17a8>
   1c880:	3d10      	subs	r5, #16
   1c882:	4545      	cmp	r5, r8
   1c884:	d1f7      	bne.n	1c876 <d_print_comp_inner+0xb6e>
   1c886:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   1c88a:	f7ff baa3 	b.w	1bdd4 <d_print_comp_inner+0xcc>
   1c88e:	6933      	ldr	r3, [r6, #16]
   1c890:	781a      	ldrb	r2, [r3, #0]
   1c892:	2a3b      	cmp	r2, #59	; 0x3b
   1c894:	f47f aa9b 	bne.w	1bdce <d_print_comp_inner+0xc6>
   1c898:	691b      	ldr	r3, [r3, #16]
   1c89a:	781b      	ldrb	r3, [r3, #0]
   1c89c:	2b3c      	cmp	r3, #60	; 0x3c
   1c89e:	f47f aa96 	bne.w	1bdce <d_print_comp_inner+0xc6>
   1c8a2:	4632      	mov	r2, r6
   1c8a4:	2111      	movs	r1, #17
   1c8a6:	f002 fc03 	bl	1f0b0 <d_maybe_print_fold_expression>
   1c8aa:	2800      	cmp	r0, #0
   1c8ac:	f47f aa92 	bne.w	1bdd4 <d_print_comp_inner+0xcc>
   1c8b0:	e9d6 8303 	ldrd	r8, r3, [r6, #12]
   1c8b4:	e9d3 6303 	ldrd	r6, r3, [r3, #12]
   1c8b8:	f8d8 200c 	ldr.w	r2, [r8, #12]
   1c8bc:	493d      	ldr	r1, [pc, #244]	; (1c9b4 <d_print_comp_inner+0xcac>)
   1c8be:	6810      	ldr	r0, [r2, #0]
   1c8c0:	e9d3 7503 	ldrd	r7, r5, [r3, #12]
   1c8c4:	f7fb fd40 	bl	18348 <strcmp>
   1c8c8:	2800      	cmp	r0, #0
   1c8ca:	f041 8200 	bne.w	1dcce <d_print_comp_inner+0x1fc6>
   1c8ce:	4632      	mov	r2, r6
   1c8d0:	4620      	mov	r0, r4
   1c8d2:	2111      	movs	r1, #17
   1c8d4:	f002 fb7e 	bl	1efd4 <d_print_subexpr>
   1c8d8:	4642      	mov	r2, r8
   1c8da:	4620      	mov	r0, r4
   1c8dc:	2111      	movs	r1, #17
   1c8de:	f002 f991 	bl	1ec04 <d_print_expr_op>
   1c8e2:	4620      	mov	r0, r4
   1c8e4:	463a      	mov	r2, r7
   1c8e6:	2111      	movs	r1, #17
   1c8e8:	f002 fb74 	bl	1efd4 <d_print_subexpr>
   1c8ec:	4932      	ldr	r1, [pc, #200]	; (1c9b8 <d_print_comp_inner+0xcb0>)
   1c8ee:	4620      	mov	r0, r4
   1c8f0:	f7fd f848 	bl	19984 <d_append_string>
   1c8f4:	e60d      	b.n	1c512 <d_print_comp_inner+0x80a>
   1c8f6:	4f31      	ldr	r7, [pc, #196]	; (1c9bc <d_print_comp_inner+0xcb4>)
   1c8f8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1c8fc:	f107 090c 	add.w	r9, r7, #12
   1c900:	2574      	movs	r5, #116	; 0x74
   1c902:	f04f 0800 	mov.w	r8, #0
   1c906:	e00b      	b.n	1c920 <d_print_comp_inner+0xc18>
   1c908:	460b      	mov	r3, r1
   1c90a:	3101      	adds	r1, #1
   1c90c:	45b9      	cmp	r9, r7
   1c90e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1c912:	54e5      	strb	r5, [r4, r3]
   1c914:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1c918:	f43f aa7e 	beq.w	1be18 <d_print_comp_inner+0x110>
   1c91c:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1c920:	29ff      	cmp	r1, #255	; 0xff
   1c922:	d1f1      	bne.n	1c908 <d_print_comp_inner+0xc00>
   1c924:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1c928:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1c92c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1c930:	4620      	mov	r0, r4
   1c932:	4798      	blx	r3
   1c934:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1c938:	3301      	adds	r3, #1
   1c93a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1c93e:	2101      	movs	r1, #1
   1c940:	2300      	movs	r3, #0
   1c942:	e7e3      	b.n	1c90c <d_print_comp_inner+0xc04>
   1c944:	4f1e      	ldr	r7, [pc, #120]	; (1c9c0 <d_print_comp_inner+0xcb8>)
   1c946:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1c94a:	f107 0910 	add.w	r9, r7, #16
   1c94e:	2576      	movs	r5, #118	; 0x76
   1c950:	f04f 0800 	mov.w	r8, #0
   1c954:	e00b      	b.n	1c96e <d_print_comp_inner+0xc66>
   1c956:	460b      	mov	r3, r1
   1c958:	3101      	adds	r1, #1
   1c95a:	45b9      	cmp	r9, r7
   1c95c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1c960:	54e5      	strb	r5, [r4, r3]
   1c962:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1c966:	f43f aa57 	beq.w	1be18 <d_print_comp_inner+0x110>
   1c96a:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1c96e:	29ff      	cmp	r1, #255	; 0xff
   1c970:	d1f1      	bne.n	1c956 <d_print_comp_inner+0xc4e>
   1c972:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1c976:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1c97a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1c97e:	4620      	mov	r0, r4
   1c980:	4798      	blx	r3
   1c982:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1c986:	3301      	adds	r3, #1
   1c988:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1c98c:	2101      	movs	r1, #1
   1c98e:	2300      	movs	r3, #0
   1c990:	e7e3      	b.n	1c95a <d_print_comp_inner+0xc52>
   1c992:	4f0c      	ldr	r7, [pc, #48]	; (1c9c4 <d_print_comp_inner+0xcbc>)
   1c994:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1c998:	f107 0914 	add.w	r9, r7, #20
   1c99c:	256e      	movs	r5, #110	; 0x6e
   1c99e:	f04f 0800 	mov.w	r8, #0
   1c9a2:	e01d      	b.n	1c9e0 <d_print_comp_inner+0xcd8>
   1c9a4:	000438bc 	.word	0x000438bc
   1c9a8:	00043a88 	.word	0x00043a88
   1c9ac:	00043ab8 	.word	0x00043ab8
   1c9b0:	00043a98 	.word	0x00043a98
   1c9b4:	00043a5c 	.word	0x00043a5c
   1c9b8:	00043a60 	.word	0x00043a60
   1c9bc:	00043918 	.word	0x00043918
   1c9c0:	00043954 	.word	0x00043954
   1c9c4:	00043950 	.word	0x00043950
   1c9c8:	460b      	mov	r3, r1
   1c9ca:	3101      	adds	r1, #1
   1c9cc:	454f      	cmp	r7, r9
   1c9ce:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1c9d2:	54e5      	strb	r5, [r4, r3]
   1c9d4:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1c9d8:	f43f aa1e 	beq.w	1be18 <d_print_comp_inner+0x110>
   1c9dc:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1c9e0:	29ff      	cmp	r1, #255	; 0xff
   1c9e2:	d1f1      	bne.n	1c9c8 <d_print_comp_inner+0xcc0>
   1c9e4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1c9e8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1c9ec:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1c9f0:	4620      	mov	r0, r4
   1c9f2:	4798      	blx	r3
   1c9f4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1c9f8:	3301      	adds	r3, #1
   1c9fa:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1c9fe:	2101      	movs	r1, #1
   1ca00:	2300      	movs	r3, #0
   1ca02:	e7e3      	b.n	1c9cc <d_print_comp_inner+0xcc4>
   1ca04:	4fc1      	ldr	r7, [pc, #772]	; (1cd0c <d_print_comp_inner+0x1004>)
   1ca06:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1ca0a:	f107 090f 	add.w	r9, r7, #15
   1ca0e:	2574      	movs	r5, #116	; 0x74
   1ca10:	f04f 0800 	mov.w	r8, #0
   1ca14:	e00b      	b.n	1ca2e <d_print_comp_inner+0xd26>
   1ca16:	460b      	mov	r3, r1
   1ca18:	3101      	adds	r1, #1
   1ca1a:	45b9      	cmp	r9, r7
   1ca1c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1ca20:	54e5      	strb	r5, [r4, r3]
   1ca22:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1ca26:	f43f a9f7 	beq.w	1be18 <d_print_comp_inner+0x110>
   1ca2a:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1ca2e:	29ff      	cmp	r1, #255	; 0xff
   1ca30:	d1f1      	bne.n	1ca16 <d_print_comp_inner+0xd0e>
   1ca32:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1ca36:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1ca3a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1ca3e:	4620      	mov	r0, r4
   1ca40:	4798      	blx	r3
   1ca42:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ca46:	3301      	adds	r3, #1
   1ca48:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ca4c:	2101      	movs	r1, #1
   1ca4e:	2300      	movs	r3, #0
   1ca50:	e7e3      	b.n	1ca1a <d_print_comp_inner+0xd12>
   1ca52:	4faf      	ldr	r7, [pc, #700]	; (1cd10 <d_print_comp_inner+0x1008>)
   1ca54:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1ca58:	f107 0911 	add.w	r9, r7, #17
   1ca5c:	2574      	movs	r5, #116	; 0x74
   1ca5e:	f04f 0800 	mov.w	r8, #0
   1ca62:	e00b      	b.n	1ca7c <d_print_comp_inner+0xd74>
   1ca64:	460b      	mov	r3, r1
   1ca66:	3101      	adds	r1, #1
   1ca68:	45b9      	cmp	r9, r7
   1ca6a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1ca6e:	54e5      	strb	r5, [r4, r3]
   1ca70:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1ca74:	f43f a9d0 	beq.w	1be18 <d_print_comp_inner+0x110>
   1ca78:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1ca7c:	29ff      	cmp	r1, #255	; 0xff
   1ca7e:	d1f1      	bne.n	1ca64 <d_print_comp_inner+0xd5c>
   1ca80:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1ca84:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1ca88:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1ca8c:	4620      	mov	r0, r4
   1ca8e:	4798      	blx	r3
   1ca90:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ca94:	3301      	adds	r3, #1
   1ca96:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ca9a:	2101      	movs	r1, #1
   1ca9c:	2300      	movs	r3, #0
   1ca9e:	e7e3      	b.n	1ca68 <d_print_comp_inner+0xd60>
   1caa0:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
   1caa4:	2b00      	cmp	r3, #0
   1caa6:	f040 86ef 	bne.w	1d888 <d_print_comp_inner+0x1b80>
   1caaa:	68f2      	ldr	r2, [r6, #12]
   1caac:	4b99      	ldr	r3, [pc, #612]	; (1cd14 <d_print_comp_inner+0x100c>)
   1caae:	68d1      	ldr	r1, [r2, #12]
   1cab0:	4299      	cmp	r1, r3
   1cab2:	f000 8622 	beq.w	1d6fa <d_print_comp_inner+0x19f2>
   1cab6:	2111      	movs	r1, #17
   1cab8:	4620      	mov	r0, r4
   1caba:	f001 f9b9 	bl	1de30 <d_print_comp>
   1cabe:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1cac2:	2bff      	cmp	r3, #255	; 0xff
   1cac4:	f001 809e 	beq.w	1dc04 <d_print_comp_inner+0x1efc>
   1cac8:	2220      	movs	r2, #32
   1caca:	1c59      	adds	r1, r3, #1
   1cacc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1cad0:	54e2      	strb	r2, [r4, r3]
   1cad2:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1cad6:	f9b6 8010 	ldrsh.w	r8, [r6, #16]
   1cada:	f1b8 0f00 	cmp.w	r8, #0
   1cade:	f040 85e5 	bne.w	1d6ac <d_print_comp_inner+0x19a4>
   1cae2:	4e8d      	ldr	r6, [pc, #564]	; (1cd18 <d_print_comp_inner+0x1010>)
   1cae4:	255f      	movs	r5, #95	; 0x5f
   1cae6:	1d77      	adds	r7, r6, #5
   1cae8:	e00b      	b.n	1cb02 <d_print_comp_inner+0xdfa>
   1caea:	460b      	mov	r3, r1
   1caec:	3101      	adds	r1, #1
   1caee:	42b7      	cmp	r7, r6
   1caf0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1caf4:	54e5      	strb	r5, [r4, r3]
   1caf6:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1cafa:	f43f a96b 	beq.w	1bdd4 <d_print_comp_inner+0xcc>
   1cafe:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   1cb02:	29ff      	cmp	r1, #255	; 0xff
   1cb04:	d1f1      	bne.n	1caea <d_print_comp_inner+0xde2>
   1cb06:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1cb0a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1cb0e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1cb12:	4620      	mov	r0, r4
   1cb14:	4798      	blx	r3
   1cb16:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1cb1a:	3301      	adds	r3, #1
   1cb1c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1cb20:	2101      	movs	r1, #1
   1cb22:	2300      	movs	r3, #0
   1cb24:	e7e3      	b.n	1caee <d_print_comp_inner+0xde6>
   1cb26:	f8d0 c114 	ldr.w	ip, [r0, #276]	; 0x114
   1cb2a:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   1cb2e:	9305      	str	r3, [sp, #20]
   1cb30:	f10d 0808 	add.w	r8, sp, #8
   1cb34:	2300      	movs	r3, #0
   1cb36:	46e1      	mov	r9, ip
   1cb38:	f8cd c008 	str.w	ip, [sp, #8]
   1cb3c:	f8c0 8114 	str.w	r8, [r0, #276]	; 0x114
   1cb40:	9603      	str	r6, [sp, #12]
   1cb42:	9304      	str	r3, [sp, #16]
   1cb44:	f1bc 0f00 	cmp.w	ip, #0
   1cb48:	f001 811a 	beq.w	1dd80 <d_print_comp_inner+0x2078>
   1cb4c:	2701      	movs	r7, #1
   1cb4e:	4665      	mov	r5, ip
   1cb50:	46be      	mov	lr, r7
   1cb52:	46b4      	mov	ip, r6
   1cb54:	4646      	mov	r6, r8
   1cb56:	e018      	b.n	1cb8a <d_print_comp_inner+0xe82>
   1cb58:	68ab      	ldr	r3, [r5, #8]
   1cb5a:	b9a3      	cbnz	r3, 1cb86 <d_print_comp_inner+0xe7e>
   1cb5c:	2f03      	cmp	r7, #3
   1cb5e:	f63f a936 	bhi.w	1bdce <d_print_comp_inner+0xc6>
   1cb62:	ab12      	add	r3, sp, #72	; 0x48
   1cb64:	eb03 1b07 	add.w	fp, r3, r7, lsl #4
   1cb68:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1cb6c:	f1ab 0a40 	sub.w	sl, fp, #64	; 0x40
   1cb70:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
   1cb74:	f84b 6c40 	str.w	r6, [fp, #-64]
   1cb78:	eb08 1607 	add.w	r6, r8, r7, lsl #4
   1cb7c:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
   1cb80:	3701      	adds	r7, #1
   1cb82:	f8c5 e008 	str.w	lr, [r5, #8]
   1cb86:	682d      	ldr	r5, [r5, #0]
   1cb88:	b125      	cbz	r5, 1cb94 <d_print_comp_inner+0xe8c>
   1cb8a:	686b      	ldr	r3, [r5, #4]
   1cb8c:	781b      	ldrb	r3, [r3, #0]
   1cb8e:	3b19      	subs	r3, #25
   1cb90:	2b02      	cmp	r3, #2
   1cb92:	d9e1      	bls.n	1cb58 <d_print_comp_inner+0xe50>
   1cb94:	f8dc 2010 	ldr.w	r2, [ip, #16]
   1cb98:	2111      	movs	r1, #17
   1cb9a:	4620      	mov	r0, r4
   1cb9c:	4666      	mov	r6, ip
   1cb9e:	f001 f947 	bl	1de30 <d_print_comp>
   1cba2:	9b04      	ldr	r3, [sp, #16]
   1cba4:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   1cba8:	2b00      	cmp	r3, #0
   1cbaa:	f47f a913 	bne.w	1bdd4 <d_print_comp_inner+0xcc>
   1cbae:	2f01      	cmp	r7, #1
   1cbb0:	d00c      	beq.n	1cbcc <d_print_comp_inner+0xec4>
   1cbb2:	eb08 1807 	add.w	r8, r8, r7, lsl #4
   1cbb6:	f858 2c0c 	ldr.w	r2, [r8, #-12]
   1cbba:	3f01      	subs	r7, #1
   1cbbc:	2111      	movs	r1, #17
   1cbbe:	4620      	mov	r0, r4
   1cbc0:	f001 f964 	bl	1de8c <d_print_mod>
   1cbc4:	2f01      	cmp	r7, #1
   1cbc6:	f1a8 0810 	sub.w	r8, r8, #16
   1cbca:	d1f4      	bne.n	1cbb6 <d_print_comp_inner+0xeae>
   1cbcc:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1cbd0:	4632      	mov	r2, r6
   1cbd2:	2111      	movs	r1, #17
   1cbd4:	4620      	mov	r0, r4
   1cbd6:	f001 fe87 	bl	1e8e8 <d_print_array_type>
   1cbda:	f7ff b8fb 	b.w	1bdd4 <d_print_comp_inner+0xcc>
   1cbde:	e9d6 5303 	ldrd	r5, r3, [r6, #12]
   1cbe2:	2b00      	cmp	r3, #0
   1cbe4:	f43f a8f6 	beq.w	1bdd4 <d_print_comp_inner+0xcc>
   1cbe8:	442b      	add	r3, r5
   1cbea:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1cbee:	3d01      	subs	r5, #1
   1cbf0:	1e5f      	subs	r7, r3, #1
   1cbf2:	f04f 0800 	mov.w	r8, #0
   1cbf6:	e009      	b.n	1cc0c <d_print_comp_inner+0xf04>
   1cbf8:	460b      	mov	r3, r1
   1cbfa:	3101      	adds	r1, #1
   1cbfc:	42af      	cmp	r7, r5
   1cbfe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1cc02:	54e6      	strb	r6, [r4, r3]
   1cc04:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1cc08:	f43f a8e4 	beq.w	1bdd4 <d_print_comp_inner+0xcc>
   1cc0c:	29ff      	cmp	r1, #255	; 0xff
   1cc0e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   1cc12:	d1f1      	bne.n	1cbf8 <d_print_comp_inner+0xef0>
   1cc14:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1cc18:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1cc1c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1cc20:	4620      	mov	r0, r4
   1cc22:	4798      	blx	r3
   1cc24:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1cc28:	3301      	adds	r3, #1
   1cc2a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1cc2e:	2101      	movs	r1, #1
   1cc30:	2300      	movs	r3, #0
   1cc32:	e7e3      	b.n	1cbfc <d_print_comp_inner+0xef4>
   1cc34:	6933      	ldr	r3, [r6, #16]
   1cc36:	781b      	ldrb	r3, [r3, #0]
   1cc38:	2b39      	cmp	r3, #57	; 0x39
   1cc3a:	f47f a8c8 	bne.w	1bdce <d_print_comp_inner+0xc6>
   1cc3e:	68f2      	ldr	r2, [r6, #12]
   1cc40:	68d3      	ldr	r3, [r2, #12]
   1cc42:	681b      	ldr	r3, [r3, #0]
   1cc44:	7859      	ldrb	r1, [r3, #1]
   1cc46:	2963      	cmp	r1, #99	; 0x63
   1cc48:	f000 86ea 	beq.w	1da20 <d_print_comp_inner+0x1d18>
   1cc4c:	4632      	mov	r2, r6
   1cc4e:	2111      	movs	r1, #17
   1cc50:	4620      	mov	r0, r4
   1cc52:	f002 fa2d 	bl	1f0b0 <d_maybe_print_fold_expression>
   1cc56:	2800      	cmp	r0, #0
   1cc58:	f47f a8bc 	bne.w	1bdd4 <d_print_comp_inner+0xcc>
   1cc5c:	68f3      	ldr	r3, [r6, #12]
   1cc5e:	781a      	ldrb	r2, [r3, #0]
   1cc60:	2a32      	cmp	r2, #50	; 0x32
   1cc62:	f000 87f6 	beq.w	1dc52 <d_print_comp_inner+0x1f4a>
   1cc66:	68db      	ldr	r3, [r3, #12]
   1cc68:	681b      	ldr	r3, [r3, #0]
   1cc6a:	781a      	ldrb	r2, [r3, #0]
   1cc6c:	2a63      	cmp	r2, #99	; 0x63
   1cc6e:	f040 86d4 	bne.w	1da1a <d_print_comp_inner+0x1d12>
   1cc72:	785a      	ldrb	r2, [r3, #1]
   1cc74:	2a6c      	cmp	r2, #108	; 0x6c
   1cc76:	f040 86d0 	bne.w	1da1a <d_print_comp_inner+0x1d12>
   1cc7a:	789b      	ldrb	r3, [r3, #2]
   1cc7c:	2b00      	cmp	r3, #0
   1cc7e:	f040 86cc 	bne.w	1da1a <d_print_comp_inner+0x1d12>
   1cc82:	6933      	ldr	r3, [r6, #16]
   1cc84:	68da      	ldr	r2, [r3, #12]
   1cc86:	7811      	ldrb	r1, [r2, #0]
   1cc88:	2903      	cmp	r1, #3
   1cc8a:	f001 8063 	beq.w	1dd54 <d_print_comp_inner+0x204c>
   1cc8e:	68da      	ldr	r2, [r3, #12]
   1cc90:	2111      	movs	r1, #17
   1cc92:	4620      	mov	r0, r4
   1cc94:	f002 f99e 	bl	1efd4 <d_print_subexpr>
   1cc98:	68f2      	ldr	r2, [r6, #12]
   1cc9a:	68d3      	ldr	r3, [r2, #12]
   1cc9c:	681b      	ldr	r3, [r3, #0]
   1cc9e:	7819      	ldrb	r1, [r3, #0]
   1cca0:	2969      	cmp	r1, #105	; 0x69
   1cca2:	f040 8743 	bne.w	1db2c <d_print_comp_inner+0x1e24>
   1cca6:	7858      	ldrb	r0, [r3, #1]
   1cca8:	2878      	cmp	r0, #120	; 0x78
   1ccaa:	f040 873f 	bne.w	1db2c <d_print_comp_inner+0x1e24>
   1ccae:	7898      	ldrb	r0, [r3, #2]
   1ccb0:	2800      	cmp	r0, #0
   1ccb2:	f040 873b 	bne.w	1db2c <d_print_comp_inner+0x1e24>
   1ccb6:	4620      	mov	r0, r4
   1ccb8:	215b      	movs	r1, #91	; 0x5b
   1ccba:	f7fc fddd 	bl	19878 <d_append_char>
   1ccbe:	6933      	ldr	r3, [r6, #16]
   1ccc0:	4620      	mov	r0, r4
   1ccc2:	2111      	movs	r1, #17
   1ccc4:	691a      	ldr	r2, [r3, #16]
   1ccc6:	f001 f8b3 	bl	1de30 <d_print_comp>
   1ccca:	215d      	movs	r1, #93	; 0x5d
   1cccc:	4620      	mov	r0, r4
   1ccce:	f7fc fdd3 	bl	19878 <d_append_char>
   1ccd2:	68f3      	ldr	r3, [r6, #12]
   1ccd4:	781a      	ldrb	r2, [r3, #0]
   1ccd6:	2a32      	cmp	r2, #50	; 0x32
   1ccd8:	f47f a87c 	bne.w	1bdd4 <d_print_comp_inner+0xcc>
   1ccdc:	68db      	ldr	r3, [r3, #12]
   1ccde:	689a      	ldr	r2, [r3, #8]
   1cce0:	2a01      	cmp	r2, #1
   1cce2:	f47f a877 	bne.w	1bdd4 <d_print_comp_inner+0xcc>
   1cce6:	685b      	ldr	r3, [r3, #4]
   1cce8:	781b      	ldrb	r3, [r3, #0]
   1ccea:	2b3e      	cmp	r3, #62	; 0x3e
   1ccec:	f47f a872 	bne.w	1bdd4 <d_print_comp_inner+0xcc>
   1ccf0:	2129      	movs	r1, #41	; 0x29
   1ccf2:	f7ff b990 	b.w	1c016 <d_print_comp_inner+0x30e>
   1ccf6:	68f7      	ldr	r7, [r6, #12]
   1ccf8:	2f00      	cmp	r7, #0
   1ccfa:	f040 8476 	bne.w	1d5ea <d_print_comp_inner+0x18e2>
   1ccfe:	4e07      	ldr	r6, [pc, #28]	; (1cd1c <d_print_comp_inner+0x1014>)
   1cd00:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1cd04:	f106 0803 	add.w	r8, r6, #3
   1cd08:	2574      	movs	r5, #116	; 0x74
   1cd0a:	e015      	b.n	1cd38 <d_print_comp_inner+0x1030>
   1cd0c:	0004393c 	.word	0x0004393c
   1cd10:	00043928 	.word	0x00043928
   1cd14:	0003efa0 	.word	0x0003efa0
   1cd18:	00043a2c 	.word	0x00043a2c
   1cd1c:	00043aa8 	.word	0x00043aa8
   1cd20:	460b      	mov	r3, r1
   1cd22:	3101      	adds	r1, #1
   1cd24:	45b0      	cmp	r8, r6
   1cd26:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1cd2a:	54e5      	strb	r5, [r4, r3]
   1cd2c:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1cd30:	f43f a850 	beq.w	1bdd4 <d_print_comp_inner+0xcc>
   1cd34:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   1cd38:	29ff      	cmp	r1, #255	; 0xff
   1cd3a:	d1f1      	bne.n	1cd20 <d_print_comp_inner+0x1018>
   1cd3c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1cd40:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1cd44:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   1cd48:	4620      	mov	r0, r4
   1cd4a:	4798      	blx	r3
   1cd4c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1cd50:	3301      	adds	r3, #1
   1cd52:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1cd56:	2101      	movs	r1, #1
   1cd58:	2300      	movs	r3, #0
   1cd5a:	e7e3      	b.n	1cd24 <d_print_comp_inner+0x101c>
   1cd5c:	68f2      	ldr	r2, [r6, #12]
   1cd5e:	b1ca      	cbz	r2, 1cd94 <d_print_comp_inner+0x108c>
   1cd60:	f8d0 1114 	ldr.w	r1, [r0, #276]	; 0x114
   1cd64:	ab02      	add	r3, sp, #8
   1cd66:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   1cd6a:	2300      	movs	r3, #0
   1cd6c:	e9cd 1602 	strd	r1, r6, [sp, #8]
   1cd70:	9304      	str	r3, [sp, #16]
   1cd72:	2111      	movs	r1, #17
   1cd74:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   1cd78:	9305      	str	r3, [sp, #20]
   1cd7a:	f001 f859 	bl	1de30 <d_print_comp>
   1cd7e:	9b04      	ldr	r3, [sp, #16]
   1cd80:	9a02      	ldr	r2, [sp, #8]
   1cd82:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
   1cd86:	2b00      	cmp	r3, #0
   1cd88:	f47f a824 	bne.w	1bdd4 <d_print_comp_inner+0xcc>
   1cd8c:	2120      	movs	r1, #32
   1cd8e:	4620      	mov	r0, r4
   1cd90:	f7fc fd72 	bl	19878 <d_append_char>
   1cd94:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1cd98:	4632      	mov	r2, r6
   1cd9a:	2111      	movs	r1, #17
   1cd9c:	4620      	mov	r0, r4
   1cd9e:	b013      	add	sp, #76	; 0x4c
   1cda0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cda4:	f001 bb8a 	b.w	1e4bc <d_print_function_type>
   1cda8:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
   1cdac:	2b00      	cmp	r3, #0
   1cdae:	f000 83d3 	beq.w	1d558 <d_print_comp_inner+0x1850>
   1cdb2:	4fd1      	ldr	r7, [pc, #836]	; (1d0f8 <d_print_comp_inner+0x13f0>)
   1cdb4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1cdb8:	f107 0904 	add.w	r9, r7, #4
   1cdbc:	2561      	movs	r5, #97	; 0x61
   1cdbe:	f04f 0800 	mov.w	r8, #0
   1cdc2:	e00b      	b.n	1cddc <d_print_comp_inner+0x10d4>
   1cdc4:	460b      	mov	r3, r1
   1cdc6:	3101      	adds	r1, #1
   1cdc8:	45b9      	cmp	r9, r7
   1cdca:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1cdce:	54e5      	strb	r5, [r4, r3]
   1cdd0:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1cdd4:	f000 83d8 	beq.w	1d588 <d_print_comp_inner+0x1880>
   1cdd8:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1cddc:	29ff      	cmp	r1, #255	; 0xff
   1cdde:	d1f1      	bne.n	1cdc4 <d_print_comp_inner+0x10bc>
   1cde0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1cde4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1cde8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1cdec:	4620      	mov	r0, r4
   1cdee:	4798      	blx	r3
   1cdf0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1cdf4:	3301      	adds	r3, #1
   1cdf6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1cdfa:	2101      	movs	r1, #1
   1cdfc:	2300      	movs	r3, #0
   1cdfe:	e7e3      	b.n	1cdc8 <d_print_comp_inner+0x10c0>
   1ce00:	2300      	movs	r3, #0
   1ce02:	f8d0 7148 	ldr.w	r7, [r0, #328]	; 0x148
   1ce06:	f8d0 8114 	ldr.w	r8, [r0, #276]	; 0x114
   1ce0a:	68f2      	ldr	r2, [r6, #12]
   1ce0c:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   1ce10:	f8c0 6148 	str.w	r6, [r0, #328]	; 0x148
   1ce14:	2111      	movs	r1, #17
   1ce16:	f001 f80b 	bl	1de30 <d_print_comp>
   1ce1a:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1ce1e:	2b3c      	cmp	r3, #60	; 0x3c
   1ce20:	f000 85ce 	beq.w	1d9c0 <d_print_comp_inner+0x1cb8>
   1ce24:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1ce28:	29ff      	cmp	r1, #255	; 0xff
   1ce2a:	f000 85b9 	beq.w	1d9a0 <d_print_comp_inner+0x1c98>
   1ce2e:	1c4b      	adds	r3, r1, #1
   1ce30:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1ce34:	233c      	movs	r3, #60	; 0x3c
   1ce36:	5463      	strb	r3, [r4, r1]
   1ce38:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1ce3c:	6932      	ldr	r2, [r6, #16]
   1ce3e:	2111      	movs	r1, #17
   1ce40:	4620      	mov	r0, r4
   1ce42:	f000 fff5 	bl	1de30 <d_print_comp>
   1ce46:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1ce4a:	2b3e      	cmp	r3, #62	; 0x3e
   1ce4c:	f000 85a2 	beq.w	1d994 <d_print_comp_inner+0x1c8c>
   1ce50:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1ce54:	29ff      	cmp	r1, #255	; 0xff
   1ce56:	f000 858d 	beq.w	1d974 <d_print_comp_inner+0x1c6c>
   1ce5a:	1c4b      	adds	r3, r1, #1
   1ce5c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1ce60:	233e      	movs	r3, #62	; 0x3e
   1ce62:	5463      	strb	r3, [r4, r1]
   1ce64:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1ce68:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
   1ce6c:	f8c4 7148 	str.w	r7, [r4, #328]	; 0x148
   1ce70:	f7fe bfb0 	b.w	1bdd4 <d_print_comp_inner+0xcc>
   1ce74:	4fa1      	ldr	r7, [pc, #644]	; (1d0fc <d_print_comp_inner+0x13f4>)
   1ce76:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1ce7a:	f107 0907 	add.w	r9, r7, #7
   1ce7e:	2556      	movs	r5, #86	; 0x56
   1ce80:	f04f 0800 	mov.w	r8, #0
   1ce84:	e00b      	b.n	1ce9e <d_print_comp_inner+0x1196>
   1ce86:	460b      	mov	r3, r1
   1ce88:	3101      	adds	r1, #1
   1ce8a:	45b9      	cmp	r9, r7
   1ce8c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1ce90:	54e5      	strb	r5, [r4, r3]
   1ce92:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1ce96:	f43e afbf 	beq.w	1be18 <d_print_comp_inner+0x110>
   1ce9a:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1ce9e:	29ff      	cmp	r1, #255	; 0xff
   1cea0:	d1f1      	bne.n	1ce86 <d_print_comp_inner+0x117e>
   1cea2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1cea6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1ceaa:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1ceae:	4620      	mov	r0, r4
   1ceb0:	4798      	blx	r3
   1ceb2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ceb6:	3301      	adds	r3, #1
   1ceb8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1cebc:	2101      	movs	r1, #1
   1cebe:	2300      	movs	r3, #0
   1cec0:	e7e3      	b.n	1ce8a <d_print_comp_inner+0x1182>
   1cec2:	4f8f      	ldr	r7, [pc, #572]	; (1d100 <d_print_comp_inner+0x13f8>)
   1cec4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1cec8:	f107 090a 	add.w	r9, r7, #10
   1cecc:	2576      	movs	r5, #118	; 0x76
   1cece:	f04f 0800 	mov.w	r8, #0
   1ced2:	e00b      	b.n	1ceec <d_print_comp_inner+0x11e4>
   1ced4:	460b      	mov	r3, r1
   1ced6:	3101      	adds	r1, #1
   1ced8:	45b9      	cmp	r9, r7
   1ceda:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1cede:	54e5      	strb	r5, [r4, r3]
   1cee0:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1cee4:	f43e af98 	beq.w	1be18 <d_print_comp_inner+0x110>
   1cee8:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1ceec:	29ff      	cmp	r1, #255	; 0xff
   1ceee:	d1f1      	bne.n	1ced4 <d_print_comp_inner+0x11cc>
   1cef0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1cef4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1cef8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1cefc:	4620      	mov	r0, r4
   1cefe:	4798      	blx	r3
   1cf00:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1cf04:	3301      	adds	r3, #1
   1cf06:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1cf0a:	2101      	movs	r1, #1
   1cf0c:	2300      	movs	r3, #0
   1cf0e:	e7e3      	b.n	1ced8 <d_print_comp_inner+0x11d0>
   1cf10:	4f7c      	ldr	r7, [pc, #496]	; (1d104 <d_print_comp_inner+0x13fc>)
   1cf12:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1cf16:	f107 0917 	add.w	r9, r7, #23
   1cf1a:	2563      	movs	r5, #99	; 0x63
   1cf1c:	f04f 0800 	mov.w	r8, #0
   1cf20:	e00b      	b.n	1cf3a <d_print_comp_inner+0x1232>
   1cf22:	460b      	mov	r3, r1
   1cf24:	3101      	adds	r1, #1
   1cf26:	45b9      	cmp	r9, r7
   1cf28:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1cf2c:	54e5      	strb	r5, [r4, r3]
   1cf2e:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1cf32:	f000 8172 	beq.w	1d21a <d_print_comp_inner+0x1512>
   1cf36:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1cf3a:	29ff      	cmp	r1, #255	; 0xff
   1cf3c:	d1f1      	bne.n	1cf22 <d_print_comp_inner+0x121a>
   1cf3e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1cf42:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1cf46:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1cf4a:	4620      	mov	r0, r4
   1cf4c:	4798      	blx	r3
   1cf4e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1cf52:	3301      	adds	r3, #1
   1cf54:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1cf58:	2101      	movs	r1, #1
   1cf5a:	2300      	movs	r3, #0
   1cf5c:	e7e3      	b.n	1cf26 <d_print_comp_inner+0x121e>
   1cf5e:	4f6a      	ldr	r7, [pc, #424]	; (1d108 <d_print_comp_inner+0x1400>)
   1cf60:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1cf64:	f107 0914 	add.w	r9, r7, #20
   1cf68:	2572      	movs	r5, #114	; 0x72
   1cf6a:	f04f 0800 	mov.w	r8, #0
   1cf6e:	e00b      	b.n	1cf88 <d_print_comp_inner+0x1280>
   1cf70:	460b      	mov	r3, r1
   1cf72:	3101      	adds	r1, #1
   1cf74:	45b9      	cmp	r9, r7
   1cf76:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1cf7a:	54e5      	strb	r5, [r4, r3]
   1cf7c:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1cf80:	f000 811f 	beq.w	1d1c2 <d_print_comp_inner+0x14ba>
   1cf84:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1cf88:	29ff      	cmp	r1, #255	; 0xff
   1cf8a:	d1f1      	bne.n	1cf70 <d_print_comp_inner+0x1268>
   1cf8c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1cf90:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1cf94:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1cf98:	4620      	mov	r0, r4
   1cf9a:	4798      	blx	r3
   1cf9c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1cfa0:	3301      	adds	r3, #1
   1cfa2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1cfa6:	2101      	movs	r1, #1
   1cfa8:	2300      	movs	r3, #0
   1cfaa:	e7e3      	b.n	1cf74 <d_print_comp_inner+0x126c>
   1cfac:	4f57      	ldr	r7, [pc, #348]	; (1d10c <d_print_comp_inner+0x1404>)
   1cfae:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1cfb2:	f107 0918 	add.w	r9, r7, #24
   1cfb6:	2554      	movs	r5, #84	; 0x54
   1cfb8:	f04f 0800 	mov.w	r8, #0
   1cfbc:	e00b      	b.n	1cfd6 <d_print_comp_inner+0x12ce>
   1cfbe:	460b      	mov	r3, r1
   1cfc0:	3101      	adds	r1, #1
   1cfc2:	45b9      	cmp	r9, r7
   1cfc4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1cfc8:	54e5      	strb	r5, [r4, r3]
   1cfca:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1cfce:	f43e af23 	beq.w	1be18 <d_print_comp_inner+0x110>
   1cfd2:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1cfd6:	29ff      	cmp	r1, #255	; 0xff
   1cfd8:	d1f1      	bne.n	1cfbe <d_print_comp_inner+0x12b6>
   1cfda:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1cfde:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1cfe2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1cfe6:	4620      	mov	r0, r4
   1cfe8:	4798      	blx	r3
   1cfea:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1cfee:	3301      	adds	r3, #1
   1cff0:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1cff4:	2101      	movs	r1, #1
   1cff6:	2300      	movs	r3, #0
   1cff8:	e7e3      	b.n	1cfc2 <d_print_comp_inner+0x12ba>
   1cffa:	4f45      	ldr	r7, [pc, #276]	; (1d110 <d_print_comp_inner+0x1408>)
   1cffc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d000:	f107 0910 	add.w	r9, r7, #16
   1d004:	2568      	movs	r5, #104	; 0x68
   1d006:	f04f 0800 	mov.w	r8, #0
   1d00a:	e00b      	b.n	1d024 <d_print_comp_inner+0x131c>
   1d00c:	460b      	mov	r3, r1
   1d00e:	3101      	adds	r1, #1
   1d010:	45b9      	cmp	r9, r7
   1d012:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d016:	54e5      	strb	r5, [r4, r3]
   1d018:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d01c:	f43e aefc 	beq.w	1be18 <d_print_comp_inner+0x110>
   1d020:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d024:	29ff      	cmp	r1, #255	; 0xff
   1d026:	d1f1      	bne.n	1d00c <d_print_comp_inner+0x1304>
   1d028:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d02c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d030:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d034:	4620      	mov	r0, r4
   1d036:	4798      	blx	r3
   1d038:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d03c:	3301      	adds	r3, #1
   1d03e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d042:	2101      	movs	r1, #1
   1d044:	2300      	movs	r3, #0
   1d046:	e7e3      	b.n	1d010 <d_print_comp_inner+0x1308>
   1d048:	68f2      	ldr	r2, [r6, #12]
   1d04a:	e9d2 5300 	ldrd	r5, r3, [r2]
   1d04e:	2b00      	cmp	r3, #0
   1d050:	f43e aec0 	beq.w	1bdd4 <d_print_comp_inner+0xcc>
   1d054:	442b      	add	r3, r5
   1d056:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d05a:	3d01      	subs	r5, #1
   1d05c:	1e5f      	subs	r7, r3, #1
   1d05e:	f04f 0800 	mov.w	r8, #0
   1d062:	e009      	b.n	1d078 <d_print_comp_inner+0x1370>
   1d064:	460b      	mov	r3, r1
   1d066:	3101      	adds	r1, #1
   1d068:	42af      	cmp	r7, r5
   1d06a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d06e:	54e6      	strb	r6, [r4, r3]
   1d070:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1d074:	f43e aeae 	beq.w	1bdd4 <d_print_comp_inner+0xcc>
   1d078:	29ff      	cmp	r1, #255	; 0xff
   1d07a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   1d07e:	d1f1      	bne.n	1d064 <d_print_comp_inner+0x135c>
   1d080:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d084:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d088:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d08c:	4620      	mov	r0, r4
   1d08e:	4798      	blx	r3
   1d090:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d094:	3301      	adds	r3, #1
   1d096:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d09a:	2101      	movs	r1, #1
   1d09c:	2300      	movs	r3, #0
   1d09e:	e7e3      	b.n	1d068 <d_print_comp_inner+0x1360>
   1d0a0:	e9d6 5303 	ldrd	r5, r3, [r6, #12]
   1d0a4:	2b00      	cmp	r3, #0
   1d0a6:	f43e ae95 	beq.w	1bdd4 <d_print_comp_inner+0xcc>
   1d0aa:	442b      	add	r3, r5
   1d0ac:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d0b0:	3d01      	subs	r5, #1
   1d0b2:	1e5f      	subs	r7, r3, #1
   1d0b4:	f04f 0800 	mov.w	r8, #0
   1d0b8:	e009      	b.n	1d0ce <d_print_comp_inner+0x13c6>
   1d0ba:	460b      	mov	r3, r1
   1d0bc:	3101      	adds	r1, #1
   1d0be:	42af      	cmp	r7, r5
   1d0c0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d0c4:	54e6      	strb	r6, [r4, r3]
   1d0c6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1d0ca:	f43e ae83 	beq.w	1bdd4 <d_print_comp_inner+0xcc>
   1d0ce:	29ff      	cmp	r1, #255	; 0xff
   1d0d0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   1d0d4:	d1f1      	bne.n	1d0ba <d_print_comp_inner+0x13b2>
   1d0d6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d0da:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d0de:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d0e2:	4620      	mov	r0, r4
   1d0e4:	4798      	blx	r3
   1d0e6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d0ea:	3301      	adds	r3, #1
   1d0ec:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d0f0:	2101      	movs	r1, #1
   1d0f2:	2300      	movs	r3, #0
   1d0f4:	e7e3      	b.n	1d0be <d_print_comp_inner+0x13b6>
   1d0f6:	bf00      	nop
   1d0f8:	000438b4 	.word	0x000438b4
   1d0fc:	000438e8 	.word	0x000438e8
   1d100:	000438dc 	.word	0x000438dc
   1d104:	000438f4 	.word	0x000438f4
   1d108:	000439dc 	.word	0x000439dc
   1d10c:	000439c0 	.word	0x000439c0
   1d110:	000439f4 	.word	0x000439f4
   1d114:	2111      	movs	r1, #17
   1d116:	6932      	ldr	r2, [r6, #16]
   1d118:	4620      	mov	r0, r4
   1d11a:	f000 fe89 	bl	1de30 <d_print_comp>
   1d11e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1d122:	29ff      	cmp	r1, #255	; 0xff
   1d124:	f000 82ed 	beq.w	1d702 <d_print_comp_inner+0x19fa>
   1d128:	1c4a      	adds	r2, r1, #1
   1d12a:	235d      	movs	r3, #93	; 0x5d
   1d12c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1d130:	5463      	strb	r3, [r4, r1]
   1d132:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1d136:	f7fe be4d 	b.w	1bdd4 <d_print_comp_inner+0xcc>
   1d13a:	2801      	cmp	r0, #1
   1d13c:	f240 81cb 	bls.w	1d4d6 <d_print_comp_inner+0x17ce>
   1d140:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1d144:	f7ff bb89 	b.w	1c85a <d_print_comp_inner+0xb52>
   1d148:	6937      	ldr	r7, [r6, #16]
   1d14a:	783b      	ldrb	r3, [r7, #0]
   1d14c:	2b47      	cmp	r3, #71	; 0x47
   1d14e:	d002      	beq.n	1d156 <d_print_comp_inner+0x144e>
   1d150:	463a      	mov	r2, r7
   1d152:	f7fe be62 	b.w	1be1a <d_print_comp_inner+0x112>
   1d156:	49d1      	ldr	r1, [pc, #836]	; (1d49c <d_print_comp_inner+0x1794>)
   1d158:	4620      	mov	r0, r4
   1d15a:	f7fc fc13 	bl	19984 <d_append_string>
   1d15e:	693a      	ldr	r2, [r7, #16]
   1d160:	49cf      	ldr	r1, [pc, #828]	; (1d4a0 <d_print_comp_inner+0x1798>)
   1d162:	3201      	adds	r2, #1
   1d164:	a802      	add	r0, sp, #8
   1d166:	f01b f8b9 	bl	382dc <sprintf>
   1d16a:	a802      	add	r0, sp, #8
   1d16c:	f7fb faa8 	bl	186c0 <strlen>
   1d170:	2800      	cmp	r0, #0
   1d172:	f000 83e6 	beq.w	1d942 <d_print_comp_inner+0x1c3a>
   1d176:	ad02      	add	r5, sp, #8
   1d178:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1d17c:	eb05 0900 	add.w	r9, r5, r0
   1d180:	f04f 0800 	mov.w	r8, #0
   1d184:	e009      	b.n	1d19a <d_print_comp_inner+0x1492>
   1d186:	460b      	mov	r3, r1
   1d188:	3101      	adds	r1, #1
   1d18a:	45a9      	cmp	r9, r5
   1d18c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d190:	54e6      	strb	r6, [r4, r3]
   1d192:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1d196:	f000 83d4 	beq.w	1d942 <d_print_comp_inner+0x1c3a>
   1d19a:	29ff      	cmp	r1, #255	; 0xff
   1d19c:	f815 6b01 	ldrb.w	r6, [r5], #1
   1d1a0:	d1f1      	bne.n	1d186 <d_print_comp_inner+0x147e>
   1d1a2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d1a6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d1aa:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d1ae:	4620      	mov	r0, r4
   1d1b0:	4798      	blx	r3
   1d1b2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d1b6:	3301      	adds	r3, #1
   1d1b8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d1bc:	2101      	movs	r1, #1
   1d1be:	2300      	movs	r3, #0
   1d1c0:	e7e3      	b.n	1d18a <d_print_comp_inner+0x1482>
   1d1c2:	4fb8      	ldr	r7, [pc, #736]	; (1d4a4 <d_print_comp_inner+0x179c>)
   1d1c4:	6932      	ldr	r2, [r6, #16]
   1d1c6:	2111      	movs	r1, #17
   1d1c8:	4620      	mov	r0, r4
   1d1ca:	f000 fe31 	bl	1de30 <d_print_comp>
   1d1ce:	f107 0904 	add.w	r9, r7, #4
   1d1d2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1d1d6:	2520      	movs	r5, #32
   1d1d8:	f04f 0800 	mov.w	r8, #0
   1d1dc:	e00b      	b.n	1d1f6 <d_print_comp_inner+0x14ee>
   1d1de:	460b      	mov	r3, r1
   1d1e0:	3101      	adds	r1, #1
   1d1e2:	454f      	cmp	r7, r9
   1d1e4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d1e8:	54e5      	strb	r5, [r4, r3]
   1d1ea:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d1ee:	f43e ae13 	beq.w	1be18 <d_print_comp_inner+0x110>
   1d1f2:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d1f6:	29ff      	cmp	r1, #255	; 0xff
   1d1f8:	d1f1      	bne.n	1d1de <d_print_comp_inner+0x14d6>
   1d1fa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d1fe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d202:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d206:	4620      	mov	r0, r4
   1d208:	4798      	blx	r3
   1d20a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d20e:	3301      	adds	r3, #1
   1d210:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d214:	2101      	movs	r1, #1
   1d216:	2300      	movs	r3, #0
   1d218:	e7e3      	b.n	1d1e2 <d_print_comp_inner+0x14da>
   1d21a:	4fa3      	ldr	r7, [pc, #652]	; (1d4a8 <d_print_comp_inner+0x17a0>)
   1d21c:	68f2      	ldr	r2, [r6, #12]
   1d21e:	2111      	movs	r1, #17
   1d220:	4620      	mov	r0, r4
   1d222:	f000 fe05 	bl	1de30 <d_print_comp>
   1d226:	f107 0903 	add.w	r9, r7, #3
   1d22a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1d22e:	252d      	movs	r5, #45	; 0x2d
   1d230:	f04f 0800 	mov.w	r8, #0
   1d234:	e00b      	b.n	1d24e <d_print_comp_inner+0x1546>
   1d236:	460b      	mov	r3, r1
   1d238:	3101      	adds	r1, #1
   1d23a:	454f      	cmp	r7, r9
   1d23c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d240:	54e5      	strb	r5, [r4, r3]
   1d242:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d246:	f43e adfb 	beq.w	1be40 <d_print_comp_inner+0x138>
   1d24a:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d24e:	29ff      	cmp	r1, #255	; 0xff
   1d250:	d1f1      	bne.n	1d236 <d_print_comp_inner+0x152e>
   1d252:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d256:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d25a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d25e:	4620      	mov	r0, r4
   1d260:	4798      	blx	r3
   1d262:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d266:	3301      	adds	r3, #1
   1d268:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d26c:	2101      	movs	r1, #1
   1d26e:	2300      	movs	r3, #0
   1d270:	e7e3      	b.n	1d23a <d_print_comp_inner+0x1532>
   1d272:	68f2      	ldr	r2, [r6, #12]
   1d274:	498a      	ldr	r1, [pc, #552]	; (1d4a0 <d_print_comp_inner+0x1798>)
   1d276:	3201      	adds	r2, #1
   1d278:	a802      	add	r0, sp, #8
   1d27a:	f01b f82f 	bl	382dc <sprintf>
   1d27e:	a802      	add	r0, sp, #8
   1d280:	f7fb fa1e 	bl	186c0 <strlen>
   1d284:	b318      	cbz	r0, 1d2ce <d_print_comp_inner+0x15c6>
   1d286:	ad02      	add	r5, sp, #8
   1d288:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1d28c:	182f      	adds	r7, r5, r0
   1d28e:	f04f 0800 	mov.w	r8, #0
   1d292:	e008      	b.n	1d2a6 <d_print_comp_inner+0x159e>
   1d294:	460b      	mov	r3, r1
   1d296:	3101      	adds	r1, #1
   1d298:	42af      	cmp	r7, r5
   1d29a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d29e:	54e6      	strb	r6, [r4, r3]
   1d2a0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1d2a4:	d015      	beq.n	1d2d2 <d_print_comp_inner+0x15ca>
   1d2a6:	29ff      	cmp	r1, #255	; 0xff
   1d2a8:	f815 6b01 	ldrb.w	r6, [r5], #1
   1d2ac:	d1f2      	bne.n	1d294 <d_print_comp_inner+0x158c>
   1d2ae:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d2b2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d2b6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d2ba:	4620      	mov	r0, r4
   1d2bc:	4798      	blx	r3
   1d2be:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d2c2:	3301      	adds	r3, #1
   1d2c4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d2c8:	2101      	movs	r1, #1
   1d2ca:	2300      	movs	r3, #0
   1d2cc:	e7e4      	b.n	1d298 <d_print_comp_inner+0x1590>
   1d2ce:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1d2d2:	29ff      	cmp	r1, #255	; 0xff
   1d2d4:	f47f a9d2 	bne.w	1c67c <d_print_comp_inner+0x974>
   1d2d8:	2500      	movs	r5, #0
   1d2da:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1d2de:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1d2e2:	4620      	mov	r0, r4
   1d2e4:	4798      	blx	r3
   1d2e6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d2ea:	2201      	movs	r2, #1
   1d2ec:	4413      	add	r3, r2
   1d2ee:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d2f2:	4629      	mov	r1, r5
   1d2f4:	f7ff b9c3 	b.w	1c67e <d_print_comp_inner+0x976>
   1d2f8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1d2fc:	68f2      	ldr	r2, [r6, #12]
   1d2fe:	4f6b      	ldr	r7, [pc, #428]	; (1d4ac <d_print_comp_inner+0x17a4>)
   1d300:	3301      	adds	r3, #1
   1d302:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   1d306:	2111      	movs	r1, #17
   1d308:	4620      	mov	r0, r4
   1d30a:	f000 fd91 	bl	1de30 <d_print_comp>
   1d30e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1d312:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1d316:	3b01      	subs	r3, #1
   1d318:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   1d31c:	f107 0901 	add.w	r9, r7, #1
   1d320:	2529      	movs	r5, #41	; 0x29
   1d322:	f04f 0800 	mov.w	r8, #0
   1d326:	e00a      	b.n	1d33e <d_print_comp_inner+0x1636>
   1d328:	460b      	mov	r3, r1
   1d32a:	3101      	adds	r1, #1
   1d32c:	45b9      	cmp	r9, r7
   1d32e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d332:	54e5      	strb	r5, [r4, r3]
   1d334:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d338:	d01b      	beq.n	1d372 <d_print_comp_inner+0x166a>
   1d33a:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d33e:	29ff      	cmp	r1, #255	; 0xff
   1d340:	d1f2      	bne.n	1d328 <d_print_comp_inner+0x1620>
   1d342:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d346:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d34a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d34e:	4620      	mov	r0, r4
   1d350:	4798      	blx	r3
   1d352:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d356:	3301      	adds	r3, #1
   1d358:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d35c:	2101      	movs	r1, #1
   1d35e:	2300      	movs	r3, #0
   1d360:	e7e4      	b.n	1d32c <d_print_comp_inner+0x1624>
   1d362:	4632      	mov	r2, r6
   1d364:	2111      	movs	r1, #17
   1d366:	4620      	mov	r0, r4
   1d368:	b013      	add	sp, #76	; 0x4c
   1d36a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d36e:	f001 bb9f 	b.w	1eab0 <d_print_conversion>
   1d372:	6932      	ldr	r2, [r6, #16]
   1d374:	494a      	ldr	r1, [pc, #296]	; (1d4a0 <d_print_comp_inner+0x1798>)
   1d376:	3201      	adds	r2, #1
   1d378:	a802      	add	r0, sp, #8
   1d37a:	f01a ffaf 	bl	382dc <sprintf>
   1d37e:	a802      	add	r0, sp, #8
   1d380:	f7fb f99e 	bl	186c0 <strlen>
   1d384:	2800      	cmp	r0, #0
   1d386:	d0a2      	beq.n	1d2ce <d_print_comp_inner+0x15c6>
   1d388:	ad02      	add	r5, sp, #8
   1d38a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1d38e:	182f      	adds	r7, r5, r0
   1d390:	f04f 0800 	mov.w	r8, #0
   1d394:	e008      	b.n	1d3a8 <d_print_comp_inner+0x16a0>
   1d396:	460b      	mov	r3, r1
   1d398:	3101      	adds	r1, #1
   1d39a:	42af      	cmp	r7, r5
   1d39c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d3a0:	54e6      	strb	r6, [r4, r3]
   1d3a2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1d3a6:	d094      	beq.n	1d2d2 <d_print_comp_inner+0x15ca>
   1d3a8:	29ff      	cmp	r1, #255	; 0xff
   1d3aa:	f815 6b01 	ldrb.w	r6, [r5], #1
   1d3ae:	d1f2      	bne.n	1d396 <d_print_comp_inner+0x168e>
   1d3b0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d3b4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d3b8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d3bc:	4620      	mov	r0, r4
   1d3be:	4798      	blx	r3
   1d3c0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d3c4:	3301      	adds	r3, #1
   1d3c6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d3ca:	2101      	movs	r1, #1
   1d3cc:	2300      	movs	r3, #0
   1d3ce:	e7e4      	b.n	1d39a <d_print_comp_inner+0x1692>
   1d3d0:	687d      	ldr	r5, [r7, #4]
   1d3d2:	782b      	ldrb	r3, [r5, #0]
   1d3d4:	3b61      	subs	r3, #97	; 0x61
   1d3d6:	2b19      	cmp	r3, #25
   1d3d8:	f240 825b 	bls.w	1d892 <d_print_comp_inner+0x1b8a>
   1d3dc:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
   1d3e0:	5deb      	ldrb	r3, [r5, r7]
   1d3e2:	2b20      	cmp	r3, #32
   1d3e4:	bf18      	it	ne
   1d3e6:	4647      	movne	r7, r8
   1d3e8:	2f00      	cmp	r7, #0
   1d3ea:	f43e acf3 	beq.w	1bdd4 <d_print_comp_inner+0xcc>
   1d3ee:	3d01      	subs	r5, #1
   1d3f0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1d3f4:	442f      	add	r7, r5
   1d3f6:	f04f 0800 	mov.w	r8, #0
   1d3fa:	e009      	b.n	1d410 <d_print_comp_inner+0x1708>
   1d3fc:	460b      	mov	r3, r1
   1d3fe:	3101      	adds	r1, #1
   1d400:	42af      	cmp	r7, r5
   1d402:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d406:	54e6      	strb	r6, [r4, r3]
   1d408:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1d40c:	f43e ace2 	beq.w	1bdd4 <d_print_comp_inner+0xcc>
   1d410:	29ff      	cmp	r1, #255	; 0xff
   1d412:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   1d416:	d1f1      	bne.n	1d3fc <d_print_comp_inner+0x16f4>
   1d418:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d41c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d420:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d424:	4620      	mov	r0, r4
   1d426:	4798      	blx	r3
   1d428:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d42c:	3301      	adds	r3, #1
   1d42e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d432:	2101      	movs	r1, #1
   1d434:	2300      	movs	r3, #0
   1d436:	e7e3      	b.n	1d400 <d_print_comp_inner+0x16f8>
   1d438:	2111      	movs	r1, #17
   1d43a:	68f2      	ldr	r2, [r6, #12]
   1d43c:	4620      	mov	r0, r4
   1d43e:	f000 fcf7 	bl	1de30 <d_print_comp>
   1d442:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1d446:	29ff      	cmp	r1, #255	; 0xff
   1d448:	f000 825a 	beq.w	1d900 <d_print_comp_inner+0x1bf8>
   1d44c:	1c4a      	adds	r2, r1, #1
   1d44e:	2329      	movs	r3, #41	; 0x29
   1d450:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1d454:	5463      	strb	r3, [r4, r1]
   1d456:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1d45a:	f7fe bcbb 	b.w	1bdd4 <d_print_comp_inner+0xcc>
   1d45e:	4632      	mov	r2, r6
   1d460:	2111      	movs	r1, #17
   1d462:	4620      	mov	r0, r4
   1d464:	f000 fd12 	bl	1de8c <d_print_mod>
   1d468:	f7fe bcce 	b.w	1be08 <d_print_comp_inner+0x100>
   1d46c:	6932      	ldr	r2, [r6, #16]
   1d46e:	f8d4 6128 	ldr.w	r6, [r4, #296]	; 0x128
   1d472:	460d      	mov	r5, r1
   1d474:	4620      	mov	r0, r4
   1d476:	2111      	movs	r1, #17
   1d478:	f000 fcda 	bl	1de30 <d_print_comp>
   1d47c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d480:	42b3      	cmp	r3, r6
   1d482:	f47e aca7 	bne.w	1bdd4 <d_print_comp_inner+0xcc>
   1d486:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1d48a:	42ab      	cmp	r3, r5
   1d48c:	f47e aca2 	bne.w	1bdd4 <d_print_comp_inner+0xcc>
   1d490:	3d02      	subs	r5, #2
   1d492:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   1d496:	f7fe bc9d 	b.w	1bdd4 <d_print_comp_inner+0xcc>
   1d49a:	bf00      	nop
   1d49c:	000438a0 	.word	0x000438a0
   1d4a0:	0004382c 	.word	0x0004382c
   1d4a4:	000439d4 	.word	0x000439d4
   1d4a8:	00043910 	.word	0x00043910
   1d4ac:	00043b04 	.word	0x00043b04
   1d4b0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1d4b4:	2bff      	cmp	r3, #255	; 0xff
   1d4b6:	f000 834b 	beq.w	1db50 <d_print_comp_inner+0x1e48>
   1d4ba:	1c58      	adds	r0, r3, #1
   1d4bc:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
   1d4c0:	f855 2c0c 	ldr.w	r2, [r5, #-12]
   1d4c4:	54e7      	strb	r7, [r4, r3]
   1d4c6:	2111      	movs	r1, #17
   1d4c8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1d4cc:	4620      	mov	r0, r4
   1d4ce:	f000 fcdd 	bl	1de8c <d_print_mod>
   1d4d2:	f7ff b9d5 	b.w	1c880 <d_print_comp_inner+0xb78>
   1d4d6:	68ff      	ldr	r7, [r7, #12]
   1d4d8:	4652      	mov	r2, sl
   1d4da:	2f00      	cmp	r7, #0
   1d4dc:	f43e ac75 	beq.w	1bdca <d_print_comp_inner+0xc2>
   1d4e0:	2d04      	cmp	r5, #4
   1d4e2:	f103 0310 	add.w	r3, r3, #16
   1d4e6:	f000 81df 	beq.w	1d8a8 <d_print_comp_inner+0x1ba0>
   1d4ea:	4629      	mov	r1, r5
   1d4ec:	f7ff b981 	b.w	1c7f2 <d_print_comp_inner+0xaea>
   1d4f0:	f8d6 900c 	ldr.w	r9, [r6, #12]
   1d4f4:	f1b8 0f00 	cmp.w	r8, #0
   1d4f8:	f43e ac6c 	beq.w	1bdd4 <d_print_comp_inner+0xcc>
   1d4fc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   1d500:	f7fe beef 	b.w	1c2e2 <d_print_comp_inner+0x5da>
   1d504:	7833      	ldrb	r3, [r6, #0]
   1d506:	2b2f      	cmp	r3, #47	; 0x2f
   1d508:	f47e acdc 	bne.w	1bec4 <d_print_comp_inner+0x1bc>
   1d50c:	f8d4 e114 	ldr.w	lr, [r4, #276]	; 0x114
   1d510:	4606      	mov	r6, r0
   1d512:	f7fe bcd9 	b.w	1bec8 <d_print_comp_inner+0x1c0>
   1d516:	2d07      	cmp	r5, #7
   1d518:	f47e ad50 	bne.w	1bfbc <d_print_comp_inner+0x2b4>
   1d51c:	6931      	ldr	r1, [r6, #16]
   1d51e:	7808      	ldrb	r0, [r1, #0]
   1d520:	2800      	cmp	r0, #0
   1d522:	f47e ad4b 	bne.w	1bfbc <d_print_comp_inner+0x2b4>
   1d526:	6908      	ldr	r0, [r1, #16]
   1d528:	2801      	cmp	r0, #1
   1d52a:	f47e ad47 	bne.w	1bfbc <d_print_comp_inner+0x2b4>
   1d52e:	2b3d      	cmp	r3, #61	; 0x3d
   1d530:	f47e ad44 	bne.w	1bfbc <d_print_comp_inner+0x2b4>
   1d534:	68cb      	ldr	r3, [r1, #12]
   1d536:	781b      	ldrb	r3, [r3, #0]
   1d538:	2b30      	cmp	r3, #48	; 0x30
   1d53a:	f000 846a 	beq.w	1de12 <d_print_comp_inner+0x210a>
   1d53e:	2b31      	cmp	r3, #49	; 0x31
   1d540:	f47e ad3c 	bne.w	1bfbc <d_print_comp_inner+0x2b4>
   1d544:	49ba      	ldr	r1, [pc, #744]	; (1d830 <d_print_comp_inner+0x1b28>)
   1d546:	4620      	mov	r0, r4
   1d548:	b013      	add	sp, #76	; 0x4c
   1d54a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d54e:	f7fc ba19 	b.w	19984 <d_append_string>
   1d552:	2500      	movs	r5, #0
   1d554:	f7fe bcac 	b.w	1beb0 <d_print_comp_inner+0x1a8>
   1d558:	4631      	mov	r1, r6
   1d55a:	f7fc f9af 	bl	198bc <d_lookup_template_argument>
   1d55e:	4602      	mov	r2, r0
   1d560:	2800      	cmp	r0, #0
   1d562:	f43e ac34 	beq.w	1bdce <d_print_comp_inner+0xc6>
   1d566:	7803      	ldrb	r3, [r0, #0]
   1d568:	2b2f      	cmp	r3, #47	; 0x2f
   1d56a:	f000 8300 	beq.w	1db6e <d_print_comp_inner+0x1e66>
   1d56e:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
   1d572:	682b      	ldr	r3, [r5, #0]
   1d574:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1d578:	2111      	movs	r1, #17
   1d57a:	4620      	mov	r0, r4
   1d57c:	f000 fc58 	bl	1de30 <d_print_comp>
   1d580:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
   1d584:	f7fe bc26 	b.w	1bdd4 <d_print_comp_inner+0xcc>
   1d588:	68f2      	ldr	r2, [r6, #12]
   1d58a:	49aa      	ldr	r1, [pc, #680]	; (1d834 <d_print_comp_inner+0x1b2c>)
   1d58c:	3201      	adds	r2, #1
   1d58e:	a802      	add	r0, sp, #8
   1d590:	f01a fea4 	bl	382dc <sprintf>
   1d594:	a802      	add	r0, sp, #8
   1d596:	f7fb f893 	bl	186c0 <strlen>
   1d59a:	2800      	cmp	r0, #0
   1d59c:	f43e ac1a 	beq.w	1bdd4 <d_print_comp_inner+0xcc>
   1d5a0:	ad02      	add	r5, sp, #8
   1d5a2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1d5a6:	182f      	adds	r7, r5, r0
   1d5a8:	f04f 0800 	mov.w	r8, #0
   1d5ac:	e009      	b.n	1d5c2 <d_print_comp_inner+0x18ba>
   1d5ae:	460b      	mov	r3, r1
   1d5b0:	3101      	adds	r1, #1
   1d5b2:	42bd      	cmp	r5, r7
   1d5b4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d5b8:	54e6      	strb	r6, [r4, r3]
   1d5ba:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1d5be:	f43e ac09 	beq.w	1bdd4 <d_print_comp_inner+0xcc>
   1d5c2:	29ff      	cmp	r1, #255	; 0xff
   1d5c4:	f815 6b01 	ldrb.w	r6, [r5], #1
   1d5c8:	d1f1      	bne.n	1d5ae <d_print_comp_inner+0x18a6>
   1d5ca:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d5ce:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d5d2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d5d6:	4620      	mov	r0, r4
   1d5d8:	4798      	blx	r3
   1d5da:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d5de:	3301      	adds	r3, #1
   1d5e0:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d5e4:	2101      	movs	r1, #1
   1d5e6:	2300      	movs	r3, #0
   1d5e8:	e7e3      	b.n	1d5b2 <d_print_comp_inner+0x18aa>
   1d5ea:	4e93      	ldr	r6, [pc, #588]	; (1d838 <d_print_comp_inner+0x1b30>)
   1d5ec:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d5f0:	f106 0905 	add.w	r9, r6, #5
   1d5f4:	257b      	movs	r5, #123	; 0x7b
   1d5f6:	f04f 0800 	mov.w	r8, #0
   1d5fa:	e00a      	b.n	1d612 <d_print_comp_inner+0x190a>
   1d5fc:	460b      	mov	r3, r1
   1d5fe:	3101      	adds	r1, #1
   1d600:	45b1      	cmp	r9, r6
   1d602:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d606:	54e5      	strb	r5, [r4, r3]
   1d608:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d60c:	d013      	beq.n	1d636 <d_print_comp_inner+0x192e>
   1d60e:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   1d612:	29ff      	cmp	r1, #255	; 0xff
   1d614:	d1f2      	bne.n	1d5fc <d_print_comp_inner+0x18f4>
   1d616:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d61a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d61e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d622:	4620      	mov	r0, r4
   1d624:	4798      	blx	r3
   1d626:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d62a:	3301      	adds	r3, #1
   1d62c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d630:	2101      	movs	r1, #1
   1d632:	2300      	movs	r3, #0
   1d634:	e7e4      	b.n	1d600 <d_print_comp_inner+0x18f8>
   1d636:	497f      	ldr	r1, [pc, #508]	; (1d834 <d_print_comp_inner+0x1b2c>)
   1d638:	463a      	mov	r2, r7
   1d63a:	a802      	add	r0, sp, #8
   1d63c:	f01a fe4e 	bl	382dc <sprintf>
   1d640:	a802      	add	r0, sp, #8
   1d642:	f7fb f83d 	bl	186c0 <strlen>
   1d646:	b318      	cbz	r0, 1d690 <d_print_comp_inner+0x1988>
   1d648:	ad02      	add	r5, sp, #8
   1d64a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1d64e:	182f      	adds	r7, r5, r0
   1d650:	f04f 0800 	mov.w	r8, #0
   1d654:	e008      	b.n	1d668 <d_print_comp_inner+0x1960>
   1d656:	460b      	mov	r3, r1
   1d658:	3101      	adds	r1, #1
   1d65a:	42af      	cmp	r7, r5
   1d65c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d660:	54e6      	strb	r6, [r4, r3]
   1d662:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1d666:	d015      	beq.n	1d694 <d_print_comp_inner+0x198c>
   1d668:	29ff      	cmp	r1, #255	; 0xff
   1d66a:	f815 6b01 	ldrb.w	r6, [r5], #1
   1d66e:	d1f2      	bne.n	1d656 <d_print_comp_inner+0x194e>
   1d670:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d674:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d678:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d67c:	4620      	mov	r0, r4
   1d67e:	4798      	blx	r3
   1d680:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d684:	3301      	adds	r3, #1
   1d686:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d68a:	2101      	movs	r1, #1
   1d68c:	2300      	movs	r3, #0
   1d68e:	e7e4      	b.n	1d65a <d_print_comp_inner+0x1952>
   1d690:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1d694:	29ff      	cmp	r1, #255	; 0xff
   1d696:	f000 82c7 	beq.w	1dc28 <d_print_comp_inner+0x1f20>
   1d69a:	237d      	movs	r3, #125	; 0x7d
   1d69c:	1c4a      	adds	r2, r1, #1
   1d69e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1d6a2:	5463      	strb	r3, [r4, r1]
   1d6a4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1d6a8:	f7fe bb94 	b.w	1bdd4 <d_print_comp_inner+0xcc>
   1d6ac:	4d63      	ldr	r5, [pc, #396]	; (1d83c <d_print_comp_inner+0x1b34>)
   1d6ae:	265f      	movs	r6, #95	; 0x5f
   1d6b0:	1d6f      	adds	r7, r5, #5
   1d6b2:	f04f 0800 	mov.w	r8, #0
   1d6b6:	e00b      	b.n	1d6d0 <d_print_comp_inner+0x19c8>
   1d6b8:	460b      	mov	r3, r1
   1d6ba:	3101      	adds	r1, #1
   1d6bc:	42af      	cmp	r7, r5
   1d6be:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d6c2:	54e6      	strb	r6, [r4, r3]
   1d6c4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1d6c8:	f43e ab84 	beq.w	1bdd4 <d_print_comp_inner+0xcc>
   1d6cc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   1d6d0:	29ff      	cmp	r1, #255	; 0xff
   1d6d2:	d1f1      	bne.n	1d6b8 <d_print_comp_inner+0x19b0>
   1d6d4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d6d8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d6dc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d6e0:	4620      	mov	r0, r4
   1d6e2:	4798      	blx	r3
   1d6e4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d6e8:	3301      	adds	r3, #1
   1d6ea:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d6ee:	2101      	movs	r1, #1
   1d6f0:	2300      	movs	r3, #0
   1d6f2:	e7e3      	b.n	1d6bc <d_print_comp_inner+0x19b4>
   1d6f4:	2500      	movs	r5, #0
   1d6f6:	f7fe bc61 	b.w	1bfbc <d_print_comp_inner+0x2b4>
   1d6fa:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1d6fe:	f7ff b9ea 	b.w	1cad6 <d_print_comp_inner+0xdce>
   1d702:	2500      	movs	r5, #0
   1d704:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1d708:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1d70c:	4620      	mov	r0, r4
   1d70e:	4798      	blx	r3
   1d710:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d714:	2201      	movs	r2, #1
   1d716:	4413      	add	r3, r2
   1d718:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d71c:	4629      	mov	r1, r5
   1d71e:	e504      	b.n	1d12a <d_print_comp_inner+0x1422>
   1d720:	68fb      	ldr	r3, [r7, #12]
   1d722:	681e      	ldr	r6, [r3, #0]
   1d724:	7833      	ldrb	r3, [r6, #0]
   1d726:	2b61      	cmp	r3, #97	; 0x61
   1d728:	f040 80c3 	bne.w	1d8b2 <d_print_comp_inner+0x1baa>
   1d72c:	7872      	ldrb	r2, [r6, #1]
   1d72e:	2a64      	cmp	r2, #100	; 0x64
   1d730:	f040 80bf 	bne.w	1d8b2 <d_print_comp_inner+0x1baa>
   1d734:	78b2      	ldrb	r2, [r6, #2]
   1d736:	2a00      	cmp	r2, #0
   1d738:	f040 80bb 	bne.w	1d8b2 <d_print_comp_inner+0x1baa>
   1d73c:	782a      	ldrb	r2, [r5, #0]
   1d73e:	2a03      	cmp	r2, #3
   1d740:	f000 82de 	beq.w	1dd00 <d_print_comp_inner+0x1ff8>
   1d744:	2a39      	cmp	r2, #57	; 0x39
   1d746:	f000 8313 	beq.w	1dd70 <d_print_comp_inner+0x2068>
   1d74a:	2b73      	cmp	r3, #115	; 0x73
   1d74c:	d11d      	bne.n	1d78a <d_print_comp_inner+0x1a82>
   1d74e:	7872      	ldrb	r2, [r6, #1]
   1d750:	2a5a      	cmp	r2, #90	; 0x5a
   1d752:	d141      	bne.n	1d7d8 <d_print_comp_inner+0x1ad0>
   1d754:	f896 8002 	ldrb.w	r8, [r6, #2]
   1d758:	f1b8 0f00 	cmp.w	r8, #0
   1d75c:	d13c      	bne.n	1d7d8 <d_print_comp_inner+0x1ad0>
   1d75e:	4629      	mov	r1, r5
   1d760:	4620      	mov	r0, r4
   1d762:	f7fc f8c7 	bl	198f4 <d_find_pack>
   1d766:	b930      	cbnz	r0, 1d776 <d_print_comp_inner+0x1a6e>
   1d768:	e008      	b.n	1d77c <d_print_comp_inner+0x1a74>
   1d76a:	68c3      	ldr	r3, [r0, #12]
   1d76c:	b133      	cbz	r3, 1d77c <d_print_comp_inner+0x1a74>
   1d76e:	6900      	ldr	r0, [r0, #16]
   1d770:	f108 0801 	add.w	r8, r8, #1
   1d774:	b110      	cbz	r0, 1d77c <d_print_comp_inner+0x1a74>
   1d776:	7803      	ldrb	r3, [r0, #0]
   1d778:	2b2f      	cmp	r3, #47	; 0x2f
   1d77a:	d0f6      	beq.n	1d76a <d_print_comp_inner+0x1a62>
   1d77c:	4641      	mov	r1, r8
   1d77e:	4620      	mov	r0, r4
   1d780:	b013      	add	sp, #76	; 0x4c
   1d782:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d786:	f7fc b961 	b.w	19a4c <d_append_num>
   1d78a:	463a      	mov	r2, r7
   1d78c:	2111      	movs	r1, #17
   1d78e:	4620      	mov	r0, r4
   1d790:	f001 fa38 	bl	1ec04 <d_print_expr_op>
   1d794:	7833      	ldrb	r3, [r6, #0]
   1d796:	2b67      	cmp	r3, #103	; 0x67
   1d798:	d107      	bne.n	1d7aa <d_print_comp_inner+0x1aa2>
   1d79a:	7872      	ldrb	r2, [r6, #1]
   1d79c:	2a73      	cmp	r2, #115	; 0x73
   1d79e:	d104      	bne.n	1d7aa <d_print_comp_inner+0x1aa2>
   1d7a0:	78b2      	ldrb	r2, [r6, #2]
   1d7a2:	b912      	cbnz	r2, 1d7aa <d_print_comp_inner+0x1aa2>
   1d7a4:	462a      	mov	r2, r5
   1d7a6:	f7fe bb38 	b.w	1be1a <d_print_comp_inner+0x112>
   1d7aa:	2b73      	cmp	r3, #115	; 0x73
   1d7ac:	f47e aeb1 	bne.w	1c512 <d_print_comp_inner+0x80a>
   1d7b0:	7873      	ldrb	r3, [r6, #1]
   1d7b2:	2b74      	cmp	r3, #116	; 0x74
   1d7b4:	f47e aead 	bne.w	1c512 <d_print_comp_inner+0x80a>
   1d7b8:	78b3      	ldrb	r3, [r6, #2]
   1d7ba:	2b00      	cmp	r3, #0
   1d7bc:	f47e aea9 	bne.w	1c512 <d_print_comp_inner+0x80a>
   1d7c0:	2128      	movs	r1, #40	; 0x28
   1d7c2:	4620      	mov	r0, r4
   1d7c4:	f7fc f858 	bl	19878 <d_append_char>
   1d7c8:	2111      	movs	r1, #17
   1d7ca:	462a      	mov	r2, r5
   1d7cc:	4620      	mov	r0, r4
   1d7ce:	f000 fb2f 	bl	1de30 <d_print_comp>
   1d7d2:	2129      	movs	r1, #41	; 0x29
   1d7d4:	f7fe bc1f 	b.w	1c016 <d_print_comp_inner+0x30e>
   1d7d8:	2b73      	cmp	r3, #115	; 0x73
   1d7da:	d1d6      	bne.n	1d78a <d_print_comp_inner+0x1a82>
   1d7dc:	7873      	ldrb	r3, [r6, #1]
   1d7de:	2b50      	cmp	r3, #80	; 0x50
   1d7e0:	d1d3      	bne.n	1d78a <d_print_comp_inner+0x1a82>
   1d7e2:	78b3      	ldrb	r3, [r6, #2]
   1d7e4:	2b00      	cmp	r3, #0
   1d7e6:	d1d0      	bne.n	1d78a <d_print_comp_inner+0x1a82>
   1d7e8:	461e      	mov	r6, r3
   1d7ea:	e004      	b.n	1d7f6 <d_print_comp_inner+0x1aee>
   1d7ec:	3601      	adds	r6, #1
   1d7ee:	692d      	ldr	r5, [r5, #16]
   1d7f0:	2d00      	cmp	r5, #0
   1d7f2:	f000 81c9 	beq.w	1db88 <d_print_comp_inner+0x1e80>
   1d7f6:	782b      	ldrb	r3, [r5, #0]
   1d7f8:	2b2f      	cmp	r3, #47	; 0x2f
   1d7fa:	f040 81c5 	bne.w	1db88 <d_print_comp_inner+0x1e80>
   1d7fe:	68eb      	ldr	r3, [r5, #12]
   1d800:	2b00      	cmp	r3, #0
   1d802:	f000 81c1 	beq.w	1db88 <d_print_comp_inner+0x1e80>
   1d806:	781a      	ldrb	r2, [r3, #0]
   1d808:	2a4b      	cmp	r2, #75	; 0x4b
   1d80a:	d1ef      	bne.n	1d7ec <d_print_comp_inner+0x1ae4>
   1d80c:	68d9      	ldr	r1, [r3, #12]
   1d80e:	4620      	mov	r0, r4
   1d810:	f7fc f870 	bl	198f4 <d_find_pack>
   1d814:	4603      	mov	r3, r0
   1d816:	b148      	cbz	r0, 1d82c <d_print_comp_inner+0x1b24>
   1d818:	2300      	movs	r3, #0
   1d81a:	e004      	b.n	1d826 <d_print_comp_inner+0x1b1e>
   1d81c:	68c2      	ldr	r2, [r0, #12]
   1d81e:	b12a      	cbz	r2, 1d82c <d_print_comp_inner+0x1b24>
   1d820:	6900      	ldr	r0, [r0, #16]
   1d822:	3301      	adds	r3, #1
   1d824:	b110      	cbz	r0, 1d82c <d_print_comp_inner+0x1b24>
   1d826:	7802      	ldrb	r2, [r0, #0]
   1d828:	2a2f      	cmp	r2, #47	; 0x2f
   1d82a:	d0f7      	beq.n	1d81c <d_print_comp_inner+0x1b14>
   1d82c:	441e      	add	r6, r3
   1d82e:	e7de      	b.n	1d7ee <d_print_comp_inner+0x1ae6>
   1d830:	00043a80 	.word	0x00043a80
   1d834:	0004382c 	.word	0x0004382c
   1d838:	00043ab0 	.word	0x00043ab0
   1d83c:	00043a34 	.word	0x00043a34
   1d840:	2b01      	cmp	r3, #1
   1d842:	f63f a80a 	bhi.w	1c85a <d_print_comp_inner+0xb52>
   1d846:	2d04      	cmp	r5, #4
   1d848:	f43e aac1 	beq.w	1bdce <d_print_comp_inner+0xc6>
   1d84c:	468e      	mov	lr, r1
   1d84e:	f101 0b10 	add.w	fp, r1, #16
   1d852:	c90f      	ldmia	r1, {r0, r1, r2, r3}
   1d854:	e88b 000f 	stmia.w	fp, {r0, r1, r2, r3}
   1d858:	e9ce 7a01 	strd	r7, sl, [lr, #4]
   1d85c:	68ff      	ldr	r7, [r7, #12]
   1d85e:	f8ce e010 	str.w	lr, [lr, #16]
   1d862:	3501      	adds	r5, #1
   1d864:	f8ce c00c 	str.w	ip, [lr, #12]
   1d868:	4659      	mov	r1, fp
   1d86a:	f8c4 b114 	str.w	fp, [r4, #276]	; 0x114
   1d86e:	2f00      	cmp	r7, #0
   1d870:	f43e aaad 	beq.w	1bdce <d_print_comp_inner+0xc6>
   1d874:	783a      	ldrb	r2, [r7, #0]
   1d876:	f7fe bfde 	b.w	1c836 <d_print_comp_inner+0xb2e>
   1d87a:	4632      	mov	r2, r6
   1d87c:	2111      	movs	r1, #17
   1d87e:	4620      	mov	r0, r4
   1d880:	f000 fb04 	bl	1de8c <d_print_mod>
   1d884:	f7fe bb06 	b.w	1be94 <d_print_comp_inner+0x18c>
   1d888:	49c8      	ldr	r1, [pc, #800]	; (1dbac <d_print_comp_inner+0x1ea4>)
   1d88a:	f7fc f87b 	bl	19984 <d_append_string>
   1d88e:	f7ff b90c 	b.w	1caaa <d_print_comp_inner+0xda2>
   1d892:	29ff      	cmp	r1, #255	; 0xff
   1d894:	f000 8205 	beq.w	1dca2 <d_print_comp_inner+0x1f9a>
   1d898:	1c4b      	adds	r3, r1, #1
   1d89a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1d89e:	2320      	movs	r3, #32
   1d8a0:	5463      	strb	r3, [r4, r1]
   1d8a2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1d8a6:	e599      	b.n	1d3dc <d_print_comp_inner+0x16d4>
   1d8a8:	2301      	movs	r3, #1
   1d8aa:	e9c4 a345 	strd	sl, r3, [r4, #276]	; 0x114
   1d8ae:	f7fe ba91 	b.w	1bdd4 <d_print_comp_inner+0xcc>
   1d8b2:	782a      	ldrb	r2, [r5, #0]
   1d8b4:	e746      	b.n	1d744 <d_print_comp_inner+0x1a3c>
   1d8b6:	460d      	mov	r5, r1
   1d8b8:	f7fe bb06 	b.w	1bec8 <d_print_comp_inner+0x1c0>
   1d8bc:	2700      	movs	r7, #0
   1d8be:	5567      	strb	r7, [r4, r5]
   1d8c0:	4629      	mov	r1, r5
   1d8c2:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1d8c6:	4620      	mov	r0, r4
   1d8c8:	4798      	blx	r3
   1d8ca:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d8ce:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   1d8d2:	3301      	adds	r3, #1
   1d8d4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d8d8:	463d      	mov	r5, r7
   1d8da:	f7fe bb10 	b.w	1befe <d_print_comp_inner+0x1f6>
   1d8de:	2600      	movs	r6, #0
   1d8e0:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1d8e4:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1d8e8:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   1d8ec:	4798      	blx	r3
   1d8ee:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
   1d8f2:	2301      	movs	r3, #1
   1d8f4:	441a      	add	r2, r3
   1d8f6:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   1d8fa:	4631      	mov	r1, r6
   1d8fc:	f7fe bbc8 	b.w	1c090 <d_print_comp_inner+0x388>
   1d900:	2500      	movs	r5, #0
   1d902:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1d906:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1d90a:	4620      	mov	r0, r4
   1d90c:	4798      	blx	r3
   1d90e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d912:	2201      	movs	r2, #1
   1d914:	4413      	add	r3, r2
   1d916:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d91a:	4629      	mov	r1, r5
   1d91c:	e597      	b.n	1d44e <d_print_comp_inner+0x1746>
   1d91e:	2600      	movs	r6, #0
   1d920:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d924:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d928:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1d92c:	4620      	mov	r0, r4
   1d92e:	4798      	blx	r3
   1d930:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d934:	2201      	movs	r2, #1
   1d936:	4413      	add	r3, r2
   1d938:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d93c:	4631      	mov	r1, r6
   1d93e:	f7fe be8d 	b.w	1c65c <d_print_comp_inner+0x954>
   1d942:	499b      	ldr	r1, [pc, #620]	; (1dbb0 <d_print_comp_inner+0x1ea8>)
   1d944:	4620      	mov	r0, r4
   1d946:	f7fc f81d 	bl	19984 <d_append_string>
   1d94a:	68ff      	ldr	r7, [r7, #12]
   1d94c:	463a      	mov	r2, r7
   1d94e:	f7fe ba64 	b.w	1be1a <d_print_comp_inner+0x112>
   1d952:	2500      	movs	r5, #0
   1d954:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1d958:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1d95c:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   1d960:	4798      	blx	r3
   1d962:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d966:	2201      	movs	r2, #1
   1d968:	4413      	add	r3, r2
   1d96a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d96e:	4629      	mov	r1, r5
   1d970:	f7fe ba60 	b.w	1be34 <d_print_comp_inner+0x12c>
   1d974:	2500      	movs	r5, #0
   1d976:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1d97a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1d97e:	4620      	mov	r0, r4
   1d980:	4798      	blx	r3
   1d982:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d986:	3301      	adds	r3, #1
   1d988:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d98c:	4629      	mov	r1, r5
   1d98e:	2301      	movs	r3, #1
   1d990:	f7ff ba64 	b.w	1ce5c <d_print_comp_inner+0x1154>
   1d994:	2120      	movs	r1, #32
   1d996:	4620      	mov	r0, r4
   1d998:	f7fb ff6e 	bl	19878 <d_append_char>
   1d99c:	f7ff ba58 	b.w	1ce50 <d_print_comp_inner+0x1148>
   1d9a0:	2500      	movs	r5, #0
   1d9a2:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1d9a6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1d9aa:	4620      	mov	r0, r4
   1d9ac:	4798      	blx	r3
   1d9ae:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d9b2:	3301      	adds	r3, #1
   1d9b4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d9b8:	4629      	mov	r1, r5
   1d9ba:	2301      	movs	r3, #1
   1d9bc:	f7ff ba38 	b.w	1ce30 <d_print_comp_inner+0x1128>
   1d9c0:	2120      	movs	r1, #32
   1d9c2:	4620      	mov	r0, r4
   1d9c4:	f7fb ff58 	bl	19878 <d_append_char>
   1d9c8:	f7ff ba2c 	b.w	1ce24 <d_print_comp_inner+0x111c>
   1d9cc:	212d      	movs	r1, #45	; 0x2d
   1d9ce:	4620      	mov	r0, r4
   1d9d0:	f7fb ff52 	bl	19878 <d_append_char>
   1d9d4:	f7fe bb12 	b.w	1bffc <d_print_comp_inner+0x2f4>
   1d9d8:	2700      	movs	r7, #0
   1d9da:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1d9de:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   1d9e2:	4620      	mov	r0, r4
   1d9e4:	4798      	blx	r3
   1d9e6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d9ea:	3301      	adds	r3, #1
   1d9ec:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d9f0:	4639      	mov	r1, r7
   1d9f2:	2301      	movs	r3, #1
   1d9f4:	f7fe baf8 	b.w	1bfe8 <d_print_comp_inner+0x2e0>
   1d9f8:	2700      	movs	r7, #0
   1d9fa:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1d9fe:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   1da02:	4620      	mov	r0, r4
   1da04:	4798      	blx	r3
   1da06:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1da0a:	68f2      	ldr	r2, [r6, #12]
   1da0c:	3301      	adds	r3, #1
   1da0e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1da12:	4639      	mov	r1, r7
   1da14:	2301      	movs	r3, #1
   1da16:	f7fe bad7 	b.w	1bfc8 <d_print_comp_inner+0x2c0>
   1da1a:	6933      	ldr	r3, [r6, #16]
   1da1c:	f7ff b937 	b.w	1cc8e <d_print_comp_inner+0xf86>
   1da20:	781b      	ldrb	r3, [r3, #0]
   1da22:	f1a3 0163 	sub.w	r1, r3, #99	; 0x63
   1da26:	2901      	cmp	r1, #1
   1da28:	d903      	bls.n	1da32 <d_print_comp_inner+0x1d2a>
   1da2a:	3b72      	subs	r3, #114	; 0x72
   1da2c:	2b01      	cmp	r3, #1
   1da2e:	f63f a90d 	bhi.w	1cc4c <d_print_comp_inner+0xf44>
   1da32:	2111      	movs	r1, #17
   1da34:	4620      	mov	r0, r4
   1da36:	f001 f8e5 	bl	1ec04 <d_print_expr_op>
   1da3a:	213c      	movs	r1, #60	; 0x3c
   1da3c:	4620      	mov	r0, r4
   1da3e:	f7fb ff1b 	bl	19878 <d_append_char>
   1da42:	6933      	ldr	r3, [r6, #16]
   1da44:	2111      	movs	r1, #17
   1da46:	68da      	ldr	r2, [r3, #12]
   1da48:	4620      	mov	r0, r4
   1da4a:	f000 f9f1 	bl	1de30 <d_print_comp>
   1da4e:	4959      	ldr	r1, [pc, #356]	; (1dbb4 <d_print_comp_inner+0x1eac>)
   1da50:	4620      	mov	r0, r4
   1da52:	f7fb ff97 	bl	19984 <d_append_string>
   1da56:	6933      	ldr	r3, [r6, #16]
   1da58:	2111      	movs	r1, #17
   1da5a:	691a      	ldr	r2, [r3, #16]
   1da5c:	4620      	mov	r0, r4
   1da5e:	f000 f9e7 	bl	1de30 <d_print_comp>
   1da62:	2129      	movs	r1, #41	; 0x29
   1da64:	f7fe bad7 	b.w	1c016 <d_print_comp_inner+0x30e>
   1da68:	6931      	ldr	r1, [r6, #16]
   1da6a:	7809      	ldrb	r1, [r1, #0]
   1da6c:	2900      	cmp	r1, #0
   1da6e:	f47e aaa5 	bne.w	1bfbc <d_print_comp_inner+0x2b4>
   1da72:	2b3e      	cmp	r3, #62	; 0x3e
   1da74:	f000 81be 	beq.w	1ddf4 <d_print_comp_inner+0x20ec>
   1da78:	6932      	ldr	r2, [r6, #16]
   1da7a:	2111      	movs	r1, #17
   1da7c:	4620      	mov	r0, r4
   1da7e:	3d02      	subs	r5, #2
   1da80:	f000 f9d6 	bl	1de30 <d_print_comp>
   1da84:	2d04      	cmp	r5, #4
   1da86:	f63e a9a5 	bhi.w	1bdd4 <d_print_comp_inner+0xcc>
   1da8a:	e8df f005 	tbb	[pc, r5]
   1da8e:	090c      	.short	0x090c
   1da90:	0507      	.short	0x0507
   1da92:	03          	.byte	0x03
   1da93:	00          	.byte	0x00
   1da94:	4948      	ldr	r1, [pc, #288]	; (1dbb8 <d_print_comp_inner+0x1eb0>)
   1da96:	e556      	b.n	1d546 <d_print_comp_inner+0x183e>
   1da98:	4948      	ldr	r1, [pc, #288]	; (1dbbc <d_print_comp_inner+0x1eb4>)
   1da9a:	e554      	b.n	1d546 <d_print_comp_inner+0x183e>
   1da9c:	4948      	ldr	r1, [pc, #288]	; (1dbc0 <d_print_comp_inner+0x1eb8>)
   1da9e:	e552      	b.n	1d546 <d_print_comp_inner+0x183e>
   1daa0:	216c      	movs	r1, #108	; 0x6c
   1daa2:	f7fe bab8 	b.w	1c016 <d_print_comp_inner+0x30e>
   1daa6:	2175      	movs	r1, #117	; 0x75
   1daa8:	f7fe bab5 	b.w	1c016 <d_print_comp_inner+0x30e>
   1daac:	f8d4 c134 	ldr.w	ip, [r4, #308]	; 0x134
   1dab0:	f1bc 0f00 	cmp.w	ip, #0
   1dab4:	f340 8170 	ble.w	1dd98 <d_print_comp_inner+0x2090>
   1dab8:	f8d4 e130 	ldr.w	lr, [r4, #304]	; 0x130
   1dabc:	462b      	mov	r3, r5
   1dabe:	4671      	mov	r1, lr
   1dac0:	e004      	b.n	1dacc <d_print_comp_inner+0x1dc4>
   1dac2:	4563      	cmp	r3, ip
   1dac4:	f101 0108 	add.w	r1, r1, #8
   1dac8:	f000 8166 	beq.w	1dd98 <d_print_comp_inner+0x2090>
   1dacc:	f85e 2033 	ldr.w	r2, [lr, r3, lsl #3]
   1dad0:	4290      	cmp	r0, r2
   1dad2:	f103 0301 	add.w	r3, r3, #1
   1dad6:	d1f4      	bne.n	1dac2 <d_print_comp_inner+0x1dba>
   1dad8:	f8d4 c12c 	ldr.w	ip, [r4, #300]	; 0x12c
   1dadc:	4663      	mov	r3, ip
   1dade:	f1bc 0f00 	cmp.w	ip, #0
   1dae2:	d104      	bne.n	1daee <d_print_comp_inner+0x1de6>
   1dae4:	e0c6      	b.n	1dc74 <d_print_comp_inner+0x1f6c>
   1dae6:	685b      	ldr	r3, [r3, #4]
   1dae8:	2b00      	cmp	r3, #0
   1daea:	f000 80c3 	beq.w	1dc74 <d_print_comp_inner+0x1f6c>
   1daee:	681a      	ldr	r2, [r3, #0]
   1daf0:	4282      	cmp	r2, r0
   1daf2:	d003      	beq.n	1dafc <d_print_comp_inner+0x1df4>
   1daf4:	42b2      	cmp	r2, r6
   1daf6:	d1f6      	bne.n	1dae6 <d_print_comp_inner+0x1dde>
   1daf8:	459c      	cmp	ip, r3
   1dafa:	d0f4      	beq.n	1dae6 <d_print_comp_inner+0x1dde>
   1dafc:	4601      	mov	r1, r0
   1dafe:	4620      	mov	r0, r4
   1db00:	f7fb fedc 	bl	198bc <d_lookup_template_argument>
   1db04:	2800      	cmp	r0, #0
   1db06:	f43e a962 	beq.w	1bdce <d_print_comp_inner+0xc6>
   1db0a:	7803      	ldrb	r3, [r0, #0]
   1db0c:	2b2f      	cmp	r3, #47	; 0x2f
   1db0e:	f47e a9cf 	bne.w	1beb0 <d_print_comp_inner+0x1a8>
   1db12:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
   1db16:	2900      	cmp	r1, #0
   1db18:	f6ff acf4 	blt.w	1d504 <d_print_comp_inner+0x17fc>
   1db1c:	f7fb fe46 	bl	197ac <d_index_template_argument.part.0>
   1db20:	2800      	cmp	r0, #0
   1db22:	f000 816b 	beq.w	1ddfc <d_print_comp_inner+0x20f4>
   1db26:	7803      	ldrb	r3, [r0, #0]
   1db28:	f7fe b9c2 	b.w	1beb0 <d_print_comp_inner+0x1a8>
   1db2c:	2963      	cmp	r1, #99	; 0x63
   1db2e:	f000 80af 	beq.w	1dc90 <d_print_comp_inner+0x1f88>
   1db32:	2111      	movs	r1, #17
   1db34:	4620      	mov	r0, r4
   1db36:	f001 f865 	bl	1ec04 <d_print_expr_op>
   1db3a:	6933      	ldr	r3, [r6, #16]
   1db3c:	2111      	movs	r1, #17
   1db3e:	691a      	ldr	r2, [r3, #16]
   1db40:	4620      	mov	r0, r4
   1db42:	f001 fa47 	bl	1efd4 <d_print_subexpr>
   1db46:	f7ff b8c4 	b.w	1ccd2 <d_print_comp_inner+0xfca>
   1db4a:	68c2      	ldr	r2, [r0, #12]
   1db4c:	f7fe b946 	b.w	1bddc <d_print_comp_inner+0xd4>
   1db50:	4619      	mov	r1, r3
   1db52:	4620      	mov	r0, r4
   1db54:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1db58:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1db5c:	4798      	blx	r3
   1db5e:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
   1db62:	3201      	adds	r2, #1
   1db64:	4633      	mov	r3, r6
   1db66:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   1db6a:	2001      	movs	r0, #1
   1db6c:	e4a6      	b.n	1d4bc <d_print_comp_inner+0x17b4>
   1db6e:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
   1db72:	2900      	cmp	r1, #0
   1db74:	f6ff acfb 	blt.w	1d56e <d_print_comp_inner+0x1866>
   1db78:	f7fb fe18 	bl	197ac <d_index_template_argument.part.0>
   1db7c:	4602      	mov	r2, r0
   1db7e:	2800      	cmp	r0, #0
   1db80:	f47f acf5 	bne.w	1d56e <d_print_comp_inner+0x1866>
   1db84:	f7fe b923 	b.w	1bdce <d_print_comp_inner+0xc6>
   1db88:	490e      	ldr	r1, [pc, #56]	; (1dbc4 <d_print_comp_inner+0x1ebc>)
   1db8a:	4632      	mov	r2, r6
   1db8c:	a802      	add	r0, sp, #8
   1db8e:	f01a fba5 	bl	382dc <sprintf>
   1db92:	a802      	add	r0, sp, #8
   1db94:	f7fa fd94 	bl	186c0 <strlen>
   1db98:	2800      	cmp	r0, #0
   1db9a:	f43e a91b 	beq.w	1bdd4 <d_print_comp_inner+0xcc>
   1db9e:	ad02      	add	r5, sp, #8
   1dba0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1dba4:	182f      	adds	r7, r5, r0
   1dba6:	f04f 0800 	mov.w	r8, #0
   1dbaa:	e017      	b.n	1dbdc <d_print_comp_inner+0x1ed4>
   1dbac:	00043a24 	.word	0x00043a24
   1dbb0:	000438b0 	.word	0x000438b0
   1dbb4:	00043a58 	.word	0x00043a58
   1dbb8:	00043a74 	.word	0x00043a74
   1dbbc:	00043a70 	.word	0x00043a70
   1dbc0:	00043a6c 	.word	0x00043a6c
   1dbc4:	0004382c 	.word	0x0004382c
   1dbc8:	460b      	mov	r3, r1
   1dbca:	3101      	adds	r1, #1
   1dbcc:	42af      	cmp	r7, r5
   1dbce:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1dbd2:	54e6      	strb	r6, [r4, r3]
   1dbd4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1dbd8:	f43e a8fc 	beq.w	1bdd4 <d_print_comp_inner+0xcc>
   1dbdc:	29ff      	cmp	r1, #255	; 0xff
   1dbde:	f815 6b01 	ldrb.w	r6, [r5], #1
   1dbe2:	d1f1      	bne.n	1dbc8 <d_print_comp_inner+0x1ec0>
   1dbe4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1dbe8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1dbec:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1dbf0:	4620      	mov	r0, r4
   1dbf2:	4798      	blx	r3
   1dbf4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1dbf8:	3301      	adds	r3, #1
   1dbfa:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1dbfe:	2101      	movs	r1, #1
   1dc00:	2300      	movs	r3, #0
   1dc02:	e7e3      	b.n	1dbcc <d_print_comp_inner+0x1ec4>
   1dc04:	2500      	movs	r5, #0
   1dc06:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1dc0a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1dc0e:	4619      	mov	r1, r3
   1dc10:	4620      	mov	r0, r4
   1dc12:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1dc16:	4798      	blx	r3
   1dc18:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
   1dc1c:	3201      	adds	r2, #1
   1dc1e:	462b      	mov	r3, r5
   1dc20:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   1dc24:	f7fe bf50 	b.w	1cac8 <d_print_comp_inner+0xdc0>
   1dc28:	2500      	movs	r5, #0
   1dc2a:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1dc2e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1dc32:	4620      	mov	r0, r4
   1dc34:	4798      	blx	r3
   1dc36:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1dc3a:	3301      	adds	r3, #1
   1dc3c:	4629      	mov	r1, r5
   1dc3e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1dc42:	e52a      	b.n	1d69a <d_print_comp_inner+0x1992>
   1dc44:	2111      	movs	r1, #17
   1dc46:	68f2      	ldr	r2, [r6, #12]
   1dc48:	4620      	mov	r0, r4
   1dc4a:	f001 f9c3 	bl	1efd4 <d_print_subexpr>
   1dc4e:	4975      	ldr	r1, [pc, #468]	; (1de24 <d_print_comp_inner+0x211c>)
   1dc50:	e479      	b.n	1d546 <d_print_comp_inner+0x183e>
   1dc52:	68da      	ldr	r2, [r3, #12]
   1dc54:	6891      	ldr	r1, [r2, #8]
   1dc56:	2901      	cmp	r1, #1
   1dc58:	f47f a805 	bne.w	1cc66 <d_print_comp_inner+0xf5e>
   1dc5c:	6852      	ldr	r2, [r2, #4]
   1dc5e:	7812      	ldrb	r2, [r2, #0]
   1dc60:	2a3e      	cmp	r2, #62	; 0x3e
   1dc62:	f47f a800 	bne.w	1cc66 <d_print_comp_inner+0xf5e>
   1dc66:	2128      	movs	r1, #40	; 0x28
   1dc68:	4620      	mov	r0, r4
   1dc6a:	f7fb fe05 	bl	19878 <d_append_char>
   1dc6e:	68f3      	ldr	r3, [r6, #12]
   1dc70:	f7fe bff9 	b.w	1cc66 <d_print_comp_inner+0xf5e>
   1dc74:	684b      	ldr	r3, [r1, #4]
   1dc76:	f8d4 7110 	ldr.w	r7, [r4, #272]	; 0x110
   1dc7a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1dc7e:	4601      	mov	r1, r0
   1dc80:	4620      	mov	r0, r4
   1dc82:	f7fb fe1b 	bl	198bc <d_lookup_template_argument>
   1dc86:	2800      	cmp	r0, #0
   1dc88:	f000 80bb 	beq.w	1de02 <d_print_comp_inner+0x20fa>
   1dc8c:	2501      	movs	r5, #1
   1dc8e:	e73c      	b.n	1db0a <d_print_comp_inner+0x1e02>
   1dc90:	7859      	ldrb	r1, [r3, #1]
   1dc92:	296c      	cmp	r1, #108	; 0x6c
   1dc94:	f47f af4d 	bne.w	1db32 <d_print_comp_inner+0x1e2a>
   1dc98:	789b      	ldrb	r3, [r3, #2]
   1dc9a:	2b00      	cmp	r3, #0
   1dc9c:	f43f af4d 	beq.w	1db3a <d_print_comp_inner+0x1e32>
   1dca0:	e747      	b.n	1db32 <d_print_comp_inner+0x1e2a>
   1dca2:	2600      	movs	r6, #0
   1dca4:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1dca8:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1dcac:	4620      	mov	r0, r4
   1dcae:	4798      	blx	r3
   1dcb0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1dcb4:	687d      	ldr	r5, [r7, #4]
   1dcb6:	3301      	adds	r3, #1
   1dcb8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1dcbc:	4631      	mov	r1, r6
   1dcbe:	e5eb      	b.n	1d898 <d_print_comp_inner+0x1b90>
   1dcc0:	68ff      	ldr	r7, [r7, #12]
   1dcc2:	2f00      	cmp	r7, #0
   1dcc4:	f43e a883 	beq.w	1bdce <d_print_comp_inner+0xc6>
   1dcc8:	783a      	ldrb	r2, [r7, #0]
   1dcca:	f7fe bdb0 	b.w	1c82e <d_print_comp_inner+0xb26>
   1dcce:	4956      	ldr	r1, [pc, #344]	; (1de28 <d_print_comp_inner+0x2120>)
   1dcd0:	4620      	mov	r0, r4
   1dcd2:	f7fb fe57 	bl	19984 <d_append_string>
   1dcd6:	68f3      	ldr	r3, [r6, #12]
   1dcd8:	b143      	cbz	r3, 1dcec <d_print_comp_inner+0x1fe4>
   1dcda:	2111      	movs	r1, #17
   1dcdc:	4620      	mov	r0, r4
   1dcde:	4632      	mov	r2, r6
   1dce0:	f001 f978 	bl	1efd4 <d_print_subexpr>
   1dce4:	2120      	movs	r1, #32
   1dce6:	4620      	mov	r0, r4
   1dce8:	f7fb fdc6 	bl	19878 <d_append_char>
   1dcec:	463a      	mov	r2, r7
   1dcee:	2111      	movs	r1, #17
   1dcf0:	4620      	mov	r0, r4
   1dcf2:	f000 f89d 	bl	1de30 <d_print_comp>
   1dcf6:	2d00      	cmp	r5, #0
   1dcf8:	f47e ac0b 	bne.w	1c512 <d_print_comp_inner+0x80a>
   1dcfc:	f7fe b86a 	b.w	1bdd4 <d_print_comp_inner+0xcc>
   1dd00:	68ea      	ldr	r2, [r5, #12]
   1dd02:	7811      	ldrb	r1, [r2, #0]
   1dd04:	2901      	cmp	r1, #1
   1dd06:	f47f ad20 	bne.w	1d74a <d_print_comp_inner+0x1a42>
   1dd0a:	6929      	ldr	r1, [r5, #16]
   1dd0c:	7809      	ldrb	r1, [r1, #0]
   1dd0e:	2929      	cmp	r1, #41	; 0x29
   1dd10:	bf08      	it	eq
   1dd12:	4615      	moveq	r5, r2
   1dd14:	e519      	b.n	1d74a <d_print_comp_inner+0x1a42>
   1dd16:	2600      	movs	r6, #0
   1dd18:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1dd1c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1dd20:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1dd24:	4620      	mov	r0, r4
   1dd26:	4798      	blx	r3
   1dd28:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1dd2c:	3301      	adds	r3, #1
   1dd2e:	4631      	mov	r1, r6
   1dd30:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1dd34:	f7fe bbe6 	b.w	1c504 <d_print_comp_inner+0x7fc>
   1dd38:	2600      	movs	r6, #0
   1dd3a:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	; 0x108
   1dd3e:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   1dd42:	4798      	blx	r3
   1dd44:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1dd48:	3301      	adds	r3, #1
   1dd4a:	4631      	mov	r1, r6
   1dd4c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1dd50:	f7fe bbc7 	b.w	1c4e2 <d_print_comp_inner+0x7da>
   1dd54:	6913      	ldr	r3, [r2, #16]
   1dd56:	68d2      	ldr	r2, [r2, #12]
   1dd58:	781b      	ldrb	r3, [r3, #0]
   1dd5a:	2b29      	cmp	r3, #41	; 0x29
   1dd5c:	bf1c      	itt	ne
   1dd5e:	2301      	movne	r3, #1
   1dd60:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
   1dd64:	2111      	movs	r1, #17
   1dd66:	4620      	mov	r0, r4
   1dd68:	f001 f934 	bl	1efd4 <d_print_subexpr>
   1dd6c:	f7fe bf94 	b.w	1cc98 <d_print_comp_inner+0xf90>
   1dd70:	68ea      	ldr	r2, [r5, #12]
   1dd72:	2111      	movs	r1, #17
   1dd74:	4620      	mov	r0, r4
   1dd76:	f001 f92d 	bl	1efd4 <d_print_subexpr>
   1dd7a:	463a      	mov	r2, r7
   1dd7c:	f7fe bbd2 	b.w	1c524 <d_print_comp_inner+0x81c>
   1dd80:	6932      	ldr	r2, [r6, #16]
   1dd82:	2111      	movs	r1, #17
   1dd84:	f000 f854 	bl	1de30 <d_print_comp>
   1dd88:	9b04      	ldr	r3, [sp, #16]
   1dd8a:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   1dd8e:	2b00      	cmp	r3, #0
   1dd90:	f43e af1c 	beq.w	1cbcc <d_print_comp_inner+0xec4>
   1dd94:	f7fe b81e 	b.w	1bdd4 <d_print_comp_inner+0xcc>
   1dd98:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   1dd9c:	4563      	cmp	r3, ip
   1dd9e:	f77e a816 	ble.w	1bdce <d_print_comp_inner+0xc6>
   1dda2:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
   1dda6:	f8d4 e110 	ldr.w	lr, [r4, #272]	; 0x110
   1ddaa:	eb02 03cc 	add.w	r3, r2, ip, lsl #3
   1ddae:	f10c 0101 	add.w	r1, ip, #1
   1ddb2:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
   1ddb6:	3304      	adds	r3, #4
   1ddb8:	f842 003c 	str.w	r0, [r2, ip, lsl #3]
   1ddbc:	f1be 0f00 	cmp.w	lr, #0
   1ddc0:	d024      	beq.n	1de0c <d_print_comp_inner+0x2104>
   1ddc2:	e9d4 2c50 	ldrd	r2, ip, [r4, #320]	; 0x140
   1ddc6:	4680      	mov	r8, r0
   1ddc8:	e010      	b.n	1ddec <d_print_comp_inner+0x20e4>
   1ddca:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
   1ddce:	f8de 0004 	ldr.w	r0, [lr, #4]
   1ddd2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
   1ddd6:	3201      	adds	r2, #1
   1ddd8:	f8c4 2140 	str.w	r2, [r4, #320]	; 0x140
   1dddc:	6048      	str	r0, [r1, #4]
   1ddde:	6019      	str	r1, [r3, #0]
   1dde0:	f8de e000 	ldr.w	lr, [lr]
   1dde4:	460b      	mov	r3, r1
   1dde6:	f1be 0f00 	cmp.w	lr, #0
   1ddea:	d00e      	beq.n	1de0a <d_print_comp_inner+0x2102>
   1ddec:	4562      	cmp	r2, ip
   1ddee:	dbec      	blt.n	1ddca <d_print_comp_inner+0x20c2>
   1ddf0:	f7fd bfed 	b.w	1bdce <d_print_comp_inner+0xc6>
   1ddf4:	212d      	movs	r1, #45	; 0x2d
   1ddf6:	f7fb fd3f 	bl	19878 <d_append_char>
   1ddfa:	e63d      	b.n	1da78 <d_print_comp_inner+0x1d70>
   1ddfc:	2d00      	cmp	r5, #0
   1ddfe:	f43d afe6 	beq.w	1bdce <d_print_comp_inner+0xc6>
   1de02:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
   1de06:	f7fd bfe2 	b.w	1bdce <d_print_comp_inner+0xc6>
   1de0a:	4640      	mov	r0, r8
   1de0c:	2200      	movs	r2, #0
   1de0e:	601a      	str	r2, [r3, #0]
   1de10:	e674      	b.n	1dafc <d_print_comp_inner+0x1df4>
   1de12:	4906      	ldr	r1, [pc, #24]	; (1de2c <d_print_comp_inner+0x2124>)
   1de14:	f7ff bb97 	b.w	1d546 <d_print_comp_inner+0x183e>
   1de18:	463a      	mov	r2, r7
   1de1a:	2111      	movs	r1, #17
   1de1c:	f000 fef2 	bl	1ec04 <d_print_expr_op>
   1de20:	f7fe bb77 	b.w	1c512 <d_print_comp_inner+0x80a>
   1de24:	00043aa4 	.word	0x00043aa4
   1de28:	00043a64 	.word	0x00043a64
   1de2c:	00043a78 	.word	0x00043a78

0001de30 <d_print_comp>:
   1de30:	b530      	push	{r4, r5, lr}
   1de32:	4605      	mov	r5, r0
   1de34:	b083      	sub	sp, #12
   1de36:	b31a      	cbz	r2, 1de80 <d_print_comp+0x50>
   1de38:	6853      	ldr	r3, [r2, #4]
   1de3a:	2b01      	cmp	r3, #1
   1de3c:	4614      	mov	r4, r2
   1de3e:	dc1f      	bgt.n	1de80 <d_print_comp+0x50>
   1de40:	f8d0 111c 	ldr.w	r1, [r0, #284]	; 0x11c
   1de44:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   1de48:	dc1a      	bgt.n	1de80 <d_print_comp+0x50>
   1de4a:	3301      	adds	r3, #1
   1de4c:	6053      	str	r3, [r2, #4]
   1de4e:	3101      	adds	r1, #1
   1de50:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
   1de54:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
   1de58:	f8c0 d12c 	str.w	sp, [r0, #300]	; 0x12c
   1de5c:	2111      	movs	r1, #17
   1de5e:	e9cd 2300 	strd	r2, r3, [sp]
   1de62:	f7fd ff51 	bl	1bd08 <d_print_comp_inner>
   1de66:	6862      	ldr	r2, [r4, #4]
   1de68:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
   1de6c:	9901      	ldr	r1, [sp, #4]
   1de6e:	f8c5 112c 	str.w	r1, [r5, #300]	; 0x12c
   1de72:	3a01      	subs	r2, #1
   1de74:	3b01      	subs	r3, #1
   1de76:	6062      	str	r2, [r4, #4]
   1de78:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
   1de7c:	b003      	add	sp, #12
   1de7e:	bd30      	pop	{r4, r5, pc}
   1de80:	2301      	movs	r3, #1
   1de82:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118
   1de86:	b003      	add	sp, #12
   1de88:	bd30      	pop	{r4, r5, pc}
   1de8a:	bf00      	nop

0001de8c <d_print_mod>:
   1de8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1de90:	7813      	ldrb	r3, [r2, #0]
   1de92:	3b03      	subs	r3, #3
   1de94:	4615      	mov	r5, r2
   1de96:	4604      	mov	r4, r0
   1de98:	2b4d      	cmp	r3, #77	; 0x4d
   1de9a:	d84f      	bhi.n	1df3c <d_print_mod+0xb0>
   1de9c:	e8df f013 	tbh	[pc, r3, lsl #1]
   1dea0:	004e0119 	.word	0x004e0119
   1dea4:	004e004e 	.word	0x004e004e
   1dea8:	004e004e 	.word	0x004e004e
   1deac:	004e004e 	.word	0x004e004e
   1deb0:	004e004e 	.word	0x004e004e
   1deb4:	004e004e 	.word	0x004e004e
   1deb8:	004e004e 	.word	0x004e004e
   1debc:	004e004e 	.word	0x004e004e
   1dec0:	004e004e 	.word	0x004e004e
   1dec4:	004e004e 	.word	0x004e004e
   1dec8:	004e004e 	.word	0x004e004e
   1decc:	007a0053 	.word	0x007a0053
   1ded0:	005300a1 	.word	0x005300a1
   1ded4:	00a1007a 	.word	0x00a1007a
   1ded8:	00fa00ed 	.word	0x00fa00ed
   1dedc:	02830107 	.word	0x02830107
   1dee0:	012c011e 	.word	0x012c011e
   1dee4:	01770151 	.word	0x01770151
   1dee8:	004e004e 	.word	0x004e004e
   1deec:	004e004e 	.word	0x004e004e
   1def0:	004e019d 	.word	0x004e019d
   1def4:	004e01cd 	.word	0x004e01cd
   1def8:	004e004e 	.word	0x004e004e
   1defc:	004e004e 	.word	0x004e004e
   1df00:	004e004e 	.word	0x004e004e
   1df04:	004e004e 	.word	0x004e004e
   1df08:	004e004e 	.word	0x004e004e
   1df0c:	004e004e 	.word	0x004e004e
   1df10:	004e004e 	.word	0x004e004e
   1df14:	004e004e 	.word	0x004e004e
   1df18:	004e004e 	.word	0x004e004e
   1df1c:	004e004e 	.word	0x004e004e
   1df20:	004e004e 	.word	0x004e004e
   1df24:	004e004e 	.word	0x004e004e
   1df28:	004e004e 	.word	0x004e004e
   1df2c:	004e004e 	.word	0x004e004e
   1df30:	004e004e 	.word	0x004e004e
   1df34:	004e01f4 	.word	0x004e01f4
   1df38:	00c60230 	.word	0x00c60230
   1df3c:	462a      	mov	r2, r5
   1df3e:	2111      	movs	r1, #17
   1df40:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1df44:	e774      	b.n	1de30 <d_print_comp>
   1df46:	4ed5      	ldr	r6, [pc, #852]	; (1e29c <d_print_mod+0x410>)
   1df48:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1df4c:	f106 0708 	add.w	r7, r6, #8
   1df50:	2520      	movs	r5, #32
   1df52:	f04f 0800 	mov.w	r8, #0
   1df56:	e00b      	b.n	1df70 <d_print_mod+0xe4>
   1df58:	460b      	mov	r3, r1
   1df5a:	3101      	adds	r1, #1
   1df5c:	42b7      	cmp	r7, r6
   1df5e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1df62:	54e5      	strb	r5, [r4, r3]
   1df64:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1df68:	f000 80c4 	beq.w	1e0f4 <d_print_mod+0x268>
   1df6c:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   1df70:	29ff      	cmp	r1, #255	; 0xff
   1df72:	d1f1      	bne.n	1df58 <d_print_mod+0xcc>
   1df74:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1df78:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1df7c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1df80:	4620      	mov	r0, r4
   1df82:	4798      	blx	r3
   1df84:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1df88:	3301      	adds	r3, #1
   1df8a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1df8e:	2101      	movs	r1, #1
   1df90:	2300      	movs	r3, #0
   1df92:	e7e3      	b.n	1df5c <d_print_mod+0xd0>
   1df94:	4ec2      	ldr	r6, [pc, #776]	; (1e2a0 <d_print_mod+0x414>)
   1df96:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1df9a:	f106 0708 	add.w	r7, r6, #8
   1df9e:	2520      	movs	r5, #32
   1dfa0:	f04f 0800 	mov.w	r8, #0
   1dfa4:	e00b      	b.n	1dfbe <d_print_mod+0x132>
   1dfa6:	460b      	mov	r3, r1
   1dfa8:	3101      	adds	r1, #1
   1dfaa:	42b7      	cmp	r7, r6
   1dfac:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1dfb0:	54e5      	strb	r5, [r4, r3]
   1dfb2:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1dfb6:	f000 809d 	beq.w	1e0f4 <d_print_mod+0x268>
   1dfba:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   1dfbe:	29ff      	cmp	r1, #255	; 0xff
   1dfc0:	d1f1      	bne.n	1dfa6 <d_print_mod+0x11a>
   1dfc2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1dfc6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1dfca:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1dfce:	4620      	mov	r0, r4
   1dfd0:	4798      	blx	r3
   1dfd2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1dfd6:	3301      	adds	r3, #1
   1dfd8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1dfdc:	2101      	movs	r1, #1
   1dfde:	2300      	movs	r3, #0
   1dfe0:	e7e3      	b.n	1dfaa <d_print_mod+0x11e>
   1dfe2:	4eb0      	ldr	r6, [pc, #704]	; (1e2a4 <d_print_mod+0x418>)
   1dfe4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1dfe8:	1d77      	adds	r7, r6, #5
   1dfea:	2520      	movs	r5, #32
   1dfec:	f04f 0800 	mov.w	r8, #0
   1dff0:	e00a      	b.n	1e008 <d_print_mod+0x17c>
   1dff2:	460b      	mov	r3, r1
   1dff4:	3101      	adds	r1, #1
   1dff6:	42be      	cmp	r6, r7
   1dff8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1dffc:	54e5      	strb	r5, [r4, r3]
   1dffe:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1e002:	d077      	beq.n	1e0f4 <d_print_mod+0x268>
   1e004:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   1e008:	29ff      	cmp	r1, #255	; 0xff
   1e00a:	d1f2      	bne.n	1dff2 <d_print_mod+0x166>
   1e00c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e010:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e014:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e018:	4620      	mov	r0, r4
   1e01a:	4798      	blx	r3
   1e01c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e020:	3301      	adds	r3, #1
   1e022:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e026:	2101      	movs	r1, #1
   1e028:	2300      	movs	r3, #0
   1e02a:	e7e4      	b.n	1dff6 <d_print_mod+0x16a>
   1e02c:	4f9e      	ldr	r7, [pc, #632]	; (1e2a8 <d_print_mod+0x41c>)
   1e02e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1e032:	f107 0905 	add.w	r9, r7, #5
   1e036:	2620      	movs	r6, #32
   1e038:	f04f 0800 	mov.w	r8, #0
   1e03c:	e00b      	b.n	1e056 <d_print_mod+0x1ca>
   1e03e:	460b      	mov	r3, r1
   1e040:	3101      	adds	r1, #1
   1e042:	45b9      	cmp	r9, r7
   1e044:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e048:	54e6      	strb	r6, [r4, r3]
   1e04a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1e04e:	f000 817d 	beq.w	1e34c <d_print_mod+0x4c0>
   1e052:	f817 6f01 	ldrb.w	r6, [r7, #1]!
   1e056:	29ff      	cmp	r1, #255	; 0xff
   1e058:	d1f1      	bne.n	1e03e <d_print_mod+0x1b2>
   1e05a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e05e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e062:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e066:	4620      	mov	r0, r4
   1e068:	4798      	blx	r3
   1e06a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e06e:	3301      	adds	r3, #1
   1e070:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e074:	2101      	movs	r1, #1
   1e076:	2300      	movs	r3, #0
   1e078:	e7e3      	b.n	1e042 <d_print_mod+0x1b6>
   1e07a:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   1e07e:	2bff      	cmp	r3, #255	; 0xff
   1e080:	f000 81ce 	beq.w	1e420 <d_print_mod+0x594>
   1e084:	2220      	movs	r2, #32
   1e086:	1c59      	adds	r1, r3, #1
   1e088:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
   1e08c:	54c2      	strb	r2, [r0, r3]
   1e08e:	f880 2104 	strb.w	r2, [r0, #260]	; 0x104
   1e092:	e025      	b.n	1e0e0 <d_print_mod+0x254>
   1e094:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   1e098:	2bff      	cmp	r3, #255	; 0xff
   1e09a:	f000 81b2 	beq.w	1e402 <d_print_mod+0x576>
   1e09e:	1c59      	adds	r1, r3, #1
   1e0a0:	2220      	movs	r2, #32
   1e0a2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e0a6:	54e2      	strb	r2, [r4, r3]
   1e0a8:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1e0ac:	e026      	b.n	1e0fc <d_print_mod+0x270>
   1e0ae:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1e0b2:	29ff      	cmp	r1, #255	; 0xff
   1e0b4:	f000 8195 	beq.w	1e3e2 <d_print_mod+0x556>
   1e0b8:	1c4a      	adds	r2, r1, #1
   1e0ba:	2320      	movs	r3, #32
   1e0bc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1e0c0:	5463      	strb	r3, [r4, r1]
   1e0c2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1e0c6:	692a      	ldr	r2, [r5, #16]
   1e0c8:	4620      	mov	r0, r4
   1e0ca:	2111      	movs	r1, #17
   1e0cc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e0d0:	e6ae      	b.n	1de30 <d_print_comp>
   1e0d2:	68ea      	ldr	r2, [r5, #12]
   1e0d4:	2111      	movs	r1, #17
   1e0d6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e0da:	e6a9      	b.n	1de30 <d_print_comp>
   1e0dc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1e0e0:	29ff      	cmp	r1, #255	; 0xff
   1e0e2:	f000 81bc 	beq.w	1e45e <d_print_mod+0x5d2>
   1e0e6:	1c4a      	adds	r2, r1, #1
   1e0e8:	2326      	movs	r3, #38	; 0x26
   1e0ea:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1e0ee:	5463      	strb	r3, [r4, r1]
   1e0f0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1e0f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e0f8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1e0fc:	4d6b      	ldr	r5, [pc, #428]	; (1e2ac <d_print_mod+0x420>)
   1e0fe:	2626      	movs	r6, #38	; 0x26
   1e100:	1c6f      	adds	r7, r5, #1
   1e102:	f04f 0800 	mov.w	r8, #0
   1e106:	e00a      	b.n	1e11e <d_print_mod+0x292>
   1e108:	460b      	mov	r3, r1
   1e10a:	3101      	adds	r1, #1
   1e10c:	42bd      	cmp	r5, r7
   1e10e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e112:	54e6      	strb	r6, [r4, r3]
   1e114:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1e118:	d0ec      	beq.n	1e0f4 <d_print_mod+0x268>
   1e11a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   1e11e:	29ff      	cmp	r1, #255	; 0xff
   1e120:	d1f2      	bne.n	1e108 <d_print_mod+0x27c>
   1e122:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e126:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e12a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e12e:	4620      	mov	r0, r4
   1e130:	4798      	blx	r3
   1e132:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e136:	3301      	adds	r3, #1
   1e138:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e13c:	2101      	movs	r1, #1
   1e13e:	2300      	movs	r3, #0
   1e140:	e7e4      	b.n	1e10c <d_print_mod+0x280>
   1e142:	4e5b      	ldr	r6, [pc, #364]	; (1e2b0 <d_print_mod+0x424>)
   1e144:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1e148:	f106 0708 	add.w	r7, r6, #8
   1e14c:	2520      	movs	r5, #32
   1e14e:	f04f 0800 	mov.w	r8, #0
   1e152:	e00a      	b.n	1e16a <d_print_mod+0x2de>
   1e154:	460b      	mov	r3, r1
   1e156:	3101      	adds	r1, #1
   1e158:	42be      	cmp	r6, r7
   1e15a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e15e:	54e5      	strb	r5, [r4, r3]
   1e160:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1e164:	d0c6      	beq.n	1e0f4 <d_print_mod+0x268>
   1e166:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   1e16a:	29ff      	cmp	r1, #255	; 0xff
   1e16c:	d1f2      	bne.n	1e154 <d_print_mod+0x2c8>
   1e16e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e172:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e176:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e17a:	4620      	mov	r0, r4
   1e17c:	4798      	blx	r3
   1e17e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e182:	3301      	adds	r3, #1
   1e184:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e188:	2101      	movs	r1, #1
   1e18a:	2300      	movs	r3, #0
   1e18c:	e7e4      	b.n	1e158 <d_print_mod+0x2cc>
   1e18e:	4e49      	ldr	r6, [pc, #292]	; (1e2b4 <d_print_mod+0x428>)
   1e190:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1e194:	f106 070a 	add.w	r7, r6, #10
   1e198:	2520      	movs	r5, #32
   1e19a:	f04f 0800 	mov.w	r8, #0
   1e19e:	e00a      	b.n	1e1b6 <d_print_mod+0x32a>
   1e1a0:	460b      	mov	r3, r1
   1e1a2:	3101      	adds	r1, #1
   1e1a4:	42be      	cmp	r6, r7
   1e1a6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e1aa:	54e5      	strb	r5, [r4, r3]
   1e1ac:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1e1b0:	d0a0      	beq.n	1e0f4 <d_print_mod+0x268>
   1e1b2:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   1e1b6:	29ff      	cmp	r1, #255	; 0xff
   1e1b8:	d1f2      	bne.n	1e1a0 <d_print_mod+0x314>
   1e1ba:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e1be:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e1c2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e1c6:	4620      	mov	r0, r4
   1e1c8:	4798      	blx	r3
   1e1ca:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e1ce:	3301      	adds	r3, #1
   1e1d0:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e1d4:	2101      	movs	r1, #1
   1e1d6:	2300      	movs	r3, #0
   1e1d8:	e7e4      	b.n	1e1a4 <d_print_mod+0x318>
   1e1da:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
   1e1de:	2b28      	cmp	r3, #40	; 0x28
   1e1e0:	f040 80d5 	bne.w	1e38e <d_print_mod+0x502>
   1e1e4:	4e34      	ldr	r6, [pc, #208]	; (1e2b8 <d_print_mod+0x42c>)
   1e1e6:	68ea      	ldr	r2, [r5, #12]
   1e1e8:	2111      	movs	r1, #17
   1e1ea:	4620      	mov	r0, r4
   1e1ec:	f7ff fe20 	bl	1de30 <d_print_comp>
   1e1f0:	1cb7      	adds	r7, r6, #2
   1e1f2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1e1f6:	253a      	movs	r5, #58	; 0x3a
   1e1f8:	f04f 0800 	mov.w	r8, #0
   1e1fc:	e00b      	b.n	1e216 <d_print_mod+0x38a>
   1e1fe:	460b      	mov	r3, r1
   1e200:	3101      	adds	r1, #1
   1e202:	42b7      	cmp	r7, r6
   1e204:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e208:	54e5      	strb	r5, [r4, r3]
   1e20a:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1e20e:	f43f af71 	beq.w	1e0f4 <d_print_mod+0x268>
   1e212:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   1e216:	29ff      	cmp	r1, #255	; 0xff
   1e218:	d1f1      	bne.n	1e1fe <d_print_mod+0x372>
   1e21a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e21e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e222:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e226:	4620      	mov	r0, r4
   1e228:	4798      	blx	r3
   1e22a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e22e:	3301      	adds	r3, #1
   1e230:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e234:	2101      	movs	r1, #1
   1e236:	2300      	movs	r3, #0
   1e238:	e7e3      	b.n	1e202 <d_print_mod+0x376>
   1e23a:	4f20      	ldr	r7, [pc, #128]	; (1e2bc <d_print_mod+0x430>)
   1e23c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1e240:	f107 0909 	add.w	r9, r7, #9
   1e244:	2620      	movs	r6, #32
   1e246:	f04f 0800 	mov.w	r8, #0
   1e24a:	e00b      	b.n	1e264 <d_print_mod+0x3d8>
   1e24c:	460b      	mov	r3, r1
   1e24e:	3101      	adds	r1, #1
   1e250:	45b9      	cmp	r9, r7
   1e252:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e256:	54e6      	strb	r6, [r4, r3]
   1e258:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1e25c:	f000 8085 	beq.w	1e36a <d_print_mod+0x4de>
   1e260:	f817 6f01 	ldrb.w	r6, [r7, #1]!
   1e264:	29ff      	cmp	r1, #255	; 0xff
   1e266:	d1f1      	bne.n	1e24c <d_print_mod+0x3c0>
   1e268:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e26c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e270:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e274:	4620      	mov	r0, r4
   1e276:	4798      	blx	r3
   1e278:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e27c:	3301      	adds	r3, #1
   1e27e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e282:	2101      	movs	r1, #1
   1e284:	2300      	movs	r3, #0
   1e286:	e7e3      	b.n	1e250 <d_print_mod+0x3c4>
   1e288:	4e0d      	ldr	r6, [pc, #52]	; (1e2c0 <d_print_mod+0x434>)
   1e28a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1e28e:	f106 0710 	add.w	r7, r6, #16
   1e292:	2520      	movs	r5, #32
   1e294:	f04f 0800 	mov.w	r8, #0
   1e298:	e020      	b.n	1e2dc <d_print_mod+0x450>
   1e29a:	bf00      	nop
   1e29c:	00043b24 	.word	0x00043b24
   1e2a0:	00043b30 	.word	0x00043b30
   1e2a4:	00043b3c 	.word	0x00043b3c
   1e2a8:	00043b64 	.word	0x00043b64
   1e2ac:	00043b6c 	.word	0x00043b6c
   1e2b0:	00043b70 	.word	0x00043b70
   1e2b4:	00043b7c 	.word	0x00043b7c
   1e2b8:	00043b88 	.word	0x00043b88
   1e2bc:	00043b8c 	.word	0x00043b8c
   1e2c0:	00043b44 	.word	0x00043b44
   1e2c4:	460b      	mov	r3, r1
   1e2c6:	3101      	adds	r1, #1
   1e2c8:	42b7      	cmp	r7, r6
   1e2ca:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e2ce:	54e5      	strb	r5, [r4, r3]
   1e2d0:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1e2d4:	f43f af0e 	beq.w	1e0f4 <d_print_mod+0x268>
   1e2d8:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   1e2dc:	29ff      	cmp	r1, #255	; 0xff
   1e2de:	d1f1      	bne.n	1e2c4 <d_print_mod+0x438>
   1e2e0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e2e4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e2e8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e2ec:	4620      	mov	r0, r4
   1e2ee:	4798      	blx	r3
   1e2f0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e2f4:	3301      	adds	r3, #1
   1e2f6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e2fa:	2101      	movs	r1, #1
   1e2fc:	2300      	movs	r3, #0
   1e2fe:	e7e3      	b.n	1e2c8 <d_print_mod+0x43c>
   1e300:	4f6d      	ldr	r7, [pc, #436]	; (1e4b8 <d_print_mod+0x62c>)
   1e302:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1e306:	f107 0908 	add.w	r9, r7, #8
   1e30a:	2620      	movs	r6, #32
   1e30c:	f04f 0800 	mov.w	r8, #0
   1e310:	e00a      	b.n	1e328 <d_print_mod+0x49c>
   1e312:	460b      	mov	r3, r1
   1e314:	3101      	adds	r1, #1
   1e316:	454f      	cmp	r7, r9
   1e318:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e31c:	54e6      	strb	r6, [r4, r3]
   1e31e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1e322:	d013      	beq.n	1e34c <d_print_mod+0x4c0>
   1e324:	f817 6f01 	ldrb.w	r6, [r7, #1]!
   1e328:	29ff      	cmp	r1, #255	; 0xff
   1e32a:	d1f2      	bne.n	1e312 <d_print_mod+0x486>
   1e32c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e330:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e334:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e338:	4620      	mov	r0, r4
   1e33a:	4798      	blx	r3
   1e33c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e340:	3301      	adds	r3, #1
   1e342:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e346:	2101      	movs	r1, #1
   1e348:	2300      	movs	r3, #0
   1e34a:	e7e4      	b.n	1e316 <d_print_mod+0x48a>
   1e34c:	692a      	ldr	r2, [r5, #16]
   1e34e:	2a00      	cmp	r2, #0
   1e350:	f43f aed0 	beq.w	1e0f4 <d_print_mod+0x268>
   1e354:	29ff      	cmp	r1, #255	; 0xff
   1e356:	d032      	beq.n	1e3be <d_print_mod+0x532>
   1e358:	1c48      	adds	r0, r1, #1
   1e35a:	2328      	movs	r3, #40	; 0x28
   1e35c:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
   1e360:	5463      	strb	r3, [r4, r1]
   1e362:	2111      	movs	r1, #17
   1e364:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1e368:	e001      	b.n	1e36e <d_print_mod+0x4e2>
   1e36a:	68ea      	ldr	r2, [r5, #12]
   1e36c:	2111      	movs	r1, #17
   1e36e:	4620      	mov	r0, r4
   1e370:	f7ff fd5e 	bl	1de30 <d_print_comp>
   1e374:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1e378:	29ff      	cmp	r1, #255	; 0xff
   1e37a:	d061      	beq.n	1e440 <d_print_mod+0x5b4>
   1e37c:	1c4a      	adds	r2, r1, #1
   1e37e:	2329      	movs	r3, #41	; 0x29
   1e380:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1e384:	5463      	strb	r3, [r4, r1]
   1e386:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1e38a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e38e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1e392:	29ff      	cmp	r1, #255	; 0xff
   1e394:	d072      	beq.n	1e47c <d_print_mod+0x5f0>
   1e396:	1c4a      	adds	r2, r1, #1
   1e398:	2320      	movs	r3, #32
   1e39a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1e39e:	5463      	strb	r3, [r4, r1]
   1e3a0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1e3a4:	e71e      	b.n	1e1e4 <d_print_mod+0x358>
   1e3a6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1e3aa:	29ff      	cmp	r1, #255	; 0xff
   1e3ac:	d076      	beq.n	1e49c <d_print_mod+0x610>
   1e3ae:	1c4a      	adds	r2, r1, #1
   1e3b0:	232a      	movs	r3, #42	; 0x2a
   1e3b2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1e3b6:	5463      	strb	r3, [r4, r1]
   1e3b8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1e3bc:	e69a      	b.n	1e0f4 <d_print_mod+0x268>
   1e3be:	2600      	movs	r6, #0
   1e3c0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e3c4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e3c8:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1e3cc:	4620      	mov	r0, r4
   1e3ce:	4798      	blx	r3
   1e3d0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e3d4:	692a      	ldr	r2, [r5, #16]
   1e3d6:	3301      	adds	r3, #1
   1e3d8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e3dc:	2001      	movs	r0, #1
   1e3de:	4631      	mov	r1, r6
   1e3e0:	e7bb      	b.n	1e35a <d_print_mod+0x4ce>
   1e3e2:	2600      	movs	r6, #0
   1e3e4:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1e3e8:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1e3ec:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   1e3f0:	4798      	blx	r3
   1e3f2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e3f6:	2201      	movs	r2, #1
   1e3f8:	4413      	add	r3, r2
   1e3fa:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e3fe:	4631      	mov	r1, r6
   1e400:	e65b      	b.n	1e0ba <d_print_mod+0x22e>
   1e402:	2500      	movs	r5, #0
   1e404:	4619      	mov	r1, r3
   1e406:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   1e40a:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	; 0x108
   1e40e:	4798      	blx	r3
   1e410:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e414:	2101      	movs	r1, #1
   1e416:	440b      	add	r3, r1
   1e418:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e41c:	462b      	mov	r3, r5
   1e41e:	e63f      	b.n	1e0a0 <d_print_mod+0x214>
   1e420:	2100      	movs	r1, #0
   1e422:	e9d0 5242 	ldrd	r5, r2, [r0, #264]	; 0x108
   1e426:	f880 10ff 	strb.w	r1, [r0, #255]	; 0xff
   1e42a:	4619      	mov	r1, r3
   1e42c:	47a8      	blx	r5
   1e42e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e432:	2220      	movs	r2, #32
   1e434:	3301      	adds	r3, #1
   1e436:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e43a:	7022      	strb	r2, [r4, #0]
   1e43c:	2101      	movs	r1, #1
   1e43e:	e652      	b.n	1e0e6 <d_print_mod+0x25a>
   1e440:	2500      	movs	r5, #0
   1e442:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1e446:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1e44a:	4620      	mov	r0, r4
   1e44c:	4798      	blx	r3
   1e44e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e452:	2201      	movs	r2, #1
   1e454:	4413      	add	r3, r2
   1e456:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e45a:	4629      	mov	r1, r5
   1e45c:	e78f      	b.n	1e37e <d_print_mod+0x4f2>
   1e45e:	2500      	movs	r5, #0
   1e460:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1e464:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1e468:	4620      	mov	r0, r4
   1e46a:	4798      	blx	r3
   1e46c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e470:	2201      	movs	r2, #1
   1e472:	4413      	add	r3, r2
   1e474:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e478:	4629      	mov	r1, r5
   1e47a:	e635      	b.n	1e0e8 <d_print_mod+0x25c>
   1e47c:	2600      	movs	r6, #0
   1e47e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1e482:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1e486:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   1e48a:	4798      	blx	r3
   1e48c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e490:	2201      	movs	r2, #1
   1e492:	4413      	add	r3, r2
   1e494:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e498:	4631      	mov	r1, r6
   1e49a:	e77d      	b.n	1e398 <d_print_mod+0x50c>
   1e49c:	2500      	movs	r5, #0
   1e49e:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	; 0x108
   1e4a2:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   1e4a6:	4798      	blx	r3
   1e4a8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e4ac:	2201      	movs	r2, #1
   1e4ae:	4413      	add	r3, r2
   1e4b0:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e4b4:	4629      	mov	r1, r5
   1e4b6:	e77b      	b.n	1e3b0 <d_print_mod+0x524>
   1e4b8:	00043b58 	.word	0x00043b58

0001e4bc <d_print_function_type>:
   1e4bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e4c0:	4604      	mov	r4, r0
   1e4c2:	4616      	mov	r6, r2
   1e4c4:	461d      	mov	r5, r3
   1e4c6:	2b00      	cmp	r3, #0
   1e4c8:	d064      	beq.n	1e594 <d_print_function_type+0xd8>
   1e4ca:	689a      	ldr	r2, [r3, #8]
   1e4cc:	2a00      	cmp	r2, #0
   1e4ce:	d161      	bne.n	1e594 <d_print_function_type+0xd8>
   1e4d0:	685a      	ldr	r2, [r3, #4]
   1e4d2:	7811      	ldrb	r1, [r2, #0]
   1e4d4:	3919      	subs	r1, #25
   1e4d6:	2912      	cmp	r1, #18
   1e4d8:	d859      	bhi.n	1e58e <d_print_function_type+0xd2>
   1e4da:	e8df f001 	tbb	[pc, r1]
   1e4de:	0a0a      	.short	0x0a0a
   1e4e0:	5858580a 	.word	0x5858580a
   1e4e4:	800a5858 	.word	0x800a5858
   1e4e8:	0a0a8080 	.word	0x0a0a8080
   1e4ec:	58585858 	.word	0x58585858
   1e4f0:	0a          	.byte	0x0a
   1e4f1:	00          	.byte	0x00
   1e4f2:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1e4f6:	2b20      	cmp	r3, #32
   1e4f8:	d179      	bne.n	1e5ee <d_print_function_type+0x132>
   1e4fa:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1e4fe:	29ff      	cmp	r1, #255	; 0xff
   1e500:	f000 8083 	beq.w	1e60a <d_print_function_type+0x14e>
   1e504:	1c4b      	adds	r3, r1, #1
   1e506:	f04f 0828 	mov.w	r8, #40	; 0x28
   1e50a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1e50e:	f804 8001 	strb.w	r8, [r4, r1]
   1e512:	f04f 0900 	mov.w	r9, #0
   1e516:	f8d4 7114 	ldr.w	r7, [r4, #276]	; 0x114
   1e51a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
   1e51e:	462a      	mov	r2, r5
   1e520:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   1e524:	464b      	mov	r3, r9
   1e526:	2111      	movs	r1, #17
   1e528:	4620      	mov	r0, r4
   1e52a:	f000 f8b9 	bl	1e6a0 <d_print_mod_list>
   1e52e:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
   1e532:	2aff      	cmp	r2, #255	; 0xff
   1e534:	f000 8088 	beq.w	1e648 <d_print_function_type+0x18c>
   1e538:	1c51      	adds	r1, r2, #1
   1e53a:	2329      	movs	r3, #41	; 0x29
   1e53c:	29ff      	cmp	r1, #255	; 0xff
   1e53e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e542:	54a3      	strb	r3, [r4, r2]
   1e544:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1e548:	d032      	beq.n	1e5b0 <d_print_function_type+0xf4>
   1e54a:	2228      	movs	r2, #40	; 0x28
   1e54c:	1c4b      	adds	r3, r1, #1
   1e54e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1e552:	5462      	strb	r2, [r4, r1]
   1e554:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1e558:	6932      	ldr	r2, [r6, #16]
   1e55a:	b12a      	cbz	r2, 1e568 <d_print_function_type+0xac>
   1e55c:	2111      	movs	r1, #17
   1e55e:	4620      	mov	r0, r4
   1e560:	f7ff fc66 	bl	1de30 <d_print_comp>
   1e564:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1e568:	2bff      	cmp	r3, #255	; 0xff
   1e56a:	d05d      	beq.n	1e628 <d_print_function_type+0x16c>
   1e56c:	1c5a      	adds	r2, r3, #1
   1e56e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1e572:	2229      	movs	r2, #41	; 0x29
   1e574:	54e2      	strb	r2, [r4, r3]
   1e576:	2111      	movs	r1, #17
   1e578:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1e57c:	2301      	movs	r3, #1
   1e57e:	462a      	mov	r2, r5
   1e580:	4620      	mov	r0, r4
   1e582:	f000 f88d 	bl	1e6a0 <d_print_mod_list>
   1e586:	f8c4 7114 	str.w	r7, [r4, #276]	; 0x114
   1e58a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e58e:	681b      	ldr	r3, [r3, #0]
   1e590:	2b00      	cmp	r3, #0
   1e592:	d19a      	bne.n	1e4ca <d_print_function_type+0xe>
   1e594:	2300      	movs	r3, #0
   1e596:	f8d4 7114 	ldr.w	r7, [r4, #276]	; 0x114
   1e59a:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1e59e:	2111      	movs	r1, #17
   1e5a0:	462a      	mov	r2, r5
   1e5a2:	4620      	mov	r0, r4
   1e5a4:	f000 f87c 	bl	1e6a0 <d_print_mod_list>
   1e5a8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1e5ac:	29ff      	cmp	r1, #255	; 0xff
   1e5ae:	d1cc      	bne.n	1e54a <d_print_function_type+0x8e>
   1e5b0:	2300      	movs	r3, #0
   1e5b2:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
   1e5b6:	4620      	mov	r0, r4
   1e5b8:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1e5bc:	4798      	blx	r3
   1e5be:	2228      	movs	r2, #40	; 0x28
   1e5c0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e5c4:	7022      	strb	r2, [r4, #0]
   1e5c6:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1e5ca:	3301      	adds	r3, #1
   1e5cc:	6932      	ldr	r2, [r6, #16]
   1e5ce:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e5d2:	2301      	movs	r3, #1
   1e5d4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1e5d8:	2a00      	cmp	r2, #0
   1e5da:	d1bf      	bne.n	1e55c <d_print_function_type+0xa0>
   1e5dc:	e7c6      	b.n	1e56c <d_print_function_type+0xb0>
   1e5de:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1e5e2:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
   1e5e6:	2a28      	cmp	r2, #40	; 0x28
   1e5e8:	d087      	beq.n	1e4fa <d_print_function_type+0x3e>
   1e5ea:	2b20      	cmp	r3, #32
   1e5ec:	d085      	beq.n	1e4fa <d_print_function_type+0x3e>
   1e5ee:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1e5f2:	2bff      	cmp	r3, #255	; 0xff
   1e5f4:	d041      	beq.n	1e67a <d_print_function_type+0x1be>
   1e5f6:	1c59      	adds	r1, r3, #1
   1e5f8:	2220      	movs	r2, #32
   1e5fa:	29ff      	cmp	r1, #255	; 0xff
   1e5fc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e600:	54e2      	strb	r2, [r4, r3]
   1e602:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1e606:	f47f af7d 	bne.w	1e504 <d_print_function_type+0x48>
   1e60a:	2700      	movs	r7, #0
   1e60c:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1e610:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   1e614:	4620      	mov	r0, r4
   1e616:	4798      	blx	r3
   1e618:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e61c:	3301      	adds	r3, #1
   1e61e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e622:	4639      	mov	r1, r7
   1e624:	2301      	movs	r3, #1
   1e626:	e76e      	b.n	1e506 <d_print_function_type+0x4a>
   1e628:	2600      	movs	r6, #0
   1e62a:	4619      	mov	r1, r3
   1e62c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1e630:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1e634:	4620      	mov	r0, r4
   1e636:	4798      	blx	r3
   1e638:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
   1e63c:	3201      	adds	r2, #1
   1e63e:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   1e642:	4633      	mov	r3, r6
   1e644:	2201      	movs	r2, #1
   1e646:	e792      	b.n	1e56e <d_print_function_type+0xb2>
   1e648:	4611      	mov	r1, r2
   1e64a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1e64e:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1e652:	4620      	mov	r0, r4
   1e654:	4798      	blx	r3
   1e656:	f642 0329 	movw	r3, #10281	; 0x2829
   1e65a:	8023      	strh	r3, [r4, #0]
   1e65c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e660:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
   1e664:	6932      	ldr	r2, [r6, #16]
   1e666:	3301      	adds	r3, #1
   1e668:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e66c:	2302      	movs	r3, #2
   1e66e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1e672:	2a00      	cmp	r2, #0
   1e674:	f47f af72 	bne.w	1e55c <d_print_function_type+0xa0>
   1e678:	e778      	b.n	1e56c <d_print_function_type+0xb0>
   1e67a:	2200      	movs	r2, #0
   1e67c:	4619      	mov	r1, r3
   1e67e:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   1e682:	f8d4 7108 	ldr.w	r7, [r4, #264]	; 0x108
   1e686:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e68a:	4620      	mov	r0, r4
   1e68c:	47b8      	blx	r7
   1e68e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e692:	2220      	movs	r2, #32
   1e694:	3301      	adds	r3, #1
   1e696:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e69a:	7022      	strb	r2, [r4, #0]
   1e69c:	2101      	movs	r1, #1
   1e69e:	e731      	b.n	1e504 <d_print_function_type+0x48>

0001e6a0 <d_print_mod_list>:
   1e6a0:	2a00      	cmp	r2, #0
   1e6a2:	f000 80c2 	beq.w	1e82a <d_print_mod_list+0x18a>
   1e6a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e6aa:	4605      	mov	r5, r0
   1e6ac:	b088      	sub	sp, #32
   1e6ae:	461e      	mov	r6, r3
   1e6b0:	4614      	mov	r4, r2
   1e6b2:	2701      	movs	r7, #1
   1e6b4:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
   1e6b8:	b9ca      	cbnz	r2, 1e6ee <d_print_mod_list+0x4e>
   1e6ba:	68a2      	ldr	r2, [r4, #8]
   1e6bc:	bb0a      	cbnz	r2, 1e702 <d_print_mod_list+0x62>
   1e6be:	6862      	ldr	r2, [r4, #4]
   1e6c0:	7811      	ldrb	r1, [r2, #0]
   1e6c2:	b1be      	cbz	r6, 1e6f4 <d_print_mod_list+0x54>
   1e6c4:	68e3      	ldr	r3, [r4, #12]
   1e6c6:	f8d5 8110 	ldr.w	r8, [r5, #272]	; 0x110
   1e6ca:	60a7      	str	r7, [r4, #8]
   1e6cc:	2929      	cmp	r1, #41	; 0x29
   1e6ce:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   1e6d2:	d024      	beq.n	1e71e <d_print_mod_list+0x7e>
   1e6d4:	292a      	cmp	r1, #42	; 0x2a
   1e6d6:	d02c      	beq.n	1e732 <d_print_mod_list+0x92>
   1e6d8:	2902      	cmp	r1, #2
   1e6da:	d034      	beq.n	1e746 <d_print_mod_list+0xa6>
   1e6dc:	2111      	movs	r1, #17
   1e6de:	4628      	mov	r0, r5
   1e6e0:	f7ff fbd4 	bl	1de8c <d_print_mod>
   1e6e4:	6824      	ldr	r4, [r4, #0]
   1e6e6:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
   1e6ea:	2c00      	cmp	r4, #0
   1e6ec:	d1e2      	bne.n	1e6b4 <d_print_mod_list+0x14>
   1e6ee:	b008      	add	sp, #32
   1e6f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e6f4:	294d      	cmp	r1, #77	; 0x4d
   1e6f6:	d004      	beq.n	1e702 <d_print_mod_list+0x62>
   1e6f8:	d807      	bhi.n	1e70a <d_print_mod_list+0x6a>
   1e6fa:	f1a1 031c 	sub.w	r3, r1, #28
   1e6fe:	2b04      	cmp	r3, #4
   1e700:	d8e0      	bhi.n	1e6c4 <d_print_mod_list+0x24>
   1e702:	6824      	ldr	r4, [r4, #0]
   1e704:	2c00      	cmp	r4, #0
   1e706:	d1d5      	bne.n	1e6b4 <d_print_mod_list+0x14>
   1e708:	e7f1      	b.n	1e6ee <d_print_mod_list+0x4e>
   1e70a:	394f      	subs	r1, #79	; 0x4f
   1e70c:	2901      	cmp	r1, #1
   1e70e:	d9f8      	bls.n	1e702 <d_print_mod_list+0x62>
   1e710:	68e3      	ldr	r3, [r4, #12]
   1e712:	f8d5 8110 	ldr.w	r8, [r5, #272]	; 0x110
   1e716:	60a7      	str	r7, [r4, #8]
   1e718:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   1e71c:	e7de      	b.n	1e6dc <d_print_mod_list+0x3c>
   1e71e:	6823      	ldr	r3, [r4, #0]
   1e720:	2111      	movs	r1, #17
   1e722:	4628      	mov	r0, r5
   1e724:	f7ff feca 	bl	1e4bc <d_print_function_type>
   1e728:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
   1e72c:	b008      	add	sp, #32
   1e72e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e732:	6823      	ldr	r3, [r4, #0]
   1e734:	2111      	movs	r1, #17
   1e736:	4628      	mov	r0, r5
   1e738:	f000 f8d6 	bl	1e8e8 <d_print_array_type>
   1e73c:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
   1e740:	b008      	add	sp, #32
   1e742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e746:	4e64      	ldr	r6, [pc, #400]	; (1e8d8 <d_print_mod_list+0x238>)
   1e748:	f8d5 7114 	ldr.w	r7, [r5, #276]	; 0x114
   1e74c:	68d2      	ldr	r2, [r2, #12]
   1e74e:	f04f 0900 	mov.w	r9, #0
   1e752:	2111      	movs	r1, #17
   1e754:	f8c5 9114 	str.w	r9, [r5, #276]	; 0x114
   1e758:	4628      	mov	r0, r5
   1e75a:	f7ff fb69 	bl	1de30 <d_print_comp>
   1e75e:	f106 0a01 	add.w	sl, r6, #1
   1e762:	f8c5 7114 	str.w	r7, [r5, #276]	; 0x114
   1e766:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   1e76a:	273a      	movs	r7, #58	; 0x3a
   1e76c:	e00a      	b.n	1e784 <d_print_mod_list+0xe4>
   1e76e:	460b      	mov	r3, r1
   1e770:	3101      	adds	r1, #1
   1e772:	4556      	cmp	r6, sl
   1e774:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   1e778:	54ef      	strb	r7, [r5, r3]
   1e77a:	f885 7104 	strb.w	r7, [r5, #260]	; 0x104
   1e77e:	d013      	beq.n	1e7a8 <d_print_mod_list+0x108>
   1e780:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1e784:	29ff      	cmp	r1, #255	; 0xff
   1e786:	d1f2      	bne.n	1e76e <d_print_mod_list+0xce>
   1e788:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1e78c:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1e790:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
   1e794:	4628      	mov	r0, r5
   1e796:	4798      	blx	r3
   1e798:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
   1e79c:	3301      	adds	r3, #1
   1e79e:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
   1e7a2:	2101      	movs	r1, #1
   1e7a4:	2300      	movs	r3, #0
   1e7a6:	e7e4      	b.n	1e772 <d_print_mod_list+0xd2>
   1e7a8:	6863      	ldr	r3, [r4, #4]
   1e7aa:	691c      	ldr	r4, [r3, #16]
   1e7ac:	7823      	ldrb	r3, [r4, #0]
   1e7ae:	2b47      	cmp	r3, #71	; 0x47
   1e7b0:	d017      	beq.n	1e7e2 <d_print_mod_list+0x142>
   1e7b2:	2b4d      	cmp	r3, #77	; 0x4d
   1e7b4:	f1a3 024f 	sub.w	r2, r3, #79	; 0x4f
   1e7b8:	f1a3 011c 	sub.w	r1, r3, #28
   1e7bc:	d00e      	beq.n	1e7dc <d_print_mod_list+0x13c>
   1e7be:	d80b      	bhi.n	1e7d8 <d_print_mod_list+0x138>
   1e7c0:	2904      	cmp	r1, #4
   1e7c2:	d90b      	bls.n	1e7dc <d_print_mod_list+0x13c>
   1e7c4:	4622      	mov	r2, r4
   1e7c6:	2111      	movs	r1, #17
   1e7c8:	4628      	mov	r0, r5
   1e7ca:	f7ff fb31 	bl	1de30 <d_print_comp>
   1e7ce:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
   1e7d2:	b008      	add	sp, #32
   1e7d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e7d8:	2a01      	cmp	r2, #1
   1e7da:	d8f3      	bhi.n	1e7c4 <d_print_mod_list+0x124>
   1e7dc:	68e4      	ldr	r4, [r4, #12]
   1e7de:	7823      	ldrb	r3, [r4, #0]
   1e7e0:	e7e7      	b.n	1e7b2 <d_print_mod_list+0x112>
   1e7e2:	4f3e      	ldr	r7, [pc, #248]	; (1e8dc <d_print_mod_list+0x23c>)
   1e7e4:	267b      	movs	r6, #123	; 0x7b
   1e7e6:	f107 0a0c 	add.w	sl, r7, #12
   1e7ea:	f04f 0900 	mov.w	r9, #0
   1e7ee:	e00a      	b.n	1e806 <d_print_mod_list+0x166>
   1e7f0:	460b      	mov	r3, r1
   1e7f2:	3101      	adds	r1, #1
   1e7f4:	4557      	cmp	r7, sl
   1e7f6:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   1e7fa:	54ee      	strb	r6, [r5, r3]
   1e7fc:	f885 6104 	strb.w	r6, [r5, #260]	; 0x104
   1e800:	d014      	beq.n	1e82c <d_print_mod_list+0x18c>
   1e802:	f817 6f01 	ldrb.w	r6, [r7, #1]!
   1e806:	29ff      	cmp	r1, #255	; 0xff
   1e808:	d1f2      	bne.n	1e7f0 <d_print_mod_list+0x150>
   1e80a:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1e80e:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1e812:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
   1e816:	4628      	mov	r0, r5
   1e818:	4798      	blx	r3
   1e81a:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
   1e81e:	3301      	adds	r3, #1
   1e820:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
   1e824:	2101      	movs	r1, #1
   1e826:	2300      	movs	r3, #0
   1e828:	e7e4      	b.n	1e7f4 <d_print_mod_list+0x154>
   1e82a:	4770      	bx	lr
   1e82c:	6922      	ldr	r2, [r4, #16]
   1e82e:	492c      	ldr	r1, [pc, #176]	; (1e8e0 <d_print_mod_list+0x240>)
   1e830:	3201      	adds	r2, #1
   1e832:	a801      	add	r0, sp, #4
   1e834:	f019 fd52 	bl	382dc <sprintf>
   1e838:	a801      	add	r0, sp, #4
   1e83a:	f7f9 ff41 	bl	186c0 <strlen>
   1e83e:	b320      	cbz	r0, 1e88a <d_print_mod_list+0x1ea>
   1e840:	ae01      	add	r6, sp, #4
   1e842:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   1e846:	eb06 0a00 	add.w	sl, r6, r0
   1e84a:	f04f 0900 	mov.w	r9, #0
   1e84e:	e008      	b.n	1e862 <d_print_mod_list+0x1c2>
   1e850:	460b      	mov	r3, r1
   1e852:	3101      	adds	r1, #1
   1e854:	4556      	cmp	r6, sl
   1e856:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   1e85a:	54ef      	strb	r7, [r5, r3]
   1e85c:	f885 7104 	strb.w	r7, [r5, #260]	; 0x104
   1e860:	d015      	beq.n	1e88e <d_print_mod_list+0x1ee>
   1e862:	29ff      	cmp	r1, #255	; 0xff
   1e864:	f816 7b01 	ldrb.w	r7, [r6], #1
   1e868:	d1f2      	bne.n	1e850 <d_print_mod_list+0x1b0>
   1e86a:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1e86e:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1e872:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
   1e876:	4628      	mov	r0, r5
   1e878:	4798      	blx	r3
   1e87a:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
   1e87e:	3301      	adds	r3, #1
   1e880:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
   1e884:	2101      	movs	r1, #1
   1e886:	2300      	movs	r3, #0
   1e888:	e7e4      	b.n	1e854 <d_print_mod_list+0x1b4>
   1e88a:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   1e88e:	4f15      	ldr	r7, [pc, #84]	; (1e8e4 <d_print_mod_list+0x244>)
   1e890:	267d      	movs	r6, #125	; 0x7d
   1e892:	f107 0a02 	add.w	sl, r7, #2
   1e896:	f04f 0900 	mov.w	r9, #0
   1e89a:	e00a      	b.n	1e8b2 <d_print_mod_list+0x212>
   1e89c:	460b      	mov	r3, r1
   1e89e:	3101      	adds	r1, #1
   1e8a0:	45ba      	cmp	sl, r7
   1e8a2:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   1e8a6:	54ee      	strb	r6, [r5, r3]
   1e8a8:	f885 6104 	strb.w	r6, [r5, #260]	; 0x104
   1e8ac:	d096      	beq.n	1e7dc <d_print_mod_list+0x13c>
   1e8ae:	f817 6f01 	ldrb.w	r6, [r7, #1]!
   1e8b2:	29ff      	cmp	r1, #255	; 0xff
   1e8b4:	d1f2      	bne.n	1e89c <d_print_mod_list+0x1fc>
   1e8b6:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1e8ba:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1e8be:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
   1e8c2:	4628      	mov	r0, r5
   1e8c4:	4798      	blx	r3
   1e8c6:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
   1e8ca:	3301      	adds	r3, #1
   1e8cc:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
   1e8d0:	2101      	movs	r1, #1
   1e8d2:	2300      	movs	r3, #0
   1e8d4:	e7e4      	b.n	1e8a0 <d_print_mod_list+0x200>
   1e8d6:	bf00      	nop
   1e8d8:	0004389c 	.word	0x0004389c
   1e8dc:	000438a0 	.word	0x000438a0
   1e8e0:	0004382c 	.word	0x0004382c
   1e8e4:	000438b0 	.word	0x000438b0

0001e8e8 <d_print_array_type>:
   1e8e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e8ec:	4604      	mov	r4, r0
   1e8ee:	4617      	mov	r7, r2
   1e8f0:	b153      	cbz	r3, 1e908 <d_print_array_type+0x20>
   1e8f2:	461e      	mov	r6, r3
   1e8f4:	689d      	ldr	r5, [r3, #8]
   1e8f6:	b37d      	cbz	r5, 1e958 <d_print_array_type+0x70>
   1e8f8:	681b      	ldr	r3, [r3, #0]
   1e8fa:	2b00      	cmp	r3, #0
   1e8fc:	d1fa      	bne.n	1e8f4 <d_print_array_type+0xc>
   1e8fe:	4632      	mov	r2, r6
   1e900:	2111      	movs	r1, #17
   1e902:	4620      	mov	r0, r4
   1e904:	f7ff fecc 	bl	1e6a0 <d_print_mod_list>
   1e908:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1e90c:	2bff      	cmp	r3, #255	; 0xff
   1e90e:	f000 809d 	beq.w	1ea4c <d_print_array_type+0x164>
   1e912:	1c59      	adds	r1, r3, #1
   1e914:	2220      	movs	r2, #32
   1e916:	29ff      	cmp	r1, #255	; 0xff
   1e918:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e91c:	54e2      	strb	r2, [r4, r3]
   1e91e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1e922:	d027      	beq.n	1e974 <d_print_array_type+0x8c>
   1e924:	225b      	movs	r2, #91	; 0x5b
   1e926:	1c4b      	adds	r3, r1, #1
   1e928:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1e92c:	5462      	strb	r2, [r4, r1]
   1e92e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1e932:	68fa      	ldr	r2, [r7, #12]
   1e934:	b12a      	cbz	r2, 1e942 <d_print_array_type+0x5a>
   1e936:	2111      	movs	r1, #17
   1e938:	4620      	mov	r0, r4
   1e93a:	f7ff fa79 	bl	1de30 <d_print_comp>
   1e93e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1e942:	2bff      	cmp	r3, #255	; 0xff
   1e944:	d02f      	beq.n	1e9a6 <d_print_array_type+0xbe>
   1e946:	1c59      	adds	r1, r3, #1
   1e948:	225d      	movs	r2, #93	; 0x5d
   1e94a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e94e:	54e2      	strb	r2, [r4, r3]
   1e950:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1e954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e958:	685b      	ldr	r3, [r3, #4]
   1e95a:	781b      	ldrb	r3, [r3, #0]
   1e95c:	2b2a      	cmp	r3, #42	; 0x2a
   1e95e:	d132      	bne.n	1e9c6 <d_print_array_type+0xde>
   1e960:	2111      	movs	r1, #17
   1e962:	462b      	mov	r3, r5
   1e964:	4632      	mov	r2, r6
   1e966:	4620      	mov	r0, r4
   1e968:	f7ff fe9a 	bl	1e6a0 <d_print_mod_list>
   1e96c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1e970:	29ff      	cmp	r1, #255	; 0xff
   1e972:	d1d7      	bne.n	1e924 <d_print_array_type+0x3c>
   1e974:	2200      	movs	r2, #0
   1e976:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e97a:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   1e97e:	4620      	mov	r0, r4
   1e980:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e984:	4798      	blx	r3
   1e986:	225b      	movs	r2, #91	; 0x5b
   1e988:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e98c:	7022      	strb	r2, [r4, #0]
   1e98e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1e992:	68fa      	ldr	r2, [r7, #12]
   1e994:	1c59      	adds	r1, r3, #1
   1e996:	2301      	movs	r3, #1
   1e998:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
   1e99c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1e9a0:	2a00      	cmp	r2, #0
   1e9a2:	d1c8      	bne.n	1e936 <d_print_array_type+0x4e>
   1e9a4:	e7cf      	b.n	1e946 <d_print_array_type+0x5e>
   1e9a6:	2500      	movs	r5, #0
   1e9a8:	4619      	mov	r1, r3
   1e9aa:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1e9ae:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1e9b2:	4620      	mov	r0, r4
   1e9b4:	4798      	blx	r3
   1e9b6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e9ba:	2101      	movs	r1, #1
   1e9bc:	440b      	add	r3, r1
   1e9be:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e9c2:	462b      	mov	r3, r5
   1e9c4:	e7c0      	b.n	1e948 <d_print_array_type+0x60>
   1e9c6:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 1eaac <d_print_array_type+0x1c4>
   1e9ca:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1e9ce:	f04f 0920 	mov.w	r9, #32
   1e9d2:	f108 0a01 	add.w	sl, r8, #1
   1e9d6:	e00c      	b.n	1e9f2 <d_print_array_type+0x10a>
   1e9d8:	460b      	mov	r3, r1
   1e9da:	45d0      	cmp	r8, sl
   1e9dc:	f101 0101 	add.w	r1, r1, #1
   1e9e0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e9e4:	f804 9003 	strb.w	r9, [r4, r3]
   1e9e8:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
   1e9ec:	d01a      	beq.n	1ea24 <d_print_array_type+0x13c>
   1e9ee:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   1e9f2:	29ff      	cmp	r1, #255	; 0xff
   1e9f4:	d1f0      	bne.n	1e9d8 <d_print_array_type+0xf0>
   1e9f6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e9fa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e9fe:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1ea02:	4620      	mov	r0, r4
   1ea04:	4798      	blx	r3
   1ea06:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ea0a:	3301      	adds	r3, #1
   1ea0c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ea10:	2300      	movs	r3, #0
   1ea12:	2101      	movs	r1, #1
   1ea14:	45d0      	cmp	r8, sl
   1ea16:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1ea1a:	f804 9003 	strb.w	r9, [r4, r3]
   1ea1e:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
   1ea22:	d1e4      	bne.n	1e9ee <d_print_array_type+0x106>
   1ea24:	2111      	movs	r1, #17
   1ea26:	2300      	movs	r3, #0
   1ea28:	4632      	mov	r2, r6
   1ea2a:	4620      	mov	r0, r4
   1ea2c:	f7ff fe38 	bl	1e6a0 <d_print_mod_list>
   1ea30:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1ea34:	29ff      	cmp	r1, #255	; 0xff
   1ea36:	d026      	beq.n	1ea86 <d_print_array_type+0x19e>
   1ea38:	1c4b      	adds	r3, r1, #1
   1ea3a:	2229      	movs	r2, #41	; 0x29
   1ea3c:	2bff      	cmp	r3, #255	; 0xff
   1ea3e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1ea42:	5462      	strb	r2, [r4, r1]
   1ea44:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1ea48:	f47f af63 	bne.w	1e912 <d_print_array_type+0x2a>
   1ea4c:	2200      	movs	r2, #0
   1ea4e:	4619      	mov	r1, r3
   1ea50:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   1ea54:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
   1ea58:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1ea5c:	4620      	mov	r0, r4
   1ea5e:	47a8      	blx	r5
   1ea60:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ea64:	225b      	movs	r2, #91	; 0x5b
   1ea66:	f645 3120 	movw	r1, #23328	; 0x5b20
   1ea6a:	8021      	strh	r1, [r4, #0]
   1ea6c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1ea70:	68fa      	ldr	r2, [r7, #12]
   1ea72:	3301      	adds	r3, #1
   1ea74:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ea78:	2302      	movs	r3, #2
   1ea7a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1ea7e:	2a00      	cmp	r2, #0
   1ea80:	f47f af59 	bne.w	1e936 <d_print_array_type+0x4e>
   1ea84:	e75f      	b.n	1e946 <d_print_array_type+0x5e>
   1ea86:	2200      	movs	r2, #0
   1ea88:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1ea8c:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   1ea90:	4620      	mov	r0, r4
   1ea92:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1ea96:	4798      	blx	r3
   1ea98:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ea9c:	2229      	movs	r2, #41	; 0x29
   1ea9e:	3301      	adds	r3, #1
   1eaa0:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1eaa4:	7022      	strb	r2, [r4, #0]
   1eaa6:	2301      	movs	r3, #1
   1eaa8:	e733      	b.n	1e912 <d_print_array_type+0x2a>
   1eaaa:	bf00      	nop
   1eaac:	00043aa0 	.word	0x00043aa0

0001eab0 <d_print_conversion>:
   1eab0:	b570      	push	{r4, r5, r6, lr}
   1eab2:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
   1eab6:	b082      	sub	sp, #8
   1eab8:	4604      	mov	r4, r0
   1eaba:	4615      	mov	r5, r2
   1eabc:	b12b      	cbz	r3, 1eaca <d_print_conversion+0x1a>
   1eabe:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
   1eac2:	9200      	str	r2, [sp, #0]
   1eac4:	f8c0 d110 	str.w	sp, [r0, #272]	; 0x110
   1eac8:	9301      	str	r3, [sp, #4]
   1eaca:	68ea      	ldr	r2, [r5, #12]
   1eacc:	7813      	ldrb	r3, [r2, #0]
   1eace:	2b04      	cmp	r3, #4
   1ead0:	d00b      	beq.n	1eaea <d_print_conversion+0x3a>
   1ead2:	2111      	movs	r1, #17
   1ead4:	4620      	mov	r0, r4
   1ead6:	f7ff f9ab 	bl	1de30 <d_print_comp>
   1eada:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   1eade:	b113      	cbz	r3, 1eae6 <d_print_conversion+0x36>
   1eae0:	9b00      	ldr	r3, [sp, #0]
   1eae2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1eae6:	b002      	add	sp, #8
   1eae8:	bd70      	pop	{r4, r5, r6, pc}
   1eaea:	68d2      	ldr	r2, [r2, #12]
   1eaec:	2111      	movs	r1, #17
   1eaee:	4620      	mov	r0, r4
   1eaf0:	f7ff f99e 	bl	1de30 <d_print_comp>
   1eaf4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   1eaf8:	b113      	cbz	r3, 1eb00 <d_print_conversion+0x50>
   1eafa:	9b00      	ldr	r3, [sp, #0]
   1eafc:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1eb00:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1eb04:	2b3c      	cmp	r3, #60	; 0x3c
   1eb06:	d021      	beq.n	1eb4c <d_print_conversion+0x9c>
   1eb08:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1eb0c:	29ff      	cmp	r1, #255	; 0xff
   1eb0e:	d044      	beq.n	1eb9a <d_print_conversion+0xea>
   1eb10:	1c4a      	adds	r2, r1, #1
   1eb12:	233c      	movs	r3, #60	; 0x3c
   1eb14:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1eb18:	5463      	strb	r3, [r4, r1]
   1eb1a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1eb1e:	68eb      	ldr	r3, [r5, #12]
   1eb20:	2111      	movs	r1, #17
   1eb22:	691a      	ldr	r2, [r3, #16]
   1eb24:	4620      	mov	r0, r4
   1eb26:	f7ff f983 	bl	1de30 <d_print_comp>
   1eb2a:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1eb2e:	2b3e      	cmp	r3, #62	; 0x3e
   1eb30:	d027      	beq.n	1eb82 <d_print_conversion+0xd2>
   1eb32:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1eb36:	29ff      	cmp	r1, #255	; 0xff
   1eb38:	d014      	beq.n	1eb64 <d_print_conversion+0xb4>
   1eb3a:	1c4a      	adds	r2, r1, #1
   1eb3c:	233e      	movs	r3, #62	; 0x3e
   1eb3e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1eb42:	5463      	strb	r3, [r4, r1]
   1eb44:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1eb48:	b002      	add	sp, #8
   1eb4a:	bd70      	pop	{r4, r5, r6, pc}
   1eb4c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1eb50:	2bff      	cmp	r3, #255	; 0xff
   1eb52:	d033      	beq.n	1ebbc <d_print_conversion+0x10c>
   1eb54:	2220      	movs	r2, #32
   1eb56:	1c59      	adds	r1, r3, #1
   1eb58:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1eb5c:	54e2      	strb	r2, [r4, r3]
   1eb5e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1eb62:	e7d3      	b.n	1eb0c <d_print_conversion+0x5c>
   1eb64:	2500      	movs	r5, #0
   1eb66:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1eb6a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1eb6e:	4620      	mov	r0, r4
   1eb70:	4798      	blx	r3
   1eb72:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1eb76:	2201      	movs	r2, #1
   1eb78:	4413      	add	r3, r2
   1eb7a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1eb7e:	4629      	mov	r1, r5
   1eb80:	e7dc      	b.n	1eb3c <d_print_conversion+0x8c>
   1eb82:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1eb86:	2bff      	cmp	r3, #255	; 0xff
   1eb88:	d02b      	beq.n	1ebe2 <d_print_conversion+0x132>
   1eb8a:	2220      	movs	r2, #32
   1eb8c:	1c59      	adds	r1, r3, #1
   1eb8e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1eb92:	54e2      	strb	r2, [r4, r3]
   1eb94:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1eb98:	e7cd      	b.n	1eb36 <d_print_conversion+0x86>
   1eb9a:	2600      	movs	r6, #0
   1eb9c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1eba0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1eba4:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1eba8:	4620      	mov	r0, r4
   1ebaa:	4798      	blx	r3
   1ebac:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ebb0:	2201      	movs	r2, #1
   1ebb2:	4413      	add	r3, r2
   1ebb4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ebb8:	4631      	mov	r1, r6
   1ebba:	e7aa      	b.n	1eb12 <d_print_conversion+0x62>
   1ebbc:	2200      	movs	r2, #0
   1ebbe:	4619      	mov	r1, r3
   1ebc0:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   1ebc4:	f8d4 6108 	ldr.w	r6, [r4, #264]	; 0x108
   1ebc8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1ebcc:	4620      	mov	r0, r4
   1ebce:	47b0      	blx	r6
   1ebd0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ebd4:	2220      	movs	r2, #32
   1ebd6:	3301      	adds	r3, #1
   1ebd8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ebdc:	7022      	strb	r2, [r4, #0]
   1ebde:	2101      	movs	r1, #1
   1ebe0:	e796      	b.n	1eb10 <d_print_conversion+0x60>
   1ebe2:	2100      	movs	r1, #0
   1ebe4:	e9d4 5242 	ldrd	r5, r2, [r4, #264]	; 0x108
   1ebe8:	f884 10ff 	strb.w	r1, [r4, #255]	; 0xff
   1ebec:	4620      	mov	r0, r4
   1ebee:	4619      	mov	r1, r3
   1ebf0:	47a8      	blx	r5
   1ebf2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ebf6:	2220      	movs	r2, #32
   1ebf8:	3301      	adds	r3, #1
   1ebfa:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ebfe:	7022      	strb	r2, [r4, #0]
   1ec00:	2101      	movs	r1, #1
   1ec02:	e79a      	b.n	1eb3a <d_print_conversion+0x8a>

0001ec04 <d_print_expr_op>:
   1ec04:	7811      	ldrb	r1, [r2, #0]
   1ec06:	2932      	cmp	r1, #50	; 0x32
   1ec08:	d002      	beq.n	1ec10 <d_print_expr_op+0xc>
   1ec0a:	2111      	movs	r1, #17
   1ec0c:	f7ff b910 	b.w	1de30 <d_print_comp>
   1ec10:	68d3      	ldr	r3, [r2, #12]
   1ec12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ec16:	e9d3 5701 	ldrd	r5, r7, [r3, #4]
   1ec1a:	b367      	cbz	r7, 1ec76 <d_print_expr_op+0x72>
   1ec1c:	442f      	add	r7, r5
   1ec1e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1ec22:	4604      	mov	r4, r0
   1ec24:	3d01      	subs	r5, #1
   1ec26:	3f01      	subs	r7, #1
   1ec28:	f04f 0800 	mov.w	r8, #0
   1ec2c:	e009      	b.n	1ec42 <d_print_expr_op+0x3e>
   1ec2e:	460b      	mov	r3, r1
   1ec30:	42bd      	cmp	r5, r7
   1ec32:	f101 0101 	add.w	r1, r1, #1
   1ec36:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1ec3a:	54e6      	strb	r6, [r4, r3]
   1ec3c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1ec40:	d019      	beq.n	1ec76 <d_print_expr_op+0x72>
   1ec42:	29ff      	cmp	r1, #255	; 0xff
   1ec44:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   1ec48:	d1f1      	bne.n	1ec2e <d_print_expr_op+0x2a>
   1ec4a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1ec4e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1ec52:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1ec56:	4620      	mov	r0, r4
   1ec58:	4798      	blx	r3
   1ec5a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ec5e:	3301      	adds	r3, #1
   1ec60:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ec64:	2300      	movs	r3, #0
   1ec66:	2101      	movs	r1, #1
   1ec68:	42bd      	cmp	r5, r7
   1ec6a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1ec6e:	54e6      	strb	r6, [r4, r3]
   1ec70:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1ec74:	d1e5      	bne.n	1ec42 <d_print_expr_op+0x3e>
   1ec76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ec7a:	bf00      	nop

0001ec7c <d_demangle_callback.constprop.0>:
   1ec7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ec80:	b0e4      	sub	sp, #400	; 0x190
   1ec82:	f890 9000 	ldrb.w	r9, [r0]
   1ec86:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
   1ec8a:	af00      	add	r7, sp, #0
   1ec8c:	4604      	mov	r4, r0
   1ec8e:	460e      	mov	r6, r1
   1ec90:	4690      	mov	r8, r2
   1ec92:	f000 80f8 	beq.w	1ee86 <d_demangle_callback.constprop.0+0x20a>
   1ec96:	49c1      	ldr	r1, [pc, #772]	; (1ef9c <d_demangle_callback.constprop.0+0x320>)
   1ec98:	2208      	movs	r2, #8
   1ec9a:	4620      	mov	r0, r4
   1ec9c:	f019 fb3e 	bl	3831c <strncmp>
   1eca0:	b948      	cbnz	r0, 1ecb6 <d_demangle_callback.constprop.0+0x3a>
   1eca2:	7a23      	ldrb	r3, [r4, #8]
   1eca4:	2b2e      	cmp	r3, #46	; 0x2e
   1eca6:	f000 80dd 	beq.w	1ee64 <d_demangle_callback.constprop.0+0x1e8>
   1ecaa:	2b5f      	cmp	r3, #95	; 0x5f
   1ecac:	f000 80da 	beq.w	1ee64 <d_demangle_callback.constprop.0+0x1e8>
   1ecb0:	2b24      	cmp	r3, #36	; 0x24
   1ecb2:	f000 80d7 	beq.w	1ee64 <d_demangle_callback.constprop.0+0x1e8>
   1ecb6:	f04f 0a00 	mov.w	sl, #0
   1ecba:	4620      	mov	r0, r4
   1ecbc:	f7f9 fd00 	bl	186c0 <strlen>
   1ecc0:	1823      	adds	r3, r4, r0
   1ecc2:	ea4f 0e40 	mov.w	lr, r0, lsl #1
   1ecc6:	2100      	movs	r1, #0
   1ecc8:	60fb      	str	r3, [r7, #12]
   1ecca:	f5be 6f00 	cmp.w	lr, #2048	; 0x800
   1ecce:	f04f 0311 	mov.w	r3, #17
   1ecd2:	e9c7 110c 	strd	r1, r1, [r7, #48]	; 0x30
   1ecd6:	e9c7 110e 	strd	r1, r1, [r7, #56]	; 0x38
   1ecda:	60bc      	str	r4, [r7, #8]
   1ecdc:	617c      	str	r4, [r7, #20]
   1ecde:	62f8      	str	r0, [r7, #44]	; 0x2c
   1ece0:	61f9      	str	r1, [r7, #28]
   1ece2:	62b9      	str	r1, [r7, #40]	; 0x28
   1ece4:	6439      	str	r1, [r7, #64]	; 0x40
   1ece6:	613b      	str	r3, [r7, #16]
   1ece8:	f8c7 e020 	str.w	lr, [r7, #32]
   1ecec:	f200 80b4 	bhi.w	1ee58 <d_demangle_callback.constprop.0+0x1dc>
   1ecf0:	466d      	mov	r5, sp
   1ecf2:	ea4f 0c80 	mov.w	ip, r0, lsl #2
   1ecf6:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1ecfa:	f10c 0c07 	add.w	ip, ip, #7
   1ecfe:	eba5 03c3 	sub.w	r3, r5, r3, lsl #3
   1ed02:	469d      	mov	sp, r3
   1ed04:	f02c 0c07 	bic.w	ip, ip, #7
   1ed08:	466a      	mov	r2, sp
   1ed0a:	f1ba 0f01 	cmp.w	sl, #1
   1ed0e:	ebad 0d0c 	sub.w	sp, sp, ip
   1ed12:	61ba      	str	r2, [r7, #24]
   1ed14:	f8c7 d024 	str.w	sp, [r7, #36]	; 0x24
   1ed18:	f000 80bc 	beq.w	1ee94 <d_demangle_callback.constprop.0+0x218>
   1ed1c:	f1aa 0302 	sub.w	r3, sl, #2
   1ed20:	2b01      	cmp	r3, #1
   1ed22:	f200 80bd 	bhi.w	1eea0 <d_demangle_callback.constprop.0+0x224>
   1ed26:	7ae3      	ldrb	r3, [r4, #11]
   1ed28:	f1ba 0f02 	cmp.w	sl, #2
   1ed2c:	bf08      	it	eq
   1ed2e:	f04f 0944 	moveq.w	r9, #68	; 0x44
   1ed32:	f104 0a0b 	add.w	sl, r4, #11
   1ed36:	bf18      	it	ne
   1ed38:	f04f 0945 	movne.w	r9, #69	; 0x45
   1ed3c:	2b5f      	cmp	r3, #95	; 0x5f
   1ed3e:	f8c7 a014 	str.w	sl, [r7, #20]
   1ed42:	d103      	bne.n	1ed4c <d_demangle_callback.constprop.0+0xd0>
   1ed44:	7b23      	ldrb	r3, [r4, #12]
   1ed46:	2b5a      	cmp	r3, #90	; 0x5a
   1ed48:	f000 812a 	beq.w	1efa0 <d_demangle_callback.constprop.0+0x324>
   1ed4c:	f1be 0f00 	cmp.w	lr, #0
   1ed50:	f340 80ae 	ble.w	1eeb0 <d_demangle_callback.constprop.0+0x234>
   1ed54:	4650      	mov	r0, sl
   1ed56:	607a      	str	r2, [r7, #4]
   1ed58:	f7f9 fcb2 	bl	186c0 <strlen>
   1ed5c:	687a      	ldr	r2, [r7, #4]
   1ed5e:	2300      	movs	r3, #0
   1ed60:	2101      	movs	r1, #1
   1ed62:	e9c2 3301 	strd	r3, r3, [r2, #4]
   1ed66:	61f9      	str	r1, [r7, #28]
   1ed68:	2800      	cmp	r0, #0
   1ed6a:	f000 80a1 	beq.w	1eeb0 <d_demangle_callback.constprop.0+0x234>
   1ed6e:	e9c2 a003 	strd	sl, r0, [r2, #12]
   1ed72:	7013      	strb	r3, [r2, #0]
   1ed74:	4649      	mov	r1, r9
   1ed76:	2300      	movs	r3, #0
   1ed78:	f107 0008 	add.w	r0, r7, #8
   1ed7c:	f7fa fbc4 	bl	19508 <d_make_comp>
   1ed80:	697c      	ldr	r4, [r7, #20]
   1ed82:	4681      	mov	r9, r0
   1ed84:	4620      	mov	r0, r4
   1ed86:	f7f9 fc9b 	bl	186c0 <strlen>
   1ed8a:	1823      	adds	r3, r4, r0
   1ed8c:	617b      	str	r3, [r7, #20]
   1ed8e:	5c23      	ldrb	r3, [r4, r0]
   1ed90:	2b00      	cmp	r3, #0
   1ed92:	f040 8082 	bne.w	1ee9a <d_demangle_callback.constprop.0+0x21e>
   1ed96:	f1b9 0f00 	cmp.w	r9, #0
   1ed9a:	d07e      	beq.n	1ee9a <d_demangle_callback.constprop.0+0x21e>
   1ed9c:	f107 0444 	add.w	r4, r7, #68	; 0x44
   1eda0:	4649      	mov	r1, r9
   1eda2:	4620      	mov	r0, r4
   1eda4:	e9c4 3344 	strd	r3, r3, [r4, #272]	; 0x110
   1eda8:	e9c4 3349 	strd	r3, r3, [r4, #292]	; 0x124
   1edac:	e9c4 3346 	strd	r3, r3, [r4, #280]	; 0x118
   1edb0:	e9c4 334b 	strd	r3, r3, [r4, #300]	; 0x12c
   1edb4:	e9c4 334d 	strd	r3, r3, [r4, #308]	; 0x134
   1edb8:	e9c4 334f 	strd	r3, r3, [r4, #316]	; 0x13c
   1edbc:	607b      	str	r3, [r7, #4]
   1edbe:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1edc2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1edc6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   1edca:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
   1edce:	f8c4 6108 	str.w	r6, [r4, #264]	; 0x108
   1edd2:	f8c4 810c 	str.w	r8, [r4, #268]	; 0x10c
   1edd6:	f7fa fc5b 	bl	19690 <d_count_templates_scopes>
   1edda:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
   1edde:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
   1ede2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   1ede6:	bfbc      	itt	lt
   1ede8:	687b      	ldrlt	r3, [r7, #4]
   1edea:	f8c4 311c 	strlt.w	r3, [r4, #284]	; 0x11c
   1edee:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   1edf2:	2901      	cmp	r1, #1
   1edf4:	fb01 f303 	mul.w	r3, r1, r3
   1edf8:	46e8      	mov	r8, sp
   1edfa:	bfb8      	it	lt
   1edfc:	2101      	movlt	r1, #1
   1edfe:	eba8 01c1 	sub.w	r1, r8, r1, lsl #3
   1ee02:	2b01      	cmp	r3, #1
   1ee04:	468d      	mov	sp, r1
   1ee06:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
   1ee0a:	4668      	mov	r0, sp
   1ee0c:	bfb8      	it	lt
   1ee0e:	2301      	movlt	r3, #1
   1ee10:	eba0 03c3 	sub.w	r3, r0, r3, lsl #3
   1ee14:	469d      	mov	sp, r3
   1ee16:	2600      	movs	r6, #0
   1ee18:	464a      	mov	r2, r9
   1ee1a:	f8c4 1130 	str.w	r1, [r4, #304]	; 0x130
   1ee1e:	4620      	mov	r0, r4
   1ee20:	2111      	movs	r1, #17
   1ee22:	f8c4 d13c 	str.w	sp, [r4, #316]	; 0x13c
   1ee26:	f8c4 6148 	str.w	r6, [r4, #328]	; 0x148
   1ee2a:	f7ff f801 	bl	1de30 <d_print_comp>
   1ee2e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1ee32:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1ee36:	5466      	strb	r6, [r4, r1]
   1ee38:	46c5      	mov	sp, r8
   1ee3a:	4620      	mov	r0, r4
   1ee3c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1ee40:	4798      	blx	r3
   1ee42:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
   1ee46:	fab0 f080 	clz	r0, r0
   1ee4a:	0940      	lsrs	r0, r0, #5
   1ee4c:	46ad      	mov	sp, r5
   1ee4e:	f507 77c8 	add.w	r7, r7, #400	; 0x190
   1ee52:	46bd      	mov	sp, r7
   1ee54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ee58:	4608      	mov	r0, r1
   1ee5a:	f507 77c8 	add.w	r7, r7, #400	; 0x190
   1ee5e:	46bd      	mov	sp, r7
   1ee60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ee64:	7a63      	ldrb	r3, [r4, #9]
   1ee66:	2b44      	cmp	r3, #68	; 0x44
   1ee68:	d002      	beq.n	1ee70 <d_demangle_callback.constprop.0+0x1f4>
   1ee6a:	2b49      	cmp	r3, #73	; 0x49
   1ee6c:	f47f af23 	bne.w	1ecb6 <d_demangle_callback.constprop.0+0x3a>
   1ee70:	7aa2      	ldrb	r2, [r4, #10]
   1ee72:	2a5f      	cmp	r2, #95	; 0x5f
   1ee74:	f47f af1f 	bne.w	1ecb6 <d_demangle_callback.constprop.0+0x3a>
   1ee78:	2b49      	cmp	r3, #73	; 0x49
   1ee7a:	bf0c      	ite	eq
   1ee7c:	f04f 0a02 	moveq.w	sl, #2
   1ee80:	f04f 0a03 	movne.w	sl, #3
   1ee84:	e719      	b.n	1ecba <d_demangle_callback.constprop.0+0x3e>
   1ee86:	7843      	ldrb	r3, [r0, #1]
   1ee88:	2b5a      	cmp	r3, #90	; 0x5a
   1ee8a:	f47f af04 	bne.w	1ec96 <d_demangle_callback.constprop.0+0x1a>
   1ee8e:	f04f 0a01 	mov.w	sl, #1
   1ee92:	e712      	b.n	1ecba <d_demangle_callback.constprop.0+0x3e>
   1ee94:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
   1ee98:	d00c      	beq.n	1eeb4 <d_demangle_callback.constprop.0+0x238>
   1ee9a:	2000      	movs	r0, #0
   1ee9c:	46ad      	mov	sp, r5
   1ee9e:	e7d6      	b.n	1ee4e <d_demangle_callback.constprop.0+0x1d2>
   1eea0:	f107 0008 	add.w	r0, r7, #8
   1eea4:	f7fa ffbc 	bl	19e20 <d_type>
   1eea8:	697b      	ldr	r3, [r7, #20]
   1eeaa:	4681      	mov	r9, r0
   1eeac:	781b      	ldrb	r3, [r3, #0]
   1eeae:	e76f      	b.n	1ed90 <d_demangle_callback.constprop.0+0x114>
   1eeb0:	2200      	movs	r2, #0
   1eeb2:	e75f      	b.n	1ed74 <d_demangle_callback.constprop.0+0xf8>
   1eeb4:	7863      	ldrb	r3, [r4, #1]
   1eeb6:	2b5a      	cmp	r3, #90	; 0x5a
   1eeb8:	d1ef      	bne.n	1ee9a <d_demangle_callback.constprop.0+0x21e>
   1eeba:	78a3      	ldrb	r3, [r4, #2]
   1eebc:	3402      	adds	r4, #2
   1eebe:	2b47      	cmp	r3, #71	; 0x47
   1eec0:	617c      	str	r4, [r7, #20]
   1eec2:	f000 8081 	beq.w	1efc8 <d_demangle_callback.constprop.0+0x34c>
   1eec6:	2b54      	cmp	r3, #84	; 0x54
   1eec8:	d07e      	beq.n	1efc8 <d_demangle_callback.constprop.0+0x34c>
   1eeca:	4651      	mov	r1, sl
   1eecc:	f107 0008 	add.w	r0, r7, #8
   1eed0:	f7fc f888 	bl	1afe4 <d_encoding.part.0>
   1eed4:	4681      	mov	r9, r0
   1eed6:	693b      	ldr	r3, [r7, #16]
   1eed8:	07db      	lsls	r3, r3, #31
   1eeda:	d572      	bpl.n	1efc2 <d_demangle_callback.constprop.0+0x346>
   1eedc:	6979      	ldr	r1, [r7, #20]
   1eede:	780b      	ldrb	r3, [r1, #0]
   1eee0:	2b2e      	cmp	r3, #46	; 0x2e
   1eee2:	f47f af55 	bne.w	1ed90 <d_demangle_callback.constprop.0+0x114>
   1eee6:	2400      	movs	r4, #0
   1eee8:	784b      	ldrb	r3, [r1, #1]
   1eeea:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   1eeee:	2a19      	cmp	r2, #25
   1eef0:	d948      	bls.n	1ef84 <d_demangle_callback.constprop.0+0x308>
   1eef2:	2b5f      	cmp	r3, #95	; 0x5f
   1eef4:	d046      	beq.n	1ef84 <d_demangle_callback.constprop.0+0x308>
   1eef6:	3b30      	subs	r3, #48	; 0x30
   1eef8:	2b09      	cmp	r3, #9
   1eefa:	d862      	bhi.n	1efc2 <d_demangle_callback.constprop.0+0x346>
   1eefc:	7808      	ldrb	r0, [r1, #0]
   1eefe:	460b      	mov	r3, r1
   1ef00:	282e      	cmp	r0, #46	; 0x2e
   1ef02:	d118      	bne.n	1ef36 <d_demangle_callback.constprop.0+0x2ba>
   1ef04:	f893 c001 	ldrb.w	ip, [r3, #1]
   1ef08:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
   1ef0c:	f1bc 0f09 	cmp.w	ip, #9
   1ef10:	d811      	bhi.n	1ef36 <d_demangle_callback.constprop.0+0x2ba>
   1ef12:	f893 c002 	ldrb.w	ip, [r3, #2]
   1ef16:	f1ac 0230 	sub.w	r2, ip, #48	; 0x30
   1ef1a:	2a09      	cmp	r2, #9
   1ef1c:	f103 0302 	add.w	r3, r3, #2
   1ef20:	d806      	bhi.n	1ef30 <d_demangle_callback.constprop.0+0x2b4>
   1ef22:	f813 cf01 	ldrb.w	ip, [r3, #1]!
   1ef26:	f1ac 0e30 	sub.w	lr, ip, #48	; 0x30
   1ef2a:	f1be 0f09 	cmp.w	lr, #9
   1ef2e:	d9f8      	bls.n	1ef22 <d_demangle_callback.constprop.0+0x2a6>
   1ef30:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
   1ef34:	d0e6      	beq.n	1ef04 <d_demangle_callback.constprop.0+0x288>
   1ef36:	e9d7 2007 	ldrd	r2, r0, [r7, #28]
   1ef3a:	4282      	cmp	r2, r0
   1ef3c:	617b      	str	r3, [r7, #20]
   1ef3e:	eba3 0c01 	sub.w	ip, r3, r1
   1ef42:	da1d      	bge.n	1ef80 <d_demangle_callback.constprop.0+0x304>
   1ef44:	69b8      	ldr	r0, [r7, #24]
   1ef46:	eb02 0e82 	add.w	lr, r2, r2, lsl #2
   1ef4a:	eb00 038e 	add.w	r3, r0, lr, lsl #2
   1ef4e:	3201      	adds	r2, #1
   1ef50:	f1bc 0f00 	cmp.w	ip, #0
   1ef54:	e9c3 4401 	strd	r4, r4, [r3, #4]
   1ef58:	61fa      	str	r2, [r7, #28]
   1ef5a:	dd11      	ble.n	1ef80 <d_demangle_callback.constprop.0+0x304>
   1ef5c:	e9c3 4401 	strd	r4, r4, [r3, #4]
   1ef60:	f800 402e 	strb.w	r4, [r0, lr, lsl #2]
   1ef64:	e9c3 1c03 	strd	r1, ip, [r3, #12]
   1ef68:	464a      	mov	r2, r9
   1ef6a:	214e      	movs	r1, #78	; 0x4e
   1ef6c:	f107 0008 	add.w	r0, r7, #8
   1ef70:	f7fa faca 	bl	19508 <d_make_comp>
   1ef74:	6979      	ldr	r1, [r7, #20]
   1ef76:	780b      	ldrb	r3, [r1, #0]
   1ef78:	2b2e      	cmp	r3, #46	; 0x2e
   1ef7a:	4681      	mov	r9, r0
   1ef7c:	d0b4      	beq.n	1eee8 <d_demangle_callback.constprop.0+0x26c>
   1ef7e:	e707      	b.n	1ed90 <d_demangle_callback.constprop.0+0x114>
   1ef80:	2300      	movs	r3, #0
   1ef82:	e7f1      	b.n	1ef68 <d_demangle_callback.constprop.0+0x2ec>
   1ef84:	1c8a      	adds	r2, r1, #2
   1ef86:	4613      	mov	r3, r2
   1ef88:	f812 0b01 	ldrb.w	r0, [r2], #1
   1ef8c:	f1a0 0c61 	sub.w	ip, r0, #97	; 0x61
   1ef90:	f1bc 0f19 	cmp.w	ip, #25
   1ef94:	d9f7      	bls.n	1ef86 <d_demangle_callback.constprop.0+0x30a>
   1ef96:	285f      	cmp	r0, #95	; 0x5f
   1ef98:	d0f5      	beq.n	1ef86 <d_demangle_callback.constprop.0+0x30a>
   1ef9a:	e7b1      	b.n	1ef00 <d_demangle_callback.constprop.0+0x284>
   1ef9c:	00043830 	.word	0x00043830
   1efa0:	7b63      	ldrb	r3, [r4, #13]
   1efa2:	340d      	adds	r4, #13
   1efa4:	2b47      	cmp	r3, #71	; 0x47
   1efa6:	617c      	str	r4, [r7, #20]
   1efa8:	f107 0008 	add.w	r0, r7, #8
   1efac:	d005      	beq.n	1efba <d_demangle_callback.constprop.0+0x33e>
   1efae:	2b54      	cmp	r3, #84	; 0x54
   1efb0:	d003      	beq.n	1efba <d_demangle_callback.constprop.0+0x33e>
   1efb2:	f7fc f817 	bl	1afe4 <d_encoding.part.0>
   1efb6:	4602      	mov	r2, r0
   1efb8:	e6dc      	b.n	1ed74 <d_demangle_callback.constprop.0+0xf8>
   1efba:	f7fc f891 	bl	1b0e0 <d_special_name>
   1efbe:	4602      	mov	r2, r0
   1efc0:	e6d8      	b.n	1ed74 <d_demangle_callback.constprop.0+0xf8>
   1efc2:	697b      	ldr	r3, [r7, #20]
   1efc4:	781b      	ldrb	r3, [r3, #0]
   1efc6:	e6e3      	b.n	1ed90 <d_demangle_callback.constprop.0+0x114>
   1efc8:	f107 0008 	add.w	r0, r7, #8
   1efcc:	f7fc f888 	bl	1b0e0 <d_special_name>
   1efd0:	4681      	mov	r9, r0
   1efd2:	e780      	b.n	1eed6 <d_demangle_callback.constprop.0+0x25a>

0001efd4 <d_print_subexpr>:
   1efd4:	b570      	push	{r4, r5, r6, lr}
   1efd6:	7813      	ldrb	r3, [r2, #0]
   1efd8:	2b01      	cmp	r3, #1
   1efda:	b082      	sub	sp, #8
   1efdc:	4615      	mov	r5, r2
   1efde:	4604      	mov	r4, r0
   1efe0:	d903      	bls.n	1efea <d_print_subexpr+0x16>
   1efe2:	2b31      	cmp	r3, #49	; 0x31
   1efe4:	d001      	beq.n	1efea <d_print_subexpr+0x16>
   1efe6:	2b06      	cmp	r3, #6
   1efe8:	d138      	bne.n	1f05c <d_print_subexpr+0x88>
   1efea:	2601      	movs	r6, #1
   1efec:	686b      	ldr	r3, [r5, #4]
   1efee:	2b01      	cmp	r3, #1
   1eff0:	dc22      	bgt.n	1f038 <d_print_subexpr+0x64>
   1eff2:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
   1eff6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   1effa:	dc1d      	bgt.n	1f038 <d_print_subexpr+0x64>
   1effc:	3301      	adds	r3, #1
   1effe:	3201      	adds	r2, #1
   1f000:	606b      	str	r3, [r5, #4]
   1f002:	2111      	movs	r1, #17
   1f004:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
   1f008:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
   1f00c:	f8c4 d12c 	str.w	sp, [r4, #300]	; 0x12c
   1f010:	462a      	mov	r2, r5
   1f012:	4620      	mov	r0, r4
   1f014:	9301      	str	r3, [sp, #4]
   1f016:	9500      	str	r5, [sp, #0]
   1f018:	f7fc fe76 	bl	1bd08 <d_print_comp_inner>
   1f01c:	686a      	ldr	r2, [r5, #4]
   1f01e:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   1f022:	9901      	ldr	r1, [sp, #4]
   1f024:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
   1f028:	3a01      	subs	r2, #1
   1f02a:	3b01      	subs	r3, #1
   1f02c:	606a      	str	r2, [r5, #4]
   1f02e:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   1f032:	b136      	cbz	r6, 1f042 <d_print_subexpr+0x6e>
   1f034:	b002      	add	sp, #8
   1f036:	bd70      	pop	{r4, r5, r6, pc}
   1f038:	2301      	movs	r3, #1
   1f03a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   1f03e:	2e00      	cmp	r6, #0
   1f040:	d1f8      	bne.n	1f034 <d_print_subexpr+0x60>
   1f042:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1f046:	29ff      	cmp	r1, #255	; 0xff
   1f048:	d015      	beq.n	1f076 <d_print_subexpr+0xa2>
   1f04a:	1c4a      	adds	r2, r1, #1
   1f04c:	2329      	movs	r3, #41	; 0x29
   1f04e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1f052:	5463      	strb	r3, [r4, r1]
   1f054:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1f058:	b002      	add	sp, #8
   1f05a:	bd70      	pop	{r4, r5, r6, pc}
   1f05c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1f060:	29ff      	cmp	r1, #255	; 0xff
   1f062:	d016      	beq.n	1f092 <d_print_subexpr+0xbe>
   1f064:	1c4a      	adds	r2, r1, #1
   1f066:	2328      	movs	r3, #40	; 0x28
   1f068:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1f06c:	2600      	movs	r6, #0
   1f06e:	5463      	strb	r3, [r4, r1]
   1f070:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1f074:	e7ba      	b.n	1efec <d_print_subexpr+0x18>
   1f076:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1f07a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1f07e:	4620      	mov	r0, r4
   1f080:	4798      	blx	r3
   1f082:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f086:	2201      	movs	r2, #1
   1f088:	4413      	add	r3, r2
   1f08a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f08e:	4631      	mov	r1, r6
   1f090:	e7dc      	b.n	1f04c <d_print_subexpr+0x78>
   1f092:	2600      	movs	r6, #0
   1f094:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	; 0x108
   1f098:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   1f09c:	4798      	blx	r3
   1f09e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f0a2:	2201      	movs	r2, #1
   1f0a4:	4413      	add	r3, r2
   1f0a6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f0aa:	4631      	mov	r1, r6
   1f0ac:	e7db      	b.n	1f066 <d_print_subexpr+0x92>
   1f0ae:	bf00      	nop

0001f0b0 <d_maybe_print_fold_expression>:
   1f0b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f0b4:	68d3      	ldr	r3, [r2, #12]
   1f0b6:	68db      	ldr	r3, [r3, #12]
   1f0b8:	681b      	ldr	r3, [r3, #0]
   1f0ba:	7819      	ldrb	r1, [r3, #0]
   1f0bc:	2966      	cmp	r1, #102	; 0x66
   1f0be:	d178      	bne.n	1f1b2 <d_maybe_print_fold_expression+0x102>
   1f0c0:	6912      	ldr	r2, [r2, #16]
   1f0c2:	f8d0 7124 	ldr.w	r7, [r0, #292]	; 0x124
   1f0c6:	e9d2 8a03 	ldrd	r8, sl, [r2, #12]
   1f0ca:	f89a 2000 	ldrb.w	r2, [sl]
   1f0ce:	2a3c      	cmp	r2, #60	; 0x3c
   1f0d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f0d4:	bf08      	it	eq
   1f0d6:	e9da a903 	ldrdeq	sl, r9, [sl, #12]
   1f0da:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
   1f0de:	785b      	ldrb	r3, [r3, #1]
   1f0e0:	bf18      	it	ne
   1f0e2:	f04f 0900 	movne.w	r9, #0
   1f0e6:	2b6c      	cmp	r3, #108	; 0x6c
   1f0e8:	4604      	mov	r4, r0
   1f0ea:	f000 80a2 	beq.w	1f232 <d_maybe_print_fold_expression+0x182>
   1f0ee:	d863      	bhi.n	1f1b8 <d_maybe_print_fold_expression+0x108>
   1f0f0:	2b4c      	cmp	r3, #76	; 0x4c
   1f0f2:	d001      	beq.n	1f0f8 <d_maybe_print_fold_expression+0x48>
   1f0f4:	2b52      	cmp	r3, #82	; 0x52
   1f0f6:	d157      	bne.n	1f1a8 <d_maybe_print_fold_expression+0xf8>
   1f0f8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1f0fc:	29ff      	cmp	r1, #255	; 0xff
   1f0fe:	f000 80eb 	beq.w	1f2d8 <d_maybe_print_fold_expression+0x228>
   1f102:	1c4b      	adds	r3, r1, #1
   1f104:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1f108:	2328      	movs	r3, #40	; 0x28
   1f10a:	5463      	strb	r3, [r4, r1]
   1f10c:	4652      	mov	r2, sl
   1f10e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1f112:	2111      	movs	r1, #17
   1f114:	4620      	mov	r0, r4
   1f116:	4e78      	ldr	r6, [pc, #480]	; (1f2f8 <d_maybe_print_fold_expression+0x248>)
   1f118:	f7ff ff5c 	bl	1efd4 <d_print_subexpr>
   1f11c:	2111      	movs	r1, #17
   1f11e:	4642      	mov	r2, r8
   1f120:	4620      	mov	r0, r4
   1f122:	f7ff fd6f 	bl	1ec04 <d_print_expr_op>
   1f126:	f106 0b02 	add.w	fp, r6, #2
   1f12a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1f12e:	252e      	movs	r5, #46	; 0x2e
   1f130:	f04f 0a00 	mov.w	sl, #0
   1f134:	e00b      	b.n	1f14e <d_maybe_print_fold_expression+0x9e>
   1f136:	460b      	mov	r3, r1
   1f138:	45b3      	cmp	fp, r6
   1f13a:	f101 0101 	add.w	r1, r1, #1
   1f13e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f142:	54e5      	strb	r5, [r4, r3]
   1f144:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1f148:	d019      	beq.n	1f17e <d_maybe_print_fold_expression+0xce>
   1f14a:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   1f14e:	29ff      	cmp	r1, #255	; 0xff
   1f150:	d1f1      	bne.n	1f136 <d_maybe_print_fold_expression+0x86>
   1f152:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1f156:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1f15a:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
   1f15e:	4620      	mov	r0, r4
   1f160:	4798      	blx	r3
   1f162:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f166:	3301      	adds	r3, #1
   1f168:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f16c:	2300      	movs	r3, #0
   1f16e:	2101      	movs	r1, #1
   1f170:	45b3      	cmp	fp, r6
   1f172:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f176:	54e5      	strb	r5, [r4, r3]
   1f178:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1f17c:	d1e5      	bne.n	1f14a <d_maybe_print_fold_expression+0x9a>
   1f17e:	4642      	mov	r2, r8
   1f180:	2111      	movs	r1, #17
   1f182:	4620      	mov	r0, r4
   1f184:	f7ff fd3e 	bl	1ec04 <d_print_expr_op>
   1f188:	464a      	mov	r2, r9
   1f18a:	2111      	movs	r1, #17
   1f18c:	4620      	mov	r0, r4
   1f18e:	f7ff ff21 	bl	1efd4 <d_print_subexpr>
   1f192:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1f196:	29ff      	cmp	r1, #255	; 0xff
   1f198:	d07f      	beq.n	1f29a <d_maybe_print_fold_expression+0x1ea>
   1f19a:	1c4a      	adds	r2, r1, #1
   1f19c:	2329      	movs	r3, #41	; 0x29
   1f19e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1f1a2:	5463      	strb	r3, [r4, r1]
   1f1a4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1f1a8:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
   1f1ac:	2001      	movs	r0, #1
   1f1ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f1b2:	2000      	movs	r0, #0
   1f1b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f1b8:	2b72      	cmp	r3, #114	; 0x72
   1f1ba:	d1f5      	bne.n	1f1a8 <d_maybe_print_fold_expression+0xf8>
   1f1bc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1f1c0:	29ff      	cmp	r1, #255	; 0xff
   1f1c2:	d07b      	beq.n	1f2bc <d_maybe_print_fold_expression+0x20c>
   1f1c4:	1c4b      	adds	r3, r1, #1
   1f1c6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1f1ca:	2328      	movs	r3, #40	; 0x28
   1f1cc:	5463      	strb	r3, [r4, r1]
   1f1ce:	4652      	mov	r2, sl
   1f1d0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1f1d4:	2111      	movs	r1, #17
   1f1d6:	4620      	mov	r0, r4
   1f1d8:	4e48      	ldr	r6, [pc, #288]	; (1f2fc <d_maybe_print_fold_expression+0x24c>)
   1f1da:	f7ff fefb 	bl	1efd4 <d_print_subexpr>
   1f1de:	4642      	mov	r2, r8
   1f1e0:	2111      	movs	r1, #17
   1f1e2:	4620      	mov	r0, r4
   1f1e4:	f7ff fd0e 	bl	1ec04 <d_print_expr_op>
   1f1e8:	f106 0903 	add.w	r9, r6, #3
   1f1ec:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1f1f0:	252e      	movs	r5, #46	; 0x2e
   1f1f2:	f04f 0800 	mov.w	r8, #0
   1f1f6:	e00a      	b.n	1f20e <d_maybe_print_fold_expression+0x15e>
   1f1f8:	460b      	mov	r3, r1
   1f1fa:	3101      	adds	r1, #1
   1f1fc:	454e      	cmp	r6, r9
   1f1fe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f202:	54e5      	strb	r5, [r4, r3]
   1f204:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1f208:	d0ce      	beq.n	1f1a8 <d_maybe_print_fold_expression+0xf8>
   1f20a:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   1f20e:	29ff      	cmp	r1, #255	; 0xff
   1f210:	d1f2      	bne.n	1f1f8 <d_maybe_print_fold_expression+0x148>
   1f212:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1f216:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1f21a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1f21e:	4620      	mov	r0, r4
   1f220:	4798      	blx	r3
   1f222:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f226:	3301      	adds	r3, #1
   1f228:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f22c:	2101      	movs	r1, #1
   1f22e:	2300      	movs	r3, #0
   1f230:	e7e4      	b.n	1f1fc <d_maybe_print_fold_expression+0x14c>
   1f232:	4d33      	ldr	r5, [pc, #204]	; (1f300 <d_maybe_print_fold_expression+0x250>)
   1f234:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1f238:	2628      	movs	r6, #40	; 0x28
   1f23a:	f105 0b03 	add.w	fp, r5, #3
   1f23e:	f04f 0900 	mov.w	r9, #0
   1f242:	e00b      	b.n	1f25c <d_maybe_print_fold_expression+0x1ac>
   1f244:	460b      	mov	r3, r1
   1f246:	45ab      	cmp	fp, r5
   1f248:	f101 0101 	add.w	r1, r1, #1
   1f24c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f250:	54e6      	strb	r6, [r4, r3]
   1f252:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1f256:	d019      	beq.n	1f28c <d_maybe_print_fold_expression+0x1dc>
   1f258:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   1f25c:	29ff      	cmp	r1, #255	; 0xff
   1f25e:	d1f1      	bne.n	1f244 <d_maybe_print_fold_expression+0x194>
   1f260:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1f264:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1f268:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1f26c:	4620      	mov	r0, r4
   1f26e:	4798      	blx	r3
   1f270:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f274:	3301      	adds	r3, #1
   1f276:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f27a:	2300      	movs	r3, #0
   1f27c:	2101      	movs	r1, #1
   1f27e:	45ab      	cmp	fp, r5
   1f280:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f284:	54e6      	strb	r6, [r4, r3]
   1f286:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1f28a:	d1e5      	bne.n	1f258 <d_maybe_print_fold_expression+0x1a8>
   1f28c:	4642      	mov	r2, r8
   1f28e:	2111      	movs	r1, #17
   1f290:	4620      	mov	r0, r4
   1f292:	f7ff fcb7 	bl	1ec04 <d_print_expr_op>
   1f296:	4652      	mov	r2, sl
   1f298:	e777      	b.n	1f18a <d_maybe_print_fold_expression+0xda>
   1f29a:	2500      	movs	r5, #0
   1f29c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1f2a0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1f2a4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1f2a8:	4620      	mov	r0, r4
   1f2aa:	4798      	blx	r3
   1f2ac:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f2b0:	2201      	movs	r2, #1
   1f2b2:	4413      	add	r3, r2
   1f2b4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f2b8:	4629      	mov	r1, r5
   1f2ba:	e76f      	b.n	1f19c <d_maybe_print_fold_expression+0xec>
   1f2bc:	2500      	movs	r5, #0
   1f2be:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	; 0x108
   1f2c2:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   1f2c6:	4798      	blx	r3
   1f2c8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f2cc:	3301      	adds	r3, #1
   1f2ce:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f2d2:	4629      	mov	r1, r5
   1f2d4:	2301      	movs	r3, #1
   1f2d6:	e776      	b.n	1f1c6 <d_maybe_print_fold_expression+0x116>
   1f2d8:	2500      	movs	r5, #0
   1f2da:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1f2de:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1f2e2:	4620      	mov	r0, r4
   1f2e4:	4798      	blx	r3
   1f2e6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f2ea:	3301      	adds	r3, #1
   1f2ec:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f2f0:	4629      	mov	r1, r5
   1f2f2:	2301      	movs	r3, #1
   1f2f4:	e706      	b.n	1f104 <d_maybe_print_fold_expression+0x54>
   1f2f6:	bf00      	nop
   1f2f8:	00043aa4 	.word	0x00043aa4
   1f2fc:	00043ba0 	.word	0x00043ba0
   1f300:	00043b98 	.word	0x00043b98

0001f304 <__cxa_demangle>:
   1f304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f308:	461e      	mov	r6, r3
   1f30a:	b084      	sub	sp, #16
   1f30c:	2800      	cmp	r0, #0
   1f30e:	d040      	beq.n	1f392 <__cxa_demangle+0x8e>
   1f310:	460c      	mov	r4, r1
   1f312:	4615      	mov	r5, r2
   1f314:	b109      	cbz	r1, 1f31a <__cxa_demangle+0x16>
   1f316:	2a00      	cmp	r2, #0
   1f318:	d03b      	beq.n	1f392 <__cxa_demangle+0x8e>
   1f31a:	2300      	movs	r3, #0
   1f31c:	4929      	ldr	r1, [pc, #164]	; (1f3c4 <__cxa_demangle+0xc0>)
   1f31e:	466a      	mov	r2, sp
   1f320:	e9cd 3300 	strd	r3, r3, [sp]
   1f324:	e9cd 3302 	strd	r3, r3, [sp, #8]
   1f328:	f7ff fca8 	bl	1ec7c <d_demangle_callback.constprop.0>
   1f32c:	2800      	cmp	r0, #0
   1f32e:	d039      	beq.n	1f3a4 <__cxa_demangle+0xa0>
   1f330:	9b03      	ldr	r3, [sp, #12]
   1f332:	9f00      	ldr	r7, [sp, #0]
   1f334:	b9d3      	cbnz	r3, 1f36c <__cxa_demangle+0x68>
   1f336:	f8dd 8008 	ldr.w	r8, [sp, #8]
   1f33a:	2f00      	cmp	r7, #0
   1f33c:	d03c      	beq.n	1f3b8 <__cxa_demangle+0xb4>
   1f33e:	b32c      	cbz	r4, 1f38c <__cxa_demangle+0x88>
   1f340:	4638      	mov	r0, r7
   1f342:	f7f9 f9bd 	bl	186c0 <strlen>
   1f346:	682b      	ldr	r3, [r5, #0]
   1f348:	4298      	cmp	r0, r3
   1f34a:	d219      	bcs.n	1f380 <__cxa_demangle+0x7c>
   1f34c:	4639      	mov	r1, r7
   1f34e:	1c42      	adds	r2, r0, #1
   1f350:	4620      	mov	r0, r4
   1f352:	f7f8 ff55 	bl	18200 <memcpy>
   1f356:	4638      	mov	r0, r7
   1f358:	f018 ff40 	bl	381dc <free>
   1f35c:	4627      	mov	r7, r4
   1f35e:	b10e      	cbz	r6, 1f364 <__cxa_demangle+0x60>
   1f360:	2300      	movs	r3, #0
   1f362:	6033      	str	r3, [r6, #0]
   1f364:	4638      	mov	r0, r7
   1f366:	b004      	add	sp, #16
   1f368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f36c:	f04f 0801 	mov.w	r8, #1
   1f370:	2f00      	cmp	r7, #0
   1f372:	d1e4      	bne.n	1f33e <__cxa_demangle+0x3a>
   1f374:	b18e      	cbz	r6, 1f39a <__cxa_demangle+0x96>
   1f376:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f37a:	6033      	str	r3, [r6, #0]
   1f37c:	2700      	movs	r7, #0
   1f37e:	e7f1      	b.n	1f364 <__cxa_demangle+0x60>
   1f380:	4620      	mov	r0, r4
   1f382:	f018 ff2b 	bl	381dc <free>
   1f386:	f8c5 8000 	str.w	r8, [r5]
   1f38a:	e7e8      	b.n	1f35e <__cxa_demangle+0x5a>
   1f38c:	2d00      	cmp	r5, #0
   1f38e:	d1fa      	bne.n	1f386 <__cxa_demangle+0x82>
   1f390:	e7e5      	b.n	1f35e <__cxa_demangle+0x5a>
   1f392:	b116      	cbz	r6, 1f39a <__cxa_demangle+0x96>
   1f394:	f06f 0302 	mvn.w	r3, #2
   1f398:	6033      	str	r3, [r6, #0]
   1f39a:	2700      	movs	r7, #0
   1f39c:	4638      	mov	r0, r7
   1f39e:	b004      	add	sp, #16
   1f3a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f3a4:	9800      	ldr	r0, [sp, #0]
   1f3a6:	f018 ff19 	bl	381dc <free>
   1f3aa:	2e00      	cmp	r6, #0
   1f3ac:	d0f5      	beq.n	1f39a <__cxa_demangle+0x96>
   1f3ae:	f06f 0301 	mvn.w	r3, #1
   1f3b2:	6033      	str	r3, [r6, #0]
   1f3b4:	2700      	movs	r7, #0
   1f3b6:	e7d5      	b.n	1f364 <__cxa_demangle+0x60>
   1f3b8:	2e00      	cmp	r6, #0
   1f3ba:	d0ee      	beq.n	1f39a <__cxa_demangle+0x96>
   1f3bc:	f1b8 0f01 	cmp.w	r8, #1
   1f3c0:	d0d9      	beq.n	1f376 <__cxa_demangle+0x72>
   1f3c2:	e7f4      	b.n	1f3ae <__cxa_demangle+0xaa>
   1f3c4:	000197d1 	.word	0x000197d1

0001f3c8 <__gcclibcxx_demangle_callback>:
   1f3c8:	b160      	cbz	r0, 1f3e4 <__gcclibcxx_demangle_callback+0x1c>
   1f3ca:	b508      	push	{r3, lr}
   1f3cc:	b139      	cbz	r1, 1f3de <__gcclibcxx_demangle_callback+0x16>
   1f3ce:	f7ff fc55 	bl	1ec7c <d_demangle_callback.constprop.0>
   1f3d2:	2800      	cmp	r0, #0
   1f3d4:	bf14      	ite	ne
   1f3d6:	2000      	movne	r0, #0
   1f3d8:	f06f 0001 	mvneq.w	r0, #1
   1f3dc:	bd08      	pop	{r3, pc}
   1f3de:	f06f 0002 	mvn.w	r0, #2
   1f3e2:	bd08      	pop	{r3, pc}
   1f3e4:	f06f 0002 	mvn.w	r0, #2
   1f3e8:	4770      	bx	lr
   1f3ea:	bf00      	nop

0001f3ec <__aeabi_d2lz>:
   1f3ec:	b538      	push	{r3, r4, r5, lr}
   1f3ee:	2200      	movs	r2, #0
   1f3f0:	2300      	movs	r3, #0
   1f3f2:	4604      	mov	r4, r0
   1f3f4:	460d      	mov	r5, r1
   1f3f6:	f7f9 fdff 	bl	18ff8 <__aeabi_dcmplt>
   1f3fa:	b928      	cbnz	r0, 1f408 <__aeabi_d2lz+0x1c>
   1f3fc:	4620      	mov	r0, r4
   1f3fe:	4629      	mov	r1, r5
   1f400:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1f404:	f000 b80a 	b.w	1f41c <__aeabi_d2ulz>
   1f408:	4620      	mov	r0, r4
   1f40a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   1f40e:	f000 f805 	bl	1f41c <__aeabi_d2ulz>
   1f412:	4240      	negs	r0, r0
   1f414:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1f418:	bd38      	pop	{r3, r4, r5, pc}
   1f41a:	bf00      	nop

0001f41c <__aeabi_d2ulz>:
   1f41c:	b5d0      	push	{r4, r6, r7, lr}
   1f41e:	4b0c      	ldr	r3, [pc, #48]	; (1f450 <__aeabi_d2ulz+0x34>)
   1f420:	2200      	movs	r2, #0
   1f422:	4606      	mov	r6, r0
   1f424:	460f      	mov	r7, r1
   1f426:	f7f9 fb75 	bl	18b14 <__aeabi_dmul>
   1f42a:	f000 ff7f 	bl	2032c <__aeabi_d2uiz>
   1f42e:	4604      	mov	r4, r0
   1f430:	f7f9 faf6 	bl	18a20 <__aeabi_ui2d>
   1f434:	4b07      	ldr	r3, [pc, #28]	; (1f454 <__aeabi_d2ulz+0x38>)
   1f436:	2200      	movs	r2, #0
   1f438:	f7f9 fb6c 	bl	18b14 <__aeabi_dmul>
   1f43c:	4602      	mov	r2, r0
   1f43e:	460b      	mov	r3, r1
   1f440:	4630      	mov	r0, r6
   1f442:	4639      	mov	r1, r7
   1f444:	f7f9 f9ae 	bl	187a4 <__aeabi_dsub>
   1f448:	f000 ff70 	bl	2032c <__aeabi_d2uiz>
   1f44c:	4621      	mov	r1, r4
   1f44e:	bdd0      	pop	{r4, r6, r7, pc}
   1f450:	3df00000 	.word	0x3df00000
   1f454:	41f00000 	.word	0x41f00000

0001f458 <selfrel_offset31>:
   1f458:	6803      	ldr	r3, [r0, #0]
   1f45a:	005a      	lsls	r2, r3, #1
   1f45c:	bf4c      	ite	mi
   1f45e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
   1f462:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
   1f466:	4418      	add	r0, r3
   1f468:	4770      	bx	lr
   1f46a:	bf00      	nop

0001f46c <search_EIT_table>:
   1f46c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f470:	b329      	cbz	r1, 1f4be <search_EIT_table+0x52>
   1f472:	1e4f      	subs	r7, r1, #1
   1f474:	4604      	mov	r4, r0
   1f476:	4615      	mov	r5, r2
   1f478:	463e      	mov	r6, r7
   1f47a:	f04f 0800 	mov.w	r8, #0
   1f47e:	eb08 0106 	add.w	r1, r8, r6
   1f482:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   1f486:	1049      	asrs	r1, r1, #1
   1f488:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
   1f48c:	4648      	mov	r0, r9
   1f48e:	f7ff ffe3 	bl	1f458 <selfrel_offset31>
   1f492:	4603      	mov	r3, r0
   1f494:	00c8      	lsls	r0, r1, #3
   1f496:	3008      	adds	r0, #8
   1f498:	428f      	cmp	r7, r1
   1f49a:	4420      	add	r0, r4
   1f49c:	d009      	beq.n	1f4b2 <search_EIT_table+0x46>
   1f49e:	42ab      	cmp	r3, r5
   1f4a0:	d809      	bhi.n	1f4b6 <search_EIT_table+0x4a>
   1f4a2:	f7ff ffd9 	bl	1f458 <selfrel_offset31>
   1f4a6:	3801      	subs	r0, #1
   1f4a8:	42a8      	cmp	r0, r5
   1f4aa:	d20a      	bcs.n	1f4c2 <search_EIT_table+0x56>
   1f4ac:	f101 0801 	add.w	r8, r1, #1
   1f4b0:	e7e5      	b.n	1f47e <search_EIT_table+0x12>
   1f4b2:	42ab      	cmp	r3, r5
   1f4b4:	d905      	bls.n	1f4c2 <search_EIT_table+0x56>
   1f4b6:	4588      	cmp	r8, r1
   1f4b8:	d001      	beq.n	1f4be <search_EIT_table+0x52>
   1f4ba:	1e4e      	subs	r6, r1, #1
   1f4bc:	e7df      	b.n	1f47e <search_EIT_table+0x12>
   1f4be:	f04f 0900 	mov.w	r9, #0
   1f4c2:	4648      	mov	r0, r9
   1f4c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001f4c8 <__gnu_unwind_get_pr_addr>:
   1f4c8:	2801      	cmp	r0, #1
   1f4ca:	d007      	beq.n	1f4dc <__gnu_unwind_get_pr_addr+0x14>
   1f4cc:	2802      	cmp	r0, #2
   1f4ce:	d007      	beq.n	1f4e0 <__gnu_unwind_get_pr_addr+0x18>
   1f4d0:	4b04      	ldr	r3, [pc, #16]	; (1f4e4 <__gnu_unwind_get_pr_addr+0x1c>)
   1f4d2:	2800      	cmp	r0, #0
   1f4d4:	bf0c      	ite	eq
   1f4d6:	4618      	moveq	r0, r3
   1f4d8:	2000      	movne	r0, #0
   1f4da:	4770      	bx	lr
   1f4dc:	4802      	ldr	r0, [pc, #8]	; (1f4e8 <__gnu_unwind_get_pr_addr+0x20>)
   1f4de:	4770      	bx	lr
   1f4e0:	4802      	ldr	r0, [pc, #8]	; (1f4ec <__gnu_unwind_get_pr_addr+0x24>)
   1f4e2:	4770      	bx	lr
   1f4e4:	0001fba1 	.word	0x0001fba1
   1f4e8:	0001fba5 	.word	0x0001fba5
   1f4ec:	0001fba9 	.word	0x0001fba9

0001f4f0 <get_eit_entry>:
   1f4f0:	b530      	push	{r4, r5, lr}
   1f4f2:	4b23      	ldr	r3, [pc, #140]	; (1f580 <get_eit_entry+0x90>)
   1f4f4:	b083      	sub	sp, #12
   1f4f6:	4604      	mov	r4, r0
   1f4f8:	1e8d      	subs	r5, r1, #2
   1f4fa:	b33b      	cbz	r3, 1f54c <get_eit_entry+0x5c>
   1f4fc:	a901      	add	r1, sp, #4
   1f4fe:	4628      	mov	r0, r5
   1f500:	f3af 8000 	nop.w
   1f504:	b1e8      	cbz	r0, 1f542 <get_eit_entry+0x52>
   1f506:	9901      	ldr	r1, [sp, #4]
   1f508:	462a      	mov	r2, r5
   1f50a:	f7ff ffaf 	bl	1f46c <search_EIT_table>
   1f50e:	4601      	mov	r1, r0
   1f510:	b1b8      	cbz	r0, 1f542 <get_eit_entry+0x52>
   1f512:	f7ff ffa1 	bl	1f458 <selfrel_offset31>
   1f516:	684b      	ldr	r3, [r1, #4]
   1f518:	64a0      	str	r0, [r4, #72]	; 0x48
   1f51a:	2b01      	cmp	r3, #1
   1f51c:	d02c      	beq.n	1f578 <get_eit_entry+0x88>
   1f51e:	2b00      	cmp	r3, #0
   1f520:	f101 0004 	add.w	r0, r1, #4
   1f524:	db24      	blt.n	1f570 <get_eit_entry+0x80>
   1f526:	f7ff ff97 	bl	1f458 <selfrel_offset31>
   1f52a:	2300      	movs	r3, #0
   1f52c:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
   1f530:	6803      	ldr	r3, [r0, #0]
   1f532:	2b00      	cmp	r3, #0
   1f534:	db11      	blt.n	1f55a <get_eit_entry+0x6a>
   1f536:	f7ff ff8f 	bl	1f458 <selfrel_offset31>
   1f53a:	6120      	str	r0, [r4, #16]
   1f53c:	2000      	movs	r0, #0
   1f53e:	b003      	add	sp, #12
   1f540:	bd30      	pop	{r4, r5, pc}
   1f542:	2300      	movs	r3, #0
   1f544:	2009      	movs	r0, #9
   1f546:	6123      	str	r3, [r4, #16]
   1f548:	b003      	add	sp, #12
   1f54a:	bd30      	pop	{r4, r5, pc}
   1f54c:	4b0d      	ldr	r3, [pc, #52]	; (1f584 <get_eit_entry+0x94>)
   1f54e:	490e      	ldr	r1, [pc, #56]	; (1f588 <get_eit_entry+0x98>)
   1f550:	1ac9      	subs	r1, r1, r3
   1f552:	10c9      	asrs	r1, r1, #3
   1f554:	4618      	mov	r0, r3
   1f556:	9101      	str	r1, [sp, #4]
   1f558:	e7d6      	b.n	1f508 <get_eit_entry+0x18>
   1f55a:	f3c3 6003 	ubfx	r0, r3, #24, #4
   1f55e:	f7ff ffb3 	bl	1f4c8 <__gnu_unwind_get_pr_addr>
   1f562:	2800      	cmp	r0, #0
   1f564:	6120      	str	r0, [r4, #16]
   1f566:	bf14      	ite	ne
   1f568:	2000      	movne	r0, #0
   1f56a:	2009      	moveq	r0, #9
   1f56c:	b003      	add	sp, #12
   1f56e:	bd30      	pop	{r4, r5, pc}
   1f570:	2301      	movs	r3, #1
   1f572:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
   1f576:	e7db      	b.n	1f530 <get_eit_entry+0x40>
   1f578:	2300      	movs	r3, #0
   1f57a:	6123      	str	r3, [r4, #16]
   1f57c:	2005      	movs	r0, #5
   1f57e:	e7de      	b.n	1f53e <get_eit_entry+0x4e>
   1f580:	00000000 	.word	0x00000000
   1f584:	00044444 	.word	0x00044444
   1f588:	00044654 	.word	0x00044654

0001f58c <restore_non_core_regs>:
   1f58c:	6803      	ldr	r3, [r0, #0]
   1f58e:	07da      	lsls	r2, r3, #31
   1f590:	b510      	push	{r4, lr}
   1f592:	4604      	mov	r4, r0
   1f594:	d406      	bmi.n	1f5a4 <restore_non_core_regs+0x18>
   1f596:	079b      	lsls	r3, r3, #30
   1f598:	f100 0048 	add.w	r0, r0, #72	; 0x48
   1f59c:	d509      	bpl.n	1f5b2 <restore_non_core_regs+0x26>
   1f59e:	f000 fc5b 	bl	1fe58 <__gnu_Unwind_Restore_VFP_D>
   1f5a2:	6823      	ldr	r3, [r4, #0]
   1f5a4:	0759      	lsls	r1, r3, #29
   1f5a6:	d509      	bpl.n	1f5bc <restore_non_core_regs+0x30>
   1f5a8:	071a      	lsls	r2, r3, #28
   1f5aa:	d50e      	bpl.n	1f5ca <restore_non_core_regs+0x3e>
   1f5ac:	06db      	lsls	r3, r3, #27
   1f5ae:	d513      	bpl.n	1f5d8 <restore_non_core_regs+0x4c>
   1f5b0:	bd10      	pop	{r4, pc}
   1f5b2:	f000 fc49 	bl	1fe48 <__gnu_Unwind_Restore_VFP>
   1f5b6:	6823      	ldr	r3, [r4, #0]
   1f5b8:	0759      	lsls	r1, r3, #29
   1f5ba:	d4f5      	bmi.n	1f5a8 <restore_non_core_regs+0x1c>
   1f5bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   1f5c0:	f000 fc52 	bl	1fe68 <__gnu_Unwind_Restore_VFP_D_16_to_31>
   1f5c4:	6823      	ldr	r3, [r4, #0]
   1f5c6:	071a      	lsls	r2, r3, #28
   1f5c8:	d4f0      	bmi.n	1f5ac <restore_non_core_regs+0x20>
   1f5ca:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   1f5ce:	f000 fc53 	bl	1fe78 <__gnu_Unwind_Restore_WMMXD>
   1f5d2:	6823      	ldr	r3, [r4, #0]
   1f5d4:	06db      	lsls	r3, r3, #27
   1f5d6:	d4eb      	bmi.n	1f5b0 <restore_non_core_regs+0x24>
   1f5d8:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
   1f5dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f5e0:	f000 bc8e 	b.w	1ff00 <__gnu_Unwind_Restore_WMMXC>

0001f5e4 <__gnu_unwind_24bit.constprop.0>:
   1f5e4:	2009      	movs	r0, #9
   1f5e6:	4770      	bx	lr

0001f5e8 <_Unwind_decode_typeinfo_ptr.constprop.0>:
   1f5e8:	4603      	mov	r3, r0
   1f5ea:	6800      	ldr	r0, [r0, #0]
   1f5ec:	b100      	cbz	r0, 1f5f0 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
   1f5ee:	4418      	add	r0, r3
   1f5f0:	4770      	bx	lr
   1f5f2:	bf00      	nop

0001f5f4 <_Unwind_DebugHook>:
   1f5f4:	4770      	bx	lr
   1f5f6:	bf00      	nop

0001f5f8 <unwind_phase2>:
   1f5f8:	b570      	push	{r4, r5, r6, lr}
   1f5fa:	4604      	mov	r4, r0
   1f5fc:	460e      	mov	r6, r1
   1f5fe:	6c31      	ldr	r1, [r6, #64]	; 0x40
   1f600:	4620      	mov	r0, r4
   1f602:	f7ff ff75 	bl	1f4f0 <get_eit_entry>
   1f606:	4605      	mov	r5, r0
   1f608:	b988      	cbnz	r0, 1f62e <unwind_phase2+0x36>
   1f60a:	6c32      	ldr	r2, [r6, #64]	; 0x40
   1f60c:	6162      	str	r2, [r4, #20]
   1f60e:	6923      	ldr	r3, [r4, #16]
   1f610:	4632      	mov	r2, r6
   1f612:	4621      	mov	r1, r4
   1f614:	2001      	movs	r0, #1
   1f616:	4798      	blx	r3
   1f618:	2808      	cmp	r0, #8
   1f61a:	d0f0      	beq.n	1f5fe <unwind_phase2+0x6>
   1f61c:	2807      	cmp	r0, #7
   1f61e:	d106      	bne.n	1f62e <unwind_phase2+0x36>
   1f620:	4628      	mov	r0, r5
   1f622:	6c31      	ldr	r1, [r6, #64]	; 0x40
   1f624:	f7ff ffe6 	bl	1f5f4 <_Unwind_DebugHook>
   1f628:	1d30      	adds	r0, r6, #4
   1f62a:	f000 fc01 	bl	1fe30 <__restore_core_regs>
   1f62e:	f00c fcb5 	bl	2bf9c <abort>
   1f632:	bf00      	nop

0001f634 <unwind_phase2_forced>:
   1f634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f638:	1d0d      	adds	r5, r1, #4
   1f63a:	f8d0 800c 	ldr.w	r8, [r0, #12]
   1f63e:	f8d0 9018 	ldr.w	r9, [r0, #24]
   1f642:	4607      	mov	r7, r0
   1f644:	4614      	mov	r4, r2
   1f646:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f648:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
   1f64c:	f10d 0c0c 	add.w	ip, sp, #12
   1f650:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1f654:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f656:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1f65a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f65c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1f660:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1f664:	ae02      	add	r6, sp, #8
   1f666:	f04f 0e00 	mov.w	lr, #0
   1f66a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
   1f66e:	f8c6 e000 	str.w	lr, [r6]
   1f672:	e020      	b.n	1f6b6 <unwind_phase2_forced+0x82>
   1f674:	6c33      	ldr	r3, [r6, #64]	; 0x40
   1f676:	617b      	str	r3, [r7, #20]
   1f678:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   1f67c:	4631      	mov	r1, r6
   1f67e:	a87a      	add	r0, sp, #488	; 0x1e8
   1f680:	f7f8 fdbe 	bl	18200 <memcpy>
   1f684:	693b      	ldr	r3, [r7, #16]
   1f686:	aa7a      	add	r2, sp, #488	; 0x1e8
   1f688:	4639      	mov	r1, r7
   1f68a:	4650      	mov	r0, sl
   1f68c:	4798      	blx	r3
   1f68e:	9b88      	ldr	r3, [sp, #544]	; 0x220
   1f690:	6473      	str	r3, [r6, #68]	; 0x44
   1f692:	4621      	mov	r1, r4
   1f694:	e9cd 6900 	strd	r6, r9, [sp]
   1f698:	4605      	mov	r5, r0
   1f69a:	463b      	mov	r3, r7
   1f69c:	463a      	mov	r2, r7
   1f69e:	2001      	movs	r0, #1
   1f6a0:	47c0      	blx	r8
   1f6a2:	4604      	mov	r4, r0
   1f6a4:	b9e0      	cbnz	r0, 1f6e0 <unwind_phase2_forced+0xac>
   1f6a6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   1f6aa:	a97a      	add	r1, sp, #488	; 0x1e8
   1f6ac:	4630      	mov	r0, r6
   1f6ae:	f7f8 fda7 	bl	18200 <memcpy>
   1f6b2:	2d08      	cmp	r5, #8
   1f6b4:	d11a      	bne.n	1f6ec <unwind_phase2_forced+0xb8>
   1f6b6:	6c31      	ldr	r1, [r6, #64]	; 0x40
   1f6b8:	4638      	mov	r0, r7
   1f6ba:	f7ff ff19 	bl	1f4f0 <get_eit_entry>
   1f6be:	3409      	adds	r4, #9
   1f6c0:	fa5f fa84 	uxtb.w	sl, r4
   1f6c4:	4605      	mov	r5, r0
   1f6c6:	2800      	cmp	r0, #0
   1f6c8:	d0d4      	beq.n	1f674 <unwind_phase2_forced+0x40>
   1f6ca:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   1f6cc:	6473      	str	r3, [r6, #68]	; 0x44
   1f6ce:	463a      	mov	r2, r7
   1f6d0:	e9cd 6900 	strd	r6, r9, [sp]
   1f6d4:	463b      	mov	r3, r7
   1f6d6:	f04a 0110 	orr.w	r1, sl, #16
   1f6da:	2001      	movs	r0, #1
   1f6dc:	47c0      	blx	r8
   1f6de:	b100      	cbz	r0, 1f6e2 <unwind_phase2_forced+0xae>
   1f6e0:	2509      	movs	r5, #9
   1f6e2:	4628      	mov	r0, r5
   1f6e4:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
   1f6e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1f6ec:	2d07      	cmp	r5, #7
   1f6ee:	d1f7      	bne.n	1f6e0 <unwind_phase2_forced+0xac>
   1f6f0:	4620      	mov	r0, r4
   1f6f2:	6c31      	ldr	r1, [r6, #64]	; 0x40
   1f6f4:	f7ff ff7e 	bl	1f5f4 <_Unwind_DebugHook>
   1f6f8:	a803      	add	r0, sp, #12
   1f6fa:	f000 fb99 	bl	1fe30 <__restore_core_regs>
   1f6fe:	bf00      	nop

0001f700 <_Unwind_GetCFA>:
   1f700:	6c40      	ldr	r0, [r0, #68]	; 0x44
   1f702:	4770      	bx	lr

0001f704 <__gnu_Unwind_RaiseException>:
   1f704:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f706:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   1f708:	640b      	str	r3, [r1, #64]	; 0x40
   1f70a:	f101 0c04 	add.w	ip, r1, #4
   1f70e:	460e      	mov	r6, r1
   1f710:	4605      	mov	r5, r0
   1f712:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1f716:	b0f9      	sub	sp, #484	; 0x1e4
   1f718:	ac01      	add	r4, sp, #4
   1f71a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1f71c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1f720:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1f722:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1f726:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1f728:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   1f72c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1f730:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1f734:	9700      	str	r7, [sp, #0]
   1f736:	e006      	b.n	1f746 <__gnu_Unwind_RaiseException+0x42>
   1f738:	692b      	ldr	r3, [r5, #16]
   1f73a:	466a      	mov	r2, sp
   1f73c:	4629      	mov	r1, r5
   1f73e:	4798      	blx	r3
   1f740:	2808      	cmp	r0, #8
   1f742:	4604      	mov	r4, r0
   1f744:	d108      	bne.n	1f758 <__gnu_Unwind_RaiseException+0x54>
   1f746:	9910      	ldr	r1, [sp, #64]	; 0x40
   1f748:	4628      	mov	r0, r5
   1f74a:	f7ff fed1 	bl	1f4f0 <get_eit_entry>
   1f74e:	2800      	cmp	r0, #0
   1f750:	d0f2      	beq.n	1f738 <__gnu_Unwind_RaiseException+0x34>
   1f752:	2009      	movs	r0, #9
   1f754:	b079      	add	sp, #484	; 0x1e4
   1f756:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f758:	4668      	mov	r0, sp
   1f75a:	f7ff ff17 	bl	1f58c <restore_non_core_regs>
   1f75e:	2c06      	cmp	r4, #6
   1f760:	d1f7      	bne.n	1f752 <__gnu_Unwind_RaiseException+0x4e>
   1f762:	4631      	mov	r1, r6
   1f764:	4628      	mov	r0, r5
   1f766:	f7ff ff47 	bl	1f5f8 <unwind_phase2>
   1f76a:	bf00      	nop

0001f76c <__gnu_Unwind_ForcedUnwind>:
   1f76c:	60c1      	str	r1, [r0, #12]
   1f76e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   1f770:	6182      	str	r2, [r0, #24]
   1f772:	6419      	str	r1, [r3, #64]	; 0x40
   1f774:	2200      	movs	r2, #0
   1f776:	4619      	mov	r1, r3
   1f778:	e75c      	b.n	1f634 <unwind_phase2_forced>
   1f77a:	bf00      	nop

0001f77c <__gnu_Unwind_Resume>:
   1f77c:	b570      	push	{r4, r5, r6, lr}
   1f77e:	68c6      	ldr	r6, [r0, #12]
   1f780:	6943      	ldr	r3, [r0, #20]
   1f782:	640b      	str	r3, [r1, #64]	; 0x40
   1f784:	b9ae      	cbnz	r6, 1f7b2 <__gnu_Unwind_Resume+0x36>
   1f786:	6903      	ldr	r3, [r0, #16]
   1f788:	460a      	mov	r2, r1
   1f78a:	4604      	mov	r4, r0
   1f78c:	460d      	mov	r5, r1
   1f78e:	4601      	mov	r1, r0
   1f790:	2002      	movs	r0, #2
   1f792:	4798      	blx	r3
   1f794:	2807      	cmp	r0, #7
   1f796:	d005      	beq.n	1f7a4 <__gnu_Unwind_Resume+0x28>
   1f798:	2808      	cmp	r0, #8
   1f79a:	d10f      	bne.n	1f7bc <__gnu_Unwind_Resume+0x40>
   1f79c:	4629      	mov	r1, r5
   1f79e:	4620      	mov	r0, r4
   1f7a0:	f7ff ff2a 	bl	1f5f8 <unwind_phase2>
   1f7a4:	4630      	mov	r0, r6
   1f7a6:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1f7a8:	f7ff ff24 	bl	1f5f4 <_Unwind_DebugHook>
   1f7ac:	1d28      	adds	r0, r5, #4
   1f7ae:	f000 fb3f 	bl	1fe30 <__restore_core_regs>
   1f7b2:	2201      	movs	r2, #1
   1f7b4:	f7ff ff3e 	bl	1f634 <unwind_phase2_forced>
   1f7b8:	f00c fbf0 	bl	2bf9c <abort>
   1f7bc:	f00c fbee 	bl	2bf9c <abort>

0001f7c0 <__gnu_Unwind_Resume_or_Rethrow>:
   1f7c0:	68c2      	ldr	r2, [r0, #12]
   1f7c2:	b11a      	cbz	r2, 1f7cc <__gnu_Unwind_Resume_or_Rethrow+0xc>
   1f7c4:	6bca      	ldr	r2, [r1, #60]	; 0x3c
   1f7c6:	640a      	str	r2, [r1, #64]	; 0x40
   1f7c8:	2200      	movs	r2, #0
   1f7ca:	e733      	b.n	1f634 <unwind_phase2_forced>
   1f7cc:	e79a      	b.n	1f704 <__gnu_Unwind_RaiseException>
   1f7ce:	bf00      	nop

0001f7d0 <_Unwind_Complete>:
   1f7d0:	4770      	bx	lr
   1f7d2:	bf00      	nop

0001f7d4 <_Unwind_DeleteException>:
   1f7d4:	6883      	ldr	r3, [r0, #8]
   1f7d6:	4601      	mov	r1, r0
   1f7d8:	b10b      	cbz	r3, 1f7de <_Unwind_DeleteException+0xa>
   1f7da:	2001      	movs	r0, #1
   1f7dc:	4718      	bx	r3
   1f7de:	4770      	bx	lr

0001f7e0 <_Unwind_VRS_Get>:
   1f7e0:	2901      	cmp	r1, #1
   1f7e2:	d012      	beq.n	1f80a <_Unwind_VRS_Get+0x2a>
   1f7e4:	d809      	bhi.n	1f7fa <_Unwind_VRS_Get+0x1a>
   1f7e6:	b973      	cbnz	r3, 1f806 <_Unwind_VRS_Get+0x26>
   1f7e8:	2a0f      	cmp	r2, #15
   1f7ea:	d80c      	bhi.n	1f806 <_Unwind_VRS_Get+0x26>
   1f7ec:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   1f7f0:	4618      	mov	r0, r3
   1f7f2:	6853      	ldr	r3, [r2, #4]
   1f7f4:	9a00      	ldr	r2, [sp, #0]
   1f7f6:	6013      	str	r3, [r2, #0]
   1f7f8:	4770      	bx	lr
   1f7fa:	3903      	subs	r1, #3
   1f7fc:	2901      	cmp	r1, #1
   1f7fe:	bf94      	ite	ls
   1f800:	2001      	movls	r0, #1
   1f802:	2002      	movhi	r0, #2
   1f804:	4770      	bx	lr
   1f806:	2002      	movs	r0, #2
   1f808:	4770      	bx	lr
   1f80a:	4608      	mov	r0, r1
   1f80c:	4770      	bx	lr
   1f80e:	bf00      	nop

0001f810 <_Unwind_GetGR>:
   1f810:	b500      	push	{lr}
   1f812:	b085      	sub	sp, #20
   1f814:	460a      	mov	r2, r1
   1f816:	2300      	movs	r3, #0
   1f818:	a903      	add	r1, sp, #12
   1f81a:	9100      	str	r1, [sp, #0]
   1f81c:	4619      	mov	r1, r3
   1f81e:	f7ff ffdf 	bl	1f7e0 <_Unwind_VRS_Get>
   1f822:	9803      	ldr	r0, [sp, #12]
   1f824:	b005      	add	sp, #20
   1f826:	f85d fb04 	ldr.w	pc, [sp], #4
   1f82a:	bf00      	nop

0001f82c <_Unwind_VRS_Set>:
   1f82c:	2901      	cmp	r1, #1
   1f82e:	d012      	beq.n	1f856 <_Unwind_VRS_Set+0x2a>
   1f830:	d809      	bhi.n	1f846 <_Unwind_VRS_Set+0x1a>
   1f832:	b973      	cbnz	r3, 1f852 <_Unwind_VRS_Set+0x26>
   1f834:	2a0f      	cmp	r2, #15
   1f836:	d80c      	bhi.n	1f852 <_Unwind_VRS_Set+0x26>
   1f838:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   1f83c:	9a00      	ldr	r2, [sp, #0]
   1f83e:	6812      	ldr	r2, [r2, #0]
   1f840:	6042      	str	r2, [r0, #4]
   1f842:	4618      	mov	r0, r3
   1f844:	4770      	bx	lr
   1f846:	3903      	subs	r1, #3
   1f848:	2901      	cmp	r1, #1
   1f84a:	bf94      	ite	ls
   1f84c:	2001      	movls	r0, #1
   1f84e:	2002      	movhi	r0, #2
   1f850:	4770      	bx	lr
   1f852:	2002      	movs	r0, #2
   1f854:	4770      	bx	lr
   1f856:	4608      	mov	r0, r1
   1f858:	4770      	bx	lr
   1f85a:	bf00      	nop

0001f85c <_Unwind_SetGR>:
   1f85c:	b510      	push	{r4, lr}
   1f85e:	b084      	sub	sp, #16
   1f860:	2300      	movs	r3, #0
   1f862:	ac03      	add	r4, sp, #12
   1f864:	9203      	str	r2, [sp, #12]
   1f866:	9400      	str	r4, [sp, #0]
   1f868:	460a      	mov	r2, r1
   1f86a:	4619      	mov	r1, r3
   1f86c:	f7ff ffde 	bl	1f82c <_Unwind_VRS_Set>
   1f870:	b004      	add	sp, #16
   1f872:	bd10      	pop	{r4, pc}

0001f874 <__gnu_Unwind_Backtrace>:
   1f874:	b570      	push	{r4, r5, r6, lr}
   1f876:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1f878:	6413      	str	r3, [r2, #64]	; 0x40
   1f87a:	f102 0c04 	add.w	ip, r2, #4
   1f87e:	4605      	mov	r5, r0
   1f880:	460c      	mov	r4, r1
   1f882:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1f886:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
   1f88a:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
   1f88e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1f892:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1f896:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1f89a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1f89e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1f8a2:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   1f8a6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1f8aa:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
   1f8ae:	9616      	str	r6, [sp, #88]	; 0x58
   1f8b0:	e010      	b.n	1f8d4 <__gnu_Unwind_Backtrace+0x60>
   1f8b2:	f7ff ffd3 	bl	1f85c <_Unwind_SetGR>
   1f8b6:	4621      	mov	r1, r4
   1f8b8:	a816      	add	r0, sp, #88	; 0x58
   1f8ba:	47a8      	blx	r5
   1f8bc:	4603      	mov	r3, r0
   1f8be:	aa16      	add	r2, sp, #88	; 0x58
   1f8c0:	4669      	mov	r1, sp
   1f8c2:	2008      	movs	r0, #8
   1f8c4:	b983      	cbnz	r3, 1f8e8 <__gnu_Unwind_Backtrace+0x74>
   1f8c6:	9b04      	ldr	r3, [sp, #16]
   1f8c8:	4798      	blx	r3
   1f8ca:	2805      	cmp	r0, #5
   1f8cc:	4606      	mov	r6, r0
   1f8ce:	d00c      	beq.n	1f8ea <__gnu_Unwind_Backtrace+0x76>
   1f8d0:	2809      	cmp	r0, #9
   1f8d2:	d009      	beq.n	1f8e8 <__gnu_Unwind_Backtrace+0x74>
   1f8d4:	9926      	ldr	r1, [sp, #152]	; 0x98
   1f8d6:	4668      	mov	r0, sp
   1f8d8:	f7ff fe0a 	bl	1f4f0 <get_eit_entry>
   1f8dc:	4603      	mov	r3, r0
   1f8de:	466a      	mov	r2, sp
   1f8e0:	210c      	movs	r1, #12
   1f8e2:	a816      	add	r0, sp, #88	; 0x58
   1f8e4:	2b00      	cmp	r3, #0
   1f8e6:	d0e4      	beq.n	1f8b2 <__gnu_Unwind_Backtrace+0x3e>
   1f8e8:	2609      	movs	r6, #9
   1f8ea:	a816      	add	r0, sp, #88	; 0x58
   1f8ec:	f7ff fe4e 	bl	1f58c <restore_non_core_regs>
   1f8f0:	4630      	mov	r0, r6
   1f8f2:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
   1f8f6:	bd70      	pop	{r4, r5, r6, pc}

0001f8f8 <__gnu_unwind_pr_common>:
   1f8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f8fc:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
   1f8fe:	b089      	sub	sp, #36	; 0x24
   1f900:	461e      	mov	r6, r3
   1f902:	f854 3b04 	ldr.w	r3, [r4], #4
   1f906:	9406      	str	r4, [sp, #24]
   1f908:	460d      	mov	r5, r1
   1f90a:	4617      	mov	r7, r2
   1f90c:	f000 0803 	and.w	r8, r0, #3
   1f910:	2e00      	cmp	r6, #0
   1f912:	d079      	beq.n	1fa08 <__gnu_unwind_pr_common+0x110>
   1f914:	0c1a      	lsrs	r2, r3, #16
   1f916:	041b      	lsls	r3, r3, #16
   1f918:	9305      	str	r3, [sp, #20]
   1f91a:	f88d 201d 	strb.w	r2, [sp, #29]
   1f91e:	2302      	movs	r3, #2
   1f920:	b2d2      	uxtb	r2, r2
   1f922:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   1f926:	f88d 301c 	strb.w	r3, [sp, #28]
   1f92a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   1f92c:	f1b8 0f02 	cmp.w	r8, #2
   1f930:	bf08      	it	eq
   1f932:	6bac      	ldreq	r4, [r5, #56]	; 0x38
   1f934:	f013 0301 	ands.w	r3, r3, #1
   1f938:	d00c      	beq.n	1f954 <__gnu_unwind_pr_common+0x5c>
   1f93a:	a905      	add	r1, sp, #20
   1f93c:	4638      	mov	r0, r7
   1f93e:	f000 fb79 	bl	20034 <__gnu_unwind_execute>
   1f942:	b918      	cbnz	r0, 1f94c <__gnu_unwind_pr_common+0x54>
   1f944:	2008      	movs	r0, #8
   1f946:	b009      	add	sp, #36	; 0x24
   1f948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f94c:	2009      	movs	r0, #9
   1f94e:	b009      	add	sp, #36	; 0x24
   1f950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f954:	f8d4 a000 	ldr.w	sl, [r4]
   1f958:	f1ba 0f00 	cmp.w	sl, #0
   1f95c:	d0ed      	beq.n	1f93a <__gnu_unwind_pr_common+0x42>
   1f95e:	9301      	str	r3, [sp, #4]
   1f960:	f000 0308 	and.w	r3, r0, #8
   1f964:	9302      	str	r3, [sp, #8]
   1f966:	2e02      	cmp	r6, #2
   1f968:	d04a      	beq.n	1fa00 <__gnu_unwind_pr_common+0x108>
   1f96a:	f8b4 a000 	ldrh.w	sl, [r4]
   1f96e:	f8b4 9002 	ldrh.w	r9, [r4, #2]
   1f972:	3404      	adds	r4, #4
   1f974:	6cab      	ldr	r3, [r5, #72]	; 0x48
   1f976:	f029 0b01 	bic.w	fp, r9, #1
   1f97a:	210f      	movs	r1, #15
   1f97c:	4638      	mov	r0, r7
   1f97e:	449b      	add	fp, r3
   1f980:	f7ff ff46 	bl	1f810 <_Unwind_GetGR>
   1f984:	4583      	cmp	fp, r0
   1f986:	d839      	bhi.n	1f9fc <__gnu_unwind_pr_common+0x104>
   1f988:	f02a 0301 	bic.w	r3, sl, #1
   1f98c:	449b      	add	fp, r3
   1f98e:	4583      	cmp	fp, r0
   1f990:	bf94      	ite	ls
   1f992:	2000      	movls	r0, #0
   1f994:	2001      	movhi	r0, #1
   1f996:	ea4f 0349 	mov.w	r3, r9, lsl #1
   1f99a:	f003 0302 	and.w	r3, r3, #2
   1f99e:	f00a 0a01 	and.w	sl, sl, #1
   1f9a2:	ea43 030a 	orr.w	r3, r3, sl
   1f9a6:	2b01      	cmp	r3, #1
   1f9a8:	d049      	beq.n	1fa3e <__gnu_unwind_pr_common+0x146>
   1f9aa:	2b02      	cmp	r3, #2
   1f9ac:	d032      	beq.n	1fa14 <__gnu_unwind_pr_common+0x11c>
   1f9ae:	2b00      	cmp	r3, #0
   1f9b0:	d1cc      	bne.n	1f94c <__gnu_unwind_pr_common+0x54>
   1f9b2:	f1b8 0f00 	cmp.w	r8, #0
   1f9b6:	d002      	beq.n	1f9be <__gnu_unwind_pr_common+0xc6>
   1f9b8:	2800      	cmp	r0, #0
   1f9ba:	f040 80cd 	bne.w	1fb58 <__gnu_unwind_pr_common+0x260>
   1f9be:	3404      	adds	r4, #4
   1f9c0:	f8d4 a000 	ldr.w	sl, [r4]
   1f9c4:	f1ba 0f00 	cmp.w	sl, #0
   1f9c8:	d1cd      	bne.n	1f966 <__gnu_unwind_pr_common+0x6e>
   1f9ca:	a905      	add	r1, sp, #20
   1f9cc:	4638      	mov	r0, r7
   1f9ce:	f000 fb31 	bl	20034 <__gnu_unwind_execute>
   1f9d2:	2800      	cmp	r0, #0
   1f9d4:	d1ba      	bne.n	1f94c <__gnu_unwind_pr_common+0x54>
   1f9d6:	9b01      	ldr	r3, [sp, #4]
   1f9d8:	2b00      	cmp	r3, #0
   1f9da:	d0b3      	beq.n	1f944 <__gnu_unwind_pr_common+0x4c>
   1f9dc:	210f      	movs	r1, #15
   1f9de:	4638      	mov	r0, r7
   1f9e0:	f7ff ff16 	bl	1f810 <_Unwind_GetGR>
   1f9e4:	210e      	movs	r1, #14
   1f9e6:	4602      	mov	r2, r0
   1f9e8:	4638      	mov	r0, r7
   1f9ea:	f7ff ff37 	bl	1f85c <_Unwind_SetGR>
   1f9ee:	4638      	mov	r0, r7
   1f9f0:	4a6a      	ldr	r2, [pc, #424]	; (1fb9c <__gnu_unwind_pr_common+0x2a4>)
   1f9f2:	210f      	movs	r1, #15
   1f9f4:	f7ff ff32 	bl	1f85c <_Unwind_SetGR>
   1f9f8:	2007      	movs	r0, #7
   1f9fa:	e7a8      	b.n	1f94e <__gnu_unwind_pr_common+0x56>
   1f9fc:	2000      	movs	r0, #0
   1f9fe:	e7ca      	b.n	1f996 <__gnu_unwind_pr_common+0x9e>
   1fa00:	f8d4 9004 	ldr.w	r9, [r4, #4]
   1fa04:	3408      	adds	r4, #8
   1fa06:	e7b5      	b.n	1f974 <__gnu_unwind_pr_common+0x7c>
   1fa08:	021b      	lsls	r3, r3, #8
   1fa0a:	9305      	str	r3, [sp, #20]
   1fa0c:	2303      	movs	r3, #3
   1fa0e:	f8ad 301c 	strh.w	r3, [sp, #28]
   1fa12:	e78a      	b.n	1f92a <__gnu_unwind_pr_common+0x32>
   1fa14:	6823      	ldr	r3, [r4, #0]
   1fa16:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
   1fa1a:	f1b8 0f00 	cmp.w	r8, #0
   1fa1e:	d145      	bne.n	1faac <__gnu_unwind_pr_common+0x1b4>
   1fa20:	b128      	cbz	r0, 1fa2e <__gnu_unwind_pr_common+0x136>
   1fa22:	9a02      	ldr	r2, [sp, #8]
   1fa24:	2a00      	cmp	r2, #0
   1fa26:	d05c      	beq.n	1fae2 <__gnu_unwind_pr_common+0x1ea>
   1fa28:	f1bb 0f00 	cmp.w	fp, #0
   1fa2c:	d074      	beq.n	1fb18 <__gnu_unwind_pr_common+0x220>
   1fa2e:	2b00      	cmp	r3, #0
   1fa30:	da00      	bge.n	1fa34 <__gnu_unwind_pr_common+0x13c>
   1fa32:	3404      	adds	r4, #4
   1fa34:	f10b 0b01 	add.w	fp, fp, #1
   1fa38:	eb04 048b 	add.w	r4, r4, fp, lsl #2
   1fa3c:	e7c0      	b.n	1f9c0 <__gnu_unwind_pr_common+0xc8>
   1fa3e:	f1b8 0f00 	cmp.w	r8, #0
   1fa42:	d119      	bne.n	1fa78 <__gnu_unwind_pr_common+0x180>
   1fa44:	b1b0      	cbz	r0, 1fa74 <__gnu_unwind_pr_common+0x17c>
   1fa46:	6863      	ldr	r3, [r4, #4]
   1fa48:	6822      	ldr	r2, [r4, #0]
   1fa4a:	1c99      	adds	r1, r3, #2
   1fa4c:	ea4f 72d2 	mov.w	r2, r2, lsr #31
   1fa50:	f43f af7c 	beq.w	1f94c <__gnu_unwind_pr_common+0x54>
   1fa54:	f105 0158 	add.w	r1, r5, #88	; 0x58
   1fa58:	3301      	adds	r3, #1
   1fa5a:	9104      	str	r1, [sp, #16]
   1fa5c:	f000 8090 	beq.w	1fb80 <__gnu_unwind_pr_common+0x288>
   1fa60:	1d20      	adds	r0, r4, #4
   1fa62:	f7ff fdc1 	bl	1f5e8 <_Unwind_decode_typeinfo_ptr.constprop.0>
   1fa66:	ab04      	add	r3, sp, #16
   1fa68:	4601      	mov	r1, r0
   1fa6a:	4628      	mov	r0, r5
   1fa6c:	f017 f978 	bl	36d60 <__cxa_type_match>
   1fa70:	2800      	cmp	r0, #0
   1fa72:	d15b      	bne.n	1fb2c <__gnu_unwind_pr_common+0x234>
   1fa74:	3408      	adds	r4, #8
   1fa76:	e7a3      	b.n	1f9c0 <__gnu_unwind_pr_common+0xc8>
   1fa78:	210d      	movs	r1, #13
   1fa7a:	4638      	mov	r0, r7
   1fa7c:	f8d5 9020 	ldr.w	r9, [r5, #32]
   1fa80:	f7ff fec6 	bl	1f810 <_Unwind_GetGR>
   1fa84:	4581      	cmp	r9, r0
   1fa86:	d1f5      	bne.n	1fa74 <__gnu_unwind_pr_common+0x17c>
   1fa88:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1fa8a:	429c      	cmp	r4, r3
   1fa8c:	d1f2      	bne.n	1fa74 <__gnu_unwind_pr_common+0x17c>
   1fa8e:	4620      	mov	r0, r4
   1fa90:	f7ff fce2 	bl	1f458 <selfrel_offset31>
   1fa94:	210f      	movs	r1, #15
   1fa96:	4602      	mov	r2, r0
   1fa98:	4638      	mov	r0, r7
   1fa9a:	f7ff fedf 	bl	1f85c <_Unwind_SetGR>
   1fa9e:	4638      	mov	r0, r7
   1faa0:	462a      	mov	r2, r5
   1faa2:	2100      	movs	r1, #0
   1faa4:	f7ff feda 	bl	1f85c <_Unwind_SetGR>
   1faa8:	2007      	movs	r0, #7
   1faaa:	e750      	b.n	1f94e <__gnu_unwind_pr_common+0x56>
   1faac:	210d      	movs	r1, #13
   1faae:	4638      	mov	r0, r7
   1fab0:	f8d5 9020 	ldr.w	r9, [r5, #32]
   1fab4:	f7ff feac 	bl	1f810 <_Unwind_GetGR>
   1fab8:	4581      	cmp	r9, r0
   1faba:	d001      	beq.n	1fac0 <__gnu_unwind_pr_common+0x1c8>
   1fabc:	6823      	ldr	r3, [r4, #0]
   1fabe:	e7b6      	b.n	1fa2e <__gnu_unwind_pr_common+0x136>
   1fac0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1fac2:	429c      	cmp	r4, r3
   1fac4:	d1fa      	bne.n	1fabc <__gnu_unwind_pr_common+0x1c4>
   1fac6:	2304      	movs	r3, #4
   1fac8:	2200      	movs	r2, #0
   1faca:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
   1face:	18e3      	adds	r3, r4, r3
   1fad0:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
   1fad4:	636b      	str	r3, [r5, #52]	; 0x34
   1fad6:	6823      	ldr	r3, [r4, #0]
   1fad8:	2b00      	cmp	r3, #0
   1fada:	db59      	blt.n	1fb90 <__gnu_unwind_pr_common+0x298>
   1fadc:	2301      	movs	r3, #1
   1fade:	9301      	str	r3, [sp, #4]
   1fae0:	e7a8      	b.n	1fa34 <__gnu_unwind_pr_common+0x13c>
   1fae2:	f105 0358 	add.w	r3, r5, #88	; 0x58
   1fae6:	f8cd 800c 	str.w	r8, [sp, #12]
   1faea:	f104 0a04 	add.w	sl, r4, #4
   1faee:	46b0      	mov	r8, r6
   1faf0:	4691      	mov	r9, r2
   1faf2:	461e      	mov	r6, r3
   1faf4:	e00e      	b.n	1fb14 <__gnu_unwind_pr_common+0x21c>
   1faf6:	4650      	mov	r0, sl
   1faf8:	9604      	str	r6, [sp, #16]
   1fafa:	f7ff fd75 	bl	1f5e8 <_Unwind_decode_typeinfo_ptr.constprop.0>
   1fafe:	2200      	movs	r2, #0
   1fb00:	4601      	mov	r1, r0
   1fb02:	ab04      	add	r3, sp, #16
   1fb04:	4628      	mov	r0, r5
   1fb06:	f109 0901 	add.w	r9, r9, #1
   1fb0a:	f10a 0a04 	add.w	sl, sl, #4
   1fb0e:	f017 f927 	bl	36d60 <__cxa_type_match>
   1fb12:	b9e0      	cbnz	r0, 1fb4e <__gnu_unwind_pr_common+0x256>
   1fb14:	45d9      	cmp	r9, fp
   1fb16:	d1ee      	bne.n	1faf6 <__gnu_unwind_pr_common+0x1fe>
   1fb18:	210d      	movs	r1, #13
   1fb1a:	4638      	mov	r0, r7
   1fb1c:	f7ff fe78 	bl	1f810 <_Unwind_GetGR>
   1fb20:	9b04      	ldr	r3, [sp, #16]
   1fb22:	62ac      	str	r4, [r5, #40]	; 0x28
   1fb24:	e9c5 0308 	strd	r0, r3, [r5, #32]
   1fb28:	2006      	movs	r0, #6
   1fb2a:	e710      	b.n	1f94e <__gnu_unwind_pr_common+0x56>
   1fb2c:	4681      	mov	r9, r0
   1fb2e:	210d      	movs	r1, #13
   1fb30:	4638      	mov	r0, r7
   1fb32:	f7ff fe6d 	bl	1f810 <_Unwind_GetGR>
   1fb36:	f1b9 0f02 	cmp.w	r9, #2
   1fb3a:	6228      	str	r0, [r5, #32]
   1fb3c:	d125      	bne.n	1fb8a <__gnu_unwind_pr_common+0x292>
   1fb3e:	462b      	mov	r3, r5
   1fb40:	9a04      	ldr	r2, [sp, #16]
   1fb42:	f843 2f2c 	str.w	r2, [r3, #44]!
   1fb46:	626b      	str	r3, [r5, #36]	; 0x24
   1fb48:	62ac      	str	r4, [r5, #40]	; 0x28
   1fb4a:	2006      	movs	r0, #6
   1fb4c:	e6ff      	b.n	1f94e <__gnu_unwind_pr_common+0x56>
   1fb4e:	4646      	mov	r6, r8
   1fb50:	6823      	ldr	r3, [r4, #0]
   1fb52:	f8dd 800c 	ldr.w	r8, [sp, #12]
   1fb56:	e76a      	b.n	1fa2e <__gnu_unwind_pr_common+0x136>
   1fb58:	4620      	mov	r0, r4
   1fb5a:	f7ff fc7d 	bl	1f458 <selfrel_offset31>
   1fb5e:	3404      	adds	r4, #4
   1fb60:	4602      	mov	r2, r0
   1fb62:	63ac      	str	r4, [r5, #56]	; 0x38
   1fb64:	4628      	mov	r0, r5
   1fb66:	4614      	mov	r4, r2
   1fb68:	f017 f954 	bl	36e14 <__cxa_begin_cleanup>
   1fb6c:	2800      	cmp	r0, #0
   1fb6e:	f43f aeed 	beq.w	1f94c <__gnu_unwind_pr_common+0x54>
   1fb72:	4638      	mov	r0, r7
   1fb74:	4622      	mov	r2, r4
   1fb76:	210f      	movs	r1, #15
   1fb78:	f7ff fe70 	bl	1f85c <_Unwind_SetGR>
   1fb7c:	2007      	movs	r0, #7
   1fb7e:	e6e6      	b.n	1f94e <__gnu_unwind_pr_common+0x56>
   1fb80:	210d      	movs	r1, #13
   1fb82:	4638      	mov	r0, r7
   1fb84:	f7ff fe44 	bl	1f810 <_Unwind_GetGR>
   1fb88:	6228      	str	r0, [r5, #32]
   1fb8a:	9b04      	ldr	r3, [sp, #16]
   1fb8c:	626b      	str	r3, [r5, #36]	; 0x24
   1fb8e:	e7db      	b.n	1fb48 <__gnu_unwind_pr_common+0x250>
   1fb90:	f10b 0001 	add.w	r0, fp, #1
   1fb94:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   1fb98:	e77a      	b.n	1fa90 <__gnu_unwind_pr_common+0x198>
   1fb9a:	bf00      	nop
   1fb9c:	00037ced 	.word	0x00037ced

0001fba0 <__aeabi_unwind_cpp_pr0>:
   1fba0:	2300      	movs	r3, #0
   1fba2:	e6a9      	b.n	1f8f8 <__gnu_unwind_pr_common>

0001fba4 <__aeabi_unwind_cpp_pr1>:
   1fba4:	2301      	movs	r3, #1
   1fba6:	e6a7      	b.n	1f8f8 <__gnu_unwind_pr_common>

0001fba8 <__aeabi_unwind_cpp_pr2>:
   1fba8:	2302      	movs	r3, #2
   1fbaa:	e6a5      	b.n	1f8f8 <__gnu_unwind_pr_common>

0001fbac <_Unwind_VRS_Pop>:
   1fbac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1fbb0:	4606      	mov	r6, r0
   1fbb2:	b0c3      	sub	sp, #268	; 0x10c
   1fbb4:	4615      	mov	r5, r2
   1fbb6:	461c      	mov	r4, r3
   1fbb8:	2904      	cmp	r1, #4
   1fbba:	f200 80bf 	bhi.w	1fd3c <_Unwind_VRS_Pop+0x190>
   1fbbe:	e8df f001 	tbb	[pc, r1]
   1fbc2:	579e      	.short	0x579e
   1fbc4:	2dbd      	.short	0x2dbd
   1fbc6:	03          	.byte	0x03
   1fbc7:	00          	.byte	0x00
   1fbc8:	2c00      	cmp	r4, #0
   1fbca:	f040 80b7 	bne.w	1fd3c <_Unwind_VRS_Pop+0x190>
   1fbce:	2a10      	cmp	r2, #16
   1fbd0:	f200 80b4 	bhi.w	1fd3c <_Unwind_VRS_Pop+0x190>
   1fbd4:	6803      	ldr	r3, [r0, #0]
   1fbd6:	06d8      	lsls	r0, r3, #27
   1fbd8:	f100 80f9 	bmi.w	1fdce <_Unwind_VRS_Pop+0x222>
   1fbdc:	af20      	add	r7, sp, #128	; 0x80
   1fbde:	4638      	mov	r0, r7
   1fbe0:	f000 f998 	bl	1ff14 <__gnu_Unwind_Save_WMMXC>
   1fbe4:	6bb4      	ldr	r4, [r6, #56]	; 0x38
   1fbe6:	4639      	mov	r1, r7
   1fbe8:	2300      	movs	r3, #0
   1fbea:	f04f 0c01 	mov.w	ip, #1
   1fbee:	fa0c f203 	lsl.w	r2, ip, r3
   1fbf2:	422a      	tst	r2, r5
   1fbf4:	4620      	mov	r0, r4
   1fbf6:	f103 0301 	add.w	r3, r3, #1
   1fbfa:	d003      	beq.n	1fc04 <_Unwind_VRS_Pop+0x58>
   1fbfc:	f850 2b04 	ldr.w	r2, [r0], #4
   1fc00:	600a      	str	r2, [r1, #0]
   1fc02:	4604      	mov	r4, r0
   1fc04:	2b04      	cmp	r3, #4
   1fc06:	f101 0104 	add.w	r1, r1, #4
   1fc0a:	d1f0      	bne.n	1fbee <_Unwind_VRS_Pop+0x42>
   1fc0c:	4638      	mov	r0, r7
   1fc0e:	63b4      	str	r4, [r6, #56]	; 0x38
   1fc10:	f000 f976 	bl	1ff00 <__gnu_Unwind_Restore_WMMXC>
   1fc14:	2000      	movs	r0, #0
   1fc16:	b043      	add	sp, #268	; 0x10c
   1fc18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1fc1c:	2c03      	cmp	r4, #3
   1fc1e:	f040 808d 	bne.w	1fd3c <_Unwind_VRS_Pop+0x190>
   1fc22:	b294      	uxth	r4, r2
   1fc24:	eb04 4312 	add.w	r3, r4, r2, lsr #16
   1fc28:	2b10      	cmp	r3, #16
   1fc2a:	ea4f 4512 	mov.w	r5, r2, lsr #16
   1fc2e:	f200 8085 	bhi.w	1fd3c <_Unwind_VRS_Pop+0x190>
   1fc32:	6803      	ldr	r3, [r0, #0]
   1fc34:	071f      	lsls	r7, r3, #28
   1fc36:	f100 80d2 	bmi.w	1fdde <_Unwind_VRS_Pop+0x232>
   1fc3a:	af20      	add	r7, sp, #128	; 0x80
   1fc3c:	4638      	mov	r0, r7
   1fc3e:	f000 f93d 	bl	1febc <__gnu_Unwind_Save_WMMXD>
   1fc42:	6bb2      	ldr	r2, [r6, #56]	; 0x38
   1fc44:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
   1fc48:	b154      	cbz	r4, 1fc60 <_Unwind_VRS_Pop+0xb4>
   1fc4a:	460b      	mov	r3, r1
   1fc4c:	1ad0      	subs	r0, r2, r3
   1fc4e:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
   1fc52:	00e4      	lsls	r4, r4, #3
   1fc54:	581d      	ldr	r5, [r3, r0]
   1fc56:	f843 5b04 	str.w	r5, [r3], #4
   1fc5a:	428b      	cmp	r3, r1
   1fc5c:	d1fa      	bne.n	1fc54 <_Unwind_VRS_Pop+0xa8>
   1fc5e:	4422      	add	r2, r4
   1fc60:	4638      	mov	r0, r7
   1fc62:	63b2      	str	r2, [r6, #56]	; 0x38
   1fc64:	f000 f908 	bl	1fe78 <__gnu_Unwind_Restore_WMMXD>
   1fc68:	2000      	movs	r0, #0
   1fc6a:	b043      	add	sp, #268	; 0x10c
   1fc6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1fc70:	2c01      	cmp	r4, #1
   1fc72:	ea4f 4812 	mov.w	r8, r2, lsr #16
   1fc76:	b295      	uxth	r5, r2
   1fc78:	d05c      	beq.n	1fd34 <_Unwind_VRS_Pop+0x188>
   1fc7a:	2c05      	cmp	r4, #5
   1fc7c:	d15e      	bne.n	1fd3c <_Unwind_VRS_Pop+0x190>
   1fc7e:	eb08 0905 	add.w	r9, r8, r5
   1fc82:	f1b9 0f20 	cmp.w	r9, #32
   1fc86:	d859      	bhi.n	1fd3c <_Unwind_VRS_Pop+0x190>
   1fc88:	f1b8 0f0f 	cmp.w	r8, #15
   1fc8c:	d979      	bls.n	1fd82 <_Unwind_VRS_Pop+0x1d6>
   1fc8e:	46a9      	mov	r9, r5
   1fc90:	2d00      	cmp	r5, #0
   1fc92:	f040 808a 	bne.w	1fdaa <_Unwind_VRS_Pop+0x1fe>
   1fc96:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   1fc98:	b36d      	cbz	r5, 1fcf6 <_Unwind_VRS_Pop+0x14a>
   1fc9a:	af20      	add	r7, sp, #128	; 0x80
   1fc9c:	f04f 0900 	mov.w	r9, #0
   1fca0:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   1fca4:	3f04      	subs	r7, #4
   1fca6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   1fcaa:	f853 1b04 	ldr.w	r1, [r3], #4
   1fcae:	f847 1f04 	str.w	r1, [r7, #4]!
   1fcb2:	42ab      	cmp	r3, r5
   1fcb4:	d1f9      	bne.n	1fcaa <_Unwind_VRS_Pop+0xfe>
   1fcb6:	f1b9 0f00 	cmp.w	r9, #0
   1fcba:	d00f      	beq.n	1fcdc <_Unwind_VRS_Pop+0x130>
   1fcbc:	466f      	mov	r7, sp
   1fcbe:	4641      	mov	r1, r8
   1fcc0:	2910      	cmp	r1, #16
   1fcc2:	bf38      	it	cc
   1fcc4:	2110      	movcc	r1, #16
   1fcc6:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
   1fcca:	3984      	subs	r1, #132	; 0x84
   1fccc:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
   1fcd0:	f853 0b04 	ldr.w	r0, [r3], #4
   1fcd4:	f841 0f04 	str.w	r0, [r1, #4]!
   1fcd8:	42ab      	cmp	r3, r5
   1fcda:	d1f9      	bne.n	1fcd0 <_Unwind_VRS_Pop+0x124>
   1fcdc:	2c01      	cmp	r4, #1
   1fcde:	f000 8086 	beq.w	1fdee <_Unwind_VRS_Pop+0x242>
   1fce2:	f1b8 0f0f 	cmp.w	r8, #15
   1fce6:	63b5      	str	r5, [r6, #56]	; 0x38
   1fce8:	d947      	bls.n	1fd7a <_Unwind_VRS_Pop+0x1ce>
   1fcea:	f1b9 0f00 	cmp.w	r9, #0
   1fcee:	d002      	beq.n	1fcf6 <_Unwind_VRS_Pop+0x14a>
   1fcf0:	4668      	mov	r0, sp
   1fcf2:	f000 f8b9 	bl	1fe68 <__gnu_Unwind_Restore_VFP_D_16_to_31>
   1fcf6:	2000      	movs	r0, #0
   1fcf8:	b043      	add	sp, #268	; 0x10c
   1fcfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1fcfe:	b9ec      	cbnz	r4, 1fd3c <_Unwind_VRS_Pop+0x190>
   1fd00:	6b80      	ldr	r0, [r0, #56]	; 0x38
   1fd02:	4623      	mov	r3, r4
   1fd04:	fa1f fc82 	uxth.w	ip, r2
   1fd08:	2401      	movs	r4, #1
   1fd0a:	1d37      	adds	r7, r6, #4
   1fd0c:	fa04 f203 	lsl.w	r2, r4, r3
   1fd10:	ea12 0f0c 	tst.w	r2, ip
   1fd14:	4601      	mov	r1, r0
   1fd16:	d004      	beq.n	1fd22 <_Unwind_VRS_Pop+0x176>
   1fd18:	f851 2b04 	ldr.w	r2, [r1], #4
   1fd1c:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
   1fd20:	4608      	mov	r0, r1
   1fd22:	3301      	adds	r3, #1
   1fd24:	2b10      	cmp	r3, #16
   1fd26:	d1f1      	bne.n	1fd0c <_Unwind_VRS_Pop+0x160>
   1fd28:	f415 5500 	ands.w	r5, r5, #8192	; 0x2000
   1fd2c:	d1e3      	bne.n	1fcf6 <_Unwind_VRS_Pop+0x14a>
   1fd2e:	63b0      	str	r0, [r6, #56]	; 0x38
   1fd30:	4628      	mov	r0, r5
   1fd32:	e004      	b.n	1fd3e <_Unwind_VRS_Pop+0x192>
   1fd34:	eb08 0305 	add.w	r3, r8, r5
   1fd38:	2b10      	cmp	r3, #16
   1fd3a:	d903      	bls.n	1fd44 <_Unwind_VRS_Pop+0x198>
   1fd3c:	2002      	movs	r0, #2
   1fd3e:	b043      	add	sp, #268	; 0x10c
   1fd40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1fd44:	f1b8 0f0f 	cmp.w	r8, #15
   1fd48:	d8f8      	bhi.n	1fd3c <_Unwind_VRS_Pop+0x190>
   1fd4a:	6833      	ldr	r3, [r6, #0]
   1fd4c:	07da      	lsls	r2, r3, #31
   1fd4e:	d506      	bpl.n	1fd5e <_Unwind_VRS_Pop+0x1b2>
   1fd50:	4630      	mov	r0, r6
   1fd52:	f023 0303 	bic.w	r3, r3, #3
   1fd56:	f840 3b48 	str.w	r3, [r0], #72
   1fd5a:	f000 f879 	bl	1fe50 <__gnu_Unwind_Save_VFP>
   1fd5e:	af20      	add	r7, sp, #128	; 0x80
   1fd60:	4638      	mov	r0, r7
   1fd62:	f000 f875 	bl	1fe50 <__gnu_Unwind_Save_VFP>
   1fd66:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   1fd68:	2d00      	cmp	r5, #0
   1fd6a:	d197      	bne.n	1fc9c <_Unwind_VRS_Pop+0xf0>
   1fd6c:	461d      	mov	r5, r3
   1fd6e:	3504      	adds	r5, #4
   1fd70:	63b5      	str	r5, [r6, #56]	; 0x38
   1fd72:	4638      	mov	r0, r7
   1fd74:	f000 f868 	bl	1fe48 <__gnu_Unwind_Restore_VFP>
   1fd78:	e7bd      	b.n	1fcf6 <_Unwind_VRS_Pop+0x14a>
   1fd7a:	a820      	add	r0, sp, #128	; 0x80
   1fd7c:	f000 f86c 	bl	1fe58 <__gnu_Unwind_Restore_VFP_D>
   1fd80:	e7b3      	b.n	1fcea <_Unwind_VRS_Pop+0x13e>
   1fd82:	f1b9 0f10 	cmp.w	r9, #16
   1fd86:	d940      	bls.n	1fe0a <_Unwind_VRS_Pop+0x25e>
   1fd88:	f1a9 0910 	sub.w	r9, r9, #16
   1fd8c:	6833      	ldr	r3, [r6, #0]
   1fd8e:	07d9      	lsls	r1, r3, #31
   1fd90:	d508      	bpl.n	1fda4 <_Unwind_VRS_Pop+0x1f8>
   1fd92:	f023 0301 	bic.w	r3, r3, #1
   1fd96:	4630      	mov	r0, r6
   1fd98:	f043 0302 	orr.w	r3, r3, #2
   1fd9c:	f840 3b48 	str.w	r3, [r0], #72
   1fda0:	f000 f85e 	bl	1fe60 <__gnu_Unwind_Save_VFP_D>
   1fda4:	f1b9 0f00 	cmp.w	r9, #0
   1fda8:	d032      	beq.n	1fe10 <_Unwind_VRS_Pop+0x264>
   1fdaa:	6833      	ldr	r3, [r6, #0]
   1fdac:	075a      	lsls	r2, r3, #29
   1fdae:	d420      	bmi.n	1fdf2 <_Unwind_VRS_Pop+0x246>
   1fdb0:	f1b8 0f0f 	cmp.w	r8, #15
   1fdb4:	d925      	bls.n	1fe02 <_Unwind_VRS_Pop+0x256>
   1fdb6:	466f      	mov	r7, sp
   1fdb8:	4638      	mov	r0, r7
   1fdba:	f1c8 0510 	rsb	r5, r8, #16
   1fdbe:	f000 f857 	bl	1fe70 <__gnu_Unwind_Save_VFP_D_16_to_31>
   1fdc2:	2d00      	cmp	r5, #0
   1fdc4:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   1fdc6:	f77f af7a 	ble.w	1fcbe <_Unwind_VRS_Pop+0x112>
   1fdca:	af20      	add	r7, sp, #128	; 0x80
   1fdcc:	e768      	b.n	1fca0 <_Unwind_VRS_Pop+0xf4>
   1fdce:	f023 0310 	bic.w	r3, r3, #16
   1fdd2:	6033      	str	r3, [r6, #0]
   1fdd4:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
   1fdd8:	f000 f89c 	bl	1ff14 <__gnu_Unwind_Save_WMMXC>
   1fddc:	e6fe      	b.n	1fbdc <_Unwind_VRS_Pop+0x30>
   1fdde:	f023 0308 	bic.w	r3, r3, #8
   1fde2:	6003      	str	r3, [r0, #0]
   1fde4:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1fde8:	f000 f868 	bl	1febc <__gnu_Unwind_Save_WMMXD>
   1fdec:	e725      	b.n	1fc3a <_Unwind_VRS_Pop+0x8e>
   1fdee:	af20      	add	r7, sp, #128	; 0x80
   1fdf0:	e7bd      	b.n	1fd6e <_Unwind_VRS_Pop+0x1c2>
   1fdf2:	4630      	mov	r0, r6
   1fdf4:	f023 0304 	bic.w	r3, r3, #4
   1fdf8:	f840 3bd0 	str.w	r3, [r0], #208
   1fdfc:	f000 f838 	bl	1fe70 <__gnu_Unwind_Save_VFP_D_16_to_31>
   1fe00:	e7d6      	b.n	1fdb0 <_Unwind_VRS_Pop+0x204>
   1fe02:	a820      	add	r0, sp, #128	; 0x80
   1fe04:	f000 f82c 	bl	1fe60 <__gnu_Unwind_Save_VFP_D>
   1fe08:	e7d5      	b.n	1fdb6 <_Unwind_VRS_Pop+0x20a>
   1fe0a:	f04f 0900 	mov.w	r9, #0
   1fe0e:	e7bd      	b.n	1fd8c <_Unwind_VRS_Pop+0x1e0>
   1fe10:	f1b8 0f0f 	cmp.w	r8, #15
   1fe14:	f63f af3f 	bhi.w	1fc96 <_Unwind_VRS_Pop+0xea>
   1fe18:	af20      	add	r7, sp, #128	; 0x80
   1fe1a:	4638      	mov	r0, r7
   1fe1c:	f000 f820 	bl	1fe60 <__gnu_Unwind_Save_VFP_D>
   1fe20:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   1fe22:	2d00      	cmp	r5, #0
   1fe24:	f47f af3a 	bne.w	1fc9c <_Unwind_VRS_Pop+0xf0>
   1fe28:	4638      	mov	r0, r7
   1fe2a:	f000 f815 	bl	1fe58 <__gnu_Unwind_Restore_VFP_D>
   1fe2e:	e762      	b.n	1fcf6 <_Unwind_VRS_Pop+0x14a>

0001fe30 <__restore_core_regs>:
   1fe30:	f100 0134 	add.w	r1, r0, #52	; 0x34
   1fe34:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
   1fe38:	469c      	mov	ip, r3
   1fe3a:	46a6      	mov	lr, r4
   1fe3c:	f84c 5d04 	str.w	r5, [ip, #-4]!
   1fe40:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
   1fe44:	46e5      	mov	sp, ip
   1fe46:	bd00      	pop	{pc}

0001fe48 <__gnu_Unwind_Restore_VFP>:
   1fe48:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
   1fe4c:	4770      	bx	lr
   1fe4e:	bf00      	nop

0001fe50 <__gnu_Unwind_Save_VFP>:
   1fe50:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
   1fe54:	4770      	bx	lr
   1fe56:	bf00      	nop

0001fe58 <__gnu_Unwind_Restore_VFP_D>:
   1fe58:	ec90 0b20 	vldmia	r0, {d0-d15}
   1fe5c:	4770      	bx	lr
   1fe5e:	bf00      	nop

0001fe60 <__gnu_Unwind_Save_VFP_D>:
   1fe60:	ec80 0b20 	vstmia	r0, {d0-d15}
   1fe64:	4770      	bx	lr
   1fe66:	bf00      	nop

0001fe68 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
   1fe68:	ecd0 0b20 	vldmia	r0, {d16-d31}
   1fe6c:	4770      	bx	lr
   1fe6e:	bf00      	nop

0001fe70 <__gnu_Unwind_Save_VFP_D_16_to_31>:
   1fe70:	ecc0 0b20 	vstmia	r0, {d16-d31}
   1fe74:	4770      	bx	lr
   1fe76:	bf00      	nop

0001fe78 <__gnu_Unwind_Restore_WMMXD>:
   1fe78:	ecf0 0102 	ldfe	f0, [r0], #8
   1fe7c:	ecf0 1102 	ldfe	f1, [r0], #8
   1fe80:	ecf0 2102 	ldfe	f2, [r0], #8
   1fe84:	ecf0 3102 	ldfe	f3, [r0], #8
   1fe88:	ecf0 4102 	ldfe	f4, [r0], #8
   1fe8c:	ecf0 5102 	ldfe	f5, [r0], #8
   1fe90:	ecf0 6102 	ldfe	f6, [r0], #8
   1fe94:	ecf0 7102 	ldfe	f7, [r0], #8
   1fe98:	ecf0 8102 	ldfp	f0, [r0], #8
   1fe9c:	ecf0 9102 	ldfp	f1, [r0], #8
   1fea0:	ecf0 a102 	ldfp	f2, [r0], #8
   1fea4:	ecf0 b102 	ldfp	f3, [r0], #8
   1fea8:	ecf0 c102 	ldfp	f4, [r0], #8
   1feac:	ecf0 d102 	ldfp	f5, [r0], #8
   1feb0:	ecf0 e102 	ldfp	f6, [r0], #8
   1feb4:	ecf0 f102 	ldfp	f7, [r0], #8
   1feb8:	4770      	bx	lr
   1feba:	bf00      	nop

0001febc <__gnu_Unwind_Save_WMMXD>:
   1febc:	ece0 0102 	stfe	f0, [r0], #8
   1fec0:	ece0 1102 	stfe	f1, [r0], #8
   1fec4:	ece0 2102 	stfe	f2, [r0], #8
   1fec8:	ece0 3102 	stfe	f3, [r0], #8
   1fecc:	ece0 4102 	stfe	f4, [r0], #8
   1fed0:	ece0 5102 	stfe	f5, [r0], #8
   1fed4:	ece0 6102 	stfe	f6, [r0], #8
   1fed8:	ece0 7102 	stfe	f7, [r0], #8
   1fedc:	ece0 8102 	stfp	f0, [r0], #8
   1fee0:	ece0 9102 	stfp	f1, [r0], #8
   1fee4:	ece0 a102 	stfp	f2, [r0], #8
   1fee8:	ece0 b102 	stfp	f3, [r0], #8
   1feec:	ece0 c102 	stfp	f4, [r0], #8
   1fef0:	ece0 d102 	stfp	f5, [r0], #8
   1fef4:	ece0 e102 	stfp	f6, [r0], #8
   1fef8:	ece0 f102 	stfp	f7, [r0], #8
   1fefc:	4770      	bx	lr
   1fefe:	bf00      	nop

0001ff00 <__gnu_Unwind_Restore_WMMXC>:
   1ff00:	fcb0 8101 	ldc2	1, cr8, [r0], #4
   1ff04:	fcb0 9101 	ldc2	1, cr9, [r0], #4
   1ff08:	fcb0 a101 	ldc2	1, cr10, [r0], #4
   1ff0c:	fcb0 b101 	ldc2	1, cr11, [r0], #4
   1ff10:	4770      	bx	lr
   1ff12:	bf00      	nop

0001ff14 <__gnu_Unwind_Save_WMMXC>:
   1ff14:	fca0 8101 	stc2	1, cr8, [r0], #4
   1ff18:	fca0 9101 	stc2	1, cr9, [r0], #4
   1ff1c:	fca0 a101 	stc2	1, cr10, [r0], #4
   1ff20:	fca0 b101 	stc2	1, cr11, [r0], #4
   1ff24:	4770      	bx	lr
   1ff26:	bf00      	nop

0001ff28 <_Unwind_RaiseException>:
   1ff28:	46ec      	mov	ip, sp
   1ff2a:	b500      	push	{lr}
   1ff2c:	e92d 5000 	stmdb	sp!, {ip, lr}
   1ff30:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1ff34:	f04f 0300 	mov.w	r3, #0
   1ff38:	e92d 000c 	stmdb	sp!, {r2, r3}
   1ff3c:	a901      	add	r1, sp, #4
   1ff3e:	f7ff fbe1 	bl	1f704 <__gnu_Unwind_RaiseException>
   1ff42:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1ff46:	b012      	add	sp, #72	; 0x48
   1ff48:	4770      	bx	lr
   1ff4a:	bf00      	nop

0001ff4c <_Unwind_Resume>:
   1ff4c:	46ec      	mov	ip, sp
   1ff4e:	b500      	push	{lr}
   1ff50:	e92d 5000 	stmdb	sp!, {ip, lr}
   1ff54:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1ff58:	f04f 0300 	mov.w	r3, #0
   1ff5c:	e92d 000c 	stmdb	sp!, {r2, r3}
   1ff60:	a901      	add	r1, sp, #4
   1ff62:	f7ff fc0b 	bl	1f77c <__gnu_Unwind_Resume>
   1ff66:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1ff6a:	b012      	add	sp, #72	; 0x48
   1ff6c:	4770      	bx	lr
   1ff6e:	bf00      	nop

0001ff70 <_Unwind_Resume_or_Rethrow>:
   1ff70:	46ec      	mov	ip, sp
   1ff72:	b500      	push	{lr}
   1ff74:	e92d 5000 	stmdb	sp!, {ip, lr}
   1ff78:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1ff7c:	f04f 0300 	mov.w	r3, #0
   1ff80:	e92d 000c 	stmdb	sp!, {r2, r3}
   1ff84:	a901      	add	r1, sp, #4
   1ff86:	f7ff fc1b 	bl	1f7c0 <__gnu_Unwind_Resume_or_Rethrow>
   1ff8a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1ff8e:	b012      	add	sp, #72	; 0x48
   1ff90:	4770      	bx	lr
   1ff92:	bf00      	nop

0001ff94 <_Unwind_ForcedUnwind>:
   1ff94:	46ec      	mov	ip, sp
   1ff96:	b500      	push	{lr}
   1ff98:	e92d 5000 	stmdb	sp!, {ip, lr}
   1ff9c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1ffa0:	f04f 0300 	mov.w	r3, #0
   1ffa4:	e92d 000c 	stmdb	sp!, {r2, r3}
   1ffa8:	ab01      	add	r3, sp, #4
   1ffaa:	f7ff fbdf 	bl	1f76c <__gnu_Unwind_ForcedUnwind>
   1ffae:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1ffb2:	b012      	add	sp, #72	; 0x48
   1ffb4:	4770      	bx	lr
   1ffb6:	bf00      	nop

0001ffb8 <_Unwind_Backtrace>:
   1ffb8:	46ec      	mov	ip, sp
   1ffba:	b500      	push	{lr}
   1ffbc:	e92d 5000 	stmdb	sp!, {ip, lr}
   1ffc0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1ffc4:	f04f 0300 	mov.w	r3, #0
   1ffc8:	e92d 000c 	stmdb	sp!, {r2, r3}
   1ffcc:	aa01      	add	r2, sp, #4
   1ffce:	f7ff fc51 	bl	1f874 <__gnu_Unwind_Backtrace>
   1ffd2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1ffd6:	b012      	add	sp, #72	; 0x48
   1ffd8:	4770      	bx	lr
   1ffda:	bf00      	nop

0001ffdc <next_unwind_byte>:
   1ffdc:	7a02      	ldrb	r2, [r0, #8]
   1ffde:	4603      	mov	r3, r0
   1ffe0:	b97a      	cbnz	r2, 20002 <next_unwind_byte+0x26>
   1ffe2:	7a42      	ldrb	r2, [r0, #9]
   1ffe4:	b1a2      	cbz	r2, 20010 <next_unwind_byte+0x34>
   1ffe6:	6841      	ldr	r1, [r0, #4]
   1ffe8:	3a01      	subs	r2, #1
   1ffea:	b410      	push	{r4}
   1ffec:	7242      	strb	r2, [r0, #9]
   1ffee:	6808      	ldr	r0, [r1, #0]
   1fff0:	2203      	movs	r2, #3
   1fff2:	1d0c      	adds	r4, r1, #4
   1fff4:	721a      	strb	r2, [r3, #8]
   1fff6:	0202      	lsls	r2, r0, #8
   1fff8:	605c      	str	r4, [r3, #4]
   1fffa:	0e00      	lsrs	r0, r0, #24
   1fffc:	bc10      	pop	{r4}
   1fffe:	601a      	str	r2, [r3, #0]
   20000:	4770      	bx	lr
   20002:	6800      	ldr	r0, [r0, #0]
   20004:	3a01      	subs	r2, #1
   20006:	721a      	strb	r2, [r3, #8]
   20008:	0202      	lsls	r2, r0, #8
   2000a:	601a      	str	r2, [r3, #0]
   2000c:	0e00      	lsrs	r0, r0, #24
   2000e:	4770      	bx	lr
   20010:	20b0      	movs	r0, #176	; 0xb0
   20012:	4770      	bx	lr

00020014 <_Unwind_GetGR.constprop.0>:
   20014:	b500      	push	{lr}
   20016:	b085      	sub	sp, #20
   20018:	2300      	movs	r3, #0
   2001a:	aa03      	add	r2, sp, #12
   2001c:	9200      	str	r2, [sp, #0]
   2001e:	4619      	mov	r1, r3
   20020:	220c      	movs	r2, #12
   20022:	f7ff fbdd 	bl	1f7e0 <_Unwind_VRS_Get>
   20026:	9803      	ldr	r0, [sp, #12]
   20028:	b005      	add	sp, #20
   2002a:	f85d fb04 	ldr.w	pc, [sp], #4
   2002e:	bf00      	nop

00020030 <unwind_UCB_from_context>:
   20030:	e7f0      	b.n	20014 <_Unwind_GetGR.constprop.0>
   20032:	bf00      	nop

00020034 <__gnu_unwind_execute>:
   20034:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20038:	4605      	mov	r5, r0
   2003a:	b085      	sub	sp, #20
   2003c:	460e      	mov	r6, r1
   2003e:	f04f 0800 	mov.w	r8, #0
   20042:	4630      	mov	r0, r6
   20044:	f7ff ffca 	bl	1ffdc <next_unwind_byte>
   20048:	28b0      	cmp	r0, #176	; 0xb0
   2004a:	4604      	mov	r4, r0
   2004c:	f000 80ba 	beq.w	201c4 <__gnu_unwind_execute+0x190>
   20050:	0607      	lsls	r7, r0, #24
   20052:	d520      	bpl.n	20096 <__gnu_unwind_execute+0x62>
   20054:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   20058:	2b80      	cmp	r3, #128	; 0x80
   2005a:	d04d      	beq.n	200f8 <__gnu_unwind_execute+0xc4>
   2005c:	2b90      	cmp	r3, #144	; 0x90
   2005e:	d036      	beq.n	200ce <__gnu_unwind_execute+0x9a>
   20060:	2ba0      	cmp	r3, #160	; 0xa0
   20062:	d060      	beq.n	20126 <__gnu_unwind_execute+0xf2>
   20064:	2bb0      	cmp	r3, #176	; 0xb0
   20066:	d074      	beq.n	20152 <__gnu_unwind_execute+0x11e>
   20068:	2bc0      	cmp	r3, #192	; 0xc0
   2006a:	f000 808b 	beq.w	20184 <__gnu_unwind_execute+0x150>
   2006e:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   20072:	2bd0      	cmp	r3, #208	; 0xd0
   20074:	d10b      	bne.n	2008e <__gnu_unwind_execute+0x5a>
   20076:	f000 0207 	and.w	r2, r0, #7
   2007a:	3201      	adds	r2, #1
   2007c:	2305      	movs	r3, #5
   2007e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   20082:	2101      	movs	r1, #1
   20084:	4628      	mov	r0, r5
   20086:	f7ff fd91 	bl	1fbac <_Unwind_VRS_Pop>
   2008a:	2800      	cmp	r0, #0
   2008c:	d0d9      	beq.n	20042 <__gnu_unwind_execute+0xe>
   2008e:	2009      	movs	r0, #9
   20090:	b005      	add	sp, #20
   20092:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   20096:	0083      	lsls	r3, r0, #2
   20098:	b2db      	uxtb	r3, r3
   2009a:	1d1f      	adds	r7, r3, #4
   2009c:	f10d 090c 	add.w	r9, sp, #12
   200a0:	2300      	movs	r3, #0
   200a2:	4619      	mov	r1, r3
   200a4:	f8cd 9000 	str.w	r9, [sp]
   200a8:	220d      	movs	r2, #13
   200aa:	4628      	mov	r0, r5
   200ac:	f7ff fb98 	bl	1f7e0 <_Unwind_VRS_Get>
   200b0:	9b03      	ldr	r3, [sp, #12]
   200b2:	f8cd 9000 	str.w	r9, [sp]
   200b6:	0660      	lsls	r0, r4, #25
   200b8:	bf4c      	ite	mi
   200ba:	1bdf      	submi	r7, r3, r7
   200bc:	18ff      	addpl	r7, r7, r3
   200be:	2300      	movs	r3, #0
   200c0:	220d      	movs	r2, #13
   200c2:	4619      	mov	r1, r3
   200c4:	4628      	mov	r0, r5
   200c6:	9703      	str	r7, [sp, #12]
   200c8:	f7ff fbb0 	bl	1f82c <_Unwind_VRS_Set>
   200cc:	e7b9      	b.n	20042 <__gnu_unwind_execute+0xe>
   200ce:	f000 030d 	and.w	r3, r0, #13
   200d2:	2b0d      	cmp	r3, #13
   200d4:	d0db      	beq.n	2008e <__gnu_unwind_execute+0x5a>
   200d6:	af03      	add	r7, sp, #12
   200d8:	2300      	movs	r3, #0
   200da:	f000 020f 	and.w	r2, r0, #15
   200de:	4619      	mov	r1, r3
   200e0:	9700      	str	r7, [sp, #0]
   200e2:	4628      	mov	r0, r5
   200e4:	f7ff fb7c 	bl	1f7e0 <_Unwind_VRS_Get>
   200e8:	2300      	movs	r3, #0
   200ea:	9700      	str	r7, [sp, #0]
   200ec:	220d      	movs	r2, #13
   200ee:	4619      	mov	r1, r3
   200f0:	4628      	mov	r0, r5
   200f2:	f7ff fb9b 	bl	1f82c <_Unwind_VRS_Set>
   200f6:	e7a4      	b.n	20042 <__gnu_unwind_execute+0xe>
   200f8:	4630      	mov	r0, r6
   200fa:	f7ff ff6f 	bl	1ffdc <next_unwind_byte>
   200fe:	0224      	lsls	r4, r4, #8
   20100:	4320      	orrs	r0, r4
   20102:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   20106:	d0c2      	beq.n	2008e <__gnu_unwind_execute+0x5a>
   20108:	0104      	lsls	r4, r0, #4
   2010a:	2300      	movs	r3, #0
   2010c:	b2a2      	uxth	r2, r4
   2010e:	4619      	mov	r1, r3
   20110:	4628      	mov	r0, r5
   20112:	f7ff fd4b 	bl	1fbac <_Unwind_VRS_Pop>
   20116:	2800      	cmp	r0, #0
   20118:	d1b9      	bne.n	2008e <__gnu_unwind_execute+0x5a>
   2011a:	f414 4f00 	tst.w	r4, #32768	; 0x8000
   2011e:	bf18      	it	ne
   20120:	f04f 0801 	movne.w	r8, #1
   20124:	e78d      	b.n	20042 <__gnu_unwind_execute+0xe>
   20126:	43c2      	mvns	r2, r0
   20128:	f002 0307 	and.w	r3, r2, #7
   2012c:	f44f 627f 	mov.w	r2, #4080	; 0xff0
   20130:	411a      	asrs	r2, r3
   20132:	0701      	lsls	r1, r0, #28
   20134:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
   20138:	f04f 0300 	mov.w	r3, #0
   2013c:	bf48      	it	mi
   2013e:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
   20142:	4619      	mov	r1, r3
   20144:	4628      	mov	r0, r5
   20146:	f7ff fd31 	bl	1fbac <_Unwind_VRS_Pop>
   2014a:	2800      	cmp	r0, #0
   2014c:	f43f af79 	beq.w	20042 <__gnu_unwind_execute+0xe>
   20150:	e79d      	b.n	2008e <__gnu_unwind_execute+0x5a>
   20152:	28b1      	cmp	r0, #177	; 0xb1
   20154:	d03b      	beq.n	201ce <__gnu_unwind_execute+0x19a>
   20156:	28b2      	cmp	r0, #178	; 0xb2
   20158:	f000 8093 	beq.w	20282 <__gnu_unwind_execute+0x24e>
   2015c:	28b3      	cmp	r0, #179	; 0xb3
   2015e:	d041      	beq.n	201e4 <__gnu_unwind_execute+0x1b0>
   20160:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
   20164:	2bb4      	cmp	r3, #180	; 0xb4
   20166:	d092      	beq.n	2008e <__gnu_unwind_execute+0x5a>
   20168:	f000 0207 	and.w	r2, r0, #7
   2016c:	3201      	adds	r2, #1
   2016e:	2301      	movs	r3, #1
   20170:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   20174:	4619      	mov	r1, r3
   20176:	4628      	mov	r0, r5
   20178:	f7ff fd18 	bl	1fbac <_Unwind_VRS_Pop>
   2017c:	2800      	cmp	r0, #0
   2017e:	f43f af60 	beq.w	20042 <__gnu_unwind_execute+0xe>
   20182:	e784      	b.n	2008e <__gnu_unwind_execute+0x5a>
   20184:	28c6      	cmp	r0, #198	; 0xc6
   20186:	d04a      	beq.n	2021e <__gnu_unwind_execute+0x1ea>
   20188:	28c7      	cmp	r0, #199	; 0xc7
   2018a:	d054      	beq.n	20236 <__gnu_unwind_execute+0x202>
   2018c:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   20190:	2bc0      	cmp	r3, #192	; 0xc0
   20192:	d063      	beq.n	2025c <__gnu_unwind_execute+0x228>
   20194:	28c8      	cmp	r0, #200	; 0xc8
   20196:	d068      	beq.n	2026a <__gnu_unwind_execute+0x236>
   20198:	28c9      	cmp	r0, #201	; 0xc9
   2019a:	f47f af78 	bne.w	2008e <__gnu_unwind_execute+0x5a>
   2019e:	4630      	mov	r0, r6
   201a0:	f7ff ff1c 	bl	1ffdc <next_unwind_byte>
   201a4:	0302      	lsls	r2, r0, #12
   201a6:	f000 000f 	and.w	r0, r0, #15
   201aa:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   201ae:	3001      	adds	r0, #1
   201b0:	4302      	orrs	r2, r0
   201b2:	2101      	movs	r1, #1
   201b4:	2305      	movs	r3, #5
   201b6:	4628      	mov	r0, r5
   201b8:	f7ff fcf8 	bl	1fbac <_Unwind_VRS_Pop>
   201bc:	2800      	cmp	r0, #0
   201be:	f43f af40 	beq.w	20042 <__gnu_unwind_execute+0xe>
   201c2:	e764      	b.n	2008e <__gnu_unwind_execute+0x5a>
   201c4:	f1b8 0f00 	cmp.w	r8, #0
   201c8:	d018      	beq.n	201fc <__gnu_unwind_execute+0x1c8>
   201ca:	2000      	movs	r0, #0
   201cc:	e760      	b.n	20090 <__gnu_unwind_execute+0x5c>
   201ce:	4630      	mov	r0, r6
   201d0:	f7ff ff04 	bl	1ffdc <next_unwind_byte>
   201d4:	4602      	mov	r2, r0
   201d6:	2800      	cmp	r0, #0
   201d8:	f43f af59 	beq.w	2008e <__gnu_unwind_execute+0x5a>
   201dc:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   201e0:	d0c8      	beq.n	20174 <__gnu_unwind_execute+0x140>
   201e2:	e754      	b.n	2008e <__gnu_unwind_execute+0x5a>
   201e4:	4630      	mov	r0, r6
   201e6:	f7ff fef9 	bl	1ffdc <next_unwind_byte>
   201ea:	0302      	lsls	r2, r0, #12
   201ec:	f000 030f 	and.w	r3, r0, #15
   201f0:	3301      	adds	r3, #1
   201f2:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   201f6:	431a      	orrs	r2, r3
   201f8:	2301      	movs	r3, #1
   201fa:	e7bb      	b.n	20174 <__gnu_unwind_execute+0x140>
   201fc:	ac03      	add	r4, sp, #12
   201fe:	4643      	mov	r3, r8
   20200:	220e      	movs	r2, #14
   20202:	4641      	mov	r1, r8
   20204:	9400      	str	r4, [sp, #0]
   20206:	4628      	mov	r0, r5
   20208:	f7ff faea 	bl	1f7e0 <_Unwind_VRS_Get>
   2020c:	9400      	str	r4, [sp, #0]
   2020e:	4643      	mov	r3, r8
   20210:	220f      	movs	r2, #15
   20212:	4641      	mov	r1, r8
   20214:	4628      	mov	r0, r5
   20216:	f7ff fb09 	bl	1f82c <_Unwind_VRS_Set>
   2021a:	4640      	mov	r0, r8
   2021c:	e738      	b.n	20090 <__gnu_unwind_execute+0x5c>
   2021e:	4630      	mov	r0, r6
   20220:	f7ff fedc 	bl	1ffdc <next_unwind_byte>
   20224:	0302      	lsls	r2, r0, #12
   20226:	f000 030f 	and.w	r3, r0, #15
   2022a:	3301      	adds	r3, #1
   2022c:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   20230:	431a      	orrs	r2, r3
   20232:	2303      	movs	r3, #3
   20234:	e79e      	b.n	20174 <__gnu_unwind_execute+0x140>
   20236:	4630      	mov	r0, r6
   20238:	f7ff fed0 	bl	1ffdc <next_unwind_byte>
   2023c:	4602      	mov	r2, r0
   2023e:	2800      	cmp	r0, #0
   20240:	f43f af25 	beq.w	2008e <__gnu_unwind_execute+0x5a>
   20244:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   20248:	f47f af21 	bne.w	2008e <__gnu_unwind_execute+0x5a>
   2024c:	2104      	movs	r1, #4
   2024e:	4628      	mov	r0, r5
   20250:	f7ff fcac 	bl	1fbac <_Unwind_VRS_Pop>
   20254:	2800      	cmp	r0, #0
   20256:	f43f aef4 	beq.w	20042 <__gnu_unwind_execute+0xe>
   2025a:	e718      	b.n	2008e <__gnu_unwind_execute+0x5a>
   2025c:	f000 020f 	and.w	r2, r0, #15
   20260:	3201      	adds	r2, #1
   20262:	2303      	movs	r3, #3
   20264:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
   20268:	e784      	b.n	20174 <__gnu_unwind_execute+0x140>
   2026a:	4630      	mov	r0, r6
   2026c:	f7ff feb6 	bl	1ffdc <next_unwind_byte>
   20270:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
   20274:	f000 030f 	and.w	r3, r0, #15
   20278:	3210      	adds	r2, #16
   2027a:	3301      	adds	r3, #1
   2027c:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
   20280:	e797      	b.n	201b2 <__gnu_unwind_execute+0x17e>
   20282:	2300      	movs	r3, #0
   20284:	f10d 090c 	add.w	r9, sp, #12
   20288:	220d      	movs	r2, #13
   2028a:	4619      	mov	r1, r3
   2028c:	f8cd 9000 	str.w	r9, [sp]
   20290:	4628      	mov	r0, r5
   20292:	f7ff faa5 	bl	1f7e0 <_Unwind_VRS_Get>
   20296:	4630      	mov	r0, r6
   20298:	f7ff fea0 	bl	1ffdc <next_unwind_byte>
   2029c:	0602      	lsls	r2, r0, #24
   2029e:	f04f 0402 	mov.w	r4, #2
   202a2:	d50c      	bpl.n	202be <__gnu_unwind_execute+0x28a>
   202a4:	9b03      	ldr	r3, [sp, #12]
   202a6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   202aa:	40a0      	lsls	r0, r4
   202ac:	4418      	add	r0, r3
   202ae:	9003      	str	r0, [sp, #12]
   202b0:	4630      	mov	r0, r6
   202b2:	f7ff fe93 	bl	1ffdc <next_unwind_byte>
   202b6:	0603      	lsls	r3, r0, #24
   202b8:	f104 0407 	add.w	r4, r4, #7
   202bc:	d4f2      	bmi.n	202a4 <__gnu_unwind_execute+0x270>
   202be:	9b03      	ldr	r3, [sp, #12]
   202c0:	f8cd 9000 	str.w	r9, [sp]
   202c4:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   202c8:	40a2      	lsls	r2, r4
   202ca:	f503 7301 	add.w	r3, r3, #516	; 0x204
   202ce:	441a      	add	r2, r3
   202d0:	2300      	movs	r3, #0
   202d2:	9203      	str	r2, [sp, #12]
   202d4:	4619      	mov	r1, r3
   202d6:	220d      	movs	r2, #13
   202d8:	4628      	mov	r0, r5
   202da:	f7ff faa7 	bl	1f82c <_Unwind_VRS_Set>
   202de:	e6b0      	b.n	20042 <__gnu_unwind_execute+0xe>

000202e0 <__gnu_unwind_frame>:
   202e0:	b510      	push	{r4, lr}
   202e2:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
   202e4:	6853      	ldr	r3, [r2, #4]
   202e6:	b084      	sub	sp, #16
   202e8:	f04f 0c03 	mov.w	ip, #3
   202ec:	3208      	adds	r2, #8
   202ee:	021c      	lsls	r4, r3, #8
   202f0:	4608      	mov	r0, r1
   202f2:	0e1b      	lsrs	r3, r3, #24
   202f4:	a901      	add	r1, sp, #4
   202f6:	9401      	str	r4, [sp, #4]
   202f8:	9202      	str	r2, [sp, #8]
   202fa:	f88d c00c 	strb.w	ip, [sp, #12]
   202fe:	f88d 300d 	strb.w	r3, [sp, #13]
   20302:	f7ff fe97 	bl	20034 <__gnu_unwind_execute>
   20306:	b004      	add	sp, #16
   20308:	bd10      	pop	{r4, pc}
   2030a:	bf00      	nop

0002030c <_Unwind_GetRegionStart>:
   2030c:	b508      	push	{r3, lr}
   2030e:	f7ff fe8f 	bl	20030 <unwind_UCB_from_context>
   20312:	6c80      	ldr	r0, [r0, #72]	; 0x48
   20314:	bd08      	pop	{r3, pc}
   20316:	bf00      	nop

00020318 <_Unwind_GetLanguageSpecificData>:
   20318:	b508      	push	{r3, lr}
   2031a:	f7ff fe89 	bl	20030 <unwind_UCB_from_context>
   2031e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   20320:	79c3      	ldrb	r3, [r0, #7]
   20322:	3302      	adds	r3, #2
   20324:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   20328:	bd08      	pop	{r3, pc}
   2032a:	bf00      	nop

0002032c <__aeabi_d2uiz>:
   2032c:	004a      	lsls	r2, r1, #1
   2032e:	d211      	bcs.n	20354 <__aeabi_d2uiz+0x28>
   20330:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   20334:	d211      	bcs.n	2035a <__aeabi_d2uiz+0x2e>
   20336:	d50d      	bpl.n	20354 <__aeabi_d2uiz+0x28>
   20338:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   2033c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   20340:	d40e      	bmi.n	20360 <__aeabi_d2uiz+0x34>
   20342:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   20346:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   2034a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   2034e:	fa23 f002 	lsr.w	r0, r3, r2
   20352:	4770      	bx	lr
   20354:	f04f 0000 	mov.w	r0, #0
   20358:	4770      	bx	lr
   2035a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   2035e:	d102      	bne.n	20366 <__aeabi_d2uiz+0x3a>
   20360:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20364:	4770      	bx	lr
   20366:	f04f 0000 	mov.w	r0, #0
   2036a:	4770      	bx	lr

0002036c <pvTasklessPortMalloc>:
    if (enableSuspendResume)
        vTaskSuspendAll();
    {
        /* If this is the first call to malloc then the heap will require
        initialisation to setup the list of free blocks. */
        if (pxEnd == NULL) {
   2036c:	4b4a      	ldr	r3, [pc, #296]	; (20498 <pvTasklessPortMalloc+0x12c>)
pvPortMalloc(size_t xWantedSize) {
    return prvPortMalloc(xWantedSize, 1);
}

void *
pvTasklessPortMalloc(size_t xWantedSize) {
   2036e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        if (pxEnd == NULL) {
   20372:	681c      	ldr	r4, [r3, #0]
   20374:	2c00      	cmp	r4, #0
   20376:	d053      	beq.n	20420 <pvTasklessPortMalloc+0xb4>
        if ((xWantedSize & xBlockAllocatedBit) == 0) {
   20378:	4b48      	ldr	r3, [pc, #288]	; (2049c <pvTasklessPortMalloc+0x130>)
   2037a:	681e      	ldr	r6, [r3, #0]
   2037c:	4230      	tst	r0, r6
   2037e:	d173      	bne.n	20468 <pvTasklessPortMalloc+0xfc>
            if (xWantedSize > 0) {
   20380:	2800      	cmp	r0, #0
   20382:	d071      	beq.n	20468 <pvTasklessPortMalloc+0xfc>
                xWantedSize += xHeapStructSize;
   20384:	f100 0508 	add.w	r5, r0, #8
                if ((xWantedSize & portBYTE_ALIGNMENT_MASK) != 0x00) {
   20388:	0743      	lsls	r3, r0, #29
                    xWantedSize += (portBYTE_ALIGNMENT - (xWantedSize & portBYTE_ALIGNMENT_MASK));
   2038a:	bf1c      	itt	ne
   2038c:	f025 0507 	bicne.w	r5, r5, #7
   20390:	3508      	addne	r5, #8
            if ((xWantedSize > 0) && (xWantedSize <= xFreeBytesRemaining)) {
   20392:	2d00      	cmp	r5, #0
   20394:	d068      	beq.n	20468 <pvTasklessPortMalloc+0xfc>
   20396:	f8df e114 	ldr.w	lr, [pc, #276]	; 204ac <pvTasklessPortMalloc+0x140>
   2039a:	f8de 7000 	ldr.w	r7, [lr]
   2039e:	42bd      	cmp	r5, r7
   203a0:	d862      	bhi.n	20468 <pvTasklessPortMalloc+0xfc>
                pxBlock = xStart.pxNextFreeBlock;
   203a2:	493f      	ldr	r1, [pc, #252]	; (204a0 <pvTasklessPortMalloc+0x134>)
   203a4:	680b      	ldr	r3, [r1, #0]
                pxPreviousBlock = &xStart;
   203a6:	468c      	mov	ip, r1
                while ((pxBlock->xBlockSize < xWantedSize) && (pxBlock->pxNextFreeBlock != NULL)) {
   203a8:	e003      	b.n	203b2 <pvTasklessPortMalloc+0x46>
   203aa:	6819      	ldr	r1, [r3, #0]
   203ac:	b121      	cbz	r1, 203b8 <pvTasklessPortMalloc+0x4c>
   203ae:	469c      	mov	ip, r3
   203b0:	460b      	mov	r3, r1
   203b2:	685a      	ldr	r2, [r3, #4]
   203b4:	4295      	cmp	r5, r2
   203b6:	d8f8      	bhi.n	203aa <pvTasklessPortMalloc+0x3e>
                if (pxBlock != pxEnd) {
   203b8:	42a3      	cmp	r3, r4
   203ba:	d055      	beq.n	20468 <pvTasklessPortMalloc+0xfc>
                    pvReturn =
   203bc:	4618      	mov	r0, r3
                    if ((pxBlock->xBlockSize - xWantedSize) > heapMINIMUM_BLOCK_SIZE) {
   203be:	1b51      	subs	r1, r2, r5
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   203c0:	f850 8b08 	ldr.w	r8, [r0], #8
   203c4:	f8cc 8000 	str.w	r8, [ip]
                    if ((pxBlock->xBlockSize - xWantedSize) > heapMINIMUM_BLOCK_SIZE) {
   203c8:	2910      	cmp	r1, #16
   203ca:	d91c      	bls.n	20406 <pvTasklessPortMalloc+0x9a>
                        pxNewBlockLink = (void *)(((uint8_t *)pxBlock) + xWantedSize);
   203cc:	195a      	adds	r2, r3, r5
                        configASSERT((((size_t)pxNewBlockLink) & portBYTE_ALIGNMENT_MASK) == 0);
   203ce:	f012 0f07 	tst.w	r2, #7
   203d2:	d000      	beq.n	203d6 <pvTasklessPortMalloc+0x6a>
   203d4:	e7fe      	b.n	203d4 <pvTasklessPortMalloc+0x68>
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   203d6:	6051      	str	r1, [r2, #4]
    BlockLink_t *pxIterator;
    uint8_t *puc;

    /* Iterate through the list until a block is found that has a higher address
    than the block being inserted. */
    for (pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert;
   203d8:	4931      	ldr	r1, [pc, #196]	; (204a0 <pvTasklessPortMalloc+0x134>)
                        pxBlock->xBlockSize = xWantedSize;
   203da:	605d      	str	r5, [r3, #4]
    for (pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert;
   203dc:	460d      	mov	r5, r1
   203de:	6809      	ldr	r1, [r1, #0]
   203e0:	428a      	cmp	r2, r1
   203e2:	d8fb      	bhi.n	203dc <pvTasklessPortMalloc+0x70>
    }

    /* Do the block being inserted, and the block it is being inserted after
    make a contiguous block of memory? */
    puc = (uint8_t *)pxIterator;
    if ((puc + pxIterator->xBlockSize) == (uint8_t *)pxBlockToInsert) {
   203e4:	f8d5 c004 	ldr.w	ip, [r5, #4]
   203e8:	eb05 080c 	add.w	r8, r5, ip
   203ec:	4542      	cmp	r2, r8
   203ee:	d045      	beq.n	2047c <pvTasklessPortMalloc+0x110>
    }

    /* Do the block being inserted, and the block it is being inserted before
    make a contiguous block of memory? */
    puc = (uint8_t *)pxBlockToInsert;
    if ((puc + pxBlockToInsert->xBlockSize) == (uint8_t *)pxIterator->pxNextFreeBlock) {
   203f0:	f8d2 c004 	ldr.w	ip, [r2, #4]
   203f4:	eb02 080c 	add.w	r8, r2, ip
   203f8:	4541      	cmp	r1, r8
   203fa:	d045      	beq.n	20488 <pvTasklessPortMalloc+0x11c>
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
        } else {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
        }
    } else {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
   203fc:	6011      	str	r1, [r2, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
    before and the block after, then it's pxNextFreeBlock pointer will have
    already been set, and should not be set here as that would make it point
    to itself. */
    if (pxIterator != pxBlockToInsert) {
   203fe:	4295      	cmp	r5, r2
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
   20400:	bf18      	it	ne
   20402:	602a      	strne	r2, [r5, #0]
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
   20404:	685a      	ldr	r2, [r3, #4]
                    if (xFreeBytesRemaining < xMinimumEverFreeBytesRemaining) {
   20406:	4927      	ldr	r1, [pc, #156]	; (204a4 <pvTasklessPortMalloc+0x138>)
   20408:	680c      	ldr	r4, [r1, #0]
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
   2040a:	1abf      	subs	r7, r7, r2
                    if (xFreeBytesRemaining < xMinimumEverFreeBytesRemaining) {
   2040c:	42a7      	cmp	r7, r4
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
   2040e:	f8ce 7000 	str.w	r7, [lr]
                    if (xFreeBytesRemaining < xMinimumEverFreeBytesRemaining) {
   20412:	d331      	bcc.n	20478 <pvTasklessPortMalloc+0x10c>
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
   20414:	4332      	orrs	r2, r6
   20416:	605a      	str	r2, [r3, #4]
    configASSERT((((size_t)pvReturn) & (size_t)portBYTE_ALIGNMENT_MASK) == 0);
   20418:	f010 0207 	ands.w	r2, r0, #7
   2041c:	d029      	beq.n	20472 <pvTasklessPortMalloc+0x106>
   2041e:	e7fe      	b.n	2041e <pvTasklessPortMalloc+0xb2>
    uxAddress = (size_t)ucHeap;
   20420:	4921      	ldr	r1, [pc, #132]	; (204a8 <pvTasklessPortMalloc+0x13c>)
    xBlockAllocatedBit = ((size_t)1) << ((sizeof(size_t) * heapBITS_PER_BYTE) - 1);
   20422:	4e1e      	ldr	r6, [pc, #120]	; (2049c <pvTasklessPortMalloc+0x130>)
    if ((uxAddress & portBYTE_ALIGNMENT_MASK) != 0) {
   20424:	074a      	lsls	r2, r1, #29
        uxAddress += (portBYTE_ALIGNMENT - 1);
   20426:	bf14      	ite	ne
   20428:	1dca      	addne	r2, r1, #7
    uxAddress = ((size_t)pucAlignedHeap) + xTotalHeapSize;
   2042a:	460a      	moveq	r2, r1
        uxAddress &= ~((size_t)portBYTE_ALIGNMENT_MASK);
   2042c:	f501 4140 	add.w	r1, r1, #49152	; 0xc000
    uxAddress -= xHeapStructSize;
   20430:	f1a1 0408 	sub.w	r4, r1, #8
        uxAddress &= ~((size_t)portBYTE_ALIGNMENT_MASK);
   20434:	bf18      	it	ne
   20436:	f022 0207 	bicne.w	r2, r2, #7
    uxAddress &= ~((size_t)portBYTE_ALIGNMENT_MASK);
   2043a:	f024 0407 	bic.w	r4, r4, #7
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
   2043e:	4919      	ldr	r1, [pc, #100]	; (204a4 <pvTasklessPortMalloc+0x138>)
    pxEnd = (void *)uxAddress;
   20440:	601c      	str	r4, [r3, #0]
    pucAlignedHeap = (uint8_t *)uxAddress;
   20442:	4615      	mov	r5, r2
    pxFirstFreeBlock->xBlockSize = uxAddress - (size_t)pxFirstFreeBlock;
   20444:	1aa3      	subs	r3, r4, r2
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
   20446:	4a19      	ldr	r2, [pc, #100]	; (204ac <pvTasklessPortMalloc+0x140>)
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
   20448:	600b      	str	r3, [r1, #0]
    xStart.pxNextFreeBlock = (void *)pucAlignedHeap;
   2044a:	4915      	ldr	r1, [pc, #84]	; (204a0 <pvTasklessPortMalloc+0x134>)
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
   2044c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = (size_t)0;
   2044e:	2200      	movs	r2, #0
   20450:	604a      	str	r2, [r1, #4]
    xStart.pxNextFreeBlock = (void *)pucAlignedHeap;
   20452:	600d      	str	r5, [r1, #0]
    pxEnd->pxNextFreeBlock = NULL;
   20454:	e9c4 2200 	strd	r2, r2, [r4]
    xBlockAllocatedBit = ((size_t)1) << ((sizeof(size_t) * heapBITS_PER_BYTE) - 1);
   20458:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   2045c:	6032      	str	r2, [r6, #0]
}
   2045e:	4616      	mov	r6, r2
        if ((xWantedSize & xBlockAllocatedBit) == 0) {
   20460:	4230      	tst	r0, r6
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   20462:	e9c5 4300 	strd	r4, r3, [r5]
        if ((xWantedSize & xBlockAllocatedBit) == 0) {
   20466:	d08b      	beq.n	20380 <pvTasklessPortMalloc+0x14>
            vApplicationMallocFailedHook();
   20468:	f00f f84c 	bl	2f504 <vApplicationMallocFailedHook>
   2046c:	2000      	movs	r0, #0
}
   2046e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    pxBlock->pxNextFreeBlock = NULL;
   20472:	601a      	str	r2, [r3, #0]
}
   20474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
   20478:	600f      	str	r7, [r1, #0]
   2047a:	e7cb      	b.n	20414 <pvTasklessPortMalloc+0xa8>
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   2047c:	6852      	ldr	r2, [r2, #4]
   2047e:	4494      	add	ip, r2
   20480:	f8c5 c004 	str.w	ip, [r5, #4]
        pxBlockToInsert = pxIterator;
   20484:	462a      	mov	r2, r5
   20486:	e7b5      	b.n	203f4 <pvTasklessPortMalloc+0x88>
        if (pxIterator->pxNextFreeBlock != pxEnd) {
   20488:	42a1      	cmp	r1, r4
   2048a:	d0b7      	beq.n	203fc <pvTasklessPortMalloc+0x90>
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   2048c:	684c      	ldr	r4, [r1, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   2048e:	6809      	ldr	r1, [r1, #0]
   20490:	6011      	str	r1, [r2, #0]
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   20492:	4464      	add	r4, ip
   20494:	6054      	str	r4, [r2, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   20496:	e7b2      	b.n	203fe <pvTasklessPortMalloc+0x92>
   20498:	10004b00 	.word	0x10004b00
   2049c:	10010b04 	.word	0x10010b04
   204a0:	10010b10 	.word	0x10010b10
   204a4:	10010b0c 	.word	0x10010b0c
   204a8:	10004b04 	.word	0x10004b04
   204ac:	10010b08 	.word	0x10010b08

000204b0 <vTasklessPortFree>:
    if (pv != NULL) {
   204b0:	b150      	cbz	r0, 204c8 <vTasklessPortFree+0x18>
        configASSERT((pxLink->xBlockSize & xBlockAllocatedBit) != 0);
   204b2:	4a1c      	ldr	r2, [pc, #112]	; (20524 <vTasklessPortFree+0x74>)
   204b4:	f850 3c04 	ldr.w	r3, [r0, #-4]
   204b8:	6811      	ldr	r1, [r2, #0]
   204ba:	420b      	tst	r3, r1
   204bc:	d100      	bne.n	204c0 <vTasklessPortFree+0x10>
   204be:	e7fe      	b.n	204be <vTasklessPortFree+0xe>
        configASSERT(pxLink->pxNextFreeBlock == NULL);
   204c0:	f850 2c08 	ldr.w	r2, [r0, #-8]
   204c4:	b10a      	cbz	r2, 204ca <vTasklessPortFree+0x1a>
   204c6:	e7fe      	b.n	204c6 <vTasklessPortFree+0x16>
   204c8:	4770      	bx	lr
vTasklessPortFree(void *pv) {
   204ca:	b530      	push	{r4, r5, lr}
                    xFreeBytesRemaining += pxLink->xBlockSize;
   204cc:	4c16      	ldr	r4, [pc, #88]	; (20528 <vTasklessPortFree+0x78>)
   204ce:	6822      	ldr	r2, [r4, #0]
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
   204d0:	ea23 0101 	bic.w	r1, r3, r1
                    xFreeBytesRemaining += pxLink->xBlockSize;
   204d4:	1855      	adds	r5, r2, r1
    for (pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert;
   204d6:	4b15      	ldr	r3, [pc, #84]	; (2052c <vTasklessPortFree+0x7c>)
                    xFreeBytesRemaining += pxLink->xBlockSize;
   204d8:	6025      	str	r5, [r4, #0]
        puc -= xHeapStructSize;
   204da:	f1a0 0208 	sub.w	r2, r0, #8
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
   204de:	f840 1c04 	str.w	r1, [r0, #-4]
    for (pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert;
   204e2:	4618      	mov	r0, r3
   204e4:	681b      	ldr	r3, [r3, #0]
   204e6:	429a      	cmp	r2, r3
   204e8:	d8fb      	bhi.n	204e2 <vTasklessPortFree+0x32>
    if ((puc + pxIterator->xBlockSize) == (uint8_t *)pxBlockToInsert) {
   204ea:	6844      	ldr	r4, [r0, #4]
   204ec:	eb00 0e04 	add.w	lr, r0, r4
   204f0:	4572      	cmp	r2, lr
   204f2:	d008      	beq.n	20506 <vTasklessPortFree+0x56>
    if ((puc + pxBlockToInsert->xBlockSize) == (uint8_t *)pxIterator->pxNextFreeBlock) {
   204f4:	eb02 0c01 	add.w	ip, r2, r1
   204f8:	4563      	cmp	r3, ip
   204fa:	d008      	beq.n	2050e <vTasklessPortFree+0x5e>
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
   204fc:	6013      	str	r3, [r2, #0]
    if (pxIterator != pxBlockToInsert) {
   204fe:	4290      	cmp	r0, r2
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
   20500:	bf18      	it	ne
   20502:	6002      	strne	r2, [r0, #0]
}
   20504:	bd30      	pop	{r4, r5, pc}
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   20506:	4421      	add	r1, r4
   20508:	6041      	str	r1, [r0, #4]
        pxBlockToInsert = pxIterator;
   2050a:	4602      	mov	r2, r0
   2050c:	e7f2      	b.n	204f4 <vTasklessPortFree+0x44>
        if (pxIterator->pxNextFreeBlock != pxEnd) {
   2050e:	4c08      	ldr	r4, [pc, #32]	; (20530 <vTasklessPortFree+0x80>)
   20510:	6824      	ldr	r4, [r4, #0]
   20512:	42a3      	cmp	r3, r4
   20514:	d0f2      	beq.n	204fc <vTasklessPortFree+0x4c>
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   20516:	e9d3 3400 	ldrd	r3, r4, [r3]
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   2051a:	4421      	add	r1, r4
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   2051c:	6013      	str	r3, [r2, #0]
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   2051e:	6051      	str	r1, [r2, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   20520:	e7ed      	b.n	204fe <vTasklessPortFree+0x4e>
   20522:	bf00      	nop
   20524:	10010b04 	.word	0x10010b04
   20528:	10010b08 	.word	0x10010b08
   2052c:	10010b10 	.word	0x10010b10
   20530:	10004b00 	.word	0x10004b00

00020534 <ns_core_check_api>:
 * param oldest
 * param newest
 * return uint32_t
 */
extern uint32_t ns_core_check_api(
    const ns_core_api_t *submitted, const ns_core_api_t *oldest, const ns_core_api_t *newest) {
   20534:	b510      	push	{r4, lr}

    if (submitted->apiId != newest->apiId) {
   20536:	6813      	ldr	r3, [r2, #0]
   20538:	6804      	ldr	r4, [r0, #0]
   2053a:	429c      	cmp	r4, r3
   2053c:	d123      	bne.n	20586 <ns_core_check_api+0x52>
    uint64_t cMinor = (uint64_t)c->minor;
   2053e:	88c3      	ldrh	r3, [r0, #6]
    uint64_t c64 = (cMajor << 32) + (cMinor << 16) + c->revision;
   20540:	f8b0 c008 	ldrh.w	ip, [r0, #8]
   20544:	f8b0 e004 	ldrh.w	lr, [r0, #4]
    uint64_t n64 = (nMajor << 32) + (nMinor << 16) + n->revision;
   20548:	890c      	ldrh	r4, [r1, #8]
    uint64_t c64 = (cMajor << 32) + (cMinor << 16) + c->revision;
   2054a:	041b      	lsls	r3, r3, #16
   2054c:	eb13 0c0c 	adds.w	ip, r3, ip
    uint64_t nMinor = (uint64_t)n->minor;
   20550:	88cb      	ldrh	r3, [r1, #6]
    uint64_t n64 = (nMajor << 32) + (nMinor << 16) + n->revision;
   20552:	8889      	ldrh	r1, [r1, #4]
   20554:	ea4f 4303 	mov.w	r3, r3, lsl #16
    uint64_t c64 = (cMajor << 32) + (cMinor << 16) + c->revision;
   20558:	f14e 0e00 	adc.w	lr, lr, #0
    uint64_t n64 = (nMajor << 32) + (nMinor << 16) + n->revision;
   2055c:	191b      	adds	r3, r3, r4
   2055e:	f141 0100 	adc.w	r1, r1, #0
    } else if (c64 < n64) {
   20562:	459c      	cmp	ip, r3
   20564:	eb7e 0301 	sbcs.w	r3, lr, r1
    uint64_t c64 = (cMajor << 32) + (cMinor << 16) + c->revision;
   20568:	f04f 0000 	mov.w	r0, #0
    } else if (c64 < n64) {
   2056c:	d30b      	bcc.n	20586 <ns_core_check_api+0x52>
    uint64_t nMinor = (uint64_t)n->minor;
   2056e:	88d3      	ldrh	r3, [r2, #6]
    uint64_t n64 = (nMajor << 32) + (nMinor << 16) + n->revision;
   20570:	8911      	ldrh	r1, [r2, #8]
   20572:	8892      	ldrh	r2, [r2, #4]
   20574:	041b      	lsls	r3, r3, #16
   20576:	185b      	adds	r3, r3, r1
   20578:	f142 0200 	adc.w	r2, r2, #0
    } else if (c64 < n64) {
   2057c:	4563      	cmp	r3, ip
   2057e:	eb72 030e 	sbcs.w	r3, r2, lr
   20582:	d300      	bcc.n	20586 <ns_core_check_api+0x52>
        // submitted version is higher than newest supported version
        return NS_STATUS_INVALID_VERSION;
    }

    return NS_STATUS_SUCCESS;
}
   20584:	bd10      	pop	{r4, pc}
        return NS_STATUS_INVALID_VERSION;
   20586:	2002      	movs	r0, #2
}
   20588:	bd10      	pop	{r4, pc}
   2058a:	bf00      	nop

0002058c <ns_core_init>:
uint32_t ns_core_init(ns_core_config_t *cfg) {
#ifndef NS_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if (cfg == NULL) {
   2058c:	b358      	cbz	r0, 205e6 <ns_core_init+0x5a>
        return NS_STATUS_INVALID_HANDLE;
    }

    // check API version
    if (ns_core_check_api(cfg->api, &ns_core_oldest_supported_version, &ns_core_current_version)) {
   2058e:	6802      	ldr	r2, [r0, #0]
    if (submitted->apiId != newest->apiId) {
   20590:	6813      	ldr	r3, [r2, #0]
   20592:	f5b3 0f4a 	cmp.w	r3, #13238272	; 0xca0000
   20596:	d124      	bne.n	205e2 <ns_core_init+0x56>
    uint64_t cMinor = (uint64_t)c->minor;
   20598:	88d3      	ldrh	r3, [r2, #6]
    uint64_t c64 = (cMajor << 32) + (cMinor << 16) + c->revision;
   2059a:	8910      	ldrh	r0, [r2, #8]
   2059c:	8891      	ldrh	r1, [r2, #4]
   2059e:	041b      	lsls	r3, r3, #16
   205a0:	181b      	adds	r3, r3, r0
   205a2:	f141 0100 	adc.w	r1, r1, #0
    if (c64 == n64) {
   205a6:	1e58      	subs	r0, r3, #1
uint32_t ns_core_init(ns_core_config_t *cfg) {
   205a8:	b410      	push	{r4}
    if (c64 == n64) {
   205aa:	ea50 0401 	orrs.w	r4, r0, r1
    uint64_t c64 = (cMajor << 32) + (cMinor << 16) + c->revision;
   205ae:	f04f 0c00 	mov.w	ip, #0
    if (c64 == n64) {
   205b2:	d00b      	beq.n	205cc <ns_core_init+0x40>
    } else if (c64 < n64) {
   205b4:	3b01      	subs	r3, #1
   205b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   205ba:	4159      	adcs	r1, r3
   205bc:	4283      	cmp	r3, r0
   205be:	eb7c 0301 	sbcs.w	r3, ip, r1
   205c2:	d203      	bcs.n	205cc <ns_core_init+0x40>
        return NS_STATUS_INVALID_VERSION;
   205c4:	2002      	movs	r0, #2
    g_ns_state.tempcoWantsToBeEnabled = false;
    g_ns_state.tempcoCurrentlyEnabled = false;
    g_ns_state.cryptoWantsToBeEnabled = true; // reset state of Crypto is 'on'
    g_ns_state.cryptoCurrentlyEnabled = true;
    return NS_STATUS_SUCCESS;
}
   205c6:	f85d 4b04 	ldr.w	r4, [sp], #4
   205ca:	4770      	bx	lr
    g_ns_state.api = cfg->api;
   205cc:	4b07      	ldr	r3, [pc, #28]	; (205ec <ns_core_init+0x60>)
    g_ns_state.initialized = true;
   205ce:	4908      	ldr	r1, [pc, #32]	; (205f0 <ns_core_init+0x64>)
    g_ns_state.api = cfg->api;
   205d0:	601a      	str	r2, [r3, #0]
    g_ns_state.uartPrintCurrentlyEnabled = false;
   205d2:	2000      	movs	r0, #0
    g_ns_state.initialized = true;
   205d4:	2401      	movs	r4, #1
   205d6:	e9c3 4101 	strd	r4, r1, [r3, #4]
}
   205da:	f85d 4b04 	ldr.w	r4, [sp], #4
    g_ns_state.uartPrintCurrentlyEnabled = false;
   205de:	7318      	strb	r0, [r3, #12]
}
   205e0:	4770      	bx	lr
        return NS_STATUS_INVALID_VERSION;
   205e2:	2002      	movs	r0, #2
}
   205e4:	4770      	bx	lr
        return NS_STATUS_INVALID_HANDLE;
   205e6:	2001      	movs	r0, #1
   205e8:	4770      	bx	lr
   205ea:	bf00      	nop
   205ec:	10010b18 	.word	0x10010b18
   205f0:	00010100 	.word	0x00010100

000205f4 <ns_core_fail_loop>:

void ns_core_fail_loop() {
    while (1)
   205f4:	e7fe      	b.n	205f4 <ns_core_fail_loop>
   205f6:	bf00      	nop

000205f8 <NMI_Handler>:
void
NMI_Handler(void) {
    //
    // Go into an infinite loop.
    //
    while (1) {
   205f8:	e7fe      	b.n	205f8 <NMI_Handler>
   205fa:	bf00      	nop

000205fc <BusFault_Handler>:
void
HardFault_Handler(void) {
    //
    // Go into an infinite loop.
    //
    while (1) {
   205fc:	e7fe      	b.n	205fc <BusFault_Handler>
   205fe:	bf00      	nop

00020600 <DebugMon_Handler>:
void
am_default_isr(void) {
    //
    // Go into an infinite loop.
    //
    while (1) {
   20600:	e7fe      	b.n	20600 <DebugMon_Handler>
   20602:	bf00      	nop

00020604 <Reset_Handler>:
    __asm("    ldr    r0, =0xE000ED08\n"
   20604:	4811      	ldr	r0, [pc, #68]	; (2064c <zero_loop+0x12>)
   20606:	4912      	ldr	r1, [pc, #72]	; (20650 <zero_loop+0x16>)
   20608:	6001      	str	r1, [r0, #0]
    __asm("    ldr    sp, [r1]");
   2060a:	f8d1 d000 	ldr.w	sp, [r1]
    __asm("ldr  r0, =0xE000ED88\n"
   2060e:	4811      	ldr	r0, [pc, #68]	; (20654 <zero_loop+0x1a>)
   20610:	6801      	ldr	r1, [r0, #0]
   20612:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   20616:	6001      	str	r1, [r0, #0]
   20618:	f3bf 8f4f 	dsb	sy
   2061c:	f3bf 8f6f 	isb	sy
    __asm("    ldr     r0, =_init_data\n"
   20620:	480d      	ldr	r0, [pc, #52]	; (20658 <zero_loop+0x1e>)
   20622:	490e      	ldr	r1, [pc, #56]	; (2065c <zero_loop+0x22>)
   20624:	4a0e      	ldr	r2, [pc, #56]	; (20660 <zero_loop+0x26>)

00020626 <copy_loop>:
   20626:	f850 3b04 	ldr.w	r3, [r0], #4
   2062a:	f841 3b04 	str.w	r3, [r1], #4
   2062e:	4291      	cmp	r1, r2
   20630:	dbf9      	blt.n	20626 <copy_loop>
    __asm("    ldr     r0, =_sbss\n"
   20632:	480c      	ldr	r0, [pc, #48]	; (20664 <zero_loop+0x2a>)
   20634:	490c      	ldr	r1, [pc, #48]	; (20668 <zero_loop+0x2e>)
   20636:	f04f 0200 	mov.w	r2, #0

0002063a <zero_loop>:
   2063a:	4288      	cmp	r0, r1
   2063c:	bfb8      	it	lt
   2063e:	f840 2b04 	strlt.w	r2, [r0], #4
   20642:	dbfa      	blt.n	2063a <zero_loop>
    main();
   20644:	f002 fd80 	bl	23148 <main>
    __asm("    bkpt     ");
   20648:	be00      	bkpt	0x0000
}
   2064a:	0000      	.short	0x0000
   2064c:	e000ed08 	.word	0xe000ed08
   20650:	00018000 	.word	0x00018000
   20654:	e000ed88 	.word	0xe000ed88
   20658:	00044654 	.word	0x00044654
   2065c:	10004000 	.word	0x10004000
   20660:	10004b00 	.word	0x10004b00
   20664:	10004b00 	.word	0x10004b00
   20668:	1001a95c 	.word	0x1001a95c

0002066c <_ZN2ei5numpy19dequantize_zero_oneEh>:
    /**
     * Dequantize a float value between zero and one
     * @param value
     */
    static float dequantize_zero_one(uint8_t value) {
        return quantized_values_one_zero[value];
   2066c:	4b02      	ldr	r3, [pc, #8]	; (20678 <_ZN2ei5numpy19dequantize_zero_oneEh+0xc>)
   2066e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    }
   20672:	ed90 0a00 	vldr	s0, [r0]
   20676:	4770      	bx	lr
   20678:	00040218 	.word	0x00040218

0002067c <_ZNSt17_Function_handlerIFijjPfEPS1_E9_M_invokeERKSt9_Any_dataOjS7_OS0_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   2067c:	b410      	push	{r4}
   2067e:	468c      	mov	ip, r1
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   20680:	6804      	ldr	r4, [r0, #0]
   20682:	f8dc 0000 	ldr.w	r0, [ip]
   20686:	4611      	mov	r1, r2
   20688:	681a      	ldr	r2, [r3, #0]
   2068a:	6809      	ldr	r1, [r1, #0]
   2068c:	4623      	mov	r3, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   2068e:	f85d 4b04 	ldr.w	r4, [sp], #4
   20692:	4718      	bx	r3

00020694 <__tcf_3>:
#endif
        }
    }

    ~ei_matrix() {
        if (buffer && buffer_managed_by_me) {
   20694:	4b03      	ldr	r3, [pc, #12]	; (206a4 <__tcf_3+0x10>)
   20696:	6818      	ldr	r0, [r3, #0]
   20698:	b108      	cbz	r0, 2069e <__tcf_3+0xa>
   2069a:	7b1b      	ldrb	r3, [r3, #12]
   2069c:	b903      	cbnz	r3, 206a0 <__tcf_3+0xc>
                                            ei_impulse_result_t *result,
                                            bool debug,
                                            bool enable_maf)
{

    static ei::matrix_t static_features_matrix(1, impulse->nn_input_frame_size);
   2069e:	4770      	bx	lr
            ei_free(buffer);
   206a0:	f005 bd30 	b.w	26104 <_Z7ei_freePv>
   206a4:	1001886c 	.word	0x1001886c

000206a8 <_ZNSt17_Function_handlerIFijjPfEZN2ei5numpy18signal_from_bufferEPKfjPNS2_11ei_signal_tEEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjSD_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   206a8:	b510      	push	{r4, lr}
        return EIDSP_OK;
    }

    static int signal_get_data(const float *in_buffer, size_t offset, size_t length, float *out_ptr)
    {
        memcpy(out_ptr, in_buffer + offset, length * sizeof(float));
   206aa:	6812      	ldr	r2, [r2, #0]
   206ac:	680c      	ldr	r4, [r1, #0]
   206ae:	6801      	ldr	r1, [r0, #0]
   206b0:	6818      	ldr	r0, [r3, #0]
   206b2:	0092      	lsls	r2, r2, #2
   206b4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   206b8:	f7f7 fda2 	bl	18200 <memcpy>
      }
   206bc:	2000      	movs	r0, #0
   206be:	bd10      	pop	{r4, pc}

000206c0 <__tcf_0>:
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   206c0:	4b03      	ldr	r3, [pc, #12]	; (206d0 <__tcf_0+0x10>)
   206c2:	6818      	ldr	r0, [r3, #0]
	if (__p)
   206c4:	b118      	cbz	r0, 206ce <__tcf_0+0xe>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   206c6:	6899      	ldr	r1, [r3, #8]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   206c8:	1a09      	subs	r1, r1, r0
   206ca:	f00f b921 	b.w	2f910 <_ZdlPvj>
    }
}

__attribute__((unused)) static void fill_result_struct_from_cubes(ei_impulse_result_t *result, std::vector<ei_classifier_cube_t*> *cubes, int out_width_factor, uint32_t object_detection_count) {
    std::vector<ei_classifier_cube_t*> bbs;
    static std::vector<ei_impulse_result_bounding_box_t> results;
   206ce:	4770      	bx	lr
   206d0:	1001887c 	.word	0x1001887c
   206d4:	00000000 	.word	0x00000000

000206d8 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi>:
    /**
     * Perform normalization for MFE frames, this converts the signal to dB,
     * then add a hard filter, and quantize / dequantize the output
     * @param features_matrix input feature matrix, will be modified in place
     */
    static int mfe_normalization(matrix_t *features_matrix, int noise_floor_db) {
   206d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        const float noise = static_cast<float>(noise_floor_db * -1);
   206dc:	4249      	negs	r1, r1
   206de:	ee07 1a90 	vmov	s15, r1
    static int mfe_normalization(matrix_t *features_matrix, int noise_floor_db) {
   206e2:	ed2d 8b08 	vpush	{d8-d11}
        const float noise_scale = 1.0f / (static_cast<float>(noise_floor_db * -1) + 12.0f);

        for (size_t ix = 0; ix < features_matrix->rows * features_matrix->cols; ix++) {
   206e6:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
        const float noise = static_cast<float>(noise_floor_db * -1);
   206ea:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
        const float noise_scale = 1.0f / (static_cast<float>(noise_floor_db * -1) + 12.0f);
   206ee:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
   206f2:	ee78 7a27 	vadd.f32	s15, s16, s15
   206f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
        for (size_t ix = 0; ix < features_matrix->rows * features_matrix->cols; ix++) {
   206fa:	fb02 f303 	mul.w	r3, r2, r3
        const float noise_scale = 1.0f / (static_cast<float>(noise_floor_db * -1) + 12.0f);
   206fe:	eec7 8a27 	vdiv.f32	s17, s14, s15
    static int mfe_normalization(matrix_t *features_matrix, int noise_floor_db) {
   20702:	b082      	sub	sp, #8
        for (size_t ix = 0; ix < features_matrix->rows * features_matrix->cols; ix++) {
   20704:	2b00      	cmp	r3, #0
   20706:	d05b      	beq.n	207c0 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0xe8>
   20708:	6805      	ldr	r5, [r0, #0]
            float f = features_matrix->buffer[ix];
            if (f < 1e-30) {
   2070a:	a738      	add	r7, pc, #224	; (adr r7, 207ec <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x114>)
   2070c:	e9d7 6700 	ldrd	r6, r7, [r7]
   20710:	eb05 0883 	add.w	r8, r5, r3, lsl #2
   20714:	ed9f ba2e 	vldr	s22, [pc, #184]	; 207d0 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0xf8>
        y += -4.11852516267426f;
   20718:	eddf aa2e 	vldr	s21, [pc, #184]	; 207d4 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0xfc>
   2071c:	ed9f aa2e 	vldr	s20, [pc, #184]	; 207d8 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x100>
        y += 6.02197014179219f;
   20720:	eddf 9a2e 	vldr	s19, [pc, #184]	; 207dc <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x104>
        y += -3.13396450166353f;
   20724:	ed9f 9a2e 	vldr	s18, [pc, #184]	; 207e0 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x108>
   20728:	e036      	b.n	20798 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0xc0>
        float f = frexpf(fabsf(a), &e);
   2072a:	ee07 4a90 	vmov	s15, r4
   2072e:	eeb0 0ae7 	vabs.f32	s0, s15
   20732:	a801      	add	r0, sp, #4
   20734:	f008 f94c 	bl	289d0 <frexpf>
        y += -4.11852516267426f;
   20738:	eef0 5a4a 	vmov.f32	s11, s20
   2073c:	eee0 5a2a 	vfma.f32	s11, s0, s21
        y += 6.02197014179219f;
   20740:	eeb0 5a69 	vmov.f32	s10, s19
   20744:	eea0 5a25 	vfma.f32	s10, s0, s11
        y += -3.13396450166353f;
   20748:	eef0 5a49 	vmov.f32	s11, s18
   2074c:	eee0 5a05 	vfma.f32	s11, s0, s10
        y += e;
   20750:	eddd 7a01 	vldr	s15, [sp, #4]
        return numpy::log2(a) * 0.3010299956639812f;
   20754:	ed9f 7a23 	vldr	s14, [pc, #140]	; 207e4 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x10c>
        y += e;
   20758:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                f = 1e-30;
            }
            f = numpy::log10(f);
            f *= 10.0f; // scale by 10
            f += noise;
   2075c:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
   20760:	ee77 7aa5 	vadd.f32	s15, s15, s11
            f *= noise_scale;
            // clip again
            if (f < 0.0f) f = 0.0f;
            else if (f > 1.0f) f = 1.0f;
   20764:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
        return numpy::log2(a) * 0.3010299956639812f;
   20768:	ee67 7a87 	vmul.f32	s15, s15, s14
            f += noise;
   2076c:	eeb0 7a48 	vmov.f32	s14, s16
   20770:	eea7 7a86 	vfma.f32	s14, s15, s12
            f *= noise_scale;
   20774:	ee68 7a87 	vmul.f32	s15, s17, s14
            if (f < 0.0f) f = 0.0f;
   20778:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   2077c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   20780:	d418      	bmi.n	207b4 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0xdc>
            else if (f > 1.0f) f = 1.0f;
   20782:	eef4 7a66 	vcmp.f32	s15, s13
   20786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2078a:	bfc8      	it	gt
   2078c:	eef0 7a66 	vmovgt.f32	s15, s13
        for (size_t ix = 0; ix < features_matrix->rows * features_matrix->cols; ix++) {
   20790:	45a8      	cmp	r8, r5
            features_matrix->buffer[ix] = f;
   20792:	ed45 7a01 	vstr	s15, [r5, #-4]
        for (size_t ix = 0; ix < features_matrix->rows * features_matrix->cols; ix++) {
   20796:	d013      	beq.n	207c0 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0xe8>
            float f = features_matrix->buffer[ix];
   20798:	f855 4b04 	ldr.w	r4, [r5], #4
            if (f < 1e-30) {
   2079c:	4620      	mov	r0, r4
   2079e:	f7f8 f961 	bl	18a64 <__aeabi_f2d>
   207a2:	4632      	mov	r2, r6
   207a4:	463b      	mov	r3, r7
   207a6:	f7f8 fc27 	bl	18ff8 <__aeabi_dcmplt>
   207aa:	2800      	cmp	r0, #0
   207ac:	d0bd      	beq.n	2072a <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x52>
   207ae:	eeb0 0a4b 	vmov.f32	s0, s22
   207b2:	e7be      	b.n	20732 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x5a>
            if (f < 0.0f) f = 0.0f;
   207b4:	eddf 7a0c 	vldr	s15, [pc, #48]	; 207e8 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x110>
        for (size_t ix = 0; ix < features_matrix->rows * features_matrix->cols; ix++) {
   207b8:	45a8      	cmp	r8, r5
            features_matrix->buffer[ix] = f;
   207ba:	ed45 7a01 	vstr	s15, [r5, #-4]
        for (size_t ix = 0; ix < features_matrix->rows * features_matrix->cols; ix++) {
   207be:	d1eb      	bne.n	20798 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0xc0>
        }

        return EIDSP_OK;
    }
   207c0:	2000      	movs	r0, #0
   207c2:	b002      	add	sp, #8
   207c4:	ecbd 8b08 	vpop	{d8-d11}
   207c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   207cc:	f3af 8000 	nop.w
   207d0:	0da24260 	.word	0x0da24260
   207d4:	3f9da1a8 	.word	0x3f9da1a8
   207d8:	c083caf5 	.word	0xc083caf5
   207dc:	40c0b3fb 	.word	0x40c0b3fb
   207e0:	c04892e0 	.word	0xc04892e0
   207e4:	3e9a209b 	.word	0x3e9a209b
   207e8:	00000000 	.word	0x00000000
   207ec:	feebc2a0 	.word	0xfeebc2a0
   207f0:	39b4484b 	.word	0x39b4484b

000207f4 <_ZL15get_signal_datajjPf>:
    } // while
    return 0;
}

// Callback: fill a section of the out_ptr buffer when requested
static int get_signal_data(size_t offset, size_t length, float *out_ptr) {
   207f4:	b508      	push	{r3, lr}
    numpy::int16_to_float(&g_in16AudioDataBuffer[g_bufsel^1][offset], out_ptr, length);
   207f6:	4b09      	ldr	r3, [pc, #36]	; (2081c <_ZL15get_signal_datajjPf+0x28>)
   207f8:	781b      	ldrb	r3, [r3, #0]
   207fa:	f44f 6efa 	mov.w	lr, #2000	; 0x7d0
   207fe:	f083 0301 	eor.w	r3, r3, #1
   20802:	fb0e 0003 	mla	r0, lr, r3, r0
   20806:	4b06      	ldr	r3, [pc, #24]	; (20820 <_ZL15get_signal_datajjPf+0x2c>)
static int get_signal_data(size_t offset, size_t length, float *out_ptr) {
   20808:	468c      	mov	ip, r1
        arm_q15_to_float((q15_t *)input, output, length);
   2080a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
   2080e:	4611      	mov	r1, r2
   20810:	4662      	mov	r2, ip
   20812:	f012 fdfd 	bl	33410 <arm_q15_to_float>

    return EIDSP_OK;
}
   20816:	2000      	movs	r0, #0
   20818:	bd08      	pop	{r3, pc}
   2081a:	bf00      	nop
   2081c:	10018844 	.word	0x10018844
   20820:	10016904 	.word	0x10016904

00020824 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
__attribute__((unused)) void ei_aligned_free(void * ptr)
{
   20824:	b508      	push	{r3, lr}
	assert(ptr);
   20826:	b130      	cbz	r0, 20836 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x12>
	offset_t offset = *((offset_t *)ptr - 1);

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
   20828:	f830 3c02 	ldrh.w	r3, [r0, #-2]
	ei_free(p);
   2082c:	1ac0      	subs	r0, r0, r3
}
   2082e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ei_free(p);
   20832:	f005 bc67 	b.w	26104 <_Z7ei_freePv>
	assert(ptr);
   20836:	4b03      	ldr	r3, [pc, #12]	; (20844 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x20>)
   20838:	4a03      	ldr	r2, [pc, #12]	; (20848 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x24>)
   2083a:	4804      	ldr	r0, [pc, #16]	; (2084c <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x28>)
   2083c:	215f      	movs	r1, #95	; 0x5f
   2083e:	f00a fa75 	bl	2ad2c <__assert_func>
   20842:	bf00      	nop
   20844:	0003f648 	.word	0x0003f648
   20848:	0003f64c 	.word	0x0003f64c
   2084c:	0003f678 	.word	0x0003f678

00020850 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj>:
	assert((align & (align - 1)) == 0);
   20850:	1e43      	subs	r3, r0, #1
   20852:	4203      	tst	r3, r0
{
   20854:	b510      	push	{r4, lr}
	assert((align & (align - 1)) == 0);
   20856:	d114      	bne.n	20882 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x32>
	if(align && size)
   20858:	4604      	mov	r4, r0
   2085a:	b180      	cbz	r0, 2087e <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x2e>
   2085c:	b179      	cbz	r1, 2087e <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x2e>
		void * p = ei_calloc(size + hdr_size, 1);
   2085e:	1c48      	adds	r0, r1, #1
   20860:	4420      	add	r0, r4
   20862:	2101      	movs	r1, #1
   20864:	f005 fc3e 	bl	260e4 <_Z9ei_callocjj>
		if(p)
   20868:	4602      	mov	r2, r0
   2086a:	b140      	cbz	r0, 2087e <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x2e>
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
   2086c:	1c63      	adds	r3, r4, #1
   2086e:	4403      	add	r3, r0
   20870:	4264      	negs	r4, r4
   20872:	ea03 0004 	and.w	r0, r3, r4
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
   20876:	1a82      	subs	r2, r0, r2
   20878:	f820 2c02 	strh.w	r2, [r0, #-2]
}
   2087c:	bd10      	pop	{r4, pc}
	void * ptr = NULL;
   2087e:	2000      	movs	r0, #0
}
   20880:	bd10      	pop	{r4, pc}
	assert((align & (align - 1)) == 0);
   20882:	4b03      	ldr	r3, [pc, #12]	; (20890 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x40>)
   20884:	4a03      	ldr	r2, [pc, #12]	; (20894 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x44>)
   20886:	4804      	ldr	r0, [pc, #16]	; (20898 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x48>)
   20888:	213c      	movs	r1, #60	; 0x3c
   2088a:	f00a fa4f 	bl	2ad2c <__assert_func>
   2088e:	bf00      	nop
   20890:	0003f6b4 	.word	0x0003f6b4
   20894:	0003f6d0 	.word	0x0003f6d0
   20898:	0003f678 	.word	0x0003f678

0002089c <_Z20audio_frame_callbackP12ns_audio_cfgt>:

void audio_frame_callback(ns_audio_config_t *config, uint16_t bytesCollected) {
    if (g_audioRecording) {
   2089c:	4b0a      	ldr	r3, [pc, #40]	; (208c8 <_Z20audio_frame_callbackP12ns_audio_cfgt+0x2c>)
   2089e:	781b      	ldrb	r3, [r3, #0]
   208a0:	b903      	cbnz	r3, 208a4 <_Z20audio_frame_callbackP12ns_audio_cfgt+0x8>
   208a2:	4770      	bx	lr
void audio_frame_callback(ns_audio_config_t *config, uint16_t bytesCollected) {
   208a4:	b510      	push	{r4, lr}
        ns_audio_getPCM_v2(config, &(g_in16AudioDataBuffer[g_bufsel][0]));
   208a6:	4c09      	ldr	r4, [pc, #36]	; (208cc <_Z20audio_frame_callbackP12ns_audio_cfgt+0x30>)
   208a8:	4b09      	ldr	r3, [pc, #36]	; (208d0 <_Z20audio_frame_callbackP12ns_audio_cfgt+0x34>)
   208aa:	7822      	ldrb	r2, [r4, #0]
   208ac:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
   208b0:	fb01 3102 	mla	r1, r1, r2, r3
   208b4:	f00d fbce 	bl	2e054 <ns_audio_getPCM_v2>
        g_audioReady = true;
        g_bufsel ^=1; // pingpong
   208b8:	7823      	ldrb	r3, [r4, #0]
        g_audioReady = true;
   208ba:	4a06      	ldr	r2, [pc, #24]	; (208d4 <_Z20audio_frame_callbackP12ns_audio_cfgt+0x38>)
   208bc:	2101      	movs	r1, #1
        g_bufsel ^=1; // pingpong
   208be:	404b      	eors	r3, r1
        g_audioReady = true;
   208c0:	7011      	strb	r1, [r2, #0]
        g_bufsel ^=1; // pingpong
   208c2:	7023      	strb	r3, [r4, #0]
    }
   208c4:	bd10      	pop	{r4, pc}
   208c6:	bf00      	nop
   208c8:	10012a74 	.word	0x10012a74
   208cc:	10018844 	.word	0x10018844
   208d0:	10016904 	.word	0x10016904
   208d4:	10010b30 	.word	0x10010b30

000208d8 <_ZNSt17_Function_handlerIFijjPfEZN2ei5numpy18signal_from_bufferEPKfjPNS2_11ei_signal_tEEUljjS0_E_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   208d8:	b13a      	cbz	r2, 208ea <_ZNSt17_Function_handlerIFijjPfEZN2ei5numpy18signal_from_bufferEPKfjPNS2_11ei_signal_tEEUljjS0_E_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x12>
   208da:	2a01      	cmp	r2, #1
   208dc:	d009      	beq.n	208f2 <_ZNSt17_Function_handlerIFijjPfEZN2ei5numpy18signal_from_bufferEPKfjPNS2_11ei_signal_tEEUljjS0_E_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x1a>
	  switch (__op)
   208de:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   208e0:	bf04      	itt	eq
   208e2:	680b      	ldreq	r3, [r1, #0]
   208e4:	6003      	streq	r3, [r0, #0]
      }
   208e6:	2000      	movs	r0, #0
   208e8:	4770      	bx	lr
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
   208ea:	4b03      	ldr	r3, [pc, #12]	; (208f8 <_ZNSt17_Function_handlerIFijjPfEZN2ei5numpy18signal_from_bufferEPKfjPNS2_11ei_signal_tEEUljjS0_E_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x20>)
   208ec:	6003      	str	r3, [r0, #0]
      }
   208ee:	2000      	movs	r0, #0
   208f0:	4770      	bx	lr
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   208f2:	6001      	str	r1, [r0, #0]
      }
   208f4:	2000      	movs	r0, #0
   208f6:	4770      	bx	lr
   208f8:	0004018c 	.word	0x0004018c

000208fc <_ZNSt17_Function_handlerIFijjPfEZN15SignalWithRange10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	switch (__op)
   208fc:	b13a      	cbz	r2, 2090e <_ZNSt17_Function_handlerIFijjPfEZN15SignalWithRange10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x12>
   208fe:	2a01      	cmp	r2, #1
   20900:	d009      	beq.n	20916 <_ZNSt17_Function_handlerIFijjPfEZN15SignalWithRange10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x1a>
	  switch (__op)
   20902:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   20904:	bf04      	itt	eq
   20906:	680b      	ldreq	r3, [r1, #0]
   20908:	6003      	streq	r3, [r0, #0]
      }
   2090a:	2000      	movs	r0, #0
   2090c:	4770      	bx	lr
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
   2090e:	4b03      	ldr	r3, [pc, #12]	; (2091c <_ZNSt17_Function_handlerIFijjPfEZN15SignalWithRange10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x20>)
   20910:	6003      	str	r3, [r0, #0]
      }
   20912:	2000      	movs	r0, #0
   20914:	4770      	bx	lr
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   20916:	6001      	str	r1, [r0, #0]
      }
   20918:	2000      	movs	r0, #0
   2091a:	4770      	bx	lr
   2091c:	000401c0 	.word	0x000401c0

00020920 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	switch (__op)
   20920:	b13a      	cbz	r2, 20932 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x12>
   20922:	2a01      	cmp	r2, #1
   20924:	d009      	beq.n	2093a <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1a>
	  switch (__op)
   20926:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   20928:	bf04      	itt	eq
   2092a:	680b      	ldreq	r3, [r1, #0]
   2092c:	6003      	streq	r3, [r0, #0]
      }
   2092e:	2000      	movs	r0, #0
   20930:	4770      	bx	lr
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
   20932:	4b03      	ldr	r3, [pc, #12]	; (20940 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x20>)
   20934:	6003      	str	r3, [r0, #0]
      }
   20936:	2000      	movs	r0, #0
   20938:	4770      	bx	lr
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   2093a:	6001      	str	r1, [r0, #0]
      }
   2093c:	2000      	movs	r0, #0
   2093e:	4770      	bx	lr
   20940:	000401d4 	.word	0x000401d4

00020944 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	switch (__op)
   20944:	b13a      	cbz	r2, 20956 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x12>
   20946:	2a01      	cmp	r2, #1
   20948:	d009      	beq.n	2095e <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x1a>
	  switch (__op)
   2094a:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   2094c:	bf04      	itt	eq
   2094e:	680b      	ldreq	r3, [r1, #0]
   20950:	6003      	streq	r3, [r0, #0]
      }
   20952:	2000      	movs	r0, #0
   20954:	4770      	bx	lr
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
   20956:	4b03      	ldr	r3, [pc, #12]	; (20964 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x20>)
   20958:	6003      	str	r3, [r0, #0]
      }
   2095a:	2000      	movs	r0, #0
   2095c:	4770      	bx	lr
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   2095e:	6001      	str	r1, [r0, #0]
      }
   20960:	2000      	movs	r0, #0
   20962:	4770      	bx	lr
   20964:	00040210 	.word	0x00040210

00020968 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0>:
 * @param      output             Pointer to output tensor
 * @param      micro_tensor_arena Pointer to the arena that will be allocated
 *
 * @return  EI_IMPULSE_OK if successful
 */
static EI_IMPULSE_ERROR inference_tflite_setup(const ei_impulse_t *impulse, uint64_t *ctx_start_us, TfLiteTensor** input, TfLiteTensor** output,
   20968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2096a:	460d      	mov	r5, r1
   2096c:	4617      	mov	r7, r2
   2096e:	461e      	mov	r6, r3
   20970:	4604      	mov	r4, r0
    TfLiteTensor** output_labels,
    TfLiteTensor** output_scores,
    ei_unique_ptr_t& p_tensor_arena) {
    
    *ctx_start_us = ei_read_timer_us();
   20972:	f005 fb91 	bl	26098 <_Z16ei_read_timer_usv>
   20976:	e9c5 0100 	strd	r0, r1, [r5]

    TfLiteStatus init_status = trained_model_init(ei_aligned_calloc);
   2097a:	4853      	ldr	r0, [pc, #332]	; (20ac8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x160>)
   2097c:	f005 fc74 	bl	26268 <_Z18trained_model_initPFPvjjE>
    if (init_status != kTfLiteOk) {
   20980:	4605      	mov	r5, r0
   20982:	2800      	cmp	r0, #0
   20984:	d16f      	bne.n	20a66 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0xfe>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
    }

    static bool tflite_first_run = true;

    *input = impulse->model_input(0);
   20986:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   2098a:	4798      	blx	r3
    *output = impulse->model_output(0);
   2098c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    *input = impulse->model_input(0);
   20990:	6038      	str	r0, [r7, #0]
    *output = impulse->model_output(0);
   20992:	4628      	mov	r0, r5
   20994:	4798      	blx	r3
   20996:	6030      	str	r0, [r6, #0]

    if (impulse->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_SSD) {
   20998:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
   2099c:	2b01      	cmp	r3, #1
   2099e:	d10d      	bne.n	209bc <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x54>
        *output_scores = impulse->model_output(impulse->tflite_output_score_tensor);
   209a0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   209a4:	f894 004e 	ldrb.w	r0, [r4, #78]	; 0x4e
   209a8:	4798      	blx	r3
   209aa:	9b07      	ldr	r3, [sp, #28]
   209ac:	6018      	str	r0, [r3, #0]
        *output_labels = impulse->model_output(impulse->tflite_output_labels_tensor);
   209ae:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
   209b2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   209b6:	4798      	blx	r3
   209b8:	9b06      	ldr	r3, [sp, #24]
   209ba:	6018      	str	r0, [r3, #0]
    }

    // Assert that our quantization parameters match the model
    if (tflite_first_run) {
   209bc:	4b43      	ldr	r3, [pc, #268]	; (20acc <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x164>)
   209be:	7818      	ldrb	r0, [r3, #0]
   209c0:	2800      	cmp	r0, #0
   209c2:	d03f      	beq.n	20a44 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0xdc>
        assert((*input)->type == impulse->tflite_input_datatype);
   209c4:	6839      	ldr	r1, [r7, #0]
   209c6:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
   209ca:	7f08      	ldrb	r0, [r1, #28]
   209cc:	4290      	cmp	r0, r2
   209ce:	d157      	bne.n	20a80 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x118>
        assert((*output)->type == impulse->tflite_output_datatype);
   209d0:	6832      	ldr	r2, [r6, #0]
   209d2:	f894 506c 	ldrb.w	r5, [r4, #108]	; 0x6c
   209d6:	7f10      	ldrb	r0, [r2, #28]
   209d8:	42a8      	cmp	r0, r5
   209da:	d14b      	bne.n	20a74 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x10c>
        if (impulse->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_SSD) {
   209dc:	f994 504c 	ldrsb.w	r5, [r4, #76]	; 0x4c
   209e0:	2d01      	cmp	r5, #1
   209e2:	d030      	beq.n	20a46 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0xde>
            assert((*output_scores)->type == impulse->tflite_output_datatype);
            assert((*output_labels)->type == impulse->tflite_output_datatype);
        }
        if (impulse->tflite_input_quantized) {
   209e4:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
   209e8:	b198      	cbz	r0, 20a12 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0xaa>
            assert((*input)->params.scale == impulse->tflite_input_scale);
   209ea:	ed91 7a02 	vldr	s14, [r1, #8]
   209ee:	edd4 7a19 	vldr	s15, [r4, #100]	; 0x64
   209f2:	eeb4 7a67 	vcmp.f32	s14, s15
   209f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   209fa:	d153      	bne.n	20aa4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x13c>
            assert((*input)->params.zero_point == impulse->tflite_input_zeropoint);
   209fc:	edd1 7a03 	vldr	s15, [r1, #12]
   20a00:	ed94 7a1a 	vldr	s14, [r4, #104]	; 0x68
   20a04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   20a08:	eef4 7a47 	vcmp.f32	s15, s14
   20a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   20a10:	d14e      	bne.n	20ab0 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x148>
        }
        if (impulse->tflite_output_quantized) {
   20a12:	f894 106d 	ldrb.w	r1, [r4, #109]	; 0x6d
   20a16:	b199      	cbz	r1, 20a40 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0xd8>
            assert((*output)->params.scale == impulse->tflite_output_scale);
   20a18:	ed92 7a02 	vldr	s14, [r2, #8]
   20a1c:	edd4 7a1c 	vldr	s15, [r4, #112]	; 0x70
   20a20:	eeb4 7a67 	vcmp.f32	s14, s15
   20a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   20a28:	d148      	bne.n	20abc <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x154>
            assert((*output)->params.zero_point == impulse->tflite_output_zeropoint);
   20a2a:	edd2 7a03 	vldr	s15, [r2, #12]
   20a2e:	ed94 7a1d 	vldr	s14, [r4, #116]	; 0x74
   20a32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   20a36:	eef4 7a47 	vcmp.f32	s15, s14
   20a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   20a3e:	d125      	bne.n	20a8c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x124>
        }
        tflite_first_run = false;
   20a40:	2000      	movs	r0, #0
   20a42:	7018      	strb	r0, [r3, #0]
    }
    return EI_IMPULSE_OK;
}
   20a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            assert((*output_scores)->type == impulse->tflite_output_datatype);
   20a46:	9d07      	ldr	r5, [sp, #28]
   20a48:	682d      	ldr	r5, [r5, #0]
   20a4a:	7f2d      	ldrb	r5, [r5, #28]
   20a4c:	4285      	cmp	r5, r0
   20a4e:	d123      	bne.n	20a98 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x130>
            assert((*output_labels)->type == impulse->tflite_output_datatype);
   20a50:	9806      	ldr	r0, [sp, #24]
   20a52:	6800      	ldr	r0, [r0, #0]
   20a54:	7f00      	ldrb	r0, [r0, #28]
   20a56:	42a8      	cmp	r0, r5
   20a58:	d0c4      	beq.n	209e4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x7c>
   20a5a:	4b1d      	ldr	r3, [pc, #116]	; (20ad0 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x168>)
   20a5c:	4a1d      	ldr	r2, [pc, #116]	; (20ad4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x16c>)
   20a5e:	481e      	ldr	r0, [pc, #120]	; (20ad8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x170>)
   20a60:	215c      	movs	r1, #92	; 0x5c
   20a62:	f00a f963 	bl	2ad2c <__assert_func>
        ei_printf("Failed to allocate TFLite arena (error code %d)\n", init_status);
   20a66:	481d      	ldr	r0, [pc, #116]	; (20adc <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x174>)
   20a68:	4629      	mov	r1, r5
   20a6a:	f005 fb1d 	bl	260a8 <_Z9ei_printfPKcz>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
   20a6e:	f06f 0005 	mvn.w	r0, #5
}
   20a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        assert((*output)->type == impulse->tflite_output_datatype);
   20a74:	4b1a      	ldr	r3, [pc, #104]	; (20ae0 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x178>)
   20a76:	4a17      	ldr	r2, [pc, #92]	; (20ad4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x16c>)
   20a78:	4817      	ldr	r0, [pc, #92]	; (20ad8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x170>)
   20a7a:	2159      	movs	r1, #89	; 0x59
   20a7c:	f00a f956 	bl	2ad2c <__assert_func>
        assert((*input)->type == impulse->tflite_input_datatype);
   20a80:	4b18      	ldr	r3, [pc, #96]	; (20ae4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x17c>)
   20a82:	4a14      	ldr	r2, [pc, #80]	; (20ad4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x16c>)
   20a84:	4814      	ldr	r0, [pc, #80]	; (20ad8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x170>)
   20a86:	2158      	movs	r1, #88	; 0x58
   20a88:	f00a f950 	bl	2ad2c <__assert_func>
            assert((*output)->params.zero_point == impulse->tflite_output_zeropoint);
   20a8c:	4b16      	ldr	r3, [pc, #88]	; (20ae8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x180>)
   20a8e:	4a11      	ldr	r2, [pc, #68]	; (20ad4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x16c>)
   20a90:	4811      	ldr	r0, [pc, #68]	; (20ad8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x170>)
   20a92:	2164      	movs	r1, #100	; 0x64
   20a94:	f00a f94a 	bl	2ad2c <__assert_func>
            assert((*output_scores)->type == impulse->tflite_output_datatype);
   20a98:	4b14      	ldr	r3, [pc, #80]	; (20aec <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x184>)
   20a9a:	4a0e      	ldr	r2, [pc, #56]	; (20ad4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x16c>)
   20a9c:	480e      	ldr	r0, [pc, #56]	; (20ad8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x170>)
   20a9e:	215b      	movs	r1, #91	; 0x5b
   20aa0:	f00a f944 	bl	2ad2c <__assert_func>
            assert((*input)->params.scale == impulse->tflite_input_scale);
   20aa4:	4b12      	ldr	r3, [pc, #72]	; (20af0 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x188>)
   20aa6:	4a0b      	ldr	r2, [pc, #44]	; (20ad4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x16c>)
   20aa8:	480b      	ldr	r0, [pc, #44]	; (20ad8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x170>)
   20aaa:	215f      	movs	r1, #95	; 0x5f
   20aac:	f00a f93e 	bl	2ad2c <__assert_func>
            assert((*input)->params.zero_point == impulse->tflite_input_zeropoint);
   20ab0:	4b10      	ldr	r3, [pc, #64]	; (20af4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x18c>)
   20ab2:	4a08      	ldr	r2, [pc, #32]	; (20ad4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x16c>)
   20ab4:	4808      	ldr	r0, [pc, #32]	; (20ad8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x170>)
   20ab6:	2160      	movs	r1, #96	; 0x60
   20ab8:	f00a f938 	bl	2ad2c <__assert_func>
            assert((*output)->params.scale == impulse->tflite_output_scale);
   20abc:	4b0e      	ldr	r3, [pc, #56]	; (20af8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x190>)
   20abe:	4a05      	ldr	r2, [pc, #20]	; (20ad4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x16c>)
   20ac0:	4805      	ldr	r0, [pc, #20]	; (20ad8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0+0x170>)
   20ac2:	2163      	movs	r1, #99	; 0x63
   20ac4:	f00a f932 	bl	2ad2c <__assert_func>
   20ac8:	00020851 	.word	0x00020851
   20acc:	10004000 	.word	0x10004000
   20ad0:	0003f8c4 	.word	0x0003f8c4
   20ad4:	0003f770 	.word	0x0003f770
   20ad8:	0003f80c 	.word	0x0003f80c
   20adc:	0003f708 	.word	0x0003f708
   20ae0:	0003f854 	.word	0x0003f854
   20ae4:	0003f73c 	.word	0x0003f73c
   20ae8:	0003f9b0 	.word	0x0003f9b0
   20aec:	0003f888 	.word	0x0003f888
   20af0:	0003f900 	.word	0x0003f900
   20af4:	0003f938 	.word	0x0003f938
   20af8:	0003f978 	.word	0x0003f978

00020afc <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt.constprop.0>:
    static int32_t calculate_no_of_stack_frames(
   20afc:	b530      	push	{r4, r5, lr}
   20afe:	ed2d 8b04 	vpush	{d8-d9}
   20b02:	ee07 1a90 	vmov	s15, r1
        if (version == 1) {
   20b06:	2a01      	cmp	r2, #1
            frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
   20b08:	eeb8 8a67 	vcvt.f32.u32	s16, s15
    static int32_t calculate_no_of_stack_frames(
   20b0c:	b083      	sub	sp, #12
   20b0e:	eef0 8a60 	vmov.f32	s17, s1
   20b12:	4605      	mov	r5, r0
        if (version == 1) {
   20b14:	d04c      	beq.n	20bb0 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt.constprop.0+0xb4>
            frame_sample_length = static_cast<int>(ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_length));
   20b16:	ee20 9a08 	vmul.f32	s18, s0, s16
  using ::floor;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  floor(float __x)
  { return __builtin_floorf(__x); }
   20b1a:	eeb0 0a49 	vmov.f32	s0, s18
   20b1e:	f007 ff11 	bl	28944 <floorf>
        if (v > floor(v) && v - floor(v) < 0.001f) {
   20b22:	eeb4 9ac0 	vcmpe.f32	s18, s0
   20b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   20b2a:	dc32      	bgt.n	20b92 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt.constprop.0+0x96>
  { return __builtin_ceilf(__x); }
   20b2c:	eeb0 0a49 	vmov.f32	s0, s18
   20b30:	f007 fe8a 	bl	28848 <ceilf>
            frame_stride = ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_stride_arg);
   20b34:	ee28 8a88 	vmul.f32	s16, s17, s16
            frame_sample_length = static_cast<int>(ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_length));
   20b38:	eefd 7ac0 	vcvt.s32.f32	s15, s0
  { return __builtin_floorf(__x); }
   20b3c:	eeb0 0a48 	vmov.f32	s0, s16
   20b40:	ee17 4a90 	vmov	r4, s15
   20b44:	f007 fefe 	bl	28944 <floorf>
        if (v > floor(v) && v - floor(v) < 0.001f) {
   20b48:	eeb4 8ac0 	vcmpe.f32	s16, s0
   20b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   20b50:	dd29      	ble.n	20ba6 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt.constprop.0+0xaa>
   20b52:	ee78 7a40 	vsub.f32	s15, s16, s0
   20b56:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 20bd0 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt.constprop.0+0xd4>
   20b5a:	eef4 7ac7 	vcmpe.f32	s15, s14
   20b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   20b62:	d520      	bpl.n	20ba6 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt.constprop.0+0xaa>
            length = (frame_sample_length - (int)frame_stride);
   20b64:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   20b68:	ee17 0a90 	vmov	r0, s15
   20b6c:	1a24      	subs	r4, r4, r0
                floor(static_cast<float>(signal_size - length) / frame_stride));
   20b6e:	1b2c      	subs	r4, r5, r4
   20b70:	ee07 4a90 	vmov	s15, r4
   20b74:	eef8 7a67 	vcvt.f32.u32	s15, s15
   20b78:	ee87 0a80 	vdiv.f32	s0, s15, s0
   20b7c:	f007 fee2 	bl	28944 <floorf>
            numframes = static_cast<int>(
   20b80:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   20b84:	ed8d 0a01 	vstr	s0, [sp, #4]
        return numframes;
   20b88:	9801      	ldr	r0, [sp, #4]
    }
   20b8a:	b003      	add	sp, #12
   20b8c:	ecbd 8b04 	vpop	{d8-d9}
   20b90:	bd30      	pop	{r4, r5, pc}
        if (v > floor(v) && v - floor(v) < 0.001f) {
   20b92:	ee79 7a40 	vsub.f32	s15, s18, s0
   20b96:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 20bd0 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt.constprop.0+0xd4>
   20b9a:	eef4 7ac7 	vcmpe.f32	s15, s14
   20b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   20ba2:	d4c7      	bmi.n	20b34 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt.constprop.0+0x38>
   20ba4:	e7c2      	b.n	20b2c <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt.constprop.0+0x30>
  { return __builtin_ceilf(__x); }
   20ba6:	eeb0 0a48 	vmov.f32	s0, s16
   20baa:	f007 fe4d 	bl	28848 <ceilf>
   20bae:	e7d9      	b.n	20b64 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt.constprop.0+0x68>
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
   20bb0:	ee28 0a00 	vmul.f32	s0, s16, s0
   20bb4:	f007 ff36 	bl	28a24 <roundf>
   20bb8:	eef0 7a40 	vmov.f32	s15, s0
            frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
   20bbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   20bc0:	ee28 0a28 	vmul.f32	s0, s16, s17
   20bc4:	ee17 4a90 	vmov	r4, s15
   20bc8:	f007 ff2c 	bl	28a24 <roundf>
            length = frame_sample_length;
   20bcc:	e7cf      	b.n	20b6e <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt.constprop.0+0x72>
   20bce:	bf00      	nop
   20bd0:	3a83126f 	.word	0x3a83126f

00020bd4 <_ZN2ei8speechpy10processingL21calculate_signal_usedEjmffbt.constprop.0>:
    static int calculate_signal_used(
   20bd4:	b510      	push	{r4, lr}
   20bd6:	ed2d 8b04 	vpush	{d8-d9}
        if (version == 1) {
   20bda:	2a01      	cmp	r2, #1
    static int calculate_signal_used(
   20bdc:	b084      	sub	sp, #16
   20bde:	ee07 1a90 	vmov	s15, r1
   20be2:	edcd 0a01 	vstr	s1, [sp, #4]
   20be6:	eeb0 9a60 	vmov.f32	s18, s1
   20bea:	4604      	mov	r4, r0
        if (version == 1) {
   20bec:	d060      	beq.n	20cb0 <_ZN2ei8speechpy10processingL21calculate_signal_usedEjmffbt.constprop.0+0xdc>
            frame_sample_length = static_cast<int>(ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_length));
   20bee:	eeb8 8a67 	vcvt.f32.u32	s16, s15
   20bf2:	ee60 8a08 	vmul.f32	s17, s0, s16
  { return __builtin_floorf(__x); }
   20bf6:	eeb0 0a68 	vmov.f32	s0, s17
   20bfa:	f007 fea3 	bl	28944 <floorf>
        if (v > floor(v) && v - floor(v) < 0.001f) {
   20bfe:	eef4 8ac0 	vcmpe.f32	s17, s0
   20c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   20c06:	dc42      	bgt.n	20c8e <_ZN2ei8speechpy10processingL21calculate_signal_usedEjmffbt.constprop.0+0xba>
  { return __builtin_ceilf(__x); }
   20c08:	eeb0 0a68 	vmov.f32	s0, s17
   20c0c:	f007 fe1c 	bl	28848 <ceilf>
            frame_stride = ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_stride_arg);
   20c10:	ee29 9a08 	vmul.f32	s18, s18, s16
            frame_sample_length = static_cast<int>(ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_length));
   20c14:	eebd 8ac0 	vcvt.s32.f32	s16, s0
  { return __builtin_floorf(__x); }
   20c18:	eeb0 0a49 	vmov.f32	s0, s18
   20c1c:	f007 fe92 	bl	28944 <floorf>
        if (v > floor(v) && v - floor(v) < 0.001f) {
   20c20:	eeb4 9ac0 	vcmpe.f32	s18, s0
   20c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   20c28:	eef0 8a40 	vmov.f32	s17, s0
   20c2c:	dd39      	ble.n	20ca2 <_ZN2ei8speechpy10processingL21calculate_signal_usedEjmffbt.constprop.0+0xce>
   20c2e:	ee79 7a40 	vsub.f32	s15, s18, s0
   20c32:	ed9f 7a29 	vldr	s14, [pc, #164]	; 20cd8 <_ZN2ei8speechpy10processingL21calculate_signal_usedEjmffbt.constprop.0+0x104>
   20c36:	eef4 7ac7 	vcmpe.f32	s15, s14
   20c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   20c3e:	d530      	bpl.n	20ca2 <_ZN2ei8speechpy10processingL21calculate_signal_usedEjmffbt.constprop.0+0xce>
            length = (frame_sample_length - (int)frame_stride);
   20c40:	eefd 7ae8 	vcvt.s32.f32	s15, s17
   20c44:	ee18 3a10 	vmov	r3, s16
   20c48:	ee17 0a90 	vmov	r0, s15
   20c4c:	1a18      	subs	r0, r3, r0
                floor(static_cast<float>(signal_size - length) / frame_stride));
   20c4e:	1a23      	subs	r3, r4, r0
   20c50:	ee00 3a10 	vmov	s0, r3
   20c54:	eeb8 0a40 	vcvt.f32.u32	s0, s0
                (static_cast<float>(numframes - 1) * frame_stride + frame_sample_length));
   20c58:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   20c5c:	ee80 0a28 	vdiv.f32	s0, s0, s17
   20c60:	f007 fe70 	bl	28944 <floorf>
            numframes = static_cast<int>(
   20c64:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   20c68:	ed8d 0a02 	vstr	s0, [sp, #8]
                (static_cast<float>(numframes - 1) * frame_stride + frame_sample_length));
   20c6c:	9b02      	ldr	r3, [sp, #8]
   20c6e:	3b01      	subs	r3, #1
   20c70:	ee07 3a90 	vmov	s15, r3
   20c74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   20c78:	eea8 8aa7 	vfma.f32	s16, s17, s15
            len_sig = static_cast<int>(
   20c7c:	eebd 8ac8 	vcvt.s32.f32	s16, s16
   20c80:	ed8d 8a03 	vstr	s16, [sp, #12]
        return len_sig;
   20c84:	9803      	ldr	r0, [sp, #12]
    }
   20c86:	b004      	add	sp, #16
   20c88:	ecbd 8b04 	vpop	{d8-d9}
   20c8c:	bd10      	pop	{r4, pc}
        if (v > floor(v) && v - floor(v) < 0.001f) {
   20c8e:	ee78 7ac0 	vsub.f32	s15, s17, s0
   20c92:	ed9f 7a11 	vldr	s14, [pc, #68]	; 20cd8 <_ZN2ei8speechpy10processingL21calculate_signal_usedEjmffbt.constprop.0+0x104>
   20c96:	eef4 7ac7 	vcmpe.f32	s15, s14
   20c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   20c9e:	d4b7      	bmi.n	20c10 <_ZN2ei8speechpy10processingL21calculate_signal_usedEjmffbt.constprop.0+0x3c>
   20ca0:	e7b2      	b.n	20c08 <_ZN2ei8speechpy10processingL21calculate_signal_usedEjmffbt.constprop.0+0x34>
  { return __builtin_ceilf(__x); }
   20ca2:	eeb0 0a49 	vmov.f32	s0, s18
   20ca6:	f007 fdcf 	bl	28848 <ceilf>
   20caa:	eef0 8a40 	vmov.f32	s17, s0
   20cae:	e7c7      	b.n	20c40 <_ZN2ei8speechpy10processingL21calculate_signal_usedEjmffbt.constprop.0+0x6c>
            frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
   20cb0:	eef8 8a67 	vcvt.f32.u32	s17, s15
  { return __builtin_roundf(__x); }
   20cb4:	ee28 0a80 	vmul.f32	s0, s17, s0
   20cb8:	f007 feb4 	bl	28a24 <roundf>
   20cbc:	eeb0 8a40 	vmov.f32	s16, s0
   20cc0:	ee28 0a89 	vmul.f32	s0, s17, s18
   20cc4:	f007 feae 	bl	28a24 <roundf>
   20cc8:	eebd 8ac8 	vcvt.s32.f32	s16, s16
   20ccc:	eef0 8a40 	vmov.f32	s17, s0
            length = frame_sample_length;
   20cd0:	ee18 0a10 	vmov	r0, s16
   20cd4:	e7bb      	b.n	20c4e <_ZN2ei8speechpy10processingL21calculate_signal_usedEjmffbt.constprop.0+0x7a>
   20cd6:	bf00      	nop
   20cd8:	3a83126f 	.word	0x3a83126f
   20cdc:	00000000 	.word	0x00000000

00020ce0 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0>:
    static int cmvnw(matrix_t *features_matrix, uint16_t win_size = 301, bool variance_normalization = false,
   20ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20ce4:	ed2d 8b02 	vpush	{d8}
   20ce8:	b091      	sub	sp, #68	; 0x44
   20cea:	e9cd 2306 	strd	r2, r3, [sp, #24]
        EI_DSP_MATRIX(vec_pad, features_matrix->rows + (pad_size * 2), features_matrix->cols);
   20cee:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
        uint16_t pad_size = (win_size - 1) / 2;
   20cf2:	1e4f      	subs	r7, r1, #1
    static int cmvnw(matrix_t *features_matrix, uint16_t win_size = 301, bool variance_normalization = false,
   20cf4:	4606      	mov	r6, r0
        EI_DSP_MATRIX(vec_pad, features_matrix->rows + (pad_size * 2), features_matrix->cols);
   20cf6:	f027 0001 	bic.w	r0, r7, #1
   20cfa:	e9cd 3002 	strd	r3, r0, [sp, #8]
   20cfe:	0095      	lsls	r5, r2, #2
   20d00:	1818      	adds	r0, r3, r0
    static int cmvnw(matrix_t *features_matrix, uint16_t win_size = 301, bool variance_normalization = false,
   20d02:	460c      	mov	r4, r1
        EI_DSP_MATRIX(vec_pad, features_matrix->rows + (pad_size * 2), features_matrix->cols);
   20d04:	9005      	str	r0, [sp, #20]
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   20d06:	2101      	movs	r1, #1
   20d08:	fb05 f000 	mul.w	r0, r5, r0
   20d0c:	9201      	str	r2, [sp, #4]
   20d0e:	f005 f9e9 	bl	260e4 <_Z9ei_callocjj>
   20d12:	2800      	cmp	r0, #0
   20d14:	f000 8144 	beq.w	20fa0 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x2c0>
        if (output->cols != input->cols) {
   20d18:	68b3      	ldr	r3, [r6, #8]
   20d1a:	9a01      	ldr	r2, [sp, #4]
   20d1c:	429a      	cmp	r2, r3
   20d1e:	4683      	mov	fp, r0
   20d20:	f040 82fa 	bne.w	21318 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x638>
        if (output->rows != input->rows + pad_before + pad_after) {
   20d24:	6872      	ldr	r2, [r6, #4]
   20d26:	9902      	ldr	r1, [sp, #8]
   20d28:	4291      	cmp	r1, r2
   20d2a:	f040 82f5 	bne.w	21318 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x638>
        if (input->rows == 0) {
   20d2e:	2900      	cmp	r1, #0
   20d30:	f000 8322 	beq.w	21378 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x698>
        for (int32_t ix = pad_before - 1; ix >= 0; ix--) {
   20d34:	107f      	asrs	r7, r7, #1
   20d36:	1e7a      	subs	r2, r7, #1
   20d38:	9209      	str	r2, [sp, #36]	; 0x24
   20d3a:	2f00      	cmp	r7, #0
   20d3c:	f000 813d 	beq.w	20fba <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x2da>
        bool pad_before_direction_up = true;
   20d40:	f04f 0a01 	mov.w	sl, #1
        uint32_t pad_before_index = 0;
   20d44:	f04f 0900 	mov.w	r9, #0
   20d48:	4629      	mov	r1, r5
        for (int32_t ix = pad_before - 1; ix >= 0; ix--) {
   20d4a:	4690      	mov	r8, r2
        uint32_t pad_before_index = 0;
   20d4c:	4622      	mov	r2, r4
   20d4e:	4655      	mov	r5, sl
   20d50:	464c      	mov	r4, r9
   20d52:	468a      	mov	sl, r1
   20d54:	4691      	mov	r9, r2
   20d56:	e00a      	b.n	20d6e <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x8e>
            if (pad_before_index == 0 && !pad_before_direction_up) {
   20d58:	b125      	cbz	r5, 20d64 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x84>
            else if (pad_before_index == input->rows - 1 && pad_before_direction_up) {
   20d5a:	6873      	ldr	r3, [r6, #4]
   20d5c:	2b01      	cmp	r3, #1
   20d5e:	f000 811b 	beq.w	20f98 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x2b8>
                pad_before_index++;
   20d62:	3401      	adds	r4, #1
   20d64:	2501      	movs	r5, #1
        for (int32_t ix = pad_before - 1; ix >= 0; ix--) {
   20d66:	f1b8 0801 	subs.w	r8, r8, #1
   20d6a:	d31a      	bcc.n	20da2 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0xc2>
            memcpy(output->buffer + (input->cols * ix),
   20d6c:	68b3      	ldr	r3, [r6, #8]
                input->buffer + (pad_before_index * input->cols),
   20d6e:	6831      	ldr	r1, [r6, #0]
   20d70:	009a      	lsls	r2, r3, #2
   20d72:	fb04 f303 	mul.w	r3, r4, r3
            memcpy(output->buffer + (input->cols * ix),
   20d76:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   20d7a:	fb02 b008 	mla	r0, r2, r8, fp
   20d7e:	f7f7 fa3f 	bl	18200 <memcpy>
            if (pad_before_index == 0 && !pad_before_direction_up) {
   20d82:	2c00      	cmp	r4, #0
   20d84:	d0e8      	beq.n	20d58 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x78>
            else if (pad_before_index == input->rows - 1 && pad_before_direction_up) {
   20d86:	6873      	ldr	r3, [r6, #4]
   20d88:	3b01      	subs	r3, #1
   20d8a:	42a3      	cmp	r3, r4
   20d8c:	f000 80f0 	beq.w	20f70 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x290>
            else if (pad_before_direction_up) {
   20d90:	2d00      	cmp	r5, #0
   20d92:	d1e6      	bne.n	20d62 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x82>
        for (int32_t ix = pad_before - 1; ix >= 0; ix--) {
   20d94:	f1b8 0801 	subs.w	r8, r8, #1
                pad_before_index--;
   20d98:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   20d9c:	f04f 0500 	mov.w	r5, #0
        for (int32_t ix = pad_before - 1; ix >= 0; ix--) {
   20da0:	d2e4      	bcs.n	20d6c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x8c>
            input->rows * input->cols * sizeof(float));
   20da2:	e9d6 2301 	ldrd	r2, r3, [r6, #4]
   20da6:	fb03 f202 	mul.w	r2, r3, r2
        memcpy(output->buffer + (input->cols * pad_before),
   20daa:	fb07 f303 	mul.w	r3, r7, r3
   20dae:	0092      	lsls	r2, r2, #2
   20db0:	eb0b 0083 	add.w	r0, fp, r3, lsl #2
   20db4:	6831      	ldr	r1, [r6, #0]
   20db6:	f7f7 fa23 	bl	18200 <memcpy>
        int32_t pad_after_index = input->rows - 1;
   20dba:	6870      	ldr	r0, [r6, #4]
        memcpy(output->buffer + (input->cols * pad_before),
   20dbc:	4655      	mov	r5, sl
   20dbe:	464c      	mov	r4, r9
        int32_t pad_after_index = input->rows - 1;
   20dc0:	f04f 0a00 	mov.w	sl, #0
   20dc4:	f100 39ff 	add.w	r9, r0, #4294967295	; 0xffffffff
        for (int32_t ix = 0; ix < pad_after; ix++) {
   20dc8:	462a      	mov	r2, r5
   20dca:	4623      	mov	r3, r4
        int32_t pad_after_index = input->rows - 1;
   20dcc:	46d0      	mov	r8, sl
   20dce:	4655      	mov	r5, sl
   20dd0:	464c      	mov	r4, r9
   20dd2:	4692      	mov	sl, r2
   20dd4:	4699      	mov	r9, r3
   20dd6:	e00b      	b.n	20df0 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x110>
            if (pad_after_index == 0 && !pad_after_direction_up) {
   20dd8:	b125      	cbz	r5, 20de4 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x104>
            else if (pad_after_index == static_cast<int32_t>(input->rows) - 1 && pad_after_direction_up) {
   20dda:	6873      	ldr	r3, [r6, #4]
   20ddc:	2b01      	cmp	r3, #1
   20dde:	f000 80dd 	beq.w	20f9c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x2bc>
                pad_after_index++;
   20de2:	3401      	adds	r4, #1
   20de4:	2501      	movs	r5, #1
        for (int32_t ix = 0; ix < pad_after; ix++) {
   20de6:	f108 0801 	add.w	r8, r8, #1
   20dea:	4547      	cmp	r7, r8
   20dec:	dd1d      	ble.n	20e2a <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x14a>
            memcpy(output->buffer + (input->cols * (ix + pad_before + input->rows)),
   20dee:	6870      	ldr	r0, [r6, #4]
   20df0:	68b2      	ldr	r2, [r6, #8]
                input->buffer + (pad_after_index * input->cols),
   20df2:	6831      	ldr	r1, [r6, #0]
            memcpy(output->buffer + (input->cols * (ix + pad_before + input->rows)),
   20df4:	eb08 0307 	add.w	r3, r8, r7
   20df8:	0092      	lsls	r2, r2, #2
   20dfa:	4418      	add	r0, r3
   20dfc:	fb02 1104 	mla	r1, r2, r4, r1
   20e00:	fb02 b000 	mla	r0, r2, r0, fp
   20e04:	f7f7 f9fc 	bl	18200 <memcpy>
            if (pad_after_index == 0 && !pad_after_direction_up) {
   20e08:	2c00      	cmp	r4, #0
   20e0a:	d0e5      	beq.n	20dd8 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0xf8>
            else if (pad_after_index == static_cast<int32_t>(input->rows) - 1 && pad_after_direction_up) {
   20e0c:	6873      	ldr	r3, [r6, #4]
   20e0e:	3b01      	subs	r3, #1
   20e10:	42a3      	cmp	r3, r4
   20e12:	f000 80b2 	beq.w	20f7a <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x29a>
            else if (pad_after_direction_up) {
   20e16:	2d00      	cmp	r5, #0
   20e18:	d1e3      	bne.n	20de2 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x102>
        for (int32_t ix = 0; ix < pad_after; ix++) {
   20e1a:	f108 0801 	add.w	r8, r8, #1
   20e1e:	4547      	cmp	r7, r8
                pad_after_index--;
   20e20:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   20e24:	f04f 0500 	mov.w	r5, #0
        for (int32_t ix = 0; ix < pad_after; ix++) {
   20e28:	dce1      	bgt.n	20dee <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x10e>
   20e2a:	4655      	mov	r5, sl
   20e2c:	464c      	mov	r4, r9
   20e2e:	2101      	movs	r1, #1
   20e30:	4628      	mov	r0, r5
   20e32:	f005 f957 	bl	260e4 <_Z9ei_callocjj>
        EI_DSP_MATRIX(mean_matrix, vec_pad.cols, 1);
   20e36:	9008      	str	r0, [sp, #32]
   20e38:	2800      	cmp	r0, #0
   20e3a:	f000 80a3 	beq.w	20f84 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x2a4>
   20e3e:	2101      	movs	r1, #1
   20e40:	4628      	mov	r0, r5
   20e42:	f005 f94f 	bl	260e4 <_Z9ei_callocjj>
        EI_DSP_MATRIX(window_variance, vec_pad.cols, 1);
   20e46:	900a      	str	r0, [sp, #40]	; 0x28
   20e48:	2800      	cmp	r0, #0
   20e4a:	f000 81f7 	beq.w	2123c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x55c>
        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
   20e4e:	6872      	ldr	r2, [r6, #4]
   20e50:	9204      	str	r2, [sp, #16]
   20e52:	2a00      	cmp	r2, #0
   20e54:	f000 8283 	beq.w	2135e <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x67e>
        if (output->cols != input->cols) {
   20e58:	f8d6 8008 	ldr.w	r8, [r6, #8]
   20e5c:	f8cd b00c 	str.w	fp, [sp, #12]
   20e60:	f04f 0900 	mov.w	r9, #0
   20e64:	ea4f 0288 	mov.w	r2, r8, lsl #2
   20e68:	eb0b 0e05 	add.w	lr, fp, r5
   20e6c:	f8dd c020 	ldr.w	ip, [sp, #32]
   20e70:	9205      	str	r2, [sp, #20]
   20e72:	46b3      	mov	fp, r6
   20e74:	9e01      	ldr	r6, [sp, #4]
   20e76:	970b      	str	r7, [sp, #44]	; 0x2c
   20e78:	464a      	mov	r2, r9
   20e7a:	46ca      	mov	sl, r9
        for (size_t col = 0; col < input_matrix->cols; col++) {
   20e7c:	b1d6      	cbz	r6, 20eb4 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x1d4>
            output_matrix->buffer[col] = sum / input_matrix->rows;
   20e7e:	ee07 4a90 	vmov	s15, r4
   20e82:	9b03      	ldr	r3, [sp, #12]
   20e84:	eef8 6ae7 	vcvt.f32.s32	s13, s15
   20e88:	4667      	mov	r7, ip
   20e8a:	eb03 0089 	add.w	r0, r3, r9, lsl #2
            float sum = 0.0f;
   20e8e:	eddf 7a78 	vldr	s15, [pc, #480]	; 21070 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x390>
   20e92:	4601      	mov	r1, r0
            for (size_t row = 0; row < input_matrix->rows; row++) {
   20e94:	2300      	movs	r3, #0
                sum += input_matrix->buffer[( row * input_matrix->cols ) + col];
   20e96:	ed91 7a00 	vldr	s14, [r1]
            for (size_t row = 0; row < input_matrix->rows; row++) {
   20e9a:	3301      	adds	r3, #1
   20e9c:	42a3      	cmp	r3, r4
                sum += input_matrix->buffer[( row * input_matrix->cols ) + col];
   20e9e:	ee77 7a87 	vadd.f32	s15, s15, s14
            for (size_t row = 0; row < input_matrix->rows; row++) {
   20ea2:	4429      	add	r1, r5
   20ea4:	d3f7      	bcc.n	20e96 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x1b6>
            output_matrix->buffer[col] = sum / input_matrix->rows;
   20ea6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
        for (size_t col = 0; col < input_matrix->cols; col++) {
   20eaa:	3004      	adds	r0, #4
   20eac:	4586      	cmp	lr, r0
            output_matrix->buffer[col] = sum / input_matrix->rows;
   20eae:	eca7 7a01 	vstmia	r7!, {s14}
        for (size_t col = 0; col < input_matrix->cols; col++) {
   20eb2:	d1ec      	bne.n	20e8e <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x1ae>
            for (size_t fm_col = 0; fm_col < features_matrix->cols; fm_col++) {
   20eb4:	f1b8 0f00 	cmp.w	r8, #0
   20eb8:	d012      	beq.n	20ee0 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x200>
                    features_matrix->buffer[(ix * features_matrix->cols) + fm_col] - mean_matrix.buffer[fm_col];
   20eba:	f8db 3000 	ldr.w	r3, [fp]
   20ebe:	9805      	ldr	r0, [sp, #20]
   20ec0:	1818      	adds	r0, r3, r0
   20ec2:	4661      	mov	r1, ip
   20ec4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   20ec8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   20ecc:	edd3 7a00 	vldr	s15, [r3]
   20ed0:	ecb1 7a01 	vldmia	r1!, {s14}
   20ed4:	ee77 7ac7 	vsub.f32	s15, s15, s14
                features_matrix->buffer[(ix * features_matrix->cols) + fm_col] =
   20ed8:	ece3 7a01 	vstmia	r3!, {s15}
            for (size_t fm_col = 0; fm_col < features_matrix->cols; fm_col++) {
   20edc:	4283      	cmp	r3, r0
   20ede:	d1f5      	bne.n	20ecc <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x1ec>
        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
   20ee0:	9b04      	ldr	r3, [sp, #16]
   20ee2:	f10a 0a01 	add.w	sl, sl, #1
   20ee6:	459a      	cmp	sl, r3
   20ee8:	4442      	add	r2, r8
   20eea:	44ae      	add	lr, r5
   20eec:	44b1      	add	r9, r6
   20eee:	d1c5      	bne.n	20e7c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x19c>
        if (output->cols != input->cols) {
   20ef0:	9b01      	ldr	r3, [sp, #4]
   20ef2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   20ef4:	4543      	cmp	r3, r8
   20ef6:	465e      	mov	r6, fp
   20ef8:	f8dd b00c 	ldr.w	fp, [sp, #12]
   20efc:	f040 82bb 	bne.w	21476 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x796>
        if (output->rows != input->rows + pad_before + pad_after) {
   20f00:	9b02      	ldr	r3, [sp, #8]
   20f02:	4553      	cmp	r3, sl
   20f04:	f040 82b7 	bne.w	21476 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x796>
        for (int32_t ix = pad_before - 1; ix >= 0; ix--) {
   20f08:	9a09      	ldr	r2, [sp, #36]	; 0x24
   20f0a:	1c51      	adds	r1, r2, #1
   20f0c:	f000 8213 	beq.w	21336 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x656>
        uint32_t pad_before_index = 0;
   20f10:	f04f 0900 	mov.w	r9, #0
   20f14:	4621      	mov	r1, r4
   20f16:	4643      	mov	r3, r8
   20f18:	464c      	mov	r4, r9
   20f1a:	4690      	mov	r8, r2
        bool pad_before_direction_up = true;
   20f1c:	f04f 0a01 	mov.w	sl, #1
        uint32_t pad_before_index = 0;
   20f20:	9a05      	ldr	r2, [sp, #20]
   20f22:	4689      	mov	r9, r1
   20f24:	e00e      	b.n	20f44 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x264>
            if (pad_before_index == 0 && !pad_before_direction_up) {
   20f26:	f1ba 0f00 	cmp.w	sl, #0
   20f2a:	d004      	beq.n	20f36 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x256>
            else if (pad_before_index == input->rows - 1 && pad_before_direction_up) {
   20f2c:	6873      	ldr	r3, [r6, #4]
   20f2e:	2b01      	cmp	r3, #1
   20f30:	f000 81ce 	beq.w	212d0 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x5f0>
                pad_before_index++;
   20f34:	3401      	adds	r4, #1
   20f36:	f04f 0a01 	mov.w	sl, #1
        for (int32_t ix = pad_before - 1; ix >= 0; ix--) {
   20f3a:	f1b8 0801 	subs.w	r8, r8, #1
   20f3e:	d344      	bcc.n	20fca <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x2ea>
            memcpy(output->buffer + (input->cols * ix),
   20f40:	68b3      	ldr	r3, [r6, #8]
   20f42:	009a      	lsls	r2, r3, #2
                input->buffer + (pad_before_index * input->cols),
   20f44:	6831      	ldr	r1, [r6, #0]
   20f46:	fb04 f303 	mul.w	r3, r4, r3
            memcpy(output->buffer + (input->cols * ix),
   20f4a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   20f4e:	fb02 b008 	mla	r0, r2, r8, fp
   20f52:	f7f7 f955 	bl	18200 <memcpy>
            if (pad_before_index == 0 && !pad_before_direction_up) {
   20f56:	2c00      	cmp	r4, #0
   20f58:	d0e5      	beq.n	20f26 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x246>
            else if (pad_before_index == input->rows - 1 && pad_before_direction_up) {
   20f5a:	6873      	ldr	r3, [r6, #4]
   20f5c:	3b01      	subs	r3, #1
   20f5e:	42a3      	cmp	r3, r4
   20f60:	d025      	beq.n	20fae <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x2ce>
            else if (pad_before_direction_up) {
   20f62:	f1ba 0f00 	cmp.w	sl, #0
   20f66:	d1e5      	bne.n	20f34 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x254>
                pad_before_index--;
   20f68:	3c01      	subs	r4, #1
   20f6a:	f04f 0a00 	mov.w	sl, #0
   20f6e:	e7e4      	b.n	20f3a <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x25a>
            else if (pad_before_index == input->rows - 1 && pad_before_direction_up) {
   20f70:	2d00      	cmp	r5, #0
   20f72:	f43f af0f 	beq.w	20d94 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0xb4>
                pad_before_direction_up = false;
   20f76:	2500      	movs	r5, #0
   20f78:	e6f5      	b.n	20d66 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x86>
            else if (pad_after_index == static_cast<int32_t>(input->rows) - 1 && pad_after_direction_up) {
   20f7a:	2d00      	cmp	r5, #0
   20f7c:	f43f af4d 	beq.w	20e1a <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x13a>
                pad_after_direction_up = false;
   20f80:	2500      	movs	r5, #0
   20f82:	e730      	b.n	20de6 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x106>
        EI_DSP_MATRIX(mean_matrix, vec_pad.cols, 1);
   20f84:	4f39      	ldr	r7, [pc, #228]	; (2106c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x38c>)
            ei_free(buffer);
   20f86:	4658      	mov	r0, fp
   20f88:	f005 f8bc 	bl	26104 <_Z7ei_freePv>
    }
   20f8c:	4638      	mov	r0, r7
   20f8e:	b011      	add	sp, #68	; 0x44
   20f90:	ecbd 8b02 	vpop	{d8}
   20f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                pad_before_direction_up = false;
   20f98:	4625      	mov	r5, r4
   20f9a:	e6e4      	b.n	20d66 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x86>
                pad_after_direction_up = false;
   20f9c:	4625      	mov	r5, r4
   20f9e:	e722      	b.n	20de6 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x106>
        EI_DSP_MATRIX(vec_pad, features_matrix->rows + (pad_size * 2), features_matrix->cols);
   20fa0:	4f32      	ldr	r7, [pc, #200]	; (2106c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x38c>)
    }
   20fa2:	4638      	mov	r0, r7
   20fa4:	b011      	add	sp, #68	; 0x44
   20fa6:	ecbd 8b02 	vpop	{d8}
   20faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            else if (pad_before_index == input->rows - 1 && pad_before_direction_up) {
   20fae:	f1ba 0f00 	cmp.w	sl, #0
   20fb2:	d0d9      	beq.n	20f68 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x288>
                pad_before_direction_up = false;
   20fb4:	f04f 0a00 	mov.w	sl, #0
   20fb8:	e7bf      	b.n	20f3a <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x25a>
            input->rows * input->cols * sizeof(float));
   20fba:	9b01      	ldr	r3, [sp, #4]
   20fbc:	fb01 f203 	mul.w	r2, r1, r3
        memcpy(output->buffer + (input->cols * pad_before),
   20fc0:	0092      	lsls	r2, r2, #2
   20fc2:	6831      	ldr	r1, [r6, #0]
   20fc4:	f7f7 f91c 	bl	18200 <memcpy>
        for (int32_t ix = 0; ix < pad_after; ix++) {
   20fc8:	e731      	b.n	20e2e <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x14e>
            input->rows * input->cols * sizeof(float));
   20fca:	e9d6 2301 	ldrd	r2, r3, [r6, #4]
   20fce:	fb03 f202 	mul.w	r2, r3, r2
        memcpy(output->buffer + (input->cols * pad_before),
   20fd2:	fb07 f303 	mul.w	r3, r7, r3
   20fd6:	0092      	lsls	r2, r2, #2
   20fd8:	eb0b 0083 	add.w	r0, fp, r3, lsl #2
   20fdc:	6831      	ldr	r1, [r6, #0]
   20fde:	f7f7 f90f 	bl	18200 <memcpy>
        int32_t pad_after_index = input->rows - 1;
   20fe2:	6873      	ldr	r3, [r6, #4]
        memcpy(output->buffer + (input->cols * pad_before),
   20fe4:	464c      	mov	r4, r9
        int32_t pad_after_index = input->rows - 1;
   20fe6:	f04f 0a00 	mov.w	sl, #0
   20fea:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
        for (int32_t ix = 0; ix < pad_after; ix++) {
   20fee:	4622      	mov	r2, r4
        int32_t pad_after_index = input->rows - 1;
   20ff0:	46d0      	mov	r8, sl
   20ff2:	464c      	mov	r4, r9
   20ff4:	46a9      	mov	r9, r5
   20ff6:	4655      	mov	r5, sl
   20ff8:	4692      	mov	sl, r2
   20ffa:	e009      	b.n	21010 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x330>
            if (pad_after_index == 0 && !pad_after_direction_up) {
   20ffc:	b11d      	cbz	r5, 21006 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x326>
            else if (pad_after_index == static_cast<int32_t>(input->rows) - 1 && pad_after_direction_up) {
   20ffe:	2b01      	cmp	r3, #1
   21000:	f000 8168 	beq.w	212d4 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x5f4>
                pad_after_index++;
   21004:	3401      	adds	r4, #1
   21006:	2501      	movs	r5, #1
        for (int32_t ix = 0; ix < pad_after; ix++) {
   21008:	f108 0801 	add.w	r8, r8, #1
   2100c:	4547      	cmp	r7, r8
   2100e:	dd1a      	ble.n	21046 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x366>
            memcpy(output->buffer + (input->cols * (ix + pad_before + input->rows)),
   21010:	68b2      	ldr	r2, [r6, #8]
                input->buffer + (pad_after_index * input->cols),
   21012:	6831      	ldr	r1, [r6, #0]
            memcpy(output->buffer + (input->cols * (ix + pad_before + input->rows)),
   21014:	eb08 0007 	add.w	r0, r8, r7
   21018:	0092      	lsls	r2, r2, #2
   2101a:	4418      	add	r0, r3
   2101c:	fb02 1104 	mla	r1, r2, r4, r1
   21020:	fb02 b000 	mla	r0, r2, r0, fp
   21024:	f7f7 f8ec 	bl	18200 <memcpy>
            else if (pad_after_index == static_cast<int32_t>(input->rows) - 1 && pad_after_direction_up) {
   21028:	6873      	ldr	r3, [r6, #4]
            if (pad_after_index == 0 && !pad_after_direction_up) {
   2102a:	2c00      	cmp	r4, #0
   2102c:	d0e6      	beq.n	20ffc <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x31c>
            else if (pad_after_index == static_cast<int32_t>(input->rows) - 1 && pad_after_direction_up) {
   2102e:	1e5a      	subs	r2, r3, #1
   21030:	42a2      	cmp	r2, r4
   21032:	d004      	beq.n	2103e <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x35e>
            else if (pad_after_direction_up) {
   21034:	2d00      	cmp	r5, #0
   21036:	d1e5      	bne.n	21004 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x324>
                pad_after_index--;
   21038:	3c01      	subs	r4, #1
   2103a:	2500      	movs	r5, #0
   2103c:	e7e4      	b.n	21008 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x328>
            else if (pad_after_index == static_cast<int32_t>(input->rows) - 1 && pad_after_direction_up) {
   2103e:	2d00      	cmp	r5, #0
   21040:	d0fa      	beq.n	21038 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x358>
                pad_after_direction_up = false;
   21042:	2500      	movs	r5, #0
   21044:	e7e0      	b.n	21008 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x328>
   21046:	464d      	mov	r5, r9
   21048:	4654      	mov	r4, sl
        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
   2104a:	2b00      	cmp	r3, #0
   2104c:	f000 815f 	beq.w	2130e <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x62e>
        arm_in_matrix.numCols = input_matrix->cols;
        arm_in_matrix.pData = &input_matrix->buffer[0];
        /* Create transposed matrix */
        arm_transposed_matrix.numRows = input_matrix->cols;
        arm_transposed_matrix.numCols = input_matrix->rows;
        arm_transposed_matrix.pData = (float *)ei_calloc(input_matrix->cols * input_matrix->rows * sizeof(float), 1);
   21050:	2200      	movs	r2, #0
   21052:	fb04 f105 	mul.w	r1, r4, r5
                                             (window_variance.buffer[col] + 1e-10);
   21056:	9603      	str	r6, [sp, #12]
            *pResult = 0;
   21058:	ed9f 8a05 	vldr	s16, [pc, #20]	; 21070 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x390>
   2105c:	f8cd b008 	str.w	fp, [sp, #8]
        arm_transposed_matrix.pData = (float *)ei_calloc(input_matrix->cols * input_matrix->rows * sizeof(float), 1);
   21060:	ee08 1a90 	vmov	s17, r1
   21064:	4690      	mov	r8, r2
   21066:	4616      	mov	r6, r2
   21068:	9404      	str	r4, [sp, #16]
   2106a:	e009      	b.n	21080 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x3a0>
   2106c:	fffffc16 	.word	0xfffffc16
   21070:	00000000 	.word	0x00000000
        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
   21074:	f108 0801 	add.w	r8, r8, #1
   21078:	4598      	cmp	r8, r3
   2107a:	442e      	add	r6, r5
   2107c:	f080 8145 	bcs.w	2130a <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x62a>
            if (variance_normalization == true) {
   21080:	9a06      	ldr	r2, [sp, #24]
   21082:	2a00      	cmp	r2, #0
   21084:	d0f6      	beq.n	21074 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x394>
        arm_in_matrix.numRows = input_matrix->rows;
   21086:	9b04      	ldr	r3, [sp, #16]
   21088:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
        arm_transposed_matrix.numCols = input_matrix->rows;
   2108c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
        arm_in_matrix.numCols = input_matrix->cols;
   21090:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   21094:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
        arm_transposed_matrix.numRows = input_matrix->cols;
   21098:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
        arm_in_matrix.pData = &input_matrix->buffer[0];
   2109c:	9b02      	ldr	r3, [sp, #8]
        arm_transposed_matrix.pData = (float *)ei_calloc(input_matrix->cols * input_matrix->rows * sizeof(float), 1);
   2109e:	ee18 0a90 	vmov	r0, s17
        arm_in_matrix.pData = &input_matrix->buffer[0];
   210a2:	4433      	add	r3, r6
        arm_transposed_matrix.pData = (float *)ei_calloc(input_matrix->cols * input_matrix->rows * sizeof(float), 1);
   210a4:	2101      	movs	r1, #1
        arm_in_matrix.pData = &input_matrix->buffer[0];
   210a6:	930d      	str	r3, [sp, #52]	; 0x34
        arm_transposed_matrix.pData = (float *)ei_calloc(input_matrix->cols * input_matrix->rows * sizeof(float), 1);
   210a8:	f005 f81c 	bl	260e4 <_Z9ei_callocjj>
   210ac:	900f      	str	r0, [sp, #60]	; 0x3c

        if (arm_transposed_matrix.pData == NULL) {
   210ae:	2800      	cmp	r0, #0
   210b0:	f000 81dd 	beq.w	2146e <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x78e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
        }

        int ret = arm_mat_trans_f32(&arm_in_matrix, &arm_transposed_matrix);
   210b4:	a90e      	add	r1, sp, #56	; 0x38
   210b6:	a80c      	add	r0, sp, #48	; 0x30
   210b8:	f012 f9ce 	bl	33458 <arm_mat_trans_f32>
        if (ret != EIDSP_OK) {
   210bc:	2800      	cmp	r0, #0
   210be:	f040 80c2 	bne.w	21246 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x566>
            EIDSP_ERR(ret);
        }

        for (size_t row = 0; row < arm_transposed_matrix.numRows; row++) {
   210c2:	f8bd b038 	ldrh.w	fp, [sp, #56]	; 0x38
   210c6:	f1bb 0f00 	cmp.w	fp, #0
   210ca:	f000 80c3 	beq.w	21254 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x574>
   210ce:	4681      	mov	r9, r0
   210d0:	f8bd c03a 	ldrh.w	ip, [sp, #58]	; 0x3a
            float std;
            float var;

            cmsis_arm_variance(arm_transposed_matrix.pData + (row * arm_transposed_matrix.numCols),
   210d4:	980f      	ldr	r0, [sp, #60]	; 0x3c
   210d6:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
        if (blockSize <= 1U) {
   210da:	f1bc 0f01 	cmp.w	ip, #1
   210de:	d80e      	bhi.n	210fe <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x41e>
            *pResult = 0;
   210e0:	eeb0 0a48 	vmov.f32	s0, s16
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
   210e4:	eef1 7ac0 	vsqrt.f32	s15, s0
        for (size_t row = 0; row < arm_transposed_matrix.numRows; row++) {
   210e8:	f109 0901 	add.w	r9, r9, #1
   210ec:	45cb      	cmp	fp, r9
                               arm_transposed_matrix.numCols, &var);
            arm_sqrt_f32(var, &std);

            output_matrix->buffer[row] = std;
   210ee:	ecea 7a01 	vstmia	sl!, {s15}
        for (size_t row = 0; row < arm_transposed_matrix.numRows; row++) {
   210f2:	f240 80b0 	bls.w	21256 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x576>
   210f6:	f1bc 0f01 	cmp.w	ip, #1
   210fa:	f240 81f4 	bls.w	214e6 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x806>
            cmsis_arm_variance(arm_transposed_matrix.pData + (row * arm_transposed_matrix.numCols),
   210fe:	fb0c f409 	mul.w	r4, ip, r9
        while (blkCnt > 0U) {
   21102:	ea5f 019c 	movs.w	r1, ip, lsr #2
            cmsis_arm_variance(arm_transposed_matrix.pData + (row * arm_transposed_matrix.numCols),
   21106:	eb00 0484 	add.w	r4, r0, r4, lsl #2
        while (blkCnt > 0U) {
   2110a:	f000 80f7 	beq.w	212fc <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x61c>
   2110e:	010f      	lsls	r7, r1, #4
   21110:	f104 0210 	add.w	r2, r4, #16
   21114:	f107 0e10 	add.w	lr, r7, #16
        float32_t sum = 0.0f;
   21118:	eef0 7a48 	vmov.f32	s15, s16
   2111c:	44a6      	add	lr, r4
   2111e:	4613      	mov	r3, r2
            sum += *pInput++;
   21120:	ed13 7a04 	vldr	s14, [r3, #-16]
            sum += *pInput++;
   21124:	ed13 6a03 	vldr	s12, [r3, #-12]
            sum += *pInput++;
   21128:	ed53 6a02 	vldr	s13, [r3, #-8]
            sum += *pInput++;
   2112c:	ee77 7a87 	vadd.f32	s15, s15, s14
        while (blkCnt > 0U) {
   21130:	3310      	adds	r3, #16
            sum += *pInput++;
   21132:	ee77 7a86 	vadd.f32	s15, s15, s12
            sum += *pInput++;
   21136:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
            sum += *pInput++;
   2113a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        while (blkCnt > 0U) {
   2113e:	4573      	cmp	r3, lr
            sum += *pInput++;
   21140:	ee77 7a87 	vadd.f32	s15, s15, s14
        while (blkCnt > 0U) {
   21144:	d1ec      	bne.n	21120 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x440>
        while (blkCnt > 0U) {
   21146:	f01c 0e03 	ands.w	lr, ip, #3
            sum += *pInput++;
   2114a:	eb04 0307 	add.w	r3, r4, r7
        while (blkCnt > 0U) {
   2114e:	f000 80ad 	beq.w	212ac <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x5cc>
            sum += *pInput++;
   21152:	ed93 7a00 	vldr	s14, [r3]
        while (blkCnt > 0U) {
   21156:	f1be 0201 	subs.w	r2, lr, #1
            sum += *pInput++;
   2115a:	ee77 7a87 	vadd.f32	s15, s15, s14
        while (blkCnt > 0U) {
   2115e:	f000 80ac 	beq.w	212ba <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x5da>
            sum += *pInput++;
   21162:	ed93 7a01 	vldr	s14, [r3, #4]
        while (blkCnt > 0U) {
   21166:	2a01      	cmp	r2, #1
            sum += *pInput++;
   21168:	ee77 7a87 	vadd.f32	s15, s15, s14
        while (blkCnt > 0U) {
   2116c:	f000 80b4 	beq.w	212d8 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x5f8>
            sum += *pInput++;
   21170:	ed93 7a02 	vldr	s14, [r3, #8]
        fMean = sum / (float32_t)blockSize;
   21174:	ee06 ca90 	vmov	s13, ip
            sum += *pInput++;
   21178:	ee77 7a87 	vadd.f32	s15, s15, s14
        fMean = sum / (float32_t)blockSize;
   2117c:	eeb8 5a66 	vcvt.f32.u32	s10, s13
   21180:	eec7 5a85 	vdiv.f32	s11, s15, s10
        while (blkCnt > 0U) {
   21184:	2900      	cmp	r1, #0
   21186:	f000 80d0 	beq.w	2132a <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x64a>
   2118a:	f104 0210 	add.w	r2, r4, #16
   2118e:	010f      	lsls	r7, r1, #4
   21190:	4613      	mov	r3, r2
        float32_t fSum = 0.0f;
   21192:	ed5f 7a49 	vldr	s15, [pc, #-292]	; 21070 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x390>
            fValue = *pInput++ - fMean;
   21196:	ed13 7a04 	vldr	s14, [r3, #-16]
            fValue = *pInput++ - fMean;
   2119a:	ed13 6a03 	vldr	s12, [r3, #-12]
            fValue = *pInput++ - fMean;
   2119e:	ed53 6a02 	vldr	s13, [r3, #-8]
            fValue = *pInput++ - fMean;
   211a2:	ee37 7a65 	vsub.f32	s14, s14, s11
            fValue = *pInput++ - fMean;
   211a6:	ee36 6a65 	vsub.f32	s12, s12, s11
            fSum += fValue * fValue;
   211aa:	eee7 7a07 	vfma.f32	s15, s14, s14
        while (blkCnt > 0U) {
   211ae:	3901      	subs	r1, #1
   211b0:	f103 0310 	add.w	r3, r3, #16
            fValue = *pInput++ - fMean;
   211b4:	ee76 6ae5 	vsub.f32	s13, s13, s11
            fSum += fValue * fValue;
   211b8:	eee6 7a06 	vfma.f32	s15, s12, s12
            fValue = *pInput++ - fMean;
   211bc:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
            fSum += fValue * fValue;
   211c0:	eee6 7aa6 	vfma.f32	s15, s13, s13
            fValue = *pInput++ - fMean;
   211c4:	ee37 7a65 	vsub.f32	s14, s14, s11
            fSum += fValue * fValue;
   211c8:	eee7 7a07 	vfma.f32	s15, s14, s14
        while (blkCnt > 0U) {
   211cc:	d1e3      	bne.n	21196 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x4b6>
            fValue = *pInput++ - fMean;
   211ce:	443c      	add	r4, r7
        while (blkCnt > 0U) {
   211d0:	f1be 0f00 	cmp.w	lr, #0
   211d4:	d016      	beq.n	21204 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x524>
   211d6:	f10e 32ff 	add.w	r2, lr, #4294967295	; 0xffffffff
            fValue = *pInput++ - fMean;
   211da:	ecb4 7a01 	vldmia	r4!, {s14}
   211de:	ee37 7a65 	vsub.f32	s14, s14, s11
            fSum += fValue * fValue;
   211e2:	eee7 7a07 	vfma.f32	s15, s14, s14
        while (blkCnt > 0U) {
   211e6:	b16a      	cbz	r2, 21204 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x524>
            fValue = *pInput++ - fMean;
   211e8:	ed94 7a00 	vldr	s14, [r4]
   211ec:	ee37 7a65 	vsub.f32	s14, s14, s11
        while (blkCnt > 0U) {
   211f0:	2a01      	cmp	r2, #1
            fSum += fValue * fValue;
   211f2:	eee7 7a07 	vfma.f32	s15, s14, s14
        while (blkCnt > 0U) {
   211f6:	d005      	beq.n	21204 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x524>
            fValue = *pInput++ - fMean;
   211f8:	ed94 7a01 	vldr	s14, [r4, #4]
   211fc:	ee77 5a65 	vsub.f32	s11, s14, s11
            fSum += fValue * fValue;
   21200:	eee5 7aa5 	vfma.f32	s15, s11, s11
        *pResult = fSum / (float32_t)(blockSize);
   21204:	ee87 0a85 	vdiv.f32	s0, s15, s10
    if (in >= 0.0f)
   21208:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   2120c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21210:	f2c0 808e 	blt.w	21330 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x650>
      *pOut = sqrtf(in);
   21214:	eeb5 0a40 	vcmp.f32	s0, #0.0
   21218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2121c:	f57f af62 	bpl.w	210e4 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x404>
   21220:	f007 fcd0 	bl	28bc4 <sqrtf>
        for (size_t row = 0; row < arm_transposed_matrix.numRows; row++) {
   21224:	f8bd b038 	ldrh.w	fp, [sp, #56]	; 0x38
        }

        ei_free(arm_transposed_matrix.pData);
   21228:	980f      	ldr	r0, [sp, #60]	; 0x3c
            output_matrix->buffer[row] = std;
   2122a:	ecaa 0a01 	vstmia	sl!, {s0}
        for (size_t row = 0; row < arm_transposed_matrix.numRows; row++) {
   2122e:	f109 0901 	add.w	r9, r9, #1
   21232:	45d9      	cmp	r9, fp
   21234:	d20f      	bcs.n	21256 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x576>
   21236:	f8bd c03a 	ldrh.w	ip, [sp, #58]	; 0x3a
   2123a:	e74e      	b.n	210da <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x3fa>
        EI_DSP_MATRIX(window_variance, vec_pad.cols, 1);
   2123c:	4fb4      	ldr	r7, [pc, #720]	; (21510 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x830>)
   2123e:	9808      	ldr	r0, [sp, #32]
   21240:	f004 ff60 	bl	26104 <_Z7ei_freePv>
   21244:	e69f      	b.n	20f86 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x2a6>
   21246:	f8dd b008 	ldr.w	fp, [sp, #8]
   2124a:	4607      	mov	r7, r0
   2124c:	980a      	ldr	r0, [sp, #40]	; 0x28
   2124e:	f004 ff59 	bl	26104 <_Z7ei_freePv>
   21252:	e7f4      	b.n	2123e <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x55e>
        ei_free(arm_transposed_matrix.pData);
   21254:	980f      	ldr	r0, [sp, #60]	; 0x3c
   21256:	f004 ff55 	bl	26104 <_Z7ei_freePv>
                features_buffer_ptr = &features_matrix->buffer[ix * vec_pad.cols];
   2125a:	9b03      	ldr	r3, [sp, #12]
                for (size_t col = 0; col < vec_pad.cols; col++) {
   2125c:	9a01      	ldr	r2, [sp, #4]
                features_buffer_ptr = &features_matrix->buffer[ix * vec_pad.cols];
   2125e:	681b      	ldr	r3, [r3, #0]
   21260:	4433      	add	r3, r6
                for (size_t col = 0; col < vec_pad.cols; col++) {
   21262:	b302      	cbz	r2, 212a6 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x5c6>
   21264:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   21266:	9505      	str	r5, [sp, #20]
   21268:	461c      	mov	r4, r3
   2126a:	eb03 0905 	add.w	r9, r3, r5
                    *(features_buffer_ptr) = (*(features_buffer_ptr)) /
   2126e:	6820      	ldr	r0, [r4, #0]
                                             (window_variance.buffer[col] + 1e-10);
   21270:	f857 5b04 	ldr.w	r5, [r7], #4
                    *(features_buffer_ptr) = (*(features_buffer_ptr)) /
   21274:	f7f7 fbf6 	bl	18a64 <__aeabi_f2d>
   21278:	4682      	mov	sl, r0
                                             (window_variance.buffer[col] + 1e-10);
   2127a:	4628      	mov	r0, r5
                    *(features_buffer_ptr) = (*(features_buffer_ptr)) /
   2127c:	468b      	mov	fp, r1
                                             (window_variance.buffer[col] + 1e-10);
   2127e:	f7f7 fbf1 	bl	18a64 <__aeabi_f2d>
   21282:	a39f      	add	r3, pc, #636	; (adr r3, 21500 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x820>)
   21284:	e9d3 2300 	ldrd	r2, r3, [r3]
   21288:	f7f7 fa8e 	bl	187a8 <__adddf3>
   2128c:	4602      	mov	r2, r0
   2128e:	460b      	mov	r3, r1
                    *(features_buffer_ptr) = (*(features_buffer_ptr)) /
   21290:	4650      	mov	r0, sl
   21292:	4659      	mov	r1, fp
   21294:	f7f7 fd68 	bl	18d68 <__aeabi_ddiv>
   21298:	f7f7 ff14 	bl	190c4 <__aeabi_d2f>
   2129c:	f844 0b04 	str.w	r0, [r4], #4
                for (size_t col = 0; col < vec_pad.cols; col++) {
   212a0:	454c      	cmp	r4, r9
   212a2:	d1e4      	bne.n	2126e <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x58e>
        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
   212a4:	9d05      	ldr	r5, [sp, #20]
   212a6:	9b03      	ldr	r3, [sp, #12]
   212a8:	685b      	ldr	r3, [r3, #4]
   212aa:	e6e3      	b.n	21074 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x394>
        fMean = sum / (float32_t)blockSize;
   212ac:	ee07 ca10 	vmov	s14, ip
   212b0:	eeb8 5a47 	vcvt.f32.u32	s10, s14
   212b4:	eec7 5a85 	vdiv.f32	s11, s15, s10
        while (blkCnt > 0U) {
   212b8:	e76a      	b.n	21190 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x4b0>
        fMean = sum / (float32_t)blockSize;
   212ba:	ee07 ca10 	vmov	s14, ip
   212be:	eeb8 5a47 	vcvt.f32.u32	s10, s14
   212c2:	eec7 5a85 	vdiv.f32	s11, s15, s10
        while (blkCnt > 0U) {
   212c6:	2900      	cmp	r1, #0
   212c8:	d040      	beq.n	2134c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x66c>
   212ca:	f04f 0e01 	mov.w	lr, #1
   212ce:	e75c      	b.n	2118a <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x4aa>
                pad_before_direction_up = false;
   212d0:	46a2      	mov	sl, r4
   212d2:	e632      	b.n	20f3a <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x25a>
                pad_after_direction_up = false;
   212d4:	4625      	mov	r5, r4
   212d6:	e697      	b.n	21008 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x328>
        fMean = sum / (float32_t)blockSize;
   212d8:	ee07 ca10 	vmov	s14, ip
   212dc:	eeb8 5a47 	vcvt.f32.u32	s10, s14
   212e0:	eec7 5a85 	vdiv.f32	s11, s15, s10
        while (blkCnt > 0U) {
   212e4:	2900      	cmp	r1, #0
   212e6:	f47f af50 	bne.w	2118a <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x4aa>
            fValue = *pInput++ - fMean;
   212ea:	ecb4 7a01 	vldmia	r4!, {s14}
   212ee:	ee37 7a65 	vsub.f32	s14, s14, s11
            fSum += fValue * fValue;
   212f2:	eef0 7a48 	vmov.f32	s15, s16
   212f6:	eee7 7a07 	vfma.f32	s15, s14, s14
        while (blkCnt > 0U) {
   212fa:	e775      	b.n	211e8 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x508>
        while (blkCnt > 0U) {
   212fc:	f01c 0e03 	ands.w	lr, ip, #3
   21300:	d00c      	beq.n	2131c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x63c>
        float32_t sum = 0.0f;
   21302:	eef0 7a48 	vmov.f32	s15, s16
            cmsis_arm_variance(arm_transposed_matrix.pData + (row * arm_transposed_matrix.numCols),
   21306:	4623      	mov	r3, r4
   21308:	e723      	b.n	21152 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x472>
   2130a:	e9dd b602 	ldrd	fp, r6, [sp, #8]
        if (scale) {
   2130e:	9a07      	ldr	r2, [sp, #28]
   21310:	2a00      	cmp	r2, #0
   21312:	d133      	bne.n	2137c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x69c>
   21314:	4617      	mov	r7, r2
   21316:	e799      	b.n	2124c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x56c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
   21318:	4f7e      	ldr	r7, [pc, #504]	; (21514 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x834>)
   2131a:	e634      	b.n	20f86 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x2a6>
        fMean = sum / (float32_t)blockSize;
   2131c:	ee07 ca90 	vmov	s15, ip
   21320:	eeb8 5a67 	vcvt.f32.u32	s10, s15
        float32_t fSum = 0.0f;
   21324:	eddf 7a7c 	vldr	s15, [pc, #496]	; 21518 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x838>
   21328:	e76c      	b.n	21204 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x524>
   2132a:	eddf 7a7b 	vldr	s15, [pc, #492]	; 21518 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x838>
   2132e:	e754      	b.n	211da <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x4fa>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
   21330:	eeb0 0a48 	vmov.f32	s0, s16
   21334:	e779      	b.n	2122a <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x54a>
        memcpy(output->buffer + (input->cols * pad_before),
   21336:	461a      	mov	r2, r3
            input->rows * input->cols * sizeof(float));
   21338:	9b01      	ldr	r3, [sp, #4]
        memcpy(output->buffer + (input->cols * pad_before),
   2133a:	6831      	ldr	r1, [r6, #0]
            input->rows * input->cols * sizeof(float));
   2133c:	fb03 f202 	mul.w	r2, r3, r2
        memcpy(output->buffer + (input->cols * pad_before),
   21340:	0092      	lsls	r2, r2, #2
   21342:	4658      	mov	r0, fp
   21344:	f7f6 ff5c 	bl	18200 <memcpy>
        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
   21348:	6873      	ldr	r3, [r6, #4]
   2134a:	e67e      	b.n	2104a <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x36a>
            fValue = *pInput++ - fMean;
   2134c:	edd4 7a00 	vldr	s15, [r4]
   21350:	ee77 5ae5 	vsub.f32	s11, s15, s11
            fSum += fValue * fValue;
   21354:	eef0 7a48 	vmov.f32	s15, s16
   21358:	eee5 7aa5 	vfma.f32	s15, s11, s11
        while (blkCnt > 0U) {
   2135c:	e752      	b.n	21204 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x524>
        if (output->cols != input->cols) {
   2135e:	68b3      	ldr	r3, [r6, #8]
   21360:	9a01      	ldr	r2, [sp, #4]
   21362:	429a      	cmp	r2, r3
   21364:	f040 8087 	bne.w	21476 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x796>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
   21368:	4f6c      	ldr	r7, [pc, #432]	; (2151c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x83c>)
   2136a:	4b6a      	ldr	r3, [pc, #424]	; (21514 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x834>)
   2136c:	9a03      	ldr	r2, [sp, #12]
   2136e:	9905      	ldr	r1, [sp, #20]
   21370:	428a      	cmp	r2, r1
   21372:	bf18      	it	ne
   21374:	461f      	movne	r7, r3
   21376:	e769      	b.n	2124c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x56c>
            EIDSP_ERR(EIDSP_INPUT_MATRIX_EMPTY);
   21378:	4f68      	ldr	r7, [pc, #416]	; (2151c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x83c>)
   2137a:	e604      	b.n	20f86 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x2a6>
        matrix_t temp_matrix(1, matrix->rows * matrix->cols, matrix->buffer);
   2137c:	68b4      	ldr	r4, [r6, #8]
   2137e:	6835      	ldr	r5, [r6, #0]
   21380:	fb03 f404 	mul.w	r4, r3, r4
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   21384:	2101      	movs	r1, #1
        if (a_buffer) {
   21386:	2d00      	cmp	r5, #0
   21388:	f000 808a 	beq.w	214a0 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x7c0>
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   2138c:	2004      	movs	r0, #4
   2138e:	f004 fea9 	bl	260e4 <_Z9ei_callocjj>
        if (!min_matrix.buffer) {
   21392:	4606      	mov	r6, r0
   21394:	2800      	cmp	r0, #0
   21396:	f000 8081 	beq.w	2149c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x7bc>
            arm_min_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &min, &ix);
   2139a:	f10d 0938 	add.w	r9, sp, #56	; 0x38
   2139e:	af0c      	add	r7, sp, #48	; 0x30
   213a0:	464b      	mov	r3, r9
   213a2:	463a      	mov	r2, r7
   213a4:	4621      	mov	r1, r4
   213a6:	4628      	mov	r0, r5
   213a8:	f012 f8a8 	bl	334fc <arm_min_f32>
            output_matrix->buffer[row] = min;
   213ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   213ae:	6033      	str	r3, [r6, #0]
   213b0:	2101      	movs	r1, #1
   213b2:	2004      	movs	r0, #4
   213b4:	f004 fe96 	bl	260e4 <_Z9ei_callocjj>
        if (!max_matrix.buffer) {
   213b8:	4680      	mov	r8, r0
   213ba:	2800      	cmp	r0, #0
   213bc:	d06b      	beq.n	21496 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x7b6>
   213be:	2300      	movs	r3, #0
   213c0:	9307      	str	r3, [sp, #28]
            arm_max_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &max, &ix);
   213c2:	464b      	mov	r3, r9
   213c4:	463a      	mov	r2, r7
   213c6:	4621      	mov	r1, r4
   213c8:	4628      	mov	r0, r5
   213ca:	f012 f873 	bl	334b4 <arm_max_f32>
            output_matrix->buffer[row] = max;
   213ce:	ed9d 8a0c 	vldr	s16, [sp, #48]	; 0x30
   213d2:	ed88 8a00 	vstr	s16, [r8]
        float min_max_diff = (max_matrix.buffer[0] - min_matrix.buffer[0]);
   213d6:	edd6 8a00 	vldr	s17, [r6]
   213da:	ee38 8a68 	vsub.f32	s16, s16, s17
        float row_scale = min_max_diff < 0.001 ? 1.0f : 1.0f / min_max_diff;
   213de:	ee18 0a10 	vmov	r0, s16
   213e2:	f7f7 fb3f 	bl	18a64 <__aeabi_f2d>
   213e6:	a348      	add	r3, pc, #288	; (adr r3, 21508 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x828>)
   213e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   213ec:	f7f7 fe04 	bl	18ff8 <__aeabi_dcmplt>
   213f0:	2800      	cmp	r0, #0
   213f2:	d14b      	bne.n	2148c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x7ac>
   213f4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   213f8:	ee87 0a88 	vdiv.f32	s0, s15, s16
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   213fc:	2c00      	cmp	r4, #0
   213fe:	d03c      	beq.n	2147a <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x79a>
   21400:	462b      	mov	r3, r5
   21402:	eb05 0284 	add.w	r2, r5, r4, lsl #2
            matrix->buffer[ix] -= subtraction;
   21406:	edd3 7a00 	vldr	s15, [r3]
   2140a:	ee77 7ae8 	vsub.f32	s15, s15, s17
   2140e:	ece3 7a01 	vstmia	r3!, {s15}
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   21412:	4293      	cmp	r3, r2
   21414:	d1f7      	bne.n	21406 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x726>
        if (scale == 1.0f) return EIDSP_OK;
   21416:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   2141a:	eeb4 0a67 	vcmp.f32	s0, s15
   2141e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21422:	d02f      	beq.n	21484 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x7a4>
        if (matrix->rows > EI_MAX_UINT16 || matrix->cols > EI_MAX_UINT16) {
   21424:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   21428:	d22e      	bcs.n	21488 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x7a8>
        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
   2142a:	2301      	movs	r3, #1
   2142c:	b2a4      	uxth	r4, r4
        int status = arm_mat_scale_f32(&mi, scale, &mo);
   2142e:	4638      	mov	r0, r7
   21430:	4649      	mov	r1, r9
        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
   21432:	f8ad 4032 	strh.w	r4, [sp, #50]	; 0x32
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
   21436:	f8ad 403a 	strh.w	r4, [sp, #58]	; 0x3a
        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
   2143a:	950d      	str	r5, [sp, #52]	; 0x34
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
   2143c:	950f      	str	r5, [sp, #60]	; 0x3c
        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
   2143e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
   21442:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
        int status = arm_mat_scale_f32(&mi, scale, &mo);
   21446:	f011 fff5 	bl	33434 <arm_mat_scale_f32>
   2144a:	4607      	mov	r7, r0
            ei_free(buffer);
   2144c:	4640      	mov	r0, r8
   2144e:	f004 fe59 	bl	26104 <_Z7ei_freePv>
   21452:	4630      	mov	r0, r6
   21454:	f004 fe56 	bl	26104 <_Z7ei_freePv>
        if (buffer && buffer_managed_by_me) {
   21458:	2d00      	cmp	r5, #0
   2145a:	f43f aef7 	beq.w	2124c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x56c>
   2145e:	9b07      	ldr	r3, [sp, #28]
   21460:	2b00      	cmp	r3, #0
   21462:	f43f aef3 	beq.w	2124c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x56c>
            ei_free(buffer);
   21466:	4628      	mov	r0, r5
   21468:	f004 fe4c 	bl	26104 <_Z7ei_freePv>
   2146c:	e6ee      	b.n	2124c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x56c>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
   2146e:	f8dd b008 	ldr.w	fp, [sp, #8]
   21472:	4f27      	ldr	r7, [pc, #156]	; (21510 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x830>)
   21474:	e6ea      	b.n	2124c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x56c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
   21476:	4f27      	ldr	r7, [pc, #156]	; (21514 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x834>)
   21478:	e6e8      	b.n	2124c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x56c>
        if (scale == 1.0f) return EIDSP_OK;
   2147a:	eeb4 0a67 	vcmp.f32	s0, s15
   2147e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21482:	d1d2      	bne.n	2142a <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x74a>
        return EIDSP_OK;
   21484:	2700      	movs	r7, #0
   21486:	e7e1      	b.n	2144c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x76c>
            return EIDSP_NARROWING;
   21488:	4f25      	ldr	r7, [pc, #148]	; (21520 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x840>)
   2148a:	e7df      	b.n	2144c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x76c>
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   2148c:	2c00      	cmp	r4, #0
   2148e:	d0f9      	beq.n	21484 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x7a4>
        float row_scale = min_max_diff < 0.001 ? 1.0f : 1.0f / min_max_diff;
   21490:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   21494:	e7b4      	b.n	21400 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x720>
   21496:	4630      	mov	r0, r6
   21498:	f004 fe34 	bl	26104 <_Z7ei_freePv>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
   2149c:	4f1c      	ldr	r7, [pc, #112]	; (21510 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x830>)
   2149e:	e6d5      	b.n	2124c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x56c>
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   214a0:	00a0      	lsls	r0, r4, #2
   214a2:	f004 fe1f 	bl	260e4 <_Z9ei_callocjj>
   214a6:	2101      	movs	r1, #1
   214a8:	4605      	mov	r5, r0
   214aa:	2004      	movs	r0, #4
   214ac:	f004 fe1a 	bl	260e4 <_Z9ei_callocjj>
        if (!min_matrix.buffer) {
   214b0:	4606      	mov	r6, r0
   214b2:	b1a0      	cbz	r0, 214de <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x7fe>
            arm_min_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &min, &ix);
   214b4:	f10d 0938 	add.w	r9, sp, #56	; 0x38
   214b8:	af0c      	add	r7, sp, #48	; 0x30
   214ba:	464b      	mov	r3, r9
   214bc:	463a      	mov	r2, r7
   214be:	4621      	mov	r1, r4
   214c0:	4628      	mov	r0, r5
   214c2:	f012 f81b 	bl	334fc <arm_min_f32>
            output_matrix->buffer[row] = min;
   214c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   214c8:	6033      	str	r3, [r6, #0]
   214ca:	2101      	movs	r1, #1
   214cc:	2004      	movs	r0, #4
   214ce:	f004 fe09 	bl	260e4 <_Z9ei_callocjj>
        if (!max_matrix.buffer) {
   214d2:	4680      	mov	r8, r0
   214d4:	2800      	cmp	r0, #0
   214d6:	f47f af74 	bne.w	213c2 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x6e2>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
   214da:	4f0d      	ldr	r7, [pc, #52]	; (21510 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x830>)
   214dc:	e7b9      	b.n	21452 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x772>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
   214de:	4f0c      	ldr	r7, [pc, #48]	; (21510 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x830>)
        if (buffer && buffer_managed_by_me) {
   214e0:	2d00      	cmp	r5, #0
   214e2:	d1c0      	bne.n	21466 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x786>
   214e4:	e6b2      	b.n	2124c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x56c>
   214e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   214e8:	eb03 0389 	add.w	r3, r3, r9, lsl #2
        for (size_t row = 0; row < arm_transposed_matrix.numRows; row++) {
   214ec:	f109 0901 	add.w	r9, r9, #1
   214f0:	45cb      	cmp	fp, r9
            output_matrix->buffer[row] = std;
   214f2:	eca3 8a01 	vstmia	r3!, {s16}
        for (size_t row = 0; row < arm_transposed_matrix.numRows; row++) {
   214f6:	d8f9      	bhi.n	214ec <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x80c>
   214f8:	e6ad      	b.n	21256 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x576>
   214fa:	bf00      	nop
   214fc:	f3af 8000 	nop.w
   21500:	d9d7bdbb 	.word	0xd9d7bdbb
   21504:	3ddb7cdf 	.word	0x3ddb7cdf
   21508:	d2f1a9fc 	.word	0xd2f1a9fc
   2150c:	3f50624d 	.word	0x3f50624d
   21510:	fffffc16 	.word	0xfffffc16
   21514:	fffffc14 	.word	0xfffffc14
   21518:	00000000 	.word	0x00000000
   2151c:	fffffc12 	.word	0xfffffc12
   21520:	fffffc0c 	.word	0xfffffc0c

00021524 <_ZSt25__throw_bad_function_callv>:
#endif // __cplusplus

// required on Adafruit nRF52, it seems not to matter too much on other targets...
#ifdef __cplusplus
namespace std {
    __attribute__((weak)) void __throw_bad_function_call() { while(1); };
   21524:	e7fe      	b.n	21524 <_ZSt25__throw_bad_function_callv>
   21526:	bf00      	nop

00021528 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf>:

    return EIDSP_OK;
}

static class speechpy::processing::preemphasis *preemphasis;
static int preemphasized_audio_signal_get_data(size_t offset, size_t length, float *out_ptr) {
   21528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return preemphasis->get_data(offset, length, out_ptr);
   2152c:	4bad      	ldr	r3, [pc, #692]	; (217e4 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x2bc>)
static int preemphasized_audio_signal_get_data(size_t offset, size_t length, float *out_ptr) {
   2152e:	ed2d 8b02 	vpush	{d8}
    return preemphasis->get_data(offset, length, out_ptr);
   21532:	681e      	ldr	r6, [r3, #0]
            if (!_prev_buffer || !_end_of_signal_buffer) {
   21534:	68f4      	ldr	r4, [r6, #12]
static int preemphasized_audio_signal_get_data(size_t offset, size_t length, float *out_ptr) {
   21536:	b091      	sub	sp, #68	; 0x44
   21538:	e9cd 1203 	strd	r1, r2, [sp, #12]
   2153c:	2c00      	cmp	r4, #0
   2153e:	f000 8142 	beq.w	217c6 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x29e>
   21542:	6933      	ldr	r3, [r6, #16]
   21544:	2b00      	cmp	r3, #0
   21546:	f000 813e 	beq.w	217c6 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x29e>
   2154a:	4681      	mov	r9, r0
            if (offset + length > _signal->total_length) {
   2154c:	6830      	ldr	r0, [r6, #0]
   2154e:	6902      	ldr	r2, [r0, #16]
   21550:	eb09 0301 	add.w	r3, r9, r1
   21554:	4293      	cmp	r3, r2
   21556:	f200 812c 	bhi.w	217b2 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x28a>
            if (static_cast<int32_t>(offset) - _shift >= 0) {
   2155a:	6873      	ldr	r3, [r6, #4]
   2155c:	ebb9 0203 	subs.w	r2, r9, r3
   21560:	d410      	bmi.n	21584 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x5c>
                ret = _signal->get_data(offset - _shift, _shift, _prev_buffer);
   21562:	e9cd 430b 	strd	r4, r3, [sp, #44]	; 0x2c
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   21566:	6883      	ldr	r3, [r0, #8]
   21568:	920e      	str	r2, [sp, #56]	; 0x38
   2156a:	2b00      	cmp	r3, #0
   2156c:	f000 8131 	beq.w	217d2 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x2aa>
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   21570:	68c4      	ldr	r4, [r0, #12]
   21572:	ab0b      	add	r3, sp, #44	; 0x2c
   21574:	aa0c      	add	r2, sp, #48	; 0x30
   21576:	a90e      	add	r1, sp, #56	; 0x38
   21578:	47a0      	blx	r4
                if (ret != 0) {
   2157a:	9002      	str	r0, [sp, #8]
   2157c:	2800      	cmp	r0, #0
   2157e:	f040 80c1 	bne.w	21704 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x1dc>
            ret = _signal->get_data(offset, length, out_buffer);
   21582:	6830      	ldr	r0, [r6, #0]
      if (_M_empty())
   21584:	6883      	ldr	r3, [r0, #8]
   21586:	9d03      	ldr	r5, [sp, #12]
   21588:	9f04      	ldr	r7, [sp, #16]
   2158a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   2158e:	9509      	str	r5, [sp, #36]	; 0x24
   21590:	9708      	str	r7, [sp, #32]
   21592:	2b00      	cmp	r3, #0
   21594:	f000 811d 	beq.w	217d2 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x2aa>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   21598:	68c4      	ldr	r4, [r0, #12]
   2159a:	ab08      	add	r3, sp, #32
   2159c:	aa09      	add	r2, sp, #36	; 0x24
   2159e:	a90a      	add	r1, sp, #40	; 0x28
   215a0:	47a0      	blx	r4
            if (ret != 0) {
   215a2:	9002      	str	r0, [sp, #8]
   215a4:	2800      	cmp	r0, #0
   215a6:	f040 80ad 	bne.w	21704 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x1dc>
            for (size_t ix = 0; ix < length; ix++) {
   215aa:	2d00      	cmp	r5, #0
   215ac:	f000 80aa 	beq.w	21704 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x1dc>
   215b0:	1e6b      	subs	r3, r5, #1
   215b2:	eb03 0a09 	add.w	sl, r3, r9
            bool all_between_min_1_and_1 = true;
   215b6:	2301      	movs	r3, #1
   215b8:	eba3 0b09 	sub.w	fp, r3, r9
                if (_rescale && all_between_min_1_and_1) {
   215bc:	464d      	mov	r5, r9
            bool all_between_min_1_and_1 = true;
   215be:	9301      	str	r3, [sp, #4]
                if (offset + ix < static_cast<uint32_t>(_shift)) {
   215c0:	6874      	ldr	r4, [r6, #4]
                    out_buffer[ix] = now - (_cof * _prev_buffer[0]);
   215c2:	f8d6 800c 	ldr.w	r8, [r6, #12]
                if (_rescale && all_between_min_1_and_1) {
   215c6:	7e30      	ldrb	r0, [r6, #24]
   215c8:	464b      	mov	r3, r9
                    if (out_buffer[ix] < -1.0f || out_buffer[ix] > 1.0f) {
   215ca:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
   215ce:	46d1      	mov	r9, sl
   215d0:	e000      	b.n	215d4 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0xac>
            for (size_t ix = 0; ix < length; ix++) {
   215d2:	4614      	mov	r4, r2
                if (offset + ix < static_cast<uint32_t>(_shift)) {
   215d4:	42ac      	cmp	r4, r5
                    out_buffer[ix] = now - (_cof * _end_of_signal_buffer[offset + ix]);
   215d6:	bf88      	it	hi
   215d8:	6932      	ldrhi	r2, [r6, #16]
                float now = out_buffer[ix];
   215da:	ecb7 8a01 	vldmia	r7!, {s16}
                    out_buffer[ix] = now - (_cof * _end_of_signal_buffer[offset + ix]);
   215de:	edd6 6a02 	vldr	s13, [r6, #8]
                    out_buffer[ix] = now - (_cof * _prev_buffer[0]);
   215e2:	bf92      	itee	ls
   215e4:	ed98 7a00 	vldrls	s14, [r8]
                    out_buffer[ix] = now - (_cof * _end_of_signal_buffer[offset + ix]);
   215e8:	eb02 0285 	addhi.w	r2, r2, r5, lsl #2
   215ec:	ed92 7a00 	vldrhi	s14, [r2]
                    out_buffer[ix] = now - (_cof * _prev_buffer[0]);
   215f0:	eef0 7a48 	vmov.f32	s15, s16
   215f4:	eee6 7ac7 	vfms.f32	s15, s13, s14
   215f8:	ed47 7a01 	vstr	s15, [r7, #-4]
                if (_rescale && all_between_min_1_and_1) {
   215fc:	b188      	cbz	r0, 21622 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0xfa>
   215fe:	9a01      	ldr	r2, [sp, #4]
   21600:	b17a      	cbz	r2, 21622 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0xfa>
                    if (out_buffer[ix] < -1.0f || out_buffer[ix] > 1.0f) {
   21602:	eef4 7ae8 	vcmpe.f32	s15, s17
   21606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2160a:	f100 80a8 	bmi.w	2175e <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x236>
   2160e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   21612:	eef4 7ac7 	vcmpe.f32	s15, s14
   21616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2161a:	bfd4      	ite	le
   2161c:	2201      	movle	r2, #1
   2161e:	2200      	movgt	r2, #0
   21620:	9201      	str	r2, [sp, #4]
                if (_shift != 1) {
   21622:	2c01      	cmp	r4, #1
   21624:	d174      	bne.n	21710 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x1e8>
   21626:	4622      	mov	r2, r4
   21628:	46a4      	mov	ip, r4
                _prev_buffer[_shift - 1] = now;
   2162a:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
   2162e:	448c      	add	ip, r1
   21630:	eb08 0c8c 	add.w	ip, r8, ip, lsl #2
            for (size_t ix = 0; ix < length; ix++) {
   21634:	45a9      	cmp	r9, r5
                _prev_buffer[_shift - 1] = now;
   21636:	ed8c 8a00 	vstr	s16, [ip]
            for (size_t ix = 0; ix < length; ix++) {
   2163a:	eb0b 0c05 	add.w	ip, fp, r5
   2163e:	d03b      	beq.n	216b8 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x190>
   21640:	2c01      	cmp	r4, #1
   21642:	f105 0501 	add.w	r5, r5, #1
   21646:	d1c4      	bne.n	215d2 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0xaa>
                _prev_buffer[_shift - 1] = now;
   21648:	4699      	mov	r9, r3
   2164a:	9b04      	ldr	r3, [sp, #16]
   2164c:	9d01      	ldr	r5, [sp, #4]
   2164e:	4411      	add	r1, r2
   21650:	44e1      	add	r9, ip
   21652:	eb08 0181 	add.w	r1, r8, r1, lsl #2
                    if (out_buffer[ix] < -1.0f || out_buffer[ix] > 1.0f) {
   21656:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
   2165a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   2165e:	eb03 048c 	add.w	r4, r3, ip, lsl #2
                if (offset + ix < static_cast<uint32_t>(_shift)) {
   21662:	4591      	cmp	r9, r2
                float now = out_buffer[ix];
   21664:	ecb4 7a01 	vldmia	r4!, {s14}
                if (offset + ix < static_cast<uint32_t>(_shift)) {
   21668:	f080 80c6 	bcs.w	217f8 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x2d0>
                    out_buffer[ix] = now - (_cof * _end_of_signal_buffer[offset + ix]);
   2166c:	6933      	ldr	r3, [r6, #16]
   2166e:	edd6 5a02 	vldr	s11, [r6, #8]
   21672:	eb03 0389 	add.w	r3, r3, r9, lsl #2
   21676:	ed93 5a00 	vldr	s10, [r3]
   2167a:	eef0 7a47 	vmov.f32	s15, s14
   2167e:	eee5 7a65 	vfms.f32	s15, s10, s11
   21682:	ed44 7a01 	vstr	s15, [r4, #-4]
                if (_rescale && all_between_min_1_and_1) {
   21686:	b168      	cbz	r0, 216a4 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x17c>
   21688:	b165      	cbz	r5, 216a4 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x17c>
                    if (out_buffer[ix] < -1.0f || out_buffer[ix] > 1.0f) {
   2168a:	eef4 7ac6 	vcmpe.f32	s15, s12
   2168e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21692:	f100 80ba 	bmi.w	2180a <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x2e2>
   21696:	eef4 7ae6 	vcmpe.f32	s15, s13
   2169a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2169e:	bfd4      	ite	le
   216a0:	2501      	movle	r5, #1
   216a2:	2500      	movgt	r5, #0
            for (size_t ix = 0; ix < length; ix++) {
   216a4:	9b03      	ldr	r3, [sp, #12]
                _prev_buffer[_shift - 1] = now;
   216a6:	ed81 7a00 	vstr	s14, [r1]
            for (size_t ix = 0; ix < length; ix++) {
   216aa:	f10c 0c01 	add.w	ip, ip, #1
   216ae:	4563      	cmp	r3, ip
   216b0:	f109 0901 	add.w	r9, r9, #1
   216b4:	d8d5      	bhi.n	21662 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x13a>
   216b6:	9501      	str	r5, [sp, #4]
            _next_offset_should_be += length;
   216b8:	6973      	ldr	r3, [r6, #20]
   216ba:	9a03      	ldr	r2, [sp, #12]
   216bc:	4413      	add	r3, r2
   216be:	6173      	str	r3, [r6, #20]
            if (_rescale && !all_between_min_1_and_1) {
   216c0:	b300      	cbz	r0, 21704 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x1dc>
   216c2:	9b01      	ldr	r3, [sp, #4]
   216c4:	b9f3      	cbnz	r3, 21704 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x1dc>
        if (a_buffer) {
   216c6:	9b04      	ldr	r3, [sp, #16]
   216c8:	2b00      	cmp	r3, #0
   216ca:	d051      	beq.n	21770 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x248>
        if (matrix->rows > EI_MAX_UINT16 || matrix->cols > EI_MAX_UINT16) {
   216cc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   216d0:	d27c      	bcs.n	217cc <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x2a4>
        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
   216d2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   216d6:	9c04      	ldr	r4, [sp, #16]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
   216d8:	ed9f 0a43 	vldr	s0, [pc, #268]	; 217e8 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x2c0>
        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
   216dc:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
   216e0:	2201      	movs	r2, #1
        int status = arm_mat_scale_f32(&mi, scale, &mo);
   216e2:	a90e      	add	r1, sp, #56	; 0x38
   216e4:	a80c      	add	r0, sp, #48	; 0x30
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
   216e6:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
   216ea:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
   216ee:	940d      	str	r4, [sp, #52]	; 0x34
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
   216f0:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
   216f4:	940f      	str	r4, [sp, #60]	; 0x3c
        int status = arm_mat_scale_f32(&mi, scale, &mo);
   216f6:	f011 fe9d 	bl	33434 <arm_mat_scale_f32>
        if (status != ARM_MATH_SUCCESS) {
   216fa:	9b02      	ldr	r3, [sp, #8]
   216fc:	2800      	cmp	r0, #0
   216fe:	bf18      	it	ne
   21700:	4603      	movne	r3, r0
   21702:	9302      	str	r3, [sp, #8]
}
   21704:	9802      	ldr	r0, [sp, #8]
   21706:	b011      	add	sp, #68	; 0x44
   21708:	ecbd 8b02 	vpop	{d8}
   2170c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   21710:	9306      	str	r3, [sp, #24]
            shift = input_array_size + shift;
   21712:	1e63      	subs	r3, r4, #1
   21714:	009a      	lsls	r2, r3, #2
   21716:	4610      	mov	r0, r2
   21718:	2101      	movs	r1, #1
   2171a:	9307      	str	r3, [sp, #28]
   2171c:	9205      	str	r2, [sp, #20]
   2171e:	f004 fce1 	bl	260e4 <_Z9ei_callocjj>
        EI_DSP_MATRIX(shift_matrix, 1, shift);
   21722:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   21726:	4682      	mov	sl, r0
   21728:	b1e0      	cbz	r0, 21764 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x23c>
        memcpy(shift_matrix.buffer, input_array + input_array_size - shift, shift * sizeof(float));
   2172a:	f108 0104 	add.w	r1, r8, #4
   2172e:	9306      	str	r3, [sp, #24]
   21730:	9205      	str	r2, [sp, #20]
   21732:	f7f6 fd65 	bl	18200 <memcpy>
        memmove(input_array + shift, input_array, (input_array_size - shift) * sizeof(float));
   21736:	9b07      	ldr	r3, [sp, #28]
   21738:	f8d8 1000 	ldr.w	r1, [r8]
   2173c:	f848 1023 	str.w	r1, [r8, r3, lsl #2]
        memcpy(input_array, shift_matrix.buffer, shift * sizeof(float));
   21740:	9a05      	ldr	r2, [sp, #20]
   21742:	4640      	mov	r0, r8
   21744:	4651      	mov	r1, sl
   21746:	f7f6 fd5b 	bl	18200 <memcpy>
            ei_free(buffer);
   2174a:	4650      	mov	r0, sl
   2174c:	f004 fcda 	bl	26104 <_Z7ei_freePv>
                _prev_buffer[_shift - 1] = now;
   21750:	6872      	ldr	r2, [r6, #4]
   21752:	f8d6 800c 	ldr.w	r8, [r6, #12]
            if (_rescale && !all_between_min_1_and_1) {
   21756:	7e30      	ldrb	r0, [r6, #24]
                _prev_buffer[_shift - 1] = now;
   21758:	9b06      	ldr	r3, [sp, #24]
   2175a:	4694      	mov	ip, r2
   2175c:	e765      	b.n	2162a <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x102>
   2175e:	2200      	movs	r2, #0
   21760:	9201      	str	r2, [sp, #4]
   21762:	e75e      	b.n	21622 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0xfa>
   21764:	6872      	ldr	r2, [r6, #4]
   21766:	f8d6 800c 	ldr.w	r8, [r6, #12]
            if (_rescale && !all_between_min_1_and_1) {
   2176a:	7e30      	ldrb	r0, [r6, #24]
                _prev_buffer[_shift - 1] = now;
   2176c:	4694      	mov	ip, r2
   2176e:	e75c      	b.n	2162a <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x102>
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   21770:	2101      	movs	r1, #1
   21772:	0090      	lsls	r0, r2, #2
   21774:	4615      	mov	r5, r2
   21776:	f004 fcb5 	bl	260e4 <_Z9ei_callocjj>
        if (matrix->rows > EI_MAX_UINT16 || matrix->cols > EI_MAX_UINT16) {
   2177a:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   2177e:	4604      	mov	r4, r0
   21780:	d21a      	bcs.n	217b8 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x290>
        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
   21782:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   21786:	900d      	str	r0, [sp, #52]	; 0x34
   21788:	2301      	movs	r3, #1
        int status = arm_mat_scale_f32(&mi, scale, &mo);
   2178a:	ed9f 0a17 	vldr	s0, [pc, #92]	; 217e8 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x2c0>
        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
   2178e:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
        int status = arm_mat_scale_f32(&mi, scale, &mo);
   21792:	a90e      	add	r1, sp, #56	; 0x38
   21794:	a80c      	add	r0, sp, #48	; 0x30
        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
   21796:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
   2179a:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
   2179e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
   217a2:	940f      	str	r4, [sp, #60]	; 0x3c
        int status = arm_mat_scale_f32(&mi, scale, &mo);
   217a4:	f011 fe46 	bl	33434 <arm_mat_scale_f32>
   217a8:	4605      	mov	r5, r0
        if (status != ARM_MATH_SUCCESS) {
   217aa:	b1a0      	cbz	r0, 217d6 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x2ae>
        if (buffer && buffer_managed_by_me) {
   217ac:	b934      	cbnz	r4, 217bc <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x294>
   217ae:	9002      	str	r0, [sp, #8]
   217b0:	e7a8      	b.n	21704 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x1dc>
                EIDSP_ERR(EIDSP_OUT_OF_BOUNDS);
   217b2:	4b0e      	ldr	r3, [pc, #56]	; (217ec <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x2c4>)
   217b4:	9302      	str	r3, [sp, #8]
    return preemphasis->get_data(offset, length, out_ptr);
   217b6:	e7a5      	b.n	21704 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x1dc>
   217b8:	b140      	cbz	r0, 217cc <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x2a4>
            return EIDSP_NARROWING;
   217ba:	4d0d      	ldr	r5, [pc, #52]	; (217f0 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x2c8>)
            ei_free(buffer);
   217bc:	4620      	mov	r0, r4
   217be:	f004 fca1 	bl	26104 <_Z7ei_freePv>
   217c2:	9502      	str	r5, [sp, #8]
   217c4:	e79e      	b.n	21704 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x1dc>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
   217c6:	4b0b      	ldr	r3, [pc, #44]	; (217f4 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x2cc>)
   217c8:	9302      	str	r3, [sp, #8]
   217ca:	e79b      	b.n	21704 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x1dc>
   217cc:	4b08      	ldr	r3, [pc, #32]	; (217f0 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x2c8>)
   217ce:	9302      	str	r3, [sp, #8]
   217d0:	e798      	b.n	21704 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x1dc>
	__throw_bad_function_call();
   217d2:	f7ff fea7 	bl	21524 <_ZSt25__throw_bad_function_callv>
        if (buffer && buffer_managed_by_me) {
   217d6:	2c00      	cmp	r4, #0
   217d8:	d094      	beq.n	21704 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x1dc>
            ei_free(buffer);
   217da:	4620      	mov	r0, r4
   217dc:	f004 fc92 	bl	26104 <_Z7ei_freePv>
   217e0:	e790      	b.n	21704 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x1dc>
   217e2:	bf00      	nop
   217e4:	1001884c 	.word	0x1001884c
   217e8:	38000000 	.word	0x38000000
   217ec:	fffffc0e 	.word	0xfffffc0e
   217f0:	fffffc0c 	.word	0xfffffc0c
   217f4:	fffffc16 	.word	0xfffffc16
                    out_buffer[ix] = now - (_cof * _prev_buffer[0]);
   217f8:	ed98 5a00 	vldr	s10, [r8]
   217fc:	edd6 5a02 	vldr	s11, [r6, #8]
   21800:	eef0 7a47 	vmov.f32	s15, s14
   21804:	eee5 7a65 	vfms.f32	s15, s10, s11
   21808:	e73b      	b.n	21682 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x15a>
                    if (out_buffer[ix] < -1.0f || out_buffer[ix] > 1.0f) {
   2180a:	2500      	movs	r5, #0
   2180c:	e74a      	b.n	216a4 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x17c>
   2180e:	bf00      	nop

00021810 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   21810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
#ifdef __MBED__
        wrapped_signal.get_data = mbed::callback(this, &SignalWithAxes::get_data);
#else
        wrapped_signal.get_data = [this](size_t offset, size_t length, float *out_ptr) {
   21814:	6805      	ldr	r5, [r0, #0]
   21816:	681b      	ldr	r3, [r3, #0]
#endif
        return &wrapped_signal;
    }

    int get_data(size_t offset, size_t length, float *out_ptr) {
        size_t offset_on_original_signal = offset / _axes_count * _impulse->raw_samples_per_frame;
   21818:	68a8      	ldr	r0, [r5, #8]
   2181a:	6809      	ldr	r1, [r1, #0]
   2181c:	fbb1 faf0 	udiv	sl, r1, r0
   21820:	b087      	sub	sp, #28
        size_t length_on_original_signal = length / _axes_count * _impulse->raw_samples_per_frame;
   21822:	6812      	ldr	r2, [r2, #0]
   21824:	9300      	str	r3, [sp, #0]
        size_t offset_on_original_signal = offset / _axes_count * _impulse->raw_samples_per_frame;
   21826:	68eb      	ldr	r3, [r5, #12]
        size_t length_on_original_signal = length / _axes_count * _impulse->raw_samples_per_frame;
   21828:	fbb2 f2f0 	udiv	r2, r2, r0
        size_t offset_on_original_signal = offset / _axes_count * _impulse->raw_samples_per_frame;
   2182c:	699b      	ldr	r3, [r3, #24]
   2182e:	fb03 fa0a 	mul.w	sl, r3, sl

        size_t out_ptr_ix = 0;

        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
   21832:	fb03 a302 	mla	r3, r3, r2, sl
   21836:	4553      	cmp	r3, sl
   21838:	9301      	str	r3, [sp, #4]
   2183a:	d92d      	bls.n	21898 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x88>
        size_t out_ptr_ix = 0;
   2183c:	f04f 0800 	mov.w	r8, #0
   21840:	f04f 0b01 	mov.w	fp, #1
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
   21844:	b340      	cbz	r0, 21898 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x88>
   21846:	9b00      	ldr	r3, [sp, #0]
   21848:	2400      	movs	r4, #0
   2184a:	eb03 0688 	add.w	r6, r3, r8, lsl #2
   2184e:	f108 0701 	add.w	r7, r8, #1
   21852:	e005      	b.n	21860 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x50>
   21854:	68a8      	ldr	r0, [r5, #8]
   21856:	3401      	adds	r4, #1
   21858:	42a0      	cmp	r0, r4
   2185a:	f106 0604 	add.w	r6, r6, #4
   2185e:	d915      	bls.n	2188c <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x7c>
                int r = _original_signal->get_data(ix + _axes[axis_ix], 1, &out_ptr[out_ptr_ix++]);
   21860:	e9d5 0300 	ldrd	r0, r3, [r5]
   21864:	5d1b      	ldrb	r3, [r3, r4]
   21866:	4453      	add	r3, sl
   21868:	9305      	str	r3, [sp, #20]
      if (_M_empty())
   2186a:	6883      	ldr	r3, [r0, #8]
   2186c:	e9cd 6b03 	strd	r6, fp, [sp, #12]
   21870:	eb07 0804 	add.w	r8, r7, r4
   21874:	b193      	cbz	r3, 2189c <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x8c>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   21876:	f8d0 900c 	ldr.w	r9, [r0, #12]
   2187a:	ab03      	add	r3, sp, #12
   2187c:	aa04      	add	r2, sp, #16
   2187e:	a905      	add	r1, sp, #20
   21880:	47c8      	blx	r9
                if (r != 0) {
   21882:	2800      	cmp	r0, #0
   21884:	d0e6      	beq.n	21854 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x44>
      }
   21886:	b007      	add	sp, #28
   21888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
   2188c:	68eb      	ldr	r3, [r5, #12]
   2188e:	699b      	ldr	r3, [r3, #24]
   21890:	449a      	add	sl, r3
   21892:	9b01      	ldr	r3, [sp, #4]
   21894:	4553      	cmp	r3, sl
   21896:	d8d5      	bhi.n	21844 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x34>
                    return r;
                }
            }
        }

        return 0;
   21898:	2000      	movs	r0, #0
   2189a:	e7f4      	b.n	21886 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x76>
	__throw_bad_function_call();
   2189c:	f7ff fe42 	bl	21524 <_ZSt25__throw_bad_function_callv>

000218a0 <_ZNSt17_Function_handlerIFijjPfEZN15SignalWithRange10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   218a0:	b510      	push	{r4, lr}

        wrapped_signal.total_length = _range_end - _range_start;
#ifdef __MBED__
        wrapped_signal.get_data = mbed::callback(this, &SignalWithRange::get_data);
#else
        wrapped_signal.get_data = [this](size_t offset, size_t length, float *out_ptr) {
   218a2:	6804      	ldr	r4, [r0, #0]
#endif
        return &wrapped_signal;
    }

    int get_data(size_t offset, size_t length, float *out_ptr) {
        return _original_signal->get_data(offset + _range_start, length, out_ptr);
   218a4:	6809      	ldr	r1, [r1, #0]
   218a6:	6812      	ldr	r2, [r2, #0]
   218a8:	681b      	ldr	r3, [r3, #0]
   218aa:	e9d4 0400 	ldrd	r0, r4, [r4]
   218ae:	b084      	sub	sp, #16
   218b0:	4421      	add	r1, r4
      if (_M_empty())
   218b2:	6884      	ldr	r4, [r0, #8]
   218b4:	9301      	str	r3, [sp, #4]
   218b6:	e9cd 2102 	strd	r2, r1, [sp, #8]
   218ba:	b134      	cbz	r4, 218ca <_ZNSt17_Function_handlerIFijjPfEZN15SignalWithRange10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x2a>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   218bc:	68c4      	ldr	r4, [r0, #12]
   218be:	ab01      	add	r3, sp, #4
   218c0:	aa02      	add	r2, sp, #8
   218c2:	a903      	add	r1, sp, #12
   218c4:	47a0      	blx	r4
      }
   218c6:	b004      	add	sp, #16
   218c8:	bd10      	pop	{r4, pc}
	__throw_bad_function_call();
   218ca:	f7ff fe2b 	bl	21524 <_ZSt25__throw_bad_function_callv>
   218ce:	bf00      	nop

000218d0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb>:
     * @param output_transposed If set to true this will transpose the matrix (memory efficient).
     *                          This is more efficient than calling this function and then transposing
     *                          as the latter requires the filterbank to be allocated twice (for a short while).
     * @returns EIDSP_OK if OK
     */
    static int filterbanks(
   218d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   218d4:	ed2d 8b06 	vpush	{d8-d10}
        uint16_t num_filter, int coefficients, uint32_t sampling_freq,
        uint32_t low_freq, uint32_t high_freq,
        bool output_transposed = false
        )
    {
        const size_t mels_mem_size = (num_filter + 2) * sizeof(float);
   218d8:	f101 0b02 	add.w	fp, r1, #2
    static int filterbanks(
   218dc:	b089      	sub	sp, #36	; 0x24
        const size_t mels_mem_size = (num_filter + 2) * sizeof(float);
   218de:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
    static int filterbanks(
   218e2:	9105      	str	r1, [sp, #20]
   218e4:	4604      	mov	r4, r0
   218e6:	f89d 1068 	ldrb.w	r1, [sp, #104]	; 0x68
   218ea:	9107      	str	r1, [sp, #28]
        const size_t hertz_mem_size = (num_filter + 2) * sizeof(float);
        const size_t freq_index_mem_size = (num_filter + 2) * sizeof(int);

        float *mels = (float*)ei_dsp_malloc(mels_mem_size);
   218ec:	4658      	mov	r0, fp
    static int filterbanks(
   218ee:	ee09 3a10 	vmov	s18, r3
   218f2:	9201      	str	r2, [sp, #4]
        float *mels = (float*)ei_dsp_malloc(mels_mem_size);
   218f4:	f004 fbf4 	bl	260e0 <_Z9ei_mallocj>
        if (!mels) {
   218f8:	2800      	cmp	r0, #0
   218fa:	f000 8264 	beq.w	21dc6 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x4f6>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
        }

        if (filterbanks->rows != num_filter || filterbanks->cols != static_cast<uint32_t>(coefficients)) {
   218fe:	6863      	ldr	r3, [r4, #4]
   21900:	9e05      	ldr	r6, [sp, #20]
   21902:	42b3      	cmp	r3, r6
   21904:	f040 8270 	bne.w	21de8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x518>
   21908:	68a3      	ldr	r3, [r4, #8]
   2190a:	9a01      	ldr	r2, [sp, #4]
   2190c:	4293      	cmp	r3, r2
   2190e:	f040 826b 	bne.w	21de8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x518>

        // Computing the Mel filterbank
        // converting the upper and lower frequencies to Mels.
        // num_filter + 2 is because for num_filter filterbanks we need
        // num_filter+2 point.
        numpy::linspace(
   21912:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
        e = (g - 0x3f2aaaab) & 0xff800000;
   21916:	4dd2      	ldr	r5, [pc, #840]	; (21c60 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x390>)
   21918:	eeb8 8a67 	vcvt.f32.u32	s16, s15
   2191c:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
        memset(filterbanks->buffer, 0, filterbanks->rows * filterbanks->cols * sizeof(uint8_t));
   21920:	fb02 f206 	mul.w	r2, r2, r6
   21924:	4681      	mov	r9, r0
   21926:	2100      	movs	r1, #0
   21928:	6820      	ldr	r0, [r4, #0]
        numpy::linspace(
   2192a:	eef8 8a67 	vcvt.f32.u32	s17, s15
        memset(filterbanks->buffer, 0, filterbanks->rows * filterbanks->cols * sizeof(uint8_t));
   2192e:	f009 fab9 	bl	2aea4 <memset>
     */
    static float frequency_to_mel(float f) {
#if EI_PORTING_RENESASRA65 == 1
        return 1127.0 * log(1.0 + f / 700.0f);
#else
        return 1127.0 * numpy::log((1.0 + f / 700.0f));
   21932:	eddf 6acc 	vldr	s13, [pc, #816]	; 21c64 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x394>
   21936:	4bcc      	ldr	r3, [pc, #816]	; (21c68 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x398>)
        r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
   21938:	ed9f 2acc 	vldr	s4, [pc, #816]	; 21c6c <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x39c>
        t = fmaf(0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
   2193c:	eddf 5acc 	vldr	s11, [pc, #816]	; 21c70 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x3a0>
   21940:	ed9f 3acc 	vldr	s6, [pc, #816]	; 21c74 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x3a4>
        i = (float)e * 1.19209290e-7f; // 0x1.0p-23
   21944:	eddf 2acc 	vldr	s5, [pc, #816]	; 21c78 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x3a8>
        r = fmaf(i, 0.693147182f, r); // 0x1.62e430p-1 // log(2)
   21948:	eddf 3acc 	vldr	s7, [pc, #816]	; 21c7c <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x3ac>
   2194c:	ed9f 4acc 	vldr	s8, [pc, #816]	; 21c80 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x3b0>
   21950:	eec8 7a26 	vdiv.f32	s15, s16, s13
   21954:	ee88 7aa6 	vdiv.f32	s14, s17, s13
   21958:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        g = (int32_t) * ((int32_t *)&a);
   2195c:	ee77 7a85 	vadd.f32	s15, s15, s10
   21960:	ee37 7a05 	vadd.f32	s14, s14, s10
   21964:	ee17 2a90 	vmov	r2, s15
   21968:	ee17 1a10 	vmov	r1, s14
        e = (g - 0x3f2aaaab) & 0xff800000;
   2196c:	18d0      	adds	r0, r2, r3
   2196e:	4028      	ands	r0, r5
   21970:	440b      	add	r3, r1
        i = (float)e * 1.19209290e-7f; // 0x1.0p-23
   21972:	ee07 0a10 	vmov	s14, r0
        e = (g - 0x3f2aaaab) & 0xff800000;
   21976:	402b      	ands	r3, r5
        g = g - e;
   21978:	1a12      	subs	r2, r2, r0
   2197a:	ee07 2a90 	vmov	s15, r2
   2197e:	1aca      	subs	r2, r1, r3
        i = (float)e * 1.19209290e-7f; // 0x1.0p-23
   21980:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
        g = g - e;
   21984:	ee07 2a10 	vmov	s14, r2
        r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
   21988:	eddf 6abe 	vldr	s13, [pc, #760]	; 21c84 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x3b4>
        f = m - 1.0f;
   2198c:	ee37 7a45 	vsub.f32	s14, s14, s10
   21990:	ee77 7ac5 	vsub.f32	s15, s15, s10
        r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
   21994:	eef0 1a66 	vmov.f32	s3, s13
        t = fmaf(0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
   21998:	eef0 4a65 	vmov.f32	s9, s11
        r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
   2199c:	eee2 6a07 	vfma.f32	s13, s4, s14
        float step = (stop - start) / (number - 1);
   219a0:	4630      	mov	r0, r6
   219a2:	3601      	adds	r6, #1
        r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
   219a4:	eee2 1a27 	vfma.f32	s3, s4, s15
   219a8:	4649      	mov	r1, r9
        t = fmaf(0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
   219aa:	eee3 4a27 	vfma.f32	s9, s6, s15
   219ae:	eee3 5a07 	vfma.f32	s11, s6, s14
        s = f * f;
   219b2:	ee27 2aa7 	vmul.f32	s4, s15, s15
   219b6:	ee27 3a07 	vmul.f32	s6, s14, s14
        r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
   219ba:	eeb0 5a66 	vmov.f32	s10, s13
        r = fmaf(r, s, t);
   219be:	eee5 5a03 	vfma.f32	s11, s10, s6
   219c2:	eee1 4a82 	vfma.f32	s9, s3, s4
        i = (float)e * 1.19209290e-7f; // 0x1.0p-23
   219c6:	ee06 3a90 	vmov	s13, r3
        r = fmaf(r, s, f);
   219ca:	eea5 7a83 	vfma.f32	s14, s11, s6
        for (uint32_t ix = 0; ix < number - 1; ix++) {
   219ce:	2300      	movs	r3, #0
        r = fmaf(r, s, f);
   219d0:	eee4 7a82 	vfma.f32	s15, s9, s4
        i = (float)e * 1.19209290e-7f; // 0x1.0p-23
   219d4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
   219d8:	ee26 6a22 	vmul.f32	s12, s12, s5
   219dc:	ee66 6aa2 	vmul.f32	s13, s13, s5
        r = fmaf(i, 0.693147182f, r); // 0x1.62e430p-1 // log(2)
   219e0:	eee6 7a23 	vfma.f32	s15, s12, s7
   219e4:	eea6 7aa3 	vfma.f32	s14, s13, s7
   219e8:	ee67 7a84 	vmul.f32	s15, s15, s8
        return r;
   219ec:	ee27 7a04 	vmul.f32	s14, s14, s8
        float step = (stop - start) / (number - 1);
   219f0:	ee06 6a90 	vmov	s13, r6
   219f4:	ee37 6a67 	vsub.f32	s12, s14, s15
   219f8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
   219fc:	eec6 5a26 	vdiv.f32	s11, s12, s13
        for (uint32_t ix = 0; ix < number - 1; ix++) {
   21a00:	4298      	cmp	r0, r3
            out[ix] = start + ix * step;
   21a02:	ee06 3a90 	vmov	s13, r3
   21a06:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
   21a0a:	eef0 6a67 	vmov.f32	s13, s15
   21a0e:	eee5 6a86 	vfma.f32	s13, s11, s12
        for (uint32_t ix = 0; ix < number - 1; ix++) {
   21a12:	f103 0301 	add.w	r3, r3, #1
            out[ix] = start + ix * step;
   21a16:	ece1 6a01 	vstmia	r1!, {s13}
        for (uint32_t ix = 0; ix < number - 1; ix++) {
   21a1a:	d1f1      	bne.n	21a00 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x130>
        out[number - 1] = stop;
   21a1c:	9b05      	ldr	r3, [sp, #20]
   21a1e:	eb09 0383 	add.w	r3, r9, r3, lsl #2
   21a22:	ed83 7a01 	vstr	s14, [r3, #4]
            num_filter + 2,
            mels);

        // we should convert Mels back to Hertz because the start and end-points
        // should be at the desired frequencies.
        float *hertz = (float*)ei_dsp_malloc(hertz_mem_size);
   21a26:	4658      	mov	r0, fp
   21a28:	f004 fb5a 	bl	260e0 <_Z9ei_mallocj>
        if (!hertz) {
   21a2c:	4607      	mov	r7, r0
   21a2e:	2800      	cmp	r0, #0
   21a30:	f000 81c6 	beq.w	21dc0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x4f0>
            ei_dsp_free(mels, mels_mem_size);
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
        }
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
   21a34:	2500      	movs	r5, #0
     *
     * @param mel The mel scale values(or a single mel).
     * @returns The frequency values(or a single frequency) in Hz.
     */
    static float mel_to_frequency(float mel) {
        return 700.0f * (exp(mel / 1127.0f) - 1.0f);
   21a36:	ed9f aa92 	vldr	s20, [pc, #584]	; 21c80 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x3b0>
   21a3a:	eddf 9a8a 	vldr	s19, [pc, #552]	; 21c64 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x394>
   21a3e:	46a8      	mov	r8, r5
            hertz[ix] = functions::mel_to_frequency(mels[ix]);
   21a40:	eb09 0385 	add.w	r3, r9, r5, lsl #2
   21a44:	ed93 0a00 	vldr	s0, [r3]
  { return __builtin_expf(__x); }
   21a48:	ee80 0a0a 	vdiv.f32	s0, s0, s20
   21a4c:	f007 f87e 	bl	28b4c <expf>
   21a50:	eb07 0a85 	add.w	sl, r7, r5, lsl #2
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
   21a54:	1c6b      	adds	r3, r5, #1
   21a56:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   21a5a:	ee30 0a67 	vsub.f32	s0, s0, s15
   21a5e:	ee60 7a29 	vmul.f32	s15, s0, s19
            if (hertz[ix] < low_freq) {
                hertz[ix] = low_freq;
   21a62:	eeb4 8a67 	vcmp.f32	s16, s15
   21a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21a6a:	bfc8      	it	gt
   21a6c:	eef0 7a48 	vmovgt.f32	s15, s16
            }
            if (hertz[ix] > high_freq) {
                hertz[ix] = high_freq;
   21a70:	eef4 8a67 	vcmp.f32	s17, s15
   21a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21a78:	bf48      	it	mi
   21a7a:	eef0 7a68 	vmovmi.f32	s15, s17

            // here is a really annoying bug in Speechpy which calculates the frequency index wrong for the last bucket
            // the last 'hertz' value is not 8,000 (with sampling rate 16,000) but 7,999.999999
            // thus calculating the bucket to 64, not 65.
            // we're adjusting this here a tiny bit to ensure we have the same result
            if (ix == num_filter + 2 - 1) {
   21a7e:	45b0      	cmp	r8, r6
   21a80:	f000 8177 	beq.w	21d72 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x4a2>
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
   21a84:	b29d      	uxth	r5, r3
   21a86:	42b5      	cmp	r5, r6
   21a88:	edca 7a00 	vstr	s15, [sl]
   21a8c:	46a8      	mov	r8, r5
   21a8e:	ddd7      	ble.n	21a40 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x170>
                hertz[ix] -= 0.001;
            }
        }
        ei_dsp_free(mels, mels_mem_size);
   21a90:	4648      	mov	r0, r9
   21a92:	f004 fb37 	bl	26104 <_Z7ei_freePv>

        // The frequency resolution required to put filters at the
        // exact points calculated above should be extracted.
        //  So we should round those frequencies to the closest FFT bin.
        int *freq_index = (int*)ei_dsp_malloc(freq_index_mem_size);
   21a96:	4658      	mov	r0, fp
   21a98:	f004 fb22 	bl	260e0 <_Z9ei_mallocj>
        if (!freq_index) {
   21a9c:	9006      	str	r0, [sp, #24]
   21a9e:	2800      	cmp	r0, #0
   21aa0:	f000 81a4 	beq.w	21dec <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x51c>
            ei_dsp_free(hertz, hertz_mem_size);
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
        }
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
            freq_index[ix] = static_cast<int>(floor((coefficients + 1) * hertz[ix] / sampling_freq));
   21aa4:	9b01      	ldr	r3, [sp, #4]
   21aa6:	f103 0801 	add.w	r8, r3, #1
   21aaa:	ee07 8a90 	vmov	s15, r8
   21aae:	eeb8 9a49 	vcvt.f32.u32	s18, s18
   21ab2:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
   21ab6:	f8dd 8018 	ldr.w	r8, [sp, #24]
   21aba:	2500      	movs	r5, #0
            freq_index[ix] = static_cast<int>(floor((coefficients + 1) * hertz[ix] / sampling_freq));
   21abc:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   21ac0:	ed93 0a00 	vldr	s0, [r3]
   21ac4:	ee28 0a00 	vmul.f32	s0, s16, s0
  { return __builtin_floorf(__x); }
   21ac8:	ee80 0a09 	vdiv.f32	s0, s0, s18
   21acc:	f006 ff3a 	bl	28944 <floorf>
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
   21ad0:	1c6b      	adds	r3, r5, #1
            freq_index[ix] = static_cast<int>(floor((coefficients + 1) * hertz[ix] / sampling_freq));
   21ad2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   21ad6:	ee10 2a10 	vmov	r2, s0
   21ada:	f848 2025 	str.w	r2, [r8, r5, lsl #2]
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
   21ade:	b29d      	uxth	r5, r3
   21ae0:	42b5      	cmp	r5, r6
   21ae2:	ddeb      	ble.n	21abc <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x1ec>
        }
        ei_dsp_free(hertz, hertz_mem_size);
   21ae4:	4638      	mov	r0, r7
   21ae6:	f004 fb0d 	bl	26104 <_Z7ei_freePv>

        for (size_t i = 0; i < num_filter; i++) {
   21aea:	9b05      	ldr	r3, [sp, #20]
   21aec:	2b00      	cmp	r3, #0
   21aee:	f000 80e8 	beq.w	21cc2 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x3f2>
   21af2:	9b06      	ldr	r3, [sp, #24]
   21af4:	9302      	str	r3, [sp, #8]
   21af6:	eddf 9a64 	vldr	s19, [pc, #400]	; 21c88 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x3b8>
   21afa:	f8df 8190 	ldr.w	r8, [pc, #400]	; 21c8c <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x3bc>
   21afe:	f8dd a01c 	ldr.w	sl, [sp, #28]
   21b02:	2300      	movs	r3, #0
   21b04:	9301      	str	r3, [sp, #4]
            int left = freq_index[i];
   21b06:	9b02      	ldr	r3, [sp, #8]
   21b08:	9a01      	ldr	r2, [sp, #4]
   21b0a:	681e      	ldr	r6, [r3, #0]
            int middle = freq_index[i + 1];
   21b0c:	ed93 9a01 	vldr	s18, [r3, #4]
            int right = freq_index[i + 2];
   21b10:	f8d3 b008 	ldr.w	fp, [r3, #8]
            int middle = freq_index[i + 1];
   21b14:	3304      	adds	r3, #4
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   21b16:	2101      	movs	r1, #1

            EI_DSP_MATRIX(z, 1, (right - left + 1));
   21b18:	ebab 0506 	sub.w	r5, fp, r6
            int middle = freq_index[i + 1];
   21b1c:	9302      	str	r3, [sp, #8]
   21b1e:	4691      	mov	r9, r2
            EI_DSP_MATRIX(z, 1, (right - left + 1));
   21b20:	186b      	adds	r3, r5, r1
            int middle = freq_index[i + 1];
   21b22:	440a      	add	r2, r1
   21b24:	9201      	str	r2, [sp, #4]
   21b26:	009a      	lsls	r2, r3, #2
   21b28:	4610      	mov	r0, r2
   21b2a:	9304      	str	r3, [sp, #16]
   21b2c:	9203      	str	r2, [sp, #12]
   21b2e:	f004 fad9 	bl	260e4 <_Z9ei_callocjj>
            EI_DSP_MATRIX(z, 1, (right - left + 1));
   21b32:	4607      	mov	r7, r0
   21b34:	2800      	cmp	r0, #0
   21b36:	f000 8146 	beq.w	21dc6 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x4f6>
            if (!z.buffer) {
                ei_dsp_free(freq_index, freq_index_mem_size);
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
            }
            numpy::linspace(left, right, (right - left + 1), z.buffer);
   21b3a:	ee07 6a90 	vmov	s15, r6
        if (number < 1 || !out) {
   21b3e:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
   21b42:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
   21b46:	ee07 ba90 	vmov	s15, fp
   21b4a:	eef8 8ae7 	vcvt.f32.s32	s17, s15
   21b4e:	2b00      	cmp	r3, #0
   21b50:	f000 813f 	beq.w	21dd2 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x502>
        if (number == 1) {
   21b54:	2b01      	cmp	r3, #1
   21b56:	f000 8120 	beq.w	21d9a <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x4ca>
        float step = (stop - start) / (number - 1);
   21b5a:	ee07 5a10 	vmov	s14, r5
   21b5e:	ee78 7ac8 	vsub.f32	s15, s17, s16
   21b62:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   21b66:	eec7 6a87 	vdiv.f32	s13, s15, s14
        for (uint32_t ix = 0; ix < number - 1; ix++) {
   21b6a:	b175      	cbz	r5, 21b8a <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x2ba>
   21b6c:	4601      	mov	r1, r0
   21b6e:	2300      	movs	r3, #0
            out[ix] = start + ix * step;
   21b70:	ee07 3a90 	vmov	s15, r3
   21b74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   21b78:	eef0 7a48 	vmov.f32	s15, s16
   21b7c:	eee6 7a87 	vfma.f32	s15, s13, s14
        for (uint32_t ix = 0; ix < number - 1; ix++) {
   21b80:	3301      	adds	r3, #1
   21b82:	42ab      	cmp	r3, r5
            out[ix] = start + ix * step;
   21b84:	ece1 7a01 	vstmia	r1!, {s15}
        for (uint32_t ix = 0; ix < number - 1; ix++) {
   21b88:	d1f2      	bne.n	21b70 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x2a0>
        out[number - 1] = stop;
   21b8a:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   21b8e:	2101      	movs	r1, #1
   21b90:	4610      	mov	r0, r2
   21b92:	edc3 8a00 	vstr	s17, [r3]
   21b96:	9203      	str	r2, [sp, #12]
   21b98:	f004 faa4 	bl	260e4 <_Z9ei_callocjj>
     * @param left
     * @param middle
     * @param right
     */
    static int triangle(float *x, size_t x_size, int left, int middle, int right) {
        EI_DSP_MATRIX(out, 1, x_size);
   21b9c:	9a03      	ldr	r2, [sp, #12]
   21b9e:	4601      	mov	r1, r0
   21ba0:	2800      	cmp	r0, #0
   21ba2:	d048      	beq.n	21c36 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x366>
            if (x[ix] > left && x[ix] <= middle) {
                out.buffer[ix] = (x[ix] - left) / (middle - left);
            }

            if (x[ix] < right && middle <= x[ix]) {
                out.buffer[ix] = (right - x[ix]) / (right - middle);
   21ba4:	ee19 3a10 	vmov	r3, s18
   21ba8:	ebab 0303 	sub.w	r3, fp, r3
   21bac:	ee06 3a90 	vmov	s13, r3
                out.buffer[ix] = (x[ix] - left) / (middle - left);
   21bb0:	ee19 3a10 	vmov	r3, s18
   21bb4:	f107 0c04 	add.w	ip, r7, #4
   21bb8:	1b9b      	subs	r3, r3, r6
   21bba:	ee05 3a90 	vmov	s11, r3
   21bbe:	eb0c 0c85 	add.w	ip, ip, r5, lsl #2
   21bc2:	463b      	mov	r3, r7
   21bc4:	4608      	mov	r0, r1
            if (x[ix] > left && x[ix] <= middle) {
   21bc6:	ecf3 7a01 	vldmia	r3!, {s15}
   21bca:	eeb4 8ae7 	vcmpe.f32	s16, s15
   21bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21bd2:	d510      	bpl.n	21bf6 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x326>
   21bd4:	eeb8 7ac9 	vcvt.f32.s32	s14, s18
   21bd8:	eef4 7ac7 	vcmpe.f32	s15, s14
   21bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21be0:	d809      	bhi.n	21bf6 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x326>
                out.buffer[ix] = (x[ix] - left) / (middle - left);
   21be2:	ee77 7ac8 	vsub.f32	s15, s15, s16
   21be6:	eeb8 6ae5 	vcvt.f32.s32	s12, s11
   21bea:	ee87 7a86 	vdiv.f32	s14, s15, s12
   21bee:	ed80 7a00 	vstr	s14, [r0]
            if (x[ix] < right && middle <= x[ix]) {
   21bf2:	ed53 7a01 	vldr	s15, [r3, #-4]
   21bf6:	eef4 8ae7 	vcmpe.f32	s17, s15
   21bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21bfe:	dd0e      	ble.n	21c1e <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x34e>
   21c00:	eeb8 7ac9 	vcvt.f32.s32	s14, s18
   21c04:	eeb4 7ae7 	vcmpe.f32	s14, s15
   21c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21c0c:	d807      	bhi.n	21c1e <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x34e>
                out.buffer[ix] = (right - x[ix]) / (right - middle);
   21c0e:	eeb8 7ae6 	vcvt.f32.s32	s14, s13
   21c12:	ee78 7ae7 	vsub.f32	s15, s17, s15
   21c16:	ee87 6a87 	vdiv.f32	s12, s15, s14
   21c1a:	ed80 6a00 	vstr	s12, [r0]
        for (size_t ix = 0; ix < x_size; ix++) {
   21c1e:	459c      	cmp	ip, r3
   21c20:	f100 0004 	add.w	r0, r0, #4
   21c24:	d1cf      	bne.n	21bc6 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x2f6>
            }
        }

        memcpy(x, out.buffer, x_size * sizeof(float));
   21c26:	4638      	mov	r0, r7
   21c28:	9103      	str	r1, [sp, #12]
   21c2a:	f7f6 fae9 	bl	18200 <memcpy>
            ei_free(buffer);
   21c2e:	9903      	ldr	r1, [sp, #12]
   21c30:	4608      	mov	r0, r1
   21c32:	f004 fa67 	bl	26104 <_Z7ei_freePv>
            functions::triangle(z.buffer, (right - left + 1), left, middle, right);

            // so... z now contains some values that we need to overwrite in the filterbank
            for (int zx = 0; zx < (right - left + 1); zx++) {
   21c36:	2d00      	cmp	r5, #0
   21c38:	db3b      	blt.n	21cb2 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x3e2>
   21c3a:	46be      	mov	lr, r7
        if (value > quantized_values_one_zero[length - 1]) {
   21c3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
        for (uint32_t ix = 0; ix < number - 1; ix++) {
   21c40:	2200      	movs	r2, #0
   21c42:	4651      	mov	r1, sl
                size_t index = (i * filterbanks->cols) + (left + zx);
   21c44:	68a3      	ldr	r3, [r4, #8]
   21c46:	eb06 0c02 	add.w	ip, r6, r2

                if (output_transposed) {
   21c4a:	2900      	cmp	r1, #0
   21c4c:	d149      	bne.n	21ce2 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x412>
                size_t index = (i * filterbanks->cols) + (left + zx);
   21c4e:	fb09 cc03 	mla	ip, r9, r3, ip
                    index = ((left + zx) * filterbanks->rows) + i;
                }

#if EIDSP_QUANTIZE_FILTERBANK
                filterbanks->buffer[index] = numpy::quantize_zero_one(z.buffer[zx]);
   21c52:	6823      	ldr	r3, [r4, #0]
   21c54:	ecbe 7a01 	vldmia	lr!, {s14}
   21c58:	480c      	ldr	r0, [pc, #48]	; (21c8c <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x3bc>)
   21c5a:	449c      	add	ip, r3
        for (size_t ix = 0; ix < length; ix++) {
   21c5c:	2300      	movs	r3, #0
   21c5e:	e01a      	b.n	21c96 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x3c6>
   21c60:	ff800000 	.word	0xff800000
   21c64:	442f0000 	.word	0x442f0000
   21c68:	c0d55555 	.word	0xc0d55555
   21c6c:	3e6c6078 	.word	0x3e6c6078
   21c70:	beff712d 	.word	0xbeff712d
   21c74:	3ea9e51a 	.word	0x3ea9e51a
   21c78:	34000000 	.word	0x34000000
   21c7c:	3f317218 	.word	0x3f317218
   21c80:	448ce000 	.word	0x448ce000
   21c84:	be8ef46d 	.word	0xbe8ef46d
   21c88:	3f06bca2 	.word	0x3f06bca2
   21c8c:	00040218 	.word	0x00040218
   21c90:	3301      	adds	r3, #1
   21c92:	2bef      	cmp	r3, #239	; 0xef
   21c94:	d029      	beq.n	21cea <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x41a>
            if (quantized_values_one_zero[ix] == value) return ix;
   21c96:	ecf0 7a01 	vldmia	r0!, {s15}
   21c9a:	eeb4 7a67 	vcmp.f32	s14, s15
   21c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21ca2:	d1f5      	bne.n	21c90 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x3c0>
            hi;
   21ca4:	b2db      	uxtb	r3, r3
            for (int zx = 0; zx < (right - left + 1); zx++) {
   21ca6:	3201      	adds	r2, #1
   21ca8:	4295      	cmp	r5, r2
                filterbanks->buffer[index] = numpy::quantize_zero_one(z.buffer[zx]);
   21caa:	f88c 3000 	strb.w	r3, [ip]
            for (int zx = 0; zx < (right - left + 1); zx++) {
   21cae:	dac9      	bge.n	21c44 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x374>
   21cb0:	468a      	mov	sl, r1
   21cb2:	4638      	mov	r0, r7
   21cb4:	f004 fa26 	bl	26104 <_Z7ei_freePv>
        for (size_t i = 0; i < num_filter; i++) {
   21cb8:	9b05      	ldr	r3, [sp, #20]
   21cba:	9a01      	ldr	r2, [sp, #4]
   21cbc:	4293      	cmp	r3, r2
   21cbe:	f47f af22 	bne.w	21b06 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x236>
                filterbanks->buffer[index] = z.buffer[zx];
#endif
            }
        }

        if (output_transposed) {
   21cc2:	9b07      	ldr	r3, [sp, #28]
   21cc4:	b123      	cbz	r3, 21cd0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x400>
            uint16_t r = filterbanks->rows;
            filterbanks->rows = filterbanks->cols;
   21cc6:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
            filterbanks->cols = r;
   21cca:	b29b      	uxth	r3, r3
   21ccc:	e9c4 2301 	strd	r2, r3, [r4, #4]
        }

        ei_dsp_free(freq_index, freq_index_mem_size);
   21cd0:	9806      	ldr	r0, [sp, #24]
   21cd2:	f004 fa17 	bl	26104 <_Z7ei_freePv>

        return EIDSP_OK;
   21cd6:	2000      	movs	r0, #0
    }
   21cd8:	b009      	add	sp, #36	; 0x24
   21cda:	ecbd 8b06 	vpop	{d8-d10}
   21cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    index = ((left + zx) * filterbanks->rows) + i;
   21ce2:	6863      	ldr	r3, [r4, #4]
   21ce4:	fb03 9c0c 	mla	ip, r3, ip, r9
   21ce8:	e7b3      	b.n	21c52 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x382>
        if (value < quantized_values_one_zero[0]) {
   21cea:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   21cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21cf2:	d43c      	bmi.n	21d6e <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x49e>
        if (value > quantized_values_one_zero[length - 1]) {
   21cf4:	eeb4 7ae6 	vcmpe.f32	s14, s13
   21cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21cfc:	dc35      	bgt.n	21d6a <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x49a>
        int hi = length - 1;
   21cfe:	23ee      	movs	r3, #238	; 0xee
   21d00:	eef0 7a69 	vmov.f32	s15, s19
        int lo = 0;
   21d04:	f04f 0b00 	mov.w	fp, #0
   21d08:	4618      	mov	r0, r3
   21d0a:	e00a      	b.n	21d22 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x452>
                hi = mid - 1;
   21d0c:	1e43      	subs	r3, r0, #1
            int mid = (hi + lo) / 2;
   21d0e:	eb03 000b 	add.w	r0, r3, fp
        while (lo <= hi) {
   21d12:	455b      	cmp	r3, fp
            int mid = (hi + lo) / 2;
   21d14:	ea4f 0a60 	mov.w	sl, r0, asr #1
        while (lo <= hi) {
   21d18:	db13      	blt.n	21d42 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x472>
            if (value < quantized_values_one_zero[mid]) {
   21d1a:	eb08 0a8a 	add.w	sl, r8, sl, lsl #2
   21d1e:	edda 7a00 	vldr	s15, [sl]
   21d22:	eeb4 7ae7 	vcmpe.f32	s14, s15
   21d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            int mid = (hi + lo) / 2;
   21d2a:	ea4f 0060 	mov.w	r0, r0, asr #1
            if (value < quantized_values_one_zero[mid]) {
   21d2e:	d4ed      	bmi.n	21d0c <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x43c>
            } else if (value > quantized_values_one_zero[mid]) {
   21d30:	dd3f      	ble.n	21db2 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x4e2>
                lo = mid + 1;
   21d32:	f100 0b01 	add.w	fp, r0, #1
            int mid = (hi + lo) / 2;
   21d36:	eb03 000b 	add.w	r0, r3, fp
        while (lo <= hi) {
   21d3a:	455b      	cmp	r3, fp
            int mid = (hi + lo) / 2;
   21d3c:	ea4f 0a60 	mov.w	sl, r0, asr #1
        while (lo <= hi) {
   21d40:	daeb      	bge.n	21d1a <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x44a>
        return (quantized_values_one_zero[lo] - value) < (value - quantized_values_one_zero[hi]) ?
   21d42:	eb08 008b 	add.w	r0, r8, fp, lsl #2
   21d46:	edd0 7a00 	vldr	s15, [r0]
   21d4a:	eb08 0083 	add.w	r0, r8, r3, lsl #2
   21d4e:	ed90 6a00 	vldr	s12, [r0]
   21d52:	ee77 7ac7 	vsub.f32	s15, s15, s14
   21d56:	ee37 7a46 	vsub.f32	s14, s14, s12
            hi;
   21d5a:	eef4 7ac7 	vcmpe.f32	s15, s14
   21d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21d62:	d59f      	bpl.n	21ca4 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x3d4>
   21d64:	fa5f f38b 	uxtb.w	r3, fp
   21d68:	e79d      	b.n	21ca6 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x3d6>
            return quantized_values_one_zero[length - 1];
   21d6a:	2301      	movs	r3, #1
   21d6c:	e79b      	b.n	21ca6 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x3d6>
            return quantized_values_one_zero[0];
   21d6e:	2300      	movs	r3, #0
   21d70:	e799      	b.n	21ca6 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x3d6>
                hertz[ix] -= 0.001;
   21d72:	ee17 0a90 	vmov	r0, s15
   21d76:	f7f6 fe75 	bl	18a64 <__aeabi_f2d>
   21d7a:	a321      	add	r3, pc, #132	; (adr r3, 21e00 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x530>)
   21d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
   21d80:	f7f6 fd10 	bl	187a4 <__aeabi_dsub>
   21d84:	f7f7 f99e 	bl	190c4 <__aeabi_d2f>
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
   21d88:	3501      	adds	r5, #1
   21d8a:	b2ad      	uxth	r5, r5
   21d8c:	42b5      	cmp	r5, r6
                hertz[ix] -= 0.001;
   21d8e:	f8ca 0000 	str.w	r0, [sl]
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
   21d92:	46a8      	mov	r8, r5
   21d94:	f77f ae54 	ble.w	21a40 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x170>
   21d98:	e67a      	b.n	21a90 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x1c0>
            out[0] = start;
   21d9a:	ed80 8a00 	vstr	s16, [r0]
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   21d9e:	4619      	mov	r1, r3
   21da0:	2004      	movs	r0, #4
   21da2:	f004 f99f 	bl	260e4 <_Z9ei_callocjj>
        EI_DSP_MATRIX(out, 1, x_size);
   21da6:	9a03      	ldr	r2, [sp, #12]
   21da8:	4601      	mov	r1, r0
   21daa:	2800      	cmp	r0, #0
   21dac:	f47f aefa 	bne.w	21ba4 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x2d4>
   21db0:	e743      	b.n	21c3a <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x36a>
                return quantized_values_one_zero[mid];
   21db2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   21db6:	edcd 7a03 	vstr	s15, [sp, #12]
   21dba:	f89d 300c 	ldrb.w	r3, [sp, #12]
   21dbe:	e772      	b.n	21ca6 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x3d6>
            ei_dsp_free(mels, mels_mem_size);
   21dc0:	4648      	mov	r0, r9
   21dc2:	f004 f99f 	bl	26104 <_Z7ei_freePv>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
   21dc6:	480c      	ldr	r0, [pc, #48]	; (21df8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x528>)
    }
   21dc8:	b009      	add	sp, #36	; 0x24
   21dca:	ecbd 8b06 	vpop	{d8-d10}
   21dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21dd2:	2101      	movs	r1, #1
   21dd4:	4618      	mov	r0, r3
   21dd6:	9203      	str	r2, [sp, #12]
   21dd8:	f004 f984 	bl	260e4 <_Z9ei_callocjj>
   21ddc:	9a03      	ldr	r2, [sp, #12]
   21dde:	4601      	mov	r1, r0
   21de0:	2800      	cmp	r0, #0
   21de2:	f47f af20 	bne.w	21c26 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x356>
   21de6:	e764      	b.n	21cb2 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x3e2>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
   21de8:	4804      	ldr	r0, [pc, #16]	; (21dfc <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x52c>)
   21dea:	e775      	b.n	21cd8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x408>
            ei_dsp_free(hertz, hertz_mem_size);
   21dec:	4638      	mov	r0, r7
   21dee:	f004 f989 	bl	26104 <_Z7ei_freePv>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
   21df2:	4801      	ldr	r0, [pc, #4]	; (21df8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x528>)
   21df4:	e770      	b.n	21cd8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x408>
   21df6:	bf00      	nop
   21df8:	fffffc16 	.word	0xfffffc16
   21dfc:	fffffc14 	.word	0xfffffc14
   21e00:	d2f1a9fc 	.word	0xd2f1a9fc
   21e04:	3f50624d 	.word	0x3f50624d

00021e08 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   21e08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21e0c:	e9d0 8900 	ldrd	r8, r9, [r0]
   21e10:	4692      	mov	sl, r2

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   21e12:	f06f 4460 	mvn.w	r4, #3758096384	; 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   21e16:	eba9 0208 	sub.w	r2, r9, r8
	if (max_size() - size() < __n)
   21e1a:	ebb4 0fa2 	cmp.w	r4, r2, asr #2
   21e1e:	d058      	beq.n	21ed2 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xca>
   21e20:	1093      	asrs	r3, r2, #2
   21e22:	2b01      	cmp	r3, #1
   21e24:	461a      	mov	r2, r3
   21e26:	bf38      	it	cc
   21e28:	2201      	movcc	r2, #1
   21e2a:	189b      	adds	r3, r3, r2
   21e2c:	4606      	mov	r6, r0
   21e2e:	460f      	mov	r7, r1
   21e30:	d24b      	bcs.n	21eca <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xc2>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   21e32:	eba1 0508 	sub.w	r5, r1, r8
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   21e36:	2b00      	cmp	r3, #0
   21e38:	d13d      	bne.n	21eb6 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xae>
   21e3a:	461c      	mov	r4, r3
   21e3c:	469b      	mov	fp, r3
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   21e3e:	f8da 3000 	ldr.w	r3, [sl]
   21e42:	f84b 3005 	str.w	r3, [fp, r5]
    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result, allocator<_Up>&) noexcept
    {
      ptrdiff_t __count = __last - __first;
      if (__count > 0)
   21e46:	2d00      	cmp	r5, #0
   21e48:	dc24      	bgt.n	21e94 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8c>
      ptrdiff_t __count = __last - __first;
   21e4a:	eba9 0907 	sub.w	r9, r9, r7
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
   21e4e:	3504      	adds	r5, #4
      if (__count > 0)
   21e50:	f1b9 0f00 	cmp.w	r9, #0
   21e54:	445d      	add	r5, fp
   21e56:	dc13      	bgt.n	21e80 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x78>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
      return __result + __count;
   21e58:	444d      	add	r5, r9
	if (__p)
   21e5a:	f1b8 0f00 	cmp.w	r8, #0
   21e5e:	d104      	bne.n	21e6a <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x62>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
   21e60:	e9c6 b500 	strd	fp, r5, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   21e64:	60b4      	str	r4, [r6, #8]
    }
   21e66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    this->_M_impl._M_end_of_storage - __old_start);
   21e6a:	68b1      	ldr	r1, [r6, #8]
   21e6c:	eba1 0108 	sub.w	r1, r1, r8
	::operator delete(__p
   21e70:	4640      	mov	r0, r8
   21e72:	f00d fd4d 	bl	2f910 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
   21e76:	e9c6 b500 	strd	fp, r5, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   21e7a:	60b4      	str	r4, [r6, #8]
    }
   21e7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   21e80:	4628      	mov	r0, r5
   21e82:	4639      	mov	r1, r7
   21e84:	464a      	mov	r2, r9
   21e86:	f7f6 f9bb 	bl	18200 <memcpy>
      return __result + __count;
   21e8a:	444d      	add	r5, r9
   21e8c:	f1b8 0f00 	cmp.w	r8, #0
   21e90:	d0e6      	beq.n	21e60 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x58>
   21e92:	e7ea      	b.n	21e6a <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x62>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   21e94:	462a      	mov	r2, r5
      ptrdiff_t __count = __last - __first;
   21e96:	eba9 0907 	sub.w	r9, r9, r7
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   21e9a:	4641      	mov	r1, r8
   21e9c:	4658      	mov	r0, fp
   21e9e:	f008 ff85 	bl	2adac <memmove>
	      ++__new_finish;
   21ea2:	3504      	adds	r5, #4
      if (__count > 0)
   21ea4:	f1b9 0f00 	cmp.w	r9, #0
   21ea8:	445d      	add	r5, fp
   21eaa:	dce9      	bgt.n	21e80 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x78>
		    this->_M_impl._M_end_of_storage - __old_start);
   21eac:	68b1      	ldr	r1, [r6, #8]
      return __result + __count;
   21eae:	444d      	add	r5, r9
   21eb0:	eba1 0108 	sub.w	r1, r1, r8
      _M_deallocate(pointer __p, size_t __n)
   21eb4:	e7dc      	b.n	21e70 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x68>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   21eb6:	42a3      	cmp	r3, r4
   21eb8:	bf28      	it	cs
   21eba:	4623      	movcs	r3, r4
   21ebc:	009c      	lsls	r4, r3, #2
   21ebe:	4620      	mov	r0, r4
   21ec0:	f00d fd22 	bl	2f908 <_Znwj>
   21ec4:	4683      	mov	fp, r0
      this->_M_impl._M_end_of_storage = __new_start + __len;
   21ec6:	4404      	add	r4, r0
   21ec8:	e7b9      	b.n	21e3e <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x36>
   21eca:	4c03      	ldr	r4, [pc, #12]	; (21ed8 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xd0>)
   21ecc:	eba1 0508 	sub.w	r5, r1, r8
      _M_allocate(size_t __n)
   21ed0:	e7f5      	b.n	21ebe <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xb6>
	  __throw_length_error(__N(__s));
   21ed2:	4802      	ldr	r0, [pc, #8]	; (21edc <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xd4>)
   21ed4:	f014 fd7a 	bl	369cc <_ZSt20__throw_length_errorPKc>
   21ed8:	7ffffffc 	.word	0x7ffffffc
   21edc:	0003f9f4 	.word	0x0003f9f4

00021ee0 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
   21ee0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21ee4:	e9d0 8600 	ldrd	r8, r6, [r0]
   21ee8:	4691      	mov	r9, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   21eea:	eba6 0308 	sub.w	r3, r6, r8
   21eee:	4a34      	ldr	r2, [pc, #208]	; (21fc0 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xe0>)
	if (max_size() - size() < __n)
   21ef0:	4c34      	ldr	r4, [pc, #208]	; (21fc4 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xe4>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   21ef2:	10db      	asrs	r3, r3, #3
   21ef4:	fb02 f303 	mul.w	r3, r2, r3
	if (max_size() - size() < __n)
   21ef8:	42a3      	cmp	r3, r4
   21efa:	d05e      	beq.n	21fba <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xda>
   21efc:	2b01      	cmp	r3, #1
   21efe:	461a      	mov	r2, r3
   21f00:	bf38      	it	cc
   21f02:	2201      	movcc	r2, #1
   21f04:	189b      	adds	r3, r3, r2
   21f06:	4605      	mov	r5, r0
   21f08:	460f      	mov	r7, r1
   21f0a:	d252      	bcs.n	21fb2 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd2>
   21f0c:	eba1 0a08 	sub.w	sl, r1, r8
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   21f10:	2b00      	cmp	r3, #0
   21f12:	d142      	bne.n	21f9a <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xba>
   21f14:	461c      	mov	r4, r3
   21f16:	469b      	mov	fp, r3
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   21f18:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   21f1c:	eb0b 0c0a 	add.w	ip, fp, sl
   21f20:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   21f24:	e899 0003 	ldmia.w	r9, {r0, r1}
      if (__count > 0)
   21f28:	f1ba 0f00 	cmp.w	sl, #0
   21f2c:	e88c 0003 	stmia.w	ip, {r0, r1}
   21f30:	dc23      	bgt.n	21f7a <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9a>
      ptrdiff_t __count = __last - __first;
   21f32:	1bf6      	subs	r6, r6, r7
	      ++__new_finish;
   21f34:	f10a 0a18 	add.w	sl, sl, #24
      if (__count > 0)
   21f38:	2e00      	cmp	r6, #0
   21f3a:	44da      	add	sl, fp
   21f3c:	dc13      	bgt.n	21f66 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x86>
      return __result + __count;
   21f3e:	4456      	add	r6, sl
	if (__p)
   21f40:	f1b8 0f00 	cmp.w	r8, #0
   21f44:	d104      	bne.n	21f50 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x70>
      this->_M_impl._M_finish = __new_finish;
   21f46:	e9c5 b600 	strd	fp, r6, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   21f4a:	60ac      	str	r4, [r5, #8]
    }
   21f4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    this->_M_impl._M_end_of_storage - __old_start);
   21f50:	68a9      	ldr	r1, [r5, #8]
   21f52:	eba1 0108 	sub.w	r1, r1, r8
	::operator delete(__p
   21f56:	4640      	mov	r0, r8
   21f58:	f00d fcda 	bl	2f910 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
   21f5c:	e9c5 b600 	strd	fp, r6, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   21f60:	60ac      	str	r4, [r5, #8]
    }
   21f62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   21f66:	4632      	mov	r2, r6
   21f68:	4639      	mov	r1, r7
   21f6a:	4650      	mov	r0, sl
   21f6c:	f7f6 f948 	bl	18200 <memcpy>
      return __result + __count;
   21f70:	4456      	add	r6, sl
   21f72:	f1b8 0f00 	cmp.w	r8, #0
   21f76:	d0e6      	beq.n	21f46 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x66>
   21f78:	e7ea      	b.n	21f50 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x70>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   21f7a:	4652      	mov	r2, sl
      ptrdiff_t __count = __last - __first;
   21f7c:	1bf6      	subs	r6, r6, r7
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   21f7e:	4641      	mov	r1, r8
   21f80:	4658      	mov	r0, fp
   21f82:	f008 ff13 	bl	2adac <memmove>
	      ++__new_finish;
   21f86:	f10a 0a18 	add.w	sl, sl, #24
      if (__count > 0)
   21f8a:	2e00      	cmp	r6, #0
   21f8c:	44da      	add	sl, fp
   21f8e:	dcea      	bgt.n	21f66 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x86>
		    this->_M_impl._M_end_of_storage - __old_start);
   21f90:	68a9      	ldr	r1, [r5, #8]
      return __result + __count;
   21f92:	4456      	add	r6, sl
   21f94:	eba1 0108 	sub.w	r1, r1, r8
      _M_deallocate(pointer __p, size_t __n)
   21f98:	e7dd      	b.n	21f56 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x76>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   21f9a:	42a3      	cmp	r3, r4
   21f9c:	bf28      	it	cs
   21f9e:	4623      	movcs	r3, r4
   21fa0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   21fa4:	00dc      	lsls	r4, r3, #3
   21fa6:	4620      	mov	r0, r4
   21fa8:	f00d fcae 	bl	2f908 <_Znwj>
   21fac:	4683      	mov	fp, r0
      this->_M_impl._M_end_of_storage = __new_start + __len;
   21fae:	4404      	add	r4, r0
   21fb0:	e7b2      	b.n	21f18 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x38>
   21fb2:	4c05      	ldr	r4, [pc, #20]	; (21fc8 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xe8>)
   21fb4:	eba1 0a08 	sub.w	sl, r1, r8
      _M_allocate(size_t __n)
   21fb8:	e7f5      	b.n	21fa6 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xc6>
	  __throw_length_error(__N(__s));
   21fba:	4804      	ldr	r0, [pc, #16]	; (21fcc <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xec>)
   21fbc:	f014 fd06 	bl	369cc <_ZSt20__throw_length_errorPKc>
   21fc0:	aaaaaaab 	.word	0xaaaaaaab
   21fc4:	05555555 	.word	0x05555555
   21fc8:	7ffffff8 	.word	0x7ffffff8
   21fcc:	0003f9f4 	.word	0x0003f9f4

00021fd0 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj>:
  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_default_append(size_type __n)
    {
      if (__n != 0)
   21fd0:	2900      	cmp	r1, #0
   21fd2:	d070      	beq.n	220b6 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0xe6>
    vector<_Tp, _Alloc>::
   21fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   21fd8:	e9d0 8c00 	ldrd	r8, ip, [r0]
	{
	  const size_type __size = size();
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
					 - this->_M_impl._M_finish);
   21fdc:	6883      	ldr	r3, [r0, #8]
   21fde:	4a4b      	ldr	r2, [pc, #300]	; (2210c <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x13c>)
   21fe0:	eba3 030c 	sub.w	r3, r3, ip
   21fe4:	ebac 0408 	sub.w	r4, ip, r8
   21fe8:	10db      	asrs	r3, r3, #3
   21fea:	460d      	mov	r5, r1
   21fec:	fb02 f303 	mul.w	r3, r2, r3

	  if (__size > max_size() || __navail > max_size() - __size)
   21ff0:	4947      	ldr	r1, [pc, #284]	; (22110 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x140>)
   21ff2:	10e7      	asrs	r7, r4, #3
   21ff4:	fb02 f707 	mul.w	r7, r2, r7
	    __builtin_unreachable();

	  if (__navail >= __n)
   21ff8:	42ab      	cmp	r3, r5
    vector<_Tp, _Alloc>::
   21ffa:	b089      	sub	sp, #36	; 0x24
   21ffc:	4606      	mov	r6, r0
	  if (__size > max_size() || __navail > max_size() - __size)
   21ffe:	eba1 0207 	sub.w	r2, r1, r7
	  if (__navail >= __n)
   22002:	d23a      	bcs.n	2207a <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0xaa>
	if (max_size() - size() < __n)
   22004:	42aa      	cmp	r2, r5
   22006:	d37d      	bcc.n	22104 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x134>
   22008:	42af      	cmp	r7, r5
   2200a:	463b      	mov	r3, r7
   2200c:	bf38      	it	cc
   2200e:	462b      	movcc	r3, r5
   22010:	18fb      	adds	r3, r7, r3
   22012:	d274      	bcs.n	220fe <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x12e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   22014:	2b00      	cmp	r3, #0
   22016:	d14f      	bne.n	220b8 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0xe8>
   22018:	e9cd 3400 	strd	r3, r4, [sp]
   2201c:	4699      	mov	r9, r3
	  return std::fill_n(__first, __n, _ValueType());
   2201e:	2300      	movs	r3, #0
   22020:	f10d 0a08 	add.w	sl, sp, #8
   22024:	9302      	str	r3, [sp, #8]
   22026:	e9ca 3301 	strd	r3, r3, [sl, #4]
   2202a:	e9ca 3303 	strd	r3, r3, [sl, #12]
	      pointer __new_start(this->_M_allocate(__len));
	      if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
		{
		  __try
		    {
		      std::__uninitialized_default_n_a(__new_start + __size,
   2202e:	444c      	add	r4, r9
      if (__n <= 0)
	return __first;

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
   22030:	eb05 0b45 	add.w	fp, r5, r5, lsl #1
   22034:	f8ca 3014 	str.w	r3, [sl, #20]
   22038:	eb04 0bcb 	add.w	fp, r4, fp, lsl #3
	*__first = __value;
   2203c:	46d6      	mov	lr, sl
   2203e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   22042:	46a4      	mov	ip, r4
   22044:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   22048:	e89e 0003 	ldmia.w	lr, {r0, r1}
      for (; __first != __last; ++__first)
   2204c:	3418      	adds	r4, #24
   2204e:	45a3      	cmp	fp, r4
	*__first = __value;
   22050:	e88c 0003 	stmia.w	ip, {r0, r1}
      for (; __first != __last; ++__first)
   22054:	d1f2      	bne.n	2203c <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x6c>
      if (__count > 0)
   22056:	9a01      	ldr	r2, [sp, #4]
   22058:	2a00      	cmp	r2, #0
   2205a:	dc41      	bgt.n	220e0 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x110>
	if (__p)
   2205c:	f1b8 0f00 	cmp.w	r8, #0
   22060:	d149      	bne.n	220f6 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x126>
	      _GLIBCXX_ASAN_ANNOTATE_REINIT;
	      _M_deallocate(this->_M_impl._M_start,
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_start + __size + __n;
   22062:	443d      	add	r5, r7
	      this->_M_impl._M_end_of_storage = __new_start + __len;
   22064:	9b00      	ldr	r3, [sp, #0]
   22066:	60b3      	str	r3, [r6, #8]
	      this->_M_impl._M_finish = __new_start + __size + __n;
   22068:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2206c:	eb09 05c5 	add.w	r5, r9, r5, lsl #3
   22070:	e9c6 9500 	strd	r9, r5, [r6]
	    }
	}
    }
   22074:	b009      	add	sp, #36	; 0x24
   22076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  return std::fill_n(__first, __n, _ValueType());
   2207a:	2300      	movs	r3, #0
   2207c:	f10d 0a08 	add.w	sl, sp, #8
   22080:	9302      	str	r3, [sp, #8]
   22082:	e9ca 3301 	strd	r3, r3, [sl, #4]
   22086:	e9ca 3303 	strd	r3, r3, [sl, #12]
      std::__fill_a(__first, __first + __n, __value);
   2208a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2208e:	eb0c 05c5 	add.w	r5, ip, r5, lsl #3
   22092:	f8ca 3014 	str.w	r3, [sl, #20]
	*__first = __value;
   22096:	4657      	mov	r7, sl
   22098:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   2209a:	4664      	mov	r4, ip
   2209c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   2209e:	e897 0003 	ldmia.w	r7, {r0, r1}
      for (; __first != __last; ++__first)
   220a2:	f10c 0c18 	add.w	ip, ip, #24
   220a6:	4565      	cmp	r5, ip
	*__first = __value;
   220a8:	e884 0003 	stmia.w	r4, {r0, r1}
      for (; __first != __last; ++__first)
   220ac:	d1f3      	bne.n	22096 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0xc6>
	      this->_M_impl._M_finish =
   220ae:	6075      	str	r5, [r6, #4]
    }
   220b0:	b009      	add	sp, #36	; 0x24
   220b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   220b6:	4770      	bx	lr
   220b8:	428b      	cmp	r3, r1
   220ba:	bf28      	it	cs
   220bc:	460b      	movcs	r3, r1
   220be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   220c2:	ea4f 08c3 	mov.w	r8, r3, lsl #3
   220c6:	4640      	mov	r0, r8
   220c8:	f00d fc1e 	bl	2f908 <_Znwj>
	      this->_M_impl._M_end_of_storage = __new_start + __len;
   220cc:	eb00 0308 	add.w	r3, r0, r8
   220d0:	9300      	str	r3, [sp, #0]
      ptrdiff_t __count = __last - __first;
   220d2:	e9d6 8300 	ldrd	r8, r3, [r6]
   220d6:	eba3 0308 	sub.w	r3, r3, r8
   220da:	4681      	mov	r9, r0
   220dc:	9301      	str	r3, [sp, #4]
   220de:	e79e      	b.n	2201e <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x4e>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   220e0:	4641      	mov	r1, r8
   220e2:	4648      	mov	r0, r9
   220e4:	f008 fe62 	bl	2adac <memmove>
			    - this->_M_impl._M_start);
   220e8:	68b1      	ldr	r1, [r6, #8]
   220ea:	eba1 0108 	sub.w	r1, r1, r8
	::operator delete(__p
   220ee:	4640      	mov	r0, r8
   220f0:	f00d fc0e 	bl	2f910 <_ZdlPvj>
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static _GLIBCXX20_CONSTEXPR void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
      { __a.deallocate(__p, __n); }
   220f4:	e7b5      	b.n	22062 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x92>
   220f6:	68b1      	ldr	r1, [r6, #8]
   220f8:	eba1 0108 	sub.w	r1, r1, r8
   220fc:	e7f7      	b.n	220ee <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x11e>
   220fe:	f8df 8018 	ldr.w	r8, [pc, #24]	; 22118 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x148>
   22102:	e7e0      	b.n	220c6 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0xf6>
	  __throw_length_error(__N(__s));
   22104:	4803      	ldr	r0, [pc, #12]	; (22114 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x144>)
   22106:	f014 fc61 	bl	369cc <_ZSt20__throw_length_errorPKc>
   2210a:	bf00      	nop
   2210c:	aaaaaaab 	.word	0xaaaaaaab
   22110:	05555555 	.word	0x05555555
   22114:	0003fa10 	.word	0x0003fa10
   22118:	7ffffff8 	.word	0x7ffffff8

0002211c <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim>:
__attribute__((unused)) static void fill_result_struct_from_cubes(ei_impulse_result_t *result, std::vector<ei_classifier_cube_t*> *cubes, int out_width_factor, uint32_t object_detection_count) {
   2211c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22120:	ed2d 8b02 	vpush	{d8}
   22124:	b097      	sub	sp, #92	; 0x5c
   22126:	e9cd 2106 	strd	r2, r1, [sp, #24]
   2212a:	9308      	str	r3, [sp, #32]
	: _M_start(), _M_finish(), _M_end_of_storage()
   2212c:	2200      	movs	r2, #0
   2212e:	2300      	movs	r3, #0
   22130:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    static std::vector<ei_impulse_result_bounding_box_t> results;
   22134:	4d90      	ldr	r5, [pc, #576]	; (22378 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x25c>)
__attribute__((unused)) static void fill_result_struct_from_cubes(ei_impulse_result_t *result, std::vector<ei_classifier_cube_t*> *cubes, int out_width_factor, uint32_t object_detection_count) {
   22136:	9009      	str	r0, [sp, #36]	; 0x24
   22138:	2300      	movs	r3, #0
   2213a:	930e      	str	r3, [sp, #56]	; 0x38
    static std::vector<ei_impulse_result_bounding_box_t> results;
   2213c:	782b      	ldrb	r3, [r5, #0]
   2213e:	f3bf 8f5b 	dmb	ish
   22142:	f013 0401 	ands.w	r4, r3, #1
   22146:	f000 80d2 	beq.w	222ee <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x1d2>
   2214a:	4b8c      	ldr	r3, [pc, #560]	; (2237c <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x260>)
   2214c:	9305      	str	r3, [sp, #20]
   2214e:	4619      	mov	r1, r3
      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
   22150:	e9d1 3200 	ldrd	r3, r2, [r1]
   22154:	429a      	cmp	r2, r3
      : _M_current(__i) { }
   22156:	9a07      	ldr	r2, [sp, #28]
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
   22158:	bf18      	it	ne
   2215a:	604b      	strne	r3, [r1, #4]
   2215c:	e9d2 3200 	ldrd	r3, r2, [r2]
    int added_boxes_count = 0;
    results.clear();
    for (auto sc : *cubes) {
   22160:	4293      	cmp	r3, r2
   22162:	9204      	str	r2, [sp, #16]
   22164:	f000 8105 	beq.w	22372 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x256>
   22168:	9302      	str	r3, [sp, #8]
    int added_boxes_count = 0;
   2216a:	2300      	movs	r3, #0
   2216c:	9303      	str	r3, [sp, #12]
   2216e:	e036      	b.n	221de <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0xc2>
    bool is_overlapping = !(c->x + c->width < x || c->y + c->height < y || c->x > x + width || c->y > y + height);
   22170:	6823      	ldr	r3, [r4, #0]
   22172:	68a1      	ldr	r1, [r4, #8]
   22174:	9800      	ldr	r0, [sp, #0]
   22176:	185a      	adds	r2, r3, r1
   22178:	4290      	cmp	r0, r2
   2217a:	d851      	bhi.n	22220 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x104>
   2217c:	6860      	ldr	r0, [r4, #4]
   2217e:	f8d4 e00c 	ldr.w	lr, [r4, #12]
   22182:	eb00 0c0e 	add.w	ip, r0, lr
   22186:	45e0      	cmp	r8, ip
   22188:	d84a      	bhi.n	22220 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x104>
   2218a:	4553      	cmp	r3, sl
   2218c:	d848      	bhi.n	22220 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x104>
   2218e:	9f01      	ldr	r7, [sp, #4]
   22190:	42b8      	cmp	r0, r7
   22192:	d845      	bhi.n	22220 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x104>
    if (x < c->x) {
   22194:	9f00      	ldr	r7, [sp, #0]
   22196:	429f      	cmp	r7, r3
   22198:	d202      	bcs.n	221a0 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x84>
        c->x = x;
   2219a:	6027      	str	r7, [r4, #0]
    if (x + width > c->x + c->width) {
   2219c:	187a      	adds	r2, r7, r1
   2219e:	463b      	mov	r3, r7
    if (y < c->y) {
   221a0:	4580      	cmp	r8, r0
   221a2:	d204      	bcs.n	221ae <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x92>
        c->y = y;
   221a4:	f8c4 8004 	str.w	r8, [r4, #4]
    if (y + height > c->y + c->height) {
   221a8:	eb08 0c0e 	add.w	ip, r8, lr
   221ac:	4640      	mov	r0, r8
    if (x + width > c->x + c->width) {
   221ae:	4592      	cmp	sl, r2
        c->width += (x + width) - (c->x + c->width);
   221b0:	bf84      	itt	hi
   221b2:	ebaa 0303 	subhi.w	r3, sl, r3
   221b6:	60a3      	strhi	r3, [r4, #8]
    if (y + height > c->y + c->height) {
   221b8:	9b01      	ldr	r3, [sp, #4]
    if (confidence > c->confidence) {
   221ba:	edd4 7a04 	vldr	s15, [r4, #16]
    if (y + height > c->y + c->height) {
   221be:	4563      	cmp	r3, ip
        c->height += (y + height) - (c->y + c->height);
   221c0:	bf88      	it	hi
   221c2:	1a18      	subhi	r0, r3, r0
    if (confidence > c->confidence) {
   221c4:	eeb4 8ae7 	vcmpe.f32	s16, s15
        c->height += (y + height) - (c->y + c->height);
   221c8:	bf88      	it	hi
   221ca:	60e0      	strhi	r0, [r4, #12]
    if (confidence > c->confidence) {
   221cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   221d0:	dd01      	ble.n	221d6 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0xba>
        c->confidence = confidence;
   221d2:	ed84 8a04 	vstr	s16, [r4, #16]
    for (auto sc : *cubes) {
   221d6:	9b04      	ldr	r3, [sp, #16]
   221d8:	9a02      	ldr	r2, [sp, #8]
   221da:	4293      	cmp	r3, r2
   221dc:	d054      	beq.n	22288 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x16c>
   221de:	9b02      	ldr	r3, [sp, #8]
   221e0:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
   221e4:	f853 9b04 	ldr.w	r9, [r3], #4
   221e8:	9302      	str	r3, [sp, #8]
        int width = sc->width;
        int height = sc->height;
        const char *label = sc->label;
        float vf = sc->confidence;

        for (auto c : bbs) {
   221ea:	42b5      	cmp	r5, r6
        int width = sc->width;
   221ec:	e9d9 8201 	ldrd	r8, r2, [r9, #4]
        int x = sc->x;
   221f0:	f8d9 7000 	ldr.w	r7, [r9]
        float vf = sc->confidence;
   221f4:	ed99 8a04 	vldr	s16, [r9, #16]
        int height = sc->height;
   221f8:	f8d9 300c 	ldr.w	r3, [r9, #12]
        const char *label = sc->label;
   221fc:	f8d9 b014 	ldr.w	fp, [r9, #20]
    for (auto sc : *cubes) {
   22200:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
        for (auto c : bbs) {
   22204:	d00e      	beq.n	22224 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x108>
    bool is_overlapping = !(c->x + c->width < x || c->y + c->height < y || c->x > x + width || c->y > y + height);
   22206:	4443      	add	r3, r8
   22208:	e9cd 7300 	strd	r7, r3, [sp]
   2220c:	eb07 0a02 	add.w	sl, r7, r2
        for (auto c : bbs) {
   22210:	f855 4b04 	ldr.w	r4, [r5], #4
            // not cube for same class? continue
            if (strcmp(c->label, label) != 0) continue;
   22214:	4659      	mov	r1, fp
   22216:	6960      	ldr	r0, [r4, #20]
   22218:	f7f6 f896 	bl	18348 <strcmp>
   2221c:	2800      	cmp	r0, #0
   2221e:	d0a7      	beq.n	22170 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x54>
        for (auto c : bbs) {
   22220:	42ae      	cmp	r6, r5
   22222:	d1f5      	bne.n	22210 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0xf4>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   22224:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   22226:	429e      	cmp	r6, r3
   22228:	d05b      	beq.n	222e2 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x1c6>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   2222a:	f846 9b04 	str.w	r9, [r6], #4
	    ++this->_M_impl._M_finish;
   2222e:	960d      	str	r6, [sp, #52]	; 0x34
        }

        bbs.push_back(sc);

        ei_impulse_result_bounding_box_t tmp = {
            .label = sc->label,
   22230:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            .x = (uint32_t)(sc->x * out_width_factor),
   22232:	9906      	ldr	r1, [sp, #24]
   22234:	681a      	ldr	r2, [r3, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   22236:	9f05      	ldr	r7, [sp, #20]
   22238:	fb01 f202 	mul.w	r2, r1, r2
            .y = (uint32_t)(sc->y * out_width_factor),
            .width = (uint32_t)(sc->width * out_width_factor),
            .height = (uint32_t)(sc->height * out_width_factor),
            .value = sc->confidence
        };
   2223c:	9211      	str	r2, [sp, #68]	; 0x44
            .y = (uint32_t)(sc->y * out_width_factor),
   2223e:	685a      	ldr	r2, [r3, #4]
   22240:	687c      	ldr	r4, [r7, #4]
   22242:	fb01 f202 	mul.w	r2, r1, r2
        };
   22246:	9212      	str	r2, [sp, #72]	; 0x48
            .width = (uint32_t)(sc->width * out_width_factor),
   22248:	689a      	ldr	r2, [r3, #8]
   2224a:	fb01 f202 	mul.w	r2, r1, r2
        };
   2224e:	9213      	str	r2, [sp, #76]	; 0x4c
            .height = (uint32_t)(sc->height * out_width_factor),
   22250:	68da      	ldr	r2, [r3, #12]
   22252:	fb01 f202 	mul.w	r2, r1, r2
        };
   22256:	9214      	str	r2, [sp, #80]	; 0x50
   22258:	691a      	ldr	r2, [r3, #16]
   2225a:	695b      	ldr	r3, [r3, #20]
   2225c:	9310      	str	r3, [sp, #64]	; 0x40
   2225e:	68bb      	ldr	r3, [r7, #8]
   22260:	9215      	str	r2, [sp, #84]	; 0x54
   22262:	429c      	cmp	r4, r3
   22264:	d037      	beq.n	222d6 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x1ba>
   22266:	ad10      	add	r5, sp, #64	; 0x40
   22268:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
   2226a:	f104 0618 	add.w	r6, r4, #24
   2226e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   22270:	e895 0003 	ldmia.w	r5, {r0, r1}
   22274:	e884 0003 	stmia.w	r4, {r0, r1}
   22278:	607e      	str	r6, [r7, #4]

        results.push_back(tmp);
        added_boxes_count++;
   2227a:	9b03      	ldr	r3, [sp, #12]
    for (auto sc : *cubes) {
   2227c:	9a02      	ldr	r2, [sp, #8]
        added_boxes_count++;
   2227e:	3301      	adds	r3, #1
   22280:	9303      	str	r3, [sp, #12]
    for (auto sc : *cubes) {
   22282:	9b04      	ldr	r3, [sp, #16]
   22284:	4293      	cmp	r3, r2
   22286:	d1aa      	bne.n	221de <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0xc2>
    }

    // if we didn't detect min required objects, fill the rest with fixed value
    if(added_boxes_count < object_detection_count) {
   22288:	9c03      	ldr	r4, [sp, #12]
   2228a:	9b08      	ldr	r3, [sp, #32]
   2228c:	42a3      	cmp	r3, r4
   2228e:	d836      	bhi.n	222fe <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x1e2>
   22290:	9b07      	ldr	r3, [sp, #28]
   22292:	e9d3 4500 	ldrd	r4, r5, [r3]
        for (size_t ix = added_boxes_count; ix < object_detection_count; ix++) {
            results[ix].value = 0.0f;
        }
    }

    for (auto c : *cubes) {
   22296:	42a5      	cmp	r5, r4
   22298:	d007      	beq.n	222aa <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x18e>
   2229a:	f854 0b04 	ldr.w	r0, [r4], #4
        delete c;
   2229e:	2118      	movs	r1, #24
   222a0:	b108      	cbz	r0, 222a6 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x18a>
   222a2:	f00d fb35 	bl	2f910 <_ZdlPvj>
    for (auto c : *cubes) {
   222a6:	42a5      	cmp	r5, r4
   222a8:	d1f7      	bne.n	2229a <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x17e>
      { return _M_data_ptr(this->_M_impl._M_start); }
   222aa:	9b05      	ldr	r3, [sp, #20]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   222ac:	4934      	ldr	r1, [pc, #208]	; (22380 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x264>)
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   222ae:	980c      	ldr	r0, [sp, #48]	; 0x30
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   222b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   222b4:	1a9b      	subs	r3, r3, r2
   222b6:	10db      	asrs	r3, r3, #3
   222b8:	fb01 f303 	mul.w	r3, r1, r3
    }

    result->bounding_boxes = results.data();
   222bc:	9909      	ldr	r1, [sp, #36]	; 0x24
    result->bounding_boxes_count = results.size();
   222be:	e9c1 2300 	strd	r2, r3, [r1]
	if (__p)
   222c2:	b118      	cbz	r0, 222cc <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x1b0>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   222c4:	990e      	ldr	r1, [sp, #56]	; 0x38
	::operator delete(__p
   222c6:	1a09      	subs	r1, r1, r0
   222c8:	f00d fb22 	bl	2f910 <_ZdlPvj>
}
   222cc:	b017      	add	sp, #92	; 0x5c
   222ce:	ecbd 8b02 	vpop	{d8}
   222d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  _M_realloc_insert(end(), __x);
   222d6:	4829      	ldr	r0, [pc, #164]	; (2237c <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x260>)
   222d8:	4621      	mov	r1, r4
   222da:	aa10      	add	r2, sp, #64	; 0x40
   222dc:	f7ff fe00 	bl	21ee0 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
   222e0:	e7cb      	b.n	2227a <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x15e>
   222e2:	4631      	mov	r1, r6
   222e4:	aa0b      	add	r2, sp, #44	; 0x2c
   222e6:	a80c      	add	r0, sp, #48	; 0x30
   222e8:	f7ff fd8e 	bl	21e08 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
   222ec:	e7a0      	b.n	22230 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x114>
    static std::vector<ei_impulse_result_bounding_box_t> results;
   222ee:	4628      	mov	r0, r5
   222f0:	f014 fa0a 	bl	36708 <__cxa_guard_acquire>
	: _M_start(), _M_finish(), _M_end_of_storage()
   222f4:	4b21      	ldr	r3, [pc, #132]	; (2237c <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x260>)
   222f6:	9305      	str	r3, [sp, #20]
   222f8:	bb80      	cbnz	r0, 2235c <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x240>
   222fa:	4619      	mov	r1, r3
   222fc:	e728      	b.n	22150 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x34>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   222fe:	9b05      	ldr	r3, [sp, #20]
   22300:	e9d3 0200 	ldrd	r0, r2, [r3]
   22304:	4b1e      	ldr	r3, [pc, #120]	; (22380 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x264>)
   22306:	1a11      	subs	r1, r2, r0
   22308:	10c9      	asrs	r1, r1, #3
   2230a:	fb03 f101 	mul.w	r1, r3, r1
	if (__new_size > size())
   2230e:	9b08      	ldr	r3, [sp, #32]
   22310:	428b      	cmp	r3, r1
   22312:	d81a      	bhi.n	2234a <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x22e>
	else if (__new_size < size())
   22314:	d30e      	bcc.n	22334 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x218>
   22316:	005b      	lsls	r3, r3, #1
        for (size_t ix = added_boxes_count; ix < object_detection_count; ix++) {
   22318:	9a08      	ldr	r2, [sp, #32]
   2231a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   2231e:	441a      	add	r2, r3
   22320:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
   22324:	eb00 03c4 	add.w	r3, r0, r4, lsl #3
            results[ix].value = 0.0f;
   22328:	2100      	movs	r1, #0
   2232a:	6159      	str	r1, [r3, #20]
        for (size_t ix = added_boxes_count; ix < object_detection_count; ix++) {
   2232c:	3318      	adds	r3, #24
   2232e:	429a      	cmp	r2, r3
   22330:	d1fb      	bne.n	2232a <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x20e>
   22332:	e7ad      	b.n	22290 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x174>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
   22334:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   22338:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (size_type __n = this->_M_impl._M_finish - __pos)
   2233c:	428a      	cmp	r2, r1
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
   2233e:	ea4f 0343 	mov.w	r3, r3, lsl #1
	if (size_type __n = this->_M_impl._M_finish - __pos)
   22342:	d0e9      	beq.n	22318 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x1fc>
	    this->_M_impl._M_finish = __pos;
   22344:	9a05      	ldr	r2, [sp, #20]
   22346:	6051      	str	r1, [r2, #4]
   22348:	e7e6      	b.n	22318 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x1fc>
	  _M_default_append(__new_size - size());
   2234a:	480c      	ldr	r0, [pc, #48]	; (2237c <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x260>)
   2234c:	1a59      	subs	r1, r3, r1
   2234e:	461d      	mov	r5, r3
   22350:	f7ff fe3e 	bl	21fd0 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj>
	return *(this->_M_impl._M_start + __n);
   22354:	9b05      	ldr	r3, [sp, #20]
   22356:	6818      	ldr	r0, [r3, #0]
   22358:	006b      	lsls	r3, r5, #1
   2235a:	e7dd      	b.n	22318 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x1fc>
	: _M_start(), _M_finish(), _M_end_of_storage()
   2235c:	e9c3 4400 	strd	r4, r4, [r3]
   22360:	609c      	str	r4, [r3, #8]
    static std::vector<ei_impulse_result_bounding_box_t> results;
   22362:	4808      	ldr	r0, [pc, #32]	; (22384 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x268>)
   22364:	f008 fd02 	bl	2ad6c <atexit>
   22368:	4628      	mov	r0, r5
   2236a:	f014 f9e9 	bl	36740 <__cxa_guard_release>
   2236e:	9905      	ldr	r1, [sp, #20]
   22370:	e6ee      	b.n	22150 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x34>
    for (auto sc : *cubes) {
   22372:	2400      	movs	r4, #0
   22374:	e789      	b.n	2228a <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x16e>
   22376:	bf00      	nop
   22378:	10010b2c 	.word	0x10010b2c
   2237c:	1001887c 	.word	0x1001887c
   22380:	aaaaaaab 	.word	0xaaaaaaab
   22384:	000206c1 	.word	0x000206c1

00022388 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0>:
 * @param   result          Struct for results
 * @param   debug           Whether to print debug info
 *
 * @return  EI_IMPULSE_OK if successful
 */
static EI_IMPULSE_ERROR inference_tflite_run(const ei_impulse_t *impulse,
   22388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2238c:	ed2d 8b06 	vpush	{d8-d10}
   22390:	b093      	sub	sp, #76	; 0x4c
   22392:	4680      	mov	r8, r0
   22394:	9c22      	ldr	r4, [sp, #136]	; 0x88
   22396:	f89d 5090 	ldrb.w	r5, [sp, #144]	; 0x90
   2239a:	4617      	mov	r7, r2
   2239c:	461e      	mov	r6, r3
    TfLiteTensor* scores_tensor,
    uint8_t* tensor_arena,
    ei_impulse_result_t *result,
    bool debug) {

    if(trained_model_invoke() != kTfLiteOk) {
   2239e:	f004 f879 	bl	26494 <_Z20trained_model_invokev>
   223a2:	2800      	cmp	r0, #0
   223a4:	f040 81d6 	bne.w	22754 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x3cc>
        return EI_IMPULSE_TFLITE_ERROR;
    }

    uint64_t ctx_end_us = ei_read_timer_us();
   223a8:	f003 fe76 	bl	26098 <_Z16ei_read_timer_usv>

    result->timing.classification_us = ctx_end_us - ctx_start_us;
   223ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   223ae:	1bc0      	subs	r0, r0, r7
   223b0:	eb61 0106 	sbc.w	r1, r1, r6
   223b4:	e9c3 013c 	strd	r0, r1, [r3, #240]	; 0xf0
    result->timing.classification = (int)(result->timing.classification_us / 1000);
   223b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   223bc:	2300      	movs	r3, #0
   223be:	f7f6 fed1 	bl	19164 <__aeabi_ldivmod>
   223c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   223c4:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0

    // Read the predicted y value from the model's output tensor
    if (debug) {
   223c8:	2d00      	cmp	r5, #0
   223ca:	d13c      	bne.n	22446 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0xbe>
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
    }

    if (impulse->object_detection) {
   223cc:	f898 6044 	ldrb.w	r6, [r8, #68]	; 0x44
   223d0:	b1a6      	cbz	r6, 223fc <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x74>
        switch (impulse->object_detection_last_layer) {
   223d2:	f998 104c 	ldrsb.w	r1, [r8, #76]	; 0x4c
   223d6:	2902      	cmp	r1, #2
   223d8:	f000 8082 	beq.w	224e0 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x158>
   223dc:	2903      	cmp	r1, #3
   223de:	f000 8185 	beq.w	226ec <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x364>
   223e2:	2901      	cmp	r1, #1
   223e4:	f000 816c 	beq.w	226c0 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x338>
                ei_printf("ERR: YOLOv5 models are not supported using EON Compiler, use full TFLite (%d)\n",
                    impulse->object_detection_last_layer);
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
            }
            default: {
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
   223e8:	48ba      	ldr	r0, [pc, #744]	; (226d4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x34c>)
   223ea:	f003 fe5d 	bl	260a8 <_Z9ei_printfPKcz>
                    impulse->object_detection_last_layer);
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
   223ee:	f06f 0009 	mvn.w	r0, #9
    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
        return EI_IMPULSE_CANCELED;
    }

    return EI_IMPULSE_OK;
}
   223f2:	b013      	add	sp, #76	; 0x4c
   223f4:	ecbd 8b06 	vpop	{d8-d10}
   223f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (int8_output) {
   223fc:	7f23      	ldrb	r3, [r4, #28]
   223fe:	2b09      	cmp	r3, #9
   22400:	d048      	beq.n	22494 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x10c>

/**
 * Fill the result structure from an unquantized output tensor
 */
__attribute__((unused)) static void fill_result_struct_f32(const ei_impulse_t *impulse, ei_impulse_result_t *result, float *data, bool debug) {
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
   22402:	f8b8 0030 	ldrh.w	r0, [r8, #48]	; 0x30
            fill_result_struct_f32(impulse, result, output->data.f, debug);
   22406:	6922      	ldr	r2, [r4, #16]
   22408:	b180      	cbz	r0, 2242c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0xa4>
        float value = data[ix];

        if (debug) {
            ei_printf("%s:\t", impulse->categories[ix]);
   2240a:	f8d8 10a4 	ldr.w	r1, [r8, #164]	; 0xa4
   2240e:	b9fd      	cbnz	r5, 22450 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0xc8>
   22410:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   22412:	3904      	subs	r1, #4
   22414:	eb02 0580 	add.w	r5, r2, r0, lsl #2
        float value = data[ix];
   22418:	f852 0b04 	ldr.w	r0, [r2], #4
            ei_printf_float(value);
            ei_printf("\n");
        }
        result->classification[ix].label = impulse->categories[ix];
   2241c:	f851 4f04 	ldr.w	r4, [r1, #4]!
   22420:	609c      	str	r4, [r3, #8]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
   22422:	42aa      	cmp	r2, r5
        result->classification[ix].value = value;
   22424:	60d8      	str	r0, [r3, #12]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
   22426:	f103 0308 	add.w	r3, r3, #8
   2242a:	d1f5      	bne.n	22418 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x90>
    trained_model_reset(ei_aligned_free);
   2242c:	48aa      	ldr	r0, [pc, #680]	; (226d8 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x350>)
   2242e:	f004 f853 	bl	264d8 <_Z19trained_model_resetPFvPvE>
    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
   22432:	f003 fe2f 	bl	26094 <_Z29ei_run_impulse_check_canceledv>
    return EI_IMPULSE_OK;
   22436:	1c83      	adds	r3, r0, #2
   22438:	bf18      	it	ne
   2243a:	2000      	movne	r0, #0
}
   2243c:	b013      	add	sp, #76	; 0x4c
   2243e:	ecbd 8b06 	vpop	{d8-d10}
   22442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
   22446:	4601      	mov	r1, r0
   22448:	48a4      	ldr	r0, [pc, #656]	; (226dc <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x354>)
   2244a:	f003 fe2d 	bl	260a8 <_Z9ei_printfPKcz>
   2244e:	e7bd      	b.n	223cc <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x44>
   22450:	9c23      	ldr	r4, [sp, #140]	; 0x8c
            ei_printf("%s:\t", impulse->categories[ix]);
   22452:	f8df 9294 	ldr.w	r9, [pc, #660]	; 226e8 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x360>
            ei_printf("\n");
   22456:	4fa2      	ldr	r7, [pc, #648]	; (226e0 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x358>)
   22458:	4615      	mov	r5, r2
        float value = data[ix];
   2245a:	ecb5 8a01 	vldmia	r5!, {s16}
            ei_printf("%s:\t", impulse->categories[ix]);
   2245e:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
   22462:	4648      	mov	r0, r9
   22464:	f003 fe20 	bl	260a8 <_Z9ei_printfPKcz>
            ei_printf_float(value);
   22468:	eeb0 0a48 	vmov.f32	s0, s16
   2246c:	f003 fe2a 	bl	260c4 <_Z15ei_printf_floatf>
            ei_printf("\n");
   22470:	4638      	mov	r0, r7
   22472:	f003 fe19 	bl	260a8 <_Z9ei_printfPKcz>
        result->classification[ix].label = impulse->categories[ix];
   22476:	f8d8 10a4 	ldr.w	r1, [r8, #164]	; 0xa4
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
   2247a:	f8b8 3030 	ldrh.w	r3, [r8, #48]	; 0x30
        result->classification[ix].label = impulse->categories[ix];
   2247e:	f851 2026 	ldr.w	r2, [r1, r6, lsl #2]
   22482:	60a2      	str	r2, [r4, #8]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
   22484:	3601      	adds	r6, #1
   22486:	42b3      	cmp	r3, r6
        result->classification[ix].value = value;
   22488:	ed84 8a03 	vstr	s16, [r4, #12]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
   2248c:	f104 0408 	add.w	r4, r4, #8
   22490:	d8e3      	bhi.n	2245a <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0xd2>
   22492:	e7cb      	b.n	2242c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0xa4>
            fill_result_struct_i8(impulse, result, output->data.int8, output->params.zero_point, output->params.scale, debug);
   22494:	edd4 7a03 	vldr	s15, [r4, #12]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
   22498:	f8b8 0030 	ldrh.w	r0, [r8, #48]	; 0x30
   2249c:	ed94 9a02 	vldr	s18, [r4, #8]
   224a0:	6923      	ldr	r3, [r4, #16]
   224a2:	eef8 8ae7 	vcvt.f32.s32	s17, s15
   224a6:	2800      	cmp	r0, #0
   224a8:	d0c0      	beq.n	2242c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0xa4>
            ei_printf("%s:\t", impulse->categories[ix]);
   224aa:	f8d8 20a4 	ldr.w	r2, [r8, #164]	; 0xa4
   224ae:	2d00      	cmp	r5, #0
   224b0:	f040 8126 	bne.w	22700 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x378>
   224b4:	9923      	ldr	r1, [sp, #140]	; 0x8c
   224b6:	3a04      	subs	r2, #4
   224b8:	4418      	add	r0, r3
        float value = static_cast<float>(data[ix] - zero_point) * scale;
   224ba:	f913 4b01 	ldrsb.w	r4, [r3], #1
   224be:	ee07 4a90 	vmov	s15, r4
   224c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
   224c6:	3108      	adds	r1, #8
        float value = static_cast<float>(data[ix] - zero_point) * scale;
   224c8:	ee77 7ae8 	vsub.f32	s15, s15, s17
        result->classification[ix].label = impulse->categories[ix];
   224cc:	f852 4f04 	ldr.w	r4, [r2, #4]!
   224d0:	600c      	str	r4, [r1, #0]
        float value = static_cast<float>(data[ix] - zero_point) * scale;
   224d2:	ee67 7a89 	vmul.f32	s15, s15, s18
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
   224d6:	4283      	cmp	r3, r0
        result->classification[ix].value = value;
   224d8:	edc1 7a01 	vstr	s15, [r1, #4]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
   224dc:	d1ed      	bne.n	224ba <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x132>
   224de:	e7a5      	b.n	2242c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0xa4>
                if (int8_output) {
   224e0:	7f23      	ldrb	r3, [r4, #28]
   224e2:	2b09      	cmp	r3, #9
                    fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
   224e4:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   224e8:	920a      	str	r2, [sp, #40]	; 0x28
                if (int8_output) {
   224ea:	f000 8136 	beq.w	2275a <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x3d2>
                    fill_result_struct_f32_fomo(impulse, result, output->data.f, (int)output->dims->data[1], (int)output->dims->data[2]);
   224ee:	689c      	ldr	r4, [r3, #8]
   224f0:	68db      	ldr	r3, [r3, #12]
   224f2:	9309      	str	r3, [sp, #36]	; 0x24
   224f4:	2000      	movs	r0, #0
   224f6:	2300      	movs	r3, #0
   224f8:	2100      	movs	r1, #0
    int out_width_factor = impulse->input_width / out_width;
   224fa:	f8d8 2020 	ldr.w	r2, [r8, #32]
   224fe:	940b      	str	r4, [sp, #44]	; 0x2c
   22500:	fbb2 f2f4 	udiv	r2, r2, r4
   22504:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   22508:	ee08 2a90 	vmov	s17, r2
   2250c:	9310      	str	r3, [sp, #64]	; 0x40
    for (size_t y = 0; y < out_width; y++) {
   2250e:	2c00      	cmp	r4, #0
   22510:	f000 8207 	beq.w	22922 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x59a>
   22514:	9a09      	ldr	r2, [sp, #36]	; 0x24
   22516:	2a00      	cmp	r2, #0
   22518:	f000 8203 	beq.w	22922 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x59a>
        for (size_t x = 0; x < out_height; x++) {
   2251c:	2201      	movs	r2, #1
   2251e:	9308      	str	r3, [sp, #32]
    for (size_t y = 0; y < out_width; y++) {
   22520:	469a      	mov	sl, r3
   22522:	ab0e      	add	r3, sp, #56	; 0x38
        for (size_t x = 0; x < out_height; x++) {
   22524:	9204      	str	r2, [sp, #16]
   22526:	ee09 3a90 	vmov	s19, r3
   2252a:	f8b8 2030 	ldrh.w	r2, [r8, #48]	; 0x30
   2252e:	9207      	str	r2, [sp, #28]
   22530:	9b07      	ldr	r3, [sp, #28]
            size_t loc = ((y * out_height) + x) * (impulse->label_count + 1);
   22532:	2701      	movs	r7, #1
   22534:	443b      	add	r3, r7
        for (size_t x = 0; x < out_height; x++) {
   22536:	f04f 0900 	mov.w	r9, #0
   2253a:	9306      	str	r3, [sp, #24]
   2253c:	464b      	mov	r3, r9
   2253e:	46b9      	mov	r9, r7
   22540:	461f      	mov	r7, r3
            size_t loc = ((y * out_height) + x) * (impulse->label_count + 1);
   22542:	9a06      	ldr	r2, [sp, #24]
   22544:	9b08      	ldr	r3, [sp, #32]
            for (size_t ix = 1; ix < impulse->label_count + 1; ix++) {
   22546:	2a01      	cmp	r2, #1
            size_t loc = ((y * out_height) + x) * (impulse->label_count + 1);
   22548:	443b      	add	r3, r7
   2254a:	fb02 f303 	mul.w	r3, r2, r3
            for (size_t ix = 1; ix < impulse->label_count + 1; ix++) {
   2254e:	f000 8098 	beq.w	22682 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x2fa>
   22552:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   22554:	3301      	adds	r3, #1
   22556:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   2255a:	9303      	str	r3, [sp, #12]
   2255c:	2601      	movs	r6, #1
   2255e:	e03a      	b.n	225d6 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x24e>
    bool is_overlapping = !(c->x + c->width < x || c->y + c->height < y || c->x > x + width || c->y > y + height);
   22560:	6820      	ldr	r0, [r4, #0]
   22562:	f8d4 e008 	ldr.w	lr, [r4, #8]
   22566:	eb00 0c0e 	add.w	ip, r0, lr
   2256a:	45c4      	cmp	ip, r8
   2256c:	d357      	bcc.n	2261e <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x296>
   2256e:	6863      	ldr	r3, [r4, #4]
   22570:	68e6      	ldr	r6, [r4, #12]
   22572:	199a      	adds	r2, r3, r6
   22574:	4552      	cmp	r2, sl
   22576:	d352      	bcc.n	2261e <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x296>
   22578:	4558      	cmp	r0, fp
   2257a:	d850      	bhi.n	2261e <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x296>
   2257c:	9f04      	ldr	r7, [sp, #16]
   2257e:	42bb      	cmp	r3, r7
   22580:	d84d      	bhi.n	2261e <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x296>
    if (x < c->x) {
   22582:	4647      	mov	r7, r8
   22584:	42b8      	cmp	r0, r7
   22586:	4631      	mov	r1, r6
   22588:	46c8      	mov	r8, r9
   2258a:	9e05      	ldr	r6, [sp, #20]
   2258c:	46d9      	mov	r9, fp
   2258e:	d903      	bls.n	22598 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x210>
        c->x = x;
   22590:	6027      	str	r7, [r4, #0]
    if (x + width > c->x + c->width) {
   22592:	eb0e 0c07 	add.w	ip, lr, r7
   22596:	4638      	mov	r0, r7
    if (y < c->y) {
   22598:	4553      	cmp	r3, sl
   2259a:	d904      	bls.n	225a6 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x21e>
        c->y = y;
   2259c:	f8c4 a004 	str.w	sl, [r4, #4]
    if (y + height > c->y + c->height) {
   225a0:	eb01 020a 	add.w	r2, r1, sl
   225a4:	4653      	mov	r3, sl
    if (x + width > c->x + c->width) {
   225a6:	45e1      	cmp	r9, ip
    if (y + height > c->y + c->height) {
   225a8:	9904      	ldr	r1, [sp, #16]
    if (confidence > c->confidence) {
   225aa:	edd4 7a04 	vldr	s15, [r4, #16]
        c->width += (x + width) - (c->x + c->width);
   225ae:	bf84      	itt	hi
   225b0:	eba9 0000 	subhi.w	r0, r9, r0
   225b4:	60a0      	strhi	r0, [r4, #8]
    if (y + height > c->y + c->height) {
   225b6:	4291      	cmp	r1, r2
        c->height += (y + height) - (c->y + c->height);
   225b8:	bf88      	it	hi
   225ba:	1acb      	subhi	r3, r1, r3
    if (confidence > c->confidence) {
   225bc:	eeb4 8ae7 	vcmpe.f32	s16, s15
        c->height += (y + height) - (c->y + c->height);
   225c0:	bf88      	it	hi
   225c2:	60e3      	strhi	r3, [r4, #12]
    if (confidence > c->confidence) {
   225c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   225c8:	dd01      	ble.n	225ce <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x246>
        c->confidence = confidence;
   225ca:	ed84 8a04 	vstr	s16, [r4, #16]
            for (size_t ix = 1; ix < impulse->label_count + 1; ix++) {
   225ce:	9b06      	ldr	r3, [sp, #24]
   225d0:	3601      	adds	r6, #1
   225d2:	42b3      	cmp	r3, r6
   225d4:	d948      	bls.n	22668 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x2e0>
                float vf = data[loc+ix];
   225d6:	9b03      	ldr	r3, [sp, #12]
    if (vf < detection_threshold) return;
   225d8:	edd8 7a12 	vldr	s15, [r8, #72]	; 0x48
                float vf = data[loc+ix];
   225dc:	ecb3 8a01 	vldmia	r3!, {s16}
    if (vf < detection_threshold) return;
   225e0:	eeb4 8ae7 	vcmpe.f32	s16, s15
   225e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                float vf = data[loc+ix];
   225e8:	9303      	str	r3, [sp, #12]
    if (vf < detection_threshold) return;
   225ea:	d4f0      	bmi.n	225ce <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x246>
                ei_handle_cube(&cubes, x, y, vf, impulse->categories[ix - 1], impulse->object_detection_threshold);
   225ec:	f8d8 30a4 	ldr.w	r3, [r8, #164]	; 0xa4
   225f0:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   225f4:	f853 bc04 	ldr.w	fp, [r3, #-4]
   225f8:	e9dd 530e 	ldrd	r5, r3, [sp, #56]	; 0x38
    for (auto c : *cubes) {
   225fc:	429d      	cmp	r5, r3
   225fe:	9302      	str	r3, [sp, #8]
   22600:	d015      	beq.n	2262e <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x2a6>
   22602:	4659      	mov	r1, fp
   22604:	9605      	str	r6, [sp, #20]
   22606:	46cb      	mov	fp, r9
   22608:	46c1      	mov	r9, r8
   2260a:	46b8      	mov	r8, r7
   2260c:	f855 4b04 	ldr.w	r4, [r5], #4
        if (strcmp(c->label, label) != 0) continue;
   22610:	9101      	str	r1, [sp, #4]
   22612:	6960      	ldr	r0, [r4, #20]
   22614:	f7f5 fe98 	bl	18348 <strcmp>
   22618:	9901      	ldr	r1, [sp, #4]
   2261a:	2800      	cmp	r0, #0
   2261c:	d0a0      	beq.n	22560 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x1d8>
    for (auto c : *cubes) {
   2261e:	9b02      	ldr	r3, [sp, #8]
   22620:	42ab      	cmp	r3, r5
   22622:	d1f3      	bne.n	2260c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x284>
   22624:	9e05      	ldr	r6, [sp, #20]
   22626:	4647      	mov	r7, r8
   22628:	46c8      	mov	r8, r9
   2262a:	46d9      	mov	r9, fp
   2262c:	468b      	mov	fp, r1
        ei_classifier_cube_t *cube = new ei_classifier_cube_t();
   2262e:	2018      	movs	r0, #24
   22630:	f00d f96a 	bl	2f908 <_Znwj>
        cube->width = 1;
   22634:	2301      	movs	r3, #1
        cube->height = 1;
   22636:	e9c0 3302 	strd	r3, r3, [r0, #8]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   2263a:	e9dd 130f 	ldrd	r1, r3, [sp, #60]	; 0x3c
   2263e:	4299      	cmp	r1, r3
        cube->y = y;
   22640:	e9c0 7a00 	strd	r7, sl, [r0]
        cube->label = label;
   22644:	f8c0 b014 	str.w	fp, [r0, #20]
        ei_classifier_cube_t *cube = new ei_classifier_cube_t();
   22648:	900d      	str	r0, [sp, #52]	; 0x34
        cube->confidence = vf;
   2264a:	ed80 8a04 	vstr	s16, [r0, #16]
   2264e:	d012      	beq.n	22676 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x2ee>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   22650:	f841 0b04 	str.w	r0, [r1], #4
	    ++this->_M_impl._M_finish;
   22654:	910f      	str	r1, [sp, #60]	; 0x3c
            for (size_t ix = 1; ix < impulse->label_count + 1; ix++) {
   22656:	f8b8 3030 	ldrh.w	r3, [r8, #48]	; 0x30
   2265a:	9307      	str	r3, [sp, #28]
   2265c:	3301      	adds	r3, #1
   2265e:	9306      	str	r3, [sp, #24]
   22660:	9b06      	ldr	r3, [sp, #24]
   22662:	3601      	adds	r6, #1
   22664:	42b3      	cmp	r3, r6
   22666:	d8b6      	bhi.n	225d6 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x24e>
        for (size_t x = 0; x < out_height; x++) {
   22668:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2266a:	3701      	adds	r7, #1
   2266c:	429f      	cmp	r7, r3
   2266e:	d008      	beq.n	22682 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x2fa>
   22670:	f109 0901 	add.w	r9, r9, #1
   22674:	e765      	b.n	22542 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x1ba>
	  _M_realloc_insert(end(), __x);
   22676:	ee19 0a90 	vmov	r0, s19
   2267a:	aa0d      	add	r2, sp, #52	; 0x34
   2267c:	f7ff fbc4 	bl	21e08 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
   22680:	e7e9      	b.n	22656 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x2ce>
    for (size_t y = 0; y < out_width; y++) {
   22682:	9b04      	ldr	r3, [sp, #16]
   22684:	3301      	adds	r3, #1
   22686:	9304      	str	r3, [sp, #16]
   22688:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   2268c:	4413      	add	r3, r2
   2268e:	9308      	str	r3, [sp, #32]
   22690:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   22692:	f10a 0a01 	add.w	sl, sl, #1
   22696:	4553      	cmp	r3, sl
   22698:	f47f af4a 	bne.w	22530 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x1a8>
    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);
   2269c:	f8b8 3046 	ldrh.w	r3, [r8, #70]	; 0x46
   226a0:	ee18 2a90 	vmov	r2, s17
   226a4:	9823      	ldr	r0, [sp, #140]	; 0x8c
   226a6:	ee19 1a90 	vmov	r1, s19
   226aa:	f7ff fd37 	bl	2211c <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   226ae:	980e      	ldr	r0, [sp, #56]	; 0x38
	if (__p)
   226b0:	2800      	cmp	r0, #0
   226b2:	f43f aebb 	beq.w	2242c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0xa4>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   226b6:	9910      	ldr	r1, [sp, #64]	; 0x40
	::operator delete(__p
   226b8:	1a09      	subs	r1, r1, r0
   226ba:	f00d f929 	bl	2f910 <_ZdlPvj>
}
   226be:	e6b5      	b.n	2242c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0xa4>
                    ei_printf("ERR: Cannot run SSD model, EI_CLASSIFIER_ENABLE_DETECTION_POSTPROCESS_OP is disabled\n");
   226c0:	4808      	ldr	r0, [pc, #32]	; (226e4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x35c>)
   226c2:	f003 fcf1 	bl	260a8 <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
   226c6:	f06f 0009 	mvn.w	r0, #9
}
   226ca:	b013      	add	sp, #76	; 0x4c
   226cc:	ecbd 8b06 	vpop	{d8-d10}
   226d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   226d4:	0003faf4 	.word	0x0003faf4
   226d8:	00020825 	.word	0x00020825
   226dc:	0003fa2c 	.word	0x0003fa2c
   226e0:	00040138 	.word	0x00040138
   226e4:	0003fa4c 	.word	0x0003fa4c
   226e8:	0003fb28 	.word	0x0003fb28
                ei_printf("ERR: YOLOv5 models are not supported using EON Compiler, use full TFLite (%d)\n",
   226ec:	488f      	ldr	r0, [pc, #572]	; (2292c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x5a4>)
   226ee:	f003 fcdb 	bl	260a8 <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
   226f2:	f06f 0009 	mvn.w	r0, #9
}
   226f6:	b013      	add	sp, #76	; 0x4c
   226f8:	ecbd 8b06 	vpop	{d8-d10}
   226fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
   22700:	4635      	mov	r5, r6
   22702:	9f23      	ldr	r7, [sp, #140]	; 0x8c
            ei_printf("%s:\t", impulse->categories[ix]);
   22704:	f8df 922c 	ldr.w	r9, [pc, #556]	; 22934 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x5ac>
            ei_printf("\n");
   22708:	4e89      	ldr	r6, [pc, #548]	; (22930 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x5a8>)
   2270a:	1e5c      	subs	r4, r3, #1
        float value = static_cast<float>(data[ix] - zero_point) * scale;
   2270c:	f914 3f01 	ldrsb.w	r3, [r4, #1]!
            ei_printf("%s:\t", impulse->categories[ix]);
   22710:	f852 1025 	ldr.w	r1, [r2, r5, lsl #2]
        float value = static_cast<float>(data[ix] - zero_point) * scale;
   22714:	ee08 3a10 	vmov	s16, r3
   22718:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
            ei_printf("%s:\t", impulse->categories[ix]);
   2271c:	4648      	mov	r0, r9
        float value = static_cast<float>(data[ix] - zero_point) * scale;
   2271e:	ee38 8a68 	vsub.f32	s16, s16, s17
            ei_printf("%s:\t", impulse->categories[ix]);
   22722:	f003 fcc1 	bl	260a8 <_Z9ei_printfPKcz>
        float value = static_cast<float>(data[ix] - zero_point) * scale;
   22726:	ee28 8a09 	vmul.f32	s16, s16, s18
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
   2272a:	3708      	adds	r7, #8
            ei_printf_float(value);
   2272c:	eeb0 0a48 	vmov.f32	s0, s16
   22730:	f003 fcc8 	bl	260c4 <_Z15ei_printf_floatf>
            ei_printf("\n");
   22734:	4630      	mov	r0, r6
   22736:	f003 fcb7 	bl	260a8 <_Z9ei_printfPKcz>
        result->classification[ix].label = impulse->categories[ix];
   2273a:	f8d8 20a4 	ldr.w	r2, [r8, #164]	; 0xa4
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
   2273e:	f8b8 3030 	ldrh.w	r3, [r8, #48]	; 0x30
        result->classification[ix].label = impulse->categories[ix];
   22742:	f852 1025 	ldr.w	r1, [r2, r5, lsl #2]
   22746:	6039      	str	r1, [r7, #0]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
   22748:	3501      	adds	r5, #1
   2274a:	42ab      	cmp	r3, r5
        result->classification[ix].value = value;
   2274c:	ed87 8a01 	vstr	s16, [r7, #4]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
   22750:	d8dc      	bhi.n	2270c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x384>
   22752:	e66b      	b.n	2242c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0xa4>
        return EI_IMPULSE_TFLITE_ERROR;
   22754:	f06f 0002 	mvn.w	r0, #2
   22758:	e64b      	b.n	223f2 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x6a>
                    fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
   2275a:	edd4 7a03 	vldr	s15, [r4, #12]
   2275e:	ed94 9a02 	vldr	s18, [r4, #8]
                        (int)output->dims->data[1], (int)output->dims->data[2]);
   22762:	689c      	ldr	r4, [r3, #8]
   22764:	68db      	ldr	r3, [r3, #12]
   22766:	9308      	str	r3, [sp, #32]
	: _M_start(), _M_finish(), _M_end_of_storage()
   22768:	2000      	movs	r0, #0
   2276a:	2300      	movs	r3, #0
   2276c:	2100      	movs	r1, #0
    int out_width_factor = impulse->input_width / out_width;
   2276e:	f8d8 2020 	ldr.w	r2, [r8, #32]
   22772:	940b      	str	r4, [sp, #44]	; 0x2c
   22774:	fbb2 f2f4 	udiv	r2, r2, r4
   22778:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
                    fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
   2277c:	eef8 8ae7 	vcvt.f32.s32	s17, s15
   22780:	ee0a 2a10 	vmov	s20, r2
   22784:	9310      	str	r3, [sp, #64]	; 0x40
    for (size_t y = 0; y < out_width; y++) {
   22786:	2c00      	cmp	r4, #0
   22788:	f000 80c7 	beq.w	2291a <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x592>
   2278c:	9a08      	ldr	r2, [sp, #32]
   2278e:	2a00      	cmp	r2, #0
   22790:	f000 80c3 	beq.w	2291a <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x592>
        for (size_t x = 0; x < out_height; x++) {
   22794:	2201      	movs	r2, #1
    for (size_t y = 0; y < out_width; y++) {
   22796:	461f      	mov	r7, r3
        for (size_t x = 0; x < out_height; x++) {
   22798:	9309      	str	r3, [sp, #36]	; 0x24
   2279a:	ab0e      	add	r3, sp, #56	; 0x38
   2279c:	9204      	str	r2, [sp, #16]
   2279e:	ee09 3a90 	vmov	s19, r3
   227a2:	f8b8 2030 	ldrh.w	r2, [r8, #48]	; 0x30
   227a6:	9207      	str	r2, [sp, #28]
        cube->width = 1;
   227a8:	46b9      	mov	r9, r7
        for (size_t x = 0; x < out_height; x++) {
   227aa:	9b07      	ldr	r3, [sp, #28]
            size_t loc = ((y * out_height) + x) * (impulse->label_count + 1);
   227ac:	2701      	movs	r7, #1
   227ae:	443b      	add	r3, r7
        for (size_t x = 0; x < out_height; x++) {
   227b0:	2500      	movs	r5, #0
   227b2:	9306      	str	r3, [sp, #24]
            size_t loc = ((y * out_height) + x) * (impulse->label_count + 1);
   227b4:	9a06      	ldr	r2, [sp, #24]
   227b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
            for (size_t ix = 1; ix < impulse->label_count + 1; ix++) {
   227b8:	2a01      	cmp	r2, #1
            size_t loc = ((y * out_height) + x) * (impulse->label_count + 1);
   227ba:	442b      	add	r3, r5
   227bc:	fb02 f303 	mul.w	r3, r2, r3
            for (size_t ix = 1; ix < impulse->label_count + 1; ix++) {
   227c0:	f000 8099 	beq.w	228f6 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x56e>
   227c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   227c6:	18d3      	adds	r3, r2, r3
   227c8:	9303      	str	r3, [sp, #12]
   227ca:	2601      	movs	r6, #1
   227cc:	e037      	b.n	2283e <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x4b6>
    bool is_overlapping = !(c->x + c->width < x || c->y + c->height < y || c->x > x + width || c->y > y + height);
   227ce:	6823      	ldr	r3, [r4, #0]
   227d0:	68a6      	ldr	r6, [r4, #8]
   227d2:	199a      	adds	r2, r3, r6
   227d4:	454a      	cmp	r2, r9
   227d6:	d35e      	bcc.n	22896 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x50e>
   227d8:	6860      	ldr	r0, [r4, #4]
   227da:	f8d4 e00c 	ldr.w	lr, [r4, #12]
   227de:	eb00 0c0e 	add.w	ip, r0, lr
   227e2:	45dc      	cmp	ip, fp
   227e4:	d357      	bcc.n	22896 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x50e>
   227e6:	42bb      	cmp	r3, r7
   227e8:	d855      	bhi.n	22896 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x50e>
   227ea:	9d04      	ldr	r5, [sp, #16]
   227ec:	4285      	cmp	r5, r0
   227ee:	d352      	bcc.n	22896 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x50e>
    if (x < c->x) {
   227f0:	464d      	mov	r5, r9
   227f2:	42ab      	cmp	r3, r5
   227f4:	4631      	mov	r1, r6
   227f6:	46d9      	mov	r9, fp
   227f8:	9e05      	ldr	r6, [sp, #20]
   227fa:	d902      	bls.n	22802 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x47a>
        c->x = x;
   227fc:	6025      	str	r5, [r4, #0]
    if (x + width > c->x + c->width) {
   227fe:	194a      	adds	r2, r1, r5
   22800:	462b      	mov	r3, r5
    if (y < c->y) {
   22802:	4548      	cmp	r0, r9
   22804:	d904      	bls.n	22810 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x488>
        c->y = y;
   22806:	f8c4 9004 	str.w	r9, [r4, #4]
    if (y + height > c->y + c->height) {
   2280a:	eb0e 0c09 	add.w	ip, lr, r9
   2280e:	4648      	mov	r0, r9
    if (x + width > c->x + c->width) {
   22810:	4297      	cmp	r7, r2
        c->width += (x + width) - (c->x + c->width);
   22812:	bf84      	itt	hi
   22814:	1afb      	subhi	r3, r7, r3
   22816:	60a3      	strhi	r3, [r4, #8]
    if (y + height > c->y + c->height) {
   22818:	9b04      	ldr	r3, [sp, #16]
    if (confidence > c->confidence) {
   2281a:	edd4 7a04 	vldr	s15, [r4, #16]
    if (y + height > c->y + c->height) {
   2281e:	4563      	cmp	r3, ip
        c->height += (y + height) - (c->y + c->height);
   22820:	bf88      	it	hi
   22822:	1a18      	subhi	r0, r3, r0
    if (confidence > c->confidence) {
   22824:	eeb4 8ae7 	vcmpe.f32	s16, s15
        c->height += (y + height) - (c->y + c->height);
   22828:	bf88      	it	hi
   2282a:	60e0      	strhi	r0, [r4, #12]
    if (confidence > c->confidence) {
   2282c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   22830:	dd01      	ble.n	22836 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x4ae>
        c->confidence = confidence;
   22832:	ed84 8a04 	vstr	s16, [r4, #16]
            for (size_t ix = 1; ix < impulse->label_count + 1; ix++) {
   22836:	9b06      	ldr	r3, [sp, #24]
   22838:	3601      	adds	r6, #1
   2283a:	42b3      	cmp	r3, r6
   2283c:	d94f      	bls.n	228de <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x556>
                float vf = static_cast<float>(v - zero_point) * scale;
   2283e:	9b03      	ldr	r3, [sp, #12]
    if (vf < detection_threshold) return;
   22840:	edd8 7a12 	vldr	s15, [r8, #72]	; 0x48
                float vf = static_cast<float>(v - zero_point) * scale;
   22844:	f913 2f01 	ldrsb.w	r2, [r3, #1]!
   22848:	9303      	str	r3, [sp, #12]
   2284a:	ee08 2a10 	vmov	s16, r2
   2284e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   22852:	ee38 8a68 	vsub.f32	s16, s16, s17
   22856:	ee28 8a09 	vmul.f32	s16, s16, s18
    if (vf < detection_threshold) return;
   2285a:	eeb4 8ae7 	vcmpe.f32	s16, s15
   2285e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   22862:	d4e8      	bmi.n	22836 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x4ae>
                ei_handle_cube(&cubes, x, y, vf, impulse->categories[ix - 1], impulse->object_detection_threshold);
   22864:	f8d8 30a4 	ldr.w	r3, [r8, #164]	; 0xa4
   22868:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   2286c:	f853 bc04 	ldr.w	fp, [r3, #-4]
   22870:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
    for (auto c : *cubes) {
   22874:	4293      	cmp	r3, r2
   22876:	9202      	str	r2, [sp, #8]
   22878:	d014      	beq.n	228a4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x51c>
   2287a:	4659      	mov	r1, fp
   2287c:	469a      	mov	sl, r3
   2287e:	46cb      	mov	fp, r9
   22880:	9605      	str	r6, [sp, #20]
   22882:	46a9      	mov	r9, r5
   22884:	f85a 4b04 	ldr.w	r4, [sl], #4
        if (strcmp(c->label, label) != 0) continue;
   22888:	9101      	str	r1, [sp, #4]
   2288a:	6960      	ldr	r0, [r4, #20]
   2288c:	f7f5 fd5c 	bl	18348 <strcmp>
   22890:	9901      	ldr	r1, [sp, #4]
   22892:	2800      	cmp	r0, #0
   22894:	d09b      	beq.n	227ce <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x446>
    for (auto c : *cubes) {
   22896:	9b02      	ldr	r3, [sp, #8]
   22898:	4553      	cmp	r3, sl
   2289a:	d1f3      	bne.n	22884 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x4fc>
   2289c:	9e05      	ldr	r6, [sp, #20]
   2289e:	464d      	mov	r5, r9
   228a0:	46d9      	mov	r9, fp
   228a2:	468b      	mov	fp, r1
        ei_classifier_cube_t *cube = new ei_classifier_cube_t();
   228a4:	2018      	movs	r0, #24
   228a6:	f00d f82f 	bl	2f908 <_Znwj>
        cube->width = 1;
   228aa:	2301      	movs	r3, #1
        cube->height = 1;
   228ac:	e9c0 3302 	strd	r3, r3, [r0, #8]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   228b0:	e9dd 130f 	ldrd	r1, r3, [sp, #60]	; 0x3c
   228b4:	4299      	cmp	r1, r3
        cube->y = y;
   228b6:	e9c0 5900 	strd	r5, r9, [r0]
        cube->label = label;
   228ba:	f8c0 b014 	str.w	fp, [r0, #20]
        ei_classifier_cube_t *cube = new ei_classifier_cube_t();
   228be:	900d      	str	r0, [sp, #52]	; 0x34
        cube->confidence = vf;
   228c0:	ed80 8a04 	vstr	s16, [r0, #16]
   228c4:	d011      	beq.n	228ea <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x562>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   228c6:	f841 0b04 	str.w	r0, [r1], #4
	    ++this->_M_impl._M_finish;
   228ca:	910f      	str	r1, [sp, #60]	; 0x3c
            for (size_t ix = 1; ix < impulse->label_count + 1; ix++) {
   228cc:	f8b8 3030 	ldrh.w	r3, [r8, #48]	; 0x30
   228d0:	9307      	str	r3, [sp, #28]
   228d2:	3301      	adds	r3, #1
   228d4:	9306      	str	r3, [sp, #24]
   228d6:	9b06      	ldr	r3, [sp, #24]
   228d8:	3601      	adds	r6, #1
   228da:	42b3      	cmp	r3, r6
   228dc:	d8af      	bhi.n	2283e <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x4b6>
        for (size_t x = 0; x < out_height; x++) {
   228de:	9b08      	ldr	r3, [sp, #32]
   228e0:	3501      	adds	r5, #1
   228e2:	429d      	cmp	r5, r3
   228e4:	d007      	beq.n	228f6 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x56e>
   228e6:	3701      	adds	r7, #1
   228e8:	e764      	b.n	227b4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x42c>
	  _M_realloc_insert(end(), __x);
   228ea:	ee19 0a90 	vmov	r0, s19
   228ee:	aa0d      	add	r2, sp, #52	; 0x34
   228f0:	f7ff fa8a 	bl	21e08 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
   228f4:	e7ea      	b.n	228cc <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x544>
    for (size_t y = 0; y < out_width; y++) {
   228f6:	9b04      	ldr	r3, [sp, #16]
   228f8:	3301      	adds	r3, #1
   228fa:	9304      	str	r3, [sp, #16]
   228fc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   22900:	4413      	add	r3, r2
   22902:	9309      	str	r3, [sp, #36]	; 0x24
   22904:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   22906:	f109 0901 	add.w	r9, r9, #1
   2290a:	454b      	cmp	r3, r9
   2290c:	f47f af4d 	bne.w	227aa <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x422>
    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);
   22910:	f8b8 3046 	ldrh.w	r3, [r8, #70]	; 0x46
   22914:	ee1a 2a10 	vmov	r2, s20
   22918:	e6c4      	b.n	226a4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x31c>
   2291a:	ab0e      	add	r3, sp, #56	; 0x38
   2291c:	ee09 3a90 	vmov	s19, r3
   22920:	e7f6      	b.n	22910 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x588>
   22922:	ab0e      	add	r3, sp, #56	; 0x38
   22924:	ee09 3a90 	vmov	s19, r3
   22928:	e6b8      	b.n	2269c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0+0x314>
   2292a:	bf00      	nop
   2292c:	0003faa4 	.word	0x0003faa4
   22930:	00040138 	.word	0x00040138
   22934:	0003fb28 	.word	0x0003fb28

00022938 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb>:
EI_IMPULSE_ERROR run_nn_inference(
    const ei_impulse_t *impulse,
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
   22938:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2293c:	b08b      	sub	sp, #44	; 0x2c
   2293e:	4606      	mov	r6, r0
   22940:	4690      	mov	r8, r2
   22942:	4699      	mov	r9, r3
   22944:	460d      	mov	r5, r1
    TfLiteTensor* input;
    TfLiteTensor* output;
    TfLiteTensor* output_scores;
    TfLiteTensor* output_labels;

    uint64_t ctx_start_us = ei_read_timer_us();
   22946:	f003 fba7 	bl	26098 <_Z16ei_read_timer_usv>
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(impulse,
   2294a:	ab06      	add	r3, sp, #24
   2294c:	9301      	str	r3, [sp, #4]
   2294e:	ab07      	add	r3, sp, #28
    uint64_t ctx_start_us = ei_read_timer_us();
   22950:	e9cd 0108 	strd	r0, r1, [sp, #32]
    EI_IMPULSE_ERROR init_res = inference_tflite_setup(impulse,
   22954:	9300      	str	r3, [sp, #0]
   22956:	aa04      	add	r2, sp, #16
   22958:	ab05      	add	r3, sp, #20
   2295a:	a908      	add	r1, sp, #32
   2295c:	4630      	mov	r0, r6
   2295e:	f7fe f803 	bl	20968 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE.constprop.0>
        &input, &output,
        &output_labels,
        &output_scores,
        p_tensor_arena);

    if (init_res != EI_IMPULSE_OK) {
   22962:	4604      	mov	r4, r0
   22964:	b960      	cbnz	r0, 22980 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x48>
        return init_res;
    }

    uint8_t* tensor_arena = static_cast<uint8_t*>(p_tensor_arena.get());

    switch (input->type) {
   22966:	9f04      	ldr	r7, [sp, #16]
   22968:	7f39      	ldrb	r1, [r7, #28]
   2296a:	2903      	cmp	r1, #3
   2296c:	d05b      	beq.n	22a26 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0xee>
   2296e:	2909      	cmp	r1, #9
   22970:	d00a      	beq.n	22988 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x50>
   22972:	2901      	cmp	r1, #1
   22974:	d046      	beq.n	22a04 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0xcc>
                float pixel = (float)fmatrix->buffer[ix];
                input->data.uint8[ix] = static_cast<uint8_t>((pixel / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
            }
        }
        default: {
            ei_printf("ERR: Cannot handle input type (%d)\n", input->type);
   22976:	484d      	ldr	r0, [pc, #308]	; (22aac <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x174>)
   22978:	f003 fb96 	bl	260a8 <_Z9ei_printfPKcz>
            return EI_IMPULSE_INPUT_TENSOR_WAS_NULL;
   2297c:	f06f 040c 	mvn.w	r4, #12
    if (run_res != EI_IMPULSE_OK) {
        return run_res;
    }

    return EI_IMPULSE_OK;
}
   22980:	4620      	mov	r0, r4
   22982:	b00b      	add	sp, #44	; 0x2c
   22984:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
   22988:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   2298c:	fb02 f303 	mul.w	r3, r2, r3
   22990:	b90b      	cbnz	r3, 22996 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x5e>
   22992:	e01e      	b.n	229d2 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x9a>
                input->data.int8[ix] = static_cast<int8_t>(round(pixel / input->params.scale) + input->params.zero_point);
   22994:	9f04      	ldr	r7, [sp, #16]
                float pixel = (float)fmatrix->buffer[ix];
   22996:	682b      	ldr	r3, [r5, #0]
                input->data.int8[ix] = static_cast<int8_t>(round(pixel / input->params.scale) + input->params.zero_point);
   22998:	edd7 7a02 	vldr	s15, [r7, #8]
                float pixel = (float)fmatrix->buffer[ix];
   2299c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
                input->data.int8[ix] = static_cast<int8_t>(round(pixel / input->params.scale) + input->params.zero_point);
   229a0:	ed93 0a00 	vldr	s0, [r3]
  { return __builtin_roundf(__x); }
   229a4:	ee80 0a27 	vdiv.f32	s0, s0, s15
   229a8:	f006 f83c 	bl	28a24 <roundf>
   229ac:	693b      	ldr	r3, [r7, #16]
   229ae:	edd7 7a03 	vldr	s15, [r7, #12]
   229b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   229b6:	ee37 0a80 	vadd.f32	s0, s15, s0
   229ba:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   229be:	ee17 1a90 	vmov	r1, s15
   229c2:	5519      	strb	r1, [r3, r4]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
   229c4:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   229c8:	3401      	adds	r4, #1
   229ca:	fb02 f303 	mul.w	r3, r2, r3
   229ce:	42a3      	cmp	r3, r4
   229d0:	d8e0      	bhi.n	22994 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x5c>
    EI_IMPULSE_ERROR run_res = inference_tflite_run(impulse, ctx_start_us,
   229d2:	9b05      	ldr	r3, [sp, #20]
   229d4:	9300      	str	r3, [sp, #0]
   229d6:	e9cd 8901 	strd	r8, r9, [sp, #4]
   229da:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   229de:	4630      	mov	r0, r6
   229e0:	f7ff fcd2 	bl	22388 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb.constprop.0>
   229e4:	4604      	mov	r4, r0
    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
   229e6:	f003 fb57 	bl	26098 <_Z16ei_read_timer_usv>
   229ea:	9b08      	ldr	r3, [sp, #32]
   229ec:	1ac0      	subs	r0, r0, r3
   229ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   229f0:	f8c8 00f0 	str.w	r0, [r8, #240]	; 0xf0
   229f4:	eb61 0103 	sbc.w	r1, r1, r3
}
   229f8:	4620      	mov	r0, r4
    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
   229fa:	f8c8 10f4 	str.w	r1, [r8, #244]	; 0xf4
}
   229fe:	b00b      	add	sp, #44	; 0x2c
   22a00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
   22a04:	e9d5 0301 	ldrd	r0, r3, [r5, #4]
   22a08:	fb03 f000 	mul.w	r0, r3, r0
   22a0c:	2800      	cmp	r0, #0
   22a0e:	d0e0      	beq.n	229d2 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x9a>
   22a10:	682b      	ldr	r3, [r5, #0]
   22a12:	693a      	ldr	r2, [r7, #16]
   22a14:	eb03 0080 	add.w	r0, r3, r0, lsl #2
                input->data.f[ix] = fmatrix->buffer[ix];
   22a18:	f853 1b04 	ldr.w	r1, [r3], #4
   22a1c:	f842 1b04 	str.w	r1, [r2], #4
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
   22a20:	4298      	cmp	r0, r3
   22a22:	d1f9      	bne.n	22a18 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0xe0>
   22a24:	e7d5      	b.n	229d2 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x9a>
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
   22a26:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   22a2a:	fb02 f303 	mul.w	r3, r2, r3
   22a2e:	2b00      	cmp	r3, #0
   22a30:	d0a1      	beq.n	22976 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x3e>
                float pixel = (float)fmatrix->buffer[ix];
   22a32:	682b      	ldr	r3, [r5, #0]
                input->data.uint8[ix] = static_cast<uint8_t>((pixel / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
   22a34:	edd6 6a19 	vldr	s13, [r6, #100]	; 0x64
   22a38:	ed93 6a00 	vldr	s12, [r3]
   22a3c:	ed96 7a1a 	vldr	s14, [r6, #104]	; 0x68
   22a40:	693a      	ldr	r2, [r7, #16]
   22a42:	eec6 7a26 	vdiv.f32	s15, s12, s13
   22a46:	ee77 7a87 	vadd.f32	s15, s15, s14
   22a4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   22a4e:	ee17 3a90 	vmov	r3, s15
   22a52:	7013      	strb	r3, [r2, #0]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
   22a54:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
   22a58:	fb02 f303 	mul.w	r3, r2, r3
   22a5c:	2b01      	cmp	r3, #1
   22a5e:	bf88      	it	hi
   22a60:	2201      	movhi	r2, #1
   22a62:	d91a      	bls.n	22a9a <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x162>
                float pixel = (float)fmatrix->buffer[ix];
   22a64:	682b      	ldr	r3, [r5, #0]
                input->data.uint8[ix] = static_cast<uint8_t>((pixel / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
   22a66:	edd6 6a19 	vldr	s13, [r6, #100]	; 0x64
   22a6a:	ed96 7a1a 	vldr	s14, [r6, #104]	; 0x68
                float pixel = (float)fmatrix->buffer[ix];
   22a6e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
                input->data.uint8[ix] = static_cast<uint8_t>((pixel / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
   22a72:	ed93 6a00 	vldr	s12, [r3]
   22a76:	9b04      	ldr	r3, [sp, #16]
   22a78:	eec6 7a26 	vdiv.f32	s15, s12, s13
   22a7c:	6919      	ldr	r1, [r3, #16]
   22a7e:	ee77 7a87 	vadd.f32	s15, s15, s14
   22a82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   22a86:	ee17 3a90 	vmov	r3, s15
   22a8a:	548b      	strb	r3, [r1, r2]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
   22a8c:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   22a90:	3201      	adds	r2, #1
   22a92:	fb01 f303 	mul.w	r3, r1, r3
   22a96:	4293      	cmp	r3, r2
   22a98:	d8e4      	bhi.n	22a64 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x12c>
            ei_printf("ERR: Cannot handle input type (%d)\n", input->type);
   22a9a:	9b04      	ldr	r3, [sp, #16]
   22a9c:	4803      	ldr	r0, [pc, #12]	; (22aac <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x174>)
   22a9e:	7f19      	ldrb	r1, [r3, #28]
   22aa0:	f003 fb02 	bl	260a8 <_Z9ei_printfPKcz>
            return EI_IMPULSE_INPUT_TENSOR_WAS_NULL;
   22aa4:	f06f 040c 	mvn.w	r4, #12
   22aa8:	e76a      	b.n	22980 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x48>
   22aaa:	bf00      	nop
   22aac:	0003fb6c 	.word	0x0003fb6c

00022ab0 <process_impulse_continuous>:
{
   22ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22ab4:	ed2d 8b02 	vpush	{d8}
   22ab8:	b09f      	sub	sp, #124	; 0x7c
   22aba:	e9cd 2305 	strd	r2, r3, [sp, #20]
   22abe:	f89d 40a8 	ldrb.w	r4, [sp, #168]	; 0xa8
    static ei::matrix_t static_features_matrix(1, impulse->nn_input_frame_size);
   22ac2:	4d9c      	ldr	r5, [pc, #624]	; (22d34 <process_impulse_continuous+0x284>)
{
   22ac4:	9409      	str	r4, [sp, #36]	; 0x24
    static ei::matrix_t static_features_matrix(1, impulse->nn_input_frame_size);
   22ac6:	782b      	ldrb	r3, [r5, #0]
   22ac8:	f3bf 8f5b 	dmb	ish
   22acc:	07da      	lsls	r2, r3, #31
{
   22ace:	4604      	mov	r4, r0
   22ad0:	4689      	mov	r9, r1
    static ei::matrix_t static_features_matrix(1, impulse->nn_input_frame_size);
   22ad2:	f140 8105 	bpl.w	22ce0 <process_impulse_continuous+0x230>
   22ad6:	f8df a284 	ldr.w	sl, [pc, #644]	; 22d5c <process_impulse_continuous+0x2ac>
    if (!static_features_matrix.buffer) {
   22ada:	f8da 3000 	ldr.w	r3, [sl]
   22ade:	2b00      	cmp	r3, #0
   22ae0:	f000 82a3 	beq.w	2302a <process_impulse_continuous+0x57a>
        return EI_IMPULSE_ALLOC_FAILED;
    }

    memset(result, 0, sizeof(ei_impulse_result_t));
   22ae4:	f44f 7280 	mov.w	r2, #256	; 0x100
   22ae8:	2100      	movs	r1, #0
   22aea:	9805      	ldr	r0, [sp, #20]
   22aec:	f008 f9da 	bl	2aea4 <memset>

    EI_IMPULSE_ERROR ei_impulse_error = EI_IMPULSE_OK;

    uint64_t dsp_start_us = ei_read_timer_us();
   22af0:	f003 fad2 	bl	26098 <_Z16ei_read_timer_usv>
    size_t out_features_index = 0;
    bool is_mfcc = false;
    bool is_mfe = false;
    bool is_spectrogram = false;

    for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
   22af4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    uint64_t dsp_start_us = ei_read_timer_us();
   22af6:	e9cd 0107 	strd	r0, r1, [sp, #28]
    for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
   22afa:	2b00      	cmp	r3, #0
   22afc:	f000 81f1 	beq.w	22ee2 <process_impulse_continuous+0x432>
   22b00:	2500      	movs	r5, #0
    bool is_mfe = false;
   22b02:	e9cd 5500 	strd	r5, r5, [sp]
    bool is_mfcc = false;
   22b06:	9504      	str	r5, [sp, #16]
    size_t out_features_index = 0;
   22b08:	462e      	mov	r6, r5
   22b0a:	e040      	b.n	22b8e <process_impulse_continuous+0xde>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   22b0c:	ab15      	add	r3, sp, #84	; 0x54
        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
   22b0e:	f8d9 1010 	ldr.w	r1, [r9, #16]
   22b12:	fbb1 f1f0 	udiv	r1, r1, r0
   22b16:	fb01 f707 	mul.w	r7, r1, r7
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   22b1a:	4987      	ldr	r1, [pc, #540]	; (22d38 <process_impulse_continuous+0x288>)
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   22b1c:	9311      	str	r3, [sp, #68]	; 0x44
      __b = _GLIBCXX_MOVE(__tmp);
   22b1e:	911b      	str	r1, [sp, #108]	; 0x6c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   22b20:	ab11      	add	r3, sp, #68	; 0x44
      __b = _GLIBCXX_MOVE(__tmp);
   22b22:	4986      	ldr	r1, [pc, #536]	; (22d3c <process_impulse_continuous+0x28c>)
   22b24:	911c      	str	r1, [sp, #112]	; 0x70
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   22b26:	e893 0003 	ldmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   22b2a:	f10d 0e64 	add.w	lr, sp, #100	; 0x64
   22b2e:	971d      	str	r7, [sp, #116]	; 0x74
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   22b30:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
        return &wrapped_signal;
   22b34:	4677      	mov	r7, lr
   22b36:	e88c 0003 	stmia.w	ip, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   22b3a:	e88e 0003 	stmia.w	lr, {r0, r1}
            return EI_IMPULSE_DSP_ERROR;
        }
        int ret = extract_fn_slice(signal, &fm, block.config, impulse->frequency, &features_written);
#else
        SignalWithAxes swa(signal, block.axes, block.axes_size, impulse);
        int ret = extract_fn_slice(swa.get_signal(), &fm, block.config, impulse->frequency, &features_written);
   22b3e:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
   22b42:	4638      	mov	r0, r7
   22b44:	a90d      	add	r1, sp, #52	; 0x34
   22b46:	47c0      	blx	r8
#endif

        if (ret != EIDSP_OK) {
   22b48:	2800      	cmp	r0, #0
   22b4a:	d15f      	bne.n	22c0c <process_impulse_continuous+0x15c>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
            return EI_IMPULSE_DSP_ERROR;
        }

        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
   22b4c:	f003 faa2 	bl	26094 <_Z29ei_run_impulse_check_canceledv>
   22b50:	1c83      	adds	r3, r0, #2
   22b52:	f000 80ed 	beq.w	22d30 <process_impulse_continuous+0x280>
            return EI_IMPULSE_CANCELED;
        }

        classifier_continuous_features_written += (features_written.rows * features_written.cols);
   22b56:	e9dd 3211 	ldrd	r3, r2, [sp, #68]	; 0x44
   22b5a:	4f79      	ldr	r7, [pc, #484]	; (22d40 <process_impulse_continuous+0x290>)
   22b5c:	fb02 f303 	mul.w	r3, r2, r3
   22b60:	683a      	ldr	r2, [r7, #0]
   22b62:	189b      	adds	r3, r3, r2
   22b64:	603b      	str	r3, [r7, #0]
   22b66:	687b      	ldr	r3, [r7, #4]
   22b68:	f143 0300 	adc.w	r3, r3, #0
   22b6c:	607b      	str	r3, [r7, #4]
      if (_M_manager)
   22b6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   22b70:	b11b      	cbz	r3, 22b7a <process_impulse_continuous+0xca>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   22b72:	a919      	add	r1, sp, #100	; 0x64
   22b74:	2203      	movs	r2, #3
   22b76:	4608      	mov	r0, r1
   22b78:	4798      	blx	r3
        if (buffer && buffer_managed_by_me) {
   22b7a:	980d      	ldr	r0, [sp, #52]	; 0x34
   22b7c:	b118      	cbz	r0, 22b86 <process_impulse_continuous+0xd6>
   22b7e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   22b82:	2b00      	cmp	r3, #0
   22b84:	d161      	bne.n	22c4a <process_impulse_continuous+0x19a>
    for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
   22b86:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   22b88:	3501      	adds	r5, #1
   22b8a:	42ab      	cmp	r3, r5
   22b8c:	d963      	bls.n	22c56 <process_impulse_continuous+0x1a6>
        ei_model_dsp_t block = impulse->dsp_blocks[ix];
   22b8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
        if (out_features_index + block.n_output_features > impulse->nn_input_frame_size) {
   22b90:	6920      	ldr	r0, [r4, #16]
        ei_model_dsp_t block = impulse->dsp_blocks[ix];
   22b92:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   22b96:	46b4      	mov	ip, r6
   22b98:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
        if (out_features_index + block.n_output_features > impulse->nn_input_frame_size) {
   22b9c:	445e      	add	r6, fp
        ei_model_dsp_t block = impulse->dsp_blocks[ix];
   22b9e:	eb03 0182 	add.w	r1, r3, r2, lsl #2
        if (out_features_index + block.n_output_features > impulse->nn_input_frame_size) {
   22ba2:	4286      	cmp	r6, r0
        ei_model_dsp_t block = impulse->dsp_blocks[ix];
   22ba4:	e9d1 8201 	ldrd	r8, r2, [r1, #4]
   22ba8:	e9d1 3703 	ldrd	r3, r7, [r1, #12]
        if (out_features_index + block.n_output_features > impulse->nn_input_frame_size) {
   22bac:	f200 80b5 	bhi.w	22d1a <process_impulse_continuous+0x26a>
                        static_features_matrix.buffer + out_features_index);
   22bb0:	f8da 1000 	ldr.w	r1, [sl]
        if (a_buffer) {
   22bb4:	eb11 018c 	adds.w	r1, r1, ip, lsl #2
   22bb8:	f000 8084 	beq.w	22cc4 <process_impulse_continuous+0x214>
            buffer = a_buffer;
   22bbc:	910d      	str	r1, [sp, #52]	; 0x34
            buffer_managed_by_me = false;
   22bbe:	2100      	movs	r1, #0
   22bc0:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
        if (block.extract_fn == extract_mfcc_features) {
   22bc4:	485f      	ldr	r0, [pc, #380]	; (22d44 <process_impulse_continuous+0x294>)
        cols = n_cols;
   22bc6:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
        rows = n_rows;
   22bca:	2101      	movs	r1, #1
   22bcc:	4580      	cmp	r8, r0
   22bce:	910e      	str	r1, [sp, #56]	; 0x38
   22bd0:	d074      	beq.n	22cbc <process_impulse_continuous+0x20c>
        else if (block.extract_fn == extract_spectrogram_features) {
   22bd2:	485d      	ldr	r0, [pc, #372]	; (22d48 <process_impulse_continuous+0x298>)
   22bd4:	4580      	cmp	r8, r0
   22bd6:	d034      	beq.n	22c42 <process_impulse_continuous+0x192>
        else if (block.extract_fn == extract_mfe_features) {
   22bd8:	485c      	ldr	r0, [pc, #368]	; (22d4c <process_impulse_continuous+0x29c>)
   22bda:	4580      	cmp	r8, r0
   22bdc:	f040 8144 	bne.w	22e68 <process_impulse_continuous+0x3b8>
            extract_fn_slice = &extract_mfe_per_slice_features;
   22be0:	f8df 817c 	ldr.w	r8, [pc, #380]	; 22d60 <process_impulse_continuous+0x2b0>
            is_mfe = true;
   22be4:	9100      	str	r1, [sp, #0]
        if (this->_axes_count == _impulse->raw_samples_per_frame) {
   22be6:	69a0      	ldr	r0, [r4, #24]
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count), _impulse(impulse)
   22be8:	e9cd 9315 	strd	r9, r3, [sp, #84]	; 0x54
        if (this->_axes_count == _impulse->raw_samples_per_frame) {
   22bec:	4287      	cmp	r7, r0
    _Function_base() : _M_manager(nullptr) { }
   22bee:	f04f 0300 	mov.w	r3, #0
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count), _impulse(impulse)
   22bf2:	e9cd 7417 	strd	r7, r4, [sp, #92]	; 0x5c
   22bf6:	931b      	str	r3, [sp, #108]	; 0x6c
        if (this->_axes_count == _impulse->raw_samples_per_frame) {
   22bf8:	d188      	bne.n	22b0c <process_impulse_continuous+0x5c>
   22bfa:	464f      	mov	r7, r9
        int ret = extract_fn_slice(swa.get_signal(), &fm, block.config, impulse->frequency, &features_written);
   22bfc:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
   22c00:	ab11      	add	r3, sp, #68	; 0x44
   22c02:	4638      	mov	r0, r7
   22c04:	a90d      	add	r1, sp, #52	; 0x34
   22c06:	47c0      	blx	r8
        if (ret != EIDSP_OK) {
   22c08:	2800      	cmp	r0, #0
   22c0a:	d09f      	beq.n	22b4c <process_impulse_continuous+0x9c>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
   22c0c:	4601      	mov	r1, r0
   22c0e:	4850      	ldr	r0, [pc, #320]	; (22d50 <process_impulse_continuous+0x2a0>)
   22c10:	f003 fa4a 	bl	260a8 <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
   22c14:	f06f 0704 	mvn.w	r7, #4
      if (_M_manager)
   22c18:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   22c1a:	b11b      	cbz	r3, 22c24 <process_impulse_continuous+0x174>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   22c1c:	a919      	add	r1, sp, #100	; 0x64
   22c1e:	2203      	movs	r2, #3
   22c20:	4608      	mov	r0, r1
   22c22:	4798      	blx	r3
        if (buffer && buffer_managed_by_me) {
   22c24:	980d      	ldr	r0, [sp, #52]	; 0x34
   22c26:	2800      	cmp	r0, #0
   22c28:	d07c      	beq.n	22d24 <process_impulse_continuous+0x274>
   22c2a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   22c2e:	2b00      	cmp	r3, #0
   22c30:	d078      	beq.n	22d24 <process_impulse_continuous+0x274>
            ei_free(buffer);
   22c32:	f003 fa67 	bl	26104 <_Z7ei_freePv>
    }

    return ei_impulse_error;


}
   22c36:	4638      	mov	r0, r7
   22c38:	b01f      	add	sp, #124	; 0x7c
   22c3a:	ecbd 8b02 	vpop	{d8}
   22c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            extract_fn_slice = &extract_spectrogram_per_slice_features;
   22c42:	f8df 8120 	ldr.w	r8, [pc, #288]	; 22d64 <process_impulse_continuous+0x2b4>
            is_spectrogram = true;
   22c46:	9101      	str	r1, [sp, #4]
   22c48:	e7cd      	b.n	22be6 <process_impulse_continuous+0x136>
   22c4a:	f003 fa5b 	bl	26104 <_Z7ei_freePv>
    for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
   22c4e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   22c50:	3501      	adds	r5, #1
   22c52:	42ab      	cmp	r3, r5
   22c54:	d89b      	bhi.n	22b8e <process_impulse_continuous+0xde>
    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
   22c56:	f003 fa1f 	bl	26098 <_Z16ei_read_timer_usv>
   22c5a:	9b07      	ldr	r3, [sp, #28]
   22c5c:	9d05      	ldr	r5, [sp, #20]
   22c5e:	1ac0      	subs	r0, r0, r3
   22c60:	9b08      	ldr	r3, [sp, #32]
   22c62:	eb61 0103 	sbc.w	r1, r1, r3
   22c66:	e9c5 013a 	strd	r0, r1, [r5, #232]	; 0xe8
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
   22c6a:	2300      	movs	r3, #0
   22c6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22c70:	f7f6 fa78 	bl	19164 <__aeabi_ldivmod>
    if (debug) {
   22c74:	9b06      	ldr	r3, [sp, #24]
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
   22c76:	f8c5 00dc 	str.w	r0, [r5, #220]	; 0xdc
    if (debug) {
   22c7a:	2b00      	cmp	r3, #0
   22c7c:	f040 80d7 	bne.w	22e2e <process_impulse_continuous+0x37e>
    if (classifier_continuous_features_written >= impulse->nn_input_frame_size) {
   22c80:	e9d7 1300 	ldrd	r1, r3, [r7]
   22c84:	6922      	ldr	r2, [r4, #16]
   22c86:	4291      	cmp	r1, r2
   22c88:	f173 0300 	sbcs.w	r3, r3, #0
   22c8c:	d26e      	bcs.n	22d6c <process_impulse_continuous+0x2bc>
        if (!impulse->object_detection) {
   22c8e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   22c92:	b963      	cbnz	r3, 22cae <process_impulse_continuous+0x1fe>
            for (int i = 0; i < impulse->label_count; i++) {
   22c94:	8e20      	ldrh	r0, [r4, #48]	; 0x30
   22c96:	b150      	cbz	r0, 22cae <process_impulse_continuous+0x1fe>
   22c98:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   22c9c:	9a05      	ldr	r2, [sp, #20]
   22c9e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
                result->classification[i].label = impulse->categories[(uint32_t)i];
   22ca2:	f853 1b04 	ldr.w	r1, [r3], #4
   22ca6:	f842 1f08 	str.w	r1, [r2, #8]!
            for (int i = 0; i < impulse->label_count; i++) {
   22caa:	4298      	cmp	r0, r3
   22cac:	d1f9      	bne.n	22ca2 <process_impulse_continuous+0x1f2>
    EI_IMPULSE_ERROR ei_impulse_error = EI_IMPULSE_OK;
   22cae:	2700      	movs	r7, #0
}
   22cb0:	4638      	mov	r0, r7
   22cb2:	b01f      	add	sp, #124	; 0x7c
   22cb4:	ecbd 8b02 	vpop	{d8}
   22cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            extract_fn_slice = &extract_mfcc_per_slice_features;
   22cbc:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 22d68 <process_impulse_continuous+0x2b8>
            is_mfcc = true;
   22cc0:	9104      	str	r1, [sp, #16]
   22cc2:	e790      	b.n	22be6 <process_impulse_continuous+0x136>
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   22cc4:	2101      	movs	r1, #1
   22cc6:	ea4f 008b 	mov.w	r0, fp, lsl #2
   22cca:	e9cd 2302 	strd	r2, r3, [sp, #8]
   22cce:	f003 fa09 	bl	260e4 <_Z9ei_callocjj>
            buffer_managed_by_me = true;
   22cd2:	2101      	movs	r1, #1
   22cd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   22cd8:	900d      	str	r0, [sp, #52]	; 0x34
            buffer_managed_by_me = true;
   22cda:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
   22cde:	e771      	b.n	22bc4 <process_impulse_continuous+0x114>
    static ei::matrix_t static_features_matrix(1, impulse->nn_input_frame_size);
   22ce0:	4628      	mov	r0, r5
   22ce2:	f013 fd11 	bl	36708 <__cxa_guard_acquire>
   22ce6:	2800      	cmp	r0, #0
   22ce8:	f43f aef5 	beq.w	22ad6 <process_impulse_continuous+0x26>
   22cec:	6926      	ldr	r6, [r4, #16]
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   22cee:	f8df a06c 	ldr.w	sl, [pc, #108]	; 22d5c <process_impulse_continuous+0x2ac>
   22cf2:	2101      	movs	r1, #1
   22cf4:	00b0      	lsls	r0, r6, #2
   22cf6:	f003 f9f5 	bl	260e4 <_Z9ei_callocjj>
            buffer_managed_by_me = true;
   22cfa:	2301      	movs	r3, #1
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   22cfc:	f8ca 0000 	str.w	r0, [sl]
        cols = n_cols;
   22d00:	f8ca 6008 	str.w	r6, [sl, #8]
            buffer_managed_by_me = true;
   22d04:	f88a 300c 	strb.w	r3, [sl, #12]
        rows = n_rows;
   22d08:	f8ca 3004 	str.w	r3, [sl, #4]
   22d0c:	4811      	ldr	r0, [pc, #68]	; (22d54 <process_impulse_continuous+0x2a4>)
   22d0e:	f008 f82d 	bl	2ad6c <atexit>
   22d12:	4628      	mov	r0, r5
   22d14:	f013 fd14 	bl	36740 <__cxa_guard_release>
   22d18:	e6df      	b.n	22ada <process_impulse_continuous+0x2a>
            ei_printf("ERR: Would write outside feature buffer\n");
   22d1a:	480f      	ldr	r0, [pc, #60]	; (22d58 <process_impulse_continuous+0x2a8>)
   22d1c:	f003 f9c4 	bl	260a8 <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
   22d20:	f06f 0704 	mvn.w	r7, #4
}
   22d24:	4638      	mov	r0, r7
   22d26:	b01f      	add	sp, #124	; 0x7c
   22d28:	ecbd 8b02 	vpop	{d8}
   22d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22d30:	4607      	mov	r7, r0
   22d32:	e771      	b.n	22c18 <process_impulse_continuous+0x168>
   22d34:	10010b28 	.word	0x10010b28
   22d38:	00020945 	.word	0x00020945
   22d3c:	00021811 	.word	0x00021811
   22d40:	10018860 	.word	0x10018860
   22d44:	00024ded 	.word	0x00024ded
   22d48:	00023b21 	.word	0x00023b21
   22d4c:	00025d81 	.word	0x00025d81
   22d50:	0003fb44 	.word	0x0003fb44
   22d54:	00020695 	.word	0x00020695
   22d58:	0003fb90 	.word	0x0003fb90
   22d5c:	1001886c 	.word	0x1001886c
   22d60:	00025751 	.word	0x00025751
   22d64:	00023de9 	.word	0x00023de9
   22d68:	00025159 	.word	0x00025159
        dsp_start_us = ei_read_timer_us();
   22d6c:	f003 f994 	bl	26098 <_Z16ei_read_timer_usv>
        ei::matrix_t classify_matrix(1, impulse->nn_input_frame_size);
   22d70:	6926      	ldr	r6, [r4, #16]
        dsp_start_us = ei_read_timer_us();
   22d72:	4680      	mov	r8, r0
   22d74:	460f      	mov	r7, r1
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   22d76:	00b0      	lsls	r0, r6, #2
   22d78:	2101      	movs	r1, #1
   22d7a:	f003 f9b3 	bl	260e4 <_Z9ei_callocjj>
   22d7e:	4605      	mov	r5, r0
   22d80:	9015      	str	r0, [sp, #84]	; 0x54
        for (size_t m_ix = 0; m_ix < impulse->nn_input_frame_size; m_ix++) {
   22d82:	6920      	ldr	r0, [r4, #16]
        cols = n_cols;
   22d84:	9617      	str	r6, [sp, #92]	; 0x5c
            buffer_managed_by_me = true;
   22d86:	2301      	movs	r3, #1
   22d88:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
        rows = n_rows;
   22d8c:	9316      	str	r3, [sp, #88]	; 0x58
   22d8e:	b150      	cbz	r0, 22da6 <process_impulse_continuous+0x2f6>
   22d90:	f8da 3000 	ldr.w	r3, [sl]
   22d94:	462a      	mov	r2, r5
   22d96:	eb03 0080 	add.w	r0, r3, r0, lsl #2
            classify_matrix.buffer[m_ix] = static_features_matrix.buffer[m_ix];
   22d9a:	f853 1b04 	ldr.w	r1, [r3], #4
   22d9e:	f842 1b04 	str.w	r1, [r2], #4
        for (size_t m_ix = 0; m_ix < impulse->nn_input_frame_size; m_ix++) {
   22da2:	4298      	cmp	r0, r3
   22da4:	d1f9      	bne.n	22d9a <process_impulse_continuous+0x2ea>
        if (is_mfcc) {
   22da6:	9b04      	ldr	r3, [sp, #16]
   22da8:	2b00      	cmp	r3, #0
   22daa:	d163      	bne.n	22e74 <process_impulse_continuous+0x3c4>
        else if (is_spectrogram) {
   22dac:	9b01      	ldr	r3, [sp, #4]
   22dae:	2b00      	cmp	r3, #0
   22db0:	f040 809c 	bne.w	22eec <process_impulse_continuous+0x43c>
        else if (is_mfe) {
   22db4:	9b00      	ldr	r3, [sp, #0]
   22db6:	2b00      	cmp	r3, #0
   22db8:	f040 811c 	bne.w	22ff4 <process_impulse_continuous+0x544>
   22dbc:	ad15      	add	r5, sp, #84	; 0x54
        result->timing.dsp_us += ei_read_timer_us() - dsp_start_us;
   22dbe:	f003 f96b 	bl	26098 <_Z16ei_read_timer_usv>
   22dc2:	9e05      	ldr	r6, [sp, #20]
   22dc4:	f8d6 30e8 	ldr.w	r3, [r6, #232]	; 0xe8
   22dc8:	ebb3 0808 	subs.w	r8, r3, r8
   22dcc:	f8d6 30ec 	ldr.w	r3, [r6, #236]	; 0xec
   22dd0:	eb63 0307 	sbc.w	r3, r3, r7
   22dd4:	eb18 0000 	adds.w	r0, r8, r0
   22dd8:	eb43 0101 	adc.w	r1, r3, r1
   22ddc:	f8c6 00e8 	str.w	r0, [r6, #232]	; 0xe8
        result->timing.dsp = (int)(result->timing.dsp_us / 1000);
   22de0:	2300      	movs	r3, #0
        result->timing.dsp_us += ei_read_timer_us() - dsp_start_us;
   22de2:	f8c6 10ec 	str.w	r1, [r6, #236]	; 0xec
        result->timing.dsp = (int)(result->timing.dsp_us / 1000);
   22de6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22dea:	f7f6 f9bb 	bl	19164 <__aeabi_ldivmod>
        if (debug) {
   22dee:	9b06      	ldr	r3, [sp, #24]
        result->timing.dsp = (int)(result->timing.dsp_us / 1000);
   22df0:	f8c6 00dc 	str.w	r0, [r6, #220]	; 0xdc
        if (debug) {
   22df4:	2b00      	cmp	r3, #0
   22df6:	d170      	bne.n	22eda <process_impulse_continuous+0x42a>
    EI_IMPULSE_ERROR nn_res = run_nn_inference(impulse, fmatrix, result, debug);
   22df8:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   22dfc:	4629      	mov	r1, r5
   22dfe:	4620      	mov	r0, r4
   22e00:	f7ff fd9a 	bl	22938 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb>
    if (nn_res != EI_IMPULSE_OK) {
   22e04:	4607      	mov	r7, r0
   22e06:	b928      	cbnz	r0, 22e14 <process_impulse_continuous+0x364>
    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
   22e08:	f003 f944 	bl	26094 <_Z29ei_run_impulse_check_canceledv>
        return EI_IMPULSE_CANCELED;
   22e0c:	3002      	adds	r0, #2
   22e0e:	bf08      	it	eq
   22e10:	f06f 0701 	mvneq.w	r7, #1
        if (impulse->sensor == EI_CLASSIFIER_SENSOR_MICROPHONE) {
   22e14:	f8d4 4080 	ldr.w	r4, [r4, #128]	; 0x80
   22e18:	2c01      	cmp	r4, #1
   22e1a:	d042      	beq.n	22ea2 <process_impulse_continuous+0x3f2>
        if (buffer && buffer_managed_by_me) {
   22e1c:	9815      	ldr	r0, [sp, #84]	; 0x54
   22e1e:	2800      	cmp	r0, #0
   22e20:	d080      	beq.n	22d24 <process_impulse_continuous+0x274>
   22e22:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
   22e26:	2b00      	cmp	r3, #0
   22e28:	f43f af7c 	beq.w	22d24 <process_impulse_continuous+0x274>
   22e2c:	e701      	b.n	22c32 <process_impulse_continuous+0x182>
        ei_printf("\r\nFeatures (%d ms.): ", result->timing.dsp);
   22e2e:	4601      	mov	r1, r0
   22e30:	48b5      	ldr	r0, [pc, #724]	; (23108 <process_impulse_continuous+0x658>)
   22e32:	f003 f939 	bl	260a8 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < static_features_matrix.cols; ix++) {
   22e36:	f8da 3008 	ldr.w	r3, [sl, #8]
   22e3a:	b18b      	cbz	r3, 22e60 <process_impulse_continuous+0x3b0>
            ei_printf(" ");
   22e3c:	4db3      	ldr	r5, [pc, #716]	; (2310c <process_impulse_continuous+0x65c>)
        for (size_t ix = 0; ix < static_features_matrix.cols; ix++) {
   22e3e:	2600      	movs	r6, #0
            ei_printf_float(static_features_matrix.buffer[ix]);
   22e40:	f8da 3000 	ldr.w	r3, [sl]
   22e44:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   22e48:	ed93 0a00 	vldr	s0, [r3]
   22e4c:	f003 f93a 	bl	260c4 <_Z15ei_printf_floatf>
            ei_printf(" ");
   22e50:	4628      	mov	r0, r5
   22e52:	f003 f929 	bl	260a8 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < static_features_matrix.cols; ix++) {
   22e56:	f8da 3008 	ldr.w	r3, [sl, #8]
   22e5a:	3601      	adds	r6, #1
   22e5c:	42b3      	cmp	r3, r6
   22e5e:	d8ef      	bhi.n	22e40 <process_impulse_continuous+0x390>
        ei_printf("\n");
   22e60:	48ab      	ldr	r0, [pc, #684]	; (23110 <process_impulse_continuous+0x660>)
   22e62:	f003 f921 	bl	260a8 <_Z9ei_printfPKcz>
   22e66:	e70b      	b.n	22c80 <process_impulse_continuous+0x1d0>
            ei_printf("ERR: Unknown extract function, only MFCC, MFE and spectrogram supported\n");
   22e68:	48aa      	ldr	r0, [pc, #680]	; (23114 <process_impulse_continuous+0x664>)
   22e6a:	f003 f91d 	bl	260a8 <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
   22e6e:	f06f 0704 	mvn.w	r7, #4
   22e72:	e6d7      	b.n	22c24 <process_impulse_continuous+0x174>
            calc_cepstral_mean_and_var_normalization_mfcc(&classify_matrix, impulse->dsp_blocks[0].config);
   22e74:	6c23      	ldr	r3, [r4, #64]	; 0x40
   22e76:	689b      	ldr	r3, [r3, #8]
    /* Modify rows and colums ration for matrix normalization */
    matrix->rows = original_matrix_size / config->num_cepstral;
    matrix->cols = config->num_cepstral;

    // cepstral mean and variance normalization
    int ret = speechpy::processing::cmvnw(matrix, config->win_size, true, false);
   22e78:	8b99      	ldrh	r1, [r3, #28]
    matrix->rows = original_matrix_size / config->num_cepstral;
   22e7a:	689b      	ldr	r3, [r3, #8]
    matrix->cols = config->num_cepstral;
   22e7c:	9317      	str	r3, [sp, #92]	; 0x5c
   22e7e:	ad15      	add	r5, sp, #84	; 0x54
    matrix->rows = original_matrix_size / config->num_cepstral;
   22e80:	fbb6 f3f3 	udiv	r3, r6, r3
   22e84:	9316      	str	r3, [sp, #88]	; 0x58
        if (win_size == 0) {
   22e86:	b141      	cbz	r1, 22e9a <process_impulse_continuous+0x3ea>
   22e88:	2300      	movs	r3, #0
   22e8a:	2201      	movs	r2, #1
   22e8c:	4628      	mov	r0, r5
   22e8e:	f7fd ff27 	bl	20ce0 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0>
    if (ret != EIDSP_OK) {
   22e92:	4601      	mov	r1, r0
   22e94:	2800      	cmp	r0, #0
   22e96:	f040 80c4 	bne.w	23022 <process_impulse_continuous+0x572>
            return;
        }
    }

    /* Reset rows and columns ratio */
    matrix->rows = 1;
   22e9a:	2301      	movs	r3, #1
    matrix->cols = (original_matrix_size);
   22e9c:	9617      	str	r6, [sp, #92]	; 0x5c
    matrix->rows = 1;
   22e9e:	9316      	str	r3, [sp, #88]	; 0x58
    matrix->cols = (original_matrix_size);
   22ea0:	e78d      	b.n	22dbe <process_impulse_continuous+0x30e>
            if((void *)avg_scores != NULL && enable_maf == true) {
   22ea2:	4b9d      	ldr	r3, [pc, #628]	; (23118 <process_impulse_continuous+0x668>)
   22ea4:	681b      	ldr	r3, [r3, #0]
   22ea6:	2b00      	cmp	r3, #0
   22ea8:	d0b8      	beq.n	22e1c <process_impulse_continuous+0x36c>
   22eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   22eac:	2b00      	cmp	r3, #0
   22eae:	d0b5      	beq.n	22e1c <process_impulse_continuous+0x36c>
                    if (!has_printed_msg) {
   22eb0:	4d9a      	ldr	r5, [pc, #616]	; (2311c <process_impulse_continuous+0x66c>)
   22eb2:	782b      	ldrb	r3, [r5, #0]
   22eb4:	2b00      	cmp	r3, #0
   22eb6:	d1b1      	bne.n	22e1c <process_impulse_continuous+0x36c>
                        ei_printf("WARN: run_classifier_continuous, enable_maf is true, but performance calibration is not configured.\n");
   22eb8:	4899      	ldr	r0, [pc, #612]	; (23120 <process_impulse_continuous+0x670>)
   22eba:	f003 f8f5 	bl	260a8 <_Z9ei_printfPKcz>
                        ei_printf("       Previously we'd run a moving-average filter over your outputs in this case, but this is now disabled.\n");
   22ebe:	4899      	ldr	r0, [pc, #612]	; (23124 <process_impulse_continuous+0x674>)
   22ec0:	f003 f8f2 	bl	260a8 <_Z9ei_printfPKcz>
                        ei_printf("       Go to 'Performance calibration' in your Edge Impulse project to configure post-processing parameters.\n");
   22ec4:	4898      	ldr	r0, [pc, #608]	; (23128 <process_impulse_continuous+0x678>)
   22ec6:	f003 f8ef 	bl	260a8 <_Z9ei_printfPKcz>
                        ei_printf("       (You can enable this from 'Dashboard' if it's not visible in your project)\n");
   22eca:	4898      	ldr	r0, [pc, #608]	; (2312c <process_impulse_continuous+0x67c>)
   22ecc:	f003 f8ec 	bl	260a8 <_Z9ei_printfPKcz>
                        ei_printf("\n");
   22ed0:	488f      	ldr	r0, [pc, #572]	; (23110 <process_impulse_continuous+0x660>)
   22ed2:	f003 f8e9 	bl	260a8 <_Z9ei_printfPKcz>
                        has_printed_msg = true;
   22ed6:	702c      	strb	r4, [r5, #0]
   22ed8:	e7a0      	b.n	22e1c <process_impulse_continuous+0x36c>
            ei_printf("Running impulse...\n");
   22eda:	4895      	ldr	r0, [pc, #596]	; (23130 <process_impulse_continuous+0x680>)
   22edc:	f003 f8e4 	bl	260a8 <_Z9ei_printfPKcz>
   22ee0:	e78a      	b.n	22df8 <process_impulse_continuous+0x348>
   22ee2:	4f94      	ldr	r7, [pc, #592]	; (23134 <process_impulse_continuous+0x684>)
    bool is_spectrogram = false;
   22ee4:	9301      	str	r3, [sp, #4]
    bool is_mfe = false;
   22ee6:	9300      	str	r3, [sp, #0]
    bool is_mfcc = false;
   22ee8:	9304      	str	r3, [sp, #16]
   22eea:	e6b4      	b.n	22c56 <process_impulse_continuous+0x1a6>
            calc_cepstral_mean_and_var_normalization_spectrogram(&classify_matrix, impulse->dsp_blocks[0].config);
   22eec:	6c23      	ldr	r3, [r4, #64]	; 0x40
   22eee:	689a      	ldr	r2, [r3, #8]
    ei_dsp_config_spectrogram_t *config = (ei_dsp_config_spectrogram_t *)config_ptr;

    uint32_t original_matrix_size = matrix->rows * matrix->cols;

    /* Modify rows and colums ration for matrix normalization */
    matrix->cols = config->fft_length / 2 + 1;
   22ef0:	6913      	ldr	r3, [r2, #16]
    matrix->rows = (original_matrix_size) / matrix->cols;

    if (config->implementation_version < 3) {
   22ef2:	8810      	ldrh	r0, [r2, #0]
    matrix->cols = config->fft_length / 2 + 1;
   22ef4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   22ef8:	105b      	asrs	r3, r3, #1
   22efa:	3301      	adds	r3, #1
    if (config->implementation_version < 3) {
   22efc:	2802      	cmp	r0, #2
    matrix->rows = (original_matrix_size) / matrix->cols;
   22efe:	fbb6 f1f3 	udiv	r1, r6, r3
    matrix->cols = config->fft_length / 2 + 1;
   22f02:	9317      	str	r3, [sp, #92]	; 0x5c
    matrix->rows = (original_matrix_size) / matrix->cols;
   22f04:	9116      	str	r1, [sp, #88]	; 0x58
    if (config->implementation_version < 3) {
   22f06:	f200 8093 	bhi.w	23030 <process_impulse_continuous+0x580>
        matrix_t temp_matrix(1, matrix->rows * matrix->cols, matrix->buffer);
   22f0a:	fb01 fa03 	mul.w	sl, r1, r3
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   22f0e:	2101      	movs	r1, #1
        if (a_buffer) {
   22f10:	2d00      	cmp	r5, #0
   22f12:	f000 80b8 	beq.w	23086 <process_impulse_continuous+0x5d6>
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   22f16:	2004      	movs	r0, #4
   22f18:	f003 f8e4 	bl	260e4 <_Z9ei_callocjj>
        if (!min_matrix.buffer) {
   22f1c:	4681      	mov	r9, r0
   22f1e:	2800      	cmp	r0, #0
   22f20:	f000 80a9 	beq.w	23076 <process_impulse_continuous+0x5c6>
            arm_min_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &min, &ix);
   22f24:	ab11      	add	r3, sp, #68	; 0x44
   22f26:	aa0d      	add	r2, sp, #52	; 0x34
   22f28:	4651      	mov	r1, sl
   22f2a:	4628      	mov	r0, r5
   22f2c:	9300      	str	r3, [sp, #0]
   22f2e:	f010 fae5 	bl	334fc <arm_min_f32>
            output_matrix->buffer[row] = min;
   22f32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   22f34:	f8c9 3000 	str.w	r3, [r9]
   22f38:	2101      	movs	r1, #1
   22f3a:	2004      	movs	r0, #4
   22f3c:	f003 f8d2 	bl	260e4 <_Z9ei_callocjj>
        if (!max_matrix.buffer) {
   22f40:	4683      	mov	fp, r0
   22f42:	2800      	cmp	r0, #0
   22f44:	f000 8091 	beq.w	2306a <process_impulse_continuous+0x5ba>
            arm_max_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &max, &ix);
   22f48:	9b00      	ldr	r3, [sp, #0]
   22f4a:	aa0d      	add	r2, sp, #52	; 0x34
   22f4c:	4651      	mov	r1, sl
   22f4e:	4628      	mov	r0, r5
   22f50:	f010 fab0 	bl	334b4 <arm_max_f32>
            output_matrix->buffer[row] = max;
   22f54:	ed9d 8a0d 	vldr	s16, [sp, #52]	; 0x34
   22f58:	ed8b 8a00 	vstr	s16, [fp]
        float min_max_diff = (max_matrix.buffer[0] - min_matrix.buffer[0]);
   22f5c:	edd9 8a00 	vldr	s17, [r9]
   22f60:	ee38 8a68 	vsub.f32	s16, s16, s17
        float row_scale = min_max_diff < 0.001 ? 1.0f : 1.0f / min_max_diff;
   22f64:	ee18 0a10 	vmov	r0, s16
   22f68:	f7f5 fd7c 	bl	18a64 <__aeabi_f2d>
   22f6c:	a364      	add	r3, pc, #400	; (adr r3, 23100 <process_impulse_continuous+0x650>)
   22f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   22f72:	f7f6 f841 	bl	18ff8 <__aeabi_dcmplt>
   22f76:	2800      	cmp	r0, #0
   22f78:	d171      	bne.n	2305e <process_impulse_continuous+0x5ae>
   22f7a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   22f7e:	ee87 0a88 	vdiv.f32	s0, s15, s16
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   22f82:	f1ba 0f00 	cmp.w	sl, #0
   22f86:	f000 80a6 	beq.w	230d6 <process_impulse_continuous+0x626>
   22f8a:	462b      	mov	r3, r5
   22f8c:	eb05 028a 	add.w	r2, r5, sl, lsl #2
            matrix->buffer[ix] -= subtraction;
   22f90:	edd3 7a00 	vldr	s15, [r3]
   22f94:	ee77 7ae8 	vsub.f32	s15, s15, s17
   22f98:	ece3 7a01 	vstmia	r3!, {s15}
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   22f9c:	429a      	cmp	r2, r3
   22f9e:	d1f7      	bne.n	22f90 <process_impulse_continuous+0x4e0>
        if (scale == 1.0f) return EIDSP_OK;
   22fa0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   22fa4:	eeb4 0a67 	vcmp.f32	s0, s15
   22fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   22fac:	d018      	beq.n	22fe0 <process_impulse_continuous+0x530>
        if (matrix->rows > EI_MAX_UINT16 || matrix->cols > EI_MAX_UINT16) {
   22fae:	f5ba 3f80 	cmp.w	sl, #65536	; 0x10000
   22fb2:	f080 8097 	bcs.w	230e4 <process_impulse_continuous+0x634>
        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
   22fb6:	fa1f fa8a 	uxth.w	sl, sl
   22fba:	2301      	movs	r3, #1
        int status = arm_mat_scale_f32(&mi, scale, &mo);
   22fbc:	9900      	ldr	r1, [sp, #0]
        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
   22fbe:	f8ad a036 	strh.w	sl, [sp, #54]	; 0x36
        int status = arm_mat_scale_f32(&mi, scale, &mo);
   22fc2:	a80d      	add	r0, sp, #52	; 0x34
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
   22fc4:	f8ad a046 	strh.w	sl, [sp, #70]	; 0x46
        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
   22fc8:	950e      	str	r5, [sp, #56]	; 0x38
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
   22fca:	9512      	str	r5, [sp, #72]	; 0x48
        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
   22fcc:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
   22fd0:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
        int status = arm_mat_scale_f32(&mi, scale, &mo);
   22fd4:	f010 fa2e 	bl	33434 <arm_mat_scale_f32>
        if (status != ARM_MATH_SUCCESS) {
   22fd8:	4682      	mov	sl, r0
   22fda:	2800      	cmp	r0, #0
   22fdc:	f040 8084 	bne.w	230e8 <process_impulse_continuous+0x638>
            ei_free(buffer);
   22fe0:	4658      	mov	r0, fp
   22fe2:	f003 f88f 	bl	26104 <_Z7ei_freePv>
   22fe6:	4648      	mov	r0, r9
   22fe8:	f003 f88c 	bl	26104 <_Z7ei_freePv>
        if (buffer && buffer_managed_by_me) {
   22fec:	2d00      	cmp	r5, #0
   22fee:	d169      	bne.n	230c4 <process_impulse_continuous+0x614>
   22ff0:	ad15      	add	r5, sp, #84	; 0x54
   22ff2:	e752      	b.n	22e9a <process_impulse_continuous+0x3ea>
            calc_cepstral_mean_and_var_normalization_mfe(&classify_matrix, impulse->dsp_blocks[0].config);
   22ff4:	6c23      	ldr	r3, [r4, #64]	; 0x40
   22ff6:	689b      	ldr	r3, [r3, #8]
    if (config->implementation_version < 3) {
   22ff8:	8819      	ldrh	r1, [r3, #0]
    matrix->rows = (original_matrix_size) / config->num_filters;
   22ffa:	691a      	ldr	r2, [r3, #16]
    matrix->cols = config->num_filters;
   22ffc:	9217      	str	r2, [sp, #92]	; 0x5c
    if (config->implementation_version < 3) {
   22ffe:	2902      	cmp	r1, #2
    matrix->rows = (original_matrix_size) / config->num_filters;
   23000:	fbb6 f2f2 	udiv	r2, r6, r2
   23004:	9216      	str	r2, [sp, #88]	; 0x58
    if (config->implementation_version < 3) {
   23006:	d820      	bhi.n	2304a <process_impulse_continuous+0x59a>
        int ret = speechpy::processing::cmvnw(matrix, config->win_size, false, true);
   23008:	8c19      	ldrh	r1, [r3, #32]
   2300a:	2900      	cmp	r1, #0
   2300c:	d0f0      	beq.n	22ff0 <process_impulse_continuous+0x540>
   2300e:	ad15      	add	r5, sp, #84	; 0x54
   23010:	9a01      	ldr	r2, [sp, #4]
   23012:	2301      	movs	r3, #1
   23014:	4628      	mov	r0, r5
   23016:	f7fd fe63 	bl	20ce0 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0>
        if (ret != EIDSP_OK) {
   2301a:	4601      	mov	r1, r0
   2301c:	2800      	cmp	r0, #0
   2301e:	f43f af3c 	beq.w	22e9a <process_impulse_continuous+0x3ea>
            ei_printf("ERR: cmvnw failed (%d)\n", ret);
   23022:	4845      	ldr	r0, [pc, #276]	; (23138 <process_impulse_continuous+0x688>)
   23024:	f003 f840 	bl	260a8 <_Z9ei_printfPKcz>
            return;
   23028:	e6c9      	b.n	22dbe <process_impulse_continuous+0x30e>
        return EI_IMPULSE_ALLOC_FAILED;
   2302a:	f06f 0707 	mvn.w	r7, #7
   2302e:	e679      	b.n	22d24 <process_impulse_continuous+0x274>
            return;
        }
    }
    else {
        // normalization
        int ret = speechpy::processing::spectrogram_normalization(matrix, config->noise_floor_db);
   23030:	ad15      	add	r5, sp, #84	; 0x54
   23032:	6951      	ldr	r1, [r2, #20]
   23034:	4628      	mov	r0, r5
   23036:	f7fd fb4f 	bl	206d8 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi>
        if (ret != EIDSP_OK) {
   2303a:	4601      	mov	r1, r0
   2303c:	2800      	cmp	r0, #0
   2303e:	f43f af2c 	beq.w	22e9a <process_impulse_continuous+0x3ea>
            ei_printf("ERR: normalization failed (%d)\n", ret);
   23042:	483e      	ldr	r0, [pc, #248]	; (2313c <process_impulse_continuous+0x68c>)
   23044:	f003 f830 	bl	260a8 <_Z9ei_printfPKcz>
            return;
   23048:	e6b9      	b.n	22dbe <process_impulse_continuous+0x30e>
        int ret = speechpy::processing::mfe_normalization(matrix, config->noise_floor_db);
   2304a:	ad15      	add	r5, sp, #84	; 0x54
   2304c:	6a59      	ldr	r1, [r3, #36]	; 0x24
   2304e:	4628      	mov	r0, r5
   23050:	f7fd fb42 	bl	206d8 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi>
        if (ret != EIDSP_OK) {
   23054:	4601      	mov	r1, r0
   23056:	2800      	cmp	r0, #0
   23058:	f43f af1f 	beq.w	22e9a <process_impulse_continuous+0x3ea>
   2305c:	e7f1      	b.n	23042 <process_impulse_continuous+0x592>
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   2305e:	f1ba 0f00 	cmp.w	sl, #0
   23062:	d0bd      	beq.n	22fe0 <process_impulse_continuous+0x530>
        float row_scale = min_max_diff < 0.001 ? 1.0f : 1.0f / min_max_diff;
   23064:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   23068:	e78f      	b.n	22f8a <process_impulse_continuous+0x4da>
            ei_free(buffer);
   2306a:	4648      	mov	r0, r9
   2306c:	f003 f84a 	bl	26104 <_Z7ei_freePv>
        if (buffer && buffer_managed_by_me) {
   23070:	b10d      	cbz	r5, 23076 <process_impulse_continuous+0x5c6>
   23072:	9b04      	ldr	r3, [sp, #16]
   23074:	b9ab      	cbnz	r3, 230a2 <process_impulse_continuous+0x5f2>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
   23076:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 23140 <process_impulse_continuous+0x690>
            ei_printf("ERR: normalization failed (%d)\n", ret);
   2307a:	4830      	ldr	r0, [pc, #192]	; (2313c <process_impulse_continuous+0x68c>)
   2307c:	4651      	mov	r1, sl
   2307e:	f003 f813 	bl	260a8 <_Z9ei_printfPKcz>
            return;
   23082:	ad15      	add	r5, sp, #84	; 0x54
   23084:	e69b      	b.n	22dbe <process_impulse_continuous+0x30e>
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   23086:	ea4f 008a 	mov.w	r0, sl, lsl #2
   2308a:	f003 f82b 	bl	260e4 <_Z9ei_callocjj>
   2308e:	2101      	movs	r1, #1
   23090:	4605      	mov	r5, r0
   23092:	2004      	movs	r0, #4
   23094:	f003 f826 	bl	260e4 <_Z9ei_callocjj>
        if (!min_matrix.buffer) {
   23098:	4681      	mov	r9, r0
   2309a:	b158      	cbz	r0, 230b4 <process_impulse_continuous+0x604>
   2309c:	9b01      	ldr	r3, [sp, #4]
   2309e:	9304      	str	r3, [sp, #16]
   230a0:	e740      	b.n	22f24 <process_impulse_continuous+0x474>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
   230a2:	f8df a09c 	ldr.w	sl, [pc, #156]	; 23140 <process_impulse_continuous+0x690>
            ei_free(buffer);
   230a6:	4628      	mov	r0, r5
   230a8:	f003 f82c 	bl	26104 <_Z7ei_freePv>
        if (ret != EIDSP_OK) {
   230ac:	f1ba 0f00 	cmp.w	sl, #0
   230b0:	d09e      	beq.n	22ff0 <process_impulse_continuous+0x540>
   230b2:	e7e2      	b.n	2307a <process_impulse_continuous+0x5ca>
        if (buffer && buffer_managed_by_me) {
   230b4:	2d00      	cmp	r5, #0
   230b6:	d0de      	beq.n	23076 <process_impulse_continuous+0x5c6>
            ei_free(buffer);
   230b8:	4628      	mov	r0, r5
   230ba:	f003 f823 	bl	26104 <_Z7ei_freePv>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
   230be:	f8df a080 	ldr.w	sl, [pc, #128]	; 23140 <process_impulse_continuous+0x690>
   230c2:	e7da      	b.n	2307a <process_impulse_continuous+0x5ca>
        if (buffer && buffer_managed_by_me) {
   230c4:	f04f 0a00 	mov.w	sl, #0
   230c8:	9b04      	ldr	r3, [sp, #16]
   230ca:	2b00      	cmp	r3, #0
   230cc:	d1eb      	bne.n	230a6 <process_impulse_continuous+0x5f6>
   230ce:	f1ba 0f00 	cmp.w	sl, #0
   230d2:	d08d      	beq.n	22ff0 <process_impulse_continuous+0x540>
   230d4:	e7d1      	b.n	2307a <process_impulse_continuous+0x5ca>
        if (scale == 1.0f) return EIDSP_OK;
   230d6:	eeb4 0a67 	vcmp.f32	s0, s15
   230da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   230de:	f47f af6a 	bne.w	22fb6 <process_impulse_continuous+0x506>
   230e2:	e77d      	b.n	22fe0 <process_impulse_continuous+0x530>
            return EIDSP_NARROWING;
   230e4:	f8df a05c 	ldr.w	sl, [pc, #92]	; 23144 <process_impulse_continuous+0x694>
            ei_free(buffer);
   230e8:	4658      	mov	r0, fp
   230ea:	f003 f80b 	bl	26104 <_Z7ei_freePv>
   230ee:	4648      	mov	r0, r9
   230f0:	f003 f808 	bl	26104 <_Z7ei_freePv>
        if (buffer && buffer_managed_by_me) {
   230f4:	2d00      	cmp	r5, #0
   230f6:	d1e7      	bne.n	230c8 <process_impulse_continuous+0x618>
   230f8:	e7bf      	b.n	2307a <process_impulse_continuous+0x5ca>
   230fa:	bf00      	nop
   230fc:	f3af 8000 	nop.w
   23100:	d2f1a9fc 	.word	0xd2f1a9fc
   23104:	3f50624d 	.word	0x3f50624d
   23108:	0003fc08 	.word	0x0003fc08
   2310c:	0003fc1c 	.word	0x0003fc1c
   23110:	00040138 	.word	0x00040138
   23114:	0003fbbc 	.word	0x0003fbbc
   23118:	10018848 	.word	0x10018848
   2311c:	10018868 	.word	0x10018868
   23120:	0003fc6c 	.word	0x0003fc6c
   23124:	0003fcd4 	.word	0x0003fcd4
   23128:	0003fd44 	.word	0x0003fd44
   2312c:	0003fdb4 	.word	0x0003fdb4
   23130:	0003fc58 	.word	0x0003fc58
   23134:	10018860 	.word	0x10018860
   23138:	0003fc20 	.word	0x0003fc20
   2313c:	0003fc38 	.word	0x0003fc38
   23140:	fffffc16 	.word	0xfffffc16
   23144:	fffffc0c 	.word	0xfffffc0c

00023148 <main>:
int main(int argc, char **argv) {
   23148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2314c:	ed2d 8b02 	vpush	{d8}
        yesFilter.samples[i] = 0;
   23150:	4d95      	ldr	r5, [pc, #596]	; (233a8 <main+0x260>)
        noFilter.samples[i] = 0;
   23152:	4e96      	ldr	r6, [pc, #600]	; (233ac <main+0x264>)
    ns_core_config_t ns_core_cfg = {.api = &ns_core_V1_0_0};
   23154:	4b96      	ldr	r3, [pc, #600]	; (233b0 <main+0x268>)
int main(int argc, char **argv) {
   23156:	b0f3      	sub	sp, #460	; 0x1cc
    _Function_base() : _M_manager(nullptr) { }
   23158:	f10d 0b0c 	add.w	fp, sp, #12
   2315c:	2100      	movs	r1, #0
        yesFilter.samples[i] = 0;
   2315e:	2210      	movs	r2, #16
   23160:	4628      	mov	r0, r5
   23162:	f8cb 1008 	str.w	r1, [fp, #8]
    ns_core_config_t ns_core_cfg = {.api = &ns_core_V1_0_0};
   23166:	9302      	str	r3, [sp, #8]
        yesFilter.samples[i] = 0;
   23168:	f007 fe9c 	bl	2aea4 <memset>
        noFilter.samples[i] = 0;
   2316c:	2210      	movs	r2, #16
   2316e:	2100      	movs	r1, #0
   23170:	4630      	mov	r0, r6
   23172:	f007 fe97 	bl	2aea4 <memset>
    NS_TRY(ns_core_init(&ns_core_cfg), "Core init failed.\n");
   23176:	a802      	add	r0, sp, #8
   23178:	f7fd fa08 	bl	2058c <ns_core_init>
   2317c:	2800      	cmp	r0, #0
   2317e:	f040 80eb 	bne.w	23358 <main+0x210>
    NS_TRY(ns_power_config(&ns_development_default), "Power Init Failed.\n");
   23182:	488c      	ldr	r0, [pc, #560]	; (233b4 <main+0x26c>)
   23184:	f00a fd7e 	bl	2dc84 <ns_power_config>
   23188:	2800      	cmp	r0, #0
   2318a:	f040 80fd 	bne.w	23388 <main+0x240>
    ns_itm_printf_enable();
   2318e:	f00a fbab 	bl	2d8e8 <ns_itm_printf_enable>
    ns_malloc_init(); // needed by EI
   23192:	f00b fb43 	bl	2e81c <ns_malloc_init>
	NS_TRY(ns_timer_init(&ei_tickTimer), "Timer init failed.\n");
   23196:	4888      	ldr	r0, [pc, #544]	; (233b8 <main+0x270>)
   23198:	f00b fb8c 	bl	2e8b4 <ns_timer_init>
   2319c:	2800      	cmp	r0, #0
   2319e:	f040 80ed 	bne.w	2337c <main+0x234>
    NS_TRY(ns_peripheral_button_init(&button_config), "Button initialization failed.\n")
   231a2:	4886      	ldr	r0, [pc, #536]	; (233bc <main+0x274>)
   231a4:	f00a fc3a 	bl	2da1c <ns_peripheral_button_init>
   231a8:	2800      	cmp	r0, #0
   231aa:	f040 80e1 	bne.w	23370 <main+0x228>
    NS_TRY(ns_audio_init(&audio_config), "Audio initialization Failed.\n");
   231ae:	4884      	ldr	r0, [pc, #528]	; (233c0 <main+0x278>)
   231b0:	f00a fee4 	bl	2df7c <ns_audio_init>
   231b4:	2800      	cmp	r0, #0
   231b6:	f040 80d5 	bne.w	23364 <main+0x21c>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   231ba:	af32      	add	r7, sp, #200	; 0xc8
    ns_interrupt_master_enable();
   231bc:	f00c fe02 	bl	2fdc4 <am_hal_interrupt_master_enable>
   231c0:	4b80      	ldr	r3, [pc, #512]	; (233c4 <main+0x27c>)
   231c2:	603b      	str	r3, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   231c4:	e897 0003 	ldmia.w	r7, {r0, r1}
   231c8:	f10d 0a20 	add.w	sl, sp, #32
   231cc:	e88a 0003 	stmia.w	sl, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   231d0:	e89b 0003 	ldmia.w	fp, {r0, r1}
   231d4:	f8db 200c 	ldr.w	r2, [fp, #12]
   231d8:	60fa      	str	r2, [r7, #12]
    signal.total_length = EI_CLASSIFIER_SLICE_SIZE;
   231da:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   231de:	e887 0003 	stmia.w	r7, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   231e2:	e89a 0003 	ldmia.w	sl, {r0, r1}
   231e6:	4a78      	ldr	r2, [pc, #480]	; (233c8 <main+0x280>)
   231e8:	f8cb 3010 	str.w	r3, [fp, #16]
      __a = _GLIBCXX_MOVE(__b);
   231ec:	f8db 3008 	ldr.w	r3, [fp, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   231f0:	f8cb 2008 	str.w	r2, [fp, #8]
   231f4:	4a75      	ldr	r2, [pc, #468]	; (233cc <main+0x284>)
      __a = _GLIBCXX_MOVE(__b);
   231f6:	60bb      	str	r3, [r7, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   231f8:	e88b 0003 	stmia.w	fp, {r0, r1}
   231fc:	f8cb 200c 	str.w	r2, [fp, #12]
      if (_M_manager)
   23200:	b11b      	cbz	r3, 2320a <main+0xc2>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   23202:	2203      	movs	r2, #3
   23204:	4639      	mov	r1, r7
   23206:	4638      	mov	r0, r7
   23208:	4798      	blx	r3
    ns_lp_printf("EdgeImpulse \"yes or no\" example - detects \"yes\" or \"no\" using analog mic input\n");
   2320a:	4871      	ldr	r0, [pc, #452]	; (233d0 <main+0x288>)
            if (g_buttonPressed) {
   2320c:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 2340c <main+0x2c4>
    ns_lp_printf("EdgeImpulse \"yes or no\" example - detects \"yes\" or \"no\" using analog mic input\n");
   23210:	f00a fb9a 	bl	2d948 <ns_lp_printf>
    ns_lp_printf("Press Button 0 to start listening\n");
   23214:	486f      	ldr	r0, [pc, #444]	; (233d4 <main+0x28c>)
   23216:	f00a fb97 	bl	2d948 <ns_lp_printf>
            if (g_buttonPressed) {
   2321a:	f8d8 3000 	ldr.w	r3, [r8]
   2321e:	b92b      	cbnz	r3, 2322c <main+0xe4>
        ns_deep_sleep();
   23220:	f00a fdba 	bl	2dd98 <ns_deep_sleep>
            if (g_buttonPressed) {
   23224:	f8d8 3000 	ldr.w	r3, [r8]
   23228:	2b00      	cmp	r3, #0
   2322a:	d0f9      	beq.n	23220 <main+0xd8>
                ns_lp_printf("Listening...\n");
   2322c:	486a      	ldr	r0, [pc, #424]	; (233d8 <main+0x290>)
                g_audioReady = false;
   2322e:	4c6b      	ldr	r4, [pc, #428]	; (233dc <main+0x294>)
                g_buttonPressed = false;
   23230:	f04f 0900 	mov.w	r9, #0
   23234:	f8c8 9000 	str.w	r9, [r8]
                ns_lp_printf("Listening...\n");
   23238:	f00a fb86 	bl	2d948 <ns_lp_printf>
                g_audioRecording = true;
   2323c:	4b68      	ldr	r3, [pc, #416]	; (233e0 <main+0x298>)
                g_audioReady = false;
   2323e:	f884 9000 	strb.w	r9, [r4]
                g_audioRecording = true;
   23242:	2201      	movs	r2, #1
   23244:	701a      	strb	r2, [r3, #0]
        ns_deep_sleep();
   23246:	f00a fda7 	bl	2dd98 <ns_deep_sleep>
            if (!g_audioReady) {
   2324a:	7823      	ldrb	r3, [r4, #0]
   2324c:	b923      	cbnz	r3, 23258 <main+0x110>
        ns_deep_sleep();
   2324e:	f00a fda3 	bl	2dd98 <ns_deep_sleep>
            if (!g_audioReady) {
   23252:	7823      	ldrb	r3, [r4, #0]
   23254:	2b00      	cmp	r3, #0
   23256:	d0fa      	beq.n	2324e <main+0x106>
 * @brief      Construct impulse from macros - for run_classifer compatibility
 */
extern "C" const ei_impulse_t ei_construct_impulse()
{

const ei_impulse_t impulse =
   23258:	4962      	ldr	r1, [pc, #392]	; (233e4 <main+0x29c>)
   2325a:	22a8      	movs	r2, #168	; 0xa8
   2325c:	4650      	mov	r0, sl
   2325e:	f7f4 ffcf 	bl	18200 <memcpy>
#if EI_CLASSIFIER_STUDIO_VERSION < 3
        const ei_impulse_t impulse = ei_construct_impulse();
#else
       const ei_impulse_t impulse = ei_default_impulse;
#endif
    return process_impulse_continuous(&impulse, signal, result, debug, enable_maf);
   23262:	2301      	movs	r3, #1
   23264:	9300      	str	r3, [sp, #0]
   23266:	463a      	mov	r2, r7
   23268:	2300      	movs	r3, #0
   2326a:	4659      	mov	r1, fp
   2326c:	4650      	mov	r0, sl
   2326e:	f7ff fc1f 	bl	22ab0 <process_impulse_continuous>
    filter->total = filter->total - filter->samples[filter->ptr] + newValue;
   23272:	7c2b      	ldrb	r3, [r5, #16]
            y = updateFilter(&yesFilter, result.classification[3].value);
   23274:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
    filter->total = filter->total - filter->samples[filter->ptr] + newValue;
   23278:	ed95 7a05 	vldr	s14, [r5, #20]
   2327c:	eb05 0283 	add.w	r2, r5, r3, lsl #2
    if (filter->ptr == FILTER_DEPTH-1) {
   23280:	2b03      	cmp	r3, #3
    filter->total = filter->total - filter->samples[filter->ptr] + newValue;
   23282:	edd2 6a00 	vldr	s13, [r2]
    filter->samples[filter->ptr] = newValue;
   23286:	edc2 7a00 	vstr	s15, [r2]
        filter->ptr++;
   2328a:	bf1c      	itt	ne
   2328c:	3301      	addne	r3, #1
   2328e:	b2da      	uxtbne	r2, r3
    filter->total = filter->total - filter->samples[filter->ptr] + newValue;
   23290:	7c33      	ldrb	r3, [r6, #16]
   23292:	ee37 7a66 	vsub.f32	s14, s14, s13
   23296:	eb06 0183 	add.w	r1, r6, r3, lsl #2
   2329a:	ed91 6a00 	vldr	s12, [r1]
            n = updateFilter(&noFilter, result.classification[0].value);
   2329e:	edd7 6a03 	vldr	s13, [r7, #12]
    filter->total = filter->total - filter->samples[filter->ptr] + newValue;
   232a2:	ee37 7a27 	vadd.f32	s14, s14, s15
   232a6:	edd6 7a05 	vldr	s15, [r6, #20]
   232aa:	ed85 7a05 	vstr	s14, [r5, #20]
   232ae:	ee77 7ac6 	vsub.f32	s15, s15, s12
    return filter->total/FILTER_DEPTH;
   232b2:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
        filter->ptr = 0;
   232b6:	bf08      	it	eq
   232b8:	2200      	moveq	r2, #0
    return filter->total/FILTER_DEPTH;
   232ba:	ee27 7a06 	vmul.f32	s14, s14, s12
    if (filter->ptr == FILTER_DEPTH-1) {
   232be:	2b03      	cmp	r3, #3
        filter->ptr++;
   232c0:	bf18      	it	ne
   232c2:	3301      	addne	r3, #1
    filter->total = filter->total - filter->samples[filter->ptr] + newValue;
   232c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        filter->ptr++;
   232c8:	bf14      	ite	ne
   232ca:	b2db      	uxtbne	r3, r3
        filter->ptr = 0;
   232cc:	2300      	moveq	r3, #0
    return filter->total/FILTER_DEPTH;
   232ce:	ee17 0a10 	vmov	r0, s14
    filter->samples[filter->ptr] = newValue;
   232d2:	edc1 6a00 	vstr	s13, [r1]
    return filter->total/FILTER_DEPTH;
   232d6:	eeb5 8a00 	vmov.f32	s16, #80	; 0x3e800000  0.250
   232da:	742a      	strb	r2, [r5, #16]
   232dc:	7433      	strb	r3, [r6, #16]
   232de:	ee27 8a88 	vmul.f32	s16, s15, s16
    filter->total = filter->total - filter->samples[filter->ptr] + newValue;
   232e2:	edc6 7a05 	vstr	s15, [r6, #20]
            if (y>0.6) ns_lp_printf("Y");       // Strong Yes
   232e6:	f7f5 fbbd 	bl	18a64 <__aeabi_f2d>
   232ea:	a32b      	add	r3, pc, #172	; (adr r3, 23398 <main+0x250>)
   232ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   232f0:	4680      	mov	r8, r0
   232f2:	4689      	mov	r9, r1
   232f4:	f7f5 fe9e 	bl	19034 <__aeabi_dcmpgt>
   232f8:	b9f0      	cbnz	r0, 23338 <main+0x1f0>
            else if (y>0.4) ns_lp_printf("y");  // Probably Yes
   232fa:	a329      	add	r3, pc, #164	; (adr r3, 233a0 <main+0x258>)
   232fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   23300:	4640      	mov	r0, r8
   23302:	4649      	mov	r1, r9
   23304:	f7f5 fe96 	bl	19034 <__aeabi_dcmpgt>
   23308:	bb10      	cbnz	r0, 23350 <main+0x208>
            if (n>0.6) ns_lp_printf("N");       // Strong No
   2330a:	ee18 0a10 	vmov	r0, s16
   2330e:	f7f5 fba9 	bl	18a64 <__aeabi_f2d>
   23312:	a321      	add	r3, pc, #132	; (adr r3, 23398 <main+0x250>)
   23314:	e9d3 2300 	ldrd	r2, r3, [r3]
   23318:	4680      	mov	r8, r0
   2331a:	4689      	mov	r9, r1
   2331c:	f7f5 fe8a 	bl	19034 <__aeabi_dcmpgt>
   23320:	b970      	cbnz	r0, 23340 <main+0x1f8>
            else if (n>0.4) ns_lp_printf("n");  // Probably No
   23322:	a31f      	add	r3, pc, #124	; (adr r3, 233a0 <main+0x258>)
   23324:	e9d3 2300 	ldrd	r2, r3, [r3]
   23328:	4640      	mov	r0, r8
   2332a:	4649      	mov	r1, r9
   2332c:	f7f5 fe82 	bl	19034 <__aeabi_dcmpgt>
   23330:	b950      	cbnz	r0, 23348 <main+0x200>
            g_audioReady = false;
   23332:	2300      	movs	r3, #0
   23334:	7023      	strb	r3, [r4, #0]
   23336:	e78a      	b.n	2324e <main+0x106>
            if (y>0.6) ns_lp_printf("Y");       // Strong Yes
   23338:	482b      	ldr	r0, [pc, #172]	; (233e8 <main+0x2a0>)
   2333a:	f00a fb05 	bl	2d948 <ns_lp_printf>
   2333e:	e7e4      	b.n	2330a <main+0x1c2>
            if (n>0.6) ns_lp_printf("N");       // Strong No
   23340:	482a      	ldr	r0, [pc, #168]	; (233ec <main+0x2a4>)
   23342:	f00a fb01 	bl	2d948 <ns_lp_printf>
   23346:	e7f4      	b.n	23332 <main+0x1ea>
            else if (n>0.4) ns_lp_printf("n");  // Probably No
   23348:	4829      	ldr	r0, [pc, #164]	; (233f0 <main+0x2a8>)
   2334a:	f00a fafd 	bl	2d948 <ns_lp_printf>
   2334e:	e7f0      	b.n	23332 <main+0x1ea>
            else if (y>0.4) ns_lp_printf("y");  // Probably Yes
   23350:	4828      	ldr	r0, [pc, #160]	; (233f4 <main+0x2ac>)
   23352:	f00a faf9 	bl	2d948 <ns_lp_printf>
   23356:	e7d8      	b.n	2330a <main+0x1c2>
    NS_TRY(ns_core_init(&ns_core_cfg), "Core init failed.\n");
   23358:	4827      	ldr	r0, [pc, #156]	; (233f8 <main+0x2b0>)
   2335a:	f00a faf5 	bl	2d948 <ns_lp_printf>
   2335e:	f7fd f949 	bl	205f4 <ns_core_fail_loop>
   23362:	e70e      	b.n	23182 <main+0x3a>
    NS_TRY(ns_audio_init(&audio_config), "Audio initialization Failed.\n");
   23364:	4825      	ldr	r0, [pc, #148]	; (233fc <main+0x2b4>)
   23366:	f00a faef 	bl	2d948 <ns_lp_printf>
   2336a:	f7fd f943 	bl	205f4 <ns_core_fail_loop>
   2336e:	e724      	b.n	231ba <main+0x72>
    NS_TRY(ns_peripheral_button_init(&button_config), "Button initialization failed.\n")
   23370:	4823      	ldr	r0, [pc, #140]	; (23400 <main+0x2b8>)
   23372:	f00a fae9 	bl	2d948 <ns_lp_printf>
   23376:	f7fd f93d 	bl	205f4 <ns_core_fail_loop>
   2337a:	e718      	b.n	231ae <main+0x66>
	NS_TRY(ns_timer_init(&ei_tickTimer), "Timer init failed.\n");
   2337c:	4821      	ldr	r0, [pc, #132]	; (23404 <main+0x2bc>)
   2337e:	f00a fae3 	bl	2d948 <ns_lp_printf>
   23382:	f7fd f937 	bl	205f4 <ns_core_fail_loop>
   23386:	e70c      	b.n	231a2 <main+0x5a>
    NS_TRY(ns_power_config(&ns_development_default), "Power Init Failed.\n");
   23388:	481f      	ldr	r0, [pc, #124]	; (23408 <main+0x2c0>)
   2338a:	f00a fadd 	bl	2d948 <ns_lp_printf>
   2338e:	f7fd f931 	bl	205f4 <ns_core_fail_loop>
   23392:	e6fc      	b.n	2318e <main+0x46>
   23394:	f3af 8000 	nop.w
   23398:	33333333 	.word	0x33333333
   2339c:	3fe33333 	.word	0x3fe33333
   233a0:	9999999a 	.word	0x9999999a
   233a4:	3fd99999 	.word	0x3fd99999
   233a8:	100188ac 	.word	0x100188ac
   233ac:	10018894 	.word	0x10018894
   233b0:	0003f608 	.word	0x0003f608
   233b4:	00041fac 	.word	0x00041fac
   233b8:	100040b4 	.word	0x100040b4
   233bc:	1000404c 	.word	0x1000404c
   233c0:	10004004 	.word	0x10004004
   233c4:	000207f5 	.word	0x000207f5
   233c8:	00020921 	.word	0x00020921
   233cc:	0002067d 	.word	0x0002067d
   233d0:	0003fe84 	.word	0x0003fe84
   233d4:	0003fed4 	.word	0x0003fed4
   233d8:	0003fef8 	.word	0x0003fef8
   233dc:	10010b30 	.word	0x10010b30
   233e0:	10012a74 	.word	0x10012a74
   233e4:	0003ecdc 	.word	0x0003ecdc
   233e8:	0003ff08 	.word	0x0003ff08
   233ec:	0003ff10 	.word	0x0003ff10
   233f0:	0003ff14 	.word	0x0003ff14
   233f4:	0003ff0c 	.word	0x0003ff0c
   233f8:	0003fe08 	.word	0x0003fe08
   233fc:	0003fe64 	.word	0x0003fe64
   23400:	0003fe44 	.word	0x0003fe44
   23404:	0003fe30 	.word	0x0003fe30
   23408:	0003fe1c 	.word	0x0003fe1c
   2340c:	10018890 	.word	0x10018890

00023410 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
   23410:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23414:	e9d0 8900 	ldrd	r8, r9, [r0]
   23418:	4692      	mov	sl, r2
	if (max_size() - size() < __n)
   2341a:	f06f 4460 	mvn.w	r4, #3758096384	; 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   2341e:	eba9 0208 	sub.w	r2, r9, r8
	if (max_size() - size() < __n)
   23422:	ebb4 0fa2 	cmp.w	r4, r2, asr #2
   23426:	d058      	beq.n	234da <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0xca>
   23428:	1093      	asrs	r3, r2, #2
   2342a:	2b01      	cmp	r3, #1
   2342c:	461a      	mov	r2, r3
   2342e:	bf38      	it	cc
   23430:	2201      	movcc	r2, #1
   23432:	189b      	adds	r3, r3, r2
   23434:	4606      	mov	r6, r0
   23436:	460f      	mov	r7, r1
   23438:	d24b      	bcs.n	234d2 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0xc2>
    { return __lhs.base() - __rhs.base(); }
   2343a:	eba1 0508 	sub.w	r5, r1, r8
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   2343e:	2b00      	cmp	r3, #0
   23440:	d13d      	bne.n	234be <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0xae>
   23442:	461c      	mov	r4, r3
   23444:	469b      	mov	fp, r3
   23446:	f8da 3000 	ldr.w	r3, [sl]
   2344a:	f84b 3005 	str.w	r3, [fp, r5]
      if (__count > 0)
   2344e:	2d00      	cmp	r5, #0
   23450:	dc24      	bgt.n	2349c <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0x8c>
      ptrdiff_t __count = __last - __first;
   23452:	eba9 0907 	sub.w	r9, r9, r7
	      ++__new_finish;
   23456:	3504      	adds	r5, #4
      if (__count > 0)
   23458:	f1b9 0f00 	cmp.w	r9, #0
   2345c:	445d      	add	r5, fp
   2345e:	dc13      	bgt.n	23488 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0x78>
      return __result + __count;
   23460:	444d      	add	r5, r9
	if (__p)
   23462:	f1b8 0f00 	cmp.w	r8, #0
   23466:	d104      	bne.n	23472 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0x62>
      this->_M_impl._M_finish = __new_finish;
   23468:	e9c6 b500 	strd	fp, r5, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   2346c:	60b4      	str	r4, [r6, #8]
    }
   2346e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    this->_M_impl._M_end_of_storage - __old_start);
   23472:	68b1      	ldr	r1, [r6, #8]
   23474:	eba1 0108 	sub.w	r1, r1, r8
	::operator delete(__p
   23478:	4640      	mov	r0, r8
   2347a:	f00c fa49 	bl	2f910 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
   2347e:	e9c6 b500 	strd	fp, r5, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   23482:	60b4      	str	r4, [r6, #8]
    }
   23484:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   23488:	4628      	mov	r0, r5
   2348a:	4639      	mov	r1, r7
   2348c:	464a      	mov	r2, r9
   2348e:	f7f4 feb7 	bl	18200 <memcpy>
      return __result + __count;
   23492:	444d      	add	r5, r9
   23494:	f1b8 0f00 	cmp.w	r8, #0
   23498:	d0e6      	beq.n	23468 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0x58>
   2349a:	e7ea      	b.n	23472 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0x62>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   2349c:	462a      	mov	r2, r5
      ptrdiff_t __count = __last - __first;
   2349e:	eba9 0907 	sub.w	r9, r9, r7
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   234a2:	4641      	mov	r1, r8
   234a4:	4658      	mov	r0, fp
   234a6:	f007 fc81 	bl	2adac <memmove>
	      ++__new_finish;
   234aa:	3504      	adds	r5, #4
      if (__count > 0)
   234ac:	f1b9 0f00 	cmp.w	r9, #0
   234b0:	445d      	add	r5, fp
   234b2:	dce9      	bgt.n	23488 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0x78>
		    this->_M_impl._M_end_of_storage - __old_start);
   234b4:	68b1      	ldr	r1, [r6, #8]
      return __result + __count;
   234b6:	444d      	add	r5, r9
   234b8:	eba1 0108 	sub.w	r1, r1, r8
      _M_deallocate(pointer __p, size_t __n)
   234bc:	e7dc      	b.n	23478 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0x68>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   234be:	42a3      	cmp	r3, r4
   234c0:	bf28      	it	cs
   234c2:	4623      	movcs	r3, r4
   234c4:	009c      	lsls	r4, r3, #2
   234c6:	4620      	mov	r0, r4
   234c8:	f00c fa1e 	bl	2f908 <_Znwj>
   234cc:	4683      	mov	fp, r0
      this->_M_impl._M_end_of_storage = __new_start + __len;
   234ce:	4404      	add	r4, r0
   234d0:	e7b9      	b.n	23446 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0x36>
   234d2:	4c03      	ldr	r4, [pc, #12]	; (234e0 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0xd0>)
   234d4:	eba1 0508 	sub.w	r5, r1, r8
      _M_allocate(size_t __n)
   234d8:	e7f5      	b.n	234c6 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0xb6>
	  __throw_length_error(__N(__s));
   234da:	4802      	ldr	r0, [pc, #8]	; (234e4 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0xd4>)
   234dc:	f013 fa76 	bl	369cc <_ZSt20__throw_length_errorPKc>
   234e0:	7ffffffc 	.word	0x7ffffffc
   234e4:	0003f9f4 	.word	0x0003f9f4

000234e8 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0>:
    static int stack_frames(stack_frames_info_t *info,
   234e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   234ea:	ed2d 8b04 	vpush	{d8-d9}
        if (!info->signal || !info->signal->get_data || info->signal->total_length == 0) {
   234ee:	6806      	ldr	r6, [r0, #0]
    static int stack_frames(stack_frames_info_t *info,
   234f0:	b085      	sub	sp, #20
        if (!info->signal || !info->signal->get_data || info->signal->total_length == 0) {
   234f2:	2e00      	cmp	r6, #0
   234f4:	f000 80b0 	beq.w	23658 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0x170>
   234f8:	68b3      	ldr	r3, [r6, #8]
   234fa:	2b00      	cmp	r3, #0
   234fc:	f000 80ac 	beq.w	23658 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0x170>
   23500:	6934      	ldr	r4, [r6, #16]
   23502:	2c00      	cmp	r4, #0
   23504:	f000 80a8 	beq.w	23658 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0x170>
        if (version == 1) {
   23508:	2901      	cmp	r1, #1
   2350a:	4605      	mov	r5, r0
   2350c:	eeb0 8a40 	vmov.f32	s16, s0
   23510:	eeb0 9a41 	vmov.f32	s18, s2
   23514:	f000 808f 	beq.w	23636 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0x14e>
            frame_sample_length = static_cast<int>(ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_length));
   23518:	ee60 9a20 	vmul.f32	s19, s0, s1
  { return __builtin_floorf(__x); }
   2351c:	eeb0 0a69 	vmov.f32	s0, s19
   23520:	f005 fa10 	bl	28944 <floorf>
        if (v > floor(v) && v - floor(v) < 0.001f) {
   23524:	eef4 9ac0 	vcmpe.f32	s19, s0
   23528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2352c:	dc65      	bgt.n	235fa <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0x112>
  { return __builtin_ceilf(__x); }
   2352e:	eeb0 0a69 	vmov.f32	s0, s19
   23532:	f005 f989 	bl	28848 <ceilf>
            frame_stride = ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_stride_arg);
   23536:	ee28 9a09 	vmul.f32	s18, s16, s18
            frame_sample_length = static_cast<int>(ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_length));
   2353a:	eefd 8ac0 	vcvt.s32.f32	s17, s0
  { return __builtin_floorf(__x); }
   2353e:	eeb0 0a49 	vmov.f32	s0, s18
   23542:	f005 f9ff 	bl	28944 <floorf>
        if (v > floor(v) && v - floor(v) < 0.001f) {
   23546:	eeb4 9ac0 	vcmpe.f32	s18, s0
   2354a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2354e:	eeb0 8a40 	vmov.f32	s16, s0
   23552:	dd5c      	ble.n	2360e <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0x126>
   23554:	ee79 7a40 	vsub.f32	s15, s18, s0
   23558:	ed9f 7a40 	vldr	s14, [pc, #256]	; 2365c <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0x174>
   2355c:	eef4 7ac7 	vcmpe.f32	s15, s14
   23560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   23564:	d553      	bpl.n	2360e <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0x126>
            length = (frame_sample_length - (int)frame_stride);
   23566:	eefd 7ac8 	vcvt.s32.f32	s15, s16
   2356a:	ee18 2a90 	vmov	r2, s17
   2356e:	ee17 3a90 	vmov	r3, s15
   23572:	1ad3      	subs	r3, r2, r3
                floor(static_cast<float>(length_signal - length) / frame_stride));
   23574:	1ae3      	subs	r3, r4, r3
   23576:	ee00 3a10 	vmov	s0, r3
   2357a:	eeb8 0a40 	vcvt.f32.u32	s0, s0
        info->frame_ixs.clear();
   2357e:	1d2f      	adds	r7, r5, #4
   23580:	ee80 0a08 	vdiv.f32	s0, s0, s16
   23584:	f005 f9de 	bl	28944 <floorf>
      { _M_erase_at_end(this->_M_impl._M_start); }
   23588:	686a      	ldr	r2, [r5, #4]
            numframes = static_cast<int>(
   2358a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
                (static_cast<float>(numframes - 1) * frame_stride + frame_sample_length));
   2358e:	eef8 7ae8 	vcvt.f32.s32	s15, s17
            numframes = static_cast<int>(
   23592:	ed8d 0a01 	vstr	s0, [sp, #4]
                (static_cast<float>(numframes - 1) * frame_stride + frame_sample_length));
   23596:	9b01      	ldr	r3, [sp, #4]
   23598:	3b01      	subs	r3, #1
   2359a:	ee07 3a10 	vmov	s14, r3
   2359e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   235a2:	eee8 7a07 	vfma.f32	s15, s16, s14
            len_sig = static_cast<int>(
   235a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   235aa:	edcd 7a02 	vstr	s15, [sp, #8]
            info->signal->total_length = static_cast<size_t>(len_sig);
   235ae:	9b02      	ldr	r3, [sp, #8]
   235b0:	6133      	str	r3, [r6, #16]
	if (size_type __n = this->_M_impl._M_finish - __pos)
   235b2:	68ab      	ldr	r3, [r5, #8]
   235b4:	429a      	cmp	r2, r3
        for (size_t ix = 0; ix < static_cast<uint32_t>(len_sig); ix += static_cast<size_t>(frame_stride)) {
   235b6:	9b02      	ldr	r3, [sp, #8]
	    this->_M_impl._M_finish = __pos;
   235b8:	bf18      	it	ne
   235ba:	60aa      	strne	r2, [r5, #8]
   235bc:	b1b3      	cbz	r3, 235ec <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0x104>
   235be:	2600      	movs	r6, #0
   235c0:	4634      	mov	r4, r6
            if (++frame_count > numframes) break;
   235c2:	9b01      	ldr	r3, [sp, #4]
   235c4:	3601      	adds	r6, #1
   235c6:	429e      	cmp	r6, r3
   235c8:	dc10      	bgt.n	235ec <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0x104>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   235ca:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
   235ce:	4291      	cmp	r1, r2
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   235d0:	460b      	mov	r3, r1
            info->frame_ixs.push_back(ix);
   235d2:	9403      	str	r4, [sp, #12]
   235d4:	d022      	beq.n	2361c <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0x134>
        for (size_t ix = 0; ix < static_cast<uint32_t>(len_sig); ix += static_cast<size_t>(frame_stride)) {
   235d6:	eefc 7ac8 	vcvt.u32.f32	s15, s16
   235da:	9902      	ldr	r1, [sp, #8]
   235dc:	f843 4b04 	str.w	r4, [r3], #4
   235e0:	ee17 2a90 	vmov	r2, s15
   235e4:	4414      	add	r4, r2
   235e6:	42a1      	cmp	r1, r4
	    ++this->_M_impl._M_finish;
   235e8:	60ab      	str	r3, [r5, #8]
   235ea:	d8ea      	bhi.n	235c2 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xda>
        info->frame_length = frame_sample_length;
   235ec:	edc5 8a04 	vstr	s17, [r5, #16]
        return EIDSP_OK;
   235f0:	2000      	movs	r0, #0
    }
   235f2:	b005      	add	sp, #20
   235f4:	ecbd 8b04 	vpop	{d8-d9}
   235f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (v > floor(v) && v - floor(v) < 0.001f) {
   235fa:	ee79 7ac0 	vsub.f32	s15, s19, s0
   235fe:	ed9f 7a17 	vldr	s14, [pc, #92]	; 2365c <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0x174>
   23602:	eef4 7ac7 	vcmpe.f32	s15, s14
   23606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2360a:	d494      	bmi.n	23536 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0x4e>
   2360c:	e78f      	b.n	2352e <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0x46>
  { return __builtin_ceilf(__x); }
   2360e:	eeb0 0a49 	vmov.f32	s0, s18
   23612:	f005 f919 	bl	28848 <ceilf>
   23616:	eeb0 8a40 	vmov.f32	s16, s0
   2361a:	e7a4      	b.n	23566 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0x7e>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   2361c:	aa03      	add	r2, sp, #12
   2361e:	4638      	mov	r0, r7
   23620:	f7ff fef6 	bl	23410 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_>
        for (size_t ix = 0; ix < static_cast<uint32_t>(len_sig); ix += static_cast<size_t>(frame_stride)) {
   23624:	eefc 7ac8 	vcvt.u32.f32	s15, s16
   23628:	9a02      	ldr	r2, [sp, #8]
   2362a:	ee17 3a90 	vmov	r3, s15
   2362e:	441c      	add	r4, r3
   23630:	42a2      	cmp	r2, r4
   23632:	d8c6      	bhi.n	235c2 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xda>
   23634:	e7da      	b.n	235ec <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0x104>
  { return __builtin_roundf(__x); }
   23636:	ee20 0a20 	vmul.f32	s0, s0, s1
   2363a:	f005 f9f3 	bl	28a24 <roundf>
   2363e:	eef0 8a40 	vmov.f32	s17, s0
   23642:	ee28 0a09 	vmul.f32	s0, s16, s18
   23646:	f005 f9ed 	bl	28a24 <roundf>
            frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
   2364a:	eefd 8ae8 	vcvt.s32.f32	s17, s17
   2364e:	eeb0 8a40 	vmov.f32	s16, s0
            length = frame_sample_length;
   23652:	ee18 3a90 	vmov	r3, s17
   23656:	e78d      	b.n	23574 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0x8c>
            EIDSP_ERR(EIDSP_SIGNAL_SIZE_MISMATCH);
   23658:	4801      	ldr	r0, [pc, #4]	; (23660 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0x178>)
   2365a:	e7ca      	b.n	235f2 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0x10a>
   2365c:	3a83126f 	.word	0x3a83126f
   23660:	fffffc15 	.word	0xfffffc15

00023664 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt>:
     * @param frame_stride (float): the step between successive frames in seconds.
     *     Default is 0.02s (means no overlap)
     * @param fft_length (int): number of FFT points. Default is 512.
     * @EIDSP_OK if OK
     */
    static int spectrogram(matrix_t *out_features,
   23664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23668:	ed2d 8b04 	vpush	{d8-d9}
   2366c:	b0a1      	sub	sp, #132	; 0x84
   2366e:	461d      	mov	r5, r3
   23670:	460c      	mov	r4, r1
   23672:	9306      	str	r3, [sp, #24]
   23674:	9004      	str	r0, [sp, #16]
        uint16_t version
        )
    {
        int ret = 0;

        stack_frames_info_t stack_frame_info = { 0 };
   23676:	2300      	movs	r3, #0
        stack_frame_info.signal = signal;

        ret = processing::stack_frames(
   23678:	4629      	mov	r1, r5
    static int spectrogram(matrix_t *out_features,
   2367a:	4606      	mov	r6, r0
        ret = processing::stack_frames(
   2367c:	a815      	add	r0, sp, #84	; 0x54
        stack_frame_info.signal = signal;
   2367e:	9415      	str	r4, [sp, #84]	; 0x54
	: _M_start(), _M_finish(), _M_end_of_storage()
   23680:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
    static int spectrogram(matrix_t *out_features,
   23684:	4690      	mov	r8, r2
        stack_frames_info_t stack_frame_info = { 0 };
   23686:	9319      	str	r3, [sp, #100]	; 0x64
   23688:	9318      	str	r3, [sp, #96]	; 0x60
        ret = processing::stack_frames(
   2368a:	f7ff ff2d 	bl	234e8 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   2368e:	9d16      	ldr	r5, [sp, #88]	; 0x58
            frame_length,
            frame_stride,
            false,
            version
        );
        if (ret != 0) {
   23690:	4604      	mov	r4, r0
   23692:	2800      	cmp	r0, #0
   23694:	f040 80a9 	bne.w	237ea <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x186>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   23698:	9b17      	ldr	r3, [sp, #92]	; 0x5c
            EIDSP_ERR(ret);
        }

        if (stack_frame_info.frame_ixs.size() != out_features->rows) {
   2369a:	4632      	mov	r2, r6
   2369c:	6876      	ldr	r6, [r6, #4]
   2369e:	1b5b      	subs	r3, r3, r5
   236a0:	ebb6 0fa3 	cmp.w	r6, r3, asr #2
   236a4:	f040 8214 	bne.w	23ad0 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x46c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

        uint16_t coefficients = fft_length / 2 + 1;

        if (coefficients != out_features->cols) {
   236a8:	6892      	ldr	r2, [r2, #8]
   236aa:	9205      	str	r2, [sp, #20]
        uint16_t coefficients = fft_length / 2 + 1;
   236ac:	ea4f 0358 	mov.w	r3, r8, lsr #1
   236b0:	930a      	str	r3, [sp, #40]	; 0x28
        if (coefficients != out_features->cols) {
   236b2:	3301      	adds	r3, #1
   236b4:	4293      	cmp	r3, r2
   236b6:	f040 820b 	bne.w	23ad0 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x46c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

        for (uint32_t i = 0; i < out_features->rows * out_features->cols; i++) {
   236ba:	fb02 f206 	mul.w	r2, r2, r6
   236be:	b12a      	cbz	r2, 236cc <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x68>
            *(out_features->buffer + i) = 0;
   236c0:	9b04      	ldr	r3, [sp, #16]
   236c2:	0092      	lsls	r2, r2, #2
   236c4:	6818      	ldr	r0, [r3, #0]
   236c6:	4621      	mov	r1, r4
   236c8:	f007 fbec 	bl	2aea4 <memset>
        }

        for (size_t ix = 0; ix < stack_frame_info.frame_ixs.size(); ix++) {
   236cc:	2e00      	cmp	r6, #0
   236ce:	f000 808c 	beq.w	237ea <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x186>
        size_t n_fft_out_features = (n_fft / 2) + 1;
   236d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
                output[ix] = rms_result * sqrt(2);
   236d4:	ed9f 8abf 	vldr	s16, [pc, #764]	; 239d4 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x370>
   236d8:	ed9f 9abf 	vldr	s18, [pc, #764]	; 239d8 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x374>
        int status = arm_mat_scale_f32(&mi, scale, &mo);
   236dc:	eddf 8abf 	vldr	s17, [pc, #764]	; 239dc <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x378>
        size_t n_fft_out_features = (n_fft / 2) + 1;
   236e0:	1c53      	adds	r3, r2, #1
            output[n_fft_out_features - 1] = fft_output.buffer[1];
   236e2:	0092      	lsls	r2, r2, #2
   236e4:	920b      	str	r2, [sp, #44]	; 0x2c
   236e6:	9a05      	ldr	r2, [sp, #20]
        size_t n_fft_out_features = (n_fft / 2) + 1;
   236e8:	9307      	str	r3, [sp, #28]
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   236ea:	ea4f 0188 	mov.w	r1, r8, lsl #2
        kiss_fft_cpx *fft_output = (kiss_fft_cpx*)ei_dsp_malloc(n_fft_out_features * sizeof(kiss_fft_cpx));
   236ee:	00db      	lsls	r3, r3, #3
   236f0:	930c      	str	r3, [sp, #48]	; 0x30
   236f2:	0092      	lsls	r2, r2, #2
   236f4:	2300      	movs	r3, #0
   236f6:	ee09 1a90 	vmov	s19, r1
   236fa:	9302      	str	r3, [sp, #8]
   236fc:	9203      	str	r2, [sp, #12]
   236fe:	469a      	mov	sl, r3
        if (r != EIDSP_OK) {
            return r;
        }

        for (size_t ix = 0; ix < out_buffer_size; ix++) {
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
   23700:	46c3      	mov	fp, r8
            // get signal data from the audio file
            EI_DSP_MATRIX(signal_frame, 1, stack_frame_info.frame_length);
   23702:	9c19      	ldr	r4, [sp, #100]	; 0x64
   23704:	2101      	movs	r1, #1
   23706:	00a0      	lsls	r0, r4, #2
   23708:	f002 fcec 	bl	260e4 <_Z9ei_callocjj>
   2370c:	4605      	mov	r5, r0
   2370e:	2800      	cmp	r0, #0
   23710:	f000 81d9 	beq.w	23ac6 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x462>
   23714:	e9dd 1316 	ldrd	r1, r3, [sp, #88]	; 0x58
   23718:	1a5b      	subs	r3, r3, r1
	if (__n >= this->size())
   2371a:	ebba 0fa3 	cmp.w	sl, r3, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   2371e:	ea4f 02a3 	mov.w	r2, r3, asr #2
	if (__n >= this->size())
   23722:	f080 81da 	bcs.w	23ada <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x476>

            // don't read outside of the audio buffer... we'll automatically zero pad then
            size_t signal_offset = stack_frame_info.frame_ixs.at(ix);
            size_t signal_length = stack_frame_info.frame_length;
            if (signal_offset + signal_length > stack_frame_info.signal->total_length) {
   23726:	9815      	ldr	r0, [sp, #84]	; 0x54
            size_t signal_length = stack_frame_info.frame_length;
   23728:	9b19      	ldr	r3, [sp, #100]	; 0x64
            size_t signal_offset = stack_frame_info.frame_ixs.at(ix);
   2372a:	f851 202a 	ldr.w	r2, [r1, sl, lsl #2]
            if (signal_offset + signal_length > stack_frame_info.signal->total_length) {
   2372e:	6906      	ldr	r6, [r0, #16]
   23730:	951a      	str	r5, [sp, #104]	; 0x68
   23732:	18d1      	adds	r1, r2, r3
   23734:	42b1      	cmp	r1, r6
                signal_length = signal_length -
   23736:	bf84      	itt	hi
   23738:	1b9b      	subhi	r3, r3, r6
   2373a:	185b      	addhi	r3, r3, r1
                    (stack_frame_info.signal->total_length - (signal_offset + signal_length));
            }

            ret = stack_frame_info.signal->get_data(
   2373c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
      if (_M_empty())
   23740:	6883      	ldr	r3, [r0, #8]
   23742:	2b00      	cmp	r3, #0
   23744:	f000 81cd 	beq.w	23ae2 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x47e>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   23748:	68c6      	ldr	r6, [r0, #12]
   2374a:	ab1a      	add	r3, sp, #104	; 0x68
   2374c:	aa13      	add	r2, sp, #76	; 0x4c
   2374e:	a912      	add	r1, sp, #72	; 0x48
   23750:	47b0      	blx	r6
                signal_offset,
                signal_length,
                signal_frame.buffer
            );
            if (ret != 0) {
   23752:	2800      	cmp	r0, #0
   23754:	f040 8085 	bne.w	23862 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x1fe>
                EIDSP_ERR(ret);
            }

            // normalize data (only when version is above 3)
            if (version >= 3) {
   23758:	9b06      	ldr	r3, [sp, #24]
   2375a:	2b02      	cmp	r3, #2
   2375c:	d851      	bhi.n	23802 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x19e>
            }

            ret = numpy::power_spectrum(
                signal_frame.buffer,
                stack_frame_info.frame_length,
                out_features->buffer + (ix * coefficients),
   2375e:	9b04      	ldr	r3, [sp, #16]
        if (output_size != n_fft_out_features) {
   23760:	9a07      	ldr	r2, [sp, #28]
   23762:	681f      	ldr	r7, [r3, #0]
   23764:	9b05      	ldr	r3, [sp, #20]
                stack_frame_info.frame_length,
   23766:	9e19      	ldr	r6, [sp, #100]	; 0x64
   23768:	4293      	cmp	r3, r2
   2376a:	f040 8149 	bne.w	23a00 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x39c>
   2376e:	ee19 0a90 	vmov	r0, s19
   23772:	2101      	movs	r1, #1
   23774:	f002 fcb6 	bl	260e4 <_Z9ei_callocjj>
        EI_DSP_MATRIX(fft_input, 1, n_fft);
   23778:	4604      	mov	r4, r0
   2377a:	2800      	cmp	r0, #0
   2377c:	d074      	beq.n	23868 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x204>
   2377e:	455e      	cmp	r6, fp
            ret = numpy::power_spectrum(
   23780:	9b02      	ldr	r3, [sp, #8]
   23782:	bf28      	it	cs
   23784:	465e      	movcs	r6, fp
   23786:	18fb      	adds	r3, r7, r3
        memcpy(fft_input.buffer, src, src_size * sizeof(float));
   23788:	00b7      	lsls	r7, r6, #2
   2378a:	463a      	mov	r2, r7
   2378c:	4629      	mov	r1, r5
   2378e:	9308      	str	r3, [sp, #32]
   23790:	f7f4 fd36 	bl	18200 <memcpy>
        memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(kiss_fft_scalar));
   23794:	ebab 0206 	sub.w	r2, fp, r6
   23798:	0092      	lsls	r2, r2, #2
   2379a:	19e0      	adds	r0, r4, r7
   2379c:	2100      	movs	r1, #0
   2379e:	f007 fb81 	bl	2aea4 <memset>
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
   237a2:	f1bb 0f20 	cmp.w	fp, #32
   237a6:	d062      	beq.n	2386e <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x20a>
   237a8:	f1bb 0f40 	cmp.w	fp, #64	; 0x40
   237ac:	d013      	beq.n	237d6 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x172>
   237ae:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
   237b2:	d010      	beq.n	237d6 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x172>
   237b4:	f5bb 7f80 	cmp.w	fp, #256	; 0x100
   237b8:	f000 80ed 	beq.w	23996 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x332>
   237bc:	f5bb 7f00 	cmp.w	fp, #512	; 0x200
   237c0:	d009      	beq.n	237d6 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x172>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
   237c2:	f5bb 6f80 	cmp.w	fp, #1024	; 0x400
   237c6:	d006      	beq.n	237d6 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x172>
   237c8:	f5bb 6f00 	cmp.w	fp, #2048	; 0x800
   237cc:	d003      	beq.n	237d6 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x172>
   237ce:	f5bb 5f80 	cmp.w	fp, #4096	; 0x1000
   237d2:	f040 8118 	bne.w	23a06 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x3a2>
                return EIDSP_FFT_TABLE_NOT_LOADED;
   237d6:	46a1      	mov	r9, r4
   237d8:	4c81      	ldr	r4, [pc, #516]	; (239e0 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x37c>)
   237da:	46ab      	mov	fp, r5
            ei_free(buffer);
   237dc:	4648      	mov	r0, r9
   237de:	f002 fc91 	bl	26104 <_Z7ei_freePv>
   237e2:	4658      	mov	r0, fp
   237e4:	f002 fc8e 	bl	26104 <_Z7ei_freePv>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   237e8:	9d16      	ldr	r5, [sp, #88]	; 0x58
	if (__p)
   237ea:	b125      	cbz	r5, 237f6 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x192>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   237ec:	9918      	ldr	r1, [sp, #96]	; 0x60
	::operator delete(__p
   237ee:	4628      	mov	r0, r5
   237f0:	1b49      	subs	r1, r1, r5
   237f2:	f00c f88d 	bl	2f910 <_ZdlPvj>
        }

        numpy::zero_handling(out_features);

        return EIDSP_OK;
    }
   237f6:	4620      	mov	r0, r4
   237f8:	b021      	add	sp, #132	; 0x84
   237fa:	ecbd 8b04 	vpop	{d8-d9}
   237fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                for (size_t ix = 0; ix < signal_frame.rows * signal_frame.cols; ix++) {
   23802:	2c00      	cmp	r4, #0
   23804:	d0ab      	beq.n	2375e <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0xfa>
                    if (signal_frame.buffer[ix] < -1.0f || signal_frame.buffer[ix] > 1.0f) {
   23806:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   2380a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   2380e:	462b      	mov	r3, r5
   23810:	e007      	b.n	23822 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x1be>
   23812:	eef4 7ae6 	vcmpe.f32	s15, s13
   23816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2381a:	dc09      	bgt.n	23830 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x1cc>
                for (size_t ix = 0; ix < signal_frame.rows * signal_frame.cols; ix++) {
   2381c:	3001      	adds	r0, #1
   2381e:	4284      	cmp	r4, r0
   23820:	d09d      	beq.n	2375e <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0xfa>
                    if (signal_frame.buffer[ix] < -1.0f || signal_frame.buffer[ix] > 1.0f) {
   23822:	ecf3 7a01 	vldmia	r3!, {s15}
   23826:	eef4 7ac7 	vcmpe.f32	s15, s14
   2382a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2382e:	d5f0      	bpl.n	23812 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x1ae>
        if (matrix->rows > EI_MAX_UINT16 || matrix->cols > EI_MAX_UINT16) {
   23830:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   23834:	f080 814e 	bcs.w	23ad4 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x470>
        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
   23838:	b2a4      	uxth	r4, r4
   2383a:	2301      	movs	r3, #1
        int status = arm_mat_scale_f32(&mi, scale, &mo);
   2383c:	eeb0 0a68 	vmov.f32	s0, s17
   23840:	a91a      	add	r1, sp, #104	; 0x68
   23842:	a813      	add	r0, sp, #76	; 0x4c
        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
   23844:	f8ad 404e 	strh.w	r4, [sp, #78]	; 0x4e
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
   23848:	f8ad 406a 	strh.w	r4, [sp, #106]	; 0x6a
        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
   2384c:	9514      	str	r5, [sp, #80]	; 0x50
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
   2384e:	951b      	str	r5, [sp, #108]	; 0x6c
        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
   23850:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
   23854:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
        int status = arm_mat_scale_f32(&mi, scale, &mo);
   23858:	f00f fdec 	bl	33434 <arm_mat_scale_f32>
        if (status != ARM_MATH_SUCCESS) {
   2385c:	2800      	cmp	r0, #0
   2385e:	f43f af7e 	beq.w	2375e <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0xfa>
   23862:	46ab      	mov	fp, r5
   23864:	4604      	mov	r4, r0
   23866:	e7bc      	b.n	237e2 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x17e>
        EI_DSP_MATRIX(fft_input, 1, n_fft);
   23868:	4c5e      	ldr	r4, [pc, #376]	; (239e4 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x380>)
   2386a:	46ab      	mov	fp, r5
   2386c:	e7b9      	b.n	237e2 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x17e>
                S->bitRevLength = arm_cfft_sR_f32_len16.bitRevLength;
   2386e:	4a5e      	ldr	r2, [pc, #376]	; (239e8 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x384>)
                rfft_instance->fftLenRFFT = 32U;
   23870:	f8ad b078 	strh.w	fp, [sp, #120]	; 0x78
                S->bitRevLength = arm_cfft_sR_f32_len16.bitRevLength;
   23874:	8993      	ldrh	r3, [r2, #12]
   23876:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
   2387a:	6893      	ldr	r3, [r2, #8]
                S->pTwiddle = arm_cfft_sR_f32_len16.pTwiddle;
   2387c:	931c      	str	r3, [sp, #112]	; 0x70
   2387e:	6853      	ldr	r3, [r2, #4]
   23880:	931b      	str	r3, [sp, #108]	; 0x6c
                rfft_instance->pTwiddleRFFT = (float32_t *) twiddleCoef_rfft_32;
   23882:	4b5a      	ldr	r3, [pc, #360]	; (239ec <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x388>)
   23884:	931f      	str	r3, [sp, #124]	; 0x7c
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   23886:	ee19 0a90 	vmov	r0, s19
                S->fftLen = 16U;
   2388a:	2310      	movs	r3, #16
   2388c:	2101      	movs	r1, #1
   2388e:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
   23892:	f002 fc27 	bl	260e4 <_Z9ei_callocjj>
            EI_DSP_MATRIX(fft_output, 1, n_fft);
   23896:	4680      	mov	r8, r0
   23898:	2800      	cmp	r0, #0
   2389a:	f000 8094 	beq.w	239c6 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x362>
            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
   2389e:	4621      	mov	r1, r4
   238a0:	2300      	movs	r3, #0
   238a2:	4642      	mov	r2, r8
   238a4:	a81a      	add	r0, sp, #104	; 0x68
   238a6:	f00f fd97 	bl	333d8 <arm_rfft_fast_f32>
            output[0] = fft_output.buffer[0];
   238aa:	9908      	ldr	r1, [sp, #32]
   238ac:	f8d8 3000 	ldr.w	r3, [r8]
   238b0:	600b      	str	r3, [r1, #0]
            output[n_fft_out_features - 1] = fft_output.buffer[1];
   238b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   238b4:	f8d8 2004 	ldr.w	r2, [r8, #4]
   238b8:	9409      	str	r4, [sp, #36]	; 0x24
   238ba:	f101 0904 	add.w	r9, r1, #4
   238be:	18cb      	adds	r3, r1, r3
   238c0:	464c      	mov	r4, r9
   238c2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   238c6:	601a      	str	r2, [r3, #0]
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
   238c8:	f108 0708 	add.w	r7, r8, #8
   238cc:	2601      	movs	r6, #1
                arm_rms_f32(fft_output.buffer + fft_output_buffer_ix, 2, &rms_result);
   238ce:	4638      	mov	r0, r7
   238d0:	aa13      	add	r2, sp, #76	; 0x4c
   238d2:	2102      	movs	r1, #2
   238d4:	f00f fe36 	bl	33544 <arm_rms_f32>
                output[ix] = rms_result * sqrt(2);
   238d8:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
   238dc:	3601      	adds	r6, #1
                output[ix] = rms_result * sqrt(2);
   238de:	ee67 7a88 	vmul.f32	s15, s15, s16
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
   238e2:	45b1      	cmp	r9, r6
   238e4:	f107 0708 	add.w	r7, r7, #8
                output[ix] = rms_result * sqrt(2);
   238e8:	ece4 7a01 	vstmia	r4!, {s15}
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
   238ec:	d1ef      	bne.n	238ce <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x26a>
   238ee:	9c09      	ldr	r4, [sp, #36]	; 0x24
            ei_free(buffer);
   238f0:	4640      	mov	r0, r8
   238f2:	f002 fc07 	bl	26104 <_Z7ei_freePv>
   238f6:	4620      	mov	r0, r4
   238f8:	f002 fc04 	bl	26104 <_Z7ei_freePv>
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
   238fc:	ee07 ba90 	vmov	s15, fp
   23900:	eef8 7a67 	vcvt.f32.u32	s15, s15
   23904:	9c08      	ldr	r4, [sp, #32]
   23906:	ee17 0a90 	vmov	r0, s15
   2390a:	f7f5 f8ab 	bl	18a64 <__aeabi_f2d>
   2390e:	460b      	mov	r3, r1
   23910:	4602      	mov	r2, r0
   23912:	4937      	ldr	r1, [pc, #220]	; (239f0 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x38c>)
   23914:	2000      	movs	r0, #0
   23916:	f7f5 fa27 	bl	18d68 <__aeabi_ddiv>
   2391a:	9b03      	ldr	r3, [sp, #12]
   2391c:	4606      	mov	r6, r0
   2391e:	460f      	mov	r7, r1
   23920:	eb04 0803 	add.w	r8, r4, r3
                (out_buffer[ix] * out_buffer[ix]);
   23924:	edd4 7a00 	vldr	s15, [r4]
   23928:	ee67 7aa7 	vmul.f32	s15, s15, s15
   2392c:	ee17 0a90 	vmov	r0, s15
   23930:	f7f5 f898 	bl	18a64 <__aeabi_f2d>
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
   23934:	4632      	mov	r2, r6
   23936:	463b      	mov	r3, r7
   23938:	f7f5 f8ec 	bl	18b14 <__aeabi_dmul>
   2393c:	f7f5 fbc2 	bl	190c4 <__aeabi_d2f>
   23940:	f844 0b04 	str.w	r0, [r4], #4
        for (size_t ix = 0; ix < out_buffer_size; ix++) {
   23944:	45a0      	cmp	r8, r4
   23946:	d1ed      	bne.n	23924 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x2c0>
   23948:	4628      	mov	r0, r5
   2394a:	f002 fbdb 	bl	26104 <_Z7ei_freePv>
        for (size_t ix = 0; ix < stack_frame_info.frame_ixs.size(); ix++) {
   2394e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   23952:	4413      	add	r3, r2
   23954:	9302      	str	r3, [sp, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   23956:	e9dd 5316 	ldrd	r5, r3, [sp, #88]	; 0x58
   2395a:	f10a 0a01 	add.w	sl, sl, #1
   2395e:	1b5b      	subs	r3, r3, r5
   23960:	ebba 0fa3 	cmp.w	sl, r3, asr #2
   23964:	f4ff aecd 	bcc.w	23702 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x9e>
     * @param input Matrix
     * @returns void
     */
    static void zero_handling(matrix_t *input)
    {
        zero_handling(input->buffer, input->rows * input->cols);
   23968:	9b04      	ldr	r3, [sp, #16]
   2396a:	e9d3 2401 	ldrd	r2, r4, [r3, #4]
   2396e:	fb04 f202 	mul.w	r2, r4, r2
   23972:	681b      	ldr	r3, [r3, #0]
        for (size_t ix = 0; ix < input_size; ix++) {
   23974:	b16a      	cbz	r2, 23992 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x32e>
                input[ix] = 1e-10;
   23976:	491f      	ldr	r1, [pc, #124]	; (239f4 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x390>)
   23978:	eb03 0282 	add.w	r2, r3, r2, lsl #2
            if (input[ix] == 0) {
   2397c:	ecf3 7a01 	vldmia	r3!, {s15}
   23980:	eef5 7a40 	vcmp.f32	s15, #0.0
   23984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                input[ix] = 1e-10;
   23988:	bf08      	it	eq
   2398a:	f843 1c04 	streq.w	r1, [r3, #-4]
        for (size_t ix = 0; ix < input_size; ix++) {
   2398e:	429a      	cmp	r2, r3
   23990:	d1f4      	bne.n	2397c <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x318>
        return EIDSP_OK;
   23992:	2400      	movs	r4, #0
   23994:	e729      	b.n	237ea <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x186>
                S->bitRevLength = arm_cfft_sR_f32_len128.bitRevLength;
   23996:	4b18      	ldr	r3, [pc, #96]	; (239f8 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x394>)
                rfft_instance->pTwiddleRFFT = (float32_t *) twiddleCoef_rfft_256;
   23998:	4a18      	ldr	r2, [pc, #96]	; (239fc <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x398>)
   2399a:	921f      	str	r2, [sp, #124]	; 0x7c
                S->bitRevLength = arm_cfft_sR_f32_len128.bitRevLength;
   2399c:	899a      	ldrh	r2, [r3, #12]
   2399e:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
   239a2:	689a      	ldr	r2, [r3, #8]
                S->pTwiddle = arm_cfft_sR_f32_len128.pTwiddle;
   239a4:	685b      	ldr	r3, [r3, #4]
   239a6:	931b      	str	r3, [sp, #108]	; 0x6c
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   239a8:	ee19 0a90 	vmov	r0, s19
                S->fftLen = 128U;
   239ac:	2380      	movs	r3, #128	; 0x80
   239ae:	2101      	movs	r1, #1
                rfft_instance->fftLenRFFT = 256U;
   239b0:	f8ad b078 	strh.w	fp, [sp, #120]	; 0x78
                S->pTwiddle = arm_cfft_sR_f32_len128.pTwiddle;
   239b4:	921c      	str	r2, [sp, #112]	; 0x70
                S->fftLen = 128U;
   239b6:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
   239ba:	f002 fb93 	bl	260e4 <_Z9ei_callocjj>
            EI_DSP_MATRIX(fft_output, 1, n_fft);
   239be:	4680      	mov	r8, r0
   239c0:	2800      	cmp	r0, #0
   239c2:	f47f af6c 	bne.w	2389e <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x23a>
            ei_free(buffer);
   239c6:	4620      	mov	r0, r4
   239c8:	f002 fb9c 	bl	26104 <_Z7ei_freePv>
   239cc:	4c05      	ldr	r4, [pc, #20]	; (239e4 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x380>)
   239ce:	46ab      	mov	fp, r5
        if (r != EIDSP_OK) {
   239d0:	e707      	b.n	237e2 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x17e>
   239d2:	bf00      	nop
   239d4:	3fb504f3 	.word	0x3fb504f3
   239d8:	00000000 	.word	0x00000000
   239dc:	38000000 	.word	0x38000000
   239e0:	fffffc08 	.word	0xfffffc08
   239e4:	fffffc16 	.word	0xfffffc16
   239e8:	0004314c 	.word	0x0004314c
   239ec:	000430bc 	.word	0x000430bc
   239f0:	3ff00000 	.word	0x3ff00000
   239f4:	2edbe6ff 	.word	0x2edbe6ff
   239f8:	0004313c 	.word	0x0004313c
   239fc:	00042cbc 	.word	0x00042cbc
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
   23a00:	4c41      	ldr	r4, [pc, #260]	; (23b08 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x4a4>)
   23a02:	46ab      	mov	fp, r5
   23a04:	e6ed      	b.n	237e2 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x17e>
        kiss_fft_cpx *fft_output = (kiss_fft_cpx*)ei_dsp_malloc(n_fft_out_features * sizeof(kiss_fft_cpx));
   23a06:	980c      	ldr	r0, [sp, #48]	; 0x30
   23a08:	f002 fb6a 	bl	260e0 <_Z9ei_mallocj>
        if (!fft_output) {
   23a0c:	9009      	str	r0, [sp, #36]	; 0x24
   23a0e:	2800      	cmp	r0, #0
   23a10:	d069      	beq.n	23ae6 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x482>
        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
   23a12:	ab1a      	add	r3, sp, #104	; 0x68
   23a14:	9300      	str	r3, [sp, #0]
   23a16:	2300      	movs	r3, #0
   23a18:	461a      	mov	r2, r3
   23a1a:	4619      	mov	r1, r3
   23a1c:	4658      	mov	r0, fp
   23a1e:	f004 fb3b 	bl	28098 <kiss_fftr_alloc>
        if (!cfg) {
   23a22:	900d      	str	r0, [sp, #52]	; 0x34
   23a24:	2800      	cmp	r0, #0
   23a26:	d062      	beq.n	23aee <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x48a>
        kiss_fftr(cfg, fft_input, fft_output);
   23a28:	9a09      	ldr	r2, [sp, #36]	; 0x24
   23a2a:	4621      	mov	r1, r4
   23a2c:	f004 fc14 	bl	28258 <kiss_fftr>
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
   23a30:	e9dd 3708 	ldrd	r3, r7, [sp, #32]
   23a34:	e9cd 540f 	strd	r5, r4, [sp, #60]	; 0x3c
   23a38:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   23a3c:	f8dd b01c 	ldr.w	fp, [sp, #28]
   23a40:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
   23a44:	2600      	movs	r6, #0
   23a46:	469a      	mov	sl, r3
      return pow(__type(__x), __type(__y));
   23a48:	6838      	ldr	r0, [r7, #0]
   23a4a:	f7f5 f80b 	bl	18a64 <__aeabi_f2d>
   23a4e:	4680      	mov	r8, r0
   23a50:	6878      	ldr	r0, [r7, #4]
   23a52:	4689      	mov	r9, r1
   23a54:	f7f5 f806 	bl	18a64 <__aeabi_f2d>
   23a58:	4602      	mov	r2, r0
   23a5a:	460b      	mov	r3, r1
   23a5c:	f7f5 f85a 	bl	18b14 <__aeabi_dmul>
   23a60:	4642      	mov	r2, r8
   23a62:	4604      	mov	r4, r0
   23a64:	460d      	mov	r5, r1
   23a66:	464b      	mov	r3, r9
   23a68:	4640      	mov	r0, r8
   23a6a:	4649      	mov	r1, r9
   23a6c:	f7f5 f852 	bl	18b14 <__aeabi_dmul>
   23a70:	4602      	mov	r2, r0
   23a72:	460b      	mov	r3, r1
            output[ix] = sqrt(pow(fft_output[ix].r, 2) + pow(fft_output[ix].i, 2));
   23a74:	4620      	mov	r0, r4
   23a76:	4629      	mov	r1, r5
   23a78:	f7f4 fe96 	bl	187a8 <__adddf3>
   23a7c:	f7f5 fb22 	bl	190c4 <__aeabi_d2f>
   23a80:	ee00 0a10 	vmov	s0, r0
    if (in >= 0.0f)
   23a84:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   23a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   23a8c:	db1d      	blt.n	23aca <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x466>
      *pOut = sqrtf(in);
   23a8e:	eeb5 0a40 	vcmp.f32	s0, #0.0
   23a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   23a96:	d431      	bmi.n	23afc <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x498>
   23a98:	eef1 7ac0 	vsqrt.f32	s15, s0
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
   23a9c:	3601      	adds	r6, #1
   23a9e:	45b3      	cmp	fp, r6
   23aa0:	f107 0708 	add.w	r7, r7, #8
            output[ix] = sqrt(pow(fft_output[ix].r, 2) + pow(fft_output[ix].i, 2));
   23aa4:	ecea 7a01 	vstmia	sl!, {s15}
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
   23aa8:	d8ce      	bhi.n	23a48 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x3e4>
        ei_dsp_free(cfg, kiss_fftr_mem_length);
   23aaa:	e9dd 4b10 	ldrd	r4, fp, [sp, #64]	; 0x40
   23aae:	980d      	ldr	r0, [sp, #52]	; 0x34
   23ab0:	e9dd a50e 	ldrd	sl, r5, [sp, #56]	; 0x38
   23ab4:	f002 fb26 	bl	26104 <_Z7ei_freePv>
        ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
   23ab8:	9809      	ldr	r0, [sp, #36]	; 0x24
   23aba:	f002 fb23 	bl	26104 <_Z7ei_freePv>
   23abe:	4620      	mov	r0, r4
   23ac0:	f002 fb20 	bl	26104 <_Z7ei_freePv>
        if (r != EIDSP_OK) {
   23ac4:	e71a      	b.n	238fc <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x298>
            EI_DSP_MATRIX(signal_frame, 1, stack_frame_info.frame_length);
   23ac6:	4c11      	ldr	r4, [pc, #68]	; (23b0c <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x4a8>)
   23ac8:	e68e      	b.n	237e8 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x184>
      *pOut = 0.0f;
   23aca:	eef0 7a49 	vmov.f32	s15, s18
   23ace:	e7e5      	b.n	23a9c <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x438>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
   23ad0:	4c0f      	ldr	r4, [pc, #60]	; (23b10 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x4ac>)
   23ad2:	e68a      	b.n	237ea <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x186>
            return EIDSP_NARROWING;
   23ad4:	4c0f      	ldr	r4, [pc, #60]	; (23b14 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x4b0>)
   23ad6:	46ab      	mov	fp, r5
                    if (ret != 0) {
   23ad8:	e683      	b.n	237e2 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x17e>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   23ada:	480f      	ldr	r0, [pc, #60]	; (23b18 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x4b4>)
   23adc:	4651      	mov	r1, sl
   23ade:	f012 ff8d 	bl	369fc <_ZSt24__throw_out_of_range_fmtPKcz>
	__throw_bad_function_call();
   23ae2:	f7fd fd1f 	bl	21524 <_ZSt25__throw_bad_function_callv>
   23ae6:	46a1      	mov	r9, r4
            if (ret != EIDSP_OK) {
   23ae8:	46ab      	mov	fp, r5
   23aea:	4c08      	ldr	r4, [pc, #32]	; (23b0c <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x4a8>)
   23aec:	e676      	b.n	237dc <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x178>
            ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
   23aee:	9809      	ldr	r0, [sp, #36]	; 0x24
   23af0:	46a1      	mov	r9, r4
   23af2:	f002 fb07 	bl	26104 <_Z7ei_freePv>
            if (ret != EIDSP_OK) {
   23af6:	4c05      	ldr	r4, [pc, #20]	; (23b0c <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x4a8>)
            ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
   23af8:	46ab      	mov	fp, r5
   23afa:	e66f      	b.n	237dc <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x178>
      *pOut = sqrtf(in);
   23afc:	f005 f862 	bl	28bc4 <sqrtf>
   23b00:	eef0 7a40 	vmov.f32	s15, s0
   23b04:	e7ca      	b.n	23a9c <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt+0x438>
   23b06:	bf00      	nop
   23b08:	fffffc11 	.word	0xfffffc11
   23b0c:	fffffc16 	.word	0xfffffc16
   23b10:	fffffc14 	.word	0xfffffc14
   23b14:	fffffc0c 	.word	0xfffffc0c
   23b18:	0003ff18 	.word	0x0003ff18
   23b1c:	00000000 	.word	0x00000000

00023b20 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:
__attribute__((unused)) int extract_spectrogram_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float sampling_frequency) {
   23b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (config.axes != 1) {
   23b24:	f8d2 b004 	ldr.w	fp, [r2, #4]
    ei_dsp_config_spectrogram_t config = *((ei_dsp_config_spectrogram_t*)config_ptr);
   23b28:	f8b2 a000 	ldrh.w	sl, [r2]
__attribute__((unused)) int extract_spectrogram_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float sampling_frequency) {
   23b2c:	ed2d 8b04 	vpush	{d8-d9}
    if (config.axes != 1) {
   23b30:	f1bb 0f01 	cmp.w	fp, #1
    ei_dsp_config_spectrogram_t config = *((ei_dsp_config_spectrogram_t*)config_ptr);
   23b34:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   23b38:	edd2 8a02 	vldr	s17, [r2, #8]
   23b3c:	ed92 9a03 	vldr	s18, [r2, #12]
__attribute__((unused)) int extract_spectrogram_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float sampling_frequency) {
   23b40:	b087      	sub	sp, #28
    if (config.axes != 1) {
   23b42:	f040 8121 	bne.w	23d88 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x268>
    if (signal->total_length == 0) {
   23b46:	4606      	mov	r6, r0
   23b48:	6900      	ldr	r0, [r0, #16]
   23b4a:	2800      	cmp	r0, #0
   23b4c:	f000 811a 	beq.w	23d84 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x264>
    const uint32_t frequency = static_cast<uint32_t>(sampling_frequency);
   23b50:	eeb0 8a40 	vmov.f32	s16, s0
        size_t signal_length,
        uint32_t sampling_frequency,
        float frame_length, float frame_stride, uint16_t num_filters,
        uint16_t version)
    {
        int32_t rows = processing::calculate_no_of_stack_frames(
   23b54:	eefc 7ac8 	vcvt.u32.f32	s15, s16
   23b58:	460c      	mov	r4, r1
   23b5a:	4652      	mov	r2, sl
   23b5c:	ee17 1a90 	vmov	r1, s15
   23b60:	eef0 0a49 	vmov.f32	s1, s18
   23b64:	eeb0 0a68 	vmov.f32	s0, s17
            signal->total_length, frequency, config.frame_length, config.frame_stride, config.fft_length / 2 + 1,
   23b68:	eb08 75d8 	add.w	r5, r8, r8, lsr #31
   23b6c:	f7fc ffc6 	bl	20afc <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt.constprop.0>
   23b70:	106d      	asrs	r5, r5, #1
    if (out_matrix_size.rows * out_matrix_size.cols > output_matrix->rows * output_matrix->cols) {
   23b72:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
            config.implementation_version);
   23b76:	3501      	adds	r5, #1
   23b78:	b2ad      	uxth	r5, r5
    if (out_matrix_size.rows * out_matrix_size.cols > output_matrix->rows * output_matrix->cols) {
   23b7a:	fb05 f700 	mul.w	r7, r5, r0
   23b7e:	4603      	mov	r3, r0
   23b80:	fb02 f001 	mul.w	r0, r2, r1
   23b84:	4287      	cmp	r7, r0
   23b86:	f200 8109 	bhi.w	23d9c <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x27c>
    output_matrix->rows = out_matrix_size.rows;
   23b8a:	e9c4 3501 	strd	r3, r5, [r4, #4]
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   23b8e:	0098      	lsls	r0, r3, #2
   23b90:	4659      	mov	r1, fp
   23b92:	f002 faa7 	bl	260e4 <_Z9ei_callocjj>
    EI_DSP_MATRIX(energy_matrix, output_matrix->rows, 1);
   23b96:	4605      	mov	r5, r0
   23b98:	2800      	cmp	r0, #0
   23b9a:	f000 80a6 	beq.w	23cea <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1ca>
    int ret = speechpy::feature::spectrogram(output_matrix, signal,
   23b9e:	4631      	mov	r1, r6
   23ba0:	eeb0 1a49 	vmov.f32	s2, s18
   23ba4:	eef0 0a68 	vmov.f32	s1, s17
   23ba8:	eeb0 0a48 	vmov.f32	s0, s16
   23bac:	fa1f f288 	uxth.w	r2, r8
   23bb0:	4653      	mov	r3, sl
   23bb2:	4620      	mov	r0, r4
   23bb4:	f7ff fd56 	bl	23664 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt>
    if (ret != EIDSP_OK) {
   23bb8:	4606      	mov	r6, r0
   23bba:	2800      	cmp	r0, #0
   23bbc:	f040 80b3 	bne.w	23d26 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x206>
    if (config.implementation_version < 3) {
   23bc0:	f1ba 0f02 	cmp.w	sl, #2
   23bc4:	d87f      	bhi.n	23cc6 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1a6>
        matrix_t temp_matrix(1, matrix->rows * matrix->cols, matrix->buffer);
   23bc6:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   23bca:	f8d4 a000 	ldr.w	sl, [r4]
   23bce:	fb02 f803 	mul.w	r8, r2, r3
   23bd2:	4659      	mov	r1, fp
        if (a_buffer) {
   23bd4:	f1ba 0f00 	cmp.w	sl, #0
   23bd8:	f000 80c6 	beq.w	23d68 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x248>
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   23bdc:	2004      	movs	r0, #4
   23bde:	f002 fa81 	bl	260e4 <_Z9ei_callocjj>
        if (!min_matrix.buffer) {
   23be2:	4681      	mov	r9, r0
   23be4:	2800      	cmp	r0, #0
   23be6:	f000 80d7 	beq.w	23d98 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x278>
   23bea:	9601      	str	r6, [sp, #4]
            arm_min_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &min, &ix);
   23bec:	ab04      	add	r3, sp, #16
   23bee:	aa02      	add	r2, sp, #8
   23bf0:	4641      	mov	r1, r8
   23bf2:	4650      	mov	r0, sl
   23bf4:	f00f fc82 	bl	334fc <arm_min_f32>
            output_matrix->buffer[row] = min;
   23bf8:	9b02      	ldr	r3, [sp, #8]
   23bfa:	f8c9 3000 	str.w	r3, [r9]
   23bfe:	2101      	movs	r1, #1
   23c00:	2004      	movs	r0, #4
   23c02:	f002 fa6f 	bl	260e4 <_Z9ei_callocjj>
        if (!max_matrix.buffer) {
   23c06:	4683      	mov	fp, r0
   23c08:	2800      	cmp	r0, #0
   23c0a:	f000 80a0 	beq.w	23d4e <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x22e>
            arm_max_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &max, &ix);
   23c0e:	ab04      	add	r3, sp, #16
   23c10:	aa02      	add	r2, sp, #8
   23c12:	4641      	mov	r1, r8
   23c14:	4650      	mov	r0, sl
   23c16:	f00f fc4d 	bl	334b4 <arm_max_f32>
            output_matrix->buffer[row] = max;
   23c1a:	eddd 7a02 	vldr	s15, [sp, #8]
   23c1e:	edcb 7a00 	vstr	s15, [fp]
        float min_max_diff = (max_matrix.buffer[0] - min_matrix.buffer[0]);
   23c22:	ed99 8a00 	vldr	s16, [r9]
   23c26:	ee77 8ac8 	vsub.f32	s17, s15, s16
        float row_scale = min_max_diff < 0.001 ? 1.0f : 1.0f / min_max_diff;
   23c2a:	ee18 0a90 	vmov	r0, s17
   23c2e:	f7f4 ff19 	bl	18a64 <__aeabi_f2d>
   23c32:	a36a      	add	r3, pc, #424	; (adr r3, 23ddc <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2bc>)
   23c34:	e9d3 2300 	ldrd	r2, r3, [r3]
   23c38:	f7f5 f9de 	bl	18ff8 <__aeabi_dcmplt>
   23c3c:	2800      	cmp	r0, #0
   23c3e:	d15b      	bne.n	23cf8 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1d8>
   23c40:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   23c44:	ee87 0aa8 	vdiv.f32	s0, s15, s17
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   23c48:	f1b8 0f00 	cmp.w	r8, #0
   23c4c:	d05a      	beq.n	23d04 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1e4>
   23c4e:	4653      	mov	r3, sl
   23c50:	eb0a 0288 	add.w	r2, sl, r8, lsl #2
            matrix->buffer[ix] -= subtraction;
   23c54:	edd3 7a00 	vldr	s15, [r3]
   23c58:	ee77 7ac8 	vsub.f32	s15, s15, s16
   23c5c:	ece3 7a01 	vstmia	r3!, {s15}
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   23c60:	4293      	cmp	r3, r2
   23c62:	d1f7      	bne.n	23c54 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x134>
        if (scale == 1.0f) return EIDSP_OK;
   23c64:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   23c68:	eeb4 0a67 	vcmp.f32	s0, s15
   23c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   23c70:	d04d      	beq.n	23d0e <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1ee>
        if (matrix->rows > EI_MAX_UINT16 || matrix->cols > EI_MAX_UINT16) {
   23c72:	f5b8 3f80 	cmp.w	r8, #65536	; 0x10000
   23c76:	f080 809d 	bcs.w	23db4 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x294>
        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
   23c7a:	fa1f f888 	uxth.w	r8, r8
   23c7e:	2301      	movs	r3, #1
        int status = arm_mat_scale_f32(&mi, scale, &mo);
   23c80:	a904      	add	r1, sp, #16
   23c82:	a802      	add	r0, sp, #8
        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
   23c84:	f8ad 800a 	strh.w	r8, [sp, #10]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
   23c88:	f8ad 8012 	strh.w	r8, [sp, #18]
        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
   23c8c:	f8cd a00c 	str.w	sl, [sp, #12]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
   23c90:	f8cd a014 	str.w	sl, [sp, #20]
        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
   23c94:	f8ad 3008 	strh.w	r3, [sp, #8]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
   23c98:	f8ad 3010 	strh.w	r3, [sp, #16]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
   23c9c:	f00f fbca 	bl	33434 <arm_mat_scale_f32>
        if (status != ARM_MATH_SUCCESS) {
   23ca0:	4680      	mov	r8, r0
   23ca2:	b3a0      	cbz	r0, 23d0e <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1ee>
            ei_free(buffer);
   23ca4:	4658      	mov	r0, fp
   23ca6:	f002 fa2d 	bl	26104 <_Z7ei_freePv>
   23caa:	4648      	mov	r0, r9
   23cac:	f002 fa2a 	bl	26104 <_Z7ei_freePv>
        if (buffer && buffer_managed_by_me) {
   23cb0:	f1ba 0f00 	cmp.w	sl, #0
   23cb4:	d005      	beq.n	23cc2 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1a2>
   23cb6:	9b01      	ldr	r3, [sp, #4]
   23cb8:	2b00      	cmp	r3, #0
   23cba:	d141      	bne.n	23d40 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x220>
        if (ret != EIDSP_OK) {
   23cbc:	f1b8 0f00 	cmp.w	r8, #0
   23cc0:	d007      	beq.n	23cd2 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b2>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
   23cc2:	4646      	mov	r6, r8
   23cc4:	e008      	b.n	23cd8 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b8>
        ret = speechpy::processing::spectrogram_normalization(output_matrix, config.noise_floor_db);
   23cc6:	4649      	mov	r1, r9
   23cc8:	4620      	mov	r0, r4
   23cca:	f7fc fd05 	bl	206d8 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi>
        if (ret != EIDSP_OK) {
   23cce:	4680      	mov	r8, r0
   23cd0:	bb70      	cbnz	r0, 23d30 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x210>
    output_matrix->rows = 1;
   23cd2:	2301      	movs	r3, #1
   23cd4:	e9c4 3701 	strd	r3, r7, [r4, #4]
            ei_free(buffer);
   23cd8:	4628      	mov	r0, r5
   23cda:	f002 fa13 	bl	26104 <_Z7ei_freePv>
}
   23cde:	4630      	mov	r0, r6
   23ce0:	b007      	add	sp, #28
   23ce2:	ecbd 8b04 	vpop	{d8-d9}
   23ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    EI_DSP_MATRIX(energy_matrix, output_matrix->rows, 1);
   23cea:	4e35      	ldr	r6, [pc, #212]	; (23dc0 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2a0>)
}
   23cec:	4630      	mov	r0, r6
   23cee:	b007      	add	sp, #28
   23cf0:	ecbd 8b04 	vpop	{d8-d9}
   23cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   23cf8:	f1b8 0f00 	cmp.w	r8, #0
   23cfc:	d007      	beq.n	23d0e <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1ee>
        float row_scale = min_max_diff < 0.001 ? 1.0f : 1.0f / min_max_diff;
   23cfe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   23d02:	e7a4      	b.n	23c4e <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x12e>
        if (scale == 1.0f) return EIDSP_OK;
   23d04:	eeb4 0a67 	vcmp.f32	s0, s15
   23d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   23d0c:	d1b5      	bne.n	23c7a <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x15a>
   23d0e:	4658      	mov	r0, fp
   23d10:	f002 f9f8 	bl	26104 <_Z7ei_freePv>
   23d14:	4648      	mov	r0, r9
   23d16:	f002 f9f5 	bl	26104 <_Z7ei_freePv>
        if (buffer && buffer_managed_by_me) {
   23d1a:	f1ba 0f00 	cmp.w	sl, #0
   23d1e:	d0d8      	beq.n	23cd2 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b2>
   23d20:	f04f 0800 	mov.w	r8, #0
   23d24:	e7c7      	b.n	23cb6 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x196>
        ei_printf("ERR: Spectrogram failed (%d)\n", ret);
   23d26:	4827      	ldr	r0, [pc, #156]	; (23dc4 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2a4>)
   23d28:	4631      	mov	r1, r6
   23d2a:	f002 f9bd 	bl	260a8 <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
   23d2e:	e7d3      	b.n	23cd8 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b8>
            ei_printf("ERR: normalization failed (%d)\n", ret);
   23d30:	4825      	ldr	r0, [pc, #148]	; (23dc8 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2a8>)
   23d32:	4641      	mov	r1, r8
   23d34:	f002 f9b8 	bl	260a8 <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
   23d38:	4646      	mov	r6, r8
   23d3a:	e7cd      	b.n	23cd8 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b8>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
   23d3c:	f8df 8080 	ldr.w	r8, [pc, #128]	; 23dc0 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2a0>
            ei_free(buffer);
   23d40:	4650      	mov	r0, sl
   23d42:	f002 f9df 	bl	26104 <_Z7ei_freePv>
        if (ret != EIDSP_OK) {
   23d46:	f1b8 0f00 	cmp.w	r8, #0
   23d4a:	d0c2      	beq.n	23cd2 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b2>
   23d4c:	e7b9      	b.n	23cc2 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1a2>
   23d4e:	4648      	mov	r0, r9
   23d50:	f002 f9d8 	bl	26104 <_Z7ei_freePv>
        if (buffer && buffer_managed_by_me) {
   23d54:	f1ba 0f00 	cmp.w	sl, #0
   23d58:	d01e      	beq.n	23d98 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x278>
   23d5a:	9b01      	ldr	r3, [sp, #4]
   23d5c:	2b00      	cmp	r3, #0
   23d5e:	d1ed      	bne.n	23d3c <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x21c>
   23d60:	f8df 805c 	ldr.w	r8, [pc, #92]	; 23dc0 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2a0>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
   23d64:	4646      	mov	r6, r8
   23d66:	e7b7      	b.n	23cd8 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b8>
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   23d68:	ea4f 0088 	mov.w	r0, r8, lsl #2
   23d6c:	f002 f9ba 	bl	260e4 <_Z9ei_callocjj>
   23d70:	4659      	mov	r1, fp
   23d72:	4682      	mov	sl, r0
   23d74:	2004      	movs	r0, #4
   23d76:	f002 f9b5 	bl	260e4 <_Z9ei_callocjj>
        if (!min_matrix.buffer) {
   23d7a:	4681      	mov	r9, r0
   23d7c:	b130      	cbz	r0, 23d8c <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x26c>
   23d7e:	f8cd b004 	str.w	fp, [sp, #4]
   23d82:	e733      	b.n	23bec <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xcc>
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
   23d84:	4e11      	ldr	r6, [pc, #68]	; (23dcc <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2ac>)
   23d86:	e7aa      	b.n	23cde <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1be>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
   23d88:	4e11      	ldr	r6, [pc, #68]	; (23dd0 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2b0>)
   23d8a:	e7a8      	b.n	23cde <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1be>
        if (buffer && buffer_managed_by_me) {
   23d8c:	f1ba 0f00 	cmp.w	sl, #0
   23d90:	d002      	beq.n	23d98 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x278>
            ei_free(buffer);
   23d92:	4650      	mov	r0, sl
   23d94:	f002 f9b6 	bl	26104 <_Z7ei_freePv>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
   23d98:	4e09      	ldr	r6, [pc, #36]	; (23dc0 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2a0>)
   23d9a:	e79d      	b.n	23cd8 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b8>
        ei_printf("out_matrix = %dx%d\n", (int)output_matrix->rows, (int)output_matrix->cols);
   23d9c:	480d      	ldr	r0, [pc, #52]	; (23dd4 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2b4>)
   23d9e:	9301      	str	r3, [sp, #4]
   23da0:	f002 f982 	bl	260a8 <_Z9ei_printfPKcz>
        ei_printf("calculated size = %dx%d\n", (int)out_matrix_size.rows, (int)out_matrix_size.cols);
   23da4:	9b01      	ldr	r3, [sp, #4]
   23da6:	480c      	ldr	r0, [pc, #48]	; (23dd8 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2b8>)
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
   23da8:	4e09      	ldr	r6, [pc, #36]	; (23dd0 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2b0>)
        ei_printf("calculated size = %dx%d\n", (int)out_matrix_size.rows, (int)out_matrix_size.cols);
   23daa:	462a      	mov	r2, r5
   23dac:	4619      	mov	r1, r3
   23dae:	f002 f97b 	bl	260a8 <_Z9ei_printfPKcz>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
   23db2:	e794      	b.n	23cde <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1be>
            return EIDSP_NARROWING;
   23db4:	f8df 802c 	ldr.w	r8, [pc, #44]	; 23de4 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2c4>
   23db8:	e774      	b.n	23ca4 <_ZN12_GLOBAL__N_128extract_spectrogram_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x184>
   23dba:	bf00      	nop
   23dbc:	f3af 8000 	nop.w
   23dc0:	fffffc16 	.word	0xfffffc16
   23dc4:	0003ff94 	.word	0x0003ff94
   23dc8:	0003fc38 	.word	0x0003fc38
   23dcc:	fffffc10 	.word	0xfffffc10
   23dd0:	fffffc14 	.word	0xfffffc14
   23dd4:	0003ff64 	.word	0x0003ff64
   23dd8:	0003ff78 	.word	0x0003ff78
   23ddc:	d2f1a9fc 	.word	0xd2f1a9fc
   23de0:	3f50624d 	.word	0x3f50624d
   23de4:	fffffc0c 	.word	0xfffffc0c

00023de8 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE>:
__attribute__((unused)) int extract_spectrogram_per_slice_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float sampling_frequency, matrix_size_t *matrix_size_out) {
   23de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23dec:	ed2d 8b06 	vpush	{d8-d10}
   23df0:	b0a1      	sub	sp, #132	; 0x84
    ei_dsp_config_spectrogram_t config = *((ei_dsp_config_spectrogram_t*)config_ptr);
   23df2:	8814      	ldrh	r4, [r2, #0]
__attribute__((unused)) int extract_spectrogram_per_slice_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float sampling_frequency, matrix_size_t *matrix_size_out) {
   23df4:	9309      	str	r3, [sp, #36]	; 0x24
    if (config.axes != 1) {
   23df6:	6853      	ldr	r3, [r2, #4]
    ei_dsp_config_spectrogram_t config = *((ei_dsp_config_spectrogram_t*)config_ptr);
   23df8:	edd2 8a02 	vldr	s17, [r2, #8]
   23dfc:	ed92 8a03 	vldr	s16, [r2, #12]
   23e00:	6912      	ldr	r2, [r2, #16]
   23e02:	9205      	str	r2, [sp, #20]
    if (config.axes != 1) {
   23e04:	2b01      	cmp	r3, #1
   23e06:	f040 830d 	bne.w	24424 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x63c>
    if (signal->total_length == 0) {
   23e0a:	6903      	ldr	r3, [r0, #16]
   23e0c:	4681      	mov	r9, r0
   23e0e:	2b00      	cmp	r3, #0
   23e10:	f000 8318 	beq.w	24444 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x65c>
    const uint32_t frequency = static_cast<uint32_t>(sampling_frequency);
   23e14:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    if(config.implementation_version < 2) {
   23e18:	2c01      	cmp	r4, #1
   23e1a:	ee0a 4a10 	vmov	s20, r4
   23e1e:	4688      	mov	r8, r1
    const uint32_t frequency = static_cast<uint32_t>(sampling_frequency);
   23e20:	eef0 aa67 	vmov.f32	s21, s15
    if(config.implementation_version < 2) {
   23e24:	f240 829a 	bls.w	2435c <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x574>
            signal->total_length += (size_t)(config.frame_length * (float)frequency);
   23e28:	eeb8 9a67 	vcvt.f32.u32	s18, s15
   23e2c:	ee68 7a89 	vmul.f32	s15, s17, s18
   23e30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   23e34:	ee17 6a90 	vmov	r6, s15
    const size_t frame_stride_values = frequency * config.frame_stride;
   23e38:	ee68 7a09 	vmul.f32	s15, s16, s18
   23e3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    if (frame_overlap_values < 0) {
   23e40:	ee17 3a90 	vmov	r3, s15
   23e44:	1af3      	subs	r3, r6, r3
    const size_t frame_stride_values = frequency * config.frame_stride;
   23e46:	edcd 7a02 	vstr	s15, [sp, #8]
    if (frame_overlap_values < 0) {
   23e4a:	930c      	str	r3, [sp, #48]	; 0x30
   23e4c:	f100 8309 	bmi.w	24462 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x67a>
    if (frame_length_values > signal->total_length) {
   23e50:	f8d9 2010 	ldr.w	r2, [r9, #16]
   23e54:	42b2      	cmp	r2, r6
   23e56:	f0c0 82f7 	bcc.w	24448 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x660>
    if (ei_dsp_cont_current_frame && ei_dsp_cont_current_frame_size != frame_length_values) {
   23e5a:	f8df b278 	ldr.w	fp, [pc, #632]	; 240d4 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2ec>
   23e5e:	f8db 0000 	ldr.w	r0, [fp]
   23e62:	2800      	cmp	r0, #0
   23e64:	f000 8257 	beq.w	24316 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x52e>
   23e68:	4b95      	ldr	r3, [pc, #596]	; (240c0 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2d8>)
   23e6a:	681b      	ldr	r3, [r3, #0]
   23e6c:	42b3      	cmp	r3, r6
   23e6e:	f040 824d 	bne.w	2430c <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x524>
    if (ei_dsp_cont_current_frame_ix > (int)ei_dsp_cont_current_frame_size) {
   23e72:	f8df a264 	ldr.w	sl, [pc, #612]	; 240d8 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2f0>
    matrix_size_out->rows = 0;
   23e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
   23e78:	2100      	movs	r1, #0
    matrix_size_out->cols = 0;
   23e7a:	e9c3 1100 	strd	r1, r1, [r3]
    if (ei_dsp_cont_current_frame_ix > (int)ei_dsp_cont_current_frame_size) {
   23e7e:	f8da 1000 	ldr.w	r1, [sl]
   23e82:	428e      	cmp	r6, r1
   23e84:	f2c0 82e6 	blt.w	24454 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x66c>
    while (ei_dsp_cont_current_frame_ix > 0) {
   23e88:	2900      	cmp	r1, #0
   23e8a:	f340 8130 	ble.w	240ee <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x306>
            signal->total_length, frequency, config->frame_length, config->frame_stride, config->fft_length / 2 + 1,
   23e8e:	9b05      	ldr	r3, [sp, #20]
   23e90:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   23e94:	105b      	asrs	r3, r3, #1
            config->implementation_version);
   23e96:	3301      	adds	r3, #1
            version);
        int32_t cols = num_filters;

        matrix_size_t size_matrix;
        size_matrix.rows = (uint32_t)rows;
        size_matrix.cols = (uint32_t)cols;
   23e98:	b29b      	uxth	r3, r3
   23e9a:	9301      	str	r3, [sp, #4]
            numpy::roll(ei_dsp_cont_current_frame, frame_length_values, -frame_stride_values);
   23e9c:	9b02      	ldr	r3, [sp, #8]
   23e9e:	425b      	negs	r3, r3
   23ea0:	461a      	mov	r2, r3
   23ea2:	930b      	str	r3, [sp, #44]	; 0x2c
        EI_DSP_MATRIX(shift_matrix, 1, shift);
   23ea4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   23ea6:	ea13 0322 	ands.w	r3, r3, r2, asr #32
   23eaa:	bf38      	it	cc
   23eac:	4613      	movcc	r3, r2
        memcpy(shift_matrix.buffer, input_array + input_array_size - shift, shift * sizeof(float));
   23eae:	1af2      	subs	r2, r6, r3
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   23eb0:	009b      	lsls	r3, r3, #2
   23eb2:	930a      	str	r3, [sp, #40]	; 0x28
   23eb4:	0093      	lsls	r3, r2, #2
   23eb6:	930d      	str	r3, [sp, #52]	; 0x34
   23eb8:	4653      	mov	r3, sl
   23eba:	46ca      	mov	sl, r9
   23ebc:	46c1      	mov	r9, r8
   23ebe:	4698      	mov	r8, r3
   23ec0:	e014      	b.n	23eec <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x104>
        ei_dsp_cont_current_frame_ix -= frame_stride_values;
   23ec2:	f8d8 1000 	ldr.w	r1, [r8]
   23ec6:	9b02      	ldr	r3, [sp, #8]
   23ec8:	1ac9      	subs	r1, r1, r3
      if (_M_manager)
   23eca:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   23ecc:	f8c8 1000 	str.w	r1, [r8]
   23ed0:	2b00      	cmp	r3, #0
   23ed2:	f000 8103 	beq.w	240dc <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2f4>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   23ed6:	4639      	mov	r1, r7
   23ed8:	2203      	movs	r2, #3
   23eda:	4638      	mov	r0, r7
   23edc:	4798      	blx	r3
    while (ei_dsp_cont_current_frame_ix > 0) {
   23ede:	f8d8 1000 	ldr.w	r1, [r8]
   23ee2:	2900      	cmp	r1, #0
   23ee4:	f340 80fd 	ble.w	240e2 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2fa>
        x = signal->get_data(0, frame_length_values - ei_dsp_cont_current_frame_ix, ei_dsp_cont_current_frame + ei_dsp_cont_current_frame_ix);
   23ee8:	f8db 0000 	ldr.w	r0, [fp]
   23eec:	2300      	movs	r3, #0
   23eee:	930e      	str	r3, [sp, #56]	; 0x38
      if (_M_empty())
   23ef0:	f8da 3008 	ldr.w	r3, [sl, #8]
   23ef4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   23ef8:	1a71      	subs	r1, r6, r1
   23efa:	9010      	str	r0, [sp, #64]	; 0x40
   23efc:	910f      	str	r1, [sp, #60]	; 0x3c
   23efe:	2b00      	cmp	r3, #0
   23f00:	f000 82ad 	beq.w	2445e <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x676>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   23f04:	f8da 400c 	ldr.w	r4, [sl, #12]
   23f08:	ab10      	add	r3, sp, #64	; 0x40
   23f0a:	aa0f      	add	r2, sp, #60	; 0x3c
   23f0c:	a90e      	add	r1, sp, #56	; 0x38
   23f0e:	4650      	mov	r0, sl
   23f10:	47a0      	blx	r4
        if (x != EIDSP_OK) {
   23f12:	2800      	cmp	r0, #0
   23f14:	f040 8232 	bne.w	2437c <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x594>
   23f18:	4b6a      	ldr	r3, [pc, #424]	; (240c4 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2dc>)
   23f1a:	931a      	str	r3, [sp, #104]	; 0x68
   23f1c:	4b6a      	ldr	r3, [pc, #424]	; (240c8 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2e0>)
   23f1e:	931b      	str	r3, [sp, #108]	; 0x6c
        x = numpy::signal_from_buffer(ei_dsp_cont_current_frame, frame_length_values, &frame_signal);
   23f20:	f8db 3000 	ldr.w	r3, [fp]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   23f24:	9314      	str	r3, [sp, #80]	; 0x50
   23f26:	ab14      	add	r3, sp, #80	; 0x50
   23f28:	4619      	mov	r1, r3
   23f2a:	c903      	ldmia	r1, {r0, r1}
   23f2c:	9304      	str	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   23f2e:	af18      	add	r7, sp, #96	; 0x60
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   23f30:	ab12      	add	r3, sp, #72	; 0x48
   23f32:	e883 0003 	stmia.w	r3, {r0, r1}
        int32_t rows = processing::calculate_no_of_stack_frames(
   23f36:	ee1a 2a10 	vmov	r2, s20
        signal->total_length = data_size;
   23f3a:	961c      	str	r6, [sp, #112]	; 0x70
   23f3c:	eef0 0a48 	vmov.f32	s1, s16
      __b = _GLIBCXX_MOVE(__tmp);
   23f40:	e887 0003 	stmia.w	r7, {r0, r1}
   23f44:	eeb0 0a68 	vmov.f32	s0, s17
   23f48:	ee1a 1a90 	vmov	r1, s21
   23f4c:	4630      	mov	r0, r6
   23f4e:	f7fc fdd5 	bl	20afc <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt.constprop.0>
    x = numpy::roll(output_matrix->buffer, output_matrix->rows * output_matrix->cols,
   23f52:	e9d9 4301 	ldrd	r4, r3, [r9, #4]
        -(out_matrix_size.rows * out_matrix_size.cols));
   23f56:	9a01      	ldr	r2, [sp, #4]
    x = numpy::roll(output_matrix->buffer, output_matrix->rows * output_matrix->cols,
   23f58:	f8d9 5000 	ldr.w	r5, [r9]
   23f5c:	9003      	str	r0, [sp, #12]
   23f5e:	fb03 f404 	mul.w	r4, r3, r4
        -(out_matrix_size.rows * out_matrix_size.cols));
   23f62:	4603      	mov	r3, r0
   23f64:	fb02 f303 	mul.w	r3, r2, r3
   23f68:	425a      	negs	r2, r3
        if (shift < 0) {
   23f6a:	2a00      	cmp	r2, #0
            shift = input_array_size + shift;
   23f6c:	bfb8      	it	lt
   23f6e:	1ae2      	sublt	r2, r4, r3
        if (shift == 0) {
   23f70:	b35a      	cbz	r2, 23fca <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x1e2>
   23f72:	0090      	lsls	r0, r2, #2
   23f74:	2101      	movs	r1, #1
   23f76:	ee09 0a90 	vmov	s19, r0
   23f7a:	9308      	str	r3, [sp, #32]
   23f7c:	9207      	str	r2, [sp, #28]
   23f7e:	f002 f8b1 	bl	260e4 <_Z9ei_callocjj>
        EI_DSP_MATRIX(shift_matrix, 1, shift);
   23f82:	9006      	str	r0, [sp, #24]
   23f84:	2800      	cmp	r0, #0
   23f86:	d07d      	beq.n	24084 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x29c>
        memcpy(shift_matrix.buffer, input_array + input_array_size - shift, shift * sizeof(float));
   23f88:	9a07      	ldr	r2, [sp, #28]
   23f8a:	1aa4      	subs	r4, r4, r2
   23f8c:	eb05 0184 	add.w	r1, r5, r4, lsl #2
   23f90:	ee19 2a90 	vmov	r2, s19
   23f94:	00a4      	lsls	r4, r4, #2
   23f96:	f7f4 f933 	bl	18200 <memcpy>
        memmove(input_array + shift, input_array, (input_array_size - shift) * sizeof(float));
   23f9a:	4622      	mov	r2, r4
   23f9c:	ee19 4a90 	vmov	r4, s19
   23fa0:	4629      	mov	r1, r5
   23fa2:	1928      	adds	r0, r5, r4
   23fa4:	f006 ff02 	bl	2adac <memmove>
        memcpy(input_array, shift_matrix.buffer, shift * sizeof(float));
   23fa8:	9c06      	ldr	r4, [sp, #24]
   23faa:	ee19 2a90 	vmov	r2, s19
   23fae:	4621      	mov	r1, r4
   23fb0:	4628      	mov	r0, r5
   23fb2:	f7f4 f925 	bl	18200 <memcpy>
            ei_free(buffer);
   23fb6:	4620      	mov	r0, r4
   23fb8:	f002 f8a4 	bl	26104 <_Z7ei_freePv>
    size_t output_matrix_offset = (output_matrix->rows * output_matrix->cols) -
   23fbc:	e9d9 2401 	ldrd	r2, r4, [r9, #4]
    matrix_t output_matrix_slice(out_matrix_size.rows, out_matrix_size.cols, output_matrix->buffer + output_matrix_offset);
   23fc0:	f8d9 5000 	ldr.w	r5, [r9]
   23fc4:	9b08      	ldr	r3, [sp, #32]
    size_t output_matrix_offset = (output_matrix->rows * output_matrix->cols) -
   23fc6:	fb02 f404 	mul.w	r4, r2, r4
   23fca:	1ae4      	subs	r4, r4, r3
        if (a_buffer) {
   23fcc:	eb15 0584 	adds.w	r5, r5, r4, lsl #2
   23fd0:	f000 8193 	beq.w	242fa <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x512>
            buffer_managed_by_me = false;
   23fd4:	f04f 0300 	mov.w	r3, #0
            buffer = a_buffer;
   23fd8:	9514      	str	r5, [sp, #80]	; 0x50
            buffer_managed_by_me = false;
   23fda:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
        rows = n_rows;
   23fde:	e9dd 3003 	ldrd	r3, r0, [sp, #12]
   23fe2:	9315      	str	r3, [sp, #84]	; 0x54
        cols = n_cols;
   23fe4:	9b01      	ldr	r3, [sp, #4]
   23fe6:	9316      	str	r3, [sp, #88]	; 0x58
    int ret = speechpy::feature::spectrogram(&output_matrix_slice, signal,
   23fe8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   23fec:	ee1a 3a10 	vmov	r3, s20
   23ff0:	eeb0 1a48 	vmov.f32	s2, s16
   23ff4:	eef0 0a68 	vmov.f32	s1, s17
   23ff8:	eeb0 0a49 	vmov.f32	s0, s18
   23ffc:	4639      	mov	r1, r7
   23ffe:	f7ff fb31 	bl	23664 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt>
    if (ret != EIDSP_OK) {
   24002:	2800      	cmp	r0, #0
   24004:	f040 8168 	bne.w	242d8 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x4f0>
    matrix_size_out->rows += out_matrix_size.rows;
   24008:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2400a:	9a03      	ldr	r2, [sp, #12]
   2400c:	6818      	ldr	r0, [r3, #0]
   2400e:	4410      	add	r0, r2
    if (out_matrix_size.cols > 0) {
   24010:	9a01      	ldr	r2, [sp, #4]
    matrix_size_out->rows += out_matrix_size.rows;
   24012:	6018      	str	r0, [r3, #0]
    if (out_matrix_size.cols > 0) {
   24014:	2a00      	cmp	r2, #0
   24016:	f000 814c 	beq.w	242b2 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x4ca>
        if (buffer && buffer_managed_by_me) {
   2401a:	9814      	ldr	r0, [sp, #80]	; 0x50
        matrix_size_out->cols = out_matrix_size.cols;
   2401c:	605a      	str	r2, [r3, #4]
   2401e:	b120      	cbz	r0, 2402a <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x242>
   24020:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
   24024:	2b00      	cmp	r3, #0
   24026:	f040 814d 	bne.w	242c4 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x4dc>
        if (frame_stride_values > 0) {
   2402a:	9b02      	ldr	r3, [sp, #8]
   2402c:	2b00      	cmp	r3, #0
   2402e:	f43f af48 	beq.w	23ec2 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0xda>
        if (shift < 0) {
   24032:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   24034:	2b00      	cmp	r3, #0
   24036:	f2c0 8148 	blt.w	242ca <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x4e2>
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   2403a:	eddd 9a0a 	vldr	s19, [sp, #40]	; 0x28
            numpy::roll(ei_dsp_cont_current_frame, frame_length_values, -frame_stride_values);
   2403e:	f8db 5000 	ldr.w	r5, [fp]
   24042:	ee19 0a90 	vmov	r0, s19
   24046:	2101      	movs	r1, #1
   24048:	f002 f84c 	bl	260e4 <_Z9ei_callocjj>
        EI_DSP_MATRIX(shift_matrix, 1, shift);
   2404c:	4604      	mov	r4, r0
   2404e:	2800      	cmp	r0, #0
   24050:	f43f af37 	beq.w	23ec2 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0xda>
        memcpy(shift_matrix.buffer, input_array + input_array_size - shift, shift * sizeof(float));
   24054:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   24056:	ee19 2a90 	vmov	r2, s19
   2405a:	18e9      	adds	r1, r5, r3
   2405c:	f7f4 f8d0 	bl	18200 <memcpy>
        memmove(input_array + shift, input_array, (input_array_size - shift) * sizeof(float));
   24060:	ee19 3a90 	vmov	r3, s19
   24064:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   24066:	edcd 9a0a 	vstr	s19, [sp, #40]	; 0x28
   2406a:	4629      	mov	r1, r5
   2406c:	18e8      	adds	r0, r5, r3
   2406e:	f006 fe9d 	bl	2adac <memmove>
        memcpy(input_array, shift_matrix.buffer, shift * sizeof(float));
   24072:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   24074:	4621      	mov	r1, r4
   24076:	4628      	mov	r0, r5
   24078:	f7f4 f8c2 	bl	18200 <memcpy>
            ei_free(buffer);
   2407c:	4620      	mov	r0, r4
   2407e:	f002 f841 	bl	26104 <_Z7ei_freePv>
   24082:	e71e      	b.n	23ec2 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0xda>
        if (preemphasis) {
   24084:	4b11      	ldr	r3, [pc, #68]	; (240cc <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2e4>)
   24086:	681c      	ldr	r4, [r3, #0]
   24088:	2c00      	cmp	r4, #0
   2408a:	f000 8123 	beq.w	242d4 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x4ec>
            if (_prev_buffer) {
   2408e:	68e0      	ldr	r0, [r4, #12]
   24090:	b108      	cbz	r0, 24096 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2ae>
                ei_dsp_free(_prev_buffer, _shift * sizeof(float));
   24092:	f002 f837 	bl	26104 <_Z7ei_freePv>
            if (_end_of_signal_buffer) {
   24096:	6920      	ldr	r0, [r4, #16]
   24098:	b108      	cbz	r0, 2409e <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2b6>
                ei_dsp_free(_end_of_signal_buffer, _shift * sizeof(float));
   2409a:	f002 f833 	bl	26104 <_Z7ei_freePv>
            delete preemphasis;
   2409e:	4620      	mov	r0, r4
   240a0:	211c      	movs	r1, #28
   240a2:	f00b fc35 	bl	2f910 <_ZdlPvj>
   240a6:	4c0a      	ldr	r4, [pc, #40]	; (240d0 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2e8>)
      if (_M_manager)
   240a8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   240aa:	b11b      	cbz	r3, 240b4 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2cc>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   240ac:	2203      	movs	r2, #3
   240ae:	4639      	mov	r1, r7
   240b0:	4638      	mov	r0, r7
   240b2:	4798      	blx	r3
}
   240b4:	4620      	mov	r0, r4
   240b6:	b021      	add	sp, #132	; 0x84
   240b8:	ecbd 8b06 	vpop	{d8-d10}
   240bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   240c0:	10018858 	.word	0x10018858
   240c4:	000208d9 	.word	0x000208d9
   240c8:	000206a9 	.word	0x000206a9
   240cc:	1001884c 	.word	0x1001884c
   240d0:	fffffc16 	.word	0xfffffc16
   240d4:	10018850 	.word	0x10018850
   240d8:	10018854 	.word	0x10018854
    while (ei_dsp_cont_current_frame_ix > 0) {
   240dc:	2900      	cmp	r1, #0
   240de:	f73f af03 	bgt.w	23ee8 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x100>
   240e2:	4643      	mov	r3, r8
   240e4:	46c8      	mov	r8, r9
   240e6:	46d1      	mov	r9, sl
   240e8:	469a      	mov	sl, r3
   240ea:	f8d9 2010 	ldr.w	r2, [r9, #16]
    if (ei_dsp_cont_current_frame_ix < 0) {
   240ee:	2900      	cmp	r1, #0
   240f0:	f000 8128 	beq.w	24344 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x55c>
        ei_dsp_cont_current_frame_ix = 0;
   240f4:	2300      	movs	r3, #0
   240f6:	f8ca 3000 	str.w	r3, [sl]
        offset_in_signal = -ei_dsp_cont_current_frame_ix;
   240fa:	424b      	negs	r3, r1
    if (offset_in_signal >= signal->total_length) {
   240fc:	429a      	cmp	r2, r3
        offset_in_signal = -ei_dsp_cont_current_frame_ix;
   240fe:	9304      	str	r3, [sp, #16]
    if (offset_in_signal >= signal->total_length) {
   24100:	f240 8143 	bls.w	2438a <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x5a2>
        _original_signal(original_signal), _range_start(range_start), _range_end(range_end)
   24104:	e9cd 9318 	strd	r9, r3, [sp, #96]	; 0x60
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   24108:	ab18      	add	r3, sp, #96	; 0x60
   2410a:	9314      	str	r3, [sp, #80]	; 0x50
   2410c:	ab14      	add	r3, sp, #80	; 0x50
   2410e:	188f      	adds	r7, r1, r2
   24110:	e893 0003 	ldmia.w	r3, {r0, r1}
   24114:	ab12      	add	r3, sp, #72	; 0x48
   24116:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   2411a:	49ba      	ldr	r1, [pc, #744]	; (24404 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x61c>)
   2411c:	911d      	str	r1, [sp, #116]	; 0x74
   2411e:	e893 0003 	ldmia.w	r3, {r0, r1}
   24122:	921a      	str	r2, [sp, #104]	; 0x68
   24124:	4bb8      	ldr	r3, [pc, #736]	; (24408 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x620>)
        wrapped_signal.total_length = _range_end - _range_start;
   24126:	971f      	str	r7, [sp, #124]	; 0x7c
   24128:	aa1b      	add	r2, sp, #108	; 0x6c
   2412a:	e882 0003 	stmia.w	r2, {r0, r1}
        return &wrapped_signal;
   2412e:	9201      	str	r2, [sp, #4]
   24130:	931e      	str	r3, [sp, #120]	; 0x78
   24132:	ee1a 2a10 	vmov	r2, s20
   24136:	ee1a 1a90 	vmov	r1, s21
   2413a:	eef0 0a48 	vmov.f32	s1, s16
   2413e:	eeb0 0a68 	vmov.f32	s0, s17
   24142:	4638      	mov	r0, r7
   24144:	f7fc fcda 	bl	20afc <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt.constprop.0>
            signal->total_length, frequency, config->frame_length, config->frame_stride, config->fft_length / 2 + 1,
   24148:	9b05      	ldr	r3, [sp, #20]
    x = numpy::roll(output_matrix->buffer, output_matrix->rows * output_matrix->cols,
   2414a:	f8d8 5000 	ldr.w	r5, [r8]
   2414e:	9002      	str	r0, [sp, #8]
            signal->total_length, frequency, config->frame_length, config->frame_stride, config->fft_length / 2 + 1,
   24150:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   24154:	105b      	asrs	r3, r3, #1
            config->implementation_version);
   24156:	3301      	adds	r3, #1
        size_matrix.cols = (uint32_t)cols;
   24158:	b299      	uxth	r1, r3
    x = numpy::roll(output_matrix->buffer, output_matrix->rows * output_matrix->cols,
   2415a:	e9d8 2301 	ldrd	r2, r3, [r8, #4]
   2415e:	fb03 f202 	mul.w	r2, r3, r2
        -(out_matrix_size.rows * out_matrix_size.cols));
   24162:	4603      	mov	r3, r0
   24164:	fb01 f303 	mul.w	r3, r1, r3
   24168:	425c      	negs	r4, r3
        if (shift < 0) {
   2416a:	2c00      	cmp	r4, #0
   2416c:	bfb8      	it	lt
   2416e:	1ad4      	sublt	r4, r2, r3
   24170:	9103      	str	r1, [sp, #12]
        if (shift == 0) {
   24172:	b36c      	cbz	r4, 241d0 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x3e8>
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   24174:	e9cd 2307 	strd	r2, r3, [sp, #28]
   24178:	00a3      	lsls	r3, r4, #2
   2417a:	2101      	movs	r1, #1
   2417c:	4618      	mov	r0, r3
   2417e:	ee09 3a90 	vmov	s19, r3
   24182:	f001 ffaf 	bl	260e4 <_Z9ei_callocjj>
        EI_DSP_MATRIX(shift_matrix, 1, shift);
   24186:	9006      	str	r0, [sp, #24]
   24188:	2800      	cmp	r0, #0
   2418a:	f000 8105 	beq.w	24398 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x5b0>
        memcpy(shift_matrix.buffer, input_array + input_array_size - shift, shift * sizeof(float));
   2418e:	9a07      	ldr	r2, [sp, #28]
   24190:	1b14      	subs	r4, r2, r4
   24192:	eb05 0184 	add.w	r1, r5, r4, lsl #2
   24196:	ee19 2a90 	vmov	r2, s19
   2419a:	00a4      	lsls	r4, r4, #2
   2419c:	f7f4 f830 	bl	18200 <memcpy>
        memmove(input_array + shift, input_array, (input_array_size - shift) * sizeof(float));
   241a0:	4622      	mov	r2, r4
   241a2:	ee19 4a90 	vmov	r4, s19
   241a6:	4629      	mov	r1, r5
   241a8:	1928      	adds	r0, r5, r4
   241aa:	f006 fdff 	bl	2adac <memmove>
        memcpy(input_array, shift_matrix.buffer, shift * sizeof(float));
   241ae:	9c06      	ldr	r4, [sp, #24]
   241b0:	ee19 2a90 	vmov	r2, s19
   241b4:	4621      	mov	r1, r4
   241b6:	4628      	mov	r0, r5
   241b8:	f7f4 f822 	bl	18200 <memcpy>
            ei_free(buffer);
   241bc:	4620      	mov	r0, r4
   241be:	f001 ffa1 	bl	26104 <_Z7ei_freePv>
    size_t output_matrix_offset = (output_matrix->rows * output_matrix->cols) -
   241c2:	e9d8 2101 	ldrd	r2, r1, [r8, #4]
    matrix_t output_matrix_slice(out_matrix_size.rows, out_matrix_size.cols, output_matrix->buffer + output_matrix_offset);
   241c6:	f8d8 5000 	ldr.w	r5, [r8]
   241ca:	9b08      	ldr	r3, [sp, #32]
    size_t output_matrix_offset = (output_matrix->rows * output_matrix->cols) -
   241cc:	fb01 f202 	mul.w	r2, r1, r2
   241d0:	1ad2      	subs	r2, r2, r3
        if (a_buffer) {
   241d2:	eb15 0282 	adds.w	r2, r5, r2, lsl #2
   241d6:	f000 812a 	beq.w	2442e <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x646>
            buffer_managed_by_me = false;
   241da:	2300      	movs	r3, #0
            buffer = a_buffer;
   241dc:	9214      	str	r2, [sp, #80]	; 0x50
            buffer_managed_by_me = false;
   241de:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
        rows = n_rows;
   241e2:	9b02      	ldr	r3, [sp, #8]
   241e4:	9315      	str	r3, [sp, #84]	; 0x54
    int ret = speechpy::feature::spectrogram(&output_matrix_slice, signal,
   241e6:	ad14      	add	r5, sp, #80	; 0x50
        cols = n_cols;
   241e8:	9b03      	ldr	r3, [sp, #12]
   241ea:	9316      	str	r3, [sp, #88]	; 0x58
   241ec:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   241f0:	9901      	ldr	r1, [sp, #4]
   241f2:	ee1a 3a10 	vmov	r3, s20
   241f6:	eeb0 0a49 	vmov.f32	s0, s18
   241fa:	eeb0 1a48 	vmov.f32	s2, s16
   241fe:	eef0 0a68 	vmov.f32	s1, s17
   24202:	4628      	mov	r0, r5
   24204:	f7ff fa2e 	bl	23664 <_ZN2ei8speechpy7feature11spectrogramEPNS_9ei_matrixEPNS_11ei_signal_tEffftt>
    if (ret != EIDSP_OK) {
   24208:	4604      	mov	r4, r0
   2420a:	2800      	cmp	r0, #0
   2420c:	f040 80ea 	bne.w	243e4 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x5fc>
    matrix_size_out->rows += out_matrix_size.rows;
   24210:	9a09      	ldr	r2, [sp, #36]	; 0x24
   24212:	9902      	ldr	r1, [sp, #8]
   24214:	6813      	ldr	r3, [r2, #0]
   24216:	440b      	add	r3, r1
   24218:	6013      	str	r3, [r2, #0]
    if (out_matrix_size.cols > 0) {
   2421a:	9b03      	ldr	r3, [sp, #12]
   2421c:	2b00      	cmp	r3, #0
   2421e:	f040 80cc 	bne.w	243ba <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x5d2>
        if (buffer && buffer_managed_by_me) {
   24222:	9814      	ldr	r0, [sp, #80]	; 0x50
   24224:	b120      	cbz	r0, 24230 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x448>
   24226:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
   2422a:	2b00      	cmp	r3, #0
   2422c:	f040 80fc 	bne.w	24428 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x640>
    int length_of_signal_used = speechpy::processing::calculate_signal_used(range_signal->total_length, sampling_frequency,
   24230:	9b01      	ldr	r3, [sp, #4]
   24232:	ee1a 2a10 	vmov	r2, s20
   24236:	6918      	ldr	r0, [r3, #16]
   24238:	ee1a 1a90 	vmov	r1, s21
   2423c:	eef0 0a48 	vmov.f32	s1, s16
   24240:	eeb0 0a68 	vmov.f32	s0, s17
   24244:	f7fc fcc6 	bl	20bd4 <_ZN2ei8speechpy10processingL21calculate_signal_usedEjmffbt.constprop.0>
    range_signal->total_length = range_signal_orig_length;
   24248:	9b01      	ldr	r3, [sp, #4]
   2424a:	611f      	str	r7, [r3, #16]
    int bytes_left_end_of_frame = signal->total_length - offset_in_signal;
   2424c:	f8d9 2010 	ldr.w	r2, [r9, #16]
   24250:	9b04      	ldr	r3, [sp, #16]
    bytes_left_end_of_frame += frame_overlap_values;
   24252:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    int bytes_left_end_of_frame = signal->total_length - offset_in_signal;
   24254:	1ad3      	subs	r3, r2, r3
   24256:	1a18      	subs	r0, r3, r0
    bytes_left_end_of_frame += frame_overlap_values;
   24258:	4407      	add	r7, r0
    if (bytes_left_end_of_frame > 0) {
   2425a:	2f00      	cmp	r7, #0
   2425c:	dd14      	ble.n	24288 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x4a0>
        x = signal->get_data(
   2425e:	f8db 3000 	ldr.w	r3, [fp]
   24262:	9314      	str	r3, [sp, #80]	; 0x50
      if (_M_empty())
   24264:	f8d9 3008 	ldr.w	r3, [r9, #8]
   24268:	1bd2      	subs	r2, r2, r7
   2426a:	e9cd 2711 	strd	r2, r7, [sp, #68]	; 0x44
   2426e:	2b00      	cmp	r3, #0
   24270:	f000 80f5 	beq.w	2445e <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x676>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   24274:	462b      	mov	r3, r5
   24276:	aa12      	add	r2, sp, #72	; 0x48
   24278:	f8d9 500c 	ldr.w	r5, [r9, #12]
   2427c:	a911      	add	r1, sp, #68	; 0x44
   2427e:	4648      	mov	r0, r9
   24280:	47a8      	blx	r5
        if (x != EIDSP_OK) {
   24282:	2800      	cmp	r0, #0
   24284:	f040 80dc 	bne.w	24440 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x658>
    if (config.implementation_version < 2) {
   24288:	ee1a 3a10 	vmov	r3, s20
   2428c:	2b01      	cmp	r3, #1
    ei_dsp_cont_current_frame_ix = bytes_left_end_of_frame;
   2428e:	f8ca 7000 	str.w	r7, [sl]
    if (config.implementation_version < 2) {
   24292:	f240 809c 	bls.w	243ce <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x5e6>
      if (_M_manager)
   24296:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   24298:	2b00      	cmp	r3, #0
   2429a:	f43f af0b 	beq.w	240b4 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2cc>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   2429e:	a91b      	add	r1, sp, #108	; 0x6c
   242a0:	2203      	movs	r2, #3
   242a2:	4608      	mov	r0, r1
   242a4:	4798      	blx	r3
}
   242a6:	4620      	mov	r0, r4
   242a8:	b021      	add	sp, #132	; 0x84
   242aa:	ecbd 8b06 	vpop	{d8-d10}
   242ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   242b2:	9814      	ldr	r0, [sp, #80]	; 0x50
   242b4:	2800      	cmp	r0, #0
   242b6:	f43f aeb8 	beq.w	2402a <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x242>
   242ba:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
   242be:	2b00      	cmp	r3, #0
   242c0:	f43f aeb3 	beq.w	2402a <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x242>
            ei_free(buffer);
   242c4:	f001 ff1e 	bl	26104 <_Z7ei_freePv>
        if (x != EIDSP_OK) {
   242c8:	e6af      	b.n	2402a <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x242>
        if (shift == 0) {
   242ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   242cc:	2b00      	cmp	r3, #0
   242ce:	f43f adf8 	beq.w	23ec2 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0xda>
   242d2:	e6b2      	b.n	2403a <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x252>
   242d4:	4c4d      	ldr	r4, [pc, #308]	; (2440c <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x624>)
   242d6:	e6e7      	b.n	240a8 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2c0>
        ei_printf("ERR: Spectrogram failed (%d)\n", ret);
   242d8:	4604      	mov	r4, r0
   242da:	4621      	mov	r1, r4
   242dc:	484c      	ldr	r0, [pc, #304]	; (24410 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x628>)
   242de:	f001 fee3 	bl	260a8 <_Z9ei_printfPKcz>
        if (buffer && buffer_managed_by_me) {
   242e2:	9814      	ldr	r0, [sp, #80]	; 0x50
   242e4:	2800      	cmp	r0, #0
   242e6:	f43f aedf 	beq.w	240a8 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2c0>
   242ea:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
   242ee:	2b00      	cmp	r3, #0
   242f0:	f43f aeda 	beq.w	240a8 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2c0>
            ei_free(buffer);
   242f4:	f001 ff06 	bl	26104 <_Z7ei_freePv>
        if (x != EIDSP_OK) {
   242f8:	e6d6      	b.n	240a8 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2c0>
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   242fa:	0098      	lsls	r0, r3, #2
   242fc:	2101      	movs	r1, #1
   242fe:	f001 fef1 	bl	260e4 <_Z9ei_callocjj>
            buffer_managed_by_me = true;
   24302:	2301      	movs	r3, #1
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   24304:	9014      	str	r0, [sp, #80]	; 0x50
            buffer_managed_by_me = true;
   24306:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
   2430a:	e668      	b.n	23fde <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x1f6>
        ei_free(ei_dsp_cont_current_frame);
   2430c:	f001 fefa 	bl	26104 <_Z7ei_freePv>
        ei_dsp_cont_current_frame = nullptr;
   24310:	2300      	movs	r3, #0
   24312:	f8cb 3000 	str.w	r3, [fp]
        ei_dsp_cont_current_frame = (float*)ei_calloc(frame_length_values * sizeof(float), 1);
   24316:	2101      	movs	r1, #1
   24318:	00b0      	lsls	r0, r6, #2
   2431a:	f001 fee3 	bl	260e4 <_Z9ei_callocjj>
   2431e:	f8cb 0000 	str.w	r0, [fp]
        if (!ei_dsp_cont_current_frame) {
   24322:	2800      	cmp	r0, #0
   24324:	d051      	beq.n	243ca <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x5e2>
        ei_dsp_cont_current_frame_size = frame_length_values;
   24326:	4b3b      	ldr	r3, [pc, #236]	; (24414 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x62c>)
        ei_dsp_cont_current_frame_ix = 0;
   24328:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 24420 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x638>
    matrix_size_out->rows = 0;
   2432c:	9a09      	ldr	r2, [sp, #36]	; 0x24
        ei_dsp_cont_current_frame_size = frame_length_values;
   2432e:	601e      	str	r6, [r3, #0]
        ei_dsp_cont_current_frame_ix = 0;
   24330:	2300      	movs	r3, #0
    if (ei_dsp_cont_current_frame_ix > (int)ei_dsp_cont_current_frame_size) {
   24332:	429e      	cmp	r6, r3
    matrix_size_out->cols = 0;
   24334:	e9c2 3300 	strd	r3, r3, [r2]
        ei_dsp_cont_current_frame_ix = 0;
   24338:	f8ca 3000 	str.w	r3, [sl]
    if (ei_dsp_cont_current_frame_ix > (int)ei_dsp_cont_current_frame_size) {
   2433c:	f2c0 808a 	blt.w	24454 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x66c>
   24340:	f8d9 2010 	ldr.w	r2, [r9, #16]
    if (offset_in_signal >= signal->total_length) {
   24344:	4617      	mov	r7, r2
   24346:	b302      	cbz	r2, 2438a <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x5a2>
        _original_signal(original_signal), _range_start(range_start), _range_end(range_end)
   24348:	2300      	movs	r3, #0
   2434a:	f8cd 9060 	str.w	r9, [sp, #96]	; 0x60
   2434e:	921a      	str	r2, [sp, #104]	; 0x68
   24350:	9319      	str	r3, [sp, #100]	; 0x64
    _Function_base() : _M_manager(nullptr) { }
   24352:	931d      	str	r3, [sp, #116]	; 0x74
   24354:	9304      	str	r3, [sp, #16]
   24356:	f8cd 9004 	str.w	r9, [sp, #4]
   2435a:	e6ea      	b.n	24132 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x34a>
            signal->total_length += (size_t)(config.frame_length * (float)frequency);
   2435c:	eeb8 9a67 	vcvt.f32.u32	s18, s15
        if (first_run == true) {
   24360:	4a2d      	ldr	r2, [pc, #180]	; (24418 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x630>)
            signal->total_length += (size_t)(config.frame_length * (float)frequency);
   24362:	ee69 7a28 	vmul.f32	s15, s18, s17
        if (first_run == true) {
   24366:	7811      	ldrb	r1, [r2, #0]
            signal->total_length += (size_t)(config.frame_length * (float)frequency);
   24368:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   2436c:	ee17 6a90 	vmov	r6, s15
        if (first_run == true) {
   24370:	b109      	cbz	r1, 24376 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x58e>
            signal->total_length += (size_t)(config.frame_length * (float)frequency);
   24372:	4433      	add	r3, r6
   24374:	6103      	str	r3, [r0, #16]
        first_run = true;
   24376:	2301      	movs	r3, #1
   24378:	7013      	strb	r3, [r2, #0]
   2437a:	e55d      	b.n	23e38 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x50>
   2437c:	4604      	mov	r4, r0
}
   2437e:	4620      	mov	r0, r4
   24380:	b021      	add	sp, #132	; 0x84
   24382:	ecbd 8b06 	vpop	{d8-d10}
   24386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return EIDSP_OK;
   2438a:	2400      	movs	r4, #0
}
   2438c:	4620      	mov	r0, r4
   2438e:	b021      	add	sp, #132	; 0x84
   24390:	ecbd 8b06 	vpop	{d8-d10}
   24394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (preemphasis) {
   24398:	4b20      	ldr	r3, [pc, #128]	; (2441c <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x634>)
   2439a:	681c      	ldr	r4, [r3, #0]
   2439c:	b19c      	cbz	r4, 243c6 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x5de>
            if (_prev_buffer) {
   2439e:	68e0      	ldr	r0, [r4, #12]
   243a0:	b108      	cbz	r0, 243a6 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x5be>
                ei_dsp_free(_prev_buffer, _shift * sizeof(float));
   243a2:	f001 feaf 	bl	26104 <_Z7ei_freePv>
            if (_end_of_signal_buffer) {
   243a6:	6920      	ldr	r0, [r4, #16]
   243a8:	b108      	cbz	r0, 243ae <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x5c6>
                ei_dsp_free(_end_of_signal_buffer, _shift * sizeof(float));
   243aa:	f001 feab 	bl	26104 <_Z7ei_freePv>
            delete preemphasis;
   243ae:	4620      	mov	r0, r4
   243b0:	211c      	movs	r1, #28
   243b2:	f00b faad 	bl	2f910 <_ZdlPvj>
   243b6:	4c15      	ldr	r4, [pc, #84]	; (2440c <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x624>)
   243b8:	e76d      	b.n	24296 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x4ae>
        if (buffer && buffer_managed_by_me) {
   243ba:	9814      	ldr	r0, [sp, #80]	; 0x50
        matrix_size_out->cols = out_matrix_size.cols;
   243bc:	6053      	str	r3, [r2, #4]
   243be:	2800      	cmp	r0, #0
   243c0:	f47f af31 	bne.w	24226 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x43e>
   243c4:	e734      	b.n	24230 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x448>
   243c6:	4c11      	ldr	r4, [pc, #68]	; (2440c <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x624>)
    if (x != EIDSP_OK) {
   243c8:	e765      	b.n	24296 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x4ae>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
   243ca:	4c10      	ldr	r4, [pc, #64]	; (2440c <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x624>)
   243cc:	e672      	b.n	240b4 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2cc>
        if (first_run == true) {
   243ce:	4b12      	ldr	r3, [pc, #72]	; (24418 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x630>)
   243d0:	781b      	ldrb	r3, [r3, #0]
   243d2:	2b00      	cmp	r3, #0
   243d4:	f43f af5f 	beq.w	24296 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x4ae>
            signal->total_length -= (size_t)(config.frame_length * (float)frequency);
   243d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
   243dc:	1b9b      	subs	r3, r3, r6
   243de:	f8c9 3010 	str.w	r3, [r9, #16]
   243e2:	e758      	b.n	24296 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x4ae>
        ei_printf("ERR: Spectrogram failed (%d)\n", ret);
   243e4:	480a      	ldr	r0, [pc, #40]	; (24410 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x628>)
   243e6:	4621      	mov	r1, r4
   243e8:	f001 fe5e 	bl	260a8 <_Z9ei_printfPKcz>
   243ec:	9814      	ldr	r0, [sp, #80]	; 0x50
   243ee:	2800      	cmp	r0, #0
   243f0:	f43f af51 	beq.w	24296 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x4ae>
   243f4:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
   243f8:	2b00      	cmp	r3, #0
   243fa:	f43f af4c 	beq.w	24296 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x4ae>
            ei_free(buffer);
   243fe:	f001 fe81 	bl	26104 <_Z7ei_freePv>
    if (x != EIDSP_OK) {
   24402:	e748      	b.n	24296 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x4ae>
   24404:	000208fd 	.word	0x000208fd
   24408:	000218a1 	.word	0x000218a1
   2440c:	fffffc16 	.word	0xfffffc16
   24410:	0003ff94 	.word	0x0003ff94
   24414:	10018858 	.word	0x10018858
   24418:	10018889 	.word	0x10018889
   2441c:	1001884c 	.word	0x1001884c
   24420:	10018854 	.word	0x10018854
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
   24424:	4c18      	ldr	r4, [pc, #96]	; (24488 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x6a0>)
   24426:	e645      	b.n	240b4 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2cc>
   24428:	f001 fe6c 	bl	26104 <_Z7ei_freePv>
    if (x != EIDSP_OK) {
   2442c:	e700      	b.n	24230 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x448>
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   2442e:	0098      	lsls	r0, r3, #2
   24430:	2101      	movs	r1, #1
   24432:	f001 fe57 	bl	260e4 <_Z9ei_callocjj>
            buffer_managed_by_me = true;
   24436:	2301      	movs	r3, #1
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   24438:	9014      	str	r0, [sp, #80]	; 0x50
            buffer_managed_by_me = true;
   2443a:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
   2443e:	e6d0      	b.n	241e2 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x3fa>
   24440:	4604      	mov	r4, r0
   24442:	e728      	b.n	24296 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x4ae>
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
   24444:	4c11      	ldr	r4, [pc, #68]	; (2448c <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x6a4>)
   24446:	e635      	b.n	240b4 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2cc>
        ei_printf("ERR: frame_length (%d) cannot be larger than signal's total length (%d) for continuous classification\n",
   24448:	4811      	ldr	r0, [pc, #68]	; (24490 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x6a8>)
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
   2444a:	4c10      	ldr	r4, [pc, #64]	; (2448c <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x6a4>)
        ei_printf("ERR: frame_length (%d) cannot be larger than signal's total length (%d) for continuous classification\n",
   2444c:	4631      	mov	r1, r6
   2444e:	f001 fe2b 	bl	260a8 <_Z9ei_printfPKcz>
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
   24452:	e62f      	b.n	240b4 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2cc>
        ei_printf("ERR: ei_dsp_cont_current_frame_ix is larger than frame size\n");
   24454:	480f      	ldr	r0, [pc, #60]	; (24494 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x6ac>)
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
   24456:	4c0d      	ldr	r4, [pc, #52]	; (2448c <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x6a4>)
        ei_printf("ERR: ei_dsp_cont_current_frame_ix is larger than frame size\n");
   24458:	f001 fe26 	bl	260a8 <_Z9ei_printfPKcz>
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
   2445c:	e62a      	b.n	240b4 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2cc>
	__throw_bad_function_call();
   2445e:	f7fd f861 	bl	21524 <_ZSt25__throw_bad_function_callv>
        ei_printf("ERR: frame_length (");
   24462:	480d      	ldr	r0, [pc, #52]	; (24498 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x6b0>)
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
   24464:	4c09      	ldr	r4, [pc, #36]	; (2448c <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x6a4>)
        ei_printf("ERR: frame_length (");
   24466:	f001 fe1f 	bl	260a8 <_Z9ei_printfPKcz>
        ei_printf_float(config.frame_length);            
   2446a:	eeb0 0a68 	vmov.f32	s0, s17
   2446e:	f001 fe29 	bl	260c4 <_Z15ei_printf_floatf>
        ei_printf(") cannot be lower than frame_stride (");
   24472:	480a      	ldr	r0, [pc, #40]	; (2449c <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x6b4>)
   24474:	f001 fe18 	bl	260a8 <_Z9ei_printfPKcz>
        ei_printf_float(config.frame_stride);
   24478:	eeb0 0a48 	vmov.f32	s0, s16
   2447c:	f001 fe22 	bl	260c4 <_Z15ei_printf_floatf>
        ei_printf(") for continuous classification\n");
   24480:	4807      	ldr	r0, [pc, #28]	; (244a0 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x6b8>)
   24482:	f001 fe11 	bl	260a8 <_Z9ei_printfPKcz>
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
   24486:	e615      	b.n	240b4 <_ZN12_GLOBAL__N_138extract_spectrogram_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2cc>
   24488:	fffffc14 	.word	0xfffffc14
   2448c:	fffffc10 	.word	0xfffffc10
   24490:	00040014 	.word	0x00040014
   24494:	0004007c 	.word	0x0004007c
   24498:	0003ffb4 	.word	0x0003ffb4
   2449c:	0003ffc8 	.word	0x0003ffc8
   244a0:	0003fff0 	.word	0x0003fff0

000244a4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt>:
    static int mfe(matrix_t *out_features, matrix_t *out_energies,
   244a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   244a8:	ed2d 8b06 	vpush	{d8-d10}
   244ac:	b0a7      	sub	sp, #156	; 0x9c
   244ae:	461c      	mov	r4, r3
   244b0:	9e39      	ldr	r6, [sp, #228]	; 0xe4
   244b2:	f8bd 30dc 	ldrh.w	r3, [sp, #220]	; 0xdc
   244b6:	910b      	str	r1, [sp, #44]	; 0x2c
   244b8:	f8bd 70d8 	ldrh.w	r7, [sp, #216]	; 0xd8
   244bc:	9d38      	ldr	r5, [sp, #224]	; 0xe0
   244be:	f8bd 10e8 	ldrh.w	r1, [sp, #232]	; 0xe8
   244c2:	9009      	str	r0, [sp, #36]	; 0x24
   244c4:	eeb0 1a60 	vmov.f32	s2, s1
   244c8:	9308      	str	r3, [sp, #32]
        if (high_frequency == 0) {
   244ca:	b906      	cbnz	r6, 244ce <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2a>
            high_frequency = sampling_frequency / 2;
   244cc:	0866      	lsrs	r6, r4, #1
        ret = processing::stack_frames(
   244ce:	ee07 4a90 	vmov	s15, r4
        stack_frames_info_t stack_frame_info = { 0 };
   244d2:	2300      	movs	r3, #0
        ret = processing::stack_frames(
   244d4:	eef0 0a40 	vmov.f32	s1, s0
            low_frequency = 300;
   244d8:	2d00      	cmp	r5, #0
        ret = processing::stack_frames(
   244da:	eeb8 0a67 	vcvt.f32.u32	s0, s15
   244de:	a816      	add	r0, sp, #88	; 0x58
	: _M_start(), _M_finish(), _M_end_of_storage()
   244e0:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
        stack_frames_info_t stack_frame_info = { 0 };
   244e4:	931a      	str	r3, [sp, #104]	; 0x68
   244e6:	9319      	str	r3, [sp, #100]	; 0x64
        stack_frame_info.signal = signal;
   244e8:	9216      	str	r2, [sp, #88]	; 0x58
            low_frequency = 300;
   244ea:	bf08      	it	eq
   244ec:	f44f 7596 	moveq.w	r5, #300	; 0x12c
        ret = processing::stack_frames(
   244f0:	f7fe fffa 	bl	234e8 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0>
        if (ret != 0) {
   244f4:	4603      	mov	r3, r0
   244f6:	9007      	str	r0, [sp, #28]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   244f8:	9817      	ldr	r0, [sp, #92]	; 0x5c
   244fa:	2b00      	cmp	r3, #0
   244fc:	f040 80e1 	bne.w	246c2 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x21e>
        if (stack_frame_info.frame_ixs.size() != out_features->rows) {
   24500:	9909      	ldr	r1, [sp, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   24502:	9b18      	ldr	r3, [sp, #96]	; 0x60
   24504:	684a      	ldr	r2, [r1, #4]
   24506:	1a1b      	subs	r3, r3, r0
   24508:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
   2450c:	f040 8205 	bne.w	2491a <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x476>
        if (num_filters != out_features->cols) {
   24510:	f8d1 8008 	ldr.w	r8, [r1, #8]
   24514:	4547      	cmp	r7, r8
   24516:	f040 8200 	bne.w	2491a <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x476>
        if (stack_frame_info.frame_ixs.size() != out_energies->rows || out_energies->cols != 1) {
   2451a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2451c:	684b      	ldr	r3, [r1, #4]
   2451e:	4293      	cmp	r3, r2
   24520:	f040 81fb 	bne.w	2491a <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x476>
   24524:	688a      	ldr	r2, [r1, #8]
   24526:	2a01      	cmp	r2, #1
   24528:	f040 81f7 	bne.w	2491a <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x476>
        for (uint32_t i = 0; i < out_features->rows * out_features->cols; i++) {
   2452c:	fb07 f303 	mul.w	r3, r7, r3
   24530:	b12b      	cbz	r3, 2453e <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x9a>
            *(out_features->buffer + i) = 0;
   24532:	009a      	lsls	r2, r3, #2
   24534:	9b09      	ldr	r3, [sp, #36]	; 0x24
   24536:	9907      	ldr	r1, [sp, #28]
   24538:	6818      	ldr	r0, [r3, #0]
   2453a:	f006 fcb3 	bl	2aea4 <memset>
        uint16_t coefficients = fft_length / 2 + 1;
   2453e:	9b08      	ldr	r3, [sp, #32]
   24540:	085a      	lsrs	r2, r3, #1
            buffer = (uint8_t*)ei_calloc(n_rows * n_cols * sizeof(uint8_t), 1);
   24542:	fb02 8008 	mla	r0, r2, r8, r8
   24546:	2101      	movs	r1, #1
   24548:	920d      	str	r2, [sp, #52]	; 0x34
   2454a:	f001 fdcb 	bl	260e4 <_Z9ei_callocjj>
   2454e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
        dequantization_fn = a_dequantization_fn;
   24550:	4b64      	ldr	r3, [pc, #400]	; (246e4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x240>)
   24552:	931f      	str	r3, [sp, #124]	; 0x7c
   24554:	1c53      	adds	r3, r2, #1
   24556:	930c      	str	r3, [sp, #48]	; 0x30
        cols = n_cols;
   24558:	931d      	str	r3, [sp, #116]	; 0x74
            buffer_managed_by_me = true;
   2455a:	2301      	movs	r3, #1
            buffer = (uint8_t*)ei_calloc(n_rows * n_cols * sizeof(uint8_t), 1);
   2455c:	e9cd 081b 	strd	r0, r8, [sp, #108]	; 0x6c
            buffer_managed_by_me = true;
   24560:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   24564:	eb02 0b03 	add.w	fp, r2, r3
        EI_DSP_QUANTIZED_MATRIX(filterbanks, num_filters, coefficients, &numpy::dequantize_zero_one);
   24568:	2800      	cmp	r0, #0
   2456a:	f000 81cd 	beq.w	24908 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x464>
        ret = feature::filterbanks(
   2456e:	e9cd 6301 	strd	r6, r3, [sp, #4]
   24572:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   24574:	9500      	str	r5, [sp, #0]
   24576:	4623      	mov	r3, r4
   24578:	4639      	mov	r1, r7
   2457a:	a81b      	add	r0, sp, #108	; 0x6c
   2457c:	f7fd f9a8 	bl	218d0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb>
        if (ret != 0) {
   24580:	9007      	str	r0, [sp, #28]
   24582:	2800      	cmp	r0, #0
   24584:	f040 8095 	bne.w	246b2 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x20e>
        for (size_t ix = 0; ix < stack_frame_info.frame_ixs.size(); ix++) {
   24588:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
   2458c:	429a      	cmp	r2, r3
   2458e:	f000 816b 	beq.w	24868 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x3c4>
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   24592:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                output[ix] = rms_result * sqrt(2);
   24594:	ed9f 8a54 	vldr	s16, [pc, #336]	; 246e8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x244>
      *pOut = 0.0f;
   24598:	eddf 8a54 	vldr	s17, [pc, #336]	; 246ec <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x248>
                    tmp += row[k] * quantized_values_one_zero[u8];
   2459c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 246f8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x254>
   245a0:	009b      	lsls	r3, r3, #2
   245a2:	ee09 3a90 	vmov	s19, r3
   245a6:	9b08      	ldr	r3, [sp, #32]
   245a8:	009b      	lsls	r3, r3, #2
   245aa:	ee09 3a10 	vmov	s18, r3
            output[n_fft_out_features - 1] = fft_output.buffer[1];
   245ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   245b0:	009b      	lsls	r3, r3, #2
   245b2:	930f      	str	r3, [sp, #60]	; 0x3c
        kiss_fft_cpx *fft_output = (kiss_fft_cpx*)ei_dsp_malloc(n_fft_out_features * sizeof(kiss_fft_cpx));
   245b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
   245b8:	9310      	str	r3, [sp, #64]	; 0x40
   245ba:	9b07      	ldr	r3, [sp, #28]
   245bc:	9305      	str	r3, [sp, #20]
   245be:	ee19 0a90 	vmov	r0, s19
   245c2:	2101      	movs	r1, #1
   245c4:	f001 fd8e 	bl	260e4 <_Z9ei_callocjj>
            EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
   245c8:	4682      	mov	sl, r0
   245ca:	2800      	cmp	r0, #0
   245cc:	f000 820c 	beq.w	249e8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x544>
   245d0:	981a      	ldr	r0, [sp, #104]	; 0x68
   245d2:	2101      	movs	r1, #1
   245d4:	0080      	lsls	r0, r0, #2
   245d6:	f001 fd85 	bl	260e4 <_Z9ei_callocjj>
            EI_DSP_MATRIX(signal_frame, 1, stack_frame_info.frame_length);
   245da:	9006      	str	r0, [sp, #24]
   245dc:	2800      	cmp	r0, #0
   245de:	f000 820b 	beq.w	249f8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x554>
   245e2:	e9dd 1317 	ldrd	r1, r3, [sp, #92]	; 0x5c
	if (__n >= this->size())
   245e6:	9805      	ldr	r0, [sp, #20]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   245e8:	1a5b      	subs	r3, r3, r1
	if (__n >= this->size())
   245ea:	ebb0 0fa3 	cmp.w	r0, r3, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   245ee:	ea4f 02a3 	mov.w	r2, r3, asr #2
	if (__n >= this->size())
   245f2:	f080 822f 	bcs.w	24a54 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x5b0>
            size_t signal_offset = stack_frame_info.frame_ixs.at(ix);
   245f6:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
            size_t signal_length = stack_frame_info.frame_length;
   245fa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   245fc:	4605      	mov	r5, r0
            if (signal_offset + signal_length > stack_frame_info.signal->total_length) {
   245fe:	9816      	ldr	r0, [sp, #88]	; 0x58
   24600:	6904      	ldr	r4, [r0, #16]
   24602:	18d1      	adds	r1, r2, r3
   24604:	42a1      	cmp	r1, r4
   24606:	bf84      	itt	hi
   24608:	1b1b      	subhi	r3, r3, r4
                signal_length = signal_length -
   2460a:	185b      	addhi	r3, r3, r1
   2460c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   24610:	9b06      	ldr	r3, [sp, #24]
   24612:	9320      	str	r3, [sp, #128]	; 0x80
      if (_M_empty())
   24614:	6883      	ldr	r3, [r0, #8]
   24616:	00ad      	lsls	r5, r5, #2
   24618:	950a      	str	r5, [sp, #40]	; 0x28
   2461a:	2b00      	cmp	r3, #0
   2461c:	f000 8214 	beq.w	24a48 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x5a4>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   24620:	68c4      	ldr	r4, [r0, #12]
   24622:	ab20      	add	r3, sp, #128	; 0x80
   24624:	aa15      	add	r2, sp, #84	; 0x54
   24626:	a914      	add	r1, sp, #80	; 0x50
   24628:	47a0      	blx	r4
            if (ret != 0) {
   2462a:	4606      	mov	r6, r0
   2462c:	2800      	cmp	r0, #0
   2462e:	f040 81de 	bne.w	249ee <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x54a>
        if (output_size != n_fft_out_features) {
   24632:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                stack_frame_info.frame_length,
   24634:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   24636:	455b      	cmp	r3, fp
   24638:	f040 816c 	bne.w	24914 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x470>
   2463c:	ee19 0a10 	vmov	r0, s18
   24640:	2101      	movs	r1, #1
   24642:	f001 fd4f 	bl	260e4 <_Z9ei_callocjj>
        EI_DSP_MATRIX(fft_input, 1, n_fft);
   24646:	4680      	mov	r8, r0
   24648:	2800      	cmp	r0, #0
   2464a:	d048      	beq.n	246de <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x23a>
   2464c:	9f08      	ldr	r7, [sp, #32]
        memcpy(fft_input.buffer, src, src_size * sizeof(float));
   2464e:	9906      	ldr	r1, [sp, #24]
   24650:	42bc      	cmp	r4, r7
   24652:	bf28      	it	cs
   24654:	463c      	movcs	r4, r7
   24656:	00a5      	lsls	r5, r4, #2
   24658:	462a      	mov	r2, r5
   2465a:	f7f3 fdd1 	bl	18200 <memcpy>
        memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(kiss_fft_scalar));
   2465e:	1b3a      	subs	r2, r7, r4
   24660:	0092      	lsls	r2, r2, #2
   24662:	4631      	mov	r1, r6
   24664:	eb08 0005 	add.w	r0, r8, r5
   24668:	f006 fc1c 	bl	2aea4 <memset>
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
   2466c:	2f20      	cmp	r7, #32
   2466e:	d045      	beq.n	246fc <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x258>
   24670:	2f40      	cmp	r7, #64	; 0x40
   24672:	d012      	beq.n	2469a <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x1f6>
   24674:	2f80      	cmp	r7, #128	; 0x80
   24676:	d010      	beq.n	2469a <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x1f6>
   24678:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   2467c:	f000 810c 	beq.w	24898 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x3f4>
   24680:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   24684:	d009      	beq.n	2469a <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x1f6>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
   24686:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
   2468a:	d006      	beq.n	2469a <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x1f6>
   2468c:	f5b7 6f00 	cmp.w	r7, #2048	; 0x800
   24690:	d003      	beq.n	2469a <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x1f6>
   24692:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   24696:	f040 8143 	bne.w	24920 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x47c>
                return EIDSP_FFT_TABLE_NOT_LOADED;
   2469a:	4b15      	ldr	r3, [pc, #84]	; (246f0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x24c>)
   2469c:	9307      	str	r3, [sp, #28]
   2469e:	4645      	mov	r5, r8
            ei_free(buffer);
   246a0:	4628      	mov	r0, r5
   246a2:	f001 fd2f 	bl	26104 <_Z7ei_freePv>
   246a6:	9806      	ldr	r0, [sp, #24]
   246a8:	f001 fd2c 	bl	26104 <_Z7ei_freePv>
   246ac:	4650      	mov	r0, sl
   246ae:	f001 fd29 	bl	26104 <_Z7ei_freePv>
        if (buffer && buffer_managed_by_me) {
   246b2:	981b      	ldr	r0, [sp, #108]	; 0x6c
   246b4:	b120      	cbz	r0, 246c0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x21c>
   246b6:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
   246ba:	2b00      	cmp	r3, #0
   246bc:	f040 8127 	bne.w	2490e <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x46a>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   246c0:	9817      	ldr	r0, [sp, #92]	; 0x5c
	if (__p)
   246c2:	b118      	cbz	r0, 246cc <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x228>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   246c4:	9919      	ldr	r1, [sp, #100]	; 0x64
   246c6:	1a09      	subs	r1, r1, r0
   246c8:	f00b f922 	bl	2f910 <_ZdlPvj>
    }
   246cc:	9807      	ldr	r0, [sp, #28]
   246ce:	b027      	add	sp, #156	; 0x9c
   246d0:	ecbd 8b06 	vpop	{d8-d10}
   246d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ei_free(buffer);
   246d8:	4640      	mov	r0, r8
   246da:	f001 fd13 	bl	26104 <_Z7ei_freePv>
   246de:	4b05      	ldr	r3, [pc, #20]	; (246f4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x250>)
   246e0:	9307      	str	r3, [sp, #28]
   246e2:	e7e0      	b.n	246a6 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x202>
   246e4:	0002066d 	.word	0x0002066d
   246e8:	3fb504f3 	.word	0x3fb504f3
   246ec:	00000000 	.word	0x00000000
   246f0:	fffffc08 	.word	0xfffffc08
   246f4:	fffffc16 	.word	0xfffffc16
   246f8:	00040218 	.word	0x00040218
                rfft_instance->fftLenRFFT = 32U;
   246fc:	9b08      	ldr	r3, [sp, #32]
   246fe:	f8ad 3090 	strh.w	r3, [sp, #144]	; 0x90
                S->bitRevLength = arm_cfft_sR_f32_len16.bitRevLength;
   24702:	4bc0      	ldr	r3, [pc, #768]	; (24a04 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x560>)
                rfft_instance->pTwiddleRFFT = (float32_t *) twiddleCoef_rfft_32;
   24704:	4ac0      	ldr	r2, [pc, #768]	; (24a08 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x564>)
   24706:	9225      	str	r2, [sp, #148]	; 0x94
                S->bitRevLength = arm_cfft_sR_f32_len16.bitRevLength;
   24708:	899a      	ldrh	r2, [r3, #12]
   2470a:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
   2470e:	689a      	ldr	r2, [r3, #8]
                S->pTwiddle = arm_cfft_sR_f32_len16.pTwiddle;
   24710:	685b      	ldr	r3, [r3, #4]
   24712:	9321      	str	r3, [sp, #132]	; 0x84
                S->fftLen = 16U;
   24714:	2310      	movs	r3, #16
                S->pTwiddle = arm_cfft_sR_f32_len16.pTwiddle;
   24716:	9222      	str	r2, [sp, #136]	; 0x88
                S->fftLen = 16U;
   24718:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   2471c:	ee19 0a10 	vmov	r0, s18
   24720:	2101      	movs	r1, #1
   24722:	f001 fcdf 	bl	260e4 <_Z9ei_callocjj>
            EI_DSP_MATRIX(fft_output, 1, n_fft);
   24726:	4606      	mov	r6, r0
   24728:	2800      	cmp	r0, #0
   2472a:	d0d5      	beq.n	246d8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x234>
            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
   2472c:	4632      	mov	r2, r6
   2472e:	2300      	movs	r3, #0
   24730:	a820      	add	r0, sp, #128	; 0x80
   24732:	4641      	mov	r1, r8
   24734:	f00e fe50 	bl	333d8 <arm_rfft_fast_f32>
            output[0] = fft_output.buffer[0];
   24738:	6833      	ldr	r3, [r6, #0]
   2473a:	f8ca 3000 	str.w	r3, [sl]
            output[n_fft_out_features - 1] = fft_output.buffer[1];
   2473e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   24740:	6872      	ldr	r2, [r6, #4]
   24742:	960e      	str	r6, [sp, #56]	; 0x38
   24744:	f10a 0704 	add.w	r7, sl, #4
   24748:	4453      	add	r3, sl
   2474a:	f106 0508 	add.w	r5, r6, #8
   2474e:	463e      	mov	r6, r7
   24750:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   24752:	601a      	str	r2, [r3, #0]
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
   24754:	2401      	movs	r4, #1
                arm_rms_f32(fft_output.buffer + fft_output_buffer_ix, 2, &rms_result);
   24756:	4628      	mov	r0, r5
   24758:	aa15      	add	r2, sp, #84	; 0x54
   2475a:	2102      	movs	r1, #2
   2475c:	f00e fef2 	bl	33544 <arm_rms_f32>
                output[ix] = rms_result * sqrt(2);
   24760:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
   24764:	3401      	adds	r4, #1
                output[ix] = rms_result * sqrt(2);
   24766:	ee67 7a88 	vmul.f32	s15, s15, s16
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
   2476a:	42a7      	cmp	r7, r4
   2476c:	f105 0508 	add.w	r5, r5, #8
                output[ix] = rms_result * sqrt(2);
   24770:	ece6 7a01 	vstmia	r6!, {s15}
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
   24774:	d1ef      	bne.n	24756 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2b2>
   24776:	9e0e      	ldr	r6, [sp, #56]	; 0x38
            ei_free(buffer);
   24778:	4630      	mov	r0, r6
   2477a:	f001 fcc3 	bl	26104 <_Z7ei_freePv>
   2477e:	4640      	mov	r0, r8
   24780:	f001 fcc0 	bl	26104 <_Z7ei_freePv>
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
   24784:	eddd 7a08 	vldr	s15, [sp, #32]
   24788:	eef8 7a67 	vcvt.f32.u32	s15, s15
   2478c:	4656      	mov	r6, sl
   2478e:	ee17 0a90 	vmov	r0, s15
   24792:	f7f4 f967 	bl	18a64 <__aeabi_f2d>
   24796:	4602      	mov	r2, r0
   24798:	460b      	mov	r3, r1
   2479a:	2000      	movs	r0, #0
   2479c:	499b      	ldr	r1, [pc, #620]	; (24a0c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x568>)
   2479e:	f7f4 fae3 	bl	18d68 <__aeabi_ddiv>
   247a2:	eb0a 088b 	add.w	r8, sl, fp, lsl #2
   247a6:	4604      	mov	r4, r0
   247a8:	460d      	mov	r5, r1
   247aa:	4657      	mov	r7, sl
                (out_buffer[ix] * out_buffer[ix]);
   247ac:	edd7 7a00 	vldr	s15, [r7]
   247b0:	ee67 7aa7 	vmul.f32	s15, s15, s15
   247b4:	ee17 0a90 	vmov	r0, s15
   247b8:	f7f4 f954 	bl	18a64 <__aeabi_f2d>
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
   247bc:	4622      	mov	r2, r4
   247be:	462b      	mov	r3, r5
   247c0:	f7f4 f9a8 	bl	18b14 <__aeabi_dmul>
   247c4:	f7f4 fc7e 	bl	190c4 <__aeabi_d2f>
   247c8:	f847 0b04 	str.w	r0, [r7], #4
        for (size_t ix = 0; ix < out_buffer_size; ix++) {
   247cc:	45b8      	cmp	r8, r7
   247ce:	d1ed      	bne.n	247ac <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x308>
        float res = 0.0f;
   247d0:	eddf 7a8f 	vldr	s15, [pc, #572]	; 24a10 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x56c>
            res += input_array[ix];
   247d4:	ecb6 7a01 	vldmia	r6!, {s14}
        for (size_t ix = 0; ix < input_array_size; ix++) {
   247d8:	45b0      	cmp	r8, r6
            res += input_array[ix];
   247da:	ee77 7a87 	vadd.f32	s15, s15, s14
        for (size_t ix = 0; ix < input_array_size; ix++) {
   247de:	d1f9      	bne.n	247d4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x330>
            out_energies->buffer[ix] = energy;
   247e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   247e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   247e4:	681b      	ldr	r3, [r3, #0]
            if (energy == 0) {
   247e6:	eef5 7a40 	vcmp.f32	s15, #0.0
   247ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                energy = 1e-10;
   247ee:	bf08      	it	eq
   247f0:	eddf 7a88 	vldreq	s15, [pc, #544]	; 24a14 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x570>
            out_energies->buffer[ix] = energy;
   247f4:	4413      	add	r3, r2
   247f6:	edc3 7a00 	vstr	s15, [r3]
        if (matrix1_cols != matrix2->rows) {
   247fa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   247fc:	455b      	cmp	r3, fp
   247fe:	f040 80f8 	bne.w	249f2 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x54e>
   24802:	9d1d      	ldr	r5, [sp, #116]	; 0x74
        for (uint16_t j = 0; j < matrix2->cols; j++) {
   24804:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   24806:	b1fd      	cbz	r5, 24848 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x3a4>
            out_matrix->buffer[i * matrix2->cols + j] = tmp;
   24808:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2480a:	681c      	ldr	r4, [r3, #0]
   2480c:	9b05      	ldr	r3, [sp, #20]
   2480e:	2d01      	cmp	r5, #1
   24810:	fb05 fe03 	mul.w	lr, r5, r3
   24814:	d151      	bne.n	248ba <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x416>
            for (uint16_t k = 0; k < matrix1_cols; k++) {
   24816:	2100      	movs	r1, #0
            float tmp = 0.0;
   24818:	eddf 7a7d 	vldr	s15, [pc, #500]	; 24a10 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x56c>
            for (uint16_t k = 0; k < matrix1_cols; k++) {
   2481c:	460b      	mov	r3, r1
                uint8_t u8 = matrix2->buffer[k * matrix2->cols + j];
   2481e:	5c50      	ldrb	r0, [r2, r1]
                if (u8) { // this matrix appears to be very sparsely populated
   24820:	b148      	cbz	r0, 24836 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x392>
                    tmp += row[k] * quantized_values_one_zero[u8];
   24822:	eb09 0080 	add.w	r0, r9, r0, lsl #2
   24826:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
   2482a:	edd0 6a00 	vldr	s13, [r0]
   2482e:	ed91 7a00 	vldr	s14, [r1]
   24832:	eee6 7a87 	vfma.f32	s15, s13, s14
            for (uint16_t k = 0; k < matrix1_cols; k++) {
   24836:	3301      	adds	r3, #1
   24838:	b29b      	uxth	r3, r3
   2483a:	459b      	cmp	fp, r3
   2483c:	4619      	mov	r1, r3
   2483e:	d8ee      	bhi.n	2481e <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x37a>
            out_matrix->buffer[i * matrix2->cols + j] = tmp;
   24840:	eb04 048e 	add.w	r4, r4, lr, lsl #2
   24844:	edc4 7a00 	vstr	s15, [r4]
   24848:	9806      	ldr	r0, [sp, #24]
   2484a:	f001 fc5b 	bl	26104 <_Z7ei_freePv>
   2484e:	4650      	mov	r0, sl
   24850:	f001 fc58 	bl	26104 <_Z7ei_freePv>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   24854:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
        for (size_t ix = 0; ix < stack_frame_info.frame_ixs.size(); ix++) {
   24858:	9905      	ldr	r1, [sp, #20]
   2485a:	1a9b      	subs	r3, r3, r2
   2485c:	3101      	adds	r1, #1
   2485e:	ebb1 0fa3 	cmp.w	r1, r3, asr #2
   24862:	9105      	str	r1, [sp, #20]
   24864:	f4ff aeab 	bcc.w	245be <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x11a>
        zero_handling(input->buffer, input->rows * input->cols);
   24868:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2486a:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   2486e:	fb01 f202 	mul.w	r2, r1, r2
   24872:	681b      	ldr	r3, [r3, #0]
        for (size_t ix = 0; ix < input_size; ix++) {
   24874:	2a00      	cmp	r2, #0
   24876:	f43f af1c 	beq.w	246b2 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x20e>
                input[ix] = 1e-10;
   2487a:	4967      	ldr	r1, [pc, #412]	; (24a18 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x574>)
   2487c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
            if (input[ix] == 0) {
   24880:	ecf3 7a01 	vldmia	r3!, {s15}
   24884:	eef5 7a40 	vcmp.f32	s15, #0.0
   24888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                input[ix] = 1e-10;
   2488c:	bf08      	it	eq
   2488e:	f843 1c04 	streq.w	r1, [r3, #-4]
        for (size_t ix = 0; ix < input_size; ix++) {
   24892:	429a      	cmp	r2, r3
   24894:	d1f4      	bne.n	24880 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x3dc>
   24896:	e70c      	b.n	246b2 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x20e>
                rfft_instance->fftLenRFFT = 256U;
   24898:	9b08      	ldr	r3, [sp, #32]
   2489a:	f8ad 3090 	strh.w	r3, [sp, #144]	; 0x90
                S->bitRevLength = arm_cfft_sR_f32_len128.bitRevLength;
   2489e:	4b5f      	ldr	r3, [pc, #380]	; (24a1c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x578>)
                rfft_instance->pTwiddleRFFT = (float32_t *) twiddleCoef_rfft_256;
   248a0:	4a5f      	ldr	r2, [pc, #380]	; (24a20 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x57c>)
   248a2:	9225      	str	r2, [sp, #148]	; 0x94
                S->bitRevLength = arm_cfft_sR_f32_len128.bitRevLength;
   248a4:	899a      	ldrh	r2, [r3, #12]
   248a6:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
   248aa:	689a      	ldr	r2, [r3, #8]
                S->pTwiddle = arm_cfft_sR_f32_len128.pTwiddle;
   248ac:	685b      	ldr	r3, [r3, #4]
   248ae:	9321      	str	r3, [sp, #132]	; 0x84
                S->fftLen = 128U;
   248b0:	2380      	movs	r3, #128	; 0x80
                S->pTwiddle = arm_cfft_sR_f32_len128.pTwiddle;
   248b2:	9222      	str	r2, [sp, #136]	; 0x88
                S->fftLen = 128U;
   248b4:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
            if (status != ARM_MATH_SUCCESS) {
   248b8:	e730      	b.n	2471c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x278>
        for (uint16_t j = 0; j < matrix2->cols; j++) {
   248ba:	2700      	movs	r7, #0
   248bc:	46bc      	mov	ip, r7
            for (uint16_t k = 0; k < matrix1_cols; k++) {
   248be:	2100      	movs	r1, #0
            float tmp = 0.0;
   248c0:	eddf 7a53 	vldr	s15, [pc, #332]	; 24a10 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x56c>
            for (uint16_t k = 0; k < matrix1_cols; k++) {
   248c4:	460b      	mov	r3, r1
   248c6:	19d6      	adds	r6, r2, r7
                uint8_t u8 = matrix2->buffer[k * matrix2->cols + j];
   248c8:	fb01 f005 	mul.w	r0, r1, r5
   248cc:	5c30      	ldrb	r0, [r6, r0]
                if (u8) { // this matrix appears to be very sparsely populated
   248ce:	b148      	cbz	r0, 248e4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x440>
                    tmp += row[k] * quantized_values_one_zero[u8];
   248d0:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
   248d4:	eb09 0080 	add.w	r0, r9, r0, lsl #2
   248d8:	edd1 6a00 	vldr	s13, [r1]
   248dc:	ed90 7a00 	vldr	s14, [r0]
   248e0:	eee6 7a87 	vfma.f32	s15, s13, s14
            for (uint16_t k = 0; k < matrix1_cols; k++) {
   248e4:	3301      	adds	r3, #1
   248e6:	b29b      	uxth	r3, r3
   248e8:	459b      	cmp	fp, r3
   248ea:	4619      	mov	r1, r3
   248ec:	d8ec      	bhi.n	248c8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x424>
        for (uint16_t j = 0; j < matrix2->cols; j++) {
   248ee:	f10c 0c01 	add.w	ip, ip, #1
   248f2:	fa1f fc8c 	uxth.w	ip, ip
            out_matrix->buffer[i * matrix2->cols + j] = tmp;
   248f6:	4477      	add	r7, lr
   248f8:	eb04 0787 	add.w	r7, r4, r7, lsl #2
        for (uint16_t j = 0; j < matrix2->cols; j++) {
   248fc:	4565      	cmp	r5, ip
            out_matrix->buffer[i * matrix2->cols + j] = tmp;
   248fe:	edc7 7a00 	vstr	s15, [r7]
        for (uint16_t j = 0; j < matrix2->cols; j++) {
   24902:	4667      	mov	r7, ip
   24904:	d8db      	bhi.n	248be <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x41a>
   24906:	e79f      	b.n	24848 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x3a4>
        EI_DSP_QUANTIZED_MATRIX(filterbanks, num_filters, coefficients, &numpy::dequantize_zero_one);
   24908:	4b46      	ldr	r3, [pc, #280]	; (24a24 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x580>)
   2490a:	9307      	str	r3, [sp, #28]
   2490c:	e6d8      	b.n	246c0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x21c>
            ei_free(buffer);
   2490e:	f001 fbf9 	bl	26104 <_Z7ei_freePv>
   24912:	e6d5      	b.n	246c0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x21c>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
   24914:	4b44      	ldr	r3, [pc, #272]	; (24a28 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x584>)
   24916:	9307      	str	r3, [sp, #28]
   24918:	e6c5      	b.n	246a6 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x202>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
   2491a:	4b44      	ldr	r3, [pc, #272]	; (24a2c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x588>)
   2491c:	9307      	str	r3, [sp, #28]
   2491e:	e6d0      	b.n	246c2 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x21e>
        kiss_fft_cpx *fft_output = (kiss_fft_cpx*)ei_dsp_malloc(n_fft_out_features * sizeof(kiss_fft_cpx));
   24920:	9810      	ldr	r0, [sp, #64]	; 0x40
   24922:	f001 fbdd 	bl	260e0 <_Z9ei_mallocj>
        if (!fft_output) {
   24926:	4604      	mov	r4, r0
   24928:	2800      	cmp	r0, #0
   2492a:	f000 808f 	beq.w	24a4c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x5a8>
        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
   2492e:	ab20      	add	r3, sp, #128	; 0x80
   24930:	9300      	str	r3, [sp, #0]
   24932:	2300      	movs	r3, #0
   24934:	9808      	ldr	r0, [sp, #32]
   24936:	461a      	mov	r2, r3
   24938:	4619      	mov	r1, r3
   2493a:	f003 fbad 	bl	28098 <kiss_fftr_alloc>
        if (!cfg) {
   2493e:	4607      	mov	r7, r0
   24940:	2800      	cmp	r0, #0
   24942:	d075      	beq.n	24a30 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x58c>
        kiss_fftr(cfg, fft_input, fft_output);
   24944:	4622      	mov	r2, r4
   24946:	4641      	mov	r1, r8
   24948:	f003 fc86 	bl	28258 <kiss_fftr>
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
   2494c:	e9cd a811 	strd	sl, r8, [sp, #68]	; 0x44
   24950:	ee0a 4a10 	vmov	s20, r4
   24954:	4626      	mov	r6, r4
   24956:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
   2495a:	2500      	movs	r5, #0
   2495c:	465c      	mov	r4, fp
   2495e:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   24962:	6830      	ldr	r0, [r6, #0]
   24964:	f7f4 f87e 	bl	18a64 <__aeabi_f2d>
   24968:	4680      	mov	r8, r0
   2496a:	6870      	ldr	r0, [r6, #4]
   2496c:	4689      	mov	r9, r1
   2496e:	f7f4 f879 	bl	18a64 <__aeabi_f2d>
   24972:	4602      	mov	r2, r0
   24974:	460b      	mov	r3, r1
   24976:	f7f4 f8cd 	bl	18b14 <__aeabi_dmul>
   2497a:	4642      	mov	r2, r8
   2497c:	4682      	mov	sl, r0
   2497e:	468b      	mov	fp, r1
   24980:	464b      	mov	r3, r9
   24982:	4640      	mov	r0, r8
   24984:	4649      	mov	r1, r9
   24986:	f7f4 f8c5 	bl	18b14 <__aeabi_dmul>
   2498a:	4602      	mov	r2, r0
   2498c:	460b      	mov	r3, r1
            output[ix] = sqrt(pow(fft_output[ix].r, 2) + pow(fft_output[ix].i, 2));
   2498e:	4650      	mov	r0, sl
   24990:	4659      	mov	r1, fp
   24992:	f7f3 ff09 	bl	187a8 <__adddf3>
   24996:	f7f4 fb95 	bl	190c4 <__aeabi_d2f>
   2499a:	ee00 0a10 	vmov	s0, r0
    if (in >= 0.0f)
   2499e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   249a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   249a6:	db2a      	blt.n	249fe <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x55a>
      *pOut = sqrtf(in);
   249a8:	eeb5 0a40 	vcmp.f32	s0, #0.0
   249ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   249b0:	d445      	bmi.n	24a3e <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x59a>
   249b2:	eef1 7ac0 	vsqrt.f32	s15, s0
   249b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
   249b8:	3501      	adds	r5, #1
   249ba:	42ac      	cmp	r4, r5
   249bc:	f106 0608 	add.w	r6, r6, #8
            output[ix] = sqrt(pow(fft_output[ix].r, 2) + pow(fft_output[ix].i, 2));
   249c0:	ece3 7a01 	vstmia	r3!, {s15}
   249c4:	930e      	str	r3, [sp, #56]	; 0x38
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
   249c6:	d8cc      	bhi.n	24962 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x4be>
        ei_dsp_free(cfg, kiss_fftr_mem_length);
   249c8:	e9dd a811 	ldrd	sl, r8, [sp, #68]	; 0x44
   249cc:	4638      	mov	r0, r7
   249ce:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
   249d2:	f001 fb97 	bl	26104 <_Z7ei_freePv>
        ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
   249d6:	ee1a 0a10 	vmov	r0, s20
   249da:	f001 fb93 	bl	26104 <_Z7ei_freePv>
            ei_free(buffer);
   249de:	4640      	mov	r0, r8
        ei_dsp_free(cfg, kiss_fftr_mem_length);
   249e0:	46a3      	mov	fp, r4
   249e2:	f001 fb8f 	bl	26104 <_Z7ei_freePv>
        if (r != EIDSP_OK) {
   249e6:	e6cd      	b.n	24784 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2e0>
            EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
   249e8:	4b0e      	ldr	r3, [pc, #56]	; (24a24 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x580>)
   249ea:	9307      	str	r3, [sp, #28]
   249ec:	e661      	b.n	246b2 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x20e>
   249ee:	9007      	str	r0, [sp, #28]
   249f0:	e659      	b.n	246a6 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x202>
   249f2:	4b0e      	ldr	r3, [pc, #56]	; (24a2c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x588>)
   249f4:	9307      	str	r3, [sp, #28]
   249f6:	e656      	b.n	246a6 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x202>
            EI_DSP_MATRIX(signal_frame, 1, stack_frame_info.frame_length);
   249f8:	4b0a      	ldr	r3, [pc, #40]	; (24a24 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x580>)
   249fa:	9307      	str	r3, [sp, #28]
   249fc:	e656      	b.n	246ac <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x208>
      *pOut = 0.0f;
   249fe:	eef0 7a68 	vmov.f32	s15, s17
   24a02:	e7d8      	b.n	249b6 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x512>
   24a04:	0004314c 	.word	0x0004314c
   24a08:	000430bc 	.word	0x000430bc
   24a0c:	3ff00000 	.word	0x3ff00000
   24a10:	00000000 	.word	0x00000000
   24a14:	2edbe6ff 	.word	0x2edbe6ff
   24a18:	2edbe6ff 	.word	0x2edbe6ff
   24a1c:	0004313c 	.word	0x0004313c
   24a20:	00042cbc 	.word	0x00042cbc
   24a24:	fffffc16 	.word	0xfffffc16
   24a28:	fffffc11 	.word	0xfffffc11
   24a2c:	fffffc14 	.word	0xfffffc14
            ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
   24a30:	4620      	mov	r0, r4
   24a32:	f001 fb67 	bl	26104 <_Z7ei_freePv>
   24a36:	4b09      	ldr	r3, [pc, #36]	; (24a5c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x5b8>)
   24a38:	9307      	str	r3, [sp, #28]
   24a3a:	4645      	mov	r5, r8
            if (ret != EIDSP_OK) {
   24a3c:	e630      	b.n	246a0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x1fc>
      *pOut = sqrtf(in);
   24a3e:	f004 f8c1 	bl	28bc4 <sqrtf>
   24a42:	eef0 7a40 	vmov.f32	s15, s0
   24a46:	e7b6      	b.n	249b6 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x512>
	__throw_bad_function_call();
   24a48:	f7fc fd6c 	bl	21524 <_ZSt25__throw_bad_function_callv>
   24a4c:	4b03      	ldr	r3, [pc, #12]	; (24a5c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x5b8>)
   24a4e:	9307      	str	r3, [sp, #28]
   24a50:	4645      	mov	r5, r8
   24a52:	e625      	b.n	246a0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x1fc>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   24a54:	4802      	ldr	r0, [pc, #8]	; (24a60 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x5bc>)
   24a56:	9905      	ldr	r1, [sp, #20]
   24a58:	f011 ffd0 	bl	369fc <_ZSt24__throw_out_of_range_fmtPKcz>
   24a5c:	fffffc16 	.word	0xfffffc16
   24a60:	0003ff18 	.word	0x0003ff18

00024a64 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt>:
     *     In Hz, default is samplerate/2
     * @param dc_elimination Whether the first dc component should
     *     be eliminated or not.
     * @returns 0 if OK
     */
    static int mfcc(matrix_t *out_features, signal_t *signal,
   24a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24a68:	ed2d 8b04 	vpush	{d8-d9}
   24a6c:	461d      	mov	r5, r3
   24a6e:	b091      	sub	sp, #68	; 0x44
        uint32_t sampling_frequency, float frame_length, float frame_stride,
        uint8_t num_cepstral, uint16_t num_filters, uint16_t fft_length,
        uint32_t low_frequency, uint32_t high_frequency, bool dc_elimination,
        uint16_t version)
    {
        if (out_features->cols != num_cepstral) {
   24a70:	6883      	ldr	r3, [r0, #8]
    static int mfcc(matrix_t *out_features, signal_t *signal,
   24a72:	f8bd 9078 	ldrh.w	r9, [sp, #120]	; 0x78
   24a76:	f8bd b07c 	ldrh.w	fp, [sp, #124]	; 0x7c
   24a7a:	f8bd a08c 	ldrh.w	sl, [sp, #140]	; 0x8c
   24a7e:	4617      	mov	r7, r2
        if (out_features->cols != num_cepstral) {
   24a80:	42ab      	cmp	r3, r5
    static int mfcc(matrix_t *out_features, signal_t *signal,
   24a82:	f89d 2088 	ldrb.w	r2, [sp, #136]	; 0x88
   24a86:	9207      	str	r2, [sp, #28]
        if (out_features->cols != num_cepstral) {
   24a88:	f040 810a 	bne.w	24ca0 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x23c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

        matrix_size_t mfe_matrix_size =
   24a8c:	4604      	mov	r4, r0
   24a8e:	460e      	mov	r6, r1
        int32_t rows = processing::calculate_no_of_stack_frames(
   24a90:	6908      	ldr	r0, [r1, #16]
   24a92:	4652      	mov	r2, sl
   24a94:	4639      	mov	r1, r7
   24a96:	eeb0 8a40 	vmov.f32	s16, s0
   24a9a:	eef0 8a60 	vmov.f32	s17, s1
   24a9e:	f7fc f82d 	bl	20afc <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt.constprop.0>
                frame_length,
                frame_stride,
                num_filters,
                version);

        if (out_features->rows != mfe_matrix_size.rows) {
   24aa2:	f8d4 8004 	ldr.w	r8, [r4, #4]
   24aa6:	4580      	cmp	r8, r0
   24aa8:	f040 80fa 	bne.w	24ca0 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x23c>
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   24aac:	fb09 f008 	mul.w	r0, r9, r8
   24ab0:	2101      	movs	r1, #1
   24ab2:	0080      	lsls	r0, r0, #2
   24ab4:	f001 fb16 	bl	260e4 <_Z9ei_callocjj>
            buffer_managed_by_me = true;
   24ab8:	2101      	movs	r1, #1
        rows = n_rows;
   24aba:	e9cd 0808 	strd	r0, r8, [sp, #32]
        cols = n_cols;
   24abe:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
            buffer_managed_by_me = true;
   24ac2:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
        }

        int ret = EIDSP_OK;

        // allocate some memory for the MFE result
        EI_DSP_MATRIX(features_matrix, mfe_matrix_size.rows, mfe_matrix_size.cols);
   24ac6:	2800      	cmp	r0, #0
   24ac8:	f000 80c6 	beq.w	24c58 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x1f4>
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   24acc:	ea4f 0088 	mov.w	r0, r8, lsl #2
   24ad0:	f001 fb08 	bl	260e4 <_Z9ei_callocjj>
            buffer_managed_by_me = true;
   24ad4:	2101      	movs	r1, #1
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   24ad6:	e9cd 080c 	strd	r0, r8, [sp, #48]	; 0x30
            buffer_managed_by_me = true;
   24ada:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
        cols = n_cols;
   24ade:	910e      	str	r1, [sp, #56]	; 0x38
        if (!features_matrix.buffer) {
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
        }

        EI_DSP_MATRIX(energy_matrix, mfe_matrix_size.rows, 1);
   24ae0:	2800      	cmp	r0, #0
   24ae2:	f000 80d4 	beq.w	24c8e <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x22a>
        if (!energy_matrix.buffer) {
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
        }

        ret = mfe(&features_matrix, &energy_matrix, signal,
   24ae6:	9b21      	ldr	r3, [sp, #132]	; 0x84
   24ae8:	9303      	str	r3, [sp, #12]
   24aea:	9b20      	ldr	r3, [sp, #128]	; 0x80
   24aec:	9302      	str	r3, [sp, #8]
   24aee:	4632      	mov	r2, r6
   24af0:	e9cd 9b00 	strd	r9, fp, [sp]
   24af4:	f8cd a010 	str.w	sl, [sp, #16]
   24af8:	eef0 0a68 	vmov.f32	s1, s17
   24afc:	eeb0 0a48 	vmov.f32	s0, s16
   24b00:	463b      	mov	r3, r7
   24b02:	a90c      	add	r1, sp, #48	; 0x30
   24b04:	a808      	add	r0, sp, #32
   24b06:	f7ff fccd 	bl	244a4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt>
            sampling_frequency, frame_length, frame_stride, num_filters, fft_length,
            low_frequency, high_frequency, version);
        if (ret != EIDSP_OK) {
   24b0a:	4606      	mov	r6, r0
   24b0c:	2800      	cmp	r0, #0
   24b0e:	f040 80aa 	bne.w	24c66 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x202>
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   24b12:	e9dd 7909 	ldrd	r7, r9, [sp, #36]	; 0x24
   24b16:	fb07 f009 	mul.w	r0, r7, r9
   24b1a:	b3c0      	cbz	r0, 24b8e <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x12a>
   24b1c:	9908      	ldr	r1, [sp, #32]
        r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
   24b1e:	ed9f 2aa8 	vldr	s4, [pc, #672]	; 24dc0 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x35c>
   24b22:	eddf 2aa8 	vldr	s5, [pc, #672]	; 24dc4 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x360>
        t = fmaf(0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
   24b26:	ed9f 3aa8 	vldr	s6, [pc, #672]	; 24dc8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x364>
   24b2a:	eddf 3aa8 	vldr	s7, [pc, #672]	; 24dcc <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x368>
        i = (float)e * 1.19209290e-7f; // 0x1.0p-23
   24b2e:	ed9f 4aa8 	vldr	s8, [pc, #672]	; 24dd0 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x36c>
        r = fmaf(i, 0.693147182f, r); // 0x1.62e430p-1 // log(2)
   24b32:	eddf 4aa8 	vldr	s9, [pc, #672]	; 24dd4 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x370>
        e = (g - 0x3f2aaaab) & 0xff800000;
   24b36:	f8df e2ac 	ldr.w	lr, [pc, #684]	; 24de4 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x380>
   24b3a:	f8df c2ac 	ldr.w	ip, [pc, #684]	; 24de8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x384>
        f = m - 1.0f;
   24b3e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
   24b42:	eb01 0080 	add.w	r0, r1, r0, lsl #2
        g = (int32_t) * ((int32_t *)&a);
   24b46:	680a      	ldr	r2, [r1, #0]
        e = (g - 0x3f2aaaab) & 0xff800000;
   24b48:	eb02 030e 	add.w	r3, r2, lr
   24b4c:	ea03 030c 	and.w	r3, r3, ip
        g = g - e;
   24b50:	1ad2      	subs	r2, r2, r3
   24b52:	ee07 2a90 	vmov	s15, r2
        f = m - 1.0f;
   24b56:	ee77 7ac5 	vsub.f32	s15, s15, s10
        r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
   24b5a:	eef0 5a62 	vmov.f32	s11, s5
        t = fmaf(0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
   24b5e:	eef0 6a63 	vmov.f32	s13, s7
        r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
   24b62:	eee2 5a27 	vfma.f32	s11, s4, s15
        t = fmaf(0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
   24b66:	eee3 6a27 	vfma.f32	s13, s6, s15
        s = f * f;
   24b6a:	ee27 6aa7 	vmul.f32	s12, s15, s15
        i = (float)e * 1.19209290e-7f; // 0x1.0p-23
   24b6e:	ee07 3a10 	vmov	s14, r3
        r = fmaf(r, s, t);
   24b72:	eee5 6a86 	vfma.f32	s13, s11, s12
        i = (float)e * 1.19209290e-7f; // 0x1.0p-23
   24b76:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        r = fmaf(r, s, f);
   24b7a:	eee6 7a86 	vfma.f32	s15, s13, s12
        i = (float)e * 1.19209290e-7f; // 0x1.0p-23
   24b7e:	ee27 7a04 	vmul.f32	s14, s14, s8
        r = fmaf(i, 0.693147182f, r); // 0x1.62e430p-1 // log(2)
   24b82:	eee7 7a24 	vfma.f32	s15, s14, s9
            matrix->buffer[ix] = numpy::log(matrix->buffer[ix]);
   24b86:	ece1 7a01 	vstmia	r1!, {s15}
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   24b8a:	4288      	cmp	r0, r1
   24b8c:	d1db      	bne.n	24b46 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0xe2>
        for (size_t row = 0; row < matrix->rows; row++) {
   24b8e:	2f00      	cmp	r7, #0
   24b90:	d069      	beq.n	24c66 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x202>
   24b92:	4623      	mov	r3, r4
                input[ix] = input[ix] * sqrt(1.0f / static_cast<float>(2 * N));
   24b94:	ed9f 9a90 	vldr	s18, [pc, #576]	; 24dd8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x374>
   24b98:	464c      	mov	r4, r9
            input[0] = input[0] * sqrt(1.0f / static_cast<float>(4 * N));
   24b9a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
        for (size_t row = 0; row < matrix->rows; row++) {
   24b9e:	f04f 0a00 	mov.w	sl, #0
   24ba2:	4699      	mov	r9, r3
        if (N == 0) {
   24ba4:	2c00      	cmp	r4, #0
   24ba6:	d051      	beq.n	24c4c <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x1e8>
            int r = dct2(matrix->buffer + (row * matrix->cols), matrix->cols, normalization);
   24ba8:	9b08      	ldr	r3, [sp, #32]
   24baa:	fb04 f70a 	mul.w	r7, r4, sl
   24bae:	eb03 0787 	add.w	r7, r3, r7, lsl #2
        int ret = ei::dct::transform(input, N);
   24bb2:	4621      	mov	r1, r4
   24bb4:	4638      	mov	r0, r7
   24bb6:	f003 fbc7 	bl	28348 <_ZN2ei3dct9transformEPfj>
        if (ret != EIDSP_OK) {
   24bba:	2800      	cmp	r0, #0
   24bbc:	d169      	bne.n	24c92 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x22e>
   24bbe:	463b      	mov	r3, r7
   24bc0:	00a2      	lsls	r2, r4, #2
   24bc2:	eb07 0884 	add.w	r8, r7, r4, lsl #2
            input[ix] *= 2;
   24bc6:	edd3 7a00 	vldr	s15, [r3]
   24bca:	ee77 7aa7 	vadd.f32	s15, s15, s15
   24bce:	ece3 7a01 	vstmia	r3!, {s15}
        for (size_t ix = 0; ix < N; ix++) {
   24bd2:	4598      	cmp	r8, r3
   24bd4:	d1f7      	bne.n	24bc6 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x162>
            input[0] = input[0] * sqrt(1.0f / static_cast<float>(4 * N));
   24bd6:	ee07 2a90 	vmov	s15, r2
   24bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
   24bde:	ed97 8a00 	vldr	s16, [r7]
   24be2:	ee88 0aa7 	vdiv.f32	s0, s17, s15
    if (in >= 0.0f)
   24be6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   24bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   24bee:	f2c0 80c6 	blt.w	24d7e <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x31a>
      *pOut = sqrtf(in);
   24bf2:	eeb5 0a40 	vcmp.f32	s0, #0.0
   24bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   24bfa:	f100 80cd 	bmi.w	24d98 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x334>
   24bfe:	eef1 7ac0 	vsqrt.f32	s15, s0
            for (size_t ix = 1; ix < N; ix++) {
   24c02:	2c01      	cmp	r4, #1
            input[0] = input[0] * sqrt(1.0f / static_cast<float>(4 * N));
   24c04:	ee28 8a27 	vmul.f32	s16, s16, s15
   24c08:	ed87 8a00 	vstr	s16, [r7]
            for (size_t ix = 1; ix < N; ix++) {
   24c0c:	d01d      	beq.n	24c4a <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x1e6>
                input[ix] = input[ix] * sqrt(1.0f / static_cast<float>(2 * N));
   24c0e:	0064      	lsls	r4, r4, #1
   24c10:	ee07 4a90 	vmov	s15, r4
   24c14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   24c18:	ee88 8aa7 	vdiv.f32	s16, s17, s15
   24c1c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   24c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   24c24:	f2c0 80ae 	blt.w	24d84 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x320>
   24c28:	eeb5 8a40 	vcmp.f32	s16, #0.0
   24c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   24c30:	f100 80b7 	bmi.w	24da2 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x33e>
   24c34:	eeb1 7ac8 	vsqrt.f32	s14, s16
   24c38:	1d3b      	adds	r3, r7, #4
   24c3a:	edd3 7a00 	vldr	s15, [r3]
   24c3e:	ee67 7a87 	vmul.f32	s15, s15, s14
   24c42:	ece3 7a01 	vstmia	r3!, {s15}
            for (size_t ix = 1; ix < N; ix++) {
   24c46:	4598      	cmp	r8, r3
   24c48:	d1f7      	bne.n	24c3a <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x1d6>
        for (size_t row = 0; row < matrix->rows; row++) {
   24c4a:	9f09      	ldr	r7, [sp, #36]	; 0x24
   24c4c:	f10a 0a01 	add.w	sl, sl, #1
   24c50:	45ba      	cmp	sl, r7
   24c52:	d227      	bcs.n	24ca4 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x240>
            int r = dct2(matrix->buffer + (row * matrix->cols), matrix->cols, normalization);
   24c54:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   24c56:	e7a5      	b.n	24ba4 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x140>
        EI_DSP_MATRIX(features_matrix, mfe_matrix_size.rows, mfe_matrix_size.cols);
   24c58:	4e60      	ldr	r6, [pc, #384]	; (24ddc <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x378>)
                *(out_features->buffer + (num_cepstral * row) + i) = *(features_matrix.buffer + (features_matrix.cols * row) + i);
            }
        }

        return EIDSP_OK;
    }
   24c5a:	4630      	mov	r0, r6
   24c5c:	b011      	add	sp, #68	; 0x44
   24c5e:	ecbd 8b04 	vpop	{d8-d9}
   24c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (buffer && buffer_managed_by_me) {
   24c66:	990c      	ldr	r1, [sp, #48]	; 0x30
   24c68:	b111      	cbz	r1, 24c70 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x20c>
   24c6a:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   24c6e:	b99b      	cbnz	r3, 24c98 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x234>
   24c70:	9808      	ldr	r0, [sp, #32]
   24c72:	2800      	cmp	r0, #0
   24c74:	d0f1      	beq.n	24c5a <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x1f6>
   24c76:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   24c7a:	2b00      	cmp	r3, #0
   24c7c:	d0ed      	beq.n	24c5a <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x1f6>
            ei_free(buffer);
   24c7e:	f001 fa41 	bl	26104 <_Z7ei_freePv>
   24c82:	4630      	mov	r0, r6
   24c84:	b011      	add	sp, #68	; 0x44
   24c86:	ecbd 8b04 	vpop	{d8-d9}
   24c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        EI_DSP_MATRIX(energy_matrix, mfe_matrix_size.rows, 1);
   24c8e:	4e53      	ldr	r6, [pc, #332]	; (24ddc <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x378>)
   24c90:	e7ee      	b.n	24c70 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x20c>
        if (buffer && buffer_managed_by_me) {
   24c92:	990c      	ldr	r1, [sp, #48]	; 0x30
        int ret = ei::dct::transform(input, N);
   24c94:	4606      	mov	r6, r0
   24c96:	e7e7      	b.n	24c68 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x204>
            ei_free(buffer);
   24c98:	4608      	mov	r0, r1
   24c9a:	f001 fa33 	bl	26104 <_Z7ei_freePv>
   24c9e:	e7e7      	b.n	24c70 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x20c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
   24ca0:	4e4f      	ldr	r6, [pc, #316]	; (24de0 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x37c>)
   24ca2:	e7da      	b.n	24c5a <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x1f6>
        if (dc_elimination) {
   24ca4:	9b07      	ldr	r3, [sp, #28]
   24ca6:	464c      	mov	r4, r9
   24ca8:	2b00      	cmp	r3, #0
   24caa:	d05f      	beq.n	24d6c <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x308>
            for (size_t row = 0; row < features_matrix.rows; row++) {
   24cac:	2f00      	cmp	r7, #0
   24cae:	d0da      	beq.n	24c66 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x202>
                features_matrix.buffer[row * features_matrix.cols] = numpy::log(energy_matrix.buffer[row]);
   24cb0:	990c      	ldr	r1, [sp, #48]	; 0x30
   24cb2:	f8dd e020 	ldr.w	lr, [sp, #32]
   24cb6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
        r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
   24cba:	ed9f 2a41 	vldr	s4, [pc, #260]	; 24dc0 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x35c>
   24cbe:	eddf 2a41 	vldr	s5, [pc, #260]	; 24dc4 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x360>
        t = fmaf(0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
   24cc2:	ed9f 3a41 	vldr	s6, [pc, #260]	; 24dc8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x364>
   24cc6:	eddf 3a41 	vldr	s7, [pc, #260]	; 24dcc <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x368>
        i = (float)e * 1.19209290e-7f; // 0x1.0p-23
   24cca:	ed9f 4a41 	vldr	s8, [pc, #260]	; 24dd0 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x36c>
        r = fmaf(i, 0.693147182f, r); // 0x1.62e430p-1 // log(2)
   24cce:	eddf 4a41 	vldr	s9, [pc, #260]	; 24dd4 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x370>
        e = (g - 0x3f2aaaab) & 0xff800000;
   24cd2:	f8df b110 	ldr.w	fp, [pc, #272]	; 24de4 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x380>
        f = m - 1.0f;
   24cd6:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
   24cda:	468c      	mov	ip, r1
   24cdc:	ea4f 0988 	mov.w	r9, r8, lsl #2
   24ce0:	4670      	mov	r0, lr
   24ce2:	eb01 0a87 	add.w	sl, r1, r7, lsl #2
   24ce6:	f85c 3b04 	ldr.w	r3, [ip], #4
        e = (g - 0x3f2aaaab) & 0xff800000;
   24cea:	eb03 020b 	add.w	r2, r3, fp
   24cee:	0dd2      	lsrs	r2, r2, #23
   24cf0:	05d2      	lsls	r2, r2, #23
        g = g - e;
   24cf2:	1a9b      	subs	r3, r3, r2
   24cf4:	ee07 3a90 	vmov	s15, r3
        f = m - 1.0f;
   24cf8:	ee77 7ac5 	vsub.f32	s15, s15, s10
        r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
   24cfc:	eef0 5a62 	vmov.f32	s11, s5
        t = fmaf(0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
   24d00:	eef0 6a63 	vmov.f32	s13, s7
        r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
   24d04:	eee2 5a27 	vfma.f32	s11, s4, s15
            for (size_t row = 0; row < features_matrix.rows; row++) {
   24d08:	45e2      	cmp	sl, ip
        t = fmaf(0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
   24d0a:	eee3 6a27 	vfma.f32	s13, s6, s15
        s = f * f;
   24d0e:	ee27 6aa7 	vmul.f32	s12, s15, s15
        i = (float)e * 1.19209290e-7f; // 0x1.0p-23
   24d12:	ee07 2a10 	vmov	s14, r2
        r = fmaf(r, s, t);
   24d16:	eee5 6a86 	vfma.f32	s13, s11, s12
        i = (float)e * 1.19209290e-7f; // 0x1.0p-23
   24d1a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        r = fmaf(r, s, f);
   24d1e:	eee6 7a86 	vfma.f32	s15, s13, s12
        i = (float)e * 1.19209290e-7f; // 0x1.0p-23
   24d22:	ee27 7a04 	vmul.f32	s14, s14, s8
        r = fmaf(i, 0.693147182f, r); // 0x1.62e430p-1 // log(2)
   24d26:	eee7 7a24 	vfma.f32	s15, s14, s9
                features_matrix.buffer[row * features_matrix.cols] = numpy::log(energy_matrix.buffer[row]);
   24d2a:	edc0 7a00 	vstr	s15, [r0]
            for (size_t row = 0; row < features_matrix.rows; row++) {
   24d2e:	4448      	add	r0, r9
   24d30:	d1d9      	bne.n	24ce6 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x282>
   24d32:	2d00      	cmp	r5, #0
   24d34:	d098      	beq.n	24c68 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x204>
                *(out_features->buffer + (num_cepstral * row) + i) = *(features_matrix.buffer + (features_matrix.cols * row) + i);
   24d36:	f8d4 b000 	ldr.w	fp, [r4]
   24d3a:	2400      	movs	r4, #0
   24d3c:	ea4f 0a88 	mov.w	sl, r8, lsl #2
   24d40:	eb0e 0085 	add.w	r0, lr, r5, lsl #2
   24d44:	46a1      	mov	r9, r4
   24d46:	46a4      	mov	ip, r4
            for(int i = 0; i < num_cepstral; i++) {
   24d48:	eb0e 0389 	add.w	r3, lr, r9, lsl #2
   24d4c:	eb0b 0284 	add.w	r2, fp, r4, lsl #2
                *(out_features->buffer + (num_cepstral * row) + i) = *(features_matrix.buffer + (features_matrix.cols * row) + i);
   24d50:	ecf3 7a01 	vldmia	r3!, {s15}
            for(int i = 0; i < num_cepstral; i++) {
   24d54:	4298      	cmp	r0, r3
                *(out_features->buffer + (num_cepstral * row) + i) = *(features_matrix.buffer + (features_matrix.cols * row) + i);
   24d56:	ece2 7a01 	vstmia	r2!, {s15}
            for(int i = 0; i < num_cepstral; i++) {
   24d5a:	d1f9      	bne.n	24d50 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x2ec>
        for (size_t row = 0; row < features_matrix.rows; row++) {
   24d5c:	f10c 0c01 	add.w	ip, ip, #1
   24d60:	45bc      	cmp	ip, r7
   24d62:	44c1      	add	r9, r8
   24d64:	442c      	add	r4, r5
   24d66:	4450      	add	r0, sl
   24d68:	d3ee      	bcc.n	24d48 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x2e4>
   24d6a:	e77d      	b.n	24c68 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x204>
   24d6c:	2f00      	cmp	r7, #0
   24d6e:	f43f af7a 	beq.w	24c66 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x202>
                features_matrix.buffer[row * features_matrix.cols] = numpy::log(energy_matrix.buffer[row]);
   24d72:	990c      	ldr	r1, [sp, #48]	; 0x30
   24d74:	f8dd e020 	ldr.w	lr, [sp, #32]
   24d78:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   24d7c:	e7d9      	b.n	24d32 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x2ce>
      *pOut = 0.0f;
   24d7e:	eef0 7a49 	vmov.f32	s15, s18
   24d82:	e73e      	b.n	24c02 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x19e>
   24d84:	1d3b      	adds	r3, r7, #4
                input[ix] = input[ix] * sqrt(1.0f / static_cast<float>(2 * N));
   24d86:	edd3 7a00 	vldr	s15, [r3]
   24d8a:	ee67 7a89 	vmul.f32	s15, s15, s18
   24d8e:	ece3 7a01 	vstmia	r3!, {s15}
            for (size_t ix = 1; ix < N; ix++) {
   24d92:	4598      	cmp	r8, r3
   24d94:	d1f7      	bne.n	24d86 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x322>
   24d96:	e758      	b.n	24c4a <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x1e6>
      *pOut = sqrtf(in);
   24d98:	f003 ff14 	bl	28bc4 <sqrtf>
   24d9c:	eef0 7a40 	vmov.f32	s15, s0
   24da0:	e72f      	b.n	24c02 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x19e>
   24da2:	3704      	adds	r7, #4
   24da4:	eeb0 0a48 	vmov.f32	s0, s16
                input[ix] = input[ix] * sqrt(1.0f / static_cast<float>(2 * N));
   24da8:	edd7 9a00 	vldr	s19, [r7]
   24dac:	f003 ff0a 	bl	28bc4 <sqrtf>
   24db0:	ee20 0a29 	vmul.f32	s0, s0, s19
   24db4:	eca7 0a01 	vstmia	r7!, {s0}
            for (size_t ix = 1; ix < N; ix++) {
   24db8:	45b8      	cmp	r8, r7
   24dba:	d1f3      	bne.n	24da4 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x340>
   24dbc:	e745      	b.n	24c4a <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt+0x1e6>
   24dbe:	bf00      	nop
   24dc0:	3e6c6078 	.word	0x3e6c6078
   24dc4:	be8ef46d 	.word	0xbe8ef46d
   24dc8:	3ea9e51a 	.word	0x3ea9e51a
   24dcc:	beff712d 	.word	0xbeff712d
   24dd0:	34000000 	.word	0x34000000
   24dd4:	3f317218 	.word	0x3f317218
   24dd8:	00000000 	.word	0x00000000
   24ddc:	fffffc16 	.word	0xfffffc16
   24de0:	fffffc14 	.word	0xfffffc14
   24de4:	c0d55555 	.word	0xc0d55555
   24de8:	ff800000 	.word	0xff800000

00024dec <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:
__attribute__((unused)) int extract_mfcc_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float sampling_frequency) {
   24dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24df0:	ed2d 8b04 	vpush	{d8-d9}
   24df4:	b09f      	sub	sp, #124	; 0x7c
    ei_dsp_config_mfcc_t config = *((ei_dsp_config_mfcc_t*)config_ptr);
   24df6:	6953      	ldr	r3, [r2, #20]
   24df8:	9309      	str	r3, [sp, #36]	; 0x24
   24dfa:	6993      	ldr	r3, [r2, #24]
   24dfc:	930a      	str	r3, [sp, #40]	; 0x28
__attribute__((unused)) int extract_mfcc_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float sampling_frequency) {
   24dfe:	460d      	mov	r5, r1
    ei_dsp_config_mfcc_t config = *((ei_dsp_config_mfcc_t*)config_ptr);
   24e00:	69d3      	ldr	r3, [r2, #28]
    if (config.axes != 1) {
   24e02:	6851      	ldr	r1, [r2, #4]
    ei_dsp_config_mfcc_t config = *((ei_dsp_config_mfcc_t*)config_ptr);
   24e04:	930b      	str	r3, [sp, #44]	; 0x2c
   24e06:	6a13      	ldr	r3, [r2, #32]
   24e08:	9308      	str	r3, [sp, #32]
    if (config.axes != 1) {
   24e0a:	2901      	cmp	r1, #1
    ei_dsp_config_mfcc_t config = *((ei_dsp_config_mfcc_t*)config_ptr);
   24e0c:	6a53      	ldr	r3, [r2, #36]	; 0x24
   24e0e:	f8b2 8000 	ldrh.w	r8, [r2]
   24e12:	f8d2 9008 	ldr.w	r9, [r2, #8]
   24e16:	ed92 8a03 	vldr	s16, [r2, #12]
   24e1a:	edd2 8a04 	vldr	s17, [r2, #16]
   24e1e:	6ad7      	ldr	r7, [r2, #44]	; 0x2c
   24e20:	9307      	str	r3, [sp, #28]
__attribute__((unused)) int extract_mfcc_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float sampling_frequency) {
   24e22:	4604      	mov	r4, r0
    ei_dsp_config_mfcc_t config = *((ei_dsp_config_mfcc_t*)config_ptr);
   24e24:	6a90      	ldr	r0, [r2, #40]	; 0x28
    if (config.axes != 1) {
   24e26:	f040 80c3 	bne.w	24fb0 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c4>
    if((config.implementation_version == 0) || (config.implementation_version > 3)) {
   24e2a:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   24e2e:	2b02      	cmp	r3, #2
   24e30:	f200 80c0 	bhi.w	24fb4 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c8>
    if (signal->total_length == 0) {
   24e34:	6923      	ldr	r3, [r4, #16]
   24e36:	2b00      	cmp	r3, #0
   24e38:	f000 80b8 	beq.w	24fac <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c0>
    const uint32_t frequency = static_cast<uint32_t>(sampling_frequency);
   24e3c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
            _prev_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
   24e40:	ea4f 0b87 	mov.w	fp, r7, lsl #2
            : _signal(signal), _shift(shift), _cof(cof), _rescale(rescale)
   24e44:	f04f 0a00 	mov.w	sl, #0
   24e48:	9019      	str	r0, [sp, #100]	; 0x64
            _prev_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
   24e4a:	4658      	mov	r0, fp
   24e4c:	9106      	str	r1, [sp, #24]
   24e4e:	eeb0 9a67 	vmov.f32	s18, s15
            : _signal(signal), _shift(shift), _cof(cof), _rescale(rescale)
   24e52:	e9cd 4717 	strd	r4, r7, [sp, #92]	; 0x5c
   24e56:	f88d a074 	strb.w	sl, [sp, #116]	; 0x74
            _prev_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
   24e5a:	f001 f943 	bl	260e4 <_Z9ei_callocjj>
            _end_of_signal_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
   24e5e:	9906      	ldr	r1, [sp, #24]
            _prev_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
   24e60:	901a      	str	r0, [sp, #104]	; 0x68
            _end_of_signal_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
   24e62:	4658      	mov	r0, fp
   24e64:	f001 f93e 	bl	260e4 <_Z9ei_callocjj>
                _shift = signal->total_length + shift;
   24e68:	6923      	ldr	r3, [r4, #16]
            if (shift < 0) {
   24e6a:	4557      	cmp	r7, sl
                _shift = signal->total_length + shift;
   24e6c:	bfbc      	itt	lt
   24e6e:	18fa      	addlt	r2, r7, r3
   24e70:	9218      	strlt	r2, [sp, #96]	; 0x60
            if (!_prev_buffer || !_end_of_signal_buffer) return;
   24e72:	9a1a      	ldr	r2, [sp, #104]	; 0x68
            _end_of_signal_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
   24e74:	e9cd 0a1b 	strd	r0, sl, [sp, #108]	; 0x6c
            if (!_prev_buffer || !_end_of_signal_buffer) return;
   24e78:	2a00      	cmp	r2, #0
   24e7a:	f000 8087 	beq.w	24f8c <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1a0>
   24e7e:	2800      	cmp	r0, #0
   24e80:	f000 8084 	beq.w	24f8c <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1a0>
            signal->get_data(signal->total_length - shift, shift, _end_of_signal_buffer);
   24e84:	1bdb      	subs	r3, r3, r7
   24e86:	9312      	str	r3, [sp, #72]	; 0x48
      if (_M_empty())
   24e88:	68a3      	ldr	r3, [r4, #8]
   24e8a:	900c      	str	r0, [sp, #48]	; 0x30
   24e8c:	970e      	str	r7, [sp, #56]	; 0x38
   24e8e:	2b00      	cmp	r3, #0
   24e90:	f000 8093 	beq.w	24fba <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1ce>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   24e94:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
   24e98:	af12      	add	r7, sp, #72	; 0x48
   24e9a:	aa0e      	add	r2, sp, #56	; 0x38
   24e9c:	465b      	mov	r3, fp
   24e9e:	68e6      	ldr	r6, [r4, #12]
   24ea0:	9206      	str	r2, [sp, #24]
   24ea2:	4639      	mov	r1, r7
   24ea4:	4620      	mov	r0, r4
   24ea6:	47b0      	blx	r6
    preemphasized_audio_signal.total_length = signal->total_length;
   24ea8:	6923      	ldr	r3, [r4, #16]
   24eaa:	9a06      	ldr	r2, [sp, #24]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   24eac:	4944      	ldr	r1, [pc, #272]	; (24fc0 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1d4>)
   24eae:	910e      	str	r1, [sp, #56]	; 0x38
   24eb0:	e892 0003 	ldmia.w	r2, {r0, r1}
   24eb4:	9316      	str	r3, [sp, #88]	; 0x58
   24eb6:	e88b 0003 	stmia.w	fp, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   24eba:	e887 0003 	stmia.w	r7, {r0, r1}
    preemphasis = &pre;
   24ebe:	4a41      	ldr	r2, [pc, #260]	; (24fc4 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1d8>)
   24ec0:	4c41      	ldr	r4, [pc, #260]	; (24fc8 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1dc>)
   24ec2:	9414      	str	r4, [sp, #80]	; 0x50
        size_t signal_length,
        uint32_t sampling_frequency,
        float frame_length, float frame_stride, uint16_t num_cepstral,
        uint16_t version)
    {
        int32_t rows = processing::calculate_no_of_stack_frames(
   24ec4:	4618      	mov	r0, r3
   24ec6:	4b41      	ldr	r3, [pc, #260]	; (24fcc <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1e0>)
   24ec8:	9315      	str	r3, [sp, #84]	; 0x54
   24eca:	ab17      	add	r3, sp, #92	; 0x5c
   24ecc:	6013      	str	r3, [r2, #0]
   24ece:	ee19 1a10 	vmov	r1, s18
   24ed2:	4642      	mov	r2, r8
   24ed4:	eef0 0a68 	vmov.f32	s1, s17
   24ed8:	eeb0 0a48 	vmov.f32	s0, s16
   24edc:	f7fb fe0e 	bl	20afc <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt.constprop.0>
    if (out_matrix_size.rows * out_matrix_size.cols > output_matrix->rows * output_matrix->cols) {
   24ee0:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
   24ee4:	fa1f f389 	uxth.w	r3, r9
   24ee8:	fb03 fb00 	mul.w	fp, r3, r0
   24eec:	4604      	mov	r4, r0
   24eee:	fb02 f001 	mul.w	r0, r2, r1
   24ef2:	4583      	cmp	fp, r0
   24ef4:	d83e      	bhi.n	24f74 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x188>
    output_matrix->cols = out_matrix_size.cols;
   24ef6:	e9c5 4301 	strd	r4, r3, [r5, #4]
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
   24efa:	9b07      	ldr	r3, [sp, #28]
   24efc:	9303      	str	r3, [sp, #12]
   24efe:	9b08      	ldr	r3, [sp, #32]
   24f00:	9302      	str	r3, [sp, #8]
   24f02:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   24f06:	9301      	str	r3, [sp, #4]
   24f08:	2601      	movs	r6, #1
   24f0a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   24f0e:	9300      	str	r3, [sp, #0]
   24f10:	ee19 2a10 	vmov	r2, s18
   24f14:	eef0 0a68 	vmov.f32	s1, s17
   24f18:	eeb0 0a48 	vmov.f32	s0, s16
   24f1c:	f8cd 8014 	str.w	r8, [sp, #20]
   24f20:	fa5f f389 	uxtb.w	r3, r9
   24f24:	9604      	str	r6, [sp, #16]
   24f26:	4639      	mov	r1, r7
   24f28:	4628      	mov	r0, r5
   24f2a:	f7ff fd9b 	bl	24a64 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt>
    if (ret != EIDSP_OK) {
   24f2e:	4604      	mov	r4, r0
   24f30:	bb88      	cbnz	r0, 24f96 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1aa>
    ret = speechpy::processing::cmvnw(output_matrix, config.win_size, true, false);
   24f32:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
        if (win_size == 0) {
   24f36:	b131      	cbz	r1, 24f46 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x15a>
   24f38:	4632      	mov	r2, r6
   24f3a:	4603      	mov	r3, r0
   24f3c:	4628      	mov	r0, r5
   24f3e:	f7fb fecf 	bl	20ce0 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0>
    if (ret != EIDSP_OK) {
   24f42:	4606      	mov	r6, r0
   24f44:	bb60      	cbnz	r0, 24fa0 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b4>
    output_matrix->rows = 1;
   24f46:	2301      	movs	r3, #1
   24f48:	e9c5 3b01 	strd	r3, fp, [r5, #4]
      if (_M_manager)
   24f4c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   24f4e:	b11b      	cbz	r3, 24f58 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x16c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   24f50:	2203      	movs	r2, #3
   24f52:	4639      	mov	r1, r7
   24f54:	4638      	mov	r0, r7
   24f56:	4798      	blx	r3
            if (_prev_buffer) {
   24f58:	981a      	ldr	r0, [sp, #104]	; 0x68
   24f5a:	b108      	cbz	r0, 24f60 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x174>
                ei_dsp_free(_prev_buffer, _shift * sizeof(float));
   24f5c:	f001 f8d2 	bl	26104 <_Z7ei_freePv>
            if (_end_of_signal_buffer) {
   24f60:	981b      	ldr	r0, [sp, #108]	; 0x6c
   24f62:	b108      	cbz	r0, 24f68 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x17c>
                ei_dsp_free(_end_of_signal_buffer, _shift * sizeof(float));
   24f64:	f001 f8ce 	bl	26104 <_Z7ei_freePv>
}
   24f68:	4620      	mov	r0, r4
   24f6a:	b01f      	add	sp, #124	; 0x7c
   24f6c:	ecbd 8b04 	vpop	{d8-d9}
   24f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ei_printf("out_matrix = %dx%d\n", (int)output_matrix->rows, (int)output_matrix->cols);
   24f74:	4816      	ldr	r0, [pc, #88]	; (24fd0 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1e4>)
   24f76:	9306      	str	r3, [sp, #24]
   24f78:	f001 f896 	bl	260a8 <_Z9ei_printfPKcz>
        ei_printf("calculated size = %dx%d\n", (int)out_matrix_size.rows, (int)out_matrix_size.cols);
   24f7c:	9b06      	ldr	r3, [sp, #24]
   24f7e:	4815      	ldr	r0, [pc, #84]	; (24fd4 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1e8>)
   24f80:	4621      	mov	r1, r4
   24f82:	461a      	mov	r2, r3
   24f84:	f001 f890 	bl	260a8 <_Z9ei_printfPKcz>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
   24f88:	4c13      	ldr	r4, [pc, #76]	; (24fd8 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1ec>)
   24f8a:	e7df      	b.n	24f4c <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x160>
   24f8c:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
   24f90:	aa0e      	add	r2, sp, #56	; 0x38
   24f92:	af12      	add	r7, sp, #72	; 0x48
   24f94:	e78a      	b.n	24eac <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xc0>
        ei_printf("ERR: MFCC failed (%d)\n", ret);
   24f96:	4811      	ldr	r0, [pc, #68]	; (24fdc <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1f0>)
   24f98:	4621      	mov	r1, r4
   24f9a:	f001 f885 	bl	260a8 <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
   24f9e:	e7d5      	b.n	24f4c <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x160>
        ei_printf("ERR: cmvnw failed (%d)\n", ret);
   24fa0:	480f      	ldr	r0, [pc, #60]	; (24fe0 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1f4>)
   24fa2:	4631      	mov	r1, r6
   24fa4:	f001 f880 	bl	260a8 <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
   24fa8:	4634      	mov	r4, r6
   24faa:	e7cf      	b.n	24f4c <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x160>
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
   24fac:	4c0d      	ldr	r4, [pc, #52]	; (24fe4 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1f8>)
   24fae:	e7db      	b.n	24f68 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x17c>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
   24fb0:	4c09      	ldr	r4, [pc, #36]	; (24fd8 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1ec>)
   24fb2:	e7d9      	b.n	24f68 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x17c>
        EIDSP_ERR(EIDSP_BLOCK_VERSION_INCORRECT);
   24fb4:	f46f 747d 	mvn.w	r4, #1012	; 0x3f4
   24fb8:	e7d6      	b.n	24f68 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x17c>
	__throw_bad_function_call();
   24fba:	f7fc fab3 	bl	21524 <_ZSt25__throw_bad_function_callv>
   24fbe:	bf00      	nop
   24fc0:	00021529 	.word	0x00021529
   24fc4:	1001884c 	.word	0x1001884c
   24fc8:	00020921 	.word	0x00020921
   24fcc:	0002067d 	.word	0x0002067d
   24fd0:	0003ff64 	.word	0x0003ff64
   24fd4:	0003ff78 	.word	0x0003ff78
   24fd8:	fffffc14 	.word	0xfffffc14
   24fdc:	000400bc 	.word	0x000400bc
   24fe0:	0003fc20 	.word	0x0003fc20
   24fe4:	fffffc10 	.word	0xfffffc10

00024fe8 <_ZN12_GLOBAL__N_1L22extract_mfcc_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP20ei_dsp_config_mfcc_tfPNS0_13matrix_size_tEi>:
static int extract_mfcc_run_slice(signal_t *signal, matrix_t *output_matrix, ei_dsp_config_mfcc_t *config, const float sampling_frequency, matrix_size_t *matrix_size_out, int implementation_version) {
   24fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24fec:	ed2d 8b02 	vpush	{d8}
   24ff0:	b08f      	sub	sp, #60	; 0x3c
    uint32_t frequency = (uint32_t)sampling_frequency;
   24ff2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
            implementation_version);
   24ff6:	f8bd b068 	ldrh.w	fp, [sp, #104]	; 0x68
            signal->total_length, frequency, config->frame_length, config->frame_stride, config->num_cepstral,
   24ffa:	6897      	ldr	r7, [r2, #8]
   24ffc:	edd2 0a04 	vldr	s1, [r2, #16]
   25000:	ed92 0a03 	vldr	s0, [r2, #12]
static int extract_mfcc_run_slice(signal_t *signal, matrix_t *output_matrix, ei_dsp_config_mfcc_t *config, const float sampling_frequency, matrix_size_t *matrix_size_out, int implementation_version) {
   25004:	9306      	str	r3, [sp, #24]
   25006:	460e      	mov	r6, r1
   25008:	4614      	mov	r4, r2
   2500a:	ee17 1a90 	vmov	r1, s15
   2500e:	465a      	mov	r2, fp
   25010:	4681      	mov	r9, r0
   25012:	6900      	ldr	r0, [r0, #16]
    uint32_t frequency = (uint32_t)sampling_frequency;
   25014:	eef0 8a67 	vmov.f32	s17, s15
   25018:	f7fb fd70 	bl	20afc <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt.constprop.0>
    x = numpy::roll(output_matrix->buffer, output_matrix->rows * output_matrix->cols,
   2501c:	e9d6 5301 	ldrd	r5, r3, [r6, #4]
   25020:	b2bf      	uxth	r7, r7
   25022:	fb03 f505 	mul.w	r5, r3, r5
        -(out_matrix_size.rows * out_matrix_size.cols));
   25026:	fb07 f300 	mul.w	r3, r7, r0
   2502a:	425a      	negs	r2, r3
        if (shift < 0) {
   2502c:	2a00      	cmp	r2, #0
   2502e:	bfb8      	it	lt
   25030:	1aea      	sublt	r2, r5, r3
    x = numpy::roll(output_matrix->buffer, output_matrix->rows * output_matrix->cols,
   25032:	f8d6 8000 	ldr.w	r8, [r6]
   25036:	4682      	mov	sl, r0
        if (shift == 0) {
   25038:	2a00      	cmp	r2, #0
   2503a:	d137      	bne.n	250ac <_ZN12_GLOBAL__N_1L22extract_mfcc_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP20ei_dsp_config_mfcc_tfPNS0_13matrix_size_tEi+0xc4>
    size_t output_matrix_offset = (output_matrix->rows * output_matrix->cols) -
   2503c:	1aed      	subs	r5, r5, r3
        if (a_buffer) {
   2503e:	eb18 0585 	adds.w	r5, r8, r5, lsl #2
   25042:	d063      	beq.n	2510c <_ZN12_GLOBAL__N_1L22extract_mfcc_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP20ei_dsp_config_mfcc_tfPNS0_13matrix_size_tEi+0x124>
            buffer_managed_by_me = false;
   25044:	2300      	movs	r3, #0
            buffer = a_buffer;
   25046:	950a      	str	r5, [sp, #40]	; 0x28
            buffer_managed_by_me = false;
   25048:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    x = speechpy::feature::mfcc(&output_matrix_slice, signal,
   2504c:	f8cd b014 	str.w	fp, [sp, #20]
   25050:	6a63      	ldr	r3, [r4, #36]	; 0x24
   25052:	edd4 0a04 	vldr	s1, [r4, #16]
   25056:	ed94 0a03 	vldr	s0, [r4, #12]
   2505a:	9303      	str	r3, [sp, #12]
   2505c:	6a23      	ldr	r3, [r4, #32]
   2505e:	9302      	str	r3, [sp, #8]
   25060:	8b23      	ldrh	r3, [r4, #24]
   25062:	9301      	str	r3, [sp, #4]
   25064:	8aa3      	ldrh	r3, [r4, #20]
   25066:	9300      	str	r3, [sp, #0]
   25068:	2001      	movs	r0, #1
   2506a:	7a23      	ldrb	r3, [r4, #8]
   2506c:	9004      	str	r0, [sp, #16]
   2506e:	ee18 2a90 	vmov	r2, s17
   25072:	4649      	mov	r1, r9
   25074:	a80a      	add	r0, sp, #40	; 0x28
        cols = n_cols;
   25076:	e9cd a70b 	strd	sl, r7, [sp, #44]	; 0x2c
   2507a:	f7ff fcf3 	bl	24a64 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmbt>
   2507e:	9007      	str	r0, [sp, #28]
    if (x != EIDSP_OK) {
   25080:	4604      	mov	r4, r0
   25082:	2800      	cmp	r0, #0
   25084:	d15a      	bne.n	2513c <_ZN12_GLOBAL__N_1L22extract_mfcc_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP20ei_dsp_config_mfcc_tfPNS0_13matrix_size_tEi+0x154>
    matrix_size_out->rows += out_matrix_size.rows;
   25086:	9b06      	ldr	r3, [sp, #24]
   25088:	6818      	ldr	r0, [r3, #0]
   2508a:	4450      	add	r0, sl
   2508c:	6018      	str	r0, [r3, #0]
    if (out_matrix_size.cols > 0) {
   2508e:	b10f      	cbz	r7, 25094 <_ZN12_GLOBAL__N_1L22extract_mfcc_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP20ei_dsp_config_mfcc_tfPNS0_13matrix_size_tEi+0xac>
        matrix_size_out->cols = out_matrix_size.cols;
   25090:	605f      	str	r7, [r3, #4]
    return EIDSP_OK;
   25092:	4627      	mov	r7, r4
        if (buffer && buffer_managed_by_me) {
   25094:	980a      	ldr	r0, [sp, #40]	; 0x28
   25096:	b118      	cbz	r0, 250a0 <_ZN12_GLOBAL__N_1L22extract_mfcc_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP20ei_dsp_config_mfcc_tfPNS0_13matrix_size_tEi+0xb8>
   25098:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   2509c:	2b00      	cmp	r3, #0
   2509e:	d13e      	bne.n	2511e <_ZN12_GLOBAL__N_1L22extract_mfcc_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP20ei_dsp_config_mfcc_tfPNS0_13matrix_size_tEi+0x136>
}
   250a0:	4638      	mov	r0, r7
   250a2:	b00f      	add	sp, #60	; 0x3c
   250a4:	ecbd 8b02 	vpop	{d8}
   250a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   250ac:	0090      	lsls	r0, r2, #2
   250ae:	2101      	movs	r1, #1
   250b0:	ee08 0a10 	vmov	s16, r0
   250b4:	9309      	str	r3, [sp, #36]	; 0x24
   250b6:	9208      	str	r2, [sp, #32]
   250b8:	f001 f814 	bl	260e4 <_Z9ei_callocjj>
        EI_DSP_MATRIX(shift_matrix, 1, shift);
   250bc:	9007      	str	r0, [sp, #28]
   250be:	b3b0      	cbz	r0, 2512e <_ZN12_GLOBAL__N_1L22extract_mfcc_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP20ei_dsp_config_mfcc_tfPNS0_13matrix_size_tEi+0x146>
        memcpy(shift_matrix.buffer, input_array + input_array_size - shift, shift * sizeof(float));
   250c0:	9a08      	ldr	r2, [sp, #32]
   250c2:	1aad      	subs	r5, r5, r2
   250c4:	eb08 0185 	add.w	r1, r8, r5, lsl #2
   250c8:	ee18 2a10 	vmov	r2, s16
   250cc:	00ad      	lsls	r5, r5, #2
   250ce:	f7f3 f897 	bl	18200 <memcpy>
        memmove(input_array + shift, input_array, (input_array_size - shift) * sizeof(float));
   250d2:	462a      	mov	r2, r5
   250d4:	ee18 5a10 	vmov	r5, s16
   250d8:	4641      	mov	r1, r8
   250da:	eb08 0005 	add.w	r0, r8, r5
   250de:	f005 fe65 	bl	2adac <memmove>
        memcpy(input_array, shift_matrix.buffer, shift * sizeof(float));
   250e2:	9d07      	ldr	r5, [sp, #28]
   250e4:	ee18 2a10 	vmov	r2, s16
   250e8:	4629      	mov	r1, r5
   250ea:	4640      	mov	r0, r8
   250ec:	f7f3 f888 	bl	18200 <memcpy>
            ei_free(buffer);
   250f0:	4628      	mov	r0, r5
   250f2:	f001 f807 	bl	26104 <_Z7ei_freePv>
    size_t output_matrix_offset = (output_matrix->rows * output_matrix->cols) -
   250f6:	e9d6 5201 	ldrd	r5, r2, [r6, #4]
    matrix_t output_matrix_slice(out_matrix_size.rows, out_matrix_size.cols, output_matrix->buffer + output_matrix_offset);
   250fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   250fc:	f8d6 8000 	ldr.w	r8, [r6]
    size_t output_matrix_offset = (output_matrix->rows * output_matrix->cols) -
   25100:	fb02 f505 	mul.w	r5, r2, r5
   25104:	1aed      	subs	r5, r5, r3
        if (a_buffer) {
   25106:	eb18 0585 	adds.w	r5, r8, r5, lsl #2
   2510a:	d19b      	bne.n	25044 <_ZN12_GLOBAL__N_1L22extract_mfcc_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP20ei_dsp_config_mfcc_tfPNS0_13matrix_size_tEi+0x5c>
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   2510c:	0098      	lsls	r0, r3, #2
   2510e:	2101      	movs	r1, #1
   25110:	f000 ffe8 	bl	260e4 <_Z9ei_callocjj>
            buffer_managed_by_me = true;
   25114:	2301      	movs	r3, #1
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   25116:	900a      	str	r0, [sp, #40]	; 0x28
            buffer_managed_by_me = true;
   25118:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   2511c:	e796      	b.n	2504c <_ZN12_GLOBAL__N_1L22extract_mfcc_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP20ei_dsp_config_mfcc_tfPNS0_13matrix_size_tEi+0x64>
            ei_free(buffer);
   2511e:	f000 fff1 	bl	26104 <_Z7ei_freePv>
}
   25122:	4638      	mov	r0, r7
   25124:	b00f      	add	sp, #60	; 0x3c
   25126:	ecbd 8b02 	vpop	{d8}
   2512a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2512e:	4f08      	ldr	r7, [pc, #32]	; (25150 <_ZN12_GLOBAL__N_1L22extract_mfcc_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP20ei_dsp_config_mfcc_tfPNS0_13matrix_size_tEi+0x168>)
   25130:	4638      	mov	r0, r7
   25132:	b00f      	add	sp, #60	; 0x3c
   25134:	ecbd 8b02 	vpop	{d8}
   25138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ei_printf("ERR: MFCC failed (%d)\n", x);
   2513c:	4805      	ldr	r0, [pc, #20]	; (25154 <_ZN12_GLOBAL__N_1L22extract_mfcc_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP20ei_dsp_config_mfcc_tfPNS0_13matrix_size_tEi+0x16c>)
   2513e:	4621      	mov	r1, r4
   25140:	f000 ffb2 	bl	260a8 <_Z9ei_printfPKcz>
        if (buffer && buffer_managed_by_me) {
   25144:	980a      	ldr	r0, [sp, #40]	; 0x28
        EIDSP_ERR(x);
   25146:	4627      	mov	r7, r4
   25148:	2800      	cmp	r0, #0
   2514a:	d1a5      	bne.n	25098 <_ZN12_GLOBAL__N_1L22extract_mfcc_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP20ei_dsp_config_mfcc_tfPNS0_13matrix_size_tEi+0xb0>
   2514c:	e7a8      	b.n	250a0 <_ZN12_GLOBAL__N_1L22extract_mfcc_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP20ei_dsp_config_mfcc_tfPNS0_13matrix_size_tEi+0xb8>
   2514e:	bf00      	nop
   25150:	fffffc16 	.word	0xfffffc16
   25154:	000400bc 	.word	0x000400bc

00025158 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE>:
__attribute__((unused)) int extract_mfcc_per_slice_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float sampling_frequency, matrix_size_t *matrix_size_out) {
   25158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ei_dsp_config_mfcc_t config = *((ei_dsp_config_mfcc_t*)config_ptr);
   2515c:	4614      	mov	r4, r2
__attribute__((unused)) int extract_mfcc_per_slice_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float sampling_frequency, matrix_size_t *matrix_size_out) {
   2515e:	ed2d 8b04 	vpush	{d8-d9}
   25162:	4607      	mov	r7, r0
   25164:	468a      	mov	sl, r1
   25166:	4698      	mov	r8, r3
    ei_dsp_config_mfcc_t config = *((ei_dsp_config_mfcc_t*)config_ptr);
   25168:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
__attribute__((unused)) int extract_mfcc_per_slice_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float sampling_frequency, matrix_size_t *matrix_size_out) {
   2516a:	b0bb      	sub	sp, #236	; 0xec
    ei_dsp_config_mfcc_t config = *((ei_dsp_config_mfcc_t*)config_ptr);
   2516c:	ad2e      	add	r5, sp, #184	; 0xb8
   2516e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    if (config.axes != 1) {
   25170:	460e      	mov	r6, r1
    ei_dsp_config_mfcc_t config = *((ei_dsp_config_mfcc_t*)config_ptr);
   25172:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   25174:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   25176:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    if (config.axes != 1) {
   2517a:	2e01      	cmp	r6, #1
    ei_dsp_config_mfcc_t config = *((ei_dsp_config_mfcc_t*)config_ptr);
   2517c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    if (config.axes != 1) {
   25180:	f040 8206 	bne.w	25590 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x438>
    if((config.implementation_version == 0) || (config.implementation_version > 3)) {
   25184:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
   25188:	3b01      	subs	r3, #1
   2518a:	b29b      	uxth	r3, r3
   2518c:	2b02      	cmp	r3, #2
   2518e:	f200 8202 	bhi.w	25596 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x43e>
    if (signal->total_length == 0) {
   25192:	693b      	ldr	r3, [r7, #16]
   25194:	2b00      	cmp	r3, #0
   25196:	f000 81f8 	beq.w	2558a <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x432>
    class speechpy::processing::preemphasis pre(signal, config.pre_shift, config.pre_cof, false);
   2519a:	9c39      	ldr	r4, [sp, #228]	; 0xe4
            : _signal(signal), _shift(shift), _cof(cof), _rescale(rescale)
   2519c:	9706      	str	r7, [sp, #24]
   2519e:	971f      	str	r7, [sp, #124]	; 0x7c
            _prev_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
   251a0:	00a7      	lsls	r7, r4, #2
   251a2:	9b38      	ldr	r3, [sp, #224]	; 0xe0
            : _signal(signal), _shift(shift), _cof(cof), _rescale(rescale)
   251a4:	9321      	str	r3, [sp, #132]	; 0x84
   251a6:	2500      	movs	r5, #0
            _prev_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
   251a8:	4631      	mov	r1, r6
   251aa:	4638      	mov	r0, r7
    const uint32_t frequency = static_cast<uint32_t>(sampling_frequency);
   251ac:	eefc 8ac0 	vcvt.u32.f32	s17, s0
        preemphasis(ei_signal_t *signal, int shift, float cof, bool rescale)
   251b0:	eeb0 8a40 	vmov.f32	s16, s0
            : _signal(signal), _shift(shift), _cof(cof), _rescale(rescale)
   251b4:	9420      	str	r4, [sp, #128]	; 0x80
   251b6:	f88d 5094 	strb.w	r5, [sp, #148]	; 0x94
            _prev_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
   251ba:	f000 ff93 	bl	260e4 <_Z9ei_callocjj>
            _end_of_signal_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
   251be:	4631      	mov	r1, r6
            _prev_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
   251c0:	9022      	str	r0, [sp, #136]	; 0x88
            _end_of_signal_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
   251c2:	4638      	mov	r0, r7
   251c4:	f000 ff8e 	bl	260e4 <_Z9ei_callocjj>
            if (shift < 0) {
   251c8:	42ac      	cmp	r4, r5
            _end_of_signal_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
   251ca:	e9cd 0523 	strd	r0, r5, [sp, #140]	; 0x8c
            if (shift < 0) {
   251ce:	f2c0 812a 	blt.w	25426 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2ce>
                _shift = signal->total_length + shift;
   251d2:	9a06      	ldr	r2, [sp, #24]
   251d4:	6913      	ldr	r3, [r2, #16]
            if (!_prev_buffer || !_end_of_signal_buffer) return;
   251d6:	9a22      	ldr	r2, [sp, #136]	; 0x88
   251d8:	2a00      	cmp	r2, #0
   251da:	f000 812c 	beq.w	25436 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2de>
   251de:	2800      	cmp	r0, #0
   251e0:	f000 8129 	beq.w	25436 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2de>
            signal->get_data(signal->total_length - shift, shift, _end_of_signal_buffer);
   251e4:	1b1b      	subs	r3, r3, r4
   251e6:	9316      	str	r3, [sp, #88]	; 0x58
      if (_M_empty())
   251e8:	9b06      	ldr	r3, [sp, #24]
   251ea:	9013      	str	r0, [sp, #76]	; 0x4c
   251ec:	689b      	ldr	r3, [r3, #8]
   251ee:	9414      	str	r4, [sp, #80]	; 0x50
   251f0:	2b00      	cmp	r3, #0
   251f2:	f000 81d5 	beq.w	255a0 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x448>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   251f6:	9d06      	ldr	r5, [sp, #24]
   251f8:	a916      	add	r1, sp, #88	; 0x58
   251fa:	ab13      	add	r3, sp, #76	; 0x4c
   251fc:	68ec      	ldr	r4, [r5, #12]
   251fe:	9104      	str	r1, [sp, #16]
   25200:	4628      	mov	r0, r5
   25202:	aa14      	add	r2, sp, #80	; 0x50
   25204:	47a0      	blx	r4
    preemphasized_audio_signal.total_length = signal->total_length;
   25206:	692b      	ldr	r3, [r5, #16]
    const size_t frame_length_values = frequency * config.frame_length;
   25208:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
    const size_t frame_stride_values = frequency * config.frame_stride;
   2520c:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   25210:	4aa7      	ldr	r2, [pc, #668]	; (254b0 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x358>)
   25212:	9226      	str	r2, [sp, #152]	; 0x98
    const size_t frame_length_values = frequency * config.frame_length;
   25214:	eef8 7a68 	vcvt.f32.u32	s15, s17
      __b = _GLIBCXX_MOVE(__tmp);
   25218:	4aa6      	ldr	r2, [pc, #664]	; (254b4 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x35c>)
    preemphasis = &pre;
   2521a:	49a7      	ldr	r1, [pc, #668]	; (254b8 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x360>)
   2521c:	921c      	str	r2, [sp, #112]	; 0x70
    const size_t frame_length_values = frequency * config.frame_length;
   2521e:	ee27 7a87 	vmul.f32	s14, s15, s14
    const size_t frame_stride_values = frequency * config.frame_stride;
   25222:	ee67 7aa6 	vmul.f32	s15, s15, s13
   25226:	4aa5      	ldr	r2, [pc, #660]	; (254bc <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x364>)
   25228:	921d      	str	r2, [sp, #116]	; 0x74
    const size_t frame_length_values = frequency * config.frame_length;
   2522a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
    preemphasis = &pre;
   2522e:	aa1f      	add	r2, sp, #124	; 0x7c
    const size_t frame_stride_values = frequency * config.frame_stride;
   25230:	eefc 7ae7 	vcvt.u32.f32	s15, s15
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   25234:	ac26      	add	r4, sp, #152	; 0x98
    preemphasis = &pre;
   25236:	600a      	str	r2, [r1, #0]
   25238:	e894 0003 	ldmia.w	r4, {r0, r1}
   2523c:	9a04      	ldr	r2, [sp, #16]
    preemphasized_audio_signal.total_length = signal->total_length;
   2523e:	931e      	str	r3, [sp, #120]	; 0x78
    const size_t frame_length_values = frequency * config.frame_length;
   25240:	ee17 5a10 	vmov	r5, s14
    const size_t frame_stride_values = frequency * config.frame_stride;
   25244:	ee17 ba90 	vmov	fp, s15
   25248:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   2524c:	f10d 0968 	add.w	r9, sp, #104	; 0x68
    if (frame_overlap_values < 0) {
   25250:	ebb5 020b 	subs.w	r2, r5, fp
   25254:	e889 0003 	stmia.w	r9, {r0, r1}
   25258:	9207      	str	r2, [sp, #28]
   2525a:	f100 8143 	bmi.w	254e4 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x38c>
    if (ei_dsp_cont_current_frame && ei_dsp_cont_current_frame_size != frame_length_values) {
   2525e:	4f98      	ldr	r7, [pc, #608]	; (254c0 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x368>)
   25260:	6838      	ldr	r0, [r7, #0]
   25262:	2800      	cmp	r0, #0
   25264:	f000 8093 	beq.w	2538e <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x236>
   25268:	4a96      	ldr	r2, [pc, #600]	; (254c4 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x36c>)
   2526a:	6812      	ldr	r2, [r2, #0]
   2526c:	42aa      	cmp	r2, r5
   2526e:	f040 808a 	bne.w	25386 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x22e>
    int implementation_version = config.implementation_version;
   25272:	f8bd 10b8 	ldrh.w	r1, [sp, #184]	; 0xb8
    if ((frame_length_values) > preemphasized_audio_signal.total_length  + ei_dsp_cont_current_frame_ix) {
   25276:	4e94      	ldr	r6, [pc, #592]	; (254c8 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x370>)
    int implementation_version = config.implementation_version;
   25278:	910b      	str	r1, [sp, #44]	; 0x2c
   2527a:	4608      	mov	r0, r1
    if ((frame_length_values) > preemphasized_audio_signal.total_length  + ei_dsp_cont_current_frame_ix) {
   2527c:	6831      	ldr	r1, [r6, #0]
    int implementation_version = config.implementation_version;
   2527e:	9005      	str	r0, [sp, #20]
    if ((frame_length_values) > preemphasized_audio_signal.total_length  + ei_dsp_cont_current_frame_ix) {
   25280:	18c8      	adds	r0, r1, r3
   25282:	4285      	cmp	r5, r0
   25284:	f200 809a 	bhi.w	253bc <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x264>
    matrix_size_out->rows = 0;
   25288:	2300      	movs	r3, #0
    matrix_size_out->cols = 0;
   2528a:	e9c8 3300 	strd	r3, r3, [r8]
    if (implementation_version == 1) {
   2528e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   25290:	2b01      	cmp	r3, #1
   25292:	d102      	bne.n	2529a <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x142>
   25294:	2302      	movs	r3, #2
   25296:	930b      	str	r3, [sp, #44]	; 0x2c
        implementation_version = 2;
   25298:	9305      	str	r3, [sp, #20]
    if (ei_dsp_cont_current_frame_ix > (int)ei_dsp_cont_current_frame_size) {
   2529a:	428a      	cmp	r2, r1
   2529c:	f2c0 8136 	blt.w	2550c <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x3b4>
    while (ei_dsp_cont_current_frame_ix > 0) {
   252a0:	2900      	cmp	r1, #0
   252a2:	dd53      	ble.n	2534c <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x1f4>
            numpy::roll(ei_dsp_cont_current_frame, frame_length_values, -frame_stride_values);
   252a4:	4658      	mov	r0, fp
   252a6:	4243      	negs	r3, r0
   252a8:	461a      	mov	r2, r3
   252aa:	9308      	str	r3, [sp, #32]
        EI_DSP_MATRIX(shift_matrix, 1, shift);
   252ac:	9b07      	ldr	r3, [sp, #28]
   252ae:	9503      	str	r5, [sp, #12]
   252b0:	ea13 0322 	ands.w	r3, r3, r2, asr #32
   252b4:	bf38      	it	cc
   252b6:	4613      	movcc	r3, r2
        memcpy(shift_matrix.buffer, input_array + input_array_size - shift, shift * sizeof(float));
   252b8:	1aea      	subs	r2, r5, r3
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   252ba:	009b      	lsls	r3, r3, #2
   252bc:	ee09 3a10 	vmov	s18, r3
   252c0:	0093      	lsls	r3, r2, #2
   252c2:	9309      	str	r3, [sp, #36]	; 0x24
        x = preemphasized_audio_signal.get_data(0, frame_length_values - ei_dsp_cont_current_frame_ix, ei_dsp_cont_current_frame + ei_dsp_cont_current_frame_ix);
   252c4:	2300      	movs	r3, #0
   252c6:	930d      	str	r3, [sp, #52]	; 0x34
   252c8:	683b      	ldr	r3, [r7, #0]
   252ca:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   252ce:	930f      	str	r3, [sp, #60]	; 0x3c
   252d0:	9b03      	ldr	r3, [sp, #12]
   252d2:	1a59      	subs	r1, r3, r1
      if (_M_empty())
   252d4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   252d6:	910e      	str	r1, [sp, #56]	; 0x38
   252d8:	2b00      	cmp	r3, #0
   252da:	f000 8161 	beq.w	255a0 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x448>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   252de:	9d1d      	ldr	r5, [sp, #116]	; 0x74
   252e0:	ab0f      	add	r3, sp, #60	; 0x3c
   252e2:	aa0e      	add	r2, sp, #56	; 0x38
   252e4:	a90d      	add	r1, sp, #52	; 0x34
   252e6:	4648      	mov	r0, r9
   252e8:	47a8      	blx	r5
        if (x != EIDSP_OK) {
   252ea:	2800      	cmp	r0, #0
   252ec:	f040 80d4 	bne.w	25498 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x340>
        x = extract_mfcc_run_slice(&frame_signal, output_matrix, &config, sampling_frequency, matrix_size_out, implementation_version);
   252f0:	9b05      	ldr	r3, [sp, #20]
   252f2:	9300      	str	r3, [sp, #0]
        signal->total_length = data_size;
   252f4:	9b03      	ldr	r3, [sp, #12]
   252f6:	932a      	str	r3, [sp, #168]	; 0xa8
   252f8:	4b74      	ldr	r3, [pc, #464]	; (254cc <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x374>)
   252fa:	9328      	str	r3, [sp, #160]	; 0xa0
   252fc:	4b74      	ldr	r3, [pc, #464]	; (254d0 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x378>)
   252fe:	9329      	str	r3, [sp, #164]	; 0xa4
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   25300:	9904      	ldr	r1, [sp, #16]
        x = numpy::signal_from_buffer(ei_dsp_cont_current_frame, frame_length_values, &frame_signal);
   25302:	683b      	ldr	r3, [r7, #0]
   25304:	9316      	str	r3, [sp, #88]	; 0x58
   25306:	c903      	ldmia	r1, {r0, r1}
   25308:	f10d 0c50 	add.w	ip, sp, #80	; 0x50
   2530c:	e88c 0003 	stmia.w	ip, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   25310:	e884 0003 	stmia.w	r4, {r0, r1}
        x = extract_mfcc_run_slice(&frame_signal, output_matrix, &config, sampling_frequency, matrix_size_out, implementation_version);
   25314:	eeb0 0a48 	vmov.f32	s0, s16
   25318:	4643      	mov	r3, r8
   2531a:	aa2e      	add	r2, sp, #184	; 0xb8
   2531c:	4651      	mov	r1, sl
   2531e:	4620      	mov	r0, r4
   25320:	f7ff fe62 	bl	24fe8 <_ZN12_GLOBAL__N_1L22extract_mfcc_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP20ei_dsp_config_mfcc_tfPNS0_13matrix_size_tEi>
        if (x != EIDSP_OK) {
   25324:	2800      	cmp	r0, #0
   25326:	f040 80b9 	bne.w	2549c <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x344>
        if (frame_stride_values > 0) {
   2532a:	f1bb 0f00 	cmp.w	fp, #0
   2532e:	d14d      	bne.n	253cc <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x274>
        ei_dsp_cont_current_frame_ix -= frame_stride_values;
   25330:	6831      	ldr	r1, [r6, #0]
      if (_M_manager)
   25332:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   25334:	eba1 010b 	sub.w	r1, r1, fp
   25338:	6031      	str	r1, [r6, #0]
   2533a:	2b00      	cmp	r3, #0
   2533c:	d06b      	beq.n	25416 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2be>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   2533e:	4621      	mov	r1, r4
   25340:	2203      	movs	r2, #3
   25342:	4620      	mov	r0, r4
   25344:	4798      	blx	r3
    while (ei_dsp_cont_current_frame_ix > 0) {
   25346:	6831      	ldr	r1, [r6, #0]
   25348:	2900      	cmp	r1, #0
   2534a:	dcbb      	bgt.n	252c4 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x16c>
    if (offset_in_signal >= signal->total_length) {
   2534c:	9b06      	ldr	r3, [sp, #24]
   2534e:	691d      	ldr	r5, [r3, #16]
    if (ei_dsp_cont_current_frame_ix < 0) {
   25350:	2900      	cmp	r1, #0
   25352:	f040 80e1 	bne.w	25518 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x3c0>
    if (offset_in_signal >= signal->total_length) {
   25356:	2d00      	cmp	r5, #0
   25358:	d170      	bne.n	2543c <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2e4>
        return EIDSP_OK;
   2535a:	f04f 0b00 	mov.w	fp, #0
      if (_M_manager)
   2535e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   25360:	b11b      	cbz	r3, 2536a <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x212>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   25362:	2203      	movs	r2, #3
   25364:	4649      	mov	r1, r9
   25366:	4648      	mov	r0, r9
   25368:	4798      	blx	r3
            if (_prev_buffer) {
   2536a:	9822      	ldr	r0, [sp, #136]	; 0x88
   2536c:	b108      	cbz	r0, 25372 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x21a>
                ei_dsp_free(_prev_buffer, _shift * sizeof(float));
   2536e:	f000 fec9 	bl	26104 <_Z7ei_freePv>
            if (_end_of_signal_buffer) {
   25372:	9823      	ldr	r0, [sp, #140]	; 0x8c
   25374:	b108      	cbz	r0, 2537a <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x222>
                ei_dsp_free(_end_of_signal_buffer, _shift * sizeof(float));
   25376:	f000 fec5 	bl	26104 <_Z7ei_freePv>
}
   2537a:	4658      	mov	r0, fp
   2537c:	b03b      	add	sp, #236	; 0xec
   2537e:	ecbd 8b04 	vpop	{d8-d9}
   25382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ei_free(ei_dsp_cont_current_frame);
   25386:	f000 febd 	bl	26104 <_Z7ei_freePv>
        ei_dsp_cont_current_frame = nullptr;
   2538a:	2300      	movs	r3, #0
   2538c:	603b      	str	r3, [r7, #0]
    int implementation_version = config.implementation_version;
   2538e:	f8bd 60b8 	ldrh.w	r6, [sp, #184]	; 0xb8
   25392:	960b      	str	r6, [sp, #44]	; 0x2c
        ei_dsp_cont_current_frame = (float*)ei_calloc(frame_length_values * sizeof(float), 1);
   25394:	2101      	movs	r1, #1
   25396:	00a8      	lsls	r0, r5, #2
   25398:	f000 fea4 	bl	260e4 <_Z9ei_callocjj>
    int implementation_version = config.implementation_version;
   2539c:	9605      	str	r6, [sp, #20]
        ei_dsp_cont_current_frame = (float*)ei_calloc(frame_length_values * sizeof(float), 1);
   2539e:	6038      	str	r0, [r7, #0]
        if (!ei_dsp_cont_current_frame) {
   253a0:	2800      	cmp	r0, #0
   253a2:	f000 80ed 	beq.w	25580 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x428>
        ei_dsp_cont_current_frame_size = frame_length_values;
   253a6:	4b47      	ldr	r3, [pc, #284]	; (254c4 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x36c>)
        ei_dsp_cont_current_frame_ix = 0;
   253a8:	4e47      	ldr	r6, [pc, #284]	; (254c8 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x370>)
        ei_dsp_cont_current_frame_size = frame_length_values;
   253aa:	601d      	str	r5, [r3, #0]
    if ((frame_length_values) > preemphasized_audio_signal.total_length  + ei_dsp_cont_current_frame_ix) {
   253ac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   253ae:	4618      	mov	r0, r3
        ei_dsp_cont_current_frame_ix = 0;
   253b0:	2100      	movs	r1, #0
    if ((frame_length_values) > preemphasized_audio_signal.total_length  + ei_dsp_cont_current_frame_ix) {
   253b2:	4285      	cmp	r5, r0
        ei_dsp_cont_current_frame_ix = 0;
   253b4:	6031      	str	r1, [r6, #0]
    const size_t frame_length_values = frequency * config.frame_length;
   253b6:	462a      	mov	r2, r5
    if ((frame_length_values) > preemphasized_audio_signal.total_length  + ei_dsp_cont_current_frame_ix) {
   253b8:	f67f af66 	bls.w	25288 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x130>
        ei_printf("ERR: frame_length (%d) cannot be larger than signal's total length (%d) for continuous classification\n",
   253bc:	185a      	adds	r2, r3, r1
   253be:	4845      	ldr	r0, [pc, #276]	; (254d4 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x37c>)
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
   253c0:	f8df b11c 	ldr.w	fp, [pc, #284]	; 254e0 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x388>
        ei_printf("ERR: frame_length (%d) cannot be larger than signal's total length (%d) for continuous classification\n",
   253c4:	4629      	mov	r1, r5
   253c6:	f000 fe6f 	bl	260a8 <_Z9ei_printfPKcz>
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
   253ca:	e7c8      	b.n	2535e <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x206>
        if (shift < 0) {
   253cc:	9b08      	ldr	r3, [sp, #32]
   253ce:	2b00      	cmp	r3, #0
   253d0:	db25      	blt.n	2541e <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2c6>
   253d2:	ee19 0a10 	vmov	r0, s18
   253d6:	2101      	movs	r1, #1
            numpy::roll(ei_dsp_cont_current_frame, frame_length_values, -frame_stride_values);
   253d8:	683d      	ldr	r5, [r7, #0]
   253da:	f000 fe83 	bl	260e4 <_Z9ei_callocjj>
        EI_DSP_MATRIX(shift_matrix, 1, shift);
   253de:	900a      	str	r0, [sp, #40]	; 0x28
   253e0:	2800      	cmp	r0, #0
   253e2:	d0a5      	beq.n	25330 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x1d8>
        memcpy(shift_matrix.buffer, input_array + input_array_size - shift, shift * sizeof(float));
   253e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   253e6:	ee19 2a10 	vmov	r2, s18
   253ea:	18e9      	adds	r1, r5, r3
   253ec:	f7f2 ff08 	bl	18200 <memcpy>
        memmove(input_array + shift, input_array, (input_array_size - shift) * sizeof(float));
   253f0:	ee19 3a10 	vmov	r3, s18
   253f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   253f6:	4629      	mov	r1, r5
   253f8:	18e8      	adds	r0, r5, r3
   253fa:	f005 fcd7 	bl	2adac <memmove>
        memcpy(input_array, shift_matrix.buffer, shift * sizeof(float));
   253fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   25400:	ee19 2a10 	vmov	r2, s18
   25404:	4619      	mov	r1, r3
   25406:	4628      	mov	r0, r5
   25408:	f7f2 fefa 	bl	18200 <memcpy>
            ei_free(buffer);
   2540c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2540e:	4618      	mov	r0, r3
   25410:	f000 fe78 	bl	26104 <_Z7ei_freePv>
   25414:	e78c      	b.n	25330 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x1d8>
    while (ei_dsp_cont_current_frame_ix > 0) {
   25416:	2900      	cmp	r1, #0
   25418:	f73f af54 	bgt.w	252c4 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x16c>
   2541c:	e796      	b.n	2534c <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x1f4>
        if (shift == 0) {
   2541e:	9b07      	ldr	r3, [sp, #28]
   25420:	2b00      	cmp	r3, #0
   25422:	d085      	beq.n	25330 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x1d8>
   25424:	e7d5      	b.n	253d2 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x27a>
                _shift = signal->total_length + shift;
   25426:	9b06      	ldr	r3, [sp, #24]
   25428:	691b      	ldr	r3, [r3, #16]
   2542a:	18e2      	adds	r2, r4, r3
   2542c:	9220      	str	r2, [sp, #128]	; 0x80
            if (!_prev_buffer || !_end_of_signal_buffer) return;
   2542e:	9a22      	ldr	r2, [sp, #136]	; 0x88
   25430:	2a00      	cmp	r2, #0
   25432:	f47f aed4 	bne.w	251de <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x86>
   25436:	aa16      	add	r2, sp, #88	; 0x58
   25438:	9204      	str	r2, [sp, #16]
   2543a:	e6e5      	b.n	25208 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0xb0>
        if (this->_range_start == 0 && this->_range_end == this->_original_signal->total_length) {
   2543c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
        _original_signal(original_signal), _range_start(range_start), _range_end(range_end)
   2543e:	9528      	str	r5, [sp, #160]	; 0xa0
        if (this->_range_start == 0 && this->_range_end == this->_original_signal->total_length) {
   25440:	429d      	cmp	r5, r3
        _original_signal(original_signal), _range_start(range_start), _range_end(range_end)
   25442:	e9cd 9126 	strd	r9, r1, [sp, #152]	; 0x98
    _Function_base() : _M_manager(nullptr) { }
   25446:	912b      	str	r1, [sp, #172]	; 0xac
        if (this->_range_start == 0 && this->_range_end == this->_original_signal->total_length) {
   25448:	9103      	str	r1, [sp, #12]
   2544a:	f000 809c 	beq.w	25586 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x42e>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   2544e:	9b04      	ldr	r3, [sp, #16]
   25450:	9416      	str	r4, [sp, #88]	; 0x58
   25452:	e893 0003 	ldmia.w	r3, {r0, r1}
   25456:	ab14      	add	r3, sp, #80	; 0x50
   25458:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   2545c:	4a1e      	ldr	r2, [pc, #120]	; (254d8 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x380>)
   2545e:	4b1f      	ldr	r3, [pc, #124]	; (254dc <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x384>)
        wrapped_signal.total_length = _range_end - _range_start;
   25460:	952d      	str	r5, [sp, #180]	; 0xb4
   25462:	ac29      	add	r4, sp, #164	; 0xa4
   25464:	922b      	str	r2, [sp, #172]	; 0xac
   25466:	e884 0003 	stmia.w	r4, {r0, r1}
   2546a:	932c      	str	r3, [sp, #176]	; 0xb0
    x = extract_mfcc_run_slice(range_signal, output_matrix, &config, sampling_frequency, matrix_size_out, implementation_version);
   2546c:	9b05      	ldr	r3, [sp, #20]
   2546e:	9300      	str	r3, [sp, #0]
   25470:	eeb0 0a48 	vmov.f32	s0, s16
   25474:	4643      	mov	r3, r8
   25476:	aa2e      	add	r2, sp, #184	; 0xb8
   25478:	4651      	mov	r1, sl
   2547a:	4620      	mov	r0, r4
   2547c:	f7ff fdb4 	bl	24fe8 <_ZN12_GLOBAL__N_1L22extract_mfcc_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP20ei_dsp_config_mfcc_tfPNS0_13matrix_size_tEi>
    if (x != EIDSP_OK) {
   25480:	4683      	mov	fp, r0
   25482:	2800      	cmp	r0, #0
   25484:	d054      	beq.n	25530 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x3d8>
      if (_M_manager)
   25486:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   25488:	2b00      	cmp	r3, #0
   2548a:	f43f af68 	beq.w	2535e <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x206>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   2548e:	a929      	add	r1, sp, #164	; 0xa4
   25490:	2203      	movs	r2, #3
   25492:	4608      	mov	r0, r1
   25494:	4798      	blx	r3
class SignalWithRange {
   25496:	e762      	b.n	2535e <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x206>
   25498:	4683      	mov	fp, r0
   2549a:	e760      	b.n	2535e <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x206>
      if (_M_manager)
   2549c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   2549e:	4683      	mov	fp, r0
   254a0:	2b00      	cmp	r3, #0
   254a2:	f43f af5c 	beq.w	2535e <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x206>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   254a6:	2203      	movs	r2, #3
   254a8:	4621      	mov	r1, r4
   254aa:	4620      	mov	r0, r4
   254ac:	4798      	blx	r3
typedef struct ei_signal_t {
   254ae:	e756      	b.n	2535e <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x206>
   254b0:	00021529 	.word	0x00021529
   254b4:	00020921 	.word	0x00020921
   254b8:	1001884c 	.word	0x1001884c
   254bc:	0002067d 	.word	0x0002067d
   254c0:	10018850 	.word	0x10018850
   254c4:	10018858 	.word	0x10018858
   254c8:	10018854 	.word	0x10018854
   254cc:	000208d9 	.word	0x000208d9
   254d0:	000206a9 	.word	0x000206a9
   254d4:	00040014 	.word	0x00040014
   254d8:	000208fd 	.word	0x000208fd
   254dc:	000218a1 	.word	0x000218a1
   254e0:	fffffc10 	.word	0xfffffc10
        ei_printf("ERR: frame_length (");
   254e4:	482f      	ldr	r0, [pc, #188]	; (255a4 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x44c>)
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
   254e6:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 255b8 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x460>
        ei_printf("ERR: frame_length (");
   254ea:	f000 fddd 	bl	260a8 <_Z9ei_printfPKcz>
        ei_printf_float(config.frame_length);            
   254ee:	ed9d 0a31 	vldr	s0, [sp, #196]	; 0xc4
   254f2:	f000 fde7 	bl	260c4 <_Z15ei_printf_floatf>
        ei_printf(") cannot be lower than frame_stride (");
   254f6:	482c      	ldr	r0, [pc, #176]	; (255a8 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x450>)
   254f8:	f000 fdd6 	bl	260a8 <_Z9ei_printfPKcz>
        ei_printf_float(config.frame_stride);
   254fc:	ed9d 0a32 	vldr	s0, [sp, #200]	; 0xc8
   25500:	f000 fde0 	bl	260c4 <_Z15ei_printf_floatf>
        ei_printf(") for continuous classification\n");
   25504:	4829      	ldr	r0, [pc, #164]	; (255ac <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x454>)
   25506:	f000 fdcf 	bl	260a8 <_Z9ei_printfPKcz>
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
   2550a:	e728      	b.n	2535e <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x206>
        ei_printf("ERR: ei_dsp_cont_current_frame_ix is larger than frame size (ix=%d size=%d)\n",
   2550c:	4828      	ldr	r0, [pc, #160]	; (255b0 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x458>)
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
   2550e:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 255b8 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x460>
        ei_printf("ERR: ei_dsp_cont_current_frame_ix is larger than frame size (ix=%d size=%d)\n",
   25512:	f000 fdc9 	bl	260a8 <_Z9ei_printfPKcz>
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
   25516:	e722      	b.n	2535e <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x206>
        ei_dsp_cont_current_frame_ix = 0;
   25518:	2300      	movs	r3, #0
   2551a:	6033      	str	r3, [r6, #0]
        offset_in_signal = -ei_dsp_cont_current_frame_ix;
   2551c:	424b      	negs	r3, r1
    if (offset_in_signal >= signal->total_length) {
   2551e:	429d      	cmp	r5, r3
        offset_in_signal = -ei_dsp_cont_current_frame_ix;
   25520:	9303      	str	r3, [sp, #12]
    if (offset_in_signal >= signal->total_length) {
   25522:	f67f af1a 	bls.w	2535a <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x202>
        _original_signal(original_signal), _range_start(range_start), _range_end(range_end)
   25526:	9528      	str	r5, [sp, #160]	; 0xa0
   25528:	e9cd 9326 	strd	r9, r3, [sp, #152]	; 0x98
   2552c:	440d      	add	r5, r1
   2552e:	e78e      	b.n	2544e <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2f6>
    int length_of_signal_used = speechpy::processing::calculate_signal_used(range_signal->total_length, sampling_frequency,
   25530:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    range_signal->total_length = range_signal_orig_length;
   25532:	6125      	str	r5, [r4, #16]
    int length_of_signal_used = speechpy::processing::calculate_signal_used(range_signal->total_length, sampling_frequency,
   25534:	4628      	mov	r0, r5
   25536:	eddd 0a32 	vldr	s1, [sp, #200]	; 0xc8
   2553a:	ed9d 0a31 	vldr	s0, [sp, #196]	; 0xc4
   2553e:	ee18 1a90 	vmov	r1, s17
   25542:	f7fb fb47 	bl	20bd4 <_ZN2ei8speechpy10processingL21calculate_signal_usedEjmffbt.constprop.0>
    int bytes_left_end_of_frame = signal->total_length - offset_in_signal;
   25546:	9b06      	ldr	r3, [sp, #24]
   25548:	9a03      	ldr	r2, [sp, #12]
   2554a:	691b      	ldr	r3, [r3, #16]
    bytes_left_end_of_frame += frame_overlap_values;
   2554c:	9d07      	ldr	r5, [sp, #28]
    int bytes_left_end_of_frame = signal->total_length - offset_in_signal;
   2554e:	1a9b      	subs	r3, r3, r2
   25550:	1a18      	subs	r0, r3, r0
    bytes_left_end_of_frame += frame_overlap_values;
   25552:	4405      	add	r5, r0
    if (bytes_left_end_of_frame > 0) {
   25554:	2d00      	cmp	r5, #0
   25556:	dd0e      	ble.n	25576 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x41e>
        x = preemphasized_audio_signal.get_data(
   25558:	683b      	ldr	r3, [r7, #0]
   2555a:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
   2555e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   25560:	1b5b      	subs	r3, r3, r5
   25562:	9310      	str	r3, [sp, #64]	; 0x40
      if (_M_empty())
   25564:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   25566:	b1db      	cbz	r3, 255a0 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x448>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   25568:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   2556a:	ab12      	add	r3, sp, #72	; 0x48
   2556c:	aa11      	add	r2, sp, #68	; 0x44
   2556e:	a910      	add	r1, sp, #64	; 0x40
   25570:	4648      	mov	r0, r9
   25572:	47a0      	blx	r4
        if (x != EIDSP_OK) {
   25574:	b990      	cbnz	r0, 2559c <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x444>
    preemphasis = nullptr;
   25576:	4a0f      	ldr	r2, [pc, #60]	; (255b4 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x45c>)
    ei_dsp_cont_current_frame_ix = bytes_left_end_of_frame;
   25578:	6035      	str	r5, [r6, #0]
    preemphasis = nullptr;
   2557a:	2300      	movs	r3, #0
   2557c:	6013      	str	r3, [r2, #0]
    return EIDSP_OK;
   2557e:	e782      	b.n	25486 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x32e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
   25580:	f8df b038 	ldr.w	fp, [pc, #56]	; 255bc <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x464>
   25584:	e6eb      	b.n	2535e <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x206>
            return this->_original_signal;
   25586:	464c      	mov	r4, r9
   25588:	e770      	b.n	2546c <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x314>
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
   2558a:	f8df b02c 	ldr.w	fp, [pc, #44]	; 255b8 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x460>
   2558e:	e6f4      	b.n	2537a <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x222>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
   25590:	f8df b02c 	ldr.w	fp, [pc, #44]	; 255c0 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x468>
   25594:	e6f1      	b.n	2537a <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x222>
        EIDSP_ERR(EIDSP_BLOCK_VERSION_INCORRECT);
   25596:	f46f 7b7d 	mvn.w	fp, #1012	; 0x3f4
   2559a:	e6ee      	b.n	2537a <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x222>
   2559c:	4683      	mov	fp, r0
   2559e:	e772      	b.n	25486 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x32e>
	__throw_bad_function_call();
   255a0:	f7fb ffc0 	bl	21524 <_ZSt25__throw_bad_function_callv>
   255a4:	0003ffb4 	.word	0x0003ffb4
   255a8:	0003ffc8 	.word	0x0003ffc8
   255ac:	0003fff0 	.word	0x0003fff0
   255b0:	000400d4 	.word	0x000400d4
   255b4:	1001884c 	.word	0x1001884c
   255b8:	fffffc10 	.word	0xfffffc10
   255bc:	fffffc16 	.word	0xfffffc16
   255c0:	fffffc14 	.word	0xfffffc14

000255c4 <_ZN12_GLOBAL__N_1L21extract_mfe_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP19ei_dsp_config_mfe_tfPNS0_13matrix_size_tE>:
static int extract_mfe_run_slice(signal_t *signal, matrix_t *output_matrix, ei_dsp_config_mfe_t *config, const float sampling_frequency, matrix_size_t *matrix_size_out) {
   255c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   255c8:	ed2d 8b02 	vpush	{d8}
    uint32_t frequency = (uint32_t)sampling_frequency;
   255cc:	eefc 7ac0 	vcvt.u32.f32	s15, s0
static int extract_mfe_run_slice(signal_t *signal, matrix_t *output_matrix, ei_dsp_config_mfe_t *config, const float sampling_frequency, matrix_size_t *matrix_size_out) {
   255d0:	b093      	sub	sp, #76	; 0x4c
            signal->total_length, frequency, config->frame_length, config->frame_stride, config->num_filters,
   255d2:	6917      	ldr	r7, [r2, #16]
        int32_t rows = processing::calculate_no_of_stack_frames(
   255d4:	edd2 0a03 	vldr	s1, [r2, #12]
   255d8:	ed92 0a02 	vldr	s0, [r2, #8]
static int extract_mfe_run_slice(signal_t *signal, matrix_t *output_matrix, ei_dsp_config_mfe_t *config, const float sampling_frequency, matrix_size_t *matrix_size_out) {
   255dc:	9006      	str	r0, [sp, #24]
   255de:	460e      	mov	r6, r1
   255e0:	6900      	ldr	r0, [r0, #16]
   255e2:	9307      	str	r3, [sp, #28]
   255e4:	ee17 1a90 	vmov	r1, s15
   255e8:	4614      	mov	r4, r2
   255ea:	8812      	ldrh	r2, [r2, #0]
    uint32_t frequency = (uint32_t)sampling_frequency;
   255ec:	eeb0 8a67 	vmov.f32	s16, s15
   255f0:	f7fb fa84 	bl	20afc <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt.constprop.0>
   255f4:	b2bf      	uxth	r7, r7
    x = numpy::roll(output_matrix->buffer, output_matrix->rows * output_matrix->cols,
   255f6:	e9d6 5301 	ldrd	r5, r3, [r6, #4]
        -(out_matrix_size.rows * out_matrix_size.cols));
   255fa:	fb07 fb00 	mul.w	fp, r7, r0
   255fe:	f1cb 0200 	rsb	r2, fp, #0
    x = numpy::roll(output_matrix->buffer, output_matrix->rows * output_matrix->cols,
   25602:	fb03 f505 	mul.w	r5, r3, r5
        if (shift < 0) {
   25606:	2a00      	cmp	r2, #0
   25608:	bfb8      	it	lt
   2560a:	eba5 020b 	sublt.w	r2, r5, fp
   2560e:	f8d6 9000 	ldr.w	r9, [r6]
   25612:	4680      	mov	r8, r0
        if (shift == 0) {
   25614:	2a00      	cmp	r2, #0
   25616:	d149      	bne.n	256ac <_ZN12_GLOBAL__N_1L21extract_mfe_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP19ei_dsp_config_mfe_tfPNS0_13matrix_size_tE+0xe8>
    size_t output_matrix_offset = (output_matrix->rows * output_matrix->cols) -
   25618:	eba5 050b 	sub.w	r5, r5, fp
        if (a_buffer) {
   2561c:	eb19 0585 	adds.w	r5, r9, r5, lsl #2
   25620:	d070      	beq.n	25704 <_ZN12_GLOBAL__N_1L21extract_mfe_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP19ei_dsp_config_mfe_tfPNS0_13matrix_size_tE+0x140>
            buffer_managed_by_me = false;
   25622:	2300      	movs	r3, #0
            buffer = a_buffer;
   25624:	950a      	str	r5, [sp, #40]	; 0x28
            buffer_managed_by_me = false;
   25626:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   2562a:	2101      	movs	r1, #1
   2562c:	ea4f 0088 	mov.w	r0, r8, lsl #2
        cols = n_cols;
   25630:	e9cd 870b 	strd	r8, r7, [sp, #44]	; 0x2c
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   25634:	f000 fd56 	bl	260e4 <_Z9ei_callocjj>
            buffer_managed_by_me = true;
   25638:	2301      	movs	r3, #1
        rows = n_rows;
   2563a:	e9cd 080e 	strd	r0, r8, [sp, #56]	; 0x38
            buffer_managed_by_me = true;
   2563e:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
        cols = n_cols;
   25642:	9310      	str	r3, [sp, #64]	; 0x40
    EI_DSP_MATRIX(energy_matrix, out_matrix_size.rows, 1);
   25644:	b328      	cbz	r0, 25692 <_ZN12_GLOBAL__N_1L21extract_mfe_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP19ei_dsp_config_mfe_tfPNS0_13matrix_size_tE+0xce>
    x = speechpy::feature::mfe(&output_matrix_slice, &energy_matrix, signal,
   25646:	8821      	ldrh	r1, [r4, #0]
   25648:	edd4 0a03 	vldr	s1, [r4, #12]
   2564c:	ed94 0a02 	vldr	s0, [r4, #8]
   25650:	9104      	str	r1, [sp, #16]
   25652:	69e1      	ldr	r1, [r4, #28]
   25654:	9103      	str	r1, [sp, #12]
   25656:	69a1      	ldr	r1, [r4, #24]
   25658:	9102      	str	r1, [sp, #8]
   2565a:	8aa1      	ldrh	r1, [r4, #20]
   2565c:	9101      	str	r1, [sp, #4]
   2565e:	8a21      	ldrh	r1, [r4, #16]
   25660:	9100      	str	r1, [sp, #0]
   25662:	ee18 3a10 	vmov	r3, s16
   25666:	9a06      	ldr	r2, [sp, #24]
   25668:	a90e      	add	r1, sp, #56	; 0x38
   2566a:	a80a      	add	r0, sp, #40	; 0x28
   2566c:	f7fe ff1a 	bl	244a4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt>
    if (x != EIDSP_OK) {
   25670:	4604      	mov	r4, r0
   25672:	2800      	cmp	r0, #0
   25674:	d162      	bne.n	2573c <_ZN12_GLOBAL__N_1L21extract_mfe_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP19ei_dsp_config_mfe_tfPNS0_13matrix_size_tE+0x178>
    matrix_size_out->rows += out_matrix_size.rows;
   25676:	9b07      	ldr	r3, [sp, #28]
   25678:	6818      	ldr	r0, [r3, #0]
   2567a:	4440      	add	r0, r8
   2567c:	6018      	str	r0, [r3, #0]
    if (out_matrix_size.cols > 0) {
   2567e:	2f00      	cmp	r7, #0
   25680:	d14a      	bne.n	25718 <_ZN12_GLOBAL__N_1L21extract_mfe_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP19ei_dsp_config_mfe_tfPNS0_13matrix_size_tE+0x154>
        if (buffer && buffer_managed_by_me) {
   25682:	980e      	ldr	r0, [sp, #56]	; 0x38
   25684:	b130      	cbz	r0, 25694 <_ZN12_GLOBAL__N_1L21extract_mfe_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP19ei_dsp_config_mfe_tfPNS0_13matrix_size_tE+0xd0>
   25686:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
   2568a:	b11b      	cbz	r3, 25694 <_ZN12_GLOBAL__N_1L21extract_mfe_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP19ei_dsp_config_mfe_tfPNS0_13matrix_size_tE+0xd0>
            ei_free(buffer);
   2568c:	f000 fd3a 	bl	26104 <_Z7ei_freePv>
   25690:	e000      	b.n	25694 <_ZN12_GLOBAL__N_1L21extract_mfe_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP19ei_dsp_config_mfe_tfPNS0_13matrix_size_tE+0xd0>
    EI_DSP_MATRIX(energy_matrix, out_matrix_size.rows, 1);
   25692:	4f2d      	ldr	r7, [pc, #180]	; (25748 <_ZN12_GLOBAL__N_1L21extract_mfe_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP19ei_dsp_config_mfe_tfPNS0_13matrix_size_tE+0x184>)
        if (buffer && buffer_managed_by_me) {
   25694:	980a      	ldr	r0, [sp, #40]	; 0x28
   25696:	b118      	cbz	r0, 256a0 <_ZN12_GLOBAL__N_1L21extract_mfe_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP19ei_dsp_config_mfe_tfPNS0_13matrix_size_tE+0xdc>
   25698:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   2569c:	2b00      	cmp	r3, #0
   2569e:	d13e      	bne.n	2571e <_ZN12_GLOBAL__N_1L21extract_mfe_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP19ei_dsp_config_mfe_tfPNS0_13matrix_size_tE+0x15a>
}
   256a0:	4638      	mov	r0, r7
   256a2:	b013      	add	sp, #76	; 0x4c
   256a4:	ecbd 8b02 	vpop	{d8}
   256a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   256ac:	ea4f 0a82 	mov.w	sl, r2, lsl #2
   256b0:	2101      	movs	r1, #1
   256b2:	4650      	mov	r0, sl
   256b4:	9209      	str	r2, [sp, #36]	; 0x24
   256b6:	f000 fd15 	bl	260e4 <_Z9ei_callocjj>
        EI_DSP_MATRIX(shift_matrix, 1, shift);
   256ba:	9008      	str	r0, [sp, #32]
   256bc:	b3b8      	cbz	r0, 2572e <_ZN12_GLOBAL__N_1L21extract_mfe_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP19ei_dsp_config_mfe_tfPNS0_13matrix_size_tE+0x16a>
        memcpy(shift_matrix.buffer, input_array + input_array_size - shift, shift * sizeof(float));
   256be:	9a09      	ldr	r2, [sp, #36]	; 0x24
   256c0:	1aad      	subs	r5, r5, r2
   256c2:	eb09 0185 	add.w	r1, r9, r5, lsl #2
   256c6:	4652      	mov	r2, sl
   256c8:	00ad      	lsls	r5, r5, #2
   256ca:	f7f2 fd99 	bl	18200 <memcpy>
        memmove(input_array + shift, input_array, (input_array_size - shift) * sizeof(float));
   256ce:	462a      	mov	r2, r5
   256d0:	4649      	mov	r1, r9
   256d2:	eb09 000a 	add.w	r0, r9, sl
   256d6:	f005 fb69 	bl	2adac <memmove>
        memcpy(input_array, shift_matrix.buffer, shift * sizeof(float));
   256da:	9b08      	ldr	r3, [sp, #32]
   256dc:	4652      	mov	r2, sl
   256de:	4619      	mov	r1, r3
   256e0:	4648      	mov	r0, r9
   256e2:	f7f2 fd8d 	bl	18200 <memcpy>
            ei_free(buffer);
   256e6:	9b08      	ldr	r3, [sp, #32]
   256e8:	4618      	mov	r0, r3
   256ea:	f000 fd0b 	bl	26104 <_Z7ei_freePv>
    size_t output_matrix_offset = (output_matrix->rows * output_matrix->cols) -
   256ee:	e9d6 3501 	ldrd	r3, r5, [r6, #4]
    matrix_t output_matrix_slice(out_matrix_size.rows, out_matrix_size.cols, output_matrix->buffer + output_matrix_offset);
   256f2:	f8d6 9000 	ldr.w	r9, [r6]
    size_t output_matrix_offset = (output_matrix->rows * output_matrix->cols) -
   256f6:	fb03 f505 	mul.w	r5, r3, r5
   256fa:	eba5 050b 	sub.w	r5, r5, fp
        if (a_buffer) {
   256fe:	eb19 0585 	adds.w	r5, r9, r5, lsl #2
   25702:	d18e      	bne.n	25622 <_ZN12_GLOBAL__N_1L21extract_mfe_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP19ei_dsp_config_mfe_tfPNS0_13matrix_size_tE+0x5e>
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   25704:	ea4f 008b 	mov.w	r0, fp, lsl #2
   25708:	2101      	movs	r1, #1
   2570a:	f000 fceb 	bl	260e4 <_Z9ei_callocjj>
            buffer_managed_by_me = true;
   2570e:	2301      	movs	r3, #1
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   25710:	900a      	str	r0, [sp, #40]	; 0x28
            buffer_managed_by_me = true;
   25712:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   25716:	e788      	b.n	2562a <_ZN12_GLOBAL__N_1L21extract_mfe_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP19ei_dsp_config_mfe_tfPNS0_13matrix_size_tE+0x66>
        matrix_size_out->cols = out_matrix_size.cols;
   25718:	605f      	str	r7, [r3, #4]
    return EIDSP_OK;
   2571a:	4627      	mov	r7, r4
   2571c:	e7b1      	b.n	25682 <_ZN12_GLOBAL__N_1L21extract_mfe_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP19ei_dsp_config_mfe_tfPNS0_13matrix_size_tE+0xbe>
            ei_free(buffer);
   2571e:	f000 fcf1 	bl	26104 <_Z7ei_freePv>
}
   25722:	4638      	mov	r0, r7
   25724:	b013      	add	sp, #76	; 0x4c
   25726:	ecbd 8b02 	vpop	{d8}
   2572a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2572e:	4f06      	ldr	r7, [pc, #24]	; (25748 <_ZN12_GLOBAL__N_1L21extract_mfe_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP19ei_dsp_config_mfe_tfPNS0_13matrix_size_tE+0x184>)
   25730:	4638      	mov	r0, r7
   25732:	b013      	add	sp, #76	; 0x4c
   25734:	ecbd 8b02 	vpop	{d8}
   25738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ei_printf("ERR: MFE failed (%d)\n", x);
   2573c:	4803      	ldr	r0, [pc, #12]	; (2574c <_ZN12_GLOBAL__N_1L21extract_mfe_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP19ei_dsp_config_mfe_tfPNS0_13matrix_size_tE+0x188>)
   2573e:	4621      	mov	r1, r4
   25740:	f000 fcb2 	bl	260a8 <_Z9ei_printfPKcz>
        EIDSP_ERR(x);
   25744:	4627      	mov	r7, r4
   25746:	e79c      	b.n	25682 <_ZN12_GLOBAL__N_1L21extract_mfe_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP19ei_dsp_config_mfe_tfPNS0_13matrix_size_tE+0xbe>
   25748:	fffffc16 	.word	0xfffffc16
   2574c:	00040124 	.word	0x00040124

00025750 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE>:
__attribute__((unused)) int extract_mfe_per_slice_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float sampling_frequency, matrix_size_t *matrix_size_out) {
   25750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25754:	ed2d 8b06 	vpush	{d8-d10}
   25758:	b0af      	sub	sp, #188	; 0xbc
    ei_dsp_config_mfe_t config = *((ei_dsp_config_mfe_t*)config_ptr);
   2575a:	4614      	mov	r4, r2
__attribute__((unused)) int extract_mfe_per_slice_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float sampling_frequency, matrix_size_t *matrix_size_out) {
   2575c:	ee0a 1a10 	vmov	s20, r1
   25760:	4607      	mov	r7, r0
   25762:	9003      	str	r0, [sp, #12]
   25764:	4699      	mov	r9, r3
    ei_dsp_config_mfe_t config = *((ei_dsp_config_mfe_t*)config_ptr);
   25766:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   25768:	ad24      	add	r5, sp, #144	; 0x90
   2576a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    if (config.axes != 1) {
   2576c:	460e      	mov	r6, r1
    ei_dsp_config_mfe_t config = *((ei_dsp_config_mfe_t*)config_ptr);
   2576e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   25770:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   25772:	e894 0003 	ldmia.w	r4, {r0, r1}
    if (config.axes != 1) {
   25776:	2e01      	cmp	r6, #1
    ei_dsp_config_mfe_t config = *((ei_dsp_config_mfe_t*)config_ptr);
   25778:	e885 0003 	stmia.w	r5, {r0, r1}
    if (config.axes != 1) {
   2577c:	f040 82de 	bne.w	25d3c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x5ec>
    if (signal->total_length == 0) {
   25780:	693b      	ldr	r3, [r7, #16]
   25782:	2b00      	cmp	r3, #0
   25784:	f000 82dc 	beq.w	25d40 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x5f0>
    if (config.implementation_version == 1) {
   25788:	f8bd 2090 	ldrh.w	r2, [sp, #144]	; 0x90
   2578c:	2a01      	cmp	r2, #1
    const uint32_t frequency = static_cast<uint32_t>(sampling_frequency);
   2578e:	eebc 9ac0 	vcvt.u32.f32	s18, s0
   25792:	eeb0 8a40 	vmov.f32	s16, s0
    if (config.implementation_version == 1) {
   25796:	f000 81a2 	beq.w	25ade <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x38e>
    _Function_base() : _M_manager(nullptr) { }
   2579a:	2400      	movs	r4, #0
    if (config.implementation_version < 3) {
   2579c:	2a02      	cmp	r2, #2
   2579e:	9419      	str	r4, [sp, #100]	; 0x64
   257a0:	f240 81e4 	bls.w	25b6c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x41c>
        class speechpy::processing::preemphasis *pre = new class speechpy::processing::preemphasis(signal, 1, 0.98f, true);
   257a4:	201c      	movs	r0, #28
   257a6:	f00a f8af 	bl	2f908 <_Znwj>
            : _signal(signal), _shift(shift), _cof(cof), _rescale(rescale)
   257aa:	9b03      	ldr	r3, [sp, #12]
   257ac:	7606      	strb	r6, [r0, #24]
   257ae:	e9c0 3600 	strd	r3, r6, [r0]
   257b2:	4b9b      	ldr	r3, [pc, #620]	; (25a20 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2d0>)
   257b4:	6083      	str	r3, [r0, #8]
   257b6:	4605      	mov	r5, r0
            _prev_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
   257b8:	4631      	mov	r1, r6
   257ba:	2004      	movs	r0, #4
   257bc:	f000 fc92 	bl	260e4 <_Z9ei_callocjj>
            _end_of_signal_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
   257c0:	4631      	mov	r1, r6
            _prev_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
   257c2:	60e8      	str	r0, [r5, #12]
            _end_of_signal_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
   257c4:	2004      	movs	r0, #4
   257c6:	f000 fc8d 	bl	260e4 <_Z9ei_callocjj>
            if (!_prev_buffer || !_end_of_signal_buffer) return;
   257ca:	68eb      	ldr	r3, [r5, #12]
            _end_of_signal_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
   257cc:	e9c5 0404 	strd	r0, r4, [r5, #16]
            if (!_prev_buffer || !_end_of_signal_buffer) return;
   257d0:	2b00      	cmp	r3, #0
   257d2:	f000 821d 	beq.w	25c10 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x4c0>
   257d6:	2800      	cmp	r0, #0
   257d8:	f000 821a 	beq.w	25c10 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x4c0>
            signal->get_data(signal->total_length - shift, shift, _end_of_signal_buffer);
   257dc:	9a03      	ldr	r2, [sp, #12]
   257de:	6913      	ldr	r3, [r2, #16]
   257e0:	3b01      	subs	r3, #1
   257e2:	9313      	str	r3, [sp, #76]	; 0x4c
      if (_M_empty())
   257e4:	6893      	ldr	r3, [r2, #8]
   257e6:	e9cd 0610 	strd	r0, r6, [sp, #64]	; 0x40
   257ea:	2b00      	cmp	r3, #0
   257ec:	f000 82bf 	beq.w	25d6e <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x61e>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   257f0:	68d4      	ldr	r4, [r2, #12]
   257f2:	4610      	mov	r0, r2
   257f4:	a913      	add	r1, sp, #76	; 0x4c
   257f6:	ab10      	add	r3, sp, #64	; 0x40
   257f8:	aa11      	add	r2, sp, #68	; 0x44
   257fa:	9102      	str	r1, [sp, #8]
   257fc:	47a0      	blx	r4
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   257fe:	4b89      	ldr	r3, [pc, #548]	; (25a24 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2d4>)
   25800:	931c      	str	r3, [sp, #112]	; 0x70
        preemphasis = pre;
   25802:	4b89      	ldr	r3, [pc, #548]	; (25a28 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2d8>)
   25804:	4989      	ldr	r1, [pc, #548]	; (25a2c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2dc>)
   25806:	9307      	str	r3, [sp, #28]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   25808:	ae1c      	add	r6, sp, #112	; 0x70
   2580a:	601d      	str	r5, [r3, #0]
      __a = _GLIBCXX_MOVE(__b);
   2580c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
      __b = _GLIBCXX_MOVE(__tmp);
   2580e:	911a      	str	r1, [sp, #104]	; 0x68
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   25810:	e896 0003 	ldmia.w	r6, {r0, r1}
   25814:	9c02      	ldr	r4, [sp, #8]
        preemphasized_audio_signal.total_length = signal->total_length;
   25816:	9a03      	ldr	r2, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   25818:	f10d 0a5c 	add.w	sl, sp, #92	; 0x5c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   2581c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   25820:	e89a 0003 	ldmia.w	sl, {r0, r1}
   25824:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   25828:	e894 0003 	ldmia.w	r4, {r0, r1}
   2582c:	e88a 0003 	stmia.w	sl, {r0, r1}
   25830:	6912      	ldr	r2, [r2, #16]
      __a = _GLIBCXX_MOVE(__b);
   25832:	931f      	str	r3, [sp, #124]	; 0x7c
   25834:	9b19      	ldr	r3, [sp, #100]	; 0x64
   25836:	921b      	str	r2, [sp, #108]	; 0x6c
      __b = _GLIBCXX_MOVE(__tmp);
   25838:	4a7d      	ldr	r2, [pc, #500]	; (25a30 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2e0>)
   2583a:	9219      	str	r2, [sp, #100]	; 0x64
      __a = _GLIBCXX_MOVE(__b);
   2583c:	931e      	str	r3, [sp, #120]	; 0x78
      if (_M_manager)
   2583e:	b11b      	cbz	r3, 25848 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0xf8>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   25840:	2203      	movs	r2, #3
   25842:	4631      	mov	r1, r6
   25844:	4630      	mov	r0, r6
   25846:	4798      	blx	r3
   25848:	eef8 8a49 	vcvt.f32.u32	s17, s18
    const size_t frame_length_values = frequency * config.frame_length;
   2584c:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
    const size_t frame_stride_values = frequency * config.frame_stride;
   25850:	eddd 7a27 	vldr	s15, [sp, #156]	; 0x9c
    const size_t frame_length_values = frequency * config.frame_length;
   25854:	ee28 7a87 	vmul.f32	s14, s17, s14
    const size_t frame_stride_values = frequency * config.frame_stride;
   25858:	ee68 7aa7 	vmul.f32	s15, s17, s15
    const size_t frame_length_values = frequency * config.frame_length;
   2585c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
    const size_t frame_stride_values = frequency * config.frame_stride;
   25860:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    const size_t frame_length_values = frequency * config.frame_length;
   25864:	ee17 ba10 	vmov	fp, s14
    if (frame_overlap_values < 0) {
   25868:	ee17 3a90 	vmov	r3, s15
   2586c:	ebbb 0303 	subs.w	r3, fp, r3
    const size_t frame_stride_values = frequency * config.frame_stride;
   25870:	edcd 7a01 	vstr	s15, [sp, #4]
    if (frame_overlap_values < 0) {
   25874:	9305      	str	r3, [sp, #20]
   25876:	f100 81ce 	bmi.w	25c16 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x4c6>
    if (frame_length_values > preemphasized_audio_signal.total_length) {
   2587a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   2587c:	455a      	cmp	r2, fp
   2587e:	f0c0 8198 	bcc.w	25bb2 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x462>
    if (ei_dsp_cont_current_frame && ei_dsp_cont_current_frame_size != frame_length_values) {
   25882:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 25a44 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2f4>
   25886:	f8d8 0000 	ldr.w	r0, [r8]
   2588a:	b140      	cbz	r0, 2589e <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x14e>
   2588c:	4b69      	ldr	r3, [pc, #420]	; (25a34 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2e4>)
   2588e:	681b      	ldr	r3, [r3, #0]
   25890:	455b      	cmp	r3, fp
   25892:	d03a      	beq.n	2590a <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x1ba>
        ei_free(ei_dsp_cont_current_frame);
   25894:	f000 fc36 	bl	26104 <_Z7ei_freePv>
        ei_dsp_cont_current_frame = nullptr;
   25898:	2300      	movs	r3, #0
   2589a:	f8c8 3000 	str.w	r3, [r8]
        ei_dsp_cont_current_frame = (float*)ei_calloc(frame_length_values * sizeof(float), 1);
   2589e:	2101      	movs	r1, #1
   258a0:	ea4f 008b 	mov.w	r0, fp, lsl #2
   258a4:	f000 fc1e 	bl	260e4 <_Z9ei_callocjj>
   258a8:	f8c8 0000 	str.w	r0, [r8]
        if (!ei_dsp_cont_current_frame) {
   258ac:	2800      	cmp	r0, #0
   258ae:	f000 821e 	beq.w	25cee <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x59e>
        ei_dsp_cont_current_frame_size = frame_length_values;
   258b2:	4b60      	ldr	r3, [pc, #384]	; (25a34 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2e4>)
        ei_dsp_cont_current_frame_ix = 0;
   258b4:	4f60      	ldr	r7, [pc, #384]	; (25a38 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2e8>)
        ei_dsp_cont_current_frame_size = frame_length_values;
   258b6:	f8c3 b000 	str.w	fp, [r3]
        ei_dsp_cont_current_frame_ix = 0;
   258ba:	2300      	movs	r3, #0
    if (ei_dsp_cont_current_frame_ix > (int)ei_dsp_cont_current_frame_size) {
   258bc:	459b      	cmp	fp, r3
    matrix_size_out->cols = 0;
   258be:	e9c9 3300 	strd	r3, r3, [r9]
        ei_dsp_cont_current_frame_ix = 0;
   258c2:	603b      	str	r3, [r7, #0]
    if (ei_dsp_cont_current_frame_ix > (int)ei_dsp_cont_current_frame_size) {
   258c4:	f2c0 81cb 	blt.w	25c5e <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x50e>
    if (offset_in_signal >= signal->total_length) {
   258c8:	9b03      	ldr	r3, [sp, #12]
   258ca:	691c      	ldr	r4, [r3, #16]
   258cc:	2c00      	cmp	r4, #0
   258ce:	f040 8150 	bne.w	25b72 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x422>
        if (preemphasis) {
   258d2:	9b07      	ldr	r3, [sp, #28]
   258d4:	681d      	ldr	r5, [r3, #0]
   258d6:	b165      	cbz	r5, 258f2 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x1a2>
            if (_prev_buffer) {
   258d8:	68e8      	ldr	r0, [r5, #12]
   258da:	b108      	cbz	r0, 258e0 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x190>
                ei_dsp_free(_prev_buffer, _shift * sizeof(float));
   258dc:	f000 fc12 	bl	26104 <_Z7ei_freePv>
            if (_end_of_signal_buffer) {
   258e0:	6928      	ldr	r0, [r5, #16]
   258e2:	b108      	cbz	r0, 258e8 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x198>
                ei_dsp_free(_end_of_signal_buffer, _shift * sizeof(float));
   258e4:	f000 fc0e 	bl	26104 <_Z7ei_freePv>
            delete preemphasis;
   258e8:	4628      	mov	r0, r5
   258ea:	211c      	movs	r1, #28
   258ec:	f00a f810 	bl	2f910 <_ZdlPvj>
        return EIDSP_OK;
   258f0:	2500      	movs	r5, #0
      if (_M_manager)
   258f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
   258f4:	b11b      	cbz	r3, 258fe <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x1ae>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   258f6:	2203      	movs	r2, #3
   258f8:	4651      	mov	r1, sl
   258fa:	4650      	mov	r0, sl
   258fc:	4798      	blx	r3
}
   258fe:	4628      	mov	r0, r5
   25900:	b02f      	add	sp, #188	; 0xbc
   25902:	ecbd 8b06 	vpop	{d8-d10}
   25906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ei_dsp_cont_current_frame_ix > (int)ei_dsp_cont_current_frame_size) {
   2590a:	4f4b      	ldr	r7, [pc, #300]	; (25a38 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2e8>)
   2590c:	683c      	ldr	r4, [r7, #0]
    matrix_size_out->rows = 0;
   2590e:	2300      	movs	r3, #0
    if (ei_dsp_cont_current_frame_ix > (int)ei_dsp_cont_current_frame_size) {
   25910:	455c      	cmp	r4, fp
    matrix_size_out->cols = 0;
   25912:	e9c9 3300 	strd	r3, r3, [r9]
    if (ei_dsp_cont_current_frame_ix > (int)ei_dsp_cont_current_frame_size) {
   25916:	f300 81a2 	bgt.w	25c5e <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x50e>
    while (ei_dsp_cont_current_frame_ix > 0) {
   2591a:	2c00      	cmp	r4, #0
   2591c:	f340 8096 	ble.w	25a4c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2fc>
   25920:	ee17 3a90 	vmov	r3, s15
            numpy::roll(ei_dsp_cont_current_frame, frame_length_values, -frame_stride_values);
   25924:	425b      	negs	r3, r3
   25926:	461a      	mov	r2, r3
   25928:	9306      	str	r3, [sp, #24]
        EI_DSP_MATRIX(shift_matrix, 1, shift);
   2592a:	9b05      	ldr	r3, [sp, #20]
   2592c:	ea13 0322 	ands.w	r3, r3, r2, asr #32
   25930:	bf38      	it	cc
   25932:	4613      	movcc	r3, r2
        memcpy(shift_matrix.buffer, input_array + input_array_size - shift, shift * sizeof(float));
   25934:	ebab 0203 	sub.w	r2, fp, r3
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   25938:	009b      	lsls	r3, r3, #2
   2593a:	9304      	str	r3, [sp, #16]
   2593c:	0093      	lsls	r3, r2, #2
      __b = _GLIBCXX_MOVE(__tmp);
   2593e:	ee17 5a10 	vmov	r5, s14
   25942:	ee1a ba10 	vmov	fp, s20
   25946:	9308      	str	r3, [sp, #32]
   25948:	e00f      	b.n	2596a <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x21a>
        ei_dsp_cont_current_frame_ix -= frame_stride_values;
   2594a:	683c      	ldr	r4, [r7, #0]
   2594c:	9b01      	ldr	r3, [sp, #4]
   2594e:	1ae4      	subs	r4, r4, r3
      if (_M_manager)
   25950:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   25952:	603c      	str	r4, [r7, #0]
   25954:	2b00      	cmp	r3, #0
   25956:	d077      	beq.n	25a48 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2f8>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   25958:	2203      	movs	r2, #3
   2595a:	4631      	mov	r1, r6
   2595c:	4630      	mov	r0, r6
   2595e:	4798      	blx	r3
    while (ei_dsp_cont_current_frame_ix > 0) {
   25960:	683c      	ldr	r4, [r7, #0]
   25962:	2c00      	cmp	r4, #0
   25964:	dd72      	ble.n	25a4c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2fc>
        x = preemphasized_audio_signal.get_data(0, frame_length_values - ei_dsp_cont_current_frame_ix, ei_dsp_cont_current_frame + ei_dsp_cont_current_frame_ix);
   25966:	f8d8 0000 	ldr.w	r0, [r8]
   2596a:	2300      	movs	r3, #0
   2596c:	930a      	str	r3, [sp, #40]	; 0x28
      if (_M_empty())
   2596e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   25970:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   25974:	1b2c      	subs	r4, r5, r4
   25976:	900c      	str	r0, [sp, #48]	; 0x30
   25978:	940b      	str	r4, [sp, #44]	; 0x2c
   2597a:	2b00      	cmp	r3, #0
   2597c:	f000 81f7 	beq.w	25d6e <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x61e>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   25980:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   25982:	ab0c      	add	r3, sp, #48	; 0x30
   25984:	aa0b      	add	r2, sp, #44	; 0x2c
   25986:	a90a      	add	r1, sp, #40	; 0x28
   25988:	4650      	mov	r0, sl
   2598a:	47a0      	blx	r4
        if (x != EIDSP_OK) {
   2598c:	2800      	cmp	r0, #0
   2598e:	f040 80fd 	bne.w	25b8c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x43c>
        x = numpy::signal_from_buffer(ei_dsp_cont_current_frame, frame_length_values, &frame_signal);
   25992:	f8d8 3000 	ldr.w	r3, [r8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   25996:	9902      	ldr	r1, [sp, #8]
   25998:	9313      	str	r3, [sp, #76]	; 0x4c
   2599a:	c903      	ldmia	r1, {r0, r1}
   2599c:	ac11      	add	r4, sp, #68	; 0x44
   2599e:	e884 0003 	stmia.w	r4, {r0, r1}
        signal->total_length = data_size;
   259a2:	9520      	str	r5, [sp, #128]	; 0x80
      __b = _GLIBCXX_MOVE(__tmp);
   259a4:	e886 0003 	stmia.w	r6, {r0, r1}
   259a8:	4924      	ldr	r1, [pc, #144]	; (25a3c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2ec>)
   259aa:	911e      	str	r1, [sp, #120]	; 0x78
   259ac:	4924      	ldr	r1, [pc, #144]	; (25a40 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x2f0>)
   259ae:	911f      	str	r1, [sp, #124]	; 0x7c
        x = extract_mfe_run_slice(&frame_signal, output_matrix, &config, sampling_frequency, matrix_size_out);
   259b0:	eeb0 0a48 	vmov.f32	s0, s16
   259b4:	464b      	mov	r3, r9
   259b6:	aa24      	add	r2, sp, #144	; 0x90
   259b8:	4659      	mov	r1, fp
   259ba:	4630      	mov	r0, r6
   259bc:	f7ff fe02 	bl	255c4 <_ZN12_GLOBAL__N_1L21extract_mfe_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP19ei_dsp_config_mfe_tfPNS0_13matrix_size_tE>
        if (x != EIDSP_OK) {
   259c0:	2800      	cmp	r0, #0
   259c2:	f040 810c 	bne.w	25bde <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x48e>
        if (frame_stride_values > 0) {
   259c6:	9b01      	ldr	r3, [sp, #4]
   259c8:	2b00      	cmp	r3, #0
   259ca:	d0be      	beq.n	2594a <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x1fa>
        if (shift < 0) {
   259cc:	9b06      	ldr	r3, [sp, #24]
   259ce:	2b00      	cmp	r3, #0
   259d0:	f2c0 8080 	blt.w	25ad4 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x384>
   259d4:	eddd 9a04 	vldr	s19, [sp, #16]
            numpy::roll(ei_dsp_cont_current_frame, frame_length_values, -frame_stride_values);
   259d8:	f8d8 4000 	ldr.w	r4, [r8]
   259dc:	ee19 0a90 	vmov	r0, s19
   259e0:	2101      	movs	r1, #1
   259e2:	f000 fb7f 	bl	260e4 <_Z9ei_callocjj>
        EI_DSP_MATRIX(shift_matrix, 1, shift);
   259e6:	9009      	str	r0, [sp, #36]	; 0x24
   259e8:	2800      	cmp	r0, #0
   259ea:	d0ae      	beq.n	2594a <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x1fa>
        memcpy(shift_matrix.buffer, input_array + input_array_size - shift, shift * sizeof(float));
   259ec:	9b08      	ldr	r3, [sp, #32]
   259ee:	ee19 2a90 	vmov	r2, s19
   259f2:	18e1      	adds	r1, r4, r3
   259f4:	f7f2 fc04 	bl	18200 <memcpy>
        memmove(input_array + shift, input_array, (input_array_size - shift) * sizeof(float));
   259f8:	ee19 3a90 	vmov	r3, s19
   259fc:	9a08      	ldr	r2, [sp, #32]
   259fe:	edcd 9a04 	vstr	s19, [sp, #16]
   25a02:	4621      	mov	r1, r4
   25a04:	18e0      	adds	r0, r4, r3
   25a06:	f005 f9d1 	bl	2adac <memmove>
        memcpy(input_array, shift_matrix.buffer, shift * sizeof(float));
   25a0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   25a0c:	9a04      	ldr	r2, [sp, #16]
   25a0e:	4619      	mov	r1, r3
   25a10:	4620      	mov	r0, r4
   25a12:	f7f2 fbf5 	bl	18200 <memcpy>
            ei_free(buffer);
   25a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
   25a18:	4618      	mov	r0, r3
   25a1a:	f000 fb73 	bl	26104 <_Z7ei_freePv>
   25a1e:	e794      	b.n	2594a <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x1fa>
   25a20:	3f7ae148 	.word	0x3f7ae148
   25a24:	00021529 	.word	0x00021529
   25a28:	1001884c 	.word	0x1001884c
   25a2c:	0002067d 	.word	0x0002067d
   25a30:	00020921 	.word	0x00020921
   25a34:	10018858 	.word	0x10018858
   25a38:	10018854 	.word	0x10018854
   25a3c:	000208d9 	.word	0x000208d9
   25a40:	000206a9 	.word	0x000206a9
   25a44:	10018850 	.word	0x10018850
    while (ei_dsp_cont_current_frame_ix > 0) {
   25a48:	2c00      	cmp	r4, #0
   25a4a:	dc8c      	bgt.n	25966 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x216>
    if (ei_dsp_cont_current_frame_ix < 0) {
   25a4c:	2c00      	cmp	r4, #0
   25a4e:	f43f af3b 	beq.w	258c8 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x178>
    if (offset_in_signal >= signal->total_length) {
   25a52:	9b03      	ldr	r3, [sp, #12]
   25a54:	691b      	ldr	r3, [r3, #16]
        offset_in_signal = -ei_dsp_cont_current_frame_ix;
   25a56:	f1c4 0b00 	rsb	fp, r4, #0
        ei_dsp_cont_current_frame_ix = 0;
   25a5a:	2200      	movs	r2, #0
    if (offset_in_signal >= signal->total_length) {
   25a5c:	455b      	cmp	r3, fp
        ei_dsp_cont_current_frame_ix = 0;
   25a5e:	603a      	str	r2, [r7, #0]
    if (offset_in_signal >= signal->total_length) {
   25a60:	f67f af37 	bls.w	258d2 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x182>
        _original_signal(original_signal), _range_start(range_start), _range_end(range_end)
   25a64:	e9cd ab1c 	strd	sl, fp, [sp, #112]	; 0x70
   25a68:	931e      	str	r3, [sp, #120]	; 0x78
        if (this->_range_start == 0 && this->_range_end == this->_original_signal->total_length) {
   25a6a:	441c      	add	r4, r3
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   25a6c:	9b02      	ldr	r3, [sp, #8]
   25a6e:	9613      	str	r6, [sp, #76]	; 0x4c
   25a70:	e893 0003 	ldmia.w	r3, {r0, r1}
   25a74:	ab11      	add	r3, sp, #68	; 0x44
   25a76:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   25a7a:	4aa5      	ldr	r2, [pc, #660]	; (25d10 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x5c0>)
   25a7c:	4ba5      	ldr	r3, [pc, #660]	; (25d14 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x5c4>)
        wrapped_signal.total_length = _range_end - _range_start;
   25a7e:	9423      	str	r4, [sp, #140]	; 0x8c
   25a80:	ae1f      	add	r6, sp, #124	; 0x7c
   25a82:	9221      	str	r2, [sp, #132]	; 0x84
   25a84:	e886 0003 	stmia.w	r6, {r0, r1}
   25a88:	9322      	str	r3, [sp, #136]	; 0x88
    x = extract_mfe_run_slice(range_signal, output_matrix, &config, sampling_frequency, matrix_size_out);
   25a8a:	ee1a 1a10 	vmov	r1, s20
   25a8e:	eeb0 0a48 	vmov.f32	s0, s16
   25a92:	464b      	mov	r3, r9
   25a94:	aa24      	add	r2, sp, #144	; 0x90
   25a96:	4630      	mov	r0, r6
   25a98:	f7ff fd94 	bl	255c4 <_ZN12_GLOBAL__N_1L21extract_mfe_run_sliceEPN2ei11ei_signal_tEPNS0_9ei_matrixEP19ei_dsp_config_mfe_tfPNS0_13matrix_size_tE>
    if (x != EIDSP_OK) {
   25a9c:	4605      	mov	r5, r0
   25a9e:	2800      	cmp	r0, #0
   25aa0:	f000 80e5 	beq.w	25c6e <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x51e>
    if (preemphasis) {
   25aa4:	9b07      	ldr	r3, [sp, #28]
   25aa6:	681c      	ldr	r4, [r3, #0]
   25aa8:	b15c      	cbz	r4, 25ac2 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x372>
            if (_prev_buffer) {
   25aaa:	68e0      	ldr	r0, [r4, #12]
   25aac:	b108      	cbz	r0, 25ab2 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x362>
                ei_dsp_free(_prev_buffer, _shift * sizeof(float));
   25aae:	f000 fb29 	bl	26104 <_Z7ei_freePv>
            if (_end_of_signal_buffer) {
   25ab2:	6920      	ldr	r0, [r4, #16]
   25ab4:	b108      	cbz	r0, 25aba <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x36a>
                ei_dsp_free(_end_of_signal_buffer, _shift * sizeof(float));
   25ab6:	f000 fb25 	bl	26104 <_Z7ei_freePv>
        delete preemphasis;
   25aba:	211c      	movs	r1, #28
   25abc:	4620      	mov	r0, r4
   25abe:	f009 ff27 	bl	2f910 <_ZdlPvj>
      if (_M_manager)
   25ac2:	9b21      	ldr	r3, [sp, #132]	; 0x84
   25ac4:	2b00      	cmp	r3, #0
   25ac6:	f43f af14 	beq.w	258f2 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x1a2>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   25aca:	a91f      	add	r1, sp, #124	; 0x7c
   25acc:	2203      	movs	r2, #3
   25ace:	4608      	mov	r0, r1
   25ad0:	4798      	blx	r3
class SignalWithRange {
   25ad2:	e70e      	b.n	258f2 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x1a2>
        if (shift == 0) {
   25ad4:	9b05      	ldr	r3, [sp, #20]
   25ad6:	2b00      	cmp	r3, #0
   25ad8:	f43f af37 	beq.w	2594a <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x1fa>
   25adc:	e77a      	b.n	259d4 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x284>
        if (first_run == true) {
   25ade:	4a8e      	ldr	r2, [pc, #568]	; (25d18 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x5c8>)
   25ae0:	7811      	ldrb	r1, [r2, #0]
            signal->total_length += (size_t)(config.frame_length * (float)frequency);
   25ae2:	eef8 8a49 	vcvt.f32.u32	s17, s18
        if (first_run == true) {
   25ae6:	2900      	cmp	r1, #0
   25ae8:	d134      	bne.n	25b54 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x404>
        first_run = true;
   25aea:	2101      	movs	r1, #1
   25aec:	7011      	strb	r1, [r2, #0]
    _Function_base() : _M_manager(nullptr) { }
   25aee:	2200      	movs	r2, #0
   25af0:	9219      	str	r2, [sp, #100]	; 0x64
        preemphasized_audio_signal.total_length = signal->total_length;
   25af2:	931b      	str	r3, [sp, #108]	; 0x6c
    bool _M_empty() const { return !_M_manager; }
   25af4:	9b03      	ldr	r3, [sp, #12]
        preemphasis = nullptr;
   25af6:	4a89      	ldr	r2, [pc, #548]	; (25d1c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x5cc>)
   25af8:	689c      	ldr	r4, [r3, #8]
   25afa:	9207      	str	r2, [sp, #28]
   25afc:	2300      	movs	r3, #0
   25afe:	6013      	str	r3, [r2, #0]
    _Function_base() : _M_manager(nullptr) { }
   25b00:	931e      	str	r3, [sp, #120]	; 0x78
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   25b02:	ae1c      	add	r6, sp, #112	; 0x70
      if (static_cast<bool>(__x))
   25b04:	2c00      	cmp	r4, #0
   25b06:	f000 809c 	beq.w	25c42 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x4f2>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   25b0a:	9f03      	ldr	r7, [sp, #12]
   25b0c:	2202      	movs	r2, #2
   25b0e:	4639      	mov	r1, r7
   25b10:	4630      	mov	r0, r6
   25b12:	47a0      	blx	r4
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   25b14:	e896 0003 	ldmia.w	r6, {r0, r1}
   25b18:	ad13      	add	r5, sp, #76	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   25b1a:	f10d 0a5c 	add.w	sl, sp, #92	; 0x5c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   25b1e:	e885 0003 	stmia.w	r5, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   25b22:	e89a 0003 	ldmia.w	sl, {r0, r1}
   25b26:	e9dd 3419 	ldrd	r3, r4, [sp, #100]	; 0x64
   25b2a:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   25b2e:	e895 0003 	ldmia.w	r5, {r0, r1}
	  _M_invoker = __x._M_invoker;
   25b32:	68fa      	ldr	r2, [r7, #12]
   25b34:	921a      	str	r2, [sp, #104]	; 0x68
	  _M_manager = __x._M_manager;
   25b36:	68ba      	ldr	r2, [r7, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   25b38:	9502      	str	r5, [sp, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   25b3a:	e88a 0003 	stmia.w	sl, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   25b3e:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
      __b = _GLIBCXX_MOVE(__tmp);
   25b42:	9219      	str	r2, [sp, #100]	; 0x64
      if (_M_manager)
   25b44:	2b00      	cmp	r3, #0
   25b46:	f43f ae81 	beq.w	2584c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0xfc>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   25b4a:	2203      	movs	r2, #3
   25b4c:	4631      	mov	r1, r6
   25b4e:	4630      	mov	r0, r6
   25b50:	4798      	blx	r3
	return *this;
   25b52:	e67b      	b.n	2584c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0xfc>
            signal->total_length += (size_t)(config.frame_length * (float)frequency);
   25b54:	eddd 7a26 	vldr	s15, [sp, #152]	; 0x98
   25b58:	ee68 7aa7 	vmul.f32	s15, s17, s15
   25b5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   25b60:	ee17 1a90 	vmov	r1, s15
   25b64:	440b      	add	r3, r1
   25b66:	9903      	ldr	r1, [sp, #12]
   25b68:	610b      	str	r3, [r1, #16]
   25b6a:	e7be      	b.n	25aea <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x39a>
   25b6c:	eef8 8a49 	vcvt.f32.u32	s17, s18
   25b70:	e7bf      	b.n	25af2 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x3a2>
        if (this->_range_start == 0 && this->_range_end == this->_original_signal->total_length) {
   25b72:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
        _original_signal(original_signal), _range_start(range_start), _range_end(range_end)
   25b74:	f8cd a070 	str.w	sl, [sp, #112]	; 0x70
   25b78:	2300      	movs	r3, #0
        if (this->_range_start == 0 && this->_range_end == this->_original_signal->total_length) {
   25b7a:	4294      	cmp	r4, r2
        _original_signal(original_signal), _range_start(range_start), _range_end(range_end)
   25b7c:	941e      	str	r4, [sp, #120]	; 0x78
   25b7e:	931d      	str	r3, [sp, #116]	; 0x74
    _Function_base() : _M_manager(nullptr) { }
   25b80:	9321      	str	r3, [sp, #132]	; 0x84
        if (this->_range_start == 0 && this->_range_end == this->_original_signal->total_length) {
   25b82:	469b      	mov	fp, r3
   25b84:	f47f af72 	bne.w	25a6c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x31c>
            return this->_original_signal;
   25b88:	4656      	mov	r6, sl
   25b8a:	e77e      	b.n	25a8a <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x33a>
            if (preemphasis) {
   25b8c:	9b07      	ldr	r3, [sp, #28]
   25b8e:	681c      	ldr	r4, [r3, #0]
   25b90:	4605      	mov	r5, r0
   25b92:	2c00      	cmp	r4, #0
   25b94:	f43f aead 	beq.w	258f2 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x1a2>
            if (_prev_buffer) {
   25b98:	68e0      	ldr	r0, [r4, #12]
   25b9a:	b108      	cbz	r0, 25ba0 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x450>
                ei_dsp_free(_prev_buffer, _shift * sizeof(float));
   25b9c:	f000 fab2 	bl	26104 <_Z7ei_freePv>
            if (_end_of_signal_buffer) {
   25ba0:	6920      	ldr	r0, [r4, #16]
   25ba2:	b108      	cbz	r0, 25ba8 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x458>
                ei_dsp_free(_end_of_signal_buffer, _shift * sizeof(float));
   25ba4:	f000 faae 	bl	26104 <_Z7ei_freePv>
                delete preemphasis;
   25ba8:	211c      	movs	r1, #28
   25baa:	4620      	mov	r0, r4
   25bac:	f009 feb0 	bl	2f910 <_ZdlPvj>
   25bb0:	e69f      	b.n	258f2 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x1a2>
        ei_printf("ERR: frame_length (%d) cannot be larger than signal's total length (%d) for continuous classification\n",
   25bb2:	485b      	ldr	r0, [pc, #364]	; (25d20 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x5d0>)
   25bb4:	ee17 1a10 	vmov	r1, s14
   25bb8:	f000 fa76 	bl	260a8 <_Z9ei_printfPKcz>
        if (preemphasis) {
   25bbc:	9b07      	ldr	r3, [sp, #28]
   25bbe:	681c      	ldr	r4, [r3, #0]
   25bc0:	b15c      	cbz	r4, 25bda <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x48a>
            if (_prev_buffer) {
   25bc2:	68e0      	ldr	r0, [r4, #12]
   25bc4:	b108      	cbz	r0, 25bca <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x47a>
                ei_dsp_free(_prev_buffer, _shift * sizeof(float));
   25bc6:	f000 fa9d 	bl	26104 <_Z7ei_freePv>
            if (_end_of_signal_buffer) {
   25bca:	6920      	ldr	r0, [r4, #16]
   25bcc:	b108      	cbz	r0, 25bd2 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x482>
                ei_dsp_free(_end_of_signal_buffer, _shift * sizeof(float));
   25bce:	f000 fa99 	bl	26104 <_Z7ei_freePv>
            delete preemphasis;
   25bd2:	211c      	movs	r1, #28
   25bd4:	4620      	mov	r0, r4
   25bd6:	f009 fe9b 	bl	2f910 <_ZdlPvj>
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
   25bda:	4d52      	ldr	r5, [pc, #328]	; (25d24 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x5d4>)
   25bdc:	e689      	b.n	258f2 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x1a2>
            if (preemphasis) {
   25bde:	9b07      	ldr	r3, [sp, #28]
   25be0:	681c      	ldr	r4, [r3, #0]
   25be2:	4605      	mov	r5, r0
   25be4:	b15c      	cbz	r4, 25bfe <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x4ae>
            if (_prev_buffer) {
   25be6:	68e0      	ldr	r0, [r4, #12]
   25be8:	b108      	cbz	r0, 25bee <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x49e>
                ei_dsp_free(_prev_buffer, _shift * sizeof(float));
   25bea:	f000 fa8b 	bl	26104 <_Z7ei_freePv>
            if (_end_of_signal_buffer) {
   25bee:	6920      	ldr	r0, [r4, #16]
   25bf0:	b108      	cbz	r0, 25bf6 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x4a6>
                ei_dsp_free(_end_of_signal_buffer, _shift * sizeof(float));
   25bf2:	f000 fa87 	bl	26104 <_Z7ei_freePv>
                delete preemphasis;
   25bf6:	211c      	movs	r1, #28
   25bf8:	4620      	mov	r0, r4
   25bfa:	f009 fe89 	bl	2f910 <_ZdlPvj>
      if (_M_manager)
   25bfe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   25c00:	2b00      	cmp	r3, #0
   25c02:	f43f ae76 	beq.w	258f2 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x1a2>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   25c06:	2203      	movs	r2, #3
   25c08:	4631      	mov	r1, r6
   25c0a:	4630      	mov	r0, r6
   25c0c:	4798      	blx	r3
typedef struct ei_signal_t {
   25c0e:	e670      	b.n	258f2 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x1a2>
   25c10:	ab13      	add	r3, sp, #76	; 0x4c
   25c12:	9302      	str	r3, [sp, #8]
   25c14:	e5f3      	b.n	257fe <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0xae>
        ei_printf("ERR: frame_length (");
   25c16:	4844      	ldr	r0, [pc, #272]	; (25d28 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x5d8>)
   25c18:	f000 fa46 	bl	260a8 <_Z9ei_printfPKcz>
            ei_printf_float(config.frame_length);            
   25c1c:	ed9d 0a26 	vldr	s0, [sp, #152]	; 0x98
   25c20:	f000 fa50 	bl	260c4 <_Z15ei_printf_floatf>
            ei_printf(") cannot be lower than frame_stride (");
   25c24:	4841      	ldr	r0, [pc, #260]	; (25d2c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x5dc>)
   25c26:	f000 fa3f 	bl	260a8 <_Z9ei_printfPKcz>
            ei_printf_float(config.frame_stride);
   25c2a:	ed9d 0a27 	vldr	s0, [sp, #156]	; 0x9c
   25c2e:	f000 fa49 	bl	260c4 <_Z15ei_printf_floatf>
            ei_printf(") for continuous classification\n");
   25c32:	483f      	ldr	r0, [pc, #252]	; (25d30 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x5e0>)
   25c34:	f000 fa38 	bl	260a8 <_Z9ei_printfPKcz>
        if (preemphasis) {
   25c38:	9b07      	ldr	r3, [sp, #28]
   25c3a:	681c      	ldr	r4, [r3, #0]
   25c3c:	2c00      	cmp	r4, #0
   25c3e:	d1c0      	bne.n	25bc2 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x472>
   25c40:	e7cb      	b.n	25bda <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x48a>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   25c42:	e896 0003 	ldmia.w	r6, {r0, r1}
   25c46:	aa13      	add	r2, sp, #76	; 0x4c
   25c48:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   25c4a:	9202      	str	r2, [sp, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   25c4c:	f10d 0a5c 	add.w	sl, sp, #92	; 0x5c
   25c50:	e88a 0003 	stmia.w	sl, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   25c54:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   25c58:	931a      	str	r3, [sp, #104]	; 0x68
   25c5a:	9419      	str	r4, [sp, #100]	; 0x64
      if (_M_manager)
   25c5c:	e5f6      	b.n	2584c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0xfc>
        ei_printf("ERR: ei_dsp_cont_current_frame_ix is larger than frame size\n");
   25c5e:	4835      	ldr	r0, [pc, #212]	; (25d34 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x5e4>)
   25c60:	f000 fa22 	bl	260a8 <_Z9ei_printfPKcz>
        if (preemphasis) {
   25c64:	9b07      	ldr	r3, [sp, #28]
   25c66:	681c      	ldr	r4, [r3, #0]
   25c68:	2c00      	cmp	r4, #0
   25c6a:	d1aa      	bne.n	25bc2 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x472>
   25c6c:	e7b5      	b.n	25bda <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x48a>
    int length_of_signal_used = speechpy::processing::calculate_signal_used(range_signal->total_length, sampling_frequency,
   25c6e:	6930      	ldr	r0, [r6, #16]
   25c70:	eddd 0a27 	vldr	s1, [sp, #156]	; 0x9c
   25c74:	ed9d 0a26 	vldr	s0, [sp, #152]	; 0x98
   25c78:	f8bd 2090 	ldrh.w	r2, [sp, #144]	; 0x90
   25c7c:	ee19 1a10 	vmov	r1, s18
   25c80:	f7fa ffa8 	bl	20bd4 <_ZN2ei8speechpy10processingL21calculate_signal_usedEjmffbt.constprop.0>
    int bytes_left_end_of_frame = signal->total_length - offset_in_signal;
   25c84:	9b03      	ldr	r3, [sp, #12]
    range_signal->total_length = range_signal_orig_length;
   25c86:	6134      	str	r4, [r6, #16]
    int bytes_left_end_of_frame = signal->total_length - offset_in_signal;
   25c88:	691b      	ldr	r3, [r3, #16]
    bytes_left_end_of_frame += frame_overlap_values;
   25c8a:	9e05      	ldr	r6, [sp, #20]
    int bytes_left_end_of_frame = signal->total_length - offset_in_signal;
   25c8c:	eba3 030b 	sub.w	r3, r3, fp
   25c90:	1a1b      	subs	r3, r3, r0
    bytes_left_end_of_frame += frame_overlap_values;
   25c92:	441e      	add	r6, r3
    if (bytes_left_end_of_frame > 0) {
   25c94:	2e00      	cmp	r6, #0
   25c96:	dd12      	ble.n	25cbe <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x56e>
        x = preemphasized_audio_signal.get_data(
   25c98:	f8d8 3000 	ldr.w	r3, [r8]
   25c9c:	e9cd 630e 	strd	r6, r3, [sp, #56]	; 0x38
   25ca0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   25ca2:	1b9b      	subs	r3, r3, r6
   25ca4:	930d      	str	r3, [sp, #52]	; 0x34
      if (_M_empty())
   25ca6:	9b19      	ldr	r3, [sp, #100]	; 0x64
   25ca8:	2b00      	cmp	r3, #0
   25caa:	d060      	beq.n	25d6e <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x61e>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   25cac:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   25cae:	ab0f      	add	r3, sp, #60	; 0x3c
   25cb0:	aa0e      	add	r2, sp, #56	; 0x38
   25cb2:	a90d      	add	r1, sp, #52	; 0x34
   25cb4:	4650      	mov	r0, sl
   25cb6:	47a0      	blx	r4
        if (x != EIDSP_OK) {
   25cb8:	4604      	mov	r4, r0
   25cba:	2800      	cmp	r0, #0
   25cbc:	d144      	bne.n	25d48 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x5f8>
    if (config.implementation_version == 1) {
   25cbe:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
    ei_dsp_cont_current_frame_ix = bytes_left_end_of_frame;
   25cc2:	603e      	str	r6, [r7, #0]
    if (config.implementation_version == 1) {
   25cc4:	2b01      	cmp	r3, #1
   25cc6:	f47f aeed 	bne.w	25aa4 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x354>
        if (first_run == true) {
   25cca:	4b13      	ldr	r3, [pc, #76]	; (25d18 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x5c8>)
   25ccc:	781b      	ldrb	r3, [r3, #0]
   25cce:	2b00      	cmp	r3, #0
   25cd0:	f43f aee8 	beq.w	25aa4 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x354>
            signal->total_length -= (size_t)(config.frame_length * (float)frequency);
   25cd4:	eddd 7a26 	vldr	s15, [sp, #152]	; 0x98
   25cd8:	9a03      	ldr	r2, [sp, #12]
   25cda:	ee68 8aa7 	vmul.f32	s17, s17, s15
   25cde:	6913      	ldr	r3, [r2, #16]
   25ce0:	eefc 8ae8 	vcvt.u32.f32	s17, s17
   25ce4:	ee18 1a90 	vmov	r1, s17
   25ce8:	1a5b      	subs	r3, r3, r1
   25cea:	6113      	str	r3, [r2, #16]
   25cec:	e6da      	b.n	25aa4 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x354>
            if (preemphasis) {
   25cee:	9b07      	ldr	r3, [sp, #28]
   25cf0:	681c      	ldr	r4, [r3, #0]
   25cf2:	b33c      	cbz	r4, 25d44 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x5f4>
            if (_prev_buffer) {
   25cf4:	68e0      	ldr	r0, [r4, #12]
   25cf6:	b108      	cbz	r0, 25cfc <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x5ac>
                ei_dsp_free(_prev_buffer, _shift * sizeof(float));
   25cf8:	f000 fa04 	bl	26104 <_Z7ei_freePv>
            if (_end_of_signal_buffer) {
   25cfc:	6920      	ldr	r0, [r4, #16]
   25cfe:	b108      	cbz	r0, 25d04 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x5b4>
                ei_dsp_free(_end_of_signal_buffer, _shift * sizeof(float));
   25d00:	f000 fa00 	bl	26104 <_Z7ei_freePv>
                delete preemphasis;
   25d04:	211c      	movs	r1, #28
   25d06:	4620      	mov	r0, r4
   25d08:	f009 fe02 	bl	2f910 <_ZdlPvj>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
   25d0c:	4d0a      	ldr	r5, [pc, #40]	; (25d38 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x5e8>)
   25d0e:	e5f0      	b.n	258f2 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x1a2>
   25d10:	000208fd 	.word	0x000208fd
   25d14:	000218a1 	.word	0x000218a1
   25d18:	10018888 	.word	0x10018888
   25d1c:	1001884c 	.word	0x1001884c
   25d20:	00040014 	.word	0x00040014
   25d24:	fffffc10 	.word	0xfffffc10
   25d28:	0003ffb4 	.word	0x0003ffb4
   25d2c:	0003ffc8 	.word	0x0003ffc8
   25d30:	0003fff0 	.word	0x0003fff0
   25d34:	0004007c 	.word	0x0004007c
   25d38:	fffffc16 	.word	0xfffffc16
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
   25d3c:	4d0d      	ldr	r5, [pc, #52]	; (25d74 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x624>)
   25d3e:	e5de      	b.n	258fe <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x1ae>
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
   25d40:	4d0d      	ldr	r5, [pc, #52]	; (25d78 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x628>)
   25d42:	e5dc      	b.n	258fe <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x1ae>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
   25d44:	4d0d      	ldr	r5, [pc, #52]	; (25d7c <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x62c>)
   25d46:	e5d4      	b.n	258f2 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x1a2>
            if (preemphasis) {
   25d48:	9b07      	ldr	r3, [sp, #28]
   25d4a:	681d      	ldr	r5, [r3, #0]
   25d4c:	b16d      	cbz	r5, 25d6a <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x61a>
            if (_prev_buffer) {
   25d4e:	68e8      	ldr	r0, [r5, #12]
   25d50:	b108      	cbz	r0, 25d56 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x606>
                ei_dsp_free(_prev_buffer, _shift * sizeof(float));
   25d52:	f000 f9d7 	bl	26104 <_Z7ei_freePv>
            if (_end_of_signal_buffer) {
   25d56:	6928      	ldr	r0, [r5, #16]
   25d58:	b108      	cbz	r0, 25d5e <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x60e>
                ei_dsp_free(_end_of_signal_buffer, _shift * sizeof(float));
   25d5a:	f000 f9d3 	bl	26104 <_Z7ei_freePv>
                delete preemphasis;
   25d5e:	4628      	mov	r0, r5
   25d60:	211c      	movs	r1, #28
   25d62:	f009 fdd5 	bl	2f910 <_ZdlPvj>
   25d66:	4625      	mov	r5, r4
   25d68:	e6ab      	b.n	25ac2 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x372>
   25d6a:	4605      	mov	r5, r0
   25d6c:	e6a9      	b.n	25ac2 <_ZN12_GLOBAL__N_130extract_mfe_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvfPNS0_13matrix_size_tE+0x372>
	__throw_bad_function_call();
   25d6e:	f7fb fbd9 	bl	21524 <_ZSt25__throw_bad_function_callv>
   25d72:	bf00      	nop
   25d74:	fffffc14 	.word	0xfffffc14
   25d78:	fffffc10 	.word	0xfffffc10
   25d7c:	fffffc16 	.word	0xfffffc16

00025d80 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:
__attribute__((unused)) int extract_mfe_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float sampling_frequency) {
   25d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25d84:	ed2d 8b04 	vpush	{d8-d9}
   25d88:	b09b      	sub	sp, #108	; 0x6c
    ei_dsp_config_mfe_t config = *((ei_dsp_config_mfe_t*)config_ptr);
   25d8a:	6913      	ldr	r3, [r2, #16]
   25d8c:	9307      	str	r3, [sp, #28]
   25d8e:	6953      	ldr	r3, [r2, #20]
   25d90:	9308      	str	r3, [sp, #32]
   25d92:	6993      	ldr	r3, [r2, #24]
    if (config.axes != 1) {
   25d94:	6856      	ldr	r6, [r2, #4]
    ei_dsp_config_mfe_t config = *((ei_dsp_config_mfe_t*)config_ptr);
   25d96:	9309      	str	r3, [sp, #36]	; 0x24
   25d98:	69d3      	ldr	r3, [r2, #28]
   25d9a:	930a      	str	r3, [sp, #40]	; 0x28
   25d9c:	6a13      	ldr	r3, [r2, #32]
   25d9e:	930b      	str	r3, [sp, #44]	; 0x2c
    if (config.axes != 1) {
   25da0:	2e01      	cmp	r6, #1
    ei_dsp_config_mfe_t config = *((ei_dsp_config_mfe_t*)config_ptr);
   25da2:	6a53      	ldr	r3, [r2, #36]	; 0x24
   25da4:	f8b2 a000 	ldrh.w	sl, [r2]
   25da8:	ed92 8a02 	vldr	s16, [r2, #8]
   25dac:	edd2 8a03 	vldr	s17, [r2, #12]
   25db0:	930c      	str	r3, [sp, #48]	; 0x30
    if (config.axes != 1) {
   25db2:	f040 814e 	bne.w	26052 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2d2>
    if (signal->total_length == 0) {
   25db6:	6903      	ldr	r3, [r0, #16]
   25db8:	4604      	mov	r4, r0
   25dba:	2b00      	cmp	r3, #0
   25dbc:	f000 814b 	beq.w	26056 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2d6>
    const uint32_t frequency = static_cast<uint32_t>(sampling_frequency);
   25dc0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    _Function_base() : _M_manager(nullptr) { }
   25dc4:	f04f 0900 	mov.w	r9, #0
    if (config.implementation_version < 3) {
   25dc8:	f1ba 0f02 	cmp.w	sl, #2
   25dcc:	460d      	mov	r5, r1
   25dce:	f8cd 905c 	str.w	r9, [sp, #92]	; 0x5c
    const uint32_t frequency = static_cast<uint32_t>(sampling_frequency);
   25dd2:	eeb0 9a67 	vmov.f32	s18, s15
    if (config.implementation_version < 3) {
   25dd6:	f240 80c0 	bls.w	25f5a <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1da>
        class speechpy::processing::preemphasis *pre = new class speechpy::processing::preemphasis(signal, 1, 0.98f, true);
   25dda:	201c      	movs	r0, #28
   25ddc:	f009 fd94 	bl	2f908 <_Znwj>
            : _signal(signal), _shift(shift), _cof(cof), _rescale(rescale)
   25de0:	4b9f      	ldr	r3, [pc, #636]	; (26060 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2e0>)
   25de2:	6083      	str	r3, [r0, #8]
   25de4:	4680      	mov	r8, r0
   25de6:	e9c0 4600 	strd	r4, r6, [r0]
   25dea:	7606      	strb	r6, [r0, #24]
            _prev_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
   25dec:	4631      	mov	r1, r6
   25dee:	2004      	movs	r0, #4
   25df0:	f000 f978 	bl	260e4 <_Z9ei_callocjj>
            _end_of_signal_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
   25df4:	4631      	mov	r1, r6
            _prev_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
   25df6:	f8c8 000c 	str.w	r0, [r8, #12]
            _end_of_signal_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
   25dfa:	2004      	movs	r0, #4
   25dfc:	f000 f972 	bl	260e4 <_Z9ei_callocjj>
            if (!_prev_buffer || !_end_of_signal_buffer) return;
   25e00:	f8d8 300c 	ldr.w	r3, [r8, #12]
            _end_of_signal_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
   25e04:	e9c8 0904 	strd	r0, r9, [r8, #16]
            if (!_prev_buffer || !_end_of_signal_buffer) return;
   25e08:	2b00      	cmp	r3, #0
   25e0a:	f000 80fd 	beq.w	26008 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x288>
   25e0e:	2800      	cmp	r0, #0
   25e10:	f000 80fa 	beq.w	26008 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x288>
            signal->get_data(signal->total_length - shift, shift, _end_of_signal_buffer);
   25e14:	6923      	ldr	r3, [r4, #16]
   25e16:	3b01      	subs	r3, #1
   25e18:	9311      	str	r3, [sp, #68]	; 0x44
      if (_M_empty())
   25e1a:	68a3      	ldr	r3, [r4, #8]
   25e1c:	e9cd 060e 	strd	r0, r6, [sp, #56]	; 0x38
   25e20:	2b00      	cmp	r3, #0
   25e22:	f000 811a 	beq.w	2605a <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2da>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   25e26:	ae11      	add	r6, sp, #68	; 0x44
   25e28:	aa0f      	add	r2, sp, #60	; 0x3c
   25e2a:	68e7      	ldr	r7, [r4, #12]
   25e2c:	920d      	str	r2, [sp, #52]	; 0x34
   25e2e:	ab0e      	add	r3, sp, #56	; 0x38
   25e30:	4631      	mov	r1, r6
   25e32:	4620      	mov	r0, r4
   25e34:	47b8      	blx	r7
   25e36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   25e38:	4b8a      	ldr	r3, [pc, #552]	; (26064 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2e4>)
   25e3a:	9311      	str	r3, [sp, #68]	; 0x44
   25e3c:	498a      	ldr	r1, [pc, #552]	; (26068 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2e8>)
      __a = _GLIBCXX_MOVE(__b);
   25e3e:	9b18      	ldr	r3, [sp, #96]	; 0x60
      __b = _GLIBCXX_MOVE(__tmp);
   25e40:	9118      	str	r1, [sp, #96]	; 0x60
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   25e42:	e896 0003 	ldmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   25e46:	f10d 0954 	add.w	r9, sp, #84	; 0x54
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   25e4a:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   25e4e:	e899 0003 	ldmia.w	r9, {r0, r1}
   25e52:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   25e56:	e892 0003 	ldmia.w	r2, {r0, r1}
   25e5a:	e889 0003 	stmia.w	r9, {r0, r1}
        preemphasis = pre;
   25e5e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 2608c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x30c>
      __a = _GLIBCXX_MOVE(__b);
   25e62:	9314      	str	r3, [sp, #80]	; 0x50
   25e64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
        preemphasized_audio_signal.total_length = signal->total_length;
   25e66:	6924      	ldr	r4, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   25e68:	f8df c224 	ldr.w	ip, [pc, #548]	; 26090 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x310>
   25e6c:	9419      	str	r4, [sp, #100]	; 0x64
        preemphasis = pre;
   25e6e:	f8cb 8000 	str.w	r8, [fp]
   25e72:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
      __a = _GLIBCXX_MOVE(__b);
   25e76:	9313      	str	r3, [sp, #76]	; 0x4c
      if (_M_manager)
   25e78:	b123      	cbz	r3, 25e84 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x104>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   25e7a:	2203      	movs	r2, #3
   25e7c:	4631      	mov	r1, r6
   25e7e:	4630      	mov	r0, r6
   25e80:	4798      	blx	r3
            config.implementation_version);
   25e82:	9c19      	ldr	r4, [sp, #100]	; 0x64
   25e84:	ee19 1a10 	vmov	r1, s18
   25e88:	4620      	mov	r0, r4
   25e8a:	4652      	mov	r2, sl
   25e8c:	eef0 0a68 	vmov.f32	s1, s17
   25e90:	eeb0 0a48 	vmov.f32	s0, s16
   25e94:	f7fa fe32 	bl	20afc <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt.constprop.0>
    if (out_matrix_size.rows * out_matrix_size.cols > output_matrix->rows * output_matrix->cols) {
   25e98:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
   25e9c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   25ea0:	4604      	mov	r4, r0
   25ea2:	fb03 f800 	mul.w	r8, r3, r0
   25ea6:	fb02 f001 	mul.w	r0, r2, r1
   25eaa:	4580      	cmp	r8, r0
   25eac:	d87f      	bhi.n	25fae <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x22e>
    output_matrix->rows = out_matrix_size.rows;
   25eae:	e9c5 4301 	strd	r4, r3, [r5, #4]
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   25eb2:	2101      	movs	r1, #1
   25eb4:	00a0      	lsls	r0, r4, #2
   25eb6:	f000 f915 	bl	260e4 <_Z9ei_callocjj>
            buffer_managed_by_me = true;
   25eba:	2301      	movs	r3, #1
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   25ebc:	e9cd 0411 	strd	r0, r4, [sp, #68]	; 0x44
            buffer_managed_by_me = true;
   25ec0:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
        cols = n_cols;
   25ec4:	9313      	str	r3, [sp, #76]	; 0x4c
    EI_DSP_MATRIX(energy_matrix, output_matrix->rows, 1);
   25ec6:	2800      	cmp	r0, #0
   25ec8:	f000 809c 	beq.w	26004 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x284>
    int ret = speechpy::feature::mfe(output_matrix, &energy_matrix, &preemphasized_audio_signal,
   25ecc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   25ece:	9303      	str	r3, [sp, #12]
   25ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   25ed2:	9302      	str	r3, [sp, #8]
   25ed4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   25ed8:	9301      	str	r3, [sp, #4]
   25eda:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   25ede:	9300      	str	r3, [sp, #0]
   25ee0:	4631      	mov	r1, r6
   25ee2:	ee19 3a10 	vmov	r3, s18
   25ee6:	eef0 0a68 	vmov.f32	s1, s17
   25eea:	eeb0 0a48 	vmov.f32	s0, s16
   25eee:	f8cd a010 	str.w	sl, [sp, #16]
   25ef2:	464a      	mov	r2, r9
   25ef4:	4628      	mov	r0, r5
   25ef6:	f7fe fad5 	bl	244a4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt>
    if (preemphasis) {
   25efa:	f8db 6000 	ldr.w	r6, [fp]
    int ret = speechpy::feature::mfe(output_matrix, &energy_matrix, &preemphasized_audio_signal,
   25efe:	4604      	mov	r4, r0
    if (preemphasis) {
   25f00:	b15e      	cbz	r6, 25f1a <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x19a>
            if (_prev_buffer) {
   25f02:	68f0      	ldr	r0, [r6, #12]
   25f04:	b108      	cbz	r0, 25f0a <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x18a>
                ei_dsp_free(_prev_buffer, _shift * sizeof(float));
   25f06:	f000 f8fd 	bl	26104 <_Z7ei_freePv>
            if (_end_of_signal_buffer) {
   25f0a:	6930      	ldr	r0, [r6, #16]
   25f0c:	b108      	cbz	r0, 25f12 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x192>
                ei_dsp_free(_end_of_signal_buffer, _shift * sizeof(float));
   25f0e:	f000 f8f9 	bl	26104 <_Z7ei_freePv>
        delete preemphasis;
   25f12:	4630      	mov	r0, r6
   25f14:	211c      	movs	r1, #28
   25f16:	f009 fcfb 	bl	2f910 <_ZdlPvj>
    if (ret != EIDSP_OK) {
   25f1a:	2c00      	cmp	r4, #0
   25f1c:	f040 8094 	bne.w	26048 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2c8>
    if (config.implementation_version < 3) {
   25f20:	f1ba 0f02 	cmp.w	sl, #2
   25f24:	f200 8082 	bhi.w	2602c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2ac>
        ret = speechpy::processing::cmvnw(output_matrix, config.win_size, false, true);
   25f28:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
        if (win_size == 0) {
   25f2c:	2900      	cmp	r1, #0
   25f2e:	d15b      	bne.n	25fe8 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x268>
    output_matrix->rows = 1;
   25f30:	2301      	movs	r3, #1
   25f32:	e9c5 3801 	strd	r3, r8, [r5, #4]
        if (buffer && buffer_managed_by_me) {
   25f36:	9811      	ldr	r0, [sp, #68]	; 0x44
   25f38:	b118      	cbz	r0, 25f42 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c2>
   25f3a:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
   25f3e:	2b00      	cmp	r3, #0
   25f40:	d165      	bne.n	2600e <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x28e>
      if (_M_manager)
   25f42:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   25f44:	b11b      	cbz	r3, 25f4e <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1ce>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   25f46:	2203      	movs	r2, #3
   25f48:	4649      	mov	r1, r9
   25f4a:	4648      	mov	r0, r9
   25f4c:	4798      	blx	r3
}
   25f4e:	4620      	mov	r0, r4
   25f50:	b01b      	add	sp, #108	; 0x6c
   25f52:	ecbd 8b04 	vpop	{d8-d9}
   25f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        preemphasis = nullptr;
   25f5a:	f8df b130 	ldr.w	fp, [pc, #304]	; 2608c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x30c>
        preemphasized_audio_signal.total_length = signal->total_length;
   25f5e:	9319      	str	r3, [sp, #100]	; 0x64
    bool _M_empty() const { return !_M_manager; }
   25f60:	6883      	ldr	r3, [r0, #8]
    _Function_base() : _M_manager(nullptr) { }
   25f62:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
        preemphasis = nullptr;
   25f66:	f8cb 9000 	str.w	r9, [fp]
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   25f6a:	ae11      	add	r6, sp, #68	; 0x44
      if (static_cast<bool>(__x))
   25f6c:	2b00      	cmp	r3, #0
   25f6e:	d051      	beq.n	26014 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x294>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   25f70:	4601      	mov	r1, r0
   25f72:	2202      	movs	r2, #2
   25f74:	4630      	mov	r0, r6
   25f76:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   25f78:	68e1      	ldr	r1, [r4, #12]
	  _M_manager = __x._M_manager;
   25f7a:	68a4      	ldr	r4, [r4, #8]
   25f7c:	e9dd 3c17 	ldrd	r3, ip, [sp, #92]	; 0x5c
      __b = _GLIBCXX_MOVE(__tmp);
   25f80:	9118      	str	r1, [sp, #96]	; 0x60
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   25f82:	e896 0003 	ldmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   25f86:	f10d 0954 	add.w	r9, sp, #84	; 0x54
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   25f8a:	aa0f      	add	r2, sp, #60	; 0x3c
   25f8c:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   25f90:	e899 0003 	ldmia.w	r9, {r0, r1}
   25f94:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   25f98:	e892 0003 	ldmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   25f9c:	e9cd 3c13 	strd	r3, ip, [sp, #76]	; 0x4c
      __b = _GLIBCXX_MOVE(__tmp);
   25fa0:	e889 0003 	stmia.w	r9, {r0, r1}
   25fa4:	9417      	str	r4, [sp, #92]	; 0x5c
      if (_M_manager)
   25fa6:	2b00      	cmp	r3, #0
   25fa8:	f47f af67 	bne.w	25e7a <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xfa>
   25fac:	e769      	b.n	25e82 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x102>
        ei_printf("out_matrix = %dx%d\n", (int)output_matrix->rows, (int)output_matrix->cols);
   25fae:	482f      	ldr	r0, [pc, #188]	; (2606c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2ec>)
   25fb0:	9307      	str	r3, [sp, #28]
   25fb2:	f000 f879 	bl	260a8 <_Z9ei_printfPKcz>
        ei_printf("calculated size = %dx%d\n", (int)out_matrix_size.rows, (int)out_matrix_size.cols);
   25fb6:	9b07      	ldr	r3, [sp, #28]
   25fb8:	482d      	ldr	r0, [pc, #180]	; (26070 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2f0>)
   25fba:	4621      	mov	r1, r4
   25fbc:	461a      	mov	r2, r3
   25fbe:	f000 f873 	bl	260a8 <_Z9ei_printfPKcz>
        if (preemphasis) {
   25fc2:	f8db 4000 	ldr.w	r4, [fp]
   25fc6:	b16c      	cbz	r4, 25fe4 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x264>
            if (_prev_buffer) {
   25fc8:	68e0      	ldr	r0, [r4, #12]
   25fca:	b108      	cbz	r0, 25fd0 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x250>
                ei_dsp_free(_prev_buffer, _shift * sizeof(float));
   25fcc:	f000 f89a 	bl	26104 <_Z7ei_freePv>
            if (_end_of_signal_buffer) {
   25fd0:	6920      	ldr	r0, [r4, #16]
   25fd2:	b108      	cbz	r0, 25fd8 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x258>
                ei_dsp_free(_end_of_signal_buffer, _shift * sizeof(float));
   25fd4:	f000 f896 	bl	26104 <_Z7ei_freePv>
            delete preemphasis;
   25fd8:	4620      	mov	r0, r4
   25fda:	211c      	movs	r1, #28
   25fdc:	f009 fc98 	bl	2f910 <_ZdlPvj>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
   25fe0:	4c24      	ldr	r4, [pc, #144]	; (26074 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2f4>)
   25fe2:	e7ae      	b.n	25f42 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c2>
   25fe4:	4c23      	ldr	r4, [pc, #140]	; (26074 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2f4>)
   25fe6:	e7ac      	b.n	25f42 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c2>
   25fe8:	2301      	movs	r3, #1
   25fea:	4622      	mov	r2, r4
   25fec:	4628      	mov	r0, r5
   25fee:	f7fa fe77 	bl	20ce0 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0>
        if (ret != EIDSP_OK) {
   25ff2:	4606      	mov	r6, r0
   25ff4:	2800      	cmp	r0, #0
   25ff6:	d09b      	beq.n	25f30 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b0>
            ei_printf("ERR: cmvnw failed (%d)\n", ret);
   25ff8:	481f      	ldr	r0, [pc, #124]	; (26078 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2f8>)
   25ffa:	4631      	mov	r1, r6
   25ffc:	f000 f854 	bl	260a8 <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
   26000:	4634      	mov	r4, r6
   26002:	e798      	b.n	25f36 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b6>
    EI_DSP_MATRIX(energy_matrix, output_matrix->rows, 1);
   26004:	4c1d      	ldr	r4, [pc, #116]	; (2607c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2fc>)
    }
   26006:	e79c      	b.n	25f42 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c2>
   26008:	aa0f      	add	r2, sp, #60	; 0x3c
   2600a:	ae11      	add	r6, sp, #68	; 0x44
   2600c:	e714      	b.n	25e38 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xb8>
            ei_free(buffer);
   2600e:	f000 f879 	bl	26104 <_Z7ei_freePv>
   26012:	e796      	b.n	25f42 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c2>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   26014:	e896 0003 	ldmia.w	r6, {r0, r1}
   26018:	9a14      	ldr	r2, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   2601a:	9218      	str	r2, [sp, #96]	; 0x60
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   2601c:	ab0f      	add	r3, sp, #60	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   2601e:	f10d 0954 	add.w	r9, sp, #84	; 0x54
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   26022:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   26026:	e889 0003 	stmia.w	r9, {r0, r1}
   2602a:	e72a      	b.n	25e82 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x102>
        ret = speechpy::processing::mfe_normalization(output_matrix, config.noise_floor_db);
   2602c:	990c      	ldr	r1, [sp, #48]	; 0x30
   2602e:	4628      	mov	r0, r5
   26030:	f7fa fb52 	bl	206d8 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi>
        if (ret != EIDSP_OK) {
   26034:	4606      	mov	r6, r0
   26036:	2800      	cmp	r0, #0
   26038:	f43f af7a 	beq.w	25f30 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b0>
            ei_printf("ERR: normalization failed (%d)\n", ret);
   2603c:	4810      	ldr	r0, [pc, #64]	; (26080 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x300>)
   2603e:	4631      	mov	r1, r6
   26040:	f000 f832 	bl	260a8 <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
   26044:	4634      	mov	r4, r6
   26046:	e776      	b.n	25f36 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b6>
        ei_printf("ERR: MFE failed (%d)\n", ret);
   26048:	480e      	ldr	r0, [pc, #56]	; (26084 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x304>)
   2604a:	4621      	mov	r1, r4
   2604c:	f000 f82c 	bl	260a8 <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
   26050:	e771      	b.n	25f36 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b6>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
   26052:	4c08      	ldr	r4, [pc, #32]	; (26074 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2f4>)
   26054:	e77b      	b.n	25f4e <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1ce>
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
   26056:	4c0c      	ldr	r4, [pc, #48]	; (26088 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x308>)
   26058:	e779      	b.n	25f4e <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1ce>
	__throw_bad_function_call();
   2605a:	f7fb fa63 	bl	21524 <_ZSt25__throw_bad_function_callv>
   2605e:	bf00      	nop
   26060:	3f7ae148 	.word	0x3f7ae148
   26064:	00021529 	.word	0x00021529
   26068:	0002067d 	.word	0x0002067d
   2606c:	0003ff64 	.word	0x0003ff64
   26070:	0003ff78 	.word	0x0003ff78
   26074:	fffffc14 	.word	0xfffffc14
   26078:	0003fc20 	.word	0x0003fc20
   2607c:	fffffc16 	.word	0xfffffc16
   26080:	0003fc38 	.word	0x0003fc38
   26084:	00040124 	.word	0x00040124
   26088:	fffffc10 	.word	0xfffffc10
   2608c:	1001884c 	.word	0x1001884c
   26090:	00020921 	.word	0x00020921

00026094 <_Z29ei_run_impulse_check_canceledv>:

extern ns_timer_config_t ei_tickTimer;

EI_WEAK_FN EI_IMPULSE_ERROR ei_run_impulse_check_canceled() {
    return EI_IMPULSE_OK;
}
   26094:	2000      	movs	r0, #0
   26096:	4770      	bx	lr

00026098 <_Z16ei_read_timer_usv>:

uint64_t ei_read_timer_ms() {
    return ns_us_ticker_read(&ei_tickTimer) / 1000L;
}

uint64_t ei_read_timer_us() {
   26098:	b508      	push	{r3, lr}
    return ns_us_ticker_read(&ei_tickTimer);
   2609a:	4802      	ldr	r0, [pc, #8]	; (260a4 <_Z16ei_read_timer_usv+0xc>)
   2609c:	f008 fc88 	bl	2e9b0 <ns_us_ticker_read>

}
   260a0:	2100      	movs	r1, #0
   260a2:	bd08      	pop	{r3, pc}
   260a4:	100040b4 	.word	0x100040b4

000260a8 <_Z9ei_printfPKcz>:

__attribute__((weak)) void ei_printf(const char *format, ...) {
   260a8:	b40f      	push	{r0, r1, r2, r3}
   260aa:	b500      	push	{lr}
   260ac:	b083      	sub	sp, #12
   260ae:	a904      	add	r1, sp, #16
   260b0:	f851 0b04 	ldr.w	r0, [r1], #4
    va_list myargs;
    va_start(myargs, format);
   260b4:	9101      	str	r1, [sp, #4]
    ns_lp_printf(format, myargs);
   260b6:	f007 fc47 	bl	2d948 <ns_lp_printf>
    // am_util_stdio_vprintf(format, myargs);
    va_end(myargs);
}
   260ba:	b003      	add	sp, #12
   260bc:	f85d eb04 	ldr.w	lr, [sp], #4
   260c0:	b004      	add	sp, #16
   260c2:	4770      	bx	lr

000260c4 <_Z15ei_printf_floatf>:

__attribute__((weak)) void ei_printf_float(float f) {
   260c4:	b508      	push	{r3, lr}
   260c6:	ee10 0a10 	vmov	r0, s0
    ei_printf("%f", f);
   260ca:	f7f2 fccb 	bl	18a64 <__aeabi_f2d>
   260ce:	4602      	mov	r2, r0
   260d0:	460b      	mov	r3, r1
   260d2:	4802      	ldr	r0, [pc, #8]	; (260dc <_Z15ei_printf_floatf+0x18>)
   260d4:	f7ff ffe8 	bl	260a8 <_Z9ei_printfPKcz>
}
   260d8:	bd08      	pop	{r3, pc}
   260da:	bf00      	nop
   260dc:	000405d4 	.word	0x000405d4

000260e0 <_Z9ei_mallocj>:

__attribute__((weak)) void *ei_malloc(size_t size) {
    void *p = ns_malloc(size);
   260e0:	f008 bb9e 	b.w	2e820 <ns_malloc>

000260e4 <_Z9ei_callocjj>:
    // if (p == NULL)
    //     while(1);
    return p;
}

__attribute__((weak)) void *ei_calloc(size_t nitems, size_t size) {
   260e4:	b510      	push	{r4, lr}
    void *ret = ns_malloc(nitems*size);
   260e6:	fb01 f200 	mul.w	r2, r1, r0
__attribute__((weak)) void *ei_calloc(size_t nitems, size_t size) {
   260ea:	b082      	sub	sp, #8
    void *ret = ns_malloc(nitems*size);
   260ec:	4610      	mov	r0, r2
   260ee:	9201      	str	r2, [sp, #4]
   260f0:	f008 fb96 	bl	2e820 <ns_malloc>
    memset(ret, 0, nitems*size);
   260f4:	9a01      	ldr	r2, [sp, #4]
   260f6:	2100      	movs	r1, #0
    void *ret = ns_malloc(nitems*size);
   260f8:	4604      	mov	r4, r0
    memset(ret, 0, nitems*size);
   260fa:	f004 fed3 	bl	2aea4 <memset>
    // ns_lp_printf("calloc 0x%x @ 0x%x\n",nitems*size,ret);
    // if (ret == NULL)
    //     while(1);
    return ret;
}
   260fe:	4620      	mov	r0, r4
   26100:	b002      	add	sp, #8
   26102:	bd10      	pop	{r4, pc}

00026104 <_Z7ei_freePv>:

__attribute__((weak)) void ei_free(void *ptr) {
    // ns_lp_printf("free @ 0x%x\n", ptr);
    ns_free(ptr);
   26104:	f008 bb90 	b.w	2e828 <ns_free>

00026108 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti>:

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
   26108:	4b04      	ldr	r3, [pc, #16]	; (2611c <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x14>)
   2610a:	681b      	ldr	r3, [r3, #0]
   2610c:	428b      	cmp	r3, r1
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
   2610e:	bfa3      	ittte	ge
   26110:	4b03      	ldrge	r3, [pc, #12]	; (26120 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x18>)
   26112:	eb03 01c1 	addge.w	r1, r3, r1, lsl #3
   26116:	6848      	ldrge	r0, [r1, #4]
    return NULL;
   26118:	2000      	movlt	r0, #0
}
   2611a:	4770      	bx	lr
   2611c:	10019748 	.word	0x10019748
   26120:	100196f8 	.word	0x100196f8

00026124 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti>:

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
   26124:	4801      	ldr	r0, [pc, #4]	; (2612c <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti+0x8>)
}
   26126:	eb00 1041 	add.w	r0, r0, r1, lsl #5
   2612a:	4770      	bx	lr
   2612c:	100188c4 	.word	0x100188c4

00026130 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti>:

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
   26130:	4802      	ldr	r0, [pc, #8]	; (2613c <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0xc>)
   26132:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
   26136:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2613a:	4770      	bx	lr
   2613c:	10019480 	.word	0x10019480

00026140 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>:
  if (current_location - bytes < tensor_boundary) {
   26140:	4b16      	ldr	r3, [pc, #88]	; (2619c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x5c>)
   26142:	4a17      	ldr	r2, [pc, #92]	; (261a0 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x60>)
                                       size_t bytes) {
   26144:	b570      	push	{r4, r5, r6, lr}
  if (current_location - bytes < tensor_boundary) {
   26146:	681c      	ldr	r4, [r3, #0]
   26148:	6812      	ldr	r2, [r2, #0]
   2614a:	1a64      	subs	r4, r4, r1
   2614c:	4294      	cmp	r4, r2
                                       size_t bytes) {
   2614e:	460d      	mov	r5, r1
  if (current_location - bytes < tensor_boundary) {
   26150:	d211      	bcs.n	26176 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x36>
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
   26152:	4e14      	ldr	r6, [pc, #80]	; (261a4 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x64>)
   26154:	6833      	ldr	r3, [r6, #0]
   26156:	2b09      	cmp	r3, #9
   26158:	d815      	bhi.n	26186 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x46>
    ptr = ei_calloc(bytes, 1);
   2615a:	2101      	movs	r1, #1
   2615c:	4628      	mov	r0, r5
   2615e:	f7ff ffc1 	bl	260e4 <_Z9ei_callocjj>
    if (ptr == NULL) {
   26162:	4604      	mov	r4, r0
   26164:	b1a8      	cbz	r0, 26192 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x52>
    overflow_buffers[overflow_buffers_ix++] = ptr;
   26166:	6833      	ldr	r3, [r6, #0]
   26168:	490f      	ldr	r1, [pc, #60]	; (261a8 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x68>)
   2616a:	1c5a      	adds	r2, r3, #1
   2616c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   26170:	6032      	str	r2, [r6, #0]
}
   26172:	4620      	mov	r0, r4
   26174:	bd70      	pop	{r4, r5, r6, pc}
  memset(ptr, 0, bytes);
   26176:	460a      	mov	r2, r1
   26178:	4620      	mov	r0, r4
   2617a:	2100      	movs	r1, #0
  current_location -= bytes;
   2617c:	601c      	str	r4, [r3, #0]
  memset(ptr, 0, bytes);
   2617e:	f004 fe91 	bl	2aea4 <memset>
}
   26182:	4620      	mov	r0, r4
   26184:	bd70      	pop	{r4, r5, r6, pc}
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
   26186:	4809      	ldr	r0, [pc, #36]	; (261ac <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x6c>)
      return NULL;
   26188:	2400      	movs	r4, #0
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
   2618a:	f7ff ff8d 	bl	260a8 <_Z9ei_printfPKcz>
}
   2618e:	4620      	mov	r0, r4
   26190:	bd70      	pop	{r4, r5, r6, pc}
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
   26192:	4807      	ldr	r0, [pc, #28]	; (261b0 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x70>)
   26194:	4629      	mov	r1, r5
   26196:	f7ff ff87 	bl	260a8 <_Z9ei_printfPKcz>
      return NULL;
   2619a:	e7ea      	b.n	26172 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x32>
   2619c:	1001971c 	.word	0x1001971c
   261a0:	10019718 	.word	0x10019718
   261a4:	1001974c 	.word	0x1001974c
   261a8:	10019720 	.word	0x10019720
   261ac:	000405d8 	.word	0x000405d8
   261b0:	00040658 	.word	0x00040658

000261b4 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
                                                int* buffer_idx) {
   261b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
   261b6:	4f22      	ldr	r7, [pc, #136]	; (26240 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x8c>)
   261b8:	683d      	ldr	r5, [r7, #0]
   261ba:	2d03      	cmp	r5, #3
   261bc:	d82c      	bhi.n	26218 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x64>
  if (current_location - bytes < tensor_boundary) {
   261be:	4b21      	ldr	r3, [pc, #132]	; (26244 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x90>)
   261c0:	4616      	mov	r6, r2
   261c2:	4a21      	ldr	r2, [pc, #132]	; (26248 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x94>)
   261c4:	6818      	ldr	r0, [r3, #0]
   261c6:	6813      	ldr	r3, [r2, #0]
   261c8:	1a5b      	subs	r3, r3, r1
   261ca:	4283      	cmp	r3, r0
   261cc:	460c      	mov	r4, r1
   261ce:	d21b      	bcs.n	26208 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x54>
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
   261d0:	4d1e      	ldr	r5, [pc, #120]	; (2624c <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x98>)
   261d2:	682b      	ldr	r3, [r5, #0]
   261d4:	2b09      	cmp	r3, #9
   261d6:	d824      	bhi.n	26222 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x6e>
    ptr = ei_calloc(bytes, 1);
   261d8:	2101      	movs	r1, #1
   261da:	4620      	mov	r0, r4
   261dc:	f7ff ff82 	bl	260e4 <_Z9ei_callocjj>
    if (ptr == NULL) {
   261e0:	4603      	mov	r3, r0
   261e2:	b338      	cbz	r0, 26234 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x80>
    overflow_buffers[overflow_buffers_ix++] = ptr;
   261e4:	682a      	ldr	r2, [r5, #0]
   261e6:	491a      	ldr	r1, [pc, #104]	; (26250 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x9c>)
   261e8:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   261ec:	3201      	adds	r2, #1
   261ee:	602a      	str	r2, [r5, #0]
  scratch_buffers[scratch_buffers_ix] = b;
   261f0:	683d      	ldr	r5, [r7, #0]
  *buffer_idx = scratch_buffers_ix;
   261f2:	6035      	str	r5, [r6, #0]
  scratch_buffers_ix++;
   261f4:	1c6a      	adds	r2, r5, #1
   261f6:	603a      	str	r2, [r7, #0]
  scratch_buffers[scratch_buffers_ix] = b;
   261f8:	4a16      	ldr	r2, [pc, #88]	; (26254 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0xa0>)
   261fa:	f842 4035 	str.w	r4, [r2, r5, lsl #3]
   261fe:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
  return kTfLiteOk;
   26202:	2000      	movs	r0, #0
  scratch_buffers[scratch_buffers_ix] = b;
   26204:	6053      	str	r3, [r2, #4]
}
   26206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  current_location -= bytes;
   26208:	6013      	str	r3, [r2, #0]
  memset(ptr, 0, bytes);
   2620a:	4618      	mov	r0, r3
   2620c:	460a      	mov	r2, r1
   2620e:	2100      	movs	r1, #0
   26210:	f004 fe48 	bl	2aea4 <memset>
   26214:	4603      	mov	r3, r0
  return ptr;
   26216:	e7ec      	b.n	261f2 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x3e>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
   26218:	480f      	ldr	r0, [pc, #60]	; (26258 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0xa4>)
   2621a:	f7ff ff45 	bl	260a8 <_Z9ei_printfPKcz>
    return kTfLiteError;
   2621e:	2001      	movs	r0, #1
}
   26220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
   26222:	480e      	ldr	r0, [pc, #56]	; (2625c <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0xa8>)
   26224:	f7ff ff40 	bl	260a8 <_Z9ei_printfPKcz>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
   26228:	480d      	ldr	r0, [pc, #52]	; (26260 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0xac>)
   2622a:	4621      	mov	r1, r4
   2622c:	f7ff ff3c 	bl	260a8 <_Z9ei_printfPKcz>
    return kTfLiteError;
   26230:	2001      	movs	r0, #1
}
   26232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
   26234:	480b      	ldr	r0, [pc, #44]	; (26264 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0xb0>)
   26236:	4621      	mov	r1, r4
   26238:	f7ff ff36 	bl	260a8 <_Z9ei_printfPKcz>
  if (!b.ptr) {
   2623c:	e7f4      	b.n	26228 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x74>
   2623e:	bf00      	nop
   26240:	10019748 	.word	0x10019748
   26244:	10019718 	.word	0x10019718
   26248:	1001971c 	.word	0x1001971c
   2624c:	1001974c 	.word	0x1001974c
   26250:	10019720 	.word	0x10019720
   26254:	100196f8 	.word	0x100196f8
   26258:	00040690 	.word	0x00040690
   2625c:	000405d8 	.word	0x000405d8
   26260:	000406e8 	.word	0x000406e8
   26264:	00040658 	.word	0x00040658

00026268 <_Z18trained_model_initPFPvjjE>:

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
   26268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
   2626c:	4f72      	ldr	r7, [pc, #456]	; (26438 <_Z18trained_model_initPFPvjjE+0x1d0>)
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
   2626e:	4c73      	ldr	r4, [pc, #460]	; (2643c <_Z18trained_model_initPFPvjjE+0x1d4>)
  tensor_boundary = tensor_arena;
   26270:	f8df a1fc 	ldr.w	sl, [pc, #508]	; 26470 <_Z18trained_model_initPFPvjjE+0x208>
   26274:	4d72      	ldr	r5, [pc, #456]	; (26440 <_Z18trained_model_initPFPvjjE+0x1d8>)
  memset(tensor_arena, 0, kTensorArenaSize);
   26276:	f44f 6203 	mov.w	r2, #2096	; 0x830
   2627a:	2100      	movs	r1, #0
TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
   2627c:	b08b      	sub	sp, #44	; 0x2c
  memset(tensor_arena, 0, kTensorArenaSize);
   2627e:	4638      	mov	r0, r7
   26280:	f004 fe10 	bl	2aea4 <memset>
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
   26284:	496f      	ldr	r1, [pc, #444]	; (26444 <_Z18trained_model_initPFPvjjE+0x1dc>)
  current_location = tensor_arena + kTensorArenaSize;
   26286:	4870      	ldr	r0, [pc, #448]	; (26448 <_Z18trained_model_initPFPvjjE+0x1e0>)
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
   26288:	638c      	str	r4, [r1, #56]	; 0x38
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
   2628a:	4c70      	ldr	r4, [pc, #448]	; (2644c <_Z18trained_model_initPFPvjjE+0x1e4>)
   2628c:	640c      	str	r4, [r1, #64]	; 0x40
  ctx.GetScratchBuffer = &GetScratchBuffer;
   2628e:	4c70      	ldr	r4, [pc, #448]	; (26450 <_Z18trained_model_initPFPvjjE+0x1e8>)
   26290:	4a70      	ldr	r2, [pc, #448]	; (26454 <_Z18trained_model_initPFPvjjE+0x1ec>)
   26292:	644c      	str	r4, [r1, #68]	; 0x44
  current_location = tensor_arena + kTensorArenaSize;
   26294:	f507 6803 	add.w	r8, r7, #2096	; 0x830
  ctx.GetTensor = &GetTensor;
   26298:	4c6f      	ldr	r4, [pc, #444]	; (26458 <_Z18trained_model_initPFPvjjE+0x1f0>)
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
   2629a:	4b70      	ldr	r3, [pc, #448]	; (2645c <_Z18trained_model_initPFPvjjE+0x1f4>)
  ctx.GetTensor = &GetTensor;
   2629c:	650c      	str	r4, [r1, #80]	; 0x50
  current_location = tensor_arena + kTensorArenaSize;
   2629e:	f8c0 8000 	str.w	r8, [r0]
  ctx.GetEvalTensor = &GetEvalTensor;
   262a2:	4c6f      	ldr	r4, [pc, #444]	; (26460 <_Z18trained_model_initPFPvjjE+0x1f8>)
  tensor_boundary = tensor_arena;
   262a4:	f8ca 7000 	str.w	r7, [sl]
  ctx.tensors_size = 23;
   262a8:	2017      	movs	r0, #23
  ctx.tensors = tflTensors;
   262aa:	608b      	str	r3, [r1, #8]
  ctx.GetEvalTensor = &GetEvalTensor;
   262ac:	654c      	str	r4, [r1, #84]	; 0x54
  ctx.tensors_size = 23;
   262ae:	6008      	str	r0, [r1, #0]
  for (size_t i = 0; i < 23; ++i) {
   262b0:	f502 7e0a 	add.w	lr, r2, #552	; 0x228
  ctx.tensors_size = 23;
   262b4:	46b9      	mov	r9, r7
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;
   262b6:	f04f 0c00 	mov.w	ip, #0
   262ba:	e02c      	b.n	26316 <_Z18trained_model_initPFPvjjE+0xae>

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
   262bc:	4544      	cmp	r4, r8
   262be:	bf34      	ite	cc
   262c0:	2602      	movcc	r6, #2
   262c2:	2601      	movcs	r6, #1
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
   262c4:	f102 0110 	add.w	r1, r2, #16
   262c8:	c903      	ldmia	r1, {r0, r1}
   262ca:	e883 0003 	stmia.w	r3, {r0, r1}
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
   262ce:	7818      	ldrb	r0, [r3, #0]
    tflTensors[i].dims = tensorData[i].dims;
   262d0:	6891      	ldr	r1, [r2, #8]
    tflTensors[i].bytes = tensorData[i].bytes;
   262d2:	f8d2 b00c 	ldr.w	fp, [r2, #12]
    tflEvalTensors[i].data.data = tensorData[i].data;
   262d6:	602c      	str	r4, [r5, #0]
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
   262d8:	2801      	cmp	r0, #1
    tflEvalTensors[i].dims = tensorData[i].dims;
   262da:	6069      	str	r1, [r5, #4]
    tflTensors[i].bytes = tensorData[i].bytes;
   262dc:	f8c3 b018 	str.w	fp, [r3, #24]
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
   262e0:	775e      	strb	r6, [r3, #29]
    tflTensors[i].data.data = tensorData[i].data;
   262e2:	611c      	str	r4, [r3, #16]
    tflTensors[i].dims = tensorData[i].dims;
   262e4:	6159      	str	r1, [r3, #20]
  for (size_t i = 0; i < 23; ++i) {
   262e6:	f105 050c 	add.w	r5, r5, #12
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
   262ea:	d106      	bne.n	262fa <_Z18trained_model_initPFPvjjE+0x92>
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
   262ec:	6951      	ldr	r1, [r2, #20]
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
   262ee:	e9d1 0100 	ldrd	r0, r1, [r1]
      tflTensors[i].params.scale = quant->scale->data[0];
   262f2:	6840      	ldr	r0, [r0, #4]
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
   262f4:	6849      	ldr	r1, [r1, #4]
      tflTensors[i].params.scale = quant->scale->data[0];
   262f6:	6098      	str	r0, [r3, #8]
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
   262f8:	60d9      	str	r1, [r3, #12]
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
   262fa:	2e02      	cmp	r6, #2
  for (size_t i = 0; i < 23; ++i) {
   262fc:	f102 0218 	add.w	r2, r2, #24
   26300:	f103 0320 	add.w	r3, r3, #32
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
   26304:	d105      	bne.n	26312 <_Z18trained_model_initPFPvjjE+0xaa>
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
   26306:	445c      	add	r4, fp
      if (data_end_ptr > tensor_boundary) {
   26308:	454c      	cmp	r4, r9
        tensor_boundary = data_end_ptr;
   2630a:	bf84      	itt	hi
   2630c:	f8ca 4000 	strhi.w	r4, [sl]
   26310:	46a1      	movhi	r9, r4
  for (size_t i = 0; i < 23; ++i) {
   26312:	4572      	cmp	r2, lr
   26314:	d009      	beq.n	2632a <_Z18trained_model_initPFPvjjE+0xc2>
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
   26316:	6854      	ldr	r4, [r2, #4]
    tflTensors[i].type = tensorData[i].type;
   26318:	7851      	ldrb	r1, [r2, #1]
   2631a:	7719      	strb	r1, [r3, #28]
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
   2631c:	42bc      	cmp	r4, r7
    tflEvalTensors[i].type = tensorData[i].type;
   2631e:	7229      	strb	r1, [r5, #8]
    tflTensors[i].is_variable = 0;
   26320:	f883 c01e 	strb.w	ip, [r3, #30]
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
   26324:	d2ca      	bcs.n	262bc <_Z18trained_model_initPFPvjjE+0x54>
   26326:	2601      	movs	r6, #1
   26328:	e7cc      	b.n	262c4 <_Z18trained_model_initPFPvjjE+0x5c>
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
   2632a:	45c1      	cmp	r9, r8
   2632c:	d87c      	bhi.n	26428 <_Z18trained_model_initPFPvjjE+0x1c0>
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
   2632e:	a802      	add	r0, sp, #8
   26330:	4604      	mov	r4, r0
   26332:	f00f f9dd 	bl	356f0 <_ZN6tflite3ops5micro16Register_RESHAPEEv>
   26336:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   26338:	f8df 8138 	ldr.w	r8, [pc, #312]	; 26474 <_Z18trained_model_initPFPvjjE+0x20c>
   2633c:	4e49      	ldr	r6, [pc, #292]	; (26464 <_Z18trained_model_initPFPvjjE+0x1fc>)
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
   2633e:	9601      	str	r6, [sp, #4]
  registrations[OP_RESHAPE] = Register_RESHAPE();
   26340:	46c4      	mov	ip, r8
   26342:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   26346:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   2634a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  registrations[OP_CONV_2D] = Register_CONV_2D();
   2634e:	a802      	add	r0, sp, #8
   26350:	f00e fbbe 	bl	34ad0 <_ZN6tflite16Register_CONV_2DEv>
   26354:	f10d 0e08 	add.w	lr, sp, #8
   26358:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   2635c:	f108 0c20 	add.w	ip, r8, #32
   26360:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   26364:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   26368:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
   2636c:	a802      	add	r0, sp, #8
   2636e:	f00f f8ff 	bl	35570 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>
   26372:	f10d 0e08 	add.w	lr, sp, #8
   26376:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   2637a:	f108 0c40 	add.w	ip, r8, #64	; 0x40
   2637e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   26382:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   26386:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
   2638a:	a802      	add	r0, sp, #8
   2638c:	f00e fe26 	bl	34fdc <_ZN6tflite24Register_FULLY_CONNECTEDEv>
   26390:	f10d 0e08 	add.w	lr, sp, #8
   26394:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   26398:	f108 0c60 	add.w	ip, r8, #96	; 0x60
   2639c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   263a0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   263a4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
   263a8:	a802      	add	r0, sp, #8
   263aa:	f00f f9b1 	bl	35710 <_ZN6tflite16Register_SOFTMAXEv>
   263ae:	f10d 0c08 	add.w	ip, sp, #8
   263b2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   263b6:	f108 0e80 	add.w	lr, r8, #128	; 0x80
   263ba:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   263be:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   263c2:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}

  for (size_t i = 0; i < 11; ++i) {
   263c6:	4f28      	ldr	r7, [pc, #160]	; (26468 <_Z18trained_model_initPFPvjjE+0x200>)
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
   263c8:	f8df b078 	ldr.w	fp, [pc, #120]	; 26444 <_Z18trained_model_initPFPvjjE+0x1dc>
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
   263cc:	9c01      	ldr	r4, [sp, #4]
   263ce:	f506 7a84 	add.w	sl, r6, #264	; 0x108
   263d2:	463d      	mov	r5, r7
tflNodes[i].custom_initial_data = nullptr;
   263d4:	f04f 0900 	mov.w	r9, #0
if (registrations[nodeData[i].used_op_index].init) {
   263d8:	7b2b      	ldrb	r3, [r5, #12]
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
   263da:	68a9      	ldr	r1, [r5, #8]
if (registrations[nodeData[i].used_op_index].init) {
   263dc:	015b      	lsls	r3, r3, #5
    tflNodes[i].inputs = nodeData[i].inputs;
   263de:	ed95 7b00 	vldr	d7, [r5]
if (registrations[nodeData[i].used_op_index].init) {
   263e2:	f858 3003 	ldr.w	r3, [r8, r3]
      tflNodes[i].custom_initial_data_size = 0;
   263e6:	f8c4 9014 	str.w	r9, [r4, #20]
    tflNodes[i].inputs = nodeData[i].inputs;
   263ea:	ed84 7b00 	vstr	d7, [r4]
tflNodes[i].custom_initial_data = nullptr;
   263ee:	e9c4 1903 	strd	r1, r9, [r4, #12]
  for (size_t i = 0; i < 11; ++i) {
   263f2:	3510      	adds	r5, #16
if (registrations[nodeData[i].used_op_index].init) {
   263f4:	b11b      	cbz	r3, 263fe <_Z18trained_model_initPFPvjjE+0x196>
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
   263f6:	2200      	movs	r2, #0
   263f8:	4658      	mov	r0, fp
   263fa:	4798      	blx	r3
   263fc:	60a0      	str	r0, [r4, #8]
  for (size_t i = 0; i < 11; ++i) {
   263fe:	3418      	adds	r4, #24
   26400:	4554      	cmp	r4, sl
   26402:	d1e9      	bne.n	263d8 <_Z18trained_model_initPFPvjjE+0x170>
    }
  }
  for (size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
   26404:	4c0f      	ldr	r4, [pc, #60]	; (26444 <_Z18trained_model_initPFPvjjE+0x1dc>)
    if (registrations[nodeData[i].used_op_index].prepare) {
   26406:	7b3b      	ldrb	r3, [r7, #12]
   26408:	eb08 1343 	add.w	r3, r8, r3, lsl #5
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
   2640c:	4631      	mov	r1, r6
    if (registrations[nodeData[i].used_op_index].prepare) {
   2640e:	689b      	ldr	r3, [r3, #8]
  for (size_t i = 0; i < 11; ++i) {
   26410:	3618      	adds	r6, #24
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
   26412:	4620      	mov	r0, r4
  for (size_t i = 0; i < 11; ++i) {
   26414:	3710      	adds	r7, #16
    if (registrations[nodeData[i].used_op_index].prepare) {
   26416:	b10b      	cbz	r3, 2641c <_Z18trained_model_initPFPvjjE+0x1b4>
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
   26418:	4798      	blx	r3
      if (status != kTfLiteOk) {
   2641a:	b910      	cbnz	r0, 26422 <_Z18trained_model_initPFPvjjE+0x1ba>
  for (size_t i = 0; i < 11; ++i) {
   2641c:	4556      	cmp	r6, sl
   2641e:	d1f2      	bne.n	26406 <_Z18trained_model_initPFPvjjE+0x19e>
        return status;
      }
    }
  }
  return kTfLiteOk;
   26420:	2000      	movs	r0, #0
}
   26422:	b00b      	add	sp, #44	; 0x2c
   26424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
   26428:	4810      	ldr	r0, [pc, #64]	; (2646c <_Z18trained_model_initPFPvjjE+0x204>)
   2642a:	f7ff fe3d 	bl	260a8 <_Z9ei_printfPKcz>
    return kTfLiteError;
   2642e:	2001      	movs	r0, #1
}
   26430:	b00b      	add	sp, #44	; 0x2c
   26432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26436:	bf00      	nop
   26438:	10018bb0 	.word	0x10018bb0
   2643c:	00026141 	.word	0x00026141
   26440:	10019480 	.word	0x10019480
   26444:	10019594 	.word	0x10019594
   26448:	1001971c 	.word	0x1001971c
   2644c:	000261b5 	.word	0x000261b5
   26450:	00026109 	.word	0x00026109
   26454:	00040770 	.word	0x00040770
   26458:	00026125 	.word	0x00026125
   2645c:	100188c4 	.word	0x100188c4
   26460:	00026131 	.word	0x00026131
   26464:	100195f0 	.word	0x100195f0
   26468:	000416b8 	.word	0x000416b8
   2646c:	0004071c 	.word	0x0004071c
   26470:	10019718 	.word	0x10019718
   26474:	100193e0 	.word	0x100193e0

00026478 <_Z19trained_model_inputi>:

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
   26478:	4b01      	ldr	r3, [pc, #4]	; (26480 <_Z19trained_model_inputi+0x8>)
}
   2647a:	6898      	ldr	r0, [r3, #8]
   2647c:	4770      	bx	lr
   2647e:	bf00      	nop
   26480:	10019594 	.word	0x10019594

00026484 <_Z20trained_model_outputi>:

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
   26484:	4b02      	ldr	r3, [pc, #8]	; (26490 <_Z20trained_model_outputi+0xc>)
   26486:	6898      	ldr	r0, [r3, #8]
}
   26488:	f500 7030 	add.w	r0, r0, #704	; 0x2c0
   2648c:	4770      	bx	lr
   2648e:	bf00      	nop
   26490:	10019594 	.word	0x10019594

00026494 <_Z20trained_model_invokev>:

TfLiteStatus trained_model_invoke() {
   26494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26498:	4c0b      	ldr	r4, [pc, #44]	; (264c8 <_Z20trained_model_invokev+0x34>)
   2649a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 264d4 <_Z20trained_model_invokev+0x40>
   2649e:	4e0b      	ldr	r6, [pc, #44]	; (264cc <_Z20trained_model_invokev+0x38>)
  for (size_t i = 0; i < 11; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
   264a0:	4d0b      	ldr	r5, [pc, #44]	; (264d0 <_Z20trained_model_invokev+0x3c>)
   264a2:	f504 7784 	add.w	r7, r4, #264	; 0x108
   264a6:	f898 300c 	ldrb.w	r3, [r8, #12]
   264aa:	eb06 1343 	add.w	r3, r6, r3, lsl #5
   264ae:	4621      	mov	r1, r4
   264b0:	68db      	ldr	r3, [r3, #12]
   264b2:	4628      	mov	r0, r5
   264b4:	4798      	blx	r3
  for (size_t i = 0; i < 11; ++i) {
   264b6:	3418      	adds	r4, #24
   264b8:	f108 0810 	add.w	r8, r8, #16
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
   264bc:	b908      	cbnz	r0, 264c2 <_Z20trained_model_invokev+0x2e>
  for (size_t i = 0; i < 11; ++i) {
   264be:	42bc      	cmp	r4, r7
   264c0:	d1f1      	bne.n	264a6 <_Z20trained_model_invokev+0x12>
      return status;
    }
  }
  return kTfLiteOk;
}
   264c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   264c6:	bf00      	nop
   264c8:	100195f0 	.word	0x100195f0
   264cc:	100193e0 	.word	0x100193e0
   264d0:	10019594 	.word	0x10019594
   264d4:	000416b8 	.word	0x000416b8

000264d8 <_Z19trained_model_resetPFvPvE>:

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
   264d8:	b570      	push	{r4, r5, r6, lr}

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
   264da:	4e09      	ldr	r6, [pc, #36]	; (26500 <_Z19trained_model_resetPFvPvE+0x28>)
  scratch_buffers_ix = 0;
   264dc:	4a09      	ldr	r2, [pc, #36]	; (26504 <_Z19trained_model_resetPFvPvE+0x2c>)
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
   264de:	6833      	ldr	r3, [r6, #0]
  scratch_buffers_ix = 0;
   264e0:	2400      	movs	r4, #0
   264e2:	6014      	str	r4, [r2, #0]
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
   264e4:	b143      	cbz	r3, 264f8 <_Z19trained_model_resetPFvPvE+0x20>
   264e6:	4d08      	ldr	r5, [pc, #32]	; (26508 <_Z19trained_model_resetPFvPvE+0x30>)
    ei_free(overflow_buffers[ix]);
   264e8:	f855 0b04 	ldr.w	r0, [r5], #4
   264ec:	f7ff fe0a 	bl	26104 <_Z7ei_freePv>
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
   264f0:	6833      	ldr	r3, [r6, #0]
   264f2:	3401      	adds	r4, #1
   264f4:	42a3      	cmp	r3, r4
   264f6:	d8f7      	bhi.n	264e8 <_Z19trained_model_resetPFvPvE+0x10>
  }
  overflow_buffers_ix = 0;
   264f8:	2000      	movs	r0, #0
   264fa:	6030      	str	r0, [r6, #0]
  return kTfLiteOk;
}
   264fc:	bd70      	pop	{r4, r5, r6, pc}
   264fe:	bf00      	nop
   26500:	1001974c 	.word	0x1001974c
   26504:	10019748 	.word	0x10019748
   26508:	10019720 	.word	0x10019720

0002650c <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>:
        const size_t fstride,
        const kiss_fft_cfg st,
        int m,
        int p
        )
{
   2650c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26510:	b089      	sub	sp, #36	; 0x24
   26512:	4683      	mov	fp, r0
   26514:	9f12      	ldr	r7, [sp, #72]	; 0x48
    int u,k,q1,q;
    kiss_fft_cpx * twiddles = st->twiddles;
    kiss_fft_cpx t;
    int Norig = st->nfft;
   26516:	6814      	ldr	r4, [r2, #0]
{
   26518:	9304      	str	r3, [sp, #16]

    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);
   2651a:	ea4f 08c7 	mov.w	r8, r7, lsl #3
   2651e:	4640      	mov	r0, r8
{
   26520:	461e      	mov	r6, r3
    kiss_fft_cpx * twiddles = st->twiddles;
   26522:	f502 7584 	add.w	r5, r2, #264	; 0x108
{
   26526:	468a      	mov	sl, r1
    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);
   26528:	f7ff fdda 	bl	260e0 <_Z9ei_mallocj>

    for ( u=0; u<m; ++u ) {
   2652c:	2e00      	cmp	r6, #0
    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);
   2652e:	4602      	mov	r2, r0
    for ( u=0; u<m; ++u ) {
   26530:	dd4f      	ble.n	265d2 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0xc6>
   26532:	9b04      	ldr	r3, [sp, #16]
   26534:	2b01      	cmp	r3, #1
   26536:	d152      	bne.n	265de <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0xd2>
        k=u;
        for ( q1=0 ; q1<p ; ++q1 ) {
   26538:	2f00      	cmp	r7, #0
   2653a:	dd4a      	ble.n	265d2 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0xc6>
   2653c:	f04f 0c00 	mov.w	ip, #0
            scratch[q1] = Fout[ k  ];
   26540:	eb0b 03cc 	add.w	r3, fp, ip, lsl #3
   26544:	e893 0003 	ldmia.w	r3, {r0, r1}
   26548:	eb02 03cc 	add.w	r3, r2, ip, lsl #3
            C_FIXDIV(scratch[q1],p);
            k += m;
   2654c:	f10c 0c01 	add.w	ip, ip, #1
        for ( q1=0 ; q1<p ; ++q1 ) {
   26550:	4567      	cmp	r7, ip
            scratch[q1] = Fout[ k  ];
   26552:	e883 0003 	stmia.w	r3, {r0, r1}
        for ( q1=0 ; q1<p ; ++q1 ) {
   26556:	d1f3      	bne.n	26540 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x34>
   26558:	465f      	mov	r7, fp
   2655a:	f1a8 0908 	sub.w	r9, r8, #8
   2655e:	1d3e      	adds	r6, r7, #4
   26560:	44b0      	add	r8, r6
   26562:	4491      	add	r9, r2
   26564:	f04f 0e00 	mov.w	lr, #0
        }

        k=u;
        for ( q1=0 ; q1<p ; ++q1 ) {
            int twidx=0;
            Fout[ k ] = scratch[0];
   26568:	e892 0003 	ldmia.w	r2, {r0, r1}
   2656c:	1f33      	subs	r3, r6, #4
            for (q=1;q<p;++q ) {
   2656e:	f1bc 0f01 	cmp.w	ip, #1
            Fout[ k ] = scratch[0];
   26572:	e883 0003 	stmia.w	r3, {r0, r1}
            for (q=1;q<p;++q ) {
   26576:	d026      	beq.n	265c6 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0xba>
                twidx += fstride * k;
                if (twidx>=Norig) twidx-=Norig;
                C_MUL(t,scratch[q] , twiddles[twidx] );
                C_ADDTO( Fout[ k ] ,t);
   26578:	ed16 6a01 	vldr	s12, [r6, #-4]
   2657c:	edd7 6a01 	vldr	s13, [r7, #4]
   26580:	4611      	mov	r1, r2
            int twidx=0;
   26582:	2300      	movs	r3, #0
                twidx += fstride * k;
   26584:	4473      	add	r3, lr
                if (twidx>=Norig) twidx-=Norig;
   26586:	42a3      	cmp	r3, r4
   26588:	bfa8      	it	ge
   2658a:	1b1b      	subge	r3, r3, r4
                C_MUL(t,scratch[q] , twiddles[twidx] );
   2658c:	eb05 00c3 	add.w	r0, r5, r3, lsl #3
   26590:	edd1 7a03 	vldr	s15, [r1, #12]
   26594:	edd0 4a00 	vldr	s9, [r0]
   26598:	edd0 5a01 	vldr	s11, [r0, #4]
   2659c:	ed91 5a02 	vldr	s10, [r1, #8]
   265a0:	ee25 7ae7 	vnmul.f32	s14, s11, s15
   265a4:	ee64 7aa7 	vmul.f32	s15, s9, s15
   265a8:	eea4 7a85 	vfma.f32	s14, s9, s10
            for (q=1;q<p;++q ) {
   265ac:	3108      	adds	r1, #8
   265ae:	4549      	cmp	r1, r9
                C_MUL(t,scratch[q] , twiddles[twidx] );
   265b0:	eee5 7a25 	vfma.f32	s15, s10, s11
                C_ADDTO( Fout[ k ] ,t);
   265b4:	ee36 6a07 	vadd.f32	s12, s12, s14
   265b8:	ee76 6aa7 	vadd.f32	s13, s13, s15
   265bc:	ed06 6a01 	vstr	s12, [r6, #-4]
   265c0:	edc7 6a01 	vstr	s13, [r7, #4]
            for (q=1;q<p;++q ) {
   265c4:	d1de      	bne.n	26584 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x78>
        for ( q1=0 ; q1<p ; ++q1 ) {
   265c6:	3608      	adds	r6, #8
   265c8:	45b0      	cmp	r8, r6
   265ca:	f107 0708 	add.w	r7, r7, #8
   265ce:	44d6      	add	lr, sl
   265d0:	d1ca      	bne.n	26568 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x5c>
            }
            k += m;
        }
    }
    KISS_FFT_TMP_FREE(scratch);
   265d2:	4610      	mov	r0, r2
}
   265d4:	b009      	add	sp, #36	; 0x24
   265d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    KISS_FFT_TMP_FREE(scratch);
   265da:	f7ff bd93 	b.w	26104 <_Z7ei_freePv>
   265de:	4619      	mov	r1, r3
   265e0:	f1a8 0c08 	sub.w	ip, r8, #8
    for ( u=0; u<m; ++u ) {
   265e4:	2300      	movs	r3, #0
   265e6:	4484      	add	ip, r0
   265e8:	00c8      	lsls	r0, r1, #3
   265ea:	fb0a f101 	mul.w	r1, sl, r1
   265ee:	e9cd b302 	strd	fp, r3, [sp, #8]
   265f2:	e9cd 1300 	strd	r1, r3, [sp]
   265f6:	e9cd ba06 	strd	fp, sl, [sp, #24]
   265fa:	9705      	str	r7, [sp, #20]
   265fc:	4682      	mov	sl, r0
        for ( q1=0 ; q1<p ; ++q1 ) {
   265fe:	9b05      	ldr	r3, [sp, #20]
   26600:	2b00      	cmp	r3, #0
   26602:	dd52      	ble.n	266aa <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x19e>
   26604:	4699      	mov	r9, r3
   26606:	9f06      	ldr	r7, [sp, #24]
   26608:	9b01      	ldr	r3, [sp, #4]
   2660a:	f8dd e010 	ldr.w	lr, [sp, #16]
   2660e:	f04f 0800 	mov.w	r8, #0
            scratch[q1] = Fout[ k  ];
   26612:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
   26616:	c903      	ldmia	r1, {r0, r1}
   26618:	eb02 06c8 	add.w	r6, r2, r8, lsl #3
   2661c:	46c3      	mov	fp, r8
        for ( q1=0 ; q1<p ; ++q1 ) {
   2661e:	f108 0801 	add.w	r8, r8, #1
   26622:	45c1      	cmp	r9, r8
            scratch[q1] = Fout[ k  ];
   26624:	e886 0003 	stmia.w	r6, {r0, r1}
            k += m;
   26628:	4473      	add	r3, lr
        for ( q1=0 ; q1<p ; ++q1 ) {
   2662a:	d1f2      	bne.n	26612 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x106>
   2662c:	9f02      	ldr	r7, [sp, #8]
   2662e:	f8dd e00c 	ldr.w	lr, [sp, #12]
   26632:	1d3e      	adds	r6, r7, #4
   26634:	f04f 0900 	mov.w	r9, #0
            Fout[ k ] = scratch[0];
   26638:	e892 0003 	ldmia.w	r2, {r0, r1}
   2663c:	1f33      	subs	r3, r6, #4
            for (q=1;q<p;++q ) {
   2663e:	f1b8 0f01 	cmp.w	r8, #1
            Fout[ k ] = scratch[0];
   26642:	e883 0003 	stmia.w	r3, {r0, r1}
            for (q=1;q<p;++q ) {
   26646:	d026      	beq.n	26696 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x18a>
                C_ADDTO( Fout[ k ] ,t);
   26648:	ed16 6a01 	vldr	s12, [r6, #-4]
   2664c:	edd7 6a01 	vldr	s13, [r7, #4]
   26650:	4611      	mov	r1, r2
            int twidx=0;
   26652:	2300      	movs	r3, #0
                twidx += fstride * k;
   26654:	4473      	add	r3, lr
                if (twidx>=Norig) twidx-=Norig;
   26656:	429c      	cmp	r4, r3
   26658:	bfd8      	it	le
   2665a:	1b1b      	suble	r3, r3, r4
                C_MUL(t,scratch[q] , twiddles[twidx] );
   2665c:	eb05 00c3 	add.w	r0, r5, r3, lsl #3
   26660:	edd1 7a03 	vldr	s15, [r1, #12]
   26664:	edd0 4a00 	vldr	s9, [r0]
   26668:	edd0 5a01 	vldr	s11, [r0, #4]
   2666c:	ed91 5a02 	vldr	s10, [r1, #8]
   26670:	ee25 7ae7 	vnmul.f32	s14, s11, s15
   26674:	ee64 7aa7 	vmul.f32	s15, s9, s15
   26678:	eea5 7a24 	vfma.f32	s14, s10, s9
            for (q=1;q<p;++q ) {
   2667c:	3108      	adds	r1, #8
   2667e:	458c      	cmp	ip, r1
                C_MUL(t,scratch[q] , twiddles[twidx] );
   26680:	eee5 7a25 	vfma.f32	s15, s10, s11
                C_ADDTO( Fout[ k ] ,t);
   26684:	ee36 6a07 	vadd.f32	s12, s12, s14
   26688:	ee76 6aa7 	vadd.f32	s13, s13, s15
   2668c:	ed06 6a01 	vstr	s12, [r6, #-4]
   26690:	edc7 6a01 	vstr	s13, [r7, #4]
            for (q=1;q<p;++q ) {
   26694:	d1de      	bne.n	26654 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x148>
        for ( q1=0 ; q1<p ; ++q1 ) {
   26696:	9b00      	ldr	r3, [sp, #0]
   26698:	45cb      	cmp	fp, r9
   2669a:	449e      	add	lr, r3
   2669c:	4457      	add	r7, sl
   2669e:	4456      	add	r6, sl
   266a0:	f109 0301 	add.w	r3, r9, #1
   266a4:	d001      	beq.n	266aa <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x19e>
   266a6:	4699      	mov	r9, r3
   266a8:	e7c6      	b.n	26638 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x12c>
    for ( u=0; u<m; ++u ) {
   266aa:	9902      	ldr	r1, [sp, #8]
   266ac:	9807      	ldr	r0, [sp, #28]
   266ae:	9b01      	ldr	r3, [sp, #4]
   266b0:	3108      	adds	r1, #8
   266b2:	9102      	str	r1, [sp, #8]
   266b4:	9903      	ldr	r1, [sp, #12]
   266b6:	4401      	add	r1, r0
   266b8:	9103      	str	r1, [sp, #12]
   266ba:	9904      	ldr	r1, [sp, #16]
   266bc:	3301      	adds	r3, #1
   266be:	4299      	cmp	r1, r3
   266c0:	9301      	str	r3, [sp, #4]
   266c2:	d19c      	bne.n	265fe <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0xf2>
    KISS_FFT_TMP_FREE(scratch);
   266c4:	4610      	mov	r0, r2
}
   266c6:	b009      	add	sp, #36	; 0x24
   266c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    KISS_FFT_TMP_FREE(scratch);
   266cc:	f7ff bd1a 	b.w	26104 <_Z7ei_freePv>

000266d0 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>:
        const size_t fstride,
        int in_stride,
        int * factors,
        const kiss_fft_cfg st
        )
{
   266d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   266d4:	ed2d 8b08 	vpush	{d8-d11}
   266d8:	b089      	sub	sp, #36	; 0x24
   266da:	4691      	mov	r9, r2
   266dc:	9f1a      	ldr	r7, [sp, #104]	; 0x68
   266de:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
    kiss_fft_cpx * Fout_beg=Fout;
    const int p=*factors++; /* the radix  */
   266e0:	683a      	ldr	r2, [r7, #0]
    const int m=*factors++; /* stage's fft length/p */
   266e2:	f8d7 b004 	ldr.w	fp, [r7, #4]
    const int p=*factors++; /* the radix  */
   266e6:	9204      	str	r2, [sp, #16]
    const kiss_fft_cpx * Fout_end = Fout + p*m;
   266e8:	fb0b f802 	mul.w	r8, fp, r2
        }
        return;
    }
#endif

    if (m==1) {
   266ec:	f1bb 0f01 	cmp.w	fp, #1
{
   266f0:	4604      	mov	r4, r0
   266f2:	460e      	mov	r6, r1
    const kiss_fft_cpx * Fout_end = Fout + p*m;
   266f4:	eb00 08c8 	add.w	r8, r0, r8, lsl #3
    if (m==1) {
   266f8:	f000 82ca 	beq.w	26c90 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x5c0>
    const int m=*factors++; /* stage's fft length/p */
   266fc:	f107 0108 	add.w	r1, r7, #8
            // recursive call:
            // DFT of size m*p performed by doing
            // p instances of smaller DFTs of size m,
            // each one takes a decimated version of the input
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
            f += fstride*in_stride;
   26700:	fb09 fa03 	mul.w	sl, r9, r3
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
   26704:	fb09 f202 	mul.w	r2, r9, r2
        }while( (Fout += m) != Fout_end );
   26708:	ea4f 00cb 	mov.w	r0, fp, lsl #3
   2670c:	4627      	mov	r7, r4
   2670e:	f8cd b014 	str.w	fp, [sp, #20]
   26712:	9406      	str	r4, [sp, #24]
   26714:	f8cd 901c 	str.w	r9, [sp, #28]
            f += fstride*in_stride;
   26718:	ea4f 0aca 	mov.w	sl, sl, lsl #3
        }while( (Fout += m) != Fout_end );
   2671c:	4683      	mov	fp, r0
   2671e:	4614      	mov	r4, r2
   26720:	4689      	mov	r9, r1
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
   26722:	4631      	mov	r1, r6
   26724:	4638      	mov	r0, r7
   26726:	e9cd 9500 	strd	r9, r5, [sp]
        }while( (Fout += m) != Fout_end );
   2672a:	445f      	add	r7, fp
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
   2672c:	4622      	mov	r2, r4
   2672e:	9303      	str	r3, [sp, #12]
   26730:	f7ff ffce 	bl	266d0 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
        }while( (Fout += m) != Fout_end );
   26734:	45b8      	cmp	r8, r7
   26736:	9b03      	ldr	r3, [sp, #12]
            f += fstride*in_stride;
   26738:	4456      	add	r6, sl
        }while( (Fout += m) != Fout_end );
   2673a:	d1f2      	bne.n	26722 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x52>
   2673c:	e9dd b405 	ldrd	fp, r4, [sp, #20]
   26740:	f8dd 901c 	ldr.w	r9, [sp, #28]
    }

    Fout=Fout_beg;

    // recombine the p smaller DFTs
    switch (p) {
   26744:	9b04      	ldr	r3, [sp, #16]
   26746:	3b02      	subs	r3, #2
   26748:	2b03      	cmp	r3, #3
   2674a:	f200 84ed 	bhi.w	27128 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xa58>
   2674e:	e8df f013 	tbh	[pc, r3, lsl #1]
   26752:	0260      	.short	0x0260
   26754:	00f501ab 	.word	0x00f501ab
   26758:	0004      	.short	0x0004
    ya = twiddles[fstride*m];
   2675a:	fb0b f309 	mul.w	r3, fp, r9
    kiss_fft_cpx * twiddles = st->twiddles;
   2675e:	f505 7284 	add.w	r2, r5, #264	; 0x108
    ya = twiddles[fstride*m];
   26762:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    yb = twiddles[fstride*2*m];
   26766:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    ya = twiddles[fstride*m];
   2676a:	ed92 4a00 	vldr	s8, [r2]
   2676e:	ed92 2a01 	vldr	s4, [r2, #4]
    yb = twiddles[fstride*2*m];
   26772:	edd3 3a00 	vldr	s7, [r3]
   26776:	ed93 3a01 	vldr	s6, [r3, #4]
    Fout2=Fout0+2*m;
   2677a:	eb04 120b 	add.w	r2, r4, fp, lsl #4
    for ( u=0; u<m; ++u ) {
   2677e:	f1bb 0f00 	cmp.w	fp, #0
    Fout1=Fout0+m;
   26782:	ea4f 0ccb 	mov.w	ip, fp, lsl #3
   26786:	eb04 01cb 	add.w	r1, r4, fp, lsl #3
    Fout3=Fout0+3*m;
   2678a:	eb02 00cb 	add.w	r0, r2, fp, lsl #3
    Fout4=Fout0+4*m;
   2678e:	eb02 130b 	add.w	r3, r2, fp, lsl #4
    for ( u=0; u<m; ++u ) {
   26792:	f340 80ce 	ble.w	26932 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x262>
   26796:	f1b9 0f01 	cmp.w	r9, #1
   2679a:	46aa      	mov	sl, r5
   2679c:	f040 83ee 	bne.w	26f7c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x8ac>
   267a0:	f10c 0c08 	add.w	ip, ip, #8
   267a4:	449c      	add	ip, r3
   267a6:	3008      	adds	r0, #8
   267a8:	3208      	adds	r2, #8
   267aa:	3108      	adds	r1, #8
   267ac:	3408      	adds	r4, #8
   267ae:	3308      	adds	r3, #8
   267b0:	eef1 1a42 	vneg.f32	s3, s4
   267b4:	462f      	mov	r7, r5
   267b6:	462e      	mov	r6, r5
        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
   267b8:	edda 4a42 	vldr	s9, [sl, #264]	; 0x108
   267bc:	ed9a 5a43 	vldr	s10, [sl, #268]	; 0x10c
   267c0:	ed11 7a01 	vldr	s14, [r1, #-4]
   267c4:	ed51 7a02 	vldr	s15, [r1, #-8]
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
   267c8:	ed97 aa42 	vldr	s20, [r7, #264]	; 0x108
   267cc:	edd7 9a43 	vldr	s19, [r7, #268]	; 0x10c
   267d0:	ed53 5a01 	vldr	s11, [r3, #-4]
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
   267d4:	ed95 9a42 	vldr	s18, [r5, #264]	; 0x108
   267d8:	edd5 8a43 	vldr	s17, [r5, #268]	; 0x10c
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
   267dc:	ed96 1a42 	vldr	s2, [r6, #264]	; 0x108
   267e0:	edd6 2a43 	vldr	s5, [r6, #268]	; 0x10c
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
   267e4:	ed52 6a01 	vldr	s13, [r2, #-4]
   267e8:	ed52 0a02 	vldr	s1, [r2, #-8]
        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
   267ec:	ee27 6a45 	vnmul.f32	s12, s14, s10
   267f0:	ee27 7a24 	vmul.f32	s14, s14, s9
   267f4:	eea4 6aa7 	vfma.f32	s12, s9, s15
    for ( u=0; u<m; ++u ) {
   267f8:	3308      	adds	r3, #8
   267fa:	3108      	adds	r1, #8
        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
   267fc:	eea5 7a27 	vfma.f32	s14, s10, s15
    for ( u=0; u<m; ++u ) {
   26800:	3208      	adds	r2, #8
   26802:	3008      	adds	r0, #8
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
   26804:	ed13 5a04 	vldr	s10, [r3, #-16]
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
   26808:	ed50 7a03 	vldr	s15, [r0, #-12]
   2680c:	ed50 4a04 	vldr	s9, [r0, #-16]
        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
   26810:	eeb0 0a46 	vmov.f32	s0, s12
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
   26814:	ee25 8ae9 	vnmul.f32	s16, s11, s19
        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
   26818:	eeb0 6a47 	vmov.f32	s12, s14
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
   2681c:	ee25 7a8a 	vmul.f32	s14, s11, s20
   26820:	eeaa 8a05 	vfma.f32	s16, s20, s10
    for ( u=0; u<m; ++u ) {
   26824:	3408      	adds	r4, #8
   26826:	f10a 0a08 	add.w	sl, sl, #8
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
   2682a:	eea9 7a85 	vfma.f32	s14, s19, s10
    for ( u=0; u<m; ++u ) {
   2682e:	3510      	adds	r5, #16
   26830:	3618      	adds	r6, #24
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
   26832:	ee66 5ae8 	vnmul.f32	s11, s13, s17
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
   26836:	ee27 5ae2 	vnmul.f32	s10, s15, s5
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
   2683a:	ee66 6a89 	vmul.f32	s13, s13, s18
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
   2683e:	ee67 7a81 	vmul.f32	s15, s15, s2
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
   26842:	eee8 6aa0 	vfma.f32	s13, s17, s1
    for ( u=0; u<m; ++u ) {
   26846:	3720      	adds	r7, #32
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
   26848:	eee2 7aa4 	vfma.f32	s15, s5, s9
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
   2684c:	eee9 5a20 	vfma.f32	s11, s18, s1
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
   26850:	eea1 5a24 	vfma.f32	s10, s2, s9
        C_SUB( scratch[9],scratch[2],scratch[3]);
   26854:	ee76 aae7 	vsub.f32	s21, s13, s15
        C_ADD( scratch[8],scratch[2],scratch[3]);
   26858:	ee75 0a25 	vadd.f32	s1, s10, s11
        C_ADD( scratch[7],scratch[1],scratch[4]);
   2685c:	ee77 9a06 	vadd.f32	s19, s14, s12
        C_SUB( scratch[9],scratch[2],scratch[3]);
   26860:	ee75 4ac5 	vsub.f32	s9, s11, s10
        C_SUB( scratch[10],scratch[1],scratch[4]);
   26864:	ee36 7a47 	vsub.f32	s14, s12, s14
        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
   26868:	ee63 5a2a 	vmul.f32	s11, s6, s21
        scratch[0] = *Fout0;
   2686c:	ed54 8a03 	vldr	s17, [r4, #-12]
   26870:	ed14 9a04 	vldr	s18, [r4, #-16]
        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
   26874:	eee2 5a07 	vfma.f32	s11, s4, s14
        C_ADD( scratch[8],scratch[2],scratch[3]);
   26878:	ee77 7aa6 	vadd.f32	s15, s15, s13
        C_SUB( scratch[10],scratch[1],scratch[4]);
   2687c:	ee30 6a48 	vsub.f32	s12, s0, s16
        C_ADD( scratch[7],scratch[1],scratch[4]);
   26880:	ee38 aa00 	vadd.f32	s20, s16, s0
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
   26884:	ee24 5ac3 	vnmul.f32	s10, s9, s6
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
   26888:	ee64 6ac2 	vnmul.f32	s13, s9, s4
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
   2688c:	eef0 2a68 	vmov.f32	s5, s17
        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
   26890:	eeb0 1a49 	vmov.f32	s2, s18
        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
   26894:	eef0 4a65 	vmov.f32	s9, s11
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
   26898:	eea1 5a86 	vfma.f32	s10, s3, s12
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
   2689c:	eee3 6a06 	vfma.f32	s13, s6, s12
        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
   268a0:	eea4 1a0a 	vfma.f32	s2, s8, s20
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
   268a4:	eeb0 6a68 	vmov.f32	s12, s17
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
   268a8:	eee4 2a29 	vfma.f32	s5, s8, s19
        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
   268ac:	eef0 5a49 	vmov.f32	s11, s18
   268b0:	eee3 5a8a 	vfma.f32	s11, s7, s20
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
   268b4:	eea3 6aa9 	vfma.f32	s12, s7, s19
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
   268b8:	eee3 2aa7 	vfma.f32	s5, s7, s15
        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
   268bc:	eea3 1aa0 	vfma.f32	s2, s7, s1
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
   268c0:	ee27 7a43 	vnmul.f32	s14, s14, s6
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
   268c4:	eea4 6a27 	vfma.f32	s12, s8, s15
        Fout0->i += scratch[7].i + scratch[8].i;
   268c8:	ee37 0aa9 	vadd.f32	s0, s15, s19
        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
   268cc:	eef0 7a65 	vmov.f32	s15, s11
   268d0:	eee4 7a20 	vfma.f32	s15, s8, s1
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
   268d4:	eea2 7a2a 	vfma.f32	s14, s4, s21
        Fout0->r += scratch[7].r + scratch[8].r;
   268d8:	ee30 8a8a 	vadd.f32	s16, s1, s20
        C_ADD(*Fout4,scratch[5],scratch[6]);
   268dc:	ee74 5a81 	vadd.f32	s11, s9, s2
        Fout0->i += scratch[7].i + scratch[8].i;
   268e0:	ee70 0a28 	vadd.f32	s1, s0, s17
        Fout0->r += scratch[7].r + scratch[8].r;
   268e4:	ee38 8a09 	vadd.f32	s16, s16, s18
        C_SUB(*Fout1,scratch[5],scratch[6]);
   268e8:	ee32 0ac5 	vsub.f32	s0, s5, s10
   268ec:	ee71 8a64 	vsub.f32	s17, s2, s9
        C_ADD(*Fout4,scratch[5],scratch[6]);
   268f0:	ee35 5a22 	vadd.f32	s10, s10, s5
        C_ADD(*Fout2,scratch[11],scratch[12]);
   268f4:	ee76 4a86 	vadd.f32	s9, s13, s12
   268f8:	ee77 2a27 	vadd.f32	s5, s14, s15
        C_SUB(*Fout3,scratch[11],scratch[12]);
   268fc:	ee76 6a66 	vsub.f32	s13, s12, s13
   26900:	ee37 7ac7 	vsub.f32	s14, s15, s14
        Fout0->r += scratch[7].r + scratch[8].r;
   26904:	ed04 8a04 	vstr	s16, [r4, #-16]
        Fout0->i += scratch[7].i + scratch[8].i;
   26908:	ed44 0a03 	vstr	s1, [r4, #-12]
        C_SUB(*Fout1,scratch[5],scratch[6]);
   2690c:	ed41 8a04 	vstr	s17, [r1, #-16]
   26910:	ed01 0a03 	vstr	s0, [r1, #-12]
        C_ADD(*Fout4,scratch[5],scratch[6]);
   26914:	ed43 5a04 	vstr	s11, [r3, #-16]
   26918:	ed03 5a03 	vstr	s10, [r3, #-12]
    for ( u=0; u<m; ++u ) {
   2691c:	4563      	cmp	r3, ip
        C_ADD(*Fout2,scratch[11],scratch[12]);
   2691e:	ed42 2a04 	vstr	s5, [r2, #-16]
   26922:	ed42 4a03 	vstr	s9, [r2, #-12]
        C_SUB(*Fout3,scratch[11],scratch[12]);
   26926:	ed00 7a04 	vstr	s14, [r0, #-16]
   2692a:	ed40 6a03 	vstr	s13, [r0, #-12]
    for ( u=0; u<m; ++u ) {
   2692e:	f47f af43 	bne.w	267b8 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xe8>
        case 3: kf_bfly3(Fout,fstride,st,m); break;
        case 4: kf_bfly4(Fout,fstride,st,m); break;
        case 5: kf_bfly5(Fout,fstride,st,m); break;
        default: kf_bfly_generic(Fout,fstride,st,m,p); break;
    }
}
   26932:	b009      	add	sp, #36	; 0x24
   26934:	ecbd 8b08 	vpop	{d8-d11}
   26938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        C_MUL(scratch[2],Fout[m3] , *tw3 );
   2693c:	eb0b 014b 	add.w	r1, fp, fp, lsl #1
        case 4: kf_bfly4(Fout,fstride,st,m); break;
   26940:	465f      	mov	r7, fp
        C_MUL(scratch[2],Fout[m3] , *tw3 );
   26942:	00c9      	lsls	r1, r1, #3
        tw3 += fstride*3;
   26944:	eb09 0c49 	add.w	ip, r9, r9, lsl #1
   26948:	f1b9 0f01 	cmp.w	r9, #1
        if(st->inverse) {
   2694c:	6868      	ldr	r0, [r5, #4]
        C_MUL(scratch[0],Fout[m] , *tw1 );
   2694e:	ea4f 06c7 	mov.w	r6, r7, lsl #3
        tw3 += fstride*3;
   26952:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
        tw1 += fstride;
   26956:	ea4f 0ec9 	mov.w	lr, r9, lsl #3
        tw2 += fstride*2;
   2695a:	ea4f 1809 	mov.w	r8, r9, lsl #4
   2695e:	46aa      	mov	sl, r5
   26960:	f101 0104 	add.w	r1, r1, #4
   26964:	f040 8266 	bne.w	26e34 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x764>
   26968:	eb04 0246 	add.w	r2, r4, r6, lsl #1
   2696c:	1d35      	adds	r5, r6, #4
   2696e:	4421      	add	r1, r4
   26970:	4425      	add	r5, r4
   26972:	f104 0308 	add.w	r3, r4, #8
        if(st->inverse) {
   26976:	46d6      	mov	lr, sl
   26978:	4434      	add	r4, r6
   2697a:	46d4      	mov	ip, sl
   2697c:	4416      	add	r6, r2
   2697e:	e023      	b.n	269c8 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x2f8>
            Fout[m].r = scratch[5].r - scratch[4].i;
   26980:	ee36 5a67 	vsub.f32	s10, s12, s15
            Fout[m].i = scratch[5].i + scratch[4].r;
   26984:	ee76 5a87 	vadd.f32	s11, s13, s14
            Fout[m3].r = scratch[5].r + scratch[4].i;
   26988:	ee37 6a86 	vadd.f32	s12, s15, s12
            Fout[m3].i = scratch[5].i - scratch[4].r;
   2698c:	ee77 6a66 	vsub.f32	s13, s14, s13
            Fout[m].r = scratch[5].r - scratch[4].i;
   26990:	ed05 5a01 	vstr	s10, [r5, #-4]
            Fout[m].i = scratch[5].i + scratch[4].r;
   26994:	edc4 5a01 	vstr	s11, [r4, #4]
            Fout[m3].r = scratch[5].r + scratch[4].i;
   26998:	ed01 6a01 	vstr	s12, [r1, #-4]
            Fout[m3].i = scratch[5].i - scratch[4].r;
   2699c:	edc6 6a01 	vstr	s13, [r6, #4]
    }while(--k);
   269a0:	3f01      	subs	r7, #1
   269a2:	f103 0308 	add.w	r3, r3, #8
   269a6:	f104 0408 	add.w	r4, r4, #8
   269aa:	f10a 0a08 	add.w	sl, sl, #8
   269ae:	f102 0208 	add.w	r2, r2, #8
   269b2:	f10c 0c10 	add.w	ip, ip, #16
   269b6:	f106 0608 	add.w	r6, r6, #8
   269ba:	f10e 0e18 	add.w	lr, lr, #24
   269be:	f105 0508 	add.w	r5, r5, #8
   269c2:	f101 0108 	add.w	r1, r1, #8
   269c6:	d0b4      	beq.n	26932 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x262>
        C_MUL(scratch[0],Fout[m] , *tw1 );
   269c8:	ed9a 1a43 	vldr	s2, [sl, #268]	; 0x10c
        C_MUL(scratch[1],Fout[m2] , *tw2 );
   269cc:	ed9c 2a42 	vldr	s4, [ip, #264]	; 0x108
   269d0:	eddc 2a43 	vldr	s5, [ip, #268]	; 0x10c
        C_MUL(scratch[2],Fout[m3] , *tw3 );
   269d4:	edde 3a42 	vldr	s7, [lr, #264]	; 0x108
   269d8:	edde 5a43 	vldr	s11, [lr, #268]	; 0x10c
        C_MUL(scratch[0],Fout[m] , *tw1 );
   269dc:	edda 0a42 	vldr	s1, [sl, #264]	; 0x108
   269e0:	ed94 5a01 	vldr	s10, [r4, #4]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
   269e4:	edd6 7a01 	vldr	s15, [r6, #4]
        C_MUL(scratch[1],Fout[m2] , *tw2 );
   269e8:	ed92 7a01 	vldr	s14, [r2, #4]
        C_MUL(scratch[0],Fout[m] , *tw1 );
   269ec:	ed55 1a01 	vldr	s3, [r5, #-4]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
   269f0:	ed11 6a01 	vldr	s12, [r1, #-4]
        C_MUL(scratch[1],Fout[m2] , *tw2 );
   269f4:	ed92 3a00 	vldr	s6, [r2]
        C_MUL(scratch[0],Fout[m] , *tw1 );
   269f8:	ee65 6a41 	vnmul.f32	s13, s10, s2
        C_MUL(scratch[1],Fout[m2] , *tw2 );
   269fc:	ee27 4a62 	vnmul.f32	s8, s14, s5
        C_MUL(scratch[2],Fout[m3] , *tw3 );
   26a00:	ee67 4ae5 	vnmul.f32	s9, s15, s11
        C_MUL(scratch[1],Fout[m2] , *tw2 );
   26a04:	ee27 7a02 	vmul.f32	s14, s14, s4
        C_MUL(scratch[2],Fout[m3] , *tw3 );
   26a08:	ee67 7aa3 	vmul.f32	s15, s15, s7
        C_MUL(scratch[0],Fout[m] , *tw1 );
   26a0c:	ee25 5a20 	vmul.f32	s10, s10, s1
        C_MUL(scratch[1],Fout[m2] , *tw2 );
   26a10:	eea2 7a83 	vfma.f32	s14, s5, s6
        C_MUL(scratch[0],Fout[m] , *tw1 );
   26a14:	eea1 5a21 	vfma.f32	s10, s2, s3
        C_MUL(scratch[2],Fout[m3] , *tw3 );
   26a18:	eee3 4a86 	vfma.f32	s9, s7, s12
   26a1c:	eee5 7a86 	vfma.f32	s15, s11, s12
        C_MUL(scratch[0],Fout[m] , *tw1 );
   26a20:	eee0 6aa1 	vfma.f32	s13, s1, s3
        C_MUL(scratch[1],Fout[m2] , *tw2 );
   26a24:	eea2 4a03 	vfma.f32	s8, s4, s6
        C_SUB( scratch[5] , *Fout, scratch[1] );
   26a28:	ed13 6a02 	vldr	s12, [r3, #-8]
   26a2c:	ed53 5a01 	vldr	s11, [r3, #-4]
        C_ADDTO(*Fout, scratch[1]);
   26a30:	ee36 3a04 	vadd.f32	s6, s12, s8
   26a34:	ee75 3a87 	vadd.f32	s7, s11, s14
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
   26a38:	ee34 2aa6 	vadd.f32	s4, s9, s13
   26a3c:	ee77 2a85 	vadd.f32	s5, s15, s10
        C_SUB( Fout[m2], *Fout, scratch[3] );
   26a40:	ee33 1a42 	vsub.f32	s2, s6, s4
   26a44:	ee73 1ae2 	vsub.f32	s3, s7, s5
        C_ADDTO(*Fout, scratch[1]);
   26a48:	ed03 3a02 	vstr	s6, [r3, #-8]
   26a4c:	ed43 3a01 	vstr	s7, [r3, #-4]
        C_SUB( Fout[m2], *Fout, scratch[3] );
   26a50:	ed82 1a00 	vstr	s2, [r2]
   26a54:	edc2 1a01 	vstr	s3, [r2, #4]
        C_ADDTO( *Fout , scratch[3] );
   26a58:	ed13 3a02 	vldr	s6, [r3, #-8]
   26a5c:	ed53 3a01 	vldr	s7, [r3, #-4]
   26a60:	ee33 3a02 	vadd.f32	s6, s6, s4
   26a64:	ee73 3aa2 	vadd.f32	s7, s7, s5
        C_SUB( scratch[5] , *Fout, scratch[1] );
   26a68:	ee36 6a44 	vsub.f32	s12, s12, s8
   26a6c:	ee35 7ac7 	vsub.f32	s14, s11, s14
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
   26a70:	ee76 6ae4 	vsub.f32	s13, s13, s9
   26a74:	ee75 7a67 	vsub.f32	s15, s10, s15
        C_ADDTO( *Fout , scratch[3] );
   26a78:	ed03 3a02 	vstr	s6, [r3, #-8]
   26a7c:	ed43 3a01 	vstr	s7, [r3, #-4]
        if(st->inverse) {
   26a80:	2800      	cmp	r0, #0
   26a82:	f47f af7d 	bne.w	26980 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x2b0>
            Fout[m].r = scratch[5].r + scratch[4].i;
   26a86:	ee37 5a86 	vadd.f32	s10, s15, s12
            Fout[m].i = scratch[5].i - scratch[4].r;
   26a8a:	ee77 5a66 	vsub.f32	s11, s14, s13
            Fout[m3].r = scratch[5].r - scratch[4].i;
   26a8e:	ee36 6a67 	vsub.f32	s12, s12, s15
            Fout[m3].i = scratch[5].i + scratch[4].r;
   26a92:	ee76 6a87 	vadd.f32	s13, s13, s14
            Fout[m].r = scratch[5].r + scratch[4].i;
   26a96:	ed05 5a01 	vstr	s10, [r5, #-4]
            Fout[m].i = scratch[5].i - scratch[4].r;
   26a9a:	edc4 5a01 	vstr	s11, [r4, #4]
            Fout[m3].r = scratch[5].r - scratch[4].i;
   26a9e:	ed01 6a01 	vstr	s12, [r1, #-4]
            Fout[m3].i = scratch[5].i + scratch[4].r;
   26aa2:	edc6 6a01 	vstr	s13, [r6, #4]
   26aa6:	e77b      	b.n	269a0 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x2d0>
     epi3 = st->twiddles[fstride*m];
   26aa8:	fb09 f30b 	mul.w	r3, r9, fp
        case 3: kf_bfly3(Fout,fstride,st,m); break;
   26aac:	465a      	mov	r2, fp
     epi3 = st->twiddles[fstride*m];
   26aae:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   26ab2:	ed93 aa43 	vldr	s20, [r3, #268]	; 0x10c
         tw1 += fstride;
   26ab6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
         C_MUL(scratch[1],Fout[m] , *tw1);
   26aba:	00d3      	lsls	r3, r2, #3
         C_MUL(scratch[2],Fout[m2] , *tw2);
   26abc:	0112      	lsls	r2, r2, #4
   26abe:	46aa      	mov	sl, r5
         tw1 += fstride;
   26ac0:	9103      	str	r1, [sp, #12]
   26ac2:	3204      	adds	r2, #4
         tw2 += fstride*2;
   26ac4:	ea4f 1109 	mov.w	r1, r9, lsl #4
   26ac8:	1d1e      	adds	r6, r3, #4
   26aca:	f1b9 0f01 	cmp.w	r9, #1
        case 3: kf_bfly3(Fout,fstride,st,m); break;
   26ace:	4658      	mov	r0, fp
     tw1=tw2=st->twiddles;
   26ad0:	4422      	add	r2, r4
   26ad2:	4426      	add	r6, r4
   26ad4:	f104 0508 	add.w	r5, r4, #8
   26ad8:	eb04 0703 	add.w	r7, r4, r3
         tw2 += fstride*2;
   26adc:	9104      	str	r1, [sp, #16]
   26ade:	eef1 aa4a 	vneg.f32	s21, s20
   26ae2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
   26ae6:	46d3      	mov	fp, sl
   26ae8:	f040 80e1 	bne.w	26cae <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x5de>
         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
   26aec:	4690      	mov	r8, r2
   26aee:	4681      	mov	r9, r0
         C_MUL(scratch[1],Fout[m] , *tw1);
   26af0:	edda 4a43 	vldr	s9, [sl, #268]	; 0x10c
   26af4:	edda 3a42 	vldr	s7, [sl, #264]	; 0x108
   26af8:	ed97 8a01 	vldr	s16, [r7, #4]
         C_MUL(scratch[2],Fout[m2] , *tw2);
   26afc:	eddb 5a43 	vldr	s11, [fp, #268]	; 0x10c
   26b00:	ed9b 4a42 	vldr	s8, [fp, #264]	; 0x108
   26b04:	edd4 7a01 	vldr	s15, [r4, #4]
         C_MUL(scratch[1],Fout[m] , *tw1);
   26b08:	ed16 5a01 	vldr	s10, [r6, #-4]
         C_MUL(scratch[2],Fout[m2] , *tw2);
   26b0c:	ed18 6a01 	vldr	s12, [r8, #-4]
         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
   26b10:	f855 0c08 	ldr.w	r0, [r5, #-8]
         C_MUL(scratch[1],Fout[m] , *tw1);
   26b14:	ee28 7a64 	vnmul.f32	s14, s16, s9
   26b18:	ee28 8a23 	vmul.f32	s16, s16, s7
         C_MUL(scratch[2],Fout[m2] , *tw2);
   26b1c:	ee67 8ae5 	vnmul.f32	s17, s15, s11
   26b20:	ee67 6a84 	vmul.f32	s13, s15, s8
         C_MUL(scratch[1],Fout[m] , *tw1);
   26b24:	eef0 7a48 	vmov.f32	s15, s16
   26b28:	eea3 7a85 	vfma.f32	s14, s7, s10
     }while(--k);
   26b2c:	f10a 0a08 	add.w	sl, sl, #8
   26b30:	f10b 0b10 	add.w	fp, fp, #16
         C_MUL(scratch[1],Fout[m] , *tw1);
   26b34:	eee4 7a85 	vfma.f32	s15, s9, s10
     }while(--k);
   26b38:	3508      	adds	r5, #8
   26b3a:	f108 0808 	add.w	r8, r8, #8
         C_MUL(scratch[2],Fout[m2] , *tw2);
   26b3e:	eee4 8a06 	vfma.f32	s17, s8, s12
     }while(--k);
   26b42:	3408      	adds	r4, #8
   26b44:	3608      	adds	r6, #8
         C_MUL(scratch[2],Fout[m2] , *tw2);
   26b46:	eee5 6a86 	vfma.f32	s13, s11, s12
     }while(--k);
   26b4a:	3708      	adds	r7, #8
         C_ADD(scratch[3],scratch[1],scratch[2]);
   26b4c:	ee78 9a87 	vadd.f32	s19, s17, s14
   26b50:	ee36 9aa7 	vadd.f32	s18, s13, s15
         C_SUB(scratch[0],scratch[1],scratch[2]);
   26b54:	ee77 8a68 	vsub.f32	s17, s14, s17
   26b58:	ee37 8ae6 	vsub.f32	s16, s15, s13
         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
   26b5c:	f7f1 ff82 	bl	18a64 <__aeabi_f2d>
   26b60:	ec41 0b1b 	vmov	d11, r0, r1
   26b64:	ee19 0a90 	vmov	r0, s19
   26b68:	f7f1 ff7c 	bl	18a64 <__aeabi_f2d>
   26b6c:	4bb7      	ldr	r3, [pc, #732]	; (26e4c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x77c>)
   26b6e:	2200      	movs	r2, #0
   26b70:	f7f1 ffd0 	bl	18b14 <__aeabi_dmul>
   26b74:	4602      	mov	r2, r0
   26b76:	460b      	mov	r3, r1
   26b78:	ec51 0b1b 	vmov	r0, r1, d11
   26b7c:	f7f1 fe12 	bl	187a4 <__aeabi_dsub>
   26b80:	f7f2 faa0 	bl	190c4 <__aeabi_d2f>
   26b84:	f846 0c0c 	str.w	r0, [r6, #-12]
         Fout[m].i = Fout->i - HALF_OF(scratch[3].i);
   26b88:	f855 0c0c 	ldr.w	r0, [r5, #-12]
   26b8c:	f7f1 ff6a 	bl	18a64 <__aeabi_f2d>
   26b90:	ec41 0b1b 	vmov	d11, r0, r1
   26b94:	ee19 0a10 	vmov	r0, s18
   26b98:	f7f1 ff64 	bl	18a64 <__aeabi_f2d>
   26b9c:	4bab      	ldr	r3, [pc, #684]	; (26e4c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x77c>)
   26b9e:	2200      	movs	r2, #0
   26ba0:	f7f1 ffb8 	bl	18b14 <__aeabi_dmul>
   26ba4:	4602      	mov	r2, r0
   26ba6:	460b      	mov	r3, r1
   26ba8:	ec51 0b1b 	vmov	r0, r1, d11
   26bac:	f7f1 fdfa 	bl	187a4 <__aeabi_dsub>
   26bb0:	f7f2 fa88 	bl	190c4 <__aeabi_d2f>
   26bb4:	f847 0c04 	str.w	r0, [r7, #-4]
         C_ADDTO(*Fout,scratch[3]);
   26bb8:	ed15 7a04 	vldr	s14, [r5, #-16]
   26bbc:	ed55 7a03 	vldr	s15, [r5, #-12]
   26bc0:	ee37 7a29 	vadd.f32	s14, s14, s19
   26bc4:	ee77 7a89 	vadd.f32	s15, s15, s18
   26bc8:	ed05 7a04 	vstr	s14, [r5, #-16]
   26bcc:	ed45 7a03 	vstr	s15, [r5, #-12]
         Fout[m2].r = Fout[m].r + scratch[0].i;
   26bd0:	ed56 7a03 	vldr	s15, [r6, #-12]
   26bd4:	eeea 7a08 	vfma.f32	s15, s20, s16
     }while(--k);
   26bd8:	f1b9 0901 	subs.w	r9, r9, #1
         Fout[m2].r = Fout[m].r + scratch[0].i;
   26bdc:	ed48 7a03 	vstr	s15, [r8, #-12]
         Fout[m2].i = Fout[m].i - scratch[0].r;
   26be0:	ed57 7a01 	vldr	s15, [r7, #-4]
   26be4:	eeea 7aa8 	vfma.f32	s15, s21, s17
   26be8:	ed44 7a01 	vstr	s15, [r4, #-4]
         Fout[m].r -= scratch[0].i;
   26bec:	ed56 7a03 	vldr	s15, [r6, #-12]
   26bf0:	eeea 7a88 	vfma.f32	s15, s21, s16
   26bf4:	ed46 7a03 	vstr	s15, [r6, #-12]
         Fout[m].i += scratch[0].r;
   26bf8:	ed57 7a01 	vldr	s15, [r7, #-4]
   26bfc:	eeea 7a28 	vfma.f32	s15, s20, s17
   26c00:	ed47 7a01 	vstr	s15, [r7, #-4]
     }while(--k);
   26c04:	f47f af74 	bne.w	26af0 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x420>
}
   26c08:	b009      	add	sp, #36	; 0x24
   26c0a:	ecbd 8b08 	vpop	{d8-d11}
   26c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Fout2 = Fout + m;
   26c12:	f1b9 0f01 	cmp.w	r9, #1
   26c16:	eb04 03cb 	add.w	r3, r4, fp, lsl #3
        tw1 += fstride;
   26c1a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
   26c1e:	f040 80d5 	bne.w	26dcc <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x6fc>
   26c22:	3408      	adds	r4, #8
   26c24:	3308      	adds	r3, #8
   26c26:	46aa      	mov	sl, r5
        C_MUL (t,  *Fout2 , *tw1);
   26c28:	edda 5a43 	vldr	s11, [sl, #268]	; 0x10c
   26c2c:	ed53 7a01 	vldr	s15, [r3, #-4]
   26c30:	ed13 6a02 	vldr	s12, [r3, #-8]
   26c34:	ed9a 5a42 	vldr	s10, [sl, #264]	; 0x108
        C_SUB( *Fout2 ,  *Fout , t );
   26c38:	ed54 6a02 	vldr	s13, [r4, #-8]
        C_MUL (t,  *Fout2 , *tw1);
   26c3c:	ee27 7ae5 	vnmul.f32	s14, s15, s11
   26c40:	ee67 7a85 	vmul.f32	s15, s15, s10
   26c44:	eea5 7a06 	vfma.f32	s14, s10, s12
    }while (--m);
   26c48:	3308      	adds	r3, #8
   26c4a:	3408      	adds	r4, #8
        C_MUL (t,  *Fout2 , *tw1);
   26c4c:	eee5 7a86 	vfma.f32	s15, s11, s12
    }while (--m);
   26c50:	f1bb 0b01 	subs.w	fp, fp, #1
   26c54:	f10a 0a08 	add.w	sl, sl, #8
        C_SUB( *Fout2 ,  *Fout , t );
   26c58:	ee76 6ac7 	vsub.f32	s13, s13, s14
   26c5c:	ed43 6a04 	vstr	s13, [r3, #-16]
   26c60:	ed54 6a03 	vldr	s13, [r4, #-12]
   26c64:	ee76 6ae7 	vsub.f32	s13, s13, s15
   26c68:	ed43 6a03 	vstr	s13, [r3, #-12]
        C_ADDTO( *Fout ,  t );
   26c6c:	ed14 6a04 	vldr	s12, [r4, #-16]
   26c70:	ed54 6a03 	vldr	s13, [r4, #-12]
   26c74:	ee36 7a07 	vadd.f32	s14, s12, s14
   26c78:	ee76 7aa7 	vadd.f32	s15, s13, s15
   26c7c:	ed04 7a04 	vstr	s14, [r4, #-16]
   26c80:	ed44 7a03 	vstr	s15, [r4, #-12]
    }while (--m);
   26c84:	d1d0      	bne.n	26c28 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x558>
}
   26c86:	b009      	add	sp, #36	; 0x24
   26c88:	ecbd 8b08 	vpop	{d8-d11}
   26c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            f += fstride*in_stride;
   26c90:	fb09 f303 	mul.w	r3, r9, r3
   26c94:	00df      	lsls	r7, r3, #3
   26c96:	f100 0308 	add.w	r3, r0, #8
            *Fout = *f;
   26c9a:	e896 0003 	ldmia.w	r6, {r0, r1}
        }while(++Fout != Fout_end );
   26c9e:	4543      	cmp	r3, r8
            *Fout = *f;
   26ca0:	e903 0003 	stmdb	r3, {r0, r1}
            f += fstride*in_stride;
   26ca4:	443e      	add	r6, r7
        }while(++Fout != Fout_end );
   26ca6:	f103 0308 	add.w	r3, r3, #8
   26caa:	d1f6      	bne.n	26c9a <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x5ca>
   26cac:	e54a      	b.n	26744 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x74>
         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
   26cae:	4681      	mov	r9, r0
   26cb0:	4690      	mov	r8, r2
         C_MUL(scratch[1],Fout[m] , *tw1);
   26cb2:	ed9a 5a43 	vldr	s10, [sl, #268]	; 0x10c
   26cb6:	edda 3a42 	vldr	s7, [sl, #264]	; 0x108
   26cba:	ed97 8a01 	vldr	s16, [r7, #4]
         C_MUL(scratch[2],Fout[m2] , *tw2);
   26cbe:	ed9b 6a43 	vldr	s12, [fp, #268]	; 0x10c
   26cc2:	ed9b 4a42 	vldr	s8, [fp, #264]	; 0x108
   26cc6:	edd4 7a01 	vldr	s15, [r4, #4]
         C_MUL(scratch[1],Fout[m] , *tw1);
   26cca:	ed56 4a01 	vldr	s9, [r6, #-4]
         C_MUL(scratch[2],Fout[m2] , *tw2);
   26cce:	ed58 5a01 	vldr	s11, [r8, #-4]
     }while(--k);
   26cd2:	9b03      	ldr	r3, [sp, #12]
         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
   26cd4:	f855 0c08 	ldr.w	r0, [r5, #-8]
         C_MUL(scratch[1],Fout[m] , *tw1);
   26cd8:	ee25 7a48 	vnmul.f32	s14, s10, s16
   26cdc:	ee23 8a88 	vmul.f32	s16, s7, s16
         C_MUL(scratch[2],Fout[m2] , *tw2);
   26ce0:	ee66 8a67 	vnmul.f32	s17, s12, s15
   26ce4:	ee64 6a27 	vmul.f32	s13, s8, s15
         C_MUL(scratch[1],Fout[m] , *tw1);
   26ce8:	eef0 7a48 	vmov.f32	s15, s16
   26cec:	eea4 7aa3 	vfma.f32	s14, s9, s7
     }while(--k);
   26cf0:	449a      	add	sl, r3
   26cf2:	9b04      	ldr	r3, [sp, #16]
         C_MUL(scratch[1],Fout[m] , *tw1);
   26cf4:	eee4 7a85 	vfma.f32	s15, s9, s10
     }while(--k);
   26cf8:	449b      	add	fp, r3
   26cfa:	3508      	adds	r5, #8
         C_MUL(scratch[2],Fout[m2] , *tw2);
   26cfc:	eee5 8a84 	vfma.f32	s17, s11, s8
     }while(--k);
   26d00:	f108 0808 	add.w	r8, r8, #8
   26d04:	3408      	adds	r4, #8
         C_MUL(scratch[2],Fout[m2] , *tw2);
   26d06:	eee5 6a86 	vfma.f32	s13, s11, s12
     }while(--k);
   26d0a:	3608      	adds	r6, #8
   26d0c:	3708      	adds	r7, #8
         C_ADD(scratch[3],scratch[1],scratch[2]);
   26d0e:	ee77 9a28 	vadd.f32	s19, s14, s17
   26d12:	ee37 9aa6 	vadd.f32	s18, s15, s13
         C_SUB(scratch[0],scratch[1],scratch[2]);
   26d16:	ee77 8a68 	vsub.f32	s17, s14, s17
   26d1a:	ee37 8ae6 	vsub.f32	s16, s15, s13
         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
   26d1e:	f7f1 fea1 	bl	18a64 <__aeabi_f2d>
   26d22:	ec41 0b1b 	vmov	d11, r0, r1
   26d26:	ee19 0a90 	vmov	r0, s19
   26d2a:	f7f1 fe9b 	bl	18a64 <__aeabi_f2d>
   26d2e:	4b47      	ldr	r3, [pc, #284]	; (26e4c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x77c>)
   26d30:	2200      	movs	r2, #0
   26d32:	f7f1 feef 	bl	18b14 <__aeabi_dmul>
   26d36:	4602      	mov	r2, r0
   26d38:	460b      	mov	r3, r1
   26d3a:	ec51 0b1b 	vmov	r0, r1, d11
   26d3e:	f7f1 fd31 	bl	187a4 <__aeabi_dsub>
   26d42:	f7f2 f9bf 	bl	190c4 <__aeabi_d2f>
   26d46:	f846 0c0c 	str.w	r0, [r6, #-12]
         Fout[m].i = Fout->i - HALF_OF(scratch[3].i);
   26d4a:	f855 0c0c 	ldr.w	r0, [r5, #-12]
   26d4e:	f7f1 fe89 	bl	18a64 <__aeabi_f2d>
   26d52:	ec41 0b1b 	vmov	d11, r0, r1
   26d56:	ee19 0a10 	vmov	r0, s18
   26d5a:	f7f1 fe83 	bl	18a64 <__aeabi_f2d>
   26d5e:	4b3b      	ldr	r3, [pc, #236]	; (26e4c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x77c>)
   26d60:	2200      	movs	r2, #0
   26d62:	f7f1 fed7 	bl	18b14 <__aeabi_dmul>
   26d66:	4602      	mov	r2, r0
   26d68:	460b      	mov	r3, r1
   26d6a:	ec51 0b1b 	vmov	r0, r1, d11
   26d6e:	f7f1 fd19 	bl	187a4 <__aeabi_dsub>
   26d72:	f7f2 f9a7 	bl	190c4 <__aeabi_d2f>
   26d76:	f847 0c04 	str.w	r0, [r7, #-4]
         C_ADDTO(*Fout,scratch[3]);
   26d7a:	ed15 7a04 	vldr	s14, [r5, #-16]
   26d7e:	ed55 7a03 	vldr	s15, [r5, #-12]
   26d82:	ee37 7a29 	vadd.f32	s14, s14, s19
   26d86:	ee77 7a89 	vadd.f32	s15, s15, s18
   26d8a:	ed05 7a04 	vstr	s14, [r5, #-16]
   26d8e:	ed45 7a03 	vstr	s15, [r5, #-12]
         Fout[m2].r = Fout[m].r + scratch[0].i;
   26d92:	ed56 7a03 	vldr	s15, [r6, #-12]
   26d96:	eeea 7a08 	vfma.f32	s15, s20, s16
     }while(--k);
   26d9a:	f1b9 0901 	subs.w	r9, r9, #1
         Fout[m2].r = Fout[m].r + scratch[0].i;
   26d9e:	ed48 7a03 	vstr	s15, [r8, #-12]
         Fout[m2].i = Fout[m].i - scratch[0].r;
   26da2:	ed57 7a01 	vldr	s15, [r7, #-4]
   26da6:	eeea 7aa8 	vfma.f32	s15, s21, s17
   26daa:	ed44 7a01 	vstr	s15, [r4, #-4]
         Fout[m].r -= scratch[0].i;
   26dae:	ed56 7a03 	vldr	s15, [r6, #-12]
   26db2:	eeea 7a88 	vfma.f32	s15, s21, s16
   26db6:	ed46 7a03 	vstr	s15, [r6, #-12]
         Fout[m].i += scratch[0].r;
   26dba:	ed57 7a01 	vldr	s15, [r7, #-4]
   26dbe:	eeea 7a28 	vfma.f32	s15, s20, s17
   26dc2:	ed47 7a01 	vstr	s15, [r7, #-4]
     }while(--k);
   26dc6:	f47f af74 	bne.w	26cb2 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x5e2>
   26dca:	e5b2      	b.n	26932 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x262>
   26dcc:	3308      	adds	r3, #8
   26dce:	3408      	adds	r4, #8
   26dd0:	46aa      	mov	sl, r5
        C_MUL (t,  *Fout2 , *tw1);
   26dd2:	ed9a 6a43 	vldr	s12, [sl, #268]	; 0x10c
   26dd6:	ed13 5a01 	vldr	s10, [r3, #-4]
   26dda:	edda 7a42 	vldr	s15, [sl, #264]	; 0x108
   26dde:	ed53 5a02 	vldr	s11, [r3, #-8]
        C_SUB( *Fout2 ,  *Fout , t );
   26de2:	ed54 6a02 	vldr	s13, [r4, #-8]
        C_MUL (t,  *Fout2 , *tw1);
   26de6:	ee26 7a45 	vnmul.f32	s14, s12, s10
    }while (--m);
   26dea:	f1bb 0b01 	subs.w	fp, fp, #1
        C_MUL (t,  *Fout2 , *tw1);
   26dee:	eea5 7aa7 	vfma.f32	s14, s11, s15
    }while (--m);
   26df2:	4492      	add	sl, r2
   26df4:	f103 0308 	add.w	r3, r3, #8
        C_MUL (t,  *Fout2 , *tw1);
   26df8:	ee67 7a85 	vmul.f32	s15, s15, s10
        C_SUB( *Fout2 ,  *Fout , t );
   26dfc:	ee76 6ac7 	vsub.f32	s13, s13, s14
        C_MUL (t,  *Fout2 , *tw1);
   26e00:	eee5 7a86 	vfma.f32	s15, s11, s12
    }while (--m);
   26e04:	f104 0408 	add.w	r4, r4, #8
        C_SUB( *Fout2 ,  *Fout , t );
   26e08:	ed43 6a04 	vstr	s13, [r3, #-16]
   26e0c:	ed54 6a03 	vldr	s13, [r4, #-12]
   26e10:	ee76 6ae7 	vsub.f32	s13, s13, s15
   26e14:	ed43 6a03 	vstr	s13, [r3, #-12]
        C_ADDTO( *Fout ,  t );
   26e18:	ed14 6a04 	vldr	s12, [r4, #-16]
   26e1c:	ed54 6a03 	vldr	s13, [r4, #-12]
   26e20:	ee36 7a07 	vadd.f32	s14, s12, s14
   26e24:	ee76 7aa7 	vadd.f32	s15, s13, s15
   26e28:	ed04 7a04 	vstr	s14, [r4, #-16]
   26e2c:	ed44 7a03 	vstr	s15, [r4, #-12]
    }while (--m);
   26e30:	d1cf      	bne.n	26dd2 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x702>
   26e32:	e57e      	b.n	26932 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x262>
   26e34:	1863      	adds	r3, r4, r1
   26e36:	1d35      	adds	r5, r6, #4
   26e38:	eb04 0146 	add.w	r1, r4, r6, lsl #1
   26e3c:	4425      	add	r5, r4
   26e3e:	f104 0208 	add.w	r2, r4, #8
        if(st->inverse) {
   26e42:	46d3      	mov	fp, sl
   26e44:	4434      	add	r4, r6
   26e46:	46d1      	mov	r9, sl
   26e48:	440e      	add	r6, r1
   26e4a:	e023      	b.n	26e94 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x7c4>
   26e4c:	3fe00000 	.word	0x3fe00000
            Fout[m].r = scratch[5].r - scratch[4].i;
   26e50:	ee35 5ae7 	vsub.f32	s10, s11, s15
            Fout[m].i = scratch[5].i + scratch[4].r;
   26e54:	ee36 7a86 	vadd.f32	s14, s13, s12
            Fout[m3].r = scratch[5].r + scratch[4].i;
   26e58:	ee75 5aa7 	vadd.f32	s11, s11, s15
            Fout[m3].i = scratch[5].i - scratch[4].r;
   26e5c:	ee76 6ac6 	vsub.f32	s13, s13, s12
            Fout[m].r = scratch[5].r - scratch[4].i;
   26e60:	ed05 5a01 	vstr	s10, [r5, #-4]
            Fout[m].i = scratch[5].i + scratch[4].r;
   26e64:	ed84 7a01 	vstr	s14, [r4, #4]
            Fout[m3].r = scratch[5].r + scratch[4].i;
   26e68:	ed43 5a01 	vstr	s11, [r3, #-4]
            Fout[m3].i = scratch[5].i - scratch[4].r;
   26e6c:	edc6 6a01 	vstr	s13, [r6, #4]
    }while(--k);
   26e70:	3f01      	subs	r7, #1
   26e72:	f102 0208 	add.w	r2, r2, #8
   26e76:	f104 0408 	add.w	r4, r4, #8
   26e7a:	44f2      	add	sl, lr
   26e7c:	f101 0108 	add.w	r1, r1, #8
   26e80:	44c1      	add	r9, r8
   26e82:	f106 0608 	add.w	r6, r6, #8
   26e86:	44e3      	add	fp, ip
   26e88:	f105 0508 	add.w	r5, r5, #8
   26e8c:	f103 0308 	add.w	r3, r3, #8
   26e90:	f43f ad4f 	beq.w	26932 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x262>
        C_MUL(scratch[0],Fout[m] , *tw1 );
   26e94:	edda 4a43 	vldr	s9, [sl, #268]	; 0x10c
        C_MUL(scratch[1],Fout[m2] , *tw2 );
   26e98:	ed99 2a43 	vldr	s4, [r9, #268]	; 0x10c
        C_MUL(scratch[0],Fout[m] , *tw1 );
   26e9c:	edd4 7a01 	vldr	s15, [r4, #4]
        C_MUL(scratch[1],Fout[m2] , *tw2 );
   26ea0:	edd1 6a01 	vldr	s13, [r1, #4]
   26ea4:	ed99 1a42 	vldr	s2, [r9, #264]	; 0x108
        C_MUL(scratch[2],Fout[m3] , *tw3 );
   26ea8:	eddb 2a42 	vldr	s5, [fp, #264]	; 0x108
   26eac:	eddb 3a43 	vldr	s7, [fp, #268]	; 0x10c
   26eb0:	ed96 7a01 	vldr	s14, [r6, #4]
        C_MUL(scratch[0],Fout[m] , *tw1 );
   26eb4:	ed9a 0a42 	vldr	s0, [sl, #264]	; 0x108
   26eb8:	ed55 0a01 	vldr	s1, [r5, #-4]
        C_MUL(scratch[1],Fout[m2] , *tw2 );
   26ebc:	edd1 1a00 	vldr	s3, [r1]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
   26ec0:	ed13 3a01 	vldr	s6, [r3, #-4]
        C_MUL(scratch[0],Fout[m] , *tw1 );
   26ec4:	ee24 6ae7 	vnmul.f32	s12, s9, s15
        C_MUL(scratch[1],Fout[m2] , *tw2 );
   26ec8:	ee62 5a66 	vnmul.f32	s11, s4, s13
        C_MUL(scratch[2],Fout[m3] , *tw3 );
   26ecc:	ee23 5ac7 	vnmul.f32	s10, s7, s14
        C_MUL(scratch[1],Fout[m2] , *tw2 );
   26ed0:	eee1 5a81 	vfma.f32	s11, s3, s2
        C_MUL(scratch[0],Fout[m] , *tw1 );
   26ed4:	eea0 6a80 	vfma.f32	s12, s1, s0
        C_MUL(scratch[1],Fout[m2] , *tw2 );
   26ed8:	ee61 6a26 	vmul.f32	s13, s2, s13
        C_MUL(scratch[2],Fout[m3] , *tw3 );
   26edc:	ee22 7a87 	vmul.f32	s14, s5, s14
        C_MUL(scratch[0],Fout[m] , *tw1 );
   26ee0:	ee60 7a27 	vmul.f32	s15, s0, s15
        C_MUL(scratch[1],Fout[m2] , *tw2 );
   26ee4:	eee1 6a82 	vfma.f32	s13, s3, s4
        C_MUL(scratch[2],Fout[m3] , *tw3 );
   26ee8:	eea3 5a22 	vfma.f32	s10, s6, s5
   26eec:	eea3 7a23 	vfma.f32	s14, s6, s7
        C_MUL(scratch[0],Fout[m] , *tw1 );
   26ef0:	eee0 7aa4 	vfma.f32	s15, s1, s9
   26ef4:	eeb0 4a46 	vmov.f32	s8, s12
        C_MUL(scratch[1],Fout[m2] , *tw2 );
   26ef8:	eef0 4a65 	vmov.f32	s9, s11
        C_SUB( scratch[5] , *Fout, scratch[1] );
   26efc:	ed12 6a01 	vldr	s12, [r2, #-4]
   26f00:	ed52 5a02 	vldr	s11, [r2, #-8]
        C_ADDTO(*Fout, scratch[1]);
   26f04:	ee76 3a86 	vadd.f32	s7, s13, s12
   26f08:	ee34 3aa5 	vadd.f32	s6, s9, s11
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
   26f0c:	ee77 2a87 	vadd.f32	s5, s15, s14
   26f10:	ee34 2a05 	vadd.f32	s4, s8, s10
        C_SUB( Fout[m2], *Fout, scratch[3] );
   26f14:	ee73 1ae2 	vsub.f32	s3, s7, s5
   26f18:	ee33 1a42 	vsub.f32	s2, s6, s4
        C_ADDTO(*Fout, scratch[1]);
   26f1c:	ed02 3a02 	vstr	s6, [r2, #-8]
   26f20:	ed42 3a01 	vstr	s7, [r2, #-4]
        C_SUB( Fout[m2], *Fout, scratch[3] );
   26f24:	ed81 1a00 	vstr	s2, [r1]
   26f28:	edc1 1a01 	vstr	s3, [r1, #4]
        C_ADDTO( *Fout , scratch[3] );
   26f2c:	ed12 3a02 	vldr	s6, [r2, #-8]
   26f30:	ed52 3a01 	vldr	s7, [r2, #-4]
   26f34:	ee33 3a02 	vadd.f32	s6, s6, s4
   26f38:	ee73 3aa2 	vadd.f32	s7, s7, s5
        C_SUB( scratch[5] , *Fout, scratch[1] );
   26f3c:	ee76 6a66 	vsub.f32	s13, s12, s13
   26f40:	ee75 5ae4 	vsub.f32	s11, s11, s9
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
   26f44:	ee34 6a45 	vsub.f32	s12, s8, s10
   26f48:	ee77 7ac7 	vsub.f32	s15, s15, s14
        C_ADDTO( *Fout , scratch[3] );
   26f4c:	ed02 3a02 	vstr	s6, [r2, #-8]
   26f50:	ed42 3a01 	vstr	s7, [r2, #-4]
        if(st->inverse) {
   26f54:	2800      	cmp	r0, #0
   26f56:	f47f af7b 	bne.w	26e50 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x780>
            Fout[m].r = scratch[5].r + scratch[4].i;
   26f5a:	ee35 5aa7 	vadd.f32	s10, s11, s15
            Fout[m].i = scratch[5].i - scratch[4].r;
   26f5e:	ee36 7ac6 	vsub.f32	s14, s13, s12
            Fout[m3].r = scratch[5].r - scratch[4].i;
   26f62:	ee75 5ae7 	vsub.f32	s11, s11, s15
            Fout[m3].i = scratch[5].i + scratch[4].r;
   26f66:	ee76 6a86 	vadd.f32	s13, s13, s12
            Fout[m].r = scratch[5].r + scratch[4].i;
   26f6a:	ed05 5a01 	vstr	s10, [r5, #-4]
            Fout[m].i = scratch[5].i - scratch[4].r;
   26f6e:	ed84 7a01 	vstr	s14, [r4, #4]
            Fout[m3].r = scratch[5].r - scratch[4].i;
   26f72:	ed43 5a01 	vstr	s11, [r3, #-4]
            Fout[m3].i = scratch[5].i + scratch[4].r;
   26f76:	edc6 6a01 	vstr	s13, [r6, #4]
   26f7a:	e779      	b.n	26e70 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x7a0>
   26f7c:	ea4f 1509 	mov.w	r5, r9, lsl #4
   26f80:	eb09 0e49 	add.w	lr, r9, r9, lsl #1
   26f84:	ea4f 08c9 	mov.w	r8, r9, lsl #3
   26f88:	9504      	str	r5, [sp, #16]
   26f8a:	3408      	adds	r4, #8
   26f8c:	3108      	adds	r1, #8
   26f8e:	3208      	adds	r2, #8
   26f90:	3008      	adds	r0, #8
   26f92:	3308      	adds	r3, #8
   26f94:	eef1 1a42 	vneg.f32	s3, s4
   26f98:	ea4f 0ece 	mov.w	lr, lr, lsl #3
   26f9c:	ea4f 1949 	mov.w	r9, r9, lsl #5
    for ( u=0; u<m; ++u ) {
   26fa0:	4657      	mov	r7, sl
   26fa2:	4655      	mov	r5, sl
   26fa4:	f04f 0c00 	mov.w	ip, #0
   26fa8:	f8cd a00c 	str.w	sl, [sp, #12]
        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
   26fac:	edda 0a43 	vldr	s1, [sl, #268]	; 0x10c
   26fb0:	ed9a aa42 	vldr	s20, [sl, #264]	; 0x108
   26fb4:	ed51 2a01 	vldr	s5, [r1, #-4]
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
   26fb8:	ed97 8a42 	vldr	s16, [r7, #264]	; 0x108
   26fbc:	edd7 6a43 	vldr	s13, [r7, #268]	; 0x10c
        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
   26fc0:	ed11 9a02 	vldr	s18, [r1, #-8]
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
   26fc4:	ed53 4a01 	vldr	s9, [r3, #-4]
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
   26fc8:	ed95 1a43 	vldr	s2, [r5, #268]	; 0x10c
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
   26fcc:	ed13 6a02 	vldr	s12, [r3, #-8]
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
   26fd0:	ed12 5a01 	vldr	s10, [r2, #-4]
   26fd4:	edd5 9a42 	vldr	s19, [r5, #264]	; 0x108
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
   26fd8:	9e03      	ldr	r6, [sp, #12]
   26fda:	ed50 5a01 	vldr	s11, [r0, #-4]
   26fde:	ed96 7a43 	vldr	s14, [r6, #268]	; 0x10c
   26fe2:	edd6 8a42 	vldr	s17, [r6, #264]	; 0x108
        scratch[0] = *Fout0;
   26fe6:	ed54 7a02 	vldr	s15, [r4, #-8]
    for ( u=0; u<m; ++u ) {
   26fea:	9e04      	ldr	r6, [sp, #16]
        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
   26fec:	ee20 0ae2 	vnmul.f32	s0, s1, s5
   26ff0:	ee6a 2a22 	vmul.f32	s5, s20, s5
   26ff4:	eea9 0a0a 	vfma.f32	s0, s18, s20
    for ( u=0; u<m; ++u ) {
   26ff8:	4435      	add	r5, r6
   26ffa:	9e03      	ldr	r6, [sp, #12]
        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
   26ffc:	eee9 2a20 	vfma.f32	s5, s18, s1
    for ( u=0; u<m; ++u ) {
   27000:	f10c 0c01 	add.w	ip, ip, #1
   27004:	4476      	add	r6, lr
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
   27006:	ee66 0ae4 	vnmul.f32	s1, s13, s9
   2700a:	ee68 4a24 	vmul.f32	s9, s16, s9
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
   2700e:	ed12 9a02 	vldr	s18, [r2, #-8]
    for ( u=0; u<m; ++u ) {
   27012:	9603      	str	r6, [sp, #12]
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
   27014:	eee6 4a26 	vfma.f32	s9, s12, s13
    for ( u=0; u<m; ++u ) {
   27018:	45e3      	cmp	fp, ip
   2701a:	44c2      	add	sl, r8
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
   2701c:	ee61 6a45 	vnmul.f32	s13, s2, s10
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
   27020:	eee6 0a08 	vfma.f32	s1, s12, s16
    for ( u=0; u<m; ++u ) {
   27024:	444f      	add	r7, r9
   27026:	f104 0408 	add.w	r4, r4, #8
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
   2702a:	eee9 6a29 	vfma.f32	s13, s18, s19
    for ( u=0; u<m; ++u ) {
   2702e:	f101 0108 	add.w	r1, r1, #8
   27032:	f103 0308 	add.w	r3, r3, #8
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
   27036:	ed10 8a02 	vldr	s16, [r0, #-8]
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
   2703a:	eeb0 6a66 	vmov.f32	s12, s13
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
   2703e:	ee67 6a65 	vnmul.f32	s13, s14, s11
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
   27042:	ee29 5a85 	vmul.f32	s10, s19, s10
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
   27046:	eee8 6a28 	vfma.f32	s13, s16, s17
    for ( u=0; u<m; ++u ) {
   2704a:	f102 0208 	add.w	r2, r2, #8
   2704e:	f100 0008 	add.w	r0, r0, #8
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
   27052:	ee68 5aa5 	vmul.f32	s11, s17, s11
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
   27056:	eea9 5a01 	vfma.f32	s10, s18, s2
        C_ADD( scratch[7],scratch[1],scratch[4]);
   2705a:	ee70 8a20 	vadd.f32	s17, s0, s1
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
   2705e:	eee8 5a07 	vfma.f32	s11, s16, s14
        C_SUB( scratch[9],scratch[2],scratch[3]);
   27062:	ee36 8a66 	vsub.f32	s16, s12, s13
        C_ADD( scratch[8],scratch[2],scratch[3]);
   27066:	ee76 6a26 	vadd.f32	s13, s12, s13
   2706a:	ee35 1a25 	vadd.f32	s2, s10, s11
        Fout0->r += scratch[7].r + scratch[8].r;
   2706e:	ee38 6aa6 	vadd.f32	s12, s17, s13
        C_SUB( scratch[10],scratch[1],scratch[4]);
   27072:	ee32 9ae4 	vsub.f32	s18, s5, s9
        Fout0->r += scratch[7].r + scratch[8].r;
   27076:	ee36 6a27 	vadd.f32	s12, s12, s15
        C_ADD( scratch[7],scratch[1],scratch[4]);
   2707a:	ee72 2aa4 	vadd.f32	s5, s5, s9
        scratch[0] = *Fout0;
   2707e:	ed14 7a03 	vldr	s14, [r4, #-12]
        Fout0->r += scratch[7].r + scratch[8].r;
   27082:	ed04 6a04 	vstr	s12, [r4, #-16]
        Fout0->i += scratch[7].i + scratch[8].i;
   27086:	ee32 6a81 	vadd.f32	s12, s5, s2
        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
   2708a:	eef0 4a67 	vmov.f32	s9, s15
        Fout0->i += scratch[7].i + scratch[8].i;
   2708e:	ee36 6a07 	vadd.f32	s12, s12, s14
        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
   27092:	eee4 4a28 	vfma.f32	s9, s8, s17
        Fout0->i += scratch[7].i + scratch[8].i;
   27096:	ed04 6a03 	vstr	s12, [r4, #-12]
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
   2709a:	eeb0 6a47 	vmov.f32	s12, s14
   2709e:	eea3 6aa2 	vfma.f32	s12, s7, s5
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
   270a2:	eea4 7a22 	vfma.f32	s14, s8, s5
        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
   270a6:	eee3 7aa8 	vfma.f32	s15, s7, s17
        C_SUB( scratch[9],scratch[2],scratch[3]);
   270aa:	ee75 5a65 	vsub.f32	s11, s10, s11
        C_SUB( scratch[10],scratch[1],scratch[4]);
   270ae:	ee30 0a60 	vsub.f32	s0, s0, s1
        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
   270b2:	eee3 4aa6 	vfma.f32	s9, s7, s13
        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
   270b6:	eee4 7a26 	vfma.f32	s15, s8, s13
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
   270ba:	eea3 7a81 	vfma.f32	s14, s7, s2
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
   270be:	eea4 6a01 	vfma.f32	s12, s8, s2
        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
   270c2:	ee63 0a25 	vmul.f32	s1, s6, s11
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
   270c6:	ee28 1a43 	vnmul.f32	s2, s16, s6
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
   270ca:	ee68 6a42 	vnmul.f32	s13, s16, s4
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
   270ce:	ee69 2a43 	vnmul.f32	s5, s18, s6
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
   270d2:	eee3 6a00 	vfma.f32	s13, s6, s0
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
   270d6:	eee2 2a25 	vfma.f32	s5, s4, s11
        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
   270da:	eee2 0a09 	vfma.f32	s1, s4, s18
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
   270de:	eea1 1a80 	vfma.f32	s2, s3, s0
        C_SUB(*Fout1,scratch[5],scratch[6]);
   270e2:	ee34 8ae0 	vsub.f32	s16, s9, s1
   270e6:	ee37 0a41 	vsub.f32	s0, s14, s2
        C_ADD(*Fout2,scratch[11],scratch[12]);
   270ea:	ee37 5aa2 	vadd.f32	s10, s15, s5
   270ee:	ee76 5a26 	vadd.f32	s11, s12, s13
        C_ADD(*Fout4,scratch[5],scratch[6]);
   270f2:	ee74 4aa0 	vadd.f32	s9, s9, s1
   270f6:	ee37 7a01 	vadd.f32	s14, s14, s2
        C_SUB(*Fout3,scratch[11],scratch[12]);
   270fa:	ee77 7ae2 	vsub.f32	s15, s15, s5
   270fe:	ee76 6a66 	vsub.f32	s13, s12, s13
        C_SUB(*Fout1,scratch[5],scratch[6]);
   27102:	ed01 8a04 	vstr	s16, [r1, #-16]
   27106:	ed01 0a03 	vstr	s0, [r1, #-12]
        C_ADD(*Fout4,scratch[5],scratch[6]);
   2710a:	ed43 4a04 	vstr	s9, [r3, #-16]
   2710e:	ed03 7a03 	vstr	s14, [r3, #-12]
        C_ADD(*Fout2,scratch[11],scratch[12]);
   27112:	ed02 5a04 	vstr	s10, [r2, #-16]
   27116:	ed42 5a03 	vstr	s11, [r2, #-12]
        C_SUB(*Fout3,scratch[11],scratch[12]);
   2711a:	ed40 7a04 	vstr	s15, [r0, #-16]
   2711e:	ed40 6a03 	vstr	s13, [r0, #-12]
    for ( u=0; u<m; ++u ) {
   27122:	f47f af43 	bne.w	26fac <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x8dc>
   27126:	e404      	b.n	26932 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x262>
        default: kf_bfly_generic(Fout,fstride,st,m,p); break;
   27128:	9b04      	ldr	r3, [sp, #16]
   2712a:	931a      	str	r3, [sp, #104]	; 0x68
   2712c:	462a      	mov	r2, r5
   2712e:	465b      	mov	r3, fp
   27130:	4649      	mov	r1, r9
   27132:	4620      	mov	r0, r4
}
   27134:	b009      	add	sp, #36	; 0x24
   27136:	ecbd 8b08 	vpop	{d8-d11}
   2713a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        default: kf_bfly_generic(Fout,fstride,st,m,p); break;
   2713e:	f7ff b9e5 	b.w	2650c <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>
   27142:	bf00      	nop

00027144 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state.constprop.0>:
void kf_work(
   27144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27148:	469c      	mov	ip, r3
   2714a:	ed2d 8b08 	vpush	{d8-d11}
   2714e:	4613      	mov	r3, r2
    const int m=*factors++; /* stage's fft length/p */
   27150:	e9dc 2600 	ldrd	r2, r6, [ip]
void kf_work(
   27154:	b087      	sub	sp, #28
    const kiss_fft_cpx * Fout_end = Fout + p*m;
   27156:	fb06 f902 	mul.w	r9, r6, r2
    if (m==1) {
   2715a:	2e01      	cmp	r6, #1
void kf_work(
   2715c:	9d18      	ldr	r5, [sp, #96]	; 0x60
   2715e:	4604      	mov	r4, r0
   27160:	460f      	mov	r7, r1
    const kiss_fft_cpx * Fout_end = Fout + p*m;
   27162:	eb00 09c9 	add.w	r9, r0, r9, lsl #3
    if (m==1) {
   27166:	f000 8297 	beq.w	27698 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state.constprop.0+0x554>
    const int m=*factors++; /* stage's fft length/p */
   2716a:	f10c 0108 	add.w	r1, ip, #8
        }while( (Fout += m) != Fout_end );
   2716e:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
   27172:	9604      	str	r6, [sp, #16]
            f += fstride*in_stride;
   27174:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
   27178:	4680      	mov	r8, r0
   2717a:	460e      	mov	r6, r1
   2717c:	9005      	str	r0, [sp, #20]
   2717e:	4614      	mov	r4, r2
   27180:	4639      	mov	r1, r7
   27182:	4640      	mov	r0, r8
   27184:	e9cd 6500 	strd	r6, r5, [sp]
        }while( (Fout += m) != Fout_end );
   27188:	44d0      	add	r8, sl
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
   2718a:	4622      	mov	r2, r4
   2718c:	9303      	str	r3, [sp, #12]
   2718e:	f7ff fa9f 	bl	266d0 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
        }while( (Fout += m) != Fout_end );
   27192:	45c1      	cmp	r9, r8
   27194:	9b03      	ldr	r3, [sp, #12]
            f += fstride*in_stride;
   27196:	445f      	add	r7, fp
        }while( (Fout += m) != Fout_end );
   27198:	d1f2      	bne.n	27180 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state.constprop.0+0x3c>
   2719a:	4622      	mov	r2, r4
   2719c:	e9dd 6404 	ldrd	r6, r4, [sp, #16]
    switch (p) {
   271a0:	1e93      	subs	r3, r2, #2
   271a2:	2b03      	cmp	r3, #3
   271a4:	f200 8293 	bhi.w	276ce <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state.constprop.0+0x58a>
   271a8:	e8df f013 	tbh	[pc, r3, lsl #1]
   271ac:	0194023d 	.word	0x0194023d
   271b0:	000400ed 	.word	0x000400ed
    kiss_fft_cpx * twiddles = st->twiddles;
   271b4:	f505 7384 	add.w	r3, r5, #264	; 0x108
    ya = twiddles[fstride*m];
   271b8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    yb = twiddles[fstride*2*m];
   271bc:	eb03 02c6 	add.w	r2, r3, r6, lsl #3
   271c0:	edd2 2a00 	vldr	s5, [r2]
   271c4:	ed92 2a01 	vldr	s4, [r2, #4]
    ya = twiddles[fstride*m];
   271c8:	ed93 3a00 	vldr	s6, [r3]
   271cc:	edd3 1a01 	vldr	s3, [r3, #4]
    Fout2=Fout0+2*m;
   271d0:	eb04 1206 	add.w	r2, r4, r6, lsl #4
    for ( u=0; u<m; ++u ) {
   271d4:	2e00      	cmp	r6, #0
    ya = twiddles[fstride*m];
   271d6:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
    Fout1=Fout0+m;
   271da:	eb04 07c6 	add.w	r7, r4, r6, lsl #3
    Fout3=Fout0+3*m;
   271de:	eb02 01c6 	add.w	r1, r2, r6, lsl #3
    Fout4=Fout0+4*m;
   271e2:	eb02 1306 	add.w	r3, r2, r6, lsl #4
    for ( u=0; u<m; ++u ) {
   271e6:	f340 80c9 	ble.w	2737c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state.constprop.0+0x238>
   271ea:	f10e 0e08 	add.w	lr, lr, #8
   271ee:	f107 0608 	add.w	r6, r7, #8
   271f2:	449e      	add	lr, r3
   271f4:	3408      	adds	r4, #8
   271f6:	3208      	adds	r2, #8
   271f8:	3108      	adds	r1, #8
   271fa:	3308      	adds	r3, #8
   271fc:	eeb1 1a61 	vneg.f32	s2, s3
   27200:	46ac      	mov	ip, r5
   27202:	462f      	mov	r7, r5
   27204:	4628      	mov	r0, r5
        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
   27206:	ed95 4a42 	vldr	s8, [r5, #264]	; 0x108
   2720a:	ed95 0a43 	vldr	s0, [r5, #268]	; 0x10c
   2720e:	ed56 4a01 	vldr	s9, [r6, #-4]
   27212:	ed16 aa02 	vldr	s20, [r6, #-8]
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
   27216:	eddc 0a42 	vldr	s1, [ip, #264]	; 0x108
   2721a:	ed13 7a01 	vldr	s14, [r3, #-4]
   2721e:	ed9c 5a43 	vldr	s10, [ip, #268]	; 0x10c
   27222:	ed53 3a02 	vldr	s7, [r3, #-8]
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
   27226:	edd0 5a42 	vldr	s11, [r0, #264]	; 0x108
   2722a:	ed90 9a43 	vldr	s18, [r0, #268]	; 0x10c
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
   2722e:	ed97 8a42 	vldr	s16, [r7, #264]	; 0x108
   27232:	edd7 6a43 	vldr	s13, [r7, #268]	; 0x10c
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
   27236:	ed52 7a01 	vldr	s15, [r2, #-4]
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
   2723a:	ed11 6a01 	vldr	s12, [r1, #-4]
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
   2723e:	ed52 9a02 	vldr	s19, [r2, #-8]
        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
   27242:	ee60 8a64 	vnmul.f32	s17, s0, s9
   27246:	ee64 4a24 	vmul.f32	s9, s8, s9
   2724a:	eeea 8a04 	vfma.f32	s17, s20, s8
    for ( u=0; u<m; ++u ) {
   2724e:	3308      	adds	r3, #8
   27250:	3408      	adds	r4, #8
        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
   27252:	eeea 4a00 	vfma.f32	s9, s20, s0
    for ( u=0; u<m; ++u ) {
   27256:	3608      	adds	r6, #8
   27258:	3208      	adds	r2, #8
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
   2725a:	ee25 ba47 	vnmul.f32	s22, s10, s14
        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
   2725e:	eeb0 4a64 	vmov.f32	s8, s9
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
   27262:	ee60 4a87 	vmul.f32	s9, s1, s14
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
   27266:	ed11 0a02 	vldr	s0, [r1, #-8]
        scratch[0] = *Fout0;
   2726a:	ed14 aa04 	vldr	s20, [r4, #-16]
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
   2726e:	eee3 4a85 	vfma.f32	s9, s7, s10
    for ( u=0; u<m; ++u ) {
   27272:	3108      	adds	r1, #8
   27274:	3508      	adds	r5, #8
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
   27276:	eea3 baa0 	vfma.f32	s22, s7, s1
    for ( u=0; u<m; ++u ) {
   2727a:	3010      	adds	r0, #16
   2727c:	3718      	adds	r7, #24
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
   2727e:	ee29 5a67 	vnmul.f32	s10, s18, s15
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
   27282:	ee66 3ac6 	vnmul.f32	s7, s13, s12
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
   27286:	ee65 7aa7 	vmul.f32	s15, s11, s15
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
   2728a:	ee28 6a06 	vmul.f32	s12, s16, s12
   2728e:	eee0 3a08 	vfma.f32	s7, s0, s16
    for ( u=0; u<m; ++u ) {
   27292:	f10c 0c20 	add.w	ip, ip, #32
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
   27296:	eea0 6a26 	vfma.f32	s12, s0, s13
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
   2729a:	eea9 5aa5 	vfma.f32	s10, s19, s11
   2729e:	eee9 7a89 	vfma.f32	s15, s19, s18
        scratch[0] = *Fout0;
   272a2:	ed54 9a03 	vldr	s19, [r4, #-12]
        C_ADD( scratch[7],scratch[1],scratch[4]);
   272a6:	ee34 9a24 	vadd.f32	s18, s8, s9
   272aa:	ee38 7a8b 	vadd.f32	s14, s17, s22
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
   272ae:	eef0 ba69 	vmov.f32	s23, s19
   272b2:	eee3 ba09 	vfma.f32	s23, s6, s18
        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
   272b6:	eeb0 8a4a 	vmov.f32	s16, s20
        C_SUB( scratch[9],scratch[2],scratch[3]);
   272ba:	ee77 aac6 	vsub.f32	s21, s15, s12
   272be:	ee75 6a63 	vsub.f32	s13, s10, s7
        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
   272c2:	eea3 8a07 	vfma.f32	s16, s6, s14
        C_SUB( scratch[10],scratch[1],scratch[4]);
   272c6:	ee74 4a64 	vsub.f32	s9, s8, s9
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
   272ca:	eef0 0a69 	vmov.f32	s1, s19
        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
   272ce:	eeb0 0a4a 	vmov.f32	s0, s20
        C_ADD( scratch[8],scratch[2],scratch[3]);
   272d2:	ee35 5a23 	vadd.f32	s10, s10, s7
   272d6:	ee77 7a86 	vadd.f32	s15, s15, s12
        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
   272da:	eea2 0a87 	vfma.f32	s0, s5, s14
        C_SUB( scratch[10],scratch[1],scratch[4]);
   272de:	ee38 6acb 	vsub.f32	s12, s17, s22
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
   272e2:	eee2 0a89 	vfma.f32	s1, s5, s18
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
   272e6:	ee66 3ac2 	vnmul.f32	s7, s13, s4
        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
   272ea:	ee62 8a2a 	vmul.f32	s17, s4, s21
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
   272ee:	ee24 4ac2 	vnmul.f32	s8, s9, s4
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
   272f2:	eef0 5a6b 	vmov.f32	s11, s23
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
   272f6:	eee1 3a06 	vfma.f32	s7, s2, s12
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
   272fa:	eee2 5aa7 	vfma.f32	s11, s5, s15
        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
   272fe:	eee1 8aa4 	vfma.f32	s17, s3, s9
        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
   27302:	eea2 8a85 	vfma.f32	s16, s5, s10
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
   27306:	ee66 6ae1 	vnmul.f32	s13, s13, s3
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
   2730a:	eef0 4a44 	vmov.f32	s9, s8
        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
   2730e:	eea3 0a05 	vfma.f32	s0, s6, s10
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
   27312:	eee3 0a27 	vfma.f32	s1, s6, s15
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
   27316:	eee2 6a06 	vfma.f32	s13, s4, s12
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
   2731a:	eee1 4aaa 	vfma.f32	s9, s3, s21
        Fout0->r += scratch[7].r + scratch[8].r;
   2731e:	ee37 7a05 	vadd.f32	s14, s14, s10
        Fout0->i += scratch[7].i + scratch[8].i;
   27322:	ee79 7a27 	vadd.f32	s15, s18, s15
        Fout0->r += scratch[7].r + scratch[8].r;
   27326:	ee37 7a0a 	vadd.f32	s14, s14, s20
        C_SUB(*Fout1,scratch[5],scratch[6]);
   2732a:	ee35 9ae3 	vsub.f32	s18, s11, s7
        Fout0->i += scratch[7].i + scratch[8].i;
   2732e:	ee77 7aa9 	vadd.f32	s15, s15, s19
        C_ADD(*Fout4,scratch[5],scratch[6]);
   27332:	ee75 5aa3 	vadd.f32	s11, s11, s7
        C_SUB(*Fout1,scratch[5],scratch[6]);
   27336:	ee78 9a68 	vsub.f32	s19, s16, s17
        C_ADD(*Fout4,scratch[5],scratch[6]);
   2733a:	ee38 5a28 	vadd.f32	s10, s16, s17
        Fout0->r += scratch[7].r + scratch[8].r;
   2733e:	ed04 7a04 	vstr	s14, [r4, #-16]
        Fout0->i += scratch[7].i + scratch[8].i;
   27342:	ed44 7a03 	vstr	s15, [r4, #-12]
        C_ADD(*Fout2,scratch[11],scratch[12]);
   27346:	ee30 4aa6 	vadd.f32	s8, s1, s13
   2734a:	ee70 3a24 	vadd.f32	s7, s0, s9
        C_SUB(*Fout3,scratch[11],scratch[12]);
   2734e:	ee30 6a64 	vsub.f32	s12, s0, s9
   27352:	ee70 6ae6 	vsub.f32	s13, s1, s13
        C_SUB(*Fout1,scratch[5],scratch[6]);
   27356:	ed46 9a04 	vstr	s19, [r6, #-16]
   2735a:	ed06 9a03 	vstr	s18, [r6, #-12]
        C_ADD(*Fout4,scratch[5],scratch[6]);
   2735e:	ed03 5a04 	vstr	s10, [r3, #-16]
   27362:	ed43 5a03 	vstr	s11, [r3, #-12]
    for ( u=0; u<m; ++u ) {
   27366:	459e      	cmp	lr, r3
        C_ADD(*Fout2,scratch[11],scratch[12]);
   27368:	ed42 3a04 	vstr	s7, [r2, #-16]
   2736c:	ed02 4a03 	vstr	s8, [r2, #-12]
        C_SUB(*Fout3,scratch[11],scratch[12]);
   27370:	ed01 6a04 	vstr	s12, [r1, #-16]
   27374:	ed41 6a03 	vstr	s13, [r1, #-12]
    for ( u=0; u<m; ++u ) {
   27378:	f47f af45 	bne.w	27206 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state.constprop.0+0xc2>
}
   2737c:	b007      	add	sp, #28
   2737e:	ecbd 8b08 	vpop	{d8-d11}
   27382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tw3 = tw2 = tw1 = st->twiddles;
   27386:	eb04 1206 	add.w	r2, r4, r6, lsl #4
   2738a:	eb04 07c6 	add.w	r7, r4, r6, lsl #3
        if(st->inverse) {
   2738e:	f8d5 e004 	ldr.w	lr, [r5, #4]
   27392:	f505 7c88 	add.w	ip, r5, #272	; 0x110
   27396:	f505 708c 	add.w	r0, r5, #280	; 0x118
   2739a:	f104 0308 	add.w	r3, r4, #8
   2739e:	3704      	adds	r7, #4
   273a0:	f505 7590 	add.w	r5, r5, #288	; 0x120
   273a4:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
   273a8:	eb02 01c6 	add.w	r1, r2, r6, lsl #3
   273ac:	e021      	b.n	273f2 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state.constprop.0+0x2ae>
            Fout[m].r = scratch[5].r - scratch[4].i;
   273ae:	ee37 5a66 	vsub.f32	s10, s14, s13
            Fout[m].i = scratch[5].i + scratch[4].r;
   273b2:	ee77 5a86 	vadd.f32	s11, s15, s12
            Fout[m3].r = scratch[5].r + scratch[4].i;
   273b6:	ee37 7a26 	vadd.f32	s14, s14, s13
            Fout[m3].i = scratch[5].i - scratch[4].r;
   273ba:	ee77 7ac6 	vsub.f32	s15, s15, s12
            Fout[m].r = scratch[5].r - scratch[4].i;
   273be:	ed07 5a01 	vstr	s10, [r7, #-4]
            Fout[m].i = scratch[5].i + scratch[4].r;
   273c2:	edc4 5a01 	vstr	s11, [r4, #4]
            Fout[m3].r = scratch[5].r + scratch[4].i;
   273c6:	ed81 7a00 	vstr	s14, [r1]
            Fout[m3].i = scratch[5].i - scratch[4].r;
   273ca:	edc1 7a01 	vstr	s15, [r1, #4]
    }while(--k);
   273ce:	3e01      	subs	r6, #1
   273d0:	f10c 0c08 	add.w	ip, ip, #8
   273d4:	f100 0010 	add.w	r0, r0, #16
   273d8:	f105 0518 	add.w	r5, r5, #24
   273dc:	f103 0308 	add.w	r3, r3, #8
   273e0:	f104 0408 	add.w	r4, r4, #8
   273e4:	f102 0208 	add.w	r2, r2, #8
   273e8:	f101 0108 	add.w	r1, r1, #8
   273ec:	f107 0708 	add.w	r7, r7, #8
   273f0:	d0c4      	beq.n	2737c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state.constprop.0+0x238>
        C_MUL(scratch[0],Fout[m] , *tw1 );
   273f2:	ed1c 1a01 	vldr	s2, [ip, #-4]
        C_MUL(scratch[1],Fout[m2] , *tw2 );
   273f6:	ed50 1a04 	vldr	s3, [r0, #-16]
   273fa:	ed50 2a03 	vldr	s5, [r0, #-12]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
   273fe:	ed15 3a06 	vldr	s6, [r5, #-24]	; 0xffffffe8
   27402:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
        C_MUL(scratch[0],Fout[m] , *tw1 );
   27406:	ed1c 0a02 	vldr	s0, [ip, #-8]
   2740a:	edd4 5a01 	vldr	s11, [r4, #4]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
   2740e:	edd1 6a01 	vldr	s13, [r1, #4]
        C_MUL(scratch[1],Fout[m2] , *tw2 );
   27412:	ed92 6a01 	vldr	s12, [r2, #4]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
   27416:	edd1 3a00 	vldr	s7, [r1]
        C_MUL(scratch[0],Fout[m] , *tw1 );
   2741a:	ed57 0a01 	vldr	s1, [r7, #-4]
        C_MUL(scratch[1],Fout[m2] , *tw2 );
   2741e:	ed92 2a00 	vldr	s4, [r2]
        C_SUB( scratch[5] , *Fout, scratch[1] );
   27422:	ed53 7a01 	vldr	s15, [r3, #-4]
        C_MUL(scratch[0],Fout[m] , *tw1 );
   27426:	ee21 4a65 	vnmul.f32	s8, s2, s11
        C_MUL(scratch[1],Fout[m2] , *tw2 );
   2742a:	ee62 4ac6 	vnmul.f32	s9, s5, s12
        C_MUL(scratch[2],Fout[m3] , *tw3 );
   2742e:	ee27 5a66 	vnmul.f32	s10, s14, s13
        C_MUL(scratch[1],Fout[m2] , *tw2 );
   27432:	ee21 6a86 	vmul.f32	s12, s3, s12
        C_MUL(scratch[2],Fout[m3] , *tw3 );
   27436:	ee63 6a26 	vmul.f32	s13, s6, s13
        C_MUL(scratch[0],Fout[m] , *tw1 );
   2743a:	ee60 5a25 	vmul.f32	s11, s0, s11
        C_MUL(scratch[1],Fout[m2] , *tw2 );
   2743e:	eea2 6a22 	vfma.f32	s12, s4, s5
   27442:	eee2 4a21 	vfma.f32	s9, s4, s3
        C_MUL(scratch[2],Fout[m3] , *tw3 );
   27446:	eea3 5a83 	vfma.f32	s10, s7, s6
   2744a:	eee3 6a87 	vfma.f32	s13, s7, s14
        C_MUL(scratch[0],Fout[m] , *tw1 );
   2744e:	eee0 5a81 	vfma.f32	s11, s1, s2
   27452:	eea0 4a80 	vfma.f32	s8, s1, s0
        C_SUB( scratch[5] , *Fout, scratch[1] );
   27456:	ed13 7a02 	vldr	s14, [r3, #-8]
        C_ADDTO(*Fout, scratch[1]);
   2745a:	ee76 3a27 	vadd.f32	s7, s12, s15
   2745e:	ee34 3a87 	vadd.f32	s6, s9, s14
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
   27462:	ee75 2aa6 	vadd.f32	s5, s11, s13
   27466:	ee34 2a05 	vadd.f32	s4, s8, s10
        C_SUB( Fout[m2], *Fout, scratch[3] );
   2746a:	ee73 1ae2 	vsub.f32	s3, s7, s5
   2746e:	ee33 1a42 	vsub.f32	s2, s6, s4
        C_ADDTO(*Fout, scratch[1]);
   27472:	ed03 3a02 	vstr	s6, [r3, #-8]
   27476:	ed43 3a01 	vstr	s7, [r3, #-4]
        C_SUB( Fout[m2], *Fout, scratch[3] );
   2747a:	ed82 1a00 	vstr	s2, [r2]
   2747e:	edc2 1a01 	vstr	s3, [r2, #4]
        C_ADDTO( *Fout , scratch[3] );
   27482:	ed13 3a02 	vldr	s6, [r3, #-8]
   27486:	ed53 3a01 	vldr	s7, [r3, #-4]
   2748a:	ee33 3a02 	vadd.f32	s6, s6, s4
   2748e:	ee73 3aa2 	vadd.f32	s7, s7, s5
        C_SUB( scratch[5] , *Fout, scratch[1] );
   27492:	ee77 7ac6 	vsub.f32	s15, s15, s12
   27496:	ee37 7a64 	vsub.f32	s14, s14, s9
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
   2749a:	ee34 6a45 	vsub.f32	s12, s8, s10
   2749e:	ee75 6ae6 	vsub.f32	s13, s11, s13
        C_ADDTO( *Fout , scratch[3] );
   274a2:	ed03 3a02 	vstr	s6, [r3, #-8]
   274a6:	ed43 3a01 	vstr	s7, [r3, #-4]
        if(st->inverse) {
   274aa:	f1be 0f00 	cmp.w	lr, #0
   274ae:	f47f af7e 	bne.w	273ae <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state.constprop.0+0x26a>
            Fout[m].r = scratch[5].r + scratch[4].i;
   274b2:	ee37 5a26 	vadd.f32	s10, s14, s13
            Fout[m].i = scratch[5].i - scratch[4].r;
   274b6:	ee77 5ac6 	vsub.f32	s11, s15, s12
            Fout[m3].r = scratch[5].r - scratch[4].i;
   274ba:	ee37 7a66 	vsub.f32	s14, s14, s13
            Fout[m3].i = scratch[5].i + scratch[4].r;
   274be:	ee77 7a86 	vadd.f32	s15, s15, s12
            Fout[m].r = scratch[5].r + scratch[4].i;
   274c2:	ed07 5a01 	vstr	s10, [r7, #-4]
            Fout[m].i = scratch[5].i - scratch[4].r;
   274c6:	edc4 5a01 	vstr	s11, [r4, #4]
            Fout[m3].r = scratch[5].r - scratch[4].i;
   274ca:	ed81 7a00 	vstr	s14, [r1]
            Fout[m3].i = scratch[5].i + scratch[4].r;
   274ce:	edc1 7a01 	vstr	s15, [r1, #4]
   274d2:	e77c      	b.n	273ce <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state.constprop.0+0x28a>
     epi3 = st->twiddles[fstride*m];
   274d4:	eb05 03c6 	add.w	r3, r5, r6, lsl #3
   274d8:	ed93 aa43 	vldr	s20, [r3, #268]	; 0x10c
     tw1=tw2=st->twiddles;
   274dc:	eb04 1306 	add.w	r3, r4, r6, lsl #4
        case 3: kf_bfly3(Fout,fstride,st,m); break;
   274e0:	4632      	mov	r2, r6
   274e2:	eb04 0ac6 	add.w	sl, r4, r6, lsl #3
   274e6:	3304      	adds	r3, #4
   274e8:	f505 7b88 	add.w	fp, r5, #272	; 0x110
   274ec:	f505 778c 	add.w	r7, r5, #280	; 0x118
   274f0:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
   274f4:	f104 0508 	add.w	r5, r4, #8
   274f8:	eef1 aa4a 	vneg.f32	s21, s20
   274fc:	f10a 0a04 	add.w	sl, sl, #4
   27500:	eb04 1402 	add.w	r4, r4, r2, lsl #4
   27504:	4691      	mov	r9, r2
   27506:	4698      	mov	r8, r3
         C_MUL(scratch[1],Fout[m] , *tw1);
   27508:	ed5b 5a01 	vldr	s11, [fp, #-4]
         C_MUL(scratch[2],Fout[m2] , *tw2);
   2750c:	ed57 6a03 	vldr	s13, [r7, #-12]
         C_MUL(scratch[1],Fout[m] , *tw1);
   27510:	ed1b 4a02 	vldr	s8, [fp, #-8]
         C_MUL(scratch[2],Fout[m2] , *tw2);
   27514:	ed57 4a04 	vldr	s9, [r7, #-16]
         C_MUL(scratch[1],Fout[m] , *tw1);
   27518:	edd6 7a01 	vldr	s15, [r6, #4]
         C_MUL(scratch[2],Fout[m2] , *tw2);
   2751c:	ed94 8a01 	vldr	s16, [r4, #4]
         C_MUL(scratch[1],Fout[m] , *tw1);
   27520:	ed1a 5a01 	vldr	s10, [sl, #-4]
         C_MUL(scratch[2],Fout[m2] , *tw2);
   27524:	ed18 6a01 	vldr	s12, [r8, #-4]
         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
   27528:	f855 0c08 	ldr.w	r0, [r5, #-8]
         C_MUL(scratch[1],Fout[m] , *tw1);
   2752c:	ee25 7ae7 	vnmul.f32	s14, s11, s15
         C_MUL(scratch[2],Fout[m2] , *tw2);
   27530:	ee66 8ac8 	vnmul.f32	s17, s13, s16
         C_MUL(scratch[1],Fout[m] , *tw1);
   27534:	ee64 7a27 	vmul.f32	s15, s8, s15
         C_MUL(scratch[2],Fout[m2] , *tw2);
   27538:	ee24 8a88 	vmul.f32	s16, s9, s16
         C_MUL(scratch[1],Fout[m] , *tw1);
   2753c:	eea5 7a04 	vfma.f32	s14, s10, s8
     }while(--k);
   27540:	f10b 0b08 	add.w	fp, fp, #8
   27544:	3710      	adds	r7, #16
         C_MUL(scratch[1],Fout[m] , *tw1);
   27546:	eee5 7a25 	vfma.f32	s15, s10, s11
     }while(--k);
   2754a:	3508      	adds	r5, #8
   2754c:	f108 0808 	add.w	r8, r8, #8
         C_MUL(scratch[2],Fout[m2] , *tw2);
   27550:	eee6 8a24 	vfma.f32	s17, s12, s9
     }while(--k);
   27554:	3408      	adds	r4, #8
   27556:	f10a 0a08 	add.w	sl, sl, #8
         C_MUL(scratch[2],Fout[m2] , *tw2);
   2755a:	eea6 8a26 	vfma.f32	s16, s12, s13
     }while(--k);
   2755e:	3608      	adds	r6, #8
         C_ADD(scratch[3],scratch[1],scratch[2]);
   27560:	ee77 9a28 	vadd.f32	s19, s14, s17
   27564:	ee37 9a88 	vadd.f32	s18, s15, s16
         C_SUB(scratch[0],scratch[1],scratch[2]);
   27568:	ee77 8a68 	vsub.f32	s17, s14, s17
   2756c:	ee37 8ac8 	vsub.f32	s16, s15, s16
         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
   27570:	f7f1 fa78 	bl	18a64 <__aeabi_f2d>
   27574:	ec41 0b1b 	vmov	d11, r0, r1
   27578:	ee19 0a90 	vmov	r0, s19
   2757c:	f7f1 fa72 	bl	18a64 <__aeabi_f2d>
   27580:	4b59      	ldr	r3, [pc, #356]	; (276e8 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state.constprop.0+0x5a4>)
   27582:	2200      	movs	r2, #0
   27584:	f7f1 fac6 	bl	18b14 <__aeabi_dmul>
   27588:	4602      	mov	r2, r0
   2758a:	460b      	mov	r3, r1
   2758c:	ec51 0b1b 	vmov	r0, r1, d11
   27590:	f7f1 f908 	bl	187a4 <__aeabi_dsub>
   27594:	f7f1 fd96 	bl	190c4 <__aeabi_d2f>
   27598:	f84a 0c0c 	str.w	r0, [sl, #-12]
         Fout[m].i = Fout->i - HALF_OF(scratch[3].i);
   2759c:	f855 0c0c 	ldr.w	r0, [r5, #-12]
   275a0:	f7f1 fa60 	bl	18a64 <__aeabi_f2d>
   275a4:	ec41 0b1b 	vmov	d11, r0, r1
   275a8:	ee19 0a10 	vmov	r0, s18
   275ac:	f7f1 fa5a 	bl	18a64 <__aeabi_f2d>
   275b0:	4b4d      	ldr	r3, [pc, #308]	; (276e8 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state.constprop.0+0x5a4>)
   275b2:	2200      	movs	r2, #0
   275b4:	f7f1 faae 	bl	18b14 <__aeabi_dmul>
   275b8:	4602      	mov	r2, r0
   275ba:	460b      	mov	r3, r1
   275bc:	ec51 0b1b 	vmov	r0, r1, d11
   275c0:	f7f1 f8f0 	bl	187a4 <__aeabi_dsub>
   275c4:	f7f1 fd7e 	bl	190c4 <__aeabi_d2f>
   275c8:	f846 0c04 	str.w	r0, [r6, #-4]
         C_ADDTO(*Fout,scratch[3]);
   275cc:	ed15 7a04 	vldr	s14, [r5, #-16]
   275d0:	ed55 7a03 	vldr	s15, [r5, #-12]
   275d4:	ee37 7a29 	vadd.f32	s14, s14, s19
   275d8:	ee77 7a89 	vadd.f32	s15, s15, s18
   275dc:	ed05 7a04 	vstr	s14, [r5, #-16]
   275e0:	ed45 7a03 	vstr	s15, [r5, #-12]
         Fout[m2].r = Fout[m].r + scratch[0].i;
   275e4:	ed5a 7a03 	vldr	s15, [sl, #-12]
   275e8:	eeea 7a08 	vfma.f32	s15, s20, s16
     }while(--k);
   275ec:	f1b9 0901 	subs.w	r9, r9, #1
         Fout[m2].r = Fout[m].r + scratch[0].i;
   275f0:	ed48 7a03 	vstr	s15, [r8, #-12]
         Fout[m2].i = Fout[m].i - scratch[0].r;
   275f4:	ed56 7a01 	vldr	s15, [r6, #-4]
   275f8:	eeea 7aa8 	vfma.f32	s15, s21, s17
   275fc:	ed44 7a01 	vstr	s15, [r4, #-4]
         Fout[m].r -= scratch[0].i;
   27600:	ed5a 7a03 	vldr	s15, [sl, #-12]
   27604:	eeea 7a88 	vfma.f32	s15, s21, s16
   27608:	ed4a 7a03 	vstr	s15, [sl, #-12]
         Fout[m].i += scratch[0].r;
   2760c:	ed56 7a01 	vldr	s15, [r6, #-4]
   27610:	eeea 7a28 	vfma.f32	s15, s20, s17
   27614:	ed46 7a01 	vstr	s15, [r6, #-4]
     }while(--k);
   27618:	f47f af76 	bne.w	27508 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state.constprop.0+0x3c4>
}
   2761c:	b007      	add	sp, #28
   2761e:	ecbd 8b08 	vpop	{d8-d11}
   27622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Fout2 = Fout + m;
   27626:	1c73      	adds	r3, r6, #1
   27628:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
   2762c:	f505 7588 	add.w	r5, r5, #272	; 0x110
   27630:	3408      	adds	r4, #8
        C_MUL (t,  *Fout2 , *tw1);
   27632:	ed15 6a01 	vldr	s12, [r5, #-4]
   27636:	ed13 5a01 	vldr	s10, [r3, #-4]
   2763a:	ed55 7a02 	vldr	s15, [r5, #-8]
   2763e:	ed53 5a02 	vldr	s11, [r3, #-8]
        C_SUB( *Fout2 ,  *Fout , t );
   27642:	ed54 6a02 	vldr	s13, [r4, #-8]
        C_MUL (t,  *Fout2 , *tw1);
   27646:	ee26 7a45 	vnmul.f32	s14, s12, s10
    }while (--m);
   2764a:	3308      	adds	r3, #8
        C_MUL (t,  *Fout2 , *tw1);
   2764c:	eea5 7aa7 	vfma.f32	s14, s11, s15
    }while (--m);
   27650:	3408      	adds	r4, #8
   27652:	3e01      	subs	r6, #1
        C_MUL (t,  *Fout2 , *tw1);
   27654:	ee67 7a85 	vmul.f32	s15, s15, s10
        C_SUB( *Fout2 ,  *Fout , t );
   27658:	ee76 6ac7 	vsub.f32	s13, s13, s14
        C_MUL (t,  *Fout2 , *tw1);
   2765c:	eee5 7a86 	vfma.f32	s15, s11, s12
    }while (--m);
   27660:	f105 0508 	add.w	r5, r5, #8
        C_SUB( *Fout2 ,  *Fout , t );
   27664:	ed43 6a04 	vstr	s13, [r3, #-16]
   27668:	ed54 6a03 	vldr	s13, [r4, #-12]
   2766c:	ee76 6ae7 	vsub.f32	s13, s13, s15
   27670:	ed43 6a03 	vstr	s13, [r3, #-12]
        C_ADDTO( *Fout ,  t );
   27674:	ed14 6a04 	vldr	s12, [r4, #-16]
   27678:	ed54 6a03 	vldr	s13, [r4, #-12]
   2767c:	ee36 7a07 	vadd.f32	s14, s12, s14
   27680:	ee76 7aa7 	vadd.f32	s15, s13, s15
   27684:	ed04 7a04 	vstr	s14, [r4, #-16]
   27688:	ed44 7a03 	vstr	s15, [r4, #-12]
    }while (--m);
   2768c:	d1d1      	bne.n	27632 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state.constprop.0+0x4ee>
}
   2768e:	b007      	add	sp, #28
   27690:	ecbd 8b08 	vpop	{d8-d11}
   27694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27698:	2b01      	cmp	r3, #1
            f += fstride*in_stride;
   2769a:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
   2769e:	f100 0308 	add.w	r3, r0, #8
   276a2:	d109      	bne.n	276b8 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state.constprop.0+0x574>
            *Fout = *f;
   276a4:	e897 0003 	ldmia.w	r7, {r0, r1}
        }while(++Fout != Fout_end );
   276a8:	4599      	cmp	r9, r3
            *Fout = *f;
   276aa:	e903 0003 	stmdb	r3, {r0, r1}
            f += fstride*in_stride;
   276ae:	4467      	add	r7, ip
        }while(++Fout != Fout_end );
   276b0:	f103 0308 	add.w	r3, r3, #8
   276b4:	d1f6      	bne.n	276a4 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state.constprop.0+0x560>
   276b6:	e573      	b.n	271a0 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state.constprop.0+0x5c>
            *Fout = *f;
   276b8:	e897 0003 	ldmia.w	r7, {r0, r1}
        }while(++Fout != Fout_end );
   276bc:	4599      	cmp	r9, r3
            *Fout = *f;
   276be:	e903 0003 	stmdb	r3, {r0, r1}
            f += fstride*in_stride;
   276c2:	469e      	mov	lr, r3
   276c4:	4467      	add	r7, ip
        }while(++Fout != Fout_end );
   276c6:	f103 0308 	add.w	r3, r3, #8
   276ca:	d1f5      	bne.n	276b8 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state.constprop.0+0x574>
   276cc:	e568      	b.n	271a0 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state.constprop.0+0x5c>
        default: kf_bfly_generic(Fout,fstride,st,m,p); break;
   276ce:	9218      	str	r2, [sp, #96]	; 0x60
   276d0:	4633      	mov	r3, r6
   276d2:	462a      	mov	r2, r5
   276d4:	2101      	movs	r1, #1
   276d6:	4620      	mov	r0, r4
}
   276d8:	b007      	add	sp, #28
   276da:	ecbd 8b08 	vpop	{d8-d11}
   276de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        default: kf_bfly_generic(Fout,fstride,st,m,p); break;
   276e2:	f7fe bf13 	b.w	2650c <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>
   276e6:	bf00      	nop
   276e8:	3fe00000 	.word	0x3fe00000
   276ec:	00000000 	.word	0x00000000

000276f0 <kiss_fft_alloc>:
 *
 * The return value is a contiguous block of memory, allocated with malloc.  As such,
 * It can be freed with free(), rather than a kiss_fft-specific function.
 * */
kiss_fft_cfg kiss_fft_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated )
{
   276f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   276f4:	ed2d 8b02 	vpush	{d8}
   276f8:	468a      	mov	sl, r1
   276fa:	b083      	sub	sp, #12
    kiss_fft_cfg st=NULL;
    size_t memneeded = sizeof(struct kiss_fft_state)
        + sizeof(kiss_fft_cpx)*(nfft-1); /* twiddle factors*/
   276fc:	f100 0121 	add.w	r1, r0, #33	; 0x21
    size_t memneeded = sizeof(struct kiss_fft_state)
   27700:	00c9      	lsls	r1, r1, #3
{
   27702:	4604      	mov	r4, r0
    size_t memneeded = sizeof(struct kiss_fft_state)
   27704:	9101      	str	r1, [sp, #4]

    if ( lenmem==NULL ) {
   27706:	2b00      	cmp	r3, #0
   27708:	f000 8129 	beq.w	2795e <kiss_fft_alloc+0x26e>
        st = ( kiss_fft_cfg)KISS_FFT_MALLOC( memneeded );
    }else{
        if (mem != NULL && *lenmem >= memneeded)
   2770c:	2a00      	cmp	r2, #0
   2770e:	f000 81bd 	beq.w	27a8c <kiss_fft_alloc+0x39c>
   27712:	4608      	mov	r0, r1
   27714:	6819      	ldr	r1, [r3, #0]
   27716:	4281      	cmp	r1, r0
   27718:	f0c0 80ae 	bcc.w	27878 <kiss_fft_alloc+0x188>
            st = (kiss_fft_cfg)mem;
        *lenmem = memneeded;
   2771c:	6018      	str	r0, [r3, #0]
   2771e:	4615      	mov	r5, r2
    }
    if (st) {
        int i;
        st->nfft=nfft;
        st->inverse = inverse_fft;
   27720:	e9c5 4a00 	strd	r4, sl, [r5]
        if (inverse_fft)
   27724:	f1ba 0f00 	cmp.w	sl, #0
   27728:	f000 80e2 	beq.w	278f0 <kiss_fft_alloc+0x200>
        {
            for (i=0;i<nfft;++i) {
   2772c:	2c00      	cmp	r4, #0
   2772e:	f340 81b0 	ble.w	27a92 <kiss_fft_alloc+0x3a2>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
                double phase = 2*pi*i / nfft;
   27732:	4620      	mov	r0, r4
   27734:	f7f1 f984 	bl	18a40 <__aeabi_i2d>
   27738:	f20f 3984 	addw	r9, pc, #900	; 0x384
   2773c:	e9d9 8900 	ldrd	r8, r9, [r9]
   27740:	4606      	mov	r6, r0
   27742:	460f      	mov	r7, r1
   27744:	46ab      	mov	fp, r5
            for (i=0;i<nfft;++i) {
   27746:	f04f 0a00 	mov.w	sl, #0
                double phase = 2*pi*i / nfft;
   2774a:	4650      	mov	r0, sl
   2774c:	f7f1 f978 	bl	18a40 <__aeabi_i2d>
   27750:	4642      	mov	r2, r8
   27752:	464b      	mov	r3, r9
   27754:	f7f1 f9de 	bl	18b14 <__aeabi_dmul>
   27758:	4632      	mov	r2, r6
   2775a:	463b      	mov	r3, r7
   2775c:	f7f1 fb04 	bl	18d68 <__aeabi_ddiv>
                kf_cexp(st->twiddles+i, phase );
   27760:	ec41 0b10 	vmov	d0, r0, r1
                double phase = 2*pi*i / nfft;
   27764:	ec41 0b18 	vmov	d8, r0, r1
                kf_cexp(st->twiddles+i, phase );
   27768:	f000 ff5a 	bl	28620 <cos>
   2776c:	ec51 0b10 	vmov	r0, r1, d0
   27770:	f7f1 fca8 	bl	190c4 <__aeabi_d2f>
   27774:	eeb0 0a48 	vmov.f32	s0, s16
   27778:	eef0 0a68 	vmov.f32	s1, s17
   2777c:	f8cb 0108 	str.w	r0, [fp, #264]	; 0x108
   27780:	f001 f81a 	bl	287b8 <sin>
   27784:	ec51 0b10 	vmov	r0, r1, d0
   27788:	f7f1 fc9c 	bl	190c4 <__aeabi_d2f>
            for (i=0;i<nfft;++i) {
   2778c:	f10a 0a01 	add.w	sl, sl, #1
   27790:	4554      	cmp	r4, sl
                kf_cexp(st->twiddles+i, phase );
   27792:	f8cb 010c 	str.w	r0, [fp, #268]	; 0x10c
            for (i=0;i<nfft;++i) {
   27796:	f10b 0b08 	add.w	fp, fp, #8
   2779a:	d1d6      	bne.n	2774a <kiss_fft_alloc+0x5a>
    floor_sqrt = floor( sqrt((double)n) );
   2779c:	ec47 6b10 	vmov	d0, r6, r7
   277a0:	f001 f9a0 	bl	28ae4 <sqrt>
   277a4:	f000 ff84 	bl	286b0 <floor>
   277a8:	ec5b ab10 	vmov	sl, fp, d0
   277ac:	4bc0      	ldr	r3, [pc, #768]	; (27ab0 <kiss_fft_alloc+0x3c0>)
   277ae:	2200      	movs	r2, #0
   277b0:	ee10 0a10 	vmov	r0, s0
   277b4:	4659      	mov	r1, fp
   277b6:	f7f1 fc1f 	bl	18ff8 <__aeabi_dcmplt>
                double phase = -2*pi*i / nfft;
                kf_cexp(st->twiddles+i, phase );
            }
        }

        kf_factor(nfft,st->factors);
   277ba:	f105 0608 	add.w	r6, r5, #8
    floor_sqrt = floor( sqrt((double)n) );
   277be:	2200      	movs	r2, #0
   277c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   277c4:	2800      	cmp	r0, #0
   277c6:	d063      	beq.n	27890 <kiss_fft_alloc+0x1a0>
   277c8:	4650      	mov	r0, sl
   277ca:	4659      	mov	r1, fp
   277cc:	f7f1 fc14 	bl	18ff8 <__aeabi_dcmplt>
    int p=4;
   277d0:	2704      	movs	r7, #4
   277d2:	bba8      	cbnz	r0, 27840 <kiss_fft_alloc+0x150>
        *facbuf++ = p;
   277d4:	f04f 0802 	mov.w	r8, #2
        while (n % p) {
   277d8:	fb94 f3f7 	sdiv	r3, r4, r7
   277dc:	fb07 4213 	mls	r2, r7, r3, r4
   277e0:	b96a      	cbnz	r2, 277fe <kiss_fft_alloc+0x10e>
        n /= p;
   277e2:	461c      	mov	r4, r3
        *facbuf++ = p;
   277e4:	4633      	mov	r3, r6
    } while (n > 1);
   277e6:	2c01      	cmp	r4, #1
        *facbuf++ = p;
   277e8:	f843 7b08 	str.w	r7, [r3], #8
        *facbuf++ = n;
   277ec:	6074      	str	r4, [r6, #4]
    } while (n > 1);
   277ee:	dd45      	ble.n	2787c <kiss_fft_alloc+0x18c>
        *facbuf++ = n;
   277f0:	461e      	mov	r6, r3
        while (n % p) {
   277f2:	fb94 f3f7 	sdiv	r3, r4, r7
   277f6:	fb07 4213 	mls	r2, r7, r3, r4
   277fa:	2a00      	cmp	r2, #0
   277fc:	d0f1      	beq.n	277e2 <kiss_fft_alloc+0xf2>
            switch (p) {
   277fe:	2f02      	cmp	r7, #2
   27800:	f000 80e0 	beq.w	279c4 <kiss_fft_alloc+0x2d4>
   27804:	2f04      	cmp	r7, #4
   27806:	f040 80d0 	bne.w	279aa <kiss_fft_alloc+0x2ba>
        while (n % p) {
   2780a:	07e7      	lsls	r7, r4, #31
   2780c:	f100 80da 	bmi.w	279c4 <kiss_fft_alloc+0x2d4>
        n /= p;
   27810:	eb04 73d4 	add.w	r3, r4, r4, lsr #31
        *facbuf++ = p;
   27814:	4632      	mov	r2, r6
        n /= p;
   27816:	105b      	asrs	r3, r3, #1
    } while (n > 1);
   27818:	2c03      	cmp	r4, #3
        *facbuf++ = p;
   2781a:	f842 8b08 	str.w	r8, [r2], #8
        *facbuf++ = n;
   2781e:	6073      	str	r3, [r6, #4]
    } while (n > 1);
   27820:	dd2c      	ble.n	2787c <kiss_fft_alloc+0x18c>
        while (n % p) {
   27822:	07d8      	lsls	r0, r3, #31
        *facbuf++ = n;
   27824:	4616      	mov	r6, r2
        while (n % p) {
   27826:	f100 8156 	bmi.w	27ad6 <kiss_fft_alloc+0x3e6>
                case 4: p = 2; break;
   2782a:	2702      	movs	r7, #2
   2782c:	fb93 f3f7 	sdiv	r3, r3, r7
   27830:	e7d7      	b.n	277e2 <kiss_fft_alloc+0xf2>
    } while (n > 1);
   27832:	2a01      	cmp	r2, #1
        *facbuf++ = p;
   27834:	f843 7b08 	str.w	r7, [r3], #8
        n /= p;
   27838:	4614      	mov	r4, r2
        *facbuf++ = n;
   2783a:	6072      	str	r2, [r6, #4]
    } while (n > 1);
   2783c:	dd1e      	ble.n	2787c <kiss_fft_alloc+0x18c>
        *facbuf++ = n;
   2783e:	461e      	mov	r6, r3
        while (n % p) {
   27840:	fb94 f2f7 	sdiv	r2, r4, r7
   27844:	fb07 4112 	mls	r1, r7, r2, r4
        *facbuf++ = p;
   27848:	4633      	mov	r3, r6
        while (n % p) {
   2784a:	2900      	cmp	r1, #0
   2784c:	d0f1      	beq.n	27832 <kiss_fft_alloc+0x142>
            switch (p) {
   2784e:	2f02      	cmp	r7, #2
   27850:	d004      	beq.n	2785c <kiss_fft_alloc+0x16c>
   27852:	2f04      	cmp	r7, #4
                default: p += 2; break;
   27854:	f107 0702 	add.w	r7, r7, #2
            if (p > floor_sqrt)
   27858:	4638      	mov	r0, r7
            switch (p) {
   2785a:	d101      	bne.n	27860 <kiss_fft_alloc+0x170>
   2785c:	4627      	mov	r7, r4
   2785e:	e7ef      	b.n	27840 <kiss_fft_alloc+0x150>
            if (p > floor_sqrt)
   27860:	f7f1 f8ee 	bl	18a40 <__aeabi_i2d>
   27864:	4602      	mov	r2, r0
   27866:	460b      	mov	r3, r1
   27868:	4650      	mov	r0, sl
   2786a:	4659      	mov	r1, fp
   2786c:	f7f1 fbc4 	bl	18ff8 <__aeabi_dcmplt>
   27870:	2800      	cmp	r0, #0
   27872:	bf18      	it	ne
   27874:	4627      	movne	r7, r4
   27876:	e7e3      	b.n	27840 <kiss_fft_alloc+0x150>
        *lenmem = memneeded;
   27878:	6018      	str	r0, [r3, #0]
    kiss_fft_cfg st=NULL;
   2787a:	2500      	movs	r5, #0
    }

    if (memallocated != NULL) {
   2787c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2787e:	b10b      	cbz	r3, 27884 <kiss_fft_alloc+0x194>
        *memallocated = memneeded;
   27880:	9a01      	ldr	r2, [sp, #4]
   27882:	601a      	str	r2, [r3, #0]
    }

    return st;
}
   27884:	4628      	mov	r0, r5
   27886:	b003      	add	sp, #12
   27888:	ecbd 8b02 	vpop	{d8}
   2788c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27890:	4650      	mov	r0, sl
   27892:	4659      	mov	r1, fp
   27894:	f7f1 fbb0 	bl	18ff8 <__aeabi_dcmplt>
        while (n % p) {
   27898:	f8df 922c 	ldr.w	r9, [pc, #556]	; 27ac8 <kiss_fft_alloc+0x3d8>
   2789c:	2800      	cmp	r0, #0
   2789e:	d165      	bne.n	2796c <kiss_fft_alloc+0x27c>
    int p=4;
   278a0:	2704      	movs	r7, #4
        while (n % p) {
   278a2:	fb94 f3f7 	sdiv	r3, r4, r7
   278a6:	fb07 4213 	mls	r2, r7, r3, r4
   278aa:	b1c2      	cbz	r2, 278de <kiss_fft_alloc+0x1ee>
            switch (p) {
   278ac:	2f02      	cmp	r7, #2
   278ae:	f000 808c 	beq.w	279ca <kiss_fft_alloc+0x2da>
   278b2:	2f04      	cmp	r7, #4
   278b4:	f040 80c2 	bne.w	27a3c <kiss_fft_alloc+0x34c>
        while (n % p) {
   278b8:	07e1      	lsls	r1, r4, #31
   278ba:	f100 8086 	bmi.w	279ca <kiss_fft_alloc+0x2da>
        n /= p;
   278be:	eb04 73d4 	add.w	r3, r4, r4, lsr #31
        *facbuf++ = p;
   278c2:	4632      	mov	r2, r6
        n /= p;
   278c4:	105b      	asrs	r3, r3, #1
        *facbuf++ = p;
   278c6:	2102      	movs	r1, #2
    } while (n > 1);
   278c8:	2c03      	cmp	r4, #3
        *facbuf++ = p;
   278ca:	f842 1b08 	str.w	r1, [r2], #8
        *facbuf++ = n;
   278ce:	6073      	str	r3, [r6, #4]
    } while (n > 1);
   278d0:	ddd4      	ble.n	2787c <kiss_fft_alloc+0x18c>
        *facbuf++ = n;
   278d2:	4616      	mov	r6, r2
        while (n % p) {
   278d4:	07da      	lsls	r2, r3, #31
   278d6:	d477      	bmi.n	279c8 <kiss_fft_alloc+0x2d8>
                case 4: p = 2; break;
   278d8:	2702      	movs	r7, #2
   278da:	fb93 f3f7 	sdiv	r3, r3, r7
        *facbuf++ = p;
   278de:	46b0      	mov	r8, r6
    } while (n > 1);
   278e0:	2b01      	cmp	r3, #1
        *facbuf++ = p;
   278e2:	f848 7b08 	str.w	r7, [r8], #8
        n /= p;
   278e6:	461c      	mov	r4, r3
        *facbuf++ = n;
   278e8:	6073      	str	r3, [r6, #4]
    } while (n > 1);
   278ea:	ddc7      	ble.n	2787c <kiss_fft_alloc+0x18c>
        *facbuf++ = n;
   278ec:	4646      	mov	r6, r8
   278ee:	e7d8      	b.n	278a2 <kiss_fft_alloc+0x1b2>
            for (i=0;i<nfft;++i) {
   278f0:	2c00      	cmp	r4, #0
   278f2:	f340 80ce 	ble.w	27a92 <kiss_fft_alloc+0x3a2>
                double phase = 2*pi*i / nfft;
   278f6:	4620      	mov	r0, r4
   278f8:	f7f1 f8a2 	bl	18a40 <__aeabi_i2d>
                double phase = -2*pi*i / nfft;
   278fc:	f20f 19a8 	addw	r9, pc, #424	; 0x1a8
   27900:	e9d9 8900 	ldrd	r8, r9, [r9]
                double phase = 2*pi*i / nfft;
   27904:	4606      	mov	r6, r0
   27906:	460f      	mov	r7, r1
   27908:	46ab      	mov	fp, r5
                double phase = -2*pi*i / nfft;
   2790a:	4650      	mov	r0, sl
   2790c:	f7f1 f898 	bl	18a40 <__aeabi_i2d>
   27910:	4642      	mov	r2, r8
   27912:	464b      	mov	r3, r9
   27914:	f7f1 f8fe 	bl	18b14 <__aeabi_dmul>
   27918:	4632      	mov	r2, r6
   2791a:	463b      	mov	r3, r7
   2791c:	f7f1 fa24 	bl	18d68 <__aeabi_ddiv>
                kf_cexp(st->twiddles+i, phase );
   27920:	ec41 0b10 	vmov	d0, r0, r1
                double phase = -2*pi*i / nfft;
   27924:	ec41 0b18 	vmov	d8, r0, r1
                kf_cexp(st->twiddles+i, phase );
   27928:	f000 fe7a 	bl	28620 <cos>
   2792c:	ec51 0b10 	vmov	r0, r1, d0
   27930:	f7f1 fbc8 	bl	190c4 <__aeabi_d2f>
   27934:	eeb0 0a48 	vmov.f32	s0, s16
   27938:	eef0 0a68 	vmov.f32	s1, s17
   2793c:	f8cb 0108 	str.w	r0, [fp, #264]	; 0x108
   27940:	f000 ff3a 	bl	287b8 <sin>
   27944:	ec51 0b10 	vmov	r0, r1, d0
   27948:	f7f1 fbbc 	bl	190c4 <__aeabi_d2f>
            for (i=0;i<nfft;++i) {
   2794c:	f10a 0a01 	add.w	sl, sl, #1
   27950:	4554      	cmp	r4, sl
                kf_cexp(st->twiddles+i, phase );
   27952:	f8cb 010c 	str.w	r0, [fp, #268]	; 0x10c
            for (i=0;i<nfft;++i) {
   27956:	f10b 0b08 	add.w	fp, fp, #8
   2795a:	d1d6      	bne.n	2790a <kiss_fft_alloc+0x21a>
   2795c:	e71e      	b.n	2779c <kiss_fft_alloc+0xac>
        st = ( kiss_fft_cfg)KISS_FFT_MALLOC( memneeded );
   2795e:	4608      	mov	r0, r1
   27960:	f7fe fbbe 	bl	260e0 <_Z9ei_mallocj>
    if (st) {
   27964:	4605      	mov	r5, r0
   27966:	2800      	cmp	r0, #0
   27968:	d088      	beq.n	2787c <kiss_fft_alloc+0x18c>
   2796a:	e6d9      	b.n	27720 <kiss_fft_alloc+0x30>
    int p=4;
   2796c:	2704      	movs	r7, #4
        while (n % p) {
   2796e:	fb94 f3f7 	sdiv	r3, r4, r7
   27972:	fb07 4213 	mls	r2, r7, r3, r4
            if (p > floor_sqrt)
   27976:	f8df 813c 	ldr.w	r8, [pc, #316]	; 27ab4 <kiss_fft_alloc+0x3c4>
        while (n % p) {
   2797a:	b972      	cbnz	r2, 2799a <kiss_fft_alloc+0x2aa>
        n /= p;
   2797c:	461c      	mov	r4, r3
        *facbuf++ = p;
   2797e:	4633      	mov	r3, r6
    } while (n > 1);
   27980:	2c01      	cmp	r4, #1
        *facbuf++ = p;
   27982:	f843 7b08 	str.w	r7, [r3], #8
        *facbuf++ = n;
   27986:	6074      	str	r4, [r6, #4]
    } while (n > 1);
   27988:	f77f af78 	ble.w	2787c <kiss_fft_alloc+0x18c>
            if (p > floor_sqrt)
   2798c:	461e      	mov	r6, r3
        while (n % p) {
   2798e:	fb94 f3f7 	sdiv	r3, r4, r7
   27992:	fb07 4213 	mls	r2, r7, r3, r4
   27996:	2a00      	cmp	r2, #0
   27998:	d0f0      	beq.n	2797c <kiss_fft_alloc+0x28c>
            switch (p) {
   2799a:	2f02      	cmp	r7, #2
   2799c:	d032      	beq.n	27a04 <kiss_fft_alloc+0x314>
   2799e:	2f04      	cmp	r7, #4
   279a0:	d15c      	bne.n	27a5c <kiss_fft_alloc+0x36c>
        while (n % p) {
   279a2:	4633      	mov	r3, r6
   279a4:	4627      	mov	r7, r4
            if (p > floor_sqrt)
   279a6:	461e      	mov	r6, r3
   279a8:	e7f1      	b.n	2798e <kiss_fft_alloc+0x29e>
                default: p += 2; break;
   279aa:	3702      	adds	r7, #2
            if (p > floor_sqrt)
   279ac:	4638      	mov	r0, r7
   279ae:	f7f1 f847 	bl	18a40 <__aeabi_i2d>
   279b2:	4602      	mov	r2, r0
   279b4:	460b      	mov	r3, r1
   279b6:	4650      	mov	r0, sl
   279b8:	4659      	mov	r1, fp
   279ba:	f7f1 fb1d 	bl	18ff8 <__aeabi_dcmplt>
   279be:	2800      	cmp	r0, #0
   279c0:	f43f af0a 	beq.w	277d8 <kiss_fft_alloc+0xe8>
        *facbuf++ = n;
   279c4:	4627      	mov	r7, r4
   279c6:	e707      	b.n	277d8 <kiss_fft_alloc+0xe8>
        while (n % p) {
   279c8:	461c      	mov	r4, r3
   279ca:	4a3a      	ldr	r2, [pc, #232]	; (27ab4 <kiss_fft_alloc+0x3c4>)
   279cc:	fb09 2304 	mla	r3, r9, r4, r2
   279d0:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
   279d4:	d255      	bcs.n	27a82 <kiss_fft_alloc+0x392>
        n /= p;
   279d6:	4b38      	ldr	r3, [pc, #224]	; (27ab8 <kiss_fft_alloc+0x3c8>)
        *facbuf++ = p;
   279d8:	46b0      	mov	r8, r6
        n /= p;
   279da:	fb83 1304 	smull	r1, r3, r3, r4
   279de:	eba3 73e4 	sub.w	r3, r3, r4, asr #31
        *facbuf++ = p;
   279e2:	2103      	movs	r1, #3
    } while (n > 1);
   279e4:	2c05      	cmp	r4, #5
        *facbuf++ = p;
   279e6:	f848 1b08 	str.w	r1, [r8], #8
        *facbuf++ = n;
   279ea:	6073      	str	r3, [r6, #4]
    } while (n > 1);
   279ec:	f77f af46 	ble.w	2787c <kiss_fft_alloc+0x18c>
   279f0:	fb09 2203 	mla	r2, r9, r3, r2
        while (n % p) {
   279f4:	f1b2 3f55 	cmp.w	r2, #1431655765	; 0x55555555
   279f8:	d268      	bcs.n	27acc <kiss_fft_alloc+0x3dc>
                case 2: p = 3; break;
   279fa:	2703      	movs	r7, #3
        *facbuf++ = n;
   279fc:	4646      	mov	r6, r8
   279fe:	fb93 f3f7 	sdiv	r3, r3, r7
   27a02:	e76c      	b.n	278de <kiss_fft_alloc+0x1ee>
            if (p > floor_sqrt)
   27a04:	fb09 8304 	mla	r3, r9, r4, r8
        while (n % p) {
   27a08:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
   27a0c:	d235      	bcs.n	27a7a <kiss_fft_alloc+0x38a>
        n /= p;
   27a0e:	4b2a      	ldr	r3, [pc, #168]	; (27ab8 <kiss_fft_alloc+0x3c8>)
   27a10:	fb83 2304 	smull	r2, r3, r3, r4
        *facbuf++ = p;
   27a14:	4632      	mov	r2, r6
        n /= p;
   27a16:	eba3 73e4 	sub.w	r3, r3, r4, asr #31
        *facbuf++ = p;
   27a1a:	2103      	movs	r1, #3
    } while (n > 1);
   27a1c:	2c05      	cmp	r4, #5
        *facbuf++ = p;
   27a1e:	f842 1b08 	str.w	r1, [r2], #8
        *facbuf++ = n;
   27a22:	6073      	str	r3, [r6, #4]
    } while (n > 1);
   27a24:	f77f af2a 	ble.w	2787c <kiss_fft_alloc+0x18c>
   27a28:	fb09 8103 	mla	r1, r9, r3, r8
        while (n % p) {
   27a2c:	f1b1 3f55 	cmp.w	r1, #1431655765	; 0x55555555
        *facbuf++ = n;
   27a30:	4616      	mov	r6, r2
        while (n % p) {
   27a32:	d234      	bcs.n	27a9e <kiss_fft_alloc+0x3ae>
                case 2: p = 3; break;
   27a34:	2703      	movs	r7, #3
   27a36:	fb93 f3f7 	sdiv	r3, r3, r7
   27a3a:	e79f      	b.n	2797c <kiss_fft_alloc+0x28c>
                default: p += 2; break;
   27a3c:	3702      	adds	r7, #2
            if (p > floor_sqrt)
   27a3e:	4638      	mov	r0, r7
   27a40:	f7f0 fffe 	bl	18a40 <__aeabi_i2d>
   27a44:	46b0      	mov	r8, r6
   27a46:	4602      	mov	r2, r0
   27a48:	460b      	mov	r3, r1
   27a4a:	4650      	mov	r0, sl
   27a4c:	4659      	mov	r1, fp
   27a4e:	f7f1 fad3 	bl	18ff8 <__aeabi_dcmplt>
        *facbuf++ = n;
   27a52:	4646      	mov	r6, r8
            if (p > floor_sqrt)
   27a54:	2800      	cmp	r0, #0
   27a56:	bf18      	it	ne
   27a58:	4627      	movne	r7, r4
   27a5a:	e722      	b.n	278a2 <kiss_fft_alloc+0x1b2>
                default: p += 2; break;
   27a5c:	3702      	adds	r7, #2
            if (p > floor_sqrt)
   27a5e:	4638      	mov	r0, r7
   27a60:	f7f0 ffee 	bl	18a40 <__aeabi_i2d>
   27a64:	4602      	mov	r2, r0
   27a66:	460b      	mov	r3, r1
   27a68:	4650      	mov	r0, sl
   27a6a:	4659      	mov	r1, fp
   27a6c:	f7f1 fac4 	bl	18ff8 <__aeabi_dcmplt>
   27a70:	2800      	cmp	r0, #0
   27a72:	d196      	bne.n	279a2 <kiss_fft_alloc+0x2b2>
   27a74:	4633      	mov	r3, r6
   27a76:	461e      	mov	r6, r3
   27a78:	e789      	b.n	2798e <kiss_fft_alloc+0x29e>
        while (n % p) {
   27a7a:	4b10      	ldr	r3, [pc, #64]	; (27abc <kiss_fft_alloc+0x3cc>)
   27a7c:	2705      	movs	r7, #5
   27a7e:	2200      	movs	r2, #0
   27a80:	e7f2      	b.n	27a68 <kiss_fft_alloc+0x378>
   27a82:	4b0e      	ldr	r3, [pc, #56]	; (27abc <kiss_fft_alloc+0x3cc>)
   27a84:	46b0      	mov	r8, r6
   27a86:	2705      	movs	r7, #5
   27a88:	2200      	movs	r2, #0
   27a8a:	e7de      	b.n	27a4a <kiss_fft_alloc+0x35a>
        *lenmem = memneeded;
   27a8c:	6019      	str	r1, [r3, #0]
    kiss_fft_cfg st=NULL;
   27a8e:	4615      	mov	r5, r2
   27a90:	e6f4      	b.n	2787c <kiss_fft_alloc+0x18c>
                double phase = 2*pi*i / nfft;
   27a92:	4620      	mov	r0, r4
   27a94:	f7f0 ffd4 	bl	18a40 <__aeabi_i2d>
   27a98:	4606      	mov	r6, r0
   27a9a:	460f      	mov	r7, r1
   27a9c:	e67e      	b.n	2779c <kiss_fft_alloc+0xac>
        n /= p;
   27a9e:	461c      	mov	r4, r3
        while (n % p) {
   27aa0:	2705      	movs	r7, #5
   27aa2:	4b06      	ldr	r3, [pc, #24]	; (27abc <kiss_fft_alloc+0x3cc>)
   27aa4:	2200      	movs	r2, #0
   27aa6:	e7df      	b.n	27a68 <kiss_fft_alloc+0x378>
   27aa8:	54442d18 	.word	0x54442d18
   27aac:	c01921fb 	.word	0xc01921fb
   27ab0:	40080000 	.word	0x40080000
   27ab4:	2aaaaaaa 	.word	0x2aaaaaaa
   27ab8:	55555556 	.word	0x55555556
   27abc:	40140000 	.word	0x40140000
   27ac0:	54442d18 	.word	0x54442d18
   27ac4:	401921fb 	.word	0x401921fb
   27ac8:	aaaaaaab 	.word	0xaaaaaaab
        n /= p;
   27acc:	461c      	mov	r4, r3
        while (n % p) {
   27ace:	2705      	movs	r7, #5
   27ad0:	4b02      	ldr	r3, [pc, #8]	; (27adc <kiss_fft_alloc+0x3ec>)
   27ad2:	2200      	movs	r2, #0
   27ad4:	e7b9      	b.n	27a4a <kiss_fft_alloc+0x35a>
   27ad6:	461c      	mov	r4, r3
        *facbuf++ = n;
   27ad8:	4627      	mov	r7, r4
   27ada:	e67d      	b.n	277d8 <kiss_fft_alloc+0xe8>
   27adc:	40140000 	.word	0x40140000

00027ae0 <kiss_fft>:
        kf_work( fout, fin, 1,in_stride, st->factors,st );
    }
}

void kiss_fft(kiss_fft_cfg cfg,const kiss_fft_cpx *fin,kiss_fft_cpx *fout)
{
   27ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27ae4:	ed2d 8b08 	vpush	{d8-d11}
    if (fin == fout) {
   27ae8:	4291      	cmp	r1, r2
{
   27aea:	b085      	sub	sp, #20
   27aec:	460e      	mov	r6, r1
   27aee:	4605      	mov	r5, r0
    if (fin == fout) {
   27af0:	d038      	beq.n	27b64 <kiss_fft+0x84>
   27af2:	4614      	mov	r4, r2
    const int m=*factors++; /* stage's fft length/p */
   27af4:	e9d0 2702 	ldrd	r2, r7, [r0, #8]
    const kiss_fft_cpx * Fout_end = Fout + p*m;
   27af8:	fb07 f902 	mul.w	r9, r7, r2
    if (m==1) {
   27afc:	2f01      	cmp	r7, #1
    const kiss_fft_cpx * Fout_end = Fout + p*m;
   27afe:	ea4f 0ec9 	mov.w	lr, r9, lsl #3
   27b02:	eb04 09c9 	add.w	r9, r4, r9, lsl #3
    if (m==1) {
   27b06:	d022      	beq.n	27b4e <kiss_fft+0x6e>
    const int m=*factors++; /* stage's fft length/p */
   27b08:	f100 0b10 	add.w	fp, r0, #16
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
   27b0c:	46a0      	mov	r8, r4
        }while( (Fout += m) != Fout_end );
   27b0e:	ea4f 0ac7 	mov.w	sl, r7, lsl #3
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
   27b12:	9703      	str	r7, [sp, #12]
   27b14:	465c      	mov	r4, fp
   27b16:	4617      	mov	r7, r2
   27b18:	46c3      	mov	fp, r8
   27b1a:	4631      	mov	r1, r6
   27b1c:	4640      	mov	r0, r8
   27b1e:	e9cd 4500 	strd	r4, r5, [sp]
   27b22:	2301      	movs	r3, #1
        }while( (Fout += m) != Fout_end );
   27b24:	44d0      	add	r8, sl
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
   27b26:	463a      	mov	r2, r7
   27b28:	f7fe fdd2 	bl	266d0 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
        }while( (Fout += m) != Fout_end );
   27b2c:	45c1      	cmp	r9, r8
            f += fstride*in_stride;
   27b2e:	f106 0608 	add.w	r6, r6, #8
        }while( (Fout += m) != Fout_end );
   27b32:	d1f2      	bne.n	27b1a <kiss_fft+0x3a>
   27b34:	463a      	mov	r2, r7
   27b36:	9f03      	ldr	r7, [sp, #12]
   27b38:	465c      	mov	r4, fp
    switch (p) {
   27b3a:	1e93      	subs	r3, r2, #2
   27b3c:	2b03      	cmp	r3, #3
   27b3e:	f200 82a1 	bhi.w	28084 <kiss_fft+0x5a4>
   27b42:	e8df f013 	tbh	[pc, r3, lsl #1]
   27b46:	01bd      	.short	0x01bd
   27b48:	011301f6 	.word	0x011301f6
   27b4c:	002a      	.short	0x002a
   27b4e:	2300      	movs	r3, #0
            *Fout = *f;
   27b50:	18f1      	adds	r1, r6, r3
   27b52:	c903      	ldmia	r1, {r0, r1}
   27b54:	eb04 0c03 	add.w	ip, r4, r3
        }while(++Fout != Fout_end );
   27b58:	3308      	adds	r3, #8
   27b5a:	459e      	cmp	lr, r3
            *Fout = *f;
   27b5c:	e88c 0003 	stmia.w	ip, {r0, r1}
        }while(++Fout != Fout_end );
   27b60:	d1f6      	bne.n	27b50 <kiss_fft+0x70>
   27b62:	e7ea      	b.n	27b3a <kiss_fft+0x5a>
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
   27b64:	4604      	mov	r4, r0
   27b66:	f854 0b08 	ldr.w	r0, [r4], #8
   27b6a:	00c0      	lsls	r0, r0, #3
   27b6c:	f7fe fab8 	bl	260e0 <_Z9ei_mallocj>
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
   27b70:	4623      	mov	r3, r4
   27b72:	4631      	mov	r1, r6
   27b74:	9500      	str	r5, [sp, #0]
   27b76:	2201      	movs	r2, #1
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
   27b78:	4604      	mov	r4, r0
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
   27b7a:	f7ff fae3 	bl	27144 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state.constprop.0>
        memcpy(fout,tmpbuf,sizeof(kiss_fft_cpx)*st->nfft);
   27b7e:	682a      	ldr	r2, [r5, #0]
   27b80:	4621      	mov	r1, r4
   27b82:	00d2      	lsls	r2, r2, #3
   27b84:	4630      	mov	r0, r6
   27b86:	f7f0 fb3b 	bl	18200 <memcpy>
        KISS_FFT_TMP_FREE(tmpbuf);
   27b8a:	4620      	mov	r0, r4
    kiss_fft_stride(cfg,fin,fout,1);
}
   27b8c:	b005      	add	sp, #20
   27b8e:	ecbd 8b08 	vpop	{d8-d11}
   27b92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        KISS_FFT_TMP_FREE(tmpbuf);
   27b96:	f7fe bab5 	b.w	26104 <_Z7ei_freePv>
    kiss_fft_cpx * twiddles = st->twiddles;
   27b9a:	f505 7384 	add.w	r3, r5, #264	; 0x108
    ya = twiddles[fstride*m];
   27b9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    yb = twiddles[fstride*2*m];
   27ba2:	eb03 02c7 	add.w	r2, r3, r7, lsl #3
    Fout2=Fout0+2*m;
   27ba6:	eb04 1107 	add.w	r1, r4, r7, lsl #4
    for ( u=0; u<m; ++u ) {
   27baa:	2f00      	cmp	r7, #0
    ya = twiddles[fstride*m];
   27bac:	edd3 3a00 	vldr	s7, [r3]
   27bb0:	ed93 2a01 	vldr	s4, [r3, #4]
    yb = twiddles[fstride*2*m];
   27bb4:	ed92 3a00 	vldr	s6, [r2]
   27bb8:	edd2 2a01 	vldr	s5, [r2, #4]
    ya = twiddles[fstride*m];
   27bbc:	ea4f 0ec7 	mov.w	lr, r7, lsl #3
    Fout1=Fout0+m;
   27bc0:	eb04 0cc7 	add.w	ip, r4, r7, lsl #3
    Fout3=Fout0+3*m;
   27bc4:	eb01 06c7 	add.w	r6, r1, r7, lsl #3
    Fout4=Fout0+4*m;
   27bc8:	eb01 1307 	add.w	r3, r1, r7, lsl #4
    for ( u=0; u<m; ++u ) {
   27bcc:	f340 80c9 	ble.w	27d62 <kiss_fft+0x282>
   27bd0:	f10e 0e08 	add.w	lr, lr, #8
   27bd4:	f10c 0708 	add.w	r7, ip, #8
   27bd8:	449e      	add	lr, r3
   27bda:	3408      	adds	r4, #8
   27bdc:	3108      	adds	r1, #8
   27bde:	3608      	adds	r6, #8
   27be0:	3308      	adds	r3, #8
   27be2:	eef1 1a42 	vneg.f32	s3, s4
   27be6:	46ac      	mov	ip, r5
   27be8:	4628      	mov	r0, r5
   27bea:	462a      	mov	r2, r5
        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
   27bec:	ed95 7a42 	vldr	s14, [r5, #264]	; 0x108
   27bf0:	ed95 6a43 	vldr	s12, [r5, #268]	; 0x10c
   27bf4:	ed57 7a01 	vldr	s15, [r7, #-4]
   27bf8:	ed57 0a02 	vldr	s1, [r7, #-8]
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
   27bfc:	ed92 8a43 	vldr	s16, [r2, #268]	; 0x10c
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
   27c00:	eddc 4a43 	vldr	s9, [ip, #268]	; 0x10c
   27c04:	ed53 6a01 	vldr	s13, [r3, #-4]
   27c08:	eddc aa42 	vldr	s21, [ip, #264]	; 0x108
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
   27c0c:	ed51 5a01 	vldr	s11, [r1, #-4]
   27c10:	ed92 aa42 	vldr	s20, [r2, #264]	; 0x108
   27c14:	ed51 9a02 	vldr	s19, [r1, #-8]
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
   27c18:	ed90 5a43 	vldr	s10, [r0, #268]	; 0x10c
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
   27c1c:	ed13 0a02 	vldr	s0, [r3, #-8]
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
   27c20:	ed90 4a42 	vldr	s8, [r0, #264]	; 0x108
        scratch[0] = *Fout0;
   27c24:	ed54 8a02 	vldr	s17, [r4, #-8]
        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
   27c28:	ee26 9a67 	vnmul.f32	s18, s12, s15
   27c2c:	ee67 7a27 	vmul.f32	s15, s14, s15
   27c30:	eeb0 1a49 	vmov.f32	s2, s18
   27c34:	eee0 7a86 	vfma.f32	s15, s1, s12
    for ( u=0; u<m; ++u ) {
   27c38:	3308      	adds	r3, #8
   27c3a:	3508      	adds	r5, #8
        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
   27c3c:	eea0 1a87 	vfma.f32	s2, s1, s14
    for ( u=0; u<m; ++u ) {
   27c40:	3210      	adds	r2, #16
   27c42:	3018      	adds	r0, #24
        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
   27c44:	eeb0 7a67 	vmov.f32	s14, s15
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
   27c48:	ee24 9ae6 	vnmul.f32	s18, s9, s13
   27c4c:	ee6a 7aa6 	vmul.f32	s15, s21, s13
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
   27c50:	ee68 6a65 	vnmul.f32	s13, s16, s11
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
   27c54:	ed16 6a01 	vldr	s12, [r6, #-4]
        scratch[0] = *Fout0;
   27c58:	ed54 0a01 	vldr	s1, [r4, #-4]
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
   27c5c:	eee9 6a8a 	vfma.f32	s13, s19, s20
    for ( u=0; u<m; ++u ) {
   27c60:	f10c 0c20 	add.w	ip, ip, #32
   27c64:	3408      	adds	r4, #8
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
   27c66:	eee0 7a24 	vfma.f32	s15, s0, s9
    for ( u=0; u<m; ++u ) {
   27c6a:	3708      	adds	r7, #8
   27c6c:	3108      	adds	r1, #8
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
   27c6e:	eef0 4a66 	vmov.f32	s9, s13
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
   27c72:	eea0 9a2a 	vfma.f32	s18, s0, s21
    for ( u=0; u<m; ++u ) {
   27c76:	3608      	adds	r6, #8
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
   27c78:	ed16 0a04 	vldr	s0, [r6, #-16]
   27c7c:	ee65 6a46 	vnmul.f32	s13, s10, s12
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
   27c80:	ee6a 5a25 	vmul.f32	s11, s20, s11
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
   27c84:	eee0 6a04 	vfma.f32	s13, s0, s8
   27c88:	ee24 6a06 	vmul.f32	s12, s8, s12
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
   27c8c:	eee9 5a88 	vfma.f32	s11, s19, s16
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
   27c90:	eea0 6a05 	vfma.f32	s12, s0, s10
        C_ADD( scratch[7],scratch[1],scratch[4]);
   27c94:	ee31 4a09 	vadd.f32	s8, s2, s18
   27c98:	ee37 8a27 	vadd.f32	s16, s14, s15
        C_SUB( scratch[10],scratch[1],scratch[4]);
   27c9c:	ee77 7a67 	vsub.f32	s15, s14, s15
        C_ADD( scratch[8],scratch[2],scratch[3]);
   27ca0:	ee34 7aa6 	vadd.f32	s14, s9, s13
        C_SUB( scratch[9],scratch[2],scratch[3]);
   27ca4:	ee75 9ac6 	vsub.f32	s19, s11, s12
        Fout0->r += scratch[7].r + scratch[8].r;
   27ca8:	ee34 5a07 	vadd.f32	s10, s8, s14
        C_ADD( scratch[8],scratch[2],scratch[3]);
   27cac:	ee75 5a86 	vadd.f32	s11, s11, s12
        C_SUB( scratch[9],scratch[2],scratch[3]);
   27cb0:	ee74 6ae6 	vsub.f32	s13, s9, s13
        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
   27cb4:	eeb0 6a68 	vmov.f32	s12, s17
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
   27cb8:	eef0 4a60 	vmov.f32	s9, s1
        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
   27cbc:	eea3 6a84 	vfma.f32	s12, s7, s8
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
   27cc0:	eee3 4a88 	vfma.f32	s9, s7, s16
        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
   27cc4:	eeb0 0a68 	vmov.f32	s0, s17
        Fout0->r += scratch[7].r + scratch[8].r;
   27cc8:	ee75 8a28 	vadd.f32	s17, s10, s17
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
   27ccc:	eeb0 5a60 	vmov.f32	s10, s1
        C_SUB( scratch[10],scratch[1],scratch[4]);
   27cd0:	ee31 9a49 	vsub.f32	s18, s2, s18
        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
   27cd4:	eea3 0a04 	vfma.f32	s0, s6, s8
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
   27cd8:	eea3 5a08 	vfma.f32	s10, s6, s16
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
   27cdc:	ee26 4ac2 	vnmul.f32	s8, s13, s4
        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
   27ce0:	ee22 1aa9 	vmul.f32	s2, s5, s19
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
   27ce4:	ee66 6ae2 	vnmul.f32	s13, s13, s5
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
   27ce8:	eee3 4a25 	vfma.f32	s9, s6, s11
        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
   27cec:	eea3 6a07 	vfma.f32	s12, s6, s14
        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
   27cf0:	eea2 1a27 	vfma.f32	s2, s4, s15
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
   27cf4:	eee1 6a89 	vfma.f32	s13, s3, s18
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
   27cf8:	ee67 7ae2 	vnmul.f32	s15, s15, s5
        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
   27cfc:	eea3 0a87 	vfma.f32	s0, s7, s14
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
   27d00:	eee2 7a29 	vfma.f32	s15, s4, s19
        Fout0->i += scratch[7].i + scratch[8].i;
   27d04:	ee38 7a25 	vadd.f32	s14, s16, s11
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
   27d08:	eea3 5aa5 	vfma.f32	s10, s7, s11
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
   27d0c:	eea2 4a89 	vfma.f32	s8, s5, s18
        C_SUB(*Fout1,scratch[5],scratch[6]);
   27d10:	ee36 8a41 	vsub.f32	s16, s12, s2
        Fout0->i += scratch[7].i + scratch[8].i;
   27d14:	ee37 7a20 	vadd.f32	s14, s14, s1
        C_ADD(*Fout4,scratch[5],scratch[6]);
   27d18:	ee36 6a01 	vadd.f32	s12, s12, s2
        C_SUB(*Fout1,scratch[5],scratch[6]);
   27d1c:	ee74 0ae6 	vsub.f32	s1, s9, s13
        C_ADD(*Fout4,scratch[5],scratch[6]);
   27d20:	ee74 6aa6 	vadd.f32	s13, s9, s13
        Fout0->r += scratch[7].r + scratch[8].r;
   27d24:	ed44 8a04 	vstr	s17, [r4, #-16]
        Fout0->i += scratch[7].i + scratch[8].i;
   27d28:	ed04 7a03 	vstr	s14, [r4, #-12]
        C_ADD(*Fout2,scratch[11],scratch[12]);
   27d2c:	ee70 4a27 	vadd.f32	s9, s0, s15
   27d30:	ee75 5a04 	vadd.f32	s11, s10, s8
        C_SUB(*Fout3,scratch[11],scratch[12]);
   27d34:	ee70 7a67 	vsub.f32	s15, s0, s15
   27d38:	ee35 5a44 	vsub.f32	s10, s10, s8
        C_SUB(*Fout1,scratch[5],scratch[6]);
   27d3c:	ed07 8a04 	vstr	s16, [r7, #-16]
   27d40:	ed47 0a03 	vstr	s1, [r7, #-12]
        C_ADD(*Fout4,scratch[5],scratch[6]);
   27d44:	ed03 6a04 	vstr	s12, [r3, #-16]
   27d48:	ed43 6a03 	vstr	s13, [r3, #-12]
    for ( u=0; u<m; ++u ) {
   27d4c:	459e      	cmp	lr, r3
        C_ADD(*Fout2,scratch[11],scratch[12]);
   27d4e:	ed41 4a04 	vstr	s9, [r1, #-16]
   27d52:	ed41 5a03 	vstr	s11, [r1, #-12]
        C_SUB(*Fout3,scratch[11],scratch[12]);
   27d56:	ed46 7a04 	vstr	s15, [r6, #-16]
   27d5a:	ed06 5a03 	vstr	s10, [r6, #-12]
    for ( u=0; u<m; ++u ) {
   27d5e:	f47f af45 	bne.w	27bec <kiss_fft+0x10c>
}
   27d62:	b005      	add	sp, #20
   27d64:	ecbd 8b08 	vpop	{d8-d11}
   27d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tw3 = tw2 = tw1 = st->twiddles;
   27d6c:	eb04 1107 	add.w	r1, r4, r7, lsl #4
   27d70:	eb04 0cc7 	add.w	ip, r4, r7, lsl #3
        if(st->inverse) {
   27d74:	f8d5 e004 	ldr.w	lr, [r5, #4]
   27d78:	f505 7088 	add.w	r0, r5, #272	; 0x110
   27d7c:	f505 728c 	add.w	r2, r5, #280	; 0x118
   27d80:	f104 0308 	add.w	r3, r4, #8
   27d84:	f10c 0c04 	add.w	ip, ip, #4
   27d88:	f505 7590 	add.w	r5, r5, #288	; 0x120
   27d8c:	eb04 04c7 	add.w	r4, r4, r7, lsl #3
   27d90:	eb01 06c7 	add.w	r6, r1, r7, lsl #3
   27d94:	e021      	b.n	27dda <kiss_fft+0x2fa>
            Fout[m].r = scratch[5].r - scratch[4].i;
   27d96:	ee37 5a66 	vsub.f32	s10, s14, s13
            Fout[m].i = scratch[5].i + scratch[4].r;
   27d9a:	ee77 5a86 	vadd.f32	s11, s15, s12
            Fout[m3].r = scratch[5].r + scratch[4].i;
   27d9e:	ee37 7a26 	vadd.f32	s14, s14, s13
            Fout[m3].i = scratch[5].i - scratch[4].r;
   27da2:	ee77 7ac6 	vsub.f32	s15, s15, s12
            Fout[m].r = scratch[5].r - scratch[4].i;
   27da6:	ed0c 5a01 	vstr	s10, [ip, #-4]
            Fout[m].i = scratch[5].i + scratch[4].r;
   27daa:	edc4 5a01 	vstr	s11, [r4, #4]
            Fout[m3].r = scratch[5].r + scratch[4].i;
   27dae:	ed86 7a00 	vstr	s14, [r6]
            Fout[m3].i = scratch[5].i - scratch[4].r;
   27db2:	edc6 7a01 	vstr	s15, [r6, #4]
    }while(--k);
   27db6:	3f01      	subs	r7, #1
   27db8:	f100 0008 	add.w	r0, r0, #8
   27dbc:	f102 0210 	add.w	r2, r2, #16
   27dc0:	f105 0518 	add.w	r5, r5, #24
   27dc4:	f103 0308 	add.w	r3, r3, #8
   27dc8:	f104 0408 	add.w	r4, r4, #8
   27dcc:	f101 0108 	add.w	r1, r1, #8
   27dd0:	f106 0608 	add.w	r6, r6, #8
   27dd4:	f10c 0c08 	add.w	ip, ip, #8
   27dd8:	d0c3      	beq.n	27d62 <kiss_fft+0x282>
        C_MUL(scratch[0],Fout[m] , *tw1 );
   27dda:	ed50 4a02 	vldr	s9, [r0, #-8]
   27dde:	ed94 7a01 	vldr	s14, [r4, #4]
   27de2:	ed50 0a01 	vldr	s1, [r0, #-4]
        C_MUL(scratch[1],Fout[m2] , *tw2 );
   27de6:	ed12 1a04 	vldr	s2, [r2, #-16]
   27dea:	ed12 2a03 	vldr	s4, [r2, #-12]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
   27dee:	ed55 2a06 	vldr	s5, [r5, #-24]	; 0xffffffe8
   27df2:	ed55 3a05 	vldr	s7, [r5, #-20]	; 0xffffffec
   27df6:	edd6 6a01 	vldr	s13, [r6, #4]
        C_MUL(scratch[0],Fout[m] , *tw1 );
   27dfa:	ed1c 0a01 	vldr	s0, [ip, #-4]
        C_MUL(scratch[1],Fout[m2] , *tw2 );
   27dfe:	ed91 6a01 	vldr	s12, [r1, #4]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
   27e02:	ed96 3a00 	vldr	s6, [r6]
        C_MUL(scratch[1],Fout[m2] , *tw2 );
   27e06:	edd1 1a00 	vldr	s3, [r1]
        C_SUB( scratch[5] , *Fout, scratch[1] );
   27e0a:	ed53 7a01 	vldr	s15, [r3, #-4]
        C_MUL(scratch[0],Fout[m] , *tw1 );
   27e0e:	ee20 4ac7 	vnmul.f32	s8, s1, s14
   27e12:	ee24 7a87 	vmul.f32	s14, s9, s14
        C_MUL(scratch[1],Fout[m2] , *tw2 );
   27e16:	ee22 5a46 	vnmul.f32	s10, s4, s12
        C_MUL(scratch[2],Fout[m3] , *tw3 );
   27e1a:	ee63 5ae6 	vnmul.f32	s11, s7, s13
        C_MUL(scratch[0],Fout[m] , *tw1 );
   27e1e:	eea0 7a20 	vfma.f32	s14, s0, s1
        C_MUL(scratch[1],Fout[m2] , *tw2 );
   27e22:	ee21 6a06 	vmul.f32	s12, s2, s12
        C_MUL(scratch[2],Fout[m3] , *tw3 );
   27e26:	ee62 6aa6 	vmul.f32	s13, s5, s13
        C_MUL(scratch[1],Fout[m2] , *tw2 );
   27e2a:	eea1 6a82 	vfma.f32	s12, s3, s4
   27e2e:	eea1 5a81 	vfma.f32	s10, s3, s2
        C_MUL(scratch[2],Fout[m3] , *tw3 );
   27e32:	eee3 5a22 	vfma.f32	s11, s6, s5
   27e36:	eee3 6a23 	vfma.f32	s13, s6, s7
        C_MUL(scratch[0],Fout[m] , *tw1 );
   27e3a:	eea0 4a24 	vfma.f32	s8, s0, s9
   27e3e:	eef0 4a47 	vmov.f32	s9, s14
        C_SUB( scratch[5] , *Fout, scratch[1] );
   27e42:	ed13 7a02 	vldr	s14, [r3, #-8]
        C_ADDTO(*Fout, scratch[1]);
   27e46:	ee76 3a27 	vadd.f32	s7, s12, s15
   27e4a:	ee35 3a07 	vadd.f32	s6, s10, s14
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
   27e4e:	ee74 2aa6 	vadd.f32	s5, s9, s13
   27e52:	ee34 2a25 	vadd.f32	s4, s8, s11
        C_SUB( Fout[m2], *Fout, scratch[3] );
   27e56:	ee73 1ae2 	vsub.f32	s3, s7, s5
   27e5a:	ee33 1a42 	vsub.f32	s2, s6, s4
        C_ADDTO(*Fout, scratch[1]);
   27e5e:	ed03 3a02 	vstr	s6, [r3, #-8]
   27e62:	ed43 3a01 	vstr	s7, [r3, #-4]
        C_SUB( Fout[m2], *Fout, scratch[3] );
   27e66:	ed81 1a00 	vstr	s2, [r1]
   27e6a:	edc1 1a01 	vstr	s3, [r1, #4]
        C_ADDTO( *Fout , scratch[3] );
   27e6e:	ed13 3a02 	vldr	s6, [r3, #-8]
   27e72:	ed53 3a01 	vldr	s7, [r3, #-4]
   27e76:	ee33 3a02 	vadd.f32	s6, s6, s4
   27e7a:	ee73 3aa2 	vadd.f32	s7, s7, s5
        C_SUB( scratch[5] , *Fout, scratch[1] );
   27e7e:	ee77 7ac6 	vsub.f32	s15, s15, s12
   27e82:	ee37 7a45 	vsub.f32	s14, s14, s10
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
   27e86:	ee34 6a65 	vsub.f32	s12, s8, s11
   27e8a:	ee74 6ae6 	vsub.f32	s13, s9, s13
        C_ADDTO( *Fout , scratch[3] );
   27e8e:	ed03 3a02 	vstr	s6, [r3, #-8]
   27e92:	ed43 3a01 	vstr	s7, [r3, #-4]
        if(st->inverse) {
   27e96:	f1be 0f00 	cmp.w	lr, #0
   27e9a:	f47f af7c 	bne.w	27d96 <kiss_fft+0x2b6>
            Fout[m].r = scratch[5].r + scratch[4].i;
   27e9e:	ee37 5a26 	vadd.f32	s10, s14, s13
            Fout[m].i = scratch[5].i - scratch[4].r;
   27ea2:	ee77 5ac6 	vsub.f32	s11, s15, s12
            Fout[m3].r = scratch[5].r - scratch[4].i;
   27ea6:	ee37 7a66 	vsub.f32	s14, s14, s13
            Fout[m3].i = scratch[5].i + scratch[4].r;
   27eaa:	ee77 7a86 	vadd.f32	s15, s15, s12
            Fout[m].r = scratch[5].r + scratch[4].i;
   27eae:	ed0c 5a01 	vstr	s10, [ip, #-4]
            Fout[m].i = scratch[5].i - scratch[4].r;
   27eb2:	edc4 5a01 	vstr	s11, [r4, #4]
            Fout[m3].r = scratch[5].r - scratch[4].i;
   27eb6:	ed86 7a00 	vstr	s14, [r6]
            Fout[m3].i = scratch[5].i + scratch[4].r;
   27eba:	edc6 7a01 	vstr	s15, [r6, #4]
   27ebe:	e77a      	b.n	27db6 <kiss_fft+0x2d6>
    Fout2 = Fout + m;
   27ec0:	1c7b      	adds	r3, r7, #1
   27ec2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
   27ec6:	f505 7588 	add.w	r5, r5, #272	; 0x110
   27eca:	3408      	adds	r4, #8
        C_MUL (t,  *Fout2 , *tw1);
   27ecc:	ed15 6a01 	vldr	s12, [r5, #-4]
   27ed0:	ed13 5a01 	vldr	s10, [r3, #-4]
   27ed4:	ed55 7a02 	vldr	s15, [r5, #-8]
   27ed8:	ed53 5a02 	vldr	s11, [r3, #-8]
        C_SUB( *Fout2 ,  *Fout , t );
   27edc:	ed54 6a02 	vldr	s13, [r4, #-8]
        C_MUL (t,  *Fout2 , *tw1);
   27ee0:	ee26 7a45 	vnmul.f32	s14, s12, s10
    }while (--m);
   27ee4:	3308      	adds	r3, #8
        C_MUL (t,  *Fout2 , *tw1);
   27ee6:	eea5 7aa7 	vfma.f32	s14, s11, s15
    }while (--m);
   27eea:	3408      	adds	r4, #8
   27eec:	3f01      	subs	r7, #1
        C_MUL (t,  *Fout2 , *tw1);
   27eee:	ee67 7a85 	vmul.f32	s15, s15, s10
        C_SUB( *Fout2 ,  *Fout , t );
   27ef2:	ee76 6ac7 	vsub.f32	s13, s13, s14
        C_MUL (t,  *Fout2 , *tw1);
   27ef6:	eee5 7a86 	vfma.f32	s15, s11, s12
    }while (--m);
   27efa:	f105 0508 	add.w	r5, r5, #8
        C_SUB( *Fout2 ,  *Fout , t );
   27efe:	ed43 6a04 	vstr	s13, [r3, #-16]
   27f02:	ed54 6a03 	vldr	s13, [r4, #-12]
   27f06:	ee76 6ae7 	vsub.f32	s13, s13, s15
   27f0a:	ed43 6a03 	vstr	s13, [r3, #-12]
        C_ADDTO( *Fout ,  t );
   27f0e:	ed14 6a04 	vldr	s12, [r4, #-16]
   27f12:	ed54 6a03 	vldr	s13, [r4, #-12]
   27f16:	ee36 7a07 	vadd.f32	s14, s12, s14
   27f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
   27f1e:	ed04 7a04 	vstr	s14, [r4, #-16]
   27f22:	ed44 7a03 	vstr	s15, [r4, #-12]
    }while (--m);
   27f26:	d1d1      	bne.n	27ecc <kiss_fft+0x3ec>
}
   27f28:	b005      	add	sp, #20
   27f2a:	ecbd 8b08 	vpop	{d8-d11}
   27f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        case 3: kf_bfly3(Fout,fstride,st,m); break;
   27f32:	463a      	mov	r2, r7
     epi3 = st->twiddles[fstride*m];
   27f34:	eb05 03c7 	add.w	r3, r5, r7, lsl #3
   27f38:	ed93 aa43 	vldr	s20, [r3, #268]	; 0x10c
     tw1=tw2=st->twiddles;
   27f3c:	eb04 1302 	add.w	r3, r4, r2, lsl #4
   27f40:	eb04 0ac2 	add.w	sl, r4, r2, lsl #3
   27f44:	3304      	adds	r3, #4
   27f46:	f505 7b88 	add.w	fp, r5, #272	; 0x110
   27f4a:	f505 778c 	add.w	r7, r5, #280	; 0x118
   27f4e:	eb04 06c2 	add.w	r6, r4, r2, lsl #3
   27f52:	f104 0508 	add.w	r5, r4, #8
   27f56:	eef1 aa4a 	vneg.f32	s21, s20
   27f5a:	f10a 0a04 	add.w	sl, sl, #4
   27f5e:	eb04 1402 	add.w	r4, r4, r2, lsl #4
   27f62:	4691      	mov	r9, r2
   27f64:	4698      	mov	r8, r3
         C_MUL(scratch[1],Fout[m] , *tw1);
   27f66:	ed5b 5a01 	vldr	s11, [fp, #-4]
         C_MUL(scratch[2],Fout[m2] , *tw2);
   27f6a:	ed57 6a03 	vldr	s13, [r7, #-12]
         C_MUL(scratch[1],Fout[m] , *tw1);
   27f6e:	ed1b 4a02 	vldr	s8, [fp, #-8]
         C_MUL(scratch[2],Fout[m2] , *tw2);
   27f72:	ed57 4a04 	vldr	s9, [r7, #-16]
         C_MUL(scratch[1],Fout[m] , *tw1);
   27f76:	edd6 7a01 	vldr	s15, [r6, #4]
         C_MUL(scratch[2],Fout[m2] , *tw2);
   27f7a:	ed94 8a01 	vldr	s16, [r4, #4]
         C_MUL(scratch[1],Fout[m] , *tw1);
   27f7e:	ed1a 5a01 	vldr	s10, [sl, #-4]
         C_MUL(scratch[2],Fout[m2] , *tw2);
   27f82:	ed18 6a01 	vldr	s12, [r8, #-4]
         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
   27f86:	f855 0c08 	ldr.w	r0, [r5, #-8]
         C_MUL(scratch[1],Fout[m] , *tw1);
   27f8a:	ee25 7ae7 	vnmul.f32	s14, s11, s15
         C_MUL(scratch[2],Fout[m2] , *tw2);
   27f8e:	ee66 8ac8 	vnmul.f32	s17, s13, s16
         C_MUL(scratch[1],Fout[m] , *tw1);
   27f92:	ee64 7a27 	vmul.f32	s15, s8, s15
         C_MUL(scratch[2],Fout[m2] , *tw2);
   27f96:	ee24 8a88 	vmul.f32	s16, s9, s16
         C_MUL(scratch[1],Fout[m] , *tw1);
   27f9a:	eea5 7a04 	vfma.f32	s14, s10, s8
     }while(--k);
   27f9e:	f10b 0b08 	add.w	fp, fp, #8
   27fa2:	3710      	adds	r7, #16
         C_MUL(scratch[1],Fout[m] , *tw1);
   27fa4:	eee5 7a25 	vfma.f32	s15, s10, s11
     }while(--k);
   27fa8:	3508      	adds	r5, #8
   27faa:	f108 0808 	add.w	r8, r8, #8
         C_MUL(scratch[2],Fout[m2] , *tw2);
   27fae:	eee6 8a24 	vfma.f32	s17, s12, s9
     }while(--k);
   27fb2:	3408      	adds	r4, #8
   27fb4:	f10a 0a08 	add.w	sl, sl, #8
         C_MUL(scratch[2],Fout[m2] , *tw2);
   27fb8:	eea6 8a26 	vfma.f32	s16, s12, s13
     }while(--k);
   27fbc:	3608      	adds	r6, #8
         C_ADD(scratch[3],scratch[1],scratch[2]);
   27fbe:	ee77 9a28 	vadd.f32	s19, s14, s17
   27fc2:	ee37 9a88 	vadd.f32	s18, s15, s16
         C_SUB(scratch[0],scratch[1],scratch[2]);
   27fc6:	ee77 8a68 	vsub.f32	s17, s14, s17
   27fca:	ee37 8ac8 	vsub.f32	s16, s15, s16
         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
   27fce:	f7f0 fd49 	bl	18a64 <__aeabi_f2d>
   27fd2:	ec41 0b1b 	vmov	d11, r0, r1
   27fd6:	ee19 0a90 	vmov	r0, s19
   27fda:	f7f0 fd43 	bl	18a64 <__aeabi_f2d>
   27fde:	4b2d      	ldr	r3, [pc, #180]	; (28094 <kiss_fft+0x5b4>)
   27fe0:	2200      	movs	r2, #0
   27fe2:	f7f0 fd97 	bl	18b14 <__aeabi_dmul>
   27fe6:	4602      	mov	r2, r0
   27fe8:	460b      	mov	r3, r1
   27fea:	ec51 0b1b 	vmov	r0, r1, d11
   27fee:	f7f0 fbd9 	bl	187a4 <__aeabi_dsub>
   27ff2:	f7f1 f867 	bl	190c4 <__aeabi_d2f>
   27ff6:	f84a 0c0c 	str.w	r0, [sl, #-12]
         Fout[m].i = Fout->i - HALF_OF(scratch[3].i);
   27ffa:	f855 0c0c 	ldr.w	r0, [r5, #-12]
   27ffe:	f7f0 fd31 	bl	18a64 <__aeabi_f2d>
   28002:	ec41 0b1b 	vmov	d11, r0, r1
   28006:	ee19 0a10 	vmov	r0, s18
   2800a:	f7f0 fd2b 	bl	18a64 <__aeabi_f2d>
   2800e:	4b21      	ldr	r3, [pc, #132]	; (28094 <kiss_fft+0x5b4>)
   28010:	2200      	movs	r2, #0
   28012:	f7f0 fd7f 	bl	18b14 <__aeabi_dmul>
   28016:	4602      	mov	r2, r0
   28018:	460b      	mov	r3, r1
   2801a:	ec51 0b1b 	vmov	r0, r1, d11
   2801e:	f7f0 fbc1 	bl	187a4 <__aeabi_dsub>
   28022:	f7f1 f84f 	bl	190c4 <__aeabi_d2f>
   28026:	f846 0c04 	str.w	r0, [r6, #-4]
         C_ADDTO(*Fout,scratch[3]);
   2802a:	ed15 7a04 	vldr	s14, [r5, #-16]
   2802e:	ed55 7a03 	vldr	s15, [r5, #-12]
   28032:	ee37 7a29 	vadd.f32	s14, s14, s19
   28036:	ee77 7a89 	vadd.f32	s15, s15, s18
   2803a:	ed05 7a04 	vstr	s14, [r5, #-16]
   2803e:	ed45 7a03 	vstr	s15, [r5, #-12]
         Fout[m2].r = Fout[m].r + scratch[0].i;
   28042:	ed5a 7a03 	vldr	s15, [sl, #-12]
   28046:	eeea 7a08 	vfma.f32	s15, s20, s16
     }while(--k);
   2804a:	f1b9 0901 	subs.w	r9, r9, #1
         Fout[m2].r = Fout[m].r + scratch[0].i;
   2804e:	ed48 7a03 	vstr	s15, [r8, #-12]
         Fout[m2].i = Fout[m].i - scratch[0].r;
   28052:	ed56 7a01 	vldr	s15, [r6, #-4]
   28056:	eeea 7aa8 	vfma.f32	s15, s21, s17
   2805a:	ed44 7a01 	vstr	s15, [r4, #-4]
         Fout[m].r -= scratch[0].i;
   2805e:	ed5a 7a03 	vldr	s15, [sl, #-12]
   28062:	eeea 7a88 	vfma.f32	s15, s21, s16
   28066:	ed4a 7a03 	vstr	s15, [sl, #-12]
         Fout[m].i += scratch[0].r;
   2806a:	ed56 7a01 	vldr	s15, [r6, #-4]
   2806e:	eeea 7a28 	vfma.f32	s15, s20, s17
   28072:	ed46 7a01 	vstr	s15, [r6, #-4]
     }while(--k);
   28076:	f47f af76 	bne.w	27f66 <kiss_fft+0x486>
}
   2807a:	b005      	add	sp, #20
   2807c:	ecbd 8b08 	vpop	{d8-d11}
   28080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        default: kf_bfly_generic(Fout,fstride,st,m,p); break;
   28084:	9200      	str	r2, [sp, #0]
   28086:	463b      	mov	r3, r7
   28088:	462a      	mov	r2, r5
   2808a:	2101      	movs	r1, #1
   2808c:	4620      	mov	r0, r4
   2808e:	f7fe fa3d 	bl	2650c <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>
}
   28092:	e666      	b.n	27d62 <kiss_fft+0x282>
   28094:	3fe00000 	.word	0x3fe00000

00028098 <kiss_fftr_alloc>:
    void * pad;
#endif
};

kiss_fftr_cfg kiss_fftr_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated)
{
   28098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2809c:	ed2d 8b02 	vpush	{d8}
   280a0:	b087      	sub	sp, #28
    int i;
    kiss_fftr_cfg st = NULL;
    size_t subsize = 0, memneeded;
   280a2:	2500      	movs	r5, #0

    if (nfft & 1) {
   280a4:	f010 0401 	ands.w	r4, r0, #1
    size_t subsize = 0, memneeded;
   280a8:	9505      	str	r5, [sp, #20]
    if (nfft & 1) {
   280aa:	f040 80b8 	bne.w	2821e <kiss_fftr_alloc+0x186>
        ei_printf("FFT length must be even\n");
        return NULL;
    }
    nfft >>= 1;
   280ae:	1045      	asrs	r5, r0, #1

    kiss_fft_alloc (nfft, inverse_fft, NULL, &subsize);
   280b0:	4690      	mov	r8, r2
   280b2:	461f      	mov	r7, r3
   280b4:	9400      	str	r4, [sp, #0]
   280b6:	ab05      	add	r3, sp, #20
   280b8:	4622      	mov	r2, r4
   280ba:	4628      	mov	r0, r5
   280bc:	460e      	mov	r6, r1
   280be:	f7ff fb17 	bl	276f0 <kiss_fft_alloc>
    memneeded = sizeof(struct kiss_fftr_state) + subsize + sizeof(kiss_fft_cpx) * ( nfft * 3 / 2);
   280c2:	9b05      	ldr	r3, [sp, #20]
   280c4:	f103 090c 	add.w	r9, r3, #12
   280c8:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   280cc:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   280d0:	105b      	asrs	r3, r3, #1
   280d2:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
   280d6:	9303      	str	r3, [sp, #12]

    if (lenmem == NULL) {
   280d8:	2f00      	cmp	r7, #0
   280da:	f000 80aa 	beq.w	28232 <kiss_fftr_alloc+0x19a>
   280de:	461a      	mov	r2, r3
        st = (kiss_fftr_cfg) KISS_FFT_MALLOC (memneeded);
    } else {
        if (*lenmem >= memneeded)
   280e0:	683b      	ldr	r3, [r7, #0]
            st = (kiss_fftr_cfg) mem;
        *lenmem = memneeded;
   280e2:	603a      	str	r2, [r7, #0]
        if (*lenmem >= memneeded)
   280e4:	4293      	cmp	r3, r2
   280e6:	f0c0 8093 	bcc.w	28210 <kiss_fftr_alloc+0x178>
    }
    if (!st)
   280ea:	f1b8 0f00 	cmp.w	r8, #0
   280ee:	d051      	beq.n	28194 <kiss_fftr_alloc+0xfc>
        return NULL;

    st->substate = (kiss_fft_cfg) (st + 1); /*just beyond kiss_fftr_state struct */
    st->tmpbuf = (kiss_fft_cpx *) (((char *) st->substate) + subsize);
   280f0:	9905      	ldr	r1, [sp, #20]
    st->substate = (kiss_fft_cfg) (st + 1); /*just beyond kiss_fftr_state struct */
   280f2:	f108 020c 	add.w	r2, r8, #12
    st->tmpbuf = (kiss_fft_cpx *) (((char *) st->substate) + subsize);
   280f6:	4411      	add	r1, r2
   280f8:	e9c8 2100 	strd	r2, r1, [r8]
    st->super_twiddles = st->tmpbuf + nfft;
   280fc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   28100:	f8c8 1008 	str.w	r1, [r8, #8]
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
   28104:	2100      	movs	r1, #0
   28106:	9100      	str	r1, [sp, #0]
   28108:	ab05      	add	r3, sp, #20
   2810a:	4631      	mov	r1, r6
   2810c:	4628      	mov	r0, r5

    if (inverse_fft) {
        for (i = 0; i < nfft/2; ++i) {
   2810e:	eb05 7ad5 	add.w	sl, r5, r5, lsr #31
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
   28112:	f7ff faed 	bl	276f0 <kiss_fft_alloc>
        for (i = 0; i < nfft/2; ++i) {
   28116:	ea4f 096a 	mov.w	r9, sl, asr #1
    if (inverse_fft) {
   2811a:	2e00      	cmp	r6, #0
   2811c:	d040      	beq.n	281a0 <kiss_fftr_alloc+0x108>
        for (i = 0; i < nfft/2; ++i) {
   2811e:	2d01      	cmp	r5, #1
   28120:	dd34      	ble.n	2818c <kiss_fftr_alloc+0xf4>
            double phase =
                3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
   28122:	4628      	mov	r0, r5
   28124:	f7f0 fc8c 	bl	18a40 <__aeabi_i2d>
            double phase =
   28128:	f20f 1b24 	addw	fp, pc, #292	; 0x124
   2812c:	e9db ab00 	ldrd	sl, fp, [fp]
   28130:	f8d8 5008 	ldr.w	r5, [r8, #8]
                3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
   28134:	4606      	mov	r6, r0
   28136:	460f      	mov	r7, r1
   28138:	3401      	adds	r4, #1
   2813a:	4620      	mov	r0, r4
   2813c:	f7f0 fc80 	bl	18a40 <__aeabi_i2d>
   28140:	4632      	mov	r2, r6
   28142:	463b      	mov	r3, r7
   28144:	f7f0 fe10 	bl	18d68 <__aeabi_ddiv>
   28148:	4b3f      	ldr	r3, [pc, #252]	; (28248 <kiss_fftr_alloc+0x1b0>)
   2814a:	2200      	movs	r2, #0
   2814c:	f7f0 fb2c 	bl	187a8 <__adddf3>
            double phase =
   28150:	4652      	mov	r2, sl
   28152:	465b      	mov	r3, fp
   28154:	f7f0 fcde 	bl	18b14 <__aeabi_dmul>
            kf_cexp (st->super_twiddles+i,phase);
   28158:	ec41 0b10 	vmov	d0, r0, r1
            double phase =
   2815c:	ec41 0b18 	vmov	d8, r0, r1
            kf_cexp (st->super_twiddles+i,phase);
   28160:	f000 fa5e 	bl	28620 <cos>
   28164:	ec51 0b10 	vmov	r0, r1, d0
   28168:	f7f0 ffac 	bl	190c4 <__aeabi_d2f>
   2816c:	eeb0 0a48 	vmov.f32	s0, s16
   28170:	eef0 0a68 	vmov.f32	s1, s17
   28174:	6028      	str	r0, [r5, #0]
   28176:	f000 fb1f 	bl	287b8 <sin>
   2817a:	ec51 0b10 	vmov	r0, r1, d0
   2817e:	f7f0 ffa1 	bl	190c4 <__aeabi_d2f>
        for (i = 0; i < nfft/2; ++i) {
   28182:	454c      	cmp	r4, r9
            kf_cexp (st->super_twiddles+i,phase);
   28184:	6068      	str	r0, [r5, #4]
        for (i = 0; i < nfft/2; ++i) {
   28186:	f105 0508 	add.w	r5, r5, #8
   2818a:	dbd5      	blt.n	28138 <kiss_fftr_alloc+0xa0>
                -3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
            kf_cexp (st->super_twiddles+i,phase);
        }
    }

    if (memallocated != NULL) {
   2818c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2818e:	b10b      	cbz	r3, 28194 <kiss_fftr_alloc+0xfc>
        *memallocated = memneeded;
   28190:	9a03      	ldr	r2, [sp, #12]
   28192:	601a      	str	r2, [r3, #0]
    }

    return st;
}
   28194:	4640      	mov	r0, r8
   28196:	b007      	add	sp, #28
   28198:	ecbd 8b02 	vpop	{d8}
   2819c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (i = 0; i < nfft/2; ++i) {
   281a0:	2d01      	cmp	r5, #1
   281a2:	ddf3      	ble.n	2818c <kiss_fftr_alloc+0xf4>
                3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
   281a4:	4628      	mov	r0, r5
   281a6:	f7f0 fc4b 	bl	18a40 <__aeabi_i2d>
            double phase =
   281aa:	f20f 0b94 	addw	fp, pc, #148	; 0x94
   281ae:	e9db ab00 	ldrd	sl, fp, [fp]
   281b2:	f8d8 7008 	ldr.w	r7, [r8, #8]
                3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
   281b6:	4604      	mov	r4, r0
   281b8:	460d      	mov	r5, r1
                -3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
   281ba:	3601      	adds	r6, #1
   281bc:	4630      	mov	r0, r6
   281be:	f7f0 fc3f 	bl	18a40 <__aeabi_i2d>
   281c2:	4622      	mov	r2, r4
   281c4:	462b      	mov	r3, r5
   281c6:	f7f0 fdcf 	bl	18d68 <__aeabi_ddiv>
   281ca:	4b1f      	ldr	r3, [pc, #124]	; (28248 <kiss_fftr_alloc+0x1b0>)
   281cc:	2200      	movs	r2, #0
   281ce:	f7f0 faeb 	bl	187a8 <__adddf3>
            double phase =
   281d2:	4652      	mov	r2, sl
   281d4:	465b      	mov	r3, fp
   281d6:	f7f0 fc9d 	bl	18b14 <__aeabi_dmul>
            kf_cexp (st->super_twiddles+i,phase);
   281da:	ec41 0b10 	vmov	d0, r0, r1
            double phase =
   281de:	ec41 0b18 	vmov	d8, r0, r1
            kf_cexp (st->super_twiddles+i,phase);
   281e2:	f000 fa1d 	bl	28620 <cos>
   281e6:	ec51 0b10 	vmov	r0, r1, d0
   281ea:	f7f0 ff6b 	bl	190c4 <__aeabi_d2f>
   281ee:	eeb0 0a48 	vmov.f32	s0, s16
   281f2:	eef0 0a68 	vmov.f32	s1, s17
   281f6:	6038      	str	r0, [r7, #0]
   281f8:	f000 fade 	bl	287b8 <sin>
   281fc:	ec51 0b10 	vmov	r0, r1, d0
   28200:	f7f0 ff60 	bl	190c4 <__aeabi_d2f>
        for (i = 0; i < nfft/2; ++i) {
   28204:	454e      	cmp	r6, r9
            kf_cexp (st->super_twiddles+i,phase);
   28206:	6078      	str	r0, [r7, #4]
        for (i = 0; i < nfft/2; ++i) {
   28208:	f107 0708 	add.w	r7, r7, #8
   2820c:	dbd5      	blt.n	281ba <kiss_fftr_alloc+0x122>
   2820e:	e7bd      	b.n	2818c <kiss_fftr_alloc+0xf4>
        return NULL;
   28210:	46a0      	mov	r8, r4
}
   28212:	4640      	mov	r0, r8
   28214:	b007      	add	sp, #28
   28216:	ecbd 8b02 	vpop	{d8}
   2821a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ei_printf("FFT length must be even\n");
   2821e:	480b      	ldr	r0, [pc, #44]	; (2824c <kiss_fftr_alloc+0x1b4>)
   28220:	f7fd ff42 	bl	260a8 <_Z9ei_printfPKcz>
        return NULL;
   28224:	46a8      	mov	r8, r5
}
   28226:	4640      	mov	r0, r8
   28228:	b007      	add	sp, #28
   2822a:	ecbd 8b02 	vpop	{d8}
   2822e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        st = (kiss_fftr_cfg) KISS_FFT_MALLOC (memneeded);
   28232:	4618      	mov	r0, r3
   28234:	f7fd ff54 	bl	260e0 <_Z9ei_mallocj>
   28238:	4680      	mov	r8, r0
   2823a:	e756      	b.n	280ea <kiss_fftr_alloc+0x52>
   2823c:	f3af 8000 	nop.w
   28240:	54442d18 	.word	0x54442d18
   28244:	c00921fb 	.word	0xc00921fb
   28248:	3fe00000 	.word	0x3fe00000
   2824c:	000417c4 	.word	0x000417c4
   28250:	54442d18 	.word	0x54442d18
   28254:	400921fb 	.word	0x400921fb

00028258 <kiss_fftr>:

void kiss_fftr(kiss_fftr_cfg st,const kiss_fft_scalar *timedata,kiss_fft_cpx *freqdata)
{
   28258:	b570      	push	{r4, r5, r6, lr}
   2825a:	4605      	mov	r5, r0
    /* input buffer timedata is stored row-wise */
    int k,ncfft;
    kiss_fft_cpx fpnk,fpk,f1k,f2k,tw,tdc;

    if ( st->substate->inverse) {
   2825c:	6800      	ldr	r0, [r0, #0]
   2825e:	6843      	ldr	r3, [r0, #4]
{
   28260:	b082      	sub	sp, #8
   28262:	4614      	mov	r4, r2
    if ( st->substate->inverse) {
   28264:	2b00      	cmp	r3, #0
   28266:	d166      	bne.n	28336 <kiss_fftr+0xde>
    }

    ncfft = st->substate->nfft;

    /*perform the parallel fft of two real signals packed in real,imag*/
    kiss_fft( st->substate , (const kiss_fft_cpx*)timedata, st->tmpbuf );
   28268:	686a      	ldr	r2, [r5, #4]
    ncfft = st->substate->nfft;
   2826a:	6806      	ldr	r6, [r0, #0]
    kiss_fft( st->substate , (const kiss_fft_cpx*)timedata, st->tmpbuf );
   2826c:	f7ff fc38 	bl	27ae0 <kiss_fft>
     *      yielding DC of input time sequence
     * The difference of tdc.r - tdc.i is the sum of the input (dot product) [1,-1,1,-1...
     *      yielding Nyquist bin of input time sequence
     */

    tdc.r = st->tmpbuf[0].r;
   28270:	686b      	ldr	r3, [r5, #4]
   28272:	edd3 7a00 	vldr	s15, [r3]
    tdc.i = st->tmpbuf[0].i;
   28276:	ed93 7a01 	vldr	s14, [r3, #4]
    C_FIXDIV(tdc,2);
    CHECK_OVERFLOW_OP(tdc.r ,+, tdc.i);
    CHECK_OVERFLOW_OP(tdc.r ,-, tdc.i);
    freqdata[0].r = tdc.r + tdc.i;
    freqdata[ncfft].r = tdc.r - tdc.i;
   2827a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
    freqdata[0].r = tdc.r + tdc.i;
   2827e:	ee77 6a87 	vadd.f32	s13, s15, s14
    freqdata[ncfft].r = tdc.r - tdc.i;
   28282:	ee77 7ac7 	vsub.f32	s15, s15, s14
#ifdef USE_SIMD
    freqdata[ncfft].i = freqdata[0].i = _mm_set1_ps(0);
#else
    freqdata[ncfft].i = freqdata[0].i = 0;
   28286:	2000      	movs	r0, #0
#endif

    for ( k=1;k <= ncfft/2 ; ++k ) {
   28288:	eb06 7cd6 	add.w	ip, r6, r6, lsr #31
   2828c:	2e01      	cmp	r6, #1
    freqdata[0].r = tdc.r + tdc.i;
   2828e:	edc4 6a00 	vstr	s13, [r4]
    freqdata[ncfft].r = tdc.r - tdc.i;
   28292:	ea4f 02c6 	mov.w	r2, r6, lsl #3
   28296:	edc1 7a00 	vstr	s15, [r1]
    for ( k=1;k <= ncfft/2 ; ++k ) {
   2829a:	ea4f 0c6c 	mov.w	ip, ip, asr #1
    freqdata[ncfft].i = freqdata[0].i = 0;
   2829e:	6060      	str	r0, [r4, #4]
   282a0:	6048      	str	r0, [r1, #4]
    for ( k=1;k <= ncfft/2 ; ++k ) {
   282a2:	dd46      	ble.n	28332 <kiss_fftr+0xda>
   282a4:	68ad      	ldr	r5, [r5, #8]
   282a6:	1898      	adds	r0, r3, r2

        C_ADD( f1k, fpk , fpnk );
        C_SUB( f2k, fpk , fpnk );
        C_MUL( tw , f2k , st->super_twiddles[k-1]);

        freqdata[k].r = HALF_OF(f1k.r + tw.r);
   282a8:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
   282ac:	4622      	mov	r2, r4
    for ( k=1;k <= ncfft/2 ; ++k ) {
   282ae:	2401      	movs	r4, #1
        fpnk.i = - st->tmpbuf[ncfft-k].i;
   282b0:	ed10 5a01 	vldr	s10, [r0, #-4]
        fpk    = st->tmpbuf[k];
   282b4:	edd3 6a03 	vldr	s13, [r3, #12]
   282b8:	edd3 4a02 	vldr	s9, [r3, #8]
        fpnk.r =   st->tmpbuf[ncfft-k].r;
   282bc:	ed10 7a02 	vldr	s14, [r0, #-8]
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
   282c0:	ed95 3a00 	vldr	s6, [r5]
   282c4:	ed95 4a01 	vldr	s8, [r5, #4]
        C_SUB( f2k, fpk , fpnk );
   282c8:	ee75 7a26 	vadd.f32	s15, s10, s13
   282cc:	ee74 3ac7 	vsub.f32	s7, s9, s14
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
   282d0:	ee24 6a67 	vnmul.f32	s12, s8, s15
   282d4:	ee67 7a83 	vmul.f32	s15, s15, s6
   282d8:	eea3 6a83 	vfma.f32	s12, s7, s6
    for ( k=1;k <= ncfft/2 ; ++k ) {
   282dc:	3401      	adds	r4, #1
   282de:	4564      	cmp	r4, ip
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
   282e0:	eee3 7a84 	vfma.f32	s15, s7, s8
    for ( k=1;k <= ncfft/2 ; ++k ) {
   282e4:	f103 0308 	add.w	r3, r3, #8
   282e8:	f1a0 0008 	sub.w	r0, r0, #8
   282ec:	ee76 6ac5 	vsub.f32	s13, s13, s10
        C_ADD( f1k, fpk , fpnk );
   282f0:	ee37 7a24 	vadd.f32	s14, s14, s9
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
   282f4:	ee37 5aa6 	vadd.f32	s10, s15, s13
        freqdata[k].r = HALF_OF(f1k.r + tw.r);
   282f8:	ee77 4a06 	vadd.f32	s9, s14, s12
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
   282fc:	ee77 7ae6 	vsub.f32	s15, s15, s13
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
   28300:	ee37 7a46 	vsub.f32	s14, s14, s12
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
   28304:	ee65 6a25 	vmul.f32	s13, s10, s11
        freqdata[k].r = HALF_OF(f1k.r + tw.r);
   28308:	ee24 6aa5 	vmul.f32	s12, s9, s11
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
   2830c:	ee27 7a25 	vmul.f32	s14, s14, s11
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
   28310:	ee67 7aa5 	vmul.f32	s15, s15, s11
        freqdata[k].r = HALF_OF(f1k.r + tw.r);
   28314:	ed82 6a02 	vstr	s12, [r2, #8]
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
   28318:	edc2 6a03 	vstr	s13, [r2, #12]
    for ( k=1;k <= ncfft/2 ; ++k ) {
   2831c:	f105 0508 	add.w	r5, r5, #8
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
   28320:	ed01 7a02 	vstr	s14, [r1, #-8]
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
   28324:	ed41 7a01 	vstr	s15, [r1, #-4]
    for ( k=1;k <= ncfft/2 ; ++k ) {
   28328:	f102 0208 	add.w	r2, r2, #8
   2832c:	f1a1 0108 	sub.w	r1, r1, #8
   28330:	ddbe      	ble.n	282b0 <kiss_fftr+0x58>
    }
}
   28332:	b002      	add	sp, #8
   28334:	bd70      	pop	{r4, r5, r6, pc}
        ei_printf("kiss fft usage error: improper alloc\n");
   28336:	4803      	ldr	r0, [pc, #12]	; (28344 <kiss_fftr+0xec>)
   28338:	9101      	str	r1, [sp, #4]
   2833a:	f7fd feb5 	bl	260a8 <_Z9ei_printfPKcz>
    ncfft = st->substate->nfft;
   2833e:	6828      	ldr	r0, [r5, #0]
   28340:	9901      	ldr	r1, [sp, #4]
   28342:	e791      	b.n	28268 <kiss_fftr+0x10>
   28344:	000417e0 	.word	0x000417e0

00028348 <_ZN2ei3dct9transformEPfj>:
#ifndef M_PI
#define M_PI 3.14159265358979323846264338327950288
#endif // M_PI

// DCT type II, unscaled
int ei::dct::transform(float vector[], size_t len) {
   28348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2834c:	ed2d 8b02 	vpush	{d8}
    const size_t fft_data_out_size = (len / 2 + 1) * sizeof(ei::fft_complex_t);
   28350:	084c      	lsrs	r4, r1, #1
int ei::dct::transform(float vector[], size_t len) {
   28352:	b08d      	sub	sp, #52	; 0x34
    const size_t fft_data_out_size = (len / 2 + 1) * sizeof(ei::fft_complex_t);
   28354:	1c65      	adds	r5, r4, #1
   28356:	00ee      	lsls	r6, r5, #3
int ei::dct::transform(float vector[], size_t len) {
   28358:	460f      	mov	r7, r1
   2835a:	9103      	str	r1, [sp, #12]
   2835c:	9005      	str	r0, [sp, #20]
    const size_t fft_data_in_size = len * sizeof(float);

    // Allocate KissFFT input / output buffer
    fft_complex_t *fft_data_out =
        (ei::fft_complex_t*)ei_dsp_calloc(fft_data_out_size, 1);
   2835e:	2101      	movs	r1, #1
   28360:	4630      	mov	r0, r6
   28362:	f7fd febf 	bl	260e4 <_Z9ei_callocjj>
    if (!fft_data_out) {
   28366:	2800      	cmp	r0, #0
   28368:	f000 8142 	beq.w	285f0 <_ZN2ei3dct9transformEPfj+0x2a8>
        return ei::EIDSP_OUT_OF_MEM;
    }

    float *fft_data_in = (float*)ei_dsp_calloc(fft_data_in_size, 1);
   2836c:	00bf      	lsls	r7, r7, #2
   2836e:	4683      	mov	fp, r0
   28370:	2101      	movs	r1, #1
   28372:	4638      	mov	r0, r7
   28374:	f7fd feb6 	bl	260e4 <_Z9ei_callocjj>
    if (!fft_data_in) {
   28378:	9004      	str	r0, [sp, #16]
   2837a:	2800      	cmp	r0, #0
   2837c:	f000 813a 	beq.w	285f4 <_ZN2ei3dct9transformEPfj+0x2ac>
        return ei::EIDSP_OUT_OF_MEM;
    }

    // Preprocess the input buffer with the data from the vector
    size_t halfLen = len / 2;
    for (size_t i = 0; i < halfLen; i++) {
   28380:	b184      	cbz	r4, 283a4 <_ZN2ei3dct9transformEPfj+0x5c>
   28382:	9b05      	ldr	r3, [sp, #20]
   28384:	4602      	mov	r2, r0
   28386:	f1a6 0c08 	sub.w	ip, r6, #8
   2838a:	449c      	add	ip, r3
   2838c:	4601      	mov	r1, r0
   2838e:	443a      	add	r2, r7
        fft_data_in[i] = vector[i * 2];
   28390:	6818      	ldr	r0, [r3, #0]
   28392:	f841 0b04 	str.w	r0, [r1], #4
    for (size_t i = 0; i < halfLen; i++) {
   28396:	3308      	adds	r3, #8
        fft_data_in[len - 1 - i] = vector[i * 2 + 1];
   28398:	f853 0c04 	ldr.w	r0, [r3, #-4]
   2839c:	f842 0d04 	str.w	r0, [r2, #-4]!
    for (size_t i = 0; i < halfLen; i++) {
   283a0:	459c      	cmp	ip, r3
   283a2:	d1f5      	bne.n	28390 <_ZN2ei3dct9transformEPfj+0x48>
    }
    if (len % 2 == 1) {
   283a4:	9b03      	ldr	r3, [sp, #12]
   283a6:	07db      	lsls	r3, r3, #31
   283a8:	d424      	bmi.n	283f4 <_ZN2ei3dct9transformEPfj+0xac>
            // pad to the rigth with zeros
            memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(float));
        }

#if EIDSP_USE_CMSIS_DSP
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
   283aa:	9b03      	ldr	r3, [sp, #12]
   283ac:	2b20      	cmp	r3, #32
   283ae:	d02c      	beq.n	2840a <_ZN2ei3dct9transformEPfj+0xc2>
   283b0:	2b40      	cmp	r3, #64	; 0x40
   283b2:	d012      	beq.n	283da <_ZN2ei3dct9transformEPfj+0x92>
   283b4:	2b80      	cmp	r3, #128	; 0x80
   283b6:	d010      	beq.n	283da <_ZN2ei3dct9transformEPfj+0x92>
   283b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   283bc:	d04f      	beq.n	2845e <_ZN2ei3dct9transformEPfj+0x116>
   283be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   283c2:	d00a      	beq.n	283da <_ZN2ei3dct9transformEPfj+0x92>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
   283c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   283c8:	d007      	beq.n	283da <_ZN2ei3dct9transformEPfj+0x92>
   283ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   283ce:	4618      	mov	r0, r3
   283d0:	d003      	beq.n	283da <_ZN2ei3dct9transformEPfj+0x92>
   283d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   283d6:	f040 80f9 	bne.w	285cc <_ZN2ei3dct9transformEPfj+0x284>
                status = ARM_MATH_SUCCESS;
                break;
            }
#endif
            default:
                return EIDSP_FFT_TABLE_NOT_LOADED;
   283da:	4c8b      	ldr	r4, [pc, #556]	; (28608 <_ZN2ei3dct9transformEPfj+0x2c0>)
        fft_data_in[halfLen] = vector[len - 1];
    }

    int r = ei::numpy::rfft(fft_data_in, len, fft_data_out, (len / 2 + 1), len);
    if (r != 0) {
        ei_dsp_free(fft_data_in, fft_data_in_size);
   283dc:	9804      	ldr	r0, [sp, #16]
   283de:	f7fd fe91 	bl	26104 <_Z7ei_freePv>
        ei_dsp_free(fft_data_out, fft_data_out_size);
   283e2:	4658      	mov	r0, fp
   283e4:	f7fd fe8e 	bl	26104 <_Z7ei_freePv>
    }
    ei_dsp_free(fft_data_in, fft_data_in_size);
    ei_dsp_free(fft_data_out, fft_data_out_size);

    return 0;
   283e8:	4620      	mov	r0, r4
   283ea:	b00d      	add	sp, #52	; 0x34
   283ec:	ecbd 8b02 	vpop	{d8}
   283f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        fft_data_in[halfLen] = vector[len - 1];
   283f4:	9b05      	ldr	r3, [sp, #20]
   283f6:	441f      	add	r7, r3
   283f8:	9b04      	ldr	r3, [sp, #16]
   283fa:	f857 2c04 	ldr.w	r2, [r7, #-4]
   283fe:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   28402:	601a      	str	r2, [r3, #0]
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
   28404:	9b03      	ldr	r3, [sp, #12]
   28406:	2b20      	cmp	r3, #32
   28408:	d1d2      	bne.n	283b0 <_ZN2ei3dct9transformEPfj+0x68>
                rfft_instance->fftLenRFFT = 32U;
   2840a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
                S->bitRevLength = arm_cfft_sR_f32_len16.bitRevLength;
   2840e:	4b7f      	ldr	r3, [pc, #508]	; (2860c <_ZN2ei3dct9transformEPfj+0x2c4>)
                rfft_instance->pTwiddleRFFT = (float32_t *) twiddleCoef_rfft_32;
   28410:	4a7f      	ldr	r2, [pc, #508]	; (28610 <_ZN2ei3dct9transformEPfj+0x2c8>)
   28412:	920b      	str	r2, [sp, #44]	; 0x2c
                S->bitRevLength = arm_cfft_sR_f32_len16.bitRevLength;
   28414:	899a      	ldrh	r2, [r3, #12]
   28416:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
   2841a:	689a      	ldr	r2, [r3, #8]
                S->pTwiddle = arm_cfft_sR_f32_len16.pTwiddle;
   2841c:	685b      	ldr	r3, [r3, #4]
   2841e:	9307      	str	r3, [sp, #28]
        if (a_buffer) {
            buffer = a_buffer;
            buffer_managed_by_me = false;
        }
        else {
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   28420:	2101      	movs	r1, #1
                S->fftLen = 16U;
   28422:	2310      	movs	r3, #16
   28424:	2080      	movs	r0, #128	; 0x80
                S->pTwiddle = arm_cfft_sR_f32_len16.pTwiddle;
   28426:	9208      	str	r2, [sp, #32]
                S->fftLen = 16U;
   28428:	f8ad 3018 	strh.w	r3, [sp, #24]
   2842c:	f7fd fe5a 	bl	260e4 <_Z9ei_callocjj>
            EI_DSP_MATRIX(fft_output, 1, n_fft);
   28430:	4607      	mov	r7, r0
   28432:	2800      	cmp	r0, #0
   28434:	f000 80c8 	beq.w	285c8 <_ZN2ei3dct9transformEPfj+0x280>
            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
   28438:	4602      	mov	r2, r0
   2843a:	9904      	ldr	r1, [sp, #16]
   2843c:	2300      	movs	r3, #0
   2843e:	a806      	add	r0, sp, #24
   28440:	f00a ffca 	bl	333d8 <arm_rfft_fast_f32>
            output[0].r = fft_output.buffer[0];
   28444:	683a      	ldr	r2, [r7, #0]
   28446:	f8cb 2000 	str.w	r2, [fp]
            output[n_fft_out_features - 1].r = fft_output.buffer[1];
   2844a:	f1a6 0308 	sub.w	r3, r6, #8
            output[0].i = 0.0f;
   2844e:	2200      	movs	r2, #0
   28450:	f8cb 2004 	str.w	r2, [fp, #4]
            output[n_fft_out_features - 1].r = fft_output.buffer[1];
   28454:	445b      	add	r3, fp
   28456:	6879      	ldr	r1, [r7, #4]
   28458:	6019      	str	r1, [r3, #0]
            output[n_fft_out_features - 1].i = 0.0f;
   2845a:	605a      	str	r2, [r3, #4]
   2845c:	e028      	b.n	284b0 <_ZN2ei3dct9transformEPfj+0x168>
                rfft_instance->fftLenRFFT = 256U;
   2845e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
                S->bitRevLength = arm_cfft_sR_f32_len128.bitRevLength;
   28462:	4b6c      	ldr	r3, [pc, #432]	; (28614 <_ZN2ei3dct9transformEPfj+0x2cc>)
                rfft_instance->pTwiddleRFFT = (float32_t *) twiddleCoef_rfft_256;
   28464:	4a6c      	ldr	r2, [pc, #432]	; (28618 <_ZN2ei3dct9transformEPfj+0x2d0>)
   28466:	920b      	str	r2, [sp, #44]	; 0x2c
                S->bitRevLength = arm_cfft_sR_f32_len128.bitRevLength;
   28468:	899a      	ldrh	r2, [r3, #12]
   2846a:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
   2846e:	689a      	ldr	r2, [r3, #8]
                S->pTwiddle = arm_cfft_sR_f32_len128.pTwiddle;
   28470:	685b      	ldr	r3, [r3, #4]
   28472:	9307      	str	r3, [sp, #28]
   28474:	2101      	movs	r1, #1
                S->fftLen = 128U;
   28476:	2380      	movs	r3, #128	; 0x80
   28478:	f44f 6080 	mov.w	r0, #1024	; 0x400
                S->pTwiddle = arm_cfft_sR_f32_len128.pTwiddle;
   2847c:	9208      	str	r2, [sp, #32]
                S->fftLen = 128U;
   2847e:	f8ad 3018 	strh.w	r3, [sp, #24]
   28482:	f7fd fe2f 	bl	260e4 <_Z9ei_callocjj>
            EI_DSP_MATRIX(fft_output, 1, n_fft);
   28486:	4607      	mov	r7, r0
   28488:	2800      	cmp	r0, #0
   2848a:	f000 809d 	beq.w	285c8 <_ZN2ei3dct9transformEPfj+0x280>
            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
   2848e:	4602      	mov	r2, r0
   28490:	2300      	movs	r3, #0
   28492:	9904      	ldr	r1, [sp, #16]
   28494:	a806      	add	r0, sp, #24
   28496:	f00a ff9f 	bl	333d8 <arm_rfft_fast_f32>
            output[0].r = fft_output.buffer[0];
   2849a:	683b      	ldr	r3, [r7, #0]
   2849c:	f8cb 3000 	str.w	r3, [fp]
            output[n_fft_out_features - 1].r = fft_output.buffer[1];
   284a0:	3e08      	subs	r6, #8
            output[0].i = 0.0f;
   284a2:	2300      	movs	r3, #0
   284a4:	f8cb 3004 	str.w	r3, [fp, #4]
            output[n_fft_out_features - 1].r = fft_output.buffer[1];
   284a8:	445e      	add	r6, fp
   284aa:	687a      	ldr	r2, [r7, #4]
   284ac:	6032      	str	r2, [r6, #0]
            output[n_fft_out_features - 1].i = 0.0f;
   284ae:	6073      	str	r3, [r6, #4]
   284b0:	463a      	mov	r2, r7
   284b2:	465b      	mov	r3, fp
int ei::dct::transform(float vector[], size_t len) {
   284b4:	2101      	movs	r1, #1
                output[ix].r = fft_output.buffer[fft_output_buffer_ix];
   284b6:	6890      	ldr	r0, [r2, #8]
   284b8:	6098      	str	r0, [r3, #8]
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
   284ba:	3101      	adds	r1, #1
                output[ix].i = fft_output.buffer[fft_output_buffer_ix + 1];
   284bc:	68d0      	ldr	r0, [r2, #12]
   284be:	60d8      	str	r0, [r3, #12]
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
   284c0:	428c      	cmp	r4, r1
   284c2:	f102 0208 	add.w	r2, r2, #8
   284c6:	f103 0308 	add.w	r3, r3, #8
   284ca:	d8f4      	bhi.n	284b6 <_ZN2ei3dct9transformEPfj+0x16e>
        }
    }

    ~ei_matrix() {
        if (buffer && buffer_managed_by_me) {
            ei_free(buffer);
   284cc:	4638      	mov	r0, r7
   284ce:	f7fd fe19 	bl	26104 <_Z7ei_freePv>
        float temp = i * M_PI / (len * 2);
   284d2:	9b03      	ldr	r3, [sp, #12]
   284d4:	0058      	lsls	r0, r3, #1
   284d6:	f7f0 faa3 	bl	18a20 <__aeabi_ui2d>
   284da:	f8dd a014 	ldr.w	sl, [sp, #20]
   284de:	4680      	mov	r8, r0
   284e0:	4689      	mov	r9, r1
   284e2:	465f      	mov	r7, fp
   284e4:	2600      	movs	r6, #0
   284e6:	4630      	mov	r0, r6
   284e8:	f7f0 fa9a 	bl	18a20 <__aeabi_ui2d>
   284ec:	a344      	add	r3, pc, #272	; (adr r3, 28600 <_ZN2ei3dct9transformEPfj+0x2b8>)
   284ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   284f2:	f7f0 fb0f 	bl	18b14 <__aeabi_dmul>
   284f6:	464b      	mov	r3, r9
   284f8:	4642      	mov	r2, r8
   284fa:	f7f0 fc35 	bl	18d68 <__aeabi_ddiv>
   284fe:	f7f0 fde1 	bl	190c4 <__aeabi_d2f>
  { return __builtin_cosf(__x); }
   28502:	ee00 0a10 	vmov	s0, r0
   28506:	ee08 0a90 	vmov	s17, r0
   2850a:	f000 f9e3 	bl	288d4 <cosf>
   2850e:	eeb0 8a40 	vmov.f32	s16, s0
  { return __builtin_sinf(__x); }
   28512:	eeb0 0a68 	vmov.f32	s0, s17
   28516:	f000 faab 	bl	28a70 <sinf>
        vector[i] = fft_data_out[i].r * cos(temp) + fft_data_out[i].i * sin(temp);
   2851a:	edd7 7a01 	vldr	s15, [r7, #4]
   2851e:	463b      	mov	r3, r7
   28520:	ed93 7a00 	vldr	s14, [r3]
   28524:	ee60 7a27 	vmul.f32	s15, s0, s15
    for (; i < len / 2 + 1; i++) {
   28528:	42b4      	cmp	r4, r6
        vector[i] = fft_data_out[i].r * cos(temp) + fft_data_out[i].i * sin(temp);
   2852a:	eee7 7a08 	vfma.f32	s15, s14, s16
   2852e:	f107 0708 	add.w	r7, r7, #8
    for (; i < len / 2 + 1; i++) {
   28532:	f106 0601 	add.w	r6, r6, #1
        vector[i] = fft_data_out[i].r * cos(temp) + fft_data_out[i].i * sin(temp);
   28536:	ecea 7a01 	vstmia	sl!, {s15}
    for (; i < len / 2 + 1; i++) {
   2853a:	d1d4      	bne.n	284e6 <_ZN2ei3dct9transformEPfj+0x19e>
    for (; i < len; i++) {
   2853c:	9b03      	ldr	r3, [sp, #12]
   2853e:	429d      	cmp	r5, r3
   28540:	d235      	bcs.n	285ae <_ZN2ei3dct9transformEPfj+0x266>
   28542:	9a05      	ldr	r2, [sp, #20]
        float temp = i * M_PI / (len * 2);
   28544:	f8cd b00c 	str.w	fp, [sp, #12]
   28548:	a72d      	add	r7, pc, #180	; (adr r7, 28600 <_ZN2ei3dct9transformEPfj+0x2b8>)
   2854a:	e9d7 6700 	ldrd	r6, r7, [r7]
   2854e:	1b1c      	subs	r4, r3, r4
   28550:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
   28554:	eb02 0a85 	add.w	sl, r2, r5, lsl #2
   28558:	469b      	mov	fp, r3
   2855a:	4628      	mov	r0, r5
   2855c:	f7f0 fa60 	bl	18a20 <__aeabi_ui2d>
   28560:	4632      	mov	r2, r6
   28562:	463b      	mov	r3, r7
   28564:	f7f0 fad6 	bl	18b14 <__aeabi_dmul>
   28568:	4642      	mov	r2, r8
   2856a:	464b      	mov	r3, r9
   2856c:	f7f0 fbfc 	bl	18d68 <__aeabi_ddiv>
   28570:	f7f0 fda8 	bl	190c4 <__aeabi_d2f>
  { return __builtin_cosf(__x); }
   28574:	ee00 0a10 	vmov	s0, r0
   28578:	ee08 0a90 	vmov	s17, r0
   2857c:	f000 f9aa 	bl	288d4 <cosf>
   28580:	eeb0 8a40 	vmov.f32	s16, s0
  { return __builtin_sinf(__x); }
   28584:	eeb0 0a68 	vmov.f32	s0, s17
   28588:	f000 fa72 	bl	28a70 <sinf>
        vector[i] = fft_data_out[conj_idx].r * cos(temp) - fft_data_out[conj_idx].i * sin(temp);
   2858c:	ed54 7a01 	vldr	s15, [r4, #-4]
   28590:	ed14 7a02 	vldr	s14, [r4, #-8]
   28594:	ee67 7ac0 	vnmul.f32	s15, s15, s0
    for (; i < len; i++) {
   28598:	3501      	adds	r5, #1
        vector[i] = fft_data_out[conj_idx].r * cos(temp) - fft_data_out[conj_idx].i * sin(temp);
   2859a:	eee7 7a08 	vfma.f32	s15, s14, s16
    for (; i < len; i++) {
   2859e:	45ab      	cmp	fp, r5
        vector[i] = fft_data_out[conj_idx].r * cos(temp) - fft_data_out[conj_idx].i * sin(temp);
   285a0:	f1a4 0408 	sub.w	r4, r4, #8
   285a4:	ecea 7a01 	vstmia	sl!, {s15}
    for (; i < len; i++) {
   285a8:	d1d7      	bne.n	2855a <_ZN2ei3dct9transformEPfj+0x212>
   285aa:	f8dd b00c 	ldr.w	fp, [sp, #12]
    ei_dsp_free(fft_data_in, fft_data_in_size);
   285ae:	9804      	ldr	r0, [sp, #16]
   285b0:	f7fd fda8 	bl	26104 <_Z7ei_freePv>
    ei_dsp_free(fft_data_out, fft_data_out_size);
   285b4:	4658      	mov	r0, fp
   285b6:	f7fd fda5 	bl	26104 <_Z7ei_freePv>
    return 0;
   285ba:	2400      	movs	r4, #0
   285bc:	4620      	mov	r0, r4
   285be:	b00d      	add	sp, #52	; 0x34
   285c0:	ecbd 8b02 	vpop	{d8}
   285c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                return status;
   285c8:	4c14      	ldr	r4, [pc, #80]	; (2861c <_ZN2ei3dct9transformEPfj+0x2d4>)
   285ca:	e707      	b.n	283dc <_ZN2ei3dct9transformEPfj+0x94>
        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
   285cc:	2300      	movs	r3, #0
   285ce:	aa06      	add	r2, sp, #24
   285d0:	9200      	str	r2, [sp, #0]
   285d2:	4619      	mov	r1, r3
   285d4:	461a      	mov	r2, r3
   285d6:	f7ff fd5f 	bl	28098 <kiss_fftr_alloc>
        if (!cfg) {
   285da:	4606      	mov	r6, r0
   285dc:	2800      	cmp	r0, #0
   285de:	d0f3      	beq.n	285c8 <_ZN2ei3dct9transformEPfj+0x280>
        kiss_fftr(cfg, fft_input, (kiss_fft_cpx*)output);
   285e0:	9904      	ldr	r1, [sp, #16]
   285e2:	465a      	mov	r2, fp
   285e4:	f7ff fe38 	bl	28258 <kiss_fftr>
        ei_dsp_free(cfg, kiss_fftr_mem_length);
   285e8:	4630      	mov	r0, r6
   285ea:	f7fd fd8b 	bl	26104 <_Z7ei_freePv>
    if (r != 0) {
   285ee:	e770      	b.n	284d2 <_ZN2ei3dct9transformEPfj+0x18a>
        return ei::EIDSP_OUT_OF_MEM;
   285f0:	4c0a      	ldr	r4, [pc, #40]	; (2861c <_ZN2ei3dct9transformEPfj+0x2d4>)
   285f2:	e6f9      	b.n	283e8 <_ZN2ei3dct9transformEPfj+0xa0>
        ei_dsp_free(fft_data_out, fft_data_out_size);
   285f4:	4658      	mov	r0, fp
   285f6:	f7fd fd85 	bl	26104 <_Z7ei_freePv>
        return ei::EIDSP_OUT_OF_MEM;
   285fa:	4c08      	ldr	r4, [pc, #32]	; (2861c <_ZN2ei3dct9transformEPfj+0x2d4>)
   285fc:	e6f4      	b.n	283e8 <_ZN2ei3dct9transformEPfj+0xa0>
   285fe:	bf00      	nop
   28600:	54442d18 	.word	0x54442d18
   28604:	400921fb 	.word	0x400921fb
   28608:	fffffc08 	.word	0xfffffc08
   2860c:	0004314c 	.word	0x0004314c
   28610:	000430bc 	.word	0x000430bc
   28614:	0004313c 	.word	0x0004313c
   28618:	00042cbc 	.word	0x00042cbc
   2861c:	fffffc16 	.word	0xfffffc16

00028620 <cos>:
   28620:	ec51 0b10 	vmov	r0, r1, d0
   28624:	4a20      	ldr	r2, [pc, #128]	; (286a8 <cos+0x88>)
   28626:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   2862a:	4293      	cmp	r3, r2
   2862c:	dd20      	ble.n	28670 <cos+0x50>
   2862e:	b500      	push	{lr}
   28630:	4a1e      	ldr	r2, [pc, #120]	; (286ac <cos+0x8c>)
   28632:	4293      	cmp	r3, r2
   28634:	b085      	sub	sp, #20
   28636:	dd09      	ble.n	2864c <cos+0x2c>
   28638:	ee10 2a10 	vmov	r2, s0
   2863c:	460b      	mov	r3, r1
   2863e:	f7f0 f8b1 	bl	187a4 <__aeabi_dsub>
   28642:	ec41 0b10 	vmov	d0, r0, r1
   28646:	b005      	add	sp, #20
   28648:	f85d fb04 	ldr.w	pc, [sp], #4
   2864c:	4668      	mov	r0, sp
   2864e:	f000 fadb 	bl	28c08 <__ieee754_rem_pio2>
   28652:	f000 0003 	and.w	r0, r0, #3
   28656:	2801      	cmp	r0, #1
   28658:	ed9d 1b02 	vldr	d1, [sp, #8]
   2865c:	ed9d 0b00 	vldr	d0, [sp]
   28660:	d00a      	beq.n	28678 <cos+0x58>
   28662:	2802      	cmp	r0, #2
   28664:	d016      	beq.n	28694 <cos+0x74>
   28666:	b190      	cbz	r0, 2868e <cos+0x6e>
   28668:	2001      	movs	r0, #1
   2866a:	f001 fd51 	bl	2a110 <__kernel_sin>
   2866e:	e7ea      	b.n	28646 <cos+0x26>
   28670:	ed9f 1b0b 	vldr	d1, [pc, #44]	; 286a0 <cos+0x80>
   28674:	f000 bfe4 	b.w	29640 <__kernel_cos>
   28678:	f001 fd4a 	bl	2a110 <__kernel_sin>
   2867c:	ec53 2b10 	vmov	r2, r3, d0
   28680:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   28684:	ee00 3a90 	vmov	s1, r3
   28688:	b005      	add	sp, #20
   2868a:	f85d fb04 	ldr.w	pc, [sp], #4
   2868e:	f000 ffd7 	bl	29640 <__kernel_cos>
   28692:	e7d8      	b.n	28646 <cos+0x26>
   28694:	f000 ffd4 	bl	29640 <__kernel_cos>
   28698:	e7f0      	b.n	2867c <cos+0x5c>
   2869a:	bf00      	nop
   2869c:	f3af 8000 	nop.w
	...
   286a8:	3fe921fb 	.word	0x3fe921fb
   286ac:	7fefffff 	.word	0x7fefffff

000286b0 <floor>:
   286b0:	ec51 0b10 	vmov	r0, r1, d0
   286b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   286b6:	f3c1 530a 	ubfx	r3, r1, #20, #11
   286ba:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   286be:	2d13      	cmp	r5, #19
   286c0:	ee10 6a10 	vmov	r6, s0
   286c4:	460c      	mov	r4, r1
   286c6:	dc30      	bgt.n	2872a <floor+0x7a>
   286c8:	2d00      	cmp	r5, #0
   286ca:	db1e      	blt.n	2870a <floor+0x5a>
   286cc:	4f38      	ldr	r7, [pc, #224]	; (287b0 <floor+0x100>)
   286ce:	412f      	asrs	r7, r5
   286d0:	ea01 0307 	and.w	r3, r1, r7
   286d4:	4303      	orrs	r3, r0
   286d6:	d02d      	beq.n	28734 <floor+0x84>
   286d8:	a333      	add	r3, pc, #204	; (adr r3, 287a8 <floor+0xf8>)
   286da:	e9d3 2300 	ldrd	r2, r3, [r3]
   286de:	f7f0 f863 	bl	187a8 <__adddf3>
   286e2:	2200      	movs	r2, #0
   286e4:	2300      	movs	r3, #0
   286e6:	f7f0 fca5 	bl	19034 <__aeabi_dcmpgt>
   286ea:	b148      	cbz	r0, 28700 <floor+0x50>
   286ec:	2c00      	cmp	r4, #0
   286ee:	da04      	bge.n	286fa <floor+0x4a>
   286f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   286f4:	fa43 f505 	asr.w	r5, r3, r5
   286f8:	442c      	add	r4, r5
   286fa:	ea24 0407 	bic.w	r4, r4, r7
   286fe:	2600      	movs	r6, #0
   28700:	4623      	mov	r3, r4
   28702:	4632      	mov	r2, r6
   28704:	ec43 2b10 	vmov	d0, r2, r3
   28708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2870a:	a327      	add	r3, pc, #156	; (adr r3, 287a8 <floor+0xf8>)
   2870c:	e9d3 2300 	ldrd	r2, r3, [r3]
   28710:	f7f0 f84a 	bl	187a8 <__adddf3>
   28714:	2200      	movs	r2, #0
   28716:	2300      	movs	r3, #0
   28718:	f7f0 fc8c 	bl	19034 <__aeabi_dcmpgt>
   2871c:	2800      	cmp	r0, #0
   2871e:	d0ef      	beq.n	28700 <floor+0x50>
   28720:	2c00      	cmp	r4, #0
   28722:	db29      	blt.n	28778 <floor+0xc8>
   28724:	2600      	movs	r6, #0
   28726:	4634      	mov	r4, r6
   28728:	e7ea      	b.n	28700 <floor+0x50>
   2872a:	2d33      	cmp	r5, #51	; 0x33
   2872c:	dd05      	ble.n	2873a <floor+0x8a>
   2872e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   28732:	d019      	beq.n	28768 <floor+0xb8>
   28734:	ec41 0b10 	vmov	d0, r0, r1
   28738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2873a:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   2873e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   28742:	40df      	lsrs	r7, r3
   28744:	4207      	tst	r7, r0
   28746:	d0f5      	beq.n	28734 <floor+0x84>
   28748:	a317      	add	r3, pc, #92	; (adr r3, 287a8 <floor+0xf8>)
   2874a:	e9d3 2300 	ldrd	r2, r3, [r3]
   2874e:	f7f0 f82b 	bl	187a8 <__adddf3>
   28752:	2200      	movs	r2, #0
   28754:	2300      	movs	r3, #0
   28756:	f7f0 fc6d 	bl	19034 <__aeabi_dcmpgt>
   2875a:	2800      	cmp	r0, #0
   2875c:	d0d0      	beq.n	28700 <floor+0x50>
   2875e:	2c00      	cmp	r4, #0
   28760:	db13      	blt.n	2878a <floor+0xda>
   28762:	ea26 0607 	bic.w	r6, r6, r7
   28766:	e7cb      	b.n	28700 <floor+0x50>
   28768:	ee10 2a10 	vmov	r2, s0
   2876c:	460b      	mov	r3, r1
   2876e:	f7f0 f81b 	bl	187a8 <__adddf3>
   28772:	ec41 0b10 	vmov	d0, r0, r1
   28776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28778:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
   2877c:	4a0d      	ldr	r2, [pc, #52]	; (287b4 <floor+0x104>)
   2877e:	431e      	orrs	r6, r3
   28780:	2e00      	cmp	r6, #0
   28782:	bf18      	it	ne
   28784:	4614      	movne	r4, r2
   28786:	2600      	movs	r6, #0
   28788:	e7ba      	b.n	28700 <floor+0x50>
   2878a:	2d14      	cmp	r5, #20
   2878c:	d008      	beq.n	287a0 <floor+0xf0>
   2878e:	2301      	movs	r3, #1
   28790:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   28794:	fa03 f505 	lsl.w	r5, r3, r5
   28798:	19ae      	adds	r6, r5, r6
   2879a:	bf28      	it	cs
   2879c:	18e4      	addcs	r4, r4, r3
   2879e:	e7e0      	b.n	28762 <floor+0xb2>
   287a0:	3401      	adds	r4, #1
   287a2:	e7de      	b.n	28762 <floor+0xb2>
   287a4:	f3af 8000 	nop.w
   287a8:	8800759c 	.word	0x8800759c
   287ac:	7e37e43c 	.word	0x7e37e43c
   287b0:	000fffff 	.word	0x000fffff
   287b4:	bff00000 	.word	0xbff00000

000287b8 <sin>:
   287b8:	ec51 0b10 	vmov	r0, r1, d0
   287bc:	4a20      	ldr	r2, [pc, #128]	; (28840 <sin+0x88>)
   287be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   287c2:	4293      	cmp	r3, r2
   287c4:	dd27      	ble.n	28816 <sin+0x5e>
   287c6:	b500      	push	{lr}
   287c8:	4a1e      	ldr	r2, [pc, #120]	; (28844 <sin+0x8c>)
   287ca:	4293      	cmp	r3, r2
   287cc:	b085      	sub	sp, #20
   287ce:	dd09      	ble.n	287e4 <sin+0x2c>
   287d0:	ee10 2a10 	vmov	r2, s0
   287d4:	460b      	mov	r3, r1
   287d6:	f7ef ffe5 	bl	187a4 <__aeabi_dsub>
   287da:	ec41 0b10 	vmov	d0, r0, r1
   287de:	b005      	add	sp, #20
   287e0:	f85d fb04 	ldr.w	pc, [sp], #4
   287e4:	4668      	mov	r0, sp
   287e6:	f000 fa0f 	bl	28c08 <__ieee754_rem_pio2>
   287ea:	f000 0003 	and.w	r0, r0, #3
   287ee:	2801      	cmp	r0, #1
   287f0:	ed9d 1b02 	vldr	d1, [sp, #8]
   287f4:	ed9d 0b00 	vldr	d0, [sp]
   287f8:	d012      	beq.n	28820 <sin+0x68>
   287fa:	2802      	cmp	r0, #2
   287fc:	d017      	beq.n	2882e <sin+0x76>
   287fe:	b190      	cbz	r0, 28826 <sin+0x6e>
   28800:	f000 ff1e 	bl	29640 <__kernel_cos>
   28804:	ec53 2b10 	vmov	r2, r3, d0
   28808:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   2880c:	ee00 3a90 	vmov	s1, r3
   28810:	b005      	add	sp, #20
   28812:	f85d fb04 	ldr.w	pc, [sp], #4
   28816:	ed9f 1b08 	vldr	d1, [pc, #32]	; 28838 <sin+0x80>
   2881a:	2000      	movs	r0, #0
   2881c:	f001 bc78 	b.w	2a110 <__kernel_sin>
   28820:	f000 ff0e 	bl	29640 <__kernel_cos>
   28824:	e7db      	b.n	287de <sin+0x26>
   28826:	2001      	movs	r0, #1
   28828:	f001 fc72 	bl	2a110 <__kernel_sin>
   2882c:	e7d7      	b.n	287de <sin+0x26>
   2882e:	2001      	movs	r0, #1
   28830:	f001 fc6e 	bl	2a110 <__kernel_sin>
   28834:	e7e6      	b.n	28804 <sin+0x4c>
   28836:	bf00      	nop
	...
   28840:	3fe921fb 	.word	0x3fe921fb
   28844:	7fefffff 	.word	0x7fefffff

00028848 <ceilf>:
   28848:	ee10 2a10 	vmov	r2, s0
   2884c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   28850:	3b7f      	subs	r3, #127	; 0x7f
   28852:	2b16      	cmp	r3, #22
   28854:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   28858:	dc2f      	bgt.n	288ba <ceilf+0x72>
   2885a:	2b00      	cmp	r3, #0
   2885c:	db18      	blt.n	28890 <ceilf+0x48>
   2885e:	491a      	ldr	r1, [pc, #104]	; (288c8 <ceilf+0x80>)
   28860:	4119      	asrs	r1, r3
   28862:	420a      	tst	r2, r1
   28864:	d028      	beq.n	288b8 <ceilf+0x70>
   28866:	eddf 7a19 	vldr	s15, [pc, #100]	; 288cc <ceilf+0x84>
   2886a:	ee70 7a27 	vadd.f32	s15, s0, s15
   2886e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   28872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28876:	dd1f      	ble.n	288b8 <ceilf+0x70>
   28878:	2a00      	cmp	r2, #0
   2887a:	dd04      	ble.n	28886 <ceilf+0x3e>
   2887c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   28880:	fa40 f303 	asr.w	r3, r0, r3
   28884:	441a      	add	r2, r3
   28886:	ea22 0301 	bic.w	r3, r2, r1
   2888a:	ee00 3a10 	vmov	s0, r3
   2888e:	4770      	bx	lr
   28890:	eddf 7a0e 	vldr	s15, [pc, #56]	; 288cc <ceilf+0x84>
   28894:	ee70 7a27 	vadd.f32	s15, s0, s15
   28898:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   2889c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   288a0:	dd0a      	ble.n	288b8 <ceilf+0x70>
   288a2:	2a00      	cmp	r2, #0
   288a4:	db06      	blt.n	288b4 <ceilf+0x6c>
   288a6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   288aa:	2900      	cmp	r1, #0
   288ac:	bf18      	it	ne
   288ae:	eeb0 0a67 	vmovne.f32	s0, s15
   288b2:	4770      	bx	lr
   288b4:	ed9f 0a06 	vldr	s0, [pc, #24]	; 288d0 <ceilf+0x88>
   288b8:	4770      	bx	lr
   288ba:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   288be:	d3fb      	bcc.n	288b8 <ceilf+0x70>
   288c0:	ee30 0a00 	vadd.f32	s0, s0, s0
   288c4:	4770      	bx	lr
   288c6:	bf00      	nop
   288c8:	007fffff 	.word	0x007fffff
   288cc:	7149f2ca 	.word	0x7149f2ca
   288d0:	80000000 	.word	0x80000000

000288d4 <cosf>:
   288d4:	ee10 3a10 	vmov	r3, s0
   288d8:	4a18      	ldr	r2, [pc, #96]	; (2893c <cosf+0x68>)
   288da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   288de:	4293      	cmp	r3, r2
   288e0:	dd1b      	ble.n	2891a <cosf+0x46>
   288e2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   288e6:	db02      	blt.n	288ee <cosf+0x1a>
   288e8:	ee30 0a40 	vsub.f32	s0, s0, s0
   288ec:	4770      	bx	lr
   288ee:	b500      	push	{lr}
   288f0:	b083      	sub	sp, #12
   288f2:	4668      	mov	r0, sp
   288f4:	f000 fd6e 	bl	293d4 <__ieee754_rem_pio2f>
   288f8:	f000 0003 	and.w	r0, r0, #3
   288fc:	2801      	cmp	r0, #1
   288fe:	eddd 0a01 	vldr	s1, [sp, #4]
   28902:	ed9d 0a00 	vldr	s0, [sp]
   28906:	d00c      	beq.n	28922 <cosf+0x4e>
   28908:	2802      	cmp	r0, #2
   2890a:	d012      	beq.n	28932 <cosf+0x5e>
   2890c:	b170      	cbz	r0, 2892c <cosf+0x58>
   2890e:	2001      	movs	r0, #1
   28910:	f002 f878 	bl	2aa04 <__kernel_sinf>
   28914:	b003      	add	sp, #12
   28916:	f85d fb04 	ldr.w	pc, [sp], #4
   2891a:	eddf 0a09 	vldr	s1, [pc, #36]	; 28940 <cosf+0x6c>
   2891e:	f001 bcb5 	b.w	2a28c <__kernel_cosf>
   28922:	f002 f86f 	bl	2aa04 <__kernel_sinf>
   28926:	eeb1 0a40 	vneg.f32	s0, s0
   2892a:	e7f3      	b.n	28914 <cosf+0x40>
   2892c:	f001 fcae 	bl	2a28c <__kernel_cosf>
   28930:	e7f0      	b.n	28914 <cosf+0x40>
   28932:	f001 fcab 	bl	2a28c <__kernel_cosf>
   28936:	eeb1 0a40 	vneg.f32	s0, s0
   2893a:	e7eb      	b.n	28914 <cosf+0x40>
   2893c:	3f490fd8 	.word	0x3f490fd8
   28940:	00000000 	.word	0x00000000

00028944 <floorf>:
   28944:	ee10 2a10 	vmov	r2, s0
   28948:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   2894c:	3b7f      	subs	r3, #127	; 0x7f
   2894e:	2b16      	cmp	r3, #22
   28950:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   28954:	dc28      	bgt.n	289a8 <floorf+0x64>
   28956:	2b00      	cmp	r3, #0
   28958:	db18      	blt.n	2898c <floorf+0x48>
   2895a:	491a      	ldr	r1, [pc, #104]	; (289c4 <floorf+0x80>)
   2895c:	4119      	asrs	r1, r3
   2895e:	420a      	tst	r2, r1
   28960:	d021      	beq.n	289a6 <floorf+0x62>
   28962:	eddf 7a19 	vldr	s15, [pc, #100]	; 289c8 <floorf+0x84>
   28966:	ee70 7a27 	vadd.f32	s15, s0, s15
   2896a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   2896e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28972:	dd18      	ble.n	289a6 <floorf+0x62>
   28974:	2a00      	cmp	r2, #0
   28976:	da04      	bge.n	28982 <floorf+0x3e>
   28978:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   2897c:	fa40 f303 	asr.w	r3, r0, r3
   28980:	441a      	add	r2, r3
   28982:	ea22 0301 	bic.w	r3, r2, r1
   28986:	ee00 3a10 	vmov	s0, r3
   2898a:	4770      	bx	lr
   2898c:	eddf 7a0e 	vldr	s15, [pc, #56]	; 289c8 <floorf+0x84>
   28990:	ee70 7a27 	vadd.f32	s15, s0, s15
   28994:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   28998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2899c:	dd03      	ble.n	289a6 <floorf+0x62>
   2899e:	2a00      	cmp	r2, #0
   289a0:	db08      	blt.n	289b4 <floorf+0x70>
   289a2:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 289cc <floorf+0x88>
   289a6:	4770      	bx	lr
   289a8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   289ac:	d3fb      	bcc.n	289a6 <floorf+0x62>
   289ae:	ee30 0a00 	vadd.f32	s0, s0, s0
   289b2:	4770      	bx	lr
   289b4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   289b8:	2900      	cmp	r1, #0
   289ba:	bf18      	it	ne
   289bc:	eeb0 0a67 	vmovne.f32	s0, s15
   289c0:	4770      	bx	lr
   289c2:	bf00      	nop
   289c4:	007fffff 	.word	0x007fffff
   289c8:	7149f2ca 	.word	0x7149f2ca
   289cc:	00000000 	.word	0x00000000

000289d0 <frexpf>:
   289d0:	ee10 2a10 	vmov	r2, s0
   289d4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   289d8:	b410      	push	{r4}
   289da:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   289de:	f04f 0400 	mov.w	r4, #0
   289e2:	6004      	str	r4, [r0, #0]
   289e4:	da17      	bge.n	28a16 <frexpf+0x46>
   289e6:	b1b3      	cbz	r3, 28a16 <frexpf+0x46>
   289e8:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
   289ec:	ee10 1a10 	vmov	r1, s0
   289f0:	d109      	bne.n	28a06 <frexpf+0x36>
   289f2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 28a20 <frexpf+0x50>
   289f6:	ee60 7a27 	vmul.f32	s15, s0, s15
   289fa:	f06f 0418 	mvn.w	r4, #24
   289fe:	ee17 1a90 	vmov	r1, s15
   28a02:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   28a06:	15db      	asrs	r3, r3, #23
   28a08:	3b7e      	subs	r3, #126	; 0x7e
   28a0a:	4423      	add	r3, r4
   28a0c:	f021 42ff 	bic.w	r2, r1, #2139095040	; 0x7f800000
   28a10:	6003      	str	r3, [r0, #0]
   28a12:	f042 527c 	orr.w	r2, r2, #1056964608	; 0x3f000000
   28a16:	ee00 2a10 	vmov	s0, r2
   28a1a:	f85d 4b04 	ldr.w	r4, [sp], #4
   28a1e:	4770      	bx	lr
   28a20:	4c000000 	.word	0x4c000000

00028a24 <roundf>:
   28a24:	ee10 3a10 	vmov	r3, s0
   28a28:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   28a2c:	3a7f      	subs	r2, #127	; 0x7f
   28a2e:	2a16      	cmp	r2, #22
   28a30:	ee10 1a10 	vmov	r1, s0
   28a34:	dc15      	bgt.n	28a62 <roundf+0x3e>
   28a36:	2a00      	cmp	r2, #0
   28a38:	db0c      	blt.n	28a54 <roundf+0x30>
   28a3a:	480c      	ldr	r0, [pc, #48]	; (28a6c <roundf+0x48>)
   28a3c:	4110      	asrs	r0, r2
   28a3e:	4203      	tst	r3, r0
   28a40:	d005      	beq.n	28a4e <roundf+0x2a>
   28a42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   28a46:	4113      	asrs	r3, r2
   28a48:	440b      	add	r3, r1
   28a4a:	ea23 0300 	bic.w	r3, r3, r0
   28a4e:	ee00 3a10 	vmov	s0, r3
   28a52:	4770      	bx	lr
   28a54:	3201      	adds	r2, #1
   28a56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
   28a5a:	d1f8      	bne.n	28a4e <roundf+0x2a>
   28a5c:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
   28a60:	e7f5      	b.n	28a4e <roundf+0x2a>
   28a62:	2a80      	cmp	r2, #128	; 0x80
   28a64:	d1f3      	bne.n	28a4e <roundf+0x2a>
   28a66:	ee30 0a00 	vadd.f32	s0, s0, s0
   28a6a:	4770      	bx	lr
   28a6c:	007fffff 	.word	0x007fffff

00028a70 <sinf>:
   28a70:	ee10 3a10 	vmov	r3, s0
   28a74:	4a19      	ldr	r2, [pc, #100]	; (28adc <sinf+0x6c>)
   28a76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   28a7a:	4293      	cmp	r3, r2
   28a7c:	dd1c      	ble.n	28ab8 <sinf+0x48>
   28a7e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   28a82:	db02      	blt.n	28a8a <sinf+0x1a>
   28a84:	ee30 0a40 	vsub.f32	s0, s0, s0
   28a88:	4770      	bx	lr
   28a8a:	b500      	push	{lr}
   28a8c:	b083      	sub	sp, #12
   28a8e:	4668      	mov	r0, sp
   28a90:	f000 fca0 	bl	293d4 <__ieee754_rem_pio2f>
   28a94:	f000 0003 	and.w	r0, r0, #3
   28a98:	2801      	cmp	r0, #1
   28a9a:	eddd 0a01 	vldr	s1, [sp, #4]
   28a9e:	ed9d 0a00 	vldr	s0, [sp]
   28aa2:	d00e      	beq.n	28ac2 <sinf+0x52>
   28aa4:	2802      	cmp	r0, #2
   28aa6:	d013      	beq.n	28ad0 <sinf+0x60>
   28aa8:	b170      	cbz	r0, 28ac8 <sinf+0x58>
   28aaa:	f001 fbef 	bl	2a28c <__kernel_cosf>
   28aae:	eeb1 0a40 	vneg.f32	s0, s0
   28ab2:	b003      	add	sp, #12
   28ab4:	f85d fb04 	ldr.w	pc, [sp], #4
   28ab8:	eddf 0a09 	vldr	s1, [pc, #36]	; 28ae0 <sinf+0x70>
   28abc:	2000      	movs	r0, #0
   28abe:	f001 bfa1 	b.w	2aa04 <__kernel_sinf>
   28ac2:	f001 fbe3 	bl	2a28c <__kernel_cosf>
   28ac6:	e7f4      	b.n	28ab2 <sinf+0x42>
   28ac8:	2001      	movs	r0, #1
   28aca:	f001 ff9b 	bl	2aa04 <__kernel_sinf>
   28ace:	e7f0      	b.n	28ab2 <sinf+0x42>
   28ad0:	2001      	movs	r0, #1
   28ad2:	f001 ff97 	bl	2aa04 <__kernel_sinf>
   28ad6:	eeb1 0a40 	vneg.f32	s0, s0
   28ada:	e7ea      	b.n	28ab2 <sinf+0x42>
   28adc:	3f490fd8 	.word	0x3f490fd8
   28ae0:	00000000 	.word	0x00000000

00028ae4 <sqrt>:
   28ae4:	b538      	push	{r3, r4, r5, lr}
   28ae6:	ed2d 8b02 	vpush	{d8}
   28aea:	ec55 4b10 	vmov	r4, r5, d0
   28aee:	f000 fab1 	bl	29054 <__ieee754_sqrt>
   28af2:	4622      	mov	r2, r4
   28af4:	462b      	mov	r3, r5
   28af6:	4620      	mov	r0, r4
   28af8:	4629      	mov	r1, r5
   28afa:	eeb0 8a40 	vmov.f32	s16, s0
   28afe:	eef0 8a60 	vmov.f32	s17, s1
   28b02:	f7f0 faa1 	bl	19048 <__aeabi_dcmpun>
   28b06:	b930      	cbnz	r0, 28b16 <sqrt+0x32>
   28b08:	2200      	movs	r2, #0
   28b0a:	2300      	movs	r3, #0
   28b0c:	4620      	mov	r0, r4
   28b0e:	4629      	mov	r1, r5
   28b10:	f7f0 fa72 	bl	18ff8 <__aeabi_dcmplt>
   28b14:	b930      	cbnz	r0, 28b24 <sqrt+0x40>
   28b16:	eeb0 0a48 	vmov.f32	s0, s16
   28b1a:	eef0 0a68 	vmov.f32	s1, s17
   28b1e:	ecbd 8b02 	vpop	{d8}
   28b22:	bd38      	pop	{r3, r4, r5, pc}
   28b24:	f002 f928 	bl	2ad78 <__errno>
   28b28:	2200      	movs	r2, #0
   28b2a:	2300      	movs	r3, #0
   28b2c:	2121      	movs	r1, #33	; 0x21
   28b2e:	6001      	str	r1, [r0, #0]
   28b30:	4610      	mov	r0, r2
   28b32:	4619      	mov	r1, r3
   28b34:	f7f0 f918 	bl	18d68 <__aeabi_ddiv>
   28b38:	ec41 0b18 	vmov	d8, r0, r1
   28b3c:	eeb0 0a48 	vmov.f32	s0, s16
   28b40:	eef0 0a68 	vmov.f32	s1, s17
   28b44:	ecbd 8b02 	vpop	{d8}
   28b48:	bd38      	pop	{r3, r4, r5, pc}
   28b4a:	bf00      	nop

00028b4c <expf>:
   28b4c:	b508      	push	{r3, lr}
   28b4e:	ed2d 8b02 	vpush	{d8}
   28b52:	eeb0 8a40 	vmov.f32	s16, s0
   28b56:	f000 fb49 	bl	291ec <__ieee754_expf>
   28b5a:	eef0 8a40 	vmov.f32	s17, s0
   28b5e:	eeb0 0a48 	vmov.f32	s0, s16
   28b62:	f002 f863 	bl	2ac2c <finitef>
   28b66:	b168      	cbz	r0, 28b84 <expf+0x38>
   28b68:	eddf 7a12 	vldr	s15, [pc, #72]	; 28bb4 <expf+0x68>
   28b6c:	eeb4 8ae7 	vcmpe.f32	s16, s15
   28b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28b74:	dc0b      	bgt.n	28b8e <expf+0x42>
   28b76:	eddf 7a10 	vldr	s15, [pc, #64]	; 28bb8 <expf+0x6c>
   28b7a:	eeb4 8ae7 	vcmpe.f32	s16, s15
   28b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28b82:	d40f      	bmi.n	28ba4 <expf+0x58>
   28b84:	eeb0 0a68 	vmov.f32	s0, s17
   28b88:	ecbd 8b02 	vpop	{d8}
   28b8c:	bd08      	pop	{r3, pc}
   28b8e:	eddf 8a0b 	vldr	s17, [pc, #44]	; 28bbc <expf+0x70>
   28b92:	f002 f8f1 	bl	2ad78 <__errno>
   28b96:	eeb0 0a68 	vmov.f32	s0, s17
   28b9a:	ecbd 8b02 	vpop	{d8}
   28b9e:	2322      	movs	r3, #34	; 0x22
   28ba0:	6003      	str	r3, [r0, #0]
   28ba2:	bd08      	pop	{r3, pc}
   28ba4:	f002 f8e8 	bl	2ad78 <__errno>
   28ba8:	2322      	movs	r3, #34	; 0x22
   28baa:	eddf 8a05 	vldr	s17, [pc, #20]	; 28bc0 <expf+0x74>
   28bae:	6003      	str	r3, [r0, #0]
   28bb0:	e7e8      	b.n	28b84 <expf+0x38>
   28bb2:	bf00      	nop
   28bb4:	42b17180 	.word	0x42b17180
   28bb8:	c2cff1b5 	.word	0xc2cff1b5
   28bbc:	7f800000 	.word	0x7f800000
   28bc0:	00000000 	.word	0x00000000

00028bc4 <sqrtf>:
   28bc4:	b508      	push	{r3, lr}
   28bc6:	ed2d 8b02 	vpush	{d8}
   28bca:	eeb0 8a40 	vmov.f32	s16, s0
   28bce:	f000 fd33 	bl	29638 <__ieee754_sqrtf>
   28bd2:	eeb4 8a48 	vcmp.f32	s16, s16
   28bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28bda:	d606      	bvs.n	28bea <sqrtf+0x26>
   28bdc:	eddf 8a09 	vldr	s17, [pc, #36]	; 28c04 <sqrtf+0x40>
   28be0:	eeb4 8ae8 	vcmpe.f32	s16, s17
   28be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28be8:	d402      	bmi.n	28bf0 <sqrtf+0x2c>
   28bea:	ecbd 8b02 	vpop	{d8}
   28bee:	bd08      	pop	{r3, pc}
   28bf0:	f002 f8c2 	bl	2ad78 <__errno>
   28bf4:	ee88 0aa8 	vdiv.f32	s0, s17, s17
   28bf8:	ecbd 8b02 	vpop	{d8}
   28bfc:	2321      	movs	r3, #33	; 0x21
   28bfe:	6003      	str	r3, [r0, #0]
   28c00:	bd08      	pop	{r3, pc}
   28c02:	bf00      	nop
   28c04:	00000000 	.word	0x00000000

00028c08 <__ieee754_rem_pio2>:
   28c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28c0c:	ec53 2b10 	vmov	r2, r3, d0
   28c10:	ed2d 8b04 	vpush	{d8-d9}
   28c14:	4990      	ldr	r1, [pc, #576]	; (28e58 <__ieee754_rem_pio2+0x250>)
   28c16:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
   28c1a:	428d      	cmp	r5, r1
   28c1c:	b08b      	sub	sp, #44	; 0x2c
   28c1e:	4604      	mov	r4, r0
   28c20:	f340 808c 	ble.w	28d3c <__ieee754_rem_pio2+0x134>
   28c24:	498d      	ldr	r1, [pc, #564]	; (28e5c <__ieee754_rem_pio2+0x254>)
   28c26:	428d      	cmp	r5, r1
   28c28:	461f      	mov	r7, r3
   28c2a:	dc2b      	bgt.n	28c84 <__ieee754_rem_pio2+0x7c>
   28c2c:	2f00      	cmp	r7, #0
   28c2e:	4619      	mov	r1, r3
   28c30:	ee10 0a10 	vmov	r0, s0
   28c34:	a37e      	add	r3, pc, #504	; (adr r3, 28e30 <__ieee754_rem_pio2+0x228>)
   28c36:	e9d3 2300 	ldrd	r2, r3, [r3]
   28c3a:	f340 81b6 	ble.w	28faa <__ieee754_rem_pio2+0x3a2>
   28c3e:	f7ef fdb1 	bl	187a4 <__aeabi_dsub>
   28c42:	4b87      	ldr	r3, [pc, #540]	; (28e60 <__ieee754_rem_pio2+0x258>)
   28c44:	429d      	cmp	r5, r3
   28c46:	4680      	mov	r8, r0
   28c48:	4689      	mov	r9, r1
   28c4a:	f000 808f 	beq.w	28d6c <__ieee754_rem_pio2+0x164>
   28c4e:	a37a      	add	r3, pc, #488	; (adr r3, 28e38 <__ieee754_rem_pio2+0x230>)
   28c50:	e9d3 2300 	ldrd	r2, r3, [r3]
   28c54:	f7ef fda6 	bl	187a4 <__aeabi_dsub>
   28c58:	4602      	mov	r2, r0
   28c5a:	460b      	mov	r3, r1
   28c5c:	e9c4 2300 	strd	r2, r3, [r4]
   28c60:	4640      	mov	r0, r8
   28c62:	4649      	mov	r1, r9
   28c64:	f7ef fd9e 	bl	187a4 <__aeabi_dsub>
   28c68:	a373      	add	r3, pc, #460	; (adr r3, 28e38 <__ieee754_rem_pio2+0x230>)
   28c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
   28c6e:	f7ef fd99 	bl	187a4 <__aeabi_dsub>
   28c72:	e9c4 0102 	strd	r0, r1, [r4, #8]
   28c76:	2601      	movs	r6, #1
   28c78:	4630      	mov	r0, r6
   28c7a:	b00b      	add	sp, #44	; 0x2c
   28c7c:	ecbd 8b04 	vpop	{d8-d9}
   28c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28c84:	4977      	ldr	r1, [pc, #476]	; (28e64 <__ieee754_rem_pio2+0x25c>)
   28c86:	428d      	cmp	r5, r1
   28c88:	f340 8092 	ble.w	28db0 <__ieee754_rem_pio2+0x1a8>
   28c8c:	4976      	ldr	r1, [pc, #472]	; (28e68 <__ieee754_rem_pio2+0x260>)
   28c8e:	428d      	cmp	r5, r1
   28c90:	dc61      	bgt.n	28d56 <__ieee754_rem_pio2+0x14e>
   28c92:	152e      	asrs	r6, r5, #20
   28c94:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
   28c98:	ee10 0a10 	vmov	r0, s0
   28c9c:	eba5 5106 	sub.w	r1, r5, r6, lsl #20
   28ca0:	4690      	mov	r8, r2
   28ca2:	4689      	mov	r9, r1
   28ca4:	f7f0 f9e6 	bl	19074 <__aeabi_d2iz>
   28ca8:	f7ef feca 	bl	18a40 <__aeabi_i2d>
   28cac:	4602      	mov	r2, r0
   28cae:	460b      	mov	r3, r1
   28cb0:	4640      	mov	r0, r8
   28cb2:	4649      	mov	r1, r9
   28cb4:	e9cd 2304 	strd	r2, r3, [sp, #16]
   28cb8:	f7ef fd74 	bl	187a4 <__aeabi_dsub>
   28cbc:	4b6b      	ldr	r3, [pc, #428]	; (28e6c <__ieee754_rem_pio2+0x264>)
   28cbe:	2200      	movs	r2, #0
   28cc0:	f7ef ff28 	bl	18b14 <__aeabi_dmul>
   28cc4:	4689      	mov	r9, r1
   28cc6:	4680      	mov	r8, r0
   28cc8:	f7f0 f9d4 	bl	19074 <__aeabi_d2iz>
   28ccc:	4605      	mov	r5, r0
   28cce:	f7ef feb7 	bl	18a40 <__aeabi_i2d>
   28cd2:	4602      	mov	r2, r0
   28cd4:	460b      	mov	r3, r1
   28cd6:	4640      	mov	r0, r8
   28cd8:	4649      	mov	r1, r9
   28cda:	e9cd 2306 	strd	r2, r3, [sp, #24]
   28cde:	f7ef fd61 	bl	187a4 <__aeabi_dsub>
   28ce2:	4b62      	ldr	r3, [pc, #392]	; (28e6c <__ieee754_rem_pio2+0x264>)
   28ce4:	2200      	movs	r2, #0
   28ce6:	f7ef ff15 	bl	18b14 <__aeabi_dmul>
   28cea:	4602      	mov	r2, r0
   28cec:	460b      	mov	r3, r1
   28cee:	e9cd 2308 	strd	r2, r3, [sp, #32]
   28cf2:	2200      	movs	r2, #0
   28cf4:	2300      	movs	r3, #0
   28cf6:	f7f0 f975 	bl	18fe4 <__aeabi_dcmpeq>
   28cfa:	2800      	cmp	r0, #0
   28cfc:	f000 8153 	beq.w	28fa6 <__ieee754_rem_pio2+0x39e>
   28d00:	2d00      	cmp	r5, #0
   28d02:	bf0c      	ite	eq
   28d04:	2301      	moveq	r3, #1
   28d06:	2302      	movne	r3, #2
   28d08:	4a59      	ldr	r2, [pc, #356]	; (28e70 <__ieee754_rem_pio2+0x268>)
   28d0a:	9201      	str	r2, [sp, #4]
   28d0c:	2202      	movs	r2, #2
   28d0e:	9200      	str	r2, [sp, #0]
   28d10:	4621      	mov	r1, r4
   28d12:	4632      	mov	r2, r6
   28d14:	a804      	add	r0, sp, #16
   28d16:	f000 fdd3 	bl	298c0 <__kernel_rem_pio2>
   28d1a:	2f00      	cmp	r7, #0
   28d1c:	4606      	mov	r6, r0
   28d1e:	daab      	bge.n	28c78 <__ieee754_rem_pio2+0x70>
   28d20:	6861      	ldr	r1, [r4, #4]
   28d22:	6822      	ldr	r2, [r4, #0]
   28d24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   28d28:	68e1      	ldr	r1, [r4, #12]
   28d2a:	e9c4 2300 	strd	r2, r3, [r4]
   28d2e:	68a2      	ldr	r2, [r4, #8]
   28d30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   28d34:	e9c4 2302 	strd	r2, r3, [r4, #8]
   28d38:	4246      	negs	r6, r0
   28d3a:	e79d      	b.n	28c78 <__ieee754_rem_pio2+0x70>
   28d3c:	2000      	movs	r0, #0
   28d3e:	2100      	movs	r1, #0
   28d40:	2600      	movs	r6, #0
   28d42:	e9c4 0102 	strd	r0, r1, [r4, #8]
   28d46:	4630      	mov	r0, r6
   28d48:	ed84 0b00 	vstr	d0, [r4]
   28d4c:	b00b      	add	sp, #44	; 0x2c
   28d4e:	ecbd 8b04 	vpop	{d8-d9}
   28d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28d56:	ee10 0a10 	vmov	r0, s0
   28d5a:	4619      	mov	r1, r3
   28d5c:	f7ef fd22 	bl	187a4 <__aeabi_dsub>
   28d60:	2600      	movs	r6, #0
   28d62:	e9c4 0102 	strd	r0, r1, [r4, #8]
   28d66:	e9c4 0100 	strd	r0, r1, [r4]
   28d6a:	e785      	b.n	28c78 <__ieee754_rem_pio2+0x70>
   28d6c:	a334      	add	r3, pc, #208	; (adr r3, 28e40 <__ieee754_rem_pio2+0x238>)
   28d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   28d72:	f7ef fd17 	bl	187a4 <__aeabi_dsub>
   28d76:	a334      	add	r3, pc, #208	; (adr r3, 28e48 <__ieee754_rem_pio2+0x240>)
   28d78:	e9d3 2300 	ldrd	r2, r3, [r3]
   28d7c:	4680      	mov	r8, r0
   28d7e:	4689      	mov	r9, r1
   28d80:	f7ef fd10 	bl	187a4 <__aeabi_dsub>
   28d84:	4602      	mov	r2, r0
   28d86:	460b      	mov	r3, r1
   28d88:	e9c4 2300 	strd	r2, r3, [r4]
   28d8c:	4640      	mov	r0, r8
   28d8e:	4649      	mov	r1, r9
   28d90:	f7ef fd08 	bl	187a4 <__aeabi_dsub>
   28d94:	a32c      	add	r3, pc, #176	; (adr r3, 28e48 <__ieee754_rem_pio2+0x240>)
   28d96:	e9d3 2300 	ldrd	r2, r3, [r3]
   28d9a:	f7ef fd03 	bl	187a4 <__aeabi_dsub>
   28d9e:	2601      	movs	r6, #1
   28da0:	e9c4 0102 	strd	r0, r1, [r4, #8]
   28da4:	4630      	mov	r0, r6
   28da6:	b00b      	add	sp, #44	; 0x2c
   28da8:	ecbd 8b04 	vpop	{d8-d9}
   28dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28db0:	f001 fe98 	bl	2aae4 <fabs>
   28db4:	ec59 8b10 	vmov	r8, r9, d0
   28db8:	ee10 0a10 	vmov	r0, s0
   28dbc:	a324      	add	r3, pc, #144	; (adr r3, 28e50 <__ieee754_rem_pio2+0x248>)
   28dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
   28dc2:	4649      	mov	r1, r9
   28dc4:	f7ef fea6 	bl	18b14 <__aeabi_dmul>
   28dc8:	4b2a      	ldr	r3, [pc, #168]	; (28e74 <__ieee754_rem_pio2+0x26c>)
   28dca:	2200      	movs	r2, #0
   28dcc:	f7ef fcec 	bl	187a8 <__adddf3>
   28dd0:	f7f0 f950 	bl	19074 <__aeabi_d2iz>
   28dd4:	4606      	mov	r6, r0
   28dd6:	f7ef fe33 	bl	18a40 <__aeabi_i2d>
   28dda:	4602      	mov	r2, r0
   28ddc:	460b      	mov	r3, r1
   28dde:	ec43 2b18 	vmov	d8, r2, r3
   28de2:	a313      	add	r3, pc, #76	; (adr r3, 28e30 <__ieee754_rem_pio2+0x228>)
   28de4:	e9d3 2300 	ldrd	r2, r3, [r3]
   28de8:	eeb0 9a48 	vmov.f32	s18, s16
   28dec:	eef0 9a68 	vmov.f32	s19, s17
   28df0:	f7ef fe90 	bl	18b14 <__aeabi_dmul>
   28df4:	4602      	mov	r2, r0
   28df6:	460b      	mov	r3, r1
   28df8:	4640      	mov	r0, r8
   28dfa:	4649      	mov	r1, r9
   28dfc:	f7ef fcd2 	bl	187a4 <__aeabi_dsub>
   28e00:	a30d      	add	r3, pc, #52	; (adr r3, 28e38 <__ieee754_rem_pio2+0x230>)
   28e02:	e9d3 2300 	ldrd	r2, r3, [r3]
   28e06:	4682      	mov	sl, r0
   28e08:	468b      	mov	fp, r1
   28e0a:	ec51 0b18 	vmov	r0, r1, d8
   28e0e:	f7ef fe81 	bl	18b14 <__aeabi_dmul>
   28e12:	2e1f      	cmp	r6, #31
   28e14:	ec41 0b18 	vmov	d8, r0, r1
   28e18:	dc30      	bgt.n	28e7c <__ieee754_rem_pio2+0x274>
   28e1a:	4b17      	ldr	r3, [pc, #92]	; (28e78 <__ieee754_rem_pio2+0x270>)
   28e1c:	1e72      	subs	r2, r6, #1
   28e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   28e22:	42ab      	cmp	r3, r5
   28e24:	d02a      	beq.n	28e7c <__ieee754_rem_pio2+0x274>
   28e26:	4602      	mov	r2, r0
   28e28:	460b      	mov	r3, r1
   28e2a:	e09b      	b.n	28f64 <__ieee754_rem_pio2+0x35c>
   28e2c:	f3af 8000 	nop.w
   28e30:	54400000 	.word	0x54400000
   28e34:	3ff921fb 	.word	0x3ff921fb
   28e38:	1a626331 	.word	0x1a626331
   28e3c:	3dd0b461 	.word	0x3dd0b461
   28e40:	1a600000 	.word	0x1a600000
   28e44:	3dd0b461 	.word	0x3dd0b461
   28e48:	2e037073 	.word	0x2e037073
   28e4c:	3ba3198a 	.word	0x3ba3198a
   28e50:	6dc9c883 	.word	0x6dc9c883
   28e54:	3fe45f30 	.word	0x3fe45f30
   28e58:	3fe921fb 	.word	0x3fe921fb
   28e5c:	4002d97b 	.word	0x4002d97b
   28e60:	3ff921fb 	.word	0x3ff921fb
   28e64:	413921fb 	.word	0x413921fb
   28e68:	7fefffff 	.word	0x7fefffff
   28e6c:	41700000 	.word	0x41700000
   28e70:	00041888 	.word	0x00041888
   28e74:	3fe00000 	.word	0x3fe00000
   28e78:	00041808 	.word	0x00041808
   28e7c:	152b      	asrs	r3, r5, #20
   28e7e:	9303      	str	r3, [sp, #12]
   28e80:	4650      	mov	r0, sl
   28e82:	ec53 2b18 	vmov	r2, r3, d8
   28e86:	4659      	mov	r1, fp
   28e88:	f7ef fc8c 	bl	187a4 <__aeabi_dsub>
   28e8c:	f3c1 530a 	ubfx	r3, r1, #20, #11
   28e90:	ebc3 5515 	rsb	r5, r3, r5, lsr #20
   28e94:	2d10      	cmp	r5, #16
   28e96:	4680      	mov	r8, r0
   28e98:	4689      	mov	r9, r1
   28e9a:	dd69      	ble.n	28f70 <__ieee754_rem_pio2+0x368>
   28e9c:	a364      	add	r3, pc, #400	; (adr r3, 29030 <__ieee754_rem_pio2+0x428>)
   28e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   28ea2:	ec51 0b19 	vmov	r0, r1, d9
   28ea6:	f7ef fe35 	bl	18b14 <__aeabi_dmul>
   28eaa:	4680      	mov	r8, r0
   28eac:	4689      	mov	r9, r1
   28eae:	4642      	mov	r2, r8
   28eb0:	464b      	mov	r3, r9
   28eb2:	4650      	mov	r0, sl
   28eb4:	4659      	mov	r1, fp
   28eb6:	f7ef fc75 	bl	187a4 <__aeabi_dsub>
   28eba:	4602      	mov	r2, r0
   28ebc:	460b      	mov	r3, r1
   28ebe:	4650      	mov	r0, sl
   28ec0:	4659      	mov	r1, fp
   28ec2:	4692      	mov	sl, r2
   28ec4:	469b      	mov	fp, r3
   28ec6:	f7ef fc6d 	bl	187a4 <__aeabi_dsub>
   28eca:	4642      	mov	r2, r8
   28ecc:	464b      	mov	r3, r9
   28ece:	f7ef fc69 	bl	187a4 <__aeabi_dsub>
   28ed2:	a359      	add	r3, pc, #356	; (adr r3, 29038 <__ieee754_rem_pio2+0x430>)
   28ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
   28ed8:	4680      	mov	r8, r0
   28eda:	4689      	mov	r9, r1
   28edc:	ec51 0b19 	vmov	r0, r1, d9
   28ee0:	f7ef fe18 	bl	18b14 <__aeabi_dmul>
   28ee4:	4642      	mov	r2, r8
   28ee6:	464b      	mov	r3, r9
   28ee8:	f7ef fc5c 	bl	187a4 <__aeabi_dsub>
   28eec:	4602      	mov	r2, r0
   28eee:	460b      	mov	r3, r1
   28ef0:	4650      	mov	r0, sl
   28ef2:	4659      	mov	r1, fp
   28ef4:	ec43 2b18 	vmov	d8, r2, r3
   28ef8:	f7ef fc54 	bl	187a4 <__aeabi_dsub>
   28efc:	9a03      	ldr	r2, [sp, #12]
   28efe:	f3c1 530a 	ubfx	r3, r1, #20, #11
   28f02:	1ad3      	subs	r3, r2, r3
   28f04:	2b31      	cmp	r3, #49	; 0x31
   28f06:	4680      	mov	r8, r0
   28f08:	4689      	mov	r9, r1
   28f0a:	dd31      	ble.n	28f70 <__ieee754_rem_pio2+0x368>
   28f0c:	a34d      	add	r3, pc, #308	; (adr r3, 29044 <__ieee754_rem_pio2+0x43c>)
   28f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   28f12:	ec51 0b19 	vmov	r0, r1, d9
   28f16:	f7ef fdfd 	bl	18b14 <__aeabi_dmul>
   28f1a:	4680      	mov	r8, r0
   28f1c:	4689      	mov	r9, r1
   28f1e:	4642      	mov	r2, r8
   28f20:	464b      	mov	r3, r9
   28f22:	4650      	mov	r0, sl
   28f24:	4659      	mov	r1, fp
   28f26:	f7ef fc3d 	bl	187a4 <__aeabi_dsub>
   28f2a:	4602      	mov	r2, r0
   28f2c:	460b      	mov	r3, r1
   28f2e:	4650      	mov	r0, sl
   28f30:	4659      	mov	r1, fp
   28f32:	4692      	mov	sl, r2
   28f34:	469b      	mov	fp, r3
   28f36:	f7ef fc35 	bl	187a4 <__aeabi_dsub>
   28f3a:	4642      	mov	r2, r8
   28f3c:	464b      	mov	r3, r9
   28f3e:	f7ef fc31 	bl	187a4 <__aeabi_dsub>
   28f42:	a342      	add	r3, pc, #264	; (adr r3, 2904c <__ieee754_rem_pio2+0x444>)
   28f44:	e9d3 2300 	ldrd	r2, r3, [r3]
   28f48:	4680      	mov	r8, r0
   28f4a:	4689      	mov	r9, r1
   28f4c:	ec51 0b19 	vmov	r0, r1, d9
   28f50:	f7ef fde0 	bl	18b14 <__aeabi_dmul>
   28f54:	4642      	mov	r2, r8
   28f56:	464b      	mov	r3, r9
   28f58:	f7ef fc24 	bl	187a4 <__aeabi_dsub>
   28f5c:	4602      	mov	r2, r0
   28f5e:	460b      	mov	r3, r1
   28f60:	ec43 2b18 	vmov	d8, r2, r3
   28f64:	4650      	mov	r0, sl
   28f66:	4659      	mov	r1, fp
   28f68:	f7ef fc1c 	bl	187a4 <__aeabi_dsub>
   28f6c:	4680      	mov	r8, r0
   28f6e:	4689      	mov	r9, r1
   28f70:	4642      	mov	r2, r8
   28f72:	464b      	mov	r3, r9
   28f74:	e9c4 8900 	strd	r8, r9, [r4]
   28f78:	4650      	mov	r0, sl
   28f7a:	4659      	mov	r1, fp
   28f7c:	f7ef fc12 	bl	187a4 <__aeabi_dsub>
   28f80:	ec53 2b18 	vmov	r2, r3, d8
   28f84:	f7ef fc0e 	bl	187a4 <__aeabi_dsub>
   28f88:	2f00      	cmp	r7, #0
   28f8a:	e9c4 0102 	strd	r0, r1, [r4, #8]
   28f8e:	f6bf ae73 	bge.w	28c78 <__ieee754_rem_pio2+0x70>
   28f92:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   28f96:	e9c4 8300 	strd	r8, r3, [r4]
   28f9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   28f9e:	e9c4 0302 	strd	r0, r3, [r4, #8]
   28fa2:	4276      	negs	r6, r6
   28fa4:	e668      	b.n	28c78 <__ieee754_rem_pio2+0x70>
   28fa6:	2303      	movs	r3, #3
   28fa8:	e6ae      	b.n	28d08 <__ieee754_rem_pio2+0x100>
   28faa:	f7ef fbfd 	bl	187a8 <__adddf3>
   28fae:	4b24      	ldr	r3, [pc, #144]	; (29040 <__ieee754_rem_pio2+0x438>)
   28fb0:	429d      	cmp	r5, r3
   28fb2:	4680      	mov	r8, r0
   28fb4:	4689      	mov	r9, r1
   28fb6:	d016      	beq.n	28fe6 <__ieee754_rem_pio2+0x3de>
   28fb8:	a31b      	add	r3, pc, #108	; (adr r3, 29028 <__ieee754_rem_pio2+0x420>)
   28fba:	e9d3 2300 	ldrd	r2, r3, [r3]
   28fbe:	f7ef fbf3 	bl	187a8 <__adddf3>
   28fc2:	4602      	mov	r2, r0
   28fc4:	460b      	mov	r3, r1
   28fc6:	e9c4 2300 	strd	r2, r3, [r4]
   28fca:	4640      	mov	r0, r8
   28fcc:	4649      	mov	r1, r9
   28fce:	f7ef fbe9 	bl	187a4 <__aeabi_dsub>
   28fd2:	a315      	add	r3, pc, #84	; (adr r3, 29028 <__ieee754_rem_pio2+0x420>)
   28fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
   28fd8:	f7ef fbe6 	bl	187a8 <__adddf3>
   28fdc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   28fe0:	e9c4 0102 	strd	r0, r1, [r4, #8]
   28fe4:	e648      	b.n	28c78 <__ieee754_rem_pio2+0x70>
   28fe6:	a312      	add	r3, pc, #72	; (adr r3, 29030 <__ieee754_rem_pio2+0x428>)
   28fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
   28fec:	f7ef fbdc 	bl	187a8 <__adddf3>
   28ff0:	a311      	add	r3, pc, #68	; (adr r3, 29038 <__ieee754_rem_pio2+0x430>)
   28ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
   28ff6:	4680      	mov	r8, r0
   28ff8:	4689      	mov	r9, r1
   28ffa:	f7ef fbd5 	bl	187a8 <__adddf3>
   28ffe:	4602      	mov	r2, r0
   29000:	460b      	mov	r3, r1
   29002:	e9c4 2300 	strd	r2, r3, [r4]
   29006:	4640      	mov	r0, r8
   29008:	4649      	mov	r1, r9
   2900a:	f7ef fbcb 	bl	187a4 <__aeabi_dsub>
   2900e:	a30a      	add	r3, pc, #40	; (adr r3, 29038 <__ieee754_rem_pio2+0x430>)
   29010:	e9d3 2300 	ldrd	r2, r3, [r3]
   29014:	f7ef fbc8 	bl	187a8 <__adddf3>
   29018:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2901c:	e9c4 0102 	strd	r0, r1, [r4, #8]
   29020:	e62a      	b.n	28c78 <__ieee754_rem_pio2+0x70>
   29022:	bf00      	nop
   29024:	f3af 8000 	nop.w
   29028:	1a626331 	.word	0x1a626331
   2902c:	3dd0b461 	.word	0x3dd0b461
   29030:	1a600000 	.word	0x1a600000
   29034:	3dd0b461 	.word	0x3dd0b461
   29038:	2e037073 	.word	0x2e037073
   2903c:	3ba3198a 	.word	0x3ba3198a
   29040:	3ff921fb 	.word	0x3ff921fb
   29044:	2e000000 	.word	0x2e000000
   29048:	3ba3198a 	.word	0x3ba3198a
   2904c:	252049c1 	.word	0x252049c1
   29050:	397b839a 	.word	0x397b839a

00029054 <__ieee754_sqrt>:
   29054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29058:	4a63      	ldr	r2, [pc, #396]	; (291e8 <__ieee754_sqrt+0x194>)
   2905a:	ec55 4b10 	vmov	r4, r5, d0
   2905e:	43aa      	bics	r2, r5
   29060:	f000 809f 	beq.w	291a2 <__ieee754_sqrt+0x14e>
   29064:	2d00      	cmp	r5, #0
   29066:	ee10 ca10 	vmov	ip, s0
   2906a:	462b      	mov	r3, r5
   2906c:	dd54      	ble.n	29118 <__ieee754_sqrt+0xc4>
   2906e:	1529      	asrs	r1, r5, #20
   29070:	d063      	beq.n	2913a <__ieee754_sqrt+0xe6>
   29072:	f3c3 0313 	ubfx	r3, r3, #0, #20
   29076:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   2907a:	07c9      	lsls	r1, r1, #31
   2907c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   29080:	d404      	bmi.n	2908c <__ieee754_sqrt+0x38>
   29082:	005b      	lsls	r3, r3, #1
   29084:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   29088:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   2908c:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   29090:	2600      	movs	r6, #0
   29092:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   29096:	107f      	asrs	r7, r7, #1
   29098:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   2909c:	f04f 0e16 	mov.w	lr, #22
   290a0:	4634      	mov	r4, r6
   290a2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   290a6:	18a1      	adds	r1, r4, r2
   290a8:	4299      	cmp	r1, r3
   290aa:	dc02      	bgt.n	290b2 <__ieee754_sqrt+0x5e>
   290ac:	1a5b      	subs	r3, r3, r1
   290ae:	188c      	adds	r4, r1, r2
   290b0:	4416      	add	r6, r2
   290b2:	005b      	lsls	r3, r3, #1
   290b4:	f1be 0e01 	subs.w	lr, lr, #1
   290b8:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   290bc:	ea4f 0252 	mov.w	r2, r2, lsr #1
   290c0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   290c4:	d1ef      	bne.n	290a6 <__ieee754_sqrt+0x52>
   290c6:	4675      	mov	r5, lr
   290c8:	2020      	movs	r0, #32
   290ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   290ce:	e00a      	b.n	290e6 <__ieee754_sqrt+0x92>
   290d0:	d044      	beq.n	2915c <__ieee754_sqrt+0x108>
   290d2:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   290d6:	3801      	subs	r0, #1
   290d8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   290dc:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   290e0:	ea4f 0252 	mov.w	r2, r2, lsr #1
   290e4:	d043      	beq.n	2916e <__ieee754_sqrt+0x11a>
   290e6:	42a3      	cmp	r3, r4
   290e8:	eb02 010e 	add.w	r1, r2, lr
   290ec:	ddf0      	ble.n	290d0 <__ieee754_sqrt+0x7c>
   290ee:	2900      	cmp	r1, #0
   290f0:	eb01 0e02 	add.w	lr, r1, r2
   290f4:	db0a      	blt.n	2910c <__ieee754_sqrt+0xb8>
   290f6:	46a0      	mov	r8, r4
   290f8:	1b1b      	subs	r3, r3, r4
   290fa:	4561      	cmp	r1, ip
   290fc:	bf88      	it	hi
   290fe:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   29102:	ebac 0c01 	sub.w	ip, ip, r1
   29106:	4415      	add	r5, r2
   29108:	4644      	mov	r4, r8
   2910a:	e7e2      	b.n	290d2 <__ieee754_sqrt+0x7e>
   2910c:	f1be 0f00 	cmp.w	lr, #0
   29110:	dbf1      	blt.n	290f6 <__ieee754_sqrt+0xa2>
   29112:	f104 0801 	add.w	r8, r4, #1
   29116:	e7ef      	b.n	290f8 <__ieee754_sqrt+0xa4>
   29118:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   2911c:	4322      	orrs	r2, r4
   2911e:	d038      	beq.n	29192 <__ieee754_sqrt+0x13e>
   29120:	2d00      	cmp	r5, #0
   29122:	d14e      	bne.n	291c2 <__ieee754_sqrt+0x16e>
   29124:	4629      	mov	r1, r5
   29126:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   2912a:	3915      	subs	r1, #21
   2912c:	4613      	mov	r3, r2
   2912e:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   29132:	2a00      	cmp	r2, #0
   29134:	d0f7      	beq.n	29126 <__ieee754_sqrt+0xd2>
   29136:	02d6      	lsls	r6, r2, #11
   29138:	d450      	bmi.n	291dc <__ieee754_sqrt+0x188>
   2913a:	2000      	movs	r0, #0
   2913c:	005b      	lsls	r3, r3, #1
   2913e:	02dd      	lsls	r5, r3, #11
   29140:	4604      	mov	r4, r0
   29142:	f100 0001 	add.w	r0, r0, #1
   29146:	d5f9      	bpl.n	2913c <__ieee754_sqrt+0xe8>
   29148:	461a      	mov	r2, r3
   2914a:	4663      	mov	r3, ip
   2914c:	fa0c fc00 	lsl.w	ip, ip, r0
   29150:	f1c0 0020 	rsb	r0, r0, #32
   29154:	40c3      	lsrs	r3, r0
   29156:	1b09      	subs	r1, r1, r4
   29158:	4313      	orrs	r3, r2
   2915a:	e78a      	b.n	29072 <__ieee754_sqrt+0x1e>
   2915c:	4561      	cmp	r1, ip
   2915e:	d8b8      	bhi.n	290d2 <__ieee754_sqrt+0x7e>
   29160:	2900      	cmp	r1, #0
   29162:	eb01 0e02 	add.w	lr, r1, r2
   29166:	dbd1      	blt.n	2910c <__ieee754_sqrt+0xb8>
   29168:	4698      	mov	r8, r3
   2916a:	2300      	movs	r3, #0
   2916c:	e7c9      	b.n	29102 <__ieee754_sqrt+0xae>
   2916e:	ea53 030c 	orrs.w	r3, r3, ip
   29172:	d110      	bne.n	29196 <__ieee754_sqrt+0x142>
   29174:	0868      	lsrs	r0, r5, #1
   29176:	1071      	asrs	r1, r6, #1
   29178:	07f3      	lsls	r3, r6, #31
   2917a:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   2917e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   29182:	bf48      	it	mi
   29184:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   29188:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   2918c:	4602      	mov	r2, r0
   2918e:	ec43 2b10 	vmov	d0, r2, r3
   29192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29196:	1c6a      	adds	r2, r5, #1
   29198:	bf16      	itet	ne
   2919a:	1c68      	addne	r0, r5, #1
   2919c:	3601      	addeq	r6, #1
   2919e:	0840      	lsrne	r0, r0, #1
   291a0:	e7e9      	b.n	29176 <__ieee754_sqrt+0x122>
   291a2:	ee10 2a10 	vmov	r2, s0
   291a6:	ee10 0a10 	vmov	r0, s0
   291aa:	462b      	mov	r3, r5
   291ac:	4629      	mov	r1, r5
   291ae:	f7ef fcb1 	bl	18b14 <__aeabi_dmul>
   291b2:	4622      	mov	r2, r4
   291b4:	462b      	mov	r3, r5
   291b6:	f7ef faf7 	bl	187a8 <__adddf3>
   291ba:	ec41 0b10 	vmov	d0, r0, r1
   291be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   291c2:	ee10 2a10 	vmov	r2, s0
   291c6:	4620      	mov	r0, r4
   291c8:	4629      	mov	r1, r5
   291ca:	f7ef faeb 	bl	187a4 <__aeabi_dsub>
   291ce:	4602      	mov	r2, r0
   291d0:	460b      	mov	r3, r1
   291d2:	f7ef fdc9 	bl	18d68 <__aeabi_ddiv>
   291d6:	ec41 0b10 	vmov	d0, r0, r1
   291da:	e7da      	b.n	29192 <__ieee754_sqrt+0x13e>
   291dc:	4663      	mov	r3, ip
   291de:	2020      	movs	r0, #32
   291e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   291e4:	e7b6      	b.n	29154 <__ieee754_sqrt+0x100>
   291e6:	bf00      	nop
   291e8:	7ff00000 	.word	0x7ff00000

000291ec <__ieee754_expf>:
   291ec:	ee10 3a10 	vmov	r3, s0
   291f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   291f4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   291f8:	d856      	bhi.n	292a8 <__ieee754_expf+0xbc>
   291fa:	ea4f 71d3 	mov.w	r1, r3, lsr #31
   291fe:	f000 8095 	beq.w	2932c <__ieee754_expf+0x140>
   29202:	4862      	ldr	r0, [pc, #392]	; (2938c <__ieee754_expf+0x1a0>)
   29204:	4283      	cmp	r3, r0
   29206:	f300 8087 	bgt.w	29318 <__ieee754_expf+0x12c>
   2920a:	2b00      	cmp	r3, #0
   2920c:	f2c0 8087 	blt.w	2931e <__ieee754_expf+0x132>
   29210:	4b5f      	ldr	r3, [pc, #380]	; (29390 <__ieee754_expf+0x1a4>)
   29212:	429a      	cmp	r2, r3
   29214:	d94b      	bls.n	292ae <__ieee754_expf+0xc2>
   29216:	4b5f      	ldr	r3, [pc, #380]	; (29394 <__ieee754_expf+0x1a8>)
   29218:	429a      	cmp	r2, r3
   2921a:	f200 809a 	bhi.w	29352 <__ieee754_expf+0x166>
   2921e:	4b5e      	ldr	r3, [pc, #376]	; (29398 <__ieee754_expf+0x1ac>)
   29220:	4a5e      	ldr	r2, [pc, #376]	; (2939c <__ieee754_expf+0x1b0>)
   29222:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   29226:	ed93 4a00 	vldr	s8, [r3]
   2922a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   2922e:	f1c1 0301 	rsb	r3, r1, #1
   29232:	ee30 4a44 	vsub.f32	s8, s0, s8
   29236:	ed92 7a00 	vldr	s14, [r2]
   2923a:	1a5b      	subs	r3, r3, r1
   2923c:	ee34 0a47 	vsub.f32	s0, s8, s14
   29240:	eddf 7a57 	vldr	s15, [pc, #348]	; 293a0 <__ieee754_expf+0x1b4>
   29244:	eddf 4a57 	vldr	s9, [pc, #348]	; 293a4 <__ieee754_expf+0x1b8>
   29248:	ed9f 5a57 	vldr	s10, [pc, #348]	; 293a8 <__ieee754_expf+0x1bc>
   2924c:	ed9f 6a57 	vldr	s12, [pc, #348]	; 293ac <__ieee754_expf+0x1c0>
   29250:	eddf 5a57 	vldr	s11, [pc, #348]	; 293b0 <__ieee754_expf+0x1c4>
   29254:	ee60 6a00 	vmul.f32	s13, s0, s0
   29258:	eee6 4aa7 	vfma.f32	s9, s13, s15
   2925c:	eea4 5aa6 	vfma.f32	s10, s9, s13
   29260:	eea5 6a26 	vfma.f32	s12, s10, s13
   29264:	eee6 5a26 	vfma.f32	s11, s12, s13
   29268:	eeb0 6a40 	vmov.f32	s12, s0
   2926c:	eea5 6ae6 	vfms.f32	s12, s11, s13
   29270:	2b00      	cmp	r3, #0
   29272:	d042      	beq.n	292fa <__ieee754_expf+0x10e>
   29274:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
   29278:	ee60 5a06 	vmul.f32	s11, s0, s12
   2927c:	ee36 6ac6 	vsub.f32	s12, s13, s12
   29280:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   29284:	ee85 0a86 	vdiv.f32	s0, s11, s12
   29288:	f113 0f7d 	cmn.w	r3, #125	; 0x7d
   2928c:	ee37 0a40 	vsub.f32	s0, s14, s0
   29290:	ee30 0a44 	vsub.f32	s0, s0, s8
   29294:	ee37 0ac0 	vsub.f32	s0, s15, s0
   29298:	db4f      	blt.n	2933a <__ieee754_expf+0x14e>
   2929a:	ee10 2a10 	vmov	r2, s0
   2929e:	eb02 53c3 	add.w	r3, r2, r3, lsl #23
   292a2:	ee00 3a10 	vmov	s0, r3
   292a6:	4770      	bx	lr
   292a8:	ee30 0a00 	vadd.f32	s0, s0, s0
   292ac:	4770      	bx	lr
   292ae:	f1b2 5f50 	cmp.w	r2, #872415232	; 0x34000000
   292b2:	d20a      	bcs.n	292ca <__ieee754_expf+0xde>
   292b4:	eddf 7a3f 	vldr	s15, [pc, #252]	; 293b4 <__ieee754_expf+0x1c8>
   292b8:	ee70 7a27 	vadd.f32	s15, s0, s15
   292bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   292c0:	eef4 7ac7 	vcmpe.f32	s15, s14
   292c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   292c8:	dc5d      	bgt.n	29386 <__ieee754_expf+0x19a>
   292ca:	ee60 7a00 	vmul.f32	s15, s0, s0
   292ce:	ed9f 7a34 	vldr	s14, [pc, #208]	; 293a0 <__ieee754_expf+0x1b4>
   292d2:	eddf 5a34 	vldr	s11, [pc, #208]	; 293a4 <__ieee754_expf+0x1b8>
   292d6:	ed9f 6a34 	vldr	s12, [pc, #208]	; 293a8 <__ieee754_expf+0x1bc>
   292da:	eddf 6a34 	vldr	s13, [pc, #208]	; 293ac <__ieee754_expf+0x1c0>
   292de:	eee7 5a87 	vfma.f32	s11, s15, s14
   292e2:	ed9f 7a33 	vldr	s14, [pc, #204]	; 293b0 <__ieee754_expf+0x1c4>
   292e6:	eea7 6aa5 	vfma.f32	s12, s15, s11
   292ea:	eee7 6a86 	vfma.f32	s13, s15, s12
   292ee:	eeb0 6a40 	vmov.f32	s12, s0
   292f2:	eea7 7aa6 	vfma.f32	s14, s15, s13
   292f6:	eea7 6ac7 	vfms.f32	s12, s15, s14
   292fa:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   292fe:	ee60 6a06 	vmul.f32	s13, s0, s12
   29302:	ee36 6a67 	vsub.f32	s12, s12, s15
   29306:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   2930a:	eec6 7a86 	vdiv.f32	s15, s13, s12
   2930e:	ee37 0ac0 	vsub.f32	s0, s15, s0
   29312:	ee37 0a40 	vsub.f32	s0, s14, s0
   29316:	4770      	bx	lr
   29318:	2000      	movs	r0, #0
   2931a:	f001 bbdd 	b.w	2aad8 <__math_oflowf>
   2931e:	4b26      	ldr	r3, [pc, #152]	; (293b8 <__ieee754_expf+0x1cc>)
   29320:	429a      	cmp	r2, r3
   29322:	f67f af75 	bls.w	29210 <__ieee754_expf+0x24>
   29326:	2000      	movs	r0, #0
   29328:	f001 bbd0 	b.w	2aacc <__math_uflowf>
   2932c:	eddf 7a23 	vldr	s15, [pc, #140]	; 293bc <__ieee754_expf+0x1d0>
   29330:	2900      	cmp	r1, #0
   29332:	bf18      	it	ne
   29334:	eeb0 0a67 	vmovne.f32	s0, s15
   29338:	4770      	bx	lr
   2933a:	ee10 2a10 	vmov	r2, s0
   2933e:	3364      	adds	r3, #100	; 0x64
   29340:	eb02 53c3 	add.w	r3, r2, r3, lsl #23
   29344:	eddf 7a1e 	vldr	s15, [pc, #120]	; 293c0 <__ieee754_expf+0x1d4>
   29348:	ee00 3a10 	vmov	s0, r3
   2934c:	ee20 0a27 	vmul.f32	s0, s0, s15
   29350:	4770      	bx	lr
   29352:	4b1c      	ldr	r3, [pc, #112]	; (293c4 <__ieee754_expf+0x1d8>)
   29354:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 293c8 <__ieee754_expf+0x1dc>
   29358:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 293cc <__ieee754_expf+0x1e0>
   2935c:	eddf 6a1c 	vldr	s13, [pc, #112]	; 293d0 <__ieee754_expf+0x1e4>
   29360:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   29364:	edd3 7a00 	vldr	s15, [r3]
   29368:	eee0 7a07 	vfma.f32	s15, s0, s14
   2936c:	eeb0 4a40 	vmov.f32	s8, s0
   29370:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   29374:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   29378:	ee17 3a90 	vmov	r3, s15
   2937c:	eea7 4a46 	vfms.f32	s8, s14, s12
   29380:	ee27 7a26 	vmul.f32	s14, s14, s13
   29384:	e75a      	b.n	2923c <__ieee754_expf+0x50>
   29386:	ee30 0a07 	vadd.f32	s0, s0, s14
   2938a:	4770      	bx	lr
   2938c:	42b17217 	.word	0x42b17217
   29390:	3eb17218 	.word	0x3eb17218
   29394:	3f851591 	.word	0x3f851591
   29398:	00041998 	.word	0x00041998
   2939c:	000419a0 	.word	0x000419a0
   293a0:	3331bb4c 	.word	0x3331bb4c
   293a4:	b5ddea0e 	.word	0xb5ddea0e
   293a8:	388ab355 	.word	0x388ab355
   293ac:	bb360b61 	.word	0xbb360b61
   293b0:	3e2aaaab 	.word	0x3e2aaaab
   293b4:	7149f2ca 	.word	0x7149f2ca
   293b8:	42cff1b5 	.word	0x42cff1b5
   293bc:	00000000 	.word	0x00000000
   293c0:	0d800000 	.word	0x0d800000
   293c4:	00041990 	.word	0x00041990
   293c8:	3fb8aa3b 	.word	0x3fb8aa3b
   293cc:	3f317180 	.word	0x3f317180
   293d0:	3717f7d1 	.word	0x3717f7d1

000293d4 <__ieee754_rem_pio2f>:
   293d4:	b570      	push	{r4, r5, r6, lr}
   293d6:	ee10 3a10 	vmov	r3, s0
   293da:	4a89      	ldr	r2, [pc, #548]	; (29600 <__ieee754_rem_pio2f+0x22c>)
   293dc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   293e0:	4294      	cmp	r4, r2
   293e2:	b086      	sub	sp, #24
   293e4:	4605      	mov	r5, r0
   293e6:	dd70      	ble.n	294ca <__ieee754_rem_pio2f+0xf6>
   293e8:	4a86      	ldr	r2, [pc, #536]	; (29604 <__ieee754_rem_pio2f+0x230>)
   293ea:	4294      	cmp	r4, r2
   293ec:	ee10 6a10 	vmov	r6, s0
   293f0:	dc22      	bgt.n	29438 <__ieee754_rem_pio2f+0x64>
   293f2:	2b00      	cmp	r3, #0
   293f4:	eddf 7a84 	vldr	s15, [pc, #528]	; 29608 <__ieee754_rem_pio2f+0x234>
   293f8:	4a84      	ldr	r2, [pc, #528]	; (2960c <__ieee754_rem_pio2f+0x238>)
   293fa:	f024 040f 	bic.w	r4, r4, #15
   293fe:	eeb0 7a40 	vmov.f32	s14, s0
   29402:	f340 80e4 	ble.w	295ce <__ieee754_rem_pio2f+0x1fa>
   29406:	4294      	cmp	r4, r2
   29408:	ee70 7a67 	vsub.f32	s15, s0, s15
   2940c:	bf09      	itett	eq
   2940e:	eddf 6a80 	vldreq	s13, [pc, #512]	; 29610 <__ieee754_rem_pio2f+0x23c>
   29412:	ed9f 7a80 	vldrne	s14, [pc, #512]	; 29614 <__ieee754_rem_pio2f+0x240>
   29416:	ed9f 7a80 	vldreq	s14, [pc, #512]	; 29618 <__ieee754_rem_pio2f+0x244>
   2941a:	ee77 7ae6 	vsubeq.f32	s15, s15, s13
   2941e:	2001      	movs	r0, #1
   29420:	ee77 6ac7 	vsub.f32	s13, s15, s14
   29424:	ee77 7ae6 	vsub.f32	s15, s15, s13
   29428:	edc5 6a00 	vstr	s13, [r5]
   2942c:	ee77 7ac7 	vsub.f32	s15, s15, s14
   29430:	edc5 7a01 	vstr	s15, [r5, #4]
   29434:	b006      	add	sp, #24
   29436:	bd70      	pop	{r4, r5, r6, pc}
   29438:	4a78      	ldr	r2, [pc, #480]	; (2961c <__ieee754_rem_pio2f+0x248>)
   2943a:	4294      	cmp	r4, r2
   2943c:	dd54      	ble.n	294e8 <__ieee754_rem_pio2f+0x114>
   2943e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   29442:	da49      	bge.n	294d8 <__ieee754_rem_pio2f+0x104>
   29444:	15e2      	asrs	r2, r4, #23
   29446:	3a86      	subs	r2, #134	; 0x86
   29448:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
   2944c:	ee07 3a90 	vmov	s15, r3
   29450:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   29454:	eddf 6a72 	vldr	s13, [pc, #456]	; 29620 <__ieee754_rem_pio2f+0x24c>
   29458:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   2945c:	ee77 7ac7 	vsub.f32	s15, s15, s14
   29460:	ed8d 7a03 	vstr	s14, [sp, #12]
   29464:	ee67 7aa6 	vmul.f32	s15, s15, s13
   29468:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   2946c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   29470:	ee77 7ac7 	vsub.f32	s15, s15, s14
   29474:	ed8d 7a04 	vstr	s14, [sp, #16]
   29478:	ee67 7aa6 	vmul.f32	s15, s15, s13
   2947c:	eef5 7a40 	vcmp.f32	s15, #0.0
   29480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   29484:	edcd 7a05 	vstr	s15, [sp, #20]
   29488:	f040 8090 	bne.w	295ac <__ieee754_rem_pio2f+0x1d8>
   2948c:	eeb5 7a40 	vcmp.f32	s14, #0.0
   29490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   29494:	bf14      	ite	ne
   29496:	2302      	movne	r3, #2
   29498:	2301      	moveq	r3, #1
   2949a:	4962      	ldr	r1, [pc, #392]	; (29624 <__ieee754_rem_pio2f+0x250>)
   2949c:	9101      	str	r1, [sp, #4]
   2949e:	2102      	movs	r1, #2
   294a0:	9100      	str	r1, [sp, #0]
   294a2:	a803      	add	r0, sp, #12
   294a4:	4629      	mov	r1, r5
   294a6:	f000 ff73 	bl	2a390 <__kernel_rem_pio2f>
   294aa:	2e00      	cmp	r6, #0
   294ac:	dac2      	bge.n	29434 <__ieee754_rem_pio2f+0x60>
   294ae:	ed95 7a00 	vldr	s14, [r5]
   294b2:	edd5 7a01 	vldr	s15, [r5, #4]
   294b6:	eeb1 7a47 	vneg.f32	s14, s14
   294ba:	eef1 7a67 	vneg.f32	s15, s15
   294be:	ed85 7a00 	vstr	s14, [r5]
   294c2:	edc5 7a01 	vstr	s15, [r5, #4]
   294c6:	4240      	negs	r0, r0
   294c8:	e7b4      	b.n	29434 <__ieee754_rem_pio2f+0x60>
   294ca:	2200      	movs	r2, #0
   294cc:	ed85 0a00 	vstr	s0, [r5]
   294d0:	6042      	str	r2, [r0, #4]
   294d2:	2000      	movs	r0, #0
   294d4:	b006      	add	sp, #24
   294d6:	bd70      	pop	{r4, r5, r6, pc}
   294d8:	ee70 7a40 	vsub.f32	s15, s0, s0
   294dc:	2000      	movs	r0, #0
   294de:	edc5 7a01 	vstr	s15, [r5, #4]
   294e2:	edc5 7a00 	vstr	s15, [r5]
   294e6:	e7a5      	b.n	29434 <__ieee754_rem_pio2f+0x60>
   294e8:	f001 fb98 	bl	2ac1c <fabsf>
   294ec:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 29628 <__ieee754_rem_pio2f+0x254>
   294f0:	ed9f 6a45 	vldr	s12, [pc, #276]	; 29608 <__ieee754_rem_pio2f+0x234>
   294f4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   294f8:	eee0 7a07 	vfma.f32	s15, s0, s14
   294fc:	ed9f 7a45 	vldr	s14, [pc, #276]	; 29614 <__ieee754_rem_pio2f+0x240>
   29500:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   29504:	ee17 0a90 	vmov	r0, s15
   29508:	eef8 6ae7 	vcvt.f32.s32	s13, s15
   2950c:	281f      	cmp	r0, #31
   2950e:	eea6 0ac6 	vfms.f32	s0, s13, s12
   29512:	ee66 7a87 	vmul.f32	s15, s13, s14
   29516:	eeb1 6a66 	vneg.f32	s12, s13
   2951a:	dc1e      	bgt.n	2955a <__ieee754_rem_pio2f+0x186>
   2951c:	4a43      	ldr	r2, [pc, #268]	; (2962c <__ieee754_rem_pio2f+0x258>)
   2951e:	1e41      	subs	r1, r0, #1
   29520:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
   29524:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   29528:	4293      	cmp	r3, r2
   2952a:	d016      	beq.n	2955a <__ieee754_rem_pio2f+0x186>
   2952c:	ee30 7a67 	vsub.f32	s14, s0, s15
   29530:	ed85 7a00 	vstr	s14, [r5]
   29534:	ee30 0a47 	vsub.f32	s0, s0, s14
   29538:	2e00      	cmp	r6, #0
   2953a:	ee30 0a67 	vsub.f32	s0, s0, s15
   2953e:	ed85 0a01 	vstr	s0, [r5, #4]
   29542:	f6bf af77 	bge.w	29434 <__ieee754_rem_pio2f+0x60>
   29546:	eeb1 7a47 	vneg.f32	s14, s14
   2954a:	eeb1 0a40 	vneg.f32	s0, s0
   2954e:	ed85 7a00 	vstr	s14, [r5]
   29552:	ed85 0a01 	vstr	s0, [r5, #4]
   29556:	4240      	negs	r0, r0
   29558:	e76c      	b.n	29434 <__ieee754_rem_pio2f+0x60>
   2955a:	ee30 7a67 	vsub.f32	s14, s0, s15
   2955e:	15e2      	asrs	r2, r4, #23
   29560:	ee17 3a10 	vmov	r3, s14
   29564:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   29568:	ebc3 54d4 	rsb	r4, r3, r4, lsr #23
   2956c:	2c08      	cmp	r4, #8
   2956e:	dddf      	ble.n	29530 <__ieee754_rem_pio2f+0x15c>
   29570:	eddf 7a27 	vldr	s15, [pc, #156]	; 29610 <__ieee754_rem_pio2f+0x23c>
   29574:	ed9f 7a28 	vldr	s14, [pc, #160]	; 29618 <__ieee754_rem_pio2f+0x244>
   29578:	eef0 5a40 	vmov.f32	s11, s0
   2957c:	eee6 5a27 	vfma.f32	s11, s12, s15
   29580:	ee30 0a65 	vsub.f32	s0, s0, s11
   29584:	eea6 0a27 	vfma.f32	s0, s12, s15
   29588:	eef0 7a40 	vmov.f32	s15, s0
   2958c:	eed6 7a87 	vfnms.f32	s15, s13, s14
   29590:	ee35 7ae7 	vsub.f32	s14, s11, s15
   29594:	ee17 3a10 	vmov	r3, s14
   29598:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   2959c:	1ad2      	subs	r2, r2, r3
   2959e:	2a19      	cmp	r2, #25
   295a0:	dc06      	bgt.n	295b0 <__ieee754_rem_pio2f+0x1dc>
   295a2:	eeb0 0a65 	vmov.f32	s0, s11
   295a6:	ed85 7a00 	vstr	s14, [r5]
   295aa:	e7c3      	b.n	29534 <__ieee754_rem_pio2f+0x160>
   295ac:	2303      	movs	r3, #3
   295ae:	e774      	b.n	2949a <__ieee754_rem_pio2f+0xc6>
   295b0:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 29630 <__ieee754_rem_pio2f+0x25c>
   295b4:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 29634 <__ieee754_rem_pio2f+0x260>
   295b8:	eeb0 0a65 	vmov.f32	s0, s11
   295bc:	eea6 0a07 	vfma.f32	s0, s12, s14
   295c0:	ee75 7ac0 	vsub.f32	s15, s11, s0
   295c4:	eee6 7a07 	vfma.f32	s15, s12, s14
   295c8:	eed6 7a85 	vfnms.f32	s15, s13, s10
   295cc:	e7ae      	b.n	2952c <__ieee754_rem_pio2f+0x158>
   295ce:	4294      	cmp	r4, r2
   295d0:	ee70 7a27 	vadd.f32	s15, s0, s15
   295d4:	bf09      	itett	eq
   295d6:	eddf 6a0e 	vldreq	s13, [pc, #56]	; 29610 <__ieee754_rem_pio2f+0x23c>
   295da:	ed9f 7a0e 	vldrne	s14, [pc, #56]	; 29614 <__ieee754_rem_pio2f+0x240>
   295de:	ed9f 7a0e 	vldreq	s14, [pc, #56]	; 29618 <__ieee754_rem_pio2f+0x244>
   295e2:	ee77 7aa6 	vaddeq.f32	s15, s15, s13
   295e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   295ea:	ee77 6a87 	vadd.f32	s13, s15, s14
   295ee:	ee77 7ae6 	vsub.f32	s15, s15, s13
   295f2:	edc5 6a00 	vstr	s13, [r5]
   295f6:	ee77 7a87 	vadd.f32	s15, s15, s14
   295fa:	edc5 7a01 	vstr	s15, [r5, #4]
   295fe:	e719      	b.n	29434 <__ieee754_rem_pio2f+0x60>
   29600:	3f490fd8 	.word	0x3f490fd8
   29604:	4016cbe3 	.word	0x4016cbe3
   29608:	3fc90f80 	.word	0x3fc90f80
   2960c:	3fc90fd0 	.word	0x3fc90fd0
   29610:	37354400 	.word	0x37354400
   29614:	37354443 	.word	0x37354443
   29618:	2e85a308 	.word	0x2e85a308
   2961c:	43490f80 	.word	0x43490f80
   29620:	43800000 	.word	0x43800000
   29624:	00041a28 	.word	0x00041a28
   29628:	3f22f984 	.word	0x3f22f984
   2962c:	000419a8 	.word	0x000419a8
   29630:	2e85a300 	.word	0x2e85a300
   29634:	248d3132 	.word	0x248d3132

00029638 <__ieee754_sqrtf>:
   29638:	eeb1 0ac0 	vsqrt.f32	s0, s0
   2963c:	4770      	bx	lr
   2963e:	bf00      	nop

00029640 <__kernel_cos>:
   29640:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29644:	ec57 6b10 	vmov	r6, r7, d0
   29648:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   2964c:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
   29650:	ed2d 8b04 	vpush	{d8-d9}
   29654:	ec5b ab11 	vmov	sl, fp, d1
   29658:	da71      	bge.n	2973e <__kernel_cos+0xfe>
   2965a:	ee10 0a10 	vmov	r0, s0
   2965e:	4639      	mov	r1, r7
   29660:	f7ef fd08 	bl	19074 <__aeabi_d2iz>
   29664:	2800      	cmp	r0, #0
   29666:	f000 80f6 	beq.w	29856 <__kernel_cos+0x216>
   2966a:	4632      	mov	r2, r6
   2966c:	463b      	mov	r3, r7
   2966e:	4630      	mov	r0, r6
   29670:	4639      	mov	r1, r7
   29672:	f7ef fa4f 	bl	18b14 <__aeabi_dmul>
   29676:	a37c      	add	r3, pc, #496	; (adr r3, 29868 <__kernel_cos+0x228>)
   29678:	e9d3 2300 	ldrd	r2, r3, [r3]
   2967c:	4604      	mov	r4, r0
   2967e:	460d      	mov	r5, r1
   29680:	f7ef fa48 	bl	18b14 <__aeabi_dmul>
   29684:	a37a      	add	r3, pc, #488	; (adr r3, 29870 <__kernel_cos+0x230>)
   29686:	e9d3 2300 	ldrd	r2, r3, [r3]
   2968a:	f7ef f88d 	bl	187a8 <__adddf3>
   2968e:	4622      	mov	r2, r4
   29690:	462b      	mov	r3, r5
   29692:	f7ef fa3f 	bl	18b14 <__aeabi_dmul>
   29696:	a378      	add	r3, pc, #480	; (adr r3, 29878 <__kernel_cos+0x238>)
   29698:	e9d3 2300 	ldrd	r2, r3, [r3]
   2969c:	f7ef f882 	bl	187a4 <__aeabi_dsub>
   296a0:	4622      	mov	r2, r4
   296a2:	462b      	mov	r3, r5
   296a4:	f7ef fa36 	bl	18b14 <__aeabi_dmul>
   296a8:	a375      	add	r3, pc, #468	; (adr r3, 29880 <__kernel_cos+0x240>)
   296aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   296ae:	f7ef f87b 	bl	187a8 <__adddf3>
   296b2:	4622      	mov	r2, r4
   296b4:	462b      	mov	r3, r5
   296b6:	f7ef fa2d 	bl	18b14 <__aeabi_dmul>
   296ba:	a373      	add	r3, pc, #460	; (adr r3, 29888 <__kernel_cos+0x248>)
   296bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   296c0:	f7ef f870 	bl	187a4 <__aeabi_dsub>
   296c4:	4622      	mov	r2, r4
   296c6:	462b      	mov	r3, r5
   296c8:	f7ef fa24 	bl	18b14 <__aeabi_dmul>
   296cc:	a370      	add	r3, pc, #448	; (adr r3, 29890 <__kernel_cos+0x250>)
   296ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   296d2:	f7ef f869 	bl	187a8 <__adddf3>
   296d6:	4622      	mov	r2, r4
   296d8:	462b      	mov	r3, r5
   296da:	f7ef fa1b 	bl	18b14 <__aeabi_dmul>
   296de:	ec41 0b18 	vmov	d8, r0, r1
   296e2:	4b71      	ldr	r3, [pc, #452]	; (298a8 <__kernel_cos+0x268>)
   296e4:	2200      	movs	r2, #0
   296e6:	4620      	mov	r0, r4
   296e8:	4629      	mov	r1, r5
   296ea:	f7ef fa13 	bl	18b14 <__aeabi_dmul>
   296ee:	ec53 2b18 	vmov	r2, r3, d8
   296f2:	4680      	mov	r8, r0
   296f4:	4689      	mov	r9, r1
   296f6:	4620      	mov	r0, r4
   296f8:	4629      	mov	r1, r5
   296fa:	f7ef fa0b 	bl	18b14 <__aeabi_dmul>
   296fe:	4652      	mov	r2, sl
   29700:	465b      	mov	r3, fp
   29702:	4604      	mov	r4, r0
   29704:	460d      	mov	r5, r1
   29706:	4630      	mov	r0, r6
   29708:	4639      	mov	r1, r7
   2970a:	f7ef fa03 	bl	18b14 <__aeabi_dmul>
   2970e:	4602      	mov	r2, r0
   29710:	460b      	mov	r3, r1
   29712:	4620      	mov	r0, r4
   29714:	4629      	mov	r1, r5
   29716:	f7ef f845 	bl	187a4 <__aeabi_dsub>
   2971a:	4602      	mov	r2, r0
   2971c:	460b      	mov	r3, r1
   2971e:	4640      	mov	r0, r8
   29720:	4649      	mov	r1, r9
   29722:	f7ef f83f 	bl	187a4 <__aeabi_dsub>
   29726:	4602      	mov	r2, r0
   29728:	460b      	mov	r3, r1
   2972a:	2000      	movs	r0, #0
   2972c:	495f      	ldr	r1, [pc, #380]	; (298ac <__kernel_cos+0x26c>)
   2972e:	f7ef f839 	bl	187a4 <__aeabi_dsub>
   29732:	ecbd 8b04 	vpop	{d8-d9}
   29736:	ec41 0b10 	vmov	d0, r0, r1
   2973a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2973e:	ee10 2a10 	vmov	r2, s0
   29742:	ee10 0a10 	vmov	r0, s0
   29746:	463b      	mov	r3, r7
   29748:	4639      	mov	r1, r7
   2974a:	f7ef f9e3 	bl	18b14 <__aeabi_dmul>
   2974e:	a346      	add	r3, pc, #280	; (adr r3, 29868 <__kernel_cos+0x228>)
   29750:	e9d3 2300 	ldrd	r2, r3, [r3]
   29754:	4604      	mov	r4, r0
   29756:	460d      	mov	r5, r1
   29758:	f7ef f9dc 	bl	18b14 <__aeabi_dmul>
   2975c:	a344      	add	r3, pc, #272	; (adr r3, 29870 <__kernel_cos+0x230>)
   2975e:	e9d3 2300 	ldrd	r2, r3, [r3]
   29762:	f7ef f821 	bl	187a8 <__adddf3>
   29766:	4622      	mov	r2, r4
   29768:	462b      	mov	r3, r5
   2976a:	f7ef f9d3 	bl	18b14 <__aeabi_dmul>
   2976e:	a342      	add	r3, pc, #264	; (adr r3, 29878 <__kernel_cos+0x238>)
   29770:	e9d3 2300 	ldrd	r2, r3, [r3]
   29774:	f7ef f816 	bl	187a4 <__aeabi_dsub>
   29778:	4622      	mov	r2, r4
   2977a:	462b      	mov	r3, r5
   2977c:	f7ef f9ca 	bl	18b14 <__aeabi_dmul>
   29780:	a33f      	add	r3, pc, #252	; (adr r3, 29880 <__kernel_cos+0x240>)
   29782:	e9d3 2300 	ldrd	r2, r3, [r3]
   29786:	f7ef f80f 	bl	187a8 <__adddf3>
   2978a:	4622      	mov	r2, r4
   2978c:	462b      	mov	r3, r5
   2978e:	f7ef f9c1 	bl	18b14 <__aeabi_dmul>
   29792:	a33d      	add	r3, pc, #244	; (adr r3, 29888 <__kernel_cos+0x248>)
   29794:	e9d3 2300 	ldrd	r2, r3, [r3]
   29798:	f7ef f804 	bl	187a4 <__aeabi_dsub>
   2979c:	4622      	mov	r2, r4
   2979e:	462b      	mov	r3, r5
   297a0:	f7ef f9b8 	bl	18b14 <__aeabi_dmul>
   297a4:	a33a      	add	r3, pc, #232	; (adr r3, 29890 <__kernel_cos+0x250>)
   297a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   297aa:	f7ee fffd 	bl	187a8 <__adddf3>
   297ae:	462b      	mov	r3, r5
   297b0:	4622      	mov	r2, r4
   297b2:	f7ef f9af 	bl	18b14 <__aeabi_dmul>
   297b6:	4b3e      	ldr	r3, [pc, #248]	; (298b0 <__kernel_cos+0x270>)
   297b8:	4599      	cmp	r9, r3
   297ba:	ec41 0b18 	vmov	d8, r0, r1
   297be:	dd90      	ble.n	296e2 <__kernel_cos+0xa2>
   297c0:	4b3c      	ldr	r3, [pc, #240]	; (298b4 <__kernel_cos+0x274>)
   297c2:	4599      	cmp	r9, r3
   297c4:	dc3c      	bgt.n	29840 <__kernel_cos+0x200>
   297c6:	2200      	movs	r2, #0
   297c8:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
   297cc:	4937      	ldr	r1, [pc, #220]	; (298ac <__kernel_cos+0x26c>)
   297ce:	2000      	movs	r0, #0
   297d0:	4690      	mov	r8, r2
   297d2:	4699      	mov	r9, r3
   297d4:	f7ee ffe6 	bl	187a4 <__aeabi_dsub>
   297d8:	ec41 0b19 	vmov	d9, r0, r1
   297dc:	4b32      	ldr	r3, [pc, #200]	; (298a8 <__kernel_cos+0x268>)
   297de:	2200      	movs	r2, #0
   297e0:	4620      	mov	r0, r4
   297e2:	4629      	mov	r1, r5
   297e4:	f7ef f996 	bl	18b14 <__aeabi_dmul>
   297e8:	4642      	mov	r2, r8
   297ea:	464b      	mov	r3, r9
   297ec:	f7ee ffda 	bl	187a4 <__aeabi_dsub>
   297f0:	ec53 2b18 	vmov	r2, r3, d8
   297f4:	4680      	mov	r8, r0
   297f6:	4689      	mov	r9, r1
   297f8:	4620      	mov	r0, r4
   297fa:	4629      	mov	r1, r5
   297fc:	f7ef f98a 	bl	18b14 <__aeabi_dmul>
   29800:	4652      	mov	r2, sl
   29802:	465b      	mov	r3, fp
   29804:	4604      	mov	r4, r0
   29806:	460d      	mov	r5, r1
   29808:	4630      	mov	r0, r6
   2980a:	4639      	mov	r1, r7
   2980c:	f7ef f982 	bl	18b14 <__aeabi_dmul>
   29810:	4602      	mov	r2, r0
   29812:	460b      	mov	r3, r1
   29814:	4620      	mov	r0, r4
   29816:	4629      	mov	r1, r5
   29818:	f7ee ffc4 	bl	187a4 <__aeabi_dsub>
   2981c:	4602      	mov	r2, r0
   2981e:	460b      	mov	r3, r1
   29820:	4640      	mov	r0, r8
   29822:	4649      	mov	r1, r9
   29824:	f7ee ffbe 	bl	187a4 <__aeabi_dsub>
   29828:	4602      	mov	r2, r0
   2982a:	460b      	mov	r3, r1
   2982c:	ec51 0b19 	vmov	r0, r1, d9
   29830:	f7ee ffb8 	bl	187a4 <__aeabi_dsub>
   29834:	ecbd 8b04 	vpop	{d8-d9}
   29838:	ec41 0b10 	vmov	d0, r0, r1
   2983c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29840:	ed9f 7b15 	vldr	d7, [pc, #84]	; 29898 <__kernel_cos+0x258>
   29844:	f8df 9070 	ldr.w	r9, [pc, #112]	; 298b8 <__kernel_cos+0x278>
   29848:	eeb0 9a47 	vmov.f32	s18, s14
   2984c:	eef0 9a67 	vmov.f32	s19, s15
   29850:	f04f 0800 	mov.w	r8, #0
   29854:	e7c2      	b.n	297dc <__kernel_cos+0x19c>
   29856:	ecbd 8b04 	vpop	{d8-d9}
   2985a:	ed9f 0b11 	vldr	d0, [pc, #68]	; 298a0 <__kernel_cos+0x260>
   2985e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29862:	bf00      	nop
   29864:	f3af 8000 	nop.w
   29868:	be8838d4 	.word	0xbe8838d4
   2986c:	bda8fae9 	.word	0xbda8fae9
   29870:	bdb4b1c4 	.word	0xbdb4b1c4
   29874:	3e21ee9e 	.word	0x3e21ee9e
   29878:	809c52ad 	.word	0x809c52ad
   2987c:	3e927e4f 	.word	0x3e927e4f
   29880:	19cb1590 	.word	0x19cb1590
   29884:	3efa01a0 	.word	0x3efa01a0
   29888:	16c15177 	.word	0x16c15177
   2988c:	3f56c16c 	.word	0x3f56c16c
   29890:	5555554c 	.word	0x5555554c
   29894:	3fa55555 	.word	0x3fa55555
   29898:	00000000 	.word	0x00000000
   2989c:	3fe70000 	.word	0x3fe70000
   298a0:	00000000 	.word	0x00000000
   298a4:	3ff00000 	.word	0x3ff00000
   298a8:	3fe00000 	.word	0x3fe00000
   298ac:	3ff00000 	.word	0x3ff00000
   298b0:	3fd33332 	.word	0x3fd33332
   298b4:	3fe90000 	.word	0x3fe90000
   298b8:	3fd20000 	.word	0x3fd20000
   298bc:	00000000 	.word	0x00000000

000298c0 <__kernel_rem_pio2>:
   298c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   298c4:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
   298c8:	461c      	mov	r4, r3
   298ca:	9308      	str	r3, [sp, #32]
   298cc:	910b      	str	r1, [sp, #44]	; 0x2c
   298ce:	4bba      	ldr	r3, [pc, #744]	; (29bb8 <__kernel_rem_pio2+0x2f8>)
   298d0:	99a2      	ldr	r1, [sp, #648]	; 0x288
   298d2:	9004      	str	r0, [sp, #16]
   298d4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
   298d8:	9105      	str	r1, [sp, #20]
   298da:	1e63      	subs	r3, r4, #1
   298dc:	f112 0f14 	cmn.w	r2, #20
   298e0:	9303      	str	r3, [sp, #12]
   298e2:	f2c0 834b 	blt.w	29f7c <__kernel_rem_pio2+0x6bc>
   298e6:	49b5      	ldr	r1, [pc, #724]	; (29bbc <__kernel_rem_pio2+0x2fc>)
   298e8:	1ed3      	subs	r3, r2, #3
   298ea:	fb81 0103 	smull	r0, r1, r1, r3
   298ee:	17db      	asrs	r3, r3, #31
   298f0:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
   298f4:	9307      	str	r3, [sp, #28]
   298f6:	3301      	adds	r3, #1
   298f8:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   298fc:	00db      	lsls	r3, r3, #3
   298fe:	18d3      	adds	r3, r2, r3
   29900:	9306      	str	r3, [sp, #24]
   29902:	9a07      	ldr	r2, [sp, #28]
   29904:	9b03      	ldr	r3, [sp, #12]
   29906:	1ad4      	subs	r4, r2, r3
   29908:	9a05      	ldr	r2, [sp, #20]
   2990a:	18d6      	adds	r6, r2, r3
   2990c:	d41a      	bmi.n	29944 <__kernel_rem_pio2+0x84>
   2990e:	3601      	adds	r6, #1
   29910:	9fa3      	ldr	r7, [sp, #652]	; 0x28c
   29912:	4426      	add	r6, r4
   29914:	ad20      	add	r5, sp, #128	; 0x80
   29916:	f04f 0800 	mov.w	r8, #0
   2991a:	f04f 0900 	mov.w	r9, #0
   2991e:	e008      	b.n	29932 <__kernel_rem_pio2+0x72>
   29920:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   29924:	f7ef f88c 	bl	18a40 <__aeabi_i2d>
   29928:	3401      	adds	r4, #1
   2992a:	42b4      	cmp	r4, r6
   2992c:	e8e5 0102 	strd	r0, r1, [r5], #8
   29930:	d008      	beq.n	29944 <__kernel_rem_pio2+0x84>
   29932:	2c00      	cmp	r4, #0
   29934:	daf4      	bge.n	29920 <__kernel_rem_pio2+0x60>
   29936:	3401      	adds	r4, #1
   29938:	4640      	mov	r0, r8
   2993a:	4649      	mov	r1, r9
   2993c:	42b4      	cmp	r4, r6
   2993e:	e8e5 0102 	strd	r0, r1, [r5], #8
   29942:	d1f6      	bne.n	29932 <__kernel_rem_pio2+0x72>
   29944:	9b05      	ldr	r3, [sp, #20]
   29946:	2b00      	cmp	r3, #0
   29948:	f2c0 83c6 	blt.w	2a0d8 <__kernel_rem_pio2+0x818>
   2994c:	9b08      	ldr	r3, [sp, #32]
   2994e:	f8dd 900c 	ldr.w	r9, [sp, #12]
   29952:	aa20      	add	r2, sp, #128	; 0x80
   29954:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
   29958:	00da      	lsls	r2, r3, #3
   2995a:	9202      	str	r2, [sp, #8]
   2995c:	9a05      	ldr	r2, [sp, #20]
   2995e:	441a      	add	r2, r3
   29960:	9201      	str	r2, [sp, #4]
   29962:	9a04      	ldr	r2, [sp, #16]
   29964:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
   29968:	eb02 08c3 	add.w	r8, r2, r3, lsl #3
   2996c:	9b03      	ldr	r3, [sp, #12]
   2996e:	2b00      	cmp	r3, #0
   29970:	f2c0 81a7 	blt.w	29cc2 <__kernel_rem_pio2+0x402>
   29974:	9e04      	ldr	r6, [sp, #16]
   29976:	4657      	mov	r7, sl
   29978:	2400      	movs	r4, #0
   2997a:	2500      	movs	r5, #0
   2997c:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
   29980:	e8f6 0102 	ldrd	r0, r1, [r6], #8
   29984:	f7ef f8c6 	bl	18b14 <__aeabi_dmul>
   29988:	4602      	mov	r2, r0
   2998a:	460b      	mov	r3, r1
   2998c:	4620      	mov	r0, r4
   2998e:	4629      	mov	r1, r5
   29990:	f7ee ff0a 	bl	187a8 <__adddf3>
   29994:	4546      	cmp	r6, r8
   29996:	4604      	mov	r4, r0
   29998:	460d      	mov	r5, r1
   2999a:	d1ef      	bne.n	2997c <__kernel_rem_pio2+0xbc>
   2999c:	9b01      	ldr	r3, [sp, #4]
   2999e:	f109 0901 	add.w	r9, r9, #1
   299a2:	4599      	cmp	r9, r3
   299a4:	e8eb 4502 	strd	r4, r5, [fp], #8
   299a8:	f10a 0a08 	add.w	sl, sl, #8
   299ac:	d1de      	bne.n	2996c <__kernel_rem_pio2+0xac>
   299ae:	9a04      	ldr	r2, [sp, #16]
   299b0:	9b02      	ldr	r3, [sp, #8]
   299b2:	4413      	add	r3, r2
   299b4:	9a05      	ldr	r2, [sp, #20]
   299b6:	9201      	str	r2, [sp, #4]
   299b8:	469b      	mov	fp, r3
   299ba:	ab0b      	add	r3, sp, #44	; 0x2c
   299bc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   299c0:	930a      	str	r3, [sp, #40]	; 0x28
   299c2:	ab0c      	add	r3, sp, #48	; 0x30
   299c4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   299c8:	3b08      	subs	r3, #8
   299ca:	9309      	str	r3, [sp, #36]	; 0x24
   299cc:	9a01      	ldr	r2, [sp, #4]
   299ce:	ab98      	add	r3, sp, #608	; 0x260
   299d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   299d4:	2a00      	cmp	r2, #0
   299d6:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
   299da:	dd29      	ble.n	29a30 <__kernel_rem_pio2+0x170>
   299dc:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
   299e0:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
   299e4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
   299e8:	4b75      	ldr	r3, [pc, #468]	; (29bc0 <__kernel_rem_pio2+0x300>)
   299ea:	2200      	movs	r2, #0
   299ec:	4620      	mov	r0, r4
   299ee:	4629      	mov	r1, r5
   299f0:	f7ef f890 	bl	18b14 <__aeabi_dmul>
   299f4:	f7ef fb3e 	bl	19074 <__aeabi_d2iz>
   299f8:	f7ef f822 	bl	18a40 <__aeabi_i2d>
   299fc:	4b71      	ldr	r3, [pc, #452]	; (29bc4 <__kernel_rem_pio2+0x304>)
   299fe:	2200      	movs	r2, #0
   29a00:	4606      	mov	r6, r0
   29a02:	460f      	mov	r7, r1
   29a04:	f7ef f886 	bl	18b14 <__aeabi_dmul>
   29a08:	4602      	mov	r2, r0
   29a0a:	460b      	mov	r3, r1
   29a0c:	4620      	mov	r0, r4
   29a0e:	4629      	mov	r1, r5
   29a10:	f7ee fec8 	bl	187a4 <__aeabi_dsub>
   29a14:	f7ef fb2e 	bl	19074 <__aeabi_d2iz>
   29a18:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
   29a1c:	f849 0b04 	str.w	r0, [r9], #4
   29a20:	4639      	mov	r1, r7
   29a22:	4630      	mov	r0, r6
   29a24:	f7ee fec0 	bl	187a8 <__adddf3>
   29a28:	45d0      	cmp	r8, sl
   29a2a:	4604      	mov	r4, r0
   29a2c:	460d      	mov	r5, r1
   29a2e:	d1db      	bne.n	299e8 <__kernel_rem_pio2+0x128>
   29a30:	f8dd 9018 	ldr.w	r9, [sp, #24]
   29a34:	ec45 4b10 	vmov	d0, r4, r5
   29a38:	4648      	mov	r0, r9
   29a3a:	f001 f85d 	bl	2aaf8 <scalbn>
   29a3e:	ec55 4b10 	vmov	r4, r5, d0
   29a42:	2200      	movs	r2, #0
   29a44:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   29a48:	ee10 0a10 	vmov	r0, s0
   29a4c:	4629      	mov	r1, r5
   29a4e:	f7ef f861 	bl	18b14 <__aeabi_dmul>
   29a52:	ec41 0b10 	vmov	d0, r0, r1
   29a56:	f7fe fe2b 	bl	286b0 <floor>
   29a5a:	4b5b      	ldr	r3, [pc, #364]	; (29bc8 <__kernel_rem_pio2+0x308>)
   29a5c:	ec51 0b10 	vmov	r0, r1, d0
   29a60:	2200      	movs	r2, #0
   29a62:	f7ef f857 	bl	18b14 <__aeabi_dmul>
   29a66:	4602      	mov	r2, r0
   29a68:	460b      	mov	r3, r1
   29a6a:	4620      	mov	r0, r4
   29a6c:	4629      	mov	r1, r5
   29a6e:	f7ee fe99 	bl	187a4 <__aeabi_dsub>
   29a72:	460d      	mov	r5, r1
   29a74:	4604      	mov	r4, r0
   29a76:	f7ef fafd 	bl	19074 <__aeabi_d2iz>
   29a7a:	4680      	mov	r8, r0
   29a7c:	f7ee ffe0 	bl	18a40 <__aeabi_i2d>
   29a80:	460b      	mov	r3, r1
   29a82:	4602      	mov	r2, r0
   29a84:	4629      	mov	r1, r5
   29a86:	4620      	mov	r0, r4
   29a88:	f7ee fe8c 	bl	187a4 <__aeabi_dsub>
   29a8c:	464b      	mov	r3, r9
   29a8e:	2b00      	cmp	r3, #0
   29a90:	4606      	mov	r6, r0
   29a92:	460f      	mov	r7, r1
   29a94:	f340 809a 	ble.w	29bcc <__kernel_rem_pio2+0x30c>
   29a98:	9a01      	ldr	r2, [sp, #4]
   29a9a:	1e51      	subs	r1, r2, #1
   29a9c:	aa0c      	add	r2, sp, #48	; 0x30
   29a9e:	f1c9 0318 	rsb	r3, r9, #24
   29aa2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   29aa6:	fa42 f003 	asr.w	r0, r2, r3
   29aaa:	fa00 f303 	lsl.w	r3, r0, r3
   29aae:	1ad3      	subs	r3, r2, r3
   29ab0:	f1c9 0517 	rsb	r5, r9, #23
   29ab4:	aa0c      	add	r2, sp, #48	; 0x30
   29ab6:	fa43 f505 	asr.w	r5, r3, r5
   29aba:	2d00      	cmp	r5, #0
   29abc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
   29ac0:	4480      	add	r8, r0
   29ac2:	f300 808d 	bgt.w	29be0 <__kernel_rem_pio2+0x320>
   29ac6:	2200      	movs	r2, #0
   29ac8:	2300      	movs	r3, #0
   29aca:	4630      	mov	r0, r6
   29acc:	4639      	mov	r1, r7
   29ace:	f7ef fa89 	bl	18fe4 <__aeabi_dcmpeq>
   29ad2:	2800      	cmp	r0, #0
   29ad4:	f000 8259 	beq.w	29f8a <__kernel_rem_pio2+0x6ca>
   29ad8:	9b01      	ldr	r3, [sp, #4]
   29ada:	9a05      	ldr	r2, [sp, #20]
   29adc:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
   29ae0:	4552      	cmp	r2, sl
   29ae2:	dc10      	bgt.n	29b06 <__kernel_rem_pio2+0x246>
   29ae4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   29ae8:	aa0c      	add	r2, sp, #48	; 0x30
   29aea:	3b01      	subs	r3, #1
   29aec:	980a      	ldr	r0, [sp, #40]	; 0x28
   29aee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   29af2:	2200      	movs	r2, #0
   29af4:	f853 1904 	ldr.w	r1, [r3], #-4
   29af8:	4283      	cmp	r3, r0
   29afa:	ea42 0201 	orr.w	r2, r2, r1
   29afe:	d1f9      	bne.n	29af4 <__kernel_rem_pio2+0x234>
   29b00:	2a00      	cmp	r2, #0
   29b02:	f040 80e1 	bne.w	29cc8 <__kernel_rem_pio2+0x408>
   29b06:	9b05      	ldr	r3, [sp, #20]
   29b08:	aa0c      	add	r2, sp, #48	; 0x30
   29b0a:	3b01      	subs	r3, #1
   29b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   29b10:	2b00      	cmp	r3, #0
   29b12:	f040 80d1 	bne.w	29cb8 <__kernel_rem_pio2+0x3f8>
   29b16:	9a09      	ldr	r2, [sp, #36]	; 0x24
   29b18:	2301      	movs	r3, #1
   29b1a:	f852 1904 	ldr.w	r1, [r2], #-4
   29b1e:	3301      	adds	r3, #1
   29b20:	2900      	cmp	r1, #0
   29b22:	d0fa      	beq.n	29b1a <__kernel_rem_pio2+0x25a>
   29b24:	9a01      	ldr	r2, [sp, #4]
   29b26:	18d3      	adds	r3, r2, r3
   29b28:	9302      	str	r3, [sp, #8]
   29b2a:	1c53      	adds	r3, r2, #1
   29b2c:	4699      	mov	r9, r3
   29b2e:	9a01      	ldr	r2, [sp, #4]
   29b30:	9908      	ldr	r1, [sp, #32]
   29b32:	440a      	add	r2, r1
   29b34:	4690      	mov	r8, r2
   29b36:	9a07      	ldr	r2, [sp, #28]
   29b38:	eb02 0a03 	add.w	sl, r2, r3
   29b3c:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
   29b40:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
   29b42:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   29b46:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
   29b4a:	aa20      	add	r2, sp, #128	; 0x80
   29b4c:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
   29b50:	aa70      	add	r2, sp, #448	; 0x1c0
   29b52:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   29b56:	9301      	str	r3, [sp, #4]
   29b58:	f85a 0f04 	ldr.w	r0, [sl, #4]!
   29b5c:	f7ee ff70 	bl	18a40 <__aeabi_i2d>
   29b60:	460b      	mov	r3, r1
   29b62:	9903      	ldr	r1, [sp, #12]
   29b64:	4602      	mov	r2, r0
   29b66:	2900      	cmp	r1, #0
   29b68:	e9c8 2300 	strd	r2, r3, [r8]
   29b6c:	4647      	mov	r7, r8
   29b6e:	f108 0808 	add.w	r8, r8, #8
   29b72:	db1e      	blt.n	29bb2 <__kernel_rem_pio2+0x2f2>
   29b74:	9e04      	ldr	r6, [sp, #16]
   29b76:	2400      	movs	r4, #0
   29b78:	2500      	movs	r5, #0
   29b7a:	e001      	b.n	29b80 <__kernel_rem_pio2+0x2c0>
   29b7c:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
   29b80:	e8f6 0102 	ldrd	r0, r1, [r6], #8
   29b84:	f7ee ffc6 	bl	18b14 <__aeabi_dmul>
   29b88:	4602      	mov	r2, r0
   29b8a:	460b      	mov	r3, r1
   29b8c:	4620      	mov	r0, r4
   29b8e:	4629      	mov	r1, r5
   29b90:	f7ee fe0a 	bl	187a8 <__adddf3>
   29b94:	455e      	cmp	r6, fp
   29b96:	4604      	mov	r4, r0
   29b98:	460d      	mov	r5, r1
   29b9a:	d1ef      	bne.n	29b7c <__kernel_rem_pio2+0x2bc>
   29b9c:	9b01      	ldr	r3, [sp, #4]
   29b9e:	e8e3 4502 	strd	r4, r5, [r3], #8
   29ba2:	9301      	str	r3, [sp, #4]
   29ba4:	9b02      	ldr	r3, [sp, #8]
   29ba6:	f109 0901 	add.w	r9, r9, #1
   29baa:	4599      	cmp	r9, r3
   29bac:	ddd4      	ble.n	29b58 <__kernel_rem_pio2+0x298>
   29bae:	9301      	str	r3, [sp, #4]
   29bb0:	e70c      	b.n	299cc <__kernel_rem_pio2+0x10c>
   29bb2:	2400      	movs	r4, #0
   29bb4:	2500      	movs	r5, #0
   29bb6:	e7f1      	b.n	29b9c <__kernel_rem_pio2+0x2dc>
   29bb8:	00041d80 	.word	0x00041d80
   29bbc:	2aaaaaab 	.word	0x2aaaaaab
   29bc0:	3e700000 	.word	0x3e700000
   29bc4:	41700000 	.word	0x41700000
   29bc8:	40200000 	.word	0x40200000
   29bcc:	d16b      	bne.n	29ca6 <__kernel_rem_pio2+0x3e6>
   29bce:	9b01      	ldr	r3, [sp, #4]
   29bd0:	aa0c      	add	r2, sp, #48	; 0x30
   29bd2:	3b01      	subs	r3, #1
   29bd4:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   29bd8:	15ed      	asrs	r5, r5, #23
   29bda:	2d00      	cmp	r5, #0
   29bdc:	f77f af73 	ble.w	29ac6 <__kernel_rem_pio2+0x206>
   29be0:	9b01      	ldr	r3, [sp, #4]
   29be2:	2b00      	cmp	r3, #0
   29be4:	f108 0801 	add.w	r8, r8, #1
   29be8:	f340 81cd 	ble.w	29f86 <__kernel_rem_pio2+0x6c6>
   29bec:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   29bee:	2c00      	cmp	r4, #0
   29bf0:	d151      	bne.n	29c96 <__kernel_rem_pio2+0x3d6>
   29bf2:	9b01      	ldr	r3, [sp, #4]
   29bf4:	2b01      	cmp	r3, #1
   29bf6:	d020      	beq.n	29c3a <__kernel_rem_pio2+0x37a>
   29bf8:	ab0c      	add	r3, sp, #48	; 0x30
   29bfa:	2201      	movs	r2, #1
   29bfc:	f853 4f04 	ldr.w	r4, [r3, #4]!
   29c00:	2c00      	cmp	r4, #0
   29c02:	d04b      	beq.n	29c9c <__kernel_rem_pio2+0x3dc>
   29c04:	1c53      	adds	r3, r2, #1
   29c06:	a90c      	add	r1, sp, #48	; 0x30
   29c08:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
   29c0c:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
   29c10:	9901      	ldr	r1, [sp, #4]
   29c12:	4299      	cmp	r1, r3
   29c14:	dd10      	ble.n	29c38 <__kernel_rem_pio2+0x378>
   29c16:	aa0c      	add	r2, sp, #48	; 0x30
   29c18:	a80c      	add	r0, sp, #48	; 0x30
   29c1a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   29c1e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   29c22:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   29c26:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
   29c2a:	e000      	b.n	29c2e <__kernel_rem_pio2+0x36e>
   29c2c:	681a      	ldr	r2, [r3, #0]
   29c2e:	1a8a      	subs	r2, r1, r2
   29c30:	f843 2b04 	str.w	r2, [r3], #4
   29c34:	4283      	cmp	r3, r0
   29c36:	d1f9      	bne.n	29c2c <__kernel_rem_pio2+0x36c>
   29c38:	2401      	movs	r4, #1
   29c3a:	9b06      	ldr	r3, [sp, #24]
   29c3c:	2b00      	cmp	r3, #0
   29c3e:	dd0e      	ble.n	29c5e <__kernel_rem_pio2+0x39e>
   29c40:	2b01      	cmp	r3, #1
   29c42:	f000 816c 	beq.w	29f1e <__kernel_rem_pio2+0x65e>
   29c46:	2b02      	cmp	r3, #2
   29c48:	d109      	bne.n	29c5e <__kernel_rem_pio2+0x39e>
   29c4a:	9b01      	ldr	r3, [sp, #4]
   29c4c:	1e5a      	subs	r2, r3, #1
   29c4e:	ab0c      	add	r3, sp, #48	; 0x30
   29c50:	a90c      	add	r1, sp, #48	; 0x30
   29c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   29c56:	f3c3 0315 	ubfx	r3, r3, #0, #22
   29c5a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   29c5e:	2d02      	cmp	r5, #2
   29c60:	f47f af31 	bne.w	29ac6 <__kernel_rem_pio2+0x206>
   29c64:	4632      	mov	r2, r6
   29c66:	463b      	mov	r3, r7
   29c68:	49b7      	ldr	r1, [pc, #732]	; (29f48 <__kernel_rem_pio2+0x688>)
   29c6a:	2000      	movs	r0, #0
   29c6c:	f7ee fd9a 	bl	187a4 <__aeabi_dsub>
   29c70:	4606      	mov	r6, r0
   29c72:	460f      	mov	r7, r1
   29c74:	2c00      	cmp	r4, #0
   29c76:	f43f af26 	beq.w	29ac6 <__kernel_rem_pio2+0x206>
   29c7a:	9806      	ldr	r0, [sp, #24]
   29c7c:	ed9f 0bae 	vldr	d0, [pc, #696]	; 29f38 <__kernel_rem_pio2+0x678>
   29c80:	f000 ff3a 	bl	2aaf8 <scalbn>
   29c84:	4630      	mov	r0, r6
   29c86:	4639      	mov	r1, r7
   29c88:	ec53 2b10 	vmov	r2, r3, d0
   29c8c:	f7ee fd8a 	bl	187a4 <__aeabi_dsub>
   29c90:	4606      	mov	r6, r0
   29c92:	460f      	mov	r7, r1
   29c94:	e717      	b.n	29ac6 <__kernel_rem_pio2+0x206>
   29c96:	2301      	movs	r3, #1
   29c98:	2200      	movs	r2, #0
   29c9a:	e7b4      	b.n	29c06 <__kernel_rem_pio2+0x346>
   29c9c:	9901      	ldr	r1, [sp, #4]
   29c9e:	3201      	adds	r2, #1
   29ca0:	428a      	cmp	r2, r1
   29ca2:	d1ab      	bne.n	29bfc <__kernel_rem_pio2+0x33c>
   29ca4:	e7c9      	b.n	29c3a <__kernel_rem_pio2+0x37a>
   29ca6:	4ba9      	ldr	r3, [pc, #676]	; (29f4c <__kernel_rem_pio2+0x68c>)
   29ca8:	2200      	movs	r2, #0
   29caa:	f7ef f9b9 	bl	19020 <__aeabi_dcmpge>
   29cae:	2800      	cmp	r0, #0
   29cb0:	f040 8152 	bne.w	29f58 <__kernel_rem_pio2+0x698>
   29cb4:	4605      	mov	r5, r0
   29cb6:	e706      	b.n	29ac6 <__kernel_rem_pio2+0x206>
   29cb8:	9b01      	ldr	r3, [sp, #4]
   29cba:	3301      	adds	r3, #1
   29cbc:	4699      	mov	r9, r3
   29cbe:	9302      	str	r3, [sp, #8]
   29cc0:	e735      	b.n	29b2e <__kernel_rem_pio2+0x26e>
   29cc2:	2400      	movs	r4, #0
   29cc4:	2500      	movs	r5, #0
   29cc6:	e669      	b.n	2999c <__kernel_rem_pio2+0xdc>
   29cc8:	9b06      	ldr	r3, [sp, #24]
   29cca:	9503      	str	r5, [sp, #12]
   29ccc:	f1a3 0218 	sub.w	r2, r3, #24
   29cd0:	ab0c      	add	r3, sp, #48	; 0x30
   29cd2:	f8cd 801c 	str.w	r8, [sp, #28]
   29cd6:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
   29cda:	9206      	str	r2, [sp, #24]
   29cdc:	b973      	cbnz	r3, 29cfc <__kernel_rem_pio2+0x43c>
   29cde:	9b01      	ldr	r3, [sp, #4]
   29ce0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   29ce4:	3b02      	subs	r3, #2
   29ce6:	a90c      	add	r1, sp, #48	; 0x30
   29ce8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   29cec:	f853 1904 	ldr.w	r1, [r3], #-4
   29cf0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   29cf4:	3a18      	subs	r2, #24
   29cf6:	2900      	cmp	r1, #0
   29cf8:	d0f8      	beq.n	29cec <__kernel_rem_pio2+0x42c>
   29cfa:	9206      	str	r2, [sp, #24]
   29cfc:	ed9f 0b8e 	vldr	d0, [pc, #568]	; 29f38 <__kernel_rem_pio2+0x678>
   29d00:	9806      	ldr	r0, [sp, #24]
   29d02:	f000 fef9 	bl	2aaf8 <scalbn>
   29d06:	f1ba 0f00 	cmp.w	sl, #0
   29d0a:	ec55 4b10 	vmov	r4, r5, d0
   29d0e:	f2c0 81d9 	blt.w	2a0c4 <__kernel_rem_pio2+0x804>
   29d12:	ab70      	add	r3, sp, #448	; 0x1c0
   29d14:	eb03 0bca 	add.w	fp, r3, sl, lsl #3
   29d18:	aa0c      	add	r2, sp, #48	; 0x30
   29d1a:	f10a 0301 	add.w	r3, sl, #1
   29d1e:	9306      	str	r3, [sp, #24]
   29d20:	eb02 0683 	add.w	r6, r2, r3, lsl #2
   29d24:	f8df 9228 	ldr.w	r9, [pc, #552]	; 29f50 <__kernel_rem_pio2+0x690>
   29d28:	ea4f 03ca 	mov.w	r3, sl, lsl #3
   29d2c:	9304      	str	r3, [sp, #16]
   29d2e:	f10b 0708 	add.w	r7, fp, #8
   29d32:	f04f 0800 	mov.w	r8, #0
   29d36:	f856 0d04 	ldr.w	r0, [r6, #-4]!
   29d3a:	f7ee fe81 	bl	18a40 <__aeabi_i2d>
   29d3e:	4622      	mov	r2, r4
   29d40:	462b      	mov	r3, r5
   29d42:	f7ee fee7 	bl	18b14 <__aeabi_dmul>
   29d46:	464b      	mov	r3, r9
   29d48:	e967 0102 	strd	r0, r1, [r7, #-8]!
   29d4c:	4642      	mov	r2, r8
   29d4e:	4620      	mov	r0, r4
   29d50:	4629      	mov	r1, r5
   29d52:	f7ee fedf 	bl	18b14 <__aeabi_dmul>
   29d56:	ab0c      	add	r3, sp, #48	; 0x30
   29d58:	429e      	cmp	r6, r3
   29d5a:	4604      	mov	r4, r0
   29d5c:	460d      	mov	r5, r1
   29d5e:	d1ea      	bne.n	29d36 <__kernel_rem_pio2+0x476>
   29d60:	ab48      	add	r3, sp, #288	; 0x120
   29d62:	e9cd 3a01 	strd	r3, sl, [sp, #4]
   29d66:	f8dd a014 	ldr.w	sl, [sp, #20]
   29d6a:	f1ba 0f00 	cmp.w	sl, #0
   29d6e:	f04f 0900 	mov.w	r9, #0
   29d72:	db2c      	blt.n	29dce <__kernel_rem_pio2+0x50e>
   29d74:	a372      	add	r3, pc, #456	; (adr r3, 29f40 <__kernel_rem_pio2+0x680>)
   29d76:	e9d3 2300 	ldrd	r2, r3, [r3]
   29d7a:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 29f54 <__kernel_rem_pio2+0x694>
   29d7e:	465f      	mov	r7, fp
   29d80:	2600      	movs	r6, #0
   29d82:	2400      	movs	r4, #0
   29d84:	2500      	movs	r5, #0
   29d86:	e003      	b.n	29d90 <__kernel_rem_pio2+0x4d0>
   29d88:	45b1      	cmp	r9, r6
   29d8a:	db10      	blt.n	29dae <__kernel_rem_pio2+0x4ee>
   29d8c:	e8f8 2302 	ldrd	r2, r3, [r8], #8
   29d90:	e8f7 0102 	ldrd	r0, r1, [r7], #8
   29d94:	f7ee febe 	bl	18b14 <__aeabi_dmul>
   29d98:	4602      	mov	r2, r0
   29d9a:	460b      	mov	r3, r1
   29d9c:	4620      	mov	r0, r4
   29d9e:	4629      	mov	r1, r5
   29da0:	f7ee fd02 	bl	187a8 <__adddf3>
   29da4:	3601      	adds	r6, #1
   29da6:	45b2      	cmp	sl, r6
   29da8:	4604      	mov	r4, r0
   29daa:	460d      	mov	r5, r1
   29dac:	daec      	bge.n	29d88 <__kernel_rem_pio2+0x4c8>
   29dae:	9b01      	ldr	r3, [sp, #4]
   29db0:	9a02      	ldr	r2, [sp, #8]
   29db2:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   29db6:	454a      	cmp	r2, r9
   29db8:	e9c3 4500 	strd	r4, r5, [r3]
   29dbc:	f1ab 0b08 	sub.w	fp, fp, #8
   29dc0:	f109 0301 	add.w	r3, r9, #1
   29dc4:	d006      	beq.n	29dd4 <__kernel_rem_pio2+0x514>
   29dc6:	f1ba 0f00 	cmp.w	sl, #0
   29dca:	4699      	mov	r9, r3
   29dcc:	dad2      	bge.n	29d74 <__kernel_rem_pio2+0x4b4>
   29dce:	2400      	movs	r4, #0
   29dd0:	2500      	movs	r5, #0
   29dd2:	e7ec      	b.n	29dae <__kernel_rem_pio2+0x4ee>
   29dd4:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   29dd6:	f8dd a008 	ldr.w	sl, [sp, #8]
   29dda:	2b02      	cmp	r3, #2
   29ddc:	dc1e      	bgt.n	29e1c <__kernel_rem_pio2+0x55c>
   29dde:	2b00      	cmp	r3, #0
   29de0:	f300 8109 	bgt.w	29ff6 <__kernel_rem_pio2+0x736>
   29de4:	d113      	bne.n	29e0e <__kernel_rem_pio2+0x54e>
   29de6:	9c04      	ldr	r4, [sp, #16]
   29de8:	9d01      	ldr	r5, [sp, #4]
   29dea:	3408      	adds	r4, #8
   29dec:	442c      	add	r4, r5
   29dee:	2000      	movs	r0, #0
   29df0:	2100      	movs	r1, #0
   29df2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   29df6:	f7ee fcd7 	bl	187a8 <__adddf3>
   29dfa:	42a5      	cmp	r5, r4
   29dfc:	d1f9      	bne.n	29df2 <__kernel_rem_pio2+0x532>
   29dfe:	9b03      	ldr	r3, [sp, #12]
   29e00:	b113      	cbz	r3, 29e08 <__kernel_rem_pio2+0x548>
   29e02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   29e06:	4619      	mov	r1, r3
   29e08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   29e0a:	e9c3 0100 	strd	r0, r1, [r3]
   29e0e:	9b07      	ldr	r3, [sp, #28]
   29e10:	f003 0007 	and.w	r0, r3, #7
   29e14:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   29e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29e1c:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   29e1e:	2b03      	cmp	r3, #3
   29e20:	d1f5      	bne.n	29e0e <__kernel_rem_pio2+0x54e>
   29e22:	f1ba 0f00 	cmp.w	sl, #0
   29e26:	f000 8169 	beq.w	2a0fc <__kernel_rem_pio2+0x83c>
   29e2a:	9a01      	ldr	r2, [sp, #4]
   29e2c:	9b04      	ldr	r3, [sp, #16]
   29e2e:	18d3      	adds	r3, r2, r3
   29e30:	e9d3 4500 	ldrd	r4, r5, [r3]
   29e34:	eb02 0bca 	add.w	fp, r2, sl, lsl #3
   29e38:	e97b 6702 	ldrd	r6, r7, [fp, #-8]!
   29e3c:	4620      	mov	r0, r4
   29e3e:	4629      	mov	r1, r5
   29e40:	4632      	mov	r2, r6
   29e42:	463b      	mov	r3, r7
   29e44:	f7ee fcb0 	bl	187a8 <__adddf3>
   29e48:	46a0      	mov	r8, r4
   29e4a:	46a9      	mov	r9, r5
   29e4c:	4604      	mov	r4, r0
   29e4e:	460d      	mov	r5, r1
   29e50:	4622      	mov	r2, r4
   29e52:	462b      	mov	r3, r5
   29e54:	4630      	mov	r0, r6
   29e56:	4639      	mov	r1, r7
   29e58:	f7ee fca4 	bl	187a4 <__aeabi_dsub>
   29e5c:	464b      	mov	r3, r9
   29e5e:	4642      	mov	r2, r8
   29e60:	f7ee fca2 	bl	187a8 <__adddf3>
   29e64:	9b01      	ldr	r3, [sp, #4]
   29e66:	455b      	cmp	r3, fp
   29e68:	e9cb 0102 	strd	r0, r1, [fp, #8]
   29e6c:	e9cb 4500 	strd	r4, r5, [fp]
   29e70:	d1e2      	bne.n	29e38 <__kernel_rem_pio2+0x578>
   29e72:	f1ba 0f01 	cmp.w	sl, #1
   29e76:	f340 8141 	ble.w	2a0fc <__kernel_rem_pio2+0x83c>
   29e7a:	9a01      	ldr	r2, [sp, #4]
   29e7c:	9b04      	ldr	r3, [sp, #16]
   29e7e:	f10a 5a00 	add.w	sl, sl, #536870912	; 0x20000000
   29e82:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   29e86:	4413      	add	r3, r2
   29e88:	ea4f 01ca 	mov.w	r1, sl, lsl #3
   29e8c:	e9d3 4500 	ldrd	r4, r5, [r3]
   29e90:	f101 0a08 	add.w	sl, r1, #8
   29e94:	9102      	str	r1, [sp, #8]
   29e96:	4492      	add	sl, r2
   29e98:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
   29e9c:	e97a 6702 	ldrd	r6, r7, [sl, #-8]!
   29ea0:	4620      	mov	r0, r4
   29ea2:	4629      	mov	r1, r5
   29ea4:	4632      	mov	r2, r6
   29ea6:	463b      	mov	r3, r7
   29ea8:	f7ee fc7e 	bl	187a8 <__adddf3>
   29eac:	46a0      	mov	r8, r4
   29eae:	46a9      	mov	r9, r5
   29eb0:	4604      	mov	r4, r0
   29eb2:	460d      	mov	r5, r1
   29eb4:	4622      	mov	r2, r4
   29eb6:	462b      	mov	r3, r5
   29eb8:	4630      	mov	r0, r6
   29eba:	4639      	mov	r1, r7
   29ebc:	f7ee fc72 	bl	187a4 <__aeabi_dsub>
   29ec0:	4642      	mov	r2, r8
   29ec2:	464b      	mov	r3, r9
   29ec4:	f7ee fc70 	bl	187a8 <__adddf3>
   29ec8:	45d3      	cmp	fp, sl
   29eca:	e9ca 0102 	strd	r0, r1, [sl, #8]
   29ece:	e9ca 4500 	strd	r4, r5, [sl]
   29ed2:	d1e3      	bne.n	29e9c <__kernel_rem_pio2+0x5dc>
   29ed4:	9c02      	ldr	r4, [sp, #8]
   29ed6:	9b01      	ldr	r3, [sp, #4]
   29ed8:	3410      	adds	r4, #16
   29eda:	441c      	add	r4, r3
   29edc:	f103 0510 	add.w	r5, r3, #16
   29ee0:	2000      	movs	r0, #0
   29ee2:	2100      	movs	r1, #0
   29ee4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   29ee8:	f7ee fc5e 	bl	187a8 <__adddf3>
   29eec:	42a5      	cmp	r5, r4
   29eee:	d1f9      	bne.n	29ee4 <__kernel_rem_pio2+0x624>
   29ef0:	9b03      	ldr	r3, [sp, #12]
   29ef2:	2b00      	cmp	r3, #0
   29ef4:	f040 80bd 	bne.w	2a072 <__kernel_rem_pio2+0x7b2>
   29ef8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   29efa:	e9c4 0104 	strd	r0, r1, [r4, #16]
   29efe:	9801      	ldr	r0, [sp, #4]
   29f00:	e9d0 2300 	ldrd	r2, r3, [r0]
   29f04:	e9c4 2300 	strd	r2, r3, [r4]
   29f08:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   29f0c:	e9c4 2302 	strd	r2, r3, [r4, #8]
   29f10:	9b07      	ldr	r3, [sp, #28]
   29f12:	f003 0007 	and.w	r0, r3, #7
   29f16:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   29f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29f1e:	9b01      	ldr	r3, [sp, #4]
   29f20:	1e5a      	subs	r2, r3, #1
   29f22:	ab0c      	add	r3, sp, #48	; 0x30
   29f24:	a90c      	add	r1, sp, #48	; 0x30
   29f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   29f2a:	f3c3 0316 	ubfx	r3, r3, #0, #23
   29f2e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   29f32:	e694      	b.n	29c5e <__kernel_rem_pio2+0x39e>
   29f34:	f3af 8000 	nop.w
   29f38:	00000000 	.word	0x00000000
   29f3c:	3ff00000 	.word	0x3ff00000
   29f40:	40000000 	.word	0x40000000
   29f44:	3ff921fb 	.word	0x3ff921fb
   29f48:	3ff00000 	.word	0x3ff00000
   29f4c:	3fe00000 	.word	0x3fe00000
   29f50:	3e700000 	.word	0x3e700000
   29f54:	00041d48 	.word	0x00041d48
   29f58:	9b01      	ldr	r3, [sp, #4]
   29f5a:	2b00      	cmp	r3, #0
   29f5c:	f108 0801 	add.w	r8, r8, #1
   29f60:	bfc8      	it	gt
   29f62:	2502      	movgt	r5, #2
   29f64:	f73f ae42 	bgt.w	29bec <__kernel_rem_pio2+0x32c>
   29f68:	4632      	mov	r2, r6
   29f6a:	463b      	mov	r3, r7
   29f6c:	4965      	ldr	r1, [pc, #404]	; (2a104 <__kernel_rem_pio2+0x844>)
   29f6e:	2000      	movs	r0, #0
   29f70:	f7ee fc18 	bl	187a4 <__aeabi_dsub>
   29f74:	2502      	movs	r5, #2
   29f76:	4606      	mov	r6, r0
   29f78:	460f      	mov	r7, r1
   29f7a:	e5a4      	b.n	29ac6 <__kernel_rem_pio2+0x206>
   29f7c:	2100      	movs	r1, #0
   29f7e:	f06f 0317 	mvn.w	r3, #23
   29f82:	9107      	str	r1, [sp, #28]
   29f84:	e4bb      	b.n	298fe <__kernel_rem_pio2+0x3e>
   29f86:	2400      	movs	r4, #0
   29f88:	e657      	b.n	29c3a <__kernel_rem_pio2+0x37a>
   29f8a:	ec47 6b10 	vmov	d0, r6, r7
   29f8e:	9e06      	ldr	r6, [sp, #24]
   29f90:	9503      	str	r5, [sp, #12]
   29f92:	4270      	negs	r0, r6
   29f94:	f8cd 801c 	str.w	r8, [sp, #28]
   29f98:	f000 fdae 	bl	2aaf8 <scalbn>
   29f9c:	ec55 4b10 	vmov	r4, r5, d0
   29fa0:	4b59      	ldr	r3, [pc, #356]	; (2a108 <__kernel_rem_pio2+0x848>)
   29fa2:	ee10 0a10 	vmov	r0, s0
   29fa6:	2200      	movs	r2, #0
   29fa8:	4629      	mov	r1, r5
   29faa:	f7ef f839 	bl	19020 <__aeabi_dcmpge>
   29fae:	2800      	cmp	r0, #0
   29fb0:	d055      	beq.n	2a05e <__kernel_rem_pio2+0x79e>
   29fb2:	4b56      	ldr	r3, [pc, #344]	; (2a10c <__kernel_rem_pio2+0x84c>)
   29fb4:	9f01      	ldr	r7, [sp, #4]
   29fb6:	2200      	movs	r2, #0
   29fb8:	3618      	adds	r6, #24
   29fba:	4620      	mov	r0, r4
   29fbc:	4629      	mov	r1, r5
   29fbe:	9606      	str	r6, [sp, #24]
   29fc0:	f7ee fda8 	bl	18b14 <__aeabi_dmul>
   29fc4:	f7ef f856 	bl	19074 <__aeabi_d2iz>
   29fc8:	4606      	mov	r6, r0
   29fca:	f7ee fd39 	bl	18a40 <__aeabi_i2d>
   29fce:	4b4e      	ldr	r3, [pc, #312]	; (2a108 <__kernel_rem_pio2+0x848>)
   29fd0:	2200      	movs	r2, #0
   29fd2:	f7ee fd9f 	bl	18b14 <__aeabi_dmul>
   29fd6:	460b      	mov	r3, r1
   29fd8:	4602      	mov	r2, r0
   29fda:	4629      	mov	r1, r5
   29fdc:	4620      	mov	r0, r4
   29fde:	f7ee fbe1 	bl	187a4 <__aeabi_dsub>
   29fe2:	f7ef f847 	bl	19074 <__aeabi_d2iz>
   29fe6:	f107 0a01 	add.w	sl, r7, #1
   29fea:	ab0c      	add	r3, sp, #48	; 0x30
   29fec:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
   29ff0:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
   29ff4:	e682      	b.n	29cfc <__kernel_rem_pio2+0x43c>
   29ff6:	9d01      	ldr	r5, [sp, #4]
   29ff8:	9b06      	ldr	r3, [sp, #24]
   29ffa:	2000      	movs	r0, #0
   29ffc:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
   2a000:	2100      	movs	r1, #0
   2a002:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   2a006:	f7ee fbcf 	bl	187a8 <__adddf3>
   2a00a:	42a5      	cmp	r5, r4
   2a00c:	d1f9      	bne.n	2a002 <__kernel_rem_pio2+0x742>
   2a00e:	9b03      	ldr	r3, [sp, #12]
   2a010:	2b00      	cmp	r3, #0
   2a012:	d147      	bne.n	2a0a4 <__kernel_rem_pio2+0x7e4>
   2a014:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2a016:	e9c3 0100 	strd	r0, r1, [r3]
   2a01a:	460b      	mov	r3, r1
   2a01c:	9901      	ldr	r1, [sp, #4]
   2a01e:	4602      	mov	r2, r0
   2a020:	e9d1 0100 	ldrd	r0, r1, [r1]
   2a024:	f7ee fbbe 	bl	187a4 <__aeabi_dsub>
   2a028:	f1ba 0f00 	cmp.w	sl, #0
   2a02c:	dd0d      	ble.n	2a04a <__kernel_rem_pio2+0x78a>
   2a02e:	ad4a      	add	r5, sp, #296	; 0x128
   2a030:	2401      	movs	r4, #1
   2a032:	e8f5 2302 	ldrd	r2, r3, [r5], #8
   2a036:	3401      	adds	r4, #1
   2a038:	f7ee fbb6 	bl	187a8 <__adddf3>
   2a03c:	45a2      	cmp	sl, r4
   2a03e:	daf8      	bge.n	2a032 <__kernel_rem_pio2+0x772>
   2a040:	9b03      	ldr	r3, [sp, #12]
   2a042:	b113      	cbz	r3, 2a04a <__kernel_rem_pio2+0x78a>
   2a044:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   2a048:	4619      	mov	r1, r3
   2a04a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2a04c:	e9c3 0102 	strd	r0, r1, [r3, #8]
   2a050:	9b07      	ldr	r3, [sp, #28]
   2a052:	f003 0007 	and.w	r0, r3, #7
   2a056:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   2a05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a05e:	4620      	mov	r0, r4
   2a060:	4629      	mov	r1, r5
   2a062:	f7ef f807 	bl	19074 <__aeabi_d2iz>
   2a066:	9b01      	ldr	r3, [sp, #4]
   2a068:	aa0c      	add	r2, sp, #48	; 0x30
   2a06a:	469a      	mov	sl, r3
   2a06c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   2a070:	e644      	b.n	29cfc <__kernel_rem_pio2+0x43c>
   2a072:	9e01      	ldr	r6, [sp, #4]
   2a074:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   2a078:	6874      	ldr	r4, [r6, #4]
   2a07a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2a07c:	6832      	ldr	r2, [r6, #0]
   2a07e:	68f5      	ldr	r5, [r6, #12]
   2a080:	e9c1 0304 	strd	r0, r3, [r1, #16]
   2a084:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   2a088:	e9c1 2300 	strd	r2, r3, [r1]
   2a08c:	68b2      	ldr	r2, [r6, #8]
   2a08e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
   2a092:	e9c1 2302 	strd	r2, r3, [r1, #8]
   2a096:	9b07      	ldr	r3, [sp, #28]
   2a098:	f003 0007 	and.w	r0, r3, #7
   2a09c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   2a0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a0a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2a0a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   2a0aa:	6053      	str	r3, [r2, #4]
   2a0ac:	460b      	mov	r3, r1
   2a0ae:	9901      	ldr	r1, [sp, #4]
   2a0b0:	6010      	str	r0, [r2, #0]
   2a0b2:	4602      	mov	r2, r0
   2a0b4:	e9d1 0100 	ldrd	r0, r1, [r1]
   2a0b8:	f7ee fb74 	bl	187a4 <__aeabi_dsub>
   2a0bc:	f1ba 0f00 	cmp.w	sl, #0
   2a0c0:	dcb5      	bgt.n	2a02e <__kernel_rem_pio2+0x76e>
   2a0c2:	e7bf      	b.n	2a044 <__kernel_rem_pio2+0x784>
   2a0c4:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   2a0c6:	2b02      	cmp	r3, #2
   2a0c8:	dc0a      	bgt.n	2a0e0 <__kernel_rem_pio2+0x820>
   2a0ca:	2b00      	cmp	r3, #0
   2a0cc:	dc11      	bgt.n	2a0f2 <__kernel_rem_pio2+0x832>
   2a0ce:	f47f ae9e 	bne.w	29e0e <__kernel_rem_pio2+0x54e>
   2a0d2:	2000      	movs	r0, #0
   2a0d4:	2100      	movs	r1, #0
   2a0d6:	e692      	b.n	29dfe <__kernel_rem_pio2+0x53e>
   2a0d8:	9b08      	ldr	r3, [sp, #32]
   2a0da:	00db      	lsls	r3, r3, #3
   2a0dc:	9302      	str	r3, [sp, #8]
   2a0de:	e466      	b.n	299ae <__kernel_rem_pio2+0xee>
   2a0e0:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   2a0e2:	2b03      	cmp	r3, #3
   2a0e4:	f47f ae93 	bne.w	29e0e <__kernel_rem_pio2+0x54e>
   2a0e8:	ab48      	add	r3, sp, #288	; 0x120
   2a0ea:	2000      	movs	r0, #0
   2a0ec:	2100      	movs	r1, #0
   2a0ee:	9301      	str	r3, [sp, #4]
   2a0f0:	e6fe      	b.n	29ef0 <__kernel_rem_pio2+0x630>
   2a0f2:	ab48      	add	r3, sp, #288	; 0x120
   2a0f4:	2000      	movs	r0, #0
   2a0f6:	2100      	movs	r1, #0
   2a0f8:	9301      	str	r3, [sp, #4]
   2a0fa:	e788      	b.n	2a00e <__kernel_rem_pio2+0x74e>
   2a0fc:	2000      	movs	r0, #0
   2a0fe:	2100      	movs	r1, #0
   2a100:	e6f6      	b.n	29ef0 <__kernel_rem_pio2+0x630>
   2a102:	bf00      	nop
   2a104:	3ff00000 	.word	0x3ff00000
   2a108:	41700000 	.word	0x41700000
   2a10c:	3e700000 	.word	0x3e700000

0002a110 <__kernel_sin>:
   2a110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a114:	ec55 4b10 	vmov	r4, r5, d0
   2a118:	b085      	sub	sp, #20
   2a11a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
   2a11e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
   2a122:	ed8d 1b00 	vstr	d1, [sp]
   2a126:	9003      	str	r0, [sp, #12]
   2a128:	da07      	bge.n	2a13a <__kernel_sin+0x2a>
   2a12a:	ee10 0a10 	vmov	r0, s0
   2a12e:	4629      	mov	r1, r5
   2a130:	f7ee ffa0 	bl	19074 <__aeabi_d2iz>
   2a134:	2800      	cmp	r0, #0
   2a136:	f000 8089 	beq.w	2a24c <__kernel_sin+0x13c>
   2a13a:	4622      	mov	r2, r4
   2a13c:	462b      	mov	r3, r5
   2a13e:	4620      	mov	r0, r4
   2a140:	4629      	mov	r1, r5
   2a142:	f7ee fce7 	bl	18b14 <__aeabi_dmul>
   2a146:	4606      	mov	r6, r0
   2a148:	460f      	mov	r7, r1
   2a14a:	4632      	mov	r2, r6
   2a14c:	463b      	mov	r3, r7
   2a14e:	4620      	mov	r0, r4
   2a150:	4629      	mov	r1, r5
   2a152:	f7ee fcdf 	bl	18b14 <__aeabi_dmul>
   2a156:	a343      	add	r3, pc, #268	; (adr r3, 2a264 <__kernel_sin+0x154>)
   2a158:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a15c:	4682      	mov	sl, r0
   2a15e:	468b      	mov	fp, r1
   2a160:	4630      	mov	r0, r6
   2a162:	4639      	mov	r1, r7
   2a164:	f7ee fcd6 	bl	18b14 <__aeabi_dmul>
   2a168:	a340      	add	r3, pc, #256	; (adr r3, 2a26c <__kernel_sin+0x15c>)
   2a16a:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a16e:	f7ee fb19 	bl	187a4 <__aeabi_dsub>
   2a172:	4632      	mov	r2, r6
   2a174:	463b      	mov	r3, r7
   2a176:	f7ee fccd 	bl	18b14 <__aeabi_dmul>
   2a17a:	a33e      	add	r3, pc, #248	; (adr r3, 2a274 <__kernel_sin+0x164>)
   2a17c:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a180:	f7ee fb12 	bl	187a8 <__adddf3>
   2a184:	4632      	mov	r2, r6
   2a186:	463b      	mov	r3, r7
   2a188:	f7ee fcc4 	bl	18b14 <__aeabi_dmul>
   2a18c:	a33b      	add	r3, pc, #236	; (adr r3, 2a27c <__kernel_sin+0x16c>)
   2a18e:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a192:	f7ee fb07 	bl	187a4 <__aeabi_dsub>
   2a196:	4632      	mov	r2, r6
   2a198:	463b      	mov	r3, r7
   2a19a:	f7ee fcbb 	bl	18b14 <__aeabi_dmul>
   2a19e:	a339      	add	r3, pc, #228	; (adr r3, 2a284 <__kernel_sin+0x174>)
   2a1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a1a4:	f7ee fb00 	bl	187a8 <__adddf3>
   2a1a8:	9b03      	ldr	r3, [sp, #12]
   2a1aa:	4680      	mov	r8, r0
   2a1ac:	4689      	mov	r9, r1
   2a1ae:	b3ab      	cbz	r3, 2a21c <__kernel_sin+0x10c>
   2a1b0:	e9dd 0100 	ldrd	r0, r1, [sp]
   2a1b4:	4b2a      	ldr	r3, [pc, #168]	; (2a260 <__kernel_sin+0x150>)
   2a1b6:	2200      	movs	r2, #0
   2a1b8:	f7ee fcac 	bl	18b14 <__aeabi_dmul>
   2a1bc:	4642      	mov	r2, r8
   2a1be:	464b      	mov	r3, r9
   2a1c0:	4680      	mov	r8, r0
   2a1c2:	4689      	mov	r9, r1
   2a1c4:	4650      	mov	r0, sl
   2a1c6:	4659      	mov	r1, fp
   2a1c8:	f7ee fca4 	bl	18b14 <__aeabi_dmul>
   2a1cc:	4602      	mov	r2, r0
   2a1ce:	460b      	mov	r3, r1
   2a1d0:	4640      	mov	r0, r8
   2a1d2:	4649      	mov	r1, r9
   2a1d4:	f7ee fae6 	bl	187a4 <__aeabi_dsub>
   2a1d8:	4632      	mov	r2, r6
   2a1da:	463b      	mov	r3, r7
   2a1dc:	f7ee fc9a 	bl	18b14 <__aeabi_dmul>
   2a1e0:	e9dd 2300 	ldrd	r2, r3, [sp]
   2a1e4:	f7ee fade 	bl	187a4 <__aeabi_dsub>
   2a1e8:	a31b      	add	r3, pc, #108	; (adr r3, 2a258 <__kernel_sin+0x148>)
   2a1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a1ee:	4606      	mov	r6, r0
   2a1f0:	460f      	mov	r7, r1
   2a1f2:	4650      	mov	r0, sl
   2a1f4:	4659      	mov	r1, fp
   2a1f6:	f7ee fc8d 	bl	18b14 <__aeabi_dmul>
   2a1fa:	4602      	mov	r2, r0
   2a1fc:	460b      	mov	r3, r1
   2a1fe:	4630      	mov	r0, r6
   2a200:	4639      	mov	r1, r7
   2a202:	f7ee fad1 	bl	187a8 <__adddf3>
   2a206:	4602      	mov	r2, r0
   2a208:	460b      	mov	r3, r1
   2a20a:	4620      	mov	r0, r4
   2a20c:	4629      	mov	r1, r5
   2a20e:	f7ee fac9 	bl	187a4 <__aeabi_dsub>
   2a212:	ec41 0b10 	vmov	d0, r0, r1
   2a216:	b005      	add	sp, #20
   2a218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a21c:	4602      	mov	r2, r0
   2a21e:	460b      	mov	r3, r1
   2a220:	4630      	mov	r0, r6
   2a222:	4639      	mov	r1, r7
   2a224:	f7ee fc76 	bl	18b14 <__aeabi_dmul>
   2a228:	a30b      	add	r3, pc, #44	; (adr r3, 2a258 <__kernel_sin+0x148>)
   2a22a:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a22e:	f7ee fab9 	bl	187a4 <__aeabi_dsub>
   2a232:	4652      	mov	r2, sl
   2a234:	465b      	mov	r3, fp
   2a236:	f7ee fc6d 	bl	18b14 <__aeabi_dmul>
   2a23a:	4622      	mov	r2, r4
   2a23c:	462b      	mov	r3, r5
   2a23e:	f7ee fab3 	bl	187a8 <__adddf3>
   2a242:	ec41 0b10 	vmov	d0, r0, r1
   2a246:	b005      	add	sp, #20
   2a248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a24c:	ec45 4b10 	vmov	d0, r4, r5
   2a250:	b005      	add	sp, #20
   2a252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a256:	bf00      	nop
   2a258:	55555549 	.word	0x55555549
   2a25c:	3fc55555 	.word	0x3fc55555
   2a260:	3fe00000 	.word	0x3fe00000
   2a264:	5acfd57c 	.word	0x5acfd57c
   2a268:	3de5d93a 	.word	0x3de5d93a
   2a26c:	8a2b9ceb 	.word	0x8a2b9ceb
   2a270:	3e5ae5e6 	.word	0x3e5ae5e6
   2a274:	57b1fe7d 	.word	0x57b1fe7d
   2a278:	3ec71de3 	.word	0x3ec71de3
   2a27c:	19c161d5 	.word	0x19c161d5
   2a280:	3f2a01a0 	.word	0x3f2a01a0
   2a284:	1110f8a6 	.word	0x1110f8a6
   2a288:	3f811111 	.word	0x3f811111

0002a28c <__kernel_cosf>:
   2a28c:	ee10 3a10 	vmov	r3, s0
   2a290:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   2a294:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   2a298:	da2c      	bge.n	2a2f4 <__kernel_cosf+0x68>
   2a29a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   2a29e:	ee17 3a90 	vmov	r3, s15
   2a2a2:	2b00      	cmp	r3, #0
   2a2a4:	d060      	beq.n	2a368 <__kernel_cosf+0xdc>
   2a2a6:	ee20 7a00 	vmul.f32	s14, s0, s0
   2a2aa:	eddf 7a31 	vldr	s15, [pc, #196]	; 2a370 <__kernel_cosf+0xe4>
   2a2ae:	ed9f 5a31 	vldr	s10, [pc, #196]	; 2a374 <__kernel_cosf+0xe8>
   2a2b2:	eddf 5a31 	vldr	s11, [pc, #196]	; 2a378 <__kernel_cosf+0xec>
   2a2b6:	ed9f 6a31 	vldr	s12, [pc, #196]	; 2a37c <__kernel_cosf+0xf0>
   2a2ba:	eddf 6a31 	vldr	s13, [pc, #196]	; 2a380 <__kernel_cosf+0xf4>
   2a2be:	eea7 5a27 	vfma.f32	s10, s14, s15
   2a2c2:	eddf 7a30 	vldr	s15, [pc, #192]	; 2a384 <__kernel_cosf+0xf8>
   2a2c6:	eee7 5a05 	vfma.f32	s11, s14, s10
   2a2ca:	eea7 6a25 	vfma.f32	s12, s14, s11
   2a2ce:	eee7 7a06 	vfma.f32	s15, s14, s12
   2a2d2:	eee7 6a27 	vfma.f32	s13, s14, s15
   2a2d6:	ee67 6a26 	vmul.f32	s13, s14, s13
   2a2da:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   2a2de:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   2a2e2:	eee7 0a26 	vfma.f32	s1, s14, s13
   2a2e6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   2a2ea:	eed7 0a27 	vfnms.f32	s1, s14, s15
   2a2ee:	ee30 0a60 	vsub.f32	s0, s0, s1
   2a2f2:	4770      	bx	lr
   2a2f4:	ee20 7a00 	vmul.f32	s14, s0, s0
   2a2f8:	eddf 7a1d 	vldr	s15, [pc, #116]	; 2a370 <__kernel_cosf+0xe4>
   2a2fc:	ed9f 5a1d 	vldr	s10, [pc, #116]	; 2a374 <__kernel_cosf+0xe8>
   2a300:	eddf 5a1d 	vldr	s11, [pc, #116]	; 2a378 <__kernel_cosf+0xec>
   2a304:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 2a37c <__kernel_cosf+0xf0>
   2a308:	eddf 6a1d 	vldr	s13, [pc, #116]	; 2a380 <__kernel_cosf+0xf4>
   2a30c:	4a1e      	ldr	r2, [pc, #120]	; (2a388 <__kernel_cosf+0xfc>)
   2a30e:	eea7 5a27 	vfma.f32	s10, s14, s15
   2a312:	4293      	cmp	r3, r2
   2a314:	eddf 7a1b 	vldr	s15, [pc, #108]	; 2a384 <__kernel_cosf+0xf8>
   2a318:	eee5 5a07 	vfma.f32	s11, s10, s14
   2a31c:	eea5 6a87 	vfma.f32	s12, s11, s14
   2a320:	eee6 7a07 	vfma.f32	s15, s12, s14
   2a324:	eee7 6a87 	vfma.f32	s13, s15, s14
   2a328:	ee66 6a87 	vmul.f32	s13, s13, s14
   2a32c:	ddd5      	ble.n	2a2da <__kernel_cosf+0x4e>
   2a32e:	4a17      	ldr	r2, [pc, #92]	; (2a38c <__kernel_cosf+0x100>)
   2a330:	4293      	cmp	r3, r2
   2a332:	dc14      	bgt.n	2a35e <__kernel_cosf+0xd2>
   2a334:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
   2a338:	ee07 3a90 	vmov	s15, r3
   2a33c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   2a340:	ee36 6a67 	vsub.f32	s12, s12, s15
   2a344:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   2a348:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
   2a34c:	eed7 7a25 	vfnms.f32	s15, s14, s11
   2a350:	eee7 0a26 	vfma.f32	s1, s14, s13
   2a354:	ee77 0ae0 	vsub.f32	s1, s15, s1
   2a358:	ee36 0a60 	vsub.f32	s0, s12, s1
   2a35c:	4770      	bx	lr
   2a35e:	eeb6 6a07 	vmov.f32	s12, #103	; 0x3f380000  0.7187500
   2a362:	eef5 7a02 	vmov.f32	s15, #82	; 0x3e900000  0.2812500
   2a366:	e7ed      	b.n	2a344 <__kernel_cosf+0xb8>
   2a368:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   2a36c:	4770      	bx	lr
   2a36e:	bf00      	nop
   2a370:	ad47d74e 	.word	0xad47d74e
   2a374:	310f74f6 	.word	0x310f74f6
   2a378:	b493f27c 	.word	0xb493f27c
   2a37c:	37d00d01 	.word	0x37d00d01
   2a380:	3d2aaaab 	.word	0x3d2aaaab
   2a384:	bab60b61 	.word	0xbab60b61
   2a388:	3e999999 	.word	0x3e999999
   2a38c:	3f480000 	.word	0x3f480000

0002a390 <__kernel_rem_pio2f>:
   2a390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a394:	ed2d 8b04 	vpush	{d8-d9}
   2a398:	b0db      	sub	sp, #364	; 0x16c
   2a39a:	461c      	mov	r4, r3
   2a39c:	9303      	str	r3, [sp, #12]
   2a39e:	9106      	str	r1, [sp, #24]
   2a3a0:	4ba2      	ldr	r3, [pc, #648]	; (2a62c <__kernel_rem_pio2f+0x29c>)
   2a3a2:	9968      	ldr	r1, [sp, #416]	; 0x1a0
   2a3a4:	9208      	str	r2, [sp, #32]
   2a3a6:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
   2a3aa:	1d11      	adds	r1, r2, #4
   2a3ac:	4682      	mov	sl, r0
   2a3ae:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   2a3b2:	f2c0 82a3 	blt.w	2a8fc <__kernel_rem_pio2f+0x56c>
   2a3b6:	1ed3      	subs	r3, r2, #3
   2a3b8:	bf48      	it	mi
   2a3ba:	1d13      	addmi	r3, r2, #4
   2a3bc:	10db      	asrs	r3, r3, #3
   2a3be:	9302      	str	r3, [sp, #8]
   2a3c0:	3301      	adds	r3, #1
   2a3c2:	00db      	lsls	r3, r3, #3
   2a3c4:	9307      	str	r3, [sp, #28]
   2a3c6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
   2a3ca:	1a9b      	subs	r3, r3, r2
   2a3cc:	9305      	str	r3, [sp, #20]
   2a3ce:	9b02      	ldr	r3, [sp, #8]
   2a3d0:	eb15 0108 	adds.w	r1, r5, r8
   2a3d4:	eba3 0308 	sub.w	r3, r3, r8
   2a3d8:	d416      	bmi.n	2a408 <__kernel_rem_pio2f+0x78>
   2a3da:	3101      	adds	r1, #1
   2a3dc:	ed9f 7a94 	vldr	s14, [pc, #592]	; 2a630 <__kernel_rem_pio2f+0x2a0>
   2a3e0:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   2a3e2:	4419      	add	r1, r3
   2a3e4:	aa1e      	add	r2, sp, #120	; 0x78
   2a3e6:	2b00      	cmp	r3, #0
   2a3e8:	bfa4      	itt	ge
   2a3ea:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
   2a3ee:	ee07 4a90 	vmovge	s15, r4
   2a3f2:	f103 0301 	add.w	r3, r3, #1
   2a3f6:	bfac      	ite	ge
   2a3f8:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
   2a3fc:	eef0 7a47 	vmovlt.f32	s15, s14
   2a400:	428b      	cmp	r3, r1
   2a402:	ece2 7a01 	vstmia	r2!, {s15}
   2a406:	d1ee      	bne.n	2a3e6 <__kernel_rem_pio2f+0x56>
   2a408:	2d00      	cmp	r5, #0
   2a40a:	f2c0 82e7 	blt.w	2a9dc <__kernel_rem_pio2f+0x64c>
   2a40e:	9b03      	ldr	r3, [sp, #12]
   2a410:	aa1e      	add	r2, sp, #120	; 0x78
   2a412:	eb02 0483 	add.w	r4, r2, r3, lsl #2
   2a416:	ae46      	add	r6, sp, #280	; 0x118
   2a418:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   2a41c:	4640      	mov	r0, r8
   2a41e:	18ef      	adds	r7, r5, r3
   2a420:	eb0a 0183 	add.w	r1, sl, r3, lsl #2
   2a424:	f1b8 0f00 	cmp.w	r8, #0
   2a428:	eddf 7a81 	vldr	s15, [pc, #516]	; 2a630 <__kernel_rem_pio2f+0x2a0>
   2a42c:	db09      	blt.n	2a442 <__kernel_rem_pio2f+0xb2>
   2a42e:	4622      	mov	r2, r4
   2a430:	4653      	mov	r3, sl
   2a432:	ecf3 6a01 	vldmia	r3!, {s13}
   2a436:	ed32 7a01 	vldmdb	r2!, {s14}
   2a43a:	428b      	cmp	r3, r1
   2a43c:	eee6 7a87 	vfma.f32	s15, s13, s14
   2a440:	d1f7      	bne.n	2a432 <__kernel_rem_pio2f+0xa2>
   2a442:	3001      	adds	r0, #1
   2a444:	42b8      	cmp	r0, r7
   2a446:	ece6 7a01 	vstmia	r6!, {s15}
   2a44a:	f104 0404 	add.w	r4, r4, #4
   2a44e:	d1e9      	bne.n	2a424 <__kernel_rem_pio2f+0x94>
   2a450:	ab09      	add	r3, sp, #36	; 0x24
   2a452:	af0a      	add	r7, sp, #40	; 0x28
   2a454:	eb03 0985 	add.w	r9, r3, r5, lsl #2
   2a458:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   2a45c:	3b08      	subs	r3, #8
   2a45e:	ed9f 9a76 	vldr	s18, [pc, #472]	; 2a638 <__kernel_rem_pio2f+0x2a8>
   2a462:	eddf 8a74 	vldr	s17, [pc, #464]	; 2a634 <__kernel_rem_pio2f+0x2a4>
   2a466:	9805      	ldr	r0, [sp, #20]
   2a468:	9304      	str	r3, [sp, #16]
   2a46a:	eb0a 040c 	add.w	r4, sl, ip
   2a46e:	ae46      	add	r6, sp, #280	; 0x118
   2a470:	9500      	str	r5, [sp, #0]
   2a472:	ab5a      	add	r3, sp, #360	; 0x168
   2a474:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   2a478:	2d00      	cmp	r5, #0
   2a47a:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
   2a47e:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   2a482:	dd16      	ble.n	2a4b2 <__kernel_rem_pio2f+0x122>
   2a484:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   2a488:	463a      	mov	r2, r7
   2a48a:	ee60 7a09 	vmul.f32	s15, s0, s18
   2a48e:	eeb0 7a40 	vmov.f32	s14, s0
   2a492:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   2a496:	ed73 6a01 	vldmdb	r3!, {s13}
   2a49a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   2a49e:	42b3      	cmp	r3, r6
   2a4a0:	eea7 7ae8 	vfms.f32	s14, s15, s17
   2a4a4:	ee37 0aa6 	vadd.f32	s0, s15, s13
   2a4a8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   2a4ac:	eca2 7a01 	vstmia	r2!, {s14}
   2a4b0:	d1eb      	bne.n	2a48a <__kernel_rem_pio2f+0xfa>
   2a4b2:	9001      	str	r0, [sp, #4]
   2a4b4:	f000 fbc8 	bl	2ac48 <scalbnf>
   2a4b8:	eeb0 8a40 	vmov.f32	s16, s0
   2a4bc:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
   2a4c0:	ee28 0a00 	vmul.f32	s0, s16, s0
   2a4c4:	f7fe fa3e 	bl	28944 <floorf>
   2a4c8:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   2a4cc:	eea0 8a67 	vfms.f32	s16, s0, s15
   2a4d0:	9801      	ldr	r0, [sp, #4]
   2a4d2:	2800      	cmp	r0, #0
   2a4d4:	eefd 9ac8 	vcvt.s32.f32	s19, s16
   2a4d8:	eef8 7ae9 	vcvt.f32.s32	s15, s19
   2a4dc:	ee38 8a67 	vsub.f32	s16, s16, s15
   2a4e0:	dd79      	ble.n	2a5d6 <__kernel_rem_pio2f+0x246>
   2a4e2:	f105 3eff 	add.w	lr, r5, #4294967295	; 0xffffffff
   2a4e6:	f1c0 0308 	rsb	r3, r0, #8
   2a4ea:	f857 102e 	ldr.w	r1, [r7, lr, lsl #2]
   2a4ee:	fa41 fc03 	asr.w	ip, r1, r3
   2a4f2:	fa0c f303 	lsl.w	r3, ip, r3
   2a4f6:	1acb      	subs	r3, r1, r3
   2a4f8:	f1c0 0207 	rsb	r2, r0, #7
   2a4fc:	ee19 1a90 	vmov	r1, s19
   2a500:	fa43 f202 	asr.w	r2, r3, r2
   2a504:	4461      	add	r1, ip
   2a506:	2a00      	cmp	r2, #0
   2a508:	f847 302e 	str.w	r3, [r7, lr, lsl #2]
   2a50c:	ee09 1a90 	vmov	s19, r1
   2a510:	dc69      	bgt.n	2a5e6 <__kernel_rem_pio2f+0x256>
   2a512:	eeb5 8a40 	vcmp.f32	s16, #0.0
   2a516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2a51a:	f040 80c0 	bne.w	2a69e <__kernel_rem_pio2f+0x30e>
   2a51e:	9b00      	ldr	r3, [sp, #0]
   2a520:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
   2a524:	455b      	cmp	r3, fp
   2a526:	dc10      	bgt.n	2a54a <__kernel_rem_pio2f+0x1ba>
   2a528:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
   2a52c:	3b01      	subs	r3, #1
   2a52e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   2a532:	2100      	movs	r1, #0
   2a534:	4694      	mov	ip, r2
   2a536:	f853 2904 	ldr.w	r2, [r3], #-4
   2a53a:	454b      	cmp	r3, r9
   2a53c:	ea41 0102 	orr.w	r1, r1, r2
   2a540:	d1f9      	bne.n	2a536 <__kernel_rem_pio2f+0x1a6>
   2a542:	4662      	mov	r2, ip
   2a544:	2900      	cmp	r1, #0
   2a546:	f040 80f2 	bne.w	2a72e <__kernel_rem_pio2f+0x39e>
   2a54a:	9b00      	ldr	r3, [sp, #0]
   2a54c:	3b01      	subs	r3, #1
   2a54e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
   2a552:	2b00      	cmp	r3, #0
   2a554:	f040 80e7 	bne.w	2a726 <__kernel_rem_pio2f+0x396>
   2a558:	9b04      	ldr	r3, [sp, #16]
   2a55a:	f04f 0c01 	mov.w	ip, #1
   2a55e:	f853 2904 	ldr.w	r2, [r3], #-4
   2a562:	f10c 0c01 	add.w	ip, ip, #1
   2a566:	2a00      	cmp	r2, #0
   2a568:	d0f9      	beq.n	2a55e <__kernel_rem_pio2f+0x1ce>
   2a56a:	1c6b      	adds	r3, r5, #1
   2a56c:	44ac      	add	ip, r5
   2a56e:	469e      	mov	lr, r3
   2a570:	9a03      	ldr	r2, [sp, #12]
   2a572:	1951      	adds	r1, r2, r5
   2a574:	9a02      	ldr	r2, [sp, #8]
   2a576:	eb02 0b03 	add.w	fp, r2, r3
   2a57a:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
   2a57e:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
   2a580:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   2a584:	eb06 0583 	add.w	r5, r6, r3, lsl #2
   2a588:	ab1e      	add	r3, sp, #120	; 0x78
   2a58a:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
   2a58e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   2a592:	eddb 7a01 	vldr	s15, [fp, #4]
   2a596:	ed9f 7a26 	vldr	s14, [pc, #152]	; 2a630 <__kernel_rem_pio2f+0x2a0>
   2a59a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   2a59e:	f1b8 0f00 	cmp.w	r8, #0
   2a5a2:	f10b 0b04 	add.w	fp, fp, #4
   2a5a6:	edc1 7a00 	vstr	s15, [r1]
   2a5aa:	460a      	mov	r2, r1
   2a5ac:	f101 0104 	add.w	r1, r1, #4
   2a5b0:	db09      	blt.n	2a5c6 <__kernel_rem_pio2f+0x236>
   2a5b2:	4653      	mov	r3, sl
   2a5b4:	e001      	b.n	2a5ba <__kernel_rem_pio2f+0x22a>
   2a5b6:	ed72 7a01 	vldmdb	r2!, {s15}
   2a5ba:	ecf3 6a01 	vldmia	r3!, {s13}
   2a5be:	42a3      	cmp	r3, r4
   2a5c0:	eea6 7aa7 	vfma.f32	s14, s13, s15
   2a5c4:	d1f7      	bne.n	2a5b6 <__kernel_rem_pio2f+0x226>
   2a5c6:	f10e 0e01 	add.w	lr, lr, #1
   2a5ca:	45e6      	cmp	lr, ip
   2a5cc:	eca5 7a01 	vstmia	r5!, {s14}
   2a5d0:	dddf      	ble.n	2a592 <__kernel_rem_pio2f+0x202>
   2a5d2:	4665      	mov	r5, ip
   2a5d4:	e74d      	b.n	2a472 <__kernel_rem_pio2f+0xe2>
   2a5d6:	f040 809c 	bne.w	2a712 <__kernel_rem_pio2f+0x382>
   2a5da:	1e6b      	subs	r3, r5, #1
   2a5dc:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
   2a5e0:	11d2      	asrs	r2, r2, #7
   2a5e2:	2a00      	cmp	r2, #0
   2a5e4:	dd95      	ble.n	2a512 <__kernel_rem_pio2f+0x182>
   2a5e6:	ee19 3a90 	vmov	r3, s19
   2a5ea:	2d00      	cmp	r5, #0
   2a5ec:	f103 0301 	add.w	r3, r3, #1
   2a5f0:	ee09 3a90 	vmov	s19, r3
   2a5f4:	f340 8198 	ble.w	2a928 <__kernel_rem_pio2f+0x598>
   2a5f8:	6839      	ldr	r1, [r7, #0]
   2a5fa:	2900      	cmp	r1, #0
   2a5fc:	d17f      	bne.n	2a6fe <__kernel_rem_pio2f+0x36e>
   2a5fe:	2d01      	cmp	r5, #1
   2a600:	d026      	beq.n	2a650 <__kernel_rem_pio2f+0x2c0>
   2a602:	463b      	mov	r3, r7
   2a604:	f04f 0c01 	mov.w	ip, #1
   2a608:	f853 1f04 	ldr.w	r1, [r3, #4]!
   2a60c:	2900      	cmp	r1, #0
   2a60e:	d07a      	beq.n	2a706 <__kernel_rem_pio2f+0x376>
   2a610:	f10c 0301 	add.w	r3, ip, #1
   2a614:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   2a618:	429d      	cmp	r5, r3
   2a61a:	f847 102c 	str.w	r1, [r7, ip, lsl #2]
   2a61e:	dd16      	ble.n	2a64e <__kernel_rem_pio2f+0x2be>
   2a620:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
   2a624:	44bb      	add	fp, r7
   2a626:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   2a62a:	e00a      	b.n	2a642 <__kernel_rem_pio2f+0x2b2>
   2a62c:	00041dbc 	.word	0x00041dbc
   2a630:	00000000 	.word	0x00000000
   2a634:	43800000 	.word	0x43800000
   2a638:	3b800000 	.word	0x3b800000
   2a63c:	3fc90000 	.word	0x3fc90000
   2a640:	6819      	ldr	r1, [r3, #0]
   2a642:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
   2a646:	f843 1b04 	str.w	r1, [r3], #4
   2a64a:	455b      	cmp	r3, fp
   2a64c:	d1f8      	bne.n	2a640 <__kernel_rem_pio2f+0x2b0>
   2a64e:	2101      	movs	r1, #1
   2a650:	2800      	cmp	r0, #0
   2a652:	dd0c      	ble.n	2a66e <__kernel_rem_pio2f+0x2de>
   2a654:	2801      	cmp	r0, #1
   2a656:	f000 8148 	beq.w	2a8ea <__kernel_rem_pio2f+0x55a>
   2a65a:	2802      	cmp	r0, #2
   2a65c:	d107      	bne.n	2a66e <__kernel_rem_pio2f+0x2de>
   2a65e:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
   2a662:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
   2a666:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2a66a:	f847 302c 	str.w	r3, [r7, ip, lsl #2]
   2a66e:	2a02      	cmp	r2, #2
   2a670:	f47f af4f 	bne.w	2a512 <__kernel_rem_pio2f+0x182>
   2a674:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   2a678:	ee30 8a48 	vsub.f32	s16, s0, s16
   2a67c:	2900      	cmp	r1, #0
   2a67e:	f43f af48 	beq.w	2a512 <__kernel_rem_pio2f+0x182>
   2a682:	9209      	str	r2, [sp, #36]	; 0x24
   2a684:	9001      	str	r0, [sp, #4]
   2a686:	f000 fadf 	bl	2ac48 <scalbnf>
   2a68a:	ee38 8a40 	vsub.f32	s16, s16, s0
   2a68e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2a690:	9801      	ldr	r0, [sp, #4]
   2a692:	eeb5 8a40 	vcmp.f32	s16, #0.0
   2a696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2a69a:	f43f af40 	beq.w	2a51e <__kernel_rem_pio2f+0x18e>
   2a69e:	9202      	str	r2, [sp, #8]
   2a6a0:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
   2a6a4:	eeb0 0a48 	vmov.f32	s0, s16
   2a6a8:	1a98      	subs	r0, r3, r2
   2a6aa:	9501      	str	r5, [sp, #4]
   2a6ac:	9d00      	ldr	r5, [sp, #0]
   2a6ae:	f000 facb 	bl	2ac48 <scalbnf>
   2a6b2:	ed1f 7a20 	vldr	s14, [pc, #-128]	; 2a634 <__kernel_rem_pio2f+0x2a4>
   2a6b6:	eeb4 0ac7 	vcmpe.f32	s0, s14
   2a6ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2a6be:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   2a6c2:	f2c0 8159 	blt.w	2a978 <__kernel_rem_pio2f+0x5e8>
   2a6c6:	ed5f 7a24 	vldr	s15, [pc, #-144]	; 2a638 <__kernel_rem_pio2f+0x2a8>
   2a6ca:	9905      	ldr	r1, [sp, #20]
   2a6cc:	ee60 7a27 	vmul.f32	s15, s0, s15
   2a6d0:	3108      	adds	r1, #8
   2a6d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   2a6d6:	9105      	str	r1, [sp, #20]
   2a6d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   2a6dc:	f103 0b01 	add.w	fp, r3, #1
   2a6e0:	eea7 0ac7 	vfms.f32	s0, s15, s14
   2a6e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   2a6e8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   2a6ec:	ee10 1a10 	vmov	r1, s0
   2a6f0:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
   2a6f4:	ee17 3a90 	vmov	r3, s15
   2a6f8:	f847 302b 	str.w	r3, [r7, fp, lsl #2]
   2a6fc:	e02e      	b.n	2a75c <__kernel_rem_pio2f+0x3cc>
   2a6fe:	2301      	movs	r3, #1
   2a700:	f04f 0c00 	mov.w	ip, #0
   2a704:	e786      	b.n	2a614 <__kernel_rem_pio2f+0x284>
   2a706:	f10c 0c01 	add.w	ip, ip, #1
   2a70a:	45ac      	cmp	ip, r5
   2a70c:	f47f af7c 	bne.w	2a608 <__kernel_rem_pio2f+0x278>
   2a710:	e79e      	b.n	2a650 <__kernel_rem_pio2f+0x2c0>
   2a712:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   2a716:	eeb4 8ae7 	vcmpe.f32	s16, s15
   2a71a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2a71e:	f280 80f2 	bge.w	2a906 <__kernel_rem_pio2f+0x576>
   2a722:	2200      	movs	r2, #0
   2a724:	e6f5      	b.n	2a512 <__kernel_rem_pio2f+0x182>
   2a726:	1c6b      	adds	r3, r5, #1
   2a728:	469e      	mov	lr, r3
   2a72a:	469c      	mov	ip, r3
   2a72c:	e720      	b.n	2a570 <__kernel_rem_pio2f+0x1e0>
   2a72e:	9905      	ldr	r1, [sp, #20]
   2a730:	f1a1 0008 	sub.w	r0, r1, #8
   2a734:	f857 102b 	ldr.w	r1, [r7, fp, lsl #2]
   2a738:	9005      	str	r0, [sp, #20]
   2a73a:	462b      	mov	r3, r5
   2a73c:	9d00      	ldr	r5, [sp, #0]
   2a73e:	b969      	cbnz	r1, 2a75c <__kernel_rem_pio2f+0x3cc>
   2a740:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2a744:	3b02      	subs	r3, #2
   2a746:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   2a74a:	4601      	mov	r1, r0
   2a74c:	f853 0904 	ldr.w	r0, [r3], #-4
   2a750:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   2a754:	3908      	subs	r1, #8
   2a756:	2800      	cmp	r0, #0
   2a758:	d0f8      	beq.n	2a74c <__kernel_rem_pio2f+0x3bc>
   2a75a:	9105      	str	r1, [sp, #20]
   2a75c:	9805      	ldr	r0, [sp, #20]
   2a75e:	9200      	str	r2, [sp, #0]
   2a760:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   2a764:	f000 fa70 	bl	2ac48 <scalbnf>
   2a768:	f1bb 0f00 	cmp.w	fp, #0
   2a76c:	9a00      	ldr	r2, [sp, #0]
   2a76e:	f2c0 8128 	blt.w	2a9c2 <__kernel_rem_pio2f+0x632>
   2a772:	ea4f 0e8b 	mov.w	lr, fp, lsl #2
   2a776:	ab46      	add	r3, sp, #280	; 0x118
   2a778:	eb03 060e 	add.w	r6, r3, lr
   2a77c:	f10e 0c04 	add.w	ip, lr, #4
   2a780:	ed1f 7a53 	vldr	s14, [pc, #-332]	; 2a638 <__kernel_rem_pio2f+0x2a8>
   2a784:	eb07 030c 	add.w	r3, r7, ip
   2a788:	1d31      	adds	r1, r6, #4
   2a78a:	ed73 7a01 	vldmdb	r3!, {s15}
   2a78e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   2a792:	42bb      	cmp	r3, r7
   2a794:	ee67 7a80 	vmul.f32	s15, s15, s0
   2a798:	ee20 0a07 	vmul.f32	s0, s0, s14
   2a79c:	ed61 7a01 	vstmdb	r1!, {s15}
   2a7a0:	d1f3      	bne.n	2a78a <__kernel_rem_pio2f+0x3fa>
   2a7a2:	2d00      	cmp	r5, #0
   2a7a4:	ed1f 6a5b 	vldr	s12, [pc, #-364]	; 2a63c <__kernel_rem_pio2f+0x2ac>
   2a7a8:	f04f 0400 	mov.w	r4, #0
   2a7ac:	db20      	blt.n	2a7f0 <__kernel_rem_pio2f+0x460>
   2a7ae:	4893      	ldr	r0, [pc, #588]	; (2a9fc <__kernel_rem_pio2f+0x66c>)
   2a7b0:	eddf 7a93 	vldr	s15, [pc, #588]	; 2aa00 <__kernel_rem_pio2f+0x670>
   2a7b4:	eeb0 7a46 	vmov.f32	s14, s12
   2a7b8:	4631      	mov	r1, r6
   2a7ba:	2300      	movs	r3, #0
   2a7bc:	e003      	b.n	2a7c6 <__kernel_rem_pio2f+0x436>
   2a7be:	429c      	cmp	r4, r3
   2a7c0:	db08      	blt.n	2a7d4 <__kernel_rem_pio2f+0x444>
   2a7c2:	ecb0 7a01 	vldmia	r0!, {s14}
   2a7c6:	ecf1 6a01 	vldmia	r1!, {s13}
   2a7ca:	3301      	adds	r3, #1
   2a7cc:	429d      	cmp	r5, r3
   2a7ce:	eee6 7a87 	vfma.f32	s15, s13, s14
   2a7d2:	daf4      	bge.n	2a7be <__kernel_rem_pio2f+0x42e>
   2a7d4:	ab5a      	add	r3, sp, #360	; 0x168
   2a7d6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   2a7da:	45a3      	cmp	fp, r4
   2a7dc:	ed43 7a28 	vstr	s15, [r3, #-160]	; 0xffffff60
   2a7e0:	f1a6 0604 	sub.w	r6, r6, #4
   2a7e4:	f104 0301 	add.w	r3, r4, #1
   2a7e8:	d005      	beq.n	2a7f6 <__kernel_rem_pio2f+0x466>
   2a7ea:	2d00      	cmp	r5, #0
   2a7ec:	461c      	mov	r4, r3
   2a7ee:	dade      	bge.n	2a7ae <__kernel_rem_pio2f+0x41e>
   2a7f0:	eddf 7a83 	vldr	s15, [pc, #524]	; 2aa00 <__kernel_rem_pio2f+0x670>
   2a7f4:	e7ee      	b.n	2a7d4 <__kernel_rem_pio2f+0x444>
   2a7f6:	9968      	ldr	r1, [sp, #416]	; 0x1a0
   2a7f8:	2902      	cmp	r1, #2
   2a7fa:	dc1c      	bgt.n	2a836 <__kernel_rem_pio2f+0x4a6>
   2a7fc:	2900      	cmp	r1, #0
   2a7fe:	f300 8095 	bgt.w	2a92c <__kernel_rem_pio2f+0x59c>
   2a802:	d10f      	bne.n	2a824 <__kernel_rem_pio2f+0x494>
   2a804:	ab32      	add	r3, sp, #200	; 0xc8
   2a806:	eddf 7a7e 	vldr	s15, [pc, #504]	; 2aa00 <__kernel_rem_pio2f+0x670>
   2a80a:	449c      	add	ip, r3
   2a80c:	ed3c 7a01 	vldmdb	ip!, {s14}
   2a810:	4563      	cmp	r3, ip
   2a812:	ee77 7a87 	vadd.f32	s15, s15, s14
   2a816:	d1f9      	bne.n	2a80c <__kernel_rem_pio2f+0x47c>
   2a818:	b10a      	cbz	r2, 2a81e <__kernel_rem_pio2f+0x48e>
   2a81a:	eef1 7a67 	vneg.f32	s15, s15
   2a81e:	9b06      	ldr	r3, [sp, #24]
   2a820:	edc3 7a00 	vstr	s15, [r3]
   2a824:	ee19 3a90 	vmov	r3, s19
   2a828:	f003 0007 	and.w	r0, r3, #7
   2a82c:	b05b      	add	sp, #364	; 0x16c
   2a82e:	ecbd 8b04 	vpop	{d8-d9}
   2a832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a836:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   2a838:	2b03      	cmp	r3, #3
   2a83a:	d1f3      	bne.n	2a824 <__kernel_rem_pio2f+0x494>
   2a83c:	f1bb 0f00 	cmp.w	fp, #0
   2a840:	f000 80d4 	beq.w	2a9ec <__kernel_rem_pio2f+0x65c>
   2a844:	f50e 73b4 	add.w	r3, lr, #360	; 0x168
   2a848:	446b      	add	r3, sp
   2a84a:	a932      	add	r1, sp, #200	; 0xc8
   2a84c:	ed13 7a28 	vldr	s14, [r3, #-160]	; 0xffffff60
   2a850:	eb01 038b 	add.w	r3, r1, fp, lsl #2
   2a854:	ed73 7a01 	vldmdb	r3!, {s15}
   2a858:	eef0 6a47 	vmov.f32	s13, s14
   2a85c:	ee37 7a27 	vadd.f32	s14, s14, s15
   2a860:	4299      	cmp	r1, r3
   2a862:	ee77 7ac7 	vsub.f32	s15, s15, s14
   2a866:	ed83 7a00 	vstr	s14, [r3]
   2a86a:	ee77 7aa6 	vadd.f32	s15, s15, s13
   2a86e:	edc3 7a01 	vstr	s15, [r3, #4]
   2a872:	d1ef      	bne.n	2a854 <__kernel_rem_pio2f+0x4c4>
   2a874:	f1bb 0f01 	cmp.w	fp, #1
   2a878:	f340 80b8 	ble.w	2a9ec <__kernel_rem_pio2f+0x65c>
   2a87c:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
   2a880:	f50e 73b4 	add.w	r3, lr, #360	; 0x168
   2a884:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   2a888:	eb0d 0e03 	add.w	lr, sp, r3
   2a88c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
   2a890:	f10b 0304 	add.w	r3, fp, #4
   2a894:	ed1e 7a28 	vldr	s14, [lr, #-160]	; 0xffffff60
   2a898:	440b      	add	r3, r1
   2a89a:	a833      	add	r0, sp, #204	; 0xcc
   2a89c:	ed73 7a01 	vldmdb	r3!, {s15}
   2a8a0:	eef0 6a47 	vmov.f32	s13, s14
   2a8a4:	ee37 7a27 	vadd.f32	s14, s14, s15
   2a8a8:	4298      	cmp	r0, r3
   2a8aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
   2a8ae:	ed83 7a00 	vstr	s14, [r3]
   2a8b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
   2a8b6:	edc3 7a01 	vstr	s15, [r3, #4]
   2a8ba:	d1ef      	bne.n	2a89c <__kernel_rem_pio2f+0x50c>
   2a8bc:	f10b 0b08 	add.w	fp, fp, #8
   2a8c0:	eddf 7a4f 	vldr	s15, [pc, #316]	; 2aa00 <__kernel_rem_pio2f+0x670>
   2a8c4:	eb01 030b 	add.w	r3, r1, fp
   2a8c8:	3108      	adds	r1, #8
   2a8ca:	ed33 7a01 	vldmdb	r3!, {s14}
   2a8ce:	4299      	cmp	r1, r3
   2a8d0:	ee77 7a87 	vadd.f32	s15, s15, s14
   2a8d4:	d1f9      	bne.n	2a8ca <__kernel_rem_pio2f+0x53a>
   2a8d6:	2a00      	cmp	r2, #0
   2a8d8:	d156      	bne.n	2a988 <__kernel_rem_pio2f+0x5f8>
   2a8da:	9906      	ldr	r1, [sp, #24]
   2a8dc:	9a32      	ldr	r2, [sp, #200]	; 0xc8
   2a8de:	9b33      	ldr	r3, [sp, #204]	; 0xcc
   2a8e0:	600a      	str	r2, [r1, #0]
   2a8e2:	604b      	str	r3, [r1, #4]
   2a8e4:	edc1 7a02 	vstr	s15, [r1, #8]
   2a8e8:	e79c      	b.n	2a824 <__kernel_rem_pio2f+0x494>
   2a8ea:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
   2a8ee:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
   2a8f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2a8f6:	f847 302c 	str.w	r3, [r7, ip, lsl #2]
   2a8fa:	e6b8      	b.n	2a66e <__kernel_rem_pio2f+0x2de>
   2a8fc:	2308      	movs	r3, #8
   2a8fe:	9307      	str	r3, [sp, #28]
   2a900:	2300      	movs	r3, #0
   2a902:	9302      	str	r3, [sp, #8]
   2a904:	e55f      	b.n	2a3c6 <__kernel_rem_pio2f+0x36>
   2a906:	ee19 3a90 	vmov	r3, s19
   2a90a:	2d00      	cmp	r5, #0
   2a90c:	f103 0301 	add.w	r3, r3, #1
   2a910:	ee09 3a90 	vmov	s19, r3
   2a914:	bfc8      	it	gt
   2a916:	2202      	movgt	r2, #2
   2a918:	f73f ae6e 	bgt.w	2a5f8 <__kernel_rem_pio2f+0x268>
   2a91c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   2a920:	ee37 8ac8 	vsub.f32	s16, s15, s16
   2a924:	2202      	movs	r2, #2
   2a926:	e5f4      	b.n	2a512 <__kernel_rem_pio2f+0x182>
   2a928:	2100      	movs	r1, #0
   2a92a:	e691      	b.n	2a650 <__kernel_rem_pio2f+0x2c0>
   2a92c:	a932      	add	r1, sp, #200	; 0xc8
   2a92e:	eddf 7a34 	vldr	s15, [pc, #208]	; 2aa00 <__kernel_rem_pio2f+0x670>
   2a932:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   2a936:	ed33 7a01 	vldmdb	r3!, {s14}
   2a93a:	4299      	cmp	r1, r3
   2a93c:	ee77 7a87 	vadd.f32	s15, s15, s14
   2a940:	d1f9      	bne.n	2a936 <__kernel_rem_pio2f+0x5a6>
   2a942:	ed9d 7a32 	vldr	s14, [sp, #200]	; 0xc8
   2a946:	bb8a      	cbnz	r2, 2a9ac <__kernel_rem_pio2f+0x61c>
   2a948:	9b06      	ldr	r3, [sp, #24]
   2a94a:	f1bb 0f00 	cmp.w	fp, #0
   2a94e:	edc3 7a00 	vstr	s15, [r3]
   2a952:	ee77 7a67 	vsub.f32	s15, s14, s15
   2a956:	dd0b      	ble.n	2a970 <__kernel_rem_pio2f+0x5e0>
   2a958:	a933      	add	r1, sp, #204	; 0xcc
   2a95a:	2301      	movs	r3, #1
   2a95c:	ecb1 7a01 	vldmia	r1!, {s14}
   2a960:	3301      	adds	r3, #1
   2a962:	459b      	cmp	fp, r3
   2a964:	ee77 7a87 	vadd.f32	s15, s15, s14
   2a968:	daf8      	bge.n	2a95c <__kernel_rem_pio2f+0x5cc>
   2a96a:	b10a      	cbz	r2, 2a970 <__kernel_rem_pio2f+0x5e0>
   2a96c:	eef1 7a67 	vneg.f32	s15, s15
   2a970:	9b06      	ldr	r3, [sp, #24]
   2a972:	edc3 7a01 	vstr	s15, [r3, #4]
   2a976:	e755      	b.n	2a824 <__kernel_rem_pio2f+0x494>
   2a978:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   2a97c:	469b      	mov	fp, r3
   2a97e:	ee10 1a10 	vmov	r1, s0
   2a982:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
   2a986:	e6e9      	b.n	2a75c <__kernel_rem_pio2f+0x3cc>
   2a988:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
   2a98c:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
   2a990:	9b06      	ldr	r3, [sp, #24]
   2a992:	eef1 6a66 	vneg.f32	s13, s13
   2a996:	eeb1 7a47 	vneg.f32	s14, s14
   2a99a:	eef1 7a67 	vneg.f32	s15, s15
   2a99e:	edc3 6a00 	vstr	s13, [r3]
   2a9a2:	ed83 7a01 	vstr	s14, [r3, #4]
   2a9a6:	edc3 7a02 	vstr	s15, [r3, #8]
   2a9aa:	e73b      	b.n	2a824 <__kernel_rem_pio2f+0x494>
   2a9ac:	9b06      	ldr	r3, [sp, #24]
   2a9ae:	eef1 6a67 	vneg.f32	s13, s15
   2a9b2:	f1bb 0f00 	cmp.w	fp, #0
   2a9b6:	ee77 7a67 	vsub.f32	s15, s14, s15
   2a9ba:	edc3 6a00 	vstr	s13, [r3]
   2a9be:	dccb      	bgt.n	2a958 <__kernel_rem_pio2f+0x5c8>
   2a9c0:	e7d4      	b.n	2a96c <__kernel_rem_pio2f+0x5dc>
   2a9c2:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   2a9c4:	2b02      	cmp	r3, #2
   2a9c6:	dc0d      	bgt.n	2a9e4 <__kernel_rem_pio2f+0x654>
   2a9c8:	2b00      	cmp	r3, #0
   2a9ca:	dc14      	bgt.n	2a9f6 <__kernel_rem_pio2f+0x666>
   2a9cc:	f47f af2a 	bne.w	2a824 <__kernel_rem_pio2f+0x494>
   2a9d0:	eddf 7a0b 	vldr	s15, [pc, #44]	; 2aa00 <__kernel_rem_pio2f+0x670>
   2a9d4:	2a00      	cmp	r2, #0
   2a9d6:	f43f af22 	beq.w	2a81e <__kernel_rem_pio2f+0x48e>
   2a9da:	e71e      	b.n	2a81a <__kernel_rem_pio2f+0x48a>
   2a9dc:	9b03      	ldr	r3, [sp, #12]
   2a9de:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   2a9e2:	e535      	b.n	2a450 <__kernel_rem_pio2f+0xc0>
   2a9e4:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   2a9e6:	2b03      	cmp	r3, #3
   2a9e8:	f47f af1c 	bne.w	2a824 <__kernel_rem_pio2f+0x494>
   2a9ec:	eddf 7a04 	vldr	s15, [pc, #16]	; 2aa00 <__kernel_rem_pio2f+0x670>
   2a9f0:	2a00      	cmp	r2, #0
   2a9f2:	d1c9      	bne.n	2a988 <__kernel_rem_pio2f+0x5f8>
   2a9f4:	e771      	b.n	2a8da <__kernel_rem_pio2f+0x54a>
   2a9f6:	eddf 7a02 	vldr	s15, [pc, #8]	; 2aa00 <__kernel_rem_pio2f+0x670>
   2a9fa:	e7a2      	b.n	2a942 <__kernel_rem_pio2f+0x5b2>
   2a9fc:	00041d94 	.word	0x00041d94
   2aa00:	00000000 	.word	0x00000000

0002aa04 <__kernel_sinf>:
   2aa04:	ee10 3a10 	vmov	r3, s0
   2aa08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   2aa0c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   2aa10:	da04      	bge.n	2aa1c <__kernel_sinf+0x18>
   2aa12:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   2aa16:	ee17 3a90 	vmov	r3, s15
   2aa1a:	b35b      	cbz	r3, 2aa74 <__kernel_sinf+0x70>
   2aa1c:	ee60 7a00 	vmul.f32	s15, s0, s0
   2aa20:	ed9f 7a15 	vldr	s14, [pc, #84]	; 2aa78 <__kernel_sinf+0x74>
   2aa24:	eddf 5a15 	vldr	s11, [pc, #84]	; 2aa7c <__kernel_sinf+0x78>
   2aa28:	ed9f 6a15 	vldr	s12, [pc, #84]	; 2aa80 <__kernel_sinf+0x7c>
   2aa2c:	eddf 6a15 	vldr	s13, [pc, #84]	; 2aa84 <__kernel_sinf+0x80>
   2aa30:	eee7 5a87 	vfma.f32	s11, s15, s14
   2aa34:	ed9f 7a14 	vldr	s14, [pc, #80]	; 2aa88 <__kernel_sinf+0x84>
   2aa38:	eea5 6aa7 	vfma.f32	s12, s11, s15
   2aa3c:	ee20 5a27 	vmul.f32	s10, s0, s15
   2aa40:	eee6 6a27 	vfma.f32	s13, s12, s15
   2aa44:	eea6 7aa7 	vfma.f32	s14, s13, s15
   2aa48:	b930      	cbnz	r0, 2aa58 <__kernel_sinf+0x54>
   2aa4a:	eddf 6a10 	vldr	s13, [pc, #64]	; 2aa8c <__kernel_sinf+0x88>
   2aa4e:	eee7 6a87 	vfma.f32	s13, s15, s14
   2aa52:	eea6 0a85 	vfma.f32	s0, s13, s10
   2aa56:	4770      	bx	lr
   2aa58:	ee27 7a45 	vnmul.f32	s14, s14, s10
   2aa5c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
   2aa60:	eea0 7aa6 	vfma.f32	s14, s1, s13
   2aa64:	eddf 6a0a 	vldr	s13, [pc, #40]	; 2aa90 <__kernel_sinf+0x8c>
   2aa68:	eed7 0a27 	vfnms.f32	s1, s14, s15
   2aa6c:	eee5 0a26 	vfma.f32	s1, s10, s13
   2aa70:	ee30 0a60 	vsub.f32	s0, s0, s1
   2aa74:	4770      	bx	lr
   2aa76:	bf00      	nop
   2aa78:	2f2ec9d3 	.word	0x2f2ec9d3
   2aa7c:	b2d72f34 	.word	0xb2d72f34
   2aa80:	3638ef1b 	.word	0x3638ef1b
   2aa84:	b9500d01 	.word	0xb9500d01
   2aa88:	3c088889 	.word	0x3c088889
   2aa8c:	be2aaaab 	.word	0xbe2aaaab
   2aa90:	3e2aaaab 	.word	0x3e2aaaab

0002aa94 <with_errnof>:
   2aa94:	b510      	push	{r4, lr}
   2aa96:	b082      	sub	sp, #8
   2aa98:	ed8d 0a01 	vstr	s0, [sp, #4]
   2aa9c:	4604      	mov	r4, r0
   2aa9e:	f000 f96b 	bl	2ad78 <__errno>
   2aaa2:	ed9d 0a01 	vldr	s0, [sp, #4]
   2aaa6:	6004      	str	r4, [r0, #0]
   2aaa8:	b002      	add	sp, #8
   2aaaa:	bd10      	pop	{r4, pc}

0002aaac <xflowf>:
   2aaac:	b130      	cbz	r0, 2aabc <xflowf+0x10>
   2aaae:	eef1 7a40 	vneg.f32	s15, s0
   2aab2:	ee27 0a80 	vmul.f32	s0, s15, s0
   2aab6:	2022      	movs	r0, #34	; 0x22
   2aab8:	f7ff bfec 	b.w	2aa94 <with_errnof>
   2aabc:	eef0 7a40 	vmov.f32	s15, s0
   2aac0:	ee27 0a80 	vmul.f32	s0, s15, s0
   2aac4:	2022      	movs	r0, #34	; 0x22
   2aac6:	f7ff bfe5 	b.w	2aa94 <with_errnof>
   2aaca:	bf00      	nop

0002aacc <__math_uflowf>:
   2aacc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 2aad4 <__math_uflowf+0x8>
   2aad0:	f7ff bfec 	b.w	2aaac <xflowf>
   2aad4:	10000000 	.word	0x10000000

0002aad8 <__math_oflowf>:
   2aad8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 2aae0 <__math_oflowf+0x8>
   2aadc:	f7ff bfe6 	b.w	2aaac <xflowf>
   2aae0:	70000000 	.word	0x70000000

0002aae4 <fabs>:
   2aae4:	ec51 0b10 	vmov	r0, r1, d0
   2aae8:	ee10 2a10 	vmov	r2, s0
   2aaec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   2aaf0:	ec43 2b10 	vmov	d0, r2, r3
   2aaf4:	4770      	bx	lr
   2aaf6:	bf00      	nop

0002aaf8 <scalbn>:
   2aaf8:	b538      	push	{r3, r4, r5, lr}
   2aafa:	ec53 2b10 	vmov	r2, r3, d0
   2aafe:	f3c3 510a 	ubfx	r1, r3, #20, #11
   2ab02:	4604      	mov	r4, r0
   2ab04:	469c      	mov	ip, r3
   2ab06:	bb89      	cbnz	r1, 2ab6c <scalbn+0x74>
   2ab08:	ee10 1a10 	vmov	r1, s0
   2ab0c:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
   2ab10:	ea5c 0101 	orrs.w	r1, ip, r1
   2ab14:	d029      	beq.n	2ab6a <scalbn+0x72>
   2ab16:	4619      	mov	r1, r3
   2ab18:	2200      	movs	r2, #0
   2ab1a:	4b3d      	ldr	r3, [pc, #244]	; (2ac10 <scalbn+0x118>)
   2ab1c:	4d3d      	ldr	r5, [pc, #244]	; (2ac14 <scalbn+0x11c>)
   2ab1e:	ee10 0a10 	vmov	r0, s0
   2ab22:	f7ed fff7 	bl	18b14 <__aeabi_dmul>
   2ab26:	42ac      	cmp	r4, r5
   2ab28:	4602      	mov	r2, r0
   2ab2a:	460b      	mov	r3, r1
   2ab2c:	db16      	blt.n	2ab5c <scalbn+0x64>
   2ab2e:	468c      	mov	ip, r1
   2ab30:	f3c1 510a 	ubfx	r1, r1, #20, #11
   2ab34:	3936      	subs	r1, #54	; 0x36
   2ab36:	4421      	add	r1, r4
   2ab38:	f240 70fe 	movw	r0, #2046	; 0x7fe
   2ab3c:	4281      	cmp	r1, r0
   2ab3e:	dc21      	bgt.n	2ab84 <scalbn+0x8c>
   2ab40:	2900      	cmp	r1, #0
   2ab42:	dc47      	bgt.n	2abd4 <scalbn+0xdc>
   2ab44:	f111 0f35 	cmn.w	r1, #53	; 0x35
   2ab48:	da34      	bge.n	2abb4 <scalbn+0xbc>
   2ab4a:	f24c 3150 	movw	r1, #50000	; 0xc350
   2ab4e:	428c      	cmp	r4, r1
   2ab50:	dc18      	bgt.n	2ab84 <scalbn+0x8c>
   2ab52:	2b00      	cmp	r3, #0
   2ab54:	a126      	add	r1, pc, #152	; (adr r1, 2abf0 <scalbn+0xf8>)
   2ab56:	e9d1 0100 	ldrd	r0, r1, [r1]
   2ab5a:	db44      	blt.n	2abe6 <scalbn+0xee>
   2ab5c:	a324      	add	r3, pc, #144	; (adr r3, 2abf0 <scalbn+0xf8>)
   2ab5e:	e9d3 2300 	ldrd	r2, r3, [r3]
   2ab62:	f7ed ffd7 	bl	18b14 <__aeabi_dmul>
   2ab66:	ec41 0b10 	vmov	d0, r0, r1
   2ab6a:	bd38      	pop	{r3, r4, r5, pc}
   2ab6c:	f240 70ff 	movw	r0, #2047	; 0x7ff
   2ab70:	4281      	cmp	r1, r0
   2ab72:	d1e0      	bne.n	2ab36 <scalbn+0x3e>
   2ab74:	ee10 0a10 	vmov	r0, s0
   2ab78:	4619      	mov	r1, r3
   2ab7a:	f7ed fe15 	bl	187a8 <__adddf3>
   2ab7e:	ec41 0b10 	vmov	d0, r0, r1
   2ab82:	bd38      	pop	{r3, r4, r5, pc}
   2ab84:	2b00      	cmp	r3, #0
   2ab86:	a11c      	add	r1, pc, #112	; (adr r1, 2abf8 <scalbn+0x100>)
   2ab88:	e9d1 0100 	ldrd	r0, r1, [r1]
   2ab8c:	db07      	blt.n	2ab9e <scalbn+0xa6>
   2ab8e:	a31a      	add	r3, pc, #104	; (adr r3, 2abf8 <scalbn+0x100>)
   2ab90:	e9d3 2300 	ldrd	r2, r3, [r3]
   2ab94:	f7ed ffbe 	bl	18b14 <__aeabi_dmul>
   2ab98:	ec41 0b10 	vmov	d0, r0, r1
   2ab9c:	bd38      	pop	{r3, r4, r5, pc}
   2ab9e:	a118      	add	r1, pc, #96	; (adr r1, 2ac00 <scalbn+0x108>)
   2aba0:	e9d1 0100 	ldrd	r0, r1, [r1]
   2aba4:	a314      	add	r3, pc, #80	; (adr r3, 2abf8 <scalbn+0x100>)
   2aba6:	e9d3 2300 	ldrd	r2, r3, [r3]
   2abaa:	f7ed ffb3 	bl	18b14 <__aeabi_dmul>
   2abae:	ec41 0b10 	vmov	d0, r0, r1
   2abb2:	e7f3      	b.n	2ab9c <scalbn+0xa4>
   2abb4:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   2abb8:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   2abbc:	3136      	adds	r1, #54	; 0x36
   2abbe:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   2abc2:	4610      	mov	r0, r2
   2abc4:	4619      	mov	r1, r3
   2abc6:	2200      	movs	r2, #0
   2abc8:	4b13      	ldr	r3, [pc, #76]	; (2ac18 <scalbn+0x120>)
   2abca:	f7ed ffa3 	bl	18b14 <__aeabi_dmul>
   2abce:	ec41 0b10 	vmov	d0, r0, r1
   2abd2:	bd38      	pop	{r3, r4, r5, pc}
   2abd4:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   2abd8:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   2abdc:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   2abe0:	ec43 2b10 	vmov	d0, r2, r3
   2abe4:	bd38      	pop	{r3, r4, r5, pc}
   2abe6:	a108      	add	r1, pc, #32	; (adr r1, 2ac08 <scalbn+0x110>)
   2abe8:	e9d1 0100 	ldrd	r0, r1, [r1]
   2abec:	e7b6      	b.n	2ab5c <scalbn+0x64>
   2abee:	bf00      	nop
   2abf0:	c2f8f359 	.word	0xc2f8f359
   2abf4:	01a56e1f 	.word	0x01a56e1f
   2abf8:	8800759c 	.word	0x8800759c
   2abfc:	7e37e43c 	.word	0x7e37e43c
   2ac00:	8800759c 	.word	0x8800759c
   2ac04:	fe37e43c 	.word	0xfe37e43c
   2ac08:	c2f8f359 	.word	0xc2f8f359
   2ac0c:	81a56e1f 	.word	0x81a56e1f
   2ac10:	43500000 	.word	0x43500000
   2ac14:	ffff3cb0 	.word	0xffff3cb0
   2ac18:	3c900000 	.word	0x3c900000

0002ac1c <fabsf>:
   2ac1c:	ee10 3a10 	vmov	r3, s0
   2ac20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   2ac24:	ee00 3a10 	vmov	s0, r3
   2ac28:	4770      	bx	lr
   2ac2a:	bf00      	nop

0002ac2c <finitef>:
   2ac2c:	b082      	sub	sp, #8
   2ac2e:	ed8d 0a01 	vstr	s0, [sp, #4]
   2ac32:	9801      	ldr	r0, [sp, #4]
   2ac34:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   2ac38:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
   2ac3c:	bfac      	ite	ge
   2ac3e:	2000      	movge	r0, #0
   2ac40:	2001      	movlt	r0, #1
   2ac42:	b002      	add	sp, #8
   2ac44:	4770      	bx	lr
   2ac46:	bf00      	nop

0002ac48 <scalbnf>:
   2ac48:	b082      	sub	sp, #8
   2ac4a:	ed8d 0a01 	vstr	s0, [sp, #4]
   2ac4e:	9b01      	ldr	r3, [sp, #4]
   2ac50:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   2ac54:	d02a      	beq.n	2acac <scalbnf+0x64>
   2ac56:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   2ac5a:	d223      	bcs.n	2aca4 <scalbnf+0x5c>
   2ac5c:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
   2ac60:	d128      	bne.n	2acb4 <scalbnf+0x6c>
   2ac62:	ed9d 7a01 	vldr	s14, [sp, #4]
   2ac66:	eddf 7a2a 	vldr	s15, [pc, #168]	; 2ad10 <scalbnf+0xc8>
   2ac6a:	4b2a      	ldr	r3, [pc, #168]	; (2ad14 <scalbnf+0xcc>)
   2ac6c:	ee67 7a27 	vmul.f32	s15, s14, s15
   2ac70:	4298      	cmp	r0, r3
   2ac72:	edcd 7a01 	vstr	s15, [sp, #4]
   2ac76:	db37      	blt.n	2ace8 <scalbnf+0xa0>
   2ac78:	9b01      	ldr	r3, [sp, #4]
   2ac7a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   2ac7e:	3a19      	subs	r2, #25
   2ac80:	4402      	add	r2, r0
   2ac82:	2afe      	cmp	r2, #254	; 0xfe
   2ac84:	dd1a      	ble.n	2acbc <scalbnf+0x74>
   2ac86:	ed9f 0a24 	vldr	s0, [pc, #144]	; 2ad18 <scalbnf+0xd0>
   2ac8a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 2ad1c <scalbnf+0xd4>
   2ac8e:	9b01      	ldr	r3, [sp, #4]
   2ac90:	2b00      	cmp	r3, #0
   2ac92:	eef0 7a40 	vmov.f32	s15, s0
   2ac96:	bfb8      	it	lt
   2ac98:	eeb0 0a47 	vmovlt.f32	s0, s14
   2ac9c:	ee20 0a27 	vmul.f32	s0, s0, s15
   2aca0:	b002      	add	sp, #8
   2aca2:	4770      	bx	lr
   2aca4:	ee30 0a00 	vadd.f32	s0, s0, s0
   2aca8:	b002      	add	sp, #8
   2acaa:	4770      	bx	lr
   2acac:	ed9d 0a01 	vldr	s0, [sp, #4]
   2acb0:	b002      	add	sp, #8
   2acb2:	4770      	bx	lr
   2acb4:	0dd2      	lsrs	r2, r2, #23
   2acb6:	4402      	add	r2, r0
   2acb8:	2afe      	cmp	r2, #254	; 0xfe
   2acba:	dce4      	bgt.n	2ac86 <scalbnf+0x3e>
   2acbc:	2a00      	cmp	r2, #0
   2acbe:	dc0b      	bgt.n	2acd8 <scalbnf+0x90>
   2acc0:	f112 0f16 	cmn.w	r2, #22
   2acc4:	da17      	bge.n	2acf6 <scalbnf+0xae>
   2acc6:	f24c 3350 	movw	r3, #50000	; 0xc350
   2acca:	4298      	cmp	r0, r3
   2accc:	dcdb      	bgt.n	2ac86 <scalbnf+0x3e>
   2acce:	ed9f 0a14 	vldr	s0, [pc, #80]	; 2ad20 <scalbnf+0xd8>
   2acd2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 2ad24 <scalbnf+0xdc>
   2acd6:	e7da      	b.n	2ac8e <scalbnf+0x46>
   2acd8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   2acdc:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   2ace0:	ee00 3a10 	vmov	s0, r3
   2ace4:	b002      	add	sp, #8
   2ace6:	4770      	bx	lr
   2ace8:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 2ad20 <scalbnf+0xd8>
   2acec:	eddd 7a01 	vldr	s15, [sp, #4]
   2acf0:	ee27 0a80 	vmul.f32	s0, s15, s0
   2acf4:	e7d8      	b.n	2aca8 <scalbnf+0x60>
   2acf6:	3219      	adds	r2, #25
   2acf8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   2acfc:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   2ad00:	eddf 7a09 	vldr	s15, [pc, #36]	; 2ad28 <scalbnf+0xe0>
   2ad04:	ee07 3a10 	vmov	s14, r3
   2ad08:	ee27 0a27 	vmul.f32	s0, s14, s15
   2ad0c:	e7cc      	b.n	2aca8 <scalbnf+0x60>
   2ad0e:	bf00      	nop
   2ad10:	4c000000 	.word	0x4c000000
   2ad14:	ffff3cb0 	.word	0xffff3cb0
   2ad18:	7149f2ca 	.word	0x7149f2ca
   2ad1c:	f149f2ca 	.word	0xf149f2ca
   2ad20:	0da24260 	.word	0x0da24260
   2ad24:	8da24260 	.word	0x8da24260
   2ad28:	33000000 	.word	0x33000000

0002ad2c <__assert_func>:
   2ad2c:	b500      	push	{lr}
   2ad2e:	4c0b      	ldr	r4, [pc, #44]	; (2ad5c <__assert_func+0x30>)
   2ad30:	6825      	ldr	r5, [r4, #0]
   2ad32:	4614      	mov	r4, r2
   2ad34:	68ee      	ldr	r6, [r5, #12]
   2ad36:	461a      	mov	r2, r3
   2ad38:	b085      	sub	sp, #20
   2ad3a:	4603      	mov	r3, r0
   2ad3c:	460d      	mov	r5, r1
   2ad3e:	b14c      	cbz	r4, 2ad54 <__assert_func+0x28>
   2ad40:	4907      	ldr	r1, [pc, #28]	; (2ad60 <__assert_func+0x34>)
   2ad42:	9500      	str	r5, [sp, #0]
   2ad44:	e9cd 1401 	strd	r1, r4, [sp, #4]
   2ad48:	4630      	mov	r0, r6
   2ad4a:	4906      	ldr	r1, [pc, #24]	; (2ad64 <__assert_func+0x38>)
   2ad4c:	f000 f81a 	bl	2ad84 <fiprintf>
   2ad50:	f001 f924 	bl	2bf9c <abort>
   2ad54:	4904      	ldr	r1, [pc, #16]	; (2ad68 <__assert_func+0x3c>)
   2ad56:	460c      	mov	r4, r1
   2ad58:	e7f3      	b.n	2ad42 <__assert_func+0x16>
   2ad5a:	bf00      	nop
   2ad5c:	100040c4 	.word	0x100040c4
   2ad60:	00041dc8 	.word	0x00041dc8
   2ad64:	00041dd8 	.word	0x00041dd8
   2ad68:	0003fb2c 	.word	0x0003fb2c

0002ad6c <atexit>:
   2ad6c:	2300      	movs	r3, #0
   2ad6e:	4601      	mov	r1, r0
   2ad70:	461a      	mov	r2, r3
   2ad72:	4618      	mov	r0, r3
   2ad74:	f001 b8cc 	b.w	2bf10 <__register_exitproc>

0002ad78 <__errno>:
   2ad78:	4b01      	ldr	r3, [pc, #4]	; (2ad80 <__errno+0x8>)
   2ad7a:	6818      	ldr	r0, [r3, #0]
   2ad7c:	4770      	bx	lr
   2ad7e:	bf00      	nop
   2ad80:	100040c4 	.word	0x100040c4

0002ad84 <fiprintf>:
   2ad84:	b40e      	push	{r1, r2, r3}
   2ad86:	b510      	push	{r4, lr}
   2ad88:	b083      	sub	sp, #12
   2ad8a:	ab05      	add	r3, sp, #20
   2ad8c:	4c06      	ldr	r4, [pc, #24]	; (2ada8 <fiprintf+0x24>)
   2ad8e:	f853 2b04 	ldr.w	r2, [r3], #4
   2ad92:	9301      	str	r3, [sp, #4]
   2ad94:	4601      	mov	r1, r0
   2ad96:	6820      	ldr	r0, [r4, #0]
   2ad98:	f000 f912 	bl	2afc0 <_vfiprintf_r>
   2ad9c:	b003      	add	sp, #12
   2ad9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2ada2:	b003      	add	sp, #12
   2ada4:	4770      	bx	lr
   2ada6:	bf00      	nop
   2ada8:	100040c4 	.word	0x100040c4

0002adac <memmove>:
   2adac:	4288      	cmp	r0, r1
   2adae:	d90d      	bls.n	2adcc <memmove+0x20>
   2adb0:	188b      	adds	r3, r1, r2
   2adb2:	4283      	cmp	r3, r0
   2adb4:	d90a      	bls.n	2adcc <memmove+0x20>
   2adb6:	eb00 0c02 	add.w	ip, r0, r2
   2adba:	b1ba      	cbz	r2, 2adec <memmove+0x40>
   2adbc:	4662      	mov	r2, ip
   2adbe:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   2adc2:	f802 cd01 	strb.w	ip, [r2, #-1]!
   2adc6:	4299      	cmp	r1, r3
   2adc8:	d1f9      	bne.n	2adbe <memmove+0x12>
   2adca:	4770      	bx	lr
   2adcc:	2a0f      	cmp	r2, #15
   2adce:	d80e      	bhi.n	2adee <memmove+0x42>
   2add0:	4603      	mov	r3, r0
   2add2:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   2add6:	b14a      	cbz	r2, 2adec <memmove+0x40>
   2add8:	f10c 0c01 	add.w	ip, ip, #1
   2addc:	3b01      	subs	r3, #1
   2adde:	448c      	add	ip, r1
   2ade0:	f811 2b01 	ldrb.w	r2, [r1], #1
   2ade4:	f803 2f01 	strb.w	r2, [r3, #1]!
   2ade8:	4561      	cmp	r1, ip
   2adea:	d1f9      	bne.n	2ade0 <memmove+0x34>
   2adec:	4770      	bx	lr
   2adee:	ea40 0301 	orr.w	r3, r0, r1
   2adf2:	079b      	lsls	r3, r3, #30
   2adf4:	d150      	bne.n	2ae98 <memmove+0xec>
   2adf6:	f1a2 0310 	sub.w	r3, r2, #16
   2adfa:	b570      	push	{r4, r5, r6, lr}
   2adfc:	f101 0c20 	add.w	ip, r1, #32
   2ae00:	f023 050f 	bic.w	r5, r3, #15
   2ae04:	f101 0e10 	add.w	lr, r1, #16
   2ae08:	f100 0410 	add.w	r4, r0, #16
   2ae0c:	44ac      	add	ip, r5
   2ae0e:	091b      	lsrs	r3, r3, #4
   2ae10:	f85e 5c10 	ldr.w	r5, [lr, #-16]
   2ae14:	f844 5c10 	str.w	r5, [r4, #-16]
   2ae18:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   2ae1c:	f844 5c0c 	str.w	r5, [r4, #-12]
   2ae20:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   2ae24:	f844 5c08 	str.w	r5, [r4, #-8]
   2ae28:	f85e 5c04 	ldr.w	r5, [lr, #-4]
   2ae2c:	f844 5c04 	str.w	r5, [r4, #-4]
   2ae30:	f10e 0e10 	add.w	lr, lr, #16
   2ae34:	45e6      	cmp	lr, ip
   2ae36:	f104 0410 	add.w	r4, r4, #16
   2ae3a:	d1e9      	bne.n	2ae10 <memmove+0x64>
   2ae3c:	3301      	adds	r3, #1
   2ae3e:	f012 0f0c 	tst.w	r2, #12
   2ae42:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   2ae46:	f002 040f 	and.w	r4, r2, #15
   2ae4a:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   2ae4e:	d027      	beq.n	2aea0 <memmove+0xf4>
   2ae50:	3c04      	subs	r4, #4
   2ae52:	f024 0603 	bic.w	r6, r4, #3
   2ae56:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   2ae5a:	441e      	add	r6, r3
   2ae5c:	1f1c      	subs	r4, r3, #4
   2ae5e:	468e      	mov	lr, r1
   2ae60:	f85e 5b04 	ldr.w	r5, [lr], #4
   2ae64:	f844 5f04 	str.w	r5, [r4, #4]!
   2ae68:	42b4      	cmp	r4, r6
   2ae6a:	d1f9      	bne.n	2ae60 <memmove+0xb4>
   2ae6c:	f10c 0401 	add.w	r4, ip, #1
   2ae70:	f002 0203 	and.w	r2, r2, #3
   2ae74:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   2ae78:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   2ae7c:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   2ae80:	b14a      	cbz	r2, 2ae96 <memmove+0xea>
   2ae82:	f10c 0c01 	add.w	ip, ip, #1
   2ae86:	3b01      	subs	r3, #1
   2ae88:	448c      	add	ip, r1
   2ae8a:	f811 2b01 	ldrb.w	r2, [r1], #1
   2ae8e:	f803 2f01 	strb.w	r2, [r3, #1]!
   2ae92:	4561      	cmp	r1, ip
   2ae94:	d1f9      	bne.n	2ae8a <memmove+0xde>
   2ae96:	bd70      	pop	{r4, r5, r6, pc}
   2ae98:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   2ae9c:	4603      	mov	r3, r0
   2ae9e:	e79b      	b.n	2add8 <memmove+0x2c>
   2aea0:	4622      	mov	r2, r4
   2aea2:	e7eb      	b.n	2ae7c <memmove+0xd0>

0002aea4 <memset>:
   2aea4:	0783      	lsls	r3, r0, #30
   2aea6:	b530      	push	{r4, r5, lr}
   2aea8:	d048      	beq.n	2af3c <memset+0x98>
   2aeaa:	1e54      	subs	r4, r2, #1
   2aeac:	2a00      	cmp	r2, #0
   2aeae:	d03f      	beq.n	2af30 <memset+0x8c>
   2aeb0:	b2ca      	uxtb	r2, r1
   2aeb2:	4603      	mov	r3, r0
   2aeb4:	e001      	b.n	2aeba <memset+0x16>
   2aeb6:	3c01      	subs	r4, #1
   2aeb8:	d33a      	bcc.n	2af30 <memset+0x8c>
   2aeba:	f803 2b01 	strb.w	r2, [r3], #1
   2aebe:	079d      	lsls	r5, r3, #30
   2aec0:	d1f9      	bne.n	2aeb6 <memset+0x12>
   2aec2:	2c03      	cmp	r4, #3
   2aec4:	d92d      	bls.n	2af22 <memset+0x7e>
   2aec6:	b2cd      	uxtb	r5, r1
   2aec8:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   2aecc:	2c0f      	cmp	r4, #15
   2aece:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   2aed2:	d936      	bls.n	2af42 <memset+0x9e>
   2aed4:	f1a4 0210 	sub.w	r2, r4, #16
   2aed8:	f022 0c0f 	bic.w	ip, r2, #15
   2aedc:	f103 0e20 	add.w	lr, r3, #32
   2aee0:	44e6      	add	lr, ip
   2aee2:	ea4f 1c12 	mov.w	ip, r2, lsr #4
   2aee6:	f103 0210 	add.w	r2, r3, #16
   2aeea:	e942 5504 	strd	r5, r5, [r2, #-16]
   2aeee:	e942 5502 	strd	r5, r5, [r2, #-8]
   2aef2:	3210      	adds	r2, #16
   2aef4:	4572      	cmp	r2, lr
   2aef6:	d1f8      	bne.n	2aeea <memset+0x46>
   2aef8:	f10c 0201 	add.w	r2, ip, #1
   2aefc:	f014 0f0c 	tst.w	r4, #12
   2af00:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   2af04:	f004 0c0f 	and.w	ip, r4, #15
   2af08:	d013      	beq.n	2af32 <memset+0x8e>
   2af0a:	f1ac 0304 	sub.w	r3, ip, #4
   2af0e:	f023 0303 	bic.w	r3, r3, #3
   2af12:	3304      	adds	r3, #4
   2af14:	4413      	add	r3, r2
   2af16:	f842 5b04 	str.w	r5, [r2], #4
   2af1a:	4293      	cmp	r3, r2
   2af1c:	d1fb      	bne.n	2af16 <memset+0x72>
   2af1e:	f00c 0403 	and.w	r4, ip, #3
   2af22:	b12c      	cbz	r4, 2af30 <memset+0x8c>
   2af24:	b2ca      	uxtb	r2, r1
   2af26:	441c      	add	r4, r3
   2af28:	f803 2b01 	strb.w	r2, [r3], #1
   2af2c:	429c      	cmp	r4, r3
   2af2e:	d1fb      	bne.n	2af28 <memset+0x84>
   2af30:	bd30      	pop	{r4, r5, pc}
   2af32:	4664      	mov	r4, ip
   2af34:	4613      	mov	r3, r2
   2af36:	2c00      	cmp	r4, #0
   2af38:	d1f4      	bne.n	2af24 <memset+0x80>
   2af3a:	e7f9      	b.n	2af30 <memset+0x8c>
   2af3c:	4603      	mov	r3, r0
   2af3e:	4614      	mov	r4, r2
   2af40:	e7bf      	b.n	2aec2 <memset+0x1e>
   2af42:	461a      	mov	r2, r3
   2af44:	46a4      	mov	ip, r4
   2af46:	e7e0      	b.n	2af0a <memset+0x66>

0002af48 <__sprint_r.part.0>:
   2af48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2af4c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   2af4e:	049c      	lsls	r4, r3, #18
   2af50:	4690      	mov	r8, r2
   2af52:	d52d      	bpl.n	2afb0 <__sprint_r.part.0+0x68>
   2af54:	6893      	ldr	r3, [r2, #8]
   2af56:	6812      	ldr	r2, [r2, #0]
   2af58:	b343      	cbz	r3, 2afac <__sprint_r.part.0+0x64>
   2af5a:	468b      	mov	fp, r1
   2af5c:	4606      	mov	r6, r0
   2af5e:	f102 0908 	add.w	r9, r2, #8
   2af62:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   2af66:	ea5f 079a 	movs.w	r7, sl, lsr #2
   2af6a:	d015      	beq.n	2af98 <__sprint_r.part.0+0x50>
   2af6c:	3d04      	subs	r5, #4
   2af6e:	2400      	movs	r4, #0
   2af70:	e001      	b.n	2af76 <__sprint_r.part.0+0x2e>
   2af72:	42a7      	cmp	r7, r4
   2af74:	d00e      	beq.n	2af94 <__sprint_r.part.0+0x4c>
   2af76:	f855 1f04 	ldr.w	r1, [r5, #4]!
   2af7a:	465a      	mov	r2, fp
   2af7c:	4630      	mov	r0, r6
   2af7e:	f001 f9c7 	bl	2c310 <_fputwc_r>
   2af82:	1c43      	adds	r3, r0, #1
   2af84:	f104 0401 	add.w	r4, r4, #1
   2af88:	d1f3      	bne.n	2af72 <__sprint_r.part.0+0x2a>
   2af8a:	2300      	movs	r3, #0
   2af8c:	e9c8 3301 	strd	r3, r3, [r8, #4]
   2af90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2af94:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2af98:	f02a 0a03 	bic.w	sl, sl, #3
   2af9c:	eba3 030a 	sub.w	r3, r3, sl
   2afa0:	f8c8 3008 	str.w	r3, [r8, #8]
   2afa4:	f109 0908 	add.w	r9, r9, #8
   2afa8:	2b00      	cmp	r3, #0
   2afaa:	d1da      	bne.n	2af62 <__sprint_r.part.0+0x1a>
   2afac:	2000      	movs	r0, #0
   2afae:	e7ec      	b.n	2af8a <__sprint_r.part.0+0x42>
   2afb0:	f001 fb38 	bl	2c624 <__sfvwrite_r>
   2afb4:	2300      	movs	r3, #0
   2afb6:	e9c8 3301 	strd	r3, r3, [r8, #4]
   2afba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2afbe:	bf00      	nop

0002afc0 <_vfiprintf_r>:
   2afc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2afc4:	ed2d 8b02 	vpush	{d8}
   2afc8:	b0bb      	sub	sp, #236	; 0xec
   2afca:	ee08 1a10 	vmov	s16, r1
   2afce:	ee08 0a90 	vmov	s17, r0
   2afd2:	461c      	mov	r4, r3
   2afd4:	4617      	mov	r7, r2
   2afd6:	9303      	str	r3, [sp, #12]
   2afd8:	b118      	cbz	r0, 2afe2 <_vfiprintf_r+0x22>
   2afda:	6b83      	ldr	r3, [r0, #56]	; 0x38
   2afdc:	2b00      	cmp	r3, #0
   2afde:	f000 829c 	beq.w	2b51a <_vfiprintf_r+0x55a>
   2afe2:	ee18 2a10 	vmov	r2, s16
   2afe6:	6e53      	ldr	r3, [r2, #100]	; 0x64
   2afe8:	07de      	lsls	r6, r3, #31
   2afea:	f140 819e 	bpl.w	2b32a <_vfiprintf_r+0x36a>
   2afee:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   2aff2:	b28a      	uxth	r2, r1
   2aff4:	0490      	lsls	r0, r2, #18
   2aff6:	d409      	bmi.n	2b00c <_vfiprintf_r+0x4c>
   2aff8:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   2affc:	ee18 1a10 	vmov	r1, s16
   2b000:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   2b002:	818a      	strh	r2, [r1, #12]
   2b004:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   2b008:	b292      	uxth	r2, r2
   2b00a:	664b      	str	r3, [r1, #100]	; 0x64
   2b00c:	0711      	lsls	r1, r2, #28
   2b00e:	f140 80f8 	bpl.w	2b202 <_vfiprintf_r+0x242>
   2b012:	ee18 3a10 	vmov	r3, s16
   2b016:	691b      	ldr	r3, [r3, #16]
   2b018:	2b00      	cmp	r3, #0
   2b01a:	f000 80f2 	beq.w	2b202 <_vfiprintf_r+0x242>
   2b01e:	f002 031a 	and.w	r3, r2, #26
   2b022:	2b0a      	cmp	r3, #10
   2b024:	f000 80fe 	beq.w	2b224 <_vfiprintf_r+0x264>
   2b028:	ab11      	add	r3, sp, #68	; 0x44
   2b02a:	930e      	str	r3, [sp, #56]	; 0x38
   2b02c:	2300      	movs	r3, #0
   2b02e:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
   2b032:	e9cd 3308 	strd	r3, r3, [sp, #32]
   2b036:	9306      	str	r3, [sp, #24]
   2b038:	f10d 0944 	add.w	r9, sp, #68	; 0x44
   2b03c:	9307      	str	r3, [sp, #28]
   2b03e:	9302      	str	r3, [sp, #8]
   2b040:	783b      	ldrb	r3, [r7, #0]
   2b042:	2b00      	cmp	r3, #0
   2b044:	f000 815b 	beq.w	2b2fe <_vfiprintf_r+0x33e>
   2b048:	463c      	mov	r4, r7
   2b04a:	e004      	b.n	2b056 <_vfiprintf_r+0x96>
   2b04c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   2b050:	2b00      	cmp	r3, #0
   2b052:	f000 8134 	beq.w	2b2be <_vfiprintf_r+0x2fe>
   2b056:	2b25      	cmp	r3, #37	; 0x25
   2b058:	d1f8      	bne.n	2b04c <_vfiprintf_r+0x8c>
   2b05a:	1be5      	subs	r5, r4, r7
   2b05c:	f040 8131 	bne.w	2b2c2 <_vfiprintf_r+0x302>
   2b060:	7823      	ldrb	r3, [r4, #0]
   2b062:	2b00      	cmp	r3, #0
   2b064:	f000 814b 	beq.w	2b2fe <_vfiprintf_r+0x33e>
   2b068:	f04f 0300 	mov.w	r3, #0
   2b06c:	2500      	movs	r5, #0
   2b06e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   2b072:	1c67      	adds	r7, r4, #1
   2b074:	7863      	ldrb	r3, [r4, #1]
   2b076:	9501      	str	r5, [sp, #4]
   2b078:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   2b07c:	242b      	movs	r4, #43	; 0x2b
   2b07e:	3701      	adds	r7, #1
   2b080:	f1a3 0220 	sub.w	r2, r3, #32
   2b084:	2a5a      	cmp	r2, #90	; 0x5a
   2b086:	f200 8161 	bhi.w	2b34c <_vfiprintf_r+0x38c>
   2b08a:	e8df f012 	tbh	[pc, r2, lsl #1]
   2b08e:	02ab      	.short	0x02ab
   2b090:	015f015f 	.word	0x015f015f
   2b094:	015f02a7 	.word	0x015f02a7
   2b098:	015f015f 	.word	0x015f015f
   2b09c:	015f006a 	.word	0x015f006a
   2b0a0:	0249015f 	.word	0x0249015f
   2b0a4:	015f027e 	.word	0x015f027e
   2b0a8:	02b90254 	.word	0x02b90254
   2b0ac:	02b5015f 	.word	0x02b5015f
   2b0b0:	005b005b 	.word	0x005b005b
   2b0b4:	005b005b 	.word	0x005b005b
   2b0b8:	005b005b 	.word	0x005b005b
   2b0bc:	005b005b 	.word	0x005b005b
   2b0c0:	015f005b 	.word	0x015f005b
   2b0c4:	015f015f 	.word	0x015f015f
   2b0c8:	015f015f 	.word	0x015f015f
   2b0cc:	015f015f 	.word	0x015f015f
   2b0d0:	015f015f 	.word	0x015f015f
   2b0d4:	00840236 	.word	0x00840236
   2b0d8:	015f015f 	.word	0x015f015f
   2b0dc:	015f015f 	.word	0x015f015f
   2b0e0:	015f015f 	.word	0x015f015f
   2b0e4:	015f015f 	.word	0x015f015f
   2b0e8:	015f015f 	.word	0x015f015f
   2b0ec:	015f00e5 	.word	0x015f00e5
   2b0f0:	015f015f 	.word	0x015f015f
   2b0f4:	015f021a 	.word	0x015f021a
   2b0f8:	015f026c 	.word	0x015f026c
   2b0fc:	054c015f 	.word	0x054c015f
   2b100:	015f015f 	.word	0x015f015f
   2b104:	015f015f 	.word	0x015f015f
   2b108:	015f015f 	.word	0x015f015f
   2b10c:	015f015f 	.word	0x015f015f
   2b110:	015f015f 	.word	0x015f015f
   2b114:	00860236 	.word	0x00860236
   2b118:	015f015f 	.word	0x015f015f
   2b11c:	0262015f 	.word	0x0262015f
   2b120:	00800086 	.word	0x00800086
   2b124:	0258015f 	.word	0x0258015f
   2b128:	0294015f 	.word	0x0294015f
   2b12c:	028200e7 	.word	0x028200e7
   2b130:	015f0080 	.word	0x015f0080
   2b134:	007e021a 	.word	0x007e021a
   2b138:	015f056c 	.word	0x015f056c
   2b13c:	056e015f 	.word	0x056e015f
   2b140:	007e015f 	.word	0x007e015f
   2b144:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   2b148:	2100      	movs	r1, #0
   2b14a:	f817 3b01 	ldrb.w	r3, [r7], #1
   2b14e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   2b152:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   2b156:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   2b15a:	2a09      	cmp	r2, #9
   2b15c:	d9f5      	bls.n	2b14a <_vfiprintf_r+0x18a>
   2b15e:	9101      	str	r1, [sp, #4]
   2b160:	e78e      	b.n	2b080 <_vfiprintf_r+0xc0>
   2b162:	ee18 0a90 	vmov	r0, s17
   2b166:	f001 fbff 	bl	2c968 <_localeconv_r>
   2b16a:	6843      	ldr	r3, [r0, #4]
   2b16c:	9308      	str	r3, [sp, #32]
   2b16e:	4618      	mov	r0, r3
   2b170:	f7ed faa6 	bl	186c0 <strlen>
   2b174:	9009      	str	r0, [sp, #36]	; 0x24
   2b176:	4606      	mov	r6, r0
   2b178:	ee18 0a90 	vmov	r0, s17
   2b17c:	f001 fbf4 	bl	2c968 <_localeconv_r>
   2b180:	6883      	ldr	r3, [r0, #8]
   2b182:	9307      	str	r3, [sp, #28]
   2b184:	2e00      	cmp	r6, #0
   2b186:	f040 84a9 	bne.w	2badc <_vfiprintf_r+0xb1c>
   2b18a:	783b      	ldrb	r3, [r7, #0]
   2b18c:	e777      	b.n	2b07e <_vfiprintf_r+0xbe>
   2b18e:	783b      	ldrb	r3, [r7, #0]
   2b190:	f045 0520 	orr.w	r5, r5, #32
   2b194:	e773      	b.n	2b07e <_vfiprintf_r+0xbe>
   2b196:	f045 0510 	orr.w	r5, r5, #16
   2b19a:	06ac      	lsls	r4, r5, #26
   2b19c:	9e03      	ldr	r6, [sp, #12]
   2b19e:	f140 8182 	bpl.w	2b4a6 <_vfiprintf_r+0x4e6>
   2b1a2:	3607      	adds	r6, #7
   2b1a4:	f026 0607 	bic.w	r6, r6, #7
   2b1a8:	4632      	mov	r2, r6
   2b1aa:	6873      	ldr	r3, [r6, #4]
   2b1ac:	f852 6b08 	ldr.w	r6, [r2], #8
   2b1b0:	9203      	str	r2, [sp, #12]
   2b1b2:	4698      	mov	r8, r3
   2b1b4:	2b00      	cmp	r3, #0
   2b1b6:	f2c0 8459 	blt.w	2ba6c <_vfiprintf_r+0xaac>
   2b1ba:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   2b1be:	f000 853e 	beq.w	2bc3e <_vfiprintf_r+0xc7e>
   2b1c2:	ea56 0308 	orrs.w	r3, r6, r8
   2b1c6:	f025 0a80 	bic.w	sl, r5, #128	; 0x80
   2b1ca:	f000 8434 	beq.w	2ba36 <_vfiprintf_r+0xa76>
   2b1ce:	2e0a      	cmp	r6, #10
   2b1d0:	f178 0300 	sbcs.w	r3, r8, #0
   2b1d4:	f080 84eb 	bcs.w	2bbae <_vfiprintf_r+0xbee>
   2b1d8:	3630      	adds	r6, #48	; 0x30
   2b1da:	2301      	movs	r3, #1
   2b1dc:	f88d 60e7 	strb.w	r6, [sp, #231]	; 0xe7
   2b1e0:	4655      	mov	r5, sl
   2b1e2:	9300      	str	r3, [sp, #0]
   2b1e4:	f10d 04e7 	add.w	r4, sp, #231	; 0xe7
   2b1e8:	9a00      	ldr	r2, [sp, #0]
   2b1ea:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   2b1ee:	455a      	cmp	r2, fp
   2b1f0:	bfb8      	it	lt
   2b1f2:	465a      	movlt	r2, fp
   2b1f4:	4690      	mov	r8, r2
   2b1f6:	2b00      	cmp	r3, #0
   2b1f8:	f000 80b7 	beq.w	2b36a <_vfiprintf_r+0x3aa>
   2b1fc:	f102 0801 	add.w	r8, r2, #1
   2b200:	e0b3      	b.n	2b36a <_vfiprintf_r+0x3aa>
   2b202:	ee18 1a10 	vmov	r1, s16
   2b206:	ee18 0a90 	vmov	r0, s17
   2b20a:	ee18 5a10 	vmov	r5, s16
   2b20e:	f000 fe15 	bl	2be3c <__swsetup_r>
   2b212:	2800      	cmp	r0, #0
   2b214:	f040 85ac 	bne.w	2bd70 <_vfiprintf_r+0xdb0>
   2b218:	89aa      	ldrh	r2, [r5, #12]
   2b21a:	f002 031a 	and.w	r3, r2, #26
   2b21e:	2b0a      	cmp	r3, #10
   2b220:	f47f af02 	bne.w	2b028 <_vfiprintf_r+0x68>
   2b224:	ee18 1a10 	vmov	r1, s16
   2b228:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   2b22c:	2b00      	cmp	r3, #0
   2b22e:	f6ff aefb 	blt.w	2b028 <_vfiprintf_r+0x68>
   2b232:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   2b234:	07de      	lsls	r6, r3, #31
   2b236:	d402      	bmi.n	2b23e <_vfiprintf_r+0x27e>
   2b238:	0595      	lsls	r5, r2, #22
   2b23a:	f140 8577 	bpl.w	2bd2c <_vfiprintf_r+0xd6c>
   2b23e:	ee18 1a10 	vmov	r1, s16
   2b242:	ee18 0a90 	vmov	r0, s17
   2b246:	4623      	mov	r3, r4
   2b248:	463a      	mov	r2, r7
   2b24a:	b03b      	add	sp, #236	; 0xec
   2b24c:	ecbd 8b02 	vpop	{d8}
   2b250:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b254:	f000 bdb2 	b.w	2bdbc <__sbprintf>
   2b258:	f045 0510 	orr.w	r5, r5, #16
   2b25c:	f015 0820 	ands.w	r8, r5, #32
   2b260:	f000 8112 	beq.w	2b488 <_vfiprintf_r+0x4c8>
   2b264:	9e03      	ldr	r6, [sp, #12]
   2b266:	3607      	adds	r6, #7
   2b268:	f026 0607 	bic.w	r6, r6, #7
   2b26c:	4633      	mov	r3, r6
   2b26e:	f8d6 8004 	ldr.w	r8, [r6, #4]
   2b272:	f853 6b08 	ldr.w	r6, [r3], #8
   2b276:	9303      	str	r3, [sp, #12]
   2b278:	f425 6a80 	bic.w	sl, r5, #1024	; 0x400
   2b27c:	2300      	movs	r3, #0
   2b27e:	f04f 0200 	mov.w	r2, #0
   2b282:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   2b286:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   2b28a:	f000 81d3 	beq.w	2b634 <_vfiprintf_r+0x674>
   2b28e:	ea56 0208 	orrs.w	r2, r6, r8
   2b292:	f02a 0580 	bic.w	r5, sl, #128	; 0x80
   2b296:	f040 81cc 	bne.w	2b632 <_vfiprintf_r+0x672>
   2b29a:	f1bb 0f00 	cmp.w	fp, #0
   2b29e:	f040 84d1 	bne.w	2bc44 <_vfiprintf_r+0xc84>
   2b2a2:	2b00      	cmp	r3, #0
   2b2a4:	f040 83cc 	bne.w	2ba40 <_vfiprintf_r+0xa80>
   2b2a8:	f01a 0301 	ands.w	r3, sl, #1
   2b2ac:	9300      	str	r3, [sp, #0]
   2b2ae:	f000 83fc 	beq.w	2baaa <_vfiprintf_r+0xaea>
   2b2b2:	2330      	movs	r3, #48	; 0x30
   2b2b4:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
   2b2b8:	f10d 04e7 	add.w	r4, sp, #231	; 0xe7
   2b2bc:	e794      	b.n	2b1e8 <_vfiprintf_r+0x228>
   2b2be:	1be5      	subs	r5, r4, r7
   2b2c0:	d01d      	beq.n	2b2fe <_vfiprintf_r+0x33e>
   2b2c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2b2c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2b2c6:	3301      	adds	r3, #1
   2b2c8:	442a      	add	r2, r5
   2b2ca:	2b07      	cmp	r3, #7
   2b2cc:	e9c9 7500 	strd	r7, r5, [r9]
   2b2d0:	9210      	str	r2, [sp, #64]	; 0x40
   2b2d2:	930f      	str	r3, [sp, #60]	; 0x3c
   2b2d4:	dc05      	bgt.n	2b2e2 <_vfiprintf_r+0x322>
   2b2d6:	f109 0908 	add.w	r9, r9, #8
   2b2da:	9b02      	ldr	r3, [sp, #8]
   2b2dc:	442b      	add	r3, r5
   2b2de:	9302      	str	r3, [sp, #8]
   2b2e0:	e6be      	b.n	2b060 <_vfiprintf_r+0xa0>
   2b2e2:	2a00      	cmp	r2, #0
   2b2e4:	f000 83a3 	beq.w	2ba2e <_vfiprintf_r+0xa6e>
   2b2e8:	ee18 1a10 	vmov	r1, s16
   2b2ec:	ee18 0a90 	vmov	r0, s17
   2b2f0:	aa0e      	add	r2, sp, #56	; 0x38
   2b2f2:	f7ff fe29 	bl	2af48 <__sprint_r.part.0>
   2b2f6:	b940      	cbnz	r0, 2b30a <_vfiprintf_r+0x34a>
   2b2f8:	f10d 0944 	add.w	r9, sp, #68	; 0x44
   2b2fc:	e7ed      	b.n	2b2da <_vfiprintf_r+0x31a>
   2b2fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2b300:	2b00      	cmp	r3, #0
   2b302:	f040 8524 	bne.w	2bd4e <_vfiprintf_r+0xd8e>
   2b306:	2300      	movs	r3, #0
   2b308:	930f      	str	r3, [sp, #60]	; 0x3c
   2b30a:	ee18 2a10 	vmov	r2, s16
   2b30e:	6e53      	ldr	r3, [r2, #100]	; 0x64
   2b310:	07d9      	lsls	r1, r3, #31
   2b312:	f140 80ae 	bpl.w	2b472 <_vfiprintf_r+0x4b2>
   2b316:	8993      	ldrh	r3, [r2, #12]
   2b318:	065b      	lsls	r3, r3, #25
   2b31a:	f100 8532 	bmi.w	2bd82 <_vfiprintf_r+0xdc2>
   2b31e:	9802      	ldr	r0, [sp, #8]
   2b320:	b03b      	add	sp, #236	; 0xec
   2b322:	ecbd 8b02 	vpop	{d8}
   2b326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b32a:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   2b32e:	058d      	lsls	r5, r1, #22
   2b330:	ee18 3a10 	vmov	r3, s16
   2b334:	b28a      	uxth	r2, r1
   2b336:	f53f ae5d 	bmi.w	2aff4 <_vfiprintf_r+0x34>
   2b33a:	ee18 5a10 	vmov	r5, s16
   2b33e:	6d98      	ldr	r0, [r3, #88]	; 0x58
   2b340:	f001 fb1a 	bl	2c978 <__retarget_lock_acquire_recursive>
   2b344:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   2b348:	b28a      	uxth	r2, r1
   2b34a:	e653      	b.n	2aff4 <_vfiprintf_r+0x34>
   2b34c:	2b00      	cmp	r3, #0
   2b34e:	d0d6      	beq.n	2b2fe <_vfiprintf_r+0x33e>
   2b350:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   2b354:	f04f 0801 	mov.w	r8, #1
   2b358:	f04f 0300 	mov.w	r3, #0
   2b35c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   2b360:	f8cd 8000 	str.w	r8, [sp]
   2b364:	ac21      	add	r4, sp, #132	; 0x84
   2b366:	f04f 0b00 	mov.w	fp, #0
   2b36a:	f015 0302 	ands.w	r3, r5, #2
   2b36e:	9304      	str	r3, [sp, #16]
   2b370:	bf18      	it	ne
   2b372:	f108 0802 	addne.w	r8, r8, #2
   2b376:	f015 0384 	ands.w	r3, r5, #132	; 0x84
   2b37a:	9305      	str	r3, [sp, #20]
   2b37c:	d105      	bne.n	2b38a <_vfiprintf_r+0x3ca>
   2b37e:	9b01      	ldr	r3, [sp, #4]
   2b380:	eba3 0608 	sub.w	r6, r3, r8
   2b384:	2e00      	cmp	r6, #0
   2b386:	f300 827f 	bgt.w	2b888 <_vfiprintf_r+0x8c8>
   2b38a:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
   2b38e:	1c50      	adds	r0, r2, #1
   2b390:	f89d 6033 	ldrb.w	r6, [sp, #51]	; 0x33
   2b394:	b18e      	cbz	r6, 2b3ba <_vfiprintf_r+0x3fa>
   2b396:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   2b39a:	3101      	adds	r1, #1
   2b39c:	f8c9 2000 	str.w	r2, [r9]
   2b3a0:	2807      	cmp	r0, #7
   2b3a2:	f04f 0201 	mov.w	r2, #1
   2b3a6:	e9cd 010f 	strd	r0, r1, [sp, #60]	; 0x3c
   2b3aa:	f8c9 2004 	str.w	r2, [r9, #4]
   2b3ae:	f300 824c 	bgt.w	2b84a <_vfiprintf_r+0x88a>
   2b3b2:	4602      	mov	r2, r0
   2b3b4:	f109 0908 	add.w	r9, r9, #8
   2b3b8:	3001      	adds	r0, #1
   2b3ba:	9b04      	ldr	r3, [sp, #16]
   2b3bc:	b1eb      	cbz	r3, 2b3fa <_vfiprintf_r+0x43a>
   2b3be:	ab0d      	add	r3, sp, #52	; 0x34
   2b3c0:	3102      	adds	r1, #2
   2b3c2:	f8c9 3000 	str.w	r3, [r9]
   2b3c6:	2807      	cmp	r0, #7
   2b3c8:	f04f 0302 	mov.w	r3, #2
   2b3cc:	e9cd 010f 	strd	r0, r1, [sp, #60]	; 0x3c
   2b3d0:	f8c9 3004 	str.w	r3, [r9, #4]
   2b3d4:	f340 8253 	ble.w	2b87e <_vfiprintf_r+0x8be>
   2b3d8:	2900      	cmp	r1, #0
   2b3da:	f000 8323 	beq.w	2ba24 <_vfiprintf_r+0xa64>
   2b3de:	ee18 1a10 	vmov	r1, s16
   2b3e2:	ee18 0a90 	vmov	r0, s17
   2b3e6:	aa0e      	add	r2, sp, #56	; 0x38
   2b3e8:	f7ff fdae 	bl	2af48 <__sprint_r.part.0>
   2b3ec:	2800      	cmp	r0, #0
   2b3ee:	d18c      	bne.n	2b30a <_vfiprintf_r+0x34a>
   2b3f0:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
   2b3f4:	f10d 0944 	add.w	r9, sp, #68	; 0x44
   2b3f8:	1c50      	adds	r0, r2, #1
   2b3fa:	9b05      	ldr	r3, [sp, #20]
   2b3fc:	2b80      	cmp	r3, #128	; 0x80
   2b3fe:	f000 815a 	beq.w	2b6b6 <_vfiprintf_r+0x6f6>
   2b402:	9b00      	ldr	r3, [sp, #0]
   2b404:	ebab 0603 	sub.w	r6, fp, r3
   2b408:	2e00      	cmp	r6, #0
   2b40a:	f300 81bd 	bgt.w	2b788 <_vfiprintf_r+0x7c8>
   2b40e:	9b00      	ldr	r3, [sp, #0]
   2b410:	f8c9 4000 	str.w	r4, [r9]
   2b414:	4419      	add	r1, r3
   2b416:	2807      	cmp	r0, #7
   2b418:	e9cd 010f 	strd	r0, r1, [sp, #60]	; 0x3c
   2b41c:	f8c9 3004 	str.w	r3, [r9, #4]
   2b420:	f340 8146 	ble.w	2b6b0 <_vfiprintf_r+0x6f0>
   2b424:	2900      	cmp	r1, #0
   2b426:	f000 8289 	beq.w	2b93c <_vfiprintf_r+0x97c>
   2b42a:	ee18 1a10 	vmov	r1, s16
   2b42e:	ee18 0a90 	vmov	r0, s17
   2b432:	aa0e      	add	r2, sp, #56	; 0x38
   2b434:	f7ff fd88 	bl	2af48 <__sprint_r.part.0>
   2b438:	2800      	cmp	r0, #0
   2b43a:	f47f af66 	bne.w	2b30a <_vfiprintf_r+0x34a>
   2b43e:	9910      	ldr	r1, [sp, #64]	; 0x40
   2b440:	f10d 0944 	add.w	r9, sp, #68	; 0x44
   2b444:	0768      	lsls	r0, r5, #29
   2b446:	d505      	bpl.n	2b454 <_vfiprintf_r+0x494>
   2b448:	9b01      	ldr	r3, [sp, #4]
   2b44a:	eba3 0408 	sub.w	r4, r3, r8
   2b44e:	2c00      	cmp	r4, #0
   2b450:	f300 827e 	bgt.w	2b950 <_vfiprintf_r+0x990>
   2b454:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   2b458:	4542      	cmp	r2, r8
   2b45a:	bfac      	ite	ge
   2b45c:	189b      	addge	r3, r3, r2
   2b45e:	4443      	addlt	r3, r8
   2b460:	9302      	str	r3, [sp, #8]
   2b462:	2900      	cmp	r1, #0
   2b464:	f040 81e0 	bne.w	2b828 <_vfiprintf_r+0x868>
   2b468:	2300      	movs	r3, #0
   2b46a:	930f      	str	r3, [sp, #60]	; 0x3c
   2b46c:	f10d 0944 	add.w	r9, sp, #68	; 0x44
   2b470:	e5e6      	b.n	2b040 <_vfiprintf_r+0x80>
   2b472:	8993      	ldrh	r3, [r2, #12]
   2b474:	059a      	lsls	r2, r3, #22
   2b476:	f53f af4f 	bmi.w	2b318 <_vfiprintf_r+0x358>
   2b47a:	ee18 4a10 	vmov	r4, s16
   2b47e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2b480:	f001 fa7c 	bl	2c97c <__retarget_lock_release_recursive>
   2b484:	89a3      	ldrh	r3, [r4, #12]
   2b486:	e747      	b.n	2b318 <_vfiprintf_r+0x358>
   2b488:	f015 0310 	ands.w	r3, r5, #16
   2b48c:	f040 833e 	bne.w	2bb0c <_vfiprintf_r+0xb4c>
   2b490:	f015 0240 	ands.w	r2, r5, #64	; 0x40
   2b494:	f000 83fd 	beq.w	2bc92 <_vfiprintf_r+0xcd2>
   2b498:	9a03      	ldr	r2, [sp, #12]
   2b49a:	f852 6b04 	ldr.w	r6, [r2], #4
   2b49e:	9203      	str	r2, [sp, #12]
   2b4a0:	4698      	mov	r8, r3
   2b4a2:	b2b6      	uxth	r6, r6
   2b4a4:	e6e8      	b.n	2b278 <_vfiprintf_r+0x2b8>
   2b4a6:	f856 3b04 	ldr.w	r3, [r6], #4
   2b4aa:	9603      	str	r6, [sp, #12]
   2b4ac:	06e8      	lsls	r0, r5, #27
   2b4ae:	f100 8308 	bmi.w	2bac2 <_vfiprintf_r+0xb02>
   2b4b2:	0669      	lsls	r1, r5, #25
   2b4b4:	f140 8302 	bpl.w	2babc <_vfiprintf_r+0xafc>
   2b4b8:	f343 38c0 	sbfx	r8, r3, #15, #1
   2b4bc:	b21e      	sxth	r6, r3
   2b4be:	4643      	mov	r3, r8
   2b4c0:	e678      	b.n	2b1b4 <_vfiprintf_r+0x1f4>
   2b4c2:	9e03      	ldr	r6, [sp, #12]
   2b4c4:	f856 4b04 	ldr.w	r4, [r6], #4
   2b4c8:	f04f 0300 	mov.w	r3, #0
   2b4cc:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   2b4d0:	2c00      	cmp	r4, #0
   2b4d2:	f000 83c5 	beq.w	2bc60 <_vfiprintf_r+0xca0>
   2b4d6:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   2b4da:	f000 8349 	beq.w	2bb70 <_vfiprintf_r+0xbb0>
   2b4de:	465a      	mov	r2, fp
   2b4e0:	2100      	movs	r1, #0
   2b4e2:	4620      	mov	r0, r4
   2b4e4:	f7ed f89c 	bl	18620 <memchr>
   2b4e8:	2800      	cmp	r0, #0
   2b4ea:	f000 8424 	beq.w	2bd36 <_vfiprintf_r+0xd76>
   2b4ee:	1b03      	subs	r3, r0, r4
   2b4f0:	9300      	str	r3, [sp, #0]
   2b4f2:	9603      	str	r6, [sp, #12]
   2b4f4:	f04f 0b00 	mov.w	fp, #0
   2b4f8:	e676      	b.n	2b1e8 <_vfiprintf_r+0x228>
   2b4fa:	9e03      	ldr	r6, [sp, #12]
   2b4fc:	f04f 0300 	mov.w	r3, #0
   2b500:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   2b504:	f04f 0801 	mov.w	r8, #1
   2b508:	f856 3b04 	ldr.w	r3, [r6], #4
   2b50c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   2b510:	9603      	str	r6, [sp, #12]
   2b512:	f8cd 8000 	str.w	r8, [sp]
   2b516:	ac21      	add	r4, sp, #132	; 0x84
   2b518:	e725      	b.n	2b366 <_vfiprintf_r+0x3a6>
   2b51a:	f000 fe13 	bl	2c144 <__sinit>
   2b51e:	e560      	b.n	2afe2 <_vfiprintf_r+0x22>
   2b520:	9b03      	ldr	r3, [sp, #12]
   2b522:	f853 2b04 	ldr.w	r2, [r3], #4
   2b526:	9201      	str	r2, [sp, #4]
   2b528:	2a00      	cmp	r2, #0
   2b52a:	f280 82ba 	bge.w	2baa2 <_vfiprintf_r+0xae2>
   2b52e:	9a01      	ldr	r2, [sp, #4]
   2b530:	9303      	str	r3, [sp, #12]
   2b532:	4252      	negs	r2, r2
   2b534:	9201      	str	r2, [sp, #4]
   2b536:	783b      	ldrb	r3, [r7, #0]
   2b538:	f045 0504 	orr.w	r5, r5, #4
   2b53c:	e59f      	b.n	2b07e <_vfiprintf_r+0xbe>
   2b53e:	783b      	ldrb	r3, [r7, #0]
   2b540:	2b6c      	cmp	r3, #108	; 0x6c
   2b542:	bf03      	ittte	eq
   2b544:	787b      	ldrbeq	r3, [r7, #1]
   2b546:	f045 0520 	orreq.w	r5, r5, #32
   2b54a:	3701      	addeq	r7, #1
   2b54c:	f045 0510 	orrne.w	r5, r5, #16
   2b550:	e595      	b.n	2b07e <_vfiprintf_r+0xbe>
   2b552:	783b      	ldrb	r3, [r7, #0]
   2b554:	2b68      	cmp	r3, #104	; 0x68
   2b556:	bf03      	ittte	eq
   2b558:	787b      	ldrbeq	r3, [r7, #1]
   2b55a:	f445 7500 	orreq.w	r5, r5, #512	; 0x200
   2b55e:	3701      	addeq	r7, #1
   2b560:	f045 0540 	orrne.w	r5, r5, #64	; 0x40
   2b564:	e58b      	b.n	2b07e <_vfiprintf_r+0xbe>
   2b566:	f045 0a10 	orr.w	sl, r5, #16
   2b56a:	f01a 0820 	ands.w	r8, sl, #32
   2b56e:	f000 826e 	beq.w	2ba4e <_vfiprintf_r+0xa8e>
   2b572:	9e03      	ldr	r6, [sp, #12]
   2b574:	3607      	adds	r6, #7
   2b576:	f026 0607 	bic.w	r6, r6, #7
   2b57a:	4633      	mov	r3, r6
   2b57c:	f8d6 8004 	ldr.w	r8, [r6, #4]
   2b580:	f853 6b08 	ldr.w	r6, [r3], #8
   2b584:	9303      	str	r3, [sp, #12]
   2b586:	2301      	movs	r3, #1
   2b588:	e679      	b.n	2b27e <_vfiprintf_r+0x2be>
   2b58a:	783b      	ldrb	r3, [r7, #0]
   2b58c:	f88d 4033 	strb.w	r4, [sp, #51]	; 0x33
   2b590:	e575      	b.n	2b07e <_vfiprintf_r+0xbe>
   2b592:	9b03      	ldr	r3, [sp, #12]
   2b594:	f853 6b04 	ldr.w	r6, [r3], #4
   2b598:	9303      	str	r3, [sp, #12]
   2b59a:	2330      	movs	r3, #48	; 0x30
   2b59c:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   2b5a0:	2378      	movs	r3, #120	; 0x78
   2b5a2:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
   2b5a6:	4bc2      	ldr	r3, [pc, #776]	; (2b8b0 <_vfiprintf_r+0x8f0>)
   2b5a8:	9306      	str	r3, [sp, #24]
   2b5aa:	f045 0a02 	orr.w	sl, r5, #2
   2b5ae:	f04f 0800 	mov.w	r8, #0
   2b5b2:	2302      	movs	r3, #2
   2b5b4:	e663      	b.n	2b27e <_vfiprintf_r+0x2be>
   2b5b6:	06ae      	lsls	r6, r5, #26
   2b5b8:	f100 829e 	bmi.w	2baf8 <_vfiprintf_r+0xb38>
   2b5bc:	06ec      	lsls	r4, r5, #27
   2b5be:	f100 8347 	bmi.w	2bc50 <_vfiprintf_r+0xc90>
   2b5c2:	0668      	lsls	r0, r5, #25
   2b5c4:	f100 83a4 	bmi.w	2bd10 <_vfiprintf_r+0xd50>
   2b5c8:	05a9      	lsls	r1, r5, #22
   2b5ca:	f140 8341 	bpl.w	2bc50 <_vfiprintf_r+0xc90>
   2b5ce:	9e03      	ldr	r6, [sp, #12]
   2b5d0:	9a02      	ldr	r2, [sp, #8]
   2b5d2:	f856 3b04 	ldr.w	r3, [r6], #4
   2b5d6:	9603      	str	r6, [sp, #12]
   2b5d8:	701a      	strb	r2, [r3, #0]
   2b5da:	e531      	b.n	2b040 <_vfiprintf_r+0x80>
   2b5dc:	783b      	ldrb	r3, [r7, #0]
   2b5de:	f045 0501 	orr.w	r5, r5, #1
   2b5e2:	e54c      	b.n	2b07e <_vfiprintf_r+0xbe>
   2b5e4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   2b5e8:	2b00      	cmp	r3, #0
   2b5ea:	f47f adce 	bne.w	2b18a <_vfiprintf_r+0x1ca>
   2b5ee:	2320      	movs	r3, #32
   2b5f0:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   2b5f4:	783b      	ldrb	r3, [r7, #0]
   2b5f6:	e542      	b.n	2b07e <_vfiprintf_r+0xbe>
   2b5f8:	783b      	ldrb	r3, [r7, #0]
   2b5fa:	f045 0580 	orr.w	r5, r5, #128	; 0x80
   2b5fe:	e53e      	b.n	2b07e <_vfiprintf_r+0xbe>
   2b600:	4639      	mov	r1, r7
   2b602:	f811 3b01 	ldrb.w	r3, [r1], #1
   2b606:	2b2a      	cmp	r3, #42	; 0x2a
   2b608:	f000 83c4 	beq.w	2bd94 <_vfiprintf_r+0xdd4>
   2b60c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   2b610:	2a09      	cmp	r2, #9
   2b612:	460f      	mov	r7, r1
   2b614:	f04f 0b00 	mov.w	fp, #0
   2b618:	f63f ad32 	bhi.w	2b080 <_vfiprintf_r+0xc0>
   2b61c:	f817 3b01 	ldrb.w	r3, [r7], #1
   2b620:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
   2b624:	eb02 0b4b 	add.w	fp, r2, fp, lsl #1
   2b628:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   2b62c:	2a09      	cmp	r2, #9
   2b62e:	d9f5      	bls.n	2b61c <_vfiprintf_r+0x65c>
   2b630:	e526      	b.n	2b080 <_vfiprintf_r+0xc0>
   2b632:	46aa      	mov	sl, r5
   2b634:	2b01      	cmp	r3, #1
   2b636:	f43f adca 	beq.w	2b1ce <_vfiprintf_r+0x20e>
   2b63a:	2b02      	cmp	r3, #2
   2b63c:	ac3a      	add	r4, sp, #232	; 0xe8
   2b63e:	d112      	bne.n	2b666 <_vfiprintf_r+0x6a6>
   2b640:	9a06      	ldr	r2, [sp, #24]
   2b642:	f006 030f 	and.w	r3, r6, #15
   2b646:	0936      	lsrs	r6, r6, #4
   2b648:	5cd3      	ldrb	r3, [r2, r3]
   2b64a:	f804 3d01 	strb.w	r3, [r4, #-1]!
   2b64e:	ea46 7608 	orr.w	r6, r6, r8, lsl #28
   2b652:	ea4f 1818 	mov.w	r8, r8, lsr #4
   2b656:	ea56 0308 	orrs.w	r3, r6, r8
   2b65a:	d1f2      	bne.n	2b642 <_vfiprintf_r+0x682>
   2b65c:	ab3a      	add	r3, sp, #232	; 0xe8
   2b65e:	1b1b      	subs	r3, r3, r4
   2b660:	4655      	mov	r5, sl
   2b662:	9300      	str	r3, [sp, #0]
   2b664:	e5c0      	b.n	2b1e8 <_vfiprintf_r+0x228>
   2b666:	f006 0307 	and.w	r3, r6, #7
   2b66a:	08f6      	lsrs	r6, r6, #3
   2b66c:	ea46 7648 	orr.w	r6, r6, r8, lsl #29
   2b670:	ea4f 08d8 	mov.w	r8, r8, lsr #3
   2b674:	3330      	adds	r3, #48	; 0x30
   2b676:	ea56 0108 	orrs.w	r1, r6, r8
   2b67a:	4622      	mov	r2, r4
   2b67c:	f804 3d01 	strb.w	r3, [r4, #-1]!
   2b680:	d1f1      	bne.n	2b666 <_vfiprintf_r+0x6a6>
   2b682:	f01a 0f01 	tst.w	sl, #1
   2b686:	d0e9      	beq.n	2b65c <_vfiprintf_r+0x69c>
   2b688:	2b30      	cmp	r3, #48	; 0x30
   2b68a:	d0e7      	beq.n	2b65c <_vfiprintf_r+0x69c>
   2b68c:	2330      	movs	r3, #48	; 0x30
   2b68e:	3a02      	subs	r2, #2
   2b690:	f804 3c01 	strb.w	r3, [r4, #-1]
   2b694:	ab3a      	add	r3, sp, #232	; 0xe8
   2b696:	1a9b      	subs	r3, r3, r2
   2b698:	4655      	mov	r5, sl
   2b69a:	9300      	str	r3, [sp, #0]
   2b69c:	4614      	mov	r4, r2
   2b69e:	e5a3      	b.n	2b1e8 <_vfiprintf_r+0x228>
   2b6a0:	9900      	ldr	r1, [sp, #0]
   2b6a2:	9411      	str	r4, [sp, #68]	; 0x44
   2b6a4:	2301      	movs	r3, #1
   2b6a6:	9112      	str	r1, [sp, #72]	; 0x48
   2b6a8:	9110      	str	r1, [sp, #64]	; 0x40
   2b6aa:	930f      	str	r3, [sp, #60]	; 0x3c
   2b6ac:	f10d 0944 	add.w	r9, sp, #68	; 0x44
   2b6b0:	f109 0908 	add.w	r9, r9, #8
   2b6b4:	e6c6      	b.n	2b444 <_vfiprintf_r+0x484>
   2b6b6:	9b01      	ldr	r3, [sp, #4]
   2b6b8:	eba3 0608 	sub.w	r6, r3, r8
   2b6bc:	2e00      	cmp	r6, #0
   2b6be:	f77f aea0 	ble.w	2b402 <_vfiprintf_r+0x442>
   2b6c2:	2e10      	cmp	r6, #16
   2b6c4:	f340 8362 	ble.w	2bd8c <_vfiprintf_r+0xdcc>
   2b6c8:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 2b8b4 <_vfiprintf_r+0x8f4>
   2b6cc:	4653      	mov	r3, sl
   2b6ce:	e9cd 4504 	strd	r4, r5, [sp, #16]
   2b6d2:	46ba      	mov	sl, r7
   2b6d4:	ee18 4a90 	vmov	r4, s17
   2b6d8:	ee18 5a10 	vmov	r5, s16
   2b6dc:	4608      	mov	r0, r1
   2b6de:	4696      	mov	lr, r2
   2b6e0:	461f      	mov	r7, r3
   2b6e2:	e007      	b.n	2b6f4 <_vfiprintf_r+0x734>
   2b6e4:	f10e 0c02 	add.w	ip, lr, #2
   2b6e8:	f109 0908 	add.w	r9, r9, #8
   2b6ec:	4696      	mov	lr, r2
   2b6ee:	3e10      	subs	r6, #16
   2b6f0:	2e10      	cmp	r6, #16
   2b6f2:	dd1f      	ble.n	2b734 <_vfiprintf_r+0x774>
   2b6f4:	f10e 0201 	add.w	r2, lr, #1
   2b6f8:	3010      	adds	r0, #16
   2b6fa:	2310      	movs	r3, #16
   2b6fc:	2a07      	cmp	r2, #7
   2b6fe:	e9cd 200f 	strd	r2, r0, [sp, #60]	; 0x3c
   2b702:	f8c9 7000 	str.w	r7, [r9]
   2b706:	f8c9 3004 	str.w	r3, [r9, #4]
   2b70a:	ddeb      	ble.n	2b6e4 <_vfiprintf_r+0x724>
   2b70c:	aa0e      	add	r2, sp, #56	; 0x38
   2b70e:	2800      	cmp	r0, #0
   2b710:	f000 8095 	beq.w	2b83e <_vfiprintf_r+0x87e>
   2b714:	4629      	mov	r1, r5
   2b716:	4620      	mov	r0, r4
   2b718:	f10d 0944 	add.w	r9, sp, #68	; 0x44
   2b71c:	f7ff fc14 	bl	2af48 <__sprint_r.part.0>
   2b720:	2800      	cmp	r0, #0
   2b722:	f47f adf2 	bne.w	2b30a <_vfiprintf_r+0x34a>
   2b726:	e9dd e00f 	ldrd	lr, r0, [sp, #60]	; 0x3c
   2b72a:	3e10      	subs	r6, #16
   2b72c:	2e10      	cmp	r6, #16
   2b72e:	f10e 0c01 	add.w	ip, lr, #1
   2b732:	dcdf      	bgt.n	2b6f4 <_vfiprintf_r+0x734>
   2b734:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   2b738:	463b      	mov	r3, r7
   2b73a:	4601      	mov	r1, r0
   2b73c:	4657      	mov	r7, sl
   2b73e:	469a      	mov	sl, r3
   2b740:	4431      	add	r1, r6
   2b742:	f1bc 0f07 	cmp.w	ip, #7
   2b746:	e9cd c10f 	strd	ip, r1, [sp, #60]	; 0x3c
   2b74a:	f8c9 a000 	str.w	sl, [r9]
   2b74e:	f8c9 6004 	str.w	r6, [r9, #4]
   2b752:	f340 81ad 	ble.w	2bab0 <_vfiprintf_r+0xaf0>
   2b756:	2900      	cmp	r1, #0
   2b758:	f000 82ca 	beq.w	2bcf0 <_vfiprintf_r+0xd30>
   2b75c:	ee18 1a10 	vmov	r1, s16
   2b760:	ee18 0a90 	vmov	r0, s17
   2b764:	aa0e      	add	r2, sp, #56	; 0x38
   2b766:	f7ff fbef 	bl	2af48 <__sprint_r.part.0>
   2b76a:	2800      	cmp	r0, #0
   2b76c:	f47f adcd 	bne.w	2b30a <_vfiprintf_r+0x34a>
   2b770:	9b00      	ldr	r3, [sp, #0]
   2b772:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
   2b776:	ebab 0603 	sub.w	r6, fp, r3
   2b77a:	2e00      	cmp	r6, #0
   2b77c:	f102 0001 	add.w	r0, r2, #1
   2b780:	f10d 0944 	add.w	r9, sp, #68	; 0x44
   2b784:	f77f ae43 	ble.w	2b40e <_vfiprintf_r+0x44e>
   2b788:	2e10      	cmp	r6, #16
   2b78a:	f8df a128 	ldr.w	sl, [pc, #296]	; 2b8b4 <_vfiprintf_r+0x8f4>
   2b78e:	dd37      	ble.n	2b800 <_vfiprintf_r+0x840>
   2b790:	4653      	mov	r3, sl
   2b792:	e9cd 4504 	strd	r4, r5, [sp, #16]
   2b796:	46ba      	mov	sl, r7
   2b798:	ee18 4a90 	vmov	r4, s17
   2b79c:	ee18 5a10 	vmov	r5, s16
   2b7a0:	f04f 0b10 	mov.w	fp, #16
   2b7a4:	4608      	mov	r0, r1
   2b7a6:	4694      	mov	ip, r2
   2b7a8:	461f      	mov	r7, r3
   2b7aa:	e007      	b.n	2b7bc <_vfiprintf_r+0x7fc>
   2b7ac:	f10c 0e02 	add.w	lr, ip, #2
   2b7b0:	f109 0908 	add.w	r9, r9, #8
   2b7b4:	4694      	mov	ip, r2
   2b7b6:	3e10      	subs	r6, #16
   2b7b8:	2e10      	cmp	r6, #16
   2b7ba:	dd1a      	ble.n	2b7f2 <_vfiprintf_r+0x832>
   2b7bc:	f10c 0201 	add.w	r2, ip, #1
   2b7c0:	3010      	adds	r0, #16
   2b7c2:	2a07      	cmp	r2, #7
   2b7c4:	e9c9 7b00 	strd	r7, fp, [r9]
   2b7c8:	e9cd 200f 	strd	r2, r0, [sp, #60]	; 0x3c
   2b7cc:	ddee      	ble.n	2b7ac <_vfiprintf_r+0x7ec>
   2b7ce:	aa0e      	add	r2, sp, #56	; 0x38
   2b7d0:	b320      	cbz	r0, 2b81c <_vfiprintf_r+0x85c>
   2b7d2:	4629      	mov	r1, r5
   2b7d4:	4620      	mov	r0, r4
   2b7d6:	f10d 0944 	add.w	r9, sp, #68	; 0x44
   2b7da:	f7ff fbb5 	bl	2af48 <__sprint_r.part.0>
   2b7de:	2800      	cmp	r0, #0
   2b7e0:	f47f ad93 	bne.w	2b30a <_vfiprintf_r+0x34a>
   2b7e4:	e9dd c00f 	ldrd	ip, r0, [sp, #60]	; 0x3c
   2b7e8:	3e10      	subs	r6, #16
   2b7ea:	2e10      	cmp	r6, #16
   2b7ec:	f10c 0e01 	add.w	lr, ip, #1
   2b7f0:	dce4      	bgt.n	2b7bc <_vfiprintf_r+0x7fc>
   2b7f2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   2b7f6:	463b      	mov	r3, r7
   2b7f8:	4601      	mov	r1, r0
   2b7fa:	4657      	mov	r7, sl
   2b7fc:	4670      	mov	r0, lr
   2b7fe:	469a      	mov	sl, r3
   2b800:	4431      	add	r1, r6
   2b802:	2807      	cmp	r0, #7
   2b804:	e9cd 010f 	strd	r0, r1, [sp, #60]	; 0x3c
   2b808:	f8c9 a000 	str.w	sl, [r9]
   2b80c:	f8c9 6004 	str.w	r6, [r9, #4]
   2b810:	f300 80f2 	bgt.w	2b9f8 <_vfiprintf_r+0xa38>
   2b814:	f109 0908 	add.w	r9, r9, #8
   2b818:	3001      	adds	r0, #1
   2b81a:	e5f8      	b.n	2b40e <_vfiprintf_r+0x44e>
   2b81c:	f04f 0e01 	mov.w	lr, #1
   2b820:	4684      	mov	ip, r0
   2b822:	f10d 0944 	add.w	r9, sp, #68	; 0x44
   2b826:	e7c6      	b.n	2b7b6 <_vfiprintf_r+0x7f6>
   2b828:	ee18 1a10 	vmov	r1, s16
   2b82c:	ee18 0a90 	vmov	r0, s17
   2b830:	aa0e      	add	r2, sp, #56	; 0x38
   2b832:	f7ff fb89 	bl	2af48 <__sprint_r.part.0>
   2b836:	2800      	cmp	r0, #0
   2b838:	f43f ae16 	beq.w	2b468 <_vfiprintf_r+0x4a8>
   2b83c:	e565      	b.n	2b30a <_vfiprintf_r+0x34a>
   2b83e:	f04f 0c01 	mov.w	ip, #1
   2b842:	4686      	mov	lr, r0
   2b844:	f10d 0944 	add.w	r9, sp, #68	; 0x44
   2b848:	e751      	b.n	2b6ee <_vfiprintf_r+0x72e>
   2b84a:	2900      	cmp	r1, #0
   2b84c:	f000 80e7 	beq.w	2ba1e <_vfiprintf_r+0xa5e>
   2b850:	ee18 1a10 	vmov	r1, s16
   2b854:	ee18 0a90 	vmov	r0, s17
   2b858:	aa0e      	add	r2, sp, #56	; 0x38
   2b85a:	f7ff fb75 	bl	2af48 <__sprint_r.part.0>
   2b85e:	2800      	cmp	r0, #0
   2b860:	f47f ad53 	bne.w	2b30a <_vfiprintf_r+0x34a>
   2b864:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
   2b868:	f10d 0944 	add.w	r9, sp, #68	; 0x44
   2b86c:	1c50      	adds	r0, r2, #1
   2b86e:	e5a4      	b.n	2b3ba <_vfiprintf_r+0x3fa>
   2b870:	2102      	movs	r1, #2
   2b872:	ab0d      	add	r3, sp, #52	; 0x34
   2b874:	9112      	str	r1, [sp, #72]	; 0x48
   2b876:	9311      	str	r3, [sp, #68]	; 0x44
   2b878:	2001      	movs	r0, #1
   2b87a:	f10d 0944 	add.w	r9, sp, #68	; 0x44
   2b87e:	4602      	mov	r2, r0
   2b880:	f109 0908 	add.w	r9, r9, #8
   2b884:	1c50      	adds	r0, r2, #1
   2b886:	e5b8      	b.n	2b3fa <_vfiprintf_r+0x43a>
   2b888:	2e10      	cmp	r6, #16
   2b88a:	f340 825a 	ble.w	2bd42 <_vfiprintf_r+0xd82>
   2b88e:	e9dd c10f 	ldrd	ip, r1, [sp, #60]	; 0x3c
   2b892:	f8df a024 	ldr.w	sl, [pc, #36]	; 2b8b8 <_vfiprintf_r+0x8f8>
   2b896:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   2b89a:	950b      	str	r5, [sp, #44]	; 0x2c
   2b89c:	46a3      	mov	fp, r4
   2b89e:	ee18 5a10 	vmov	r5, s16
   2b8a2:	4654      	mov	r4, sl
   2b8a4:	2310      	movs	r3, #16
   2b8a6:	ee18 aa90 	vmov	sl, s17
   2b8aa:	4608      	mov	r0, r1
   2b8ac:	e00e      	b.n	2b8cc <_vfiprintf_r+0x90c>
   2b8ae:	bf00      	nop
   2b8b0:	00041e20 	.word	0x00041e20
   2b8b4:	00041e4c 	.word	0x00041e4c
   2b8b8:	00041e3c 	.word	0x00041e3c
   2b8bc:	f10c 0e02 	add.w	lr, ip, #2
   2b8c0:	f109 0908 	add.w	r9, r9, #8
   2b8c4:	4694      	mov	ip, r2
   2b8c6:	3e10      	subs	r6, #16
   2b8c8:	2e10      	cmp	r6, #16
   2b8ca:	dd1c      	ble.n	2b906 <_vfiprintf_r+0x946>
   2b8cc:	f10c 0201 	add.w	r2, ip, #1
   2b8d0:	3010      	adds	r0, #16
   2b8d2:	2a07      	cmp	r2, #7
   2b8d4:	e9c9 4300 	strd	r4, r3, [r9]
   2b8d8:	e9cd 200f 	strd	r2, r0, [sp, #60]	; 0x3c
   2b8dc:	ddee      	ble.n	2b8bc <_vfiprintf_r+0x8fc>
   2b8de:	aa0e      	add	r2, sp, #56	; 0x38
   2b8e0:	b330      	cbz	r0, 2b930 <_vfiprintf_r+0x970>
   2b8e2:	4629      	mov	r1, r5
   2b8e4:	4650      	mov	r0, sl
   2b8e6:	f10d 0944 	add.w	r9, sp, #68	; 0x44
   2b8ea:	f7ff fb2d 	bl	2af48 <__sprint_r.part.0>
   2b8ee:	2800      	cmp	r0, #0
   2b8f0:	f47f ad0b 	bne.w	2b30a <_vfiprintf_r+0x34a>
   2b8f4:	e9dd c00f 	ldrd	ip, r0, [sp, #60]	; 0x3c
   2b8f8:	3e10      	subs	r6, #16
   2b8fa:	2e10      	cmp	r6, #16
   2b8fc:	f10c 0e01 	add.w	lr, ip, #1
   2b900:	f04f 0310 	mov.w	r3, #16
   2b904:	dce2      	bgt.n	2b8cc <_vfiprintf_r+0x90c>
   2b906:	46a2      	mov	sl, r4
   2b908:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2b90a:	465c      	mov	r4, fp
   2b90c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   2b910:	4601      	mov	r1, r0
   2b912:	4672      	mov	r2, lr
   2b914:	4431      	add	r1, r6
   2b916:	2a07      	cmp	r2, #7
   2b918:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
   2b91c:	f8c9 a000 	str.w	sl, [r9]
   2b920:	f8c9 6004 	str.w	r6, [r9, #4]
   2b924:	f300 80ab 	bgt.w	2ba7e <_vfiprintf_r+0xabe>
   2b928:	f109 0908 	add.w	r9, r9, #8
   2b92c:	1c50      	adds	r0, r2, #1
   2b92e:	e52f      	b.n	2b390 <_vfiprintf_r+0x3d0>
   2b930:	4684      	mov	ip, r0
   2b932:	f04f 0e01 	mov.w	lr, #1
   2b936:	f10d 0944 	add.w	r9, sp, #68	; 0x44
   2b93a:	e7c4      	b.n	2b8c6 <_vfiprintf_r+0x906>
   2b93c:	076c      	lsls	r4, r5, #29
   2b93e:	910f      	str	r1, [sp, #60]	; 0x3c
   2b940:	d552      	bpl.n	2b9e8 <_vfiprintf_r+0xa28>
   2b942:	9b01      	ldr	r3, [sp, #4]
   2b944:	eba3 0408 	sub.w	r4, r3, r8
   2b948:	2c00      	cmp	r4, #0
   2b94a:	dd4d      	ble.n	2b9e8 <_vfiprintf_r+0xa28>
   2b94c:	f10d 0944 	add.w	r9, sp, #68	; 0x44
   2b950:	2c10      	cmp	r4, #16
   2b952:	f340 8208 	ble.w	2bd66 <_vfiprintf_r+0xda6>
   2b956:	f8df a45c 	ldr.w	sl, [pc, #1116]	; 2bdb4 <_vfiprintf_r+0xdf4>
   2b95a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2b95c:	460b      	mov	r3, r1
   2b95e:	46bb      	mov	fp, r7
   2b960:	4649      	mov	r1, r9
   2b962:	4657      	mov	r7, sl
   2b964:	ee18 9a10 	vmov	r9, s16
   2b968:	ee18 aa90 	vmov	sl, s17
   2b96c:	2510      	movs	r5, #16
   2b96e:	e005      	b.n	2b97c <_vfiprintf_r+0x9bc>
   2b970:	1c90      	adds	r0, r2, #2
   2b972:	3108      	adds	r1, #8
   2b974:	4632      	mov	r2, r6
   2b976:	3c10      	subs	r4, #16
   2b978:	2c10      	cmp	r4, #16
   2b97a:	dd18      	ble.n	2b9ae <_vfiprintf_r+0x9ee>
   2b97c:	1c56      	adds	r6, r2, #1
   2b97e:	3310      	adds	r3, #16
   2b980:	2e07      	cmp	r6, #7
   2b982:	e9c1 7500 	strd	r7, r5, [r1]
   2b986:	e9cd 630f 	strd	r6, r3, [sp, #60]	; 0x3c
   2b98a:	ddf1      	ble.n	2b970 <_vfiprintf_r+0x9b0>
   2b98c:	aa0e      	add	r2, sp, #56	; 0x38
   2b98e:	b33b      	cbz	r3, 2b9e0 <_vfiprintf_r+0xa20>
   2b990:	4649      	mov	r1, r9
   2b992:	4650      	mov	r0, sl
   2b994:	f7ff fad8 	bl	2af48 <__sprint_r.part.0>
   2b998:	2800      	cmp	r0, #0
   2b99a:	f47f acb6 	bne.w	2b30a <_vfiprintf_r+0x34a>
   2b99e:	e9dd 230f 	ldrd	r2, r3, [sp, #60]	; 0x3c
   2b9a2:	3c10      	subs	r4, #16
   2b9a4:	2c10      	cmp	r4, #16
   2b9a6:	f102 0001 	add.w	r0, r2, #1
   2b9aa:	a911      	add	r1, sp, #68	; 0x44
   2b9ac:	dce6      	bgt.n	2b97c <_vfiprintf_r+0x9bc>
   2b9ae:	4689      	mov	r9, r1
   2b9b0:	46ba      	mov	sl, r7
   2b9b2:	4619      	mov	r1, r3
   2b9b4:	465f      	mov	r7, fp
   2b9b6:	4421      	add	r1, r4
   2b9b8:	2807      	cmp	r0, #7
   2b9ba:	e9c9 a400 	strd	sl, r4, [r9]
   2b9be:	e9cd 010f 	strd	r0, r1, [sp, #60]	; 0x3c
   2b9c2:	f77f ad47 	ble.w	2b454 <_vfiprintf_r+0x494>
   2b9c6:	b179      	cbz	r1, 2b9e8 <_vfiprintf_r+0xa28>
   2b9c8:	ee18 1a10 	vmov	r1, s16
   2b9cc:	ee18 0a90 	vmov	r0, s17
   2b9d0:	aa0e      	add	r2, sp, #56	; 0x38
   2b9d2:	f7ff fab9 	bl	2af48 <__sprint_r.part.0>
   2b9d6:	2800      	cmp	r0, #0
   2b9d8:	f47f ac97 	bne.w	2b30a <_vfiprintf_r+0x34a>
   2b9dc:	9910      	ldr	r1, [sp, #64]	; 0x40
   2b9de:	e539      	b.n	2b454 <_vfiprintf_r+0x494>
   2b9e0:	2001      	movs	r0, #1
   2b9e2:	461a      	mov	r2, r3
   2b9e4:	a911      	add	r1, sp, #68	; 0x44
   2b9e6:	e7c6      	b.n	2b976 <_vfiprintf_r+0x9b6>
   2b9e8:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   2b9ec:	4542      	cmp	r2, r8
   2b9ee:	bfac      	ite	ge
   2b9f0:	189b      	addge	r3, r3, r2
   2b9f2:	4443      	addlt	r3, r8
   2b9f4:	9302      	str	r3, [sp, #8]
   2b9f6:	e537      	b.n	2b468 <_vfiprintf_r+0x4a8>
   2b9f8:	2900      	cmp	r1, #0
   2b9fa:	f43f ae51 	beq.w	2b6a0 <_vfiprintf_r+0x6e0>
   2b9fe:	ee18 1a10 	vmov	r1, s16
   2ba02:	ee18 0a90 	vmov	r0, s17
   2ba06:	aa0e      	add	r2, sp, #56	; 0x38
   2ba08:	f7ff fa9e 	bl	2af48 <__sprint_r.part.0>
   2ba0c:	2800      	cmp	r0, #0
   2ba0e:	f47f ac7c 	bne.w	2b30a <_vfiprintf_r+0x34a>
   2ba12:	980f      	ldr	r0, [sp, #60]	; 0x3c
   2ba14:	9910      	ldr	r1, [sp, #64]	; 0x40
   2ba16:	3001      	adds	r0, #1
   2ba18:	f10d 0944 	add.w	r9, sp, #68	; 0x44
   2ba1c:	e4f7      	b.n	2b40e <_vfiprintf_r+0x44e>
   2ba1e:	9b04      	ldr	r3, [sp, #16]
   2ba20:	2b00      	cmp	r3, #0
   2ba22:	d179      	bne.n	2bb18 <_vfiprintf_r+0xb58>
   2ba24:	2001      	movs	r0, #1
   2ba26:	460a      	mov	r2, r1
   2ba28:	f10d 0944 	add.w	r9, sp, #68	; 0x44
   2ba2c:	e4e5      	b.n	2b3fa <_vfiprintf_r+0x43a>
   2ba2e:	920f      	str	r2, [sp, #60]	; 0x3c
   2ba30:	f10d 0944 	add.w	r9, sp, #68	; 0x44
   2ba34:	e451      	b.n	2b2da <_vfiprintf_r+0x31a>
   2ba36:	f1bb 0f00 	cmp.w	fp, #0
   2ba3a:	f47f abcd 	bne.w	2b1d8 <_vfiprintf_r+0x218>
   2ba3e:	4655      	mov	r5, sl
   2ba40:	f04f 0b00 	mov.w	fp, #0
   2ba44:	f8cd b000 	str.w	fp, [sp]
   2ba48:	ac3a      	add	r4, sp, #232	; 0xe8
   2ba4a:	f7ff bbcd 	b.w	2b1e8 <_vfiprintf_r+0x228>
   2ba4e:	f01a 0310 	ands.w	r3, sl, #16
   2ba52:	d13c      	bne.n	2bace <_vfiprintf_r+0xb0e>
   2ba54:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
   2ba58:	f000 810c 	beq.w	2bc74 <_vfiprintf_r+0xcb4>
   2ba5c:	9a03      	ldr	r2, [sp, #12]
   2ba5e:	f852 6b04 	ldr.w	r6, [r2], #4
   2ba62:	9203      	str	r2, [sp, #12]
   2ba64:	4698      	mov	r8, r3
   2ba66:	b2b6      	uxth	r6, r6
   2ba68:	2301      	movs	r3, #1
   2ba6a:	e408      	b.n	2b27e <_vfiprintf_r+0x2be>
   2ba6c:	232d      	movs	r3, #45	; 0x2d
   2ba6e:	4276      	negs	r6, r6
   2ba70:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   2ba74:	eb68 0848 	sbc.w	r8, r8, r8, lsl #1
   2ba78:	46aa      	mov	sl, r5
   2ba7a:	2301      	movs	r3, #1
   2ba7c:	e403      	b.n	2b286 <_vfiprintf_r+0x2c6>
   2ba7e:	2900      	cmp	r1, #0
   2ba80:	d07f      	beq.n	2bb82 <_vfiprintf_r+0xbc2>
   2ba82:	ee18 1a10 	vmov	r1, s16
   2ba86:	ee18 0a90 	vmov	r0, s17
   2ba8a:	aa0e      	add	r2, sp, #56	; 0x38
   2ba8c:	f7ff fa5c 	bl	2af48 <__sprint_r.part.0>
   2ba90:	2800      	cmp	r0, #0
   2ba92:	f47f ac3a 	bne.w	2b30a <_vfiprintf_r+0x34a>
   2ba96:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
   2ba9a:	f10d 0944 	add.w	r9, sp, #68	; 0x44
   2ba9e:	1c50      	adds	r0, r2, #1
   2baa0:	e476      	b.n	2b390 <_vfiprintf_r+0x3d0>
   2baa2:	9303      	str	r3, [sp, #12]
   2baa4:	783b      	ldrb	r3, [r7, #0]
   2baa6:	f7ff baea 	b.w	2b07e <_vfiprintf_r+0xbe>
   2baaa:	ac3a      	add	r4, sp, #232	; 0xe8
   2baac:	f7ff bb9c 	b.w	2b1e8 <_vfiprintf_r+0x228>
   2bab0:	f109 0908 	add.w	r9, r9, #8
   2bab4:	f10c 0001 	add.w	r0, ip, #1
   2bab8:	4662      	mov	r2, ip
   2baba:	e4a2      	b.n	2b402 <_vfiprintf_r+0x442>
   2babc:	05aa      	lsls	r2, r5, #22
   2babe:	f100 812f 	bmi.w	2bd20 <_vfiprintf_r+0xd60>
   2bac2:	ea4f 78e3 	mov.w	r8, r3, asr #31
   2bac6:	461e      	mov	r6, r3
   2bac8:	4643      	mov	r3, r8
   2baca:	f7ff bb73 	b.w	2b1b4 <_vfiprintf_r+0x1f4>
   2bace:	9b03      	ldr	r3, [sp, #12]
   2bad0:	f853 6b04 	ldr.w	r6, [r3], #4
   2bad4:	9303      	str	r3, [sp, #12]
   2bad6:	2301      	movs	r3, #1
   2bad8:	f7ff bbd1 	b.w	2b27e <_vfiprintf_r+0x2be>
   2badc:	9b07      	ldr	r3, [sp, #28]
   2bade:	2b00      	cmp	r3, #0
   2bae0:	f43f ab53 	beq.w	2b18a <_vfiprintf_r+0x1ca>
   2bae4:	9b07      	ldr	r3, [sp, #28]
   2bae6:	781b      	ldrb	r3, [r3, #0]
   2bae8:	2b00      	cmp	r3, #0
   2baea:	f43f ab4e 	beq.w	2b18a <_vfiprintf_r+0x1ca>
   2baee:	783b      	ldrb	r3, [r7, #0]
   2baf0:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
   2baf4:	f7ff bac3 	b.w	2b07e <_vfiprintf_r+0xbe>
   2baf8:	e9dd 1602 	ldrd	r1, r6, [sp, #8]
   2bafc:	f856 2b04 	ldr.w	r2, [r6], #4
   2bb00:	9603      	str	r6, [sp, #12]
   2bb02:	17cb      	asrs	r3, r1, #31
   2bb04:	e9c2 1300 	strd	r1, r3, [r2]
   2bb08:	f7ff ba9a 	b.w	2b040 <_vfiprintf_r+0x80>
   2bb0c:	9b03      	ldr	r3, [sp, #12]
   2bb0e:	f853 6b04 	ldr.w	r6, [r3], #4
   2bb12:	9303      	str	r3, [sp, #12]
   2bb14:	f7ff bbb0 	b.w	2b278 <_vfiprintf_r+0x2b8>
   2bb18:	2102      	movs	r1, #2
   2bb1a:	ab0d      	add	r3, sp, #52	; 0x34
   2bb1c:	9112      	str	r1, [sp, #72]	; 0x48
   2bb1e:	9311      	str	r3, [sp, #68]	; 0x44
   2bb20:	f10d 0944 	add.w	r9, sp, #68	; 0x44
   2bb24:	e6ac      	b.n	2b880 <_vfiprintf_r+0x8c0>
   2bb26:	4aa0      	ldr	r2, [pc, #640]	; (2bda8 <_vfiprintf_r+0xde8>)
   2bb28:	9206      	str	r2, [sp, #24]
   2bb2a:	f015 0820 	ands.w	r8, r5, #32
   2bb2e:	d036      	beq.n	2bb9e <_vfiprintf_r+0xbde>
   2bb30:	9e03      	ldr	r6, [sp, #12]
   2bb32:	3607      	adds	r6, #7
   2bb34:	f026 0607 	bic.w	r6, r6, #7
   2bb38:	4632      	mov	r2, r6
   2bb3a:	f8d6 8004 	ldr.w	r8, [r6, #4]
   2bb3e:	f852 6b08 	ldr.w	r6, [r2], #8
   2bb42:	9203      	str	r2, [sp, #12]
   2bb44:	07ea      	lsls	r2, r5, #31
   2bb46:	d509      	bpl.n	2bb5c <_vfiprintf_r+0xb9c>
   2bb48:	ea56 0208 	orrs.w	r2, r6, r8
   2bb4c:	d006      	beq.n	2bb5c <_vfiprintf_r+0xb9c>
   2bb4e:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
   2bb52:	2330      	movs	r3, #48	; 0x30
   2bb54:	f045 0502 	orr.w	r5, r5, #2
   2bb58:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   2bb5c:	f425 6a80 	bic.w	sl, r5, #1024	; 0x400
   2bb60:	2302      	movs	r3, #2
   2bb62:	f7ff bb8c 	b.w	2b27e <_vfiprintf_r+0x2be>
   2bb66:	46aa      	mov	sl, r5
   2bb68:	e4ff      	b.n	2b56a <_vfiprintf_r+0x5aa>
   2bb6a:	4a90      	ldr	r2, [pc, #576]	; (2bdac <_vfiprintf_r+0xdec>)
   2bb6c:	9206      	str	r2, [sp, #24]
   2bb6e:	e7dc      	b.n	2bb2a <_vfiprintf_r+0xb6a>
   2bb70:	4620      	mov	r0, r4
   2bb72:	9603      	str	r6, [sp, #12]
   2bb74:	f7ec fda4 	bl	186c0 <strlen>
   2bb78:	f04f 0b00 	mov.w	fp, #0
   2bb7c:	9000      	str	r0, [sp, #0]
   2bb7e:	f7ff bb33 	b.w	2b1e8 <_vfiprintf_r+0x228>
   2bb82:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
   2bb86:	2a00      	cmp	r2, #0
   2bb88:	f000 80b8 	beq.w	2bcfc <_vfiprintf_r+0xd3c>
   2bb8c:	2001      	movs	r0, #1
   2bb8e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   2bb92:	9012      	str	r0, [sp, #72]	; 0x48
   2bb94:	9211      	str	r2, [sp, #68]	; 0x44
   2bb96:	f10d 0944 	add.w	r9, sp, #68	; 0x44
   2bb9a:	4601      	mov	r1, r0
   2bb9c:	e409      	b.n	2b3b2 <_vfiprintf_r+0x3f2>
   2bb9e:	f015 0210 	ands.w	r2, r5, #16
   2bba2:	d042      	beq.n	2bc2a <_vfiprintf_r+0xc6a>
   2bba4:	9a03      	ldr	r2, [sp, #12]
   2bba6:	f852 6b04 	ldr.w	r6, [r2], #4
   2bbaa:	9203      	str	r2, [sp, #12]
   2bbac:	e7ca      	b.n	2bb44 <_vfiprintf_r+0xb84>
   2bbae:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
   2bbb2:	f8cd b000 	str.w	fp, [sp]
   2bbb6:	f8cd 9010 	str.w	r9, [sp, #16]
   2bbba:	46bb      	mov	fp, r7
   2bbbc:	f8dd 901c 	ldr.w	r9, [sp, #28]
   2bbc0:	2500      	movs	r5, #0
   2bbc2:	ac3a      	add	r4, sp, #232	; 0xe8
   2bbc4:	461f      	mov	r7, r3
   2bbc6:	e009      	b.n	2bbdc <_vfiprintf_r+0xc1c>
   2bbc8:	4630      	mov	r0, r6
   2bbca:	4641      	mov	r1, r8
   2bbcc:	f7ed fb1a 	bl	19204 <__aeabi_uldivmod>
   2bbd0:	2e0a      	cmp	r6, #10
   2bbd2:	f178 0300 	sbcs.w	r3, r8, #0
   2bbd6:	d31b      	bcc.n	2bc10 <_vfiprintf_r+0xc50>
   2bbd8:	4606      	mov	r6, r0
   2bbda:	4688      	mov	r8, r1
   2bbdc:	4630      	mov	r0, r6
   2bbde:	4641      	mov	r1, r8
   2bbe0:	220a      	movs	r2, #10
   2bbe2:	2300      	movs	r3, #0
   2bbe4:	f7ed fb0e 	bl	19204 <__aeabi_uldivmod>
   2bbe8:	4611      	mov	r1, r2
   2bbea:	3130      	adds	r1, #48	; 0x30
   2bbec:	f804 1c01 	strb.w	r1, [r4, #-1]
   2bbf0:	220a      	movs	r2, #10
   2bbf2:	2300      	movs	r3, #0
   2bbf4:	3c01      	subs	r4, #1
   2bbf6:	3501      	adds	r5, #1
   2bbf8:	2f00      	cmp	r7, #0
   2bbfa:	d0e5      	beq.n	2bbc8 <_vfiprintf_r+0xc08>
   2bbfc:	f899 1000 	ldrb.w	r1, [r9]
   2bc00:	42a9      	cmp	r1, r5
   2bc02:	d1e1      	bne.n	2bbc8 <_vfiprintf_r+0xc08>
   2bc04:	2dff      	cmp	r5, #255	; 0xff
   2bc06:	d0df      	beq.n	2bbc8 <_vfiprintf_r+0xc08>
   2bc08:	2e0a      	cmp	r6, #10
   2bc0a:	f178 0300 	sbcs.w	r3, r8, #0
   2bc0e:	d25b      	bcs.n	2bcc8 <_vfiprintf_r+0xd08>
   2bc10:	ab3a      	add	r3, sp, #232	; 0xe8
   2bc12:	1b1b      	subs	r3, r3, r4
   2bc14:	f8cd 901c 	str.w	r9, [sp, #28]
   2bc18:	465f      	mov	r7, fp
   2bc1a:	f8dd 9010 	ldr.w	r9, [sp, #16]
   2bc1e:	f8dd b000 	ldr.w	fp, [sp]
   2bc22:	9300      	str	r3, [sp, #0]
   2bc24:	4655      	mov	r5, sl
   2bc26:	f7ff badf 	b.w	2b1e8 <_vfiprintf_r+0x228>
   2bc2a:	f015 0140 	ands.w	r1, r5, #64	; 0x40
   2bc2e:	d03e      	beq.n	2bcae <_vfiprintf_r+0xcee>
   2bc30:	9903      	ldr	r1, [sp, #12]
   2bc32:	f851 6b04 	ldr.w	r6, [r1], #4
   2bc36:	9103      	str	r1, [sp, #12]
   2bc38:	4690      	mov	r8, r2
   2bc3a:	b2b6      	uxth	r6, r6
   2bc3c:	e782      	b.n	2bb44 <_vfiprintf_r+0xb84>
   2bc3e:	46aa      	mov	sl, r5
   2bc40:	f7ff bac5 	b.w	2b1ce <_vfiprintf_r+0x20e>
   2bc44:	2b01      	cmp	r3, #1
   2bc46:	46aa      	mov	sl, r5
   2bc48:	f47f acf7 	bne.w	2b63a <_vfiprintf_r+0x67a>
   2bc4c:	f7ff bac4 	b.w	2b1d8 <_vfiprintf_r+0x218>
   2bc50:	9e03      	ldr	r6, [sp, #12]
   2bc52:	9a02      	ldr	r2, [sp, #8]
   2bc54:	f856 3b04 	ldr.w	r3, [r6], #4
   2bc58:	601a      	str	r2, [r3, #0]
   2bc5a:	9603      	str	r6, [sp, #12]
   2bc5c:	f7ff b9f0 	b.w	2b040 <_vfiprintf_r+0x80>
   2bc60:	465b      	mov	r3, fp
   2bc62:	2b06      	cmp	r3, #6
   2bc64:	bf28      	it	cs
   2bc66:	2306      	movcs	r3, #6
   2bc68:	4c51      	ldr	r4, [pc, #324]	; (2bdb0 <_vfiprintf_r+0xdf0>)
   2bc6a:	9300      	str	r3, [sp, #0]
   2bc6c:	9603      	str	r6, [sp, #12]
   2bc6e:	4698      	mov	r8, r3
   2bc70:	f7ff bb79 	b.w	2b366 <_vfiprintf_r+0x3a6>
   2bc74:	9b03      	ldr	r3, [sp, #12]
   2bc76:	f41a 7800 	ands.w	r8, sl, #512	; 0x200
   2bc7a:	bf14      	ite	ne
   2bc7c:	f853 6b04 	ldrne.w	r6, [r3], #4
   2bc80:	f853 6b04 	ldreq.w	r6, [r3], #4
   2bc84:	9303      	str	r3, [sp, #12]
   2bc86:	bf1c      	itt	ne
   2bc88:	4690      	movne	r8, r2
   2bc8a:	b2f6      	uxtbne	r6, r6
   2bc8c:	2301      	movs	r3, #1
   2bc8e:	f7ff baf6 	b.w	2b27e <_vfiprintf_r+0x2be>
   2bc92:	9b03      	ldr	r3, [sp, #12]
   2bc94:	f415 7800 	ands.w	r8, r5, #512	; 0x200
   2bc98:	bf14      	ite	ne
   2bc9a:	f853 6b04 	ldrne.w	r6, [r3], #4
   2bc9e:	f853 6b04 	ldreq.w	r6, [r3], #4
   2bca2:	9303      	str	r3, [sp, #12]
   2bca4:	bf1c      	itt	ne
   2bca6:	4690      	movne	r8, r2
   2bca8:	b2f6      	uxtbne	r6, r6
   2bcaa:	f7ff bae5 	b.w	2b278 <_vfiprintf_r+0x2b8>
   2bcae:	9a03      	ldr	r2, [sp, #12]
   2bcb0:	f415 7800 	ands.w	r8, r5, #512	; 0x200
   2bcb4:	bf14      	ite	ne
   2bcb6:	f852 6b04 	ldrne.w	r6, [r2], #4
   2bcba:	f852 6b04 	ldreq.w	r6, [r2], #4
   2bcbe:	9203      	str	r2, [sp, #12]
   2bcc0:	bf1c      	itt	ne
   2bcc2:	4688      	movne	r8, r1
   2bcc4:	b2f6      	uxtbne	r6, r6
   2bcc6:	e73d      	b.n	2bb44 <_vfiprintf_r+0xb84>
   2bcc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2bcca:	9908      	ldr	r1, [sp, #32]
   2bccc:	1ae4      	subs	r4, r4, r3
   2bcce:	461a      	mov	r2, r3
   2bcd0:	4620      	mov	r0, r4
   2bcd2:	f001 fc21 	bl	2d518 <strncpy>
   2bcd6:	f899 3001 	ldrb.w	r3, [r9, #1]
   2bcda:	b10b      	cbz	r3, 2bce0 <_vfiprintf_r+0xd20>
   2bcdc:	f109 0901 	add.w	r9, r9, #1
   2bce0:	4630      	mov	r0, r6
   2bce2:	4641      	mov	r1, r8
   2bce4:	220a      	movs	r2, #10
   2bce6:	2300      	movs	r3, #0
   2bce8:	2500      	movs	r5, #0
   2bcea:	f7ed fa8b 	bl	19204 <__aeabi_uldivmod>
   2bcee:	e773      	b.n	2bbd8 <_vfiprintf_r+0xc18>
   2bcf0:	2001      	movs	r0, #1
   2bcf2:	460a      	mov	r2, r1
   2bcf4:	f10d 0944 	add.w	r9, sp, #68	; 0x44
   2bcf8:	f7ff bb83 	b.w	2b402 <_vfiprintf_r+0x442>
   2bcfc:	9b04      	ldr	r3, [sp, #16]
   2bcfe:	2b00      	cmp	r3, #0
   2bd00:	f47f adb6 	bne.w	2b870 <_vfiprintf_r+0x8b0>
   2bd04:	460a      	mov	r2, r1
   2bd06:	2001      	movs	r0, #1
   2bd08:	f10d 0944 	add.w	r9, sp, #68	; 0x44
   2bd0c:	f7ff bb79 	b.w	2b402 <_vfiprintf_r+0x442>
   2bd10:	9e03      	ldr	r6, [sp, #12]
   2bd12:	9a02      	ldr	r2, [sp, #8]
   2bd14:	f856 3b04 	ldr.w	r3, [r6], #4
   2bd18:	9603      	str	r6, [sp, #12]
   2bd1a:	801a      	strh	r2, [r3, #0]
   2bd1c:	f7ff b990 	b.w	2b040 <_vfiprintf_r+0x80>
   2bd20:	f343 18c0 	sbfx	r8, r3, #7, #1
   2bd24:	b25e      	sxtb	r6, r3
   2bd26:	4643      	mov	r3, r8
   2bd28:	f7ff ba44 	b.w	2b1b4 <_vfiprintf_r+0x1f4>
   2bd2c:	6d88      	ldr	r0, [r1, #88]	; 0x58
   2bd2e:	f000 fe25 	bl	2c97c <__retarget_lock_release_recursive>
   2bd32:	f7ff ba84 	b.w	2b23e <_vfiprintf_r+0x27e>
   2bd36:	f8cd b000 	str.w	fp, [sp]
   2bd3a:	9603      	str	r6, [sp, #12]
   2bd3c:	4683      	mov	fp, r0
   2bd3e:	f7ff ba53 	b.w	2b1e8 <_vfiprintf_r+0x228>
   2bd42:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2bd44:	9910      	ldr	r1, [sp, #64]	; 0x40
   2bd46:	f8df a06c 	ldr.w	sl, [pc, #108]	; 2bdb4 <_vfiprintf_r+0xdf4>
   2bd4a:	3201      	adds	r2, #1
   2bd4c:	e5e2      	b.n	2b914 <_vfiprintf_r+0x954>
   2bd4e:	ee18 1a10 	vmov	r1, s16
   2bd52:	ee18 0a90 	vmov	r0, s17
   2bd56:	aa0e      	add	r2, sp, #56	; 0x38
   2bd58:	f7ff f8f6 	bl	2af48 <__sprint_r.part.0>
   2bd5c:	2800      	cmp	r0, #0
   2bd5e:	f43f aad2 	beq.w	2b306 <_vfiprintf_r+0x346>
   2bd62:	f7ff bad2 	b.w	2b30a <_vfiprintf_r+0x34a>
   2bd66:	980f      	ldr	r0, [sp, #60]	; 0x3c
   2bd68:	f8df a048 	ldr.w	sl, [pc, #72]	; 2bdb4 <_vfiprintf_r+0xdf4>
   2bd6c:	3001      	adds	r0, #1
   2bd6e:	e622      	b.n	2b9b6 <_vfiprintf_r+0x9f6>
   2bd70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   2bd72:	07db      	lsls	r3, r3, #31
   2bd74:	d405      	bmi.n	2bd82 <_vfiprintf_r+0xdc2>
   2bd76:	89ab      	ldrh	r3, [r5, #12]
   2bd78:	059f      	lsls	r7, r3, #22
   2bd7a:	d402      	bmi.n	2bd82 <_vfiprintf_r+0xdc2>
   2bd7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
   2bd7e:	f000 fdfd 	bl	2c97c <__retarget_lock_release_recursive>
   2bd82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2bd86:	9302      	str	r3, [sp, #8]
   2bd88:	f7ff bac9 	b.w	2b31e <_vfiprintf_r+0x35e>
   2bd8c:	f8df a028 	ldr.w	sl, [pc, #40]	; 2bdb8 <_vfiprintf_r+0xdf8>
   2bd90:	4684      	mov	ip, r0
   2bd92:	e4d5      	b.n	2b740 <_vfiprintf_r+0x780>
   2bd94:	9a03      	ldr	r2, [sp, #12]
   2bd96:	787b      	ldrb	r3, [r7, #1]
   2bd98:	460f      	mov	r7, r1
   2bd9a:	f852 1b04 	ldr.w	r1, [r2], #4
   2bd9e:	9203      	str	r2, [sp, #12]
   2bda0:	ea41 7be1 	orr.w	fp, r1, r1, asr #31
   2bda4:	f7ff b96b 	b.w	2b07e <_vfiprintf_r+0xbe>
   2bda8:	00041e0c 	.word	0x00041e0c
   2bdac:	00041e20 	.word	0x00041e20
   2bdb0:	00041e34 	.word	0x00041e34
   2bdb4:	00041e3c 	.word	0x00041e3c
   2bdb8:	00041e4c 	.word	0x00041e4c

0002bdbc <__sbprintf>:
   2bdbc:	b570      	push	{r4, r5, r6, lr}
   2bdbe:	460c      	mov	r4, r1
   2bdc0:	8989      	ldrh	r1, [r1, #12]
   2bdc2:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
   2bdc6:	f021 0102 	bic.w	r1, r1, #2
   2bdca:	f8ad 1014 	strh.w	r1, [sp, #20]
   2bdce:	6e61      	ldr	r1, [r4, #100]	; 0x64
   2bdd0:	911b      	str	r1, [sp, #108]	; 0x6c
   2bdd2:	89e1      	ldrh	r1, [r4, #14]
   2bdd4:	f8ad 1016 	strh.w	r1, [sp, #22]
   2bdd8:	69e1      	ldr	r1, [r4, #28]
   2bdda:	9109      	str	r1, [sp, #36]	; 0x24
   2bddc:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2bdde:	910b      	str	r1, [sp, #44]	; 0x2c
   2bde0:	a91c      	add	r1, sp, #112	; 0x70
   2bde2:	9102      	str	r1, [sp, #8]
   2bde4:	9106      	str	r1, [sp, #24]
   2bde6:	f44f 6180 	mov.w	r1, #1024	; 0x400
   2bdea:	4606      	mov	r6, r0
   2bdec:	9104      	str	r1, [sp, #16]
   2bdee:	9107      	str	r1, [sp, #28]
   2bdf0:	a818      	add	r0, sp, #96	; 0x60
   2bdf2:	2100      	movs	r1, #0
   2bdf4:	e9cd 3200 	strd	r3, r2, [sp]
   2bdf8:	9108      	str	r1, [sp, #32]
   2bdfa:	f000 fdb9 	bl	2c970 <__retarget_lock_init_recursive>
   2bdfe:	e9dd 3200 	ldrd	r3, r2, [sp]
   2be02:	a902      	add	r1, sp, #8
   2be04:	4630      	mov	r0, r6
   2be06:	f7ff f8db 	bl	2afc0 <_vfiprintf_r>
   2be0a:	1e05      	subs	r5, r0, #0
   2be0c:	db07      	blt.n	2be1e <__sbprintf+0x62>
   2be0e:	a902      	add	r1, sp, #8
   2be10:	4630      	mov	r0, r6
   2be12:	f000 f963 	bl	2c0dc <_fflush_r>
   2be16:	2800      	cmp	r0, #0
   2be18:	bf18      	it	ne
   2be1a:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
   2be1e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   2be22:	065b      	lsls	r3, r3, #25
   2be24:	d503      	bpl.n	2be2e <__sbprintf+0x72>
   2be26:	89a3      	ldrh	r3, [r4, #12]
   2be28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2be2c:	81a3      	strh	r3, [r4, #12]
   2be2e:	9818      	ldr	r0, [sp, #96]	; 0x60
   2be30:	f000 fda0 	bl	2c974 <__retarget_lock_close_recursive>
   2be34:	4628      	mov	r0, r5
   2be36:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
   2be3a:	bd70      	pop	{r4, r5, r6, pc}

0002be3c <__swsetup_r>:
   2be3c:	b538      	push	{r3, r4, r5, lr}
   2be3e:	4b33      	ldr	r3, [pc, #204]	; (2bf0c <__swsetup_r+0xd0>)
   2be40:	681b      	ldr	r3, [r3, #0]
   2be42:	4605      	mov	r5, r0
   2be44:	460c      	mov	r4, r1
   2be46:	b10b      	cbz	r3, 2be4c <__swsetup_r+0x10>
   2be48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2be4a:	b312      	cbz	r2, 2be92 <__swsetup_r+0x56>
   2be4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2be50:	0718      	lsls	r0, r3, #28
   2be52:	b29a      	uxth	r2, r3
   2be54:	d525      	bpl.n	2bea2 <__swsetup_r+0x66>
   2be56:	6921      	ldr	r1, [r4, #16]
   2be58:	2900      	cmp	r1, #0
   2be5a:	d02d      	beq.n	2beb8 <__swsetup_r+0x7c>
   2be5c:	f012 0001 	ands.w	r0, r2, #1
   2be60:	d007      	beq.n	2be72 <__swsetup_r+0x36>
   2be62:	2000      	movs	r0, #0
   2be64:	60a0      	str	r0, [r4, #8]
   2be66:	6960      	ldr	r0, [r4, #20]
   2be68:	4240      	negs	r0, r0
   2be6a:	61a0      	str	r0, [r4, #24]
   2be6c:	b139      	cbz	r1, 2be7e <__swsetup_r+0x42>
   2be6e:	2000      	movs	r0, #0
   2be70:	bd38      	pop	{r3, r4, r5, pc}
   2be72:	0795      	lsls	r5, r2, #30
   2be74:	bf58      	it	pl
   2be76:	6960      	ldrpl	r0, [r4, #20]
   2be78:	60a0      	str	r0, [r4, #8]
   2be7a:	2900      	cmp	r1, #0
   2be7c:	d1f7      	bne.n	2be6e <__swsetup_r+0x32>
   2be7e:	0612      	lsls	r2, r2, #24
   2be80:	bf58      	it	pl
   2be82:	4608      	movpl	r0, r1
   2be84:	d5f4      	bpl.n	2be70 <__swsetup_r+0x34>
   2be86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2be8a:	81a3      	strh	r3, [r4, #12]
   2be8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2be90:	bd38      	pop	{r3, r4, r5, pc}
   2be92:	4618      	mov	r0, r3
   2be94:	f000 f956 	bl	2c144 <__sinit>
   2be98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2be9c:	0718      	lsls	r0, r3, #28
   2be9e:	b29a      	uxth	r2, r3
   2bea0:	d4d9      	bmi.n	2be56 <__swsetup_r+0x1a>
   2bea2:	06d1      	lsls	r1, r2, #27
   2bea4:	d52a      	bpl.n	2befc <__swsetup_r+0xc0>
   2bea6:	0752      	lsls	r2, r2, #29
   2bea8:	d414      	bmi.n	2bed4 <__swsetup_r+0x98>
   2beaa:	6921      	ldr	r1, [r4, #16]
   2beac:	f043 0308 	orr.w	r3, r3, #8
   2beb0:	81a3      	strh	r3, [r4, #12]
   2beb2:	b29a      	uxth	r2, r3
   2beb4:	2900      	cmp	r1, #0
   2beb6:	d1d1      	bne.n	2be5c <__swsetup_r+0x20>
   2beb8:	f402 7020 	and.w	r0, r2, #640	; 0x280
   2bebc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   2bec0:	d0cc      	beq.n	2be5c <__swsetup_r+0x20>
   2bec2:	4621      	mov	r1, r4
   2bec4:	4628      	mov	r0, r5
   2bec6:	f000 fd5b 	bl	2c980 <__smakebuf_r>
   2beca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2bece:	6921      	ldr	r1, [r4, #16]
   2bed0:	b29a      	uxth	r2, r3
   2bed2:	e7c3      	b.n	2be5c <__swsetup_r+0x20>
   2bed4:	6b21      	ldr	r1, [r4, #48]	; 0x30
   2bed6:	b151      	cbz	r1, 2beee <__swsetup_r+0xb2>
   2bed8:	f104 0240 	add.w	r2, r4, #64	; 0x40
   2bedc:	4291      	cmp	r1, r2
   2bede:	d004      	beq.n	2beea <__swsetup_r+0xae>
   2bee0:	4628      	mov	r0, r5
   2bee2:	f000 fa99 	bl	2c418 <_free_r>
   2bee6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2beea:	2200      	movs	r2, #0
   2beec:	6322      	str	r2, [r4, #48]	; 0x30
   2beee:	6921      	ldr	r1, [r4, #16]
   2bef0:	2200      	movs	r2, #0
   2bef2:	e9c4 1200 	strd	r1, r2, [r4]
   2bef6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   2befa:	e7d7      	b.n	2beac <__swsetup_r+0x70>
   2befc:	2209      	movs	r2, #9
   2befe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2bf02:	602a      	str	r2, [r5, #0]
   2bf04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2bf08:	81a3      	strh	r3, [r4, #12]
   2bf0a:	bd38      	pop	{r3, r4, r5, pc}
   2bf0c:	100040c4 	.word	0x100040c4

0002bf10 <__register_exitproc>:
   2bf10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2bf14:	f8df a080 	ldr.w	sl, [pc, #128]	; 2bf98 <__register_exitproc+0x88>
   2bf18:	4606      	mov	r6, r0
   2bf1a:	f8da 0000 	ldr.w	r0, [sl]
   2bf1e:	4698      	mov	r8, r3
   2bf20:	460f      	mov	r7, r1
   2bf22:	4691      	mov	r9, r2
   2bf24:	f000 fd28 	bl	2c978 <__retarget_lock_acquire_recursive>
   2bf28:	4b1a      	ldr	r3, [pc, #104]	; (2bf94 <__register_exitproc+0x84>)
   2bf2a:	681b      	ldr	r3, [r3, #0]
   2bf2c:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
   2bf30:	b324      	cbz	r4, 2bf7c <__register_exitproc+0x6c>
   2bf32:	6865      	ldr	r5, [r4, #4]
   2bf34:	2d1f      	cmp	r5, #31
   2bf36:	dc26      	bgt.n	2bf86 <__register_exitproc+0x76>
   2bf38:	b95e      	cbnz	r6, 2bf52 <__register_exitproc+0x42>
   2bf3a:	1c6b      	adds	r3, r5, #1
   2bf3c:	3502      	adds	r5, #2
   2bf3e:	f8da 0000 	ldr.w	r0, [sl]
   2bf42:	6063      	str	r3, [r4, #4]
   2bf44:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   2bf48:	f000 fd18 	bl	2c97c <__retarget_lock_release_recursive>
   2bf4c:	2000      	movs	r0, #0
   2bf4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2bf52:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   2bf56:	2301      	movs	r3, #1
   2bf58:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   2bf5c:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   2bf60:	40ab      	lsls	r3, r5
   2bf62:	431a      	orrs	r2, r3
   2bf64:	2e02      	cmp	r6, #2
   2bf66:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   2bf6a:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   2bf6e:	d1e4      	bne.n	2bf3a <__register_exitproc+0x2a>
   2bf70:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   2bf74:	4313      	orrs	r3, r2
   2bf76:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   2bf7a:	e7de      	b.n	2bf3a <__register_exitproc+0x2a>
   2bf7c:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
   2bf80:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
   2bf84:	e7d5      	b.n	2bf32 <__register_exitproc+0x22>
   2bf86:	f8da 0000 	ldr.w	r0, [sl]
   2bf8a:	f000 fcf7 	bl	2c97c <__retarget_lock_release_recursive>
   2bf8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2bf92:	e7dc      	b.n	2bf4e <__register_exitproc+0x3e>
   2bf94:	00041e08 	.word	0x00041e08
   2bf98:	100044f0 	.word	0x100044f0

0002bf9c <abort>:
   2bf9c:	b508      	push	{r3, lr}
   2bf9e:	2006      	movs	r0, #6
   2bfa0:	f001 fa2e 	bl	2d400 <raise>
   2bfa4:	2001      	movs	r0, #1
   2bfa6:	f001 fc9d 	bl	2d8e4 <_exit>
   2bfaa:	bf00      	nop

0002bfac <__sflush_r>:
   2bfac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   2bfb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2bfb4:	460c      	mov	r4, r1
   2bfb6:	0711      	lsls	r1, r2, #28
   2bfb8:	4680      	mov	r8, r0
   2bfba:	d447      	bmi.n	2c04c <__sflush_r+0xa0>
   2bfbc:	6863      	ldr	r3, [r4, #4]
   2bfbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   2bfc2:	2b00      	cmp	r3, #0
   2bfc4:	81a2      	strh	r2, [r4, #12]
   2bfc6:	dd5e      	ble.n	2c086 <__sflush_r+0xda>
   2bfc8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   2bfca:	2d00      	cmp	r5, #0
   2bfcc:	d058      	beq.n	2c080 <__sflush_r+0xd4>
   2bfce:	2300      	movs	r3, #0
   2bfd0:	f8d8 6000 	ldr.w	r6, [r8]
   2bfd4:	f8c8 3000 	str.w	r3, [r8]
   2bfd8:	b293      	uxth	r3, r2
   2bfda:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   2bfde:	d156      	bne.n	2c08e <__sflush_r+0xe2>
   2bfe0:	2301      	movs	r3, #1
   2bfe2:	69e1      	ldr	r1, [r4, #28]
   2bfe4:	4640      	mov	r0, r8
   2bfe6:	47a8      	blx	r5
   2bfe8:	1c43      	adds	r3, r0, #1
   2bfea:	d067      	beq.n	2c0bc <__sflush_r+0x110>
   2bfec:	89a3      	ldrh	r3, [r4, #12]
   2bfee:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   2bff0:	075f      	lsls	r7, r3, #29
   2bff2:	d505      	bpl.n	2c000 <__sflush_r+0x54>
   2bff4:	6863      	ldr	r3, [r4, #4]
   2bff6:	1ac0      	subs	r0, r0, r3
   2bff8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2bffa:	b10b      	cbz	r3, 2c000 <__sflush_r+0x54>
   2bffc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2bffe:	1ac0      	subs	r0, r0, r3
   2c000:	69e1      	ldr	r1, [r4, #28]
   2c002:	4602      	mov	r2, r0
   2c004:	2300      	movs	r3, #0
   2c006:	4640      	mov	r0, r8
   2c008:	47a8      	blx	r5
   2c00a:	1c41      	adds	r1, r0, #1
   2c00c:	d141      	bne.n	2c092 <__sflush_r+0xe6>
   2c00e:	f8d8 3000 	ldr.w	r3, [r8]
   2c012:	2b00      	cmp	r3, #0
   2c014:	d03d      	beq.n	2c092 <__sflush_r+0xe6>
   2c016:	2b1d      	cmp	r3, #29
   2c018:	d001      	beq.n	2c01e <__sflush_r+0x72>
   2c01a:	2b16      	cmp	r3, #22
   2c01c:	d156      	bne.n	2c0cc <__sflush_r+0x120>
   2c01e:	89a3      	ldrh	r3, [r4, #12]
   2c020:	6922      	ldr	r2, [r4, #16]
   2c022:	6022      	str	r2, [r4, #0]
   2c024:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   2c028:	2100      	movs	r1, #0
   2c02a:	6061      	str	r1, [r4, #4]
   2c02c:	81a3      	strh	r3, [r4, #12]
   2c02e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   2c030:	f8c8 6000 	str.w	r6, [r8]
   2c034:	b321      	cbz	r1, 2c080 <__sflush_r+0xd4>
   2c036:	f104 0340 	add.w	r3, r4, #64	; 0x40
   2c03a:	4299      	cmp	r1, r3
   2c03c:	d002      	beq.n	2c044 <__sflush_r+0x98>
   2c03e:	4640      	mov	r0, r8
   2c040:	f000 f9ea 	bl	2c418 <_free_r>
   2c044:	2000      	movs	r0, #0
   2c046:	6320      	str	r0, [r4, #48]	; 0x30
   2c048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2c04c:	6926      	ldr	r6, [r4, #16]
   2c04e:	b1be      	cbz	r6, 2c080 <__sflush_r+0xd4>
   2c050:	b293      	uxth	r3, r2
   2c052:	6825      	ldr	r5, [r4, #0]
   2c054:	6026      	str	r6, [r4, #0]
   2c056:	079a      	lsls	r2, r3, #30
   2c058:	bf0c      	ite	eq
   2c05a:	6963      	ldreq	r3, [r4, #20]
   2c05c:	2300      	movne	r3, #0
   2c05e:	1bad      	subs	r5, r5, r6
   2c060:	60a3      	str	r3, [r4, #8]
   2c062:	e00b      	b.n	2c07c <__sflush_r+0xd0>
   2c064:	462b      	mov	r3, r5
   2c066:	4632      	mov	r2, r6
   2c068:	69e1      	ldr	r1, [r4, #28]
   2c06a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   2c06c:	4640      	mov	r0, r8
   2c06e:	47b8      	blx	r7
   2c070:	f1b0 0c00 	subs.w	ip, r0, #0
   2c074:	eba5 050c 	sub.w	r5, r5, ip
   2c078:	4466      	add	r6, ip
   2c07a:	dd17      	ble.n	2c0ac <__sflush_r+0x100>
   2c07c:	2d00      	cmp	r5, #0
   2c07e:	dcf1      	bgt.n	2c064 <__sflush_r+0xb8>
   2c080:	2000      	movs	r0, #0
   2c082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2c086:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2c088:	2b00      	cmp	r3, #0
   2c08a:	dc9d      	bgt.n	2bfc8 <__sflush_r+0x1c>
   2c08c:	e7f8      	b.n	2c080 <__sflush_r+0xd4>
   2c08e:	6d20      	ldr	r0, [r4, #80]	; 0x50
   2c090:	e7ae      	b.n	2bff0 <__sflush_r+0x44>
   2c092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2c096:	6922      	ldr	r2, [r4, #16]
   2c098:	6022      	str	r2, [r4, #0]
   2c09a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   2c09e:	81a3      	strh	r3, [r4, #12]
   2c0a0:	2200      	movs	r2, #0
   2c0a2:	04db      	lsls	r3, r3, #19
   2c0a4:	6062      	str	r2, [r4, #4]
   2c0a6:	d5c2      	bpl.n	2c02e <__sflush_r+0x82>
   2c0a8:	6520      	str	r0, [r4, #80]	; 0x50
   2c0aa:	e7c0      	b.n	2c02e <__sflush_r+0x82>
   2c0ac:	89a3      	ldrh	r3, [r4, #12]
   2c0ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2c0b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c0b6:	81a3      	strh	r3, [r4, #12]
   2c0b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2c0bc:	f8d8 3000 	ldr.w	r3, [r8]
   2c0c0:	2b00      	cmp	r3, #0
   2c0c2:	d093      	beq.n	2bfec <__sflush_r+0x40>
   2c0c4:	2b1d      	cmp	r3, #29
   2c0c6:	d006      	beq.n	2c0d6 <__sflush_r+0x12a>
   2c0c8:	2b16      	cmp	r3, #22
   2c0ca:	d004      	beq.n	2c0d6 <__sflush_r+0x12a>
   2c0cc:	89a3      	ldrh	r3, [r4, #12]
   2c0ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2c0d2:	81a3      	strh	r3, [r4, #12]
   2c0d4:	e7d5      	b.n	2c082 <__sflush_r+0xd6>
   2c0d6:	f8c8 6000 	str.w	r6, [r8]
   2c0da:	e7d1      	b.n	2c080 <__sflush_r+0xd4>

0002c0dc <_fflush_r>:
   2c0dc:	b538      	push	{r3, r4, r5, lr}
   2c0de:	460c      	mov	r4, r1
   2c0e0:	4605      	mov	r5, r0
   2c0e2:	b108      	cbz	r0, 2c0e8 <_fflush_r+0xc>
   2c0e4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   2c0e6:	b1a3      	cbz	r3, 2c112 <_fflush_r+0x36>
   2c0e8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   2c0ec:	b1b8      	cbz	r0, 2c11e <_fflush_r+0x42>
   2c0ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2c0f0:	07db      	lsls	r3, r3, #31
   2c0f2:	d401      	bmi.n	2c0f8 <_fflush_r+0x1c>
   2c0f4:	0581      	lsls	r1, r0, #22
   2c0f6:	d515      	bpl.n	2c124 <_fflush_r+0x48>
   2c0f8:	4628      	mov	r0, r5
   2c0fa:	4621      	mov	r1, r4
   2c0fc:	f7ff ff56 	bl	2bfac <__sflush_r>
   2c100:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2c102:	07da      	lsls	r2, r3, #31
   2c104:	4605      	mov	r5, r0
   2c106:	d402      	bmi.n	2c10e <_fflush_r+0x32>
   2c108:	89a3      	ldrh	r3, [r4, #12]
   2c10a:	059b      	lsls	r3, r3, #22
   2c10c:	d50e      	bpl.n	2c12c <_fflush_r+0x50>
   2c10e:	4628      	mov	r0, r5
   2c110:	bd38      	pop	{r3, r4, r5, pc}
   2c112:	f000 f817 	bl	2c144 <__sinit>
   2c116:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   2c11a:	2800      	cmp	r0, #0
   2c11c:	d1e7      	bne.n	2c0ee <_fflush_r+0x12>
   2c11e:	4605      	mov	r5, r0
   2c120:	4628      	mov	r0, r5
   2c122:	bd38      	pop	{r3, r4, r5, pc}
   2c124:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2c126:	f000 fc27 	bl	2c978 <__retarget_lock_acquire_recursive>
   2c12a:	e7e5      	b.n	2c0f8 <_fflush_r+0x1c>
   2c12c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2c12e:	f000 fc25 	bl	2c97c <__retarget_lock_release_recursive>
   2c132:	4628      	mov	r0, r5
   2c134:	bd38      	pop	{r3, r4, r5, pc}
   2c136:	bf00      	nop

0002c138 <_cleanup_r>:
   2c138:	4901      	ldr	r1, [pc, #4]	; (2c140 <_cleanup_r+0x8>)
   2c13a:	f000 bbeb 	b.w	2c914 <_fwalk_reent>
   2c13e:	bf00      	nop
   2c140:	0002d6d5 	.word	0x0002d6d5

0002c144 <__sinit>:
   2c144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2c148:	4682      	mov	sl, r0
   2c14a:	4839      	ldr	r0, [pc, #228]	; (2c230 <__sinit+0xec>)
   2c14c:	f000 fc14 	bl	2c978 <__retarget_lock_acquire_recursive>
   2c150:	f8da 4038 	ldr.w	r4, [sl, #56]	; 0x38
   2c154:	2c00      	cmp	r4, #0
   2c156:	d166      	bne.n	2c226 <__sinit+0xe2>
   2c158:	f8da 5004 	ldr.w	r5, [sl, #4]
   2c15c:	4a35      	ldr	r2, [pc, #212]	; (2c234 <__sinit+0xf0>)
   2c15e:	f8ca 203c 	str.w	r2, [sl, #60]	; 0x3c
   2c162:	2303      	movs	r3, #3
   2c164:	e9ca 43b8 	strd	r4, r3, [sl, #736]	; 0x2e0
   2c168:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 2c248 <__sinit+0x104>
   2c16c:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 2c24c <__sinit+0x108>
   2c170:	4f31      	ldr	r7, [pc, #196]	; (2c238 <__sinit+0xf4>)
   2c172:	4e32      	ldr	r6, [pc, #200]	; (2c23c <__sinit+0xf8>)
   2c174:	2304      	movs	r3, #4
   2c176:	f50a 723b 	add.w	r2, sl, #748	; 0x2ec
   2c17a:	f8ca 22e8 	str.w	r2, [sl, #744]	; 0x2e8
   2c17e:	4621      	mov	r1, r4
   2c180:	e9c5 4302 	strd	r4, r3, [r5, #8]
   2c184:	e9c5 4400 	strd	r4, r4, [r5]
   2c188:	e9c5 4404 	strd	r4, r4, [r5, #16]
   2c18c:	666c      	str	r4, [r5, #100]	; 0x64
   2c18e:	2208      	movs	r2, #8
   2c190:	61ac      	str	r4, [r5, #24]
   2c192:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   2c196:	f7fe fe85 	bl	2aea4 <memset>
   2c19a:	e9c5 5907 	strd	r5, r9, [r5, #28]
   2c19e:	e9c5 8709 	strd	r8, r7, [r5, #36]	; 0x24
   2c1a2:	62ee      	str	r6, [r5, #44]	; 0x2c
   2c1a4:	f105 0058 	add.w	r0, r5, #88	; 0x58
   2c1a8:	f000 fbe2 	bl	2c970 <__retarget_lock_init_recursive>
   2c1ac:	f8da 5008 	ldr.w	r5, [sl, #8]
   2c1b0:	4b23      	ldr	r3, [pc, #140]	; (2c240 <__sinit+0xfc>)
   2c1b2:	60eb      	str	r3, [r5, #12]
   2c1b4:	4621      	mov	r1, r4
   2c1b6:	e9c5 4400 	strd	r4, r4, [r5]
   2c1ba:	e9c5 4404 	strd	r4, r4, [r5, #16]
   2c1be:	666c      	str	r4, [r5, #100]	; 0x64
   2c1c0:	60ac      	str	r4, [r5, #8]
   2c1c2:	61ac      	str	r4, [r5, #24]
   2c1c4:	2208      	movs	r2, #8
   2c1c6:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   2c1ca:	f7fe fe6b 	bl	2aea4 <memset>
   2c1ce:	e9c5 5907 	strd	r5, r9, [r5, #28]
   2c1d2:	e9c5 8709 	strd	r8, r7, [r5, #36]	; 0x24
   2c1d6:	62ee      	str	r6, [r5, #44]	; 0x2c
   2c1d8:	f105 0058 	add.w	r0, r5, #88	; 0x58
   2c1dc:	f000 fbc8 	bl	2c970 <__retarget_lock_init_recursive>
   2c1e0:	f8da 500c 	ldr.w	r5, [sl, #12]
   2c1e4:	4b17      	ldr	r3, [pc, #92]	; (2c244 <__sinit+0x100>)
   2c1e6:	60eb      	str	r3, [r5, #12]
   2c1e8:	4621      	mov	r1, r4
   2c1ea:	e9c5 4400 	strd	r4, r4, [r5]
   2c1ee:	e9c5 4404 	strd	r4, r4, [r5, #16]
   2c1f2:	666c      	str	r4, [r5, #100]	; 0x64
   2c1f4:	60ac      	str	r4, [r5, #8]
   2c1f6:	61ac      	str	r4, [r5, #24]
   2c1f8:	2208      	movs	r2, #8
   2c1fa:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   2c1fe:	f7fe fe51 	bl	2aea4 <memset>
   2c202:	f105 0058 	add.w	r0, r5, #88	; 0x58
   2c206:	e9c5 5907 	strd	r5, r9, [r5, #28]
   2c20a:	e9c5 760a 	strd	r7, r6, [r5, #40]	; 0x28
   2c20e:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
   2c212:	f000 fbad 	bl	2c970 <__retarget_lock_init_recursive>
   2c216:	2301      	movs	r3, #1
   2c218:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
   2c21c:	4804      	ldr	r0, [pc, #16]	; (2c230 <__sinit+0xec>)
   2c21e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2c222:	f000 bbab 	b.w	2c97c <__retarget_lock_release_recursive>
   2c226:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2c22a:	4801      	ldr	r0, [pc, #4]	; (2c230 <__sinit+0xec>)
   2c22c:	f000 bba6 	b.w	2c97c <__retarget_lock_release_recursive>
   2c230:	1001975c 	.word	0x1001975c
   2c234:	0002c139 	.word	0x0002c139
   2c238:	0002d4f1 	.word	0x0002d4f1
   2c23c:	0002d511 	.word	0x0002d511
   2c240:	00010009 	.word	0x00010009
   2c244:	00020012 	.word	0x00020012
   2c248:	0002d48d 	.word	0x0002d48d
   2c24c:	0002d4b1 	.word	0x0002d4b1

0002c250 <__sfp_lock_acquire>:
   2c250:	4801      	ldr	r0, [pc, #4]	; (2c258 <__sfp_lock_acquire+0x8>)
   2c252:	f000 bb91 	b.w	2c978 <__retarget_lock_acquire_recursive>
   2c256:	bf00      	nop
   2c258:	10019758 	.word	0x10019758

0002c25c <__sfp_lock_release>:
   2c25c:	4801      	ldr	r0, [pc, #4]	; (2c264 <__sfp_lock_release+0x8>)
   2c25e:	f000 bb8d 	b.w	2c97c <__retarget_lock_release_recursive>
   2c262:	bf00      	nop
   2c264:	10019758 	.word	0x10019758

0002c268 <__fputwc>:
   2c268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2c26c:	b082      	sub	sp, #8
   2c26e:	4682      	mov	sl, r0
   2c270:	4688      	mov	r8, r1
   2c272:	4614      	mov	r4, r2
   2c274:	f000 fb72 	bl	2c95c <__locale_mb_cur_max>
   2c278:	2801      	cmp	r0, #1
   2c27a:	d103      	bne.n	2c284 <__fputwc+0x1c>
   2c27c:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   2c280:	2bfe      	cmp	r3, #254	; 0xfe
   2c282:	d936      	bls.n	2c2f2 <__fputwc+0x8a>
   2c284:	4642      	mov	r2, r8
   2c286:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   2c28a:	a901      	add	r1, sp, #4
   2c28c:	4650      	mov	r0, sl
   2c28e:	f001 f9cd 	bl	2d62c <_wcrtomb_r>
   2c292:	1c42      	adds	r2, r0, #1
   2c294:	4606      	mov	r6, r0
   2c296:	d032      	beq.n	2c2fe <__fputwc+0x96>
   2c298:	b330      	cbz	r0, 2c2e8 <__fputwc+0x80>
   2c29a:	f89d c004 	ldrb.w	ip, [sp, #4]
   2c29e:	f10d 0905 	add.w	r9, sp, #5
   2c2a2:	2500      	movs	r5, #0
   2c2a4:	e009      	b.n	2c2ba <__fputwc+0x52>
   2c2a6:	6823      	ldr	r3, [r4, #0]
   2c2a8:	1c5a      	adds	r2, r3, #1
   2c2aa:	6022      	str	r2, [r4, #0]
   2c2ac:	f883 c000 	strb.w	ip, [r3]
   2c2b0:	3501      	adds	r5, #1
   2c2b2:	42b5      	cmp	r5, r6
   2c2b4:	d218      	bcs.n	2c2e8 <__fputwc+0x80>
   2c2b6:	f819 cb01 	ldrb.w	ip, [r9], #1
   2c2ba:	68a3      	ldr	r3, [r4, #8]
   2c2bc:	3b01      	subs	r3, #1
   2c2be:	2b00      	cmp	r3, #0
   2c2c0:	60a3      	str	r3, [r4, #8]
   2c2c2:	daf0      	bge.n	2c2a6 <__fputwc+0x3e>
   2c2c4:	69a7      	ldr	r7, [r4, #24]
   2c2c6:	42bb      	cmp	r3, r7
   2c2c8:	4661      	mov	r1, ip
   2c2ca:	4622      	mov	r2, r4
   2c2cc:	4650      	mov	r0, sl
   2c2ce:	db02      	blt.n	2c2d6 <__fputwc+0x6e>
   2c2d0:	f1bc 0f0a 	cmp.w	ip, #10
   2c2d4:	d1e7      	bne.n	2c2a6 <__fputwc+0x3e>
   2c2d6:	f001 f951 	bl	2d57c <__swbuf_r>
   2c2da:	1c43      	adds	r3, r0, #1
   2c2dc:	d1e8      	bne.n	2c2b0 <__fputwc+0x48>
   2c2de:	4606      	mov	r6, r0
   2c2e0:	4630      	mov	r0, r6
   2c2e2:	b002      	add	sp, #8
   2c2e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2c2e8:	4646      	mov	r6, r8
   2c2ea:	4630      	mov	r0, r6
   2c2ec:	b002      	add	sp, #8
   2c2ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2c2f2:	fa5f fc88 	uxtb.w	ip, r8
   2c2f6:	f88d c004 	strb.w	ip, [sp, #4]
   2c2fa:	4606      	mov	r6, r0
   2c2fc:	e7cf      	b.n	2c29e <__fputwc+0x36>
   2c2fe:	89a3      	ldrh	r3, [r4, #12]
   2c300:	4630      	mov	r0, r6
   2c302:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2c306:	81a3      	strh	r3, [r4, #12]
   2c308:	b002      	add	sp, #8
   2c30a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2c30e:	bf00      	nop

0002c310 <_fputwc_r>:
   2c310:	b530      	push	{r4, r5, lr}
   2c312:	6e53      	ldr	r3, [r2, #100]	; 0x64
   2c314:	f013 0f01 	tst.w	r3, #1
   2c318:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   2c31c:	4614      	mov	r4, r2
   2c31e:	b083      	sub	sp, #12
   2c320:	4605      	mov	r5, r0
   2c322:	b29a      	uxth	r2, r3
   2c324:	d101      	bne.n	2c32a <_fputwc_r+0x1a>
   2c326:	0598      	lsls	r0, r3, #22
   2c328:	d51c      	bpl.n	2c364 <_fputwc_r+0x54>
   2c32a:	0490      	lsls	r0, r2, #18
   2c32c:	d406      	bmi.n	2c33c <_fputwc_r+0x2c>
   2c32e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   2c330:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   2c334:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   2c338:	81a3      	strh	r3, [r4, #12]
   2c33a:	6662      	str	r2, [r4, #100]	; 0x64
   2c33c:	4622      	mov	r2, r4
   2c33e:	4628      	mov	r0, r5
   2c340:	f7ff ff92 	bl	2c268 <__fputwc>
   2c344:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2c346:	07da      	lsls	r2, r3, #31
   2c348:	4605      	mov	r5, r0
   2c34a:	d402      	bmi.n	2c352 <_fputwc_r+0x42>
   2c34c:	89a3      	ldrh	r3, [r4, #12]
   2c34e:	059b      	lsls	r3, r3, #22
   2c350:	d502      	bpl.n	2c358 <_fputwc_r+0x48>
   2c352:	4628      	mov	r0, r5
   2c354:	b003      	add	sp, #12
   2c356:	bd30      	pop	{r4, r5, pc}
   2c358:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2c35a:	f000 fb0f 	bl	2c97c <__retarget_lock_release_recursive>
   2c35e:	4628      	mov	r0, r5
   2c360:	b003      	add	sp, #12
   2c362:	bd30      	pop	{r4, r5, pc}
   2c364:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2c366:	9101      	str	r1, [sp, #4]
   2c368:	f000 fb06 	bl	2c978 <__retarget_lock_acquire_recursive>
   2c36c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2c370:	9901      	ldr	r1, [sp, #4]
   2c372:	b29a      	uxth	r2, r3
   2c374:	e7d9      	b.n	2c32a <_fputwc_r+0x1a>
   2c376:	bf00      	nop

0002c378 <_malloc_trim_r>:
   2c378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c37a:	4f24      	ldr	r7, [pc, #144]	; (2c40c <_malloc_trim_r+0x94>)
   2c37c:	460c      	mov	r4, r1
   2c37e:	4606      	mov	r6, r0
   2c380:	f000 fe34 	bl	2cfec <__malloc_lock>
   2c384:	68ba      	ldr	r2, [r7, #8]
   2c386:	6855      	ldr	r5, [r2, #4]
   2c388:	f5c4 637e 	rsb	r3, r4, #4064	; 0xfe0
   2c38c:	330f      	adds	r3, #15
   2c38e:	f025 0503 	bic.w	r5, r5, #3
   2c392:	442b      	add	r3, r5
   2c394:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   2c398:	f023 030f 	bic.w	r3, r3, #15
   2c39c:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   2c3a0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   2c3a4:	db07      	blt.n	2c3b6 <_malloc_trim_r+0x3e>
   2c3a6:	2100      	movs	r1, #0
   2c3a8:	4630      	mov	r0, r6
   2c3aa:	f001 f817 	bl	2d3dc <_sbrk_r>
   2c3ae:	68bb      	ldr	r3, [r7, #8]
   2c3b0:	442b      	add	r3, r5
   2c3b2:	4298      	cmp	r0, r3
   2c3b4:	d004      	beq.n	2c3c0 <_malloc_trim_r+0x48>
   2c3b6:	4630      	mov	r0, r6
   2c3b8:	f000 fe1e 	bl	2cff8 <__malloc_unlock>
   2c3bc:	2000      	movs	r0, #0
   2c3be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c3c0:	4261      	negs	r1, r4
   2c3c2:	4630      	mov	r0, r6
   2c3c4:	f001 f80a 	bl	2d3dc <_sbrk_r>
   2c3c8:	3001      	adds	r0, #1
   2c3ca:	d00d      	beq.n	2c3e8 <_malloc_trim_r+0x70>
   2c3cc:	4a10      	ldr	r2, [pc, #64]	; (2c410 <_malloc_trim_r+0x98>)
   2c3ce:	68bb      	ldr	r3, [r7, #8]
   2c3d0:	1b2d      	subs	r5, r5, r4
   2c3d2:	f045 0501 	orr.w	r5, r5, #1
   2c3d6:	605d      	str	r5, [r3, #4]
   2c3d8:	6813      	ldr	r3, [r2, #0]
   2c3da:	4630      	mov	r0, r6
   2c3dc:	1b1b      	subs	r3, r3, r4
   2c3de:	6013      	str	r3, [r2, #0]
   2c3e0:	f000 fe0a 	bl	2cff8 <__malloc_unlock>
   2c3e4:	2001      	movs	r0, #1
   2c3e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c3e8:	2100      	movs	r1, #0
   2c3ea:	4630      	mov	r0, r6
   2c3ec:	f000 fff6 	bl	2d3dc <_sbrk_r>
   2c3f0:	68ba      	ldr	r2, [r7, #8]
   2c3f2:	1a83      	subs	r3, r0, r2
   2c3f4:	2b0f      	cmp	r3, #15
   2c3f6:	ddde      	ble.n	2c3b6 <_malloc_trim_r+0x3e>
   2c3f8:	f043 0301 	orr.w	r3, r3, #1
   2c3fc:	6053      	str	r3, [r2, #4]
   2c3fe:	4b05      	ldr	r3, [pc, #20]	; (2c414 <_malloc_trim_r+0x9c>)
   2c400:	4903      	ldr	r1, [pc, #12]	; (2c410 <_malloc_trim_r+0x98>)
   2c402:	681b      	ldr	r3, [r3, #0]
   2c404:	1ac0      	subs	r0, r0, r3
   2c406:	6008      	str	r0, [r1, #0]
   2c408:	e7d5      	b.n	2c3b6 <_malloc_trim_r+0x3e>
   2c40a:	bf00      	nop
   2c40c:	10004660 	.word	0x10004660
   2c410:	10019760 	.word	0x10019760
   2c414:	10004a68 	.word	0x10004a68

0002c418 <_free_r>:
   2c418:	2900      	cmp	r1, #0
   2c41a:	d061      	beq.n	2c4e0 <_free_r+0xc8>
   2c41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c41e:	460c      	mov	r4, r1
   2c420:	4606      	mov	r6, r0
   2c422:	f000 fde3 	bl	2cfec <__malloc_lock>
   2c426:	f854 2c04 	ldr.w	r2, [r4, #-4]
   2c42a:	4f7b      	ldr	r7, [pc, #492]	; (2c618 <_free_r+0x200>)
   2c42c:	f1a4 0508 	sub.w	r5, r4, #8
   2c430:	f022 0101 	bic.w	r1, r2, #1
   2c434:	eb05 0c01 	add.w	ip, r5, r1
   2c438:	68b8      	ldr	r0, [r7, #8]
   2c43a:	f8dc 3004 	ldr.w	r3, [ip, #4]
   2c43e:	4560      	cmp	r0, ip
   2c440:	f023 0303 	bic.w	r3, r3, #3
   2c444:	f000 808b 	beq.w	2c55e <_free_r+0x146>
   2c448:	07d2      	lsls	r2, r2, #31
   2c44a:	f8cc 3004 	str.w	r3, [ip, #4]
   2c44e:	d432      	bmi.n	2c4b6 <_free_r+0x9e>
   2c450:	f854 2c08 	ldr.w	r2, [r4, #-8]
   2c454:	1aad      	subs	r5, r5, r2
   2c456:	4411      	add	r1, r2
   2c458:	68aa      	ldr	r2, [r5, #8]
   2c45a:	f107 0008 	add.w	r0, r7, #8
   2c45e:	4282      	cmp	r2, r0
   2c460:	d06a      	beq.n	2c538 <_free_r+0x120>
   2c462:	eb0c 0403 	add.w	r4, ip, r3
   2c466:	f8d4 e004 	ldr.w	lr, [r4, #4]
   2c46a:	68ec      	ldr	r4, [r5, #12]
   2c46c:	60d4      	str	r4, [r2, #12]
   2c46e:	f01e 0f01 	tst.w	lr, #1
   2c472:	60a2      	str	r2, [r4, #8]
   2c474:	f000 8097 	beq.w	2c5a6 <_free_r+0x18e>
   2c478:	f041 0301 	orr.w	r3, r1, #1
   2c47c:	606b      	str	r3, [r5, #4]
   2c47e:	f8cc 1000 	str.w	r1, [ip]
   2c482:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   2c486:	d235      	bcs.n	2c4f4 <_free_r+0xdc>
   2c488:	687a      	ldr	r2, [r7, #4]
   2c48a:	08cb      	lsrs	r3, r1, #3
   2c48c:	0948      	lsrs	r0, r1, #5
   2c48e:	2101      	movs	r1, #1
   2c490:	3301      	adds	r3, #1
   2c492:	4081      	lsls	r1, r0
   2c494:	4311      	orrs	r1, r2
   2c496:	6079      	str	r1, [r7, #4]
   2c498:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   2c49c:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   2c4a0:	3a08      	subs	r2, #8
   2c4a2:	e9c5 1202 	strd	r1, r2, [r5, #8]
   2c4a6:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   2c4aa:	60cd      	str	r5, [r1, #12]
   2c4ac:	4630      	mov	r0, r6
   2c4ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2c4b2:	f000 bda1 	b.w	2cff8 <__malloc_unlock>
   2c4b6:	eb0c 0203 	add.w	r2, ip, r3
   2c4ba:	6852      	ldr	r2, [r2, #4]
   2c4bc:	07d0      	lsls	r0, r2, #31
   2c4be:	d410      	bmi.n	2c4e2 <_free_r+0xca>
   2c4c0:	4419      	add	r1, r3
   2c4c2:	f107 0008 	add.w	r0, r7, #8
   2c4c6:	f8dc 3008 	ldr.w	r3, [ip, #8]
   2c4ca:	4283      	cmp	r3, r0
   2c4cc:	d073      	beq.n	2c5b6 <_free_r+0x19e>
   2c4ce:	f8dc 200c 	ldr.w	r2, [ip, #12]
   2c4d2:	60da      	str	r2, [r3, #12]
   2c4d4:	6093      	str	r3, [r2, #8]
   2c4d6:	f041 0301 	orr.w	r3, r1, #1
   2c4da:	606b      	str	r3, [r5, #4]
   2c4dc:	5069      	str	r1, [r5, r1]
   2c4de:	e7d0      	b.n	2c482 <_free_r+0x6a>
   2c4e0:	4770      	bx	lr
   2c4e2:	f041 0301 	orr.w	r3, r1, #1
   2c4e6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   2c4ea:	f844 3c04 	str.w	r3, [r4, #-4]
   2c4ee:	f8cc 1000 	str.w	r1, [ip]
   2c4f2:	d3c9      	bcc.n	2c488 <_free_r+0x70>
   2c4f4:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   2c4f8:	ea4f 2351 	mov.w	r3, r1, lsr #9
   2c4fc:	d248      	bcs.n	2c590 <_free_r+0x178>
   2c4fe:	098b      	lsrs	r3, r1, #6
   2c500:	f103 0039 	add.w	r0, r3, #57	; 0x39
   2c504:	f103 0238 	add.w	r2, r3, #56	; 0x38
   2c508:	00c3      	lsls	r3, r0, #3
   2c50a:	18f8      	adds	r0, r7, r3
   2c50c:	58fb      	ldr	r3, [r7, r3]
   2c50e:	3808      	subs	r0, #8
   2c510:	4298      	cmp	r0, r3
   2c512:	d059      	beq.n	2c5c8 <_free_r+0x1b0>
   2c514:	685a      	ldr	r2, [r3, #4]
   2c516:	f022 0203 	bic.w	r2, r2, #3
   2c51a:	428a      	cmp	r2, r1
   2c51c:	d902      	bls.n	2c524 <_free_r+0x10c>
   2c51e:	689b      	ldr	r3, [r3, #8]
   2c520:	4298      	cmp	r0, r3
   2c522:	d1f7      	bne.n	2c514 <_free_r+0xfc>
   2c524:	68d8      	ldr	r0, [r3, #12]
   2c526:	e9c5 3002 	strd	r3, r0, [r5, #8]
   2c52a:	6085      	str	r5, [r0, #8]
   2c52c:	60dd      	str	r5, [r3, #12]
   2c52e:	4630      	mov	r0, r6
   2c530:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2c534:	f000 bd60 	b.w	2cff8 <__malloc_unlock>
   2c538:	eb0c 0203 	add.w	r2, ip, r3
   2c53c:	6852      	ldr	r2, [r2, #4]
   2c53e:	07d2      	lsls	r2, r2, #31
   2c540:	d463      	bmi.n	2c60a <_free_r+0x1f2>
   2c542:	440b      	add	r3, r1
   2c544:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
   2c548:	60ca      	str	r2, [r1, #12]
   2c54a:	6091      	str	r1, [r2, #8]
   2c54c:	f043 0201 	orr.w	r2, r3, #1
   2c550:	606a      	str	r2, [r5, #4]
   2c552:	4630      	mov	r0, r6
   2c554:	50eb      	str	r3, [r5, r3]
   2c556:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2c55a:	f000 bd4d 	b.w	2cff8 <__malloc_unlock>
   2c55e:	440b      	add	r3, r1
   2c560:	07d1      	lsls	r1, r2, #31
   2c562:	d407      	bmi.n	2c574 <_free_r+0x15c>
   2c564:	f854 2c08 	ldr.w	r2, [r4, #-8]
   2c568:	1aad      	subs	r5, r5, r2
   2c56a:	4413      	add	r3, r2
   2c56c:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
   2c570:	60ca      	str	r2, [r1, #12]
   2c572:	6091      	str	r1, [r2, #8]
   2c574:	f043 0201 	orr.w	r2, r3, #1
   2c578:	606a      	str	r2, [r5, #4]
   2c57a:	4a28      	ldr	r2, [pc, #160]	; (2c61c <_free_r+0x204>)
   2c57c:	60bd      	str	r5, [r7, #8]
   2c57e:	6812      	ldr	r2, [r2, #0]
   2c580:	429a      	cmp	r2, r3
   2c582:	d893      	bhi.n	2c4ac <_free_r+0x94>
   2c584:	4b26      	ldr	r3, [pc, #152]	; (2c620 <_free_r+0x208>)
   2c586:	4630      	mov	r0, r6
   2c588:	6819      	ldr	r1, [r3, #0]
   2c58a:	f7ff fef5 	bl	2c378 <_malloc_trim_r>
   2c58e:	e78d      	b.n	2c4ac <_free_r+0x94>
   2c590:	2b14      	cmp	r3, #20
   2c592:	d90a      	bls.n	2c5aa <_free_r+0x192>
   2c594:	2b54      	cmp	r3, #84	; 0x54
   2c596:	d81f      	bhi.n	2c5d8 <_free_r+0x1c0>
   2c598:	0b0b      	lsrs	r3, r1, #12
   2c59a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   2c59e:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   2c5a2:	00c3      	lsls	r3, r0, #3
   2c5a4:	e7b1      	b.n	2c50a <_free_r+0xf2>
   2c5a6:	4419      	add	r1, r3
   2c5a8:	e78d      	b.n	2c4c6 <_free_r+0xae>
   2c5aa:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   2c5ae:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   2c5b2:	00c3      	lsls	r3, r0, #3
   2c5b4:	e7a9      	b.n	2c50a <_free_r+0xf2>
   2c5b6:	f041 0301 	orr.w	r3, r1, #1
   2c5ba:	e9c7 5504 	strd	r5, r5, [r7, #16]
   2c5be:	e9c5 0002 	strd	r0, r0, [r5, #8]
   2c5c2:	606b      	str	r3, [r5, #4]
   2c5c4:	5069      	str	r1, [r5, r1]
   2c5c6:	e771      	b.n	2c4ac <_free_r+0x94>
   2c5c8:	6879      	ldr	r1, [r7, #4]
   2c5ca:	1092      	asrs	r2, r2, #2
   2c5cc:	2401      	movs	r4, #1
   2c5ce:	fa04 f202 	lsl.w	r2, r4, r2
   2c5d2:	430a      	orrs	r2, r1
   2c5d4:	607a      	str	r2, [r7, #4]
   2c5d6:	e7a6      	b.n	2c526 <_free_r+0x10e>
   2c5d8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   2c5dc:	d806      	bhi.n	2c5ec <_free_r+0x1d4>
   2c5de:	0bcb      	lsrs	r3, r1, #15
   2c5e0:	f103 0078 	add.w	r0, r3, #120	; 0x78
   2c5e4:	f103 0277 	add.w	r2, r3, #119	; 0x77
   2c5e8:	00c3      	lsls	r3, r0, #3
   2c5ea:	e78e      	b.n	2c50a <_free_r+0xf2>
   2c5ec:	f240 5254 	movw	r2, #1364	; 0x554
   2c5f0:	4293      	cmp	r3, r2
   2c5f2:	d806      	bhi.n	2c602 <_free_r+0x1ea>
   2c5f4:	0c8b      	lsrs	r3, r1, #18
   2c5f6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   2c5fa:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   2c5fe:	00c3      	lsls	r3, r0, #3
   2c600:	e783      	b.n	2c50a <_free_r+0xf2>
   2c602:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   2c606:	227e      	movs	r2, #126	; 0x7e
   2c608:	e77f      	b.n	2c50a <_free_r+0xf2>
   2c60a:	f041 0301 	orr.w	r3, r1, #1
   2c60e:	606b      	str	r3, [r5, #4]
   2c610:	f8cc 1000 	str.w	r1, [ip]
   2c614:	e74a      	b.n	2c4ac <_free_r+0x94>
   2c616:	bf00      	nop
   2c618:	10004660 	.word	0x10004660
   2c61c:	10004a6c 	.word	0x10004a6c
   2c620:	10019790 	.word	0x10019790

0002c624 <__sfvwrite_r>:
   2c624:	6893      	ldr	r3, [r2, #8]
   2c626:	2b00      	cmp	r3, #0
   2c628:	f000 8085 	beq.w	2c736 <__sfvwrite_r+0x112>
   2c62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c630:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   2c634:	460c      	mov	r4, r1
   2c636:	0719      	lsls	r1, r3, #28
   2c638:	4680      	mov	r8, r0
   2c63a:	b083      	sub	sp, #12
   2c63c:	4617      	mov	r7, r2
   2c63e:	b298      	uxth	r0, r3
   2c640:	d525      	bpl.n	2c68e <__sfvwrite_r+0x6a>
   2c642:	6923      	ldr	r3, [r4, #16]
   2c644:	b31b      	cbz	r3, 2c68e <__sfvwrite_r+0x6a>
   2c646:	f010 0302 	ands.w	r3, r0, #2
   2c64a:	683d      	ldr	r5, [r7, #0]
   2c64c:	d02d      	beq.n	2c6aa <__sfvwrite_r+0x86>
   2c64e:	f04f 0a00 	mov.w	sl, #0
   2c652:	f8df b2bc 	ldr.w	fp, [pc, #700]	; 2c910 <__sfvwrite_r+0x2ec>
   2c656:	4656      	mov	r6, sl
   2c658:	46b9      	mov	r9, r7
   2c65a:	455e      	cmp	r6, fp
   2c65c:	4633      	mov	r3, r6
   2c65e:	4652      	mov	r2, sl
   2c660:	bf28      	it	cs
   2c662:	465b      	movcs	r3, fp
   2c664:	4640      	mov	r0, r8
   2c666:	2e00      	cmp	r6, #0
   2c668:	d052      	beq.n	2c710 <__sfvwrite_r+0xec>
   2c66a:	69e1      	ldr	r1, [r4, #28]
   2c66c:	6a67      	ldr	r7, [r4, #36]	; 0x24
   2c66e:	47b8      	blx	r7
   2c670:	2800      	cmp	r0, #0
   2c672:	dd56      	ble.n	2c722 <__sfvwrite_r+0xfe>
   2c674:	f8d9 3008 	ldr.w	r3, [r9, #8]
   2c678:	1a1b      	subs	r3, r3, r0
   2c67a:	4482      	add	sl, r0
   2c67c:	1a36      	subs	r6, r6, r0
   2c67e:	f8c9 3008 	str.w	r3, [r9, #8]
   2c682:	2b00      	cmp	r3, #0
   2c684:	d1e9      	bne.n	2c65a <__sfvwrite_r+0x36>
   2c686:	2000      	movs	r0, #0
   2c688:	b003      	add	sp, #12
   2c68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c68e:	4621      	mov	r1, r4
   2c690:	4640      	mov	r0, r8
   2c692:	f7ff fbd3 	bl	2be3c <__swsetup_r>
   2c696:	2800      	cmp	r0, #0
   2c698:	f040 8136 	bne.w	2c908 <__sfvwrite_r+0x2e4>
   2c69c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2c6a0:	683d      	ldr	r5, [r7, #0]
   2c6a2:	b298      	uxth	r0, r3
   2c6a4:	f010 0302 	ands.w	r3, r0, #2
   2c6a8:	d1d1      	bne.n	2c64e <__sfvwrite_r+0x2a>
   2c6aa:	f010 0901 	ands.w	r9, r0, #1
   2c6ae:	d144      	bne.n	2c73a <__sfvwrite_r+0x116>
   2c6b0:	464e      	mov	r6, r9
   2c6b2:	9700      	str	r7, [sp, #0]
   2c6b4:	b346      	cbz	r6, 2c708 <__sfvwrite_r+0xe4>
   2c6b6:	0582      	lsls	r2, r0, #22
   2c6b8:	f8d4 b008 	ldr.w	fp, [r4, #8]
   2c6bc:	f140 8083 	bpl.w	2c7c6 <__sfvwrite_r+0x1a2>
   2c6c0:	45b3      	cmp	fp, r6
   2c6c2:	465a      	mov	r2, fp
   2c6c4:	f200 80b2 	bhi.w	2c82c <__sfvwrite_r+0x208>
   2c6c8:	f410 6f90 	tst.w	r0, #1152	; 0x480
   2c6cc:	f040 80bf 	bne.w	2c84e <__sfvwrite_r+0x22a>
   2c6d0:	6820      	ldr	r0, [r4, #0]
   2c6d2:	9201      	str	r2, [sp, #4]
   2c6d4:	4649      	mov	r1, r9
   2c6d6:	f7fe fb69 	bl	2adac <memmove>
   2c6da:	68a3      	ldr	r3, [r4, #8]
   2c6dc:	9a01      	ldr	r2, [sp, #4]
   2c6de:	eba3 010b 	sub.w	r1, r3, fp
   2c6e2:	6823      	ldr	r3, [r4, #0]
   2c6e4:	60a1      	str	r1, [r4, #8]
   2c6e6:	4413      	add	r3, r2
   2c6e8:	46b2      	mov	sl, r6
   2c6ea:	6023      	str	r3, [r4, #0]
   2c6ec:	2600      	movs	r6, #0
   2c6ee:	9b00      	ldr	r3, [sp, #0]
   2c6f0:	6898      	ldr	r0, [r3, #8]
   2c6f2:	eba0 000a 	sub.w	r0, r0, sl
   2c6f6:	44d1      	add	r9, sl
   2c6f8:	6098      	str	r0, [r3, #8]
   2c6fa:	2800      	cmp	r0, #0
   2c6fc:	d0c3      	beq.n	2c686 <__sfvwrite_r+0x62>
   2c6fe:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   2c702:	b280      	uxth	r0, r0
   2c704:	2e00      	cmp	r6, #0
   2c706:	d1d6      	bne.n	2c6b6 <__sfvwrite_r+0x92>
   2c708:	e9d5 9600 	ldrd	r9, r6, [r5]
   2c70c:	3508      	adds	r5, #8
   2c70e:	e7d1      	b.n	2c6b4 <__sfvwrite_r+0x90>
   2c710:	e9d5 a600 	ldrd	sl, r6, [r5]
   2c714:	3508      	adds	r5, #8
   2c716:	e7a0      	b.n	2c65a <__sfvwrite_r+0x36>
   2c718:	4621      	mov	r1, r4
   2c71a:	4640      	mov	r0, r8
   2c71c:	f7ff fcde 	bl	2c0dc <_fflush_r>
   2c720:	b380      	cbz	r0, 2c784 <__sfvwrite_r+0x160>
   2c722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2c726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2c72a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c72e:	81a3      	strh	r3, [r4, #12]
   2c730:	b003      	add	sp, #12
   2c732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c736:	2000      	movs	r0, #0
   2c738:	4770      	bx	lr
   2c73a:	461e      	mov	r6, r3
   2c73c:	46aa      	mov	sl, r5
   2c73e:	4699      	mov	r9, r3
   2c740:	4618      	mov	r0, r3
   2c742:	461d      	mov	r5, r3
   2c744:	9700      	str	r7, [sp, #0]
   2c746:	b356      	cbz	r6, 2c79e <__sfvwrite_r+0x17a>
   2c748:	b388      	cbz	r0, 2c7ae <__sfvwrite_r+0x18a>
   2c74a:	464a      	mov	r2, r9
   2c74c:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   2c750:	6820      	ldr	r0, [r4, #0]
   2c752:	42b2      	cmp	r2, r6
   2c754:	bf28      	it	cs
   2c756:	4632      	movcs	r2, r6
   2c758:	4288      	cmp	r0, r1
   2c75a:	d905      	bls.n	2c768 <__sfvwrite_r+0x144>
   2c75c:	68a1      	ldr	r1, [r4, #8]
   2c75e:	eb03 0b01 	add.w	fp, r3, r1
   2c762:	455a      	cmp	r2, fp
   2c764:	f300 80a6 	bgt.w	2c8b4 <__sfvwrite_r+0x290>
   2c768:	4293      	cmp	r3, r2
   2c76a:	dc63      	bgt.n	2c834 <__sfvwrite_r+0x210>
   2c76c:	69e1      	ldr	r1, [r4, #28]
   2c76e:	6a67      	ldr	r7, [r4, #36]	; 0x24
   2c770:	462a      	mov	r2, r5
   2c772:	4640      	mov	r0, r8
   2c774:	47b8      	blx	r7
   2c776:	f1b0 0b00 	subs.w	fp, r0, #0
   2c77a:	ddd2      	ble.n	2c722 <__sfvwrite_r+0xfe>
   2c77c:	ebb9 090b 	subs.w	r9, r9, fp
   2c780:	d0ca      	beq.n	2c718 <__sfvwrite_r+0xf4>
   2c782:	2001      	movs	r0, #1
   2c784:	9a00      	ldr	r2, [sp, #0]
   2c786:	6893      	ldr	r3, [r2, #8]
   2c788:	eba3 030b 	sub.w	r3, r3, fp
   2c78c:	445d      	add	r5, fp
   2c78e:	eba6 060b 	sub.w	r6, r6, fp
   2c792:	6093      	str	r3, [r2, #8]
   2c794:	2b00      	cmp	r3, #0
   2c796:	f43f af76 	beq.w	2c686 <__sfvwrite_r+0x62>
   2c79a:	2e00      	cmp	r6, #0
   2c79c:	d1d4      	bne.n	2c748 <__sfvwrite_r+0x124>
   2c79e:	f10a 0308 	add.w	r3, sl, #8
   2c7a2:	e953 5602 	ldrd	r5, r6, [r3, #-8]
   2c7a6:	469a      	mov	sl, r3
   2c7a8:	3308      	adds	r3, #8
   2c7aa:	2e00      	cmp	r6, #0
   2c7ac:	d0f9      	beq.n	2c7a2 <__sfvwrite_r+0x17e>
   2c7ae:	4632      	mov	r2, r6
   2c7b0:	210a      	movs	r1, #10
   2c7b2:	4628      	mov	r0, r5
   2c7b4:	f7eb ff34 	bl	18620 <memchr>
   2c7b8:	2800      	cmp	r0, #0
   2c7ba:	f000 809c 	beq.w	2c8f6 <__sfvwrite_r+0x2d2>
   2c7be:	3001      	adds	r0, #1
   2c7c0:	eba0 0905 	sub.w	r9, r0, r5
   2c7c4:	e7c1      	b.n	2c74a <__sfvwrite_r+0x126>
   2c7c6:	6820      	ldr	r0, [r4, #0]
   2c7c8:	6923      	ldr	r3, [r4, #16]
   2c7ca:	4298      	cmp	r0, r3
   2c7cc:	d816      	bhi.n	2c7fc <__sfvwrite_r+0x1d8>
   2c7ce:	6963      	ldr	r3, [r4, #20]
   2c7d0:	42b3      	cmp	r3, r6
   2c7d2:	d813      	bhi.n	2c7fc <__sfvwrite_r+0x1d8>
   2c7d4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   2c7d8:	42b2      	cmp	r2, r6
   2c7da:	bf28      	it	cs
   2c7dc:	4632      	movcs	r2, r6
   2c7de:	69e1      	ldr	r1, [r4, #28]
   2c7e0:	fb92 f2f3 	sdiv	r2, r2, r3
   2c7e4:	6a67      	ldr	r7, [r4, #36]	; 0x24
   2c7e6:	fb02 f303 	mul.w	r3, r2, r3
   2c7ea:	4640      	mov	r0, r8
   2c7ec:	464a      	mov	r2, r9
   2c7ee:	47b8      	blx	r7
   2c7f0:	f1b0 0a00 	subs.w	sl, r0, #0
   2c7f4:	dd95      	ble.n	2c722 <__sfvwrite_r+0xfe>
   2c7f6:	eba6 060a 	sub.w	r6, r6, sl
   2c7fa:	e778      	b.n	2c6ee <__sfvwrite_r+0xca>
   2c7fc:	45b3      	cmp	fp, r6
   2c7fe:	46da      	mov	sl, fp
   2c800:	bf28      	it	cs
   2c802:	46b2      	movcs	sl, r6
   2c804:	4652      	mov	r2, sl
   2c806:	4649      	mov	r1, r9
   2c808:	f7fe fad0 	bl	2adac <memmove>
   2c80c:	68a3      	ldr	r3, [r4, #8]
   2c80e:	6822      	ldr	r2, [r4, #0]
   2c810:	eba3 030a 	sub.w	r3, r3, sl
   2c814:	4452      	add	r2, sl
   2c816:	60a3      	str	r3, [r4, #8]
   2c818:	6022      	str	r2, [r4, #0]
   2c81a:	2b00      	cmp	r3, #0
   2c81c:	d1eb      	bne.n	2c7f6 <__sfvwrite_r+0x1d2>
   2c81e:	4621      	mov	r1, r4
   2c820:	4640      	mov	r0, r8
   2c822:	f7ff fc5b 	bl	2c0dc <_fflush_r>
   2c826:	2800      	cmp	r0, #0
   2c828:	d0e5      	beq.n	2c7f6 <__sfvwrite_r+0x1d2>
   2c82a:	e77a      	b.n	2c722 <__sfvwrite_r+0xfe>
   2c82c:	6820      	ldr	r0, [r4, #0]
   2c82e:	46b3      	mov	fp, r6
   2c830:	4632      	mov	r2, r6
   2c832:	e74e      	b.n	2c6d2 <__sfvwrite_r+0xae>
   2c834:	4629      	mov	r1, r5
   2c836:	9201      	str	r2, [sp, #4]
   2c838:	f7fe fab8 	bl	2adac <memmove>
   2c83c:	9a01      	ldr	r2, [sp, #4]
   2c83e:	68a3      	ldr	r3, [r4, #8]
   2c840:	1a9b      	subs	r3, r3, r2
   2c842:	60a3      	str	r3, [r4, #8]
   2c844:	6823      	ldr	r3, [r4, #0]
   2c846:	4413      	add	r3, r2
   2c848:	6023      	str	r3, [r4, #0]
   2c84a:	4693      	mov	fp, r2
   2c84c:	e796      	b.n	2c77c <__sfvwrite_r+0x158>
   2c84e:	6823      	ldr	r3, [r4, #0]
   2c850:	6921      	ldr	r1, [r4, #16]
   2c852:	eba3 0b01 	sub.w	fp, r3, r1
   2c856:	6963      	ldr	r3, [r4, #20]
   2c858:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   2c85c:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   2c860:	f10b 0301 	add.w	r3, fp, #1
   2c864:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   2c868:	4433      	add	r3, r6
   2c86a:	4553      	cmp	r3, sl
   2c86c:	4652      	mov	r2, sl
   2c86e:	bf84      	itt	hi
   2c870:	469a      	movhi	sl, r3
   2c872:	4652      	movhi	r2, sl
   2c874:	0543      	lsls	r3, r0, #21
   2c876:	d52c      	bpl.n	2c8d2 <__sfvwrite_r+0x2ae>
   2c878:	4611      	mov	r1, r2
   2c87a:	4640      	mov	r0, r8
   2c87c:	f000 f8f0 	bl	2ca60 <_malloc_r>
   2c880:	2800      	cmp	r0, #0
   2c882:	d03b      	beq.n	2c8fc <__sfvwrite_r+0x2d8>
   2c884:	465a      	mov	r2, fp
   2c886:	6921      	ldr	r1, [r4, #16]
   2c888:	9001      	str	r0, [sp, #4]
   2c88a:	f7eb fcb9 	bl	18200 <memcpy>
   2c88e:	89a2      	ldrh	r2, [r4, #12]
   2c890:	9b01      	ldr	r3, [sp, #4]
   2c892:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   2c896:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   2c89a:	81a2      	strh	r2, [r4, #12]
   2c89c:	eb03 000b 	add.w	r0, r3, fp
   2c8a0:	6123      	str	r3, [r4, #16]
   2c8a2:	ebaa 030b 	sub.w	r3, sl, fp
   2c8a6:	f8c4 a014 	str.w	sl, [r4, #20]
   2c8aa:	60a3      	str	r3, [r4, #8]
   2c8ac:	6020      	str	r0, [r4, #0]
   2c8ae:	46b3      	mov	fp, r6
   2c8b0:	4632      	mov	r2, r6
   2c8b2:	e70e      	b.n	2c6d2 <__sfvwrite_r+0xae>
   2c8b4:	4629      	mov	r1, r5
   2c8b6:	465a      	mov	r2, fp
   2c8b8:	f7fe fa78 	bl	2adac <memmove>
   2c8bc:	6823      	ldr	r3, [r4, #0]
   2c8be:	445b      	add	r3, fp
   2c8c0:	6023      	str	r3, [r4, #0]
   2c8c2:	4621      	mov	r1, r4
   2c8c4:	4640      	mov	r0, r8
   2c8c6:	f7ff fc09 	bl	2c0dc <_fflush_r>
   2c8ca:	2800      	cmp	r0, #0
   2c8cc:	f43f af56 	beq.w	2c77c <__sfvwrite_r+0x158>
   2c8d0:	e727      	b.n	2c722 <__sfvwrite_r+0xfe>
   2c8d2:	4640      	mov	r0, r8
   2c8d4:	f000 fb96 	bl	2d004 <_realloc_r>
   2c8d8:	4603      	mov	r3, r0
   2c8da:	2800      	cmp	r0, #0
   2c8dc:	d1de      	bne.n	2c89c <__sfvwrite_r+0x278>
   2c8de:	6921      	ldr	r1, [r4, #16]
   2c8e0:	4640      	mov	r0, r8
   2c8e2:	f7ff fd99 	bl	2c418 <_free_r>
   2c8e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2c8ea:	220c      	movs	r2, #12
   2c8ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   2c8f0:	f8c8 2000 	str.w	r2, [r8]
   2c8f4:	e717      	b.n	2c726 <__sfvwrite_r+0x102>
   2c8f6:	1c72      	adds	r2, r6, #1
   2c8f8:	4691      	mov	r9, r2
   2c8fa:	e727      	b.n	2c74c <__sfvwrite_r+0x128>
   2c8fc:	220c      	movs	r2, #12
   2c8fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2c902:	f8c8 2000 	str.w	r2, [r8]
   2c906:	e70e      	b.n	2c726 <__sfvwrite_r+0x102>
   2c908:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c90c:	e6bc      	b.n	2c688 <__sfvwrite_r+0x64>
   2c90e:	bf00      	nop
   2c910:	7ffffc00 	.word	0x7ffffc00

0002c914 <_fwalk_reent>:
   2c914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2c918:	4607      	mov	r7, r0
   2c91a:	4688      	mov	r8, r1
   2c91c:	f500 7638 	add.w	r6, r0, #736	; 0x2e0
   2c920:	f04f 0900 	mov.w	r9, #0
   2c924:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   2c928:	3d01      	subs	r5, #1
   2c92a:	d411      	bmi.n	2c950 <_fwalk_reent+0x3c>
   2c92c:	89a3      	ldrh	r3, [r4, #12]
   2c92e:	2b01      	cmp	r3, #1
   2c930:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   2c934:	d908      	bls.n	2c948 <_fwalk_reent+0x34>
   2c936:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   2c93a:	3301      	adds	r3, #1
   2c93c:	4621      	mov	r1, r4
   2c93e:	d003      	beq.n	2c948 <_fwalk_reent+0x34>
   2c940:	4638      	mov	r0, r7
   2c942:	47c0      	blx	r8
   2c944:	ea49 0900 	orr.w	r9, r9, r0
   2c948:	1c6b      	adds	r3, r5, #1
   2c94a:	f104 0468 	add.w	r4, r4, #104	; 0x68
   2c94e:	d1ed      	bne.n	2c92c <_fwalk_reent+0x18>
   2c950:	6836      	ldr	r6, [r6, #0]
   2c952:	2e00      	cmp	r6, #0
   2c954:	d1e6      	bne.n	2c924 <_fwalk_reent+0x10>
   2c956:	4648      	mov	r0, r9
   2c958:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002c95c <__locale_mb_cur_max>:
   2c95c:	4b01      	ldr	r3, [pc, #4]	; (2c964 <__locale_mb_cur_max+0x8>)
   2c95e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   2c962:	4770      	bx	lr
   2c964:	100044f4 	.word	0x100044f4

0002c968 <_localeconv_r>:
   2c968:	4800      	ldr	r0, [pc, #0]	; (2c96c <_localeconv_r+0x4>)
   2c96a:	4770      	bx	lr
   2c96c:	100045e4 	.word	0x100045e4

0002c970 <__retarget_lock_init_recursive>:
   2c970:	4770      	bx	lr
   2c972:	bf00      	nop

0002c974 <__retarget_lock_close_recursive>:
   2c974:	4770      	bx	lr
   2c976:	bf00      	nop

0002c978 <__retarget_lock_acquire_recursive>:
   2c978:	4770      	bx	lr
   2c97a:	bf00      	nop

0002c97c <__retarget_lock_release_recursive>:
   2c97c:	4770      	bx	lr
   2c97e:	bf00      	nop

0002c980 <__smakebuf_r>:
   2c980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c984:	898b      	ldrh	r3, [r1, #12]
   2c986:	460c      	mov	r4, r1
   2c988:	0799      	lsls	r1, r3, #30
   2c98a:	b096      	sub	sp, #88	; 0x58
   2c98c:	d508      	bpl.n	2c9a0 <__smakebuf_r+0x20>
   2c98e:	f104 0343 	add.w	r3, r4, #67	; 0x43
   2c992:	2201      	movs	r2, #1
   2c994:	e9c4 3204 	strd	r3, r2, [r4, #16]
   2c998:	6023      	str	r3, [r4, #0]
   2c99a:	b016      	add	sp, #88	; 0x58
   2c99c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2c9a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   2c9a4:	2900      	cmp	r1, #0
   2c9a6:	4606      	mov	r6, r0
   2c9a8:	db27      	blt.n	2c9fa <__smakebuf_r+0x7a>
   2c9aa:	466a      	mov	r2, sp
   2c9ac:	f000 fef8 	bl	2d7a0 <_fstat_r>
   2c9b0:	2800      	cmp	r0, #0
   2c9b2:	db21      	blt.n	2c9f8 <__smakebuf_r+0x78>
   2c9b4:	9d01      	ldr	r5, [sp, #4]
   2c9b6:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   2c9ba:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   2c9be:	fab5 f585 	clz	r5, r5
   2c9c2:	f44f 6880 	mov.w	r8, #1024	; 0x400
   2c9c6:	096d      	lsrs	r5, r5, #5
   2c9c8:	f44f 6700 	mov.w	r7, #2048	; 0x800
   2c9cc:	4641      	mov	r1, r8
   2c9ce:	4630      	mov	r0, r6
   2c9d0:	f000 f846 	bl	2ca60 <_malloc_r>
   2c9d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2c9d8:	b1f0      	cbz	r0, 2ca18 <__smakebuf_r+0x98>
   2c9da:	4a20      	ldr	r2, [pc, #128]	; (2ca5c <__smakebuf_r+0xdc>)
   2c9dc:	63f2      	str	r2, [r6, #60]	; 0x3c
   2c9de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2c9e2:	f8c4 8014 	str.w	r8, [r4, #20]
   2c9e6:	81a3      	strh	r3, [r4, #12]
   2c9e8:	6020      	str	r0, [r4, #0]
   2c9ea:	6120      	str	r0, [r4, #16]
   2c9ec:	bb35      	cbnz	r5, 2ca3c <__smakebuf_r+0xbc>
   2c9ee:	433b      	orrs	r3, r7
   2c9f0:	81a3      	strh	r3, [r4, #12]
   2c9f2:	b016      	add	sp, #88	; 0x58
   2c9f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2c9f8:	89a3      	ldrh	r3, [r4, #12]
   2c9fa:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   2c9fe:	d019      	beq.n	2ca34 <__smakebuf_r+0xb4>
   2ca00:	f04f 0840 	mov.w	r8, #64	; 0x40
   2ca04:	4641      	mov	r1, r8
   2ca06:	4630      	mov	r0, r6
   2ca08:	f000 f82a 	bl	2ca60 <_malloc_r>
   2ca0c:	2500      	movs	r5, #0
   2ca0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2ca12:	462f      	mov	r7, r5
   2ca14:	2800      	cmp	r0, #0
   2ca16:	d1e0      	bne.n	2c9da <__smakebuf_r+0x5a>
   2ca18:	059a      	lsls	r2, r3, #22
   2ca1a:	d4be      	bmi.n	2c99a <__smakebuf_r+0x1a>
   2ca1c:	f023 0303 	bic.w	r3, r3, #3
   2ca20:	f104 0243 	add.w	r2, r4, #67	; 0x43
   2ca24:	f043 0302 	orr.w	r3, r3, #2
   2ca28:	2101      	movs	r1, #1
   2ca2a:	e9c4 2104 	strd	r2, r1, [r4, #16]
   2ca2e:	81a3      	strh	r3, [r4, #12]
   2ca30:	6022      	str	r2, [r4, #0]
   2ca32:	e7b2      	b.n	2c99a <__smakebuf_r+0x1a>
   2ca34:	f44f 6880 	mov.w	r8, #1024	; 0x400
   2ca38:	462f      	mov	r7, r5
   2ca3a:	e7c7      	b.n	2c9cc <__smakebuf_r+0x4c>
   2ca3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   2ca40:	4630      	mov	r0, r6
   2ca42:	f000 fec3 	bl	2d7cc <_isatty_r>
   2ca46:	b910      	cbnz	r0, 2ca4e <__smakebuf_r+0xce>
   2ca48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2ca4c:	e7cf      	b.n	2c9ee <__smakebuf_r+0x6e>
   2ca4e:	89a3      	ldrh	r3, [r4, #12]
   2ca50:	f023 0303 	bic.w	r3, r3, #3
   2ca54:	f043 0301 	orr.w	r3, r3, #1
   2ca58:	b21b      	sxth	r3, r3
   2ca5a:	e7c8      	b.n	2c9ee <__smakebuf_r+0x6e>
   2ca5c:	0002c139 	.word	0x0002c139

0002ca60 <_malloc_r>:
   2ca60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ca64:	f101 060b 	add.w	r6, r1, #11
   2ca68:	2e16      	cmp	r6, #22
   2ca6a:	b083      	sub	sp, #12
   2ca6c:	4604      	mov	r4, r0
   2ca6e:	d824      	bhi.n	2caba <_malloc_r+0x5a>
   2ca70:	2910      	cmp	r1, #16
   2ca72:	f200 80ba 	bhi.w	2cbea <_malloc_r+0x18a>
   2ca76:	f000 fab9 	bl	2cfec <__malloc_lock>
   2ca7a:	2610      	movs	r6, #16
   2ca7c:	2218      	movs	r2, #24
   2ca7e:	2002      	movs	r0, #2
   2ca80:	4fb5      	ldr	r7, [pc, #724]	; (2cd58 <_malloc_r+0x2f8>)
   2ca82:	443a      	add	r2, r7
   2ca84:	f1a2 0108 	sub.w	r1, r2, #8
   2ca88:	6853      	ldr	r3, [r2, #4]
   2ca8a:	428b      	cmp	r3, r1
   2ca8c:	f000 80ba 	beq.w	2cc04 <_malloc_r+0x1a4>
   2ca90:	685a      	ldr	r2, [r3, #4]
   2ca92:	68d9      	ldr	r1, [r3, #12]
   2ca94:	f022 0203 	bic.w	r2, r2, #3
   2ca98:	441a      	add	r2, r3
   2ca9a:	689d      	ldr	r5, [r3, #8]
   2ca9c:	60e9      	str	r1, [r5, #12]
   2ca9e:	608d      	str	r5, [r1, #8]
   2caa0:	6851      	ldr	r1, [r2, #4]
   2caa2:	f041 0101 	orr.w	r1, r1, #1
   2caa6:	4620      	mov	r0, r4
   2caa8:	6051      	str	r1, [r2, #4]
   2caaa:	f103 0508 	add.w	r5, r3, #8
   2caae:	f000 faa3 	bl	2cff8 <__malloc_unlock>
   2cab2:	4628      	mov	r0, r5
   2cab4:	b003      	add	sp, #12
   2cab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2caba:	f036 0607 	bics.w	r6, r6, #7
   2cabe:	f100 8094 	bmi.w	2cbea <_malloc_r+0x18a>
   2cac2:	42b1      	cmp	r1, r6
   2cac4:	f200 8091 	bhi.w	2cbea <_malloc_r+0x18a>
   2cac8:	f000 fa90 	bl	2cfec <__malloc_lock>
   2cacc:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   2cad0:	f0c0 819a 	bcc.w	2ce08 <_malloc_r+0x3a8>
   2cad4:	0a73      	lsrs	r3, r6, #9
   2cad6:	f000 808f 	beq.w	2cbf8 <_malloc_r+0x198>
   2cada:	2b04      	cmp	r3, #4
   2cadc:	f200 816f 	bhi.w	2cdbe <_malloc_r+0x35e>
   2cae0:	09b3      	lsrs	r3, r6, #6
   2cae2:	f103 0039 	add.w	r0, r3, #57	; 0x39
   2cae6:	f103 0c38 	add.w	ip, r3, #56	; 0x38
   2caea:	00c3      	lsls	r3, r0, #3
   2caec:	4f9a      	ldr	r7, [pc, #616]	; (2cd58 <_malloc_r+0x2f8>)
   2caee:	443b      	add	r3, r7
   2caf0:	f1a3 0508 	sub.w	r5, r3, #8
   2caf4:	685b      	ldr	r3, [r3, #4]
   2caf6:	429d      	cmp	r5, r3
   2caf8:	d106      	bne.n	2cb08 <_malloc_r+0xa8>
   2cafa:	e00c      	b.n	2cb16 <_malloc_r+0xb6>
   2cafc:	2900      	cmp	r1, #0
   2cafe:	f280 8127 	bge.w	2cd50 <_malloc_r+0x2f0>
   2cb02:	68db      	ldr	r3, [r3, #12]
   2cb04:	429d      	cmp	r5, r3
   2cb06:	d006      	beq.n	2cb16 <_malloc_r+0xb6>
   2cb08:	685a      	ldr	r2, [r3, #4]
   2cb0a:	f022 0203 	bic.w	r2, r2, #3
   2cb0e:	1b91      	subs	r1, r2, r6
   2cb10:	290f      	cmp	r1, #15
   2cb12:	ddf3      	ble.n	2cafc <_malloc_r+0x9c>
   2cb14:	4660      	mov	r0, ip
   2cb16:	693d      	ldr	r5, [r7, #16]
   2cb18:	f8df c250 	ldr.w	ip, [pc, #592]	; 2cd6c <_malloc_r+0x30c>
   2cb1c:	4565      	cmp	r5, ip
   2cb1e:	d07c      	beq.n	2cc1a <_malloc_r+0x1ba>
   2cb20:	686a      	ldr	r2, [r5, #4]
   2cb22:	f022 0203 	bic.w	r2, r2, #3
   2cb26:	1b93      	subs	r3, r2, r6
   2cb28:	2b0f      	cmp	r3, #15
   2cb2a:	f300 817b 	bgt.w	2ce24 <_malloc_r+0x3c4>
   2cb2e:	2b00      	cmp	r3, #0
   2cb30:	e9c7 cc04 	strd	ip, ip, [r7, #16]
   2cb34:	f280 816c 	bge.w	2ce10 <_malloc_r+0x3b0>
   2cb38:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   2cb3c:	f080 811a 	bcs.w	2cd74 <_malloc_r+0x314>
   2cb40:	08d3      	lsrs	r3, r2, #3
   2cb42:	6879      	ldr	r1, [r7, #4]
   2cb44:	3301      	adds	r3, #1
   2cb46:	ea4f 1e52 	mov.w	lr, r2, lsr #5
   2cb4a:	2201      	movs	r2, #1
   2cb4c:	fa02 f20e 	lsl.w	r2, r2, lr
   2cb50:	430a      	orrs	r2, r1
   2cb52:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
   2cb56:	f8c5 e008 	str.w	lr, [r5, #8]
   2cb5a:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
   2cb5e:	3908      	subs	r1, #8
   2cb60:	60e9      	str	r1, [r5, #12]
   2cb62:	607a      	str	r2, [r7, #4]
   2cb64:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   2cb68:	f8ce 500c 	str.w	r5, [lr, #12]
   2cb6c:	1083      	asrs	r3, r0, #2
   2cb6e:	2101      	movs	r1, #1
   2cb70:	4099      	lsls	r1, r3
   2cb72:	4291      	cmp	r1, r2
   2cb74:	d857      	bhi.n	2cc26 <_malloc_r+0x1c6>
   2cb76:	4211      	tst	r1, r2
   2cb78:	d106      	bne.n	2cb88 <_malloc_r+0x128>
   2cb7a:	f020 0003 	bic.w	r0, r0, #3
   2cb7e:	0049      	lsls	r1, r1, #1
   2cb80:	4211      	tst	r1, r2
   2cb82:	f100 0004 	add.w	r0, r0, #4
   2cb86:	d0fa      	beq.n	2cb7e <_malloc_r+0x11e>
   2cb88:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   2cb8c:	464d      	mov	r5, r9
   2cb8e:	4686      	mov	lr, r0
   2cb90:	f8d5 800c 	ldr.w	r8, [r5, #12]
   2cb94:	4545      	cmp	r5, r8
   2cb96:	d108      	bne.n	2cbaa <_malloc_r+0x14a>
   2cb98:	e11d      	b.n	2cdd6 <_malloc_r+0x376>
   2cb9a:	2b00      	cmp	r3, #0
   2cb9c:	f280 8124 	bge.w	2cde8 <_malloc_r+0x388>
   2cba0:	f8d8 800c 	ldr.w	r8, [r8, #12]
   2cba4:	4545      	cmp	r5, r8
   2cba6:	f000 8116 	beq.w	2cdd6 <_malloc_r+0x376>
   2cbaa:	f8d8 2004 	ldr.w	r2, [r8, #4]
   2cbae:	f022 0203 	bic.w	r2, r2, #3
   2cbb2:	1b93      	subs	r3, r2, r6
   2cbb4:	2b0f      	cmp	r3, #15
   2cbb6:	ddf0      	ble.n	2cb9a <_malloc_r+0x13a>
   2cbb8:	4620      	mov	r0, r4
   2cbba:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
   2cbbe:	eb08 0106 	add.w	r1, r8, r6
   2cbc2:	f046 0601 	orr.w	r6, r6, #1
   2cbc6:	f8c8 6004 	str.w	r6, [r8, #4]
   2cbca:	60ec      	str	r4, [r5, #12]
   2cbcc:	60a5      	str	r5, [r4, #8]
   2cbce:	f043 0401 	orr.w	r4, r3, #1
   2cbd2:	e9c7 1104 	strd	r1, r1, [r7, #16]
   2cbd6:	e9c1 cc02 	strd	ip, ip, [r1, #8]
   2cbda:	604c      	str	r4, [r1, #4]
   2cbdc:	f848 3002 	str.w	r3, [r8, r2]
   2cbe0:	f000 fa0a 	bl	2cff8 <__malloc_unlock>
   2cbe4:	f108 0508 	add.w	r5, r8, #8
   2cbe8:	e002      	b.n	2cbf0 <_malloc_r+0x190>
   2cbea:	230c      	movs	r3, #12
   2cbec:	6023      	str	r3, [r4, #0]
   2cbee:	2500      	movs	r5, #0
   2cbf0:	4628      	mov	r0, r5
   2cbf2:	b003      	add	sp, #12
   2cbf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cbf8:	f44f 7300 	mov.w	r3, #512	; 0x200
   2cbfc:	2040      	movs	r0, #64	; 0x40
   2cbfe:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   2cc02:	e773      	b.n	2caec <_malloc_r+0x8c>
   2cc04:	68d3      	ldr	r3, [r2, #12]
   2cc06:	429a      	cmp	r2, r3
   2cc08:	bf08      	it	eq
   2cc0a:	3002      	addeq	r0, #2
   2cc0c:	f47f af40 	bne.w	2ca90 <_malloc_r+0x30>
   2cc10:	693d      	ldr	r5, [r7, #16]
   2cc12:	f8df c158 	ldr.w	ip, [pc, #344]	; 2cd6c <_malloc_r+0x30c>
   2cc16:	4565      	cmp	r5, ip
   2cc18:	d182      	bne.n	2cb20 <_malloc_r+0xc0>
   2cc1a:	687a      	ldr	r2, [r7, #4]
   2cc1c:	1083      	asrs	r3, r0, #2
   2cc1e:	2101      	movs	r1, #1
   2cc20:	4099      	lsls	r1, r3
   2cc22:	4291      	cmp	r1, r2
   2cc24:	d9a7      	bls.n	2cb76 <_malloc_r+0x116>
   2cc26:	68bd      	ldr	r5, [r7, #8]
   2cc28:	686b      	ldr	r3, [r5, #4]
   2cc2a:	f023 0903 	bic.w	r9, r3, #3
   2cc2e:	454e      	cmp	r6, r9
   2cc30:	d803      	bhi.n	2cc3a <_malloc_r+0x1da>
   2cc32:	eba9 0306 	sub.w	r3, r9, r6
   2cc36:	2b0f      	cmp	r3, #15
   2cc38:	dc7a      	bgt.n	2cd30 <_malloc_r+0x2d0>
   2cc3a:	f8df b134 	ldr.w	fp, [pc, #308]	; 2cd70 <_malloc_r+0x310>
   2cc3e:	4b47      	ldr	r3, [pc, #284]	; (2cd5c <_malloc_r+0x2fc>)
   2cc40:	f8db 2000 	ldr.w	r2, [fp]
   2cc44:	681b      	ldr	r3, [r3, #0]
   2cc46:	3201      	adds	r2, #1
   2cc48:	4433      	add	r3, r6
   2cc4a:	eb05 0a09 	add.w	sl, r5, r9
   2cc4e:	f000 8133 	beq.w	2ceb8 <_malloc_r+0x458>
   2cc52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   2cc56:	330f      	adds	r3, #15
   2cc58:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
   2cc5c:	f028 080f 	bic.w	r8, r8, #15
   2cc60:	4641      	mov	r1, r8
   2cc62:	4620      	mov	r0, r4
   2cc64:	f000 fbba 	bl	2d3dc <_sbrk_r>
   2cc68:	1c41      	adds	r1, r0, #1
   2cc6a:	4602      	mov	r2, r0
   2cc6c:	f000 80f3 	beq.w	2ce56 <_malloc_r+0x3f6>
   2cc70:	4582      	cmp	sl, r0
   2cc72:	f200 80ee 	bhi.w	2ce52 <_malloc_r+0x3f2>
   2cc76:	4b3a      	ldr	r3, [pc, #232]	; (2cd60 <_malloc_r+0x300>)
   2cc78:	6819      	ldr	r1, [r3, #0]
   2cc7a:	4441      	add	r1, r8
   2cc7c:	6019      	str	r1, [r3, #0]
   2cc7e:	4608      	mov	r0, r1
   2cc80:	f000 814e 	beq.w	2cf20 <_malloc_r+0x4c0>
   2cc84:	f8db 1000 	ldr.w	r1, [fp]
   2cc88:	9301      	str	r3, [sp, #4]
   2cc8a:	3101      	adds	r1, #1
   2cc8c:	bf1b      	ittet	ne
   2cc8e:	eba2 0a0a 	subne.w	sl, r2, sl
   2cc92:	4450      	addne	r0, sl
   2cc94:	f8cb 2000 	streq.w	r2, [fp]
   2cc98:	6018      	strne	r0, [r3, #0]
   2cc9a:	f012 0b07 	ands.w	fp, r2, #7
   2cc9e:	f000 8117 	beq.w	2ced0 <_malloc_r+0x470>
   2cca2:	f1cb 0108 	rsb	r1, fp, #8
   2cca6:	440a      	add	r2, r1
   2cca8:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
   2ccac:	4490      	add	r8, r2
   2ccae:	3108      	adds	r1, #8
   2ccb0:	eba1 0108 	sub.w	r1, r1, r8
   2ccb4:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   2ccb8:	4651      	mov	r1, sl
   2ccba:	4620      	mov	r0, r4
   2ccbc:	9200      	str	r2, [sp, #0]
   2ccbe:	f000 fb8d 	bl	2d3dc <_sbrk_r>
   2ccc2:	1c42      	adds	r2, r0, #1
   2ccc4:	e9dd 2300 	ldrd	r2, r3, [sp]
   2ccc8:	f000 814f 	beq.w	2cf6a <_malloc_r+0x50a>
   2cccc:	1a80      	subs	r0, r0, r2
   2ccce:	eb00 080a 	add.w	r8, r0, sl
   2ccd2:	6819      	ldr	r1, [r3, #0]
   2ccd4:	60ba      	str	r2, [r7, #8]
   2ccd6:	f048 0001 	orr.w	r0, r8, #1
   2ccda:	4451      	add	r1, sl
   2ccdc:	42bd      	cmp	r5, r7
   2ccde:	6050      	str	r0, [r2, #4]
   2cce0:	6019      	str	r1, [r3, #0]
   2cce2:	f000 8129 	beq.w	2cf38 <_malloc_r+0x4d8>
   2cce6:	f1b9 0f0f 	cmp.w	r9, #15
   2ccea:	f240 8127 	bls.w	2cf3c <_malloc_r+0x4dc>
   2ccee:	6868      	ldr	r0, [r5, #4]
   2ccf0:	f1a9 0c0c 	sub.w	ip, r9, #12
   2ccf4:	f02c 0c07 	bic.w	ip, ip, #7
   2ccf8:	f000 0001 	and.w	r0, r0, #1
   2ccfc:	ea40 000c 	orr.w	r0, r0, ip
   2cd00:	6068      	str	r0, [r5, #4]
   2cd02:	f04f 0e05 	mov.w	lr, #5
   2cd06:	eb05 000c 	add.w	r0, r5, ip
   2cd0a:	f1bc 0f0f 	cmp.w	ip, #15
   2cd0e:	e9c0 ee01 	strd	lr, lr, [r0, #4]
   2cd12:	f200 8132 	bhi.w	2cf7a <_malloc_r+0x51a>
   2cd16:	6850      	ldr	r0, [r2, #4]
   2cd18:	4615      	mov	r5, r2
   2cd1a:	4b12      	ldr	r3, [pc, #72]	; (2cd64 <_malloc_r+0x304>)
   2cd1c:	681a      	ldr	r2, [r3, #0]
   2cd1e:	428a      	cmp	r2, r1
   2cd20:	bf38      	it	cc
   2cd22:	6019      	strcc	r1, [r3, #0]
   2cd24:	4b10      	ldr	r3, [pc, #64]	; (2cd68 <_malloc_r+0x308>)
   2cd26:	681a      	ldr	r2, [r3, #0]
   2cd28:	428a      	cmp	r2, r1
   2cd2a:	bf38      	it	cc
   2cd2c:	6019      	strcc	r1, [r3, #0]
   2cd2e:	e094      	b.n	2ce5a <_malloc_r+0x3fa>
   2cd30:	19aa      	adds	r2, r5, r6
   2cd32:	f043 0301 	orr.w	r3, r3, #1
   2cd36:	f046 0601 	orr.w	r6, r6, #1
   2cd3a:	606e      	str	r6, [r5, #4]
   2cd3c:	4620      	mov	r0, r4
   2cd3e:	60ba      	str	r2, [r7, #8]
   2cd40:	6053      	str	r3, [r2, #4]
   2cd42:	f000 f959 	bl	2cff8 <__malloc_unlock>
   2cd46:	3508      	adds	r5, #8
   2cd48:	4628      	mov	r0, r5
   2cd4a:	b003      	add	sp, #12
   2cd4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cd50:	68d9      	ldr	r1, [r3, #12]
   2cd52:	441a      	add	r2, r3
   2cd54:	e6a1      	b.n	2ca9a <_malloc_r+0x3a>
   2cd56:	bf00      	nop
   2cd58:	10004660 	.word	0x10004660
   2cd5c:	10019790 	.word	0x10019790
   2cd60:	10019760 	.word	0x10019760
   2cd64:	10019788 	.word	0x10019788
   2cd68:	1001978c 	.word	0x1001978c
   2cd6c:	10004668 	.word	0x10004668
   2cd70:	10004a68 	.word	0x10004a68
   2cd74:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   2cd78:	ea4f 2352 	mov.w	r3, r2, lsr #9
   2cd7c:	d363      	bcc.n	2ce46 <_malloc_r+0x3e6>
   2cd7e:	2b14      	cmp	r3, #20
   2cd80:	f200 80b7 	bhi.w	2cef2 <_malloc_r+0x492>
   2cd84:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   2cd88:	00c9      	lsls	r1, r1, #3
   2cd8a:	335b      	adds	r3, #91	; 0x5b
   2cd8c:	eb07 0e01 	add.w	lr, r7, r1
   2cd90:	5879      	ldr	r1, [r7, r1]
   2cd92:	f1ae 0e08 	sub.w	lr, lr, #8
   2cd96:	458e      	cmp	lr, r1
   2cd98:	f000 8091 	beq.w	2cebe <_malloc_r+0x45e>
   2cd9c:	684b      	ldr	r3, [r1, #4]
   2cd9e:	f023 0303 	bic.w	r3, r3, #3
   2cda2:	4293      	cmp	r3, r2
   2cda4:	d902      	bls.n	2cdac <_malloc_r+0x34c>
   2cda6:	6889      	ldr	r1, [r1, #8]
   2cda8:	458e      	cmp	lr, r1
   2cdaa:	d1f7      	bne.n	2cd9c <_malloc_r+0x33c>
   2cdac:	f8d1 e00c 	ldr.w	lr, [r1, #12]
   2cdb0:	687a      	ldr	r2, [r7, #4]
   2cdb2:	e9c5 1e02 	strd	r1, lr, [r5, #8]
   2cdb6:	f8ce 5008 	str.w	r5, [lr, #8]
   2cdba:	60cd      	str	r5, [r1, #12]
   2cdbc:	e6d6      	b.n	2cb6c <_malloc_r+0x10c>
   2cdbe:	2b14      	cmp	r3, #20
   2cdc0:	d959      	bls.n	2ce76 <_malloc_r+0x416>
   2cdc2:	2b54      	cmp	r3, #84	; 0x54
   2cdc4:	f200 809d 	bhi.w	2cf02 <_malloc_r+0x4a2>
   2cdc8:	0b33      	lsrs	r3, r6, #12
   2cdca:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   2cdce:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
   2cdd2:	00c3      	lsls	r3, r0, #3
   2cdd4:	e68a      	b.n	2caec <_malloc_r+0x8c>
   2cdd6:	f10e 0e01 	add.w	lr, lr, #1
   2cdda:	f01e 0f03 	tst.w	lr, #3
   2cdde:	f105 0508 	add.w	r5, r5, #8
   2cde2:	f47f aed5 	bne.w	2cb90 <_malloc_r+0x130>
   2cde6:	e051      	b.n	2ce8c <_malloc_r+0x42c>
   2cde8:	4442      	add	r2, r8
   2cdea:	4645      	mov	r5, r8
   2cdec:	6853      	ldr	r3, [r2, #4]
   2cdee:	f8d8 100c 	ldr.w	r1, [r8, #12]
   2cdf2:	f043 0301 	orr.w	r3, r3, #1
   2cdf6:	6053      	str	r3, [r2, #4]
   2cdf8:	f855 3f08 	ldr.w	r3, [r5, #8]!
   2cdfc:	4620      	mov	r0, r4
   2cdfe:	60d9      	str	r1, [r3, #12]
   2ce00:	608b      	str	r3, [r1, #8]
   2ce02:	f000 f8f9 	bl	2cff8 <__malloc_unlock>
   2ce06:	e6f3      	b.n	2cbf0 <_malloc_r+0x190>
   2ce08:	08f0      	lsrs	r0, r6, #3
   2ce0a:	f106 0208 	add.w	r2, r6, #8
   2ce0e:	e637      	b.n	2ca80 <_malloc_r+0x20>
   2ce10:	442a      	add	r2, r5
   2ce12:	4620      	mov	r0, r4
   2ce14:	6853      	ldr	r3, [r2, #4]
   2ce16:	f043 0301 	orr.w	r3, r3, #1
   2ce1a:	6053      	str	r3, [r2, #4]
   2ce1c:	3508      	adds	r5, #8
   2ce1e:	f000 f8eb 	bl	2cff8 <__malloc_unlock>
   2ce22:	e6e5      	b.n	2cbf0 <_malloc_r+0x190>
   2ce24:	19a9      	adds	r1, r5, r6
   2ce26:	4620      	mov	r0, r4
   2ce28:	f046 0601 	orr.w	r6, r6, #1
   2ce2c:	f043 0401 	orr.w	r4, r3, #1
   2ce30:	606e      	str	r6, [r5, #4]
   2ce32:	e9c7 1104 	strd	r1, r1, [r7, #16]
   2ce36:	e9c1 cc02 	strd	ip, ip, [r1, #8]
   2ce3a:	604c      	str	r4, [r1, #4]
   2ce3c:	50ab      	str	r3, [r5, r2]
   2ce3e:	f000 f8db 	bl	2cff8 <__malloc_unlock>
   2ce42:	3508      	adds	r5, #8
   2ce44:	e6d4      	b.n	2cbf0 <_malloc_r+0x190>
   2ce46:	0993      	lsrs	r3, r2, #6
   2ce48:	f103 0139 	add.w	r1, r3, #57	; 0x39
   2ce4c:	00c9      	lsls	r1, r1, #3
   2ce4e:	3338      	adds	r3, #56	; 0x38
   2ce50:	e79c      	b.n	2cd8c <_malloc_r+0x32c>
   2ce52:	42bd      	cmp	r5, r7
   2ce54:	d05f      	beq.n	2cf16 <_malloc_r+0x4b6>
   2ce56:	68bd      	ldr	r5, [r7, #8]
   2ce58:	6868      	ldr	r0, [r5, #4]
   2ce5a:	f020 0803 	bic.w	r8, r0, #3
   2ce5e:	4546      	cmp	r6, r8
   2ce60:	eba8 0306 	sub.w	r3, r8, r6
   2ce64:	d802      	bhi.n	2ce6c <_malloc_r+0x40c>
   2ce66:	2b0f      	cmp	r3, #15
   2ce68:	f73f af62 	bgt.w	2cd30 <_malloc_r+0x2d0>
   2ce6c:	4620      	mov	r0, r4
   2ce6e:	f000 f8c3 	bl	2cff8 <__malloc_unlock>
   2ce72:	2500      	movs	r5, #0
   2ce74:	e6bc      	b.n	2cbf0 <_malloc_r+0x190>
   2ce76:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   2ce7a:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
   2ce7e:	00c3      	lsls	r3, r0, #3
   2ce80:	e634      	b.n	2caec <_malloc_r+0x8c>
   2ce82:	f859 3908 	ldr.w	r3, [r9], #-8
   2ce86:	454b      	cmp	r3, r9
   2ce88:	f040 8096 	bne.w	2cfb8 <_malloc_r+0x558>
   2ce8c:	f010 0f03 	tst.w	r0, #3
   2ce90:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
   2ce94:	d1f5      	bne.n	2ce82 <_malloc_r+0x422>
   2ce96:	687b      	ldr	r3, [r7, #4]
   2ce98:	ea23 0301 	bic.w	r3, r3, r1
   2ce9c:	607b      	str	r3, [r7, #4]
   2ce9e:	0049      	lsls	r1, r1, #1
   2cea0:	4299      	cmp	r1, r3
   2cea2:	f63f aec0 	bhi.w	2cc26 <_malloc_r+0x1c6>
   2cea6:	b919      	cbnz	r1, 2ceb0 <_malloc_r+0x450>
   2cea8:	e6bd      	b.n	2cc26 <_malloc_r+0x1c6>
   2ceaa:	0049      	lsls	r1, r1, #1
   2ceac:	f10e 0e04 	add.w	lr, lr, #4
   2ceb0:	4219      	tst	r1, r3
   2ceb2:	d0fa      	beq.n	2ceaa <_malloc_r+0x44a>
   2ceb4:	4670      	mov	r0, lr
   2ceb6:	e667      	b.n	2cb88 <_malloc_r+0x128>
   2ceb8:	f103 0810 	add.w	r8, r3, #16
   2cebc:	e6d0      	b.n	2cc60 <_malloc_r+0x200>
   2cebe:	109a      	asrs	r2, r3, #2
   2cec0:	f04f 0801 	mov.w	r8, #1
   2cec4:	687b      	ldr	r3, [r7, #4]
   2cec6:	fa08 f202 	lsl.w	r2, r8, r2
   2ceca:	431a      	orrs	r2, r3
   2cecc:	607a      	str	r2, [r7, #4]
   2cece:	e770      	b.n	2cdb2 <_malloc_r+0x352>
   2ced0:	eb02 0108 	add.w	r1, r2, r8
   2ced4:	4249      	negs	r1, r1
   2ced6:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   2ceda:	4651      	mov	r1, sl
   2cedc:	4620      	mov	r0, r4
   2cede:	9200      	str	r2, [sp, #0]
   2cee0:	f000 fa7c 	bl	2d3dc <_sbrk_r>
   2cee4:	1c43      	adds	r3, r0, #1
   2cee6:	e9dd 2300 	ldrd	r2, r3, [sp]
   2ceea:	f47f aeef 	bne.w	2cccc <_malloc_r+0x26c>
   2ceee:	46da      	mov	sl, fp
   2cef0:	e6ef      	b.n	2ccd2 <_malloc_r+0x272>
   2cef2:	2b54      	cmp	r3, #84	; 0x54
   2cef4:	d825      	bhi.n	2cf42 <_malloc_r+0x4e2>
   2cef6:	0b13      	lsrs	r3, r2, #12
   2cef8:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   2cefc:	00c9      	lsls	r1, r1, #3
   2cefe:	336e      	adds	r3, #110	; 0x6e
   2cf00:	e744      	b.n	2cd8c <_malloc_r+0x32c>
   2cf02:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   2cf06:	d825      	bhi.n	2cf54 <_malloc_r+0x4f4>
   2cf08:	0bf3      	lsrs	r3, r6, #15
   2cf0a:	f103 0078 	add.w	r0, r3, #120	; 0x78
   2cf0e:	f103 0c77 	add.w	ip, r3, #119	; 0x77
   2cf12:	00c3      	lsls	r3, r0, #3
   2cf14:	e5ea      	b.n	2caec <_malloc_r+0x8c>
   2cf16:	4b29      	ldr	r3, [pc, #164]	; (2cfbc <_malloc_r+0x55c>)
   2cf18:	6818      	ldr	r0, [r3, #0]
   2cf1a:	4440      	add	r0, r8
   2cf1c:	6018      	str	r0, [r3, #0]
   2cf1e:	e6b1      	b.n	2cc84 <_malloc_r+0x224>
   2cf20:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   2cf24:	f1bc 0f00 	cmp.w	ip, #0
   2cf28:	f47f aeac 	bne.w	2cc84 <_malloc_r+0x224>
   2cf2c:	68bd      	ldr	r5, [r7, #8]
   2cf2e:	44c8      	add	r8, r9
   2cf30:	f048 0001 	orr.w	r0, r8, #1
   2cf34:	6068      	str	r0, [r5, #4]
   2cf36:	e6f0      	b.n	2cd1a <_malloc_r+0x2ba>
   2cf38:	4615      	mov	r5, r2
   2cf3a:	e6ee      	b.n	2cd1a <_malloc_r+0x2ba>
   2cf3c:	2301      	movs	r3, #1
   2cf3e:	6053      	str	r3, [r2, #4]
   2cf40:	e794      	b.n	2ce6c <_malloc_r+0x40c>
   2cf42:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   2cf46:	d823      	bhi.n	2cf90 <_malloc_r+0x530>
   2cf48:	0bd3      	lsrs	r3, r2, #15
   2cf4a:	f103 0178 	add.w	r1, r3, #120	; 0x78
   2cf4e:	00c9      	lsls	r1, r1, #3
   2cf50:	3377      	adds	r3, #119	; 0x77
   2cf52:	e71b      	b.n	2cd8c <_malloc_r+0x32c>
   2cf54:	f240 5254 	movw	r2, #1364	; 0x554
   2cf58:	4293      	cmp	r3, r2
   2cf5a:	d823      	bhi.n	2cfa4 <_malloc_r+0x544>
   2cf5c:	0cb3      	lsrs	r3, r6, #18
   2cf5e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   2cf62:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
   2cf66:	00c3      	lsls	r3, r0, #3
   2cf68:	e5c0      	b.n	2caec <_malloc_r+0x8c>
   2cf6a:	f1ab 0b08 	sub.w	fp, fp, #8
   2cf6e:	44d8      	add	r8, fp
   2cf70:	eba8 0802 	sub.w	r8, r8, r2
   2cf74:	f04f 0a00 	mov.w	sl, #0
   2cf78:	e6ab      	b.n	2ccd2 <_malloc_r+0x272>
   2cf7a:	f105 0108 	add.w	r1, r5, #8
   2cf7e:	4620      	mov	r0, r4
   2cf80:	9300      	str	r3, [sp, #0]
   2cf82:	f7ff fa49 	bl	2c418 <_free_r>
   2cf86:	68bd      	ldr	r5, [r7, #8]
   2cf88:	9b00      	ldr	r3, [sp, #0]
   2cf8a:	6868      	ldr	r0, [r5, #4]
   2cf8c:	6819      	ldr	r1, [r3, #0]
   2cf8e:	e6c4      	b.n	2cd1a <_malloc_r+0x2ba>
   2cf90:	f240 5154 	movw	r1, #1364	; 0x554
   2cf94:	428b      	cmp	r3, r1
   2cf96:	d80b      	bhi.n	2cfb0 <_malloc_r+0x550>
   2cf98:	0c93      	lsrs	r3, r2, #18
   2cf9a:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   2cf9e:	00c9      	lsls	r1, r1, #3
   2cfa0:	337c      	adds	r3, #124	; 0x7c
   2cfa2:	e6f3      	b.n	2cd8c <_malloc_r+0x32c>
   2cfa4:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   2cfa8:	207f      	movs	r0, #127	; 0x7f
   2cfaa:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   2cfae:	e59d      	b.n	2caec <_malloc_r+0x8c>
   2cfb0:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   2cfb4:	237e      	movs	r3, #126	; 0x7e
   2cfb6:	e6e9      	b.n	2cd8c <_malloc_r+0x32c>
   2cfb8:	687b      	ldr	r3, [r7, #4]
   2cfba:	e770      	b.n	2ce9e <_malloc_r+0x43e>
   2cfbc:	10019760 	.word	0x10019760

0002cfc0 <__ascii_mbtowc>:
   2cfc0:	b082      	sub	sp, #8
   2cfc2:	b149      	cbz	r1, 2cfd8 <__ascii_mbtowc+0x18>
   2cfc4:	b15a      	cbz	r2, 2cfde <__ascii_mbtowc+0x1e>
   2cfc6:	b16b      	cbz	r3, 2cfe4 <__ascii_mbtowc+0x24>
   2cfc8:	7813      	ldrb	r3, [r2, #0]
   2cfca:	600b      	str	r3, [r1, #0]
   2cfcc:	7812      	ldrb	r2, [r2, #0]
   2cfce:	1e10      	subs	r0, r2, #0
   2cfd0:	bf18      	it	ne
   2cfd2:	2001      	movne	r0, #1
   2cfd4:	b002      	add	sp, #8
   2cfd6:	4770      	bx	lr
   2cfd8:	a901      	add	r1, sp, #4
   2cfda:	2a00      	cmp	r2, #0
   2cfdc:	d1f3      	bne.n	2cfc6 <__ascii_mbtowc+0x6>
   2cfde:	4610      	mov	r0, r2
   2cfe0:	b002      	add	sp, #8
   2cfe2:	4770      	bx	lr
   2cfe4:	f06f 0001 	mvn.w	r0, #1
   2cfe8:	e7f4      	b.n	2cfd4 <__ascii_mbtowc+0x14>
   2cfea:	bf00      	nop

0002cfec <__malloc_lock>:
   2cfec:	4801      	ldr	r0, [pc, #4]	; (2cff4 <__malloc_lock+0x8>)
   2cfee:	f7ff bcc3 	b.w	2c978 <__retarget_lock_acquire_recursive>
   2cff2:	bf00      	nop
   2cff4:	10019754 	.word	0x10019754

0002cff8 <__malloc_unlock>:
   2cff8:	4801      	ldr	r0, [pc, #4]	; (2d000 <__malloc_unlock+0x8>)
   2cffa:	f7ff bcbf 	b.w	2c97c <__retarget_lock_release_recursive>
   2cffe:	bf00      	nop
   2d000:	10019754 	.word	0x10019754

0002d004 <_realloc_r>:
   2d004:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d008:	4617      	mov	r7, r2
   2d00a:	2900      	cmp	r1, #0
   2d00c:	f000 8098 	beq.w	2d140 <_realloc_r+0x13c>
   2d010:	f107 050b 	add.w	r5, r7, #11
   2d014:	4680      	mov	r8, r0
   2d016:	460c      	mov	r4, r1
   2d018:	f7ff ffe8 	bl	2cfec <__malloc_lock>
   2d01c:	2d16      	cmp	r5, #22
   2d01e:	d85d      	bhi.n	2d0dc <_realloc_r+0xd8>
   2d020:	2510      	movs	r5, #16
   2d022:	462a      	mov	r2, r5
   2d024:	42af      	cmp	r7, r5
   2d026:	d85e      	bhi.n	2d0e6 <_realloc_r+0xe2>
   2d028:	f854 1c04 	ldr.w	r1, [r4, #-4]
   2d02c:	f021 0603 	bic.w	r6, r1, #3
   2d030:	4296      	cmp	r6, r2
   2d032:	f1a4 0908 	sub.w	r9, r4, #8
   2d036:	da62      	bge.n	2d0fe <_realloc_r+0xfa>
   2d038:	4bbc      	ldr	r3, [pc, #752]	; (2d32c <_realloc_r+0x328>)
   2d03a:	f8d3 c008 	ldr.w	ip, [r3, #8]
   2d03e:	eb09 0006 	add.w	r0, r9, r6
   2d042:	4584      	cmp	ip, r0
   2d044:	f000 8097 	beq.w	2d176 <_realloc_r+0x172>
   2d048:	f8d0 c004 	ldr.w	ip, [r0, #4]
   2d04c:	f02c 0301 	bic.w	r3, ip, #1
   2d050:	4403      	add	r3, r0
   2d052:	685b      	ldr	r3, [r3, #4]
   2d054:	07db      	lsls	r3, r3, #31
   2d056:	d468      	bmi.n	2d12a <_realloc_r+0x126>
   2d058:	f02c 0c03 	bic.w	ip, ip, #3
   2d05c:	eb06 030c 	add.w	r3, r6, ip
   2d060:	4293      	cmp	r3, r2
   2d062:	da47      	bge.n	2d0f4 <_realloc_r+0xf0>
   2d064:	07cb      	lsls	r3, r1, #31
   2d066:	d410      	bmi.n	2d08a <_realloc_r+0x86>
   2d068:	f854 3c08 	ldr.w	r3, [r4, #-8]
   2d06c:	eba9 0a03 	sub.w	sl, r9, r3
   2d070:	f8da 3004 	ldr.w	r3, [sl, #4]
   2d074:	f023 0103 	bic.w	r1, r3, #3
   2d078:	448c      	add	ip, r1
   2d07a:	44b4      	add	ip, r6
   2d07c:	4594      	cmp	ip, r2
   2d07e:	f280 8111 	bge.w	2d2a4 <_realloc_r+0x2a0>
   2d082:	1873      	adds	r3, r6, r1
   2d084:	4293      	cmp	r3, r2
   2d086:	f280 80e8 	bge.w	2d25a <_realloc_r+0x256>
   2d08a:	4639      	mov	r1, r7
   2d08c:	4640      	mov	r0, r8
   2d08e:	f7ff fce7 	bl	2ca60 <_malloc_r>
   2d092:	4607      	mov	r7, r0
   2d094:	b1e0      	cbz	r0, 2d0d0 <_realloc_r+0xcc>
   2d096:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2d09a:	f023 0301 	bic.w	r3, r3, #1
   2d09e:	444b      	add	r3, r9
   2d0a0:	f1a0 0208 	sub.w	r2, r0, #8
   2d0a4:	4293      	cmp	r3, r2
   2d0a6:	f000 80d2 	beq.w	2d24e <_realloc_r+0x24a>
   2d0aa:	1f32      	subs	r2, r6, #4
   2d0ac:	2a24      	cmp	r2, #36	; 0x24
   2d0ae:	f200 80f5 	bhi.w	2d29c <_realloc_r+0x298>
   2d0b2:	2a13      	cmp	r2, #19
   2d0b4:	f200 80ac 	bhi.w	2d210 <_realloc_r+0x20c>
   2d0b8:	4603      	mov	r3, r0
   2d0ba:	4622      	mov	r2, r4
   2d0bc:	6811      	ldr	r1, [r2, #0]
   2d0be:	6019      	str	r1, [r3, #0]
   2d0c0:	6851      	ldr	r1, [r2, #4]
   2d0c2:	6059      	str	r1, [r3, #4]
   2d0c4:	6892      	ldr	r2, [r2, #8]
   2d0c6:	609a      	str	r2, [r3, #8]
   2d0c8:	4621      	mov	r1, r4
   2d0ca:	4640      	mov	r0, r8
   2d0cc:	f7ff f9a4 	bl	2c418 <_free_r>
   2d0d0:	4640      	mov	r0, r8
   2d0d2:	f7ff ff91 	bl	2cff8 <__malloc_unlock>
   2d0d6:	4638      	mov	r0, r7
   2d0d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d0dc:	f025 0507 	bic.w	r5, r5, #7
   2d0e0:	2d00      	cmp	r5, #0
   2d0e2:	462a      	mov	r2, r5
   2d0e4:	da9e      	bge.n	2d024 <_realloc_r+0x20>
   2d0e6:	230c      	movs	r3, #12
   2d0e8:	f8c8 3000 	str.w	r3, [r8]
   2d0ec:	2700      	movs	r7, #0
   2d0ee:	4638      	mov	r0, r7
   2d0f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d0f4:	461e      	mov	r6, r3
   2d0f6:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   2d0fa:	60d3      	str	r3, [r2, #12]
   2d0fc:	609a      	str	r2, [r3, #8]
   2d0fe:	1b73      	subs	r3, r6, r5
   2d100:	2b0f      	cmp	r3, #15
   2d102:	d822      	bhi.n	2d14a <_realloc_r+0x146>
   2d104:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2d108:	f003 0301 	and.w	r3, r3, #1
   2d10c:	4333      	orrs	r3, r6
   2d10e:	444e      	add	r6, r9
   2d110:	f8c9 3004 	str.w	r3, [r9, #4]
   2d114:	6873      	ldr	r3, [r6, #4]
   2d116:	f043 0301 	orr.w	r3, r3, #1
   2d11a:	6073      	str	r3, [r6, #4]
   2d11c:	4640      	mov	r0, r8
   2d11e:	4627      	mov	r7, r4
   2d120:	f7ff ff6a 	bl	2cff8 <__malloc_unlock>
   2d124:	4638      	mov	r0, r7
   2d126:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d12a:	07c9      	lsls	r1, r1, #31
   2d12c:	d4ad      	bmi.n	2d08a <_realloc_r+0x86>
   2d12e:	f854 3c08 	ldr.w	r3, [r4, #-8]
   2d132:	eba9 0a03 	sub.w	sl, r9, r3
   2d136:	f8da 1004 	ldr.w	r1, [sl, #4]
   2d13a:	f021 0103 	bic.w	r1, r1, #3
   2d13e:	e7a0      	b.n	2d082 <_realloc_r+0x7e>
   2d140:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d144:	4611      	mov	r1, r2
   2d146:	f7ff bc8b 	b.w	2ca60 <_malloc_r>
   2d14a:	f8d9 1004 	ldr.w	r1, [r9, #4]
   2d14e:	f001 0101 	and.w	r1, r1, #1
   2d152:	4329      	orrs	r1, r5
   2d154:	f8c9 1004 	str.w	r1, [r9, #4]
   2d158:	eb09 0105 	add.w	r1, r9, r5
   2d15c:	444e      	add	r6, r9
   2d15e:	f043 0301 	orr.w	r3, r3, #1
   2d162:	604b      	str	r3, [r1, #4]
   2d164:	6873      	ldr	r3, [r6, #4]
   2d166:	f043 0301 	orr.w	r3, r3, #1
   2d16a:	3108      	adds	r1, #8
   2d16c:	6073      	str	r3, [r6, #4]
   2d16e:	4640      	mov	r0, r8
   2d170:	f7ff f952 	bl	2c418 <_free_r>
   2d174:	e7d2      	b.n	2d11c <_realloc_r+0x118>
   2d176:	f8dc 0004 	ldr.w	r0, [ip, #4]
   2d17a:	f020 0b03 	bic.w	fp, r0, #3
   2d17e:	eb06 0c0b 	add.w	ip, r6, fp
   2d182:	f105 0010 	add.w	r0, r5, #16
   2d186:	4584      	cmp	ip, r0
   2d188:	da4d      	bge.n	2d226 <_realloc_r+0x222>
   2d18a:	07c9      	lsls	r1, r1, #31
   2d18c:	f53f af7d 	bmi.w	2d08a <_realloc_r+0x86>
   2d190:	f854 1c08 	ldr.w	r1, [r4, #-8]
   2d194:	eba9 0a01 	sub.w	sl, r9, r1
   2d198:	f8da 1004 	ldr.w	r1, [sl, #4]
   2d19c:	f021 0103 	bic.w	r1, r1, #3
   2d1a0:	448b      	add	fp, r1
   2d1a2:	44b3      	add	fp, r6
   2d1a4:	4558      	cmp	r0, fp
   2d1a6:	f73f af6c 	bgt.w	2d082 <_realloc_r+0x7e>
   2d1aa:	4657      	mov	r7, sl
   2d1ac:	f8da 100c 	ldr.w	r1, [sl, #12]
   2d1b0:	f857 0f08 	ldr.w	r0, [r7, #8]!
   2d1b4:	1f32      	subs	r2, r6, #4
   2d1b6:	2a24      	cmp	r2, #36	; 0x24
   2d1b8:	60c1      	str	r1, [r0, #12]
   2d1ba:	6088      	str	r0, [r1, #8]
   2d1bc:	f200 80db 	bhi.w	2d376 <_realloc_r+0x372>
   2d1c0:	2a13      	cmp	r2, #19
   2d1c2:	f240 80d6 	bls.w	2d372 <_realloc_r+0x36e>
   2d1c6:	6821      	ldr	r1, [r4, #0]
   2d1c8:	f8ca 1008 	str.w	r1, [sl, #8]
   2d1cc:	6861      	ldr	r1, [r4, #4]
   2d1ce:	f8ca 100c 	str.w	r1, [sl, #12]
   2d1d2:	2a1b      	cmp	r2, #27
   2d1d4:	f200 80df 	bhi.w	2d396 <_realloc_r+0x392>
   2d1d8:	3408      	adds	r4, #8
   2d1da:	f10a 0210 	add.w	r2, sl, #16
   2d1de:	6821      	ldr	r1, [r4, #0]
   2d1e0:	6011      	str	r1, [r2, #0]
   2d1e2:	6861      	ldr	r1, [r4, #4]
   2d1e4:	6051      	str	r1, [r2, #4]
   2d1e6:	68a1      	ldr	r1, [r4, #8]
   2d1e8:	6091      	str	r1, [r2, #8]
   2d1ea:	eb0a 0105 	add.w	r1, sl, r5
   2d1ee:	ebab 0205 	sub.w	r2, fp, r5
   2d1f2:	f042 0201 	orr.w	r2, r2, #1
   2d1f6:	6099      	str	r1, [r3, #8]
   2d1f8:	604a      	str	r2, [r1, #4]
   2d1fa:	f8da 3004 	ldr.w	r3, [sl, #4]
   2d1fe:	f003 0301 	and.w	r3, r3, #1
   2d202:	431d      	orrs	r5, r3
   2d204:	4640      	mov	r0, r8
   2d206:	f8ca 5004 	str.w	r5, [sl, #4]
   2d20a:	f7ff fef5 	bl	2cff8 <__malloc_unlock>
   2d20e:	e76e      	b.n	2d0ee <_realloc_r+0xea>
   2d210:	6823      	ldr	r3, [r4, #0]
   2d212:	6003      	str	r3, [r0, #0]
   2d214:	6863      	ldr	r3, [r4, #4]
   2d216:	6043      	str	r3, [r0, #4]
   2d218:	2a1b      	cmp	r2, #27
   2d21a:	d868      	bhi.n	2d2ee <_realloc_r+0x2ea>
   2d21c:	f104 0208 	add.w	r2, r4, #8
   2d220:	f100 0308 	add.w	r3, r0, #8
   2d224:	e74a      	b.n	2d0bc <_realloc_r+0xb8>
   2d226:	eb09 0205 	add.w	r2, r9, r5
   2d22a:	609a      	str	r2, [r3, #8]
   2d22c:	ebac 0305 	sub.w	r3, ip, r5
   2d230:	f043 0301 	orr.w	r3, r3, #1
   2d234:	6053      	str	r3, [r2, #4]
   2d236:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2d23a:	f003 0301 	and.w	r3, r3, #1
   2d23e:	431d      	orrs	r5, r3
   2d240:	4640      	mov	r0, r8
   2d242:	f844 5c04 	str.w	r5, [r4, #-4]
   2d246:	f7ff fed7 	bl	2cff8 <__malloc_unlock>
   2d24a:	4627      	mov	r7, r4
   2d24c:	e74f      	b.n	2d0ee <_realloc_r+0xea>
   2d24e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2d252:	f023 0303 	bic.w	r3, r3, #3
   2d256:	441e      	add	r6, r3
   2d258:	e751      	b.n	2d0fe <_realloc_r+0xfa>
   2d25a:	4657      	mov	r7, sl
   2d25c:	f8da 100c 	ldr.w	r1, [sl, #12]
   2d260:	f857 0f08 	ldr.w	r0, [r7, #8]!
   2d264:	1f32      	subs	r2, r6, #4
   2d266:	2a24      	cmp	r2, #36	; 0x24
   2d268:	60c1      	str	r1, [r0, #12]
   2d26a:	6088      	str	r0, [r1, #8]
   2d26c:	d84c      	bhi.n	2d308 <_realloc_r+0x304>
   2d26e:	2a13      	cmp	r2, #19
   2d270:	d948      	bls.n	2d304 <_realloc_r+0x300>
   2d272:	6821      	ldr	r1, [r4, #0]
   2d274:	f8ca 1008 	str.w	r1, [sl, #8]
   2d278:	6861      	ldr	r1, [r4, #4]
   2d27a:	f8ca 100c 	str.w	r1, [sl, #12]
   2d27e:	2a1b      	cmp	r2, #27
   2d280:	d856      	bhi.n	2d330 <_realloc_r+0x32c>
   2d282:	3408      	adds	r4, #8
   2d284:	f10a 0210 	add.w	r2, sl, #16
   2d288:	461e      	mov	r6, r3
   2d28a:	6823      	ldr	r3, [r4, #0]
   2d28c:	6013      	str	r3, [r2, #0]
   2d28e:	6863      	ldr	r3, [r4, #4]
   2d290:	6053      	str	r3, [r2, #4]
   2d292:	68a3      	ldr	r3, [r4, #8]
   2d294:	6093      	str	r3, [r2, #8]
   2d296:	46d1      	mov	r9, sl
   2d298:	463c      	mov	r4, r7
   2d29a:	e730      	b.n	2d0fe <_realloc_r+0xfa>
   2d29c:	4621      	mov	r1, r4
   2d29e:	f7fd fd85 	bl	2adac <memmove>
   2d2a2:	e711      	b.n	2d0c8 <_realloc_r+0xc4>
   2d2a4:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   2d2a8:	4657      	mov	r7, sl
   2d2aa:	60cb      	str	r3, [r1, #12]
   2d2ac:	6099      	str	r1, [r3, #8]
   2d2ae:	f857 1f08 	ldr.w	r1, [r7, #8]!
   2d2b2:	f8da 300c 	ldr.w	r3, [sl, #12]
   2d2b6:	60cb      	str	r3, [r1, #12]
   2d2b8:	1f32      	subs	r2, r6, #4
   2d2ba:	2a24      	cmp	r2, #36	; 0x24
   2d2bc:	6099      	str	r1, [r3, #8]
   2d2be:	d82d      	bhi.n	2d31c <_realloc_r+0x318>
   2d2c0:	2a13      	cmp	r2, #19
   2d2c2:	d929      	bls.n	2d318 <_realloc_r+0x314>
   2d2c4:	6823      	ldr	r3, [r4, #0]
   2d2c6:	f8ca 3008 	str.w	r3, [sl, #8]
   2d2ca:	6863      	ldr	r3, [r4, #4]
   2d2cc:	f8ca 300c 	str.w	r3, [sl, #12]
   2d2d0:	2a1b      	cmp	r2, #27
   2d2d2:	d842      	bhi.n	2d35a <_realloc_r+0x356>
   2d2d4:	3408      	adds	r4, #8
   2d2d6:	f10a 0310 	add.w	r3, sl, #16
   2d2da:	6822      	ldr	r2, [r4, #0]
   2d2dc:	601a      	str	r2, [r3, #0]
   2d2de:	6862      	ldr	r2, [r4, #4]
   2d2e0:	605a      	str	r2, [r3, #4]
   2d2e2:	68a2      	ldr	r2, [r4, #8]
   2d2e4:	609a      	str	r2, [r3, #8]
   2d2e6:	4666      	mov	r6, ip
   2d2e8:	46d1      	mov	r9, sl
   2d2ea:	463c      	mov	r4, r7
   2d2ec:	e707      	b.n	2d0fe <_realloc_r+0xfa>
   2d2ee:	68a3      	ldr	r3, [r4, #8]
   2d2f0:	6083      	str	r3, [r0, #8]
   2d2f2:	68e3      	ldr	r3, [r4, #12]
   2d2f4:	60c3      	str	r3, [r0, #12]
   2d2f6:	2a24      	cmp	r2, #36	; 0x24
   2d2f8:	d026      	beq.n	2d348 <_realloc_r+0x344>
   2d2fa:	f104 0210 	add.w	r2, r4, #16
   2d2fe:	f100 0310 	add.w	r3, r0, #16
   2d302:	e6db      	b.n	2d0bc <_realloc_r+0xb8>
   2d304:	463a      	mov	r2, r7
   2d306:	e7bf      	b.n	2d288 <_realloc_r+0x284>
   2d308:	4621      	mov	r1, r4
   2d30a:	4638      	mov	r0, r7
   2d30c:	461e      	mov	r6, r3
   2d30e:	46d1      	mov	r9, sl
   2d310:	f7fd fd4c 	bl	2adac <memmove>
   2d314:	463c      	mov	r4, r7
   2d316:	e6f2      	b.n	2d0fe <_realloc_r+0xfa>
   2d318:	463b      	mov	r3, r7
   2d31a:	e7de      	b.n	2d2da <_realloc_r+0x2d6>
   2d31c:	4621      	mov	r1, r4
   2d31e:	4638      	mov	r0, r7
   2d320:	4666      	mov	r6, ip
   2d322:	46d1      	mov	r9, sl
   2d324:	f7fd fd42 	bl	2adac <memmove>
   2d328:	463c      	mov	r4, r7
   2d32a:	e6e8      	b.n	2d0fe <_realloc_r+0xfa>
   2d32c:	10004660 	.word	0x10004660
   2d330:	68a1      	ldr	r1, [r4, #8]
   2d332:	f8ca 1010 	str.w	r1, [sl, #16]
   2d336:	68e1      	ldr	r1, [r4, #12]
   2d338:	f8ca 1014 	str.w	r1, [sl, #20]
   2d33c:	2a24      	cmp	r2, #36	; 0x24
   2d33e:	d020      	beq.n	2d382 <_realloc_r+0x37e>
   2d340:	3410      	adds	r4, #16
   2d342:	f10a 0218 	add.w	r2, sl, #24
   2d346:	e79f      	b.n	2d288 <_realloc_r+0x284>
   2d348:	6923      	ldr	r3, [r4, #16]
   2d34a:	6103      	str	r3, [r0, #16]
   2d34c:	6961      	ldr	r1, [r4, #20]
   2d34e:	6141      	str	r1, [r0, #20]
   2d350:	f104 0218 	add.w	r2, r4, #24
   2d354:	f100 0318 	add.w	r3, r0, #24
   2d358:	e6b0      	b.n	2d0bc <_realloc_r+0xb8>
   2d35a:	68a3      	ldr	r3, [r4, #8]
   2d35c:	f8ca 3010 	str.w	r3, [sl, #16]
   2d360:	68e3      	ldr	r3, [r4, #12]
   2d362:	f8ca 3014 	str.w	r3, [sl, #20]
   2d366:	2a24      	cmp	r2, #36	; 0x24
   2d368:	d021      	beq.n	2d3ae <_realloc_r+0x3aa>
   2d36a:	3410      	adds	r4, #16
   2d36c:	f10a 0318 	add.w	r3, sl, #24
   2d370:	e7b3      	b.n	2d2da <_realloc_r+0x2d6>
   2d372:	463a      	mov	r2, r7
   2d374:	e733      	b.n	2d1de <_realloc_r+0x1da>
   2d376:	4621      	mov	r1, r4
   2d378:	4638      	mov	r0, r7
   2d37a:	f7fd fd17 	bl	2adac <memmove>
   2d37e:	4b16      	ldr	r3, [pc, #88]	; (2d3d8 <_realloc_r+0x3d4>)
   2d380:	e733      	b.n	2d1ea <_realloc_r+0x1e6>
   2d382:	6922      	ldr	r2, [r4, #16]
   2d384:	f8ca 2018 	str.w	r2, [sl, #24]
   2d388:	6962      	ldr	r2, [r4, #20]
   2d38a:	f8ca 201c 	str.w	r2, [sl, #28]
   2d38e:	3418      	adds	r4, #24
   2d390:	f10a 0220 	add.w	r2, sl, #32
   2d394:	e778      	b.n	2d288 <_realloc_r+0x284>
   2d396:	68a1      	ldr	r1, [r4, #8]
   2d398:	f8ca 1010 	str.w	r1, [sl, #16]
   2d39c:	68e1      	ldr	r1, [r4, #12]
   2d39e:	f8ca 1014 	str.w	r1, [sl, #20]
   2d3a2:	2a24      	cmp	r2, #36	; 0x24
   2d3a4:	d00d      	beq.n	2d3c2 <_realloc_r+0x3be>
   2d3a6:	3410      	adds	r4, #16
   2d3a8:	f10a 0218 	add.w	r2, sl, #24
   2d3ac:	e717      	b.n	2d1de <_realloc_r+0x1da>
   2d3ae:	6923      	ldr	r3, [r4, #16]
   2d3b0:	f8ca 3018 	str.w	r3, [sl, #24]
   2d3b4:	6963      	ldr	r3, [r4, #20]
   2d3b6:	f8ca 301c 	str.w	r3, [sl, #28]
   2d3ba:	3418      	adds	r4, #24
   2d3bc:	f10a 0320 	add.w	r3, sl, #32
   2d3c0:	e78b      	b.n	2d2da <_realloc_r+0x2d6>
   2d3c2:	6922      	ldr	r2, [r4, #16]
   2d3c4:	f8ca 2018 	str.w	r2, [sl, #24]
   2d3c8:	6962      	ldr	r2, [r4, #20]
   2d3ca:	f8ca 201c 	str.w	r2, [sl, #28]
   2d3ce:	3418      	adds	r4, #24
   2d3d0:	f10a 0220 	add.w	r2, sl, #32
   2d3d4:	e703      	b.n	2d1de <_realloc_r+0x1da>
   2d3d6:	bf00      	nop
   2d3d8:	10004660 	.word	0x10004660

0002d3dc <_sbrk_r>:
   2d3dc:	b538      	push	{r3, r4, r5, lr}
   2d3de:	4d07      	ldr	r5, [pc, #28]	; (2d3fc <_sbrk_r+0x20>)
   2d3e0:	2200      	movs	r2, #0
   2d3e2:	4604      	mov	r4, r0
   2d3e4:	4608      	mov	r0, r1
   2d3e6:	602a      	str	r2, [r5, #0]
   2d3e8:	f000 fa66 	bl	2d8b8 <_sbrk>
   2d3ec:	1c43      	adds	r3, r0, #1
   2d3ee:	d000      	beq.n	2d3f2 <_sbrk_r+0x16>
   2d3f0:	bd38      	pop	{r3, r4, r5, pc}
   2d3f2:	682b      	ldr	r3, [r5, #0]
   2d3f4:	2b00      	cmp	r3, #0
   2d3f6:	d0fb      	beq.n	2d3f0 <_sbrk_r+0x14>
   2d3f8:	6023      	str	r3, [r4, #0]
   2d3fa:	bd38      	pop	{r3, r4, r5, pc}
   2d3fc:	10019794 	.word	0x10019794

0002d400 <raise>:
   2d400:	b538      	push	{r3, r4, r5, lr}
   2d402:	4b15      	ldr	r3, [pc, #84]	; (2d458 <raise+0x58>)
   2d404:	281f      	cmp	r0, #31
   2d406:	681d      	ldr	r5, [r3, #0]
   2d408:	d820      	bhi.n	2d44c <raise+0x4c>
   2d40a:	f8d5 22dc 	ldr.w	r2, [r5, #732]	; 0x2dc
   2d40e:	4604      	mov	r4, r0
   2d410:	b162      	cbz	r2, 2d42c <raise+0x2c>
   2d412:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
   2d416:	b14b      	cbz	r3, 2d42c <raise+0x2c>
   2d418:	2b01      	cmp	r3, #1
   2d41a:	d015      	beq.n	2d448 <raise+0x48>
   2d41c:	1c59      	adds	r1, r3, #1
   2d41e:	d00f      	beq.n	2d440 <raise+0x40>
   2d420:	2500      	movs	r5, #0
   2d422:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
   2d426:	4798      	blx	r3
   2d428:	4628      	mov	r0, r5
   2d42a:	bd38      	pop	{r3, r4, r5, pc}
   2d42c:	4628      	mov	r0, r5
   2d42e:	f000 f82b 	bl	2d488 <_getpid_r>
   2d432:	4622      	mov	r2, r4
   2d434:	4601      	mov	r1, r0
   2d436:	4628      	mov	r0, r5
   2d438:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2d43c:	f000 b80e 	b.w	2d45c <_kill_r>
   2d440:	2316      	movs	r3, #22
   2d442:	602b      	str	r3, [r5, #0]
   2d444:	2001      	movs	r0, #1
   2d446:	bd38      	pop	{r3, r4, r5, pc}
   2d448:	2000      	movs	r0, #0
   2d44a:	bd38      	pop	{r3, r4, r5, pc}
   2d44c:	2316      	movs	r3, #22
   2d44e:	602b      	str	r3, [r5, #0]
   2d450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d454:	bd38      	pop	{r3, r4, r5, pc}
   2d456:	bf00      	nop
   2d458:	100040c4 	.word	0x100040c4

0002d45c <_kill_r>:
   2d45c:	b570      	push	{r4, r5, r6, lr}
   2d45e:	460c      	mov	r4, r1
   2d460:	4d08      	ldr	r5, [pc, #32]	; (2d484 <_kill_r+0x28>)
   2d462:	4603      	mov	r3, r0
   2d464:	2600      	movs	r6, #0
   2d466:	4620      	mov	r0, r4
   2d468:	4611      	mov	r1, r2
   2d46a:	461c      	mov	r4, r3
   2d46c:	602e      	str	r6, [r5, #0]
   2d46e:	f000 fa0b 	bl	2d888 <_kill>
   2d472:	1c43      	adds	r3, r0, #1
   2d474:	d000      	beq.n	2d478 <_kill_r+0x1c>
   2d476:	bd70      	pop	{r4, r5, r6, pc}
   2d478:	682b      	ldr	r3, [r5, #0]
   2d47a:	2b00      	cmp	r3, #0
   2d47c:	d0fb      	beq.n	2d476 <_kill_r+0x1a>
   2d47e:	6023      	str	r3, [r4, #0]
   2d480:	bd70      	pop	{r4, r5, r6, pc}
   2d482:	bf00      	nop
   2d484:	10019794 	.word	0x10019794

0002d488 <_getpid_r>:
   2d488:	f000 b9ee 	b.w	2d868 <_getpid>

0002d48c <__sread>:
   2d48c:	b510      	push	{r4, lr}
   2d48e:	460c      	mov	r4, r1
   2d490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2d494:	f000 f9c2 	bl	2d81c <_read_r>
   2d498:	2800      	cmp	r0, #0
   2d49a:	db03      	blt.n	2d4a4 <__sread+0x18>
   2d49c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   2d49e:	4403      	add	r3, r0
   2d4a0:	6523      	str	r3, [r4, #80]	; 0x50
   2d4a2:	bd10      	pop	{r4, pc}
   2d4a4:	89a3      	ldrh	r3, [r4, #12]
   2d4a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   2d4aa:	81a3      	strh	r3, [r4, #12]
   2d4ac:	bd10      	pop	{r4, pc}
   2d4ae:	bf00      	nop

0002d4b0 <__swrite>:
   2d4b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d4b4:	460c      	mov	r4, r1
   2d4b6:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   2d4ba:	461f      	mov	r7, r3
   2d4bc:	05cb      	lsls	r3, r1, #23
   2d4be:	4605      	mov	r5, r0
   2d4c0:	4616      	mov	r6, r2
   2d4c2:	d40b      	bmi.n	2d4dc <__swrite+0x2c>
   2d4c4:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   2d4c8:	81a1      	strh	r1, [r4, #12]
   2d4ca:	463b      	mov	r3, r7
   2d4cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   2d4d0:	4632      	mov	r2, r6
   2d4d2:	4628      	mov	r0, r5
   2d4d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2d4d8:	f000 b8d4 	b.w	2d684 <_write_r>
   2d4dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   2d4e0:	2302      	movs	r3, #2
   2d4e2:	2200      	movs	r2, #0
   2d4e4:	f000 f984 	bl	2d7f0 <_lseek_r>
   2d4e8:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   2d4ec:	e7ea      	b.n	2d4c4 <__swrite+0x14>
   2d4ee:	bf00      	nop

0002d4f0 <__sseek>:
   2d4f0:	b510      	push	{r4, lr}
   2d4f2:	460c      	mov	r4, r1
   2d4f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2d4f8:	f000 f97a 	bl	2d7f0 <_lseek_r>
   2d4fc:	89a3      	ldrh	r3, [r4, #12]
   2d4fe:	1c42      	adds	r2, r0, #1
   2d500:	bf0e      	itee	eq
   2d502:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   2d506:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   2d50a:	6520      	strne	r0, [r4, #80]	; 0x50
   2d50c:	81a3      	strh	r3, [r4, #12]
   2d50e:	bd10      	pop	{r4, pc}

0002d510 <__sclose>:
   2d510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2d514:	f000 b8cc 	b.w	2d6b0 <_close_r>

0002d518 <strncpy>:
   2d518:	b530      	push	{r4, r5, lr}
   2d51a:	ea40 0401 	orr.w	r4, r0, r1
   2d51e:	07a3      	lsls	r3, r4, #30
   2d520:	d101      	bne.n	2d526 <strncpy+0xe>
   2d522:	2a03      	cmp	r2, #3
   2d524:	d80f      	bhi.n	2d546 <strncpy+0x2e>
   2d526:	4684      	mov	ip, r0
   2d528:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   2d52c:	e007      	b.n	2d53e <strncpy+0x26>
   2d52e:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
   2d532:	f803 1b01 	strb.w	r1, [r3], #1
   2d536:	1e54      	subs	r4, r2, #1
   2d538:	b1c1      	cbz	r1, 2d56c <strncpy+0x54>
   2d53a:	469c      	mov	ip, r3
   2d53c:	4622      	mov	r2, r4
   2d53e:	4663      	mov	r3, ip
   2d540:	2a00      	cmp	r2, #0
   2d542:	d1f4      	bne.n	2d52e <strncpy+0x16>
   2d544:	bd30      	pop	{r4, r5, pc}
   2d546:	460b      	mov	r3, r1
   2d548:	4684      	mov	ip, r0
   2d54a:	4619      	mov	r1, r3
   2d54c:	f853 5b04 	ldr.w	r5, [r3], #4
   2d550:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   2d554:	ea24 0405 	bic.w	r4, r4, r5
   2d558:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   2d55c:	d1e4      	bne.n	2d528 <strncpy+0x10>
   2d55e:	3a04      	subs	r2, #4
   2d560:	2a03      	cmp	r2, #3
   2d562:	f84c 5b04 	str.w	r5, [ip], #4
   2d566:	4619      	mov	r1, r3
   2d568:	d8ef      	bhi.n	2d54a <strncpy+0x32>
   2d56a:	e7dd      	b.n	2d528 <strncpy+0x10>
   2d56c:	4462      	add	r2, ip
   2d56e:	2c00      	cmp	r4, #0
   2d570:	d0e8      	beq.n	2d544 <strncpy+0x2c>
   2d572:	f803 1b01 	strb.w	r1, [r3], #1
   2d576:	4293      	cmp	r3, r2
   2d578:	d1fb      	bne.n	2d572 <strncpy+0x5a>
   2d57a:	bd30      	pop	{r4, r5, pc}

0002d57c <__swbuf_r>:
   2d57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d57e:	460d      	mov	r5, r1
   2d580:	4614      	mov	r4, r2
   2d582:	4606      	mov	r6, r0
   2d584:	b110      	cbz	r0, 2d58c <__swbuf_r+0x10>
   2d586:	6b83      	ldr	r3, [r0, #56]	; 0x38
   2d588:	2b00      	cmp	r3, #0
   2d58a:	d043      	beq.n	2d614 <__swbuf_r+0x98>
   2d58c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2d590:	69a3      	ldr	r3, [r4, #24]
   2d592:	60a3      	str	r3, [r4, #8]
   2d594:	0717      	lsls	r7, r2, #28
   2d596:	b290      	uxth	r0, r2
   2d598:	d51b      	bpl.n	2d5d2 <__swbuf_r+0x56>
   2d59a:	6923      	ldr	r3, [r4, #16]
   2d59c:	b1cb      	cbz	r3, 2d5d2 <__swbuf_r+0x56>
   2d59e:	b2ed      	uxtb	r5, r5
   2d5a0:	0481      	lsls	r1, r0, #18
   2d5a2:	462f      	mov	r7, r5
   2d5a4:	d522      	bpl.n	2d5ec <__swbuf_r+0x70>
   2d5a6:	6822      	ldr	r2, [r4, #0]
   2d5a8:	6961      	ldr	r1, [r4, #20]
   2d5aa:	1ad3      	subs	r3, r2, r3
   2d5ac:	4299      	cmp	r1, r3
   2d5ae:	dd29      	ble.n	2d604 <__swbuf_r+0x88>
   2d5b0:	3301      	adds	r3, #1
   2d5b2:	68a1      	ldr	r1, [r4, #8]
   2d5b4:	3901      	subs	r1, #1
   2d5b6:	60a1      	str	r1, [r4, #8]
   2d5b8:	1c51      	adds	r1, r2, #1
   2d5ba:	6021      	str	r1, [r4, #0]
   2d5bc:	7015      	strb	r5, [r2, #0]
   2d5be:	6962      	ldr	r2, [r4, #20]
   2d5c0:	429a      	cmp	r2, r3
   2d5c2:	d02a      	beq.n	2d61a <__swbuf_r+0x9e>
   2d5c4:	89a3      	ldrh	r3, [r4, #12]
   2d5c6:	07db      	lsls	r3, r3, #31
   2d5c8:	d501      	bpl.n	2d5ce <__swbuf_r+0x52>
   2d5ca:	2d0a      	cmp	r5, #10
   2d5cc:	d025      	beq.n	2d61a <__swbuf_r+0x9e>
   2d5ce:	4638      	mov	r0, r7
   2d5d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2d5d2:	4621      	mov	r1, r4
   2d5d4:	4630      	mov	r0, r6
   2d5d6:	f7fe fc31 	bl	2be3c <__swsetup_r>
   2d5da:	bb20      	cbnz	r0, 2d626 <__swbuf_r+0xaa>
   2d5dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2d5e0:	6923      	ldr	r3, [r4, #16]
   2d5e2:	b290      	uxth	r0, r2
   2d5e4:	b2ed      	uxtb	r5, r5
   2d5e6:	0481      	lsls	r1, r0, #18
   2d5e8:	462f      	mov	r7, r5
   2d5ea:	d4dc      	bmi.n	2d5a6 <__swbuf_r+0x2a>
   2d5ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   2d5f0:	81a2      	strh	r2, [r4, #12]
   2d5f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
   2d5f4:	6961      	ldr	r1, [r4, #20]
   2d5f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   2d5fa:	6662      	str	r2, [r4, #100]	; 0x64
   2d5fc:	6822      	ldr	r2, [r4, #0]
   2d5fe:	1ad3      	subs	r3, r2, r3
   2d600:	4299      	cmp	r1, r3
   2d602:	dcd5      	bgt.n	2d5b0 <__swbuf_r+0x34>
   2d604:	4621      	mov	r1, r4
   2d606:	4630      	mov	r0, r6
   2d608:	f7fe fd68 	bl	2c0dc <_fflush_r>
   2d60c:	b958      	cbnz	r0, 2d626 <__swbuf_r+0xaa>
   2d60e:	6822      	ldr	r2, [r4, #0]
   2d610:	2301      	movs	r3, #1
   2d612:	e7ce      	b.n	2d5b2 <__swbuf_r+0x36>
   2d614:	f7fe fd96 	bl	2c144 <__sinit>
   2d618:	e7b8      	b.n	2d58c <__swbuf_r+0x10>
   2d61a:	4621      	mov	r1, r4
   2d61c:	4630      	mov	r0, r6
   2d61e:	f7fe fd5d 	bl	2c0dc <_fflush_r>
   2d622:	2800      	cmp	r0, #0
   2d624:	d0d3      	beq.n	2d5ce <__swbuf_r+0x52>
   2d626:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2d62a:	e7d0      	b.n	2d5ce <__swbuf_r+0x52>

0002d62c <_wcrtomb_r>:
   2d62c:	b570      	push	{r4, r5, r6, lr}
   2d62e:	4605      	mov	r5, r0
   2d630:	b084      	sub	sp, #16
   2d632:	461c      	mov	r4, r3
   2d634:	b139      	cbz	r1, 2d646 <_wcrtomb_r+0x1a>
   2d636:	4e0b      	ldr	r6, [pc, #44]	; (2d664 <_wcrtomb_r+0x38>)
   2d638:	f8d6 60e0 	ldr.w	r6, [r6, #224]	; 0xe0
   2d63c:	47b0      	blx	r6
   2d63e:	1c43      	adds	r3, r0, #1
   2d640:	d009      	beq.n	2d656 <_wcrtomb_r+0x2a>
   2d642:	b004      	add	sp, #16
   2d644:	bd70      	pop	{r4, r5, r6, pc}
   2d646:	460a      	mov	r2, r1
   2d648:	4906      	ldr	r1, [pc, #24]	; (2d664 <_wcrtomb_r+0x38>)
   2d64a:	f8d1 60e0 	ldr.w	r6, [r1, #224]	; 0xe0
   2d64e:	a901      	add	r1, sp, #4
   2d650:	47b0      	blx	r6
   2d652:	1c43      	adds	r3, r0, #1
   2d654:	d1f5      	bne.n	2d642 <_wcrtomb_r+0x16>
   2d656:	2200      	movs	r2, #0
   2d658:	238a      	movs	r3, #138	; 0x8a
   2d65a:	6022      	str	r2, [r4, #0]
   2d65c:	602b      	str	r3, [r5, #0]
   2d65e:	b004      	add	sp, #16
   2d660:	bd70      	pop	{r4, r5, r6, pc}
   2d662:	bf00      	nop
   2d664:	100044f4 	.word	0x100044f4

0002d668 <__ascii_wctomb>:
   2d668:	b149      	cbz	r1, 2d67e <__ascii_wctomb+0x16>
   2d66a:	2aff      	cmp	r2, #255	; 0xff
   2d66c:	d802      	bhi.n	2d674 <__ascii_wctomb+0xc>
   2d66e:	700a      	strb	r2, [r1, #0]
   2d670:	2001      	movs	r0, #1
   2d672:	4770      	bx	lr
   2d674:	238a      	movs	r3, #138	; 0x8a
   2d676:	6003      	str	r3, [r0, #0]
   2d678:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d67c:	4770      	bx	lr
   2d67e:	4608      	mov	r0, r1
   2d680:	4770      	bx	lr
   2d682:	bf00      	nop

0002d684 <_write_r>:
   2d684:	b538      	push	{r3, r4, r5, lr}
   2d686:	460c      	mov	r4, r1
   2d688:	4d08      	ldr	r5, [pc, #32]	; (2d6ac <_write_r+0x28>)
   2d68a:	4684      	mov	ip, r0
   2d68c:	4611      	mov	r1, r2
   2d68e:	4620      	mov	r0, r4
   2d690:	461a      	mov	r2, r3
   2d692:	2300      	movs	r3, #0
   2d694:	602b      	str	r3, [r5, #0]
   2d696:	4664      	mov	r4, ip
   2d698:	f000 f91c 	bl	2d8d4 <_write>
   2d69c:	1c43      	adds	r3, r0, #1
   2d69e:	d000      	beq.n	2d6a2 <_write_r+0x1e>
   2d6a0:	bd38      	pop	{r3, r4, r5, pc}
   2d6a2:	682b      	ldr	r3, [r5, #0]
   2d6a4:	2b00      	cmp	r3, #0
   2d6a6:	d0fb      	beq.n	2d6a0 <_write_r+0x1c>
   2d6a8:	6023      	str	r3, [r4, #0]
   2d6aa:	bd38      	pop	{r3, r4, r5, pc}
   2d6ac:	10019794 	.word	0x10019794

0002d6b0 <_close_r>:
   2d6b0:	b538      	push	{r3, r4, r5, lr}
   2d6b2:	4d07      	ldr	r5, [pc, #28]	; (2d6d0 <_close_r+0x20>)
   2d6b4:	2200      	movs	r2, #0
   2d6b6:	4604      	mov	r4, r0
   2d6b8:	4608      	mov	r0, r1
   2d6ba:	602a      	str	r2, [r5, #0]
   2d6bc:	f000 f8c4 	bl	2d848 <_close>
   2d6c0:	1c43      	adds	r3, r0, #1
   2d6c2:	d000      	beq.n	2d6c6 <_close_r+0x16>
   2d6c4:	bd38      	pop	{r3, r4, r5, pc}
   2d6c6:	682b      	ldr	r3, [r5, #0]
   2d6c8:	2b00      	cmp	r3, #0
   2d6ca:	d0fb      	beq.n	2d6c4 <_close_r+0x14>
   2d6cc:	6023      	str	r3, [r4, #0]
   2d6ce:	bd38      	pop	{r3, r4, r5, pc}
   2d6d0:	10019794 	.word	0x10019794

0002d6d4 <_fclose_r>:
   2d6d4:	b570      	push	{r4, r5, r6, lr}
   2d6d6:	2900      	cmp	r1, #0
   2d6d8:	d04b      	beq.n	2d772 <_fclose_r+0x9e>
   2d6da:	4606      	mov	r6, r0
   2d6dc:	460c      	mov	r4, r1
   2d6de:	b110      	cbz	r0, 2d6e6 <_fclose_r+0x12>
   2d6e0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   2d6e2:	2b00      	cmp	r3, #0
   2d6e4:	d048      	beq.n	2d778 <_fclose_r+0xa4>
   2d6e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2d6e8:	07d8      	lsls	r0, r3, #31
   2d6ea:	d534      	bpl.n	2d756 <_fclose_r+0x82>
   2d6ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2d6f0:	2b00      	cmp	r3, #0
   2d6f2:	d03e      	beq.n	2d772 <_fclose_r+0x9e>
   2d6f4:	4621      	mov	r1, r4
   2d6f6:	4630      	mov	r0, r6
   2d6f8:	f7fe fc58 	bl	2bfac <__sflush_r>
   2d6fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2d6fe:	4605      	mov	r5, r0
   2d700:	b133      	cbz	r3, 2d710 <_fclose_r+0x3c>
   2d702:	69e1      	ldr	r1, [r4, #28]
   2d704:	4630      	mov	r0, r6
   2d706:	4798      	blx	r3
   2d708:	2800      	cmp	r0, #0
   2d70a:	bfb8      	it	lt
   2d70c:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
   2d710:	89a3      	ldrh	r3, [r4, #12]
   2d712:	061a      	lsls	r2, r3, #24
   2d714:	d43b      	bmi.n	2d78e <_fclose_r+0xba>
   2d716:	6b21      	ldr	r1, [r4, #48]	; 0x30
   2d718:	b141      	cbz	r1, 2d72c <_fclose_r+0x58>
   2d71a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   2d71e:	4299      	cmp	r1, r3
   2d720:	d002      	beq.n	2d728 <_fclose_r+0x54>
   2d722:	4630      	mov	r0, r6
   2d724:	f7fe fe78 	bl	2c418 <_free_r>
   2d728:	2300      	movs	r3, #0
   2d72a:	6323      	str	r3, [r4, #48]	; 0x30
   2d72c:	6c61      	ldr	r1, [r4, #68]	; 0x44
   2d72e:	b121      	cbz	r1, 2d73a <_fclose_r+0x66>
   2d730:	4630      	mov	r0, r6
   2d732:	f7fe fe71 	bl	2c418 <_free_r>
   2d736:	2300      	movs	r3, #0
   2d738:	6463      	str	r3, [r4, #68]	; 0x44
   2d73a:	f7fe fd89 	bl	2c250 <__sfp_lock_acquire>
   2d73e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2d740:	2200      	movs	r2, #0
   2d742:	07db      	lsls	r3, r3, #31
   2d744:	81a2      	strh	r2, [r4, #12]
   2d746:	d527      	bpl.n	2d798 <_fclose_r+0xc4>
   2d748:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2d74a:	f7ff f913 	bl	2c974 <__retarget_lock_close_recursive>
   2d74e:	f7fe fd85 	bl	2c25c <__sfp_lock_release>
   2d752:	4628      	mov	r0, r5
   2d754:	bd70      	pop	{r4, r5, r6, pc}
   2d756:	89a3      	ldrh	r3, [r4, #12]
   2d758:	0599      	lsls	r1, r3, #22
   2d75a:	d4cb      	bmi.n	2d6f4 <_fclose_r+0x20>
   2d75c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2d75e:	f7ff f90b 	bl	2c978 <__retarget_lock_acquire_recursive>
   2d762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2d766:	2b00      	cmp	r3, #0
   2d768:	d1c4      	bne.n	2d6f4 <_fclose_r+0x20>
   2d76a:	6e65      	ldr	r5, [r4, #100]	; 0x64
   2d76c:	f015 0501 	ands.w	r5, r5, #1
   2d770:	d008      	beq.n	2d784 <_fclose_r+0xb0>
   2d772:	2500      	movs	r5, #0
   2d774:	4628      	mov	r0, r5
   2d776:	bd70      	pop	{r4, r5, r6, pc}
   2d778:	f7fe fce4 	bl	2c144 <__sinit>
   2d77c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2d77e:	07d8      	lsls	r0, r3, #31
   2d780:	d4b4      	bmi.n	2d6ec <_fclose_r+0x18>
   2d782:	e7e8      	b.n	2d756 <_fclose_r+0x82>
   2d784:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2d786:	f7ff f8f9 	bl	2c97c <__retarget_lock_release_recursive>
   2d78a:	4628      	mov	r0, r5
   2d78c:	bd70      	pop	{r4, r5, r6, pc}
   2d78e:	6921      	ldr	r1, [r4, #16]
   2d790:	4630      	mov	r0, r6
   2d792:	f7fe fe41 	bl	2c418 <_free_r>
   2d796:	e7be      	b.n	2d716 <_fclose_r+0x42>
   2d798:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2d79a:	f7ff f8ef 	bl	2c97c <__retarget_lock_release_recursive>
   2d79e:	e7d3      	b.n	2d748 <_fclose_r+0x74>

0002d7a0 <_fstat_r>:
   2d7a0:	b570      	push	{r4, r5, r6, lr}
   2d7a2:	460c      	mov	r4, r1
   2d7a4:	4d08      	ldr	r5, [pc, #32]	; (2d7c8 <_fstat_r+0x28>)
   2d7a6:	4603      	mov	r3, r0
   2d7a8:	2600      	movs	r6, #0
   2d7aa:	4620      	mov	r0, r4
   2d7ac:	4611      	mov	r1, r2
   2d7ae:	461c      	mov	r4, r3
   2d7b0:	602e      	str	r6, [r5, #0]
   2d7b2:	f000 f851 	bl	2d858 <_fstat>
   2d7b6:	1c43      	adds	r3, r0, #1
   2d7b8:	d000      	beq.n	2d7bc <_fstat_r+0x1c>
   2d7ba:	bd70      	pop	{r4, r5, r6, pc}
   2d7bc:	682b      	ldr	r3, [r5, #0]
   2d7be:	2b00      	cmp	r3, #0
   2d7c0:	d0fb      	beq.n	2d7ba <_fstat_r+0x1a>
   2d7c2:	6023      	str	r3, [r4, #0]
   2d7c4:	bd70      	pop	{r4, r5, r6, pc}
   2d7c6:	bf00      	nop
   2d7c8:	10019794 	.word	0x10019794

0002d7cc <_isatty_r>:
   2d7cc:	b538      	push	{r3, r4, r5, lr}
   2d7ce:	4d07      	ldr	r5, [pc, #28]	; (2d7ec <_isatty_r+0x20>)
   2d7d0:	2200      	movs	r2, #0
   2d7d2:	4604      	mov	r4, r0
   2d7d4:	4608      	mov	r0, r1
   2d7d6:	602a      	str	r2, [r5, #0]
   2d7d8:	f000 f84e 	bl	2d878 <_isatty>
   2d7dc:	1c43      	adds	r3, r0, #1
   2d7de:	d000      	beq.n	2d7e2 <_isatty_r+0x16>
   2d7e0:	bd38      	pop	{r3, r4, r5, pc}
   2d7e2:	682b      	ldr	r3, [r5, #0]
   2d7e4:	2b00      	cmp	r3, #0
   2d7e6:	d0fb      	beq.n	2d7e0 <_isatty_r+0x14>
   2d7e8:	6023      	str	r3, [r4, #0]
   2d7ea:	bd38      	pop	{r3, r4, r5, pc}
   2d7ec:	10019794 	.word	0x10019794

0002d7f0 <_lseek_r>:
   2d7f0:	b538      	push	{r3, r4, r5, lr}
   2d7f2:	460c      	mov	r4, r1
   2d7f4:	4d08      	ldr	r5, [pc, #32]	; (2d818 <_lseek_r+0x28>)
   2d7f6:	4684      	mov	ip, r0
   2d7f8:	4611      	mov	r1, r2
   2d7fa:	4620      	mov	r0, r4
   2d7fc:	461a      	mov	r2, r3
   2d7fe:	2300      	movs	r3, #0
   2d800:	602b      	str	r3, [r5, #0]
   2d802:	4664      	mov	r4, ip
   2d804:	f000 f848 	bl	2d898 <_lseek>
   2d808:	1c43      	adds	r3, r0, #1
   2d80a:	d000      	beq.n	2d80e <_lseek_r+0x1e>
   2d80c:	bd38      	pop	{r3, r4, r5, pc}
   2d80e:	682b      	ldr	r3, [r5, #0]
   2d810:	2b00      	cmp	r3, #0
   2d812:	d0fb      	beq.n	2d80c <_lseek_r+0x1c>
   2d814:	6023      	str	r3, [r4, #0]
   2d816:	bd38      	pop	{r3, r4, r5, pc}
   2d818:	10019794 	.word	0x10019794

0002d81c <_read_r>:
   2d81c:	b538      	push	{r3, r4, r5, lr}
   2d81e:	460c      	mov	r4, r1
   2d820:	4d08      	ldr	r5, [pc, #32]	; (2d844 <_read_r+0x28>)
   2d822:	4684      	mov	ip, r0
   2d824:	4611      	mov	r1, r2
   2d826:	4620      	mov	r0, r4
   2d828:	461a      	mov	r2, r3
   2d82a:	2300      	movs	r3, #0
   2d82c:	602b      	str	r3, [r5, #0]
   2d82e:	4664      	mov	r4, ip
   2d830:	f000 f83a 	bl	2d8a8 <_read>
   2d834:	1c43      	adds	r3, r0, #1
   2d836:	d000      	beq.n	2d83a <_read_r+0x1e>
   2d838:	bd38      	pop	{r3, r4, r5, pc}
   2d83a:	682b      	ldr	r3, [r5, #0]
   2d83c:	2b00      	cmp	r3, #0
   2d83e:	d0fb      	beq.n	2d838 <_read_r+0x1c>
   2d840:	6023      	str	r3, [r4, #0]
   2d842:	bd38      	pop	{r3, r4, r5, pc}
   2d844:	10019794 	.word	0x10019794

0002d848 <_close>:
   2d848:	4b02      	ldr	r3, [pc, #8]	; (2d854 <_close+0xc>)
   2d84a:	2258      	movs	r2, #88	; 0x58
   2d84c:	601a      	str	r2, [r3, #0]
   2d84e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d852:	4770      	bx	lr
   2d854:	10019794 	.word	0x10019794

0002d858 <_fstat>:
   2d858:	4b02      	ldr	r3, [pc, #8]	; (2d864 <_fstat+0xc>)
   2d85a:	2258      	movs	r2, #88	; 0x58
   2d85c:	601a      	str	r2, [r3, #0]
   2d85e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d862:	4770      	bx	lr
   2d864:	10019794 	.word	0x10019794

0002d868 <_getpid>:
   2d868:	4b02      	ldr	r3, [pc, #8]	; (2d874 <_getpid+0xc>)
   2d86a:	2258      	movs	r2, #88	; 0x58
   2d86c:	601a      	str	r2, [r3, #0]
   2d86e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d872:	4770      	bx	lr
   2d874:	10019794 	.word	0x10019794

0002d878 <_isatty>:
   2d878:	4b02      	ldr	r3, [pc, #8]	; (2d884 <_isatty+0xc>)
   2d87a:	2258      	movs	r2, #88	; 0x58
   2d87c:	601a      	str	r2, [r3, #0]
   2d87e:	2000      	movs	r0, #0
   2d880:	4770      	bx	lr
   2d882:	bf00      	nop
   2d884:	10019794 	.word	0x10019794

0002d888 <_kill>:
   2d888:	4b02      	ldr	r3, [pc, #8]	; (2d894 <_kill+0xc>)
   2d88a:	2258      	movs	r2, #88	; 0x58
   2d88c:	601a      	str	r2, [r3, #0]
   2d88e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d892:	4770      	bx	lr
   2d894:	10019794 	.word	0x10019794

0002d898 <_lseek>:
   2d898:	4b02      	ldr	r3, [pc, #8]	; (2d8a4 <_lseek+0xc>)
   2d89a:	2258      	movs	r2, #88	; 0x58
   2d89c:	601a      	str	r2, [r3, #0]
   2d89e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d8a2:	4770      	bx	lr
   2d8a4:	10019794 	.word	0x10019794

0002d8a8 <_read>:
   2d8a8:	4b02      	ldr	r3, [pc, #8]	; (2d8b4 <_read+0xc>)
   2d8aa:	2258      	movs	r2, #88	; 0x58
   2d8ac:	601a      	str	r2, [r3, #0]
   2d8ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d8b2:	4770      	bx	lr
   2d8b4:	10019794 	.word	0x10019794

0002d8b8 <_sbrk>:
   2d8b8:	4a04      	ldr	r2, [pc, #16]	; (2d8cc <_sbrk+0x14>)
   2d8ba:	4905      	ldr	r1, [pc, #20]	; (2d8d0 <_sbrk+0x18>)
   2d8bc:	6813      	ldr	r3, [r2, #0]
   2d8be:	2b00      	cmp	r3, #0
   2d8c0:	bf08      	it	eq
   2d8c2:	460b      	moveq	r3, r1
   2d8c4:	4418      	add	r0, r3
   2d8c6:	6010      	str	r0, [r2, #0]
   2d8c8:	4618      	mov	r0, r3
   2d8ca:	4770      	bx	lr
   2d8cc:	10019798 	.word	0x10019798
   2d8d0:	10004000 	.word	0x10004000

0002d8d4 <_write>:
   2d8d4:	4b02      	ldr	r3, [pc, #8]	; (2d8e0 <_write+0xc>)
   2d8d6:	2258      	movs	r2, #88	; 0x58
   2d8d8:	601a      	str	r2, [r3, #0]
   2d8da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d8de:	4770      	bx	lr
   2d8e0:	10019794 	.word	0x10019794

0002d8e4 <_exit>:
   2d8e4:	e7fe      	b.n	2d8e4 <_exit>
   2d8e6:	bf00      	nop

0002d8e8 <ns_itm_printf_enable>:
/**
 * @brief Wraps am_bsp_itm_printf_enable() to turn on crypto temporarily if needed
 *
 */
void
ns_itm_printf_enable(void) {
   2d8e8:	b510      	push	{r4, lr}
    // Enable crypto only as long as needed
    if (g_ns_state.cryptoCurrentlyEnabled == false) {
   2d8ea:	4c0e      	ldr	r4, [pc, #56]	; (2d924 <ns_itm_printf_enable+0x3c>)
   2d8ec:	7aa3      	ldrb	r3, [r4, #10]
   2d8ee:	b143      	cbz	r3, 2d902 <ns_itm_printf_enable+0x1a>
        am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_PERIPH_CRYPTO);
    }
    am_bsp_itm_printf_enable();
   2d8f0:	f005 fc20 	bl	33134 <am_bsp_itm_printf_enable>

    if (g_ns_state.cryptoWantsToBeEnabled == false) {
   2d8f4:	7a61      	ldrb	r1, [r4, #9]
   2d8f6:	b161      	cbz	r1, 2d912 <ns_itm_printf_enable+0x2a>
        am_hal_pwrctrl_control(AM_HAL_PWRCTRL_CONTROL_CRYPTO_POWERDOWN, 0);
    }

    g_ns_state.itmPrintCurrentlyEnabled = true;
    g_ns_state.itmPrintWantsToBeEnabled = true;
   2d8f8:	f240 1301 	movw	r3, #257	; 0x101
   2d8fc:	f8a4 3005 	strh.w	r3, [r4, #5]
}
   2d900:	bd10      	pop	{r4, pc}
        am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_PERIPH_CRYPTO);
   2d902:	2014      	movs	r0, #20
   2d904:	f004 fdc4 	bl	32490 <am_hal_pwrctrl_periph_enable>
    am_bsp_itm_printf_enable();
   2d908:	f005 fc14 	bl	33134 <am_bsp_itm_printf_enable>
    if (g_ns_state.cryptoWantsToBeEnabled == false) {
   2d90c:	7a61      	ldrb	r1, [r4, #9]
   2d90e:	2900      	cmp	r1, #0
   2d910:	d1f2      	bne.n	2d8f8 <ns_itm_printf_enable+0x10>
        am_hal_pwrctrl_control(AM_HAL_PWRCTRL_CONTROL_CRYPTO_POWERDOWN, 0);
   2d912:	2001      	movs	r0, #1
   2d914:	f005 f828 	bl	32968 <am_hal_pwrctrl_control>
    g_ns_state.itmPrintWantsToBeEnabled = true;
   2d918:	f240 1301 	movw	r3, #257	; 0x101
   2d91c:	f8a4 3005 	strh.w	r3, [r4, #5]
}
   2d920:	bd10      	pop	{r4, pc}
   2d922:	bf00      	nop
   2d924:	10010b18 	.word	0x10010b18

0002d928 <ns_cryptoless_itm_printf_disable>:
//
//! @return 0 on success.
//
//*****************************************************************************
int32_t
ns_cryptoless_itm_printf_disable(void) {
   2d928:	b508      	push	{r3, lr}
    // Disable the ITM/TPIU
    am_hal_itm_disable();
   2d92a:	f002 fa7b 	bl	2fe24 <am_hal_itm_disable>

    // Detach the ITM interface from the STDIO driver.
    am_util_stdio_printf_init(0);
   2d92e:	2000      	movs	r0, #0
   2d930:	f001 f934 	bl	2eb9c <am_util_stdio_printf_init>

    // Disconnect the SWO pin
    am_hal_gpio_pinconfig(AM_BSP_GPIO_ITM_SWO, am_hal_gpio_pincfg_disabled);
   2d934:	4b03      	ldr	r3, [pc, #12]	; (2d944 <ns_cryptoless_itm_printf_disable+0x1c>)
   2d936:	201c      	movs	r0, #28
   2d938:	6819      	ldr	r1, [r3, #0]
   2d93a:	f003 ff37 	bl	317ac <am_hal_gpio_pinconfig>

    return 0;
}
   2d93e:	2000      	movs	r0, #0
   2d940:	bd08      	pop	{r3, pc}
   2d942:	bf00      	nop
   2d944:	00042374 	.word	0x00042374

0002d948 <ns_lp_printf>:

 * @param format
 * @param ...
 */
void
ns_lp_printf(const char *format, ...) {
   2d948:	b40f      	push	{r0, r1, r2, r3}
   2d94a:	b510      	push	{r4, lr}
    va_list myargs;

    if ((g_ns_state.uartPrintWantsToBeEnabled == false) &&
   2d94c:	4c16      	ldr	r4, [pc, #88]	; (2d9a8 <ns_lp_printf+0x60>)
   2d94e:	7ae3      	ldrb	r3, [r4, #11]
ns_lp_printf(const char *format, ...) {
   2d950:	b082      	sub	sp, #8
    if ((g_ns_state.uartPrintWantsToBeEnabled == false) &&
   2d952:	b16b      	cbz	r3, 2d970 <ns_lp_printf+0x28>
        (g_ns_state.itmPrintWantsToBeEnabled == false)) {
        // No print interface has been enabled, ns_lp_printf is a no-op
        return;
    }

    if ((g_ns_state.uartPrintWantsToBeEnabled) && (g_ns_state.uartPrintCurrentlyEnabled == false)) {
   2d954:	7b23      	ldrb	r3, [r4, #12]
   2d956:	b30b      	cbz	r3, 2d99c <ns_lp_printf+0x54>
        am_bsp_uart_printf_enable();
        g_ns_state.uartPrintCurrentlyEnabled = true;
    } else if ((g_ns_state.itmPrintWantsToBeEnabled == true) &&
   2d958:	7963      	ldrb	r3, [r4, #5]
   2d95a:	b963      	cbnz	r3, 2d976 <ns_lp_printf+0x2e>
               (g_ns_state.itmPrintCurrentlyEnabled == false)) {
        ns_cryptoless_itm_printf_enable();
        g_ns_state.itmPrintCurrentlyEnabled = true;
    }

    va_start(myargs, format);
   2d95c:	a905      	add	r1, sp, #20
    am_util_stdio_vprintf(format, myargs);
   2d95e:	9804      	ldr	r0, [sp, #16]
    va_start(myargs, format);
   2d960:	9101      	str	r1, [sp, #4]
    am_util_stdio_vprintf(format, myargs);
   2d962:	f001 fdb7 	bl	2f4d4 <am_util_stdio_vprintf>
    va_end(myargs);
}
   2d966:	b002      	add	sp, #8
   2d968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2d96c:	b004      	add	sp, #16
   2d96e:	4770      	bx	lr
    if ((g_ns_state.uartPrintWantsToBeEnabled == false) &&
   2d970:	7963      	ldrb	r3, [r4, #5]
   2d972:	2b00      	cmp	r3, #0
   2d974:	d0f7      	beq.n	2d966 <ns_lp_printf+0x1e>
    } else if ((g_ns_state.itmPrintWantsToBeEnabled == true) &&
   2d976:	79a3      	ldrb	r3, [r4, #6]
   2d978:	2b00      	cmp	r3, #0
   2d97a:	d1ef      	bne.n	2d95c <ns_lp_printf+0x14>
    am_hal_itm_enable();
   2d97c:	f002 fa2e 	bl	2fddc <am_hal_itm_enable>
    am_hal_tpiu_enable(AM_HAL_TPIU_BAUD_1M);
   2d980:	480a      	ldr	r0, [pc, #40]	; (2d9ac <ns_lp_printf+0x64>)
   2d982:	f002 fd15 	bl	303b0 <am_hal_tpiu_enable>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_ITM_SWO, g_AM_BSP_GPIO_ITM_SWO);
   2d986:	4b0a      	ldr	r3, [pc, #40]	; (2d9b0 <ns_lp_printf+0x68>)
   2d988:	201c      	movs	r0, #28
   2d98a:	6819      	ldr	r1, [r3, #0]
   2d98c:	f003 ff0e 	bl	317ac <am_hal_gpio_pinconfig>
    am_util_stdio_printf_init(am_hal_itm_print);
   2d990:	4808      	ldr	r0, [pc, #32]	; (2d9b4 <ns_lp_printf+0x6c>)
   2d992:	f001 f903 	bl	2eb9c <am_util_stdio_printf_init>
        g_ns_state.itmPrintCurrentlyEnabled = true;
   2d996:	2301      	movs	r3, #1
   2d998:	71a3      	strb	r3, [r4, #6]
   2d99a:	e7df      	b.n	2d95c <ns_lp_printf+0x14>
        am_bsp_uart_printf_enable();
   2d99c:	f005 fc08 	bl	331b0 <am_bsp_uart_printf_enable>
        g_ns_state.uartPrintCurrentlyEnabled = true;
   2d9a0:	2301      	movs	r3, #1
   2d9a2:	7323      	strb	r3, [r4, #12]
   2d9a4:	e7da      	b.n	2d95c <ns_lp_printf+0x14>
   2d9a6:	bf00      	nop
   2d9a8:	10010b18 	.word	0x10010b18
   2d9ac:	000f4240 	.word	0x000f4240
   2d9b0:	10004ad4 	.word	0x10004ad4
   2d9b4:	0002fef9 	.word	0x0002fef9

0002d9b8 <ns_button_0_handler>:
    am_hal_gpio_interrupt_service(GPIO0_001F_IRQn, ui32IntStatus);

    // *g_ns_peripheral_button0 = 1;
}

void ns_button_0_handler(void *pArg) { *g_ns_peripheral_button0 = 1; }
   2d9b8:	4b02      	ldr	r3, [pc, #8]	; (2d9c4 <ns_button_0_handler+0xc>)
   2d9ba:	681b      	ldr	r3, [r3, #0]
   2d9bc:	2201      	movs	r2, #1
   2d9be:	601a      	str	r2, [r3, #0]
   2d9c0:	4770      	bx	lr
   2d9c2:	bf00      	nop
   2d9c4:	1001979c 	.word	0x1001979c

0002d9c8 <ns_button_1_handler>:

void ns_button_1_handler(void *pArg) { *g_ns_peripheral_button1 = 1; }
   2d9c8:	4b02      	ldr	r3, [pc, #8]	; (2d9d4 <ns_button_1_handler+0xc>)
   2d9ca:	681b      	ldr	r3, [r3, #0]
   2d9cc:	2201      	movs	r2, #1
   2d9ce:	601a      	str	r2, [r3, #0]
   2d9d0:	4770      	bx	lr
   2d9d2:	bf00      	nop
   2d9d4:	100197a0 	.word	0x100197a0

0002d9d8 <ns_joulescope_trigger_handler>:

void ns_joulescope_trigger_handler(void *pArg) { *g_ns_peripheral_joulescope_trigger = 1; }
   2d9d8:	4b02      	ldr	r3, [pc, #8]	; (2d9e4 <ns_joulescope_trigger_handler+0xc>)
   2d9da:	681b      	ldr	r3, [r3, #0]
   2d9dc:	2201      	movs	r2, #1
   2d9de:	601a      	str	r2, [r3, #0]
   2d9e0:	4770      	bx	lr
   2d9e2:	bf00      	nop
   2d9e4:	100197a4 	.word	0x100197a4

0002d9e8 <am_gpio0_001f_isr>:
void am_gpio0_001f_isr(void) {
   2d9e8:	b500      	push	{lr}
   2d9ea:	b083      	sub	sp, #12
    AM_CRITICAL_BEGIN
   2d9ec:	f002 f9ee 	bl	2fdcc <am_hal_interrupt_master_disable>
    am_hal_gpio_interrupt_irq_status_get(GPIO0_001F_IRQn, true, &ui32IntStatus);
   2d9f0:	466a      	mov	r2, sp
    AM_CRITICAL_BEGIN
   2d9f2:	4603      	mov	r3, r0
    am_hal_gpio_interrupt_irq_status_get(GPIO0_001F_IRQn, true, &ui32IntStatus);
   2d9f4:	2101      	movs	r1, #1
   2d9f6:	2038      	movs	r0, #56	; 0x38
    AM_CRITICAL_BEGIN
   2d9f8:	9301      	str	r3, [sp, #4]
    am_hal_gpio_interrupt_irq_status_get(GPIO0_001F_IRQn, true, &ui32IntStatus);
   2d9fa:	f003 ffcf 	bl	3199c <am_hal_gpio_interrupt_irq_status_get>
    am_hal_gpio_interrupt_irq_clear(GPIO0_001F_IRQn, ui32IntStatus);
   2d9fe:	9900      	ldr	r1, [sp, #0]
   2da00:	2038      	movs	r0, #56	; 0x38
   2da02:	f004 f805 	bl	31a10 <am_hal_gpio_interrupt_irq_clear>
    AM_CRITICAL_END
   2da06:	9801      	ldr	r0, [sp, #4]
   2da08:	f002 f9e4 	bl	2fdd4 <am_hal_interrupt_master_set>
    am_hal_gpio_interrupt_service(GPIO0_001F_IRQn, ui32IntStatus);
   2da0c:	9900      	ldr	r1, [sp, #0]
   2da0e:	2038      	movs	r0, #56	; 0x38
   2da10:	f004 f84c 	bl	31aac <am_hal_gpio_interrupt_service>
}
   2da14:	b003      	add	sp, #12
   2da16:	f85d fb04 	ldr.w	pc, [sp], #4
   2da1a:	bf00      	nop

0002da1c <ns_peripheral_button_init>:

uint32_t ns_peripheral_button_init(ns_button_config_t *cfg) {
   2da1c:	b570      	push	{r4, r5, r6, lr}
   2da1e:	b086      	sub	sp, #24
    uint32_t ui32IntStatus;
    uint32_t ui32BUTTON0GpioNum = AM_BSP_GPIO_BUTTON0;
   2da20:	2512      	movs	r5, #18
    uint32_t ui32BUTTON1GpioNum = AM_BSP_GPIO_BUTTON1;
   2da22:	2213      	movs	r2, #19
    uint32_t ui32JoulescopeTriggerGpioNum = 24;
   2da24:	2318      	movs	r3, #24
    uint32_t ui32BUTTON1GpioNum = AM_BSP_GPIO_BUTTON1;
   2da26:	e9cd 5202 	strd	r5, r2, [sp, #8]
    uint32_t ui32JoulescopeTriggerGpioNum = 24;
   2da2a:	9304      	str	r3, [sp, #16]

#ifndef NS_DISABLE_API_VALIDATION
    if (cfg == NULL) {
   2da2c:	2800      	cmp	r0, #0
   2da2e:	d034      	beq.n	2da9a <ns_peripheral_button_init+0x7e>
        return NS_STATUS_INVALID_HANDLE;
    }

    if (ns_core_check_api(
   2da30:	4a42      	ldr	r2, [pc, #264]	; (2db3c <ns_peripheral_button_init+0x120>)
   2da32:	4943      	ldr	r1, [pc, #268]	; (2db40 <ns_peripheral_button_init+0x124>)
   2da34:	4604      	mov	r4, r0
   2da36:	6800      	ldr	r0, [r0, #0]
   2da38:	f7f2 fd7c 	bl	20534 <ns_core_check_api>
   2da3c:	4606      	mov	r6, r0
   2da3e:	2800      	cmp	r0, #0
   2da40:	d177      	bne.n	2db32 <ns_peripheral_button_init+0x116>
        return NS_STATUS_INVALID_VERSION;
    }
#endif

    // Configure the button pin.
    if (cfg->button_0_enable) {
   2da42:	7923      	ldrb	r3, [r4, #4]
   2da44:	2b00      	cmp	r3, #0
   2da46:	d138      	bne.n	2daba <ns_peripheral_button_init+0x9e>
        am_hal_gpio_pinconfig(AM_BSP_GPIO_BUTTON0, g_AM_BSP_GPIO_BUTTON0);
        g_ns_peripheral_button0 = cfg->button_0_flag;
    }
    if (cfg->button_1_enable) {
   2da48:	7963      	ldrb	r3, [r4, #5]
   2da4a:	2b00      	cmp	r3, #0
   2da4c:	d140      	bne.n	2dad0 <ns_peripheral_button_init+0xb4>
        am_hal_gpio_pinconfig(AM_BSP_GPIO_BUTTON1, g_AM_BSP_GPIO_BUTTON1);
        g_ns_peripheral_button1 = cfg->button_1_flag;
    }
    if (cfg->joulescope_trigger_enable) {
   2da4e:	79a3      	ldrb	r3, [r4, #6]
   2da50:	2b00      	cmp	r3, #0
   2da52:	d148      	bne.n	2dae6 <ns_peripheral_button_init+0xca>
        am_hal_gpio_pinconfig(24, am_hal_gpio_pincfg_input);
        g_ns_peripheral_joulescope_trigger = cfg->joulescope_trigger_flag;
    }

    // Clear the GPIO Interrupt (write to clear).
    AM_CRITICAL_BEGIN
   2da54:	f002 f9ba 	bl	2fdcc <am_hal_interrupt_master_disable>
    am_hal_gpio_interrupt_irq_status_get(GPIO0_001F_IRQn, false, &ui32IntStatus);
   2da58:	aa01      	add	r2, sp, #4
   2da5a:	2100      	movs	r1, #0
    AM_CRITICAL_BEGIN
   2da5c:	9005      	str	r0, [sp, #20]
    am_hal_gpio_interrupt_irq_status_get(GPIO0_001F_IRQn, false, &ui32IntStatus);
   2da5e:	2038      	movs	r0, #56	; 0x38
   2da60:	f003 ff9c 	bl	3199c <am_hal_gpio_interrupt_irq_status_get>
    am_hal_gpio_interrupt_irq_clear(GPIO0_001F_IRQn, ui32IntStatus);
   2da64:	9901      	ldr	r1, [sp, #4]
   2da66:	2038      	movs	r0, #56	; 0x38
   2da68:	f003 ffd2 	bl	31a10 <am_hal_gpio_interrupt_irq_clear>
    AM_CRITICAL_END
   2da6c:	9805      	ldr	r0, [sp, #20]
   2da6e:	f002 f9b1 	bl	2fdd4 <am_hal_interrupt_master_set>

    // Register interrupt handlers
    if (cfg->button_0_enable) {
   2da72:	7923      	ldrb	r3, [r4, #4]
   2da74:	2b00      	cmp	r3, #0
   2da76:	d13f      	bne.n	2daf8 <ns_peripheral_button_init+0xdc>
            (am_hal_gpio_handler_t)ns_button_0_handler, NULL);
        am_hal_gpio_interrupt_control(
            AM_HAL_GPIO_INT_CHANNEL_0, AM_HAL_GPIO_INT_CTRL_INDV_ENABLE,
            (void *)&ui32BUTTON0GpioNum);
    }
    if (cfg->button_1_enable) {
   2da78:	7963      	ldrb	r3, [r4, #5]
   2da7a:	2b00      	cmp	r3, #0
   2da7c:	d14a      	bne.n	2db14 <ns_peripheral_button_init+0xf8>
            (am_hal_gpio_handler_t)ns_button_1_handler, NULL);
        am_hal_gpio_interrupt_control(
            AM_HAL_GPIO_INT_CHANNEL_0, AM_HAL_GPIO_INT_CTRL_INDV_ENABLE,
            (void *)&ui32BUTTON1GpioNum);
    }
    if (cfg->joulescope_trigger_enable) {
   2da7e:	79a3      	ldrb	r3, [r4, #6]
   2da80:	b97b      	cbnz	r3, 2daa2 <ns_peripheral_button_init+0x86>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2da82:	4b30      	ldr	r3, [pc, #192]	; (2db44 <ns_peripheral_button_init+0x128>)
   2da84:	2280      	movs	r2, #128	; 0x80
   2da86:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2da8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   2da8e:	605a      	str	r2, [r3, #4]
    }

    NVIC_SetPriority(GPIO0_001F_IRQn, AM_IRQ_PRIORITY_DEFAULT);
    NVIC_EnableIRQ(GPIO0_001F_IRQn);

    am_hal_interrupt_master_enable();
   2da90:	f002 f998 	bl	2fdc4 <am_hal_interrupt_master_enable>
    return NS_STATUS_SUCCESS;
}
   2da94:	4630      	mov	r0, r6
   2da96:	b006      	add	sp, #24
   2da98:	bd70      	pop	{r4, r5, r6, pc}
        return NS_STATUS_INVALID_HANDLE;
   2da9a:	2601      	movs	r6, #1
}
   2da9c:	4630      	mov	r0, r6
   2da9e:	b006      	add	sp, #24
   2daa0:	bd70      	pop	{r4, r5, r6, pc}
        am_hal_gpio_interrupt_register(
   2daa2:	2300      	movs	r3, #0
   2daa4:	4a28      	ldr	r2, [pc, #160]	; (2db48 <ns_peripheral_button_init+0x12c>)
   2daa6:	2118      	movs	r1, #24
   2daa8:	4618      	mov	r0, r3
   2daaa:	f003 ffbd 	bl	31a28 <am_hal_gpio_interrupt_register>
        am_hal_gpio_interrupt_control(
   2daae:	aa04      	add	r2, sp, #16
   2dab0:	2101      	movs	r1, #1
   2dab2:	2000      	movs	r0, #0
   2dab4:	f003 fea6 	bl	31804 <am_hal_gpio_interrupt_control>
   2dab8:	e7e3      	b.n	2da82 <ns_peripheral_button_init+0x66>
        am_hal_gpio_pinconfig(AM_BSP_GPIO_BUTTON0, g_AM_BSP_GPIO_BUTTON0);
   2daba:	4b24      	ldr	r3, [pc, #144]	; (2db4c <ns_peripheral_button_init+0x130>)
   2dabc:	4628      	mov	r0, r5
   2dabe:	6819      	ldr	r1, [r3, #0]
   2dac0:	f003 fe74 	bl	317ac <am_hal_gpio_pinconfig>
        g_ns_peripheral_button0 = cfg->button_0_flag;
   2dac4:	4b22      	ldr	r3, [pc, #136]	; (2db50 <ns_peripheral_button_init+0x134>)
   2dac6:	68a2      	ldr	r2, [r4, #8]
   2dac8:	601a      	str	r2, [r3, #0]
    if (cfg->button_1_enable) {
   2daca:	7963      	ldrb	r3, [r4, #5]
   2dacc:	2b00      	cmp	r3, #0
   2dace:	d0be      	beq.n	2da4e <ns_peripheral_button_init+0x32>
        am_hal_gpio_pinconfig(AM_BSP_GPIO_BUTTON1, g_AM_BSP_GPIO_BUTTON1);
   2dad0:	4b20      	ldr	r3, [pc, #128]	; (2db54 <ns_peripheral_button_init+0x138>)
   2dad2:	2013      	movs	r0, #19
   2dad4:	6819      	ldr	r1, [r3, #0]
   2dad6:	f003 fe69 	bl	317ac <am_hal_gpio_pinconfig>
        g_ns_peripheral_button1 = cfg->button_1_flag;
   2dada:	4b1f      	ldr	r3, [pc, #124]	; (2db58 <ns_peripheral_button_init+0x13c>)
   2dadc:	68e2      	ldr	r2, [r4, #12]
   2dade:	601a      	str	r2, [r3, #0]
    if (cfg->joulescope_trigger_enable) {
   2dae0:	79a3      	ldrb	r3, [r4, #6]
   2dae2:	2b00      	cmp	r3, #0
   2dae4:	d0b6      	beq.n	2da54 <ns_peripheral_button_init+0x38>
        am_hal_gpio_pinconfig(24, am_hal_gpio_pincfg_input);
   2dae6:	4b1d      	ldr	r3, [pc, #116]	; (2db5c <ns_peripheral_button_init+0x140>)
   2dae8:	2018      	movs	r0, #24
   2daea:	6819      	ldr	r1, [r3, #0]
   2daec:	f003 fe5e 	bl	317ac <am_hal_gpio_pinconfig>
        g_ns_peripheral_joulescope_trigger = cfg->joulescope_trigger_flag;
   2daf0:	4b1b      	ldr	r3, [pc, #108]	; (2db60 <ns_peripheral_button_init+0x144>)
   2daf2:	6922      	ldr	r2, [r4, #16]
   2daf4:	601a      	str	r2, [r3, #0]
   2daf6:	e7ad      	b.n	2da54 <ns_peripheral_button_init+0x38>
        am_hal_gpio_interrupt_register(
   2daf8:	2300      	movs	r3, #0
   2dafa:	4618      	mov	r0, r3
   2dafc:	4a19      	ldr	r2, [pc, #100]	; (2db64 <ns_peripheral_button_init+0x148>)
   2dafe:	2112      	movs	r1, #18
   2db00:	f003 ff92 	bl	31a28 <am_hal_gpio_interrupt_register>
        am_hal_gpio_interrupt_control(
   2db04:	aa02      	add	r2, sp, #8
   2db06:	2101      	movs	r1, #1
   2db08:	2000      	movs	r0, #0
   2db0a:	f003 fe7b 	bl	31804 <am_hal_gpio_interrupt_control>
    if (cfg->button_1_enable) {
   2db0e:	7963      	ldrb	r3, [r4, #5]
   2db10:	2b00      	cmp	r3, #0
   2db12:	d0b4      	beq.n	2da7e <ns_peripheral_button_init+0x62>
        am_hal_gpio_interrupt_register(
   2db14:	2300      	movs	r3, #0
   2db16:	4618      	mov	r0, r3
   2db18:	4a13      	ldr	r2, [pc, #76]	; (2db68 <ns_peripheral_button_init+0x14c>)
   2db1a:	2113      	movs	r1, #19
   2db1c:	f003 ff84 	bl	31a28 <am_hal_gpio_interrupt_register>
        am_hal_gpio_interrupt_control(
   2db20:	aa03      	add	r2, sp, #12
   2db22:	2101      	movs	r1, #1
   2db24:	2000      	movs	r0, #0
   2db26:	f003 fe6d 	bl	31804 <am_hal_gpio_interrupt_control>
    if (cfg->joulescope_trigger_enable) {
   2db2a:	79a3      	ldrb	r3, [r4, #6]
   2db2c:	2b00      	cmp	r3, #0
   2db2e:	d0a8      	beq.n	2da82 <ns_peripheral_button_init+0x66>
   2db30:	e7b7      	b.n	2daa2 <ns_peripheral_button_init+0x86>
        return NS_STATUS_INVALID_VERSION;
   2db32:	2602      	movs	r6, #2
}
   2db34:	4630      	mov	r0, r6
   2db36:	b006      	add	sp, #24
   2db38:	bd70      	pop	{r4, r5, r6, pc}
   2db3a:	bf00      	nop
   2db3c:	00041f78 	.word	0x00041f78
   2db40:	00041f84 	.word	0x00041f84
   2db44:	e000e100 	.word	0xe000e100
   2db48:	0002d9d9 	.word	0x0002d9d9
   2db4c:	10004ac4 	.word	0x10004ac4
   2db50:	1001979c 	.word	0x1001979c
   2db54:	10004ac8 	.word	0x10004ac8
   2db58:	100197a0 	.word	0x100197a0
   2db5c:	00042378 	.word	0x00042378
   2db60:	100197a4 	.word	0x100197a4
   2db64:	0002d9b9 	.word	0x0002d9b9
   2db68:	0002d9c9 	.word	0x0002d9c9

0002db6c <ns_power_down_peripherals>:
//*****************************************************************************
//
// Internal method for turning off peripherals
//
//*****************************************************************************
void ns_power_down_peripherals(const ns_power_config_t *pCfg) {
   2db6c:	b510      	push	{r4, lr}

    //
    // Disable the XTAL.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_RTC_SEL_LFRC, 0);
   2db6e:	2100      	movs	r1, #0
void ns_power_down_peripherals(const ns_power_config_t *pCfg) {
   2db70:	4604      	mov	r4, r0
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_RTC_SEL_LFRC, 0);
   2db72:	2001      	movs	r0, #1
   2db74:	f001 ffb8 	bl	2fae8 <am_hal_clkgen_control>

    //
    // Turn off the voltage comparator.
    //
    VCOMP->PWDKEY = _VAL2FLD(VCOMP_PWDKEY_PWDKEY, VCOMP_PWDKEY_PWDKEY_Key);
   2db78:	4b41      	ldr	r3, [pc, #260]	; (2dc80 <ns_power_down_peripherals+0x114>)
   2db7a:	2237      	movs	r2, #55	; 0x37
   2db7c:	609a      	str	r2, [r3, #8]
#endif // AM_DEVICES_BLECTRLR_RESET_PIN
       // return; ok

    //
    // Disable all peripherals
    //
   2db7e:	2000      	movs	r0, #0
   2db80:	f004 fd56 	bl	32630 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_IOS);

   2db84:	7aa3      	ldrb	r3, [r4, #10]
   2db86:	2b00      	cmp	r3, #0
   2db88:	d04b      	beq.n	2dc22 <ns_power_down_peripherals+0xb6>
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_IOM4);
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_IOM5);
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_IOM6);
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_IOM7);
    };

   2db8a:	7ae3      	ldrb	r3, [r4, #11]
   2db8c:	2b00      	cmp	r3, #0
   2db8e:	d063      	beq.n	2dc58 <ns_power_down_peripherals+0xec>
    if (pCfg->bNeedAlternativeUART == false) {
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_UART0);
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_UART3);
    }

   2db90:	200a      	movs	r0, #10
   2db92:	f004 fd4d 	bl	32630 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_UART1);
   2db96:	200b      	movs	r0, #11
   2db98:	f004 fd4a 	bl	32630 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_UART2);
   2db9c:	200d      	movs	r0, #13
   2db9e:	f004 fd47 	bl	32630 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_ADC);
   2dba2:	200e      	movs	r0, #14
   2dba4:	f004 fd44 	bl	32630 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_MSPI0);
   2dba8:	200f      	movs	r0, #15
   2dbaa:	f004 fd41 	bl	32630 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_MSPI1);
   2dbae:	2010      	movs	r0, #16
   2dbb0:	f004 fd3e 	bl	32630 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_MSPI2);
   2dbb4:	2011      	movs	r0, #17
   2dbb6:	f004 fd3b 	bl	32630 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_GFX);

#ifndef AM_PART_APOLLO4L
   2dbba:	2012      	movs	r0, #18
   2dbbc:	f004 fd38 	bl	32630 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_DISP);
   2dbc0:	2013      	movs	r0, #19
   2dbc2:	f004 fd35 	bl	32630 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_DISPPHY);
   2dbc6:	2016      	movs	r0, #22
   2dbc8:	f004 fd32 	bl	32630 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_USB);
   2dbcc:	2017      	movs	r0, #23
   2dbce:	f004 fd2f 	bl	32630 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_USBPHY);
   2dbd2:	201c      	movs	r0, #28
   2dbd4:	f004 fd2c 	bl	32630 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_PDM1);
   2dbd8:	201d      	movs	r0, #29
   2dbda:	f004 fd29 	bl	32630 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_PDM2);
   2dbde:	201e      	movs	r0, #30
   2dbe0:	f004 fd26 	bl	32630 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_PDM3);
   2dbe4:	2020      	movs	r0, #32
   2dbe6:	f004 fd23 	bl	32630 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_I2S1);
#endif

   2dbea:	2015      	movs	r0, #21
   2dbec:	f004 fd20 	bl	32630 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_SDIO);
   2dbf0:	2018      	movs	r0, #24
   2dbf2:	f004 fd1d 	bl	32630 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_DEBUG);
   2dbf6:	2019      	movs	r0, #25
   2dbf8:	f004 fd1a 	bl	32630 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_AUDREC);
   2dbfc:	201a      	movs	r0, #26
   2dbfe:	f004 fd17 	bl	32630 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_AUDPB);
   2dc02:	201b      	movs	r0, #27
   2dc04:	f004 fd14 	bl	32630 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_PDM0);
   2dc08:	201f      	movs	r0, #31
   2dc0a:	f004 fd11 	bl	32630 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_I2S0);
// return;
#ifndef AM_PART_APOLLO4L
   2dc0e:	7963      	ldrb	r3, [r4, #5]
   2dc10:	b393      	cbz	r3, 2dc78 <ns_power_down_peripherals+0x10c>
    if (pCfg->bNeedAudAdc == false) {
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_AUDADC);
    }
#endif

   2dc12:	79e1      	ldrb	r1, [r4, #7]
   2dc14:	b339      	cbz	r1, 2dc66 <ns_power_down_peripherals+0xfa>
        // Power down Crypto.
        am_hal_pwrctrl_control(AM_HAL_PWRCTRL_CONTROL_CRYPTO_POWERDOWN, 0);
    }
    // return;
    if (pCfg->bNeedBluetooth == false) {
        // TODO: setting this pwrctl mode kills FreeRTOS tasks
   2dc16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (pCfg->bNeedBluetooth == false) {
   2dc1a:	2100      	movs	r1, #0
   2dc1c:	2002      	movs	r0, #2
   2dc1e:	f004 bea3 	b.w	32968 <am_hal_pwrctrl_control>
    if (pCfg->bNeedIOM == false) {
   2dc22:	2001      	movs	r0, #1
   2dc24:	f004 fd04 	bl	32630 <am_hal_pwrctrl_periph_disable>
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_IOM0);
   2dc28:	2002      	movs	r0, #2
   2dc2a:	f004 fd01 	bl	32630 <am_hal_pwrctrl_periph_disable>
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_IOM1);
   2dc2e:	2003      	movs	r0, #3
   2dc30:	f004 fcfe 	bl	32630 <am_hal_pwrctrl_periph_disable>
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_IOM2);
   2dc34:	2004      	movs	r0, #4
   2dc36:	f004 fcfb 	bl	32630 <am_hal_pwrctrl_periph_disable>
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_IOM3);
   2dc3a:	2005      	movs	r0, #5
   2dc3c:	f004 fcf8 	bl	32630 <am_hal_pwrctrl_periph_disable>
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_IOM4);
   2dc40:	2006      	movs	r0, #6
   2dc42:	f004 fcf5 	bl	32630 <am_hal_pwrctrl_periph_disable>
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_IOM5);
   2dc46:	2007      	movs	r0, #7
   2dc48:	f004 fcf2 	bl	32630 <am_hal_pwrctrl_periph_disable>
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_IOM6);
   2dc4c:	2008      	movs	r0, #8
   2dc4e:	f004 fcef 	bl	32630 <am_hal_pwrctrl_periph_disable>

   2dc52:	7ae3      	ldrb	r3, [r4, #11]
   2dc54:	2b00      	cmp	r3, #0
   2dc56:	d19b      	bne.n	2db90 <ns_power_down_peripherals+0x24>
    if (pCfg->bNeedAlternativeUART == false) {
   2dc58:	2009      	movs	r0, #9
   2dc5a:	f004 fce9 	bl	32630 <am_hal_pwrctrl_periph_disable>
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_UART0);
   2dc5e:	200c      	movs	r0, #12
   2dc60:	f004 fce6 	bl	32630 <am_hal_pwrctrl_periph_disable>
   2dc64:	e794      	b.n	2db90 <ns_power_down_peripherals+0x24>
        // Power down Crypto.
   2dc66:	2001      	movs	r0, #1
   2dc68:	f004 fe7e 	bl	32968 <am_hal_pwrctrl_control>
        // TODO: setting this pwrctl mode kills FreeRTOS tasks
   2dc6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (pCfg->bNeedBluetooth == false) {
   2dc70:	2100      	movs	r1, #0
   2dc72:	2002      	movs	r0, #2
   2dc74:	f004 be78 	b.w	32968 <am_hal_pwrctrl_control>
    if (pCfg->bNeedAudAdc == false) {
   2dc78:	2021      	movs	r0, #33	; 0x21
   2dc7a:	f004 fcd9 	bl	32630 <am_hal_pwrctrl_periph_disable>
   2dc7e:	e7c8      	b.n	2dc12 <ns_power_down_peripherals+0xa6>
   2dc80:	4000c000 	.word	0x4000c000

0002dc84 <ns_power_config>:
        // vTaskScheduler works after a power cycle, but not after resets.
        // Since the only neuralSPOT examples needing freertos involve bluetooth,
   2dc84:	b570      	push	{r4, r5, r6, lr}
   2dc86:	b084      	sub	sp, #16
        // use that flag for now.
        // XTAL powerdown
        am_hal_pwrctrl_control(AM_HAL_PWRCTRL_CONTROL_XTAL_PWDN_DEEPSLEEP, 0);
    }
   2dc88:	2800      	cmp	r0, #0
   2dc8a:	d03d      	beq.n	2dd08 <ns_power_config+0x84>
}

// Main function for power configuration
uint32_t ns_power_config(const ns_power_config_t *pCfg) {
   2dc8c:	4a3b      	ldr	r2, [pc, #236]	; (2dd7c <ns_power_config+0xf8>)
   2dc8e:	493c      	ldr	r1, [pc, #240]	; (2dd80 <ns_power_config+0xfc>)
   2dc90:	4604      	mov	r4, r0
   2dc92:	6800      	ldr	r0, [r0, #0]
   2dc94:	f7f2 fc4e 	bl	20534 <ns_core_check_api>
   2dc98:	4605      	mov	r5, r0
   2dc9a:	2800      	cmp	r0, #0
   2dc9c:	d130      	bne.n	2dd00 <ns_power_config+0x7c>
    uint32_t ui32ReturnStatus = AM_HAL_STATUS_SUCCESS;

#ifndef NS_DISABLE_API_VALIDATION
    if (pCfg == NULL) {
        return NS_STATUS_INVALID_HANDLE;
   2dc9e:	f000 fe03 	bl	2e8a8 <ns_core_initialized>
   2dca2:	2800      	cmp	r0, #0
   2dca4:	d042      	beq.n	2dd2c <ns_power_config+0xa8>
    }

    if (ns_core_check_api(
            pCfg->api, &ns_power_oldest_supported_version, &ns_power_current_version)) {
        return NS_STATUS_INVALID_VERSION;
    }
   2dca6:	f005 fa39 	bl	3311c <am_bsp_low_power_init>

    if (!ns_core_initialized()) {
        // Power needs ns_core to be initialized first
   2dcaa:	79a3      	ldrb	r3, [r4, #6]
   2dcac:	2b00      	cmp	r3, #0
   2dcae:	d02f      	beq.n	2dd10 <ns_power_config+0x8c>
            .eSRAMRetain = AM_HAL_PWRCTRL_SRAM_NONE};
        am_hal_pwrctrl_sram_config(&SRAMMemCfg);

#ifndef AM_PART_APOLLO4L
        am_hal_pwrctrl_dsp_memory_config_t sExtSRAMMemCfg = {
            .bEnableICache = false,
   2dcb0:	4b34      	ldr	r3, [pc, #208]	; (2dd84 <ns_power_config+0x100>)
   2dcb2:	e893 0003 	ldmia.w	r3, {r0, r1}
            .bRetainRAM = false};
        am_hal_pwrctrl_dsp_memory_config(AM_HAL_DSP0, &sExtSRAMMemCfg);
#endif
    } else {
        am_hal_daxi_config_t DaxiConfigLongAging = {
            .bDaxiPassThrough = false,
   2dcb6:	ae02      	add	r6, sp, #8
            .bEnableICache = false,
   2dcb8:	9002      	str	r0, [sp, #8]
            .bDaxiPassThrough = false,
   2dcba:	4630      	mov	r0, r6
            .bEnableICache = false,
   2dcbc:	f88d 100c 	strb.w	r1, [sp, #12]
            .bDaxiPassThrough = false,
   2dcc0:	f001 fe56 	bl	2f970 <am_hal_daxi_config>
            .bAgingSEnabled = false, // false means only age-out write/modified lines    
            .eAgingCounter = AM_HAL_DAXI_CONFIG_AGING_1024, // 1024 will age out a line in ~ 96
                                                            // cycles.  Optimal for most use cases
                                                            // should be 256, 512, 1024, or 2048
   2dcc4:	7a23      	ldrb	r3, [r4, #8]
   2dcc6:	2b00      	cmp	r3, #0
   2dcc8:	d053      	beq.n	2dd72 <ns_power_config+0xee>
            .eNumBuf = AM_HAL_DAXI_CONFIG_NUMBUF_32,
            .eNumFreeBuf = AM_HAL_DAXI_CONFIG_NUMFREEBUF_3,
        };
   2dcca:	f001 fe45 	bl	2f958 <am_hal_cachectrl_enable>
        am_hal_daxi_config(&DaxiConfigLongAging);
    }

   2dcce:	4620      	mov	r0, r4
   2dcd0:	f7ff ff4c 	bl	2db6c <ns_power_down_peripherals>
    if ((eAIPowerMode == NS_MAXIMUM_PERF) || (eAIPowerMode == NS_MEDIUM_PERF))
   2dcd4:	7923      	ldrb	r3, [r4, #4]
   2dcd6:	3b01      	subs	r3, #1
   2dcd8:	2b01      	cmp	r3, #1
        am_hal_pwrctrl_mcu_mode_select(AM_HAL_PWRCTRL_MCU_MODE_HIGH_PERFORMANCE);
   2dcda:	bf94      	ite	ls
   2dcdc:	2002      	movls	r0, #2
        am_hal_pwrctrl_mcu_mode_select(AM_HAL_PWRCTRL_MCU_MODE_LOW_POWER);
   2dcde:	2001      	movhi	r0, #1
   2dce0:	f004 f9b4 	bl	3204c <am_hal_pwrctrl_mcu_mode_select>
    // The following line cause BLE to stop working - TODO
    if (pCfg->bNeedBluetooth == false) {
        am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    }
    am_hal_cachectrl_enable();
   2dce4:	7b23      	ldrb	r3, [r4, #12]
   2dce6:	2b00      	cmp	r3, #0
   2dce8:	d139      	bne.n	2dd5e <ns_power_config+0xda>
    if (pCfg->b128kTCM == true) {

        am_hal_pwrctrl_mcu_memory_config_t McuMemCfg = {
            .eCacheCfg = AM_HAL_PWRCTRL_CACHE_ALL,
            .bRetainCache = true,
            .eDTCMCfg = AM_HAL_PWRCTRL_DTCM_128K,
   2dcea:	7b63      	ldrb	r3, [r4, #13]
   2dcec:	bb13      	cbnz	r3, 2dd34 <ns_power_config+0xb0>
#if defined(NS_AMBIQSUITE_VERSION_R4_1_0) || defined(AM_PART_APOLLO4L)
        ns_lp_printf("WARNING TempCo not supported by AmbiqSuite R4.1.0 or Apollo4 Lite\n");
#else
        // Make sure the trim version is high enough before attempting to init
        uint32_t ui32Ret, ui32TrimVer;
        ui32Ret = am_hal_mram_info_read(1, AM_REG_INFO1_TRIM_REV_O / 4, 1, &ui32TrimVer);
   2dcee:	4b26      	ldr	r3, [pc, #152]	; (2dd88 <ns_power_config+0x104>)
   2dcf0:	79e2      	ldrb	r2, [r4, #7]
        if ((ui32Ret == 0) && (ui32TrimVer != 0xFFFFFFFF) && (ui32TrimVer >= 6)) {
            if (ns_tempco_init() != 0) {
   2dcf2:	7ba1      	ldrb	r1, [r4, #14]
        ui32Ret = am_hal_mram_info_read(1, AM_REG_INFO1_TRIM_REV_O / 4, 1, &ui32TrimVer);
   2dcf4:	725a      	strb	r2, [r3, #9]
                ns_printf("ERROR TempCo init failed\n");
            }
        }
   2dcf6:	4628      	mov	r0, r5
        if ((ui32Ret == 0) && (ui32TrimVer != 0xFFFFFFFF) && (ui32TrimVer >= 6)) {
   2dcf8:	729a      	strb	r2, [r3, #10]
            if (ns_tempco_init() != 0) {
   2dcfa:	7159      	strb	r1, [r3, #5]
        }
   2dcfc:	b004      	add	sp, #16
   2dcfe:	bd70      	pop	{r4, r5, r6, pc}

   2dd00:	2502      	movs	r5, #2
        }
   2dd02:	4628      	mov	r0, r5
   2dd04:	b004      	add	sp, #16
   2dd06:	bd70      	pop	{r4, r5, r6, pc}
}
   2dd08:	2501      	movs	r5, #1
        }
   2dd0a:	4628      	mov	r0, r5
   2dd0c:	b004      	add	sp, #16
   2dd0e:	bd70      	pop	{r4, r5, r6, pc}
        return NS_STATUS_INIT_FAILED;
   2dd10:	ae02      	add	r6, sp, #8

   2dd12:	4630      	mov	r0, r6
        return NS_STATUS_INIT_FAILED;
   2dd14:	9502      	str	r5, [sp, #8]
   2dd16:	80b5      	strh	r5, [r6, #4]

   2dd18:	f004 fa7c 	bl	32214 <am_hal_pwrctrl_sram_config>

   2dd1c:	4669      	mov	r1, sp
   2dd1e:	4628      	mov	r0, r5
        am_hal_pwrctrl_sram_memcfg_t SRAMMemCfg = {
   2dd20:	9500      	str	r5, [sp, #0]
   2dd22:	f88d 5004 	strb.w	r5, [sp, #4]

   2dd26:	f004 facd 	bl	322c4 <am_hal_pwrctrl_dsp_memory_config>
   2dd2a:	e7cb      	b.n	2dcc4 <ns_power_config+0x40>

   2dd2c:	2504      	movs	r5, #4
        }
   2dd2e:	4628      	mov	r0, r5
   2dd30:	b004      	add	sp, #16
   2dd32:	bd70      	pop	{r4, r5, r6, pc}
    }
   2dd34:	2201      	movs	r2, #1
   2dd36:	4633      	mov	r3, r6
   2dd38:	f240 41c4 	movw	r1, #1220	; 0x4c4
   2dd3c:	4610      	mov	r0, r2
   2dd3e:	f002 fa87 	bl	30250 <am_hal_mram_info_read>

   2dd42:	2800      	cmp	r0, #0
   2dd44:	d1d3      	bne.n	2dcee <ns_power_config+0x6a>
   2dd46:	9b02      	ldr	r3, [sp, #8]
   2dd48:	3b06      	subs	r3, #6
   2dd4a:	3308      	adds	r3, #8
   2dd4c:	d8cf      	bhi.n	2dcee <ns_power_config+0x6a>
    if (pCfg->bEnableTempCo) {
   2dd4e:	f000 f8b5 	bl	2debc <ns_tempco_init>
   2dd52:	2800      	cmp	r0, #0
   2dd54:	d0cb      	beq.n	2dcee <ns_power_config+0x6a>
#if defined(NS_AMBIQSUITE_VERSION_R4_1_0) || defined(AM_PART_APOLLO4L)
   2dd56:	480d      	ldr	r0, [pc, #52]	; (2dd8c <ns_power_config+0x108>)
   2dd58:	f7ff fdf6 	bl	2d948 <ns_lp_printf>
   2dd5c:	e7c7      	b.n	2dcee <ns_power_config+0x6a>
    // configure peripherals
   2dd5e:	4b0c      	ldr	r3, [pc, #48]	; (2dd90 <ns_power_config+0x10c>)
   2dd60:	e893 0003 	ldmia.w	r3, {r0, r1}
   2dd64:	9002      	str	r0, [sp, #8]
        am_hal_pwrctrl_mcu_memory_config_t McuMemCfg = {
   2dd66:	4630      	mov	r0, r6
    // configure peripherals
   2dd68:	f8ad 100c 	strh.w	r1, [sp, #12]
        am_hal_pwrctrl_mcu_memory_config_t McuMemCfg = {
   2dd6c:	f004 f9a4 	bl	320b8 <am_hal_pwrctrl_mcu_memory_config>
   2dd70:	e7bb      	b.n	2dcea <ns_power_config+0x66>
            .eNumBuf = AM_HAL_DAXI_CONFIG_NUMBUF_32,
   2dd72:	4808      	ldr	r0, [pc, #32]	; (2dd94 <ns_power_config+0x110>)
   2dd74:	f001 fdce 	bl	2f914 <am_hal_cachectrl_config>
   2dd78:	e7a7      	b.n	2dcca <ns_power_config+0x46>
   2dd7a:	bf00      	nop
   2dd7c:	00041fc8 	.word	0x00041fc8
   2dd80:	00041fd4 	.word	0x00041fd4
   2dd84:	0003ed84 	.word	0x0003ed84
   2dd88:	10010b18 	.word	0x10010b18
   2dd8c:	00041f90 	.word	0x00041f90
   2dd90:	0003ed8c 	.word	0x0003ed8c
   2dd94:	00042368 	.word	0x00042368

0002dd98 <ns_deep_sleep>:
    }
    g_ns_state.cryptoWantsToBeEnabled = pCfg->bNeedCrypto;
    g_ns_state.cryptoCurrentlyEnabled = pCfg->bNeedCrypto;
    g_ns_state.itmPrintWantsToBeEnabled = pCfg->bNeedITM;

    return ui32ReturnStatus;
   2dd98:	b538      	push	{r3, r4, r5, lr}
}

   2dd9a:	4c16      	ldr	r4, [pc, #88]	; (2ddf4 <ns_deep_sleep+0x5c>)
   2dd9c:	7b25      	ldrb	r5, [r4, #12]
   2dd9e:	bb25      	cbnz	r5, 2ddea <ns_deep_sleep+0x52>
/**
 * @brief Wraps am_hal_sysctrl_sleep to enable and disable
 * systems as needed.
   2dda0:	79a3      	ldrb	r3, [r4, #6]
   2dda2:	b943      	cbnz	r3, 2ddb6 <ns_deep_sleep+0x1e>
 *
 */
void ns_deep_sleep(void) {

    if (g_ns_state.uartPrintCurrentlyEnabled) {
   2dda4:	7aa3      	ldrb	r3, [r4, #10]
   2dda6:	b963      	cbnz	r3, 2ddc2 <ns_deep_sleep+0x2a>
    } else if (g_ns_state.itmPrintCurrentlyEnabled) {
        ns_cryptoless_itm_printf_disable();
        g_ns_state.itmPrintCurrentlyEnabled = false;
    }

    if (g_ns_state.cryptoCurrentlyEnabled) {
   2dda8:	7a23      	ldrb	r3, [r4, #8]
   2ddaa:	b99b      	cbnz	r3, 2ddd4 <ns_deep_sleep+0x3c>

#if defined(NS_AMBIQSUITE_VERSION_R4_1_0) || defined(AM_PART_APOLLO4L)
    // TEMPCO not supported in this version
#else
    if (g_ns_state.tempcoCurrentlyEnabled) {
        am_hal_adc_power_control(g_ns_tempco_ADCHandle, AM_HAL_SYSCTRL_DEEPSLEEP, true);
   2ddac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#if defined(NS_AMBIQSUITE_VERSION_R4_1_0) || defined(AM_PART_APOLLO4L)
   2ddb0:	2001      	movs	r0, #1
   2ddb2:	f002 ba7f 	b.w	302b4 <am_hal_sysctrl_sleep>
 *
   2ddb6:	f7ff fdb7 	bl	2d928 <ns_cryptoless_itm_printf_disable>
    if (g_ns_state.uartPrintCurrentlyEnabled) {
   2ddba:	7aa3      	ldrb	r3, [r4, #10]
 */
   2ddbc:	71a5      	strb	r5, [r4, #6]
    if (g_ns_state.uartPrintCurrentlyEnabled) {
   2ddbe:	2b00      	cmp	r3, #0
   2ddc0:	d0f2      	beq.n	2dda8 <ns_deep_sleep+0x10>
        am_bsp_uart_printf_disable();
   2ddc2:	2100      	movs	r1, #0
   2ddc4:	2001      	movs	r0, #1
   2ddc6:	f004 fdcf 	bl	32968 <am_hal_pwrctrl_control>
        g_ns_state.uartPrintCurrentlyEnabled = false;
   2ddca:	2300      	movs	r3, #0
   2ddcc:	72a3      	strb	r3, [r4, #10]
    if (g_ns_state.cryptoCurrentlyEnabled) {
   2ddce:	7a23      	ldrb	r3, [r4, #8]
   2ddd0:	2b00      	cmp	r3, #0
   2ddd2:	d0eb      	beq.n	2ddac <ns_deep_sleep+0x14>
        am_hal_pwrctrl_control(AM_HAL_PWRCTRL_CONTROL_CRYPTO_POWERDOWN, 0);
   2ddd4:	4b08      	ldr	r3, [pc, #32]	; (2ddf8 <ns_deep_sleep+0x60>)
   2ddd6:	2201      	movs	r2, #1
   2ddd8:	6818      	ldr	r0, [r3, #0]
   2ddda:	2102      	movs	r1, #2
   2dddc:	f002 fef2 	bl	30bc4 <am_hal_adc_power_control>
        am_hal_adc_power_control(g_ns_tempco_ADCHandle, AM_HAL_SYSCTRL_DEEPSLEEP, true);
   2dde0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#if defined(NS_AMBIQSUITE_VERSION_R4_1_0) || defined(AM_PART_APOLLO4L)
   2dde4:	2001      	movs	r0, #1
   2dde6:	f002 ba65 	b.w	302b4 <am_hal_sysctrl_sleep>
/**
   2ddea:	f005 fa17 	bl	3321c <am_bsp_uart_printf_disable>
 * @brief Wraps am_hal_sysctrl_sleep to enable and disable
   2ddee:	2300      	movs	r3, #0
   2ddf0:	7323      	strb	r3, [r4, #12]
   2ddf2:	e7d7      	b.n	2dda4 <ns_deep_sleep+0xc>
   2ddf4:	10010b18 	.word	0x10010b18
   2ddf8:	100197a8 	.word	0x100197a8

0002ddfc <ns_tempco_callback>:

    return 0;
}

// timer ISR callback
static void ns_tempco_callback(ns_timer_config_t *c) {
   2ddfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    // Power up, configure, and enable the ADC.
    am_hal_adc_power_control(g_ns_tempco_ADCHandle, AM_HAL_SYSCTRL_WAKE, true);
   2de00:	4e29      	ldr	r6, [pc, #164]	; (2dea8 <ns_tempco_callback+0xac>)
    uint32_t ux, ui32OneSample;

    ui32OneSample = 1;

    sSamples[0].ui32Sample = sSamples[1].ui32Sample = sSamples[2].ui32Sample =
        sSamples[3].ui32Sample = sSamples[4].ui32Sample = 0;
   2de02:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 2deb0 <ns_tempco_callback+0xb4>
    am_hal_adc_power_control(g_ns_tempco_ADCHandle, AM_HAL_SYSCTRL_WAKE, true);
   2de06:	6830      	ldr	r0, [r6, #0]
   2de08:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 2deb8 <ns_tempco_callback+0xbc>
    ui32Cnt0 = _FLD2VAL(ADC_FIFO_COUNT, ADC->FIFO);
   2de0c:	4d27      	ldr	r5, [pc, #156]	; (2deac <ns_tempco_callback+0xb0>)
static void ns_tempco_callback(ns_timer_config_t *c) {
   2de0e:	b085      	sub	sp, #20
    am_hal_adc_power_control(g_ns_tempco_ADCHandle, AM_HAL_SYSCTRL_WAKE, true);
   2de10:	2201      	movs	r2, #1
   2de12:	2100      	movs	r1, #0
   2de14:	f002 fed6 	bl	30bc4 <am_hal_adc_power_control>
    am_hal_adc_enable(g_ns_tempco_ADCHandle);
   2de18:	6830      	ldr	r0, [r6, #0]
   2de1a:	f002 fd5b 	bl	308d4 <am_hal_adc_enable>
        sSamples[3].ui32Sample = sSamples[4].ui32Sample = 0;
   2de1e:	2700      	movs	r7, #0
    ui32OneSample = 1;
   2de20:	2301      	movs	r3, #1
   2de22:	9303      	str	r3, [sp, #12]
        sSamples[3].ui32Sample = sSamples[4].ui32Sample = 0;
   2de24:	f8c8 7020 	str.w	r7, [r8, #32]
   2de28:	f8c8 7018 	str.w	r7, [r8, #24]
    sSamples[0].ui32Sample = sSamples[1].ui32Sample = sSamples[2].ui32Sample =
   2de2c:	f8c8 7010 	str.w	r7, [r8, #16]
   2de30:	f8c8 7008 	str.w	r7, [r8, #8]
   2de34:	f8c8 7000 	str.w	r7, [r8]
    ui32Cnt0 = _FLD2VAL(ADC_FIFO_COUNT, ADC->FIFO);
   2de38:	6bac      	ldr	r4, [r5, #56]	; 0x38
    while (_FLD2VAL(ADC_FIFO_COUNT, ADC->FIFO) == ui32Cnt0) {
   2de3a:	6bab      	ldr	r3, [r5, #56]	; 0x38
    ui32Cnt0 = _FLD2VAL(ADC_FIFO_COUNT, ADC->FIFO);
   2de3c:	f3c4 5407 	ubfx	r4, r4, #20, #8
    while (_FLD2VAL(ADC_FIFO_COUNT, ADC->FIFO) == ui32Cnt0) {
   2de40:	f3c3 5307 	ubfx	r3, r3, #20, #8
   2de44:	429c      	cmp	r4, r3
   2de46:	d10a      	bne.n	2de5e <ns_tempco_callback+0x62>
        am_hal_adc_sw_trigger(g_ns_tempco_ADCHandle);
   2de48:	6830      	ldr	r0, [r6, #0]
   2de4a:	f002 fea9 	bl	30ba0 <am_hal_adc_sw_trigger>
        am_hal_delay_us(1);
   2de4e:	2001      	movs	r0, #1
   2de50:	f002 fae4 	bl	3041c <am_hal_delay_us>
    while (_FLD2VAL(ADC_FIFO_COUNT, ADC->FIFO) == ui32Cnt0) {
   2de54:	6bab      	ldr	r3, [r5, #56]	; 0x38
   2de56:	f3c3 5307 	ubfx	r3, r3, #20, #8
   2de5a:	429c      	cmp	r4, r3
   2de5c:	d0f4      	beq.n	2de48 <ns_tempco_callback+0x4c>
    ux = 0;
    while (ux < ui32NumSamples) {
        adc_trigger_wait();

        // Invalidate DAXI to make sure CPU sees the new data when loaded.
        am_hal_daxi_control(AM_HAL_DAXI_CONTROL_INVALIDATE, NULL);
   2de5e:	2100      	movs	r1, #0
        am_hal_adc_samples_read(g_ns_tempco_ADCHandle, true, NULL, &ui32OneSample, &sSamples[ux]);
   2de60:	eb08 04c7 	add.w	r4, r8, r7, lsl #3
        am_hal_daxi_control(AM_HAL_DAXI_CONTROL_INVALIDATE, NULL);
   2de64:	4608      	mov	r0, r1
   2de66:	f001 fdcd 	bl	2fa04 <am_hal_daxi_control>
        am_hal_adc_samples_read(g_ns_tempco_ADCHandle, true, NULL, &ui32OneSample, &sSamples[ux]);
   2de6a:	ab03      	add	r3, sp, #12
   2de6c:	2200      	movs	r2, #0
   2de6e:	6830      	ldr	r0, [r6, #0]
   2de70:	9400      	str	r4, [sp, #0]
   2de72:	2101      	movs	r1, #1
   2de74:	f002 fd5c 	bl	30930 <am_hal_adc_samples_read>

        if (sSamples[ux].ui32Slot == g_ns_tempco_ui32TempcoADCslot) {
   2de78:	6862      	ldr	r2, [r4, #4]
   2de7a:	f8d9 3000 	ldr.w	r3, [r9]
   2de7e:	429a      	cmp	r2, r3
            // This is a temperature sample. Get the next sample.
            ux++;
   2de80:	bf08      	it	eq
   2de82:	3701      	addeq	r7, #1
    while (ux < ui32NumSamples) {
   2de84:	2f05      	cmp	r7, #5
   2de86:	d1d7      	bne.n	2de38 <ns_tempco_callback+0x3c>
        am_hal_pwrctrl_tempco_sample_handler(AM_HAL_TEMPCO_NUMSAMPLES, g_ns_tempco_sSamples);
   2de88:	4909      	ldr	r1, [pc, #36]	; (2deb0 <ns_tempco_callback+0xb4>)
   2de8a:	4638      	mov	r0, r7
   2de8c:	f004 fef6 	bl	32c7c <am_hal_pwrctrl_tempco_sample_handler>
    g_ns_tempco_ui32TempcoIsrRet =
   2de90:	4b08      	ldr	r3, [pc, #32]	; (2deb4 <ns_tempco_callback+0xb8>)
        am_hal_pwrctrl_tempco_sample_handler(AM_HAL_TEMPCO_NUMSAMPLES, g_ns_tempco_sSamples);
   2de92:	4604      	mov	r4, r0
    am_hal_adc_power_control(g_ns_tempco_ADCHandle, AM_HAL_SYSCTRL_DEEPSLEEP, true);
   2de94:	6830      	ldr	r0, [r6, #0]
    g_ns_tempco_ui32TempcoIsrRet =
   2de96:	601c      	str	r4, [r3, #0]
    am_hal_adc_power_control(g_ns_tempco_ADCHandle, AM_HAL_SYSCTRL_DEEPSLEEP, true);
   2de98:	2201      	movs	r2, #1
   2de9a:	2102      	movs	r1, #2
}
   2de9c:	b005      	add	sp, #20
   2de9e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    am_hal_adc_power_control(g_ns_tempco_ADCHandle, AM_HAL_SYSCTRL_DEEPSLEEP, true);
   2dea2:	f002 be8f 	b.w	30bc4 <am_hal_adc_power_control>
   2dea6:	bf00      	nop
   2dea8:	100197a8 	.word	0x100197a8
   2deac:	40038000 	.word	0x40038000
   2deb0:	100197ac 	.word	0x100197ac
   2deb4:	100197d8 	.word	0x100197d8
   2deb8:	100197d4 	.word	0x100197d4

0002debc <ns_tempco_init>:
uint32_t ns_tempco_init(void) {
   2debc:	b530      	push	{r4, r5, lr}
    am_hal_adc_config_t sADC_Cfg = {
   2debe:	4b26      	ldr	r3, [pc, #152]	; (2df58 <ns_tempco_init+0x9c>)
    if (am_hal_adc_initialize(0, &g_ns_tempco_ADCHandle) != AM_HAL_STATUS_SUCCESS) {
   2dec0:	4c26      	ldr	r4, [pc, #152]	; (2df5c <ns_tempco_init+0xa0>)
    g_ns_tempco_ui32TempcoADCslot = TEMPCO_ADC_TEMPERATURE_SLOT;
   2dec2:	4d27      	ldr	r5, [pc, #156]	; (2df60 <ns_tempco_init+0xa4>)
    am_hal_adc_config_t sADC_Cfg = {
   2dec4:	e893 0003 	ldmia.w	r3, {r0, r1}
uint32_t ns_tempco_init(void) {
   2dec8:	b083      	sub	sp, #12
    g_ns_tempco_ui32TempcoADCslot = TEMPCO_ADC_TEMPERATURE_SLOT;
   2deca:	2305      	movs	r3, #5
    am_hal_adc_config_t sADC_Cfg = {
   2decc:	f8ad 1004 	strh.w	r1, [sp, #4]
   2ded0:	0c09      	lsrs	r1, r1, #16
   2ded2:	9000      	str	r0, [sp, #0]
   2ded4:	f88d 1006 	strb.w	r1, [sp, #6]
    if (am_hal_adc_initialize(0, &g_ns_tempco_ADCHandle) != AM_HAL_STATUS_SUCCESS) {
   2ded8:	2000      	movs	r0, #0
   2deda:	4621      	mov	r1, r4
    g_ns_tempco_ui32TempcoADCslot = TEMPCO_ADC_TEMPERATURE_SLOT;
   2dedc:	602b      	str	r3, [r5, #0]
    if (am_hal_adc_initialize(0, &g_ns_tempco_ADCHandle) != AM_HAL_STATUS_SUCCESS) {
   2dede:	f002 fb61 	bl	305a4 <am_hal_adc_initialize>
   2dee2:	b9f0      	cbnz	r0, 2df22 <ns_tempco_init+0x66>
    if (am_hal_adc_power_control(g_ns_tempco_ADCHandle, AM_HAL_SYSCTRL_WAKE, false) !=
   2dee4:	4602      	mov	r2, r0
   2dee6:	4601      	mov	r1, r0
   2dee8:	6820      	ldr	r0, [r4, #0]
   2deea:	f002 fe6b 	bl	30bc4 <am_hal_adc_power_control>
   2deee:	bb30      	cbnz	r0, 2df3e <ns_tempco_init+0x82>
    if (am_hal_adc_configure(g_ns_tempco_ADCHandle, (am_hal_adc_config_t *)&sADC_Cfg) !=
   2def0:	6820      	ldr	r0, [r4, #0]
   2def2:	4669      	mov	r1, sp
   2def4:	f002 fbda 	bl	306ac <am_hal_adc_configure>
   2def8:	b9d0      	cbnz	r0, 2df30 <ns_tempco_init+0x74>
    ns_timer_init(&g_ns_tempcoTimer);
   2defa:	481a      	ldr	r0, [pc, #104]	; (2df64 <ns_tempco_init+0xa8>)
   2defc:	f000 fcda 	bl	2e8b4 <ns_timer_init>
    ui32Retval = am_hal_pwrctrl_tempco_init(g_ns_tempco_ADCHandle, g_ns_tempco_ui32TempcoADCslot);
   2df00:	6829      	ldr	r1, [r5, #0]
   2df02:	6820      	ldr	r0, [r4, #0]
   2df04:	f004 fe6a 	bl	32bdc <am_hal_pwrctrl_tempco_init>
    if (ui32Retval != AM_HAL_STATUS_SUCCESS) {
   2df08:	4605      	mov	r5, r0
   2df0a:	b9f8      	cbnz	r0, 2df4c <ns_tempco_init+0x90>
    am_hal_adc_enable(g_ns_tempco_ADCHandle);
   2df0c:	6820      	ldr	r0, [r4, #0]
   2df0e:	f002 fce1 	bl	308d4 <am_hal_adc_enable>
    g_ns_state.tempcoWantsToBeEnabled = true;
   2df12:	4b15      	ldr	r3, [pc, #84]	; (2df68 <ns_tempco_init+0xac>)
   2df14:	f240 1201 	movw	r2, #257	; 0x101
   2df18:	f8a3 2007 	strh.w	r2, [r3, #7]
}
   2df1c:	4628      	mov	r0, r5
   2df1e:	b003      	add	sp, #12
   2df20:	bd30      	pop	{r4, r5, pc}
        ns_printf("tempco_init() Error - reservation of the ADC instance failed.\n");
   2df22:	4812      	ldr	r0, [pc, #72]	; (2df6c <ns_tempco_init+0xb0>)
   2df24:	f7ff fd10 	bl	2d948 <ns_lp_printf>
        return 1;
   2df28:	2501      	movs	r5, #1
}
   2df2a:	4628      	mov	r0, r5
   2df2c:	b003      	add	sp, #12
   2df2e:	bd30      	pop	{r4, r5, pc}
        ns_printf("tempco_init() Error - configuring ADC failed.\n");
   2df30:	480f      	ldr	r0, [pc, #60]	; (2df70 <ns_tempco_init+0xb4>)
   2df32:	f7ff fd09 	bl	2d948 <ns_lp_printf>
        return 3;
   2df36:	2503      	movs	r5, #3
}
   2df38:	4628      	mov	r0, r5
   2df3a:	b003      	add	sp, #12
   2df3c:	bd30      	pop	{r4, r5, pc}
        ns_printf("tempco_init() Error - ADC power on failed.\n");
   2df3e:	480d      	ldr	r0, [pc, #52]	; (2df74 <ns_tempco_init+0xb8>)
   2df40:	f7ff fd02 	bl	2d948 <ns_lp_printf>
        return 2;
   2df44:	2502      	movs	r5, #2
}
   2df46:	4628      	mov	r0, r5
   2df48:	b003      	add	sp, #12
   2df4a:	bd30      	pop	{r4, r5, pc}
        ns_printf("ERROR am_hal_pwrctrl_tempco_init() returned %d.\n", ui32Retval);
   2df4c:	4601      	mov	r1, r0
   2df4e:	480a      	ldr	r0, [pc, #40]	; (2df78 <ns_tempco_init+0xbc>)
   2df50:	f7ff fcfa 	bl	2d948 <ns_lp_printf>
        return 4;
   2df54:	2504      	movs	r5, #4
   2df56:	e7e1      	b.n	2df1c <ns_tempco_init+0x60>
   2df58:	0003ed94 	.word	0x0003ed94
   2df5c:	100197a8 	.word	0x100197a8
   2df60:	100197d4 	.word	0x100197d4
   2df64:	10004a70 	.word	0x10004a70
   2df68:	10010b18 	.word	0x10010b18
   2df6c:	00041fe0 	.word	0x00041fe0
   2df70:	0004204c 	.word	0x0004204c
   2df74:	00042020 	.word	0x00042020
   2df78:	0004207c 	.word	0x0004207c

0002df7c <ns_audio_init>:
 * @brief Audio Configuration and State
 *
 */
ns_audio_config_t *g_ns_audio_config = NULL;

uint32_t ns_audio_init(ns_audio_config_t *cfg) {
   2df7c:	b570      	push	{r4, r5, r6, lr}
   2df7e:	b084      	sub	sp, #16
#ifndef NS_DISABLE_API_VALIDATION
    // Check the handle.
    if (cfg == NULL) {
   2df80:	2800      	cmp	r0, #0
   2df82:	d038      	beq.n	2dff6 <ns_audio_init+0x7a>
        return NS_STATUS_INVALID_HANDLE;
    }

    // check API version
    if (ns_core_check_api(
   2df84:	4a2d      	ldr	r2, [pc, #180]	; (2e03c <ns_audio_init+0xc0>)
   2df86:	492e      	ldr	r1, [pc, #184]	; (2e040 <ns_audio_init+0xc4>)
   2df88:	4604      	mov	r4, r0
   2df8a:	6800      	ldr	r0, [r0, #0]
   2df8c:	f7f2 fad2 	bl	20534 <ns_core_check_api>
   2df90:	4605      	mov	r5, r0
   2df92:	2800      	cmp	r0, #0
   2df94:	d13c      	bne.n	2e010 <ns_audio_init+0x94>
            cfg->api, &ns_audio_oldest_supported_version, &ns_audio_current_version)) {
        return NS_STATUS_INVALID_VERSION;
    }

    if ((cfg->callback == NULL) || (cfg->audioBuffer == NULL) || (cfg->sampleBuffer == NULL)) {
   2df96:	68a3      	ldr	r3, [r4, #8]
   2df98:	b34b      	cbz	r3, 2dfee <ns_audio_init+0x72>
   2df9a:	68e2      	ldr	r2, [r4, #12]
   2df9c:	b33a      	cbz	r2, 2dfee <ns_audio_init+0x72>
   2df9e:	6963      	ldr	r3, [r4, #20]
   2dfa0:	b32b      	cbz	r3, 2dfee <ns_audio_init+0x72>
        return NS_STATUS_INVALID_CONFIG; // APOLLO4L only supports 1 channel
    }

    #endif

    if ((cfg->api->version.major != 1) && (cfg->eAudioSource == NS_AUDIO_SOURCE_AUDADC) &&
   2dfa2:	6823      	ldr	r3, [r4, #0]
   2dfa4:	889b      	ldrh	r3, [r3, #4]
   2dfa6:	2b01      	cmp	r3, #1
   2dfa8:	d001      	beq.n	2dfae <ns_audio_init+0x32>
   2dfaa:	7c23      	ldrb	r3, [r4, #16]
   2dfac:	b1e3      	cbz	r3, 2dfe8 <ns_audio_init+0x6c>
        (cfg->workingBuffer == NULL)) {
        return NS_STATUS_INVALID_CONFIG;
    }
    if (sizeof(*(cfg->sampleBuffer)) > cfg->numSamples * 2) {
   2dfae:	8be3      	ldrh	r3, [r4, #30]
   2dfb0:	005b      	lsls	r3, r3, #1
   2dfb2:	2b03      	cmp	r3, #3
   2dfb4:	dd1b      	ble.n	2dfee <ns_audio_init+0x72>

    // cfg->api->initialized = true;

    g_ns_audio_config = cfg;

    if (g_ns_audio_config->eAudioApiMode == NS_AUDIO_API_RINGBUFFER) {
   2dfb6:	7921      	ldrb	r1, [r4, #4]
    g_ns_audio_config = cfg;
   2dfb8:	4e22      	ldr	r6, [pc, #136]	; (2e044 <ns_audio_init+0xc8>)
    if (g_ns_audio_config->eAudioApiMode == NS_AUDIO_API_RINGBUFFER) {
   2dfba:	2901      	cmp	r1, #1
    g_ns_audio_config = cfg;
   2dfbc:	6034      	str	r4, [r6, #0]
    if (g_ns_audio_config->eAudioApiMode == NS_AUDIO_API_RINGBUFFER) {
   2dfbe:	d02b      	beq.n	2e018 <ns_audio_init+0x9c>
   2dfc0:	4620      	mov	r0, r4

        ns_ipc_ring_buffer_init(g_ns_audio_config->bufferHandle, setup);
        g_ns_audio_config->bufferHandle = g_ns_audio_config->bufferHandle;
    }

    if (g_ns_audio_config->eAudioSource == NS_AUDIO_SOURCE_AUDADC) {
   2dfc2:	7c03      	ldrb	r3, [r0, #16]
   2dfc4:	b9db      	cbnz	r3, 2dffe <ns_audio_init+0x82>
#ifdef AM_PART_APOLLO4L
        am_util_stdio_printf("Error - Trying to init non-existant AUDADC on Apollo4 Lite\n");
        return NS_STATUS_INIT_FAILED;
#else
        if (g_ns_audio_config->audadc_config == NULL) {
   2dfc6:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2dfc8:	2b00      	cmp	r3, #0
   2dfca:	d031      	beq.n	2e030 <ns_audio_init+0xb4>
            g_ns_audio_config->audadc_config = &ns_audadc_default;
        }

        if (audadc_init(cfg)) {
   2dfcc:	4620      	mov	r0, r4
   2dfce:	f000 fbb3 	bl	2e738 <audadc_init>
   2dfd2:	b938      	cbnz	r0, 2dfe4 <ns_audio_init+0x68>
            return NS_STATUS_INIT_FAILED;
        }

        // Trigger the AUDADC sampling for the first time manually.
        if (AM_HAL_STATUS_SUCCESS !=
            am_hal_audadc_sw_trigger(g_ns_audio_config->audioSystemHandle)) {
   2dfd4:	6833      	ldr	r3, [r6, #0]
   2dfd6:	6b98      	ldr	r0, [r3, #56]	; 0x38
   2dfd8:	f003 f94a 	bl	31270 <am_hal_audadc_sw_trigger>
        if (AM_HAL_STATUS_SUCCESS !=
   2dfdc:	b140      	cbz	r0, 2dff0 <ns_audio_init+0x74>
            am_util_stdio_printf("Error - triggering the AUDADC failed.\n");
   2dfde:	481a      	ldr	r0, [pc, #104]	; (2e048 <ns_audio_init+0xcc>)
   2dfe0:	f001 fa5e 	bl	2f4a0 <am_util_stdio_printf>
            return NS_STATUS_INIT_FAILED;
   2dfe4:	2504      	movs	r5, #4
   2dfe6:	e003      	b.n	2dff0 <ns_audio_init+0x74>
    if ((cfg->api->version.major != 1) && (cfg->eAudioSource == NS_AUDIO_SOURCE_AUDADC) &&
   2dfe8:	69a3      	ldr	r3, [r4, #24]
   2dfea:	2b00      	cmp	r3, #0
   2dfec:	d1df      	bne.n	2dfae <ns_audio_init+0x32>
        return NS_STATUS_INVALID_CONFIG;
   2dfee:	2503      	movs	r5, #3
        1, "DataLogger", g_rttRecorderBuffer, RTT_BUFFER_LENGTH, SEGGER_RTT_MODE_NO_BLOCK_SKIP);
    am_util_stdio_printf("RTT Control Block Address:  0x%08X\n", (uint32_t)&_SEGGER_RTT);
#endif

    return AM_HAL_STATUS_SUCCESS;
}
   2dff0:	4628      	mov	r0, r5
   2dff2:	b004      	add	sp, #16
   2dff4:	bd70      	pop	{r4, r5, r6, pc}
        return NS_STATUS_INVALID_HANDLE;
   2dff6:	2501      	movs	r5, #1
}
   2dff8:	4628      	mov	r0, r5
   2dffa:	b004      	add	sp, #16
   2dffc:	bd70      	pop	{r4, r5, r6, pc}
    } else if (g_ns_audio_config->eAudioSource == NS_AUDIO_SOURCE_PDM) {
   2dffe:	2b01      	cmp	r3, #1
   2e000:	d1f5      	bne.n	2dfee <ns_audio_init+0x72>
        if (g_ns_audio_config->pdm_config == NULL) {
   2e002:	6a83      	ldr	r3, [r0, #40]	; 0x28
   2e004:	b1bb      	cbz	r3, 2e036 <ns_audio_init+0xba>
        if (pdm_init(g_ns_audio_config)) {
   2e006:	f000 f8b7 	bl	2e178 <pdm_init>
   2e00a:	2800      	cmp	r0, #0
   2e00c:	d0f0      	beq.n	2dff0 <ns_audio_init+0x74>
   2e00e:	e7e9      	b.n	2dfe4 <ns_audio_init+0x68>
        return NS_STATUS_INVALID_VERSION;
   2e010:	2502      	movs	r5, #2
}
   2e012:	4628      	mov	r0, r5
   2e014:	b004      	add	sp, #16
   2e016:	bd70      	pop	{r4, r5, r6, pc}
        ns_ipc_ringbuff_setup_t setup = {
   2e018:	9303      	str	r3, [sp, #12]
   2e01a:	2300      	movs	r3, #0
   2e01c:	9301      	str	r3, [sp, #4]
   2e01e:	9202      	str	r2, [sp, #8]
        ns_ipc_ring_buffer_init(g_ns_audio_config->bufferHandle, setup);
   2e020:	ab04      	add	r3, sp, #16
   2e022:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   2e024:	e913 000e 	ldmdb	r3, {r1, r2, r3}
   2e028:	f00d fbca 	bl	3b7c0 <ns_ipc_ring_buffer_init>
    if (g_ns_audio_config->eAudioSource == NS_AUDIO_SOURCE_AUDADC) {
   2e02c:	6830      	ldr	r0, [r6, #0]
   2e02e:	e7c8      	b.n	2dfc2 <ns_audio_init+0x46>
            g_ns_audio_config->audadc_config = &ns_audadc_default;
   2e030:	4b06      	ldr	r3, [pc, #24]	; (2e04c <ns_audio_init+0xd0>)
   2e032:	6243      	str	r3, [r0, #36]	; 0x24
   2e034:	e7ca      	b.n	2dfcc <ns_audio_init+0x50>
            g_ns_audio_config->pdm_config = &ns_pdm_default;
   2e036:	4b06      	ldr	r3, [pc, #24]	; (2e050 <ns_audio_init+0xd4>)
   2e038:	6283      	str	r3, [r0, #40]	; 0x28
   2e03a:	e7e4      	b.n	2e006 <ns_audio_init+0x8a>
   2e03c:	000420e4 	.word	0x000420e4
   2e040:	000420f0 	.word	0x000420f0
   2e044:	100197dc 	.word	0x100197dc
   2e048:	000420b0 	.word	0x000420b0
   2e04c:	10004a84 	.word	0x10004a84
   2e050:	10004a80 	.word	0x10004a80

0002e054 <ns_audio_getPCM_v2>:
    } else {
        ns_audio_getPCM_v2(g_ns_audio_config, pcm);
    }
}

void ns_audio_getPCM_v2(ns_audio_config_t *config, void *pcm) {
   2e054:	b570      	push	{r4, r5, r6, lr}
#ifdef AM_PART_APOLLO4L
    // Apollo4 Lite only supports PDM, and there is nothing to do for PDM here
    return;
#else
    uint32_t ui32PcmSampleCnt = config->numSamples * config->numChannels;
   2e056:	8bc3      	ldrh	r3, [r0, #30]
   2e058:	7f02      	ldrb	r2, [r0, #28]

    if (config->eAudioSource == NS_AUDIO_SOURCE_AUDADC) {
   2e05a:	7c05      	ldrb	r5, [r0, #16]
void ns_audio_getPCM_v2(ns_audio_config_t *config, void *pcm) {
   2e05c:	b086      	sub	sp, #24
    uint32_t ui32PcmSampleCnt = config->numSamples * config->numChannels;
   2e05e:	fb02 f303 	mul.w	r3, r2, r3
   2e062:	9305      	str	r3, [sp, #20]
    if (config->eAudioSource == NS_AUDIO_SOURCE_AUDADC) {
   2e064:	b10d      	cbz	r5, 2e06a <ns_audio_getPCM_v2+0x16>
        //     pcm8[2 * i] = (config->sampleBuffer[i] & 0xFF00) >> 8U;
        //     pcm8[2 * i + 1] = (config->sampleBuffer[i] & 0xFF0000) >> 16U;
        // }
    }
#endif
}
   2e066:	b006      	add	sp, #24
   2e068:	bd70      	pop	{r4, r5, r6, pc}
        am_hal_audadc_samples_read(
   2e06a:	6c42      	ldr	r2, [r0, #68]	; 0x44
   2e06c:	6983      	ldr	r3, [r0, #24]
   2e06e:	e9cd 5202 	strd	r5, r2, [sp, #8]
   2e072:	e9cd 3500 	strd	r3, r5, [sp]
   2e076:	4604      	mov	r4, r0
   2e078:	460e      	mov	r6, r1
   2e07a:	2301      	movs	r3, #1
   2e07c:	6941      	ldr	r1, [r0, #20]
   2e07e:	6b80      	ldr	r0, [r0, #56]	; 0x38
   2e080:	aa05      	add	r2, sp, #20
   2e082:	f002 ffe7 	bl	31054 <am_hal_audadc_samples_read>
        for (int i = 0; i < ui32PcmSampleCnt; i++) {
   2e086:	9905      	ldr	r1, [sp, #20]
   2e088:	2900      	cmp	r1, #0
   2e08a:	d0ec      	beq.n	2e066 <ns_audio_getPCM_v2+0x12>
   2e08c:	7f22      	ldrb	r2, [r4, #28]
                pcm16[i] = config->workingBuffer[i].int16Sample;
   2e08e:	69a3      	ldr	r3, [r4, #24]
   2e090:	2a01      	cmp	r2, #1
   2e092:	d01c      	beq.n	2e0ce <ns_audio_getPCM_v2+0x7a>
   2e094:	eb03 0181 	add.w	r1, r3, r1, lsl #2
        uint32_t RightChCount = 0;
   2e098:	462a      	mov	r2, r5
   2e09a:	3302      	adds	r3, #2
   2e09c:	3102      	adds	r1, #2
        uint32_t LeftChCount = 0;
   2e09e:	462c      	mov	r4, r5
   2e0a0:	e00b      	b.n	2e0ba <ns_audio_getPCM_v2+0x66>
                    pcm32[RightChCount++] |= ((config->workingBuffer[i].int16Sample) << 16);
   2e0a2:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
   2e0a6:	f933 5c02 	ldrsh.w	r5, [r3, #-2]
   2e0aa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   2e0ae:	f846 0022 	str.w	r0, [r6, r2, lsl #2]
   2e0b2:	3201      	adds	r2, #1
        for (int i = 0; i < ui32PcmSampleCnt; i++) {
   2e0b4:	3304      	adds	r3, #4
   2e0b6:	428b      	cmp	r3, r1
   2e0b8:	d0d5      	beq.n	2e066 <ns_audio_getPCM_v2+0x12>
                if (config->workingBuffer[i].ui16AudChannel == 0) {
   2e0ba:	8818      	ldrh	r0, [r3, #0]
   2e0bc:	2800      	cmp	r0, #0
   2e0be:	d1f0      	bne.n	2e0a2 <ns_audio_getPCM_v2+0x4e>
                    pcm32[LeftChCount++] = (config->workingBuffer[i].int16Sample & 0x0000FFFF);
   2e0c0:	f933 0c02 	ldrsh.w	r0, [r3, #-2]
   2e0c4:	b280      	uxth	r0, r0
   2e0c6:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
   2e0ca:	3401      	adds	r4, #1
   2e0cc:	e7f2      	b.n	2e0b4 <ns_audio_getPCM_v2+0x60>
   2e0ce:	3e02      	subs	r6, #2
        for (int i = 0; i < ui32PcmSampleCnt; i++) {
   2e0d0:	462a      	mov	r2, r5
                pcm16[i] = config->workingBuffer[i].int16Sample;
   2e0d2:	f833 0022 	ldrh.w	r0, [r3, r2, lsl #2]
   2e0d6:	f826 0f02 	strh.w	r0, [r6, #2]!
        for (int i = 0; i < ui32PcmSampleCnt; i++) {
   2e0da:	3201      	adds	r2, #1
   2e0dc:	4291      	cmp	r1, r2
   2e0de:	d1f8      	bne.n	2e0d2 <ns_audio_getPCM_v2+0x7e>
   2e0e0:	e7c1      	b.n	2e066 <ns_audio_getPCM_v2+0x12>
   2e0e2:	bf00      	nop

0002e0e4 <am_pdm_isr_common.part.0>:
    pdm_trigger_dma(config);
    return NS_STATUS_SUCCESS;
}

// PDM Interrupt Service Routine (ISR)
void am_pdm_isr_common(uint8_t pdmNumber) {
   2e0e4:	b530      	push	{r4, r5, lr}

    if (pdmNumber != g_ns_audio_config->pdm_config->mic) {
        return;
    }
    // Read the interrupt status.
    am_hal_pdm_interrupt_status_get(pvPDMHandle, &ui32Status, true);
   2e0e6:	4c22      	ldr	r4, [pc, #136]	; (2e170 <am_pdm_isr_common.part.0+0x8c>)
void am_pdm_isr_common(uint8_t pdmNumber) {
   2e0e8:	b083      	sub	sp, #12
    am_hal_pdm_interrupt_status_get(pvPDMHandle, &ui32Status, true);
   2e0ea:	2201      	movs	r2, #1
   2e0ec:	a901      	add	r1, sp, #4
   2e0ee:	6820      	ldr	r0, [r4, #0]
   2e0f0:	f003 fed6 	bl	31ea0 <am_hal_pdm_interrupt_status_get>
    am_hal_pdm_interrupt_clear(pvPDMHandle, ui32Status);
   2e0f4:	9901      	ldr	r1, [sp, #4]
   2e0f6:	6820      	ldr	r0, [r4, #0]
   2e0f8:	f003 febc 	bl	31e74 <am_hal_pdm_interrupt_clear>

    if (ui32Status & AM_HAL_PDM_INT_DCMP) {
   2e0fc:	9901      	ldr	r1, [sp, #4]
   2e0fe:	070b      	lsls	r3, r1, #28
   2e100:	d409      	bmi.n	2e116 <am_pdm_isr_common.part.0+0x32>
        //             memset(g_sVosBrd.pui32PcmBuf, 0, (g_ui32WosDiscardTimeUS / 1000) *
        //             (AM_SPP_SAMPLE_FREQ / 1000) * PCM_SAMPLE_BYTES * USE_MIC_NUM);
        //         }
        // #endif // configUSE_AAD

    } else if (ui32Status & (AM_HAL_PDM_INT_UNDFL | AM_HAL_PDM_INT_OVF)) {
   2e102:	f011 0f06 	tst.w	r1, #6
   2e106:	d101      	bne.n	2e10c <am_pdm_isr_common.part.0+0x28>
    }

#if configUSE_SYSVIEWER
    traceISR_EXIT(); // Should be comment out when it is Apollo 3
#endif               // configUSE_SYSVIEWER
}
   2e108:	b003      	add	sp, #12
   2e10a:	bd30      	pop	{r4, r5, pc}
        am_hal_pdm_fifo_flush(pvPDMHandle);
   2e10c:	6820      	ldr	r0, [r4, #0]
   2e10e:	f003 fe5b 	bl	31dc8 <am_hal_pdm_fifo_flush>
}
   2e112:	b003      	add	sp, #12
   2e114:	bd30      	pop	{r4, r5, pc}
        am_hal_pdm_interrupt_service(pvPDMHandle, ui32Status, &(g_ns_audio_config->sTransfer));
   2e116:	4d17      	ldr	r5, [pc, #92]	; (2e174 <am_pdm_isr_common.part.0+0x90>)
   2e118:	6820      	ldr	r0, [r4, #0]
   2e11a:	682a      	ldr	r2, [r5, #0]
   2e11c:	322c      	adds	r2, #44	; 0x2c
   2e11e:	f003 fe69 	bl	31df4 <am_hal_pdm_interrupt_service>
        uint32_t *ui32PDMDatabuffer = (uint32_t *)am_hal_pdm_dma_get_buffer(pvPDMHandle);
   2e122:	6820      	ldr	r0, [r4, #0]
   2e124:	f003 fee6 	bl	31ef4 <am_hal_pdm_dma_get_buffer>
   2e128:	4604      	mov	r4, r0
        g_ns_audio_config->callback(g_ns_audio_config, 0);
   2e12a:	6828      	ldr	r0, [r5, #0]
   2e12c:	2100      	movs	r1, #0
   2e12e:	6883      	ldr	r3, [r0, #8]
   2e130:	4798      	blx	r3
        uint8_t *temp1 = (uint8_t *)g_ns_audio_config->audioBuffer;
   2e132:	682a      	ldr	r2, [r5, #0]
        for (uint32_t i = 0; i < g_ns_audio_config->numSamples * g_ns_audio_config->numChannels;
   2e134:	7f13      	ldrb	r3, [r2, #28]
   2e136:	8bd1      	ldrh	r1, [r2, #30]
        uint8_t *temp1 = (uint8_t *)g_ns_audio_config->audioBuffer;
   2e138:	68d0      	ldr	r0, [r2, #12]
        for (uint32_t i = 0; i < g_ns_audio_config->numSamples * g_ns_audio_config->numChannels;
   2e13a:	fb01 f303 	mul.w	r3, r1, r3
   2e13e:	2b00      	cmp	r3, #0
   2e140:	d0e2      	beq.n	2e108 <am_pdm_isr_common.part.0+0x24>
   2e142:	2300      	movs	r3, #0
   2e144:	f100 0c01 	add.w	ip, r0, #1
            temp1[2 * i] = (ui32PDMDatabuffer[i] & 0xFF00) >> 8U;
   2e148:	6822      	ldr	r2, [r4, #0]
   2e14a:	0a12      	lsrs	r2, r2, #8
   2e14c:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]
            temp1[2 * i + 1] = (ui32PDMDatabuffer[i] & 0xFF0000) >> 16U;
   2e150:	f854 2b04 	ldr.w	r2, [r4], #4
   2e154:	0c12      	lsrs	r2, r2, #16
   2e156:	f80c 2013 	strb.w	r2, [ip, r3, lsl #1]
        for (uint32_t i = 0; i < g_ns_audio_config->numSamples * g_ns_audio_config->numChannels;
   2e15a:	6829      	ldr	r1, [r5, #0]
   2e15c:	8bca      	ldrh	r2, [r1, #30]
   2e15e:	7f09      	ldrb	r1, [r1, #28]
             i++) {
   2e160:	3301      	adds	r3, #1
        for (uint32_t i = 0; i < g_ns_audio_config->numSamples * g_ns_audio_config->numChannels;
   2e162:	fb01 f202 	mul.w	r2, r1, r2
   2e166:	4293      	cmp	r3, r2
   2e168:	d3ee      	bcc.n	2e148 <am_pdm_isr_common.part.0+0x64>
}
   2e16a:	b003      	add	sp, #12
   2e16c:	bd30      	pop	{r4, r5, pc}
   2e16e:	bf00      	nop
   2e170:	100197e0 	.word	0x100197e0
   2e174:	100197dc 	.word	0x100197dc

0002e178 <pdm_init>:
uint32_t pdm_init(ns_audio_config_t *config) {
   2e178:	b5f0      	push	{r4, r5, r6, r7, lr}
    am_hal_pdm_config_t pdmConfig = {
   2e17a:	2300      	movs	r3, #0
uint32_t pdm_init(ns_audio_config_t *config) {
   2e17c:	b089      	sub	sp, #36	; 0x24
    am_hal_pdm_config_t pdmConfig = {
   2e17e:	e9cd 3302 	strd	r3, r3, [sp, #8]
   2e182:	f640 0208 	movw	r2, #2056	; 0x808
   2e186:	9301      	str	r3, [sp, #4]
   2e188:	9306      	str	r3, [sp, #24]
   2e18a:	9304      	str	r3, [sp, #16]
   2e18c:	9307      	str	r3, [sp, #28]
   2e18e:	f8ad 2006 	strh.w	r2, [sp, #6]
   2e192:	2301      	movs	r3, #1
    ns_pdm_cfg_t *cfg = config->pdm_config;
   2e194:	6a86      	ldr	r6, [r0, #40]	; 0x28
    am_hal_pdm_config_t pdmConfig = {
   2e196:	f88d 3019 	strb.w	r3, [sp, #25]
   2e19a:	2203      	movs	r2, #3
   2e19c:	9205      	str	r2, [sp, #20]
    switch (cfg->clock) {
   2e19e:	7833      	ldrb	r3, [r6, #0]
uint32_t pdm_init(ns_audio_config_t *config) {
   2e1a0:	4604      	mov	r4, r0
    switch (cfg->clock) {
   2e1a2:	2b04      	cmp	r3, #4
   2e1a4:	d82d      	bhi.n	2e202 <pdm_init+0x8a>
   2e1a6:	e8df f003 	tbb	[pc, r3]
   2e1aa:	2603      	.short	0x2603
   2e1ac:	0316      	.short	0x0316
   2e1ae:	09          	.byte	0x09
   2e1af:	00          	.byte	0x00
        ns_lp_printf("Clock not supported by PDM\n");
   2e1b0:	4869      	ldr	r0, [pc, #420]	; (2e358 <pdm_init+0x1e0>)
   2e1b2:	f7ff fbc9 	bl	2d948 <ns_lp_printf>
        return NS_STATUS_INVALID_CONFIG;
   2e1b6:	2003      	movs	r0, #3
}
   2e1b8:	b009      	add	sp, #36	; 0x24
   2e1ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (cfg->clock_freq == NS_AUDIO_PDM_CLK_750KHZ) {
   2e1bc:	7873      	ldrb	r3, [r6, #1]
        pdmConfig.eClkDivider = AM_HAL_PDM_MCLKDIV_1;
   2e1be:	2201      	movs	r2, #1
   2e1c0:	f88d 2004 	strb.w	r2, [sp, #4]
        switch (cfg->clock_freq) {
   2e1c4:	b18b      	cbz	r3, 2e1ea <pdm_init+0x72>
   2e1c6:	2b01      	cmp	r3, #1
   2e1c8:	d120      	bne.n	2e20c <pdm_init+0x94>
            pdmConfig.ePDMAClkOutDivder = AM_HAL_PDM_PDMA_CLKO_DIV7;
   2e1ca:	2207      	movs	r2, #7
            pdmConfig.ui32DecimationRate = 48;
   2e1cc:	2330      	movs	r3, #48	; 0x30
            pdmConfig.ePDMAClkOutDivder = AM_HAL_PDM_PDMA_CLKO_DIV7;
   2e1ce:	f88d 2005 	strb.w	r2, [sp, #5]
            pdmConfig.ui32DecimationRate = 48;
   2e1d2:	9303      	str	r3, [sp, #12]
            break;
   2e1d4:	e01a      	b.n	2e20c <pdm_init+0x94>
        pdmConfig.ePDMClkSpeed = AM_HAL_PDM_CLK_HFRC_24MHZ;
   2e1d6:	2302      	movs	r3, #2
   2e1d8:	f88d 3018 	strb.w	r3, [sp, #24]
        if (cfg->clock_freq == NS_AUDIO_PDM_CLK_750KHZ) {
   2e1dc:	7873      	ldrb	r3, [r6, #1]
        pdmConfig.eClkDivider = AM_HAL_PDM_MCLKDIV_1;
   2e1de:	2201      	movs	r2, #1
   2e1e0:	f88d 2004 	strb.w	r2, [sp, #4]
        if (cfg->clock_freq == NS_AUDIO_PDM_CLK_750KHZ) {
   2e1e4:	2b00      	cmp	r3, #0
   2e1e6:	f040 8097 	bne.w	2e318 <pdm_init+0x1a0>
            pdmConfig.ePDMAClkOutDivder = AM_HAL_PDM_PDMA_CLKO_DIV15;
   2e1ea:	220f      	movs	r2, #15
            pdmConfig.ui32DecimationRate = 24;
   2e1ec:	2318      	movs	r3, #24
            pdmConfig.ePDMAClkOutDivder = AM_HAL_PDM_PDMA_CLKO_DIV15;
   2e1ee:	f88d 2005 	strb.w	r2, [sp, #5]
            pdmConfig.ui32DecimationRate = 24;
   2e1f2:	9303      	str	r3, [sp, #12]
            break;
   2e1f4:	e00a      	b.n	2e20c <pdm_init+0x94>
        pdmConfig.ePDMClkSpeed = AM_HAL_PDM_CLK_HFXTAL;
   2e1f6:	2201      	movs	r2, #1
        pdmConfig.eClkDivider = AM_HAL_PDM_MCLKDIV_3;
   2e1f8:	2303      	movs	r3, #3
        pdmConfig.ePDMClkSpeed = AM_HAL_PDM_CLK_HFXTAL;
   2e1fa:	f88d 2018 	strb.w	r2, [sp, #24]
        pdmConfig.eClkDivider = AM_HAL_PDM_MCLKDIV_3;
   2e1fe:	f88d 3004 	strb.w	r3, [sp, #4]
        pdmConfig.ePDMAClkOutDivder = AM_HAL_PDM_PDMA_CLKO_DIV14;
   2e202:	220e      	movs	r2, #14
        pdmConfig.ui32DecimationRate = 24;
   2e204:	2318      	movs	r3, #24
        pdmConfig.ePDMAClkOutDivder = AM_HAL_PDM_PDMA_CLKO_DIV14;
   2e206:	f88d 2005 	strb.w	r2, [sp, #5]
        pdmConfig.ui32DecimationRate = 24;
   2e20a:	9303      	str	r3, [sp, #12]
    if (config->numChannels == 2) {
   2e20c:	7f23      	ldrb	r3, [r4, #28]
    am_hal_pdm_initialize(cfg->mic, &pvPDMHandle);
   2e20e:	4d53      	ldr	r5, [pc, #332]	; (2e35c <pdm_init+0x1e4>)
        pdmConfig.ePCMChannels = AM_HAL_PDM_CHANNEL_LEFT;
   2e210:	2b02      	cmp	r3, #2
   2e212:	bf0c      	ite	eq
   2e214:	2303      	moveq	r3, #3
   2e216:	2301      	movne	r3, #1
   2e218:	f88d 301a 	strb.w	r3, [sp, #26]
    am_hal_pdm_initialize(cfg->mic, &pvPDMHandle);
   2e21c:	4629      	mov	r1, r5
   2e21e:	78b0      	ldrb	r0, [r6, #2]
   2e220:	f003 fc7c 	bl	31b1c <am_hal_pdm_initialize>
    am_hal_pdm_power_control(pvPDMHandle, AM_HAL_PDM_POWER_ON, false);
   2e224:	2200      	movs	r2, #0
   2e226:	6828      	ldr	r0, [r5, #0]
   2e228:	4611      	mov	r1, r2
   2e22a:	f003 fca1 	bl	31b70 <am_hal_pdm_power_control>
    if (cfg->clock == NS_CLKSEL_HFXTAL) {
   2e22e:	7837      	ldrb	r7, [r6, #0]
   2e230:	2f01      	cmp	r7, #1
   2e232:	d077      	beq.n	2e324 <pdm_init+0x1ac>
    } else if (cfg->clock == NS_CLKSEL_HFRC2_ADJ) {
   2e234:	2f04      	cmp	r7, #4
   2e236:	d07a      	beq.n	2e32e <pdm_init+0x1b6>
    am_hal_pdm_configure(pvPDMHandle, &pdmConfig);
   2e238:	6828      	ldr	r0, [r5, #0]
   2e23a:	a901      	add	r1, sp, #4
   2e23c:	f003 fcdc 	bl	31bf8 <am_hal_pdm_configure>
    switch (cfg->mic) {
   2e240:	78b3      	ldrb	r3, [r6, #2]
   2e242:	2b01      	cmp	r3, #1
   2e244:	d05b      	beq.n	2e2fe <pdm_init+0x186>
   2e246:	2b02      	cmp	r3, #2
   2e248:	d04b      	beq.n	2e2e2 <pdm_init+0x16a>
   2e24a:	2b00      	cmp	r3, #0
   2e24c:	d03b      	beq.n	2e2c6 <pdm_init+0x14e>
    am_hal_pdm_fifo_flush(pvPDMHandle);
   2e24e:	6828      	ldr	r0, [r5, #0]
   2e250:	f003 fdba 	bl	31dc8 <am_hal_pdm_fifo_flush>
    am_hal_pdm_interrupt_enable(
   2e254:	6828      	ldr	r0, [r5, #0]
   2e256:	211e      	movs	r1, #30
   2e258:	f003 fdf4 	bl	31e44 <am_hal_pdm_interrupt_enable>
    NVIC_SetPriority(g_ePdmInterrupts[cfg->mic], 7);
   2e25c:	4a40      	ldr	r2, [pc, #256]	; (2e360 <pdm_init+0x1e8>)
   2e25e:	78b3      	ldrb	r3, [r6, #2]
   2e260:	56d3      	ldrsb	r3, [r2, r3]
  if ((int32_t)(IRQn) >= 0)
   2e262:	2b00      	cmp	r3, #0
   2e264:	db28      	blt.n	2e2b8 <pdm_init+0x140>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2e266:	493f      	ldr	r1, [pc, #252]	; (2e364 <pdm_init+0x1ec>)
   2e268:	18ca      	adds	r2, r1, r3
   2e26a:	20e0      	movs	r0, #224	; 0xe0
   2e26c:	f882 0300 	strb.w	r0, [r2, #768]	; 0x300
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2e270:	2201      	movs	r2, #1
   2e272:	0958      	lsrs	r0, r3, #5
   2e274:	f003 031f 	and.w	r3, r3, #31
   2e278:	fa02 f303 	lsl.w	r3, r2, r3
   2e27c:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
    am_hal_pdm_enable(pvPDMHandle);
   2e280:	6828      	ldr	r0, [r5, #0]
   2e282:	f003 fd27 	bl	31cd4 <am_hal_pdm_enable>
        (config->numSamples * config->numChannels * config->pdm_config->numBytes * 2);
   2e286:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   2e288:	7f21      	ldrb	r1, [r4, #28]
   2e28a:	8be3      	ldrh	r3, [r4, #30]
   2e28c:	78d2      	ldrb	r2, [r2, #3]
    am_hal_pdm_dma_start(pvPDMHandle, &(config->sTransfer));
   2e28e:	6828      	ldr	r0, [r5, #0]
        (config->numSamples * config->numChannels * config->pdm_config->numBytes * 2);
   2e290:	fb01 f303 	mul.w	r3, r1, r3
   2e294:	fb02 f303 	mul.w	r3, r2, r3
    config->sTransfer.ui32TargetAddr = (uint32_t)(((uint32_t)config->sampleBuffer + 3) & ~0xF);
   2e298:	6962      	ldr	r2, [r4, #20]
   2e29a:	3203      	adds	r2, #3
        (config->numSamples * config->numChannels * config->pdm_config->numBytes * 2);
   2e29c:	005b      	lsls	r3, r3, #1
    config->sTransfer.ui32TargetAddr = (uint32_t)(((uint32_t)config->sampleBuffer + 3) & ~0xF);
   2e29e:	f022 020f 	bic.w	r2, r2, #15
        config->sTransfer.ui32TargetAddr + config->sTransfer.ui32TotalCount;
   2e2a2:	1899      	adds	r1, r3, r2
    config->sTransfer.ui32TargetAddrReverse =
   2e2a4:	e9c4 210b 	strd	r2, r1, [r4, #44]	; 0x2c
    config->sTransfer.ui32TotalCount =
   2e2a8:	6363      	str	r3, [r4, #52]	; 0x34
    am_hal_pdm_dma_start(pvPDMHandle, &(config->sTransfer));
   2e2aa:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   2e2ae:	f003 fd39 	bl	31d24 <am_hal_pdm_dma_start>
    return NS_STATUS_SUCCESS;
   2e2b2:	2000      	movs	r0, #0
}
   2e2b4:	b009      	add	sp, #36	; 0x24
   2e2b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2e2b8:	4a2b      	ldr	r2, [pc, #172]	; (2e368 <pdm_init+0x1f0>)
   2e2ba:	f003 030f 	and.w	r3, r3, #15
   2e2be:	441a      	add	r2, r3
   2e2c0:	23e0      	movs	r3, #224	; 0xe0
   2e2c2:	7613      	strb	r3, [r2, #24]
  if ((int32_t)(IRQn) >= 0)
   2e2c4:	e7dc      	b.n	2e280 <pdm_init+0x108>
        sGpioConfig = g_AM_BSP_GPIO_PDM0_CLK;
   2e2c6:	4a29      	ldr	r2, [pc, #164]	; (2e36c <pdm_init+0x1f4>)
   2e2c8:	6811      	ldr	r1, [r2, #0]
        sGpioConfig.GP.cfg_b.eDriveStrength = AM_HAL_GPIO_PIN_DRIVESTRENGTH_0P5X;
   2e2ca:	2301      	movs	r3, #1
   2e2cc:	f363 218b 	bfi	r1, r3, #10, #2
        am_hal_gpio_pinconfig(AM_BSP_GPIO_PDM0_CLK, sGpioConfig);
   2e2d0:	2032      	movs	r0, #50	; 0x32
   2e2d2:	f003 fa6b 	bl	317ac <am_hal_gpio_pinconfig>
        am_hal_gpio_pinconfig(AM_BSP_GPIO_PDM0_DATA, g_AM_BSP_GPIO_PDM0_DATA);
   2e2d6:	4b26      	ldr	r3, [pc, #152]	; (2e370 <pdm_init+0x1f8>)
   2e2d8:	2033      	movs	r0, #51	; 0x33
   2e2da:	6819      	ldr	r1, [r3, #0]
   2e2dc:	f003 fa66 	bl	317ac <am_hal_gpio_pinconfig>
        break;
   2e2e0:	e7b5      	b.n	2e24e <pdm_init+0xd6>
        sGpioConfig = g_AM_BSP_GPIO_PDM2_CLK;
   2e2e2:	4a24      	ldr	r2, [pc, #144]	; (2e374 <pdm_init+0x1fc>)
   2e2e4:	6811      	ldr	r1, [r2, #0]
        sGpioConfig.GP.cfg_b.eDriveStrength = AM_HAL_GPIO_PIN_DRIVESTRENGTH_0P5X;
   2e2e6:	2301      	movs	r3, #1
   2e2e8:	f363 218b 	bfi	r1, r3, #10, #2
        am_hal_gpio_pinconfig(AM_BSP_GPIO_PDM2_CLK, sGpioConfig);
   2e2ec:	2036      	movs	r0, #54	; 0x36
   2e2ee:	f003 fa5d 	bl	317ac <am_hal_gpio_pinconfig>
        am_hal_gpio_pinconfig(AM_BSP_GPIO_PDM2_DATA, g_AM_BSP_GPIO_PDM2_DATA);
   2e2f2:	4b21      	ldr	r3, [pc, #132]	; (2e378 <pdm_init+0x200>)
   2e2f4:	2037      	movs	r0, #55	; 0x37
   2e2f6:	6819      	ldr	r1, [r3, #0]
   2e2f8:	f003 fa58 	bl	317ac <am_hal_gpio_pinconfig>
        break;
   2e2fc:	e7a7      	b.n	2e24e <pdm_init+0xd6>
        sGpioConfig = g_AM_BSP_GPIO_PDM1_CLK;
   2e2fe:	4a1f      	ldr	r2, [pc, #124]	; (2e37c <pdm_init+0x204>)
   2e300:	6811      	ldr	r1, [r2, #0]
        am_hal_gpio_pinconfig(AM_BSP_GPIO_PDM1_CLK, sGpioConfig);
   2e302:	2034      	movs	r0, #52	; 0x34
        sGpioConfig.GP.cfg_b.eDriveStrength = AM_HAL_GPIO_PIN_DRIVESTRENGTH_0P5X;
   2e304:	f363 218b 	bfi	r1, r3, #10, #2
        am_hal_gpio_pinconfig(AM_BSP_GPIO_PDM1_CLK, sGpioConfig);
   2e308:	f003 fa50 	bl	317ac <am_hal_gpio_pinconfig>
        am_hal_gpio_pinconfig(AM_BSP_GPIO_PDM1_DATA, g_AM_BSP_GPIO_PDM1_DATA);
   2e30c:	4b1c      	ldr	r3, [pc, #112]	; (2e380 <pdm_init+0x208>)
   2e30e:	2035      	movs	r0, #53	; 0x35
   2e310:	6819      	ldr	r1, [r3, #0]
   2e312:	f003 fa4b 	bl	317ac <am_hal_gpio_pinconfig>
        break;
   2e316:	e79a      	b.n	2e24e <pdm_init+0xd6>
            pdmConfig.ePDMAClkOutDivder = AM_HAL_PDM_PDMA_CLKO_DIV7;
   2e318:	2207      	movs	r2, #7
   2e31a:	f88d 2005 	strb.w	r2, [sp, #5]
            pdmConfig.ui32DecimationRate = 48;
   2e31e:	2230      	movs	r2, #48	; 0x30
   2e320:	9203      	str	r2, [sp, #12]
        switch (cfg->clock_freq) {
   2e322:	e750      	b.n	2e1c6 <pdm_init+0x4e>
        am_hal_mcuctrl_control(AM_HAL_MCUCTRL_CONTROL_EXTCLK32M_KICK_START, false);
   2e324:	2100      	movs	r1, #0
   2e326:	2002      	movs	r0, #2
   2e328:	f001 fdfe 	bl	2ff28 <am_hal_mcuctrl_control>
   2e32c:	e784      	b.n	2e238 <pdm_init+0xc0>
        am_hal_mcuctrl_control(AM_HAL_MCUCTRL_CONTROL_EXTCLK32M_KICK_START, false);
   2e32e:	2100      	movs	r1, #0
   2e330:	2002      	movs	r0, #2
   2e332:	f001 fdf9 	bl	2ff28 <am_hal_mcuctrl_control>
        am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_HFRC2_START, false);
   2e336:	2100      	movs	r1, #0
   2e338:	2007      	movs	r0, #7
   2e33a:	f001 fbd5 	bl	2fae8 <am_hal_clkgen_control>
        am_util_delay_us(200); // wait for FLL to lock
   2e33e:	20c8      	movs	r0, #200	; 0xc8
   2e340:	f000 fb4c 	bl	2e9dc <am_util_delay_us>
        am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_HF2ADJ_ENABLE, false);
   2e344:	4638      	mov	r0, r7
   2e346:	2100      	movs	r1, #0
   2e348:	f001 fbce 	bl	2fae8 <am_hal_clkgen_control>
        am_util_delay_us(500); // wait for adj to apply
   2e34c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   2e350:	f000 fb44 	bl	2e9dc <am_util_delay_us>
   2e354:	e770      	b.n	2e238 <pdm_init+0xc0>
   2e356:	bf00      	nop
   2e358:	000420fc 	.word	0x000420fc
   2e35c:	100197e0 	.word	0x100197e0
   2e360:	00042118 	.word	0x00042118
   2e364:	e000e100 	.word	0xe000e100
   2e368:	e000ecfc 	.word	0xe000ecfc
   2e36c:	10004ad8 	.word	0x10004ad8
   2e370:	10004adc 	.word	0x10004adc
   2e374:	10004ae8 	.word	0x10004ae8
   2e378:	10004aec 	.word	0x10004aec
   2e37c:	10004ae0 	.word	0x10004ae0
   2e380:	10004ae4 	.word	0x10004ae4

0002e384 <am_pdm0_isr>:
    if (pdmNumber != g_ns_audio_config->pdm_config->mic) {
   2e384:	4b03      	ldr	r3, [pc, #12]	; (2e394 <am_pdm0_isr+0x10>)
   2e386:	681b      	ldr	r3, [r3, #0]
   2e388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2e38a:	789b      	ldrb	r3, [r3, #2]
   2e38c:	b103      	cbz	r3, 2e390 <am_pdm0_isr+0xc>

void am_pdm0_isr(void) { am_pdm_isr_common(0); }
   2e38e:	4770      	bx	lr
   2e390:	f7ff bea8 	b.w	2e0e4 <am_pdm_isr_common.part.0>
   2e394:	100197dc 	.word	0x100197dc

0002e398 <am_pdm1_isr>:
    if (pdmNumber != g_ns_audio_config->pdm_config->mic) {
   2e398:	4b04      	ldr	r3, [pc, #16]	; (2e3ac <am_pdm1_isr+0x14>)
   2e39a:	681b      	ldr	r3, [r3, #0]
   2e39c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2e39e:	789b      	ldrb	r3, [r3, #2]
   2e3a0:	2b01      	cmp	r3, #1
   2e3a2:	d000      	beq.n	2e3a6 <am_pdm1_isr+0xe>
void am_pdm1_isr(void) { am_pdm_isr_common(1); }
   2e3a4:	4770      	bx	lr
   2e3a6:	f7ff be9d 	b.w	2e0e4 <am_pdm_isr_common.part.0>
   2e3aa:	bf00      	nop
   2e3ac:	100197dc 	.word	0x100197dc

0002e3b0 <am_pdm2_isr>:
    if (pdmNumber != g_ns_audio_config->pdm_config->mic) {
   2e3b0:	4b04      	ldr	r3, [pc, #16]	; (2e3c4 <am_pdm2_isr+0x14>)
   2e3b2:	681b      	ldr	r3, [r3, #0]
   2e3b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2e3b6:	789b      	ldrb	r3, [r3, #2]
   2e3b8:	2b02      	cmp	r3, #2
   2e3ba:	d000      	beq.n	2e3be <am_pdm2_isr+0xe>
void am_pdm2_isr(void) { am_pdm_isr_common(2); }
   2e3bc:	4770      	bx	lr
   2e3be:	f7ff be91 	b.w	2e0e4 <am_pdm_isr_common.part.0>
   2e3c2:	bf00      	nop
   2e3c4:	100197dc 	.word	0x100197dc

0002e3c8 <audadc_slot_config>:
//*****************************************************************************
//
// Configure the AUDADC SLOT.
//
//*****************************************************************************
uint32_t audadc_slot_config(ns_audio_config_t *cfg) {
   2e3c8:	b570      	push	{r4, r5, r6, lr}
   2e3ca:	b084      	sub	sp, #16
    am_hal_audadc_slot_config_t AUDADCSlotConfig;

    // Set up an AUDADC slot
    AUDADCSlotConfig.eMeasToAvg = AM_HAL_AUDADC_SLOT_AVG_1;
   2e3cc:	2100      	movs	r1, #0
    AUDADCSlotConfig.ePrecisionMode = AM_HAL_AUDADC_SLOT_12BIT;
    if (cfg->audadc_config->clock == NS_CLKSEL_XTHS) {
   2e3ce:	6a43      	ldr	r3, [r0, #36]	; 0x24
    AUDADCSlotConfig.eMeasToAvg = AM_HAL_AUDADC_SLOT_AVG_1;
   2e3d0:	f88d 1004 	strb.w	r1, [sp, #4]
    AUDADCSlotConfig.ePrecisionMode = AM_HAL_AUDADC_SLOT_12BIT;
   2e3d4:	f88d 100c 	strb.w	r1, [sp, #12]
    if (cfg->audadc_config->clock == NS_CLKSEL_XTHS) {
   2e3d8:	781b      	ldrb	r3, [r3, #0]
    AUDADCSlotConfig.eChannel = AM_HAL_AUDADC_SLOT_CHSEL_SE0;
    AUDADCSlotConfig.bWindowCompare = false;
    AUDADCSlotConfig.bEnabled = true;

    if (AM_HAL_STATUS_SUCCESS !=
        am_hal_audadc_configure_slot(g_AUDADCHandle, 0, &AUDADCSlotConfig)) {
   2e3da:	4e23      	ldr	r6, [pc, #140]	; (2e468 <audadc_slot_config+0xa0>)
    AUDADCSlotConfig.eChannel = AM_HAL_AUDADC_SLOT_CHSEL_SE0;
   2e3dc:	f88d 100d 	strb.w	r1, [sp, #13]
        AUDADCSlotConfig.ui32TrkCyc = 34; // new example has '34'
   2e3e0:	428b      	cmp	r3, r1
   2e3e2:	bf0c      	ite	eq
   2e3e4:	2318      	moveq	r3, #24
   2e3e6:	2322      	movne	r3, #34	; 0x22
uint32_t audadc_slot_config(ns_audio_config_t *cfg) {
   2e3e8:	4604      	mov	r4, r0
   2e3ea:	9302      	str	r3, [sp, #8]
        am_hal_audadc_configure_slot(g_AUDADCHandle, 0, &AUDADCSlotConfig)) {
   2e3ec:	6830      	ldr	r0, [r6, #0]
    AUDADCSlotConfig.bWindowCompare = false;
   2e3ee:	f44f 7380 	mov.w	r3, #256	; 0x100
        am_hal_audadc_configure_slot(g_AUDADCHandle, 0, &AUDADCSlotConfig)) {
   2e3f2:	aa01      	add	r2, sp, #4
    AUDADCSlotConfig.bWindowCompare = false;
   2e3f4:	f8ad 300e 	strh.w	r3, [sp, #14]
        am_hal_audadc_configure_slot(g_AUDADCHandle, 0, &AUDADCSlotConfig)) {
   2e3f8:	f002 fd12 	bl	30e20 <am_hal_audadc_configure_slot>
    if (AM_HAL_STATUS_SUCCESS !=
   2e3fc:	b970      	cbnz	r0, 2e41c <audadc_slot_config+0x54>
        am_util_stdio_printf("Error - configuring AUDADC Slot 0 failed.\n");
        return NS_STATUS_INIT_FAILED;
    }

    AUDADCSlotConfig.eChannel = AM_HAL_AUDADC_SLOT_CHSEL_SE1;
   2e3fe:	2101      	movs	r1, #1
    if (AM_HAL_STATUS_SUCCESS !=
        am_hal_audadc_configure_slot(g_AUDADCHandle, 1, &AUDADCSlotConfig)) {
   2e400:	6830      	ldr	r0, [r6, #0]
    AUDADCSlotConfig.eChannel = AM_HAL_AUDADC_SLOT_CHSEL_SE1;
   2e402:	f88d 100d 	strb.w	r1, [sp, #13]
        am_hal_audadc_configure_slot(g_AUDADCHandle, 1, &AUDADCSlotConfig)) {
   2e406:	aa01      	add	r2, sp, #4
   2e408:	f002 fd0a 	bl	30e20 <am_hal_audadc_configure_slot>
    if (AM_HAL_STATUS_SUCCESS !=
   2e40c:	4605      	mov	r5, r0
   2e40e:	bb08      	cbnz	r0, 2e454 <audadc_slot_config+0x8c>
        am_util_stdio_printf("Error - configuring AUDADC Slot 1 failed.\n");
        return NS_STATUS_INIT_FAILED;
    }

    if (cfg->numChannels == 2) {
   2e410:	7f21      	ldrb	r1, [r4, #28]
   2e412:	2902      	cmp	r1, #2
   2e414:	d009      	beq.n	2e42a <audadc_slot_config+0x62>
            am_util_stdio_printf("Error - configuring AUDADC Slot 3 failed.\n");
            return NS_STATUS_INIT_FAILED;
        }
    }
    return NS_STATUS_SUCCESS;
}
   2e416:	4628      	mov	r0, r5
   2e418:	b004      	add	sp, #16
   2e41a:	bd70      	pop	{r4, r5, r6, pc}
        am_util_stdio_printf("Error - configuring AUDADC Slot 0 failed.\n");
   2e41c:	4813      	ldr	r0, [pc, #76]	; (2e46c <audadc_slot_config+0xa4>)
   2e41e:	f001 f83f 	bl	2f4a0 <am_util_stdio_printf>
        return NS_STATUS_INIT_FAILED;
   2e422:	2504      	movs	r5, #4
}
   2e424:	4628      	mov	r0, r5
   2e426:	b004      	add	sp, #16
   2e428:	bd70      	pop	{r4, r5, r6, pc}
            am_hal_audadc_configure_slot(g_AUDADCHandle, 2, &AUDADCSlotConfig)) {
   2e42a:	6830      	ldr	r0, [r6, #0]
        AUDADCSlotConfig.eChannel = AM_HAL_AUDADC_SLOT_CHSEL_SE2;
   2e42c:	f88d 100d 	strb.w	r1, [sp, #13]
            am_hal_audadc_configure_slot(g_AUDADCHandle, 2, &AUDADCSlotConfig)) {
   2e430:	aa01      	add	r2, sp, #4
   2e432:	f002 fcf5 	bl	30e20 <am_hal_audadc_configure_slot>
        if (AM_HAL_STATUS_SUCCESS !=
   2e436:	b990      	cbnz	r0, 2e45e <audadc_slot_config+0x96>
        AUDADCSlotConfig.eChannel = AM_HAL_AUDADC_SLOT_CHSEL_SE3;
   2e438:	2103      	movs	r1, #3
            am_hal_audadc_configure_slot(g_AUDADCHandle, 3, &AUDADCSlotConfig)) {
   2e43a:	6830      	ldr	r0, [r6, #0]
        AUDADCSlotConfig.eChannel = AM_HAL_AUDADC_SLOT_CHSEL_SE3;
   2e43c:	f88d 100d 	strb.w	r1, [sp, #13]
            am_hal_audadc_configure_slot(g_AUDADCHandle, 3, &AUDADCSlotConfig)) {
   2e440:	aa01      	add	r2, sp, #4
   2e442:	f002 fced 	bl	30e20 <am_hal_audadc_configure_slot>
        if (AM_HAL_STATUS_SUCCESS !=
   2e446:	2800      	cmp	r0, #0
   2e448:	d0e5      	beq.n	2e416 <audadc_slot_config+0x4e>
            am_util_stdio_printf("Error - configuring AUDADC Slot 3 failed.\n");
   2e44a:	4809      	ldr	r0, [pc, #36]	; (2e470 <audadc_slot_config+0xa8>)
   2e44c:	f001 f828 	bl	2f4a0 <am_util_stdio_printf>
            return NS_STATUS_INIT_FAILED;
   2e450:	2504      	movs	r5, #4
   2e452:	e7e0      	b.n	2e416 <audadc_slot_config+0x4e>
        am_util_stdio_printf("Error - configuring AUDADC Slot 1 failed.\n");
   2e454:	4807      	ldr	r0, [pc, #28]	; (2e474 <audadc_slot_config+0xac>)
   2e456:	f001 f823 	bl	2f4a0 <am_util_stdio_printf>
        return NS_STATUS_INIT_FAILED;
   2e45a:	2504      	movs	r5, #4
   2e45c:	e7db      	b.n	2e416 <audadc_slot_config+0x4e>
            am_util_stdio_printf("Error - configuring AUDADC Slot 2 failed.\n");
   2e45e:	4806      	ldr	r0, [pc, #24]	; (2e478 <audadc_slot_config+0xb0>)
   2e460:	f001 f81e 	bl	2f4a0 <am_util_stdio_printf>
            return NS_STATUS_INIT_FAILED;
   2e464:	2504      	movs	r5, #4
   2e466:	e7d6      	b.n	2e416 <audadc_slot_config+0x4e>
   2e468:	100197e4 	.word	0x100197e4
   2e46c:	0004211c 	.word	0x0004211c
   2e470:	000421a0 	.word	0x000421a0
   2e474:	00042148 	.word	0x00042148
   2e478:	00042174 	.word	0x00042174

0002e47c <audadc_config>:
 * @brief Configure and enable the AUDADC
 *
 * @param cfg - AUDADC-specific configuration
 * @return uint32_t status
 */
uint32_t audadc_config(ns_audadc_cfg_t *cfg) {
   2e47c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e47e:	b085      	sub	sp, #20

    // Set up the AUDADC configuration parameters. These settings are reasonable
    // for accurate measurements at a low sample rate.

    am_hal_audadc_config_t AUDADCConfig = {
   2e480:	2200      	movs	r2, #0

    am_hal_audadc_irtt_config_t AUDADCIrttConfig = {// only used if timer isn't used
                                                    .bIrttEnable = true,
                                                    .eClkDiv = AM_HAL_AUDADC_RPTT_CLK_DIV32};

    switch (cfg->clock) {
   2e482:	7803      	ldrb	r3, [r0, #0]
    am_hal_audadc_config_t AUDADCConfig = {
   2e484:	9200      	str	r2, [sp, #0]
uint32_t audadc_config(ns_audadc_cfg_t *cfg) {
   2e486:	4604      	mov	r4, r0
    am_hal_audadc_config_t AUDADCConfig = {
   2e488:	f8cd 2003 	str.w	r2, [sp, #3]
   2e48c:	2107      	movs	r1, #7
   2e48e:	2001      	movs	r0, #1
    am_hal_audadc_irtt_config_t AUDADCIrttConfig = {// only used if timer isn't used
   2e490:	9203      	str	r2, [sp, #12]
   2e492:	f240 5201 	movw	r2, #1281	; 0x501
    am_hal_audadc_config_t AUDADCConfig = {
   2e496:	f88d 0007 	strb.w	r0, [sp, #7]
   2e49a:	f88d 1003 	strb.w	r1, [sp, #3]
    am_hal_audadc_irtt_config_t AUDADCIrttConfig = {// only used if timer isn't used
   2e49e:	9202      	str	r2, [sp, #8]
    switch (cfg->clock) {
   2e4a0:	2b04      	cmp	r3, #4
   2e4a2:	d809      	bhi.n	2e4b8 <audadc_config+0x3c>
   2e4a4:	e8df f003 	tbb	[pc, r3]
   2e4a8:	0370797d 	.word	0x0370797d
   2e4ac:	03          	.byte	0x03
   2e4ad:	00          	.byte	0x00
        AUDADCConfig.eClock = AM_HAL_AUDADC_CLKSEL_HFRC_48MHz;
        AUDADCIrttConfig.ui32IrttCountMax = 93;
        break;
    case NS_CLKSEL_HFRC2:
    case NS_CLKSEL_HFRC2_ADJ:
        AUDADCConfig.eClock = AM_HAL_AUDADC_CLKSEL_HFRC2_48MHz;
   2e4ae:	2103      	movs	r1, #3
        AUDADCIrttConfig.ui32IrttCountMax = 93;
   2e4b0:	225d      	movs	r2, #93	; 0x5d
        AUDADCConfig.eClock = AM_HAL_AUDADC_CLKSEL_HFRC2_48MHz;
   2e4b2:	f88d 1000 	strb.w	r1, [sp]
        AUDADCIrttConfig.ui32IrttCountMax = 93;
   2e4b6:	9203      	str	r2, [sp, #12]
    case NS_CLKSEL_HFXTAL:
        // Not allowed for AUDADC
        return NS_STATUS_INVALID_CONFIG;
    }

    if (cfg->low_power_mode) {
   2e4b8:	7862      	ldrb	r2, [r4, #1]
   2e4ba:	2a00      	cmp	r2, #0
   2e4bc:	d156      	bne.n	2e56c <audadc_config+0xf0>
        AUDADCConfig.eClockMode = AM_HAL_AUDADC_CLKMODE_LOW_LATENCY;
        AUDADCConfig.ePowerMode = AM_HAL_AUDADC_LPMODE0;
        AUDADCConfig.eSampMode = AM_HAL_AUDADC_SAMPMODE_MED;
    }

    if ((cfg->clock == NS_CLKSEL_HFRC2) || (cfg->clock == NS_CLKSEL_HFRC2_ADJ)) {
   2e4be:	3b03      	subs	r3, #3
        AUDADCConfig.eSampMode = AM_HAL_AUDADC_SAMPMODE_MED;
   2e4c0:	f240 1201 	movw	r2, #257	; 0x101
    if ((cfg->clock == NS_CLKSEL_HFRC2) || (cfg->clock == NS_CLKSEL_HFRC2_ADJ)) {
   2e4c4:	2b01      	cmp	r3, #1
        AUDADCConfig.eSampMode = AM_HAL_AUDADC_SAMPMODE_MED;
   2e4c6:	f8ad 2004 	strh.w	r2, [sp, #4]
    if ((cfg->clock == NS_CLKSEL_HFRC2) || (cfg->clock == NS_CLKSEL_HFRC2_ADJ)) {
   2e4ca:	d955      	bls.n	2e578 <audadc_config+0xfc>
    }

    AUDADCConfig.eRepeatTrigger =
        (cfg->repeating_trigger_mode) ? AM_HAL_AUDADC_RPTTRIGSEL_INT : AM_HAL_AUDADC_RPTTRIGSEL_TMR;

    int ret = am_hal_audadc_initialize(0, &g_AUDADCHandle);
   2e4cc:	4d59      	ldr	r5, [pc, #356]	; (2e634 <audadc_config+0x1b8>)
    AUDADCConfig.eRepeatTrigger =
   2e4ce:	78a3      	ldrb	r3, [r4, #2]
   2e4d0:	f88d 3001 	strb.w	r3, [sp, #1]
    int ret = am_hal_audadc_initialize(0, &g_AUDADCHandle);
   2e4d4:	4629      	mov	r1, r5
   2e4d6:	2000      	movs	r0, #0
   2e4d8:	f002 fbf8 	bl	30ccc <am_hal_audadc_initialize>
    if (AM_HAL_STATUS_SUCCESS != ret) {
   2e4dc:	4602      	mov	r2, r0
   2e4de:	2800      	cmp	r0, #0
   2e4e0:	d16e      	bne.n	2e5c0 <audadc_config+0x144>
        am_util_stdio_printf("Error - reservation of the AUDADC instance failed ERR %d.\n", ret);
        return NS_STATUS_INIT_FAILED;
    }

    if (AM_HAL_STATUS_SUCCESS !=
        am_hal_audadc_power_control(g_AUDADCHandle, AM_HAL_SYSCTRL_WAKE, false)) {
   2e4e2:	4601      	mov	r1, r0
   2e4e4:	6828      	ldr	r0, [r5, #0]
   2e4e6:	f002 fed5 	bl	31294 <am_hal_audadc_power_control>
    if (AM_HAL_STATUS_SUCCESS !=
   2e4ea:	4606      	mov	r6, r0
   2e4ec:	2800      	cmp	r0, #0
   2e4ee:	f040 8092 	bne.w	2e616 <audadc_config+0x19a>
        am_util_stdio_printf("Error - AUDADC power on failed.\n");
        return NS_STATUS_INIT_FAILED;
    }

    if (cfg->clock == NS_CLKSEL_HFRC2_ADJ) {
   2e4f2:	7827      	ldrb	r7, [r4, #0]
   2e4f4:	2f04      	cmp	r7, #4
   2e4f6:	f000 8081 	beq.w	2e5fc <audadc_config+0x180>
        am_hal_mcuctrl_control(AM_HAL_MCUCTRL_CONTROL_EXTCLK32M_KICK_START, false);

        // set HF2ADJ for 24.576MHz output
        am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_HF2ADJ_ENABLE, false);
        am_util_delay_us(500); // wait for adj to apply
    } else if (cfg->clock == NS_CLKSEL_XTHS) {
   2e4fa:	2f00      	cmp	r7, #0
   2e4fc:	d06d      	beq.n	2e5da <audadc_config+0x15e>
        am_hal_mcuctrl_control(AM_HAL_MCUCTRL_CONTROL_EXTCLK32M_NORMAL, 0);
        am_util_delay_us(1500);
    }

    // Configure the AUDADC based on the above data structs using HAL
    if (AM_HAL_STATUS_SUCCESS != am_hal_audadc_configure(g_AUDADCHandle, &AUDADCConfig)) {
   2e4fe:	6828      	ldr	r0, [r5, #0]
   2e500:	4669      	mov	r1, sp
   2e502:	f002 fc39 	bl	30d78 <am_hal_audadc_configure>
   2e506:	2800      	cmp	r0, #0
   2e508:	f040 808a 	bne.w	2e620 <audadc_config+0x1a4>
        am_util_stdio_printf("Error - configuring AUDADC failed.\n");
        return NS_STATUS_INIT_FAILED;
    }

    // Set up internal repeat trigger timer
    if (cfg->repeating_trigger_mode) {
   2e50c:	78a3      	ldrb	r3, [r4, #2]
   2e50e:	2b00      	cmp	r3, #0
   2e510:	d15e      	bne.n	2e5d0 <audadc_config+0x154>
        am_hal_audadc_configure_irtt(g_AUDADCHandle, &AUDADCIrttConfig);
    } else {
        // timer6_init();
    }

    if (AM_HAL_STATUS_SUCCESS != am_hal_audadc_enable(g_AUDADCHandle)) {
   2e512:	6828      	ldr	r0, [r5, #0]
   2e514:	f002 fd22 	bl	30f5c <am_hal_audadc_enable>
   2e518:	4606      	mov	r6, r0
   2e51a:	2800      	cmp	r0, #0
   2e51c:	f040 8085 	bne.w	2e62a <audadc_config+0x1ae>
        am_util_stdio_printf("Error - enabling AUDADC failed.\n");
        return NS_STATUS_INIT_FAILED;
    }

    if (cfg->repeating_trigger_mode) {
   2e520:	78a3      	ldrb	r3, [r4, #2]
   2e522:	2b00      	cmp	r3, #0
   2e524:	d166      	bne.n	2e5f4 <audadc_config+0x178>
    } else {
        // am_hal_timer_start(6);
    }

    // AUDADC DMA data config
    audadc_config_dma(g_ns_audio_config);
   2e526:	4b44      	ldr	r3, [pc, #272]	; (2e638 <audadc_config+0x1bc>)
   2e528:	681a      	ldr	r2, [r3, #0]
   2e52a:	7f11      	ldrb	r1, [r2, #28]
   2e52c:	8bd3      	ldrh	r3, [r2, #30]
    g_sAUDADCDMAConfig.bDMAEnable = true;
   2e52e:	6950      	ldr	r0, [r2, #20]
    g_sAUDADCDMAConfig.ui32SampleCount = cfg->numSamples * cfg->numChannels;
   2e530:	fb01 f303 	mul.w	r3, r1, r3
    g_sAUDADCDMAConfig.bDynamicPriority = true;
   2e534:	4941      	ldr	r1, [pc, #260]	; (2e63c <audadc_config+0x1c0>)
    g_sAUDADCDMAConfig.ui32SampleCount = cfg->numSamples * cfg->numChannels;
   2e536:	604b      	str	r3, [r1, #4]
        g_sAUDADCDMAConfig.ui32TargetAddress +
   2e538:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    g_sAUDADCDMAConfig.ui32TargetAddressReverse =
   2e53c:	e9c1 0302 	strd	r0, r3, [r1, #8]
    g_sAUDADCDMAConfig.bDynamicPriority = true;
   2e540:	f240 1301 	movw	r3, #257	; 0x101
   2e544:	800b      	strh	r3, [r1, #0]
    if (AM_HAL_STATUS_SUCCESS != am_hal_audadc_configure_dma(g_AUDADCHandle, &g_sAUDADCDMAConfig)) {
   2e546:	6828      	ldr	r0, [r5, #0]
    g_sAUDADCDMAConfig.bDMAEnable = true;
   2e548:	2301      	movs	r3, #1
   2e54a:	708b      	strb	r3, [r1, #2]
    if (AM_HAL_STATUS_SUCCESS != am_hal_audadc_configure_dma(g_AUDADCHandle, &g_sAUDADCDMAConfig)) {
   2e54c:	f002 fcd8 	bl	30f00 <am_hal_audadc_configure_dma>
   2e550:	2800      	cmp	r0, #0
   2e552:	d14b      	bne.n	2e5ec <audadc_config+0x170>
    g_bAUDADCDMAError = false;
   2e554:	4a3a      	ldr	r2, [pc, #232]	; (2e640 <audadc_config+0x1c4>)

    if (cfg->dcmp_enable) {
   2e556:	78e3      	ldrb	r3, [r4, #3]
        am_hal_audadc_interrupt_enable(
   2e558:	6828      	ldr	r0, [r5, #0]
    g_bAUDADCDMAError = false;
   2e55a:	2100      	movs	r1, #0
   2e55c:	7011      	strb	r1, [r2, #0]
    if (cfg->dcmp_enable) {
   2e55e:	b34b      	cbz	r3, 2e5b4 <audadc_config+0x138>
        am_hal_audadc_interrupt_enable(
   2e560:	21c0      	movs	r1, #192	; 0xc0
   2e562:	f002 fd19 	bl	30f98 <am_hal_audadc_interrupt_enable>
            g_AUDADCHandle,
            AM_HAL_AUDADC_INT_DERR | AM_HAL_AUDADC_INT_DCMP | AM_HAL_AUDADC_INT_FIFOOVR1);
    }

    return NS_STATUS_SUCCESS;
}
   2e566:	4630      	mov	r0, r6
   2e568:	b005      	add	sp, #20
   2e56a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((cfg->clock == NS_CLKSEL_HFRC2) || (cfg->clock == NS_CLKSEL_HFRC2_ADJ)) {
   2e56c:	3b03      	subs	r3, #3
        AUDADCConfig.ePowerMode = AM_HAL_AUDADC_LPMODE1;
   2e56e:	2201      	movs	r2, #1
    if ((cfg->clock == NS_CLKSEL_HFRC2) || (cfg->clock == NS_CLKSEL_HFRC2_ADJ)) {
   2e570:	2b01      	cmp	r3, #1
        AUDADCConfig.ePowerMode = AM_HAL_AUDADC_LPMODE1;
   2e572:	f88d 2006 	strb.w	r2, [sp, #6]
    if ((cfg->clock == NS_CLKSEL_HFRC2) || (cfg->clock == NS_CLKSEL_HFRC2_ADJ)) {
   2e576:	d8a9      	bhi.n	2e4cc <audadc_config+0x50>
        am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_HFRC2_START, false);
   2e578:	2100      	movs	r1, #0
   2e57a:	2007      	movs	r0, #7
   2e57c:	f001 fab4 	bl	2fae8 <am_hal_clkgen_control>
        am_util_delay_us(200);
   2e580:	20c8      	movs	r0, #200	; 0xc8
   2e582:	f000 fa2b 	bl	2e9dc <am_util_delay_us>
   2e586:	e7a1      	b.n	2e4cc <audadc_config+0x50>
        AUDADCIrttConfig.ui32IrttCountMax = 93;
   2e588:	225d      	movs	r2, #93	; 0x5d
   2e58a:	9203      	str	r2, [sp, #12]
    if (cfg->low_power_mode) {
   2e58c:	7862      	ldrb	r2, [r4, #1]
        AUDADCConfig.eClock = AM_HAL_AUDADC_CLKSEL_HFRC_48MHz;
   2e58e:	2101      	movs	r1, #1
   2e590:	f88d 1000 	strb.w	r1, [sp]
    if (cfg->low_power_mode) {
   2e594:	2a00      	cmp	r2, #0
   2e596:	d092      	beq.n	2e4be <audadc_config+0x42>
   2e598:	e7e8      	b.n	2e56c <audadc_config+0xf0>
    switch (cfg->clock) {
   2e59a:	2603      	movs	r6, #3
}
   2e59c:	4630      	mov	r0, r6
   2e59e:	b005      	add	sp, #20
   2e5a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        AUDADCIrttConfig.ui32IrttCountMax = 46; // VoS has 46
   2e5a2:	222e      	movs	r2, #46	; 0x2e
   2e5a4:	9203      	str	r2, [sp, #12]
    if (cfg->low_power_mode) {
   2e5a6:	7862      	ldrb	r2, [r4, #1]
        AUDADCConfig.eClock = AM_HAL_AUDADC_CLKSEL_XTHS_24MHz;
   2e5a8:	2102      	movs	r1, #2
   2e5aa:	f88d 1000 	strb.w	r1, [sp]
    if (cfg->low_power_mode) {
   2e5ae:	2a00      	cmp	r2, #0
   2e5b0:	d085      	beq.n	2e4be <audadc_config+0x42>
   2e5b2:	e7db      	b.n	2e56c <audadc_config+0xf0>
        am_hal_audadc_interrupt_enable(
   2e5b4:	21c4      	movs	r1, #196	; 0xc4
   2e5b6:	f002 fcef 	bl	30f98 <am_hal_audadc_interrupt_enable>
}
   2e5ba:	4630      	mov	r0, r6
   2e5bc:	b005      	add	sp, #20
   2e5be:	bdf0      	pop	{r4, r5, r6, r7, pc}
        am_util_stdio_printf("Error - reservation of the AUDADC instance failed ERR %d.\n", ret);
   2e5c0:	4611      	mov	r1, r2
   2e5c2:	4820      	ldr	r0, [pc, #128]	; (2e644 <audadc_config+0x1c8>)
   2e5c4:	f000 ff6c 	bl	2f4a0 <am_util_stdio_printf>
        return NS_STATUS_INIT_FAILED;
   2e5c8:	2604      	movs	r6, #4
}
   2e5ca:	4630      	mov	r0, r6
   2e5cc:	b005      	add	sp, #20
   2e5ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        am_hal_audadc_configure_irtt(g_AUDADCHandle, &AUDADCIrttConfig);
   2e5d0:	6828      	ldr	r0, [r5, #0]
   2e5d2:	a902      	add	r1, sp, #8
   2e5d4:	f002 fc68 	bl	30ea8 <am_hal_audadc_configure_irtt>
   2e5d8:	e79b      	b.n	2e512 <audadc_config+0x96>
        am_hal_mcuctrl_control(AM_HAL_MCUCTRL_CONTROL_EXTCLK32M_NORMAL, 0);
   2e5da:	4639      	mov	r1, r7
   2e5dc:	2003      	movs	r0, #3
   2e5de:	f001 fca3 	bl	2ff28 <am_hal_mcuctrl_control>
        am_util_delay_us(1500);
   2e5e2:	f240 50dc 	movw	r0, #1500	; 0x5dc
   2e5e6:	f000 f9f9 	bl	2e9dc <am_util_delay_us>
   2e5ea:	e788      	b.n	2e4fe <audadc_config+0x82>
        ns_lp_printf("Error - configuring AUDADC DMA failed.\n");
   2e5ec:	4816      	ldr	r0, [pc, #88]	; (2e648 <audadc_config+0x1cc>)
   2e5ee:	f7ff f9ab 	bl	2d948 <ns_lp_printf>
   2e5f2:	e7af      	b.n	2e554 <audadc_config+0xd8>
        am_hal_audadc_irtt_enable(g_AUDADCHandle);
   2e5f4:	6828      	ldr	r0, [r5, #0]
   2e5f6:	f002 fc6f 	bl	30ed8 <am_hal_audadc_irtt_enable>
   2e5fa:	e794      	b.n	2e526 <audadc_config+0xaa>
        am_hal_mcuctrl_control(AM_HAL_MCUCTRL_CONTROL_EXTCLK32M_KICK_START, false);
   2e5fc:	4601      	mov	r1, r0
   2e5fe:	2002      	movs	r0, #2
   2e600:	f001 fc92 	bl	2ff28 <am_hal_mcuctrl_control>
        am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_HF2ADJ_ENABLE, false);
   2e604:	4631      	mov	r1, r6
   2e606:	4638      	mov	r0, r7
   2e608:	f001 fa6e 	bl	2fae8 <am_hal_clkgen_control>
        am_util_delay_us(500); // wait for adj to apply
   2e60c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   2e610:	f000 f9e4 	bl	2e9dc <am_util_delay_us>
   2e614:	e773      	b.n	2e4fe <audadc_config+0x82>
        am_util_stdio_printf("Error - AUDADC power on failed.\n");
   2e616:	480d      	ldr	r0, [pc, #52]	; (2e64c <audadc_config+0x1d0>)
   2e618:	f000 ff42 	bl	2f4a0 <am_util_stdio_printf>
        return NS_STATUS_INIT_FAILED;
   2e61c:	2604      	movs	r6, #4
   2e61e:	e7a2      	b.n	2e566 <audadc_config+0xea>
        am_util_stdio_printf("Error - configuring AUDADC failed.\n");
   2e620:	480b      	ldr	r0, [pc, #44]	; (2e650 <audadc_config+0x1d4>)
   2e622:	f000 ff3d 	bl	2f4a0 <am_util_stdio_printf>
        return NS_STATUS_INIT_FAILED;
   2e626:	2604      	movs	r6, #4
   2e628:	e79d      	b.n	2e566 <audadc_config+0xea>
        am_util_stdio_printf("Error - enabling AUDADC failed.\n");
   2e62a:	480a      	ldr	r0, [pc, #40]	; (2e654 <audadc_config+0x1d8>)
   2e62c:	f000 ff38 	bl	2f4a0 <am_util_stdio_printf>
        return NS_STATUS_INIT_FAILED;
   2e630:	2604      	movs	r6, #4
   2e632:	e798      	b.n	2e566 <audadc_config+0xea>
   2e634:	100197e4 	.word	0x100197e4
   2e638:	100197dc 	.word	0x100197dc
   2e63c:	100197ec 	.word	0x100197ec
   2e640:	100197e8 	.word	0x100197e8
   2e644:	000421cc 	.word	0x000421cc
   2e648:	00042274 	.word	0x00042274
   2e64c:	00042208 	.word	0x00042208
   2e650:	0004222c 	.word	0x0004222c
   2e654:	00042250 	.word	0x00042250

0002e658 <am_audadc0_isr>:
//*****************************************************************************
//
// Interrupt handler for the AUDADC.
//
//*****************************************************************************
void am_audadc0_isr(void) {
   2e658:	b570      	push	{r4, r5, r6, lr}
    uint32_t ui32IntMask;

    // Read the interrupt status.
    if (AM_HAL_STATUS_SUCCESS !=
        am_hal_audadc_interrupt_status(g_AUDADCHandle, &ui32IntMask, false)) {
   2e65a:	4c2e      	ldr	r4, [pc, #184]	; (2e714 <am_audadc0_isr+0xbc>)
void am_audadc0_isr(void) {
   2e65c:	b082      	sub	sp, #8
        am_hal_audadc_interrupt_status(g_AUDADCHandle, &ui32IntMask, false)) {
   2e65e:	6820      	ldr	r0, [r4, #0]
   2e660:	2200      	movs	r2, #0
   2e662:	a901      	add	r1, sp, #4
   2e664:	f002 fcac 	bl	30fc0 <am_hal_audadc_interrupt_status>
    if (AM_HAL_STATUS_SUCCESS !=
   2e668:	2800      	cmp	r0, #0
   2e66a:	d145      	bne.n	2e6f8 <am_audadc0_isr+0xa0>
        am_util_stdio_printf("Error reading AUDADC interrupt status\n");
    }

    // Clear the AUDADC interrupt.
    if (AM_HAL_STATUS_SUCCESS != am_hal_audadc_interrupt_clear(g_AUDADCHandle, ui32IntMask)) {
   2e66c:	9901      	ldr	r1, [sp, #4]
   2e66e:	6820      	ldr	r0, [r4, #0]
   2e670:	f002 fcca 	bl	31008 <am_hal_audadc_interrupt_clear>
   2e674:	2800      	cmp	r0, #0
   2e676:	d13b      	bne.n	2e6f0 <am_audadc0_isr+0x98>
        am_util_stdio_printf("Error clearing AUDADC interrupt status\n");
    }

    // If we got a DMA complete, set the flag.
    // if (ui32IntMask & AM_HAL_AUDADC_INT_FIFOOVR1) {
    if (ui32IntMask & AM_HAL_AUDADC_INT_DCMP) {
   2e678:	9b01      	ldr	r3, [sp, #4]
   2e67a:	0658      	lsls	r0, r3, #25
   2e67c:	d528      	bpl.n	2e6d0 <am_audadc0_isr+0x78>
        if (AUDADCn(0)->DMASTAT_b.DMACPL) {
   2e67e:	4a26      	ldr	r2, [pc, #152]	; (2e718 <am_audadc0_isr+0xc0>)
   2e680:	f8d2 1290 	ldr.w	r1, [r2, #656]	; 0x290
   2e684:	0789      	lsls	r1, r1, #30
   2e686:	d52a      	bpl.n	2e6de <am_audadc0_isr+0x86>
            g_bAUDADCDMAError = false;

            // g_bAUDADCDMAComplete = true;
            if (g_ns_audio_config->api->version.major < 2) {
   2e688:	4e24      	ldr	r6, [pc, #144]	; (2e71c <am_audadc0_isr+0xc4>)
            g_bAUDADCDMAError = false;
   2e68a:	4d25      	ldr	r5, [pc, #148]	; (2e720 <am_audadc0_isr+0xc8>)
            if (g_ns_audio_config->api->version.major < 2) {
   2e68c:	6830      	ldr	r0, [r6, #0]
            g_bAUDADCDMAError = false;
   2e68e:	2300      	movs	r3, #0
   2e690:	702b      	strb	r3, [r5, #0]
            if (g_ns_audio_config->api->version.major < 2) {
   2e692:	6803      	ldr	r3, [r0, #0]
   2e694:	889b      	ldrh	r3, [r3, #4]
   2e696:	2b01      	cmp	r3, #1
   2e698:	d936      	bls.n	2e708 <am_audadc0_isr+0xb0>
                am_hal_audadc_interrupt_service(g_AUDADCHandle, &g_sAUDADCDMAConfig);
            }

            g_ns_audio_config->callback(g_ns_audio_config, 0);
   2e69a:	6883      	ldr	r3, [r0, #8]
   2e69c:	2100      	movs	r1, #0
   2e69e:	4798      	blx	r3
            audadc_config_dma(g_ns_audio_config);
   2e6a0:	6832      	ldr	r2, [r6, #0]
    if (AM_HAL_STATUS_SUCCESS != am_hal_audadc_configure_dma(g_AUDADCHandle, &g_sAUDADCDMAConfig)) {
   2e6a2:	6820      	ldr	r0, [r4, #0]
   2e6a4:	7f11      	ldrb	r1, [r2, #28]
   2e6a6:	8bd3      	ldrh	r3, [r2, #30]
    g_sAUDADCDMAConfig.bDMAEnable = true;
   2e6a8:	6952      	ldr	r2, [r2, #20]
    g_sAUDADCDMAConfig.ui32SampleCount = cfg->numSamples * cfg->numChannels;
   2e6aa:	fb01 f303 	mul.w	r3, r1, r3
    g_sAUDADCDMAConfig.bDynamicPriority = true;
   2e6ae:	491d      	ldr	r1, [pc, #116]	; (2e724 <am_audadc0_isr+0xcc>)
        g_sAUDADCDMAConfig.ui32TargetAddress +
   2e6b0:	eb02 0483 	add.w	r4, r2, r3, lsl #2
    g_sAUDADCDMAConfig.ui32TargetAddress = (uint32_t)cfg->sampleBuffer;
   2e6b4:	e9c1 3201 	strd	r3, r2, [r1, #4]
    g_sAUDADCDMAConfig.bDynamicPriority = true;
   2e6b8:	f240 1301 	movw	r3, #257	; 0x101
   2e6bc:	800b      	strh	r3, [r1, #0]
    g_sAUDADCDMAConfig.bDMAEnable = true;
   2e6be:	2301      	movs	r3, #1
    g_sAUDADCDMAConfig.ui32TargetAddressReverse =
   2e6c0:	60cc      	str	r4, [r1, #12]
    g_sAUDADCDMAConfig.bDMAEnable = true;
   2e6c2:	708b      	strb	r3, [r1, #2]
    if (AM_HAL_STATUS_SUCCESS != am_hal_audadc_configure_dma(g_AUDADCHandle, &g_sAUDADCDMAConfig)) {
   2e6c4:	f002 fc1c 	bl	30f00 <am_hal_audadc_configure_dma>
   2e6c8:	b9d0      	cbnz	r0, 2e700 <am_audadc0_isr+0xa8>
    g_bAUDADCDMAError = false;
   2e6ca:	2200      	movs	r2, #0
            }
        }
    }

    // If we got a DMA error, set the flag.
    if (ui32IntMask & AM_HAL_AUDADC_INT_DERR) {
   2e6cc:	9b01      	ldr	r3, [sp, #4]
    g_bAUDADCDMAError = false;
   2e6ce:	702a      	strb	r2, [r5, #0]
    if (ui32IntMask & AM_HAL_AUDADC_INT_DERR) {
   2e6d0:	061b      	lsls	r3, r3, #24
   2e6d2:	d502      	bpl.n	2e6da <am_audadc0_isr+0x82>
        g_bAUDADCDMAError = true;
   2e6d4:	4b12      	ldr	r3, [pc, #72]	; (2e720 <am_audadc0_isr+0xc8>)
   2e6d6:	2201      	movs	r2, #1
   2e6d8:	701a      	strb	r2, [r3, #0]
    }
}
   2e6da:	b002      	add	sp, #8
   2e6dc:	bd70      	pop	{r4, r5, r6, pc}
            if (AUDADCn(0)->DMASTAT_b.DMACPL) {
   2e6de:	f8d2 2290 	ldr.w	r2, [r2, #656]	; 0x290
   2e6e2:	0792      	lsls	r2, r2, #30
   2e6e4:	d5f4      	bpl.n	2e6d0 <am_audadc0_isr+0x78>
                am_util_stdio_printf("WHAT clearing AUDADC interrupt status\n");
   2e6e6:	4810      	ldr	r0, [pc, #64]	; (2e728 <am_audadc0_isr+0xd0>)
   2e6e8:	f000 feda 	bl	2f4a0 <am_util_stdio_printf>
    if (ui32IntMask & AM_HAL_AUDADC_INT_DERR) {
   2e6ec:	9b01      	ldr	r3, [sp, #4]
   2e6ee:	e7ef      	b.n	2e6d0 <am_audadc0_isr+0x78>
        am_util_stdio_printf("Error clearing AUDADC interrupt status\n");
   2e6f0:	480e      	ldr	r0, [pc, #56]	; (2e72c <am_audadc0_isr+0xd4>)
   2e6f2:	f000 fed5 	bl	2f4a0 <am_util_stdio_printf>
   2e6f6:	e7bf      	b.n	2e678 <am_audadc0_isr+0x20>
        am_util_stdio_printf("Error reading AUDADC interrupt status\n");
   2e6f8:	480d      	ldr	r0, [pc, #52]	; (2e730 <am_audadc0_isr+0xd8>)
   2e6fa:	f000 fed1 	bl	2f4a0 <am_util_stdio_printf>
   2e6fe:	e7b5      	b.n	2e66c <am_audadc0_isr+0x14>
        ns_lp_printf("Error - configuring AUDADC DMA failed.\n");
   2e700:	480c      	ldr	r0, [pc, #48]	; (2e734 <am_audadc0_isr+0xdc>)
   2e702:	f7ff f921 	bl	2d948 <ns_lp_printf>
   2e706:	e7e0      	b.n	2e6ca <am_audadc0_isr+0x72>
                am_hal_audadc_interrupt_service(g_AUDADCHandle, &g_sAUDADCDMAConfig);
   2e708:	4906      	ldr	r1, [pc, #24]	; (2e724 <am_audadc0_isr+0xcc>)
   2e70a:	6820      	ldr	r0, [r4, #0]
   2e70c:	f002 fc8c 	bl	31028 <am_hal_audadc_interrupt_service>
            g_ns_audio_config->callback(g_ns_audio_config, 0);
   2e710:	6830      	ldr	r0, [r6, #0]
   2e712:	e7c2      	b.n	2e69a <am_audadc0_isr+0x42>
   2e714:	100197e4 	.word	0x100197e4
   2e718:	40210000 	.word	0x40210000
   2e71c:	100197dc 	.word	0x100197dc
   2e720:	100197e8 	.word	0x100197e8
   2e724:	100197ec 	.word	0x100197ec
   2e728:	000422ec 	.word	0x000422ec
   2e72c:	000422c4 	.word	0x000422c4
   2e730:	0004229c 	.word	0x0004229c
   2e734:	00042274 	.word	0x00042274

0002e738 <audadc_init>:
//*****************************************************************************
//
// Setup the AUDADC
//
//*****************************************************************************
uint32_t audadc_init(ns_audio_config_t *cfg) {
   2e738:	b538      	push	{r3, r4, r5, lr}

    // Power up PrePGA
    audadc_pga_init(g_ns_audio_config);
   2e73a:	4c33      	ldr	r4, [pc, #204]	; (2e808 <audadc_init+0xd0>)
   2e73c:	6825      	ldr	r5, [r4, #0]
    am_hal_audadc_refgen_powerup();
   2e73e:	f002 ff2f 	bl	315a0 <am_hal_audadc_refgen_powerup>
    am_hal_audadc_pga_powerup(0);
   2e742:	2000      	movs	r0, #0
   2e744:	f002 ff4e 	bl	315e4 <am_hal_audadc_pga_powerup>
    am_hal_audadc_pga_powerup(1);
   2e748:	2001      	movs	r0, #1
   2e74a:	f002 ff4b 	bl	315e4 <am_hal_audadc_pga_powerup>
    if (cfg->numChannels == 2) {
   2e74e:	7f28      	ldrb	r0, [r5, #28]
   2e750:	2802      	cmp	r0, #2
   2e752:	d04a      	beq.n	2e7ea <audadc_init+0xb2>
    am_hal_audadc_gain_set(0, 2 * PREAMP_FULL_GAIN);
   2e754:	2130      	movs	r1, #48	; 0x30
   2e756:	2000      	movs	r0, #0
   2e758:	f002 fe06 	bl	31368 <am_hal_audadc_gain_set>
    am_hal_audadc_gain_set(1, 2 * PREAMP_FULL_GAIN);
   2e75c:	2130      	movs	r1, #48	; 0x30
   2e75e:	2001      	movs	r0, #1
   2e760:	f002 fe02 	bl	31368 <am_hal_audadc_gain_set>
    if (cfg->numChannels == 2) {
   2e764:	7f28      	ldrb	r0, [r5, #28]
   2e766:	2802      	cmp	r0, #2
   2e768:	d037      	beq.n	2e7da <audadc_init+0xa2>
    am_hal_audadc_micbias_powerup(24);
   2e76a:	2018      	movs	r0, #24
   2e76c:	f002 ffda 	bl	31724 <am_hal_audadc_micbias_powerup>
    am_util_delay_ms(400);
   2e770:	f44f 70c8 	mov.w	r0, #400	; 0x190
   2e774:	f000 f92c 	bl	2e9d0 <am_util_delay_ms>

    // Configure the AUDADC
    if (audadc_config(g_ns_audio_config->audadc_config)) {
   2e778:	6823      	ldr	r3, [r4, #0]
   2e77a:	6a58      	ldr	r0, [r3, #36]	; 0x24
   2e77c:	f7ff fe7e 	bl	2e47c <audadc_config>
   2e780:	bb40      	cbnz	r0, 2e7d4 <audadc_init+0x9c>
        return NS_STATUS_INIT_FAILED;
    }
    g_ns_audio_config->audioSystemHandle = g_AUDADCHandle; // now it has a real value
   2e782:	4922      	ldr	r1, [pc, #136]	; (2e80c <audadc_init+0xd4>)
   2e784:	6823      	ldr	r3, [r4, #0]
   2e786:	6808      	ldr	r0, [r1, #0]

    // Gain setting
    g_sAudadcGainConfig.ui32LGA = CH_A0_GAIN_DB * 2 + 12;
    g_ns_audio_config->fLGAdB = CH_A0_GAIN_DB;
   2e788:	4921      	ldr	r1, [pc, #132]	; (2e810 <audadc_init+0xd8>)
   2e78a:	6419      	str	r1, [r3, #64]	; 0x40
    g_sAudadcGainConfig.ui32LGA = CH_A0_GAIN_DB * 2 + 12;
   2e78c:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 2e7f8 <audadc_init+0xc0>
    g_ns_audio_config->audioSystemHandle = g_AUDADCHandle; // now it has a real value
   2e790:	6398      	str	r0, [r3, #56]	; 0x38
    // g_sAudadcGainConfig.ui32HGADELTA = g_sAudadcGainConfig.ui32LGA - (CH_A1_GAIN_DB * 2 + 12);
    g_sAudadcGainConfig.ui32HGADELTA =
        (CH_A1_GAIN_DB * 2 + 12) - g_sAudadcGainConfig.ui32LGA; // HGDelta = 12
    if (g_ns_audio_config->numChannels == 2) {
   2e792:	7f1b      	ldrb	r3, [r3, #28]
    g_sAudadcGainConfig.ui32LGA = CH_A0_GAIN_DB * 2 + 12;
   2e794:	4a1f      	ldr	r2, [pc, #124]	; (2e814 <audadc_init+0xdc>)
        // g_sAudadcGainConfig.ui32HGBDELTA = g_sAudadcGainConfig.ui32LGB - (CH_B1_GAIN_DB * 2 +
        // 12);
        g_sAudadcGainConfig.ui32HGBDELTA = (CH_B1_GAIN_DB * 2 + 12) - g_sAudadcGainConfig.ui32LGB;
    }
    g_sAudadcGainConfig.eUpdateMode = AM_HAL_AUDADC_GAIN_UPDATE_IMME;
    am_hal_audadc_internal_pga_config(g_AUDADCHandle, &g_sAudadcGainConfig);
   2e796:	491f      	ldr	r1, [pc, #124]	; (2e814 <audadc_init+0xdc>)
    if (g_ns_audio_config->numChannels == 2) {
   2e798:	2b02      	cmp	r3, #2
    g_sAudadcGainConfig.ui32LGA = CH_A0_GAIN_DB * 2 + 12;
   2e79a:	ed82 7b00 	vstr	d7, [r2]
        g_sAudadcGainConfig.ui32LGB = CH_B0_GAIN_DB * 2 + 12;
   2e79e:	bf08      	it	eq
   2e7a0:	ed9f 7b17 	vldreq	d7, [pc, #92]	; 2e800 <audadc_init+0xc8>
    g_sAudadcGainConfig.eUpdateMode = AM_HAL_AUDADC_GAIN_UPDATE_IMME;
   2e7a4:	f04f 0300 	mov.w	r3, #0
        g_sAudadcGainConfig.ui32LGB = CH_B0_GAIN_DB * 2 + 12;
   2e7a8:	bf08      	it	eq
   2e7aa:	ed82 7b02 	vstreq	d7, [r2, #8]
    g_sAudadcGainConfig.eUpdateMode = AM_HAL_AUDADC_GAIN_UPDATE_IMME;
   2e7ae:	7413      	strb	r3, [r2, #16]
    am_hal_audadc_internal_pga_config(g_AUDADCHandle, &g_sAudadcGainConfig);
   2e7b0:	f002 ffd0 	bl	31754 <am_hal_audadc_internal_pga_config>

    // Configure the slot
    if (audadc_slot_config(g_ns_audio_config)) {
   2e7b4:	6820      	ldr	r0, [r4, #0]
   2e7b6:	f7ff fe07 	bl	2e3c8 <audadc_slot_config>
   2e7ba:	4604      	mov	r4, r0
   2e7bc:	b950      	cbnz	r0, 2e7d4 <audadc_init+0x9c>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2e7be:	4b16      	ldr	r3, [pc, #88]	; (2e818 <audadc_init+0xe0>)
   2e7c0:	2280      	movs	r2, #128	; 0x80
   2e7c2:	f883 232a 	strb.w	r2, [r3, #810]	; 0x32a
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2e7c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2e7ca:	605a      	str	r2, [r3, #4]
    }
        #endif
    #endif
    NVIC_SetPriority(AUDADC0_IRQn, AM_IRQ_PRIORITY_DEFAULT);
    NVIC_EnableIRQ(AUDADC0_IRQn);
    am_hal_interrupt_master_enable();
   2e7cc:	f001 fafa 	bl	2fdc4 <am_hal_interrupt_master_enable>

    return NS_STATUS_SUCCESS;
}
   2e7d0:	4620      	mov	r0, r4
   2e7d2:	bd38      	pop	{r3, r4, r5, pc}
        return NS_STATUS_INIT_FAILED;
   2e7d4:	2404      	movs	r4, #4
}
   2e7d6:	4620      	mov	r0, r4
   2e7d8:	bd38      	pop	{r3, r4, r5, pc}
        am_hal_audadc_gain_set(2, 2 * PREAMP_FULL_GAIN);
   2e7da:	2130      	movs	r1, #48	; 0x30
   2e7dc:	f002 fdc4 	bl	31368 <am_hal_audadc_gain_set>
        am_hal_audadc_gain_set(3, 2 * PREAMP_FULL_GAIN);
   2e7e0:	2130      	movs	r1, #48	; 0x30
   2e7e2:	2003      	movs	r0, #3
   2e7e4:	f002 fdc0 	bl	31368 <am_hal_audadc_gain_set>
   2e7e8:	e7bf      	b.n	2e76a <audadc_init+0x32>
        am_hal_audadc_pga_powerup(2);
   2e7ea:	f002 fefb 	bl	315e4 <am_hal_audadc_pga_powerup>
        am_hal_audadc_pga_powerup(3);
   2e7ee:	2003      	movs	r0, #3
   2e7f0:	f002 fef8 	bl	315e4 <am_hal_audadc_pga_powerup>
   2e7f4:	e7ae      	b.n	2e754 <audadc_init+0x1c>
   2e7f6:	bf00      	nop
   2e7f8:	00000030 	.word	0x00000030
   2e7fc:	00000000 	.word	0x00000000
   2e800:	00000024 	.word	0x00000024
   2e804:	00000000 	.word	0x00000000
   2e808:	100197dc 	.word	0x100197dc
   2e80c:	100197e4 	.word	0x100197e4
   2e810:	41900000 	.word	0x41900000
   2e814:	10019800 	.word	0x10019800
   2e818:	e000e100 	.word	0xe000e100

0002e81c <ns_malloc_init>:

/// Empty for now, but placeholder in case we need multi-heap support
uint8_t
ns_malloc_init() {
    return 0;
};
   2e81c:	2000      	movs	r0, #0
   2e81e:	4770      	bx	lr

0002e820 <ns_malloc>:
/// Simple pvPortMalloc wrapper
void *
ns_malloc(size_t size) {
    void *ptr = NULL;

    if (size > 0) {
   2e820:	b108      	cbz	r0, 2e826 <ns_malloc+0x6>
        ptr = pvTasklessPortMalloc(size);
   2e822:	f7f1 bda3 	b.w	2036c <pvTasklessPortMalloc>
    } // else NULL if there was an error

    return ptr;
}
   2e826:	4770      	bx	lr

0002e828 <ns_free>:

/// Simple vPortFree wrapper
void
ns_free(void *ptr) {
    if (ptr) {
   2e828:	b108      	cbz	r0, 2e82e <ns_free+0x6>
        vTasklessPortFree(ptr);
   2e82a:	f7f1 be41 	b.w	204b0 <vTasklessPortFree>
    }
}
   2e82e:	4770      	bx	lr

0002e830 <am_timer01_isr>:
                                                .version = NS_TIMER_V1_0_0};

ns_timer_config_t *ns_timer_config[NS_TIMER_TEMPCO + 1];

void
am_timer01_isr(void) {
   2e830:	b570      	push	{r4, r5, r6, lr}
    ns_timers_e timerNum = ns_timer_config[1]->timer;
   2e832:	4c08      	ldr	r4, [pc, #32]	; (2e854 <am_timer01_isr+0x24>)
   2e834:	6863      	ldr	r3, [r4, #4]
   2e836:	791d      	ldrb	r5, [r3, #4]
    //
    // Clear the timer Interrupt (write to clear).
    //
    am_hal_timer_interrupt_clear(AM_HAL_TIMER_MASK(timerNum, AM_HAL_TIMER_COMPARE1));
   2e838:	2002      	movs	r0, #2
   2e83a:	006b      	lsls	r3, r5, #1
   2e83c:	4098      	lsls	r0, r3
   2e83e:	f004 fc31 	bl	330a4 <am_hal_timer_interrupt_clear>
    am_hal_timer_clear(timerNum);
   2e842:	4628      	mov	r0, r5
   2e844:	f004 fbe6 	bl	33014 <am_hal_timer_clear>

    ns_timer_config[1]->callback(ns_timer_config[1]);
   2e848:	6860      	ldr	r0, [r4, #4]
}
   2e84a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ns_timer_config[1]->callback(ns_timer_config[1]);
   2e84e:	68c3      	ldr	r3, [r0, #12]
   2e850:	4718      	bx	r3
   2e852:	bf00      	nop
   2e854:	10019814 	.word	0x10019814

0002e858 <am_timer02_isr>:

void
am_timer02_isr(void) {
   2e858:	b570      	push	{r4, r5, r6, lr}
    ns_timers_e timerNum = ns_timer_config[2]->timer;
   2e85a:	4c08      	ldr	r4, [pc, #32]	; (2e87c <am_timer02_isr+0x24>)
   2e85c:	68a3      	ldr	r3, [r4, #8]
   2e85e:	791d      	ldrb	r5, [r3, #4]
    //
    // Clear the timer Interrupt (write to clear).
    //
    am_hal_timer_interrupt_clear(AM_HAL_TIMER_MASK(timerNum, AM_HAL_TIMER_COMPARE1));
   2e860:	2002      	movs	r0, #2
   2e862:	006b      	lsls	r3, r5, #1
   2e864:	4098      	lsls	r0, r3
   2e866:	f004 fc1d 	bl	330a4 <am_hal_timer_interrupt_clear>
    am_hal_timer_clear(timerNum);
   2e86a:	4628      	mov	r0, r5
   2e86c:	f004 fbd2 	bl	33014 <am_hal_timer_clear>

    ns_timer_config[2]->callback(ns_timer_config[2]);
   2e870:	68a0      	ldr	r0, [r4, #8]
}
   2e872:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ns_timer_config[2]->callback(ns_timer_config[2]);
   2e876:	68c3      	ldr	r3, [r0, #12]
   2e878:	4718      	bx	r3
   2e87a:	bf00      	nop
   2e87c:	10019814 	.word	0x10019814

0002e880 <am_timer03_isr>:

void
am_timer03_isr(void) {
   2e880:	b570      	push	{r4, r5, r6, lr}
    ns_timers_e timerNum = ns_timer_config[3]->timer;
   2e882:	4c08      	ldr	r4, [pc, #32]	; (2e8a4 <am_timer03_isr+0x24>)
   2e884:	68e3      	ldr	r3, [r4, #12]
   2e886:	791d      	ldrb	r5, [r3, #4]
    //
    // Clear the timer Interrupt (write to clear).
    //
    am_hal_timer_interrupt_clear(AM_HAL_TIMER_MASK(timerNum, AM_HAL_TIMER_COMPARE1));
   2e888:	2002      	movs	r0, #2
   2e88a:	006b      	lsls	r3, r5, #1
   2e88c:	4098      	lsls	r0, r3
   2e88e:	f004 fc09 	bl	330a4 <am_hal_timer_interrupt_clear>
    am_hal_timer_clear(timerNum);
   2e892:	4628      	mov	r0, r5
   2e894:	f004 fbbe 	bl	33014 <am_hal_timer_clear>

    ns_timer_config[2]->callback(ns_timer_config[3]);
   2e898:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
}
   2e89c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ns_timer_config[2]->callback(ns_timer_config[3]);
   2e8a0:	68db      	ldr	r3, [r3, #12]
   2e8a2:	4718      	bx	r3
   2e8a4:	10019814 	.word	0x10019814

0002e8a8 <ns_core_initialized>:

extern bool
ns_core_initialized(void) {
    return g_ns_state.initialized;
   2e8a8:	4b01      	ldr	r3, [pc, #4]	; (2e8b0 <ns_core_initialized+0x8>)
}
   2e8aa:	7918      	ldrb	r0, [r3, #4]
   2e8ac:	4770      	bx	lr
   2e8ae:	bf00      	nop
   2e8b0:	10010b18 	.word	0x10010b18

0002e8b4 <ns_timer_init>:

uint32_t
ns_timer_init(ns_timer_config_t *cfg) {
   2e8b4:	b570      	push	{r4, r5, r6, lr}
   2e8b6:	b086      	sub	sp, #24
    am_hal_timer_config_t TimerConfig;
    uint32_t ui32Status = AM_HAL_STATUS_SUCCESS;

#ifndef NS_DISABLE_API_VALIDATION
    if (cfg == NULL) {
   2e8b8:	b350      	cbz	r0, 2e910 <ns_timer_init+0x5c>
        return NS_STATUS_INVALID_HANDLE;
    }

    if (ns_core_check_api(cfg->api, &ns_timer_oldest_supported_version,
   2e8ba:	4604      	mov	r4, r0
   2e8bc:	4a36      	ldr	r2, [pc, #216]	; (2e998 <ns_timer_init+0xe4>)
   2e8be:	4937      	ldr	r1, [pc, #220]	; (2e99c <ns_timer_init+0xe8>)
   2e8c0:	6800      	ldr	r0, [r0, #0]
   2e8c2:	f7f1 fe37 	bl	20534 <ns_core_check_api>
   2e8c6:	2800      	cmp	r0, #0
   2e8c8:	d15a      	bne.n	2e980 <ns_timer_init+0xcc>
                          &ns_timer_current_version)) {
        return NS_STATUS_INVALID_VERSION;
    }

    if (cfg->timer > NS_TIMER_TEMPCO) {
   2e8ca:	7923      	ldrb	r3, [r4, #4]
   2e8cc:	2b03      	cmp	r3, #3
   2e8ce:	d83a      	bhi.n	2e946 <ns_timer_init+0x92>
        return NS_STATUS_INVALID_CONFIG;
    }
    if ((cfg->enableInterrupt) && (cfg->callback == NULL)) {
   2e8d0:	7962      	ldrb	r2, [r4, #5]
   2e8d2:	b112      	cbz	r2, 2e8da <ns_timer_init+0x26>
   2e8d4:	68e2      	ldr	r2, [r4, #12]
   2e8d6:	2a00      	cmp	r2, #0
   2e8d8:	d035      	beq.n	2e946 <ns_timer_init+0x92>
        return NS_STATUS_INVALID_CONFIG;
    }
#endif

    ns_timer_config[cfg->timer] = cfg;
   2e8da:	4a31      	ldr	r2, [pc, #196]	; (2e9a0 <ns_timer_init+0xec>)

    //
    // Set the timer configuration
    // The default timer configuration is HFRC_DIV16, EDGE, compares=0, no trig.
    //
    am_hal_timer_default_config_set(&TimerConfig);
   2e8dc:	a801      	add	r0, sp, #4
    ns_timer_config[cfg->timer] = cfg;
   2e8de:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
    am_hal_timer_default_config_set(&TimerConfig);
   2e8e2:	f004 fb87 	bl	32ff4 <am_hal_timer_default_config_set>

    // modify the default
    if (cfg->timer == NS_TIMER_TEMPCO) {
   2e8e6:	7920      	ldrb	r0, [r4, #4]
   2e8e8:	2803      	cmp	r0, #3
        TimerConfig.eInputClock = AM_HAL_TIMER_CLOCK_HFRC_DIV16;
   2e8ea:	bf04      	itt	eq
   2e8ec:	2301      	moveq	r3, #1
   2e8ee:	f88d 3004 	strbeq.w	r3, [sp, #4]
    }

    if ((cfg->enableInterrupt)) {
   2e8f2:	7963      	ldrb	r3, [r4, #5]
   2e8f4:	b983      	cbnz	r3, 2e918 <ns_timer_init+0x64>
        TimerConfig.eFunction = AM_HAL_TIMER_FN_UPCOUNT;
        TimerConfig.ui32Compare1 = cfg->periodInMicroseconds / 6; // 6 ticks per uS
    }

    ui32Status = am_hal_timer_config(cfg->timer, &TimerConfig);
   2e8f6:	a901      	add	r1, sp, #4
   2e8f8:	f004 fb2c 	bl	32f54 <am_hal_timer_config>
    if (ui32Status != AM_HAL_STATUS_SUCCESS) {
   2e8fc:	4605      	mov	r5, r0
   2e8fe:	b9d0      	cbnz	r0, 2e936 <ns_timer_init+0x82>
    }

    //
    // Stop and clear the timer.
    //
    am_hal_timer_clear(cfg->timer);
   2e900:	7920      	ldrb	r0, [r4, #4]
   2e902:	f004 fb87 	bl	33014 <am_hal_timer_clear>

    if ((cfg->enableInterrupt)) {
   2e906:	7963      	ldrb	r3, [r4, #5]
   2e908:	bb0b      	cbnz	r3, 2e94e <ns_timer_init+0x9a>
            NVIC_SetPriority(TIMER2_IRQn, AM_IRQ_PRIORITY_DEFAULT);
            NVIC_EnableIRQ(TIMER2_IRQn);
        }
    }
    return ui32Status;
}
   2e90a:	4628      	mov	r0, r5
   2e90c:	b006      	add	sp, #24
   2e90e:	bd70      	pop	{r4, r5, r6, pc}
        return NS_STATUS_INVALID_HANDLE;
   2e910:	2501      	movs	r5, #1
}
   2e912:	4628      	mov	r0, r5
   2e914:	b006      	add	sp, #24
   2e916:	bd70      	pop	{r4, r5, r6, pc}
        TimerConfig.ui32Compare1 = cfg->periodInMicroseconds / 6; // 6 ticks per uS
   2e918:	68a3      	ldr	r3, [r4, #8]
   2e91a:	4922      	ldr	r1, [pc, #136]	; (2e9a4 <ns_timer_init+0xf0>)
        TimerConfig.eFunction = AM_HAL_TIMER_FN_UPCOUNT;
   2e91c:	2202      	movs	r2, #2
        TimerConfig.ui32Compare1 = cfg->periodInMicroseconds / 6; // 6 ticks per uS
   2e91e:	fba1 1303 	umull	r1, r3, r1, r3
   2e922:	40d3      	lsrs	r3, r2
    ui32Status = am_hal_timer_config(cfg->timer, &TimerConfig);
   2e924:	a901      	add	r1, sp, #4
        TimerConfig.eFunction = AM_HAL_TIMER_FN_UPCOUNT;
   2e926:	f88d 2005 	strb.w	r2, [sp, #5]
        TimerConfig.ui32Compare1 = cfg->periodInMicroseconds / 6; // 6 ticks per uS
   2e92a:	9305      	str	r3, [sp, #20]
    ui32Status = am_hal_timer_config(cfg->timer, &TimerConfig);
   2e92c:	f004 fb12 	bl	32f54 <am_hal_timer_config>
    if (ui32Status != AM_HAL_STATUS_SUCCESS) {
   2e930:	4605      	mov	r5, r0
   2e932:	2800      	cmp	r0, #0
   2e934:	d0e4      	beq.n	2e900 <ns_timer_init+0x4c>
        ns_lp_printf("Failed to configure TIMER%d, return value=%d\r\n", cfg->timer, ui32Status);
   2e936:	7921      	ldrb	r1, [r4, #4]
   2e938:	481b      	ldr	r0, [pc, #108]	; (2e9a8 <ns_timer_init+0xf4>)
   2e93a:	462a      	mov	r2, r5
   2e93c:	f7ff f804 	bl	2d948 <ns_lp_printf>
}
   2e940:	4628      	mov	r0, r5
   2e942:	b006      	add	sp, #24
   2e944:	bd70      	pop	{r4, r5, r6, pc}
        return NS_STATUS_INVALID_CONFIG;
   2e946:	2503      	movs	r5, #3
}
   2e948:	4628      	mov	r0, r5
   2e94a:	b006      	add	sp, #24
   2e94c:	bd70      	pop	{r4, r5, r6, pc}
        am_hal_timer_interrupt_clear(AM_HAL_TIMER_MASK(cfg->timer, AM_HAL_TIMER_COMPARE1));
   2e94e:	7920      	ldrb	r0, [r4, #4]
   2e950:	2602      	movs	r6, #2
   2e952:	0040      	lsls	r0, r0, #1
   2e954:	fa06 f000 	lsl.w	r0, r6, r0
   2e958:	f004 fba4 	bl	330a4 <am_hal_timer_interrupt_clear>
        am_hal_timer_interrupt_enable(AM_HAL_TIMER_MASK(cfg->timer, AM_HAL_TIMER_COMPARE1));
   2e95c:	7920      	ldrb	r0, [r4, #4]
   2e95e:	0040      	lsls	r0, r0, #1
   2e960:	fa06 f000 	lsl.w	r0, r6, r0
   2e964:	f004 fb94 	bl	33090 <am_hal_timer_interrupt_enable>
        if (cfg->timer == NS_TIMER_INTERRUPT) {
   2e968:	7923      	ldrb	r3, [r4, #4]
   2e96a:	2b01      	cmp	r3, #1
   2e96c:	d00c      	beq.n	2e988 <ns_timer_init+0xd4>
        } else if (cfg->timer == NS_TIMER_USB) {
   2e96e:	2b02      	cmp	r3, #2
   2e970:	d1cb      	bne.n	2e90a <ns_timer_init+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2e972:	4b0e      	ldr	r3, [pc, #56]	; (2e9ac <ns_timer_init+0xf8>)
   2e974:	2280      	movs	r2, #128	; 0x80
   2e976:	f883 2345 	strb.w	r2, [r3, #837]	; 0x345
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2e97a:	2220      	movs	r2, #32
   2e97c:	609a      	str	r2, [r3, #8]
    __COMPILER_BARRIER();
   2e97e:	e7c4      	b.n	2e90a <ns_timer_init+0x56>
        return NS_STATUS_INVALID_VERSION;
   2e980:	2502      	movs	r5, #2
}
   2e982:	4628      	mov	r0, r5
   2e984:	b006      	add	sp, #24
   2e986:	bd70      	pop	{r4, r5, r6, pc}
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2e988:	4b08      	ldr	r3, [pc, #32]	; (2e9ac <ns_timer_init+0xf8>)
   2e98a:	2210      	movs	r2, #16
   2e98c:	609a      	str	r2, [r3, #8]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2e98e:	2280      	movs	r2, #128	; 0x80
   2e990:	f883 2344 	strb.w	r2, [r3, #836]	; 0x344
   2e994:	e7b9      	b.n	2e90a <ns_timer_init+0x56>
   2e996:	bf00      	nop
   2e998:	00042350 	.word	0x00042350
   2e99c:	0004235c 	.word	0x0004235c
   2e9a0:	10019814 	.word	0x10019814
   2e9a4:	aaaaaaab 	.word	0xaaaaaaab
   2e9a8:	00042314 	.word	0x00042314
   2e9ac:	e000e100 	.word	0xe000e100

0002e9b0 <ns_us_ticker_read>:

uint32_t
ns_us_ticker_read(ns_timer_config_t *cfg) {
#ifndef NS_DISABLE_API_VALIDATION
    if (cfg == NULL) {
   2e9b0:	b140      	cbz	r0, 2e9c4 <ns_us_ticker_read+0x14>
ns_us_ticker_read(ns_timer_config_t *cfg) {
   2e9b2:	b508      	push	{r3, lr}
        return 0xDEADBEEF;
    }
#endif
    return am_hal_timer_read(cfg->timer) / 6; // 6 ticks per uS
   2e9b4:	7900      	ldrb	r0, [r0, #4]
   2e9b6:	f004 fb57 	bl	33068 <am_hal_timer_read>
   2e9ba:	4b03      	ldr	r3, [pc, #12]	; (2e9c8 <ns_us_ticker_read+0x18>)
   2e9bc:	fba3 3000 	umull	r3, r0, r3, r0
   2e9c0:	0880      	lsrs	r0, r0, #2
}
   2e9c2:	bd08      	pop	{r3, pc}
        return 0xDEADBEEF;
   2e9c4:	4801      	ldr	r0, [pc, #4]	; (2e9cc <ns_us_ticker_read+0x1c>)
}
   2e9c6:	4770      	bx	lr
   2e9c8:	aaaaaaab 	.word	0xaaaaaaab
   2e9cc:	deadbeef 	.word	0xdeadbeef

0002e9d0 <am_util_delay_ms>:
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
#if defined(AM_PART_APOLLO4_API)
    am_hal_delay_us( ui32MilliSeconds * 1000);
   2e9d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2e9d4:	fb03 f000 	mul.w	r0, r3, r0
   2e9d8:	f001 bd20 	b.w	3041c <am_hal_delay_us>

0002e9dc <am_util_delay_us>:
   2e9dc:	f001 bd1e 	b.w	3041c <am_hal_delay_us>

0002e9e0 <divu64_10>:
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
   2e9e0:	2900      	cmp	r1, #0
   2e9e2:	d047      	beq.n	2ea74 <divu64_10+0x94>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
   2e9e4:	0843      	lsrs	r3, r0, #1
   2e9e6:	0882      	lsrs	r2, r0, #2
   2e9e8:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
   2e9ec:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
   2e9f0:	189b      	adds	r3, r3, r2
   2e9f2:	ea4f 0291 	mov.w	r2, r1, lsr #2
   2e9f6:	eb42 0251 	adc.w	r2, r2, r1, lsr #1
        q64 += (q64 >> 4);
   2e9fa:	ea4f 1c13 	mov.w	ip, r3, lsr #4
   2e9fe:	ea4c 7c02 	orr.w	ip, ip, r2, lsl #28
   2ea02:	eb13 030c 	adds.w	r3, r3, ip
   2ea06:	eb42 1212 	adc.w	r2, r2, r2, lsr #4
        q64 += (q64 >> 8);
   2ea0a:	ea4f 2c13 	mov.w	ip, r3, lsr #8
   2ea0e:	ea4c 6c02 	orr.w	ip, ip, r2, lsl #24
   2ea12:	eb13 030c 	adds.w	r3, r3, ip
   2ea16:	eb42 2212 	adc.w	r2, r2, r2, lsr #8
        q64 += (q64 >> 16);
   2ea1a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   2ea1e:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
   2ea22:	eb13 030c 	adds.w	r3, r3, ip
   2ea26:	eb42 4212 	adc.w	r2, r2, r2, lsr #16
        q64 += (q64 >> 32);
   2ea2a:	189b      	adds	r3, r3, r2
   2ea2c:	f142 0200 	adc.w	r2, r2, #0
        q64 >>= 3;
   2ea30:	08db      	lsrs	r3, r3, #3
   2ea32:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   2ea36:	08d2      	lsrs	r2, r2, #3
        r64 = ui64Val - q64*10;
        return q64 + ((r64 + 6) >> 4);
   2ea38:	3006      	adds	r0, #6
{
   2ea3a:	b500      	push	{lr}
        r64 = ui64Val - q64*10;
   2ea3c:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   2ea40:	ea4f 0e82 	mov.w	lr, r2, lsl #2
        return q64 + ((r64 + 6) >> 4);
   2ea44:	f141 0100 	adc.w	r1, r1, #0
        r64 = ui64Val - q64*10;
   2ea48:	ea4e 7e93 	orr.w	lr, lr, r3, lsr #30
   2ea4c:	eb1c 0c03 	adds.w	ip, ip, r3
   2ea50:	eb42 0e0e 	adc.w	lr, r2, lr
   2ea54:	eb1c 0c0c 	adds.w	ip, ip, ip
   2ea58:	eb4e 0e0e 	adc.w	lr, lr, lr
        return q64 + ((r64 + 6) >> 4);
   2ea5c:	ebb0 000c 	subs.w	r0, r0, ip
   2ea60:	eb61 010e 	sbc.w	r1, r1, lr
   2ea64:	0900      	lsrs	r0, r0, #4
   2ea66:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
   2ea6a:	18c0      	adds	r0, r0, r3
   2ea6c:	eb42 1111 	adc.w	r1, r2, r1, lsr #4
        q32 += (q32 >> 16);
        q32 >>= 3;
        r32 = ui32Val - q32*10;
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    }
}
   2ea70:	f85d fb04 	ldr.w	pc, [sp], #4
        q32 = (ui32Val>>1) + (ui32Val>>2);
   2ea74:	0883      	lsrs	r3, r0, #2
   2ea76:	eb03 0350 	add.w	r3, r3, r0, lsr #1
        q32 += (q32 >> 4);
   2ea7a:	eb03 1313 	add.w	r3, r3, r3, lsr #4
        q32 += (q32 >> 8);
   2ea7e:	eb03 2313 	add.w	r3, r3, r3, lsr #8
        q32 += (q32 >> 16);
   2ea82:	eb03 4313 	add.w	r3, r3, r3, lsr #16
        q32 >>= 3;
   2ea86:	08db      	lsrs	r3, r3, #3
        r32 = ui32Val - q32*10;
   2ea88:	eb03 0283 	add.w	r2, r3, r3, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
   2ea8c:	3006      	adds	r0, #6
   2ea8e:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
   2ea92:	eb03 1010 	add.w	r0, r3, r0, lsr #4
}
   2ea96:	4770      	bx	lr

0002ea98 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
   2ea98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2ea9c:	b089      	sub	sp, #36	; 0x24
   2ea9e:	ad01      	add	r5, sp, #4
        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);

        tbuf[ix++] = uMod + '0';
   2eaa0:	46ae      	mov	lr, r5
   2eaa2:	2401      	movs	r4, #1
   2eaa4:	e042      	b.n	2eb2c <uint64_to_str+0x94>
        q64 = (ui64Val>>1) + (ui64Val>>2);
   2eaa6:	19db      	adds	r3, r3, r7
   2eaa8:	eb46 0651 	adc.w	r6, r6, r1, lsr #1
        q64 += (q64 >> 4);
   2eaac:	091f      	lsrs	r7, r3, #4
   2eaae:	ea47 7706 	orr.w	r7, r7, r6, lsl #28
   2eab2:	19db      	adds	r3, r3, r7
   2eab4:	eb46 1616 	adc.w	r6, r6, r6, lsr #4
        q64 += (q64 >> 8);
   2eab8:	0a1f      	lsrs	r7, r3, #8
   2eaba:	ea47 6706 	orr.w	r7, r7, r6, lsl #24
   2eabe:	19db      	adds	r3, r3, r7
   2eac0:	eb46 2616 	adc.w	r6, r6, r6, lsr #8
        q64 += (q64 >> 16);
   2eac4:	0c1f      	lsrs	r7, r3, #16
   2eac6:	ea47 4706 	orr.w	r7, r7, r6, lsl #16
   2eaca:	19db      	adds	r3, r3, r7
   2eacc:	eb46 4616 	adc.w	r6, r6, r6, lsr #16
        q64 += (q64 >> 32);
   2ead0:	199b      	adds	r3, r3, r6
   2ead2:	f146 0600 	adc.w	r6, r6, #0
        q64 >>= 3;
   2ead6:	08db      	lsrs	r3, r3, #3
   2ead8:	ea43 7346 	orr.w	r3, r3, r6, lsl #29
   2eadc:	08f6      	lsrs	r6, r6, #3
        return q64 + ((r64 + 6) >> 4);
   2eade:	1d87      	adds	r7, r0, #6
        r64 = ui64Val - q64*10;
   2eae0:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   2eae4:	ea4f 0886 	mov.w	r8, r6, lsl #2
        return q64 + ((r64 + 6) >> 4);
   2eae8:	f141 0100 	adc.w	r1, r1, #0
        r64 = ui64Val - q64*10;
   2eaec:	ea48 7893 	orr.w	r8, r8, r3, lsr #30
   2eaf0:	eb1c 0c03 	adds.w	ip, ip, r3
   2eaf4:	eb46 0808 	adc.w	r8, r6, r8
   2eaf8:	eb1c 0c0c 	adds.w	ip, ip, ip
   2eafc:	eb48 0808 	adc.w	r8, r8, r8
        return q64 + ((r64 + 6) >> 4);
   2eb00:	ebb7 070c 	subs.w	r7, r7, ip
   2eb04:	eb61 0108 	sbc.w	r1, r1, r8
   2eb08:	093f      	lsrs	r7, r7, #4
   2eb0a:	ea47 7701 	orr.w	r7, r7, r1, lsl #28
   2eb0e:	18fb      	adds	r3, r7, r3
        uMod = ui64Val - (u64Tmp * 10);
   2eb10:	eb03 0783 	add.w	r7, r3, r3, lsl #2
   2eb14:	eba0 0047 	sub.w	r0, r0, r7, lsl #1
        tbuf[ix++] = uMod + '0';
   2eb18:	f100 0030 	add.w	r0, r0, #48	; 0x30
   2eb1c:	f88e 0000 	strb.w	r0, [lr]
   2eb20:	eb46 1111 	adc.w	r1, r6, r1, lsr #4
   2eb24:	4618      	mov	r0, r3
   2eb26:	3401      	adds	r4, #1
   2eb28:	f10e 0e01 	add.w	lr, lr, #1
        q32 = (ui32Val>>1) + (ui32Val>>2);
   2eb2c:	ea4f 0c90 	mov.w	ip, r0, lsr #2
   2eb30:	eb0c 0c50 	add.w	ip, ip, r0, lsr #1
        q32 += (q32 >> 4);
   2eb34:	eb0c 1c1c 	add.w	ip, ip, ip, lsr #4
        q32 += (q32 >> 8);
   2eb38:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
        q32 += (q32 >> 16);
   2eb3c:	eb0c 4c1c 	add.w	ip, ip, ip, lsr #16
        q32 >>= 3;
   2eb40:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
        r32 = ui32Val - q32*10;
   2eb44:	eb0c 098c 	add.w	r9, ip, ip, lsl #2
        q64 = (ui64Val>>1) + (ui64Val>>2);
   2eb48:	0843      	lsrs	r3, r0, #1
   2eb4a:	0887      	lsrs	r7, r0, #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
   2eb4c:	f100 0806 	add.w	r8, r0, #6
   2eb50:	eba8 0849 	sub.w	r8, r8, r9, lsl #1
        q64 = (ui64Val>>1) + (ui64Val>>2);
   2eb54:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
   2eb58:	ea47 7781 	orr.w	r7, r7, r1, lsl #30
   2eb5c:	088e      	lsrs	r6, r1, #2
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
   2eb5e:	4681      	mov	r9, r0
    if ( ui64Val >> 32 )
   2eb60:	2900      	cmp	r1, #0
   2eb62:	d1a0      	bne.n	2eaa6 <uint64_to_str+0xe>
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
   2eb64:	eb0c 1018 	add.w	r0, ip, r8, lsr #4
        uMod = ui64Val - (u64Tmp * 10);
   2eb68:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   2eb6c:	eba9 0943 	sub.w	r9, r9, r3, lsl #1
        tbuf[ix++] = uMod + '0';
   2eb70:	f109 0930 	add.w	r9, r9, #48	; 0x30
   2eb74:	f88e 9000 	strb.w	r9, [lr]
        ui64Val = u64Tmp;
    } while ( ui64Val );
   2eb78:	2800      	cmp	r0, #0
   2eb7a:	d1d4      	bne.n	2eb26 <uint64_to_str+0x8e>
    iNumDig = ix;

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
   2eb7c:	b14a      	cbz	r2, 2eb92 <uint64_to_str+0xfa>
    {
        while ( ix-- )
   2eb7e:	192b      	adds	r3, r5, r4
   2eb80:	1e51      	subs	r1, r2, #1
        {
            *pcBuf++ = tbuf[ix];
   2eb82:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   2eb86:	f801 0f01 	strb.w	r0, [r1, #1]!
        while ( ix-- )
   2eb8a:	429d      	cmp	r5, r3
   2eb8c:	d1f9      	bne.n	2eb82 <uint64_to_str+0xea>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
   2eb8e:	2300      	movs	r3, #0
   2eb90:	5513      	strb	r3, [r2, r4]
    }

    return iNumDig;
}
   2eb92:	4620      	mov	r0, r4
   2eb94:	b009      	add	sp, #36	; 0x24
   2eb96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2eb9a:	bf00      	nop

0002eb9c <am_util_stdio_printf_init>:
    g_pfnCharPrint = pfnCharPrint;
   2eb9c:	4b01      	ldr	r3, [pc, #4]	; (2eba4 <am_util_stdio_printf_init+0x8>)
   2eb9e:	6018      	str	r0, [r3, #0]
}
   2eba0:	4770      	bx	lr
   2eba2:	bf00      	nop
   2eba4:	10019828 	.word	0x10019828

0002eba8 <am_util_stdio_vsprintf>:
// Format data into string. (va_list implementation)
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
   2eba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
   2ebac:	780b      	ldrb	r3, [r1, #0]
{
   2ebae:	b089      	sub	sp, #36	; 0x24
   2ebb0:	4605      	mov	r5, r0
    while ( *pcFmt != 0x0 )
   2ebb2:	2b00      	cmp	r3, #0
   2ebb4:	f000 8097 	beq.w	2ece6 <am_util_stdio_vsprintf+0x13e>
   2ebb8:	4617      	mov	r7, r2
    uint32_t ui32NumChars, ui32CharCnt = 0;
   2ebba:	2600      	movs	r6, #0
   2ebbc:	e00b      	b.n	2ebd6 <am_util_stdio_vsprintf+0x2e>
        if ( *pcFmt != '%' )
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
   2ebbe:	b125      	cbz	r5, 2ebca <am_util_stdio_vsprintf+0x22>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
   2ebc0:	2b0a      	cmp	r3, #10
   2ebc2:	f000 8085 	beq.w	2ecd0 <am_util_stdio_vsprintf+0x128>
                {
                    *pcBuf++ = '\r';
                    ++ui32CharCnt;
                }
                *pcBuf++ = *pcFmt;
   2ebc6:	f805 3b01 	strb.w	r3, [r5], #1
            }

            ++pcFmt;
   2ebca:	3101      	adds	r1, #1
            ++ui32CharCnt;
   2ebcc:	3601      	adds	r6, #1
    while ( *pcFmt != 0x0 )
   2ebce:	780b      	ldrb	r3, [r1, #0]
   2ebd0:	2b00      	cmp	r3, #0
   2ebd2:	f000 8089 	beq.w	2ece8 <am_util_stdio_vsprintf+0x140>
        if ( *pcFmt != '%' )
   2ebd6:	2b25      	cmp	r3, #37	; 0x25
   2ebd8:	d1f1      	bne.n	2ebbe <am_util_stdio_vsprintf+0x16>
        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';

        if ( *pcFmt == '0' )
   2ebda:	784b      	ldrb	r3, [r1, #1]
   2ebdc:	2b30      	cmp	r3, #48	; 0x30
   2ebde:	f000 8098 	beq.w	2ed12 <am_util_stdio_vsprintf+0x16a>
        ++pcFmt;
   2ebe2:	f101 0e01 	add.w	lr, r1, #1
        ui8PadChar = ' ';
   2ebe6:	2220      	movs	r2, #32
    if ( *pcStr == '-')
   2ebe8:	2b2d      	cmp	r3, #45	; 0x2d
   2ebea:	f000 8084 	beq.w	2ecf6 <am_util_stdio_vsprintf+0x14e>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   2ebee:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    uint32_t ui32Val = 0, uCnt = 0;
   2ebf2:	f04f 0c00 	mov.w	ip, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   2ebf6:	2909      	cmp	r1, #9
   2ebf8:	4674      	mov	r4, lr
    bool bNeg = false;
   2ebfa:	46e0      	mov	r8, ip
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   2ebfc:	f200 8087 	bhi.w	2ed0e <am_util_stdio_vsprintf+0x166>
   2ec00:	f10c 0c01 	add.w	ip, ip, #1
   2ec04:	ebac 0c04 	sub.w	ip, ip, r4
   2ec08:	2100      	movs	r1, #0
        ui32Val *= 10;
   2ec0a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
        ui32Val += (*pcStr - '0');
   2ec0e:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   2ec12:	eb04 090c 	add.w	r9, r4, ip
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   2ec16:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   2ec1a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2ec1e:	2809      	cmp	r0, #9
        ui32Val += (*pcStr - '0');
   2ec20:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   2ec24:	d9f1      	bls.n	2ec0a <am_util_stdio_vsprintf+0x62>
        pcFmt += ui32NumChars;

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
   2ec26:	f81e 3009 	ldrb.w	r3, [lr, r9]
        pcFmt += ui32NumChars;
   2ec2a:	eb0e 0409 	add.w	r4, lr, r9
    return bNeg ? -ui32Val : ui32Val;
   2ec2e:	f1b8 0f00 	cmp.w	r8, #0
   2ec32:	d000      	beq.n	2ec36 <am_util_stdio_vsprintf+0x8e>
   2ec34:	4249      	negs	r1, r1
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
   2ec36:	2b73      	cmp	r3, #115	; 0x73
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
   2ec38:	4608      	mov	r0, r1
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
   2ec3a:	f000 8125 	beq.w	2ee88 <am_util_stdio_vsprintf+0x2e0>
   2ec3e:	ea81 78e1 	eor.w	r8, r1, r1, asr #31
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
   2ec42:	2b2e      	cmp	r3, #46	; 0x2e
   2ec44:	eba8 78e1 	sub.w	r8, r8, r1, asr #31
   2ec48:	f000 80f2 	beq.w	2ee30 <am_util_stdio_vsprintf+0x288>
        iPrecision = 6;             // printf() default precision for %f is 6
   2ec4c:	f04f 0906 	mov.w	r9, #6
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
   2ec50:	2b6c      	cmp	r3, #108	; 0x6c
   2ec52:	d104      	bne.n	2ec5e <am_util_stdio_vsprintf+0xb6>
        {
            pcFmt++;
            if ( *pcFmt == 'l' )    // "ll" (long long)
   2ec54:	7863      	ldrb	r3, [r4, #1]
   2ec56:	2b6c      	cmp	r3, #108	; 0x6c
   2ec58:	f000 8163 	beq.w	2ef22 <am_util_stdio_vsprintf+0x37a>
            pcFmt++;
   2ec5c:	3401      	adds	r4, #1
                pcFmt++;
                bLongLong = true;
            }
        }

        switch ( *pcFmt )
   2ec5e:	f1a3 0046 	sub.w	r0, r3, #70	; 0x46
   2ec62:	2832      	cmp	r0, #50	; 0x32
   2ec64:	d85a      	bhi.n	2ed1c <am_util_stdio_vsprintf+0x174>
   2ec66:	e8df f010 	tbh	[pc, r0, lsl #1]
   2ec6a:	005f      	.short	0x005f
   2ec6c:	00590059 	.word	0x00590059
   2ec70:	00590059 	.word	0x00590059
   2ec74:	00590059 	.word	0x00590059
   2ec78:	00590059 	.word	0x00590059
   2ec7c:	00590059 	.word	0x00590059
   2ec80:	00590059 	.word	0x00590059
   2ec84:	00590059 	.word	0x00590059
   2ec88:	00590059 	.word	0x00590059
   2ec8c:	01dc0059 	.word	0x01dc0059
   2ec90:	00590059 	.word	0x00590059
   2ec94:	00590059 	.word	0x00590059
   2ec98:	00590059 	.word	0x00590059
   2ec9c:	00590059 	.word	0x00590059
   2eca0:	00590059 	.word	0x00590059
   2eca4:	00b400c9 	.word	0x00b400c9
   2eca8:	005f0059 	.word	0x005f0059
   2ecac:	00590059 	.word	0x00590059
   2ecb0:	005900b4 	.word	0x005900b4
   2ecb4:	00590059 	.word	0x00590059
   2ecb8:	00590059 	.word	0x00590059
   2ecbc:	00590059 	.word	0x00590059
   2ecc0:	00590059 	.word	0x00590059
   2ecc4:	0059010e 	.word	0x0059010e
   2ecc8:	005900d2 	.word	0x005900d2
   2eccc:	02fb0059 	.word	0x02fb0059
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
   2ecd0:	4acc      	ldr	r2, [pc, #816]	; (2f004 <am_util_stdio_vsprintf+0x45c>)
   2ecd2:	7812      	ldrb	r2, [r2, #0]
   2ecd4:	2a00      	cmp	r2, #0
   2ecd6:	f43f af76 	beq.w	2ebc6 <am_util_stdio_vsprintf+0x1e>
                    *pcBuf++ = '\r';
   2ecda:	230d      	movs	r3, #13
   2ecdc:	f805 3b01 	strb.w	r3, [r5], #1
                    ++ui32CharCnt;
   2ece0:	3601      	adds	r6, #1
                *pcBuf++ = *pcFmt;
   2ece2:	780b      	ldrb	r3, [r1, #0]
   2ece4:	e76f      	b.n	2ebc6 <am_util_stdio_vsprintf+0x1e>
    uint32_t ui32NumChars, ui32CharCnt = 0;
   2ece6:	461e      	mov	r6, r3
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
   2ece8:	b10d      	cbz	r5, 2ecee <am_util_stdio_vsprintf+0x146>
    {
        *pcBuf = 0x0;
   2ecea:	2300      	movs	r3, #0
   2ecec:	702b      	strb	r3, [r5, #0]
    }

    return (ui32CharCnt);
}
   2ecee:	4630      	mov	r0, r6
   2ecf0:	b009      	add	sp, #36	; 0x24
   2ecf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   2ecf6:	f89e 3001 	ldrb.w	r3, [lr, #1]
   2ecfa:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
        uCnt++;
   2ecfe:	f04f 0c01 	mov.w	ip, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   2ed02:	2909      	cmp	r1, #9
        pcStr++;
   2ed04:	eb0e 040c 	add.w	r4, lr, ip
        bNeg = true;
   2ed08:	46e0      	mov	r8, ip
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   2ed0a:	f67f af79 	bls.w	2ec00 <am_util_stdio_vsprintf+0x58>
   2ed0e:	2100      	movs	r1, #0
   2ed10:	e78d      	b.n	2ec2e <am_util_stdio_vsprintf+0x86>
            ui8PadChar = '0';
   2ed12:	461a      	mov	r2, r3
            ++pcFmt;
   2ed14:	f101 0e02 	add.w	lr, r1, #2
    if ( *pcStr == '-')
   2ed18:	788b      	ldrb	r3, [r1, #2]
   2ed1a:	e765      	b.n	2ebe8 <am_util_stdio_vsprintf+0x40>
                if ( pcBuf )
   2ed1c:	b10d      	cbz	r5, 2ed22 <am_util_stdio_vsprintf+0x17a>
                    *pcBuf++ = *pcFmt;
   2ed1e:	f805 3b01 	strb.w	r3, [r5], #1
                ++ui32CharCnt;
   2ed22:	3601      	adds	r6, #1
        ++pcFmt;
   2ed24:	1c61      	adds	r1, r4, #1
   2ed26:	e752      	b.n	2ebce <am_util_stdio_vsprintf+0x26>
                if ( pcBuf )
   2ed28:	2d00      	cmp	r5, #0
   2ed2a:	d0fb      	beq.n	2ed24 <am_util_stdio_vsprintf+0x17c>
                    float fValue = va_arg(pArgs, double);
   2ed2c:	3707      	adds	r7, #7
   2ed2e:	f027 0707 	bic.w	r7, r7, #7
   2ed32:	e8f7 0102 	ldrd	r0, r1, [r7], #8
   2ed36:	f7ea f9c5 	bl	190c4 <__aeabi_d2f>
   2ed3a:	ee07 0a90 	vmov	s15, r0
    if (fValue == 0.0f)
   2ed3e:	eef5 7a40 	vcmp.f32	s15, #0.0
                    *(uint32_t*)pcBuf = 20;
   2ed42:	2314      	movs	r3, #20
    if (fValue == 0.0f)
   2ed44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    *(uint32_t*)pcBuf = 20;
   2ed48:	602b      	str	r3, [r5, #0]
    if (fValue == 0.0f)
   2ed4a:	f000 835d 	beq.w	2f408 <am_util_stdio_vsprintf+0x860>
    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
   2ed4e:	f3c0 51c7 	ubfx	r1, r0, #23, #8
   2ed52:	f1a1 027f 	sub.w	r2, r1, #127	; 0x7f
    unFloatValue.F = fValue;
   2ed56:	4603      	mov	r3, r0
    if (iExp2 >= 31)
   2ed58:	2a1e      	cmp	r2, #30
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
   2ed5a:	f3c0 0016 	ubfx	r0, r0, #0, #23
   2ed5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    if (iExp2 >= 31)
   2ed62:	f300 837c 	bgt.w	2f45e <am_util_stdio_vsprintf+0x8b6>
    else if (iExp2 < -23)
   2ed66:	f112 0f17 	cmn.w	r2, #23
   2ed6a:	f2c0 8374 	blt.w	2f456 <am_util_stdio_vsprintf+0x8ae>
    else if (iExp2 >= 23)
   2ed6e:	2a16      	cmp	r2, #22
   2ed70:	f340 8246 	ble.w	2f200 <am_util_stdio_vsprintf+0x658>
        i32IntPart = i32Significand << (iExp2 - 23);
   2ed74:	3996      	subs	r1, #150	; 0x96
    if (unFloatValue.I32 < 0)
   2ed76:	2b00      	cmp	r3, #0
        i32IntPart = i32Significand << (iExp2 - 23);
   2ed78:	fa00 f001 	lsl.w	r0, r0, r1
    if (unFloatValue.I32 < 0)
   2ed7c:	f2c0 8287 	blt.w	2f28e <am_util_stdio_vsprintf+0x6e6>
   2ed80:	462b      	mov	r3, r5
    i32FracPart = 0;
   2ed82:	f04f 0800 	mov.w	r8, #0
    if (i32IntPart == 0)
   2ed86:	2800      	cmp	r0, #0
   2ed88:	f000 827c 	beq.w	2f284 <am_util_stdio_vsprintf+0x6dc>
            *pcBuf++ = '-';
   2ed8c:	461a      	mov	r2, r3
   2ed8e:	bfde      	ittt	le
   2ed90:	232d      	movle	r3, #45	; 0x2d
   2ed92:	f802 3b01 	strble.w	r3, [r2], #1
            uint64_to_str(-i32IntPart, pcBuf);
   2ed96:	4240      	negle	r0, r0
   2ed98:	17c1      	asrs	r1, r0, #31
   2ed9a:	f7ff fe7d 	bl	2ea98 <uint64_to_str>
        while (*pcBuf)    // Get to end of new string
   2ed9e:	7813      	ldrb	r3, [r2, #0]
   2eda0:	b11b      	cbz	r3, 2edaa <am_util_stdio_vsprintf+0x202>
   2eda2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   2eda6:	2b00      	cmp	r3, #0
   2eda8:	d1fb      	bne.n	2eda2 <am_util_stdio_vsprintf+0x1fa>
    *pcBuf++ = '.';
   2edaa:	232e      	movs	r3, #46	; 0x2e
   2edac:	7013      	strb	r3, [r2, #0]
    if (i32FracPart == 0)
   2edae:	f1b8 0f00 	cmp.w	r8, #0
   2edb2:	f040 8291 	bne.w	2f2d8 <am_util_stdio_vsprintf+0x730>
        *pcBuf++ = '0';
   2edb6:	1c90      	adds	r0, r2, #2
   2edb8:	2330      	movs	r3, #48	; 0x30
   2edba:	7053      	strb	r3, [r2, #1]
    return (pcBuf - pcBufInitial);
   2edbc:	1b41      	subs	r1, r0, r5
    *pcBuf = 0x00;
   2edbe:	2300      	movs	r3, #0
                    if ( iVal < 0 )
   2edc0:	4299      	cmp	r1, r3
    *pcBuf = 0x00;
   2edc2:	7003      	strb	r3, [r0, #0]
                    if ( iVal < 0 )
   2edc4:	f2c0 82c3 	blt.w	2f34e <am_util_stdio_vsprintf+0x7a6>
                    ui32CharCnt += iVal;
   2edc8:	460b      	mov	r3, r1
   2edca:	441e      	add	r6, r3
                    pcBuf += iVal;
   2edcc:	441d      	add	r5, r3
        ++pcFmt;
   2edce:	1c61      	adds	r1, r4, #1
   2edd0:	e6fd      	b.n	2ebce <am_util_stdio_vsprintf+0x26>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
   2edd2:	f857 9b04 	ldr.w	r9, [r7], #4
   2edd6:	ea4f 7ae9 	mov.w	sl, r9, asr #31
                if ( i64Val < 0 )
   2edda:	f1ba 0f00 	cmp.w	sl, #0
   2edde:	f2c0 8113 	blt.w	2f008 <am_util_stdio_vsprintf+0x460>
                if ( iWidth )
   2ede2:	2900      	cmp	r1, #0
   2ede4:	f040 82bd 	bne.w	2f362 <am_util_stdio_vsprintf+0x7ba>
                iVal = uint64_to_str(ui64Val, pcBuf);
   2ede8:	4648      	mov	r0, r9
   2edea:	4651      	mov	r1, sl
   2edec:	462a      	mov	r2, r5
   2edee:	f7ff fe53 	bl	2ea98 <uint64_to_str>
                if ( pcBuf )
   2edf2:	b9d5      	cbnz	r5, 2ee2a <am_util_stdio_vsprintf+0x282>
                ui32CharCnt += iVal;
   2edf4:	2500      	movs	r5, #0
   2edf6:	4406      	add	r6, r0
        ++pcFmt;
   2edf8:	1c61      	adds	r1, r4, #1
   2edfa:	e6e8      	b.n	2ebce <am_util_stdio_vsprintf+0x26>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
   2edfc:	1d3b      	adds	r3, r7, #4
                if ( pcBuf )
   2edfe:	b115      	cbz	r5, 2ee06 <am_util_stdio_vsprintf+0x25e>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
   2ee00:	683a      	ldr	r2, [r7, #0]
   2ee02:	f805 2b01 	strb.w	r2, [r5], #1
                ++ui32CharCnt;
   2ee06:	3601      	adds	r6, #1
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
   2ee08:	461f      	mov	r7, r3
        ++pcFmt;
   2ee0a:	1c61      	adds	r1, r4, #1
   2ee0c:	e6df      	b.n	2ebce <am_util_stdio_vsprintf+0x26>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   2ee0e:	f857 ab04 	ldr.w	sl, [r7], #4
   2ee12:	f04f 0900 	mov.w	r9, #0
                if ( iWidth )
   2ee16:	2900      	cmp	r1, #0
   2ee18:	f040 81b0 	bne.w	2f17c <am_util_stdio_vsprintf+0x5d4>
                iVal = uint64_to_str(ui64Val, pcBuf);
   2ee1c:	4650      	mov	r0, sl
   2ee1e:	4649      	mov	r1, r9
   2ee20:	462a      	mov	r2, r5
   2ee22:	f7ff fe39 	bl	2ea98 <uint64_to_str>
                if ( pcBuf )
   2ee26:	2d00      	cmp	r5, #0
   2ee28:	d0e4      	beq.n	2edf4 <am_util_stdio_vsprintf+0x24c>
                    pcBuf += iVal;
   2ee2a:	4405      	add	r5, r0
                ui32CharCnt += iVal;
   2ee2c:	4406      	add	r6, r0
                break;
   2ee2e:	e7e3      	b.n	2edf8 <am_util_stdio_vsprintf+0x250>
    if ( *pcStr == '-')
   2ee30:	7860      	ldrb	r0, [r4, #1]
   2ee32:	282d      	cmp	r0, #45	; 0x2d
            ++pcFmt;
   2ee34:	f104 0c01 	add.w	ip, r4, #1
    if ( *pcStr == '-')
   2ee38:	f000 8195 	beq.w	2f166 <am_util_stdio_vsprintf+0x5be>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   2ee3c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   2ee40:	2b09      	cmp	r3, #9
   2ee42:	f200 82ea 	bhi.w	2f41a <am_util_stdio_vsprintf+0x872>
    uint32_t ui32Val = 0, uCnt = 0;
   2ee46:	2300      	movs	r3, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   2ee48:	4664      	mov	r4, ip
    bool bNeg = false;
   2ee4a:	4699      	mov	r9, r3
   2ee4c:	3301      	adds	r3, #1
   2ee4e:	eba3 0e04 	sub.w	lr, r3, r4
   2ee52:	2300      	movs	r3, #0
        ui32Val *= 10;
   2ee54:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        ui32Val += (*pcStr - '0');
   2ee58:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   2ee5c:	eb04 0a0e 	add.w	sl, r4, lr
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   2ee60:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   2ee64:	f1a0 0b30 	sub.w	fp, r0, #48	; 0x30
   2ee68:	f1bb 0f09 	cmp.w	fp, #9
        ui32Val += (*pcStr - '0');
   2ee6c:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   2ee70:	d9f0      	bls.n	2ee54 <am_util_stdio_vsprintf+0x2ac>
    return bNeg ? -ui32Val : ui32Val;
   2ee72:	f1b9 0f00 	cmp.w	r9, #0
   2ee76:	d000      	beq.n	2ee7a <am_util_stdio_vsprintf+0x2d2>
   2ee78:	425b      	negs	r3, r3
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
   2ee7a:	4699      	mov	r9, r3
            pcFmt += ui32NumChars;
   2ee7c:	eb0c 040a 	add.w	r4, ip, sl
        if ( *pcFmt == 'l' )
   2ee80:	f81c 300a 	ldrb.w	r3, [ip, sl]
   2ee84:	e6e4      	b.n	2ec50 <am_util_stdio_vsprintf+0xa8>
        switch ( *pcFmt )
   2ee86:	4640      	mov	r0, r8
                pcStr = va_arg(pArgs, char *);
   2ee88:	46b9      	mov	r9, r7
   2ee8a:	f859 3b04 	ldr.w	r3, [r9], #4
    if ( !pcBuf )
   2ee8e:	2b00      	cmp	r3, #0
   2ee90:	f000 81c6 	beq.w	2f220 <am_util_stdio_vsprintf+0x678>
    while ( *pcBuf++ )
   2ee94:	469c      	mov	ip, r3
   2ee96:	f81c 1b01 	ldrb.w	r1, [ip], #1
   2ee9a:	2900      	cmp	r1, #0
   2ee9c:	f000 82c1 	beq.w	2f422 <am_util_stdio_vsprintf+0x87a>
    uint32_t ui32RetVal = 0;
   2eea0:	f04f 0e00 	mov.w	lr, #0
    while ( *pcBuf++ )
   2eea4:	f81c 7b01 	ldrb.w	r7, [ip], #1
        ui32RetVal++;
   2eea8:	f10e 0e01 	add.w	lr, lr, #1
    while ( *pcBuf++ )
   2eeac:	2f00      	cmp	r7, #0
   2eeae:	d1f9      	bne.n	2eea4 <am_util_stdio_vsprintf+0x2fc>
                if ( iWidth > 0 )
   2eeb0:	2800      	cmp	r0, #0
   2eeb2:	dd02      	ble.n	2eeba <am_util_stdio_vsprintf+0x312>
                    if ( ui32strlen < iWidth )
   2eeb4:	4570      	cmp	r0, lr
   2eeb6:	f200 81d6 	bhi.w	2f266 <am_util_stdio_vsprintf+0x6be>
   2eeba:	f1c3 0801 	rsb	r8, r3, #1
                while (*pcStr != 0x0)
   2eebe:	46b2      	mov	sl, r6
   2eec0:	462f      	mov	r7, r5
   2eec2:	eb08 0c06 	add.w	ip, r8, r6
   2eec6:	e000      	b.n	2eeca <am_util_stdio_vsprintf+0x322>
                        *pcBuf++ = *pcStr;
   2eec8:	462f      	mov	r7, r5
   2eeca:	eb0c 0603 	add.w	r6, ip, r3
                    if ( pcBuf )
   2eece:	2d00      	cmp	r5, #0
   2eed0:	f000 8131 	beq.w	2f136 <am_util_stdio_vsprintf+0x58e>
                        *pcBuf++ = *pcStr;
   2eed4:	7039      	strb	r1, [r7, #0]
                while (*pcStr != 0x0)
   2eed6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
                        *pcBuf++ = *pcStr;
   2eeda:	3501      	adds	r5, #1
                while (*pcStr != 0x0)
   2eedc:	2900      	cmp	r1, #0
   2eede:	d1f3      	bne.n	2eec8 <am_util_stdio_vsprintf+0x320>
                if ( iWidth )
   2eee0:	b1e0      	cbz	r0, 2ef1c <am_util_stdio_vsprintf+0x374>
                    iWidth = -iWidth;
   2eee2:	f1c0 0800 	rsb	r8, r0, #0
                    if ( ui32strlen < iWidth )
   2eee6:	45f0      	cmp	r8, lr
   2eee8:	d918      	bls.n	2ef1c <am_util_stdio_vsprintf+0x374>
                        iWidth -= ui32strlen;
   2eeea:	eba8 030e 	sub.w	r3, r8, lr
    if ( i32NumChars <= 0 )
   2eeee:	2b00      	cmp	r3, #0
   2eef0:	f340 82b3 	ble.w	2f45a <am_util_stdio_vsprintf+0x8b2>
    while ( i32NumChars-- )
   2eef4:	3b01      	subs	r3, #1
    int32_t i32Cnt = 0;
   2eef6:	4694      	mov	ip, r2
   2eef8:	2000      	movs	r0, #0
   2eefa:	461a      	mov	r2, r3
   2eefc:	462b      	mov	r3, r5
            *pcBuf++ = cPadChar;
   2eefe:	4619      	mov	r1, r3
        if ( pcBuf )
   2ef00:	2b00      	cmp	r3, #0
   2ef02:	f000 8129 	beq.w	2f158 <am_util_stdio_vsprintf+0x5b0>
            *pcBuf++ = cPadChar;
   2ef06:	f801 cb01 	strb.w	ip, [r1], #1
   2ef0a:	4617      	mov	r7, r2
   2ef0c:	460b      	mov	r3, r1
        i32Cnt++;
   2ef0e:	3001      	adds	r0, #1
    while ( i32NumChars-- )
   2ef10:	1e7a      	subs	r2, r7, #1
   2ef12:	2f00      	cmp	r7, #0
   2ef14:	d1f3      	bne.n	2eefe <am_util_stdio_vsprintf+0x356>
                        ui32CharCnt += iWidth;
   2ef16:	4406      	add	r6, r0
                        pcBuf += pcBuf ? iWidth : 0;
   2ef18:	b105      	cbz	r5, 2ef1c <am_util_stdio_vsprintf+0x374>
   2ef1a:	4405      	add	r5, r0
                pcStr = va_arg(pArgs, char *);
   2ef1c:	464f      	mov	r7, r9
        ++pcFmt;
   2ef1e:	1c61      	adds	r1, r4, #1
   2ef20:	e655      	b.n	2ebce <am_util_stdio_vsprintf+0x26>
        switch ( *pcFmt )
   2ef22:	78a3      	ldrb	r3, [r4, #2]
   2ef24:	f1a3 0046 	sub.w	r0, r3, #70	; 0x46
                pcFmt++;
   2ef28:	3402      	adds	r4, #2
        switch ( *pcFmt )
   2ef2a:	2832      	cmp	r0, #50	; 0x32
   2ef2c:	f63f aef6 	bhi.w	2ed1c <am_util_stdio_vsprintf+0x174>
   2ef30:	f20f 0c04 	addw	ip, pc, #4
   2ef34:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
   2ef38:	0002ed29 	.word	0x0002ed29
   2ef3c:	0002ed1d 	.word	0x0002ed1d
   2ef40:	0002ed1d 	.word	0x0002ed1d
   2ef44:	0002ed1d 	.word	0x0002ed1d
   2ef48:	0002ed1d 	.word	0x0002ed1d
   2ef4c:	0002ed1d 	.word	0x0002ed1d
   2ef50:	0002ed1d 	.word	0x0002ed1d
   2ef54:	0002ed1d 	.word	0x0002ed1d
   2ef58:	0002ed1d 	.word	0x0002ed1d
   2ef5c:	0002ed1d 	.word	0x0002ed1d
   2ef60:	0002ed1d 	.word	0x0002ed1d
   2ef64:	0002ed1d 	.word	0x0002ed1d
   2ef68:	0002ed1d 	.word	0x0002ed1d
   2ef6c:	0002ed1d 	.word	0x0002ed1d
   2ef70:	0002ed1d 	.word	0x0002ed1d
   2ef74:	0002ed1d 	.word	0x0002ed1d
   2ef78:	0002ed1d 	.word	0x0002ed1d
   2ef7c:	0002ed1d 	.word	0x0002ed1d
   2ef80:	0002f2b1 	.word	0x0002f2b1
   2ef84:	0002ed1d 	.word	0x0002ed1d
   2ef88:	0002ed1d 	.word	0x0002ed1d
   2ef8c:	0002ed1d 	.word	0x0002ed1d
   2ef90:	0002ed1d 	.word	0x0002ed1d
   2ef94:	0002ed1d 	.word	0x0002ed1d
   2ef98:	0002ed1d 	.word	0x0002ed1d
   2ef9c:	0002ed1d 	.word	0x0002ed1d
   2efa0:	0002ed1d 	.word	0x0002ed1d
   2efa4:	0002ed1d 	.word	0x0002ed1d
   2efa8:	0002ed1d 	.word	0x0002ed1d
   2efac:	0002edfd 	.word	0x0002edfd
   2efb0:	0002f051 	.word	0x0002f051
   2efb4:	0002ed1d 	.word	0x0002ed1d
   2efb8:	0002ed29 	.word	0x0002ed29
   2efbc:	0002ed1d 	.word	0x0002ed1d
   2efc0:	0002ed1d 	.word	0x0002ed1d
   2efc4:	0002f051 	.word	0x0002f051
   2efc8:	0002ed1d 	.word	0x0002ed1d
   2efcc:	0002ed1d 	.word	0x0002ed1d
   2efd0:	0002ed1d 	.word	0x0002ed1d
   2efd4:	0002ed1d 	.word	0x0002ed1d
   2efd8:	0002ed1d 	.word	0x0002ed1d
   2efdc:	0002ed1d 	.word	0x0002ed1d
   2efe0:	0002ed1d 	.word	0x0002ed1d
   2efe4:	0002ed1d 	.word	0x0002ed1d
   2efe8:	0002ed1d 	.word	0x0002ed1d
   2efec:	0002ee87 	.word	0x0002ee87
   2eff0:	0002ed1d 	.word	0x0002ed1d
   2eff4:	0002f061 	.word	0x0002f061
   2eff8:	0002ed1d 	.word	0x0002ed1d
   2effc:	0002ed1d 	.word	0x0002ed1d
   2f000:	0002f2c5 	.word	0x0002f2c5
   2f004:	10019824 	.word	0x10019824
                    ui64Val = -i64Val;          // Get absolute value
   2f008:	f1d9 0900 	rsbs	r9, r9, #0
   2f00c:	eb6a 0a4a 	sbc.w	sl, sl, sl, lsl #1
                if ( iWidth )
   2f010:	2900      	cmp	r1, #0
   2f012:	f040 81fd 	bne.w	2f410 <am_util_stdio_vsprintf+0x868>
                        if ( pcBuf )
   2f016:	b115      	cbz	r5, 2f01e <am_util_stdio_vsprintf+0x476>
                            *pcBuf++ = '-';
   2f018:	232d      	movs	r3, #45	; 0x2d
   2f01a:	f805 3b01 	strb.w	r3, [r5], #1
                        ++ui32CharCnt;
   2f01e:	3601      	adds	r6, #1
   2f020:	e6e2      	b.n	2ede8 <am_util_stdio_vsprintf+0x240>
        bLower = bLongLong = false;
   2f022:	f04f 0e00 	mov.w	lr, #0
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   2f026:	f857 0b04 	ldr.w	r0, [r7], #4
   2f02a:	f04f 0c00 	mov.w	ip, #0
                if ( iWidth )
   2f02e:	b9f9      	cbnz	r1, 2f070 <am_util_stdio_vsprintf+0x4c8>
    if ( ui64Val == 0 )
   2f030:	ea50 030c 	orrs.w	r3, r0, ip
   2f034:	d14d      	bne.n	2f0d2 <am_util_stdio_vsprintf+0x52a>
    if (pcBuf)
   2f036:	2d00      	cmp	r5, #0
   2f038:	d079      	beq.n	2f12e <am_util_stdio_vsprintf+0x586>
            *pcBuf++ = tbuf[ix];
   2f03a:	462b      	mov	r3, r5
   2f03c:	2230      	movs	r2, #48	; 0x30
   2f03e:	f803 2b01 	strb.w	r2, [r3], #1
   2f042:	2201      	movs	r2, #1
   2f044:	461d      	mov	r5, r3
        *pcBuf = 0;
   2f046:	2100      	movs	r1, #0
   2f048:	7019      	strb	r1, [r3, #0]
                ui32CharCnt += iVal;
   2f04a:	4416      	add	r6, r2
        ++pcFmt;
   2f04c:	1c61      	adds	r1, r4, #1
   2f04e:	e5be      	b.n	2ebce <am_util_stdio_vsprintf+0x26>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
   2f050:	3707      	adds	r7, #7
   2f052:	f027 0707 	bic.w	r7, r7, #7
   2f056:	f8d7 a004 	ldr.w	sl, [r7, #4]
   2f05a:	f857 9b08 	ldr.w	r9, [r7], #8
   2f05e:	e6bc      	b.n	2edda <am_util_stdio_vsprintf+0x232>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   2f060:	3707      	adds	r7, #7
   2f062:	f027 0707 	bic.w	r7, r7, #7
   2f066:	f8d7 9004 	ldr.w	r9, [r7, #4]
   2f06a:	f857 ab08 	ldr.w	sl, [r7], #8
   2f06e:	e6d2      	b.n	2ee16 <am_util_stdio_vsprintf+0x26e>
    int iDigits = ui64Val ? 0 : 1;
   2f070:	ea50 030c 	orrs.w	r3, r0, ip
   2f074:	bf0c      	ite	eq
   2f076:	2101      	moveq	r1, #1
   2f078:	2100      	movne	r1, #0
    while ( ui64Val )
   2f07a:	d00b      	beq.n	2f094 <am_util_stdio_vsprintf+0x4ec>
   2f07c:	4603      	mov	r3, r0
   2f07e:	46e1      	mov	r9, ip
        ui64Val >>= 4;
   2f080:	091b      	lsrs	r3, r3, #4
   2f082:	ea43 7309 	orr.w	r3, r3, r9, lsl #28
   2f086:	ea4f 1919 	mov.w	r9, r9, lsr #4
    while ( ui64Val )
   2f08a:	ea53 0a09 	orrs.w	sl, r3, r9
        ++iDigits;
   2f08e:	f101 0101 	add.w	r1, r1, #1
    while ( ui64Val )
   2f092:	d1f5      	bne.n	2f080 <am_util_stdio_vsprintf+0x4d8>
                    iWidth -= ndigits_in_hex(ui64Val);
   2f094:	eba8 0301 	sub.w	r3, r8, r1
    if ( i32NumChars <= 0 )
   2f098:	2b00      	cmp	r3, #0
   2f09a:	f340 81b2 	ble.w	2f402 <am_util_stdio_vsprintf+0x85a>
    while ( i32NumChars-- )
   2f09e:	3b01      	subs	r3, #1
    int32_t i32Cnt = 0;
   2f0a0:	4691      	mov	r9, r2
   2f0a2:	4682      	mov	sl, r0
   2f0a4:	f04f 0800 	mov.w	r8, #0
   2f0a8:	462a      	mov	r2, r5
   2f0aa:	4618      	mov	r0, r3
            *pcBuf++ = cPadChar;
   2f0ac:	4611      	mov	r1, r2
        if ( pcBuf )
   2f0ae:	2a00      	cmp	r2, #0
   2f0b0:	d04c      	beq.n	2f14c <am_util_stdio_vsprintf+0x5a4>
            *pcBuf++ = cPadChar;
   2f0b2:	f801 9b01 	strb.w	r9, [r1], #1
   2f0b6:	4603      	mov	r3, r0
   2f0b8:	460a      	mov	r2, r1
        i32Cnt++;
   2f0ba:	f108 0801 	add.w	r8, r8, #1
    while ( i32NumChars-- )
   2f0be:	1e58      	subs	r0, r3, #1
   2f0c0:	2b00      	cmp	r3, #0
   2f0c2:	d1f3      	bne.n	2f0ac <am_util_stdio_vsprintf+0x504>
                    ui32CharCnt += iWidth;
   2f0c4:	4650      	mov	r0, sl
   2f0c6:	4446      	add	r6, r8
                    pcBuf += pcBuf ? iWidth : 0;
   2f0c8:	b375      	cbz	r5, 2f128 <am_util_stdio_vsprintf+0x580>
    if ( ui64Val == 0 )
   2f0ca:	ea50 030c 	orrs.w	r3, r0, ip
                    pcBuf += pcBuf ? iWidth : 0;
   2f0ce:	4445      	add	r5, r8
    if ( ui64Val == 0 )
   2f0d0:	d0b3      	beq.n	2f03a <am_util_stdio_vsprintf+0x492>
   2f0d2:	f1be 0f00 	cmp.w	lr, #0
   2f0d6:	f10d 080c 	add.w	r8, sp, #12
   2f0da:	bf14      	ite	ne
   2f0dc:	f04f 0927 	movne.w	r9, #39	; 0x27
   2f0e0:	f04f 0907 	moveq.w	r9, #7
   2f0e4:	4641      	mov	r1, r8
    int iNumDig, ix = 0;
   2f0e6:	2200      	movs	r2, #0
        cCh = ui64Val & 0xf;
   2f0e8:	f000 030f 	and.w	r3, r0, #15
        if ( cCh > 9 )
   2f0ec:	2b09      	cmp	r3, #9
            cCh += bLower ? 0x27 : 0x7;
   2f0ee:	bf88      	it	hi
   2f0f0:	444b      	addhi	r3, r9
        ui64Val >>= 4;
   2f0f2:	ea4f 1e10 	mov.w	lr, r0, lsr #4
   2f0f6:	ea4e 700c 	orr.w	r0, lr, ip, lsl #28
        tbuf[ix++] = cCh + '0';
   2f0fa:	3330      	adds	r3, #48	; 0x30
        ui64Val >>= 4;
   2f0fc:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
        tbuf[ix++] = cCh + '0';
   2f100:	f801 3b01 	strb.w	r3, [r1], #1
    while ( ui64Val )
   2f104:	ea50 030c 	orrs.w	r3, r0, ip
        tbuf[ix++] = cCh + '0';
   2f108:	f102 0201 	add.w	r2, r2, #1
    while ( ui64Val )
   2f10c:	d1ec      	bne.n	2f0e8 <am_util_stdio_vsprintf+0x540>
    if (pcBuf)
   2f10e:	b17d      	cbz	r5, 2f130 <am_util_stdio_vsprintf+0x588>
   2f110:	eb08 0302 	add.w	r3, r8, r2
   2f114:	1e69      	subs	r1, r5, #1
            *pcBuf++ = tbuf[ix];
   2f116:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   2f11a:	f801 0f01 	strb.w	r0, [r1, #1]!
        while (ix--)
   2f11e:	4543      	cmp	r3, r8
   2f120:	d1f9      	bne.n	2f116 <am_util_stdio_vsprintf+0x56e>
            *pcBuf++ = tbuf[ix];
   2f122:	18ab      	adds	r3, r5, r2
                    pcBuf += iVal;
   2f124:	461d      	mov	r5, r3
   2f126:	e78e      	b.n	2f046 <am_util_stdio_vsprintf+0x49e>
    if ( ui64Val == 0 )
   2f128:	ea50 030c 	orrs.w	r3, r0, ip
   2f12c:	d1d1      	bne.n	2f0d2 <am_util_stdio_vsprintf+0x52a>
   2f12e:	2201      	movs	r2, #1
                if ( pcBuf )
   2f130:	2500      	movs	r5, #0
                ui32CharCnt += iVal;
   2f132:	4416      	add	r6, r2
                break;
   2f134:	e78a      	b.n	2f04c <am_util_stdio_vsprintf+0x4a4>
   2f136:	eb08 010a 	add.w	r1, r8, sl
                    ++ui32CharCnt;
   2f13a:	18ce      	adds	r6, r1, r3
                while (*pcStr != 0x0)
   2f13c:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   2f140:	2f00      	cmp	r7, #0
   2f142:	d1fa      	bne.n	2f13a <am_util_stdio_vsprintf+0x592>
                if ( iWidth )
   2f144:	2800      	cmp	r0, #0
   2f146:	f43f aee9 	beq.w	2ef1c <am_util_stdio_vsprintf+0x374>
   2f14a:	e6ca      	b.n	2eee2 <am_util_stdio_vsprintf+0x33a>
    while ( i32NumChars-- )
   2f14c:	1e43      	subs	r3, r0, #1
        i32Cnt++;
   2f14e:	f108 0801 	add.w	r8, r8, #1
    while ( i32NumChars-- )
   2f152:	2800      	cmp	r0, #0
   2f154:	d1b1      	bne.n	2f0ba <am_util_stdio_vsprintf+0x512>
   2f156:	e7b5      	b.n	2f0c4 <am_util_stdio_vsprintf+0x51c>
   2f158:	1e57      	subs	r7, r2, #1
        i32Cnt++;
   2f15a:	3001      	adds	r0, #1
    while ( i32NumChars-- )
   2f15c:	2a00      	cmp	r2, #0
   2f15e:	f47f aed6 	bne.w	2ef0e <am_util_stdio_vsprintf+0x366>
                        ui32CharCnt += iWidth;
   2f162:	4406      	add	r6, r0
   2f164:	e6d8      	b.n	2ef18 <am_util_stdio_vsprintf+0x370>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   2f166:	78a0      	ldrb	r0, [r4, #2]
   2f168:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   2f16c:	2b09      	cmp	r3, #9
        pcStr++;
   2f16e:	f104 0402 	add.w	r4, r4, #2
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   2f172:	f200 8176 	bhi.w	2f462 <am_util_stdio_vsprintf+0x8ba>
        uCnt++;
   2f176:	2301      	movs	r3, #1
        bNeg = true;
   2f178:	4699      	mov	r9, r3
   2f17a:	e667      	b.n	2ee4c <am_util_stdio_vsprintf+0x2a4>
    int iNDigits = ui64Val ? 0 : 1;
   2f17c:	ea5a 0309 	orrs.w	r3, sl, r9
   2f180:	bf0c      	ite	eq
   2f182:	f04f 0b01 	moveq.w	fp, #1
   2f186:	f04f 0b00 	movne.w	fp, #0
    while ( ui64Val )
   2f18a:	d012      	beq.n	2f1b2 <am_util_stdio_vsprintf+0x60a>
   2f18c:	4649      	mov	r1, r9
   2f18e:	9400      	str	r4, [sp, #0]
   2f190:	4650      	mov	r0, sl
   2f192:	465c      	mov	r4, fp
   2f194:	46cb      	mov	fp, r9
   2f196:	46a9      	mov	r9, r5
   2f198:	4615      	mov	r5, r2
        ui64Val = divu64_10(ui64Val);
   2f19a:	f7ff fc21 	bl	2e9e0 <divu64_10>
    while ( ui64Val )
   2f19e:	ea50 0301 	orrs.w	r3, r0, r1
        ++iNDigits;
   2f1a2:	f104 0401 	add.w	r4, r4, #1
    while ( ui64Val )
   2f1a6:	d1f8      	bne.n	2f19a <am_util_stdio_vsprintf+0x5f2>
   2f1a8:	462a      	mov	r2, r5
   2f1aa:	464d      	mov	r5, r9
   2f1ac:	46d9      	mov	r9, fp
   2f1ae:	46a3      	mov	fp, r4
   2f1b0:	9c00      	ldr	r4, [sp, #0]
                    iWidth -= ndigits_in_u64(ui64Val);
   2f1b2:	eba8 030b 	sub.w	r3, r8, fp
    if ( i32NumChars <= 0 )
   2f1b6:	2b00      	cmp	r3, #0
   2f1b8:	f340 8149 	ble.w	2f44e <am_util_stdio_vsprintf+0x8a6>
    while ( i32NumChars-- )
   2f1bc:	3b01      	subs	r3, #1
    int32_t i32Cnt = 0;
   2f1be:	4694      	mov	ip, r2
   2f1c0:	46a6      	mov	lr, r4
   2f1c2:	2000      	movs	r0, #0
   2f1c4:	462a      	mov	r2, r5
   2f1c6:	461c      	mov	r4, r3
            *pcBuf++ = cPadChar;
   2f1c8:	4611      	mov	r1, r2
        if ( pcBuf )
   2f1ca:	b1a2      	cbz	r2, 2f1f6 <am_util_stdio_vsprintf+0x64e>
            *pcBuf++ = cPadChar;
   2f1cc:	f801 cb01 	strb.w	ip, [r1], #1
   2f1d0:	4623      	mov	r3, r4
   2f1d2:	460a      	mov	r2, r1
        i32Cnt++;
   2f1d4:	3001      	adds	r0, #1
    while ( i32NumChars-- )
   2f1d6:	1e5c      	subs	r4, r3, #1
   2f1d8:	2b00      	cmp	r3, #0
   2f1da:	d1f5      	bne.n	2f1c8 <am_util_stdio_vsprintf+0x620>
                    ui32CharCnt += iWidth;
   2f1dc:	4674      	mov	r4, lr
   2f1de:	4406      	add	r6, r0
                    pcBuf += pcBuf ? iWidth : 0;
   2f1e0:	2d00      	cmp	r5, #0
   2f1e2:	f000 8123 	beq.w	2f42c <am_util_stdio_vsprintf+0x884>
   2f1e6:	4405      	add	r5, r0
                iVal = uint64_to_str(ui64Val, pcBuf);
   2f1e8:	462a      	mov	r2, r5
   2f1ea:	4650      	mov	r0, sl
   2f1ec:	4649      	mov	r1, r9
   2f1ee:	f7ff fc53 	bl	2ea98 <uint64_to_str>
                    pcBuf += iVal;
   2f1f2:	4405      	add	r5, r0
   2f1f4:	e61a      	b.n	2ee2c <am_util_stdio_vsprintf+0x284>
    while ( i32NumChars-- )
   2f1f6:	1e63      	subs	r3, r4, #1
        i32Cnt++;
   2f1f8:	3001      	adds	r0, #1
    while ( i32NumChars-- )
   2f1fa:	2c00      	cmp	r4, #0
   2f1fc:	d1ea      	bne.n	2f1d4 <am_util_stdio_vsprintf+0x62c>
   2f1fe:	e7ed      	b.n	2f1dc <am_util_stdio_vsprintf+0x634>
    else if (iExp2 >= 0)
   2f200:	2a00      	cmp	r2, #0
   2f202:	db36      	blt.n	2f272 <am_util_stdio_vsprintf+0x6ca>
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
   2f204:	f1a1 087e 	sub.w	r8, r1, #126	; 0x7e
   2f208:	fa00 f808 	lsl.w	r8, r0, r8
        i32IntPart = i32Significand >> (23 - iExp2);
   2f20c:	f1c2 0217 	rsb	r2, r2, #23
    if (unFloatValue.I32 < 0)
   2f210:	2b00      	cmp	r3, #0
        i32IntPart = i32Significand >> (23 - iExp2);
   2f212:	fa40 f002 	asr.w	r0, r0, r2
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
   2f216:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    if (unFloatValue.I32 < 0)
   2f21a:	db3a      	blt.n	2f292 <am_util_stdio_vsprintf+0x6ea>
   2f21c:	462a      	mov	r2, r5
   2f21e:	e5bb      	b.n	2ed98 <am_util_stdio_vsprintf+0x1f0>
                if ( iWidth > 0 )
   2f220:	2800      	cmp	r0, #0
   2f222:	dd3b      	ble.n	2f29c <am_util_stdio_vsprintf+0x6f4>
        return ui32RetVal;
   2f224:	469e      	mov	lr, r3
    int32_t i32Cnt = 0;
   2f226:	469c      	mov	ip, r3
    while ( i32NumChars-- )
   2f228:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
    int32_t i32Cnt = 0;
   2f22c:	2100      	movs	r1, #0
   2f22e:	462b      	mov	r3, r5
            *pcBuf++ = cPadChar;
   2f230:	4618      	mov	r0, r3
        if ( pcBuf )
   2f232:	2b00      	cmp	r3, #0
   2f234:	d049      	beq.n	2f2ca <am_util_stdio_vsprintf+0x722>
            *pcBuf++ = cPadChar;
   2f236:	f800 2b01 	strb.w	r2, [r0], #1
   2f23a:	4647      	mov	r7, r8
   2f23c:	4603      	mov	r3, r0
        i32Cnt++;
   2f23e:	3101      	adds	r1, #1
    while ( i32NumChars-- )
   2f240:	f107 38ff 	add.w	r8, r7, #4294967295	; 0xffffffff
   2f244:	2f00      	cmp	r7, #0
   2f246:	d1f3      	bne.n	2f230 <am_util_stdio_vsprintf+0x688>
                        ui32CharCnt += iWidth;
   2f248:	4608      	mov	r0, r1
   2f24a:	440e      	add	r6, r1
                while (*pcStr != 0x0)
   2f24c:	f89c 1000 	ldrb.w	r1, [ip]
                        ui32CharCnt += iWidth;
   2f250:	4663      	mov	r3, ip
                        pcBuf += pcBuf ? iWidth : 0;
   2f252:	b105      	cbz	r5, 2f256 <am_util_stdio_vsprintf+0x6ae>
   2f254:	4405      	add	r5, r0
                while (*pcStr != 0x0)
   2f256:	2900      	cmp	r1, #0
   2f258:	f43f ae60 	beq.w	2ef1c <am_util_stdio_vsprintf+0x374>
                        iWidth = 0;
   2f25c:	2000      	movs	r0, #0
   2f25e:	e62c      	b.n	2eeba <am_util_stdio_vsprintf+0x312>
        switch ( *pcFmt )
   2f260:	f04f 0e01 	mov.w	lr, #1
   2f264:	e6df      	b.n	2f026 <am_util_stdio_vsprintf+0x47e>
                        iWidth -= ui32strlen;
   2f266:	eba0 000e 	sub.w	r0, r0, lr
    if ( i32NumChars <= 0 )
   2f26a:	2800      	cmp	r0, #0
   2f26c:	dcdb      	bgt.n	2f226 <am_util_stdio_vsprintf+0x67e>
   2f26e:	4638      	mov	r0, r7
   2f270:	e7ef      	b.n	2f252 <am_util_stdio_vsprintf+0x6aa>
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
   2f272:	43d2      	mvns	r2, r2
    if (unFloatValue.I32 < 0)
   2f274:	2b00      	cmp	r3, #0
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
   2f276:	fa40 f802 	asr.w	r8, r0, r2
        *pcBuf++ = '-';
   2f27a:	462b      	mov	r3, r5
    if (unFloatValue.I32 < 0)
   2f27c:	da02      	bge.n	2f284 <am_util_stdio_vsprintf+0x6dc>
        *pcBuf++ = '-';
   2f27e:	222d      	movs	r2, #45	; 0x2d
   2f280:	f803 2b01 	strb.w	r2, [r3], #1
        *pcBuf++ = '0';
   2f284:	461a      	mov	r2, r3
   2f286:	2330      	movs	r3, #48	; 0x30
   2f288:	f802 3b01 	strb.w	r3, [r2], #1
   2f28c:	e58d      	b.n	2edaa <am_util_stdio_vsprintf+0x202>
    i32FracPart = 0;
   2f28e:	f04f 0800 	mov.w	r8, #0
        *pcBuf++ = '-';
   2f292:	462b      	mov	r3, r5
   2f294:	222d      	movs	r2, #45	; 0x2d
   2f296:	f803 2b01 	strb.w	r2, [r3], #1
   2f29a:	e574      	b.n	2ed86 <am_util_stdio_vsprintf+0x1de>
    while ( *pcBuf++ )
   2f29c:	7819      	ldrb	r1, [r3, #0]
                while (*pcStr != 0x0)
   2f29e:	469e      	mov	lr, r3
   2f2a0:	2900      	cmp	r1, #0
   2f2a2:	f47f ae0a 	bne.w	2eeba <am_util_stdio_vsprintf+0x312>
   2f2a6:	468e      	mov	lr, r1
                if ( iWidth )
   2f2a8:	2800      	cmp	r0, #0
   2f2aa:	f43f ae37 	beq.w	2ef1c <am_util_stdio_vsprintf+0x374>
   2f2ae:	e618      	b.n	2eee2 <am_util_stdio_vsprintf+0x33a>
        bLower = bLongLong = false;
   2f2b0:	f04f 0e00 	mov.w	lr, #0
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   2f2b4:	3707      	adds	r7, #7
   2f2b6:	f027 0707 	bic.w	r7, r7, #7
   2f2ba:	f8d7 c004 	ldr.w	ip, [r7, #4]
   2f2be:	f857 0b08 	ldr.w	r0, [r7], #8
   2f2c2:	e6b4      	b.n	2f02e <am_util_stdio_vsprintf+0x486>
        switch ( *pcFmt )
   2f2c4:	f04f 0e01 	mov.w	lr, #1
   2f2c8:	e7f4      	b.n	2f2b4 <am_util_stdio_vsprintf+0x70c>
    while ( i32NumChars-- )
   2f2ca:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
        i32Cnt++;
   2f2ce:	3101      	adds	r1, #1
    while ( i32NumChars-- )
   2f2d0:	f1b8 0f00 	cmp.w	r8, #0
   2f2d4:	d1b3      	bne.n	2f23e <am_util_stdio_vsprintf+0x696>
   2f2d6:	e7b7      	b.n	2f248 <am_util_stdio_vsprintf+0x6a0>
    *pcBuf++ = '.';
   2f2d8:	f102 0c01 	add.w	ip, r2, #1
        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
   2f2dc:	ebac 0105 	sub.w	r1, ip, r5
   2f2e0:	f1c1 0313 	rsb	r3, r1, #19
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
   2f2e4:	454b      	cmp	r3, r9
   2f2e6:	bfa8      	it	ge
   2f2e8:	464b      	movge	r3, r9
        for (jx = 0; jx < iMax; jx++)
   2f2ea:	2b00      	cmp	r3, #0
   2f2ec:	f340 80ca 	ble.w	2f484 <am_util_stdio_vsprintf+0x8dc>
   2f2f0:	1c58      	adds	r0, r3, #1
   2f2f2:	4410      	add	r0, r2
            i32FracPart *= 10;
   2f2f4:	eb08 0888 	add.w	r8, r8, r8, lsl #2
            *pcBuf++ = (i32FracPart >> 24) + '0';
   2f2f8:	ea4f 51e8 	mov.w	r1, r8, asr #23
   2f2fc:	3130      	adds	r1, #48	; 0x30
   2f2fe:	f80c 1b01 	strb.w	r1, [ip], #1
            i32FracPart *= 10;
   2f302:	ea4f 0848 	mov.w	r8, r8, lsl #1
        for (jx = 0; jx < iMax; jx++)
   2f306:	4560      	cmp	r0, ip
            i32FracPart &= 0x00FFFFFF;
   2f308:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
        for (jx = 0; jx < iMax; jx++)
   2f30c:	d1f2      	bne.n	2f2f4 <am_util_stdio_vsprintf+0x74c>
   2f30e:	441a      	add	r2, r3
    return (pcBuf - pcBufInitial);
   2f310:	1b41      	subs	r1, r0, r5
        if ( ((i32FracPart * 10) >> 24) >= 5 )
   2f312:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   2f316:	f348 53c7 	sbfx	r3, r8, #23, #8
   2f31a:	2b04      	cmp	r3, #4
   2f31c:	f77f ad4f 	ble.w	2edbe <am_util_stdio_vsprintf+0x216>
            while ( pcBuftmp >= pcBufInitial )
   2f320:	4295      	cmp	r5, r2
   2f322:	f63f ad4c 	bhi.w	2edbe <am_util_stdio_vsprintf+0x216>
   2f326:	4613      	mov	r3, r2
                    *pcBuftmp = '0';
   2f328:	f04f 0e30 	mov.w	lr, #48	; 0x30
   2f32c:	e004      	b.n	2f338 <am_util_stdio_vsprintf+0x790>
   2f32e:	f883 e001 	strb.w	lr, [r3, #1]
            while ( pcBuftmp >= pcBufInitial )
   2f332:	429d      	cmp	r5, r3
   2f334:	f63f ad43 	bhi.w	2edbe <am_util_stdio_vsprintf+0x216>
                    *pcBuftmp = '0';
   2f338:	469c      	mov	ip, r3
                if ( *pcBuftmp == '.' )
   2f33a:	f813 2901 	ldrb.w	r2, [r3], #-1
   2f33e:	2a2e      	cmp	r2, #46	; 0x2e
   2f340:	d0f7      	beq.n	2f332 <am_util_stdio_vsprintf+0x78a>
                else if ( *pcBuftmp == '9' )
   2f342:	2a39      	cmp	r2, #57	; 0x39
   2f344:	d0f3      	beq.n	2f32e <am_util_stdio_vsprintf+0x786>
                    *pcBuftmp += 1;
   2f346:	3201      	adds	r2, #1
   2f348:	f88c 2000 	strb.w	r2, [ip]
                    break;
   2f34c:	e537      	b.n	2edbe <am_util_stdio_vsprintf+0x216>
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
   2f34e:	1c4b      	adds	r3, r1, #1
   2f350:	f000 8081 	beq.w	2f456 <am_util_stdio_vsprintf+0x8ae>
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
   2f354:	3102      	adds	r1, #2
   2f356:	f000 8082 	beq.w	2f45e <am_util_stdio_vsprintf+0x8b6>
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
   2f35a:	4b4e      	ldr	r3, [pc, #312]	; (2f494 <am_util_stdio_vsprintf+0x8ec>)
                        *(uint32_t*)pcBuf = u32PrntErrVal;
   2f35c:	602b      	str	r3, [r5, #0]
   2f35e:	2303      	movs	r3, #3
   2f360:	e533      	b.n	2edca <am_util_stdio_vsprintf+0x222>
    int iNDigits = ui64Val ? 0 : 1;
   2f362:	ea59 010a 	orrs.w	r1, r9, sl
   2f366:	bf0c      	ite	eq
   2f368:	f04f 0b01 	moveq.w	fp, #1
   2f36c:	f04f 0b00 	movne.w	fp, #0
    while ( ui64Val )
   2f370:	f000 808a 	beq.w	2f488 <am_util_stdio_vsprintf+0x8e0>
                    bNeg = false;
   2f374:	2300      	movs	r3, #0
   2f376:	9300      	str	r3, [sp, #0]
   2f378:	4648      	mov	r0, r9
   2f37a:	4651      	mov	r1, sl
   2f37c:	9401      	str	r4, [sp, #4]
   2f37e:	465c      	mov	r4, fp
   2f380:	46d3      	mov	fp, sl
   2f382:	46ca      	mov	sl, r9
   2f384:	46a9      	mov	r9, r5
   2f386:	4615      	mov	r5, r2
        ui64Val = divu64_10(ui64Val);
   2f388:	f7ff fb2a 	bl	2e9e0 <divu64_10>
    while ( ui64Val )
   2f38c:	ea50 0301 	orrs.w	r3, r0, r1
        ++iNDigits;
   2f390:	f104 0401 	add.w	r4, r4, #1
    while ( ui64Val )
   2f394:	d1f8      	bne.n	2f388 <am_util_stdio_vsprintf+0x7e0>
                    if ( bNeg )
   2f396:	9900      	ldr	r1, [sp, #0]
                    iWidth -= ndigits_in_i64(ui64Val);
   2f398:	462a      	mov	r2, r5
   2f39a:	464d      	mov	r5, r9
   2f39c:	46d1      	mov	r9, sl
   2f39e:	46da      	mov	sl, fp
   2f3a0:	46a3      	mov	fp, r4
   2f3a2:	eba8 030b 	sub.w	r3, r8, fp
   2f3a6:	9c01      	ldr	r4, [sp, #4]
                    if ( bNeg )
   2f3a8:	b119      	cbz	r1, 2f3b2 <am_util_stdio_vsprintf+0x80a>
                        if ( ui8PadChar == '0' )
   2f3aa:	2a30      	cmp	r2, #48	; 0x30
                        --iWidth;
   2f3ac:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
                        if ( ui8PadChar == '0' )
   2f3b0:	d062      	beq.n	2f478 <am_util_stdio_vsprintf+0x8d0>
    if ( i32NumChars <= 0 )
   2f3b2:	2b00      	cmp	r3, #0
   2f3b4:	dd4d      	ble.n	2f452 <am_util_stdio_vsprintf+0x8aa>
    while ( i32NumChars-- )
   2f3b6:	3b01      	subs	r3, #1
    int32_t i32Cnt = 0;
   2f3b8:	4694      	mov	ip, r2
   2f3ba:	46a6      	mov	lr, r4
   2f3bc:	2000      	movs	r0, #0
   2f3be:	462a      	mov	r2, r5
   2f3c0:	461c      	mov	r4, r3
            *pcBuf++ = cPadChar;
   2f3c2:	4611      	mov	r1, r2
        if ( pcBuf )
   2f3c4:	b1c2      	cbz	r2, 2f3f8 <am_util_stdio_vsprintf+0x850>
            *pcBuf++ = cPadChar;
   2f3c6:	f801 cb01 	strb.w	ip, [r1], #1
   2f3ca:	4623      	mov	r3, r4
   2f3cc:	460a      	mov	r2, r1
        i32Cnt++;
   2f3ce:	3001      	adds	r0, #1
    while ( i32NumChars-- )
   2f3d0:	1e5c      	subs	r4, r3, #1
   2f3d2:	2b00      	cmp	r3, #0
   2f3d4:	d1f5      	bne.n	2f3c2 <am_util_stdio_vsprintf+0x81a>
   2f3d6:	4674      	mov	r4, lr
   2f3d8:	4662      	mov	r2, ip
                    ui32CharCnt += iWidth;
   2f3da:	4406      	add	r6, r0
                    pcBuf += pcBuf ? iWidth : 0;
   2f3dc:	b365      	cbz	r5, 2f438 <am_util_stdio_vsprintf+0x890>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
   2f3de:	9b00      	ldr	r3, [sp, #0]
                    pcBuf += pcBuf ? iWidth : 0;
   2f3e0:	4405      	add	r5, r0
                    if ( bNeg  &&  (ui8PadChar == ' ') )
   2f3e2:	b113      	cbz	r3, 2f3ea <am_util_stdio_vsprintf+0x842>
   2f3e4:	2a20      	cmp	r2, #32
   2f3e6:	f43f ae17 	beq.w	2f018 <am_util_stdio_vsprintf+0x470>
                iVal = uint64_to_str(ui64Val, pcBuf);
   2f3ea:	462a      	mov	r2, r5
   2f3ec:	4648      	mov	r0, r9
   2f3ee:	4651      	mov	r1, sl
   2f3f0:	f7ff fb52 	bl	2ea98 <uint64_to_str>
                    pcBuf += iVal;
   2f3f4:	4405      	add	r5, r0
   2f3f6:	e519      	b.n	2ee2c <am_util_stdio_vsprintf+0x284>
    while ( i32NumChars-- )
   2f3f8:	1e63      	subs	r3, r4, #1
        i32Cnt++;
   2f3fa:	3001      	adds	r0, #1
    while ( i32NumChars-- )
   2f3fc:	2c00      	cmp	r4, #0
   2f3fe:	d1e6      	bne.n	2f3ce <am_util_stdio_vsprintf+0x826>
   2f400:	e7e9      	b.n	2f3d6 <am_util_stdio_vsprintf+0x82e>
   2f402:	f04f 0800 	mov.w	r8, #0
   2f406:	e65f      	b.n	2f0c8 <am_util_stdio_vsprintf+0x520>
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
   2f408:	4b23      	ldr	r3, [pc, #140]	; (2f498 <am_util_stdio_vsprintf+0x8f0>)
   2f40a:	602b      	str	r3, [r5, #0]
   2f40c:	2303      	movs	r3, #3
   2f40e:	e4dc      	b.n	2edca <am_util_stdio_vsprintf+0x222>
                    bNeg = true;
   2f410:	2301      	movs	r3, #1
   2f412:	9300      	str	r3, [sp, #0]
    int iNDigits = ui64Val ? 0 : 1;
   2f414:	f04f 0b00 	mov.w	fp, #0
   2f418:	e7ae      	b.n	2f378 <am_util_stdio_vsprintf+0x7d0>
    uint32_t ui32Val = 0, uCnt = 0;
   2f41a:	f04f 0a00 	mov.w	sl, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   2f41e:	4653      	mov	r3, sl
   2f420:	e52b      	b.n	2ee7a <am_util_stdio_vsprintf+0x2d2>
                if ( iWidth > 0 )
   2f422:	2800      	cmp	r0, #0
   2f424:	f77f af3f 	ble.w	2f2a6 <am_util_stdio_vsprintf+0x6fe>
    uint32_t ui32RetVal = 0;
   2f428:	468e      	mov	lr, r1
   2f42a:	e6fc      	b.n	2f226 <am_util_stdio_vsprintf+0x67e>
                iVal = uint64_to_str(ui64Val, pcBuf);
   2f42c:	462a      	mov	r2, r5
   2f42e:	4650      	mov	r0, sl
   2f430:	4649      	mov	r1, r9
   2f432:	f7ff fb31 	bl	2ea98 <uint64_to_str>
                if ( pcBuf )
   2f436:	e4dd      	b.n	2edf4 <am_util_stdio_vsprintf+0x24c>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
   2f438:	9b00      	ldr	r3, [sp, #0]
   2f43a:	b1b3      	cbz	r3, 2f46a <am_util_stdio_vsprintf+0x8c2>
   2f43c:	2a20      	cmp	r2, #32
   2f43e:	f43f adee 	beq.w	2f01e <am_util_stdio_vsprintf+0x476>
                iVal = uint64_to_str(ui64Val, pcBuf);
   2f442:	462a      	mov	r2, r5
   2f444:	4648      	mov	r0, r9
   2f446:	4651      	mov	r1, sl
   2f448:	f7ff fb26 	bl	2ea98 <uint64_to_str>
                if ( pcBuf )
   2f44c:	e4d2      	b.n	2edf4 <am_util_stdio_vsprintf+0x24c>
   2f44e:	2000      	movs	r0, #0
   2f450:	e6c6      	b.n	2f1e0 <am_util_stdio_vsprintf+0x638>
   2f452:	2000      	movs	r0, #0
   2f454:	e7c2      	b.n	2f3dc <am_util_stdio_vsprintf+0x834>
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
   2f456:	4b10      	ldr	r3, [pc, #64]	; (2f498 <am_util_stdio_vsprintf+0x8f0>)
   2f458:	e780      	b.n	2f35c <am_util_stdio_vsprintf+0x7b4>
   2f45a:	2000      	movs	r0, #0
   2f45c:	e55c      	b.n	2ef18 <am_util_stdio_vsprintf+0x370>
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
   2f45e:	4b0f      	ldr	r3, [pc, #60]	; (2f49c <am_util_stdio_vsprintf+0x8f4>)
   2f460:	e77c      	b.n	2f35c <am_util_stdio_vsprintf+0x7b4>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   2f462:	2300      	movs	r3, #0
        uCnt++;
   2f464:	f04f 0a01 	mov.w	sl, #1
   2f468:	e506      	b.n	2ee78 <am_util_stdio_vsprintf+0x2d0>
                iVal = uint64_to_str(ui64Val, pcBuf);
   2f46a:	4648      	mov	r0, r9
   2f46c:	4651      	mov	r1, sl
   2f46e:	462a      	mov	r2, r5
   2f470:	f7ff fb12 	bl	2ea98 <uint64_to_str>
                ui32CharCnt += iVal;
   2f474:	4406      	add	r6, r0
                break;
   2f476:	e4bf      	b.n	2edf8 <am_util_stdio_vsprintf+0x250>
                            if ( pcBuf )
   2f478:	b115      	cbz	r5, 2f480 <am_util_stdio_vsprintf+0x8d8>
                                *pcBuf++ = '-';
   2f47a:	212d      	movs	r1, #45	; 0x2d
   2f47c:	f805 1b01 	strb.w	r1, [r5], #1
                            ++ui32CharCnt;
   2f480:	3601      	adds	r6, #1
   2f482:	e796      	b.n	2f3b2 <am_util_stdio_vsprintf+0x80a>
    *pcBuf++ = '.';
   2f484:	4660      	mov	r0, ip
   2f486:	e744      	b.n	2f312 <am_util_stdio_vsprintf+0x76a>
                    iWidth -= ndigits_in_i64(ui64Val);
   2f488:	eba8 030b 	sub.w	r3, r8, fp
                    bNeg = false;
   2f48c:	468a      	mov	sl, r1
   2f48e:	9100      	str	r1, [sp, #0]
                    ui64Val = i64Val;
   2f490:	4689      	mov	r9, r1
   2f492:	e78e      	b.n	2f3b2 <am_util_stdio_vsprintf+0x80a>
   2f494:	003f2e3f 	.word	0x003f2e3f
   2f498:	00302e30 	.word	0x00302e30
   2f49c:	00232e23 	.word	0x00232e23

0002f4a0 <am_util_stdio_printf>:
// A lite version of printf()
//
//*****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
   2f4a0:	b40f      	push	{r0, r1, r2, r3}
   2f4a2:	b530      	push	{r4, r5, lr}
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
   2f4a4:	4d09      	ldr	r5, [pc, #36]	; (2f4cc <am_util_stdio_printf+0x2c>)
   2f4a6:	682c      	ldr	r4, [r5, #0]
{
   2f4a8:	b083      	sub	sp, #12
    if (!g_pfnCharPrint)
   2f4aa:	b14c      	cbz	r4, 2f4c0 <am_util_stdio_printf+0x20>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
   2f4ac:	aa07      	add	r2, sp, #28
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
   2f4ae:	9906      	ldr	r1, [sp, #24]
   2f4b0:	4807      	ldr	r0, [pc, #28]	; (2f4d0 <am_util_stdio_printf+0x30>)
    va_start(pArgs, pcFmt);
   2f4b2:	9201      	str	r2, [sp, #4]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
   2f4b4:	f7ff fb78 	bl	2eba8 <am_util_stdio_vsprintf>
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
   2f4b8:	682b      	ldr	r3, [r5, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
   2f4ba:	4604      	mov	r4, r0
    g_pfnCharPrint(g_prfbuf);
   2f4bc:	4804      	ldr	r0, [pc, #16]	; (2f4d0 <am_util_stdio_printf+0x30>)
   2f4be:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
}
   2f4c0:	4620      	mov	r0, r4
   2f4c2:	b003      	add	sp, #12
   2f4c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   2f4c8:	b004      	add	sp, #16
   2f4ca:	4770      	bx	lr
   2f4cc:	10019828 	.word	0x10019828
   2f4d0:	1001982c 	.word	0x1001982c

0002f4d4 <am_util_stdio_vprintf>:
}


uint32_t
am_util_stdio_vprintf(const char *pcFmt, va_list pArgs)
{
   2f4d4:	b510      	push	{r4, lr}
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
   2f4d6:	4c09      	ldr	r4, [pc, #36]	; (2f4fc <am_util_stdio_vprintf+0x28>)
   2f4d8:	6823      	ldr	r3, [r4, #0]
   2f4da:	b15b      	cbz	r3, 2f4f4 <am_util_stdio_vprintf+0x20>
   2f4dc:	460a      	mov	r2, r1
    {
        return 0;
    }

    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
   2f4de:	4601      	mov	r1, r0
   2f4e0:	4807      	ldr	r0, [pc, #28]	; (2f500 <am_util_stdio_vprintf+0x2c>)
   2f4e2:	f7ff fb61 	bl	2eba8 <am_util_stdio_vsprintf>
   2f4e6:	4603      	mov	r3, r0

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
   2f4e8:	6822      	ldr	r2, [r4, #0]
   2f4ea:	4805      	ldr	r0, [pc, #20]	; (2f500 <am_util_stdio_vprintf+0x2c>)
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
   2f4ec:	461c      	mov	r4, r3
    g_pfnCharPrint(g_prfbuf);
   2f4ee:	4790      	blx	r2

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
}
   2f4f0:	4620      	mov	r0, r4
   2f4f2:	bd10      	pop	{r4, pc}
        return 0;
   2f4f4:	461c      	mov	r4, r3
}
   2f4f6:	4620      	mov	r0, r4
   2f4f8:	bd10      	pop	{r4, pc}
   2f4fa:	bf00      	nop
   2f4fc:	10019828 	.word	0x10019828
   2f500:	1001982c 	.word	0x1001982c

0002f504 <vApplicationMallocFailedHook>:
    // free memory available in the FreeRTOS heap.  pvPortMalloc() is called
    // internally by FreeRTOS API functions that create tasks, queues, software
    // timers, and semaphores.  The size of the FreeRTOS heap is set by the
    // configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h.
    //
    while (1)
   2f504:	e7fe      	b.n	2f504 <vApplicationMallocFailedHook>
   2f506:	bf00      	nop

0002f508 <vApplicationStackOverflowHook>:
    // Run time stack overflow checking is performed if
    // configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
    // function is called if a stack overflow is detected.
    //
    while (1) {
        __asm("BKPT #0\n"); // Break into the debugger
   2f508:	be00      	bkpt	0x0000
    while (1) {
   2f50a:	e7fd      	b.n	2f508 <vApplicationStackOverflowHook>

0002f50c <vTaskSwitchContext.part.0>:
         * switch. */
        xYieldPending = pdTRUE;
    }
    else
    {
        xYieldPending = pdFALSE;
   2f50c:	4b2b      	ldr	r3, [pc, #172]	; (2f5bc <vTaskSwitchContext.part.0+0xb0>)
void vTaskSwitchContext( void )
   2f50e:	b570      	push	{r4, r5, r6, lr}
        xYieldPending = pdFALSE;
   2f510:	2200      	movs	r2, #0
            ulTaskSwitchedInTime = ulTotalRunTime;
        }
        #endif /* configGENERATE_RUN_TIME_STATS */

        /* Check for stack overflow, if configured. */
        taskCHECK_FOR_STACK_OVERFLOW();
   2f512:	4c2b      	ldr	r4, [pc, #172]	; (2f5c0 <vTaskSwitchContext.part.0+0xb4>)
        xYieldPending = pdFALSE;
   2f514:	601a      	str	r2, [r3, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
   2f516:	6823      	ldr	r3, [r4, #0]
   2f518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   2f51a:	681a      	ldr	r2, [r3, #0]
   2f51c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
   2f520:	d103      	bne.n	2f52a <vTaskSwitchContext.part.0+0x1e>
   2f522:	685a      	ldr	r2, [r3, #4]
   2f524:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
   2f528:	d03f      	beq.n	2f5aa <vTaskSwitchContext.part.0+0x9e>
   2f52a:	6820      	ldr	r0, [r4, #0]
   2f52c:	6821      	ldr	r1, [r4, #0]
   2f52e:	3134      	adds	r1, #52	; 0x34
   2f530:	f7ff ffea 	bl	2f508 <vApplicationStackOverflowHook>
        }
        #endif

        /* Select a new task to run using either the generic C or port
         * optimised asm code. */
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   2f534:	4d23      	ldr	r5, [pc, #140]	; (2f5c4 <vTaskSwitchContext.part.0+0xb8>)
   2f536:	4a24      	ldr	r2, [pc, #144]	; (2f5c8 <vTaskSwitchContext.part.0+0xbc>)
   2f538:	682b      	ldr	r3, [r5, #0]
   2f53a:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   2f53e:	0080      	lsls	r0, r0, #2
   2f540:	0099      	lsls	r1, r3, #2
   2f542:	5810      	ldr	r0, [r2, r0]
   2f544:	bb08      	cbnz	r0, 2f58a <vTaskSwitchContext.part.0+0x7e>
   2f546:	b1f3      	cbz	r3, 2f586 <vTaskSwitchContext.part.0+0x7a>
   2f548:	1e58      	subs	r0, r3, #1
   2f54a:	eb00 0180 	add.w	r1, r0, r0, lsl #2
   2f54e:	0089      	lsls	r1, r1, #2
   2f550:	5856      	ldr	r6, [r2, r1]
   2f552:	0081      	lsls	r1, r0, #2
   2f554:	b9c6      	cbnz	r6, 2f588 <vTaskSwitchContext.part.0+0x7c>
   2f556:	b1b0      	cbz	r0, 2f586 <vTaskSwitchContext.part.0+0x7a>
   2f558:	1e98      	subs	r0, r3, #2
   2f55a:	eb00 0180 	add.w	r1, r0, r0, lsl #2
   2f55e:	0089      	lsls	r1, r1, #2
   2f560:	5856      	ldr	r6, [r2, r1]
   2f562:	0081      	lsls	r1, r0, #2
   2f564:	b986      	cbnz	r6, 2f588 <vTaskSwitchContext.part.0+0x7c>
   2f566:	b170      	cbz	r0, 2f586 <vTaskSwitchContext.part.0+0x7a>
   2f568:	1ed8      	subs	r0, r3, #3
   2f56a:	eb00 0180 	add.w	r1, r0, r0, lsl #2
   2f56e:	0089      	lsls	r1, r1, #2
   2f570:	5856      	ldr	r6, [r2, r1]
   2f572:	0081      	lsls	r1, r0, #2
   2f574:	b946      	cbnz	r6, 2f588 <vTaskSwitchContext.part.0+0x7c>
   2f576:	b130      	cbz	r0, 2f586 <vTaskSwitchContext.part.0+0x7a>
   2f578:	3b04      	subs	r3, #4
   2f57a:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   2f57e:	0080      	lsls	r0, r0, #2
   2f580:	0099      	lsls	r1, r3, #2
   2f582:	5810      	ldr	r0, [r2, r0]
   2f584:	b908      	cbnz	r0, 2f58a <vTaskSwitchContext.part.0+0x7e>
   2f586:	e7fe      	b.n	2f586 <vTaskSwitchContext.part.0+0x7a>
   2f588:	4603      	mov	r3, r0
   2f58a:	4419      	add	r1, r3
   2f58c:	eb02 0081 	add.w	r0, r2, r1, lsl #2
   2f590:	4602      	mov	r2, r0
   2f592:	6841      	ldr	r1, [r0, #4]
   2f594:	6849      	ldr	r1, [r1, #4]
   2f596:	6041      	str	r1, [r0, #4]
   2f598:	3208      	adds	r2, #8
   2f59a:	4291      	cmp	r1, r2
   2f59c:	bf04      	itt	eq
   2f59e:	6849      	ldreq	r1, [r1, #4]
   2f5a0:	6041      	streq	r1, [r0, #4]
   2f5a2:	68ca      	ldr	r2, [r1, #12]
   2f5a4:	6022      	str	r2, [r4, #0]
   2f5a6:	602b      	str	r3, [r5, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
   2f5a8:	bd70      	pop	{r4, r5, r6, pc}
        taskCHECK_FOR_STACK_OVERFLOW();
   2f5aa:	689a      	ldr	r2, [r3, #8]
   2f5ac:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
   2f5b0:	d1bb      	bne.n	2f52a <vTaskSwitchContext.part.0+0x1e>
   2f5b2:	68db      	ldr	r3, [r3, #12]
   2f5b4:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
   2f5b8:	d1b7      	bne.n	2f52a <vTaskSwitchContext.part.0+0x1e>
   2f5ba:	e7bb      	b.n	2f534 <vTaskSwitchContext.part.0+0x28>
   2f5bc:	10019ca0 	.word	0x10019ca0
   2f5c0:	10019c2c 	.word	0x10019c2c
   2f5c4:	10019c8c 	.word	0x10019c8c
   2f5c8:	10019c38 	.word	0x10019c38

0002f5cc <xTaskIncrementTick.part.0>:
BaseType_t xTaskIncrementTick( void )
   2f5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   2f5d0:	4b51      	ldr	r3, [pc, #324]	; (2f718 <xTaskIncrementTick.part.0+0x14c>)
   2f5d2:	681d      	ldr	r5, [r3, #0]
   2f5d4:	3501      	adds	r5, #1
BaseType_t xTaskIncrementTick( void )
   2f5d6:	b083      	sub	sp, #12
        xTickCount = xConstTickCount;
   2f5d8:	601d      	str	r5, [r3, #0]
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   2f5da:	2d00      	cmp	r5, #0
   2f5dc:	d06a      	beq.n	2f6b4 <xTaskIncrementTick.part.0+0xe8>
   2f5de:	4b4f      	ldr	r3, [pc, #316]	; (2f71c <xTaskIncrementTick.part.0+0x150>)
   2f5e0:	9301      	str	r3, [sp, #4]
        if( xConstTickCount >= xNextTaskUnblockTime )
   2f5e2:	681b      	ldr	r3, [r3, #0]
   2f5e4:	429d      	cmp	r5, r3
   2f5e6:	d36a      	bcc.n	2f6be <xTaskIncrementTick.part.0+0xf2>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   2f5e8:	4e4d      	ldr	r6, [pc, #308]	; (2f720 <xTaskIncrementTick.part.0+0x154>)
   2f5ea:	6833      	ldr	r3, [r6, #0]
   2f5ec:	681b      	ldr	r3, [r3, #0]
   2f5ee:	2b00      	cmp	r3, #0
   2f5f0:	f000 808c 	beq.w	2f70c <xTaskIncrementTick.part.0+0x140>
    BaseType_t xSwitchRequired = pdFALSE;
   2f5f4:	f04f 0e00 	mov.w	lr, #0
                    prvAddTaskToReadyList( pxTCB );
   2f5f8:	f8df 8138 	ldr.w	r8, [pc, #312]	; 2f734 <xTaskIncrementTick.part.0+0x168>
   2f5fc:	4c49      	ldr	r4, [pc, #292]	; (2f724 <xTaskIncrementTick.part.0+0x158>)
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
   2f5fe:	f8df b138 	ldr.w	fp, [pc, #312]	; 2f738 <xTaskIncrementTick.part.0+0x16c>
   2f602:	9500      	str	r5, [sp, #0]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
   2f604:	46f1      	mov	r9, lr
   2f606:	e047      	b.n	2f698 <xTaskIncrementTick.part.0+0xcc>
   2f608:	e9d3 2c02 	ldrd	r2, ip, [r3, #8]
   2f60c:	6959      	ldr	r1, [r3, #20]
   2f60e:	f8c2 c008 	str.w	ip, [r2, #8]
   2f612:	f8cc 2004 	str.w	r2, [ip, #4]
   2f616:	684a      	ldr	r2, [r1, #4]
   2f618:	4282      	cmp	r2, r0
   2f61a:	680a      	ldr	r2, [r1, #0]
   2f61c:	bf08      	it	eq
   2f61e:	f8c1 c004 	streq.w	ip, [r1, #4]
   2f622:	3a01      	subs	r2, #1
   2f624:	f8c3 9014 	str.w	r9, [r3, #20]
   2f628:	600a      	str	r2, [r1, #0]
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   2f62a:	6a99      	ldr	r1, [r3, #40]	; 0x28
   2f62c:	b179      	cbz	r1, 2f64e <xTaskIncrementTick.part.0+0x82>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
   2f62e:	e9d3 c207 	ldrd	ip, r2, [r3, #28]
   2f632:	684f      	ldr	r7, [r1, #4]
   2f634:	f8cc 2008 	str.w	r2, [ip, #8]
   2f638:	6a1a      	ldr	r2, [r3, #32]
   2f63a:	42af      	cmp	r7, r5
   2f63c:	f8c2 c004 	str.w	ip, [r2, #4]
   2f640:	bf08      	it	eq
   2f642:	604a      	streq	r2, [r1, #4]
   2f644:	680a      	ldr	r2, [r1, #0]
   2f646:	f8c3 9028 	str.w	r9, [r3, #40]	; 0x28
   2f64a:	3a01      	subs	r2, #1
   2f64c:	600a      	str	r2, [r1, #0]
                    prvAddTaskToReadyList( pxTCB );
   2f64e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2f650:	f8d8 1000 	ldr.w	r1, [r8]
   2f654:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
   2f658:	eb04 0a8c 	add.w	sl, r4, ip, lsl #2
   2f65c:	428a      	cmp	r2, r1
   2f65e:	f8da 1004 	ldr.w	r1, [sl, #4]
   2f662:	bf88      	it	hi
   2f664:	f8c8 2000 	strhi.w	r2, [r8]
   2f668:	688d      	ldr	r5, [r1, #8]
   2f66a:	60dd      	str	r5, [r3, #12]
   2f66c:	f854 502c 	ldr.w	r5, [r4, ip, lsl #2]
   2f670:	688f      	ldr	r7, [r1, #8]
   2f672:	6099      	str	r1, [r3, #8]
   2f674:	3501      	adds	r5, #1
   2f676:	6078      	str	r0, [r7, #4]
   2f678:	6088      	str	r0, [r1, #8]
   2f67a:	f8c3 a014 	str.w	sl, [r3, #20]
   2f67e:	f844 502c 	str.w	r5, [r4, ip, lsl #2]
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
   2f682:	f8db 1000 	ldr.w	r1, [fp]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   2f686:	6833      	ldr	r3, [r6, #0]
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
   2f688:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   2f68a:	681b      	ldr	r3, [r3, #0]
                            xSwitchRequired = pdTRUE;
   2f68c:	428a      	cmp	r2, r1
   2f68e:	bf88      	it	hi
   2f690:	f04f 0e01 	movhi.w	lr, #1
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   2f694:	2b00      	cmp	r3, #0
   2f696:	d03a      	beq.n	2f70e <xTaskIncrementTick.part.0+0x142>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   2f698:	6833      	ldr	r3, [r6, #0]
                    if( xConstTickCount < xItemValue )
   2f69a:	9900      	ldr	r1, [sp, #0]
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   2f69c:	68db      	ldr	r3, [r3, #12]
   2f69e:	68db      	ldr	r3, [r3, #12]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   2f6a0:	685a      	ldr	r2, [r3, #4]
                    if( xConstTickCount < xItemValue )
   2f6a2:	4291      	cmp	r1, r2
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
   2f6a4:	f103 0004 	add.w	r0, r3, #4
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
   2f6a8:	f103 0518 	add.w	r5, r3, #24
                    if( xConstTickCount < xItemValue )
   2f6ac:	d2ac      	bcs.n	2f608 <xTaskIncrementTick.part.0+0x3c>
                        xNextTaskUnblockTime = xItemValue;
   2f6ae:	9b01      	ldr	r3, [sp, #4]
   2f6b0:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
   2f6b2:	e006      	b.n	2f6c2 <xTaskIncrementTick.part.0+0xf6>
            taskSWITCH_DELAYED_LISTS();
   2f6b4:	4b1a      	ldr	r3, [pc, #104]	; (2f720 <xTaskIncrementTick.part.0+0x154>)
   2f6b6:	681a      	ldr	r2, [r3, #0]
   2f6b8:	6812      	ldr	r2, [r2, #0]
   2f6ba:	b15a      	cbz	r2, 2f6d4 <xTaskIncrementTick.part.0+0x108>
   2f6bc:	e7fe      	b.n	2f6bc <xTaskIncrementTick.part.0+0xf0>
    BaseType_t xSwitchRequired = pdFALSE;
   2f6be:	f04f 0e00 	mov.w	lr, #0
            if( xYieldPending != pdFALSE )
   2f6c2:	4b19      	ldr	r3, [pc, #100]	; (2f728 <xTaskIncrementTick.part.0+0x15c>)
   2f6c4:	681b      	ldr	r3, [r3, #0]
                xSwitchRequired = pdTRUE;
   2f6c6:	2b00      	cmp	r3, #0
}
   2f6c8:	bf0c      	ite	eq
   2f6ca:	4670      	moveq	r0, lr
   2f6cc:	2001      	movne	r0, #1
   2f6ce:	b003      	add	sp, #12
   2f6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            taskSWITCH_DELAYED_LISTS();
   2f6d4:	4a15      	ldr	r2, [pc, #84]	; (2f72c <xTaskIncrementTick.part.0+0x160>)
   2f6d6:	6818      	ldr	r0, [r3, #0]
   2f6d8:	6811      	ldr	r1, [r2, #0]
   2f6da:	6019      	str	r1, [r3, #0]
   2f6dc:	4914      	ldr	r1, [pc, #80]	; (2f730 <xTaskIncrementTick.part.0+0x164>)
   2f6de:	6010      	str	r0, [r2, #0]
   2f6e0:	680a      	ldr	r2, [r1, #0]
   2f6e2:	3201      	adds	r2, #1
   2f6e4:	600a      	str	r2, [r1, #0]
#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   2f6e6:	681a      	ldr	r2, [r3, #0]
   2f6e8:	6812      	ldr	r2, [r2, #0]
   2f6ea:	b93a      	cbnz	r2, 2f6fc <xTaskIncrementTick.part.0+0x130>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
   2f6ec:	4b0b      	ldr	r3, [pc, #44]	; (2f71c <xTaskIncrementTick.part.0+0x150>)
   2f6ee:	9301      	str	r3, [sp, #4]
   2f6f0:	461a      	mov	r2, r3
   2f6f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2f6f6:	6013      	str	r3, [r2, #0]
   2f6f8:	4613      	mov	r3, r2
   2f6fa:	e772      	b.n	2f5e2 <xTaskIncrementTick.part.0+0x16>
    {
        /* The new current delayed list is not empty, get the value of
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
   2f6fc:	681b      	ldr	r3, [r3, #0]
   2f6fe:	4a07      	ldr	r2, [pc, #28]	; (2f71c <xTaskIncrementTick.part.0+0x150>)
   2f700:	68db      	ldr	r3, [r3, #12]
   2f702:	9201      	str	r2, [sp, #4]
   2f704:	681b      	ldr	r3, [r3, #0]
   2f706:	6013      	str	r3, [r2, #0]
   2f708:	4613      	mov	r3, r2
    }
}
   2f70a:	e76a      	b.n	2f5e2 <xTaskIncrementTick.part.0+0x16>
    BaseType_t xSwitchRequired = pdFALSE;
   2f70c:	469e      	mov	lr, r3
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   2f70e:	9a01      	ldr	r2, [sp, #4]
   2f710:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2f714:	6013      	str	r3, [r2, #0]
                    break;
   2f716:	e7d4      	b.n	2f6c2 <xTaskIncrementTick.part.0+0xf6>
   2f718:	10019c9c 	.word	0x10019c9c
   2f71c:	10019c90 	.word	0x10019c90
   2f720:	10019c30 	.word	0x10019c30
   2f724:	10019c38 	.word	0x10019c38
   2f728:	10019ca0 	.word	0x10019ca0
   2f72c:	10019c34 	.word	0x10019c34
   2f730:	10019c94 	.word	0x10019c94
   2f734:	10019c8c 	.word	0x10019c8c
   2f738:	10019c2c 	.word	0x10019c2c

0002f73c <xTaskIncrementTick>:
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   2f73c:	4b05      	ldr	r3, [pc, #20]	; (2f754 <xTaskIncrementTick+0x18>)
   2f73e:	681b      	ldr	r3, [r3, #0]
   2f740:	b90b      	cbnz	r3, 2f746 <xTaskIncrementTick+0xa>
   2f742:	f7ff bf43 	b.w	2f5cc <xTaskIncrementTick.part.0>
        ++xPendedTicks;
   2f746:	4a04      	ldr	r2, [pc, #16]	; (2f758 <xTaskIncrementTick+0x1c>)
   2f748:	6813      	ldr	r3, [r2, #0]
   2f74a:	3301      	adds	r3, #1
}
   2f74c:	2000      	movs	r0, #0
        ++xPendedTicks;
   2f74e:	6013      	str	r3, [r2, #0]
}
   2f750:	4770      	bx	lr
   2f752:	bf00      	nop
   2f754:	10019c88 	.word	0x10019c88
   2f758:	10019c98 	.word	0x10019c98

0002f75c <vTaskSwitchContext>:
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   2f75c:	4b04      	ldr	r3, [pc, #16]	; (2f770 <vTaskSwitchContext+0x14>)
   2f75e:	681b      	ldr	r3, [r3, #0]
   2f760:	b11b      	cbz	r3, 2f76a <vTaskSwitchContext+0xe>
        xYieldPending = pdTRUE;
   2f762:	4b04      	ldr	r3, [pc, #16]	; (2f774 <vTaskSwitchContext+0x18>)
   2f764:	2201      	movs	r2, #1
   2f766:	601a      	str	r2, [r3, #0]
}
   2f768:	4770      	bx	lr
   2f76a:	f7ff becf 	b.w	2f50c <vTaskSwitchContext.part.0>
   2f76e:	bf00      	nop
   2f770:	10019c88 	.word	0x10019c88
   2f774:	10019ca0 	.word	0x10019ca0
	...

0002f780 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
   2f780:	4b07      	ldr	r3, [pc, #28]	; (2f7a0 <pxCurrentTCBConst2>)
   2f782:	6819      	ldr	r1, [r3, #0]
   2f784:	6808      	ldr	r0, [r1, #0]
   2f786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f78a:	f380 8809 	msr	PSP, r0
   2f78e:	f3bf 8f6f 	isb	sy
   2f792:	f04f 0000 	mov.w	r0, #0
   2f796:	f380 8811 	msr	BASEPRI, r0
   2f79a:	4770      	bx	lr
   2f79c:	f3af 8000 	nop.w

0002f7a0 <pxCurrentTCBConst2>:
   2f7a0:	10019c2c 	.word	0x10019c2c
	...

0002f7b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   2f7b0:	f3ef 8009 	mrs	r0, PSP
   2f7b4:	f3bf 8f6f 	isb	sy
   2f7b8:	4b15      	ldr	r3, [pc, #84]	; (2f810 <pxCurrentTCBConst>)
   2f7ba:	681a      	ldr	r2, [r3, #0]
   2f7bc:	f01e 0f10 	tst.w	lr, #16
   2f7c0:	bf08      	it	eq
   2f7c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
   2f7c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f7ca:	6010      	str	r0, [r2, #0]
   2f7cc:	e92d 0009 	stmdb	sp!, {r0, r3}
   2f7d0:	f04f 0080 	mov.w	r0, #128	; 0x80
   2f7d4:	f380 8811 	msr	BASEPRI, r0
   2f7d8:	f3bf 8f4f 	dsb	sy
   2f7dc:	f3bf 8f6f 	isb	sy
   2f7e0:	f7ff ffbc 	bl	2f75c <vTaskSwitchContext>
   2f7e4:	f04f 0000 	mov.w	r0, #0
   2f7e8:	f380 8811 	msr	BASEPRI, r0
   2f7ec:	bc09      	pop	{r0, r3}
   2f7ee:	6819      	ldr	r1, [r3, #0]
   2f7f0:	6808      	ldr	r0, [r1, #0]
   2f7f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f7f6:	f01e 0f10 	tst.w	lr, #16
   2f7fa:	bf08      	it	eq
   2f7fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
   2f800:	f380 8809 	msr	PSP, r0
   2f804:	f3bf 8f6f 	isb	sy
   2f808:	4770      	bx	lr
   2f80a:	bf00      	nop
   2f80c:	f3af 8000 	nop.w

0002f810 <pxCurrentTCBConst>:
   2f810:	10019c2c 	.word	0x10019c2c

0002f814 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   2f814:	b508      	push	{r3, lr}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
   2f816:	f04f 0380 	mov.w	r3, #128	; 0x80
   2f81a:	f383 8811 	msr	BASEPRI, r3
   2f81e:	f3bf 8f6f 	isb	sy
   2f822:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   2f826:	f7ff ff89 	bl	2f73c <xTaskIncrementTick>
   2f82a:	b128      	cbz	r0, 2f838 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   2f82c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   2f830:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   2f834:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
   2f838:	2300      	movs	r3, #0
   2f83a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
   2f83e:	bd08      	pop	{r3, pc}

0002f840 <xPortStimerTickHandler>:
//
//
//*****************************************************************************
void
xPortStimerTickHandler(uint32_t delta)
{
   2f840:	b570      	push	{r4, r5, r6, lr}

    curSTimer = am_hal_stimer_counter_get();
    //
    // Configure the STIMER->COMPARE_0
    //
    am_hal_stimer_compare_delta_set(0, (ulTimerCountsForOneTick-delta));
   2f842:	4e1c      	ldr	r6, [pc, #112]	; (2f8b4 <xPortStimerTickHandler+0x74>)
{
   2f844:	4604      	mov	r4, r0
    curSTimer = am_hal_stimer_counter_get();
   2f846:	f003 faf3 	bl	32e30 <am_hal_stimer_counter_get>
    am_hal_stimer_compare_delta_set(0, (ulTimerCountsForOneTick-delta));
   2f84a:	6831      	ldr	r1, [r6, #0]
    curSTimer = am_hal_stimer_counter_get();
   2f84c:	4605      	mov	r5, r0
    am_hal_stimer_compare_delta_set(0, (ulTimerCountsForOneTick-delta));
   2f84e:	1b09      	subs	r1, r1, r4
   2f850:	2000      	movs	r0, #0
   2f852:	f003 fafd 	bl	32e50 <am_hal_stimer_compare_delta_set>
#ifdef AM_FREERTOS_STIMER_BACKUP
    am_hal_stimer_compare_delta_set(1, (ulTimerCountsForOneTick-delta+1));
   2f856:	6831      	ldr	r1, [r6, #0]
   2f858:	2001      	movs	r0, #1
   2f85a:	4401      	add	r1, r0
   2f85c:	1b09      	subs	r1, r1, r4
   2f85e:	f003 faf7 	bl	32e50 <am_hal_stimer_compare_delta_set>
#endif

    timerCounts = curSTimer - g_lastSTimerVal;
   2f862:	4915      	ldr	r1, [pc, #84]	; (2f8b8 <xPortStimerTickHandler+0x78>)
    numTicksElapsed = timerCounts/ulTimerCountsForOneTick;
   2f864:	6832      	ldr	r2, [r6, #0]
    timerCounts = curSTimer - g_lastSTimerVal;
   2f866:	680b      	ldr	r3, [r1, #0]
   2f868:	1aeb      	subs	r3, r5, r3
    numTicksElapsed = timerCounts/ulTimerCountsForOneTick;
   2f86a:	fbb3 f4f2 	udiv	r4, r3, r2
    remainder = timerCounts % ulTimerCountsForOneTick;
   2f86e:	fb02 3014 	mls	r0, r2, r4, r3
    g_lastSTimerVal = curSTimer - remainder;
   2f872:	1a2d      	subs	r5, r5, r0
   2f874:	600d      	str	r5, [r1, #0]
	__asm volatile
   2f876:	f3ef 8111 	mrs	r1, BASEPRI
   2f87a:	f04f 0080 	mov.w	r0, #128	; 0x80
   2f87e:	f380 8811 	msr	BASEPRI, r0
   2f882:	f3bf 8f6f 	isb	sy
   2f886:	f3bf 8f4f 	dsb	sy
        //
        // Increment RTOS tick
        // Allowing for need to increment the tick more than one... to avoid accumulation of
        // error in case of interrupt latencies
        //
        while (numTicksElapsed--)
   2f88a:	429a      	cmp	r2, r3
   2f88c:	d80e      	bhi.n	2f8ac <xPortStimerTickHandler+0x6c>
    BaseType_t ctxtSwitchReqd = pdFALSE;
   2f88e:	2500      	movs	r5, #0
        {
            ctxtSwitchReqd = (( xTaskIncrementTick() != pdFALSE ) ? pdTRUE : ctxtSwitchReqd);
   2f890:	f7ff ff54 	bl	2f73c <xTaskIncrementTick>
   2f894:	2800      	cmp	r0, #0
   2f896:	bf18      	it	ne
   2f898:	2501      	movne	r5, #1
        while (numTicksElapsed--)
   2f89a:	3c01      	subs	r4, #1
   2f89c:	d1f8      	bne.n	2f890 <xPortStimerTickHandler+0x50>
        }
        if ( ctxtSwitchReqd != pdFALSE )
   2f89e:	b12d      	cbz	r5, 2f8ac <xPortStimerTickHandler+0x6c>
            //
            // A context switch is required.  Context switching is
            // performed in the PendSV interrupt. Pend the PendSV
            // interrupt.
            //
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   2f8a0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   2f8a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   2f8a8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
   2f8ac:	2300      	movs	r3, #0
   2f8ae:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR(0);
}
   2f8b2:	bd70      	pop	{r4, r5, r6, pc}
   2f8b4:	10019cac 	.word	0x10019cac
   2f8b8:	10019ca8 	.word	0x10019ca8

0002f8bc <am_stimer_cmpr0_isr>:
// Interrupt handler for the STIMER module Compare 0.
//
//*****************************************************************************
void
am_stimer_cmpr0_isr(void)
{
   2f8bc:	b508      	push	{r3, lr}

    //
    // Check the timer interrupt status.
    //
    uint32_t ui32Status = am_hal_stimer_int_status_get(false);
   2f8be:	2000      	movs	r0, #0
   2f8c0:	f003 fb3c 	bl	32f3c <am_hal_stimer_int_status_get>
    if (ui32Status & AM_HAL_STIMER_INT_COMPAREA)
   2f8c4:	07c3      	lsls	r3, r0, #31
   2f8c6:	d400      	bmi.n	2f8ca <am_stimer_cmpr0_isr+0xe>
        //
        // Run handlers for the various possible timer events.
        //
        xPortStimerTickHandler(0);
    }
}
   2f8c8:	bd08      	pop	{r3, pc}
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
   2f8ca:	2001      	movs	r0, #1
   2f8cc:	f003 fb30 	bl	32f30 <am_hal_stimer_int_clear>
}
   2f8d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        xPortStimerTickHandler(0);
   2f8d4:	2000      	movs	r0, #0
   2f8d6:	f7ff bfb3 	b.w	2f840 <xPortStimerTickHandler>
   2f8da:	bf00      	nop

0002f8dc <am_stimer_cmpr1_isr>:
// Interrupt handler for the STIMER module Compare 0.
//
//*****************************************************************************
void
am_stimer_cmpr1_isr(void)
{
   2f8dc:	b508      	push	{r3, lr}

    //
    // Check the timer interrupt status.
    //
    uint32_t ui32Status = am_hal_stimer_int_status_get(false);
   2f8de:	2000      	movs	r0, #0
   2f8e0:	f003 fb2c 	bl	32f3c <am_hal_stimer_int_status_get>
    if (ui32Status & AM_HAL_STIMER_INT_COMPAREB)
   2f8e4:	0783      	lsls	r3, r0, #30
   2f8e6:	d400      	bmi.n	2f8ea <am_stimer_cmpr1_isr+0xe>
        //
        // Run handlers for the various possible timer events.
        //
        xPortStimerTickHandler(1);
    }
}
   2f8e8:	bd08      	pop	{r3, pc}
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREB);
   2f8ea:	2002      	movs	r0, #2
   2f8ec:	f003 fb20 	bl	32f30 <am_hal_stimer_int_clear>
        gNumCmpB++;
   2f8f0:	4a04      	ldr	r2, [pc, #16]	; (2f904 <am_stimer_cmpr1_isr+0x28>)
   2f8f2:	6813      	ldr	r3, [r2, #0]
        xPortStimerTickHandler(1);
   2f8f4:	2001      	movs	r0, #1
        gNumCmpB++;
   2f8f6:	4403      	add	r3, r0
   2f8f8:	6013      	str	r3, [r2, #0]
}
   2f8fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        xPortStimerTickHandler(1);
   2f8fe:	f7ff bf9f 	b.w	2f840 <xPortStimerTickHandler>
   2f902:	bf00      	nop
   2f904:	10019ca4 	.word	0x10019ca4

0002f908 <_Znwj>:
    erpc_free(ptr);
}

void *erpc_malloc(size_t size)
{
    void *p = ns_malloc(size);
   2f908:	f7fe bf8a 	b.w	2e820 <ns_malloc>

0002f90c <_ZdlPv>:
    return p;
}

void erpc_free(void *ptr)
{
    ns_free(ptr);
   2f90c:	f7fe bf8c 	b.w	2e828 <ns_free>

0002f910 <_ZdlPvj>:
   2f910:	f7fe bf8a 	b.w	2e828 <ns_free>

0002f914 <am_hal_cachectrl_config>:
   2f914:	b530      	push	{r4, r5, lr}
   2f916:	b083      	sub	sp, #12
   2f918:	4604      	mov	r4, r0
   2f91a:	f000 fa57 	bl	2fdcc <am_hal_interrupt_master_disable>
   2f91e:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
   2f922:	9001      	str	r0, [sp, #4]
   2f924:	682b      	ldr	r3, [r5, #0]
   2f926:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   2f92a:	602b      	str	r3, [r5, #0]
   2f92c:	9801      	ldr	r0, [sp, #4]
   2f92e:	f000 fa51 	bl	2fdd4 <am_hal_interrupt_master_set>
   2f932:	7863      	ldrb	r3, [r4, #1]
   2f934:	7822      	ldrb	r2, [r4, #0]
   2f936:	78a1      	ldrb	r1, [r4, #2]
   2f938:	021b      	lsls	r3, r3, #8
   2f93a:	f403 7340 	and.w	r3, r3, #768	; 0x300
   2f93e:	0112      	lsls	r2, r2, #4
   2f940:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
   2f944:	b2d2      	uxtb	r2, r2
   2f946:	4313      	orrs	r3, r2
   2f948:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   2f94c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   2f950:	2000      	movs	r0, #0
   2f952:	602b      	str	r3, [r5, #0]
   2f954:	b003      	add	sp, #12
   2f956:	bd30      	pop	{r4, r5, pc}

0002f958 <am_hal_cachectrl_enable>:
   2f958:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
   2f95c:	2000      	movs	r0, #0
   2f95e:	681a      	ldr	r2, [r3, #0]
   2f960:	f042 0201 	orr.w	r2, r2, #1
   2f964:	601a      	str	r2, [r3, #0]
   2f966:	689a      	ldr	r2, [r3, #8]
   2f968:	f042 0201 	orr.w	r2, r2, #1
   2f96c:	609a      	str	r2, [r3, #8]
   2f96e:	4770      	bx	lr

0002f970 <am_hal_daxi_config>:
   2f970:	b530      	push	{r4, r5, lr}
   2f972:	b083      	sub	sp, #12
   2f974:	4605      	mov	r5, r0
   2f976:	f000 fa29 	bl	2fdcc <am_hal_interrupt_master_disable>
   2f97a:	9000      	str	r0, [sp, #0]
   2f97c:	f000 fa26 	bl	2fdcc <am_hal_interrupt_master_disable>
   2f980:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
   2f984:	9001      	str	r0, [sp, #4]
   2f986:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   2f988:	0752      	lsls	r2, r2, #29
   2f98a:	d40c      	bmi.n	2f9a6 <am_hal_daxi_config+0x36>
   2f98c:	f3bf 8f4f 	dsb	sy
   2f990:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   2f992:	491a      	ldr	r1, [pc, #104]	; (2f9fc <am_hal_daxi_config+0x8c>)
   2f994:	f042 0201 	orr.w	r2, r2, #1
   2f998:	655a      	str	r2, [r3, #84]	; 0x54
   2f99a:	680a      	ldr	r2, [r1, #0]
   2f99c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   2f99e:	f042 0202 	orr.w	r2, r2, #2
   2f9a2:	655a      	str	r2, [r3, #84]	; 0x54
   2f9a4:	680b      	ldr	r3, [r1, #0]
   2f9a6:	f04f 4490 	mov.w	r4, #1207959552	; 0x48000000
   2f9aa:	6d63      	ldr	r3, [r4, #84]	; 0x54
   2f9ac:	075b      	lsls	r3, r3, #29
   2f9ae:	d5fc      	bpl.n	2f9aa <am_hal_daxi_config+0x3a>
   2f9b0:	9801      	ldr	r0, [sp, #4]
   2f9b2:	f000 fa0f 	bl	2fdd4 <am_hal_interrupt_master_set>
   2f9b6:	b1ed      	cbz	r5, 2f9f4 <am_hal_daxi_config+0x84>
   2f9b8:	792b      	ldrb	r3, [r5, #4]
   2f9ba:	78ea      	ldrb	r2, [r5, #3]
   2f9bc:	7869      	ldrb	r1, [r5, #1]
   2f9be:	6828      	ldr	r0, [r5, #0]
   2f9c0:	f003 0301 	and.w	r3, r3, #1
   2f9c4:	0212      	lsls	r2, r2, #8
   2f9c6:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
   2f9ca:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
   2f9ce:	4313      	orrs	r3, r2
   2f9d0:	78aa      	ldrb	r2, [r5, #2]
   2f9d2:	490b      	ldr	r1, [pc, #44]	; (2fa00 <am_hal_daxi_config+0x90>)
   2f9d4:	0412      	lsls	r2, r2, #16
   2f9d6:	f402 12f8 	and.w	r2, r2, #2031616	; 0x1f0000
   2f9da:	4313      	orrs	r3, r2
   2f9dc:	6523      	str	r3, [r4, #80]	; 0x50
   2f9de:	6008      	str	r0, [r1, #0]
   2f9e0:	792b      	ldrb	r3, [r5, #4]
   2f9e2:	710b      	strb	r3, [r1, #4]
   2f9e4:	4b05      	ldr	r3, [pc, #20]	; (2f9fc <am_hal_daxi_config+0x8c>)
   2f9e6:	681b      	ldr	r3, [r3, #0]
   2f9e8:	9800      	ldr	r0, [sp, #0]
   2f9ea:	f000 f9f3 	bl	2fdd4 <am_hal_interrupt_master_set>
   2f9ee:	2000      	movs	r0, #0
   2f9f0:	b003      	add	sp, #12
   2f9f2:	bd30      	pop	{r4, r5, pc}
   2f9f4:	2306      	movs	r3, #6
   2f9f6:	6523      	str	r3, [r4, #80]	; 0x50
   2f9f8:	e7f4      	b.n	2f9e4 <am_hal_daxi_config+0x74>
   2f9fa:	bf00      	nop
   2f9fc:	47ff0000 	.word	0x47ff0000
   2fa00:	10004a88 	.word	0x10004a88

0002fa04 <am_hal_daxi_control>:
   2fa04:	b510      	push	{r4, lr}
   2fa06:	b084      	sub	sp, #16
   2fa08:	2803      	cmp	r0, #3
   2fa0a:	d866      	bhi.n	2fada <am_hal_daxi_control+0xd6>
   2fa0c:	e8df f000 	tbb	[pc, r0]
   2fa10:	02083252 	.word	0x02083252
   2fa14:	4832      	ldr	r0, [pc, #200]	; (2fae0 <am_hal_daxi_control+0xdc>)
   2fa16:	f7ff ffab 	bl	2f970 <am_hal_daxi_config>
   2fa1a:	2000      	movs	r0, #0
   2fa1c:	b004      	add	sp, #16
   2fa1e:	bd10      	pop	{r4, pc}
   2fa20:	f000 f9d4 	bl	2fdcc <am_hal_interrupt_master_disable>
   2fa24:	9002      	str	r0, [sp, #8]
   2fa26:	f000 f9d1 	bl	2fdcc <am_hal_interrupt_master_disable>
   2fa2a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
   2fa2e:	9003      	str	r0, [sp, #12]
   2fa30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   2fa32:	0752      	lsls	r2, r2, #29
   2fa34:	d40c      	bmi.n	2fa50 <am_hal_daxi_control+0x4c>
   2fa36:	f3bf 8f4f 	dsb	sy
   2fa3a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   2fa3c:	4929      	ldr	r1, [pc, #164]	; (2fae4 <am_hal_daxi_control+0xe0>)
   2fa3e:	f042 0201 	orr.w	r2, r2, #1
   2fa42:	655a      	str	r2, [r3, #84]	; 0x54
   2fa44:	680a      	ldr	r2, [r1, #0]
   2fa46:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   2fa48:	f042 0202 	orr.w	r2, r2, #2
   2fa4c:	655a      	str	r2, [r3, #84]	; 0x54
   2fa4e:	680b      	ldr	r3, [r1, #0]
   2fa50:	f04f 4490 	mov.w	r4, #1207959552	; 0x48000000
   2fa54:	6d63      	ldr	r3, [r4, #84]	; 0x54
   2fa56:	075b      	lsls	r3, r3, #29
   2fa58:	d5fc      	bpl.n	2fa54 <am_hal_daxi_control+0x50>
   2fa5a:	9803      	ldr	r0, [sp, #12]
   2fa5c:	f000 f9ba 	bl	2fdd4 <am_hal_interrupt_master_set>
   2fa60:	2206      	movs	r2, #6
   2fa62:	4b20      	ldr	r3, [pc, #128]	; (2fae4 <am_hal_daxi_control+0xe0>)
   2fa64:	6522      	str	r2, [r4, #80]	; 0x50
   2fa66:	681b      	ldr	r3, [r3, #0]
   2fa68:	9802      	ldr	r0, [sp, #8]
   2fa6a:	f000 f9b3 	bl	2fdd4 <am_hal_interrupt_master_set>
   2fa6e:	2000      	movs	r0, #0
   2fa70:	b004      	add	sp, #16
   2fa72:	bd10      	pop	{r4, pc}
   2fa74:	f000 f9aa 	bl	2fdcc <am_hal_interrupt_master_disable>
   2fa78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
   2fa7c:	9001      	str	r0, [sp, #4]
   2fa7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   2fa80:	0754      	lsls	r4, r2, #29
   2fa82:	d40c      	bmi.n	2fa9e <am_hal_daxi_control+0x9a>
   2fa84:	f3bf 8f4f 	dsb	sy
   2fa88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   2fa8a:	4916      	ldr	r1, [pc, #88]	; (2fae4 <am_hal_daxi_control+0xe0>)
   2fa8c:	f042 0201 	orr.w	r2, r2, #1
   2fa90:	655a      	str	r2, [r3, #84]	; 0x54
   2fa92:	680a      	ldr	r2, [r1, #0]
   2fa94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   2fa96:	f042 0202 	orr.w	r2, r2, #2
   2fa9a:	655a      	str	r2, [r3, #84]	; 0x54
   2fa9c:	680b      	ldr	r3, [r1, #0]
   2fa9e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
   2faa2:	6d53      	ldr	r3, [r2, #84]	; 0x54
   2faa4:	0758      	lsls	r0, r3, #29
   2faa6:	d5fc      	bpl.n	2faa2 <am_hal_daxi_control+0x9e>
   2faa8:	9801      	ldr	r0, [sp, #4]
   2faaa:	f000 f993 	bl	2fdd4 <am_hal_interrupt_master_set>
   2faae:	2000      	movs	r0, #0
   2fab0:	b004      	add	sp, #16
   2fab2:	bd10      	pop	{r4, pc}
   2fab4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
   2fab8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   2faba:	0751      	lsls	r1, r2, #29
   2fabc:	f3c2 0080 	ubfx	r0, r2, #2, #1
   2fac0:	d409      	bmi.n	2fad6 <am_hal_daxi_control+0xd2>
   2fac2:	f3bf 8f4f 	dsb	sy
   2fac6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   2fac8:	4906      	ldr	r1, [pc, #24]	; (2fae4 <am_hal_daxi_control+0xe0>)
   2faca:	f042 0202 	orr.w	r2, r2, #2
   2face:	655a      	str	r2, [r3, #84]	; 0x54
   2fad0:	680b      	ldr	r3, [r1, #0]
   2fad2:	b004      	add	sp, #16
   2fad4:	bd10      	pop	{r4, pc}
   2fad6:	2000      	movs	r0, #0
   2fad8:	e7a0      	b.n	2fa1c <am_hal_daxi_control+0x18>
   2fada:	2006      	movs	r0, #6
   2fadc:	e79e      	b.n	2fa1c <am_hal_daxi_control+0x18>
   2fade:	bf00      	nop
   2fae0:	10004a88 	.word	0x10004a88
   2fae4:	47ff0000 	.word	0x47ff0000

0002fae8 <am_hal_clkgen_control>:
   2fae8:	b538      	push	{r3, r4, r5, lr}
   2faea:	281e      	cmp	r0, #30
   2faec:	d820      	bhi.n	2fb30 <am_hal_clkgen_control+0x48>
   2faee:	e8df f010 	tbh	[pc, r0, lsl #1]
   2faf2:	0136      	.short	0x0136
   2faf4:	013e012e 	.word	0x013e012e
   2faf8:	01060126 	.word	0x01060126
   2fafc:	00b500fe 	.word	0x00b500fe
   2fb00:	009d00ab 	.word	0x009d00ab
   2fb04:	001f001f 	.word	0x001f001f
   2fb08:	001f001f 	.word	0x001f001f
   2fb0c:	001f001f 	.word	0x001f001f
   2fb10:	001f001f 	.word	0x001f001f
   2fb14:	001f001f 	.word	0x001f001f
   2fb18:	00890093 	.word	0x00890093
   2fb1c:	0074007f 	.word	0x0074007f
   2fb20:	005f0069 	.word	0x005f0069
   2fb24:	004b0055 	.word	0x004b0055
   2fb28:	00360041 	.word	0x00360041
   2fb2c:	0021002b 	.word	0x0021002b
   2fb30:	2006      	movs	r0, #6
   2fb32:	bd38      	pop	{r3, r4, r5, pc}
   2fb34:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   2fb38:	2000      	movs	r0, #0
   2fb3a:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
   2fb3e:	f043 0303 	orr.w	r3, r3, #3
   2fb42:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
   2fb46:	bd38      	pop	{r3, r4, r5, pc}
   2fb48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   2fb4c:	2102      	movs	r1, #2
   2fb4e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   2fb52:	f361 0201 	bfi	r2, r1, #0, #2
   2fb56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   2fb5a:	2000      	movs	r0, #0
   2fb5c:	bd38      	pop	{r3, r4, r5, pc}
   2fb5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   2fb62:	2101      	movs	r1, #1
   2fb64:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   2fb68:	f361 0201 	bfi	r2, r1, #0, #2
   2fb6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   2fb70:	2000      	movs	r0, #0
   2fb72:	bd38      	pop	{r3, r4, r5, pc}
   2fb74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   2fb78:	2000      	movs	r0, #0
   2fb7a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   2fb7e:	f36f 0201 	bfc	r2, #0, #2
   2fb82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   2fb86:	bd38      	pop	{r3, r4, r5, pc}
   2fb88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   2fb8c:	2000      	movs	r0, #0
   2fb8e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   2fb92:	f36f 02c3 	bfc	r2, #3, #1
   2fb96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   2fb9a:	bd38      	pop	{r3, r4, r5, pc}
   2fb9c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   2fba0:	2000      	movs	r0, #0
   2fba2:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
   2fba6:	f043 0308 	orr.w	r3, r3, #8
   2fbaa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
   2fbae:	bd38      	pop	{r3, r4, r5, pc}
   2fbb0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   2fbb4:	2000      	movs	r0, #0
   2fbb6:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
   2fbba:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   2fbbe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
   2fbc2:	bd38      	pop	{r3, r4, r5, pc}
   2fbc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   2fbc8:	2102      	movs	r1, #2
   2fbca:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   2fbce:	f361 1205 	bfi	r2, r1, #4, #2
   2fbd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   2fbd6:	2000      	movs	r0, #0
   2fbd8:	bd38      	pop	{r3, r4, r5, pc}
   2fbda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   2fbde:	2101      	movs	r1, #1
   2fbe0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   2fbe4:	f361 1205 	bfi	r2, r1, #4, #2
   2fbe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   2fbec:	2000      	movs	r0, #0
   2fbee:	bd38      	pop	{r3, r4, r5, pc}
   2fbf0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   2fbf4:	2000      	movs	r0, #0
   2fbf6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   2fbfa:	f36f 1205 	bfc	r2, #4, #2
   2fbfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   2fc02:	bd38      	pop	{r3, r4, r5, pc}
   2fc04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   2fc08:	2000      	movs	r0, #0
   2fc0a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   2fc0e:	f36f 12c7 	bfc	r2, #7, #1
   2fc12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   2fc16:	bd38      	pop	{r3, r4, r5, pc}
   2fc18:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   2fc1c:	2000      	movs	r0, #0
   2fc1e:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
   2fc22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2fc26:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
   2fc2a:	bd38      	pop	{r3, r4, r5, pc}
   2fc2c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   2fc30:	6c53      	ldr	r3, [r2, #68]	; 0x44
   2fc32:	f3c3 1040 	ubfx	r0, r3, #5, #1
   2fc36:	069b      	lsls	r3, r3, #26
   2fc38:	f57f af7b 	bpl.w	2fb32 <am_hal_clkgen_control+0x4a>
   2fc3c:	6c53      	ldr	r3, [r2, #68]	; 0x44
   2fc3e:	f36f 1345 	bfc	r3, #5, #1
   2fc42:	6453      	str	r3, [r2, #68]	; 0x44
   2fc44:	2000      	movs	r0, #0
   2fc46:	bd38      	pop	{r3, r4, r5, pc}
   2fc48:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   2fc4c:	6c53      	ldr	r3, [r2, #68]	; 0x44
   2fc4e:	0699      	lsls	r1, r3, #26
   2fc50:	f3c3 1440 	ubfx	r4, r3, #5, #1
   2fc54:	f140 809c 	bpl.w	2fd90 <am_hal_clkgen_control+0x2a8>
   2fc58:	2000      	movs	r0, #0
   2fc5a:	bd38      	pop	{r3, r4, r5, pc}
   2fc5c:	2900      	cmp	r1, #0
   2fc5e:	f43f af67 	beq.w	2fb30 <am_hal_clkgen_control+0x48>
   2fc62:	680b      	ldr	r3, [r1, #0]
   2fc64:	2b01      	cmp	r3, #1
   2fc66:	f47f af63 	bne.w	2fb30 <am_hal_clkgen_control+0x48>
   2fc6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   2fc6e:	4851      	ldr	r0, [pc, #324]	; (2fdb4 <am_hal_clkgen_control+0x2cc>)
   2fc70:	6a1a      	ldr	r2, [r3, #32]
   2fc72:	f36f 0200 	bfc	r2, #0, #1
   2fc76:	621a      	str	r2, [r3, #32]
   2fc78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   2fc7a:	f042 0207 	orr.w	r2, r2, #7
   2fc7e:	64da      	str	r2, [r3, #76]	; 0x4c
   2fc80:	684a      	ldr	r2, [r1, #4]
   2fc82:	1e53      	subs	r3, r2, #1
   2fc84:	4283      	cmp	r3, r0
   2fc86:	f0c0 808e 	bcc.w	2fda6 <am_hal_clkgen_control+0x2be>
   2fc8a:	484b      	ldr	r0, [pc, #300]	; (2fdb8 <am_hal_clkgen_control+0x2d0>)
   2fc8c:	4283      	cmp	r3, r0
   2fc8e:	f080 808f 	bcs.w	2fdb0 <am_hal_clkgen_control+0x2c8>
   2fc92:	f04f 0c08 	mov.w	ip, #8
   2fc96:	2500      	movs	r5, #0
   2fc98:	2003      	movs	r0, #3
   2fc9a:	f04f 2440 	mov.w	r4, #1073758208	; 0x40004000
   2fc9e:	ea4f 0e52 	mov.w	lr, r2, lsr #1
   2fca2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   2fca4:	f360 0301 	bfi	r3, r0, #0, #2
   2fca8:	6523      	str	r3, [r4, #80]	; 0x50
   2fcaa:	6888      	ldr	r0, [r1, #8]
   2fcac:	fba0 c10c 	umull	ip, r1, r0, ip
   2fcb0:	fb00 1105 	mla	r1, r0, r5, r1
   2fcb4:	04c9      	lsls	r1, r1, #19
   2fcb6:	ea4f 40cc 	mov.w	r0, ip, lsl #19
   2fcba:	eb10 000e 	adds.w	r0, r0, lr
   2fcbe:	ea41 315c 	orr.w	r1, r1, ip, lsr #13
   2fcc2:	f04f 0300 	mov.w	r3, #0
   2fcc6:	f141 0100 	adc.w	r1, r1, #0
   2fcca:	f7e9 fa9b 	bl	19204 <__aeabi_uldivmod>
   2fcce:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   2fcd2:	f171 0200 	sbcs.w	r2, r1, #0
   2fcd6:	4603      	mov	r3, r0
   2fcd8:	d26a      	bcs.n	2fdb0 <am_hal_clkgen_control+0x2c8>
   2fcda:	6d22      	ldr	r2, [r4, #80]	; 0x50
   2fcdc:	f363 029e 	bfi	r2, r3, #2, #29
   2fce0:	6522      	str	r2, [r4, #80]	; 0x50
   2fce2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   2fce4:	f043 0301 	orr.w	r3, r3, #1
   2fce8:	64a3      	str	r3, [r4, #72]	; 0x48
   2fcea:	2000      	movs	r0, #0
   2fcec:	bd38      	pop	{r3, r4, r5, pc}
   2fcee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   2fcf2:	2000      	movs	r0, #0
   2fcf4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   2fcf6:	f36f 0200 	bfc	r2, #0, #1
   2fcfa:	649a      	str	r2, [r3, #72]	; 0x48
   2fcfc:	bd38      	pop	{r3, r4, r5, pc}
   2fcfe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   2fd02:	2002      	movs	r0, #2
   2fd04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   2fd06:	f36f 0200 	bfc	r2, #0, #1
   2fd0a:	649a      	str	r2, [r3, #72]	; 0x48
   2fd0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   2fd0e:	f042 0207 	orr.w	r2, r2, #7
   2fd12:	64da      	str	r2, [r3, #76]	; 0x4c
   2fd14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   2fd16:	f360 0201 	bfi	r2, r0, #0, #2
   2fd1a:	651a      	str	r2, [r3, #80]	; 0x50
   2fd1c:	b381      	cbz	r1, 2fd80 <am_hal_clkgen_control+0x298>
   2fd1e:	680a      	ldr	r2, [r1, #0]
   2fd20:	b372      	cbz	r2, 2fd80 <am_hal_clkgen_control+0x298>
   2fd22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   2fd24:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   2fd28:	f361 029e 	bfi	r2, r1, #2, #29
   2fd2c:	651a      	str	r2, [r3, #80]	; 0x50
   2fd2e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   2fd32:	2000      	movs	r0, #0
   2fd34:	6c93      	ldr	r3, [r2, #72]	; 0x48
   2fd36:	f043 0301 	orr.w	r3, r3, #1
   2fd3a:	6493      	str	r3, [r2, #72]	; 0x48
   2fd3c:	bd38      	pop	{r3, r4, r5, pc}
   2fd3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   2fd42:	2000      	movs	r0, #0
   2fd44:	6a1a      	ldr	r2, [r3, #32]
   2fd46:	f36f 0200 	bfc	r2, #0, #1
   2fd4a:	621a      	str	r2, [r3, #32]
   2fd4c:	bd38      	pop	{r3, r4, r5, pc}
   2fd4e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   2fd52:	2000      	movs	r0, #0
   2fd54:	68d3      	ldr	r3, [r2, #12]
   2fd56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2fd5a:	60d3      	str	r3, [r2, #12]
   2fd5c:	bd38      	pop	{r3, r4, r5, pc}
   2fd5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   2fd62:	2000      	movs	r0, #0
   2fd64:	68da      	ldr	r2, [r3, #12]
   2fd66:	f36f 12c7 	bfc	r2, #7, #1
   2fd6a:	60da      	str	r2, [r3, #12]
   2fd6c:	bd38      	pop	{r3, r4, r5, pc}
   2fd6e:	b1c1      	cbz	r1, 2fda2 <am_hal_clkgen_control+0x2ba>
   2fd70:	680b      	ldr	r3, [r1, #0]
   2fd72:	f043 0301 	orr.w	r3, r3, #1
   2fd76:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   2fd7a:	2000      	movs	r0, #0
   2fd7c:	6213      	str	r3, [r2, #32]
   2fd7e:	bd38      	pop	{r3, r4, r5, pc}
   2fd80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   2fd84:	490d      	ldr	r1, [pc, #52]	; (2fdbc <am_hal_clkgen_control+0x2d4>)
   2fd86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   2fd88:	f361 029e 	bfi	r2, r1, #2, #29
   2fd8c:	651a      	str	r2, [r3, #80]	; 0x50
   2fd8e:	e7ce      	b.n	2fd2e <am_hal_clkgen_control+0x246>
   2fd90:	6c53      	ldr	r3, [r2, #68]	; 0x44
   2fd92:	f043 0320 	orr.w	r3, r3, #32
   2fd96:	200a      	movs	r0, #10
   2fd98:	6453      	str	r3, [r2, #68]	; 0x44
   2fd9a:	f000 fb3f 	bl	3041c <am_hal_delay_us>
   2fd9e:	4620      	mov	r0, r4
   2fda0:	bd38      	pop	{r3, r4, r5, pc}
   2fda2:	4b07      	ldr	r3, [pc, #28]	; (2fdc0 <am_hal_clkgen_control+0x2d8>)
   2fda4:	e7e7      	b.n	2fd76 <am_hal_clkgen_control+0x28e>
   2fda6:	f04f 0c04 	mov.w	ip, #4
   2fdaa:	2500      	movs	r5, #0
   2fdac:	2002      	movs	r0, #2
   2fdae:	e774      	b.n	2fc9a <am_hal_clkgen_control+0x1b2>
   2fdb0:	2005      	movs	r0, #5
   2fdb2:	bd38      	pop	{r3, r4, r5, pc}
   2fdb4:	02dc6c00 	.word	0x02dc6c00
   2fdb8:	05b8d800 	.word	0x05b8d800
   2fdbc:	00189374 	.word	0x00189374
   2fdc0:	00a5b801 	.word	0x00a5b801

0002fdc4 <am_hal_interrupt_master_enable>:
   2fdc4:	f3ef 8010 	mrs	r0, PRIMASK
   2fdc8:	b662      	cpsie	i
   2fdca:	4770      	bx	lr

0002fdcc <am_hal_interrupt_master_disable>:
   2fdcc:	f3ef 8010 	mrs	r0, PRIMASK
   2fdd0:	b672      	cpsid	i
   2fdd2:	4770      	bx	lr

0002fdd4 <am_hal_interrupt_master_set>:
   2fdd4:	f380 8810 	msr	PRIMASK, r0
   2fdd8:	4770      	bx	lr
   2fdda:	bf00      	nop

0002fddc <am_hal_itm_enable>:
   2fddc:	4a0e      	ldr	r2, [pc, #56]	; (2fe18 <am_hal_itm_enable+0x3c>)
   2fdde:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
   2fde2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   2fde6:	b410      	push	{r4}
   2fde8:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
   2fdec:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
   2fdf0:	01db      	lsls	r3, r3, #7
   2fdf2:	d5fb      	bpl.n	2fdec <am_hal_itm_enable+0x10>
   2fdf4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
   2fdf8:	4c08      	ldr	r4, [pc, #32]	; (2fe1c <am_hal_itm_enable+0x40>)
   2fdfa:	4a09      	ldr	r2, [pc, #36]	; (2fe20 <am_hal_itm_enable+0x44>)
   2fdfc:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
   2fe00:	200f      	movs	r0, #15
   2fe02:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2fe06:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
   2fe0a:	f85d 4b04 	ldr.w	r4, [sp], #4
   2fe0e:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
   2fe12:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
   2fe16:	4770      	bx	lr
   2fe18:	e000ed00 	.word	0xe000ed00
   2fe1c:	c5acce55 	.word	0xc5acce55
   2fe20:	00150511 	.word	0x00150511

0002fe24 <am_hal_itm_disable>:
   2fe24:	4b2f      	ldr	r3, [pc, #188]	; (2fee4 <am_hal_itm_disable+0xc0>)
   2fe26:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
   2fe2a:	b510      	push	{r4, lr}
   2fe2c:	b9cb      	cbnz	r3, 2fe62 <am_hal_itm_disable+0x3e>
   2fe2e:	4a2e      	ldr	r2, [pc, #184]	; (2fee8 <am_hal_itm_disable+0xc4>)
   2fe30:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
   2fe34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   2fe38:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
   2fe3c:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
   2fe40:	01d9      	lsls	r1, r3, #7
   2fe42:	d5fb      	bpl.n	2fe3c <am_hal_itm_disable+0x18>
   2fe44:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
   2fe48:	4c28      	ldr	r4, [pc, #160]	; (2feec <am_hal_itm_disable+0xc8>)
   2fe4a:	4a29      	ldr	r2, [pc, #164]	; (2fef0 <am_hal_itm_disable+0xcc>)
   2fe4c:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
   2fe50:	200f      	movs	r0, #15
   2fe52:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2fe56:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
   2fe5a:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
   2fe5e:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
   2fe62:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
   2fe66:	f8d4 3e80 	ldr.w	r3, [r4, #3712]	; 0xe80
   2fe6a:	021b      	lsls	r3, r3, #8
   2fe6c:	d4fb      	bmi.n	2fe66 <am_hal_itm_disable+0x42>
   2fe6e:	2032      	movs	r0, #50	; 0x32
   2fe70:	f000 fad4 	bl	3041c <am_hal_delay_us>
   2fe74:	4b1d      	ldr	r3, [pc, #116]	; (2feec <am_hal_itm_disable+0xc8>)
   2fe76:	491f      	ldr	r1, [pc, #124]	; (2fef4 <am_hal_itm_disable+0xd0>)
   2fe78:	f8c4 3fb0 	str.w	r3, [r4, #4016]	; 0xfb0
   2fe7c:	2064      	movs	r0, #100	; 0x64
   2fe7e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   2fe82:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
   2fe86:	f023 0301 	bic.w	r3, r3, #1
   2fe8a:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
   2fe8e:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
   2fe92:	420b      	tst	r3, r1
   2fe94:	d1fb      	bne.n	2fe8e <am_hal_itm_disable+0x6a>
   2fe96:	3801      	subs	r0, #1
   2fe98:	d1f3      	bne.n	2fe82 <am_hal_itm_disable+0x5e>
   2fe9a:	4a13      	ldr	r2, [pc, #76]	; (2fee8 <am_hal_itm_disable+0xc4>)
   2fe9c:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
   2fea0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   2fea4:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
   2fea8:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
   2feac:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
   2feb0:	d1fa      	bne.n	2fea8 <am_hal_itm_disable+0x84>
   2feb2:	4a0c      	ldr	r2, [pc, #48]	; (2fee4 <am_hal_itm_disable+0xc0>)
   2feb4:	f8d2 1250 	ldr.w	r1, [r2, #592]	; 0x250
   2feb8:	f363 0143 	bfi	r1, r3, #1, #3
   2febc:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
   2fec0:	f8d2 1250 	ldr.w	r1, [r2, #592]	; 0x250
   2fec4:	f363 0100 	bfi	r1, r3, #0, #1
   2fec8:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
   2fecc:	f8d2 1250 	ldr.w	r1, [r2, #592]	; 0x250
   2fed0:	f363 310e 	bfi	r1, r3, #12, #3
   2fed4:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
   2fed8:	f8d2 3250 	ldr.w	r3, [r2, #592]	; 0x250
   2fedc:	2b00      	cmp	r3, #0
   2fede:	d1fb      	bne.n	2fed8 <am_hal_itm_disable+0xb4>
   2fee0:	bd10      	pop	{r4, pc}
   2fee2:	bf00      	nop
   2fee4:	40020000 	.word	0x40020000
   2fee8:	e000ed00 	.word	0xe000ed00
   2feec:	c5acce55 	.word	0xc5acce55
   2fef0:	00150511 	.word	0x00150511
   2fef4:	00800001 	.word	0x00800001

0002fef8 <am_hal_itm_print>:
   2fef8:	7803      	ldrb	r3, [r0, #0]
   2fefa:	b1a3      	cbz	r3, 2ff26 <am_hal_itm_print+0x2e>
   2fefc:	4603      	mov	r3, r0
   2fefe:	f1c0 0c01 	rsb	ip, r0, #1
   2ff02:	eb0c 0103 	add.w	r1, ip, r3
   2ff06:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2ff0a:	2a00      	cmp	r2, #0
   2ff0c:	d1f9      	bne.n	2ff02 <am_hal_itm_print+0xa>
   2ff0e:	4401      	add	r1, r0
   2ff10:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   2ff14:	f810 cb01 	ldrb.w	ip, [r0], #1
   2ff18:	6813      	ldr	r3, [r2, #0]
   2ff1a:	2b00      	cmp	r3, #0
   2ff1c:	d0fc      	beq.n	2ff18 <am_hal_itm_print+0x20>
   2ff1e:	4288      	cmp	r0, r1
   2ff20:	f882 c000 	strb.w	ip, [r2]
   2ff24:	d1f6      	bne.n	2ff14 <am_hal_itm_print+0x1c>
   2ff26:	4770      	bx	lr

0002ff28 <am_hal_mcuctrl_control>:
   2ff28:	b570      	push	{r4, r5, r6, lr}
   2ff2a:	460c      	mov	r4, r1
   2ff2c:	b086      	sub	sp, #24
   2ff2e:	2805      	cmp	r0, #5
   2ff30:	f200 8129 	bhi.w	30186 <am_hal_mcuctrl_control+0x25e>
   2ff34:	e8df f010 	tbh	[pc, r0, lsl #1]
   2ff38:	0034001c 	.word	0x0034001c
   2ff3c:	00aa004c 	.word	0x00aa004c
   2ff40:	000600f7 	.word	0x000600f7
   2ff44:	2900      	cmp	r1, #0
   2ff46:	f000 811e 	beq.w	30186 <am_hal_mcuctrl_control+0x25e>
   2ff4a:	780b      	ldrb	r3, [r1, #0]
   2ff4c:	2b00      	cmp	r3, #0
   2ff4e:	f000 8120 	beq.w	30192 <am_hal_mcuctrl_control+0x26a>
   2ff52:	4ab0      	ldr	r2, [pc, #704]	; (30214 <am_hal_mcuctrl_control+0x2ec>)
   2ff54:	6853      	ldr	r3, [r2, #4]
   2ff56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   2ff5a:	6053      	str	r3, [r2, #4]
   2ff5c:	4aae      	ldr	r2, [pc, #696]	; (30218 <am_hal_mcuctrl_control+0x2f0>)
   2ff5e:	f8d2 312c 	ldr.w	r3, [r2, #300]	; 0x12c
   2ff62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2ff66:	2000      	movs	r0, #0
   2ff68:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
   2ff6c:	b006      	add	sp, #24
   2ff6e:	bd70      	pop	{r4, r5, r6, pc}
   2ff70:	f7ff ff2c 	bl	2fdcc <am_hal_interrupt_master_disable>
   2ff74:	4aa8      	ldr	r2, [pc, #672]	; (30218 <am_hal_mcuctrl_control+0x2f0>)
   2ff76:	9001      	str	r0, [sp, #4]
   2ff78:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   2ff7c:	9300      	str	r3, [sp, #0]
   2ff7e:	9b00      	ldr	r3, [sp, #0]
   2ff80:	f023 031f 	bic.w	r3, r3, #31
   2ff84:	9300      	str	r3, [sp, #0]
   2ff86:	9b00      	ldr	r3, [sp, #0]
   2ff88:	f043 0319 	orr.w	r3, r3, #25
   2ff8c:	9300      	str	r3, [sp, #0]
   2ff8e:	9b00      	ldr	r3, [sp, #0]
   2ff90:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
   2ff94:	9801      	ldr	r0, [sp, #4]
   2ff96:	f7ff ff1d 	bl	2fdd4 <am_hal_interrupt_master_set>
   2ff9a:	2000      	movs	r0, #0
   2ff9c:	b006      	add	sp, #24
   2ff9e:	bd70      	pop	{r4, r5, r6, pc}
   2ffa0:	f7ff ff14 	bl	2fdcc <am_hal_interrupt_master_disable>
   2ffa4:	4a9c      	ldr	r2, [pc, #624]	; (30218 <am_hal_mcuctrl_control+0x2f0>)
   2ffa6:	9002      	str	r0, [sp, #8]
   2ffa8:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   2ffac:	9300      	str	r3, [sp, #0]
   2ffae:	9b00      	ldr	r3, [sp, #0]
   2ffb0:	f023 031f 	bic.w	r3, r3, #31
   2ffb4:	9300      	str	r3, [sp, #0]
   2ffb6:	9b00      	ldr	r3, [sp, #0]
   2ffb8:	f043 0318 	orr.w	r3, r3, #24
   2ffbc:	9300      	str	r3, [sp, #0]
   2ffbe:	9b00      	ldr	r3, [sp, #0]
   2ffc0:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
   2ffc4:	9802      	ldr	r0, [sp, #8]
   2ffc6:	f7ff ff05 	bl	2fdd4 <am_hal_interrupt_master_set>
   2ffca:	2000      	movs	r0, #0
   2ffcc:	b006      	add	sp, #24
   2ffce:	bd70      	pop	{r4, r5, r6, pc}
   2ffd0:	2900      	cmp	r1, #0
   2ffd2:	f000 80d8 	beq.w	30186 <am_hal_mcuctrl_control+0x25e>
   2ffd6:	f7ff fef9 	bl	2fdcc <am_hal_interrupt_master_disable>
   2ffda:	7923      	ldrb	r3, [r4, #4]
   2ffdc:	9003      	str	r0, [sp, #12]
   2ffde:	b1cb      	cbz	r3, 30014 <am_hal_mcuctrl_control+0xec>
   2ffe0:	4b8c      	ldr	r3, [pc, #560]	; (30214 <am_hal_mcuctrl_control+0x2ec>)
   2ffe2:	6822      	ldr	r2, [r4, #0]
   2ffe4:	6819      	ldr	r1, [r3, #0]
   2ffe6:	79e5      	ldrb	r5, [r4, #7]
   2ffe8:	ea41 0002 	orr.w	r0, r1, r2
   2ffec:	6018      	str	r0, [r3, #0]
   2ffee:	2d00      	cmp	r5, #0
   2fff0:	f040 80e6 	bne.w	301c0 <am_hal_mcuctrl_control+0x298>
   2fff4:	685d      	ldr	r5, [r3, #4]
   2fff6:	ea25 0202 	bic.w	r2, r5, r2
   2fffa:	4d87      	ldr	r5, [pc, #540]	; (30218 <am_hal_mcuctrl_control+0x2f0>)
   2fffc:	605a      	str	r2, [r3, #4]
   2fffe:	2a00      	cmp	r2, #0
   30000:	f000 8100 	beq.w	30204 <am_hal_mcuctrl_control+0x2dc>
   30004:	f8d5 212c 	ldr.w	r2, [r5, #300]	; 0x12c
   30008:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   3000c:	f8c5 212c 	str.w	r2, [r5, #300]	; 0x12c
   30010:	b901      	cbnz	r1, 30014 <am_hal_mcuctrl_control+0xec>
   30012:	b910      	cbnz	r0, 3001a <am_hal_mcuctrl_control+0xf2>
   30014:	79a3      	ldrb	r3, [r4, #6]
   30016:	b39b      	cbz	r3, 30080 <am_hal_mcuctrl_control+0x158>
   30018:	4b7e      	ldr	r3, [pc, #504]	; (30214 <am_hal_mcuctrl_control+0x2ec>)
   3001a:	4a80      	ldr	r2, [pc, #512]	; (3021c <am_hal_mcuctrl_control+0x2f4>)
   3001c:	4980      	ldr	r1, [pc, #512]	; (30220 <am_hal_mcuctrl_control+0x2f8>)
   3001e:	6812      	ldr	r2, [r2, #0]
   30020:	6808      	ldr	r0, [r1, #0]
   30022:	4980      	ldr	r1, [pc, #512]	; (30224 <am_hal_mcuctrl_control+0x2fc>)
   30024:	4d7c      	ldr	r5, [pc, #496]	; (30218 <am_hal_mcuctrl_control+0x2f0>)
   30026:	0192      	lsls	r2, r2, #6
   30028:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   3002c:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
   30030:	4302      	orrs	r2, r0
   30032:	4311      	orrs	r1, r2
   30034:	2201      	movs	r2, #1
   30036:	721a      	strb	r2, [r3, #8]
   30038:	f8c5 1128 	str.w	r1, [r5, #296]	; 0x128
   3003c:	f8d5 312c 	ldr.w	r3, [r5, #300]	; 0x12c
   30040:	f023 0322 	bic.w	r3, r3, #34	; 0x22
   30044:	f043 0202 	orr.w	r2, r3, #2
   30048:	f8c5 212c 	str.w	r2, [r5, #300]	; 0x12c
   3004c:	f043 0203 	orr.w	r2, r3, #3
   30050:	f8c5 212c 	str.w	r2, [r5, #300]	; 0x12c
   30054:	f043 0213 	orr.w	r2, r3, #19
   30058:	f043 031b 	orr.w	r3, r3, #27
   3005c:	f8c5 212c 	str.w	r2, [r5, #300]	; 0x12c
   30060:	2005      	movs	r0, #5
   30062:	f8c5 312c 	str.w	r3, [r5, #300]	; 0x12c
   30066:	f000 f9d9 	bl	3041c <am_hal_delay_us>
   3006a:	7962      	ldrb	r2, [r4, #5]
   3006c:	f8d5 312c 	ldr.w	r3, [r5, #300]	; 0x12c
   30070:	2a00      	cmp	r2, #0
   30072:	f040 80ab 	bne.w	301cc <am_hal_mcuctrl_control+0x2a4>
   30076:	f023 0310 	bic.w	r3, r3, #16
   3007a:	4a67      	ldr	r2, [pc, #412]	; (30218 <am_hal_mcuctrl_control+0x2f0>)
   3007c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
   30080:	9803      	ldr	r0, [sp, #12]
   30082:	f7ff fea7 	bl	2fdd4 <am_hal_interrupt_master_set>
   30086:	2000      	movs	r0, #0
   30088:	b006      	add	sp, #24
   3008a:	bd70      	pop	{r4, r5, r6, pc}
   3008c:	2900      	cmp	r1, #0
   3008e:	d07a      	beq.n	30186 <am_hal_mcuctrl_control+0x25e>
   30090:	f7ff fe9c 	bl	2fdcc <am_hal_interrupt_master_disable>
   30094:	7923      	ldrb	r3, [r4, #4]
   30096:	9004      	str	r0, [sp, #16]
   30098:	2b00      	cmp	r3, #0
   3009a:	d076      	beq.n	3018a <am_hal_mcuctrl_control+0x262>
   3009c:	4b5d      	ldr	r3, [pc, #372]	; (30214 <am_hal_mcuctrl_control+0x2ec>)
   3009e:	6822      	ldr	r2, [r4, #0]
   300a0:	6819      	ldr	r1, [r3, #0]
   300a2:	79e5      	ldrb	r5, [r4, #7]
   300a4:	ea41 0002 	orr.w	r0, r1, r2
   300a8:	6018      	str	r0, [r3, #0]
   300aa:	2d00      	cmp	r5, #0
   300ac:	f040 808b 	bne.w	301c6 <am_hal_mcuctrl_control+0x29e>
   300b0:	685d      	ldr	r5, [r3, #4]
   300b2:	ea25 0202 	bic.w	r2, r5, r2
   300b6:	605a      	str	r2, [r3, #4]
   300b8:	2a00      	cmp	r2, #0
   300ba:	f000 80b5 	beq.w	30228 <am_hal_mcuctrl_control+0x300>
   300be:	4a56      	ldr	r2, [pc, #344]	; (30218 <am_hal_mcuctrl_control+0x2f0>)
   300c0:	f8d2 312c 	ldr.w	r3, [r2, #300]	; 0x12c
   300c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   300c8:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
   300cc:	2900      	cmp	r1, #0
   300ce:	d15c      	bne.n	3018a <am_hal_mcuctrl_control+0x262>
   300d0:	2800      	cmp	r0, #0
   300d2:	d05a      	beq.n	3018a <am_hal_mcuctrl_control+0x262>
   300d4:	4b51      	ldr	r3, [pc, #324]	; (3021c <am_hal_mcuctrl_control+0x2f4>)
   300d6:	4a52      	ldr	r2, [pc, #328]	; (30220 <am_hal_mcuctrl_control+0x2f8>)
   300d8:	681b      	ldr	r3, [r3, #0]
   300da:	6810      	ldr	r0, [r2, #0]
   300dc:	4951      	ldr	r1, [pc, #324]	; (30224 <am_hal_mcuctrl_control+0x2fc>)
   300de:	4a4e      	ldr	r2, [pc, #312]	; (30218 <am_hal_mcuctrl_control+0x2f0>)
   300e0:	019b      	lsls	r3, r3, #6
   300e2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   300e6:	f403 7370 	and.w	r3, r3, #960	; 0x3c0
   300ea:	4303      	orrs	r3, r0
   300ec:	4319      	orrs	r1, r3
   300ee:	f8c2 1128 	str.w	r1, [r2, #296]	; 0x128
   300f2:	f8d2 312c 	ldr.w	r3, [r2, #300]	; 0x12c
   300f6:	7961      	ldrb	r1, [r4, #5]
   300f8:	f043 0023 	orr.w	r0, r3, #35	; 0x23
   300fc:	f043 0422 	orr.w	r4, r3, #34	; 0x22
   30100:	f8c2 412c 	str.w	r4, [r2, #300]	; 0x12c
   30104:	f8c2 012c 	str.w	r0, [r2, #300]	; 0x12c
   30108:	2900      	cmp	r1, #0
   3010a:	d152      	bne.n	301b2 <am_hal_mcuctrl_control+0x28a>
   3010c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
   30110:	f043 030b 	orr.w	r3, r3, #11
   30114:	4a40      	ldr	r2, [pc, #256]	; (30218 <am_hal_mcuctrl_control+0x2f0>)
   30116:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
   3011a:	9804      	ldr	r0, [sp, #16]
   3011c:	f7ff fe5a 	bl	2fdd4 <am_hal_interrupt_master_set>
   30120:	2000      	movs	r0, #0
   30122:	b006      	add	sp, #24
   30124:	bd70      	pop	{r4, r5, r6, pc}
   30126:	b371      	cbz	r1, 30186 <am_hal_mcuctrl_control+0x25e>
   30128:	f7ff fe50 	bl	2fdcc <am_hal_interrupt_master_disable>
   3012c:	7923      	ldrb	r3, [r4, #4]
   3012e:	9005      	str	r0, [sp, #20]
   30130:	2b00      	cmp	r3, #0
   30132:	d152      	bne.n	301da <am_hal_mcuctrl_control+0x2b2>
   30134:	4b37      	ldr	r3, [pc, #220]	; (30214 <am_hal_mcuctrl_control+0x2ec>)
   30136:	681a      	ldr	r2, [r3, #0]
   30138:	b10a      	cbz	r2, 3013e <am_hal_mcuctrl_control+0x216>
   3013a:	79a2      	ldrb	r2, [r4, #6]
   3013c:	b1ea      	cbz	r2, 3017a <am_hal_mcuctrl_control+0x252>
   3013e:	4a37      	ldr	r2, [pc, #220]	; (3021c <am_hal_mcuctrl_control+0x2f4>)
   30140:	4937      	ldr	r1, [pc, #220]	; (30220 <am_hal_mcuctrl_control+0x2f8>)
   30142:	6812      	ldr	r2, [r2, #0]
   30144:	6809      	ldr	r1, [r1, #0]
   30146:	0192      	lsls	r2, r2, #6
   30148:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   3014c:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
   30150:	430a      	orrs	r2, r1
   30152:	f042 7244 	orr.w	r2, r2, #51380224	; 0x3100000
   30156:	4930      	ldr	r1, [pc, #192]	; (30218 <am_hal_mcuctrl_control+0x2f0>)
   30158:	2000      	movs	r0, #0
   3015a:	f442 32f8 	orr.w	r2, r2, #126976	; 0x1f000
   3015e:	6018      	str	r0, [r3, #0]
   30160:	7218      	strb	r0, [r3, #8]
   30162:	f8c1 2128 	str.w	r2, [r1, #296]	; 0x128
   30166:	f8d1 312c 	ldr.w	r3, [r1, #300]	; 0x12c
   3016a:	f423 7395 	bic.w	r3, r3, #298	; 0x12a
   3016e:	f023 0301 	bic.w	r3, r3, #1
   30172:	f043 0302 	orr.w	r3, r3, #2
   30176:	f8c1 312c 	str.w	r3, [r1, #300]	; 0x12c
   3017a:	9805      	ldr	r0, [sp, #20]
   3017c:	f7ff fe2a 	bl	2fdd4 <am_hal_interrupt_master_set>
   30180:	2000      	movs	r0, #0
   30182:	b006      	add	sp, #24
   30184:	bd70      	pop	{r4, r5, r6, pc}
   30186:	2006      	movs	r0, #6
   30188:	e6f0      	b.n	2ff6c <am_hal_mcuctrl_control+0x44>
   3018a:	79a3      	ldrb	r3, [r4, #6]
   3018c:	2b00      	cmp	r3, #0
   3018e:	d1a1      	bne.n	300d4 <am_hal_mcuctrl_control+0x1ac>
   30190:	e7c3      	b.n	3011a <am_hal_mcuctrl_control+0x1f2>
   30192:	4b20      	ldr	r3, [pc, #128]	; (30214 <am_hal_mcuctrl_control+0x2ec>)
   30194:	6858      	ldr	r0, [r3, #4]
   30196:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
   3019a:	6058      	str	r0, [r3, #4]
   3019c:	2800      	cmp	r0, #0
   3019e:	f47f aedd 	bne.w	2ff5c <am_hal_mcuctrl_control+0x34>
   301a2:	4b1d      	ldr	r3, [pc, #116]	; (30218 <am_hal_mcuctrl_control+0x2f0>)
   301a4:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
   301a8:	f360 12c7 	bfi	r2, r0, #7, #1
   301ac:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   301b0:	e6dc      	b.n	2ff6c <am_hal_mcuctrl_control+0x44>
   301b2:	f423 7391 	bic.w	r3, r3, #290	; 0x122
   301b6:	f023 0301 	bic.w	r3, r3, #1
   301ba:	f443 7391 	orr.w	r3, r3, #290	; 0x122
   301be:	e7a9      	b.n	30114 <am_hal_mcuctrl_control+0x1ec>
   301c0:	685d      	ldr	r5, [r3, #4]
   301c2:	432a      	orrs	r2, r5
   301c4:	e719      	b.n	2fffa <am_hal_mcuctrl_control+0xd2>
   301c6:	685d      	ldr	r5, [r3, #4]
   301c8:	432a      	orrs	r2, r5
   301ca:	e774      	b.n	300b6 <am_hal_mcuctrl_control+0x18e>
   301cc:	f423 738c 	bic.w	r3, r3, #280	; 0x118
   301d0:	f023 0301 	bic.w	r3, r3, #1
   301d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   301d8:	e74f      	b.n	3007a <am_hal_mcuctrl_control+0x152>
   301da:	4b0e      	ldr	r3, [pc, #56]	; (30214 <am_hal_mcuctrl_control+0x2ec>)
   301dc:	6820      	ldr	r0, [r4, #0]
   301de:	681a      	ldr	r2, [r3, #0]
   301e0:	79e5      	ldrb	r5, [r4, #7]
   301e2:	ea22 0200 	bic.w	r2, r2, r0
   301e6:	43c1      	mvns	r1, r0
   301e8:	601a      	str	r2, [r3, #0]
   301ea:	b365      	cbz	r5, 30246 <am_hal_mcuctrl_control+0x31e>
   301ec:	6859      	ldr	r1, [r3, #4]
   301ee:	4301      	orrs	r1, r0
   301f0:	4809      	ldr	r0, [pc, #36]	; (30218 <am_hal_mcuctrl_control+0x2f0>)
   301f2:	6059      	str	r1, [r3, #4]
   301f4:	b301      	cbz	r1, 30238 <am_hal_mcuctrl_control+0x310>
   301f6:	f8d0 112c 	ldr.w	r1, [r0, #300]	; 0x12c
   301fa:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   301fe:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
   30202:	e799      	b.n	30138 <am_hal_mcuctrl_control+0x210>
   30204:	f8d5 612c 	ldr.w	r6, [r5, #300]	; 0x12c
   30208:	f362 16c7 	bfi	r6, r2, #7, #1
   3020c:	f8c5 612c 	str.w	r6, [r5, #300]	; 0x12c
   30210:	e6fe      	b.n	30010 <am_hal_mcuctrl_control+0xe8>
   30212:	bf00      	nop
   30214:	10019cb0 	.word	0x10019cb0
   30218:	40020000 	.word	0x40020000
   3021c:	10004a94 	.word	0x10004a94
   30220:	10004a90 	.word	0x10004a90
   30224:	0fff8c00 	.word	0x0fff8c00
   30228:	4b08      	ldr	r3, [pc, #32]	; (3024c <am_hal_mcuctrl_control+0x324>)
   3022a:	f8d3 512c 	ldr.w	r5, [r3, #300]	; 0x12c
   3022e:	f362 15c7 	bfi	r5, r2, #7, #1
   30232:	f8c3 512c 	str.w	r5, [r3, #300]	; 0x12c
   30236:	e749      	b.n	300cc <am_hal_mcuctrl_control+0x1a4>
   30238:	f8d0 512c 	ldr.w	r5, [r0, #300]	; 0x12c
   3023c:	f361 15c7 	bfi	r5, r1, #7, #1
   30240:	f8c0 512c 	str.w	r5, [r0, #300]	; 0x12c
   30244:	e778      	b.n	30138 <am_hal_mcuctrl_control+0x210>
   30246:	6858      	ldr	r0, [r3, #4]
   30248:	4001      	ands	r1, r0
   3024a:	e7d1      	b.n	301f0 <am_hal_mcuctrl_control+0x2c8>
   3024c:	40020000 	.word	0x40020000

00030250 <am_hal_mram_info_read>:
   30250:	b9c0      	cbnz	r0, 30284 <am_hal_mram_info_read+0x34>
   30252:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   30256:	d228      	bcs.n	302aa <am_hal_mram_info_read+0x5a>
   30258:	1888      	adds	r0, r1, r2
   3025a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   3025e:	d824      	bhi.n	302aa <am_hal_mram_info_read+0x5a>
   30260:	f101 5184 	add.w	r1, r1, #276824064	; 0x10800000
   30264:	0089      	lsls	r1, r1, #2
   30266:	b312      	cbz	r2, 302ae <am_hal_mram_info_read+0x5e>
   30268:	b410      	push	{r4}
   3026a:	2000      	movs	r0, #0
   3026c:	3001      	adds	r0, #1
   3026e:	680c      	ldr	r4, [r1, #0]
   30270:	f843 4b04 	str.w	r4, [r3], #4
   30274:	4282      	cmp	r2, r0
   30276:	f101 0104 	add.w	r1, r1, #4
   3027a:	d1f7      	bne.n	3026c <am_hal_mram_info_read+0x1c>
   3027c:	2000      	movs	r0, #0
   3027e:	f85d 4b04 	ldr.w	r4, [sp], #4
   30282:	4770      	bx	lr
   30284:	2801      	cmp	r0, #1
   30286:	d10e      	bne.n	302a6 <am_hal_mram_info_read+0x56>
   30288:	f5a1 6090 	sub.w	r0, r1, #1152	; 0x480
   3028c:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   30290:	d20b      	bcs.n	302aa <am_hal_mram_info_read+0x5a>
   30292:	1888      	adds	r0, r1, r2
   30294:	f5b0 6fc0 	cmp.w	r0, #1536	; 0x600
   30298:	d807      	bhi.n	302aa <am_hal_mram_info_read+0x5a>
   3029a:	f101 5184 	add.w	r1, r1, #276824064	; 0x10800000
   3029e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
   302a2:	0089      	lsls	r1, r1, #2
   302a4:	e7df      	b.n	30266 <am_hal_mram_info_read+0x16>
   302a6:	2001      	movs	r0, #1
   302a8:	4770      	bx	lr
   302aa:	2002      	movs	r0, #2
   302ac:	4770      	bx	lr
   302ae:	2000      	movs	r0, #0
   302b0:	4770      	bx	lr
   302b2:	bf00      	nop

000302b4 <am_hal_sysctrl_sleep>:
   302b4:	b530      	push	{r4, r5, lr}
   302b6:	b083      	sub	sp, #12
   302b8:	f10d 4370 	add.w	r3, sp, #4026531840	; 0xf0000000
   302bc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   302c0:	d300      	bcc.n	302c4 <am_hal_sysctrl_sleep+0x10>
   302c2:	e7fe      	b.n	302c2 <am_hal_sysctrl_sleep+0xe>
   302c4:	4604      	mov	r4, r0
   302c6:	f7ff fd81 	bl	2fdcc <am_hal_interrupt_master_disable>
   302ca:	4935      	ldr	r1, [pc, #212]	; (303a0 <am_hal_sysctrl_sleep+0xec>)
   302cc:	9001      	str	r0, [sp, #4]
   302ce:	f8d1 3108 	ldr.w	r3, [r1, #264]	; 0x108
   302d2:	f3c3 1301 	ubfx	r3, r3, #4, #2
   302d6:	b384      	cbz	r4, 3033a <am_hal_sysctrl_sleep+0x86>
   302d8:	4a32      	ldr	r2, [pc, #200]	; (303a4 <am_hal_sysctrl_sleep+0xf0>)
   302da:	f8d2 5250 	ldr.w	r5, [r2, #592]	; 0x250
   302de:	f015 0501 	ands.w	r5, r5, #1
   302e2:	d12a      	bne.n	3033a <am_hal_sysctrl_sleep+0x86>
   302e4:	2b03      	cmp	r3, #3
   302e6:	d03a      	beq.n	3035e <am_hal_sysctrl_sleep+0xaa>
   302e8:	4a2f      	ldr	r2, [pc, #188]	; (303a8 <am_hal_sysctrl_sleep+0xf4>)
   302ea:	6913      	ldr	r3, [r2, #16]
   302ec:	f043 0304 	orr.w	r3, r3, #4
   302f0:	2100      	movs	r1, #0
   302f2:	6113      	str	r3, [r2, #16]
   302f4:	2001      	movs	r0, #1
   302f6:	f7ff fb85 	bl	2fa04 <am_hal_daxi_control>
   302fa:	bf30      	wfi
   302fc:	f3bf 8f6f 	isb	sy
   30300:	b33d      	cbz	r5, 30352 <am_hal_sysctrl_sleep+0x9e>
   30302:	2001      	movs	r0, #1
   30304:	f002 fb20 	bl	32948 <buck_ldo_update_override>
   30308:	4b26      	ldr	r3, [pc, #152]	; (303a4 <am_hal_sysctrl_sleep+0xf0>)
   3030a:	f8d3 2380 	ldr.w	r2, [r3, #896]	; 0x380
   3030e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
   30312:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
   30316:	f8d3 2380 	ldr.w	r2, [r3, #896]	; 0x380
   3031a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
   3031e:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
   30322:	f8d3 2370 	ldr.w	r2, [r3, #880]	; 0x370
   30326:	f36f 5219 	bfc	r2, #20, #6
   3032a:	f8c3 2370 	str.w	r2, [r3, #880]	; 0x370
   3032e:	9801      	ldr	r0, [sp, #4]
   30330:	b003      	add	sp, #12
   30332:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   30336:	f7ff bd4d 	b.w	2fdd4 <am_hal_interrupt_master_set>
   3033a:	4a1b      	ldr	r2, [pc, #108]	; (303a8 <am_hal_sysctrl_sleep+0xf4>)
   3033c:	6913      	ldr	r3, [r2, #16]
   3033e:	f023 0304 	bic.w	r3, r3, #4
   30342:	2100      	movs	r1, #0
   30344:	6113      	str	r3, [r2, #16]
   30346:	2001      	movs	r0, #1
   30348:	f7ff fb5c 	bl	2fa04 <am_hal_daxi_control>
   3034c:	bf30      	wfi
   3034e:	f3bf 8f6f 	isb	sy
   30352:	9801      	ldr	r0, [sp, #4]
   30354:	b003      	add	sp, #12
   30356:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   3035a:	f7ff bd3b 	b.w	2fdd4 <am_hal_interrupt_master_set>
   3035e:	690b      	ldr	r3, [r1, #16]
   30360:	055b      	lsls	r3, r3, #21
   30362:	d4c1      	bmi.n	302e8 <am_hal_sysctrl_sleep+0x34>
   30364:	688b      	ldr	r3, [r1, #8]
   30366:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
   3036a:	d1bd      	bne.n	302e8 <am_hal_sysctrl_sleep+0x34>
   3036c:	490f      	ldr	r1, [pc, #60]	; (303ac <am_hal_sysctrl_sleep+0xf8>)
   3036e:	f8d2 3370 	ldr.w	r3, [r2, #880]	; 0x370
   30372:	6809      	ldr	r1, [r1, #0]
   30374:	f361 5319 	bfi	r3, r1, #20, #6
   30378:	f8c2 3370 	str.w	r3, [r2, #880]	; 0x370
   3037c:	f8d2 3380 	ldr.w	r3, [r2, #896]	; 0x380
   30380:	f365 73df 	bfi	r3, r5, #31, #1
   30384:	f8c2 3380 	str.w	r3, [r2, #896]	; 0x380
   30388:	f8d2 3380 	ldr.w	r3, [r2, #896]	; 0x380
   3038c:	f365 739e 	bfi	r3, r5, #30, #1
   30390:	4628      	mov	r0, r5
   30392:	f8c2 3380 	str.w	r3, [r2, #896]	; 0x380
   30396:	f002 fad7 	bl	32948 <buck_ldo_update_override>
   3039a:	4625      	mov	r5, r4
   3039c:	e7a4      	b.n	302e8 <am_hal_sysctrl_sleep+0x34>
   3039e:	bf00      	nop
   303a0:	40021000 	.word	0x40021000
   303a4:	40020000 	.word	0x40020000
   303a8:	e000ed00 	.word	0xe000ed00
   303ac:	10004aa0 	.word	0x10004aa0

000303b0 <am_hal_tpiu_enable>:
   303b0:	4b16      	ldr	r3, [pc, #88]	; (3040c <am_hal_tpiu_enable+0x5c>)
   303b2:	4a17      	ldr	r2, [pc, #92]	; (30410 <am_hal_tpiu_enable+0x60>)
   303b4:	b410      	push	{r4}
   303b6:	2101      	movs	r1, #1
   303b8:	2400      	movs	r4, #0
   303ba:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   303be:	6059      	str	r1, [r3, #4]
   303c0:	f5a0 4361 	sub.w	r3, r0, #57600	; 0xe100
   303c4:	4293      	cmp	r3, r2
   303c6:	4a11      	ldr	r2, [pc, #68]	; (3040c <am_hal_tpiu_enable+0x5c>)
   303c8:	bf9a      	itte	ls
   303ca:	4b12      	ldrls	r3, [pc, #72]	; (30414 <am_hal_tpiu_enable+0x64>)
   303cc:	fbb3 f0f0 	udivls	r0, r3, r0
   303d0:	202f      	movhi	r0, #47	; 0x2f
   303d2:	4b11      	ldr	r3, [pc, #68]	; (30418 <am_hal_tpiu_enable+0x68>)
   303d4:	bf98      	it	ls
   303d6:	f100 30ff 	addls.w	r0, r0, #4294967295	; 0xffffffff
   303da:	2102      	movs	r1, #2
   303dc:	2400      	movs	r4, #0
   303de:	6110      	str	r0, [r2, #16]
   303e0:	f8c2 10f0 	str.w	r1, [r2, #240]	; 0xf0
   303e4:	f8c2 4f00 	str.w	r4, [r2, #3840]	; 0xf00
   303e8:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
   303ec:	f361 0243 	bfi	r2, r1, #1, #3
   303f0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
   303f4:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
   303f8:	f042 0201 	orr.w	r2, r2, #1
   303fc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
   30400:	f85d 4b04 	ldr.w	r4, [sp], #4
   30404:	2064      	movs	r0, #100	; 0x64
   30406:	f000 b809 	b.w	3041c <am_hal_delay_us>
   3040a:	bf00      	nop
   3040c:	e0040000 	.word	0xe0040000
   30410:	001da380 	.word	0x001da380
   30414:	02dc6c00 	.word	0x02dc6c00
   30418:	40020000 	.word	0x40020000

0003041c <am_hal_delay_us>:
   3041c:	4b09      	ldr	r3, [pc, #36]	; (30444 <am_hal_delay_us+0x28>)
   3041e:	681b      	ldr	r3, [r3, #0]
   30420:	f3c3 03c1 	ubfx	r3, r3, #3, #2
   30424:	2b02      	cmp	r3, #2
   30426:	bf0b      	itete	eq
   30428:	0182      	lsleq	r2, r0, #6
   3042a:	0142      	lslne	r2, r0, #5
   3042c:	2015      	moveq	r0, #21
   3042e:	200f      	movne	r0, #15
   30430:	4282      	cmp	r2, r0
   30432:	d906      	bls.n	30442 <am_hal_delay_us+0x26>
   30434:	4b04      	ldr	r3, [pc, #16]	; (30448 <am_hal_delay_us+0x2c>)
   30436:	b082      	sub	sp, #8
   30438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   3043a:	9301      	str	r3, [sp, #4]
   3043c:	1a10      	subs	r0, r2, r0
   3043e:	b002      	add	sp, #8
   30440:	4718      	bx	r3
   30442:	4770      	bx	lr
   30444:	40021000 	.word	0x40021000
   30448:	00042640 	.word	0x00042640

0003044c <am_hal_delay_us_status_change>:
   3044c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   30450:	460c      	mov	r4, r1
   30452:	6809      	ldr	r1, [r1, #0]
   30454:	4011      	ands	r1, r2
   30456:	428b      	cmp	r3, r1
   30458:	d01a      	beq.n	30490 <am_hal_delay_us_status_change+0x44>
   3045a:	f100 39ff 	add.w	r9, r0, #4294967295	; 0xffffffff
   3045e:	b1d0      	cbz	r0, 30496 <am_hal_delay_us_status_change+0x4a>
   30460:	461e      	mov	r6, r3
   30462:	4b0e      	ldr	r3, [pc, #56]	; (3049c <am_hal_delay_us_status_change+0x50>)
   30464:	4f0e      	ldr	r7, [pc, #56]	; (304a0 <am_hal_delay_us_status_change+0x54>)
   30466:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
   3046a:	4615      	mov	r5, r2
   3046c:	e002      	b.n	30474 <am_hal_delay_us_status_change+0x28>
   3046e:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   30472:	d010      	beq.n	30496 <am_hal_delay_us_status_change+0x4a>
   30474:	6838      	ldr	r0, [r7, #0]
   30476:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   3047a:	2802      	cmp	r0, #2
   3047c:	bf14      	ite	ne
   3047e:	2011      	movne	r0, #17
   30480:	202b      	moveq	r0, #43	; 0x2b
   30482:	47c0      	blx	r8
   30484:	6820      	ldr	r0, [r4, #0]
   30486:	4028      	ands	r0, r5
   30488:	42b0      	cmp	r0, r6
   3048a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   3048e:	d1ee      	bne.n	3046e <am_hal_delay_us_status_change+0x22>
   30490:	2000      	movs	r0, #0
   30492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   30496:	2004      	movs	r0, #4
   30498:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3049c:	00042640 	.word	0x00042640
   304a0:	40021000 	.word	0x40021000

000304a4 <am_hal_delay_us_status_check>:
   304a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   304a8:	f89d c020 	ldrb.w	ip, [sp, #32]
   304ac:	f8df 8068 	ldr.w	r8, [pc, #104]	; 30518 <am_hal_delay_us_status_check+0x74>
   304b0:	f8df 9068 	ldr.w	r9, [pc, #104]	; 3051c <am_hal_delay_us_status_check+0x78>
   304b4:	4604      	mov	r4, r0
   304b6:	460d      	mov	r5, r1
   304b8:	4616      	mov	r6, r2
   304ba:	461f      	mov	r7, r3
   304bc:	f1bc 0f00 	cmp.w	ip, #0
   304c0:	d00d      	beq.n	304de <am_hal_delay_us_status_check+0x3a>
   304c2:	e020      	b.n	30506 <am_hal_delay_us_status_check+0x62>
   304c4:	b324      	cbz	r4, 30510 <am_hal_delay_us_status_check+0x6c>
   304c6:	f8d8 3000 	ldr.w	r3, [r8]
   304ca:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
   304ce:	f3c3 03c1 	ubfx	r3, r3, #3, #2
   304d2:	2b02      	cmp	r3, #2
   304d4:	bf14      	ite	ne
   304d6:	2011      	movne	r0, #17
   304d8:	202b      	moveq	r0, #43	; 0x2b
   304da:	4790      	blx	r2
   304dc:	3c01      	subs	r4, #1
   304de:	6828      	ldr	r0, [r5, #0]
   304e0:	4030      	ands	r0, r6
   304e2:	42b8      	cmp	r0, r7
   304e4:	d0ee      	beq.n	304c4 <am_hal_delay_us_status_check+0x20>
   304e6:	2000      	movs	r0, #0
   304e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   304ec:	b184      	cbz	r4, 30510 <am_hal_delay_us_status_check+0x6c>
   304ee:	f8d8 3000 	ldr.w	r3, [r8]
   304f2:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
   304f6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
   304fa:	2b02      	cmp	r3, #2
   304fc:	bf14      	ite	ne
   304fe:	2011      	movne	r0, #17
   30500:	202b      	moveq	r0, #43	; 0x2b
   30502:	4790      	blx	r2
   30504:	3c01      	subs	r4, #1
   30506:	6828      	ldr	r0, [r5, #0]
   30508:	4030      	ands	r0, r6
   3050a:	42b8      	cmp	r0, r7
   3050c:	d1ee      	bne.n	304ec <am_hal_delay_us_status_check+0x48>
   3050e:	e7ea      	b.n	304e6 <am_hal_delay_us_status_check+0x42>
   30510:	2004      	movs	r0, #4
   30512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   30516:	bf00      	nop
   30518:	40021000 	.word	0x40021000
   3051c:	00042640 	.word	0x00042640

00030520 <ForceFIFOpop>:
   30520:	4b1e      	ldr	r3, [pc, #120]	; (3059c <ForceFIFOpop+0x7c>)
   30522:	681a      	ldr	r2, [r3, #0]
   30524:	b570      	push	{r4, r5, r6, lr}
   30526:	0754      	lsls	r4, r2, #29
   30528:	4605      	mov	r5, r0
   3052a:	d402      	bmi.n	30532 <ForceFIFOpop+0x12>
   3052c:	681b      	ldr	r3, [r3, #0]
   3052e:	07d8      	lsls	r0, r3, #31
   30530:	d409      	bmi.n	30546 <ForceFIFOpop+0x26>
   30532:	4b1a      	ldr	r3, [pc, #104]	; (3059c <ForceFIFOpop+0x7c>)
   30534:	681a      	ldr	r2, [r3, #0]
   30536:	07d1      	lsls	r1, r2, #31
   30538:	d526      	bpl.n	30588 <ForceFIFOpop+0x68>
   3053a:	681a      	ldr	r2, [r3, #0]
   3053c:	0752      	lsls	r2, r2, #29
   3053e:	d523      	bpl.n	30588 <ForceFIFOpop+0x68>
   30540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   30542:	2b00      	cmp	r3, #0
   30544:	da20      	bge.n	30588 <ForceFIFOpop+0x68>
   30546:	4c15      	ldr	r4, [pc, #84]	; (3059c <ForceFIFOpop+0x7c>)
   30548:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   3054a:	f013 6f7f 	tst.w	r3, #267386880	; 0xff00000
   3054e:	d110      	bne.n	30572 <ForceFIFOpop+0x52>
   30550:	4e13      	ldr	r6, [pc, #76]	; (305a0 <ForceFIFOpop+0x80>)
   30552:	682b      	ldr	r3, [r5, #0]
   30554:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   30558:	42b3      	cmp	r3, r6
   3055a:	f04f 0237 	mov.w	r2, #55	; 0x37
   3055e:	f04f 001e 	mov.w	r0, #30
   30562:	d112      	bne.n	3058a <ForceFIFOpop+0x6a>
   30564:	60a2      	str	r2, [r4, #8]
   30566:	f7ff ff59 	bl	3041c <am_hal_delay_us>
   3056a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   3056c:	f013 6f7f 	tst.w	r3, #267386880	; 0xff00000
   30570:	d0ef      	beq.n	30552 <ForceFIFOpop+0x32>
   30572:	4b0a      	ldr	r3, [pc, #40]	; (3059c <ForceFIFOpop+0x7c>)
   30574:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   30576:	f012 6f7f 	tst.w	r2, #267386880	; 0xff00000
   3057a:	d005      	beq.n	30588 <ForceFIFOpop+0x68>
   3057c:	2100      	movs	r1, #0
   3057e:	6399      	str	r1, [r3, #56]	; 0x38
   30580:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   30582:	f012 6f7f 	tst.w	r2, #267386880	; 0xff00000
   30586:	d1fa      	bne.n	3057e <ForceFIFOpop+0x5e>
   30588:	bd70      	pop	{r4, r5, r6, pc}
   3058a:	201e      	movs	r0, #30
   3058c:	f7ff ff46 	bl	3041c <am_hal_delay_us>
   30590:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   30592:	f013 6f7f 	tst.w	r3, #267386880	; 0xff00000
   30596:	d0dc      	beq.n	30552 <ForceFIFOpop+0x32>
   30598:	e7eb      	b.n	30572 <ForceFIFOpop+0x52>
   3059a:	bf00      	nop
   3059c:	40038000 	.word	0x40038000
   305a0:	01afafaf 	.word	0x01afafaf

000305a4 <am_hal_adc_initialize>:
   305a4:	2800      	cmp	r0, #0
   305a6:	d169      	bne.n	3067c <am_hal_adc_initialize+0xd8>
   305a8:	2900      	cmp	r1, #0
   305aa:	d069      	beq.n	30680 <am_hal_adc_initialize+0xdc>
   305ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   305ae:	4b35      	ldr	r3, [pc, #212]	; (30684 <am_hal_adc_initialize+0xe0>)
   305b0:	78dd      	ldrb	r5, [r3, #3]
   305b2:	f015 0501 	ands.w	r5, r5, #1
   305b6:	d131      	bne.n	3061c <am_hal_adc_initialize+0x78>
   305b8:	681a      	ldr	r2, [r3, #0]
   305ba:	4833      	ldr	r0, [pc, #204]	; (30688 <am_hal_adc_initialize+0xe4>)
   305bc:	4c33      	ldr	r4, [pc, #204]	; (3068c <am_hal_adc_initialize+0xe8>)
   305be:	f002 427e 	and.w	r2, r2, #4261412864	; 0xfe000000
   305c2:	4302      	orrs	r2, r0
   305c4:	4832      	ldr	r0, [pc, #200]	; (30690 <am_hal_adc_initialize+0xec>)
   305c6:	e9c3 2500 	strd	r2, r5, [r3]
   305ca:	2201      	movs	r2, #1
   305cc:	6005      	str	r5, [r0, #0]
   305ce:	600b      	str	r3, [r1, #0]
   305d0:	4610      	mov	r0, r2
   305d2:	4623      	mov	r3, r4
   305d4:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
   305d8:	f7ff fe3a 	bl	30250 <am_hal_mram_info_read>
   305dc:	2201      	movs	r2, #1
   305de:	1d23      	adds	r3, r4, #4
   305e0:	f240 41c1 	movw	r1, #1217	; 0x4c1
   305e4:	4607      	mov	r7, r0
   305e6:	4610      	mov	r0, r2
   305e8:	f7ff fe32 	bl	30250 <am_hal_mram_info_read>
   305ec:	2201      	movs	r2, #1
   305ee:	f104 0308 	add.w	r3, r4, #8
   305f2:	4606      	mov	r6, r0
   305f4:	f240 41c2 	movw	r1, #1218	; 0x4c2
   305f8:	4610      	mov	r0, r2
   305fa:	f7ff fe29 	bl	30250 <am_hal_mram_info_read>
   305fe:	6822      	ldr	r2, [r4, #0]
   30600:	3201      	adds	r2, #1
   30602:	d00d      	beq.n	30620 <am_hal_adc_initialize+0x7c>
   30604:	6862      	ldr	r2, [r4, #4]
   30606:	3201      	adds	r2, #1
   30608:	d00a      	beq.n	30620 <am_hal_adc_initialize+0x7c>
   3060a:	68a2      	ldr	r2, [r4, #8]
   3060c:	3201      	adds	r2, #1
   3060e:	d007      	beq.n	30620 <am_hal_adc_initialize+0x7c>
   30610:	4330      	orrs	r0, r6
   30612:	ea50 0307 	orrs.w	r3, r0, r7
   30616:	d103      	bne.n	30620 <am_hal_adc_initialize+0x7c>
   30618:	2501      	movs	r5, #1
   3061a:	e007      	b.n	3062c <am_hal_adc_initialize+0x88>
   3061c:	2007      	movs	r0, #7
   3061e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   30620:	491c      	ldr	r1, [pc, #112]	; (30694 <am_hal_adc_initialize+0xf0>)
   30622:	4a1d      	ldr	r2, [pc, #116]	; (30698 <am_hal_adc_initialize+0xf4>)
   30624:	4b1d      	ldr	r3, [pc, #116]	; (3069c <am_hal_adc_initialize+0xf8>)
   30626:	6021      	str	r1, [r4, #0]
   30628:	6062      	str	r2, [r4, #4]
   3062a:	60a3      	str	r3, [r4, #8]
   3062c:	4e1c      	ldr	r6, [pc, #112]	; (306a0 <am_hal_adc_initialize+0xfc>)
   3062e:	7325      	strb	r5, [r4, #12]
   30630:	2201      	movs	r2, #1
   30632:	1d33      	adds	r3, r6, #4
   30634:	f240 41ca 	movw	r1, #1226	; 0x4ca
   30638:	4610      	mov	r0, r2
   3063a:	f7ff fe09 	bl	30250 <am_hal_mram_info_read>
   3063e:	2201      	movs	r2, #1
   30640:	4633      	mov	r3, r6
   30642:	4604      	mov	r4, r0
   30644:	f240 41cb 	movw	r1, #1227	; 0x4cb
   30648:	4610      	mov	r0, r2
   3064a:	f7ff fe01 	bl	30250 <am_hal_mram_info_read>
   3064e:	4b15      	ldr	r3, [pc, #84]	; (306a4 <am_hal_adc_initialize+0x100>)
   30650:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
   30654:	4320      	orrs	r0, r4
   30656:	f36f 0200 	bfc	r2, #0, #1
   3065a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
   3065e:	d109      	bne.n	30674 <am_hal_adc_initialize+0xd0>
   30660:	6873      	ldr	r3, [r6, #4]
   30662:	3301      	adds	r3, #1
   30664:	d006      	beq.n	30674 <am_hal_adc_initialize+0xd0>
   30666:	6833      	ldr	r3, [r6, #0]
   30668:	3301      	adds	r3, #1
   3066a:	d003      	beq.n	30674 <am_hal_adc_initialize+0xd0>
   3066c:	4b0e      	ldr	r3, [pc, #56]	; (306a8 <am_hal_adc_initialize+0x104>)
   3066e:	2201      	movs	r2, #1
   30670:	701a      	strb	r2, [r3, #0]
   30672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   30674:	4b0c      	ldr	r3, [pc, #48]	; (306a8 <am_hal_adc_initialize+0x104>)
   30676:	2000      	movs	r0, #0
   30678:	7018      	strb	r0, [r3, #0]
   3067a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3067c:	2005      	movs	r0, #5
   3067e:	4770      	bx	lr
   30680:	2006      	movs	r0, #6
   30682:	4770      	bx	lr
   30684:	10019cc0 	.word	0x10019cc0
   30688:	01afafaf 	.word	0x01afafaf
   3068c:	10019d18 	.word	0x10019d18
   30690:	10019cbc 	.word	0x10019cbc
   30694:	4395c000 	.word	0x4395c000
   30698:	3f839874 	.word	0x3f839874
   3069c:	bb8c47a1 	.word	0xbb8c47a1
   306a0:	10019d0c 	.word	0x10019d0c
   306a4:	40020000 	.word	0x40020000
   306a8:	10019d04 	.word	0x10019d04

000306ac <am_hal_adc_configure>:
   306ac:	6803      	ldr	r3, [r0, #0]
   306ae:	4a1a      	ldr	r2, [pc, #104]	; (30718 <am_hal_adc_configure+0x6c>)
   306b0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   306b4:	4293      	cmp	r3, r2
   306b6:	d12c      	bne.n	30712 <am_hal_adc_configure+0x66>
   306b8:	780b      	ldrb	r3, [r1, #0]
   306ba:	2b02      	cmp	r3, #2
   306bc:	d127      	bne.n	3070e <am_hal_adc_configure+0x62>
   306be:	784b      	ldrb	r3, [r1, #1]
   306c0:	7988      	ldrb	r0, [r1, #6]
   306c2:	788a      	ldrb	r2, [r1, #2]
   306c4:	f891 c003 	ldrb.w	ip, [r1, #3]
   306c8:	051b      	lsls	r3, r3, #20
   306ca:	0080      	lsls	r0, r0, #2
   306cc:	f000 0004 	and.w	r0, r0, #4
   306d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
   306d4:	04d2      	lsls	r2, r2, #19
   306d6:	4303      	orrs	r3, r0
   306d8:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
   306dc:	7908      	ldrb	r0, [r1, #4]
   306de:	4313      	orrs	r3, r2
   306e0:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
   306e4:	794a      	ldrb	r2, [r1, #5]
   306e6:	f40c 2ce0 	and.w	ip, ip, #458752	; 0x70000
   306ea:	0101      	lsls	r1, r0, #4
   306ec:	ea43 030c 	orr.w	r3, r3, ip
   306f0:	f001 0110 	and.w	r1, r1, #16
   306f4:	00d2      	lsls	r2, r2, #3
   306f6:	430b      	orrs	r3, r1
   306f8:	f002 0208 	and.w	r2, r2, #8
   306fc:	4313      	orrs	r3, r2
   306fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   30702:	4a06      	ldr	r2, [pc, #24]	; (3071c <am_hal_adc_configure+0x70>)
   30704:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   30708:	6013      	str	r3, [r2, #0]
   3070a:	2000      	movs	r0, #0
   3070c:	4770      	bx	lr
   3070e:	2006      	movs	r0, #6
   30710:	4770      	bx	lr
   30712:	2002      	movs	r0, #2
   30714:	4770      	bx	lr
   30716:	bf00      	nop
   30718:	01afafaf 	.word	0x01afafaf
   3071c:	40038000 	.word	0x40038000

00030720 <am_hal_adc_configure_slot>:
   30720:	6803      	ldr	r3, [r0, #0]
   30722:	b410      	push	{r4}
   30724:	4c1d      	ldr	r4, [pc, #116]	; (3079c <am_hal_adc_configure_slot+0x7c>)
   30726:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   3072a:	42a3      	cmp	r3, r4
   3072c:	d12a      	bne.n	30784 <am_hal_adc_configure_slot+0x64>
   3072e:	2907      	cmp	r1, #7
   30730:	d830      	bhi.n	30794 <am_hal_adc_configure_slot+0x74>
   30732:	6854      	ldr	r4, [r2, #4]
   30734:	f1a4 0320 	sub.w	r3, r4, #32
   30738:	2b1f      	cmp	r3, #31
   3073a:	d827      	bhi.n	3078c <am_hal_adc_configure_slot+0x6c>
   3073c:	7ad3      	ldrb	r3, [r2, #11]
   3073e:	7810      	ldrb	r0, [r2, #0]
   30740:	f892 c008 	ldrb.w	ip, [r2, #8]
   30744:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
   30748:	7a94      	ldrb	r4, [r2, #10]
   3074a:	0600      	lsls	r0, r0, #24
   3074c:	f000 60e0 	and.w	r0, r0, #117440512	; 0x7000000
   30750:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
   30754:	4303      	orrs	r3, r0
   30756:	7a50      	ldrb	r0, [r2, #9]
   30758:	4a11      	ldr	r2, [pc, #68]	; (307a0 <am_hal_adc_configure_slot+0x80>)
   3075a:	4c12      	ldr	r4, [pc, #72]	; (307a4 <am_hal_adc_configure_slot+0x84>)
   3075c:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
   30760:	0200      	lsls	r0, r0, #8
   30762:	440a      	add	r2, r1
   30764:	f40c 3c40 	and.w	ip, ip, #196608	; 0x30000
   30768:	f400 6170 	and.w	r1, r0, #3840	; 0xf00
   3076c:	ea43 030c 	orr.w	r3, r3, ip
   30770:	0092      	lsls	r2, r2, #2
   30772:	430b      	orrs	r3, r1
   30774:	6013      	str	r3, [r2, #0]
   30776:	6823      	ldr	r3, [r4, #0]
   30778:	3301      	adds	r3, #1
   3077a:	2000      	movs	r0, #0
   3077c:	6023      	str	r3, [r4, #0]
   3077e:	f85d 4b04 	ldr.w	r4, [sp], #4
   30782:	4770      	bx	lr
   30784:	2002      	movs	r0, #2
   30786:	f85d 4b04 	ldr.w	r4, [sp], #4
   3078a:	4770      	bx	lr
   3078c:	2006      	movs	r0, #6
   3078e:	f85d 4b04 	ldr.w	r4, [sp], #4
   30792:	4770      	bx	lr
   30794:	2005      	movs	r0, #5
   30796:	f85d 4b04 	ldr.w	r4, [sp], #4
   3079a:	4770      	bx	lr
   3079c:	01afafaf 	.word	0x01afafaf
   307a0:	1000e003 	.word	0x1000e003
   307a4:	10019cbc 	.word	0x10019cbc

000307a8 <am_hal_adc_control>:
   307a8:	6803      	ldr	r3, [r0, #0]
   307aa:	b410      	push	{r4}
   307ac:	4c40      	ldr	r4, [pc, #256]	; (308b0 <am_hal_adc_control+0x108>)
   307ae:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   307b2:	42a3      	cmp	r3, r4
   307b4:	d105      	bne.n	307c2 <am_hal_adc_control+0x1a>
   307b6:	2903      	cmp	r1, #3
   307b8:	d877      	bhi.n	308aa <am_hal_adc_control+0x102>
   307ba:	e8df f001 	tbb	[pc, r1]
   307be:	291a      	.short	0x291a
   307c0:	065d      	.short	0x065d
   307c2:	2002      	movs	r0, #2
   307c4:	f85d 4b04 	ldr.w	r4, [sp], #4
   307c8:	4770      	bx	lr
   307ca:	2a00      	cmp	r2, #0
   307cc:	d06d      	beq.n	308aa <am_hal_adc_control+0x102>
   307ce:	eddf 7a39 	vldr	s15, [pc, #228]	; 308b4 <am_hal_adc_control+0x10c>
   307d2:	ed92 7a03 	vldr	s14, [r2, #12]
   307d6:	eeb4 7a67 	vcmp.f32	s14, s15
   307da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   307de:	d160      	bne.n	308a2 <am_hal_adc_control+0xfa>
   307e0:	4b35      	ldr	r3, [pc, #212]	; (308b8 <am_hal_adc_control+0x110>)
   307e2:	6819      	ldr	r1, [r3, #0]
   307e4:	6011      	str	r1, [r2, #0]
   307e6:	2000      	movs	r0, #0
   307e8:	685b      	ldr	r3, [r3, #4]
   307ea:	6090      	str	r0, [r2, #8]
   307ec:	60d0      	str	r0, [r2, #12]
   307ee:	6053      	str	r3, [r2, #4]
   307f0:	e7e8      	b.n	307c4 <am_hal_adc_control+0x1c>
   307f2:	6853      	ldr	r3, [r2, #4]
   307f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   307f8:	d255      	bcs.n	308a6 <am_hal_adc_control+0xfe>
   307fa:	6894      	ldr	r4, [r2, #8]
   307fc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   30800:	d251      	bcs.n	308a6 <am_hal_adc_control+0xfe>
   30802:	492e      	ldr	r1, [pc, #184]	; (308bc <am_hal_adc_control+0x114>)
   30804:	7812      	ldrb	r2, [r2, #0]
   30806:	62cb      	str	r3, [r1, #44]	; 0x2c
   30808:	2000      	movs	r0, #0
   3080a:	630c      	str	r4, [r1, #48]	; 0x30
   3080c:	634a      	str	r2, [r1, #52]	; 0x34
   3080e:	e7d9      	b.n	307c4 <am_hal_adc_control+0x1c>
   30810:	2a00      	cmp	r2, #0
   30812:	d04a      	beq.n	308aa <am_hal_adc_control+0x102>
   30814:	eddf 7a27 	vldr	s15, [pc, #156]	; 308b4 <am_hal_adc_control+0x10c>
   30818:	ed92 7a02 	vldr	s14, [r2, #8]
   3081c:	eeb4 7a67 	vcmp.f32	s14, s15
   30820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   30824:	d13d      	bne.n	308a2 <am_hal_adc_control+0xfa>
   30826:	4b26      	ldr	r3, [pc, #152]	; (308c0 <am_hal_adc_control+0x118>)
   30828:	edd2 6a00 	vldr	s13, [r2]
   3082c:	edd3 7a00 	vldr	s15, [r3]
   30830:	eef5 7a40 	vcmp.f32	s15, #0.0
   30834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   30838:	d110      	bne.n	3085c <am_hal_adc_control+0xb4>
   3083a:	4922      	ldr	r1, [pc, #136]	; (308c4 <am_hal_adc_control+0x11c>)
   3083c:	ed9f 6a22 	vldr	s12, [pc, #136]	; 308c8 <am_hal_adc_control+0x120>
   30840:	ed91 7a01 	vldr	s14, [r1, #4]
   30844:	edd1 5a02 	vldr	s11, [r1, #8]
   30848:	edd1 7a00 	vldr	s15, [r1]
   3084c:	ee37 7a25 	vadd.f32	s14, s14, s11
   30850:	ee27 7a06 	vmul.f32	s14, s14, s12
   30854:	ee77 7a27 	vadd.f32	s15, s14, s15
   30858:	edc3 7a00 	vstr	s15, [r3]
   3085c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 308cc <am_hal_adc_control+0x124>
   30860:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 308d0 <am_hal_adc_control+0x128>
   30864:	ee26 7a87 	vmul.f32	s14, s13, s14
   30868:	2000      	movs	r0, #0
   3086a:	ee77 7a87 	vadd.f32	s15, s15, s14
   3086e:	ee77 7ac6 	vsub.f32	s15, s15, s12
   30872:	edc2 7a01 	vstr	s15, [r2, #4]
   30876:	e7a5      	b.n	307c4 <am_hal_adc_control+0x1c>
   30878:	b1ba      	cbz	r2, 308aa <am_hal_adc_control+0x102>
   3087a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 308b4 <am_hal_adc_control+0x10c>
   3087e:	ed92 7a03 	vldr	s14, [r2, #12]
   30882:	eeb4 7a67 	vcmp.f32	s14, s15
   30886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   3088a:	d10a      	bne.n	308a2 <am_hal_adc_control+0xfa>
   3088c:	4b0d      	ldr	r3, [pc, #52]	; (308c4 <am_hal_adc_control+0x11c>)
   3088e:	6819      	ldr	r1, [r3, #0]
   30890:	6011      	str	r1, [r2, #0]
   30892:	6859      	ldr	r1, [r3, #4]
   30894:	6051      	str	r1, [r2, #4]
   30896:	6899      	ldr	r1, [r3, #8]
   30898:	6091      	str	r1, [r2, #8]
   3089a:	7b1b      	ldrb	r3, [r3, #12]
   3089c:	60d3      	str	r3, [r2, #12]
   3089e:	2000      	movs	r0, #0
   308a0:	e790      	b.n	307c4 <am_hal_adc_control+0x1c>
   308a2:	2007      	movs	r0, #7
   308a4:	e78e      	b.n	307c4 <am_hal_adc_control+0x1c>
   308a6:	2005      	movs	r0, #5
   308a8:	e78c      	b.n	307c4 <am_hal_adc_control+0x1c>
   308aa:	2006      	movs	r0, #6
   308ac:	e78a      	b.n	307c4 <am_hal_adc_control+0x1c>
   308ae:	bf00      	nop
   308b0:	01afafaf 	.word	0x01afafaf
   308b4:	c2f6e979 	.word	0xc2f6e979
   308b8:	10019d0c 	.word	0x10019d0c
   308bc:	40038000 	.word	0x40038000
   308c0:	10019d08 	.word	0x10019d08
   308c4:	10019d18 	.word	0x10019d18
   308c8:	c3910000 	.word	0xc3910000
   308cc:	43910000 	.word	0x43910000
   308d0:	43889333 	.word	0x43889333

000308d4 <am_hal_adc_enable>:
   308d4:	6802      	ldr	r2, [r0, #0]
   308d6:	4914      	ldr	r1, [pc, #80]	; (30928 <am_hal_adc_enable+0x54>)
   308d8:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   308dc:	428a      	cmp	r2, r1
   308de:	d121      	bne.n	30924 <am_hal_adc_enable+0x50>
   308e0:	78c2      	ldrb	r2, [r0, #3]
   308e2:	f012 0202 	ands.w	r2, r2, #2
   308e6:	d001      	beq.n	308ec <am_hal_adc_enable+0x18>
   308e8:	2000      	movs	r0, #0
   308ea:	4770      	bx	lr
   308ec:	b570      	push	{r4, r5, r6, lr}
   308ee:	4c0f      	ldr	r4, [pc, #60]	; (3092c <am_hal_adc_enable+0x58>)
   308f0:	f8d4 5200 	ldr.w	r5, [r4, #512]	; 0x200
   308f4:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
   308f8:	f8d4 6204 	ldr.w	r6, [r4, #516]	; 0x204
   308fc:	6822      	ldr	r2, [r4, #0]
   308fe:	f042 0201 	orr.w	r2, r2, #1
   30902:	6022      	str	r2, [r4, #0]
   30904:	78c2      	ldrb	r2, [r0, #3]
   30906:	f042 0202 	orr.w	r2, r2, #2
   3090a:	70c2      	strb	r2, [r0, #3]
   3090c:	f7ff fe08 	bl	30520 <ForceFIFOpop>
   30910:	07b3      	lsls	r3, r6, #30
   30912:	bf04      	itt	eq
   30914:	2303      	moveq	r3, #3
   30916:	f8c4 3208 	streq.w	r3, [r4, #520]	; 0x208
   3091a:	4b04      	ldr	r3, [pc, #16]	; (3092c <am_hal_adc_enable+0x58>)
   3091c:	2000      	movs	r0, #0
   3091e:	f8c3 5200 	str.w	r5, [r3, #512]	; 0x200
   30922:	bd70      	pop	{r4, r5, r6, pc}
   30924:	2002      	movs	r0, #2
   30926:	4770      	bx	lr
   30928:	01afafaf 	.word	0x01afafaf
   3092c:	40038000 	.word	0x40038000

00030930 <am_hal_adc_samples_read>:
   30930:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   30934:	6804      	ldr	r4, [r0, #0]
   30936:	4e90      	ldr	r6, [pc, #576]	; (30b78 <am_hal_adc_samples_read+0x248>)
   30938:	9d07      	ldr	r5, [sp, #28]
   3093a:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
   3093e:	42b4      	cmp	r4, r6
   30940:	d160      	bne.n	30a04 <am_hal_adc_samples_read+0xd4>
   30942:	2d00      	cmp	r5, #0
   30944:	f000 8116 	beq.w	30b74 <am_hal_adc_samples_read+0x244>
   30948:	2000      	movs	r0, #0
   3094a:	681c      	ldr	r4, [r3, #0]
   3094c:	6018      	str	r0, [r3, #0]
   3094e:	2a00      	cmp	r2, #0
   30950:	f000 80a9 	beq.w	30aa6 <am_hal_adc_samples_read+0x176>
   30954:	4989      	ldr	r1, [pc, #548]	; (30b7c <am_hal_adc_samples_read+0x24c>)
   30956:	68c8      	ldr	r0, [r1, #12]
   30958:	6909      	ldr	r1, [r1, #16]
   3095a:	f3c1 2103 	ubfx	r1, r1, #8, #4
   3095e:	2908      	cmp	r1, #8
   30960:	4986      	ldr	r1, [pc, #536]	; (30b7c <am_hal_adc_samples_read+0x24c>)
   30962:	f3c0 2e03 	ubfx	lr, r0, #8, #4
   30966:	6949      	ldr	r1, [r1, #20]
   30968:	f1ae 0e08 	sub.w	lr, lr, #8
   3096c:	fabe fe8e 	clz	lr, lr
   30970:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   30974:	f3c1 2103 	ubfx	r1, r1, #8, #4
   30978:	bf08      	it	eq
   3097a:	f04e 0e02 	orreq.w	lr, lr, #2
   3097e:	2908      	cmp	r1, #8
   30980:	497e      	ldr	r1, [pc, #504]	; (30b7c <am_hal_adc_samples_read+0x24c>)
   30982:	6989      	ldr	r1, [r1, #24]
   30984:	f3c1 2103 	ubfx	r1, r1, #8, #4
   30988:	bf08      	it	eq
   3098a:	f04e 0e04 	orreq.w	lr, lr, #4
   3098e:	2908      	cmp	r1, #8
   30990:	497a      	ldr	r1, [pc, #488]	; (30b7c <am_hal_adc_samples_read+0x24c>)
   30992:	69c9      	ldr	r1, [r1, #28]
   30994:	f3c1 2103 	ubfx	r1, r1, #8, #4
   30998:	bf08      	it	eq
   3099a:	f04e 0e08 	orreq.w	lr, lr, #8
   3099e:	2908      	cmp	r1, #8
   309a0:	4976      	ldr	r1, [pc, #472]	; (30b7c <am_hal_adc_samples_read+0x24c>)
   309a2:	6a09      	ldr	r1, [r1, #32]
   309a4:	f3c1 2103 	ubfx	r1, r1, #8, #4
   309a8:	bf08      	it	eq
   309aa:	f04e 0e10 	orreq.w	lr, lr, #16
   309ae:	2908      	cmp	r1, #8
   309b0:	4972      	ldr	r1, [pc, #456]	; (30b7c <am_hal_adc_samples_read+0x24c>)
   309b2:	6a49      	ldr	r1, [r1, #36]	; 0x24
   309b4:	f3c1 2103 	ubfx	r1, r1, #8, #4
   309b8:	bf08      	it	eq
   309ba:	f04e 0e20 	orreq.w	lr, lr, #32
   309be:	2908      	cmp	r1, #8
   309c0:	496e      	ldr	r1, [pc, #440]	; (30b7c <am_hal_adc_samples_read+0x24c>)
   309c2:	6a89      	ldr	r1, [r1, #40]	; 0x28
   309c4:	f3c1 2103 	ubfx	r1, r1, #8, #4
   309c8:	bf08      	it	eq
   309ca:	f04e 0e40 	orreq.w	lr, lr, #64	; 0x40
   309ce:	2908      	cmp	r1, #8
   309d0:	496b      	ldr	r1, [pc, #428]	; (30b80 <am_hal_adc_samples_read+0x250>)
   309d2:	7809      	ldrb	r1, [r1, #0]
   309d4:	bf08      	it	eq
   309d6:	f04e 0e80 	orreq.w	lr, lr, #128	; 0x80
   309da:	b9b1      	cbnz	r1, 30a0a <am_hal_adc_samples_read+0xda>
   309dc:	f105 0108 	add.w	r1, r5, #8
   309e0:	1f10      	subs	r0, r2, #4
   309e2:	f850 2f04 	ldr.w	r2, [r0, #4]!
   309e6:	3108      	adds	r1, #8
   309e8:	f3c2 158d 	ubfx	r5, r2, #6, #14
   309ec:	f3c2 7202 	ubfx	r2, r2, #28, #3
   309f0:	e941 5204 	strd	r5, r2, [r1, #-16]
   309f4:	681a      	ldr	r2, [r3, #0]
   309f6:	3201      	adds	r2, #1
   309f8:	4294      	cmp	r4, r2
   309fa:	601a      	str	r2, [r3, #0]
   309fc:	d8f1      	bhi.n	309e2 <am_hal_adc_samples_read+0xb2>
   309fe:	2000      	movs	r0, #0
   30a00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   30a04:	2002      	movs	r0, #2
   30a06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   30a0a:	eddf 3a5e 	vldr	s7, [pc, #376]	; 30b84 <am_hal_adc_samples_read+0x254>
   30a0e:	ed9f 4a5e 	vldr	s8, [pc, #376]	; 30b88 <am_hal_adc_samples_read+0x258>
   30a12:	eddf 4a5e 	vldr	s9, [pc, #376]	; 30b8c <am_hal_adc_samples_read+0x25c>
   30a16:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 30b90 <am_hal_adc_samples_read+0x260>
   30a1a:	4e5e      	ldr	r6, [pc, #376]	; (30b94 <am_hal_adc_samples_read+0x264>)
   30a1c:	f105 0108 	add.w	r1, r5, #8
   30a20:	1f10      	subs	r0, r2, #4
   30a22:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   30a26:	f240 45a6 	movw	r5, #1190	; 0x4a6
   30a2a:	f850 2f04 	ldr.w	r2, [r0, #4]!
   30a2e:	f3c2 7702 	ubfx	r7, r2, #28, #3
   30a32:	f3c2 0213 	ubfx	r2, r2, #0, #20
   30a36:	ea4f 1c92 	mov.w	ip, r2, lsr #6
   30a3a:	fa2e f807 	lsr.w	r8, lr, r7
   30a3e:	fb05 fc0c 	mul.w	ip, r5, ip
   30a42:	f018 0f01 	tst.w	r8, #1
   30a46:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
   30a4a:	ea4f 1292 	mov.w	r2, r2, lsr #6
   30a4e:	d120      	bne.n	30a92 <am_hal_adc_samples_read+0x162>
   30a50:	ed96 6a01 	vldr	s12, [r6, #4]
   30a54:	edd6 6a00 	vldr	s13, [r6]
   30a58:	ee07 ca90 	vmov	s15, ip
   30a5c:	ee35 6ac6 	vsub.f32	s12, s11, s12
   30a60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   30a64:	f640 72ff 	movw	r2, #4095	; 0xfff
   30a68:	ee87 7a86 	vdiv.f32	s14, s15, s12
   30a6c:	ee66 7aa3 	vmul.f32	s15, s13, s7
   30a70:	ee77 7a67 	vsub.f32	s15, s14, s15
   30a74:	ee67 7a84 	vmul.f32	s15, s15, s8
   30a78:	ee87 7aa4 	vdiv.f32	s14, s15, s9
   30a7c:	eeb4 7ac5 	vcmpe.f32	s14, s10
   30a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   30a84:	dc05      	bgt.n	30a92 <am_hal_adc_samples_read+0x162>
   30a86:	eefc 7ac7 	vcvt.u32.f32	s15, s14
   30a8a:	ee17 2a90 	vmov	r2, s15
   30a8e:	f3c2 020b 	ubfx	r2, r2, #0, #12
   30a92:	e941 2702 	strd	r2, r7, [r1, #-8]
   30a96:	681a      	ldr	r2, [r3, #0]
   30a98:	3201      	adds	r2, #1
   30a9a:	42a2      	cmp	r2, r4
   30a9c:	f101 0108 	add.w	r1, r1, #8
   30aa0:	601a      	str	r2, [r3, #0]
   30aa2:	d3c2      	bcc.n	30a2a <am_hal_adc_samples_read+0xfa>
   30aa4:	e7ab      	b.n	309fe <am_hal_adc_samples_read+0xce>
   30aa6:	4a36      	ldr	r2, [pc, #216]	; (30b80 <am_hal_adc_samples_read+0x250>)
   30aa8:	ed9f 4a36 	vldr	s8, [pc, #216]	; 30b84 <am_hal_adc_samples_read+0x254>
   30aac:	f892 c000 	ldrb.w	ip, [r2]
   30ab0:	eddf 4a35 	vldr	s9, [pc, #212]	; 30b88 <am_hal_adc_samples_read+0x258>
   30ab4:	ed9f 5a35 	vldr	s10, [pc, #212]	; 30b8c <am_hal_adc_samples_read+0x25c>
   30ab8:	eddf 5a35 	vldr	s11, [pc, #212]	; 30b90 <am_hal_adc_samples_read+0x260>
   30abc:	4f2f      	ldr	r7, [pc, #188]	; (30b7c <am_hal_adc_samples_read+0x24c>)
   30abe:	4e36      	ldr	r6, [pc, #216]	; (30b98 <am_hal_adc_samples_read+0x268>)
   30ac0:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 30b94 <am_hal_adc_samples_read+0x264>
   30ac4:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 30b9c <am_hal_adc_samples_read+0x26c>
   30ac8:	f105 0008 	add.w	r0, r5, #8
   30acc:	e00e      	b.n	30aec <am_hal_adc_samples_read+0x1bc>
   30ace:	f3c5 0213 	ubfx	r2, r5, #0, #20
   30ad2:	f840 2c08 	str.w	r2, [r0, #-8]
   30ad6:	681a      	ldr	r2, [r3, #0]
   30ad8:	f015 6f7f 	tst.w	r5, #267386880	; 0xff00000
   30adc:	f102 0201 	add.w	r2, r2, #1
   30ae0:	601a      	str	r2, [r3, #0]
   30ae2:	d08c      	beq.n	309fe <am_hal_adc_samples_read+0xce>
   30ae4:	42a2      	cmp	r2, r4
   30ae6:	f100 0008 	add.w	r0, r0, #8
   30aea:	d288      	bcs.n	309fe <am_hal_adc_samples_read+0xce>
   30aec:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
   30aee:	f3c5 7902 	ubfx	r9, r5, #28, #3
   30af2:	eb09 0206 	add.w	r2, r9, r6
   30af6:	0092      	lsls	r2, r2, #2
   30af8:	6812      	ldr	r2, [r2, #0]
   30afa:	f1bc 0f00 	cmp.w	ip, #0
   30afe:	d030      	beq.n	30b62 <am_hal_adc_samples_read+0x232>
   30b00:	f3c2 2203 	ubfx	r2, r2, #8, #4
   30b04:	2a08      	cmp	r2, #8
   30b06:	d02c      	beq.n	30b62 <am_hal_adc_samples_read+0x232>
   30b08:	f3c5 128d 	ubfx	r2, r5, #6, #14
   30b0c:	f240 49a6 	movw	r9, #1190	; 0x4a6
   30b10:	edde 7a01 	vldr	s15, [lr, #4]
   30b14:	ed9e 7a00 	vldr	s14, [lr]
   30b18:	fb09 f202 	mul.w	r2, r9, r2
   30b1c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   30b20:	0b12      	lsrs	r2, r2, #12
   30b22:	ee36 6a67 	vsub.f32	s12, s12, s15
   30b26:	ee07 2a90 	vmov	s15, r2
   30b2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   30b2e:	ee67 6a04 	vmul.f32	s13, s14, s8
   30b32:	ee87 7a86 	vdiv.f32	s14, s15, s12
   30b36:	ee37 7a66 	vsub.f32	s14, s14, s13
   30b3a:	ee27 7a24 	vmul.f32	s14, s14, s9
   30b3e:	eec7 7a05 	vdiv.f32	s15, s14, s10
   30b42:	eef4 7ae5 	vcmpe.f32	s15, s11
   30b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   30b4a:	dc11      	bgt.n	30b70 <am_hal_adc_samples_read+0x240>
   30b4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   30b50:	ee17 2a90 	vmov	r2, s15
   30b54:	0192      	lsls	r2, r2, #6
   30b56:	f3c2 0211 	ubfx	r2, r2, #0, #18
   30b5a:	f362 0513 	bfi	r5, r2, #0, #20
   30b5e:	f3c5 7902 	ubfx	r9, r5, #28, #3
   30b62:	f840 9c04 	str.w	r9, [r0, #-4]
   30b66:	2900      	cmp	r1, #0
   30b68:	d1b1      	bne.n	30ace <am_hal_adc_samples_read+0x19e>
   30b6a:	f3c5 128d 	ubfx	r2, r5, #6, #14
   30b6e:	e7b0      	b.n	30ad2 <am_hal_adc_samples_read+0x1a2>
   30b70:	4642      	mov	r2, r8
   30b72:	e7f2      	b.n	30b5a <am_hal_adc_samples_read+0x22a>
   30b74:	2006      	movs	r0, #6
   30b76:	e743      	b.n	30a00 <am_hal_adc_samples_read+0xd0>
   30b78:	01afafaf 	.word	0x01afafaf
   30b7c:	40038000 	.word	0x40038000
   30b80:	10019d04 	.word	0x10019d04
   30b84:	447a0000 	.word	0x447a0000
   30b88:	45800000 	.word	0x45800000
   30b8c:	4494c000 	.word	0x4494c000
   30b90:	457ff000 	.word	0x457ff000
   30b94:	10019d0c 	.word	0x10019d0c
   30b98:	1000e003 	.word	0x1000e003
   30b9c:	0003ffc0 	.word	0x0003ffc0

00030ba0 <am_hal_adc_sw_trigger>:
   30ba0:	6803      	ldr	r3, [r0, #0]
   30ba2:	4a06      	ldr	r2, [pc, #24]	; (30bbc <am_hal_adc_sw_trigger+0x1c>)
   30ba4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   30ba8:	4293      	cmp	r3, r2
   30baa:	d104      	bne.n	30bb6 <am_hal_adc_sw_trigger+0x16>
   30bac:	4b04      	ldr	r3, [pc, #16]	; (30bc0 <am_hal_adc_sw_trigger+0x20>)
   30bae:	2237      	movs	r2, #55	; 0x37
   30bb0:	609a      	str	r2, [r3, #8]
   30bb2:	2000      	movs	r0, #0
   30bb4:	4770      	bx	lr
   30bb6:	2002      	movs	r0, #2
   30bb8:	4770      	bx	lr
   30bba:	bf00      	nop
   30bbc:	01afafaf 	.word	0x01afafaf
   30bc0:	40038000 	.word	0x40038000

00030bc4 <am_hal_adc_power_control>:
   30bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   30bc6:	4604      	mov	r4, r0
   30bc8:	483e      	ldr	r0, [pc, #248]	; (30cc4 <am_hal_adc_power_control+0x100>)
   30bca:	6823      	ldr	r3, [r4, #0]
   30bcc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   30bd0:	4283      	cmp	r3, r0
   30bd2:	b083      	sub	sp, #12
   30bd4:	d169      	bne.n	30caa <am_hal_adc_power_control+0xe6>
   30bd6:	2900      	cmp	r1, #0
   30bd8:	d027      	beq.n	30c2a <am_hal_adc_power_control+0x66>
   30bda:	3901      	subs	r1, #1
   30bdc:	2901      	cmp	r1, #1
   30bde:	d861      	bhi.n	30ca4 <am_hal_adc_power_control+0xe0>
   30be0:	b1ea      	cbz	r2, 30c1e <am_hal_adc_power_control+0x5a>
   30be2:	4b39      	ldr	r3, [pc, #228]	; (30cc8 <am_hal_adc_power_control+0x104>)
   30be4:	68d9      	ldr	r1, [r3, #12]
   30be6:	6161      	str	r1, [r4, #20]
   30be8:	6919      	ldr	r1, [r3, #16]
   30bea:	61a1      	str	r1, [r4, #24]
   30bec:	6959      	ldr	r1, [r3, #20]
   30bee:	61e1      	str	r1, [r4, #28]
   30bf0:	6999      	ldr	r1, [r3, #24]
   30bf2:	6221      	str	r1, [r4, #32]
   30bf4:	69d9      	ldr	r1, [r3, #28]
   30bf6:	6261      	str	r1, [r4, #36]	; 0x24
   30bf8:	6a19      	ldr	r1, [r3, #32]
   30bfa:	62a1      	str	r1, [r4, #40]	; 0x28
   30bfc:	6a59      	ldr	r1, [r3, #36]	; 0x24
   30bfe:	62e1      	str	r1, [r4, #44]	; 0x2c
   30c00:	6a99      	ldr	r1, [r3, #40]	; 0x28
   30c02:	6321      	str	r1, [r4, #48]	; 0x30
   30c04:	6c19      	ldr	r1, [r3, #64]	; 0x40
   30c06:	6361      	str	r1, [r4, #52]	; 0x34
   30c08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   30c0a:	63a1      	str	r1, [r4, #56]	; 0x38
   30c0c:	6b19      	ldr	r1, [r3, #48]	; 0x30
   30c0e:	63e1      	str	r1, [r4, #60]	; 0x3c
   30c10:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
   30c14:	6421      	str	r1, [r4, #64]	; 0x40
   30c16:	681b      	ldr	r3, [r3, #0]
   30c18:	6123      	str	r3, [r4, #16]
   30c1a:	2201      	movs	r2, #1
   30c1c:	7322      	strb	r2, [r4, #12]
   30c1e:	200d      	movs	r0, #13
   30c20:	f001 fd06 	bl	32630 <am_hal_pwrctrl_periph_disable>
   30c24:	2000      	movs	r0, #0
   30c26:	b003      	add	sp, #12
   30c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30c2a:	2a00      	cmp	r2, #0
   30c2c:	d040      	beq.n	30cb0 <am_hal_adc_power_control+0xec>
   30c2e:	7b23      	ldrb	r3, [r4, #12]
   30c30:	2b00      	cmp	r3, #0
   30c32:	d044      	beq.n	30cbe <am_hal_adc_power_control+0xfa>
   30c34:	4d24      	ldr	r5, [pc, #144]	; (30cc8 <am_hal_adc_power_control+0x104>)
   30c36:	9101      	str	r1, [sp, #4]
   30c38:	200d      	movs	r0, #13
   30c3a:	f001 fc29 	bl	32490 <am_hal_pwrctrl_periph_enable>
   30c3e:	6963      	ldr	r3, [r4, #20]
   30c40:	60eb      	str	r3, [r5, #12]
   30c42:	69a3      	ldr	r3, [r4, #24]
   30c44:	612b      	str	r3, [r5, #16]
   30c46:	69e3      	ldr	r3, [r4, #28]
   30c48:	616b      	str	r3, [r5, #20]
   30c4a:	6a23      	ldr	r3, [r4, #32]
   30c4c:	61ab      	str	r3, [r5, #24]
   30c4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   30c50:	61eb      	str	r3, [r5, #28]
   30c52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   30c54:	622b      	str	r3, [r5, #32]
   30c56:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   30c58:	626b      	str	r3, [r5, #36]	; 0x24
   30c5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   30c5c:	62ab      	str	r3, [r5, #40]	; 0x28
   30c5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   30c60:	642b      	str	r3, [r5, #64]	; 0x40
   30c62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   30c64:	62eb      	str	r3, [r5, #44]	; 0x2c
   30c66:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   30c68:	9901      	ldr	r1, [sp, #4]
   30c6a:	632b      	str	r3, [r5, #48]	; 0x30
   30c6c:	f8c5 1200 	str.w	r1, [r5, #512]	; 0x200
   30c70:	f8d5 6200 	ldr.w	r6, [r5, #512]	; 0x200
   30c74:	f8c5 1200 	str.w	r1, [r5, #512]	; 0x200
   30c78:	f8d5 7204 	ldr.w	r7, [r5, #516]	; 0x204
   30c7c:	6923      	ldr	r3, [r4, #16]
   30c7e:	602b      	str	r3, [r5, #0]
   30c80:	4620      	mov	r0, r4
   30c82:	f7ff fc4d 	bl	30520 <ForceFIFOpop>
   30c86:	07bb      	lsls	r3, r7, #30
   30c88:	d102      	bne.n	30c90 <am_hal_adc_power_control+0xcc>
   30c8a:	2303      	movs	r3, #3
   30c8c:	f8c5 3208 	str.w	r3, [r5, #520]	; 0x208
   30c90:	4a0d      	ldr	r2, [pc, #52]	; (30cc8 <am_hal_adc_power_control+0x104>)
   30c92:	f8c2 6200 	str.w	r6, [r2, #512]	; 0x200
   30c96:	2300      	movs	r3, #0
   30c98:	6c21      	ldr	r1, [r4, #64]	; 0x40
   30c9a:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
   30c9e:	4618      	mov	r0, r3
   30ca0:	7323      	strb	r3, [r4, #12]
   30ca2:	e000      	b.n	30ca6 <am_hal_adc_power_control+0xe2>
   30ca4:	2006      	movs	r0, #6
   30ca6:	b003      	add	sp, #12
   30ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30caa:	2002      	movs	r0, #2
   30cac:	b003      	add	sp, #12
   30cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30cb0:	200d      	movs	r0, #13
   30cb2:	9201      	str	r2, [sp, #4]
   30cb4:	f001 fbec 	bl	32490 <am_hal_pwrctrl_periph_enable>
   30cb8:	9a01      	ldr	r2, [sp, #4]
   30cba:	4610      	mov	r0, r2
   30cbc:	e7f3      	b.n	30ca6 <am_hal_adc_power_control+0xe2>
   30cbe:	2007      	movs	r0, #7
   30cc0:	e7f1      	b.n	30ca6 <am_hal_adc_power_control+0xe2>
   30cc2:	bf00      	nop
   30cc4:	01afafaf 	.word	0x01afafaf
   30cc8:	40038000 	.word	0x40038000

00030ccc <am_hal_audadc_initialize>:
   30ccc:	2800      	cmp	r0, #0
   30cce:	d140      	bne.n	30d52 <am_hal_audadc_initialize+0x86>
   30cd0:	2900      	cmp	r1, #0
   30cd2:	d040      	beq.n	30d56 <am_hal_audadc_initialize+0x8a>
   30cd4:	b538      	push	{r3, r4, r5, lr}
   30cd6:	4b21      	ldr	r3, [pc, #132]	; (30d5c <am_hal_audadc_initialize+0x90>)
   30cd8:	78d8      	ldrb	r0, [r3, #3]
   30cda:	f010 0501 	ands.w	r5, r0, #1
   30cde:	d12d      	bne.n	30d3c <am_hal_audadc_initialize+0x70>
   30ce0:	681a      	ldr	r2, [r3, #0]
   30ce2:	481f      	ldr	r0, [pc, #124]	; (30d60 <am_hal_audadc_initialize+0x94>)
   30ce4:	4c1f      	ldr	r4, [pc, #124]	; (30d64 <am_hal_audadc_initialize+0x98>)
   30ce6:	f002 427e 	and.w	r2, r2, #4261412864	; 0xfe000000
   30cea:	4302      	orrs	r2, r0
   30cec:	481e      	ldr	r0, [pc, #120]	; (30d68 <am_hal_audadc_initialize+0x9c>)
   30cee:	e9c3 2500 	strd	r2, r5, [r3]
   30cf2:	2201      	movs	r2, #1
   30cf4:	6005      	str	r5, [r0, #0]
   30cf6:	600b      	str	r3, [r1, #0]
   30cf8:	4610      	mov	r0, r2
   30cfa:	4623      	mov	r3, r4
   30cfc:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
   30d00:	f7ff faa6 	bl	30250 <am_hal_mram_info_read>
   30d04:	2201      	movs	r2, #1
   30d06:	1d23      	adds	r3, r4, #4
   30d08:	f240 41c1 	movw	r1, #1217	; 0x4c1
   30d0c:	4610      	mov	r0, r2
   30d0e:	f7ff fa9f 	bl	30250 <am_hal_mram_info_read>
   30d12:	2201      	movs	r2, #1
   30d14:	f104 0308 	add.w	r3, r4, #8
   30d18:	f240 41c2 	movw	r1, #1218	; 0x4c2
   30d1c:	4610      	mov	r0, r2
   30d1e:	f7ff fa97 	bl	30250 <am_hal_mram_info_read>
   30d22:	6823      	ldr	r3, [r4, #0]
   30d24:	3301      	adds	r3, #1
   30d26:	d00b      	beq.n	30d40 <am_hal_audadc_initialize+0x74>
   30d28:	6863      	ldr	r3, [r4, #4]
   30d2a:	3301      	adds	r3, #1
   30d2c:	d008      	beq.n	30d40 <am_hal_audadc_initialize+0x74>
   30d2e:	68a3      	ldr	r3, [r4, #8]
   30d30:	3301      	adds	r3, #1
   30d32:	d005      	beq.n	30d40 <am_hal_audadc_initialize+0x74>
   30d34:	2301      	movs	r3, #1
   30d36:	7323      	strb	r3, [r4, #12]
   30d38:	4628      	mov	r0, r5
   30d3a:	bd38      	pop	{r3, r4, r5, pc}
   30d3c:	2007      	movs	r0, #7
   30d3e:	bd38      	pop	{r3, r4, r5, pc}
   30d40:	490a      	ldr	r1, [pc, #40]	; (30d6c <am_hal_audadc_initialize+0xa0>)
   30d42:	4a0b      	ldr	r2, [pc, #44]	; (30d70 <am_hal_audadc_initialize+0xa4>)
   30d44:	4b0b      	ldr	r3, [pc, #44]	; (30d74 <am_hal_audadc_initialize+0xa8>)
   30d46:	6021      	str	r1, [r4, #0]
   30d48:	2000      	movs	r0, #0
   30d4a:	6062      	str	r2, [r4, #4]
   30d4c:	60a3      	str	r3, [r4, #8]
   30d4e:	7320      	strb	r0, [r4, #12]
   30d50:	bd38      	pop	{r3, r4, r5, pc}
   30d52:	2005      	movs	r0, #5
   30d54:	4770      	bx	lr
   30d56:	2006      	movs	r0, #6
   30d58:	4770      	bx	lr
   30d5a:	bf00      	nop
   30d5c:	10019d34 	.word	0x10019d34
   30d60:	01afafaf 	.word	0x01afafaf
   30d64:	10019d80 	.word	0x10019d80
   30d68:	10019d30 	.word	0x10019d30
   30d6c:	4395c000 	.word	0x4395c000
   30d70:	3f839874 	.word	0x3f839874
   30d74:	bb8c47a1 	.word	0xbb8c47a1

00030d78 <am_hal_audadc_configure>:
   30d78:	6803      	ldr	r3, [r0, #0]
   30d7a:	4a26      	ldr	r2, [pc, #152]	; (30e14 <am_hal_audadc_configure+0x9c>)
   30d7c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   30d80:	4293      	cmp	r3, r2
   30d82:	d141      	bne.n	30e08 <am_hal_audadc_configure+0x90>
   30d84:	780a      	ldrb	r2, [r1, #0]
   30d86:	f002 00fd 	and.w	r0, r2, #253	; 0xfd
   30d8a:	0613      	lsls	r3, r2, #24
   30d8c:	2801      	cmp	r0, #1
   30d8e:	f003 7c40 	and.w	ip, r3, #50331648	; 0x3000000
   30d92:	4b21      	ldr	r3, [pc, #132]	; (30e18 <am_hal_audadc_configure+0xa0>)
   30d94:	d001      	beq.n	30d9a <am_hal_audadc_configure+0x22>
   30d96:	2a02      	cmp	r2, #2
   30d98:	d038      	beq.n	30e0c <am_hal_audadc_configure+0x94>
   30d9a:	221e      	movs	r2, #30
   30d9c:	601a      	str	r2, [r3, #0]
   30d9e:	79cb      	ldrb	r3, [r1, #7]
   30da0:	784a      	ldrb	r2, [r1, #1]
   30da2:	7888      	ldrb	r0, [r1, #2]
   30da4:	009b      	lsls	r3, r3, #2
   30da6:	f003 0304 	and.w	r3, r3, #4
   30daa:	0512      	lsls	r2, r2, #20
   30dac:	ea43 030c 	orr.w	r3, r3, ip
   30db0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
   30db4:	4313      	orrs	r3, r2
   30db6:	78ca      	ldrb	r2, [r1, #3]
   30db8:	f891 c004 	ldrb.w	ip, [r1, #4]
   30dbc:	04c0      	lsls	r0, r0, #19
   30dbe:	f400 2000 	and.w	r0, r0, #524288	; 0x80000
   30dc2:	0412      	lsls	r2, r2, #16
   30dc4:	4303      	orrs	r3, r0
   30dc6:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
   30dca:	7948      	ldrb	r0, [r1, #5]
   30dcc:	4313      	orrs	r3, r2
   30dce:	ea4f 3c4c 	mov.w	ip, ip, lsl #13
   30dd2:	798a      	ldrb	r2, [r1, #6]
   30dd4:	f40c 5c00 	and.w	ip, ip, #8192	; 0x2000
   30dd8:	0101      	lsls	r1, r0, #4
   30dda:	ea43 030c 	orr.w	r3, r3, ip
   30dde:	f001 0110 	and.w	r1, r1, #16
   30de2:	00d2      	lsls	r2, r2, #3
   30de4:	430b      	orrs	r3, r1
   30de6:	f002 0208 	and.w	r2, r2, #8
   30dea:	490c      	ldr	r1, [pc, #48]	; (30e1c <am_hal_audadc_configure+0xa4>)
   30dec:	4313      	orrs	r3, r2
   30dee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   30df2:	600b      	str	r3, [r1, #0]
   30df4:	6c8b      	ldr	r3, [r1, #72]	; 0x48
   30df6:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
   30dfa:	f023 031f 	bic.w	r3, r3, #31
   30dfe:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
   30e02:	2000      	movs	r0, #0
   30e04:	648b      	str	r3, [r1, #72]	; 0x48
   30e06:	4770      	bx	lr
   30e08:	2002      	movs	r0, #2
   30e0a:	4770      	bx	lr
   30e0c:	2213      	movs	r2, #19
   30e0e:	601a      	str	r2, [r3, #0]
   30e10:	e7c5      	b.n	30d9e <am_hal_audadc_configure+0x26>
   30e12:	bf00      	nop
   30e14:	01afafaf 	.word	0x01afafaf
   30e18:	10019d2c 	.word	0x10019d2c
   30e1c:	40210000 	.word	0x40210000

00030e20 <am_hal_audadc_configure_slot>:
   30e20:	6803      	ldr	r3, [r0, #0]
   30e22:	b410      	push	{r4}
   30e24:	4c1c      	ldr	r4, [pc, #112]	; (30e98 <am_hal_audadc_configure_slot+0x78>)
   30e26:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   30e2a:	42a3      	cmp	r3, r4
   30e2c:	d130      	bne.n	30e90 <am_hal_audadc_configure_slot+0x70>
   30e2e:	2903      	cmp	r1, #3
   30e30:	d82a      	bhi.n	30e88 <am_hal_audadc_configure_slot+0x68>
   30e32:	481a      	ldr	r0, [pc, #104]	; (30e9c <am_hal_audadc_configure_slot+0x7c>)
   30e34:	6853      	ldr	r3, [r2, #4]
   30e36:	6800      	ldr	r0, [r0, #0]
   30e38:	4283      	cmp	r3, r0
   30e3a:	d325      	bcc.n	30e88 <am_hal_audadc_configure_slot+0x68>
   30e3c:	7a94      	ldrb	r4, [r2, #10]
   30e3e:	7810      	ldrb	r0, [r2, #0]
   30e40:	f892 c008 	ldrb.w	ip, [r2, #8]
   30e44:	049b      	lsls	r3, r3, #18
   30e46:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
   30e4a:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
   30e4e:	7ad4      	ldrb	r4, [r2, #11]
   30e50:	0600      	lsls	r0, r0, #24
   30e52:	4323      	orrs	r3, r4
   30e54:	f000 60e0 	and.w	r0, r0, #117440512	; 0x7000000
   30e58:	4303      	orrs	r3, r0
   30e5a:	7a50      	ldrb	r0, [r2, #9]
   30e5c:	4a10      	ldr	r2, [pc, #64]	; (30ea0 <am_hal_audadc_configure_slot+0x80>)
   30e5e:	4c11      	ldr	r4, [pc, #68]	; (30ea4 <am_hal_audadc_configure_slot+0x84>)
   30e60:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
   30e64:	0200      	lsls	r0, r0, #8
   30e66:	440a      	add	r2, r1
   30e68:	f40c 3c40 	and.w	ip, ip, #196608	; 0x30000
   30e6c:	f400 6170 	and.w	r1, r0, #3840	; 0xf00
   30e70:	ea43 030c 	orr.w	r3, r3, ip
   30e74:	0092      	lsls	r2, r2, #2
   30e76:	430b      	orrs	r3, r1
   30e78:	6013      	str	r3, [r2, #0]
   30e7a:	6823      	ldr	r3, [r4, #0]
   30e7c:	3301      	adds	r3, #1
   30e7e:	2000      	movs	r0, #0
   30e80:	6023      	str	r3, [r4, #0]
   30e82:	f85d 4b04 	ldr.w	r4, [sp], #4
   30e86:	4770      	bx	lr
   30e88:	2005      	movs	r0, #5
   30e8a:	f85d 4b04 	ldr.w	r4, [sp], #4
   30e8e:	4770      	bx	lr
   30e90:	2002      	movs	r0, #2
   30e92:	f85d 4b04 	ldr.w	r4, [sp], #4
   30e96:	4770      	bx	lr
   30e98:	01afafaf 	.word	0x01afafaf
   30e9c:	10019d2c 	.word	0x10019d2c
   30ea0:	10084003 	.word	0x10084003
   30ea4:	10019d30 	.word	0x10019d30

00030ea8 <am_hal_audadc_configure_irtt>:
   30ea8:	6803      	ldr	r3, [r0, #0]
   30eaa:	4a09      	ldr	r2, [pc, #36]	; (30ed0 <am_hal_audadc_configure_irtt+0x28>)
   30eac:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   30eb0:	4293      	cmp	r3, r2
   30eb2:	d10b      	bne.n	30ecc <am_hal_audadc_configure_irtt+0x24>
   30eb4:	784b      	ldrb	r3, [r1, #1]
   30eb6:	684a      	ldr	r2, [r1, #4]
   30eb8:	4906      	ldr	r1, [pc, #24]	; (30ed4 <am_hal_audadc_configure_irtt+0x2c>)
   30eba:	041b      	lsls	r3, r3, #16
   30ebc:	f3c2 0209 	ubfx	r2, r2, #0, #10
   30ec0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
   30ec4:	4313      	orrs	r3, r2
   30ec6:	640b      	str	r3, [r1, #64]	; 0x40
   30ec8:	2000      	movs	r0, #0
   30eca:	4770      	bx	lr
   30ecc:	2002      	movs	r0, #2
   30ece:	4770      	bx	lr
   30ed0:	01afafaf 	.word	0x01afafaf
   30ed4:	40210000 	.word	0x40210000

00030ed8 <am_hal_audadc_irtt_enable>:
   30ed8:	6803      	ldr	r3, [r0, #0]
   30eda:	4a07      	ldr	r2, [pc, #28]	; (30ef8 <am_hal_audadc_irtt_enable+0x20>)
   30edc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   30ee0:	4293      	cmp	r3, r2
   30ee2:	d106      	bne.n	30ef2 <am_hal_audadc_irtt_enable+0x1a>
   30ee4:	4a05      	ldr	r2, [pc, #20]	; (30efc <am_hal_audadc_irtt_enable+0x24>)
   30ee6:	6c13      	ldr	r3, [r2, #64]	; 0x40
   30ee8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   30eec:	2000      	movs	r0, #0
   30eee:	6413      	str	r3, [r2, #64]	; 0x40
   30ef0:	4770      	bx	lr
   30ef2:	2002      	movs	r0, #2
   30ef4:	4770      	bx	lr
   30ef6:	bf00      	nop
   30ef8:	01afafaf 	.word	0x01afafaf
   30efc:	40210000 	.word	0x40210000

00030f00 <am_hal_audadc_configure_dma>:
   30f00:	6803      	ldr	r3, [r0, #0]
   30f02:	4a14      	ldr	r2, [pc, #80]	; (30f54 <am_hal_audadc_configure_dma+0x54>)
   30f04:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   30f08:	4293      	cmp	r3, r2
   30f0a:	d121      	bne.n	30f50 <am_hal_audadc_configure_dma+0x50>
   30f0c:	b410      	push	{r4}
   30f0e:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
   30f12:	e9c0 3411 	strd	r3, r4, [r0, #68]	; 0x44
   30f16:	6404      	str	r4, [r0, #64]	; 0x40
   30f18:	784b      	ldrb	r3, [r1, #1]
   30f1a:	7808      	ldrb	r0, [r1, #0]
   30f1c:	4a0e      	ldr	r2, [pc, #56]	; (30f58 <am_hal_audadc_configure_dma+0x58>)
   30f1e:	021b      	lsls	r3, r3, #8
   30f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
   30f24:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
   30f28:	f043 0301 	orr.w	r3, r3, #1
   30f2c:	f8c2 3280 	str.w	r3, [r2, #640]	; 0x280
   30f30:	8888      	ldrh	r0, [r1, #4]
   30f32:	f8d2 3288 	ldr.w	r3, [r2, #648]	; 0x288
   30f36:	f360 0391 	bfi	r3, r0, #2, #16
   30f3a:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
   30f3e:	2101      	movs	r1, #1
   30f40:	f8c2 428c 	str.w	r4, [r2, #652]	; 0x28c
   30f44:	2000      	movs	r0, #0
   30f46:	f85d 4b04 	ldr.w	r4, [sp], #4
   30f4a:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
   30f4e:	4770      	bx	lr
   30f50:	2002      	movs	r0, #2
   30f52:	4770      	bx	lr
   30f54:	01afafaf 	.word	0x01afafaf
   30f58:	40210000 	.word	0x40210000

00030f5c <am_hal_audadc_enable>:
   30f5c:	6802      	ldr	r2, [r0, #0]
   30f5e:	490c      	ldr	r1, [pc, #48]	; (30f90 <am_hal_audadc_enable+0x34>)
   30f60:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   30f64:	428a      	cmp	r2, r1
   30f66:	4603      	mov	r3, r0
   30f68:	d10f      	bne.n	30f8a <am_hal_audadc_enable+0x2e>
   30f6a:	78c0      	ldrb	r0, [r0, #3]
   30f6c:	f010 0002 	ands.w	r0, r0, #2
   30f70:	d109      	bne.n	30f86 <am_hal_audadc_enable+0x2a>
   30f72:	4908      	ldr	r1, [pc, #32]	; (30f94 <am_hal_audadc_enable+0x38>)
   30f74:	680a      	ldr	r2, [r1, #0]
   30f76:	f042 0201 	orr.w	r2, r2, #1
   30f7a:	600a      	str	r2, [r1, #0]
   30f7c:	78da      	ldrb	r2, [r3, #3]
   30f7e:	f042 0202 	orr.w	r2, r2, #2
   30f82:	70da      	strb	r2, [r3, #3]
   30f84:	4770      	bx	lr
   30f86:	2000      	movs	r0, #0
   30f88:	4770      	bx	lr
   30f8a:	2002      	movs	r0, #2
   30f8c:	4770      	bx	lr
   30f8e:	bf00      	nop
   30f90:	01afafaf 	.word	0x01afafaf
   30f94:	40210000 	.word	0x40210000

00030f98 <am_hal_audadc_interrupt_enable>:
   30f98:	6803      	ldr	r3, [r0, #0]
   30f9a:	4a07      	ldr	r2, [pc, #28]	; (30fb8 <am_hal_audadc_interrupt_enable+0x20>)
   30f9c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   30fa0:	4293      	cmp	r3, r2
   30fa2:	d107      	bne.n	30fb4 <am_hal_audadc_interrupt_enable+0x1c>
   30fa4:	4a05      	ldr	r2, [pc, #20]	; (30fbc <am_hal_audadc_interrupt_enable+0x24>)
   30fa6:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   30faa:	4319      	orrs	r1, r3
   30fac:	2000      	movs	r0, #0
   30fae:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
   30fb2:	4770      	bx	lr
   30fb4:	2002      	movs	r0, #2
   30fb6:	4770      	bx	lr
   30fb8:	01afafaf 	.word	0x01afafaf
   30fbc:	40210000 	.word	0x40210000

00030fc0 <am_hal_audadc_interrupt_status>:
   30fc0:	6803      	ldr	r3, [r0, #0]
   30fc2:	b410      	push	{r4}
   30fc4:	4c0e      	ldr	r4, [pc, #56]	; (31000 <am_hal_audadc_interrupt_status+0x40>)
   30fc6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   30fca:	42a3      	cmp	r3, r4
   30fcc:	d113      	bne.n	30ff6 <am_hal_audadc_interrupt_status+0x36>
   30fce:	b93a      	cbnz	r2, 30fe0 <am_hal_audadc_interrupt_status+0x20>
   30fd0:	4b0c      	ldr	r3, [pc, #48]	; (31004 <am_hal_audadc_interrupt_status+0x44>)
   30fd2:	f85d 4b04 	ldr.w	r4, [sp], #4
   30fd6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
   30fda:	600b      	str	r3, [r1, #0]
   30fdc:	4610      	mov	r0, r2
   30fde:	4770      	bx	lr
   30fe0:	4a08      	ldr	r2, [pc, #32]	; (31004 <am_hal_audadc_interrupt_status+0x44>)
   30fe2:	f8d2 4204 	ldr.w	r4, [r2, #516]	; 0x204
   30fe6:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   30fea:	4023      	ands	r3, r4
   30fec:	2000      	movs	r0, #0
   30fee:	f85d 4b04 	ldr.w	r4, [sp], #4
   30ff2:	600b      	str	r3, [r1, #0]
   30ff4:	4770      	bx	lr
   30ff6:	2002      	movs	r0, #2
   30ff8:	f85d 4b04 	ldr.w	r4, [sp], #4
   30ffc:	4770      	bx	lr
   30ffe:	bf00      	nop
   31000:	01afafaf 	.word	0x01afafaf
   31004:	40210000 	.word	0x40210000

00031008 <am_hal_audadc_interrupt_clear>:
   31008:	6803      	ldr	r3, [r0, #0]
   3100a:	4a05      	ldr	r2, [pc, #20]	; (31020 <am_hal_audadc_interrupt_clear+0x18>)
   3100c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   31010:	4293      	cmp	r3, r2
   31012:	bf03      	ittte	eq
   31014:	4b03      	ldreq	r3, [pc, #12]	; (31024 <am_hal_audadc_interrupt_clear+0x1c>)
   31016:	2000      	moveq	r0, #0
   31018:	f8c3 1208 	streq.w	r1, [r3, #520]	; 0x208
   3101c:	2002      	movne	r0, #2
   3101e:	4770      	bx	lr
   31020:	01afafaf 	.word	0x01afafaf
   31024:	40210000 	.word	0x40210000

00031028 <am_hal_audadc_interrupt_service>:
   31028:	e9d0 3211 	ldrd	r3, r2, [r0, #68]	; 0x44
   3102c:	429a      	cmp	r2, r3
   3102e:	bf08      	it	eq
   31030:	6c03      	ldreq	r3, [r0, #64]	; 0x40
   31032:	4a07      	ldr	r2, [pc, #28]	; (31050 <am_hal_audadc_interrupt_service+0x28>)
   31034:	6483      	str	r3, [r0, #72]	; 0x48
   31036:	f8b1 c004 	ldrh.w	ip, [r1, #4]
   3103a:	f8d2 1288 	ldr.w	r1, [r2, #648]	; 0x288
   3103e:	f36c 0191 	bfi	r1, ip, #2, #16
   31042:	f8c2 1288 	str.w	r1, [r2, #648]	; 0x288
   31046:	2000      	movs	r0, #0
   31048:	f8c2 328c 	str.w	r3, [r2, #652]	; 0x28c
   3104c:	4770      	bx	lr
   3104e:	bf00      	nop
   31050:	40210000 	.word	0x40210000

00031054 <am_hal_audadc_samples_read>:
   31054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31058:	6800      	ldr	r0, [r0, #0]
   3105a:	4c83      	ldr	r4, [pc, #524]	; (31268 <am_hal_audadc_samples_read+0x214>)
   3105c:	9e09      	ldr	r6, [sp, #36]	; 0x24
   3105e:	f89d e028 	ldrb.w	lr, [sp, #40]	; 0x28
   31062:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
   31066:	42a0      	cmp	r0, r4
   31068:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
   3106c:	d176      	bne.n	3115c <am_hal_audadc_samples_read+0x108>
   3106e:	2e00      	cmp	r6, #0
   31070:	d077      	beq.n	31162 <am_hal_audadc_samples_read+0x10e>
   31072:	2400      	movs	r4, #0
   31074:	f8d2 8000 	ldr.w	r8, [r2]
   31078:	6014      	str	r4, [r2, #0]
   3107a:	2900      	cmp	r1, #0
   3107c:	d075      	beq.n	3116a <am_hal_audadc_samples_read+0x116>
   3107e:	f647 79ff 	movw	r9, #32767	; 0x7fff
   31082:	b31b      	cbz	r3, 310cc <am_hal_audadc_samples_read+0x78>
   31084:	6808      	ldr	r0, [r1, #0]
   31086:	f020 0c0f 	bic.w	ip, r0, #15
   3108a:	fa0f fa8c 	sxth.w	sl, ip
   3108e:	f3c0 40c0 	ubfx	r0, r0, #19, #1
   31092:	8070      	strh	r0, [r6, #2]
   31094:	fa1f fc8c 	uxth.w	ip, ip
   31098:	f8a6 a000 	strh.w	sl, [r6]
   3109c:	b1ad      	cbz	r5, 310ca <am_hal_audadc_samples_read+0x76>
   3109e:	ea4f 0bc0 	mov.w	fp, r0, lsl #3
   310a2:	eb0b 0040 	add.w	r0, fp, r0, lsl #1
   310a6:	eb05 0b80 	add.w	fp, r5, r0, lsl #2
   310aa:	f815 0020 	ldrb.w	r0, [r5, r0, lsl #2]
   310ae:	b160      	cbz	r0, 310ca <am_hal_audadc_samples_read+0x76>
   310b0:	f8db 0010 	ldr.w	r0, [fp, #16]
   310b4:	f1ba 0f00 	cmp.w	sl, #0
   310b8:	ea4f 1000 	mov.w	r0, r0, lsl #4
   310bc:	db36      	blt.n	3112c <am_hal_audadc_samples_read+0xd8>
   310be:	eba9 0a0a 	sub.w	sl, r9, sl
   310c2:	4582      	cmp	sl, r0
   310c4:	da3a      	bge.n	3113c <am_hal_audadc_samples_read+0xe8>
   310c6:	f8a6 9000 	strh.w	r9, [r6]
   310ca:	3604      	adds	r6, #4
   310cc:	f1be 0f00 	cmp.w	lr, #0
   310d0:	d023      	beq.n	3111a <am_hal_audadc_samples_read+0xc6>
   310d2:	6808      	ldr	r0, [r1, #0]
   310d4:	ea4f 5c10 	mov.w	ip, r0, lsr #20
   310d8:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
   310dc:	f3c0 40c0 	ubfx	r0, r0, #19, #1
   310e0:	fa0f fa8c 	sxth.w	sl, ip
   310e4:	8078      	strh	r0, [r7, #2]
   310e6:	f8a7 a000 	strh.w	sl, [r7]
   310ea:	b1ad      	cbz	r5, 31118 <am_hal_audadc_samples_read+0xc4>
   310ec:	0040      	lsls	r0, r0, #1
   310ee:	3001      	adds	r0, #1
   310f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   310f4:	eb05 0b80 	add.w	fp, r5, r0, lsl #2
   310f8:	f815 0020 	ldrb.w	r0, [r5, r0, lsl #2]
   310fc:	b160      	cbz	r0, 31118 <am_hal_audadc_samples_read+0xc4>
   310fe:	f8db 0010 	ldr.w	r0, [fp, #16]
   31102:	f1ba 0f00 	cmp.w	sl, #0
   31106:	ea4f 1000 	mov.w	r0, r0, lsl #4
   3110a:	db1b      	blt.n	31144 <am_hal_audadc_samples_read+0xf0>
   3110c:	eba9 0a0a 	sub.w	sl, r9, sl
   31110:	4582      	cmp	sl, r0
   31112:	da1f      	bge.n	31154 <am_hal_audadc_samples_read+0x100>
   31114:	f8a7 9000 	strh.w	r9, [r7]
   31118:	3704      	adds	r7, #4
   3111a:	3401      	adds	r4, #1
   3111c:	4544      	cmp	r4, r8
   3111e:	6014      	str	r4, [r2, #0]
   31120:	f101 0104 	add.w	r1, r1, #4
   31124:	d3ad      	bcc.n	31082 <am_hal_audadc_samples_read+0x2e>
   31126:	2000      	movs	r0, #0
   31128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3112c:	f1ca 4a7f 	rsb	sl, sl, #4278190080	; 0xff000000
   31130:	f50a 0a7f 	add.w	sl, sl, #16711680	; 0xff0000
   31134:	f50a 4a00 	add.w	sl, sl, #32768	; 0x8000
   31138:	4582      	cmp	sl, r0
   3113a:	dc6f      	bgt.n	3121c <am_hal_audadc_samples_read+0x1c8>
   3113c:	4484      	add	ip, r0
   3113e:	f8a6 c000 	strh.w	ip, [r6]
   31142:	e7c2      	b.n	310ca <am_hal_audadc_samples_read+0x76>
   31144:	f1ca 4a7f 	rsb	sl, sl, #4278190080	; 0xff000000
   31148:	f50a 0a7f 	add.w	sl, sl, #16711680	; 0xff0000
   3114c:	f50a 4a00 	add.w	sl, sl, #32768	; 0x8000
   31150:	4582      	cmp	sl, r0
   31152:	dc67      	bgt.n	31224 <am_hal_audadc_samples_read+0x1d0>
   31154:	4484      	add	ip, r0
   31156:	f8a7 c000 	strh.w	ip, [r7]
   3115a:	e7dd      	b.n	31118 <am_hal_audadc_samples_read+0xc4>
   3115c:	2002      	movs	r0, #2
   3115e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31162:	2f00      	cmp	r7, #0
   31164:	d185      	bne.n	31072 <am_hal_audadc_samples_read+0x1e>
   31166:	2006      	movs	r0, #6
   31168:	e7de      	b.n	31128 <am_hal_audadc_samples_read+0xd4>
   3116a:	f8df 8100 	ldr.w	r8, [pc, #256]	; 3126c <am_hal_audadc_samples_read+0x218>
   3116e:	2401      	movs	r4, #1
   31170:	f647 7aff 	movw	sl, #32767	; 0x7fff
   31174:	f8d8 103c 	ldr.w	r1, [r8, #60]	; 0x3c
   31178:	b323      	cbz	r3, 311c4 <am_hal_audadc_samples_read+0x170>
   3117a:	f021 000f 	bic.w	r0, r1, #15
   3117e:	fa0f f980 	sxth.w	r9, r0
   31182:	f3c1 4cc0 	ubfx	ip, r1, #19, #1
   31186:	f8a6 c002 	strh.w	ip, [r6, #2]
   3118a:	b280      	uxth	r0, r0
   3118c:	f8a6 9000 	strh.w	r9, [r6]
   31190:	b1bd      	cbz	r5, 311c2 <am_hal_audadc_samples_read+0x16e>
   31192:	ea4f 0bcc 	mov.w	fp, ip, lsl #3
   31196:	eb0b 0c4c 	add.w	ip, fp, ip, lsl #1
   3119a:	eb05 0b8c 	add.w	fp, r5, ip, lsl #2
   3119e:	f815 c02c 	ldrb.w	ip, [r5, ip, lsl #2]
   311a2:	f1bc 0f00 	cmp.w	ip, #0
   311a6:	d00c      	beq.n	311c2 <am_hal_audadc_samples_read+0x16e>
   311a8:	f8db c010 	ldr.w	ip, [fp, #16]
   311ac:	f1b9 0f00 	cmp.w	r9, #0
   311b0:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
   311b4:	db45      	blt.n	31242 <am_hal_audadc_samples_read+0x1ee>
   311b6:	ebaa 0909 	sub.w	r9, sl, r9
   311ba:	45e1      	cmp	r9, ip
   311bc:	da49      	bge.n	31252 <am_hal_audadc_samples_read+0x1fe>
   311be:	f8a6 a000 	strh.w	sl, [r6]
   311c2:	3604      	adds	r6, #4
   311c4:	f1be 0f00 	cmp.w	lr, #0
   311c8:	d020      	beq.n	3120c <am_hal_audadc_samples_read+0x1b8>
   311ca:	0d08      	lsrs	r0, r1, #20
   311cc:	0100      	lsls	r0, r0, #4
   311ce:	f3c1 41c0 	ubfx	r1, r1, #19, #1
   311d2:	fa0f fc80 	sxth.w	ip, r0
   311d6:	8079      	strh	r1, [r7, #2]
   311d8:	f8a7 c000 	strh.w	ip, [r7]
   311dc:	b1ad      	cbz	r5, 3120a <am_hal_audadc_samples_read+0x1b6>
   311de:	0049      	lsls	r1, r1, #1
   311e0:	3101      	adds	r1, #1
   311e2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   311e6:	eb05 0981 	add.w	r9, r5, r1, lsl #2
   311ea:	f815 1021 	ldrb.w	r1, [r5, r1, lsl #2]
   311ee:	b161      	cbz	r1, 3120a <am_hal_audadc_samples_read+0x1b6>
   311f0:	f8d9 1010 	ldr.w	r1, [r9, #16]
   311f4:	f1bc 0f00 	cmp.w	ip, #0
   311f8:	ea4f 1101 	mov.w	r1, r1, lsl #4
   311fc:	db16      	blt.n	3122c <am_hal_audadc_samples_read+0x1d8>
   311fe:	ebaa 0c0c 	sub.w	ip, sl, ip
   31202:	458c      	cmp	ip, r1
   31204:	da1a      	bge.n	3123c <am_hal_audadc_samples_read+0x1e8>
   31206:	f8a7 a000 	strh.w	sl, [r7]
   3120a:	3704      	adds	r7, #4
   3120c:	6014      	str	r4, [r2, #0]
   3120e:	f8d8 1038 	ldr.w	r1, [r8, #56]	; 0x38
   31212:	3101      	adds	r1, #1
   31214:	f104 0401 	add.w	r4, r4, #1
   31218:	d1ac      	bne.n	31174 <am_hal_audadc_samples_read+0x120>
   3121a:	e784      	b.n	31126 <am_hal_audadc_samples_read+0xd2>
   3121c:	f248 0000 	movw	r0, #32768	; 0x8000
   31220:	8030      	strh	r0, [r6, #0]
   31222:	e752      	b.n	310ca <am_hal_audadc_samples_read+0x76>
   31224:	f248 0000 	movw	r0, #32768	; 0x8000
   31228:	8038      	strh	r0, [r7, #0]
   3122a:	e775      	b.n	31118 <am_hal_audadc_samples_read+0xc4>
   3122c:	f1cc 4c7f 	rsb	ip, ip, #4278190080	; 0xff000000
   31230:	f50c 0c7f 	add.w	ip, ip, #16711680	; 0xff0000
   31234:	f50c 4c00 	add.w	ip, ip, #32768	; 0x8000
   31238:	458c      	cmp	ip, r1
   3123a:	dc11      	bgt.n	31260 <am_hal_audadc_samples_read+0x20c>
   3123c:	4408      	add	r0, r1
   3123e:	8038      	strh	r0, [r7, #0]
   31240:	e7e3      	b.n	3120a <am_hal_audadc_samples_read+0x1b6>
   31242:	f1c9 497f 	rsb	r9, r9, #4278190080	; 0xff000000
   31246:	f509 097f 	add.w	r9, r9, #16711680	; 0xff0000
   3124a:	f509 4900 	add.w	r9, r9, #32768	; 0x8000
   3124e:	45e1      	cmp	r9, ip
   31250:	dc02      	bgt.n	31258 <am_hal_audadc_samples_read+0x204>
   31252:	4460      	add	r0, ip
   31254:	8030      	strh	r0, [r6, #0]
   31256:	e7b4      	b.n	311c2 <am_hal_audadc_samples_read+0x16e>
   31258:	f248 0000 	movw	r0, #32768	; 0x8000
   3125c:	8030      	strh	r0, [r6, #0]
   3125e:	e7b0      	b.n	311c2 <am_hal_audadc_samples_read+0x16e>
   31260:	f248 0100 	movw	r1, #32768	; 0x8000
   31264:	8039      	strh	r1, [r7, #0]
   31266:	e7d0      	b.n	3120a <am_hal_audadc_samples_read+0x1b6>
   31268:	01afafaf 	.word	0x01afafaf
   3126c:	40210000 	.word	0x40210000

00031270 <am_hal_audadc_sw_trigger>:
   31270:	6803      	ldr	r3, [r0, #0]
   31272:	4a06      	ldr	r2, [pc, #24]	; (3128c <am_hal_audadc_sw_trigger+0x1c>)
   31274:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   31278:	4293      	cmp	r3, r2
   3127a:	d104      	bne.n	31286 <am_hal_audadc_sw_trigger+0x16>
   3127c:	4b04      	ldr	r3, [pc, #16]	; (31290 <am_hal_audadc_sw_trigger+0x20>)
   3127e:	2237      	movs	r2, #55	; 0x37
   31280:	609a      	str	r2, [r3, #8]
   31282:	2000      	movs	r0, #0
   31284:	4770      	bx	lr
   31286:	2002      	movs	r0, #2
   31288:	4770      	bx	lr
   3128a:	bf00      	nop
   3128c:	01afafaf 	.word	0x01afafaf
   31290:	40210000 	.word	0x40210000

00031294 <am_hal_audadc_power_control>:
   31294:	b510      	push	{r4, lr}
   31296:	4604      	mov	r4, r0
   31298:	4831      	ldr	r0, [pc, #196]	; (31360 <am_hal_audadc_power_control+0xcc>)
   3129a:	6823      	ldr	r3, [r4, #0]
   3129c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   312a0:	4283      	cmp	r3, r0
   312a2:	b082      	sub	sp, #8
   312a4:	d150      	bne.n	31348 <am_hal_audadc_power_control+0xb4>
   312a6:	b329      	cbz	r1, 312f4 <am_hal_audadc_power_control+0x60>
   312a8:	3901      	subs	r1, #1
   312aa:	2901      	cmp	r1, #1
   312ac:	d849      	bhi.n	31342 <am_hal_audadc_power_control+0xae>
   312ae:	b1da      	cbz	r2, 312e8 <am_hal_audadc_power_control+0x54>
   312b0:	4b2c      	ldr	r3, [pc, #176]	; (31364 <am_hal_audadc_power_control+0xd0>)
   312b2:	68d9      	ldr	r1, [r3, #12]
   312b4:	6161      	str	r1, [r4, #20]
   312b6:	6919      	ldr	r1, [r3, #16]
   312b8:	61a1      	str	r1, [r4, #24]
   312ba:	6959      	ldr	r1, [r3, #20]
   312bc:	61e1      	str	r1, [r4, #28]
   312be:	6999      	ldr	r1, [r3, #24]
   312c0:	6221      	str	r1, [r4, #32]
   312c2:	69d9      	ldr	r1, [r3, #28]
   312c4:	6261      	str	r1, [r4, #36]	; 0x24
   312c6:	6a19      	ldr	r1, [r3, #32]
   312c8:	62a1      	str	r1, [r4, #40]	; 0x28
   312ca:	6a59      	ldr	r1, [r3, #36]	; 0x24
   312cc:	62e1      	str	r1, [r4, #44]	; 0x2c
   312ce:	6a99      	ldr	r1, [r3, #40]	; 0x28
   312d0:	6321      	str	r1, [r4, #48]	; 0x30
   312d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   312d4:	6361      	str	r1, [r4, #52]	; 0x34
   312d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
   312d8:	63a1      	str	r1, [r4, #56]	; 0x38
   312da:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
   312de:	63e1      	str	r1, [r4, #60]	; 0x3c
   312e0:	681b      	ldr	r3, [r3, #0]
   312e2:	6123      	str	r3, [r4, #16]
   312e4:	2201      	movs	r2, #1
   312e6:	7322      	strb	r2, [r4, #12]
   312e8:	2021      	movs	r0, #33	; 0x21
   312ea:	f001 f9a1 	bl	32630 <am_hal_pwrctrl_periph_disable>
   312ee:	2000      	movs	r0, #0
   312f0:	b002      	add	sp, #8
   312f2:	bd10      	pop	{r4, pc}
   312f4:	2a00      	cmp	r2, #0
   312f6:	d02a      	beq.n	3134e <am_hal_audadc_power_control+0xba>
   312f8:	7b23      	ldrb	r3, [r4, #12]
   312fa:	2b00      	cmp	r3, #0
   312fc:	d02e      	beq.n	3135c <am_hal_audadc_power_control+0xc8>
   312fe:	2021      	movs	r0, #33	; 0x21
   31300:	9101      	str	r1, [sp, #4]
   31302:	f001 f8c5 	bl	32490 <am_hal_pwrctrl_periph_enable>
   31306:	4b17      	ldr	r3, [pc, #92]	; (31364 <am_hal_audadc_power_control+0xd0>)
   31308:	6962      	ldr	r2, [r4, #20]
   3130a:	60da      	str	r2, [r3, #12]
   3130c:	69a2      	ldr	r2, [r4, #24]
   3130e:	611a      	str	r2, [r3, #16]
   31310:	69e2      	ldr	r2, [r4, #28]
   31312:	615a      	str	r2, [r3, #20]
   31314:	6a22      	ldr	r2, [r4, #32]
   31316:	619a      	str	r2, [r3, #24]
   31318:	6a62      	ldr	r2, [r4, #36]	; 0x24
   3131a:	61da      	str	r2, [r3, #28]
   3131c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   3131e:	621a      	str	r2, [r3, #32]
   31320:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   31322:	625a      	str	r2, [r3, #36]	; 0x24
   31324:	6b22      	ldr	r2, [r4, #48]	; 0x30
   31326:	629a      	str	r2, [r3, #40]	; 0x28
   31328:	6b62      	ldr	r2, [r4, #52]	; 0x34
   3132a:	62da      	str	r2, [r3, #44]	; 0x2c
   3132c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   3132e:	631a      	str	r2, [r3, #48]	; 0x30
   31330:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   31332:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   31336:	9901      	ldr	r1, [sp, #4]
   31338:	6922      	ldr	r2, [r4, #16]
   3133a:	601a      	str	r2, [r3, #0]
   3133c:	4608      	mov	r0, r1
   3133e:	7321      	strb	r1, [r4, #12]
   31340:	e000      	b.n	31344 <am_hal_audadc_power_control+0xb0>
   31342:	2006      	movs	r0, #6
   31344:	b002      	add	sp, #8
   31346:	bd10      	pop	{r4, pc}
   31348:	2002      	movs	r0, #2
   3134a:	b002      	add	sp, #8
   3134c:	bd10      	pop	{r4, pc}
   3134e:	2021      	movs	r0, #33	; 0x21
   31350:	9201      	str	r2, [sp, #4]
   31352:	f001 f89d 	bl	32490 <am_hal_pwrctrl_periph_enable>
   31356:	9a01      	ldr	r2, [sp, #4]
   31358:	4610      	mov	r0, r2
   3135a:	e7f3      	b.n	31344 <am_hal_audadc_power_control+0xb0>
   3135c:	2007      	movs	r0, #7
   3135e:	e7f1      	b.n	31344 <am_hal_audadc_power_control+0xb0>
   31360:	01afafaf 	.word	0x01afafaf
   31364:	40210000 	.word	0x40210000

00031368 <am_hal_audadc_gain_set>:
   31368:	2900      	cmp	r1, #0
   3136a:	b530      	push	{r4, r5, lr}
   3136c:	f2c0 8105 	blt.w	3157a <am_hal_audadc_gain_set+0x212>
   31370:	2917      	cmp	r1, #23
   31372:	f340 8109 	ble.w	31588 <am_hal_audadc_gain_set+0x220>
   31376:	2947      	cmp	r1, #71	; 0x47
   31378:	f1a1 0218 	sub.w	r2, r1, #24
   3137c:	dc14      	bgt.n	313a8 <am_hal_audadc_gain_set+0x40>
   3137e:	4b86      	ldr	r3, [pc, #536]	; (31598 <am_hal_audadc_gain_set+0x230>)
   31380:	fba3 1302 	umull	r1, r3, r3, r2
   31384:	f023 0103 	bic.w	r1, r3, #3
   31388:	ebc1 0193 	rsb	r1, r1, r3, lsr #2
   3138c:	0049      	lsls	r1, r1, #1
   3138e:	089b      	lsrs	r3, r3, #2
   31390:	f04f 0c00 	mov.w	ip, #0
   31394:	4411      	add	r1, r2
   31396:	4664      	mov	r4, ip
   31398:	4662      	mov	r2, ip
   3139a:	2803      	cmp	r0, #3
   3139c:	f200 80fa 	bhi.w	31594 <am_hal_audadc_gain_set+0x22c>
   313a0:	e8df f000 	tbb	[pc, r0]
   313a4:	063f78b1 	.word	0x063f78b1
   313a8:	f06f 0129 	mvn.w	r1, #41	; 0x29
   313ac:	2307      	movs	r3, #7
   313ae:	e7ef      	b.n	31390 <am_hal_audadc_gain_set+0x28>
   313b0:	487a      	ldr	r0, [pc, #488]	; (3159c <am_hal_audadc_gain_set+0x234>)
   313b2:	f8d0 2440 	ldr.w	r2, [r0, #1088]	; 0x440
   313b6:	f8d0 5440 	ldr.w	r5, [r0, #1088]	; 0x440
   313ba:	f3c2 4280 	ubfx	r2, r2, #18, #1
   313be:	ea42 020c 	orr.w	r2, r2, ip
   313c2:	f425 2540 	bic.w	r5, r5, #786432	; 0xc0000
   313c6:	ea45 4582 	orr.w	r5, r5, r2, lsl #18
   313ca:	f8c0 5440 	str.w	r5, [r0, #1088]	; 0x440
   313ce:	f8d0 5440 	ldr.w	r5, [r0, #1088]	; 0x440
   313d2:	0512      	lsls	r2, r2, #20
   313d4:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
   313d8:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
   313dc:	432a      	orrs	r2, r5
   313de:	f8c0 2440 	str.w	r2, [r0, #1088]	; 0x440
   313e2:	f8d0 2440 	ldr.w	r2, [r0, #1088]	; 0x440
   313e6:	025b      	lsls	r3, r3, #9
   313e8:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
   313ec:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
   313f0:	4313      	orrs	r3, r2
   313f2:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
   313f6:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
   313fa:	0349      	lsls	r1, r1, #13
   313fc:	f423 3378 	bic.w	r3, r3, #253952	; 0x3e000
   31400:	f401 3178 	and.w	r1, r1, #253952	; 0x3e000
   31404:	4319      	orrs	r1, r3
   31406:	f8c0 1440 	str.w	r1, [r0, #1088]	; 0x440
   3140a:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
   3140e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   31412:	b10c      	cbz	r4, 31418 <am_hal_audadc_gain_set+0xb0>
   31414:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   31418:	4a60      	ldr	r2, [pc, #384]	; (3159c <am_hal_audadc_gain_set+0x234>)
   3141a:	2000      	movs	r0, #0
   3141c:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
   31420:	bd30      	pop	{r4, r5, pc}
   31422:	485e      	ldr	r0, [pc, #376]	; (3159c <am_hal_audadc_gain_set+0x234>)
   31424:	f8d0 5440 	ldr.w	r5, [r0, #1088]	; 0x440
   31428:	0cad      	lsrs	r5, r5, #18
   3142a:	f005 0502 	and.w	r5, r5, #2
   3142e:	432a      	orrs	r2, r5
   31430:	f8d0 5440 	ldr.w	r5, [r0, #1088]	; 0x440
   31434:	f425 2540 	bic.w	r5, r5, #786432	; 0xc0000
   31438:	ea45 4582 	orr.w	r5, r5, r2, lsl #18
   3143c:	f8c0 5440 	str.w	r5, [r0, #1088]	; 0x440
   31440:	f8d0 5440 	ldr.w	r5, [r0, #1088]	; 0x440
   31444:	0512      	lsls	r2, r2, #20
   31446:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
   3144a:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
   3144e:	432a      	orrs	r2, r5
   31450:	f8c0 2440 	str.w	r2, [r0, #1088]	; 0x440
   31454:	f8d0 2440 	ldr.w	r2, [r0, #1088]	; 0x440
   31458:	f003 0307 	and.w	r3, r3, #7
   3145c:	f022 0207 	bic.w	r2, r2, #7
   31460:	4313      	orrs	r3, r2
   31462:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
   31466:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
   3146a:	0109      	lsls	r1, r1, #4
   3146c:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
   31470:	f401 71f8 	and.w	r1, r1, #496	; 0x1f0
   31474:	4319      	orrs	r1, r3
   31476:	f8c0 1440 	str.w	r1, [r0, #1088]	; 0x440
   3147a:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
   3147e:	f023 0308 	bic.w	r3, r3, #8
   31482:	2c00      	cmp	r4, #0
   31484:	d0c8      	beq.n	31418 <am_hal_audadc_gain_set+0xb0>
   31486:	4a45      	ldr	r2, [pc, #276]	; (3159c <am_hal_audadc_gain_set+0x234>)
   31488:	f043 0308 	orr.w	r3, r3, #8
   3148c:	2000      	movs	r0, #0
   3148e:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
   31492:	e7c5      	b.n	31420 <am_hal_audadc_gain_set+0xb8>
   31494:	4841      	ldr	r0, [pc, #260]	; (3159c <am_hal_audadc_gain_set+0x234>)
   31496:	f8d0 243c 	ldr.w	r2, [r0, #1084]	; 0x43c
   3149a:	f8d0 543c 	ldr.w	r5, [r0, #1084]	; 0x43c
   3149e:	f3c2 4280 	ubfx	r2, r2, #18, #1
   314a2:	ea42 020c 	orr.w	r2, r2, ip
   314a6:	f425 2540 	bic.w	r5, r5, #786432	; 0xc0000
   314aa:	ea45 4582 	orr.w	r5, r5, r2, lsl #18
   314ae:	f8c0 543c 	str.w	r5, [r0, #1084]	; 0x43c
   314b2:	f8d0 543c 	ldr.w	r5, [r0, #1084]	; 0x43c
   314b6:	0512      	lsls	r2, r2, #20
   314b8:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
   314bc:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
   314c0:	432a      	orrs	r2, r5
   314c2:	f8c0 243c 	str.w	r2, [r0, #1084]	; 0x43c
   314c6:	f8d0 243c 	ldr.w	r2, [r0, #1084]	; 0x43c
   314ca:	025b      	lsls	r3, r3, #9
   314cc:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
   314d0:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
   314d4:	4313      	orrs	r3, r2
   314d6:	f8c0 343c 	str.w	r3, [r0, #1084]	; 0x43c
   314da:	f8d0 343c 	ldr.w	r3, [r0, #1084]	; 0x43c
   314de:	0349      	lsls	r1, r1, #13
   314e0:	f423 3378 	bic.w	r3, r3, #253952	; 0x3e000
   314e4:	f401 3178 	and.w	r1, r1, #253952	; 0x3e000
   314e8:	4319      	orrs	r1, r3
   314ea:	f8c0 143c 	str.w	r1, [r0, #1084]	; 0x43c
   314ee:	f8d0 343c 	ldr.w	r3, [r0, #1084]	; 0x43c
   314f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   314f6:	b10c      	cbz	r4, 314fc <am_hal_audadc_gain_set+0x194>
   314f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   314fc:	4a27      	ldr	r2, [pc, #156]	; (3159c <am_hal_audadc_gain_set+0x234>)
   314fe:	2000      	movs	r0, #0
   31500:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
   31504:	bd30      	pop	{r4, r5, pc}
   31506:	4d25      	ldr	r5, [pc, #148]	; (3159c <am_hal_audadc_gain_set+0x234>)
   31508:	0109      	lsls	r1, r1, #4
   3150a:	f401 7ef8 	and.w	lr, r1, #496	; 0x1f0
   3150e:	f8d5 143c 	ldr.w	r1, [r5, #1084]	; 0x43c
   31512:	ea4f 4c91 	mov.w	ip, r1, lsr #18
   31516:	f8d5 143c 	ldr.w	r1, [r5, #1084]	; 0x43c
   3151a:	f00c 0c02 	and.w	ip, ip, #2
   3151e:	ea42 020c 	orr.w	r2, r2, ip
   31522:	f421 2140 	bic.w	r1, r1, #786432	; 0xc0000
   31526:	ea41 4182 	orr.w	r1, r1, r2, lsl #18
   3152a:	f8c5 143c 	str.w	r1, [r5, #1084]	; 0x43c
   3152e:	f8d5 143c 	ldr.w	r1, [r5, #1084]	; 0x43c
   31532:	0512      	lsls	r2, r2, #20
   31534:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
   31538:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
   3153c:	430a      	orrs	r2, r1
   3153e:	f8c5 243c 	str.w	r2, [r5, #1084]	; 0x43c
   31542:	f8d5 243c 	ldr.w	r2, [r5, #1084]	; 0x43c
   31546:	f003 0307 	and.w	r3, r3, #7
   3154a:	f022 0207 	bic.w	r2, r2, #7
   3154e:	4313      	orrs	r3, r2
   31550:	f8c5 343c 	str.w	r3, [r5, #1084]	; 0x43c
   31554:	f8d5 143c 	ldr.w	r1, [r5, #1084]	; 0x43c
   31558:	f421 71f8 	bic.w	r1, r1, #496	; 0x1f0
   3155c:	ea4e 0101 	orr.w	r1, lr, r1
   31560:	f8c5 143c 	str.w	r1, [r5, #1084]	; 0x43c
   31564:	f8d5 343c 	ldr.w	r3, [r5, #1084]	; 0x43c
   31568:	f023 0308 	bic.w	r3, r3, #8
   3156c:	b10c      	cbz	r4, 31572 <am_hal_audadc_gain_set+0x20a>
   3156e:	f043 0308 	orr.w	r3, r3, #8
   31572:	4a0a      	ldr	r2, [pc, #40]	; (3159c <am_hal_audadc_gain_set+0x234>)
   31574:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
   31578:	bd30      	pop	{r4, r5, pc}
   3157a:	2401      	movs	r4, #1
   3157c:	310c      	adds	r1, #12
   3157e:	f04f 0c02 	mov.w	ip, #2
   31582:	2300      	movs	r3, #0
   31584:	4622      	mov	r2, r4
   31586:	e708      	b.n	3139a <am_hal_audadc_gain_set+0x32>
   31588:	2400      	movs	r4, #0
   3158a:	f04f 0c02 	mov.w	ip, #2
   3158e:	4623      	mov	r3, r4
   31590:	2201      	movs	r2, #1
   31592:	e702      	b.n	3139a <am_hal_audadc_gain_set+0x32>
   31594:	2006      	movs	r0, #6
   31596:	bd30      	pop	{r4, r5, pc}
   31598:	aaaaaaab 	.word	0xaaaaaaab
   3159c:	40020000 	.word	0x40020000

000315a0 <am_hal_audadc_refgen_powerup>:
   315a0:	b510      	push	{r4, lr}
   315a2:	4c0f      	ldr	r4, [pc, #60]	; (315e0 <am_hal_audadc_refgen_powerup+0x40>)
   315a4:	f8d4 343c 	ldr.w	r3, [r4, #1084]	; 0x43c
   315a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   315ac:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
   315b0:	f8d4 343c 	ldr.w	r3, [r4, #1084]	; 0x43c
   315b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   315b8:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
   315bc:	f8d4 343c 	ldr.w	r3, [r4, #1084]	; 0x43c
   315c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   315c4:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
   315c8:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
   315cc:	f7fe ff26 	bl	3041c <am_hal_delay_us>
   315d0:	f8d4 343c 	ldr.w	r3, [r4, #1084]	; 0x43c
   315d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   315d8:	2000      	movs	r0, #0
   315da:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
   315de:	bd10      	pop	{r4, pc}
   315e0:	40020000 	.word	0x40020000

000315e4 <am_hal_audadc_pga_powerup>:
   315e4:	b538      	push	{r3, r4, r5, lr}
   315e6:	2803      	cmp	r0, #3
   315e8:	f200 8095 	bhi.w	31716 <am_hal_audadc_pga_powerup+0x132>
   315ec:	e8df f000 	tbb	[pc, r0]
   315f0:	02266f4a 	.word	0x02266f4a
   315f4:	4a49      	ldr	r2, [pc, #292]	; (3171c <am_hal_audadc_pga_powerup+0x138>)
   315f6:	4c4a      	ldr	r4, [pc, #296]	; (31720 <am_hal_audadc_pga_powerup+0x13c>)
   315f8:	6813      	ldr	r3, [r2, #0]
   315fa:	f043 0308 	orr.w	r3, r3, #8
   315fe:	6013      	str	r3, [r2, #0]
   31600:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
   31604:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
   31608:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
   3160c:	f241 1030 	movw	r0, #4400	; 0x1130
   31610:	f7fe ff04 	bl	3041c <am_hal_delay_us>
   31614:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
   31618:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   3161c:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
   31620:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
   31624:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   31628:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
   3162c:	f8d4 3438 	ldr.w	r3, [r4, #1080]	; 0x438
   31630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   31634:	2000      	movs	r0, #0
   31636:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
   3163a:	bd38      	pop	{r3, r4, r5, pc}
   3163c:	4a37      	ldr	r2, [pc, #220]	; (3171c <am_hal_audadc_pga_powerup+0x138>)
   3163e:	4c38      	ldr	r4, [pc, #224]	; (31720 <am_hal_audadc_pga_powerup+0x13c>)
   31640:	6813      	ldr	r3, [r2, #0]
   31642:	f043 0304 	orr.w	r3, r3, #4
   31646:	6013      	str	r3, [r2, #0]
   31648:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
   3164c:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
   31650:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
   31654:	f241 1030 	movw	r0, #4400	; 0x1130
   31658:	f7fe fee0 	bl	3041c <am_hal_delay_us>
   3165c:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
   31660:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   31664:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
   31668:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
   3166c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   31670:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
   31674:	f8d4 3438 	ldr.w	r3, [r4, #1080]	; 0x438
   31678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3167c:	2000      	movs	r0, #0
   3167e:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
   31682:	bd38      	pop	{r3, r4, r5, pc}
   31684:	4a25      	ldr	r2, [pc, #148]	; (3171c <am_hal_audadc_pga_powerup+0x138>)
   31686:	4d26      	ldr	r5, [pc, #152]	; (31720 <am_hal_audadc_pga_powerup+0x13c>)
   31688:	6813      	ldr	r3, [r2, #0]
   3168a:	f043 0301 	orr.w	r3, r3, #1
   3168e:	6013      	str	r3, [r2, #0]
   31690:	f8d5 343c 	ldr.w	r3, [r5, #1084]	; 0x43c
   31694:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
   31698:	4604      	mov	r4, r0
   3169a:	f8c5 343c 	str.w	r3, [r5, #1084]	; 0x43c
   3169e:	f241 1030 	movw	r0, #4400	; 0x1130
   316a2:	f7fe febb 	bl	3041c <am_hal_delay_us>
   316a6:	f8d5 343c 	ldr.w	r3, [r5, #1084]	; 0x43c
   316aa:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   316ae:	f8c5 343c 	str.w	r3, [r5, #1084]	; 0x43c
   316b2:	f8d5 343c 	ldr.w	r3, [r5, #1084]	; 0x43c
   316b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   316ba:	f8c5 343c 	str.w	r3, [r5, #1084]	; 0x43c
   316be:	f8d5 3438 	ldr.w	r3, [r5, #1080]	; 0x438
   316c2:	f043 0304 	orr.w	r3, r3, #4
   316c6:	4620      	mov	r0, r4
   316c8:	f8c5 3438 	str.w	r3, [r5, #1080]	; 0x438
   316cc:	bd38      	pop	{r3, r4, r5, pc}
   316ce:	4a13      	ldr	r2, [pc, #76]	; (3171c <am_hal_audadc_pga_powerup+0x138>)
   316d0:	4c13      	ldr	r4, [pc, #76]	; (31720 <am_hal_audadc_pga_powerup+0x13c>)
   316d2:	6813      	ldr	r3, [r2, #0]
   316d4:	f043 0302 	orr.w	r3, r3, #2
   316d8:	6013      	str	r3, [r2, #0]
   316da:	f8d4 343c 	ldr.w	r3, [r4, #1084]	; 0x43c
   316de:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
   316e2:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
   316e6:	f241 1030 	movw	r0, #4400	; 0x1130
   316ea:	f7fe fe97 	bl	3041c <am_hal_delay_us>
   316ee:	f8d4 343c 	ldr.w	r3, [r4, #1084]	; 0x43c
   316f2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   316f6:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
   316fa:	f8d4 343c 	ldr.w	r3, [r4, #1084]	; 0x43c
   316fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   31702:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
   31706:	f8d4 3438 	ldr.w	r3, [r4, #1080]	; 0x438
   3170a:	f043 0308 	orr.w	r3, r3, #8
   3170e:	2000      	movs	r0, #0
   31710:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
   31714:	bd38      	pop	{r3, r4, r5, pc}
   31716:	2006      	movs	r0, #6
   31718:	bd38      	pop	{r3, r4, r5, pc}
   3171a:	bf00      	nop
   3171c:	10019d28 	.word	0x10019d28
   31720:	40020000 	.word	0x40020000

00031724 <am_hal_audadc_micbias_powerup>:
   31724:	4b0a      	ldr	r3, [pc, #40]	; (31750 <am_hal_audadc_micbias_powerup+0x2c>)
   31726:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
   3172a:	0180      	lsls	r0, r0, #6
   3172c:	f422 627c 	bic.w	r2, r2, #4032	; 0xfc0
   31730:	f400 607c 	and.w	r0, r0, #4032	; 0xfc0
   31734:	4310      	orrs	r0, r2
   31736:	f8c3 0430 	str.w	r0, [r3, #1072]	; 0x430
   3173a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
   3173e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   31742:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   31746:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
   3174a:	f7fe be67 	b.w	3041c <am_hal_delay_us>
   3174e:	bf00      	nop
   31750:	40020000 	.word	0x40020000

00031754 <am_hal_audadc_internal_pga_config>:
   31754:	6803      	ldr	r3, [r0, #0]
   31756:	4a13      	ldr	r2, [pc, #76]	; (317a4 <am_hal_audadc_internal_pga_config+0x50>)
   31758:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   3175c:	4293      	cmp	r3, r2
   3175e:	d11f      	bne.n	317a0 <am_hal_audadc_internal_pga_config+0x4c>
   31760:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
   31764:	021b      	lsls	r3, r3, #8
   31766:	0400      	lsls	r0, r0, #16
   31768:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
   3176c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
   31770:	68ca      	ldr	r2, [r1, #12]
   31772:	4303      	orrs	r3, r0
   31774:	6808      	ldr	r0, [r1, #0]
   31776:	0612      	lsls	r2, r2, #24
   31778:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   3177c:	b410      	push	{r4}
   3177e:	4303      	orrs	r3, r0
   31780:	4c09      	ldr	r4, [pc, #36]	; (317a8 <am_hal_audadc_internal_pga_config+0x54>)
   31782:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
   31786:	4313      	orrs	r3, r2
   31788:	66e3      	str	r3, [r4, #108]	; 0x6c
   3178a:	7c0b      	ldrb	r3, [r1, #16]
   3178c:	011b      	lsls	r3, r3, #4
   3178e:	f003 0310 	and.w	r3, r3, #16
   31792:	f043 0301 	orr.w	r3, r3, #1
   31796:	2000      	movs	r0, #0
   31798:	66a3      	str	r3, [r4, #104]	; 0x68
   3179a:	f85d 4b04 	ldr.w	r4, [sp], #4
   3179e:	4770      	bx	lr
   317a0:	2002      	movs	r0, #2
   317a2:	4770      	bx	lr
   317a4:	01afafaf 	.word	0x01afafaf
   317a8:	40210000 	.word	0x40210000

000317ac <am_hal_gpio_pinconfig>:
   317ac:	287f      	cmp	r0, #127	; 0x7f
   317ae:	d81f      	bhi.n	317f0 <am_hal_gpio_pinconfig+0x44>
   317b0:	f3c1 2381 	ubfx	r3, r1, #10, #2
   317b4:	2b01      	cmp	r3, #1
   317b6:	b410      	push	{r4}
   317b8:	d909      	bls.n	317ce <am_hal_gpio_pinconfig+0x22>
   317ba:	4b10      	ldr	r3, [pc, #64]	; (317fc <am_hal_gpio_pinconfig+0x50>)
   317bc:	0942      	lsrs	r2, r0, #5
   317be:	f000 041f 	and.w	r4, r0, #31
   317c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   317c6:	2301      	movs	r3, #1
   317c8:	40a3      	lsls	r3, r4
   317ca:	4213      	tst	r3, r2
   317cc:	d012      	beq.n	317f4 <am_hal_gpio_pinconfig+0x48>
   317ce:	0080      	lsls	r0, r0, #2
   317d0:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   317d4:	4b0a      	ldr	r3, [pc, #40]	; (31800 <am_hal_gpio_pinconfig+0x54>)
   317d6:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
   317da:	2200      	movs	r2, #0
   317dc:	2473      	movs	r4, #115	; 0x73
   317de:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
   317e2:	6001      	str	r1, [r0, #0]
   317e4:	f85d 4b04 	ldr.w	r4, [sp], #4
   317e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   317ec:	4610      	mov	r0, r2
   317ee:	4770      	bx	lr
   317f0:	2005      	movs	r0, #5
   317f2:	4770      	bx	lr
   317f4:	2007      	movs	r0, #7
   317f6:	f85d 4b04 	ldr.w	r4, [sp], #4
   317fa:	4770      	bx	lr
   317fc:	0004237c 	.word	0x0004237c
   31800:	40010000 	.word	0x40010000

00031804 <am_hal_gpio_interrupt_control>:
   31804:	2a00      	cmp	r2, #0
   31806:	f000 80c1 	beq.w	3198c <am_hal_gpio_interrupt_control+0x188>
   3180a:	b5f0      	push	{r4, r5, r6, r7, lr}
   3180c:	2903      	cmp	r1, #3
   3180e:	b083      	sub	sp, #12
   31810:	460d      	mov	r5, r1
   31812:	d86f      	bhi.n	318f4 <am_hal_gpio_interrupt_control+0xf0>
   31814:	2901      	cmp	r1, #1
   31816:	4606      	mov	r6, r0
   31818:	4614      	mov	r4, r2
   3181a:	d825      	bhi.n	31868 <am_hal_gpio_interrupt_control+0x64>
   3181c:	6813      	ldr	r3, [r2, #0]
   3181e:	2b7f      	cmp	r3, #127	; 0x7f
   31820:	f200 80b6 	bhi.w	31990 <am_hal_gpio_interrupt_control+0x18c>
   31824:	4c5b      	ldr	r4, [pc, #364]	; (31994 <am_hal_gpio_interrupt_control+0x190>)
   31826:	f003 021f 	and.w	r2, r3, #31
   3182a:	2701      	movs	r7, #1
   3182c:	eb04 1453 	add.w	r4, r4, r3, lsr #5
   31830:	2801      	cmp	r0, #1
   31832:	fa07 f702 	lsl.w	r7, r7, r2
   31836:	ea4f 1404 	mov.w	r4, r4, lsl #4
   3183a:	f000 809d 	beq.w	31978 <am_hal_gpio_interrupt_control+0x174>
   3183e:	f7fe fac5 	bl	2fdcc <am_hal_interrupt_master_disable>
   31842:	2d01      	cmp	r5, #1
   31844:	9001      	str	r0, [sp, #4]
   31846:	d04b      	beq.n	318e0 <am_hal_gpio_interrupt_control+0xdc>
   31848:	6823      	ldr	r3, [r4, #0]
   3184a:	43fa      	mvns	r2, r7
   3184c:	2e02      	cmp	r6, #2
   3184e:	ea23 0707 	bic.w	r7, r3, r7
   31852:	6027      	str	r7, [r4, #0]
   31854:	d102      	bne.n	3185c <am_hal_gpio_interrupt_control+0x58>
   31856:	6c23      	ldr	r3, [r4, #64]	; 0x40
   31858:	401a      	ands	r2, r3
   3185a:	6422      	str	r2, [r4, #64]	; 0x40
   3185c:	9801      	ldr	r0, [sp, #4]
   3185e:	f7fe fab9 	bl	2fdd4 <am_hal_interrupt_master_set>
   31862:	2000      	movs	r0, #0
   31864:	b003      	add	sp, #12
   31866:	bdf0      	pop	{r4, r5, r6, r7, pc}
   31868:	f7fe fab0 	bl	2fdcc <am_hal_interrupt_master_disable>
   3186c:	2d02      	cmp	r5, #2
   3186e:	9001      	str	r0, [sp, #4]
   31870:	d043      	beq.n	318fa <am_hal_gpio_interrupt_control+0xf6>
   31872:	2e01      	cmp	r6, #1
   31874:	d01a      	beq.n	318ac <am_hal_gpio_interrupt_control+0xa8>
   31876:	4b48      	ldr	r3, [pc, #288]	; (31998 <am_hal_gpio_interrupt_control+0x194>)
   31878:	6821      	ldr	r1, [r4, #0]
   3187a:	f8d3 22c0 	ldr.w	r2, [r3, #704]	; 0x2c0
   3187e:	430a      	orrs	r2, r1
   31880:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
   31884:	6861      	ldr	r1, [r4, #4]
   31886:	f8d3 22d0 	ldr.w	r2, [r3, #720]	; 0x2d0
   3188a:	430a      	orrs	r2, r1
   3188c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
   31890:	68a1      	ldr	r1, [r4, #8]
   31892:	f8d3 22e0 	ldr.w	r2, [r3, #736]	; 0x2e0
   31896:	430a      	orrs	r2, r1
   31898:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
   3189c:	68e1      	ldr	r1, [r4, #12]
   3189e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
   318a2:	430a      	orrs	r2, r1
   318a4:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
   318a8:	2e00      	cmp	r6, #0
   318aa:	d0d7      	beq.n	3185c <am_hal_gpio_interrupt_control+0x58>
   318ac:	4b3a      	ldr	r3, [pc, #232]	; (31998 <am_hal_gpio_interrupt_control+0x194>)
   318ae:	6821      	ldr	r1, [r4, #0]
   318b0:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   318b4:	430a      	orrs	r2, r1
   318b6:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   318ba:	6861      	ldr	r1, [r4, #4]
   318bc:	f8d3 2310 	ldr.w	r2, [r3, #784]	; 0x310
   318c0:	430a      	orrs	r2, r1
   318c2:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
   318c6:	68a1      	ldr	r1, [r4, #8]
   318c8:	f8d3 2320 	ldr.w	r2, [r3, #800]	; 0x320
   318cc:	430a      	orrs	r2, r1
   318ce:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320
   318d2:	68e1      	ldr	r1, [r4, #12]
   318d4:	f8d3 2330 	ldr.w	r2, [r3, #816]	; 0x330
   318d8:	430a      	orrs	r2, r1
   318da:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
   318de:	e7bd      	b.n	3185c <am_hal_gpio_interrupt_control+0x58>
   318e0:	6823      	ldr	r3, [r4, #0]
   318e2:	2e02      	cmp	r6, #2
   318e4:	ea43 0307 	orr.w	r3, r3, r7
   318e8:	6023      	str	r3, [r4, #0]
   318ea:	d1b7      	bne.n	3185c <am_hal_gpio_interrupt_control+0x58>
   318ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
   318ee:	431f      	orrs	r7, r3
   318f0:	6427      	str	r7, [r4, #64]	; 0x40
   318f2:	e7b3      	b.n	3185c <am_hal_gpio_interrupt_control+0x58>
   318f4:	2006      	movs	r0, #6
   318f6:	b003      	add	sp, #12
   318f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   318fa:	2e01      	cmp	r6, #1
   318fc:	d01e      	beq.n	3193c <am_hal_gpio_interrupt_control+0x138>
   318fe:	4b26      	ldr	r3, [pc, #152]	; (31998 <am_hal_gpio_interrupt_control+0x194>)
   31900:	6821      	ldr	r1, [r4, #0]
   31902:	f8d3 22c0 	ldr.w	r2, [r3, #704]	; 0x2c0
   31906:	ea22 0201 	bic.w	r2, r2, r1
   3190a:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
   3190e:	6861      	ldr	r1, [r4, #4]
   31910:	f8d3 22d0 	ldr.w	r2, [r3, #720]	; 0x2d0
   31914:	ea22 0201 	bic.w	r2, r2, r1
   31918:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
   3191c:	68a1      	ldr	r1, [r4, #8]
   3191e:	f8d3 22e0 	ldr.w	r2, [r3, #736]	; 0x2e0
   31922:	ea22 0201 	bic.w	r2, r2, r1
   31926:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
   3192a:	68e1      	ldr	r1, [r4, #12]
   3192c:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
   31930:	ea22 0201 	bic.w	r2, r2, r1
   31934:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
   31938:	2e00      	cmp	r6, #0
   3193a:	d08f      	beq.n	3185c <am_hal_gpio_interrupt_control+0x58>
   3193c:	4b16      	ldr	r3, [pc, #88]	; (31998 <am_hal_gpio_interrupt_control+0x194>)
   3193e:	6821      	ldr	r1, [r4, #0]
   31940:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   31944:	ea22 0201 	bic.w	r2, r2, r1
   31948:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   3194c:	6861      	ldr	r1, [r4, #4]
   3194e:	f8d3 2310 	ldr.w	r2, [r3, #784]	; 0x310
   31952:	ea22 0201 	bic.w	r2, r2, r1
   31956:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
   3195a:	68a1      	ldr	r1, [r4, #8]
   3195c:	f8d3 2320 	ldr.w	r2, [r3, #800]	; 0x320
   31960:	ea22 0201 	bic.w	r2, r2, r1
   31964:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320
   31968:	68e1      	ldr	r1, [r4, #12]
   3196a:	f8d3 2330 	ldr.w	r2, [r3, #816]	; 0x330
   3196e:	ea22 0201 	bic.w	r2, r2, r1
   31972:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
   31976:	e771      	b.n	3185c <am_hal_gpio_interrupt_control+0x58>
   31978:	f7fe fa28 	bl	2fdcc <am_hal_interrupt_master_disable>
   3197c:	2d01      	cmp	r5, #1
   3197e:	9001      	str	r0, [sp, #4]
   31980:	d0b4      	beq.n	318ec <am_hal_gpio_interrupt_control+0xe8>
   31982:	6c23      	ldr	r3, [r4, #64]	; 0x40
   31984:	ea23 0707 	bic.w	r7, r3, r7
   31988:	6427      	str	r7, [r4, #64]	; 0x40
   3198a:	e767      	b.n	3185c <am_hal_gpio_interrupt_control+0x58>
   3198c:	2006      	movs	r0, #6
   3198e:	4770      	bx	lr
   31990:	2005      	movs	r0, #5
   31992:	e767      	b.n	31864 <am_hal_gpio_interrupt_control+0x60>
   31994:	0400102c 	.word	0x0400102c
   31998:	40010000 	.word	0x40010000

0003199c <am_hal_gpio_interrupt_irq_status_get>:
   3199c:	2a00      	cmp	r2, #0
   3199e:	d033      	beq.n	31a08 <am_hal_gpio_interrupt_irq_status_get+0x6c>
   319a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   319a4:	f1a0 0638 	sub.w	r6, r0, #56	; 0x38
   319a8:	2e07      	cmp	r6, #7
   319aa:	b082      	sub	sp, #8
   319ac:	4605      	mov	r5, r0
   319ae:	d827      	bhi.n	31a00 <am_hal_gpio_interrupt_irq_status_get+0x64>
   319b0:	4614      	mov	r4, r2
   319b2:	460f      	mov	r7, r1
   319b4:	f7fe fa0a 	bl	2fdcc <am_hal_interrupt_master_disable>
   319b8:	ea4f 1806 	mov.w	r8, r6, lsl #4
   319bc:	4a13      	ldr	r2, [pc, #76]	; (31a0c <am_hal_gpio_interrupt_irq_status_get+0x70>)
   319be:	9001      	str	r0, [sp, #4]
   319c0:	b96f      	cbnz	r7, 319de <am_hal_gpio_interrupt_irq_status_get+0x42>
   319c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   319c6:	6023      	str	r3, [r4, #0]
   319c8:	f858 2002 	ldr.w	r2, [r8, r2]
   319cc:	9801      	ldr	r0, [sp, #4]
   319ce:	4013      	ands	r3, r2
   319d0:	6023      	str	r3, [r4, #0]
   319d2:	f7fe f9ff 	bl	2fdd4 <am_hal_interrupt_master_set>
   319d6:	2000      	movs	r0, #0
   319d8:	b002      	add	sp, #8
   319da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   319de:	2d3b      	cmp	r5, #59	; 0x3b
   319e0:	bf8c      	ite	hi
   319e2:	2301      	movhi	r3, #1
   319e4:	2300      	movls	r3, #0
   319e6:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
   319ea:	bf8c      	ite	hi
   319ec:	2104      	movhi	r1, #4
   319ee:	2100      	movls	r1, #0
   319f0:	f203 430b 	addw	r3, r3, #1035	; 0x40b
   319f4:	1a76      	subs	r6, r6, r1
   319f6:	eb06 0683 	add.w	r6, r6, r3, lsl #2
   319fa:	0136      	lsls	r6, r6, #4
   319fc:	6833      	ldr	r3, [r6, #0]
   319fe:	e7e2      	b.n	319c6 <am_hal_gpio_interrupt_irq_status_get+0x2a>
   31a00:	2006      	movs	r0, #6
   31a02:	b002      	add	sp, #8
   31a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   31a08:	2006      	movs	r0, #6
   31a0a:	4770      	bx	lr
   31a0c:	400102c4 	.word	0x400102c4

00031a10 <am_hal_gpio_interrupt_irq_clear>:
   31a10:	3838      	subs	r0, #56	; 0x38
   31a12:	2807      	cmp	r0, #7
   31a14:	d804      	bhi.n	31a20 <am_hal_gpio_interrupt_irq_clear+0x10>
   31a16:	0103      	lsls	r3, r0, #4
   31a18:	4a02      	ldr	r2, [pc, #8]	; (31a24 <am_hal_gpio_interrupt_irq_clear+0x14>)
   31a1a:	2000      	movs	r0, #0
   31a1c:	5099      	str	r1, [r3, r2]
   31a1e:	4770      	bx	lr
   31a20:	2006      	movs	r0, #6
   31a22:	4770      	bx	lr
   31a24:	400102c8 	.word	0x400102c8

00031a28 <am_hal_gpio_interrupt_register>:
   31a28:	b410      	push	{r4}
   31a2a:	ea4f 1c51 	mov.w	ip, r1, lsr #5
   31a2e:	b960      	cbnz	r0, 31a4a <am_hal_gpio_interrupt_register+0x22>
   31a30:	f001 011f 	and.w	r1, r1, #31
   31a34:	4c1b      	ldr	r4, [pc, #108]	; (31aa4 <am_hal_gpio_interrupt_register+0x7c>)
   31a36:	eb01 114c 	add.w	r1, r1, ip, lsl #5
   31a3a:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
   31a3e:	4b1a      	ldr	r3, [pc, #104]	; (31aa8 <am_hal_gpio_interrupt_register+0x80>)
   31a40:	f85d 4b04 	ldr.w	r4, [sp], #4
   31a44:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
   31a48:	4770      	bx	lr
   31a4a:	2801      	cmp	r0, #1
   31a4c:	f10c 0404 	add.w	r4, ip, #4
   31a50:	d015      	beq.n	31a7e <am_hal_gpio_interrupt_register+0x56>
   31a52:	2802      	cmp	r0, #2
   31a54:	d121      	bne.n	31a9a <am_hal_gpio_interrupt_register+0x72>
   31a56:	f001 011f 	and.w	r1, r1, #31
   31a5a:	eb01 1c4c 	add.w	ip, r1, ip, lsl #5
   31a5e:	eb01 1144 	add.w	r1, r1, r4, lsl #5
   31a62:	4c11      	ldr	r4, [pc, #68]	; (31aa8 <am_hal_gpio_interrupt_register+0x80>)
   31a64:	f844 202c 	str.w	r2, [r4, ip, lsl #2]
   31a68:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
   31a6c:	4a0d      	ldr	r2, [pc, #52]	; (31aa4 <am_hal_gpio_interrupt_register+0x7c>)
   31a6e:	f85d 4b04 	ldr.w	r4, [sp], #4
   31a72:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
   31a76:	2000      	movs	r0, #0
   31a78:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
   31a7c:	4770      	bx	lr
   31a7e:	f001 011f 	and.w	r1, r1, #31
   31a82:	eb01 1144 	add.w	r1, r1, r4, lsl #5
   31a86:	4807      	ldr	r0, [pc, #28]	; (31aa4 <am_hal_gpio_interrupt_register+0x7c>)
   31a88:	4c07      	ldr	r4, [pc, #28]	; (31aa8 <am_hal_gpio_interrupt_register+0x80>)
   31a8a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   31a8e:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
   31a92:	2000      	movs	r0, #0
   31a94:	f85d 4b04 	ldr.w	r4, [sp], #4
   31a98:	4770      	bx	lr
   31a9a:	2006      	movs	r0, #6
   31a9c:	f85d 4b04 	ldr.w	r4, [sp], #4
   31aa0:	4770      	bx	lr
   31aa2:	bf00      	nop
   31aa4:	1001a190 	.word	0x1001a190
   31aa8:	10019d90 	.word	0x10019d90

00031aac <am_hal_gpio_interrupt_service>:
   31aac:	3838      	subs	r0, #56	; 0x38
   31aae:	2807      	cmp	r0, #7
   31ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   31ab4:	d826      	bhi.n	31b04 <am_hal_gpio_interrupt_service+0x58>
   31ab6:	4689      	mov	r9, r1
   31ab8:	b349      	cbz	r1, 31b0e <am_hal_gpio_interrupt_service+0x62>
   31aba:	4e16      	ldr	r6, [pc, #88]	; (31b14 <am_hal_gpio_interrupt_service+0x68>)
   31abc:	4f16      	ldr	r7, [pc, #88]	; (31b18 <am_hal_gpio_interrupt_service+0x6c>)
   31abe:	f04f 0800 	mov.w	r8, #0
   31ac2:	0144      	lsls	r4, r0, #5
   31ac4:	2501      	movs	r5, #1
   31ac6:	f1c9 0300 	rsb	r3, r9, #0
   31aca:	ea03 0309 	and.w	r3, r3, r9
   31ace:	fab3 f383 	clz	r3, r3
   31ad2:	f1c3 031f 	rsb	r3, r3, #31
   31ad6:	18e1      	adds	r1, r4, r3
   31ad8:	fa05 f303 	lsl.w	r3, r5, r3
   31adc:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
   31ae0:	ea29 0903 	bic.w	r9, r9, r3
   31ae4:	b142      	cbz	r2, 31af8 <am_hal_gpio_interrupt_service+0x4c>
   31ae6:	f857 0021 	ldr.w	r0, [r7, r1, lsl #2]
   31aea:	4790      	blx	r2
   31aec:	f1b9 0f00 	cmp.w	r9, #0
   31af0:	d1e9      	bne.n	31ac6 <am_hal_gpio_interrupt_service+0x1a>
   31af2:	4640      	mov	r0, r8
   31af4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   31af8:	f04f 0807 	mov.w	r8, #7
   31afc:	f1b9 0f00 	cmp.w	r9, #0
   31b00:	d1e1      	bne.n	31ac6 <am_hal_gpio_interrupt_service+0x1a>
   31b02:	e7f6      	b.n	31af2 <am_hal_gpio_interrupt_service+0x46>
   31b04:	f04f 0805 	mov.w	r8, #5
   31b08:	4640      	mov	r0, r8
   31b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   31b0e:	4688      	mov	r8, r1
   31b10:	e7ef      	b.n	31af2 <am_hal_gpio_interrupt_service+0x46>
   31b12:	bf00      	nop
   31b14:	10019d90 	.word	0x10019d90
   31b18:	1001a190 	.word	0x1001a190

00031b1c <am_hal_pdm_initialize>:
   31b1c:	2803      	cmp	r0, #3
   31b1e:	d81c      	bhi.n	31b5a <am_hal_pdm_initialize+0x3e>
   31b20:	b1f9      	cbz	r1, 31b62 <am_hal_pdm_initialize+0x46>
   31b22:	b530      	push	{r4, r5, lr}
   31b24:	4c10      	ldr	r4, [pc, #64]	; (31b68 <am_hal_pdm_initialize+0x4c>)
   31b26:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   31b2a:	ea4f 0ec2 	mov.w	lr, r2, lsl #3
   31b2e:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
   31b32:	78d3      	ldrb	r3, [r2, #3]
   31b34:	f3c3 0500 	ubfx	r5, r3, #0, #1
   31b38:	f013 0301 	ands.w	r3, r3, #1
   31b3c:	d10f      	bne.n	31b5e <am_hal_pdm_initialize+0x42>
   31b3e:	6090      	str	r0, [r2, #8]
   31b40:	4618      	mov	r0, r3
   31b42:	f854 300e 	ldr.w	r3, [r4, lr]
   31b46:	f003 4c7e 	and.w	ip, r3, #4261412864	; 0xfe000000
   31b4a:	4b08      	ldr	r3, [pc, #32]	; (31b6c <am_hal_pdm_initialize+0x50>)
   31b4c:	ea4c 0303 	orr.w	r3, ip, r3
   31b50:	f844 300e 	str.w	r3, [r4, lr]
   31b54:	7115      	strb	r5, [r2, #4]
   31b56:	600a      	str	r2, [r1, #0]
   31b58:	bd30      	pop	{r4, r5, pc}
   31b5a:	2005      	movs	r0, #5
   31b5c:	4770      	bx	lr
   31b5e:	2007      	movs	r0, #7
   31b60:	bd30      	pop	{r4, r5, pc}
   31b62:	2006      	movs	r0, #6
   31b64:	4770      	bx	lr
   31b66:	bf00      	nop
   31b68:	1001a590 	.word	0x1001a590
   31b6c:	01f956e2 	.word	0x01f956e2

00031b70 <am_hal_pdm_power_control>:
   31b70:	b360      	cbz	r0, 31bcc <am_hal_pdm_power_control+0x5c>
   31b72:	b570      	push	{r4, r5, r6, lr}
   31b74:	6803      	ldr	r3, [r0, #0]
   31b76:	4604      	mov	r4, r0
   31b78:	481e      	ldr	r0, [pc, #120]	; (31bf4 <am_hal_pdm_power_control+0x84>)
   31b7a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   31b7e:	4283      	cmp	r3, r0
   31b80:	b084      	sub	sp, #16
   31b82:	d10e      	bne.n	31ba2 <am_hal_pdm_power_control+0x32>
   31b84:	68a3      	ldr	r3, [r4, #8]
   31b86:	331b      	adds	r3, #27
   31b88:	460e      	mov	r6, r1
   31b8a:	b2dd      	uxtb	r5, r3
   31b8c:	b179      	cbz	r1, 31bae <am_hal_pdm_power_control+0x3e>
   31b8e:	1e48      	subs	r0, r1, #1
   31b90:	2801      	cmp	r0, #1
   31b92:	d809      	bhi.n	31ba8 <am_hal_pdm_power_control+0x38>
   31b94:	b9e2      	cbnz	r2, 31bd0 <am_hal_pdm_power_control+0x60>
   31b96:	4628      	mov	r0, r5
   31b98:	f000 fd4a 	bl	32630 <am_hal_pwrctrl_periph_disable>
   31b9c:	2000      	movs	r0, #0
   31b9e:	b004      	add	sp, #16
   31ba0:	bd70      	pop	{r4, r5, r6, pc}
   31ba2:	2002      	movs	r0, #2
   31ba4:	b004      	add	sp, #16
   31ba6:	bd70      	pop	{r4, r5, r6, pc}
   31ba8:	2006      	movs	r0, #6
   31baa:	b004      	add	sp, #16
   31bac:	bd70      	pop	{r4, r5, r6, pc}
   31bae:	b1c2      	cbz	r2, 31be2 <am_hal_pdm_power_control+0x72>
   31bb0:	7923      	ldrb	r3, [r4, #4]
   31bb2:	b1eb      	cbz	r3, 31bf0 <am_hal_pdm_power_control+0x80>
   31bb4:	4628      	mov	r0, r5
   31bb6:	f000 fc6b 	bl	32490 <am_hal_pwrctrl_periph_enable>
   31bba:	f7fe f907 	bl	2fdcc <am_hal_interrupt_master_disable>
   31bbe:	9002      	str	r0, [sp, #8]
   31bc0:	9802      	ldr	r0, [sp, #8]
   31bc2:	7126      	strb	r6, [r4, #4]
   31bc4:	f7fe f906 	bl	2fdd4 <am_hal_interrupt_master_set>
   31bc8:	4630      	mov	r0, r6
   31bca:	e7eb      	b.n	31ba4 <am_hal_pdm_power_control+0x34>
   31bcc:	2002      	movs	r0, #2
   31bce:	4770      	bx	lr
   31bd0:	f7fe f8fc 	bl	2fdcc <am_hal_interrupt_master_disable>
   31bd4:	2301      	movs	r3, #1
   31bd6:	9003      	str	r0, [sp, #12]
   31bd8:	9803      	ldr	r0, [sp, #12]
   31bda:	7123      	strb	r3, [r4, #4]
   31bdc:	f7fe f8fa 	bl	2fdd4 <am_hal_interrupt_master_set>
   31be0:	e7d9      	b.n	31b96 <am_hal_pdm_power_control+0x26>
   31be2:	4628      	mov	r0, r5
   31be4:	9201      	str	r2, [sp, #4]
   31be6:	f000 fc53 	bl	32490 <am_hal_pwrctrl_periph_enable>
   31bea:	9a01      	ldr	r2, [sp, #4]
   31bec:	4610      	mov	r0, r2
   31bee:	e7d9      	b.n	31ba4 <am_hal_pdm_power_control+0x34>
   31bf0:	2007      	movs	r0, #7
   31bf2:	e7d7      	b.n	31ba4 <am_hal_pdm_power_control+0x34>
   31bf4:	01f956e2 	.word	0x01f956e2

00031bf8 <am_hal_pdm_configure>:
   31bf8:	b128      	cbz	r0, 31c06 <am_hal_pdm_configure+0xe>
   31bfa:	6803      	ldr	r3, [r0, #0]
   31bfc:	4a34      	ldr	r2, [pc, #208]	; (31cd0 <am_hal_pdm_configure+0xd8>)
   31bfe:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   31c02:	4293      	cmp	r3, r2
   31c04:	d001      	beq.n	31c0a <am_hal_pdm_configure+0x12>
   31c06:	2002      	movs	r0, #2
   31c08:	4770      	bx	lr
   31c0a:	b510      	push	{r4, lr}
   31c0c:	6884      	ldr	r4, [r0, #8]
   31c0e:	7e8a      	ldrb	r2, [r1, #26]
   31c10:	f504 2480 	add.w	r4, r4, #262144	; 0x40000
   31c14:	f204 2401 	addw	r4, r4, #513	; 0x201
   31c18:	0324      	lsls	r4, r4, #12
   31c1a:	2064      	movs	r0, #100	; 0x64
   31c1c:	6863      	ldr	r3, [r4, #4]
   31c1e:	f362 0300 	bfi	r3, r2, #0, #1
   31c22:	6063      	str	r3, [r4, #4]
   31c24:	6863      	ldr	r3, [r4, #4]
   31c26:	7e4a      	ldrb	r2, [r1, #25]
   31c28:	f362 0341 	bfi	r3, r2, #1, #1
   31c2c:	6063      	str	r3, [r4, #4]
   31c2e:	6863      	ldr	r3, [r4, #4]
   31c30:	7e0a      	ldrb	r2, [r1, #24]
   31c32:	f362 0384 	bfi	r3, r2, #2, #3
   31c36:	6063      	str	r3, [r4, #4]
   31c38:	6863      	ldr	r3, [r4, #4]
   31c3a:	690a      	ldr	r2, [r1, #16]
   31c3c:	f362 1348 	bfi	r3, r2, #5, #4
   31c40:	6063      	str	r3, [r4, #4]
   31c42:	6863      	ldr	r3, [r4, #4]
   31c44:	7b0a      	ldrb	r2, [r1, #12]
   31c46:	f362 2349 	bfi	r3, r2, #9, #1
   31c4a:	6063      	str	r3, [r4, #4]
   31c4c:	6863      	ldr	r3, [r4, #4]
   31c4e:	784a      	ldrb	r2, [r1, #1]
   31c50:	f362 238d 	bfi	r3, r2, #10, #4
   31c54:	6063      	str	r3, [r4, #4]
   31c56:	6863      	ldr	r3, [r4, #4]
   31c58:	688a      	ldr	r2, [r1, #8]
   31c5a:	f362 3394 	bfi	r3, r2, #14, #7
   31c5e:	6063      	str	r3, [r4, #4]
   31c60:	6863      	ldr	r3, [r4, #4]
   31c62:	788a      	ldrb	r2, [r1, #2]
   31c64:	f362 5359 	bfi	r3, r2, #21, #5
   31c68:	6063      	str	r3, [r4, #4]
   31c6a:	78ca      	ldrb	r2, [r1, #3]
   31c6c:	6863      	ldr	r3, [r4, #4]
   31c6e:	f362 639e 	bfi	r3, r2, #26, #5
   31c72:	6063      	str	r3, [r4, #4]
   31c74:	7d8a      	ldrb	r2, [r1, #22]
   31c76:	68a3      	ldr	r3, [r4, #8]
   31c78:	f362 0301 	bfi	r3, r2, #0, #2
   31c7c:	60a3      	str	r3, [r4, #8]
   31c7e:	780a      	ldrb	r2, [r1, #0]
   31c80:	68a3      	ldr	r3, [r4, #8]
   31c82:	f362 0383 	bfi	r3, r2, #2, #2
   31c86:	60a3      	str	r3, [r4, #8]
   31c88:	68a3      	ldr	r3, [r4, #8]
   31c8a:	7dca      	ldrb	r2, [r1, #23]
   31c8c:	f362 1306 	bfi	r3, r2, #4, #3
   31c90:	60a3      	str	r3, [r4, #8]
   31c92:	68a3      	ldr	r3, [r4, #8]
   31c94:	790a      	ldrb	r2, [r1, #4]
   31c96:	f362 13c7 	bfi	r3, r2, #7, #1
   31c9a:	60a3      	str	r3, [r4, #8]
   31c9c:	6823      	ldr	r3, [r4, #0]
   31c9e:	f36f 0300 	bfc	r3, #0, #1
   31ca2:	6023      	str	r3, [r4, #0]
   31ca4:	6823      	ldr	r3, [r4, #0]
   31ca6:	7d0a      	ldrb	r2, [r1, #20]
   31ca8:	f362 0342 	bfi	r3, r2, #1, #2
   31cac:	6023      	str	r3, [r4, #0]
   31cae:	6823      	ldr	r3, [r4, #0]
   31cb0:	f36f 1304 	bfc	r3, #4, #1
   31cb4:	6023      	str	r3, [r4, #0]
   31cb6:	6823      	ldr	r3, [r4, #0]
   31cb8:	f36f 1345 	bfc	r3, #5, #1
   31cbc:	6023      	str	r3, [r4, #0]
   31cbe:	f7fe fbad 	bl	3041c <am_hal_delay_us>
   31cc2:	6823      	ldr	r3, [r4, #0]
   31cc4:	f043 0310 	orr.w	r3, r3, #16
   31cc8:	6023      	str	r3, [r4, #0]
   31cca:	2000      	movs	r0, #0
   31ccc:	bd10      	pop	{r4, pc}
   31cce:	bf00      	nop
   31cd0:	01f956e2 	.word	0x01f956e2

00031cd4 <am_hal_pdm_enable>:
   31cd4:	b128      	cbz	r0, 31ce2 <am_hal_pdm_enable+0xe>
   31cd6:	6803      	ldr	r3, [r0, #0]
   31cd8:	4a11      	ldr	r2, [pc, #68]	; (31d20 <am_hal_pdm_enable+0x4c>)
   31cda:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   31cde:	4293      	cmp	r3, r2
   31ce0:	d001      	beq.n	31ce6 <am_hal_pdm_enable+0x12>
   31ce2:	2002      	movs	r0, #2
   31ce4:	4770      	bx	lr
   31ce6:	b510      	push	{r4, lr}
   31ce8:	6884      	ldr	r4, [r0, #8]
   31cea:	f504 2480 	add.w	r4, r4, #262144	; 0x40000
   31cee:	f204 2401 	addw	r4, r4, #513	; 0x201
   31cf2:	0324      	lsls	r4, r4, #12
   31cf4:	f241 3088 	movw	r0, #5000	; 0x1388
   31cf8:	6823      	ldr	r3, [r4, #0]
   31cfa:	f36f 1304 	bfc	r3, #4, #1
   31cfe:	6023      	str	r3, [r4, #0]
   31d00:	f7fe fb8c 	bl	3041c <am_hal_delay_us>
   31d04:	6823      	ldr	r3, [r4, #0]
   31d06:	f043 0310 	orr.w	r3, r3, #16
   31d0a:	6023      	str	r3, [r4, #0]
   31d0c:	6823      	ldr	r3, [r4, #0]
   31d0e:	f043 0301 	orr.w	r3, r3, #1
   31d12:	6023      	str	r3, [r4, #0]
   31d14:	6823      	ldr	r3, [r4, #0]
   31d16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   31d1a:	6023      	str	r3, [r4, #0]
   31d1c:	2000      	movs	r0, #0
   31d1e:	bd10      	pop	{r4, pc}
   31d20:	01f956e2 	.word	0x01f956e2

00031d24 <am_hal_pdm_dma_start>:
   31d24:	b320      	cbz	r0, 31d70 <am_hal_pdm_dma_start+0x4c>
   31d26:	6803      	ldr	r3, [r0, #0]
   31d28:	4a22      	ldr	r2, [pc, #136]	; (31db4 <am_hal_pdm_dma_start+0x90>)
   31d2a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   31d2e:	4293      	cmp	r3, r2
   31d30:	d11e      	bne.n	31d70 <am_hal_pdm_dma_start+0x4c>
   31d32:	688a      	ldr	r2, [r1, #8]
   31d34:	4b20      	ldr	r3, [pc, #128]	; (31db8 <am_hal_pdm_dma_start+0x94>)
   31d36:	b410      	push	{r4}
   31d38:	680c      	ldr	r4, [r1, #0]
   31d3a:	6849      	ldr	r1, [r1, #4]
   31d3c:	6101      	str	r1, [r0, #16]
   31d3e:	60c4      	str	r4, [r0, #12]
   31d40:	fb03 f102 	mul.w	r1, r3, r2
   31d44:	6144      	str	r4, [r0, #20]
   31d46:	6883      	ldr	r3, [r0, #8]
   31d48:	481c      	ldr	r0, [pc, #112]	; (31dbc <am_hal_pdm_dma_start+0x98>)
   31d4a:	ebb0 0ff1 	cmp.w	r0, r1, ror #3
   31d4e:	d211      	bcs.n	31d74 <am_hal_pdm_dma_start+0x50>
   31d50:	491b      	ldr	r1, [pc, #108]	; (31dc0 <am_hal_pdm_dma_start+0x9c>)
   31d52:	481c      	ldr	r0, [pc, #112]	; (31dc4 <am_hal_pdm_dma_start+0xa0>)
   31d54:	fb02 f101 	mul.w	r1, r2, r1
   31d58:	ebb0 0fb1 	cmp.w	r0, r1, ror #2
   31d5c:	d227      	bcs.n	31dae <am_hal_pdm_dma_start+0x8a>
   31d5e:	0711      	lsls	r1, r2, #28
   31d60:	bf08      	it	eq
   31d62:	2110      	moveq	r1, #16
   31d64:	d007      	beq.n	31d76 <am_hal_pdm_dma_start+0x52>
   31d66:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   31d6a:	f85d 4b04 	ldr.w	r4, [sp], #4
   31d6e:	4770      	bx	lr
   31d70:	2002      	movs	r0, #2
   31d72:	4770      	bx	lr
   31d74:	2118      	movs	r1, #24
   31d76:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   31d7a:	f203 2301 	addw	r3, r3, #513	; 0x201
   31d7e:	031b      	lsls	r3, r3, #12
   31d80:	2000      	movs	r0, #0
   31d82:	61d9      	str	r1, [r3, #28]
   31d84:	f8c3 0148 	str.w	r0, [r3, #328]	; 0x148
   31d88:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
   31d8c:	f8c3 4154 	str.w	r4, [r3, #340]	; 0x154
   31d90:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   31d94:	f042 0201 	orr.w	r2, r2, #1
   31d98:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
   31d9c:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
   31da0:	f042 0201 	orr.w	r2, r2, #1
   31da4:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
   31da8:	f85d 4b04 	ldr.w	r4, [sp], #4
   31dac:	4770      	bx	lr
   31dae:	2114      	movs	r1, #20
   31db0:	e7e1      	b.n	31d76 <am_hal_pdm_dma_start+0x52>
   31db2:	bf00      	nop
   31db4:	01f956e2 	.word	0x01f956e2
   31db8:	aaaaaaab 	.word	0xaaaaaaab
   31dbc:	0aaaaaaa 	.word	0x0aaaaaaa
   31dc0:	cccccccd 	.word	0xcccccccd
   31dc4:	0ccccccc 	.word	0x0ccccccc

00031dc8 <am_hal_pdm_fifo_flush>:
   31dc8:	b178      	cbz	r0, 31dea <am_hal_pdm_fifo_flush+0x22>
   31dca:	6803      	ldr	r3, [r0, #0]
   31dcc:	4a08      	ldr	r2, [pc, #32]	; (31df0 <am_hal_pdm_fifo_flush+0x28>)
   31dce:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   31dd2:	4293      	cmp	r3, r2
   31dd4:	d109      	bne.n	31dea <am_hal_pdm_fifo_flush+0x22>
   31dd6:	6883      	ldr	r3, [r0, #8]
   31dd8:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   31ddc:	f203 2301 	addw	r3, r3, #513	; 0x201
   31de0:	031b      	lsls	r3, r3, #12
   31de2:	2201      	movs	r2, #1
   31de4:	2000      	movs	r0, #0
   31de6:	619a      	str	r2, [r3, #24]
   31de8:	4770      	bx	lr
   31dea:	2002      	movs	r0, #2
   31dec:	4770      	bx	lr
   31dee:	bf00      	nop
   31df0:	01f956e2 	.word	0x01f956e2

00031df4 <am_hal_pdm_interrupt_service>:
   31df4:	b430      	push	{r4, r5}
   31df6:	070c      	lsls	r4, r1, #28
   31df8:	6883      	ldr	r3, [r0, #8]
   31dfa:	d50f      	bpl.n	31e1c <am_hal_pdm_interrupt_service+0x28>
   31dfc:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   31e00:	42a5      	cmp	r5, r4
   31e02:	6895      	ldr	r5, [r2, #8]
   31e04:	bf08      	it	eq
   31e06:	68c4      	ldreq	r4, [r0, #12]
   31e08:	6144      	str	r4, [r0, #20]
   31e0a:	f503 2280 	add.w	r2, r3, #262144	; 0x40000
   31e0e:	f202 2201 	addw	r2, r2, #513	; 0x201
   31e12:	0312      	lsls	r2, r2, #12
   31e14:	f8c2 4154 	str.w	r4, [r2, #340]	; 0x154
   31e18:	f8c2 5250 	str.w	r5, [r2, #592]	; 0x250
   31e1c:	078a      	lsls	r2, r1, #30
   31e1e:	d50c      	bpl.n	31e3a <am_hal_pdm_interrupt_service+0x46>
   31e20:	6802      	ldr	r2, [r0, #0]
   31e22:	4907      	ldr	r1, [pc, #28]	; (31e40 <am_hal_pdm_interrupt_service+0x4c>)
   31e24:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   31e28:	428a      	cmp	r2, r1
   31e2a:	d106      	bne.n	31e3a <am_hal_pdm_interrupt_service+0x46>
   31e2c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   31e30:	f203 2301 	addw	r3, r3, #513	; 0x201
   31e34:	031b      	lsls	r3, r3, #12
   31e36:	2201      	movs	r2, #1
   31e38:	619a      	str	r2, [r3, #24]
   31e3a:	2000      	movs	r0, #0
   31e3c:	bc30      	pop	{r4, r5}
   31e3e:	4770      	bx	lr
   31e40:	01f956e2 	.word	0x01f956e2

00031e44 <am_hal_pdm_interrupt_enable>:
   31e44:	b190      	cbz	r0, 31e6c <am_hal_pdm_interrupt_enable+0x28>
   31e46:	6803      	ldr	r3, [r0, #0]
   31e48:	4a09      	ldr	r2, [pc, #36]	; (31e70 <am_hal_pdm_interrupt_enable+0x2c>)
   31e4a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   31e4e:	4293      	cmp	r3, r2
   31e50:	d10c      	bne.n	31e6c <am_hal_pdm_interrupt_enable+0x28>
   31e52:	6883      	ldr	r3, [r0, #8]
   31e54:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   31e58:	f203 2301 	addw	r3, r3, #513	; 0x201
   31e5c:	031b      	lsls	r3, r3, #12
   31e5e:	2000      	movs	r0, #0
   31e60:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   31e64:	4311      	orrs	r1, r2
   31e66:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   31e6a:	4770      	bx	lr
   31e6c:	2002      	movs	r0, #2
   31e6e:	4770      	bx	lr
   31e70:	01f956e2 	.word	0x01f956e2

00031e74 <am_hal_pdm_interrupt_clear>:
   31e74:	b178      	cbz	r0, 31e96 <am_hal_pdm_interrupt_clear+0x22>
   31e76:	6803      	ldr	r3, [r0, #0]
   31e78:	4a08      	ldr	r2, [pc, #32]	; (31e9c <am_hal_pdm_interrupt_clear+0x28>)
   31e7a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   31e7e:	4293      	cmp	r3, r2
   31e80:	d109      	bne.n	31e96 <am_hal_pdm_interrupt_clear+0x22>
   31e82:	6883      	ldr	r3, [r0, #8]
   31e84:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   31e88:	f203 2301 	addw	r3, r3, #513	; 0x201
   31e8c:	031b      	lsls	r3, r3, #12
   31e8e:	2000      	movs	r0, #0
   31e90:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   31e94:	4770      	bx	lr
   31e96:	2002      	movs	r0, #2
   31e98:	4770      	bx	lr
   31e9a:	bf00      	nop
   31e9c:	01f956e2 	.word	0x01f956e2

00031ea0 <am_hal_pdm_interrupt_status_get>:
   31ea0:	b318      	cbz	r0, 31eea <am_hal_pdm_interrupt_status_get+0x4a>
   31ea2:	6803      	ldr	r3, [r0, #0]
   31ea4:	b410      	push	{r4}
   31ea6:	4c12      	ldr	r4, [pc, #72]	; (31ef0 <am_hal_pdm_interrupt_status_get+0x50>)
   31ea8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   31eac:	42a3      	cmp	r3, r4
   31eae:	d118      	bne.n	31ee2 <am_hal_pdm_interrupt_status_get+0x42>
   31eb0:	6883      	ldr	r3, [r0, #8]
   31eb2:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   31eb6:	f203 2301 	addw	r3, r3, #513	; 0x201
   31eba:	031b      	lsls	r3, r3, #12
   31ebc:	b932      	cbnz	r2, 31ecc <am_hal_pdm_interrupt_status_get+0x2c>
   31ebe:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   31ec2:	f85d 4b04 	ldr.w	r4, [sp], #4
   31ec6:	600b      	str	r3, [r1, #0]
   31ec8:	4610      	mov	r0, r2
   31eca:	4770      	bx	lr
   31ecc:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   31ed0:	600a      	str	r2, [r1, #0]
   31ed2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   31ed6:	f85d 4b04 	ldr.w	r4, [sp], #4
   31eda:	401a      	ands	r2, r3
   31edc:	2000      	movs	r0, #0
   31ede:	600a      	str	r2, [r1, #0]
   31ee0:	4770      	bx	lr
   31ee2:	2002      	movs	r0, #2
   31ee4:	f85d 4b04 	ldr.w	r4, [sp], #4
   31ee8:	4770      	bx	lr
   31eea:	2002      	movs	r0, #2
   31eec:	4770      	bx	lr
   31eee:	bf00      	nop
   31ef0:	01f956e2 	.word	0x01f956e2

00031ef4 <am_hal_pdm_dma_get_buffer>:
   31ef4:	2100      	movs	r1, #0
   31ef6:	b510      	push	{r4, lr}
   31ef8:	4604      	mov	r4, r0
   31efa:	4608      	mov	r0, r1
   31efc:	f7fd fd82 	bl	2fa04 <am_hal_daxi_control>
   31f00:	e9d4 0304 	ldrd	r0, r3, [r4, #16]
   31f04:	4283      	cmp	r3, r0
   31f06:	bf08      	it	eq
   31f08:	68e0      	ldreq	r0, [r4, #12]
   31f0a:	bd10      	pop	{r4, pc}

00031f0c <tempco_set_trims.part.0>:
   31f0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   31f10:	4c43      	ldr	r4, [pc, #268]	; (32020 <tempco_set_trims.part.0+0x114>)
   31f12:	6826      	ldr	r6, [r4, #0]
   31f14:	4c43      	ldr	r4, [pc, #268]	; (32024 <tempco_set_trims.part.0+0x118>)
   31f16:	6824      	ldr	r4, [r4, #0]
   31f18:	4406      	add	r6, r0
   31f1a:	4404      	add	r4, r0
   31f1c:	4842      	ldr	r0, [pc, #264]	; (32028 <tempco_set_trims.part.0+0x11c>)
   31f1e:	6800      	ldr	r0, [r0, #0]
   31f20:	eb01 0800 	add.w	r8, r1, r0
   31f24:	4941      	ldr	r1, [pc, #260]	; (3202c <tempco_set_trims.part.0+0x120>)
   31f26:	680f      	ldr	r7, [r1, #0]
   31f28:	4417      	add	r7, r2
   31f2a:	4a41      	ldr	r2, [pc, #260]	; (32030 <tempco_set_trims.part.0+0x124>)
   31f2c:	6812      	ldr	r2, [r2, #0]
   31f2e:	eb03 0902 	add.w	r9, r3, r2
   31f32:	4a40      	ldr	r2, [pc, #256]	; (32034 <tempco_set_trims.part.0+0x128>)
   31f34:	6815      	ldr	r5, [r2, #0]
   31f36:	b083      	sub	sp, #12
   31f38:	441d      	add	r5, r3
   31f3a:	f7fd ff47 	bl	2fdcc <am_hal_interrupt_master_disable>
   31f3e:	4b3e      	ldr	r3, [pc, #248]	; (32038 <tempco_set_trims.part.0+0x12c>)
   31f40:	9001      	str	r0, [sp, #4]
   31f42:	781b      	ldrb	r3, [r3, #0]
   31f44:	b91b      	cbnz	r3, 31f4e <tempco_set_trims.part.0+0x42>
   31f46:	4b3d      	ldr	r3, [pc, #244]	; (3203c <tempco_set_trims.part.0+0x130>)
   31f48:	6818      	ldr	r0, [r3, #0]
   31f4a:	1a36      	subs	r6, r6, r0
   31f4c:	1a24      	subs	r4, r4, r0
   31f4e:	4a3c      	ldr	r2, [pc, #240]	; (32040 <tempco_set_trims.part.0+0x134>)
   31f50:	4b3c      	ldr	r3, [pc, #240]	; (32044 <tempco_set_trims.part.0+0x138>)
   31f52:	6016      	str	r6, [r2, #0]
   31f54:	f1b8 0f00 	cmp.w	r8, #0
   31f58:	f386 0c06 	usat	ip, #6, r6
   31f5c:	601c      	str	r4, [r3, #0]
   31f5e:	f384 0006 	usat	r0, #6, r4
   31f62:	db51      	blt.n	32008 <tempco_set_trims.part.0+0xfc>
   31f64:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
   31f68:	d83f      	bhi.n	31fea <tempco_set_trims.part.0+0xde>
   31f6a:	f008 083f 	and.w	r8, r8, #63	; 0x3f
   31f6e:	2f00      	cmp	r7, #0
   31f70:	db3f      	blt.n	31ff2 <tempco_set_trims.part.0+0xe6>
   31f72:	2f3f      	cmp	r7, #63	; 0x3f
   31f74:	d84b      	bhi.n	3200e <tempco_set_trims.part.0+0x102>
   31f76:	f007 073f 	and.w	r7, r7, #63	; 0x3f
   31f7a:	f1b9 0f00 	cmp.w	r9, #0
   31f7e:	db3d      	blt.n	31ffc <tempco_set_trims.part.0+0xf0>
   31f80:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
   31f84:	d848      	bhi.n	32018 <tempco_set_trims.part.0+0x10c>
   31f86:	f009 097f 	and.w	r9, r9, #127	; 0x7f
   31f8a:	2d00      	cmp	r5, #0
   31f8c:	db3a      	blt.n	32004 <tempco_set_trims.part.0+0xf8>
   31f8e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   31f92:	d23e      	bcs.n	32012 <tempco_set_trims.part.0+0x106>
   31f94:	f3c5 0509 	ubfx	r5, r5, #0, #10
   31f98:	4b2b      	ldr	r3, [pc, #172]	; (32048 <tempco_set_trims.part.0+0x13c>)
   31f9a:	f8d3 236c 	ldr.w	r2, [r3, #876]	; 0x36c
   31f9e:	f36c 5219 	bfi	r2, ip, #20, #6
   31fa2:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
   31fa6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   31faa:	f360 0205 	bfi	r2, r0, #0, #6
   31fae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   31fb2:	f8d3 236c 	ldr.w	r2, [r3, #876]	; 0x36c
   31fb6:	f368 629f 	bfi	r2, r8, #26, #6
   31fba:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
   31fbe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   31fc2:	f367 4297 	bfi	r2, r7, #18, #6
   31fc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   31fca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   31fcc:	f369 12cd 	bfi	r2, r9, #7, #7
   31fd0:	645a      	str	r2, [r3, #68]	; 0x44
   31fd2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   31fd6:	f365 0209 	bfi	r2, r5, #0, #10
   31fda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   31fde:	9801      	ldr	r0, [sp, #4]
   31fe0:	b003      	add	sp, #12
   31fe2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   31fe6:	f7fd bef5 	b.w	2fdd4 <am_hal_interrupt_master_set>
   31fea:	2f00      	cmp	r7, #0
   31fec:	f04f 083f 	mov.w	r8, #63	; 0x3f
   31ff0:	dabf      	bge.n	31f72 <tempco_set_trims.part.0+0x66>
   31ff2:	f1b9 0f00 	cmp.w	r9, #0
   31ff6:	f04f 0700 	mov.w	r7, #0
   31ffa:	dac1      	bge.n	31f80 <tempco_set_trims.part.0+0x74>
   31ffc:	2d00      	cmp	r5, #0
   31ffe:	f04f 0900 	mov.w	r9, #0
   32002:	dac4      	bge.n	31f8e <tempco_set_trims.part.0+0x82>
   32004:	2500      	movs	r5, #0
   32006:	e7c7      	b.n	31f98 <tempco_set_trims.part.0+0x8c>
   32008:	f04f 0800 	mov.w	r8, #0
   3200c:	e7af      	b.n	31f6e <tempco_set_trims.part.0+0x62>
   3200e:	273f      	movs	r7, #63	; 0x3f
   32010:	e7b3      	b.n	31f7a <tempco_set_trims.part.0+0x6e>
   32012:	f240 35ff 	movw	r5, #1023	; 0x3ff
   32016:	e7bf      	b.n	31f98 <tempco_set_trims.part.0+0x8c>
   32018:	f04f 097f 	mov.w	r9, #127	; 0x7f
   3201c:	e7b5      	b.n	31f8a <tempco_set_trims.part.0+0x7e>
   3201e:	bf00      	nop
   32020:	1001a600 	.word	0x1001a600
   32024:	1001a60c 	.word	0x1001a60c
   32028:	1001a608 	.word	0x1001a608
   3202c:	1001a610 	.word	0x1001a610
   32030:	1001a614 	.word	0x1001a614
   32034:	1001a604 	.word	0x1001a604
   32038:	1001a5f4 	.word	0x1001a5f4
   3203c:	1001a61c 	.word	0x1001a61c
   32040:	1001a5fc 	.word	0x1001a5fc
   32044:	1001a5f8 	.word	0x1001a5f8
   32048:	40020000 	.word	0x40020000

0003204c <am_hal_pwrctrl_mcu_mode_select>:
   3204c:	1e43      	subs	r3, r0, #1
   3204e:	2b01      	cmp	r3, #1
   32050:	d829      	bhi.n	320a6 <am_hal_pwrctrl_mcu_mode_select+0x5a>
   32052:	2802      	cmp	r0, #2
   32054:	b570      	push	{r4, r5, r6, lr}
   32056:	4604      	mov	r4, r0
   32058:	d015      	beq.n	32086 <am_hal_pwrctrl_mcu_mode_select+0x3a>
   3205a:	4b15      	ldr	r3, [pc, #84]	; (320b0 <am_hal_pwrctrl_mcu_mode_select+0x64>)
   3205c:	781a      	ldrb	r2, [r3, #0]
   3205e:	42a2      	cmp	r2, r4
   32060:	d023      	beq.n	320aa <am_hal_pwrctrl_mcu_mode_select+0x5e>
   32062:	4e14      	ldr	r6, [pc, #80]	; (320b4 <am_hal_pwrctrl_mcu_mode_select+0x68>)
   32064:	701c      	strb	r4, [r3, #0]
   32066:	6833      	ldr	r3, [r6, #0]
   32068:	f364 0301 	bfi	r3, r4, #0, #2
   3206c:	2505      	movs	r5, #5
   3206e:	6033      	str	r3, [r6, #0]
   32070:	6833      	ldr	r3, [r6, #0]
   32072:	075b      	lsls	r3, r3, #29
   32074:	f04f 0001 	mov.w	r0, #1
   32078:	d40e      	bmi.n	32098 <am_hal_pwrctrl_mcu_mode_select+0x4c>
   3207a:	f7fe f9cf 	bl	3041c <am_hal_delay_us>
   3207e:	3d01      	subs	r5, #1
   32080:	d1f6      	bne.n	32070 <am_hal_pwrctrl_mcu_mode_select+0x24>
   32082:	2004      	movs	r0, #4
   32084:	bd70      	pop	{r4, r5, r6, pc}
   32086:	4b0b      	ldr	r3, [pc, #44]	; (320b4 <am_hal_pwrctrl_mcu_mode_select+0x68>)
   32088:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   3208c:	f3c3 1301 	ubfx	r3, r3, #4, #2
   32090:	2b03      	cmp	r3, #3
   32092:	d0e2      	beq.n	3205a <am_hal_pwrctrl_mcu_mode_select+0xe>
   32094:	2007      	movs	r0, #7
   32096:	bd70      	pop	{r4, r5, r6, pc}
   32098:	6830      	ldr	r0, [r6, #0]
   3209a:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   3209e:	1b00      	subs	r0, r0, r4
   320a0:	bf18      	it	ne
   320a2:	2001      	movne	r0, #1
   320a4:	bd70      	pop	{r4, r5, r6, pc}
   320a6:	2006      	movs	r0, #6
   320a8:	4770      	bx	lr
   320aa:	2000      	movs	r0, #0
   320ac:	bd70      	pop	{r4, r5, r6, pc}
   320ae:	bf00      	nop
   320b0:	10004a98 	.word	0x10004a98
   320b4:	40021000 	.word	0x40021000

000320b8 <am_hal_pwrctrl_mcu_memory_config>:
   320b8:	b570      	push	{r4, r5, r6, lr}
   320ba:	7803      	ldrb	r3, [r0, #0]
   320bc:	2b01      	cmp	r3, #1
   320be:	b082      	sub	sp, #8
   320c0:	4605      	mov	r5, r0
   320c2:	d073      	beq.n	321ac <am_hal_pwrctrl_mcu_memory_config+0xf4>
   320c4:	2b02      	cmp	r3, #2
   320c6:	d067      	beq.n	32198 <am_hal_pwrctrl_mcu_memory_config+0xe0>
   320c8:	2b00      	cmp	r3, #0
   320ca:	d05b      	beq.n	32184 <am_hal_pwrctrl_mcu_memory_config+0xcc>
   320cc:	4c4f      	ldr	r4, [pc, #316]	; (3220c <am_hal_pwrctrl_mcu_memory_config+0x154>)
   320ce:	78aa      	ldrb	r2, [r5, #2]
   320d0:	6963      	ldr	r3, [r4, #20]
   320d2:	494f      	ldr	r1, [pc, #316]	; (32210 <am_hal_pwrctrl_mcu_memory_config+0x158>)
   320d4:	f362 0302 	bfi	r3, r2, #0, #3
   320d8:	6163      	str	r3, [r4, #20]
   320da:	6963      	ldr	r3, [r4, #20]
   320dc:	792a      	ldrb	r2, [r5, #4]
   320de:	f362 03c3 	bfi	r3, r2, #3, #1
   320e2:	6163      	str	r3, [r4, #20]
   320e4:	2601      	movs	r6, #1
   320e6:	6963      	ldr	r3, [r4, #20]
   320e8:	9600      	str	r6, [sp, #0]
   320ea:	223f      	movs	r2, #63	; 0x3f
   320ec:	2005      	movs	r0, #5
   320ee:	f7fe f9d9 	bl	304a4 <am_hal_delay_us_status_check>
   320f2:	b940      	cbnz	r0, 32106 <am_hal_pwrctrl_mcu_memory_config+0x4e>
   320f4:	69a2      	ldr	r2, [r4, #24]
   320f6:	6963      	ldr	r3, [r4, #20]
   320f8:	f3c2 1200 	ubfx	r2, r2, #4, #1
   320fc:	f3c3 1300 	ubfx	r3, r3, #4, #1
   32100:	429a      	cmp	r2, r3
   32102:	d002      	beq.n	3210a <am_hal_pwrctrl_mcu_memory_config+0x52>
   32104:	4630      	mov	r0, r6
   32106:	b002      	add	sp, #8
   32108:	bd70      	pop	{r4, r5, r6, pc}
   3210a:	69a2      	ldr	r2, [r4, #24]
   3210c:	6963      	ldr	r3, [r4, #20]
   3210e:	f3c2 1240 	ubfx	r2, r2, #5, #1
   32112:	f3c3 1340 	ubfx	r3, r3, #5, #1
   32116:	429a      	cmp	r2, r3
   32118:	d1f4      	bne.n	32104 <am_hal_pwrctrl_mcu_memory_config+0x4c>
   3211a:	69a2      	ldr	r2, [r4, #24]
   3211c:	6963      	ldr	r3, [r4, #20]
   3211e:	f002 0207 	and.w	r2, r2, #7
   32122:	f003 0307 	and.w	r3, r3, #7
   32126:	429a      	cmp	r2, r3
   32128:	d1ec      	bne.n	32104 <am_hal_pwrctrl_mcu_memory_config+0x4c>
   3212a:	69a2      	ldr	r2, [r4, #24]
   3212c:	6963      	ldr	r3, [r4, #20]
   3212e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   32132:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   32136:	429a      	cmp	r2, r3
   32138:	d1e4      	bne.n	32104 <am_hal_pwrctrl_mcu_memory_config+0x4c>
   3213a:	786b      	ldrb	r3, [r5, #1]
   3213c:	2b00      	cmp	r3, #0
   3213e:	d05f      	beq.n	32200 <am_hal_pwrctrl_mcu_memory_config+0x148>
   32140:	69e3      	ldr	r3, [r4, #28]
   32142:	f360 1304 	bfi	r3, r0, #4, #1
   32146:	61e3      	str	r3, [r4, #28]
   32148:	796b      	ldrb	r3, [r5, #5]
   3214a:	2b00      	cmp	r3, #0
   3214c:	d052      	beq.n	321f4 <am_hal_pwrctrl_mcu_memory_config+0x13c>
   3214e:	4b2f      	ldr	r3, [pc, #188]	; (3220c <am_hal_pwrctrl_mcu_memory_config+0x154>)
   32150:	69da      	ldr	r2, [r3, #28]
   32152:	f36f 02c3 	bfc	r2, #3, #1
   32156:	61da      	str	r2, [r3, #28]
   32158:	78eb      	ldrb	r3, [r5, #3]
   3215a:	2b07      	cmp	r3, #7
   3215c:	d8d3      	bhi.n	32106 <am_hal_pwrctrl_mcu_memory_config+0x4e>
   3215e:	a201      	add	r2, pc, #4	; (adr r2, 32164 <am_hal_pwrctrl_mcu_memory_config+0xac>)
   32160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   32164:	000321e9 	.word	0x000321e9
   32168:	000321db 	.word	0x000321db
   3216c:	00032107 	.word	0x00032107
   32170:	000321cd 	.word	0x000321cd
   32174:	00032107 	.word	0x00032107
   32178:	00032107 	.word	0x00032107
   3217c:	00032107 	.word	0x00032107
   32180:	000321c1 	.word	0x000321c1
   32184:	4a21      	ldr	r2, [pc, #132]	; (3220c <am_hal_pwrctrl_mcu_memory_config+0x154>)
   32186:	6951      	ldr	r1, [r2, #20]
   32188:	f363 1104 	bfi	r1, r3, #4, #1
   3218c:	6151      	str	r1, [r2, #20]
   3218e:	6951      	ldr	r1, [r2, #20]
   32190:	f363 1145 	bfi	r1, r3, #5, #1
   32194:	6151      	str	r1, [r2, #20]
   32196:	e799      	b.n	320cc <am_hal_pwrctrl_mcu_memory_config+0x14>
   32198:	4b1c      	ldr	r3, [pc, #112]	; (3220c <am_hal_pwrctrl_mcu_memory_config+0x154>)
   3219a:	695a      	ldr	r2, [r3, #20]
   3219c:	f042 0210 	orr.w	r2, r2, #16
   321a0:	615a      	str	r2, [r3, #20]
   321a2:	695a      	ldr	r2, [r3, #20]
   321a4:	f042 0220 	orr.w	r2, r2, #32
   321a8:	615a      	str	r2, [r3, #20]
   321aa:	e78f      	b.n	320cc <am_hal_pwrctrl_mcu_memory_config+0x14>
   321ac:	4b17      	ldr	r3, [pc, #92]	; (3220c <am_hal_pwrctrl_mcu_memory_config+0x154>)
   321ae:	695a      	ldr	r2, [r3, #20]
   321b0:	f042 0210 	orr.w	r2, r2, #16
   321b4:	615a      	str	r2, [r3, #20]
   321b6:	695a      	ldr	r2, [r3, #20]
   321b8:	f36f 1245 	bfc	r2, #5, #1
   321bc:	615a      	str	r2, [r3, #20]
   321be:	e785      	b.n	320cc <am_hal_pwrctrl_mcu_memory_config+0x14>
   321c0:	4b12      	ldr	r3, [pc, #72]	; (3220c <am_hal_pwrctrl_mcu_memory_config+0x154>)
   321c2:	69da      	ldr	r2, [r3, #28]
   321c4:	f36f 0202 	bfc	r2, #0, #3
   321c8:	61da      	str	r2, [r3, #28]
   321ca:	e79c      	b.n	32106 <am_hal_pwrctrl_mcu_memory_config+0x4e>
   321cc:	4b0f      	ldr	r3, [pc, #60]	; (3220c <am_hal_pwrctrl_mcu_memory_config+0x154>)
   321ce:	69da      	ldr	r2, [r3, #28]
   321d0:	2104      	movs	r1, #4
   321d2:	f361 0202 	bfi	r2, r1, #0, #3
   321d6:	61da      	str	r2, [r3, #28]
   321d8:	e795      	b.n	32106 <am_hal_pwrctrl_mcu_memory_config+0x4e>
   321da:	4b0c      	ldr	r3, [pc, #48]	; (3220c <am_hal_pwrctrl_mcu_memory_config+0x154>)
   321dc:	69da      	ldr	r2, [r3, #28]
   321de:	2106      	movs	r1, #6
   321e0:	f361 0202 	bfi	r2, r1, #0, #3
   321e4:	61da      	str	r2, [r3, #28]
   321e6:	e78e      	b.n	32106 <am_hal_pwrctrl_mcu_memory_config+0x4e>
   321e8:	4a08      	ldr	r2, [pc, #32]	; (3220c <am_hal_pwrctrl_mcu_memory_config+0x154>)
   321ea:	69d3      	ldr	r3, [r2, #28]
   321ec:	f043 0307 	orr.w	r3, r3, #7
   321f0:	61d3      	str	r3, [r2, #28]
   321f2:	e788      	b.n	32106 <am_hal_pwrctrl_mcu_memory_config+0x4e>
   321f4:	4a05      	ldr	r2, [pc, #20]	; (3220c <am_hal_pwrctrl_mcu_memory_config+0x154>)
   321f6:	69d3      	ldr	r3, [r2, #28]
   321f8:	f043 0308 	orr.w	r3, r3, #8
   321fc:	61d3      	str	r3, [r2, #28]
   321fe:	e7ab      	b.n	32158 <am_hal_pwrctrl_mcu_memory_config+0xa0>
   32200:	69e3      	ldr	r3, [r4, #28]
   32202:	f043 0310 	orr.w	r3, r3, #16
   32206:	61e3      	str	r3, [r4, #28]
   32208:	e79e      	b.n	32148 <am_hal_pwrctrl_mcu_memory_config+0x90>
   3220a:	bf00      	nop
   3220c:	40021000 	.word	0x40021000
   32210:	40021018 	.word	0x40021018

00032214 <am_hal_pwrctrl_sram_config>:
   32214:	b570      	push	{r4, r5, r6, lr}
   32216:	4c29      	ldr	r4, [pc, #164]	; (322bc <am_hal_pwrctrl_sram_config+0xa8>)
   32218:	7802      	ldrb	r2, [r0, #0]
   3221a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3221c:	4928      	ldr	r1, [pc, #160]	; (322c0 <am_hal_pwrctrl_sram_config+0xac>)
   3221e:	f362 0301 	bfi	r3, r2, #0, #2
   32222:	b082      	sub	sp, #8
   32224:	6263      	str	r3, [r4, #36]	; 0x24
   32226:	2601      	movs	r6, #1
   32228:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3222a:	9600      	str	r6, [sp, #0]
   3222c:	4605      	mov	r5, r0
   3222e:	2203      	movs	r2, #3
   32230:	2005      	movs	r0, #5
   32232:	f7fe f937 	bl	304a4 <am_hal_delay_us_status_check>
   32236:	b940      	cbnz	r0, 3224a <am_hal_pwrctrl_sram_config+0x36>
   32238:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   3223a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3223c:	f002 0203 	and.w	r2, r2, #3
   32240:	f003 0303 	and.w	r3, r3, #3
   32244:	429a      	cmp	r2, r3
   32246:	d002      	beq.n	3224e <am_hal_pwrctrl_sram_config+0x3a>
   32248:	4630      	mov	r0, r6
   3224a:	b002      	add	sp, #8
   3224c:	bd70      	pop	{r4, r5, r6, pc}
   3224e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   32250:	786b      	ldrb	r3, [r5, #1]
   32252:	f895 c002 	ldrb.w	ip, [r5, #2]
   32256:	78ee      	ldrb	r6, [r5, #3]
   32258:	7929      	ldrb	r1, [r5, #4]
   3225a:	f363 0283 	bfi	r2, r3, #2, #2
   3225e:	796b      	ldrb	r3, [r5, #5]
   32260:	62e2      	str	r2, [r4, #44]	; 0x2c
   32262:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   32264:	f36c 1287 	bfi	r2, ip, #6, #2
   32268:	62e2      	str	r2, [r4, #44]	; 0x2c
   3226a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   3226c:	f366 2209 	bfi	r2, r6, #8, #2
   32270:	62e2      	str	r2, [r4, #44]	; 0x2c
   32272:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   32274:	f361 1205 	bfi	r2, r1, #4, #2
   32278:	62e2      	str	r2, [r4, #44]	; 0x2c
   3227a:	2b03      	cmp	r3, #3
   3227c:	d8e5      	bhi.n	3224a <am_hal_pwrctrl_sram_config+0x36>
   3227e:	e8df f003 	tbb	[pc, r3]
   32282:	0f16      	.short	0x0f16
   32284:	0208      	.short	0x0208
   32286:	4b0d      	ldr	r3, [pc, #52]	; (322bc <am_hal_pwrctrl_sram_config+0xa8>)
   32288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   3228a:	f36f 0201 	bfc	r2, #0, #2
   3228e:	62da      	str	r2, [r3, #44]	; 0x2c
   32290:	e7db      	b.n	3224a <am_hal_pwrctrl_sram_config+0x36>
   32292:	4b0a      	ldr	r3, [pc, #40]	; (322bc <am_hal_pwrctrl_sram_config+0xa8>)
   32294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   32296:	2101      	movs	r1, #1
   32298:	f361 0201 	bfi	r2, r1, #0, #2
   3229c:	62da      	str	r2, [r3, #44]	; 0x2c
   3229e:	e7d4      	b.n	3224a <am_hal_pwrctrl_sram_config+0x36>
   322a0:	4b06      	ldr	r3, [pc, #24]	; (322bc <am_hal_pwrctrl_sram_config+0xa8>)
   322a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   322a4:	2102      	movs	r1, #2
   322a6:	f361 0201 	bfi	r2, r1, #0, #2
   322aa:	62da      	str	r2, [r3, #44]	; 0x2c
   322ac:	e7cd      	b.n	3224a <am_hal_pwrctrl_sram_config+0x36>
   322ae:	4a03      	ldr	r2, [pc, #12]	; (322bc <am_hal_pwrctrl_sram_config+0xa8>)
   322b0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   322b2:	f043 0303 	orr.w	r3, r3, #3
   322b6:	62d3      	str	r3, [r2, #44]	; 0x2c
   322b8:	e7c7      	b.n	3224a <am_hal_pwrctrl_sram_config+0x36>
   322ba:	bf00      	nop
   322bc:	40021000 	.word	0x40021000
   322c0:	40021028 	.word	0x40021028

000322c4 <am_hal_pwrctrl_dsp_memory_config>:
   322c4:	b530      	push	{r4, r5, lr}
   322c6:	460c      	mov	r4, r1
   322c8:	b083      	sub	sp, #12
   322ca:	2800      	cmp	r0, #0
   322cc:	d053      	beq.n	32376 <am_hal_pwrctrl_dsp_memory_config+0xb2>
   322ce:	2801      	cmp	r0, #1
   322d0:	d14e      	bne.n	32370 <am_hal_pwrctrl_dsp_memory_config+0xac>
   322d2:	780b      	ldrb	r3, [r1, #0]
   322d4:	4a6b      	ldr	r2, [pc, #428]	; (32484 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   322d6:	2b00      	cmp	r3, #0
   322d8:	f000 809d 	beq.w	32416 <am_hal_pwrctrl_dsp_memory_config+0x152>
   322dc:	6f93      	ldr	r3, [r2, #120]	; 0x78
   322de:	f043 0302 	orr.w	r3, r3, #2
   322e2:	6793      	str	r3, [r2, #120]	; 0x78
   322e4:	78a3      	ldrb	r3, [r4, #2]
   322e6:	4a67      	ldr	r2, [pc, #412]	; (32484 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   322e8:	2b00      	cmp	r3, #0
   322ea:	f000 809d 	beq.w	32428 <am_hal_pwrctrl_dsp_memory_config+0x164>
   322ee:	6f93      	ldr	r3, [r2, #120]	; 0x78
   322f0:	f043 0301 	orr.w	r3, r3, #1
   322f4:	6793      	str	r3, [r2, #120]	; 0x78
   322f6:	4d63      	ldr	r5, [pc, #396]	; (32484 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   322f8:	4963      	ldr	r1, [pc, #396]	; (32488 <am_hal_pwrctrl_dsp_memory_config+0x1c4>)
   322fa:	6fab      	ldr	r3, [r5, #120]	; 0x78
   322fc:	2201      	movs	r2, #1
   322fe:	9200      	str	r2, [sp, #0]
   32300:	2005      	movs	r0, #5
   32302:	2203      	movs	r2, #3
   32304:	f7fe f8ce 	bl	304a4 <am_hal_delay_us_status_check>
   32308:	bb98      	cbnz	r0, 32372 <am_hal_pwrctrl_dsp_memory_config+0xae>
   3230a:	6fea      	ldr	r2, [r5, #124]	; 0x7c
   3230c:	6fab      	ldr	r3, [r5, #120]	; 0x78
   3230e:	f3c2 0240 	ubfx	r2, r2, #1, #1
   32312:	f3c3 0340 	ubfx	r3, r3, #1, #1
   32316:	429a      	cmp	r2, r3
   32318:	f040 808b 	bne.w	32432 <am_hal_pwrctrl_dsp_memory_config+0x16e>
   3231c:	6fea      	ldr	r2, [r5, #124]	; 0x7c
   3231e:	6fab      	ldr	r3, [r5, #120]	; 0x78
   32320:	f002 0201 	and.w	r2, r2, #1
   32324:	f003 0301 	and.w	r3, r3, #1
   32328:	429a      	cmp	r2, r3
   3232a:	f040 8082 	bne.w	32432 <am_hal_pwrctrl_dsp_memory_config+0x16e>
   3232e:	7863      	ldrb	r3, [r4, #1]
   32330:	2b00      	cmp	r3, #0
   32332:	f040 8081 	bne.w	32438 <am_hal_pwrctrl_dsp_memory_config+0x174>
   32336:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
   3233a:	f043 0304 	orr.w	r3, r3, #4
   3233e:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
   32342:	78e3      	ldrb	r3, [r4, #3]
   32344:	4a4f      	ldr	r2, [pc, #316]	; (32484 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   32346:	2b00      	cmp	r3, #0
   32348:	f000 8095 	beq.w	32476 <am_hal_pwrctrl_dsp_memory_config+0x1b2>
   3234c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   32350:	f043 0302 	orr.w	r3, r3, #2
   32354:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
   32358:	7923      	ldrb	r3, [r4, #4]
   3235a:	2b00      	cmp	r3, #0
   3235c:	f000 8083 	beq.w	32466 <am_hal_pwrctrl_dsp_memory_config+0x1a2>
   32360:	4b48      	ldr	r3, [pc, #288]	; (32484 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   32362:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   32366:	f36f 0200 	bfc	r2, #0, #1
   3236a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   3236e:	e000      	b.n	32372 <am_hal_pwrctrl_dsp_memory_config+0xae>
   32370:	2000      	movs	r0, #0
   32372:	b003      	add	sp, #12
   32374:	bd30      	pop	{r4, r5, pc}
   32376:	780b      	ldrb	r3, [r1, #0]
   32378:	4a42      	ldr	r2, [pc, #264]	; (32484 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   3237a:	2b00      	cmp	r3, #0
   3237c:	d13e      	bne.n	323fc <am_hal_pwrctrl_dsp_memory_config+0x138>
   3237e:	6d91      	ldr	r1, [r2, #88]	; 0x58
   32380:	f363 0141 	bfi	r1, r3, #1, #1
   32384:	6591      	str	r1, [r2, #88]	; 0x58
   32386:	78a3      	ldrb	r3, [r4, #2]
   32388:	4a3e      	ldr	r2, [pc, #248]	; (32484 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   3238a:	2b00      	cmp	r3, #0
   3238c:	d03e      	beq.n	3240c <am_hal_pwrctrl_dsp_memory_config+0x148>
   3238e:	6d93      	ldr	r3, [r2, #88]	; 0x58
   32390:	f043 0301 	orr.w	r3, r3, #1
   32394:	6593      	str	r3, [r2, #88]	; 0x58
   32396:	4d3b      	ldr	r5, [pc, #236]	; (32484 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   32398:	493c      	ldr	r1, [pc, #240]	; (3248c <am_hal_pwrctrl_dsp_memory_config+0x1c8>)
   3239a:	6dab      	ldr	r3, [r5, #88]	; 0x58
   3239c:	2201      	movs	r2, #1
   3239e:	9200      	str	r2, [sp, #0]
   323a0:	2005      	movs	r0, #5
   323a2:	2203      	movs	r2, #3
   323a4:	f7fe f87e 	bl	304a4 <am_hal_delay_us_status_check>
   323a8:	2800      	cmp	r0, #0
   323aa:	d1e2      	bne.n	32372 <am_hal_pwrctrl_dsp_memory_config+0xae>
   323ac:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   323ae:	6dab      	ldr	r3, [r5, #88]	; 0x58
   323b0:	f3c2 0240 	ubfx	r2, r2, #1, #1
   323b4:	f3c3 0340 	ubfx	r3, r3, #1, #1
   323b8:	429a      	cmp	r2, r3
   323ba:	d13a      	bne.n	32432 <am_hal_pwrctrl_dsp_memory_config+0x16e>
   323bc:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   323be:	6dab      	ldr	r3, [r5, #88]	; 0x58
   323c0:	f002 0201 	and.w	r2, r2, #1
   323c4:	f003 0301 	and.w	r3, r3, #1
   323c8:	429a      	cmp	r2, r3
   323ca:	d132      	bne.n	32432 <am_hal_pwrctrl_dsp_memory_config+0x16e>
   323cc:	7863      	ldrb	r3, [r4, #1]
   323ce:	2b00      	cmp	r3, #0
   323d0:	d139      	bne.n	32446 <am_hal_pwrctrl_dsp_memory_config+0x182>
   323d2:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   323d4:	f043 0304 	orr.w	r3, r3, #4
   323d8:	662b      	str	r3, [r5, #96]	; 0x60
   323da:	78e3      	ldrb	r3, [r4, #3]
   323dc:	4a29      	ldr	r2, [pc, #164]	; (32484 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   323de:	2b00      	cmp	r3, #0
   323e0:	d03c      	beq.n	3245c <am_hal_pwrctrl_dsp_memory_config+0x198>
   323e2:	6e13      	ldr	r3, [r2, #96]	; 0x60
   323e4:	f043 0302 	orr.w	r3, r3, #2
   323e8:	6613      	str	r3, [r2, #96]	; 0x60
   323ea:	7923      	ldrb	r3, [r4, #4]
   323ec:	2b00      	cmp	r3, #0
   323ee:	d02f      	beq.n	32450 <am_hal_pwrctrl_dsp_memory_config+0x18c>
   323f0:	4b24      	ldr	r3, [pc, #144]	; (32484 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   323f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   323f4:	f36f 0200 	bfc	r2, #0, #1
   323f8:	661a      	str	r2, [r3, #96]	; 0x60
   323fa:	e7ba      	b.n	32372 <am_hal_pwrctrl_dsp_memory_config+0xae>
   323fc:	6d93      	ldr	r3, [r2, #88]	; 0x58
   323fe:	f043 0302 	orr.w	r3, r3, #2
   32402:	6593      	str	r3, [r2, #88]	; 0x58
   32404:	78a3      	ldrb	r3, [r4, #2]
   32406:	4a1f      	ldr	r2, [pc, #124]	; (32484 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   32408:	2b00      	cmp	r3, #0
   3240a:	d1c0      	bne.n	3238e <am_hal_pwrctrl_dsp_memory_config+0xca>
   3240c:	6d91      	ldr	r1, [r2, #88]	; 0x58
   3240e:	f363 0100 	bfi	r1, r3, #0, #1
   32412:	6591      	str	r1, [r2, #88]	; 0x58
   32414:	e7bf      	b.n	32396 <am_hal_pwrctrl_dsp_memory_config+0xd2>
   32416:	6f91      	ldr	r1, [r2, #120]	; 0x78
   32418:	f363 0141 	bfi	r1, r3, #1, #1
   3241c:	6791      	str	r1, [r2, #120]	; 0x78
   3241e:	78a3      	ldrb	r3, [r4, #2]
   32420:	4a18      	ldr	r2, [pc, #96]	; (32484 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   32422:	2b00      	cmp	r3, #0
   32424:	f47f af63 	bne.w	322ee <am_hal_pwrctrl_dsp_memory_config+0x2a>
   32428:	6f91      	ldr	r1, [r2, #120]	; 0x78
   3242a:	f363 0100 	bfi	r1, r3, #0, #1
   3242e:	6791      	str	r1, [r2, #120]	; 0x78
   32430:	e761      	b.n	322f6 <am_hal_pwrctrl_dsp_memory_config+0x32>
   32432:	2001      	movs	r0, #1
   32434:	b003      	add	sp, #12
   32436:	bd30      	pop	{r4, r5, pc}
   32438:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
   3243c:	f360 0382 	bfi	r3, r0, #2, #1
   32440:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
   32444:	e77d      	b.n	32342 <am_hal_pwrctrl_dsp_memory_config+0x7e>
   32446:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   32448:	f360 0382 	bfi	r3, r0, #2, #1
   3244c:	662b      	str	r3, [r5, #96]	; 0x60
   3244e:	e7c4      	b.n	323da <am_hal_pwrctrl_dsp_memory_config+0x116>
   32450:	4a0c      	ldr	r2, [pc, #48]	; (32484 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   32452:	6e13      	ldr	r3, [r2, #96]	; 0x60
   32454:	f043 0301 	orr.w	r3, r3, #1
   32458:	6613      	str	r3, [r2, #96]	; 0x60
   3245a:	e78a      	b.n	32372 <am_hal_pwrctrl_dsp_memory_config+0xae>
   3245c:	6e11      	ldr	r1, [r2, #96]	; 0x60
   3245e:	f363 0141 	bfi	r1, r3, #1, #1
   32462:	6611      	str	r1, [r2, #96]	; 0x60
   32464:	e7c1      	b.n	323ea <am_hal_pwrctrl_dsp_memory_config+0x126>
   32466:	4a07      	ldr	r2, [pc, #28]	; (32484 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   32468:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   3246c:	f043 0301 	orr.w	r3, r3, #1
   32470:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
   32474:	e77d      	b.n	32372 <am_hal_pwrctrl_dsp_memory_config+0xae>
   32476:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
   3247a:	f363 0141 	bfi	r1, r3, #1, #1
   3247e:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
   32482:	e769      	b.n	32358 <am_hal_pwrctrl_dsp_memory_config+0x94>
   32484:	40021000 	.word	0x40021000
   32488:	4002107c 	.word	0x4002107c
   3248c:	4002105c 	.word	0x4002105c

00032490 <am_hal_pwrctrl_periph_enable>:
   32490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32494:	2821      	cmp	r0, #33	; 0x21
   32496:	b089      	sub	sp, #36	; 0x24
   32498:	d831      	bhi.n	324fe <am_hal_pwrctrl_periph_enable+0x6e>
   3249a:	4b5e      	ldr	r3, [pc, #376]	; (32614 <am_hal_pwrctrl_periph_enable+0x184>)
   3249c:	0101      	lsls	r1, r0, #4
   3249e:	eb03 1200 	add.w	r2, r3, r0, lsl #4
   324a2:	585f      	ldr	r7, [r3, r1]
   324a4:	f8d2 8004 	ldr.w	r8, [r2, #4]
   324a8:	6839      	ldr	r1, [r7, #0]
   324aa:	ea11 0f08 	tst.w	r1, r8
   324ae:	4604      	mov	r4, r0
   324b0:	d120      	bne.n	324f4 <am_hal_pwrctrl_periph_enable+0x64>
   324b2:	2814      	cmp	r0, #20
   324b4:	e9d2 6502 	ldrd	r6, r5, [r2, #8]
   324b8:	d026      	beq.n	32508 <am_hal_pwrctrl_periph_enable+0x78>
   324ba:	f7fd fc87 	bl	2fdcc <am_hal_interrupt_master_disable>
   324be:	9005      	str	r0, [sp, #20]
   324c0:	683b      	ldr	r3, [r7, #0]
   324c2:	ea43 0308 	orr.w	r3, r3, r8
   324c6:	603b      	str	r3, [r7, #0]
   324c8:	9805      	ldr	r0, [sp, #20]
   324ca:	f7fd fc83 	bl	2fdd4 <am_hal_interrupt_master_set>
   324ce:	2301      	movs	r3, #1
   324d0:	9300      	str	r3, [sp, #0]
   324d2:	462a      	mov	r2, r5
   324d4:	462b      	mov	r3, r5
   324d6:	4631      	mov	r1, r6
   324d8:	2005      	movs	r0, #5
   324da:	f7fd ffe3 	bl	304a4 <am_hal_delay_us_status_check>
   324de:	4604      	mov	r4, r0
   324e0:	b920      	cbnz	r0, 324ec <am_hal_pwrctrl_periph_enable+0x5c>
   324e2:	6833      	ldr	r3, [r6, #0]
   324e4:	422b      	tst	r3, r5
   324e6:	bf0c      	ite	eq
   324e8:	2401      	moveq	r4, #1
   324ea:	2400      	movne	r4, #0
   324ec:	4620      	mov	r0, r4
   324ee:	b009      	add	sp, #36	; 0x24
   324f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   324f4:	2400      	movs	r4, #0
   324f6:	4620      	mov	r0, r4
   324f8:	b009      	add	sp, #36	; 0x24
   324fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   324fe:	2406      	movs	r4, #6
   32500:	4620      	mov	r0, r4
   32502:	b009      	add	sp, #36	; 0x24
   32504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32508:	f8df 9120 	ldr.w	r9, [pc, #288]	; 3262c <am_hal_pwrctrl_periph_enable+0x19c>
   3250c:	f8d9 a000 	ldr.w	sl, [r9]
   32510:	f1ba 0f00 	cmp.w	sl, #0
   32514:	d02f      	beq.n	32576 <am_hal_pwrctrl_periph_enable+0xe6>
   32516:	f8df b108 	ldr.w	fp, [pc, #264]	; 32620 <am_hal_pwrctrl_periph_enable+0x190>
   3251a:	f89b 3000 	ldrb.w	r3, [fp]
   3251e:	bb53      	cbnz	r3, 32576 <am_hal_pwrctrl_periph_enable+0xe6>
   32520:	f7fd fc54 	bl	2fdcc <am_hal_interrupt_master_disable>
   32524:	4a3c      	ldr	r2, [pc, #240]	; (32618 <am_hal_pwrctrl_periph_enable+0x188>)
   32526:	493d      	ldr	r1, [pc, #244]	; (3261c <am_hal_pwrctrl_periph_enable+0x18c>)
   32528:	6813      	ldr	r3, [r2, #0]
   3252a:	9006      	str	r0, [sp, #24]
   3252c:	4453      	add	r3, sl
   3252e:	6013      	str	r3, [r2, #0]
   32530:	f383 0006 	usat	r0, #6, r3
   32534:	680b      	ldr	r3, [r1, #0]
   32536:	2201      	movs	r2, #1
   32538:	4453      	add	r3, sl
   3253a:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 32624 <am_hal_pwrctrl_periph_enable+0x194>
   3253e:	600b      	str	r3, [r1, #0]
   32540:	9303      	str	r3, [sp, #12]
   32542:	f88b 2000 	strb.w	r2, [fp]
   32546:	f8da 236c 	ldr.w	r2, [sl, #876]	; 0x36c
   3254a:	f360 5219 	bfi	r2, r0, #20, #6
   3254e:	f8ca 236c 	str.w	r2, [sl, #876]	; 0x36c
   32552:	4620      	mov	r0, r4
   32554:	f7fd ff62 	bl	3041c <am_hal_delay_us>
   32558:	9b03      	ldr	r3, [sp, #12]
   3255a:	f8da 2088 	ldr.w	r2, [sl, #136]	; 0x88
   3255e:	f383 0306 	usat	r3, #6, r3
   32562:	f363 0205 	bfi	r2, r3, #0, #6
   32566:	f8ca 2088 	str.w	r2, [sl, #136]	; 0x88
   3256a:	9806      	ldr	r0, [sp, #24]
   3256c:	f7fd fc32 	bl	2fdd4 <am_hal_interrupt_master_set>
   32570:	4620      	mov	r0, r4
   32572:	f7fd ff53 	bl	3041c <am_hal_delay_us>
   32576:	f7fd fc29 	bl	2fdcc <am_hal_interrupt_master_disable>
   3257a:	9005      	str	r0, [sp, #20]
   3257c:	683b      	ldr	r3, [r7, #0]
   3257e:	ea48 0303 	orr.w	r3, r8, r3
   32582:	603b      	str	r3, [r7, #0]
   32584:	9805      	ldr	r0, [sp, #20]
   32586:	f7fd fc25 	bl	2fdd4 <am_hal_interrupt_master_set>
   3258a:	2301      	movs	r3, #1
   3258c:	9300      	str	r3, [sp, #0]
   3258e:	462a      	mov	r2, r5
   32590:	462b      	mov	r3, r5
   32592:	4631      	mov	r1, r6
   32594:	2005      	movs	r0, #5
   32596:	f7fd ff85 	bl	304a4 <am_hal_delay_us_status_check>
   3259a:	4604      	mov	r4, r0
   3259c:	b378      	cbz	r0, 325fe <am_hal_pwrctrl_periph_enable+0x16e>
   3259e:	f8d9 5000 	ldr.w	r5, [r9]
   325a2:	2d00      	cmp	r5, #0
   325a4:	d0a2      	beq.n	324ec <am_hal_pwrctrl_periph_enable+0x5c>
   325a6:	4e1e      	ldr	r6, [pc, #120]	; (32620 <am_hal_pwrctrl_periph_enable+0x190>)
   325a8:	7833      	ldrb	r3, [r6, #0]
   325aa:	2b00      	cmp	r3, #0
   325ac:	d09e      	beq.n	324ec <am_hal_pwrctrl_periph_enable+0x5c>
   325ae:	f7fd fc0d 	bl	2fdcc <am_hal_interrupt_master_disable>
   325b2:	4b19      	ldr	r3, [pc, #100]	; (32618 <am_hal_pwrctrl_periph_enable+0x188>)
   325b4:	4f1b      	ldr	r7, [pc, #108]	; (32624 <am_hal_pwrctrl_periph_enable+0x194>)
   325b6:	9007      	str	r0, [sp, #28]
   325b8:	2200      	movs	r2, #0
   325ba:	7032      	strb	r2, [r6, #0]
   325bc:	681e      	ldr	r6, [r3, #0]
   325be:	4a17      	ldr	r2, [pc, #92]	; (3261c <am_hal_pwrctrl_periph_enable+0x18c>)
   325c0:	1b76      	subs	r6, r6, r5
   325c2:	601e      	str	r6, [r3, #0]
   325c4:	6813      	ldr	r3, [r2, #0]
   325c6:	1b5d      	subs	r5, r3, r5
   325c8:	6015      	str	r5, [r2, #0]
   325ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   325ce:	f385 0506 	usat	r5, #6, r5
   325d2:	f365 0305 	bfi	r3, r5, #0, #6
   325d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   325da:	2014      	movs	r0, #20
   325dc:	f7fd ff1e 	bl	3041c <am_hal_delay_us>
   325e0:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
   325e4:	f386 0606 	usat	r6, #6, r6
   325e8:	f366 5319 	bfi	r3, r6, #20, #6
   325ec:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
   325f0:	9807      	ldr	r0, [sp, #28]
   325f2:	f7fd fbef 	bl	2fdd4 <am_hal_interrupt_master_set>
   325f6:	2014      	movs	r0, #20
   325f8:	f7fd ff10 	bl	3041c <am_hal_delay_us>
   325fc:	e776      	b.n	324ec <am_hal_pwrctrl_periph_enable+0x5c>
   325fe:	2301      	movs	r3, #1
   32600:	4909      	ldr	r1, [pc, #36]	; (32628 <am_hal_pwrctrl_periph_enable+0x198>)
   32602:	461a      	mov	r2, r3
   32604:	2064      	movs	r0, #100	; 0x64
   32606:	f7fd ff21 	bl	3044c <am_hal_delay_us_status_change>
   3260a:	4604      	mov	r4, r0
   3260c:	2800      	cmp	r0, #0
   3260e:	f43f af68 	beq.w	324e2 <am_hal_pwrctrl_periph_enable+0x52>
   32612:	e76b      	b.n	324ec <am_hal_pwrctrl_periph_enable+0x5c>
   32614:	0004238c 	.word	0x0004238c
   32618:	1001a5fc 	.word	0x1001a5fc
   3261c:	1001a5f8 	.word	0x1001a5f8
   32620:	1001a5f4 	.word	0x1001a5f4
   32624:	40020000 	.word	0x40020000
   32628:	400c1f10 	.word	0x400c1f10
   3262c:	1001a61c 	.word	0x1001a61c

00032630 <am_hal_pwrctrl_periph_disable>:
   32630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32634:	2821      	cmp	r0, #33	; 0x21
   32636:	b085      	sub	sp, #20
   32638:	d82b      	bhi.n	32692 <am_hal_pwrctrl_periph_disable+0x62>
   3263a:	4b55      	ldr	r3, [pc, #340]	; (32790 <am_hal_pwrctrl_periph_disable+0x160>)
   3263c:	0101      	lsls	r1, r0, #4
   3263e:	eb03 1200 	add.w	r2, r3, r0, lsl #4
   32642:	585d      	ldr	r5, [r3, r1]
   32644:	6857      	ldr	r7, [r2, #4]
   32646:	682b      	ldr	r3, [r5, #0]
   32648:	423b      	tst	r3, r7
   3264a:	4604      	mov	r4, r0
   3264c:	d01c      	beq.n	32688 <am_hal_pwrctrl_periph_disable+0x58>
   3264e:	2814      	cmp	r0, #20
   32650:	e9d2 9802 	ldrd	r9, r8, [r2, #8]
   32654:	d105      	bne.n	32662 <am_hal_pwrctrl_periph_disable+0x32>
   32656:	f8df a150 	ldr.w	sl, [pc, #336]	; 327a8 <am_hal_pwrctrl_periph_disable+0x178>
   3265a:	f8da 3fe0 	ldr.w	r3, [sl, #4064]	; 0xfe0
   3265e:	2bc0      	cmp	r3, #192	; 0xc0
   32660:	d037      	beq.n	326d2 <am_hal_pwrctrl_periph_disable+0xa2>
   32662:	f7fd fbb3 	bl	2fdcc <am_hal_interrupt_master_disable>
   32666:	9002      	str	r0, [sp, #8]
   32668:	682b      	ldr	r3, [r5, #0]
   3266a:	ea23 0707 	bic.w	r7, r3, r7
   3266e:	602f      	str	r7, [r5, #0]
   32670:	9802      	ldr	r0, [sp, #8]
   32672:	f7fd fbaf 	bl	2fdd4 <am_hal_interrupt_master_set>
   32676:	2300      	movs	r3, #0
   32678:	9300      	str	r3, [sp, #0]
   3267a:	4642      	mov	r2, r8
   3267c:	4643      	mov	r3, r8
   3267e:	4649      	mov	r1, r9
   32680:	2005      	movs	r0, #5
   32682:	f7fd ff0f 	bl	304a4 <am_hal_delay_us_status_check>
   32686:	b948      	cbnz	r0, 3269c <am_hal_pwrctrl_periph_disable+0x6c>
   32688:	2600      	movs	r6, #0
   3268a:	4630      	mov	r0, r6
   3268c:	b005      	add	sp, #20
   3268e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32692:	2606      	movs	r6, #6
   32694:	4630      	mov	r0, r6
   32696:	b005      	add	sp, #20
   32698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3269c:	f5b8 7ff0 	cmp.w	r8, #480	; 0x1e0
   326a0:	d070      	beq.n	32784 <am_hal_pwrctrl_periph_disable+0x154>
   326a2:	d90b      	bls.n	326bc <am_hal_pwrctrl_periph_disable+0x8c>
   326a4:	f5b8 5ff0 	cmp.w	r8, #7680	; 0x1e00
   326a8:	d067      	beq.n	3277a <am_hal_pwrctrl_periph_disable+0x14a>
   326aa:	f5b8 3fe0 	cmp.w	r8, #114688	; 0x1c000
   326ae:	d1eb      	bne.n	32688 <am_hal_pwrctrl_periph_disable+0x58>
   326b0:	682b      	ldr	r3, [r5, #0]
   326b2:	f413 3fe0 	tst.w	r3, #114688	; 0x1c000
   326b6:	d0e7      	beq.n	32688 <am_hal_pwrctrl_periph_disable+0x58>
   326b8:	682b      	ldr	r3, [r5, #0]
   326ba:	e7e5      	b.n	32688 <am_hal_pwrctrl_periph_disable+0x58>
   326bc:	f1b8 0f1e 	cmp.w	r8, #30
   326c0:	d056      	beq.n	32770 <am_hal_pwrctrl_periph_disable+0x140>
   326c2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   326c6:	d1df      	bne.n	32688 <am_hal_pwrctrl_periph_disable+0x58>
   326c8:	682b      	ldr	r3, [r5, #0]
   326ca:	b2db      	uxtb	r3, r3
   326cc:	2b00      	cmp	r3, #0
   326ce:	d0db      	beq.n	32688 <am_hal_pwrctrl_periph_disable+0x58>
   326d0:	e7f2      	b.n	326b8 <am_hal_pwrctrl_periph_disable+0x88>
   326d2:	2301      	movs	r3, #1
   326d4:	492f      	ldr	r1, [pc, #188]	; (32794 <am_hal_pwrctrl_periph_disable+0x164>)
   326d6:	461a      	mov	r2, r3
   326d8:	2064      	movs	r0, #100	; 0x64
   326da:	f7fd feb7 	bl	3044c <am_hal_delay_us_status_change>
   326de:	4606      	mov	r6, r0
   326e0:	2800      	cmp	r0, #0
   326e2:	d1d2      	bne.n	3268a <am_hal_pwrctrl_periph_disable+0x5a>
   326e4:	2301      	movs	r3, #1
   326e6:	492c      	ldr	r1, [pc, #176]	; (32798 <am_hal_pwrctrl_periph_disable+0x168>)
   326e8:	461a      	mov	r2, r3
   326ea:	2064      	movs	r0, #100	; 0x64
   326ec:	f7fd feae 	bl	3044c <am_hal_delay_us_status_change>
   326f0:	4606      	mov	r6, r0
   326f2:	2800      	cmp	r0, #0
   326f4:	d1c9      	bne.n	3268a <am_hal_pwrctrl_periph_disable+0x5a>
   326f6:	f8da 3a80 	ldr.w	r3, [sl, #2688]	; 0xa80
   326fa:	f043 0301 	orr.w	r3, r3, #1
   326fe:	f8ca 3a80 	str.w	r3, [sl, #2688]	; 0xa80
   32702:	4b26      	ldr	r3, [pc, #152]	; (3279c <am_hal_pwrctrl_periph_disable+0x16c>)
   32704:	f8d3 a000 	ldr.w	sl, [r3]
   32708:	f1ba 0f00 	cmp.w	sl, #0
   3270c:	d0a9      	beq.n	32662 <am_hal_pwrctrl_periph_disable+0x32>
   3270e:	f8df b09c 	ldr.w	fp, [pc, #156]	; 327ac <am_hal_pwrctrl_periph_disable+0x17c>
   32712:	f89b 3000 	ldrb.w	r3, [fp]
   32716:	2b00      	cmp	r3, #0
   32718:	d0a3      	beq.n	32662 <am_hal_pwrctrl_periph_disable+0x32>
   3271a:	f7fd fb57 	bl	2fdcc <am_hal_interrupt_master_disable>
   3271e:	4b20      	ldr	r3, [pc, #128]	; (327a0 <am_hal_pwrctrl_periph_disable+0x170>)
   32720:	f88b 6000 	strb.w	r6, [fp]
   32724:	681e      	ldr	r6, [r3, #0]
   32726:	4a1f      	ldr	r2, [pc, #124]	; (327a4 <am_hal_pwrctrl_periph_disable+0x174>)
   32728:	9003      	str	r0, [sp, #12]
   3272a:	eba6 060a 	sub.w	r6, r6, sl
   3272e:	601e      	str	r6, [r3, #0]
   32730:	6813      	ldr	r3, [r2, #0]
   32732:	eba3 030a 	sub.w	r3, r3, sl
   32736:	f8df a078 	ldr.w	sl, [pc, #120]	; 327b0 <am_hal_pwrctrl_periph_disable+0x180>
   3273a:	6013      	str	r3, [r2, #0]
   3273c:	f8da 2088 	ldr.w	r2, [sl, #136]	; 0x88
   32740:	f383 0306 	usat	r3, #6, r3
   32744:	f363 0205 	bfi	r2, r3, #0, #6
   32748:	4620      	mov	r0, r4
   3274a:	f8ca 2088 	str.w	r2, [sl, #136]	; 0x88
   3274e:	f7fd fe65 	bl	3041c <am_hal_delay_us>
   32752:	f8da 336c 	ldr.w	r3, [sl, #876]	; 0x36c
   32756:	f386 0606 	usat	r6, #6, r6
   3275a:	f366 5319 	bfi	r3, r6, #20, #6
   3275e:	f8ca 336c 	str.w	r3, [sl, #876]	; 0x36c
   32762:	9803      	ldr	r0, [sp, #12]
   32764:	f7fd fb36 	bl	2fdd4 <am_hal_interrupt_master_set>
   32768:	4620      	mov	r0, r4
   3276a:	f7fd fe57 	bl	3041c <am_hal_delay_us>
   3276e:	e778      	b.n	32662 <am_hal_pwrctrl_periph_disable+0x32>
   32770:	682b      	ldr	r3, [r5, #0]
   32772:	f013 0f1e 	tst.w	r3, #30
   32776:	d087      	beq.n	32688 <am_hal_pwrctrl_periph_disable+0x58>
   32778:	e79e      	b.n	326b8 <am_hal_pwrctrl_periph_disable+0x88>
   3277a:	682b      	ldr	r3, [r5, #0]
   3277c:	f413 5ff0 	tst.w	r3, #7680	; 0x1e00
   32780:	d082      	beq.n	32688 <am_hal_pwrctrl_periph_disable+0x58>
   32782:	e799      	b.n	326b8 <am_hal_pwrctrl_periph_disable+0x88>
   32784:	682b      	ldr	r3, [r5, #0]
   32786:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
   3278a:	f43f af7d 	beq.w	32688 <am_hal_pwrctrl_periph_disable+0x58>
   3278e:	e793      	b.n	326b8 <am_hal_pwrctrl_periph_disable+0x88>
   32790:	0004238c 	.word	0x0004238c
   32794:	400c0a7c 	.word	0x400c0a7c
   32798:	400c1f10 	.word	0x400c1f10
   3279c:	1001a61c 	.word	0x1001a61c
   327a0:	1001a5fc 	.word	0x1001a5fc
   327a4:	1001a5f8 	.word	0x1001a5f8
   327a8:	400c0000 	.word	0x400c0000
   327ac:	1001a5f4 	.word	0x1001a5f4
   327b0:	40020000 	.word	0x40020000

000327b4 <am_hal_pwrctrl_low_power_init>:
   327b4:	b530      	push	{r4, r5, lr}
   327b6:	4c54      	ldr	r4, [pc, #336]	; (32908 <am_hal_pwrctrl_low_power_init+0x154>)
   327b8:	4a54      	ldr	r2, [pc, #336]	; (3290c <am_hal_pwrctrl_low_power_init+0x158>)
   327ba:	68a3      	ldr	r3, [r4, #8]
   327bc:	4854      	ldr	r0, [pc, #336]	; (32910 <am_hal_pwrctrl_low_power_init+0x15c>)
   327be:	b083      	sub	sp, #12
   327c0:	f04f 2540 	mov.w	r5, #1073758208	; 0x40004000
   327c4:	f3c3 5300 	ubfx	r3, r3, #20, #1
   327c8:	7013      	strb	r3, [r2, #0]
   327ca:	f7ff fc75 	bl	320b8 <am_hal_pwrctrl_mcu_memory_config>
   327ce:	4851      	ldr	r0, [pc, #324]	; (32914 <am_hal_pwrctrl_low_power_init+0x160>)
   327d0:	f7ff fd20 	bl	32214 <am_hal_pwrctrl_sram_config>
   327d4:	6c6a      	ldr	r2, [r5, #68]	; 0x44
   327d6:	4850      	ldr	r0, [pc, #320]	; (32918 <am_hal_pwrctrl_low_power_init+0x164>)
   327d8:	2300      	movs	r3, #0
   327da:	f442 027c 	orr.w	r2, r2, #16515072	; 0xfc0000
   327de:	646a      	str	r2, [r5, #68]	; 0x44
   327e0:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
   327e4:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
   327e8:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   327ec:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   327f0:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   327f4:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
   327f8:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
   327fc:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
   32800:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
   32804:	f8c4 3164 	str.w	r3, [r4, #356]	; 0x164
   32808:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
   3280c:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c
   32810:	f8c4 3170 	str.w	r3, [r4, #368]	; 0x170
   32814:	f8c4 3174 	str.w	r3, [r4, #372]	; 0x174
   32818:	f8c4 3178 	str.w	r3, [r4, #376]	; 0x178
   3281c:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
   32820:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
   32824:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
   32828:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
   3282c:	f7fd f8a0 	bl	2f970 <am_hal_daxi_config>
   32830:	2064      	movs	r0, #100	; 0x64
   32832:	f7fd fdf3 	bl	3041c <am_hal_delay_us>
   32836:	6c6a      	ldr	r2, [r5, #68]	; 0x44
   32838:	4b38      	ldr	r3, [pc, #224]	; (3291c <am_hal_pwrctrl_low_power_init+0x168>)
   3283a:	4c39      	ldr	r4, [pc, #228]	; (32920 <am_hal_pwrctrl_low_power_init+0x16c>)
   3283c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   32840:	646a      	str	r2, [r5, #68]	; 0x44
   32842:	f8d3 237c 	ldr.w	r2, [r3, #892]	; 0x37c
   32846:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
   3284a:	f442 22d0 	orr.w	r2, r2, #425984	; 0x68000
   3284e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
   32852:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   32856:	2104      	movs	r1, #4
   32858:	f361 220f 	bfi	r2, r1, #8, #8
   3285c:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   32860:	7822      	ldrb	r2, [r4, #0]
   32862:	b1da      	cbz	r2, 3289c <am_hal_pwrctrl_low_power_init+0xe8>
   32864:	4a2f      	ldr	r2, [pc, #188]	; (32924 <am_hal_pwrctrl_low_power_init+0x170>)
   32866:	4b30      	ldr	r3, [pc, #192]	; (32928 <am_hal_pwrctrl_low_power_init+0x174>)
   32868:	6810      	ldr	r0, [r2, #0]
   3286a:	6819      	ldr	r1, [r3, #0]
   3286c:	4b2f      	ldr	r3, [pc, #188]	; (3292c <am_hal_pwrctrl_low_power_init+0x178>)
   3286e:	4d30      	ldr	r5, [pc, #192]	; (32930 <am_hal_pwrctrl_low_power_init+0x17c>)
   32870:	4c30      	ldr	r4, [pc, #192]	; (32934 <am_hal_pwrctrl_low_power_init+0x180>)
   32872:	6018      	str	r0, [r3, #0]
   32874:	2201      	movs	r2, #1
   32876:	2300      	movs	r3, #0
   32878:	6029      	str	r1, [r5, #0]
   3287a:	6023      	str	r3, [r4, #0]
   3287c:	f44f 6192 	mov.w	r1, #1168	; 0x490
   32880:	ab01      	add	r3, sp, #4
   32882:	4610      	mov	r0, r2
   32884:	f7fd fce4 	bl	30250 <am_hal_mram_info_read>
   32888:	b928      	cbnz	r0, 32896 <am_hal_pwrctrl_low_power_init+0xe2>
   3288a:	9b01      	ldr	r3, [sp, #4]
   3288c:	f013 0f06 	tst.w	r3, #6
   32890:	d129      	bne.n	328e6 <am_hal_pwrctrl_low_power_init+0x132>
   32892:	2303      	movs	r3, #3
   32894:	6023      	str	r3, [r4, #0]
   32896:	2000      	movs	r0, #0
   32898:	b003      	add	sp, #12
   3289a:	bd30      	pop	{r4, r5, pc}
   3289c:	f8d3 036c 	ldr.w	r0, [r3, #876]	; 0x36c
   328a0:	4a20      	ldr	r2, [pc, #128]	; (32924 <am_hal_pwrctrl_low_power_init+0x170>)
   328a2:	4d25      	ldr	r5, [pc, #148]	; (32938 <am_hal_pwrctrl_low_power_init+0x184>)
   328a4:	f3c0 5005 	ubfx	r0, r0, #20, #6
   328a8:	6010      	str	r0, [r2, #0]
   328aa:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
   328ae:	4a1e      	ldr	r2, [pc, #120]	; (32928 <am_hal_pwrctrl_low_power_init+0x174>)
   328b0:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   328b4:	6011      	str	r1, [r2, #0]
   328b6:	f8d3 236c 	ldr.w	r2, [r3, #876]	; 0x36c
   328ba:	0e92      	lsrs	r2, r2, #26
   328bc:	602a      	str	r2, [r5, #0]
   328be:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   328c2:	4d1e      	ldr	r5, [pc, #120]	; (3293c <am_hal_pwrctrl_low_power_init+0x188>)
   328c4:	f3c2 4285 	ubfx	r2, r2, #18, #6
   328c8:	602a      	str	r2, [r5, #0]
   328ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   328cc:	4d1c      	ldr	r5, [pc, #112]	; (32940 <am_hal_pwrctrl_low_power_init+0x18c>)
   328ce:	f3c2 12c6 	ubfx	r2, r2, #7, #7
   328d2:	602a      	str	r2, [r5, #0]
   328d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   328d8:	4a1a      	ldr	r2, [pc, #104]	; (32944 <am_hal_pwrctrl_low_power_init+0x190>)
   328da:	f3c3 0309 	ubfx	r3, r3, #0, #10
   328de:	6013      	str	r3, [r2, #0]
   328e0:	2301      	movs	r3, #1
   328e2:	7023      	strb	r3, [r4, #0]
   328e4:	e7c2      	b.n	3286c <am_hal_pwrctrl_low_power_init+0xb8>
   328e6:	079a      	lsls	r2, r3, #30
   328e8:	d404      	bmi.n	328f4 <am_hal_pwrctrl_low_power_init+0x140>
   328ea:	2306      	movs	r3, #6
   328ec:	2000      	movs	r0, #0
   328ee:	6023      	str	r3, [r4, #0]
   328f0:	b003      	add	sp, #12
   328f2:	bd30      	pop	{r4, r5, pc}
   328f4:	075b      	lsls	r3, r3, #29
   328f6:	bf54      	ite	pl
   328f8:	2309      	movpl	r3, #9
   328fa:	6020      	strmi	r0, [r4, #0]
   328fc:	f04f 0000 	mov.w	r0, #0
   32900:	bf58      	it	pl
   32902:	6023      	strpl	r3, [r4, #0]
   32904:	b003      	add	sp, #12
   32906:	bd30      	pop	{r4, r5, pc}
   32908:	40021000 	.word	0x40021000
   3290c:	1001a5f4 	.word	0x1001a5f4
   32910:	000425ac 	.word	0x000425ac
   32914:	000425b4 	.word	0x000425b4
   32918:	0004236c 	.word	0x0004236c
   3291c:	40020000 	.word	0x40020000
   32920:	1001a5f5 	.word	0x1001a5f5
   32924:	1001a600 	.word	0x1001a600
   32928:	1001a60c 	.word	0x1001a60c
   3292c:	1001a5fc 	.word	0x1001a5fc
   32930:	1001a5f8 	.word	0x1001a5f8
   32934:	1001a61c 	.word	0x1001a61c
   32938:	1001a608 	.word	0x1001a608
   3293c:	1001a610 	.word	0x1001a610
   32940:	1001a614 	.word	0x1001a614
   32944:	1001a604 	.word	0x1001a604

00032948 <buck_ldo_update_override>:
   32948:	4b06      	ldr	r3, [pc, #24]	; (32964 <buck_ldo_update_override+0x1c>)
   3294a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   3294c:	f360 4210 	bfi	r2, r0, #16, #1
   32950:	661a      	str	r2, [r3, #96]	; 0x60
   32952:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   32954:	f360 0200 	bfi	r2, r0, #0, #1
   32958:	661a      	str	r2, [r3, #96]	; 0x60
   3295a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   3295c:	f360 1245 	bfi	r2, r0, #5, #1
   32960:	661a      	str	r2, [r3, #96]	; 0x60
   32962:	4770      	bx	lr
   32964:	40020000 	.word	0x40020000

00032968 <am_hal_pwrctrl_control>:
   32968:	2804      	cmp	r0, #4
   3296a:	f200 812b 	bhi.w	32bc4 <am_hal_pwrctrl_control+0x25c>
   3296e:	e8df f000 	tbb	[pc, r0]
   32972:	8c0b      	.short	0x8c0b
   32974:	a093      	.short	0xa093
   32976:	03          	.byte	0x03
   32977:	00          	.byte	0x00
   32978:	2900      	cmp	r1, #0
   3297a:	f000 8123 	beq.w	32bc4 <am_hal_pwrctrl_control+0x25c>
   3297e:	4b92      	ldr	r3, [pc, #584]	; (32bc8 <am_hal_pwrctrl_control+0x260>)
   32980:	681b      	ldr	r3, [r3, #0]
   32982:	600b      	str	r3, [r1, #0]
   32984:	2006      	movs	r0, #6
   32986:	4770      	bx	lr
   32988:	b510      	push	{r4, lr}
   3298a:	4c90      	ldr	r4, [pc, #576]	; (32bcc <am_hal_pwrctrl_control+0x264>)
   3298c:	6822      	ldr	r2, [r4, #0]
   3298e:	1c51      	adds	r1, r2, #1
   32990:	f000 8093 	beq.w	32aba <am_hal_pwrctrl_control+0x152>
   32994:	2a02      	cmp	r2, #2
   32996:	f240 809e 	bls.w	32ad6 <am_hal_pwrctrl_control+0x16e>
   3299a:	4b8d      	ldr	r3, [pc, #564]	; (32bd0 <am_hal_pwrctrl_control+0x268>)
   3299c:	4c8d      	ldr	r4, [pc, #564]	; (32bd4 <am_hal_pwrctrl_control+0x26c>)
   3299e:	f8d3 1348 	ldr.w	r1, [r3, #840]	; 0x348
   329a2:	200a      	movs	r0, #10
   329a4:	f360 619d 	bfi	r1, r0, #26, #4
   329a8:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
   329ac:	f8d3 1348 	ldr.w	r1, [r3, #840]	; 0x348
   329b0:	f360 3150 	bfi	r1, r0, #13, #4
   329b4:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
   329b8:	f8d3 135c 	ldr.w	r1, [r3, #860]	; 0x35c
   329bc:	f041 7170 	orr.w	r1, r1, #62914560	; 0x3c00000
   329c0:	f8c3 135c 	str.w	r1, [r3, #860]	; 0x35c
   329c4:	f8d3 135c 	ldr.w	r1, [r3, #860]	; 0x35c
   329c8:	f441 51f0 	orr.w	r1, r1, #7680	; 0x1e00
   329cc:	f8c3 135c 	str.w	r1, [r3, #860]	; 0x35c
   329d0:	f8d3 1380 	ldr.w	r1, [r3, #896]	; 0x380
   329d4:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
   329d8:	f8c3 1380 	str.w	r1, [r3, #896]	; 0x380
   329dc:	f8d3 1380 	ldr.w	r1, [r3, #896]	; 0x380
   329e0:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
   329e4:	f8c3 1380 	str.w	r1, [r3, #896]	; 0x380
   329e8:	f8d3 1370 	ldr.w	r1, [r3, #880]	; 0x370
   329ec:	f3c1 5105 	ubfx	r1, r1, #20, #6
   329f0:	6021      	str	r1, [r4, #0]
   329f2:	f8d3 1370 	ldr.w	r1, [r3, #880]	; 0x370
   329f6:	2007      	movs	r0, #7
   329f8:	f36f 5119 	bfc	r1, #20, #6
   329fc:	2a05      	cmp	r2, #5
   329fe:	f8c3 1370 	str.w	r1, [r3, #880]	; 0x370
   32a02:	f8c3 033c 	str.w	r0, [r3, #828]	; 0x33c
   32a06:	d908      	bls.n	32a1a <am_hal_pwrctrl_control+0xb2>
   32a08:	220f      	movs	r2, #15
   32a0a:	f8c3 233c 	str.w	r2, [r3, #828]	; 0x33c
   32a0e:	f8d3 21b0 	ldr.w	r2, [r3, #432]	; 0x1b0
   32a12:	f022 0218 	bic.w	r2, r2, #24
   32a16:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
   32a1a:	496f      	ldr	r1, [pc, #444]	; (32bd8 <am_hal_pwrctrl_control+0x270>)
   32a1c:	4b6c      	ldr	r3, [pc, #432]	; (32bd0 <am_hal_pwrctrl_control+0x268>)
   32a1e:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
   32a22:	f042 0201 	orr.w	r2, r2, #1
   32a26:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
   32a2a:	f8d3 2378 	ldr.w	r2, [r3, #888]	; 0x378
   32a2e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
   32a32:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
   32a36:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   32a38:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   32a3c:	661a      	str	r2, [r3, #96]	; 0x60
   32a3e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   32a40:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
   32a44:	661a      	str	r2, [r3, #96]	; 0x60
   32a46:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   32a48:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   32a4c:	661a      	str	r2, [r3, #96]	; 0x60
   32a4e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   32a50:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   32a54:	661a      	str	r2, [r3, #96]	; 0x60
   32a56:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   32a58:	f36f 1204 	bfc	r2, #4, #1
   32a5c:	661a      	str	r2, [r3, #96]	; 0x60
   32a5e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   32a60:	f042 020e 	orr.w	r2, r2, #14
   32a64:	661a      	str	r2, [r3, #96]	; 0x60
   32a66:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   32a68:	f042 0201 	orr.w	r2, r2, #1
   32a6c:	661a      	str	r2, [r3, #96]	; 0x60
   32a6e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   32a70:	f36f 2249 	bfc	r2, #9, #1
   32a74:	661a      	str	r2, [r3, #96]	; 0x60
   32a76:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   32a78:	f442 72e0 	orr.w	r2, r2, #448	; 0x1c0
   32a7c:	661a      	str	r2, [r3, #96]	; 0x60
   32a7e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   32a80:	f042 0220 	orr.w	r2, r2, #32
   32a84:	661a      	str	r2, [r3, #96]	; 0x60
   32a86:	2000      	movs	r0, #0
   32a88:	bd10      	pop	{r4, pc}
   32a8a:	4b53      	ldr	r3, [pc, #332]	; (32bd8 <am_hal_pwrctrl_control+0x270>)
   32a8c:	6898      	ldr	r0, [r3, #8]
   32a8e:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
   32a92:	f040 8094 	bne.w	32bbe <am_hal_pwrctrl_control+0x256>
   32a96:	4770      	bx	lr
   32a98:	4b4d      	ldr	r3, [pc, #308]	; (32bd0 <am_hal_pwrctrl_control+0x268>)
   32a9a:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   32a9e:	2020      	movs	r0, #32
   32aa0:	f360 0287 	bfi	r2, r0, #2, #6
   32aa4:	2101      	movs	r1, #1
   32aa6:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   32aaa:	2000      	movs	r0, #0
   32aac:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   32ab0:	4770      	bx	lr
   32ab2:	4b49      	ldr	r3, [pc, #292]	; (32bd8 <am_hal_pwrctrl_control+0x270>)
   32ab4:	2000      	movs	r0, #0
   32ab6:	6058      	str	r0, [r3, #4]
   32ab8:	4770      	bx	lr
   32aba:	2201      	movs	r2, #1
   32abc:	4623      	mov	r3, r4
   32abe:	f240 41c4 	movw	r1, #1220	; 0x4c4
   32ac2:	4610      	mov	r0, r2
   32ac4:	f7fd fbc4 	bl	30250 <am_hal_mram_info_read>
   32ac8:	b918      	cbnz	r0, 32ad2 <am_hal_pwrctrl_control+0x16a>
   32aca:	6822      	ldr	r2, [r4, #0]
   32acc:	1c53      	adds	r3, r2, #1
   32ace:	f47f af61 	bne.w	32994 <am_hal_pwrctrl_control+0x2c>
   32ad2:	2300      	movs	r3, #0
   32ad4:	6023      	str	r3, [r4, #0]
   32ad6:	4b3e      	ldr	r3, [pc, #248]	; (32bd0 <am_hal_pwrctrl_control+0x268>)
   32ad8:	483e      	ldr	r0, [pc, #248]	; (32bd4 <am_hal_pwrctrl_control+0x26c>)
   32ada:	f8d3 1378 	ldr.w	r1, [r3, #888]	; 0x378
   32ade:	f36f 611c 	bfc	r1, #24, #5
   32ae2:	f8c3 1378 	str.w	r1, [r3, #888]	; 0x378
   32ae6:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   32aea:	f36f 4196 	bfc	r1, #18, #5
   32aee:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
   32af2:	f8d3 1344 	ldr.w	r1, [r3, #836]	; 0x344
   32af6:	220a      	movs	r2, #10
   32af8:	f362 611c 	bfi	r1, r2, #24, #5
   32afc:	f8c3 1344 	str.w	r1, [r3, #836]	; 0x344
   32b00:	f8d3 1344 	ldr.w	r1, [r3, #836]	; 0x344
   32b04:	f362 21ce 	bfi	r1, r2, #11, #4
   32b08:	f8c3 1344 	str.w	r1, [r3, #836]	; 0x344
   32b0c:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   32b10:	240f      	movs	r4, #15
   32b12:	f364 210c 	bfi	r1, r4, #8, #5
   32b16:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
   32b1a:	f8d3 1354 	ldr.w	r1, [r3, #852]	; 0x354
   32b1e:	f441 11f0 	orr.w	r1, r1, #1966080	; 0x1e0000
   32b22:	f8c3 1354 	str.w	r1, [r3, #852]	; 0x354
   32b26:	f8d3 1360 	ldr.w	r1, [r3, #864]	; 0x360
   32b2a:	f364 519a 	bfi	r1, r4, #22, #5
   32b2e:	f8c3 1360 	str.w	r1, [r3, #864]	; 0x360
   32b32:	f8d3 1360 	ldr.w	r1, [r3, #864]	; 0x360
   32b36:	f441 11f0 	orr.w	r1, r1, #1966080	; 0x1e0000
   32b3a:	f8c3 1360 	str.w	r1, [r3, #864]	; 0x360
   32b3e:	f8d3 1348 	ldr.w	r1, [r3, #840]	; 0x348
   32b42:	f362 619d 	bfi	r1, r2, #26, #4
   32b46:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
   32b4a:	f8d3 1348 	ldr.w	r1, [r3, #840]	; 0x348
   32b4e:	f362 3150 	bfi	r1, r2, #13, #4
   32b52:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
   32b56:	f8d3 235c 	ldr.w	r2, [r3, #860]	; 0x35c
   32b5a:	f042 7270 	orr.w	r2, r2, #62914560	; 0x3c00000
   32b5e:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
   32b62:	f8d3 235c 	ldr.w	r2, [r3, #860]	; 0x35c
   32b66:	f442 52f0 	orr.w	r2, r2, #7680	; 0x1e00
   32b6a:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
   32b6e:	f8d3 2380 	ldr.w	r2, [r3, #896]	; 0x380
   32b72:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
   32b76:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
   32b7a:	f8d3 2380 	ldr.w	r2, [r3, #896]	; 0x380
   32b7e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
   32b82:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
   32b86:	f8d3 2370 	ldr.w	r2, [r3, #880]	; 0x370
   32b8a:	f3c2 5205 	ubfx	r2, r2, #20, #6
   32b8e:	6002      	str	r2, [r0, #0]
   32b90:	f8d3 2370 	ldr.w	r2, [r3, #880]	; 0x370
   32b94:	2407      	movs	r4, #7
   32b96:	f36f 5219 	bfc	r2, #20, #6
   32b9a:	f8c3 2370 	str.w	r2, [r3, #880]	; 0x370
   32b9e:	f8c3 433c 	str.w	r4, [r3, #828]	; 0x33c
   32ba2:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
   32ba6:	f36f 5299 	bfc	r2, #22, #4
   32baa:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
   32bae:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
   32bb2:	2101      	movs	r1, #1
   32bb4:	f361 128a 	bfi	r2, r1, #6, #5
   32bb8:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
   32bbc:	e72d      	b.n	32a1a <am_hal_pwrctrl_control+0xb2>
   32bbe:	2014      	movs	r0, #20
   32bc0:	f7ff bd36 	b.w	32630 <am_hal_pwrctrl_periph_disable>
   32bc4:	2006      	movs	r0, #6
   32bc6:	4770      	bx	lr
   32bc8:	1001a618 	.word	0x1001a618
   32bcc:	10004a9c 	.word	0x10004a9c
   32bd0:	40020000 	.word	0x40020000
   32bd4:	10004aa0 	.word	0x10004aa0
   32bd8:	40021000 	.word	0x40021000

00032bdc <am_hal_pwrctrl_tempco_init>:
   32bdc:	b570      	push	{r4, r5, r6, lr}
   32bde:	b086      	sub	sp, #24
   32be0:	460c      	mov	r4, r1
   32be2:	4605      	mov	r5, r0
   32be4:	ab03      	add	r3, sp, #12
   32be6:	2203      	movs	r2, #3
   32be8:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
   32bec:	2001      	movs	r0, #1
   32bee:	f7fd fb2f 	bl	30250 <am_hal_mram_info_read>
   32bf2:	bb08      	cbnz	r0, 32c38 <am_hal_pwrctrl_tempco_init+0x5c>
   32bf4:	9b03      	ldr	r3, [sp, #12]
   32bf6:	3301      	adds	r3, #1
   32bf8:	d01e      	beq.n	32c38 <am_hal_pwrctrl_tempco_init+0x5c>
   32bfa:	9b04      	ldr	r3, [sp, #16]
   32bfc:	3301      	adds	r3, #1
   32bfe:	d01b      	beq.n	32c38 <am_hal_pwrctrl_tempco_init+0x5c>
   32c00:	9b05      	ldr	r3, [sp, #20]
   32c02:	3301      	adds	r3, #1
   32c04:	d018      	beq.n	32c38 <am_hal_pwrctrl_tempco_init+0x5c>
   32c06:	4e19      	ldr	r6, [pc, #100]	; (32c6c <am_hal_pwrctrl_tempco_init+0x90>)
   32c08:	6832      	ldr	r2, [r6, #0]
   32c0a:	1c51      	adds	r1, r2, #1
   32c0c:	d01a      	beq.n	32c44 <am_hal_pwrctrl_tempco_init+0x68>
   32c0e:	2a05      	cmp	r2, #5
   32c10:	d922      	bls.n	32c58 <am_hal_pwrctrl_tempco_init+0x7c>
   32c12:	4a17      	ldr	r2, [pc, #92]	; (32c70 <am_hal_pwrctrl_tempco_init+0x94>)
   32c14:	4817      	ldr	r0, [pc, #92]	; (32c74 <am_hal_pwrctrl_tempco_init+0x98>)
   32c16:	4b18      	ldr	r3, [pc, #96]	; (32c78 <am_hal_pwrctrl_tempco_init+0x9c>)
   32c18:	6005      	str	r5, [r0, #0]
   32c1a:	2101      	movs	r1, #1
   32c1c:	7011      	strb	r1, [r2, #0]
   32c1e:	2200      	movs	r2, #0
   32c20:	4621      	mov	r1, r4
   32c22:	f88d 2000 	strb.w	r2, [sp]
   32c26:	4628      	mov	r0, r5
   32c28:	2420      	movs	r4, #32
   32c2a:	466a      	mov	r2, sp
   32c2c:	e9cd 4301 	strd	r4, r3, [sp, #4]
   32c30:	f7fd fd76 	bl	30720 <am_hal_adc_configure_slot>
   32c34:	b006      	add	sp, #24
   32c36:	bd70      	pop	{r4, r5, r6, pc}
   32c38:	4b0d      	ldr	r3, [pc, #52]	; (32c70 <am_hal_pwrctrl_tempco_init+0x94>)
   32c3a:	2200      	movs	r2, #0
   32c3c:	2009      	movs	r0, #9
   32c3e:	701a      	strb	r2, [r3, #0]
   32c40:	b006      	add	sp, #24
   32c42:	bd70      	pop	{r4, r5, r6, pc}
   32c44:	2201      	movs	r2, #1
   32c46:	4633      	mov	r3, r6
   32c48:	f240 41c4 	movw	r1, #1220	; 0x4c4
   32c4c:	4610      	mov	r0, r2
   32c4e:	f7fd faff 	bl	30250 <am_hal_mram_info_read>
   32c52:	b138      	cbz	r0, 32c64 <am_hal_pwrctrl_tempco_init+0x88>
   32c54:	2300      	movs	r3, #0
   32c56:	6033      	str	r3, [r6, #0]
   32c58:	4b05      	ldr	r3, [pc, #20]	; (32c70 <am_hal_pwrctrl_tempco_init+0x94>)
   32c5a:	2200      	movs	r2, #0
   32c5c:	2001      	movs	r0, #1
   32c5e:	701a      	strb	r2, [r3, #0]
   32c60:	b006      	add	sp, #24
   32c62:	bd70      	pop	{r4, r5, r6, pc}
   32c64:	6832      	ldr	r2, [r6, #0]
   32c66:	1c53      	adds	r3, r2, #1
   32c68:	d1d1      	bne.n	32c0e <am_hal_pwrctrl_tempco_init+0x32>
   32c6a:	e7f3      	b.n	32c54 <am_hal_pwrctrl_tempco_init+0x78>
   32c6c:	10004a9c 	.word	0x10004a9c
   32c70:	1001a5f6 	.word	0x1001a5f6
   32c74:	1001a5f0 	.word	0x1001a5f0
   32c78:	01000800 	.word	0x01000800

00032c7c <am_hal_pwrctrl_tempco_sample_handler>:
   32c7c:	b530      	push	{r4, r5, lr}
   32c7e:	4b60      	ldr	r3, [pc, #384]	; (32e00 <am_hal_pwrctrl_tempco_sample_handler+0x184>)
   32c80:	781b      	ldrb	r3, [r3, #0]
   32c82:	b085      	sub	sp, #20
   32c84:	b10b      	cbz	r3, 32c8a <am_hal_pwrctrl_tempco_sample_handler+0xe>
   32c86:	2804      	cmp	r0, #4
   32c88:	d803      	bhi.n	32c92 <am_hal_pwrctrl_tempco_sample_handler+0x16>
   32c8a:	2401      	movs	r4, #1
   32c8c:	4620      	mov	r0, r4
   32c8e:	b005      	add	sp, #20
   32c90:	bd30      	pop	{r4, r5, pc}
   32c92:	680a      	ldr	r2, [r1, #0]
   32c94:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
   32c98:	2300      	movs	r3, #0
   32c9a:	3301      	adds	r3, #1
   32c9c:	4694      	mov	ip, r2
   32c9e:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
   32ca2:	4562      	cmp	r2, ip
   32ca4:	d10d      	bne.n	32cc2 <am_hal_pwrctrl_tempco_sample_handler+0x46>
   32ca6:	4573      	cmp	r3, lr
   32ca8:	d1f7      	bne.n	32c9a <am_hal_pwrctrl_tempco_sample_handler+0x1e>
   32caa:	4b56      	ldr	r3, [pc, #344]	; (32e04 <am_hal_pwrctrl_tempco_sample_handler+0x188>)
   32cac:	781b      	ldrb	r3, [r3, #0]
   32cae:	2b00      	cmp	r3, #0
   32cb0:	d0eb      	beq.n	32c8a <am_hal_pwrctrl_tempco_sample_handler+0xe>
   32cb2:	2300      	movs	r3, #0
   32cb4:	2208      	movs	r2, #8
   32cb6:	4619      	mov	r1, r3
   32cb8:	4618      	mov	r0, r3
   32cba:	f7ff f927 	bl	31f0c <tempco_set_trims.part.0>
   32cbe:	2401      	movs	r4, #1
   32cc0:	e7e4      	b.n	32c8c <am_hal_pwrctrl_tempco_sample_handler+0x10>
   32cc2:	ed9f 7a51 	vldr	s14, [pc, #324]	; 32e08 <am_hal_pwrctrl_tempco_sample_handler+0x18c>
   32cc6:	ed9f 6a51 	vldr	s12, [pc, #324]	; 32e0c <am_hal_pwrctrl_tempco_sample_handler+0x190>
   32cca:	eddf 6a51 	vldr	s13, [pc, #324]	; 32e10 <am_hal_pwrctrl_tempco_sample_handler+0x194>
   32cce:	2200      	movs	r2, #0
   32cd0:	f851 3032 	ldr.w	r3, [r1, r2, lsl #3]
   32cd4:	f3c3 138d 	ubfx	r3, r3, #6, #14
   32cd8:	ee07 3a90 	vmov	s15, r3
   32cdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
   32ce0:	3201      	adds	r2, #1
   32ce2:	ee67 7a86 	vmul.f32	s15, s15, s12
   32ce6:	4290      	cmp	r0, r2
   32ce8:	ee67 7aa6 	vmul.f32	s15, s15, s13
   32cec:	ee37 7a27 	vadd.f32	s14, s14, s15
   32cf0:	d1ee      	bne.n	32cd0 <am_hal_pwrctrl_tempco_sample_handler+0x54>
   32cf2:	ee07 0a90 	vmov	s15, r0
   32cf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   32cfa:	4a46      	ldr	r2, [pc, #280]	; (32e14 <am_hal_pwrctrl_tempco_sample_handler+0x198>)
   32cfc:	4b46      	ldr	r3, [pc, #280]	; (32e18 <am_hal_pwrctrl_tempco_sample_handler+0x19c>)
   32cfe:	6810      	ldr	r0, [r2, #0]
   32d00:	9303      	str	r3, [sp, #12]
   32d02:	eec7 6a27 	vdiv.f32	s13, s14, s15
   32d06:	2400      	movs	r4, #0
   32d08:	aa01      	add	r2, sp, #4
   32d0a:	2101      	movs	r1, #1
   32d0c:	9402      	str	r4, [sp, #8]
   32d0e:	edcd 6a01 	vstr	s13, [sp, #4]
   32d12:	f7fd fd49 	bl	307a8 <am_hal_adc_control>
   32d16:	4604      	mov	r4, r0
   32d18:	2800      	cmp	r0, #0
   32d1a:	d14e      	bne.n	32dba <am_hal_pwrctrl_tempco_sample_handler+0x13e>
   32d1c:	eddd 7a02 	vldr	s15, [sp, #8]
   32d20:	4b3e      	ldr	r3, [pc, #248]	; (32e1c <am_hal_pwrctrl_tempco_sample_handler+0x1a0>)
   32d22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   32d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   32d2a:	edc3 7a00 	vstr	s15, [r3]
   32d2e:	d452      	bmi.n	32dd6 <am_hal_pwrctrl_tempco_sample_handler+0x15a>
   32d30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   32d34:	ee17 3a90 	vmov	r3, s15
   32d38:	3b03      	subs	r3, #3
   32d3a:	b25b      	sxtb	r3, r3
   32d3c:	f113 0f14 	cmn.w	r3, #20
   32d40:	db4f      	blt.n	32de2 <am_hal_pwrctrl_tempco_sample_handler+0x166>
   32d42:	4a37      	ldr	r2, [pc, #220]	; (32e20 <am_hal_pwrctrl_tempco_sample_handler+0x1a4>)
   32d44:	e003      	b.n	32d4e <am_hal_pwrctrl_tempco_sample_handler+0xd2>
   32d46:	f912 1f03 	ldrsb.w	r1, [r2, #3]!
   32d4a:	297f      	cmp	r1, #127	; 0x7f
   32d4c:	d04e      	beq.n	32dec <am_hal_pwrctrl_tempco_sample_handler+0x170>
   32d4e:	f992 1001 	ldrsb.w	r1, [r2, #1]
   32d52:	4299      	cmp	r1, r3
   32d54:	dbf7      	blt.n	32d46 <am_hal_pwrctrl_tempco_sample_handler+0xca>
   32d56:	f992 0002 	ldrsb.w	r0, [r2, #2]
   32d5a:	4a32      	ldr	r2, [pc, #200]	; (32e24 <am_hal_pwrctrl_tempco_sample_handler+0x1a8>)
   32d5c:	e003      	b.n	32d66 <am_hal_pwrctrl_tempco_sample_handler+0xea>
   32d5e:	f912 1f03 	ldrsb.w	r1, [r2, #3]!
   32d62:	297f      	cmp	r1, #127	; 0x7f
   32d64:	d044      	beq.n	32df0 <am_hal_pwrctrl_tempco_sample_handler+0x174>
   32d66:	f992 1001 	ldrsb.w	r1, [r2, #1]
   32d6a:	4299      	cmp	r1, r3
   32d6c:	dbf7      	blt.n	32d5e <am_hal_pwrctrl_tempco_sample_handler+0xe2>
   32d6e:	f992 1002 	ldrsb.w	r1, [r2, #2]
   32d72:	f113 0f12 	cmn.w	r3, #18
   32d76:	db41      	blt.n	32dfc <am_hal_pwrctrl_tempco_sample_handler+0x180>
   32d78:	4a2b      	ldr	r2, [pc, #172]	; (32e28 <am_hal_pwrctrl_tempco_sample_handler+0x1ac>)
   32d7a:	e003      	b.n	32d84 <am_hal_pwrctrl_tempco_sample_handler+0x108>
   32d7c:	f912 5f03 	ldrsb.w	r5, [r2, #3]!
   32d80:	2d7f      	cmp	r5, #127	; 0x7f
   32d82:	d037      	beq.n	32df4 <am_hal_pwrctrl_tempco_sample_handler+0x178>
   32d84:	f992 5001 	ldrsb.w	r5, [r2, #1]
   32d88:	429d      	cmp	r5, r3
   32d8a:	dbf7      	blt.n	32d7c <am_hal_pwrctrl_tempco_sample_handler+0x100>
   32d8c:	f992 2002 	ldrsb.w	r2, [r2, #2]
   32d90:	4d26      	ldr	r5, [pc, #152]	; (32e2c <am_hal_pwrctrl_tempco_sample_handler+0x1b0>)
   32d92:	e004      	b.n	32d9e <am_hal_pwrctrl_tempco_sample_handler+0x122>
   32d94:	f915 cf03 	ldrsb.w	ip, [r5, #3]!
   32d98:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   32d9c:	d02c      	beq.n	32df8 <am_hal_pwrctrl_tempco_sample_handler+0x17c>
   32d9e:	f995 c001 	ldrsb.w	ip, [r5, #1]
   32da2:	459c      	cmp	ip, r3
   32da4:	dbf6      	blt.n	32d94 <am_hal_pwrctrl_tempco_sample_handler+0x118>
   32da6:	f995 3002 	ldrsb.w	r3, [r5, #2]
   32daa:	4d16      	ldr	r5, [pc, #88]	; (32e04 <am_hal_pwrctrl_tempco_sample_handler+0x188>)
   32dac:	782d      	ldrb	r5, [r5, #0]
   32dae:	2d00      	cmp	r5, #0
   32db0:	f43f af6c 	beq.w	32c8c <am_hal_pwrctrl_tempco_sample_handler+0x10>
   32db4:	f7ff f8aa 	bl	31f0c <tempco_set_trims.part.0>
   32db8:	e768      	b.n	32c8c <am_hal_pwrctrl_tempco_sample_handler+0x10>
   32dba:	4b12      	ldr	r3, [pc, #72]	; (32e04 <am_hal_pwrctrl_tempco_sample_handler+0x188>)
   32dbc:	781b      	ldrb	r3, [r3, #0]
   32dbe:	b91b      	cbnz	r3, 32dc8 <am_hal_pwrctrl_tempco_sample_handler+0x14c>
   32dc0:	4b16      	ldr	r3, [pc, #88]	; (32e1c <am_hal_pwrctrl_tempco_sample_handler+0x1a0>)
   32dc2:	2200      	movs	r2, #0
   32dc4:	601a      	str	r2, [r3, #0]
   32dc6:	e761      	b.n	32c8c <am_hal_pwrctrl_tempco_sample_handler+0x10>
   32dc8:	2300      	movs	r3, #0
   32dca:	461a      	mov	r2, r3
   32dcc:	4619      	mov	r1, r3
   32dce:	4618      	mov	r0, r3
   32dd0:	f7ff f89c 	bl	31f0c <tempco_set_trims.part.0>
   32dd4:	e7f4      	b.n	32dc0 <am_hal_pwrctrl_tempco_sample_handler+0x144>
   32dd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   32dda:	ee17 3a90 	vmov	r3, s15
   32dde:	3b01      	subs	r3, #1
   32de0:	e7aa      	b.n	32d38 <am_hal_pwrctrl_tempco_sample_handler+0xbc>
   32de2:	2300      	movs	r3, #0
   32de4:	2208      	movs	r2, #8
   32de6:	4619      	mov	r1, r3
   32de8:	4618      	mov	r0, r3
   32dea:	e7de      	b.n	32daa <am_hal_pwrctrl_tempco_sample_handler+0x12e>
   32dec:	2000      	movs	r0, #0
   32dee:	e7b4      	b.n	32d5a <am_hal_pwrctrl_tempco_sample_handler+0xde>
   32df0:	2100      	movs	r1, #0
   32df2:	e7be      	b.n	32d72 <am_hal_pwrctrl_tempco_sample_handler+0xf6>
   32df4:	2200      	movs	r2, #0
   32df6:	e7cb      	b.n	32d90 <am_hal_pwrctrl_tempco_sample_handler+0x114>
   32df8:	2300      	movs	r3, #0
   32dfa:	e7d6      	b.n	32daa <am_hal_pwrctrl_tempco_sample_handler+0x12e>
   32dfc:	2208      	movs	r2, #8
   32dfe:	e7c7      	b.n	32d90 <am_hal_pwrctrl_tempco_sample_handler+0x114>
   32e00:	1001a5f6 	.word	0x1001a5f6
   32e04:	1001a5f5 	.word	0x1001a5f5
   32e08:	00000000 	.word	0x00000000
   32e0c:	3f9851ec 	.word	0x3f9851ec
   32e10:	39800000 	.word	0x39800000
   32e14:	1001a5f0 	.word	0x1001a5f0
   32e18:	c2f6e979 	.word	0xc2f6e979
   32e1c:	1001a618 	.word	0x1001a618
   32e20:	000425ec 	.word	0x000425ec
   32e24:	000425c8 	.word	0x000425c8
   32e28:	00042610 	.word	0x00042610
   32e2c:	000425bc 	.word	0x000425bc

00032e30 <am_hal_stimer_counter_get>:
   32e30:	b500      	push	{lr}
   32e32:	b085      	sub	sp, #20
   32e34:	4805      	ldr	r0, [pc, #20]	; (32e4c <am_hal_stimer_counter_get+0x1c>)
   32e36:	a901      	add	r1, sp, #4
   32e38:	f000 f93a 	bl	330b0 <am_hal_triple_read>
   32e3c:	e9dd 3001 	ldrd	r3, r0, [sp, #4]
   32e40:	4283      	cmp	r3, r0
   32e42:	bf18      	it	ne
   32e44:	9803      	ldrne	r0, [sp, #12]
   32e46:	b005      	add	sp, #20
   32e48:	f85d fb04 	ldr.w	pc, [sp], #4
   32e4c:	40008804 	.word	0x40008804

00032e50 <am_hal_stimer_compare_delta_set>:
   32e50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   32e54:	b085      	sub	sp, #20
   32e56:	4604      	mov	r4, r0
   32e58:	460d      	mov	r5, r1
   32e5a:	4831      	ldr	r0, [pc, #196]	; (32f20 <am_hal_stimer_compare_delta_set+0xd0>)
   32e5c:	a901      	add	r1, sp, #4
   32e5e:	f000 f927 	bl	330b0 <am_hal_triple_read>
   32e62:	e9dd 3601 	ldrd	r3, r6, [sp, #4]
   32e66:	42b3      	cmp	r3, r6
   32e68:	bf18      	it	ne
   32e6a:	9e03      	ldrne	r6, [sp, #12]
   32e6c:	2c07      	cmp	r4, #7
   32e6e:	d852      	bhi.n	32f16 <am_hal_stimer_compare_delta_set+0xc6>
   32e70:	4a2c      	ldr	r2, [pc, #176]	; (32f24 <am_hal_stimer_compare_delta_set+0xd4>)
   32e72:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 32f2c <am_hal_stimer_compare_delta_set+0xdc>
   32e76:	6817      	ldr	r7, [r2, #0]
   32e78:	6811      	ldr	r1, [r2, #0]
   32e7a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 32f20 <am_hal_stimer_compare_delta_set+0xd0>
   32e7e:	f44f 7380 	mov.w	r3, #256	; 0x100
   32e82:	40a3      	lsls	r3, r4
   32e84:	401f      	ands	r7, r3
   32e86:	ea21 0303 	bic.w	r3, r1, r3
   32e8a:	6013      	str	r3, [r2, #0]
   32e8c:	4633      	mov	r3, r6
   32e8e:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   32e92:	429a      	cmp	r2, r3
   32e94:	a901      	add	r1, sp, #4
   32e96:	4648      	mov	r0, r9
   32e98:	f102 0c01 	add.w	ip, r2, #1
   32e9c:	d001      	beq.n	32ea2 <am_hal_stimer_compare_delta_set+0x52>
   32e9e:	459c      	cmp	ip, r3
   32ea0:	d107      	bne.n	32eb2 <am_hal_stimer_compare_delta_set+0x62>
   32ea2:	f000 f905 	bl	330b0 <am_hal_triple_read>
   32ea6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   32eaa:	429a      	cmp	r2, r3
   32eac:	d0ef      	beq.n	32e8e <am_hal_stimer_compare_delta_set+0x3e>
   32eae:	9b03      	ldr	r3, [sp, #12]
   32eb0:	e7ed      	b.n	32e8e <am_hal_stimer_compare_delta_set+0x3e>
   32eb2:	f7fc ff8b 	bl	2fdcc <am_hal_interrupt_master_disable>
   32eb6:	a901      	add	r1, sp, #4
   32eb8:	9000      	str	r0, [sp, #0]
   32eba:	4819      	ldr	r0, [pc, #100]	; (32f20 <am_hal_stimer_compare_delta_set+0xd0>)
   32ebc:	f000 f8f8 	bl	330b0 <am_hal_triple_read>
   32ec0:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   32ec4:	429a      	cmp	r2, r3
   32ec6:	bf18      	it	ne
   32ec8:	9b03      	ldrne	r3, [sp, #12]
   32eca:	f1c6 0203 	rsb	r2, r6, #3
   32ece:	441a      	add	r2, r3
   32ed0:	42aa      	cmp	r2, r5
   32ed2:	d31b      	bcc.n	32f0c <am_hal_stimer_compare_delta_set+0xbc>
   32ed4:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   32ed8:	2601      	movs	r6, #1
   32eda:	4b13      	ldr	r3, [pc, #76]	; (32f28 <am_hal_stimer_compare_delta_set+0xd8>)
   32edc:	4a11      	ldr	r2, [pc, #68]	; (32f24 <am_hal_stimer_compare_delta_set+0xd4>)
   32ede:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
   32ee2:	6813      	ldr	r3, [r2, #0]
   32ee4:	480e      	ldr	r0, [pc, #56]	; (32f20 <am_hal_stimer_compare_delta_set+0xd0>)
   32ee6:	431f      	orrs	r7, r3
   32ee8:	a901      	add	r1, sp, #4
   32eea:	6017      	str	r7, [r2, #0]
   32eec:	f000 f8e0 	bl	330b0 <am_hal_triple_read>
   32ef0:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   32ef4:	429a      	cmp	r2, r3
   32ef6:	bf18      	it	ne
   32ef8:	9b03      	ldrne	r3, [sp, #12]
   32efa:	9800      	ldr	r0, [sp, #0]
   32efc:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
   32f00:	f7fc ff68 	bl	2fdd4 <am_hal_interrupt_master_set>
   32f04:	4628      	mov	r0, r5
   32f06:	b005      	add	sp, #20
   32f08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   32f0c:	3d03      	subs	r5, #3
   32f0e:	442e      	add	r6, r5
   32f10:	1af6      	subs	r6, r6, r3
   32f12:	2500      	movs	r5, #0
   32f14:	e7e1      	b.n	32eda <am_hal_stimer_compare_delta_set+0x8a>
   32f16:	2505      	movs	r5, #5
   32f18:	4628      	mov	r0, r5
   32f1a:	b005      	add	sp, #20
   32f1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   32f20:	40008804 	.word	0x40008804
   32f24:	40008800 	.word	0x40008800
   32f28:	40008820 	.word	0x40008820
   32f2c:	10004aa4 	.word	0x10004aa4

00032f30 <am_hal_stimer_int_clear>:
   32f30:	4b01      	ldr	r3, [pc, #4]	; (32f38 <am_hal_stimer_int_clear+0x8>)
   32f32:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
   32f36:	4770      	bx	lr
   32f38:	40008800 	.word	0x40008800

00032f3c <am_hal_stimer_int_status_get>:
   32f3c:	4a04      	ldr	r2, [pc, #16]	; (32f50 <am_hal_stimer_int_status_get+0x14>)
   32f3e:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   32f42:	b110      	cbz	r0, 32f4a <am_hal_stimer_int_status_get+0xe>
   32f44:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
   32f48:	4013      	ands	r3, r2
   32f4a:	4618      	mov	r0, r3
   32f4c:	4770      	bx	lr
   32f4e:	bf00      	nop
   32f50:	40008800 	.word	0x40008800

00032f54 <am_hal_timer_config>:
   32f54:	b470      	push	{r4, r5, r6}
   32f56:	f891 c001 	ldrb.w	ip, [r1, #1]
   32f5a:	690c      	ldr	r4, [r1, #16]
   32f5c:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
   32f60:	e9d1 6502 	ldrd	r6, r5, [r1, #8]
   32f64:	2b0c      	cmp	r3, #12
   32f66:	d80a      	bhi.n	32f7e <am_hal_timer_config+0x2a>
   32f68:	e8df f003 	tbb	[pc, r3]
   32f6c:	1009100c 	.word	0x1009100c
   32f70:	09090909 	.word	0x09090909
   32f74:	07090909 	.word	0x07090909
   32f78:	07          	.byte	0x07
   32f79:	00          	.byte	0x00
   32f7a:	2e3f      	cmp	r6, #63	; 0x3f
   32f7c:	d906      	bls.n	32f8c <am_hal_timer_config+0x38>
   32f7e:	2007      	movs	r0, #7
   32f80:	bc70      	pop	{r4, r5, r6}
   32f82:	4770      	bx	lr
   32f84:	1c63      	adds	r3, r4, #1
   32f86:	d001      	beq.n	32f8c <am_hal_timer_config+0x38>
   32f88:	42a5      	cmp	r5, r4
   32f8a:	d9f8      	bls.n	32f7e <am_hal_timer_config+0x2a>
   32f8c:	78ca      	ldrb	r2, [r1, #3]
   32f8e:	f100 7300 	add.w	r3, r0, #33554432	; 0x2000000
   32f92:	7808      	ldrb	r0, [r1, #0]
   32f94:	00d2      	lsls	r2, r2, #3
   32f96:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
   32f9a:	7888      	ldrb	r0, [r1, #2]
   32f9c:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
   32fa0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
   32fa4:	015b      	lsls	r3, r3, #5
   32fa6:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
   32faa:	7908      	ldrb	r0, [r1, #4]
   32fac:	794e      	ldrb	r6, [r1, #5]
   32fae:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
   32fb2:	0401      	lsls	r1, r0, #16
   32fb4:	fa5f fc8c 	uxtb.w	ip, ip
   32fb8:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
   32fbc:	ea42 020c 	orr.w	r2, r2, ip
   32fc0:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
   32fc4:	430a      	orrs	r2, r1
   32fc6:	0236      	lsls	r6, r6, #8
   32fc8:	f36f 0000 	bfc	r0, #0, #1
   32fcc:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
   32fd0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   32fd4:	f8c3 6210 	str.w	r6, [r3, #528]	; 0x210
   32fd8:	f8c3 5208 	str.w	r5, [r3, #520]	; 0x208
   32fdc:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
   32fe0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   32fe4:	f042 0202 	orr.w	r2, r2, #2
   32fe8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   32fec:	2000      	movs	r0, #0
   32fee:	bc70      	pop	{r4, r5, r6}
   32ff0:	4770      	bx	lr
   32ff2:	bf00      	nop

00032ff4 <am_hal_timer_default_config_set>:
   32ff4:	2300      	movs	r3, #0
   32ff6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   32ffa:	f240 1c01 	movw	ip, #257	; 0x101
   32ffe:	f44f 7180 	mov.w	r1, #256	; 0x100
   33002:	e9c0 2203 	strd	r2, r2, [r0, #12]
   33006:	f8a0 c000 	strh.w	ip, [r0]
   3300a:	8043      	strh	r3, [r0, #2]
   3300c:	8081      	strh	r1, [r0, #4]
   3300e:	6083      	str	r3, [r0, #8]
   33010:	4618      	mov	r0, r3
   33012:	4770      	bx	lr

00033014 <am_hal_timer_clear>:
   33014:	b510      	push	{r4, lr}
   33016:	4604      	mov	r4, r0
   33018:	b082      	sub	sp, #8
   3301a:	f7fc fed7 	bl	2fdcc <am_hal_interrupt_master_disable>
   3301e:	f104 7300 	add.w	r3, r4, #33554432	; 0x2000000
   33022:	f503 6380 	add.w	r3, r3, #1024	; 0x400
   33026:	015b      	lsls	r3, r3, #5
   33028:	9001      	str	r0, [sp, #4]
   3302a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   3302e:	f36f 0200 	bfc	r2, #0, #1
   33032:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   33036:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   3303a:	f042 0202 	orr.w	r2, r2, #2
   3303e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   33042:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   33046:	f36f 0241 	bfc	r2, #1, #1
   3304a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   3304e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   33052:	f042 0201 	orr.w	r2, r2, #1
   33056:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   3305a:	9801      	ldr	r0, [sp, #4]
   3305c:	f7fc feba 	bl	2fdd4 <am_hal_interrupt_master_set>
   33060:	2000      	movs	r0, #0
   33062:	b002      	add	sp, #8
   33064:	bd10      	pop	{r4, pc}
   33066:	bf00      	nop

00033068 <am_hal_timer_read>:
   33068:	b500      	push	{lr}
   3306a:	4603      	mov	r3, r0
   3306c:	4807      	ldr	r0, [pc, #28]	; (3308c <am_hal_timer_read+0x24>)
   3306e:	b085      	sub	sp, #20
   33070:	015b      	lsls	r3, r3, #5
   33072:	a901      	add	r1, sp, #4
   33074:	4418      	add	r0, r3
   33076:	f000 f81b 	bl	330b0 <am_hal_triple_read>
   3307a:	e9dd 3001 	ldrd	r3, r0, [sp, #4]
   3307e:	4283      	cmp	r3, r0
   33080:	bf18      	it	ne
   33082:	9803      	ldrne	r0, [sp, #12]
   33084:	b005      	add	sp, #20
   33086:	f85d fb04 	ldr.w	pc, [sp], #4
   3308a:	bf00      	nop
   3308c:	40008204 	.word	0x40008204

00033090 <am_hal_timer_interrupt_enable>:
   33090:	4903      	ldr	r1, [pc, #12]	; (330a0 <am_hal_timer_interrupt_enable+0x10>)
   33092:	6e0a      	ldr	r2, [r1, #96]	; 0x60
   33094:	4603      	mov	r3, r0
   33096:	4313      	orrs	r3, r2
   33098:	2000      	movs	r0, #0
   3309a:	660b      	str	r3, [r1, #96]	; 0x60
   3309c:	4770      	bx	lr
   3309e:	bf00      	nop
   330a0:	40008000 	.word	0x40008000

000330a4 <am_hal_timer_interrupt_clear>:
   330a4:	4b01      	ldr	r3, [pc, #4]	; (330ac <am_hal_timer_interrupt_clear+0x8>)
   330a6:	6698      	str	r0, [r3, #104]	; 0x68
   330a8:	2000      	movs	r0, #0
   330aa:	4770      	bx	lr
   330ac:	40008000 	.word	0x40008000

000330b0 <am_hal_triple_read>:
   330b0:	b412      	push	{r1, r4}
   330b2:	f3ef 8410 	mrs	r4, PRIMASK
   330b6:	b672      	cpsid	i
   330b8:	6801      	ldr	r1, [r0, #0]
   330ba:	6802      	ldr	r2, [r0, #0]
   330bc:	6803      	ldr	r3, [r0, #0]
   330be:	f384 8810 	msr	PRIMASK, r4
   330c2:	bc11      	pop	{r0, r4}
   330c4:	6001      	str	r1, [r0, #0]
   330c6:	6042      	str	r2, [r0, #4]
   330c8:	6083      	str	r3, [r0, #8]
   330ca:	4770      	bx	lr

000330cc <am_bsp_uart_string_print>:
   330cc:	b530      	push	{r4, r5, lr}
   330ce:	b08b      	sub	sp, #44	; 0x2c
   330d0:	7804      	ldrb	r4, [r0, #0]
   330d2:	2300      	movs	r3, #0
   330d4:	4605      	mov	r5, r0
   330d6:	9301      	str	r3, [sp, #4]
   330d8:	b13c      	cbz	r4, 330ea <am_bsp_uart_string_print+0x1e>
   330da:	4603      	mov	r3, r0
   330dc:	f1c0 0101 	rsb	r1, r0, #1
   330e0:	18cc      	adds	r4, r1, r3
   330e2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   330e6:	2a00      	cmp	r2, #0
   330e8:	d1fa      	bne.n	330e0 <am_bsp_uart_string_print+0x14>
   330ea:	2220      	movs	r2, #32
   330ec:	2100      	movs	r1, #0
   330ee:	a802      	add	r0, sp, #8
   330f0:	f7f7 fed8 	bl	2aea4 <memset>
   330f4:	4b08      	ldr	r3, [pc, #32]	; (33118 <am_bsp_uart_string_print+0x4c>)
   330f6:	9503      	str	r5, [sp, #12]
   330f8:	6818      	ldr	r0, [r3, #0]
   330fa:	aa01      	add	r2, sp, #4
   330fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   33100:	a902      	add	r1, sp, #8
   33102:	9306      	str	r3, [sp, #24]
   33104:	e9cd 4204 	strd	r4, r2, [sp, #16]
   33108:	f008 fdd4 	bl	3bcb4 <am_hal_uart_transfer>
   3310c:	9b01      	ldr	r3, [sp, #4]
   3310e:	42a3      	cmp	r3, r4
   33110:	d000      	beq.n	33114 <am_bsp_uart_string_print+0x48>
   33112:	e7fe      	b.n	33112 <am_bsp_uart_string_print+0x46>
   33114:	b00b      	add	sp, #44	; 0x2c
   33116:	bd30      	pop	{r4, r5, pc}
   33118:	1001a624 	.word	0x1001a624

0003311c <am_bsp_low_power_init>:
   3311c:	b508      	push	{r3, lr}
   3311e:	f7ff fb49 	bl	327b4 <am_hal_pwrctrl_low_power_init>
   33122:	2100      	movs	r1, #0
   33124:	4608      	mov	r0, r1
   33126:	f7ff fc1f 	bl	32968 <am_hal_pwrctrl_control>
   3312a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3312e:	f008 bb5f 	b.w	3b7f0 <am_hal_rtc_osc_disable>
   33132:	bf00      	nop

00033134 <am_bsp_itm_printf_enable>:
   33134:	4b18      	ldr	r3, [pc, #96]	; (33198 <am_bsp_itm_printf_enable+0x64>)
   33136:	689b      	ldr	r3, [r3, #8]
   33138:	02da      	lsls	r2, r3, #11
   3313a:	d529      	bpl.n	33190 <am_bsp_itm_printf_enable+0x5c>
   3313c:	b510      	push	{r4, lr}
   3313e:	4b17      	ldr	r3, [pc, #92]	; (3319c <am_bsp_itm_printf_enable+0x68>)
   33140:	f8d3 4a7c 	ldr.w	r4, [r3, #2684]	; 0xa7c
   33144:	f014 0401 	ands.w	r4, r4, #1
   33148:	b082      	sub	sp, #8
   3314a:	d01e      	beq.n	3318a <am_bsp_itm_printf_enable+0x56>
   3314c:	a801      	add	r0, sp, #4
   3314e:	f008 ff23 	bl	3bf98 <am_hal_dcu_get>
   33152:	9b01      	ldr	r3, [sp, #4]
   33154:	06db      	lsls	r3, r3, #27
   33156:	d512      	bpl.n	3317e <am_bsp_itm_printf_enable+0x4a>
   33158:	4b11      	ldr	r3, [pc, #68]	; (331a0 <am_bsp_itm_printf_enable+0x6c>)
   3315a:	2201      	movs	r2, #1
   3315c:	701a      	strb	r2, [r3, #0]
   3315e:	f7fc fe3d 	bl	2fddc <am_hal_itm_enable>
   33162:	4810      	ldr	r0, [pc, #64]	; (331a4 <am_bsp_itm_printf_enable+0x70>)
   33164:	f7fd f924 	bl	303b0 <am_hal_tpiu_enable>
   33168:	4b0f      	ldr	r3, [pc, #60]	; (331a8 <am_bsp_itm_printf_enable+0x74>)
   3316a:	201c      	movs	r0, #28
   3316c:	6819      	ldr	r1, [r3, #0]
   3316e:	f7fe fb1d 	bl	317ac <am_hal_gpio_pinconfig>
   33172:	480e      	ldr	r0, [pc, #56]	; (331ac <am_bsp_itm_printf_enable+0x78>)
   33174:	f7fb fd12 	bl	2eb9c <am_util_stdio_printf_init>
   33178:	2000      	movs	r0, #0
   3317a:	b002      	add	sp, #8
   3317c:	bd10      	pop	{r4, pc}
   3317e:	2110      	movs	r1, #16
   33180:	4620      	mov	r0, r4
   33182:	f008 ff51 	bl	3c028 <am_hal_dcu_update>
   33186:	2800      	cmp	r0, #0
   33188:	d0e6      	beq.n	33158 <am_bsp_itm_printf_enable+0x24>
   3318a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3318e:	e7f4      	b.n	3317a <am_bsp_itm_printf_enable+0x46>
   33190:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   33194:	4770      	bx	lr
   33196:	bf00      	nop
   33198:	40021000 	.word	0x40021000
   3319c:	400c0000 	.word	0x400c0000
   331a0:	1001a620 	.word	0x1001a620
   331a4:	000f4240 	.word	0x000f4240
   331a8:	10004ad4 	.word	0x10004ad4
   331ac:	0002fef9 	.word	0x0002fef9

000331b0 <am_bsp_uart_printf_enable>:
   331b0:	b510      	push	{r4, lr}
   331b2:	4c14      	ldr	r4, [pc, #80]	; (33204 <am_bsp_uart_printf_enable+0x54>)
   331b4:	2000      	movs	r0, #0
   331b6:	4621      	mov	r1, r4
   331b8:	f008 fc28 	bl	3ba0c <am_hal_uart_initialize>
   331bc:	b9f8      	cbnz	r0, 331fe <am_bsp_uart_printf_enable+0x4e>
   331be:	4602      	mov	r2, r0
   331c0:	4611      	mov	r1, r2
   331c2:	6820      	ldr	r0, [r4, #0]
   331c4:	f008 fc6e 	bl	3baa4 <am_hal_uart_power_control>
   331c8:	b9c8      	cbnz	r0, 331fe <am_bsp_uart_printf_enable+0x4e>
   331ca:	490f      	ldr	r1, [pc, #60]	; (33208 <am_bsp_uart_printf_enable+0x58>)
   331cc:	6820      	ldr	r0, [r4, #0]
   331ce:	f008 fcc5 	bl	3bb5c <am_hal_uart_configure>
   331d2:	b9a0      	cbnz	r0, 331fe <am_bsp_uart_printf_enable+0x4e>
   331d4:	4b0d      	ldr	r3, [pc, #52]	; (3320c <am_bsp_uart_printf_enable+0x5c>)
   331d6:	203c      	movs	r0, #60	; 0x3c
   331d8:	6819      	ldr	r1, [r3, #0]
   331da:	f7fe fae7 	bl	317ac <am_hal_gpio_pinconfig>
   331de:	b970      	cbnz	r0, 331fe <am_bsp_uart_printf_enable+0x4e>
   331e0:	4b0b      	ldr	r3, [pc, #44]	; (33210 <am_bsp_uart_printf_enable+0x60>)
   331e2:	202f      	movs	r0, #47	; 0x2f
   331e4:	6819      	ldr	r1, [r3, #0]
   331e6:	f7fe fae1 	bl	317ac <am_hal_gpio_pinconfig>
   331ea:	4604      	mov	r4, r0
   331ec:	b938      	cbnz	r0, 331fe <am_bsp_uart_printf_enable+0x4e>
   331ee:	4b09      	ldr	r3, [pc, #36]	; (33214 <am_bsp_uart_printf_enable+0x64>)
   331f0:	4809      	ldr	r0, [pc, #36]	; (33218 <am_bsp_uart_printf_enable+0x68>)
   331f2:	2202      	movs	r2, #2
   331f4:	701a      	strb	r2, [r3, #0]
   331f6:	f7fb fcd1 	bl	2eb9c <am_util_stdio_printf_init>
   331fa:	4620      	mov	r0, r4
   331fc:	bd10      	pop	{r4, pc}
   331fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   33202:	bd10      	pop	{r4, pc}
   33204:	1001a624 	.word	0x1001a624
   33208:	00042668 	.word	0x00042668
   3320c:	10004ad0 	.word	0x10004ad0
   33210:	10004acc 	.word	0x10004acc
   33214:	1001a620 	.word	0x1001a620
   33218:	000330cd 	.word	0x000330cd

0003321c <am_bsp_uart_printf_disable>:
   3321c:	b570      	push	{r4, r5, r6, lr}
   3321e:	4c10      	ldr	r4, [pc, #64]	; (33260 <am_bsp_uart_printf_disable+0x44>)
   33220:	7825      	ldrb	r5, [r4, #0]
   33222:	2d02      	cmp	r5, #2
   33224:	d000      	beq.n	33228 <am_bsp_uart_printf_disable+0xc>
   33226:	bd70      	pop	{r4, r5, r6, pc}
   33228:	4e0e      	ldr	r6, [pc, #56]	; (33264 <am_bsp_uart_printf_disable+0x48>)
   3322a:	6830      	ldr	r0, [r6, #0]
   3322c:	f008 fe68 	bl	3bf00 <am_hal_uart_tx_flush>
   33230:	2000      	movs	r0, #0
   33232:	f7fb fcb3 	bl	2eb9c <am_util_stdio_printf_init>
   33236:	2200      	movs	r2, #0
   33238:	4629      	mov	r1, r5
   3323a:	6830      	ldr	r0, [r6, #0]
   3323c:	f008 fc32 	bl	3baa4 <am_hal_uart_power_control>
   33240:	6830      	ldr	r0, [r6, #0]
   33242:	f008 fc1b 	bl	3ba7c <am_hal_uart_deinitialize>
   33246:	4b08      	ldr	r3, [pc, #32]	; (33268 <am_bsp_uart_printf_disable+0x4c>)
   33248:	681d      	ldr	r5, [r3, #0]
   3324a:	203c      	movs	r0, #60	; 0x3c
   3324c:	4629      	mov	r1, r5
   3324e:	f7fe faad 	bl	317ac <am_hal_gpio_pinconfig>
   33252:	4629      	mov	r1, r5
   33254:	202f      	movs	r0, #47	; 0x2f
   33256:	f7fe faa9 	bl	317ac <am_hal_gpio_pinconfig>
   3325a:	2300      	movs	r3, #0
   3325c:	7023      	strb	r3, [r4, #0]
   3325e:	bd70      	pop	{r4, r5, r6, pc}
   33260:	1001a620 	.word	0x1001a620
   33264:	1001a624 	.word	0x1001a624
   33268:	00042374 	.word	0x00042374

0003326c <stage_rfft_f32>:
   twR = *pCoeff++ ;
   twI = *pCoeff++ ;


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
   3326c:	edd1 7a00 	vldr	s15, [r1]

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
   33270:	ed91 7a01 	vldr	s14, [r1, #4]
   k = (S->Sint).fftLen - 1;
   33274:	f8b0 c000 	ldrh.w	ip, [r0]
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
   33278:	6940      	ldr	r0, [r0, #20]
   t1b = xBI + xAI  ;
   3327a:	ee37 7a07 	vadd.f32	s14, s14, s14
   t1a = xBR + xAR  ;
   3327e:	ee77 7aa7 	vadd.f32	s15, s15, s15

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
   33282:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
   33286:	ee77 6a87 	vadd.f32	s13, s15, s14
   *pOut++ = 0.5f * ( t1a - t1b );
   3328a:	ee77 7ac7 	vsub.f32	s15, s15, s14
   k = (S->Sint).fftLen - 1;
   3328e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   *pOut++ = 0.5f * ( t1a + t1b );
   33292:	ee26 7aa3 	vmul.f32	s14, s13, s7
   *pOut++ = 0.5f * ( t1a - t1b );
   33296:	ee67 7aa3 	vmul.f32	s15, s15, s7
   3329a:	eb01 03cc 	add.w	r3, r1, ip, lsl #3
   *pOut++ = 0.5f * ( t1a + t1b );
   3329e:	ed82 7a00 	vstr	s14, [r2]
   *pOut++ = 0.5f * ( t1a - t1b );
   332a2:	edc2 7a01 	vstr	s15, [r2, #4]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
   pA += 2;
   332a6:	3010      	adds	r0, #16
   332a8:	3210      	adds	r2, #16
   332aa:	3110      	adds	r1, #16
   332ac:	3b08      	subs	r3, #8
         X = XA;
      */

      xBI = pB[1];
      xBR = pB[0];
      xAR = pA[0];
   332ae:	ed11 4a02 	vldr	s8, [r1, #-8]
      xBR = pB[0];
   332b2:	ed93 7a02 	vldr	s14, [r3, #8]
      xBI = pB[1];
   332b6:	edd3 4a03 	vldr	s9, [r3, #12]
      xAI = pA[1];
   332ba:	ed51 7a01 	vldr	s15, [r1, #-4]

      twR = *pCoeff++;
   332be:	ed50 6a02 	vldr	s13, [r0, #-8]
      twI = *pCoeff++;
   332c2:	ed10 6a01 	vldr	s12, [r0, #-4]

      t1a = xBR - xAR ;
   332c6:	ee77 5a44 	vsub.f32	s11, s14, s8
      t1b = xBI + xAI ;
   332ca:	ee34 5aa7 	vadd.f32	s10, s9, s15
      p0 = twR * t1a;
      p1 = twI * t1a;
      p2 = twR * t1b;
      p3 = twI * t1b;

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
   332ce:	ee37 7a04 	vadd.f32	s14, s14, s8
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
   332d2:	ee77 7ae4 	vsub.f32	s15, s15, s9
      p0 = twR * t1a;
   332d6:	ee26 4aa5 	vmul.f32	s8, s13, s11
      p1 = twI * t1a;
   332da:	ee66 5a25 	vmul.f32	s11, s12, s11
      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
   332de:	ee37 7a04 	vadd.f32	s14, s14, s8
      p3 = twI * t1b;
   332e2:	ee26 6a05 	vmul.f32	s12, s12, s10
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
   332e6:	ee77 7aa5 	vadd.f32	s15, s15, s11
      p2 = twR * t1b;
   332ea:	ee66 6a85 	vmul.f32	s13, s13, s10
      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
   332ee:	ee37 7a06 	vadd.f32	s14, s14, s12
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
   332f2:	ee77 7ae6 	vsub.f32	s15, s15, s13
      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
   332f6:	ee27 7a23 	vmul.f32	s14, s14, s7
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
   332fa:	ee67 7aa3 	vmul.f32	s15, s15, s7


      pA += 2;
      pB -= 2;
      k--;
   332fe:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   } while (k > 0);
   33302:	f1bc 0f00 	cmp.w	ip, #0
      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
   33306:	ed02 7a02 	vstr	s14, [r2, #-8]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
   3330a:	ed42 7a01 	vstr	s15, [r2, #-4]
   } while (k > 0);
   3330e:	f100 0008 	add.w	r0, r0, #8
   33312:	f102 0208 	add.w	r2, r2, #8
   33316:	f101 0108 	add.w	r1, r1, #8
   3331a:	f1a3 0308 	sub.w	r3, r3, #8
   3331e:	dcc6      	bgt.n	332ae <stage_rfft_f32+0x42>
}
   33320:	4770      	bx	lr
   33322:	bf00      	nop

00033324 <merge_rfft_f32>:
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;

   xAR = pA[0];
   33324:	edd1 7a00 	vldr	s15, [r1]
   xAI = pA[1];
   33328:	edd1 6a01 	vldr	s13, [r1, #4]
   k = (S->Sint).fftLen - 1;
   3332c:	f8b0 c000 	ldrh.w	ip, [r0]
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
   33330:	6940      	ldr	r0, [r0, #20]

   pCoeff += 2 ;

   *pOut++ = 0.5f * ( xAR + xAI );
   33332:	ee37 7aa6 	vadd.f32	s14, s15, s13
   *pOut++ = 0.5f * ( xAR - xAI );
   33336:	ee77 7ae6 	vsub.f32	s15, s15, s13
   *pOut++ = 0.5f * ( xAR + xAI );
   3333a:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
{
   3333e:	b500      	push	{lr}
   *pOut++ = 0.5f * ( xAR + xAI );
   33340:	ee27 7a23 	vmul.f32	s14, s14, s7
   k = (S->Sint).fftLen - 1;
   33344:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
   *pOut++ = 0.5f * ( xAR - xAI );
   33348:	ee67 7aa3 	vmul.f32	s15, s15, s7

   pB  =  p + 2*k ;
   pA +=  2	   ;

   while (k > 0)
   3334c:	f1be 0f00 	cmp.w	lr, #0
   *pOut++ = 0.5f * ( xAR + xAI );
   33350:	ed82 7a00 	vstr	s14, [r2]
   *pOut++ = 0.5f * ( xAR - xAI );
   33354:	edc2 7a01 	vstr	s15, [r2, #4]
   pB  =  p + 2*k ;
   33358:	eb01 03ce 	add.w	r3, r1, lr, lsl #3
   while (k > 0)
   3335c:	dd3a      	ble.n	333d4 <merge_rfft_f32+0xb0>
   3335e:	eba3 0ccc 	sub.w	ip, r3, ip, lsl #3
   33362:	3010      	adds	r0, #16
   33364:	3210      	adds	r2, #16
   33366:	3110      	adds	r1, #16
   33368:	3b08      	subs	r3, #8
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
      xBR =   pB[0]    ;
   3336a:	ed93 7a02 	vldr	s14, [r3, #8]
      xAR =  pA[0];
   3336e:	ed11 4a02 	vldr	s8, [r1, #-8]
      xBI =   pB[1]    ;
   33372:	edd3 4a03 	vldr	s9, [r3, #12]
      xAI =  pA[1];
   33376:	ed51 7a01 	vldr	s15, [r1, #-4]

      twR = *pCoeff++;
   3337a:	ed50 6a02 	vldr	s13, [r0, #-8]
      twI = *pCoeff++;
   3337e:	ed10 6a01 	vldr	s12, [r0, #-4]

      t1a = xAR - xBR ;
   33382:	ee74 5a47 	vsub.f32	s11, s8, s14
      t1b = xAI + xBI ;
   33386:	ee34 5aa7 	vadd.f32	s10, s9, s15
      t = twI * t1a;
      u = twR * t1b;

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
   3338a:	ee37 7a04 	vadd.f32	s14, s14, s8
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
   3338e:	ee77 7ae4 	vsub.f32	s15, s15, s9
      r = twR * t1a;
   33392:	ee26 4aa5 	vmul.f32	s8, s13, s11
      t = twI * t1a;
   33396:	ee66 5a25 	vmul.f32	s11, s12, s11
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
   3339a:	ee37 7a44 	vsub.f32	s14, s14, s8
      s = twI * t1b;
   3339e:	ee26 6a05 	vmul.f32	s12, s12, s10
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
   333a2:	ee77 7aa5 	vadd.f32	s15, s15, s11
      u = twR * t1b;
   333a6:	ee66 6a85 	vmul.f32	s13, s13, s10
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
   333aa:	ee37 7a46 	vsub.f32	s14, s14, s12
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
   333ae:	ee77 7ae6 	vsub.f32	s15, s15, s13
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
   333b2:	ee27 7a23 	vmul.f32	s14, s14, s7
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
   333b6:	ee67 7aa3 	vmul.f32	s15, s15, s7
   while (k > 0)
   333ba:	3b08      	subs	r3, #8
   333bc:	459c      	cmp	ip, r3
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
   333be:	ed02 7a02 	vstr	s14, [r2, #-8]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
   333c2:	ed42 7a01 	vstr	s15, [r2, #-4]
   while (k > 0)
   333c6:	f100 0008 	add.w	r0, r0, #8
   333ca:	f102 0208 	add.w	r2, r2, #8
   333ce:	f101 0108 	add.w	r1, r1, #8
   333d2:	d1ca      	bne.n	3336a <merge_rfft_f32+0x46>
      pA += 2;
      pB -= 2;
      k--;
   }

}
   333d4:	f85d fb04 	ldr.w	pc, [sp], #4

000333d8 <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
   333d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   333dc:	4605      	mov	r5, r0
   333de:	4616      	mov	r6, r2
   const arm_cfft_instance_f32 * Sint = &(S->Sint);

   /* Calculation of Real FFT */
   if (ifftFlag)
   333e0:	461c      	mov	r4, r3
   333e2:	b14b      	cbz	r3, 333f8 <arm_rfft_fast_f32+0x20>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
   333e4:	f7ff ff9e 	bl	33324 <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
   333e8:	4622      	mov	r2, r4
   333ea:	4631      	mov	r1, r6
   333ec:	4628      	mov	r0, r5
   333ee:	2301      	movs	r3, #1
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
   333f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
   333f4:	f000 bc10 	b.w	33c18 <arm_cfft_f32>
   333f8:	460f      	mov	r7, r1
      arm_cfft_f32( Sint, p, ifftFlag, 1);
   333fa:	461a      	mov	r2, r3
   333fc:	2301      	movs	r3, #1
   333fe:	f000 fc0b 	bl	33c18 <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
   33402:	4632      	mov	r2, r6
   33404:	4639      	mov	r1, r7
   33406:	4628      	mov	r0, r5
}
   33408:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      stage_rfft_f32(S, p, pOut);
   3340c:	f7ff bf2e 	b.w	3326c <stage_rfft_f32>

00033410 <arm_q15_to_float>:
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
   33410:	b16a      	cbz	r2, 3342e <arm_q15_to_float+0x1e>
  {
    /* C = (float32_t) A / 32768 */

    /* Convert from q15 to float and store result in destination buffer */
    *pDst++ = ((float32_t) *pIn++ / 32768.0f);
   33412:	ed9f 7a07 	vldr	s14, [pc, #28]	; 33430 <arm_q15_to_float+0x20>
   33416:	f930 3b02 	ldrsh.w	r3, [r0], #2
   3341a:	ee07 3a90 	vmov	s15, r3
   3341e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  while (blkCnt > 0U)
   33422:	3a01      	subs	r2, #1
    *pDst++ = ((float32_t) *pIn++ / 32768.0f);
   33424:	ee67 7a87 	vmul.f32	s15, s15, s14
   33428:	ece1 7a01 	vstmia	r1!, {s15}
  while (blkCnt > 0U)
   3342c:	d1f3      	bne.n	33416 <arm_q15_to_float+0x6>

    /* Decrement loop counter */
    blkCnt--;
  }

}
   3342e:	4770      	bx	lr
   33430:	38000000 	.word	0x38000000

00033434 <arm_mat_scale_f32>:

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
   33434:	8842      	ldrh	r2, [r0, #2]
   33436:	8803      	ldrh	r3, [r0, #0]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
   33438:	6840      	ldr	r0, [r0, #4]
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
   3343a:	fb02 f303 	mul.w	r3, r2, r3
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
   3343e:	684a      	ldr	r2, [r1, #4]
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
   33440:	b13b      	cbz	r3, 33452 <arm_mat_scale_f32+0x1e>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
   33442:	ecf0 7a01 	vldmia	r0!, {s15}
   33446:	ee67 7a80 	vmul.f32	s15, s15, s0
    while (blkCnt > 0U)
   3344a:	3b01      	subs	r3, #1
      *pOut++ = (*pIn++) * scale;
   3344c:	ece2 7a01 	vstmia	r2!, {s15}
    while (blkCnt > 0U)
   33450:	d1f7      	bne.n	33442 <arm_mat_scale_f32+0xe>
    status = ARM_MATH_SUCCESS;
  }

  /* Return to application */
  return (status);
}
   33452:	2000      	movs	r0, #0
   33454:	4770      	bx	lr
   33456:	bf00      	nop

00033458 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
   33458:	b5f0      	push	{r4, r5, r6, r7, lr}
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
   3345a:	8845      	ldrh	r5, [r0, #2]
  uint16_t nRows = pSrc->numRows;                /* number of rows */
   3345c:	8802      	ldrh	r2, [r0, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
   3345e:	6844      	ldr	r4, [r0, #4]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
   33460:	684b      	ldr	r3, [r1, #4]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
   33462:	b1b5      	cbz	r5, 33492 <arm_mat_trans_f32+0x3a>
   33464:	ea4f 0c82 	mov.w	ip, r2, lsl #2
   33468:	2a01      	cmp	r2, #1
   3346a:	469e      	mov	lr, r3
   3346c:	eb03 070c 	add.w	r7, r3, ip
   33470:	ea4f 0685 	mov.w	r6, r5, lsl #2
   33474:	d114      	bne.n	334a0 <arm_mat_trans_f32+0x48>
      px = pOut + i;
   33476:	4672      	mov	r2, lr
   33478:	462b      	mov	r3, r5
   3347a:	4621      	mov	r1, r4
#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
      {
        /* Read and store input element in destination */
        *px = *pIn++;
   3347c:	f851 0b04 	ldr.w	r0, [r1], #4
   33480:	6010      	str	r0, [r2, #0]
      while (col > 0U)
   33482:	3b01      	subs	r3, #1

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
   33484:	4462      	add	r2, ip
      while (col > 0U)
   33486:	d1f9      	bne.n	3347c <arm_mat_trans_f32+0x24>
      i++;

      /* Decrement row loop counter */
      row--;

    } while (row > 0U);          /* row loop end */
   33488:	f10e 0e04 	add.w	lr, lr, #4
   3348c:	45be      	cmp	lr, r7
        *px = *pIn++;
   3348e:	4434      	add	r4, r6
    } while (row > 0U);          /* row loop end */
   33490:	d1f1      	bne.n	33476 <arm_mat_trans_f32+0x1e>
    status = ARM_MATH_SUCCESS;
  }

  /* Return to application */
  return (status);
}
   33492:	2000      	movs	r0, #0
   33494:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } while (row > 0U);          /* row loop end */
   33496:	f10e 0e04 	add.w	lr, lr, #4
   3349a:	45be      	cmp	lr, r7
        *px = *pIn++;
   3349c:	4434      	add	r4, r6
    } while (row > 0U);          /* row loop end */
   3349e:	d0f8      	beq.n	33492 <arm_mat_trans_f32+0x3a>
      px = pOut + i;
   334a0:	4672      	mov	r2, lr
   334a2:	462b      	mov	r3, r5
   334a4:	4621      	mov	r1, r4
        *px = *pIn++;
   334a6:	f851 0b04 	ldr.w	r0, [r1], #4
   334aa:	6010      	str	r0, [r2, #0]
      while (col > 0U)
   334ac:	3b01      	subs	r3, #1
        px += nRows;
   334ae:	4462      	add	r2, ip
      while (col > 0U)
   334b0:	d1f9      	bne.n	334a6 <arm_mat_trans_f32+0x4e>
   334b2:	e7f0      	b.n	33496 <arm_mat_trans_f32+0x3e>

000334b4 <arm_max_f32>:
  /* Initialize blkCnt with number of samples */
  blkCnt = (blockSize - 1U);

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
   334b4:	2901      	cmp	r1, #1
{
   334b6:	b410      	push	{r4}
  out = *pSrc++;
   334b8:	ecb0 7a01 	vldmia	r0!, {s14}
  while (blkCnt > 0U)
   334bc:	d017      	beq.n	334ee <arm_max_f32+0x3a>
   334be:	f04f 0c01 	mov.w	ip, #1
  outIndex = 0U;
   334c2:	2400      	movs	r4, #0
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal = *pSrc++;
   334c4:	ecf0 7a01 	vldmia	r0!, {s15}

    /* compare for the maximum value */
    if (out < maxVal)
   334c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
   334cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    {
      /* Update the maximum value and it's index */
      out = maxVal;
      outIndex = blockSize - blkCnt;
   334d0:	bf48      	it	mi
   334d2:	4664      	movmi	r4, ip
  while (blkCnt > 0U)
   334d4:	f10c 0c01 	add.w	ip, ip, #1
    maxVal = *pSrc++;
   334d8:	bf48      	it	mi
   334da:	eeb0 7a67 	vmovmi.f32	s14, s15
  while (blkCnt > 0U)
   334de:	4561      	cmp	r1, ip
   334e0:	d1f0      	bne.n	334c4 <arm_max_f32+0x10>
    /* Decrement loop counter */
    blkCnt--;
  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
   334e2:	ed82 7a00 	vstr	s14, [r2]
  *pIndex = outIndex;
   334e6:	601c      	str	r4, [r3, #0]
}
   334e8:	f85d 4b04 	ldr.w	r4, [sp], #4
   334ec:	4770      	bx	lr
  outIndex = 0U;
   334ee:	2400      	movs	r4, #0
  *pResult = out;
   334f0:	ed82 7a00 	vstr	s14, [r2]
  *pIndex = outIndex;
   334f4:	601c      	str	r4, [r3, #0]
}
   334f6:	f85d 4b04 	ldr.w	r4, [sp], #4
   334fa:	4770      	bx	lr

000334fc <arm_min_f32>:
  /* Initialize blkCnt with number of samples */
  blkCnt = (blockSize - 1U);

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
   334fc:	2901      	cmp	r1, #1
{
   334fe:	b410      	push	{r4}
  out = *pSrc++;
   33500:	ecb0 7a01 	vldmia	r0!, {s14}
  while (blkCnt > 0U)
   33504:	d017      	beq.n	33536 <arm_min_f32+0x3a>
   33506:	f04f 0c01 	mov.w	ip, #1
  outIndex = 0U;
   3350a:	2400      	movs	r4, #0
  {
    /* Initialize minVal to the next consecutive values one by one */
    minVal = *pSrc++;
   3350c:	ecf0 7a01 	vldmia	r0!, {s15}

    /* compare for the minimum value */
    if (out > minVal)
   33510:	eeb4 7ae7 	vcmpe.f32	s14, s15
   33514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    {
      /* Update the minimum value and it's index */
      out = minVal;
      outIndex = blockSize - blkCnt;
   33518:	bfc8      	it	gt
   3351a:	4664      	movgt	r4, ip
  while (blkCnt > 0U)
   3351c:	f10c 0c01 	add.w	ip, ip, #1
    minVal = *pSrc++;
   33520:	bfc8      	it	gt
   33522:	eeb0 7a67 	vmovgt.f32	s14, s15
  while (blkCnt > 0U)
   33526:	4561      	cmp	r1, ip
   33528:	d1f0      	bne.n	3350c <arm_min_f32+0x10>
    /* Decrement loop counter */
    blkCnt--;
  }

  /* Store the minimum value and it's index into destination pointers */
  *pResult = out;
   3352a:	ed82 7a00 	vstr	s14, [r2]
  *pIndex = outIndex;
   3352e:	601c      	str	r4, [r3, #0]
}
   33530:	f85d 4b04 	ldr.w	r4, [sp], #4
   33534:	4770      	bx	lr
  outIndex = 0U;
   33536:	2400      	movs	r4, #0
  *pResult = out;
   33538:	ed82 7a00 	vstr	s14, [r2]
  *pIndex = outIndex;
   3353c:	601c      	str	r4, [r3, #0]
}
   3353e:	f85d 4b04 	ldr.w	r4, [sp], #4
   33542:	4770      	bx	lr

00033544 <arm_rms_f32>:
#else
void arm_rms_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
   33544:	b500      	push	{lr}
   33546:	b083      	sub	sp, #12
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
   33548:	9101      	str	r1, [sp, #4]
   3354a:	b311      	cbz	r1, 33592 <arm_rms_f32+0x4e>
        float32_t sum = 0.0f;                          /* Temporary result storage */
   3354c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 335ac <arm_rms_f32+0x68>
   33550:	460b      	mov	r3, r1
  {
    /* C = A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1] */

    in = *pSrc++;
   33552:	ecf0 7a01 	vldmia	r0!, {s15}
    /* Compute sum of squares and store result in a temporary variable. */
    sum += ( in * in);
   33556:	ee67 7aa7 	vmul.f32	s15, s15, s15
  while (blkCnt > 0U)
   3355a:	3b01      	subs	r3, #1
    sum += ( in * in);
   3355c:	ee37 7a27 	vadd.f32	s14, s14, s15
  while (blkCnt > 0U)
   33560:	d1f7      	bne.n	33552 <arm_rms_f32+0xe>
    /* Decrement loop counter */
    blkCnt--;
  }

  /* Compute Rms and store result in destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
   33562:	eddd 7a01 	vldr	s15, [sp, #4]
   33566:	eef8 7a67 	vcvt.f32.u32	s15, s15
    if (in >= 0.0f)
   3356a:	2300      	movs	r3, #0
   3356c:	ee87 0a27 	vdiv.f32	s0, s14, s15
   33570:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   33574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   33578:	db0e      	blt.n	33598 <arm_rms_f32+0x54>
      *pOut = sqrtf(in);
   3357a:	eeb5 0a40 	vcmp.f32	s0, #0.0
   3357e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   33582:	d40b      	bmi.n	3359c <arm_rms_f32+0x58>
   33584:	eef1 7ac0 	vsqrt.f32	s15, s0
   33588:	edc2 7a00 	vstr	s15, [r2]
}
   3358c:	b003      	add	sp, #12
   3358e:	f85d fb04 	ldr.w	pc, [sp], #4
        float32_t sum = 0.0f;                          /* Temporary result storage */
   33592:	ed9f 7a06 	vldr	s14, [pc, #24]	; 335ac <arm_rms_f32+0x68>
   33596:	e7e4      	b.n	33562 <arm_rms_f32+0x1e>
      *pOut = 0.0f;
   33598:	6013      	str	r3, [r2, #0]
}
   3359a:	e7f7      	b.n	3358c <arm_rms_f32+0x48>
   3359c:	9201      	str	r2, [sp, #4]
      *pOut = sqrtf(in);
   3359e:	f7f5 fb11 	bl	28bc4 <sqrtf>
   335a2:	9a01      	ldr	r2, [sp, #4]
   335a4:	eef0 7a40 	vmov.f32	s15, s0
   335a8:	e7ee      	b.n	33588 <arm_rms_f32+0x44>
   335aa:	bf00      	nop
   335ac:	00000000 	.word	0x00000000

000335b0 <arm_cfft_radix8by2_f32>:
  @endcode
 
 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
   335b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t    L  = S->fftLen;
   335b4:	f8b0 8000 	ldrh.w	r8, [r0]
{
   335b8:	ed2d 8b08 	vpush	{d8-d11}
   335bc:	4605      	mov	r5, r0
   335be:	4608      	mov	r0, r1
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
   335c0:	eb00 0688 	add.w	r6, r0, r8, lsl #2

  pCol1 = p1;
  pCol2 = p2;

  /* Define new length */
  L >>= 1;
   335c4:	ea4f 0158 	mov.w	r1, r8, lsr #1
  /* Initialize mid pointers */
  pMid1 = p1 + L;
  pMid2 = p2 + L;

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
   335c8:	ea5f 08d8 	movs.w	r8, r8, lsr #3
  const float32_t * tw = (float32_t *) S->pTwiddle;
   335cc:	686a      	ldr	r2, [r5, #4]
{
   335ce:	b082      	sub	sp, #8
  for (l = L >> 2; l > 0; l-- )
   335d0:	f000 80b3 	beq.w	3373a <arm_cfft_radix8by2_f32+0x18a>
   335d4:	ea4f 0c81 	mov.w	ip, r1, lsl #2
   335d8:	f10c 0c10 	add.w	ip, ip, #16
   335dc:	f100 0310 	add.w	r3, r0, #16
   335e0:	eb00 040c 	add.w	r4, r0, ip
   335e4:	eb03 1808 	add.w	r8, r3, r8, lsl #4
   335e8:	44b4      	add	ip, r6
   335ea:	f102 0710 	add.w	r7, r2, #16
   335ee:	f106 0e10 	add.w	lr, r6, #16
    t1[0] = p1[0];
    t1[1] = p1[1];
    t1[2] = p1[2];
    t1[3] = p1[3];

    t2[0] = p2[0];
   335f2:	ed5e 8a04 	vldr	s17, [lr, #-16]
    t2[1] = p2[1];
   335f6:	ed1e 8a03 	vldr	s16, [lr, #-12]
    t3[0] = pMid1[0];
    t3[1] = pMid1[1];
    t3[2] = pMid1[2];
    t3[3] = pMid1[3];

    t4[0] = pMid2[0];
   335fa:	ed5c 4a04 	vldr	s9, [ip, #-16]
    t4[1] = pMid2[1];
   335fe:	ed5c 6a03 	vldr	s13, [ip, #-12]
    t4[2] = pMid2[2];
   33602:	ed5c 5a02 	vldr	s11, [ip, #-8]
    t1[2] = p1[2];
   33606:	ed13 5a02 	vldr	s10, [r3, #-8]
    t2[2] = p2[2];
   3360a:	ed1e 0a02 	vldr	s0, [lr, #-8]
    t2[3] = p2[3];
   3360e:	ed5e 0a01 	vldr	s1, [lr, #-4]
    t4[3] = pMid2[3];
   33612:	ed5c 7a01 	vldr	s15, [ip, #-4]
    t1[0] = p1[0];
   33616:	ed13 4a04 	vldr	s8, [r3, #-16]
    t1[1] = p1[1];
   3361a:	ed13 6a03 	vldr	s12, [r3, #-12]
    t1[3] = p1[3];
   3361e:	ed13 7a01 	vldr	s14, [r3, #-4]
    t3[0] = pMid1[0];
   33622:	ed14 2a04 	vldr	s4, [r4, #-16]
    t3[1] = pMid1[1];
   33626:	ed54 2a03 	vldr	s5, [r4, #-12]
    t3[2] = pMid1[2];
   3362a:	ed14 1a02 	vldr	s2, [r4, #-8]
    t3[3] = pMid1[3];
   3362e:	ed54 1a01 	vldr	s3, [r4, #-4]

    *p1++ = t1[0] + t2[0];
   33632:	ee74 ba28 	vadd.f32	s23, s8, s17
    *p1++ = t1[1] + t2[1];
   33636:	ee36 ba08 	vadd.f32	s22, s12, s16
    t2[0] = t1[0] - t2[0];
    t2[1] = t1[1] - t2[1];
    t2[2] = t1[2] - t2[2];
    t2[3] = t1[3] - t2[3];    /* for col 2 */

    *pMid1++ = t3[0] + t4[0];
   3363a:	ee72 9a24 	vadd.f32	s19, s4, s9
    *pMid1++ = t3[1] + t4[1];
   3363e:	ee32 9aa6 	vadd.f32	s18, s5, s13
    *pMid1++ = t3[2] + t4[2];
   33642:	ee31 3a25 	vadd.f32	s6, s2, s11
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
   33646:	ee71 3aa7 	vadd.f32	s7, s3, s15
    *p1++ = t1[2] + t2[2];
   3364a:	ee75 aa00 	vadd.f32	s21, s10, s0
    *p1++ = t1[3] + t2[3];    /* col 1 */
   3364e:	ee37 aa20 	vadd.f32	s20, s14, s1
    *p1++ = t1[0] + t2[0];
   33652:	ed43 ba04 	vstr	s23, [r3, #-16]
    *p1++ = t1[1] + t2[1];
   33656:	ed03 ba03 	vstr	s22, [r3, #-12]
    *p1++ = t1[2] + t2[2];
   3365a:	ed43 aa02 	vstr	s21, [r3, #-8]
    *p1++ = t1[3] + t2[3];    /* col 1 */
   3365e:	ed03 aa01 	vstr	s20, [r3, #-4]
    *pMid1++ = t3[0] + t4[0];
   33662:	ed44 9a04 	vstr	s19, [r4, #-16]
    *pMid1++ = t3[1] + t4[1];
   33666:	ed04 9a03 	vstr	s18, [r4, #-12]
    *pMid1++ = t3[2] + t4[2];
   3366a:	ed04 3a02 	vstr	s6, [r4, #-8]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
   3366e:	ed44 3a01 	vstr	s7, [r4, #-4]
    t4[0] = t4[0] - t3[0];
    t4[1] = t4[1] - t3[1];
    t4[2] = t4[2] - t3[2];
    t4[3] = t4[3] - t3[3];    /* for col 2 */

    twR = *tw++;
   33672:	ed57 3a04 	vldr	s7, [r7, #-16]
    twI = *tw++;
   33676:	ed17 3a03 	vldr	s6, [r7, #-12]
    t2[0] = t1[0] - t2[0];
   3367a:	ee34 4a68 	vsub.f32	s8, s8, s17
    t2[1] = t1[1] - t2[1];
   3367e:	ee36 6a48 	vsub.f32	s12, s12, s16
    t4[0] = t4[0] - t3[0];
   33682:	ee74 4ac2 	vsub.f32	s9, s9, s4
    t4[1] = t4[1] - t3[1];
   33686:	ee76 6ae2 	vsub.f32	s13, s13, s5

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
    m1 = t2[1] * twI;
   3368a:	ee66 8a03 	vmul.f32	s17, s12, s6
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
   3368e:	ee64 2a83 	vmul.f32	s5, s9, s6
    m1 = t4[1] * twR;
   33692:	ee26 8aa3 	vmul.f32	s16, s13, s7
    m2 = t4[1] * twI;
    m3 = t4[0] * twR;
   33696:	ee64 4aa3 	vmul.f32	s9, s9, s7
    m0 = t2[0] * twR;
   3369a:	ee24 2a23 	vmul.f32	s4, s8, s7
    m2 = t2[1] * twR;
   3369e:	ee26 6a23 	vmul.f32	s12, s12, s7
    m3 = t2[0] * twI;
   336a2:	ee24 4a03 	vmul.f32	s8, s8, s6
    m2 = t4[1] * twI;
   336a6:	ee66 6a83 	vmul.f32	s13, s13, s6
    *p2++ = m2 - m3;
   336aa:	ee36 6a44 	vsub.f32	s12, s12, s8

    *pMid2++ = m0 - m1;
    *pMid2++ = m2 + m3;
   336ae:	ee76 6aa4 	vadd.f32	s13, s13, s9
    *p2++ = m0 + m1;
   336b2:	ee72 3a28 	vadd.f32	s7, s4, s17
    *pMid2++ = m0 - m1;
   336b6:	ee32 4ac8 	vsub.f32	s8, s5, s16
    *p2++ = m0 + m1;
   336ba:	ed4e 3a04 	vstr	s7, [lr, #-16]
    *p2++ = m2 - m3;
   336be:	ed0e 6a03 	vstr	s12, [lr, #-12]
    *pMid2++ = m2 + m3;
   336c2:	ed4c 6a03 	vstr	s13, [ip, #-12]
    *pMid2++ = m0 - m1;
   336c6:	ed0c 4a04 	vstr	s8, [ip, #-16]

    twR = *tw++;
   336ca:	ed57 4a02 	vldr	s9, [r7, #-8]
    twI = *tw++;
   336ce:	ed17 4a01 	vldr	s8, [r7, #-4]
    t2[2] = t1[2] - t2[2];
   336d2:	ee35 6a40 	vsub.f32	s12, s10, s0
    t2[3] = t1[3] - t2[3];    /* for col 2 */
   336d6:	ee37 7a60 	vsub.f32	s14, s14, s1
    t4[2] = t4[2] - t3[2];
   336da:	ee75 6ac1 	vsub.f32	s13, s11, s2
    t4[3] = t4[3] - t3[3];    /* for col 2 */
   336de:	ee77 7ae1 	vsub.f32	s15, s15, s3

    m0 = t2[2] * twR;
   336e2:	ee26 5a24 	vmul.f32	s10, s12, s9
    m1 = t2[3] * twI;
   336e6:	ee27 3a04 	vmul.f32	s6, s14, s8
    m2 = t2[3] * twR;
    m3 = t2[2] * twI;
   336ea:	ee26 6a04 	vmul.f32	s12, s12, s8

    *p2++ = m0 + m1;
    *p2++ = m2 - m3;

    m0 = t4[2] * twI;
   336ee:	ee66 5a84 	vmul.f32	s11, s13, s8
    m1 = t4[3] * twR;
   336f2:	ee67 3aa4 	vmul.f32	s7, s15, s9
    m2 = t2[3] * twR;
   336f6:	ee27 7a24 	vmul.f32	s14, s14, s9
    m2 = t4[3] * twI;
   336fa:	ee67 7a84 	vmul.f32	s15, s15, s8
    m3 = t4[2] * twR;
   336fe:	ee66 6aa4 	vmul.f32	s13, s13, s9
    *p2++ = m2 - m3;
   33702:	ee37 7a46 	vsub.f32	s14, s14, s12
    *p2++ = m0 + m1;
   33706:	ee35 5a03 	vadd.f32	s10, s10, s6

    *pMid2++ = m0 - m1;
   3370a:	ee35 6ae3 	vsub.f32	s12, s11, s7
    *pMid2++ = m2 + m3;
   3370e:	ee77 7aa6 	vadd.f32	s15, s15, s13
  for (l = L >> 2; l > 0; l-- )
   33712:	3310      	adds	r3, #16
   33714:	4543      	cmp	r3, r8
    *p2++ = m0 + m1;
   33716:	ed0e 5a02 	vstr	s10, [lr, #-8]
  for (l = L >> 2; l > 0; l-- )
   3371a:	f104 0410 	add.w	r4, r4, #16
    *p2++ = m2 - m3;
   3371e:	ed0e 7a01 	vstr	s14, [lr, #-4]
  for (l = L >> 2; l > 0; l-- )
   33722:	f107 0710 	add.w	r7, r7, #16
    *pMid2++ = m0 - m1;
   33726:	ed0c 6a02 	vstr	s12, [ip, #-8]
    *pMid2++ = m2 + m3;
   3372a:	ed4c 7a01 	vstr	s15, [ip, #-4]
  for (l = L >> 2; l > 0; l-- )
   3372e:	f10e 0e10 	add.w	lr, lr, #16
   33732:	f10c 0c10 	add.w	ip, ip, #16
   33736:	f47f af5c 	bne.w	335f2 <arm_cfft_radix8by2_f32+0x42>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
   3373a:	b289      	uxth	r1, r1
   3373c:	2302      	movs	r3, #2
   3373e:	9101      	str	r1, [sp, #4]
   33740:	f000 fae2 	bl	33d08 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
   33744:	686a      	ldr	r2, [r5, #4]
   33746:	9901      	ldr	r1, [sp, #4]
   33748:	2302      	movs	r3, #2
   3374a:	4630      	mov	r0, r6
}
   3374c:	b002      	add	sp, #8
   3374e:	ecbd 8b08 	vpop	{d8-d11}
   33752:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
   33756:	f000 bad7 	b.w	33d08 <arm_radix8_butterfly_f32>
   3375a:	bf00      	nop

0003375c <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
   3375c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33760:	ed2d 8b0c 	vpush	{d8-d13}
    uint32_t    L  = S->fftLen >> 1;
   33764:	8803      	ldrh	r3, [r0, #0]
{
   33766:	b08f      	sub	sp, #60	; 0x3c
   33768:	4606      	mov	r6, r0
   3376a:	900b      	str	r0, [sp, #44]	; 0x2c
   3376c:	910c      	str	r1, [sp, #48]	; 0x30
   3376e:	4608      	mov	r0, r1
    uint32_t    L  = S->fftLen >> 1;
   33770:	0859      	lsrs	r1, r3, #1
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
    float32_t * p3 = p2 + L;
   33772:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    twMod2 = 2;
    twMod3 = 4;
    twMod4 = 6;

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
   33776:	ed92 6a00 	vldr	s12, [r2]
    p1sp3_0 = p1[0] - p3[0];
    p1ap3_1 = p1[1] + p3[1];
   3377a:	ed92 5a01 	vldr	s10, [r2, #4]
    p1ap3_0 = p1[0] + p3[0];
   3377e:	edd0 7a00 	vldr	s15, [r0]
    p1ap3_1 = p1[1] + p3[1];
   33782:	edd0 5a01 	vldr	s11, [r0, #4]
    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
   33786:	6876      	ldr	r6, [r6, #4]
    float32_t * p3 = p2 + L;
   33788:	9208      	str	r2, [sp, #32]
    float32_t * p2 = p1 + L;
   3378a:	eb00 0581 	add.w	r5, r0, r1, lsl #2
    p1sp3_1 = p1[1] - p3[1];

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
    t2[1] = p1sp3_1 - p2[0] + p4[0];
   3378e:	ed95 7a00 	vldr	s14, [r5]
    t2[0] = p1sp3_0 + p2[1] - p4[1];
   33792:	ed95 3a01 	vldr	s6, [r5, #4]
    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
   33796:	9609      	str	r6, [sp, #36]	; 0x24
    p1ap3_0 = p1[0] + p3[0];
   33798:	ee77 6a86 	vadd.f32	s13, s15, s12
    p1sp3_0 = p1[0] - p3[0];
   3379c:	ee77 7ac6 	vsub.f32	s15, s15, s12
    p1ap3_1 = p1[1] + p3[1];
   337a0:	ee35 6a85 	vadd.f32	s12, s11, s10
    p1sp3_1 = p1[1] - p3[1];
   337a4:	ee75 5ac5 	vsub.f32	s11, s11, s10
    float32_t * p4 = p3 + L;
   337a8:	eb02 0481 	add.w	r4, r2, r1, lsl #2
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
   337ac:	ee77 3a26 	vadd.f32	s7, s14, s13
    t2[1] = p1sp3_1 - p2[0] + p4[0];
   337b0:	ee75 4ac7 	vsub.f32	s9, s11, s14
    t3[0] = p1ap3_0 - p2[0] - p4[0];
   337b4:	ee76 6ac7 	vsub.f32	s13, s13, s14
    t4[1] = p1sp3_1 + p2[0] - p4[0];
   337b8:	ee37 7a25 	vadd.f32	s14, s14, s11
    t2[1] = p1sp3_1 - p2[0] + p4[0];
   337bc:	edd4 5a00 	vldr	s11, [r4]
    *p1++ = p1ap3_0 + p2[0] + p4[0];
   337c0:	ee73 3aa5 	vadd.f32	s7, s7, s11
    t2[0] = p1sp3_0 + p2[1] - p4[1];
   337c4:	ee33 4a27 	vadd.f32	s8, s6, s15
    t3[1] = p1ap3_1 - p2[1] - p4[1];
   337c8:	ee36 5a43 	vsub.f32	s10, s12, s6
    t4[0] = p1sp3_0 - p2[1] + p4[1];
   337cc:	ee77 7ac3 	vsub.f32	s15, s15, s6
    t2[0] = p1sp3_0 + p2[1] - p4[1];
   337d0:	ed94 3a01 	vldr	s6, [r4, #4]
    *p1++ = p1ap3_0 + p2[0] + p4[0];
   337d4:	edc0 3a00 	vstr	s7, [r0]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
   337d8:	edd5 3a01 	vldr	s7, [r5, #4]
    L >>= 1;
   337dc:	084f      	lsrs	r7, r1, #1
    float32_t * p2 = p1 + L;
   337de:	008b      	lsls	r3, r1, #2
    *p1++ = p1ap3_0 + p2[0] + p4[0];
   337e0:	4601      	mov	r1, r0
   337e2:	3108      	adds	r1, #8
    t2[1] = p1sp3_1 - p2[0] + p4[0];
   337e4:	ee74 4aa5 	vadd.f32	s9, s9, s11
    t3[0] = p1ap3_0 - p2[0] - p4[0];
   337e8:	ee76 6ae5 	vsub.f32	s13, s13, s11
    t4[1] = p1sp3_1 + p2[0] - p4[0];
   337ec:	ee37 7a65 	vsub.f32	s14, s14, s11
    *p1++ = p1ap3_0 + p2[0] + p4[0];
   337f0:	9103      	str	r1, [sp, #12]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
   337f2:	edd4 5a01 	vldr	s11, [r4, #4]
    L >>= 1;
   337f6:	970a      	str	r7, [sp, #40]	; 0x28
    *p1++ = p1ap3_1 + p2[1] + p4[1];
   337f8:	ee36 6a23 	vadd.f32	s12, s12, s7

    /* Twiddle factors are ones */
    *p2++ = t2[0];
   337fc:	4629      	mov	r1, r5
   337fe:	3108      	adds	r1, #8
   33800:	9106      	str	r1, [sp, #24]
    t2[0] = p1sp3_0 + p2[1] - p4[1];
   33802:	ee34 4a43 	vsub.f32	s8, s8, s6
    *p2++ = t2[1];
    *p3++ = t3[0];
   33806:	4611      	mov	r1, r2
    t3[1] = p1ap3_1 - p2[1] - p4[1];
   33808:	ee35 5a43 	vsub.f32	s10, s10, s6
    *p1++ = p1ap3_1 + p2[1] + p4[1];
   3380c:	ee36 6a25 	vadd.f32	s12, s12, s11
    *p3++ = t3[0];
   33810:	3108      	adds	r1, #8
    *p1++ = p1ap3_1 + p2[1] + p4[1];
   33812:	ed80 6a01 	vstr	s12, [r0, #4]
    *p3++ = t3[0];
   33816:	9105      	str	r1, [sp, #20]
    *p2++ = t2[0];
   33818:	ed85 4a00 	vstr	s8, [r5]
    *p2++ = t2[1];
   3381c:	edc5 4a01 	vstr	s9, [r5, #4]
    *p3++ = t3[1];
   33820:	4611      	mov	r1, r2
    *p3++ = t3[0];
   33822:	edc2 6a00 	vstr	s13, [r2]
    *p3++ = t3[1];
   33826:	ed82 5a01 	vstr	s10, [r2, #4]
    *p4++ = t4[0];
   3382a:	4622      	mov	r2, r4
   3382c:	3208      	adds	r2, #8
   3382e:	9204      	str	r2, [sp, #16]
    t4[0] = p1sp3_0 - p2[1] + p4[1];
   33830:	ee77 7a83 	vadd.f32	s15, s15, s6

    tw2 += twMod2;
    tw3 += twMod3;
    tw4 += twMod4;

    for (l = (L - 2) >> 1; l > 0; l-- )
   33834:	1eba      	subs	r2, r7, #2
    tw2 += twMod2;
   33836:	f106 0708 	add.w	r7, r6, #8
   3383a:	9702      	str	r7, [sp, #8]
    tw3 += twMod3;
   3383c:	f106 0710 	add.w	r7, r6, #16
    *p4++ = t4[0];
   33840:	edc4 7a00 	vstr	s15, [r4]
    *p4++ = t4[1];
   33844:	ed84 7a01 	vstr	s14, [r4, #4]
    for (l = (L - 2) >> 1; l > 0; l-- )
   33848:	0852      	lsrs	r2, r2, #1
    tw3 += twMod3;
   3384a:	9700      	str	r7, [sp, #0]
    tw4 += twMod4;
   3384c:	f106 0718 	add.w	r7, r6, #24
   33850:	9701      	str	r7, [sp, #4]
    for (l = (L - 2) >> 1; l > 0; l-- )
   33852:	9207      	str	r2, [sp, #28]
   33854:	f000 813c 	beq.w	33ad0 <arm_cfft_radix8by4_f32+0x374>
   33858:	4693      	mov	fp, r2
   3385a:	f1a5 020c 	sub.w	r2, r5, #12
   3385e:	920d      	str	r2, [sp, #52]	; 0x34
   33860:	3b0c      	subs	r3, #12
   33862:	460a      	mov	r2, r1
   33864:	f106 0920 	add.w	r9, r6, #32
   33868:	f106 0830 	add.w	r8, r6, #48	; 0x30
   3386c:	f8dd a000 	ldr.w	sl, [sp]
   33870:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   33872:	f100 0710 	add.w	r7, r0, #16
   33876:	f102 0e10 	add.w	lr, r2, #16
   3387a:	4423      	add	r3, r4
   3387c:	f105 0010 	add.w	r0, r5, #16
   33880:	390c      	subs	r1, #12
   33882:	f1a4 0c0c 	sub.w	ip, r4, #12
   33886:	f104 0210 	add.w	r2, r4, #16
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
   3388a:	ed1e 5a02 	vldr	s10, [lr, #-8]
   3388e:	ed57 4a02 	vldr	s9, [r7, #-8]
      p1sp3_0 = p1[0] - p3[0];
      p1ap3_1 = p1[1] + p3[1];
      p1sp3_1 = p1[1] - p3[1];
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
      t2[1] = p1sp3_1 - p2[0] + p4[0];
   33892:	ed50 7a02 	vldr	s15, [r0, #-8]
   33896:	ed12 1a02 	vldr	s2, [r2, #-8]
      p1ap3_1 = p1[1] + p3[1];
   3389a:	ed5e 6a01 	vldr	s13, [lr, #-4]
   3389e:	ed17 8a01 	vldr	s16, [r7, #-4]
      t2[0] = p1sp3_0 + p2[1] - p4[1];
   338a2:	ed52 0a01 	vldr	s1, [r2, #-4]
   338a6:	ed50 5a01 	vldr	s11, [r0, #-4]
      p1ap3_0 = p1[0] + p3[0];
   338aa:	ee34 3a85 	vadd.f32	s6, s9, s10
      p1ap3_1 = p1[1] + p3[1];
   338ae:	ee38 6a26 	vadd.f32	s12, s16, s13
      t3[1] = p1ap3_1 - p2[1] - p4[1];
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
      t4[1] = p1sp3_1 + p2[0] - p4[0];
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
   338b2:	ee37 7a83 	vadd.f32	s14, s15, s6
      p1sp3_1 = p1[1] - p3[1];
   338b6:	ee38 8a66 	vsub.f32	s16, s16, s13
      *p1++ = p1ap3_0 + p2[0] + p4[0];
   338ba:	ee37 7a01 	vadd.f32	s14, s14, s2
      p1sp3_0 = p1[0] - p3[0];
   338be:	ee34 5ac5 	vsub.f32	s10, s9, s10
      *p1++ = p1ap3_0 + p2[0] + p4[0];
   338c2:	ed07 7a02 	vstr	s14, [r7, #-8]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
   338c6:	ed10 7a01 	vldr	s14, [r0, #-4]
   338ca:	ed12 4a01 	vldr	s8, [r2, #-4]
   338ce:	ee36 7a07 	vadd.f32	s14, s12, s14
      t2[0] = p1sp3_0 + p2[1] - p4[1];
   338d2:	ee35 aa85 	vadd.f32	s20, s11, s10
      *p1++ = p1ap3_1 + p2[1] + p4[1];
   338d6:	ee37 7a04 	vadd.f32	s14, s14, s8
      t2[0] = p1sp3_0 + p2[1] - p4[1];
   338da:	ee3a aa60 	vsub.f32	s20, s20, s1
      *p1++ = p1ap3_1 + p2[1] + p4[1];
   338de:	ed07 7a01 	vstr	s14, [r7, #-4]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
   338e2:	ed9c 2a02 	vldr	s4, [ip, #8]
   338e6:	ed96 7a02 	vldr	s14, [r6, #8]
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
   338ea:	edd1 aa02 	vldr	s21, [r1, #8]
   338ee:	edd3 9a02 	vldr	s19, [r3, #8]
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
   338f2:	eddc 2a01 	vldr	s5, [ip, #4]
   338f6:	edd6 1a01 	vldr	s3, [r6, #4]
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
   338fa:	edd3 4a01 	vldr	s9, [r3, #4]
   338fe:	ed91 0a01 	vldr	s0, [r1, #4]
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
   33902:	ee77 6a02 	vadd.f32	s13, s14, s4
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
   33906:	ee71 3aa2 	vadd.f32	s7, s3, s5
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
   3390a:	ee3a 4aa6 	vadd.f32	s8, s21, s13
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
   3390e:	ee37 2a42 	vsub.f32	s4, s14, s4
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
   33912:	ee34 4a29 	vadd.f32	s8, s8, s19
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
   33916:	ee71 1ae2 	vsub.f32	s3, s3, s5
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
   3391a:	ed86 4a02 	vstr	s8, [r6, #8]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
   3391e:	ed91 4a01 	vldr	s8, [r1, #4]
   33922:	edd3 8a01 	vldr	s17, [r3, #4]
   33926:	ee33 4a84 	vadd.f32	s8, s7, s8
      t2[1] = p1sp3_1 - p2[0] + p4[0];
   3392a:	ee78 2a67 	vsub.f32	s5, s16, s15
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
   3392e:	ee34 7a28 	vadd.f32	s14, s8, s17
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
   33932:	ee32 9a40 	vsub.f32	s18, s4, s0
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
   33936:	ee3a 4ae9 	vsub.f32	s8, s21, s19
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
   3393a:	ed86 7a01 	vstr	s14, [r6, #4]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
   3393e:	ed1a 7a02 	vldr	s14, [sl, #-8]
      twI = *tw2++;
   33942:	ed1a ba01 	vldr	s22, [sl, #-4]
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
   33946:	ee74 8a21 	vadd.f32	s17, s8, s3
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
   3394a:	ee39 9a24 	vadd.f32	s18, s18, s9
      t2[1] = p1sp3_1 - p2[0] + p4[0];
   3394e:	ee72 2a81 	vadd.f32	s5, s5, s2
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
   33952:	ee2a ca07 	vmul.f32	s24, s20, s14
      *p2++ = m0 + m1;
      *p2++ = m2 - m3;
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
   33956:	ee69 ba0b 	vmul.f32	s23, s18, s22
      m3 = t2[0] * twI;
   3395a:	ee2a aa0b 	vmul.f32	s20, s20, s22
      m1 = t2[2] * twR;
      m2 = t2[2] * twI;
      m3 = t2[3] * twR;
   3395e:	ee29 9a07 	vmul.f32	s18, s18, s14
      m1 = t2[1] * twI;
   33962:	ee22 da8b 	vmul.f32	s26, s5, s22
      m1 = t2[2] * twR;
   33966:	ee68 ca87 	vmul.f32	s25, s17, s14
      m2 = t2[1] * twR;
   3396a:	ee62 2a87 	vmul.f32	s5, s5, s14
      m2 = t2[2] * twI;
   3396e:	ee68 8a8b 	vmul.f32	s17, s17, s22
      *p2++ = m2 - m3;
   33972:	ee72 2aca 	vsub.f32	s5, s5, s20

      *pEnd2-- = m0 - m1;
      *pEnd2-- = m2 + m3;
   33976:	ee78 8a89 	vadd.f32	s17, s17, s18
      *pEnd2-- = m0 - m1;
   3397a:	ee3b 7aec 	vsub.f32	s14, s23, s25
      *p2++ = m0 + m1;
   3397e:	ee3c ba0d 	vadd.f32	s22, s24, s26
      t3[0] = p1ap3_0 - p2[0] - p4[0];
   33982:	ee33 3a67 	vsub.f32	s6, s6, s15
      t3[1] = p1ap3_1 - p2[1] - p4[1];
   33986:	ee36 6a65 	vsub.f32	s12, s12, s11
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
   3398a:	ee76 6aea 	vsub.f32	s13, s13, s21
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
   3398e:	ee73 3ac0 	vsub.f32	s7, s7, s0
      *p2++ = m0 + m1;
   33992:	ed00 ba02 	vstr	s22, [r0, #-8]
      *p2++ = m2 - m3;
   33996:	ed40 2a01 	vstr	s5, [r0, #-4]
      *pEnd2-- = m0 - m1;
   3399a:	ed81 7a02 	vstr	s14, [r1, #8]
      *pEnd2-- = m2 + m3;
   3399e:	edc1 8a01 	vstr	s17, [r1, #4]

      /* COL 3 */
      twR = tw3[0];
   339a2:	ed59 2a04 	vldr	s5, [r9, #-16]
      twI = tw3[1];
   339a6:	ed59 8a03 	vldr	s17, [r9, #-12]
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
   339aa:	ee73 3ae4 	vsub.f32	s7, s7, s9
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
   339ae:	ee36 7ae9 	vsub.f32	s14, s13, s19
      t3[0] = p1ap3_0 - p2[0] - p4[0];
   339b2:	ee33 3a41 	vsub.f32	s6, s6, s2
      t3[1] = p1ap3_1 - p2[1] - p4[1];
   339b6:	ee36 6a60 	vsub.f32	s12, s12, s1
      *p3++ = m0 + m1;
      *p3++ = m2 - m3;
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
   339ba:	ee67 6a62 	vnmul.f32	s13, s14, s5
      m0 = t3[0] * twR;
   339be:	ee23 9a22 	vmul.f32	s18, s6, s5
      m1 = t3[1] * twI;
   339c2:	ee26 aa28 	vmul.f32	s20, s12, s17
      m3 = t3[0] * twI;
   339c6:	ee23 3a28 	vmul.f32	s6, s6, s17
      m2 = t3[1] * twR;
   339ca:	ee26 6a22 	vmul.f32	s12, s12, s5
      m1 =  t3[2] * twI;
   339ce:	ee63 9aa8 	vmul.f32	s19, s7, s17
      m2 =  t3[2] * twR;
      m3 =  t3[3] * twI;
   339d2:	ee27 7a28 	vmul.f32	s14, s14, s17
      m2 =  t3[2] * twR;
   339d6:	ee63 3aa2 	vmul.f32	s7, s7, s5
      *p3++ = m2 - m3;
   339da:	ee36 6a43 	vsub.f32	s12, s12, s6

      *pEnd3-- = m0 - m1;
      *pEnd3-- = m3 - m2;
   339de:	ee37 7a63 	vsub.f32	s14, s14, s7
      *pEnd3-- = m0 - m1;
   339e2:	ee36 3ae9 	vsub.f32	s6, s13, s19
      *p3++ = m0 + m1;
   339e6:	ee79 2a0a 	vadd.f32	s5, s18, s20
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
   339ea:	ee74 6ac0 	vsub.f32	s13, s9, s0
      t4[0] = p1sp3_0 - p2[1] + p4[1];
   339ee:	ee75 5a65 	vsub.f32	s11, s10, s11
      t4[1] = p1sp3_1 + p2[0] - p4[0];
   339f2:	ee77 7a88 	vadd.f32	s15, s15, s16
      *p3++ = m0 + m1;
   339f6:	ed4e 2a02 	vstr	s5, [lr, #-8]
      *p3++ = m2 - m3;
   339fa:	ed0e 6a01 	vstr	s12, [lr, #-4]
      *pEnd3-- = m0 - m1;
   339fe:	ed8c 3a02 	vstr	s6, [ip, #8]
      *pEnd3-- = m3 - m2;
   33a02:	ed8c 7a01 	vstr	s14, [ip, #4]

      /* COL 4 */
      twR = tw4[0];
   33a06:	ed18 5a06 	vldr	s10, [r8, #-24]	; 0xffffffe8
      twI = tw4[1];
   33a0a:	ed58 4a05 	vldr	s9, [r8, #-20]	; 0xffffffec
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
   33a0e:	ee34 6a61 	vsub.f32	s12, s8, s3
      t4[0] = p1sp3_0 - p2[1] + p4[1];
   33a12:	ee75 5aa0 	vadd.f32	s11, s11, s1
      t4[1] = p1sp3_1 + p2[0] - p4[0];
   33a16:	ee77 7ac1 	vsub.f32	s15, s15, s2
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
   33a1a:	ee36 7ac2 	vsub.f32	s14, s13, s4
      *p4++ = m2 - m3;
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
      m1 = t4[2] * twR;
   33a1e:	ee66 3a05 	vmul.f32	s7, s12, s10
      m0 = t4[0] * twR;
   33a22:	ee25 4a85 	vmul.f32	s8, s11, s10
      m1 = t4[1] * twI;
   33a26:	ee27 3aa4 	vmul.f32	s6, s15, s9
      m0 = t4[3] * twI;
   33a2a:	ee67 6a24 	vmul.f32	s13, s14, s9
      m2 = t4[1] * twR;
   33a2e:	ee67 7a85 	vmul.f32	s15, s15, s10
      m2 = t4[2] * twI;
      m3 = t4[3] * twR;
   33a32:	ee27 7a05 	vmul.f32	s14, s14, s10
      m3 = t4[0] * twI;
   33a36:	ee65 5aa4 	vmul.f32	s11, s11, s9
      m2 = t4[2] * twI;
   33a3a:	ee26 6a24 	vmul.f32	s12, s12, s9
      *p4++ = m0 + m1;
   33a3e:	ee34 5a03 	vadd.f32	s10, s8, s6
      *p4++ = m2 - m3;
   33a42:	ee77 7ae5 	vsub.f32	s15, s15, s11

      *pEnd4-- = m0 - m1;
   33a46:	ee76 6ae3 	vsub.f32	s13, s13, s7
      *pEnd4-- = m2 + m3;
   33a4a:	ee36 7a07 	vadd.f32	s14, s12, s14
    for (l = (L - 2) >> 1; l > 0; l-- )
   33a4e:	f1bb 0b01 	subs.w	fp, fp, #1
      *p4++ = m0 + m1;
   33a52:	ed02 5a02 	vstr	s10, [r2, #-8]
      *p4++ = m2 - m3;
   33a56:	ed42 7a01 	vstr	s15, [r2, #-4]
    for (l = (L - 2) >> 1; l > 0; l-- )
   33a5a:	f107 0708 	add.w	r7, r7, #8
      *pEnd4-- = m0 - m1;
   33a5e:	edc3 6a02 	vstr	s13, [r3, #8]
      *pEnd4-- = m2 + m3;
   33a62:	ed83 7a01 	vstr	s14, [r3, #4]
    for (l = (L - 2) >> 1; l > 0; l-- )
   33a66:	f1a6 0608 	sub.w	r6, r6, #8
   33a6a:	f10a 0a08 	add.w	sl, sl, #8
   33a6e:	f100 0008 	add.w	r0, r0, #8
   33a72:	f1a1 0108 	sub.w	r1, r1, #8
   33a76:	f109 0910 	add.w	r9, r9, #16
   33a7a:	f10e 0e08 	add.w	lr, lr, #8
   33a7e:	f1ac 0c08 	sub.w	ip, ip, #8
   33a82:	f108 0818 	add.w	r8, r8, #24
   33a86:	f102 0208 	add.w	r2, r2, #8
   33a8a:	f1a3 0308 	sub.w	r3, r3, #8
   33a8e:	f47f aefc 	bne.w	3388a <arm_cfft_radix8by4_f32+0x12e>
      *p1++ = p1ap3_1 + p2[1] + p4[1];
   33a92:	9b07      	ldr	r3, [sp, #28]
   33a94:	9a03      	ldr	r2, [sp, #12]
   33a96:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   33a9a:	9203      	str	r2, [sp, #12]
      twI = *tw2++;
   33a9c:	9a02      	ldr	r2, [sp, #8]
   33a9e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   33aa2:	9202      	str	r2, [sp, #8]
      *p2++ = m2 - m3;
   33aa4:	9a06      	ldr	r2, [sp, #24]
   33aa6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   33aaa:	9206      	str	r2, [sp, #24]
      tw3 += twMod3;
   33aac:	9a00      	ldr	r2, [sp, #0]
   33aae:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   33ab2:	9200      	str	r2, [sp, #0]
      *p3++ = m2 - m3;
   33ab4:	9a05      	ldr	r2, [sp, #20]
   33ab6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   33aba:	9205      	str	r2, [sp, #20]
      *p4++ = m2 - m3;
   33abc:	9a04      	ldr	r2, [sp, #16]
   33abe:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   33ac2:	9204      	str	r2, [sp, #16]
      tw4 += twMod4;
   33ac4:	9a01      	ldr	r2, [sp, #4]
   33ac6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   33aca:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   33ace:	9301      	str	r3, [sp, #4]
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
   33ad0:	9a03      	ldr	r2, [sp, #12]
   33ad2:	9905      	ldr	r1, [sp, #20]
   33ad4:	edd2 4a00 	vldr	s9, [r2]
   33ad8:	edd1 6a00 	vldr	s13, [r1]
    p1ap3_1 = p1[1] + p3[1];
    p1sp3_1 = p1[1] - p3[1];

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
    t2[1] = p1sp3_1 - p2[0] + p4[0];
   33adc:	9b06      	ldr	r3, [sp, #24]
   33ade:	9e04      	ldr	r6, [sp, #16]
   33ae0:	edd3 7a00 	vldr	s15, [r3]
   33ae4:	edd6 3a00 	vldr	s7, [r6]
    p1ap3_1 = p1[1] + p3[1];
   33ae8:	ed91 5a01 	vldr	s10, [r1, #4]
   33aec:	ed92 4a01 	vldr	s8, [r2, #4]
    t2[0] = p1sp3_0 + p2[1] - p4[1];
   33af0:	edd3 2a01 	vldr	s5, [r3, #4]
   33af4:	ed96 3a01 	vldr	s6, [r6, #4]

    *p4++ = m0 + m1;
    *p4++ = m2 - m3;

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
   33af8:	980c      	ldr	r0, [sp, #48]	; 0x30
    p1ap3_0 = p1[0] + p3[0];
   33afa:	ee34 6aa6 	vadd.f32	s12, s9, s13
    p1ap3_1 = p1[1] + p3[1];
   33afe:	ee34 7a05 	vadd.f32	s14, s8, s10
    *p1++ = p1ap3_0 + p2[0] + p4[0];
   33b02:	ee77 5a86 	vadd.f32	s11, s15, s12
    p1sp3_0 = p1[0] - p3[0];
   33b06:	ee74 6ae6 	vsub.f32	s13, s9, s13
    *p1++ = p1ap3_0 + p2[0] + p4[0];
   33b0a:	ee75 5aa3 	vadd.f32	s11, s11, s7
    p1sp3_1 = p1[1] - p3[1];
   33b0e:	ee34 4a45 	vsub.f32	s8, s8, s10
    *p1++ = p1ap3_0 + p2[0] + p4[0];
   33b12:	edc2 5a00 	vstr	s11, [r2]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
   33b16:	edd3 5a01 	vldr	s11, [r3, #4]
   33b1a:	edd6 4a01 	vldr	s9, [r6, #4]
   33b1e:	ee77 5a25 	vadd.f32	s11, s14, s11
    t2[1] = p1sp3_1 - p2[0] + p4[0];
   33b22:	ee34 5a67 	vsub.f32	s10, s8, s15
    *p1++ = p1ap3_1 + p2[1] + p4[1];
   33b26:	ee75 5aa4 	vadd.f32	s11, s11, s9
    t2[0] = p1sp3_0 + p2[1] - p4[1];
   33b2a:	ee72 4aa6 	vadd.f32	s9, s5, s13
    *p1++ = p1ap3_1 + p2[1] + p4[1];
   33b2e:	edc2 5a01 	vstr	s11, [r2, #4]
    twR = tw2[0];
   33b32:	9a02      	ldr	r2, [sp, #8]
    t2[1] = p1sp3_1 - p2[0] + p4[0];
   33b34:	ee75 5a23 	vadd.f32	s11, s10, s7
    twR = tw2[0];
   33b38:	edd2 1a00 	vldr	s3, [r2]
    twI = tw2[1];
   33b3c:	ed92 2a01 	vldr	s4, [r2, #4]
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
   33b40:	9a09      	ldr	r2, [sp, #36]	; 0x24
    t2[0] = p1sp3_0 + p2[1] - p4[1];
   33b42:	ee74 4ac3 	vsub.f32	s9, s9, s6
    m1 = t2[1] * twI;
   33b46:	ee25 1a82 	vmul.f32	s2, s11, s4
    m0 = t2[0] * twR;
   33b4a:	ee24 5aa1 	vmul.f32	s10, s9, s3
    m2 = t2[1] * twR;
   33b4e:	ee65 5aa1 	vmul.f32	s11, s11, s3
    m3 = t2[0] * twI;
   33b52:	ee64 4a82 	vmul.f32	s9, s9, s4
    *p2++ = m0 + m1;
   33b56:	ee35 5a01 	vadd.f32	s10, s10, s2
    *p2++ = m2 - m3;
   33b5a:	ee75 5ae4 	vsub.f32	s11, s11, s9
    *p2++ = m0 + m1;
   33b5e:	ed83 5a00 	vstr	s10, [r3]
    *p2++ = m2 - m3;
   33b62:	edc3 5a01 	vstr	s11, [r3, #4]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
   33b66:	ee37 7a62 	vsub.f32	s14, s14, s5
    twR = tw3[0];
   33b6a:	9b00      	ldr	r3, [sp, #0]
    t3[0] = p1ap3_0 - p2[0] - p4[0];
   33b6c:	ee36 6a67 	vsub.f32	s12, s12, s15
    twR = tw3[0];
   33b70:	edd3 4a00 	vldr	s9, [r3]
    twI = tw3[1];
   33b74:	ed93 5a01 	vldr	s10, [r3, #4]
    twR = tw4[0];
   33b78:	9b01      	ldr	r3, [sp, #4]
    t3[0] = p1ap3_0 - p2[0] - p4[0];
   33b7a:	ee36 6a63 	vsub.f32	s12, s12, s7
    t3[1] = p1ap3_1 - p2[1] - p4[1];
   33b7e:	ee37 7a43 	vsub.f32	s14, s14, s6
    m0 = t3[0] * twR;
   33b82:	ee66 5a24 	vmul.f32	s11, s12, s9
    m1 = t3[1] * twI;
   33b86:	ee27 2a05 	vmul.f32	s4, s14, s10
    m3 = t3[0] * twI;
   33b8a:	ee26 6a05 	vmul.f32	s12, s12, s10
    m2 = t3[1] * twR;
   33b8e:	ee27 7a24 	vmul.f32	s14, s14, s9
    *p3++ = m0 + m1;
   33b92:	ee75 5a82 	vadd.f32	s11, s11, s4
    *p3++ = m2 - m3;
   33b96:	ee37 7a46 	vsub.f32	s14, s14, s12
    t4[0] = p1sp3_0 - p2[1] + p4[1];
   33b9a:	ee76 6ae2 	vsub.f32	s13, s13, s5
    t4[1] = p1sp3_1 + p2[0] - p4[0];
   33b9e:	ee77 7a84 	vadd.f32	s15, s15, s8
    *p3++ = m2 - m3;
   33ba2:	ed81 7a01 	vstr	s14, [r1, #4]
    *p3++ = m0 + m1;
   33ba6:	edc1 5a00 	vstr	s11, [r1]
    twR = tw4[0];
   33baa:	edd3 5a00 	vldr	s11, [r3]
    twI = tw4[1];
   33bae:	ed93 6a01 	vldr	s12, [r3, #4]
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
   33bb2:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
    t4[0] = p1sp3_0 - p2[1] + p4[1];
   33bb6:	ee36 7a83 	vadd.f32	s14, s13, s6
    t4[1] = p1sp3_1 + p2[0] - p4[0];
   33bba:	ee77 7ae3 	vsub.f32	s15, s15, s7
    m0 = t4[0] * twR;
   33bbe:	ee67 6a25 	vmul.f32	s13, s14, s11
    m1 = t4[1] * twI;
   33bc2:	ee27 5a86 	vmul.f32	s10, s15, s12
    m3 = t4[0] * twI;
   33bc6:	ee27 7a06 	vmul.f32	s14, s14, s12
    m2 = t4[1] * twR;
   33bca:	ee67 7aa5 	vmul.f32	s15, s15, s11
    *p4++ = m0 + m1;
   33bce:	ee76 6a85 	vadd.f32	s13, s13, s10
    *p4++ = m2 - m3;
   33bd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
    *p4++ = m0 + m1;
   33bd6:	edc6 6a00 	vstr	s13, [r6]
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
   33bda:	2304      	movs	r3, #4
    *p4++ = m2 - m3;
   33bdc:	edc6 7a01 	vstr	s15, [r6, #4]
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
   33be0:	9100      	str	r1, [sp, #0]
   33be2:	f000 f891 	bl	33d08 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
   33be6:	4628      	mov	r0, r5
   33be8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   33bea:	9900      	ldr	r1, [sp, #0]
   33bec:	686a      	ldr	r2, [r5, #4]
   33bee:	2304      	movs	r3, #4
   33bf0:	f000 f88a 	bl	33d08 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
   33bf4:	9808      	ldr	r0, [sp, #32]
   33bf6:	686a      	ldr	r2, [r5, #4]
   33bf8:	9900      	ldr	r1, [sp, #0]
   33bfa:	2304      	movs	r3, #4
   33bfc:	f000 f884 	bl	33d08 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
   33c00:	686a      	ldr	r2, [r5, #4]
   33c02:	9900      	ldr	r1, [sp, #0]
   33c04:	2304      	movs	r3, #4
   33c06:	4620      	mov	r0, r4
}
   33c08:	b00f      	add	sp, #60	; 0x3c
   33c0a:	ecbd 8b0c 	vpop	{d8-d13}
   33c0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
   33c12:	f000 b879 	b.w	33d08 <arm_radix8_butterfly_f32>
   33c16:	bf00      	nop

00033c18 <arm_cfft_f32>:
        uint8_t bitReverseFlag)
{
  uint32_t  L = S->fftLen, l;
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
   33c18:	2a01      	cmp	r2, #1
{
   33c1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t  L = S->fftLen, l;
   33c1e:	8805      	ldrh	r5, [r0, #0]
{
   33c20:	4606      	mov	r6, r0
   33c22:	4617      	mov	r7, r2
   33c24:	460c      	mov	r4, r1
   33c26:	4698      	mov	r8, r3
  if (ifftFlag == 1U)
   33c28:	d05a      	beq.n	33ce0 <arm_cfft_f32+0xc8>
      *pSrc = -*pSrc;
      pSrc += 2;
    }
  }

  switch (L)
   33c2a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
   33c2e:	d052      	beq.n	33cd6 <arm_cfft_f32+0xbe>
   33c30:	d80f      	bhi.n	33c52 <arm_cfft_f32+0x3a>
   33c32:	2d40      	cmp	r5, #64	; 0x40
   33c34:	d014      	beq.n	33c60 <arm_cfft_f32+0x48>
   33c36:	d94a      	bls.n	33cce <arm_cfft_f32+0xb6>
   33c38:	2d80      	cmp	r5, #128	; 0x80
   33c3a:	d103      	bne.n	33c44 <arm_cfft_f32+0x2c>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
   33c3c:	4621      	mov	r1, r4
   33c3e:	4630      	mov	r0, r6
   33c40:	f7ff fcb6 	bl	335b0 <arm_cfft_radix8by2_f32>
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
    break;
  }

  if ( bitReverseFlag )
   33c44:	f1b8 0f00 	cmp.w	r8, #0
   33c48:	d113      	bne.n	33c72 <arm_cfft_f32+0x5a>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);

  if (ifftFlag == 1U)
   33c4a:	2f01      	cmp	r7, #1
   33c4c:	d018      	beq.n	33c80 <arm_cfft_f32+0x68>
      *pSrc++ *=   invL ;
      *pSrc    = -(*pSrc) * invL;
      pSrc++;
    }
  }
}
   33c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (L)
   33c52:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
   33c56:	d03e      	beq.n	33cd6 <arm_cfft_f32+0xbe>
   33c58:	d932      	bls.n	33cc0 <arm_cfft_f32+0xa8>
   33c5a:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   33c5e:	d1f1      	bne.n	33c44 <arm_cfft_f32+0x2c>
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
   33c60:	6872      	ldr	r2, [r6, #4]
   33c62:	2301      	movs	r3, #1
   33c64:	4629      	mov	r1, r5
   33c66:	4620      	mov	r0, r4
   33c68:	f000 f84e 	bl	33d08 <arm_radix8_butterfly_f32>
  if ( bitReverseFlag )
   33c6c:	f1b8 0f00 	cmp.w	r8, #0
   33c70:	d0eb      	beq.n	33c4a <arm_cfft_f32+0x32>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
   33c72:	68b2      	ldr	r2, [r6, #8]
   33c74:	89b1      	ldrh	r1, [r6, #12]
   33c76:	4620      	mov	r0, r4
   33c78:	f000 faee 	bl	34258 <arm_bitreversal_32>
  if (ifftFlag == 1U)
   33c7c:	2f01      	cmp	r7, #1
   33c7e:	d1e6      	bne.n	33c4e <arm_cfft_f32+0x36>
    invL = 1.0f / (float32_t)L;
   33c80:	ee07 5a90 	vmov	s15, r5
   33c84:	eef8 7a67 	vcvt.f32.u32	s15, s15
   33c88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   33c8c:	eec7 6a27 	vdiv.f32	s13, s14, s15
    for (l= 0; l < L; l++)
   33c90:	2d00      	cmp	r5, #0
   33c92:	d0dc      	beq.n	33c4e <arm_cfft_f32+0x36>
   33c94:	f104 0108 	add.w	r1, r4, #8
   33c98:	2300      	movs	r3, #0
   33c9a:	3301      	adds	r3, #1
   33c9c:	429d      	cmp	r5, r3
   33c9e:	f101 0108 	add.w	r1, r1, #8
      *pSrc++ *=   invL ;
   33ca2:	ed11 7a04 	vldr	s14, [r1, #-16]
      *pSrc    = -(*pSrc) * invL;
   33ca6:	ed51 7a03 	vldr	s15, [r1, #-12]
      *pSrc++ *=   invL ;
   33caa:	ee27 7a26 	vmul.f32	s14, s14, s13
      *pSrc    = -(*pSrc) * invL;
   33cae:	ee67 7ae6 	vnmul.f32	s15, s15, s13
      *pSrc++ *=   invL ;
   33cb2:	ed01 7a04 	vstr	s14, [r1, #-16]
      *pSrc    = -(*pSrc) * invL;
   33cb6:	ed41 7a03 	vstr	s15, [r1, #-12]
    for (l= 0; l < L; l++)
   33cba:	d1ee      	bne.n	33c9a <arm_cfft_f32+0x82>
}
   33cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (L)
   33cc0:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   33cc4:	d0cc      	beq.n	33c60 <arm_cfft_f32+0x48>
   33cc6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   33cca:	d0b7      	beq.n	33c3c <arm_cfft_f32+0x24>
   33ccc:	e7ba      	b.n	33c44 <arm_cfft_f32+0x2c>
   33cce:	2d10      	cmp	r5, #16
   33cd0:	d0b4      	beq.n	33c3c <arm_cfft_f32+0x24>
   33cd2:	2d20      	cmp	r5, #32
   33cd4:	d1b6      	bne.n	33c44 <arm_cfft_f32+0x2c>
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
   33cd6:	4621      	mov	r1, r4
   33cd8:	4630      	mov	r0, r6
   33cda:	f7ff fd3f 	bl	3375c <arm_cfft_radix8by4_f32>
    break;
   33cde:	e7b1      	b.n	33c44 <arm_cfft_f32+0x2c>
    for (l = 0; l < L; l++)
   33ce0:	b17d      	cbz	r5, 33d02 <arm_cfft_f32+0xea>
   33ce2:	310c      	adds	r1, #12
   33ce4:	f04f 0c00 	mov.w	ip, #0
      *pSrc = -*pSrc;
   33ce8:	ed51 7a02 	vldr	s15, [r1, #-8]
    for (l = 0; l < L; l++)
   33cec:	f10c 0c01 	add.w	ip, ip, #1
      *pSrc = -*pSrc;
   33cf0:	eef1 7a67 	vneg.f32	s15, s15
    for (l = 0; l < L; l++)
   33cf4:	4565      	cmp	r5, ip
      *pSrc = -*pSrc;
   33cf6:	ed41 7a02 	vstr	s15, [r1, #-8]
    for (l = 0; l < L; l++)
   33cfa:	f101 0108 	add.w	r1, r1, #8
   33cfe:	d1f3      	bne.n	33ce8 <arm_cfft_f32+0xd0>
   33d00:	e793      	b.n	33c2a <arm_cfft_f32+0x12>
  if ( bitReverseFlag )
   33d02:	2b00      	cmp	r3, #0
   33d04:	d0a3      	beq.n	33c4e <arm_cfft_f32+0x36>
   33d06:	e7b4      	b.n	33c72 <arm_cfft_f32+0x5a>

00033d08 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
   33d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33d0c:	ed2d 8b10 	vpush	{d8-d15}
   33d10:	b08f      	sub	sp, #60	; 0x3c
   33d12:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
   33d16:	4603      	mov	r3, r0
   33d18:	3304      	adds	r3, #4
         pSrc[2 * i5 + 1] = r1 - r2;
         pSrc[2 * i3]     = t1 + s3;
         pSrc[2 * i7]     = t1 - s3;
         pSrc[2 * i3 + 1] = t2 - r3;
         pSrc[2 * i7 + 1] = t2 + r3;
         r1 = (r6 - r8) * C81;
   33d1a:	eddf 2ab1 	vldr	s5, [pc, #708]	; 33fe0 <arm_radix8_butterfly_f32+0x2d8>
{
   33d1e:	900c      	str	r0, [sp, #48]	; 0x30
   33d20:	468a      	mov	sl, r1
   n2 = fftLen;
   33d22:	468b      	mov	fp, r1
   33d24:	930d      	str	r3, [sp, #52]	; 0x34
      n2 = n2 >> 3;
   33d26:	ea4f 07db 	mov.w	r7, fp, lsr #3
   33d2a:	eb07 0087 	add.w	r0, r7, r7, lsl #2
   33d2e:	00c0      	lsls	r0, r0, #3
   33d30:	9003      	str	r0, [sp, #12]
   33d32:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
   33d36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   33d38:	9709      	str	r7, [sp, #36]	; 0x24
      i1 = 0;
   33d3a:	ea4f 08c7 	mov.w	r8, r7, lsl #3
   33d3e:	ea4f 04cb 	mov.w	r4, fp, lsl #3
   33d42:	ea4f 1907 	mov.w	r9, r7, lsl #4
   33d46:	00c0      	lsls	r0, r0, #3
   33d48:	9401      	str	r4, [sp, #4]
   33d4a:	9006      	str	r0, [sp, #24]
   33d4c:	f108 0404 	add.w	r4, r8, #4
   33d50:	f109 0004 	add.w	r0, r9, #4
   33d54:	eb03 1147 	add.w	r1, r3, r7, lsl #5
   33d58:	eb07 0647 	add.w	r6, r7, r7, lsl #1
   33d5c:	441c      	add	r4, r3
   33d5e:	4418      	add	r0, r3
   33d60:	017b      	lsls	r3, r7, #5
   33d62:	9302      	str	r3, [sp, #8]
   33d64:	0133      	lsls	r3, r6, #4
   33d66:	eb01 1507 	add.w	r5, r1, r7, lsl #4
   33d6a:	eba7 0287 	sub.w	r2, r7, r7, lsl #2
   33d6e:	9304      	str	r3, [sp, #16]
   33d70:	00f3      	lsls	r3, r6, #3
   33d72:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
   33d76:	9305      	str	r3, [sp, #20]
   33d78:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   33d7a:	9b01      	ldr	r3, [sp, #4]
   33d7c:	eb01 0cc7 	add.w	ip, r1, r7, lsl #3
   33d80:	f04f 0e00 	mov.w	lr, #0
   33d84:	eb02 1747 	add.w	r7, r2, r7, lsl #5
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
   33d88:	ed9c 3a00 	vldr	s6, [ip]
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
   33d8c:	ed97 4a00 	vldr	s8, [r7]
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
   33d90:	ed56 aa01 	vldr	s21, [r6, #-4]
   33d94:	ed91 6a00 	vldr	s12, [r1]
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
   33d98:	ed54 7a01 	vldr	s15, [r4, #-4]
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
   33d9c:	ed10 aa01 	vldr	s20, [r0, #-4]
   33da0:	edd5 6a00 	vldr	s13, [r5]
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
   33da4:	edd2 4a00 	vldr	s9, [r2]
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
   33da8:	ee77 5a83 	vadd.f32	s11, s15, s6
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
   33dac:	ee34 0a84 	vadd.f32	s0, s9, s8
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
   33db0:	ee3a 8a26 	vadd.f32	s16, s20, s13
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
   33db4:	ee3a 5a86 	vadd.f32	s10, s21, s12
         r2 = r2 + r4;
   33db8:	ee75 3a80 	vadd.f32	s7, s11, s0
         r1 = r1 + r3;
   33dbc:	ee35 7a08 	vadd.f32	s14, s10, s16
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
   33dc0:	ee77 7ac3 	vsub.f32	s15, s15, s6
         pSrc[2 * i1] = r1 + r2;
   33dc4:	ee37 3a23 	vadd.f32	s6, s14, s7
         pSrc[2 * i5] = r1 - r2;
   33dc8:	ee37 7a63 	vsub.f32	s14, s14, s7
         pSrc[2 * i1] = r1 + r2;
   33dcc:	ed06 3a01 	vstr	s6, [r6, #-4]
         pSrc[2 * i5] = r1 - r2;
   33dd0:	ed81 7a00 	vstr	s14, [r1]
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
   33dd4:	eddc 1a01 	vldr	s3, [ip, #4]
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
   33dd8:	edd7 8a01 	vldr	s17, [r7, #4]
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
   33ddc:	ed94 7a00 	vldr	s14, [r4]
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
   33de0:	ed92 2a01 	vldr	s4, [r2, #4]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
   33de4:	edd6 9a00 	vldr	s19, [r6]
   33de8:	edd1 3a01 	vldr	s7, [r1, #4]
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
   33dec:	ed90 9a00 	vldr	s18, [r0]
   33df0:	ed95 3a01 	vldr	s6, [r5, #4]
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
   33df4:	ee74 4ac4 	vsub.f32	s9, s9, s8
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
   33df8:	ee32 ba68 	vsub.f32	s22, s4, s17
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
   33dfc:	ee37 4a61 	vsub.f32	s8, s14, s3
         r1 = (r6 - r8) * C81;
   33e00:	ee77 0ae4 	vsub.f32	s1, s15, s9
         r6 = (r6 + r8) * C81;
         r2 = (s6 - s8) * C81;
   33e04:	ee34 1a4b 	vsub.f32	s2, s8, s22
         r6 = (r6 + r8) * C81;
   33e08:	ee77 7aa4 	vadd.f32	s15, s15, s9
         s6 = (s6 + s8) * C81;
   33e0c:	ee34 4a0b 	vadd.f32	s8, s8, s22
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
   33e10:	ee32 2a28 	vadd.f32	s4, s4, s17
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
   33e14:	ee7a 6a66 	vsub.f32	s13, s20, s13
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
   33e18:	ee79 4aa3 	vadd.f32	s9, s19, s7
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
   33e1c:	ee37 7a21 	vadd.f32	s14, s14, s3
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
   33e20:	ee79 3ae3 	vsub.f32	s7, s19, s7
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
   33e24:	ee79 1a03 	vadd.f32	s3, s18, s6
         r1 = (r6 - r8) * C81;
   33e28:	ee60 0aa2 	vmul.f32	s1, s1, s5
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
   33e2c:	ee39 3a43 	vsub.f32	s6, s18, s6
         r2 = (s6 - s8) * C81;
   33e30:	ee21 1a22 	vmul.f32	s2, s2, s5
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
   33e34:	ee3a 6ac6 	vsub.f32	s12, s21, s12
         r6 = (r6 + r8) * C81;
   33e38:	ee67 7aa2 	vmul.f32	s15, s15, s5
         s6 = (s6 + s8) * C81;
   33e3c:	ee24 4a22 	vmul.f32	s8, s8, s5
         t1 = r1 - r3;
   33e40:	ee35 5a48 	vsub.f32	s10, s10, s16
         r3 = r2 - r4;
   33e44:	ee75 5ac0 	vsub.f32	s11, s11, s0
         s3 = r2 - r4;
   33e48:	ee37 8a42 	vsub.f32	s16, s14, s4
         t2 = r1 - s3;
   33e4c:	ee34 0ae1 	vsub.f32	s0, s9, s3
         r2 = r2 + r4;
   33e50:	ee37 7a02 	vadd.f32	s14, s14, s4
         r1 = r1 + s3;
   33e54:	ee74 4aa1 	vadd.f32	s9, s9, s3
         t1 = r5 - r1;
         r5 = r5 + r1;
         r8 = r7 - r6;
   33e58:	ee36 2ae7 	vsub.f32	s4, s13, s15
         t1 = r5 - r1;
   33e5c:	ee76 1a60 	vsub.f32	s3, s12, s1
         r7 = r7 + r6;
   33e60:	ee76 7aa7 	vadd.f32	s15, s13, s15
         r5 = r5 + r1;
   33e64:	ee36 6a20 	vadd.f32	s12, s12, s1
         t2 = s5 - r2;
         s5 = s5 + r2;
   33e68:	ee73 6a81 	vadd.f32	s13, s7, s2
         t2 = s5 - r2;
   33e6c:	ee73 0ac1 	vsub.f32	s1, s7, s2
         s8 = s7 - s6;
   33e70:	ee73 3a44 	vsub.f32	s7, s6, s8
         s7 = s7 + s6;
   33e74:	ee33 4a04 	vadd.f32	s8, s6, s8
         pSrc[2 * i1 + 1] = r1 + r2;
   33e78:	ee34 9a87 	vadd.f32	s18, s9, s14
         pSrc[2 * i2]     = r5 + s7;
   33e7c:	ee36 3a04 	vadd.f32	s6, s12, s8
         pSrc[2 * i5 + 1] = r1 - r2;
   33e80:	ee34 7ac7 	vsub.f32	s14, s9, s14
         pSrc[2 * i3]     = t1 + s3;
   33e84:	ee75 8a08 	vadd.f32	s17, s10, s16
         pSrc[2 * i8]     = r5 - s7;
         pSrc[2 * i6]     = t1 + s8;
         pSrc[2 * i4]     = t1 - s8;
         pSrc[2 * i2 + 1] = s5 - r7;
   33e88:	ee76 4ae7 	vsub.f32	s9, s13, s15
         pSrc[2 * i3 + 1] = t2 - r3;
   33e8c:	ee30 1a65 	vsub.f32	s2, s0, s11
         pSrc[2 * i8]     = r5 - s7;
   33e90:	ee36 6a44 	vsub.f32	s12, s12, s8
         pSrc[2 * i8 + 1] = s5 + r7;
   33e94:	ee77 7aa6 	vadd.f32	s15, s15, s13
         pSrc[2 * i6]     = t1 + s8;
   33e98:	ee31 4aa3 	vadd.f32	s8, s3, s7
         pSrc[2 * i6 + 1] = t2 - r8;
   33e9c:	ee70 6ac2 	vsub.f32	s13, s1, s4
         pSrc[2 * i7]     = t1 - s3;
   33ea0:	ee35 5a48 	vsub.f32	s10, s10, s16
         pSrc[2 * i7 + 1] = t2 + r3;
   33ea4:	ee75 5a80 	vadd.f32	s11, s11, s0
         pSrc[2 * i4]     = t1 - s8;
   33ea8:	ee71 1ae3 	vsub.f32	s3, s3, s7
         pSrc[2 * i4 + 1] = t2 + r8;
   33eac:	ee32 2a20 	vadd.f32	s4, s4, s1

         i1 += n1;
   33eb0:	44de      	add	lr, fp
      } while (i1 < fftLen);
   33eb2:	45f2      	cmp	sl, lr
         pSrc[2 * i1 + 1] = r1 + r2;
   33eb4:	ed86 9a00 	vstr	s18, [r6]
         pSrc[2 * i5 + 1] = r1 - r2;
   33eb8:	ed81 7a01 	vstr	s14, [r1, #4]
      } while (i1 < fftLen);
   33ebc:	441e      	add	r6, r3
         pSrc[2 * i3]     = t1 + s3;
   33ebe:	ed40 8a01 	vstr	s17, [r0, #-4]
      } while (i1 < fftLen);
   33ec2:	4419      	add	r1, r3
         pSrc[2 * i7]     = t1 - s3;
   33ec4:	ed85 5a00 	vstr	s10, [r5]
         pSrc[2 * i3 + 1] = t2 - r3;
   33ec8:	ed80 1a00 	vstr	s2, [r0]
         pSrc[2 * i7 + 1] = t2 + r3;
   33ecc:	edc5 5a01 	vstr	s11, [r5, #4]
      } while (i1 < fftLen);
   33ed0:	4418      	add	r0, r3
         pSrc[2 * i2]     = r5 + s7;
   33ed2:	ed04 3a01 	vstr	s6, [r4, #-4]
      } while (i1 < fftLen);
   33ed6:	441d      	add	r5, r3
         pSrc[2 * i8]     = r5 - s7;
   33ed8:	ed87 6a00 	vstr	s12, [r7]
         pSrc[2 * i6]     = t1 + s8;
   33edc:	ed8c 4a00 	vstr	s8, [ip]
         pSrc[2 * i4]     = t1 - s8;
   33ee0:	edc2 1a00 	vstr	s3, [r2]
         pSrc[2 * i2 + 1] = s5 - r7;
   33ee4:	edc4 4a00 	vstr	s9, [r4]
         pSrc[2 * i8 + 1] = s5 + r7;
   33ee8:	edc7 7a01 	vstr	s15, [r7, #4]
      } while (i1 < fftLen);
   33eec:	441c      	add	r4, r3
         pSrc[2 * i6 + 1] = t2 - r8;
   33eee:	edcc 6a01 	vstr	s13, [ip, #4]
      } while (i1 < fftLen);
   33ef2:	441f      	add	r7, r3
         pSrc[2 * i4 + 1] = t2 + r8;
   33ef4:	ed82 2a01 	vstr	s4, [r2, #4]
      } while (i1 < fftLen);
   33ef8:	449c      	add	ip, r3
   33efa:	441a      	add	r2, r3
   33efc:	f63f af44 	bhi.w	33d88 <arm_radix8_butterfly_f32+0x80>

      if (n2 < 8)
   33f00:	469c      	mov	ip, r3
   33f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
   33f04:	2b07      	cmp	r3, #7
   33f06:	f240 81a1 	bls.w	3424c <arm_radix8_butterfly_f32+0x544>
   33f0a:	9f02      	ldr	r7, [sp, #8]
   33f0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   33f0e:	9d03      	ldr	r5, [sp, #12]
   33f10:	9c04      	ldr	r4, [sp, #16]
   33f12:	9805      	ldr	r0, [sp, #20]
   33f14:	9906      	ldr	r1, [sp, #24]
   33f16:	3708      	adds	r7, #8
   33f18:	443b      	add	r3, r7
   33f1a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   33f1c:	9308      	str	r3, [sp, #32]
   33f1e:	f108 0608 	add.w	r6, r8, #8
   33f22:	19bb      	adds	r3, r7, r6
   33f24:	3508      	adds	r5, #8
   33f26:	3408      	adds	r4, #8
   33f28:	9307      	str	r3, [sp, #28]
   33f2a:	197b      	adds	r3, r7, r5
   33f2c:	3008      	adds	r0, #8
   33f2e:	9306      	str	r3, [sp, #24]
   33f30:	193b      	adds	r3, r7, r4
   33f32:	3108      	adds	r1, #8
   33f34:	9305      	str	r3, [sp, #20]
   33f36:	183b      	adds	r3, r7, r0
   33f38:	f109 020c 	add.w	r2, r9, #12
   33f3c:	9304      	str	r3, [sp, #16]
   33f3e:	187b      	adds	r3, r7, r1
   33f40:	9303      	str	r3, [sp, #12]
   33f42:	18bb      	adds	r3, r7, r2
   33f44:	9301      	str	r3, [sp, #4]
   33f46:	f107 030c 	add.w	r3, r7, #12
   33f4a:	9302      	str	r3, [sp, #8]
         break;

      ia1 = 0;
      j = 1;
   33f4c:	f04f 0901 	mov.w	r9, #1
      ia1 = 0;
   33f50:	f04f 0800 	mov.w	r8, #0
   33f54:	4663      	mov	r3, ip

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
   33f56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   33f58:	4490      	add	r8, r2
         ia4 = ia3 + id;
         ia5 = ia4 + id;
         ia6 = ia5 + id;
         ia7 = ia6 + id;

         co2 = pCoef[2 * ia1];
   33f5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   33f5c:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
   33f60:	edd2 fa00 	vldr	s31, [r2]
         co3 = pCoef[2 * ia2];
   33f64:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
   33f68:	ed92 fa00 	vldr	s30, [r2]
         co4 = pCoef[2 * ia3];
   33f6c:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
   33f70:	edd2 ea00 	vldr	s29, [r2]
         co5 = pCoef[2 * ia4];
   33f74:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
   33f78:	ed92 ea00 	vldr	s28, [r2]
         co6 = pCoef[2 * ia5];
   33f7c:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
   33f80:	edd2 da00 	vldr	s27, [r2]
         co7 = pCoef[2 * ia6];
   33f84:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
   33f88:	eba8 0188 	sub.w	r1, r8, r8, lsl #2
   33f8c:	ed92 da00 	vldr	s26, [r2]
         co8 = pCoef[2 * ia7];
   33f90:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
   33f94:	edd2 ca00 	vldr	s25, [r2]
         si3 = pCoef[2 * ia2 + 1];
         si4 = pCoef[2 * ia3 + 1];
         si5 = pCoef[2 * ia4 + 1];
         si6 = pCoef[2 * ia5 + 1];
         si7 = pCoef[2 * ia6 + 1];
         si8 = pCoef[2 * ia7 + 1];
   33f98:	ed92 ca01 	vldr	s24, [r2, #4]
   33f9c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
         si2 = pCoef[2 * ia1 + 1];
   33fa0:	edd2 ba01 	vldr	s23, [r2, #4]
         si3 = pCoef[2 * ia2 + 1];
   33fa4:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
   33fa8:	ed92 ba01 	vldr	s22, [r2, #4]
         si4 = pCoef[2 * ia3 + 1];
   33fac:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
   33fb0:	edd2 aa01 	vldr	s21, [r2, #4]
         si5 = pCoef[2 * ia4 + 1];
   33fb4:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
   33fb8:	ed92 aa01 	vldr	s20, [r2, #4]
         si6 = pCoef[2 * ia5 + 1];
   33fbc:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
   33fc0:	edd2 9a01 	vldr	s19, [r2, #4]
         si7 = pCoef[2 * ia6 + 1];
   33fc4:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
   33fc8:	ed92 9a01 	vldr	s18, [r2, #4]
         si8 = pCoef[2 * ia7 + 1];
   33fcc:	e9dd c701 	ldrd	ip, r7, [sp, #4]
   33fd0:	e9dd 6503 	ldrd	r6, r5, [sp, #12]
   33fd4:	e9dd 4005 	ldrd	r4, r0, [sp, #20]
   33fd8:	e9dd 1207 	ldrd	r1, r2, [sp, #28]

         i1 = j;
   33fdc:	46ce      	mov	lr, r9
   33fde:	e001      	b.n	33fe4 <arm_radix8_butterfly_f32+0x2dc>
   33fe0:	3f3504f3 	.word	0x3f3504f3
            i4 = i3 + n2;
            i5 = i4 + n2;
            i6 = i5 + n2;
            i7 = i6 + n2;
            i8 = i7 + n2;
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
   33fe4:	ed17 2a01 	vldr	s4, [r7, #-4]
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
   33fe8:	ed91 3a00 	vldr	s6, [r1]
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
   33fec:	edd4 7a00 	vldr	s15, [r4]
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
   33ff0:	ed95 6a00 	vldr	s12, [r5]
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
   33ff4:	ed92 5a00 	vldr	s10, [r2]
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
   33ff8:	edd0 4a00 	vldr	s9, [r0]
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
   33ffc:	ed5c 5a01 	vldr	s11, [ip, #-4]
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
   34000:	ed96 7a00 	vldr	s14, [r6]
            r1 = r1 + r3;
            r3 = r2 - r4;
            r2 = r2 + r4;
            pSrc[2 * i1] = r1 + r2;
            r2 = r1 - r2;
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
   34004:	edd7 8a00 	vldr	s17, [r7]
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
   34008:	ee32 0a05 	vadd.f32	s0, s4, s10
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
   3400c:	ee73 0a24 	vadd.f32	s1, s6, s9
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
   34010:	ee75 3aa7 	vadd.f32	s7, s11, s15
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
   34014:	ee36 4a07 	vadd.f32	s8, s12, s14
            r1 = r1 + r3;
   34018:	ee30 1a23 	vadd.f32	s2, s0, s7
            r2 = r2 + r4;
   3401c:	ee70 6a84 	vadd.f32	s13, s1, s8
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
   34020:	ee73 4a64 	vsub.f32	s9, s6, s9
            pSrc[2 * i1] = r1 + r2;
   34024:	ee31 3a26 	vadd.f32	s6, s2, s13
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
   34028:	ee75 5ae7 	vsub.f32	s11, s11, s15
            pSrc[2 * i1] = r1 + r2;
   3402c:	ed07 3a01 	vstr	s6, [r7, #-4]
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
   34030:	ed91 8a01 	vldr	s16, [r1, #4]
   34034:	ed90 3a01 	vldr	s6, [r0, #4]
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
   34038:	eddc 7a00 	vldr	s15, [ip]
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
   3403c:	ee36 7a47 	vsub.f32	s14, s12, s14
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
   34040:	ee32 5a45 	vsub.f32	s10, s4, s10
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
   34044:	ed92 6a01 	vldr	s12, [r2, #4]
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
   34048:	ee38 2a43 	vsub.f32	s4, s16, s6
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
   3404c:	ee38 3a03 	vadd.f32	s6, s16, s6
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
   34050:	ed94 8a01 	vldr	s16, [r4, #4]
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
   34054:	ee78 1a86 	vadd.f32	s3, s17, s12
            r2 = r1 - r2;
   34058:	ee71 6a66 	vsub.f32	s13, s2, s13
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
   3405c:	ee38 6ac6 	vsub.f32	s12, s17, s12
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
   34060:	ed96 1a01 	vldr	s2, [r6, #4]
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
   34064:	ee77 8a88 	vadd.f32	s17, s15, s16
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
   34068:	ee77 7ac8 	vsub.f32	s15, s15, s16
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
   3406c:	ed95 8a01 	vldr	s16, [r5, #4]
            t1 = r1 - r3;
   34070:	ee70 3a63 	vsub.f32	s7, s0, s7
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
   34074:	ee38 0a41 	vsub.f32	s0, s16, s2
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
   34078:	ee38 8a01 	vadd.f32	s16, s16, s2
            r3 = r2 - r4;
   3407c:	ee30 4ac4 	vsub.f32	s8, s1, s8
            t2 = s1 - s3;
            s1 = s1 + s3;
            s3 = s2 - s4;
   34080:	ee33 1a48 	vsub.f32	s2, s6, s16
            t2 = s1 - s3;
   34084:	ee71 0ae8 	vsub.f32	s1, s3, s17
            s2 = s2 + s4;
   34088:	ee33 8a08 	vadd.f32	s16, s6, s16
            s1 = s1 + s3;
   3408c:	ee71 8aa8 	vadd.f32	s17, s3, s17
            r1 = t1 + s3;
   34090:	ee33 3a81 	vadd.f32	s6, s7, s2
            t1 = t1 - s3;
   34094:	ee33 1ac1 	vsub.f32	s2, s7, s2
            pSrc[2 * i1 + 1] = s1 + s2;
            s2 = s1 - s2;
   34098:	ee78 3ac8 	vsub.f32	s7, s17, s16
            pSrc[2 * i1 + 1] = s1 + s2;
   3409c:	ee38 8a88 	vadd.f32	s16, s17, s16
            p4 = si7 * t1;
            pSrc[2 * i7]     = p1 + p2;
            pSrc[2 * i7 + 1] = p3 - p4;
            r1 = (r6 - r8) * C81;
            r6 = (r6 + r8) * C81;
            s1 = (s6 - s8) * C81;
   340a0:	ee72 8a40 	vsub.f32	s17, s4, s0
            pSrc[2 * i1 + 1] = s1 + s2;
   340a4:	ed87 8a00 	vstr	s16, [r7]
            s6 = (s6 + s8) * C81;
   340a8:	ee32 2a00 	vadd.f32	s4, s4, s0
            r1 = (r6 - r8) * C81;
   340ac:	ee34 8ac7 	vsub.f32	s16, s9, s14
            r6 = (r6 + r8) * C81;
   340b0:	ee34 7a87 	vadd.f32	s14, s9, s14
            r1 = (r6 - r8) * C81;
   340b4:	ee28 8a22 	vmul.f32	s16, s16, s5
            s6 = (s6 + s8) * C81;
   340b8:	ee22 2a22 	vmul.f32	s4, s4, s5
            r6 = (r6 + r8) * C81;
   340bc:	ee27 7a22 	vmul.f32	s14, s14, s5
            s1 = (s6 - s8) * C81;
   340c0:	ee68 8aa2 	vmul.f32	s17, s17, s5
            t1 = r5 - r1;
            r5 = r5 + r1;
            r8 = r7 - r6;
   340c4:	ee35 0ac7 	vsub.f32	s0, s11, s14
            s1 = t2 - r3;
   340c8:	ee70 1ac4 	vsub.f32	s3, s1, s8
            t1 = r5 - r1;
   340cc:	ee75 4a48 	vsub.f32	s9, s10, s16
            r7 = r7 + r6;
   340d0:	ee35 7a87 	vadd.f32	s14, s11, s14
            r5 = r5 + r1;
   340d4:	ee35 5a08 	vadd.f32	s10, s10, s16
            t2 = s5 - s1;
            s5 = s5 + s1;
            s8 = s7 - s6;
   340d8:	ee77 5ac2 	vsub.f32	s11, s15, s4
            t2 = s5 - s1;
   340dc:	ee36 8a68 	vsub.f32	s16, s12, s17
            t2 = t2 + r3;
   340e0:	ee74 0a20 	vadd.f32	s1, s8, s1
            s5 = s5 + s1;
   340e4:	ee76 8a28 	vadd.f32	s17, s12, s17
            p1 = co5 * r2;
   340e8:	ee2e 4a26 	vmul.f32	s8, s28, s13
            s7 = s7 + s6;
   340ec:	ee77 7a82 	vadd.f32	s15, s15, s4
            p2 = si5 * s2;
   340f0:	ee2a 6a23 	vmul.f32	s12, s20, s7
            r1 = r5 + s7;
   340f4:	ee35 2a27 	vadd.f32	s4, s10, s15
            pSrc[2 * i5]     = p1 + p2;
   340f8:	ee34 6a06 	vadd.f32	s12, s8, s12
            r5 = r5 - s7;
   340fc:	ee75 7a67 	vsub.f32	s15, s10, s15
            p2 = si3 * s1;
   34100:	ee2b 4a21 	vmul.f32	s8, s22, s3
            r6 = t1 + s8;
   34104:	ee34 5aa5 	vadd.f32	s10, s9, s11
            p3 = co5 * s2;
   34108:	ee6e 3a23 	vmul.f32	s7, s28, s7
            t1 = t1 - s8;
   3410c:	ee74 4ae5 	vsub.f32	s9, s9, s11
            p4 = si5 * r2;
   34110:	ee6a 6a26 	vmul.f32	s13, s20, s13
            s1 = s5 - r7;
   34114:	ee78 5ac7 	vsub.f32	s11, s17, s14
            s5 = s5 + r7;
   34118:	ee77 8a28 	vadd.f32	s17, s14, s17
            s6 = t2 - r8;
   3411c:	ee38 7a40 	vsub.f32	s14, s16, s0
            t2 = t2 + r8;
   34120:	ee30 8a08 	vadd.f32	s16, s0, s16
            p1 = co3 * r1;
   34124:	ee2f 0a03 	vmul.f32	s0, s30, s6
            pSrc[2 * i5 + 1] = p3 - p4;
   34128:	ee73 6ae6 	vsub.f32	s13, s7, s13
            pSrc[2 * i3]     = p1 + p2;
   3412c:	ee30 0a04 	vadd.f32	s0, s0, s8
            p3 = co3 * s1;
   34130:	ee6f 1a21 	vmul.f32	s3, s30, s3
            p2 = si7 * t2;
   34134:	ee29 4a20 	vmul.f32	s8, s18, s1
            p1 = co7 * t1;
   34138:	ee6d 3a01 	vmul.f32	s7, s26, s2
            p3 = co7 * t2;
   3413c:	ee6d 0a20 	vmul.f32	s1, s26, s1
            p4 = si3 * r1;
   34140:	ee2b 3a03 	vmul.f32	s6, s22, s6
            p4 = si7 * t1;
   34144:	ee29 1a01 	vmul.f32	s2, s18, s2
            pSrc[2 * i3 + 1] = p3 - p4;
   34148:	ee31 3ac3 	vsub.f32	s6, s3, s6
            pSrc[2 * i7 + 1] = p3 - p4;
   3414c:	ee30 1ac1 	vsub.f32	s2, s1, s2
            p1 = co2 * r1;
            p2 = si2 * s1;
   34150:	ee6b 1aa5 	vmul.f32	s3, s23, s11
            p1 = co2 * r1;
   34154:	ee6f 0a82 	vmul.f32	s1, s31, s4
            p3 = co2 * s1;
   34158:	ee6f 5aa5 	vmul.f32	s11, s31, s11
            p4 = si2 * r1;
   3415c:	ee2b 2a82 	vmul.f32	s4, s23, s4
            pSrc[2 * i5]     = p1 + p2;
   34160:	ed82 6a00 	vstr	s12, [r2]
            pSrc[2 * i5 + 1] = p3 - p4;
   34164:	edc2 6a01 	vstr	s13, [r2, #4]
            pSrc[2 * i7]     = p1 + p2;
   34168:	ee73 3a84 	vadd.f32	s7, s7, s8
            pSrc[2 * i3]     = p1 + p2;
   3416c:	ed0c 0a01 	vstr	s0, [ip, #-4]
            pSrc[2 * i2]     = p1 + p2;
            pSrc[2 * i2 + 1] = p3 - p4;
            p1 = co8 * r5;
   34170:	ee2c 6aa7 	vmul.f32	s12, s25, s15
            p2 = si8 * s5;
   34174:	ee2c 4a28 	vmul.f32	s8, s24, s17
            p3 = co8 * s5;
            p4 = si8 * r5;
            pSrc[2 * i8]     = p1 + p2;
            pSrc[2 * i8 + 1] = p3 - p4;
            p1 = co6 * r6;
   34178:	ee6d 6a85 	vmul.f32	s13, s27, s10
            p2 = si6 * s6;
   3417c:	ee29 0a87 	vmul.f32	s0, s19, s14
            pSrc[2 * i2]     = p1 + p2;
   34180:	ee70 1aa1 	vadd.f32	s3, s1, s3
            pSrc[2 * i2 + 1] = p3 - p4;
   34184:	ee35 2ac2 	vsub.f32	s4, s11, s4
            p3 = co6 * s6;
            p4 = si6 * r6;
            pSrc[2 * i6]     = p1 + p2;
            pSrc[2 * i6 + 1] = p3 - p4;
            p1 = co4 * t1;
   34188:	ee6e 0aa4 	vmul.f32	s1, s29, s9
            p2 = si4 * t2;
   3418c:	ee6a 5a88 	vmul.f32	s11, s21, s16
            p3 = co8 * s5;
   34190:	ee6c 8aa8 	vmul.f32	s17, s25, s17
            p4 = si8 * r5;
   34194:	ee6c 7a27 	vmul.f32	s15, s24, s15
            p3 = co6 * s6;
   34198:	ee2d 7a87 	vmul.f32	s14, s27, s14
            p4 = si6 * r6;
   3419c:	ee29 5a85 	vmul.f32	s10, s19, s10
            p3 = co4 * t2;
   341a0:	ee2e 8a88 	vmul.f32	s16, s29, s16
            p4 = si4 * t1;
   341a4:	ee6a 4aa4 	vmul.f32	s9, s21, s9
            pSrc[2 * i8]     = p1 + p2;
   341a8:	ee36 4a04 	vadd.f32	s8, s12, s8
            pSrc[2 * i8 + 1] = p3 - p4;
   341ac:	ee78 8ae7 	vsub.f32	s17, s17, s15
            pSrc[2 * i6]     = p1 + p2;
   341b0:	ee76 6a80 	vadd.f32	s13, s13, s0
            pSrc[2 * i6 + 1] = p3 - p4;
   341b4:	ee37 7a45 	vsub.f32	s14, s14, s10
            pSrc[2 * i4]     = p1 + p2;
   341b8:	ee70 0aa5 	vadd.f32	s1, s1, s11
            pSrc[2 * i4 + 1] = p3 - p4;
   341bc:	ee78 4a64 	vsub.f32	s9, s16, s9

            i1 += n1;
   341c0:	44de      	add	lr, fp
         } while (i1 < fftLen);
   341c2:	45f2      	cmp	sl, lr
            pSrc[2 * i3 + 1] = p3 - p4;
   341c4:	ed8c 3a00 	vstr	s6, [ip]
         } while (i1 < fftLen);
   341c8:	441f      	add	r7, r3
            pSrc[2 * i7]     = p1 + p2;
   341ca:	edc4 3a00 	vstr	s7, [r4]
            pSrc[2 * i7 + 1] = p3 - p4;
   341ce:	ed84 1a01 	vstr	s2, [r4, #4]
         } while (i1 < fftLen);
   341d2:	441a      	add	r2, r3
            pSrc[2 * i2]     = p1 + p2;
   341d4:	edc1 1a00 	vstr	s3, [r1]
            pSrc[2 * i2 + 1] = p3 - p4;
   341d8:	ed81 2a01 	vstr	s4, [r1, #4]
         } while (i1 < fftLen);
   341dc:	449c      	add	ip, r3
            pSrc[2 * i8]     = p1 + p2;
   341de:	ed86 4a00 	vstr	s8, [r6]
            pSrc[2 * i8 + 1] = p3 - p4;
   341e2:	edc6 8a01 	vstr	s17, [r6, #4]
         } while (i1 < fftLen);
   341e6:	441c      	add	r4, r3
            pSrc[2 * i6]     = p1 + p2;
   341e8:	edc0 6a00 	vstr	s13, [r0]
            pSrc[2 * i6 + 1] = p3 - p4;
   341ec:	ed80 7a01 	vstr	s14, [r0, #4]
         } while (i1 < fftLen);
   341f0:	4419      	add	r1, r3
            pSrc[2 * i4]     = p1 + p2;
   341f2:	edc5 0a00 	vstr	s1, [r5]
            pSrc[2 * i4 + 1] = p3 - p4;
   341f6:	edc5 4a01 	vstr	s9, [r5, #4]
         } while (i1 < fftLen);
   341fa:	441e      	add	r6, r3
   341fc:	4418      	add	r0, r3
   341fe:	441d      	add	r5, r3
   34200:	f63f aef0 	bhi.w	33fe4 <arm_radix8_butterfly_f32+0x2dc>

         j++;
      } while (j < n2);
   34204:	9a08      	ldr	r2, [sp, #32]
   34206:	3208      	adds	r2, #8
   34208:	9208      	str	r2, [sp, #32]
   3420a:	9a07      	ldr	r2, [sp, #28]
   3420c:	3208      	adds	r2, #8
   3420e:	9207      	str	r2, [sp, #28]
   34210:	9a06      	ldr	r2, [sp, #24]
   34212:	3208      	adds	r2, #8
   34214:	9206      	str	r2, [sp, #24]
   34216:	9a05      	ldr	r2, [sp, #20]
   34218:	3208      	adds	r2, #8
   3421a:	9205      	str	r2, [sp, #20]
   3421c:	9a04      	ldr	r2, [sp, #16]
   3421e:	3208      	adds	r2, #8
   34220:	9204      	str	r2, [sp, #16]
   34222:	9a03      	ldr	r2, [sp, #12]
   34224:	3208      	adds	r2, #8
   34226:	9203      	str	r2, [sp, #12]
   34228:	9a02      	ldr	r2, [sp, #8]
   3422a:	3208      	adds	r2, #8
   3422c:	9202      	str	r2, [sp, #8]
   3422e:	9a01      	ldr	r2, [sp, #4]
   34230:	3208      	adds	r2, #8
   34232:	9201      	str	r2, [sp, #4]
   34234:	9a09      	ldr	r2, [sp, #36]	; 0x24
         j++;
   34236:	f109 0901 	add.w	r9, r9, #1
      } while (j < n2);
   3423a:	454a      	cmp	r2, r9
   3423c:	f47f ae8b 	bne.w	33f56 <arm_radix8_butterfly_f32+0x24e>

      twidCoefModifier <<= 3;
   34240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   34242:	00db      	lsls	r3, r3, #3
   34244:	b29b      	uxth	r3, r3
   34246:	930a      	str	r3, [sp, #40]	; 0x28
   } while (n2 > 7);
   34248:	4693      	mov	fp, r2
   3424a:	e56c      	b.n	33d26 <arm_radix8_butterfly_f32+0x1e>
}
   3424c:	b00f      	add	sp, #60	; 0x3c
   3424e:	ecbd 8b10 	vpop	{d8-d15}
   34252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34256:	bf00      	nop

00034258 <arm_bitreversal_32>:
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
   34258:	b311      	cbz	r1, 342a0 <arm_bitreversal_32+0x48>
{
   3425a:	b570      	push	{r4, r5, r6, lr}
  for (i = 0; i < bitRevLen; )
   3425c:	f04f 0e00 	mov.w	lr, #0
   34260:	1c95      	adds	r5, r2, #2
  {
     a = pBitRevTab[i    ] >> 2;
   34262:	f832 c01e 	ldrh.w	ip, [r2, lr, lsl #1]
     b = pBitRevTab[i + 1] >> 2;
   34266:	f835 301e 	ldrh.w	r3, [r5, lr, lsl #1]
     a = pBitRevTab[i    ] >> 2;
   3426a:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
     b = pBitRevTab[i + 1] >> 2;
   3426e:	089b      	lsrs	r3, r3, #2

     //real
     tmp = pSrc[a];
   34270:	f850 602c 	ldr.w	r6, [r0, ip, lsl #2]
     pSrc[a] = pSrc[b];
   34274:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   34278:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
     pSrc[b] = tmp;
   3427c:	f840 6023 	str.w	r6, [r0, r3, lsl #2]

     //complex
     tmp = pSrc[a+1];
   34280:	f10c 0c01 	add.w	ip, ip, #1
     pSrc[a+1] = pSrc[b+1];
   34284:	3301      	adds	r3, #1
     pSrc[b+1] = tmp;

    i += 2;
   34286:	f10e 0e02 	add.w	lr, lr, #2
     tmp = pSrc[a+1];
   3428a:	f850 402c 	ldr.w	r4, [r0, ip, lsl #2]
     pSrc[a+1] = pSrc[b+1];
   3428e:	f850 6023 	ldr.w	r6, [r0, r3, lsl #2]
   34292:	f840 602c 	str.w	r6, [r0, ip, lsl #2]
  for (i = 0; i < bitRevLen; )
   34296:	458e      	cmp	lr, r1
     pSrc[b+1] = tmp;
   34298:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
  for (i = 0; i < bitRevLen; )
   3429c:	d3e1      	bcc.n	34262 <arm_bitreversal_32+0xa>
  }
}
   3429e:	bd70      	pop	{r4, r5, r6, pc}
   342a0:	4770      	bx	lr
   342a2:	bf00      	nop

000342a4 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  // Index to buffer for optimizations if applicable.
  int buffer_idx;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   342a4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   342a6:	b10b      	cbz	r3, 342ac <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x8>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
   342a8:	2138      	movs	r1, #56	; 0x38
   342aa:	4718      	bx	r3
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   342ac:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   342ae:	f7f7 fe75 	bl	2bf9c <abort>
   342b2:	bf00      	nop

000342b4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   342b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
   342b8:	688f      	ldr	r7, [r1, #8]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   342ba:	b0af      	sub	sp, #188	; 0xbc
  TFLITE_DCHECK(node->user_data != nullptr);
   342bc:	2f00      	cmp	r7, #0
   342be:	f000 80c9 	beq.w	34454 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a0>
  TFLITE_DCHECK(node->builtin_data != nullptr);
   342c2:	f8d1 800c 	ldr.w	r8, [r1, #12]
   342c6:	460c      	mov	r4, r1
   342c8:	f1b8 0f00 	cmp.w	r8, #0
   342cc:	f000 80c2 	beq.w	34454 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a0>
  int32_t buf_size = 0;
  const auto& params =
      *(static_cast<const TfLiteConvParams*>(node->builtin_data));
  OpData* data = static_cast<OpData*>(node->user_data);

  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
   342d0:	4b61      	ldr	r3, [pc, #388]	; (34458 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a4>)
   342d2:	681a      	ldr	r2, [r3, #0]
   342d4:	4605      	mov	r5, r0
   342d6:	f001 fe1b 	bl	35f10 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
   342da:	4606      	mov	r6, r0
   342dc:	2800      	cmp	r0, #0
   342de:	f000 808d 	beq.w	343fc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x148>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
   342e2:	4b5e      	ldr	r3, [pc, #376]	; (3445c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a8>)
   342e4:	4621      	mov	r1, r4
   342e6:	681a      	ldr	r2, [r3, #0]
   342e8:	4628      	mov	r0, r5
   342ea:	f001 fe11 	bl	35f10 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
   342ee:	9009      	str	r0, [sp, #36]	; 0x24
   342f0:	2800      	cmp	r0, #0
   342f2:	f000 8083 	beq.w	343fc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x148>
  const TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
   342f6:	4b5a      	ldr	r3, [pc, #360]	; (34460 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1ac>)
   342f8:	4621      	mov	r1, r4
   342fa:	681a      	ldr	r2, [r3, #0]
   342fc:	4628      	mov	r0, r5
   342fe:	f001 fe23 	bl	35f48 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
   34302:	900a      	str	r0, [sp, #40]	; 0x28
   34304:	2800      	cmp	r0, #0
   34306:	d079      	beq.n	343fc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x148>
inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
  if (tensor == nullptr) {
    return RuntimeShape();
  }

  TfLiteIntArray* dims = tensor->dims;
   34308:	6973      	ldr	r3, [r6, #20]
  const int dims_size = dims->size;
   3430a:	930b      	str	r3, [sp, #44]	; 0x2c
   3430c:	4619      	mov	r1, r3
   3430e:	f851 ab04 	ldr.w	sl, [r1], #4
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
   34312:	f8cd a060 	str.w	sl, [sp, #96]	; 0x60
    if (dimensions_count > kMaxSmallSize) {
   34316:	f1ba 0f05 	cmp.w	sl, #5
   3431a:	f300 809b 	bgt.w	34454 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a0>
  }

  inline void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
    Resize(dimensions_count);
    int32_t* dst_dims = DimsData();
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   3431e:	ea4f 028a 	mov.w	r2, sl, lsl #2
   34322:	a819      	add	r0, sp, #100	; 0x64
   34324:	f7e3 ff6c 	bl	18200 <memcpy>
  TfLiteIntArray* dims = tensor->dims;
   34328:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   3432a:	f8d2 b014 	ldr.w	fp, [r2, #20]
  const int dims_size = dims->size;
   3432e:	4659      	mov	r1, fp
   34330:	f851 9b04 	ldr.w	r9, [r1], #4
    size_ = dimensions_count;
   34334:	f8cd 9078 	str.w	r9, [sp, #120]	; 0x78
    if (dimensions_count > kMaxSmallSize) {
   34338:	f1b9 0f05 	cmp.w	r9, #5
   3433c:	f300 808a 	bgt.w	34454 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a0>
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   34340:	ea4f 0289 	mov.w	r2, r9, lsl #2
   34344:	a81f      	add	r0, sp, #124	; 0x7c
   34346:	f7e3 ff5b 	bl	18200 <memcpy>
    TFLITE_DCHECK_LT(i, size_);
   3434a:	f1ba 0f00 	cmp.w	sl, #0
   3434e:	f340 8081 	ble.w	34454 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a0>
   34352:	f1b9 0f00 	cmp.w	r9, #0
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   34356:	9a19      	ldr	r2, [sp, #100]	; 0x64
    TFLITE_DCHECK_LT(i, size_);
   34358:	dd7c      	ble.n	34454 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a0>
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   3435a:	991f      	ldr	r1, [sp, #124]	; 0x7c
   3435c:	4291      	cmp	r1, r2
   3435e:	d179      	bne.n	34454 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a0>
  RuntimeShape output_shape = GetTensorShape(output);

  // Initialize cmsis_nn input dimensions
  cmsis_nn_dims input_dims;
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
  input_dims.h = input->dims->data[1];
   34360:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
   34362:	920c      	str	r2, [sp, #48]	; 0x30
  input_dims.h = input->dims->data[1];
   34364:	6899      	ldr	r1, [r3, #8]
  input_dims.w = input->dims->data[2];
   34366:	68db      	ldr	r3, [r3, #12]
  input_dims.h = input->dims->data[1];
   34368:	910d      	str	r1, [sp, #52]	; 0x34
    TFLITE_DCHECK_LT(i, size_);
   3436a:	f1ba 0f03 	cmp.w	sl, #3
  input_dims.w = input->dims->data[2];
   3436e:	930e      	str	r3, [sp, #56]	; 0x38
   34370:	dd70      	ble.n	34454 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   34372:	981c      	ldr	r0, [sp, #112]	; 0x70
  input_dims.c = input_shape.Dims(3);
   34374:	900f      	str	r0, [sp, #60]	; 0x3c
    TFLITE_DCHECK_LT(i, size_);
   34376:	f1b9 0f03 	cmp.w	r9, #3
   3437a:	dd6b      	ble.n	34454 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a0>

  // Initialize cmsis_nn filter dimensions
  cmsis_nn_dims filter_dims;
  filter_dims.n = output_shape.Dims(3);
  filter_dims.h = filter->dims->data[1];
   3437c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  filter_dims.w = filter->dims->data[2];
  filter_dims.c = input_dims.c;

  // Initialize cmsis_nn output dimensions
  cmsis_nn_dims output_dims;
  output_dims.n = input_dims.n;
   3437e:	9214      	str	r2, [sp, #80]	; 0x50
  filter_dims.h = filter->dims->data[1];
   34380:	695a      	ldr	r2, [r3, #20]
  // Dynamically allocate per-channel quantization parameters.
  // TODO(#42883): This allocation is done even for non-int8 cases to get around
  // a bug in kernel_util.cc which incorrectly uses per_channel_output_shift in
  // non-int8 cases. Protect this section with a if (input->type == kTfLiteInt8)
  // when the issue is fixed.
  const int num_channels = filter->dims->data[kConvQuantizedDimension];
   34382:	4b38      	ldr	r3, [pc, #224]	; (34464 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1b0>)
   34384:	681b      	ldr	r3, [r3, #0]
   34386:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  data->reference_op_data.per_channel_output_multiplier =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
   3438a:	6859      	ldr	r1, [r3, #4]
  filter_dims.h = filter->dims->data[1];
   3438c:	6893      	ldr	r3, [r2, #8]
   3438e:	9311      	str	r3, [sp, #68]	; 0x44
  filter_dims.w = filter->dims->data[2];
   34390:	68d3      	ldr	r3, [r2, #12]
  filter_dims.c = input_dims.c;
   34392:	e9cd 3012 	strd	r3, r0, [sp, #72]	; 0x48
  output_dims.h = output->dims->data[1];
   34396:	f8db 3008 	ldr.w	r3, [fp, #8]
   3439a:	9315      	str	r3, [sp, #84]	; 0x54
  output_dims.w = output->dims->data[2];
   3439c:	f8db 300c 	ldr.w	r3, [fp, #12]
   343a0:	9316      	str	r3, [sp, #88]	; 0x58
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   343a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
  filter_dims.n = output_shape.Dims(3);
   343a4:	9310      	str	r3, [sp, #64]	; 0x40
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
   343a6:	0089      	lsls	r1, r1, #2
  output_dims.c = output_shape.Dims(3);
   343a8:	9317      	str	r3, [sp, #92]	; 0x5c
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
   343aa:	4628      	mov	r0, r5
   343ac:	6bab      	ldr	r3, [r5, #56]	; 0x38
   343ae:	9109      	str	r1, [sp, #36]	; 0x24
   343b0:	4798      	blx	r3
          context, num_channels * sizeof(int32_t)));
  data->reference_op_data.per_channel_output_shift =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
   343b2:	9909      	ldr	r1, [sp, #36]	; 0x24
   343b4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  data->reference_op_data.per_channel_output_multiplier =
   343b6:	6278      	str	r0, [r7, #36]	; 0x24
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
   343b8:	4628      	mov	r0, r5
   343ba:	4798      	blx	r3
  data->reference_op_data.per_channel_output_shift =
   343bc:	62b8      	str	r0, [r7, #40]	; 0x28
          context, num_channels * sizeof(int32_t)));

  TF_LITE_ENSURE_STATUS(CalculateOpDataConv(
   343be:	9706      	str	r7, [sp, #24]
   343c0:	7f33      	ldrb	r3, [r6, #28]
   343c2:	9305      	str	r3, [sp, #20]
   343c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   343c6:	9304      	str	r3, [sp, #16]
   343c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   343ca:	9303      	str	r3, [sp, #12]
   343cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   343ce:	9302      	str	r3, [sp, #8]
   343d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   343d2:	9301      	str	r3, [sp, #4]
   343d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   343d6:	9300      	str	r3, [sp, #0]
   343d8:	4621      	mov	r1, r4
   343da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   343dc:	4642      	mov	r2, r8
   343de:	4628      	mov	r0, r5
   343e0:	f000 fbae 	bl	34b40 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
   343e4:	4604      	mov	r4, r0
   343e6:	b950      	cbnz	r0, 343fe <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14a>
      context, node, params, input_dims.w, input_dims.h, filter_dims.w,
      filter_dims.h, output_dims.w, output_dims.h, input->type,
      &data->reference_op_data));

  if (input->type == kTfLiteInt8) {
   343e8:	7f33      	ldrb	r3, [r6, #28]
   343ea:	2b09      	cmp	r3, #9
   343ec:	d00b      	beq.n	34406 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x152>

  if (buf_size > 0) {
    TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
        context, buf_size, &data->buffer_idx));
  } else {
    data->buffer_idx = -1;
   343ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
  return kTfLiteOk;
}
   343f2:	4620      	mov	r0, r4
    data->buffer_idx = -1;
   343f4:	637b      	str	r3, [r7, #52]	; 0x34
}
   343f6:	b02f      	add	sp, #188	; 0xbc
   343f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE(context, input != nullptr);
   343fc:	2401      	movs	r4, #1
}
   343fe:	4620      	mov	r0, r4
   34400:	b02f      	add	sp, #188	; 0xbc
   34402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    conv_params.input_offset = -input->params.zero_point;
   34406:	68f3      	ldr	r3, [r6, #12]
    conv_params.output_offset = output->params.zero_point;
   34408:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    conv_params.input_offset = -input->params.zero_point;
   3440a:	425b      	negs	r3, r3
   3440c:	9324      	str	r3, [sp, #144]	; 0x90
    conv_params.stride.h = params.stride_height;
   3440e:	f8d8 3008 	ldr.w	r3, [r8, #8]
    conv_params.output_offset = output->params.zero_point;
   34412:	68d2      	ldr	r2, [r2, #12]
    conv_params.stride.h = params.stride_height;
   34414:	9327      	str	r3, [sp, #156]	; 0x9c
    conv_params.stride.w = params.stride_width;
   34416:	f8d8 3004 	ldr.w	r3, [r8, #4]
    conv_params.output_offset = output->params.zero_point;
   3441a:	9225      	str	r2, [sp, #148]	; 0x94
    conv_params.stride.w = params.stride_width;
   3441c:	9326      	str	r3, [sp, #152]	; 0x98
    conv_params.dilation.w = params.dilation_width_factor;
   3441e:	e9d8 2304 	ldrd	r2, r3, [r8, #16]
    conv_params.dilation.h = params.dilation_height_factor;
   34422:	932b      	str	r3, [sp, #172]	; 0xac
    conv_params.padding.h = data->reference_op_data.padding.height;
   34424:	687b      	ldr	r3, [r7, #4]
   34426:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
    conv_params.padding.w = data->reference_op_data.padding.width;
   3442a:	683a      	ldr	r2, [r7, #0]
    conv_params.activation.min = data->reference_op_data.output_activation_min;
   3442c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    conv_params.padding.w = data->reference_op_data.padding.width;
   3442e:	9228      	str	r2, [sp, #160]	; 0xa0
    conv_params.activation.max = data->reference_op_data.output_activation_max;
   34430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    conv_params.activation.min = data->reference_op_data.output_activation_min;
   34432:	932c      	str	r3, [sp, #176]	; 0xb0
    conv_params.activation.max = data->reference_op_data.output_activation_max;
   34434:	922d      	str	r2, [sp, #180]	; 0xb4
    buf_size = arm_convolve_wrapper_s8_get_buffer_size(
   34436:	a90c      	add	r1, sp, #48	; 0x30
   34438:	ab14      	add	r3, sp, #80	; 0x50
   3443a:	aa10      	add	r2, sp, #64	; 0x40
   3443c:	a824      	add	r0, sp, #144	; 0x90
   3443e:	f007 ff23 	bl	3c288 <arm_convolve_wrapper_s8_get_buffer_size>
  if (buf_size > 0) {
   34442:	1e01      	subs	r1, r0, #0
   34444:	ddd3      	ble.n	343ee <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x13a>
    TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
   34446:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   34448:	f107 0234 	add.w	r2, r7, #52	; 0x34
   3444c:	4628      	mov	r0, r5
   3444e:	4798      	blx	r3
   34450:	4604      	mov	r4, r0
   34452:	e7d4      	b.n	343fe <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14a>
  TFLITE_DCHECK(node->user_data != nullptr);
   34454:	f7f7 fda2 	bl	2bf9c <abort>
   34458:	00043218 	.word	0x00043218
   3445c:	00043220 	.word	0x00043220
   34460:	0004321c 	.word	0x0004321c
   34464:	00043224 	.word	0x00043224

00034468 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const ConvParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
   34468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3446c:	b09d      	sub	sp, #116	; 0x74
  // Get parameters.
  const int32_t input_offset = params.input_offset;  // r = s(q - Z)
   3446e:	6944      	ldr	r4, [r0, #20]
   34470:	9402      	str	r4, [sp, #8]
  const int stride_width = params.stride_width;
   34472:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   34476:	9416      	str	r4, [sp, #88]	; 0x58
  const int stride_height = params.stride_height;
   34478:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   3447c:	9417      	str	r4, [sp, #92]	; 0x5c
  const int dilation_width_factor = params.dilation_width_factor;
   3447e:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   34482:	9404      	str	r4, [sp, #16]
    int8_t* output_data) {
   34484:	e9cd 121a 	strd	r1, r2, [sp, #104]	; 0x68
  const int dilation_height_factor = params.dilation_height_factor;
   34488:	f9b0 4010 	ldrsh.w	r4, [r0, #16]
  const int pad_width = params.padding_values.width;
  const int pad_height = params.padding_values.height;
  const int32_t output_offset = params.output_offset;

  // Set min and max value of the output.
  const int32_t output_activation_min = params.quantized_activation_min;
   3448c:	6a82      	ldr	r2, [r0, #40]	; 0x28
  const int32_t output_activation_max = params.quantized_activation_max;
   3448e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  const int dilation_height_factor = params.dilation_height_factor;
   34490:	9408      	str	r4, [sp, #32]
  const int pad_width = params.padding_values.width;
   34492:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
   34496:	9418      	str	r4, [sp, #96]	; 0x60

  // Consistency check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   34498:	428a      	cmp	r2, r1
  const int pad_height = params.padding_values.height;
   3449a:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
  const int32_t output_offset = params.output_offset;
   3449e:	69c0      	ldr	r0, [r0, #28]
    int8_t* output_data) {
   344a0:	9f27      	ldr	r7, [sp, #156]	; 0x9c
  const int32_t output_activation_min = params.quantized_activation_min;
   344a2:	920c      	str	r2, [sp, #48]	; 0x30
    int8_t* output_data) {
   344a4:	461d      	mov	r5, r3
  const int32_t output_activation_max = params.quantized_activation_max;
   344a6:	9112      	str	r1, [sp, #72]	; 0x48
    int8_t* output_data) {
   344a8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  const int pad_height = params.padding_values.height;
   344aa:	9419      	str	r4, [sp, #100]	; 0x64
  const int32_t output_offset = params.output_offset;
   344ac:	9011      	str	r0, [sp, #68]	; 0x44
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   344ae:	f300 8196 	bgt.w	347de <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x376>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   344b2:	682a      	ldr	r2, [r5, #0]
   344b4:	2a04      	cmp	r2, #4
   344b6:	f040 8192 	bne.w	347de <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x376>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   344ba:	683a      	ldr	r2, [r7, #0]
   344bc:	2a04      	cmp	r2, #4
   344be:	f040 818e 	bne.w	347de <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x376>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   344c2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   344c4:	6812      	ldr	r2, [r2, #0]
   344c6:	2a04      	cmp	r2, #4
   344c8:	f040 8189 	bne.w	347de <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x376>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   344cc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   344ce:	6869      	ldr	r1, [r5, #4]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   344d0:	6852      	ldr	r2, [r2, #4]
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   344d2:	9113      	str	r1, [sp, #76]	; 0x4c
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   344d4:	428a      	cmp	r2, r1
   344d6:	f040 8182 	bne.w	347de <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x376>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   344da:	692a      	ldr	r2, [r5, #16]
   344dc:	9201      	str	r2, [sp, #4]
   344de:	4611      	mov	r1, r2
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   344e0:	693a      	ldr	r2, [r7, #16]
   344e2:	428a      	cmp	r2, r1
   344e4:	f040 817b 	bne.w	347de <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x376>
   344e8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   344ea:	6879      	ldr	r1, [r7, #4]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   344ec:	6912      	ldr	r2, [r2, #16]
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   344ee:	910f      	str	r1, [sp, #60]	; 0x3c
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   344f0:	428a      	cmp	r2, r1
   344f2:	f040 8174 	bne.w	347de <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x376>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
  if (bias_data) {
   344f6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   344f8:	b192      	cbz	r2, 34520 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xb8>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   344fa:	6818      	ldr	r0, [r3, #0]
   344fc:	2805      	cmp	r0, #5
   344fe:	f340 8167 	ble.w	347d0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x368>
   34502:	685b      	ldr	r3, [r3, #4]
    for (int i = 0; i < size_; i++) {
   34504:	3b04      	subs	r3, #4
    int8_t* output_data) {
   34506:	2100      	movs	r1, #0
   34508:	2201      	movs	r2, #1
      buffer_size *= dims_data[i];
   3450a:	f853 4f04 	ldr.w	r4, [r3, #4]!
    for (int i = 0; i < size_; i++) {
   3450e:	3101      	adds	r1, #1
   34510:	4281      	cmp	r1, r0
      buffer_size *= dims_data[i];
   34512:	fb04 f202 	mul.w	r2, r4, r2
    for (int i = 0; i < size_; i++) {
   34516:	dbf8      	blt.n	3450a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xa2>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   34518:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   3451a:	429a      	cmp	r2, r3
   3451c:	f040 815f 	bne.w	347de <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x376>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   34520:	68ab      	ldr	r3, [r5, #8]
   34522:	9306      	str	r3, [sp, #24]
   34524:	68eb      	ldr	r3, [r5, #12]
   34526:	9305      	str	r3, [sp, #20]
   34528:	68bb      	ldr	r3, [r7, #8]
   3452a:	9307      	str	r3, [sp, #28]
   3452c:	68fb      	ldr	r3, [r7, #12]
   3452e:	9303      	str	r3, [sp, #12]
   34530:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   34532:	689b      	ldr	r3, [r3, #8]
   34534:	9315      	str	r3, [sp, #84]	; 0x54
   34536:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   34538:	68db      	ldr	r3, [r3, #12]
   3453a:	9314      	str	r3, [sp, #80]	; 0x50
  const int input_width = input_shape.Dims(2);
  const int filter_height = filter_shape.Dims(1);
  const int filter_width = filter_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  for (int batch = 0; batch < batches; ++batch) {
   3453c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   3453e:	2b00      	cmp	r3, #0
   34540:	f340 8117 	ble.w	34772 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x30a>
   34544:	2600      	movs	r6, #0
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
  assert(exponent >= 0);
  assert(exponent <= 31);
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   34546:	46b6      	mov	lr, r6
   34548:	46ac      	mov	ip, r5
   3454a:	46b8      	mov	r8, r7
    for (int out_y = 0; out_y < output_height; ++out_y) {
   3454c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   3454e:	2b00      	cmp	r3, #0
   34550:	f340 8109 	ble.w	34766 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2fe>
   34554:	9b19      	ldr	r3, [sp, #100]	; 0x64
   34556:	425b      	negs	r3, r3
   34558:	9310      	str	r3, [sp, #64]	; 0x40
   3455a:	2300      	movs	r3, #0
   3455c:	930e      	str	r3, [sp, #56]	; 0x38
   3455e:	4663      	mov	r3, ip
   34560:	46f4      	mov	ip, lr
   34562:	469e      	mov	lr, r3
      const int in_y_origin = (out_y * stride_height) - pad_height;
      for (int out_x = 0; out_x < output_width; ++out_x) {
   34564:	9b14      	ldr	r3, [sp, #80]	; 0x50
   34566:	2b00      	cmp	r3, #0
   34568:	f340 80ef 	ble.w	3474a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2e2>
   3456c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   3456e:	425b      	negs	r3, r3
   34570:	9309      	str	r3, [sp, #36]	; 0x24
   34572:	2300      	movs	r3, #0
   34574:	930d      	str	r3, [sp, #52]	; 0x34
        const int in_x_origin = (out_x * stride_width) - pad_width;
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   34576:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   34578:	2b00      	cmp	r3, #0
   3457a:	f340 80db 	ble.w	34734 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2cc>
   3457e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   34580:	3b04      	subs	r3, #4
   34582:	930b      	str	r3, [sp, #44]	; 0x2c
   34584:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   34586:	3b04      	subs	r3, #4
   34588:	930a      	str	r3, [sp, #40]	; 0x28
   3458a:	2700      	movs	r7, #0
          int32_t acc = 0;
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   3458c:	9b07      	ldr	r3, [sp, #28]
   3458e:	2b00      	cmp	r3, #0
          int32_t acc = 0;
   34590:	f04f 0600 	mov.w	r6, #0
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   34594:	dd72      	ble.n	3467c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x214>
   34596:	9810      	ldr	r0, [sp, #64]	; 0x40
   34598:	4634      	mov	r4, r6
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   3459a:	9b03      	ldr	r3, [sp, #12]
   3459c:	2b00      	cmp	r3, #0
   3459e:	dd67      	ble.n	34670 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x208>
   345a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   345a2:	2100      	movs	r1, #0
   345a4:	e005      	b.n	345b2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x14a>
   345a6:	9b04      	ldr	r3, [sp, #16]
   345a8:	441a      	add	r2, r3
   345aa:	9b03      	ldr	r3, [sp, #12]
   345ac:	3101      	adds	r1, #1
   345ae:	4299      	cmp	r1, r3
   345b0:	d05e      	beq.n	34670 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x208>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   345b2:	2a00      	cmp	r2, #0
   345b4:	dbf7      	blt.n	345a6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x13e>
   345b6:	9b05      	ldr	r3, [sp, #20]
   345b8:	429a      	cmp	r2, r3
   345ba:	daf4      	bge.n	345a6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x13e>
   345bc:	2800      	cmp	r0, #0
   345be:	dbf2      	blt.n	345a6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x13e>
   345c0:	9b06      	ldr	r3, [sp, #24]
   345c2:	4298      	cmp	r0, r3
   345c4:	daef      	bge.n	345a6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x13e>

              if (!is_point_inside_image) {
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   345c6:	9b01      	ldr	r3, [sp, #4]
   345c8:	2b00      	cmp	r3, #0
   345ca:	ddec      	ble.n	345a6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x13e>
  inline int32_t DimensionsCount() const { return size_; }
   345cc:	f8de 5000 	ldr.w	r5, [lr]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   345d0:	2d04      	cmp	r5, #4
  inline int32_t DimensionsCount() const { return size_; }
   345d2:	f04f 0300 	mov.w	r3, #0
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   345d6:	f040 8102 	bne.w	347de <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x376>
   345da:	9600      	str	r6, [sp, #0]
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   345dc:	f8de 5004 	ldr.w	r5, [lr, #4]
   345e0:	4565      	cmp	r5, ip
   345e2:	f340 80fc 	ble.w	347de <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x376>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   345e6:	f8de 5008 	ldr.w	r5, [lr, #8]
   345ea:	42a8      	cmp	r0, r5
   345ec:	f280 80f7 	bge.w	347de <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x376>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   345f0:	f8de a00c 	ldr.w	sl, [lr, #12]
   345f4:	4552      	cmp	r2, sl
   345f6:	f280 80f2 	bge.w	347de <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x376>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   345fa:	f8de 9010 	ldr.w	r9, [lr, #16]
   345fe:	4599      	cmp	r9, r3
   34600:	f340 80ed 	ble.w	347de <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x376>
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
                                                      in_x, in_channel)];
   34604:	9e26      	ldr	r6, [sp, #152]	; 0x98
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   34606:	fb0c 0505 	mla	r5, ip, r5, r0
   3460a:	fb0a 2505 	mla	r5, sl, r5, r2
   3460e:	fb09 6505 	mla	r5, r9, r5, r6
   34612:	f915 9003 	ldrsb.w	r9, [r5, r3]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   34616:	f8d8 5000 	ldr.w	r5, [r8]
   3461a:	2d04      	cmp	r5, #4
   3461c:	f040 80df 	bne.w	347de <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x376>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   34620:	f8d8 5004 	ldr.w	r5, [r8, #4]
   34624:	42bd      	cmp	r5, r7
   34626:	f340 80da 	ble.w	347de <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x376>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   3462a:	f8d8 5008 	ldr.w	r5, [r8, #8]
   3462e:	42a5      	cmp	r5, r4
   34630:	f340 80d5 	ble.w	347de <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x376>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   34634:	f8d8 b00c 	ldr.w	fp, [r8, #12]
   34638:	458b      	cmp	fp, r1
   3463a:	f340 80d0 	ble.w	347de <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x376>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   3463e:	f8d8 a010 	ldr.w	sl, [r8, #16]
   34642:	459a      	cmp	sl, r3
   34644:	f340 80cb 	ble.w	347de <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x376>
                int32_t filter_val = filter_data[Offset(
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
   34648:	9e28      	ldr	r6, [sp, #160]	; 0xa0
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   3464a:	fb07 4505 	mla	r5, r7, r5, r4
   3464e:	fb0b 1505 	mla	r5, fp, r5, r1
   34652:	fb0a 6505 	mla	r5, sl, r5, r6
                // long as the filter size (filter_y * filter_x * in_channel)
                // does not exceed 2^16, which is the case in all the models
                // we have seen so far.
                // TODO(b/174275578): Add a check to make sure the
                // accumulator depth is smaller than 2^16.
                acc += filter_val * (input_val + input_offset);
   34656:	9e02      	ldr	r6, [sp, #8]
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
   34658:	56ed      	ldrsb	r5, [r5, r3]
                acc += filter_val * (input_val + input_offset);
   3465a:	44b1      	add	r9, r6
   3465c:	9e00      	ldr	r6, [sp, #0]
   3465e:	fb09 6505 	mla	r5, r9, r5, r6
   34662:	9500      	str	r5, [sp, #0]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   34664:	9d01      	ldr	r5, [sp, #4]
   34666:	3301      	adds	r3, #1
   34668:	42ab      	cmp	r3, r5
   3466a:	d1b7      	bne.n	345dc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x174>
   3466c:	9e00      	ldr	r6, [sp, #0]
   3466e:	e79a      	b.n	345a6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x13e>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   34670:	9b08      	ldr	r3, [sp, #32]
   34672:	4418      	add	r0, r3
   34674:	9b07      	ldr	r3, [sp, #28]
   34676:	3401      	adds	r4, #1
   34678:	429c      	cmp	r4, r3
   3467a:	d18e      	bne.n	3459a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x132>
              }
            }
          }

          if (bias_data) {
   3467c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   3467e:	b113      	cbz	r3, 34686 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x21e>
            acc += bias_data[out_channel];
   34680:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
   34684:	441e      	add	r6, r3
          }
          acc = MultiplyByQuantizedMultiplier(
   34686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   34688:	f853 0f04 	ldr.w	r0, [r3, #4]!
   3468c:	930a      	str	r3, [sp, #40]	; 0x28
   3468e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
   34690:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
   34694:	f853 1f04 	ldr.w	r1, [r3, #4]!
   34698:	930b      	str	r3, [sp, #44]	; 0x2c
  int right_shift = shift > 0 ? 0 : -shift;
   3469a:	2800      	cmp	r0, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
   3469c:	fa06 f202 	lsl.w	r2, r6, r2
  int right_shift = shift > 0 ? 0 : -shift;
   346a0:	bfd4      	ite	le
   346a2:	4240      	negle	r0, r0
   346a4:	2000      	movgt	r0, #0
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   346a6:	4291      	cmp	r1, r2
   346a8:	d068      	beq.n	3477c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x314>
  std::int64_t ab_64 = a_64 * b_64;
   346aa:	fb81 2302 	smull	r2, r3, r1, r2
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   346ae:	2b00      	cmp	r3, #0
   346b0:	f2c0 808a 	blt.w	347c8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x360>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   346b4:	f112 4280 	adds.w	r2, r2, #1073741824	; 0x40000000
   346b8:	f143 0300 	adc.w	r3, r3, #0
   346bc:	0fd2      	lsrs	r2, r2, #31
   346be:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
  assert(exponent <= 31);
   346c2:	281f      	cmp	r0, #31
   346c4:	dc79      	bgt.n	347ba <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x352>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   346c6:	2301      	movs	r3, #1
   346c8:	4083      	lsls	r3, r0
   346ca:	3b01      	subs	r3, #1
  return a >> offset;
   346cc:	fa42 f100 	asr.w	r1, r2, r0
   346d0:	1058      	asrs	r0, r3, #1
  return a & b;
   346d2:	4013      	ands	r3, r2
  return a + b;
   346d4:	eb00 72d2 	add.w	r2, r0, r2, lsr #31
   346d8:	4293      	cmp	r3, r2
   346da:	bfc8      	it	gt
   346dc:	3101      	addgt	r1, #1
              acc, output_multiplier[out_channel], output_shift[out_channel]);
          acc += output_offset;
   346de:	9b11      	ldr	r3, [sp, #68]	; 0x44
   346e0:	18c8      	adds	r0, r1, r3
      if (__a < __b)
   346e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   346e4:	4283      	cmp	r3, r0
   346e6:	dc47      	bgt.n	34778 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x310>
    min(const _Tp& __a, const _Tp& __b)
   346e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   346ea:	4298      	cmp	r0, r3
   346ec:	bfa8      	it	ge
   346ee:	4618      	movge	r0, r3
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   346f0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   346f2:	681b      	ldr	r3, [r3, #0]
   346f4:	2b04      	cmp	r3, #4
   346f6:	d172      	bne.n	347de <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x376>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   346f8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   346fa:	685b      	ldr	r3, [r3, #4]
   346fc:	4563      	cmp	r3, ip
   346fe:	dd6e      	ble.n	347de <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x376>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   34700:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   34702:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   34704:	689b      	ldr	r3, [r3, #8]
   34706:	42a3      	cmp	r3, r4
   34708:	dd69      	ble.n	347de <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x376>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   3470a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   3470c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   3470e:	68d1      	ldr	r1, [r2, #12]
   34710:	42a9      	cmp	r1, r5
   34712:	dd64      	ble.n	347de <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x376>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   34714:	6912      	ldr	r2, [r2, #16]
   34716:	42ba      	cmp	r2, r7
   34718:	dd61      	ble.n	347de <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x376>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   3471a:	fb0c 4303 	mla	r3, ip, r3, r4
   3471e:	fb01 5303 	mla	r3, r1, r3, r5
          acc = std::max(acc, output_activation_min);
          acc = std::min(acc, output_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   34722:	992c      	ldr	r1, [sp, #176]	; 0xb0
   34724:	fb02 1303 	mla	r3, r2, r3, r1
   34728:	55d8      	strb	r0, [r3, r7]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   3472a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   3472c:	3701      	adds	r7, #1
   3472e:	429f      	cmp	r7, r3
   34730:	f47f af2c 	bne.w	3458c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x124>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   34734:	9a09      	ldr	r2, [sp, #36]	; 0x24
   34736:	9916      	ldr	r1, [sp, #88]	; 0x58
   34738:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   3473a:	440a      	add	r2, r1
   3473c:	9209      	str	r2, [sp, #36]	; 0x24
   3473e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   34740:	3301      	adds	r3, #1
   34742:	4293      	cmp	r3, r2
   34744:	930d      	str	r3, [sp, #52]	; 0x34
   34746:	f47f af16 	bne.w	34576 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x10e>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   3474a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   3474c:	9917      	ldr	r1, [sp, #92]	; 0x5c
   3474e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   34750:	440a      	add	r2, r1
   34752:	9210      	str	r2, [sp, #64]	; 0x40
   34754:	9a15      	ldr	r2, [sp, #84]	; 0x54
   34756:	3301      	adds	r3, #1
   34758:	4293      	cmp	r3, r2
   3475a:	930e      	str	r3, [sp, #56]	; 0x38
   3475c:	f47f af02 	bne.w	34564 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xfc>
   34760:	4673      	mov	r3, lr
   34762:	46e6      	mov	lr, ip
   34764:	469c      	mov	ip, r3
  for (int batch = 0; batch < batches; ++batch) {
   34766:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   34768:	f10e 0e01 	add.w	lr, lr, #1
   3476c:	459e      	cmp	lr, r3
   3476e:	f47f aeed 	bne.w	3454c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe4>
              static_cast<int8_t>(acc);
        }
      }
    }
  }
}
   34772:	b01d      	add	sp, #116	; 0x74
   34774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34778:	4618      	mov	r0, r3
   3477a:	e7b9      	b.n	346f0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x288>
  std::int64_t ab_64 = a_64 * b_64;
   3477c:	fb81 2301 	smull	r2, r3, r1, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   34780:	2b00      	cmp	r3, #0
   34782:	4c18      	ldr	r4, [pc, #96]	; (347e4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x37c>)
   34784:	bfa6      	itte	ge
   34786:	2500      	movge	r5, #0
   34788:	f04f 4480 	movge.w	r4, #1073741824	; 0x40000000
   3478c:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   34790:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   34794:	bf08      	it	eq
   34796:	f06f 4200 	mvneq.w	r2, #2147483648	; 0x80000000
   3479a:	d092      	beq.n	346c2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x25a>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   3479c:	1912      	adds	r2, r2, r4
   3479e:	eb43 0305 	adc.w	r3, r3, r5
   347a2:	2b00      	cmp	r3, #0
   347a4:	da04      	bge.n	347b0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x348>
   347a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   347aa:	1852      	adds	r2, r2, r1
   347ac:	f143 0300 	adc.w	r3, r3, #0
   347b0:	0fd2      	lsrs	r2, r2, #31
  assert(exponent <= 31);
   347b2:	281f      	cmp	r0, #31
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   347b4:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
  assert(exponent <= 31);
   347b8:	dd85      	ble.n	346c6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x25e>
   347ba:	4b0b      	ldr	r3, [pc, #44]	; (347e8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x380>)
   347bc:	4a0b      	ldr	r2, [pc, #44]	; (347ec <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x384>)
   347be:	480c      	ldr	r0, [pc, #48]	; (347f0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x388>)
   347c0:	f240 1167 	movw	r1, #359	; 0x167
   347c4:	f7f6 fab2 	bl	2ad2c <__assert_func>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   347c8:	4c06      	ldr	r4, [pc, #24]	; (347e4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x37c>)
   347ca:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   347ce:	e7e5      	b.n	3479c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x334>
    for (int i = 0; i < size_; i++) {
   347d0:	2800      	cmp	r0, #0
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   347d2:	f103 0304 	add.w	r3, r3, #4
    for (int i = 0; i < size_; i++) {
   347d6:	f73f ae95 	bgt.w	34504 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x9c>
    int buffer_size = 1;
   347da:	2201      	movs	r2, #1
   347dc:	e69c      	b.n	34518 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xb0>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   347de:	f7f7 fbdd 	bl	2bf9c <abort>
   347e2:	bf00      	nop
   347e4:	c0000001 	.word	0xc0000001
   347e8:	0004315c 	.word	0x0004315c
   347ec:	0004316c 	.word	0x0004316c
   347f0:	000431c8 	.word	0x000431c8

000347f4 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0>:

TfLiteStatus EvalQuantizedPerChannel(
   347f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   347f8:	4614      	mov	r4, r2
    TfLiteContext* context, TfLiteNode* node, const TfLiteConvParams& params,
    const OpData& data, const TfLiteEvalTensor* input,
    const TfLiteEvalTensor* filter, const TfLiteEvalTensor* bias,
    TfLiteEvalTensor* output, TfLiteEvalTensor* im2col) {
  cmsis_nn_conv_params conv_params;
  conv_params.dilation.h = params.dilation_height_factor;
   347fa:	694a      	ldr	r2, [r1, #20]
TfLiteStatus EvalQuantizedPerChannel(
   347fc:	b0e7      	sub	sp, #412	; 0x19c
   347fe:	461d      	mov	r5, r3
  conv_params.dilation.w = params.dilation_width_factor;
  // TODO(#43557) Remove checks for dilation and call to reference
  // implementation when dilation is supported in the optimized implementation
  // by CMSIS-NN.
  if (conv_params.dilation.h == 1 && conv_params.dilation.w == 1) {
   34800:	2a01      	cmp	r2, #1
  conv_params.dilation.w = params.dilation_width_factor;
   34802:	690b      	ldr	r3, [r1, #16]
TfLiteStatus EvalQuantizedPerChannel(
   34804:	f8dd 81c0 	ldr.w	r8, [sp, #448]	; 0x1c0
  conv_params.dilation.h = params.dilation_height_factor;
   34808:	9255      	str	r2, [sp, #340]	; 0x154
TfLiteStatus EvalQuantizedPerChannel(
   3480a:	e9dd 7671 	ldrd	r7, r6, [sp, #452]	; 0x1c4
  conv_params.dilation.w = params.dilation_width_factor;
   3480e:	9354      	str	r3, [sp, #336]	; 0x150
  if (conv_params.dilation.h == 1 && conv_params.dilation.w == 1) {
   34810:	d101      	bne.n	34816 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x22>
   34812:	2b01      	cmp	r3, #1
   34814:	d04d      	beq.n	348b2 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0xbe>
            tflite::micro::GetTensorData<int32_t>(bias), &output_dims,
            tflite::micro::GetTensorData<int8_t>(output)),
        ARM_MATH_SUCCESS);
  } else {
    reference_integer_ops::ConvPerChannel(
        ConvParamsQuantized(params, data.reference_op_data),
   34816:	a858      	add	r0, sp, #352	; 0x160
   34818:	4622      	mov	r2, r4
   3481a:	f000 f969 	bl	34af0 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
        data.reference_op_data.per_channel_output_multiplier,
        data.reference_op_data.per_channel_output_shift,
        tflite::micro::GetTensorShape(input),
   3481e:	4629      	mov	r1, r5
   34820:	a848      	add	r0, sp, #288	; 0x120
        data.reference_op_data.per_channel_output_shift,
   34822:	e9d4 9a09 	ldrd	r9, sl, [r4, #36]	; 0x24
        tflite::micro::GetTensorShape(input),
   34826:	f000 fc37 	bl	35098 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
  TFLITE_DCHECK(tensor != nullptr);
   3482a:	2d00      	cmp	r5, #0
   3482c:	f000 80f1 	beq.w	34a12 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x21e>
        tflite::micro::GetTensorData<int8_t>(input),
        tflite::micro::GetTensorShape(filter),
   34830:	ac42      	add	r4, sp, #264	; 0x108
   34832:	4641      	mov	r1, r8
   34834:	4620      	mov	r0, r4
  return reinterpret_cast<const T*>(tensor->data.raw);
   34836:	f8d5 b000 	ldr.w	fp, [r5]
   3483a:	f000 fc2d 	bl	35098 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   3483e:	f1b8 0f00 	cmp.w	r8, #0
   34842:	f000 80e6 	beq.w	34a12 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x21e>
        tflite::micro::GetTensorData<int8_t>(filter),
        tflite::micro::GetTensorShape(bias),
   34846:	ad3c      	add	r5, sp, #240	; 0xf0
   34848:	4639      	mov	r1, r7
   3484a:	4628      	mov	r0, r5
  return reinterpret_cast<const T*>(tensor->data.raw);
   3484c:	f8d8 8000 	ldr.w	r8, [r8]
   34850:	f000 fc22 	bl	35098 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   34854:	2f00      	cmp	r7, #0
   34856:	f000 80dc 	beq.w	34a12 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x21e>
  return reinterpret_cast<const T*>(tensor->data.raw);
   3485a:	683b      	ldr	r3, [r7, #0]
   3485c:	9309      	str	r3, [sp, #36]	; 0x24
        tflite::micro::GetTensorData<int32_t>(bias),
        tflite::micro::GetTensorShape(output),
   3485e:	af36      	add	r7, sp, #216	; 0xd8
   34860:	4631      	mov	r1, r6
   34862:	4638      	mov	r0, r7
   34864:	f000 fc18 	bl	35098 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   34868:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3486a:	b106      	cbz	r6, 3486e <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7a>
   3486c:	6836      	ldr	r6, [r6, #0]
    reference_integer_ops::ConvPerChannel(
   3486e:	f8cd b000 	str.w	fp, [sp]
   34872:	e9cd 5303 	strd	r5, r3, [sp, #12]
   34876:	e9cd 7605 	strd	r7, r6, [sp, #20]
   3487a:	ab48      	add	r3, sp, #288	; 0x120
   3487c:	e9cd 4801 	strd	r4, r8, [sp, #4]
   34880:	4652      	mov	r2, sl
   34882:	4649      	mov	r1, r9
   34884:	a858      	add	r0, sp, #352	; 0x160
   34886:	f7ff fdef 	bl	34468 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
    if (size_ > kMaxSmallSize) {
   3488a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
   3488c:	2b05      	cmp	r3, #5
   3488e:	f300 80c0 	bgt.w	34a12 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x21e>
   34892:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
   34894:	2b05      	cmp	r3, #5
   34896:	f300 80bc 	bgt.w	34a12 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x21e>
   3489a:	9b42      	ldr	r3, [sp, #264]	; 0x108
   3489c:	2b05      	cmp	r3, #5
   3489e:	f300 80b8 	bgt.w	34a12 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x21e>
   348a2:	9b48      	ldr	r3, [sp, #288]	; 0x120
   348a4:	2b05      	cmp	r3, #5
   348a6:	f300 80b4 	bgt.w	34a12 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x21e>
        tflite::micro::GetTensorData<int8_t>(output));
  }
  return kTfLiteOk;
}
   348aa:	2000      	movs	r0, #0
   348ac:	b067      	add	sp, #412	; 0x19c
   348ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    conv_params.input_offset = -data.reference_op_data.input_zero_point;
   348b2:	6922      	ldr	r2, [r4, #16]
   348b4:	9309      	str	r3, [sp, #36]	; 0x24
   348b6:	4252      	negs	r2, r2
   348b8:	924e      	str	r2, [sp, #312]	; 0x138
    conv_params.output_offset = data.reference_op_data.output_zero_point;
   348ba:	69a2      	ldr	r2, [r4, #24]
   348bc:	924f      	str	r2, [sp, #316]	; 0x13c
    conv_params.stride.h = params.stride_height;
   348be:	688a      	ldr	r2, [r1, #8]
   348c0:	9251      	str	r2, [sp, #324]	; 0x144
    conv_params.stride.w = params.stride_width;
   348c2:	684a      	ldr	r2, [r1, #4]
   348c4:	9250      	str	r2, [sp, #320]	; 0x140
    conv_params.padding.h = data.reference_op_data.padding.height;
   348c6:	6862      	ldr	r2, [r4, #4]
   348c8:	9253      	str	r2, [sp, #332]	; 0x14c
    conv_params.padding.w = data.reference_op_data.padding.width;
   348ca:	6822      	ldr	r2, [r4, #0]
   348cc:	9252      	str	r2, [sp, #328]	; 0x148
    conv_params.activation.min = data.reference_op_data.output_activation_min;
   348ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   348d0:	9256      	str	r2, [sp, #344]	; 0x158
    conv_params.activation.max = data.reference_op_data.output_activation_max;
   348d2:	6b22      	ldr	r2, [r4, #48]	; 0x30
   348d4:	9257      	str	r2, [sp, #348]	; 0x15c
    quant_params.multiplier = const_cast<int32_t*>(
   348d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
   348d8:	920a      	str	r2, [sp, #40]	; 0x28
    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
   348da:	4641      	mov	r1, r8
    quant_params.shift =
   348dc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   348de:	920b      	str	r2, [sp, #44]	; 0x2c
    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
   348e0:	4681      	mov	r9, r0
   348e2:	a81e      	add	r0, sp, #120	; 0x78
   348e4:	f000 fbd8 	bl	35098 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
   348e8:	a824      	add	r0, sp, #144	; 0x90
   348ea:	4629      	mov	r1, r5
   348ec:	f000 fbd4 	bl	35098 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
   348f0:	4631      	mov	r1, r6
   348f2:	a82a      	add	r0, sp, #168	; 0xa8
   348f4:	f000 fbd0 	bl	35098 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
   348f8:	4639      	mov	r1, r7
   348fa:	a830      	add	r0, sp, #192	; 0xc0
   348fc:	f000 fbcc 	bl	35098 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    TFLITE_DCHECK_LE(conv_params.activation.min, conv_params.activation.max);
   34900:	e9dd 1256 	ldrd	r1, r2, [sp, #344]	; 0x158
   34904:	4291      	cmp	r1, r2
   34906:	9b09      	ldr	r3, [sp, #36]	; 0x24
   34908:	f300 8083 	bgt.w	34a12 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x21e>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   3490c:	9a24      	ldr	r2, [sp, #144]	; 0x90
   3490e:	2a04      	cmp	r2, #4
   34910:	d17f      	bne.n	34a12 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x21e>
    TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   34912:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   34914:	2a04      	cmp	r2, #4
   34916:	d17c      	bne.n	34a12 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x21e>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   34918:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   3491a:	2a04      	cmp	r2, #4
   3491c:	d179      	bne.n	34a12 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x21e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   3491e:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   34922:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   34924:	4562      	cmp	r2, ip
   34926:	d174      	bne.n	34a12 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x21e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   34928:	9828      	ldr	r0, [sp, #160]	; 0xa0
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   3492a:	9a22      	ldr	r2, [sp, #136]	; 0x88
   3492c:	4282      	cmp	r2, r0
   3492e:	d170      	bne.n	34a12 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x21e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   34930:	f8dd e07c 	ldr.w	lr, [sp, #124]	; 0x7c
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   34934:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
   34936:	4572      	cmp	r2, lr
   34938:	d16b      	bne.n	34a12 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x21e>
  TFLITE_DCHECK(tensor != nullptr);
   3493a:	2f00      	cmp	r7, #0
   3493c:	d069      	beq.n	34a12 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x21e>
    if (tflite::micro::GetTensorData<int8_t>(bias)) {
   3493e:	683a      	ldr	r2, [r7, #0]
   34940:	b19a      	cbz	r2, 3496a <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x176>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   34942:	f8dd a0c0 	ldr.w	sl, [sp, #192]	; 0xc0
   34946:	f1ba 0f05 	cmp.w	sl, #5
   3494a:	dc64      	bgt.n	34a16 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x222>
    for (int i = 0; i < size_; i++) {
   3494c:	f1ba 0f00 	cmp.w	sl, #0
   34950:	dd09      	ble.n	34966 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x172>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   34952:	a931      	add	r1, sp, #196	; 0xc4
   34954:	3904      	subs	r1, #4
   34956:	2200      	movs	r2, #0
      buffer_size *= dims_data[i];
   34958:	f851 bf04 	ldr.w	fp, [r1, #4]!
    for (int i = 0; i < size_; i++) {
   3495c:	3201      	adds	r2, #1
   3495e:	4592      	cmp	sl, r2
      buffer_size *= dims_data[i];
   34960:	fb0b f303 	mul.w	r3, fp, r3
    for (int i = 0; i < size_; i++) {
   34964:	dcf8      	bgt.n	34958 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x164>
      TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   34966:	459e      	cmp	lr, r3
   34968:	d153      	bne.n	34a12 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x21e>
    ctx.buf = nullptr;
   3496a:	2300      	movs	r3, #0
    ctx.size = 0;
   3496c:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    input_dims.h = input_shape.Dims(1);
   34970:	9b26      	ldr	r3, [sp, #152]	; 0x98
    if (data.buffer_idx > -1) {
   34972:	6b61      	ldr	r1, [r4, #52]	; 0x34
    input_dims.h = input_shape.Dims(1);
   34974:	9313      	str	r3, [sp, #76]	; 0x4c
    input_dims.w = input_shape.Dims(2);
   34976:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   34978:	9314      	str	r3, [sp, #80]	; 0x50
    filter_dims.h = filter_shape.Dims(1);
   3497a:	9b20      	ldr	r3, [sp, #128]	; 0x80
   3497c:	9317      	str	r3, [sp, #92]	; 0x5c
    filter_dims.w = filter_shape.Dims(2);
   3497e:	9b21      	ldr	r3, [sp, #132]	; 0x84
   34980:	9318      	str	r3, [sp, #96]	; 0x60
    output_dims.h = output_shape.Dims(1);
   34982:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   34984:	931b      	str	r3, [sp, #108]	; 0x6c
    output_dims.w = output_shape.Dims(2);
   34986:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   34988:	931c      	str	r3, [sp, #112]	; 0x70
    bias_dims.w = 1;
   3498a:	2301      	movs	r3, #1
    bias_dims.n = 1;
   3498c:	2201      	movs	r2, #1
    bias_dims.w = 1;
   3498e:	9310      	str	r3, [sp, #64]	; 0x40
    if (data.buffer_idx > -1) {
   34990:	2900      	cmp	r1, #0
    bias_dims.n = 1;
   34992:	f04f 0301 	mov.w	r3, #1
    filter_dims.n = output_depth;
   34996:	ac16      	add	r4, sp, #88	; 0x58
    output_dims.n = batch_size;
   34998:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
    bias_dims.w = 1;
   3499c:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
    bias_dims.n = 1;
   349a0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    input_dims.n = batch_size;
   349a4:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
    input_dims.c = input_depth;
   349a8:	9015      	str	r0, [sp, #84]	; 0x54
    filter_dims.c = input_depth;
   349aa:	60e0      	str	r0, [r4, #12]
    filter_dims.n = output_depth;
   349ac:	f8c4 e000 	str.w	lr, [r4]
    output_dims.n = batch_size;
   349b0:	f8ca c000 	str.w	ip, [sl]
    output_dims.c = output_depth;
   349b4:	f8ca e00c 	str.w	lr, [sl, #12]
    bias_dims.c = output_depth;
   349b8:	f8cb e00c 	str.w	lr, [fp, #12]
    if (data.buffer_idx > -1) {
   349bc:	db04      	blt.n	349c8 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x1d4>
      ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
   349be:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
   349c2:	4648      	mov	r0, r9
   349c4:	4798      	blx	r3
   349c6:	900c      	str	r0, [sp, #48]	; 0x30
   349c8:	b31d      	cbz	r5, 34a12 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x21e>
  return reinterpret_cast<const T*>(tensor->data.raw);
   349ca:	682b      	ldr	r3, [r5, #0]
  TFLITE_DCHECK(tensor != nullptr);
   349cc:	f1b8 0f00 	cmp.w	r8, #0
   349d0:	d01f      	beq.n	34a12 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x21e>
  return reinterpret_cast<const T*>(tensor->data.raw);
   349d2:	f8d8 2000 	ldr.w	r2, [r8]
   349d6:	6839      	ldr	r1, [r7, #0]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   349d8:	b106      	cbz	r6, 349dc <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x1e8>
   349da:	6836      	ldr	r6, [r6, #0]
    TFLITE_DCHECK_EQ(
   349dc:	9300      	str	r3, [sp, #0]
   349de:	e9cd b103 	strd	fp, r1, [sp, #12]
   349e2:	e9cd 4201 	strd	r4, r2, [sp, #4]
   349e6:	e9cd a605 	strd	sl, r6, [sp, #20]
   349ea:	ab12      	add	r3, sp, #72	; 0x48
   349ec:	aa0a      	add	r2, sp, #40	; 0x28
   349ee:	a80c      	add	r0, sp, #48	; 0x30
   349f0:	a94e      	add	r1, sp, #312	; 0x138
   349f2:	f007 fbef 	bl	3c1d4 <arm_convolve_wrapper_s8>
   349f6:	b960      	cbnz	r0, 34a12 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x21e>
    if (size_ > kMaxSmallSize) {
   349f8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   349fa:	2b05      	cmp	r3, #5
   349fc:	dc09      	bgt.n	34a12 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x21e>
   349fe:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   34a00:	2b05      	cmp	r3, #5
   34a02:	dc06      	bgt.n	34a12 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x21e>
   34a04:	9b24      	ldr	r3, [sp, #144]	; 0x90
   34a06:	2b05      	cmp	r3, #5
   34a08:	dc03      	bgt.n	34a12 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x21e>
   34a0a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   34a0c:	2b05      	cmp	r3, #5
   34a0e:	f77f af4c 	ble.w	348aa <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0xb6>
    TFLITE_DCHECK_LE(conv_params.activation.min, conv_params.activation.max);
   34a12:	f7f7 fac3 	bl	2bf9c <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   34a16:	9931      	ldr	r1, [sp, #196]	; 0xc4
    for (int i = 0; i < size_; i++) {
   34a18:	e79c      	b.n	34954 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x160>
   34a1a:	bf00      	nop

00034a1c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   34a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
   34a20:	4b27      	ldr	r3, [pc, #156]	; (34ac0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa4>)
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   34a22:	b084      	sub	sp, #16
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
   34a24:	681a      	ldr	r2, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
   34a26:	2800      	cmp	r0, #0
   34a28:	d047      	beq.n	34aba <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9e>
  TFLITE_DCHECK(node != nullptr);
   34a2a:	460c      	mov	r4, r1
   34a2c:	2900      	cmp	r1, #0
   34a2e:	d044      	beq.n	34aba <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9e>
  return context->GetEvalTensor(context, node->inputs->data[index]);
   34a30:	680b      	ldr	r3, [r1, #0]
   34a32:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   34a36:	6d42      	ldr	r2, [r0, #84]	; 0x54
   34a38:	6859      	ldr	r1, [r3, #4]
   34a3a:	4605      	mov	r5, r0
   34a3c:	4790      	blx	r2
   34a3e:	4a21      	ldr	r2, [pc, #132]	; (34ac4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa8>)
   34a40:	6823      	ldr	r3, [r4, #0]
   34a42:	6812      	ldr	r2, [r2, #0]
   34a44:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   34a48:	4606      	mov	r6, r0
   34a4a:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   34a4c:	6859      	ldr	r1, [r3, #4]
   34a4e:	4628      	mov	r0, r5
   34a50:	4790      	blx	r2
inline int NumDimensions(const TfLiteEvalTensor* t) { return t->dims->size; }
inline int SizeOfDimension(const TfLiteEvalTensor* t, int dim) {
  return t->dims->data[dim];
}

inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   34a52:	6823      	ldr	r3, [r4, #0]
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kConvWeightsTensor);
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
   34a54:	681a      	ldr	r2, [r3, #0]
   34a56:	2a03      	cmp	r2, #3
   34a58:	4607      	mov	r7, r0
   34a5a:	d024      	beq.n	34aa6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8a>
   34a5c:	f04f 0800 	mov.w	r8, #0
  return context->GetEvalTensor(context, node->outputs->data[index]);
   34a60:	4b19      	ldr	r3, [pc, #100]	; (34ac8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xac>)
   34a62:	681a      	ldr	r2, [r3, #0]
   34a64:	6863      	ldr	r3, [r4, #4]
   34a66:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   34a6a:	4628      	mov	r0, r5
   34a6c:	6859      	ldr	r1, [r3, #4]
   34a6e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   34a70:	4798      	blx	r3
          : nullptr;
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kConvOutputTensor);

  TFLITE_DCHECK(node->builtin_data != nullptr);
   34a72:	68e1      	ldr	r1, [r4, #12]
   34a74:	4603      	mov	r3, r0
   34a76:	b301      	cbz	r1, 34aba <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9e>
  const auto& params =
      *(reinterpret_cast<TfLiteConvParams*>(node->builtin_data));
  TFLITE_DCHECK(node->user_data != nullptr);
   34a78:	68a2      	ldr	r2, [r4, #8]
   34a7a:	b1f2      	cbz	r2, 34aba <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9e>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  TF_LITE_ENSURE_EQ(context, input->type, output->type);
   34a7c:	7a34      	ldrb	r4, [r6, #8]
   34a7e:	7a00      	ldrb	r0, [r0, #8]
   34a80:	42a0      	cmp	r0, r4
   34a82:	d102      	bne.n	34a8a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6e>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
   34a84:	7a3c      	ldrb	r4, [r7, #8]
   34a86:	4284      	cmp	r4, r0
   34a88:	d003      	beq.n	34a92 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x76>
  TF_LITE_ENSURE_EQ(context, input->type, output->type);
   34a8a:	2001      	movs	r0, #1
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
  }
  return kTfLiteOk;
}
   34a8c:	b004      	add	sp, #16
   34a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (input->type) {  // Already know in/out types are same.
   34a92:	2c09      	cmp	r4, #9
   34a94:	d1f9      	bne.n	34a8a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6e>
      return EvalQuantizedPerChannel(context, node, params, data, input, filter,
   34a96:	e9cd 8301 	strd	r8, r3, [sp, #4]
   34a9a:	9700      	str	r7, [sp, #0]
   34a9c:	4633      	mov	r3, r6
   34a9e:	4628      	mov	r0, r5
   34aa0:	f7ff fea8 	bl	347f4 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0>
                                     bias, output, nullptr);
   34aa4:	e7f2      	b.n	34a8c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x70>
  return context->GetEvalTensor(context, node->inputs->data[index]);
   34aa6:	4a09      	ldr	r2, [pc, #36]	; (34acc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb0>)
   34aa8:	6812      	ldr	r2, [r2, #0]
   34aaa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   34aae:	4628      	mov	r0, r5
   34ab0:	6859      	ldr	r1, [r3, #4]
   34ab2:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   34ab4:	4798      	blx	r3
   34ab6:	4680      	mov	r8, r0
   34ab8:	e7d2      	b.n	34a60 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x44>
  TFLITE_DCHECK(context != nullptr);
   34aba:	f7f7 fa6f 	bl	2bf9c <abort>
   34abe:	bf00      	nop
   34ac0:	00043218 	.word	0x00043218
   34ac4:	00043220 	.word	0x00043220
   34ac8:	0004321c 	.word	0x0004321c
   34acc:	00043214 	.word	0x00043214

00034ad0 <_ZN6tflite16Register_CONV_2DEv>:

}  // namespace

TfLiteRegistration Register_CONV_2D() {
   34ad0:	b510      	push	{r4, lr}
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   34ad2:	4c06      	ldr	r4, [pc, #24]	; (34aec <_ZN6tflite16Register_CONV_2DEv+0x1c>)
TfLiteRegistration Register_CONV_2D() {
   34ad4:	4686      	mov	lr, r0
          /*version=*/0};
   34ad6:	4684      	mov	ip, r0
   34ad8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   34ada:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   34ade:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   34ae2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
   34ae6:	4670      	mov	r0, lr
   34ae8:	bd10      	pop	{r4, pc}
   34aea:	bf00      	nop
   34aec:	0003ed9c 	.word	0x0003ed9c

00034af0 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>:
}

// Returns a ConvParams struct with all the parameters needed for a
// quantized computation.
ConvParams ConvParamsQuantized(const TfLiteConvParams& params,
                               const OpDataConv& data) {
   34af0:	b570      	push	{r4, r5, r6, lr}
   34af2:	4615      	mov	r5, r2
  ConvParams op_params;
  op_params.input_offset = -data.input_zero_point;
  op_params.weights_offset = -data.filter_zero_point;
   34af4:	e9d2 2304 	ldrd	r2, r3, [r2, #16]
  op_params.input_offset = -data.input_zero_point;
   34af8:	4252      	negs	r2, r2
  op_params.weights_offset = -data.filter_zero_point;
   34afa:	425b      	negs	r3, r3
   34afc:	e9c0 2305 	strd	r2, r3, [r0, #20]
  op_params.output_offset = data.output_zero_point;
   34b00:	69aa      	ldr	r2, [r5, #24]
  op_params.output_multiplier = data.output_multiplier;
  op_params.output_shift = -data.output_shift;
   34b02:	6a2b      	ldr	r3, [r5, #32]
  op_params.output_offset = data.output_zero_point;
   34b04:	61c2      	str	r2, [r0, #28]
  op_params.output_multiplier = data.output_multiplier;
   34b06:	69ea      	ldr	r2, [r5, #28]
  op_params.output_shift = -data.output_shift;
   34b08:	425b      	negs	r3, r3
                               const OpDataConv& data) {
   34b0a:	4604      	mov	r4, r0
   34b0c:	460e      	mov	r6, r1
  op_params.output_shift = -data.output_shift;
   34b0e:	e9c0 2308 	strd	r2, r3, [r0, #32]
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
   34b12:	7808      	ldrb	r0, [r1, #0]
   34b14:	f000 fad6 	bl	350c4 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
  op_params.padding_values.height = data.padding.height;
   34b18:	686b      	ldr	r3, [r5, #4]
   34b1a:	80a3      	strh	r3, [r4, #4]
  op_params.padding_values.width = data.padding.width;
  op_params.stride_height = params.stride_height;
   34b1c:	68b3      	ldr	r3, [r6, #8]
   34b1e:	81a3      	strh	r3, [r4, #12]
  op_params.stride_width = params.stride_width;
  op_params.dilation_height_factor = params.dilation_height_factor;
  op_params.dilation_width_factor = params.dilation_width_factor;
   34b20:	e9d6 1304 	ldrd	r1, r3, [r6, #16]
  op_params.padding_values.width = data.padding.width;
   34b24:	682a      	ldr	r2, [r5, #0]
   34b26:	8062      	strh	r2, [r4, #2]
  op_params.stride_width = params.stride_width;
   34b28:	6872      	ldr	r2, [r6, #4]
   34b2a:	8162      	strh	r2, [r4, #10]
  op_params.dilation_height_factor = params.dilation_height_factor;
   34b2c:	8223      	strh	r3, [r4, #16]
  op_params.quantized_activation_min = data.output_activation_min;
  op_params.quantized_activation_max = data.output_activation_max;
   34b2e:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
   34b32:	7020      	strb	r0, [r4, #0]
  op_params.quantized_activation_max = data.output_activation_max;
   34b34:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
  op_params.dilation_width_factor = params.dilation_width_factor;
   34b38:	81e1      	strh	r1, [r4, #14]
  return op_params;
}
   34b3a:	4620      	mov	r0, r4
   34b3c:	bd70      	pop	{r4, r5, r6, pc}
   34b3e:	bf00      	nop

00034b40 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:
TfLiteStatus CalculateOpDataConv(TfLiteContext* context, TfLiteNode* node,
                                 const TfLiteConvParams& params, int width,
                                 int height, int filter_width,
                                 int filter_height, int out_width,
                                 int out_height, const TfLiteType data_type,
                                 OpDataConv* data) {
   34b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34b44:	4615      	mov	r5, r2
  bool has_bias = node->inputs->size == 3;
   34b46:	680a      	ldr	r2, [r1, #0]
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
   34b48:	6812      	ldr	r2, [r2, #0]
                                 OpDataConv* data) {
   34b4a:	b08b      	sub	sp, #44	; 0x2c
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
   34b4c:	3a02      	subs	r2, #2
   34b4e:	2a01      	cmp	r2, #1
                                 OpDataConv* data) {
   34b50:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
   34b54:	9f1a      	ldr	r7, [sp, #104]	; 0x68
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
   34b56:	d804      	bhi.n	34b62 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x22>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
   34b58:	684a      	ldr	r2, [r1, #4]
   34b5a:	6812      	ldr	r2, [r2, #0]
   34b5c:	2a01      	cmp	r2, #1
   34b5e:	460c      	mov	r4, r1
   34b60:	d003      	beq.n	34b6a <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
   34b62:	2001      	movs	r0, #1
  data->input_zero_point = input->params.zero_point;
  data->filter_zero_point = filter->params.zero_point;
  data->output_zero_point = output->params.zero_point;

  return kTfLiteOk;
}
   34b64:	b00b      	add	sp, #44	; 0x2c
   34b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
}

// Matching GetWindowedOutputSize in TensorFlow.
inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   34b6a:	9915      	ldr	r1, [sp, #84]	; 0x54
   34b6c:	692a      	ldr	r2, [r5, #16]
      params.stride_height, params.stride_width, params.dilation_height_factor,
   34b6e:	f8d5 9004 	ldr.w	r9, [r5, #4]
   34b72:	f8d5 a008 	ldr.w	sl, [r5, #8]
   34b76:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
   34b7a:	fb02 fc0c 	mul.w	ip, r2, ip
   34b7e:	4606      	mov	r6, r0
  auto padding = params.padding;
   34b80:	782a      	ldrb	r2, [r5, #0]
      params.stride_height, params.stride_width, params.dilation_height_factor,
   34b82:	6968      	ldr	r0, [r5, #20]
   34b84:	f10c 0c01 	add.w	ip, ip, #1

  // TODO(b/186448822): This uses 0 since the function has no other way to
  // report error case
  if (stride == 0) return 0;
   34b88:	f1b9 0f00 	cmp.w	r9, #0
   34b8c:	d01e      	beq.n	34bcc <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x8c>

  switch (padding) {
   34b8e:	2a01      	cmp	r2, #1
   34b90:	f000 809f 	beq.w	34cd2 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x192>
   34b94:	2a02      	cmp	r2, #2
   34b96:	d12e      	bne.n	34bf6 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xb6>
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   34b98:	9a16      	ldr	r2, [sp, #88]	; 0x58
   34b9a:	1e51      	subs	r1, r2, #1
   34b9c:	fb00 f101 	mul.w	r1, r0, r1
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
   34ba0:	eb09 0203 	add.w	r2, r9, r3
   34ba4:	eba2 020c 	sub.w	r2, r2, ip
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   34ba8:	f101 0e01 	add.w	lr, r1, #1
      return (image_size + stride - effective_filter_size) / stride;
   34bac:	fb92 f2f9 	sdiv	r2, r2, r9
      ((out_size - 1) * stride + effective_filter_size - in_size);
   34bb0:	3a01      	subs	r2, #1
  if (stride == 0) return 0;
   34bb2:	f1ba 0f00 	cmp.w	sl, #0
   34bb6:	f000 809c 	beq.w	34cf2 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1b2>
      return (image_size + stride - effective_filter_size) / stride;
   34bba:	9914      	ldr	r1, [sp, #80]	; 0x50
   34bbc:	eb0a 0001 	add.w	r0, sl, r1
   34bc0:	eba0 000e 	sub.w	r0, r0, lr
   34bc4:	fb90 f0fa 	sdiv	r0, r0, sl
      ((out_size - 1) * stride + effective_filter_size - in_size);
   34bc8:	1e41      	subs	r1, r0, #1
      return (image_size + stride - effective_filter_size) / stride;
   34bca:	e01d      	b.n	34c08 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xc8>
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   34bcc:	9916      	ldr	r1, [sp, #88]	; 0x58
   34bce:	3901      	subs	r1, #1
   34bd0:	fb00 f101 	mul.w	r1, r0, r1
   34bd4:	f101 0e01 	add.w	lr, r1, #1
  if (stride == 0) return 0;
   34bd8:	f1ba 0f00 	cmp.w	sl, #0
   34bdc:	d075      	beq.n	34cca <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x18a>
  switch (padding) {
   34bde:	2a01      	cmp	r2, #1
   34be0:	f040 808a 	bne.w	34cf8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1b8>
   34be4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
      return (image_size + stride - 1) / stride;
   34be8:	9914      	ldr	r1, [sp, #80]	; 0x50
   34bea:	4451      	add	r1, sl
   34bec:	3901      	subs	r1, #1
   34bee:	fb91 f1fa 	sdiv	r1, r1, sl
      ((out_size - 1) * stride + effective_filter_size - in_size);
   34bf2:	3901      	subs	r1, #1
      return (image_size + stride - 1) / stride;
   34bf4:	e008      	b.n	34c08 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xc8>
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   34bf6:	9a16      	ldr	r2, [sp, #88]	; 0x58
   34bf8:	1e51      	subs	r1, r2, #1
   34bfa:	fb00 f101 	mul.w	r1, r0, r1
   34bfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   34c02:	f101 0e01 	add.w	lr, r1, #1
   34c06:	4611      	mov	r1, r2
      ((out_size - 1) * stride + effective_filter_size - in_size);
   34c08:	fb02 c209 	mla	r2, r2, r9, ip
  int total_padding =
   34c0c:	1ad3      	subs	r3, r2, r3
   34c0e:	9a14      	ldr	r2, [sp, #80]	; 0x50
      ((out_size - 1) * stride + effective_filter_size - in_size);
   34c10:	fb01 e10a 	mla	r1, r1, sl, lr
  int total_padding =
   34c14:	1a89      	subs	r1, r1, r2
  total_padding = total_padding > 0 ? total_padding : 0;
   34c16:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  return total_padding / 2;
   34c1a:	105a      	asrs	r2, r3, #1
  total_padding = total_padding > 0 ? total_padding : 0;
   34c1c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
  *offset = total_padding % 2;
   34c20:	f003 0301 	and.w	r3, r3, #1
      padding, &out_height, &out_width);
   34c24:	60bb      	str	r3, [r7, #8]
  return total_padding / 2;
   34c26:	104b      	asrs	r3, r1, #1
  *offset = total_padding % 2;
   34c28:	f001 0101 	and.w	r1, r1, #1
   34c2c:	603a      	str	r2, [r7, #0]
   34c2e:	60f9      	str	r1, [r7, #12]
   34c30:	607b      	str	r3, [r7, #4]
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
   34c32:	2200      	movs	r2, #0
   34c34:	4621      	mov	r1, r4
   34c36:	4630      	mov	r0, r6
   34c38:	f001 f96a 	bl	35f10 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
   34c3c:	4681      	mov	r9, r0
   34c3e:	2800      	cmp	r0, #0
   34c40:	d08f      	beq.n	34b62 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x22>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
   34c42:	2201      	movs	r2, #1
   34c44:	4621      	mov	r1, r4
   34c46:	4630      	mov	r0, r6
   34c48:	f001 f962 	bl	35f10 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
   34c4c:	4682      	mov	sl, r0
   34c4e:	2800      	cmp	r0, #0
   34c50:	d087      	beq.n	34b62 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x22>
      GetOptionalInputTensor(context, node, kConvBiasTensor);
   34c52:	4621      	mov	r1, r4
   34c54:	2202      	movs	r2, #2
   34c56:	4630      	mov	r0, r6
   34c58:	f001 f992 	bl	35f80 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
   34c5c:	4621      	mov	r1, r4
      GetOptionalInputTensor(context, node, kConvBiasTensor);
   34c5e:	4683      	mov	fp, r0
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
   34c60:	2200      	movs	r2, #0
   34c62:	4630      	mov	r0, r6
   34c64:	f001 f970 	bl	35f48 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
   34c68:	4604      	mov	r4, r0
   34c6a:	2800      	cmp	r0, #0
   34c6c:	f43f af79 	beq.w	34b62 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x22>
  if (data_type != kTfLiteFloat32) {
   34c70:	f1b8 0f01 	cmp.w	r8, #1
   34c74:	d109      	bne.n	34c8a <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x14a>
  data->input_zero_point = input->params.zero_point;
   34c76:	f8d9 100c 	ldr.w	r1, [r9, #12]
  data->filter_zero_point = filter->params.zero_point;
   34c7a:	f8da 200c 	ldr.w	r2, [sl, #12]
  data->output_zero_point = output->params.zero_point;
   34c7e:	68e3      	ldr	r3, [r4, #12]
   34c80:	61bb      	str	r3, [r7, #24]
  data->filter_zero_point = filter->params.zero_point;
   34c82:	e9c7 1204 	strd	r1, r2, [r7, #16]
  return kTfLiteOk;
   34c86:	2000      	movs	r0, #0
   34c88:	e76c      	b.n	34b64 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x24>
    int output_channels = filter->dims->data[kConvQuantizedDimension];
   34c8a:	f8da 2014 	ldr.w	r2, [sl, #20]
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
   34c8e:	350c      	adds	r5, #12
   34c90:	6852      	ldr	r2, [r2, #4]
   34c92:	9208      	str	r2, [sp, #32]
   34c94:	e9cd 4500 	strd	r4, r5, [sp]
   34c98:	6aba      	ldr	r2, [r7, #40]	; 0x28
   34c9a:	9207      	str	r2, [sp, #28]
   34c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   34c9e:	9206      	str	r2, [sp, #24]
   34ca0:	f107 0230 	add.w	r2, r7, #48	; 0x30
   34ca4:	9205      	str	r2, [sp, #20]
   34ca6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   34caa:	9204      	str	r2, [sp, #16]
   34cac:	f107 0220 	add.w	r2, r7, #32
   34cb0:	9203      	str	r2, [sp, #12]
   34cb2:	f107 021c 	add.w	r2, r7, #28
   34cb6:	9202      	str	r2, [sp, #8]
   34cb8:	465b      	mov	r3, fp
   34cba:	4630      	mov	r0, r6
   34cbc:	4652      	mov	r2, sl
   34cbe:	4649      	mov	r1, r9
   34cc0:	f001 f97a 	bl	35fb8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>
   34cc4:	2800      	cmp	r0, #0
   34cc6:	d0d6      	beq.n	34c76 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x136>
   34cc8:	e74c      	b.n	34b64 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x24>
   34cca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   34cce:	4611      	mov	r1, r2
   34cd0:	e79a      	b.n	34c08 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xc8>
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   34cd2:	9a16      	ldr	r2, [sp, #88]	; 0x58
   34cd4:	1e51      	subs	r1, r2, #1
   34cd6:	fb00 f101 	mul.w	r1, r0, r1
      return (image_size + stride - 1) / stride;
   34cda:	eb09 0203 	add.w	r2, r9, r3
   34cde:	3a01      	subs	r2, #1
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   34ce0:	f101 0e01 	add.w	lr, r1, #1
      return (image_size + stride - 1) / stride;
   34ce4:	fb92 f2f9 	sdiv	r2, r2, r9
      ((out_size - 1) * stride + effective_filter_size - in_size);
   34ce8:	3a01      	subs	r2, #1
  if (stride == 0) return 0;
   34cea:	f1ba 0f00 	cmp.w	sl, #0
   34cee:	f47f af7b 	bne.w	34be8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xa8>
      ((out_size - 1) * stride + effective_filter_size - in_size);
   34cf2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   34cf6:	e787      	b.n	34c08 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xc8>
  switch (padding) {
   34cf8:	2a02      	cmp	r2, #2
   34cfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   34cfe:	f43f af5c 	beq.w	34bba <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x7a>
   34d02:	e7f6      	b.n	34cf2 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1b2>

00034d04 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
// code (for example, by using Register_FULLY_CONNECTED_INT8 instead of
// Register_FULLY_CONNECTED).
TfLiteRegistration fully_connected_registration;

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   34d04:	6b83      	ldr	r3, [r0, #56]	; 0x38
   34d06:	b10b      	cbz	r3, 34d0c <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x8>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
   34d08:	2124      	movs	r1, #36	; 0x24
   34d0a:	4718      	bx	r3
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   34d0c:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   34d0e:	f7f7 f945 	bl	2bf9c <abort>
   34d12:	bf00      	nop

00034d14 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0>:
    }
  }
  return kTfLiteOk;
}

TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
   34d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34d18:	b0b5      	sub	sp, #212	; 0xd4
   34d1a:	4681      	mov	r9, r0
   34d1c:	f8dd 80fc 	ldr.w	r8, [sp, #252]	; 0xfc
   34d20:	460c      	mov	r4, r1
                               const OpData& data,
                               const TfLiteEvalTensor* input,
                               const TfLiteEvalTensor* filter,
                               const TfLiteEvalTensor* bias,
                               TfLiteEvalTensor* output) {
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
   34d22:	a822      	add	r0, sp, #136	; 0x88
   34d24:	4641      	mov	r1, r8
TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
   34d26:	461e      	mov	r6, r3
   34d28:	4617      	mov	r7, r2
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
   34d2a:	f000 f9b5 	bl	35098 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
   34d2e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   34d30:	2b02      	cmp	r3, #2
   34d32:	d174      	bne.n	34e1e <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x10a>
  const int batches = output_shape.Dims(0);
  const int output_depth = output_shape.Dims(1);
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
   34d34:	4631      	mov	r1, r6
   34d36:	a828      	add	r0, sp, #160	; 0xa0
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   34d38:	e9dd b523 	ldrd	fp, r5, [sp, #140]	; 0x8c
   34d3c:	f000 f9ac 	bl	35098 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  inline int32_t DimensionsCount() const { return size_; }
   34d40:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    TFLITE_DCHECK_GE(i, 0);
   34d42:	1e5a      	subs	r2, r3, #1
   34d44:	d46b      	bmi.n	34e1e <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x10a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   34d46:	2b05      	cmp	r3, #5
   34d48:	dd63      	ble.n	34e12 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0xfe>
   34d4a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   34d4c:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
   34d50:	4639      	mov	r1, r7
   34d52:	a82e      	add	r0, sp, #184	; 0xb8
   34d54:	f000 f9a0 	bl	35098 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

  cmsis_nn_fc_params fc_params;
  fc_params.input_offset = -data.reference_op_data.input_zero_point;
   34d58:	6963      	ldr	r3, [r4, #20]

  cmsis_nn_context ctx;
  ctx.buf = nullptr;
  ctx.size = 0;

  if (data.buffer_idx > -1) {
   34d5a:	6a21      	ldr	r1, [r4, #32]
  filter_dims.c = output_depth;
   34d5c:	9518      	str	r5, [sp, #96]	; 0x60
  fc_params.input_offset = -data.reference_op_data.input_zero_point;
   34d5e:	425b      	negs	r3, r3
   34d60:	931d      	str	r3, [sp, #116]	; 0x74
  fc_params.filter_offset = -data.reference_op_data.filter_zero_point;
   34d62:	69a3      	ldr	r3, [r4, #24]
  bias_dims.c = output_depth;
   34d64:	950f      	str	r5, [sp, #60]	; 0x3c
  fc_params.filter_offset = -data.reference_op_data.filter_zero_point;
   34d66:	425b      	negs	r3, r3
   34d68:	931e      	str	r3, [sp, #120]	; 0x78
  ctx.buf = nullptr;
   34d6a:	2300      	movs	r3, #0
  ctx.size = 0;
   34d6c:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
  fc_params.output_offset = data.reference_op_data.output_zero_point;
   34d70:	69e3      	ldr	r3, [r4, #28]
   34d72:	931f      	str	r3, [sp, #124]	; 0x7c
  fc_params.activation.min = data.reference_op_data.output_activation_min;
   34d74:	68a3      	ldr	r3, [r4, #8]
   34d76:	9320      	str	r3, [sp, #128]	; 0x80
  fc_params.activation.max = data.reference_op_data.output_activation_max;
   34d78:	68e3      	ldr	r3, [r4, #12]
   34d7a:	9321      	str	r3, [sp, #132]	; 0x84
  quant_params.multiplier = data.reference_op_data.output_multiplier;
   34d7c:	6823      	ldr	r3, [r4, #0]
   34d7e:	9308      	str	r3, [sp, #32]
  quant_params.shift = data.reference_op_data.output_shift;
   34d80:	6863      	ldr	r3, [r4, #4]
  output_dims.c = output_depth;
   34d82:	951c      	str	r5, [sp, #112]	; 0x70
  quant_params.shift = data.reference_op_data.output_shift;
   34d84:	9309      	str	r3, [sp, #36]	; 0x24
  input_dims.h = 1;
   34d86:	2501      	movs	r5, #1
  bias_dims.n = 1;
   34d88:	2201      	movs	r2, #1
   34d8a:	2301      	movs	r3, #1
  if (data.buffer_idx > -1) {
   34d8c:	2900      	cmp	r1, #0
  filter_dims.n = accum_depth;
   34d8e:	e9cd aa14 	strd	sl, sl, [sp, #80]	; 0x50
  input_dims.w = 1;
   34d92:	e9cd 5512 	strd	r5, r5, [sp, #72]	; 0x48
  filter_dims.w = 1;
   34d96:	e9cd 5516 	strd	r5, r5, [sp, #88]	; 0x58
  output_dims.w = 1;
   34d9a:	e9cd 551a 	strd	r5, r5, [sp, #104]	; 0x68
  bias_dims.n = 1;
   34d9e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  input_dims.n = batches;
   34da2:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
  output_dims.n = batches;
   34da6:	f8cd b064 	str.w	fp, [sp, #100]	; 0x64
  bias_dims.w = 1;
   34daa:	950e      	str	r5, [sp, #56]	; 0x38
  if (data.buffer_idx > -1) {
   34dac:	db04      	blt.n	34db8 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0xa4>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
   34dae:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
   34db2:	4648      	mov	r0, r9
   34db4:	4798      	blx	r3
   34db6:	900a      	str	r0, [sp, #40]	; 0x28
  TFLITE_DCHECK(tensor != nullptr);
   34db8:	2f00      	cmp	r7, #0
   34dba:	d030      	beq.n	34e1e <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x10a>
  return reinterpret_cast<const T*>(tensor->data.raw);
   34dbc:	683b      	ldr	r3, [r7, #0]
  TFLITE_DCHECK(tensor != nullptr);
   34dbe:	2e00      	cmp	r6, #0
   34dc0:	d02d      	beq.n	34e1e <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x10a>
   34dc2:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
  return reinterpret_cast<const T*>(tensor->data.raw);
   34dc4:	6831      	ldr	r1, [r6, #0]
  TFLITE_DCHECK(tensor != nullptr);
   34dc6:	b352      	cbz	r2, 34e1e <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x10a>
  return reinterpret_cast<const T*>(tensor->data.raw);
   34dc8:	6814      	ldr	r4, [r2, #0]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   34dca:	f1b8 0f00 	cmp.w	r8, #0
   34dce:	d001      	beq.n	34dd4 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0xc0>
   34dd0:	f8d8 8000 	ldr.w	r8, [r8]
  }

  TF_LITE_ENSURE_EQ(
   34dd4:	9300      	str	r3, [sp, #0]
   34dd6:	aa19      	add	r2, sp, #100	; 0x64
   34dd8:	e9cd 2805 	strd	r2, r8, [sp, #20]
   34ddc:	a80c      	add	r0, sp, #48	; 0x30
   34dde:	aa15      	add	r2, sp, #84	; 0x54
   34de0:	e9cd 2101 	strd	r2, r1, [sp, #4]
   34de4:	e9cd 0403 	strd	r0, r4, [sp, #12]
   34de8:	ab11      	add	r3, sp, #68	; 0x44
   34dea:	aa08      	add	r2, sp, #32
   34dec:	a91d      	add	r1, sp, #116	; 0x74
   34dee:	a80a      	add	r0, sp, #40	; 0x28
   34df0:	f007 fa7a 	bl	3c2e8 <arm_fully_connected_s8>
    if (size_ > kMaxSmallSize) {
   34df4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
          tflite::micro::GetTensorData<int8_t>(filter), &bias_dims,
          tflite::micro::GetTensorData<int32_t>(bias), &output_dims,
          tflite::micro::GetTensorData<int8_t>(output)),
      ARM_MATH_SUCCESS);

  return kTfLiteOk;
   34df6:	3800      	subs	r0, #0
   34df8:	bf18      	it	ne
   34dfa:	2001      	movne	r0, #1
   34dfc:	2b05      	cmp	r3, #5
   34dfe:	dc0e      	bgt.n	34e1e <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x10a>
   34e00:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   34e02:	2b05      	cmp	r3, #5
   34e04:	dc0b      	bgt.n	34e1e <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x10a>
   34e06:	9b22      	ldr	r3, [sp, #136]	; 0x88
   34e08:	2b05      	cmp	r3, #5
   34e0a:	dc08      	bgt.n	34e1e <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x10a>
}
   34e0c:	b035      	add	sp, #212	; 0xd4
   34e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   34e12:	ab34      	add	r3, sp, #208	; 0xd0
   34e14:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   34e18:	f852 ac2c 	ldr.w	sl, [r2, #-44]
   34e1c:	e798      	b.n	34d50 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x3c>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
   34e1e:	f7f7 f8bd 	bl	2bf9c <abort>
   34e22:	bf00      	nop

00034e24 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   34e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK(node->builtin_data != nullptr);
   34e28:	68cb      	ldr	r3, [r1, #12]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   34e2a:	b082      	sub	sp, #8
  TFLITE_DCHECK(node->builtin_data != nullptr);
   34e2c:	2b00      	cmp	r3, #0
   34e2e:	d03c      	beq.n	34eaa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x86>
  const auto* params =
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
   34e30:	4b1f      	ldr	r3, [pc, #124]	; (34eb0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8c>)
   34e32:	4604      	mov	r4, r0
   34e34:	681a      	ldr	r2, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
   34e36:	2800      	cmp	r0, #0
   34e38:	d037      	beq.n	34eaa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x86>
  return context->GetEvalTensor(context, node->inputs->data[index]);
   34e3a:	680b      	ldr	r3, [r1, #0]
   34e3c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   34e40:	460d      	mov	r5, r1
   34e42:	6d42      	ldr	r2, [r0, #84]	; 0x54
   34e44:	6859      	ldr	r1, [r3, #4]
   34e46:	4790      	blx	r2
   34e48:	4a1a      	ldr	r2, [pc, #104]	; (34eb4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x90>)
   34e4a:	682b      	ldr	r3, [r5, #0]
   34e4c:	6812      	ldr	r2, [r2, #0]
   34e4e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   34e52:	4606      	mov	r6, r0
   34e54:	6859      	ldr	r1, [r3, #4]
   34e56:	6d62      	ldr	r2, [r4, #84]	; 0x54
   34e58:	4620      	mov	r0, r4
   34e5a:	4790      	blx	r2
   34e5c:	4b16      	ldr	r3, [pc, #88]	; (34eb8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x94>)
   34e5e:	682a      	ldr	r2, [r5, #0]
   34e60:	681b      	ldr	r3, [r3, #0]
   34e62:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   34e66:	4607      	mov	r7, r0
   34e68:	6851      	ldr	r1, [r2, #4]
   34e6a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   34e6c:	4620      	mov	r0, r4
   34e6e:	4798      	blx	r3
  return context->GetEvalTensor(context, node->outputs->data[index]);
   34e70:	4b12      	ldr	r3, [pc, #72]	; (34ebc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x98>)
   34e72:	686a      	ldr	r2, [r5, #4]
   34e74:	681b      	ldr	r3, [r3, #0]
   34e76:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  return context->GetEvalTensor(context, node->inputs->data[index]);
   34e7a:	4680      	mov	r8, r0
  return context->GetEvalTensor(context, node->outputs->data[index]);
   34e7c:	6851      	ldr	r1, [r2, #4]
   34e7e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   34e80:	4620      	mov	r0, r4
   34e82:	4798      	blx	r3
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);

  TFLITE_DCHECK(node->user_data != nullptr);
   34e84:	68a9      	ldr	r1, [r5, #8]
   34e86:	b181      	cbz	r1, 34eaa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x86>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
   34e88:	7a33      	ldrb	r3, [r6, #8]
   34e8a:	2b09      	cmp	r3, #9
   34e8c:	d003      	beq.n	34e96 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
    case kTfLiteFloat32: {
      #if EI_TFLITE_DISABLE_FULLY_CONNECTED_IN_F32
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
   34e8e:	2001      	movs	r0, #1
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
    }
  }
  return kTfLiteOk;
}
   34e90:	b002      	add	sp, #8
   34e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return EvalQuantizedInt8(context, node, data, input, filter, bias,
   34e96:	e9cd 8000 	strd	r8, r0, [sp]
   34e9a:	463b      	mov	r3, r7
   34e9c:	4632      	mov	r2, r6
   34e9e:	4620      	mov	r0, r4
   34ea0:	f7ff ff38 	bl	34d14 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0>
}
   34ea4:	b002      	add	sp, #8
   34ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TFLITE_DCHECK(node->builtin_data != nullptr);
   34eaa:	f7f7 f877 	bl	2bf9c <abort>
   34eae:	bf00      	nop
   34eb0:	0004322c 	.word	0x0004322c
   34eb4:	00043234 	.word	0x00043234
   34eb8:	00043228 	.word	0x00043228
   34ebc:	00043230 	.word	0x00043230

00034ec0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   34ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
   34ec4:	f8d1 8008 	ldr.w	r8, [r1, #8]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   34ec8:	b094      	sub	sp, #80	; 0x50
  TFLITE_DCHECK(node->user_data != nullptr);
   34eca:	f1b8 0f00 	cmp.w	r8, #0
   34ece:	d07a      	beq.n	34fc6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x106>
  TFLITE_DCHECK(node->builtin_data != nullptr);
   34ed0:	68cd      	ldr	r5, [r1, #12]
   34ed2:	460c      	mov	r4, r1
   34ed4:	2d00      	cmp	r5, #0
   34ed6:	d076      	beq.n	34fc6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x106>
      GetInput(context, node, kFullyConnectedInputTensor);
   34ed8:	4b3c      	ldr	r3, [pc, #240]	; (34fcc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
   34eda:	681a      	ldr	r2, [r3, #0]
   34edc:	4606      	mov	r6, r0
   34ede:	f001 f817 	bl	35f10 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
   34ee2:	4607      	mov	r7, r0
   34ee4:	b1d0      	cbz	r0, 34f1c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x5c>
      GetInput(context, node, kFullyConnectedWeightsTensor);
   34ee6:	4b3a      	ldr	r3, [pc, #232]	; (34fd0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x110>)
   34ee8:	4621      	mov	r1, r4
   34eea:	681a      	ldr	r2, [r3, #0]
   34eec:	4630      	mov	r0, r6
   34eee:	f001 f80f 	bl	35f10 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
   34ef2:	4681      	mov	r9, r0
   34ef4:	b190      	cbz	r0, 34f1c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x5c>
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
   34ef6:	4b37      	ldr	r3, [pc, #220]	; (34fd4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x114>)
   34ef8:	4621      	mov	r1, r4
   34efa:	681a      	ldr	r2, [r3, #0]
   34efc:	4630      	mov	r0, r6
   34efe:	f001 f83f 	bl	35f80 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
   34f02:	4b35      	ldr	r3, [pc, #212]	; (34fd8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x118>)
   34f04:	4621      	mov	r1, r4
   34f06:	681a      	ldr	r2, [r3, #0]
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
   34f08:	4682      	mov	sl, r0
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
   34f0a:	4630      	mov	r0, r6
   34f0c:	f001 f81c 	bl	35f48 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
   34f10:	4604      	mov	r4, r0
   34f12:	b118      	cbz	r0, 34f1c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x5c>
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
   34f14:	7f3a      	ldrb	r2, [r7, #28]
   34f16:	7f03      	ldrb	r3, [r0, #28]
   34f18:	4293      	cmp	r3, r2
   34f1a:	d004      	beq.n	34f26 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x66>
  TF_LITE_ENSURE(context, input != nullptr);
   34f1c:	2501      	movs	r5, #1
}
   34f1e:	4628      	mov	r0, r5
   34f20:	b014      	add	sp, #80	; 0x50
   34f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
   34f26:	f899 201c 	ldrb.w	r2, [r9, #28]
   34f2a:	429a      	cmp	r2, r3
   34f2c:	d1f6      	bne.n	34f1c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x5c>
  data->buffer_idx = -1;
   34f2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
   34f32:	7829      	ldrb	r1, [r5, #0]
  data->buffer_idx = -1;
   34f34:	f8c8 3020 	str.w	r3, [r8, #32]
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
   34f38:	e9cd 0802 	strd	r0, r8, [sp, #8]
   34f3c:	f8cd a004 	str.w	sl, [sp, #4]
   34f40:	f8cd 9000 	str.w	r9, [sp]
   34f44:	463b      	mov	r3, r7
   34f46:	4630      	mov	r0, r6
   34f48:	f000 f86e 	bl	35028 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
   34f4c:	4605      	mov	r5, r0
   34f4e:	2800      	cmp	r0, #0
   34f50:	d1e5      	bne.n	34f1e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x5e>
  if (input->type == kTfLiteInt8) {
   34f52:	7f3b      	ldrb	r3, [r7, #28]
   34f54:	2b09      	cmp	r3, #9
   34f56:	d1e2      	bne.n	34f1e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x5e>
   34f58:	f8d9 1014 	ldr.w	r1, [r9, #20]
   34f5c:	f851 7b04 	ldr.w	r7, [r1], #4
    size_ = dimensions_count;
   34f60:	9708      	str	r7, [sp, #32]
    if (dimensions_count > kMaxSmallSize) {
   34f62:	2f05      	cmp	r7, #5
   34f64:	dc2f      	bgt.n	34fc6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x106>
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   34f66:	00ba      	lsls	r2, r7, #2
   34f68:	a809      	add	r0, sp, #36	; 0x24
   34f6a:	f7e3 f949 	bl	18200 <memcpy>
   34f6e:	6961      	ldr	r1, [r4, #20]
   34f70:	f851 4b04 	ldr.w	r4, [r1], #4
    size_ = dimensions_count;
   34f74:	940e      	str	r4, [sp, #56]	; 0x38
    if (dimensions_count > kMaxSmallSize) {
   34f76:	2c05      	cmp	r4, #5
   34f78:	dc25      	bgt.n	34fc6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x106>
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   34f7a:	00a2      	lsls	r2, r4, #2
   34f7c:	a80f      	add	r0, sp, #60	; 0x3c
   34f7e:	f7e3 f93f 	bl	18200 <memcpy>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
   34f82:	2c02      	cmp	r4, #2
   34f84:	d11f      	bne.n	34fc6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x106>
    TFLITE_DCHECK_GE(i, 0);
   34f86:	1e7b      	subs	r3, r7, #1
   34f88:	d41d      	bmi.n	34fc6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x106>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   34f8a:	aa14      	add	r2, sp, #80	; 0x50
   34f8c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    filter_dims.c = output_shape.Dims(1);
   34f90:	9910      	ldr	r1, [sp, #64]	; 0x40
    filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
   34f92:	f853 2c2c 	ldr.w	r2, [r3, #-44]
    filter_dims.c = output_shape.Dims(1);
   34f96:	9107      	str	r1, [sp, #28]
    filter_dims.h = 1;
   34f98:	2301      	movs	r3, #1
        arm_fully_connected_s8_get_buffer_size(&filter_dims);
   34f9a:	a804      	add	r0, sp, #16
    filter_dims.h = 1;
   34f9c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    filter_dims.w = 1;
   34fa0:	9306      	str	r3, [sp, #24]
        arm_fully_connected_s8_get_buffer_size(&filter_dims);
   34fa2:	f007 f9dd 	bl	3c360 <arm_fully_connected_s8_get_buffer_size>
    if (buf_size > 0) {
   34fa6:	1e01      	subs	r1, r0, #0
   34fa8:	dd08      	ble.n	34fbc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xfc>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
   34faa:	6c33      	ldr	r3, [r6, #64]	; 0x40
   34fac:	f108 0220 	add.w	r2, r8, #32
   34fb0:	4630      	mov	r0, r6
   34fb2:	4798      	blx	r3
   34fb4:	2800      	cmp	r0, #0
   34fb6:	bf18      	it	ne
   34fb8:	4605      	movne	r5, r0
   34fba:	e7b0      	b.n	34f1e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x5e>
      data->buffer_idx = -1;
   34fbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   34fc0:	f8c8 3020 	str.w	r3, [r8, #32]
    if (size_ > kMaxSmallSize) {
   34fc4:	e7ab      	b.n	34f1e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x5e>
  TFLITE_DCHECK(node->user_data != nullptr);
   34fc6:	f7f6 ffe9 	bl	2bf9c <abort>
   34fca:	bf00      	nop
   34fcc:	0004322c 	.word	0x0004322c
   34fd0:	00043234 	.word	0x00043234
   34fd4:	00043228 	.word	0x00043228
   34fd8:	00043230 	.word	0x00043230

00034fdc <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
  return EvalQuantizedInt8(context, node, data, input, filter, bias, output);
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
   34fdc:	b510      	push	{r4, lr}
  fully_connected_registration.init = Init;
   34fde:	4b0d      	ldr	r3, [pc, #52]	; (35014 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x38>)
   34fe0:	4c0d      	ldr	r4, [pc, #52]	; (35018 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x3c>)
  fully_connected_registration.free = nullptr;
  fully_connected_registration.prepare = Prepare;
   34fe2:	490e      	ldr	r1, [pc, #56]	; (3501c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x40>)
   34fe4:	6099      	str	r1, [r3, #8]
  fully_connected_registration.free = nullptr;
   34fe6:	2200      	movs	r2, #0
   34fe8:	e9c3 4200 	strd	r4, r2, [r3]
  fully_connected_registration.invoke = Eval;
   34fec:	490c      	ldr	r1, [pc, #48]	; (35020 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x44>)
   34fee:	60d9      	str	r1, [r3, #12]
  fully_connected_registration.profiling_string = nullptr;
  fully_connected_registration.builtin_code = 0;
  fully_connected_registration.custom_name = nullptr;
  fully_connected_registration.version = 0;
  return fully_connected_registration;
   34ff0:	469e      	mov	lr, r3
  fully_connected_registration.builtin_code = 0;
   34ff2:	e9c3 2204 	strd	r2, r2, [r3, #16]
  fully_connected_registration.version = 0;
   34ff6:	e9c3 2206 	strd	r2, r2, [r3, #24]
TfLiteRegistration Register_FULLY_CONNECTED() {
   34ffa:	4604      	mov	r4, r0
  return fully_connected_registration;
   34ffc:	4684      	mov	ip, r0
   34ffe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   35002:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   35006:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
   3500a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
   3500e:	4620      	mov	r0, r4
   35010:	bd10      	pop	{r4, pc}
   35012:	bf00      	nop
   35014:	1001a628 	.word	0x1001a628
   35018:	00034d05 	.word	0x00034d05
   3501c:	00034ec1 	.word	0x00034ec1
   35020:	00034e25 	.word	0x00034e25
   35024:	00000000 	.word	0x00000000

00035028 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
   35028:	b5f0      	push	{r4, r5, r6, r7, lr}
   3502a:	b085      	sub	sp, #20
  if (data_type != kTfLiteFloat32) {
   3502c:	2a01      	cmp	r2, #1
    OpDataFullyConnected* data) {
   3502e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  if (data_type != kTfLiteFloat32) {
   35030:	d102      	bne.n	35038 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x10>

    return CalculateActivationRangeQuantized(context, activation, output,
                                             &data->output_activation_min,
                                             &data->output_activation_max);
  }
  return kTfLiteOk;
   35032:	2000      	movs	r0, #0
}
   35034:	b005      	add	sp, #20
   35036:	bdf0      	pop	{r4, r5, r6, r7, pc}
    double real_multiplier = 0.0;
   35038:	461d      	mov	r5, r3
   3503a:	ed9f 7b15 	vldr	d7, [pc, #84]	; 35090 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x68>
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
   3503e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   35040:	9300      	str	r3, [sp, #0]
   35042:	ab02      	add	r3, sp, #8
   35044:	460f      	mov	r7, r1
   35046:	9301      	str	r3, [sp, #4]
   35048:	4629      	mov	r1, r5
   3504a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    double real_multiplier = 0.0;
   3504e:	ed8d 7b02 	vstr	d7, [sp, #8]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
   35052:	4606      	mov	r6, r0
   35054:	f001 f8f0 	bl	36238 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
   35058:	2800      	cmp	r0, #0
   3505a:	d1eb      	bne.n	35034 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xc>
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
   3505c:	ed9d 0b02 	vldr	d0, [sp, #8]
   35060:	1d21      	adds	r1, r4, #4
   35062:	4620      	mov	r0, r4
   35064:	f001 f9ba 	bl	363dc <_ZN6tflite18QuantizeMultiplierEdPlPi>
    data->filter_zero_point = filter->params.zero_point;
   35068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    data->input_zero_point = input->params.zero_point;
   3506a:	68ea      	ldr	r2, [r5, #12]
    data->filter_zero_point = filter->params.zero_point;
   3506c:	68db      	ldr	r3, [r3, #12]
   3506e:	e9c4 2305 	strd	r2, r3, [r4, #20]
    data->output_zero_point = output->params.zero_point;
   35072:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   35074:	68da      	ldr	r2, [r3, #12]
   35076:	61e2      	str	r2, [r4, #28]
    return CalculateActivationRangeQuantized(context, activation, output,
   35078:	f104 030c 	add.w	r3, r4, #12
   3507c:	9300      	str	r3, [sp, #0]
   3507e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   35080:	f104 0308 	add.w	r3, r4, #8
   35084:	4639      	mov	r1, r7
   35086:	4630      	mov	r0, r6
   35088:	f001 f93a 	bl	36300 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
}
   3508c:	b005      	add	sp, #20
   3508e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00035098 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
   35098:	b510      	push	{r4, lr}
   3509a:	4604      	mov	r4, r0
  if (tensor == nullptr || tensor->dims == nullptr) {
   3509c:	b161      	cbz	r1, 350b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
   3509e:	6849      	ldr	r1, [r1, #4]
   350a0:	b151      	cbz	r1, 350b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
    return RuntimeShape();
  }
  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
   350a2:	f851 2b04 	ldr.w	r2, [r1], #4
    size_ = dimensions_count;
   350a6:	6002      	str	r2, [r0, #0]
    if (dimensions_count > kMaxSmallSize) {
   350a8:	2a05      	cmp	r2, #5
   350aa:	dc09      	bgt.n	350c0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x28>
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   350ac:	0092      	lsls	r2, r2, #2
   350ae:	3004      	adds	r0, #4
   350b0:	f7e3 f8a6 	bl	18200 <memcpy>
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
   350b4:	4620      	mov	r0, r4
   350b6:	bd10      	pop	{r4, pc}
  RuntimeShape() : size_(0) {}
   350b8:	2300      	movs	r3, #0
   350ba:	6023      	str	r3, [r4, #0]
   350bc:	4620      	mov	r0, r4
   350be:	bd10      	pop	{r4, pc}
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
   350c0:	f7f6 ff6c 	bl	2bf9c <abort>

000350c4 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>:

PaddingType RuntimePaddingType(TfLitePadding padding) {
  switch (padding) {
   350c4:	2801      	cmp	r0, #1
   350c6:	d002      	beq.n	350ce <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0xa>
      return PaddingType::kSame;
    case TfLitePadding::kTfLitePaddingValid:
      return PaddingType::kValid;
    case TfLitePadding::kTfLitePaddingUnknown:
    default:
      return PaddingType::kNone;
   350c8:	2802      	cmp	r0, #2
   350ca:	bf18      	it	ne
   350cc:	2000      	movne	r0, #0
  }
}
   350ce:	4770      	bx	lr

000350d0 <_ZN6tflite3ops5micro7pooling4InitEP13TfLiteContextPKcj>:
}

}  // namespace

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   350d0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   350d2:	b10b      	cbz	r3, 350d8 <_ZN6tflite3ops5micro7pooling4InitEP13TfLiteContextPKcj+0x8>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
   350d4:	2124      	movs	r1, #36	; 0x24
   350d6:	4718      	bx	r3
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   350d8:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   350da:	f7f6 ff5f 	bl	2bf9c <abort>
   350de:	bf00      	nop

000350e0 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode>:
}

TfLiteStatus MaxPrepare(TfLiteContext* context, TfLiteNode* node) {
   350e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
   350e4:	688d      	ldr	r5, [r1, #8]
TfLiteStatus MaxPrepare(TfLiteContext* context, TfLiteNode* node) {
   350e6:	b083      	sub	sp, #12
  TFLITE_DCHECK(node->user_data != nullptr);
   350e8:	2d00      	cmp	r5, #0
   350ea:	d07c      	beq.n	351e6 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x106>
  TFLITE_DCHECK(node->builtin_data != nullptr);
   350ec:	68cf      	ldr	r7, [r1, #12]
   350ee:	460c      	mov	r4, r1
   350f0:	2f00      	cmp	r7, #0
   350f2:	d078      	beq.n	351e6 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x106>

  OpData* data = static_cast<OpData*>(node->user_data);
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   350f4:	2200      	movs	r2, #0
   350f6:	4606      	mov	r6, r0
   350f8:	f000 ff0a 	bl	35f10 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
   350fc:	4680      	mov	r8, r0
   350fe:	2800      	cmp	r0, #0
   35100:	d04c      	beq.n	3519c <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xbc>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
   35102:	4621      	mov	r1, r4
   35104:	2200      	movs	r2, #0
   35106:	4630      	mov	r0, r6
   35108:	f000 ff1e 	bl	35f48 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
   3510c:	2800      	cmp	r0, #0
   3510e:	d045      	beq.n	3519c <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xbc>
  return t->dims->data[dim];
   35110:	f8d8 3014 	ldr.w	r3, [r8, #20]
      params->stride_height, params->stride_width,
   35114:	f8d7 a004 	ldr.w	sl, [r7, #4]
   35118:	f8d7 b008 	ldr.w	fp, [r7, #8]
   3511c:	e9d3 9e02 	ldrd	r9, lr, [r3, #8]
      params->filter_width, params->padding, &out_height, &out_width);
   35120:	e9d7 4103 	ldrd	r4, r1, [r7, #12]
   35124:	783b      	ldrb	r3, [r7, #0]
  if (stride == 0) return 0;
   35126:	f1ba 0f00 	cmp.w	sl, #0
   3512a:	d05e      	beq.n	351ea <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x10a>
  switch (padding) {
   3512c:	2b01      	cmp	r3, #1
   3512e:	d068      	beq.n	35202 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x122>
   35130:	2b02      	cmp	r3, #2
   35132:	d037      	beq.n	351a4 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xc4>
   35134:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   35138:	4613      	mov	r3, r2
      ((out_size - 1) * stride + effective_filter_size - in_size);
   3513a:	fb03 130b 	mla	r3, r3, fp, r1
   3513e:	fb02 410a 	mla	r1, r2, sl, r4
  int total_padding =
   35142:	eba1 010e 	sub.w	r1, r1, lr
  if (input->type == kTfLiteFloat32) {
   35146:	f898 201c 	ldrb.w	r2, [r8, #28]
  total_padding = total_padding > 0 ? total_padding : 0;
   3514a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
  int total_padding =
   3514e:	eba3 0309 	sub.w	r3, r3, r9
  total_padding = total_padding > 0 ? total_padding : 0;
   35152:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  return total_padding / 2;
   35156:	104c      	asrs	r4, r1, #1
  *offset = total_padding % 2;
   35158:	f001 0101 	and.w	r1, r1, #1
      params->filter_width, params->padding, &out_height, &out_width);
   3515c:	60a9      	str	r1, [r5, #8]
  if (input->type == kTfLiteFloat32) {
   3515e:	2a01      	cmp	r2, #1
  return total_padding / 2;
   35160:	ea4f 0163 	mov.w	r1, r3, asr #1
  *offset = total_padding % 2;
   35164:	f003 0301 	and.w	r3, r3, #1
      params->filter_width, params->padding, &out_height, &out_width);
   35168:	602c      	str	r4, [r5, #0]
   3516a:	6069      	str	r1, [r5, #4]
   3516c:	60eb      	str	r3, [r5, #12]
  if (input->type == kTfLiteFloat32) {
   3516e:	d12a      	bne.n	351c6 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xe6>
    CalculateActivationRange(params->activation, &data->activation_min_f32,
   35170:	7d3b      	ldrb	r3, [r7, #20]
// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
   35172:	2b01      	cmp	r3, #1
   35174:	d055      	beq.n	35222 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x142>
    *activation_min = 0;
    *activation_max = std::numeric_limits<T>::max();
  } else if (activation == kTfLiteActRelu6) {
   35176:	2b03      	cmp	r3, #3
   35178:	d058      	beq.n	3522c <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x14c>
    *activation_min = 0;
    *activation_max = 6;
  } else if (activation == kTfLiteActReluN1To1) {
   3517a:	2b02      	cmp	r3, #2
    *activation_min = -1;
   3517c:	bf0b      	itete	eq
   3517e:	4a2e      	ldreq	r2, [pc, #184]	; (35238 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x158>)
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
   35180:	4b2e      	ldrne	r3, [pc, #184]	; (3523c <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x15c>)
    *activation_max = 1;
   35182:	f04f 537e 	moveq.w	r3, #1065353216	; 0x3f800000
    *activation_min = std::numeric_limits<T>::lowest();
   35186:	f46f 0200 	mvnne.w	r2, #8388608	; 0x800000
   3518a:	61ea      	str	r2, [r5, #28]
    *activation_max = std::numeric_limits<T>::max();
   3518c:	622b      	str	r3, [r5, #32]
  data->buffer_idx = -1;
   3518e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  return kTfLiteOk;
   35192:	2000      	movs	r0, #0
  data->buffer_idx = -1;
   35194:	612b      	str	r3, [r5, #16]

  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, data));

  return kTfLiteOk;
}
   35196:	b003      	add	sp, #12
   35198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE(context, input != nullptr);
   3519c:	2001      	movs	r0, #1
}
   3519e:	b003      	add	sp, #12
   351a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return (image_size + stride - effective_filter_size) / stride;
   351a4:	eb0e 020a 	add.w	r2, lr, sl
   351a8:	1b12      	subs	r2, r2, r4
   351aa:	fb92 f2fa 	sdiv	r2, r2, sl
      ((out_size - 1) * stride + effective_filter_size - in_size);
   351ae:	3a01      	subs	r2, #1
  if (stride == 0) return 0;
   351b0:	f1bb 0f00 	cmp.w	fp, #0
   351b4:	d022      	beq.n	351fc <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x11c>
      return (image_size + stride - effective_filter_size) / stride;
   351b6:	eb09 030b 	add.w	r3, r9, fp
   351ba:	1a5b      	subs	r3, r3, r1
   351bc:	fb93 fcfb 	sdiv	ip, r3, fp
      ((out_size - 1) * stride + effective_filter_size - in_size);
   351c0:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
      return (image_size + stride - effective_filter_size) / stride;
   351c4:	e7b9      	b.n	3513a <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x5a>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
   351c6:	f105 0318 	add.w	r3, r5, #24
   351ca:	7d39      	ldrb	r1, [r7, #20]
   351cc:	9300      	str	r3, [sp, #0]
   351ce:	4602      	mov	r2, r0
   351d0:	f105 0314 	add.w	r3, r5, #20
   351d4:	4630      	mov	r0, r6
   351d6:	f001 f893 	bl	36300 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
   351da:	2800      	cmp	r0, #0
   351dc:	d1df      	bne.n	3519e <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xbe>
    TFLITE_DCHECK_LE(data->activation_min, data->activation_max);
   351de:	e9d5 2305 	ldrd	r2, r3, [r5, #20]
   351e2:	429a      	cmp	r2, r3
   351e4:	ddd3      	ble.n	3518e <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xae>
  TFLITE_DCHECK(node->user_data != nullptr);
   351e6:	f7f6 fed9 	bl	2bf9c <abort>
  if (stride == 0) return 0;
   351ea:	f1bb 0f00 	cmp.w	fp, #0
   351ee:	d0a1      	beq.n	35134 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x54>
  switch (padding) {
   351f0:	2b01      	cmp	r3, #1
   351f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   351f6:	d00d      	beq.n	35214 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x134>
   351f8:	2b02      	cmp	r3, #2
   351fa:	d0dc      	beq.n	351b6 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xd6>
      ((out_size - 1) * stride + effective_filter_size - in_size);
   351fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   35200:	e79b      	b.n	3513a <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x5a>
      return (image_size + stride - 1) / stride;
   35202:	eb0e 020a 	add.w	r2, lr, sl
   35206:	3a01      	subs	r2, #1
   35208:	fb92 f2fa 	sdiv	r2, r2, sl
      ((out_size - 1) * stride + effective_filter_size - in_size);
   3520c:	3a01      	subs	r2, #1
  if (stride == 0) return 0;
   3520e:	f1bb 0f00 	cmp.w	fp, #0
   35212:	d0f3      	beq.n	351fc <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x11c>
      return (image_size + stride - 1) / stride;
   35214:	eb09 030b 	add.w	r3, r9, fp
   35218:	3b01      	subs	r3, #1
   3521a:	fb93 f3fb 	sdiv	r3, r3, fp
      ((out_size - 1) * stride + effective_filter_size - in_size);
   3521e:	3b01      	subs	r3, #1
      return (image_size + stride - 1) / stride;
   35220:	e78b      	b.n	3513a <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x5a>
    *activation_max = std::numeric_limits<T>::max();
   35222:	4b06      	ldr	r3, [pc, #24]	; (3523c <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x15c>)
   35224:	622b      	str	r3, [r5, #32]
    *activation_min = 0;
   35226:	2200      	movs	r2, #0
   35228:	61ea      	str	r2, [r5, #28]
   3522a:	e7b0      	b.n	3518e <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xae>
    *activation_max = 6;
   3522c:	4b04      	ldr	r3, [pc, #16]	; (35240 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x160>)
   3522e:	622b      	str	r3, [r5, #32]
    *activation_min = 0;
   35230:	2200      	movs	r2, #0
   35232:	61ea      	str	r2, [r5, #28]
   35234:	e7ab      	b.n	3518e <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xae>
   35236:	bf00      	nop
   35238:	bf800000 	.word	0xbf800000
   3523c:	7f7fffff 	.word	0x7f7fffff
   35240:	40c00000 	.word	0x40c00000

00035244 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode>:
    }
  }
  return kTfLiteOk;
}

TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
   35244:	b538      	push	{r3, r4, r5, lr}
  TFLITE_DCHECK(node->builtin_data != nullptr);
   35246:	68cb      	ldr	r3, [r1, #12]
   35248:	b17b      	cbz	r3, 3526a <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x26>
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);

  TFLITE_DCHECK(node->user_data != nullptr);
   3524a:	688b      	ldr	r3, [r1, #8]
   3524c:	460d      	mov	r5, r1
   3524e:	b163      	cbz	r3, 3526a <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x26>
  TFLITE_DCHECK(context != nullptr);
   35250:	4604      	mov	r4, r0
   35252:	b150      	cbz	r0, 3526a <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x26>
  return context->GetEvalTensor(context, node->inputs->data[index]);
   35254:	680a      	ldr	r2, [r1, #0]
   35256:	6d43      	ldr	r3, [r0, #84]	; 0x54
   35258:	6851      	ldr	r1, [r2, #4]
   3525a:	4798      	blx	r3
  return context->GetEvalTensor(context, node->outputs->data[index]);
   3525c:	686a      	ldr	r2, [r5, #4]
   3525e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   35260:	6851      	ldr	r1, [r2, #4]
   35262:	4620      	mov	r0, r4
   35264:	4798      	blx	r3
      TF_LITE_KERNEL_LOG(context, "Input type %s is not currently supported",
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
  }
  return kTfLiteOk;
}
   35266:	2001      	movs	r0, #1
   35268:	bd38      	pop	{r3, r4, r5, pc}
  TFLITE_DCHECK(node->builtin_data != nullptr);
   3526a:	f7f6 fe97 	bl	2bf9c <abort>
   3526e:	bf00      	nop

00035270 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
   35270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK(node->builtin_data != nullptr);
   35274:	f8d1 800c 	ldr.w	r8, [r1, #12]
TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
   35278:	b0a4      	sub	sp, #144	; 0x90
  TFLITE_DCHECK(node->builtin_data != nullptr);
   3527a:	f1b8 0f00 	cmp.w	r8, #0
   3527e:	d07c      	beq.n	3537a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x10a>
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);

  TFLITE_DCHECK(node->user_data != nullptr);
   35280:	688f      	ldr	r7, [r1, #8]
   35282:	460d      	mov	r5, r1
   35284:	2f00      	cmp	r7, #0
   35286:	d078      	beq.n	3537a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x10a>
  TFLITE_DCHECK(context != nullptr);
   35288:	4604      	mov	r4, r0
   3528a:	2800      	cmp	r0, #0
   3528c:	d075      	beq.n	3537a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x10a>
  return context->GetEvalTensor(context, node->inputs->data[index]);
   3528e:	680b      	ldr	r3, [r1, #0]
   35290:	6859      	ldr	r1, [r3, #4]
   35292:	6d43      	ldr	r3, [r0, #84]	; 0x54
   35294:	4798      	blx	r3
  return context->GetEvalTensor(context, node->outputs->data[index]);
   35296:	686b      	ldr	r3, [r5, #4]
  return context->GetEvalTensor(context, node->inputs->data[index]);
   35298:	4605      	mov	r5, r0
  return context->GetEvalTensor(context, node->outputs->data[index]);
   3529a:	6859      	ldr	r1, [r3, #4]
   3529c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   3529e:	4620      	mov	r0, r4
   352a0:	4798      	blx	r3
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);

  switch (input->type) {
   352a2:	7a2b      	ldrb	r3, [r5, #8]
   352a4:	2b09      	cmp	r3, #9
   352a6:	4606      	mov	r6, r0
   352a8:	d003      	beq.n	352b2 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x42>
    case kTfLiteFloat32:
      #if EI_TFLITE_DISABLE_MAX_POOL_2D_IN_F32
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
   352aa:	2001      	movs	r0, #1
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
  }
  return kTfLiteOk;
}
   352ac:	b024      	add	sp, #144	; 0x90
   352ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
   352b2:	a812      	add	r0, sp, #72	; 0x48
   352b4:	4629      	mov	r1, r5
   352b6:	f7ff feef 	bl	35098 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
   352ba:	a818      	add	r0, sp, #96	; 0x60
   352bc:	4631      	mov	r1, r6
   352be:	f7ff feeb 	bl	35098 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    TFLITE_DCHECK_LT(i, size_);
   352c2:	9812      	ldr	r0, [sp, #72]	; 0x48
   352c4:	2803      	cmp	r0, #3
   352c6:	dd58      	ble.n	3537a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x10a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   352c8:	2805      	cmp	r0, #5
   352ca:	bfc8      	it	gt
   352cc:	9b13      	ldrgt	r3, [sp, #76]	; 0x4c
    TFLITE_DCHECK_LT(i, size_);
   352ce:	9a18      	ldr	r2, [sp, #96]	; 0x60
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   352d0:	bfcc      	ite	gt
   352d2:	68db      	ldrgt	r3, [r3, #12]
   352d4:	9b16      	ldrle	r3, [sp, #88]	; 0x58
    TFLITE_DCHECK_LT(i, size_);
   352d6:	2a03      	cmp	r2, #3
   352d8:	dd4f      	ble.n	3537a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x10a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   352da:	2a05      	cmp	r2, #5
   352dc:	bfca      	itet	gt
   352de:	9919      	ldrgt	r1, [sp, #100]	; 0x64
   352e0:	991c      	ldrle	r1, [sp, #112]	; 0x70
   352e2:	68c9      	ldrgt	r1, [r1, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   352e4:	4299      	cmp	r1, r3
   352e6:	d148      	bne.n	3537a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x10a>
  input_dims.n = 1;
   352e8:	2101      	movs	r1, #1
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   352ea:	2805      	cmp	r0, #5
   352ec:	9106      	str	r1, [sp, #24]
   352ee:	dc46      	bgt.n	3537e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x10e>
  input_dims.h = input_shape.Dims(1);
   352f0:	9914      	ldr	r1, [sp, #80]	; 0x50
   352f2:	9107      	str	r1, [sp, #28]
   352f4:	9915      	ldr	r1, [sp, #84]	; 0x54
   352f6:	2a05      	cmp	r2, #5
  input_dims.c = depth;
   352f8:	e9cd 1308 	strd	r1, r3, [sp, #32]
  output_dims.n = 1;
   352fc:	f04f 0101 	mov.w	r1, #1
   35300:	910a      	str	r1, [sp, #40]	; 0x28
   35302:	dd47      	ble.n	35394 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x124>
   35304:	9a19      	ldr	r2, [sp, #100]	; 0x64
   35306:	6851      	ldr	r1, [r2, #4]
   35308:	6892      	ldr	r2, [r2, #8]
  output_dims.h = output_shape.Dims(1);
   3530a:	910b      	str	r1, [sp, #44]	; 0x2c
  output_dims.c = depth;
   3530c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  pool_params.stride.w = params->stride_width;
   35310:	f8d8 3004 	ldr.w	r3, [r8, #4]
   35314:	931e      	str	r3, [sp, #120]	; 0x78
  pool_params.padding.h = data.padding.height;
   35316:	e9d7 3000 	ldrd	r3, r0, [r7]
  pool_params.stride.h = params->stride_height;
   3531a:	f8d8 2008 	ldr.w	r2, [r8, #8]
  if (data.buffer_idx > -1) {
   3531e:	6939      	ldr	r1, [r7, #16]
  pool_params.stride.h = params->stride_height;
   35320:	921f      	str	r2, [sp, #124]	; 0x7c
  pool_params.padding.w = data.padding.width;
   35322:	e9cd 3020 	strd	r3, r0, [sp, #128]	; 0x80
  pool_params.activation.min = data.activation_min;
   35326:	697b      	ldr	r3, [r7, #20]
   35328:	9322      	str	r3, [sp, #136]	; 0x88
  pool_params.activation.max = data.activation_max;
   3532a:	69bb      	ldr	r3, [r7, #24]
   3532c:	9323      	str	r3, [sp, #140]	; 0x8c
  filter_dims.w = params->filter_width;
   3532e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   35332:	9310      	str	r3, [sp, #64]	; 0x40
  filter_dims.h = params->filter_height;
   35334:	f8d8 3010 	ldr.w	r3, [r8, #16]
   35338:	930f      	str	r3, [sp, #60]	; 0x3c
  filter_dims.n = 1;
   3533a:	2301      	movs	r3, #1
   3533c:	930e      	str	r3, [sp, #56]	; 0x38
  filter_dims.c = 1;
   3533e:	9311      	str	r3, [sp, #68]	; 0x44
  ctx.buf = nullptr;
   35340:	2300      	movs	r3, #0
  if (data.buffer_idx > -1) {
   35342:	4299      	cmp	r1, r3
  ctx.size = 0;
   35344:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (data.buffer_idx > -1) {
   35348:	db03      	blt.n	35352 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xe2>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
   3534a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   3534c:	4620      	mov	r0, r4
   3534e:	4798      	blx	r3
   35350:	9004      	str	r0, [sp, #16]
  return reinterpret_cast<const T*>(tensor->data.raw);
   35352:	682b      	ldr	r3, [r5, #0]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   35354:	b106      	cbz	r6, 35358 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
   35356:	6836      	ldr	r6, [r6, #0]
  TFLITE_DCHECK_EQ(
   35358:	a90a      	add	r1, sp, #40	; 0x28
   3535a:	aa0e      	add	r2, sp, #56	; 0x38
   3535c:	e9cd 1601 	strd	r1, r6, [sp, #4]
   35360:	9200      	str	r2, [sp, #0]
   35362:	a91e      	add	r1, sp, #120	; 0x78
   35364:	aa06      	add	r2, sp, #24
   35366:	a804      	add	r0, sp, #16
   35368:	f007 fc30 	bl	3cbcc <arm_max_pool_s8>
   3536c:	b928      	cbnz	r0, 3537a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x10a>
    if (size_ > kMaxSmallSize) {
   3536e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   35370:	2b05      	cmp	r3, #5
   35372:	dc02      	bgt.n	3537a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x10a>
   35374:	9b12      	ldr	r3, [sp, #72]	; 0x48
   35376:	2b05      	cmp	r3, #5
   35378:	dd98      	ble.n	352ac <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x3c>
  TFLITE_DCHECK(node->builtin_data != nullptr);
   3537a:	f7f6 fe0f 	bl	2bf9c <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   3537e:	9813      	ldr	r0, [sp, #76]	; 0x4c
   35380:	6841      	ldr	r1, [r0, #4]
  input_dims.h = input_shape.Dims(1);
   35382:	9107      	str	r1, [sp, #28]
   35384:	6881      	ldr	r1, [r0, #8]
   35386:	2a05      	cmp	r2, #5
  input_dims.c = depth;
   35388:	e9cd 1308 	strd	r1, r3, [sp, #32]
  output_dims.n = 1;
   3538c:	f04f 0101 	mov.w	r1, #1
   35390:	910a      	str	r1, [sp, #40]	; 0x28
   35392:	dcb7      	bgt.n	35304 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x94>
  output_dims.h = output_shape.Dims(1);
   35394:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   35396:	920b      	str	r2, [sp, #44]	; 0x2c
   35398:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   3539a:	e7b7      	b.n	3530c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x9c>

0003539c <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus AveragePrepare(TfLiteContext* context, TfLiteNode* node) {
   3539c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
   353a0:	688c      	ldr	r4, [r1, #8]
TfLiteStatus AveragePrepare(TfLiteContext* context, TfLiteNode* node) {
   353a2:	b08f      	sub	sp, #60	; 0x3c
  TFLITE_DCHECK(node->user_data != nullptr);
   353a4:	2c00      	cmp	r4, #0
   353a6:	f000 80da 	beq.w	3555e <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x1c2>
  TFLITE_DCHECK(node->builtin_data != nullptr);
   353aa:	f8d1 800c 	ldr.w	r8, [r1, #12]
   353ae:	460f      	mov	r7, r1
   353b0:	f1b8 0f00 	cmp.w	r8, #0
   353b4:	f000 80d3 	beq.w	3555e <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x1c2>
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   353b8:	2200      	movs	r2, #0
   353ba:	4606      	mov	r6, r0
   353bc:	f000 fda8 	bl	35f10 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
   353c0:	4639      	mov	r1, r7
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   353c2:	4605      	mov	r5, r0
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
   353c4:	2200      	movs	r2, #0
   353c6:	4630      	mov	r0, r6
   353c8:	f000 fdbe 	bl	35f48 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  return t->dims->data[dim];
   353cc:	696b      	ldr	r3, [r5, #20]
      params->stride_height, params->stride_width,
   353ce:	f8d8 a004 	ldr.w	sl, [r8, #4]
   353d2:	f8d8 b008 	ldr.w	fp, [r8, #8]
   353d6:	e9d3 9e02 	ldrd	r9, lr, [r3, #8]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
   353da:	4607      	mov	r7, r0
      params->filter_width, params->padding, &out_height, &out_width);
   353dc:	f898 3000 	ldrb.w	r3, [r8]
   353e0:	e9d8 0103 	ldrd	r0, r1, [r8, #12]
  if (stride == 0) return 0;
   353e4:	f1ba 0f00 	cmp.w	sl, #0
   353e8:	d05c      	beq.n	354a4 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x108>
  switch (padding) {
   353ea:	2b01      	cmp	r3, #1
   353ec:	d04a      	beq.n	35484 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xe8>
   353ee:	2b02      	cmp	r3, #2
   353f0:	d037      	beq.n	35462 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xc6>
   353f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   353f6:	4613      	mov	r3, r2
      ((out_size - 1) * stride + effective_filter_size - in_size);
   353f8:	fb02 020a 	mla	r2, r2, sl, r0
   353fc:	fb03 130b 	mla	r3, r3, fp, r1
  int total_padding =
   35400:	eba2 020e 	sub.w	r2, r2, lr
  if (input->type == kTfLiteFloat32) {
   35404:	7f29      	ldrb	r1, [r5, #28]
  total_padding = total_padding > 0 ? total_padding : 0;
   35406:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  int total_padding =
   3540a:	eba3 0309 	sub.w	r3, r3, r9
  total_padding = total_padding > 0 ? total_padding : 0;
   3540e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  return total_padding / 2;
   35412:	1050      	asrs	r0, r2, #1
  *offset = total_padding % 2;
   35414:	f002 0201 	and.w	r2, r2, #1
      params->filter_width, params->padding, &out_height, &out_width);
   35418:	60a2      	str	r2, [r4, #8]
  if (input->type == kTfLiteFloat32) {
   3541a:	2901      	cmp	r1, #1
  return total_padding / 2;
   3541c:	ea4f 0263 	mov.w	r2, r3, asr #1
  *offset = total_padding % 2;
   35420:	f003 0301 	and.w	r3, r3, #1
      params->filter_width, params->padding, &out_height, &out_width);
   35424:	6020      	str	r0, [r4, #0]
   35426:	6062      	str	r2, [r4, #4]
   35428:	60e3      	str	r3, [r4, #12]
  if (input->type == kTfLiteFloat32) {
   3542a:	d147      	bne.n	354bc <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x120>
    CalculateActivationRange(params->activation, &data->activation_min_f32,
   3542c:	f898 3014 	ldrb.w	r3, [r8, #20]
  if (activation == kTfLiteActRelu) {
   35430:	2b01      	cmp	r3, #1
   35432:	f000 8086 	beq.w	35542 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x1a6>
  } else if (activation == kTfLiteActRelu6) {
   35436:	2b03      	cmp	r3, #3
   35438:	f000 8088 	beq.w	3554c <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x1b0>
  } else if (activation == kTfLiteActReluN1To1) {
   3543c:	2b02      	cmp	r3, #2
    *activation_min = -1;
   3543e:	bf0b      	itete	eq
   35440:	4a48      	ldreq	r2, [pc, #288]	; (35564 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x1c8>)
    *activation_max = std::numeric_limits<T>::max();
   35442:	4b49      	ldrne	r3, [pc, #292]	; (35568 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x1cc>)
    *activation_max = 1;
   35444:	f04f 537e 	moveq.w	r3, #1065353216	; 0x3f800000
    *activation_min = std::numeric_limits<T>::lowest();
   35448:	f46f 0200 	mvnne.w	r2, #8388608	; 0x800000
   3544c:	61e2      	str	r2, [r4, #28]
    *activation_max = std::numeric_limits<T>::max();
   3544e:	6223      	str	r3, [r4, #32]
  data->buffer_idx = -1;
   35450:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   35454:	6123      	str	r3, [r4, #16]
  return kTfLiteOk;
   35456:	f04f 0800 	mov.w	r8, #0
}
   3545a:	4640      	mov	r0, r8
   3545c:	b00f      	add	sp, #60	; 0x3c
   3545e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return (image_size + stride - effective_filter_size) / stride;
   35462:	eb0e 020a 	add.w	r2, lr, sl
   35466:	1a12      	subs	r2, r2, r0
   35468:	fb92 f2fa 	sdiv	r2, r2, sl
      ((out_size - 1) * stride + effective_filter_size - in_size);
   3546c:	3a01      	subs	r2, #1
  if (stride == 0) return 0;
   3546e:	f1bb 0f00 	cmp.w	fp, #0
   35472:	d020      	beq.n	354b6 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x11a>
      return (image_size + stride - effective_filter_size) / stride;
   35474:	eb09 030b 	add.w	r3, r9, fp
   35478:	1a5b      	subs	r3, r3, r1
   3547a:	fb93 fcfb 	sdiv	ip, r3, fp
      ((out_size - 1) * stride + effective_filter_size - in_size);
   3547e:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
      return (image_size + stride - effective_filter_size) / stride;
   35482:	e7b9      	b.n	353f8 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x5c>
      return (image_size + stride - 1) / stride;
   35484:	eb0e 020a 	add.w	r2, lr, sl
   35488:	3a01      	subs	r2, #1
   3548a:	fb92 f2fa 	sdiv	r2, r2, sl
      ((out_size - 1) * stride + effective_filter_size - in_size);
   3548e:	3a01      	subs	r2, #1
  if (stride == 0) return 0;
   35490:	f1bb 0f00 	cmp.w	fp, #0
   35494:	d00f      	beq.n	354b6 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x11a>
      return (image_size + stride - 1) / stride;
   35496:	eb09 030b 	add.w	r3, r9, fp
   3549a:	3b01      	subs	r3, #1
   3549c:	fb93 f3fb 	sdiv	r3, r3, fp
      ((out_size - 1) * stride + effective_filter_size - in_size);
   354a0:	3b01      	subs	r3, #1
      return (image_size + stride - 1) / stride;
   354a2:	e7a9      	b.n	353f8 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x5c>
  if (stride == 0) return 0;
   354a4:	f1bb 0f00 	cmp.w	fp, #0
   354a8:	d0a3      	beq.n	353f2 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x56>
  switch (padding) {
   354aa:	2b01      	cmp	r3, #1
   354ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   354b0:	d0f1      	beq.n	35496 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xfa>
   354b2:	2b02      	cmp	r3, #2
   354b4:	d0de      	beq.n	35474 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xd8>
      ((out_size - 1) * stride + effective_filter_size - in_size);
   354b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   354ba:	e79d      	b.n	353f8 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x5c>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
   354bc:	f104 0318 	add.w	r3, r4, #24
   354c0:	f898 1014 	ldrb.w	r1, [r8, #20]
   354c4:	9300      	str	r3, [sp, #0]
   354c6:	463a      	mov	r2, r7
   354c8:	f104 0314 	add.w	r3, r4, #20
   354cc:	4630      	mov	r0, r6
   354ce:	f000 ff17 	bl	36300 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
   354d2:	4680      	mov	r8, r0
   354d4:	2800      	cmp	r0, #0
   354d6:	d1c0      	bne.n	3545a <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xbe>
    TFLITE_DCHECK_LE(data->activation_min, data->activation_max);
   354d8:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
   354dc:	429a      	cmp	r2, r3
   354de:	dc3e      	bgt.n	3555e <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x1c2>
  if (input->type == kTfLiteInt8) {
   354e0:	7f2b      	ldrb	r3, [r5, #28]
  data->buffer_idx = -1;
   354e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  if (input->type == kTfLiteInt8) {
   354e6:	2b09      	cmp	r3, #9
  data->buffer_idx = -1;
   354e8:	6122      	str	r2, [r4, #16]
  if (input->type == kTfLiteInt8) {
   354ea:	d1b6      	bne.n	3545a <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xbe>
   354ec:	6969      	ldr	r1, [r5, #20]
   354ee:	f851 5b04 	ldr.w	r5, [r1], #4
    size_ = dimensions_count;
   354f2:	9502      	str	r5, [sp, #8]
    if (dimensions_count > kMaxSmallSize) {
   354f4:	2d05      	cmp	r5, #5
   354f6:	dc32      	bgt.n	3555e <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x1c2>
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   354f8:	00aa      	lsls	r2, r5, #2
   354fa:	a803      	add	r0, sp, #12
   354fc:	f7e2 fe80 	bl	18200 <memcpy>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   35500:	2d04      	cmp	r5, #4
   35502:	d12c      	bne.n	3555e <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x1c2>
  if (tensor == nullptr) {
   35504:	b35f      	cbz	r7, 3555e <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x1c2>
  const int dims_size = dims->size;
   35506:	6979      	ldr	r1, [r7, #20]
   35508:	f851 5b04 	ldr.w	r5, [r1], #4
    size_ = dimensions_count;
   3550c:	9508      	str	r5, [sp, #32]
    if (dimensions_count > kMaxSmallSize) {
   3550e:	2d05      	cmp	r5, #5
   35510:	dc25      	bgt.n	3555e <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x1c2>
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   35512:	00aa      	lsls	r2, r5, #2
   35514:	a809      	add	r0, sp, #36	; 0x24
   35516:	f7e2 fe73 	bl	18200 <memcpy>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   3551a:	2d04      	cmp	r5, #4
   3551c:	d11f      	bne.n	3555e <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x1c2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   3551e:	9906      	ldr	r1, [sp, #24]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   35520:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   35522:	428b      	cmp	r3, r1
   35524:	d11b      	bne.n	3555e <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x1c2>
        arm_avgpool_s8_get_buffer_size(output_width, depth);
   35526:	980b      	ldr	r0, [sp, #44]	; 0x2c
   35528:	f007 fb4e 	bl	3cbc8 <arm_avgpool_s8_get_buffer_size>
    if (buffer_size > 0) {
   3552c:	1e01      	subs	r1, r0, #0
   3552e:	dd12      	ble.n	35556 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x1ba>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
   35530:	6c33      	ldr	r3, [r6, #64]	; 0x40
   35532:	f104 0210 	add.w	r2, r4, #16
   35536:	4630      	mov	r0, r6
   35538:	4798      	blx	r3
   3553a:	2800      	cmp	r0, #0
   3553c:	bf18      	it	ne
   3553e:	4680      	movne	r8, r0
   35540:	e78b      	b.n	3545a <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xbe>
    *activation_max = std::numeric_limits<T>::max();
   35542:	4b09      	ldr	r3, [pc, #36]	; (35568 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x1cc>)
   35544:	6223      	str	r3, [r4, #32]
    *activation_min = 0;
   35546:	2200      	movs	r2, #0
   35548:	61e2      	str	r2, [r4, #28]
   3554a:	e781      	b.n	35450 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xb4>
    *activation_max = 6;
   3554c:	4b07      	ldr	r3, [pc, #28]	; (3556c <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x1d0>)
   3554e:	6223      	str	r3, [r4, #32]
    *activation_min = 0;
   35550:	2200      	movs	r2, #0
   35552:	61e2      	str	r2, [r4, #28]
   35554:	e77c      	b.n	35450 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xb4>
      data->buffer_idx = -1;
   35556:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3555a:	6123      	str	r3, [r4, #16]
   3555c:	e77d      	b.n	3545a <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xbe>
  TFLITE_DCHECK(node->user_data != nullptr);
   3555e:	f7f6 fd1d 	bl	2bf9c <abort>
   35562:	bf00      	nop
   35564:	bf800000 	.word	0xbf800000
   35568:	7f7fffff 	.word	0x7f7fffff
   3556c:	40c00000 	.word	0x40c00000

00035570 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>:
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
}

TfLiteRegistration Register_MAX_POOL_2D() {
   35570:	b510      	push	{r4, lr}
          /*prepare=*/pooling::MaxPrepare,
          /*invoke=*/pooling::MaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   35572:	4c06      	ldr	r4, [pc, #24]	; (3558c <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv+0x1c>)
TfLiteRegistration Register_MAX_POOL_2D() {
   35574:	4686      	mov	lr, r0
          /*version=*/0};
   35576:	4684      	mov	ip, r0
   35578:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   3557a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   3557e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   35582:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
   35586:	4670      	mov	r0, lr
   35588:	bd10      	pop	{r4, pc}
   3558a:	bf00      	nop
   3558c:	0003eddc 	.word	0x0003eddc

00035590 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
  return kTfLiteOk;
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   35590:	b570      	push	{r4, r5, r6, lr}
   35592:	b082      	sub	sp, #8
  TFLITE_DCHECK(context != nullptr);
   35594:	2800      	cmp	r0, #0
   35596:	d035      	beq.n	35604 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x74>
  TFLITE_DCHECK(node != nullptr);
   35598:	460e      	mov	r6, r1
   3559a:	2900      	cmp	r1, #0
   3559c:	d032      	beq.n	35604 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x74>
  return context->GetEvalTensor(context, node->inputs->data[index]);
   3559e:	680a      	ldr	r2, [r1, #0]
   355a0:	6d43      	ldr	r3, [r0, #84]	; 0x54
   355a2:	6851      	ldr	r1, [r2, #4]
   355a4:	4605      	mov	r5, r0
   355a6:	4798      	blx	r3
  return context->GetEvalTensor(context, node->outputs->data[index]);
   355a8:	6873      	ldr	r3, [r6, #4]
  return context->GetEvalTensor(context, node->inputs->data[index]);
   355aa:	4604      	mov	r4, r0
  return context->GetEvalTensor(context, node->outputs->data[index]);
   355ac:	6859      	ldr	r1, [r3, #4]
   355ae:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   355b0:	4628      	mov	r0, r5
   355b2:	4798      	blx	r3
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);

  // TODO(b/162522304): storing input bytes in OpData increases some models
  // significantly, possibly due to alignment issues.
  size_t input_bytes;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(input->type, &input_bytes));
   355b4:	a901      	add	r1, sp, #4
   355b6:	4605      	mov	r5, r0
   355b8:	7a20      	ldrb	r0, [r4, #8]
   355ba:	f000 fc17 	bl	35dec <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
   355be:	4606      	mov	r6, r0
   355c0:	b110      	cbz	r0, 355c8 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x38>
    for (size_t i = 0; i < input_bytes; ++i) {
      output->data.raw[i] = input->data.raw[i];
    }
  }
  return kTfLiteOk;
}
   355c2:	4630      	mov	r0, r6
   355c4:	b002      	add	sp, #8
   355c6:	bd70      	pop	{r4, r5, r6, pc}
  input_bytes *= ElementCount(*input->dims);
   355c8:	6860      	ldr	r0, [r4, #4]
   355ca:	f000 fc33 	bl	35e34 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
   355ce:	9b01      	ldr	r3, [sp, #4]
  if (input->data.raw != output->data.raw) {
   355d0:	6822      	ldr	r2, [r4, #0]
  input_bytes *= ElementCount(*input->dims);
   355d2:	fb03 f000 	mul.w	r0, r3, r0
  if (input->data.raw != output->data.raw) {
   355d6:	682b      	ldr	r3, [r5, #0]
  input_bytes *= ElementCount(*input->dims);
   355d8:	9001      	str	r0, [sp, #4]
  if (input->data.raw != output->data.raw) {
   355da:	429a      	cmp	r2, r3
   355dc:	d0f1      	beq.n	355c2 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x32>
    for (size_t i = 0; i < input_bytes; ++i) {
   355de:	2800      	cmp	r0, #0
   355e0:	d0ef      	beq.n	355c2 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x32>
      output->data.raw[i] = input->data.raw[i];
   355e2:	7812      	ldrb	r2, [r2, #0]
   355e4:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < input_bytes; ++i) {
   355e6:	9b01      	ldr	r3, [sp, #4]
   355e8:	2b01      	cmp	r3, #1
   355ea:	d9ea      	bls.n	355c2 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x32>
   355ec:	2301      	movs	r3, #1
      output->data.raw[i] = input->data.raw[i];
   355ee:	6821      	ldr	r1, [r4, #0]
   355f0:	682a      	ldr	r2, [r5, #0]
   355f2:	5cc9      	ldrb	r1, [r1, r3]
   355f4:	54d1      	strb	r1, [r2, r3]
    for (size_t i = 0; i < input_bytes; ++i) {
   355f6:	9a01      	ldr	r2, [sp, #4]
   355f8:	3301      	adds	r3, #1
   355fa:	429a      	cmp	r2, r3
   355fc:	d8f7      	bhi.n	355ee <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x5e>
}
   355fe:	4630      	mov	r0, r6
   35600:	b002      	add	sp, #8
   35602:	bd70      	pop	{r4, r5, r6, pc}
  TFLITE_DCHECK(context != nullptr);
   35604:	f7f6 fcca 	bl	2bf9c <abort>

00035608 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
   35608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   3560a:	2200      	movs	r2, #0
TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
   3560c:	4606      	mov	r6, r0
   3560e:	460d      	mov	r5, r1
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   35610:	f000 fc7e 	bl	35f10 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
   35614:	2800      	cmp	r0, #0
   35616:	d049      	beq.n	356ac <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa4>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
   35618:	4604      	mov	r4, r0
   3561a:	2200      	movs	r2, #0
   3561c:	4629      	mov	r1, r5
   3561e:	4630      	mov	r0, r6
   35620:	f000 fc92 	bl	35f48 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
   35624:	2800      	cmp	r0, #0
   35626:	d041      	beq.n	356ac <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa4>
  return NumElements(t->dims);
   35628:	6963      	ldr	r3, [r4, #20]
  for (int i = 0; i < dims->size; ++i) {
   3562a:	6819      	ldr	r1, [r3, #0]
   3562c:	2900      	cmp	r1, #0
   3562e:	dd48      	ble.n	356c2 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xba>
   35630:	469e      	mov	lr, r3
  int64_t count = 1;
   35632:	2201      	movs	r2, #1
  for (int i = 0; i < dims->size; ++i) {
   35634:	f04f 0c00 	mov.w	ip, #0
    count *= dims->data[i];
   35638:	f85e 3f04 	ldr.w	r3, [lr, #4]!
  for (int i = 0; i < dims->size; ++i) {
   3563c:	f10c 0c01 	add.w	ip, ip, #1
   35640:	458c      	cmp	ip, r1
    count *= dims->data[i];
   35642:	fba2 2303 	umull	r2, r3, r2, r3
  for (int i = 0; i < dims->size; ++i) {
   35646:	d1f7      	bne.n	35638 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x30>
  int num_input_elements = NumElements(input);
   35648:	4694      	mov	ip, r2
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   3564a:	682b      	ldr	r3, [r5, #0]
  TfLiteIntArray* output_shape = output->dims;
   3564c:	6947      	ldr	r7, [r0, #20]
      output_shape->size == 1 && output_shape->data[0] == 0) {
   3564e:	681b      	ldr	r3, [r3, #0]
   35650:	683d      	ldr	r5, [r7, #0]
   35652:	2b01      	cmp	r3, #1
   35654:	d02c      	beq.n	356b0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa8>
  for (int i = 0; i < output_shape->size; ++i) {
   35656:	2d00      	cmp	r5, #0
   35658:	dd30      	ble.n	356bc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xb4>
   3565a:	4639      	mov	r1, r7
  for (int i = 0; i < dims->size; ++i) {
   3565c:	2300      	movs	r3, #0
   3565e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   35662:	f04f 0e01 	mov.w	lr, #1
   35666:	e004      	b.n	35672 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x6a>
   35668:	3301      	adds	r3, #1
   3566a:	42ab      	cmp	r3, r5
      num_output_elements *= value;
   3566c:	fb02 fe0e 	mul.w	lr, r2, lr
  for (int i = 0; i < output_shape->size; ++i) {
   35670:	da0a      	bge.n	35688 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x80>
    int value = output_shape->data[i];
   35672:	f851 2f04 	ldr.w	r2, [r1, #4]!
    if (value == -1) {
   35676:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   3567a:	d1f5      	bne.n	35668 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x60>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
   3567c:	3601      	adds	r6, #1
   3567e:	d115      	bne.n	356ac <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa4>
   35680:	461e      	mov	r6, r3
  for (int i = 0; i < output_shape->size; ++i) {
   35682:	3301      	adds	r3, #1
   35684:	42ab      	cmp	r3, r5
   35686:	dbf4      	blt.n	35672 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x6a>
  if (stretch_dim != -1) {
   35688:	1c73      	adds	r3, r6, #1
   3568a:	d006      	beq.n	3569a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x92>
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
   3568c:	fb9c f3fe 	sdiv	r3, ip, lr
   35690:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    num_output_elements *= output_shape->data[stretch_dim];
   35694:	fb03 fe0e 	mul.w	lr, r3, lr
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
   35698:	6073      	str	r3, [r6, #4]
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
   3569a:	7f22      	ldrb	r2, [r4, #28]
   3569c:	7f03      	ldrb	r3, [r0, #28]
   3569e:	429a      	cmp	r2, r3
   356a0:	d104      	bne.n	356ac <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa4>
  TF_LITE_ENSURE(context, input != nullptr);
   356a2:	ebbe 000c 	subs.w	r0, lr, ip
   356a6:	bf18      	it	ne
   356a8:	2001      	movne	r0, #1
}
   356aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  TF_LITE_ENSURE(context, input != nullptr);
   356ac:	2001      	movs	r0, #1
}
   356ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
   356b0:	2d01      	cmp	r5, #1
   356b2:	d1d0      	bne.n	35656 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x4e>
      output_shape->size == 1 && output_shape->data[0] == 0) {
   356b4:	687b      	ldr	r3, [r7, #4]
   356b6:	2b00      	cmp	r3, #0
   356b8:	d1cf      	bne.n	3565a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x52>
    output_shape->size = 0;
   356ba:	603b      	str	r3, [r7, #0]
  int num_output_elements = 1;
   356bc:	f04f 0e01 	mov.w	lr, #1
   356c0:	e7eb      	b.n	3569a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x92>
   356c2:	f04f 0c01 	mov.w	ip, #1
   356c6:	e7c0      	b.n	3564a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x42>

000356c8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   356c8:	680a      	ldr	r2, [r1, #0]
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
   356ca:	6812      	ldr	r2, [r2, #0]
   356cc:	3a01      	subs	r2, #1
   356ce:	2a01      	cmp	r2, #1
   356d0:	d901      	bls.n	356d6 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe>
   356d2:	2001      	movs	r0, #1
}
   356d4:	4770      	bx	lr
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   356d6:	b508      	push	{r3, lr}
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   356d8:	684b      	ldr	r3, [r1, #4]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   356da:	681b      	ldr	r3, [r3, #0]
   356dc:	2b01      	cmp	r3, #1
   356de:	d001      	beq.n	356e4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x1c>
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
   356e0:	2001      	movs	r0, #1
}
   356e2:	bd08      	pop	{r3, pc}
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
   356e4:	f7ff ff90 	bl	35608 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
   356e8:	3800      	subs	r0, #0
   356ea:	bf18      	it	ne
   356ec:	2001      	movne	r0, #1
}
   356ee:	bd08      	pop	{r3, pc}

000356f0 <_ZN6tflite3ops5micro16Register_RESHAPEEv>:

}  // namespace reshape

TfLiteRegistration Register_RESHAPE() {
   356f0:	b510      	push	{r4, lr}
          /*prepare=*/reshape::Prepare,
          /*invoke=*/reshape::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   356f2:	4c06      	ldr	r4, [pc, #24]	; (3570c <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x1c>)
TfLiteRegistration Register_RESHAPE() {
   356f4:	4686      	mov	lr, r0
          /*version=*/0};
   356f6:	4684      	mov	ip, r0
   356f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   356fa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   356fe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   35702:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
   35706:	4670      	mov	r0, lr
   35708:	bd10      	pop	{r4, pc}
   3570a:	bf00      	nop
   3570c:	0003edfc 	.word	0x0003edfc

00035710 <_ZN6tflite16Register_SOFTMAXEv>:
  }
}

}  // namespace

TfLiteRegistration Register_SOFTMAX() {
   35710:	b510      	push	{r4, lr}
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   35712:	4c06      	ldr	r4, [pc, #24]	; (3572c <_ZN6tflite16Register_SOFTMAXEv+0x1c>)
TfLiteRegistration Register_SOFTMAX() {
   35714:	4686      	mov	lr, r0
          /*version=*/0};
   35716:	4684      	mov	ip, r0
   35718:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   3571a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   3571e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   35722:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
   35726:	4670      	mov	r0, lr
   35728:	bd10      	pop	{r4, pc}
   3572a:	bf00      	nop
   3572c:	0003ee1c 	.word	0x0003ee1c

00035730 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
   35730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35734:	b091      	sub	sp, #68	; 0x44
   35736:	2800      	cmp	r0, #0
   35738:	f000 80f3 	beq.w	35922 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f2>
  TFLITE_DCHECK(node != nullptr);
   3573c:	460e      	mov	r6, r1
   3573e:	2900      	cmp	r1, #0
   35740:	f000 80ef 	beq.w	35922 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f2>
  return context->GetEvalTensor(context, node->inputs->data[index]);
   35744:	680a      	ldr	r2, [r1, #0]
   35746:	6d43      	ldr	r3, [r0, #84]	; 0x54
   35748:	6851      	ldr	r1, [r2, #4]
   3574a:	4605      	mov	r5, r0
   3574c:	4798      	blx	r3
  return context->GetEvalTensor(context, node->outputs->data[index]);
   3574e:	6872      	ldr	r2, [r6, #4]
   35750:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   35752:	6851      	ldr	r1, [r2, #4]
  return context->GetEvalTensor(context, node->inputs->data[index]);
   35754:	4604      	mov	r4, r0
  return context->GetEvalTensor(context, node->outputs->data[index]);
   35756:	4628      	mov	r0, r5
   35758:	4798      	blx	r3
  TFLITE_DCHECK(node->user_data != nullptr);
   3575a:	68b3      	ldr	r3, [r6, #8]
   3575c:	4605      	mov	r5, r0
   3575e:	2b00      	cmp	r3, #0
   35760:	f000 80df 	beq.w	35922 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f2>
  switch (input->type) {
   35764:	7a22      	ldrb	r2, [r4, #8]
   35766:	2a09      	cmp	r2, #9
   35768:	d003      	beq.n	35772 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x42>
      return kTfLiteError;
   3576a:	2001      	movs	r0, #1
}
   3576c:	b011      	add	sp, #68	; 0x44
   3576e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (output->type == kTfLiteInt16) {
   35772:	7a02      	ldrb	r2, [r0, #8]
   35774:	2a07      	cmp	r2, #7
   35776:	d078      	beq.n	3586a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x13a>
      const auto input_shape = tflite::micro::GetTensorShape(input);
   35778:	a804      	add	r0, sp, #16
   3577a:	4621      	mov	r1, r4
  const SoftmaxParams data =
   3577c:	e9d3 b802 	ldrd	fp, r8, [r3, #8]
   35780:	f8d3 9018 	ldr.w	r9, [r3, #24]
      const auto input_shape = tflite::micro::GetTensorShape(input);
   35784:	f7ff fc88 	bl	35098 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const auto output_shape = tflite::micro::GetTensorShape(output);
   35788:	4629      	mov	r1, r5
   3578a:	a80a      	add	r0, sp, #40	; 0x28
   3578c:	f7ff fc84 	bl	35098 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  inline int32_t DimensionsCount() const { return size_; }
   35790:	9a04      	ldr	r2, [sp, #16]

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
  const int dims_count = shape.DimensionsCount();
  for (int i = 0; i < dims_count; ++i) {
   35792:	2a00      	cmp	r2, #0
      const int trailing_dim = input_shape.DimensionsCount() - 1;
   35794:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
   35798:	dd69      	ble.n	3586e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x13e>
    TFLITE_DCHECK_LT(i, size_);
   3579a:	980a      	ldr	r0, [sp, #40]	; 0x28
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   3579c:	f8dd a014 	ldr.w	sl, [sp, #20]
   357a0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   357a2:	2805      	cmp	r0, #5
   357a4:	f300 8081 	bgt.w	358aa <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x17a>
   357a8:	2a05      	cmp	r2, #5
   357aa:	f300 809e 	bgt.w	358ea <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1ba>
    if (i != skip_dim) {
   357ae:	b383      	cbz	r3, 35812 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe2>
    TFLITE_DCHECK_LT(i, size_);
   357b0:	2800      	cmp	r0, #0
   357b2:	f340 80b6 	ble.w	35922 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f2>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   357b6:	4557      	cmp	r7, sl
   357b8:	f040 80b3 	bne.w	35922 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f2>
    if (i != skip_dim) {
   357bc:	2b01      	cmp	r3, #1
   357be:	d028      	beq.n	35812 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe2>
    TFLITE_DCHECK_LT(i, size_);
   357c0:	2801      	cmp	r0, #1
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   357c2:	9f06      	ldr	r7, [sp, #24]
    TFLITE_DCHECK_LT(i, size_);
   357c4:	f000 80ad 	beq.w	35922 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f2>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   357c8:	990c      	ldr	r1, [sp, #48]	; 0x30
   357ca:	42b9      	cmp	r1, r7
   357cc:	f040 80a9 	bne.w	35922 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f2>
    if (i != skip_dim) {
   357d0:	2b02      	cmp	r3, #2
   357d2:	d01e      	beq.n	35812 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe2>
    TFLITE_DCHECK_LT(i, size_);
   357d4:	2802      	cmp	r0, #2
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   357d6:	9f07      	ldr	r7, [sp, #28]
    TFLITE_DCHECK_LT(i, size_);
   357d8:	f000 80a3 	beq.w	35922 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f2>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   357dc:	990d      	ldr	r1, [sp, #52]	; 0x34
   357de:	428f      	cmp	r7, r1
   357e0:	f040 809f 	bne.w	35922 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f2>
    if (i != skip_dim) {
   357e4:	2b03      	cmp	r3, #3
   357e6:	d014      	beq.n	35812 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe2>
    TFLITE_DCHECK_LT(i, size_);
   357e8:	2803      	cmp	r0, #3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   357ea:	9f08      	ldr	r7, [sp, #32]
    TFLITE_DCHECK_LT(i, size_);
   357ec:	f000 8099 	beq.w	35922 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f2>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   357f0:	990e      	ldr	r1, [sp, #56]	; 0x38
   357f2:	42b9      	cmp	r1, r7
   357f4:	f040 8095 	bne.w	35922 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f2>
    if (i != skip_dim) {
   357f8:	2b04      	cmp	r3, #4
   357fa:	d00a      	beq.n	35812 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe2>
    TFLITE_DCHECK_LT(i, size_);
   357fc:	2805      	cmp	r0, #5
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   357fe:	9f09      	ldr	r7, [sp, #36]	; 0x24
    TFLITE_DCHECK_LT(i, size_);
   35800:	f040 808f 	bne.w	35922 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f2>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   35804:	990f      	ldr	r1, [sp, #60]	; 0x3c
   35806:	428f      	cmp	r7, r1
   35808:	f040 808b 	bne.w	35922 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f2>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   3580c:	2b00      	cmp	r3, #0
   3580e:	f2c0 8088 	blt.w	35922 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f2>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   35812:	f10d 0e14 	add.w	lr, sp, #20
   35816:	2101      	movs	r1, #1
   35818:	f04f 0c00 	mov.w	ip, #0
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   3581c:	4563      	cmp	r3, ip
   3581e:	d02f      	beq.n	35880 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x150>
   35820:	f85e 702c 	ldr.w	r7, [lr, ip, lsl #2]
  for (int i = 0; i < dims_count; ++i) {
   35824:	f10c 0c01 	add.w	ip, ip, #1
   35828:	4562      	cmp	r2, ip
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   3582a:	fb07 f101 	mul.w	r1, r7, r1
  for (int i = 0; i < dims_count; ++i) {
   3582e:	d1f5      	bne.n	3581c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xec>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   35830:	2a05      	cmp	r2, #5
   35832:	dd34      	ble.n	3589e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x16e>
   35834:	9a05      	ldr	r2, [sp, #20]
   35836:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
    TFLITE_DCHECK_LT(i, size_);
   3583a:	4283      	cmp	r3, r0
   3583c:	da71      	bge.n	35922 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   3583e:	2805      	cmp	r0, #5
   35840:	dd23      	ble.n	3588a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x15a>
   35842:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   35844:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   35848:	42ba      	cmp	r2, r7
   3584a:	d16a      	bne.n	35922 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f2>
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
   3584c:	682b      	ldr	r3, [r5, #0]
   3584e:	6820      	ldr	r0, [r4, #0]
   35850:	f8cd 8000 	str.w	r8, [sp]
   35854:	e9cd 9301 	strd	r9, r3, [sp, #4]
   35858:	465b      	mov	r3, fp
   3585a:	f007 fb51 	bl	3cf00 <arm_softmax_s8>
    if (size_ > kMaxSmallSize) {
   3585e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   35860:	2b05      	cmp	r3, #5
   35862:	dc5e      	bgt.n	35922 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f2>
   35864:	9b04      	ldr	r3, [sp, #16]
   35866:	2b05      	cmp	r3, #5
   35868:	dc5b      	bgt.n	35922 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f2>
      return kTfLiteOk;
   3586a:	2000      	movs	r0, #0
   3586c:	e77e      	b.n	3576c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x3c>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   3586e:	2b00      	cmp	r3, #0
   35870:	db57      	blt.n	35922 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f2>
   35872:	980a      	ldr	r0, [sp, #40]	; 0x28
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   35874:	2a05      	cmp	r2, #5
   35876:	dd0e      	ble.n	35896 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x166>
   35878:	f8dd a014 	ldr.w	sl, [sp, #20]
   3587c:	46d6      	mov	lr, sl
  for (int i = 0; i < dims_count; ++i) {
   3587e:	e7ca      	b.n	35816 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe6>
   35880:	f103 0c01 	add.w	ip, r3, #1
   35884:	4562      	cmp	r2, ip
   35886:	d1c9      	bne.n	3581c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xec>
   35888:	e7d2      	b.n	35830 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x100>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   3588a:	aa10      	add	r2, sp, #64	; 0x40
   3588c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   35890:	f853 2c14 	ldr.w	r2, [r3, #-20]
   35894:	e7d8      	b.n	35848 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x118>
  for (int i = 0; i < dims_count; ++i) {
   35896:	2a00      	cmp	r2, #0
  int flat_size = 1;
   35898:	bfd8      	it	le
   3589a:	2101      	movle	r1, #1
  for (int i = 0; i < dims_count; ++i) {
   3589c:	dcb9      	bgt.n	35812 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   3589e:	aa10      	add	r2, sp, #64	; 0x40
   358a0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   358a4:	f852 7c2c 	ldr.w	r7, [r2, #-44]
   358a8:	e7c7      	b.n	3583a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x10a>
   358aa:	2a05      	cmp	r2, #5
   358ac:	dc3b      	bgt.n	35926 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f6>
    if (i != skip_dim) {
   358ae:	2b00      	cmp	r3, #0
   358b0:	d0af      	beq.n	35812 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe2>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   358b2:	683e      	ldr	r6, [r7, #0]
   358b4:	45b2      	cmp	sl, r6
   358b6:	d134      	bne.n	35922 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f2>
    if (i != skip_dim) {
   358b8:	2b01      	cmp	r3, #1
   358ba:	d0aa      	beq.n	35812 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe2>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   358bc:	6879      	ldr	r1, [r7, #4]
   358be:	9e06      	ldr	r6, [sp, #24]
   358c0:	428e      	cmp	r6, r1
   358c2:	d12e      	bne.n	35922 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f2>
    if (i != skip_dim) {
   358c4:	2b02      	cmp	r3, #2
   358c6:	d0a4      	beq.n	35812 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe2>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   358c8:	68b9      	ldr	r1, [r7, #8]
   358ca:	9e07      	ldr	r6, [sp, #28]
   358cc:	428e      	cmp	r6, r1
   358ce:	d128      	bne.n	35922 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f2>
    if (i != skip_dim) {
   358d0:	2b03      	cmp	r3, #3
   358d2:	d09e      	beq.n	35812 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe2>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   358d4:	68f9      	ldr	r1, [r7, #12]
   358d6:	9e08      	ldr	r6, [sp, #32]
   358d8:	428e      	cmp	r6, r1
   358da:	d122      	bne.n	35922 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f2>
    if (i != skip_dim) {
   358dc:	2b04      	cmp	r3, #4
   358de:	d098      	beq.n	35812 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe2>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   358e0:	693f      	ldr	r7, [r7, #16]
   358e2:	9909      	ldr	r1, [sp, #36]	; 0x24
   358e4:	42b9      	cmp	r1, r7
   358e6:	d091      	beq.n	3580c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xdc>
   358e8:	e01b      	b.n	35922 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f2>
    if (i != skip_dim) {
   358ea:	2b00      	cmp	r3, #0
   358ec:	d059      	beq.n	359a2 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x272>
    TFLITE_DCHECK_LT(i, size_);
   358ee:	2800      	cmp	r0, #0
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   358f0:	f8da c000 	ldr.w	ip, [sl]
    TFLITE_DCHECK_LT(i, size_);
   358f4:	dd15      	ble.n	35922 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f2>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   358f6:	4567      	cmp	r7, ip
   358f8:	d113      	bne.n	35922 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f2>
    if (i != skip_dim) {
   358fa:	2b01      	cmp	r3, #1
   358fc:	d151      	bne.n	359a2 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x272>
    TFLITE_DCHECK_LT(i, size_);
   358fe:	2802      	cmp	r0, #2
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   35900:	f8da 7008 	ldr.w	r7, [sl, #8]
    TFLITE_DCHECK_LT(i, size_);
   35904:	dd0d      	ble.n	35922 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f2>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   35906:	990d      	ldr	r1, [sp, #52]	; 0x34
   35908:	428f      	cmp	r7, r1
   3590a:	d10a      	bne.n	35922 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f2>
    if (i != skip_dim) {
   3590c:	2b03      	cmp	r3, #3
   3590e:	d151      	bne.n	359b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x284>
    TFLITE_DCHECK_LT(i, size_);
   35910:	2805      	cmp	r0, #5
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   35912:	f8da 7010 	ldr.w	r7, [sl, #16]
    TFLITE_DCHECK_LT(i, size_);
   35916:	d104      	bne.n	35922 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f2>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   35918:	990f      	ldr	r1, [sp, #60]	; 0x3c
   3591a:	42b9      	cmp	r1, r7
   3591c:	d101      	bne.n	35922 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f2>
    if (i != skip_dim) {
   3591e:	2b05      	cmp	r3, #5
   35920:	d0a8      	beq.n	35874 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x144>
  TFLITE_DCHECK(context != nullptr);
   35922:	f7f6 fb3b 	bl	2bf9c <abort>
   35926:	b36b      	cbz	r3, 35984 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x254>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   35928:	f8da 6000 	ldr.w	r6, [sl]
   3592c:	6839      	ldr	r1, [r7, #0]
   3592e:	428e      	cmp	r6, r1
   35930:	d1f7      	bne.n	35922 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f2>
    if (i != skip_dim) {
   35932:	2b01      	cmp	r3, #1
   35934:	d126      	bne.n	35984 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x254>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   35936:	f8da 1008 	ldr.w	r1, [sl, #8]
   3593a:	68be      	ldr	r6, [r7, #8]
   3593c:	42b1      	cmp	r1, r6
   3593e:	d1f0      	bne.n	35922 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f2>
    if (i != skip_dim) {
   35940:	2b03      	cmp	r3, #3
   35942:	d126      	bne.n	35992 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x262>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   35944:	f8da 1010 	ldr.w	r1, [sl, #16]
   35948:	693e      	ldr	r6, [r7, #16]
   3594a:	42b1      	cmp	r1, r6
   3594c:	d1e9      	bne.n	35922 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f2>
    if (i != skip_dim) {
   3594e:	2b05      	cmp	r3, #5
   35950:	d094      	beq.n	3587c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x14c>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   35952:	f8da 1014 	ldr.w	r1, [sl, #20]
   35956:	697e      	ldr	r6, [r7, #20]
   35958:	42b1      	cmp	r1, r6
   3595a:	d1e2      	bne.n	35922 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f2>
   3595c:	f04f 0c06 	mov.w	ip, #6
    if (i != skip_dim) {
   35960:	4563      	cmp	r3, ip
   35962:	d007      	beq.n	35974 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x244>
    TFLITE_DCHECK_LT(i, size_);
   35964:	4560      	cmp	r0, ip
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   35966:	f85a e02c 	ldr.w	lr, [sl, ip, lsl #2]
    TFLITE_DCHECK_LT(i, size_);
   3596a:	ddda      	ble.n	35922 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f2>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   3596c:	f857 102c 	ldr.w	r1, [r7, ip, lsl #2]
   35970:	4571      	cmp	r1, lr
   35972:	d1d6      	bne.n	35922 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f2>
  for (int i = 0; i < dims_count; ++i) {
   35974:	f10c 0c01 	add.w	ip, ip, #1
   35978:	4562      	cmp	r2, ip
   3597a:	d1f1      	bne.n	35960 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x230>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   3597c:	2b00      	cmp	r3, #0
   3597e:	dbd0      	blt.n	35922 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f2>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   35980:	46d6      	mov	lr, sl
  for (int i = 0; i < dims_count; ++i) {
   35982:	e748      	b.n	35816 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe6>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   35984:	f8da 1004 	ldr.w	r1, [sl, #4]
   35988:	687e      	ldr	r6, [r7, #4]
   3598a:	42b1      	cmp	r1, r6
   3598c:	d1c9      	bne.n	35922 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f2>
    if (i != skip_dim) {
   3598e:	2b02      	cmp	r3, #2
   35990:	d1d1      	bne.n	35936 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x206>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   35992:	f8da 100c 	ldr.w	r1, [sl, #12]
   35996:	68fe      	ldr	r6, [r7, #12]
   35998:	42b1      	cmp	r1, r6
   3599a:	d1c2      	bne.n	35922 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f2>
    if (i != skip_dim) {
   3599c:	2b04      	cmp	r3, #4
   3599e:	d0d8      	beq.n	35952 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x222>
   359a0:	e7d0      	b.n	35944 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x214>
    TFLITE_DCHECK_LT(i, size_);
   359a2:	2801      	cmp	r0, #1
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   359a4:	f8da 7004 	ldr.w	r7, [sl, #4]
    TFLITE_DCHECK_LT(i, size_);
   359a8:	ddbb      	ble.n	35922 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f2>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   359aa:	990c      	ldr	r1, [sp, #48]	; 0x30
   359ac:	428f      	cmp	r7, r1
   359ae:	d1b8      	bne.n	35922 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f2>
    if (i != skip_dim) {
   359b0:	2b02      	cmp	r3, #2
   359b2:	d1a4      	bne.n	358fe <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1ce>
    TFLITE_DCHECK_LT(i, size_);
   359b4:	2803      	cmp	r0, #3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   359b6:	f8da 700c 	ldr.w	r7, [sl, #12]
    TFLITE_DCHECK_LT(i, size_);
   359ba:	ddb2      	ble.n	35922 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f2>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   359bc:	990e      	ldr	r1, [sp, #56]	; 0x38
   359be:	428f      	cmp	r7, r1
   359c0:	d1af      	bne.n	35922 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f2>
    if (i != skip_dim) {
   359c2:	2b04      	cmp	r3, #4
   359c4:	d0ad      	beq.n	35922 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f2>
   359c6:	e7a3      	b.n	35910 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1e0>

000359c8 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj>:
}

}  // namespace

void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   359c8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   359ca:	b10b      	cbz	r3, 359d0 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj+0x8>
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
   359cc:	2138      	movs	r1, #56	; 0x38
   359ce:	4718      	bx	r3
void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
   359d0:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   359d2:	f7f6 fae3 	bl	2bf9c <abort>
   359d6:	bf00      	nop

000359d8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   359d8:	680b      	ldr	r3, [r1, #0]
}

TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   359da:	681b      	ldr	r3, [r3, #0]
   359dc:	2b01      	cmp	r3, #1
   359de:	d001      	beq.n	359e4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc>
   359e0:	2001      	movs	r0, #1
    op_data->scale = output->params.scale;
  }

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
  return CalculateSoftmaxParams(context, input, output, params, op_data);
}
   359e2:	4770      	bx	lr
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
   359e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   359e8:	684b      	ldr	r3, [r1, #4]
   359ea:	ed2d 8b0c 	vpush	{d8-d13}
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   359ee:	681b      	ldr	r3, [r3, #0]
   359f0:	2b01      	cmp	r3, #1
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
   359f2:	b085      	sub	sp, #20
   359f4:	460c      	mov	r4, r1
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   359f6:	d005      	beq.n	35a04 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c>
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   359f8:	2001      	movs	r0, #1
}
   359fa:	b005      	add	sp, #20
   359fc:	ecbd 8b0c 	vpop	{d8-d13}
   35a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  const TfLiteTensor* input = GetInput(context, node, 0);
   35a04:	2200      	movs	r2, #0
   35a06:	4605      	mov	r5, r0
   35a08:	f000 fa82 	bl	35f10 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
   35a0c:	4606      	mov	r6, r0
   35a0e:	2800      	cmp	r0, #0
   35a10:	d0f2      	beq.n	359f8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x20>
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   35a12:	6943      	ldr	r3, [r0, #20]
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
   35a14:	681b      	ldr	r3, [r3, #0]
   35a16:	2b00      	cmp	r3, #0
   35a18:	ddee      	ble.n	359f8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x20>
  TfLiteTensor* output = GetOutput(context, node, 0);
   35a1a:	2200      	movs	r2, #0
   35a1c:	4621      	mov	r1, r4
   35a1e:	4628      	mov	r0, r5
   35a20:	f000 fa92 	bl	35f48 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
   35a24:	4607      	mov	r7, r0
   35a26:	2800      	cmp	r0, #0
   35a28:	d0e6      	beq.n	359f8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x20>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
   35a2a:	f8d4 8008 	ldr.w	r8, [r4, #8]
   35a2e:	f1b8 0f00 	cmp.w	r8, #0
   35a32:	d0e1      	beq.n	359f8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x20>
  if (input->type == kTfLiteInt16) {
   35a34:	7f33      	ldrb	r3, [r6, #28]
   35a36:	2b07      	cmp	r3, #7
   35a38:	d01a      	beq.n	35a70 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x98>
  if (output->type == kTfLiteInt16) {
   35a3a:	7f3a      	ldrb	r2, [r7, #28]
   35a3c:	2a07      	cmp	r2, #7
   35a3e:	d02b      	beq.n	35a98 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc0>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
   35a40:	429a      	cmp	r2, r3
   35a42:	d1d9      	bne.n	359f8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x20>
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
   35a44:	2b09      	cmp	r3, #9
  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
   35a46:	68e4      	ldr	r4, [r4, #12]
  return CalculateSoftmaxParams(context, input, output, params, op_data);
   35a48:	68b5      	ldr	r5, [r6, #8]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
   35a4a:	f000 819c 	beq.w	35d86 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x3ae>
   35a4e:	2b07      	cmp	r3, #7
   35a50:	f000 815f 	beq.w	35d12 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x33a>
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
   35a54:	2b01      	cmp	r3, #1
   35a56:	d1cf      	bne.n	359f8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x20>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
   35a58:	7f3b      	ldrb	r3, [r7, #28]
   35a5a:	2b01      	cmp	r3, #1
   35a5c:	d1cc      	bne.n	359f8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x20>
    op_data->beta = static_cast<double>(params->beta);
   35a5e:	6820      	ldr	r0, [r4, #0]
   35a60:	f7e3 f800 	bl	18a64 <__aeabi_f2d>
   35a64:	4602      	mov	r2, r0
   35a66:	460b      	mov	r3, r1
   35a68:	e9c8 2300 	strd	r2, r3, [r8]
  return kTfLiteOk;
   35a6c:	2000      	movs	r0, #0
   35a6e:	e7c4      	b.n	359fa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22>
    void* raw_exp_lut = context->AllocatePersistentBuffer(
   35a70:	6bab      	ldr	r3, [r5, #56]	; 0x38
   35a72:	f240 4102 	movw	r1, #1026	; 0x402
   35a76:	4628      	mov	r0, r5
   35a78:	4798      	blx	r3
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
   35a7a:	2800      	cmp	r0, #0
   35a7c:	d0bc      	beq.n	359f8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x20>
    op_data->exp_lut = reinterpret_cast<int16_t*>(raw_exp_lut);
   35a7e:	f8c8 0028 	str.w	r0, [r8, #40]	; 0x28
    void* one_over_one_plus_x_lut = context->AllocatePersistentBuffer(
   35a82:	6bab      	ldr	r3, [r5, #56]	; 0x38
   35a84:	4628      	mov	r0, r5
   35a86:	f240 4102 	movw	r1, #1026	; 0x402
   35a8a:	4798      	blx	r3
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
   35a8c:	2800      	cmp	r0, #0
   35a8e:	d0b3      	beq.n	359f8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x20>
    TF_LITE_ENSURE(context,
   35a90:	7f33      	ldrb	r3, [r6, #28]
    op_data->one_over_one_plus_x_lut =
   35a92:	f8c8 002c 	str.w	r0, [r8, #44]	; 0x2c
   35a96:	e7d0      	b.n	35a3a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x62>
    TF_LITE_ENSURE(context,
   35a98:	2b09      	cmp	r3, #9
   35a9a:	f000 80f7 	beq.w	35c8c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2b4>
   35a9e:	2b07      	cmp	r3, #7
   35aa0:	d1aa      	bne.n	359f8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x20>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
   35aa2:	68fd      	ldr	r5, [r7, #12]
   35aa4:	2d00      	cmp	r5, #0
   35aa6:	d1a7      	bne.n	359f8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x20>
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
   35aa8:	ee07 5a90 	vmov	s15, r5
   35aac:	f8d8 9028 	ldr.w	r9, [r8, #40]	; 0x28
  // size of table should equal to num + 1
  // last element only for slope calculation
  float step = (max - min) / (num - 1);
  float half_step = step / 2.0f;
  for (int i = 0; i < num - 1; i++) {
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
   35ab0:	ed9f bac1 	vldr	s22, [pc, #772]	; 35db8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x3e0>
   35ab4:	ed9f 9ac1 	vldr	s18, [pc, #772]	; 35dbc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x3e4>
    float midpoint_interp_val =
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
                     TfLiteRound(func(min + i * step) * 32768.0f)) /
                    2.0f);
    float midpoint_val =
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
   35ab8:	ed9f cac1 	vldr	s24, [pc, #772]	; 35dc0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x3e8>
      if (__a < __b)
   35abc:	eddf bac1 	vldr	s23, [pc, #772]	; 35dc4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x3ec>
      if (__b < __a)
   35ac0:	eddf cac1 	vldr	s25, [pc, #772]	; 35dc8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x3f0>
   35ac4:	eeb8 aae7 	vcvt.f32.s32	s20, s15
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
   35ac8:	eefa aa04 	vmov.f32	s21, #164	; 0xc1200000 -10.0
   35acc:	f1a9 0a02 	sub.w	sl, r9, #2
   35ad0:	eef0 9a6a 	vmov.f32	s19, s21
   35ad4:	eeea 9a0b 	vfma.f32	s19, s20, s22
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
   35ad8:	3501      	adds	r5, #1
   35ada:	eeb6 da00 	vmov.f32	s26, #96	; 0x3f000000  0.5
  { return __builtin_expf(__x); }
   35ade:	eeb0 0a69 	vmov.f32	s0, s19
   35ae2:	f7f3 f833 	bl	28b4c <expf>
   35ae6:	ee07 5a90 	vmov	s15, r5
  { return __builtin_roundf(__x); }
   35aea:	ee20 0a09 	vmul.f32	s0, s0, s18
   35aee:	eeb8 aae7 	vcvt.f32.s32	s20, s15
   35af2:	f7f2 ff97 	bl	28a24 <roundf>
   35af6:	eeb0 8a40 	vmov.f32	s16, s0
  { return __builtin_expf(__x); }
   35afa:	eeb0 0a6a 	vmov.f32	s0, s21
   35afe:	eeaa 0a0b 	vfma.f32	s0, s20, s22
   35b02:	f7f3 f823 	bl	28b4c <expf>
   35b06:	eef0 8a40 	vmov.f32	s17, s0
   35b0a:	eeb0 0a69 	vmov.f32	s0, s19
   35b0e:	f7f3 f81d 	bl	28b4c <expf>
  { return __builtin_roundf(__x); }
   35b12:	ee20 0a09 	vmul.f32	s0, s0, s18
   35b16:	f7f2 ff85 	bl	28a24 <roundf>
   35b1a:	eea8 0a89 	vfma.f32	s0, s17, s18
   35b1e:	ee20 0a0d 	vmul.f32	s0, s0, s26
   35b22:	f7f2 ff7f 	bl	28a24 <roundf>
   35b26:	eef0 8a40 	vmov.f32	s17, s0
  { return __builtin_expf(__x); }
   35b2a:	ee39 0a8c 	vadd.f32	s0, s19, s24
   35b2e:	f7f3 f80d 	bl	28b4c <expf>
  { return __builtin_roundf(__x); }
   35b32:	ee20 0a09 	vmul.f32	s0, s0, s18
   35b36:	f7f2 ff75 	bl	28a24 <roundf>
    float midpoint_err = midpoint_interp_val - midpoint_val;
   35b3a:	ee38 0ac0 	vsub.f32	s0, s17, s0
   35b3e:	ee20 0a0d 	vmul.f32	s0, s0, s26
   35b42:	f7f2 ff6f 	bl	28a24 <roundf>
    float bias = TfLiteRound(midpoint_err / 2.0f);
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
   35b46:	ee38 0a40 	vsub.f32	s0, s16, s0
      if (__a < __b)
   35b4a:	eeb4 0aeb 	vcmpe.f32	s0, s23
   35b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   35b52:	f100 808e 	bmi.w	35c72 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x29a>
      if (__b < __a)
   35b56:	eeb4 0aec 	vcmpe.f32	s0, s25
   35b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   35b5e:	f647 73ff 	movw	r3, #32767	; 0x7fff
   35b62:	f340 8088 	ble.w	35c76 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x29e>
  for (int i = 0; i < num - 1; i++) {
   35b66:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
   35b6a:	f82a 3f02 	strh.w	r3, [sl, #2]!
  for (int i = 0; i < num - 1; i++) {
   35b6e:	d1af      	bne.n	35ad0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xf8>
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
   35b70:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
   35b74:	ed9f 0a95 	vldr	s0, [pc, #596]	; 35dcc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x3f4>
   35b78:	ed9f 8a90 	vldr	s16, [pc, #576]	; 35dbc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x3e4>
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
   35b7c:	ed9f ba94 	vldr	s22, [pc, #592]	; 35dd0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x3f8>
      if (__a < __b)
   35b80:	eddf ba90 	vldr	s23, [pc, #576]	; 35dc4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x3ec>
      if (__b < __a)
   35b84:	eddf ca90 	vldr	s25, [pc, #576]	; 35dc8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x3f0>
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
   35b88:	ed9f ca92 	vldr	s24, [pc, #584]	; 35dd4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x3fc>
   35b8c:	9301      	str	r3, [sp, #4]
   35b8e:	eeb7 da00 	vmov.f32	s26, #112	; 0x3f800000  1.0
                               32767.0f);
  }
  table[num - 1] = std::min<float>(
   35b92:	f647 75ff 	movw	r5, #32767	; 0x7fff
   35b96:	f8a9 5400 	strh.w	r5, [r9, #1024]	; 0x400
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
   35b9a:	eef0 aa40 	vmov.f32	s21, s0
   35b9e:	eeb0 9a4d 	vmov.f32	s18, s26
   35ba2:	eeb0 aa48 	vmov.f32	s20, s16
   35ba6:	f1a3 0a02 	sub.w	sl, r3, #2
   35baa:	f04f 0b01 	mov.w	fp, #1
  for (int i = 0; i < num - 1; i++) {
   35bae:	f240 2901 	movw	r9, #513	; 0x201
   35bb2:	e034      	b.n	35c1e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x246>
   35bb4:	eef4 7aec 	vcmpe.f32	s15, s25
   35bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   35bbc:	dd42      	ble.n	35c44 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x26c>
   35bbe:	f10b 0b01 	add.w	fp, fp, #1
   35bc2:	45cb      	cmp	fp, r9
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
   35bc4:	f82a 5f02 	strh.w	r5, [sl, #2]!
  for (int i = 0; i < num - 1; i++) {
   35bc8:	d046      	beq.n	35c58 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x280>
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
   35bca:	ee07 ba90 	vmov	s15, fp
   35bce:	eeb8 dae7 	vcvt.f32.s32	s26, s15
   35bd2:	f7f2 ff27 	bl	28a24 <roundf>
   35bd6:	eef0 7a6a 	vmov.f32	s15, s21
   35bda:	eeed 7a0b 	vfma.f32	s15, s26, s22
   35bde:	eeb0 8a40 	vmov.f32	s16, s0
   35be2:	ee77 7a89 	vadd.f32	s15, s15, s18
   35be6:	eef6 da00 	vmov.f32	s27, #96	; 0x3f000000  0.5
   35bea:	ee89 7a27 	vdiv.f32	s14, s18, s15
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
   35bee:	ee78 8a8c 	vadd.f32	s17, s17, s24
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
   35bf2:	eea7 0a0a 	vfma.f32	s0, s14, s20
   35bf6:	ee78 8a89 	vadd.f32	s17, s17, s18
   35bfa:	ee20 0a2d 	vmul.f32	s0, s0, s27
   35bfe:	f7f2 ff11 	bl	28a24 <roundf>
   35c02:	eef0 9a40 	vmov.f32	s19, s0
   35c06:	ee89 0a28 	vdiv.f32	s0, s18, s17
   35c0a:	ee20 0a0a 	vmul.f32	s0, s0, s20
   35c0e:	f7f2 ff09 	bl	28a24 <roundf>
    float midpoint_err = midpoint_interp_val - midpoint_val;
   35c12:	ee39 0ac0 	vsub.f32	s0, s19, s0
   35c16:	ee20 0a2d 	vmul.f32	s0, s0, s27
   35c1a:	f7f2 ff03 	bl	28a24 <roundf>
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
   35c1e:	eef0 8a6a 	vmov.f32	s17, s21
   35c22:	eeed 8a0b 	vfma.f32	s17, s26, s22
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
   35c26:	ee78 7a40 	vsub.f32	s15, s16, s0
   35c2a:	ee38 7a89 	vadd.f32	s14, s17, s18
      if (__a < __b)
   35c2e:	eef4 7aeb 	vcmpe.f32	s15, s23
   35c32:	ee89 0a07 	vdiv.f32	s0, s18, s14
   35c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
   35c3a:	ee20 0a0a 	vmul.f32	s0, s0, s20
   35c3e:	d5b9      	bpl.n	35bb4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1dc>
   35c40:	eef0 7a6b 	vmov.f32	s15, s23
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
   35c44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  for (int i = 0; i < num - 1; i++) {
   35c48:	f10b 0b01 	add.w	fp, fp, #1
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
   35c4c:	ee17 3a90 	vmov	r3, s15
  for (int i = 0; i < num - 1; i++) {
   35c50:	45cb      	cmp	fp, r9
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
   35c52:	f82a 3f02 	strh.w	r3, [sl, #2]!
  for (int i = 0; i < num - 1; i++) {
   35c56:	d1b8      	bne.n	35bca <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f2>
  table[num - 1] = std::min<float>(
   35c58:	9801      	ldr	r0, [sp, #4]
    op_data->scale = output->params.scale;
   35c5a:	68bb      	ldr	r3, [r7, #8]
    op_data->zero_point = output->params.zero_point;
   35c5c:	68fa      	ldr	r2, [r7, #12]
   35c5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   35c62:	f8a0 1400 	strh.w	r1, [r0, #1024]	; 0x400
    op_data->scale = output->params.scale;
   35c66:	f8c8 3020 	str.w	r3, [r8, #32]
    op_data->zero_point = output->params.zero_point;
   35c6a:	f8c8 201c 	str.w	r2, [r8, #28]
    op_data->scale = output->params.scale;
   35c6e:	7f33      	ldrb	r3, [r6, #28]
   35c70:	e6e8      	b.n	35a44 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x6c>
   35c72:	eeb0 0a6b 	vmov.f32	s0, s23
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
   35c76:	eebd 0ac0 	vcvt.s32.f32	s0, s0
  for (int i = 0; i < num - 1; i++) {
   35c7a:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
   35c7e:	ee10 3a10 	vmov	r3, s0
   35c82:	f82a 3f02 	strh.w	r3, [sl, #2]!
  for (int i = 0; i < num - 1; i++) {
   35c86:	f47f af23 	bne.w	35ad0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xf8>
   35c8a:	e771      	b.n	35b70 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x198>
  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
   35c8c:	68e4      	ldr	r4, [r4, #12]
  return CalculateSoftmaxParams(context, input, output, params, op_data);
   35c8e:	68b5      	ldr	r5, [r6, #8]
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
   35c90:	68fb      	ldr	r3, [r7, #12]
   35c92:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
   35c96:	f47f aeaf 	bne.w	359f8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x20>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
   35c9a:	ed97 7a02 	vldr	s14, [r7, #8]
   35c9e:	eddf 7a4e 	vldr	s15, [pc, #312]	; 35dd8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x400>
   35ca2:	eeb4 7ae7 	vcmpe.f32	s14, s15
   35ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   35caa:	bfcc      	ite	gt
   35cac:	ee77 7a67 	vsubgt.f32	s15, s14, s15
   35cb0:	ee77 7ac7 	vsuble.f32	s15, s15, s14
   35cb4:	ed9f 7a49 	vldr	s14, [pc, #292]	; 35ddc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x404>
   35cb8:	eef4 7ac7 	vcmpe.f32	s15, s14
   35cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   35cc0:	f73f ae9a 	bgt.w	359f8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x20>
      tflite::PreprocessSoftmaxScaling(
   35cc4:	4628      	mov	r0, r5
   35cc6:	f7e2 fecd 	bl	18a64 <__aeabi_f2d>
   35cca:	ec41 0b18 	vmov	d8, r0, r1
   35cce:	6820      	ldr	r0, [r4, #0]
   35cd0:	f7e2 fec8 	bl	18a64 <__aeabi_f2d>
   35cd4:	eeb0 1a48 	vmov.f32	s2, s16
   35cd8:	eef0 1a68 	vmov.f32	s3, s17
   35cdc:	f108 0508 	add.w	r5, r8, #8
   35ce0:	ec41 0b10 	vmov	d0, r0, r1
   35ce4:	aa03      	add	r2, sp, #12
   35ce6:	4629      	mov	r1, r5
   35ce8:	2005      	movs	r0, #5
   35cea:	f000 fbbd 	bl	36468 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
      op_data->input_left_shift = input_left_shift;
   35cee:	9903      	ldr	r1, [sp, #12]
   35cf0:	f8c8 100c 	str.w	r1, [r8, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
   35cf4:	221f      	movs	r2, #31
   35cf6:	2005      	movs	r0, #5
   35cf8:	f000 fc2e 	bl	36558 <_ZN6tflite20CalculateInputRadiusEiii>
   35cfc:	f7e2 fea0 	bl	18a40 <__aeabi_i2d>
   35d00:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
      op_data->diff_min =
   35d04:	4629      	mov	r1, r5
   35d06:	f7e3 f9b5 	bl	19074 <__aeabi_d2iz>
   35d0a:	f8c8 0018 	str.w	r0, [r8, #24]
  return kTfLiteOk;
   35d0e:	2000      	movs	r0, #0
   35d10:	e673      	b.n	359fa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
   35d12:	68fb      	ldr	r3, [r7, #12]
   35d14:	2b00      	cmp	r3, #0
   35d16:	f47f ae6f 	bne.w	359f8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x20>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
   35d1a:	ed97 7a02 	vldr	s14, [r7, #8]
   35d1e:	eddf 7a30 	vldr	s15, [pc, #192]	; 35de0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x408>
   35d22:	eeb4 7ae7 	vcmpe.f32	s14, s15
   35d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   35d2a:	bfcc      	ite	gt
   35d2c:	ee77 7a67 	vsubgt.f32	s15, s14, s15
   35d30:	ee77 7ac7 	vsuble.f32	s15, s15, s14
   35d34:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 35de4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x40c>
   35d38:	eef4 7ac7 	vcmpe.f32	s15, s14
   35d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   35d40:	f73f ae5a 	bgt.w	359f8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x20>
          static_cast<double>(params->beta) /
   35d44:	6820      	ldr	r0, [r4, #0]
   35d46:	f7e2 fe8d 	bl	18a64 <__aeabi_f2d>
   35d4a:	4602      	mov	r2, r0
          static_cast<double>(input->params.scale) *
   35d4c:	4628      	mov	r0, r5
          static_cast<double>(params->beta) /
   35d4e:	4614      	mov	r4, r2
   35d50:	460d      	mov	r5, r1
          static_cast<double>(input->params.scale) *
   35d52:	f7e2 fe87 	bl	18a64 <__aeabi_f2d>
   35d56:	4602      	mov	r2, r0
   35d58:	460b      	mov	r3, r1
   35d5a:	4620      	mov	r0, r4
   35d5c:	4629      	mov	r1, r5
   35d5e:	f7e2 fed9 	bl	18b14 <__aeabi_dmul>
      double input_scale_beta_rescale =
   35d62:	a313      	add	r3, pc, #76	; (adr r3, 35db0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x3d8>)
   35d64:	e9d3 2300 	ldrd	r2, r3, [r3]
   35d68:	f7e2 fffe 	bl	18d68 <__aeabi_ddiv>
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
   35d6c:	f108 0608 	add.w	r6, r8, #8
      double input_scale_beta_rescale =
   35d70:	ec41 0b10 	vmov	d0, r0, r1
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
   35d74:	4630      	mov	r0, r6
   35d76:	a903      	add	r1, sp, #12
   35d78:	f000 fb30 	bl	363dc <_ZN6tflite18QuantizeMultiplierEdPlPi>
      op_data->input_left_shift = input_left_shift;
   35d7c:	9b03      	ldr	r3, [sp, #12]
   35d7e:	f8c8 300c 	str.w	r3, [r8, #12]
  return kTfLiteOk;
   35d82:	2000      	movs	r0, #0
   35d84:	e639      	b.n	359fa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22>
   35d86:	7f3a      	ldrb	r2, [r7, #28]
      if (output->type == kTfLiteInt16) {
   35d88:	2a07      	cmp	r2, #7
   35d8a:	d081      	beq.n	35c90 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2b8>
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
   35d8c:	2a09      	cmp	r2, #9
   35d8e:	f47f ae33 	bne.w	359f8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x20>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
   35d92:	68fb      	ldr	r3, [r7, #12]
   35d94:	3380      	adds	r3, #128	; 0x80
   35d96:	f47f ae2f 	bne.w	359f8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x20>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
   35d9a:	eddf 7a13 	vldr	s15, [pc, #76]	; 35de8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x410>
   35d9e:	ed97 7a02 	vldr	s14, [r7, #8]
   35da2:	eeb4 7a67 	vcmp.f32	s14, s15
   35da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   35daa:	d08b      	beq.n	35cc4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2ec>
   35dac:	e624      	b.n	359f8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x20>
   35dae:	bf00      	nop
   35db0:	00140014 	.word	0x00140014
   35db4:	3f240014 	.word	0x3f240014
   35db8:	3ca00000 	.word	0x3ca00000
   35dbc:	47000000 	.word	0x47000000
   35dc0:	3c200000 	.word	0x3c200000
   35dc4:	c7000000 	.word	0xc7000000
   35dc8:	46fffe00 	.word	0x46fffe00
   35dcc:	00000000 	.word	0x00000000
   35dd0:	3b000000 	.word	0x3b000000
   35dd4:	3a800000 	.word	0x3a800000
   35dd8:	37800000 	.word	0x37800000
   35ddc:	3283126f 	.word	0x3283126f
   35de0:	38000000 	.word	0x38000000
   35de4:	3303126f 	.word	0x3303126f
   35de8:	3b800000 	.word	0x3b800000

00035dec <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
  return aligned_size;
}

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
  switch (type) {
   35dec:	3801      	subs	r0, #1
   35dee:	280f      	cmp	r0, #15
   35df0:	d819      	bhi.n	35e26 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x3a>
   35df2:	e8df f000 	tbb	[pc, r0]
   35df6:	1010      	.short	0x1010
   35df8:	0c18080c 	.word	0x0c18080c
   35dfc:	140c0814 	.word	0x140c0814
   35e00:	18081a08 	.word	0x18081a08
   35e04:	1018      	.short	0x1018
      break;
    case kTfLiteFloat32:
      *size = sizeof(float);
      break;
    case kTfLiteFloat64:
      *size = sizeof(double);
   35e06:	2308      	movs	r3, #8
   35e08:	600b      	str	r3, [r1, #0]
      *size = sizeof(double) * 2;
      break;
    default:
      return kTfLiteError;
  }
  return kTfLiteOk;
   35e0a:	2000      	movs	r0, #0
      break;
   35e0c:	4770      	bx	lr
      *size = sizeof(uint8_t);
   35e0e:	2301      	movs	r3, #1
   35e10:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   35e12:	2000      	movs	r0, #0
      break;
   35e14:	4770      	bx	lr
      *size = sizeof(float);
   35e16:	2304      	movs	r3, #4
   35e18:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   35e1a:	2000      	movs	r0, #0
      break;
   35e1c:	4770      	bx	lr
      *size = sizeof(int16_t);
   35e1e:	2302      	movs	r3, #2
   35e20:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   35e22:	2000      	movs	r0, #0
      break;
   35e24:	4770      	bx	lr
  switch (type) {
   35e26:	2001      	movs	r0, #1
}
   35e28:	4770      	bx	lr
      *size = sizeof(double) * 2;
   35e2a:	2310      	movs	r3, #16
   35e2c:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   35e2e:	2000      	movs	r0, #0
      break;
   35e30:	4770      	bx	lr
   35e32:	bf00      	nop

00035e34 <_ZN6tflite12ElementCountERK14TfLiteIntArray>:
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/kernels/op_macros.h"

namespace tflite {

int ElementCount(const TfLiteIntArray& dims) {
   35e34:	b410      	push	{r4}
  int result = 1;
  for (int i = 0; i < dims.size; ++i) {
   35e36:	6804      	ldr	r4, [r0, #0]
   35e38:	2c00      	cmp	r4, #0
   35e3a:	dd0c      	ble.n	35e56 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x22>
   35e3c:	4602      	mov	r2, r0
   35e3e:	2300      	movs	r3, #0
  int result = 1;
   35e40:	2001      	movs	r0, #1
    result *= dims.data[i];
   35e42:	f852 1f04 	ldr.w	r1, [r2, #4]!
  for (int i = 0; i < dims.size; ++i) {
   35e46:	3301      	adds	r3, #1
   35e48:	42a3      	cmp	r3, r4
    result *= dims.data[i];
   35e4a:	fb01 f000 	mul.w	r0, r1, r0
  for (int i = 0; i < dims.size; ++i) {
   35e4e:	d1f8      	bne.n	35e42 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0xe>
  }
  return result;
}
   35e50:	f85d 4b04 	ldr.w	r4, [sp], #4
   35e54:	4770      	bx	lr
  int result = 1;
   35e56:	2001      	movs	r0, #1
}
   35e58:	f85d 4b04 	ldr.w	r4, [sp], #4
   35e5c:	4770      	bx	lr
   35e5e:	bf00      	nop

00035e60 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_.isra.0>:

  return kTfLiteOk;
}

namespace {
void CalculateActivationRangeQuantizedImpl(TfLiteFusedActivation activation,
   35e60:	b570      	push	{r4, r5, r6, lr}

  auto quantize = [scale, zero_point](float f) {
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
  };

  if (activation == kTfLiteActRelu) {
   35e62:	2801      	cmp	r0, #1
void CalculateActivationRangeQuantizedImpl(TfLiteFusedActivation activation,
   35e64:	ed2d 8b02 	vpush	{d8}
   35e68:	460d      	mov	r5, r1
   35e6a:	eeb0 8a40 	vmov.f32	s16, s0
   35e6e:	4616      	mov	r6, r2
   35e70:	461c      	mov	r4, r3
  if (activation == kTfLiteActRelu) {
   35e72:	d02d      	beq.n	35ed0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_.isra.0+0x70>
    *act_min = std::max(qmin, quantize(0.0));
    *act_max = qmax;
  } else if (activation == kTfLiteActRelu6) {
   35e74:	2803      	cmp	r0, #3
   35e76:	d008      	beq.n	35e8a <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_.isra.0+0x2a>
    *act_min = std::max(qmin, quantize(0.0));
    *act_max = std::min(qmax, quantize(6.0));
  } else if (activation == kTfLiteActReluN1To1) {
   35e78:	2802      	cmp	r0, #2
   35e7a:	d03e      	beq.n	35efa <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_.isra.0+0x9a>
    *act_min = std::max(qmin, quantize(-1.0));
    *act_max = std::min(qmax, quantize(1.0));
  } else {
    *act_min = qmin;
   35e7c:	9b06      	ldr	r3, [sp, #24]
   35e7e:	6019      	str	r1, [r3, #0]
    *act_max = qmax;
   35e80:	9b07      	ldr	r3, [sp, #28]
  }
}
   35e82:	ecbd 8b02 	vpop	{d8}
    *act_max = qmax;
   35e86:	601a      	str	r2, [r3, #0]
}
   35e88:	bd70      	pop	{r4, r5, r6, pc}
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
   35e8a:	ed9f 0a20 	vldr	s0, [pc, #128]	; 35f0c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_.isra.0+0xac>
   35e8e:	ee80 0a08 	vdiv.f32	s0, s0, s16
   35e92:	f7f2 fdc7 	bl	28a24 <roundf>
   35e96:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
   35e9a:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    *act_min = std::max(qmin, quantize(-1.0));
   35e9e:	9b06      	ldr	r3, [sp, #24]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
   35ea0:	ee17 1a10 	vmov	r1, s14
   35ea4:	4421      	add	r1, r4
    *act_min = std::max(qmin, quantize(-1.0));
   35ea6:	42a9      	cmp	r1, r5
   35ea8:	bfb8      	it	lt
   35eaa:	4629      	movlt	r1, r5
   35eac:	ee87 0a88 	vdiv.f32	s0, s15, s16
   35eb0:	6019      	str	r1, [r3, #0]
   35eb2:	f7f2 fdb7 	bl	28a24 <roundf>
    *act_max = std::min(qmax, quantize(1.0));
   35eb6:	9b07      	ldr	r3, [sp, #28]
}
   35eb8:	ecbd 8b02 	vpop	{d8}
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
   35ebc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   35ec0:	ee17 2a90 	vmov	r2, s15
   35ec4:	4422      	add	r2, r4
    *act_max = std::min(qmax, quantize(1.0));
   35ec6:	42b2      	cmp	r2, r6
   35ec8:	bfa8      	it	ge
   35eca:	4632      	movge	r2, r6
   35ecc:	601a      	str	r2, [r3, #0]
}
   35ece:	bd70      	pop	{r4, r5, r6, pc}
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
   35ed0:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 35f0c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_.isra.0+0xac>
   35ed4:	ee80 0a08 	vdiv.f32	s0, s0, s16
   35ed8:	f7f2 fda4 	bl	28a24 <roundf>
    *act_min = std::max(qmin, quantize(0.0));
   35edc:	9b06      	ldr	r3, [sp, #24]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
   35ede:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   35ee2:	ee17 1a90 	vmov	r1, s15
   35ee6:	4421      	add	r1, r4
    *act_min = std::max(qmin, quantize(0.0));
   35ee8:	42a9      	cmp	r1, r5
   35eea:	bfb8      	it	lt
   35eec:	4629      	movlt	r1, r5
   35eee:	6019      	str	r1, [r3, #0]
    *act_max = qmax;
   35ef0:	9b07      	ldr	r3, [sp, #28]
}
   35ef2:	ecbd 8b02 	vpop	{d8}
    *act_max = qmax;
   35ef6:	601e      	str	r6, [r3, #0]
}
   35ef8:	bd70      	pop	{r4, r5, r6, pc}
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
   35efa:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   35efe:	ee80 0a08 	vdiv.f32	s0, s0, s16
   35f02:	f7f2 fd8f 	bl	28a24 <roundf>
   35f06:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   35f0a:	e7c6      	b.n	35e9a <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_.isra.0+0x3a>
   35f0c:	00000000 	.word	0x00000000

00035f10 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
  const int tensor_index = ValidateTensorIndexing(
   35f10:	6809      	ldr	r1, [r1, #0]
  if (index >= 0 && index < max_size) {
   35f12:	2a00      	cmp	r2, #0
                             const TfLiteNode* node, int index) {
   35f14:	b410      	push	{r4}
  const int tensor_index = ValidateTensorIndexing(
   35f16:	f851 4b04 	ldr.w	r4, [r1], #4
  if (index >= 0 && index < max_size) {
   35f1a:	db10      	blt.n	35f3e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x2e>
   35f1c:	42a2      	cmp	r2, r4
   35f1e:	da0e      	bge.n	35f3e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x2e>
    const int tensor_index = tensor_indices[index];
   35f20:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  if (tensor_index < 0) {
   35f24:	2900      	cmp	r1, #0
   35f26:	db0a      	blt.n	35f3e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x2e>
  if (context->tensors != nullptr) {
   35f28:	6882      	ldr	r2, [r0, #8]
   35f2a:	b122      	cbz	r2, 35f36 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x26>
    return &context->tensors[tensor_index];
   35f2c:	eb02 1041 	add.w	r0, r2, r1, lsl #5
}
   35f30:	f85d 4b04 	ldr.w	r4, [sp], #4
   35f34:	4770      	bx	lr
    return context->GetTensor(context, tensor_index);
   35f36:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
   35f38:	f85d 4b04 	ldr.w	r4, [sp], #4
    return context->GetTensor(context, tensor_index);
   35f3c:	4718      	bx	r3
    return nullptr;
   35f3e:	2000      	movs	r0, #0
}
   35f40:	f85d 4b04 	ldr.w	r4, [sp], #4
   35f44:	4770      	bx	lr
   35f46:	bf00      	nop

00035f48 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  const int tensor_index = ValidateTensorIndexing(
   35f48:	6849      	ldr	r1, [r1, #4]
  if (index >= 0 && index < max_size) {
   35f4a:	2a00      	cmp	r2, #0
                        int index) {
   35f4c:	b410      	push	{r4}
  const int tensor_index = ValidateTensorIndexing(
   35f4e:	f851 4b04 	ldr.w	r4, [r1], #4
  if (index >= 0 && index < max_size) {
   35f52:	db10      	blt.n	35f76 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2e>
   35f54:	4294      	cmp	r4, r2
   35f56:	dd0e      	ble.n	35f76 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2e>
    const int tensor_index = tensor_indices[index];
   35f58:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  if (tensor_index < 0) {
   35f5c:	2900      	cmp	r1, #0
   35f5e:	db0a      	blt.n	35f76 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2e>
  if (context->tensors != nullptr) {
   35f60:	6882      	ldr	r2, [r0, #8]
   35f62:	b122      	cbz	r2, 35f6e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x26>
    return &context->tensors[tensor_index];
   35f64:	eb02 1041 	add.w	r0, r2, r1, lsl #5
}
   35f68:	f85d 4b04 	ldr.w	r4, [sp], #4
   35f6c:	4770      	bx	lr
    return context->GetTensor(context, tensor_index);
   35f6e:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
   35f70:	f85d 4b04 	ldr.w	r4, [sp], #4
    return context->GetTensor(context, tensor_index);
   35f74:	4718      	bx	r3
    return nullptr;
   35f76:	2000      	movs	r0, #0
}
   35f78:	f85d 4b04 	ldr.w	r4, [sp], #4
   35f7c:	4770      	bx	lr
   35f7e:	bf00      	nop

00035f80 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
   35f80:	6809      	ldr	r1, [r1, #0]
   35f82:	2a00      	cmp	r2, #0
   35f84:	b410      	push	{r4}
   35f86:	f851 4b04 	ldr.w	r4, [r1], #4
   35f8a:	db10      	blt.n	35fae <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei+0x2e>
   35f8c:	42a2      	cmp	r2, r4
   35f8e:	da0e      	bge.n	35fae <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei+0x2e>
   35f90:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   35f94:	2900      	cmp	r1, #0
   35f96:	db0a      	blt.n	35fae <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei+0x2e>
   35f98:	6882      	ldr	r2, [r0, #8]
   35f9a:	b122      	cbz	r2, 35fa6 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei+0x26>
   35f9c:	eb02 1041 	add.w	r0, r2, r1, lsl #5
   35fa0:	f85d 4b04 	ldr.w	r4, [sp], #4
   35fa4:	4770      	bx	lr
   35fa6:	6d03      	ldr	r3, [r0, #80]	; 0x50
   35fa8:	f85d 4b04 	ldr.w	r4, [sp], #4
   35fac:	4718      	bx	r3
   35fae:	2000      	movs	r0, #0
   35fb0:	f85d 4b04 	ldr.w	r4, [sp], #4
   35fb4:	4770      	bx	lr
   35fb6:	bf00      	nop

00035fb8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>:
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
   35fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35fbc:	ed2d 8b04 	vpush	{d8-d9}
   35fc0:	460c      	mov	r4, r1
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
   35fc2:	7809      	ldrb	r1, [r1, #0]
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
   35fc4:	b089      	sub	sp, #36	; 0x24
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
   35fc6:	2901      	cmp	r1, #1
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
   35fc8:	9302      	str	r3, [sp, #8]
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
   35fca:	d103      	bne.n	35fd4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1c>
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
   35fcc:	7816      	ldrb	r6, [r2, #0]
   35fce:	2e01      	cmp	r6, #1
   35fd0:	4615      	mov	r5, r2
   35fd2:	d006      	beq.n	35fe2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a>
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
   35fd4:	2601      	movs	r6, #1
}
   35fd6:	4630      	mov	r0, r6
   35fd8:	b009      	add	sp, #36	; 0x24
   35fda:	ecbd 8b04 	vpop	{d8-d9}
   35fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  const auto* affine_quantization =
   35fe2:	6853      	ldr	r3, [r2, #4]
  TF_LITE_ENSURE(context, affine_quantization);
   35fe4:	2b00      	cmp	r3, #0
   35fe6:	d0f5      	beq.n	35fd4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1c>
  TF_LITE_ENSURE(context, affine_quantization->scale);
   35fe8:	681f      	ldr	r7, [r3, #0]
   35fea:	2f00      	cmp	r7, #0
   35fec:	d0f2      	beq.n	35fd4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1c>
  const bool is_per_channel = affine_quantization->scale->size > 1;
   35fee:	683a      	ldr	r2, [r7, #0]
  if (is_per_channel) {
   35ff0:	2a01      	cmp	r2, #1
   35ff2:	dd59      	ble.n	360a8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xf0>
    TF_LITE_ENSURE(context,
   35ff4:	7f21      	ldrb	r1, [r4, #28]
   35ff6:	2909      	cmp	r1, #9
   35ff8:	d001      	beq.n	35ffe <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x46>
   35ffa:	2907      	cmp	r1, #7
   35ffc:	d1ea      	bne.n	35fd4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1c>
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
   35ffe:	7f29      	ldrb	r1, [r5, #28]
   36000:	2909      	cmp	r1, #9
   36002:	d1e7      	bne.n	35fd4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1c>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
   36004:	991e      	ldr	r1, [sp, #120]	; 0x78
   36006:	4291      	cmp	r1, r2
   36008:	d1e4      	bne.n	35fd4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1c>
    TF_LITE_ENSURE_EQ(
   3600a:	689a      	ldr	r2, [r3, #8]
   3600c:	696b      	ldr	r3, [r5, #20]
   3600e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   36012:	685b      	ldr	r3, [r3, #4]
   36014:	4299      	cmp	r1, r3
   36016:	d1dd      	bne.n	35fd4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1c>
    const double effective_output_scale = static_cast<double>(input_scale) *
   36018:	68a0      	ldr	r0, [r4, #8]
   3601a:	f7e2 fd23 	bl	18a64 <__aeabi_f2d>
                                          static_cast<double>(output_scale);
   3601e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    const double effective_output_scale = static_cast<double>(input_scale) *
   36020:	ec41 0b18 	vmov	d8, r0, r1
                                          static_cast<double>(output_scale);
   36024:	6898      	ldr	r0, [r3, #8]
   36026:	f7e2 fd1d 	bl	18a64 <__aeabi_f2d>
   3602a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   3602c:	9505      	str	r5, [sp, #20]
   3602e:	f1a3 0804 	sub.w	r8, r3, #4
   36032:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   36034:	e9cd 6403 	strd	r6, r4, [sp, #12]
  const float* filter_scales = affine_quantization->scale->data;
   36038:	f107 0904 	add.w	r9, r7, #4
                                          static_cast<double>(output_scale);
   3603c:	ec41 0b19 	vmov	d9, r0, r1
   36040:	1f1f      	subs	r7, r3, #4
   36042:	ec55 4b18 	vmov	r4, r5, d8
   36046:	ab06      	add	r3, sp, #24
   36048:	f04f 0a00 	mov.w	sl, #0
   3604c:	f10d 0b1c 	add.w	fp, sp, #28
   36050:	461e      	mov	r6, r3
    const double filter_scale = static_cast<double>(scale);
   36052:	f859 0b04 	ldr.w	r0, [r9], #4
   36056:	f7e2 fd05 	bl	18a64 <__aeabi_f2d>
    const double effective_output_scale = static_cast<double>(input_scale) *
   3605a:	4622      	mov	r2, r4
   3605c:	462b      	mov	r3, r5
   3605e:	f7e2 fd59 	bl	18b14 <__aeabi_dmul>
   36062:	ec53 2b19 	vmov	r2, r3, d9
   36066:	f7e2 fe7f 	bl	18d68 <__aeabi_ddiv>
   3606a:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
   3606e:	4659      	mov	r1, fp
   36070:	4630      	mov	r0, r6
   36072:	f000 f9b3 	bl	363dc <_ZN6tflite18QuantizeMultiplierEdPlPi>
    per_channel_multiplier[i] = significand;
   36076:	9b06      	ldr	r3, [sp, #24]
   36078:	f848 3f04 	str.w	r3, [r8, #4]!
    per_channel_shift[i] = channel_shift;
   3607c:	9b07      	ldr	r3, [sp, #28]
   3607e:	f847 3f04 	str.w	r3, [r7, #4]!
  for (int i = 0; i < num_channels; ++i) {
   36082:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   36084:	f10a 0a01 	add.w	sl, sl, #1
   36088:	4553      	cmp	r3, sl
   3608a:	dce2      	bgt.n	36052 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x9a>
   3608c:	e9dd 6403 	ldrd	r6, r4, [sp, #12]
   36090:	9d05      	ldr	r5, [sp, #20]
  if (input->type == kTfLiteUInt8) {
   36092:	7f23      	ldrb	r3, [r4, #28]
   36094:	2b03      	cmp	r3, #3
   36096:	d047      	beq.n	36128 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x170>
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
   36098:	2b09      	cmp	r3, #9
   3609a:	f000 80a3 	beq.w	361e4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x22c>
   3609e:	2b07      	cmp	r3, #7
   360a0:	f000 80a0 	beq.w	361e4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x22c>
  return kTfLiteOk;
   360a4:	2600      	movs	r6, #0
   360a6:	e796      	b.n	35fd6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1e>
  const float output_scale = output->params.scale;
   360a8:	9b16      	ldr	r3, [sp, #88]	; 0x58
  const float input_scale = input->params.scale;
   360aa:	68a0      	ldr	r0, [r4, #8]
  const float output_scale = output->params.scale;
   360ac:	f8d3 8008 	ldr.w	r8, [r3, #8]
  for (int i = 0; i < num_channels; ++i) {
   360b0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   360b2:	2b00      	cmp	r3, #0
   360b4:	dded      	ble.n	36092 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xda>
    const double effective_output_scale = static_cast<double>(input_scale) *
   360b6:	f7e2 fcd5 	bl	18a64 <__aeabi_f2d>
   360ba:	4602      	mov	r2, r0
   360bc:	460b      	mov	r3, r1
                                          static_cast<double>(output_scale);
   360be:	4640      	mov	r0, r8
    const double effective_output_scale = static_cast<double>(input_scale) *
   360c0:	ec43 2b18 	vmov	d8, r2, r3
                                          static_cast<double>(output_scale);
   360c4:	f7e2 fcce 	bl	18a64 <__aeabi_f2d>
   360c8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   360ca:	9505      	str	r5, [sp, #20]
   360cc:	f1a3 0a04 	sub.w	sl, r3, #4
   360d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   360d2:	e9cd 6403 	strd	r6, r4, [sp, #12]
   360d6:	f1a3 0804 	sub.w	r8, r3, #4
   360da:	ec41 0b19 	vmov	d9, r0, r1
   360de:	ab06      	add	r3, sp, #24
   360e0:	ec55 4b18 	vmov	r4, r5, d8
   360e4:	f04f 0900 	mov.w	r9, #0
   360e8:	f10d 0b1c 	add.w	fp, sp, #28
   360ec:	461e      	mov	r6, r3
    const double filter_scale = static_cast<double>(scale);
   360ee:	6878      	ldr	r0, [r7, #4]
   360f0:	f7e2 fcb8 	bl	18a64 <__aeabi_f2d>
    const double effective_output_scale = static_cast<double>(input_scale) *
   360f4:	4622      	mov	r2, r4
   360f6:	462b      	mov	r3, r5
   360f8:	f7e2 fd0c 	bl	18b14 <__aeabi_dmul>
   360fc:	ec53 2b19 	vmov	r2, r3, d9
   36100:	f7e2 fe32 	bl	18d68 <__aeabi_ddiv>
   36104:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
   36108:	4659      	mov	r1, fp
   3610a:	4630      	mov	r0, r6
   3610c:	f000 f966 	bl	363dc <_ZN6tflite18QuantizeMultiplierEdPlPi>
    per_channel_multiplier[i] = significand;
   36110:	9b06      	ldr	r3, [sp, #24]
   36112:	f84a 3f04 	str.w	r3, [sl, #4]!
    per_channel_shift[i] = channel_shift;
   36116:	9b07      	ldr	r3, [sp, #28]
   36118:	f848 3f04 	str.w	r3, [r8, #4]!
  for (int i = 0; i < num_channels; ++i) {
   3611c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   3611e:	f109 0901 	add.w	r9, r9, #1
   36122:	454b      	cmp	r3, r9
   36124:	dce3      	bgt.n	360ee <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x136>
   36126:	e7b1      	b.n	3608c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xd4>
                                     static_cast<double>(filter->params.scale);
   36128:	edd5 8a02 	vldr	s17, [r5, #8]
  if (bias) {
   3612c:	9d02      	ldr	r5, [sp, #8]
  const double input_product_scale = static_cast<double>(input->params.scale) *
   3612e:	ed94 8a02 	vldr	s16, [r4, #8]
  if (bias) {
   36132:	b37d      	cbz	r5, 36194 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1dc>
  const double input_product_scale = static_cast<double>(input->params.scale) *
   36134:	ee18 0a10 	vmov	r0, s16
   36138:	f7e2 fc94 	bl	18a64 <__aeabi_f2d>
   3613c:	4680      	mov	r8, r0
                                     static_cast<double>(filter->params.scale);
   3613e:	ee18 0a90 	vmov	r0, s17
  const double input_product_scale = static_cast<double>(input->params.scale) *
   36142:	4689      	mov	r9, r1
                                     static_cast<double>(filter->params.scale);
   36144:	f7e2 fc8e 	bl	18a64 <__aeabi_f2d>
   36148:	4602      	mov	r2, r0
   3614a:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
   3614c:	4640      	mov	r0, r8
   3614e:	4649      	mov	r1, r9
   36150:	f7e2 fce0 	bl	18b14 <__aeabi_dmul>
   36154:	4680      	mov	r8, r0
    const double bias_scale = static_cast<double>(bias->params.scale);
   36156:	68a8      	ldr	r0, [r5, #8]
  const double input_product_scale = static_cast<double>(input->params.scale) *
   36158:	4689      	mov	r9, r1
    const double bias_scale = static_cast<double>(bias->params.scale);
   3615a:	f7e2 fc83 	bl	18a64 <__aeabi_f2d>
   3615e:	4602      	mov	r2, r0
   36160:	460b      	mov	r3, r1
    const double scale_diff = std::abs(input_product_scale - bias_scale);
   36162:	4640      	mov	r0, r8
   36164:	4649      	mov	r1, r9
   36166:	f7e2 fb1d 	bl	187a4 <__aeabi_dsub>
    const double output_scale = static_cast<double>(output->params.scale);
   3616a:	9b16      	ldr	r3, [sp, #88]	; 0x58
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
   3616c:	4680      	mov	r8, r0
   3616e:	6898      	ldr	r0, [r3, #8]
   36170:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
   36174:	f7e2 fc76 	bl	18a64 <__aeabi_f2d>
   36178:	4602      	mov	r2, r0
   3617a:	460b      	mov	r3, r1
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
   3617c:	4640      	mov	r0, r8
   3617e:	4649      	mov	r1, r9
   36180:	f7e2 fdf2 	bl	18d68 <__aeabi_ddiv>
   36184:	a329      	add	r3, pc, #164	; (adr r3, 3622c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x274>)
   36186:	e9d3 2300 	ldrd	r2, r3, [r3]
   3618a:	f7e2 ff3f 	bl	1900c <__aeabi_dcmple>
   3618e:	2800      	cmp	r0, #0
   36190:	f43f af21 	beq.w	35fd6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1e>
      static_cast<double>(input->params.scale * filter->params.scale);
   36194:	ee28 8a28 	vmul.f32	s16, s16, s17
  TF_LITE_ENSURE(context, input_product_scale >= 0);
   36198:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   3619c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   361a0:	f6ff af19 	blt.w	35fd6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1e>
  const double input_product_scale =
   361a4:	ee18 0a10 	vmov	r0, s16
   361a8:	f7e2 fc5c 	bl	18a64 <__aeabi_f2d>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
   361ac:	9b16      	ldr	r3, [sp, #88]	; 0x58
  const double input_product_scale =
   361ae:	4606      	mov	r6, r0
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
   361b0:	6898      	ldr	r0, [r3, #8]
  const double input_product_scale =
   361b2:	460f      	mov	r7, r1
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
   361b4:	f7e2 fc56 	bl	18a64 <__aeabi_f2d>
   361b8:	4602      	mov	r2, r0
   361ba:	460b      	mov	r3, r1
   361bc:	4630      	mov	r0, r6
   361be:	4639      	mov	r1, r7
   361c0:	f7e2 fdd2 	bl	18d68 <__aeabi_ddiv>
   361c4:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
   361c8:	a907      	add	r1, sp, #28
   361ca:	9818      	ldr	r0, [sp, #96]	; 0x60
   361cc:	f000 f906 	bl	363dc <_ZN6tflite18QuantizeMultiplierEdPlPi>
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
   361d0:	7f23      	ldrb	r3, [r4, #28]
    *shift = -exponent;
   361d2:	9a07      	ldr	r2, [sp, #28]
   361d4:	9919      	ldr	r1, [sp, #100]	; 0x64
   361d6:	4252      	negs	r2, r2
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
   361d8:	2b09      	cmp	r3, #9
    *shift = -exponent;
   361da:	600a      	str	r2, [r1, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
   361dc:	d002      	beq.n	361e4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x22c>
   361de:	2b03      	cmp	r3, #3
   361e0:	f47f af5d 	bne.w	3609e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xe6>
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
  int32_t qmin = 0;
  int32_t qmax = 0;
  if (output->type == kTfLiteUInt8) {
   361e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   361e6:	7f1b      	ldrb	r3, [r3, #28]
   361e8:	2b03      	cmp	r3, #3
   361ea:	d019      	beq.n	36220 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x268>
    qmin = std::numeric_limits<uint8_t>::min();
    qmax = std::numeric_limits<uint8_t>::max();
  } else if (output->type == kTfLiteInt8) {
   361ec:	2b09      	cmp	r3, #9
   361ee:	d013      	beq.n	36218 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x260>
    qmin = std::numeric_limits<int8_t>::min();
    qmax = std::numeric_limits<int8_t>::max();
  } else if (output->type == kTfLiteInt16) {
   361f0:	2b07      	cmp	r3, #7
   361f2:	f47f aeef 	bne.w	35fd4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1c>
    qmin = std::numeric_limits<int16_t>::min();
   361f6:	490c      	ldr	r1, [pc, #48]	; (36228 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x270>)
    qmax = std::numeric_limits<int16_t>::max();
   361f8:	f647 72ff 	movw	r2, #32767	; 0x7fff
  } else {
    TF_LITE_ENSURE(context, false);
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
   361fc:	9816      	ldr	r0, [sp, #88]	; 0x58
   361fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
   36200:	ed90 0a02 	vldr	s0, [r0, #8]
   36204:	9817      	ldr	r0, [sp, #92]	; 0x5c
   36206:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
   36208:	68db      	ldr	r3, [r3, #12]
   3620a:	7800      	ldrb	r0, [r0, #0]
   3620c:	9401      	str	r4, [sp, #4]
   3620e:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   36210:	9400      	str	r4, [sp, #0]
   36212:	f7ff fe25 	bl	35e60 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_.isra.0>
   36216:	e745      	b.n	360a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xec>
    qmax = std::numeric_limits<int8_t>::max();
   36218:	227f      	movs	r2, #127	; 0x7f
    qmin = std::numeric_limits<int8_t>::min();
   3621a:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   3621e:	e7ed      	b.n	361fc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x244>
    qmax = std::numeric_limits<uint8_t>::max();
   36220:	22ff      	movs	r2, #255	; 0xff
    qmin = std::numeric_limits<uint8_t>::min();
   36222:	2100      	movs	r1, #0
   36224:	e7ea      	b.n	361fc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x244>
   36226:	bf00      	nop
   36228:	ffff8000 	.word	0xffff8000
   3622c:	47ae147b 	.word	0x47ae147b
   36230:	3f947ae1 	.word	0x3f947ae1
   36234:	00000000 	.word	0x00000000

00036238 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
                                              double* multiplier) {
   36238:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   3623c:	ed2d 8b02 	vpush	{d8}
   36240:	9e08      	ldr	r6, [sp, #32]
  const double input_product_scale = static_cast<double>(input->params.scale) *
   36242:	ed91 8a02 	vldr	s16, [r1, #8]
                                     static_cast<double>(filter->params.scale);
   36246:	edd2 8a02 	vldr	s17, [r2, #8]
  if (bias) {
   3624a:	b373      	cbz	r3, 362aa <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x72>
  const double input_product_scale = static_cast<double>(input->params.scale) *
   3624c:	ee18 0a10 	vmov	r0, s16
   36250:	461c      	mov	r4, r3
   36252:	f7e2 fc07 	bl	18a64 <__aeabi_f2d>
   36256:	4680      	mov	r8, r0
                                     static_cast<double>(filter->params.scale);
   36258:	ee18 0a90 	vmov	r0, s17
  const double input_product_scale = static_cast<double>(input->params.scale) *
   3625c:	4689      	mov	r9, r1
                                     static_cast<double>(filter->params.scale);
   3625e:	f7e2 fc01 	bl	18a64 <__aeabi_f2d>
   36262:	460b      	mov	r3, r1
   36264:	4602      	mov	r2, r0
  const double input_product_scale = static_cast<double>(input->params.scale) *
   36266:	4649      	mov	r1, r9
   36268:	4640      	mov	r0, r8
   3626a:	f7e2 fc53 	bl	18b14 <__aeabi_dmul>
   3626e:	4602      	mov	r2, r0
    const double bias_scale = static_cast<double>(bias->params.scale);
   36270:	68a0      	ldr	r0, [r4, #8]
  const double input_product_scale = static_cast<double>(input->params.scale) *
   36272:	460d      	mov	r5, r1
   36274:	4614      	mov	r4, r2
    const double bias_scale = static_cast<double>(bias->params.scale);
   36276:	f7e2 fbf5 	bl	18a64 <__aeabi_f2d>
   3627a:	4602      	mov	r2, r0
   3627c:	460b      	mov	r3, r1
    const double scale_diff = std::abs(input_product_scale - bias_scale);
   3627e:	4620      	mov	r0, r4
   36280:	4629      	mov	r1, r5
   36282:	f7e2 fa8f 	bl	187a4 <__aeabi_dsub>
   36286:	4604      	mov	r4, r0
    const double output_scale = static_cast<double>(output->params.scale);
   36288:	68b0      	ldr	r0, [r6, #8]
   3628a:	f021 4500 	bic.w	r5, r1, #2147483648	; 0x80000000
   3628e:	f7e2 fbe9 	bl	18a64 <__aeabi_f2d>
   36292:	4602      	mov	r2, r0
   36294:	460b      	mov	r3, r1
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
   36296:	4620      	mov	r0, r4
   36298:	4629      	mov	r1, r5
   3629a:	f7e2 fd65 	bl	18d68 <__aeabi_ddiv>
   3629e:	a316      	add	r3, pc, #88	; (adr r3, 362f8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xc0>)
   362a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   362a4:	f7e2 feb2 	bl	1900c <__aeabi_dcmple>
   362a8:	b1f8      	cbz	r0, 362ea <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb2>
      static_cast<double>(input->params.scale * filter->params.scale);
   362aa:	ee28 8a28 	vmul.f32	s16, s16, s17
  TF_LITE_ENSURE(context, input_product_scale >= 0);
   362ae:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   362b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   362b6:	db18      	blt.n	362ea <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb2>
  const double input_product_scale =
   362b8:	ee18 0a10 	vmov	r0, s16
   362bc:	f7e2 fbd2 	bl	18a64 <__aeabi_f2d>
   362c0:	4604      	mov	r4, r0
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
   362c2:	68b0      	ldr	r0, [r6, #8]
  const double input_product_scale =
   362c4:	460d      	mov	r5, r1
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
   362c6:	f7e2 fbcd 	bl	18a64 <__aeabi_f2d>
   362ca:	4602      	mov	r2, r0
   362cc:	460b      	mov	r3, r1
   362ce:	4620      	mov	r0, r4
   362d0:	4629      	mov	r1, r5
   362d2:	f7e2 fd49 	bl	18d68 <__aeabi_ddiv>
   362d6:	460b      	mov	r3, r1
   362d8:	9909      	ldr	r1, [sp, #36]	; 0x24
}
   362da:	ecbd 8b02 	vpop	{d8}
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
   362de:	4602      	mov	r2, r0
   362e0:	e9c1 2300 	strd	r2, r3, [r1]
  return kTfLiteOk;
   362e4:	2000      	movs	r0, #0
}
   362e6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   362ea:	ecbd 8b02 	vpop	{d8}
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
   362ee:	2001      	movs	r0, #1
}
   362f0:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   362f4:	f3af 8000 	nop.w
   362f8:	47ae147b 	.word	0x47ae147b
   362fc:	3f947ae1 	.word	0x3f947ae1

00036300 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:
                                               int32_t* act_max) {
   36300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (output->type == kTfLiteUInt8) {
   36302:	7f10      	ldrb	r0, [r2, #28]
   36304:	2803      	cmp	r0, #3
                                               int32_t* act_max) {
   36306:	ed2d 8b02 	vpush	{d8}
   3630a:	461c      	mov	r4, r3
  if (output->type == kTfLiteUInt8) {
   3630c:	d035      	beq.n	3637a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7a>
  } else if (output->type == kTfLiteInt8) {
   3630e:	2809      	cmp	r0, #9
   36310:	d018      	beq.n	36344 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x44>
  } else if (output->type == kTfLiteInt16) {
   36312:	2807      	cmp	r0, #7
   36314:	d112      	bne.n	3633c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x3c>
    qmin = std::numeric_limits<int16_t>::min();
   36316:	4f2f      	ldr	r7, [pc, #188]	; (363d4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xd4>)
    qmax = std::numeric_limits<int16_t>::max();
   36318:	f647 76ff 	movw	r6, #32767	; 0x7fff
  if (activation == kTfLiteActRelu) {
   3631c:	2901      	cmp	r1, #1
   3631e:	ed92 8a02 	vldr	s16, [r2, #8]
   36322:	68d5      	ldr	r5, [r2, #12]
   36324:	d017      	beq.n	36356 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x56>
  } else if (activation == kTfLiteActRelu6) {
   36326:	2903      	cmp	r1, #3
   36328:	d02a      	beq.n	36380 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x80>
  } else if (activation == kTfLiteActReluN1To1) {
   3632a:	2902      	cmp	r1, #2
   3632c:	d048      	beq.n	363c0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xc0>
    *act_max = qmax;
   3632e:	9b08      	ldr	r3, [sp, #32]
    *act_min = qmin;
   36330:	6027      	str	r7, [r4, #0]
    *act_max = qmax;
   36332:	601e      	str	r6, [r3, #0]
                                        act_max);
  return kTfLiteOk;
}
   36334:	ecbd 8b02 	vpop	{d8}
  return kTfLiteOk;
   36338:	2000      	movs	r0, #0
}
   3633a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3633c:	ecbd 8b02 	vpop	{d8}
    TF_LITE_ENSURE(context, false);
   36340:	2001      	movs	r0, #1
}
   36342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (activation == kTfLiteActRelu) {
   36344:	2901      	cmp	r1, #1
   36346:	ed92 8a02 	vldr	s16, [r2, #8]
   3634a:	68d5      	ldr	r5, [r2, #12]
    qmax = std::numeric_limits<int8_t>::max();
   3634c:	f04f 067f 	mov.w	r6, #127	; 0x7f
    qmin = std::numeric_limits<int8_t>::min();
   36350:	f06f 077f 	mvn.w	r7, #127	; 0x7f
  if (activation == kTfLiteActRelu) {
   36354:	d1e7      	bne.n	36326 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x26>
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
   36356:	ed9f 0a20 	vldr	s0, [pc, #128]	; 363d8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xd8>
   3635a:	ee80 0a08 	vdiv.f32	s0, s0, s16
   3635e:	f7f2 fb61 	bl	28a24 <roundf>
    *act_max = qmax;
   36362:	9b08      	ldr	r3, [sp, #32]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
   36364:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   36368:	ee17 2a90 	vmov	r2, s15
   3636c:	442a      	add	r2, r5
    *act_min = std::max(qmin, quantize(0.0));
   3636e:	42ba      	cmp	r2, r7
   36370:	bfb8      	it	lt
   36372:	463a      	movlt	r2, r7
   36374:	6022      	str	r2, [r4, #0]
    *act_max = qmax;
   36376:	601e      	str	r6, [r3, #0]
   36378:	e7dc      	b.n	36334 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x34>
    qmax = std::numeric_limits<uint8_t>::max();
   3637a:	26ff      	movs	r6, #255	; 0xff
    qmin = std::numeric_limits<uint8_t>::min();
   3637c:	2700      	movs	r7, #0
   3637e:	e7cd      	b.n	3631c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x1c>
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
   36380:	ed9f 0a15 	vldr	s0, [pc, #84]	; 363d8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xd8>
   36384:	ee80 0a08 	vdiv.f32	s0, s0, s16
   36388:	f7f2 fb4c 	bl	28a24 <roundf>
   3638c:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
   36390:	eebd 7ac0 	vcvt.s32.f32	s14, s0
   36394:	ee87 0a88 	vdiv.f32	s0, s15, s16
   36398:	ee17 2a10 	vmov	r2, s14
   3639c:	442a      	add	r2, r5
    *act_min = std::max(qmin, quantize(-1.0));
   3639e:	42ba      	cmp	r2, r7
   363a0:	bfb8      	it	lt
   363a2:	463a      	movlt	r2, r7
   363a4:	6022      	str	r2, [r4, #0]
   363a6:	f7f2 fb3d 	bl	28a24 <roundf>
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
   363aa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   363ae:	ee10 3a10 	vmov	r3, s0
   363b2:	442b      	add	r3, r5
    *act_max = std::min(qmax, quantize(1.0));
   363b4:	429e      	cmp	r6, r3
   363b6:	bfa8      	it	ge
   363b8:	461e      	movge	r6, r3
   363ba:	9b08      	ldr	r3, [sp, #32]
   363bc:	601e      	str	r6, [r3, #0]
   363be:	e7b9      	b.n	36334 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x34>
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
   363c0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   363c4:	ee80 0a08 	vdiv.f32	s0, s0, s16
   363c8:	f7f2 fb2c 	bl	28a24 <roundf>
   363cc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   363d0:	e7de      	b.n	36390 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x90>
   363d2:	bf00      	nop
   363d4:	ffff8000 	.word	0xffff8000
   363d8:	00000000 	.word	0x00000000

000363dc <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
   363dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   363e0:	ec57 6b10 	vmov	r6, r7, d0
   363e4:	4680      	mov	r8, r0
   363e6:	460d      	mov	r5, r1
  if (double_multiplier == 0.) {
   363e8:	ee10 0a10 	vmov	r0, s0
   363ec:	2200      	movs	r2, #0
   363ee:	2300      	movs	r3, #0
   363f0:	4639      	mov	r1, r7
   363f2:	f7e2 fdf7 	bl	18fe4 <__aeabi_dcmpeq>
   363f6:	b128      	cbz	r0, 36404 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x28>
    *quantized_multiplier = 0;
   363f8:	2300      	movs	r3, #0
   363fa:	f8c8 3000 	str.w	r3, [r8]
    *shift = 0;
   363fe:	602b      	str	r3, [r5, #0]
  if (*shift < -31) {
    *shift = 0;
    q_fixed = 0;
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
}
   36400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  const double q = std::frexp(double_multiplier, shift);
   36404:	ec47 6b10 	vmov	d0, r6, r7
   36408:	4604      	mov	r4, r0
   3640a:	4628      	mov	r0, r5
   3640c:	f001 fd72 	bl	37ef4 <frexp>
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
   36410:	4b13      	ldr	r3, [pc, #76]	; (36460 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x84>)
   36412:	2200      	movs	r2, #0
  const double q = std::frexp(double_multiplier, shift);
   36414:	ec51 0b10 	vmov	r0, r1, d0
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
   36418:	f7e2 fb7c 	bl	18b14 <__aeabi_dmul>
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
   3641c:	ec41 0b10 	vmov	d0, r0, r1
   36420:	f001 fd9e 	bl	37f60 <round>
   36424:	ec51 0b10 	vmov	r0, r1, d0
   36428:	f7e8 ffe0 	bl	1f3ec <__aeabi_d2lz>
  TFLITE_CHECK(q_fixed <= (1ll << 31));
   3642c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   36430:	4282      	cmp	r2, r0
   36432:	eb74 0601 	sbcs.w	r6, r4, r1
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
   36436:	4603      	mov	r3, r0
  TFLITE_CHECK(q_fixed <= (1ll << 31));
   36438:	db10      	blt.n	3645c <_ZN6tflite18QuantizeMultiplierEdPlPi+0x80>
  if (q_fixed == (1ll << 31)) {
   3643a:	42a1      	cmp	r1, r4
   3643c:	bf08      	it	eq
   3643e:	4290      	cmpeq	r0, r2
    ++*shift;
   36440:	682a      	ldr	r2, [r5, #0]
   36442:	bf02      	ittt	eq
   36444:	3201      	addeq	r2, #1
    q_fixed /= 2;
   36446:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
    ++*shift;
   3644a:	602a      	streq	r2, [r5, #0]
  if (*shift < -31) {
   3644c:	321f      	adds	r2, #31
    *shift = 0;
   3644e:	bfbc      	itt	lt
   36450:	2300      	movlt	r3, #0
   36452:	602b      	strlt	r3, [r5, #0]
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
   36454:	f8c8 3000 	str.w	r3, [r8]
}
   36458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TFLITE_CHECK(q_fixed <= (1ll << 31));
   3645c:	f7f5 fd9e 	bl	2bf9c <abort>
   36460:	41e00000 	.word	0x41e00000
   36464:	00000000 	.word	0x00000000

00036468 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
   36468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min<double>(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
   3646c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   36470:	fa23 f000 	lsr.w	r0, r3, r0
                              int32_t* quantized_multiplier, int* left_shift) {
   36474:	ec57 6b11 	vmov	r6, r7, d1
   36478:	ec59 8b10 	vmov	r8, r9, d0
   3647c:	4614      	mov	r4, r2
   3647e:	460d      	mov	r5, r1
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
   36480:	f7e2 fade 	bl	18a40 <__aeabi_i2d>
   36484:	4632      	mov	r2, r6
   36486:	463b      	mov	r3, r7
   36488:	4606      	mov	r6, r0
   3648a:	460f      	mov	r7, r1
   3648c:	4640      	mov	r0, r8
   3648e:	4649      	mov	r1, r9
   36490:	f7e2 fb40 	bl	18b14 <__aeabi_dmul>
   36494:	4602      	mov	r2, r0
   36496:	460b      	mov	r3, r1
   36498:	4630      	mov	r0, r6
   3649a:	4639      	mov	r1, r7
   3649c:	f7e2 fb3a 	bl	18b14 <__aeabi_dmul>
      if (__b < __a)
   364a0:	a329      	add	r3, pc, #164	; (adr r3, 36548 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0xe0>)
   364a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   364a6:	4606      	mov	r6, r0
   364a8:	460f      	mov	r7, r1
   364aa:	f7e2 fdc3 	bl	19034 <__aeabi_dcmpgt>
   364ae:	b9a8      	cbnz	r0, 364dc <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x74>
  TFLITE_CHECK_GT(double_multiplier, 1.);
   364b0:	4680      	mov	r8, r0
   364b2:	4b27      	ldr	r3, [pc, #156]	; (36550 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0xe8>)
   364b4:	2200      	movs	r2, #0
   364b6:	4630      	mov	r0, r6
   364b8:	4639      	mov	r1, r7
   364ba:	f7e2 fdbb 	bl	19034 <__aeabi_dcmpgt>
   364be:	2800      	cmp	r0, #0
   364c0:	d039      	beq.n	36536 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0xce>
  if (double_multiplier == 0.) {
   364c2:	2200      	movs	r2, #0
   364c4:	2300      	movs	r3, #0
   364c6:	4630      	mov	r0, r6
   364c8:	4639      	mov	r1, r7
   364ca:	f7e2 fd8b 	bl	18fe4 <__aeabi_dcmpeq>
   364ce:	b140      	cbz	r0, 364e2 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x7a>
    *quantized_multiplier = 0;
   364d0:	f8c5 8000 	str.w	r8, [r5]
    *shift = 0;
   364d4:	f8c4 8000 	str.w	r8, [r4]
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
                                   quantized_multiplier, left_shift);
}
   364d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return __b;
   364dc:	a71a      	add	r7, pc, #104	; (adr r7, 36548 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0xe0>)
   364de:	e9d7 6700 	ldrd	r6, r7, [r7]
  const double q = std::frexp(double_multiplier, shift);
   364e2:	ec47 6b10 	vmov	d0, r6, r7
   364e6:	4620      	mov	r0, r4
   364e8:	f001 fd04 	bl	37ef4 <frexp>
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
   364ec:	4b19      	ldr	r3, [pc, #100]	; (36554 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0xec>)
   364ee:	2200      	movs	r2, #0
  const double q = std::frexp(double_multiplier, shift);
   364f0:	ec51 0b10 	vmov	r0, r1, d0
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
   364f4:	f7e2 fb0e 	bl	18b14 <__aeabi_dmul>
   364f8:	ec41 0b10 	vmov	d0, r0, r1
   364fc:	f001 fd30 	bl	37f60 <round>
   36500:	ec51 0b10 	vmov	r0, r1, d0
   36504:	f7e8 ff72 	bl	1f3ec <__aeabi_d2lz>
  TFLITE_CHECK(q_fixed <= (1ll << 31));
   36508:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   3650c:	2300      	movs	r3, #0
   3650e:	4282      	cmp	r2, r0
   36510:	eb73 0701 	sbcs.w	r7, r3, r1
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
   36514:	4606      	mov	r6, r0
  TFLITE_CHECK(q_fixed <= (1ll << 31));
   36516:	db0e      	blt.n	36536 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0xce>
  if (q_fixed == (1ll << 31)) {
   36518:	4299      	cmp	r1, r3
   3651a:	bf08      	it	eq
   3651c:	4290      	cmpeq	r0, r2
    ++*shift;
   3651e:	6823      	ldr	r3, [r4, #0]
   36520:	bf02      	ittt	eq
   36522:	3301      	addeq	r3, #1
    q_fixed /= 2;
   36524:	f04f 4680 	moveq.w	r6, #1073741824	; 0x40000000
    ++*shift;
   36528:	6023      	streq	r3, [r4, #0]
  if (*shift < -31) {
   3652a:	f113 0f1f 	cmn.w	r3, #31
   3652e:	db04      	blt.n	3653a <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0xd2>
  TFLITE_CHECK_GE(*left_shift, 0);
   36530:	2b00      	cmp	r3, #0
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
   36532:	602e      	str	r6, [r5, #0]
  TFLITE_CHECK_GE(*left_shift, 0);
   36534:	dad0      	bge.n	364d8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x70>
  TFLITE_CHECK_GT(double_multiplier, 1.);
   36536:	f7f5 fd31 	bl	2bf9c <abort>
    *shift = 0;
   3653a:	2300      	movs	r3, #0
   3653c:	6023      	str	r3, [r4, #0]
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
   3653e:	602b      	str	r3, [r5, #0]
}
   36540:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   36544:	f3af 8000 	nop.w
   36548:	ffc00000 	.word	0xffc00000
   3654c:	41dfffff 	.word	0x41dfffff
   36550:	3ff00000 	.word	0x3ff00000
   36554:	41e00000 	.word	0x41e00000

00036558 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
   36558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
   3655c:	2401      	movs	r4, #1
                         int total_signed_bits) {
   3655e:	4607      	mov	r7, r0
      1.0 * ((1 << input_integer_bits) - 1) *
   36560:	fa04 f000 	lsl.w	r0, r4, r0
   36564:	3801      	subs	r0, #1
                         int total_signed_bits) {
   36566:	460e      	mov	r6, r1
   36568:	4615      	mov	r5, r2
      1.0 * ((1 << input_integer_bits) - 1) *
   3656a:	f7e2 fa69 	bl	18a40 <__aeabi_i2d>
      (1ll << (total_signed_bits - input_integer_bits)) /
   3656e:	1bed      	subs	r5, r5, r7
      1.0 * ((1 << input_integer_bits) - 1) *
   36570:	4689      	mov	r9, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
   36572:	f1c5 0320 	rsb	r3, r5, #32
   36576:	f1a5 0120 	sub.w	r1, r5, #32
   3657a:	fa24 f303 	lsr.w	r3, r4, r3
   3657e:	fa04 f101 	lsl.w	r1, r4, r1
      1.0 * ((1 << input_integer_bits) - 1) *
   36582:	4680      	mov	r8, r0
   36584:	4319      	orrs	r1, r3
   36586:	fa04 f005 	lsl.w	r0, r4, r5
   3658a:	f7e2 fa95 	bl	18ab8 <__aeabi_l2d>
   3658e:	4602      	mov	r2, r0
   36590:	460b      	mov	r3, r1
   36592:	4640      	mov	r0, r8
   36594:	4649      	mov	r1, r9
   36596:	f7e2 fabd 	bl	18b14 <__aeabi_dmul>
      (1ll << input_left_shift);
   3659a:	f1c6 0320 	rsb	r3, r6, #32
      1.0 * ((1 << input_integer_bits) - 1) *
   3659e:	4689      	mov	r9, r1
      (1ll << input_left_shift);
   365a0:	f1a6 0120 	sub.w	r1, r6, #32
   365a4:	fa24 f303 	lsr.w	r3, r4, r3
   365a8:	fa04 f101 	lsl.w	r1, r4, r1
      1.0 * ((1 << input_integer_bits) - 1) *
   365ac:	4680      	mov	r8, r0
      (1ll << (total_signed_bits - input_integer_bits)) /
   365ae:	4319      	orrs	r1, r3
   365b0:	fa04 f006 	lsl.w	r0, r4, r6
   365b4:	f7e2 fa80 	bl	18ab8 <__aeabi_l2d>
   365b8:	4602      	mov	r2, r0
   365ba:	460b      	mov	r3, r1
  const double max_input_rescaled =
   365bc:	4640      	mov	r0, r8
   365be:	4649      	mov	r1, r9
   365c0:	f7e2 fbd2 	bl	18d68 <__aeabi_ddiv>
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
   365c4:	ec41 0b10 	vmov	d0, r0, r1
   365c8:	f7f2 f872 	bl	286b0 <floor>
   365cc:	ec51 0b10 	vmov	r0, r1, d0
   365d0:	f7e2 fd50 	bl	19074 <__aeabi_d2iz>
#endif  // TFLITE_EMULATE_FLOAT
}
   365d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000365d8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   365d8:	b570      	push	{r4, r5, r6, lr}
   365da:	6803      	ldr	r3, [r0, #0]
   365dc:	b084      	sub	sp, #16
   365de:	2400      	movs	r4, #0
   365e0:	699e      	ldr	r6, [r3, #24]
   365e2:	9403      	str	r4, [sp, #12]
   365e4:	2310      	movs	r3, #16
   365e6:	4615      	mov	r5, r2
   365e8:	9302      	str	r3, [sp, #8]
   365ea:	e9cd 4400 	strd	r4, r4, [sp]
   365ee:	466b      	mov	r3, sp
   365f0:	6812      	ldr	r2, [r2, #0]
   365f2:	47b0      	blx	r6
   365f4:	f89d 3004 	ldrb.w	r3, [sp, #4]
   365f8:	f003 0306 	and.w	r3, r3, #6
   365fc:	2b06      	cmp	r3, #6
   365fe:	bf03      	ittte	eq
   36600:	9b00      	ldreq	r3, [sp, #0]
   36602:	602b      	streq	r3, [r5, #0]
   36604:	2001      	moveq	r0, #1
   36606:	4620      	movne	r0, r4
   36608:	b004      	add	sp, #16
   3660a:	bd70      	pop	{r4, r5, r6, pc}

0003660c <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   3660c:	9800      	ldr	r0, [sp, #0]
   3660e:	4290      	cmp	r0, r2
   36610:	bf14      	ite	ne
   36612:	2001      	movne	r0, #1
   36614:	2006      	moveq	r0, #6
   36616:	4770      	bx	lr

00036618 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   36618:	b510      	push	{r4, lr}
   3661a:	4b03      	ldr	r3, [pc, #12]	; (36628 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   3661c:	6003      	str	r3, [r0, #0]
   3661e:	4604      	mov	r4, r0
   36620:	f000 f97a 	bl	36918 <_ZNSt9type_infoD1Ev>
   36624:	4620      	mov	r0, r4
   36626:	bd10      	pop	{r4, pc}
   36628:	00043270 	.word	0x00043270

0003662c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   3662c:	b510      	push	{r4, lr}
   3662e:	4b05      	ldr	r3, [pc, #20]	; (36644 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
   36630:	6003      	str	r3, [r0, #0]
   36632:	4604      	mov	r4, r0
   36634:	f000 f970 	bl	36918 <_ZNSt9type_infoD1Ev>
   36638:	4620      	mov	r0, r4
   3663a:	2108      	movs	r1, #8
   3663c:	f7f9 f968 	bl	2f910 <_ZdlPvj>
   36640:	4620      	mov	r0, r4
   36642:	bd10      	pop	{r4, pc}
   36644:	00043270 	.word	0x00043270

00036648 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   36648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3664c:	9f06      	ldr	r7, [sp, #24]
   3664e:	9908      	ldr	r1, [sp, #32]
   36650:	9e09      	ldr	r6, [sp, #36]	; 0x24
   36652:	428f      	cmp	r7, r1
   36654:	4604      	mov	r4, r0
   36656:	4690      	mov	r8, r2
   36658:	461d      	mov	r5, r3
   3665a:	d00c      	beq.n	36676 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>
   3665c:	4629      	mov	r1, r5
   3665e:	4620      	mov	r0, r4
   36660:	f000 f976 	bl	36950 <_ZNKSt9type_infoeqERKS_>
   36664:	b120      	cbz	r0, 36670 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x28>
   36666:	2301      	movs	r3, #1
   36668:	6037      	str	r7, [r6, #0]
   3666a:	f886 8004 	strb.w	r8, [r6, #4]
   3666e:	71b3      	strb	r3, [r6, #6]
   36670:	2000      	movs	r0, #0
   36672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   36676:	9907      	ldr	r1, [sp, #28]
   36678:	f000 f96a 	bl	36950 <_ZNKSt9type_infoeqERKS_>
   3667c:	2800      	cmp	r0, #0
   3667e:	d0ed      	beq.n	3665c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x14>
   36680:	f886 8005 	strb.w	r8, [r6, #5]
   36684:	2000      	movs	r0, #0
   36686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3668a:	bf00      	nop

0003668c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   3668c:	b538      	push	{r3, r4, r5, lr}
   3668e:	4615      	mov	r5, r2
   36690:	461c      	mov	r4, r3
   36692:	f000 f95d 	bl	36950 <_ZNKSt9type_infoeqERKS_>
   36696:	b900      	cbnz	r0, 3669a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0xe>
   36698:	bd38      	pop	{r3, r4, r5, pc}
   3669a:	2208      	movs	r2, #8
   3669c:	2306      	movs	r3, #6
   3669e:	6025      	str	r5, [r4, #0]
   366a0:	60e2      	str	r2, [r4, #12]
   366a2:	7123      	strb	r3, [r4, #4]
   366a4:	bd38      	pop	{r3, r4, r5, pc}
   366a6:	bf00      	nop

000366a8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   366a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   366ac:	4606      	mov	r6, r0
   366ae:	4617      	mov	r7, r2
   366b0:	461d      	mov	r5, r3
   366b2:	460c      	mov	r4, r1
   366b4:	f000 f94c 	bl	36950 <_ZNKSt9type_infoeqERKS_>
   366b8:	b948      	cbnz	r0, 366ce <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   366ba:	2d03      	cmp	r5, #3
   366bc:	d807      	bhi.n	366ce <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   366be:	6823      	ldr	r3, [r4, #0]
   366c0:	463a      	mov	r2, r7
   366c2:	4631      	mov	r1, r6
   366c4:	4620      	mov	r0, r4
   366c6:	695b      	ldr	r3, [r3, #20]
   366c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   366cc:	4718      	bx	r3
   366ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   366d2:	bf00      	nop

000366d4 <_ZNK10__cxxabiv120__function_type_info15__is_function_pEv>:
   366d4:	2001      	movs	r0, #1
   366d6:	4770      	bx	lr

000366d8 <_ZN10__cxxabiv120__function_type_infoD1Ev>:
   366d8:	b510      	push	{r4, lr}
   366da:	4b03      	ldr	r3, [pc, #12]	; (366e8 <_ZN10__cxxabiv120__function_type_infoD1Ev+0x10>)
   366dc:	6003      	str	r3, [r0, #0]
   366de:	4604      	mov	r4, r0
   366e0:	f000 f91a 	bl	36918 <_ZNSt9type_infoD1Ev>
   366e4:	4620      	mov	r0, r4
   366e6:	bd10      	pop	{r4, pc}
   366e8:	000432d0 	.word	0x000432d0

000366ec <_ZN10__cxxabiv120__function_type_infoD0Ev>:
   366ec:	b510      	push	{r4, lr}
   366ee:	4b05      	ldr	r3, [pc, #20]	; (36704 <_ZN10__cxxabiv120__function_type_infoD0Ev+0x18>)
   366f0:	6003      	str	r3, [r0, #0]
   366f2:	4604      	mov	r4, r0
   366f4:	f000 f910 	bl	36918 <_ZNSt9type_infoD1Ev>
   366f8:	4620      	mov	r0, r4
   366fa:	2108      	movs	r1, #8
   366fc:	f7f9 f908 	bl	2f910 <_ZdlPvj>
   36700:	4620      	mov	r0, r4
   36702:	bd10      	pop	{r4, pc}
   36704:	000432d0 	.word	0x000432d0

00036708 <__cxa_guard_acquire>:
   36708:	6803      	ldr	r3, [r0, #0]
   3670a:	07db      	lsls	r3, r3, #31
   3670c:	d405      	bmi.n	3671a <__cxa_guard_acquire+0x12>
   3670e:	7843      	ldrb	r3, [r0, #1]
   36710:	b92b      	cbnz	r3, 3671e <__cxa_guard_acquire+0x16>
   36712:	2301      	movs	r3, #1
   36714:	7043      	strb	r3, [r0, #1]
   36716:	4618      	mov	r0, r3
   36718:	4770      	bx	lr
   3671a:	2000      	movs	r0, #0
   3671c:	4770      	bx	lr
   3671e:	b510      	push	{r4, lr}
   36720:	2004      	movs	r0, #4
   36722:	f000 faef 	bl	36d04 <__cxa_allocate_exception>
   36726:	4604      	mov	r4, r0
   36728:	f000 f826 	bl	36778 <_ZN9__gnu_cxx20recursive_init_errorC1Ev>
   3672c:	4a02      	ldr	r2, [pc, #8]	; (36738 <__cxa_guard_acquire+0x30>)
   3672e:	4903      	ldr	r1, [pc, #12]	; (3673c <__cxa_guard_acquire+0x34>)
   36730:	4620      	mov	r0, r4
   36732:	f000 ffa9 	bl	37688 <__cxa_throw>
   36736:	bf00      	nop
   36738:	00036749 	.word	0x00036749
   3673c:	000432e8 	.word	0x000432e8

00036740 <__cxa_guard_release>:
   36740:	2301      	movs	r3, #1
   36742:	6003      	str	r3, [r0, #0]
   36744:	4770      	bx	lr
   36746:	bf00      	nop

00036748 <_ZN9__gnu_cxx20recursive_init_errorD1Ev>:
   36748:	b510      	push	{r4, lr}
   3674a:	4b03      	ldr	r3, [pc, #12]	; (36758 <_ZN9__gnu_cxx20recursive_init_errorD1Ev+0x10>)
   3674c:	6003      	str	r3, [r0, #0]
   3674e:	4604      	mov	r4, r0
   36750:	f000 fbca 	bl	36ee8 <_ZNSt9exceptionD1Ev>
   36754:	4620      	mov	r0, r4
   36756:	bd10      	pop	{r4, pc}
   36758:	00043320 	.word	0x00043320

0003675c <_ZN9__gnu_cxx20recursive_init_errorD0Ev>:
   3675c:	b510      	push	{r4, lr}
   3675e:	4b05      	ldr	r3, [pc, #20]	; (36774 <_ZN9__gnu_cxx20recursive_init_errorD0Ev+0x18>)
   36760:	6003      	str	r3, [r0, #0]
   36762:	4604      	mov	r4, r0
   36764:	f000 fbc0 	bl	36ee8 <_ZNSt9exceptionD1Ev>
   36768:	4620      	mov	r0, r4
   3676a:	2104      	movs	r1, #4
   3676c:	f7f9 f8d0 	bl	2f910 <_ZdlPvj>
   36770:	4620      	mov	r0, r4
   36772:	bd10      	pop	{r4, pc}
   36774:	00043320 	.word	0x00043320

00036778 <_ZN9__gnu_cxx20recursive_init_errorC1Ev>:
   36778:	4b01      	ldr	r3, [pc, #4]	; (36780 <_ZN9__gnu_cxx20recursive_init_errorC1Ev+0x8>)
   3677a:	6003      	str	r3, [r0, #0]
   3677c:	4770      	bx	lr
   3677e:	bf00      	nop
   36780:	00043320 	.word	0x00043320

00036784 <_ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv>:
   36784:	2001      	movs	r0, #1
   36786:	4770      	bx	lr

00036788 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>:
   36788:	b510      	push	{r4, lr}
   3678a:	4b03      	ldr	r3, [pc, #12]	; (36798 <_ZN10__cxxabiv119__pointer_type_infoD1Ev+0x10>)
   3678c:	6003      	str	r3, [r0, #0]
   3678e:	4604      	mov	r4, r0
   36790:	f000 fff0 	bl	37774 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
   36794:	4620      	mov	r0, r4
   36796:	bd10      	pop	{r4, pc}
   36798:	00043364 	.word	0x00043364

0003679c <_ZN10__cxxabiv119__pointer_type_infoD0Ev>:
   3679c:	b510      	push	{r4, lr}
   3679e:	4b05      	ldr	r3, [pc, #20]	; (367b4 <_ZN10__cxxabiv119__pointer_type_infoD0Ev+0x18>)
   367a0:	6003      	str	r3, [r0, #0]
   367a2:	4604      	mov	r4, r0
   367a4:	f000 ffe6 	bl	37774 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
   367a8:	4620      	mov	r0, r4
   367aa:	2110      	movs	r1, #16
   367ac:	f7f9 f8b0 	bl	2f910 <_ZdlPvj>
   367b0:	4620      	mov	r0, r4
   367b2:	bd10      	pop	{r4, pc}
   367b4:	00043364 	.word	0x00043364

000367b8 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
   367b8:	b570      	push	{r4, r5, r6, lr}
   367ba:	2b01      	cmp	r3, #1
   367bc:	b082      	sub	sp, #8
   367be:	461c      	mov	r4, r3
   367c0:	4605      	mov	r5, r0
   367c2:	460e      	mov	r6, r1
   367c4:	d909      	bls.n	367da <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x22>
   367c6:	68e8      	ldr	r0, [r5, #12]
   367c8:	68f1      	ldr	r1, [r6, #12]
   367ca:	6805      	ldr	r5, [r0, #0]
   367cc:	1ca3      	adds	r3, r4, #2
   367ce:	692c      	ldr	r4, [r5, #16]
   367d0:	46a4      	mov	ip, r4
   367d2:	b002      	add	sp, #8
   367d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   367d8:	4760      	bx	ip
   367da:	4908      	ldr	r1, [pc, #32]	; (367fc <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x44>)
   367dc:	68c0      	ldr	r0, [r0, #12]
   367de:	9201      	str	r2, [sp, #4]
   367e0:	f000 f8b6 	bl	36950 <_ZNKSt9type_infoeqERKS_>
   367e4:	9a01      	ldr	r2, [sp, #4]
   367e6:	2800      	cmp	r0, #0
   367e8:	d0ed      	beq.n	367c6 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0xe>
   367ea:	68f0      	ldr	r0, [r6, #12]
   367ec:	6803      	ldr	r3, [r0, #0]
   367ee:	68db      	ldr	r3, [r3, #12]
   367f0:	4798      	blx	r3
   367f2:	f080 0001 	eor.w	r0, r0, #1
   367f6:	b2c0      	uxtb	r0, r0
   367f8:	b002      	add	sp, #8
   367fa:	bd70      	pop	{r4, r5, r6, pc}
   367fc:	000435c4 	.word	0x000435c4

00036800 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   36800:	b510      	push	{r4, lr}
   36802:	4b03      	ldr	r3, [pc, #12]	; (36810 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   36804:	6003      	str	r3, [r0, #0]
   36806:	4604      	mov	r4, r0
   36808:	f7ff ff06 	bl	36618 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   3680c:	4620      	mov	r0, r4
   3680e:	bd10      	pop	{r4, pc}
   36810:	000433bc 	.word	0x000433bc

00036814 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   36814:	b510      	push	{r4, lr}
   36816:	4b05      	ldr	r3, [pc, #20]	; (3682c <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
   36818:	6003      	str	r3, [r0, #0]
   3681a:	4604      	mov	r4, r0
   3681c:	f7ff fefc 	bl	36618 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   36820:	4620      	mov	r0, r4
   36822:	210c      	movs	r1, #12
   36824:	f7f9 f874 	bl	2f910 <_ZdlPvj>
   36828:	4620      	mov	r0, r4
   3682a:	bd10      	pop	{r4, pc}
   3682c:	000433bc 	.word	0x000433bc

00036830 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   36830:	b570      	push	{r4, r5, r6, lr}
   36832:	b082      	sub	sp, #8
   36834:	4604      	mov	r4, r0
   36836:	9e06      	ldr	r6, [sp, #24]
   36838:	4296      	cmp	r6, r2
   3683a:	460d      	mov	r5, r1
   3683c:	d009      	beq.n	36852 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x22>
   3683e:	68a0      	ldr	r0, [r4, #8]
   36840:	6804      	ldr	r4, [r0, #0]
   36842:	9606      	str	r6, [sp, #24]
   36844:	6a24      	ldr	r4, [r4, #32]
   36846:	4629      	mov	r1, r5
   36848:	46a4      	mov	ip, r4
   3684a:	b002      	add	sp, #8
   3684c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   36850:	4760      	bx	ip
   36852:	4619      	mov	r1, r3
   36854:	9201      	str	r2, [sp, #4]
   36856:	9300      	str	r3, [sp, #0]
   36858:	f000 f87a 	bl	36950 <_ZNKSt9type_infoeqERKS_>
   3685c:	e9dd 3200 	ldrd	r3, r2, [sp]
   36860:	2800      	cmp	r0, #0
   36862:	d0ec      	beq.n	3683e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   36864:	2006      	movs	r0, #6
   36866:	b002      	add	sp, #8
   36868:	bd70      	pop	{r4, r5, r6, pc}
   3686a:	bf00      	nop

0003686c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   3686c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36870:	460c      	mov	r4, r1
   36872:	b081      	sub	sp, #4
   36874:	4619      	mov	r1, r3
   36876:	e9dd 690a 	ldrd	r6, r9, [sp, #40]	; 0x28
   3687a:	e9dd 870c 	ldrd	r8, r7, [sp, #48]	; 0x30
   3687e:	469b      	mov	fp, r3
   36880:	4605      	mov	r5, r0
   36882:	4692      	mov	sl, r2
   36884:	f000 f864 	bl	36950 <_ZNKSt9type_infoeqERKS_>
   36888:	b980      	cbnz	r0, 368ac <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
   3688a:	4546      	cmp	r6, r8
   3688c:	d025      	beq.n	368da <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6e>
   3688e:	68a8      	ldr	r0, [r5, #8]
   36890:	4621      	mov	r1, r4
   36892:	6804      	ldr	r4, [r0, #0]
   36894:	e9cd 870c 	strd	r8, r7, [sp, #48]	; 0x30
   36898:	e9cd 690a 	strd	r6, r9, [sp, #40]	; 0x28
   3689c:	69e4      	ldr	r4, [r4, #28]
   3689e:	465b      	mov	r3, fp
   368a0:	4652      	mov	r2, sl
   368a2:	46a4      	mov	ip, r4
   368a4:	b001      	add	sp, #4
   368a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   368aa:	4760      	bx	ip
   368ac:	2c00      	cmp	r4, #0
   368ae:	603e      	str	r6, [r7, #0]
   368b0:	f887 a004 	strb.w	sl, [r7, #4]
   368b4:	db0c      	blt.n	368d0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x64>
   368b6:	4434      	add	r4, r6
   368b8:	45a0      	cmp	r8, r4
   368ba:	bf0c      	ite	eq
   368bc:	f04f 0806 	moveq.w	r8, #6
   368c0:	f04f 0801 	movne.w	r8, #1
   368c4:	f887 8006 	strb.w	r8, [r7, #6]
   368c8:	2000      	movs	r0, #0
   368ca:	b001      	add	sp, #4
   368cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   368d0:	3402      	adds	r4, #2
   368d2:	d1f9      	bne.n	368c8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5c>
   368d4:	2301      	movs	r3, #1
   368d6:	71bb      	strb	r3, [r7, #6]
   368d8:	e7f6      	b.n	368c8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5c>
   368da:	4649      	mov	r1, r9
   368dc:	4628      	mov	r0, r5
   368de:	f000 f837 	bl	36950 <_ZNKSt9type_infoeqERKS_>
   368e2:	2800      	cmp	r0, #0
   368e4:	d0d3      	beq.n	3688e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x22>
   368e6:	f887 a005 	strb.w	sl, [r7, #5]
   368ea:	e7ed      	b.n	368c8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5c>

000368ec <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   368ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   368f0:	4606      	mov	r6, r0
   368f2:	460f      	mov	r7, r1
   368f4:	4614      	mov	r4, r2
   368f6:	461d      	mov	r5, r3
   368f8:	f7ff fec8 	bl	3668c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   368fc:	b948      	cbnz	r0, 36912 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   368fe:	68b0      	ldr	r0, [r6, #8]
   36900:	6801      	ldr	r1, [r0, #0]
   36902:	4622      	mov	r2, r4
   36904:	698c      	ldr	r4, [r1, #24]
   36906:	462b      	mov	r3, r5
   36908:	4639      	mov	r1, r7
   3690a:	46a4      	mov	ip, r4
   3690c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   36910:	4760      	bx	ip
   36912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   36916:	bf00      	nop

00036918 <_ZNSt9type_infoD1Ev>:
   36918:	4770      	bx	lr
   3691a:	bf00      	nop

0003691c <_ZNKSt9type_info14__is_pointer_pEv>:
   3691c:	2000      	movs	r0, #0
   3691e:	4770      	bx	lr

00036920 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
   36920:	2000      	movs	r0, #0
   36922:	4770      	bx	lr

00036924 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
   36924:	4288      	cmp	r0, r1
   36926:	d011      	beq.n	3694c <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x28>
   36928:	b508      	push	{r3, lr}
   3692a:	6840      	ldr	r0, [r0, #4]
   3692c:	7803      	ldrb	r3, [r0, #0]
   3692e:	2b2a      	cmp	r3, #42	; 0x2a
   36930:	d00a      	beq.n	36948 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x24>
   36932:	6849      	ldr	r1, [r1, #4]
   36934:	780b      	ldrb	r3, [r1, #0]
   36936:	2b2a      	cmp	r3, #42	; 0x2a
   36938:	bf08      	it	eq
   3693a:	3101      	addeq	r1, #1
   3693c:	f7e1 fd04 	bl	18348 <strcmp>
   36940:	fab0 f080 	clz	r0, r0
   36944:	0940      	lsrs	r0, r0, #5
   36946:	bd08      	pop	{r3, pc}
   36948:	2000      	movs	r0, #0
   3694a:	bd08      	pop	{r3, pc}
   3694c:	2001      	movs	r0, #1
   3694e:	4770      	bx	lr

00036950 <_ZNKSt9type_infoeqERKS_>:
   36950:	4281      	cmp	r1, r0
   36952:	d011      	beq.n	36978 <_ZNKSt9type_infoeqERKS_+0x28>
   36954:	b508      	push	{r3, lr}
   36956:	6840      	ldr	r0, [r0, #4]
   36958:	7803      	ldrb	r3, [r0, #0]
   3695a:	2b2a      	cmp	r3, #42	; 0x2a
   3695c:	d00a      	beq.n	36974 <_ZNKSt9type_infoeqERKS_+0x24>
   3695e:	6849      	ldr	r1, [r1, #4]
   36960:	780b      	ldrb	r3, [r1, #0]
   36962:	2b2a      	cmp	r3, #42	; 0x2a
   36964:	bf08      	it	eq
   36966:	3101      	addeq	r1, #1
   36968:	f7e1 fcee 	bl	18348 <strcmp>
   3696c:	fab0 f080 	clz	r0, r0
   36970:	0940      	lsrs	r0, r0, #5
   36972:	bd08      	pop	{r3, pc}
   36974:	2000      	movs	r0, #0
   36976:	bd08      	pop	{r3, pc}
   36978:	2001      	movs	r0, #1
   3697a:	4770      	bx	lr

0003697c <_ZSt17__throw_bad_allocv>:
   3697c:	b508      	push	{r3, lr}
   3697e:	2004      	movs	r0, #4
   36980:	f000 f9c0 	bl	36d04 <__cxa_allocate_exception>
   36984:	4b02      	ldr	r3, [pc, #8]	; (36990 <_ZSt17__throw_bad_allocv+0x14>)
   36986:	4a03      	ldr	r2, [pc, #12]	; (36994 <_ZSt17__throw_bad_allocv+0x18>)
   36988:	4903      	ldr	r1, [pc, #12]	; (36998 <_ZSt17__throw_bad_allocv+0x1c>)
   3698a:	6003      	str	r3, [r0, #0]
   3698c:	f000 fe7c 	bl	37688 <__cxa_throw>
   36990:	000434a4 	.word	0x000434a4
   36994:	00036bbd 	.word	0x00036bbd
   36998:	00043480 	.word	0x00043480

0003699c <_ZSt19__throw_logic_errorPKc>:
   3699c:	b510      	push	{r4, lr}
   3699e:	b082      	sub	sp, #8
   369a0:	9001      	str	r0, [sp, #4]
   369a2:	2008      	movs	r0, #8
   369a4:	f000 f9ae 	bl	36d04 <__cxa_allocate_exception>
   369a8:	9901      	ldr	r1, [sp, #4]
   369aa:	4604      	mov	r4, r0
   369ac:	f001 f8ce 	bl	37b4c <_ZNSt11logic_errorC1EPKc>
   369b0:	4a04      	ldr	r2, [pc, #16]	; (369c4 <_ZSt19__throw_logic_errorPKc+0x28>)
   369b2:	4905      	ldr	r1, [pc, #20]	; (369c8 <_ZSt19__throw_logic_errorPKc+0x2c>)
   369b4:	4620      	mov	r0, r4
   369b6:	f000 fe67 	bl	37688 <__cxa_throw>
   369ba:	4620      	mov	r0, r4
   369bc:	f000 f9ba 	bl	36d34 <__cxa_free_exception>
   369c0:	f000 f9c8 	bl	36d54 <__cxa_end_cleanup>
   369c4:	000379b5 	.word	0x000379b5
   369c8:	00043750 	.word	0x00043750

000369cc <_ZSt20__throw_length_errorPKc>:
   369cc:	b510      	push	{r4, lr}
   369ce:	b082      	sub	sp, #8
   369d0:	9001      	str	r0, [sp, #4]
   369d2:	2008      	movs	r0, #8
   369d4:	f000 f996 	bl	36d04 <__cxa_allocate_exception>
   369d8:	9901      	ldr	r1, [sp, #4]
   369da:	4604      	mov	r4, r0
   369dc:	f001 f8f6 	bl	37bcc <_ZNSt12length_errorC1EPKc>
   369e0:	4a04      	ldr	r2, [pc, #16]	; (369f4 <_ZSt20__throw_length_errorPKc+0x28>)
   369e2:	4905      	ldr	r1, [pc, #20]	; (369f8 <_ZSt20__throw_length_errorPKc+0x2c>)
   369e4:	4620      	mov	r0, r4
   369e6:	f000 fe4f 	bl	37688 <__cxa_throw>
   369ea:	4620      	mov	r0, r4
   369ec:	f000 f9a2 	bl	36d34 <__cxa_free_exception>
   369f0:	f000 f9b0 	bl	36d54 <__cxa_end_cleanup>
   369f4:	000379f5 	.word	0x000379f5
   369f8:	0004375c 	.word	0x0004375c

000369fc <_ZSt24__throw_out_of_range_fmtPKcz>:
   369fc:	b40f      	push	{r0, r1, r2, r3}
   369fe:	b5b0      	push	{r4, r5, r7, lr}
   36a00:	b084      	sub	sp, #16
   36a02:	af00      	add	r7, sp, #0
   36a04:	f107 0420 	add.w	r4, r7, #32
   36a08:	f854 2b04 	ldr.w	r2, [r4], #4
   36a0c:	607a      	str	r2, [r7, #4]
   36a0e:	4610      	mov	r0, r2
   36a10:	f7e1 fe56 	bl	186c0 <strlen>
   36a14:	f200 2307 	addw	r3, r0, #519	; 0x207
   36a18:	f023 0307 	bic.w	r3, r3, #7
   36a1c:	ebad 0d03 	sub.w	sp, sp, r3
   36a20:	466d      	mov	r5, sp
   36a22:	f500 7100 	add.w	r1, r0, #512	; 0x200
   36a26:	4623      	mov	r3, r4
   36a28:	687a      	ldr	r2, [r7, #4]
   36a2a:	60fc      	str	r4, [r7, #12]
   36a2c:	4628      	mov	r0, r5
   36a2e:	f000 f86b 	bl	36b08 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
   36a32:	2008      	movs	r0, #8
   36a34:	f000 f966 	bl	36d04 <__cxa_allocate_exception>
   36a38:	4629      	mov	r1, r5
   36a3a:	4604      	mov	r4, r0
   36a3c:	f001 f8d0 	bl	37be0 <_ZNSt12out_of_rangeC1EPKc>
   36a40:	4a04      	ldr	r2, [pc, #16]	; (36a54 <_ZSt24__throw_out_of_range_fmtPKcz+0x58>)
   36a42:	4905      	ldr	r1, [pc, #20]	; (36a58 <_ZSt24__throw_out_of_range_fmtPKcz+0x5c>)
   36a44:	4620      	mov	r0, r4
   36a46:	f000 fe1f 	bl	37688 <__cxa_throw>
   36a4a:	4620      	mov	r0, r4
   36a4c:	f000 f972 	bl	36d34 <__cxa_free_exception>
   36a50:	f000 f980 	bl	36d54 <__cxa_end_cleanup>
   36a54:	00037a35 	.word	0x00037a35
   36a58:	00043768 	.word	0x00043768

00036a5c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
   36a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   36a5e:	b09d      	sub	sp, #116	; 0x74
   36a60:	af00      	add	r7, sp, #0
   36a62:	1a0c      	subs	r4, r1, r0
   36a64:	4606      	mov	r6, r0
   36a66:	490f      	ldr	r1, [pc, #60]	; (36aa4 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
   36a68:	2269      	movs	r2, #105	; 0x69
   36a6a:	1d38      	adds	r0, r7, #4
   36a6c:	f7e1 fbc8 	bl	18200 <memcpy>
   36a70:	f104 0370 	add.w	r3, r4, #112	; 0x70
   36a74:	f023 0307 	bic.w	r3, r3, #7
   36a78:	ebad 0d03 	sub.w	sp, sp, r3
   36a7c:	466d      	mov	r5, sp
   36a7e:	2268      	movs	r2, #104	; 0x68
   36a80:	1d39      	adds	r1, r7, #4
   36a82:	4628      	mov	r0, r5
   36a84:	f7e1 fbbc 	bl	18200 <memcpy>
   36a88:	4622      	mov	r2, r4
   36a8a:	4631      	mov	r1, r6
   36a8c:	f105 0068 	add.w	r0, r5, #104	; 0x68
   36a90:	442c      	add	r4, r5
   36a92:	f7e1 fbb5 	bl	18200 <memcpy>
   36a96:	2300      	movs	r3, #0
   36a98:	4628      	mov	r0, r5
   36a9a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
   36a9e:	f7ff ff7d 	bl	3699c <_ZSt19__throw_logic_errorPKc>
   36aa2:	bf00      	nop
   36aa4:	000433f8 	.word	0x000433f8

00036aa8 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
   36aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   36aac:	af00      	add	r7, sp, #0
   36aae:	b084      	sub	sp, #16
   36ab0:	466e      	mov	r6, sp
   36ab2:	f106 080c 	add.w	r8, r6, #12
   36ab6:	f8df 904c 	ldr.w	r9, [pc, #76]	; 36b04 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x5c>
   36aba:	4d11      	ldr	r5, [pc, #68]	; (36b00 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x58>)
   36abc:	46c6      	mov	lr, r8
   36abe:	fba5 4302 	umull	r4, r3, r5, r2
   36ac2:	08db      	lsrs	r3, r3, #3
   36ac4:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   36ac8:	eba2 0c4c 	sub.w	ip, r2, ip, lsl #1
   36acc:	4614      	mov	r4, r2
   36ace:	2c09      	cmp	r4, #9
   36ad0:	f819 200c 	ldrb.w	r2, [r9, ip]
   36ad4:	f80e 2d01 	strb.w	r2, [lr, #-1]!
   36ad8:	461a      	mov	r2, r3
   36ada:	d8f0      	bhi.n	36abe <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x16>
   36adc:	eba8 080e 	sub.w	r8, r8, lr
   36ae0:	4588      	cmp	r8, r1
   36ae2:	d809      	bhi.n	36af8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x50>
   36ae4:	f1c8 010c 	rsb	r1, r8, #12
   36ae8:	4642      	mov	r2, r8
   36aea:	4431      	add	r1, r6
   36aec:	f7e1 fb88 	bl	18200 <memcpy>
   36af0:	4640      	mov	r0, r8
   36af2:	46bd      	mov	sp, r7
   36af4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   36af8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   36afc:	e7f8      	b.n	36af0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x48>
   36afe:	bf00      	nop
   36b00:	cccccccd 	.word	0xcccccccd
   36b04:	00043464 	.word	0x00043464

00036b08 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
   36b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   36b0c:	4615      	mov	r5, r2
   36b0e:	7812      	ldrb	r2, [r2, #0]
   36b10:	1e4e      	subs	r6, r1, #1
   36b12:	4607      	mov	r7, r0
   36b14:	4406      	add	r6, r0
   36b16:	2a00      	cmp	r2, #0
   36b18:	d044      	beq.n	36ba4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x9c>
   36b1a:	42b0      	cmp	r0, r6
   36b1c:	d245      	bcs.n	36baa <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xa2>
   36b1e:	4619      	mov	r1, r3
   36b20:	4604      	mov	r4, r0
   36b22:	e007      	b.n	36b34 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   36b24:	782a      	ldrb	r2, [r5, #0]
   36b26:	f804 2b01 	strb.w	r2, [r4], #1
   36b2a:	3501      	adds	r5, #1
   36b2c:	782a      	ldrb	r2, [r5, #0]
   36b2e:	b1f2      	cbz	r2, 36b6e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x66>
   36b30:	42b4      	cmp	r4, r6
   36b32:	d23b      	bcs.n	36bac <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xa4>
   36b34:	2a25      	cmp	r2, #37	; 0x25
   36b36:	d1f5      	bne.n	36b24 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x1c>
   36b38:	786a      	ldrb	r2, [r5, #1]
   36b3a:	2a73      	cmp	r2, #115	; 0x73
   36b3c:	d01c      	beq.n	36b78 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
   36b3e:	2a7a      	cmp	r2, #122	; 0x7a
   36b40:	d003      	beq.n	36b4a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x42>
   36b42:	2a25      	cmp	r2, #37	; 0x25
   36b44:	d1ee      	bne.n	36b24 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x1c>
   36b46:	3501      	adds	r5, #1
   36b48:	e7ed      	b.n	36b26 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x1e>
   36b4a:	78ab      	ldrb	r3, [r5, #2]
   36b4c:	2b75      	cmp	r3, #117	; 0x75
   36b4e:	d1e9      	bne.n	36b24 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x1c>
   36b50:	4688      	mov	r8, r1
   36b52:	4620      	mov	r0, r4
   36b54:	f858 2b04 	ldr.w	r2, [r8], #4
   36b58:	1b31      	subs	r1, r6, r4
   36b5a:	f7ff ffa5 	bl	36aa8 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
   36b5e:	2800      	cmp	r0, #0
   36b60:	dd24      	ble.n	36bac <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xa4>
   36b62:	78ea      	ldrb	r2, [r5, #3]
   36b64:	3503      	adds	r5, #3
   36b66:	4404      	add	r4, r0
   36b68:	4641      	mov	r1, r8
   36b6a:	2a00      	cmp	r2, #0
   36b6c:	d1e0      	bne.n	36b30 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x28>
   36b6e:	1be0      	subs	r0, r4, r7
   36b70:	2300      	movs	r3, #0
   36b72:	7023      	strb	r3, [r4, #0]
   36b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   36b78:	f851 2b04 	ldr.w	r2, [r1], #4
   36b7c:	7813      	ldrb	r3, [r2, #0]
   36b7e:	b153      	cbz	r3, 36b96 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x8e>
   36b80:	42a6      	cmp	r6, r4
   36b82:	d802      	bhi.n	36b8a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x82>
   36b84:	e009      	b.n	36b9a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x92>
   36b86:	42a6      	cmp	r6, r4
   36b88:	d008      	beq.n	36b9c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x94>
   36b8a:	f804 3b01 	strb.w	r3, [r4], #1
   36b8e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   36b92:	2b00      	cmp	r3, #0
   36b94:	d1f7      	bne.n	36b86 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7e>
   36b96:	3502      	adds	r5, #2
   36b98:	e7c8      	b.n	36b2c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x24>
   36b9a:	4626      	mov	r6, r4
   36b9c:	4631      	mov	r1, r6
   36b9e:	4638      	mov	r0, r7
   36ba0:	f7ff ff5c 	bl	36a5c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
   36ba4:	4604      	mov	r4, r0
   36ba6:	4610      	mov	r0, r2
   36ba8:	e7e2      	b.n	36b70 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x68>
   36baa:	4604      	mov	r4, r0
   36bac:	4621      	mov	r1, r4
   36bae:	4638      	mov	r0, r7
   36bb0:	f7ff ff54 	bl	36a5c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>

00036bb4 <_ZNKSt9bad_alloc4whatEv>:
   36bb4:	4800      	ldr	r0, [pc, #0]	; (36bb8 <_ZNKSt9bad_alloc4whatEv+0x4>)
   36bb6:	4770      	bx	lr
   36bb8:	00043470 	.word	0x00043470

00036bbc <_ZNSt9bad_allocD1Ev>:
   36bbc:	b510      	push	{r4, lr}
   36bbe:	4b03      	ldr	r3, [pc, #12]	; (36bcc <_ZNSt9bad_allocD1Ev+0x10>)
   36bc0:	6003      	str	r3, [r0, #0]
   36bc2:	4604      	mov	r4, r0
   36bc4:	f000 f990 	bl	36ee8 <_ZNSt9exceptionD1Ev>
   36bc8:	4620      	mov	r0, r4
   36bca:	bd10      	pop	{r4, pc}
   36bcc:	000434a4 	.word	0x000434a4

00036bd0 <_ZNSt9bad_allocD0Ev>:
   36bd0:	b510      	push	{r4, lr}
   36bd2:	4b05      	ldr	r3, [pc, #20]	; (36be8 <_ZNSt9bad_allocD0Ev+0x18>)
   36bd4:	6003      	str	r3, [r0, #0]
   36bd6:	4604      	mov	r4, r0
   36bd8:	f000 f986 	bl	36ee8 <_ZNSt9exceptionD1Ev>
   36bdc:	4620      	mov	r0, r4
   36bde:	2104      	movs	r1, #4
   36be0:	f7f8 fe96 	bl	2f910 <_ZdlPvj>
   36be4:	4620      	mov	r0, r4
   36be6:	bd10      	pop	{r4, pc}
   36be8:	000434a4 	.word	0x000434a4

00036bec <_ZNKSt10bad_typeid4whatEv>:
   36bec:	4800      	ldr	r0, [pc, #0]	; (36bf0 <_ZNKSt10bad_typeid4whatEv+0x4>)
   36bee:	4770      	bx	lr
   36bf0:	000434b0 	.word	0x000434b0

00036bf4 <_ZNSt10bad_typeidD1Ev>:
   36bf4:	b510      	push	{r4, lr}
   36bf6:	4b03      	ldr	r3, [pc, #12]	; (36c04 <_ZNSt10bad_typeidD1Ev+0x10>)
   36bf8:	6003      	str	r3, [r0, #0]
   36bfa:	4604      	mov	r4, r0
   36bfc:	f000 f974 	bl	36ee8 <_ZNSt9exceptionD1Ev>
   36c00:	4620      	mov	r0, r4
   36c02:	bd10      	pop	{r4, pc}
   36c04:	000434e4 	.word	0x000434e4

00036c08 <_ZNSt10bad_typeidD0Ev>:
   36c08:	b510      	push	{r4, lr}
   36c0a:	4b05      	ldr	r3, [pc, #20]	; (36c20 <_ZNSt10bad_typeidD0Ev+0x18>)
   36c0c:	6003      	str	r3, [r0, #0]
   36c0e:	4604      	mov	r4, r0
   36c10:	f000 f96a 	bl	36ee8 <_ZNSt9exceptionD1Ev>
   36c14:	4620      	mov	r0, r4
   36c16:	2104      	movs	r1, #4
   36c18:	f7f8 fe7a 	bl	2f910 <_ZdlPvj>
   36c1c:	4620      	mov	r0, r4
   36c1e:	bd10      	pop	{r4, pc}
   36c20:	000434e4 	.word	0x000434e4

00036c24 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>:
   36c24:	4920      	ldr	r1, [pc, #128]	; (36ca8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x84>)
   36c26:	684b      	ldr	r3, [r1, #4]
   36c28:	b530      	push	{r4, r5, lr}
   36c2a:	f1a0 0408 	sub.w	r4, r0, #8
   36c2e:	b36b      	cbz	r3, 36c8c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x68>
   36c30:	f850 5c08 	ldr.w	r5, [r0, #-8]
   36c34:	eb04 0e05 	add.w	lr, r4, r5
   36c38:	4573      	cmp	r3, lr
   36c3a:	d827      	bhi.n	36c8c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x68>
   36c3c:	d021      	beq.n	36c82 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x5e>
   36c3e:	685a      	ldr	r2, [r3, #4]
   36c40:	f101 0c04 	add.w	ip, r1, #4
   36c44:	b932      	cbnz	r2, 36c54 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x30>
   36c46:	e00f      	b.n	36c68 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x44>
   36c48:	6851      	ldr	r1, [r2, #4]
   36c4a:	f103 0c04 	add.w	ip, r3, #4
   36c4e:	b321      	cbz	r1, 36c9a <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x76>
   36c50:	4613      	mov	r3, r2
   36c52:	460a      	mov	r2, r1
   36c54:	4596      	cmp	lr, r2
   36c56:	d3f7      	bcc.n	36c48 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x24>
   36c58:	bf04      	itt	eq
   36c5a:	e9de 2100 	ldrdeq	r2, r1, [lr]
   36c5e:	6059      	streq	r1, [r3, #4]
   36c60:	f8dc 3000 	ldr.w	r3, [ip]
   36c64:	bf08      	it	eq
   36c66:	18ad      	addeq	r5, r5, r2
   36c68:	681a      	ldr	r2, [r3, #0]
   36c6a:	1899      	adds	r1, r3, r2
   36c6c:	428c      	cmp	r4, r1
   36c6e:	d011      	beq.n	36c94 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x70>
   36c70:	685b      	ldr	r3, [r3, #4]
   36c72:	f840 3c04 	str.w	r3, [r0, #-4]
   36c76:	f8dc 3000 	ldr.w	r3, [ip]
   36c7a:	f840 5c08 	str.w	r5, [r0, #-8]
   36c7e:	605c      	str	r4, [r3, #4]
   36c80:	bd30      	pop	{r4, r5, pc}
   36c82:	681a      	ldr	r2, [r3, #0]
   36c84:	685b      	ldr	r3, [r3, #4]
   36c86:	442a      	add	r2, r5
   36c88:	f840 2c08 	str.w	r2, [r0, #-8]
   36c8c:	f840 3c04 	str.w	r3, [r0, #-4]
   36c90:	604c      	str	r4, [r1, #4]
   36c92:	bd30      	pop	{r4, r5, pc}
   36c94:	442a      	add	r2, r5
   36c96:	601a      	str	r2, [r3, #0]
   36c98:	bd30      	pop	{r4, r5, pc}
   36c9a:	685b      	ldr	r3, [r3, #4]
   36c9c:	681a      	ldr	r2, [r3, #0]
   36c9e:	1899      	adds	r1, r3, r2
   36ca0:	428c      	cmp	r4, r1
   36ca2:	d1e5      	bne.n	36c70 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x4c>
   36ca4:	e7f6      	b.n	36c94 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x70>
   36ca6:	bf00      	nop
   36ca8:	1001a648 	.word	0x1001a648

00036cac <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>:
   36cac:	4914      	ldr	r1, [pc, #80]	; (36d00 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x54>)
   36cae:	f100 0308 	add.w	r3, r0, #8
   36cb2:	6848      	ldr	r0, [r1, #4]
   36cb4:	2b08      	cmp	r3, #8
   36cb6:	bf38      	it	cc
   36cb8:	2308      	movcc	r3, #8
   36cba:	b1a0      	cbz	r0, 36ce6 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x3a>
   36cbc:	3307      	adds	r3, #7
   36cbe:	f023 0307 	bic.w	r3, r3, #7
   36cc2:	3104      	adds	r1, #4
   36cc4:	e002      	b.n	36ccc <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x20>
   36cc6:	1d01      	adds	r1, r0, #4
   36cc8:	6840      	ldr	r0, [r0, #4]
   36cca:	b1b8      	cbz	r0, 36cfc <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x50>
   36ccc:	6802      	ldr	r2, [r0, #0]
   36cce:	4293      	cmp	r3, r2
   36cd0:	d8f9      	bhi.n	36cc6 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x1a>
   36cd2:	b430      	push	{r4, r5}
   36cd4:	1ad4      	subs	r4, r2, r3
   36cd6:	2c07      	cmp	r4, #7
   36cd8:	d806      	bhi.n	36ce8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x3c>
   36cda:	6843      	ldr	r3, [r0, #4]
   36cdc:	6002      	str	r2, [r0, #0]
   36cde:	bc30      	pop	{r4, r5}
   36ce0:	3008      	adds	r0, #8
   36ce2:	600b      	str	r3, [r1, #0]
   36ce4:	4770      	bx	lr
   36ce6:	4770      	bx	lr
   36ce8:	18c2      	adds	r2, r0, r3
   36cea:	6845      	ldr	r5, [r0, #4]
   36cec:	6055      	str	r5, [r2, #4]
   36cee:	50c4      	str	r4, [r0, r3]
   36cf0:	6808      	ldr	r0, [r1, #0]
   36cf2:	bc30      	pop	{r4, r5}
   36cf4:	6003      	str	r3, [r0, #0]
   36cf6:	3008      	adds	r0, #8
   36cf8:	600a      	str	r2, [r1, #0]
   36cfa:	4770      	bx	lr
   36cfc:	4770      	bx	lr
   36cfe:	bf00      	nop
   36d00:	1001a648 	.word	0x1001a648

00036d04 <__cxa_allocate_exception>:
   36d04:	b510      	push	{r4, lr}
   36d06:	f100 0480 	add.w	r4, r0, #128	; 0x80
   36d0a:	4620      	mov	r0, r4
   36d0c:	f001 fa5e 	bl	381cc <malloc>
   36d10:	4603      	mov	r3, r0
   36d12:	b130      	cbz	r0, 36d22 <__cxa_allocate_exception+0x1e>
   36d14:	2280      	movs	r2, #128	; 0x80
   36d16:	2100      	movs	r1, #0
   36d18:	4618      	mov	r0, r3
   36d1a:	f7f4 f8c3 	bl	2aea4 <memset>
   36d1e:	3080      	adds	r0, #128	; 0x80
   36d20:	bd10      	pop	{r4, pc}
   36d22:	4620      	mov	r0, r4
   36d24:	f7ff ffc2 	bl	36cac <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>
   36d28:	4603      	mov	r3, r0
   36d2a:	2800      	cmp	r0, #0
   36d2c:	d1f2      	bne.n	36d14 <__cxa_allocate_exception+0x10>
   36d2e:	f000 fc31 	bl	37594 <_ZSt9terminatev>
   36d32:	bf00      	nop

00036d34 <__cxa_free_exception>:
   36d34:	4a06      	ldr	r2, [pc, #24]	; (36d50 <__cxa_free_exception+0x1c>)
   36d36:	6893      	ldr	r3, [r2, #8]
   36d38:	3880      	subs	r0, #128	; 0x80
   36d3a:	4298      	cmp	r0, r3
   36d3c:	d905      	bls.n	36d4a <__cxa_free_exception+0x16>
   36d3e:	68d2      	ldr	r2, [r2, #12]
   36d40:	4413      	add	r3, r2
   36d42:	4298      	cmp	r0, r3
   36d44:	d201      	bcs.n	36d4a <__cxa_free_exception+0x16>
   36d46:	f7ff bf6d 	b.w	36c24 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
   36d4a:	f001 ba47 	b.w	381dc <free>
   36d4e:	bf00      	nop
   36d50:	1001a648 	.word	0x1001a648

00036d54 <__cxa_end_cleanup>:
   36d54:	b41e      	push	{r1, r2, r3, r4}
   36d56:	f000 f88f 	bl	36e78 <__gnu_end_cleanup>
   36d5a:	bc1e      	pop	{r1, r2, r3, r4}
   36d5c:	f7e9 f8f6 	bl	1ff4c <_Unwind_Resume>

00036d60 <__cxa_type_match>:
   36d60:	b5f0      	push	{r4, r5, r6, r7, lr}
   36d62:	7802      	ldrb	r2, [r0, #0]
   36d64:	2a47      	cmp	r2, #71	; 0x47
   36d66:	b083      	sub	sp, #12
   36d68:	460c      	mov	r4, r1
   36d6a:	461d      	mov	r5, r3
   36d6c:	d019      	beq.n	36da2 <__cxa_type_match+0x42>
   36d6e:	2300      	movs	r3, #0
   36d70:	4e26      	ldr	r6, [pc, #152]	; (36e0c <__cxa_type_match+0xac>)
   36d72:	9301      	str	r3, [sp, #4]
   36d74:	6833      	ldr	r3, [r6, #0]
   36d76:	4630      	mov	r0, r6
   36d78:	689b      	ldr	r3, [r3, #8]
   36d7a:	4798      	blx	r3
   36d7c:	b178      	cbz	r0, 36d9e <__cxa_type_match+0x3e>
   36d7e:	9b01      	ldr	r3, [sp, #4]
   36d80:	681b      	ldr	r3, [r3, #0]
   36d82:	9301      	str	r3, [sp, #4]
   36d84:	2702      	movs	r7, #2
   36d86:	6823      	ldr	r3, [r4, #0]
   36d88:	4631      	mov	r1, r6
   36d8a:	4620      	mov	r0, r4
   36d8c:	691e      	ldr	r6, [r3, #16]
   36d8e:	aa01      	add	r2, sp, #4
   36d90:	2301      	movs	r3, #1
   36d92:	47b0      	blx	r6
   36d94:	bb18      	cbnz	r0, 36dde <__cxa_type_match+0x7e>
   36d96:	4607      	mov	r7, r0
   36d98:	4638      	mov	r0, r7
   36d9a:	b003      	add	sp, #12
   36d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   36d9e:	2701      	movs	r7, #1
   36da0:	e7f1      	b.n	36d86 <__cxa_type_match+0x26>
   36da2:	7843      	ldrb	r3, [r0, #1]
   36da4:	2b4e      	cmp	r3, #78	; 0x4e
   36da6:	d1e2      	bne.n	36d6e <__cxa_type_match+0xe>
   36da8:	7883      	ldrb	r3, [r0, #2]
   36daa:	2b55      	cmp	r3, #85	; 0x55
   36dac:	d1df      	bne.n	36d6e <__cxa_type_match+0xe>
   36dae:	78c3      	ldrb	r3, [r0, #3]
   36db0:	2b43      	cmp	r3, #67	; 0x43
   36db2:	d1dc      	bne.n	36d6e <__cxa_type_match+0xe>
   36db4:	7903      	ldrb	r3, [r0, #4]
   36db6:	2b46      	cmp	r3, #70	; 0x46
   36db8:	d01b      	beq.n	36df2 <__cxa_type_match+0x92>
   36dba:	7903      	ldrb	r3, [r0, #4]
   36dbc:	2b43      	cmp	r3, #67	; 0x43
   36dbe:	d1d6      	bne.n	36d6e <__cxa_type_match+0xe>
   36dc0:	7943      	ldrb	r3, [r0, #5]
   36dc2:	2b2b      	cmp	r3, #43	; 0x2b
   36dc4:	d1d3      	bne.n	36d6e <__cxa_type_match+0xe>
   36dc6:	7983      	ldrb	r3, [r0, #6]
   36dc8:	2b2b      	cmp	r3, #43	; 0x2b
   36dca:	d1d0      	bne.n	36d6e <__cxa_type_match+0xe>
   36dcc:	79c3      	ldrb	r3, [r0, #7]
   36dce:	2b01      	cmp	r3, #1
   36dd0:	d8cd      	bhi.n	36d6e <__cxa_type_match+0xe>
   36dd2:	d009      	beq.n	36de8 <__cxa_type_match+0x88>
   36dd4:	f850 6c20 	ldr.w	r6, [r0, #-32]
   36dd8:	3058      	adds	r0, #88	; 0x58
   36dda:	9001      	str	r0, [sp, #4]
   36ddc:	e7ca      	b.n	36d74 <__cxa_type_match+0x14>
   36dde:	9b01      	ldr	r3, [sp, #4]
   36de0:	602b      	str	r3, [r5, #0]
   36de2:	4638      	mov	r0, r7
   36de4:	b003      	add	sp, #12
   36de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   36de8:	f850 0c20 	ldr.w	r0, [r0, #-32]
   36dec:	f850 6c78 	ldr.w	r6, [r0, #-120]
   36df0:	e7f3      	b.n	36dda <__cxa_type_match+0x7a>
   36df2:	7943      	ldrb	r3, [r0, #5]
   36df4:	2b4f      	cmp	r3, #79	; 0x4f
   36df6:	d1e0      	bne.n	36dba <__cxa_type_match+0x5a>
   36df8:	7983      	ldrb	r3, [r0, #6]
   36dfa:	2b52      	cmp	r3, #82	; 0x52
   36dfc:	d1dd      	bne.n	36dba <__cxa_type_match+0x5a>
   36dfe:	79c3      	ldrb	r3, [r0, #7]
   36e00:	2b00      	cmp	r3, #0
   36e02:	d1da      	bne.n	36dba <__cxa_type_match+0x5a>
   36e04:	4e02      	ldr	r6, [pc, #8]	; (36e10 <__cxa_type_match+0xb0>)
   36e06:	9301      	str	r3, [sp, #4]
   36e08:	e7b4      	b.n	36d74 <__cxa_type_match+0x14>
   36e0a:	bf00      	nop
   36e0c:	0004351c 	.word	0x0004351c
   36e10:	00043514 	.word	0x00043514

00036e14 <__cxa_begin_cleanup>:
   36e14:	b510      	push	{r4, lr}
   36e16:	4604      	mov	r4, r0
   36e18:	f000 f87e 	bl	36f18 <__cxa_get_globals>
   36e1c:	4622      	mov	r2, r4
   36e1e:	f812 3920 	ldrb.w	r3, [r2], #-32
   36e22:	2b47      	cmp	r3, #71	; 0x47
   36e24:	d004      	beq.n	36e30 <__cxa_begin_cleanup+0x1c>
   36e26:	6883      	ldr	r3, [r0, #8]
   36e28:	bb23      	cbnz	r3, 36e74 <__cxa_begin_cleanup+0x60>
   36e2a:	6082      	str	r2, [r0, #8]
   36e2c:	2001      	movs	r0, #1
   36e2e:	bd10      	pop	{r4, pc}
   36e30:	7863      	ldrb	r3, [r4, #1]
   36e32:	2b4e      	cmp	r3, #78	; 0x4e
   36e34:	d1f7      	bne.n	36e26 <__cxa_begin_cleanup+0x12>
   36e36:	78a3      	ldrb	r3, [r4, #2]
   36e38:	2b55      	cmp	r3, #85	; 0x55
   36e3a:	d1f4      	bne.n	36e26 <__cxa_begin_cleanup+0x12>
   36e3c:	78e3      	ldrb	r3, [r4, #3]
   36e3e:	2b43      	cmp	r3, #67	; 0x43
   36e40:	d1f1      	bne.n	36e26 <__cxa_begin_cleanup+0x12>
   36e42:	7923      	ldrb	r3, [r4, #4]
   36e44:	2b43      	cmp	r3, #67	; 0x43
   36e46:	d1ee      	bne.n	36e26 <__cxa_begin_cleanup+0x12>
   36e48:	7963      	ldrb	r3, [r4, #5]
   36e4a:	2b2b      	cmp	r3, #43	; 0x2b
   36e4c:	d1eb      	bne.n	36e26 <__cxa_begin_cleanup+0x12>
   36e4e:	79a3      	ldrb	r3, [r4, #6]
   36e50:	2b2b      	cmp	r3, #43	; 0x2b
   36e52:	d1e8      	bne.n	36e26 <__cxa_begin_cleanup+0x12>
   36e54:	79e3      	ldrb	r3, [r4, #7]
   36e56:	2b01      	cmp	r3, #1
   36e58:	d8e5      	bhi.n	36e26 <__cxa_begin_cleanup+0x12>
   36e5a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   36e5e:	3301      	adds	r3, #1
   36e60:	2b01      	cmp	r3, #1
   36e62:	f844 3c04 	str.w	r3, [r4, #-4]
   36e66:	d1e1      	bne.n	36e2c <__cxa_begin_cleanup+0x18>
   36e68:	6883      	ldr	r3, [r0, #8]
   36e6a:	f844 3c08 	str.w	r3, [r4, #-8]
   36e6e:	6082      	str	r2, [r0, #8]
   36e70:	2001      	movs	r0, #1
   36e72:	bd10      	pop	{r4, pc}
   36e74:	f000 fb8e 	bl	37594 <_ZSt9terminatev>

00036e78 <__gnu_end_cleanup>:
   36e78:	b508      	push	{r3, lr}
   36e7a:	f000 f84d 	bl	36f18 <__cxa_get_globals>
   36e7e:	6883      	ldr	r3, [r0, #8]
   36e80:	b383      	cbz	r3, 36ee4 <__gnu_end_cleanup+0x6c>
   36e82:	f893 2020 	ldrb.w	r2, [r3, #32]
   36e86:	2a47      	cmp	r2, #71	; 0x47
   36e88:	d004      	beq.n	36e94 <__gnu_end_cleanup+0x1c>
   36e8a:	2200      	movs	r2, #0
   36e8c:	6082      	str	r2, [r0, #8]
   36e8e:	f103 0020 	add.w	r0, r3, #32
   36e92:	bd08      	pop	{r3, pc}
   36e94:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
   36e98:	2a4e      	cmp	r2, #78	; 0x4e
   36e9a:	d1f6      	bne.n	36e8a <__gnu_end_cleanup+0x12>
   36e9c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
   36ea0:	2a55      	cmp	r2, #85	; 0x55
   36ea2:	d1f2      	bne.n	36e8a <__gnu_end_cleanup+0x12>
   36ea4:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
   36ea8:	2a43      	cmp	r2, #67	; 0x43
   36eaa:	d1ee      	bne.n	36e8a <__gnu_end_cleanup+0x12>
   36eac:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   36eb0:	2a43      	cmp	r2, #67	; 0x43
   36eb2:	d1ea      	bne.n	36e8a <__gnu_end_cleanup+0x12>
   36eb4:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
   36eb8:	2a2b      	cmp	r2, #43	; 0x2b
   36eba:	d1e6      	bne.n	36e8a <__gnu_end_cleanup+0x12>
   36ebc:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
   36ec0:	2a2b      	cmp	r2, #43	; 0x2b
   36ec2:	d1e2      	bne.n	36e8a <__gnu_end_cleanup+0x12>
   36ec4:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
   36ec8:	2a01      	cmp	r2, #1
   36eca:	d8de      	bhi.n	36e8a <__gnu_end_cleanup+0x12>
   36ecc:	69da      	ldr	r2, [r3, #28]
   36ece:	3a01      	subs	r2, #1
   36ed0:	61da      	str	r2, [r3, #28]
   36ed2:	2a00      	cmp	r2, #0
   36ed4:	d1db      	bne.n	36e8e <__gnu_end_cleanup+0x16>
   36ed6:	6999      	ldr	r1, [r3, #24]
   36ed8:	6081      	str	r1, [r0, #8]
   36eda:	2200      	movs	r2, #0
   36edc:	619a      	str	r2, [r3, #24]
   36ede:	f103 0020 	add.w	r0, r3, #32
   36ee2:	bd08      	pop	{r3, pc}
   36ee4:	f000 fb56 	bl	37594 <_ZSt9terminatev>

00036ee8 <_ZNSt9exceptionD1Ev>:
   36ee8:	4770      	bx	lr
   36eea:	bf00      	nop

00036eec <_ZNSt13bad_exceptionD1Ev>:
   36eec:	4770      	bx	lr
   36eee:	bf00      	nop

00036ef0 <_ZGTtNKSt9exception4whatEv>:
   36ef0:	4800      	ldr	r0, [pc, #0]	; (36ef4 <_ZGTtNKSt9exception4whatEv+0x4>)
   36ef2:	4770      	bx	lr
   36ef4:	000434f0 	.word	0x000434f0

00036ef8 <_ZGTtNKSt13bad_exception4whatEv>:
   36ef8:	4800      	ldr	r0, [pc, #0]	; (36efc <_ZGTtNKSt13bad_exception4whatEv+0x4>)
   36efa:	4770      	bx	lr
   36efc:	00043500 	.word	0x00043500

00036f00 <_ZNSt13bad_exceptionD0Ev>:
   36f00:	b510      	push	{r4, lr}
   36f02:	2104      	movs	r1, #4
   36f04:	4604      	mov	r4, r0
   36f06:	f7f8 fd03 	bl	2f910 <_ZdlPvj>
   36f0a:	4620      	mov	r0, r4
   36f0c:	bd10      	pop	{r4, pc}
   36f0e:	bf00      	nop

00036f10 <__cxa_get_globals_fast>:
   36f10:	4800      	ldr	r0, [pc, #0]	; (36f14 <__cxa_get_globals_fast+0x4>)
   36f12:	4770      	bx	lr
   36f14:	1001a658 	.word	0x1001a658

00036f18 <__cxa_get_globals>:
   36f18:	4800      	ldr	r0, [pc, #0]	; (36f1c <__cxa_get_globals+0x4>)
   36f1a:	4770      	bx	lr
   36f1c:	1001a658 	.word	0x1001a658

00036f20 <_ZL28read_encoded_value_with_basehjPKhPj>:
   36f20:	2850      	cmp	r0, #80	; 0x50
   36f22:	b570      	push	{r4, r5, r6, lr}
   36f24:	d01d      	beq.n	36f62 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
   36f26:	4684      	mov	ip, r0
   36f28:	f000 000f 	and.w	r0, r0, #15
   36f2c:	280c      	cmp	r0, #12
   36f2e:	d855      	bhi.n	36fdc <_ZL28read_encoded_value_with_basehjPKhPj+0xbc>
   36f30:	e8df f000 	tbb	[pc, r0]
   36f34:	07264407 	.word	0x07264407
   36f38:	5454541e 	.word	0x5454541e
   36f3c:	07222a54 	.word	0x07222a54
   36f40:	1e          	.byte	0x1e
   36f41:	00          	.byte	0x00
   36f42:	4610      	mov	r0, r2
   36f44:	f850 6b04 	ldr.w	r6, [r0], #4
   36f48:	b14e      	cbz	r6, 36f5e <_ZL28read_encoded_value_with_basehjPKhPj+0x3e>
   36f4a:	f00c 0470 	and.w	r4, ip, #112	; 0x70
   36f4e:	2c10      	cmp	r4, #16
   36f50:	bf08      	it	eq
   36f52:	4611      	moveq	r1, r2
   36f54:	440e      	add	r6, r1
   36f56:	f01c 0f80 	tst.w	ip, #128	; 0x80
   36f5a:	bf18      	it	ne
   36f5c:	6836      	ldrne	r6, [r6, #0]
   36f5e:	601e      	str	r6, [r3, #0]
   36f60:	bd70      	pop	{r4, r5, r6, pc}
   36f62:	3203      	adds	r2, #3
   36f64:	f022 0003 	bic.w	r0, r2, #3
   36f68:	f850 6b04 	ldr.w	r6, [r0], #4
   36f6c:	601e      	str	r6, [r3, #0]
   36f6e:	bd70      	pop	{r4, r5, r6, pc}
   36f70:	4610      	mov	r0, r2
   36f72:	f850 6b08 	ldr.w	r6, [r0], #8
   36f76:	e7e7      	b.n	36f48 <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
   36f78:	4610      	mov	r0, r2
   36f7a:	f930 6b02 	ldrsh.w	r6, [r0], #2
   36f7e:	e7e3      	b.n	36f48 <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
   36f80:	4610      	mov	r0, r2
   36f82:	f830 6b02 	ldrh.w	r6, [r0], #2
   36f86:	e7df      	b.n	36f48 <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
   36f88:	2600      	movs	r6, #0
   36f8a:	4610      	mov	r0, r2
   36f8c:	4634      	mov	r4, r6
   36f8e:	f810 5b01 	ldrb.w	r5, [r0], #1
   36f92:	f005 0e7f 	and.w	lr, r5, #127	; 0x7f
   36f96:	fa0e fe04 	lsl.w	lr, lr, r4
   36f9a:	f015 0f80 	tst.w	r5, #128	; 0x80
   36f9e:	ea46 060e 	orr.w	r6, r6, lr
   36fa2:	f104 0407 	add.w	r4, r4, #7
   36fa6:	d1f2      	bne.n	36f8e <_ZL28read_encoded_value_with_basehjPKhPj+0x6e>
   36fa8:	2c1f      	cmp	r4, #31
   36faa:	d8cd      	bhi.n	36f48 <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
   36fac:	066d      	lsls	r5, r5, #25
   36fae:	d5cb      	bpl.n	36f48 <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
   36fb0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   36fb4:	fa05 f404 	lsl.w	r4, r5, r4
   36fb8:	4326      	orrs	r6, r4
   36fba:	e7c6      	b.n	36f4a <_ZL28read_encoded_value_with_basehjPKhPj+0x2a>
   36fbc:	2600      	movs	r6, #0
   36fbe:	4610      	mov	r0, r2
   36fc0:	4634      	mov	r4, r6
   36fc2:	f810 5b01 	ldrb.w	r5, [r0], #1
   36fc6:	f005 0e7f 	and.w	lr, r5, #127	; 0x7f
   36fca:	fa0e fe04 	lsl.w	lr, lr, r4
   36fce:	062d      	lsls	r5, r5, #24
   36fd0:	ea46 060e 	orr.w	r6, r6, lr
   36fd4:	f104 0407 	add.w	r4, r4, #7
   36fd8:	d4f3      	bmi.n	36fc2 <_ZL28read_encoded_value_with_basehjPKhPj+0xa2>
   36fda:	e7b5      	b.n	36f48 <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
   36fdc:	f7f4 ffde 	bl	2bf9c <abort>

00036fe0 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
   36fe0:	28ff      	cmp	r0, #255	; 0xff
   36fe2:	d022      	beq.n	3702a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4a>
   36fe4:	b508      	push	{r3, lr}
   36fe6:	f000 0370 	and.w	r3, r0, #112	; 0x70
   36fea:	2b30      	cmp	r3, #48	; 0x30
   36fec:	d018      	beq.n	37020 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x40>
   36fee:	d806      	bhi.n	36ffe <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1e>
   36ff0:	2b20      	cmp	r3, #32
   36ff2:	d10b      	bne.n	3700c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
   36ff4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   36ff8:	4608      	mov	r0, r1
   36ffa:	f004 bbde 	b.w	3b7ba <_Unwind_GetTextRelBase>
   36ffe:	2b40      	cmp	r3, #64	; 0x40
   37000:	d10a      	bne.n	37018 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
   37002:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   37006:	4608      	mov	r0, r1
   37008:	f7e9 b980 	b.w	2030c <_Unwind_GetRegionStart>
   3700c:	d802      	bhi.n	37014 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x34>
   3700e:	f010 0f60 	tst.w	r0, #96	; 0x60
   37012:	d003      	beq.n	3701c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3c>
   37014:	f7f4 ffc2 	bl	2bf9c <abort>
   37018:	2b50      	cmp	r3, #80	; 0x50
   3701a:	d1fb      	bne.n	37014 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x34>
   3701c:	2000      	movs	r0, #0
   3701e:	bd08      	pop	{r3, pc}
   37020:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   37024:	4608      	mov	r0, r1
   37026:	f004 bbc5 	b.w	3b7b4 <_Unwind_GetDataRelBase>
   3702a:	2000      	movs	r0, #0
   3702c:	4770      	bx	lr
   3702e:	bf00      	nop

00037030 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
   37030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   37032:	460c      	mov	r4, r1
   37034:	4615      	mov	r5, r2
   37036:	4606      	mov	r6, r0
   37038:	b108      	cbz	r0, 3703e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
   3703a:	f7e9 f967 	bl	2030c <_Unwind_GetRegionStart>
   3703e:	6028      	str	r0, [r5, #0]
   37040:	f814 7b01 	ldrb.w	r7, [r4], #1
   37044:	2fff      	cmp	r7, #255	; 0xff
   37046:	d129      	bne.n	3709c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x6c>
   37048:	6068      	str	r0, [r5, #4]
   3704a:	4620      	mov	r0, r4
   3704c:	f810 3b01 	ldrb.w	r3, [r0], #1
   37050:	752b      	strb	r3, [r5, #20]
   37052:	2bff      	cmp	r3, #255	; 0xff
   37054:	d033      	beq.n	370be <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x8e>
   37056:	2310      	movs	r3, #16
   37058:	2400      	movs	r4, #0
   3705a:	752b      	strb	r3, [r5, #20]
   3705c:	4622      	mov	r2, r4
   3705e:	f810 1b01 	ldrb.w	r1, [r0], #1
   37062:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   37066:	4093      	lsls	r3, r2
   37068:	0609      	lsls	r1, r1, #24
   3706a:	ea44 0403 	orr.w	r4, r4, r3
   3706e:	f102 0207 	add.w	r2, r2, #7
   37072:	d4f4      	bmi.n	3705e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x2e>
   37074:	4404      	add	r4, r0
   37076:	60ec      	str	r4, [r5, #12]
   37078:	f810 3b01 	ldrb.w	r3, [r0], #1
   3707c:	756b      	strb	r3, [r5, #21]
   3707e:	2400      	movs	r4, #0
   37080:	4622      	mov	r2, r4
   37082:	f810 1b01 	ldrb.w	r1, [r0], #1
   37086:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   3708a:	4093      	lsls	r3, r2
   3708c:	431c      	orrs	r4, r3
   3708e:	060b      	lsls	r3, r1, #24
   37090:	f102 0207 	add.w	r2, r2, #7
   37094:	d4f5      	bmi.n	37082 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x52>
   37096:	4404      	add	r4, r0
   37098:	612c      	str	r4, [r5, #16]
   3709a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3709c:	4631      	mov	r1, r6
   3709e:	4638      	mov	r0, r7
   370a0:	f7ff ff9e 	bl	36fe0 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   370a4:	4622      	mov	r2, r4
   370a6:	4601      	mov	r1, r0
   370a8:	1d2b      	adds	r3, r5, #4
   370aa:	4638      	mov	r0, r7
   370ac:	f7ff ff38 	bl	36f20 <_ZL28read_encoded_value_with_basehjPKhPj>
   370b0:	4604      	mov	r4, r0
   370b2:	4620      	mov	r0, r4
   370b4:	f810 3b01 	ldrb.w	r3, [r0], #1
   370b8:	752b      	strb	r3, [r5, #20]
   370ba:	2bff      	cmp	r3, #255	; 0xff
   370bc:	d1cb      	bne.n	37056 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x26>
   370be:	2300      	movs	r3, #0
   370c0:	60eb      	str	r3, [r5, #12]
   370c2:	e7d9      	b.n	37078 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x48>

000370c4 <__gxx_personality_v0>:
   370c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   370c8:	f000 0403 	and.w	r4, r0, #3
   370cc:	b093      	sub	sp, #76	; 0x4c
   370ce:	2300      	movs	r3, #0
   370d0:	2c01      	cmp	r4, #1
   370d2:	9308      	str	r3, [sp, #32]
   370d4:	4688      	mov	r8, r1
   370d6:	4617      	mov	r7, r2
   370d8:	d013      	beq.n	37102 <__gxx_personality_v0+0x3e>
   370da:	2c02      	cmp	r4, #2
   370dc:	d108      	bne.n	370f0 <__gxx_personality_v0+0x2c>
   370de:	4639      	mov	r1, r7
   370e0:	4640      	mov	r0, r8
   370e2:	f7e9 f8fd 	bl	202e0 <__gnu_unwind_frame>
   370e6:	b940      	cbnz	r0, 370fa <__gxx_personality_v0+0x36>
   370e8:	2008      	movs	r0, #8
   370ea:	b013      	add	sp, #76	; 0x4c
   370ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   370f0:	2c00      	cmp	r4, #0
   370f2:	f000 8094 	beq.w	3721e <__gxx_personality_v0+0x15a>
   370f6:	f7f4 ff51 	bl	2bf9c <abort>
   370fa:	2009      	movs	r0, #9
   370fc:	b013      	add	sp, #76	; 0x4c
   370fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37102:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
   37106:	f010 0408 	ands.w	r4, r0, #8
   3710a:	f8cd a000 	str.w	sl, [sp]
   3710e:	f000 809d 	beq.w	3724c <__gxx_personality_v0+0x188>
   37112:	f044 0202 	orr.w	r2, r4, #2
   37116:	9202      	str	r2, [sp, #8]
   37118:	910c      	str	r1, [sp, #48]	; 0x30
   3711a:	220c      	movs	r2, #12
   3711c:	4619      	mov	r1, r3
   3711e:	4638      	mov	r0, r7
   37120:	f7e8 fb84 	bl	1f82c <_Unwind_VRS_Set>
   37124:	4638      	mov	r0, r7
   37126:	f7e9 f8f7 	bl	20318 <_Unwind_GetLanguageSpecificData>
   3712a:	4683      	mov	fp, r0
   3712c:	2800      	cmp	r0, #0
   3712e:	d0d6      	beq.n	370de <__gxx_personality_v0+0x1a>
   37130:	4652      	mov	r2, sl
   37132:	4601      	mov	r1, r0
   37134:	4638      	mov	r0, r7
   37136:	f7ff ff7b 	bl	37030 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   3713a:	4639      	mov	r1, r7
   3713c:	4605      	mov	r5, r0
   3713e:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
   37142:	f7ff ff4d 	bl	36fe0 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   37146:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
   3714a:	2300      	movs	r3, #0
   3714c:	900e      	str	r0, [sp, #56]	; 0x38
   3714e:	4619      	mov	r1, r3
   37150:	f8cd 9000 	str.w	r9, [sp]
   37154:	220f      	movs	r2, #15
   37156:	4638      	mov	r0, r7
   37158:	f7e8 fb42 	bl	1f7e0 <_Unwind_VRS_Get>
   3715c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   3715e:	f023 0301 	bic.w	r3, r3, #1
   37162:	1e5e      	subs	r6, r3, #1
   37164:	9b10      	ldr	r3, [sp, #64]	; 0x40
   37166:	429d      	cmp	r5, r3
   37168:	d237      	bcs.n	371da <__gxx_personality_v0+0x116>
   3716a:	f89d 4045 	ldrb.w	r4, [sp, #69]	; 0x45
   3716e:	2100      	movs	r1, #0
   37170:	4620      	mov	r0, r4
   37172:	f7ff ff35 	bl	36fe0 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   37176:	462a      	mov	r2, r5
   37178:	4601      	mov	r1, r0
   3717a:	ab09      	add	r3, sp, #36	; 0x24
   3717c:	4620      	mov	r0, r4
   3717e:	f7ff fecf 	bl	36f20 <_ZL28read_encoded_value_with_basehjPKhPj>
   37182:	f89d 5045 	ldrb.w	r5, [sp, #69]	; 0x45
   37186:	4604      	mov	r4, r0
   37188:	2100      	movs	r1, #0
   3718a:	4628      	mov	r0, r5
   3718c:	f7ff ff28 	bl	36fe0 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   37190:	4622      	mov	r2, r4
   37192:	4601      	mov	r1, r0
   37194:	ab0a      	add	r3, sp, #40	; 0x28
   37196:	4628      	mov	r0, r5
   37198:	f7ff fec2 	bl	36f20 <_ZL28read_encoded_value_with_basehjPKhPj>
   3719c:	f89d 5045 	ldrb.w	r5, [sp, #69]	; 0x45
   371a0:	4604      	mov	r4, r0
   371a2:	2100      	movs	r1, #0
   371a4:	4628      	mov	r0, r5
   371a6:	f7ff ff1b 	bl	36fe0 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   371aa:	4622      	mov	r2, r4
   371ac:	4601      	mov	r1, r0
   371ae:	464b      	mov	r3, r9
   371b0:	4628      	mov	r0, r5
   371b2:	f7ff feb5 	bl	36f20 <_ZL28read_encoded_value_with_basehjPKhPj>
   371b6:	2400      	movs	r4, #0
   371b8:	4605      	mov	r5, r0
   371ba:	4622      	mov	r2, r4
   371bc:	f815 1b01 	ldrb.w	r1, [r5], #1
   371c0:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   371c4:	4093      	lsls	r3, r2
   371c6:	431c      	orrs	r4, r3
   371c8:	060b      	lsls	r3, r1, #24
   371ca:	f102 0207 	add.w	r2, r2, #7
   371ce:	d4f5      	bmi.n	371bc <__gxx_personality_v0+0xf8>
   371d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   371d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   371d4:	4413      	add	r3, r2
   371d6:	42b3      	cmp	r3, r6
   371d8:	d919      	bls.n	3720e <__gxx_personality_v0+0x14a>
   371da:	9b02      	ldr	r3, [sp, #8]
   371dc:	07d8      	lsls	r0, r3, #31
   371de:	d530      	bpl.n	37242 <__gxx_personality_v0+0x17e>
   371e0:	2400      	movs	r4, #0
   371e2:	9403      	str	r4, [sp, #12]
   371e4:	2300      	movs	r3, #0
   371e6:	4619      	mov	r1, r3
   371e8:	f8cd 9000 	str.w	r9, [sp]
   371ec:	4638      	mov	r0, r7
   371ee:	220d      	movs	r2, #13
   371f0:	9d08      	ldr	r5, [sp, #32]
   371f2:	f7e8 faf5 	bl	1f7e0 <_Unwind_VRS_Get>
   371f6:	9b03      	ldr	r3, [sp, #12]
   371f8:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
   371fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   371fe:	f8c8 b02c 	str.w	fp, [r8, #44]	; 0x2c
   37202:	e9c8 5409 	strd	r5, r4, [r8, #36]	; 0x24
   37206:	2006      	movs	r0, #6
   37208:	f8c8 3020 	str.w	r3, [r8, #32]
   3720c:	e76d      	b.n	370ea <__gxx_personality_v0+0x26>
   3720e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   37210:	4413      	add	r3, r2
   37212:	42b3      	cmp	r3, r6
   37214:	d86e      	bhi.n	372f4 <__gxx_personality_v0+0x230>
   37216:	9b10      	ldr	r3, [sp, #64]	; 0x40
   37218:	42ab      	cmp	r3, r5
   3721a:	d8a6      	bhi.n	3716a <__gxx_personality_v0+0xa6>
   3721c:	e7dd      	b.n	371da <__gxx_personality_v0+0x116>
   3721e:	0702      	lsls	r2, r0, #28
   37220:	f53f af5d 	bmi.w	370de <__gxx_personality_v0+0x1a>
   37224:	2301      	movs	r3, #1
   37226:	9302      	str	r3, [sp, #8]
   37228:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
   3722c:	2300      	movs	r3, #0
   3722e:	f8cd a000 	str.w	sl, [sp]
   37232:	220c      	movs	r2, #12
   37234:	4619      	mov	r1, r3
   37236:	4638      	mov	r0, r7
   37238:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
   3723c:	f7e8 faf6 	bl	1f82c <_Unwind_VRS_Set>
   37240:	e770      	b.n	37124 <__gxx_personality_v0+0x60>
   37242:	9b02      	ldr	r3, [sp, #8]
   37244:	071a      	lsls	r2, r3, #28
   37246:	d552      	bpl.n	372ee <__gxx_personality_v0+0x22a>
   37248:	f000 f9a4 	bl	37594 <_ZSt9terminatev>
   3724c:	6a0d      	ldr	r5, [r1, #32]
   3724e:	4623      	mov	r3, r4
   37250:	220d      	movs	r2, #13
   37252:	4621      	mov	r1, r4
   37254:	4638      	mov	r0, r7
   37256:	f7e8 fac3 	bl	1f7e0 <_Unwind_VRS_Get>
   3725a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   3725c:	429d      	cmp	r5, r3
   3725e:	d002      	beq.n	37266 <__gxx_personality_v0+0x1a2>
   37260:	2302      	movs	r3, #2
   37262:	9302      	str	r3, [sp, #8]
   37264:	e7e2      	b.n	3722c <__gxx_personality_v0+0x168>
   37266:	4623      	mov	r3, r4
   37268:	f8cd a000 	str.w	sl, [sp]
   3726c:	4621      	mov	r1, r4
   3726e:	220c      	movs	r2, #12
   37270:	4638      	mov	r0, r7
   37272:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
   37276:	f7e8 fad9 	bl	1f82c <_Unwind_VRS_Set>
   3727a:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
   3727e:	9303      	str	r3, [sp, #12]
   37280:	b3ab      	cbz	r3, 372ee <__gxx_personality_v0+0x22a>
   37282:	e9d8 4b0a 	ldrd	r4, fp, [r8, #40]	; 0x28
   37286:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
   3728a:	2c00      	cmp	r4, #0
   3728c:	db4e      	blt.n	3732c <__gxx_personality_v0+0x268>
   3728e:	2503      	movs	r5, #3
   37290:	2300      	movs	r3, #0
   37292:	461a      	mov	r2, r3
   37294:	4619      	mov	r1, r3
   37296:	f8cd 9000 	str.w	r9, [sp]
   3729a:	4638      	mov	r0, r7
   3729c:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   372a0:	f7e8 fac4 	bl	1f82c <_Unwind_VRS_Set>
   372a4:	2300      	movs	r3, #0
   372a6:	4619      	mov	r1, r3
   372a8:	2201      	movs	r2, #1
   372aa:	f8cd 9000 	str.w	r9, [sp]
   372ae:	4638      	mov	r0, r7
   372b0:	940b      	str	r4, [sp, #44]	; 0x2c
   372b2:	f7e8 fabb 	bl	1f82c <_Unwind_VRS_Set>
   372b6:	2300      	movs	r3, #0
   372b8:	4619      	mov	r1, r3
   372ba:	220f      	movs	r2, #15
   372bc:	f8cd 9000 	str.w	r9, [sp]
   372c0:	4638      	mov	r0, r7
   372c2:	f7e8 fa8d 	bl	1f7e0 <_Unwind_VRS_Get>
   372c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   372c8:	9903      	ldr	r1, [sp, #12]
   372ca:	f8cd 9000 	str.w	r9, [sp]
   372ce:	f002 0201 	and.w	r2, r2, #1
   372d2:	430a      	orrs	r2, r1
   372d4:	2300      	movs	r3, #0
   372d6:	920b      	str	r2, [sp, #44]	; 0x2c
   372d8:	4638      	mov	r0, r7
   372da:	220f      	movs	r2, #15
   372dc:	4619      	mov	r1, r3
   372de:	f7e8 faa5 	bl	1f82c <_Unwind_VRS_Set>
   372e2:	2d02      	cmp	r5, #2
   372e4:	d01d      	beq.n	37322 <__gxx_personality_v0+0x25e>
   372e6:	2007      	movs	r0, #7
   372e8:	b013      	add	sp, #76	; 0x4c
   372ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   372ee:	4640      	mov	r0, r8
   372f0:	f000 fcec 	bl	37ccc <__cxa_call_terminate>
   372f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   372f6:	2b00      	cmp	r3, #0
   372f8:	f43f aef1 	beq.w	370de <__gxx_personality_v0+0x1a>
   372fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   372fe:	4413      	add	r3, r2
   37300:	9303      	str	r3, [sp, #12]
   37302:	2c00      	cmp	r4, #0
   37304:	d138      	bne.n	37378 <__gxx_personality_v0+0x2b4>
   37306:	2b00      	cmp	r3, #0
   37308:	f43f aee9 	beq.w	370de <__gxx_personality_v0+0x1a>
   3730c:	9b02      	ldr	r3, [sp, #8]
   3730e:	07dd      	lsls	r5, r3, #31
   37310:	f53f aee5 	bmi.w	370de <__gxx_personality_v0+0x1a>
   37314:	9b02      	ldr	r3, [sp, #8]
   37316:	071b      	lsls	r3, r3, #28
   37318:	f140 8123 	bpl.w	37562 <__gxx_personality_v0+0x49e>
   3731c:	2400      	movs	r4, #0
   3731e:	2502      	movs	r5, #2
   37320:	e7b6      	b.n	37290 <__gxx_personality_v0+0x1cc>
   37322:	4640      	mov	r0, r8
   37324:	f7ff fd76 	bl	36e14 <__cxa_begin_cleanup>
   37328:	2007      	movs	r0, #7
   3732a:	e6de      	b.n	370ea <__gxx_personality_v0+0x26>
   3732c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
   37330:	1b1b      	subs	r3, r3, r4
   37332:	461e      	mov	r6, r3
   37334:	4652      	mov	r2, sl
   37336:	4659      	mov	r1, fp
   37338:	4638      	mov	r0, r7
   3733a:	f7ff fe79 	bl	37030 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   3733e:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
   37342:	4639      	mov	r1, r7
   37344:	f7ff fe4c 	bl	36fe0 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   37348:	900e      	str	r0, [sp, #56]	; 0x38
   3734a:	4605      	mov	r5, r0
   3734c:	980f      	ldr	r0, [sp, #60]	; 0x3c
   3734e:	f850 3026 	ldr.w	r3, [r0, r6, lsl #2]
   37352:	eb00 0086 	add.w	r0, r0, r6, lsl #2
   37356:	b133      	cbz	r3, 37366 <__gxx_personality_v0+0x2a2>
   37358:	4602      	mov	r2, r0
   3735a:	2300      	movs	r3, #0
   3735c:	f852 1f04 	ldr.w	r1, [r2, #4]!
   37360:	3301      	adds	r3, #1
   37362:	2900      	cmp	r1, #0
   37364:	d1fa      	bne.n	3735c <__gxx_personality_v0+0x298>
   37366:	e9c8 350a 	strd	r3, r5, [r8, #40]	; 0x28
   3736a:	2304      	movs	r3, #4
   3736c:	f8c8 0034 	str.w	r0, [r8, #52]	; 0x34
   37370:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
   37374:	2503      	movs	r5, #3
   37376:	e78b      	b.n	37290 <__gxx_personality_v0+0x1cc>
   37378:	9e10      	ldr	r6, [sp, #64]	; 0x40
   3737a:	9b03      	ldr	r3, [sp, #12]
   3737c:	3c01      	subs	r4, #1
   3737e:	4426      	add	r6, r4
   37380:	2b00      	cmp	r3, #0
   37382:	f43f aeac 	beq.w	370de <__gxx_personality_v0+0x1a>
   37386:	9b02      	ldr	r3, [sp, #8]
   37388:	2e00      	cmp	r6, #0
   3738a:	f000 80e2 	beq.w	37552 <__gxx_personality_v0+0x48e>
   3738e:	f013 0308 	ands.w	r3, r3, #8
   37392:	9304      	str	r3, [sp, #16]
   37394:	f000 80c9 	beq.w	3752a <__gxx_personality_v0+0x466>
   37398:	2347      	movs	r3, #71	; 0x47
   3739a:	f888 3000 	strb.w	r3, [r8]
   3739e:	234e      	movs	r3, #78	; 0x4e
   373a0:	f888 3001 	strb.w	r3, [r8, #1]
   373a4:	2355      	movs	r3, #85	; 0x55
   373a6:	f888 3002 	strb.w	r3, [r8, #2]
   373aa:	2343      	movs	r3, #67	; 0x43
   373ac:	f888 3003 	strb.w	r3, [r8, #3]
   373b0:	2346      	movs	r3, #70	; 0x46
   373b2:	f888 3004 	strb.w	r3, [r8, #4]
   373b6:	234f      	movs	r3, #79	; 0x4f
   373b8:	f888 3005 	strb.w	r3, [r8, #5]
   373bc:	2352      	movs	r3, #82	; 0x52
   373be:	f888 3006 	strb.w	r3, [r8, #6]
   373c2:	2300      	movs	r3, #0
   373c4:	f888 3007 	strb.w	r3, [r8, #7]
   373c8:	2300      	movs	r3, #0
   373ca:	f8cd b018 	str.w	fp, [sp, #24]
   373ce:	9705      	str	r7, [sp, #20]
   373d0:	469b      	mov	fp, r3
   373d2:	f8cd a01c 	str.w	sl, [sp, #28]
   373d6:	2400      	movs	r4, #0
   373d8:	4622      	mov	r2, r4
   373da:	f816 1b01 	ldrb.w	r1, [r6], #1
   373de:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   373e2:	4093      	lsls	r3, r2
   373e4:	0608      	lsls	r0, r1, #24
   373e6:	ea44 0403 	orr.w	r4, r4, r3
   373ea:	f102 0207 	add.w	r2, r2, #7
   373ee:	d4f4      	bmi.n	373da <__gxx_personality_v0+0x316>
   373f0:	2a1f      	cmp	r2, #31
   373f2:	d805      	bhi.n	37400 <__gxx_personality_v0+0x33c>
   373f4:	064b      	lsls	r3, r1, #25
   373f6:	d503      	bpl.n	37400 <__gxx_personality_v0+0x33c>
   373f8:	2301      	movs	r3, #1
   373fa:	4093      	lsls	r3, r2
   373fc:	425b      	negs	r3, r3
   373fe:	431c      	orrs	r4, r3
   37400:	2500      	movs	r5, #0
   37402:	4630      	mov	r0, r6
   37404:	462a      	mov	r2, r5
   37406:	f810 1b01 	ldrb.w	r1, [r0], #1
   3740a:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   3740e:	4093      	lsls	r3, r2
   37410:	060f      	lsls	r7, r1, #24
   37412:	ea45 0503 	orr.w	r5, r5, r3
   37416:	f102 0207 	add.w	r2, r2, #7
   3741a:	d4f4      	bmi.n	37406 <__gxx_personality_v0+0x342>
   3741c:	2a1f      	cmp	r2, #31
   3741e:	d805      	bhi.n	3742c <__gxx_personality_v0+0x368>
   37420:	0649      	lsls	r1, r1, #25
   37422:	d503      	bpl.n	3742c <__gxx_personality_v0+0x368>
   37424:	2301      	movs	r3, #1
   37426:	4093      	lsls	r3, r2
   37428:	425b      	negs	r3, r3
   3742a:	431d      	orrs	r5, r3
   3742c:	2c00      	cmp	r4, #0
   3742e:	d037      	beq.n	374a0 <__gxx_personality_v0+0x3dc>
   37430:	dc39      	bgt.n	374a6 <__gxx_personality_v0+0x3e2>
   37432:	f1b8 0f00 	cmp.w	r8, #0
   37436:	d002      	beq.n	3743e <__gxx_personality_v0+0x37a>
   37438:	9b04      	ldr	r3, [sp, #16]
   3743a:	2b00      	cmp	r3, #0
   3743c:	d050      	beq.n	374e0 <__gxx_personality_v0+0x41c>
   3743e:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
   37442:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   37444:	ebaa 0a04 	sub.w	sl, sl, r4
   37448:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
   3744c:	b1bb      	cbz	r3, 3747e <__gxx_personality_v0+0x3ba>
   3744e:	2d00      	cmp	r5, #0
   37450:	d075      	beq.n	3753e <__gxx_personality_v0+0x47a>
   37452:	442e      	add	r6, r5
   37454:	e7bf      	b.n	373d6 <__gxx_personality_v0+0x312>
   37456:	00a3      	lsls	r3, r4, #2
   37458:	425b      	negs	r3, r3
   3745a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   3745c:	990e      	ldr	r1, [sp, #56]	; 0x38
   3745e:	441a      	add	r2, r3
   37460:	464b      	mov	r3, r9
   37462:	f7ff fd5d 	bl	36f20 <_ZL28read_encoded_value_with_basehjPKhPj>
   37466:	990b      	ldr	r1, [sp, #44]	; 0x2c
   37468:	b149      	cbz	r1, 3747e <__gxx_personality_v0+0x3ba>
   3746a:	f1b8 0f00 	cmp.w	r8, #0
   3746e:	d0ee      	beq.n	3744e <__gxx_personality_v0+0x38a>
   37470:	ab08      	add	r3, sp, #32
   37472:	2200      	movs	r2, #0
   37474:	4640      	mov	r0, r8
   37476:	f7ff fc73 	bl	36d60 <__cxa_type_match>
   3747a:	2800      	cmp	r0, #0
   3747c:	d0e7      	beq.n	3744e <__gxx_personality_v0+0x38a>
   3747e:	9b02      	ldr	r3, [sp, #8]
   37480:	f8dd a01c 	ldr.w	sl, [sp, #28]
   37484:	07d9      	lsls	r1, r3, #31
   37486:	e9dd 7b05 	ldrd	r7, fp, [sp, #20]
   3748a:	f53f aeab 	bmi.w	371e4 <__gxx_personality_v0+0x120>
   3748e:	9b04      	ldr	r3, [sp, #16]
   37490:	2b00      	cmp	r3, #0
   37492:	f43f aefa 	beq.w	3728a <__gxx_personality_v0+0x1c6>
   37496:	2c00      	cmp	r4, #0
   37498:	f6bf aef9 	bge.w	3728e <__gxx_personality_v0+0x1ca>
   3749c:	f000 f888 	bl	375b0 <_ZSt10unexpectedv>
   374a0:	f04f 0b01 	mov.w	fp, #1
   374a4:	e7d3      	b.n	3744e <__gxx_personality_v0+0x38a>
   374a6:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
   374aa:	28ff      	cmp	r0, #255	; 0xff
   374ac:	d031      	beq.n	37512 <__gxx_personality_v0+0x44e>
   374ae:	f000 0307 	and.w	r3, r0, #7
   374b2:	2b04      	cmp	r3, #4
   374b4:	f63f ae1f 	bhi.w	370f6 <__gxx_personality_v0+0x32>
   374b8:	a201      	add	r2, pc, #4	; (adr r2, 374c0 <__gxx_personality_v0+0x3fc>)
   374ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   374be:	bf00      	nop
   374c0:	00037457 	.word	0x00037457
   374c4:	000370f7 	.word	0x000370f7
   374c8:	000374db 	.word	0x000374db
   374cc:	00037457 	.word	0x00037457
   374d0:	000374d5 	.word	0x000374d5
   374d4:	00e3      	lsls	r3, r4, #3
   374d6:	425b      	negs	r3, r3
   374d8:	e7bf      	b.n	3745a <__gxx_personality_v0+0x396>
   374da:	0063      	lsls	r3, r4, #1
   374dc:	425b      	negs	r3, r3
   374de:	e7bc      	b.n	3745a <__gxx_personality_v0+0x396>
   374e0:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
   374e4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   374e6:	9b08      	ldr	r3, [sp, #32]
   374e8:	930b      	str	r3, [sp, #44]	; 0x2c
   374ea:	ebaa 0a04 	sub.w	sl, sl, r4
   374ee:	f857 102a 	ldr.w	r1, [r7, sl, lsl #2]
   374f2:	eb07 078a 	add.w	r7, r7, sl, lsl #2
   374f6:	b919      	cbnz	r1, 37500 <__gxx_personality_v0+0x43c>
   374f8:	e00d      	b.n	37516 <__gxx_personality_v0+0x452>
   374fa:	f857 1f04 	ldr.w	r1, [r7, #4]!
   374fe:	b151      	cbz	r1, 37516 <__gxx_personality_v0+0x452>
   37500:	4439      	add	r1, r7
   37502:	464b      	mov	r3, r9
   37504:	2200      	movs	r2, #0
   37506:	4640      	mov	r0, r8
   37508:	f7ff fc2a 	bl	36d60 <__cxa_type_match>
   3750c:	2800      	cmp	r0, #0
   3750e:	d0f4      	beq.n	374fa <__gxx_personality_v0+0x436>
   37510:	e79d      	b.n	3744e <__gxx_personality_v0+0x38a>
   37512:	2300      	movs	r3, #0
   37514:	e7a1      	b.n	3745a <__gxx_personality_v0+0x396>
   37516:	9b02      	ldr	r3, [sp, #8]
   37518:	07da      	lsls	r2, r3, #31
   3751a:	4656      	mov	r6, sl
   3751c:	e9dd 7b05 	ldrd	r7, fp, [sp, #20]
   37520:	f8dd a01c 	ldr.w	sl, [sp, #28]
   37524:	f53f ae5e 	bmi.w	371e4 <__gxx_personality_v0+0x120>
   37528:	e704      	b.n	37334 <__gxx_personality_v0+0x270>
   3752a:	f898 3007 	ldrb.w	r3, [r8, #7]
   3752e:	2b01      	cmp	r3, #1
   37530:	bf0c      	ite	eq
   37532:	f858 3c20 	ldreq.w	r3, [r8, #-32]
   37536:	f108 0358 	addne.w	r3, r8, #88	; 0x58
   3753a:	9308      	str	r3, [sp, #32]
   3753c:	e744      	b.n	373c8 <__gxx_personality_v0+0x304>
   3753e:	465b      	mov	r3, fp
   37540:	9f05      	ldr	r7, [sp, #20]
   37542:	2b00      	cmp	r3, #0
   37544:	f43f adcb 	beq.w	370de <__gxx_personality_v0+0x1a>
   37548:	9b02      	ldr	r3, [sp, #8]
   3754a:	07db      	lsls	r3, r3, #31
   3754c:	f53f adc7 	bmi.w	370de <__gxx_personality_v0+0x1a>
   37550:	e6e4      	b.n	3731c <__gxx_personality_v0+0x258>
   37552:	07de      	lsls	r6, r3, #31
   37554:	f53f adc3 	bmi.w	370de <__gxx_personality_v0+0x1a>
   37558:	9b02      	ldr	r3, [sp, #8]
   3755a:	f013 0408 	ands.w	r4, r3, #8
   3755e:	f47f aedd 	bne.w	3731c <__gxx_personality_v0+0x258>
   37562:	2502      	movs	r5, #2
   37564:	e694      	b.n	37290 <__gxx_personality_v0+0x1cc>
   37566:	f000 fc33 	bl	37dd0 <__cxa_begin_catch>
   3756a:	e66d      	b.n	37248 <__gxx_personality_v0+0x184>

0003756c <_ZN10__cxxabiv111__terminateEPFvvE>:
   3756c:	b500      	push	{lr}
   3756e:	b083      	sub	sp, #12
   37570:	4780      	blx	r0
   37572:	f7f4 fd13 	bl	2bf9c <abort>
   37576:	f000 fc2b 	bl	37dd0 <__cxa_begin_catch>
   3757a:	f7f4 fd0f 	bl	2bf9c <abort>
   3757e:	460c      	mov	r4, r1
   37580:	9001      	str	r0, [sp, #4]
   37582:	f000 fc63 	bl	37e4c <__cxa_end_catch>
   37586:	3401      	adds	r4, #1
   37588:	9801      	ldr	r0, [sp, #4]
   3758a:	d101      	bne.n	37590 <_ZN10__cxxabiv111__terminateEPFvvE+0x24>
   3758c:	f000 fbae 	bl	37cec <__cxa_call_unexpected>
   37590:	f7ff fbe0 	bl	36d54 <__cxa_end_cleanup>

00037594 <_ZSt9terminatev>:
   37594:	b508      	push	{r3, lr}
   37596:	4b03      	ldr	r3, [pc, #12]	; (375a4 <_ZSt9terminatev+0x10>)
   37598:	6818      	ldr	r0, [r3, #0]
   3759a:	f3bf 8f5b 	dmb	ish
   3759e:	f7ff ffe5 	bl	3756c <_ZN10__cxxabiv111__terminateEPFvvE>
   375a2:	bf00      	nop
   375a4:	10004af4 	.word	0x10004af4

000375a8 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
   375a8:	b508      	push	{r3, lr}
   375aa:	4780      	blx	r0
   375ac:	f7ff fff2 	bl	37594 <_ZSt9terminatev>

000375b0 <_ZSt10unexpectedv>:
   375b0:	b508      	push	{r3, lr}
   375b2:	4b03      	ldr	r3, [pc, #12]	; (375c0 <_ZSt10unexpectedv+0x10>)
   375b4:	6818      	ldr	r0, [r3, #0]
   375b6:	f3bf 8f5b 	dmb	ish
   375ba:	f7ff fff5 	bl	375a8 <_ZN10__cxxabiv112__unexpectedEPFvvE>
   375be:	bf00      	nop
   375c0:	10004af0 	.word	0x10004af0

000375c4 <_ZSt13get_terminatev>:
   375c4:	4b02      	ldr	r3, [pc, #8]	; (375d0 <_ZSt13get_terminatev+0xc>)
   375c6:	6818      	ldr	r0, [r3, #0]
   375c8:	f3bf 8f5b 	dmb	ish
   375cc:	4770      	bx	lr
   375ce:	bf00      	nop
   375d0:	10004af4 	.word	0x10004af4

000375d4 <_ZSt14get_unexpectedv>:
   375d4:	4b02      	ldr	r3, [pc, #8]	; (375e0 <_ZSt14get_unexpectedv+0xc>)
   375d6:	6818      	ldr	r0, [r3, #0]
   375d8:	f3bf 8f5b 	dmb	ish
   375dc:	4770      	bx	lr
   375de:	bf00      	nop
   375e0:	10004af0 	.word	0x10004af0

000375e4 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
   375e4:	b500      	push	{lr}
   375e6:	2801      	cmp	r0, #1
   375e8:	b083      	sub	sp, #12
   375ea:	d81d      	bhi.n	37628 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x44>
   375ec:	f3bf 8f5b 	dmb	ish
   375f0:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
   375f4:	e853 2f00 	ldrex	r2, [r3]
   375f8:	3a01      	subs	r2, #1
   375fa:	e843 2000 	strex	r0, r2, [r3]
   375fe:	2800      	cmp	r0, #0
   37600:	d1f8      	bne.n	375f4 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x10>
   37602:	f3bf 8f5b 	dmb	ish
   37606:	b962      	cbnz	r2, 37622 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3e>
   37608:	f851 3c1c 	ldr.w	r3, [r1, #-28]
   3760c:	f101 0058 	add.w	r0, r1, #88	; 0x58
   37610:	b113      	cbz	r3, 37618 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x34>
   37612:	9001      	str	r0, [sp, #4]
   37614:	4798      	blx	r3
   37616:	9801      	ldr	r0, [sp, #4]
   37618:	b003      	add	sp, #12
   3761a:	f85d eb04 	ldr.w	lr, [sp], #4
   3761e:	f7ff bb89 	b.w	36d34 <__cxa_free_exception>
   37622:	b003      	add	sp, #12
   37624:	f85d fb04 	ldr.w	pc, [sp], #4
   37628:	f851 0c14 	ldr.w	r0, [r1, #-20]
   3762c:	f7ff ff9e 	bl	3756c <_ZN10__cxxabiv111__terminateEPFvvE>

00037630 <__cxa_init_primary_exception>:
   37630:	b538      	push	{r3, r4, r5, lr}
   37632:	2500      	movs	r5, #0
   37634:	e940 121e 	strd	r1, r2, [r0, #-120]	; 0x78
   37638:	f840 5c80 	str.w	r5, [r0, #-128]
   3763c:	4604      	mov	r4, r0
   3763e:	f7ff ffc9 	bl	375d4 <_ZSt14get_unexpectedv>
   37642:	f844 0c70 	str.w	r0, [r4, #-112]
   37646:	f7ff ffbd 	bl	375c4 <_ZSt13get_terminatev>
   3764a:	2243      	movs	r2, #67	; 0x43
   3764c:	232b      	movs	r3, #43	; 0x2b
   3764e:	2147      	movs	r1, #71	; 0x47
   37650:	f804 2c55 	strb.w	r2, [r4, #-85]
   37654:	f804 2c54 	strb.w	r2, [r4, #-84]
   37658:	f804 3c53 	strb.w	r3, [r4, #-83]
   3765c:	f804 3c52 	strb.w	r3, [r4, #-82]
   37660:	224e      	movs	r2, #78	; 0x4e
   37662:	2355      	movs	r3, #85	; 0x55
   37664:	f804 1c58 	strb.w	r1, [r4, #-88]
   37668:	f804 5c51 	strb.w	r5, [r4, #-81]
   3766c:	4905      	ldr	r1, [pc, #20]	; (37684 <__cxa_init_primary_exception+0x54>)
   3766e:	f804 2c57 	strb.w	r2, [r4, #-87]
   37672:	f804 3c56 	strb.w	r3, [r4, #-86]
   37676:	f844 0c6c 	str.w	r0, [r4, #-108]
   3767a:	f844 1c50 	str.w	r1, [r4, #-80]
   3767e:	f1a4 0080 	sub.w	r0, r4, #128	; 0x80
   37682:	bd38      	pop	{r3, r4, r5, pc}
   37684:	000375e5 	.word	0x000375e5

00037688 <__cxa_throw>:
   37688:	b510      	push	{r4, lr}
   3768a:	b082      	sub	sp, #8
   3768c:	e9cd 2100 	strd	r2, r1, [sp]
   37690:	4604      	mov	r4, r0
   37692:	f7ff fc41 	bl	36f18 <__cxa_get_globals>
   37696:	4603      	mov	r3, r0
   37698:	6840      	ldr	r0, [r0, #4]
   3769a:	9a00      	ldr	r2, [sp, #0]
   3769c:	9901      	ldr	r1, [sp, #4]
   3769e:	3001      	adds	r0, #1
   376a0:	6058      	str	r0, [r3, #4]
   376a2:	4620      	mov	r0, r4
   376a4:	f7ff ffc4 	bl	37630 <__cxa_init_primary_exception>
   376a8:	4604      	mov	r4, r0
   376aa:	2301      	movs	r3, #1
   376ac:	f844 3b28 	str.w	r3, [r4], #40
   376b0:	4620      	mov	r0, r4
   376b2:	f7e8 fc39 	bl	1ff28 <_Unwind_RaiseException>
   376b6:	4620      	mov	r0, r4
   376b8:	f000 fb8a 	bl	37dd0 <__cxa_begin_catch>
   376bc:	f7ff ff6a 	bl	37594 <_ZSt9terminatev>

000376c0 <__cxa_rethrow>:
   376c0:	b510      	push	{r4, lr}
   376c2:	f7ff fc29 	bl	36f18 <__cxa_get_globals>
   376c6:	e9d0 4200 	ldrd	r4, r2, [r0]
   376ca:	3201      	adds	r2, #1
   376cc:	6042      	str	r2, [r0, #4]
   376ce:	b164      	cbz	r4, 376ea <__cxa_rethrow+0x2a>
   376d0:	f894 2020 	ldrb.w	r2, [r4, #32]
   376d4:	2a47      	cmp	r2, #71	; 0x47
   376d6:	d00a      	beq.n	376ee <__cxa_rethrow+0x2e>
   376d8:	2200      	movs	r2, #0
   376da:	6002      	str	r2, [r0, #0]
   376dc:	3420      	adds	r4, #32
   376de:	4620      	mov	r0, r4
   376e0:	f7e8 fc46 	bl	1ff70 <_Unwind_Resume_or_Rethrow>
   376e4:	4620      	mov	r0, r4
   376e6:	f000 fb73 	bl	37dd0 <__cxa_begin_catch>
   376ea:	f7ff ff53 	bl	37594 <_ZSt9terminatev>
   376ee:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   376f2:	2a4e      	cmp	r2, #78	; 0x4e
   376f4:	d1f0      	bne.n	376d8 <__cxa_rethrow+0x18>
   376f6:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   376fa:	2a55      	cmp	r2, #85	; 0x55
   376fc:	d1ec      	bne.n	376d8 <__cxa_rethrow+0x18>
   376fe:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
   37702:	2a43      	cmp	r2, #67	; 0x43
   37704:	d1e8      	bne.n	376d8 <__cxa_rethrow+0x18>
   37706:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   3770a:	2a43      	cmp	r2, #67	; 0x43
   3770c:	d1e4      	bne.n	376d8 <__cxa_rethrow+0x18>
   3770e:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   37712:	2a2b      	cmp	r2, #43	; 0x2b
   37714:	d1e0      	bne.n	376d8 <__cxa_rethrow+0x18>
   37716:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   3771a:	2a2b      	cmp	r2, #43	; 0x2b
   3771c:	d1dc      	bne.n	376d8 <__cxa_rethrow+0x18>
   3771e:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   37722:	2a01      	cmp	r2, #1
   37724:	d8d8      	bhi.n	376d8 <__cxa_rethrow+0x18>
   37726:	6962      	ldr	r2, [r4, #20]
   37728:	4252      	negs	r2, r2
   3772a:	6162      	str	r2, [r4, #20]
   3772c:	e7d6      	b.n	376dc <__cxa_rethrow+0x1c>
   3772e:	bf00      	nop

00037730 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
   37730:	b510      	push	{r4, lr}
   37732:	4b03      	ldr	r3, [pc, #12]	; (37740 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev+0x10>)
   37734:	6003      	str	r3, [r0, #0]
   37736:	4604      	mov	r4, r0
   37738:	f7ff f8ee 	bl	36918 <_ZNSt9type_infoD1Ev>
   3773c:	4620      	mov	r0, r4
   3773e:	bd10      	pop	{r4, pc}
   37740:	00043608 	.word	0x00043608

00037744 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
   37744:	b510      	push	{r4, lr}
   37746:	4b05      	ldr	r3, [pc, #20]	; (3775c <_ZN10__cxxabiv123__fundamental_type_infoD0Ev+0x18>)
   37748:	6003      	str	r3, [r0, #0]
   3774a:	4604      	mov	r4, r0
   3774c:	f7ff f8e4 	bl	36918 <_ZNSt9type_infoD1Ev>
   37750:	4620      	mov	r0, r4
   37752:	2108      	movs	r1, #8
   37754:	f7f8 f8dc 	bl	2f910 <_ZdlPvj>
   37758:	4620      	mov	r0, r4
   3775a:	bd10      	pop	{r4, pc}
   3775c:	00043608 	.word	0x00043608

00037760 <_ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj>:
   37760:	68c0      	ldr	r0, [r0, #12]
   37762:	68c9      	ldr	r1, [r1, #12]
   37764:	b410      	push	{r4}
   37766:	6804      	ldr	r4, [r0, #0]
   37768:	6924      	ldr	r4, [r4, #16]
   3776a:	3302      	adds	r3, #2
   3776c:	46a4      	mov	ip, r4
   3776e:	f85d 4b04 	ldr.w	r4, [sp], #4
   37772:	4760      	bx	ip

00037774 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>:
   37774:	b510      	push	{r4, lr}
   37776:	4b03      	ldr	r3, [pc, #12]	; (37784 <_ZN10__cxxabiv117__pbase_type_infoD1Ev+0x10>)
   37778:	6003      	str	r3, [r0, #0]
   3777a:	4604      	mov	r4, r0
   3777c:	f7ff f8cc 	bl	36918 <_ZNSt9type_infoD1Ev>
   37780:	4620      	mov	r0, r4
   37782:	bd10      	pop	{r4, pc}
   37784:	00043658 	.word	0x00043658

00037788 <_ZN10__cxxabiv117__pbase_type_infoD0Ev>:
   37788:	b510      	push	{r4, lr}
   3778a:	4b05      	ldr	r3, [pc, #20]	; (377a0 <_ZN10__cxxabiv117__pbase_type_infoD0Ev+0x18>)
   3778c:	6003      	str	r3, [r0, #0]
   3778e:	4604      	mov	r4, r0
   37790:	f7ff f8c2 	bl	36918 <_ZNSt9type_infoD1Ev>
   37794:	4620      	mov	r0, r4
   37796:	2110      	movs	r1, #16
   37798:	f7f8 f8ba 	bl	2f910 <_ZdlPvj>
   3779c:	4620      	mov	r0, r4
   3779e:	bd10      	pop	{r4, pc}
   377a0:	00043658 	.word	0x00043658

000377a4 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>:
   377a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   377a8:	4606      	mov	r6, r0
   377aa:	4690      	mov	r8, r2
   377ac:	461f      	mov	r7, r3
   377ae:	460d      	mov	r5, r1
   377b0:	f7ff f8ce 	bl	36950 <_ZNKSt9type_infoeqERKS_>
   377b4:	4604      	mov	r4, r0
   377b6:	b110      	cbz	r0, 377be <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1a>
   377b8:	4620      	mov	r0, r4
   377ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   377be:	4933      	ldr	r1, [pc, #204]	; (3788c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xe8>)
   377c0:	4628      	mov	r0, r5
   377c2:	f7ff f8c5 	bl	36950 <_ZNKSt9type_infoeqERKS_>
   377c6:	2800      	cmp	r0, #0
   377c8:	d12f      	bne.n	3782a <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x86>
   377ca:	6833      	ldr	r3, [r6, #0]
   377cc:	f853 0c04 	ldr.w	r0, [r3, #-4]
   377d0:	2d00      	cmp	r5, #0
   377d2:	d059      	beq.n	37888 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xe4>
   377d4:	682b      	ldr	r3, [r5, #0]
   377d6:	f853 1c04 	ldr.w	r1, [r3, #-4]
   377da:	f7ff f8b9 	bl	36950 <_ZNKSt9type_infoeqERKS_>
   377de:	b378      	cbz	r0, 37840 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x9c>
   377e0:	07fa      	lsls	r2, r7, #31
   377e2:	d5e9      	bpl.n	377b8 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x14>
   377e4:	68ab      	ldr	r3, [r5, #8]
   377e6:	68b1      	ldr	r1, [r6, #8]
   377e8:	f003 0060 	and.w	r0, r3, #96	; 0x60
   377ec:	f001 0260 	and.w	r2, r1, #96	; 0x60
   377f0:	ea30 0c02 	bics.w	ip, r0, r2
   377f4:	bf18      	it	ne
   377f6:	4013      	andne	r3, r2
   377f8:	ea23 0301 	bic.w	r3, r3, r1
   377fc:	ea22 0200 	bic.w	r2, r2, r0
   37800:	4313      	orrs	r3, r2
   37802:	d1d9      	bne.n	377b8 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x14>
   37804:	07cb      	lsls	r3, r1, #31
   37806:	6833      	ldr	r3, [r6, #0]
   37808:	699c      	ldr	r4, [r3, #24]
   3780a:	4b21      	ldr	r3, [pc, #132]	; (37890 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xec>)
   3780c:	bf58      	it	pl
   3780e:	f027 0701 	bicpl.w	r7, r7, #1
   37812:	429c      	cmp	r4, r3
   37814:	d130      	bne.n	37878 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xd4>
   37816:	68f0      	ldr	r0, [r6, #12]
   37818:	68e9      	ldr	r1, [r5, #12]
   3781a:	6802      	ldr	r2, [r0, #0]
   3781c:	6914      	ldr	r4, [r2, #16]
   3781e:	1cbb      	adds	r3, r7, #2
   37820:	4642      	mov	r2, r8
   37822:	46a4      	mov	ip, r4
   37824:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   37828:	4760      	bx	ip
   3782a:	6833      	ldr	r3, [r6, #0]
   3782c:	4919      	ldr	r1, [pc, #100]	; (37894 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xf0>)
   3782e:	f853 0c04 	ldr.w	r0, [r3, #-4]
   37832:	f7ff f88d 	bl	36950 <_ZNKSt9type_infoeqERKS_>
   37836:	b138      	cbz	r0, 37848 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xa4>
   37838:	f8c8 4000 	str.w	r4, [r8]
   3783c:	4604      	mov	r4, r0
   3783e:	e7bb      	b.n	377b8 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x14>
   37840:	4604      	mov	r4, r0
   37842:	4620      	mov	r0, r4
   37844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   37848:	6833      	ldr	r3, [r6, #0]
   3784a:	4913      	ldr	r1, [pc, #76]	; (37898 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xf4>)
   3784c:	f853 0c04 	ldr.w	r0, [r3, #-4]
   37850:	f7ff f87e 	bl	36950 <_ZNKSt9type_infoeqERKS_>
   37854:	4681      	mov	r9, r0
   37856:	2800      	cmp	r0, #0
   37858:	d0b7      	beq.n	377ca <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   3785a:	68f0      	ldr	r0, [r6, #12]
   3785c:	6803      	ldr	r3, [r0, #0]
   3785e:	68db      	ldr	r3, [r3, #12]
   37860:	4798      	blx	r3
   37862:	4604      	mov	r4, r0
   37864:	b118      	cbz	r0, 3786e <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xca>
   37866:	4b0d      	ldr	r3, [pc, #52]	; (3789c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xf8>)
   37868:	f8c8 3000 	str.w	r3, [r8]
   3786c:	e7a4      	b.n	377b8 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x14>
   3786e:	4b0c      	ldr	r3, [pc, #48]	; (378a0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xfc>)
   37870:	f8c8 3000 	str.w	r3, [r8]
   37874:	464c      	mov	r4, r9
   37876:	e79f      	b.n	377b8 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x14>
   37878:	463b      	mov	r3, r7
   3787a:	4642      	mov	r2, r8
   3787c:	4629      	mov	r1, r5
   3787e:	4630      	mov	r0, r6
   37880:	46a4      	mov	ip, r4
   37882:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   37886:	4760      	bx	ip
   37888:	f000 f9f2 	bl	37c70 <__cxa_bad_typeid>
   3788c:	000435bc 	.word	0x000435bc
   37890:	00037761 	.word	0x00037761
   37894:	0004332c 	.word	0x0004332c
   37898:	00043680 	.word	0x00043680
   3789c:	00043678 	.word	0x00043678
   378a0:	00043674 	.word	0x00043674

000378a4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
   378a4:	b570      	push	{r4, r5, r6, lr}
   378a6:	4b3b      	ldr	r3, [pc, #236]	; (37994 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf0>)
   378a8:	781a      	ldrb	r2, [r3, #0]
   378aa:	b082      	sub	sp, #8
   378ac:	2a00      	cmp	r2, #0
   378ae:	d141      	bne.n	37934 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x90>
   378b0:	2401      	movs	r4, #1
   378b2:	701c      	strb	r4, [r3, #0]
   378b4:	f000 fb10 	bl	37ed8 <__cxa_current_exception_type>
   378b8:	2800      	cmp	r0, #0
   378ba:	d031      	beq.n	37920 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x7c>
   378bc:	6844      	ldr	r4, [r0, #4]
   378be:	4d36      	ldr	r5, [pc, #216]	; (37998 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
   378c0:	7823      	ldrb	r3, [r4, #0]
   378c2:	2b2a      	cmp	r3, #42	; 0x2a
   378c4:	bf08      	it	eq
   378c6:	3401      	addeq	r4, #1
   378c8:	2200      	movs	r2, #0
   378ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   378ce:	4611      	mov	r1, r2
   378d0:	ab01      	add	r3, sp, #4
   378d2:	9001      	str	r0, [sp, #4]
   378d4:	4620      	mov	r0, r4
   378d6:	f7e7 fd15 	bl	1f304 <__cxa_demangle>
   378da:	682b      	ldr	r3, [r5, #0]
   378dc:	2230      	movs	r2, #48	; 0x30
   378de:	68db      	ldr	r3, [r3, #12]
   378e0:	4606      	mov	r6, r0
   378e2:	2101      	movs	r1, #1
   378e4:	482d      	ldr	r0, [pc, #180]	; (3799c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
   378e6:	f000 fc61 	bl	381ac <fwrite>
   378ea:	9b01      	ldr	r3, [sp, #4]
   378ec:	b193      	cbz	r3, 37914 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x70>
   378ee:	682b      	ldr	r3, [r5, #0]
   378f0:	4620      	mov	r0, r4
   378f2:	68d9      	ldr	r1, [r3, #12]
   378f4:	f000 fbfa 	bl	380ec <fputs>
   378f8:	682b      	ldr	r3, [r5, #0]
   378fa:	4829      	ldr	r0, [pc, #164]	; (379a0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
   378fc:	68db      	ldr	r3, [r3, #12]
   378fe:	2202      	movs	r2, #2
   37900:	2101      	movs	r1, #1
   37902:	f000 fc53 	bl	381ac <fwrite>
   37906:	9b01      	ldr	r3, [sp, #4]
   37908:	b913      	cbnz	r3, 37910 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6c>
   3790a:	4630      	mov	r0, r6
   3790c:	f000 fc66 	bl	381dc <free>
   37910:	f7ff fed6 	bl	376c0 <__cxa_rethrow>
   37914:	682b      	ldr	r3, [r5, #0]
   37916:	4630      	mov	r0, r6
   37918:	68d9      	ldr	r1, [r3, #12]
   3791a:	f000 fbe7 	bl	380ec <fputs>
   3791e:	e7eb      	b.n	378f8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x54>
   37920:	4b1d      	ldr	r3, [pc, #116]	; (37998 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
   37922:	4820      	ldr	r0, [pc, #128]	; (379a4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
   37924:	681b      	ldr	r3, [r3, #0]
   37926:	222d      	movs	r2, #45	; 0x2d
   37928:	68db      	ldr	r3, [r3, #12]
   3792a:	4621      	mov	r1, r4
   3792c:	f000 fc3e 	bl	381ac <fwrite>
   37930:	f7f4 fb34 	bl	2bf9c <abort>
   37934:	4b18      	ldr	r3, [pc, #96]	; (37998 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
   37936:	481c      	ldr	r0, [pc, #112]	; (379a8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
   37938:	681b      	ldr	r3, [r3, #0]
   3793a:	221d      	movs	r2, #29
   3793c:	68db      	ldr	r3, [r3, #12]
   3793e:	2101      	movs	r1, #1
   37940:	f000 fc34 	bl	381ac <fwrite>
   37944:	f7f4 fb2a 	bl	2bf9c <abort>
   37948:	2901      	cmp	r1, #1
   3794a:	460c      	mov	r4, r1
   3794c:	d119      	bne.n	37982 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xde>
   3794e:	f000 fa3f 	bl	37dd0 <__cxa_begin_catch>
   37952:	6803      	ldr	r3, [r0, #0]
   37954:	689b      	ldr	r3, [r3, #8]
   37956:	4798      	blx	r3
   37958:	682b      	ldr	r3, [r5, #0]
   3795a:	4621      	mov	r1, r4
   3795c:	68db      	ldr	r3, [r3, #12]
   3795e:	4604      	mov	r4, r0
   37960:	220b      	movs	r2, #11
   37962:	4812      	ldr	r0, [pc, #72]	; (379ac <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
   37964:	f000 fc22 	bl	381ac <fwrite>
   37968:	682b      	ldr	r3, [r5, #0]
   3796a:	4620      	mov	r0, r4
   3796c:	68d9      	ldr	r1, [r3, #12]
   3796e:	f000 fbbd 	bl	380ec <fputs>
   37972:	682b      	ldr	r3, [r5, #0]
   37974:	200a      	movs	r0, #10
   37976:	68d9      	ldr	r1, [r3, #12]
   37978:	f000 fb42 	bl	38000 <fputc>
   3797c:	f000 fa66 	bl	37e4c <__cxa_end_catch>
   37980:	e7d6      	b.n	37930 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
   37982:	f000 fa25 	bl	37dd0 <__cxa_begin_catch>
   37986:	f000 fa61 	bl	37e4c <__cxa_end_catch>
   3798a:	e7d1      	b.n	37930 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
   3798c:	f000 fa5e 	bl	37e4c <__cxa_end_catch>
   37990:	f7ff f9e0 	bl	36d54 <__cxa_end_cleanup>
   37994:	1001a664 	.word	0x1001a664
   37998:	100040c4 	.word	0x100040c4
   3799c:	000436dc 	.word	0x000436dc
   379a0:	00043710 	.word	0x00043710
   379a4:	00043714 	.word	0x00043714
   379a8:	000436bc 	.word	0x000436bc
   379ac:	00043744 	.word	0x00043744

000379b0 <_ZNKSt11logic_error4whatEv>:
   379b0:	6840      	ldr	r0, [r0, #4]
   379b2:	4770      	bx	lr

000379b4 <_ZNSt11logic_errorD1Ev>:
   379b4:	b510      	push	{r4, lr}
   379b6:	6843      	ldr	r3, [r0, #4]
   379b8:	4a0c      	ldr	r2, [pc, #48]	; (379ec <_ZNSt11logic_errorD1Ev+0x38>)
   379ba:	490d      	ldr	r1, [pc, #52]	; (379f0 <_ZNSt11logic_errorD1Ev+0x3c>)
   379bc:	4604      	mov	r4, r0
   379be:	f1a3 000c 	sub.w	r0, r3, #12
   379c2:	4290      	cmp	r0, r2
   379c4:	b082      	sub	sp, #8
   379c6:	6021      	str	r1, [r4, #0]
   379c8:	d105      	bne.n	379d6 <_ZNSt11logic_errorD1Ev+0x22>
   379ca:	4620      	mov	r0, r4
   379cc:	f7ff fa8c 	bl	36ee8 <_ZNSt9exceptionD1Ev>
   379d0:	4620      	mov	r0, r4
   379d2:	b002      	add	sp, #8
   379d4:	bd10      	pop	{r4, pc}
   379d6:	f853 2c04 	ldr.w	r2, [r3, #-4]
   379da:	1e51      	subs	r1, r2, #1
   379dc:	2a00      	cmp	r2, #0
   379de:	f843 1c04 	str.w	r1, [r3, #-4]
   379e2:	dcf2      	bgt.n	379ca <_ZNSt11logic_errorD1Ev+0x16>
   379e4:	a901      	add	r1, sp, #4
   379e6:	f000 f941 	bl	37c6c <_ZNSs4_Rep10_M_destroyERKSaIcE>
   379ea:	e7ee      	b.n	379ca <_ZNSt11logic_errorD1Ev+0x16>
   379ec:	1001a668 	.word	0x1001a668
   379f0:	000437b4 	.word	0x000437b4

000379f4 <_ZNSt12length_errorD1Ev>:
   379f4:	b510      	push	{r4, lr}
   379f6:	6843      	ldr	r3, [r0, #4]
   379f8:	4a0c      	ldr	r2, [pc, #48]	; (37a2c <_ZNSt12length_errorD1Ev+0x38>)
   379fa:	490d      	ldr	r1, [pc, #52]	; (37a30 <_ZNSt12length_errorD1Ev+0x3c>)
   379fc:	4604      	mov	r4, r0
   379fe:	f1a3 000c 	sub.w	r0, r3, #12
   37a02:	4290      	cmp	r0, r2
   37a04:	b082      	sub	sp, #8
   37a06:	6021      	str	r1, [r4, #0]
   37a08:	d105      	bne.n	37a16 <_ZNSt12length_errorD1Ev+0x22>
   37a0a:	4620      	mov	r0, r4
   37a0c:	f7ff fa6c 	bl	36ee8 <_ZNSt9exceptionD1Ev>
   37a10:	4620      	mov	r0, r4
   37a12:	b002      	add	sp, #8
   37a14:	bd10      	pop	{r4, pc}
   37a16:	f853 2c04 	ldr.w	r2, [r3, #-4]
   37a1a:	1e51      	subs	r1, r2, #1
   37a1c:	2a00      	cmp	r2, #0
   37a1e:	f843 1c04 	str.w	r1, [r3, #-4]
   37a22:	dcf2      	bgt.n	37a0a <_ZNSt12length_errorD1Ev+0x16>
   37a24:	a901      	add	r1, sp, #4
   37a26:	f000 f921 	bl	37c6c <_ZNSs4_Rep10_M_destroyERKSaIcE>
   37a2a:	e7ee      	b.n	37a0a <_ZNSt12length_errorD1Ev+0x16>
   37a2c:	1001a668 	.word	0x1001a668
   37a30:	000437b4 	.word	0x000437b4

00037a34 <_ZNSt12out_of_rangeD1Ev>:
   37a34:	b510      	push	{r4, lr}
   37a36:	6843      	ldr	r3, [r0, #4]
   37a38:	4a0c      	ldr	r2, [pc, #48]	; (37a6c <_ZNSt12out_of_rangeD1Ev+0x38>)
   37a3a:	490d      	ldr	r1, [pc, #52]	; (37a70 <_ZNSt12out_of_rangeD1Ev+0x3c>)
   37a3c:	4604      	mov	r4, r0
   37a3e:	f1a3 000c 	sub.w	r0, r3, #12
   37a42:	4290      	cmp	r0, r2
   37a44:	b082      	sub	sp, #8
   37a46:	6021      	str	r1, [r4, #0]
   37a48:	d105      	bne.n	37a56 <_ZNSt12out_of_rangeD1Ev+0x22>
   37a4a:	4620      	mov	r0, r4
   37a4c:	f7ff fa4c 	bl	36ee8 <_ZNSt9exceptionD1Ev>
   37a50:	4620      	mov	r0, r4
   37a52:	b002      	add	sp, #8
   37a54:	bd10      	pop	{r4, pc}
   37a56:	f853 2c04 	ldr.w	r2, [r3, #-4]
   37a5a:	1e51      	subs	r1, r2, #1
   37a5c:	2a00      	cmp	r2, #0
   37a5e:	f843 1c04 	str.w	r1, [r3, #-4]
   37a62:	dcf2      	bgt.n	37a4a <_ZNSt12out_of_rangeD1Ev+0x16>
   37a64:	a901      	add	r1, sp, #4
   37a66:	f000 f901 	bl	37c6c <_ZNSs4_Rep10_M_destroyERKSaIcE>
   37a6a:	e7ee      	b.n	37a4a <_ZNSt12out_of_rangeD1Ev+0x16>
   37a6c:	1001a668 	.word	0x1001a668
   37a70:	000437b4 	.word	0x000437b4

00037a74 <_ZNSt11logic_errorD0Ev>:
   37a74:	b510      	push	{r4, lr}
   37a76:	6843      	ldr	r3, [r0, #4]
   37a78:	4a0e      	ldr	r2, [pc, #56]	; (37ab4 <_ZNSt11logic_errorD0Ev+0x40>)
   37a7a:	490f      	ldr	r1, [pc, #60]	; (37ab8 <_ZNSt11logic_errorD0Ev+0x44>)
   37a7c:	4604      	mov	r4, r0
   37a7e:	f1a3 000c 	sub.w	r0, r3, #12
   37a82:	4290      	cmp	r0, r2
   37a84:	b082      	sub	sp, #8
   37a86:	6021      	str	r1, [r4, #0]
   37a88:	d108      	bne.n	37a9c <_ZNSt11logic_errorD0Ev+0x28>
   37a8a:	4620      	mov	r0, r4
   37a8c:	f7ff fa2c 	bl	36ee8 <_ZNSt9exceptionD1Ev>
   37a90:	4620      	mov	r0, r4
   37a92:	f7f7 ff3b 	bl	2f90c <_ZdlPv>
   37a96:	4620      	mov	r0, r4
   37a98:	b002      	add	sp, #8
   37a9a:	bd10      	pop	{r4, pc}
   37a9c:	f853 2c04 	ldr.w	r2, [r3, #-4]
   37aa0:	1e51      	subs	r1, r2, #1
   37aa2:	2a00      	cmp	r2, #0
   37aa4:	f843 1c04 	str.w	r1, [r3, #-4]
   37aa8:	dcef      	bgt.n	37a8a <_ZNSt11logic_errorD0Ev+0x16>
   37aaa:	a901      	add	r1, sp, #4
   37aac:	f000 f8de 	bl	37c6c <_ZNSs4_Rep10_M_destroyERKSaIcE>
   37ab0:	e7eb      	b.n	37a8a <_ZNSt11logic_errorD0Ev+0x16>
   37ab2:	bf00      	nop
   37ab4:	1001a668 	.word	0x1001a668
   37ab8:	000437b4 	.word	0x000437b4

00037abc <_ZNSt12out_of_rangeD0Ev>:
   37abc:	b510      	push	{r4, lr}
   37abe:	6843      	ldr	r3, [r0, #4]
   37ac0:	4a0e      	ldr	r2, [pc, #56]	; (37afc <_ZNSt12out_of_rangeD0Ev+0x40>)
   37ac2:	490f      	ldr	r1, [pc, #60]	; (37b00 <_ZNSt12out_of_rangeD0Ev+0x44>)
   37ac4:	4604      	mov	r4, r0
   37ac6:	f1a3 000c 	sub.w	r0, r3, #12
   37aca:	4290      	cmp	r0, r2
   37acc:	b082      	sub	sp, #8
   37ace:	6021      	str	r1, [r4, #0]
   37ad0:	d108      	bne.n	37ae4 <_ZNSt12out_of_rangeD0Ev+0x28>
   37ad2:	4620      	mov	r0, r4
   37ad4:	f7ff fa08 	bl	36ee8 <_ZNSt9exceptionD1Ev>
   37ad8:	4620      	mov	r0, r4
   37ada:	f7f7 ff17 	bl	2f90c <_ZdlPv>
   37ade:	4620      	mov	r0, r4
   37ae0:	b002      	add	sp, #8
   37ae2:	bd10      	pop	{r4, pc}
   37ae4:	f853 2c04 	ldr.w	r2, [r3, #-4]
   37ae8:	1e51      	subs	r1, r2, #1
   37aea:	2a00      	cmp	r2, #0
   37aec:	f843 1c04 	str.w	r1, [r3, #-4]
   37af0:	dcef      	bgt.n	37ad2 <_ZNSt12out_of_rangeD0Ev+0x16>
   37af2:	a901      	add	r1, sp, #4
   37af4:	f000 f8ba 	bl	37c6c <_ZNSs4_Rep10_M_destroyERKSaIcE>
   37af8:	e7eb      	b.n	37ad2 <_ZNSt12out_of_rangeD0Ev+0x16>
   37afa:	bf00      	nop
   37afc:	1001a668 	.word	0x1001a668
   37b00:	000437b4 	.word	0x000437b4

00037b04 <_ZNSt12length_errorD0Ev>:
   37b04:	b510      	push	{r4, lr}
   37b06:	6843      	ldr	r3, [r0, #4]
   37b08:	4a0e      	ldr	r2, [pc, #56]	; (37b44 <_ZNSt12length_errorD0Ev+0x40>)
   37b0a:	490f      	ldr	r1, [pc, #60]	; (37b48 <_ZNSt12length_errorD0Ev+0x44>)
   37b0c:	4604      	mov	r4, r0
   37b0e:	f1a3 000c 	sub.w	r0, r3, #12
   37b12:	4290      	cmp	r0, r2
   37b14:	b082      	sub	sp, #8
   37b16:	6021      	str	r1, [r4, #0]
   37b18:	d108      	bne.n	37b2c <_ZNSt12length_errorD0Ev+0x28>
   37b1a:	4620      	mov	r0, r4
   37b1c:	f7ff f9e4 	bl	36ee8 <_ZNSt9exceptionD1Ev>
   37b20:	4620      	mov	r0, r4
   37b22:	f7f7 fef3 	bl	2f90c <_ZdlPv>
   37b26:	4620      	mov	r0, r4
   37b28:	b002      	add	sp, #8
   37b2a:	bd10      	pop	{r4, pc}
   37b2c:	f853 2c04 	ldr.w	r2, [r3, #-4]
   37b30:	1e51      	subs	r1, r2, #1
   37b32:	2a00      	cmp	r2, #0
   37b34:	f843 1c04 	str.w	r1, [r3, #-4]
   37b38:	dcef      	bgt.n	37b1a <_ZNSt12length_errorD0Ev+0x16>
   37b3a:	a901      	add	r1, sp, #4
   37b3c:	f000 f896 	bl	37c6c <_ZNSs4_Rep10_M_destroyERKSaIcE>
   37b40:	e7eb      	b.n	37b1a <_ZNSt12length_errorD0Ev+0x16>
   37b42:	bf00      	nop
   37b44:	1001a668 	.word	0x1001a668
   37b48:	000437b4 	.word	0x000437b4

00037b4c <_ZNSt11logic_errorC1EPKc>:
   37b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   37b4e:	4b1b      	ldr	r3, [pc, #108]	; (37bbc <_ZNSt11logic_errorC1EPKc+0x70>)
   37b50:	6003      	str	r3, [r0, #0]
   37b52:	b083      	sub	sp, #12
   37b54:	4604      	mov	r4, r0
   37b56:	b349      	cbz	r1, 37bac <_ZNSt11logic_errorC1EPKc+0x60>
   37b58:	4608      	mov	r0, r1
   37b5a:	460d      	mov	r5, r1
   37b5c:	f7e0 fdb0 	bl	186c0 <strlen>
   37b60:	4607      	mov	r7, r0
   37b62:	b1a8      	cbz	r0, 37b90 <_ZNSt11logic_errorC1EPKc+0x44>
   37b64:	aa01      	add	r2, sp, #4
   37b66:	2100      	movs	r1, #0
   37b68:	f000 f844 	bl	37bf4 <_ZNSs4_Rep9_S_createEjjRKSaIcE>
   37b6c:	2f01      	cmp	r7, #1
   37b6e:	4606      	mov	r6, r0
   37b70:	f100 030c 	add.w	r3, r0, #12
   37b74:	d011      	beq.n	37b9a <_ZNSt11logic_errorC1EPKc+0x4e>
   37b76:	4618      	mov	r0, r3
   37b78:	4629      	mov	r1, r5
   37b7a:	463a      	mov	r2, r7
   37b7c:	f7e0 fb40 	bl	18200 <memcpy>
   37b80:	4603      	mov	r3, r0
   37b82:	4a0f      	ldr	r2, [pc, #60]	; (37bc0 <_ZNSt11logic_errorC1EPKc+0x74>)
   37b84:	4296      	cmp	r6, r2
   37b86:	d10b      	bne.n	37ba0 <_ZNSt11logic_errorC1EPKc+0x54>
   37b88:	4620      	mov	r0, r4
   37b8a:	6063      	str	r3, [r4, #4]
   37b8c:	b003      	add	sp, #12
   37b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   37b90:	4b0c      	ldr	r3, [pc, #48]	; (37bc4 <_ZNSt11logic_errorC1EPKc+0x78>)
   37b92:	6063      	str	r3, [r4, #4]
   37b94:	4620      	mov	r0, r4
   37b96:	b003      	add	sp, #12
   37b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
   37b9a:	782a      	ldrb	r2, [r5, #0]
   37b9c:	7302      	strb	r2, [r0, #12]
   37b9e:	e7f0      	b.n	37b82 <_ZNSt11logic_errorC1EPKc+0x36>
   37ba0:	2200      	movs	r2, #0
   37ba2:	60b2      	str	r2, [r6, #8]
   37ba4:	6037      	str	r7, [r6, #0]
   37ba6:	443e      	add	r6, r7
   37ba8:	7332      	strb	r2, [r6, #12]
   37baa:	e7ed      	b.n	37b88 <_ZNSt11logic_errorC1EPKc+0x3c>
   37bac:	4806      	ldr	r0, [pc, #24]	; (37bc8 <_ZNSt11logic_errorC1EPKc+0x7c>)
   37bae:	f7fe fef5 	bl	3699c <_ZSt19__throw_logic_errorPKc>
   37bb2:	4620      	mov	r0, r4
   37bb4:	f7ff f998 	bl	36ee8 <_ZNSt9exceptionD1Ev>
   37bb8:	f7ff f8cc 	bl	36d54 <__cxa_end_cleanup>
   37bbc:	000437b4 	.word	0x000437b4
   37bc0:	1001a668 	.word	0x1001a668
   37bc4:	1001a674 	.word	0x1001a674
   37bc8:	000437e8 	.word	0x000437e8

00037bcc <_ZNSt12length_errorC1EPKc>:
   37bcc:	b510      	push	{r4, lr}
   37bce:	4604      	mov	r4, r0
   37bd0:	f7ff ffbc 	bl	37b4c <_ZNSt11logic_errorC1EPKc>
   37bd4:	4b01      	ldr	r3, [pc, #4]	; (37bdc <_ZNSt12length_errorC1EPKc+0x10>)
   37bd6:	6023      	str	r3, [r4, #0]
   37bd8:	4620      	mov	r0, r4
   37bda:	bd10      	pop	{r4, pc}
   37bdc:	000437c8 	.word	0x000437c8

00037be0 <_ZNSt12out_of_rangeC1EPKc>:
   37be0:	b510      	push	{r4, lr}
   37be2:	4604      	mov	r4, r0
   37be4:	f7ff ffb2 	bl	37b4c <_ZNSt11logic_errorC1EPKc>
   37be8:	4b01      	ldr	r3, [pc, #4]	; (37bf0 <_ZNSt12out_of_rangeC1EPKc+0x10>)
   37bea:	6023      	str	r3, [r4, #0]
   37bec:	4620      	mov	r0, r4
   37bee:	bd10      	pop	{r4, pc}
   37bf0:	000437dc 	.word	0x000437dc

00037bf4 <_ZNSs4_Rep9_S_createEjjRKSaIcE>:
   37bf4:	4b1b      	ldr	r3, [pc, #108]	; (37c64 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x70>)
   37bf6:	4298      	cmp	r0, r3
   37bf8:	b510      	push	{r4, lr}
   37bfa:	d830      	bhi.n	37c5e <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x6a>
   37bfc:	4288      	cmp	r0, r1
   37bfe:	4604      	mov	r4, r0
   37c00:	d91c      	bls.n	37c3c <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x48>
   37c02:	004a      	lsls	r2, r1, #1
   37c04:	4290      	cmp	r0, r2
   37c06:	bf38      	it	cc
   37c08:	4614      	movcc	r4, r2
   37c0a:	f104 021d 	add.w	r2, r4, #29
   37c0e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
   37c12:	f104 000d 	add.w	r0, r4, #13
   37c16:	d918      	bls.n	37c4a <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x56>
   37c18:	428c      	cmp	r4, r1
   37c1a:	d916      	bls.n	37c4a <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x56>
   37c1c:	f3c2 020b 	ubfx	r2, r2, #0, #12
   37c20:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
   37c24:	1aa4      	subs	r4, r4, r2
   37c26:	429c      	cmp	r4, r3
   37c28:	bf28      	it	cs
   37c2a:	461c      	movcs	r4, r3
   37c2c:	f104 000d 	add.w	r0, r4, #13
   37c30:	f7f7 fe6a 	bl	2f908 <_Znwj>
   37c34:	2200      	movs	r2, #0
   37c36:	e9c0 4201 	strd	r4, r2, [r0, #4]
   37c3a:	bd10      	pop	{r4, pc}
   37c3c:	f100 031d 	add.w	r3, r0, #29
   37c40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   37c44:	f100 000d 	add.w	r0, r0, #13
   37c48:	d901      	bls.n	37c4e <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x5a>
   37c4a:	2800      	cmp	r0, #0
   37c4c:	db05      	blt.n	37c5a <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x66>
   37c4e:	f7f7 fe5b 	bl	2f908 <_Znwj>
   37c52:	2200      	movs	r2, #0
   37c54:	e9c0 4201 	strd	r4, r2, [r0, #4]
   37c58:	bd10      	pop	{r4, pc}
   37c5a:	f7fe fe8f 	bl	3697c <_ZSt17__throw_bad_allocv>
   37c5e:	4802      	ldr	r0, [pc, #8]	; (37c68 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x74>)
   37c60:	f7fe feb4 	bl	369cc <_ZSt20__throw_length_errorPKc>
   37c64:	3ffffffc 	.word	0x3ffffffc
   37c68:	00043814 	.word	0x00043814

00037c6c <_ZNSs4_Rep10_M_destroyERKSaIcE>:
   37c6c:	f7f7 be4e 	b.w	2f90c <_ZdlPv>

00037c70 <__cxa_bad_typeid>:
   37c70:	b508      	push	{r3, lr}
   37c72:	2004      	movs	r0, #4
   37c74:	f7ff f846 	bl	36d04 <__cxa_allocate_exception>
   37c78:	4b02      	ldr	r3, [pc, #8]	; (37c84 <__cxa_bad_typeid+0x14>)
   37c7a:	4a03      	ldr	r2, [pc, #12]	; (37c88 <__cxa_bad_typeid+0x18>)
   37c7c:	4903      	ldr	r1, [pc, #12]	; (37c8c <__cxa_bad_typeid+0x1c>)
   37c7e:	6003      	str	r3, [r0, #0]
   37c80:	f7ff fd02 	bl	37688 <__cxa_throw>
   37c84:	000434e4 	.word	0x000434e4
   37c88:	00036bf5 	.word	0x00036bf5
   37c8c:	000434c0 	.word	0x000434c0

00037c90 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
   37c90:	7803      	ldrb	r3, [r0, #0]
   37c92:	2b47      	cmp	r3, #71	; 0x47
   37c94:	d001      	beq.n	37c9a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0xa>
   37c96:	2000      	movs	r0, #0
   37c98:	4770      	bx	lr
   37c9a:	7843      	ldrb	r3, [r0, #1]
   37c9c:	2b4e      	cmp	r3, #78	; 0x4e
   37c9e:	d1fa      	bne.n	37c96 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   37ca0:	7883      	ldrb	r3, [r0, #2]
   37ca2:	2b55      	cmp	r3, #85	; 0x55
   37ca4:	d1f7      	bne.n	37c96 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   37ca6:	78c3      	ldrb	r3, [r0, #3]
   37ca8:	2b43      	cmp	r3, #67	; 0x43
   37caa:	d1f4      	bne.n	37c96 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   37cac:	7903      	ldrb	r3, [r0, #4]
   37cae:	2b43      	cmp	r3, #67	; 0x43
   37cb0:	d1f1      	bne.n	37c96 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   37cb2:	7943      	ldrb	r3, [r0, #5]
   37cb4:	2b2b      	cmp	r3, #43	; 0x2b
   37cb6:	d1ee      	bne.n	37c96 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   37cb8:	7983      	ldrb	r3, [r0, #6]
   37cba:	2b2b      	cmp	r3, #43	; 0x2b
   37cbc:	d1eb      	bne.n	37c96 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   37cbe:	79c0      	ldrb	r0, [r0, #7]
   37cc0:	2801      	cmp	r0, #1
   37cc2:	bf8c      	ite	hi
   37cc4:	2000      	movhi	r0, #0
   37cc6:	2001      	movls	r0, #1
   37cc8:	4770      	bx	lr
   37cca:	bf00      	nop

00037ccc <__cxa_call_terminate>:
   37ccc:	b510      	push	{r4, lr}
   37cce:	b130      	cbz	r0, 37cde <__cxa_call_terminate+0x12>
   37cd0:	4604      	mov	r4, r0
   37cd2:	f000 f87d 	bl	37dd0 <__cxa_begin_catch>
   37cd6:	4620      	mov	r0, r4
   37cd8:	f7ff ffda 	bl	37c90 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   37cdc:	b908      	cbnz	r0, 37ce2 <__cxa_call_terminate+0x16>
   37cde:	f7ff fc59 	bl	37594 <_ZSt9terminatev>
   37ce2:	f854 0c14 	ldr.w	r0, [r4, #-20]
   37ce6:	f7ff fc41 	bl	3756c <_ZN10__cxxabiv111__terminateEPFvvE>
   37cea:	bf00      	nop

00037cec <__cxa_call_unexpected>:
   37cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37cf0:	b085      	sub	sp, #20
   37cf2:	4602      	mov	r2, r0
   37cf4:	f7ff ffcc 	bl	37c90 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   37cf8:	b138      	cbz	r0, 37d0a <__cxa_call_unexpected+0x1e>
   37cfa:	e952 7406 	ldrd	r7, r4, [r2, #-24]
   37cfe:	e9d2 850c 	ldrd	r8, r5, [r2, #48]	; 0x30
   37d02:	f8d2 a028 	ldr.w	sl, [r2, #40]	; 0x28
   37d06:	2600      	movs	r6, #0
   37d08:	e005      	b.n	37d16 <__cxa_call_unexpected+0x2a>
   37d0a:	4604      	mov	r4, r0
   37d0c:	4607      	mov	r7, r0
   37d0e:	2601      	movs	r6, #1
   37d10:	4605      	mov	r5, r0
   37d12:	4680      	mov	r8, r0
   37d14:	4682      	mov	sl, r0
   37d16:	4610      	mov	r0, r2
   37d18:	f000 f85a 	bl	37dd0 <__cxa_begin_catch>
   37d1c:	b10e      	cbz	r6, 37d22 <__cxa_call_unexpected+0x36>
   37d1e:	f7ff fc47 	bl	375b0 <_ZSt10unexpectedv>
   37d22:	4638      	mov	r0, r7
   37d24:	f7ff fc40 	bl	375a8 <_ZN10__cxxabiv112__unexpectedEPFvvE>
   37d28:	f000 f852 	bl	37dd0 <__cxa_begin_catch>
   37d2c:	b10e      	cbz	r6, 37d32 <__cxa_call_unexpected+0x46>
   37d2e:	f7ff fc31 	bl	37594 <_ZSt9terminatev>
   37d32:	f7ff f8ed 	bl	36f10 <__cxa_get_globals_fast>
   37d36:	6807      	ldr	r7, [r0, #0]
   37d38:	f8df b090 	ldr.w	fp, [pc, #144]	; 37dcc <__cxa_call_unexpected+0xe0>
   37d3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   37d40:	2b01      	cmp	r3, #1
   37d42:	bf0c      	ite	eq
   37d44:	683b      	ldreq	r3, [r7, #0]
   37d46:	f107 0378 	addne.w	r3, r7, #120	; 0x78
   37d4a:	9302      	str	r3, [sp, #8]
   37d4c:	f028 0303 	bic.w	r3, r8, #3
   37d50:	9301      	str	r3, [sp, #4]
   37d52:	3720      	adds	r7, #32
   37d54:	f04f 0900 	mov.w	r9, #0
   37d58:	45ca      	cmp	sl, r9
   37d5a:	dd20      	ble.n	37d9e <__cxa_call_unexpected+0xb2>
   37d5c:	f8d5 8000 	ldr.w	r8, [r5]
   37d60:	f1b8 0f00 	cmp.w	r8, #0
   37d64:	d000      	beq.n	37d68 <__cxa_call_unexpected+0x7c>
   37d66:	44a8      	add	r8, r5
   37d68:	ab02      	add	r3, sp, #8
   37d6a:	2200      	movs	r2, #0
   37d6c:	4641      	mov	r1, r8
   37d6e:	4638      	mov	r0, r7
   37d70:	f7fe fff6 	bl	36d60 <__cxa_type_match>
   37d74:	b108      	cbz	r0, 37d7a <__cxa_call_unexpected+0x8e>
   37d76:	f7ff fca3 	bl	376c0 <__cxa_rethrow>
   37d7a:	f8d8 3000 	ldr.w	r3, [r8]
   37d7e:	9003      	str	r0, [sp, #12]
   37d80:	aa03      	add	r2, sp, #12
   37d82:	4640      	mov	r0, r8
   37d84:	4659      	mov	r1, fp
   37d86:	f8d3 8010 	ldr.w	r8, [r3, #16]
   37d8a:	2301      	movs	r3, #1
   37d8c:	47c0      	blx	r8
   37d8e:	9b01      	ldr	r3, [sp, #4]
   37d90:	2800      	cmp	r0, #0
   37d92:	bf18      	it	ne
   37d94:	4606      	movne	r6, r0
   37d96:	f109 0901 	add.w	r9, r9, #1
   37d9a:	441d      	add	r5, r3
   37d9c:	e7dc      	b.n	37d58 <__cxa_call_unexpected+0x6c>
   37d9e:	b146      	cbz	r6, 37db2 <__cxa_call_unexpected+0xc6>
   37da0:	2004      	movs	r0, #4
   37da2:	f7fe ffaf 	bl	36d04 <__cxa_allocate_exception>
   37da6:	4b07      	ldr	r3, [pc, #28]	; (37dc4 <__cxa_call_unexpected+0xd8>)
   37da8:	4a07      	ldr	r2, [pc, #28]	; (37dc8 <__cxa_call_unexpected+0xdc>)
   37daa:	4908      	ldr	r1, [pc, #32]	; (37dcc <__cxa_call_unexpected+0xe0>)
   37dac:	6003      	str	r3, [r0, #0]
   37dae:	f7ff fc6b 	bl	37688 <__cxa_throw>
   37db2:	4620      	mov	r0, r4
   37db4:	f7ff fbda 	bl	3756c <_ZN10__cxxabiv111__terminateEPFvvE>
   37db8:	f000 f848 	bl	37e4c <__cxa_end_catch>
   37dbc:	f000 f846 	bl	37e4c <__cxa_end_catch>
   37dc0:	f7fe ffc8 	bl	36d54 <__cxa_end_cleanup>
   37dc4:	000435a8 	.word	0x000435a8
   37dc8:	00036eed 	.word	0x00036eed
   37dcc:	00043524 	.word	0x00043524

00037dd0 <__cxa_begin_catch>:
   37dd0:	b538      	push	{r3, r4, r5, lr}
   37dd2:	4604      	mov	r4, r0
   37dd4:	f7ff f8a0 	bl	36f18 <__cxa_get_globals>
   37dd8:	4622      	mov	r2, r4
   37dda:	6805      	ldr	r5, [r0, #0]
   37ddc:	f812 3920 	ldrb.w	r3, [r2], #-32
   37de0:	2b47      	cmp	r3, #71	; 0x47
   37de2:	d003      	beq.n	37dec <__cxa_begin_catch+0x1c>
   37de4:	bb85      	cbnz	r5, 37e48 <__cxa_begin_catch+0x78>
   37de6:	6002      	str	r2, [r0, #0]
   37de8:	4628      	mov	r0, r5
   37dea:	bd38      	pop	{r3, r4, r5, pc}
   37dec:	7863      	ldrb	r3, [r4, #1]
   37dee:	2b4e      	cmp	r3, #78	; 0x4e
   37df0:	d1f8      	bne.n	37de4 <__cxa_begin_catch+0x14>
   37df2:	78a3      	ldrb	r3, [r4, #2]
   37df4:	2b55      	cmp	r3, #85	; 0x55
   37df6:	d1f5      	bne.n	37de4 <__cxa_begin_catch+0x14>
   37df8:	78e3      	ldrb	r3, [r4, #3]
   37dfa:	2b43      	cmp	r3, #67	; 0x43
   37dfc:	d1f2      	bne.n	37de4 <__cxa_begin_catch+0x14>
   37dfe:	7923      	ldrb	r3, [r4, #4]
   37e00:	2b43      	cmp	r3, #67	; 0x43
   37e02:	d1ef      	bne.n	37de4 <__cxa_begin_catch+0x14>
   37e04:	7963      	ldrb	r3, [r4, #5]
   37e06:	2b2b      	cmp	r3, #43	; 0x2b
   37e08:	d1ec      	bne.n	37de4 <__cxa_begin_catch+0x14>
   37e0a:	79a3      	ldrb	r3, [r4, #6]
   37e0c:	2b2b      	cmp	r3, #43	; 0x2b
   37e0e:	d1e9      	bne.n	37de4 <__cxa_begin_catch+0x14>
   37e10:	79e3      	ldrb	r3, [r4, #7]
   37e12:	2b01      	cmp	r3, #1
   37e14:	d8e6      	bhi.n	37de4 <__cxa_begin_catch+0x14>
   37e16:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   37e1a:	2b00      	cmp	r3, #0
   37e1c:	db11      	blt.n	37e42 <__cxa_begin_catch+0x72>
   37e1e:	3301      	adds	r3, #1
   37e20:	f844 3c0c 	str.w	r3, [r4, #-12]
   37e24:	6843      	ldr	r3, [r0, #4]
   37e26:	3b01      	subs	r3, #1
   37e28:	6043      	str	r3, [r0, #4]
   37e2a:	4295      	cmp	r5, r2
   37e2c:	bf18      	it	ne
   37e2e:	f844 5c10 	strne.w	r5, [r4, #-16]
   37e32:	6a65      	ldr	r5, [r4, #36]	; 0x24
   37e34:	bf18      	it	ne
   37e36:	6002      	strne	r2, [r0, #0]
   37e38:	4620      	mov	r0, r4
   37e3a:	f7e7 fcc9 	bl	1f7d0 <_Unwind_Complete>
   37e3e:	4628      	mov	r0, r5
   37e40:	bd38      	pop	{r3, r4, r5, pc}
   37e42:	f1c3 0301 	rsb	r3, r3, #1
   37e46:	e7eb      	b.n	37e20 <__cxa_begin_catch+0x50>
   37e48:	f7ff fba4 	bl	37594 <_ZSt9terminatev>

00037e4c <__cxa_end_catch>:
   37e4c:	b508      	push	{r3, lr}
   37e4e:	f7ff f85f 	bl	36f10 <__cxa_get_globals_fast>
   37e52:	6803      	ldr	r3, [r0, #0]
   37e54:	b37b      	cbz	r3, 37eb6 <__cxa_end_catch+0x6a>
   37e56:	f893 2020 	ldrb.w	r2, [r3, #32]
   37e5a:	2a47      	cmp	r2, #71	; 0x47
   37e5c:	d007      	beq.n	37e6e <__cxa_end_catch+0x22>
   37e5e:	2200      	movs	r2, #0
   37e60:	6002      	str	r2, [r0, #0]
   37e62:	f103 0020 	add.w	r0, r3, #32
   37e66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   37e6a:	f7e7 bcb3 	b.w	1f7d4 <_Unwind_DeleteException>
   37e6e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
   37e72:	2a4e      	cmp	r2, #78	; 0x4e
   37e74:	d1f3      	bne.n	37e5e <__cxa_end_catch+0x12>
   37e76:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
   37e7a:	2a55      	cmp	r2, #85	; 0x55
   37e7c:	d1ef      	bne.n	37e5e <__cxa_end_catch+0x12>
   37e7e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
   37e82:	2a43      	cmp	r2, #67	; 0x43
   37e84:	d1eb      	bne.n	37e5e <__cxa_end_catch+0x12>
   37e86:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   37e8a:	2a43      	cmp	r2, #67	; 0x43
   37e8c:	d1e7      	bne.n	37e5e <__cxa_end_catch+0x12>
   37e8e:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
   37e92:	2a2b      	cmp	r2, #43	; 0x2b
   37e94:	d1e3      	bne.n	37e5e <__cxa_end_catch+0x12>
   37e96:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
   37e9a:	2a2b      	cmp	r2, #43	; 0x2b
   37e9c:	d1df      	bne.n	37e5e <__cxa_end_catch+0x12>
   37e9e:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
   37ea2:	2a01      	cmp	r2, #1
   37ea4:	d8db      	bhi.n	37e5e <__cxa_end_catch+0x12>
   37ea6:	695a      	ldr	r2, [r3, #20]
   37ea8:	2a00      	cmp	r2, #0
   37eaa:	db05      	blt.n	37eb8 <__cxa_end_catch+0x6c>
   37eac:	3a01      	subs	r2, #1
   37eae:	d008      	beq.n	37ec2 <__cxa_end_catch+0x76>
   37eb0:	1c51      	adds	r1, r2, #1
   37eb2:	d00e      	beq.n	37ed2 <__cxa_end_catch+0x86>
   37eb4:	615a      	str	r2, [r3, #20]
   37eb6:	bd08      	pop	{r3, pc}
   37eb8:	3201      	adds	r2, #1
   37eba:	d1fb      	bne.n	37eb4 <__cxa_end_catch+0x68>
   37ebc:	6919      	ldr	r1, [r3, #16]
   37ebe:	6001      	str	r1, [r0, #0]
   37ec0:	e7f8      	b.n	37eb4 <__cxa_end_catch+0x68>
   37ec2:	691a      	ldr	r2, [r3, #16]
   37ec4:	6002      	str	r2, [r0, #0]
   37ec6:	f103 0020 	add.w	r0, r3, #32
   37eca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   37ece:	f7e7 bc81 	b.w	1f7d4 <_Unwind_DeleteException>
   37ed2:	f7ff fb5f 	bl	37594 <_ZSt9terminatev>
   37ed6:	bf00      	nop

00037ed8 <__cxa_current_exception_type>:
   37ed8:	b508      	push	{r3, lr}
   37eda:	f7ff f81d 	bl	36f18 <__cxa_get_globals>
   37ede:	6800      	ldr	r0, [r0, #0]
   37ee0:	b130      	cbz	r0, 37ef0 <__cxa_current_exception_type+0x18>
   37ee2:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   37ee6:	2b01      	cmp	r3, #1
   37ee8:	bf04      	itt	eq
   37eea:	6800      	ldreq	r0, [r0, #0]
   37eec:	3878      	subeq	r0, #120	; 0x78
   37eee:	6800      	ldr	r0, [r0, #0]
   37ef0:	bd08      	pop	{r3, pc}
   37ef2:	bf00      	nop

00037ef4 <frexp>:
   37ef4:	ec53 2b10 	vmov	r2, r3, d0
   37ef8:	b570      	push	{r4, r5, r6, lr}
   37efa:	4e16      	ldr	r6, [pc, #88]	; (37f54 <frexp+0x60>)
   37efc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   37f00:	2500      	movs	r5, #0
   37f02:	42b1      	cmp	r1, r6
   37f04:	4604      	mov	r4, r0
   37f06:	6005      	str	r5, [r0, #0]
   37f08:	dc21      	bgt.n	37f4e <frexp+0x5a>
   37f0a:	ee10 6a10 	vmov	r6, s0
   37f0e:	430e      	orrs	r6, r1
   37f10:	d01d      	beq.n	37f4e <frexp+0x5a>
   37f12:	4e11      	ldr	r6, [pc, #68]	; (37f58 <frexp+0x64>)
   37f14:	401e      	ands	r6, r3
   37f16:	4618      	mov	r0, r3
   37f18:	b966      	cbnz	r6, 37f34 <frexp+0x40>
   37f1a:	4619      	mov	r1, r3
   37f1c:	2200      	movs	r2, #0
   37f1e:	ee10 0a10 	vmov	r0, s0
   37f22:	4b0e      	ldr	r3, [pc, #56]	; (37f5c <frexp+0x68>)
   37f24:	f7e0 fdf6 	bl	18b14 <__aeabi_dmul>
   37f28:	f06f 0535 	mvn.w	r5, #53	; 0x35
   37f2c:	4602      	mov	r2, r0
   37f2e:	4608      	mov	r0, r1
   37f30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   37f34:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
   37f38:	1509      	asrs	r1, r1, #20
   37f3a:	f420 00e0 	bic.w	r0, r0, #7340032	; 0x700000
   37f3e:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
   37f42:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
   37f46:	4429      	add	r1, r5
   37f48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   37f4c:	6021      	str	r1, [r4, #0]
   37f4e:	ec43 2b10 	vmov	d0, r2, r3
   37f52:	bd70      	pop	{r4, r5, r6, pc}
   37f54:	7fefffff 	.word	0x7fefffff
   37f58:	7ff00000 	.word	0x7ff00000
   37f5c:	43500000 	.word	0x43500000

00037f60 <round>:
   37f60:	ec53 2b10 	vmov	r2, r3, d0
   37f64:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
   37f68:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
   37f6c:	2913      	cmp	r1, #19
   37f6e:	b510      	push	{r4, lr}
   37f70:	ee10 0a10 	vmov	r0, s0
   37f74:	469e      	mov	lr, r3
   37f76:	dc22      	bgt.n	37fbe <round+0x5e>
   37f78:	2900      	cmp	r1, #0
   37f7a:	db09      	blt.n	37f90 <round+0x30>
   37f7c:	4c1f      	ldr	r4, [pc, #124]	; (37ffc <round+0x9c>)
   37f7e:	fa44 fc01 	asr.w	ip, r4, r1
   37f82:	ea03 040c 	and.w	r4, r3, ip
   37f86:	4320      	orrs	r0, r4
   37f88:	d110      	bne.n	37fac <round+0x4c>
   37f8a:	ec43 2b10 	vmov	d0, r2, r3
   37f8e:	bd10      	pop	{r4, pc}
   37f90:	f003 4e00 	and.w	lr, r3, #2147483648	; 0x80000000
   37f94:	3101      	adds	r1, #1
   37f96:	bf04      	itt	eq
   37f98:	f04e 5e7f 	orreq.w	lr, lr, #1069547520	; 0x3fc00000
   37f9c:	f44e 1e40 	orreq.w	lr, lr, #3145728	; 0x300000
   37fa0:	2000      	movs	r0, #0
   37fa2:	4673      	mov	r3, lr
   37fa4:	4602      	mov	r2, r0
   37fa6:	ec43 2b10 	vmov	d0, r2, r3
   37faa:	bd10      	pop	{r4, pc}
   37fac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   37fb0:	fa43 f101 	asr.w	r1, r3, r1
   37fb4:	448e      	add	lr, r1
   37fb6:	ea2e 0e0c 	bic.w	lr, lr, ip
   37fba:	2000      	movs	r0, #0
   37fbc:	e7f1      	b.n	37fa2 <round+0x42>
   37fbe:	2933      	cmp	r1, #51	; 0x33
   37fc0:	dd08      	ble.n	37fd4 <round+0x74>
   37fc2:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   37fc6:	d1e0      	bne.n	37f8a <round+0x2a>
   37fc8:	4619      	mov	r1, r3
   37fca:	f7e0 fbed 	bl	187a8 <__adddf3>
   37fce:	ec41 0b10 	vmov	d0, r0, r1
   37fd2:	bd10      	pop	{r4, pc}
   37fd4:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
   37fd8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   37fdc:	fa24 fc0c 	lsr.w	ip, r4, ip
   37fe0:	ea12 0f0c 	tst.w	r2, ip
   37fe4:	d0d1      	beq.n	37f8a <round+0x2a>
   37fe6:	2301      	movs	r3, #1
   37fe8:	f1c1 0133 	rsb	r1, r1, #51	; 0x33
   37fec:	fa03 f101 	lsl.w	r1, r3, r1
   37ff0:	1840      	adds	r0, r0, r1
   37ff2:	bf28      	it	cs
   37ff4:	449e      	addcs	lr, r3
   37ff6:	ea20 000c 	bic.w	r0, r0, ip
   37ffa:	e7d2      	b.n	37fa2 <round+0x42>
   37ffc:	000fffff 	.word	0x000fffff

00038000 <fputc>:
   38000:	b530      	push	{r4, r5, lr}
   38002:	4b17      	ldr	r3, [pc, #92]	; (38060 <fputc+0x60>)
   38004:	681d      	ldr	r5, [r3, #0]
   38006:	460c      	mov	r4, r1
   38008:	b083      	sub	sp, #12
   3800a:	4601      	mov	r1, r0
   3800c:	b10d      	cbz	r5, 38012 <fputc+0x12>
   3800e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   38010:	b19b      	cbz	r3, 3803a <fputc+0x3a>
   38012:	6e63      	ldr	r3, [r4, #100]	; 0x64
   38014:	07db      	lsls	r3, r3, #31
   38016:	d402      	bmi.n	3801e <fputc+0x1e>
   38018:	89a3      	ldrh	r3, [r4, #12]
   3801a:	0598      	lsls	r0, r3, #22
   3801c:	d519      	bpl.n	38052 <fputc+0x52>
   3801e:	4622      	mov	r2, r4
   38020:	4628      	mov	r0, r5
   38022:	f000 f915 	bl	38250 <_putc_r>
   38026:	6e63      	ldr	r3, [r4, #100]	; 0x64
   38028:	07da      	lsls	r2, r3, #31
   3802a:	4605      	mov	r5, r0
   3802c:	d402      	bmi.n	38034 <fputc+0x34>
   3802e:	89a3      	ldrh	r3, [r4, #12]
   38030:	059b      	lsls	r3, r3, #22
   38032:	d508      	bpl.n	38046 <fputc+0x46>
   38034:	4628      	mov	r0, r5
   38036:	b003      	add	sp, #12
   38038:	bd30      	pop	{r4, r5, pc}
   3803a:	9001      	str	r0, [sp, #4]
   3803c:	4628      	mov	r0, r5
   3803e:	f7f4 f881 	bl	2c144 <__sinit>
   38042:	9901      	ldr	r1, [sp, #4]
   38044:	e7e5      	b.n	38012 <fputc+0x12>
   38046:	6da0      	ldr	r0, [r4, #88]	; 0x58
   38048:	f7f4 fc98 	bl	2c97c <__retarget_lock_release_recursive>
   3804c:	4628      	mov	r0, r5
   3804e:	b003      	add	sp, #12
   38050:	bd30      	pop	{r4, r5, pc}
   38052:	6da0      	ldr	r0, [r4, #88]	; 0x58
   38054:	9101      	str	r1, [sp, #4]
   38056:	f7f4 fc8f 	bl	2c978 <__retarget_lock_acquire_recursive>
   3805a:	9901      	ldr	r1, [sp, #4]
   3805c:	e7df      	b.n	3801e <fputc+0x1e>
   3805e:	bf00      	nop
   38060:	100040c4 	.word	0x100040c4

00038064 <_fputs_r>:
   38064:	b530      	push	{r4, r5, lr}
   38066:	b087      	sub	sp, #28
   38068:	4605      	mov	r5, r0
   3806a:	4608      	mov	r0, r1
   3806c:	4614      	mov	r4, r2
   3806e:	9101      	str	r1, [sp, #4]
   38070:	f7e0 fb26 	bl	186c0 <strlen>
   38074:	aa01      	add	r2, sp, #4
   38076:	2301      	movs	r3, #1
   38078:	e9cd 0202 	strd	r0, r2, [sp, #8]
   3807c:	9005      	str	r0, [sp, #20]
   3807e:	9304      	str	r3, [sp, #16]
   38080:	b10d      	cbz	r5, 38086 <_fputs_r+0x22>
   38082:	6bab      	ldr	r3, [r5, #56]	; 0x38
   38084:	b303      	cbz	r3, 380c8 <_fputs_r+0x64>
   38086:	6e63      	ldr	r3, [r4, #100]	; 0x64
   38088:	f013 0f01 	tst.w	r3, #1
   3808c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   38090:	b29a      	uxth	r2, r3
   38092:	d101      	bne.n	38098 <_fputs_r+0x34>
   38094:	0598      	lsls	r0, r3, #22
   38096:	d521      	bpl.n	380dc <_fputs_r+0x78>
   38098:	0491      	lsls	r1, r2, #18
   3809a:	d406      	bmi.n	380aa <_fputs_r+0x46>
   3809c:	6e62      	ldr	r2, [r4, #100]	; 0x64
   3809e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   380a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   380a6:	81a3      	strh	r3, [r4, #12]
   380a8:	6662      	str	r2, [r4, #100]	; 0x64
   380aa:	aa03      	add	r2, sp, #12
   380ac:	4628      	mov	r0, r5
   380ae:	4621      	mov	r1, r4
   380b0:	f7f4 fab8 	bl	2c624 <__sfvwrite_r>
   380b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   380b6:	07da      	lsls	r2, r3, #31
   380b8:	4605      	mov	r5, r0
   380ba:	d402      	bmi.n	380c2 <_fputs_r+0x5e>
   380bc:	89a3      	ldrh	r3, [r4, #12]
   380be:	059b      	lsls	r3, r3, #22
   380c0:	d506      	bpl.n	380d0 <_fputs_r+0x6c>
   380c2:	4628      	mov	r0, r5
   380c4:	b007      	add	sp, #28
   380c6:	bd30      	pop	{r4, r5, pc}
   380c8:	4628      	mov	r0, r5
   380ca:	f7f4 f83b 	bl	2c144 <__sinit>
   380ce:	e7da      	b.n	38086 <_fputs_r+0x22>
   380d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   380d2:	f7f4 fc53 	bl	2c97c <__retarget_lock_release_recursive>
   380d6:	4628      	mov	r0, r5
   380d8:	b007      	add	sp, #28
   380da:	bd30      	pop	{r4, r5, pc}
   380dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   380de:	f7f4 fc4b 	bl	2c978 <__retarget_lock_acquire_recursive>
   380e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   380e6:	b29a      	uxth	r2, r3
   380e8:	e7d6      	b.n	38098 <_fputs_r+0x34>
   380ea:	bf00      	nop

000380ec <fputs>:
   380ec:	b410      	push	{r4}
   380ee:	4c04      	ldr	r4, [pc, #16]	; (38100 <fputs+0x14>)
   380f0:	4603      	mov	r3, r0
   380f2:	460a      	mov	r2, r1
   380f4:	6820      	ldr	r0, [r4, #0]
   380f6:	f85d 4b04 	ldr.w	r4, [sp], #4
   380fa:	4619      	mov	r1, r3
   380fc:	f7ff bfb2 	b.w	38064 <_fputs_r>
   38100:	100040c4 	.word	0x100040c4

00038104 <_fwrite_r>:
   38104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   38108:	b086      	sub	sp, #24
   3810a:	fb02 f703 	mul.w	r7, r2, r3
   3810e:	461d      	mov	r5, r3
   38110:	ab01      	add	r3, sp, #4
   38112:	9303      	str	r3, [sp, #12]
   38114:	2301      	movs	r3, #1
   38116:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   38118:	9101      	str	r1, [sp, #4]
   3811a:	4690      	mov	r8, r2
   3811c:	9702      	str	r7, [sp, #8]
   3811e:	9705      	str	r7, [sp, #20]
   38120:	9304      	str	r3, [sp, #16]
   38122:	4606      	mov	r6, r0
   38124:	b108      	cbz	r0, 3812a <_fwrite_r+0x26>
   38126:	6b83      	ldr	r3, [r0, #56]	; 0x38
   38128:	b343      	cbz	r3, 3817c <_fwrite_r+0x78>
   3812a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   3812c:	f013 0f01 	tst.w	r3, #1
   38130:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   38134:	b29a      	uxth	r2, r3
   38136:	d101      	bne.n	3813c <_fwrite_r+0x38>
   38138:	0599      	lsls	r1, r3, #22
   3813a:	d530      	bpl.n	3819e <_fwrite_r+0x9a>
   3813c:	0492      	lsls	r2, r2, #18
   3813e:	d406      	bmi.n	3814e <_fwrite_r+0x4a>
   38140:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   38144:	81a3      	strh	r3, [r4, #12]
   38146:	6e63      	ldr	r3, [r4, #100]	; 0x64
   38148:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   3814c:	6663      	str	r3, [r4, #100]	; 0x64
   3814e:	4630      	mov	r0, r6
   38150:	aa03      	add	r2, sp, #12
   38152:	4621      	mov	r1, r4
   38154:	f7f4 fa66 	bl	2c624 <__sfvwrite_r>
   38158:	6e63      	ldr	r3, [r4, #100]	; 0x64
   3815a:	b190      	cbz	r0, 38182 <_fwrite_r+0x7e>
   3815c:	07da      	lsls	r2, r3, #31
   3815e:	d506      	bpl.n	3816e <_fwrite_r+0x6a>
   38160:	9805      	ldr	r0, [sp, #20]
   38162:	1a3f      	subs	r7, r7, r0
   38164:	fbb7 f0f8 	udiv	r0, r7, r8
   38168:	b006      	add	sp, #24
   3816a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3816e:	89a3      	ldrh	r3, [r4, #12]
   38170:	059b      	lsls	r3, r3, #22
   38172:	d4f5      	bmi.n	38160 <_fwrite_r+0x5c>
   38174:	6da0      	ldr	r0, [r4, #88]	; 0x58
   38176:	f7f4 fc01 	bl	2c97c <__retarget_lock_release_recursive>
   3817a:	e7f1      	b.n	38160 <_fwrite_r+0x5c>
   3817c:	f7f3 ffe2 	bl	2c144 <__sinit>
   38180:	e7d3      	b.n	3812a <_fwrite_r+0x26>
   38182:	07d8      	lsls	r0, r3, #31
   38184:	d407      	bmi.n	38196 <_fwrite_r+0x92>
   38186:	89a3      	ldrh	r3, [r4, #12]
   38188:	0599      	lsls	r1, r3, #22
   3818a:	d404      	bmi.n	38196 <_fwrite_r+0x92>
   3818c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   3818e:	f7f4 fbf5 	bl	2c97c <__retarget_lock_release_recursive>
   38192:	4628      	mov	r0, r5
   38194:	e7e8      	b.n	38168 <_fwrite_r+0x64>
   38196:	4628      	mov	r0, r5
   38198:	b006      	add	sp, #24
   3819a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3819e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   381a0:	f7f4 fbea 	bl	2c978 <__retarget_lock_acquire_recursive>
   381a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   381a8:	b29a      	uxth	r2, r3
   381aa:	e7c7      	b.n	3813c <_fwrite_r+0x38>

000381ac <fwrite>:
   381ac:	b510      	push	{r4, lr}
   381ae:	4c06      	ldr	r4, [pc, #24]	; (381c8 <fwrite+0x1c>)
   381b0:	b082      	sub	sp, #8
   381b2:	4684      	mov	ip, r0
   381b4:	9300      	str	r3, [sp, #0]
   381b6:	6820      	ldr	r0, [r4, #0]
   381b8:	4613      	mov	r3, r2
   381ba:	460a      	mov	r2, r1
   381bc:	4661      	mov	r1, ip
   381be:	f7ff ffa1 	bl	38104 <_fwrite_r>
   381c2:	b002      	add	sp, #8
   381c4:	bd10      	pop	{r4, pc}
   381c6:	bf00      	nop
   381c8:	100040c4 	.word	0x100040c4

000381cc <malloc>:
   381cc:	4b02      	ldr	r3, [pc, #8]	; (381d8 <malloc+0xc>)
   381ce:	4601      	mov	r1, r0
   381d0:	6818      	ldr	r0, [r3, #0]
   381d2:	f7f4 bc45 	b.w	2ca60 <_malloc_r>
   381d6:	bf00      	nop
   381d8:	100040c4 	.word	0x100040c4

000381dc <free>:
   381dc:	4b02      	ldr	r3, [pc, #8]	; (381e8 <free+0xc>)
   381de:	4601      	mov	r1, r0
   381e0:	6818      	ldr	r0, [r3, #0]
   381e2:	f7f4 b919 	b.w	2c418 <_free_r>
   381e6:	bf00      	nop
   381e8:	100040c4 	.word	0x100040c4

000381ec <memcmp>:
   381ec:	2a03      	cmp	r2, #3
   381ee:	b570      	push	{r4, r5, r6, lr}
   381f0:	d915      	bls.n	3821e <memcmp+0x32>
   381f2:	ea40 0c01 	orr.w	ip, r0, r1
   381f6:	f01c 0f03 	tst.w	ip, #3
   381fa:	4604      	mov	r4, r0
   381fc:	460b      	mov	r3, r1
   381fe:	d121      	bne.n	38244 <memcmp+0x58>
   38200:	4619      	mov	r1, r3
   38202:	4620      	mov	r0, r4
   38204:	680e      	ldr	r6, [r1, #0]
   38206:	6805      	ldr	r5, [r0, #0]
   38208:	42b5      	cmp	r5, r6
   3820a:	f104 0404 	add.w	r4, r4, #4
   3820e:	f103 0304 	add.w	r3, r3, #4
   38212:	d117      	bne.n	38244 <memcmp+0x58>
   38214:	3a04      	subs	r2, #4
   38216:	2a03      	cmp	r2, #3
   38218:	4620      	mov	r0, r4
   3821a:	4619      	mov	r1, r3
   3821c:	d8f0      	bhi.n	38200 <memcmp+0x14>
   3821e:	1e54      	subs	r4, r2, #1
   38220:	b1a2      	cbz	r2, 3824c <memcmp+0x60>
   38222:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   38226:	3901      	subs	r1, #1
   38228:	e001      	b.n	3822e <memcmp+0x42>
   3822a:	18c3      	adds	r3, r0, r3
   3822c:	d00c      	beq.n	38248 <memcmp+0x5c>
   3822e:	f81c ef01 	ldrb.w	lr, [ip, #1]!
   38232:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   38236:	4596      	cmp	lr, r2
   38238:	eba4 030c 	sub.w	r3, r4, ip
   3823c:	d0f5      	beq.n	3822a <memcmp+0x3e>
   3823e:	ebae 0002 	sub.w	r0, lr, r2
   38242:	bd70      	pop	{r4, r5, r6, pc}
   38244:	1e54      	subs	r4, r2, #1
   38246:	e7ec      	b.n	38222 <memcmp+0x36>
   38248:	4618      	mov	r0, r3
   3824a:	bd70      	pop	{r4, r5, r6, pc}
   3824c:	4610      	mov	r0, r2
   3824e:	bd70      	pop	{r4, r5, r6, pc}

00038250 <_putc_r>:
   38250:	b570      	push	{r4, r5, r6, lr}
   38252:	460e      	mov	r6, r1
   38254:	4614      	mov	r4, r2
   38256:	4605      	mov	r5, r0
   38258:	b108      	cbz	r0, 3825e <_putc_r+0xe>
   3825a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   3825c:	b1eb      	cbz	r3, 3829a <_putc_r+0x4a>
   3825e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   38260:	07d8      	lsls	r0, r3, #31
   38262:	d402      	bmi.n	3826a <_putc_r+0x1a>
   38264:	89a3      	ldrh	r3, [r4, #12]
   38266:	0599      	lsls	r1, r3, #22
   38268:	d523      	bpl.n	382b2 <_putc_r+0x62>
   3826a:	68a3      	ldr	r3, [r4, #8]
   3826c:	3b01      	subs	r3, #1
   3826e:	2b00      	cmp	r3, #0
   38270:	60a3      	str	r3, [r4, #8]
   38272:	da1c      	bge.n	382ae <_putc_r+0x5e>
   38274:	69a2      	ldr	r2, [r4, #24]
   38276:	4293      	cmp	r3, r2
   38278:	db12      	blt.n	382a0 <_putc_r+0x50>
   3827a:	b2f0      	uxtb	r0, r6
   3827c:	280a      	cmp	r0, #10
   3827e:	d00f      	beq.n	382a0 <_putc_r+0x50>
   38280:	6823      	ldr	r3, [r4, #0]
   38282:	1c5a      	adds	r2, r3, #1
   38284:	6022      	str	r2, [r4, #0]
   38286:	4605      	mov	r5, r0
   38288:	701e      	strb	r6, [r3, #0]
   3828a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   3828c:	07da      	lsls	r2, r3, #31
   3828e:	d402      	bmi.n	38296 <_putc_r+0x46>
   38290:	89a3      	ldrh	r3, [r4, #12]
   38292:	059b      	lsls	r3, r3, #22
   38294:	d511      	bpl.n	382ba <_putc_r+0x6a>
   38296:	4628      	mov	r0, r5
   38298:	bd70      	pop	{r4, r5, r6, pc}
   3829a:	f7f3 ff53 	bl	2c144 <__sinit>
   3829e:	e7de      	b.n	3825e <_putc_r+0xe>
   382a0:	4628      	mov	r0, r5
   382a2:	4622      	mov	r2, r4
   382a4:	4631      	mov	r1, r6
   382a6:	f7f5 f969 	bl	2d57c <__swbuf_r>
   382aa:	4605      	mov	r5, r0
   382ac:	e7ed      	b.n	3828a <_putc_r+0x3a>
   382ae:	b2f0      	uxtb	r0, r6
   382b0:	e7e6      	b.n	38280 <_putc_r+0x30>
   382b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
   382b4:	f7f4 fb60 	bl	2c978 <__retarget_lock_acquire_recursive>
   382b8:	e7d7      	b.n	3826a <_putc_r+0x1a>
   382ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
   382bc:	f7f4 fb5e 	bl	2c97c <__retarget_lock_release_recursive>
   382c0:	4628      	mov	r0, r5
   382c2:	bd70      	pop	{r4, r5, r6, pc}

000382c4 <realloc>:
   382c4:	b410      	push	{r4}
   382c6:	4c04      	ldr	r4, [pc, #16]	; (382d8 <realloc+0x14>)
   382c8:	4603      	mov	r3, r0
   382ca:	460a      	mov	r2, r1
   382cc:	6820      	ldr	r0, [r4, #0]
   382ce:	f85d 4b04 	ldr.w	r4, [sp], #4
   382d2:	4619      	mov	r1, r3
   382d4:	f7f4 be96 	b.w	2d004 <_realloc_r>
   382d8:	100040c4 	.word	0x100040c4

000382dc <sprintf>:
   382dc:	b40e      	push	{r1, r2, r3}
   382de:	b510      	push	{r4, lr}
   382e0:	b09d      	sub	sp, #116	; 0x74
   382e2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   382e6:	ab1f      	add	r3, sp, #124	; 0x7c
   382e8:	e9cd 0106 	strd	r0, r1, [sp, #24]
   382ec:	9104      	str	r1, [sp, #16]
   382ee:	4909      	ldr	r1, [pc, #36]	; (38314 <sprintf+0x38>)
   382f0:	f853 2b04 	ldr.w	r2, [r3], #4
   382f4:	9002      	str	r0, [sp, #8]
   382f6:	4c08      	ldr	r4, [pc, #32]	; (38318 <sprintf+0x3c>)
   382f8:	6808      	ldr	r0, [r1, #0]
   382fa:	9301      	str	r3, [sp, #4]
   382fc:	a902      	add	r1, sp, #8
   382fe:	9405      	str	r4, [sp, #20]
   38300:	f000 f84e 	bl	383a0 <_svfprintf_r>
   38304:	9b02      	ldr	r3, [sp, #8]
   38306:	2200      	movs	r2, #0
   38308:	701a      	strb	r2, [r3, #0]
   3830a:	b01d      	add	sp, #116	; 0x74
   3830c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   38310:	b003      	add	sp, #12
   38312:	4770      	bx	lr
   38314:	100040c4 	.word	0x100040c4
   38318:	ffff0208 	.word	0xffff0208

0003831c <strncmp>:
   3831c:	b3a2      	cbz	r2, 38388 <strncmp+0x6c>
   3831e:	b530      	push	{r4, r5, lr}
   38320:	ea40 0401 	orr.w	r4, r0, r1
   38324:	07a4      	lsls	r4, r4, #30
   38326:	4684      	mov	ip, r0
   38328:	460b      	mov	r3, r1
   3832a:	d02a      	beq.n	38382 <strncmp+0x66>
   3832c:	f89c 0000 	ldrb.w	r0, [ip]
   38330:	780c      	ldrb	r4, [r1, #0]
   38332:	4284      	cmp	r4, r0
   38334:	d12f      	bne.n	38396 <strncmp+0x7a>
   38336:	2a01      	cmp	r2, #1
   38338:	d00d      	beq.n	38356 <strncmp+0x3a>
   3833a:	46e6      	mov	lr, ip
   3833c:	b160      	cbz	r0, 38358 <strncmp+0x3c>
   3833e:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   38342:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   38346:	ea6f 030e 	mvn.w	r3, lr
   3834a:	42a0      	cmp	r0, r4
   3834c:	4413      	add	r3, r2
   3834e:	d122      	bne.n	38396 <strncmp+0x7a>
   38350:	eb1c 0303 	adds.w	r3, ip, r3
   38354:	d1f2      	bne.n	3833c <strncmp+0x20>
   38356:	2000      	movs	r0, #0
   38358:	bd30      	pop	{r4, r5, pc}
   3835a:	6804      	ldr	r4, [r0, #0]
   3835c:	4619      	mov	r1, r3
   3835e:	f853 5b04 	ldr.w	r5, [r3], #4
   38362:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
   38366:	42ac      	cmp	r4, r5
   38368:	4684      	mov	ip, r0
   3836a:	ea2e 0e04 	bic.w	lr, lr, r4
   3836e:	f100 0004 	add.w	r0, r0, #4
   38372:	d10b      	bne.n	3838c <strncmp+0x70>
   38374:	3a04      	subs	r2, #4
   38376:	4684      	mov	ip, r0
   38378:	4619      	mov	r1, r3
   3837a:	d0ec      	beq.n	38356 <strncmp+0x3a>
   3837c:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
   38380:	d1e9      	bne.n	38356 <strncmp+0x3a>
   38382:	2a03      	cmp	r2, #3
   38384:	d8e9      	bhi.n	3835a <strncmp+0x3e>
   38386:	e7d1      	b.n	3832c <strncmp+0x10>
   38388:	4610      	mov	r0, r2
   3838a:	4770      	bx	lr
   3838c:	f89c 0000 	ldrb.w	r0, [ip]
   38390:	780c      	ldrb	r4, [r1, #0]
   38392:	42a0      	cmp	r0, r4
   38394:	d0d1      	beq.n	3833a <strncmp+0x1e>
   38396:	1b00      	subs	r0, r0, r4
   38398:	bd30      	pop	{r4, r5, pc}
   3839a:	bf00      	nop
   3839c:	0000      	movs	r0, r0
	...

000383a0 <_svfprintf_r>:
   383a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   383a4:	ed2d 8b0a 	vpush	{d8-d12}
   383a8:	b0cf      	sub	sp, #316	; 0x13c
   383aa:	460c      	mov	r4, r1
   383ac:	4691      	mov	r9, r2
   383ae:	ee0a 1a10 	vmov	s20, r1
   383b2:	9309      	str	r3, [sp, #36]	; 0x24
   383b4:	ee0a 0a90 	vmov	s21, r0
   383b8:	f7f4 fad6 	bl	2c968 <_localeconv_r>
   383bc:	6803      	ldr	r3, [r0, #0]
   383be:	9313      	str	r3, [sp, #76]	; 0x4c
   383c0:	4618      	mov	r0, r3
   383c2:	f7e0 f97d 	bl	186c0 <strlen>
   383c6:	89a3      	ldrh	r3, [r4, #12]
   383c8:	9012      	str	r0, [sp, #72]	; 0x48
   383ca:	061a      	lsls	r2, r3, #24
   383cc:	d503      	bpl.n	383d6 <_svfprintf_r+0x36>
   383ce:	6923      	ldr	r3, [r4, #16]
   383d0:	2b00      	cmp	r3, #0
   383d2:	f000 87a0 	beq.w	39316 <_svfprintf_r+0xf76>
   383d6:	464d      	mov	r5, r9
   383d8:	ed9f 7ba5 	vldr	d7, [pc, #660]	; 38670 <_svfprintf_r+0x2d0>
   383dc:	782b      	ldrb	r3, [r5, #0]
   383de:	2400      	movs	r4, #0
   383e0:	aa25      	add	r2, sp, #148	; 0x94
   383e2:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
   383e6:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
   383ea:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
   383ee:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   383f2:	ee1a 9a90 	vmov	r9, s21
   383f6:	940e      	str	r4, [sp, #56]	; 0x38
   383f8:	9222      	str	r2, [sp, #136]	; 0x88
   383fa:	4690      	mov	r8, r2
   383fc:	9414      	str	r4, [sp, #80]	; 0x50
   383fe:	9405      	str	r4, [sp, #20]
   38400:	2b00      	cmp	r3, #0
   38402:	f000 81ec 	beq.w	387de <_svfprintf_r+0x43e>
   38406:	46ab      	mov	fp, r5
   38408:	e004      	b.n	38414 <_svfprintf_r+0x74>
   3840a:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
   3840e:	2b00      	cmp	r3, #0
   38410:	f000 811a 	beq.w	38648 <_svfprintf_r+0x2a8>
   38414:	2b25      	cmp	r3, #37	; 0x25
   38416:	d1f8      	bne.n	3840a <_svfprintf_r+0x6a>
   38418:	ebbb 0605 	subs.w	r6, fp, r5
   3841c:	f040 8118 	bne.w	38650 <_svfprintf_r+0x2b0>
   38420:	f89b 3000 	ldrb.w	r3, [fp]
   38424:	2b00      	cmp	r3, #0
   38426:	f000 81da 	beq.w	387de <_svfprintf_r+0x43e>
   3842a:	2300      	movs	r3, #0
   3842c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   38430:	f89b 7001 	ldrb.w	r7, [fp, #1]
   38434:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
   38438:	9306      	str	r3, [sp, #24]
   3843a:	f10b 0b01 	add.w	fp, fp, #1
   3843e:	9204      	str	r2, [sp, #16]
   38440:	469a      	mov	sl, r3
   38442:	242b      	movs	r4, #43	; 0x2b
   38444:	2120      	movs	r1, #32
   38446:	f10b 0b01 	add.w	fp, fp, #1
   3844a:	f1a7 0320 	sub.w	r3, r7, #32
   3844e:	2b5a      	cmp	r3, #90	; 0x5a
   38450:	f200 813c 	bhi.w	386cc <_svfprintf_r+0x32c>
   38454:	e8df f013 	tbh	[pc, r3, lsl #1]
   38458:	013a02d5 	.word	0x013a02d5
   3845c:	02d0013a 	.word	0x02d0013a
   38460:	013a013a 	.word	0x013a013a
   38464:	006a013a 	.word	0x006a013a
   38468:	013a013a 	.word	0x013a013a
   3846c:	02fe0265 	.word	0x02fe0265
   38470:	0270013a 	.word	0x0270013a
   38474:	013a02e4 	.word	0x013a02e4
   38478:	005b02df 	.word	0x005b02df
   3847c:	005b005b 	.word	0x005b005b
   38480:	005b005b 	.word	0x005b005b
   38484:	005b005b 	.word	0x005b005b
   38488:	005b005b 	.word	0x005b005b
   3848c:	013a013a 	.word	0x013a013a
   38490:	013a013a 	.word	0x013a013a
   38494:	013a013a 	.word	0x013a013a
   38498:	01d2013a 	.word	0x01d2013a
   3849c:	0236013a 	.word	0x0236013a
   384a0:	01d20085 	.word	0x01d20085
   384a4:	01d201d2 	.word	0x01d201d2
   384a8:	013a013a 	.word	0x013a013a
   384ac:	013a013a 	.word	0x013a013a
   384b0:	013a02cb 	.word	0x013a02cb
   384b4:	00c6013a 	.word	0x00c6013a
   384b8:	013a013a 	.word	0x013a013a
   384bc:	0240013a 	.word	0x0240013a
   384c0:	0275013a 	.word	0x0275013a
   384c4:	013a013a 	.word	0x013a013a
   384c8:	013a074f 	.word	0x013a074f
   384cc:	013a013a 	.word	0x013a013a
   384d0:	013a013a 	.word	0x013a013a
   384d4:	013a013a 	.word	0x013a013a
   384d8:	01d2013a 	.word	0x01d2013a
   384dc:	0236013a 	.word	0x0236013a
   384e0:	01d20087 	.word	0x01d20087
   384e4:	01d201d2 	.word	0x01d201d2
   384e8:	008702be 	.word	0x008702be
   384ec:	013a0080 	.word	0x013a0080
   384f0:	013a02b1 	.word	0x013a02b1
   384f4:	00c80299 	.word	0x00c80299
   384f8:	00800287 	.word	0x00800287
   384fc:	0240013a 	.word	0x0240013a
   38500:	072a007d 	.word	0x072a007d
   38504:	013a013a 	.word	0x013a013a
   38508:	013a072e 	.word	0x013a072e
   3850c:	007d      	.short	0x007d
   3850e:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
   38512:	2200      	movs	r2, #0
   38514:	f81b 7b01 	ldrb.w	r7, [fp], #1
   38518:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   3851c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   38520:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
   38524:	2b09      	cmp	r3, #9
   38526:	d9f5      	bls.n	38514 <_svfprintf_r+0x174>
   38528:	9206      	str	r2, [sp, #24]
   3852a:	e78e      	b.n	3844a <_svfprintf_r+0xaa>
   3852c:	4648      	mov	r0, r9
   3852e:	f7f4 fa1b 	bl	2c968 <_localeconv_r>
   38532:	6843      	ldr	r3, [r0, #4]
   38534:	9317      	str	r3, [sp, #92]	; 0x5c
   38536:	4618      	mov	r0, r3
   38538:	f7e0 f8c2 	bl	186c0 <strlen>
   3853c:	9018      	str	r0, [sp, #96]	; 0x60
   3853e:	4606      	mov	r6, r0
   38540:	4648      	mov	r0, r9
   38542:	f7f4 fa11 	bl	2c968 <_localeconv_r>
   38546:	6883      	ldr	r3, [r0, #8]
   38548:	9315      	str	r3, [sp, #84]	; 0x54
   3854a:	2120      	movs	r1, #32
   3854c:	2e00      	cmp	r6, #0
   3854e:	f040 85c2 	bne.w	390d6 <_svfprintf_r+0xd36>
   38552:	f89b 7000 	ldrb.w	r7, [fp]
   38556:	e776      	b.n	38446 <_svfprintf_r+0xa6>
   38558:	f89b 7000 	ldrb.w	r7, [fp]
   3855c:	f04a 0a20 	orr.w	sl, sl, #32
   38560:	e771      	b.n	38446 <_svfprintf_r+0xa6>
   38562:	f04a 0a10 	orr.w	sl, sl, #16
   38566:	f01a 0f20 	tst.w	sl, #32
   3856a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3856c:	f000 819a 	beq.w	388a4 <_svfprintf_r+0x504>
   38570:	3307      	adds	r3, #7
   38572:	f023 0307 	bic.w	r3, r3, #7
   38576:	461a      	mov	r2, r3
   38578:	685b      	ldr	r3, [r3, #4]
   3857a:	f852 4b08 	ldr.w	r4, [r2], #8
   3857e:	9209      	str	r2, [sp, #36]	; 0x24
   38580:	461e      	mov	r6, r3
   38582:	2b00      	cmp	r3, #0
   38584:	f2c0 856b 	blt.w	3905e <_svfprintf_r+0xcbe>
   38588:	9b04      	ldr	r3, [sp, #16]
   3858a:	3301      	adds	r3, #1
   3858c:	f001 803a 	beq.w	39604 <_svfprintf_r+0x1264>
   38590:	f02a 0380 	bic.w	r3, sl, #128	; 0x80
   38594:	9303      	str	r3, [sp, #12]
   38596:	ea54 0306 	orrs.w	r3, r4, r6
   3859a:	f000 84e7 	beq.w	38f6c <_svfprintf_r+0xbcc>
   3859e:	2c0a      	cmp	r4, #10
   385a0:	f176 0300 	sbcs.w	r3, r6, #0
   385a4:	f080 8790 	bcs.w	394c8 <_svfprintf_r+0x1128>
   385a8:	3430      	adds	r4, #48	; 0x30
   385aa:	2301      	movs	r3, #1
   385ac:	f8dd a00c 	ldr.w	sl, [sp, #12]
   385b0:	f88d 4137 	strb.w	r4, [sp, #311]	; 0x137
   385b4:	9307      	str	r3, [sp, #28]
   385b6:	f20d 1537 	addw	r5, sp, #311	; 0x137
   385ba:	9904      	ldr	r1, [sp, #16]
   385bc:	9807      	ldr	r0, [sp, #28]
   385be:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
   385c2:	4281      	cmp	r1, r0
   385c4:	f04f 0200 	mov.w	r2, #0
   385c8:	bfb8      	it	lt
   385ca:	4601      	movlt	r1, r0
   385cc:	9208      	str	r2, [sp, #32]
   385ce:	9103      	str	r1, [sp, #12]
   385d0:	920c      	str	r2, [sp, #48]	; 0x30
   385d2:	920f      	str	r2, [sp, #60]	; 0x3c
   385d4:	920d      	str	r2, [sp, #52]	; 0x34
   385d6:	2b00      	cmp	r3, #0
   385d8:	f000 8089 	beq.w	386ee <_svfprintf_r+0x34e>
   385dc:	9a03      	ldr	r2, [sp, #12]
   385de:	3201      	adds	r2, #1
   385e0:	9203      	str	r2, [sp, #12]
   385e2:	e084      	b.n	386ee <_svfprintf_r+0x34e>
   385e4:	f04a 0a10 	orr.w	sl, sl, #16
   385e8:	f01a 0620 	ands.w	r6, sl, #32
   385ec:	f000 814b 	beq.w	38886 <_svfprintf_r+0x4e6>
   385f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   385f2:	3307      	adds	r3, #7
   385f4:	f023 0307 	bic.w	r3, r3, #7
   385f8:	685e      	ldr	r6, [r3, #4]
   385fa:	f853 4b08 	ldr.w	r4, [r3], #8
   385fe:	9309      	str	r3, [sp, #36]	; 0x24
   38600:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
   38604:	9303      	str	r3, [sp, #12]
   38606:	2300      	movs	r3, #0
   38608:	2200      	movs	r2, #0
   3860a:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
   3860e:	9a04      	ldr	r2, [sp, #16]
   38610:	1c55      	adds	r5, r2, #1
   38612:	f000 8226 	beq.w	38a62 <_svfprintf_r+0x6c2>
   38616:	9903      	ldr	r1, [sp, #12]
   38618:	f021 0a80 	bic.w	sl, r1, #128	; 0x80
   3861c:	ea54 0106 	orrs.w	r1, r4, r6
   38620:	f040 821d 	bne.w	38a5e <_svfprintf_r+0x6be>
   38624:	2a00      	cmp	r2, #0
   38626:	f041 8029 	bne.w	3967c <_svfprintf_r+0x12dc>
   3862a:	2b00      	cmp	r3, #0
   3862c:	f040 84a4 	bne.w	38f78 <_svfprintf_r+0xbd8>
   38630:	9b03      	ldr	r3, [sp, #12]
   38632:	f013 0301 	ands.w	r3, r3, #1
   38636:	9307      	str	r3, [sp, #28]
   38638:	f000 8542 	beq.w	390c0 <_svfprintf_r+0xd20>
   3863c:	2330      	movs	r3, #48	; 0x30
   3863e:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
   38642:	f20d 1537 	addw	r5, sp, #311	; 0x137
   38646:	e7b8      	b.n	385ba <_svfprintf_r+0x21a>
   38648:	ebbb 0605 	subs.w	r6, fp, r5
   3864c:	f000 80c7 	beq.w	387de <_svfprintf_r+0x43e>
   38650:	9b24      	ldr	r3, [sp, #144]	; 0x90
   38652:	4433      	add	r3, r6
   38654:	9324      	str	r3, [sp, #144]	; 0x90
   38656:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   38658:	3301      	adds	r3, #1
   3865a:	2b07      	cmp	r3, #7
   3865c:	e9c8 5600 	strd	r5, r6, [r8]
   38660:	9323      	str	r3, [sp, #140]	; 0x8c
   38662:	dc09      	bgt.n	38678 <_svfprintf_r+0x2d8>
   38664:	f108 0808 	add.w	r8, r8, #8
   38668:	9b05      	ldr	r3, [sp, #20]
   3866a:	4433      	add	r3, r6
   3866c:	9305      	str	r3, [sp, #20]
   3866e:	e6d7      	b.n	38420 <_svfprintf_r+0x80>
	...
   38678:	ee1a 1a10 	vmov	r1, s20
   3867c:	aa22      	add	r2, sp, #136	; 0x88
   3867e:	4648      	mov	r0, r9
   38680:	f002 ffe0 	bl	3b644 <__ssprint_r>
   38684:	b990      	cbnz	r0, 386ac <_svfprintf_r+0x30c>
   38686:	f10d 0894 	add.w	r8, sp, #148	; 0x94
   3868a:	e7ed      	b.n	38668 <_svfprintf_r+0x2c8>
   3868c:	ee1a 1a10 	vmov	r1, s20
   38690:	aa22      	add	r2, sp, #136	; 0x88
   38692:	4648      	mov	r0, r9
   38694:	f002 ffd6 	bl	3b644 <__ssprint_r>
   38698:	2800      	cmp	r0, #0
   3869a:	f000 8091 	beq.w	387c0 <_svfprintf_r+0x420>
   3869e:	9b08      	ldr	r3, [sp, #32]
   386a0:	b123      	cbz	r3, 386ac <_svfprintf_r+0x30c>
   386a2:	9908      	ldr	r1, [sp, #32]
   386a4:	ee1a 0a90 	vmov	r0, s21
   386a8:	f7f3 feb6 	bl	2c418 <_free_r>
   386ac:	ee1a 3a10 	vmov	r3, s20
   386b0:	899b      	ldrh	r3, [r3, #12]
   386b2:	f013 0f40 	tst.w	r3, #64	; 0x40
   386b6:	9b05      	ldr	r3, [sp, #20]
   386b8:	bf18      	it	ne
   386ba:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   386be:	9305      	str	r3, [sp, #20]
   386c0:	9805      	ldr	r0, [sp, #20]
   386c2:	b04f      	add	sp, #316	; 0x13c
   386c4:	ecbd 8b0a 	vpop	{d8-d12}
   386c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   386cc:	2f00      	cmp	r7, #0
   386ce:	f000 8086 	beq.w	387de <_svfprintf_r+0x43e>
   386d2:	2300      	movs	r3, #0
   386d4:	f88d 70d4 	strb.w	r7, [sp, #212]	; 0xd4
   386d8:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
   386dc:	2201      	movs	r2, #1
   386de:	e9cd 2307 	strd	r2, r3, [sp, #28]
   386e2:	9203      	str	r2, [sp, #12]
   386e4:	9304      	str	r3, [sp, #16]
   386e6:	930c      	str	r3, [sp, #48]	; 0x30
   386e8:	930f      	str	r3, [sp, #60]	; 0x3c
   386ea:	930d      	str	r3, [sp, #52]	; 0x34
   386ec:	ad35      	add	r5, sp, #212	; 0xd4
   386ee:	f01a 0202 	ands.w	r2, sl, #2
   386f2:	920a      	str	r2, [sp, #40]	; 0x28
   386f4:	d002      	beq.n	386fc <_svfprintf_r+0x35c>
   386f6:	9a03      	ldr	r2, [sp, #12]
   386f8:	3202      	adds	r2, #2
   386fa:	9203      	str	r2, [sp, #12]
   386fc:	f01a 0284 	ands.w	r2, sl, #132	; 0x84
   38700:	920b      	str	r2, [sp, #44]	; 0x2c
   38702:	d105      	bne.n	38710 <_svfprintf_r+0x370>
   38704:	9a06      	ldr	r2, [sp, #24]
   38706:	9903      	ldr	r1, [sp, #12]
   38708:	1a56      	subs	r6, r2, r1
   3870a:	2e00      	cmp	r6, #0
   3870c:	f300 830d 	bgt.w	38d2a <_svfprintf_r+0x98a>
   38710:	9c24      	ldr	r4, [sp, #144]	; 0x90
   38712:	b18b      	cbz	r3, 38738 <_svfprintf_r+0x398>
   38714:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   38716:	f10d 026b 	add.w	r2, sp, #107	; 0x6b
   3871a:	3301      	adds	r3, #1
   3871c:	3401      	adds	r4, #1
   3871e:	f8c8 2000 	str.w	r2, [r8]
   38722:	2b07      	cmp	r3, #7
   38724:	f04f 0201 	mov.w	r2, #1
   38728:	9424      	str	r4, [sp, #144]	; 0x90
   3872a:	9323      	str	r3, [sp, #140]	; 0x8c
   3872c:	f8c8 2004 	str.w	r2, [r8, #4]
   38730:	f300 8333 	bgt.w	38d9a <_svfprintf_r+0x9fa>
   38734:	f108 0808 	add.w	r8, r8, #8
   38738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3873a:	b183      	cbz	r3, 3875e <_svfprintf_r+0x3be>
   3873c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   3873e:	aa1b      	add	r2, sp, #108	; 0x6c
   38740:	3301      	adds	r3, #1
   38742:	3402      	adds	r4, #2
   38744:	f8c8 2000 	str.w	r2, [r8]
   38748:	2b07      	cmp	r3, #7
   3874a:	f04f 0202 	mov.w	r2, #2
   3874e:	9424      	str	r4, [sp, #144]	; 0x90
   38750:	9323      	str	r3, [sp, #140]	; 0x8c
   38752:	f8c8 2004 	str.w	r2, [r8, #4]
   38756:	f300 832d 	bgt.w	38db4 <_svfprintf_r+0xa14>
   3875a:	f108 0808 	add.w	r8, r8, #8
   3875e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   38760:	2b80      	cmp	r3, #128	; 0x80
   38762:	f000 820f 	beq.w	38b84 <_svfprintf_r+0x7e4>
   38766:	9b04      	ldr	r3, [sp, #16]
   38768:	9a07      	ldr	r2, [sp, #28]
   3876a:	1a9e      	subs	r6, r3, r2
   3876c:	2e00      	cmp	r6, #0
   3876e:	f300 8250 	bgt.w	38c12 <_svfprintf_r+0x872>
   38772:	f41a 7f80 	tst.w	sl, #256	; 0x100
   38776:	f040 81ab 	bne.w	38ad0 <_svfprintf_r+0x730>
   3877a:	9b07      	ldr	r3, [sp, #28]
   3877c:	f8c8 3004 	str.w	r3, [r8, #4]
   38780:	441c      	add	r4, r3
   38782:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   38784:	f8c8 5000 	str.w	r5, [r8]
   38788:	3301      	adds	r3, #1
   3878a:	2b07      	cmp	r3, #7
   3878c:	9424      	str	r4, [sp, #144]	; 0x90
   3878e:	9323      	str	r3, [sp, #140]	; 0x8c
   38790:	f300 82be 	bgt.w	38d10 <_svfprintf_r+0x970>
   38794:	f108 0808 	add.w	r8, r8, #8
   38798:	f01a 0f04 	tst.w	sl, #4
   3879c:	d005      	beq.n	387aa <_svfprintf_r+0x40a>
   3879e:	9b06      	ldr	r3, [sp, #24]
   387a0:	9a03      	ldr	r2, [sp, #12]
   387a2:	1a9d      	subs	r5, r3, r2
   387a4:	2d00      	cmp	r5, #0
   387a6:	f300 8312 	bgt.w	38dce <_svfprintf_r+0xa2e>
   387aa:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   387ae:	9903      	ldr	r1, [sp, #12]
   387b0:	428a      	cmp	r2, r1
   387b2:	bfac      	ite	ge
   387b4:	189b      	addge	r3, r3, r2
   387b6:	185b      	addlt	r3, r3, r1
   387b8:	9305      	str	r3, [sp, #20]
   387ba:	2c00      	cmp	r4, #0
   387bc:	f47f af66 	bne.w	3868c <_svfprintf_r+0x2ec>
   387c0:	2300      	movs	r3, #0
   387c2:	9323      	str	r3, [sp, #140]	; 0x8c
   387c4:	9b08      	ldr	r3, [sp, #32]
   387c6:	b11b      	cbz	r3, 387d0 <_svfprintf_r+0x430>
   387c8:	9908      	ldr	r1, [sp, #32]
   387ca:	4648      	mov	r0, r9
   387cc:	f7f3 fe24 	bl	2c418 <_free_r>
   387d0:	f10d 0894 	add.w	r8, sp, #148	; 0x94
   387d4:	465d      	mov	r5, fp
   387d6:	782b      	ldrb	r3, [r5, #0]
   387d8:	2b00      	cmp	r3, #0
   387da:	f47f ae14 	bne.w	38406 <_svfprintf_r+0x66>
   387de:	9b24      	ldr	r3, [sp, #144]	; 0x90
   387e0:	2b00      	cmp	r3, #0
   387e2:	f43f af63 	beq.w	386ac <_svfprintf_r+0x30c>
   387e6:	ee1a 4a10 	vmov	r4, s20
   387ea:	ee1a 1a10 	vmov	r1, s20
   387ee:	ee1a 0a90 	vmov	r0, s21
   387f2:	aa22      	add	r2, sp, #136	; 0x88
   387f4:	f002 ff26 	bl	3b644 <__ssprint_r>
   387f8:	89a3      	ldrh	r3, [r4, #12]
   387fa:	e75a      	b.n	386b2 <_svfprintf_r+0x312>
   387fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   387fe:	3307      	adds	r3, #7
   38800:	f023 0307 	bic.w	r3, r3, #7
   38804:	ecb3 7b02 	vldmia	r3!, {d7}
   38808:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   3880c:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
   38810:	9309      	str	r3, [sp, #36]	; 0x24
   38812:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   38816:	ee0b 1a10 	vmov	s22, r1
   3881a:	ee0b 3a90 	vmov	s23, r3
   3881e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   38822:	eeb0 9a4b 	vmov.f32	s18, s22
   38826:	eef0 9a6b 	vmov.f32	s19, s23
   3882a:	4ba5      	ldr	r3, [pc, #660]	; (38ac0 <_svfprintf_r+0x720>)
   3882c:	ec51 0b19 	vmov	r0, r1, d9
   38830:	f7e0 fc0a 	bl	19048 <__aeabi_dcmpun>
   38834:	2800      	cmp	r0, #0
   38836:	f040 8467 	bne.w	39108 <_svfprintf_r+0xd68>
   3883a:	4ba1      	ldr	r3, [pc, #644]	; (38ac0 <_svfprintf_r+0x720>)
   3883c:	ec51 0b19 	vmov	r0, r1, d9
   38840:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   38844:	f7e0 fbe2 	bl	1900c <__aeabi_dcmple>
   38848:	2800      	cmp	r0, #0
   3884a:	f040 845d 	bne.w	39108 <_svfprintf_r+0xd68>
   3884e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   38852:	2200      	movs	r2, #0
   38854:	2300      	movs	r3, #0
   38856:	f7e0 fbcf 	bl	18ff8 <__aeabi_dcmplt>
   3885a:	2800      	cmp	r0, #0
   3885c:	f040 87a5 	bne.w	397aa <_svfprintf_r+0x140a>
   38860:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
   38864:	4d97      	ldr	r5, [pc, #604]	; (38ac4 <_svfprintf_r+0x724>)
   38866:	4a98      	ldr	r2, [pc, #608]	; (38ac8 <_svfprintf_r+0x728>)
   38868:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
   3886c:	2103      	movs	r1, #3
   3886e:	2f47      	cmp	r7, #71	; 0x47
   38870:	bfc8      	it	gt
   38872:	4615      	movgt	r5, r2
   38874:	2200      	movs	r2, #0
   38876:	9208      	str	r2, [sp, #32]
   38878:	9103      	str	r1, [sp, #12]
   3887a:	9107      	str	r1, [sp, #28]
   3887c:	9204      	str	r2, [sp, #16]
   3887e:	920c      	str	r2, [sp, #48]	; 0x30
   38880:	920f      	str	r2, [sp, #60]	; 0x3c
   38882:	920d      	str	r2, [sp, #52]	; 0x34
   38884:	e6a7      	b.n	385d6 <_svfprintf_r+0x236>
   38886:	f01a 0310 	ands.w	r3, sl, #16
   3888a:	f040 8433 	bne.w	390f4 <_svfprintf_r+0xd54>
   3888e:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
   38892:	f000 875b 	beq.w	3974c <_svfprintf_r+0x13ac>
   38896:	9a09      	ldr	r2, [sp, #36]	; 0x24
   38898:	f852 4b04 	ldr.w	r4, [r2], #4
   3889c:	9209      	str	r2, [sp, #36]	; 0x24
   3889e:	461e      	mov	r6, r3
   388a0:	b2a4      	uxth	r4, r4
   388a2:	e6ad      	b.n	38600 <_svfprintf_r+0x260>
   388a4:	f853 4b04 	ldr.w	r4, [r3], #4
   388a8:	9309      	str	r3, [sp, #36]	; 0x24
   388aa:	f01a 0f10 	tst.w	sl, #16
   388ae:	f040 840e 	bne.w	390ce <_svfprintf_r+0xd2e>
   388b2:	f01a 0f40 	tst.w	sl, #64	; 0x40
   388b6:	f000 8406 	beq.w	390c6 <_svfprintf_r+0xd26>
   388ba:	f344 36c0 	sbfx	r6, r4, #15, #1
   388be:	4633      	mov	r3, r6
   388c0:	b224      	sxth	r4, r4
   388c2:	e65e      	b.n	38582 <_svfprintf_r+0x1e2>
   388c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   388c6:	2300      	movs	r3, #0
   388c8:	f852 1b04 	ldr.w	r1, [r2], #4
   388cc:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
   388d0:	f88d 10d4 	strb.w	r1, [sp, #212]	; 0xd4
   388d4:	9209      	str	r2, [sp, #36]	; 0x24
   388d6:	e701      	b.n	386dc <_svfprintf_r+0x33c>
   388d8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   388da:	f854 5b04 	ldr.w	r5, [r4], #4
   388de:	2600      	movs	r6, #0
   388e0:	f88d 606b 	strb.w	r6, [sp, #107]	; 0x6b
   388e4:	2d00      	cmp	r5, #0
   388e6:	f000 86d9 	beq.w	3969c <_svfprintf_r+0x12fc>
   388ea:	9b04      	ldr	r3, [sp, #16]
   388ec:	1c5a      	adds	r2, r3, #1
   388ee:	f000 8546 	beq.w	3937e <_svfprintf_r+0xfde>
   388f2:	461a      	mov	r2, r3
   388f4:	4631      	mov	r1, r6
   388f6:	4628      	mov	r0, r5
   388f8:	f7df fe92 	bl	18620 <memchr>
   388fc:	9008      	str	r0, [sp, #32]
   388fe:	2800      	cmp	r0, #0
   38900:	f001 807a 	beq.w	399f8 <_svfprintf_r+0x1658>
   38904:	9b08      	ldr	r3, [sp, #32]
   38906:	9604      	str	r6, [sp, #16]
   38908:	1b59      	subs	r1, r3, r5
   3890a:	9107      	str	r1, [sp, #28]
   3890c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   38910:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
   38914:	9409      	str	r4, [sp, #36]	; 0x24
   38916:	9103      	str	r1, [sp, #12]
   38918:	9608      	str	r6, [sp, #32]
   3891a:	960c      	str	r6, [sp, #48]	; 0x30
   3891c:	960f      	str	r6, [sp, #60]	; 0x3c
   3891e:	960d      	str	r6, [sp, #52]	; 0x34
   38920:	e659      	b.n	385d6 <_svfprintf_r+0x236>
   38922:	9b09      	ldr	r3, [sp, #36]	; 0x24
   38924:	f853 2b04 	ldr.w	r2, [r3], #4
   38928:	9206      	str	r2, [sp, #24]
   3892a:	2a00      	cmp	r2, #0
   3892c:	f280 83c3 	bge.w	390b6 <_svfprintf_r+0xd16>
   38930:	9a06      	ldr	r2, [sp, #24]
   38932:	9309      	str	r3, [sp, #36]	; 0x24
   38934:	4252      	negs	r2, r2
   38936:	9206      	str	r2, [sp, #24]
   38938:	f89b 7000 	ldrb.w	r7, [fp]
   3893c:	f04a 0a04 	orr.w	sl, sl, #4
   38940:	e581      	b.n	38446 <_svfprintf_r+0xa6>
   38942:	f04a 0310 	orr.w	r3, sl, #16
   38946:	9303      	str	r3, [sp, #12]
   38948:	9b03      	ldr	r3, [sp, #12]
   3894a:	f013 0620 	ands.w	r6, r3, #32
   3894e:	f000 8373 	beq.w	39038 <_svfprintf_r+0xc98>
   38952:	9b09      	ldr	r3, [sp, #36]	; 0x24
   38954:	3307      	adds	r3, #7
   38956:	f023 0307 	bic.w	r3, r3, #7
   3895a:	685e      	ldr	r6, [r3, #4]
   3895c:	f853 4b08 	ldr.w	r4, [r3], #8
   38960:	9309      	str	r3, [sp, #36]	; 0x24
   38962:	2301      	movs	r3, #1
   38964:	e650      	b.n	38608 <_svfprintf_r+0x268>
   38966:	9b09      	ldr	r3, [sp, #36]	; 0x24
   38968:	f853 4b04 	ldr.w	r4, [r3], #4
   3896c:	9309      	str	r3, [sp, #36]	; 0x24
   3896e:	2330      	movs	r3, #48	; 0x30
   38970:	f04a 0202 	orr.w	r2, sl, #2
   38974:	2778      	movs	r7, #120	; 0x78
   38976:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
   3897a:	4b54      	ldr	r3, [pc, #336]	; (38acc <_svfprintf_r+0x72c>)
   3897c:	9314      	str	r3, [sp, #80]	; 0x50
   3897e:	9203      	str	r2, [sp, #12]
   38980:	f88d 706d 	strb.w	r7, [sp, #109]	; 0x6d
   38984:	2600      	movs	r6, #0
   38986:	2302      	movs	r3, #2
   38988:	e63e      	b.n	38608 <_svfprintf_r+0x268>
   3898a:	f01a 0f20 	tst.w	sl, #32
   3898e:	f040 8482 	bne.w	39296 <_svfprintf_r+0xef6>
   38992:	f01a 0f10 	tst.w	sl, #16
   38996:	f040 8678 	bne.w	3968a <_svfprintf_r+0x12ea>
   3899a:	f01a 0f40 	tst.w	sl, #64	; 0x40
   3899e:	f040 874c 	bne.w	3983a <_svfprintf_r+0x149a>
   389a2:	f41a 7f00 	tst.w	sl, #512	; 0x200
   389a6:	f000 8670 	beq.w	3968a <_svfprintf_r+0x12ea>
   389aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   389ac:	9905      	ldr	r1, [sp, #20]
   389ae:	f853 2b04 	ldr.w	r2, [r3], #4
   389b2:	9309      	str	r3, [sp, #36]	; 0x24
   389b4:	7011      	strb	r1, [r2, #0]
   389b6:	465d      	mov	r5, fp
   389b8:	e70d      	b.n	387d6 <_svfprintf_r+0x436>
   389ba:	f89b 7000 	ldrb.w	r7, [fp]
   389be:	2f6c      	cmp	r7, #108	; 0x6c
   389c0:	bf03      	ittte	eq
   389c2:	f89b 7001 	ldrbeq.w	r7, [fp, #1]
   389c6:	f04a 0a20 	orreq.w	sl, sl, #32
   389ca:	f10b 0b01 	addeq.w	fp, fp, #1
   389ce:	f04a 0a10 	orrne.w	sl, sl, #16
   389d2:	e538      	b.n	38446 <_svfprintf_r+0xa6>
   389d4:	f89b 7000 	ldrb.w	r7, [fp]
   389d8:	2f68      	cmp	r7, #104	; 0x68
   389da:	bf03      	ittte	eq
   389dc:	f89b 7001 	ldrbeq.w	r7, [fp, #1]
   389e0:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
   389e4:	f10b 0b01 	addeq.w	fp, fp, #1
   389e8:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
   389ec:	e52b      	b.n	38446 <_svfprintf_r+0xa6>
   389ee:	f89b 7000 	ldrb.w	r7, [fp]
   389f2:	f04a 0a08 	orr.w	sl, sl, #8
   389f6:	e526      	b.n	38446 <_svfprintf_r+0xa6>
   389f8:	f89b 7000 	ldrb.w	r7, [fp]
   389fc:	f04a 0a01 	orr.w	sl, sl, #1
   38a00:	e521      	b.n	38446 <_svfprintf_r+0xa6>
   38a02:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
   38a06:	2b00      	cmp	r3, #0
   38a08:	f47f ada3 	bne.w	38552 <_svfprintf_r+0x1b2>
   38a0c:	f89b 7000 	ldrb.w	r7, [fp]
   38a10:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
   38a14:	e517      	b.n	38446 <_svfprintf_r+0xa6>
   38a16:	f89b 7000 	ldrb.w	r7, [fp]
   38a1a:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   38a1e:	e512      	b.n	38446 <_svfprintf_r+0xa6>
   38a20:	465a      	mov	r2, fp
   38a22:	f812 7b01 	ldrb.w	r7, [r2], #1
   38a26:	2f2a      	cmp	r7, #42	; 0x2a
   38a28:	f001 81f3 	beq.w	39e12 <_svfprintf_r+0x1a72>
   38a2c:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
   38a30:	2b09      	cmp	r3, #9
   38a32:	4693      	mov	fp, r2
   38a34:	bf98      	it	ls
   38a36:	2200      	movls	r2, #0
   38a38:	f200 87f4 	bhi.w	39a24 <_svfprintf_r+0x1684>
   38a3c:	f81b 7b01 	ldrb.w	r7, [fp], #1
   38a40:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   38a44:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   38a48:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
   38a4c:	2b09      	cmp	r3, #9
   38a4e:	d9f5      	bls.n	38a3c <_svfprintf_r+0x69c>
   38a50:	9204      	str	r2, [sp, #16]
   38a52:	e4fa      	b.n	3844a <_svfprintf_r+0xaa>
   38a54:	f89b 7000 	ldrb.w	r7, [fp]
   38a58:	f88d 406b 	strb.w	r4, [sp, #107]	; 0x6b
   38a5c:	e4f3      	b.n	38446 <_svfprintf_r+0xa6>
   38a5e:	f8cd a00c 	str.w	sl, [sp, #12]
   38a62:	2b01      	cmp	r3, #1
   38a64:	f43f ad9b 	beq.w	3859e <_svfprintf_r+0x1fe>
   38a68:	2b02      	cmp	r3, #2
   38a6a:	ad4e      	add	r5, sp, #312	; 0x138
   38a6c:	d112      	bne.n	38a94 <_svfprintf_r+0x6f4>
   38a6e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   38a70:	f004 030f 	and.w	r3, r4, #15
   38a74:	0924      	lsrs	r4, r4, #4
   38a76:	5cd3      	ldrb	r3, [r2, r3]
   38a78:	f805 3d01 	strb.w	r3, [r5, #-1]!
   38a7c:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
   38a80:	0936      	lsrs	r6, r6, #4
   38a82:	ea54 0306 	orrs.w	r3, r4, r6
   38a86:	d1f3      	bne.n	38a70 <_svfprintf_r+0x6d0>
   38a88:	ab4e      	add	r3, sp, #312	; 0x138
   38a8a:	1b5b      	subs	r3, r3, r5
   38a8c:	f8dd a00c 	ldr.w	sl, [sp, #12]
   38a90:	9307      	str	r3, [sp, #28]
   38a92:	e592      	b.n	385ba <_svfprintf_r+0x21a>
   38a94:	f004 0307 	and.w	r3, r4, #7
   38a98:	08e4      	lsrs	r4, r4, #3
   38a9a:	ea44 7446 	orr.w	r4, r4, r6, lsl #29
   38a9e:	08f6      	lsrs	r6, r6, #3
   38aa0:	3330      	adds	r3, #48	; 0x30
   38aa2:	ea54 0106 	orrs.w	r1, r4, r6
   38aa6:	462a      	mov	r2, r5
   38aa8:	f805 3d01 	strb.w	r3, [r5, #-1]!
   38aac:	d1f2      	bne.n	38a94 <_svfprintf_r+0x6f4>
   38aae:	9903      	ldr	r1, [sp, #12]
   38ab0:	07c8      	lsls	r0, r1, #31
   38ab2:	f100 824c 	bmi.w	38f4e <_svfprintf_r+0xbae>
   38ab6:	ab4e      	add	r3, sp, #312	; 0x138
   38ab8:	1b5b      	subs	r3, r3, r5
   38aba:	468a      	mov	sl, r1
   38abc:	9307      	str	r3, [sp, #28]
   38abe:	e57c      	b.n	385ba <_svfprintf_r+0x21a>
   38ac0:	7fefffff 	.word	0x7fefffff
   38ac4:	000440c4 	.word	0x000440c4
   38ac8:	000440c8 	.word	0x000440c8
   38acc:	00041e20 	.word	0x00041e20
   38ad0:	2f65      	cmp	r7, #101	; 0x65
   38ad2:	f340 80d7 	ble.w	38c84 <_svfprintf_r+0x8e4>
   38ad6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   38ada:	2200      	movs	r2, #0
   38adc:	2300      	movs	r3, #0
   38ade:	f7e0 fa81 	bl	18fe4 <__aeabi_dcmpeq>
   38ae2:	2800      	cmp	r0, #0
   38ae4:	f000 81b4 	beq.w	38e50 <_svfprintf_r+0xab0>
   38ae8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   38aea:	4abc      	ldr	r2, [pc, #752]	; (38ddc <_svfprintf_r+0xa3c>)
   38aec:	f8c8 2000 	str.w	r2, [r8]
   38af0:	3301      	adds	r3, #1
   38af2:	3401      	adds	r4, #1
   38af4:	2201      	movs	r2, #1
   38af6:	2b07      	cmp	r3, #7
   38af8:	9424      	str	r4, [sp, #144]	; 0x90
   38afa:	9323      	str	r3, [sp, #140]	; 0x8c
   38afc:	f8c8 2004 	str.w	r2, [r8, #4]
   38b00:	f300 8584 	bgt.w	3960c <_svfprintf_r+0x126c>
   38b04:	f108 0808 	add.w	r8, r8, #8
   38b08:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   38b0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   38b0c:	4293      	cmp	r3, r2
   38b0e:	f280 82cd 	bge.w	390ac <_svfprintf_r+0xd0c>
   38b12:	9b12      	ldr	r3, [sp, #72]	; 0x48
   38b14:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   38b16:	441c      	add	r4, r3
   38b18:	e9c8 2300 	strd	r2, r3, [r8]
   38b1c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   38b1e:	9424      	str	r4, [sp, #144]	; 0x90
   38b20:	3301      	adds	r3, #1
   38b22:	2b07      	cmp	r3, #7
   38b24:	9323      	str	r3, [sp, #140]	; 0x8c
   38b26:	f300 83e9 	bgt.w	392fc <_svfprintf_r+0xf5c>
   38b2a:	f108 0808 	add.w	r8, r8, #8
   38b2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   38b30:	1e5d      	subs	r5, r3, #1
   38b32:	2d00      	cmp	r5, #0
   38b34:	f77f ae30 	ble.w	38798 <_svfprintf_r+0x3f8>
   38b38:	2d10      	cmp	r5, #16
   38b3a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   38b3c:	f341 8147 	ble.w	39dce <_svfprintf_r+0x1a2e>
   38b40:	4fa7      	ldr	r7, [pc, #668]	; (38de0 <_svfprintf_r+0xa40>)
   38b42:	970a      	str	r7, [sp, #40]	; 0x28
   38b44:	4622      	mov	r2, r4
   38b46:	2610      	movs	r6, #16
   38b48:	ee1a 4a10 	vmov	r4, s20
   38b4c:	e005      	b.n	38b5a <_svfprintf_r+0x7ba>
   38b4e:	f108 0808 	add.w	r8, r8, #8
   38b52:	3d10      	subs	r5, #16
   38b54:	2d10      	cmp	r5, #16
   38b56:	f340 8567 	ble.w	39628 <_svfprintf_r+0x1288>
   38b5a:	3301      	adds	r3, #1
   38b5c:	3210      	adds	r2, #16
   38b5e:	2b07      	cmp	r3, #7
   38b60:	e9c8 7600 	strd	r7, r6, [r8]
   38b64:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
   38b68:	ddf1      	ble.n	38b4e <_svfprintf_r+0x7ae>
   38b6a:	aa22      	add	r2, sp, #136	; 0x88
   38b6c:	4621      	mov	r1, r4
   38b6e:	4648      	mov	r0, r9
   38b70:	f002 fd68 	bl	3b644 <__ssprint_r>
   38b74:	2800      	cmp	r0, #0
   38b76:	f47f ad92 	bne.w	3869e <_svfprintf_r+0x2fe>
   38b7a:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
   38b7e:	f10d 0894 	add.w	r8, sp, #148	; 0x94
   38b82:	e7e6      	b.n	38b52 <_svfprintf_r+0x7b2>
   38b84:	9b06      	ldr	r3, [sp, #24]
   38b86:	9a03      	ldr	r2, [sp, #12]
   38b88:	1a9e      	subs	r6, r3, r2
   38b8a:	2e00      	cmp	r6, #0
   38b8c:	f77f adeb 	ble.w	38766 <_svfprintf_r+0x3c6>
   38b90:	2e10      	cmp	r6, #16
   38b92:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   38b94:	f341 804f 	ble.w	39c36 <_svfprintf_r+0x1896>
   38b98:	4991      	ldr	r1, [pc, #580]	; (38de0 <_svfprintf_r+0xa40>)
   38b9a:	950b      	str	r5, [sp, #44]	; 0x2c
   38b9c:	4622      	mov	r2, r4
   38b9e:	ee1a 5a10 	vmov	r5, s20
   38ba2:	910a      	str	r1, [sp, #40]	; 0x28
   38ba4:	460c      	mov	r4, r1
   38ba6:	e004      	b.n	38bb2 <_svfprintf_r+0x812>
   38ba8:	3e10      	subs	r6, #16
   38baa:	2e10      	cmp	r6, #16
   38bac:	f108 0808 	add.w	r8, r8, #8
   38bb0:	dd19      	ble.n	38be6 <_svfprintf_r+0x846>
   38bb2:	3301      	adds	r3, #1
   38bb4:	3210      	adds	r2, #16
   38bb6:	2110      	movs	r1, #16
   38bb8:	2b07      	cmp	r3, #7
   38bba:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
   38bbe:	f8c8 4000 	str.w	r4, [r8]
   38bc2:	f8c8 1004 	str.w	r1, [r8, #4]
   38bc6:	ddef      	ble.n	38ba8 <_svfprintf_r+0x808>
   38bc8:	aa22      	add	r2, sp, #136	; 0x88
   38bca:	4629      	mov	r1, r5
   38bcc:	4648      	mov	r0, r9
   38bce:	f10d 0894 	add.w	r8, sp, #148	; 0x94
   38bd2:	f002 fd37 	bl	3b644 <__ssprint_r>
   38bd6:	2800      	cmp	r0, #0
   38bd8:	f47f ad61 	bne.w	3869e <_svfprintf_r+0x2fe>
   38bdc:	3e10      	subs	r6, #16
   38bde:	2e10      	cmp	r6, #16
   38be0:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
   38be4:	dce5      	bgt.n	38bb2 <_svfprintf_r+0x812>
   38be6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   38be8:	4614      	mov	r4, r2
   38bea:	3301      	adds	r3, #1
   38bec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   38bee:	f8c8 2000 	str.w	r2, [r8]
   38bf2:	4434      	add	r4, r6
   38bf4:	2b07      	cmp	r3, #7
   38bf6:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
   38bfa:	f8c8 6004 	str.w	r6, [r8, #4]
   38bfe:	f300 852f 	bgt.w	39660 <_svfprintf_r+0x12c0>
   38c02:	9b04      	ldr	r3, [sp, #16]
   38c04:	9a07      	ldr	r2, [sp, #28]
   38c06:	1a9e      	subs	r6, r3, r2
   38c08:	2e00      	cmp	r6, #0
   38c0a:	f108 0808 	add.w	r8, r8, #8
   38c0e:	f77f adb0 	ble.w	38772 <_svfprintf_r+0x3d2>
   38c12:	2e10      	cmp	r6, #16
   38c14:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   38c16:	f340 85c4 	ble.w	397a2 <_svfprintf_r+0x1402>
   38c1a:	4871      	ldr	r0, [pc, #452]	; (38de0 <_svfprintf_r+0xa40>)
   38c1c:	900a      	str	r0, [sp, #40]	; 0x28
   38c1e:	4642      	mov	r2, r8
   38c20:	4621      	mov	r1, r4
   38c22:	ee1a 8a10 	vmov	r8, s20
   38c26:	4604      	mov	r4, r0
   38c28:	e004      	b.n	38c34 <_svfprintf_r+0x894>
   38c2a:	3e10      	subs	r6, #16
   38c2c:	2e10      	cmp	r6, #16
   38c2e:	f102 0208 	add.w	r2, r2, #8
   38c32:	dd16      	ble.n	38c62 <_svfprintf_r+0x8c2>
   38c34:	3301      	adds	r3, #1
   38c36:	3110      	adds	r1, #16
   38c38:	2010      	movs	r0, #16
   38c3a:	2b07      	cmp	r3, #7
   38c3c:	e9cd 3123 	strd	r3, r1, [sp, #140]	; 0x8c
   38c40:	6014      	str	r4, [r2, #0]
   38c42:	6050      	str	r0, [r2, #4]
   38c44:	ddf1      	ble.n	38c2a <_svfprintf_r+0x88a>
   38c46:	aa22      	add	r2, sp, #136	; 0x88
   38c48:	4641      	mov	r1, r8
   38c4a:	4648      	mov	r0, r9
   38c4c:	f002 fcfa 	bl	3b644 <__ssprint_r>
   38c50:	2800      	cmp	r0, #0
   38c52:	f47f ad24 	bne.w	3869e <_svfprintf_r+0x2fe>
   38c56:	3e10      	subs	r6, #16
   38c58:	2e10      	cmp	r6, #16
   38c5a:	e9dd 3123 	ldrd	r3, r1, [sp, #140]	; 0x8c
   38c5e:	aa25      	add	r2, sp, #148	; 0x94
   38c60:	dce8      	bgt.n	38c34 <_svfprintf_r+0x894>
   38c62:	4690      	mov	r8, r2
   38c64:	460c      	mov	r4, r1
   38c66:	3301      	adds	r3, #1
   38c68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   38c6a:	f8c8 2000 	str.w	r2, [r8]
   38c6e:	4434      	add	r4, r6
   38c70:	2b07      	cmp	r3, #7
   38c72:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
   38c76:	f8c8 6004 	str.w	r6, [r8, #4]
   38c7a:	f300 81cf 	bgt.w	3901c <_svfprintf_r+0xc7c>
   38c7e:	f108 0808 	add.w	r8, r8, #8
   38c82:	e576      	b.n	38772 <_svfprintf_r+0x3d2>
   38c84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   38c86:	2b01      	cmp	r3, #1
   38c88:	f340 817c 	ble.w	38f84 <_svfprintf_r+0xbe4>
   38c8c:	9e23      	ldr	r6, [sp, #140]	; 0x8c
   38c8e:	f8c8 5000 	str.w	r5, [r8]
   38c92:	3601      	adds	r6, #1
   38c94:	3401      	adds	r4, #1
   38c96:	2301      	movs	r3, #1
   38c98:	2e07      	cmp	r6, #7
   38c9a:	9424      	str	r4, [sp, #144]	; 0x90
   38c9c:	9623      	str	r6, [sp, #140]	; 0x8c
   38c9e:	f8c8 3004 	str.w	r3, [r8, #4]
   38ca2:	f300 81e7 	bgt.w	39074 <_svfprintf_r+0xcd4>
   38ca6:	f108 0808 	add.w	r8, r8, #8
   38caa:	9b12      	ldr	r3, [sp, #72]	; 0x48
   38cac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   38cae:	3601      	adds	r6, #1
   38cb0:	441c      	add	r4, r3
   38cb2:	2e07      	cmp	r6, #7
   38cb4:	e9c8 2300 	strd	r2, r3, [r8]
   38cb8:	e9cd 6423 	strd	r6, r4, [sp, #140]	; 0x8c
   38cbc:	f300 81e8 	bgt.w	39090 <_svfprintf_r+0xcf0>
   38cc0:	f108 0808 	add.w	r8, r8, #8
   38cc4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   38cc8:	2200      	movs	r2, #0
   38cca:	2300      	movs	r3, #0
   38ccc:	f7e0 f98a 	bl	18fe4 <__aeabi_dcmpeq>
   38cd0:	2800      	cmp	r0, #0
   38cd2:	f040 8176 	bne.w	38fc2 <_svfprintf_r+0xc22>
   38cd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   38cd8:	3601      	adds	r6, #1
   38cda:	3b01      	subs	r3, #1
   38cdc:	3501      	adds	r5, #1
   38cde:	441c      	add	r4, r3
   38ce0:	2e07      	cmp	r6, #7
   38ce2:	f8c8 5000 	str.w	r5, [r8]
   38ce6:	9623      	str	r6, [sp, #140]	; 0x8c
   38ce8:	f8c8 3004 	str.w	r3, [r8, #4]
   38cec:	9424      	str	r4, [sp, #144]	; 0x90
   38cee:	f300 815a 	bgt.w	38fa6 <_svfprintf_r+0xc06>
   38cf2:	f108 0808 	add.w	r8, r8, #8
   38cf6:	9b16      	ldr	r3, [sp, #88]	; 0x58
   38cf8:	f8c8 3004 	str.w	r3, [r8, #4]
   38cfc:	3601      	adds	r6, #1
   38cfe:	441c      	add	r4, r3
   38d00:	2e07      	cmp	r6, #7
   38d02:	ab1e      	add	r3, sp, #120	; 0x78
   38d04:	e9cd 6423 	strd	r6, r4, [sp, #140]	; 0x8c
   38d08:	f8c8 3000 	str.w	r3, [r8]
   38d0c:	f77f ad42 	ble.w	38794 <_svfprintf_r+0x3f4>
   38d10:	ee1a 1a10 	vmov	r1, s20
   38d14:	aa22      	add	r2, sp, #136	; 0x88
   38d16:	4648      	mov	r0, r9
   38d18:	f002 fc94 	bl	3b644 <__ssprint_r>
   38d1c:	2800      	cmp	r0, #0
   38d1e:	f47f acbe 	bne.w	3869e <_svfprintf_r+0x2fe>
   38d22:	9c24      	ldr	r4, [sp, #144]	; 0x90
   38d24:	f10d 0894 	add.w	r8, sp, #148	; 0x94
   38d28:	e536      	b.n	38798 <_svfprintf_r+0x3f8>
   38d2a:	2e10      	cmp	r6, #16
   38d2c:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
   38d30:	dd22      	ble.n	38d78 <_svfprintf_r+0x9d8>
   38d32:	9519      	str	r5, [sp, #100]	; 0x64
   38d34:	2410      	movs	r4, #16
   38d36:	ee1a 5a10 	vmov	r5, s20
   38d3a:	e004      	b.n	38d46 <_svfprintf_r+0x9a6>
   38d3c:	3e10      	subs	r6, #16
   38d3e:	2e10      	cmp	r6, #16
   38d40:	f108 0808 	add.w	r8, r8, #8
   38d44:	dd17      	ble.n	38d76 <_svfprintf_r+0x9d6>
   38d46:	3301      	adds	r3, #1
   38d48:	4926      	ldr	r1, [pc, #152]	; (38de4 <_svfprintf_r+0xa44>)
   38d4a:	3210      	adds	r2, #16
   38d4c:	2b07      	cmp	r3, #7
   38d4e:	e9c8 1400 	strd	r1, r4, [r8]
   38d52:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
   38d56:	ddf1      	ble.n	38d3c <_svfprintf_r+0x99c>
   38d58:	aa22      	add	r2, sp, #136	; 0x88
   38d5a:	4629      	mov	r1, r5
   38d5c:	4648      	mov	r0, r9
   38d5e:	f10d 0894 	add.w	r8, sp, #148	; 0x94
   38d62:	f002 fc6f 	bl	3b644 <__ssprint_r>
   38d66:	2800      	cmp	r0, #0
   38d68:	f47f ac99 	bne.w	3869e <_svfprintf_r+0x2fe>
   38d6c:	3e10      	subs	r6, #16
   38d6e:	2e10      	cmp	r6, #16
   38d70:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
   38d74:	dce7      	bgt.n	38d46 <_svfprintf_r+0x9a6>
   38d76:	9d19      	ldr	r5, [sp, #100]	; 0x64
   38d78:	f8c8 6004 	str.w	r6, [r8, #4]
   38d7c:	3301      	adds	r3, #1
   38d7e:	18b4      	adds	r4, r6, r2
   38d80:	2b07      	cmp	r3, #7
   38d82:	4a18      	ldr	r2, [pc, #96]	; (38de4 <_svfprintf_r+0xa44>)
   38d84:	f8c8 2000 	str.w	r2, [r8]
   38d88:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
   38d8c:	f300 83e1 	bgt.w	39552 <_svfprintf_r+0x11b2>
   38d90:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
   38d94:	f108 0808 	add.w	r8, r8, #8
   38d98:	e4bb      	b.n	38712 <_svfprintf_r+0x372>
   38d9a:	ee1a 1a10 	vmov	r1, s20
   38d9e:	aa22      	add	r2, sp, #136	; 0x88
   38da0:	4648      	mov	r0, r9
   38da2:	f002 fc4f 	bl	3b644 <__ssprint_r>
   38da6:	2800      	cmp	r0, #0
   38da8:	f47f ac79 	bne.w	3869e <_svfprintf_r+0x2fe>
   38dac:	9c24      	ldr	r4, [sp, #144]	; 0x90
   38dae:	f10d 0894 	add.w	r8, sp, #148	; 0x94
   38db2:	e4c1      	b.n	38738 <_svfprintf_r+0x398>
   38db4:	ee1a 1a10 	vmov	r1, s20
   38db8:	aa22      	add	r2, sp, #136	; 0x88
   38dba:	4648      	mov	r0, r9
   38dbc:	f002 fc42 	bl	3b644 <__ssprint_r>
   38dc0:	2800      	cmp	r0, #0
   38dc2:	f47f ac6c 	bne.w	3869e <_svfprintf_r+0x2fe>
   38dc6:	9c24      	ldr	r4, [sp, #144]	; 0x90
   38dc8:	f10d 0894 	add.w	r8, sp, #148	; 0x94
   38dcc:	e4c7      	b.n	3875e <_svfprintf_r+0x3be>
   38dce:	2d10      	cmp	r5, #16
   38dd0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   38dd2:	dd26      	ble.n	38e22 <_svfprintf_r+0xa82>
   38dd4:	ee1a 7a10 	vmov	r7, s20
   38dd8:	2610      	movs	r6, #16
   38dda:	e00a      	b.n	38df2 <_svfprintf_r+0xa52>
   38ddc:	000440d4 	.word	0x000440d4
   38de0:	000440e8 	.word	0x000440e8
   38de4:	000440d8 	.word	0x000440d8
   38de8:	3d10      	subs	r5, #16
   38dea:	2d10      	cmp	r5, #16
   38dec:	f108 0808 	add.w	r8, r8, #8
   38df0:	dd17      	ble.n	38e22 <_svfprintf_r+0xa82>
   38df2:	3301      	adds	r3, #1
   38df4:	4ac2      	ldr	r2, [pc, #776]	; (39100 <_svfprintf_r+0xd60>)
   38df6:	3410      	adds	r4, #16
   38df8:	2b07      	cmp	r3, #7
   38dfa:	e9c8 2600 	strd	r2, r6, [r8]
   38dfe:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
   38e02:	ddf1      	ble.n	38de8 <_svfprintf_r+0xa48>
   38e04:	aa22      	add	r2, sp, #136	; 0x88
   38e06:	4639      	mov	r1, r7
   38e08:	4648      	mov	r0, r9
   38e0a:	f10d 0894 	add.w	r8, sp, #148	; 0x94
   38e0e:	f002 fc19 	bl	3b644 <__ssprint_r>
   38e12:	2800      	cmp	r0, #0
   38e14:	f47f ac43 	bne.w	3869e <_svfprintf_r+0x2fe>
   38e18:	3d10      	subs	r5, #16
   38e1a:	2d10      	cmp	r5, #16
   38e1c:	e9dd 3423 	ldrd	r3, r4, [sp, #140]	; 0x8c
   38e20:	dce7      	bgt.n	38df2 <_svfprintf_r+0xa52>
   38e22:	3301      	adds	r3, #1
   38e24:	4ab6      	ldr	r2, [pc, #728]	; (39100 <_svfprintf_r+0xd60>)
   38e26:	f8c8 5004 	str.w	r5, [r8, #4]
   38e2a:	442c      	add	r4, r5
   38e2c:	2b07      	cmp	r3, #7
   38e2e:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
   38e32:	f8c8 2000 	str.w	r2, [r8]
   38e36:	f77f acb8 	ble.w	387aa <_svfprintf_r+0x40a>
   38e3a:	ee1a 1a10 	vmov	r1, s20
   38e3e:	aa22      	add	r2, sp, #136	; 0x88
   38e40:	4648      	mov	r0, r9
   38e42:	f002 fbff 	bl	3b644 <__ssprint_r>
   38e46:	2800      	cmp	r0, #0
   38e48:	f47f ac29 	bne.w	3869e <_svfprintf_r+0x2fe>
   38e4c:	9c24      	ldr	r4, [sp, #144]	; 0x90
   38e4e:	e4ac      	b.n	387aa <_svfprintf_r+0x40a>
   38e50:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   38e52:	2a00      	cmp	r2, #0
   38e54:	f340 8396 	ble.w	39584 <_svfprintf_r+0x11e4>
   38e58:	e9dd 730d 	ldrd	r7, r3, [sp, #52]	; 0x34
   38e5c:	429f      	cmp	r7, r3
   38e5e:	bfa8      	it	ge
   38e60:	461f      	movge	r7, r3
   38e62:	2f00      	cmp	r7, #0
   38e64:	dd0b      	ble.n	38e7e <_svfprintf_r+0xade>
   38e66:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   38e68:	3301      	adds	r3, #1
   38e6a:	443c      	add	r4, r7
   38e6c:	2b07      	cmp	r3, #7
   38e6e:	e9c8 5700 	strd	r5, r7, [r8]
   38e72:	9424      	str	r4, [sp, #144]	; 0x90
   38e74:	9323      	str	r3, [sp, #140]	; 0x8c
   38e76:	f300 855c 	bgt.w	39932 <_svfprintf_r+0x1592>
   38e7a:	f108 0808 	add.w	r8, r8, #8
   38e7e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   38e80:	2f00      	cmp	r7, #0
   38e82:	bfa8      	it	ge
   38e84:	1bf6      	subge	r6, r6, r7
   38e86:	2e00      	cmp	r6, #0
   38e88:	f300 8253 	bgt.w	39332 <_svfprintf_r+0xf92>
   38e8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   38e8e:	f41a 6f80 	tst.w	sl, #1024	; 0x400
   38e92:	442b      	add	r3, r5
   38e94:	9307      	str	r3, [sp, #28]
   38e96:	f040 8283 	bne.w	393a0 <_svfprintf_r+0x1000>
   38e9a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   38e9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   38e9e:	4293      	cmp	r3, r2
   38ea0:	db03      	blt.n	38eaa <_svfprintf_r+0xb0a>
   38ea2:	f01a 0f01 	tst.w	sl, #1
   38ea6:	f000 84b8 	beq.w	3981a <_svfprintf_r+0x147a>
   38eaa:	9a12      	ldr	r2, [sp, #72]	; 0x48
   38eac:	9913      	ldr	r1, [sp, #76]	; 0x4c
   38eae:	4414      	add	r4, r2
   38eb0:	e9c8 1200 	strd	r1, r2, [r8]
   38eb4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   38eb6:	9424      	str	r4, [sp, #144]	; 0x90
   38eb8:	3201      	adds	r2, #1
   38eba:	2a07      	cmp	r2, #7
   38ebc:	9223      	str	r2, [sp, #140]	; 0x8c
   38ebe:	f300 8576 	bgt.w	399ae <_svfprintf_r+0x160e>
   38ec2:	f108 0808 	add.w	r8, r8, #8
   38ec6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   38ec8:	9907      	ldr	r1, [sp, #28]
   38eca:	18ae      	adds	r6, r5, r2
   38ecc:	1a76      	subs	r6, r6, r1
   38ece:	1ad5      	subs	r5, r2, r3
   38ed0:	42ae      	cmp	r6, r5
   38ed2:	bfa8      	it	ge
   38ed4:	462e      	movge	r6, r5
   38ed6:	2e00      	cmp	r6, #0
   38ed8:	dd0d      	ble.n	38ef6 <_svfprintf_r+0xb56>
   38eda:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   38edc:	f8c8 1000 	str.w	r1, [r8]
   38ee0:	3301      	adds	r3, #1
   38ee2:	4434      	add	r4, r6
   38ee4:	2b07      	cmp	r3, #7
   38ee6:	f8c8 6004 	str.w	r6, [r8, #4]
   38eea:	9424      	str	r4, [sp, #144]	; 0x90
   38eec:	9323      	str	r3, [sp, #140]	; 0x8c
   38eee:	f300 859d 	bgt.w	39a2c <_svfprintf_r+0x168c>
   38ef2:	f108 0808 	add.w	r8, r8, #8
   38ef6:	2e00      	cmp	r6, #0
   38ef8:	bfa8      	it	ge
   38efa:	1bad      	subge	r5, r5, r6
   38efc:	2d00      	cmp	r5, #0
   38efe:	f77f ac4b 	ble.w	38798 <_svfprintf_r+0x3f8>
   38f02:	2d10      	cmp	r5, #16
   38f04:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   38f06:	f340 8762 	ble.w	39dce <_svfprintf_r+0x1a2e>
   38f0a:	4f7e      	ldr	r7, [pc, #504]	; (39104 <_svfprintf_r+0xd64>)
   38f0c:	970a      	str	r7, [sp, #40]	; 0x28
   38f0e:	4622      	mov	r2, r4
   38f10:	2610      	movs	r6, #16
   38f12:	ee1a 4a10 	vmov	r4, s20
   38f16:	e005      	b.n	38f24 <_svfprintf_r+0xb84>
   38f18:	f108 0808 	add.w	r8, r8, #8
   38f1c:	3d10      	subs	r5, #16
   38f1e:	2d10      	cmp	r5, #16
   38f20:	f340 8382 	ble.w	39628 <_svfprintf_r+0x1288>
   38f24:	3301      	adds	r3, #1
   38f26:	3210      	adds	r2, #16
   38f28:	2b07      	cmp	r3, #7
   38f2a:	e9c8 7600 	strd	r7, r6, [r8]
   38f2e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
   38f32:	ddf1      	ble.n	38f18 <_svfprintf_r+0xb78>
   38f34:	aa22      	add	r2, sp, #136	; 0x88
   38f36:	4621      	mov	r1, r4
   38f38:	4648      	mov	r0, r9
   38f3a:	f002 fb83 	bl	3b644 <__ssprint_r>
   38f3e:	2800      	cmp	r0, #0
   38f40:	f47f abad 	bne.w	3869e <_svfprintf_r+0x2fe>
   38f44:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
   38f48:	f10d 0894 	add.w	r8, sp, #148	; 0x94
   38f4c:	e7e6      	b.n	38f1c <_svfprintf_r+0xb7c>
   38f4e:	2b30      	cmp	r3, #48	; 0x30
   38f50:	f43f ad9a 	beq.w	38a88 <_svfprintf_r+0x6e8>
   38f54:	2330      	movs	r3, #48	; 0x30
   38f56:	3a02      	subs	r2, #2
   38f58:	f805 3c01 	strb.w	r3, [r5, #-1]
   38f5c:	ab4e      	add	r3, sp, #312	; 0x138
   38f5e:	1a9b      	subs	r3, r3, r2
   38f60:	f8dd a00c 	ldr.w	sl, [sp, #12]
   38f64:	9307      	str	r3, [sp, #28]
   38f66:	4615      	mov	r5, r2
   38f68:	f7ff bb27 	b.w	385ba <_svfprintf_r+0x21a>
   38f6c:	9b04      	ldr	r3, [sp, #16]
   38f6e:	2b00      	cmp	r3, #0
   38f70:	f47f ab1a 	bne.w	385a8 <_svfprintf_r+0x208>
   38f74:	f8dd a00c 	ldr.w	sl, [sp, #12]
   38f78:	2300      	movs	r3, #0
   38f7a:	9304      	str	r3, [sp, #16]
   38f7c:	9307      	str	r3, [sp, #28]
   38f7e:	ad4e      	add	r5, sp, #312	; 0x138
   38f80:	f7ff bb1b 	b.w	385ba <_svfprintf_r+0x21a>
   38f84:	f01a 0f01 	tst.w	sl, #1
   38f88:	f47f ae80 	bne.w	38c8c <_svfprintf_r+0x8ec>
   38f8c:	9e23      	ldr	r6, [sp, #140]	; 0x8c
   38f8e:	f8c8 5000 	str.w	r5, [r8]
   38f92:	3601      	adds	r6, #1
   38f94:	3401      	adds	r4, #1
   38f96:	2301      	movs	r3, #1
   38f98:	2e07      	cmp	r6, #7
   38f9a:	9424      	str	r4, [sp, #144]	; 0x90
   38f9c:	9623      	str	r6, [sp, #140]	; 0x8c
   38f9e:	f8c8 3004 	str.w	r3, [r8, #4]
   38fa2:	f77f aea6 	ble.w	38cf2 <_svfprintf_r+0x952>
   38fa6:	ee1a 1a10 	vmov	r1, s20
   38faa:	aa22      	add	r2, sp, #136	; 0x88
   38fac:	4648      	mov	r0, r9
   38fae:	f002 fb49 	bl	3b644 <__ssprint_r>
   38fb2:	2800      	cmp	r0, #0
   38fb4:	f47f ab73 	bne.w	3869e <_svfprintf_r+0x2fe>
   38fb8:	e9dd 6423 	ldrd	r6, r4, [sp, #140]	; 0x8c
   38fbc:	f10d 0894 	add.w	r8, sp, #148	; 0x94
   38fc0:	e699      	b.n	38cf6 <_svfprintf_r+0x956>
   38fc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   38fc4:	1e5d      	subs	r5, r3, #1
   38fc6:	2d00      	cmp	r5, #0
   38fc8:	f77f ae95 	ble.w	38cf6 <_svfprintf_r+0x956>
   38fcc:	2d10      	cmp	r5, #16
   38fce:	f340 8715 	ble.w	39dfc <_svfprintf_r+0x1a5c>
   38fd2:	4a4c      	ldr	r2, [pc, #304]	; (39104 <_svfprintf_r+0xd64>)
   38fd4:	f8cd a010 	str.w	sl, [sp, #16]
   38fd8:	4623      	mov	r3, r4
   38fda:	ee1a aa10 	vmov	sl, s20
   38fde:	920a      	str	r2, [sp, #40]	; 0x28
   38fe0:	2710      	movs	r7, #16
   38fe2:	4614      	mov	r4, r2
   38fe4:	e005      	b.n	38ff2 <_svfprintf_r+0xc52>
   38fe6:	f108 0808 	add.w	r8, r8, #8
   38fea:	3d10      	subs	r5, #16
   38fec:	2d10      	cmp	r5, #16
   38fee:	f340 839d 	ble.w	3972c <_svfprintf_r+0x138c>
   38ff2:	3601      	adds	r6, #1
   38ff4:	3310      	adds	r3, #16
   38ff6:	2e07      	cmp	r6, #7
   38ff8:	e9c8 4700 	strd	r4, r7, [r8]
   38ffc:	e9cd 6323 	strd	r6, r3, [sp, #140]	; 0x8c
   39000:	ddf1      	ble.n	38fe6 <_svfprintf_r+0xc46>
   39002:	aa22      	add	r2, sp, #136	; 0x88
   39004:	4651      	mov	r1, sl
   39006:	4648      	mov	r0, r9
   39008:	f002 fb1c 	bl	3b644 <__ssprint_r>
   3900c:	2800      	cmp	r0, #0
   3900e:	f47f ab46 	bne.w	3869e <_svfprintf_r+0x2fe>
   39012:	e9dd 6323 	ldrd	r6, r3, [sp, #140]	; 0x8c
   39016:	f10d 0894 	add.w	r8, sp, #148	; 0x94
   3901a:	e7e6      	b.n	38fea <_svfprintf_r+0xc4a>
   3901c:	ee1a 1a10 	vmov	r1, s20
   39020:	aa22      	add	r2, sp, #136	; 0x88
   39022:	4648      	mov	r0, r9
   39024:	f002 fb0e 	bl	3b644 <__ssprint_r>
   39028:	2800      	cmp	r0, #0
   3902a:	f47f ab38 	bne.w	3869e <_svfprintf_r+0x2fe>
   3902e:	9c24      	ldr	r4, [sp, #144]	; 0x90
   39030:	f10d 0894 	add.w	r8, sp, #148	; 0x94
   39034:	f7ff bb9d 	b.w	38772 <_svfprintf_r+0x3d2>
   39038:	9b03      	ldr	r3, [sp, #12]
   3903a:	f013 0310 	ands.w	r3, r3, #16
   3903e:	f040 8123 	bne.w	39288 <_svfprintf_r+0xee8>
   39042:	9a03      	ldr	r2, [sp, #12]
   39044:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   39048:	f000 839b 	beq.w	39782 <_svfprintf_r+0x13e2>
   3904c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   3904e:	f852 4b04 	ldr.w	r4, [r2], #4
   39052:	9209      	str	r2, [sp, #36]	; 0x24
   39054:	461e      	mov	r6, r3
   39056:	b2a4      	uxth	r4, r4
   39058:	2301      	movs	r3, #1
   3905a:	f7ff bad5 	b.w	38608 <_svfprintf_r+0x268>
   3905e:	232d      	movs	r3, #45	; 0x2d
   39060:	4264      	negs	r4, r4
   39062:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
   39066:	eb66 0646 	sbc.w	r6, r6, r6, lsl #1
   3906a:	f8cd a00c 	str.w	sl, [sp, #12]
   3906e:	2301      	movs	r3, #1
   39070:	f7ff bacd 	b.w	3860e <_svfprintf_r+0x26e>
   39074:	ee1a 1a10 	vmov	r1, s20
   39078:	aa22      	add	r2, sp, #136	; 0x88
   3907a:	4648      	mov	r0, r9
   3907c:	f002 fae2 	bl	3b644 <__ssprint_r>
   39080:	2800      	cmp	r0, #0
   39082:	f47f ab0c 	bne.w	3869e <_svfprintf_r+0x2fe>
   39086:	e9dd 6423 	ldrd	r6, r4, [sp, #140]	; 0x8c
   3908a:	f10d 0894 	add.w	r8, sp, #148	; 0x94
   3908e:	e60c      	b.n	38caa <_svfprintf_r+0x90a>
   39090:	ee1a 1a10 	vmov	r1, s20
   39094:	aa22      	add	r2, sp, #136	; 0x88
   39096:	4648      	mov	r0, r9
   39098:	f002 fad4 	bl	3b644 <__ssprint_r>
   3909c:	2800      	cmp	r0, #0
   3909e:	f47f aafe 	bne.w	3869e <_svfprintf_r+0x2fe>
   390a2:	e9dd 6423 	ldrd	r6, r4, [sp, #140]	; 0x8c
   390a6:	f10d 0894 	add.w	r8, sp, #148	; 0x94
   390aa:	e60b      	b.n	38cc4 <_svfprintf_r+0x924>
   390ac:	f01a 0f01 	tst.w	sl, #1
   390b0:	f43f ab72 	beq.w	38798 <_svfprintf_r+0x3f8>
   390b4:	e52d      	b.n	38b12 <_svfprintf_r+0x772>
   390b6:	f89b 7000 	ldrb.w	r7, [fp]
   390ba:	9309      	str	r3, [sp, #36]	; 0x24
   390bc:	f7ff b9c3 	b.w	38446 <_svfprintf_r+0xa6>
   390c0:	ad4e      	add	r5, sp, #312	; 0x138
   390c2:	f7ff ba7a 	b.w	385ba <_svfprintf_r+0x21a>
   390c6:	f41a 7f00 	tst.w	sl, #512	; 0x200
   390ca:	f040 83b0 	bne.w	3982e <_svfprintf_r+0x148e>
   390ce:	17e6      	asrs	r6, r4, #31
   390d0:	4633      	mov	r3, r6
   390d2:	f7ff ba56 	b.w	38582 <_svfprintf_r+0x1e2>
   390d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   390d8:	2b00      	cmp	r3, #0
   390da:	f43f aa3a 	beq.w	38552 <_svfprintf_r+0x1b2>
   390de:	9b15      	ldr	r3, [sp, #84]	; 0x54
   390e0:	781b      	ldrb	r3, [r3, #0]
   390e2:	2b00      	cmp	r3, #0
   390e4:	f43f aa35 	beq.w	38552 <_svfprintf_r+0x1b2>
   390e8:	f89b 7000 	ldrb.w	r7, [fp]
   390ec:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
   390f0:	f7ff b9a9 	b.w	38446 <_svfprintf_r+0xa6>
   390f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   390f6:	f853 4b04 	ldr.w	r4, [r3], #4
   390fa:	9309      	str	r3, [sp, #36]	; 0x24
   390fc:	f7ff ba80 	b.w	38600 <_svfprintf_r+0x260>
   39100:	000440d8 	.word	0x000440d8
   39104:	000440e8 	.word	0x000440e8
   39108:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   3910c:	4602      	mov	r2, r0
   3910e:	460b      	mov	r3, r1
   39110:	f7df ff9a 	bl	19048 <__aeabi_dcmpun>
   39114:	2800      	cmp	r0, #0
   39116:	f040 85c3 	bne.w	39ca0 <_svfprintf_r+0x1900>
   3911a:	2f61      	cmp	r7, #97	; 0x61
   3911c:	f000 8586 	beq.w	39c2c <_svfprintf_r+0x188c>
   39120:	2f41      	cmp	r7, #65	; 0x41
   39122:	f000 8494 	beq.w	39a4e <_svfprintf_r+0x16ae>
   39126:	9b04      	ldr	r3, [sp, #16]
   39128:	3301      	adds	r3, #1
   3912a:	f027 0320 	bic.w	r3, r7, #32
   3912e:	9303      	str	r3, [sp, #12]
   39130:	f000 83b0 	beq.w	39894 <_svfprintf_r+0x14f4>
   39134:	2b47      	cmp	r3, #71	; 0x47
   39136:	f000 8582 	beq.w	39c3e <_svfprintf_r+0x189e>
   3913a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   3913e:	f44a 7280 	orr.w	r2, sl, #256	; 0x100
   39142:	2900      	cmp	r1, #0
   39144:	9207      	str	r2, [sp, #28]
   39146:	f04f 0300 	mov.w	r3, #0
   3914a:	f2c0 8524 	blt.w	39b96 <_svfprintf_r+0x17f6>
   3914e:	ec41 0b18 	vmov	d8, r0, r1
   39152:	930a      	str	r3, [sp, #40]	; 0x28
   39154:	9308      	str	r3, [sp, #32]
   39156:	9b03      	ldr	r3, [sp, #12]
   39158:	2b46      	cmp	r3, #70	; 0x46
   3915a:	f000 83f8 	beq.w	3994e <_svfprintf_r+0x15ae>
   3915e:	2b45      	cmp	r3, #69	; 0x45
   39160:	f000 854e 	beq.w	39c00 <_svfprintf_r+0x1860>
   39164:	eeb0 0a48 	vmov.f32	s0, s16
   39168:	eef0 0a68 	vmov.f32	s1, s17
   3916c:	ab20      	add	r3, sp, #128	; 0x80
   3916e:	9301      	str	r3, [sp, #4]
   39170:	ab1d      	add	r3, sp, #116	; 0x74
   39172:	9300      	str	r3, [sp, #0]
   39174:	9a04      	ldr	r2, [sp, #16]
   39176:	ab1c      	add	r3, sp, #112	; 0x70
   39178:	2102      	movs	r1, #2
   3917a:	4648      	mov	r0, r9
   3917c:	f000 ff0c 	bl	39f98 <_dtoa_r>
   39180:	9b03      	ldr	r3, [sp, #12]
   39182:	2b47      	cmp	r3, #71	; 0x47
   39184:	4605      	mov	r5, r0
   39186:	f040 8669 	bne.w	39e5c <_svfprintf_r+0x1abc>
   3918a:	f01a 0f01 	tst.w	sl, #1
   3918e:	4656      	mov	r6, sl
   39190:	f8dd a01c 	ldr.w	sl, [sp, #28]
   39194:	f040 850b 	bne.w	39bae <_svfprintf_r+0x180e>
   39198:	9b20      	ldr	r3, [sp, #128]	; 0x80
   3919a:	1b5b      	subs	r3, r3, r5
   3919c:	930e      	str	r3, [sp, #56]	; 0x38
   3919e:	9b03      	ldr	r3, [sp, #12]
   391a0:	2b47      	cmp	r3, #71	; 0x47
   391a2:	f000 838b 	beq.w	398bc <_svfprintf_r+0x151c>
   391a6:	9b03      	ldr	r3, [sp, #12]
   391a8:	2b46      	cmp	r3, #70	; 0x46
   391aa:	f000 840f 	beq.w	399cc <_svfprintf_r+0x162c>
   391ae:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   391b0:	930d      	str	r3, [sp, #52]	; 0x34
   391b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   391b4:	9a03      	ldr	r2, [sp, #12]
   391b6:	3b01      	subs	r3, #1
   391b8:	2a41      	cmp	r2, #65	; 0x41
   391ba:	931c      	str	r3, [sp, #112]	; 0x70
   391bc:	f000 85d7 	beq.w	39d6e <_svfprintf_r+0x19ce>
   391c0:	b2fa      	uxtb	r2, r7
   391c2:	2100      	movs	r1, #0
   391c4:	2b00      	cmp	r3, #0
   391c6:	bfb8      	it	lt
   391c8:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
   391ca:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   391ce:	bfba      	itte	lt
   391d0:	f1c3 0301 	rsblt	r3, r3, #1
   391d4:	222d      	movlt	r2, #45	; 0x2d
   391d6:	222b      	movge	r2, #43	; 0x2b
   391d8:	2b09      	cmp	r3, #9
   391da:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   391de:	f340 85b7 	ble.w	39d50 <_svfprintf_r+0x19b0>
   391e2:	f10d 0487 	add.w	r4, sp, #135	; 0x87
   391e6:	f8df c398 	ldr.w	ip, [pc, #920]	; 39580 <_svfprintf_r+0x11e0>
   391ea:	4622      	mov	r2, r4
   391ec:	4610      	mov	r0, r2
   391ee:	fb8c 2103 	smull	r2, r1, ip, r3
   391f2:	17da      	asrs	r2, r3, #31
   391f4:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
   391f8:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   391fc:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
   39200:	3130      	adds	r1, #48	; 0x30
   39202:	f800 1c01 	strb.w	r1, [r0, #-1]
   39206:	4619      	mov	r1, r3
   39208:	2963      	cmp	r1, #99	; 0x63
   3920a:	4613      	mov	r3, r2
   3920c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   39210:	dcec      	bgt.n	391ec <_svfprintf_r+0xe4c>
   39212:	3330      	adds	r3, #48	; 0x30
   39214:	b2d9      	uxtb	r1, r3
   39216:	1e83      	subs	r3, r0, #2
   39218:	429c      	cmp	r4, r3
   3921a:	f802 1c01 	strb.w	r1, [r2, #-1]
   3921e:	f240 8604 	bls.w	39e2a <_svfprintf_r+0x1a8a>
   39222:	4613      	mov	r3, r2
   39224:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   39228:	e001      	b.n	3922e <_svfprintf_r+0xe8e>
   3922a:	f813 1b01 	ldrb.w	r1, [r3], #1
   3922e:	f802 1b01 	strb.w	r1, [r2], #1
   39232:	429c      	cmp	r4, r3
   39234:	d1f9      	bne.n	3922a <_svfprintf_r+0xe8a>
   39236:	f10d 0389 	add.w	r3, sp, #137	; 0x89
   3923a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   3923e:	1a1b      	subs	r3, r3, r0
   39240:	4413      	add	r3, r2
   39242:	aa1e      	add	r2, sp, #120	; 0x78
   39244:	1a9b      	subs	r3, r3, r2
   39246:	9316      	str	r3, [sp, #88]	; 0x58
   39248:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3924a:	9a16      	ldr	r2, [sp, #88]	; 0x58
   3924c:	2b01      	cmp	r3, #1
   3924e:	441a      	add	r2, r3
   39250:	9207      	str	r2, [sp, #28]
   39252:	f340 85b7 	ble.w	39dc4 <_svfprintf_r+0x1a24>
   39256:	9b07      	ldr	r3, [sp, #28]
   39258:	9a12      	ldr	r2, [sp, #72]	; 0x48
   3925a:	4413      	add	r3, r2
   3925c:	9307      	str	r3, [sp, #28]
   3925e:	9a07      	ldr	r2, [sp, #28]
   39260:	2300      	movs	r3, #0
   39262:	f426 6680 	bic.w	r6, r6, #1024	; 0x400
   39266:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   3926a:	f446 7a80 	orr.w	sl, r6, #256	; 0x100
   3926e:	930c      	str	r3, [sp, #48]	; 0x30
   39270:	9203      	str	r2, [sp, #12]
   39272:	930f      	str	r3, [sp, #60]	; 0x3c
   39274:	930d      	str	r3, [sp, #52]	; 0x34
   39276:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   39278:	2b00      	cmp	r3, #0
   3927a:	f040 8345 	bne.w	39908 <_svfprintf_r+0x1568>
   3927e:	9304      	str	r3, [sp, #16]
   39280:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
   39284:	f7ff b9a7 	b.w	385d6 <_svfprintf_r+0x236>
   39288:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3928a:	f853 4b04 	ldr.w	r4, [r3], #4
   3928e:	9309      	str	r3, [sp, #36]	; 0x24
   39290:	2301      	movs	r3, #1
   39292:	f7ff b9b9 	b.w	38608 <_svfprintf_r+0x268>
   39296:	9b09      	ldr	r3, [sp, #36]	; 0x24
   39298:	9805      	ldr	r0, [sp, #20]
   3929a:	f853 1b04 	ldr.w	r1, [r3], #4
   3929e:	9309      	str	r3, [sp, #36]	; 0x24
   392a0:	17c2      	asrs	r2, r0, #31
   392a2:	e9c1 0200 	strd	r0, r2, [r1]
   392a6:	465d      	mov	r5, fp
   392a8:	f7ff ba95 	b.w	387d6 <_svfprintf_r+0x436>
   392ac:	f8cd a00c 	str.w	sl, [sp, #12]
   392b0:	f7ff bb4a 	b.w	38948 <_svfprintf_r+0x5a8>
   392b4:	4baf      	ldr	r3, [pc, #700]	; (39574 <_svfprintf_r+0x11d4>)
   392b6:	9314      	str	r3, [sp, #80]	; 0x50
   392b8:	f01a 0620 	ands.w	r6, sl, #32
   392bc:	f000 80ef 	beq.w	3949e <_svfprintf_r+0x10fe>
   392c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   392c2:	3307      	adds	r3, #7
   392c4:	f023 0307 	bic.w	r3, r3, #7
   392c8:	685e      	ldr	r6, [r3, #4]
   392ca:	f853 4b08 	ldr.w	r4, [r3], #8
   392ce:	9309      	str	r3, [sp, #36]	; 0x24
   392d0:	f01a 0f01 	tst.w	sl, #1
   392d4:	d009      	beq.n	392ea <_svfprintf_r+0xf4a>
   392d6:	ea54 0306 	orrs.w	r3, r4, r6
   392da:	d006      	beq.n	392ea <_svfprintf_r+0xf4a>
   392dc:	2330      	movs	r3, #48	; 0x30
   392de:	f88d 706d 	strb.w	r7, [sp, #109]	; 0x6d
   392e2:	f04a 0a02 	orr.w	sl, sl, #2
   392e6:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
   392ea:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
   392ee:	9303      	str	r3, [sp, #12]
   392f0:	2302      	movs	r3, #2
   392f2:	f7ff b989 	b.w	38608 <_svfprintf_r+0x268>
   392f6:	4ba0      	ldr	r3, [pc, #640]	; (39578 <_svfprintf_r+0x11d8>)
   392f8:	9314      	str	r3, [sp, #80]	; 0x50
   392fa:	e7dd      	b.n	392b8 <_svfprintf_r+0xf18>
   392fc:	ee1a 1a10 	vmov	r1, s20
   39300:	aa22      	add	r2, sp, #136	; 0x88
   39302:	4648      	mov	r0, r9
   39304:	f002 f99e 	bl	3b644 <__ssprint_r>
   39308:	2800      	cmp	r0, #0
   3930a:	f47f a9c8 	bne.w	3869e <_svfprintf_r+0x2fe>
   3930e:	9c24      	ldr	r4, [sp, #144]	; 0x90
   39310:	f10d 0894 	add.w	r8, sp, #148	; 0x94
   39314:	e40b      	b.n	38b2e <_svfprintf_r+0x78e>
   39316:	ee1a 0a90 	vmov	r0, s21
   3931a:	2140      	movs	r1, #64	; 0x40
   3931c:	f7f3 fba0 	bl	2ca60 <_malloc_r>
   39320:	6020      	str	r0, [r4, #0]
   39322:	6120      	str	r0, [r4, #16]
   39324:	2800      	cmp	r0, #0
   39326:	f000 8584 	beq.w	39e32 <_svfprintf_r+0x1a92>
   3932a:	2340      	movs	r3, #64	; 0x40
   3932c:	6163      	str	r3, [r4, #20]
   3932e:	f7ff b852 	b.w	383d6 <_svfprintf_r+0x36>
   39332:	2e10      	cmp	r6, #16
   39334:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   39336:	f340 8569 	ble.w	39e0c <_svfprintf_r+0x1a6c>
   3933a:	4890      	ldr	r0, [pc, #576]	; (3957c <_svfprintf_r+0x11dc>)
   3933c:	900a      	str	r0, [sp, #40]	; 0x28
   3933e:	4642      	mov	r2, r8
   39340:	4621      	mov	r1, r4
   39342:	ee1a 8a10 	vmov	r8, s20
   39346:	2710      	movs	r7, #16
   39348:	4604      	mov	r4, r0
   3934a:	e004      	b.n	39356 <_svfprintf_r+0xfb6>
   3934c:	3208      	adds	r2, #8
   3934e:	3e10      	subs	r6, #16
   39350:	2e10      	cmp	r6, #16
   39352:	f340 822f 	ble.w	397b4 <_svfprintf_r+0x1414>
   39356:	3301      	adds	r3, #1
   39358:	3110      	adds	r1, #16
   3935a:	2b07      	cmp	r3, #7
   3935c:	e9c2 4700 	strd	r4, r7, [r2]
   39360:	e9cd 3123 	strd	r3, r1, [sp, #140]	; 0x8c
   39364:	ddf2      	ble.n	3934c <_svfprintf_r+0xfac>
   39366:	aa22      	add	r2, sp, #136	; 0x88
   39368:	4641      	mov	r1, r8
   3936a:	4648      	mov	r0, r9
   3936c:	f002 f96a 	bl	3b644 <__ssprint_r>
   39370:	2800      	cmp	r0, #0
   39372:	f47f a994 	bne.w	3869e <_svfprintf_r+0x2fe>
   39376:	e9dd 3123 	ldrd	r3, r1, [sp, #140]	; 0x8c
   3937a:	aa25      	add	r2, sp, #148	; 0x94
   3937c:	e7e7      	b.n	3934e <_svfprintf_r+0xfae>
   3937e:	4628      	mov	r0, r5
   39380:	9604      	str	r6, [sp, #16]
   39382:	9409      	str	r4, [sp, #36]	; 0x24
   39384:	f7df f99c 	bl	186c0 <strlen>
   39388:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
   3938c:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
   39390:	9007      	str	r0, [sp, #28]
   39392:	9103      	str	r1, [sp, #12]
   39394:	9608      	str	r6, [sp, #32]
   39396:	960c      	str	r6, [sp, #48]	; 0x30
   39398:	960f      	str	r6, [sp, #60]	; 0x3c
   3939a:	960d      	str	r6, [sp, #52]	; 0x34
   3939c:	f7ff b91b 	b.w	385d6 <_svfprintf_r+0x236>
   393a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   393a2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   393a6:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
   393aa:	9e07      	ldr	r6, [sp, #28]
   393ac:	9f15      	ldr	r7, [sp, #84]	; 0x54
   393ae:	f8cd a01c 	str.w	sl, [sp, #28]
   393b2:	18eb      	adds	r3, r5, r3
   393b4:	9304      	str	r3, [sp, #16]
   393b6:	4642      	mov	r2, r8
   393b8:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
   393bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   393be:	950b      	str	r5, [sp, #44]	; 0x2c
   393c0:	ee1a 8a10 	vmov	r8, s20
   393c4:	46a4      	mov	ip, r4
   393c6:	f1bb 0f00 	cmp.w	fp, #0
   393ca:	d030      	beq.n	3942e <_svfprintf_r+0x108e>
   393cc:	bb93      	cbnz	r3, 39434 <_svfprintf_r+0x1094>
   393ce:	3f01      	subs	r7, #1
   393d0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   393d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   393d6:	e9c2 3a00 	strd	r3, sl, [r2]
   393da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   393dc:	3301      	adds	r3, #1
   393de:	44d4      	add	ip, sl
   393e0:	2b07      	cmp	r3, #7
   393e2:	f8cd c090 	str.w	ip, [sp, #144]	; 0x90
   393e6:	9323      	str	r3, [sp, #140]	; 0x8c
   393e8:	dc62      	bgt.n	394b0 <_svfprintf_r+0x1110>
   393ea:	3208      	adds	r2, #8
   393ec:	9b04      	ldr	r3, [sp, #16]
   393ee:	7838      	ldrb	r0, [r7, #0]
   393f0:	1b9b      	subs	r3, r3, r6
   393f2:	4283      	cmp	r3, r0
   393f4:	bfa8      	it	ge
   393f6:	4603      	movge	r3, r0
   393f8:	2b00      	cmp	r3, #0
   393fa:	461c      	mov	r4, r3
   393fc:	dd0c      	ble.n	39418 <_svfprintf_r+0x1078>
   393fe:	9823      	ldr	r0, [sp, #140]	; 0x8c
   39400:	3001      	adds	r0, #1
   39402:	449c      	add	ip, r3
   39404:	2807      	cmp	r0, #7
   39406:	e9c2 6300 	strd	r6, r3, [r2]
   3940a:	f8cd c090 	str.w	ip, [sp, #144]	; 0x90
   3940e:	9023      	str	r0, [sp, #140]	; 0x8c
   39410:	f300 8119 	bgt.w	39646 <_svfprintf_r+0x12a6>
   39414:	7838      	ldrb	r0, [r7, #0]
   39416:	3208      	adds	r2, #8
   39418:	2c00      	cmp	r4, #0
   3941a:	bfac      	ite	ge
   3941c:	1b05      	subge	r5, r0, r4
   3941e:	4605      	movlt	r5, r0
   39420:	2d00      	cmp	r5, #0
   39422:	dc0b      	bgt.n	3943c <_svfprintf_r+0x109c>
   39424:	4406      	add	r6, r0
   39426:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   39428:	f1bb 0f00 	cmp.w	fp, #0
   3942c:	d1ce      	bne.n	393cc <_svfprintf_r+0x102c>
   3942e:	2b00      	cmp	r3, #0
   39430:	f000 8233 	beq.w	3989a <_svfprintf_r+0x14fa>
   39434:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   39436:	3b01      	subs	r3, #1
   39438:	930c      	str	r3, [sp, #48]	; 0x30
   3943a:	e7cb      	b.n	393d4 <_svfprintf_r+0x1034>
   3943c:	2d10      	cmp	r5, #16
   3943e:	9823      	ldr	r0, [sp, #140]	; 0x8c
   39440:	dd1f      	ble.n	39482 <_svfprintf_r+0x10e2>
   39442:	2410      	movs	r4, #16
   39444:	4663      	mov	r3, ip
   39446:	e004      	b.n	39452 <_svfprintf_r+0x10b2>
   39448:	3d10      	subs	r5, #16
   3944a:	2d10      	cmp	r5, #16
   3944c:	f102 0208 	add.w	r2, r2, #8
   39450:	dd16      	ble.n	39480 <_svfprintf_r+0x10e0>
   39452:	3001      	adds	r0, #1
   39454:	4949      	ldr	r1, [pc, #292]	; (3957c <_svfprintf_r+0x11dc>)
   39456:	3310      	adds	r3, #16
   39458:	2807      	cmp	r0, #7
   3945a:	e9c2 1400 	strd	r1, r4, [r2]
   3945e:	e9cd 0323 	strd	r0, r3, [sp, #140]	; 0x8c
   39462:	ddf1      	ble.n	39448 <_svfprintf_r+0x10a8>
   39464:	aa22      	add	r2, sp, #136	; 0x88
   39466:	4641      	mov	r1, r8
   39468:	4648      	mov	r0, r9
   3946a:	f002 f8eb 	bl	3b644 <__ssprint_r>
   3946e:	2800      	cmp	r0, #0
   39470:	f47f a915 	bne.w	3869e <_svfprintf_r+0x2fe>
   39474:	3d10      	subs	r5, #16
   39476:	2d10      	cmp	r5, #16
   39478:	e9dd 0323 	ldrd	r0, r3, [sp, #140]	; 0x8c
   3947c:	aa25      	add	r2, sp, #148	; 0x94
   3947e:	dce8      	bgt.n	39452 <_svfprintf_r+0x10b2>
   39480:	469c      	mov	ip, r3
   39482:	3001      	adds	r0, #1
   39484:	4b3d      	ldr	r3, [pc, #244]	; (3957c <_svfprintf_r+0x11dc>)
   39486:	6055      	str	r5, [r2, #4]
   39488:	44ac      	add	ip, r5
   3948a:	2807      	cmp	r0, #7
   3948c:	e9cd 0c23 	strd	r0, ip, [sp, #140]	; 0x8c
   39490:	6013      	str	r3, [r2, #0]
   39492:	f300 8240 	bgt.w	39916 <_svfprintf_r+0x1576>
   39496:	7838      	ldrb	r0, [r7, #0]
   39498:	3208      	adds	r2, #8
   3949a:	4406      	add	r6, r0
   3949c:	e7c3      	b.n	39426 <_svfprintf_r+0x1086>
   3949e:	f01a 0310 	ands.w	r3, sl, #16
   394a2:	f000 80a4 	beq.w	395ee <_svfprintf_r+0x124e>
   394a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   394a8:	f853 4b04 	ldr.w	r4, [r3], #4
   394ac:	9309      	str	r3, [sp, #36]	; 0x24
   394ae:	e70f      	b.n	392d0 <_svfprintf_r+0xf30>
   394b0:	aa22      	add	r2, sp, #136	; 0x88
   394b2:	4641      	mov	r1, r8
   394b4:	4648      	mov	r0, r9
   394b6:	f002 f8c5 	bl	3b644 <__ssprint_r>
   394ba:	2800      	cmp	r0, #0
   394bc:	f47f a8ef 	bne.w	3869e <_svfprintf_r+0x2fe>
   394c0:	f8dd c090 	ldr.w	ip, [sp, #144]	; 0x90
   394c4:	aa25      	add	r2, sp, #148	; 0x94
   394c6:	e791      	b.n	393ec <_svfprintf_r+0x104c>
   394c8:	9b03      	ldr	r3, [sp, #12]
   394ca:	9707      	str	r7, [sp, #28]
   394cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   394d0:	2200      	movs	r2, #0
   394d2:	ee09 9a10 	vmov	s18, r9
   394d6:	f8cd 8020 	str.w	r8, [sp, #32]
   394da:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
   394de:	f50d 7a9c 	add.w	sl, sp, #312	; 0x138
   394e2:	4617      	mov	r7, r2
   394e4:	4698      	mov	r8, r3
   394e6:	e00c      	b.n	39502 <_svfprintf_r+0x1162>
   394e8:	2300      	movs	r3, #0
   394ea:	4620      	mov	r0, r4
   394ec:	4631      	mov	r1, r6
   394ee:	220a      	movs	r2, #10
   394f0:	f7df fe88 	bl	19204 <__aeabi_uldivmod>
   394f4:	2c0a      	cmp	r4, #10
   394f6:	f176 0300 	sbcs.w	r3, r6, #0
   394fa:	d31c      	bcc.n	39536 <_svfprintf_r+0x1196>
   394fc:	4604      	mov	r4, r0
   394fe:	460e      	mov	r6, r1
   39500:	46aa      	mov	sl, r5
   39502:	4620      	mov	r0, r4
   39504:	220a      	movs	r2, #10
   39506:	2300      	movs	r3, #0
   39508:	4631      	mov	r1, r6
   3950a:	f7df fe7b 	bl	19204 <__aeabi_uldivmod>
   3950e:	3230      	adds	r2, #48	; 0x30
   39510:	f10a 35ff 	add.w	r5, sl, #4294967295	; 0xffffffff
   39514:	3701      	adds	r7, #1
   39516:	f80a 2c01 	strb.w	r2, [sl, #-1]
   3951a:	f1b8 0f00 	cmp.w	r8, #0
   3951e:	d0e3      	beq.n	394e8 <_svfprintf_r+0x1148>
   39520:	f899 3000 	ldrb.w	r3, [r9]
   39524:	429f      	cmp	r7, r3
   39526:	d1df      	bne.n	394e8 <_svfprintf_r+0x1148>
   39528:	2fff      	cmp	r7, #255	; 0xff
   3952a:	d0dd      	beq.n	394e8 <_svfprintf_r+0x1148>
   3952c:	2c0a      	cmp	r4, #10
   3952e:	f176 0300 	sbcs.w	r3, r6, #0
   39532:	f080 8150 	bcs.w	397d6 <_svfprintf_r+0x1436>
   39536:	ab4e      	add	r3, sp, #312	; 0x138
   39538:	1b5b      	subs	r3, r3, r5
   3953a:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
   3953e:	970e      	str	r7, [sp, #56]	; 0x38
   39540:	ee19 9a10 	vmov	r9, s18
   39544:	e9dd 7807 	ldrd	r7, r8, [sp, #28]
   39548:	f8dd a00c 	ldr.w	sl, [sp, #12]
   3954c:	9307      	str	r3, [sp, #28]
   3954e:	f7ff b834 	b.w	385ba <_svfprintf_r+0x21a>
   39552:	ee1a 1a10 	vmov	r1, s20
   39556:	aa22      	add	r2, sp, #136	; 0x88
   39558:	4648      	mov	r0, r9
   3955a:	f002 f873 	bl	3b644 <__ssprint_r>
   3955e:	2800      	cmp	r0, #0
   39560:	f47f a89d 	bne.w	3869e <_svfprintf_r+0x2fe>
   39564:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
   39568:	9c24      	ldr	r4, [sp, #144]	; 0x90
   3956a:	f10d 0894 	add.w	r8, sp, #148	; 0x94
   3956e:	f7ff b8d0 	b.w	38712 <_svfprintf_r+0x372>
   39572:	bf00      	nop
   39574:	00041e20 	.word	0x00041e20
   39578:	00041e0c 	.word	0x00041e0c
   3957c:	000440e8 	.word	0x000440e8
   39580:	66666667 	.word	0x66666667
   39584:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   39586:	49c0      	ldr	r1, [pc, #768]	; (39888 <_svfprintf_r+0x14e8>)
   39588:	f8c8 1000 	str.w	r1, [r8]
   3958c:	3301      	adds	r3, #1
   3958e:	3401      	adds	r4, #1
   39590:	2101      	movs	r1, #1
   39592:	2b07      	cmp	r3, #7
   39594:	9424      	str	r4, [sp, #144]	; 0x90
   39596:	9323      	str	r3, [sp, #140]	; 0x8c
   39598:	f8c8 1004 	str.w	r1, [r8, #4]
   3959c:	f300 812f 	bgt.w	397fe <_svfprintf_r+0x145e>
   395a0:	f108 0808 	add.w	r8, r8, #8
   395a4:	2a00      	cmp	r2, #0
   395a6:	f040 808a 	bne.w	396be <_svfprintf_r+0x131e>
   395aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   395ac:	f00a 0301 	and.w	r3, sl, #1
   395b0:	4313      	orrs	r3, r2
   395b2:	f43f a8f1 	beq.w	38798 <_svfprintf_r+0x3f8>
   395b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   395b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   395ba:	441c      	add	r4, r3
   395bc:	e9c8 2300 	strd	r2, r3, [r8]
   395c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   395c2:	9424      	str	r4, [sp, #144]	; 0x90
   395c4:	3301      	adds	r3, #1
   395c6:	2b07      	cmp	r3, #7
   395c8:	9323      	str	r3, [sp, #140]	; 0x8c
   395ca:	f300 813f 	bgt.w	3984c <_svfprintf_r+0x14ac>
   395ce:	f108 0808 	add.w	r8, r8, #8
   395d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   395d4:	f8c8 5000 	str.w	r5, [r8]
   395d8:	3301      	adds	r3, #1
   395da:	4414      	add	r4, r2
   395dc:	2b07      	cmp	r3, #7
   395de:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
   395e2:	f8c8 2004 	str.w	r2, [r8, #4]
   395e6:	f77f a8d5 	ble.w	38794 <_svfprintf_r+0x3f4>
   395ea:	f7ff bb91 	b.w	38d10 <_svfprintf_r+0x970>
   395ee:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
   395f2:	f000 80b9 	beq.w	39768 <_svfprintf_r+0x13c8>
   395f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   395f8:	f852 4b04 	ldr.w	r4, [r2], #4
   395fc:	9209      	str	r2, [sp, #36]	; 0x24
   395fe:	461e      	mov	r6, r3
   39600:	b2a4      	uxth	r4, r4
   39602:	e665      	b.n	392d0 <_svfprintf_r+0xf30>
   39604:	f8cd a00c 	str.w	sl, [sp, #12]
   39608:	f7fe bfc9 	b.w	3859e <_svfprintf_r+0x1fe>
   3960c:	ee1a 1a10 	vmov	r1, s20
   39610:	aa22      	add	r2, sp, #136	; 0x88
   39612:	4648      	mov	r0, r9
   39614:	f002 f816 	bl	3b644 <__ssprint_r>
   39618:	2800      	cmp	r0, #0
   3961a:	f47f a840 	bne.w	3869e <_svfprintf_r+0x2fe>
   3961e:	9c24      	ldr	r4, [sp, #144]	; 0x90
   39620:	f10d 0894 	add.w	r8, sp, #148	; 0x94
   39624:	f7ff ba70 	b.w	38b08 <_svfprintf_r+0x768>
   39628:	4614      	mov	r4, r2
   3962a:	3301      	adds	r3, #1
   3962c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   3962e:	f8c8 2000 	str.w	r2, [r8]
   39632:	442c      	add	r4, r5
   39634:	2b07      	cmp	r3, #7
   39636:	f8c8 5004 	str.w	r5, [r8, #4]
   3963a:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
   3963e:	f77f a8a9 	ble.w	38794 <_svfprintf_r+0x3f4>
   39642:	f7ff bb65 	b.w	38d10 <_svfprintf_r+0x970>
   39646:	aa22      	add	r2, sp, #136	; 0x88
   39648:	4641      	mov	r1, r8
   3964a:	4648      	mov	r0, r9
   3964c:	f001 fffa 	bl	3b644 <__ssprint_r>
   39650:	2800      	cmp	r0, #0
   39652:	f47f a824 	bne.w	3869e <_svfprintf_r+0x2fe>
   39656:	7838      	ldrb	r0, [r7, #0]
   39658:	f8dd c090 	ldr.w	ip, [sp, #144]	; 0x90
   3965c:	aa25      	add	r2, sp, #148	; 0x94
   3965e:	e6db      	b.n	39418 <_svfprintf_r+0x1078>
   39660:	ee1a 1a10 	vmov	r1, s20
   39664:	aa22      	add	r2, sp, #136	; 0x88
   39666:	4648      	mov	r0, r9
   39668:	f001 ffec 	bl	3b644 <__ssprint_r>
   3966c:	2800      	cmp	r0, #0
   3966e:	f47f a816 	bne.w	3869e <_svfprintf_r+0x2fe>
   39672:	9c24      	ldr	r4, [sp, #144]	; 0x90
   39674:	f10d 0894 	add.w	r8, sp, #148	; 0x94
   39678:	f7ff b875 	b.w	38766 <_svfprintf_r+0x3c6>
   3967c:	2b01      	cmp	r3, #1
   3967e:	f8cd a00c 	str.w	sl, [sp, #12]
   39682:	f47f a9f1 	bne.w	38a68 <_svfprintf_r+0x6c8>
   39686:	f7fe bf8f 	b.w	385a8 <_svfprintf_r+0x208>
   3968a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3968c:	9905      	ldr	r1, [sp, #20]
   3968e:	f853 2b04 	ldr.w	r2, [r3], #4
   39692:	465d      	mov	r5, fp
   39694:	6011      	str	r1, [r2, #0]
   39696:	9309      	str	r3, [sp, #36]	; 0x24
   39698:	f7ff b89d 	b.w	387d6 <_svfprintf_r+0x436>
   3969c:	9a04      	ldr	r2, [sp, #16]
   3969e:	9508      	str	r5, [sp, #32]
   396a0:	2a06      	cmp	r2, #6
   396a2:	4629      	mov	r1, r5
   396a4:	bf28      	it	cs
   396a6:	2206      	movcs	r2, #6
   396a8:	9504      	str	r5, [sp, #16]
   396aa:	462b      	mov	r3, r5
   396ac:	9203      	str	r2, [sp, #12]
   396ae:	4d77      	ldr	r5, [pc, #476]	; (3988c <_svfprintf_r+0x14ec>)
   396b0:	9409      	str	r4, [sp, #36]	; 0x24
   396b2:	9207      	str	r2, [sp, #28]
   396b4:	910c      	str	r1, [sp, #48]	; 0x30
   396b6:	910f      	str	r1, [sp, #60]	; 0x3c
   396b8:	910d      	str	r1, [sp, #52]	; 0x34
   396ba:	f7fe bf8c 	b.w	385d6 <_svfprintf_r+0x236>
   396be:	9b12      	ldr	r3, [sp, #72]	; 0x48
   396c0:	9913      	ldr	r1, [sp, #76]	; 0x4c
   396c2:	441c      	add	r4, r3
   396c4:	e9c8 1300 	strd	r1, r3, [r8]
   396c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   396ca:	9424      	str	r4, [sp, #144]	; 0x90
   396cc:	3301      	adds	r3, #1
   396ce:	2b07      	cmp	r3, #7
   396d0:	9323      	str	r3, [sp, #140]	; 0x8c
   396d2:	f300 80bb 	bgt.w	3984c <_svfprintf_r+0x14ac>
   396d6:	f108 0808 	add.w	r8, r8, #8
   396da:	2a00      	cmp	r2, #0
   396dc:	f6bf af79 	bge.w	395d2 <_svfprintf_r+0x1232>
   396e0:	4256      	negs	r6, r2
   396e2:	3210      	adds	r2, #16
   396e4:	f280 83ae 	bge.w	39e44 <_svfprintf_r+0x1aa4>
   396e8:	4869      	ldr	r0, [pc, #420]	; (39890 <_svfprintf_r+0x14f0>)
   396ea:	900a      	str	r0, [sp, #40]	; 0x28
   396ec:	4621      	mov	r1, r4
   396ee:	4642      	mov	r2, r8
   396f0:	2710      	movs	r7, #16
   396f2:	ee1a 8a10 	vmov	r8, s20
   396f6:	4604      	mov	r4, r0
   396f8:	e004      	b.n	39704 <_svfprintf_r+0x1364>
   396fa:	3208      	adds	r2, #8
   396fc:	3e10      	subs	r6, #16
   396fe:	2e10      	cmp	r6, #16
   39700:	f340 82af 	ble.w	39c62 <_svfprintf_r+0x18c2>
   39704:	3301      	adds	r3, #1
   39706:	3110      	adds	r1, #16
   39708:	2b07      	cmp	r3, #7
   3970a:	e9c2 4700 	strd	r4, r7, [r2]
   3970e:	e9cd 3123 	strd	r3, r1, [sp, #140]	; 0x8c
   39712:	ddf2      	ble.n	396fa <_svfprintf_r+0x135a>
   39714:	aa22      	add	r2, sp, #136	; 0x88
   39716:	4641      	mov	r1, r8
   39718:	4648      	mov	r0, r9
   3971a:	f001 ff93 	bl	3b644 <__ssprint_r>
   3971e:	2800      	cmp	r0, #0
   39720:	f47e afbd 	bne.w	3869e <_svfprintf_r+0x2fe>
   39724:	e9dd 3123 	ldrd	r3, r1, [sp, #140]	; 0x8c
   39728:	aa25      	add	r2, sp, #148	; 0x94
   3972a:	e7e7      	b.n	396fc <_svfprintf_r+0x135c>
   3972c:	f8dd a010 	ldr.w	sl, [sp, #16]
   39730:	461c      	mov	r4, r3
   39732:	3601      	adds	r6, #1
   39734:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   39736:	f8c8 3000 	str.w	r3, [r8]
   3973a:	442c      	add	r4, r5
   3973c:	2e07      	cmp	r6, #7
   3973e:	e9cd 6423 	strd	r6, r4, [sp, #140]	; 0x8c
   39742:	f8c8 5004 	str.w	r5, [r8, #4]
   39746:	f77f aad4 	ble.w	38cf2 <_svfprintf_r+0x952>
   3974a:	e42c      	b.n	38fa6 <_svfprintf_r+0xc06>
   3974c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3974e:	f41a 7600 	ands.w	r6, sl, #512	; 0x200
   39752:	bf14      	ite	ne
   39754:	f853 4b04 	ldrne.w	r4, [r3], #4
   39758:	f853 4b04 	ldreq.w	r4, [r3], #4
   3975c:	9309      	str	r3, [sp, #36]	; 0x24
   3975e:	bf1c      	itt	ne
   39760:	4616      	movne	r6, r2
   39762:	b2e4      	uxtbne	r4, r4
   39764:	f7fe bf4c 	b.w	38600 <_svfprintf_r+0x260>
   39768:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3976a:	f41a 7600 	ands.w	r6, sl, #512	; 0x200
   3976e:	bf14      	ite	ne
   39770:	f853 4b04 	ldrne.w	r4, [r3], #4
   39774:	f853 4b04 	ldreq.w	r4, [r3], #4
   39778:	9309      	str	r3, [sp, #36]	; 0x24
   3977a:	bf1c      	itt	ne
   3977c:	4616      	movne	r6, r2
   3977e:	b2e4      	uxtbne	r4, r4
   39780:	e5a6      	b.n	392d0 <_svfprintf_r+0xf30>
   39782:	9b03      	ldr	r3, [sp, #12]
   39784:	f413 7600 	ands.w	r6, r3, #512	; 0x200
   39788:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3978a:	bf14      	ite	ne
   3978c:	f853 4b04 	ldrne.w	r4, [r3], #4
   39790:	f853 4b04 	ldreq.w	r4, [r3], #4
   39794:	9309      	str	r3, [sp, #36]	; 0x24
   39796:	bf1c      	itt	ne
   39798:	4616      	movne	r6, r2
   3979a:	b2e4      	uxtbne	r4, r4
   3979c:	2301      	movs	r3, #1
   3979e:	f7fe bf33 	b.w	38608 <_svfprintf_r+0x268>
   397a2:	4a3b      	ldr	r2, [pc, #236]	; (39890 <_svfprintf_r+0x14f0>)
   397a4:	920a      	str	r2, [sp, #40]	; 0x28
   397a6:	f7ff ba5e 	b.w	38c66 <_svfprintf_r+0x8c6>
   397aa:	232d      	movs	r3, #45	; 0x2d
   397ac:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
   397b0:	f7ff b858 	b.w	38864 <_svfprintf_r+0x4c4>
   397b4:	4690      	mov	r8, r2
   397b6:	460c      	mov	r4, r1
   397b8:	3301      	adds	r3, #1
   397ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   397bc:	f8c8 2000 	str.w	r2, [r8]
   397c0:	4434      	add	r4, r6
   397c2:	2b07      	cmp	r3, #7
   397c4:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
   397c8:	f8c8 6004 	str.w	r6, [r8, #4]
   397cc:	dc4d      	bgt.n	3986a <_svfprintf_r+0x14ca>
   397ce:	f108 0808 	add.w	r8, r8, #8
   397d2:	f7ff bb5b 	b.w	38e8c <_svfprintf_r+0xaec>
   397d6:	9b18      	ldr	r3, [sp, #96]	; 0x60
   397d8:	9917      	ldr	r1, [sp, #92]	; 0x5c
   397da:	1aed      	subs	r5, r5, r3
   397dc:	461a      	mov	r2, r3
   397de:	4628      	mov	r0, r5
   397e0:	f7f3 fe9a 	bl	2d518 <strncpy>
   397e4:	f899 3001 	ldrb.w	r3, [r9, #1]
   397e8:	b10b      	cbz	r3, 397ee <_svfprintf_r+0x144e>
   397ea:	f109 0901 	add.w	r9, r9, #1
   397ee:	4620      	mov	r0, r4
   397f0:	4631      	mov	r1, r6
   397f2:	220a      	movs	r2, #10
   397f4:	2300      	movs	r3, #0
   397f6:	2700      	movs	r7, #0
   397f8:	f7df fd04 	bl	19204 <__aeabi_uldivmod>
   397fc:	e67e      	b.n	394fc <_svfprintf_r+0x115c>
   397fe:	ee1a 1a10 	vmov	r1, s20
   39802:	aa22      	add	r2, sp, #136	; 0x88
   39804:	4648      	mov	r0, r9
   39806:	f001 ff1d 	bl	3b644 <__ssprint_r>
   3980a:	2800      	cmp	r0, #0
   3980c:	f47e af47 	bne.w	3869e <_svfprintf_r+0x2fe>
   39810:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   39812:	9c24      	ldr	r4, [sp, #144]	; 0x90
   39814:	f10d 0894 	add.w	r8, sp, #148	; 0x94
   39818:	e6c4      	b.n	395a4 <_svfprintf_r+0x1204>
   3981a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   3981c:	9907      	ldr	r1, [sp, #28]
   3981e:	18ae      	adds	r6, r5, r2
   39820:	1a76      	subs	r6, r6, r1
   39822:	1ad5      	subs	r5, r2, r3
   39824:	42ae      	cmp	r6, r5
   39826:	bfa8      	it	ge
   39828:	462e      	movge	r6, r5
   3982a:	f7ff bb64 	b.w	38ef6 <_svfprintf_r+0xb56>
   3982e:	f344 16c0 	sbfx	r6, r4, #7, #1
   39832:	4633      	mov	r3, r6
   39834:	b264      	sxtb	r4, r4
   39836:	f7fe bea4 	b.w	38582 <_svfprintf_r+0x1e2>
   3983a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3983c:	9905      	ldr	r1, [sp, #20]
   3983e:	f853 2b04 	ldr.w	r2, [r3], #4
   39842:	9309      	str	r3, [sp, #36]	; 0x24
   39844:	8011      	strh	r1, [r2, #0]
   39846:	465d      	mov	r5, fp
   39848:	f7fe bfc5 	b.w	387d6 <_svfprintf_r+0x436>
   3984c:	ee1a 1a10 	vmov	r1, s20
   39850:	aa22      	add	r2, sp, #136	; 0x88
   39852:	4648      	mov	r0, r9
   39854:	f001 fef6 	bl	3b644 <__ssprint_r>
   39858:	2800      	cmp	r0, #0
   3985a:	f47e af20 	bne.w	3869e <_svfprintf_r+0x2fe>
   3985e:	e9dd 3423 	ldrd	r3, r4, [sp, #140]	; 0x8c
   39862:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   39864:	f10d 0894 	add.w	r8, sp, #148	; 0x94
   39868:	e737      	b.n	396da <_svfprintf_r+0x133a>
   3986a:	ee1a 1a10 	vmov	r1, s20
   3986e:	aa22      	add	r2, sp, #136	; 0x88
   39870:	4648      	mov	r0, r9
   39872:	f001 fee7 	bl	3b644 <__ssprint_r>
   39876:	2800      	cmp	r0, #0
   39878:	f47e af11 	bne.w	3869e <_svfprintf_r+0x2fe>
   3987c:	9c24      	ldr	r4, [sp, #144]	; 0x90
   3987e:	f10d 0894 	add.w	r8, sp, #148	; 0x94
   39882:	f7ff bb03 	b.w	38e8c <_svfprintf_r+0xaec>
   39886:	bf00      	nop
   39888:	000440d4 	.word	0x000440d4
   3988c:	00041e34 	.word	0x00041e34
   39890:	000440e8 	.word	0x000440e8
   39894:	2306      	movs	r3, #6
   39896:	9304      	str	r3, [sp, #16]
   39898:	e44f      	b.n	3913a <_svfprintf_r+0xd9a>
   3989a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   3989c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3989e:	f8dd a01c 	ldr.w	sl, [sp, #28]
   398a2:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   398a6:	9715      	str	r7, [sp, #84]	; 0x54
   398a8:	18eb      	adds	r3, r5, r3
   398aa:	429e      	cmp	r6, r3
   398ac:	4690      	mov	r8, r2
   398ae:	4632      	mov	r2, r6
   398b0:	bf28      	it	cs
   398b2:	461a      	movcs	r2, r3
   398b4:	4664      	mov	r4, ip
   398b6:	9207      	str	r2, [sp, #28]
   398b8:	f7ff baef 	b.w	38e9a <_svfprintf_r+0xafa>
   398bc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   398be:	930d      	str	r3, [sp, #52]	; 0x34
   398c0:	1cda      	adds	r2, r3, #3
   398c2:	db02      	blt.n	398ca <_svfprintf_r+0x152a>
   398c4:	9a04      	ldr	r2, [sp, #16]
   398c6:	4293      	cmp	r3, r2
   398c8:	dd04      	ble.n	398d4 <_svfprintf_r+0x1534>
   398ca:	3f02      	subs	r7, #2
   398cc:	f027 0320 	bic.w	r3, r7, #32
   398d0:	9303      	str	r3, [sp, #12]
   398d2:	e46e      	b.n	391b2 <_svfprintf_r+0xe12>
   398d4:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
   398d8:	4293      	cmp	r3, r2
   398da:	f2c0 8099 	blt.w	39a10 <_svfprintf_r+0x1670>
   398de:	07f0      	lsls	r0, r6, #31
   398e0:	f140 81db 	bpl.w	39c9a <_svfprintf_r+0x18fa>
   398e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   398e6:	4413      	add	r3, r2
   398e8:	9307      	str	r3, [sp, #28]
   398ea:	0571      	lsls	r1, r6, #21
   398ec:	d503      	bpl.n	398f6 <_svfprintf_r+0x1556>
   398ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   398f0:	2b00      	cmp	r3, #0
   398f2:	f300 81ff 	bgt.w	39cf4 <_svfprintf_r+0x1954>
   398f6:	9b07      	ldr	r3, [sp, #28]
   398f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   398fc:	9303      	str	r3, [sp, #12]
   398fe:	2767      	movs	r7, #103	; 0x67
   39900:	2300      	movs	r3, #0
   39902:	930c      	str	r3, [sp, #48]	; 0x30
   39904:	930f      	str	r3, [sp, #60]	; 0x3c
   39906:	e4b6      	b.n	39276 <_svfprintf_r+0xed6>
   39908:	232d      	movs	r3, #45	; 0x2d
   3990a:	2200      	movs	r2, #0
   3990c:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
   39910:	9204      	str	r2, [sp, #16]
   39912:	f7fe be63 	b.w	385dc <_svfprintf_r+0x23c>
   39916:	aa22      	add	r2, sp, #136	; 0x88
   39918:	4641      	mov	r1, r8
   3991a:	4648      	mov	r0, r9
   3991c:	f001 fe92 	bl	3b644 <__ssprint_r>
   39920:	2800      	cmp	r0, #0
   39922:	f47e aebc 	bne.w	3869e <_svfprintf_r+0x2fe>
   39926:	7838      	ldrb	r0, [r7, #0]
   39928:	f8dd c090 	ldr.w	ip, [sp, #144]	; 0x90
   3992c:	aa25      	add	r2, sp, #148	; 0x94
   3992e:	4406      	add	r6, r0
   39930:	e579      	b.n	39426 <_svfprintf_r+0x1086>
   39932:	ee1a 1a10 	vmov	r1, s20
   39936:	aa22      	add	r2, sp, #136	; 0x88
   39938:	4648      	mov	r0, r9
   3993a:	f001 fe83 	bl	3b644 <__ssprint_r>
   3993e:	2800      	cmp	r0, #0
   39940:	f47e aead 	bne.w	3869e <_svfprintf_r+0x2fe>
   39944:	9c24      	ldr	r4, [sp, #144]	; 0x90
   39946:	f10d 0894 	add.w	r8, sp, #148	; 0x94
   3994a:	f7ff ba98 	b.w	38e7e <_svfprintf_r+0xade>
   3994e:	ab20      	add	r3, sp, #128	; 0x80
   39950:	9301      	str	r3, [sp, #4]
   39952:	ab1d      	add	r3, sp, #116	; 0x74
   39954:	9300      	str	r3, [sp, #0]
   39956:	9a04      	ldr	r2, [sp, #16]
   39958:	eeb0 0a48 	vmov.f32	s0, s16
   3995c:	eef0 0a68 	vmov.f32	s1, s17
   39960:	ab1c      	add	r3, sp, #112	; 0x70
   39962:	2103      	movs	r1, #3
   39964:	4648      	mov	r0, r9
   39966:	f000 fb17 	bl	39f98 <_dtoa_r>
   3996a:	7803      	ldrb	r3, [r0, #0]
   3996c:	2b30      	cmp	r3, #48	; 0x30
   3996e:	4605      	mov	r5, r0
   39970:	f000 8203 	beq.w	39d7a <_svfprintf_r+0x19da>
   39974:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   39976:	9a04      	ldr	r2, [sp, #16]
   39978:	4656      	mov	r6, sl
   3997a:	4413      	add	r3, r2
   3997c:	f8dd a01c 	ldr.w	sl, [sp, #28]
   39980:	18ec      	adds	r4, r5, r3
   39982:	ec51 0b18 	vmov	r0, r1, d8
   39986:	2200      	movs	r2, #0
   39988:	2300      	movs	r3, #0
   3998a:	f7df fb2b 	bl	18fe4 <__aeabi_dcmpeq>
   3998e:	b108      	cbz	r0, 39994 <_svfprintf_r+0x15f4>
   39990:	4623      	mov	r3, r4
   39992:	e402      	b.n	3919a <_svfprintf_r+0xdfa>
   39994:	9b20      	ldr	r3, [sp, #128]	; 0x80
   39996:	42a3      	cmp	r3, r4
   39998:	f4bf abff 	bcs.w	3919a <_svfprintf_r+0xdfa>
   3999c:	2130      	movs	r1, #48	; 0x30
   3999e:	1c5a      	adds	r2, r3, #1
   399a0:	9220      	str	r2, [sp, #128]	; 0x80
   399a2:	7019      	strb	r1, [r3, #0]
   399a4:	9b20      	ldr	r3, [sp, #128]	; 0x80
   399a6:	429c      	cmp	r4, r3
   399a8:	d8f9      	bhi.n	3999e <_svfprintf_r+0x15fe>
   399aa:	f7ff bbf6 	b.w	3919a <_svfprintf_r+0xdfa>
   399ae:	ee1a 1a10 	vmov	r1, s20
   399b2:	aa22      	add	r2, sp, #136	; 0x88
   399b4:	4648      	mov	r0, r9
   399b6:	f001 fe45 	bl	3b644 <__ssprint_r>
   399ba:	2800      	cmp	r0, #0
   399bc:	f47e ae6f 	bne.w	3869e <_svfprintf_r+0x2fe>
   399c0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   399c2:	9c24      	ldr	r4, [sp, #144]	; 0x90
   399c4:	f10d 0894 	add.w	r8, sp, #148	; 0x94
   399c8:	f7ff ba7d 	b.w	38ec6 <_svfprintf_r+0xb26>
   399cc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   399ce:	920d      	str	r2, [sp, #52]	; 0x34
   399d0:	2a00      	cmp	r2, #0
   399d2:	f340 81ff 	ble.w	39dd4 <_svfprintf_r+0x1a34>
   399d6:	9904      	ldr	r1, [sp, #16]
   399d8:	f006 0301 	and.w	r3, r6, #1
   399dc:	430b      	orrs	r3, r1
   399de:	f040 81b1 	bne.w	39d44 <_svfprintf_r+0x19a4>
   399e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   399e4:	9307      	str	r3, [sp, #28]
   399e6:	2766      	movs	r7, #102	; 0x66
   399e8:	0573      	lsls	r3, r6, #21
   399ea:	f100 8184 	bmi.w	39cf6 <_svfprintf_r+0x1956>
   399ee:	9b07      	ldr	r3, [sp, #28]
   399f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   399f4:	9303      	str	r3, [sp, #12]
   399f6:	e783      	b.n	39900 <_svfprintf_r+0x1560>
   399f8:	9b04      	ldr	r3, [sp, #16]
   399fa:	9303      	str	r3, [sp, #12]
   399fc:	9307      	str	r3, [sp, #28]
   399fe:	9409      	str	r4, [sp, #36]	; 0x24
   39a00:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
   39a04:	9004      	str	r0, [sp, #16]
   39a06:	900c      	str	r0, [sp, #48]	; 0x30
   39a08:	900f      	str	r0, [sp, #60]	; 0x3c
   39a0a:	900d      	str	r0, [sp, #52]	; 0x34
   39a0c:	f7fe bde3 	b.w	385d6 <_svfprintf_r+0x236>
   39a10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   39a12:	9a12      	ldr	r2, [sp, #72]	; 0x48
   39a14:	189a      	adds	r2, r3, r2
   39a16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   39a18:	9207      	str	r2, [sp, #28]
   39a1a:	2b00      	cmp	r3, #0
   39a1c:	f340 81bb 	ble.w	39d96 <_svfprintf_r+0x19f6>
   39a20:	2767      	movs	r7, #103	; 0x67
   39a22:	e7e1      	b.n	399e8 <_svfprintf_r+0x1648>
   39a24:	2300      	movs	r3, #0
   39a26:	9304      	str	r3, [sp, #16]
   39a28:	f7fe bd0f 	b.w	3844a <_svfprintf_r+0xaa>
   39a2c:	ee1a 1a10 	vmov	r1, s20
   39a30:	aa22      	add	r2, sp, #136	; 0x88
   39a32:	4648      	mov	r0, r9
   39a34:	f001 fe06 	bl	3b644 <__ssprint_r>
   39a38:	2800      	cmp	r0, #0
   39a3a:	f47e ae30 	bne.w	3869e <_svfprintf_r+0x2fe>
   39a3e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
   39a40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   39a42:	9c24      	ldr	r4, [sp, #144]	; 0x90
   39a44:	1b5d      	subs	r5, r3, r5
   39a46:	f10d 0894 	add.w	r8, sp, #148	; 0x94
   39a4a:	f7ff ba54 	b.w	38ef6 <_svfprintf_r+0xb56>
   39a4e:	2330      	movs	r3, #48	; 0x30
   39a50:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
   39a54:	2358      	movs	r3, #88	; 0x58
   39a56:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
   39a5a:	9b04      	ldr	r3, [sp, #16]
   39a5c:	2b63      	cmp	r3, #99	; 0x63
   39a5e:	f04a 0402 	orr.w	r4, sl, #2
   39a62:	f300 80a7 	bgt.w	39bb4 <_svfprintf_r+0x1814>
   39a66:	2300      	movs	r3, #0
   39a68:	9308      	str	r3, [sp, #32]
   39a6a:	ad35      	add	r5, sp, #212	; 0xd4
   39a6c:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
   39a70:	f44a 7381 	orr.w	r3, sl, #258	; 0x102
   39a74:	9307      	str	r3, [sp, #28]
   39a76:	2a00      	cmp	r2, #0
   39a78:	f027 0320 	bic.w	r3, r7, #32
   39a7c:	46a2      	mov	sl, r4
   39a7e:	9303      	str	r3, [sp, #12]
   39a80:	f2c0 808a 	blt.w	39b98 <_svfprintf_r+0x17f8>
   39a84:	2300      	movs	r3, #0
   39a86:	ec42 1b18 	vmov	d8, r1, r2
   39a8a:	930a      	str	r3, [sp, #40]	; 0x28
   39a8c:	2f61      	cmp	r7, #97	; 0x61
   39a8e:	f000 8115 	beq.w	39cbc <_svfprintf_r+0x191c>
   39a92:	2f41      	cmp	r7, #65	; 0x41
   39a94:	f47f ab5f 	bne.w	39156 <_svfprintf_r+0xdb6>
   39a98:	eeb0 0a48 	vmov.f32	s0, s16
   39a9c:	eef0 0a68 	vmov.f32	s1, s17
   39aa0:	a81c      	add	r0, sp, #112	; 0x70
   39aa2:	f7fe fa27 	bl	37ef4 <frexp>
   39aa6:	2200      	movs	r2, #0
   39aa8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   39aac:	ec51 0b10 	vmov	r0, r1, d0
   39ab0:	f7df f830 	bl	18b14 <__aeabi_dmul>
   39ab4:	4602      	mov	r2, r0
   39ab6:	460b      	mov	r3, r1
   39ab8:	ec43 2b19 	vmov	d9, r2, r3
   39abc:	2200      	movs	r2, #0
   39abe:	2300      	movs	r3, #0
   39ac0:	f7df fa90 	bl	18fe4 <__aeabi_dcmpeq>
   39ac4:	b108      	cbz	r0, 39aca <_svfprintf_r+0x172a>
   39ac6:	2301      	movs	r3, #1
   39ac8:	931c      	str	r3, [sp, #112]	; 0x70
   39aca:	4bb7      	ldr	r3, [pc, #732]	; (39da8 <_svfprintf_r+0x1a08>)
   39acc:	930b      	str	r3, [sp, #44]	; 0x2c
   39ace:	9b04      	ldr	r3, [sp, #16]
   39ad0:	9519      	str	r5, [sp, #100]	; 0x64
   39ad2:	e9cd b70c 	strd	fp, r7, [sp, #48]	; 0x30
   39ad6:	e9cd a80e 	strd	sl, r8, [sp, #56]	; 0x38
   39ada:	ee0c 9a10 	vmov	s24, r9
   39ade:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   39ae2:	ec59 8b19 	vmov	r8, r9, d9
   39ae6:	1e5e      	subs	r6, r3, #1
   39ae8:	462c      	mov	r4, r5
   39aea:	e005      	b.n	39af8 <_svfprintf_r+0x1758>
   39aec:	2200      	movs	r2, #0
   39aee:	2300      	movs	r3, #0
   39af0:	3e01      	subs	r6, #1
   39af2:	f7df fa77 	bl	18fe4 <__aeabi_dcmpeq>
   39af6:	b9e0      	cbnz	r0, 39b32 <_svfprintf_r+0x1792>
   39af8:	4bac      	ldr	r3, [pc, #688]	; (39dac <_svfprintf_r+0x1a0c>)
   39afa:	2200      	movs	r2, #0
   39afc:	4640      	mov	r0, r8
   39afe:	4649      	mov	r1, r9
   39b00:	f7df f808 	bl	18b14 <__aeabi_dmul>
   39b04:	4689      	mov	r9, r1
   39b06:	4680      	mov	r8, r0
   39b08:	f7df fab4 	bl	19074 <__aeabi_d2iz>
   39b0c:	4605      	mov	r5, r0
   39b0e:	f7de ff97 	bl	18a40 <__aeabi_i2d>
   39b12:	460b      	mov	r3, r1
   39b14:	4602      	mov	r2, r0
   39b16:	4649      	mov	r1, r9
   39b18:	4640      	mov	r0, r8
   39b1a:	f7de fe43 	bl	187a4 <__aeabi_dsub>
   39b1e:	f81b 3005 	ldrb.w	r3, [fp, r5]
   39b22:	46a2      	mov	sl, r4
   39b24:	f804 3b01 	strb.w	r3, [r4], #1
   39b28:	1c73      	adds	r3, r6, #1
   39b2a:	4637      	mov	r7, r6
   39b2c:	4680      	mov	r8, r0
   39b2e:	4689      	mov	r9, r1
   39b30:	d1dc      	bne.n	39aec <_svfprintf_r+0x174c>
   39b32:	ec49 8b19 	vmov	d9, r8, r9
   39b36:	4b9e      	ldr	r3, [pc, #632]	; (39db0 <_svfprintf_r+0x1a10>)
   39b38:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   39b3c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   39b40:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
   39b44:	ec51 0b19 	vmov	r0, r1, d9
   39b48:	2200      	movs	r2, #0
   39b4a:	463e      	mov	r6, r7
   39b4c:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   39b50:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   39b52:	950d      	str	r5, [sp, #52]	; 0x34
   39b54:	ee1c 9a10 	vmov	r9, s24
   39b58:	9d19      	ldr	r5, [sp, #100]	; 0x64
   39b5a:	f7df fa6b 	bl	19034 <__aeabi_dcmpgt>
   39b5e:	bb98      	cbnz	r0, 39bc8 <_svfprintf_r+0x1828>
   39b60:	ec51 0b19 	vmov	r0, r1, d9
   39b64:	4b92      	ldr	r3, [pc, #584]	; (39db0 <_svfprintf_r+0x1a10>)
   39b66:	2200      	movs	r2, #0
   39b68:	f7df fa3c 	bl	18fe4 <__aeabi_dcmpeq>
   39b6c:	b110      	cbz	r0, 39b74 <_svfprintf_r+0x17d4>
   39b6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   39b70:	07d9      	lsls	r1, r3, #31
   39b72:	d429      	bmi.n	39bc8 <_svfprintf_r+0x1828>
   39b74:	2e00      	cmp	r6, #0
   39b76:	4633      	mov	r3, r6
   39b78:	db06      	blt.n	39b88 <_svfprintf_r+0x17e8>
   39b7a:	3301      	adds	r3, #1
   39b7c:	4423      	add	r3, r4
   39b7e:	2230      	movs	r2, #48	; 0x30
   39b80:	f804 2b01 	strb.w	r2, [r4], #1
   39b84:	42a3      	cmp	r3, r4
   39b86:	d1fb      	bne.n	39b80 <_svfprintf_r+0x17e0>
   39b88:	1b63      	subs	r3, r4, r5
   39b8a:	4656      	mov	r6, sl
   39b8c:	930e      	str	r3, [sp, #56]	; 0x38
   39b8e:	f8dd a01c 	ldr.w	sl, [sp, #28]
   39b92:	f7ff bb04 	b.w	3919e <_svfprintf_r+0xdfe>
   39b96:	9308      	str	r3, [sp, #32]
   39b98:	e9dd 3410 	ldrd	r3, r4, [sp, #64]	; 0x40
   39b9c:	ee08 3a10 	vmov	s16, r3
   39ba0:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   39ba4:	ee08 3a90 	vmov	s17, r3
   39ba8:	232d      	movs	r3, #45	; 0x2d
   39baa:	930a      	str	r3, [sp, #40]	; 0x28
   39bac:	e76e      	b.n	39a8c <_svfprintf_r+0x16ec>
   39bae:	9b04      	ldr	r3, [sp, #16]
   39bb0:	18ec      	adds	r4, r5, r3
   39bb2:	e6e6      	b.n	39982 <_svfprintf_r+0x15e2>
   39bb4:	1c59      	adds	r1, r3, #1
   39bb6:	4648      	mov	r0, r9
   39bb8:	f7f2 ff52 	bl	2ca60 <_malloc_r>
   39bbc:	4605      	mov	r5, r0
   39bbe:	2800      	cmp	r0, #0
   39bc0:	f000 8143 	beq.w	39e4a <_svfprintf_r+0x1aaa>
   39bc4:	9008      	str	r0, [sp, #32]
   39bc6:	e751      	b.n	39a6c <_svfprintf_r+0x16cc>
   39bc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   39bca:	9320      	str	r3, [sp, #128]	; 0x80
   39bcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   39bce:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   39bd2:	7bd9      	ldrb	r1, [r3, #15]
   39bd4:	428a      	cmp	r2, r1
   39bd6:	4623      	mov	r3, r4
   39bd8:	d109      	bne.n	39bee <_svfprintf_r+0x184e>
   39bda:	2030      	movs	r0, #48	; 0x30
   39bdc:	f803 0c01 	strb.w	r0, [r3, #-1]
   39be0:	9b20      	ldr	r3, [sp, #128]	; 0x80
   39be2:	1e5a      	subs	r2, r3, #1
   39be4:	9220      	str	r2, [sp, #128]	; 0x80
   39be6:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   39bea:	4291      	cmp	r1, r2
   39bec:	d0f6      	beq.n	39bdc <_svfprintf_r+0x183c>
   39bee:	2a39      	cmp	r2, #57	; 0x39
   39bf0:	bf0b      	itete	eq
   39bf2:	9a0b      	ldreq	r2, [sp, #44]	; 0x2c
   39bf4:	3201      	addne	r2, #1
   39bf6:	7a92      	ldrbeq	r2, [r2, #10]
   39bf8:	b2d2      	uxtbne	r2, r2
   39bfa:	f803 2c01 	strb.w	r2, [r3, #-1]
   39bfe:	e7c3      	b.n	39b88 <_svfprintf_r+0x17e8>
   39c00:	9b04      	ldr	r3, [sp, #16]
   39c02:	eeb0 0a48 	vmov.f32	s0, s16
   39c06:	eef0 0a68 	vmov.f32	s1, s17
   39c0a:	1c5c      	adds	r4, r3, #1
   39c0c:	ab20      	add	r3, sp, #128	; 0x80
   39c0e:	9301      	str	r3, [sp, #4]
   39c10:	ab1d      	add	r3, sp, #116	; 0x74
   39c12:	9300      	str	r3, [sp, #0]
   39c14:	4622      	mov	r2, r4
   39c16:	ab1c      	add	r3, sp, #112	; 0x70
   39c18:	2102      	movs	r1, #2
   39c1a:	4648      	mov	r0, r9
   39c1c:	f000 f9bc 	bl	39f98 <_dtoa_r>
   39c20:	4605      	mov	r5, r0
   39c22:	4656      	mov	r6, sl
   39c24:	442c      	add	r4, r5
   39c26:	f8dd a01c 	ldr.w	sl, [sp, #28]
   39c2a:	e6aa      	b.n	39982 <_svfprintf_r+0x15e2>
   39c2c:	2330      	movs	r3, #48	; 0x30
   39c2e:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
   39c32:	2378      	movs	r3, #120	; 0x78
   39c34:	e70f      	b.n	39a56 <_svfprintf_r+0x16b6>
   39c36:	4a5f      	ldr	r2, [pc, #380]	; (39db4 <_svfprintf_r+0x1a14>)
   39c38:	920a      	str	r2, [sp, #40]	; 0x28
   39c3a:	f7fe bfd6 	b.w	38bea <_svfprintf_r+0x84a>
   39c3e:	9b04      	ldr	r3, [sp, #16]
   39c40:	2b00      	cmp	r3, #0
   39c42:	bf08      	it	eq
   39c44:	2301      	moveq	r3, #1
   39c46:	9304      	str	r3, [sp, #16]
   39c48:	9b11      	ldr	r3, [sp, #68]	; 0x44
   39c4a:	f44a 7280 	orr.w	r2, sl, #256	; 0x100
   39c4e:	2b00      	cmp	r3, #0
   39c50:	9207      	str	r2, [sp, #28]
   39c52:	f2c0 80d9 	blt.w	39e08 <_svfprintf_r+0x1a68>
   39c56:	ed9d 8b10 	vldr	d8, [sp, #64]	; 0x40
   39c5a:	9008      	str	r0, [sp, #32]
   39c5c:	900a      	str	r0, [sp, #40]	; 0x28
   39c5e:	f7ff ba81 	b.w	39164 <_svfprintf_r+0xdc4>
   39c62:	460c      	mov	r4, r1
   39c64:	4690      	mov	r8, r2
   39c66:	3301      	adds	r3, #1
   39c68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   39c6a:	f8c8 2000 	str.w	r2, [r8]
   39c6e:	4434      	add	r4, r6
   39c70:	2b07      	cmp	r3, #7
   39c72:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
   39c76:	f8c8 6004 	str.w	r6, [r8, #4]
   39c7a:	f77f aca8 	ble.w	395ce <_svfprintf_r+0x122e>
   39c7e:	ee1a 1a10 	vmov	r1, s20
   39c82:	aa22      	add	r2, sp, #136	; 0x88
   39c84:	4648      	mov	r0, r9
   39c86:	f001 fcdd 	bl	3b644 <__ssprint_r>
   39c8a:	2800      	cmp	r0, #0
   39c8c:	f47e ad07 	bne.w	3869e <_svfprintf_r+0x2fe>
   39c90:	e9dd 3423 	ldrd	r3, r4, [sp, #140]	; 0x8c
   39c94:	f10d 0894 	add.w	r8, sp, #148	; 0x94
   39c98:	e49b      	b.n	395d2 <_svfprintf_r+0x1232>
   39c9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   39c9c:	9307      	str	r3, [sp, #28]
   39c9e:	e624      	b.n	398ea <_svfprintf_r+0x154a>
   39ca0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   39ca2:	4d45      	ldr	r5, [pc, #276]	; (39db8 <_svfprintf_r+0x1a18>)
   39ca4:	4a45      	ldr	r2, [pc, #276]	; (39dbc <_svfprintf_r+0x1a1c>)
   39ca6:	2b00      	cmp	r3, #0
   39ca8:	bfb6      	itet	lt
   39caa:	232d      	movlt	r3, #45	; 0x2d
   39cac:	f89d 306b 	ldrbge.w	r3, [sp, #107]	; 0x6b
   39cb0:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
   39cb4:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
   39cb8:	f7fe bdd8 	b.w	3886c <_svfprintf_r+0x4cc>
   39cbc:	a81c      	add	r0, sp, #112	; 0x70
   39cbe:	eeb0 0a48 	vmov.f32	s0, s16
   39cc2:	eef0 0a68 	vmov.f32	s1, s17
   39cc6:	f7fe f915 	bl	37ef4 <frexp>
   39cca:	2200      	movs	r2, #0
   39ccc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   39cd0:	ec51 0b10 	vmov	r0, r1, d0
   39cd4:	f7de ff1e 	bl	18b14 <__aeabi_dmul>
   39cd8:	4602      	mov	r2, r0
   39cda:	460b      	mov	r3, r1
   39cdc:	ec43 2b19 	vmov	d9, r2, r3
   39ce0:	2200      	movs	r2, #0
   39ce2:	2300      	movs	r3, #0
   39ce4:	f7df f97e 	bl	18fe4 <__aeabi_dcmpeq>
   39ce8:	b108      	cbz	r0, 39cee <_svfprintf_r+0x194e>
   39cea:	2301      	movs	r3, #1
   39cec:	931c      	str	r3, [sp, #112]	; 0x70
   39cee:	4b34      	ldr	r3, [pc, #208]	; (39dc0 <_svfprintf_r+0x1a20>)
   39cf0:	930b      	str	r3, [sp, #44]	; 0x2c
   39cf2:	e6ec      	b.n	39ace <_svfprintf_r+0x172e>
   39cf4:	2767      	movs	r7, #103	; 0x67
   39cf6:	9915      	ldr	r1, [sp, #84]	; 0x54
   39cf8:	780b      	ldrb	r3, [r1, #0]
   39cfa:	2bff      	cmp	r3, #255	; 0xff
   39cfc:	f000 80b0 	beq.w	39e60 <_svfprintf_r+0x1ac0>
   39d00:	2400      	movs	r4, #0
   39d02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   39d04:	4620      	mov	r0, r4
   39d06:	e003      	b.n	39d10 <_svfprintf_r+0x1970>
   39d08:	3001      	adds	r0, #1
   39d0a:	3101      	adds	r1, #1
   39d0c:	2bff      	cmp	r3, #255	; 0xff
   39d0e:	d008      	beq.n	39d22 <_svfprintf_r+0x1982>
   39d10:	4293      	cmp	r3, r2
   39d12:	da06      	bge.n	39d22 <_svfprintf_r+0x1982>
   39d14:	1ad2      	subs	r2, r2, r3
   39d16:	784b      	ldrb	r3, [r1, #1]
   39d18:	2b00      	cmp	r3, #0
   39d1a:	d1f5      	bne.n	39d08 <_svfprintf_r+0x1968>
   39d1c:	780b      	ldrb	r3, [r1, #0]
   39d1e:	3401      	adds	r4, #1
   39d20:	e7f4      	b.n	39d0c <_svfprintf_r+0x196c>
   39d22:	9115      	str	r1, [sp, #84]	; 0x54
   39d24:	920d      	str	r2, [sp, #52]	; 0x34
   39d26:	900f      	str	r0, [sp, #60]	; 0x3c
   39d28:	940c      	str	r4, [sp, #48]	; 0x30
   39d2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   39d2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   39d2e:	9918      	ldr	r1, [sp, #96]	; 0x60
   39d30:	4413      	add	r3, r2
   39d32:	9a07      	ldr	r2, [sp, #28]
   39d34:	fb01 2303 	mla	r3, r1, r3, r2
   39d38:	9307      	str	r3, [sp, #28]
   39d3a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   39d3e:	9303      	str	r3, [sp, #12]
   39d40:	f7ff ba99 	b.w	39276 <_svfprintf_r+0xed6>
   39d44:	9b12      	ldr	r3, [sp, #72]	; 0x48
   39d46:	18d3      	adds	r3, r2, r3
   39d48:	4419      	add	r1, r3
   39d4a:	9107      	str	r1, [sp, #28]
   39d4c:	2766      	movs	r7, #102	; 0x66
   39d4e:	e64b      	b.n	399e8 <_svfprintf_r+0x1648>
   39d50:	2900      	cmp	r1, #0
   39d52:	d156      	bne.n	39e02 <_svfprintf_r+0x1a62>
   39d54:	2230      	movs	r2, #48	; 0x30
   39d56:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
   39d5a:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
   39d5e:	3330      	adds	r3, #48	; 0x30
   39d60:	f802 3b01 	strb.w	r3, [r2], #1
   39d64:	ab1e      	add	r3, sp, #120	; 0x78
   39d66:	1ad3      	subs	r3, r2, r3
   39d68:	9316      	str	r3, [sp, #88]	; 0x58
   39d6a:	f7ff ba6d 	b.w	39248 <_svfprintf_r+0xea8>
   39d6e:	f107 020f 	add.w	r2, r7, #15
   39d72:	b2d2      	uxtb	r2, r2
   39d74:	2101      	movs	r1, #1
   39d76:	f7ff ba25 	b.w	391c4 <_svfprintf_r+0xe24>
   39d7a:	ec51 0b18 	vmov	r0, r1, d8
   39d7e:	2200      	movs	r2, #0
   39d80:	2300      	movs	r3, #0
   39d82:	f7df f92f 	bl	18fe4 <__aeabi_dcmpeq>
   39d86:	2800      	cmp	r0, #0
   39d88:	f47f adf4 	bne.w	39974 <_svfprintf_r+0x15d4>
   39d8c:	9b04      	ldr	r3, [sp, #16]
   39d8e:	f1c3 0301 	rsb	r3, r3, #1
   39d92:	931c      	str	r3, [sp, #112]	; 0x70
   39d94:	e5ef      	b.n	39976 <_svfprintf_r+0x15d6>
   39d96:	f1c3 0301 	rsb	r3, r3, #1
   39d9a:	441a      	add	r2, r3
   39d9c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   39da0:	9207      	str	r2, [sp, #28]
   39da2:	9303      	str	r3, [sp, #12]
   39da4:	2767      	movs	r7, #103	; 0x67
   39da6:	e5ab      	b.n	39900 <_svfprintf_r+0x1560>
   39da8:	00041e0c 	.word	0x00041e0c
   39dac:	40300000 	.word	0x40300000
   39db0:	3fe00000 	.word	0x3fe00000
   39db4:	000440e8 	.word	0x000440e8
   39db8:	000440cc 	.word	0x000440cc
   39dbc:	000440d0 	.word	0x000440d0
   39dc0:	00041e20 	.word	0x00041e20
   39dc4:	07f4      	lsls	r4, r6, #31
   39dc6:	f57f aa4a 	bpl.w	3925e <_svfprintf_r+0xebe>
   39dca:	f7ff ba44 	b.w	39256 <_svfprintf_r+0xeb6>
   39dce:	4a26      	ldr	r2, [pc, #152]	; (39e68 <_svfprintf_r+0x1ac8>)
   39dd0:	920a      	str	r2, [sp, #40]	; 0x28
   39dd2:	e42a      	b.n	3962a <_svfprintf_r+0x128a>
   39dd4:	9a04      	ldr	r2, [sp, #16]
   39dd6:	f006 0601 	and.w	r6, r6, #1
   39dda:	ea56 0302 	orrs.w	r3, r6, r2
   39dde:	d104      	bne.n	39dea <_svfprintf_r+0x1a4a>
   39de0:	2301      	movs	r3, #1
   39de2:	9303      	str	r3, [sp, #12]
   39de4:	2766      	movs	r7, #102	; 0x66
   39de6:	9307      	str	r3, [sp, #28]
   39de8:	e58a      	b.n	39900 <_svfprintf_r+0x1560>
   39dea:	9b12      	ldr	r3, [sp, #72]	; 0x48
   39dec:	3301      	adds	r3, #1
   39dee:	441a      	add	r2, r3
   39df0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   39df4:	9207      	str	r2, [sp, #28]
   39df6:	9303      	str	r3, [sp, #12]
   39df8:	2766      	movs	r7, #102	; 0x66
   39dfa:	e581      	b.n	39900 <_svfprintf_r+0x1560>
   39dfc:	4b1a      	ldr	r3, [pc, #104]	; (39e68 <_svfprintf_r+0x1ac8>)
   39dfe:	930a      	str	r3, [sp, #40]	; 0x28
   39e00:	e497      	b.n	39732 <_svfprintf_r+0x1392>
   39e02:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   39e06:	e7aa      	b.n	39d5e <_svfprintf_r+0x19be>
   39e08:	9008      	str	r0, [sp, #32]
   39e0a:	e6c5      	b.n	39b98 <_svfprintf_r+0x17f8>
   39e0c:	4a16      	ldr	r2, [pc, #88]	; (39e68 <_svfprintf_r+0x1ac8>)
   39e0e:	920a      	str	r2, [sp, #40]	; 0x28
   39e10:	e4d2      	b.n	397b8 <_svfprintf_r+0x1418>
   39e12:	9b09      	ldr	r3, [sp, #36]	; 0x24
   39e14:	f89b 7001 	ldrb.w	r7, [fp, #1]
   39e18:	4693      	mov	fp, r2
   39e1a:	f853 2b04 	ldr.w	r2, [r3], #4
   39e1e:	9309      	str	r3, [sp, #36]	; 0x24
   39e20:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   39e24:	9204      	str	r2, [sp, #16]
   39e26:	f7fe bb0e 	b.w	38446 <_svfprintf_r+0xa6>
   39e2a:	2302      	movs	r3, #2
   39e2c:	9316      	str	r3, [sp, #88]	; 0x58
   39e2e:	f7ff ba0b 	b.w	39248 <_svfprintf_r+0xea8>
   39e32:	ee1a 2a90 	vmov	r2, s21
   39e36:	230c      	movs	r3, #12
   39e38:	6013      	str	r3, [r2, #0]
   39e3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   39e3e:	9305      	str	r3, [sp, #20]
   39e40:	f7fe bc3e 	b.w	386c0 <_svfprintf_r+0x320>
   39e44:	4a08      	ldr	r2, [pc, #32]	; (39e68 <_svfprintf_r+0x1ac8>)
   39e46:	920a      	str	r2, [sp, #40]	; 0x28
   39e48:	e70d      	b.n	39c66 <_svfprintf_r+0x18c6>
   39e4a:	ee1a 1a10 	vmov	r1, s20
   39e4e:	898b      	ldrh	r3, [r1, #12]
   39e50:	f043 0240 	orr.w	r2, r3, #64	; 0x40
   39e54:	4613      	mov	r3, r2
   39e56:	818a      	strh	r2, [r1, #12]
   39e58:	f7fe bc2b 	b.w	386b2 <_svfprintf_r+0x312>
   39e5c:	9c04      	ldr	r4, [sp, #16]
   39e5e:	e6e0      	b.n	39c22 <_svfprintf_r+0x1882>
   39e60:	2300      	movs	r3, #0
   39e62:	930c      	str	r3, [sp, #48]	; 0x30
   39e64:	930f      	str	r3, [sp, #60]	; 0x3c
   39e66:	e760      	b.n	39d2a <_svfprintf_r+0x198a>
   39e68:	000440e8 	.word	0x000440e8

00039e6c <quorem>:
   39e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39e70:	6903      	ldr	r3, [r0, #16]
   39e72:	690c      	ldr	r4, [r1, #16]
   39e74:	42a3      	cmp	r3, r4
   39e76:	b083      	sub	sp, #12
   39e78:	f2c0 8087 	blt.w	39f8a <quorem+0x11e>
   39e7c:	3c01      	subs	r4, #1
   39e7e:	f101 0514 	add.w	r5, r1, #20
   39e82:	00a3      	lsls	r3, r4, #2
   39e84:	f100 0814 	add.w	r8, r0, #20
   39e88:	9300      	str	r3, [sp, #0]
   39e8a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   39e8e:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   39e92:	3301      	adds	r3, #1
   39e94:	4681      	mov	r9, r0
   39e96:	429a      	cmp	r2, r3
   39e98:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   39e9c:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   39ea0:	9001      	str	r0, [sp, #4]
   39ea2:	fbb2 f6f3 	udiv	r6, r2, r3
   39ea6:	d33b      	bcc.n	39f20 <quorem+0xb4>
   39ea8:	2300      	movs	r3, #0
   39eaa:	46ae      	mov	lr, r5
   39eac:	4640      	mov	r0, r8
   39eae:	469b      	mov	fp, r3
   39eb0:	f85e ab04 	ldr.w	sl, [lr], #4
   39eb4:	6802      	ldr	r2, [r0, #0]
   39eb6:	fa1f fc8a 	uxth.w	ip, sl
   39eba:	fb06 330c 	mla	r3, r6, ip, r3
   39ebe:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   39ec2:	ea4f 4a1a 	mov.w	sl, sl, lsr #16
   39ec6:	fb06 ca0a 	mla	sl, r6, sl, ip
   39eca:	fa1f fc83 	uxth.w	ip, r3
   39ece:	ebab 0c0c 	sub.w	ip, fp, ip
   39ed2:	fa1f f38a 	uxth.w	r3, sl
   39ed6:	fa1c fc82 	uxtah	ip, ip, r2
   39eda:	ebc3 4212 	rsb	r2, r3, r2, lsr #16
   39ede:	eb02 422c 	add.w	r2, r2, ip, asr #16
   39ee2:	fa1f fc8c 	uxth.w	ip, ip
   39ee6:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
   39eea:	4577      	cmp	r7, lr
   39eec:	f840 3b04 	str.w	r3, [r0], #4
   39ef0:	ea4f 4b22 	mov.w	fp, r2, asr #16
   39ef4:	ea4f 431a 	mov.w	r3, sl, lsr #16
   39ef8:	d2da      	bcs.n	39eb0 <quorem+0x44>
   39efa:	9b00      	ldr	r3, [sp, #0]
   39efc:	f858 3003 	ldr.w	r3, [r8, r3]
   39f00:	b973      	cbnz	r3, 39f20 <quorem+0xb4>
   39f02:	9b01      	ldr	r3, [sp, #4]
   39f04:	3b04      	subs	r3, #4
   39f06:	4598      	cmp	r8, r3
   39f08:	d304      	bcc.n	39f14 <quorem+0xa8>
   39f0a:	e007      	b.n	39f1c <quorem+0xb0>
   39f0c:	4598      	cmp	r8, r3
   39f0e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   39f12:	d203      	bcs.n	39f1c <quorem+0xb0>
   39f14:	f853 2904 	ldr.w	r2, [r3], #-4
   39f18:	2a00      	cmp	r2, #0
   39f1a:	d0f7      	beq.n	39f0c <quorem+0xa0>
   39f1c:	f8c9 4010 	str.w	r4, [r9, #16]
   39f20:	4648      	mov	r0, r9
   39f22:	f001 fa5f 	bl	3b3e4 <__mcmp>
   39f26:	2800      	cmp	r0, #0
   39f28:	db2b      	blt.n	39f82 <quorem+0x116>
   39f2a:	3601      	adds	r6, #1
   39f2c:	4640      	mov	r0, r8
   39f2e:	2300      	movs	r3, #0
   39f30:	f855 1b04 	ldr.w	r1, [r5], #4
   39f34:	f8d0 c000 	ldr.w	ip, [r0]
   39f38:	b28a      	uxth	r2, r1
   39f3a:	1a9a      	subs	r2, r3, r2
   39f3c:	0c0b      	lsrs	r3, r1, #16
   39f3e:	fa12 f28c 	uxtah	r2, r2, ip
   39f42:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   39f46:	eb03 4322 	add.w	r3, r3, r2, asr #16
   39f4a:	b292      	uxth	r2, r2
   39f4c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   39f50:	42af      	cmp	r7, r5
   39f52:	f840 2b04 	str.w	r2, [r0], #4
   39f56:	ea4f 4323 	mov.w	r3, r3, asr #16
   39f5a:	d2e9      	bcs.n	39f30 <quorem+0xc4>
   39f5c:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   39f60:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   39f64:	b96a      	cbnz	r2, 39f82 <quorem+0x116>
   39f66:	3b04      	subs	r3, #4
   39f68:	4598      	cmp	r8, r3
   39f6a:	d304      	bcc.n	39f76 <quorem+0x10a>
   39f6c:	e007      	b.n	39f7e <quorem+0x112>
   39f6e:	4598      	cmp	r8, r3
   39f70:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   39f74:	d203      	bcs.n	39f7e <quorem+0x112>
   39f76:	f853 2904 	ldr.w	r2, [r3], #-4
   39f7a:	2a00      	cmp	r2, #0
   39f7c:	d0f7      	beq.n	39f6e <quorem+0x102>
   39f7e:	f8c9 4010 	str.w	r4, [r9, #16]
   39f82:	4630      	mov	r0, r6
   39f84:	b003      	add	sp, #12
   39f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39f8a:	2000      	movs	r0, #0
   39f8c:	b003      	add	sp, #12
   39f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39f92:	bf00      	nop
   39f94:	0000      	movs	r0, r0
	...

00039f98 <_dtoa_r>:
   39f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39f9c:	ed2d 8b06 	vpush	{d8-d10}
   39fa0:	b095      	sub	sp, #84	; 0x54
   39fa2:	ed8d 0b02 	vstr	d0, [sp, #8]
   39fa6:	9101      	str	r1, [sp, #4]
   39fa8:	6c01      	ldr	r1, [r0, #64]	; 0x40
   39faa:	9d24      	ldr	r5, [sp, #144]	; 0x90
   39fac:	9209      	str	r2, [sp, #36]	; 0x24
   39fae:	ec59 8b10 	vmov	r8, r9, d0
   39fb2:	4604      	mov	r4, r0
   39fb4:	9306      	str	r3, [sp, #24]
   39fb6:	b141      	cbz	r1, 39fca <_dtoa_r+0x32>
   39fb8:	6c42      	ldr	r2, [r0, #68]	; 0x44
   39fba:	604a      	str	r2, [r1, #4]
   39fbc:	2301      	movs	r3, #1
   39fbe:	4093      	lsls	r3, r2
   39fc0:	608b      	str	r3, [r1, #8]
   39fc2:	f000 ffad 	bl	3af20 <_Bfree>
   39fc6:	2300      	movs	r3, #0
   39fc8:	6423      	str	r3, [r4, #64]	; 0x40
   39fca:	f1b9 0a00 	subs.w	sl, r9, #0
   39fce:	bfb4      	ite	lt
   39fd0:	2301      	movlt	r3, #1
   39fd2:	2300      	movge	r3, #0
   39fd4:	602b      	str	r3, [r5, #0]
   39fd6:	4b7c      	ldr	r3, [pc, #496]	; (3a1c8 <_dtoa_r+0x230>)
   39fd8:	bfbc      	itt	lt
   39fda:	f02a 4a00 	biclt.w	sl, sl, #2147483648	; 0x80000000
   39fde:	f8cd a00c 	strlt.w	sl, [sp, #12]
   39fe2:	ea33 030a 	bics.w	r3, r3, sl
   39fe6:	f000 80b2 	beq.w	3a14e <_dtoa_r+0x1b6>
   39fea:	ed9d 7b02 	vldr	d7, [sp, #8]
   39fee:	2200      	movs	r2, #0
   39ff0:	ec51 0b17 	vmov	r0, r1, d7
   39ff4:	eeb0 9a47 	vmov.f32	s18, s14
   39ff8:	eef0 9a67 	vmov.f32	s19, s15
   39ffc:	2300      	movs	r3, #0
   39ffe:	f7de fff1 	bl	18fe4 <__aeabi_dcmpeq>
   3a002:	4607      	mov	r7, r0
   3a004:	b180      	cbz	r0, 3a028 <_dtoa_r+0x90>
   3a006:	9a06      	ldr	r2, [sp, #24]
   3a008:	2301      	movs	r3, #1
   3a00a:	6013      	str	r3, [r2, #0]
   3a00c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   3a00e:	2b00      	cmp	r3, #0
   3a010:	f000 82db 	beq.w	3a5ca <_dtoa_r+0x632>
   3a014:	486d      	ldr	r0, [pc, #436]	; (3a1cc <_dtoa_r+0x234>)
   3a016:	6018      	str	r0, [r3, #0]
   3a018:	1e43      	subs	r3, r0, #1
   3a01a:	9300      	str	r3, [sp, #0]
   3a01c:	9800      	ldr	r0, [sp, #0]
   3a01e:	b015      	add	sp, #84	; 0x54
   3a020:	ecbd 8b06 	vpop	{d8-d10}
   3a024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a028:	aa12      	add	r2, sp, #72	; 0x48
   3a02a:	a913      	add	r1, sp, #76	; 0x4c
   3a02c:	4620      	mov	r0, r4
   3a02e:	eeb0 0a49 	vmov.f32	s0, s18
   3a032:	eef0 0a69 	vmov.f32	s1, s19
   3a036:	f001 fa9d 	bl	3b574 <__d2b>
   3a03a:	eeb0 8a49 	vmov.f32	s16, s18
   3a03e:	eef0 8a69 	vmov.f32	s17, s19
   3a042:	ea5f 561a 	movs.w	r6, sl, lsr #20
   3a046:	4605      	mov	r5, r0
   3a048:	f040 8099 	bne.w	3a17e <_dtoa_r+0x1e6>
   3a04c:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
   3a050:	443e      	add	r6, r7
   3a052:	f206 4032 	addw	r0, r6, #1074	; 0x432
   3a056:	2820      	cmp	r0, #32
   3a058:	f340 83ab 	ble.w	3a7b2 <_dtoa_r+0x81a>
   3a05c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
   3a060:	fa0a fa00 	lsl.w	sl, sl, r0
   3a064:	f206 4012 	addw	r0, r6, #1042	; 0x412
   3a068:	fa28 f000 	lsr.w	r0, r8, r0
   3a06c:	ea4a 0000 	orr.w	r0, sl, r0
   3a070:	f7de fcd6 	bl	18a20 <__aeabi_ui2d>
   3a074:	2301      	movs	r3, #1
   3a076:	3e01      	subs	r6, #1
   3a078:	930d      	str	r3, [sp, #52]	; 0x34
   3a07a:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   3a07e:	4b54      	ldr	r3, [pc, #336]	; (3a1d0 <_dtoa_r+0x238>)
   3a080:	2200      	movs	r2, #0
   3a082:	f7de fb8f 	bl	187a4 <__aeabi_dsub>
   3a086:	a34a      	add	r3, pc, #296	; (adr r3, 3a1b0 <_dtoa_r+0x218>)
   3a088:	e9d3 2300 	ldrd	r2, r3, [r3]
   3a08c:	f7de fd42 	bl	18b14 <__aeabi_dmul>
   3a090:	a349      	add	r3, pc, #292	; (adr r3, 3a1b8 <_dtoa_r+0x220>)
   3a092:	e9d3 2300 	ldrd	r2, r3, [r3]
   3a096:	f7de fb87 	bl	187a8 <__adddf3>
   3a09a:	4680      	mov	r8, r0
   3a09c:	4630      	mov	r0, r6
   3a09e:	4689      	mov	r9, r1
   3a0a0:	f7de fcce 	bl	18a40 <__aeabi_i2d>
   3a0a4:	a346      	add	r3, pc, #280	; (adr r3, 3a1c0 <_dtoa_r+0x228>)
   3a0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   3a0aa:	f7de fd33 	bl	18b14 <__aeabi_dmul>
   3a0ae:	4602      	mov	r2, r0
   3a0b0:	460b      	mov	r3, r1
   3a0b2:	4640      	mov	r0, r8
   3a0b4:	4649      	mov	r1, r9
   3a0b6:	f7de fb77 	bl	187a8 <__adddf3>
   3a0ba:	4680      	mov	r8, r0
   3a0bc:	4689      	mov	r9, r1
   3a0be:	f7de ffd9 	bl	19074 <__aeabi_d2iz>
   3a0c2:	2200      	movs	r2, #0
   3a0c4:	4683      	mov	fp, r0
   3a0c6:	2300      	movs	r3, #0
   3a0c8:	4640      	mov	r0, r8
   3a0ca:	4649      	mov	r1, r9
   3a0cc:	f7de ff94 	bl	18ff8 <__aeabi_dcmplt>
   3a0d0:	2800      	cmp	r0, #0
   3a0d2:	f040 826d 	bne.w	3a5b0 <_dtoa_r+0x618>
   3a0d6:	f1bb 0f16 	cmp.w	fp, #22
   3a0da:	f200 825c 	bhi.w	3a596 <_dtoa_r+0x5fe>
   3a0de:	4b3d      	ldr	r3, [pc, #244]	; (3a1d4 <_dtoa_r+0x23c>)
   3a0e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   3a0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   3a0e8:	ec51 0b19 	vmov	r0, r1, d9
   3a0ec:	f7de ff84 	bl	18ff8 <__aeabi_dcmplt>
   3a0f0:	2800      	cmp	r0, #0
   3a0f2:	d075      	beq.n	3a1e0 <_dtoa_r+0x248>
   3a0f4:	2300      	movs	r3, #0
   3a0f6:	1bbe      	subs	r6, r7, r6
   3a0f8:	930c      	str	r3, [sp, #48]	; 0x30
   3a0fa:	1e73      	subs	r3, r6, #1
   3a0fc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   3a100:	9304      	str	r3, [sp, #16]
   3a102:	f100 824f 	bmi.w	3a5a4 <_dtoa_r+0x60c>
   3a106:	2300      	movs	r3, #0
   3a108:	9308      	str	r3, [sp, #32]
   3a10a:	f1bb 0f00 	cmp.w	fp, #0
   3a10e:	da6e      	bge.n	3a1ee <_dtoa_r+0x256>
   3a110:	9b08      	ldr	r3, [sp, #32]
   3a112:	f8cd b014 	str.w	fp, [sp, #20]
   3a116:	eba3 030b 	sub.w	r3, r3, fp
   3a11a:	9308      	str	r3, [sp, #32]
   3a11c:	f1cb 0300 	rsb	r3, fp, #0
   3a120:	930b      	str	r3, [sp, #44]	; 0x2c
   3a122:	9b01      	ldr	r3, [sp, #4]
   3a124:	2b09      	cmp	r3, #9
   3a126:	f04f 0b00 	mov.w	fp, #0
   3a12a:	d869      	bhi.n	3a200 <_dtoa_r+0x268>
   3a12c:	2b05      	cmp	r3, #5
   3a12e:	f340 833e 	ble.w	3a7ae <_dtoa_r+0x816>
   3a132:	3b04      	subs	r3, #4
   3a134:	9301      	str	r3, [sp, #4]
   3a136:	2600      	movs	r6, #0
   3a138:	9b01      	ldr	r3, [sp, #4]
   3a13a:	3b02      	subs	r3, #2
   3a13c:	2b03      	cmp	r3, #3
   3a13e:	f200 8699 	bhi.w	3ae74 <_dtoa_r+0xedc>
   3a142:	e8df f013 	tbh	[pc, r3, lsl #1]
   3a146:	044e      	.short	0x044e
   3a148:	0443044b 	.word	0x0443044b
   3a14c:	0426      	.short	0x0426
   3a14e:	9a06      	ldr	r2, [sp, #24]
   3a150:	f242 730f 	movw	r3, #9999	; 0x270f
   3a154:	f3ca 0a13 	ubfx	sl, sl, #0, #20
   3a158:	6013      	str	r3, [r2, #0]
   3a15a:	ea5a 0308 	orrs.w	r3, sl, r8
   3a15e:	d11d      	bne.n	3a19c <_dtoa_r+0x204>
   3a160:	9b25      	ldr	r3, [sp, #148]	; 0x94
   3a162:	2b00      	cmp	r3, #0
   3a164:	f000 867d 	beq.w	3ae62 <_dtoa_r+0xeca>
   3a168:	4b1b      	ldr	r3, [pc, #108]	; (3a1d8 <_dtoa_r+0x240>)
   3a16a:	9300      	str	r3, [sp, #0]
   3a16c:	3308      	adds	r3, #8
   3a16e:	9a25      	ldr	r2, [sp, #148]	; 0x94
   3a170:	9800      	ldr	r0, [sp, #0]
   3a172:	6013      	str	r3, [r2, #0]
   3a174:	b015      	add	sp, #84	; 0x54
   3a176:	ecbd 8b06 	vpop	{d8-d10}
   3a17a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a17e:	ee18 3a90 	vmov	r3, s17
   3a182:	f3c3 0313 	ubfx	r3, r3, #0, #20
   3a186:	ec51 0b19 	vmov	r0, r1, d9
   3a18a:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   3a18e:	970d      	str	r7, [sp, #52]	; 0x34
   3a190:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
   3a194:	9f12      	ldr	r7, [sp, #72]	; 0x48
   3a196:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   3a19a:	e770      	b.n	3a07e <_dtoa_r+0xe6>
   3a19c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   3a19e:	2b00      	cmp	r3, #0
   3a1a0:	f040 83db 	bne.w	3a95a <_dtoa_r+0x9c2>
   3a1a4:	4b0d      	ldr	r3, [pc, #52]	; (3a1dc <_dtoa_r+0x244>)
   3a1a6:	9300      	str	r3, [sp, #0]
   3a1a8:	e738      	b.n	3a01c <_dtoa_r+0x84>
   3a1aa:	bf00      	nop
   3a1ac:	f3af 8000 	nop.w
   3a1b0:	636f4361 	.word	0x636f4361
   3a1b4:	3fd287a7 	.word	0x3fd287a7
   3a1b8:	8b60c8b3 	.word	0x8b60c8b3
   3a1bc:	3fc68a28 	.word	0x3fc68a28
   3a1c0:	509f79fb 	.word	0x509f79fb
   3a1c4:	3fd34413 	.word	0x3fd34413
   3a1c8:	7ff00000 	.word	0x7ff00000
   3a1cc:	000440d5 	.word	0x000440d5
   3a1d0:	3ff80000 	.word	0x3ff80000
   3a1d4:	00044200 	.word	0x00044200
   3a1d8:	000440fc 	.word	0x000440fc
   3a1dc:	000440f8 	.word	0x000440f8
   3a1e0:	1bbe      	subs	r6, r7, r6
   3a1e2:	1e73      	subs	r3, r6, #1
   3a1e4:	9304      	str	r3, [sp, #16]
   3a1e6:	f100 849a 	bmi.w	3ab1e <_dtoa_r+0xb86>
   3a1ea:	900c      	str	r0, [sp, #48]	; 0x30
   3a1ec:	9008      	str	r0, [sp, #32]
   3a1ee:	9b04      	ldr	r3, [sp, #16]
   3a1f0:	445b      	add	r3, fp
   3a1f2:	e9cd 3b04 	strd	r3, fp, [sp, #16]
   3a1f6:	2300      	movs	r3, #0
   3a1f8:	930b      	str	r3, [sp, #44]	; 0x2c
   3a1fa:	9b01      	ldr	r3, [sp, #4]
   3a1fc:	2b09      	cmp	r3, #9
   3a1fe:	d995      	bls.n	3a12c <_dtoa_r+0x194>
   3a200:	2300      	movs	r3, #0
   3a202:	2601      	movs	r6, #1
   3a204:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3a208:	9301      	str	r3, [sp, #4]
   3a20a:	960a      	str	r6, [sp, #40]	; 0x28
   3a20c:	9207      	str	r2, [sp, #28]
   3a20e:	9309      	str	r3, [sp, #36]	; 0x24
   3a210:	9b07      	ldr	r3, [sp, #28]
   3a212:	930f      	str	r3, [sp, #60]	; 0x3c
   3a214:	2100      	movs	r1, #0
   3a216:	6461      	str	r1, [r4, #68]	; 0x44
   3a218:	4620      	mov	r0, r4
   3a21a:	f000 fe5b 	bl	3aed4 <_Balloc>
   3a21e:	9000      	str	r0, [sp, #0]
   3a220:	2800      	cmp	r0, #0
   3a222:	f000 862f 	beq.w	3ae84 <_dtoa_r+0xeec>
   3a226:	9b00      	ldr	r3, [sp, #0]
   3a228:	6423      	str	r3, [r4, #64]	; 0x40
   3a22a:	9b07      	ldr	r3, [sp, #28]
   3a22c:	2b0e      	cmp	r3, #14
   3a22e:	f200 80f9 	bhi.w	3a424 <_dtoa_r+0x48c>
   3a232:	2e00      	cmp	r6, #0
   3a234:	f000 80f6 	beq.w	3a424 <_dtoa_r+0x48c>
   3a238:	9905      	ldr	r1, [sp, #20]
   3a23a:	2900      	cmp	r1, #0
   3a23c:	f340 8471 	ble.w	3ab22 <_dtoa_r+0xb8a>
   3a240:	4bbd      	ldr	r3, [pc, #756]	; (3a538 <_dtoa_r+0x5a0>)
   3a242:	f001 020f 	and.w	r2, r1, #15
   3a246:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   3a24a:	ea4f 1821 	mov.w	r8, r1, asr #4
   3a24e:	05c9      	lsls	r1, r1, #23
   3a250:	e9d3 6700 	ldrd	r6, r7, [r3]
   3a254:	f140 8403 	bpl.w	3aa5e <_dtoa_r+0xac6>
   3a258:	4bb8      	ldr	r3, [pc, #736]	; (3a53c <_dtoa_r+0x5a4>)
   3a25a:	ec51 0b19 	vmov	r0, r1, d9
   3a25e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   3a262:	f7de fd81 	bl	18d68 <__aeabi_ddiv>
   3a266:	ec41 0b18 	vmov	d8, r0, r1
   3a26a:	f008 080f 	and.w	r8, r8, #15
   3a26e:	f04f 0a03 	mov.w	sl, #3
   3a272:	f1b8 0f00 	cmp.w	r8, #0
   3a276:	d013      	beq.n	3a2a0 <_dtoa_r+0x308>
   3a278:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 3a53c <_dtoa_r+0x5a4>
   3a27c:	f018 0f01 	tst.w	r8, #1
   3a280:	d009      	beq.n	3a296 <_dtoa_r+0x2fe>
   3a282:	4630      	mov	r0, r6
   3a284:	4639      	mov	r1, r7
   3a286:	e9d9 2300 	ldrd	r2, r3, [r9]
   3a28a:	f7de fc43 	bl	18b14 <__aeabi_dmul>
   3a28e:	f10a 0a01 	add.w	sl, sl, #1
   3a292:	4606      	mov	r6, r0
   3a294:	460f      	mov	r7, r1
   3a296:	ea5f 0868 	movs.w	r8, r8, asr #1
   3a29a:	f109 0908 	add.w	r9, r9, #8
   3a29e:	d1ed      	bne.n	3a27c <_dtoa_r+0x2e4>
   3a2a0:	ec51 0b18 	vmov	r0, r1, d8
   3a2a4:	4632      	mov	r2, r6
   3a2a6:	463b      	mov	r3, r7
   3a2a8:	f7de fd5e 	bl	18d68 <__aeabi_ddiv>
   3a2ac:	ec41 0b1a 	vmov	d10, r0, r1
   3a2b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   3a2b2:	b15b      	cbz	r3, 3a2cc <_dtoa_r+0x334>
   3a2b4:	ec57 6b1a 	vmov	r6, r7, d10
   3a2b8:	4ba1      	ldr	r3, [pc, #644]	; (3a540 <_dtoa_r+0x5a8>)
   3a2ba:	ee1a 0a10 	vmov	r0, s20
   3a2be:	2200      	movs	r2, #0
   3a2c0:	4639      	mov	r1, r7
   3a2c2:	f7de fe99 	bl	18ff8 <__aeabi_dcmplt>
   3a2c6:	2800      	cmp	r0, #0
   3a2c8:	f040 8552 	bne.w	3ad70 <_dtoa_r+0xdd8>
   3a2cc:	4650      	mov	r0, sl
   3a2ce:	f7de fbb7 	bl	18a40 <__aeabi_i2d>
   3a2d2:	ec53 2b1a 	vmov	r2, r3, d10
   3a2d6:	f7de fc1d 	bl	18b14 <__aeabi_dmul>
   3a2da:	4b9a      	ldr	r3, [pc, #616]	; (3a544 <_dtoa_r+0x5ac>)
   3a2dc:	2200      	movs	r2, #0
   3a2de:	f7de fa63 	bl	187a8 <__adddf3>
   3a2e2:	9b07      	ldr	r3, [sp, #28]
   3a2e4:	4680      	mov	r8, r0
   3a2e6:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   3a2ea:	2b00      	cmp	r3, #0
   3a2ec:	f000 83f3 	beq.w	3aad6 <_dtoa_r+0xb3e>
   3a2f0:	9b05      	ldr	r3, [sp, #20]
   3a2f2:	9310      	str	r3, [sp, #64]	; 0x40
   3a2f4:	9b07      	ldr	r3, [sp, #28]
   3a2f6:	930e      	str	r3, [sp, #56]	; 0x38
   3a2f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3a2fa:	2b00      	cmp	r3, #0
   3a2fc:	f000 84c0 	beq.w	3ac80 <_dtoa_r+0xce8>
   3a300:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   3a302:	4b8d      	ldr	r3, [pc, #564]	; (3a538 <_dtoa_r+0x5a0>)
   3a304:	4990      	ldr	r1, [pc, #576]	; (3a548 <_dtoa_r+0x5b0>)
   3a306:	f8dd a000 	ldr.w	sl, [sp]
   3a30a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   3a30e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   3a312:	2000      	movs	r0, #0
   3a314:	f7de fd28 	bl	18d68 <__aeabi_ddiv>
   3a318:	4642      	mov	r2, r8
   3a31a:	464b      	mov	r3, r9
   3a31c:	f7de fa42 	bl	187a4 <__aeabi_dsub>
   3a320:	ec59 8b1a 	vmov	r8, r9, d10
   3a324:	ec41 0b18 	vmov	d8, r0, r1
   3a328:	4649      	mov	r1, r9
   3a32a:	ee1a 0a10 	vmov	r0, s20
   3a32e:	f7de fea1 	bl	19074 <__aeabi_d2iz>
   3a332:	4607      	mov	r7, r0
   3a334:	f7de fb84 	bl	18a40 <__aeabi_i2d>
   3a338:	4602      	mov	r2, r0
   3a33a:	460b      	mov	r3, r1
   3a33c:	ee1a 0a10 	vmov	r0, s20
   3a340:	4649      	mov	r1, r9
   3a342:	f7de fa2f 	bl	187a4 <__aeabi_dsub>
   3a346:	3730      	adds	r7, #48	; 0x30
   3a348:	f80a 7b01 	strb.w	r7, [sl], #1
   3a34c:	ec53 2b18 	vmov	r2, r3, d8
   3a350:	4606      	mov	r6, r0
   3a352:	460f      	mov	r7, r1
   3a354:	f7de fe50 	bl	18ff8 <__aeabi_dcmplt>
   3a358:	2800      	cmp	r0, #0
   3a35a:	f040 8555 	bne.w	3ae08 <_dtoa_r+0xe70>
   3a35e:	f04f 0800 	mov.w	r8, #0
   3a362:	ee0a 5a10 	vmov	s20, r5
   3a366:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   3a36a:	4655      	mov	r5, sl
   3a36c:	ec5b ab18 	vmov	sl, fp, d8
   3a370:	ee08 4a10 	vmov	s16, r4
   3a374:	4644      	mov	r4, r8
   3a376:	e02a      	b.n	3a3ce <_dtoa_r+0x436>
   3a378:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3a37a:	3401      	adds	r4, #1
   3a37c:	429c      	cmp	r4, r3
   3a37e:	da4b      	bge.n	3a418 <_dtoa_r+0x480>
   3a380:	4b72      	ldr	r3, [pc, #456]	; (3a54c <_dtoa_r+0x5b4>)
   3a382:	4650      	mov	r0, sl
   3a384:	4659      	mov	r1, fp
   3a386:	2200      	movs	r2, #0
   3a388:	f7de fbc4 	bl	18b14 <__aeabi_dmul>
   3a38c:	4b6f      	ldr	r3, [pc, #444]	; (3a54c <_dtoa_r+0x5b4>)
   3a38e:	2200      	movs	r2, #0
   3a390:	4682      	mov	sl, r0
   3a392:	468b      	mov	fp, r1
   3a394:	4630      	mov	r0, r6
   3a396:	4639      	mov	r1, r7
   3a398:	f7de fbbc 	bl	18b14 <__aeabi_dmul>
   3a39c:	4689      	mov	r9, r1
   3a39e:	4680      	mov	r8, r0
   3a3a0:	f7de fe68 	bl	19074 <__aeabi_d2iz>
   3a3a4:	4607      	mov	r7, r0
   3a3a6:	f7de fb4b 	bl	18a40 <__aeabi_i2d>
   3a3aa:	4602      	mov	r2, r0
   3a3ac:	460b      	mov	r3, r1
   3a3ae:	4640      	mov	r0, r8
   3a3b0:	4649      	mov	r1, r9
   3a3b2:	f7de f9f7 	bl	187a4 <__aeabi_dsub>
   3a3b6:	3730      	adds	r7, #48	; 0x30
   3a3b8:	f805 7b01 	strb.w	r7, [r5], #1
   3a3bc:	4652      	mov	r2, sl
   3a3be:	465b      	mov	r3, fp
   3a3c0:	4606      	mov	r6, r0
   3a3c2:	460f      	mov	r7, r1
   3a3c4:	f7de fe18 	bl	18ff8 <__aeabi_dcmplt>
   3a3c8:	2800      	cmp	r0, #0
   3a3ca:	f040 8518 	bne.w	3adfe <_dtoa_r+0xe66>
   3a3ce:	4632      	mov	r2, r6
   3a3d0:	463b      	mov	r3, r7
   3a3d2:	495b      	ldr	r1, [pc, #364]	; (3a540 <_dtoa_r+0x5a8>)
   3a3d4:	2000      	movs	r0, #0
   3a3d6:	f7de f9e5 	bl	187a4 <__aeabi_dsub>
   3a3da:	4652      	mov	r2, sl
   3a3dc:	465b      	mov	r3, fp
   3a3de:	f7de fe0b 	bl	18ff8 <__aeabi_dcmplt>
   3a3e2:	2800      	cmp	r0, #0
   3a3e4:	d0c8      	beq.n	3a378 <_dtoa_r+0x3e0>
   3a3e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   3a3e8:	9a00      	ldr	r2, [sp, #0]
   3a3ea:	9305      	str	r3, [sp, #20]
   3a3ec:	46aa      	mov	sl, r5
   3a3ee:	ee18 4a10 	vmov	r4, s16
   3a3f2:	ee1a 5a10 	vmov	r5, s20
   3a3f6:	e002      	b.n	3a3fe <_dtoa_r+0x466>
   3a3f8:	4592      	cmp	sl, r2
   3a3fa:	f000 84ea 	beq.w	3add2 <_dtoa_r+0xe3a>
   3a3fe:	46d1      	mov	r9, sl
   3a400:	f81a 3d01 	ldrb.w	r3, [sl, #-1]!
   3a404:	2b39      	cmp	r3, #57	; 0x39
   3a406:	d0f7      	beq.n	3a3f8 <_dtoa_r+0x460>
   3a408:	3301      	adds	r3, #1
   3a40a:	b2db      	uxtb	r3, r3
   3a40c:	f88a 3000 	strb.w	r3, [sl]
   3a410:	9b05      	ldr	r3, [sp, #20]
   3a412:	3301      	adds	r3, #1
   3a414:	9305      	str	r3, [sp, #20]
   3a416:	e1ab      	b.n	3a770 <_dtoa_r+0x7d8>
   3a418:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
   3a41c:	ee1a 5a10 	vmov	r5, s20
   3a420:	ee18 4a10 	vmov	r4, s16
   3a424:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   3a426:	2b00      	cmp	r3, #0
   3a428:	f2c0 8094 	blt.w	3a554 <_dtoa_r+0x5bc>
   3a42c:	9a05      	ldr	r2, [sp, #20]
   3a42e:	2a0e      	cmp	r2, #14
   3a430:	f300 8090 	bgt.w	3a554 <_dtoa_r+0x5bc>
   3a434:	4b40      	ldr	r3, [pc, #256]	; (3a538 <_dtoa_r+0x5a0>)
   3a436:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   3a43a:	e9d3 8900 	ldrd	r8, r9, [r3]
   3a43e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3a440:	2b00      	cmp	r3, #0
   3a442:	da1b      	bge.n	3a47c <_dtoa_r+0x4e4>
   3a444:	9b07      	ldr	r3, [sp, #28]
   3a446:	2b00      	cmp	r3, #0
   3a448:	dc18      	bgt.n	3a47c <_dtoa_r+0x4e4>
   3a44a:	f040 835d 	bne.w	3ab08 <_dtoa_r+0xb70>
   3a44e:	4b40      	ldr	r3, [pc, #256]	; (3a550 <_dtoa_r+0x5b8>)
   3a450:	2200      	movs	r2, #0
   3a452:	4640      	mov	r0, r8
   3a454:	4649      	mov	r1, r9
   3a456:	f7de fb5d 	bl	18b14 <__aeabi_dmul>
   3a45a:	4602      	mov	r2, r0
   3a45c:	460b      	mov	r3, r1
   3a45e:	ec51 0b19 	vmov	r0, r1, d9
   3a462:	f7de fdd3 	bl	1900c <__aeabi_dcmple>
   3a466:	f8dd a01c 	ldr.w	sl, [sp, #28]
   3a46a:	4656      	mov	r6, sl
   3a46c:	2800      	cmp	r0, #0
   3a46e:	f000 82d0 	beq.w	3aa12 <_dtoa_r+0xa7a>
   3a472:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3a474:	f8dd 8000 	ldr.w	r8, [sp]
   3a478:	43df      	mvns	r7, r3
   3a47a:	e2d2      	b.n	3aa22 <_dtoa_r+0xa8a>
   3a47c:	4642      	mov	r2, r8
   3a47e:	464b      	mov	r3, r9
   3a480:	ec51 0b19 	vmov	r0, r1, d9
   3a484:	f7de fc70 	bl	18d68 <__aeabi_ddiv>
   3a488:	f7de fdf4 	bl	19074 <__aeabi_d2iz>
   3a48c:	4606      	mov	r6, r0
   3a48e:	4683      	mov	fp, r0
   3a490:	f7de fad6 	bl	18a40 <__aeabi_i2d>
   3a494:	4642      	mov	r2, r8
   3a496:	464b      	mov	r3, r9
   3a498:	f7de fb3c 	bl	18b14 <__aeabi_dmul>
   3a49c:	460b      	mov	r3, r1
   3a49e:	4602      	mov	r2, r0
   3a4a0:	ec51 0b19 	vmov	r0, r1, d9
   3a4a4:	f7de f97e 	bl	187a4 <__aeabi_dsub>
   3a4a8:	f8dd a000 	ldr.w	sl, [sp]
   3a4ac:	4633      	mov	r3, r6
   3a4ae:	3330      	adds	r3, #48	; 0x30
   3a4b0:	f80a 3b01 	strb.w	r3, [sl], #1
   3a4b4:	9b07      	ldr	r3, [sp, #28]
   3a4b6:	2b01      	cmp	r3, #1
   3a4b8:	f000 838e 	beq.w	3abd8 <_dtoa_r+0xc40>
   3a4bc:	f04f 0b01 	mov.w	fp, #1
   3a4c0:	ee08 5a10 	vmov	s16, r5
   3a4c4:	ee08 4a90 	vmov	s17, r4
   3a4c8:	461d      	mov	r5, r3
   3a4ca:	4654      	mov	r4, sl
   3a4cc:	46da      	mov	sl, fp
   3a4ce:	e01d      	b.n	3a50c <_dtoa_r+0x574>
   3a4d0:	4642      	mov	r2, r8
   3a4d2:	464b      	mov	r3, r9
   3a4d4:	4630      	mov	r0, r6
   3a4d6:	4639      	mov	r1, r7
   3a4d8:	f7de fc46 	bl	18d68 <__aeabi_ddiv>
   3a4dc:	f7de fdca 	bl	19074 <__aeabi_d2iz>
   3a4e0:	4683      	mov	fp, r0
   3a4e2:	f7de faad 	bl	18a40 <__aeabi_i2d>
   3a4e6:	4642      	mov	r2, r8
   3a4e8:	464b      	mov	r3, r9
   3a4ea:	f7de fb13 	bl	18b14 <__aeabi_dmul>
   3a4ee:	f10a 0a01 	add.w	sl, sl, #1
   3a4f2:	460b      	mov	r3, r1
   3a4f4:	4602      	mov	r2, r0
   3a4f6:	4639      	mov	r1, r7
   3a4f8:	4630      	mov	r0, r6
   3a4fa:	f7de f953 	bl	187a4 <__aeabi_dsub>
   3a4fe:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   3a502:	45aa      	cmp	sl, r5
   3a504:	f804 3b01 	strb.w	r3, [r4], #1
   3a508:	f000 8361 	beq.w	3abce <_dtoa_r+0xc36>
   3a50c:	4b0f      	ldr	r3, [pc, #60]	; (3a54c <_dtoa_r+0x5b4>)
   3a50e:	2200      	movs	r2, #0
   3a510:	f7de fb00 	bl	18b14 <__aeabi_dmul>
   3a514:	2200      	movs	r2, #0
   3a516:	2300      	movs	r3, #0
   3a518:	4606      	mov	r6, r0
   3a51a:	460f      	mov	r7, r1
   3a51c:	f7de fd62 	bl	18fe4 <__aeabi_dcmpeq>
   3a520:	2800      	cmp	r0, #0
   3a522:	d0d5      	beq.n	3a4d0 <_dtoa_r+0x538>
   3a524:	46a2      	mov	sl, r4
   3a526:	ee18 5a10 	vmov	r5, s16
   3a52a:	ee18 4a90 	vmov	r4, s17
   3a52e:	9b05      	ldr	r3, [sp, #20]
   3a530:	3301      	adds	r3, #1
   3a532:	9305      	str	r3, [sp, #20]
   3a534:	46d1      	mov	r9, sl
   3a536:	e11b      	b.n	3a770 <_dtoa_r+0x7d8>
   3a538:	00044200 	.word	0x00044200
   3a53c:	000441d8 	.word	0x000441d8
   3a540:	3ff00000 	.word	0x3ff00000
   3a544:	401c0000 	.word	0x401c0000
   3a548:	3fe00000 	.word	0x3fe00000
   3a54c:	40240000 	.word	0x40240000
   3a550:	40140000 	.word	0x40140000
   3a554:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   3a556:	2a00      	cmp	r2, #0
   3a558:	d03f      	beq.n	3a5da <_dtoa_r+0x642>
   3a55a:	9a01      	ldr	r2, [sp, #4]
   3a55c:	2a01      	cmp	r2, #1
   3a55e:	f340 829c 	ble.w	3aa9a <_dtoa_r+0xb02>
   3a562:	9b07      	ldr	r3, [sp, #28]
   3a564:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   3a568:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   3a56a:	4543      	cmp	r3, r8
   3a56c:	f2c0 826e 	blt.w	3aa4c <_dtoa_r+0xab4>
   3a570:	eba3 0808 	sub.w	r8, r3, r8
   3a574:	9b07      	ldr	r3, [sp, #28]
   3a576:	2b00      	cmp	r3, #0
   3a578:	f2c0 8366 	blt.w	3ac48 <_dtoa_r+0xcb0>
   3a57c:	9a04      	ldr	r2, [sp, #16]
   3a57e:	441a      	add	r2, r3
   3a580:	9204      	str	r2, [sp, #16]
   3a582:	9a08      	ldr	r2, [sp, #32]
   3a584:	4617      	mov	r7, r2
   3a586:	441a      	add	r2, r3
   3a588:	9208      	str	r2, [sp, #32]
   3a58a:	2101      	movs	r1, #1
   3a58c:	4620      	mov	r0, r4
   3a58e:	f000 fd75 	bl	3b07c <__i2b>
   3a592:	4606      	mov	r6, r0
   3a594:	e025      	b.n	3a5e2 <_dtoa_r+0x64a>
   3a596:	2301      	movs	r3, #1
   3a598:	1bbe      	subs	r6, r7, r6
   3a59a:	930c      	str	r3, [sp, #48]	; 0x30
   3a59c:	1e73      	subs	r3, r6, #1
   3a59e:	9304      	str	r3, [sp, #16]
   3a5a0:	f57f adb1 	bpl.w	3a106 <_dtoa_r+0x16e>
   3a5a4:	f1c6 0301 	rsb	r3, r6, #1
   3a5a8:	9308      	str	r3, [sp, #32]
   3a5aa:	2300      	movs	r3, #0
   3a5ac:	9304      	str	r3, [sp, #16]
   3a5ae:	e5ac      	b.n	3a10a <_dtoa_r+0x172>
   3a5b0:	4658      	mov	r0, fp
   3a5b2:	f7de fa45 	bl	18a40 <__aeabi_i2d>
   3a5b6:	4642      	mov	r2, r8
   3a5b8:	464b      	mov	r3, r9
   3a5ba:	f7de fd13 	bl	18fe4 <__aeabi_dcmpeq>
   3a5be:	2800      	cmp	r0, #0
   3a5c0:	f47f ad89 	bne.w	3a0d6 <_dtoa_r+0x13e>
   3a5c4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   3a5c8:	e585      	b.n	3a0d6 <_dtoa_r+0x13e>
   3a5ca:	4b87      	ldr	r3, [pc, #540]	; (3a7e8 <_dtoa_r+0x850>)
   3a5cc:	9300      	str	r3, [sp, #0]
   3a5ce:	9800      	ldr	r0, [sp, #0]
   3a5d0:	b015      	add	sp, #84	; 0x54
   3a5d2:	ecbd 8b06 	vpop	{d8-d10}
   3a5d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a5da:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   3a5de:	9f08      	ldr	r7, [sp, #32]
   3a5e0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   3a5e2:	2f00      	cmp	r7, #0
   3a5e4:	dd0c      	ble.n	3a600 <_dtoa_r+0x668>
   3a5e6:	9a04      	ldr	r2, [sp, #16]
   3a5e8:	2a00      	cmp	r2, #0
   3a5ea:	dd09      	ble.n	3a600 <_dtoa_r+0x668>
   3a5ec:	9908      	ldr	r1, [sp, #32]
   3a5ee:	42ba      	cmp	r2, r7
   3a5f0:	4613      	mov	r3, r2
   3a5f2:	bfa8      	it	ge
   3a5f4:	463b      	movge	r3, r7
   3a5f6:	1ac9      	subs	r1, r1, r3
   3a5f8:	1aff      	subs	r7, r7, r3
   3a5fa:	1ad3      	subs	r3, r2, r3
   3a5fc:	9108      	str	r1, [sp, #32]
   3a5fe:	9304      	str	r3, [sp, #16]
   3a600:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   3a602:	b1db      	cbz	r3, 3a63c <_dtoa_r+0x6a4>
   3a604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3a606:	2b00      	cmp	r3, #0
   3a608:	f000 8282 	beq.w	3ab10 <_dtoa_r+0xb78>
   3a60c:	f1b8 0f00 	cmp.w	r8, #0
   3a610:	dd0f      	ble.n	3a632 <_dtoa_r+0x69a>
   3a612:	4631      	mov	r1, r6
   3a614:	4642      	mov	r2, r8
   3a616:	4620      	mov	r0, r4
   3a618:	f000 fe0c 	bl	3b234 <__pow5mult>
   3a61c:	462a      	mov	r2, r5
   3a61e:	4601      	mov	r1, r0
   3a620:	4606      	mov	r6, r0
   3a622:	4620      	mov	r0, r4
   3a624:	f000 fd58 	bl	3b0d8 <__multiply>
   3a628:	4629      	mov	r1, r5
   3a62a:	4605      	mov	r5, r0
   3a62c:	4620      	mov	r0, r4
   3a62e:	f000 fc77 	bl	3af20 <_Bfree>
   3a632:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   3a634:	ebb3 0208 	subs.w	r2, r3, r8
   3a638:	f040 8300 	bne.w	3ac3c <_dtoa_r+0xca4>
   3a63c:	2101      	movs	r1, #1
   3a63e:	4620      	mov	r0, r4
   3a640:	f000 fd1c 	bl	3b07c <__i2b>
   3a644:	f1bb 0f00 	cmp.w	fp, #0
   3a648:	4682      	mov	sl, r0
   3a64a:	f300 80b7 	bgt.w	3a7bc <_dtoa_r+0x824>
   3a64e:	9b01      	ldr	r3, [sp, #4]
   3a650:	2b01      	cmp	r3, #1
   3a652:	f340 8186 	ble.w	3a962 <_dtoa_r+0x9ca>
   3a656:	f04f 0800 	mov.w	r8, #0
   3a65a:	2001      	movs	r0, #1
   3a65c:	f1bb 0f00 	cmp.w	fp, #0
   3a660:	f040 80b8 	bne.w	3a7d4 <_dtoa_r+0x83c>
   3a664:	9a04      	ldr	r2, [sp, #16]
   3a666:	4410      	add	r0, r2
   3a668:	f010 001f 	ands.w	r0, r0, #31
   3a66c:	f000 8096 	beq.w	3a79c <_dtoa_r+0x804>
   3a670:	f1c0 0320 	rsb	r3, r0, #32
   3a674:	2b04      	cmp	r3, #4
   3a676:	f340 83f8 	ble.w	3ae6a <_dtoa_r+0xed2>
   3a67a:	9b08      	ldr	r3, [sp, #32]
   3a67c:	f1c0 001c 	rsb	r0, r0, #28
   3a680:	4403      	add	r3, r0
   3a682:	4402      	add	r2, r0
   3a684:	9308      	str	r3, [sp, #32]
   3a686:	4407      	add	r7, r0
   3a688:	9204      	str	r2, [sp, #16]
   3a68a:	9b08      	ldr	r3, [sp, #32]
   3a68c:	2b00      	cmp	r3, #0
   3a68e:	dd05      	ble.n	3a69c <_dtoa_r+0x704>
   3a690:	4629      	mov	r1, r5
   3a692:	461a      	mov	r2, r3
   3a694:	4620      	mov	r0, r4
   3a696:	f000 fe2d 	bl	3b2f4 <__lshift>
   3a69a:	4605      	mov	r5, r0
   3a69c:	9b04      	ldr	r3, [sp, #16]
   3a69e:	2b00      	cmp	r3, #0
   3a6a0:	dd05      	ble.n	3a6ae <_dtoa_r+0x716>
   3a6a2:	4651      	mov	r1, sl
   3a6a4:	461a      	mov	r2, r3
   3a6a6:	4620      	mov	r0, r4
   3a6a8:	f000 fe24 	bl	3b2f4 <__lshift>
   3a6ac:	4682      	mov	sl, r0
   3a6ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   3a6b0:	2b00      	cmp	r3, #0
   3a6b2:	f040 8137 	bne.w	3a924 <_dtoa_r+0x98c>
   3a6b6:	9b07      	ldr	r3, [sp, #28]
   3a6b8:	2b00      	cmp	r3, #0
   3a6ba:	f340 811e 	ble.w	3a8fa <_dtoa_r+0x962>
   3a6be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3a6c0:	2b00      	cmp	r3, #0
   3a6c2:	f040 80a1 	bne.w	3a808 <_dtoa_r+0x870>
   3a6c6:	9b05      	ldr	r3, [sp, #20]
   3a6c8:	3301      	adds	r3, #1
   3a6ca:	9305      	str	r3, [sp, #20]
   3a6cc:	f8dd 8000 	ldr.w	r8, [sp]
   3a6d0:	f8dd 901c 	ldr.w	r9, [sp, #28]
   3a6d4:	2701      	movs	r7, #1
   3a6d6:	e007      	b.n	3a6e8 <_dtoa_r+0x750>
   3a6d8:	4629      	mov	r1, r5
   3a6da:	2300      	movs	r3, #0
   3a6dc:	220a      	movs	r2, #10
   3a6de:	4620      	mov	r0, r4
   3a6e0:	f000 fc28 	bl	3af34 <__multadd>
   3a6e4:	3701      	adds	r7, #1
   3a6e6:	4605      	mov	r5, r0
   3a6e8:	4651      	mov	r1, sl
   3a6ea:	4628      	mov	r0, r5
   3a6ec:	f7ff fbbe 	bl	39e6c <quorem>
   3a6f0:	454f      	cmp	r7, r9
   3a6f2:	f100 0030 	add.w	r0, r0, #48	; 0x30
   3a6f6:	f808 0b01 	strb.w	r0, [r8], #1
   3a6fa:	dbed      	blt.n	3a6d8 <_dtoa_r+0x740>
   3a6fc:	9a07      	ldr	r2, [sp, #28]
   3a6fe:	2a00      	cmp	r2, #0
   3a700:	bfc8      	it	gt
   3a702:	4693      	movgt	fp, r2
   3a704:	9a00      	ldr	r2, [sp, #0]
   3a706:	bfd8      	it	le
   3a708:	f04f 0b01 	movle.w	fp, #1
   3a70c:	4603      	mov	r3, r0
   3a70e:	4493      	add	fp, r2
   3a710:	2700      	movs	r7, #0
   3a712:	4629      	mov	r1, r5
   3a714:	2201      	movs	r2, #1
   3a716:	4620      	mov	r0, r4
   3a718:	9301      	str	r3, [sp, #4]
   3a71a:	f000 fdeb 	bl	3b2f4 <__lshift>
   3a71e:	4651      	mov	r1, sl
   3a720:	4605      	mov	r5, r0
   3a722:	f000 fe5f 	bl	3b3e4 <__mcmp>
   3a726:	2800      	cmp	r0, #0
   3a728:	f340 81a5 	ble.w	3aa76 <_dtoa_r+0xade>
   3a72c:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   3a730:	9a00      	ldr	r2, [sp, #0]
   3a732:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   3a736:	e004      	b.n	3a742 <_dtoa_r+0x7aa>
   3a738:	455a      	cmp	r2, fp
   3a73a:	f000 81a7 	beq.w	3aa8c <_dtoa_r+0xaf4>
   3a73e:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   3a742:	2b39      	cmp	r3, #57	; 0x39
   3a744:	f10b 0901 	add.w	r9, fp, #1
   3a748:	d0f6      	beq.n	3a738 <_dtoa_r+0x7a0>
   3a74a:	3301      	adds	r3, #1
   3a74c:	f88b 3000 	strb.w	r3, [fp]
   3a750:	4651      	mov	r1, sl
   3a752:	4620      	mov	r0, r4
   3a754:	f000 fbe4 	bl	3af20 <_Bfree>
   3a758:	b156      	cbz	r6, 3a770 <_dtoa_r+0x7d8>
   3a75a:	b12f      	cbz	r7, 3a768 <_dtoa_r+0x7d0>
   3a75c:	42b7      	cmp	r7, r6
   3a75e:	d003      	beq.n	3a768 <_dtoa_r+0x7d0>
   3a760:	4639      	mov	r1, r7
   3a762:	4620      	mov	r0, r4
   3a764:	f000 fbdc 	bl	3af20 <_Bfree>
   3a768:	4631      	mov	r1, r6
   3a76a:	4620      	mov	r0, r4
   3a76c:	f000 fbd8 	bl	3af20 <_Bfree>
   3a770:	4629      	mov	r1, r5
   3a772:	4620      	mov	r0, r4
   3a774:	f000 fbd4 	bl	3af20 <_Bfree>
   3a778:	2300      	movs	r3, #0
   3a77a:	f889 3000 	strb.w	r3, [r9]
   3a77e:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   3a782:	601a      	str	r2, [r3, #0]
   3a784:	9b25      	ldr	r3, [sp, #148]	; 0x94
   3a786:	2b00      	cmp	r3, #0
   3a788:	f43f ac48 	beq.w	3a01c <_dtoa_r+0x84>
   3a78c:	9800      	ldr	r0, [sp, #0]
   3a78e:	f8c3 9000 	str.w	r9, [r3]
   3a792:	b015      	add	sp, #84	; 0x54
   3a794:	ecbd 8b06 	vpop	{d8-d10}
   3a798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a79c:	201c      	movs	r0, #28
   3a79e:	9b08      	ldr	r3, [sp, #32]
   3a7a0:	4403      	add	r3, r0
   3a7a2:	9308      	str	r3, [sp, #32]
   3a7a4:	9b04      	ldr	r3, [sp, #16]
   3a7a6:	4403      	add	r3, r0
   3a7a8:	4407      	add	r7, r0
   3a7aa:	9304      	str	r3, [sp, #16]
   3a7ac:	e76d      	b.n	3a68a <_dtoa_r+0x6f2>
   3a7ae:	2601      	movs	r6, #1
   3a7b0:	e4c2      	b.n	3a138 <_dtoa_r+0x1a0>
   3a7b2:	f1c0 0020 	rsb	r0, r0, #32
   3a7b6:	fa08 f000 	lsl.w	r0, r8, r0
   3a7ba:	e459      	b.n	3a070 <_dtoa_r+0xd8>
   3a7bc:	4601      	mov	r1, r0
   3a7be:	465a      	mov	r2, fp
   3a7c0:	4620      	mov	r0, r4
   3a7c2:	f000 fd37 	bl	3b234 <__pow5mult>
   3a7c6:	9b01      	ldr	r3, [sp, #4]
   3a7c8:	2b01      	cmp	r3, #1
   3a7ca:	4682      	mov	sl, r0
   3a7cc:	f340 81d5 	ble.w	3ab7a <_dtoa_r+0xbe2>
   3a7d0:	f04f 0800 	mov.w	r8, #0
   3a7d4:	f8da 3010 	ldr.w	r3, [sl, #16]
   3a7d8:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
   3a7dc:	6918      	ldr	r0, [r3, #16]
   3a7de:	f000 fbfd 	bl	3afdc <__hi0bits>
   3a7e2:	f1c0 0020 	rsb	r0, r0, #32
   3a7e6:	e73d      	b.n	3a664 <_dtoa_r+0x6cc>
   3a7e8:	000440d4 	.word	0x000440d4
   3a7ec:	4631      	mov	r1, r6
   3a7ee:	2300      	movs	r3, #0
   3a7f0:	220a      	movs	r2, #10
   3a7f2:	4620      	mov	r0, r4
   3a7f4:	f000 fb9e 	bl	3af34 <__multadd>
   3a7f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   3a7fa:	2b00      	cmp	r3, #0
   3a7fc:	4606      	mov	r6, r0
   3a7fe:	f340 8323 	ble.w	3ae48 <_dtoa_r+0xeb0>
   3a802:	f8cd 9014 	str.w	r9, [sp, #20]
   3a806:	9307      	str	r3, [sp, #28]
   3a808:	2f00      	cmp	r7, #0
   3a80a:	f300 8118 	bgt.w	3aa3e <_dtoa_r+0xaa6>
   3a80e:	f1b8 0f00 	cmp.w	r8, #0
   3a812:	f040 81fc 	bne.w	3ac0e <_dtoa_r+0xc76>
   3a816:	46b0      	mov	r8, r6
   3a818:	9b02      	ldr	r3, [sp, #8]
   3a81a:	9f00      	ldr	r7, [sp, #0]
   3a81c:	9907      	ldr	r1, [sp, #28]
   3a81e:	f003 0201 	and.w	r2, r3, #1
   3a822:	1e7b      	subs	r3, r7, #1
   3a824:	4419      	add	r1, r3
   3a826:	9b01      	ldr	r3, [sp, #4]
   3a828:	920a      	str	r2, [sp, #40]	; 0x28
   3a82a:	4313      	orrs	r3, r2
   3a82c:	9108      	str	r1, [sp, #32]
   3a82e:	9309      	str	r3, [sp, #36]	; 0x24
   3a830:	4651      	mov	r1, sl
   3a832:	4628      	mov	r0, r5
   3a834:	f7ff fb1a 	bl	39e6c <quorem>
   3a838:	4631      	mov	r1, r6
   3a83a:	4683      	mov	fp, r0
   3a83c:	4628      	mov	r0, r5
   3a83e:	f000 fdd1 	bl	3b3e4 <__mcmp>
   3a842:	4642      	mov	r2, r8
   3a844:	4651      	mov	r1, sl
   3a846:	4681      	mov	r9, r0
   3a848:	4620      	mov	r0, r4
   3a84a:	f000 fded 	bl	3b428 <__mdiff>
   3a84e:	68c2      	ldr	r2, [r0, #12]
   3a850:	4601      	mov	r1, r0
   3a852:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   3a856:	2a00      	cmp	r2, #0
   3a858:	d142      	bne.n	3a8e0 <_dtoa_r+0x948>
   3a85a:	9004      	str	r0, [sp, #16]
   3a85c:	4628      	mov	r0, r5
   3a85e:	9307      	str	r3, [sp, #28]
   3a860:	f000 fdc0 	bl	3b3e4 <__mcmp>
   3a864:	9904      	ldr	r1, [sp, #16]
   3a866:	9002      	str	r0, [sp, #8]
   3a868:	4620      	mov	r0, r4
   3a86a:	f000 fb59 	bl	3af20 <_Bfree>
   3a86e:	9a02      	ldr	r2, [sp, #8]
   3a870:	9b07      	ldr	r3, [sp, #28]
   3a872:	b91a      	cbnz	r2, 3a87c <_dtoa_r+0x8e4>
   3a874:	9909      	ldr	r1, [sp, #36]	; 0x24
   3a876:	2900      	cmp	r1, #0
   3a878:	f000 82d6 	beq.w	3ae28 <_dtoa_r+0xe90>
   3a87c:	f1b9 0f00 	cmp.w	r9, #0
   3a880:	f2c0 8187 	blt.w	3ab92 <_dtoa_r+0xbfa>
   3a884:	9901      	ldr	r1, [sp, #4]
   3a886:	ea49 0901 	orr.w	r9, r9, r1
   3a88a:	990a      	ldr	r1, [sp, #40]	; 0x28
   3a88c:	ea51 0109 	orrs.w	r1, r1, r9
   3a890:	f000 817f 	beq.w	3ab92 <_dtoa_r+0xbfa>
   3a894:	2a00      	cmp	r2, #0
   3a896:	f300 81e7 	bgt.w	3ac68 <_dtoa_r+0xcd0>
   3a89a:	9a08      	ldr	r2, [sp, #32]
   3a89c:	703b      	strb	r3, [r7, #0]
   3a89e:	f107 0901 	add.w	r9, r7, #1
   3a8a2:	4297      	cmp	r7, r2
   3a8a4:	46cb      	mov	fp, r9
   3a8a6:	f000 81e5 	beq.w	3ac74 <_dtoa_r+0xcdc>
   3a8aa:	4629      	mov	r1, r5
   3a8ac:	2300      	movs	r3, #0
   3a8ae:	220a      	movs	r2, #10
   3a8b0:	4620      	mov	r0, r4
   3a8b2:	f000 fb3f 	bl	3af34 <__multadd>
   3a8b6:	4546      	cmp	r6, r8
   3a8b8:	4605      	mov	r5, r0
   3a8ba:	4631      	mov	r1, r6
   3a8bc:	f04f 0300 	mov.w	r3, #0
   3a8c0:	f04f 020a 	mov.w	r2, #10
   3a8c4:	4620      	mov	r0, r4
   3a8c6:	d012      	beq.n	3a8ee <_dtoa_r+0x956>
   3a8c8:	f000 fb34 	bl	3af34 <__multadd>
   3a8cc:	4641      	mov	r1, r8
   3a8ce:	4606      	mov	r6, r0
   3a8d0:	2300      	movs	r3, #0
   3a8d2:	220a      	movs	r2, #10
   3a8d4:	4620      	mov	r0, r4
   3a8d6:	f000 fb2d 	bl	3af34 <__multadd>
   3a8da:	464f      	mov	r7, r9
   3a8dc:	4680      	mov	r8, r0
   3a8de:	e7a7      	b.n	3a830 <_dtoa_r+0x898>
   3a8e0:	4620      	mov	r0, r4
   3a8e2:	9302      	str	r3, [sp, #8]
   3a8e4:	f000 fb1c 	bl	3af20 <_Bfree>
   3a8e8:	9b02      	ldr	r3, [sp, #8]
   3a8ea:	2201      	movs	r2, #1
   3a8ec:	e7c6      	b.n	3a87c <_dtoa_r+0x8e4>
   3a8ee:	f000 fb21 	bl	3af34 <__multadd>
   3a8f2:	464f      	mov	r7, r9
   3a8f4:	4606      	mov	r6, r0
   3a8f6:	4680      	mov	r8, r0
   3a8f8:	e79a      	b.n	3a830 <_dtoa_r+0x898>
   3a8fa:	9b01      	ldr	r3, [sp, #4]
   3a8fc:	2b02      	cmp	r3, #2
   3a8fe:	dc77      	bgt.n	3a9f0 <_dtoa_r+0xa58>
   3a900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3a902:	2b00      	cmp	r3, #0
   3a904:	d180      	bne.n	3a808 <_dtoa_r+0x870>
   3a906:	9b05      	ldr	r3, [sp, #20]
   3a908:	4651      	mov	r1, sl
   3a90a:	3301      	adds	r3, #1
   3a90c:	4628      	mov	r0, r5
   3a90e:	9305      	str	r3, [sp, #20]
   3a910:	f7ff faac 	bl	39e6c <quorem>
   3a914:	f8dd b000 	ldr.w	fp, [sp]
   3a918:	f100 0330 	add.w	r3, r0, #48	; 0x30
   3a91c:	f80b 3b01 	strb.w	r3, [fp], #1
   3a920:	2700      	movs	r7, #0
   3a922:	e6f6      	b.n	3a712 <_dtoa_r+0x77a>
   3a924:	4651      	mov	r1, sl
   3a926:	4628      	mov	r0, r5
   3a928:	f000 fd5c 	bl	3b3e4 <__mcmp>
   3a92c:	2800      	cmp	r0, #0
   3a92e:	f6bf aec2 	bge.w	3a6b6 <_dtoa_r+0x71e>
   3a932:	4629      	mov	r1, r5
   3a934:	2300      	movs	r3, #0
   3a936:	220a      	movs	r2, #10
   3a938:	4620      	mov	r0, r4
   3a93a:	f000 fafb 	bl	3af34 <__multadd>
   3a93e:	9b05      	ldr	r3, [sp, #20]
   3a940:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
   3a944:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3a946:	4605      	mov	r5, r0
   3a948:	2b00      	cmp	r3, #0
   3a94a:	f47f af4f 	bne.w	3a7ec <_dtoa_r+0x854>
   3a94e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   3a950:	2b00      	cmp	r3, #0
   3a952:	f340 8270 	ble.w	3ae36 <_dtoa_r+0xe9e>
   3a956:	9307      	str	r3, [sp, #28]
   3a958:	e6b8      	b.n	3a6cc <_dtoa_r+0x734>
   3a95a:	4bbd      	ldr	r3, [pc, #756]	; (3ac50 <_dtoa_r+0xcb8>)
   3a95c:	9300      	str	r3, [sp, #0]
   3a95e:	3303      	adds	r3, #3
   3a960:	e405      	b.n	3a16e <_dtoa_r+0x1d6>
   3a962:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   3a966:	2900      	cmp	r1, #0
   3a968:	f47f ae75 	bne.w	3a656 <_dtoa_r+0x6be>
   3a96c:	f3c2 0313 	ubfx	r3, r2, #0, #20
   3a970:	2b00      	cmp	r3, #0
   3a972:	f47f ae70 	bne.w	3a656 <_dtoa_r+0x6be>
   3a976:	4bb7      	ldr	r3, [pc, #732]	; (3ac54 <_dtoa_r+0xcbc>)
   3a978:	4013      	ands	r3, r2
   3a97a:	2b00      	cmp	r3, #0
   3a97c:	f000 823d 	beq.w	3adfa <_dtoa_r+0xe62>
   3a980:	9b08      	ldr	r3, [sp, #32]
   3a982:	3301      	adds	r3, #1
   3a984:	9308      	str	r3, [sp, #32]
   3a986:	9b04      	ldr	r3, [sp, #16]
   3a988:	3301      	adds	r3, #1
   3a98a:	9304      	str	r3, [sp, #16]
   3a98c:	f04f 0801 	mov.w	r8, #1
   3a990:	e663      	b.n	3a65a <_dtoa_r+0x6c2>
   3a992:	2301      	movs	r3, #1
   3a994:	930a      	str	r3, [sp, #40]	; 0x28
   3a996:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3a998:	9a05      	ldr	r2, [sp, #20]
   3a99a:	4413      	add	r3, r2
   3a99c:	930f      	str	r3, [sp, #60]	; 0x3c
   3a99e:	3301      	adds	r3, #1
   3a9a0:	2b01      	cmp	r3, #1
   3a9a2:	461f      	mov	r7, r3
   3a9a4:	9307      	str	r3, [sp, #28]
   3a9a6:	bfb8      	it	lt
   3a9a8:	2701      	movlt	r7, #1
   3a9aa:	2100      	movs	r1, #0
   3a9ac:	2f17      	cmp	r7, #23
   3a9ae:	6461      	str	r1, [r4, #68]	; 0x44
   3a9b0:	f77f ac32 	ble.w	3a218 <_dtoa_r+0x280>
   3a9b4:	2201      	movs	r2, #1
   3a9b6:	2304      	movs	r3, #4
   3a9b8:	005b      	lsls	r3, r3, #1
   3a9ba:	f103 0014 	add.w	r0, r3, #20
   3a9be:	42b8      	cmp	r0, r7
   3a9c0:	4611      	mov	r1, r2
   3a9c2:	f102 0201 	add.w	r2, r2, #1
   3a9c6:	d9f7      	bls.n	3a9b8 <_dtoa_r+0xa20>
   3a9c8:	6461      	str	r1, [r4, #68]	; 0x44
   3a9ca:	e425      	b.n	3a218 <_dtoa_r+0x280>
   3a9cc:	2301      	movs	r3, #1
   3a9ce:	930a      	str	r3, [sp, #40]	; 0x28
   3a9d0:	9f09      	ldr	r7, [sp, #36]	; 0x24
   3a9d2:	2f00      	cmp	r7, #0
   3a9d4:	dd4a      	ble.n	3aa6c <_dtoa_r+0xad4>
   3a9d6:	970f      	str	r7, [sp, #60]	; 0x3c
   3a9d8:	9707      	str	r7, [sp, #28]
   3a9da:	e7e6      	b.n	3a9aa <_dtoa_r+0xa12>
   3a9dc:	2300      	movs	r3, #0
   3a9de:	930a      	str	r3, [sp, #40]	; 0x28
   3a9e0:	e7d9      	b.n	3a996 <_dtoa_r+0x9fe>
   3a9e2:	2300      	movs	r3, #0
   3a9e4:	930a      	str	r3, [sp, #40]	; 0x28
   3a9e6:	e7f3      	b.n	3a9d0 <_dtoa_r+0xa38>
   3a9e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   3a9ea:	f8cd 9014 	str.w	r9, [sp, #20]
   3a9ee:	9307      	str	r3, [sp, #28]
   3a9f0:	9b07      	ldr	r3, [sp, #28]
   3a9f2:	2b00      	cmp	r3, #0
   3a9f4:	f47f ad3d 	bne.w	3a472 <_dtoa_r+0x4da>
   3a9f8:	4651      	mov	r1, sl
   3a9fa:	2205      	movs	r2, #5
   3a9fc:	4620      	mov	r0, r4
   3a9fe:	f000 fa99 	bl	3af34 <__multadd>
   3aa02:	4601      	mov	r1, r0
   3aa04:	4682      	mov	sl, r0
   3aa06:	4628      	mov	r0, r5
   3aa08:	f000 fcec 	bl	3b3e4 <__mcmp>
   3aa0c:	2800      	cmp	r0, #0
   3aa0e:	f77f ad30 	ble.w	3a472 <_dtoa_r+0x4da>
   3aa12:	9800      	ldr	r0, [sp, #0]
   3aa14:	9f05      	ldr	r7, [sp, #20]
   3aa16:	2331      	movs	r3, #49	; 0x31
   3aa18:	4680      	mov	r8, r0
   3aa1a:	f800 3b01 	strb.w	r3, [r0], #1
   3aa1e:	3701      	adds	r7, #1
   3aa20:	9000      	str	r0, [sp, #0]
   3aa22:	4651      	mov	r1, sl
   3aa24:	4620      	mov	r0, r4
   3aa26:	f000 fa7b 	bl	3af20 <_Bfree>
   3aa2a:	1c7b      	adds	r3, r7, #1
   3aa2c:	f8dd 9000 	ldr.w	r9, [sp]
   3aa30:	9305      	str	r3, [sp, #20]
   3aa32:	f8cd 8000 	str.w	r8, [sp]
   3aa36:	2e00      	cmp	r6, #0
   3aa38:	f47f ae96 	bne.w	3a768 <_dtoa_r+0x7d0>
   3aa3c:	e698      	b.n	3a770 <_dtoa_r+0x7d8>
   3aa3e:	4631      	mov	r1, r6
   3aa40:	463a      	mov	r2, r7
   3aa42:	4620      	mov	r0, r4
   3aa44:	f000 fc56 	bl	3b2f4 <__lshift>
   3aa48:	4606      	mov	r6, r0
   3aa4a:	e6e0      	b.n	3a80e <_dtoa_r+0x876>
   3aa4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   3aa4e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   3aa52:	eba8 0303 	sub.w	r3, r8, r3
   3aa56:	449b      	add	fp, r3
   3aa58:	f04f 0800 	mov.w	r8, #0
   3aa5c:	e58a      	b.n	3a574 <_dtoa_r+0x5dc>
   3aa5e:	f04f 0a02 	mov.w	sl, #2
   3aa62:	eeb0 8a49 	vmov.f32	s16, s18
   3aa66:	eef0 8a69 	vmov.f32	s17, s19
   3aa6a:	e402      	b.n	3a272 <_dtoa_r+0x2da>
   3aa6c:	2301      	movs	r3, #1
   3aa6e:	9309      	str	r3, [sp, #36]	; 0x24
   3aa70:	9307      	str	r3, [sp, #28]
   3aa72:	f7ff bbcd 	b.w	3a210 <_dtoa_r+0x278>
   3aa76:	d103      	bne.n	3aa80 <_dtoa_r+0xae8>
   3aa78:	9b01      	ldr	r3, [sp, #4]
   3aa7a:	07db      	lsls	r3, r3, #31
   3aa7c:	f53f ae56 	bmi.w	3a72c <_dtoa_r+0x794>
   3aa80:	46d9      	mov	r9, fp
   3aa82:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   3aa86:	2b30      	cmp	r3, #48	; 0x30
   3aa88:	d0fa      	beq.n	3aa80 <_dtoa_r+0xae8>
   3aa8a:	e661      	b.n	3a750 <_dtoa_r+0x7b8>
   3aa8c:	9b05      	ldr	r3, [sp, #20]
   3aa8e:	9a00      	ldr	r2, [sp, #0]
   3aa90:	3301      	adds	r3, #1
   3aa92:	9305      	str	r3, [sp, #20]
   3aa94:	2331      	movs	r3, #49	; 0x31
   3aa96:	7013      	strb	r3, [r2, #0]
   3aa98:	e65a      	b.n	3a750 <_dtoa_r+0x7b8>
   3aa9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   3aa9c:	2a00      	cmp	r2, #0
   3aa9e:	f000 8163 	beq.w	3ad68 <_dtoa_r+0xdd0>
   3aaa2:	f203 4333 	addw	r3, r3, #1075	; 0x433
   3aaa6:	9a04      	ldr	r2, [sp, #16]
   3aaa8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   3aaac:	441a      	add	r2, r3
   3aaae:	9204      	str	r2, [sp, #16]
   3aab0:	9a08      	ldr	r2, [sp, #32]
   3aab2:	4617      	mov	r7, r2
   3aab4:	441a      	add	r2, r3
   3aab6:	9208      	str	r2, [sp, #32]
   3aab8:	e567      	b.n	3a58a <_dtoa_r+0x5f2>
   3aaba:	4650      	mov	r0, sl
   3aabc:	f7dd ffc0 	bl	18a40 <__aeabi_i2d>
   3aac0:	ec53 2b1a 	vmov	r2, r3, d10
   3aac4:	f7de f826 	bl	18b14 <__aeabi_dmul>
   3aac8:	4b63      	ldr	r3, [pc, #396]	; (3ac58 <_dtoa_r+0xcc0>)
   3aaca:	2200      	movs	r2, #0
   3aacc:	f7dd fe6c 	bl	187a8 <__adddf3>
   3aad0:	4680      	mov	r8, r0
   3aad2:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   3aad6:	4b61      	ldr	r3, [pc, #388]	; (3ac5c <_dtoa_r+0xcc4>)
   3aad8:	2200      	movs	r2, #0
   3aada:	ec51 0b1a 	vmov	r0, r1, d10
   3aade:	f7dd fe61 	bl	187a4 <__aeabi_dsub>
   3aae2:	4642      	mov	r2, r8
   3aae4:	464b      	mov	r3, r9
   3aae6:	4606      	mov	r6, r0
   3aae8:	460f      	mov	r7, r1
   3aaea:	f7de faa3 	bl	19034 <__aeabi_dcmpgt>
   3aaee:	2800      	cmp	r0, #0
   3aaf0:	f040 817f 	bne.w	3adf2 <_dtoa_r+0xe5a>
   3aaf4:	4630      	mov	r0, r6
   3aaf6:	4639      	mov	r1, r7
   3aaf8:	4642      	mov	r2, r8
   3aafa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   3aafe:	f7de fa7b 	bl	18ff8 <__aeabi_dcmplt>
   3ab02:	2800      	cmp	r0, #0
   3ab04:	f43f ac8e 	beq.w	3a424 <_dtoa_r+0x48c>
   3ab08:	f04f 0a00 	mov.w	sl, #0
   3ab0c:	4656      	mov	r6, sl
   3ab0e:	e4b0      	b.n	3a472 <_dtoa_r+0x4da>
   3ab10:	4629      	mov	r1, r5
   3ab12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   3ab14:	4620      	mov	r0, r4
   3ab16:	f000 fb8d 	bl	3b234 <__pow5mult>
   3ab1a:	4605      	mov	r5, r0
   3ab1c:	e58e      	b.n	3a63c <_dtoa_r+0x6a4>
   3ab1e:	900c      	str	r0, [sp, #48]	; 0x30
   3ab20:	e540      	b.n	3a5a4 <_dtoa_r+0x60c>
   3ab22:	f000 814e 	beq.w	3adc2 <_dtoa_r+0xe2a>
   3ab26:	9a05      	ldr	r2, [sp, #20]
   3ab28:	4b4d      	ldr	r3, [pc, #308]	; (3ac60 <_dtoa_r+0xcc8>)
   3ab2a:	4256      	negs	r6, r2
   3ab2c:	f006 020f 	and.w	r2, r6, #15
   3ab30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   3ab34:	e9d3 2300 	ldrd	r2, r3, [r3]
   3ab38:	ec51 0b19 	vmov	r0, r1, d9
   3ab3c:	f7dd ffea 	bl	18b14 <__aeabi_dmul>
   3ab40:	1136      	asrs	r6, r6, #4
   3ab42:	ec41 0b1a 	vmov	d10, r0, r1
   3ab46:	f000 8188 	beq.w	3ae5a <_dtoa_r+0xec2>
   3ab4a:	4f46      	ldr	r7, [pc, #280]	; (3ac64 <_dtoa_r+0xccc>)
   3ab4c:	2300      	movs	r3, #0
   3ab4e:	f04f 0a02 	mov.w	sl, #2
   3ab52:	07f2      	lsls	r2, r6, #31
   3ab54:	d506      	bpl.n	3ab64 <_dtoa_r+0xbcc>
   3ab56:	e9d7 2300 	ldrd	r2, r3, [r7]
   3ab5a:	f7dd ffdb 	bl	18b14 <__aeabi_dmul>
   3ab5e:	f10a 0a01 	add.w	sl, sl, #1
   3ab62:	2301      	movs	r3, #1
   3ab64:	1076      	asrs	r6, r6, #1
   3ab66:	f107 0708 	add.w	r7, r7, #8
   3ab6a:	d1f2      	bne.n	3ab52 <_dtoa_r+0xbba>
   3ab6c:	2b00      	cmp	r3, #0
   3ab6e:	f43f ab9f 	beq.w	3a2b0 <_dtoa_r+0x318>
   3ab72:	ec41 0b1a 	vmov	d10, r0, r1
   3ab76:	f7ff bb9b 	b.w	3a2b0 <_dtoa_r+0x318>
   3ab7a:	9b02      	ldr	r3, [sp, #8]
   3ab7c:	2b00      	cmp	r3, #0
   3ab7e:	f47f ae27 	bne.w	3a7d0 <_dtoa_r+0x838>
   3ab82:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   3ab86:	f3c2 0313 	ubfx	r3, r2, #0, #20
   3ab8a:	2b00      	cmp	r3, #0
   3ab8c:	f43f aef3 	beq.w	3a976 <_dtoa_r+0x9de>
   3ab90:	e61e      	b.n	3a7d0 <_dtoa_r+0x838>
   3ab92:	2a00      	cmp	r2, #0
   3ab94:	dd12      	ble.n	3abbc <_dtoa_r+0xc24>
   3ab96:	4629      	mov	r1, r5
   3ab98:	2201      	movs	r2, #1
   3ab9a:	4620      	mov	r0, r4
   3ab9c:	9301      	str	r3, [sp, #4]
   3ab9e:	f000 fba9 	bl	3b2f4 <__lshift>
   3aba2:	4651      	mov	r1, sl
   3aba4:	4605      	mov	r5, r0
   3aba6:	f000 fc1d 	bl	3b3e4 <__mcmp>
   3abaa:	2800      	cmp	r0, #0
   3abac:	9b01      	ldr	r3, [sp, #4]
   3abae:	f340 8135 	ble.w	3ae1c <_dtoa_r+0xe84>
   3abb2:	2b39      	cmp	r3, #57	; 0x39
   3abb4:	f000 8113 	beq.w	3adde <_dtoa_r+0xe46>
   3abb8:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   3abbc:	46b9      	mov	r9, r7
   3abbe:	f809 3b01 	strb.w	r3, [r9], #1
   3abc2:	9b05      	ldr	r3, [sp, #20]
   3abc4:	3301      	adds	r3, #1
   3abc6:	4637      	mov	r7, r6
   3abc8:	9305      	str	r3, [sp, #20]
   3abca:	4646      	mov	r6, r8
   3abcc:	e5c0      	b.n	3a750 <_dtoa_r+0x7b8>
   3abce:	46a2      	mov	sl, r4
   3abd0:	ee18 5a10 	vmov	r5, s16
   3abd4:	ee18 4a90 	vmov	r4, s17
   3abd8:	4602      	mov	r2, r0
   3abda:	460b      	mov	r3, r1
   3abdc:	f7dd fde4 	bl	187a8 <__adddf3>
   3abe0:	4642      	mov	r2, r8
   3abe2:	464b      	mov	r3, r9
   3abe4:	4606      	mov	r6, r0
   3abe6:	460f      	mov	r7, r1
   3abe8:	f7de fa24 	bl	19034 <__aeabi_dcmpgt>
   3abec:	b960      	cbnz	r0, 3ac08 <_dtoa_r+0xc70>
   3abee:	4642      	mov	r2, r8
   3abf0:	464b      	mov	r3, r9
   3abf2:	4630      	mov	r0, r6
   3abf4:	4639      	mov	r1, r7
   3abf6:	f7de f9f5 	bl	18fe4 <__aeabi_dcmpeq>
   3abfa:	2800      	cmp	r0, #0
   3abfc:	f43f ac97 	beq.w	3a52e <_dtoa_r+0x596>
   3ac00:	ea5f 71cb 	movs.w	r1, fp, lsl #31
   3ac04:	f57f ac93 	bpl.w	3a52e <_dtoa_r+0x596>
   3ac08:	9a00      	ldr	r2, [sp, #0]
   3ac0a:	f7ff bbf8 	b.w	3a3fe <_dtoa_r+0x466>
   3ac0e:	6871      	ldr	r1, [r6, #4]
   3ac10:	4620      	mov	r0, r4
   3ac12:	f000 f95f 	bl	3aed4 <_Balloc>
   3ac16:	4607      	mov	r7, r0
   3ac18:	2800      	cmp	r0, #0
   3ac1a:	f000 813a 	beq.w	3ae92 <_dtoa_r+0xefa>
   3ac1e:	6933      	ldr	r3, [r6, #16]
   3ac20:	3302      	adds	r3, #2
   3ac22:	009a      	lsls	r2, r3, #2
   3ac24:	f106 010c 	add.w	r1, r6, #12
   3ac28:	300c      	adds	r0, #12
   3ac2a:	f7dd fae9 	bl	18200 <memcpy>
   3ac2e:	4639      	mov	r1, r7
   3ac30:	2201      	movs	r2, #1
   3ac32:	4620      	mov	r0, r4
   3ac34:	f000 fb5e 	bl	3b2f4 <__lshift>
   3ac38:	4680      	mov	r8, r0
   3ac3a:	e5ed      	b.n	3a818 <_dtoa_r+0x880>
   3ac3c:	4629      	mov	r1, r5
   3ac3e:	4620      	mov	r0, r4
   3ac40:	f000 faf8 	bl	3b234 <__pow5mult>
   3ac44:	4605      	mov	r5, r0
   3ac46:	e4f9      	b.n	3a63c <_dtoa_r+0x6a4>
   3ac48:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
   3ac4c:	1a9f      	subs	r7, r3, r2
   3ac4e:	e49c      	b.n	3a58a <_dtoa_r+0x5f2>
   3ac50:	000440f8 	.word	0x000440f8
   3ac54:	7ff00000 	.word	0x7ff00000
   3ac58:	401c0000 	.word	0x401c0000
   3ac5c:	40140000 	.word	0x40140000
   3ac60:	00044200 	.word	0x00044200
   3ac64:	000441d8 	.word	0x000441d8
   3ac68:	2b39      	cmp	r3, #57	; 0x39
   3ac6a:	f000 80b8 	beq.w	3adde <_dtoa_r+0xe46>
   3ac6e:	46b9      	mov	r9, r7
   3ac70:	3301      	adds	r3, #1
   3ac72:	e7a4      	b.n	3abbe <_dtoa_r+0xc26>
   3ac74:	9a05      	ldr	r2, [sp, #20]
   3ac76:	3201      	adds	r2, #1
   3ac78:	4637      	mov	r7, r6
   3ac7a:	9205      	str	r2, [sp, #20]
   3ac7c:	4646      	mov	r6, r8
   3ac7e:	e548      	b.n	3a712 <_dtoa_r+0x77a>
   3ac80:	980e      	ldr	r0, [sp, #56]	; 0x38
   3ac82:	498d      	ldr	r1, [pc, #564]	; (3aeb8 <_dtoa_r+0xf20>)
   3ac84:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   3ac88:	4642      	mov	r2, r8
   3ac8a:	464b      	mov	r3, r9
   3ac8c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   3ac90:	f7dd ff40 	bl	18b14 <__aeabi_dmul>
   3ac94:	ec5a 9b1a 	vmov	r9, sl, d10
   3ac98:	ec41 0b18 	vmov	d8, r0, r1
   3ac9c:	4651      	mov	r1, sl
   3ac9e:	ee1a 0a10 	vmov	r0, s20
   3aca2:	f7de f9e7 	bl	19074 <__aeabi_d2iz>
   3aca6:	4607      	mov	r7, r0
   3aca8:	f7dd feca 	bl	18a40 <__aeabi_i2d>
   3acac:	4602      	mov	r2, r0
   3acae:	460b      	mov	r3, r1
   3acb0:	ee1a 0a10 	vmov	r0, s20
   3acb4:	4651      	mov	r1, sl
   3acb6:	f7dd fd75 	bl	187a4 <__aeabi_dsub>
   3acba:	4606      	mov	r6, r0
   3acbc:	980e      	ldr	r0, [sp, #56]	; 0x38
   3acbe:	f8dd 8000 	ldr.w	r8, [sp]
   3acc2:	3730      	adds	r7, #48	; 0x30
   3acc4:	2801      	cmp	r0, #1
   3acc6:	f808 7b01 	strb.w	r7, [r8], #1
   3acca:	460f      	mov	r7, r1
   3accc:	f000 80ba 	beq.w	3ae44 <_dtoa_r+0xeac>
   3acd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3acd2:	9a00      	ldr	r2, [sp, #0]
   3acd4:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
   3acd8:	4413      	add	r3, r2
   3acda:	469b      	mov	fp, r3
   3acdc:	46c2      	mov	sl, r8
   3acde:	4b77      	ldr	r3, [pc, #476]	; (3aebc <_dtoa_r+0xf24>)
   3ace0:	2200      	movs	r2, #0
   3ace2:	4630      	mov	r0, r6
   3ace4:	4639      	mov	r1, r7
   3ace6:	f7dd ff15 	bl	18b14 <__aeabi_dmul>
   3acea:	4689      	mov	r9, r1
   3acec:	4680      	mov	r8, r0
   3acee:	f7de f9c1 	bl	19074 <__aeabi_d2iz>
   3acf2:	4607      	mov	r7, r0
   3acf4:	f7dd fea4 	bl	18a40 <__aeabi_i2d>
   3acf8:	3730      	adds	r7, #48	; 0x30
   3acfa:	4602      	mov	r2, r0
   3acfc:	460b      	mov	r3, r1
   3acfe:	4640      	mov	r0, r8
   3ad00:	4649      	mov	r1, r9
   3ad02:	f7dd fd4f 	bl	187a4 <__aeabi_dsub>
   3ad06:	f80a 7b01 	strb.w	r7, [sl], #1
   3ad0a:	45da      	cmp	sl, fp
   3ad0c:	4606      	mov	r6, r0
   3ad0e:	460f      	mov	r7, r1
   3ad10:	d1e5      	bne.n	3acde <_dtoa_r+0xd46>
   3ad12:	46da      	mov	sl, fp
   3ad14:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
   3ad18:	4b69      	ldr	r3, [pc, #420]	; (3aec0 <_dtoa_r+0xf28>)
   3ad1a:	ec59 8b18 	vmov	r8, r9, d8
   3ad1e:	2200      	movs	r2, #0
   3ad20:	ee18 0a10 	vmov	r0, s16
   3ad24:	4649      	mov	r1, r9
   3ad26:	f7dd fd3f 	bl	187a8 <__adddf3>
   3ad2a:	4632      	mov	r2, r6
   3ad2c:	463b      	mov	r3, r7
   3ad2e:	f7de f963 	bl	18ff8 <__aeabi_dcmplt>
   3ad32:	2800      	cmp	r0, #0
   3ad34:	d16d      	bne.n	3ae12 <_dtoa_r+0xe7a>
   3ad36:	ee18 2a10 	vmov	r2, s16
   3ad3a:	464b      	mov	r3, r9
   3ad3c:	4960      	ldr	r1, [pc, #384]	; (3aec0 <_dtoa_r+0xf28>)
   3ad3e:	2000      	movs	r0, #0
   3ad40:	f7dd fd30 	bl	187a4 <__aeabi_dsub>
   3ad44:	4632      	mov	r2, r6
   3ad46:	463b      	mov	r3, r7
   3ad48:	f7de f974 	bl	19034 <__aeabi_dcmpgt>
   3ad4c:	2800      	cmp	r0, #0
   3ad4e:	f43f ab69 	beq.w	3a424 <_dtoa_r+0x48c>
   3ad52:	46d1      	mov	r9, sl
   3ad54:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   3ad58:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   3ad5c:	2b30      	cmp	r3, #48	; 0x30
   3ad5e:	d0f8      	beq.n	3ad52 <_dtoa_r+0xdba>
   3ad60:	9b10      	ldr	r3, [sp, #64]	; 0x40
   3ad62:	3301      	adds	r3, #1
   3ad64:	9305      	str	r3, [sp, #20]
   3ad66:	e503      	b.n	3a770 <_dtoa_r+0x7d8>
   3ad68:	9b12      	ldr	r3, [sp, #72]	; 0x48
   3ad6a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   3ad6e:	e69a      	b.n	3aaa6 <_dtoa_r+0xb0e>
   3ad70:	9b07      	ldr	r3, [sp, #28]
   3ad72:	2b00      	cmp	r3, #0
   3ad74:	f43f aea1 	beq.w	3aaba <_dtoa_r+0xb22>
   3ad78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   3ad7a:	2b00      	cmp	r3, #0
   3ad7c:	f77f ab52 	ble.w	3a424 <_dtoa_r+0x48c>
   3ad80:	9a05      	ldr	r2, [sp, #20]
   3ad82:	930e      	str	r3, [sp, #56]	; 0x38
   3ad84:	3a01      	subs	r2, #1
   3ad86:	4b4d      	ldr	r3, [pc, #308]	; (3aebc <_dtoa_r+0xf24>)
   3ad88:	9210      	str	r2, [sp, #64]	; 0x40
   3ad8a:	ee1a 0a10 	vmov	r0, s20
   3ad8e:	4639      	mov	r1, r7
   3ad90:	2200      	movs	r2, #0
   3ad92:	f7dd febf 	bl	18b14 <__aeabi_dmul>
   3ad96:	4602      	mov	r2, r0
   3ad98:	4616      	mov	r6, r2
   3ad9a:	460f      	mov	r7, r1
   3ad9c:	f10a 0001 	add.w	r0, sl, #1
   3ada0:	f7dd fe4e 	bl	18a40 <__aeabi_i2d>
   3ada4:	4632      	mov	r2, r6
   3ada6:	463b      	mov	r3, r7
   3ada8:	f7dd feb4 	bl	18b14 <__aeabi_dmul>
   3adac:	4b45      	ldr	r3, [pc, #276]	; (3aec4 <_dtoa_r+0xf2c>)
   3adae:	2200      	movs	r2, #0
   3adb0:	f7dd fcfa 	bl	187a8 <__adddf3>
   3adb4:	ec47 6b1a 	vmov	d10, r6, r7
   3adb8:	4680      	mov	r8, r0
   3adba:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   3adbe:	f7ff ba9b 	b.w	3a2f8 <_dtoa_r+0x360>
   3adc2:	f04f 0a02 	mov.w	sl, #2
   3adc6:	eeb0 aa49 	vmov.f32	s20, s18
   3adca:	eef0 aa69 	vmov.f32	s21, s19
   3adce:	f7ff ba6f 	b.w	3a2b0 <_dtoa_r+0x318>
   3add2:	9b05      	ldr	r3, [sp, #20]
   3add4:	3301      	adds	r3, #1
   3add6:	9305      	str	r3, [sp, #20]
   3add8:	2331      	movs	r3, #49	; 0x31
   3adda:	f7ff bb17 	b.w	3a40c <_dtoa_r+0x474>
   3adde:	9b05      	ldr	r3, [sp, #20]
   3ade0:	46bb      	mov	fp, r7
   3ade2:	3301      	adds	r3, #1
   3ade4:	9305      	str	r3, [sp, #20]
   3ade6:	2339      	movs	r3, #57	; 0x39
   3ade8:	4637      	mov	r7, r6
   3adea:	f80b 3b01 	strb.w	r3, [fp], #1
   3adee:	4646      	mov	r6, r8
   3adf0:	e49e      	b.n	3a730 <_dtoa_r+0x798>
   3adf2:	f04f 0a00 	mov.w	sl, #0
   3adf6:	4656      	mov	r6, sl
   3adf8:	e60b      	b.n	3aa12 <_dtoa_r+0xa7a>
   3adfa:	4698      	mov	r8, r3
   3adfc:	e42d      	b.n	3a65a <_dtoa_r+0x6c2>
   3adfe:	46aa      	mov	sl, r5
   3ae00:	ee18 4a10 	vmov	r4, s16
   3ae04:	ee1a 5a10 	vmov	r5, s20
   3ae08:	9b10      	ldr	r3, [sp, #64]	; 0x40
   3ae0a:	3301      	adds	r3, #1
   3ae0c:	9305      	str	r3, [sp, #20]
   3ae0e:	46d1      	mov	r9, sl
   3ae10:	e4ae      	b.n	3a770 <_dtoa_r+0x7d8>
   3ae12:	9b10      	ldr	r3, [sp, #64]	; 0x40
   3ae14:	9a00      	ldr	r2, [sp, #0]
   3ae16:	9305      	str	r3, [sp, #20]
   3ae18:	f7ff baf1 	b.w	3a3fe <_dtoa_r+0x466>
   3ae1c:	f47f aece 	bne.w	3abbc <_dtoa_r+0xc24>
   3ae20:	07da      	lsls	r2, r3, #31
   3ae22:	f57f aecb 	bpl.w	3abbc <_dtoa_r+0xc24>
   3ae26:	e6c4      	b.n	3abb2 <_dtoa_r+0xc1a>
   3ae28:	2b39      	cmp	r3, #57	; 0x39
   3ae2a:	d0d8      	beq.n	3adde <_dtoa_r+0xe46>
   3ae2c:	f1b9 0f00 	cmp.w	r9, #0
   3ae30:	f73f aec2 	bgt.w	3abb8 <_dtoa_r+0xc20>
   3ae34:	e6c2      	b.n	3abbc <_dtoa_r+0xc24>
   3ae36:	9b01      	ldr	r3, [sp, #4]
   3ae38:	2b02      	cmp	r3, #2
   3ae3a:	f73f add5 	bgt.w	3a9e8 <_dtoa_r+0xa50>
   3ae3e:	f8cd 9014 	str.w	r9, [sp, #20]
   3ae42:	e560      	b.n	3a906 <_dtoa_r+0x96e>
   3ae44:	46c2      	mov	sl, r8
   3ae46:	e767      	b.n	3ad18 <_dtoa_r+0xd80>
   3ae48:	9b01      	ldr	r3, [sp, #4]
   3ae4a:	2b02      	cmp	r3, #2
   3ae4c:	f73f adcc 	bgt.w	3a9e8 <_dtoa_r+0xa50>
   3ae50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   3ae52:	f8cd 9014 	str.w	r9, [sp, #20]
   3ae56:	9307      	str	r3, [sp, #28]
   3ae58:	e4d6      	b.n	3a808 <_dtoa_r+0x870>
   3ae5a:	f04f 0a02 	mov.w	sl, #2
   3ae5e:	f7ff ba27 	b.w	3a2b0 <_dtoa_r+0x318>
   3ae62:	4b19      	ldr	r3, [pc, #100]	; (3aec8 <_dtoa_r+0xf30>)
   3ae64:	9300      	str	r3, [sp, #0]
   3ae66:	f7ff b8d9 	b.w	3a01c <_dtoa_r+0x84>
   3ae6a:	f43f ac0e 	beq.w	3a68a <_dtoa_r+0x6f2>
   3ae6e:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   3ae72:	e494      	b.n	3a79e <_dtoa_r+0x806>
   3ae74:	2600      	movs	r6, #0
   3ae76:	6466      	str	r6, [r4, #68]	; 0x44
   3ae78:	4631      	mov	r1, r6
   3ae7a:	4620      	mov	r0, r4
   3ae7c:	f000 f82a 	bl	3aed4 <_Balloc>
   3ae80:	9000      	str	r0, [sp, #0]
   3ae82:	b968      	cbnz	r0, 3aea0 <_dtoa_r+0xf08>
   3ae84:	4b11      	ldr	r3, [pc, #68]	; (3aecc <_dtoa_r+0xf34>)
   3ae86:	4812      	ldr	r0, [pc, #72]	; (3aed0 <_dtoa_r+0xf38>)
   3ae88:	2200      	movs	r2, #0
   3ae8a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   3ae8e:	f7ef ff4d 	bl	2ad2c <__assert_func>
   3ae92:	4b0e      	ldr	r3, [pc, #56]	; (3aecc <_dtoa_r+0xf34>)
   3ae94:	480e      	ldr	r0, [pc, #56]	; (3aed0 <_dtoa_r+0xf38>)
   3ae96:	463a      	mov	r2, r7
   3ae98:	f240 21ea 	movw	r1, #746	; 0x2ea
   3ae9c:	f7ef ff46 	bl	2ad2c <__assert_func>
   3aea0:	9b00      	ldr	r3, [sp, #0]
   3aea2:	6423      	str	r3, [r4, #64]	; 0x40
   3aea4:	2201      	movs	r2, #1
   3aea6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3aeaa:	9609      	str	r6, [sp, #36]	; 0x24
   3aeac:	930f      	str	r3, [sp, #60]	; 0x3c
   3aeae:	920a      	str	r2, [sp, #40]	; 0x28
   3aeb0:	9307      	str	r3, [sp, #28]
   3aeb2:	f7ff bab7 	b.w	3a424 <_dtoa_r+0x48c>
   3aeb6:	bf00      	nop
   3aeb8:	00044200 	.word	0x00044200
   3aebc:	40240000 	.word	0x40240000
   3aec0:	3fe00000 	.word	0x3fe00000
   3aec4:	401c0000 	.word	0x401c0000
   3aec8:	000440fc 	.word	0x000440fc
   3aecc:	00044108 	.word	0x00044108
   3aed0:	0004411c 	.word	0x0004411c

0003aed4 <_Balloc>:
   3aed4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   3aed6:	b570      	push	{r4, r5, r6, lr}
   3aed8:	4605      	mov	r5, r0
   3aeda:	460c      	mov	r4, r1
   3aedc:	b14b      	cbz	r3, 3aef2 <_Balloc+0x1e>
   3aede:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   3aee2:	b180      	cbz	r0, 3af06 <_Balloc+0x32>
   3aee4:	6802      	ldr	r2, [r0, #0]
   3aee6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   3aeea:	2300      	movs	r3, #0
   3aeec:	e9c0 3303 	strd	r3, r3, [r0, #12]
   3aef0:	bd70      	pop	{r4, r5, r6, pc}
   3aef2:	2221      	movs	r2, #33	; 0x21
   3aef4:	2104      	movs	r1, #4
   3aef6:	f000 fc21 	bl	3b73c <_calloc_r>
   3aefa:	4603      	mov	r3, r0
   3aefc:	64e8      	str	r0, [r5, #76]	; 0x4c
   3aefe:	2800      	cmp	r0, #0
   3af00:	d1ed      	bne.n	3aede <_Balloc+0xa>
   3af02:	2000      	movs	r0, #0
   3af04:	bd70      	pop	{r4, r5, r6, pc}
   3af06:	2101      	movs	r1, #1
   3af08:	fa01 f604 	lsl.w	r6, r1, r4
   3af0c:	1d72      	adds	r2, r6, #5
   3af0e:	0092      	lsls	r2, r2, #2
   3af10:	4628      	mov	r0, r5
   3af12:	f000 fc13 	bl	3b73c <_calloc_r>
   3af16:	2800      	cmp	r0, #0
   3af18:	d0f3      	beq.n	3af02 <_Balloc+0x2e>
   3af1a:	e9c0 4601 	strd	r4, r6, [r0, #4]
   3af1e:	e7e4      	b.n	3aeea <_Balloc+0x16>

0003af20 <_Bfree>:
   3af20:	b131      	cbz	r1, 3af30 <_Bfree+0x10>
   3af22:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   3af24:	684a      	ldr	r2, [r1, #4]
   3af26:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   3af2a:	6008      	str	r0, [r1, #0]
   3af2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   3af30:	4770      	bx	lr
   3af32:	bf00      	nop

0003af34 <__multadd>:
   3af34:	b5f0      	push	{r4, r5, r6, r7, lr}
   3af36:	690c      	ldr	r4, [r1, #16]
   3af38:	4606      	mov	r6, r0
   3af3a:	b083      	sub	sp, #12
   3af3c:	460d      	mov	r5, r1
   3af3e:	f101 0e14 	add.w	lr, r1, #20
   3af42:	2000      	movs	r0, #0
   3af44:	f8de 1000 	ldr.w	r1, [lr]
   3af48:	fa1f fc81 	uxth.w	ip, r1
   3af4c:	fb02 330c 	mla	r3, r2, ip, r3
   3af50:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   3af54:	0c09      	lsrs	r1, r1, #16
   3af56:	fb02 cc01 	mla	ip, r2, r1, ip
   3af5a:	3001      	adds	r0, #1
   3af5c:	b29b      	uxth	r3, r3
   3af5e:	eb03 430c 	add.w	r3, r3, ip, lsl #16
   3af62:	4284      	cmp	r4, r0
   3af64:	f84e 3b04 	str.w	r3, [lr], #4
   3af68:	ea4f 431c 	mov.w	r3, ip, lsr #16
   3af6c:	dcea      	bgt.n	3af44 <__multadd+0x10>
   3af6e:	b13b      	cbz	r3, 3af80 <__multadd+0x4c>
   3af70:	68aa      	ldr	r2, [r5, #8]
   3af72:	42a2      	cmp	r2, r4
   3af74:	dd07      	ble.n	3af86 <__multadd+0x52>
   3af76:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   3af7a:	3401      	adds	r4, #1
   3af7c:	6153      	str	r3, [r2, #20]
   3af7e:	612c      	str	r4, [r5, #16]
   3af80:	4628      	mov	r0, r5
   3af82:	b003      	add	sp, #12
   3af84:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3af86:	6869      	ldr	r1, [r5, #4]
   3af88:	9301      	str	r3, [sp, #4]
   3af8a:	3101      	adds	r1, #1
   3af8c:	4630      	mov	r0, r6
   3af8e:	f7ff ffa1 	bl	3aed4 <_Balloc>
   3af92:	9b01      	ldr	r3, [sp, #4]
   3af94:	4607      	mov	r7, r0
   3af96:	b1b8      	cbz	r0, 3afc8 <__multadd+0x94>
   3af98:	692a      	ldr	r2, [r5, #16]
   3af9a:	9301      	str	r3, [sp, #4]
   3af9c:	3202      	adds	r2, #2
   3af9e:	f105 010c 	add.w	r1, r5, #12
   3afa2:	0092      	lsls	r2, r2, #2
   3afa4:	300c      	adds	r0, #12
   3afa6:	f7dd f92b 	bl	18200 <memcpy>
   3afaa:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
   3afac:	6869      	ldr	r1, [r5, #4]
   3afae:	9b01      	ldr	r3, [sp, #4]
   3afb0:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   3afb4:	6028      	str	r0, [r5, #0]
   3afb6:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   3afba:	463d      	mov	r5, r7
   3afbc:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   3afc0:	3401      	adds	r4, #1
   3afc2:	6153      	str	r3, [r2, #20]
   3afc4:	612c      	str	r4, [r5, #16]
   3afc6:	e7db      	b.n	3af80 <__multadd+0x4c>
   3afc8:	4b02      	ldr	r3, [pc, #8]	; (3afd4 <__multadd+0xa0>)
   3afca:	4803      	ldr	r0, [pc, #12]	; (3afd8 <__multadd+0xa4>)
   3afcc:	463a      	mov	r2, r7
   3afce:	21b5      	movs	r1, #181	; 0xb5
   3afd0:	f7ef feac 	bl	2ad2c <__assert_func>
   3afd4:	00044108 	.word	0x00044108
   3afd8:	00044178 	.word	0x00044178

0003afdc <__hi0bits>:
   3afdc:	0c03      	lsrs	r3, r0, #16
   3afde:	041b      	lsls	r3, r3, #16
   3afe0:	b9d3      	cbnz	r3, 3b018 <__hi0bits+0x3c>
   3afe2:	0400      	lsls	r0, r0, #16
   3afe4:	2310      	movs	r3, #16
   3afe6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   3afea:	bf04      	itt	eq
   3afec:	0200      	lsleq	r0, r0, #8
   3afee:	3308      	addeq	r3, #8
   3aff0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   3aff4:	bf04      	itt	eq
   3aff6:	0100      	lsleq	r0, r0, #4
   3aff8:	3304      	addeq	r3, #4
   3affa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   3affe:	bf04      	itt	eq
   3b000:	0080      	lsleq	r0, r0, #2
   3b002:	3302      	addeq	r3, #2
   3b004:	2800      	cmp	r0, #0
   3b006:	db05      	blt.n	3b014 <__hi0bits+0x38>
   3b008:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   3b00c:	f103 0301 	add.w	r3, r3, #1
   3b010:	bf08      	it	eq
   3b012:	2320      	moveq	r3, #32
   3b014:	4618      	mov	r0, r3
   3b016:	4770      	bx	lr
   3b018:	2300      	movs	r3, #0
   3b01a:	e7e4      	b.n	3afe6 <__hi0bits+0xa>

0003b01c <__lo0bits>:
   3b01c:	6803      	ldr	r3, [r0, #0]
   3b01e:	f013 0207 	ands.w	r2, r3, #7
   3b022:	4601      	mov	r1, r0
   3b024:	d007      	beq.n	3b036 <__lo0bits+0x1a>
   3b026:	07da      	lsls	r2, r3, #31
   3b028:	d41f      	bmi.n	3b06a <__lo0bits+0x4e>
   3b02a:	0798      	lsls	r0, r3, #30
   3b02c:	d521      	bpl.n	3b072 <__lo0bits+0x56>
   3b02e:	085b      	lsrs	r3, r3, #1
   3b030:	600b      	str	r3, [r1, #0]
   3b032:	2001      	movs	r0, #1
   3b034:	4770      	bx	lr
   3b036:	b298      	uxth	r0, r3
   3b038:	b1a0      	cbz	r0, 3b064 <__lo0bits+0x48>
   3b03a:	4610      	mov	r0, r2
   3b03c:	b2da      	uxtb	r2, r3
   3b03e:	b90a      	cbnz	r2, 3b044 <__lo0bits+0x28>
   3b040:	3008      	adds	r0, #8
   3b042:	0a1b      	lsrs	r3, r3, #8
   3b044:	071a      	lsls	r2, r3, #28
   3b046:	bf04      	itt	eq
   3b048:	091b      	lsreq	r3, r3, #4
   3b04a:	3004      	addeq	r0, #4
   3b04c:	079a      	lsls	r2, r3, #30
   3b04e:	bf04      	itt	eq
   3b050:	089b      	lsreq	r3, r3, #2
   3b052:	3002      	addeq	r0, #2
   3b054:	07da      	lsls	r2, r3, #31
   3b056:	d403      	bmi.n	3b060 <__lo0bits+0x44>
   3b058:	085b      	lsrs	r3, r3, #1
   3b05a:	f100 0001 	add.w	r0, r0, #1
   3b05e:	d006      	beq.n	3b06e <__lo0bits+0x52>
   3b060:	600b      	str	r3, [r1, #0]
   3b062:	4770      	bx	lr
   3b064:	0c1b      	lsrs	r3, r3, #16
   3b066:	2010      	movs	r0, #16
   3b068:	e7e8      	b.n	3b03c <__lo0bits+0x20>
   3b06a:	2000      	movs	r0, #0
   3b06c:	4770      	bx	lr
   3b06e:	2020      	movs	r0, #32
   3b070:	4770      	bx	lr
   3b072:	089b      	lsrs	r3, r3, #2
   3b074:	600b      	str	r3, [r1, #0]
   3b076:	2002      	movs	r0, #2
   3b078:	4770      	bx	lr
   3b07a:	bf00      	nop

0003b07c <__i2b>:
   3b07c:	b538      	push	{r3, r4, r5, lr}
   3b07e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   3b080:	4604      	mov	r4, r0
   3b082:	460d      	mov	r5, r1
   3b084:	b14b      	cbz	r3, 3b09a <__i2b+0x1e>
   3b086:	6858      	ldr	r0, [r3, #4]
   3b088:	b1b0      	cbz	r0, 3b0b8 <__i2b+0x3c>
   3b08a:	6802      	ldr	r2, [r0, #0]
   3b08c:	605a      	str	r2, [r3, #4]
   3b08e:	2200      	movs	r2, #0
   3b090:	2301      	movs	r3, #1
   3b092:	e9c0 3504 	strd	r3, r5, [r0, #16]
   3b096:	60c2      	str	r2, [r0, #12]
   3b098:	bd38      	pop	{r3, r4, r5, pc}
   3b09a:	2221      	movs	r2, #33	; 0x21
   3b09c:	2104      	movs	r1, #4
   3b09e:	f000 fb4d 	bl	3b73c <_calloc_r>
   3b0a2:	4603      	mov	r3, r0
   3b0a4:	64e0      	str	r0, [r4, #76]	; 0x4c
   3b0a6:	2800      	cmp	r0, #0
   3b0a8:	d1ed      	bne.n	3b086 <__i2b+0xa>
   3b0aa:	4b09      	ldr	r3, [pc, #36]	; (3b0d0 <__i2b+0x54>)
   3b0ac:	4809      	ldr	r0, [pc, #36]	; (3b0d4 <__i2b+0x58>)
   3b0ae:	2200      	movs	r2, #0
   3b0b0:	f44f 71a0 	mov.w	r1, #320	; 0x140
   3b0b4:	f7ef fe3a 	bl	2ad2c <__assert_func>
   3b0b8:	221c      	movs	r2, #28
   3b0ba:	2101      	movs	r1, #1
   3b0bc:	4620      	mov	r0, r4
   3b0be:	f000 fb3d 	bl	3b73c <_calloc_r>
   3b0c2:	2800      	cmp	r0, #0
   3b0c4:	d0f1      	beq.n	3b0aa <__i2b+0x2e>
   3b0c6:	2201      	movs	r2, #1
   3b0c8:	2302      	movs	r3, #2
   3b0ca:	e9c0 2301 	strd	r2, r3, [r0, #4]
   3b0ce:	e7de      	b.n	3b08e <__i2b+0x12>
   3b0d0:	00044108 	.word	0x00044108
   3b0d4:	00044178 	.word	0x00044178

0003b0d8 <__multiply>:
   3b0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b0dc:	690e      	ldr	r6, [r1, #16]
   3b0de:	6915      	ldr	r5, [r2, #16]
   3b0e0:	42ae      	cmp	r6, r5
   3b0e2:	b085      	sub	sp, #20
   3b0e4:	4688      	mov	r8, r1
   3b0e6:	4614      	mov	r4, r2
   3b0e8:	db05      	blt.n	3b0f6 <__multiply+0x1e>
   3b0ea:	462a      	mov	r2, r5
   3b0ec:	4623      	mov	r3, r4
   3b0ee:	4635      	mov	r5, r6
   3b0f0:	460c      	mov	r4, r1
   3b0f2:	4616      	mov	r6, r2
   3b0f4:	4698      	mov	r8, r3
   3b0f6:	68a3      	ldr	r3, [r4, #8]
   3b0f8:	6861      	ldr	r1, [r4, #4]
   3b0fa:	19af      	adds	r7, r5, r6
   3b0fc:	42bb      	cmp	r3, r7
   3b0fe:	bfb8      	it	lt
   3b100:	3101      	addlt	r1, #1
   3b102:	f7ff fee7 	bl	3aed4 <_Balloc>
   3b106:	9001      	str	r0, [sp, #4]
   3b108:	2800      	cmp	r0, #0
   3b10a:	f000 8087 	beq.w	3b21c <__multiply+0x144>
   3b10e:	9b01      	ldr	r3, [sp, #4]
   3b110:	f103 0914 	add.w	r9, r3, #20
   3b114:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
   3b118:	45d1      	cmp	r9, sl
   3b11a:	d205      	bcs.n	3b128 <__multiply+0x50>
   3b11c:	464b      	mov	r3, r9
   3b11e:	2200      	movs	r2, #0
   3b120:	f843 2b04 	str.w	r2, [r3], #4
   3b124:	459a      	cmp	sl, r3
   3b126:	d8fb      	bhi.n	3b120 <__multiply+0x48>
   3b128:	f108 0814 	add.w	r8, r8, #20
   3b12c:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
   3b130:	f104 0314 	add.w	r3, r4, #20
   3b134:	45d8      	cmp	r8, fp
   3b136:	461a      	mov	r2, r3
   3b138:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   3b13c:	d25f      	bcs.n	3b1fe <__multiply+0x126>
   3b13e:	1b2b      	subs	r3, r5, r4
   3b140:	3b15      	subs	r3, #21
   3b142:	f023 0303 	bic.w	r3, r3, #3
   3b146:	3304      	adds	r3, #4
   3b148:	3415      	adds	r4, #21
   3b14a:	42a5      	cmp	r5, r4
   3b14c:	bf38      	it	cc
   3b14e:	2304      	movcc	r3, #4
   3b150:	e9cd a702 	strd	sl, r7, [sp, #8]
   3b154:	46ac      	mov	ip, r5
   3b156:	461f      	mov	r7, r3
   3b158:	4692      	mov	sl, r2
   3b15a:	e005      	b.n	3b168 <__multiply+0x90>
   3b15c:	0c00      	lsrs	r0, r0, #16
   3b15e:	d129      	bne.n	3b1b4 <__multiply+0xdc>
   3b160:	45c3      	cmp	fp, r8
   3b162:	f109 0904 	add.w	r9, r9, #4
   3b166:	d948      	bls.n	3b1fa <__multiply+0x122>
   3b168:	f858 0b04 	ldr.w	r0, [r8], #4
   3b16c:	b285      	uxth	r5, r0
   3b16e:	2d00      	cmp	r5, #0
   3b170:	d0f4      	beq.n	3b15c <__multiply+0x84>
   3b172:	4656      	mov	r6, sl
   3b174:	464c      	mov	r4, r9
   3b176:	2300      	movs	r3, #0
   3b178:	f856 0b04 	ldr.w	r0, [r6], #4
   3b17c:	6821      	ldr	r1, [r4, #0]
   3b17e:	b282      	uxth	r2, r0
   3b180:	fa1f fe81 	uxth.w	lr, r1
   3b184:	fb05 ee02 	mla	lr, r5, r2, lr
   3b188:	0c00      	lsrs	r0, r0, #16
   3b18a:	0c0a      	lsrs	r2, r1, #16
   3b18c:	4473      	add	r3, lr
   3b18e:	fb05 2200 	mla	r2, r5, r0, r2
   3b192:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   3b196:	b29b      	uxth	r3, r3
   3b198:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   3b19c:	45b4      	cmp	ip, r6
   3b19e:	f844 3b04 	str.w	r3, [r4], #4
   3b1a2:	ea4f 4312 	mov.w	r3, r2, lsr #16
   3b1a6:	d8e7      	bhi.n	3b178 <__multiply+0xa0>
   3b1a8:	f849 3007 	str.w	r3, [r9, r7]
   3b1ac:	f858 0c04 	ldr.w	r0, [r8, #-4]
   3b1b0:	0c00      	lsrs	r0, r0, #16
   3b1b2:	d0d5      	beq.n	3b160 <__multiply+0x88>
   3b1b4:	f8d9 3000 	ldr.w	r3, [r9]
   3b1b8:	4654      	mov	r4, sl
   3b1ba:	4619      	mov	r1, r3
   3b1bc:	464d      	mov	r5, r9
   3b1be:	2200      	movs	r2, #0
   3b1c0:	8826      	ldrh	r6, [r4, #0]
   3b1c2:	0c09      	lsrs	r1, r1, #16
   3b1c4:	fb00 1106 	mla	r1, r0, r6, r1
   3b1c8:	440a      	add	r2, r1
   3b1ca:	b29b      	uxth	r3, r3
   3b1cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   3b1d0:	f845 3b04 	str.w	r3, [r5], #4
   3b1d4:	f854 6b04 	ldr.w	r6, [r4], #4
   3b1d8:	6829      	ldr	r1, [r5, #0]
   3b1da:	0c36      	lsrs	r6, r6, #16
   3b1dc:	b28b      	uxth	r3, r1
   3b1de:	fb00 3306 	mla	r3, r0, r6, r3
   3b1e2:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   3b1e6:	45a4      	cmp	ip, r4
   3b1e8:	ea4f 4213 	mov.w	r2, r3, lsr #16
   3b1ec:	d8e8      	bhi.n	3b1c0 <__multiply+0xe8>
   3b1ee:	45c3      	cmp	fp, r8
   3b1f0:	f849 3007 	str.w	r3, [r9, r7]
   3b1f4:	f109 0904 	add.w	r9, r9, #4
   3b1f8:	d8b6      	bhi.n	3b168 <__multiply+0x90>
   3b1fa:	e9dd a702 	ldrd	sl, r7, [sp, #8]
   3b1fe:	2f00      	cmp	r7, #0
   3b200:	dc02      	bgt.n	3b208 <__multiply+0x130>
   3b202:	e005      	b.n	3b210 <__multiply+0x138>
   3b204:	3f01      	subs	r7, #1
   3b206:	d003      	beq.n	3b210 <__multiply+0x138>
   3b208:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   3b20c:	2b00      	cmp	r3, #0
   3b20e:	d0f9      	beq.n	3b204 <__multiply+0x12c>
   3b210:	9b01      	ldr	r3, [sp, #4]
   3b212:	4618      	mov	r0, r3
   3b214:	611f      	str	r7, [r3, #16]
   3b216:	b005      	add	sp, #20
   3b218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b21c:	4b03      	ldr	r3, [pc, #12]	; (3b22c <__multiply+0x154>)
   3b21e:	4804      	ldr	r0, [pc, #16]	; (3b230 <__multiply+0x158>)
   3b220:	9a01      	ldr	r2, [sp, #4]
   3b222:	f240 115d 	movw	r1, #349	; 0x15d
   3b226:	f7ef fd81 	bl	2ad2c <__assert_func>
   3b22a:	bf00      	nop
   3b22c:	00044108 	.word	0x00044108
   3b230:	00044178 	.word	0x00044178

0003b234 <__pow5mult>:
   3b234:	f012 0303 	ands.w	r3, r2, #3
   3b238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3b23c:	4614      	mov	r4, r2
   3b23e:	4606      	mov	r6, r0
   3b240:	d132      	bne.n	3b2a8 <__pow5mult+0x74>
   3b242:	460d      	mov	r5, r1
   3b244:	10a4      	asrs	r4, r4, #2
   3b246:	d020      	beq.n	3b28a <__pow5mult+0x56>
   3b248:	f8d6 8048 	ldr.w	r8, [r6, #72]	; 0x48
   3b24c:	f1b8 0f00 	cmp.w	r8, #0
   3b250:	d033      	beq.n	3b2ba <__pow5mult+0x86>
   3b252:	07e3      	lsls	r3, r4, #31
   3b254:	f04f 0700 	mov.w	r7, #0
   3b258:	d407      	bmi.n	3b26a <__pow5mult+0x36>
   3b25a:	1064      	asrs	r4, r4, #1
   3b25c:	d015      	beq.n	3b28a <__pow5mult+0x56>
   3b25e:	f8d8 0000 	ldr.w	r0, [r8]
   3b262:	b1a8      	cbz	r0, 3b290 <__pow5mult+0x5c>
   3b264:	4680      	mov	r8, r0
   3b266:	07e3      	lsls	r3, r4, #31
   3b268:	d5f7      	bpl.n	3b25a <__pow5mult+0x26>
   3b26a:	4642      	mov	r2, r8
   3b26c:	4629      	mov	r1, r5
   3b26e:	4630      	mov	r0, r6
   3b270:	f7ff ff32 	bl	3b0d8 <__multiply>
   3b274:	b1b5      	cbz	r5, 3b2a4 <__pow5mult+0x70>
   3b276:	6869      	ldr	r1, [r5, #4]
   3b278:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
   3b27a:	1064      	asrs	r4, r4, #1
   3b27c:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   3b280:	602a      	str	r2, [r5, #0]
   3b282:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
   3b286:	4605      	mov	r5, r0
   3b288:	d1e9      	bne.n	3b25e <__pow5mult+0x2a>
   3b28a:	4628      	mov	r0, r5
   3b28c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3b290:	4642      	mov	r2, r8
   3b292:	4641      	mov	r1, r8
   3b294:	4630      	mov	r0, r6
   3b296:	f7ff ff1f 	bl	3b0d8 <__multiply>
   3b29a:	f8c8 0000 	str.w	r0, [r8]
   3b29e:	6007      	str	r7, [r0, #0]
   3b2a0:	4680      	mov	r8, r0
   3b2a2:	e7e0      	b.n	3b266 <__pow5mult+0x32>
   3b2a4:	4605      	mov	r5, r0
   3b2a6:	e7d8      	b.n	3b25a <__pow5mult+0x26>
   3b2a8:	3b01      	subs	r3, #1
   3b2aa:	4a0f      	ldr	r2, [pc, #60]	; (3b2e8 <__pow5mult+0xb4>)
   3b2ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   3b2b0:	2300      	movs	r3, #0
   3b2b2:	f7ff fe3f 	bl	3af34 <__multadd>
   3b2b6:	4605      	mov	r5, r0
   3b2b8:	e7c4      	b.n	3b244 <__pow5mult+0x10>
   3b2ba:	2101      	movs	r1, #1
   3b2bc:	4630      	mov	r0, r6
   3b2be:	f7ff fe09 	bl	3aed4 <_Balloc>
   3b2c2:	4680      	mov	r8, r0
   3b2c4:	b140      	cbz	r0, 3b2d8 <__pow5mult+0xa4>
   3b2c6:	2301      	movs	r3, #1
   3b2c8:	f240 2271 	movw	r2, #625	; 0x271
   3b2cc:	e9c0 3204 	strd	r3, r2, [r0, #16]
   3b2d0:	2300      	movs	r3, #0
   3b2d2:	64b0      	str	r0, [r6, #72]	; 0x48
   3b2d4:	6003      	str	r3, [r0, #0]
   3b2d6:	e7bc      	b.n	3b252 <__pow5mult+0x1e>
   3b2d8:	4b04      	ldr	r3, [pc, #16]	; (3b2ec <__pow5mult+0xb8>)
   3b2da:	4805      	ldr	r0, [pc, #20]	; (3b2f0 <__pow5mult+0xbc>)
   3b2dc:	4642      	mov	r2, r8
   3b2de:	f44f 71a0 	mov.w	r1, #320	; 0x140
   3b2e2:	f7ef fd23 	bl	2ad2c <__assert_func>
   3b2e6:	bf00      	nop
   3b2e8:	000442c8 	.word	0x000442c8
   3b2ec:	00044108 	.word	0x00044108
   3b2f0:	00044178 	.word	0x00044178

0003b2f4 <__lshift>:
   3b2f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3b2f8:	460c      	mov	r4, r1
   3b2fa:	4690      	mov	r8, r2
   3b2fc:	6926      	ldr	r6, [r4, #16]
   3b2fe:	68a3      	ldr	r3, [r4, #8]
   3b300:	6849      	ldr	r1, [r1, #4]
   3b302:	eb06 1662 	add.w	r6, r6, r2, asr #5
   3b306:	1c75      	adds	r5, r6, #1
   3b308:	429d      	cmp	r5, r3
   3b30a:	4607      	mov	r7, r0
   3b30c:	ea4f 1962 	mov.w	r9, r2, asr #5
   3b310:	dd04      	ble.n	3b31c <__lshift+0x28>
   3b312:	005b      	lsls	r3, r3, #1
   3b314:	429d      	cmp	r5, r3
   3b316:	f101 0101 	add.w	r1, r1, #1
   3b31a:	dcfa      	bgt.n	3b312 <__lshift+0x1e>
   3b31c:	4638      	mov	r0, r7
   3b31e:	f7ff fdd9 	bl	3aed4 <_Balloc>
   3b322:	4684      	mov	ip, r0
   3b324:	2800      	cmp	r0, #0
   3b326:	d051      	beq.n	3b3cc <__lshift+0xd8>
   3b328:	f1b9 0f00 	cmp.w	r9, #0
   3b32c:	f100 0014 	add.w	r0, r0, #20
   3b330:	dd0e      	ble.n	3b350 <__lshift+0x5c>
   3b332:	f109 0205 	add.w	r2, r9, #5
   3b336:	ea4f 0e82 	mov.w	lr, r2, lsl #2
   3b33a:	4603      	mov	r3, r0
   3b33c:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
   3b340:	2100      	movs	r1, #0
   3b342:	f843 1b04 	str.w	r1, [r3], #4
   3b346:	4293      	cmp	r3, r2
   3b348:	d1fb      	bne.n	3b342 <__lshift+0x4e>
   3b34a:	f1ae 0314 	sub.w	r3, lr, #20
   3b34e:	4418      	add	r0, r3
   3b350:	6921      	ldr	r1, [r4, #16]
   3b352:	f104 0314 	add.w	r3, r4, #20
   3b356:	f018 081f 	ands.w	r8, r8, #31
   3b35a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   3b35e:	d02d      	beq.n	3b3bc <__lshift+0xc8>
   3b360:	f1c8 0920 	rsb	r9, r8, #32
   3b364:	4686      	mov	lr, r0
   3b366:	f04f 0a00 	mov.w	sl, #0
   3b36a:	681a      	ldr	r2, [r3, #0]
   3b36c:	fa02 f208 	lsl.w	r2, r2, r8
   3b370:	ea42 020a 	orr.w	r2, r2, sl
   3b374:	f84e 2b04 	str.w	r2, [lr], #4
   3b378:	f853 2b04 	ldr.w	r2, [r3], #4
   3b37c:	4299      	cmp	r1, r3
   3b37e:	fa22 fa09 	lsr.w	sl, r2, r9
   3b382:	d8f2      	bhi.n	3b36a <__lshift+0x76>
   3b384:	1b0b      	subs	r3, r1, r4
   3b386:	3b15      	subs	r3, #21
   3b388:	f023 0303 	bic.w	r3, r3, #3
   3b38c:	3304      	adds	r3, #4
   3b38e:	f104 0215 	add.w	r2, r4, #21
   3b392:	4291      	cmp	r1, r2
   3b394:	bf38      	it	cc
   3b396:	2304      	movcc	r3, #4
   3b398:	f1ba 0f00 	cmp.w	sl, #0
   3b39c:	bf18      	it	ne
   3b39e:	462e      	movne	r6, r5
   3b3a0:	f840 a003 	str.w	sl, [r0, r3]
   3b3a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   3b3a6:	6862      	ldr	r2, [r4, #4]
   3b3a8:	f8cc 6010 	str.w	r6, [ip, #16]
   3b3ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   3b3b0:	6021      	str	r1, [r4, #0]
   3b3b2:	4660      	mov	r0, ip
   3b3b4:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   3b3b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3b3bc:	3804      	subs	r0, #4
   3b3be:	f853 2b04 	ldr.w	r2, [r3], #4
   3b3c2:	f840 2f04 	str.w	r2, [r0, #4]!
   3b3c6:	4299      	cmp	r1, r3
   3b3c8:	d8f9      	bhi.n	3b3be <__lshift+0xca>
   3b3ca:	e7eb      	b.n	3b3a4 <__lshift+0xb0>
   3b3cc:	4b03      	ldr	r3, [pc, #12]	; (3b3dc <__lshift+0xe8>)
   3b3ce:	4804      	ldr	r0, [pc, #16]	; (3b3e0 <__lshift+0xec>)
   3b3d0:	4662      	mov	r2, ip
   3b3d2:	f240 11d9 	movw	r1, #473	; 0x1d9
   3b3d6:	f7ef fca9 	bl	2ad2c <__assert_func>
   3b3da:	bf00      	nop
   3b3dc:	00044108 	.word	0x00044108
   3b3e0:	00044178 	.word	0x00044178

0003b3e4 <__mcmp>:
   3b3e4:	690b      	ldr	r3, [r1, #16]
   3b3e6:	4684      	mov	ip, r0
   3b3e8:	6900      	ldr	r0, [r0, #16]
   3b3ea:	1ac0      	subs	r0, r0, r3
   3b3ec:	d116      	bne.n	3b41c <__mcmp+0x38>
   3b3ee:	f10c 0c14 	add.w	ip, ip, #20
   3b3f2:	3114      	adds	r1, #20
   3b3f4:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
   3b3f8:	b410      	push	{r4}
   3b3fa:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   3b3fe:	e001      	b.n	3b404 <__mcmp+0x20>
   3b400:	4594      	cmp	ip, r2
   3b402:	d208      	bcs.n	3b416 <__mcmp+0x32>
   3b404:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   3b408:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   3b40c:	428c      	cmp	r4, r1
   3b40e:	d0f7      	beq.n	3b400 <__mcmp+0x1c>
   3b410:	d205      	bcs.n	3b41e <__mcmp+0x3a>
   3b412:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3b416:	f85d 4b04 	ldr.w	r4, [sp], #4
   3b41a:	4770      	bx	lr
   3b41c:	4770      	bx	lr
   3b41e:	2001      	movs	r0, #1
   3b420:	f85d 4b04 	ldr.w	r4, [sp], #4
   3b424:	4770      	bx	lr
   3b426:	bf00      	nop

0003b428 <__mdiff>:
   3b428:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b42c:	690f      	ldr	r7, [r1, #16]
   3b42e:	6913      	ldr	r3, [r2, #16]
   3b430:	1aff      	subs	r7, r7, r3
   3b432:	2f00      	cmp	r7, #0
   3b434:	460e      	mov	r6, r1
   3b436:	4690      	mov	r8, r2
   3b438:	d17a      	bne.n	3b530 <__mdiff+0x108>
   3b43a:	f101 0514 	add.w	r5, r1, #20
   3b43e:	3214      	adds	r2, #20
   3b440:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   3b444:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   3b448:	e001      	b.n	3b44e <__mdiff+0x26>
   3b44a:	429d      	cmp	r5, r3
   3b44c:	d273      	bcs.n	3b536 <__mdiff+0x10e>
   3b44e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   3b452:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   3b456:	42a1      	cmp	r1, r4
   3b458:	d0f7      	beq.n	3b44a <__mdiff+0x22>
   3b45a:	d364      	bcc.n	3b526 <__mdiff+0xfe>
   3b45c:	6871      	ldr	r1, [r6, #4]
   3b45e:	f7ff fd39 	bl	3aed4 <_Balloc>
   3b462:	4681      	mov	r9, r0
   3b464:	2800      	cmp	r0, #0
   3b466:	d072      	beq.n	3b54e <__mdiff+0x126>
   3b468:	6935      	ldr	r5, [r6, #16]
   3b46a:	f8d8 2010 	ldr.w	r2, [r8, #16]
   3b46e:	60c7      	str	r7, [r0, #12]
   3b470:	f108 0e14 	add.w	lr, r8, #20
   3b474:	f106 0014 	add.w	r0, r6, #20
   3b478:	f109 0a14 	add.w	sl, r9, #20
   3b47c:	f106 0c10 	add.w	ip, r6, #16
   3b480:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
   3b484:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   3b488:	4656      	mov	r6, sl
   3b48a:	2100      	movs	r1, #0
   3b48c:	f85e 4b04 	ldr.w	r4, [lr], #4
   3b490:	f85c bf04 	ldr.w	fp, [ip, #4]!
   3b494:	b2a3      	uxth	r3, r4
   3b496:	fa11 f18b 	uxtah	r1, r1, fp
   3b49a:	1acb      	subs	r3, r1, r3
   3b49c:	0c21      	lsrs	r1, r4, #16
   3b49e:	ebc1 411b 	rsb	r1, r1, fp, lsr #16
   3b4a2:	eb01 4123 	add.w	r1, r1, r3, asr #16
   3b4a6:	b29b      	uxth	r3, r3
   3b4a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   3b4ac:	4572      	cmp	r2, lr
   3b4ae:	f846 3b04 	str.w	r3, [r6], #4
   3b4b2:	ea4f 4121 	mov.w	r1, r1, asr #16
   3b4b6:	d8e9      	bhi.n	3b48c <__mdiff+0x64>
   3b4b8:	eba2 0408 	sub.w	r4, r2, r8
   3b4bc:	3c15      	subs	r4, #21
   3b4be:	f108 0815 	add.w	r8, r8, #21
   3b4c2:	4542      	cmp	r2, r8
   3b4c4:	f024 0603 	bic.w	r6, r4, #3
   3b4c8:	f106 0604 	add.w	r6, r6, #4
   3b4cc:	bf38      	it	cc
   3b4ce:	2604      	movcc	r6, #4
   3b4d0:	4430      	add	r0, r6
   3b4d2:	f024 0203 	bic.w	r2, r4, #3
   3b4d6:	bf38      	it	cc
   3b4d8:	2200      	movcc	r2, #0
   3b4da:	4287      	cmp	r7, r0
   3b4dc:	4452      	add	r2, sl
   3b4de:	44b2      	add	sl, r6
   3b4e0:	d916      	bls.n	3b510 <__mdiff+0xe8>
   3b4e2:	4656      	mov	r6, sl
   3b4e4:	4604      	mov	r4, r0
   3b4e6:	f854 3b04 	ldr.w	r3, [r4], #4
   3b4ea:	fa11 f183 	uxtah	r1, r1, r3
   3b4ee:	140a      	asrs	r2, r1, #16
   3b4f0:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   3b4f4:	b289      	uxth	r1, r1
   3b4f6:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
   3b4fa:	42a7      	cmp	r7, r4
   3b4fc:	f846 3b04 	str.w	r3, [r6], #4
   3b500:	ea4f 4122 	mov.w	r1, r2, asr #16
   3b504:	d8ef      	bhi.n	3b4e6 <__mdiff+0xbe>
   3b506:	1e7a      	subs	r2, r7, #1
   3b508:	1a10      	subs	r0, r2, r0
   3b50a:	f020 0203 	bic.w	r2, r0, #3
   3b50e:	4452      	add	r2, sl
   3b510:	b923      	cbnz	r3, 3b51c <__mdiff+0xf4>
   3b512:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   3b516:	3d01      	subs	r5, #1
   3b518:	2b00      	cmp	r3, #0
   3b51a:	d0fa      	beq.n	3b512 <__mdiff+0xea>
   3b51c:	f8c9 5010 	str.w	r5, [r9, #16]
   3b520:	4648      	mov	r0, r9
   3b522:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b526:	4633      	mov	r3, r6
   3b528:	2701      	movs	r7, #1
   3b52a:	4646      	mov	r6, r8
   3b52c:	4698      	mov	r8, r3
   3b52e:	e795      	b.n	3b45c <__mdiff+0x34>
   3b530:	dbf9      	blt.n	3b526 <__mdiff+0xfe>
   3b532:	2700      	movs	r7, #0
   3b534:	e792      	b.n	3b45c <__mdiff+0x34>
   3b536:	2100      	movs	r1, #0
   3b538:	f7ff fccc 	bl	3aed4 <_Balloc>
   3b53c:	4681      	mov	r9, r0
   3b53e:	b168      	cbz	r0, 3b55c <__mdiff+0x134>
   3b540:	2201      	movs	r2, #1
   3b542:	2300      	movs	r3, #0
   3b544:	e9c9 2304 	strd	r2, r3, [r9, #16]
   3b548:	4648      	mov	r0, r9
   3b54a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b54e:	4b07      	ldr	r3, [pc, #28]	; (3b56c <__mdiff+0x144>)
   3b550:	4807      	ldr	r0, [pc, #28]	; (3b570 <__mdiff+0x148>)
   3b552:	464a      	mov	r2, r9
   3b554:	f44f 7110 	mov.w	r1, #576	; 0x240
   3b558:	f7ef fbe8 	bl	2ad2c <__assert_func>
   3b55c:	4b03      	ldr	r3, [pc, #12]	; (3b56c <__mdiff+0x144>)
   3b55e:	4804      	ldr	r0, [pc, #16]	; (3b570 <__mdiff+0x148>)
   3b560:	464a      	mov	r2, r9
   3b562:	f240 2132 	movw	r1, #562	; 0x232
   3b566:	f7ef fbe1 	bl	2ad2c <__assert_func>
   3b56a:	bf00      	nop
   3b56c:	00044108 	.word	0x00044108
   3b570:	00044178 	.word	0x00044178

0003b574 <__d2b>:
   3b574:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3b578:	4688      	mov	r8, r1
   3b57a:	b083      	sub	sp, #12
   3b57c:	2101      	movs	r1, #1
   3b57e:	ec57 6b10 	vmov	r6, r7, d0
   3b582:	4615      	mov	r5, r2
   3b584:	f7ff fca6 	bl	3aed4 <_Balloc>
   3b588:	4604      	mov	r4, r0
   3b58a:	2800      	cmp	r0, #0
   3b58c:	d04f      	beq.n	3b62e <__d2b+0xba>
   3b58e:	f3c7 590a 	ubfx	r9, r7, #20, #11
   3b592:	f3c7 0313 	ubfx	r3, r7, #0, #20
   3b596:	f1b9 0f00 	cmp.w	r9, #0
   3b59a:	d001      	beq.n	3b5a0 <__d2b+0x2c>
   3b59c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   3b5a0:	2e00      	cmp	r6, #0
   3b5a2:	9301      	str	r3, [sp, #4]
   3b5a4:	d024      	beq.n	3b5f0 <__d2b+0x7c>
   3b5a6:	4668      	mov	r0, sp
   3b5a8:	9600      	str	r6, [sp, #0]
   3b5aa:	f7ff fd37 	bl	3b01c <__lo0bits>
   3b5ae:	2800      	cmp	r0, #0
   3b5b0:	d039      	beq.n	3b626 <__d2b+0xb2>
   3b5b2:	e9dd 1300 	ldrd	r1, r3, [sp]
   3b5b6:	f1c0 0220 	rsb	r2, r0, #32
   3b5ba:	fa03 f202 	lsl.w	r2, r3, r2
   3b5be:	430a      	orrs	r2, r1
   3b5c0:	40c3      	lsrs	r3, r0
   3b5c2:	6162      	str	r2, [r4, #20]
   3b5c4:	9301      	str	r3, [sp, #4]
   3b5c6:	2b00      	cmp	r3, #0
   3b5c8:	bf14      	ite	ne
   3b5ca:	2202      	movne	r2, #2
   3b5cc:	2201      	moveq	r2, #1
   3b5ce:	61a3      	str	r3, [r4, #24]
   3b5d0:	6122      	str	r2, [r4, #16]
   3b5d2:	f1b9 0f00 	cmp.w	r9, #0
   3b5d6:	d016      	beq.n	3b606 <__d2b+0x92>
   3b5d8:	f2a9 4333 	subw	r3, r9, #1075	; 0x433
   3b5dc:	4403      	add	r3, r0
   3b5de:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   3b5e2:	f8c8 3000 	str.w	r3, [r8]
   3b5e6:	6028      	str	r0, [r5, #0]
   3b5e8:	4620      	mov	r0, r4
   3b5ea:	b003      	add	sp, #12
   3b5ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3b5f0:	a801      	add	r0, sp, #4
   3b5f2:	f7ff fd13 	bl	3b01c <__lo0bits>
   3b5f6:	9b01      	ldr	r3, [sp, #4]
   3b5f8:	6163      	str	r3, [r4, #20]
   3b5fa:	2201      	movs	r2, #1
   3b5fc:	3020      	adds	r0, #32
   3b5fe:	6122      	str	r2, [r4, #16]
   3b600:	f1b9 0f00 	cmp.w	r9, #0
   3b604:	d1e8      	bne.n	3b5d8 <__d2b+0x64>
   3b606:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   3b60a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   3b60e:	f8c8 0000 	str.w	r0, [r8]
   3b612:	6918      	ldr	r0, [r3, #16]
   3b614:	f7ff fce2 	bl	3afdc <__hi0bits>
   3b618:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   3b61c:	6028      	str	r0, [r5, #0]
   3b61e:	4620      	mov	r0, r4
   3b620:	b003      	add	sp, #12
   3b622:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3b626:	9b00      	ldr	r3, [sp, #0]
   3b628:	6163      	str	r3, [r4, #20]
   3b62a:	9b01      	ldr	r3, [sp, #4]
   3b62c:	e7cb      	b.n	3b5c6 <__d2b+0x52>
   3b62e:	4b03      	ldr	r3, [pc, #12]	; (3b63c <__d2b+0xc8>)
   3b630:	4803      	ldr	r0, [pc, #12]	; (3b640 <__d2b+0xcc>)
   3b632:	4622      	mov	r2, r4
   3b634:	f240 310a 	movw	r1, #778	; 0x30a
   3b638:	f7ef fb78 	bl	2ad2c <__assert_func>
   3b63c:	00044108 	.word	0x00044108
   3b640:	00044178 	.word	0x00044178

0003b644 <__ssprint_r>:
   3b644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b648:	6893      	ldr	r3, [r2, #8]
   3b64a:	b083      	sub	sp, #12
   3b64c:	4691      	mov	r9, r2
   3b64e:	2b00      	cmp	r3, #0
   3b650:	d06e      	beq.n	3b730 <__ssprint_r+0xec>
   3b652:	6817      	ldr	r7, [r2, #0]
   3b654:	688d      	ldr	r5, [r1, #8]
   3b656:	4680      	mov	r8, r0
   3b658:	460c      	mov	r4, r1
   3b65a:	6808      	ldr	r0, [r1, #0]
   3b65c:	3708      	adds	r7, #8
   3b65e:	e044      	b.n	3b6ea <__ssprint_r+0xa6>
   3b660:	89a3      	ldrh	r3, [r4, #12]
   3b662:	f413 6f90 	tst.w	r3, #1152	; 0x480
   3b666:	d02e      	beq.n	3b6c6 <__ssprint_r+0x82>
   3b668:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   3b66c:	eba0 0a01 	sub.w	sl, r0, r1
   3b670:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   3b674:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   3b678:	eb0a 0006 	add.w	r0, sl, r6
   3b67c:	106d      	asrs	r5, r5, #1
   3b67e:	3001      	adds	r0, #1
   3b680:	42a8      	cmp	r0, r5
   3b682:	462a      	mov	r2, r5
   3b684:	bf84      	itt	hi
   3b686:	4605      	movhi	r5, r0
   3b688:	462a      	movhi	r2, r5
   3b68a:	055b      	lsls	r3, r3, #21
   3b68c:	d537      	bpl.n	3b6fe <__ssprint_r+0xba>
   3b68e:	4611      	mov	r1, r2
   3b690:	4640      	mov	r0, r8
   3b692:	f7f1 f9e5 	bl	2ca60 <_malloc_r>
   3b696:	2800      	cmp	r0, #0
   3b698:	d03b      	beq.n	3b712 <__ssprint_r+0xce>
   3b69a:	4652      	mov	r2, sl
   3b69c:	6921      	ldr	r1, [r4, #16]
   3b69e:	9001      	str	r0, [sp, #4]
   3b6a0:	f7dc fdae 	bl	18200 <memcpy>
   3b6a4:	89a2      	ldrh	r2, [r4, #12]
   3b6a6:	9b01      	ldr	r3, [sp, #4]
   3b6a8:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   3b6ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   3b6b0:	81a2      	strh	r2, [r4, #12]
   3b6b2:	eba5 020a 	sub.w	r2, r5, sl
   3b6b6:	eb03 000a 	add.w	r0, r3, sl
   3b6ba:	6165      	str	r5, [r4, #20]
   3b6bc:	60a2      	str	r2, [r4, #8]
   3b6be:	6123      	str	r3, [r4, #16]
   3b6c0:	6020      	str	r0, [r4, #0]
   3b6c2:	4635      	mov	r5, r6
   3b6c4:	46b2      	mov	sl, r6
   3b6c6:	4659      	mov	r1, fp
   3b6c8:	4652      	mov	r2, sl
   3b6ca:	f7ef fb6f 	bl	2adac <memmove>
   3b6ce:	68a0      	ldr	r0, [r4, #8]
   3b6d0:	f8d9 1008 	ldr.w	r1, [r9, #8]
   3b6d4:	6823      	ldr	r3, [r4, #0]
   3b6d6:	1b45      	subs	r5, r0, r5
   3b6d8:	1b8e      	subs	r6, r1, r6
   3b6da:	eb03 000a 	add.w	r0, r3, sl
   3b6de:	60a5      	str	r5, [r4, #8]
   3b6e0:	6020      	str	r0, [r4, #0]
   3b6e2:	f8c9 6008 	str.w	r6, [r9, #8]
   3b6e6:	b31e      	cbz	r6, 3b730 <__ssprint_r+0xec>
   3b6e8:	3708      	adds	r7, #8
   3b6ea:	e957 b602 	ldrd	fp, r6, [r7, #-8]
   3b6ee:	2e00      	cmp	r6, #0
   3b6f0:	d0fa      	beq.n	3b6e8 <__ssprint_r+0xa4>
   3b6f2:	42b5      	cmp	r5, r6
   3b6f4:	46aa      	mov	sl, r5
   3b6f6:	d9b3      	bls.n	3b660 <__ssprint_r+0x1c>
   3b6f8:	4635      	mov	r5, r6
   3b6fa:	46b2      	mov	sl, r6
   3b6fc:	e7e3      	b.n	3b6c6 <__ssprint_r+0x82>
   3b6fe:	4640      	mov	r0, r8
   3b700:	f7f1 fc80 	bl	2d004 <_realloc_r>
   3b704:	4603      	mov	r3, r0
   3b706:	2800      	cmp	r0, #0
   3b708:	d1d3      	bne.n	3b6b2 <__ssprint_r+0x6e>
   3b70a:	6921      	ldr	r1, [r4, #16]
   3b70c:	4640      	mov	r0, r8
   3b70e:	f7f0 fe83 	bl	2c418 <_free_r>
   3b712:	230c      	movs	r3, #12
   3b714:	f8c8 3000 	str.w	r3, [r8]
   3b718:	89a3      	ldrh	r3, [r4, #12]
   3b71a:	2200      	movs	r2, #0
   3b71c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3b720:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3b724:	81a3      	strh	r3, [r4, #12]
   3b726:	e9c9 2201 	strd	r2, r2, [r9, #4]
   3b72a:	b003      	add	sp, #12
   3b72c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b730:	2000      	movs	r0, #0
   3b732:	f8c9 0004 	str.w	r0, [r9, #4]
   3b736:	b003      	add	sp, #12
   3b738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0003b73c <_calloc_r>:
   3b73c:	b538      	push	{r3, r4, r5, lr}
   3b73e:	fba1 1402 	umull	r1, r4, r1, r2
   3b742:	bb8c      	cbnz	r4, 3b7a8 <_calloc_r+0x6c>
   3b744:	f7f1 f98c 	bl	2ca60 <_malloc_r>
   3b748:	4605      	mov	r5, r0
   3b74a:	b1e0      	cbz	r0, 3b786 <_calloc_r+0x4a>
   3b74c:	f850 2c04 	ldr.w	r2, [r0, #-4]
   3b750:	f022 0203 	bic.w	r2, r2, #3
   3b754:	3a04      	subs	r2, #4
   3b756:	2a24      	cmp	r2, #36	; 0x24
   3b758:	d817      	bhi.n	3b78a <_calloc_r+0x4e>
   3b75a:	2a13      	cmp	r2, #19
   3b75c:	d91a      	bls.n	3b794 <_calloc_r+0x58>
   3b75e:	2a1b      	cmp	r2, #27
   3b760:	e9c0 4400 	strd	r4, r4, [r0]
   3b764:	d91d      	bls.n	3b7a2 <_calloc_r+0x66>
   3b766:	2a24      	cmp	r2, #36	; 0x24
   3b768:	bf14      	ite	ne
   3b76a:	f100 0210 	addne.w	r2, r0, #16
   3b76e:	f100 0218 	addeq.w	r2, r0, #24
   3b772:	f04f 0300 	mov.w	r3, #0
   3b776:	e9c0 4402 	strd	r4, r4, [r0, #8]
   3b77a:	bf04      	itt	eq
   3b77c:	6104      	streq	r4, [r0, #16]
   3b77e:	6144      	streq	r4, [r0, #20]
   3b780:	e9c2 3300 	strd	r3, r3, [r2]
   3b784:	6093      	str	r3, [r2, #8]
   3b786:	4628      	mov	r0, r5
   3b788:	bd38      	pop	{r3, r4, r5, pc}
   3b78a:	4621      	mov	r1, r4
   3b78c:	f7ef fb8a 	bl	2aea4 <memset>
   3b790:	4628      	mov	r0, r5
   3b792:	bd38      	pop	{r3, r4, r5, pc}
   3b794:	4602      	mov	r2, r0
   3b796:	2300      	movs	r3, #0
   3b798:	e9c2 3300 	strd	r3, r3, [r2]
   3b79c:	6093      	str	r3, [r2, #8]
   3b79e:	4628      	mov	r0, r5
   3b7a0:	bd38      	pop	{r3, r4, r5, pc}
   3b7a2:	f100 0208 	add.w	r2, r0, #8
   3b7a6:	e7f6      	b.n	3b796 <_calloc_r+0x5a>
   3b7a8:	f7ef fae6 	bl	2ad78 <__errno>
   3b7ac:	230c      	movs	r3, #12
   3b7ae:	2500      	movs	r5, #0
   3b7b0:	6003      	str	r3, [r0, #0]
   3b7b2:	e7e8      	b.n	3b786 <_calloc_r+0x4a>

0003b7b4 <_Unwind_GetDataRelBase>:
   3b7b4:	b508      	push	{r3, lr}
   3b7b6:	f7f0 fbf1 	bl	2bf9c <abort>

0003b7ba <_Unwind_GetTextRelBase>:
   3b7ba:	b508      	push	{r3, lr}
   3b7bc:	f7ff fffa 	bl	3b7b4 <_Unwind_GetDataRelBase>

0003b7c0 <ns_ipc_ring_buffer_init>:
//!
//! @return
//
//*****************************************************************************
void
ns_ipc_ring_buffer_init(ns_ipc_ring_buffer_t *ring_buffs, ns_ipc_ringbuff_setup_t setup) {
   3b7c0:	b410      	push	{r4}
   3b7c2:	b085      	sub	sp, #20
   3b7c4:	ac04      	add	r4, sp, #16
   3b7c6:	e904 000e 	stmdb	r4, {r1, r2, r3}
    ring_buffs[setup.indx].ui32BufferHead_read = 0;
   3b7ca:	9b01      	ldr	r3, [sp, #4]
   3b7cc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   3b7d0:	eb00 0283 	add.w	r2, r0, r3, lsl #2
   3b7d4:	2100      	movs	r1, #0
   3b7d6:	6091      	str	r1, [r2, #8]
    ring_buffs[setup.indx].ui32BufferTail_write = 0;
   3b7d8:	6051      	str	r1, [r2, #4]
    ring_buffs[setup.indx].ui32OverWriting = 0;
   3b7da:	60d1      	str	r1, [r2, #12]
    ring_buffs[setup.indx].ui32Capacity = setup.ui32ByteSize;
   3b7dc:	9c03      	ldr	r4, [sp, #12]
    ring_buffs[setup.indx].pui8Data = setup.pData;
   3b7de:	9902      	ldr	r1, [sp, #8]
    ring_buffs[setup.indx].ui32Capacity = setup.ui32ByteSize;
   3b7e0:	6114      	str	r4, [r2, #16]
    ring_buffs[setup.indx].pui8Data = setup.pData;
   3b7e2:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
   3b7e6:	b005      	add	sp, #20
   3b7e8:	f85d 4b04 	ldr.w	r4, [sp], #4
   3b7ec:	4770      	bx	lr
   3b7ee:	bf00      	nop

0003b7f0 <am_hal_rtc_osc_disable>:
   3b7f0:	4a03      	ldr	r2, [pc, #12]	; (3b800 <am_hal_rtc_osc_disable+0x10>)
   3b7f2:	6813      	ldr	r3, [r2, #0]
   3b7f4:	f043 0310 	orr.w	r3, r3, #16
   3b7f8:	2000      	movs	r0, #0
   3b7fa:	6013      	str	r3, [r2, #0]
   3b7fc:	4770      	bx	lr
   3b7fe:	bf00      	nop
   3b800:	40004800 	.word	0x40004800

0003b804 <nonblocking_write_sm>:
   3b804:	b570      	push	{r4, r5, r6, lr}
   3b806:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
   3b80a:	b084      	sub	sp, #16
   3b80c:	4604      	mov	r4, r0
   3b80e:	b963      	cbnz	r3, 3b82a <nonblocking_write_sm+0x26>
   3b810:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   3b814:	2b00      	cmp	r3, #0
   3b816:	d130      	bne.n	3b87a <nonblocking_write_sm+0x76>
   3b818:	6e63      	ldr	r3, [r4, #100]	; 0x64
   3b81a:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   3b81c:	601a      	str	r2, [r3, #0]
   3b81e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   3b820:	6e23      	ldr	r3, [r4, #96]	; 0x60
   3b822:	429a      	cmp	r2, r3
   3b824:	d04e      	beq.n	3b8c4 <nonblocking_write_sm+0xc0>
   3b826:	b004      	add	sp, #16
   3b828:	bd70      	pop	{r4, r5, r6, pc}
   3b82a:	f7f4 facf 	bl	2fdcc <am_hal_interrupt_master_disable>
   3b82e:	e9d4 1517 	ldrd	r1, r5, [r4, #92]	; 0x5c
   3b832:	9002      	str	r0, [sp, #8]
   3b834:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   3b836:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   3b83a:	1aad      	subs	r5, r5, r2
   3b83c:	4411      	add	r1, r2
   3b83e:	2b00      	cmp	r3, #0
   3b840:	d14f      	bne.n	3b8e2 <nonblocking_write_sm+0xde>
   3b842:	6a60      	ldr	r0, [r4, #36]	; 0x24
   3b844:	b17d      	cbz	r5, 3b866 <nonblocking_write_sm+0x62>
   3b846:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
   3b84a:	301c      	adds	r0, #28
   3b84c:	0300      	lsls	r0, r0, #12
   3b84e:	3901      	subs	r1, #1
   3b850:	e005      	b.n	3b85e <nonblocking_write_sm+0x5a>
   3b852:	3301      	adds	r3, #1
   3b854:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   3b858:	6002      	str	r2, [r0, #0]
   3b85a:	429d      	cmp	r5, r3
   3b85c:	d003      	beq.n	3b866 <nonblocking_write_sm+0x62>
   3b85e:	6982      	ldr	r2, [r0, #24]
   3b860:	0696      	lsls	r6, r2, #26
   3b862:	d5f6      	bpl.n	3b852 <nonblocking_write_sm+0x4e>
   3b864:	461d      	mov	r5, r3
   3b866:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   3b868:	442b      	add	r3, r5
   3b86a:	67a3      	str	r3, [r4, #120]	; 0x78
   3b86c:	9802      	ldr	r0, [sp, #8]
   3b86e:	f7f4 fab1 	bl	2fdd4 <am_hal_interrupt_master_set>
   3b872:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   3b876:	2b00      	cmp	r3, #0
   3b878:	d0ce      	beq.n	3b818 <nonblocking_write_sm+0x14>
   3b87a:	6a65      	ldr	r5, [r4, #36]	; 0x24
   3b87c:	f7f4 faa6 	bl	2fdcc <am_hal_interrupt_master_disable>
   3b880:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
   3b884:	351c      	adds	r5, #28
   3b886:	9003      	str	r0, [sp, #12]
   3b888:	032d      	lsls	r5, r5, #12
   3b88a:	f104 0680 	add.w	r6, r4, #128	; 0x80
   3b88e:	e00d      	b.n	3b8ac <nonblocking_write_sm+0xa8>
   3b890:	f000 fc62 	bl	3c158 <am_hal_queue_item_get>
   3b894:	b190      	cbz	r0, 3b8bc <nonblocking_write_sm+0xb8>
   3b896:	6a62      	ldr	r2, [r4, #36]	; 0x24
   3b898:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   3b89c:	321c      	adds	r2, #28
   3b89e:	0312      	lsls	r2, r2, #12
   3b8a0:	6993      	ldr	r3, [r2, #24]
   3b8a2:	0699      	lsls	r1, r3, #26
   3b8a4:	bf5c      	itt	pl
   3b8a6:	f89d 3007 	ldrbpl.w	r3, [sp, #7]
   3b8aa:	6013      	strpl	r3, [r2, #0]
   3b8ac:	69ab      	ldr	r3, [r5, #24]
   3b8ae:	069b      	lsls	r3, r3, #26
   3b8b0:	f04f 0201 	mov.w	r2, #1
   3b8b4:	f10d 0107 	add.w	r1, sp, #7
   3b8b8:	4630      	mov	r0, r6
   3b8ba:	d5e9      	bpl.n	3b890 <nonblocking_write_sm+0x8c>
   3b8bc:	9803      	ldr	r0, [sp, #12]
   3b8be:	f7f4 fa89 	bl	2fdd4 <am_hal_interrupt_master_set>
   3b8c2:	e7a9      	b.n	3b818 <nonblocking_write_sm+0x14>
   3b8c4:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
   3b8c8:	2b00      	cmp	r3, #0
   3b8ca:	d0ac      	beq.n	3b826 <nonblocking_write_sm+0x22>
   3b8cc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   3b8ce:	2000      	movs	r0, #0
   3b8d0:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
   3b8d4:	2b00      	cmp	r3, #0
   3b8d6:	d0a6      	beq.n	3b826 <nonblocking_write_sm+0x22>
   3b8d8:	6f21      	ldr	r1, [r4, #112]	; 0x70
   3b8da:	b004      	add	sp, #16
   3b8dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3b8e0:	4718      	bx	r3
   3b8e2:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   3b8e6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   3b8ea:	1a9b      	subs	r3, r3, r2
   3b8ec:	429d      	cmp	r5, r3
   3b8ee:	bf28      	it	cs
   3b8f0:	461d      	movcs	r5, r3
   3b8f2:	462a      	mov	r2, r5
   3b8f4:	f104 0080 	add.w	r0, r4, #128	; 0x80
   3b8f8:	f000 fbee 	bl	3c0d8 <am_hal_queue_item_add>
   3b8fc:	2800      	cmp	r0, #0
   3b8fe:	d1b2      	bne.n	3b866 <nonblocking_write_sm+0x62>
   3b900:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   3b902:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
   3b906:	2b00      	cmp	r3, #0
   3b908:	d0ad      	beq.n	3b866 <nonblocking_write_sm+0x62>
   3b90a:	6f21      	ldr	r1, [r4, #112]	; 0x70
   3b90c:	2001      	movs	r0, #1
   3b90e:	e7e4      	b.n	3b8da <nonblocking_write_sm+0xd6>

0003b910 <nonblocking_read_sm>:
   3b910:	b530      	push	{r4, r5, lr}
   3b912:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
   3b916:	b08b      	sub	sp, #44	; 0x2c
   3b918:	4604      	mov	r4, r0
   3b91a:	b923      	cbnz	r3, 3b926 <nonblocking_read_sm+0x16>
   3b91c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   3b920:	bb23      	cbnz	r3, 3b96c <nonblocking_read_sm+0x5c>
   3b922:	b00b      	add	sp, #44	; 0x2c
   3b924:	bd30      	pop	{r4, r5, pc}
   3b926:	f7f4 fa51 	bl	2fdcc <am_hal_interrupt_master_disable>
   3b92a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   3b92c:	9001      	str	r0, [sp, #4]
   3b92e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   3b932:	311c      	adds	r1, #28
   3b934:	0309      	lsls	r1, r1, #12
   3b936:	a802      	add	r0, sp, #8
   3b938:	2200      	movs	r2, #0
   3b93a:	698b      	ldr	r3, [r1, #24]
   3b93c:	06dd      	lsls	r5, r3, #27
   3b93e:	d409      	bmi.n	3b954 <nonblocking_read_sm+0x44>
   3b940:	680b      	ldr	r3, [r1, #0]
   3b942:	f413 6f70 	tst.w	r3, #3840	; 0xf00
   3b946:	f102 0201 	add.w	r2, r2, #1
   3b94a:	d108      	bne.n	3b95e <nonblocking_read_sm+0x4e>
   3b94c:	2a20      	cmp	r2, #32
   3b94e:	f800 3b01 	strb.w	r3, [r0], #1
   3b952:	d1f2      	bne.n	3b93a <nonblocking_read_sm+0x2a>
   3b954:	a902      	add	r1, sp, #8
   3b956:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   3b95a:	f000 fbbd 	bl	3c0d8 <am_hal_queue_item_add>
   3b95e:	9801      	ldr	r0, [sp, #4]
   3b960:	f7f4 fa38 	bl	2fdd4 <am_hal_interrupt_master_set>
   3b964:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   3b968:	2b00      	cmp	r3, #0
   3b96a:	d0da      	beq.n	3b922 <nonblocking_read_sm+0x12>
   3b96c:	f7f4 fa2e 	bl	2fdcc <am_hal_interrupt_master_disable>
   3b970:	9002      	str	r0, [sp, #8]
   3b972:	e9d4 100d 	ldrd	r1, r0, [r4, #52]	; 0x34
   3b976:	6d23      	ldr	r3, [r4, #80]	; 0x50
   3b978:	f894 5098 	ldrb.w	r5, [r4, #152]	; 0x98
   3b97c:	1ac0      	subs	r0, r0, r3
   3b97e:	4419      	add	r1, r3
   3b980:	2d00      	cmp	r5, #0
   3b982:	d12c      	bne.n	3b9de <nonblocking_read_sm+0xce>
   3b984:	6a62      	ldr	r2, [r4, #36]	; 0x24
   3b986:	2800      	cmp	r0, #0
   3b988:	d03d      	beq.n	3ba06 <nonblocking_read_sm+0xf6>
   3b98a:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   3b98e:	321c      	adds	r2, #28
   3b990:	0312      	lsls	r2, r2, #12
   3b992:	3901      	subs	r1, #1
   3b994:	e008      	b.n	3b9a8 <nonblocking_read_sm+0x98>
   3b996:	6813      	ldr	r3, [r2, #0]
   3b998:	f413 6f70 	tst.w	r3, #3840	; 0xf00
   3b99c:	d107      	bne.n	3b9ae <nonblocking_read_sm+0x9e>
   3b99e:	3501      	adds	r5, #1
   3b9a0:	42a8      	cmp	r0, r5
   3b9a2:	f801 3f01 	strb.w	r3, [r1, #1]!
   3b9a6:	d002      	beq.n	3b9ae <nonblocking_read_sm+0x9e>
   3b9a8:	6993      	ldr	r3, [r2, #24]
   3b9aa:	06db      	lsls	r3, r3, #27
   3b9ac:	d5f3      	bpl.n	3b996 <nonblocking_read_sm+0x86>
   3b9ae:	6d23      	ldr	r3, [r4, #80]	; 0x50
   3b9b0:	442b      	add	r3, r5
   3b9b2:	6523      	str	r3, [r4, #80]	; 0x50
   3b9b4:	9802      	ldr	r0, [sp, #8]
   3b9b6:	f7f4 fa0d 	bl	2fdd4 <am_hal_interrupt_master_set>
   3b9ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   3b9bc:	6d22      	ldr	r2, [r4, #80]	; 0x50
   3b9be:	601a      	str	r2, [r3, #0]
   3b9c0:	6d22      	ldr	r2, [r4, #80]	; 0x50
   3b9c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   3b9c4:	429a      	cmp	r2, r3
   3b9c6:	d1ac      	bne.n	3b922 <nonblocking_read_sm+0x12>
   3b9c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   3b9ca:	2000      	movs	r0, #0
   3b9cc:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
   3b9d0:	2b00      	cmp	r3, #0
   3b9d2:	d0a6      	beq.n	3b922 <nonblocking_read_sm+0x12>
   3b9d4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   3b9d6:	b00b      	add	sp, #44	; 0x2c
   3b9d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   3b9dc:	4718      	bx	r3
   3b9de:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   3b9e2:	4285      	cmp	r5, r0
   3b9e4:	bf28      	it	cs
   3b9e6:	4605      	movcs	r5, r0
   3b9e8:	462a      	mov	r2, r5
   3b9ea:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   3b9ee:	f000 fbb3 	bl	3c158 <am_hal_queue_item_get>
   3b9f2:	2800      	cmp	r0, #0
   3b9f4:	d1db      	bne.n	3b9ae <nonblocking_read_sm+0x9e>
   3b9f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
   3b9f8:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
   3b9fc:	2b00      	cmp	r3, #0
   3b9fe:	d0d6      	beq.n	3b9ae <nonblocking_read_sm+0x9e>
   3ba00:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   3ba02:	2001      	movs	r0, #1
   3ba04:	e7e7      	b.n	3b9d6 <nonblocking_read_sm+0xc6>
   3ba06:	4605      	mov	r5, r0
   3ba08:	e7d1      	b.n	3b9ae <nonblocking_read_sm+0x9e>
   3ba0a:	bf00      	nop

0003ba0c <am_hal_uart_initialize>:
   3ba0c:	2803      	cmp	r0, #3
   3ba0e:	d82a      	bhi.n	3ba66 <am_hal_uart_initialize+0x5a>
   3ba10:	b369      	cbz	r1, 3ba6e <am_hal_uart_initialize+0x62>
   3ba12:	680b      	ldr	r3, [r1, #0]
   3ba14:	b12b      	cbz	r3, 3ba22 <am_hal_uart_initialize+0x16>
   3ba16:	681b      	ldr	r3, [r3, #0]
   3ba18:	4a16      	ldr	r2, [pc, #88]	; (3ba74 <am_hal_uart_initialize+0x68>)
   3ba1a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   3ba1e:	4293      	cmp	r3, r2
   3ba20:	d023      	beq.n	3ba6a <am_hal_uart_initialize+0x5e>
   3ba22:	b410      	push	{r4}
   3ba24:	22b8      	movs	r2, #184	; 0xb8
   3ba26:	4c14      	ldr	r4, [pc, #80]	; (3ba78 <am_hal_uart_initialize+0x6c>)
   3ba28:	fb00 f202 	mul.w	r2, r0, r2
   3ba2c:	18a3      	adds	r3, r4, r2
   3ba2e:	6258      	str	r0, [r3, #36]	; 0x24
   3ba30:	58a0      	ldr	r0, [r4, r2]
   3ba32:	f000 4c7e 	and.w	ip, r0, #4261412864	; 0xfe000000
   3ba36:	480f      	ldr	r0, [pc, #60]	; (3ba74 <am_hal_uart_initialize+0x68>)
   3ba38:	ea4c 0000 	orr.w	r0, ip, r0
   3ba3c:	50a0      	str	r0, [r4, r2]
   3ba3e:	2000      	movs	r0, #0
   3ba40:	2201      	movs	r2, #1
   3ba42:	6798      	str	r0, [r3, #120]	; 0x78
   3ba44:	7118      	strb	r0, [r3, #4]
   3ba46:	6518      	str	r0, [r3, #80]	; 0x50
   3ba48:	6298      	str	r0, [r3, #40]	; 0x28
   3ba4a:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c
   3ba4e:	f883 0054 	strb.w	r0, [r3, #84]	; 0x54
   3ba52:	f883 007c 	strb.w	r0, [r3, #124]	; 0x7c
   3ba56:	f883 0098 	strb.w	r0, [r3, #152]	; 0x98
   3ba5a:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
   3ba5e:	f85d 4b04 	ldr.w	r4, [sp], #4
   3ba62:	600b      	str	r3, [r1, #0]
   3ba64:	4770      	bx	lr
   3ba66:	2005      	movs	r0, #5
   3ba68:	4770      	bx	lr
   3ba6a:	2007      	movs	r0, #7
   3ba6c:	4770      	bx	lr
   3ba6e:	2006      	movs	r0, #6
   3ba70:	4770      	bx	lr
   3ba72:	bf00      	nop
   3ba74:	01ea9e06 	.word	0x01ea9e06
   3ba78:	1001a678 	.word	0x1001a678

0003ba7c <am_hal_uart_deinitialize>:
   3ba7c:	b168      	cbz	r0, 3ba9a <am_hal_uart_deinitialize+0x1e>
   3ba7e:	6802      	ldr	r2, [r0, #0]
   3ba80:	4b07      	ldr	r3, [pc, #28]	; (3baa0 <am_hal_uart_deinitialize+0x24>)
   3ba82:	f022 417e 	bic.w	r1, r2, #4261412864	; 0xfe000000
   3ba86:	4299      	cmp	r1, r3
   3ba88:	d107      	bne.n	3ba9a <am_hal_uart_deinitialize+0x1e>
   3ba8a:	2300      	movs	r3, #0
   3ba8c:	f002 427e 	and.w	r2, r2, #4261412864	; 0xfe000000
   3ba90:	6243      	str	r3, [r0, #36]	; 0x24
   3ba92:	6002      	str	r2, [r0, #0]
   3ba94:	7103      	strb	r3, [r0, #4]
   3ba96:	4618      	mov	r0, r3
   3ba98:	4770      	bx	lr
   3ba9a:	2002      	movs	r0, #2
   3ba9c:	4770      	bx	lr
   3ba9e:	bf00      	nop
   3baa0:	01ea9e06 	.word	0x01ea9e06

0003baa4 <am_hal_uart_power_control>:
   3baa4:	b530      	push	{r4, r5, lr}
   3baa6:	4604      	mov	r4, r0
   3baa8:	482b      	ldr	r0, [pc, #172]	; (3bb58 <am_hal_uart_power_control+0xb4>)
   3baaa:	6823      	ldr	r3, [r4, #0]
   3baac:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   3bab0:	4283      	cmp	r3, r0
   3bab2:	b083      	sub	sp, #12
   3bab4:	d145      	bne.n	3bb42 <am_hal_uart_power_control+0x9e>
   3bab6:	6a65      	ldr	r5, [r4, #36]	; 0x24
   3bab8:	f105 0009 	add.w	r0, r5, #9
   3babc:	b2c0      	uxtb	r0, r0
   3babe:	b309      	cbz	r1, 3bb04 <am_hal_uart_power_control+0x60>
   3bac0:	3901      	subs	r1, #1
   3bac2:	2901      	cmp	r1, #1
   3bac4:	d83a      	bhi.n	3bb3c <am_hal_uart_power_control+0x98>
   3bac6:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
   3baca:	351c      	adds	r5, #28
   3bacc:	032d      	lsls	r5, r5, #12
   3bace:	b17a      	cbz	r2, 3baf0 <am_hal_uart_power_control+0x4c>
   3bad0:	6a2a      	ldr	r2, [r5, #32]
   3bad2:	60a2      	str	r2, [r4, #8]
   3bad4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   3bad6:	60e2      	str	r2, [r4, #12]
   3bad8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   3bada:	6122      	str	r2, [r4, #16]
   3badc:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   3bade:	6162      	str	r2, [r4, #20]
   3bae0:	6b2a      	ldr	r2, [r5, #48]	; 0x30
   3bae2:	61a2      	str	r2, [r4, #24]
   3bae4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   3bae6:	61e2      	str	r2, [r4, #28]
   3bae8:	2301      	movs	r3, #1
   3baea:	6baa      	ldr	r2, [r5, #56]	; 0x38
   3baec:	6222      	str	r2, [r4, #32]
   3baee:	7123      	strb	r3, [r4, #4]
   3baf0:	2400      	movs	r4, #0
   3baf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3baf6:	646b      	str	r3, [r5, #68]	; 0x44
   3baf8:	632c      	str	r4, [r5, #48]	; 0x30
   3bafa:	f7f6 fd99 	bl	32630 <am_hal_pwrctrl_periph_disable>
   3bafe:	4620      	mov	r0, r4
   3bb00:	b003      	add	sp, #12
   3bb02:	bd30      	pop	{r4, r5, pc}
   3bb04:	b302      	cbz	r2, 3bb48 <am_hal_uart_power_control+0xa4>
   3bb06:	7923      	ldrb	r3, [r4, #4]
   3bb08:	b323      	cbz	r3, 3bb54 <am_hal_uart_power_control+0xb0>
   3bb0a:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
   3bb0e:	9101      	str	r1, [sp, #4]
   3bb10:	351c      	adds	r5, #28
   3bb12:	f7f6 fcbd 	bl	32490 <am_hal_pwrctrl_periph_enable>
   3bb16:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   3bb1a:	032d      	lsls	r5, r5, #12
   3bb1c:	9901      	ldr	r1, [sp, #4]
   3bb1e:	622a      	str	r2, [r5, #32]
   3bb20:	626b      	str	r3, [r5, #36]	; 0x24
   3bb22:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   3bb26:	62aa      	str	r2, [r5, #40]	; 0x28
   3bb28:	62eb      	str	r3, [r5, #44]	; 0x2c
   3bb2a:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   3bb2e:	632a      	str	r2, [r5, #48]	; 0x30
   3bb30:	636b      	str	r3, [r5, #52]	; 0x34
   3bb32:	6a23      	ldr	r3, [r4, #32]
   3bb34:	63ab      	str	r3, [r5, #56]	; 0x38
   3bb36:	4608      	mov	r0, r1
   3bb38:	7121      	strb	r1, [r4, #4]
   3bb3a:	e000      	b.n	3bb3e <am_hal_uart_power_control+0x9a>
   3bb3c:	2006      	movs	r0, #6
   3bb3e:	b003      	add	sp, #12
   3bb40:	bd30      	pop	{r4, r5, pc}
   3bb42:	2002      	movs	r0, #2
   3bb44:	b003      	add	sp, #12
   3bb46:	bd30      	pop	{r4, r5, pc}
   3bb48:	9201      	str	r2, [sp, #4]
   3bb4a:	f7f6 fca1 	bl	32490 <am_hal_pwrctrl_periph_enable>
   3bb4e:	9a01      	ldr	r2, [sp, #4]
   3bb50:	4610      	mov	r0, r2
   3bb52:	e7f4      	b.n	3bb3e <am_hal_uart_power_control+0x9a>
   3bb54:	2007      	movs	r0, #7
   3bb56:	e7f2      	b.n	3bb3e <am_hal_uart_power_control+0x9a>
   3bb58:	01ea9e06 	.word	0x01ea9e06

0003bb5c <am_hal_uart_configure>:
   3bb5c:	6803      	ldr	r3, [r0, #0]
   3bb5e:	4a50      	ldr	r2, [pc, #320]	; (3bca0 <am_hal_uart_configure+0x144>)
   3bb60:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   3bb64:	4293      	cmp	r3, r2
   3bb66:	b470      	push	{r4, r5, r6}
   3bb68:	f040 808f 	bne.w	3bc8a <am_hal_uart_configure+0x12e>
   3bb6c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   3bb6e:	4d4d      	ldr	r5, [pc, #308]	; (3bca4 <am_hal_uart_configure+0x148>)
   3bb70:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   3bb74:	331c      	adds	r3, #28
   3bb76:	031b      	lsls	r3, r3, #12
   3bb78:	2200      	movs	r2, #0
   3bb7a:	631a      	str	r2, [r3, #48]	; 0x30
   3bb7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   3bb7e:	f042 0208 	orr.w	r2, r2, #8
   3bb82:	631a      	str	r2, [r3, #48]	; 0x30
   3bb84:	680c      	ldr	r4, [r1, #0]
   3bb86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   3bb88:	42ac      	cmp	r4, r5
   3bb8a:	bf8c      	ite	hi
   3bb8c:	2505      	movhi	r5, #5
   3bb8e:	2501      	movls	r5, #1
   3bb90:	f365 1206 	bfi	r2, r5, #4, #3
   3bb94:	631a      	str	r2, [r3, #48]	; 0x30
   3bb96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   3bb98:	f36f 0200 	bfc	r2, #0, #1
   3bb9c:	631a      	str	r2, [r3, #48]	; 0x30
   3bb9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   3bba0:	f36f 2249 	bfc	r2, #9, #1
   3bba4:	631a      	str	r2, [r3, #48]	; 0x30
   3bba6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   3bba8:	f36f 2208 	bfc	r2, #8, #1
   3bbac:	631a      	str	r2, [r3, #48]	; 0x30
   3bbae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   3bbb0:	f3c2 1202 	ubfx	r2, r2, #4, #3
   3bbb4:	3a01      	subs	r2, #1
   3bbb6:	b2d2      	uxtb	r2, r2
   3bbb8:	2a04      	cmp	r2, #4
   3bbba:	d860      	bhi.n	3bc7e <am_hal_uart_configure+0x122>
   3bbbc:	4d3a      	ldr	r5, [pc, #232]	; (3bca8 <am_hal_uart_configure+0x14c>)
   3bbbe:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
   3bbc2:	0124      	lsls	r4, r4, #4
   3bbc4:	42a5      	cmp	r5, r4
   3bbc6:	ea4f 1285 	mov.w	r2, r5, lsl #6
   3bbca:	fbb5 f6f4 	udiv	r6, r5, r4
   3bbce:	fbb2 f2f4 	udiv	r2, r2, r4
   3bbd2:	eba2 1286 	sub.w	r2, r2, r6, lsl #6
   3bbd6:	d35e      	bcc.n	3bc96 <am_hal_uart_configure+0x13a>
   3bbd8:	625e      	str	r6, [r3, #36]	; 0x24
   3bbda:	629a      	str	r2, [r3, #40]	; 0x28
   3bbdc:	0892      	lsrs	r2, r2, #2
   3bbde:	eb02 1206 	add.w	r2, r2, r6, lsl #4
   3bbe2:	fbb5 f2f2 	udiv	r2, r5, r2
   3bbe6:	6282      	str	r2, [r0, #40]	; 0x28
   3bbe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   3bbea:	f36f 328e 	bfc	r2, #14, #1
   3bbee:	631a      	str	r2, [r3, #48]	; 0x30
   3bbf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   3bbf2:	f36f 32cf 	bfc	r2, #15, #1
   3bbf6:	631a      	str	r2, [r3, #48]	; 0x30
   3bbf8:	6b18      	ldr	r0, [r3, #48]	; 0x30
   3bbfa:	890a      	ldrh	r2, [r1, #8]
   3bbfc:	4302      	orrs	r2, r0
   3bbfe:	631a      	str	r2, [r3, #48]	; 0x30
   3bc00:	794a      	ldrb	r2, [r1, #5]
   3bc02:	2a00      	cmp	r2, #0
   3bc04:	d045      	beq.n	3bc92 <am_hal_uart_configure+0x136>
   3bc06:	2a01      	cmp	r2, #1
   3bc08:	d000      	beq.n	3bc0c <am_hal_uart_configure+0xb0>
   3bc0a:	2200      	movs	r2, #0
   3bc0c:	4614      	mov	r4, r2
   3bc0e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   3bc10:	f36f 0000 	bfc	r0, #0, #1
   3bc14:	62d8      	str	r0, [r3, #44]	; 0x2c
   3bc16:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   3bc18:	f364 0041 	bfi	r0, r4, #1, #1
   3bc1c:	62d8      	str	r0, [r3, #44]	; 0x2c
   3bc1e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   3bc20:	f362 0082 	bfi	r0, r2, #2, #1
   3bc24:	62d8      	str	r0, [r3, #44]	; 0x2c
   3bc26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   3bc28:	7988      	ldrb	r0, [r1, #6]
   3bc2a:	f360 02c3 	bfi	r2, r0, #3, #1
   3bc2e:	62da      	str	r2, [r3, #44]	; 0x2c
   3bc30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   3bc32:	f042 0210 	orr.w	r2, r2, #16
   3bc36:	62da      	str	r2, [r3, #44]	; 0x2c
   3bc38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   3bc3a:	7908      	ldrb	r0, [r1, #4]
   3bc3c:	f360 1246 	bfi	r2, r0, #5, #2
   3bc40:	62da      	str	r2, [r3, #44]	; 0x2c
   3bc42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   3bc44:	f36f 12c7 	bfc	r2, #7, #1
   3bc48:	62da      	str	r2, [r3, #44]	; 0x2c
   3bc4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   3bc4c:	7a88      	ldrb	r0, [r1, #10]
   3bc4e:	f360 0202 	bfi	r2, r0, #0, #3
   3bc52:	635a      	str	r2, [r3, #52]	; 0x34
   3bc54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   3bc56:	7ac9      	ldrb	r1, [r1, #11]
   3bc58:	f361 02c5 	bfi	r2, r1, #3, #3
   3bc5c:	635a      	str	r2, [r3, #52]	; 0x34
   3bc5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   3bc60:	f042 0201 	orr.w	r2, r2, #1
   3bc64:	631a      	str	r2, [r3, #48]	; 0x30
   3bc66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   3bc68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   3bc6c:	631a      	str	r2, [r3, #48]	; 0x30
   3bc6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   3bc70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   3bc74:	2400      	movs	r4, #0
   3bc76:	631a      	str	r2, [r3, #48]	; 0x30
   3bc78:	4620      	mov	r0, r4
   3bc7a:	bc70      	pop	{r4, r5, r6}
   3bc7c:	4770      	bx	lr
   3bc7e:	2300      	movs	r3, #0
   3bc80:	4c0a      	ldr	r4, [pc, #40]	; (3bcac <am_hal_uart_configure+0x150>)
   3bc82:	6283      	str	r3, [r0, #40]	; 0x28
   3bc84:	4620      	mov	r0, r4
   3bc86:	bc70      	pop	{r4, r5, r6}
   3bc88:	4770      	bx	lr
   3bc8a:	2402      	movs	r4, #2
   3bc8c:	4620      	mov	r0, r4
   3bc8e:	bc70      	pop	{r4, r5, r6}
   3bc90:	4770      	bx	lr
   3bc92:	2401      	movs	r4, #1
   3bc94:	e7bb      	b.n	3bc0e <am_hal_uart_configure+0xb2>
   3bc96:	2300      	movs	r3, #0
   3bc98:	4c05      	ldr	r4, [pc, #20]	; (3bcb0 <am_hal_uart_configure+0x154>)
   3bc9a:	6283      	str	r3, [r0, #40]	; 0x28
   3bc9c:	e7f2      	b.n	3bc84 <am_hal_uart_configure+0x128>
   3bc9e:	bf00      	nop
   3bca0:	01ea9e06 	.word	0x01ea9e06
   3bca4:	0016e360 	.word	0x0016e360
   3bca8:	000442d4 	.word	0x000442d4
   3bcac:	08000002 	.word	0x08000002
   3bcb0:	08000003 	.word	0x08000003

0003bcb4 <am_hal_uart_transfer>:
   3bcb4:	b570      	push	{r4, r5, r6, lr}
   3bcb6:	780b      	ldrb	r3, [r1, #0]
   3bcb8:	b084      	sub	sp, #16
   3bcba:	460d      	mov	r5, r1
   3bcbc:	4604      	mov	r4, r0
   3bcbe:	2b03      	cmp	r3, #3
   3bcc0:	f200 8115 	bhi.w	3beee <am_hal_uart_transfer+0x23a>
   3bcc4:	e8df f003 	tbb	[pc, r3]
   3bcc8:	0235b26a 	.word	0x0235b26a
   3bccc:	2800      	cmp	r0, #0
   3bcce:	f000 80f2 	beq.w	3beb6 <am_hal_uart_transfer+0x202>
   3bcd2:	6803      	ldr	r3, [r0, #0]
   3bcd4:	4a87      	ldr	r2, [pc, #540]	; (3bef4 <am_hal_uart_transfer+0x240>)
   3bcd6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   3bcda:	4293      	cmp	r3, r2
   3bcdc:	f040 80eb 	bne.w	3beb6 <am_hal_uart_transfer+0x202>
   3bce0:	68cb      	ldr	r3, [r1, #12]
   3bce2:	b10b      	cbz	r3, 3bce8 <am_hal_uart_transfer+0x34>
   3bce4:	2200      	movs	r2, #0
   3bce6:	601a      	str	r2, [r3, #0]
   3bce8:	f7f4 f870 	bl	2fdcc <am_hal_interrupt_master_disable>
   3bcec:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
   3bcf0:	9003      	str	r0, [sp, #12]
   3bcf2:	2e00      	cmp	r6, #0
   3bcf4:	f040 80f1 	bne.w	3beda <am_hal_uart_transfer+0x226>
   3bcf8:	2301      	movs	r3, #1
   3bcfa:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
   3bcfe:	782b      	ldrb	r3, [r5, #0]
   3bd00:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   3bd04:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
   3bd08:	e9c4 230d 	strd	r2, r3, [r4, #52]	; 0x34
   3bd0c:	e9d5 2303 	ldrd	r2, r3, [r5, #12]
   3bd10:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
   3bd14:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   3bd18:	69eb      	ldr	r3, [r5, #28]
   3bd1a:	6526      	str	r6, [r4, #80]	; 0x50
   3bd1c:	e9c4 1211 	strd	r1, r2, [r4, #68]	; 0x44
   3bd20:	9803      	ldr	r0, [sp, #12]
   3bd22:	64e3      	str	r3, [r4, #76]	; 0x4c
   3bd24:	f7f4 f856 	bl	2fdd4 <am_hal_interrupt_master_set>
   3bd28:	4620      	mov	r0, r4
   3bd2a:	f7ff fdf1 	bl	3b910 <nonblocking_read_sm>
   3bd2e:	4630      	mov	r0, r6
   3bd30:	e0c2      	b.n	3beb8 <am_hal_uart_transfer+0x204>
   3bd32:	2800      	cmp	r0, #0
   3bd34:	f000 80bf 	beq.w	3beb6 <am_hal_uart_transfer+0x202>
   3bd38:	6803      	ldr	r3, [r0, #0]
   3bd3a:	4a6e      	ldr	r2, [pc, #440]	; (3bef4 <am_hal_uart_transfer+0x240>)
   3bd3c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   3bd40:	4293      	cmp	r3, r2
   3bd42:	f040 80b8 	bne.w	3beb6 <am_hal_uart_transfer+0x202>
   3bd46:	68cb      	ldr	r3, [r1, #12]
   3bd48:	b10b      	cbz	r3, 3bd4e <am_hal_uart_transfer+0x9a>
   3bd4a:	2200      	movs	r2, #0
   3bd4c:	601a      	str	r2, [r3, #0]
   3bd4e:	f7f4 f83d 	bl	2fdcc <am_hal_interrupt_master_disable>
   3bd52:	f894 6054 	ldrb.w	r6, [r4, #84]	; 0x54
   3bd56:	9002      	str	r0, [sp, #8]
   3bd58:	2e00      	cmp	r6, #0
   3bd5a:	f040 80c3 	bne.w	3bee4 <am_hal_uart_transfer+0x230>
   3bd5e:	2301      	movs	r3, #1
   3bd60:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   3bd64:	782b      	ldrb	r3, [r5, #0]
   3bd66:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
   3bd6a:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
   3bd6e:	e9c4 2317 	strd	r2, r3, [r4, #92]	; 0x5c
   3bd72:	e9d5 2303 	ldrd	r2, r3, [r5, #12]
   3bd76:	e9c4 2319 	strd	r2, r3, [r4, #100]	; 0x64
   3bd7a:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   3bd7e:	69eb      	ldr	r3, [r5, #28]
   3bd80:	67a6      	str	r6, [r4, #120]	; 0x78
   3bd82:	f884 60b4 	strb.w	r6, [r4, #180]	; 0xb4
   3bd86:	e9c4 121b 	strd	r1, r2, [r4, #108]	; 0x6c
   3bd8a:	9802      	ldr	r0, [sp, #8]
   3bd8c:	6763      	str	r3, [r4, #116]	; 0x74
   3bd8e:	f7f4 f821 	bl	2fdd4 <am_hal_interrupt_master_set>
   3bd92:	4620      	mov	r0, r4
   3bd94:	f7ff fd36 	bl	3b804 <nonblocking_write_sm>
   3bd98:	4630      	mov	r0, r6
   3bd9a:	e08d      	b.n	3beb8 <am_hal_uart_transfer+0x204>
   3bd9c:	2800      	cmp	r0, #0
   3bd9e:	f000 808a 	beq.w	3beb6 <am_hal_uart_transfer+0x202>
   3bda2:	6803      	ldr	r3, [r0, #0]
   3bda4:	4a53      	ldr	r2, [pc, #332]	; (3bef4 <am_hal_uart_transfer+0x240>)
   3bda6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   3bdaa:	4293      	cmp	r3, r2
   3bdac:	f040 8083 	bne.w	3beb6 <am_hal_uart_transfer+0x202>
   3bdb0:	68cb      	ldr	r3, [r1, #12]
   3bdb2:	b10b      	cbz	r3, 3bdb8 <am_hal_uart_transfer+0x104>
   3bdb4:	2200      	movs	r2, #0
   3bdb6:	601a      	str	r2, [r3, #0]
   3bdb8:	f7f4 f808 	bl	2fdcc <am_hal_interrupt_master_disable>
   3bdbc:	f894 6054 	ldrb.w	r6, [r4, #84]	; 0x54
   3bdc0:	9000      	str	r0, [sp, #0]
   3bdc2:	2e00      	cmp	r6, #0
   3bdc4:	d17a      	bne.n	3bebc <am_hal_uart_transfer+0x208>
   3bdc6:	2301      	movs	r3, #1
   3bdc8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   3bdcc:	782b      	ldrb	r3, [r5, #0]
   3bdce:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
   3bdd2:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
   3bdd6:	e9c4 2317 	strd	r2, r3, [r4, #92]	; 0x5c
   3bdda:	e9d5 2303 	ldrd	r2, r3, [r5, #12]
   3bdde:	e9c4 2319 	strd	r2, r3, [r4, #100]	; 0x64
   3bde2:	e9d5 2305 	ldrd	r2, r3, [r5, #20]
   3bde6:	e9c4 231b 	strd	r2, r3, [r4, #108]	; 0x6c
   3bdea:	69eb      	ldr	r3, [r5, #28]
   3bdec:	67a6      	str	r6, [r4, #120]	; 0x78
   3bdee:	f884 60b4 	strb.w	r6, [r4, #180]	; 0xb4
   3bdf2:	9800      	ldr	r0, [sp, #0]
   3bdf4:	6763      	str	r3, [r4, #116]	; 0x74
   3bdf6:	f7f3 ffed 	bl	2fdd4 <am_hal_interrupt_master_set>
   3bdfa:	4620      	mov	r0, r4
   3bdfc:	f7ff fd02 	bl	3b804 <nonblocking_write_sm>
   3be00:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
   3be04:	2b00      	cmp	r3, #0
   3be06:	d053      	beq.n	3beb0 <am_hal_uart_transfer+0x1fc>
   3be08:	4620      	mov	r0, r4
   3be0a:	f7ff fcfb 	bl	3b804 <nonblocking_write_sm>
   3be0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   3be12:	f7f4 fb03 	bl	3041c <am_hal_delay_us>
   3be16:	692b      	ldr	r3, [r5, #16]
   3be18:	1c59      	adds	r1, r3, #1
   3be1a:	d0f1      	beq.n	3be00 <am_hal_uart_transfer+0x14c>
   3be1c:	3601      	adds	r6, #1
   3be1e:	42b3      	cmp	r3, r6
   3be20:	d1ee      	bne.n	3be00 <am_hal_uart_transfer+0x14c>
   3be22:	2300      	movs	r3, #0
   3be24:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   3be28:	2004      	movs	r0, #4
   3be2a:	e045      	b.n	3beb8 <am_hal_uart_transfer+0x204>
   3be2c:	2800      	cmp	r0, #0
   3be2e:	d042      	beq.n	3beb6 <am_hal_uart_transfer+0x202>
   3be30:	6803      	ldr	r3, [r0, #0]
   3be32:	4a30      	ldr	r2, [pc, #192]	; (3bef4 <am_hal_uart_transfer+0x240>)
   3be34:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   3be38:	4293      	cmp	r3, r2
   3be3a:	d13c      	bne.n	3beb6 <am_hal_uart_transfer+0x202>
   3be3c:	68cb      	ldr	r3, [r1, #12]
   3be3e:	b10b      	cbz	r3, 3be44 <am_hal_uart_transfer+0x190>
   3be40:	2200      	movs	r2, #0
   3be42:	601a      	str	r2, [r3, #0]
   3be44:	f7f3 ffc2 	bl	2fdcc <am_hal_interrupt_master_disable>
   3be48:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
   3be4c:	9001      	str	r0, [sp, #4]
   3be4e:	2e00      	cmp	r6, #0
   3be50:	d13e      	bne.n	3bed0 <am_hal_uart_transfer+0x21c>
   3be52:	2301      	movs	r3, #1
   3be54:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
   3be58:	782b      	ldrb	r3, [r5, #0]
   3be5a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   3be5e:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
   3be62:	e9c4 230d 	strd	r2, r3, [r4, #52]	; 0x34
   3be66:	e9d5 2303 	ldrd	r2, r3, [r5, #12]
   3be6a:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
   3be6e:	e9d5 2305 	ldrd	r2, r3, [r5, #20]
   3be72:	e9c4 2311 	strd	r2, r3, [r4, #68]	; 0x44
   3be76:	69eb      	ldr	r3, [r5, #28]
   3be78:	6526      	str	r6, [r4, #80]	; 0x50
   3be7a:	64e3      	str	r3, [r4, #76]	; 0x4c
   3be7c:	9801      	ldr	r0, [sp, #4]
   3be7e:	f7f3 ffa9 	bl	2fdd4 <am_hal_interrupt_master_set>
   3be82:	4620      	mov	r0, r4
   3be84:	f7ff fd44 	bl	3b910 <nonblocking_read_sm>
   3be88:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   3be8c:	b183      	cbz	r3, 3beb0 <am_hal_uart_transfer+0x1fc>
   3be8e:	4620      	mov	r0, r4
   3be90:	f7ff fd3e 	bl	3b910 <nonblocking_read_sm>
   3be94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   3be98:	f7f4 fac0 	bl	3041c <am_hal_delay_us>
   3be9c:	692b      	ldr	r3, [r5, #16]
   3be9e:	1c5a      	adds	r2, r3, #1
   3bea0:	d002      	beq.n	3bea8 <am_hal_uart_transfer+0x1f4>
   3bea2:	3601      	adds	r6, #1
   3bea4:	42b3      	cmp	r3, r6
   3bea6:	d00e      	beq.n	3bec6 <am_hal_uart_transfer+0x212>
   3bea8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   3beac:	2b00      	cmp	r3, #0
   3beae:	d1ee      	bne.n	3be8e <am_hal_uart_transfer+0x1da>
   3beb0:	2000      	movs	r0, #0
   3beb2:	b004      	add	sp, #16
   3beb4:	bd70      	pop	{r4, r5, r6, pc}
   3beb6:	2002      	movs	r0, #2
   3beb8:	b004      	add	sp, #16
   3beba:	bd70      	pop	{r4, r5, r6, pc}
   3bebc:	9800      	ldr	r0, [sp, #0]
   3bebe:	f7f3 ff89 	bl	2fdd4 <am_hal_interrupt_master_set>
   3bec2:	480d      	ldr	r0, [pc, #52]	; (3bef8 <am_hal_uart_transfer+0x244>)
   3bec4:	e7f8      	b.n	3beb8 <am_hal_uart_transfer+0x204>
   3bec6:	2300      	movs	r3, #0
   3bec8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
   3becc:	2004      	movs	r0, #4
   3bece:	e7f3      	b.n	3beb8 <am_hal_uart_transfer+0x204>
   3bed0:	9801      	ldr	r0, [sp, #4]
   3bed2:	f7f3 ff7f 	bl	2fdd4 <am_hal_interrupt_master_set>
   3bed6:	4809      	ldr	r0, [pc, #36]	; (3befc <am_hal_uart_transfer+0x248>)
   3bed8:	e7ee      	b.n	3beb8 <am_hal_uart_transfer+0x204>
   3beda:	9803      	ldr	r0, [sp, #12]
   3bedc:	f7f3 ff7a 	bl	2fdd4 <am_hal_interrupt_master_set>
   3bee0:	4806      	ldr	r0, [pc, #24]	; (3befc <am_hal_uart_transfer+0x248>)
   3bee2:	e7e9      	b.n	3beb8 <am_hal_uart_transfer+0x204>
   3bee4:	9802      	ldr	r0, [sp, #8]
   3bee6:	f7f3 ff75 	bl	2fdd4 <am_hal_interrupt_master_set>
   3beea:	4803      	ldr	r0, [pc, #12]	; (3bef8 <am_hal_uart_transfer+0x244>)
   3beec:	e7e4      	b.n	3beb8 <am_hal_uart_transfer+0x204>
   3beee:	2001      	movs	r0, #1
   3bef0:	e7e2      	b.n	3beb8 <am_hal_uart_transfer+0x204>
   3bef2:	bf00      	nop
   3bef4:	01ea9e06 	.word	0x01ea9e06
   3bef8:	08000004 	.word	0x08000004
   3befc:	08000005 	.word	0x08000005

0003bf00 <am_hal_uart_tx_flush>:
   3bf00:	f890 30b4 	ldrb.w	r3, [r0, #180]	; 0xb4
   3bf04:	2b00      	cmp	r3, #0
   3bf06:	d142      	bne.n	3bf8e <am_hal_uart_tx_flush+0x8e>
   3bf08:	b570      	push	{r4, r5, r6, lr}
   3bf0a:	6a45      	ldr	r5, [r0, #36]	; 0x24
   3bf0c:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
   3bf10:	351c      	adds	r5, #28
   3bf12:	032d      	lsls	r5, r5, #12
   3bf14:	4604      	mov	r4, r0
   3bf16:	6bab      	ldr	r3, [r5, #56]	; 0x38
   3bf18:	07d9      	lsls	r1, r3, #31
   3bf1a:	d512      	bpl.n	3bf42 <am_hal_uart_tx_flush+0x42>
   3bf1c:	f890 30b4 	ldrb.w	r3, [r0, #180]	; 0xb4
   3bf20:	b96b      	cbnz	r3, 3bf3e <am_hal_uart_tx_flush+0x3e>
   3bf22:	4d1c      	ldr	r5, [pc, #112]	; (3bf94 <am_hal_uart_tx_flush+0x94>)
   3bf24:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   3bf26:	fbb5 f3f3 	udiv	r3, r5, r3
   3bf2a:	3301      	adds	r3, #1
   3bf2c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   3bf30:	0058      	lsls	r0, r3, #1
   3bf32:	f7f4 fa73 	bl	3041c <am_hal_delay_us>
   3bf36:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
   3bf3a:	2b00      	cmp	r3, #0
   3bf3c:	d0f2      	beq.n	3bf24 <am_hal_uart_tx_flush+0x24>
   3bf3e:	2000      	movs	r0, #0
   3bf40:	bd70      	pop	{r4, r5, r6, pc}
   3bf42:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
   3bf46:	b183      	cbz	r3, 3bf6a <am_hal_uart_tx_flush+0x6a>
   3bf48:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   3bf4c:	b16b      	cbz	r3, 3bf6a <am_hal_uart_tx_flush+0x6a>
   3bf4e:	4e11      	ldr	r6, [pc, #68]	; (3bf94 <am_hal_uart_tx_flush+0x94>)
   3bf50:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   3bf52:	fbb6 f0f0 	udiv	r0, r6, r0
   3bf56:	3001      	adds	r0, #1
   3bf58:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   3bf5c:	0040      	lsls	r0, r0, #1
   3bf5e:	f7f4 fa5d 	bl	3041c <am_hal_delay_us>
   3bf62:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   3bf66:	2b00      	cmp	r3, #0
   3bf68:	d1f2      	bne.n	3bf50 <am_hal_uart_tx_flush+0x50>
   3bf6a:	69ab      	ldr	r3, [r5, #24]
   3bf6c:	071a      	lsls	r2, r3, #28
   3bf6e:	d5e6      	bpl.n	3bf3e <am_hal_uart_tx_flush+0x3e>
   3bf70:	4e08      	ldr	r6, [pc, #32]	; (3bf94 <am_hal_uart_tx_flush+0x94>)
   3bf72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   3bf74:	fbb6 f3f3 	udiv	r3, r6, r3
   3bf78:	3301      	adds	r3, #1
   3bf7a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   3bf7e:	0058      	lsls	r0, r3, #1
   3bf80:	f7f4 fa4c 	bl	3041c <am_hal_delay_us>
   3bf84:	69ab      	ldr	r3, [r5, #24]
   3bf86:	071b      	lsls	r3, r3, #28
   3bf88:	d4f3      	bmi.n	3bf72 <am_hal_uart_tx_flush+0x72>
   3bf8a:	2000      	movs	r0, #0
   3bf8c:	bd70      	pop	{r4, r5, r6, pc}
   3bf8e:	2000      	movs	r0, #0
   3bf90:	4770      	bx	lr
   3bf92:	bf00      	nop
   3bf94:	000f4240 	.word	0x000f4240

0003bf98 <am_hal_dcu_get>:
   3bf98:	4b1f      	ldr	r3, [pc, #124]	; (3c018 <am_hal_dcu_get+0x80>)
   3bf9a:	689b      	ldr	r3, [r3, #8]
   3bf9c:	02da      	lsls	r2, r3, #11
   3bf9e:	d538      	bpl.n	3c012 <am_hal_dcu_get+0x7a>
   3bfa0:	4b1e      	ldr	r3, [pc, #120]	; (3c01c <am_hal_dcu_get+0x84>)
   3bfa2:	f8d3 3a7c 	ldr.w	r3, [r3, #2684]	; 0xa7c
   3bfa6:	07db      	lsls	r3, r3, #31
   3bfa8:	d533      	bpl.n	3c012 <am_hal_dcu_get+0x7a>
   3bfaa:	b510      	push	{r4, lr}
   3bfac:	4b1c      	ldr	r3, [pc, #112]	; (3c020 <am_hal_dcu_get+0x88>)
   3bfae:	4a1d      	ldr	r2, [pc, #116]	; (3c024 <am_hal_dcu_get+0x8c>)
   3bfb0:	681b      	ldr	r3, [r3, #0]
   3bfb2:	6814      	ldr	r4, [r2, #0]
   3bfb4:	685a      	ldr	r2, [r3, #4]
   3bfb6:	b082      	sub	sp, #8
   3bfb8:	f04f 0e01 	mov.w	lr, #1
   3bfbc:	9201      	str	r2, [sp, #4]
   3bfbe:	681b      	ldr	r3, [r3, #0]
   3bfc0:	9300      	str	r3, [sp, #0]
   3bfc2:	e9dd 3100 	ldrd	r3, r1, [sp]
   3bfc6:	f1c4 0220 	rsb	r2, r4, #32
   3bfca:	fa01 f202 	lsl.w	r2, r1, r2
   3bfce:	40e3      	lsrs	r3, r4
   3bfd0:	4313      	orrs	r3, r2
   3bfd2:	f1a4 0220 	sub.w	r2, r4, #32
   3bfd6:	fa21 f202 	lsr.w	r2, r1, r2
   3bfda:	4313      	orrs	r3, r2
   3bfdc:	2200      	movs	r2, #0
   3bfde:	40e1      	lsrs	r1, r4
   3bfe0:	4614      	mov	r4, r2
   3bfe2:	f003 0c07 	and.w	ip, r3, #7
   3bfe6:	f1bc 0f05 	cmp.w	ip, #5
   3bfea:	bf08      	it	eq
   3bfec:	fa0e fc02 	lsleq.w	ip, lr, r2
   3bff0:	f102 0201 	add.w	r2, r2, #1
   3bff4:	ea4f 03d3 	mov.w	r3, r3, lsr #3
   3bff8:	bf08      	it	eq
   3bffa:	ea44 040c 	orreq.w	r4, r4, ip
   3bffe:	2a14      	cmp	r2, #20
   3c000:	ea43 7341 	orr.w	r3, r3, r1, lsl #29
   3c004:	ea4f 01d1 	mov.w	r1, r1, lsr #3
   3c008:	d1eb      	bne.n	3bfe2 <am_hal_dcu_get+0x4a>
   3c00a:	6004      	str	r4, [r0, #0]
   3c00c:	2000      	movs	r0, #0
   3c00e:	b002      	add	sp, #8
   3c010:	bd10      	pop	{r4, pc}
   3c012:	2007      	movs	r0, #7
   3c014:	4770      	bx	lr
   3c016:	bf00      	nop
   3c018:	40021000 	.word	0x40021000
   3c01c:	400c0000 	.word	0x400c0000
   3c020:	10004af8 	.word	0x10004af8
   3c024:	1001a958 	.word	0x1001a958

0003c028 <am_hal_dcu_update>:
   3c028:	4b26      	ldr	r3, [pc, #152]	; (3c0c4 <am_hal_dcu_update+0x9c>)
   3c02a:	689b      	ldr	r3, [r3, #8]
   3c02c:	02d8      	lsls	r0, r3, #11
   3c02e:	d544      	bpl.n	3c0ba <am_hal_dcu_update+0x92>
   3c030:	4b25      	ldr	r3, [pc, #148]	; (3c0c8 <am_hal_dcu_update+0xa0>)
   3c032:	f8d3 3a7c 	ldr.w	r3, [r3, #2684]	; 0xa7c
   3c036:	07da      	lsls	r2, r3, #31
   3c038:	d53f      	bpl.n	3c0ba <am_hal_dcu_update+0x92>
   3c03a:	b570      	push	{r4, r5, r6, lr}
   3c03c:	4b23      	ldr	r3, [pc, #140]	; (3c0cc <am_hal_dcu_update+0xa4>)
   3c03e:	681b      	ldr	r3, [r3, #0]
   3c040:	2400      	movs	r4, #0
   3c042:	b084      	sub	sp, #16
   3c044:	0849      	lsrs	r1, r1, #1
   3c046:	f103 063c 	add.w	r6, r3, #60	; 0x3c
   3c04a:	4625      	mov	r5, r4
   3c04c:	f04f 0e07 	mov.w	lr, #7
   3c050:	f011 0f01 	tst.w	r1, #1
   3c054:	f1a3 0220 	sub.w	r2, r3, #32
   3c058:	ea4f 0151 	mov.w	r1, r1, lsr #1
   3c05c:	f1c3 0020 	rsb	r0, r3, #32
   3c060:	d009      	beq.n	3c076 <am_hal_dcu_update+0x4e>
   3c062:	fa2e f000 	lsr.w	r0, lr, r0
   3c066:	fa0e f202 	lsl.w	r2, lr, r2
   3c06a:	fa0e fc03 	lsl.w	ip, lr, r3
   3c06e:	4302      	orrs	r2, r0
   3c070:	4660      	mov	r0, ip
   3c072:	4304      	orrs	r4, r0
   3c074:	4315      	orrs	r5, r2
   3c076:	3303      	adds	r3, #3
   3c078:	429e      	cmp	r6, r3
   3c07a:	d1e9      	bne.n	3c050 <am_hal_dcu_update+0x28>
   3c07c:	4b14      	ldr	r3, [pc, #80]	; (3c0d0 <am_hal_dcu_update+0xa8>)
   3c07e:	681b      	ldr	r3, [r3, #0]
   3c080:	685a      	ldr	r2, [r3, #4]
   3c082:	9203      	str	r2, [sp, #12]
   3c084:	681b      	ldr	r3, [r3, #0]
   3c086:	9302      	str	r3, [sp, #8]
   3c088:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   3c08c:	4014      	ands	r4, r2
   3c08e:	401d      	ands	r5, r3
   3c090:	ea54 0305 	orrs.w	r3, r4, r5
   3c094:	d113      	bne.n	3c0be <am_hal_dcu_update+0x96>
   3c096:	4b0f      	ldr	r3, [pc, #60]	; (3c0d4 <am_hal_dcu_update+0xac>)
   3c098:	4a0b      	ldr	r2, [pc, #44]	; (3c0c8 <am_hal_dcu_update+0xa0>)
   3c09a:	681b      	ldr	r3, [r3, #0]
   3c09c:	6859      	ldr	r1, [r3, #4]
   3c09e:	9101      	str	r1, [sp, #4]
   3c0a0:	6819      	ldr	r1, [r3, #0]
   3c0a2:	9100      	str	r1, [sp, #0]
   3c0a4:	9901      	ldr	r1, [sp, #4]
   3c0a6:	6059      	str	r1, [r3, #4]
   3c0a8:	9900      	ldr	r1, [sp, #0]
   3c0aa:	6019      	str	r1, [r3, #0]
   3c0ac:	f8d2 3a7c 	ldr.w	r3, [r2, #2684]	; 0xa7c
   3c0b0:	07db      	lsls	r3, r3, #31
   3c0b2:	d5fb      	bpl.n	3c0ac <am_hal_dcu_update+0x84>
   3c0b4:	2000      	movs	r0, #0
   3c0b6:	b004      	add	sp, #16
   3c0b8:	bd70      	pop	{r4, r5, r6, pc}
   3c0ba:	2007      	movs	r0, #7
   3c0bc:	4770      	bx	lr
   3c0be:	2007      	movs	r0, #7
   3c0c0:	b004      	add	sp, #16
   3c0c2:	bd70      	pop	{r4, r5, r6, pc}
   3c0c4:	40021000 	.word	0x40021000
   3c0c8:	400c0000 	.word	0x400c0000
   3c0cc:	1001a958 	.word	0x1001a958
   3c0d0:	10004afc 	.word	0x10004afc
   3c0d4:	10004af8 	.word	0x10004af8

0003c0d8 <am_hal_queue_item_add>:
   3c0d8:	b570      	push	{r4, r5, r6, lr}
   3c0da:	6905      	ldr	r5, [r0, #16]
   3c0dc:	b082      	sub	sp, #8
   3c0de:	4604      	mov	r4, r0
   3c0e0:	fb02 f505 	mul.w	r5, r2, r5
   3c0e4:	460e      	mov	r6, r1
   3c0e6:	f7f3 fe71 	bl	2fdcc <am_hal_interrupt_master_disable>
   3c0ea:	9001      	str	r0, [sp, #4]
   3c0ec:	68a3      	ldr	r3, [r4, #8]
   3c0ee:	68e2      	ldr	r2, [r4, #12]
   3c0f0:	1ad3      	subs	r3, r2, r3
   3c0f2:	42ab      	cmp	r3, r5
   3c0f4:	d31c      	bcc.n	3c130 <am_hal_queue_item_add+0x58>
   3c0f6:	b18d      	cbz	r5, 3c11c <am_hal_queue_item_add+0x44>
   3c0f8:	b30e      	cbz	r6, 3c13e <am_hal_queue_item_add+0x66>
   3c0fa:	1e71      	subs	r1, r6, #1
   3c0fc:	194e      	adds	r6, r1, r5
   3c0fe:	6823      	ldr	r3, [r4, #0]
   3c100:	6962      	ldr	r2, [r4, #20]
   3c102:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   3c106:	54d0      	strb	r0, [r2, r3]
   3c108:	6823      	ldr	r3, [r4, #0]
   3c10a:	68e0      	ldr	r0, [r4, #12]
   3c10c:	3301      	adds	r3, #1
   3c10e:	42b1      	cmp	r1, r6
   3c110:	fbb3 f2f0 	udiv	r2, r3, r0
   3c114:	fb00 3312 	mls	r3, r0, r2, r3
   3c118:	6023      	str	r3, [r4, #0]
   3c11a:	d1f0      	bne.n	3c0fe <am_hal_queue_item_add+0x26>
   3c11c:	68a2      	ldr	r2, [r4, #8]
   3c11e:	4415      	add	r5, r2
   3c120:	60a5      	str	r5, [r4, #8]
   3c122:	9801      	ldr	r0, [sp, #4]
   3c124:	f7f3 fe56 	bl	2fdd4 <am_hal_interrupt_master_set>
   3c128:	2601      	movs	r6, #1
   3c12a:	4630      	mov	r0, r6
   3c12c:	b002      	add	sp, #8
   3c12e:	bd70      	pop	{r4, r5, r6, pc}
   3c130:	9801      	ldr	r0, [sp, #4]
   3c132:	f7f3 fe4f 	bl	2fdd4 <am_hal_interrupt_master_set>
   3c136:	2600      	movs	r6, #0
   3c138:	4630      	mov	r0, r6
   3c13a:	b002      	add	sp, #8
   3c13c:	bd70      	pop	{r4, r5, r6, pc}
   3c13e:	4631      	mov	r1, r6
   3c140:	6823      	ldr	r3, [r4, #0]
   3c142:	3101      	adds	r1, #1
   3c144:	3301      	adds	r3, #1
   3c146:	428d      	cmp	r5, r1
   3c148:	fbb3 f0f2 	udiv	r0, r3, r2
   3c14c:	fb02 3310 	mls	r3, r2, r0, r3
   3c150:	6023      	str	r3, [r4, #0]
   3c152:	d1f5      	bne.n	3c140 <am_hal_queue_item_add+0x68>
   3c154:	e7e2      	b.n	3c11c <am_hal_queue_item_add+0x44>
   3c156:	bf00      	nop

0003c158 <am_hal_queue_item_get>:
   3c158:	b570      	push	{r4, r5, r6, lr}
   3c15a:	6905      	ldr	r5, [r0, #16]
   3c15c:	b082      	sub	sp, #8
   3c15e:	4604      	mov	r4, r0
   3c160:	fb02 f505 	mul.w	r5, r2, r5
   3c164:	460e      	mov	r6, r1
   3c166:	f7f3 fe31 	bl	2fdcc <am_hal_interrupt_master_disable>
   3c16a:	9001      	str	r0, [sp, #4]
   3c16c:	68a3      	ldr	r3, [r4, #8]
   3c16e:	42ab      	cmp	r3, r5
   3c170:	d31c      	bcc.n	3c1ac <am_hal_queue_item_get+0x54>
   3c172:	b18d      	cbz	r5, 3c198 <am_hal_queue_item_get+0x40>
   3c174:	b30e      	cbz	r6, 3c1ba <am_hal_queue_item_get+0x62>
   3c176:	1e71      	subs	r1, r6, #1
   3c178:	194e      	adds	r6, r1, r5
   3c17a:	6863      	ldr	r3, [r4, #4]
   3c17c:	6962      	ldr	r2, [r4, #20]
   3c17e:	5cd3      	ldrb	r3, [r2, r3]
   3c180:	f801 3f01 	strb.w	r3, [r1, #1]!
   3c184:	6863      	ldr	r3, [r4, #4]
   3c186:	68e0      	ldr	r0, [r4, #12]
   3c188:	3301      	adds	r3, #1
   3c18a:	42b1      	cmp	r1, r6
   3c18c:	fbb3 f2f0 	udiv	r2, r3, r0
   3c190:	fb00 3312 	mls	r3, r0, r2, r3
   3c194:	6063      	str	r3, [r4, #4]
   3c196:	d1f0      	bne.n	3c17a <am_hal_queue_item_get+0x22>
   3c198:	68a2      	ldr	r2, [r4, #8]
   3c19a:	1b55      	subs	r5, r2, r5
   3c19c:	60a5      	str	r5, [r4, #8]
   3c19e:	9801      	ldr	r0, [sp, #4]
   3c1a0:	f7f3 fe18 	bl	2fdd4 <am_hal_interrupt_master_set>
   3c1a4:	2601      	movs	r6, #1
   3c1a6:	4630      	mov	r0, r6
   3c1a8:	b002      	add	sp, #8
   3c1aa:	bd70      	pop	{r4, r5, r6, pc}
   3c1ac:	9801      	ldr	r0, [sp, #4]
   3c1ae:	f7f3 fe11 	bl	2fdd4 <am_hal_interrupt_master_set>
   3c1b2:	2600      	movs	r6, #0
   3c1b4:	4630      	mov	r0, r6
   3c1b6:	b002      	add	sp, #8
   3c1b8:	bd70      	pop	{r4, r5, r6, pc}
   3c1ba:	68e2      	ldr	r2, [r4, #12]
   3c1bc:	4631      	mov	r1, r6
   3c1be:	6863      	ldr	r3, [r4, #4]
   3c1c0:	3101      	adds	r1, #1
   3c1c2:	3301      	adds	r3, #1
   3c1c4:	428d      	cmp	r5, r1
   3c1c6:	fbb3 f0f2 	udiv	r0, r3, r2
   3c1ca:	fb02 3310 	mls	r3, r2, r0, r3
   3c1ce:	6063      	str	r3, [r4, #4]
   3c1d0:	d1f5      	bne.n	3c1be <am_hal_queue_item_get+0x66>
   3c1d2:	e7e1      	b.n	3c198 <am_hal_queue_item_get+0x40>

0003c1d4 <arm_convolve_wrapper_s8>:
                                   const q7_t *filter_data,
                                   const cmsis_nn_dims *bias_dims,
                                   const int32_t *bias_data,
                                   const cmsis_nn_dims *output_dims,
                                   q7_t *output_data)
{
   3c1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c1d8:	b083      	sub	sp, #12
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
   3c1da:	690c      	ldr	r4, [r1, #16]
{
   3c1dc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   3c1de:	9600      	str	r6, [sp, #0]
   3c1e0:	e9dd 7b0d 	ldrd	r7, fp, [sp, #52]	; 0x34
   3c1e4:	e9dd a90f 	ldrd	sl, r9, [sp, #60]	; 0x3c
   3c1e8:	e9dd 6811 	ldrd	r6, r8, [sp, #68]	; 0x44
   3c1ec:	9001      	str	r0, [sp, #4]
   3c1ee:	468c      	mov	ip, r1
   3c1f0:	4615      	mov	r5, r2
   3c1f2:	469e      	mov	lr, r3
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
   3c1f4:	b90c      	cbnz	r4, 3c1fa <arm_convolve_wrapper_s8+0x26>
   3c1f6:	694c      	ldr	r4, [r1, #20]
   3c1f8:	b30c      	cbz	r4, 3c23e <arm_convolve_wrapper_s8+0x6a>
                                        bias_dims,
                                        bias_data,
                                        output_dims,
                                        output_data);
    }
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
   3c1fa:	6873      	ldr	r3, [r6, #4]
   3c1fc:	2b01      	cmp	r3, #1
   3c1fe:	d10d      	bne.n	3c21c <arm_convolve_wrapper_s8+0x48>
   3c200:	f8de 3004 	ldr.w	r3, [lr, #4]
   3c204:	2b01      	cmp	r3, #1
   3c206:	d109      	bne.n	3c21c <arm_convolve_wrapper_s8+0x48>
   3c208:	687b      	ldr	r3, [r7, #4]
   3c20a:	2b01      	cmp	r3, #1
   3c20c:	d106      	bne.n	3c21c <arm_convolve_wrapper_s8+0x48>
   3c20e:	68b3      	ldr	r3, [r6, #8]
   3c210:	079b      	lsls	r3, r3, #30
   3c212:	d103      	bne.n	3c21c <arm_convolve_wrapper_s8+0x48>
   3c214:	f8de 3000 	ldr.w	r3, [lr]
   3c218:	2b01      	cmp	r3, #1
   3c21a:	d024      	beq.n	3c266 <arm_convolve_wrapper_s8+0x92>
                                     output_dims,
                                     output_data);
    }
    else
    {
        return arm_convolve_s8(ctx,
   3c21c:	9b00      	ldr	r3, [sp, #0]
   3c21e:	9801      	ldr	r0, [sp, #4]
   3c220:	930c      	str	r3, [sp, #48]	; 0x30
   3c222:	462a      	mov	r2, r5
   3c224:	4673      	mov	r3, lr
   3c226:	4661      	mov	r1, ip
   3c228:	e9cd 6811 	strd	r6, r8, [sp, #68]	; 0x44
   3c22c:	e9cd a90f 	strd	sl, r9, [sp, #60]	; 0x3c
   3c230:	e9cd 7b0d 	strd	r7, fp, [sp, #52]	; 0x34
                               bias_dims,
                               bias_data,
                               output_dims,
                               output_data);
    }
}
   3c234:	b003      	add	sp, #12
   3c236:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return arm_convolve_s8(ctx,
   3c23a:	f001 bbf5 	b.w	3da28 <arm_convolve_s8>
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
   3c23e:	68dc      	ldr	r4, [r3, #12]
   3c240:	07a4      	lsls	r4, r4, #30
   3c242:	d1da      	bne.n	3c1fa <arm_convolve_wrapper_s8+0x26>
   3c244:	688c      	ldr	r4, [r1, #8]
   3c246:	2c01      	cmp	r4, #1
   3c248:	d1d7      	bne.n	3c1fa <arm_convolve_wrapper_s8+0x26>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
   3c24a:	68cc      	ldr	r4, [r1, #12]
   3c24c:	2c01      	cmp	r4, #1
   3c24e:	d1d4      	bne.n	3c1fa <arm_convolve_wrapper_s8+0x26>
   3c250:	68bc      	ldr	r4, [r7, #8]
   3c252:	2c01      	cmp	r4, #1
   3c254:	d1d1      	bne.n	3c1fa <arm_convolve_wrapper_s8+0x26>
   3c256:	687c      	ldr	r4, [r7, #4]
   3c258:	2c01      	cmp	r4, #1
   3c25a:	d1ce      	bne.n	3c1fa <arm_convolve_wrapper_s8+0x26>
}
   3c25c:	b003      	add	sp, #12
   3c25e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return arm_convolve_1x1_s8_fast(ctx,
   3c262:	f001 bb9f 	b.w	3d9a4 <arm_convolve_1x1_s8_fast>
        return arm_convolve_1_x_n_s8(ctx,
   3c266:	9b00      	ldr	r3, [sp, #0]
   3c268:	9801      	ldr	r0, [sp, #4]
   3c26a:	930c      	str	r3, [sp, #48]	; 0x30
   3c26c:	462a      	mov	r2, r5
   3c26e:	4673      	mov	r3, lr
   3c270:	4661      	mov	r1, ip
   3c272:	e9cd 6811 	strd	r6, r8, [sp, #68]	; 0x44
   3c276:	e9cd a90f 	strd	sl, r9, [sp, #60]	; 0x3c
   3c27a:	e9cd 7b0d 	strd	r7, fp, [sp, #52]	; 0x34
}
   3c27e:	b003      	add	sp, #12
   3c280:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return arm_convolve_1_x_n_s8(ctx,
   3c284:	f001 bb74 	b.w	3d970 <arm_convolve_1_x_n_s8>

0003c288 <arm_convolve_wrapper_s8_get_buffer_size>:

int32_t arm_convolve_wrapper_s8_get_buffer_size(const cmsis_nn_conv_params *conv_params,
                                                const cmsis_nn_dims *input_dims,
                                                const cmsis_nn_dims *filter_dims,
                                                const cmsis_nn_dims *output_dims)
{
   3c288:	4684      	mov	ip, r0
   3c28a:	4608      	mov	r0, r1
   3c28c:	4611      	mov	r1, r2
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
   3c28e:	f8dc 2010 	ldr.w	r2, [ip, #16]
   3c292:	b912      	cbnz	r2, 3c29a <arm_convolve_wrapper_s8_get_buffer_size+0x12>
   3c294:	f8dc 2014 	ldr.w	r2, [ip, #20]
   3c298:	b182      	cbz	r2, 3c2bc <arm_convolve_wrapper_s8_get_buffer_size+0x34>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
    {
        return arm_convolve_1x1_s8_fast_get_buffer_size(input_dims);
    }
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
   3c29a:	685a      	ldr	r2, [r3, #4]
   3c29c:	2a01      	cmp	r2, #1
   3c29e:	d10b      	bne.n	3c2b8 <arm_convolve_wrapper_s8_get_buffer_size+0x30>
   3c2a0:	6842      	ldr	r2, [r0, #4]
   3c2a2:	2a01      	cmp	r2, #1
   3c2a4:	d108      	bne.n	3c2b8 <arm_convolve_wrapper_s8_get_buffer_size+0x30>
   3c2a6:	684a      	ldr	r2, [r1, #4]
   3c2a8:	2a01      	cmp	r2, #1
   3c2aa:	d105      	bne.n	3c2b8 <arm_convolve_wrapper_s8_get_buffer_size+0x30>
   3c2ac:	689b      	ldr	r3, [r3, #8]
   3c2ae:	079b      	lsls	r3, r3, #30
   3c2b0:	d102      	bne.n	3c2b8 <arm_convolve_wrapper_s8_get_buffer_size+0x30>
   3c2b2:	6803      	ldr	r3, [r0, #0]
   3c2b4:	2b01      	cmp	r3, #1
   3c2b6:	d014      	beq.n	3c2e2 <arm_convolve_wrapper_s8_get_buffer_size+0x5a>
    {
        return arm_convolve_1_x_n_s8_get_buffer_size(input_dims, filter_dims);
    }
    else
    {
        return arm_convolve_s8_get_buffer_size(input_dims, filter_dims);
   3c2b8:	f001 bd86 	b.w	3ddc8 <arm_convolve_s8_get_buffer_size>
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
   3c2bc:	68c2      	ldr	r2, [r0, #12]
   3c2be:	0792      	lsls	r2, r2, #30
   3c2c0:	d1eb      	bne.n	3c29a <arm_convolve_wrapper_s8_get_buffer_size+0x12>
   3c2c2:	f8dc 2008 	ldr.w	r2, [ip, #8]
   3c2c6:	2a01      	cmp	r2, #1
   3c2c8:	d1e7      	bne.n	3c29a <arm_convolve_wrapper_s8_get_buffer_size+0x12>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
   3c2ca:	f8dc 200c 	ldr.w	r2, [ip, #12]
   3c2ce:	2a01      	cmp	r2, #1
   3c2d0:	d1e3      	bne.n	3c29a <arm_convolve_wrapper_s8_get_buffer_size+0x12>
   3c2d2:	688a      	ldr	r2, [r1, #8]
   3c2d4:	2a01      	cmp	r2, #1
   3c2d6:	d1e0      	bne.n	3c29a <arm_convolve_wrapper_s8_get_buffer_size+0x12>
   3c2d8:	684a      	ldr	r2, [r1, #4]
   3c2da:	2a01      	cmp	r2, #1
   3c2dc:	d1dd      	bne.n	3c29a <arm_convolve_wrapper_s8_get_buffer_size+0x12>
        return arm_convolve_1x1_s8_fast_get_buffer_size(input_dims);
   3c2de:	f001 bba1 	b.w	3da24 <arm_convolve_1x1_s8_fast_get_buffer_size>
        return arm_convolve_1_x_n_s8_get_buffer_size(input_dims, filter_dims);
   3c2e2:	f001 bb55 	b.w	3d990 <arm_convolve_1_x_n_s8_get_buffer_size>
   3c2e6:	bf00      	nop

0003c2e8 <arm_fully_connected_s8>:
                                  const q7_t *kernel,
                                  const cmsis_nn_dims *bias_dims,
                                  const int32_t *bias,
                                  const cmsis_nn_dims *output_dims,
                                  q7_t *output)
{
   3c2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)bias_dims;
    (void)ctx;
    int32_t batch_cnt = input_dims->n;
   3c2ec:	681d      	ldr	r5, [r3, #0]
{
   3c2ee:	b08d      	sub	sp, #52	; 0x34
   3c2f0:	4690      	mov	r8, r2
   3c2f2:	e9dd 6a16 	ldrd	r6, sl, [sp, #88]	; 0x58
   3c2f6:	e9dd 291a 	ldrd	r2, r9, [sp, #104]	; 0x68
   3c2fa:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
   3c2fe:	9f1c      	ldr	r7, [sp, #112]	; 0x70

    while (batch_cnt)
   3c300:	b355      	cbz	r5, 3c358 <arm_fully_connected_s8+0x70>
   3c302:	460c      	mov	r4, r1
    {
        arm_nn_vec_mat_mult_t_s8(input,
   3c304:	f8d9 300c 	ldr.w	r3, [r9, #12]
   3c308:	f8da 1000 	ldr.w	r1, [sl]
   3c30c:	950b      	str	r5, [sp, #44]	; 0x2c
   3c30e:	e9d4 0c03 	ldrd	r0, ip, [r4, #12]
   3c312:	9306      	str	r3, [sp, #24]
   3c314:	f8d8 e004 	ldr.w	lr, [r8, #4]
   3c318:	9105      	str	r1, [sp, #20]
   3c31a:	f8cd c020 	str.w	ip, [sp, #32]
   3c31e:	f8d8 1000 	ldr.w	r1, [r8]
   3c322:	68a3      	ldr	r3, [r4, #8]
   3c324:	9007      	str	r0, [sp, #28]
   3c326:	f8cd e010 	str.w	lr, [sp, #16]
   3c32a:	e9d4 5000 	ldrd	r5, r0, [r4]
   3c32e:	e9cd 3102 	strd	r3, r1, [sp, #8]
   3c332:	9001      	str	r0, [sp, #4]
   3c334:	463b      	mov	r3, r7
   3c336:	4630      	mov	r0, r6
   3c338:	4659      	mov	r1, fp
   3c33a:	9500      	str	r5, [sp, #0]
   3c33c:	921a      	str	r2, [sp, #104]	; 0x68
   3c33e:	f000 f811 	bl	3c364 <arm_nn_vec_mat_mult_t_s8>
    while (batch_cnt)
   3c342:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
                                 quant_params->shift,
                                 filter_dims->n, /* col_dim or accum_depth */
                                 output_dims->c, /* row_dim or output_depth */
                                 fc_params->activation.min,
                                 fc_params->activation.max);
        input += filter_dims->n;
   3c344:	f8da 1000 	ldr.w	r1, [sl]
        output += output_dims->c;
   3c348:	f8d9 300c 	ldr.w	r3, [r9, #12]
    while (batch_cnt)
   3c34c:	3a01      	subs	r2, #1
   3c34e:	920b      	str	r2, [sp, #44]	; 0x2c
        input += filter_dims->n;
   3c350:	440e      	add	r6, r1
    while (batch_cnt)
   3c352:	9a1a      	ldr	r2, [sp, #104]	; 0x68
        output += output_dims->c;
   3c354:	441f      	add	r7, r3
    while (batch_cnt)
   3c356:	d1da      	bne.n	3c30e <arm_fully_connected_s8+0x26>
        batch_cnt--;
    }
    return (ARM_MATH_SUCCESS);
}
   3c358:	2000      	movs	r0, #0
   3c35a:	b00d      	add	sp, #52	; 0x34
   3c35c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0003c360 <arm_fully_connected_s8_get_buffer_size>:

int32_t arm_fully_connected_s8_get_buffer_size(const cmsis_nn_dims *filter_dims)
{
    (void)filter_dims;
    return 0;
}
   3c360:	2000      	movs	r0, #0
   3c362:	4770      	bx	lr

0003c364 <arm_nn_vec_mat_mult_t_s8>:
                                    const int32_t dst_shift,
                                    const int32_t rhs_cols,
                                    const int32_t rhs_rows,
                                    const int32_t activation_min,
                                    const int32_t activation_max)
{
   3c364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c368:	b093      	sub	sp, #76	; 0x4c
    const int16_t rhs_offset_s16 = rhs_offset;

    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);

    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   3c36a:	e9dd a421 	ldrd	sl, r4, [sp, #132]	; 0x84
{
   3c36e:	461f      	mov	r7, r3
   3c370:	930f      	str	r3, [sp, #60]	; 0x3c
    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
   3c372:	9b1c      	ldr	r3, [sp, #112]	; 0x70
{
   3c374:	9202      	str	r2, [sp, #8]
    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
   3c376:	fa0f fe83 	sxth.w	lr, r3
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
   3c37a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
{
   3c37c:	9006      	str	r0, [sp, #24]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   3c37e:	2c01      	cmp	r4, #1
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
   3c380:	b21a      	sxth	r2, r3
{
   3c382:	910e      	str	r1, [sp, #56]	; 0x38
    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
   3c384:	eace 4e0e 	pkhbt	lr, lr, lr, lsl #16
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
   3c388:	eac2 4202 	pkhbt	r2, r2, r2, lsl #16
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   3c38c:	f340 8266 	ble.w	3c85c <arm_nn_vec_mat_mult_t_s8+0x4f8>
   3c390:	4626      	mov	r6, r4
 * @return          Returns (val * multiplier)/(2 ^ shift)
 *
 */
__STATIC_FORCEINLINE q31_t arm_nn_requantize(const q31_t val, const q31_t multiplier, const q31_t shift)
{
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3c392:	9c20      	ldr	r4, [sp, #128]	; 0x80
   3c394:	9101      	str	r1, [sp, #4]
   3c396:	4264      	negs	r4, r4
    const q31_t remainder_mask = (1 << exponent) - 1;
   3c398:	2301      	movs	r3, #1
   3c39a:	40a3      	lsls	r3, r4
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3c39c:	940c      	str	r4, [sp, #48]	; 0x30
    const q31_t remainder_mask = (1 << exponent) - 1;
   3c39e:	1e5c      	subs	r4, r3, #1
   3c3a0:	f1aa 0310 	sub.w	r3, sl, #16
   3c3a4:	1eb5      	subs	r5, r6, #2
   3c3a6:	f023 030f 	bic.w	r3, r3, #15
   3c3aa:	f103 0610 	add.w	r6, r3, #16
   3c3ae:	f025 0301 	bic.w	r3, r5, #1
   3c3b2:	443b      	add	r3, r7
   3c3b4:	3304      	adds	r3, #4
   3c3b6:	940d      	str	r4, [sp, #52]	; 0x34
   3c3b8:	9307      	str	r3, [sp, #28]
    q31_t threshold = remainder_mask >> 1;
   3c3ba:	1063      	asrs	r3, r4, #1
        res01 = MIN(res01, activation_max);

        *dst++ = (q7_t)res00;
        *dst++ = (q7_t)res01;

        rhs += 2 * rhs_cols;
   3c3bc:	ea4f 044a 	mov.w	r4, sl, lsl #1
   3c3c0:	9405      	str	r4, [sp, #20]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3c3c2:	9c20      	ldr	r4, [sp, #128]	; 0x80
    q31_t threshold = remainder_mask >> 1;
   3c3c4:	930b      	str	r3, [sp, #44]	; 0x2c
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3c3c6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   3c3ca:	f06f 0903 	mvn.w	r9, #3
   3c3ce:	9404      	str	r4, [sp, #16]
   3c3d0:	4430      	add	r0, r6
   3c3d2:	1cbc      	adds	r4, r7, #2
   3c3d4:	f10a 0104 	add.w	r1, sl, #4
        threshold++;
   3c3d8:	3301      	adds	r3, #1
   3c3da:	9511      	str	r5, [sp, #68]	; 0x44
   3c3dc:	9608      	str	r6, [sp, #32]
   3c3de:	eba9 090a 	sub.w	r9, r9, sl
   3c3e2:	9403      	str	r4, [sp, #12]
   3c3e4:	9009      	str	r0, [sp, #36]	; 0x24
   3c3e6:	910a      	str	r1, [sp, #40]	; 0x28
   3c3e8:	9310      	str	r3, [sp, #64]	; 0x40
   3c3ea:	4694      	mov	ip, r2
        if (bias)
   3c3ec:	9802      	ldr	r0, [sp, #8]
   3c3ee:	2800      	cmp	r0, #0
   3c3f0:	f000 83c4 	beq.w	3cb7c <arm_nn_vec_mat_mult_t_s8+0x818>
            res01 = *bias++;
   3c3f4:	6841      	ldr	r1, [r0, #4]
            res00 = *bias++;
   3c3f6:	f850 3b08 	ldr.w	r3, [r0], #8
            res01 = *bias++;
   3c3fa:	9002      	str	r0, [sp, #8]
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   3c3fc:	f1ba 0f0f 	cmp.w	sl, #15
   3c400:	9801      	ldr	r0, [sp, #4]
   3c402:	f340 83c2 	ble.w	3cb8a <arm_nn_vec_mat_mult_t_s8+0x826>
   3c406:	9c0a      	ldr	r4, [sp, #40]	; 0x28
        const q7_t *lhs_ptr = &lhs[0];
   3c408:	9e06      	ldr	r6, [sp, #24]
   3c40a:	f8cd a084 	str.w	sl, [sp, #132]	; 0x84
   3c40e:	4662      	mov	r2, ip
   3c410:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   3c414:	1905      	adds	r5, r0, r4
   3c416:	f859 b005 	ldr.w	fp, [r9, r5]
   3c41a:	6834      	ldr	r4, [r6, #0]
   3c41c:	f855 0c04 	ldr.w	r0, [r5, #-4]
  op2 %= 32U;
  if (op2 == 0U)
  {
    return op1;
  }
  return (op1 >> op2) | (op1 << (32U - op2));
   3c420:	ea4f 2a3b 	mov.w	sl, fp, ror #8
   3c424:	ea4f 2834 	mov.w	r8, r4, ror #8
   3c428:	eb09 0705 	add.w	r7, r9, r5

__STATIC_FORCEINLINE uint32_t __SXTAB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   3c42c:	fa22 fb8b 	sxtab16	fp, r2, fp
   3c430:	fa22 fa8a 	sxtab16	sl, r2, sl
   3c434:	fa2e f484 	sxtab16	r4, lr, r4
   3c438:	fa2e f888 	sxtab16	r8, lr, r8

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   3c43c:	fb24 330b 	smlad	r3, r4, fp, r3
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   3c440:	fa22 fb80 	sxtab16	fp, r2, r0
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   3c444:	fb28 330a 	smlad	r3, r8, sl, r3
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   3c448:	f8d7 a004 	ldr.w	sl, [r7, #4]
  return (op1 >> op2) | (op1 << (32U - op2));
   3c44c:	ea4f 2030 	mov.w	r0, r0, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   3c450:	fa22 f080 	sxtab16	r0, r2, r0
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   3c454:	fb24 140b 	smlad	r4, r4, fp, r1
   3c458:	fb28 4400 	smlad	r4, r8, r0, r4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   3c45c:	6870      	ldr	r0, [r6, #4]
   3c45e:	fa22 f88a 	sxtab16	r8, r2, sl
  return (op1 >> op2) | (op1 << (32U - op2));
   3c462:	ea4f 2b3a 	mov.w	fp, sl, ror #8
   3c466:	ea4f 2130 	mov.w	r1, r0, ror #8
   3c46a:	f8d5 a000 	ldr.w	sl, [r5]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   3c46e:	fa22 fb8b 	sxtab16	fp, r2, fp
   3c472:	fa2e f080 	sxtab16	r0, lr, r0
   3c476:	fa2e f181 	sxtab16	r1, lr, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   3c47a:	fb20 3308 	smlad	r3, r0, r8, r3
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   3c47e:	fa22 f88a 	sxtab16	r8, r2, sl
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   3c482:	fb21 3b0b 	smlad	fp, r1, fp, r3
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   3c486:	68bb      	ldr	r3, [r7, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
   3c488:	ea4f 2a3a 	mov.w	sl, sl, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   3c48c:	fa22 fa8a 	sxtab16	sl, r2, sl
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   3c490:	fb20 4808 	smlad	r8, r0, r8, r4
   3c494:	fb21 880a 	smlad	r8, r1, sl, r8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   3c498:	68b0      	ldr	r0, [r6, #8]
   3c49a:	6869      	ldr	r1, [r5, #4]
  return (op1 >> op2) | (op1 << (32U - op2));
   3c49c:	ea4f 2a33 	mov.w	sl, r3, ror #8
   3c4a0:	ea4f 2430 	mov.w	r4, r0, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   3c4a4:	fa22 f383 	sxtab16	r3, r2, r3
   3c4a8:	fa22 fa8a 	sxtab16	sl, r2, sl
   3c4ac:	fa2e f080 	sxtab16	r0, lr, r0
   3c4b0:	fa2e f484 	sxtab16	r4, lr, r4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   3c4b4:	fb20 bb03 	smlad	fp, r0, r3, fp
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   3c4b8:	fa22 f381 	sxtab16	r3, r2, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   3c4bc:	fb24 bb0a 	smlad	fp, r4, sl, fp
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   3c4c0:	f8d7 a00c 	ldr.w	sl, [r7, #12]
  return (op1 >> op2) | (op1 << (32U - op2));
   3c4c4:	ea4f 2131 	mov.w	r1, r1, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   3c4c8:	fa22 f181 	sxtab16	r1, r2, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   3c4cc:	fb20 8803 	smlad	r8, r0, r3, r8
   3c4d0:	fb24 8401 	smlad	r4, r4, r1, r8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   3c4d4:	68f7      	ldr	r7, [r6, #12]
   3c4d6:	f8d5 8008 	ldr.w	r8, [r5, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
   3c4da:	ea4f 2137 	mov.w	r1, r7, ror #8
   3c4de:	ea4f 233a 	mov.w	r3, sl, ror #8
   3c4e2:	3610      	adds	r6, #16
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   3c4e4:	fa22 fa8a 	sxtab16	sl, r2, sl
   3c4e8:	fa22 f383 	sxtab16	r3, r2, r3
   3c4ec:	fa2e f787 	sxtab16	r7, lr, r7
   3c4f0:	fa2e f081 	sxtab16	r0, lr, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   3c4f4:	fb27 bb0a 	smlad	fp, r7, sl, fp
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   3c4f8:	fa22 fa88 	sxtab16	sl, r2, r8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   3c4fc:	fb20 b303 	smlad	r3, r0, r3, fp
  return (op1 >> op2) | (op1 << (32U - op2));
   3c500:	ea4f 2838 	mov.w	r8, r8, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   3c504:	fa22 f888 	sxtab16	r8, r2, r8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   3c508:	fb27 440a 	smlad	r4, r7, sl, r4
   3c50c:	fb20 4108 	smlad	r1, r0, r8, r4
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   3c510:	45b4      	cmp	ip, r6
   3c512:	f105 0510 	add.w	r5, r5, #16
   3c516:	f47f af7e 	bne.w	3c416 <arm_nn_vec_mat_mult_t_s8+0xb2>
    *in_q7 += 4;
   3c51a:	9801      	ldr	r0, [sp, #4]
   3c51c:	9c08      	ldr	r4, [sp, #32]
   3c51e:	f8dd a084 	ldr.w	sl, [sp, #132]	; 0x84
   3c522:	4694      	mov	ip, r2
   3c524:	4420      	add	r0, r4
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3c526:	45a2      	cmp	sl, r4
   3c528:	f340 814b 	ble.w	3c7c2 <arm_nn_vec_mat_mult_t_s8+0x45e>
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3c52c:	9f1c      	ldr	r7, [sp, #112]	; 0x70
   3c52e:	f996 5000 	ldrsb.w	r5, [r6]
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   3c532:	9a1d      	ldr	r2, [sp, #116]	; 0x74
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3c534:	443d      	add	r5, r7
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   3c536:	f990 7000 	ldrsb.w	r7, [r0]
   3c53a:	4417      	add	r7, r2
            res00 += lhs_value * rhs_value0;
   3c53c:	fb05 3307 	mla	r3, r5, r7, r3
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
   3c540:	f910 700a 	ldrsb.w	r7, [r0, sl]
   3c544:	4417      	add	r7, r2
            res01 += lhs_value * rhs_value1;
   3c546:	fb05 1107 	mla	r1, r5, r7, r1
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3c54a:	1c65      	adds	r5, r4, #1
   3c54c:	45aa      	cmp	sl, r5
   3c54e:	f340 8138 	ble.w	3c7c2 <arm_nn_vec_mat_mult_t_s8+0x45e>
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
   3c552:	eb00 050a 	add.w	r5, r0, sl
   3c556:	f995 7001 	ldrsb.w	r7, [r5, #1]
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3c55a:	f996 5001 	ldrsb.w	r5, [r6, #1]
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
   3c55e:	4417      	add	r7, r2
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3c560:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   3c562:	4415      	add	r5, r2
            res01 += lhs_value * rhs_value1;
   3c564:	fb05 1107 	mla	r1, r5, r7, r1
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   3c568:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   3c56a:	f990 7001 	ldrsb.w	r7, [r0, #1]
   3c56e:	4417      	add	r7, r2
            res00 += lhs_value * rhs_value0;
   3c570:	fb05 3307 	mla	r3, r5, r7, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3c574:	1ca5      	adds	r5, r4, #2
   3c576:	45aa      	cmp	sl, r5
            ++rhs_ptr;
   3c578:	f100 0702 	add.w	r7, r0, #2
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3c57c:	f340 8121 	ble.w	3c7c2 <arm_nn_vec_mat_mult_t_s8+0x45e>
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
   3c580:	f917 700a 	ldrsb.w	r7, [r7, sl]
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3c584:	f996 5002 	ldrsb.w	r5, [r6, #2]
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
   3c588:	4417      	add	r7, r2
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3c58a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   3c58c:	4415      	add	r5, r2
            res01 += lhs_value * rhs_value1;
   3c58e:	fb05 1107 	mla	r1, r5, r7, r1
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   3c592:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   3c594:	f990 7002 	ldrsb.w	r7, [r0, #2]
   3c598:	4417      	add	r7, r2
            res00 += lhs_value * rhs_value0;
   3c59a:	fb05 3307 	mla	r3, r5, r7, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3c59e:	1ce5      	adds	r5, r4, #3
   3c5a0:	45aa      	cmp	sl, r5
            ++rhs_ptr;
   3c5a2:	f100 0703 	add.w	r7, r0, #3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3c5a6:	f340 810c 	ble.w	3c7c2 <arm_nn_vec_mat_mult_t_s8+0x45e>
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
   3c5aa:	f917 700a 	ldrsb.w	r7, [r7, sl]
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3c5ae:	f996 5003 	ldrsb.w	r5, [r6, #3]
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
   3c5b2:	4417      	add	r7, r2
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3c5b4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   3c5b6:	4415      	add	r5, r2
            res01 += lhs_value * rhs_value1;
   3c5b8:	fb05 1107 	mla	r1, r5, r7, r1
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   3c5bc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   3c5be:	f990 7003 	ldrsb.w	r7, [r0, #3]
   3c5c2:	4417      	add	r7, r2
            res00 += lhs_value * rhs_value0;
   3c5c4:	fb05 3307 	mla	r3, r5, r7, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3c5c8:	1d25      	adds	r5, r4, #4
   3c5ca:	45aa      	cmp	sl, r5
            ++rhs_ptr;
   3c5cc:	f100 0704 	add.w	r7, r0, #4
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3c5d0:	f340 80f7 	ble.w	3c7c2 <arm_nn_vec_mat_mult_t_s8+0x45e>
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
   3c5d4:	f917 700a 	ldrsb.w	r7, [r7, sl]
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3c5d8:	f996 5004 	ldrsb.w	r5, [r6, #4]
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
   3c5dc:	4417      	add	r7, r2
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3c5de:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   3c5e0:	4415      	add	r5, r2
            res01 += lhs_value * rhs_value1;
   3c5e2:	fb05 1107 	mla	r1, r5, r7, r1
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   3c5e6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   3c5e8:	f990 7004 	ldrsb.w	r7, [r0, #4]
   3c5ec:	4417      	add	r7, r2
            res00 += lhs_value * rhs_value0;
   3c5ee:	fb05 3307 	mla	r3, r5, r7, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3c5f2:	1d65      	adds	r5, r4, #5
   3c5f4:	45aa      	cmp	sl, r5
            ++rhs_ptr;
   3c5f6:	f100 0705 	add.w	r7, r0, #5
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3c5fa:	f340 80e2 	ble.w	3c7c2 <arm_nn_vec_mat_mult_t_s8+0x45e>
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
   3c5fe:	f917 700a 	ldrsb.w	r7, [r7, sl]
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3c602:	f996 5005 	ldrsb.w	r5, [r6, #5]
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
   3c606:	4417      	add	r7, r2
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3c608:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   3c60a:	4415      	add	r5, r2
            res01 += lhs_value * rhs_value1;
   3c60c:	fb05 1107 	mla	r1, r5, r7, r1
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   3c610:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   3c612:	f990 7005 	ldrsb.w	r7, [r0, #5]
   3c616:	4417      	add	r7, r2
            res00 += lhs_value * rhs_value0;
   3c618:	fb05 3307 	mla	r3, r5, r7, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3c61c:	1da5      	adds	r5, r4, #6
   3c61e:	45aa      	cmp	sl, r5
            ++rhs_ptr;
   3c620:	f100 0706 	add.w	r7, r0, #6
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3c624:	f340 80cd 	ble.w	3c7c2 <arm_nn_vec_mat_mult_t_s8+0x45e>
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
   3c628:	f917 700a 	ldrsb.w	r7, [r7, sl]
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3c62c:	f996 5006 	ldrsb.w	r5, [r6, #6]
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
   3c630:	4417      	add	r7, r2
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3c632:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   3c634:	4415      	add	r5, r2
            res01 += lhs_value * rhs_value1;
   3c636:	fb05 1107 	mla	r1, r5, r7, r1
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   3c63a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   3c63c:	f990 7006 	ldrsb.w	r7, [r0, #6]
   3c640:	4417      	add	r7, r2
            res00 += lhs_value * rhs_value0;
   3c642:	fb05 3307 	mla	r3, r5, r7, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3c646:	1de5      	adds	r5, r4, #7
   3c648:	45aa      	cmp	sl, r5
            ++rhs_ptr;
   3c64a:	f100 0707 	add.w	r7, r0, #7
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3c64e:	f340 80b8 	ble.w	3c7c2 <arm_nn_vec_mat_mult_t_s8+0x45e>
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
   3c652:	f917 700a 	ldrsb.w	r7, [r7, sl]
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3c656:	f996 5007 	ldrsb.w	r5, [r6, #7]
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
   3c65a:	4417      	add	r7, r2
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3c65c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   3c65e:	4415      	add	r5, r2
            res01 += lhs_value * rhs_value1;
   3c660:	fb05 1107 	mla	r1, r5, r7, r1
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   3c664:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   3c666:	f990 7007 	ldrsb.w	r7, [r0, #7]
   3c66a:	4417      	add	r7, r2
            res00 += lhs_value * rhs_value0;
   3c66c:	fb05 3307 	mla	r3, r5, r7, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3c670:	f104 0508 	add.w	r5, r4, #8
   3c674:	45aa      	cmp	sl, r5
            ++rhs_ptr;
   3c676:	f100 0708 	add.w	r7, r0, #8
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3c67a:	f340 80a2 	ble.w	3c7c2 <arm_nn_vec_mat_mult_t_s8+0x45e>
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
   3c67e:	f917 700a 	ldrsb.w	r7, [r7, sl]
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3c682:	f996 5008 	ldrsb.w	r5, [r6, #8]
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
   3c686:	4417      	add	r7, r2
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3c688:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   3c68a:	4415      	add	r5, r2
            res01 += lhs_value * rhs_value1;
   3c68c:	fb05 1107 	mla	r1, r5, r7, r1
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   3c690:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   3c692:	f990 7008 	ldrsb.w	r7, [r0, #8]
   3c696:	4417      	add	r7, r2
            res00 += lhs_value * rhs_value0;
   3c698:	fb05 3307 	mla	r3, r5, r7, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3c69c:	f104 0509 	add.w	r5, r4, #9
   3c6a0:	45aa      	cmp	sl, r5
            ++rhs_ptr;
   3c6a2:	f100 0709 	add.w	r7, r0, #9
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3c6a6:	f340 808c 	ble.w	3c7c2 <arm_nn_vec_mat_mult_t_s8+0x45e>
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
   3c6aa:	f917 700a 	ldrsb.w	r7, [r7, sl]
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3c6ae:	f996 5009 	ldrsb.w	r5, [r6, #9]
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
   3c6b2:	4417      	add	r7, r2
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3c6b4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   3c6b6:	4415      	add	r5, r2
            res01 += lhs_value * rhs_value1;
   3c6b8:	fb05 1107 	mla	r1, r5, r7, r1
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   3c6bc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   3c6be:	f990 7009 	ldrsb.w	r7, [r0, #9]
   3c6c2:	4417      	add	r7, r2
            res00 += lhs_value * rhs_value0;
   3c6c4:	fb05 3307 	mla	r3, r5, r7, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3c6c8:	f104 050a 	add.w	r5, r4, #10
   3c6cc:	45aa      	cmp	sl, r5
            ++rhs_ptr;
   3c6ce:	f100 070a 	add.w	r7, r0, #10
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3c6d2:	dd76      	ble.n	3c7c2 <arm_nn_vec_mat_mult_t_s8+0x45e>
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
   3c6d4:	f917 700a 	ldrsb.w	r7, [r7, sl]
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3c6d8:	f996 500a 	ldrsb.w	r5, [r6, #10]
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
   3c6dc:	4417      	add	r7, r2
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3c6de:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   3c6e0:	4415      	add	r5, r2
            res01 += lhs_value * rhs_value1;
   3c6e2:	fb05 1107 	mla	r1, r5, r7, r1
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   3c6e6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   3c6e8:	f990 700a 	ldrsb.w	r7, [r0, #10]
   3c6ec:	4417      	add	r7, r2
            res00 += lhs_value * rhs_value0;
   3c6ee:	fb05 3307 	mla	r3, r5, r7, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3c6f2:	f104 050b 	add.w	r5, r4, #11
   3c6f6:	45aa      	cmp	sl, r5
            ++rhs_ptr;
   3c6f8:	f100 070b 	add.w	r7, r0, #11
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3c6fc:	dd61      	ble.n	3c7c2 <arm_nn_vec_mat_mult_t_s8+0x45e>
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
   3c6fe:	f917 700a 	ldrsb.w	r7, [r7, sl]
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3c702:	f996 500b 	ldrsb.w	r5, [r6, #11]
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
   3c706:	4417      	add	r7, r2
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3c708:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   3c70a:	4415      	add	r5, r2
            res01 += lhs_value * rhs_value1;
   3c70c:	fb05 1107 	mla	r1, r5, r7, r1
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   3c710:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   3c712:	f990 700b 	ldrsb.w	r7, [r0, #11]
   3c716:	4417      	add	r7, r2
            res00 += lhs_value * rhs_value0;
   3c718:	fb05 3307 	mla	r3, r5, r7, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3c71c:	f104 050c 	add.w	r5, r4, #12
   3c720:	45aa      	cmp	sl, r5
            ++rhs_ptr;
   3c722:	f100 070c 	add.w	r7, r0, #12
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3c726:	dd4c      	ble.n	3c7c2 <arm_nn_vec_mat_mult_t_s8+0x45e>
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
   3c728:	f917 700a 	ldrsb.w	r7, [r7, sl]
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3c72c:	f996 500c 	ldrsb.w	r5, [r6, #12]
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
   3c730:	4417      	add	r7, r2
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3c732:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   3c734:	4415      	add	r5, r2
            res01 += lhs_value * rhs_value1;
   3c736:	fb05 1107 	mla	r1, r5, r7, r1
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   3c73a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   3c73c:	f990 700c 	ldrsb.w	r7, [r0, #12]
   3c740:	4417      	add	r7, r2
            res00 += lhs_value * rhs_value0;
   3c742:	fb05 3307 	mla	r3, r5, r7, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3c746:	f104 050d 	add.w	r5, r4, #13
   3c74a:	45aa      	cmp	sl, r5
            ++rhs_ptr;
   3c74c:	f100 070d 	add.w	r7, r0, #13
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3c750:	dd37      	ble.n	3c7c2 <arm_nn_vec_mat_mult_t_s8+0x45e>
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
   3c752:	f917 700a 	ldrsb.w	r7, [r7, sl]
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3c756:	f996 500d 	ldrsb.w	r5, [r6, #13]
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
   3c75a:	4417      	add	r7, r2
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3c75c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   3c75e:	4415      	add	r5, r2
            res01 += lhs_value * rhs_value1;
   3c760:	fb05 1107 	mla	r1, r5, r7, r1
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   3c764:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   3c766:	f990 700d 	ldrsb.w	r7, [r0, #13]
   3c76a:	4417      	add	r7, r2
            res00 += lhs_value * rhs_value0;
   3c76c:	fb05 3307 	mla	r3, r5, r7, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3c770:	f104 050e 	add.w	r5, r4, #14
   3c774:	45aa      	cmp	sl, r5
            ++rhs_ptr;
   3c776:	f100 070e 	add.w	r7, r0, #14
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3c77a:	dd22      	ble.n	3c7c2 <arm_nn_vec_mat_mult_t_s8+0x45e>
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
   3c77c:	f917 700a 	ldrsb.w	r7, [r7, sl]
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3c780:	f996 500e 	ldrsb.w	r5, [r6, #14]
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
   3c784:	4417      	add	r7, r2
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3c786:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   3c788:	4415      	add	r5, r2
            res01 += lhs_value * rhs_value1;
   3c78a:	fb05 1107 	mla	r1, r5, r7, r1
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   3c78e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   3c790:	f990 700e 	ldrsb.w	r7, [r0, #14]
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3c794:	340f      	adds	r4, #15
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   3c796:	4417      	add	r7, r2
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3c798:	45a2      	cmp	sl, r4
            res00 += lhs_value * rhs_value0;
   3c79a:	fb05 3307 	mla	r3, r5, r7, r3
            ++rhs_ptr;
   3c79e:	f100 050f 	add.w	r5, r0, #15
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3c7a2:	dd0e      	ble.n	3c7c2 <arm_nn_vec_mat_mult_t_s8+0x45e>
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3c7a4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   3c7a6:	f996 400f 	ldrsb.w	r4, [r6, #15]
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   3c7aa:	f990 000f 	ldrsb.w	r0, [r0, #15]
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
   3c7ae:	f915 500a 	ldrsb.w	r5, [r5, sl]
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3c7b2:	4414      	add	r4, r2
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   3c7b4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   3c7b6:	4410      	add	r0, r2
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
   3c7b8:	4415      	add	r5, r2
            res00 += lhs_value * rhs_value0;
   3c7ba:	fb04 3300 	mla	r3, r4, r0, r3
            res01 += lhs_value * rhs_value1;
   3c7be:	fb04 1105 	mla	r1, r4, r5, r1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3c7c2:	9d04      	ldr	r5, [sp, #16]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   3c7c4:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3c7c6:	40ab      	lsls	r3, r5
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   3c7c8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   3c7cc:	2400      	movs	r4, #0
   3c7ce:	fbc3 0406 	smlal	r0, r4, r3, r6
    result = (int32_t)(mult.long_long >> 31);
   3c7d2:	0fc3      	lsrs	r3, r0, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3c7d4:	9820      	ldr	r0, [sp, #128]	; 0x80
   3c7d6:	2800      	cmp	r0, #0
    result = (int32_t)(mult.long_long >> 31);
   3c7d8:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3c7dc:	f340 81ab 	ble.w	3cb36 <arm_nn_vec_mat_mult_t_s8+0x7d2>
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   3c7e0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3c7e2:	40a9      	lsls	r1, r5
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   3c7e4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   3c7e8:	2400      	movs	r4, #0
   3c7ea:	fbc2 0401 	smlal	r0, r4, r2, r1
    if (result < 0)
   3c7ee:	2b00      	cmp	r3, #0
    result = (int32_t)(mult.long_long >> 31);
   3c7f0:	ea4f 71d0 	mov.w	r1, r0, lsr #31
    if (result < 0)
   3c7f4:	f2c0 81cc 	blt.w	3cb90 <arm_nn_vec_mat_mult_t_s8+0x82c>
   3c7f8:	ea51 0144 	orrs.w	r1, r1, r4, lsl #1
   3c7fc:	f100 81ba 	bmi.w	3cb74 <arm_nn_vec_mat_mult_t_s8+0x810>
        res00 += dst_offset;
   3c800:	981e      	ldr	r0, [sp, #120]	; 0x78
   3c802:	4403      	add	r3, r0
        res01 += dst_offset;
   3c804:	4401      	add	r1, r0
        res00 = MAX(res00, activation_min);
   3c806:	9823      	ldr	r0, [sp, #140]	; 0x8c
   3c808:	4283      	cmp	r3, r0
   3c80a:	bfb8      	it	lt
   3c80c:	4603      	movlt	r3, r0
        res01 = MAX(res01, activation_min);
   3c80e:	4281      	cmp	r1, r0
   3c810:	bfb8      	it	lt
   3c812:	4601      	movlt	r1, r0
        res00 = MIN(res00, activation_max);
   3c814:	9824      	ldr	r0, [sp, #144]	; 0x90
   3c816:	4283      	cmp	r3, r0
   3c818:	bfa8      	it	ge
   3c81a:	4603      	movge	r3, r0
        *dst++ = (q7_t)res00;
   3c81c:	9803      	ldr	r0, [sp, #12]
   3c81e:	f800 3c02 	strb.w	r3, [r0, #-2]
        res01 = MIN(res01, activation_max);
   3c822:	9b24      	ldr	r3, [sp, #144]	; 0x90
   3c824:	4299      	cmp	r1, r3
   3c826:	bfa8      	it	ge
   3c828:	4619      	movge	r1, r3
        *dst++ = (q7_t)res01;
   3c82a:	f800 1c01 	strb.w	r1, [r0, #-1]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   3c82e:	1c83      	adds	r3, r0, #2
        rhs += 2 * rhs_cols;
   3c830:	9901      	ldr	r1, [sp, #4]
   3c832:	9805      	ldr	r0, [sp, #20]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   3c834:	9303      	str	r3, [sp, #12]
        rhs += 2 * rhs_cols;
   3c836:	4401      	add	r1, r0
   3c838:	9101      	str	r1, [sp, #4]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   3c83a:	9907      	ldr	r1, [sp, #28]
   3c83c:	428b      	cmp	r3, r1
   3c83e:	f47f add5 	bne.w	3c3ec <arm_nn_vec_mat_mult_t_s8+0x88>
   3c842:	9b11      	ldr	r3, [sp, #68]	; 0x44
   3c844:	085b      	lsrs	r3, r3, #1
        rhs += 2 * rhs_cols;
   3c846:	fb03 0100 	mla	r1, r3, r0, r0
   3c84a:	980e      	ldr	r0, [sp, #56]	; 0x38
   3c84c:	4408      	add	r0, r1
        *dst++ = (q7_t)res01;
   3c84e:	990f      	ldr	r1, [sp, #60]	; 0x3c
        rhs += 2 * rhs_cols;
   3c850:	900e      	str	r0, [sp, #56]	; 0x38
   3c852:	3301      	adds	r3, #1
        *dst++ = (q7_t)res01;
   3c854:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   3c858:	4662      	mov	r2, ip
   3c85a:	930f      	str	r3, [sp, #60]	; 0x3c
    }

    if (rhs_rows % 2)
   3c85c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   3c85e:	07db      	lsls	r3, r3, #31
   3c860:	f140 8165 	bpl.w	3cb2e <arm_nn_vec_mat_mult_t_s8+0x7ca>
    {
        const q7_t *lhs_ptr = &lhs[0];
        const q7_t *rhs_ptr = &rhs[0];

        q31_t res00 = 0;
        if (bias)
   3c864:	9b02      	ldr	r3, [sp, #8]
   3c866:	b103      	cbz	r3, 3c86a <arm_nn_vec_mat_mult_t_s8+0x506>
        {
            res00 = *bias++;
   3c868:	681b      	ldr	r3, [r3, #0]
        }

        int32_t rhs_cols_idx = 0;

        q31_t val0, val1, val2, val3;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   3c86a:	f1ba 0f0f 	cmp.w	sl, #15
   3c86e:	f340 81a6 	ble.w	3cbbe <arm_nn_vec_mat_mult_t_s8+0x85a>
   3c872:	f1aa 0810 	sub.w	r8, sl, #16
   3c876:	9906      	ldr	r1, [sp, #24]
   3c878:	980e      	ldr	r0, [sp, #56]	; 0x38
   3c87a:	ea4f 1818 	mov.w	r8, r8, lsr #4
   3c87e:	f108 0801 	add.w	r8, r8, #1
   3c882:	ea4f 1908 	mov.w	r9, r8, lsl #4
   3c886:	eb01 1608 	add.w	r6, r1, r8, lsl #4
    memcpy(&val, *in_q7, 4);
   3c88a:	6807      	ldr	r7, [r0, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   3c88c:	680c      	ldr	r4, [r1, #0]
  return (op1 >> op2) | (op1 << (32U - op2));
   3c88e:	ea4f 2537 	mov.w	r5, r7, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   3c892:	fa22 f787 	sxtab16	r7, r2, r7
   3c896:	fa22 fc85 	sxtab16	ip, r2, r5
  return (op1 >> op2) | (op1 << (32U - op2));
   3c89a:	ea4f 2534 	mov.w	r5, r4, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   3c89e:	fa2e f484 	sxtab16	r4, lr, r4
   3c8a2:	fa2e f585 	sxtab16	r5, lr, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   3c8a6:	fb24 3307 	smlad	r3, r4, r7, r3
   3c8aa:	fb25 350c 	smlad	r5, r5, ip, r3
   3c8ae:	6847      	ldr	r7, [r0, #4]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   3c8b0:	684b      	ldr	r3, [r1, #4]
  return (op1 >> op2) | (op1 << (32U - op2));
   3c8b2:	ea4f 2437 	mov.w	r4, r7, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   3c8b6:	fa22 f787 	sxtab16	r7, r2, r7
   3c8ba:	fa22 fc84 	sxtab16	ip, r2, r4
  return (op1 >> op2) | (op1 << (32U - op2));
   3c8be:	ea4f 2433 	mov.w	r4, r3, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   3c8c2:	fa2e f383 	sxtab16	r3, lr, r3
   3c8c6:	fa2e f484 	sxtab16	r4, lr, r4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   3c8ca:	fb23 5307 	smlad	r3, r3, r7, r5
   3c8ce:	fb24 340c 	smlad	r4, r4, ip, r3
   3c8d2:	6887      	ldr	r7, [r0, #8]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   3c8d4:	688b      	ldr	r3, [r1, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
   3c8d6:	ea4f 2537 	mov.w	r5, r7, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   3c8da:	fa22 f787 	sxtab16	r7, r2, r7
   3c8de:	fa22 fc85 	sxtab16	ip, r2, r5
  return (op1 >> op2) | (op1 << (32U - op2));
   3c8e2:	ea4f 2533 	mov.w	r5, r3, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   3c8e6:	fa2e f383 	sxtab16	r3, lr, r3
   3c8ea:	fa2e f585 	sxtab16	r5, lr, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   3c8ee:	fb23 4307 	smlad	r3, r3, r7, r4
   3c8f2:	fb25 350c 	smlad	r5, r5, ip, r3
   3c8f6:	f8d0 c00c 	ldr.w	ip, [r0, #12]
    *in_q7 += 4;
   3c8fa:	68cb      	ldr	r3, [r1, #12]
  return (op1 >> op2) | (op1 << (32U - op2));
   3c8fc:	ea4f 273c 	mov.w	r7, ip, ror #8
   3c900:	ea4f 2433 	mov.w	r4, r3, ror #8
   3c904:	3010      	adds	r0, #16
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   3c906:	3110      	adds	r1, #16
   3c908:	fa22 fc8c 	sxtab16	ip, r2, ip
   3c90c:	fa22 f787 	sxtab16	r7, r2, r7
   3c910:	fa2e f383 	sxtab16	r3, lr, r3
   3c914:	fa2e f484 	sxtab16	r4, lr, r4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   3c918:	fb23 530c 	smlad	r3, r3, ip, r5
   3c91c:	fb24 3307 	smlad	r3, r4, r7, r3
   3c920:	42b1      	cmp	r1, r6
   3c922:	d1b2      	bne.n	3c88a <arm_nn_vec_mat_mult_t_s8+0x526>
   3c924:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   3c926:	444a      	add	r2, r9
   3c928:	920e      	str	r2, [sp, #56]	; 0x38
   3c92a:	ea4f 1808 	mov.w	r8, r8, lsl #4
            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
            res00 = __SMLAD(val2, val0, res00);
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3c92e:	45c2      	cmp	sl, r8
   3c930:	f340 80d3 	ble.w	3cada <arm_nn_vec_mat_mult_t_s8+0x776>
        {
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3c934:	991c      	ldr	r1, [sp, #112]	; 0x70
   3c936:	f996 2000 	ldrsb.w	r2, [r6]
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   3c93a:	980e      	ldr	r0, [sp, #56]	; 0x38
   3c93c:	9c1d      	ldr	r4, [sp, #116]	; 0x74
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3c93e:	440a      	add	r2, r1
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   3c940:	f990 1000 	ldrsb.w	r1, [r0]
   3c944:	4421      	add	r1, r4

            res00 += lhs_value * rhs_value0;
   3c946:	fb01 3302 	mla	r3, r1, r2, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3c94a:	f108 0201 	add.w	r2, r8, #1
   3c94e:	4592      	cmp	sl, r2
   3c950:	f340 80c3 	ble.w	3cada <arm_nn_vec_mat_mult_t_s8+0x776>
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3c954:	991c      	ldr	r1, [sp, #112]	; 0x70
   3c956:	f996 2001 	ldrsb.w	r2, [r6, #1]
   3c95a:	440a      	add	r2, r1
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   3c95c:	f990 1001 	ldrsb.w	r1, [r0, #1]
   3c960:	4421      	add	r1, r4
            res00 += lhs_value * rhs_value0;
   3c962:	fb01 3302 	mla	r3, r1, r2, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3c966:	f108 0202 	add.w	r2, r8, #2
   3c96a:	4592      	cmp	sl, r2
   3c96c:	f340 80b5 	ble.w	3cada <arm_nn_vec_mat_mult_t_s8+0x776>
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3c970:	991c      	ldr	r1, [sp, #112]	; 0x70
   3c972:	f996 2002 	ldrsb.w	r2, [r6, #2]
   3c976:	440a      	add	r2, r1
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   3c978:	f990 1002 	ldrsb.w	r1, [r0, #2]
   3c97c:	4421      	add	r1, r4
            res00 += lhs_value * rhs_value0;
   3c97e:	fb01 3302 	mla	r3, r1, r2, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3c982:	f108 0203 	add.w	r2, r8, #3
   3c986:	4592      	cmp	sl, r2
   3c988:	f340 80a7 	ble.w	3cada <arm_nn_vec_mat_mult_t_s8+0x776>
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3c98c:	991c      	ldr	r1, [sp, #112]	; 0x70
   3c98e:	f996 2003 	ldrsb.w	r2, [r6, #3]
   3c992:	440a      	add	r2, r1
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   3c994:	f990 1003 	ldrsb.w	r1, [r0, #3]
   3c998:	4421      	add	r1, r4
            res00 += lhs_value * rhs_value0;
   3c99a:	fb01 3302 	mla	r3, r1, r2, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3c99e:	f108 0204 	add.w	r2, r8, #4
   3c9a2:	4592      	cmp	sl, r2
   3c9a4:	f340 8099 	ble.w	3cada <arm_nn_vec_mat_mult_t_s8+0x776>
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3c9a8:	991c      	ldr	r1, [sp, #112]	; 0x70
   3c9aa:	f996 2004 	ldrsb.w	r2, [r6, #4]
   3c9ae:	440a      	add	r2, r1
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   3c9b0:	f990 1004 	ldrsb.w	r1, [r0, #4]
   3c9b4:	4421      	add	r1, r4
            res00 += lhs_value * rhs_value0;
   3c9b6:	fb01 3302 	mla	r3, r1, r2, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3c9ba:	f108 0205 	add.w	r2, r8, #5
   3c9be:	4592      	cmp	sl, r2
   3c9c0:	f340 808b 	ble.w	3cada <arm_nn_vec_mat_mult_t_s8+0x776>
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3c9c4:	991c      	ldr	r1, [sp, #112]	; 0x70
   3c9c6:	f996 2005 	ldrsb.w	r2, [r6, #5]
   3c9ca:	440a      	add	r2, r1
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   3c9cc:	f990 1005 	ldrsb.w	r1, [r0, #5]
   3c9d0:	4421      	add	r1, r4
            res00 += lhs_value * rhs_value0;
   3c9d2:	fb01 3302 	mla	r3, r1, r2, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3c9d6:	f108 0206 	add.w	r2, r8, #6
   3c9da:	4592      	cmp	sl, r2
   3c9dc:	dd7d      	ble.n	3cada <arm_nn_vec_mat_mult_t_s8+0x776>
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3c9de:	991c      	ldr	r1, [sp, #112]	; 0x70
   3c9e0:	f996 2006 	ldrsb.w	r2, [r6, #6]
   3c9e4:	440a      	add	r2, r1
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   3c9e6:	f990 1006 	ldrsb.w	r1, [r0, #6]
   3c9ea:	4421      	add	r1, r4
            res00 += lhs_value * rhs_value0;
   3c9ec:	fb01 3302 	mla	r3, r1, r2, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3c9f0:	f108 0207 	add.w	r2, r8, #7
   3c9f4:	4592      	cmp	sl, r2
   3c9f6:	dd70      	ble.n	3cada <arm_nn_vec_mat_mult_t_s8+0x776>
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3c9f8:	991c      	ldr	r1, [sp, #112]	; 0x70
   3c9fa:	f996 2007 	ldrsb.w	r2, [r6, #7]
   3c9fe:	440a      	add	r2, r1
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   3ca00:	f990 1007 	ldrsb.w	r1, [r0, #7]
   3ca04:	4421      	add	r1, r4
            res00 += lhs_value * rhs_value0;
   3ca06:	fb01 3302 	mla	r3, r1, r2, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3ca0a:	f108 0208 	add.w	r2, r8, #8
   3ca0e:	4592      	cmp	sl, r2
   3ca10:	dd63      	ble.n	3cada <arm_nn_vec_mat_mult_t_s8+0x776>
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3ca12:	991c      	ldr	r1, [sp, #112]	; 0x70
   3ca14:	f996 2008 	ldrsb.w	r2, [r6, #8]
   3ca18:	440a      	add	r2, r1
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   3ca1a:	f990 1008 	ldrsb.w	r1, [r0, #8]
   3ca1e:	4421      	add	r1, r4
            res00 += lhs_value * rhs_value0;
   3ca20:	fb01 3302 	mla	r3, r1, r2, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3ca24:	f108 0209 	add.w	r2, r8, #9
   3ca28:	4592      	cmp	sl, r2
   3ca2a:	dd56      	ble.n	3cada <arm_nn_vec_mat_mult_t_s8+0x776>
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3ca2c:	991c      	ldr	r1, [sp, #112]	; 0x70
   3ca2e:	f996 2009 	ldrsb.w	r2, [r6, #9]
   3ca32:	440a      	add	r2, r1
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   3ca34:	f990 1009 	ldrsb.w	r1, [r0, #9]
   3ca38:	4421      	add	r1, r4
            res00 += lhs_value * rhs_value0;
   3ca3a:	fb01 3302 	mla	r3, r1, r2, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3ca3e:	f108 020a 	add.w	r2, r8, #10
   3ca42:	4592      	cmp	sl, r2
   3ca44:	dd49      	ble.n	3cada <arm_nn_vec_mat_mult_t_s8+0x776>
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3ca46:	991c      	ldr	r1, [sp, #112]	; 0x70
   3ca48:	f996 200a 	ldrsb.w	r2, [r6, #10]
   3ca4c:	440a      	add	r2, r1
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   3ca4e:	f990 100a 	ldrsb.w	r1, [r0, #10]
   3ca52:	4421      	add	r1, r4
            res00 += lhs_value * rhs_value0;
   3ca54:	fb01 3302 	mla	r3, r1, r2, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3ca58:	f108 020b 	add.w	r2, r8, #11
   3ca5c:	4592      	cmp	sl, r2
   3ca5e:	dd3c      	ble.n	3cada <arm_nn_vec_mat_mult_t_s8+0x776>
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3ca60:	991c      	ldr	r1, [sp, #112]	; 0x70
   3ca62:	f996 200b 	ldrsb.w	r2, [r6, #11]
   3ca66:	440a      	add	r2, r1
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   3ca68:	f990 100b 	ldrsb.w	r1, [r0, #11]
   3ca6c:	4421      	add	r1, r4
            res00 += lhs_value * rhs_value0;
   3ca6e:	fb01 3302 	mla	r3, r1, r2, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3ca72:	f108 020c 	add.w	r2, r8, #12
   3ca76:	4592      	cmp	sl, r2
   3ca78:	dd2f      	ble.n	3cada <arm_nn_vec_mat_mult_t_s8+0x776>
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3ca7a:	991c      	ldr	r1, [sp, #112]	; 0x70
   3ca7c:	f996 200c 	ldrsb.w	r2, [r6, #12]
   3ca80:	440a      	add	r2, r1
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   3ca82:	f990 100c 	ldrsb.w	r1, [r0, #12]
   3ca86:	4421      	add	r1, r4
            res00 += lhs_value * rhs_value0;
   3ca88:	fb01 3302 	mla	r3, r1, r2, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3ca8c:	f108 020d 	add.w	r2, r8, #13
   3ca90:	4592      	cmp	sl, r2
   3ca92:	dd22      	ble.n	3cada <arm_nn_vec_mat_mult_t_s8+0x776>
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3ca94:	991c      	ldr	r1, [sp, #112]	; 0x70
   3ca96:	f996 200d 	ldrsb.w	r2, [r6, #13]
   3ca9a:	440a      	add	r2, r1
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   3ca9c:	f990 100d 	ldrsb.w	r1, [r0, #13]
   3caa0:	4421      	add	r1, r4
            res00 += lhs_value * rhs_value0;
   3caa2:	fb01 3302 	mla	r3, r1, r2, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3caa6:	f108 020e 	add.w	r2, r8, #14
   3caaa:	4592      	cmp	sl, r2
   3caac:	dd15      	ble.n	3cada <arm_nn_vec_mat_mult_t_s8+0x776>
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3caae:	991c      	ldr	r1, [sp, #112]	; 0x70
   3cab0:	f996 200e 	ldrsb.w	r2, [r6, #14]
   3cab4:	440a      	add	r2, r1
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   3cab6:	f990 100e 	ldrsb.w	r1, [r0, #14]
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3caba:	f108 080f 	add.w	r8, r8, #15
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   3cabe:	4421      	add	r1, r4
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3cac0:	45c2      	cmp	sl, r8
            res00 += lhs_value * rhs_value0;
   3cac2:	fb01 3302 	mla	r3, r1, r2, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3cac6:	dd08      	ble.n	3cada <arm_nn_vec_mat_mult_t_s8+0x776>
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   3cac8:	f990 200f 	ldrsb.w	r2, [r0, #15]
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3cacc:	f996 100f 	ldrsb.w	r1, [r6, #15]
   3cad0:	981c      	ldr	r0, [sp, #112]	; 0x70
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   3cad2:	4422      	add	r2, r4
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3cad4:	4401      	add	r1, r0
            res00 += lhs_value * rhs_value0;
   3cad6:	fb01 3302 	mla	r3, r1, r2, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3cada:	9a20      	ldr	r2, [sp, #128]	; 0x80
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   3cadc:	981f      	ldr	r0, [sp, #124]	; 0x7c
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3cade:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   3cae2:	4093      	lsls	r3, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   3cae4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   3cae8:	2200      	movs	r2, #0
   3caea:	fbc3 1200 	smlal	r1, r2, r3, r0
    result = (int32_t)(mult.long_long >> 31);
   3caee:	0fcb      	lsrs	r3, r1, #31
   3caf0:	ea43 0242 	orr.w	r2, r3, r2, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3caf4:	9b20      	ldr	r3, [sp, #128]	; 0x80
   3caf6:	2b00      	cmp	r3, #0
   3caf8:	dc0d      	bgt.n	3cb16 <arm_nn_vec_mat_mult_t_s8+0x7b2>
   3cafa:	425b      	negs	r3, r3
    const q31_t remainder_mask = (1 << exponent) - 1;
   3cafc:	2101      	movs	r1, #1
   3cafe:	4099      	lsls	r1, r3
   3cb00:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
   3cb02:	ea02 0001 	and.w	r0, r2, r1
    if (result < 0)
   3cb06:	411a      	asrs	r2, r3
    q31_t threshold = remainder_mask >> 1;
   3cb08:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
   3cb0c:	bf48      	it	mi
   3cb0e:	3101      	addmi	r1, #1
    if (remainder > threshold)
   3cb10:	4288      	cmp	r0, r1
        result++;
   3cb12:	bfc8      	it	gt
   3cb14:	3201      	addgt	r2, #1

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);

        // Add offset
        res00 += dst_offset;
   3cb16:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   3cb18:	4413      	add	r3, r2

        // Clamp the result
        res00 = MAX(res00, activation_min);
   3cb1a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   3cb1c:	4293      	cmp	r3, r2
   3cb1e:	bfb8      	it	lt
   3cb20:	4613      	movlt	r3, r2
        res00 = MIN(res00, activation_max);
   3cb22:	9a24      	ldr	r2, [sp, #144]	; 0x90
   3cb24:	4293      	cmp	r3, r2
   3cb26:	bfa8      	it	ge
   3cb28:	4613      	movge	r3, r2

        *dst = (q7_t)res00;
   3cb2a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   3cb2c:	7013      	strb	r3, [r2, #0]
        *dst = (q7_t)res00;
    }
#endif

    return ARM_MATH_SUCCESS;
}
   3cb2e:	2000      	movs	r0, #0
   3cb30:	b013      	add	sp, #76	; 0x4c
   3cb32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int32_t remainder = remainder_mask & dividend;
   3cb36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    if (result < 0)
   3cb38:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    int32_t remainder = remainder_mask & dividend;
   3cb3a:	ea03 0002 	and.w	r0, r3, r2
    if (result < 0)
   3cb3e:	4133      	asrs	r3, r6
   3cb40:	d42b      	bmi.n	3cb9a <arm_nn_vec_mat_mult_t_s8+0x836>
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   3cb42:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3cb44:	fa01 f505 	lsl.w	r5, r1, r5
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   3cb48:	2400      	movs	r4, #0
   3cb4a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   3cb4e:	fbc7 1405 	smlal	r1, r4, r7, r5
    result = (int32_t)(mult.long_long >> 31);
   3cb52:	0fc9      	lsrs	r1, r1, #31
   3cb54:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
    q31_t threshold = remainder_mask >> 1;
   3cb58:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    int32_t remainder = remainder_mask & dividend;
   3cb5a:	ea02 0401 	and.w	r4, r2, r1
    result = dividend >> exponent;
   3cb5e:	4131      	asrs	r1, r6
    if (remainder > threshold)
   3cb60:	42a8      	cmp	r0, r5
        result++;
   3cb62:	980b      	ldr	r0, [sp, #44]	; 0x2c
   3cb64:	bfc8      	it	gt
   3cb66:	3301      	addgt	r3, #1
    if (result < 0)
   3cb68:	2900      	cmp	r1, #0
   3cb6a:	db05      	blt.n	3cb78 <arm_nn_vec_mat_mult_t_s8+0x814>
    if (remainder > threshold)
   3cb6c:	42a0      	cmp	r0, r4
        result++;
   3cb6e:	bfb8      	it	lt
   3cb70:	3101      	addlt	r1, #1
   3cb72:	e645      	b.n	3c800 <arm_nn_vec_mat_mult_t_s8+0x49c>
    if (result < 0)
   3cb74:	2400      	movs	r4, #0
    q31_t threshold = remainder_mask >> 1;
   3cb76:	4620      	mov	r0, r4
        threshold++;
   3cb78:	3001      	adds	r0, #1
   3cb7a:	e7f7      	b.n	3cb6c <arm_nn_vec_mat_mult_t_s8+0x808>
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   3cb7c:	f1ba 0f0f 	cmp.w	sl, #15
   3cb80:	4603      	mov	r3, r0
        q31_t res01 = 0;
   3cb82:	4601      	mov	r1, r0
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   3cb84:	9801      	ldr	r0, [sp, #4]
   3cb86:	f73f ac3e 	bgt.w	3c406 <arm_nn_vec_mat_mult_t_s8+0xa2>
        const q7_t *lhs_ptr = &lhs[0];
   3cb8a:	9e06      	ldr	r6, [sp, #24]
        int32_t rhs_cols_idx = 0;
   3cb8c:	2400      	movs	r4, #0
   3cb8e:	e4ca      	b.n	3c526 <arm_nn_vec_mat_mult_t_s8+0x1c2>
    result = (int32_t)(mult.long_long >> 31);
   3cb90:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
   3cb94:	2400      	movs	r4, #0
    q31_t threshold = remainder_mask >> 1;
   3cb96:	4620      	mov	r0, r4
   3cb98:	e7e6      	b.n	3cb68 <arm_nn_vec_mat_mult_t_s8+0x804>
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   3cb9a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3cb9c:	fa01 f405 	lsl.w	r4, r1, r5
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   3cba0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   3cba4:	2500      	movs	r5, #0
   3cba6:	fbc2 1504 	smlal	r1, r5, r2, r4
    result = (int32_t)(mult.long_long >> 31);
   3cbaa:	0fc9      	lsrs	r1, r1, #31
    int32_t remainder = remainder_mask & dividend;
   3cbac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    result = (int32_t)(mult.long_long >> 31);
   3cbae:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
    int32_t remainder = remainder_mask & dividend;
   3cbb2:	ea02 0401 	and.w	r4, r2, r1
    result = dividend >> exponent;
   3cbb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        threshold++;
   3cbb8:	9d10      	ldr	r5, [sp, #64]	; 0x40
    result = dividend >> exponent;
   3cbba:	4111      	asrs	r1, r2
        threshold++;
   3cbbc:	e7d0      	b.n	3cb60 <arm_nn_vec_mat_mult_t_s8+0x7fc>
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   3cbbe:	9e06      	ldr	r6, [sp, #24]
   3cbc0:	f04f 0800 	mov.w	r8, #0
   3cbc4:	e6b3      	b.n	3c92e <arm_nn_vec_mat_mult_t_s8+0x5ca>
   3cbc6:	bf00      	nop

0003cbc8 <arm_avgpool_s8_get_buffer_size>:
    return (ch_src * sizeof(int32_t));
#else
    (void)ch_src;
    return 0;
#endif
}
   3cbc8:	0088      	lsls	r0, r1, #2
   3cbca:	4770      	bx	lr

0003cbcc <arm_max_pool_s8>:
                           const cmsis_nn_dims *input_dims,
                           const q7_t *src,
                           const cmsis_nn_dims *filter_dims,
                           const cmsis_nn_dims *output_dims,
                           q7_t *dst)
{
   3cbcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3cbd0:	b0a5      	sub	sp, #148	; 0x94
   3cbd2:	e9dd 042e 	ldrd	r0, r4, [sp, #184]	; 0xb8
    const int32_t input_y = input_dims->h;
    const int32_t input_x = input_dims->w;
    const int32_t output_y = output_dims->h;
   3cbd6:	6865      	ldr	r5, [r4, #4]
    const int32_t output_x = output_dims->w;
   3cbd8:	68a4      	ldr	r4, [r4, #8]
   3cbda:	940d      	str	r4, [sp, #52]	; 0x34
    const int32_t input_x = input_dims->w;
   3cbdc:	e9d2 4601 	ldrd	r4, r6, [r2, #4]
   3cbe0:	9615      	str	r6, [sp, #84]	; 0x54
    const int32_t kernel_x = filter_dims->w;
    const int32_t pad_y = pool_params->padding.h;
    const int32_t pad_x = pool_params->padding.w;
    const int32_t act_min = pool_params->activation.min;
    const int32_t act_max = pool_params->activation.max;
    const int32_t channel_in = input_dims->c;
   3cbe2:	68d6      	ldr	r6, [r2, #12]
    const int32_t stride_y = pool_params->stride.h;
   3cbe4:	684a      	ldr	r2, [r1, #4]
   3cbe6:	921e      	str	r2, [sp, #120]	; 0x78
    const int32_t stride_x = pool_params->stride.w;
   3cbe8:	680a      	ldr	r2, [r1, #0]
   3cbea:	920f      	str	r2, [sp, #60]	; 0x3c
    const int32_t kernel_y = filter_dims->h;
   3cbec:	6842      	ldr	r2, [r0, #4]
   3cbee:	921f      	str	r2, [sp, #124]	; 0x7c
    const int32_t kernel_x = filter_dims->w;
   3cbf0:	6882      	ldr	r2, [r0, #8]
   3cbf2:	9210      	str	r2, [sp, #64]	; 0x40
    const int32_t pad_x = pool_params->padding.w;
   3cbf4:	688a      	ldr	r2, [r1, #8]
{
   3cbf6:	931d      	str	r3, [sp, #116]	; 0x74
    const int32_t pad_x = pool_params->padding.w;
   3cbf8:	9217      	str	r2, [sp, #92]	; 0x5c
    const int32_t pad_y = pool_params->padding.h;
   3cbfa:	68cb      	ldr	r3, [r1, #12]
    const int32_t act_min = pool_params->activation.min;
   3cbfc:	690a      	ldr	r2, [r1, #16]
   3cbfe:	9218      	str	r2, [sp, #96]	; 0x60
    const int32_t act_max = pool_params->activation.max;
   3cc00:	694a      	ldr	r2, [r1, #20]
   3cc02:	9219      	str	r2, [sp, #100]	; 0x64
    (void)ctx;
    q7_t *dst_base = dst;

    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
   3cc04:	2d00      	cmp	r5, #0
   3cc06:	f1c3 0200 	rsb	r2, r3, #0
    const int32_t output_y = output_dims->h;
   3cc0a:	9516      	str	r5, [sp, #88]	; 0x58
    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
   3cc0c:	9211      	str	r2, [sp, #68]	; 0x44
   3cc0e:	f340 80fe 	ble.w	3ce0e <arm_max_pool_s8+0x242>
    {
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
   3cc12:	9917      	ldr	r1, [sp, #92]	; 0x5c
   3cc14:	4248      	negs	r0, r1
   3cc16:	9021      	str	r0, [sp, #132]	; 0x84
   3cc18:	980d      	ldr	r0, [sp, #52]	; 0x34
    int32_t cnt = length >> 2;
   3cc1a:	10b2      	asrs	r2, r6, #2
   3cc1c:	2800      	cmp	r0, #0
   3cc1e:	9204      	str	r2, [sp, #16]
    cnt = length & 0x3;
   3cc20:	f006 0503 	and.w	r5, r6, #3
   3cc24:	f340 80f3 	ble.w	3ce0e <arm_max_pool_s8+0x242>
   3cc28:	9314      	str	r3, [sp, #80]	; 0x50
   3cc2a:	18e3      	adds	r3, r4, r3
   3cc2c:	9312      	str	r3, [sp, #72]	; 0x48
   3cc2e:	ebc2 7382 	rsb	r3, r2, r2, lsl #30
   3cc32:	009b      	lsls	r3, r3, #2
   3cc34:	9301      	str	r3, [sp, #4]
   3cc36:	fb06 f300 	mul.w	r3, r6, r0
   3cc3a:	9320      	str	r3, [sp, #128]	; 0x80
   3cc3c:	0093      	lsls	r3, r2, #2
   3cc3e:	931b      	str	r3, [sp, #108]	; 0x6c
   3cc40:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   3cc42:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   3cc46:	9313      	str	r3, [sp, #76]	; 0x4c
   3cc48:	9b15      	ldr	r3, [sp, #84]	; 0x54
   3cc4a:	fb03 f206 	mul.w	r2, r3, r6
   3cc4e:	9208      	str	r2, [sp, #32]
   3cc50:	440b      	add	r3, r1
    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
   3cc52:	2200      	movs	r2, #0
   3cc54:	921a      	str	r2, [sp, #104]	; 0x68
   3cc56:	9322      	str	r3, [sp, #136]	; 0x88
   3cc58:	46b0      	mov	r8, r6
   3cc5a:	462f      	mov	r7, r5
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
   3cc5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   3cc5e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   3cc60:	2b00      	cmp	r3, #0
   3cc62:	bfc8      	it	gt
   3cc64:	2200      	movgt	r2, #0
   3cc66:	18d3      	adds	r3, r2, r3
   3cc68:	920e      	str	r2, [sp, #56]	; 0x38
   3cc6a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   3cc6c:	fb02 f303 	mul.w	r3, r2, r3
   3cc70:	931c      	str	r3, [sp, #112]	; 0x70
            /* Condition for kernel start dimension: (base_idx_<x,y> + kernel_<x,y>_start) >= 0 */
            const int32_t ker_y_start = MAX(0, -base_idx_y);
            const int32_t ker_x_start = MAX(0, -base_idx_x);

            /* Condition for kernel end dimension: (base_idx_<x,y> + kernel_<x,y>_end) < dim_src_<width,height> */
            const int32_t kernel_y_end = MIN(kernel_y, input_y - base_idx_y);
   3cc72:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   3cc74:	9b12      	ldr	r3, [sp, #72]	; 0x48
   3cc76:	4293      	cmp	r3, r2
   3cc78:	bfa8      	it	ge
   3cc7a:	4613      	movge	r3, r2
   3cc7c:	9307      	str	r3, [sp, #28]
   3cc7e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   3cc80:	930b      	str	r3, [sp, #44]	; 0x2c
   3cc82:	9b22      	ldr	r3, [sp, #136]	; 0x88
   3cc84:	930a      	str	r3, [sp, #40]	; 0x28
   3cc86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   3cc88:	9305      	str	r3, [sp, #20]
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
   3cc8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   3cc8c:	9309      	str	r3, [sp, #36]	; 0x24
   3cc8e:	2300      	movs	r3, #0
   3cc90:	930c      	str	r3, [sp, #48]	; 0x30
   3cc92:	9a01      	ldr	r2, [sp, #4]
   3cc94:	9805      	ldr	r0, [sp, #20]
            const int32_t ker_x_start = MAX(0, -base_idx_x);
   3cc96:	9909      	ldr	r1, [sp, #36]	; 0x24
   3cc98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   3cc9a:	eb02 0a00 	add.w	sl, r2, r0
            const int32_t kernel_x_end = MIN(kernel_x, input_x - base_idx_x);
   3cc9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   3cca0:	9810      	ldr	r0, [sp, #64]	; 0x40
            const int32_t ker_x_start = MAX(0, -base_idx_x);
   3cca2:	2900      	cmp	r1, #0
   3cca4:	bfc8      	it	gt
   3cca6:	2300      	movgt	r3, #0
            const int32_t kernel_x_end = MIN(kernel_x, input_x - base_idx_x);
   3cca8:	4282      	cmp	r2, r0
   3ccaa:	bfa8      	it	ge
   3ccac:	4602      	movge	r2, r0
   3ccae:	4691      	mov	r9, r2

            int count = 0;

            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
   3ccb0:	9807      	ldr	r0, [sp, #28]
   3ccb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
            const int32_t ker_x_start = MAX(0, -base_idx_x);
   3ccb4:	9303      	str	r3, [sp, #12]
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
   3ccb6:	4282      	cmp	r2, r0
   3ccb8:	da7f      	bge.n	3cdba <arm_max_pool_s8+0x1ee>
   3ccba:	454b      	cmp	r3, r9
   3ccbc:	da7d      	bge.n	3cdba <arm_max_pool_s8+0x1ee>
   3ccbe:	440b      	add	r3, r1
   3ccc0:	991c      	ldr	r1, [sp, #112]	; 0x70
   3ccc2:	9206      	str	r2, [sp, #24]
   3ccc4:	440b      	add	r3, r1
   3ccc6:	991b      	ldr	r1, [sp, #108]	; 0x6c
   3ccc8:	fb08 1303 	mla	r3, r8, r3, r1
   3cccc:	991d      	ldr	r1, [sp, #116]	; 0x74
   3ccce:	18cb      	adds	r3, r1, r3
   3ccd0:	9302      	str	r3, [sp, #8]
            int count = 0;
   3ccd2:	2300      	movs	r3, #0
            {
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
                {
                    const q7_t *start = src + channel_in * (k_x + base_idx_x + (k_y + base_idx_y) * input_x);
   3ccd4:	e9dd 2101 	ldrd	r2, r1, [sp, #4]
   3ccd8:	1851      	adds	r1, r2, r1

                    if (count == 0)
   3ccda:	2b00      	cmp	r3, #0
   3ccdc:	f040 810d 	bne.w	3cefa <arm_max_pool_s8+0x32e>
                    {
                        memcpy(dst, start, channel_in);
   3cce0:	4642      	mov	r2, r8
   3cce2:	4650      	mov	r0, sl
   3cce4:	f7db fa8c 	bl	18200 <memcpy>
                        count++;
   3cce8:	e9dd ce02 	ldrd	ip, lr, [sp, #8]
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
   3ccec:	f10e 0e01 	add.w	lr, lr, #1
   3ccf0:	45f1      	cmp	r9, lr
   3ccf2:	44c4      	add	ip, r8
   3ccf4:	d055      	beq.n	3cda2 <arm_max_pool_s8+0x1d6>
                    const q7_t *start = src + channel_in * (k_x + base_idx_x + (k_y + base_idx_y) * input_x);
   3ccf6:	9b01      	ldr	r3, [sp, #4]
   3ccf8:	eb0c 0103 	add.w	r1, ip, r3
    while (cnt > 0l)
   3ccfc:	9b04      	ldr	r3, [sp, #16]
   3ccfe:	2b00      	cmp	r3, #0
   3cd00:	bfd8      	it	le
   3cd02:	4653      	movle	r3, sl
   3cd04:	dd2d      	ble.n	3cd62 <arm_max_pool_s8+0x196>
   3cd06:	4652      	mov	r2, sl
        write_q7x4_ia(&dst, ref_max.word);
   3cd08:	f851 4b04 	ldr.w	r4, [r1], #4
   3cd0c:	6813      	ldr	r3, [r2, #0]
    return (val);
   3cd0e:	b266      	sxtb	r6, r4
   3cd10:	b25d      	sxtb	r5, r3
   3cd12:	42b5      	cmp	r5, r6
   3cd14:	bfb8      	it	lt
   3cd16:	4635      	movlt	r5, r6
   3cd18:	f344 2b07 	sbfx	fp, r4, #8, #8
   3cd1c:	f343 2607 	sbfx	r6, r3, #8, #8
        ref_max.word = arm_nn_read_q7x4(dst);
   3cd20:	4618      	mov	r0, r3
        if (comp_max.bytes[0] > ref_max.bytes[0])
   3cd22:	455e      	cmp	r6, fp
   3cd24:	bfb8      	it	lt
   3cd26:	465e      	movlt	r6, fp
   3cd28:	f365 0307 	bfi	r3, r5, #0, #8
        if (comp_max.bytes[1] > ref_max.bytes[1])
   3cd2c:	f344 4b07 	sbfx	fp, r4, #16, #8
   3cd30:	f340 4507 	sbfx	r5, r0, #16, #8
   3cd34:	455d      	cmp	r5, fp
        if (comp_max.bytes[3] > ref_max.bytes[3])
   3cd36:	ea4f 6020 	mov.w	r0, r0, asr #24
   3cd3a:	bfb8      	it	lt
   3cd3c:	465d      	movlt	r5, fp
   3cd3e:	f366 230f 	bfi	r3, r6, #8, #8
   3cd42:	ebb0 6f24 	cmp.w	r0, r4, asr #24
   3cd46:	f365 4317 	bfi	r3, r5, #16, #8
  q7_t ** pQ7,
  q31_t   value)
{
  q31_t val = value;
#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (*pQ7, &val, 4);
   3cd4a:	ea4f 6524 	mov.w	r5, r4, asr #24
   3cd4e:	f280 80cc 	bge.w	3ceea <arm_max_pool_s8+0x31e>
   3cd52:	f365 631f 	bfi	r3, r5, #24, #8
    while (cnt > 0l)
   3cd56:	4561      	cmp	r1, ip
   3cd58:	f842 3b04 	str.w	r3, [r2], #4
   3cd5c:	d1d4      	bne.n	3cd08 <arm_max_pool_s8+0x13c>
  (*pQ7)[1] = (val >> 8) & 0x0FF;
  (*pQ7)[2] = (val >> 16) & 0x0FF;
  (*pQ7)[3] = (val >> 24) & 0x0FF;

#endif
  *pQ7 += 4;
   3cd5e:	9b05      	ldr	r3, [sp, #20]
    *in_q7 += 4;
   3cd60:	4661      	mov	r1, ip
    while (cnt > 0l)
   3cd62:	2f00      	cmp	r7, #0
   3cd64:	d0c2      	beq.n	3ccec <arm_max_pool_s8+0x120>
        if (*src > *dst)
   3cd66:	f991 2000 	ldrsb.w	r2, [r1]
   3cd6a:	f993 0000 	ldrsb.w	r0, [r3]
   3cd6e:	4290      	cmp	r0, r2
            *dst = *src;
   3cd70:	bfb8      	it	lt
   3cd72:	701a      	strblt	r2, [r3, #0]
    while (cnt > 0l)
   3cd74:	2f01      	cmp	r7, #1
   3cd76:	d0b9      	beq.n	3ccec <arm_max_pool_s8+0x120>
        if (*src > *dst)
   3cd78:	f991 2001 	ldrsb.w	r2, [r1, #1]
   3cd7c:	f993 0001 	ldrsb.w	r0, [r3, #1]
   3cd80:	4290      	cmp	r0, r2
            *dst = *src;
   3cd82:	bfb8      	it	lt
   3cd84:	705a      	strblt	r2, [r3, #1]
    while (cnt > 0l)
   3cd86:	2f02      	cmp	r7, #2
   3cd88:	d0b0      	beq.n	3ccec <arm_max_pool_s8+0x120>
        if (*src > *dst)
   3cd8a:	f991 2002 	ldrsb.w	r2, [r1, #2]
   3cd8e:	f993 1002 	ldrsb.w	r1, [r3, #2]
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
   3cd92:	f10e 0e01 	add.w	lr, lr, #1
        if (*src > *dst)
   3cd96:	4291      	cmp	r1, r2
            *dst = *src;
   3cd98:	bfb8      	it	lt
   3cd9a:	709a      	strblt	r2, [r3, #2]
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
   3cd9c:	45f1      	cmp	r9, lr
   3cd9e:	44c4      	add	ip, r8
   3cda0:	d1a9      	bne.n	3ccf6 <arm_max_pool_s8+0x12a>
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
   3cda2:	9b02      	ldr	r3, [sp, #8]
   3cda4:	9908      	ldr	r1, [sp, #32]
   3cda6:	9a06      	ldr	r2, [sp, #24]
   3cda8:	440b      	add	r3, r1
   3cdaa:	9907      	ldr	r1, [sp, #28]
   3cdac:	9302      	str	r3, [sp, #8]
   3cdae:	3201      	adds	r2, #1
   3cdb0:	4291      	cmp	r1, r2
   3cdb2:	9206      	str	r2, [sp, #24]
   3cdb4:	f04f 0301 	mov.w	r3, #1
   3cdb8:	d18c      	bne.n	3ccd4 <arm_max_pool_s8+0x108>
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
   3cdba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   3cdbc:	9909      	ldr	r1, [sp, #36]	; 0x24
   3cdbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   3cdc0:	4411      	add	r1, r2
   3cdc2:	9109      	str	r1, [sp, #36]	; 0x24
   3cdc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   3cdc6:	1a89      	subs	r1, r1, r2
   3cdc8:	910b      	str	r1, [sp, #44]	; 0x2c
   3cdca:	990a      	ldr	r1, [sp, #40]	; 0x28
   3cdcc:	1a8a      	subs	r2, r1, r2
   3cdce:	920a      	str	r2, [sp, #40]	; 0x28
   3cdd0:	9a05      	ldr	r2, [sp, #20]
   3cdd2:	4442      	add	r2, r8
   3cdd4:	9205      	str	r2, [sp, #20]
   3cdd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   3cdd8:	3301      	adds	r3, #1
   3cdda:	429a      	cmp	r2, r3
   3cddc:	930c      	str	r3, [sp, #48]	; 0x30
   3cdde:	f47f af58 	bne.w	3cc92 <arm_max_pool_s8+0xc6>
    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
   3cde2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   3cde4:	9911      	ldr	r1, [sp, #68]	; 0x44
   3cde6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   3cde8:	4411      	add	r1, r2
   3cdea:	9111      	str	r1, [sp, #68]	; 0x44
   3cdec:	9914      	ldr	r1, [sp, #80]	; 0x50
   3cdee:	1a89      	subs	r1, r1, r2
   3cdf0:	9114      	str	r1, [sp, #80]	; 0x50
   3cdf2:	9912      	ldr	r1, [sp, #72]	; 0x48
   3cdf4:	1a8a      	subs	r2, r1, r2
   3cdf6:	9212      	str	r2, [sp, #72]	; 0x48
   3cdf8:	9920      	ldr	r1, [sp, #128]	; 0x80
   3cdfa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   3cdfc:	440a      	add	r2, r1
   3cdfe:	9213      	str	r2, [sp, #76]	; 0x4c
   3ce00:	9a16      	ldr	r2, [sp, #88]	; 0x58
   3ce02:	3301      	adds	r3, #1
   3ce04:	429a      	cmp	r2, r3
   3ce06:	931a      	str	r3, [sp, #104]	; 0x68
   3ce08:	f47f af28 	bne.w	3cc5c <arm_max_pool_s8+0x90>
   3ce0c:	4646      	mov	r6, r8
            /* 'count' is expected to be non-zero here. */
            dst += channel_in;
        }
    }

    clamp_output(dst_base, output_x * output_y * channel_in, act_min, act_max);
   3ce0e:	9a16      	ldr	r2, [sp, #88]	; 0x58
   3ce10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   3ce12:	fb03 f202 	mul.w	r2, r3, r2
   3ce16:	fb06 f202 	mul.w	r2, r6, r2
    int32_t cnt = length >> 2;
   3ce1a:	1090      	asrs	r0, r2, #2
    while (cnt > 0l)
   3ce1c:	2800      	cmp	r0, #0
   3ce1e:	dd3a      	ble.n	3ce96 <arm_max_pool_s8+0x2ca>
   3ce20:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   3ce22:	9c23      	ldr	r4, [sp, #140]	; 0x8c
   3ce24:	e9dd 5618 	ldrd	r5, r6, [sp, #96]	; 0x60
   3ce28:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   3ce2c:	461f      	mov	r7, r3
    memcpy(&val, in_q7, 4);
   3ce2e:	683b      	ldr	r3, [r7, #0]
        in.bytes[0] = MAX(in.bytes[0], act_min);
   3ce30:	fa4f fe83 	sxtb.w	lr, r3
   3ce34:	45ae      	cmp	lr, r5
        in.bytes[1] = MAX(in.bytes[1], act_min);
   3ce36:	f343 2c07 	sbfx	ip, r3, #8, #8
        in.bytes[0] = MAX(in.bytes[0], act_min);
   3ce3a:	bfb8      	it	lt
   3ce3c:	46ae      	movlt	lr, r5
        in.bytes[0] = MIN(in.bytes[0], act_max);
   3ce3e:	fa4f fe8e 	sxtb.w	lr, lr
        in.bytes[1] = MAX(in.bytes[1], act_min);
   3ce42:	45ac      	cmp	ip, r5
        in.bytes[2] = MAX(in.bytes[2], act_min);
   3ce44:	f343 4107 	sbfx	r1, r3, #16, #8
        in.bytes[1] = MAX(in.bytes[1], act_min);
   3ce48:	bfb8      	it	lt
   3ce4a:	46ac      	movlt	ip, r5
        in.bytes[0] = MIN(in.bytes[0], act_max);
   3ce4c:	45b6      	cmp	lr, r6
        in.bytes[1] = MIN(in.bytes[1], act_max);
   3ce4e:	fa4f fc8c 	sxtb.w	ip, ip
        in.bytes[0] = MIN(in.bytes[0], act_max);
   3ce52:	bfa8      	it	ge
   3ce54:	46b6      	movge	lr, r6
        in.bytes[2] = MAX(in.bytes[2], act_min);
   3ce56:	42a9      	cmp	r1, r5
        in.bytes[3] = MAX(in.bytes[3], act_min);
   3ce58:	ea4f 6323 	mov.w	r3, r3, asr #24
        in.bytes[2] = MAX(in.bytes[2], act_min);
   3ce5c:	bfb8      	it	lt
   3ce5e:	4629      	movlt	r1, r5
        in.bytes[1] = MIN(in.bytes[1], act_max);
   3ce60:	45b4      	cmp	ip, r6
   3ce62:	bfa8      	it	ge
   3ce64:	46b4      	movge	ip, r6
        in.bytes[3] = MAX(in.bytes[3], act_min);
   3ce66:	42ab      	cmp	r3, r5
        in.bytes[2] = MIN(in.bytes[2], act_max);
   3ce68:	b249      	sxtb	r1, r1
        in.bytes[3] = MAX(in.bytes[3], act_min);
   3ce6a:	bfb8      	it	lt
   3ce6c:	462b      	movlt	r3, r5
        in.bytes[3] = MIN(in.bytes[3], act_max);
   3ce6e:	b25b      	sxtb	r3, r3
        in.bytes[2] = MIN(in.bytes[2], act_max);
   3ce70:	42b1      	cmp	r1, r6
        in.bytes[0] = MIN(in.bytes[0], act_max);
   3ce72:	f36e 0407 	bfi	r4, lr, #0, #8
        in.bytes[2] = MIN(in.bytes[2], act_max);
   3ce76:	bfa8      	it	ge
   3ce78:	4631      	movge	r1, r6
        in.bytes[1] = MIN(in.bytes[1], act_max);
   3ce7a:	f36c 240f 	bfi	r4, ip, #8, #8
        in.bytes[3] = MIN(in.bytes[3], act_max);
   3ce7e:	42b3      	cmp	r3, r6
   3ce80:	bfa8      	it	ge
   3ce82:	4633      	movge	r3, r6
        in.bytes[2] = MIN(in.bytes[2], act_max);
   3ce84:	f361 4417 	bfi	r4, r1, #16, #8
        in.bytes[3] = MIN(in.bytes[3], act_max);
   3ce88:	f363 641f 	bfi	r4, r3, #24, #8
  memcpy (*pQ7, &val, 4);
   3ce8c:	f847 4b04 	str.w	r4, [r7], #4
    while (cnt > 0l)
   3ce90:	4287      	cmp	r7, r0
   3ce92:	d1cc      	bne.n	3ce2e <arm_max_pool_s8+0x262>
   3ce94:	9730      	str	r7, [sp, #192]	; 0xc0
    while (cnt > 0l)
   3ce96:	f012 0203 	ands.w	r2, r2, #3
   3ce9a:	d022      	beq.n	3cee2 <arm_max_pool_s8+0x316>
        int32_t comp = *source;
   3ce9c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
        comp = MAX(comp, act_min);
   3ce9e:	9918      	ldr	r1, [sp, #96]	; 0x60
        int32_t comp = *source;
   3cea0:	f993 3000 	ldrsb.w	r3, [r3]
        comp = MIN(comp, act_max);
   3cea4:	9819      	ldr	r0, [sp, #100]	; 0x64
        *source++ = (int8_t)comp;
   3cea6:	9c30      	ldr	r4, [sp, #192]	; 0xc0
        comp = MAX(comp, act_min);
   3cea8:	428b      	cmp	r3, r1
   3ceaa:	bfb8      	it	lt
   3ceac:	460b      	movlt	r3, r1
        comp = MIN(comp, act_max);
   3ceae:	4283      	cmp	r3, r0
   3ceb0:	bfa8      	it	ge
   3ceb2:	4603      	movge	r3, r0
    while (cnt > 0l)
   3ceb4:	3a01      	subs	r2, #1
        *source++ = (int8_t)comp;
   3ceb6:	7023      	strb	r3, [r4, #0]
    while (cnt > 0l)
   3ceb8:	d013      	beq.n	3cee2 <arm_max_pool_s8+0x316>
        int32_t comp = *source;
   3ceba:	f994 3001 	ldrsb.w	r3, [r4, #1]
        comp = MAX(comp, act_min);
   3cebe:	428b      	cmp	r3, r1
   3cec0:	bfb8      	it	lt
   3cec2:	460b      	movlt	r3, r1
        comp = MIN(comp, act_max);
   3cec4:	4283      	cmp	r3, r0
   3cec6:	bfa8      	it	ge
   3cec8:	4603      	movge	r3, r0
    while (cnt > 0l)
   3ceca:	2a01      	cmp	r2, #1
        *source++ = (int8_t)comp;
   3cecc:	7063      	strb	r3, [r4, #1]
    while (cnt > 0l)
   3cece:	d008      	beq.n	3cee2 <arm_max_pool_s8+0x316>
        int32_t comp = *source;
   3ced0:	f994 3002 	ldrsb.w	r3, [r4, #2]
        comp = MAX(comp, act_min);
   3ced4:	4299      	cmp	r1, r3
   3ced6:	bfb8      	it	lt
   3ced8:	4619      	movlt	r1, r3
        comp = MIN(comp, act_max);
   3ceda:	4288      	cmp	r0, r1
   3cedc:	bfa8      	it	ge
   3cede:	4608      	movge	r0, r1
        *source++ = (int8_t)comp;
   3cee0:	70a0      	strb	r0, [r4, #2]

    return ARM_MATH_SUCCESS;
}
   3cee2:	2000      	movs	r0, #0
   3cee4:	b025      	add	sp, #148	; 0x94
   3cee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while (cnt > 0l)
   3ceea:	4561      	cmp	r1, ip
   3ceec:	f842 3b04 	str.w	r3, [r2], #4
   3cef0:	f47f af0a 	bne.w	3cd08 <arm_max_pool_s8+0x13c>
  *pQ7 += 4;
   3cef4:	9b05      	ldr	r3, [sp, #20]
    *in_q7 += 4;
   3cef6:	4661      	mov	r1, ip
   3cef8:	e733      	b.n	3cd62 <arm_max_pool_s8+0x196>
   3cefa:	e9dd ce02 	ldrd	ip, lr, [sp, #8]
   3cefe:	e6fd      	b.n	3ccfc <arm_max_pool_s8+0x130>

0003cf00 <arm_softmax_s8>:
                    const int32_t row_size,
                    const int32_t mult,
                    const int32_t shift,
                    const int32_t diff_min,
                    int8_t *output)
{
   3cf00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3cf04:	b09f      	sub	sp, #124	; 0x7c
   3cf06:	e9cd 0203 	strd	r0, r2, [sp, #12]
   3cf0a:	9301      	str	r3, [sp, #4]
    const int32_t mask = (1 << shift);

    int32_t col = 0;
    int32_t row_idx;

    for (row_idx = 0; row_idx < num_rows; ++row_idx)
   3cf0c:	1e0b      	subs	r3, r1, #0
   3cf0e:	931d      	str	r3, [sp, #116]	; 0x74
   3cf10:	f340 8476 	ble.w	3d800 <arm_softmax_s8+0x900>
   3cf14:	1e53      	subs	r3, r2, #1
   3cf16:	18c3      	adds	r3, r0, r3
   3cf18:	9305      	str	r3, [sp, #20]
    mult = mult + (q63_t)m1 * m2;
   3cf1a:	f8df e37c 	ldr.w	lr, [pc, #892]	; 3d298 <arm_softmax_s8+0x398>
   3cf1e:	2300      	movs	r3, #0
   3cf20:	931c      	str	r3, [sp, #112]	; 0x70
    {
        // Find the maximum value in order to ensure numerical stability
        int8_t max = *input;
   3cf22:	9b03      	ldr	r3, [sp, #12]

        for (col = 1; col < row_size; ++col)
   3cf24:	9904      	ldr	r1, [sp, #16]
        int8_t max = *input;
   3cf26:	f993 2000 	ldrsb.w	r2, [r3]
   3cf2a:	9202      	str	r2, [sp, #8]
        for (col = 1; col < row_size; ++col)
   3cf2c:	2901      	cmp	r1, #1
   3cf2e:	f340 8483 	ble.w	3d838 <arm_softmax_s8+0x938>
   3cf32:	9805      	ldr	r0, [sp, #20]
        {
            max = MAX(max, input[col]);
   3cf34:	f913 1f01 	ldrsb.w	r1, [r3, #1]!
   3cf38:	428a      	cmp	r2, r1
   3cf3a:	bfb8      	it	lt
   3cf3c:	460a      	movlt	r2, r1
        for (col = 1; col < row_size; ++col)
   3cf3e:	4283      	cmp	r3, r0
   3cf40:	d1f8      	bne.n	3cf34 <arm_softmax_s8+0x34>
   3cf42:	9202      	str	r2, [sp, #8]
   3cf44:	9b03      	ldr	r3, [sp, #12]
   3cf46:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
        int32_t diff = 0;
        int32_t sum = 0;

        for (col = 0; col < row_size; ++col)
        {
            diff = input[col] - max;
   3cf4a:	2300      	movs	r3, #0
   3cf4c:	9306      	str	r3, [sp, #24]
    if ((m1 < 0) ^ (m2 < 0))
   3cf4e:	9b01      	ldr	r3, [sp, #4]
   3cf50:	0fdb      	lsrs	r3, r3, #31
   3cf52:	9314      	str	r3, [sp, #80]	; 0x50
   3cf54:	e087      	b.n	3d066 <arm_softmax_s8+0x166>
    result = (int32_t)(mult / (1ll << 31));
   3cf56:	49c8      	ldr	r1, [pc, #800]	; (3d278 <arm_softmax_s8+0x378>)
   3cf58:	fbc0 2301 	smlal	r2, r3, r0, r1
   3cf5c:	2b00      	cmp	r3, #0
   3cf5e:	da04      	bge.n	3cf6a <arm_softmax_s8+0x6a>
   3cf60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   3cf64:	1852      	adds	r2, r2, r1
   3cf66:	f143 0300 	adc.w	r3, r3, #0
   3cf6a:	0fd2      	lsrs	r2, r2, #31
   3cf6c:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
    const int32_t remainder = val_mod_minus_quarter - val;
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
    const int32_t x2 = MUL_SAT(x, x);

    int32_t result = 1895147668 +
   3cf70:	f102 42e2 	add.w	r2, r2, #1895825408	; 0x71000000
    mult = mult + (q63_t)m1 * m2;
   3cf74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3cf78:	2100      	movs	r1, #0
   3cf7a:	4ec0      	ldr	r6, [pc, #768]	; (3d27c <arm_softmax_s8+0x37c>)
    {                                                                                                                  \
        mask = MASK_IF_NON_ZERO(remainder & (1 << shift++));                                                           \
        result = SELECT_USING_MASK(mask, MUL_SAT(result, x), result);                                                  \
    }

    SELECT_IF_NON_ZERO(1672461947)
   3cf7c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    int32_t result = 1895147668 +
   3cf7e:	f5a2 2225 	sub.w	r2, r2, #675840	; 0xa5000
   3cf82:	f2a2 726c 	subw	r2, r2, #1900	; 0x76c
    mult = mult + (q63_t)m1 * m2;
   3cf86:	4618      	mov	r0, r3
   3cf88:	460f      	mov	r7, r1
   3cf8a:	fbc2 0706 	smlal	r0, r7, r2, r6
    SELECT_IF_NON_ZERO(1672461947)
   3cf8e:	4014      	ands	r4, r2
    result = (int32_t)(mult / (1ll << 31));
   3cf90:	0fc0      	lsrs	r0, r0, #31
    SELECT_IF_NON_ZERO(1672461947)
   3cf92:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    SELECT_IF_NON_ZERO(1302514674)
   3cf94:	9e09      	ldr	r6, [sp, #36]	; 0x24
    result = (int32_t)(mult / (1ll << 31));
   3cf96:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
    SELECT_IF_NON_ZERO(1672461947)
   3cf9a:	ea02 0800 	and.w	r8, r2, r0
    mult = mult + (q63_t)m1 * m2;
   3cf9e:	4fb8      	ldr	r7, [pc, #736]	; (3d280 <arm_softmax_s8+0x380>)
    SELECT_IF_NON_ZERO(1672461947)
   3cfa0:	ea88 0404 	eor.w	r4, r8, r4
    mult = mult + (q63_t)m1 * m2;
   3cfa4:	461a      	mov	r2, r3
   3cfa6:	4608      	mov	r0, r1
   3cfa8:	fbc4 2007 	smlal	r2, r0, r4, r7
    result = (int32_t)(mult / (1ll << 31));
   3cfac:	0fd2      	lsrs	r2, r2, #31
   3cfae:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
    SELECT_IF_NON_ZERO(1302514674)
   3cfb2:	980e      	ldr	r0, [sp, #56]	; 0x38
    mult = mult + (q63_t)m1 * m2;
   3cfb4:	4fb3      	ldr	r7, [pc, #716]	; (3d284 <arm_softmax_s8+0x384>)
    SELECT_IF_NON_ZERO(1302514674)
   3cfb6:	ea00 0c02 	and.w	ip, r0, r2
   3cfba:	4026      	ands	r6, r4
   3cfbc:	ea8c 0606 	eor.w	r6, ip, r6
    mult = mult + (q63_t)m1 * m2;
   3cfc0:	461a      	mov	r2, r3
   3cfc2:	460c      	mov	r4, r1
   3cfc4:	fbc6 2407 	smlal	r2, r4, r6, r7
    SELECT_IF_NON_ZERO(790015084)
   3cfc8:	9810      	ldr	r0, [sp, #64]	; 0x40
    result = (int32_t)(mult / (1ll << 31));
   3cfca:	0fd2      	lsrs	r2, r2, #31
   3cfcc:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    SELECT_IF_NON_ZERO(790015084)
   3cfd0:	4015      	ands	r5, r2
   3cfd2:	4030      	ands	r0, r6
    mult = mult + (q63_t)m1 * m2;
   3cfd4:	4eac      	ldr	r6, [pc, #688]	; (3d288 <arm_softmax_s8+0x388>)
    SELECT_IF_NON_ZERO(290630308)
   3cfd6:	9c12      	ldr	r4, [sp, #72]	; 0x48
    SELECT_IF_NON_ZERO(790015084)
   3cfd8:	4068      	eors	r0, r5
    mult = mult + (q63_t)m1 * m2;
   3cfda:	461a      	mov	r2, r3
   3cfdc:	460d      	mov	r5, r1
   3cfde:	fbc0 2506 	smlal	r2, r5, r0, r6
    result = (int32_t)(mult / (1ll << 31));
   3cfe2:	0fd2      	lsrs	r2, r2, #31
    SELECT_IF_NON_ZERO(290630308)
   3cfe4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    result = (int32_t)(mult / (1ll << 31));
   3cfe6:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    SELECT_IF_NON_ZERO(290630308)
   3cfea:	4016      	ands	r6, r2
   3cfec:	4004      	ands	r4, r0
   3cfee:	4074      	eors	r4, r6
    mult = mult + (q63_t)m1 * m2;
   3cff0:	4ea6      	ldr	r6, [pc, #664]	; (3d28c <arm_softmax_s8+0x38c>)
    SELECT_IF_NON_ZERO(39332535)
   3cff2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    mult = mult + (q63_t)m1 * m2;
   3cff4:	461a      	mov	r2, r3
   3cff6:	460d      	mov	r5, r1
   3cff8:	fbc4 2506 	smlal	r2, r5, r4, r6
    result = (int32_t)(mult / (1ll << 31));
   3cffc:	0fd2      	lsrs	r2, r2, #31
   3cffe:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    SELECT_IF_NON_ZERO(39332535)
   3d002:	4020      	ands	r0, r4
   3d004:	ea0b 0b02 	and.w	fp, fp, r2
    mult = mult + (q63_t)m1 * m2;
   3d008:	4da1      	ldr	r5, [pc, #644]	; (3d290 <arm_softmax_s8+0x390>)
    SELECT_IF_NON_ZERO(720401)
   3d00a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    SELECT_IF_NON_ZERO(39332535)
   3d00c:	ea8b 0000 	eor.w	r0, fp, r0
    mult = mult + (q63_t)m1 * m2;
   3d010:	461a      	mov	r2, r3
   3d012:	460e      	mov	r6, r1
   3d014:	fbc0 2605 	smlal	r2, r6, r0, r5
    SELECT_IF_NON_ZERO(720401)
   3d018:	4004      	ands	r4, r0
    result = (int32_t)(mult / (1ll << 31));
   3d01a:	0fd2      	lsrs	r2, r2, #31
    SELECT_IF_NON_ZERO(720401)
   3d01c:	9808      	ldr	r0, [sp, #32]
    result = (int32_t)(mult / (1ll << 31));
   3d01e:	ea42 0246 	orr.w	r2, r2, r6, lsl #1
    SELECT_IF_NON_ZERO(720401)
   3d022:	ea00 0a02 	and.w	sl, r0, r2
    SELECT_IF_NON_ZERO(242)
   3d026:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    SELECT_IF_NON_ZERO(720401)
   3d028:	ea8a 0404 	eor.w	r4, sl, r4
    SELECT_IF_NON_ZERO(242)
   3d02c:	ea04 0a02 	and.w	sl, r4, r2
    mult = mult + (q63_t)m1 * m2;
   3d030:	22f2      	movs	r2, #242	; 0xf2
   3d032:	fbc4 3102 	smlal	r3, r1, r4, r2
    result = (int32_t)(mult / (1ll << 31));
   3d036:	0fdb      	lsrs	r3, r3, #31
    SELECT_IF_NON_ZERO(242)
   3d038:	9a11      	ldr	r2, [sp, #68]	; 0x44
    result = (int32_t)(mult / (1ll << 31));
   3d03a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    SELECT_IF_NON_ZERO(242)
   3d03e:	401a      	ands	r2, r3
   3d040:	ea82 0a0a 	eor.w	sl, r2, sl
    result = dividend >> exponent;
   3d044:	ea4f 332a 	mov.w	r3, sl, asr #12
    if (remainder > threshold)
   3d048:	f41a 6f00 	tst.w	sl, #2048	; 0x800
        result++;
   3d04c:	bf18      	it	ne
   3d04e:	3301      	addne	r3, #1
            if (diff >= diff_min)
            {
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
   3d050:	9a06      	ldr	r2, [sp, #24]
   3d052:	441a      	add	r2, r3
   3d054:	9206      	str	r2, [sp, #24]
        for (col = 0; col < row_size; ++col)
   3d056:	9b00      	ldr	r3, [sp, #0]
   3d058:	9a03      	ldr	r2, [sp, #12]
   3d05a:	3302      	adds	r3, #2
   3d05c:	1a9b      	subs	r3, r3, r2
   3d05e:	9a04      	ldr	r2, [sp, #16]
   3d060:	429a      	cmp	r2, r3
   3d062:	f340 811b 	ble.w	3d29c <arm_softmax_s8+0x39c>
            diff = input[col] - max;
   3d066:	9a02      	ldr	r2, [sp, #8]
   3d068:	f8cd 9000 	str.w	r9, [sp]
   3d06c:	f919 3f01 	ldrsb.w	r3, [r9, #1]!
   3d070:	1a9b      	subs	r3, r3, r2
            if (diff >= diff_min)
   3d072:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   3d074:	429a      	cmp	r2, r3
   3d076:	dcee      	bgt.n	3d056 <arm_softmax_s8+0x156>
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
   3d078:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    result = (int32_t)(mult / (1ll << 31));
   3d07a:	9c01      	ldr	r4, [sp, #4]
   3d07c:	4093      	lsls	r3, r2
        mult = 1 - mult;
   3d07e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   3d080:	ebb2 7fd3 	cmp.w	r2, r3, lsr #31
   3d084:	bf0b      	itete	eq
   3d086:	f04f 4280 	moveq.w	r2, #1073741824	; 0x40000000
   3d08a:	4672      	movne	r2, lr
   3d08c:	2100      	moveq	r1, #0
   3d08e:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
   3d092:	fbc4 2103 	smlal	r2, r1, r4, r3
   3d096:	2900      	cmp	r1, #0
   3d098:	4608      	mov	r0, r1
   3d09a:	da04      	bge.n	3d0a6 <arm_softmax_s8+0x1a6>
   3d09c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   3d0a0:	1852      	adds	r2, r2, r1
   3d0a2:	f140 0000 	adc.w	r0, r0, #0
   3d0a6:	0fd1      	lsrs	r1, r2, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
   3d0a8:	9a01      	ldr	r2, [sp, #4]
   3d0aa:	429a      	cmp	r2, r3
    result = (int32_t)(mult / (1ll << 31));
   3d0ac:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
   3d0b0:	f000 80b9 	beq.w	3d226 <arm_softmax_s8+0x326>
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
   3d0b4:	f041 4c7f 	orr.w	ip, r1, #4278190080	; 0xff000000
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
   3d0b8:	ea4f 104c 	mov.w	r0, ip, lsl #5
    const int32_t remainder = val_mod_minus_quarter - val;
   3d0bc:	ebac 0c01 	sub.w	ip, ip, r1
    SELECT_IF_NON_ZERO(1672461947)
   3d0c0:	f3cc 6800 	ubfx	r8, ip, #24, #1
   3d0c4:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
   3d0c8:	f100 5080 	add.w	r0, r0, #268435456	; 0x10000000
    mult = mult + (q63_t)m1 * m2;
   3d0cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3d0d0:	2400      	movs	r4, #0
    SELECT_IF_NON_ZERO(290630308)
   3d0d2:	f3cc 66c0 	ubfx	r6, ip, #27, #1
    result = (int32_t)(mult / (1ll << 31));
   3d0d6:	fbc0 3400 	smlal	r3, r4, r0, r0
   3d0da:	9213      	str	r2, [sp, #76]	; 0x4c
   3d0dc:	1e72      	subs	r2, r6, #1
   3d0de:	9212      	str	r2, [sp, #72]	; 0x48
   3d0e0:	2c00      	cmp	r4, #0
    SELECT_IF_NON_ZERO(242)
   3d0e2:	f34c 7280 	sbfx	r2, ip, #30, #1
   3d0e6:	f3cc 7a80 	ubfx	sl, ip, #30, #1
   3d0ea:	9211      	str	r2, [sp, #68]	; 0x44
    result = (int32_t)(mult / (1ll << 31));
   3d0ec:	da04      	bge.n	3d0f8 <arm_softmax_s8+0x1f8>
   3d0ee:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
   3d0f2:	19db      	adds	r3, r3, r7
   3d0f4:	f144 0400 	adc.w	r4, r4, #0
   3d0f8:	0fdb      	lsrs	r3, r3, #31
   3d0fa:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    mult = mult + (q63_t)m1 * m2;
   3d0fe:	fba3 2503 	umull	r2, r5, r3, r3
    result = (int32_t)(mult / (1ll << 31));
   3d102:	17e4      	asrs	r4, r4, #31
    mult = mult + (q63_t)m1 * m2;
   3d104:	f112 4280 	adds.w	r2, r2, #1073741824	; 0x40000000
   3d108:	fb03 f704 	mul.w	r7, r3, r4
    result = (int32_t)(mult / (1ll << 31));
   3d10c:	eb45 0547 	adc.w	r5, r5, r7, lsl #1
   3d110:	2d00      	cmp	r5, #0
   3d112:	9307      	str	r3, [sp, #28]
   3d114:	da04      	bge.n	3d120 <arm_softmax_s8+0x220>
   3d116:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
   3d11a:	19d2      	adds	r2, r2, r7
   3d11c:	f145 0500 	adc.w	r5, r5, #0
   3d120:	0fd2      	lsrs	r2, r2, #31
   3d122:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    SELECT_IF_NON_ZERO(1672461947)
   3d126:	f1c8 0500 	rsb	r5, r8, #0
   3d12a:	950f      	str	r5, [sp, #60]	; 0x3c
    SELECT_IF_NON_ZERO(290630308)
   3d12c:	4275      	negs	r5, r6
   3d12e:	950d      	str	r5, [sp, #52]	; 0x34
   3d130:	f10a 35ff 	add.w	r5, sl, #4294967295	; 0xffffffff
    SELECT_IF_NON_ZERO(1302514674)
   3d134:	f3cc 6640 	ubfx	r6, ip, #25, #1
    mult = mult + (q63_t)m1 * m2;
   3d138:	fb00 f404 	mul.w	r4, r0, r4
   3d13c:	950c      	str	r5, [sp, #48]	; 0x30
   3d13e:	17c5      	asrs	r5, r0, #31
   3d140:	fb03 4405 	mla	r4, r3, r5, r4
   3d144:	3e01      	subs	r6, #1
    SELECT_IF_NON_ZERO(790015084)
   3d146:	f3cc 6580 	ubfx	r5, ip, #26, #1
    SELECT_IF_NON_ZERO(39332535)
   3d14a:	f3cc 7b00 	ubfx	fp, ip, #28, #1
   3d14e:	9609      	str	r6, [sp, #36]	; 0x24
   3d150:	1e6e      	subs	r6, r5, #1
    SELECT_IF_NON_ZERO(720401)
   3d152:	f3cc 7a40 	ubfx	sl, ip, #29, #1
   3d156:	9610      	str	r6, [sp, #64]	; 0x40
   3d158:	f10b 36ff 	add.w	r6, fp, #4294967295	; 0xffffffff
    SELECT_IF_NON_ZERO(1302514674)
   3d15c:	f34c 6740 	sbfx	r7, ip, #25, #1
    int32_t remainder = remainder_mask & dividend;
   3d160:	f002 0803 	and.w	r8, r2, #3
   3d164:	960b      	str	r6, [sp, #44]	; 0x2c
    result = dividend >> exponent;
   3d166:	1092      	asrs	r2, r2, #2
   3d168:	f10a 36ff 	add.w	r6, sl, #4294967295	; 0xffffffff
    SELECT_IF_NON_ZERO(1302514674)
   3d16c:	970e      	str	r7, [sp, #56]	; 0x38
    if ((m1 < 0) ^ (m2 < 0))
   3d16e:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
   3d172:	960a      	str	r6, [sp, #40]	; 0x28
    mult = mult + (q63_t)m1 * m2;
   3d174:	fba0 7303 	umull	r7, r3, r0, r3
    SELECT_IF_NON_ZERO(720401)
   3d178:	f1ca 0600 	rsb	r6, sl, #0
    if (result < 0)
   3d17c:	2a00      	cmp	r2, #0
    mult = mult + (q63_t)m1 * m2;
   3d17e:	4423      	add	r3, r4
    SELECT_IF_NON_ZERO(790015084)
   3d180:	f1c5 0500 	rsb	r5, r5, #0
    if ((m1 < 0) ^ (m2 < 0))
   3d184:	ea4f 74d0 	mov.w	r4, r0, lsr #31
    SELECT_IF_NON_ZERO(39332535)
   3d188:	f1cb 0b00 	rsb	fp, fp, #0
    SELECT_IF_NON_ZERO(720401)
   3d18c:	9608      	str	r6, [sp, #32]
    if (result < 0)
   3d18e:	db47      	blt.n	3d220 <arm_softmax_s8+0x320>
    q31_t threshold = remainder_mask >> 1;
   3d190:	f04f 0a01 	mov.w	sl, #1
    if (remainder > threshold)
   3d194:	45c2      	cmp	sl, r8
        result++;
   3d196:	bfb8      	it	lt
   3d198:	3201      	addlt	r2, #1
        mult = 1 - mult;
   3d19a:	4564      	cmp	r4, ip
   3d19c:	bf0b      	itete	eq
   3d19e:	f04f 4480 	moveq.w	r4, #1073741824	; 0x40000000
   3d1a2:	4674      	movne	r4, lr
   3d1a4:	f04f 0c00 	moveq.w	ip, #0
   3d1a8:	f04f 3cff 	movne.w	ip, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
   3d1ac:	19e4      	adds	r4, r4, r7
    result = (int32_t)(mult / (1ll << 31));
   3d1ae:	eb43 030c 	adc.w	r3, r3, ip
   3d1b2:	2b00      	cmp	r3, #0
   3d1b4:	da04      	bge.n	3d1c0 <arm_softmax_s8+0x2c0>
   3d1b6:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
   3d1ba:	19e4      	adds	r4, r4, r7
   3d1bc:	f143 0300 	adc.w	r3, r3, #0
   3d1c0:	0fe4      	lsrs	r4, r4, #31
   3d1c2:	ea44 0443 	orr.w	r4, r4, r3, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
   3d1c6:	4422      	add	r2, r4
        mult = 1 - mult;
   3d1c8:	2a00      	cmp	r2, #0
    result = (int32_t)(mult / (1ll << 31));
   3d1ca:	4f32      	ldr	r7, [pc, #200]	; (3d294 <arm_softmax_s8+0x394>)
        mult = 1 - mult;
   3d1cc:	bfab      	itete	ge
   3d1ce:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
   3d1d2:	4673      	movlt	r3, lr
   3d1d4:	2400      	movge	r4, #0
   3d1d6:	f04f 34ff 	movlt.w	r4, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
   3d1da:	fbc2 3407 	smlal	r3, r4, r2, r7
   3d1de:	2c00      	cmp	r4, #0
   3d1e0:	da04      	bge.n	3d1ec <arm_softmax_s8+0x2ec>
   3d1e2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   3d1e6:	189b      	adds	r3, r3, r2
   3d1e8:	f144 0400 	adc.w	r4, r4, #0
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
   3d1ec:	9a07      	ldr	r2, [sp, #28]
    result = (int32_t)(mult / (1ll << 31));
   3d1ee:	0fdb      	lsrs	r3, r3, #31
   3d1f0:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
   3d1f4:	441a      	add	r2, r3
   3d1f6:	4613      	mov	r3, r2
    if (result < 0)
   3d1f8:	1052      	asrs	r2, r2, #1
   3d1fa:	d402      	bmi.n	3d202 <arm_softmax_s8+0x302>
    if (remainder > threshold)
   3d1fc:	07de      	lsls	r6, r3, #31
        result++;
   3d1fe:	bf48      	it	mi
   3d200:	3201      	addmi	r2, #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
   3d202:	4410      	add	r0, r2
        mult = 1 - mult;
   3d204:	2800      	cmp	r0, #0
   3d206:	bfab      	itete	ge
   3d208:	f04f 4280 	movge.w	r2, #1073741824	; 0x40000000
   3d20c:	4672      	movlt	r2, lr
   3d20e:	2300      	movge	r3, #0
   3d210:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff

#undef SELECT_IF_NON_ZERO

    mask = MASK_IF_ZERO(val);
   3d214:	2900      	cmp	r1, #0
   3d216:	f47f ae9e 	bne.w	3cf56 <arm_softmax_s8+0x56>
   3d21a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
        result++;
   3d21e:	e717      	b.n	3d050 <arm_softmax_s8+0x150>
        threshold++;
   3d220:	f04f 0a02 	mov.w	sl, #2
   3d224:	e7b6      	b.n	3d194 <arm_softmax_s8+0x294>
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
   3d226:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   3d22a:	f000 8326 	beq.w	3d87a <arm_softmax_s8+0x97a>
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
   3d22e:	f041 4c7f 	orr.w	ip, r1, #4278190080	; 0xff000000
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
   3d232:	ea4f 104c 	mov.w	r0, ip, lsl #5
    const int32_t remainder = val_mod_minus_quarter - val;
   3d236:	ebac 0c01 	sub.w	ip, ip, r1
    SELECT_IF_NON_ZERO(1672461947)
   3d23a:	f3cc 6800 	ubfx	r8, ip, #24, #1
   3d23e:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
   3d242:	f100 5080 	add.w	r0, r0, #268435456	; 0x10000000
    mult = mult + (q63_t)m1 * m2;
   3d246:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3d24a:	2400      	movs	r4, #0
    SELECT_IF_NON_ZERO(290630308)
   3d24c:	f3cc 66c0 	ubfx	r6, ip, #27, #1
    result = (int32_t)(mult / (1ll << 31));
   3d250:	fbc0 3400 	smlal	r3, r4, r0, r0
   3d254:	9213      	str	r2, [sp, #76]	; 0x4c
   3d256:	1e72      	subs	r2, r6, #1
   3d258:	9212      	str	r2, [sp, #72]	; 0x48
   3d25a:	2c00      	cmp	r4, #0
    SELECT_IF_NON_ZERO(242)
   3d25c:	f34c 7280 	sbfx	r2, ip, #30, #1
   3d260:	f3cc 7a80 	ubfx	sl, ip, #30, #1
   3d264:	9211      	str	r2, [sp, #68]	; 0x44
    result = (int32_t)(mult / (1ll << 31));
   3d266:	f6bf af47 	bge.w	3d0f8 <arm_softmax_s8+0x1f8>
   3d26a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   3d26e:	189b      	adds	r3, r3, r2
   3d270:	f144 0400 	adc.w	r4, r4, #0
   3d274:	e740      	b.n	3d0f8 <arm_softmax_s8+0x1f8>
   3d276:	bf00      	nop
   3d278:	70f5a894 	.word	0x70f5a894
   3d27c:	63afbe7b 	.word	0x63afbe7b
   3d280:	4da2cbf2 	.word	0x4da2cbf2
   3d284:	2f16ac6c 	.word	0x2f16ac6c
   3d288:	1152aaa4 	.word	0x1152aaa4
   3d28c:	02582ab7 	.word	0x02582ab7
   3d290:	000afe11 	.word	0x000afe11
   3d294:	2aaaaaab 	.word	0x2aaaaaab
   3d298:	c0000001 	.word	0xc0000001
  if (value == 0U)
   3d29c:	9a06      	ldr	r2, [sp, #24]
   3d29e:	2a00      	cmp	r2, #0
   3d2a0:	f000 834a 	beq.w	3d938 <arm_softmax_s8+0xa38>
  return __builtin_clz(value);
   3d2a4:	fab2 f382 	clz	r3, r2
            }
        }

        const int32_t headroom = __CLZ(sum);
        const int32_t bits_over_unit = ACCUM_BITS - headroom + 23;
        const int32_t shifted_scale = ONE_OVER1((sum << headroom) - (1 << 31));
   3d2a8:	fa02 f103 	lsl.w	r1, r2, r3
   3d2ac:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
        const int32_t bits_over_unit = ACCUM_BITS - headroom + 23;
   3d2b0:	f1c3 0323 	rsb	r3, r3, #35	; 0x23
   3d2b4:	9314      	str	r3, [sp, #80]	; 0x50
}

__STATIC_FORCEINLINE int32_t arm_nn_one_over_one_plus_x_for_x_in_0_1(int32_t val)
{
    const int64_t sum = (int64_t)val + (int64_t)Q31_MAX;
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
   3d2b6:	f111 4300 	adds.w	r3, r1, #2147483648	; 0x80000000
    const int64_t sum = (int64_t)val + (int64_t)Q31_MAX;
   3d2ba:	ea4f 71e1 	mov.w	r1, r1, asr #31
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
   3d2be:	f141 0100 	adc.w	r1, r1, #0
   3d2c2:	085b      	lsrs	r3, r3, #1
   3d2c4:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
    mult = mult + (q63_t)m1 * m2;
   3d2c8:	4a6c      	ldr	r2, [pc, #432]	; (3d47c <arm_softmax_s8+0x57c>)
   3d2ca:	4258      	negs	r0, r3
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
   3d2cc:	1049      	asrs	r1, r1, #1
    mult = mult + (q63_t)m1 * m2;
   3d2ce:	fb02 0401 	mla	r4, r2, r1, r0
   3d2d2:	fba3 2002 	umull	r2, r0, r3, r2
   3d2d6:	eb12 020e 	adds.w	r2, r2, lr
   3d2da:	4420      	add	r0, r4
    result = (int32_t)(mult / (1ll << 31));
   3d2dc:	f160 0000 	sbc.w	r0, r0, #0
   3d2e0:	2800      	cmp	r0, #0
   3d2e2:	da04      	bge.n	3d2ee <arm_softmax_s8+0x3ee>
   3d2e4:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   3d2e8:	1912      	adds	r2, r2, r4
   3d2ea:	f140 0000 	adc.w	r0, r0, #0
   3d2ee:	0fd2      	lsrs	r2, r2, #31
   3d2f0:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
    int32_t x = 1515870810 + MUL_SAT(half_denominator, -1010580540);
   3d2f4:	f102 325a 	add.w	r2, r2, #1515870810	; 0x5a5a5a5a
    mult = mult + (q63_t)m1 * m2;
   3d2f8:	17d0      	asrs	r0, r2, #31
   3d2fa:	fb02 f401 	mul.w	r4, r2, r1
   3d2fe:	fb03 4400 	mla	r4, r3, r0, r4
   3d302:	fba2 5003 	umull	r5, r0, r2, r3
   3d306:	f115 4580 	adds.w	r5, r5, #1073741824	; 0x40000000
   3d30a:	eb44 0000 	adc.w	r0, r4, r0
    result = (int32_t)(mult / (1ll << 31));
   3d30e:	0fed      	lsrs	r5, r5, #31
   3d310:	ea45 0540 	orr.w	r5, r5, r0, lsl #1

    const int32_t shift = (1 << 29);
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   3d314:	f1c5 5500 	rsb	r5, r5, #536870912	; 0x20000000
    if ((m1 < 0) ^ (m2 < 0))
   3d318:	2d00      	cmp	r5, #0
    mult = mult + (q63_t)m1 * m2;
   3d31a:	fb82 0405 	smull	r0, r4, r2, r5
    if ((m1 < 0) ^ (m2 < 0))
   3d31e:	f280 8297 	bge.w	3d850 <arm_softmax_s8+0x950>
    mult = mult + (q63_t)m1 * m2;
   3d322:	eb10 000e 	adds.w	r0, r0, lr
    result = (int32_t)(mult / (1ll << 31));
   3d326:	f164 0400 	sbc.w	r4, r4, #0
   3d32a:	2c00      	cmp	r4, #0
   3d32c:	da04      	bge.n	3d338 <arm_softmax_s8+0x438>
   3d32e:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   3d332:	1940      	adds	r0, r0, r5
   3d334:	f144 0400 	adc.w	r4, r4, #0
   3d338:	0fc0      	lsrs	r0, r0, #31
   3d33a:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
    if ((m1 < 0) ^ (m2 < 0))
   3d33e:	eb12 0280 	adds.w	r2, r2, r0, lsl #2
   3d342:	f140 82fb 	bpl.w	3d93c <arm_softmax_s8+0xa3c>
   3d346:	2601      	movs	r6, #1
        mult = 1 - mult;
   3d348:	4675      	mov	r5, lr
   3d34a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
   3d34e:	fb02 f001 	mul.w	r0, r2, r1
   3d352:	17d4      	asrs	r4, r2, #31
   3d354:	fb03 0404 	mla	r4, r3, r4, r0
   3d358:	fba2 0c03 	umull	r0, ip, r2, r3
   3d35c:	1940      	adds	r0, r0, r5
   3d35e:	4464      	add	r4, ip
    result = (int32_t)(mult / (1ll << 31));
   3d360:	eb44 0707 	adc.w	r7, r4, r7
   3d364:	2f00      	cmp	r7, #0
   3d366:	da04      	bge.n	3d372 <arm_softmax_s8+0x472>
   3d368:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   3d36c:	1900      	adds	r0, r0, r4
   3d36e:	f147 0700 	adc.w	r7, r7, #0
   3d372:	0fc0      	lsrs	r0, r0, #31
   3d374:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   3d378:	f1c0 5000 	rsb	r0, r0, #536870912	; 0x20000000
    if ((m1 < 0) ^ (m2 < 0))
   3d37c:	0fc4      	lsrs	r4, r0, #31
        mult = 1 - mult;
   3d37e:	42b4      	cmp	r4, r6
   3d380:	bf0b      	itete	eq
   3d382:	f04f 4480 	moveq.w	r4, #1073741824	; 0x40000000
   3d386:	4674      	movne	r4, lr
   3d388:	2500      	moveq	r5, #0
   3d38a:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
   3d38e:	fbc2 4500 	smlal	r4, r5, r2, r0
   3d392:	2d00      	cmp	r5, #0
   3d394:	da04      	bge.n	3d3a0 <arm_softmax_s8+0x4a0>
   3d396:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   3d39a:	1824      	adds	r4, r4, r0
   3d39c:	f145 0500 	adc.w	r5, r5, #0
   3d3a0:	0fe4      	lsrs	r4, r4, #31
   3d3a2:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
   3d3a6:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
   3d3aa:	f2c0 822c 	blt.w	3d806 <arm_softmax_s8+0x906>
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   3d3ae:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   3d3b2:	3a01      	subs	r2, #1
    q63_t mult = 1 << 30;
   3d3b4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   3d3b8:	2500      	movs	r5, #0
    mult = mult + (q63_t)m1 * m2;
   3d3ba:	fb02 f101 	mul.w	r1, r2, r1
   3d3be:	17d0      	asrs	r0, r2, #31
   3d3c0:	fb03 1100 	mla	r1, r3, r0, r1
   3d3c4:	fba2 3603 	umull	r3, r6, r2, r3
   3d3c8:	191b      	adds	r3, r3, r4
   3d3ca:	4431      	add	r1, r6
    result = (int32_t)(mult / (1ll << 31));
   3d3cc:	eb41 0505 	adc.w	r5, r1, r5
   3d3d0:	2d00      	cmp	r5, #0
   3d3d2:	da04      	bge.n	3d3de <arm_softmax_s8+0x4de>
   3d3d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   3d3d8:	185b      	adds	r3, r3, r1
   3d3da:	f145 0500 	adc.w	r5, r5, #0
   3d3de:	0fdb      	lsrs	r3, r3, #31
   3d3e0:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   3d3e4:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
        mult = 1 - mult;
   3d3e8:	4671      	mov	r1, lr
   3d3ea:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
   3d3ee:	fb03 f000 	mul.w	r0, r3, r0
   3d3f2:	17dd      	asrs	r5, r3, #31
   3d3f4:	fb02 0005 	mla	r0, r2, r5, r0
   3d3f8:	fba3 3502 	umull	r3, r5, r3, r2
   3d3fc:	185b      	adds	r3, r3, r1
   3d3fe:	4428      	add	r0, r5
    result = (int32_t)(mult / (1ll << 31));
   3d400:	eb40 0404 	adc.w	r4, r0, r4
   3d404:	2c00      	cmp	r4, #0
   3d406:	da04      	bge.n	3d412 <arm_softmax_s8+0x512>
   3d408:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   3d40c:	185b      	adds	r3, r3, r1
   3d40e:	f144 0400 	adc.w	r4, r4, #0
   3d412:	0fdb      	lsrs	r3, r3, #31
   3d414:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
   3d418:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   3d41c:	f2c0 81fc 	blt.w	3d818 <arm_softmax_s8+0x918>
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   3d420:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   3d424:	441a      	add	r2, r3
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
   3d426:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
   3d42a:	bfa8      	it	ge
   3d42c:	9313      	strge	r3, [sp, #76]	; 0x4c
   3d42e:	f2c0 829b 	blt.w	3d968 <arm_softmax_s8+0xa68>

        for (col = 0; col < row_size; ++col)
   3d432:	9b04      	ldr	r3, [sp, #16]
   3d434:	2b00      	cmp	r3, #0
   3d436:	f340 81d2 	ble.w	3d7de <arm_softmax_s8+0x8de>
   3d43a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   3d43c:	f8dd b0a8 	ldr.w	fp, [sp, #168]	; 0xa8
   3d440:	2b00      	cmp	r3, #0
   3d442:	bfb9      	ittee	lt
   3d444:	4a0e      	ldrlt	r2, [pc, #56]	; (3d480 <arm_softmax_s8+0x580>)
   3d446:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   3d44a:	f04f 4280 	movge.w	r2, #1073741824	; 0x40000000
   3d44e:	2300      	movge	r3, #0
   3d450:	e9cd 2317 	strd	r2, r3, [sp, #92]	; 0x5c
    const q31_t remainder_mask = (1 << exponent) - 1;
   3d454:	9a14      	ldr	r2, [sp, #80]	; 0x50
   3d456:	2301      	movs	r3, #1
   3d458:	4093      	lsls	r3, r2
   3d45a:	3b01      	subs	r3, #1
   3d45c:	9316      	str	r3, [sp, #88]	; 0x58
    q31_t threshold = remainder_mask >> 1;
   3d45e:	105b      	asrs	r3, r3, #1
   3d460:	931a      	str	r3, [sp, #104]	; 0x68
        threshold++;
   3d462:	3301      	adds	r3, #1
   3d464:	931b      	str	r3, [sp, #108]	; 0x6c
   3d466:	9b03      	ldr	r3, [sp, #12]
   3d468:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
    if ((m1 < 0) ^ (m2 < 0))
   3d46c:	9b01      	ldr	r3, [sp, #4]
   3d46e:	f8cd a000 	str.w	sl, [sp]
   3d472:	0fdb      	lsrs	r3, r3, #31
   3d474:	9319      	str	r3, [sp, #100]	; 0x64
   3d476:	46da      	mov	sl, fp
   3d478:	e179      	b.n	3d76e <arm_softmax_s8+0x86e>
   3d47a:	bf00      	nop
   3d47c:	c3c3c3c4 	.word	0xc3c3c3c4
   3d480:	c0000001 	.word	0xc0000001
        {
            diff = input[col] - max;
            if (diff >= diff_min)
            {
                const int32_t res =
                    DIV_POW2(MUL_SAT(shifted_scale, EXP_ON_NEG(MUL_SAT(diff * mask, mult))), bits_over_unit) - 128;
   3d484:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    result = (int32_t)(mult / (1ll << 31));
   3d486:	9c01      	ldr	r4, [sp, #4]
   3d488:	4093      	lsls	r3, r2
        mult = 1 - mult;
   3d48a:	9a19      	ldr	r2, [sp, #100]	; 0x64
   3d48c:	ebb2 7fd3 	cmp.w	r2, r3, lsr #31
   3d490:	bf0b      	itete	eq
   3d492:	2000      	moveq	r0, #0
   3d494:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   3d498:	f04f 4280 	moveq.w	r2, #1073741824	; 0x40000000
   3d49c:	4672      	movne	r2, lr
    result = (int32_t)(mult / (1ll << 31));
   3d49e:	4601      	mov	r1, r0
   3d4a0:	fbc4 2103 	smlal	r2, r1, r4, r3
   3d4a4:	2900      	cmp	r1, #0
   3d4a6:	da04      	bge.n	3d4b2 <arm_softmax_s8+0x5b2>
   3d4a8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   3d4ac:	1812      	adds	r2, r2, r0
   3d4ae:	f141 0100 	adc.w	r1, r1, #0
   3d4b2:	0fd0      	lsrs	r0, r2, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
   3d4b4:	9a01      	ldr	r2, [sp, #4]
   3d4b6:	429a      	cmp	r2, r3
    result = (int32_t)(mult / (1ll << 31));
   3d4b8:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
   3d4bc:	f000 816b 	beq.w	3d796 <arm_softmax_s8+0x896>
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
   3d4c0:	f040 437f 	orr.w	r3, r0, #4278190080	; 0xff000000
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
   3d4c4:	015a      	lsls	r2, r3, #5
    const int32_t remainder = val_mod_minus_quarter - val;
   3d4c6:	1a1b      	subs	r3, r3, r0
    SELECT_IF_NON_ZERO(242)
   3d4c8:	f3c3 7180 	ubfx	r1, r3, #30, #1
    SELECT_IF_NON_ZERO(1672461947)
   3d4cc:	f3c3 6800 	ubfx	r8, r3, #24, #1
    SELECT_IF_NON_ZERO(1302514674)
   3d4d0:	f3c3 6940 	ubfx	r9, r3, #25, #1
    SELECT_IF_NON_ZERO(242)
   3d4d4:	9115      	str	r1, [sp, #84]	; 0x54
   3d4d6:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
    SELECT_IF_NON_ZERO(790015084)
   3d4da:	f3c3 6c80 	ubfx	ip, r3, #26, #1
   3d4de:	9112      	str	r1, [sp, #72]	; 0x48
   3d4e0:	f109 31ff 	add.w	r1, r9, #4294967295	; 0xffffffff
    SELECT_IF_NON_ZERO(290630308)
   3d4e4:	f3c3 67c0 	ubfx	r7, r3, #27, #1
   3d4e8:	9111      	str	r1, [sp, #68]	; 0x44
   3d4ea:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
   3d4ee:	f102 5b80 	add.w	fp, r2, #268435456	; 0x10000000
    mult = mult + (q63_t)m1 * m2;
   3d4f2:	2400      	movs	r4, #0
   3d4f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   3d4f8:	9110      	str	r1, [sp, #64]	; 0x40
   3d4fa:	1e79      	subs	r1, r7, #1
    result = (int32_t)(mult / (1ll << 31));
   3d4fc:	fbcb 240b 	smlal	r2, r4, fp, fp
   3d500:	910f      	str	r1, [sp, #60]	; 0x3c
    SELECT_IF_NON_ZERO(39332535)
   3d502:	f3c3 7100 	ubfx	r1, r3, #28, #1
   3d506:	9106      	str	r1, [sp, #24]
    result = (int32_t)(mult / (1ll << 31));
   3d508:	2c00      	cmp	r4, #0
    SELECT_IF_NON_ZERO(39332535)
   3d50a:	f343 7100 	sbfx	r1, r3, #28, #1
   3d50e:	910e      	str	r1, [sp, #56]	; 0x38
    result = (int32_t)(mult / (1ll << 31));
   3d510:	da04      	bge.n	3d51c <arm_softmax_s8+0x61c>
   3d512:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   3d516:	1852      	adds	r2, r2, r1
   3d518:	f144 0400 	adc.w	r4, r4, #0
   3d51c:	0fd2      	lsrs	r2, r2, #31
   3d51e:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
   3d522:	17e4      	asrs	r4, r4, #31
    mult = mult + (q63_t)m1 * m2;
   3d524:	fb02 f104 	mul.w	r1, r2, r4
   3d528:	460e      	mov	r6, r1
   3d52a:	fba2 1502 	umull	r1, r5, r2, r2
   3d52e:	f111 4180 	adds.w	r1, r1, #1073741824	; 0x40000000
    result = (int32_t)(mult / (1ll << 31));
   3d532:	eb45 0546 	adc.w	r5, r5, r6, lsl #1
   3d536:	2d00      	cmp	r5, #0
   3d538:	920d      	str	r2, [sp, #52]	; 0x34
   3d53a:	da04      	bge.n	3d546 <arm_softmax_s8+0x646>
   3d53c:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   3d540:	1989      	adds	r1, r1, r6
   3d542:	f145 0500 	adc.w	r5, r5, #0
   3d546:	0fc9      	lsrs	r1, r1, #31
   3d548:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
   3d54c:	9d06      	ldr	r5, [sp, #24]
   3d54e:	3d01      	subs	r5, #1
   3d550:	950b      	str	r5, [sp, #44]	; 0x2c
    SELECT_IF_NON_ZERO(790015084)
   3d552:	f1cc 0500 	rsb	r5, ip, #0
    SELECT_IF_NON_ZERO(720401)
   3d556:	f3c3 7340 	ubfx	r3, r3, #29, #1
    mask = MASK_IF_ZERO(val);
   3d55a:	fab0 f080 	clz	r0, r0
    SELECT_IF_NON_ZERO(790015084)
   3d55e:	9508      	str	r5, [sp, #32]
    SELECT_IF_NON_ZERO(290630308)
   3d560:	427d      	negs	r5, r7
   3d562:	1e5e      	subs	r6, r3, #1
    mask = MASK_IF_ZERO(val);
   3d564:	0940      	lsrs	r0, r0, #5
    mult = mult + (q63_t)m1 * m2;
   3d566:	fb0b f404 	mul.w	r4, fp, r4
    SELECT_IF_NON_ZERO(290630308)
   3d56a:	9507      	str	r5, [sp, #28]
    mult = mult + (q63_t)m1 * m2;
   3d56c:	ea4f 75eb 	mov.w	r5, fp, asr #31
   3d570:	fb02 4405 	mla	r4, r2, r5, r4
   3d574:	960a      	str	r6, [sp, #40]	; 0x28
    mask = MASK_IF_ZERO(val);
   3d576:	4245      	negs	r5, r0
   3d578:	9e15      	ldr	r6, [sp, #84]	; 0x54
   3d57a:	3801      	subs	r0, #1
    return SELECT_USING_MASK(mask, Q31_MAX, result);
   3d57c:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
   3d580:	9009      	str	r0, [sp, #36]	; 0x24
    int32_t remainder = remainder_mask & dividend;
   3d582:	f001 0003 	and.w	r0, r1, #3
    result = dividend >> exponent;
   3d586:	1089      	asrs	r1, r1, #2
    return SELECT_USING_MASK(mask, Q31_MAX, result);
   3d588:	950c      	str	r5, [sp, #48]	; 0x30
   3d58a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
    if ((m1 < 0) ^ (m2 < 0))
   3d58e:	0fd5      	lsrs	r5, r2, #31
    SELECT_IF_NON_ZERO(242)
   3d590:	4276      	negs	r6, r6
    mult = mult + (q63_t)m1 * m2;
   3d592:	fbab 2702 	umull	r2, r7, fp, r2
    if (result < 0)
   3d596:	2900      	cmp	r1, #0
    mult = mult + (q63_t)m1 * m2;
   3d598:	4427      	add	r7, r4
    SELECT_IF_NON_ZERO(1302514674)
   3d59a:	f1c9 0900 	rsb	r9, r9, #0
    SELECT_IF_NON_ZERO(1672461947)
   3d59e:	f1c8 0800 	rsb	r8, r8, #0
    if ((m1 < 0) ^ (m2 < 0))
   3d5a2:	ea4f 74db 	mov.w	r4, fp, lsr #31
    SELECT_IF_NON_ZERO(720401)
   3d5a6:	f1c3 0300 	rsb	r3, r3, #0
    SELECT_IF_NON_ZERO(242)
   3d5aa:	9606      	str	r6, [sp, #24]
    if (result < 0)
   3d5ac:	f2c0 80f1 	blt.w	3d792 <arm_softmax_s8+0x892>
    q31_t threshold = remainder_mask >> 1;
   3d5b0:	2601      	movs	r6, #1
    if (remainder > threshold)
   3d5b2:	4286      	cmp	r6, r0
        result++;
   3d5b4:	bfb8      	it	lt
   3d5b6:	3101      	addlt	r1, #1
        mult = 1 - mult;
   3d5b8:	42ac      	cmp	r4, r5
   3d5ba:	bf0b      	itete	eq
   3d5bc:	f04f 4080 	moveq.w	r0, #1073741824	; 0x40000000
   3d5c0:	4670      	movne	r0, lr
   3d5c2:	2400      	moveq	r4, #0
   3d5c4:	f04f 34ff 	movne.w	r4, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
   3d5c8:	1882      	adds	r2, r0, r2
    result = (int32_t)(mult / (1ll << 31));
   3d5ca:	eb47 0404 	adc.w	r4, r7, r4
   3d5ce:	2c00      	cmp	r4, #0
   3d5d0:	da04      	bge.n	3d5dc <arm_softmax_s8+0x6dc>
   3d5d2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   3d5d6:	1812      	adds	r2, r2, r0
   3d5d8:	f144 0400 	adc.w	r4, r4, #0
   3d5dc:	0fd2      	lsrs	r2, r2, #31
   3d5de:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
   3d5e2:	4411      	add	r1, r2
        mult = 1 - mult;
   3d5e4:	2900      	cmp	r1, #0
    result = (int32_t)(mult / (1ll << 31));
   3d5e6:	4cb3      	ldr	r4, [pc, #716]	; (3d8b4 <arm_softmax_s8+0x9b4>)
        mult = 1 - mult;
   3d5e8:	bfab      	itete	ge
   3d5ea:	f04f 4280 	movge.w	r2, #1073741824	; 0x40000000
   3d5ee:	4672      	movlt	r2, lr
   3d5f0:	2000      	movge	r0, #0
   3d5f2:	f04f 30ff 	movlt.w	r0, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
   3d5f6:	fbc1 2004 	smlal	r2, r0, r1, r4
   3d5fa:	2800      	cmp	r0, #0
   3d5fc:	da04      	bge.n	3d608 <arm_softmax_s8+0x708>
   3d5fe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   3d602:	1852      	adds	r2, r2, r1
   3d604:	f140 0000 	adc.w	r0, r0, #0
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
   3d608:	990d      	ldr	r1, [sp, #52]	; 0x34
    result = (int32_t)(mult / (1ll << 31));
   3d60a:	0fd2      	lsrs	r2, r2, #31
   3d60c:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
   3d610:	4411      	add	r1, r2
   3d612:	460a      	mov	r2, r1
    if (result < 0)
   3d614:	1049      	asrs	r1, r1, #1
   3d616:	d402      	bmi.n	3d61e <arm_softmax_s8+0x71e>
    if (remainder > threshold)
   3d618:	07d4      	lsls	r4, r2, #31
        result++;
   3d61a:	bf48      	it	mi
   3d61c:	3101      	addmi	r1, #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
   3d61e:	4459      	add	r1, fp
        mult = 1 - mult;
   3d620:	2900      	cmp	r1, #0
    result = (int32_t)(mult / (1ll << 31));
   3d622:	4ca5      	ldr	r4, [pc, #660]	; (3d8b8 <arm_softmax_s8+0x9b8>)
        mult = 1 - mult;
   3d624:	bfab      	itete	ge
   3d626:	f04f 4280 	movge.w	r2, #1073741824	; 0x40000000
   3d62a:	4672      	movlt	r2, lr
   3d62c:	2000      	movge	r0, #0
   3d62e:	f04f 30ff 	movlt.w	r0, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
   3d632:	fbc1 2004 	smlal	r2, r0, r1, r4
   3d636:	2800      	cmp	r0, #0
   3d638:	da04      	bge.n	3d644 <arm_softmax_s8+0x744>
   3d63a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   3d63e:	1852      	adds	r2, r2, r1
   3d640:	f140 0000 	adc.w	r0, r0, #0
   3d644:	0fd2      	lsrs	r2, r2, #31
   3d646:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
    int32_t result = 1895147668 +
   3d64a:	f102 42e2 	add.w	r2, r2, #1895825408	; 0x71000000
    mult = mult + (q63_t)m1 * m2;
   3d64e:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
   3d652:	2100      	movs	r1, #0
   3d654:	4f99      	ldr	r7, [pc, #612]	; (3d8bc <arm_softmax_s8+0x9bc>)
    SELECT_IF_NON_ZERO(1672461947)
   3d656:	9c12      	ldr	r4, [sp, #72]	; 0x48
    int32_t result = 1895147668 +
   3d658:	f5a2 2225 	sub.w	r2, r2, #675840	; 0xa5000
   3d65c:	f2a2 726c 	subw	r2, r2, #1900	; 0x76c
    mult = mult + (q63_t)m1 * m2;
   3d660:	4630      	mov	r0, r6
   3d662:	460d      	mov	r5, r1
   3d664:	fbc2 0507 	smlal	r0, r5, r2, r7
    result = (int32_t)(mult / (1ll << 31));
   3d668:	0fc0      	lsrs	r0, r0, #31
   3d66a:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
    mult = mult + (q63_t)m1 * m2;
   3d66e:	4f94      	ldr	r7, [pc, #592]	; (3d8c0 <arm_softmax_s8+0x9c0>)
    SELECT_IF_NON_ZERO(1672461947)
   3d670:	4014      	ands	r4, r2
   3d672:	ea08 0800 	and.w	r8, r8, r0
   3d676:	ea84 0408 	eor.w	r4, r4, r8
    mult = mult + (q63_t)m1 * m2;
   3d67a:	4632      	mov	r2, r6
   3d67c:	460d      	mov	r5, r1
   3d67e:	fbc4 2507 	smlal	r2, r5, r4, r7
    SELECT_IF_NON_ZERO(1302514674)
   3d682:	9811      	ldr	r0, [sp, #68]	; 0x44
    mult = mult + (q63_t)m1 * m2;
   3d684:	4f8f      	ldr	r7, [pc, #572]	; (3d8c4 <arm_softmax_s8+0x9c4>)
    result = (int32_t)(mult / (1ll << 31));
   3d686:	0fd2      	lsrs	r2, r2, #31
   3d688:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    SELECT_IF_NON_ZERO(1302514674)
   3d68c:	4020      	ands	r0, r4
   3d68e:	ea09 0902 	and.w	r9, r9, r2
   3d692:	ea80 0009 	eor.w	r0, r0, r9
    mult = mult + (q63_t)m1 * m2;
   3d696:	4632      	mov	r2, r6
   3d698:	460d      	mov	r5, r1
    SELECT_IF_NON_ZERO(790015084)
   3d69a:	9c10      	ldr	r4, [sp, #64]	; 0x40
    mult = mult + (q63_t)m1 * m2;
   3d69c:	fbc0 2507 	smlal	r2, r5, r0, r7
    SELECT_IF_NON_ZERO(790015084)
   3d6a0:	4004      	ands	r4, r0
    result = (int32_t)(mult / (1ll << 31));
   3d6a2:	0fd2      	lsrs	r2, r2, #31
    SELECT_IF_NON_ZERO(790015084)
   3d6a4:	9808      	ldr	r0, [sp, #32]
    result = (int32_t)(mult / (1ll << 31));
   3d6a6:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    SELECT_IF_NON_ZERO(790015084)
   3d6aa:	4010      	ands	r0, r2
    mult = mult + (q63_t)m1 * m2;
   3d6ac:	4d86      	ldr	r5, [pc, #536]	; (3d8c8 <arm_softmax_s8+0x9c8>)
    SELECT_IF_NON_ZERO(290630308)
   3d6ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    SELECT_IF_NON_ZERO(790015084)
   3d6b0:	4044      	eors	r4, r0
    mult = mult + (q63_t)m1 * m2;
   3d6b2:	4637      	mov	r7, r6
   3d6b4:	4608      	mov	r0, r1
   3d6b6:	fbc4 7005 	smlal	r7, r0, r4, r5
    result = (int32_t)(mult / (1ll << 31));
   3d6ba:	0fff      	lsrs	r7, r7, #31
   3d6bc:	ea47 0740 	orr.w	r7, r7, r0, lsl #1
    SELECT_IF_NON_ZERO(290630308)
   3d6c0:	9807      	ldr	r0, [sp, #28]
    mult = mult + (q63_t)m1 * m2;
   3d6c2:	4d82      	ldr	r5, [pc, #520]	; (3d8cc <arm_softmax_s8+0x9cc>)
    SELECT_IF_NON_ZERO(290630308)
   3d6c4:	4038      	ands	r0, r7
   3d6c6:	4022      	ands	r2, r4
   3d6c8:	4607      	mov	r7, r0
   3d6ca:	4057      	eors	r7, r2
    mult = mult + (q63_t)m1 * m2;
   3d6cc:	4630      	mov	r0, r6
   3d6ce:	460c      	mov	r4, r1
   3d6d0:	fbc7 0405 	smlal	r0, r4, r7, r5
    result = (int32_t)(mult / (1ll << 31));
   3d6d4:	0fc0      	lsrs	r0, r0, #31
   3d6d6:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
    SELECT_IF_NON_ZERO(39332535)
   3d6da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   3d6dc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   3d6de:	403a      	ands	r2, r7
   3d6e0:	4004      	ands	r4, r0
    SELECT_IF_NON_ZERO(720401)
   3d6e2:	980a      	ldr	r0, [sp, #40]	; 0x28
    SELECT_IF_NON_ZERO(39332535)
   3d6e4:	4062      	eors	r2, r4
    mult = mult + (q63_t)m1 * m2;
   3d6e6:	4c7a      	ldr	r4, [pc, #488]	; (3d8d0 <arm_softmax_s8+0x9d0>)
    SELECT_IF_NON_ZERO(720401)
   3d6e8:	ea02 0b00 	and.w	fp, r2, r0
    mult = mult + (q63_t)m1 * m2;
   3d6ec:	460d      	mov	r5, r1
   3d6ee:	4630      	mov	r0, r6
   3d6f0:	fbc2 0504 	smlal	r0, r5, r2, r4
    result = (int32_t)(mult / (1ll << 31));
   3d6f4:	0fc0      	lsrs	r0, r0, #31
   3d6f6:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
    SELECT_IF_NON_ZERO(720401)
   3d6fa:	4003      	ands	r3, r0
   3d6fc:	ea8b 0b03 	eor.w	fp, fp, r3
    mult = mult + (q63_t)m1 * m2;
   3d700:	23f2      	movs	r3, #242	; 0xf2
   3d702:	fbcb 6103 	smlal	r6, r1, fp, r3
    result = (int32_t)(mult / (1ll << 31));
   3d706:	0ff6      	lsrs	r6, r6, #31
    SELECT_IF_NON_ZERO(242)
   3d708:	9b06      	ldr	r3, [sp, #24]
    return SELECT_USING_MASK(mask, Q31_MAX, result);
   3d70a:	9809      	ldr	r0, [sp, #36]	; 0x24
   3d70c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    result = (int32_t)(mult / (1ll << 31));
   3d70e:	ea46 0641 	orr.w	r6, r6, r1, lsl #1
    SELECT_IF_NON_ZERO(242)
   3d712:	4033      	ands	r3, r6
   3d714:	ea0b 0c0c 	and.w	ip, fp, ip
   3d718:	ea8c 0603 	eor.w	r6, ip, r3
    result = (int32_t)(mult / (1ll << 31));
   3d71c:	e9dd 3217 	ldrd	r3, r2, [sp, #92]	; 0x5c
   3d720:	9913      	ldr	r1, [sp, #76]	; 0x4c
    return SELECT_USING_MASK(mask, Q31_MAX, result);
   3d722:	4030      	ands	r0, r6
   3d724:	4045      	eors	r5, r0
    result = (int32_t)(mult / (1ll << 31));
   3d726:	fbc5 3201 	smlal	r3, r2, r5, r1
   3d72a:	2a00      	cmp	r2, #0
   3d72c:	da04      	bge.n	3d738 <arm_softmax_s8+0x838>
   3d72e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   3d732:	185b      	adds	r3, r3, r1
   3d734:	f142 0200 	adc.w	r2, r2, #0
   3d738:	0fdb      	lsrs	r3, r3, #31
   3d73a:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
    if (result < 0)
   3d73e:	9914      	ldr	r1, [sp, #80]	; 0x50
    int32_t remainder = remainder_mask & dividend;
   3d740:	9a16      	ldr	r2, [sp, #88]	; 0x58
   3d742:	401a      	ands	r2, r3
    if (result < 0)
   3d744:	410b      	asrs	r3, r1
   3d746:	d41e      	bmi.n	3d786 <arm_softmax_s8+0x886>
    if (remainder > threshold)
   3d748:	991a      	ldr	r1, [sp, #104]	; 0x68
   3d74a:	4291      	cmp	r1, r2
   3d74c:	da00      	bge.n	3d750 <arm_softmax_s8+0x850>
        result++;
   3d74e:	3301      	adds	r3, #1
                const int32_t res =
   3d750:	3b80      	subs	r3, #128	; 0x80
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
   3d752:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
   3d756:	db19      	blt.n	3d78c <arm_softmax_s8+0x88c>
   3d758:	2b7e      	cmp	r3, #126	; 0x7e
   3d75a:	dc3e      	bgt.n	3d7da <arm_softmax_s8+0x8da>
   3d75c:	b25b      	sxtb	r3, r3
            }
            else
            {
                output[col] = -128;
   3d75e:	f88a 3000 	strb.w	r3, [sl]
        for (col = 0; col < row_size; ++col)
   3d762:	9b05      	ldr	r3, [sp, #20]
   3d764:	9a00      	ldr	r2, [sp, #0]
   3d766:	4293      	cmp	r3, r2
   3d768:	f10a 0a01 	add.w	sl, sl, #1
   3d76c:	d037      	beq.n	3d7de <arm_softmax_s8+0x8de>
            diff = input[col] - max;
   3d76e:	9a00      	ldr	r2, [sp, #0]
   3d770:	f912 3f01 	ldrsb.w	r3, [r2, #1]!
   3d774:	9200      	str	r2, [sp, #0]
   3d776:	9a02      	ldr	r2, [sp, #8]
   3d778:	1a9b      	subs	r3, r3, r2
            if (diff >= diff_min)
   3d77a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   3d77c:	429a      	cmp	r2, r3
   3d77e:	f77f ae81 	ble.w	3d484 <arm_softmax_s8+0x584>
                output[col] = -128;
   3d782:	2380      	movs	r3, #128	; 0x80
   3d784:	e7eb      	b.n	3d75e <arm_softmax_s8+0x85e>
    if (remainder > threshold)
   3d786:	991b      	ldr	r1, [sp, #108]	; 0x6c
   3d788:	4291      	cmp	r1, r2
   3d78a:	dbe0      	blt.n	3d74e <arm_softmax_s8+0x84e>
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
   3d78c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   3d790:	e7e5      	b.n	3d75e <arm_softmax_s8+0x85e>
        threshold++;
   3d792:	2602      	movs	r6, #2
   3d794:	e70d      	b.n	3d5b2 <arm_softmax_s8+0x6b2>
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
   3d796:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   3d79a:	f47f ae91 	bne.w	3d4c0 <arm_softmax_s8+0x5c0>
   3d79e:	2300      	movs	r3, #0
   3d7a0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   3d7a4:	494b      	ldr	r1, [pc, #300]	; (3d8d4 <arm_softmax_s8+0x9d4>)
   3d7a6:	910d      	str	r1, [sp, #52]	; 0x34
   3d7a8:	e9cd 3306 	strd	r3, r3, [sp, #24]
   3d7ac:	e9cd 660a 	strd	r6, r6, [sp, #40]	; 0x28
   3d7b0:	e9cd 360e 	strd	r3, r6, [sp, #56]	; 0x38
   3d7b4:	e9cd 6610 	strd	r6, r6, [sp, #64]	; 0x40
   3d7b8:	4a47      	ldr	r2, [pc, #284]	; (3d8d8 <arm_softmax_s8+0x9d8>)
   3d7ba:	4f48      	ldr	r7, [pc, #288]	; (3d8dc <arm_softmax_s8+0x9dc>)
   3d7bc:	f8df b124 	ldr.w	fp, [pc, #292]	; 3d8e4 <arm_softmax_s8+0x9e4>
   3d7c0:	9609      	str	r6, [sp, #36]	; 0x24
   3d7c2:	9308      	str	r3, [sp, #32]
   3d7c4:	46b4      	mov	ip, r6
   3d7c6:	4698      	mov	r8, r3
   3d7c8:	930c      	str	r3, [sp, #48]	; 0x30
   3d7ca:	4699      	mov	r9, r3
   3d7cc:	461c      	mov	r4, r3
   3d7ce:	461d      	mov	r5, r3
   3d7d0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   3d7d4:	4618      	mov	r0, r3
   3d7d6:	9612      	str	r6, [sp, #72]	; 0x48
   3d7d8:	e6ea      	b.n	3d5b0 <arm_softmax_s8+0x6b0>
   3d7da:	237f      	movs	r3, #127	; 0x7f
   3d7dc:	e7bf      	b.n	3d75e <arm_softmax_s8+0x85e>
            }
        }
        input += row_size;
   3d7de:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
   3d7e2:	4411      	add	r1, r2
   3d7e4:	9103      	str	r1, [sp, #12]
        output += row_size;
   3d7e6:	992a      	ldr	r1, [sp, #168]	; 0xa8
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
   3d7e8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
        output += row_size;
   3d7ea:	4411      	add	r1, r2
   3d7ec:	912a      	str	r1, [sp, #168]	; 0xa8
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
   3d7ee:	9905      	ldr	r1, [sp, #20]
   3d7f0:	4411      	add	r1, r2
   3d7f2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   3d7f4:	9105      	str	r1, [sp, #20]
   3d7f6:	3301      	adds	r3, #1
   3d7f8:	429a      	cmp	r2, r3
   3d7fa:	931c      	str	r3, [sp, #112]	; 0x70
   3d7fc:	f47f ab91 	bne.w	3cf22 <arm_softmax_s8+0x22>
    }

#endif
}
   3d800:	b01f      	add	sp, #124	; 0x7c
   3d802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
   3d806:	f1b4 4f60 	cmp.w	r4, #3758096384	; 0xe0000000
   3d80a:	dc6d      	bgt.n	3d8e8 <arm_softmax_s8+0x9e8>
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   3d80c:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
        mult = 1 - mult;
   3d810:	4674      	mov	r4, lr
   3d812:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   3d816:	e5d0      	b.n	3d3ba <arm_softmax_s8+0x4ba>
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
   3d818:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
   3d81c:	f300 8098 	bgt.w	3d950 <arm_softmax_s8+0xa50>
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   3d820:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
    int32_t result = val << exp;
   3d824:	0052      	lsls	r2, r2, #1
   3d826:	9213      	str	r2, [sp, #76]	; 0x4c
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
   3d828:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
   3d82c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   3d82e:	bfd8      	it	le
   3d830:	f04f 4300 	movle.w	r3, #2147483648	; 0x80000000
   3d834:	9313      	str	r3, [sp, #76]	; 0x4c
   3d836:	e5fc      	b.n	3d432 <arm_softmax_s8+0x532>
        for (col = 0; col < row_size; ++col)
   3d838:	bf18      	it	ne
   3d83a:	2300      	movne	r3, #0
   3d83c:	f43f ab82 	beq.w	3cf44 <arm_softmax_s8+0x44>
   3d840:	2503      	movs	r5, #3
   3d842:	4c27      	ldr	r4, [pc, #156]	; (3d8e0 <arm_softmax_s8+0x9e0>)
   3d844:	9514      	str	r5, [sp, #80]	; 0x50
   3d846:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   3d84a:	f04f 325a 	mov.w	r2, #1515870810	; 0x5a5a5a5a
   3d84e:	4619      	mov	r1, r3
    mult = mult + (q63_t)m1 * m2;
   3d850:	f110 4080 	adds.w	r0, r0, #1073741824	; 0x40000000
    result = (int32_t)(mult / (1ll << 31));
   3d854:	f144 0400 	adc.w	r4, r4, #0
   3d858:	2c00      	cmp	r4, #0
   3d85a:	da04      	bge.n	3d866 <arm_softmax_s8+0x966>
   3d85c:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   3d860:	1940      	adds	r0, r0, r5
   3d862:	f144 0400 	adc.w	r4, r4, #0
   3d866:	0fc0      	lsrs	r0, r0, #31
   3d868:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   3d86c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    if ((m1 < 0) ^ (m2 < 0))
   3d870:	0fd6      	lsrs	r6, r2, #31
    q63_t mult = 1 << 30;
   3d872:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   3d876:	2700      	movs	r7, #0
   3d878:	e569      	b.n	3d34e <arm_softmax_s8+0x44e>
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
   3d87a:	2500      	movs	r5, #0
   3d87c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   3d880:	4a14      	ldr	r2, [pc, #80]	; (3d8d4 <arm_softmax_s8+0x9d4>)
   3d882:	9109      	str	r1, [sp, #36]	; 0x24
   3d884:	e9cd 110a 	strd	r1, r1, [sp, #40]	; 0x28
   3d888:	e9cd 150c 	strd	r1, r5, [sp, #48]	; 0x30
   3d88c:	e9cd 5111 	strd	r5, r1, [sp, #68]	; 0x44
   3d890:	9207      	str	r2, [sp, #28]
   3d892:	9110      	str	r1, [sp, #64]	; 0x40
   3d894:	9113      	str	r1, [sp, #76]	; 0x4c
   3d896:	e9cd 550e 	strd	r5, r5, [sp, #56]	; 0x38
   3d89a:	4f0f      	ldr	r7, [pc, #60]	; (3d8d8 <arm_softmax_s8+0x9d8>)
   3d89c:	4b0f      	ldr	r3, [pc, #60]	; (3d8dc <arm_softmax_s8+0x9dc>)
   3d89e:	4811      	ldr	r0, [pc, #68]	; (3d8e4 <arm_softmax_s8+0x9e4>)
   3d8a0:	9508      	str	r5, [sp, #32]
   3d8a2:	46ab      	mov	fp, r5
   3d8a4:	462c      	mov	r4, r5
   3d8a6:	46ac      	mov	ip, r5
   3d8a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   3d8ac:	46a8      	mov	r8, r5
        result = Q31_MAX;
   3d8ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   3d8b2:	e46d      	b.n	3d190 <arm_softmax_s8+0x290>
   3d8b4:	2aaaaaab 	.word	0x2aaaaaab
   3d8b8:	70f5a894 	.word	0x70f5a894
   3d8bc:	63afbe7b 	.word	0x63afbe7b
   3d8c0:	4da2cbf2 	.word	0x4da2cbf2
   3d8c4:	2f16ac6c 	.word	0x2f16ac6c
   3d8c8:	1152aaa4 	.word	0x1152aaa4
   3d8cc:	02582ab7 	.word	0x02582ab7
   3d8d0:	000afe11 	.word	0x000afe11
   3d8d4:	01fffff8 	.word	0x01fffff8
   3d8d8:	40000100 	.word	0x40000100
   3d8dc:	001fffff 	.word	0x001fffff
   3d8e0:	0b4b4b4b 	.word	0x0b4b4b4b
   3d8e4:	0fffffe0 	.word	0x0fffffe0
    if ((m1 < 0) ^ (m2 < 0))
   3d8e8:	eb12 0284 	adds.w	r2, r2, r4, lsl #2
   3d8ec:	d52b      	bpl.n	3d946 <arm_softmax_s8+0xa46>
   3d8ee:	2501      	movs	r5, #1
        mult = 1 - mult;
   3d8f0:	4674      	mov	r4, lr
   3d8f2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
   3d8f6:	fb02 f101 	mul.w	r1, r2, r1
   3d8fa:	17d0      	asrs	r0, r2, #31
   3d8fc:	fb03 1100 	mla	r1, r3, r0, r1
   3d900:	fba2 3703 	umull	r3, r7, r2, r3
   3d904:	191b      	adds	r3, r3, r4
   3d906:	4439      	add	r1, r7
    result = (int32_t)(mult / (1ll << 31));
   3d908:	eb41 0606 	adc.w	r6, r1, r6
   3d90c:	2e00      	cmp	r6, #0
   3d90e:	da04      	bge.n	3d91a <arm_softmax_s8+0xa1a>
   3d910:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   3d914:	185b      	adds	r3, r3, r1
   3d916:	f146 0600 	adc.w	r6, r6, #0
   3d91a:	0fdb      	lsrs	r3, r3, #31
   3d91c:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   3d920:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    if ((m1 < 0) ^ (m2 < 0))
   3d924:	0fd9      	lsrs	r1, r3, #31
        mult = 1 - mult;
   3d926:	42a9      	cmp	r1, r5
   3d928:	bf0b      	itete	eq
   3d92a:	f04f 4180 	moveq.w	r1, #1073741824	; 0x40000000
   3d92e:	4671      	movne	r1, lr
   3d930:	2400      	moveq	r4, #0
   3d932:	f04f 34ff 	movne.w	r4, #4294967295	; 0xffffffff
   3d936:	e55a      	b.n	3d3ee <arm_softmax_s8+0x4ee>
   3d938:	4613      	mov	r3, r2
   3d93a:	e781      	b.n	3d840 <arm_softmax_s8+0x940>
    if ((m1 < 0) ^ (m2 < 0))
   3d93c:	2600      	movs	r6, #0
    q63_t mult = 1 << 30;
   3d93e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   3d942:	4637      	mov	r7, r6
   3d944:	e503      	b.n	3d34e <arm_softmax_s8+0x44e>
    if ((m1 < 0) ^ (m2 < 0))
   3d946:	2500      	movs	r5, #0
    q63_t mult = 1 << 30;
   3d948:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   3d94c:	462e      	mov	r6, r5
   3d94e:	e7d2      	b.n	3d8f6 <arm_softmax_s8+0x9f6>
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   3d950:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    int32_t result = val << exp;
   3d954:	005a      	lsls	r2, r3, #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
   3d956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    int32_t result = val << exp;
   3d95a:	9213      	str	r2, [sp, #76]	; 0x4c
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
   3d95c:	f6ff af64 	blt.w	3d828 <arm_softmax_s8+0x928>
   3d960:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   3d964:	9313      	str	r3, [sp, #76]	; 0x4c
   3d966:	e564      	b.n	3d432 <arm_softmax_s8+0x532>
    int32_t result = val << exp;
   3d968:	0053      	lsls	r3, r2, #1
   3d96a:	9313      	str	r3, [sp, #76]	; 0x4c
   3d96c:	e561      	b.n	3d432 <arm_softmax_s8+0x532>
   3d96e:	bf00      	nop

0003d970 <arm_convolve_1_x_n_s8>:
                                 const q7_t *filter_data,
                                 const cmsis_nn_dims *bias_dims,
                                 const int32_t *bias_data,
                                 const cmsis_nn_dims *output_dims,
                                 q7_t *output_data)
{
   3d970:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3d974:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    (void)bias_dims;
    arm_status status = ARM_MATH_SUCCESS;
    if (output_dims->w % 4 != 0)
   3d976:	68a5      	ldr	r5, [r4, #8]
   3d978:	07ac      	lsls	r4, r5, #30
{
   3d97a:	e9dd ce0a 	ldrd	ip, lr, [sp, #40]	; 0x28
    if (output_dims->w % 4 != 0)
   3d97e:	d103      	bne.n	3d988 <arm_convolve_1_x_n_s8+0x18>
#endif

out:
    /* Return to application */
    return status;
}
   3d980:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    status = arm_convolve_s8(ctx,
   3d984:	f000 b850 	b.w	3da28 <arm_convolve_s8>
}
   3d988:	f06f 0002 	mvn.w	r0, #2
   3d98c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0003d990 <arm_convolve_1_x_n_s8_get_buffer_size>:

int32_t arm_convolve_1_x_n_s8_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * sizeof(int16_t);
   3d990:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
   3d994:	68c0      	ldr	r0, [r0, #12]
   3d996:	fb02 f000 	mul.w	r0, r2, r0
   3d99a:	fb03 f000 	mul.w	r0, r3, r0
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
   3d99e:	0080      	lsls	r0, r0, #2
   3d9a0:	4770      	bx	lr
   3d9a2:	bf00      	nop

0003d9a4 <arm_convolve_1x1_s8_fast>:
                                    const cmsis_nn_dims *bias_dims,
                                    const int32_t *bias_data,
                                    const cmsis_nn_dims *output_dims,
                                    q7_t *output_data)
{
    if (input_dims->c % 4 != 0 || conv_params->padding.w != 0 || conv_params->padding.h != 0 ||
   3d9a4:	68d8      	ldr	r0, [r3, #12]
   3d9a6:	f010 0f03 	tst.w	r0, #3
   3d9aa:	d138      	bne.n	3da1e <arm_convolve_1x1_s8_fast+0x7a>
   3d9ac:	468c      	mov	ip, r1
   3d9ae:	6909      	ldr	r1, [r1, #16]
   3d9b0:	2900      	cmp	r1, #0
   3d9b2:	d134      	bne.n	3da1e <arm_convolve_1x1_s8_fast+0x7a>
{
   3d9b4:	b510      	push	{r4, lr}
    if (input_dims->c % 4 != 0 || conv_params->padding.w != 0 || conv_params->padding.h != 0 ||
   3d9b6:	f8dc 4014 	ldr.w	r4, [ip, #20]
{
   3d9ba:	b08a      	sub	sp, #40	; 0x28
    if (input_dims->c % 4 != 0 || conv_params->padding.w != 0 || conv_params->padding.h != 0 ||
   3d9bc:	bb64      	cbnz	r4, 3da18 <arm_convolve_1x1_s8_fast+0x74>
   3d9be:	f8dc 1008 	ldr.w	r1, [ip, #8]
   3d9c2:	2901      	cmp	r1, #1
   3d9c4:	d128      	bne.n	3da18 <arm_convolve_1x1_s8_fast+0x74>
        conv_params->stride.w != 1 || conv_params->stride.h != 1)
   3d9c6:	f8dc 100c 	ldr.w	r1, [ip, #12]
   3d9ca:	2901      	cmp	r1, #1
   3d9cc:	d124      	bne.n	3da18 <arm_convolve_1x1_s8_fast+0x74>

    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
    const int32_t rhs_rows = output_dims->c;
    const int32_t rhs_cols = input_dims->c;

    arm_nn_mat_mult_nt_t_s8(input_data,
   3d9ce:	9911      	ldr	r1, [sp, #68]	; 0x44
   3d9d0:	9004      	str	r0, [sp, #16]
   3d9d2:	68c9      	ldr	r1, [r1, #12]
   3d9d4:	9103      	str	r1, [sp, #12]
    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
   3d9d6:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
   3d9da:	681b      	ldr	r3, [r3, #0]
   3d9dc:	fb00 f101 	mul.w	r1, r0, r1
   3d9e0:	fb03 f101 	mul.w	r1, r3, r1
    arm_nn_mat_mult_nt_t_s8(input_data,
   3d9e4:	e9d2 3000 	ldrd	r3, r0, [r2]
   3d9e8:	e9cd 0101 	strd	r0, r1, [sp, #4]
   3d9ec:	9300      	str	r3, [sp, #0]
   3d9ee:	f8dc 0024 	ldr.w	r0, [ip, #36]	; 0x24
   3d9f2:	9008      	str	r0, [sp, #32]
   3d9f4:	f8dc 0020 	ldr.w	r0, [ip, #32]
   3d9f8:	9007      	str	r0, [sp, #28]
   3d9fa:	f8dc 0004 	ldr.w	r0, [ip, #4]
   3d9fe:	9006      	str	r0, [sp, #24]
   3da00:	f8dc 0000 	ldr.w	r0, [ip]
   3da04:	9005      	str	r0, [sp, #20]
   3da06:	9b12      	ldr	r3, [sp, #72]	; 0x48
   3da08:	9a10      	ldr	r2, [sp, #64]	; 0x40
   3da0a:	990e      	ldr	r1, [sp, #56]	; 0x38
   3da0c:	980c      	ldr	r0, [sp, #48]	; 0x30
   3da0e:	f000 fc63 	bl	3e2d8 <arm_nn_mat_mult_nt_t_s8>
                            conv_params->activation.max);

#endif

    /* Return to application */
    return ARM_MATH_SUCCESS;
   3da12:	4620      	mov	r0, r4
}
   3da14:	b00a      	add	sp, #40	; 0x28
   3da16:	bd10      	pop	{r4, pc}
        return ARM_MATH_SIZE_MISMATCH;
   3da18:	f06f 0002 	mvn.w	r0, #2
   3da1c:	e7fa      	b.n	3da14 <arm_convolve_1x1_s8_fast+0x70>
   3da1e:	f06f 0002 	mvn.w	r0, #2
}
   3da22:	4770      	bx	lr

0003da24 <arm_convolve_1x1_s8_fast_get_buffer_size>:

int32_t arm_convolve_1x1_s8_fast_get_buffer_size(const cmsis_nn_dims *input_dims)
{
    (void)input_dims;
    return 0;
}
   3da24:	2000      	movs	r0, #0
   3da26:	4770      	bx	lr

0003da28 <arm_convolve_s8>:
                           const q7_t *filter_data,
                           const cmsis_nn_dims *bias_dims,
                           const int32_t *bias_data,
                           const cmsis_nn_dims *output_dims,
                           q7_t *output_data)
{
   3da28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3da2c:	ed2d 8b04 	vpush	{d8-d9}
   3da30:	b0ad      	sub	sp, #180	; 0xb4
    (void)bias_dims;
    q15_t *buffer_a = (q15_t *)ctx->buf;
   3da32:	6800      	ldr	r0, [r0, #0]
   3da34:	881c      	ldrh	r4, [r3, #0]
   3da36:	9016      	str	r0, [sp, #88]	; 0x58

    const uint16_t input_batches = input_dims->n;
    const uint16_t input_x = input_dims->w;
    const uint16_t input_y = input_dims->h;
   3da38:	e9d3 8901 	ldrd	r8, r9, [r3, #4]
    const uint16_t input_ch = input_dims->c;
   3da3c:	68d8      	ldr	r0, [r3, #12]
    const uint16_t kernel_y = filter_dims->h;
    const uint16_t output_x = output_dims->w;
    const uint16_t output_y = output_dims->h;
    const uint16_t output_ch = output_dims->c;

    const uint16_t pad_x = conv_params->padding.w;
   3da3e:	690b      	ldr	r3, [r1, #16]
   3da40:	9312      	str	r3, [sp, #72]	; 0x48
    const uint16_t pad_y = conv_params->padding.h;
   3da42:	694b      	ldr	r3, [r1, #20]
   3da44:	9322      	str	r3, [sp, #136]	; 0x88
    const uint16_t stride_x = conv_params->stride.w;
   3da46:	688b      	ldr	r3, [r1, #8]
   3da48:	9313      	str	r3, [sp, #76]	; 0x4c
    const uint16_t stride_y = conv_params->stride.h;
   3da4a:	68cb      	ldr	r3, [r1, #12]
   3da4c:	9323      	str	r3, [sp, #140]	; 0x8c

    const int32_t input_offset = conv_params->input_offset;
    const int32_t out_offset = conv_params->output_offset;
   3da4e:	e9d1 e300 	ldrd	lr, r3, [r1]
   3da52:	9318      	str	r3, [sp, #96]	; 0x60
    const int32_t out_activation_min = conv_params->activation.min;
   3da54:	6a0b      	ldr	r3, [r1, #32]
{
   3da56:	9f3f      	ldr	r7, [sp, #252]	; 0xfc
   3da58:	9d3b      	ldr	r5, [sp, #236]	; 0xec
    const int32_t out_activation_min = conv_params->activation.min;
   3da5a:	9319      	str	r3, [sp, #100]	; 0x64
    const int32_t out_activation_max = conv_params->activation.max;
   3da5c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   3da5e:	931a      	str	r3, [sp, #104]	; 0x68
    int32_t *output_mult = quant_params->multiplier;
   3da60:	6813      	ldr	r3, [r2, #0]
    const uint16_t output_ch = output_dims->c;
   3da62:	68fe      	ldr	r6, [r7, #12]
   3da64:	9420      	str	r4, [sp, #128]	; 0x80
    const uint16_t kernel_y = filter_dims->h;
   3da66:	e9d5 5b01 	ldrd	r5, fp, [r5, #4]
    const uint16_t output_y = output_dims->h;
   3da6a:	e9d7 7c01 	ldrd	r7, ip, [r7, #4]
    int32_t *output_mult = quant_params->multiplier;
   3da6e:	931b      	str	r3, [sp, #108]	; 0x6c
    int32_t *output_shift = quant_params->shift;

    int i_batch;
    for (i_batch = 0; i_batch < input_batches; i_batch++)
   3da70:	9c20      	ldr	r4, [sp, #128]	; 0x80
    int32_t *output_shift = quant_params->shift;
   3da72:	6853      	ldr	r3, [r2, #4]
    const uint16_t output_ch = output_dims->c;
   3da74:	fa1f fa86 	uxth.w	sl, r6
    for (i_batch = 0; i_batch < input_batches; i_batch++)
   3da78:	2c00      	cmp	r4, #0
   3da7a:	f000 8166 	beq.w	3dd4a <arm_convolve_s8+0x322>
   3da7e:	b2a9      	uxth	r1, r5
   3da80:	ee08 3a90 	vmov	s17, r3
   3da84:	fa1f f38b 	uxth.w	r3, fp
   3da88:	b282      	uxth	r2, r0
                }

                /* Computation is filed for every 2 columns */
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
                {
                    out = arm_nn_mat_mult_kernel_s8_s16(filter_data,
   3da8a:	fb13 f301 	smulbb	r3, r3, r1
   3da8e:	fa1f f48b 	uxth.w	r4, fp
   3da92:	fb13 f302 	smulbb	r3, r3, r2
   3da96:	9127      	str	r1, [sp, #156]	; 0x9c
   3da98:	460a      	mov	r2, r1
                            arm_q7_to_q15_with_offset(input_data + (i_ker_y * input_x + i_ker_x) * input_ch,
   3da9a:	fa0f f18e 	sxth.w	r1, lr
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
   3da9e:	fb04 f202 	mul.w	r2, r4, r2
   3daa2:	ee09 aa10 	vmov	s18, sl
                            arm_q7_to_q15_with_offset(input_data + (i_ker_y * input_x + i_ker_x) * input_ch,
   3daa6:	ee08 1a10 	vmov	s16, r1
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
   3daaa:	fa1f fa80 	uxth.w	sl, r0
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
   3daae:	9916      	ldr	r1, [sp, #88]	; 0x58
   3dab0:	9414      	str	r4, [sp, #80]	; 0x50
   3dab2:	fb0a f202 	mul.w	r2, sl, r2

                /* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
                const q15_t *ip_as_col = buffer_a;

                /* 4 multiply and accumulates are done in one loop. */
                uint16_t col_count = (input_ch * kernel_y * kernel_x) >> 2;
   3dab6:	f3c2 048f 	ubfx	r4, r2, #2, #16
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
   3daba:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   3dabe:	fa1f f989 	uxth.w	r9, r9
                uint16_t col_count = (input_ch * kernel_y * kernel_x) >> 2;
   3dac2:	9425      	str	r4, [sp, #148]	; 0x94
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
   3dac4:	9210      	str	r2, [sp, #64]	; 0x40
   3dac6:	1e62      	subs	r2, r4, #1
                    sum = __SMLAD(ker_a2, ip_b2, sum);

                    col_count--;
                }
                /* Handle left over mac */
                col_count = input_ch * kernel_y * kernel_x & 0x3;
   3dac8:	f003 0403 	and.w	r4, r3, #3
                    out = arm_nn_mat_mult_kernel_s8_s16(filter_data,
   3dacc:	b29b      	uxth	r3, r3
   3dace:	fa1f f088 	uxth.w	r0, r8
   3dad2:	931d      	str	r3, [sp, #116]	; 0x74
                }
            }
        }
#endif
        /* Advance to the next batch */
        input_data += (input_x * input_y * input_ch);
   3dad4:	fb09 f30a 	mul.w	r3, r9, sl
   3dad8:	b2bd      	uxth	r5, r7
   3dada:	fb00 f303 	mul.w	r3, r0, r3
   3dade:	fa1f f78c 	uxth.w	r7, ip
   3dae2:	b2b6      	uxth	r6, r6
   3dae4:	9328      	str	r3, [sp, #160]	; 0xa0
        output_data += (output_x * output_y * output_ch);
   3dae6:	fb05 f307 	mul.w	r3, r5, r7
   3daea:	fb06 f303 	mul.w	r3, r6, r3
   3daee:	b292      	uxth	r2, r2
   3daf0:	9324      	str	r3, [sp, #144]	; 0x90
                    col_count--;
   3daf2:	1e63      	subs	r3, r4, #1
   3daf4:	3201      	adds	r2, #1
   3daf6:	b29b      	uxth	r3, r3
   3daf8:	932b      	str	r3, [sp, #172]	; 0xac
   3dafa:	0093      	lsls	r3, r2, #2
   3dafc:	9329      	str	r3, [sp, #164]	; 0xa4
    *in_q15 += 2;
   3dafe:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
   3db02:	ea4f 0b4a 	mov.w	fp, sl, lsl #1
   3db06:	932a      	str	r3, [sp, #168]	; 0xa8
    for (i_batch = 0; i_batch < input_batches; i_batch++)
   3db08:	2300      	movs	r3, #0
   3db0a:	931f      	str	r3, [sp, #124]	; 0x7c
   3db0c:	465b      	mov	r3, fp
   3db0e:	9521      	str	r5, [sp, #132]	; 0x84
   3db10:	46d3      	mov	fp, sl
   3db12:	970f      	str	r7, [sp, #60]	; 0x3c
   3db14:	9626      	str	r6, [sp, #152]	; 0x98
   3db16:	900d      	str	r0, [sp, #52]	; 0x34
                col_count = input_ch * kernel_y * kernel_x & 0x3;
   3db18:	941e      	str	r4, [sp, #120]	; 0x78
   3db1a:	469a      	mov	sl, r3
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
   3db1c:	9b21      	ldr	r3, [sp, #132]	; 0x84
   3db1e:	2b00      	cmp	r3, #0
   3db20:	f000 8104 	beq.w	3dd2c <arm_convolve_s8+0x304>
   3db24:	9b40      	ldr	r3, [sp, #256]	; 0x100
   3db26:	9317      	str	r3, [sp, #92]	; 0x5c
    q15_t *buffer_a = (q15_t *)ctx->buf;
   3db28:	9b16      	ldr	r3, [sp, #88]	; 0x58
   3db2a:	9308      	str	r3, [sp, #32]
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
   3db2c:	2300      	movs	r3, #0
   3db2e:	931c      	str	r3, [sp, #112]	; 0x70
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
   3db30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   3db32:	2b00      	cmp	r3, #0
   3db34:	d073      	beq.n	3dc1e <arm_convolve_s8+0x1f6>
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
   3db36:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   3db38:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
   3db3c:	fb02 f303 	mul.w	r3, r2, r3
   3db40:	f8bd 2088 	ldrh.w	r2, [sp, #136]	; 0x88
   3db44:	1a9b      	subs	r3, r3, r2
   3db46:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   3db48:	9311      	str	r3, [sp, #68]	; 0x44
   3db4a:	189a      	adds	r2, r3, r2
   3db4c:	fb09 f303 	mul.w	r3, r9, r3
   3db50:	9315      	str	r3, [sp, #84]	; 0x54
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
   3db52:	2300      	movs	r3, #0
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
   3db54:	920b      	str	r2, [sp, #44]	; 0x2c
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
   3db56:	930e      	str	r3, [sp, #56]	; 0x38
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
   3db58:	9911      	ldr	r1, [sp, #68]	; 0x44
   3db5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   3db5c:	4299      	cmp	r1, r3
   3db5e:	da53      	bge.n	3dc08 <arm_convolve_s8+0x1e0>
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
   3db60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   3db62:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
   3db66:	fb02 f303 	mul.w	r3, r2, r3
   3db6a:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
   3db6e:	1a9b      	subs	r3, r3, r2
   3db70:	9a14      	ldr	r2, [sp, #80]	; 0x50
   3db72:	930a      	str	r3, [sp, #40]	; 0x28
   3db74:	18d6      	adds	r6, r2, r3
   3db76:	fb02 f30a 	mul.w	r3, r2, sl
   3db7a:	930c      	str	r3, [sp, #48]	; 0x30
   3db7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   3db7e:	9309      	str	r3, [sp, #36]	; 0x24
   3db80:	4688      	mov	r8, r1
   3db82:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   3db84:	42b4      	cmp	r4, r6
   3db86:	da37      	bge.n	3dbf8 <arm_convolve_s8+0x1d0>
   3db88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   3db8a:	4543      	cmp	r3, r8
   3db8c:	f240 80e3 	bls.w	3dd56 <arm_convolve_s8+0x32e>
   3db90:	2c00      	cmp	r4, #0
   3db92:	f280 80ef 	bge.w	3dd74 <arm_convolve_s8+0x34c>
   3db96:	9d08      	ldr	r5, [sp, #32]
   3db98:	ea06 77e6 	and.w	r7, r6, r6, asr #31
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
   3db9c:	4628      	mov	r0, r5
                         i_ker_x++)
   3db9e:	3401      	adds	r4, #1
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
   3dba0:	4652      	mov	r2, sl
   3dba2:	2100      	movs	r1, #0
   3dba4:	f7ed f97e 	bl	2aea4 <memset>
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
   3dba8:	42a7      	cmp	r7, r4
                        two_column_buf += input_ch;
   3dbaa:	4455      	add	r5, sl
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
   3dbac:	dcf6      	bgt.n	3db9c <arm_convolve_s8+0x174>
   3dbae:	42a6      	cmp	r6, r4
   3dbb0:	dd1e      	ble.n	3dbf0 <arm_convolve_s8+0x1c8>
   3dbb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3dbb4:	18e7      	adds	r7, r4, r3
   3dbb6:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
   3dbb8:	fb0b 3707 	mla	r7, fp, r7, r3
   3dbbc:	e006      	b.n	3dbcc <arm_convolve_s8+0x1a4>
                         i_ker_x++)
   3dbbe:	3401      	adds	r4, #1
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
   3dbc0:	f7ed f970 	bl	2aea4 <memset>
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
   3dbc4:	42a6      	cmp	r6, r4
                        two_column_buf += input_ch;
   3dbc6:	4455      	add	r5, sl
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
   3dbc8:	445f      	add	r7, fp
   3dbca:	dd11      	ble.n	3dbf0 <arm_convolve_s8+0x1c8>
                        if (i_ker_y < 0 || i_ker_y >= input_y || i_ker_x < 0 || i_ker_x >= input_x)
   3dbcc:	45a1      	cmp	r9, r4
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
   3dbce:	4628      	mov	r0, r5
   3dbd0:	4652      	mov	r2, sl
   3dbd2:	f04f 0100 	mov.w	r1, #0
                        if (i_ker_y < 0 || i_ker_y >= input_y || i_ker_x < 0 || i_ker_x >= input_x)
   3dbd6:	ddf2      	ble.n	3dbbe <arm_convolve_s8+0x196>
                            arm_q7_to_q15_with_offset(input_data + (i_ker_y * input_x + i_ker_x) * input_ch,
   3dbd8:	4629      	mov	r1, r5
   3dbda:	4638      	mov	r0, r7
   3dbdc:	ee18 3a10 	vmov	r3, s16
   3dbe0:	465a      	mov	r2, fp
                         i_ker_x++)
   3dbe2:	3401      	adds	r4, #1
                            arm_q7_to_q15_with_offset(input_data + (i_ker_y * input_x + i_ker_x) * input_ch,
   3dbe4:	f001 f842 	bl	3ec6c <arm_q7_to_q15_with_offset>
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
   3dbe8:	42a6      	cmp	r6, r4
                        two_column_buf += input_ch;
   3dbea:	4455      	add	r5, sl
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
   3dbec:	445f      	add	r7, fp
   3dbee:	dced      	bgt.n	3dbcc <arm_convolve_s8+0x1a4>
                        two_column_buf += input_ch;
   3dbf0:	9b08      	ldr	r3, [sp, #32]
   3dbf2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   3dbf4:	4413      	add	r3, r2
   3dbf6:	9308      	str	r3, [sp, #32]
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
   3dbf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3dbfa:	444b      	add	r3, r9
   3dbfc:	9309      	str	r3, [sp, #36]	; 0x24
   3dbfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   3dc00:	f108 0801 	add.w	r8, r8, #1
   3dc04:	4598      	cmp	r8, r3
   3dc06:	d1bc      	bne.n	3db82 <arm_convolve_s8+0x15a>
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
   3dc08:	9b10      	ldr	r3, [sp, #64]	; 0x40
   3dc0a:	9a08      	ldr	r2, [sp, #32]
   3dc0c:	4293      	cmp	r3, r2
   3dc0e:	f000 80b3 	beq.w	3dd78 <arm_convolve_s8+0x350>
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
   3dc12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3dc14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   3dc16:	3301      	adds	r3, #1
   3dc18:	4293      	cmp	r3, r2
   3dc1a:	930e      	str	r3, [sp, #56]	; 0x38
   3dc1c:	db9c      	blt.n	3db58 <arm_convolve_s8+0x130>
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
   3dc1e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   3dc20:	9a21      	ldr	r2, [sp, #132]	; 0x84
   3dc22:	3301      	adds	r3, #1
   3dc24:	4293      	cmp	r3, r2
   3dc26:	931c      	str	r3, [sp, #112]	; 0x70
   3dc28:	db82      	blt.n	3db30 <arm_convolve_s8+0x108>
        if (two_column_buf != buffer_a)
   3dc2a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   3dc2c:	9a08      	ldr	r2, [sp, #32]
   3dc2e:	4293      	cmp	r3, r2
   3dc30:	d07c      	beq.n	3dd2c <arm_convolve_s8+0x304>
            for (i = 0; i < output_ch; i++)
   3dc32:	9b26      	ldr	r3, [sp, #152]	; 0x98
   3dc34:	2b00      	cmp	r3, #0
   3dc36:	d079      	beq.n	3dd2c <arm_convolve_s8+0x304>
   3dc38:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
            const q7_t *ker_a = filter_data;
   3dc3a:	9c3c      	ldr	r4, [sp, #240]	; 0xf0
   3dc3c:	f1a2 0e04 	sub.w	lr, r2, #4
   3dc40:	ee18 2a90 	vmov	r2, s17
   3dc44:	f1a2 0804 	sub.w	r8, r2, #4
   3dc48:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   3dc4a:	18d3      	adds	r3, r2, r3
            for (i = 0; i < output_ch; i++)
   3dc4c:	f04f 0c00 	mov.w	ip, #0
   3dc50:	9308      	str	r3, [sp, #32]
                if (bias_data)
   3dc52:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
   3dc54:	b10b      	cbz	r3, 3dc5a <arm_convolve_s8+0x232>
                    sum = bias_data[i];
   3dc56:	f853 300c 	ldr.w	r3, [r3, ip]
                while (col_count)
   3dc5a:	9a25      	ldr	r2, [sp, #148]	; 0x94
   3dc5c:	2a00      	cmp	r2, #0
   3dc5e:	f000 80b0 	beq.w	3ddc2 <arm_convolve_s8+0x39a>
   3dc62:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   3dc64:	9816      	ldr	r0, [sp, #88]	; 0x58
   3dc66:	18a5      	adds	r5, r4, r2
    memcpy(&val, *in_q7, 4);
   3dc68:	f854 2b04 	ldr.w	r2, [r4], #4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   3dc6c:	6806      	ldr	r6, [r0, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   3dc6e:	fa2f f182 	sxtb16	r1, r2
  return (op1 >> op2) | (op1 << (32U - op2));
   3dc72:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   3dc76:	fa2f f282 	sxtb16	r2, r2
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
   3dc7a:	eac2 4721 	pkhtb	r7, r2, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
   3dc7e:	eac1 4202 	pkhbt	r2, r1, r2, lsl #16
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   3dc82:	fb22 3306 	smlad	r3, r2, r6, r3
    memcpy(&val, *in_q15, 4);
   3dc86:	6842      	ldr	r2, [r0, #4]
    *in_q15 += 2;
   3dc88:	3008      	adds	r0, #8
   3dc8a:	fb27 3302 	smlad	r3, r7, r2, r3
   3dc8e:	42ac      	cmp	r4, r5
   3dc90:	d1ea      	bne.n	3dc68 <arm_convolve_s8+0x240>
   3dc92:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
                while (col_count)
   3dc94:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   3dc96:	2c00      	cmp	r4, #0
   3dc98:	f000 8091 	beq.w	3ddbe <arm_convolve_s8+0x396>
                    sum += ker_a1 * ip_b1;
   3dc9c:	f995 1000 	ldrsb.w	r1, [r5]
   3dca0:	8810      	ldrh	r0, [r2, #0]
   3dca2:	fb10 3301 	smlabb	r3, r0, r1, r3
                while (col_count)
   3dca6:	992b      	ldr	r1, [sp, #172]	; 0xac
   3dca8:	b159      	cbz	r1, 3dcc2 <arm_convolve_s8+0x29a>
                    sum += ker_a1 * ip_b1;
   3dcaa:	f995 1001 	ldrsb.w	r1, [r5, #1]
   3dcae:	8850      	ldrh	r0, [r2, #2]
                while (col_count)
   3dcb0:	2c02      	cmp	r4, #2
                    sum += ker_a1 * ip_b1;
   3dcb2:	fb10 3301 	smlabb	r3, r0, r1, r3
                while (col_count)
   3dcb6:	d004      	beq.n	3dcc2 <arm_convolve_s8+0x29a>
                    sum += ker_a1 * ip_b1;
   3dcb8:	8891      	ldrh	r1, [r2, #4]
   3dcba:	f995 2002 	ldrsb.w	r2, [r5, #2]
   3dcbe:	fb11 3302 	smlabb	r3, r1, r2, r3
                    q7_t ker_a1 = *ker_a++;
   3dcc2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   3dcc4:	18ac      	adds	r4, r5, r2
                sum = arm_nn_requantize(sum, output_mult[i], output_shift[i]);
   3dcc6:	f858 2f04 	ldr.w	r2, [r8, #4]!
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   3dcca:	f85e 0f04 	ldr.w	r0, [lr, #4]!
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3dcce:	ea22 71e2 	bic.w	r1, r2, r2, asr #31
   3dcd2:	fa03 f101 	lsl.w	r1, r3, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   3dcd6:	2500      	movs	r5, #0
   3dcd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3dcdc:	fbc1 3500 	smlal	r3, r5, r1, r0
    result = (int32_t)(mult.long_long >> 31);
   3dce0:	0fdb      	lsrs	r3, r3, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3dce2:	2a00      	cmp	r2, #0
    result = (int32_t)(mult.long_long >> 31);
   3dce4:	ea43 0545 	orr.w	r5, r3, r5, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3dce8:	dc0d      	bgt.n	3dd06 <arm_convolve_s8+0x2de>
   3dcea:	4252      	negs	r2, r2
    const q31_t remainder_mask = (1 << exponent) - 1;
   3dcec:	2301      	movs	r3, #1
   3dcee:	4093      	lsls	r3, r2
   3dcf0:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
   3dcf2:	ea05 0103 	and.w	r1, r5, r3
    if (result < 0)
   3dcf6:	4115      	asrs	r5, r2
    q31_t threshold = remainder_mask >> 1;
   3dcf8:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
   3dcfc:	bf48      	it	mi
   3dcfe:	3301      	addmi	r3, #1
    if (remainder > threshold)
   3dd00:	4299      	cmp	r1, r3
        result++;
   3dd02:	bfc8      	it	gt
   3dd04:	3501      	addgt	r5, #1
                sum += out_offset;
   3dd06:	9b18      	ldr	r3, [sp, #96]	; 0x60
                sum = MAX(sum, out_activation_min);
   3dd08:	9a19      	ldr	r2, [sp, #100]	; 0x64
                sum += out_offset;
   3dd0a:	442b      	add	r3, r5
                sum = MAX(sum, out_activation_min);
   3dd0c:	4293      	cmp	r3, r2
   3dd0e:	bfb8      	it	lt
   3dd10:	4613      	movlt	r3, r2
                sum = MIN(sum, out_activation_max);
   3dd12:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   3dd14:	4293      	cmp	r3, r2
   3dd16:	bfa8      	it	ge
   3dd18:	4613      	movge	r3, r2
                *out++ = (q7_t)sum;
   3dd1a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   3dd1c:	f802 3b01 	strb.w	r3, [r2], #1
            for (i = 0; i < output_ch; i++)
   3dd20:	9b08      	ldr	r3, [sp, #32]
                *out++ = (q7_t)sum;
   3dd22:	9217      	str	r2, [sp, #92]	; 0x5c
            for (i = 0; i < output_ch; i++)
   3dd24:	429a      	cmp	r2, r3
   3dd26:	f10c 0c04 	add.w	ip, ip, #4
   3dd2a:	d192      	bne.n	3dc52 <arm_convolve_s8+0x22a>
        input_data += (input_x * input_y * input_ch);
   3dd2c:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
   3dd2e:	9928      	ldr	r1, [sp, #160]	; 0xa0
    for (i_batch = 0; i_batch < input_batches; i_batch++)
   3dd30:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
        input_data += (input_x * input_y * input_ch);
   3dd32:	440a      	add	r2, r1
   3dd34:	923a      	str	r2, [sp, #232]	; 0xe8
        output_data += (output_x * output_y * output_ch);
   3dd36:	9924      	ldr	r1, [sp, #144]	; 0x90
   3dd38:	9a40      	ldr	r2, [sp, #256]	; 0x100
   3dd3a:	440a      	add	r2, r1
   3dd3c:	9240      	str	r2, [sp, #256]	; 0x100
    for (i_batch = 0; i_batch < input_batches; i_batch++)
   3dd3e:	9a20      	ldr	r2, [sp, #128]	; 0x80
   3dd40:	3301      	adds	r3, #1
   3dd42:	4293      	cmp	r3, r2
   3dd44:	931f      	str	r3, [sp, #124]	; 0x7c
   3dd46:	f47f aee9 	bne.w	3db1c <arm_convolve_s8+0xf4>
    }

    /* Return to application */
    return ARM_MATH_SUCCESS;
}
   3dd4a:	2000      	movs	r0, #0
   3dd4c:	b02d      	add	sp, #180	; 0xb4
   3dd4e:	ecbd 8b04 	vpop	{d8-d9}
   3dd52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
   3dd56:	9d08      	ldr	r5, [sp, #32]
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
   3dd58:	4628      	mov	r0, r5
                         i_ker_x++)
   3dd5a:	3401      	adds	r4, #1
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
   3dd5c:	4652      	mov	r2, sl
   3dd5e:	2100      	movs	r1, #0
   3dd60:	f7ed f8a0 	bl	2aea4 <memset>
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
   3dd64:	42b4      	cmp	r4, r6
                        two_column_buf += input_ch;
   3dd66:	4455      	add	r5, sl
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
   3dd68:	d1f6      	bne.n	3dd58 <arm_convolve_s8+0x330>
                        two_column_buf += input_ch;
   3dd6a:	9b08      	ldr	r3, [sp, #32]
   3dd6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   3dd6e:	4413      	add	r3, r2
   3dd70:	9308      	str	r3, [sp, #32]
   3dd72:	e741      	b.n	3dbf8 <arm_convolve_s8+0x1d0>
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
   3dd74:	9d08      	ldr	r5, [sp, #32]
   3dd76:	e71c      	b.n	3dbb2 <arm_convolve_s8+0x18a>
                    out = arm_nn_mat_mult_kernel_s8_s16(filter_data,
   3dd78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   3dd7a:	9306      	str	r3, [sp, #24]
   3dd7c:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
   3dd7e:	9305      	str	r3, [sp, #20]
   3dd80:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   3dd82:	9304      	str	r3, [sp, #16]
   3dd84:	9b18      	ldr	r3, [sp, #96]	; 0x60
   3dd86:	9301      	str	r3, [sp, #4]
   3dd88:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
   3dd8a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
                    out = arm_nn_mat_mult_kernel_s8_s16(filter_data,
   3dd8c:	9300      	str	r3, [sp, #0]
   3dd8e:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
   3dd92:	9303      	str	r3, [sp, #12]
   3dd94:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
   3dd98:	9302      	str	r3, [sp, #8]
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
   3dd9a:	3401      	adds	r4, #1
                    out = arm_nn_mat_mult_kernel_s8_s16(filter_data,
   3dd9c:	ee18 3a90 	vmov	r3, s17
   3dda0:	ee19 2a10 	vmov	r2, s18
   3dda4:	9916      	ldr	r1, [sp, #88]	; 0x58
   3dda6:	983c      	ldr	r0, [sp, #240]	; 0xf0
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
   3dda8:	940e      	str	r4, [sp, #56]	; 0x38
                    out = arm_nn_mat_mult_kernel_s8_s16(filter_data,
   3ddaa:	f000 f817 	bl	3dddc <arm_nn_mat_mult_kernel_s8_s16>
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
   3ddae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
                    out = arm_nn_mat_mult_kernel_s8_s16(filter_data,
   3ddb0:	9017      	str	r0, [sp, #92]	; 0x5c
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
   3ddb2:	429c      	cmp	r4, r3
    q15_t *buffer_a = (q15_t *)ctx->buf;
   3ddb4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   3ddb6:	9308      	str	r3, [sp, #32]
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
   3ddb8:	f6ff aece 	blt.w	3db58 <arm_convolve_s8+0x130>
   3ddbc:	e72f      	b.n	3dc1e <arm_convolve_s8+0x1f6>
                while (col_count)
   3ddbe:	462c      	mov	r4, r5
   3ddc0:	e781      	b.n	3dcc6 <arm_convolve_s8+0x29e>
                while (col_count)
   3ddc2:	9a16      	ldr	r2, [sp, #88]	; 0x58
   3ddc4:	4625      	mov	r5, r4
   3ddc6:	e765      	b.n	3dc94 <arm_convolve_s8+0x26c>

0003ddc8 <arm_convolve_s8_get_buffer_size>:

int32_t arm_convolve_s8_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
#if defined(ARM_MATH_DSP)
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * (int32_t)sizeof(int16_t);
   3ddc8:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
   3ddcc:	68c0      	ldr	r0, [r0, #12]
   3ddce:	fb02 f000 	mul.w	r0, r2, r0
   3ddd2:	fb03 f000 	mul.w	r0, r3, r0
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
   3ddd6:	0080      	lsls	r0, r0, #2
   3ddd8:	4770      	bx	lr
   3ddda:	bf00      	nop

0003dddc <arm_nn_mat_mult_kernel_s8_s16>:
                                    const int16_t activation_min,
                                    const int16_t activation_max,
                                    const uint16_t num_col_a,
                                    const int32_t *const output_bias,
                                    q7_t *out_0)
{
   3dddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3dde0:	b099      	sub	sp, #100	; 0x64
   3dde2:	4682      	mov	sl, r0

    return out_1;

#elif defined(ARM_MATH_DSP)
    /* set up the second output pointers */
    q7_t *out_1 = out_0 + output_ch;
   3dde4:	9c28      	ldr	r4, [sp, #160]	; 0xa0
{
   3dde6:	f9bd 0090 	ldrsh.w	r0, [sp, #144]	; 0x90
   3ddea:	9005      	str	r0, [sp, #20]
   3ddec:	f9bd 0094 	ldrsh.w	r0, [sp, #148]	; 0x94
   3ddf0:	9216      	str	r2, [sp, #88]	; 0x58
    q7_t *out_1 = out_0 + output_ch;
   3ddf2:	4414      	add	r4, r2
{
   3ddf4:	9006      	str	r0, [sp, #24]
    const int32_t *bias = output_bias;

    uint16_t row_count = output_ch / 2;
    const q7_t *ip_a0 = input_a;
    /* this loop over rows in A */
    while (row_count)
   3ddf6:	0852      	lsrs	r2, r2, #1
{
   3ddf8:	f8bd 0098 	ldrh.w	r0, [sp, #152]	; 0x98
   3ddfc:	910d      	str	r1, [sp, #52]	; 0x34
   3ddfe:	9314      	str	r3, [sp, #80]	; 0x50
   3de00:	900b      	str	r0, [sp, #44]	; 0x2c
    q7_t *out_1 = out_0 + output_ch;
   3de02:	9415      	str	r4, [sp, #84]	; 0x54
    while (row_count)
   3de04:	9217      	str	r2, [sp, #92]	; 0x5c
   3de06:	f000 81a1 	beq.w	3e14c <arm_nn_mat_mult_kernel_s8_s16+0x370>
        q31_t ch_0_out_0 = *bias;
        q31_t ch_0_out_1 = *bias++;
        q31_t ch_1_out_0 = *bias;
        q31_t ch_1_out_1 = *bias++;

        uint16_t col_count = num_col_a / 4;
   3de0a:	0885      	lsrs	r5, r0, #2
   3de0c:	460e      	mov	r6, r1
   3de0e:	461f      	mov	r7, r3
   3de10:	950e      	str	r5, [sp, #56]	; 0x38
   3de12:	1e6b      	subs	r3, r5, #1
            ch_1_out_0 = __SMLAD(a12, b0, ch_1_out_0);
            ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);

            col_count--;
        } /* while over col_count */
        col_count = num_col_a & 0x3;
   3de14:	f000 0503 	and.w	r5, r0, #3
        const q15_t *ip_b1 = ip_b0 + num_col_a;
   3de18:	eb01 0040 	add.w	r0, r1, r0, lsl #1
   3de1c:	9927      	ldr	r1, [sp, #156]	; 0x9c
        col_count = num_col_a & 0x3;
   3de1e:	950a      	str	r5, [sp, #40]	; 0x28
   3de20:	3a01      	subs	r2, #1
   3de22:	b292      	uxth	r2, r2
   3de24:	3110      	adds	r1, #16
   3de26:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   3de2a:	920f      	str	r2, [sp, #60]	; 0x3c

            ch_0_out_0 += a0 * b0;
            ch_0_out_1 += a0 * b1;
            ch_1_out_0 += a1 * b0;
            ch_1_out_1 += a1 * b1;
            col_count--;
   3de2c:	1e6a      	subs	r2, r5, #1
   3de2e:	b292      	uxth	r2, r2
   3de30:	9213      	str	r2, [sp, #76]	; 0x4c
   3de32:	9a27      	ldr	r2, [sp, #156]	; 0x9c
        const q15_t *ip_b1 = ip_b0 + num_col_a;
   3de34:	9010      	str	r0, [sp, #64]	; 0x40
   3de36:	3208      	adds	r2, #8
   3de38:	9209      	str	r2, [sp, #36]	; 0x24
   3de3a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   3de3c:	3202      	adds	r2, #2
   3de3e:	9207      	str	r2, [sp, #28]
   3de40:	1ca2      	adds	r2, r4, #2
   3de42:	9208      	str	r2, [sp, #32]
   3de44:	9a22      	ldr	r2, [sp, #136]	; 0x88
   3de46:	3208      	adds	r2, #8
   3de48:	b29b      	uxth	r3, r3
   3de4a:	9202      	str	r2, [sp, #8]
   3de4c:	463a      	mov	r2, r7
   3de4e:	3301      	adds	r3, #1
   3de50:	3208      	adds	r2, #8
   3de52:	9203      	str	r2, [sp, #12]
   3de54:	009a      	lsls	r2, r3, #2
   3de56:	920c      	str	r2, [sp, #48]	; 0x30
    *in_q15 += 2;
   3de58:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
   3de5c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   3de60:	9212      	str	r2, [sp, #72]	; 0x48
   3de62:	9311      	str	r3, [sp, #68]	; 0x44
        q31_t ch_0_out_0 = *bias;
   3de64:	9b09      	ldr	r3, [sp, #36]	; 0x24
        while (col_count)
   3de66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
        q31_t ch_1_out_0 = *bias;
   3de68:	e953 5402 	ldrd	r5, r4, [r3, #-8]
        const q7_t *ip_a1 = ip_a0 + num_col_a;
   3de6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   3de6e:	4453      	add	r3, sl
   3de70:	9304      	str	r3, [sp, #16]
        while (col_count)
   3de72:	2a00      	cmp	r2, #0
   3de74:	f000 8226 	beq.w	3e2c4 <arm_nn_mat_mult_kernel_s8_s16+0x4e8>
   3de78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        const q15_t *ip_b1 = ip_b0 + num_col_a;
   3de7a:	9f10      	ldr	r7, [sp, #64]	; 0x40
        const q15_t *ip_b0 = input_b;
   3de7c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
        const q7_t *ip_a1 = ip_a0 + num_col_a;
   3de7e:	9300      	str	r3, [sp, #0]
   3de80:	4452      	add	r2, sl
   3de82:	9201      	str	r2, [sp, #4]
        q31_t ch_1_out_1 = *bias++;
   3de84:	46a1      	mov	r9, r4
        q31_t ch_0_out_1 = *bias++;
   3de86:	462a      	mov	r2, r5
    memcpy(&val, *in_q15, 4);
   3de88:	9800      	ldr	r0, [sp, #0]
   3de8a:	f85a 1b04 	ldr.w	r1, [sl], #4
   3de8e:	f850 3b04 	ldr.w	r3, [r0], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   3de92:	fa2f fb81 	sxtb16	fp, r1
   3de96:	fa2f f883 	sxtb16	r8, r3
   3de9a:	9000      	str	r0, [sp, #0]
   3de9c:	f8d6 e000 	ldr.w	lr, [r6]
   3dea0:	f8d7 c000 	ldr.w	ip, [r7]
  return (op1 >> op2) | (op1 << (32U - op2));
   3dea4:	ea4f 2131 	mov.w	r1, r1, ror #8
   3dea8:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   3deac:	fa2f f181 	sxtb16	r1, r1
   3deb0:	fa2f f383 	sxtb16	r3, r3
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
   3deb4:	eac1 402b 	pkhtb	r0, r1, fp, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
   3deb8:	eacb 4101 	pkhbt	r1, fp, r1, lsl #16
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
   3debc:	eac3 4b28 	pkhtb	fp, r3, r8, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
   3dec0:	eac8 4303 	pkhbt	r3, r8, r3, lsl #16
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   3dec4:	fb21 550e 	smlad	r5, r1, lr, r5
   3dec8:	fb21 220c 	smlad	r2, r1, ip, r2
   3decc:	fb23 440e 	smlad	r4, r3, lr, r4
   3ded0:	fb23 930c 	smlad	r3, r3, ip, r9
    memcpy(&val, *in_q15, 4);
   3ded4:	6871      	ldr	r1, [r6, #4]
    *in_q15 += 2;
   3ded6:	f8d7 9004 	ldr.w	r9, [r7, #4]
   3deda:	3608      	adds	r6, #8
   3dedc:	3708      	adds	r7, #8
   3dede:	fb20 5501 	smlad	r5, r0, r1, r5
   3dee2:	fb20 2209 	smlad	r2, r0, r9, r2
   3dee6:	fb2b 4401 	smlad	r4, fp, r1, r4
   3deea:	fb2b 3909 	smlad	r9, fp, r9, r3
        while (col_count)
   3deee:	9b01      	ldr	r3, [sp, #4]
   3def0:	459a      	cmp	sl, r3
   3def2:	d1c9      	bne.n	3de88 <arm_nn_mat_mult_kernel_s8_s16+0xac>
            ip_a1 = read_and_pad(ip_a1, &a11, &a12);
   3def4:	9b04      	ldr	r3, [sp, #16]
   3def6:	990c      	ldr	r1, [sp, #48]	; 0x30
   3def8:	440b      	add	r3, r1
   3defa:	9304      	str	r3, [sp, #16]
   3defc:	e9dd 3111 	ldrd	r3, r1, [sp, #68]	; 0x44
        while (col_count)
   3df00:	980a      	ldr	r0, [sp, #40]	; 0x28
   3df02:	2800      	cmp	r0, #0
   3df04:	d03e      	beq.n	3df84 <arm_nn_mat_mult_kernel_s8_s16+0x1a8>
            q7_t a0 = *ip_a0++;
   3df06:	9e01      	ldr	r6, [sp, #4]
            q7_t a1 = *ip_a1++;
   3df08:	9804      	ldr	r0, [sp, #16]
            q7_t a0 = *ip_a0++;
   3df0a:	f996 7000 	ldrsb.w	r7, [r6]
            q7_t a1 = *ip_a1++;
   3df0e:	f990 0000 	ldrsb.w	r0, [r0]
            q15_t b0 = *ip_b0++;
   3df12:	f9b1 6000 	ldrsh.w	r6, [r1]
            ch_0_out_0 += a0 * b0;
   3df16:	fb16 5507 	smlabb	r5, r6, r7, r5
            ch_1_out_0 += a1 * b0;
   3df1a:	fb16 4400 	smlabb	r4, r6, r0, r4
            q15_t b1 = *ip_b1++;
   3df1e:	f9b3 6000 	ldrsh.w	r6, [r3]
            ch_0_out_1 += a0 * b1;
   3df22:	fb16 2207 	smlabb	r2, r6, r7, r2
        while (col_count)
   3df26:	9f13      	ldr	r7, [sp, #76]	; 0x4c
            ch_1_out_1 += a1 * b1;
   3df28:	fb16 9900 	smlabb	r9, r6, r0, r9
        while (col_count)
   3df2c:	b337      	cbz	r7, 3df7c <arm_nn_mat_mult_kernel_s8_s16+0x1a0>
            q7_t a0 = *ip_a0++;
   3df2e:	9e01      	ldr	r6, [sp, #4]
            q7_t a1 = *ip_a1++;
   3df30:	9804      	ldr	r0, [sp, #16]
            q7_t a0 = *ip_a0++;
   3df32:	f996 7001 	ldrsb.w	r7, [r6, #1]
            q7_t a1 = *ip_a1++;
   3df36:	f990 0001 	ldrsb.w	r0, [r0, #1]
            q15_t b0 = *ip_b0++;
   3df3a:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
            ch_1_out_0 += a1 * b0;
   3df3e:	fb16 4400 	smlabb	r4, r6, r0, r4
            ch_0_out_0 += a0 * b0;
   3df42:	fb16 5507 	smlabb	r5, r6, r7, r5
            q15_t b1 = *ip_b1++;
   3df46:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
            ch_1_out_1 += a1 * b1;
   3df4a:	fb16 9900 	smlabb	r9, r6, r0, r9
        while (col_count)
   3df4e:	980a      	ldr	r0, [sp, #40]	; 0x28
   3df50:	2802      	cmp	r0, #2
            ch_0_out_1 += a0 * b1;
   3df52:	fb16 2207 	smlabb	r2, r6, r7, r2
        while (col_count)
   3df56:	d011      	beq.n	3df7c <arm_nn_mat_mult_kernel_s8_s16+0x1a0>
            q7_t a1 = *ip_a1++;
   3df58:	9804      	ldr	r0, [sp, #16]
            q15_t b0 = *ip_b0++;
   3df5a:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
            q7_t a1 = *ip_a1++;
   3df5e:	f990 0002 	ldrsb.w	r0, [r0, #2]
            q15_t b1 = *ip_b1++;
   3df62:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
            q7_t a0 = *ip_a0++;
   3df66:	9e01      	ldr	r6, [sp, #4]
            ch_1_out_0 += a1 * b0;
   3df68:	fb11 4400 	smlabb	r4, r1, r0, r4
            ch_1_out_1 += a1 * b1;
   3df6c:	fb13 9900 	smlabb	r9, r3, r0, r9
            q7_t a0 = *ip_a0++;
   3df70:	f996 0002 	ldrsb.w	r0, [r6, #2]
            ch_0_out_0 += a0 * b0;
   3df74:	fb11 5500 	smlabb	r5, r1, r0, r5
            ch_0_out_1 += a0 * b1;
   3df78:	fb13 2200 	smlabb	r2, r3, r0, r2
            q7_t a0 = *ip_a0++;
   3df7c:	9b01      	ldr	r3, [sp, #4]
   3df7e:	990a      	ldr	r1, [sp, #40]	; 0x28
   3df80:	440b      	add	r3, r1
   3df82:	9301      	str	r3, [sp, #4]
        } /* while over col_count */

        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
   3df84:	9b03      	ldr	r3, [sp, #12]
   3df86:	f853 0c08 	ldr.w	r0, [r3, #-8]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   3df8a:	9b02      	ldr	r3, [sp, #8]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3df8c:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   3df90:	f853 3c08 	ldr.w	r3, [r3, #-8]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3df94:	408d      	lsls	r5, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   3df96:	2600      	movs	r6, #0
   3df98:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   3df9c:	fbc5 1603 	smlal	r1, r6, r5, r3
    result = (int32_t)(mult.long_long >> 31);
   3dfa0:	0fc9      	lsrs	r1, r1, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3dfa2:	2800      	cmp	r0, #0
    result = (int32_t)(mult.long_long >> 31);
   3dfa4:	ea41 0646 	orr.w	r6, r1, r6, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3dfa8:	dc0d      	bgt.n	3dfc6 <arm_nn_mat_mult_kernel_s8_s16+0x1ea>
   3dfaa:	4240      	negs	r0, r0
    const q31_t remainder_mask = (1 << exponent) - 1;
   3dfac:	2301      	movs	r3, #1
   3dfae:	4083      	lsls	r3, r0
   3dfb0:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
   3dfb2:	ea06 0103 	and.w	r1, r6, r3
    if (result < 0)
   3dfb6:	4106      	asrs	r6, r0
    q31_t threshold = remainder_mask >> 1;
   3dfb8:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
   3dfbc:	bf48      	it	mi
   3dfbe:	3301      	addmi	r3, #1
    if (remainder > threshold)
   3dfc0:	4299      	cmp	r1, r3
        result++;
   3dfc2:	bfc8      	it	gt
   3dfc4:	3601      	addgt	r6, #1
        ch_0_out_0 += out_offset;
   3dfc6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   3dfc8:	441e      	add	r6, r3
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
   3dfca:	9b05      	ldr	r3, [sp, #20]
   3dfcc:	429e      	cmp	r6, r3
   3dfce:	bfb8      	it	lt
   3dfd0:	461e      	movlt	r6, r3
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
   3dfd2:	9b06      	ldr	r3, [sp, #24]
   3dfd4:	429e      	cmp	r6, r3
   3dfd6:	bfa8      	it	ge
   3dfd8:	461e      	movge	r6, r3
        *out_0++ = (q7_t)ch_0_out_0;
   3dfda:	9b07      	ldr	r3, [sp, #28]
   3dfdc:	f803 6c02 	strb.w	r6, [r3, #-2]

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
   3dfe0:	9b03      	ldr	r3, [sp, #12]
   3dfe2:	f853 0c08 	ldr.w	r0, [r3, #-8]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   3dfe6:	9b02      	ldr	r3, [sp, #8]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3dfe8:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   3dfec:	f853 3c08 	ldr.w	r3, [r3, #-8]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3dff0:	408a      	lsls	r2, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   3dff2:	2500      	movs	r5, #0
   3dff4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   3dff8:	fbc2 1503 	smlal	r1, r5, r2, r3
    result = (int32_t)(mult.long_long >> 31);
   3dffc:	0fc9      	lsrs	r1, r1, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3dffe:	2800      	cmp	r0, #0
    result = (int32_t)(mult.long_long >> 31);
   3e000:	ea41 0545 	orr.w	r5, r1, r5, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3e004:	dc0d      	bgt.n	3e022 <arm_nn_mat_mult_kernel_s8_s16+0x246>
   3e006:	4240      	negs	r0, r0
    const q31_t remainder_mask = (1 << exponent) - 1;
   3e008:	2301      	movs	r3, #1
   3e00a:	4083      	lsls	r3, r0
   3e00c:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
   3e00e:	ea05 0203 	and.w	r2, r5, r3
    if (result < 0)
   3e012:	4105      	asrs	r5, r0
    q31_t threshold = remainder_mask >> 1;
   3e014:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
   3e018:	bf48      	it	mi
   3e01a:	3301      	addmi	r3, #1
    if (remainder > threshold)
   3e01c:	429a      	cmp	r2, r3
        result++;
   3e01e:	bfc8      	it	gt
   3e020:	3501      	addgt	r5, #1
        ch_0_out_1 += out_offset;
   3e022:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   3e024:	441d      	add	r5, r3
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
   3e026:	9b05      	ldr	r3, [sp, #20]
   3e028:	429d      	cmp	r5, r3
   3e02a:	bfb8      	it	lt
   3e02c:	461d      	movlt	r5, r3
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
   3e02e:	9b06      	ldr	r3, [sp, #24]
   3e030:	429d      	cmp	r5, r3
   3e032:	bfa8      	it	ge
   3e034:	461d      	movge	r5, r3
        *out_1++ = (q7_t)ch_0_out_1;
   3e036:	9b08      	ldr	r3, [sp, #32]
   3e038:	f803 5c02 	strb.w	r5, [r3, #-2]
        out_mult++;
        out_shift++;

        ch_1_out_0 = arm_nn_requantize(ch_1_out_0, *out_mult, *out_shift);
   3e03c:	9b03      	ldr	r3, [sp, #12]
   3e03e:	f853 1c04 	ldr.w	r1, [r3, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   3e042:	9b02      	ldr	r3, [sp, #8]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3e044:	ea21 72e1 	bic.w	r2, r1, r1, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   3e048:	f853 3c04 	ldr.w	r3, [r3, #-4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3e04c:	4094      	lsls	r4, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   3e04e:	2000      	movs	r0, #0
   3e050:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   3e054:	fbc4 2003 	smlal	r2, r0, r4, r3
    result = (int32_t)(mult.long_long >> 31);
   3e058:	0fd2      	lsrs	r2, r2, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3e05a:	2900      	cmp	r1, #0
    result = (int32_t)(mult.long_long >> 31);
   3e05c:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3e060:	dc0d      	bgt.n	3e07e <arm_nn_mat_mult_kernel_s8_s16+0x2a2>
   3e062:	4249      	negs	r1, r1
    const q31_t remainder_mask = (1 << exponent) - 1;
   3e064:	2301      	movs	r3, #1
   3e066:	408b      	lsls	r3, r1
   3e068:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
   3e06a:	ea00 0203 	and.w	r2, r0, r3
    if (result < 0)
   3e06e:	4108      	asrs	r0, r1
    q31_t threshold = remainder_mask >> 1;
   3e070:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
   3e074:	bf48      	it	mi
   3e076:	3301      	addmi	r3, #1
    if (remainder > threshold)
   3e078:	429a      	cmp	r2, r3
        result++;
   3e07a:	bfc8      	it	gt
   3e07c:	3001      	addgt	r0, #1
        ch_1_out_0 += out_offset;
   3e07e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   3e080:	4418      	add	r0, r3
        ch_1_out_0 = MAX(ch_1_out_0, activation_min);
   3e082:	9b05      	ldr	r3, [sp, #20]
   3e084:	4298      	cmp	r0, r3
   3e086:	bfb8      	it	lt
   3e088:	4618      	movlt	r0, r3
        ch_1_out_0 = MIN(ch_1_out_0, activation_max);
   3e08a:	9b06      	ldr	r3, [sp, #24]
   3e08c:	4298      	cmp	r0, r3
   3e08e:	bfa8      	it	ge
   3e090:	4618      	movge	r0, r3
        *out_0++ = (q7_t)ch_1_out_0;
   3e092:	9b07      	ldr	r3, [sp, #28]
   3e094:	f803 0c01 	strb.w	r0, [r3, #-1]

        ch_1_out_1 = arm_nn_requantize(ch_1_out_1, *out_mult, *out_shift);
   3e098:	9b03      	ldr	r3, [sp, #12]
   3e09a:	f853 1c04 	ldr.w	r1, [r3, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   3e09e:	9b02      	ldr	r3, [sp, #8]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3e0a0:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   3e0a4:	f853 3c04 	ldr.w	r3, [r3, #-4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3e0a8:	fa09 f000 	lsl.w	r0, r9, r0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   3e0ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   3e0b0:	2400      	movs	r4, #0
   3e0b2:	fbc0 2403 	smlal	r2, r4, r0, r3
    result = (int32_t)(mult.long_long >> 31);
   3e0b6:	0fd2      	lsrs	r2, r2, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3e0b8:	2900      	cmp	r1, #0
    result = (int32_t)(mult.long_long >> 31);
   3e0ba:	ea42 0444 	orr.w	r4, r2, r4, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3e0be:	dc0d      	bgt.n	3e0dc <arm_nn_mat_mult_kernel_s8_s16+0x300>
   3e0c0:	4249      	negs	r1, r1
    const q31_t remainder_mask = (1 << exponent) - 1;
   3e0c2:	2301      	movs	r3, #1
   3e0c4:	408b      	lsls	r3, r1
   3e0c6:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
   3e0c8:	ea04 0203 	and.w	r2, r4, r3
    if (result < 0)
   3e0cc:	410c      	asrs	r4, r1
    q31_t threshold = remainder_mask >> 1;
   3e0ce:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
   3e0d2:	bf48      	it	mi
   3e0d4:	3301      	addmi	r3, #1
    if (remainder > threshold)
   3e0d6:	429a      	cmp	r2, r3
        result++;
   3e0d8:	bfc8      	it	gt
   3e0da:	3401      	addgt	r4, #1
        ch_1_out_1 += out_offset;
   3e0dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
        ch_1_out_1 = MAX(ch_1_out_1, activation_min);
        ch_1_out_1 = MIN(ch_1_out_1, activation_max);
        *out_1++ = (q7_t)ch_1_out_1;
   3e0de:	9a08      	ldr	r2, [sp, #32]
        out_mult++;
        out_shift++;

        /* skip row */
        ip_a0 += num_col_a;
   3e0e0:	9901      	ldr	r1, [sp, #4]
   3e0e2:	980b      	ldr	r0, [sp, #44]	; 0x2c
        ch_1_out_1 += out_offset;
   3e0e4:	441c      	add	r4, r3
        ch_1_out_1 = MAX(ch_1_out_1, activation_min);
   3e0e6:	9b05      	ldr	r3, [sp, #20]
   3e0e8:	429c      	cmp	r4, r3
   3e0ea:	bfb8      	it	lt
   3e0ec:	461c      	movlt	r4, r3
        ch_1_out_1 = MIN(ch_1_out_1, activation_max);
   3e0ee:	9b06      	ldr	r3, [sp, #24]
   3e0f0:	429c      	cmp	r4, r3
   3e0f2:	bfa8      	it	ge
   3e0f4:	461c      	movge	r4, r3
        *out_1++ = (q7_t)ch_1_out_1;
   3e0f6:	f802 4c01 	strb.w	r4, [r2, #-1]
    while (row_count)
   3e0fa:	3202      	adds	r2, #2
   3e0fc:	9208      	str	r2, [sp, #32]
   3e0fe:	9a02      	ldr	r2, [sp, #8]
   3e100:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3e102:	3208      	adds	r2, #8
   3e104:	9202      	str	r2, [sp, #8]
   3e106:	9a03      	ldr	r2, [sp, #12]
        ip_a0 += num_col_a;
   3e108:	4401      	add	r1, r0
    while (row_count)
   3e10a:	3208      	adds	r2, #8
        ip_a0 += num_col_a;
   3e10c:	468a      	mov	sl, r1
    while (row_count)
   3e10e:	9203      	str	r2, [sp, #12]
   3e110:	9907      	ldr	r1, [sp, #28]
   3e112:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   3e114:	3308      	adds	r3, #8
   3e116:	3102      	adds	r1, #2
   3e118:	429a      	cmp	r2, r3
   3e11a:	9309      	str	r3, [sp, #36]	; 0x24
   3e11c:	9107      	str	r1, [sp, #28]
   3e11e:	f47f aea1 	bne.w	3de64 <arm_nn_mat_mult_kernel_s8_s16+0x88>
        out_shift++;
   3e122:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   3e124:	9a14      	ldr	r2, [sp, #80]	; 0x50
   3e126:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   3e12a:	9214      	str	r2, [sp, #80]	; 0x50
        out_mult++;
   3e12c:	9a22      	ldr	r2, [sp, #136]	; 0x88
   3e12e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   3e132:	9222      	str	r2, [sp, #136]	; 0x88
        *out_0++ = (q7_t)ch_1_out_0;
   3e134:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   3e136:	eb02 0243 	add.w	r2, r2, r3, lsl #1
   3e13a:	9228      	str	r2, [sp, #160]	; 0xa0
        *out_1++ = (q7_t)ch_1_out_1;
   3e13c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   3e13e:	eb02 0243 	add.w	r2, r2, r3, lsl #1
   3e142:	9215      	str	r2, [sp, #84]	; 0x54
        q31_t ch_1_out_1 = *bias++;
   3e144:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   3e146:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   3e14a:	9327      	str	r3, [sp, #156]	; 0x9c
        row_count--;
    }

    /* compute the last odd numbered row if any */
    if (output_ch & 0x1)
   3e14c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   3e14e:	07db      	lsls	r3, r3, #31
   3e150:	f140 80b2 	bpl.w	3e2b8 <arm_nn_mat_mult_kernel_s8_s16+0x4dc>
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
        const q15_t *ip_b1 = ip_b0 + num_col_a;

        /* load the bias */
        q31_t ch_0_out_0 = *bias;
   3e154:	9b27      	ldr	r3, [sp, #156]	; 0x9c
        const q15_t *ip_b1 = ip_b0 + num_col_a;
   3e156:	9c0d      	ldr	r4, [sp, #52]	; 0x34
        q31_t ch_0_out_0 = *bias;
   3e158:	6819      	ldr	r1, [r3, #0]
        const q15_t *ip_b1 = ip_b0 + num_col_a;
   3e15a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        q31_t ch_0_out_1 = *bias++;

        uint16_t col_count = num_col_a >> 2;
        while (col_count)
   3e15c:	ea5f 0893 	movs.w	r8, r3, lsr #2
        const q15_t *ip_b1 = ip_b0 + num_col_a;
   3e160:	eb04 0e43 	add.w	lr, r4, r3, lsl #1
        while (col_count)
   3e164:	f000 80b5 	beq.w	3e2d2 <arm_nn_mat_mult_kernel_s8_s16+0x4f6>
   3e168:	eb0a 0c88 	add.w	ip, sl, r8, lsl #2
        const q15_t *ip_b1 = ip_b0 + num_col_a;
   3e16c:	4675      	mov	r5, lr
        q31_t ch_0_out_1 = *bias++;
   3e16e:	460a      	mov	r2, r1
    memcpy(&val, *in_q7, 4);
   3e170:	f85a 0b04 	ldr.w	r0, [sl], #4
   3e174:	6826      	ldr	r6, [r4, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   3e176:	fa2f f380 	sxtb16	r3, r0
  return (op1 >> op2) | (op1 << (32U - op2));
   3e17a:	ea4f 2030 	mov.w	r0, r0, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   3e17e:	fa2f f080 	sxtb16	r0, r0
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
   3e182:	eac0 4723 	pkhtb	r7, r0, r3, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
   3e186:	eac3 4300 	pkhbt	r3, r3, r0, lsl #16
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   3e18a:	fb23 1106 	smlad	r1, r3, r6, r1
   3e18e:	6828      	ldr	r0, [r5, #0]
   3e190:	fb23 2300 	smlad	r3, r3, r0, r2
    memcpy(&val, *in_q15, 4);
   3e194:	6860      	ldr	r0, [r4, #4]
    *in_q15 += 2;
   3e196:	686a      	ldr	r2, [r5, #4]
   3e198:	3408      	adds	r4, #8
   3e19a:	3508      	adds	r5, #8
   3e19c:	fb27 1100 	smlad	r1, r7, r0, r1
   3e1a0:	fb27 3202 	smlad	r2, r7, r2, r3
        while (col_count)
   3e1a4:	45e2      	cmp	sl, ip
   3e1a6:	d1e3      	bne.n	3e170 <arm_nn_mat_mult_kernel_s8_s16+0x394>
   3e1a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   3e1aa:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   3e1ae:	930d      	str	r3, [sp, #52]	; 0x34
   3e1b0:	eb0e 0ec8 	add.w	lr, lr, r8, lsl #3
            ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);

            col_count--;
        }
        col_count = num_col_a & 0x3;
        while (col_count)
   3e1b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   3e1b6:	f013 0303 	ands.w	r3, r3, #3
   3e1ba:	d020      	beq.n	3e1fe <arm_nn_mat_mult_kernel_s8_s16+0x422>
        {
            q7_t a0 = *ip_a0++;
            q15_t b0 = *ip_b0++;
            q15_t b1 = *ip_b1++;

            ch_0_out_0 += a0 * b0;
   3e1bc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
            q7_t a0 = *ip_a0++;
   3e1be:	f99c 0000 	ldrsb.w	r0, [ip]
            ch_0_out_0 += a0 * b0;
   3e1c2:	882c      	ldrh	r4, [r5, #0]
            ch_0_out_1 += a0 * b1;
            col_count--;
   3e1c4:	3b01      	subs	r3, #1
            ch_0_out_0 += a0 * b0;
   3e1c6:	fb14 1100 	smlabb	r1, r4, r0, r1
            ch_0_out_1 += a0 * b1;
   3e1ca:	f8be 4000 	ldrh.w	r4, [lr]
            col_count--;
   3e1ce:	b29b      	uxth	r3, r3
            ch_0_out_1 += a0 * b1;
   3e1d0:	fb14 2200 	smlabb	r2, r4, r0, r2
        while (col_count)
   3e1d4:	b19b      	cbz	r3, 3e1fe <arm_nn_mat_mult_kernel_s8_s16+0x422>
            q7_t a0 = *ip_a0++;
   3e1d6:	f99c 0001 	ldrsb.w	r0, [ip, #1]
            ch_0_out_0 += a0 * b0;
   3e1da:	886c      	ldrh	r4, [r5, #2]
   3e1dc:	fb14 1100 	smlabb	r1, r4, r0, r1
            ch_0_out_1 += a0 * b1;
   3e1e0:	f8be 4002 	ldrh.w	r4, [lr, #2]
        while (col_count)
   3e1e4:	2b01      	cmp	r3, #1
            ch_0_out_1 += a0 * b1;
   3e1e6:	fb14 2200 	smlabb	r2, r4, r0, r2
        while (col_count)
   3e1ea:	d008      	beq.n	3e1fe <arm_nn_mat_mult_kernel_s8_s16+0x422>
            q7_t a0 = *ip_a0++;
   3e1ec:	f99c 3002 	ldrsb.w	r3, [ip, #2]
            ch_0_out_0 += a0 * b0;
   3e1f0:	88a8      	ldrh	r0, [r5, #4]
   3e1f2:	fb10 1103 	smlabb	r1, r0, r3, r1
            ch_0_out_1 += a0 * b1;
   3e1f6:	f8be 0004 	ldrh.w	r0, [lr, #4]
   3e1fa:	fb10 2203 	smlabb	r2, r0, r3, r2
        }
        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
   3e1fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
   3e200:	6818      	ldr	r0, [r3, #0]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   3e202:	9b22      	ldr	r3, [sp, #136]	; 0x88
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3e204:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   3e208:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3e20a:	fa01 f404 	lsl.w	r4, r1, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   3e20e:	2500      	movs	r5, #0
   3e210:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   3e214:	fbc4 1503 	smlal	r1, r5, r4, r3
    result = (int32_t)(mult.long_long >> 31);
   3e218:	0fcb      	lsrs	r3, r1, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3e21a:	2800      	cmp	r0, #0
    result = (int32_t)(mult.long_long >> 31);
   3e21c:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3e220:	dc0d      	bgt.n	3e23e <arm_nn_mat_mult_kernel_s8_s16+0x462>
   3e222:	4240      	negs	r0, r0
    const q31_t remainder_mask = (1 << exponent) - 1;
   3e224:	2101      	movs	r1, #1
   3e226:	4081      	lsls	r1, r0
   3e228:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
   3e22a:	ea03 0401 	and.w	r4, r3, r1
    if (result < 0)
   3e22e:	4103      	asrs	r3, r0
    q31_t threshold = remainder_mask >> 1;
   3e230:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
   3e234:	bf48      	it	mi
   3e236:	3101      	addmi	r1, #1
    if (remainder > threshold)
   3e238:	428c      	cmp	r4, r1
        result++;
   3e23a:	bfc8      	it	gt
   3e23c:	3301      	addgt	r3, #1
        ch_0_out_0 += out_offset;
   3e23e:	9923      	ldr	r1, [sp, #140]	; 0x8c
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
        *out_0++ = (q7_t)ch_0_out_0;
   3e240:	9828      	ldr	r0, [sp, #160]	; 0xa0
        ch_0_out_0 += out_offset;
   3e242:	440b      	add	r3, r1
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
   3e244:	9905      	ldr	r1, [sp, #20]
   3e246:	428b      	cmp	r3, r1
   3e248:	bfb8      	it	lt
   3e24a:	460b      	movlt	r3, r1
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
   3e24c:	9906      	ldr	r1, [sp, #24]
   3e24e:	428b      	cmp	r3, r1
   3e250:	bfa8      	it	ge
   3e252:	460b      	movge	r3, r1
        *out_0++ = (q7_t)ch_0_out_0;
   3e254:	f800 3b01 	strb.w	r3, [r0], #1

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
   3e258:	9b14      	ldr	r3, [sp, #80]	; 0x50
   3e25a:	681c      	ldr	r4, [r3, #0]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   3e25c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   3e25e:	681e      	ldr	r6, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3e260:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   3e264:	409a      	lsls	r2, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   3e266:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   3e26a:	2300      	movs	r3, #0
   3e26c:	fbc2 1306 	smlal	r1, r3, r2, r6
   3e270:	461d      	mov	r5, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3e272:	2c00      	cmp	r4, #0
    result = (int32_t)(mult.long_long >> 31);
   3e274:	ea4f 73d1 	mov.w	r3, r1, lsr #31
   3e278:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3e27c:	dc0d      	bgt.n	3e29a <arm_nn_mat_mult_kernel_s8_s16+0x4be>
   3e27e:	4264      	negs	r4, r4
    const q31_t remainder_mask = (1 << exponent) - 1;
   3e280:	2201      	movs	r2, #1
   3e282:	40a2      	lsls	r2, r4
   3e284:	3a01      	subs	r2, #1
    int32_t remainder = remainder_mask & dividend;
   3e286:	ea03 0102 	and.w	r1, r3, r2
    if (result < 0)
   3e28a:	4123      	asrs	r3, r4
    q31_t threshold = remainder_mask >> 1;
   3e28c:	ea4f 0262 	mov.w	r2, r2, asr #1
        threshold++;
   3e290:	bf48      	it	mi
   3e292:	3201      	addmi	r2, #1
    if (remainder > threshold)
   3e294:	4291      	cmp	r1, r2
        result++;
   3e296:	bfc8      	it	gt
   3e298:	3301      	addgt	r3, #1
        ch_0_out_1 += out_offset;
   3e29a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
        *out_0++ = (q7_t)ch_0_out_0;
   3e29c:	9028      	str	r0, [sp, #160]	; 0xa0
        ch_0_out_1 += out_offset;
   3e29e:	4413      	add	r3, r2
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
   3e2a0:	9a05      	ldr	r2, [sp, #20]
   3e2a2:	429a      	cmp	r2, r3
   3e2a4:	bfb8      	it	lt
   3e2a6:	461a      	movlt	r2, r3
   3e2a8:	4613      	mov	r3, r2
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
   3e2aa:	9a06      	ldr	r2, [sp, #24]
   3e2ac:	429a      	cmp	r2, r3
   3e2ae:	bfa8      	it	ge
   3e2b0:	461a      	movge	r2, r3
   3e2b2:	4613      	mov	r3, r2
        *out_1++ = (q7_t)ch_0_out_1;
   3e2b4:	9a15      	ldr	r2, [sp, #84]	; 0x54
   3e2b6:	7013      	strb	r3, [r2, #0]
    (void)output_bias;
    (void)out_0;
    /* To be completed */
    return NULL;
#endif
}
   3e2b8:	9816      	ldr	r0, [sp, #88]	; 0x58
   3e2ba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   3e2bc:	4418      	add	r0, r3
   3e2be:	b019      	add	sp, #100	; 0x64
   3e2c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        const q15_t *ip_b1 = ip_b0 + num_col_a;
   3e2c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
        const q15_t *ip_b0 = input_b;
   3e2c6:	990d      	ldr	r1, [sp, #52]	; 0x34
        while (col_count)
   3e2c8:	f8cd a004 	str.w	sl, [sp, #4]
        q31_t ch_1_out_1 = *bias++;
   3e2cc:	46a1      	mov	r9, r4
        q31_t ch_0_out_1 = *bias++;
   3e2ce:	462a      	mov	r2, r5
   3e2d0:	e616      	b.n	3df00 <arm_nn_mat_mult_kernel_s8_s16+0x124>
        while (col_count)
   3e2d2:	46d4      	mov	ip, sl
        q31_t ch_0_out_1 = *bias++;
   3e2d4:	460a      	mov	r2, r1
   3e2d6:	e76d      	b.n	3e1b4 <arm_nn_mat_mult_kernel_s8_s16+0x3d8>

0003e2d8 <arm_nn_mat_mult_nt_t_s8>:
                                   const int32_t rhs_cols,
                                   const int32_t lhs_offset,
                                   const int32_t dst_offset,
                                   const int32_t activation_min,
                                   const int32_t activation_max)
{
   3e2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e2dc:	b09f      	sub	sp, #124	; 0x7c
   3e2de:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
   3e2e2:	9016      	str	r0, [sp, #88]	; 0x58
#if defined(ARM_MATH_DSP)
    const int32_t off0 = rhs_cols - 4;

    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   3e2e4:	982b      	ldr	r0, [sp, #172]	; 0xac
{
   3e2e6:	f8dd a0b0 	ldr.w	sl, [sp, #176]	; 0xb0
   3e2ea:	911c      	str	r1, [sp, #112]	; 0x70
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   3e2ec:	1e42      	subs	r2, r0, #1
   3e2ee:	2a00      	cmp	r2, #0
   3e2f0:	9219      	str	r2, [sp, #100]	; 0x64
   3e2f2:	f340 81fc 	ble.w	3e6ee <arm_nn_mat_mult_nt_t_s8+0x416>
   3e2f6:	4604      	mov	r4, r0
        {
            lhs_offset_contribution0 += bias[rhs_rows_idx];
            lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
        }

        int32_t lhs_rows_idx = lhs_rows >> 1;
   3e2f8:	982a      	ldr	r0, [sp, #168]	; 0xa8

        rhs += 2 * rhs_cols;
        dst += 2;
    }

    if (rhs_rows % 2)
   3e2fa:	910c      	str	r1, [sp, #48]	; 0x30
   3e2fc:	461d      	mov	r5, r3
   3e2fe:	f1aa 0310 	sub.w	r3, sl, #16
        int32_t lhs_rows_idx = lhs_rows >> 1;
   3e302:	1042      	asrs	r2, r0, #1
   3e304:	f023 030f 	bic.w	r3, r3, #15
   3e308:	f103 0010 	add.w	r0, r3, #16
   3e30c:	fb04 f302 	mul.w	r3, r4, r2
   3e310:	eb05 0443 	add.w	r4, r5, r3, lsl #1
   3e314:	941a      	str	r4, [sp, #104]	; 0x68
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   3e316:	2400      	movs	r4, #0
   3e318:	9411      	str	r4, [sp, #68]	; 0x44
   3e31a:	9c2b      	ldr	r4, [sp, #172]	; 0xac
        int32_t lhs_rows_idx = lhs_rows >> 1;
   3e31c:	9218      	str	r2, [sp, #96]	; 0x60
   3e31e:	1c63      	adds	r3, r4, #1
   3e320:	462a      	mov	r2, r5
   3e322:	441a      	add	r2, r3
   3e324:	921b      	str	r2, [sp, #108]	; 0x6c
   3e326:	f06f 0203 	mvn.w	r2, #3
   3e32a:	eba2 020a 	sub.w	r2, r2, sl
   3e32e:	921d      	str	r2, [sp, #116]	; 0x74
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   3e330:	f1aa 020f 	sub.w	r2, sl, #15
   3e334:	920d      	str	r2, [sp, #52]	; 0x34
        if (lhs_rows % 2)
   3e336:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   3e338:	9009      	str	r0, [sp, #36]	; 0x24
   3e33a:	f002 0201 	and.w	r2, r2, #1
   3e33e:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
   3e342:	9217      	str	r2, [sp, #92]	; 0x5c
        rhs += 2 * rhs_cols;
   3e344:	ea4f 024a 	mov.w	r2, sl, lsl #1
   3e348:	9215      	str	r2, [sp, #84]	; 0x54
   3e34a:	180a      	adds	r2, r1, r0
   3e34c:	9212      	str	r2, [sp, #72]	; 0x48
   3e34e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   3e350:	9010      	str	r0, [sp, #64]	; 0x40
   3e352:	3204      	adds	r2, #4
   3e354:	9205      	str	r2, [sp, #20]
   3e356:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   3e358:	3204      	adds	r2, #4
   3e35a:	9204      	str	r2, [sp, #16]
   3e35c:	0062      	lsls	r2, r4, #1
   3e35e:	920e      	str	r2, [sp, #56]	; 0x38
   3e360:	46d4      	mov	ip, sl
   3e362:	9b14      	ldr	r3, [sp, #80]	; 0x50
   3e364:	9a11      	ldr	r2, [sp, #68]	; 0x44
        for (int32_t x = 0; x < rhs_cols; ++x)
   3e366:	f1bc 0f00 	cmp.w	ip, #0
   3e36a:	4413      	add	r3, r2
   3e36c:	9306      	str	r3, [sp, #24]
   3e36e:	f340 8471 	ble.w	3ec54 <arm_nn_mat_mult_nt_t_s8+0x97c>
   3e372:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   3e374:	9d12      	ldr	r5, [sp, #72]	; 0x48
        q31_t lhs_offset_contribution1 = 0;
   3e376:	2200      	movs	r2, #0
   3e378:	3b01      	subs	r3, #1
        for (int32_t x = 0; x < rhs_cols; ++x)
   3e37a:	4629      	mov	r1, r5
        q31_t lhs_offset_contribution0 = 0;
   3e37c:	4614      	mov	r4, r2
            lhs_offset_contribution0 += rhs[x];
   3e37e:	f913 0f01 	ldrsb.w	r0, [r3, #1]!
   3e382:	4404      	add	r4, r0
            lhs_offset_contribution1 += rhs[x + rhs_cols];
   3e384:	f911 0f01 	ldrsb.w	r0, [r1, #1]!
        for (int32_t x = 0; x < rhs_cols; ++x)
   3e388:	429d      	cmp	r5, r3
            lhs_offset_contribution1 += rhs[x + rhs_cols];
   3e38a:	4402      	add	r2, r0
        for (int32_t x = 0; x < rhs_cols; ++x)
   3e38c:	d1f7      	bne.n	3e37e <arm_nn_mat_mult_nt_t_s8+0xa6>
        lhs_offset_contribution0 *= lhs_offset;
   3e38e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   3e390:	fb04 f303 	mul.w	r3, r4, r3
   3e394:	930a      	str	r3, [sp, #40]	; 0x28
        lhs_offset_contribution1 *= lhs_offset;
   3e396:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   3e398:	fb02 f303 	mul.w	r3, r2, r3
   3e39c:	930b      	str	r3, [sp, #44]	; 0x2c
        if (bias)
   3e39e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   3e3a0:	b15a      	cbz	r2, 3e3ba <arm_nn_mat_mult_nt_t_s8+0xe2>
            lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
   3e3a2:	9911      	ldr	r1, [sp, #68]	; 0x44
   3e3a4:	980b      	ldr	r0, [sp, #44]	; 0x2c
   3e3a6:	1d13      	adds	r3, r2, #4
   3e3a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   3e3ac:	4418      	add	r0, r3
            lhs_offset_contribution0 += bias[rhs_rows_idx];
   3e3ae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   3e3b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
            lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
   3e3b4:	900b      	str	r0, [sp, #44]	; 0x2c
            lhs_offset_contribution0 += bias[rhs_rows_idx];
   3e3b6:	441a      	add	r2, r3
   3e3b8:	920a      	str	r2, [sp, #40]	; 0x28
        while (lhs_rows_idx)
   3e3ba:	9b18      	ldr	r3, [sp, #96]	; 0x60
   3e3bc:	2b00      	cmp	r3, #0
   3e3be:	f000 8447 	beq.w	3ec50 <arm_nn_mat_mult_nt_t_s8+0x978>
   3e3c2:	9911      	ldr	r1, [sp, #68]	; 0x44
   3e3c4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    *in_q7 += 4;
   3e3c6:	9307      	str	r3, [sp, #28]
   3e3c8:	440a      	add	r2, r1
   3e3ca:	f10c 0304 	add.w	r3, ip, #4
   3e3ce:	9909      	ldr	r1, [sp, #36]	; 0x24
   3e3d0:	9208      	str	r2, [sp, #32]
   3e3d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   3e3d4:	9300      	str	r3, [sp, #0]
   3e3d6:	f10c 0308 	add.w	r3, ip, #8
   3e3da:	440a      	add	r2, r1
   3e3dc:	9301      	str	r3, [sp, #4]
        const q7_t *lhs_ptr = &lhs[0];
   3e3de:	9e16      	ldr	r6, [sp, #88]	; 0x58
   3e3e0:	920f      	str	r2, [sp, #60]	; 0x3c
   3e3e2:	f1ac 0304 	sub.w	r3, ip, #4
   3e3e6:	9302      	str	r3, [sp, #8]
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   3e3e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   3e3ea:	2b00      	cmp	r3, #0
   3e3ec:	f340 8237 	ble.w	3e85e <arm_nn_mat_mult_nt_t_s8+0x586>
   3e3f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
            q31_t res10 = lhs_offset_contribution0;
   3e3f2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   3e3f4:	18f3      	adds	r3, r6, r3
   3e3f6:	9303      	str	r3, [sp, #12]
            q31_t res11 = lhs_offset_contribution1;
   3e3f8:	e9dd 370b 	ldrd	r3, r7, [sp, #44]	; 0x2c
            q31_t res10 = lhs_offset_contribution0;
   3e3fc:	462a      	mov	r2, r5
            q31_t res11 = lhs_offset_contribution1;
   3e3fe:	4619      	mov	r1, r3
    memcpy(&val, *in_q7, 4);
   3e400:	f8d7 e000 	ldr.w	lr, [r7]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   3e404:	f8d6 8000 	ldr.w	r8, [r6]
   3e408:	f857 000c 	ldr.w	r0, [r7, ip]
   3e40c:	fa2f f98e 	sxtb16	r9, lr
   3e410:	fa2f f488 	sxtb16	r4, r8
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   3e414:	fa2f fe9e 	sxtb16	lr, lr, ror #8
   3e418:	fa2f f898 	sxtb16	r8, r8, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   3e41c:	fb24 5509 	smlad	r5, r4, r9, r5
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   3e420:	fa2f fa80 	sxtb16	sl, r0
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   3e424:	fb28 550e 	smlad	r5, r8, lr, r5
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   3e428:	fa2f f090 	sxtb16	r0, r0, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   3e42c:	fb24 330a 	smlad	r3, r4, sl, r3
   3e430:	fb28 3300 	smlad	r3, r8, r0, r3
    memcpy(&val, in_q7, 4);
   3e434:	f856 400c 	ldr.w	r4, [r6, ip]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   3e438:	fa2f f884 	sxtb16	r8, r4
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   3e43c:	fa2f f494 	sxtb16	r4, r4, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   3e440:	fb28 2909 	smlad	r9, r8, r9, r2
   3e444:	fb28 110a 	smlad	r1, r8, sl, r1
   3e448:	fb24 990e 	smlad	r9, r4, lr, r9
    memcpy(&val, *in_q7, 4);
   3e44c:	f8d7 e004 	ldr.w	lr, [r7, #4]
   3e450:	fb24 1100 	smlad	r1, r4, r0, r1
    memcpy(&val, in_q7, 4);
   3e454:	9a00      	ldr	r2, [sp, #0]
   3e456:	f8d6 8004 	ldr.w	r8, [r6, #4]
   3e45a:	58ba      	ldr	r2, [r7, r2]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   3e45c:	fa2f fa8e 	sxtb16	sl, lr
   3e460:	fa2f fb88 	sxtb16	fp, r8
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   3e464:	fa2f fe9e 	sxtb16	lr, lr, ror #8
   3e468:	fa2f f898 	sxtb16	r8, r8, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   3e46c:	fb2b 550a 	smlad	r5, fp, sl, r5
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   3e470:	fa2f f082 	sxtb16	r0, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   3e474:	fb28 550e 	smlad	r5, r8, lr, r5
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   3e478:	fa2f f492 	sxtb16	r4, r2, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   3e47c:	fb2b 3300 	smlad	r3, fp, r0, r3
   3e480:	fb28 3804 	smlad	r8, r8, r4, r3
   3e484:	9a00      	ldr	r2, [sp, #0]
   3e486:	58b2      	ldr	r2, [r6, r2]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   3e488:	fa2f f382 	sxtb16	r3, r2
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   3e48c:	fa2f f292 	sxtb16	r2, r2, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   3e490:	fb23 990a 	smlad	r9, r3, sl, r9
   3e494:	fb23 1100 	smlad	r1, r3, r0, r1
   3e498:	fb22 990e 	smlad	r9, r2, lr, r9
    memcpy(&val, *in_q7, 4);
   3e49c:	f8d7 e008 	ldr.w	lr, [r7, #8]
   3e4a0:	fb22 1204 	smlad	r2, r2, r4, r1
    memcpy(&val, in_q7, 4);
   3e4a4:	9901      	ldr	r1, [sp, #4]
   3e4a6:	68b3      	ldr	r3, [r6, #8]
   3e4a8:	5878      	ldr	r0, [r7, r1]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   3e4aa:	fa2f fa8e 	sxtb16	sl, lr
   3e4ae:	fa2f fb83 	sxtb16	fp, r3
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   3e4b2:	fa2f fe9e 	sxtb16	lr, lr, ror #8
   3e4b6:	fa2f f393 	sxtb16	r3, r3, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   3e4ba:	fb2b 550a 	smlad	r5, fp, sl, r5
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   3e4be:	fa2f f180 	sxtb16	r1, r0
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   3e4c2:	fb23 550e 	smlad	r5, r3, lr, r5
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   3e4c6:	fa2f f490 	sxtb16	r4, r0, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   3e4ca:	fb2b 8801 	smlad	r8, fp, r1, r8
   3e4ce:	fb23 8804 	smlad	r8, r3, r4, r8
   3e4d2:	9b01      	ldr	r3, [sp, #4]
   3e4d4:	58f0      	ldr	r0, [r6, r3]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   3e4d6:	fa2f f380 	sxtb16	r3, r0
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   3e4da:	fa2f f090 	sxtb16	r0, r0, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   3e4de:	fb23 990a 	smlad	r9, r3, sl, r9
   3e4e2:	fb23 2101 	smlad	r1, r3, r1, r2
   3e4e6:	fb20 9e0e 	smlad	lr, r0, lr, r9
    memcpy(&val, *in_q7, 4);
   3e4ea:	68fa      	ldr	r2, [r7, #12]
    *in_q7 += 4;
   3e4ec:	3710      	adds	r7, #16
   3e4ee:	fb20 1004 	smlad	r0, r0, r4, r1
    memcpy(&val, in_q7, 4);
   3e4f2:	9902      	ldr	r1, [sp, #8]
   3e4f4:	68f3      	ldr	r3, [r6, #12]
   3e4f6:	5879      	ldr	r1, [r7, r1]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   3e4f8:	fa2f f982 	sxtb16	r9, r2
    *in_q7 += 4;
   3e4fc:	3610      	adds	r6, #16
   3e4fe:	fa2f fa83 	sxtb16	sl, r3
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   3e502:	fa2f f292 	sxtb16	r2, r2, ror #8
   3e506:	fa2f f393 	sxtb16	r3, r3, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   3e50a:	fb2a 5509 	smlad	r5, sl, r9, r5
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   3e50e:	fa2f fb81 	sxtb16	fp, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   3e512:	fb23 5502 	smlad	r5, r3, r2, r5
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   3e516:	fa2f f491 	sxtb16	r4, r1, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   3e51a:	fb2a 880b 	smlad	r8, sl, fp, r8
   3e51e:	fb23 8304 	smlad	r3, r3, r4, r8
    memcpy(&val, in_q7, 4);
   3e522:	9902      	ldr	r1, [sp, #8]
   3e524:	5871      	ldr	r1, [r6, r1]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   3e526:	fa2f f881 	sxtb16	r8, r1
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   3e52a:	fa2f f191 	sxtb16	r1, r1, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   3e52e:	fb28 ee09 	smlad	lr, r8, r9, lr
   3e532:	fb28 000b 	smlad	r0, r8, fp, r0
   3e536:	fb21 e202 	smlad	r2, r1, r2, lr
   3e53a:	fb21 0104 	smlad	r1, r1, r4, r0
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   3e53e:	9803      	ldr	r0, [sp, #12]
   3e540:	4286      	cmp	r6, r0
   3e542:	f47f af5d 	bne.w	3e400 <arm_nn_mat_mult_nt_t_s8+0x128>
    *in_q7 += 4;
   3e546:	980f      	ldr	r0, [sp, #60]	; 0x3c
   3e548:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3e54c:	45e1      	cmp	r9, ip
   3e54e:	da1e      	bge.n	3e58e <arm_nn_mat_mult_nt_t_s8+0x2b6>
   3e550:	9c10      	ldr	r4, [sp, #64]	; 0x40
   3e552:	eb00 0804 	add.w	r8, r0, r4
   3e556:	9c03      	ldr	r4, [sp, #12]
   3e558:	3801      	subs	r0, #1
   3e55a:	eba8 0809 	sub.w	r8, r8, r9
   3e55e:	3c01      	subs	r4, #1
                q7_t rhs_value0 = rhs_ptr[0];
   3e560:	f910 ef01 	ldrsb.w	lr, [r0, #1]!
                q7_t lhs_value = lhs_ptr[0];
   3e564:	f914 6f01 	ldrsb.w	r6, [r4, #1]!
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
   3e568:	f910 700c 	ldrsb.w	r7, [r0, ip]
                res00 += lhs_value * rhs_value0;
   3e56c:	fb16 550e 	smlabb	r5, r6, lr, r5
                res01 += lhs_value * rhs_value1;
   3e570:	fb16 3307 	smlabb	r3, r6, r7, r3
                lhs_value = lhs_ptr[rhs_cols];
   3e574:	f914 600c 	ldrsb.w	r6, [r4, ip]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3e578:	4580      	cmp	r8, r0
                res10 += lhs_value * rhs_value0;
   3e57a:	fb1e 2206 	smlabb	r2, lr, r6, r2
                res11 += lhs_value * rhs_value1;
   3e57e:	fb17 1106 	smlabb	r1, r7, r6, r1
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3e582:	d1ed      	bne.n	3e560 <arm_nn_mat_mult_nt_t_s8+0x288>
                ++lhs_ptr;
   3e584:	9803      	ldr	r0, [sp, #12]
   3e586:	ebac 0909 	sub.w	r9, ip, r9
   3e58a:	4448      	add	r0, r9
   3e58c:	9003      	str	r0, [sp, #12]
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
   3e58e:	9804      	ldr	r0, [sp, #16]
   3e590:	9c05      	ldr	r4, [sp, #20]
   3e592:	f850 0c04 	ldr.w	r0, [r0, #-4]
   3e596:	f854 6c04 	ldr.w	r6, [r4, #-4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3e59a:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
   3e59e:	40a5      	lsls	r5, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   3e5a0:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
   3e5a4:	f04f 0900 	mov.w	r9, #0
   3e5a8:	fbc5 7906 	smlal	r7, r9, r5, r6
    result = (int32_t)(mult.long_long >> 31);
   3e5ac:	0fff      	lsrs	r7, r7, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3e5ae:	2800      	cmp	r0, #0
    result = (int32_t)(mult.long_long >> 31);
   3e5b0:	ea47 0949 	orr.w	r9, r7, r9, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3e5b4:	f340 8124 	ble.w	3e800 <arm_nn_mat_mult_nt_t_s8+0x528>
    if (result < 0)
   3e5b8:	f1b9 0f00 	cmp.w	r9, #0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3e5bc:	fa02 f404 	lsl.w	r4, r2, r4
    if (result < 0)
   3e5c0:	f2c0 8141 	blt.w	3e846 <arm_nn_mat_mult_nt_t_s8+0x56e>
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   3e5c4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   3e5c8:	2500      	movs	r5, #0
   3e5ca:	fbc6 0504 	smlal	r0, r5, r6, r4
    result = (int32_t)(mult.long_long >> 31);
   3e5ce:	0fc2      	lsrs	r2, r0, #31
   3e5d0:	f04f 0b00 	mov.w	fp, #0
   3e5d4:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    q31_t threshold = remainder_mask >> 1;
   3e5d8:	46da      	mov	sl, fp
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
   3e5da:	9804      	ldr	r0, [sp, #16]
   3e5dc:	6805      	ldr	r5, [r0, #0]
   3e5de:	9805      	ldr	r0, [sp, #20]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3e5e0:	ea25 74e5 	bic.w	r4, r5, r5, asr #31
   3e5e4:	6806      	ldr	r6, [r0, #0]
   3e5e6:	40a3      	lsls	r3, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   3e5e8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   3e5ec:	2700      	movs	r7, #0
   3e5ee:	fbc3 0706 	smlal	r0, r7, r3, r6
    result = (int32_t)(mult.long_long >> 31);
   3e5f2:	0fc0      	lsrs	r0, r0, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3e5f4:	2d00      	cmp	r5, #0
    result = (int32_t)(mult.long_long >> 31);
   3e5f6:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3e5fa:	f340 80e4 	ble.w	3e7c6 <arm_nn_mat_mult_nt_t_s8+0x4ee>
   3e5fe:	40a1      	lsls	r1, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   3e600:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   3e604:	2300      	movs	r3, #0
   3e606:	fbc6 5301 	smlal	r5, r3, r6, r1
    result = (int32_t)(mult.long_long >> 31);
   3e60a:	0fec      	lsrs	r4, r5, #31
   3e60c:	2500      	movs	r5, #0
   3e60e:	ea44 0443 	orr.w	r4, r4, r3, lsl #1
    q31_t threshold = remainder_mask >> 1;
   3e612:	462f      	mov	r7, r5
    if (result < 0)
   3e614:	2a00      	cmp	r2, #0
        threshold++;
   3e616:	bfb8      	it	lt
   3e618:	f10a 0a01 	addlt.w	sl, sl, #1
    if (remainder > threshold)
   3e61c:	45da      	cmp	sl, fp
        result++;
   3e61e:	bfb8      	it	lt
   3e620:	3201      	addlt	r2, #1
    if (result < 0)
   3e622:	2c00      	cmp	r4, #0
        threshold++;
   3e624:	bfb8      	it	lt
   3e626:	3701      	addlt	r7, #1
            res00 += dst_offset;
   3e628:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
            res01 = MIN(res01, activation_max);
   3e62a:	9930      	ldr	r1, [sp, #192]	; 0xc0
            lhs_ptr += rhs_cols;
   3e62c:	9e03      	ldr	r6, [sp, #12]
    if (remainder > threshold)
   3e62e:	42af      	cmp	r7, r5
        result++;
   3e630:	bfb8      	it	lt
   3e632:	3401      	addlt	r4, #1
            res10 += dst_offset;
   3e634:	441a      	add	r2, r3
            res00 += dst_offset;
   3e636:	4499      	add	r9, r3
            res01 += dst_offset;
   3e638:	4418      	add	r0, r3
            res11 += dst_offset;
   3e63a:	441c      	add	r4, r3
            res00 = MAX(res00, activation_min);
   3e63c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   3e63e:	4599      	cmp	r9, r3
   3e640:	bfb8      	it	lt
   3e642:	4699      	movlt	r9, r3
            res01 = MAX(res01, activation_min);
   3e644:	4298      	cmp	r0, r3
   3e646:	bfb8      	it	lt
   3e648:	4618      	movlt	r0, r3
            res10 = MAX(res10, activation_min);
   3e64a:	429a      	cmp	r2, r3
   3e64c:	bfb8      	it	lt
   3e64e:	461a      	movlt	r2, r3
            res11 = MAX(res11, activation_min);
   3e650:	429c      	cmp	r4, r3
   3e652:	bfb8      	it	lt
   3e654:	461c      	movlt	r4, r3
            res00 = MIN(res00, activation_max);
   3e656:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   3e658:	4599      	cmp	r9, r3
   3e65a:	bfa8      	it	ge
   3e65c:	4699      	movge	r9, r3
            res01 = MIN(res01, activation_max);
   3e65e:	4288      	cmp	r0, r1
   3e660:	bfa8      	it	ge
   3e662:	4608      	movge	r0, r1
            res10 = MIN(res10, activation_max);
   3e664:	428a      	cmp	r2, r1
            dst_ptr[0] = (q7_t)res00;
   3e666:	9b06      	ldr	r3, [sp, #24]
            res10 = MIN(res10, activation_max);
   3e668:	bfa8      	it	ge
   3e66a:	460a      	movge	r2, r1
            dst_ptr[0] = (q7_t)res10;
   3e66c:	9908      	ldr	r1, [sp, #32]
            dst_ptr[0] = (q7_t)res00;
   3e66e:	f883 9000 	strb.w	r9, [r3]
            dst_ptr[1] = (q7_t)res01;
   3e672:	7058      	strb	r0, [r3, #1]
            dst_ptr[0] = (q7_t)res10;
   3e674:	f801 2c01 	strb.w	r2, [r1, #-1]
            res11 = MIN(res11, activation_max);
   3e678:	9a30      	ldr	r2, [sp, #192]	; 0xc0
   3e67a:	4294      	cmp	r4, r2
   3e67c:	bfa8      	it	ge
   3e67e:	4614      	movge	r4, r2
            dst_ptr[1] = (q7_t)res11;
   3e680:	700c      	strb	r4, [r1, #0]
   3e682:	460a      	mov	r2, r1
   3e684:	990e      	ldr	r1, [sp, #56]	; 0x38
   3e686:	440b      	add	r3, r1
   3e688:	9306      	str	r3, [sp, #24]
        while (lhs_rows_idx)
   3e68a:	1853      	adds	r3, r2, r1
   3e68c:	9308      	str	r3, [sp, #32]
   3e68e:	9b07      	ldr	r3, [sp, #28]
   3e690:	3b01      	subs	r3, #1
            lhs_ptr += rhs_cols;
   3e692:	4466      	add	r6, ip
        while (lhs_rows_idx)
   3e694:	9307      	str	r3, [sp, #28]
   3e696:	f47f aea7 	bne.w	3e3e8 <arm_nn_mat_mult_nt_t_s8+0x110>
   3e69a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   3e69c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   3e69e:	4413      	add	r3, r2
   3e6a0:	9306      	str	r3, [sp, #24]
        if (lhs_rows % 2)
   3e6a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   3e6a4:	2b00      	cmp	r3, #0
   3e6a6:	f040 80e3 	bne.w	3e870 <arm_nn_mat_mult_nt_t_s8+0x598>
        rhs += 2 * rhs_cols;
   3e6aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   3e6ac:	9915      	ldr	r1, [sp, #84]	; 0x54
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   3e6ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
        rhs += 2 * rhs_cols;
   3e6b0:	440a      	add	r2, r1
   3e6b2:	920c      	str	r2, [sp, #48]	; 0x30
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   3e6b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   3e6b6:	440a      	add	r2, r1
   3e6b8:	9212      	str	r2, [sp, #72]	; 0x48
   3e6ba:	9a05      	ldr	r2, [sp, #20]
   3e6bc:	3208      	adds	r2, #8
   3e6be:	9205      	str	r2, [sp, #20]
   3e6c0:	9a04      	ldr	r2, [sp, #16]
   3e6c2:	3208      	adds	r2, #8
   3e6c4:	9204      	str	r2, [sp, #16]
   3e6c6:	9a19      	ldr	r2, [sp, #100]	; 0x64
   3e6c8:	3302      	adds	r3, #2
   3e6ca:	4293      	cmp	r3, r2
   3e6cc:	9311      	str	r3, [sp, #68]	; 0x44
   3e6ce:	f6ff ae48 	blt.w	3e362 <arm_nn_mat_mult_nt_t_s8+0x8a>
   3e6d2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   3e6d4:	3b02      	subs	r3, #2
   3e6d6:	085b      	lsrs	r3, r3, #1
        rhs += 2 * rhs_cols;
   3e6d8:	fb03 1201 	mla	r2, r3, r1, r1
   3e6dc:	991c      	ldr	r1, [sp, #112]	; 0x70
   3e6de:	4411      	add	r1, r2
        dst += 2;
   3e6e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
        rhs += 2 * rhs_cols;
   3e6e2:	911c      	str	r1, [sp, #112]	; 0x70
   3e6e4:	3301      	adds	r3, #1
        dst += 2;
   3e6e6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   3e6ea:	46e2      	mov	sl, ip
   3e6ec:	9314      	str	r3, [sp, #80]	; 0x50
    if (rhs_rows % 2)
   3e6ee:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   3e6f0:	07db      	lsls	r3, r3, #31
   3e6f2:	d564      	bpl.n	3e7be <arm_nn_mat_mult_nt_t_s8+0x4e6>
    {
        const q7_t *lhs_ptr = &lhs[0];
        q7_t *dst_ptr = &dst[0];

        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
   3e6f4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   3e6f6:	2b00      	cmp	r3, #0
   3e6f8:	dd61      	ble.n	3e7be <arm_nn_mat_mult_nt_t_s8+0x4e6>
        {
            const q7_t *rhs_ptr = &rhs[0];
            q31_t res00 = 0;
            if (bias)
            {
                res00 = bias[rhs_rows - 1];
   3e6fa:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    const q31_t remainder_mask = (1 << exponent) - 1;
   3e6fc:	9a16      	ldr	r2, [sp, #88]	; 0x58
   3e6fe:	f103 4880 	add.w	r8, r3, #1073741824	; 0x40000000
                ++rhs_ptr;
                ++lhs_ptr;
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
   3e702:	9b28      	ldr	r3, [sp, #160]	; 0xa0
                res00 = bias[rhs_rows - 1];
   3e704:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
   3e708:	eb03 0588 	add.w	r5, r3, r8, lsl #2
   3e70c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   3e70e:	eb03 0788 	add.w	r7, r3, r8, lsl #2
                res00 = bias[rhs_rows - 1];
   3e712:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   3e714:	eb03 0888 	add.w	r8, r3, r8, lsl #2
   3e718:	e9cd 7800 	strd	r7, r8, [sp]
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
   3e71c:	2400      	movs	r4, #0
   3e71e:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
   3e722:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   3e724:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
   3e728:	46a6      	mov	lr, r4
    const q31_t remainder_mask = (1 << exponent) - 1;
   3e72a:	f04f 0901 	mov.w	r9, #1
            if (bias)
   3e72e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   3e730:	2b00      	cmp	r3, #0
   3e732:	f000 8294 	beq.w	3ec5e <arm_nn_mat_mult_nt_t_s8+0x986>
                res00 = bias[rhs_rows - 1];
   3e736:	9b01      	ldr	r3, [sp, #4]
   3e738:	6819      	ldr	r1, [r3, #0]
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3e73a:	f1ba 0f00 	cmp.w	sl, #0
   3e73e:	dd0c      	ble.n	3e75a <arm_nn_mat_mult_nt_t_s8+0x482>
   3e740:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   3e742:	eb02 0b0a 	add.w	fp, r2, sl
   3e746:	1e58      	subs	r0, r3, #1
                q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3e748:	f912 3b01 	ldrsb.w	r3, [r2], #1
                q31_t rhs_value = rhs_ptr[0];
   3e74c:	f910 6f01 	ldrsb.w	r6, [r0, #1]!
                q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   3e750:	443b      	add	r3, r7
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3e752:	455a      	cmp	r2, fp
                res00 += lhs_value * rhs_value;
   3e754:	fb06 1103 	mla	r1, r6, r3, r1
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3e758:	d1f6      	bne.n	3e748 <arm_nn_mat_mult_nt_t_s8+0x470>
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
   3e75a:	9b00      	ldr	r3, [sp, #0]
   3e75c:	681e      	ldr	r6, [r3, #0]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   3e75e:	682b      	ldr	r3, [r5, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3e760:	ea26 70e6 	bic.w	r0, r6, r6, asr #31
   3e764:	fa01 f000 	lsl.w	r0, r1, r0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   3e768:	46f3      	mov	fp, lr
   3e76a:	4661      	mov	r1, ip
   3e76c:	fbc0 1b03 	smlal	r1, fp, r0, r3
    result = (int32_t)(mult.long_long >> 31);
   3e770:	0fc9      	lsrs	r1, r1, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3e772:	2e00      	cmp	r6, #0
    result = (int32_t)(mult.long_long >> 31);
   3e774:	ea41 0b4b 	orr.w	fp, r1, fp, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3e778:	dc0f      	bgt.n	3e79a <arm_nn_mat_mult_nt_t_s8+0x4c2>
   3e77a:	4276      	negs	r6, r6
    const q31_t remainder_mask = (1 << exponent) - 1;
   3e77c:	fa09 f306 	lsl.w	r3, r9, r6
   3e780:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
   3e782:	ea0b 0103 	and.w	r1, fp, r3
    if (result < 0)
   3e786:	fa5b fb06 	asrs.w	fp, fp, r6
    q31_t threshold = remainder_mask >> 1;
   3e78a:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
   3e78e:	bf48      	it	mi
   3e790:	3301      	addmi	r3, #1
    if (remainder > threshold)
   3e792:	4299      	cmp	r1, r3
        result++;
   3e794:	bfc8      	it	gt
   3e796:	f10b 0b01 	addgt.w	fp, fp, #1

            // Add offset
            res00 += dst_offset;
   3e79a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8

            // Clamp the result
            res00 = MAX(res00, activation_min);
   3e79c:	992f      	ldr	r1, [sp, #188]	; 0xbc
            res00 += dst_offset;
   3e79e:	445b      	add	r3, fp
            res00 = MAX(res00, activation_min);
   3e7a0:	428b      	cmp	r3, r1
   3e7a2:	bfb8      	it	lt
   3e7a4:	460b      	movlt	r3, r1
            res00 = MIN(res00, activation_max);
   3e7a6:	9930      	ldr	r1, [sp, #192]	; 0xc0
   3e7a8:	428b      	cmp	r3, r1
   3e7aa:	bfa8      	it	ge
   3e7ac:	460b      	movge	r3, r1

            dst_ptr[0] = (q7_t)res00;
   3e7ae:	f888 3000 	strb.w	r3, [r8]
            dst_ptr += rhs_rows;
   3e7b2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   3e7b4:	4498      	add	r8, r3
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
   3e7b6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   3e7b8:	3401      	adds	r4, #1
   3e7ba:	42a3      	cmp	r3, r4
   3e7bc:	d1b7      	bne.n	3e72e <arm_nn_mat_mult_nt_t_s8+0x456>
            dst_ptr += rhs_rows;
        }
    }
#endif
    return ARM_MATH_SUCCESS;
}
   3e7be:	2000      	movs	r0, #0
   3e7c0:	b01f      	add	sp, #124	; 0x7c
   3e7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3e7c6:	426b      	negs	r3, r5
   3e7c8:	40a1      	lsls	r1, r4
    const q31_t remainder_mask = (1 << exponent) - 1;
   3e7ca:	2501      	movs	r5, #1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   3e7cc:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   3e7d0:	f04f 0e00 	mov.w	lr, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   3e7d4:	409d      	lsls	r5, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   3e7d6:	fbc6 4e01 	smlal	r4, lr, r6, r1
    const q31_t remainder_mask = (1 << exponent) - 1;
   3e7da:	3d01      	subs	r5, #1
    result = (int32_t)(mult.long_long >> 31);
   3e7dc:	0fe4      	lsrs	r4, r4, #31
    int32_t remainder = remainder_mask & dividend;
   3e7de:	ea00 0805 	and.w	r8, r0, r5
    q31_t threshold = remainder_mask >> 1;
   3e7e2:	106f      	asrs	r7, r5, #1
    if (result < 0)
   3e7e4:	4118      	asrs	r0, r3
    result = (int32_t)(mult.long_long >> 31);
   3e7e6:	ea44 044e 	orr.w	r4, r4, lr, lsl #1
    int32_t remainder = remainder_mask & dividend;
   3e7ea:	ea05 0504 	and.w	r5, r5, r4
    result = dividend >> exponent;
   3e7ee:	fa44 f403 	asr.w	r4, r4, r3
    q31_t threshold = remainder_mask >> 1;
   3e7f2:	bf54      	ite	pl
   3e7f4:	463b      	movpl	r3, r7
        threshold++;
   3e7f6:	1c7b      	addmi	r3, r7, #1
    if (remainder > threshold)
   3e7f8:	4598      	cmp	r8, r3
        result++;
   3e7fa:	bfc8      	it	gt
   3e7fc:	3001      	addgt	r0, #1
   3e7fe:	e709      	b.n	3e614 <arm_nn_mat_mult_nt_t_s8+0x33c>
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3e800:	4240      	negs	r0, r0
    const q31_t remainder_mask = (1 << exponent) - 1;
   3e802:	2501      	movs	r5, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3e804:	fa02 f404 	lsl.w	r4, r2, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   3e808:	f04f 0e00 	mov.w	lr, #0
   3e80c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    const q31_t remainder_mask = (1 << exponent) - 1;
   3e810:	fa05 f700 	lsl.w	r7, r5, r0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   3e814:	fbc6 2e04 	smlal	r2, lr, r6, r4
    const q31_t remainder_mask = (1 << exponent) - 1;
   3e818:	3f01      	subs	r7, #1
    result = (int32_t)(mult.long_long >> 31);
   3e81a:	0fd2      	lsrs	r2, r2, #31
    int32_t remainder = remainder_mask & dividend;
   3e81c:	ea09 0507 	and.w	r5, r9, r7
    q31_t threshold = remainder_mask >> 1;
   3e820:	ea4f 0a67 	mov.w	sl, r7, asr #1
    if (result < 0)
   3e824:	fa59 f900 	asrs.w	r9, r9, r0
    result = (int32_t)(mult.long_long >> 31);
   3e828:	ea42 024e 	orr.w	r2, r2, lr, lsl #1
    int32_t remainder = remainder_mask & dividend;
   3e82c:	ea07 0b02 	and.w	fp, r7, r2
    result = dividend >> exponent;
   3e830:	fa42 f200 	asr.w	r2, r2, r0
    q31_t threshold = remainder_mask >> 1;
   3e834:	bf54      	ite	pl
   3e836:	4650      	movpl	r0, sl
        threshold++;
   3e838:	f10a 0001 	addmi.w	r0, sl, #1
    if (remainder > threshold)
   3e83c:	4285      	cmp	r5, r0
        result++;
   3e83e:	bfc8      	it	gt
   3e840:	f109 0901 	addgt.w	r9, r9, #1
   3e844:	e6c9      	b.n	3e5da <arm_nn_mat_mult_nt_t_s8+0x302>
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   3e846:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   3e84a:	2000      	movs	r0, #0
   3e84c:	fbc6 2004 	smlal	r2, r0, r6, r4
    result = (int32_t)(mult.long_long >> 31);
   3e850:	0fd2      	lsrs	r2, r2, #31
   3e852:	f04f 0b00 	mov.w	fp, #0
   3e856:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
    q31_t threshold = remainder_mask >> 1;
   3e85a:	46da      	mov	sl, fp
   3e85c:	e6bd      	b.n	3e5da <arm_nn_mat_mult_nt_t_s8+0x302>
            q31_t res11 = lhs_offset_contribution1;
   3e85e:	e9dd 300b 	ldrd	r3, r0, [sp, #44]	; 0x2c
            q31_t res10 = lhs_offset_contribution0;
   3e862:	9d0a      	ldr	r5, [sp, #40]	; 0x28
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   3e864:	9603      	str	r6, [sp, #12]
            q31_t res11 = lhs_offset_contribution1;
   3e866:	4619      	mov	r1, r3
            q31_t res10 = lhs_offset_contribution0;
   3e868:	462a      	mov	r2, r5
            int32_t rhs_cols_idx = 0;
   3e86a:	f04f 0900 	mov.w	r9, #0
   3e86e:	e66d      	b.n	3e54c <arm_nn_mat_mult_nt_t_s8+0x274>
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   3e870:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   3e872:	2b00      	cmp	r3, #0
   3e874:	f340 81f5 	ble.w	3ec62 <arm_nn_mat_mult_nt_t_s8+0x98a>
   3e878:	9a09      	ldr	r2, [sp, #36]	; 0x24
   3e87a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   3e87c:	981d      	ldr	r0, [sp, #116]	; 0x74
   3e87e:	eb06 0902 	add.w	r9, r6, r2
   3e882:	e9dd 520a 	ldrd	r5, r2, [sp, #40]	; 0x28
   3e886:	3305      	adds	r3, #5
   3e888:	f850 8003 	ldr.w	r8, [r0, r3]
   3e88c:	f853 4c04 	ldr.w	r4, [r3, #-4]
   3e890:	6831      	ldr	r1, [r6, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   3e892:	fa2f fb88 	sxtb16	fp, r8
   3e896:	18c7      	adds	r7, r0, r3
   3e898:	fa2f fe81 	sxtb16	lr, r1
   3e89c:	fa2f fa84 	sxtb16	sl, r4
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   3e8a0:	fa2f f898 	sxtb16	r8, r8, ror #8
   3e8a4:	fa2f f191 	sxtb16	r1, r1, ror #8
   3e8a8:	fa2f f494 	sxtb16	r4, r4, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   3e8ac:	fb2e 550b 	smlad	r5, lr, fp, r5
   3e8b0:	fb21 5508 	smlad	r5, r1, r8, r5
   3e8b4:	fb2e 220a 	smlad	r2, lr, sl, r2
   3e8b8:	fb21 2104 	smlad	r1, r1, r4, r2
    memcpy(&val, *in_q7, 4);
   3e8bc:	f8d7 8004 	ldr.w	r8, [r7, #4]
    memcpy(&val, in_q7, 4);
   3e8c0:	681c      	ldr	r4, [r3, #0]
    memcpy(&val, *in_q7, 4);
   3e8c2:	6872      	ldr	r2, [r6, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   3e8c4:	fa2f fb88 	sxtb16	fp, r8
   3e8c8:	fa2f fa82 	sxtb16	sl, r2
   3e8cc:	fa2f fe84 	sxtb16	lr, r4
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   3e8d0:	fa2f f898 	sxtb16	r8, r8, ror #8
   3e8d4:	fa2f f292 	sxtb16	r2, r2, ror #8
   3e8d8:	fa2f f494 	sxtb16	r4, r4, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   3e8dc:	fb2a 550b 	smlad	r5, sl, fp, r5
   3e8e0:	fb22 5808 	smlad	r8, r2, r8, r5
   3e8e4:	fb2a 110e 	smlad	r1, sl, lr, r1
   3e8e8:	fb22 1204 	smlad	r2, r2, r4, r1
   3e8ec:	f8d7 e008 	ldr.w	lr, [r7, #8]
    memcpy(&val, in_q7, 4);
   3e8f0:	685c      	ldr	r4, [r3, #4]
    memcpy(&val, *in_q7, 4);
   3e8f2:	68b1      	ldr	r1, [r6, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   3e8f4:	fa2f fb8e 	sxtb16	fp, lr
   3e8f8:	fa2f fa81 	sxtb16	sl, r1
   3e8fc:	fa2f f584 	sxtb16	r5, r4
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   3e900:	fa2f fe9e 	sxtb16	lr, lr, ror #8
   3e904:	fa2f f191 	sxtb16	r1, r1, ror #8
   3e908:	fa2f f494 	sxtb16	r4, r4, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   3e90c:	fb2a 880b 	smlad	r8, sl, fp, r8
   3e910:	fb21 8e0e 	smlad	lr, r1, lr, r8
   3e914:	fb2a 2205 	smlad	r2, sl, r5, r2
   3e918:	fb21 2404 	smlad	r4, r1, r4, r2
   3e91c:	68fd      	ldr	r5, [r7, #12]
    memcpy(&val, in_q7, 4);
   3e91e:	68f1      	ldr	r1, [r6, #12]
   3e920:	689f      	ldr	r7, [r3, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   3e922:	fa2f fa85 	sxtb16	sl, r5
   3e926:	3610      	adds	r6, #16
   3e928:	fa2f f281 	sxtb16	r2, r1
   3e92c:	fa2f f887 	sxtb16	r8, r7
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   3e930:	fa2f f595 	sxtb16	r5, r5, ror #8
   3e934:	fa2f f191 	sxtb16	r1, r1, ror #8
   3e938:	fa2f f797 	sxtb16	r7, r7, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   3e93c:	fb22 ee0a 	smlad	lr, r2, sl, lr
   3e940:	fb21 e505 	smlad	r5, r1, r5, lr
   3e944:	fb22 4208 	smlad	r2, r2, r8, r4
   3e948:	fb21 2207 	smlad	r2, r1, r7, r2
   3e94c:	454e      	cmp	r6, r9
   3e94e:	f103 0310 	add.w	r3, r3, #16
   3e952:	d199      	bne.n	3e888 <arm_nn_mat_mult_nt_t_s8+0x5b0>
    *in_q7 += 4;
   3e954:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   3e956:	9809      	ldr	r0, [sp, #36]	; 0x24
   3e958:	e9cd 520a 	strd	r5, r2, [sp, #40]	; 0x28
   3e95c:	1819      	adds	r1, r3, r0
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3e95e:	4584      	cmp	ip, r0
   3e960:	f340 811c 	ble.w	3eb9c <arm_nn_mat_mult_nt_t_s8+0x8c4>
                q7_t lhs_value = lhs_ptr[0];
   3e964:	f999 3000 	ldrsb.w	r3, [r9]
                res00 += lhs_value * rhs_value0;
   3e968:	f991 2000 	ldrsb.w	r2, [r1]
   3e96c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
                res01 += lhs_value * rhs_value1;
   3e96e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
                res00 += lhs_value * rhs_value0;
   3e970:	fb13 4402 	smlabb	r4, r3, r2, r4
                res01 += lhs_value * rhs_value1;
   3e974:	f911 200c 	ldrsb.w	r2, [r1, ip]
                res00 += lhs_value * rhs_value0;
   3e978:	940a      	str	r4, [sp, #40]	; 0x28
                res01 += lhs_value * rhs_value1;
   3e97a:	fb13 5502 	smlabb	r5, r3, r2, r5
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3e97e:	1c43      	adds	r3, r0, #1
   3e980:	459c      	cmp	ip, r3
                res01 += lhs_value * rhs_value1;
   3e982:	950b      	str	r5, [sp, #44]	; 0x2c
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3e984:	f340 810a 	ble.w	3eb9c <arm_nn_mat_mult_nt_t_s8+0x8c4>
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
   3e988:	eb01 030c 	add.w	r3, r1, ip
                res01 += lhs_value * rhs_value1;
   3e98c:	f993 2001 	ldrsb.w	r2, [r3, #1]
                q7_t lhs_value = lhs_ptr[0];
   3e990:	f999 3001 	ldrsb.w	r3, [r9, #1]
                res01 += lhs_value * rhs_value1;
   3e994:	fb13 5502 	smlabb	r5, r3, r2, r5
                res00 += lhs_value * rhs_value0;
   3e998:	f991 2001 	ldrsb.w	r2, [r1, #1]
                res01 += lhs_value * rhs_value1;
   3e99c:	950b      	str	r5, [sp, #44]	; 0x2c
                res00 += lhs_value * rhs_value0;
   3e99e:	fb13 4402 	smlabb	r4, r3, r2, r4
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3e9a2:	1c83      	adds	r3, r0, #2
   3e9a4:	459c      	cmp	ip, r3
                res00 += lhs_value * rhs_value0;
   3e9a6:	940a      	str	r4, [sp, #40]	; 0x28
                ++rhs_ptr;
   3e9a8:	f101 0202 	add.w	r2, r1, #2
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3e9ac:	f340 80f6 	ble.w	3eb9c <arm_nn_mat_mult_nt_t_s8+0x8c4>
                q7_t lhs_value = lhs_ptr[0];
   3e9b0:	f999 3002 	ldrsb.w	r3, [r9, #2]
                res01 += lhs_value * rhs_value1;
   3e9b4:	f912 200c 	ldrsb.w	r2, [r2, ip]
   3e9b8:	fb12 5503 	smlabb	r5, r2, r3, r5
                res00 += lhs_value * rhs_value0;
   3e9bc:	f991 2002 	ldrsb.w	r2, [r1, #2]
                res01 += lhs_value * rhs_value1;
   3e9c0:	950b      	str	r5, [sp, #44]	; 0x2c
                res00 += lhs_value * rhs_value0;
   3e9c2:	fb12 4403 	smlabb	r4, r2, r3, r4
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3e9c6:	1cc3      	adds	r3, r0, #3
   3e9c8:	459c      	cmp	ip, r3
                res00 += lhs_value * rhs_value0;
   3e9ca:	940a      	str	r4, [sp, #40]	; 0x28
                ++rhs_ptr;
   3e9cc:	f101 0203 	add.w	r2, r1, #3
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3e9d0:	f340 80e4 	ble.w	3eb9c <arm_nn_mat_mult_nt_t_s8+0x8c4>
                q7_t lhs_value = lhs_ptr[0];
   3e9d4:	f999 3003 	ldrsb.w	r3, [r9, #3]
                res01 += lhs_value * rhs_value1;
   3e9d8:	f912 200c 	ldrsb.w	r2, [r2, ip]
   3e9dc:	fb12 5503 	smlabb	r5, r2, r3, r5
                res00 += lhs_value * rhs_value0;
   3e9e0:	f991 2003 	ldrsb.w	r2, [r1, #3]
                res01 += lhs_value * rhs_value1;
   3e9e4:	950b      	str	r5, [sp, #44]	; 0x2c
                res00 += lhs_value * rhs_value0;
   3e9e6:	fb12 4403 	smlabb	r4, r2, r3, r4
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3e9ea:	1d03      	adds	r3, r0, #4
   3e9ec:	459c      	cmp	ip, r3
                res00 += lhs_value * rhs_value0;
   3e9ee:	940a      	str	r4, [sp, #40]	; 0x28
                ++rhs_ptr;
   3e9f0:	f101 0204 	add.w	r2, r1, #4
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3e9f4:	f340 80d2 	ble.w	3eb9c <arm_nn_mat_mult_nt_t_s8+0x8c4>
                q7_t lhs_value = lhs_ptr[0];
   3e9f8:	f999 3004 	ldrsb.w	r3, [r9, #4]
                res01 += lhs_value * rhs_value1;
   3e9fc:	f912 200c 	ldrsb.w	r2, [r2, ip]
   3ea00:	fb12 5503 	smlabb	r5, r2, r3, r5
                res00 += lhs_value * rhs_value0;
   3ea04:	f991 2004 	ldrsb.w	r2, [r1, #4]
                res01 += lhs_value * rhs_value1;
   3ea08:	950b      	str	r5, [sp, #44]	; 0x2c
                res00 += lhs_value * rhs_value0;
   3ea0a:	fb12 4403 	smlabb	r4, r2, r3, r4
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3ea0e:	1d43      	adds	r3, r0, #5
   3ea10:	459c      	cmp	ip, r3
                res00 += lhs_value * rhs_value0;
   3ea12:	940a      	str	r4, [sp, #40]	; 0x28
                ++rhs_ptr;
   3ea14:	f101 0205 	add.w	r2, r1, #5
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3ea18:	f340 80c0 	ble.w	3eb9c <arm_nn_mat_mult_nt_t_s8+0x8c4>
                q7_t lhs_value = lhs_ptr[0];
   3ea1c:	f999 3005 	ldrsb.w	r3, [r9, #5]
                res01 += lhs_value * rhs_value1;
   3ea20:	f912 200c 	ldrsb.w	r2, [r2, ip]
   3ea24:	fb12 5503 	smlabb	r5, r2, r3, r5
                res00 += lhs_value * rhs_value0;
   3ea28:	f991 2005 	ldrsb.w	r2, [r1, #5]
                res01 += lhs_value * rhs_value1;
   3ea2c:	950b      	str	r5, [sp, #44]	; 0x2c
                res00 += lhs_value * rhs_value0;
   3ea2e:	fb12 4403 	smlabb	r4, r2, r3, r4
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3ea32:	1d83      	adds	r3, r0, #6
   3ea34:	459c      	cmp	ip, r3
                res00 += lhs_value * rhs_value0;
   3ea36:	940a      	str	r4, [sp, #40]	; 0x28
                ++rhs_ptr;
   3ea38:	f101 0206 	add.w	r2, r1, #6
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3ea3c:	f340 80ae 	ble.w	3eb9c <arm_nn_mat_mult_nt_t_s8+0x8c4>
                q7_t lhs_value = lhs_ptr[0];
   3ea40:	f999 3006 	ldrsb.w	r3, [r9, #6]
                res01 += lhs_value * rhs_value1;
   3ea44:	f912 200c 	ldrsb.w	r2, [r2, ip]
   3ea48:	fb12 5503 	smlabb	r5, r2, r3, r5
                res00 += lhs_value * rhs_value0;
   3ea4c:	f991 2006 	ldrsb.w	r2, [r1, #6]
                res01 += lhs_value * rhs_value1;
   3ea50:	950b      	str	r5, [sp, #44]	; 0x2c
                res00 += lhs_value * rhs_value0;
   3ea52:	fb12 4403 	smlabb	r4, r2, r3, r4
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3ea56:	1dc3      	adds	r3, r0, #7
   3ea58:	459c      	cmp	ip, r3
                res00 += lhs_value * rhs_value0;
   3ea5a:	940a      	str	r4, [sp, #40]	; 0x28
                ++rhs_ptr;
   3ea5c:	f101 0207 	add.w	r2, r1, #7
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3ea60:	f340 809c 	ble.w	3eb9c <arm_nn_mat_mult_nt_t_s8+0x8c4>
                q7_t lhs_value = lhs_ptr[0];
   3ea64:	f999 3007 	ldrsb.w	r3, [r9, #7]
                res01 += lhs_value * rhs_value1;
   3ea68:	f912 200c 	ldrsb.w	r2, [r2, ip]
   3ea6c:	fb12 5503 	smlabb	r5, r2, r3, r5
                res00 += lhs_value * rhs_value0;
   3ea70:	f991 2007 	ldrsb.w	r2, [r1, #7]
                res01 += lhs_value * rhs_value1;
   3ea74:	950b      	str	r5, [sp, #44]	; 0x2c
                res00 += lhs_value * rhs_value0;
   3ea76:	fb12 4403 	smlabb	r4, r2, r3, r4
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3ea7a:	f100 0308 	add.w	r3, r0, #8
   3ea7e:	459c      	cmp	ip, r3
                res00 += lhs_value * rhs_value0;
   3ea80:	940a      	str	r4, [sp, #40]	; 0x28
                ++rhs_ptr;
   3ea82:	f101 0208 	add.w	r2, r1, #8
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3ea86:	f340 8089 	ble.w	3eb9c <arm_nn_mat_mult_nt_t_s8+0x8c4>
                q7_t lhs_value = lhs_ptr[0];
   3ea8a:	f999 3008 	ldrsb.w	r3, [r9, #8]
                res01 += lhs_value * rhs_value1;
   3ea8e:	f912 200c 	ldrsb.w	r2, [r2, ip]
   3ea92:	fb12 5503 	smlabb	r5, r2, r3, r5
                res00 += lhs_value * rhs_value0;
   3ea96:	f991 2008 	ldrsb.w	r2, [r1, #8]
                res01 += lhs_value * rhs_value1;
   3ea9a:	950b      	str	r5, [sp, #44]	; 0x2c
                res00 += lhs_value * rhs_value0;
   3ea9c:	fb12 4403 	smlabb	r4, r2, r3, r4
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3eaa0:	f100 0309 	add.w	r3, r0, #9
   3eaa4:	459c      	cmp	ip, r3
                res00 += lhs_value * rhs_value0;
   3eaa6:	940a      	str	r4, [sp, #40]	; 0x28
                ++rhs_ptr;
   3eaa8:	f101 0209 	add.w	r2, r1, #9
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3eaac:	dd76      	ble.n	3eb9c <arm_nn_mat_mult_nt_t_s8+0x8c4>
                q7_t lhs_value = lhs_ptr[0];
   3eaae:	f999 3009 	ldrsb.w	r3, [r9, #9]
                res01 += lhs_value * rhs_value1;
   3eab2:	f912 200c 	ldrsb.w	r2, [r2, ip]
   3eab6:	fb12 5503 	smlabb	r5, r2, r3, r5
                res00 += lhs_value * rhs_value0;
   3eaba:	f991 2009 	ldrsb.w	r2, [r1, #9]
                res01 += lhs_value * rhs_value1;
   3eabe:	950b      	str	r5, [sp, #44]	; 0x2c
                res00 += lhs_value * rhs_value0;
   3eac0:	fb12 4403 	smlabb	r4, r2, r3, r4
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3eac4:	f100 030a 	add.w	r3, r0, #10
   3eac8:	459c      	cmp	ip, r3
                res00 += lhs_value * rhs_value0;
   3eaca:	940a      	str	r4, [sp, #40]	; 0x28
                ++rhs_ptr;
   3eacc:	f101 020a 	add.w	r2, r1, #10
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3ead0:	dd64      	ble.n	3eb9c <arm_nn_mat_mult_nt_t_s8+0x8c4>
                q7_t lhs_value = lhs_ptr[0];
   3ead2:	f999 300a 	ldrsb.w	r3, [r9, #10]
                res01 += lhs_value * rhs_value1;
   3ead6:	f912 200c 	ldrsb.w	r2, [r2, ip]
   3eada:	fb12 5503 	smlabb	r5, r2, r3, r5
                res00 += lhs_value * rhs_value0;
   3eade:	f991 200a 	ldrsb.w	r2, [r1, #10]
                res01 += lhs_value * rhs_value1;
   3eae2:	950b      	str	r5, [sp, #44]	; 0x2c
                res00 += lhs_value * rhs_value0;
   3eae4:	fb12 4403 	smlabb	r4, r2, r3, r4
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3eae8:	f100 030b 	add.w	r3, r0, #11
   3eaec:	459c      	cmp	ip, r3
                res00 += lhs_value * rhs_value0;
   3eaee:	940a      	str	r4, [sp, #40]	; 0x28
                ++rhs_ptr;
   3eaf0:	f101 020b 	add.w	r2, r1, #11
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3eaf4:	dd52      	ble.n	3eb9c <arm_nn_mat_mult_nt_t_s8+0x8c4>
                q7_t lhs_value = lhs_ptr[0];
   3eaf6:	f999 300b 	ldrsb.w	r3, [r9, #11]
                res01 += lhs_value * rhs_value1;
   3eafa:	f912 200c 	ldrsb.w	r2, [r2, ip]
   3eafe:	fb12 5503 	smlabb	r5, r2, r3, r5
                res00 += lhs_value * rhs_value0;
   3eb02:	f991 200b 	ldrsb.w	r2, [r1, #11]
                res01 += lhs_value * rhs_value1;
   3eb06:	950b      	str	r5, [sp, #44]	; 0x2c
                res00 += lhs_value * rhs_value0;
   3eb08:	fb12 4403 	smlabb	r4, r2, r3, r4
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3eb0c:	f100 030c 	add.w	r3, r0, #12
   3eb10:	459c      	cmp	ip, r3
                res00 += lhs_value * rhs_value0;
   3eb12:	940a      	str	r4, [sp, #40]	; 0x28
                ++rhs_ptr;
   3eb14:	f101 020c 	add.w	r2, r1, #12
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3eb18:	dd40      	ble.n	3eb9c <arm_nn_mat_mult_nt_t_s8+0x8c4>
                q7_t lhs_value = lhs_ptr[0];
   3eb1a:	f999 300c 	ldrsb.w	r3, [r9, #12]
                res01 += lhs_value * rhs_value1;
   3eb1e:	f912 200c 	ldrsb.w	r2, [r2, ip]
   3eb22:	fb12 5503 	smlabb	r5, r2, r3, r5
                res00 += lhs_value * rhs_value0;
   3eb26:	f991 200c 	ldrsb.w	r2, [r1, #12]
                res01 += lhs_value * rhs_value1;
   3eb2a:	950b      	str	r5, [sp, #44]	; 0x2c
                res00 += lhs_value * rhs_value0;
   3eb2c:	fb12 4403 	smlabb	r4, r2, r3, r4
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3eb30:	f100 030d 	add.w	r3, r0, #13
   3eb34:	459c      	cmp	ip, r3
                res00 += lhs_value * rhs_value0;
   3eb36:	940a      	str	r4, [sp, #40]	; 0x28
                ++rhs_ptr;
   3eb38:	f101 020d 	add.w	r2, r1, #13
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3eb3c:	dd2e      	ble.n	3eb9c <arm_nn_mat_mult_nt_t_s8+0x8c4>
                q7_t lhs_value = lhs_ptr[0];
   3eb3e:	f999 300d 	ldrsb.w	r3, [r9, #13]
                res01 += lhs_value * rhs_value1;
   3eb42:	f912 200c 	ldrsb.w	r2, [r2, ip]
   3eb46:	fb12 5503 	smlabb	r5, r2, r3, r5
                res00 += lhs_value * rhs_value0;
   3eb4a:	f991 200d 	ldrsb.w	r2, [r1, #13]
                res01 += lhs_value * rhs_value1;
   3eb4e:	950b      	str	r5, [sp, #44]	; 0x2c
                res00 += lhs_value * rhs_value0;
   3eb50:	fb12 4403 	smlabb	r4, r2, r3, r4
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3eb54:	f100 030e 	add.w	r3, r0, #14
   3eb58:	459c      	cmp	ip, r3
                res00 += lhs_value * rhs_value0;
   3eb5a:	940a      	str	r4, [sp, #40]	; 0x28
                ++rhs_ptr;
   3eb5c:	f101 020e 	add.w	r2, r1, #14
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3eb60:	dd1c      	ble.n	3eb9c <arm_nn_mat_mult_nt_t_s8+0x8c4>
                res01 += lhs_value * rhs_value1;
   3eb62:	f912 200c 	ldrsb.w	r2, [r2, ip]
                q7_t lhs_value = lhs_ptr[0];
   3eb66:	f999 300e 	ldrsb.w	r3, [r9, #14]
                res01 += lhs_value * rhs_value1;
   3eb6a:	fb12 5503 	smlabb	r5, r2, r3, r5
                res00 += lhs_value * rhs_value0;
   3eb6e:	f991 200e 	ldrsb.w	r2, [r1, #14]
                res01 += lhs_value * rhs_value1;
   3eb72:	950b      	str	r5, [sp, #44]	; 0x2c
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3eb74:	300f      	adds	r0, #15
                res00 += lhs_value * rhs_value0;
   3eb76:	fb12 4603 	smlabb	r6, r2, r3, r4
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3eb7a:	4584      	cmp	ip, r0
                res00 += lhs_value * rhs_value0;
   3eb7c:	960a      	str	r6, [sp, #40]	; 0x28
                ++rhs_ptr;
   3eb7e:	f101 040f 	add.w	r4, r1, #15
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   3eb82:	dd0b      	ble.n	3eb9c <arm_nn_mat_mult_nt_t_s8+0x8c4>
                q7_t lhs_value = lhs_ptr[0];
   3eb84:	f999 300f 	ldrsb.w	r3, [r9, #15]
                res00 += lhs_value * rhs_value0;
   3eb88:	f991 200f 	ldrsb.w	r2, [r1, #15]
   3eb8c:	fb13 6202 	smlabb	r2, r3, r2, r6
   3eb90:	920a      	str	r2, [sp, #40]	; 0x28
                res01 += lhs_value * rhs_value1;
   3eb92:	f914 200c 	ldrsb.w	r2, [r4, ip]
   3eb96:	fb13 5302 	smlabb	r3, r3, r2, r5
   3eb9a:	930b      	str	r3, [sp, #44]	; 0x2c
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
   3eb9c:	9b04      	ldr	r3, [sp, #16]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3eb9e:	990a      	ldr	r1, [sp, #40]	; 0x28
   3eba0:	f853 2c04 	ldr.w	r2, [r3, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   3eba4:	9b05      	ldr	r3, [sp, #20]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3eba6:	ea22 74e2 	bic.w	r4, r2, r2, asr #31
   3ebaa:	40a1      	lsls	r1, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   3ebac:	f853 3c04 	ldr.w	r3, [r3, #-4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3ebb0:	460c      	mov	r4, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   3ebb2:	2000      	movs	r0, #0
   3ebb4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   3ebb8:	fbc4 1003 	smlal	r1, r0, r4, r3
    result = (int32_t)(mult.long_long >> 31);
   3ebbc:	0fc9      	lsrs	r1, r1, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3ebbe:	2a00      	cmp	r2, #0
    result = (int32_t)(mult.long_long >> 31);
   3ebc0:	ea41 0540 	orr.w	r5, r1, r0, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3ebc4:	dc0d      	bgt.n	3ebe2 <arm_nn_mat_mult_nt_t_s8+0x90a>
   3ebc6:	4252      	negs	r2, r2
    const q31_t remainder_mask = (1 << exponent) - 1;
   3ebc8:	2301      	movs	r3, #1
   3ebca:	4093      	lsls	r3, r2
   3ebcc:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
   3ebce:	ea05 0103 	and.w	r1, r5, r3
    if (result < 0)
   3ebd2:	4115      	asrs	r5, r2
    q31_t threshold = remainder_mask >> 1;
   3ebd4:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
   3ebd8:	bf48      	it	mi
   3ebda:	3301      	addmi	r3, #1
    if (remainder > threshold)
   3ebdc:	4299      	cmp	r1, r3
        result++;
   3ebde:	bfc8      	it	gt
   3ebe0:	3501      	addgt	r5, #1
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
   3ebe2:	9b04      	ldr	r3, [sp, #16]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3ebe4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   3ebe6:	6818      	ldr	r0, [r3, #0]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   3ebe8:	9b05      	ldr	r3, [sp, #20]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3ebea:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
   3ebee:	408a      	lsls	r2, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   3ebf0:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3ebf2:	4611      	mov	r1, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   3ebf4:	2400      	movs	r4, #0
   3ebf6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   3ebfa:	fbc1 2403 	smlal	r2, r4, r1, r3
    result = (int32_t)(mult.long_long >> 31);
   3ebfe:	0fd2      	lsrs	r2, r2, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3ec00:	2800      	cmp	r0, #0
    result = (int32_t)(mult.long_long >> 31);
   3ec02:	ea42 0444 	orr.w	r4, r2, r4, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   3ec06:	dc0d      	bgt.n	3ec24 <arm_nn_mat_mult_nt_t_s8+0x94c>
   3ec08:	4240      	negs	r0, r0
    const q31_t remainder_mask = (1 << exponent) - 1;
   3ec0a:	2301      	movs	r3, #1
   3ec0c:	4083      	lsls	r3, r0
   3ec0e:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
   3ec10:	ea04 0203 	and.w	r2, r4, r3
    if (result < 0)
   3ec14:	4104      	asrs	r4, r0
    q31_t threshold = remainder_mask >> 1;
   3ec16:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
   3ec1a:	bf48      	it	mi
   3ec1c:	3301      	addmi	r3, #1
    if (remainder > threshold)
   3ec1e:	429a      	cmp	r2, r3
        result++;
   3ec20:	bfc8      	it	gt
   3ec22:	3401      	addgt	r4, #1
            res00 += dst_offset;
   3ec24:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
            res01 = MIN(res01, activation_max);
   3ec26:	9a30      	ldr	r2, [sp, #192]	; 0xc0
            res00 += dst_offset;
   3ec28:	1959      	adds	r1, r3, r5
            res01 += dst_offset;
   3ec2a:	441c      	add	r4, r3
            res00 = MAX(res00, activation_min);
   3ec2c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   3ec2e:	4299      	cmp	r1, r3
   3ec30:	bfb8      	it	lt
   3ec32:	4619      	movlt	r1, r3
            res01 = MAX(res01, activation_min);
   3ec34:	429c      	cmp	r4, r3
   3ec36:	bfb8      	it	lt
   3ec38:	461c      	movlt	r4, r3
            res00 = MIN(res00, activation_max);
   3ec3a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   3ec3c:	4299      	cmp	r1, r3
   3ec3e:	bfa8      	it	ge
   3ec40:	4619      	movge	r1, r3
            dst_ptr[0] = (q7_t)res00;
   3ec42:	9b06      	ldr	r3, [sp, #24]
            res01 = MIN(res01, activation_max);
   3ec44:	4294      	cmp	r4, r2
   3ec46:	bfa8      	it	ge
   3ec48:	4614      	movge	r4, r2
            dst_ptr[0] = (q7_t)res00;
   3ec4a:	7019      	strb	r1, [r3, #0]
            dst_ptr[1] = (q7_t)res01;
   3ec4c:	705c      	strb	r4, [r3, #1]
   3ec4e:	e52c      	b.n	3e6aa <arm_nn_mat_mult_nt_t_s8+0x3d2>
        const q7_t *lhs_ptr = &lhs[0];
   3ec50:	9e16      	ldr	r6, [sp, #88]	; 0x58
   3ec52:	e526      	b.n	3e6a2 <arm_nn_mat_mult_nt_t_s8+0x3ca>
        for (int32_t x = 0; x < rhs_cols; ++x)
   3ec54:	2300      	movs	r3, #0
   3ec56:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   3ec5a:	f7ff bba0 	b.w	3e39e <arm_nn_mat_mult_nt_t_s8+0xc6>
   3ec5e:	4619      	mov	r1, r3
   3ec60:	e56b      	b.n	3e73a <arm_nn_mat_mult_nt_t_s8+0x462>
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   3ec62:	990c      	ldr	r1, [sp, #48]	; 0x30
   3ec64:	46b1      	mov	r9, r6
            int32_t rhs_cols_idx = 0;
   3ec66:	2000      	movs	r0, #0
   3ec68:	e679      	b.n	3e95e <arm_nn_mat_mult_nt_t_s8+0x686>
   3ec6a:	bf00      	nop

0003ec6c <arm_q7_to_q15_with_offset>:
 * @addtogroup nndata_convert
 * @{
 */

void arm_q7_to_q15_with_offset(const q7_t *src, q15_t *dst, uint32_t block_size, q15_t offset)
{
   3ec6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    /*loop unrolling */
    block_cnt = block_size >> 2;

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time. */
    const q31_t offset_q15x2 = __PKHBT(offset, offset, 16);
   3ec70:	eac3 4503 	pkhbt	r5, r3, r3, lsl #16
    while (block_cnt > 0)
   3ec74:	ea5f 0892 	movs.w	r8, r2, lsr #2
   3ec78:	d02d      	beq.n	3ecd6 <arm_q7_to_q15_with_offset+0x6a>
   3ec7a:	eb00 0788 	add.w	r7, r0, r8, lsl #2
   3ec7e:	460c      	mov	r4, r1
    memcpy(&val, *in_q7, 4);
   3ec80:	f850 cb04 	ldr.w	ip, [r0], #4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   3ec84:	fa25 fe8c 	sxtab16	lr, r5, ip
   3ec88:	3408      	adds	r4, #8
   3ec8a:	42b8      	cmp	r0, r7
  return (op1 >> op2) | (op1 << (32U - op2));
   3ec8c:	ea4f 2c3c 	mov.w	ip, ip, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   3ec90:	fa25 fc8c 	sxtab16	ip, r5, ip

        /* Extract and sign extend each of the four q7 values to q15 */
        in_q15x2_1 = __SXTAB16(offset_q15x2, __ROR(in_q7x4, 8));
        in_q15x2_2 = __SXTAB16(offset_q15x2, in_q7x4);

        out_q15x2_2 = __PKHTB(in_q15x2_1, in_q15x2_2, 16);
   3ec94:	eacc 462e 	pkhtb	r6, ip, lr, asr #16
        out_q15x2_1 = __PKHBT(in_q15x2_2, in_q15x2_1, 16);
   3ec98:	eace 4c0c 	pkhbt	ip, lr, ip, lsl #16
 */
__STATIC_FORCEINLINE void arm_nn_write_q15x2_ia(q15_t **dest_q15, q31_t src_q31)
{
    q31_t val = src_q31;

    memcpy(*dest_q15, &val, 4);
   3ec9c:	f844 6c04 	str.w	r6, [r4, #-4]
   3eca0:	f844 cc08 	str.w	ip, [r4, #-8]
    while (block_cnt > 0)
   3eca4:	d1ec      	bne.n	3ec80 <arm_q7_to_q15_with_offset+0x14>
    *dest_q15 += 2;
   3eca6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
    /* Run the below code for Cortex-M0 */
    /* Loop over block_size number of values */
    block_cnt = block_size;
#endif

    while (block_cnt > 0)
   3ecaa:	f012 0203 	ands.w	r2, r2, #3
   3ecae:	d010      	beq.n	3ecd2 <arm_q7_to_q15_with_offset+0x66>
    {
        *dst++ = (q15_t)*src++ + offset;
   3ecb0:	f997 0000 	ldrsb.w	r0, [r7]
   3ecb4:	b29b      	uxth	r3, r3
   3ecb6:	4418      	add	r0, r3
    while (block_cnt > 0)
   3ecb8:	3a01      	subs	r2, #1
        *dst++ = (q15_t)*src++ + offset;
   3ecba:	8008      	strh	r0, [r1, #0]
    while (block_cnt > 0)
   3ecbc:	d009      	beq.n	3ecd2 <arm_q7_to_q15_with_offset+0x66>
        *dst++ = (q15_t)*src++ + offset;
   3ecbe:	f997 0001 	ldrsb.w	r0, [r7, #1]
    while (block_cnt > 0)
   3ecc2:	2a01      	cmp	r2, #1
        *dst++ = (q15_t)*src++ + offset;
   3ecc4:	4418      	add	r0, r3
   3ecc6:	8048      	strh	r0, [r1, #2]
    while (block_cnt > 0)
   3ecc8:	d003      	beq.n	3ecd2 <arm_q7_to_q15_with_offset+0x66>
        *dst++ = (q15_t)*src++ + offset;
   3ecca:	f997 2002 	ldrsb.w	r2, [r7, #2]
   3ecce:	4413      	add	r3, r2
   3ecd0:	808b      	strh	r3, [r1, #4]

        /* Decrement the loop counter */
        block_cnt--;
    }
}
   3ecd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while (block_cnt > 0)
   3ecd6:	4607      	mov	r7, r0
   3ecd8:	e7e7      	b.n	3ecaa <arm_q7_to_q15_with_offset+0x3e>
   3ecda:	bf00      	nop
   3ecdc:	00023d51 	.word	0x00023d51
   3ece0:	0003f614 	.word	0x0003f614
   3ece4:	0003f61c 	.word	0x0003f61c
   3ece8:	00000001 	.word	0x00000001
   3ecec:	0000028a 	.word	0x0000028a
   3ecf0:	00003e80 	.word	0x00003e80
   3ecf4:	00000001 	.word	0x00000001
   3ecf8:	00003e80 	.word	0x00003e80
	...
   3ed08:	3d800000 	.word	0x3d800000
   3ed0c:	00000004 	.word	0x00000004
   3ed10:	467a0000 	.word	0x467a0000
   3ed14:	00000000 	.word	0x00000000
   3ed18:	00000001 	.word	0x00000001
   3ed1c:	10004070 	.word	0x10004070
	...
   3ed28:	000000ff 	.word	0x000000ff
   3ed2c:	00000004 	.word	0x00000004
	...
   3ed3c:	00000109 	.word	0x00000109
   3ed40:	3d289f87 	.word	0x3d289f87
   3ed44:	c0400000 	.word	0xc0400000
   3ed48:	00000109 	.word	0x00000109
   3ed4c:	3b800000 	.word	0x3b800000
   3ed50:	c3000000 	.word	0xc3000000
   3ed54:	00000002 	.word	0x00000002
   3ed58:	00000101 	.word	0x00000101
   3ed5c:	00000001 	.word	0x00000001
   3ed60:	0003f628 	.word	0x0003f628
   3ed64:	00000fa0 	.word	0x00000fa0
   3ed68:	00000004 	.word	0x00000004
   3ed6c:	00026479 	.word	0x00026479
   3ed70:	00026485 	.word	0x00026485
   3ed74:	00026269 	.word	0x00026269
   3ed78:	00026495 	.word	0x00026495
   3ed7c:	000264d9 	.word	0x000264d9
   3ed80:	10004060 	.word	0x10004060
   3ed84:	0f0a0000 	.word	0x0f0a0000
   3ed88:	00000001 	.word	0x00000001
   3ed8c:	03030102 	.word	0x03030102
   3ed90:	00000001 	.word	0x00000001
   3ed94:	07000002 	.word	0x07000002
   3ed98:	00000100 	.word	0x00000100
   3ed9c:	000342a5 	.word	0x000342a5
   3eda0:	00000000 	.word	0x00000000
   3eda4:	000342b5 	.word	0x000342b5
   3eda8:	00034a1d 	.word	0x00034a1d
	...
   3edbc:	000350d1 	.word	0x000350d1
   3edc0:	00000000 	.word	0x00000000
   3edc4:	0003539d 	.word	0x0003539d
   3edc8:	00035245 	.word	0x00035245
	...
   3eddc:	000350d1 	.word	0x000350d1
   3ede0:	00000000 	.word	0x00000000
   3ede4:	000350e1 	.word	0x000350e1
   3ede8:	00035271 	.word	0x00035271
	...
   3ee04:	000356c9 	.word	0x000356c9
   3ee08:	00035591 	.word	0x00035591
	...
   3ee1c:	000359c9 	.word	0x000359c9
   3ee20:	00000000 	.word	0x00000000
   3ee24:	000359d9 	.word	0x000359d9
   3ee28:	00035731 	.word	0x00035731
	...

0003ee3c <standard_subs>:
   3ee3c:	00000074 0004387c 00000003 0004387c     t...|8......|8..
   3ee4c:	00000003 00000000 00000000 00000061     ............a...
   3ee5c:	00043ba8 0000000e 00043ba8 0000000e     .;.......;......
   3ee6c:	00043bb8 00000009 00000062 00043bc4     .;......b....;..
   3ee7c:	00000011 00043bc4 00000011 00043bd8     .....;.......;..
   3ee8c:	0000000c 00000073 00043be8 0000000b     ....s....;......
   3ee9c:	00043bf4 00000046 00043bd8 0000000c     .;..F....;......
   3eeac:	00000069 00043c3c 0000000c 00043c4c     i...<<......L<..
   3eebc:	00000031 00043c80 0000000d 0000006f     1....<......o...
   3eecc:	00043c90 0000000c 00043ca0 00000031     .<.......<..1...
   3eedc:	00043cd4 0000000d 00000064 00043ce4     .<......d....<..
   3eeec:	0000000d 00043cf4 00000032 00043d28     .....<..2...(=..
   3eefc:	0000000e                                ....

0003ef00 <cplus_demangle_builtin_types>:
   3ef00:	00043f74 0000000b 00043f74 0000000b     t?......t?......
   3ef10:	00000000 00043f80 00000004 00043f88     .....?.......?..
   3ef20:	00000007 00000007 00043f90 00000004     .........?......
   3ef30:	00043f98 00000004 00000000 00043fa0     .?...........?..
   3ef40:	00000006 00043fa0 00000006 00000008     .....?..........
   3ef50:	00043fa8 0000000b 00043fa8 0000000b     .?.......?......
   3ef60:	00000008 00043fb4 00000005 00043fb4     .....?.......?..
   3ef70:	00000005 00000008 00043fbc 0000000a     .........?......
   3ef80:	00043fbc 0000000a 00000008 00043fc8     .?...........?..
   3ef90:	0000000d 00043fc8 0000000d 00000000     .....?..........
   3efa0:	00043fd8 00000003 00043fd8 00000003     .?.......?......
   3efb0:	00000001 00043fdc 0000000c 00043fec     .....?.......?..
   3efc0:	00000008 00000002 00000000 00000000     ................
	...
   3efdc:	00043ff8 00000004 00043ff8 00000004     .?.......?......
   3efec:	00000003 00044000 0000000d 00044000     .....@.......@..
   3effc:	0000000d 00000004 00044010 00000008     .........@......
   3f00c:	00044010 00000008 00000000 0004401c     .@...........@..
   3f01c:	00000011 0004401c 00000011 00000000     .....@..........
	...
   3f068:	00044030 00000005 00044030 00000005     0@......0@......
   3f078:	00000000 00044038 0000000e 00044038     ....8@......8@..
   3f088:	0000000e 00000000 00000000 00000000     ................
	...
   3f0a4:	00044048 00000004 00044048 00000004     H@......H@......
   3f0b4:	00000009 00044050 00000007 00043f90     ....P@.......?..
   3f0c4:	00000004 00000000 00044058 00000009     ........X@......
   3f0d4:	00043ff8 00000004 00000005 00044064     .?..........d@..
   3f0e4:	00000012 00044064 00000012 00000006     ....d@..........
   3f0f4:	00043aa4 00000003 00043aa4 00000003     .:.......:......
   3f104:	00000000 00044078 00000009 00044078     ....x@......x@..
   3f114:	00000009 00000000 00044084 00000009     .........@......
   3f124:	00044084 00000009 00000000 00044090     .@...........@..
   3f134:	0000000a 00044090 0000000a 00000000     .....@..........
   3f144:	0004409c 00000004 0004409c 00000004     .@.......@......
   3f154:	00000008 000440a4 00000007 000440a4     .....@.......@..
   3f164:	00000007 00000000 000440ac 00000008     .........@......
   3f174:	000440ac 00000008 00000000 000440b8     .@...........@..
   3f184:	00000008 000440b8 00000008 00000000     .....@..........
   3f194:	00043880 00000011 00043880 00000011     .8.......8......
   3f1a4:	00000000                                ....

0003f1a8 <cplus_demangle_operators>:
   3f1a8:	00043d38 00043d3c 00000002 00000002     8=..<=..........
   3f1b8:	00043d40 00043d44 00000001 00000002     @=..D=..........
   3f1c8:	00043d48 00043b6c 00000002 00000002     H=..l;..........
   3f1d8:	00043d4c 00043d50 00000001 00000001     L=..P=..........
   3f1e8:	00043d54 00043d50 00000001 00000002     T=..P=..........
   3f1f8:	00043d58 00043d5c 00000008 00000001     X=..\=..........
   3f208:	00043d68 00043d6c 00000009 00000001     h=..l=..........
   3f218:	00043d78 00043d5c 00000008 00000001     x=..\=..........
   3f228:	00043d7c 00043d80 0000000a 00000002     |=...=..........
   3f238:	00043d8c 00043d90 00000002 00000002     .=...=..........
   3f248:	00043d94 00043d98 00000001 00000002     .=...=..........
   3f258:	00043d9c 00043da0 00000001 00000001     .=...=..........
   3f268:	00043da4 00043da8 00000002 00000002     .=...=..........
   3f278:	00043dac 00043db0 00000009 00000001     .=...=..........
   3f288:	00043dbc 00043dc0 0000000c 00000002     .=...=..........
   3f298:	00043dd0 00043dd4 00000001 00000001     .=...=..........
   3f2a8:	00043dd8 00043ddc 00000007 00000001     .=...=..........
   3f2b8:	00043de4 00043de8 00000002 00000002     .=...=..........
   3f2c8:	00043dec 00043f30 00000001 00000002     .=..0?..........
   3f2d8:	00043df0 00043df4 00000001 00000002     .=...=..........
   3f2e8:	00043df8 00043dfc 00000002 00000002     .=...=..........
   3f2f8:	00043e00 00043e04 00000001 00000002     .>...>..........
   3f308:	00043e08 00043e0c 00000002 00000002     .>...>..........
   3f318:	00043e10 00043aa4 00000003 00000003     .>...:..........
   3f328:	00043e14 00043aa4 00000003 00000003     .>...:..........
   3f338:	00043e18 00043aa4 00000003 00000002     .>...:..........
   3f348:	00043e1c 00043aa4 00000003 00000002     .>...:..........
   3f358:	00043e20 00043e24 00000002 00000002      >..$>..........
   3f368:	00043e28 0004389c 00000002 00000001     (>...8..........
   3f378:	00043e2c 00043c7c 00000001 00000002     ,>..|<..........
   3f388:	00043e30 00043e34 00000002 00000002     0>..4>..........
   3f398:	00043e38 00043e3c 00000003 00000002     8>..<>..........
   3f3a8:	00043fa4 00043e40 00000002 00000002     .?..@>..........
   3f3b8:	00043e44 00043e48 0000000b 00000001     D>..H>..........
   3f3c8:	00043e54 00043e58 00000002 00000002     T>..X>..........
   3f3d8:	00043e5c 00043e60 00000001 00000002     \>..`>..........
   3f3e8:	00043e64 00043e68 00000002 00000002     d>..h>..........
   3f3f8:	00043e6c 00043e70 00000002 00000002     l>..p>..........
   3f408:	00043e74 00043e78 00000001 00000002     t>..x>..........
   3f418:	00043e7c 00043dd4 00000001 00000002     |>...=..........
   3f428:	00043e80 00043e84 00000002 00000001     .>...>..........
   3f438:	00043e88 00043e8c 00000005 00000003     .>...>..........
   3f448:	00043e94 00043e98 00000002 00000002     .>...>..........
   3f458:	00044074 00043e78 00000001 00000001     t@..x>..........
   3f468:	0003f974 00043e9c 00000001 00000001     t....>..........
   3f478:	00043ea0 00043ea4 00000003 00000003     .>...>..........
   3f488:	00043ea8 00043eac 00000002 00000002     .>...>..........
   3f498:	00043eb0 00043eb4 00000002 00000002     .>...>..........
   3f4a8:	00043bb4 00043eb8 00000001 00000002     .;...>..........
   3f4b8:	00043ebc 00043ec0 00000002 00000002     .>...>..........
   3f4c8:	00043ec4 00043ec8 00000001 00000002     .>...>..........
   3f4d8:	00043ecc 00043ed0 00000003 00000002     .>...>..........
   3f4e8:	00043ed4 00043ed8 00000002 00000001     .>...>..........
   3f4f8:	00043edc 00043ec8 00000001 00000001     .>...>..........
   3f508:	00043ee0 00043ee4 00000002 00000002     .>...>..........
   3f518:	00043a5c 00043ee8 00000001 00000003     \:...>..........
   3f528:	00043eec 00043ef0 00000002 00000002     .>...>..........
   3f538:	00043ef4 00043ef8 00000003 00000002     .>...>..........
   3f548:	00043efc 00043f00 00000010 00000002     .>...?..........
   3f558:	00043f14 00043f18 00000001 00000002     .?...?..........
   3f568:	00043f1c 00043f20 00000002 00000002     .?.. ?..........
   3f578:	00043f24 00043f28 00000009 00000001     $?..(?..........
   3f588:	00043f34 00043f28 00000009 00000001     4?..(?..........
   3f598:	00043f38 00043f3c 0000000b 00000002     8?..<?..........
   3f5a8:	00043f48 00043f4c 00000003 00000002     H?..L?..........
   3f5b8:	00043d88 00043f50 00000007 00000001     .=..P?..........
   3f5c8:	00043f58 00043f50 00000007 00000001     X?..P?..........
   3f5d8:	00043f5c 00043f60 00000005 00000000     \?..`?..........
   3f5e8:	00043f68 00043f6c 00000006 00000001     h?..l?..........
	...

0003f608 <ns_core_V1_0_0>:
   3f608:	00ca0000 00000001 00000000 6c726143     ............Carl
   3f618:	0000736f 7779656b 7364726f 00000000     os..keywords....
   3f628:	69647561 0000006f 00006f6e 73696f6e     audio...no..nois
   3f638:	00000065 6e6b6e75 006e776f 00736579     e...unknown.yes.
   3f648:	00727470 64696f76 6e617b20 6d796e6f     ptr.void {anonym
   3f658:	7d73756f 69653a3a 696c615f 64656e67     ous}::ei_aligned
   3f668:	6572665f 6f762865 292a6469 00000000     _free(void*)....
   3f678:	5f736579 732f6f6e 652f6372 2d656764     yes_no/src/edge-
   3f688:	75706d69 2d65736c 2f6b6473 73616c63     impulse-sdk/clas
   3f698:	69666973 652f7265 6c615f69 656e6769     sifier/ei_aligne
   3f6a8:	616d5f64 636f6c6c 0000682e 696c6128     d_malloc.h..(ali
   3f6b8:	26206e67 6c612820 206e6769 2931202d     gn & (align - 1)
   3f6c8:	3d3d2029 00003020 64696f76 617b202a     ) == 0..void* {a
   3f6d8:	796e6f6e 73756f6d 653a3a7d 6c615f69     nonymous}::ei_al
   3f6e8:	656e6769 61635f64 636f6c6c 7a697328     igned_calloc(siz
   3f6f8:	2c745f65 7a697320 29745f65 00000000     e_t, size_t)....
   3f708:	6c696146 74206465 6c61206f 61636f6c     Failed to alloca
   3f718:	54206574 74694c46 72612065 20616e65     te TFLite arena 
   3f728:	72726528 6320726f 2065646f 0a296425     (error code %d).
   3f738:	00000000 6e692a28 29747570 79743e2d     ....(*input)->ty
   3f748:	3d206570 6d69203d 736c7570 743e2d65     pe == impulse->t
   3f758:	74696c66 6e695f65 5f747570 61746164     flite_input_data
   3f768:	65707974 00000000 495f4945 4c55504d     type....EI_IMPUL
   3f778:	455f4553 524f5252 666e6920 6e657265     SE_ERROR inferen
   3f788:	745f6563 74696c66 65735f65 28707574     ce_tflite_setup(
   3f798:	736e6f63 69652074 706d695f 65736c75     const ei_impulse
   3f7a8:	2c2a745f 6e697520 5f343674 202c2a74     _t*, uint64_t*, 
   3f7b8:	694c6654 65546574 726f736e 202c2a2a     TfLiteTensor**, 
   3f7c8:	694c6654 65546574 726f736e 202c2a2a     TfLiteTensor**, 
   3f7d8:	694c6654 65546574 726f736e 202c2a2a     TfLiteTensor**, 
   3f7e8:	694c6654 65546574 726f736e 202c2a2a     TfLiteTensor**, 
   3f7f8:	755f6965 7571696e 74705f65 26745f72     ei_unique_ptr_t&
   3f808:	00000029 5f736579 732f6f6e 652f6372     )...yes_no/src/e
   3f818:	2d656764 75706d69 2d65736c 2f6b6473     dge-impulse-sdk/
   3f828:	73616c63 69666973 692f7265 7265666e     classifier/infer
   3f838:	69636e65 655f676e 6e69676e 742f7365     encing_engines/t
   3f848:	74696c66 6f655f65 00682e6e 756f2a28     flite_eon.h.(*ou
   3f858:	74757074 743e2d29 20657079 69203d3d     tput)->type == i
   3f868:	6c75706d 3e2d6573 696c6674 6f5f6574     mpulse->tflite_o
   3f878:	75707475 61645f74 79746174 00006570     utput_datatype..
   3f888:	756f2a28 74757074 6f63735f 29736572     (*output_scores)
   3f898:	79743e2d 3d206570 6d69203d 736c7570     ->type == impuls
   3f8a8:	743e2d65 74696c66 756f5f65 74757074     e->tflite_output
   3f8b8:	7461645f 70797461 00000065 756f2a28     _datatype...(*ou
   3f8c8:	74757074 62616c5f 29736c65 79743e2d     tput_labels)->ty
   3f8d8:	3d206570 6d69203d 736c7570 743e2d65     pe == impulse->t
   3f8e8:	74696c66 756f5f65 74757074 7461645f     flite_output_dat
   3f8f8:	70797461 00000065 6e692a28 29747570     atype...(*input)
   3f908:	61703e2d 736d6172 6163732e 3d20656c     ->params.scale =
   3f918:	6d69203d 736c7570 743e2d65 74696c66     = impulse->tflit
   3f928:	6e695f65 5f747570 6c616373 00000065     e_input_scale...
   3f938:	6e692a28 29747570 61703e2d 736d6172     (*input)->params
   3f948:	72657a2e 6f705f6f 20746e69 69203d3d     .zero_point == i
   3f958:	6c75706d 3e2d6573 696c6674 695f6574     mpulse->tflite_i
   3f968:	7475706e 72657a5f 696f706f 0000746e     nput_zeropoint..
   3f978:	756f2a28 74757074 703e2d29 6d617261     (*output)->param
   3f988:	63732e73 20656c61 69203d3d 6c75706d     s.scale == impul
   3f998:	3e2d6573 696c6674 6f5f6574 75707475     se->tflite_outpu
   3f9a8:	63735f74 00656c61 756f2a28 74757074     t_scale.(*output
   3f9b8:	703e2d29 6d617261 657a2e73 705f6f72     )->params.zero_p
   3f9c8:	746e696f 203d3d20 75706d69 2d65736c     oint == impulse-
   3f9d8:	6c66743e 5f657469 7074756f 7a5f7475     >tflite_output_z
   3f9e8:	706f7265 746e696f 00000000 74636576     eropoint....vect
   3f9f8:	3a3a726f 725f4d5f 6c6c6165 695f636f     or::_M_realloc_i
   3fa08:	7265736e 00000074 74636576 3a3a726f     nsert...vector::
   3fa18:	645f4d5f 75616665 615f746c 6e657070     _M_default_appen
   3fa28:	00000064 64657250 69746369 20736e6f     d...Predictions 
   3fa38:	6d697428 25203a65 736d2064 0a3a292e     (time: %d ms.):.
   3fa48:	00000000 3a525245 6e614320 20746f6e     ....ERR: Cannot 
   3fa58:	206e7572 20445353 65646f6d 45202c6c     run SSD model, E
   3fa68:	4c435f49 49535341 52454946 414e455f     I_CLASSIFIER_ENA
   3fa78:	5f454c42 45544544 4f495443 4f505f4e     BLE_DETECTION_PO
   3fa88:	52505453 5345434f 504f5f53 20736920     STPROCESS_OP is 
   3fa98:	61736964 64656c62 0000000a 3a525245     disabled....ERR:
   3faa8:	4c4f5920 2035764f 65646f6d 6120736c      YOLOv5 models a
   3fab8:	6e206572 7320746f 6f707075 64657472     re not supported
   3fac8:	69737520 4520676e 43204e4f 69706d6f      using EON Compi
   3fad8:	2c72656c 65737520 6c756620 4654206c     ler, use full TF
   3fae8:	6574694c 64252820 00000a29 3a525245     Lite (%d)...ERR:
   3faf8:	736e5520 6f707075 64657472 6a626f20      Unsupported obj
   3fb08:	20746365 65746564 6f697463 616c206e     ect detection la
   3fb18:	6c207473 72657961 64252820 00000a29     st layer (%d)...
   3fb28:	093a7325 00000000 74616546 73657275     %s:.....Features
   3fb38:	64252820 2e736d20 00203a29 3a525245      (%d ms.): .ERR:
   3fb48:	69614620 2064656c 72206f74 44206e75      Failed to run D
   3fb58:	70205053 65636f72 28207373 0a296425     SP process (%d).
   3fb68:	00000000 3a525245 6e614320 20746f6e     ....ERR: Cannot 
   3fb78:	646e6168 6920656c 7475706e 70797420     handle input typ
   3fb88:	25282065 000a2964 3a525245 756f5720     e (%d)..ERR: Wou
   3fb98:	7720646c 65746972 74756f20 65646973     ld write outside
   3fba8:	61656620 65727574 66756220 0a726566      feature buffer.
   3fbb8:	00000000 3a525245 6b6e5520 6e776f6e     ....ERR: Unknown
   3fbc8:	74786520 74636172 6e756620 6f697463      extract functio
   3fbd8:	6f202c6e 20796c6e 4343464d 464d202c     n, only MFCC, MF
   3fbe8:	6e612045 70732064 72746365 6172676f     E and spectrogra
   3fbf8:	7573206d 726f7070 0a646574 00000000     m supported.....
   3fc08:	65460a0d 72757461 28207365 6d206425     ..Features (%d m
   3fc18:	3a292e73 00000020 3a525245 766d6320     s.): ...ERR: cmv
   3fc28:	6620776e 656c6961 25282064 000a2964     nw failed (%d)..
   3fc38:	3a525245 726f6e20 696c616d 6974617a     ERR: normalizati
   3fc48:	66206e6f 656c6961 25282064 000a2964     on failed (%d)..
   3fc58:	6e6e7552 20676e69 75706d69 2e65736c     Running impulse.
   3fc68:	000a2e2e 4e524157 7572203a 6c635f6e     ....WARN: run_cl
   3fc78:	69737361 72656966 6e6f635f 756e6974     assifier_continu
   3fc88:	2c73756f 616e6520 5f656c62 2066616d     ous, enable_maf 
   3fc98:	74207369 2c657572 74756220 72657020     is true, but per
   3fca8:	6d726f66 65636e61 6c616320 61726269     formance calibra
   3fcb8:	6e6f6974 20736920 20746f6e 666e6f63     tion is not conf
   3fcc8:	72756769 0a2e6465 00000000 20202020     igured......    
   3fcd8:	50202020 69766572 6c73756f 65772079        Previously we
   3fce8:	72206427 61206e75 766f6d20 2d676e69     'd run a moving-
   3fcf8:	72657661 20656761 746c6966 6f207265     average filter o
   3fd08:	20726576 72756f79 74756f20 73747570     ver your outputs
   3fd18:	206e6920 73696874 73616320 62202c65      in this case, b
   3fd28:	74207475 20736968 6e207369 6420776f     ut this is now d
   3fd38:	62617369 2e64656c 0000000a 20202020     isabled.....    
   3fd48:	47202020 6f74206f 65502720 726f6672        Go to 'Perfor
   3fd58:	636e616d 61632065 7262696c 6f697461     mance calibratio
   3fd68:	6920276e 6f79206e 45207275 20656764     n' in your Edge 
   3fd78:	75706d49 2065736c 6a6f7270 20746365     Impulse project 
   3fd88:	63206f74 69666e6f 65727567 736f7020     to configure pos
   3fd98:	72702d74 7365636f 676e6973 72617020     t-processing par
   3fda8:	74656d61 2e737265 0000000a 20202020     ameters.....    
   3fdb8:	28202020 20756f59 206e6163 62616e65        (You can enab
   3fdc8:	7420656c 20736968 6d6f7266 61442720     le this from 'Da
   3fdd8:	6f626873 27647261 20666920 73277469     shboard' if it's
   3fde8:	746f6e20 73697620 656c6269 206e6920      not visible in 
   3fdf8:	72756f79 6f727020 7463656a 00000a29     your project)...
   3fe08:	65726f43 696e6920 61662074 64656c69     Core init failed
   3fe18:	00000a2e 65776f50 6e492072 46207469     ....Power Init F
   3fe28:	656c6961 000a2e64 656d6954 6e692072     ailed...Timer in
   3fe38:	66207469 656c6961 000a2e64 74747542     it failed...Butt
   3fe48:	69206e6f 6974696e 7a696c61 6f697461     on initializatio
   3fe58:	6166206e 64656c69 00000a2e 69647541     n failed....Audi
   3fe68:	6e69206f 61697469 617a696c 6e6f6974     o initialization
   3fe78:	69614620 2e64656c 0000000a 65676445      Failed.....Edge
   3fe88:	75706d49 2065736c 73657922 20726f20     Impulse "yes or 
   3fe98:	20226f6e 6d617865 20656c70 6564202d     no" example - de
   3fea8:	74636574 79222073 20227365 2220726f     tects "yes" or "
   3feb8:	20226f6e 6e697375 6e612067 676f6c61     no" using analog
   3fec8:	63696d20 706e6920 000a7475 73657250      mic input..Pres
   3fed8:	75422073 6e6f7474 74203020 7473206f     s Button 0 to st
   3fee8:	20747261 7473696c 6e696e65 00000a67     art listening...
   3fef8:	7473694c 6e696e65 2e2e2e67 0000000a     Listening.......
   3ff08:	00000059 00000079 0000004e 0000006e     Y...y...N...n...
   3ff18:	74636576 3a3a726f 725f4d5f 65676e61     vector::_M_range
   3ff28:	6568635f 203a6b63 206e5f5f 69687728     _check: __n (whi
   3ff38:	69206863 7a252073 3e202975 6874203d     ch is %zu) >= th
   3ff48:	3e2d7369 657a6973 28202928 63696877     is->size() (whic
   3ff58:	73692068 757a2520 00000029 5f74756f     h is %zu)...out_
   3ff68:	7274616d 3d207869 78642520 000a6425     matrix = %dx%d..
   3ff78:	636c6163 74616c75 73206465 20657a69     calculated size 
   3ff88:	6425203d 0a642578 00000000 3a525245     = %dx%d.....ERR:
   3ff98:	65705320 6f727463 6d617267 69616620      Spectrogram fai
   3ffa8:	2064656c 29642528 0000000a 3a525245     led (%d)....ERR:
   3ffb8:	61726620 6c5f656d 74676e65 00282068      frame_length (.
   3ffc8:	61632029 746f6e6e 20656220 65776f6c     ) cannot be lowe
   3ffd8:	68742072 66206e61 656d6172 7274735f     r than frame_str
   3ffe8:	20656469 00000028 6f662029 6f632072     ide (...) for co
   3fff8:	6e69746e 73756f75 616c6320 66697373     ntinuous classif
   40008:	74616369 0a6e6f69 00000000 3a525245     ication.....ERR:
   40018:	61726620 6c5f656d 74676e65 25282068      frame_length (%
   40028:	63202964 6f6e6e61 65622074 72616c20     d) cannot be lar
   40038:	20726567 6e616874 67697320 276c616e     ger than signal'
   40048:	6f742073 206c6174 676e656c 28206874     s total length (
   40058:	20296425 20726f66 746e6f63 6f756e69     %d) for continuo
   40068:	63207375 7373616c 63696669 6f697461     us classificatio
   40078:	00000a6e 3a525245 5f696520 5f707364     n...ERR: ei_dsp_
   40088:	746e6f63 7275635f 746e6572 6172665f     cont_current_fra
   40098:	695f656d 73692078 72616c20 20726567     me_ix is larger 
   400a8:	6e616874 61726620 7320656d 0a657a69     than frame size.
   400b8:	00000000 3a525245 43464d20 61662043     ....ERR: MFCC fa
   400c8:	64656c69 64252820 00000a29 3a525245     iled (%d)...ERR:
   400d8:	5f696520 5f707364 746e6f63 7275635f      ei_dsp_cont_cur
   400e8:	746e6572 6172665f 695f656d 73692078     rent_frame_ix is
   400f8:	72616c20 20726567 6e616874 61726620      larger than fra
   40108:	7320656d 20657a69 3d786928 73206425     me size (ix=%d s
   40118:	3d657a69 0a296425 00000000 3a525245     ize=%d).....ERR:
   40128:	45464d20 69616620 2064656c 29642528      MFE failed (%d)
   40138:	0000000a                                ....

0004013c <_ZTSFijjPfE>:
   4013c:	6a6a6946 00456650                       FijjPfE.

00040144 <_ZTIFijjPfE>:
   40144:	000432d0 0004013c                       .2..<...

0004014c <_ZTSZN2ei5numpy18signal_from_bufferEPKfjPNS_11ei_signal_tEEUljjPfE_>:
   4014c:	65324e5a 756e3569 3179706d 67697338     ZN2ei5numpy18sig
   4015c:	5f6c616e 6d6f7266 6675625f 45726566     nal_from_bufferE
   4016c:	6a664b50 5f534e50 69653131 6769735f     PKfjPNS_11ei_sig
   4017c:	5f6c616e 55454574 506a6a6c 005f4566     nal_tEEUljjPfE_.

0004018c <_ZTIZN2ei5numpy18signal_from_bufferEPKfjPNS_11ei_signal_tEEUljjPfE_>:
   4018c:	00043270 0004014c                       p2..L...

00040194 <_ZTSZN15SignalWithRange10get_signalEvEUljjPfE_>:
   40194:	35314e5a 6e676953 69576c61 61526874     ZN15SignalWithRa
   401a4:	3165676e 74656730 6769735f 456c616e     nge10get_signalE
   401b4:	6c554576 66506a6a 00005f45              vEUljjPfE_..

000401c0 <_ZTIZN15SignalWithRange10get_signalEvEUljjPfE_>:
   401c0:	00043270 00040194                       p2......

000401c8 <_ZTSPFijjPfE>:
   401c8:	6a694650 4566506a 00000000              PFijjPfE....

000401d4 <_ZTIPFijjPfE>:
   401d4:	00043364 000401c8 00000000 00040144     d3..........D...

000401e4 <_ZTSZN14SignalWithAxes10get_signalEvEUljjPfE_>:
   401e4:	34314e5a 6e676953 69576c61 78416874     ZN14SignalWithAx
   401f4:	30317365 5f746567 6e676973 76456c61     es10get_signalEv
   40204:	6a6c5545 4566506a 0000005f              EUljjPfE_...

00040210 <_ZTIZN14SignalWithAxes10get_signalEvEUljjPfE_>:
   40210:	00043270 000401e4                       p2......

00040218 <_ZN2eiL25quantized_values_one_zeroE>:
   40218:	00000000 3c23d70a 3ca3d70a 3cf5c28f     ......#<...<...<
   40228:	3d23d70a 3d3a2e8c 3d430c31 3d4ccccd     ..#=..:=1.C=..L=
   40238:	3d579436 3d638e39 3d70f0f1 3d75c28f     6.W=9.c=..p=..u=
   40248:	3d800000 3d888889 3d8f5c29 3d924925     ...=...=)\.=%I.=
   40258:	3d9d89d9 3da3d70a 3daaaaab 3db851ec     ...=...=...=.Q.=
   40268:	3dba2e8c 3dc30c31 3dcccccd 3dd79436     ...=1..=...=6..=
   40278:	3de147ae 3de38e39 3df0f0f1 3df5c28f     .G.=9..=...=...=
   40288:	3e000000 3e051eb8 3e088889 3e0ba2e9     ...>...>...>...>
   40298:	3e0f5c29 3e124925 3e19999a 3e1d89d9     )\.>%I.>...>...>
   402a8:	3e21af28 3e23d70a 3e2aaaab 3e2e147b     (.!>..#>..*>{..>
   402b8:	3e34b4b5 3e3851ec 3e3a2e8c 3e400000     ..4>.Q8>..:>..@>
   402c8:	3e428f5c 3e430c31 3e4ccccd 3e570a3d     \.B>1.C>..L>=.W>
   402d8:	3e579436 3e5b6db7 3e6147ae 3e638e39     6.W>.m[>.Ga>9.c>
   402e8:	3e68ba2f 3e6b851f 3e6c4ec5 3e70f0f1     /.h>..k>.Nl>..p>
   402f8:	3e73cf3d 3e75c28f 3e800000 3e851eb8     =.s>..u>...>...>
   40308:	3e86bca2 3e888889 3e8a3d71 3e8ba2e9     ...>...>q=.>...>
   40318:	3e8e38e4 3e8f5c29 3e924925 3e947ae1     .8.>)\.>%I.>.z.>
   40328:	3e969697 3e99999a 3e9d89d9 3e9eb852     ...>...>...>R..>
   40338:	3ea00000 3ea1af28 3ea2e8ba 3ea3d70a     ...>(..>...>...>
   40348:	3ea8f5c3 3eaaaaab 3eae147b 3eb33333     ...>...>{..>33.>
   40358:	3eb4b4b5 3eb6db6e 3eb851ec 3eba2e8c     ...>n..>.Q.>...>
   40368:	3ebca1af 3ebd70a4 3ec00000 3ec28f5c     ...>.p.>...>\..>
   40378:	3ec30c31 3ec4ec4f 3ec71c72 3ec7ae14     1..>O..>r..>...>
   40388:	3ecccccd 3ed1745d 3ed1eb85 3ed2d2d3     ...>]t.>...>...>
   40398:	3ed55555 3ed70a3d 3ed79436 3edb6db7     UU.>=..>6..>.m.>
   403a8:	3edc28f6 3ee00000 3ee147ae 3ee38e39     .(.>...>.G.>9..>
   403b8:	3ee66666 3ee8ba2f 3eeb851f 3eec4ec5     ff.>/..>...>.N.>
   403c8:	3eeeeeef 3ef0a3d7 3ef0f0f1 3ef286bd     ...>...>...>...>
   403d8:	3ef3cf3d 3ef5c28f 3efae148 3f000000     =..>...>H..>...?
   403e8:	3f028f5c 3f051eb8 3f061862 3f06bca2     \..?...?b..?...?
   403f8:	3f078788 3f07ae14 3f088889 3f09d89e     ...?...?...?...?
   40408:	3f0a3d71 3f0ba2e9 3f0ccccd 3f0e38e4     q=.?...?...?.8.?
   40418:	3f0f5c29 3f100000 3f11eb85 3f124925     )\.?...?...?%I.?
   40428:	3f1435e5 3f147ae1 3f155555 3f169697     .5.?.z.?UU.?...?
   40438:	3f170a3d 3f1745d1 3f19999a 3f1c28f6     =..?.E.?...?.(.?
   40448:	3f1c71c7 3f1d89d9 3f1e79e8 3f1eb852     .q.?...?.y.?R..?
   40458:	3f200000 3f2147ae 3f21af28 3f22e8ba     .. ?.G!?(.!?.."?
   40468:	3f23d70a 3f249249 3f25a5a6 3f266666     ..#?I.$?..%?ff&?
   40478:	3f28f5c3 3f2aaaab 3f2b851f 3f2e147b     ..(?..*?..+?{..?
   40488:	3f2e8ba3 3f2f286c 3f300000 3f30a3d7     ...?l(/?..0?..0?
   40498:	3f313b14 3f333333 3f34b4b5 3f35c28f     .;1?333?..4?..5?
   404a8:	3f36db6e 3f3851ec 3f38e38e 3f3a2e8c     n.6?.Q8?..8?..:?
   404b8:	3f3ae148 3f3bbbbc 3f3ca1af 3f3d70a4     H.:?..;?..<?.p=?
   404c8:	3f400000 3f428f5c 3f430c31 3f43c3c4     ..@?\.B?1.C?..C?
   404d8:	3f44ec4f 3f451eb8 3f45d174 3f471c72     O.D?..E?t.E?r.G?
   404e8:	3f47ae14 3f492492 3f4a1af3 3f4a3d71     ..G?.$I?..J?q=J?
   404f8:	3f4ccccd 3f4f3cf4 3f4f5c29 3f500000     ..L?.<O?)\O?..P?
   40508:	3f51745d 3f51eb85 3f52d2d3 3f547ae1     ]tQ?..Q?..R?.zT?
   40518:	3f555555 3f570a3d 3f579436 3f589d8a     UUU?=.W?6.W?..X?
   40528:	3f59999a 3f5b6db7 3f5c28f6 3f5d1746     ..Y?.m[?.(\?F.]?
   40538:	3f5dddde 3f5eb852 3f600000 3f6147ae     ..]?R.^?..`?.Ga?
   40548:	3f61e1e2 3f638e39 3f63d70a 3f650d79     ..a?9.c?..c?y.e?
   40558:	3f666666 3f679e7a 3f68ba2f 3f68f5c3     fff?z.g?/.h?..h?
   40568:	3f6aaaab 3f6b851f 3f6c4ec5 3f6db6db     ..j?..k?.Nl?..m?
   40578:	3f6e147b 3f6eeeef 3f700000 3f70a3d7     {.n?..n?..p?..p?
   40588:	3f70f0f1 3f71c71c 3f7286bd 3f733333     ..p?..q?..r?33s?
   40598:	3f73cf3d 3f745d17 3f75c28f 3f7851ec     =.s?.]t?..u?.Qx?
   405a8:	3f7ae148 3f7d70a4 3f800000 3f800000     H.z?.p}?...?...?
   405b8:	3f800000 3f800000 3f800000 3f800000     ...?...?...?...?
   405c8:	3f800000 3f800000 3f800000 00006625     ...?...?...?%f..
   405d8:	3a525245 69614620 2064656c 61206f74     ERR: Failed to a
   405e8:	636f6c6c 20657461 73726570 65747369     llocate persiste
   405f8:	6220746e 65666675 666f2072 7a697320     nt buffer of siz
   40608:	64252065 6f64202c 6e207365 6620746f     e %d, does not f
   40618:	69207469 6574206e 726f736e 65726120     it in tensor are
   40628:	6120616e 7220646e 68636165 45206465     na and reached E
   40638:	414d5f49 564f5f58 4c465245 425f574f     I_MAX_OVERFLOW_B
   40648:	45464655 4f435f52 0a544e55 00000000     UFFER_COUNT.....
   40658:	3a525245 69614620 2064656c 61206f74     ERR: Failed to a
   40668:	636f6c6c 20657461 73726570 65747369     llocate persiste
   40678:	6220746e 65666675 666f2072 7a697320     nt buffer of siz
   40688:	64252065 0000000a 3a525245 69614620     e %d....ERR: Fai
   40698:	2064656c 61206f74 636f6c6c 20657461     led to allocate 
   406a8:	61726373 20686374 66667562 6f207265     scratch buffer o
   406b8:	69732066 2520657a 72202c64 68636165     f size %d, reach
   406c8:	45206465 414d5f49 43535f58 43544152     ed EI_MAX_SCRATC
   406d8:	55425f48 52454646 554f435f 000a544e     H_BUFFER_COUNT..
   406e8:	3a525245 69614620 2064656c 61206f74     ERR: Failed to a
   406f8:	636f6c6c 20657461 61726373 20686374     llocate scratch 
   40708:	66667562 6f207265 69732066 2520657a     buffer of size %
   40718:	00000a64 3a525245 6e657420 20726f73     d...ERR: tensor 
   40728:	6e657261 73692061 6f6f7420 616d7320     arena is too sma
   40738:	202c6c6c 73656f64 746f6e20 74696620     ll, does not fit
   40748:	646f6d20 2d206c65 65766520 6977206e      model - even wi
   40758:	756f6874 63732074 63746172 75622068     thout scratch bu
   40768:	72656666 00000a73                       ffers...

00040770 <_ZN12_GLOBAL__N_1L10tensorDataE>:
   40770:	00000902 10018e40 000412e0 0000028a     ....@...........
   40780:	00000001 00041424 00000201 00040bb0     ....$...........
   40790:	000412ec 00000010 00000000 00000000     ................
   407a0:	00000201 00040bc0 000412f4 00000010     ................
	...
   407b8:	00000201 00040bd0 000412fc 00000010     ................
	...
   407d0:	00000201 00040be0 00041304 00000010     ................
	...
   407e8:	00000201 00040bf0 0004130c 00000008     ................
	...
   40800:	00000901 00040c00 00041314 00000138     ............8...
   40810:	00000001 00041430 00000201 00040d40     ....0.......@...
   40820:	00041328 00000020 00000001 0004143c     (... .......<...
   40830:	00000901 00040d60 00041330 00000180     ....`...0.......
   40840:	00000001 00041448 00000201 00040ee0     ....H...........
   40850:	00041344 00000040 00000001 00041454     D...@.......T...
   40860:	00000901 00040f90 0004134c 00000340     ........L...@...
   40870:	00000001 00041614 00000201 000412d0     ................
   40880:	00041358 00000010 00000001 00041620     X........... ...
   40890:	00000902 10018bb0 00041360 0000028a     ........`.......
   408a0:	00000001 0004162c 00000902 10018e40     ....,.......@...
   408b0:	00041374 00000190 00000001 00041638     t...........8...
   408c0:	00000902 10018bb0 00041388 00000190     ................
   408d0:	00000001 00041644 00000902 10018d40     ....D.......@...
   408e0:	0004139c 000000c8 00000001 00041650     ............P...
   408f0:	00000902 10018bb0 000413b0 000000c8     ................
   40900:	00000001 0004165c 00000902 10018d40     ....\.......@...
   40910:	000413c4 00000190 00000001 00041668     ............h...
   40920:	00000902 10018bb0 000413d8 00000190     ................
   40930:	00000001 00041674 00000902 10018d40     ....t.......@...
   40940:	000413ec 000000d0 00000001 00041680     ................
   40950:	00000902 10018bb0 00041400 000000d0     ................
   40960:	00000001 0004168c 00000902 10018c80     ................
   40970:	0004140c 00000004 00000001 00041698     ................
   40980:	00000902 10018bb0 00041418 00000004     ................
   40990:	00000001 000416a4                       ........

00040998 <_ZN12_GLOBAL__N_1L11quant0_zeroE>:
   40998:	00000001 fffffffd                       ........

000409a0 <_ZN12_GLOBAL__N_1L11quant6_zeroE>:
   409a0:	00000008 00000000 00000000 00000000     ................
	...

000409c4 <_ZN12_GLOBAL__N_1L11quant7_zeroE>:
   409c4:	00000008 00000000 00000000 00000000     ................
	...

000409e8 <_ZN12_GLOBAL__N_1L11quant8_zeroE>:
   409e8:	00000010 00000000 00000000 00000000     ................
	...

00040a2c <_ZN12_GLOBAL__N_1L11quant9_zeroE>:
   40a2c:	00000010 00000000 00000000 00000000     ................
	...

00040a70 <_ZN12_GLOBAL__N_1L12quant0_scaleE>:
   40a70:	00000001 3d289f87                       ......(=

00040a78 <_ZN12_GLOBAL__N_1L12quant10_zeroE>:
   40a78:	00000001 00000000                       ........

00040a80 <_ZN12_GLOBAL__N_1L12quant11_zeroE>:
   40a80:	00000001 00000000                       ........

00040a88 <_ZN12_GLOBAL__N_1L12quant12_zeroE>:
   40a88:	00000001 fffffffd                       ........

00040a90 <_ZN12_GLOBAL__N_1L12quant13_zeroE>:
   40a90:	00000001 ffffff80                       ........

00040a98 <_ZN12_GLOBAL__N_1L12quant14_zeroE>:
   40a98:	00000001 ffffff80                       ........

00040aa0 <_ZN12_GLOBAL__N_1L12quant15_zeroE>:
   40aa0:	00000001 ffffff80                       ........

00040aa8 <_ZN12_GLOBAL__N_1L12quant16_zeroE>:
   40aa8:	00000001 ffffff80                       ........

00040ab0 <_ZN12_GLOBAL__N_1L12quant17_zeroE>:
   40ab0:	00000001 ffffff80                       ........

00040ab8 <_ZN12_GLOBAL__N_1L12quant18_zeroE>:
   40ab8:	00000001 ffffff80                       ........

00040ac0 <_ZN12_GLOBAL__N_1L12quant19_zeroE>:
   40ac0:	00000001 ffffff80                       ........

00040ac8 <_ZN12_GLOBAL__N_1L12quant20_zeroE>:
   40ac8:	00000001 ffffff80                       ........

00040ad0 <_ZN12_GLOBAL__N_1L12quant21_zeroE>:
   40ad0:	00000001 0000000d                       ........

00040ad8 <_ZN12_GLOBAL__N_1L12quant22_zeroE>:
   40ad8:	00000001 ffffff80                       ........

00040ae0 <_ZN12_GLOBAL__N_1L12quant6_scaleE>:
   40ae0:	00000008 3b84f442 3c33ddd9 3c3fad66     ....B..;..3<f.?<
   40af0:	3c8c10c4 3bed5e35 3c0b00de 3c021801     ...<5^.;...<...<
   40b00:	3bd6e9db                                ...;

00040b04 <_ZN12_GLOBAL__N_1L12quant7_scaleE>:
   40b04:	00000008 392f264a 39ecf358 39fc8279     ....J&/9X..9y..9
   40b14:	3a388492 399c59bd 39b71e61 39ab61a4     ..8:.Y.9a..9.a.9
   40b24:	398d8f64                                d..9

00040b28 <_ZN12_GLOBAL__N_1L12quant8_scaleE>:
   40b28:	00000010 3bfb201b 3c2c1aa7 3c5dc484     ..... .;..,<..]<
   40b38:	3bf7205e 3c4714d8 3c989503 3bd95ce6     ^ .;..G<...<.\.;
   40b48:	3c353425 3c468ce8 3c6fe896 3bff1275     %45<..F<..o<u..;
   40b58:	3b978856 3bbd0d4e 3c4bc700 3c6c7f3e     V..;N..;..K<>.l<
   40b68:	3c813802                                .8.<

00040b6c <_ZN12_GLOBAL__N_1L12quant9_scaleE>:
   40b6c:	00000010 39b0b26e 39f23124 3a1c0a4e     ....n..9$1.9N..:
   40b7c:	39ade21b 3a0c13e9 3a56b842 3998f0e4     ...9...:B.V:...9
   40b8c:	39feff4c 3a0bb443 3a28cdf8 39b37955     L..9C..:..(:Uy.9
   40b9c:	39553e2a 39850556 3a0f61c5 3a266777     *>U9V..9.a.:wg&:
   40bac:	3a35d78b                                ..5:

00040bb0 <_ZN12_GLOBAL__N_1L12tensor_data1E>:
   40bb0:	00000001 00000001 00000032 0000000d     ........2.......

00040bc0 <_ZN12_GLOBAL__N_1L12tensor_data2E>:
   40bc0:	00000001 00000032 00000001 00000008     ....2...........

00040bd0 <_ZN12_GLOBAL__N_1L12tensor_data3E>:
   40bd0:	00000001 00000001 00000019 00000008     ................

00040be0 <_ZN12_GLOBAL__N_1L12tensor_data4E>:
   40be0:	00000001 00000019 00000001 00000010     ................

00040bf0 <_ZN12_GLOBAL__N_1L12tensor_data5E>:
   40bf0:	ffffffff 000000d0 00000000 00000000     ................

00040c00 <_ZN12_GLOBAL__N_1L12tensor_data6E>:
   40c00:	9cc84201 23951a6c 23e60544 d4591413     .B..l..#D..#..Y.
   40c10:	c1f65ea6 08262c0e 7f3f03ed d938daa2     .^...,&...?...8.
   40c20:	0311fbdc d70c37e8 21162f0c 04e3e91a     .....7.../.!....
   40c30:	fdf7f10d 01f7d681 0709d9f4 1bfff3f9     ................
   40c40:	d8ffc010 fa0e17f1 09040004 db81deef     ................
   40c50:	06351903 e6031e02 d1edfbf8 24fc1ae6     ..5............$
   40c60:	0600fc04 f307d921 021206aa fe05f70c     ....!...........
   40c70:	0a0decf0 140a8119 0d07070e 070102fd     ................
   40c80:	fb2e04f9 08f2e9e0 ff01fcfe 440002fc     ...............D
   40c90:	11030407 0a040004 fb060200 28272b81     .............+'(
   40ca0:	12d1250c e304f8f2 6750f101 e71e2720     .%........Pg '..
   40cb0:	1dec03fd 2fd9ffde 160e474b e90404f8     ......./KG......
   40cc0:	eeee1ad2 20ec131c 28fb18f8 0a0bf2fc     ....... ...(....
   40cd0:	0010eff5 f9f51327 ee1814f0 2681d3ee     ....'..........&
   40ce0:	03d123f1 12f02ce3 0ad00209 f211c4e1     .#...,..........
   40cf0:	2af8eacc fce71110 efe95d7f 12013e07     ...*.....]...>..
   40d00:	e01d2709 acb21595 e7e81612 f00e1104     .'..............
   40d10:	7f16f605 dbf407db ebede8f2 0d1dfbfd     ................
   40d20:	11e5f75e 0714eecd fcfa09f9 a6232b0a     ^............+#.
   40d30:	2cd5e223 fb17f30a 00000000 00000000     #..,............

00040d40 <_ZN12_GLOBAL__N_1L12tensor_data7E>:
   40d40:	ffffd550 000007d3 00000172 fffffb8f     P.......r.......
   40d50:	ffffecc8 ffffff42 fffff672 ffffddf2     ....B...r.......

00040d60 <_ZN12_GLOBAL__N_1L12tensor_data8E>:
   40d60:	1e0b19f8 e61610f7 15f8f300 c9fa03c5     ................
   40d70:	2edede08 d4fbdb81 b981caf3 f60ab7f0     ................
   40d80:	d2cbe3e8 040ef403 a1effb38 0a09f21f     ........8.......
   40d90:	13010c04 ee0e0be1 0feee0fe f2030d9c     ................
   40da0:	0cc2aa06 fef1ff81 e102eef8 55f2fbfb     ...............U
   40db0:	b6e1fcf5 e40a81e9 d5eeeeaa db04c5b2     ................
   40dc0:	fae9d9a0 fecdec2a 04b6d0eb feac03ed     ....*...........
   40dd0:	0e928112 e3e4f7bd e481a50f 02e8f6f2     ................
   40de0:	8ea5cfff 03ebe2fc a2f3f9fa 11eae914     ................
   40df0:	07bca4b4 f8df0cdb a381d987 09ea47c4     .............G..
   40e00:	c3d9e3a1 43eceed8 ffd9ba20 e1eb0cf5     .......C .......
   40e10:	ecd7e0d3 e881f2f7 f3eecabb 21982702     .............'.!
   40e20:	060afd0c 2cfefc01 fe00d6f2 f603f523     .......,....#...
   40e30:	de819706 19fde5e4 d7ebf3e5 a2dcfcf7     ................
   40e40:	f9fbfbbc 81aa0d0f ee01fda3 82b10504     ................
   40e50:	e1c981e1 f393dd34 f3fc8e18 e9e3fcc5     ....4...........
   40e60:	d89ed512 e013dedf 6ddcf8f9 b123bcfe     ...........m..#.
   40e70:	26dce9f5 81d8c0e7 1d1416e6 cb77131f     ...&..........w.
   40e80:	b8e4e1f9 f9d639b1 1881bae5 f902ccd0     .....9..........
   40e90:	00adcead 32eadfd0 fe81d7f6 f506e9eb     .......2........
   40ea0:	05c9e7ef a8f9f3fb 29ecf4cc 83f31edb     ...........)....
   40eb0:	d80806a9 a9f508f3 ddfe04a6 81f005f4     ................
   40ec0:	e804fe9d c7f4fcf8 05a9be14 edf1fbcf     ................
   40ed0:	f681d9fa fd06f5e7 d1aae815 1809ea08     ................

00040ee0 <_ZN12_GLOBAL__N_1L12tensor_data9E>:
   40ee0:	fffffefa ffffff13 fffffb7d fffffb29     ........}...)...
   40ef0:	00000143 000001dc ffffff81 00000053     C...........S...
   40f00:	fffffa81 00000307 00000370 fffffaf0     ........p.......
   40f10:	000007cf 000001b6 00000294 000000ca     ................

00040f20 <_ZN12_GLOBAL__N_1L13quant10_scaleE>:
   40f20:	00000001 3c13b285                       .......<

00040f28 <_ZN12_GLOBAL__N_1L13quant11_scaleE>:
   40f28:	00000001 3972c0b5                       ......r9

00040f30 <_ZN12_GLOBAL__N_1L13quant12_scaleE>:
   40f30:	00000001 3d289f87                       ......(=

00040f38 <_ZN12_GLOBAL__N_1L13quant13_scaleE>:
   40f38:	00000001 3d342079                       ....y 4=

00040f40 <_ZN12_GLOBAL__N_1L13quant14_scaleE>:
   40f40:	00000001 3d342079                       ....y 4=

00040f48 <_ZN12_GLOBAL__N_1L13quant15_scaleE>:
   40f48:	00000001 3d342079                       ....y 4=

00040f50 <_ZN12_GLOBAL__N_1L13quant16_scaleE>:
   40f50:	00000001 3d342079                       ....y 4=

00040f58 <_ZN12_GLOBAL__N_1L13quant17_scaleE>:
   40f58:	00000001 3cd260e9                       .....`.<

00040f60 <_ZN12_GLOBAL__N_1L13quant18_scaleE>:
   40f60:	00000001 3cd260e9                       .....`.<

00040f68 <_ZN12_GLOBAL__N_1L13quant19_scaleE>:
   40f68:	00000001 3cd260e9                       .....`.<

00040f70 <_ZN12_GLOBAL__N_1L13quant20_scaleE>:
   40f70:	00000001 3cd260e9                       .....`.<

00040f78 <_ZN12_GLOBAL__N_1L13quant21_scaleE>:
   40f78:	00000001 3db9c6ab                       .......=

00040f80 <_ZN12_GLOBAL__N_1L13quant22_scaleE>:
   40f80:	00000001 3b800000 00000000 00000000     .......;........

00040f90 <_ZN12_GLOBAL__N_1L13tensor_data10E>:
   40f90:	daefddf3 050a0940 ec101322 b61a07cc     ....@...".......
   40fa0:	0df201f6 f4c8041d 0425101a 1aff2cd0     ..........%..,..
   40fb0:	12d7fdfa efe0e81e 09250c17 280bc3c0     ..........%....(
   40fc0:	10c317f6 bbace82e 0e23f20e 210288e1     ..........#....!
   40fd0:	13df22f5 c8bbfd29 f6350615 200409eb     ."..).....5.... 
   40fe0:	17d81eef 9e94ed20 111ae91d 19f7c3e8     .... ...........
   40ff0:	0abf1bda c7bff423 0a27ee20 2a02e5e8     ....#... .'....*
   41000:	f8dc1bdc b0bde93a fd2ce20a 2514c3ea     ....:.....,....%
   41010:	02da27e9 afc2f93f 091ed410 2901bcca     .'..?..........)
   41020:	f1ad0fe9 c49f0928 0633e904 1311ecd2     ....(.....3.....
   41030:	07ff1701 d69d031e 10200105 13fec5da     .......... .....
   41040:	daec1005 e6a20c3d 0428fdeb 1808fdc8     ....=.....(.....
   41050:	04fd0002 17c3d517 091eee04 060af5ef     ................
   41060:	fe0b2107 39050deb 1654df81 50e4153e     .!.....9..T.>..P
   41070:	cffbef04 1d0fddef 19de14bf eadc1708     ................
   41080:	c90ae90e fe0cd9fb 26cae9c2 e0d21f0e     ...........&....
   41090:	c61bd71a 05f6cdf0 0fd9f5e2 c8d01f06     ................
   410a0:	d519de0b f810c0e8 17be00bf cfe9edec     ................
   410b0:	b212df16 0900a0c7 13bbd4c9 de000ff0     ................
   410c0:	9c29cb20 140cd9ff 23aee2a1 c9e2f9d5      .)........#....
   410d0:	d422fa1a ff0af5e1 09de019b c7d9f818     ..".............
   410e0:	ca17d720 f9e7b5da 1ddce5ad cae403f2      ...............
   410f0:	d40aea21 0b01cace 1ba4daac e301fbf4     !...............
   41100:	d40dde1a d901bede 09ffd6d6 e3db200f     ............. ..
   41110:	02080232 dd1acad6 0bf5f2d1 fddd0041     2...........A...
   41120:	0506fa09 cbf72d03 17ef1606 1fed682c     .....-......,h..
   41130:	d6180dfd cce802c6 f6c50efd f409eff5     ................
   41140:	e80dfc0c 190d1bfa f1fcfce8 2309dc18     ...............#
   41150:	f512f807 211632d8 ecfcfbe3 160cbe0b     .....2.!........
   41160:	ea221f14 271b3ff1 faecfbf0 2108f82f     .."..?.'..../..!
   41170:	db161a09 1a1946fd f80606e8 10ffe62c     .....F......,...
   41180:	f71f2810 1b1949db 02fa0ffe 1700e91a     .(...I..........
   41190:	e42a1611 0b103ce9 ebfa06f1 160ada0f     ..*..<..........
   411a0:	f4302713 180432f2 f4fe06fa 1c06f317     .'0..2..........
   411b0:	f02b1f0d 201d25da f60000ff 1808ec10     ..+..%. ........
   411c0:	fe281604 0f053e05 f2fdf5f8 0006e311     ..(..>..........
   411d0:	eb1d1201 061e2ee8 fb04f9fd 14fcfbd5     ................
   411e0:	fd1002f9 10eb31dc f4e503f4 1d00cccd     .....1..........
   411f0:	e9073afa 100844f6 dbd70b05 0503d2dc     .:...D..........
   41200:	7adee1e2 d606d802 f0df0920 0f0cfecb     ...z.... .......
   41210:	40e001f4 d6f421f2 05eb0728 ba08d3f3     ...@.!..(.......
   41220:	37f3ece2 bfe9f8fc ebe31822 d50c34f9     ...7...."....4..
   41230:	41dbe4ec 0a0cef0b f5da2517 d7073cef     ...A.....%...<..
   41240:	36ecceed 131def0f eed9161f c7153709     ...6.........7..
   41250:	30f1c4e6 221ff1fd e9fd3f24 b9103eff     ...0..."$?...>..
   41260:	3edda2e0 2118e908 f2f53524 aa182814     ...>...!$5...(..
   41270:	23efa0eb 380ac80b f5d3352a 93132cff     ...#...8*5...,..
   41280:	30f3b707 2812e2f5 f3ca2923 b2f84213     ...0...(#)...B..
   41290:	2cc9e0ea 2b15ede4 06b0321d c2173b04     ...,...+.2...;..
   412a0:	2bbbbf00 2027e400 f4c8400a a7123b1f     ...+..' .@...;..
   412b0:	11d9ce04 262714fd 00e10a30 e004260b     ......'&0....&..
   412c0:	000d90ff 2241a40b fe04231e c70bb105     ......A".#......

000412d0 <_ZN12_GLOBAL__N_1L13tensor_data11E>:
   412d0:	fffffa80 000011fa fffffdfc fffff7fe     ................

000412e0 <_ZN12_GLOBAL__N_1L17tensor_dimension0E>:
   412e0:	00000002 00000001 0000028a              ............

000412ec <_ZN12_GLOBAL__N_1L17tensor_dimension1E>:
   412ec:	00000001 00000004                       ........

000412f4 <_ZN12_GLOBAL__N_1L17tensor_dimension2E>:
   412f4:	00000001 00000004                       ........

000412fc <_ZN12_GLOBAL__N_1L17tensor_dimension3E>:
   412fc:	00000001 00000004                       ........

00041304 <_ZN12_GLOBAL__N_1L17tensor_dimension4E>:
   41304:	00000001 00000004                       ........

0004130c <_ZN12_GLOBAL__N_1L17tensor_dimension5E>:
   4130c:	00000001 00000002                       ........

00041314 <_ZN12_GLOBAL__N_1L17tensor_dimension6E>:
   41314:	00000004 00000008 00000001 00000003     ................
   41324:	0000000d                                ....

00041328 <_ZN12_GLOBAL__N_1L17tensor_dimension7E>:
   41328:	00000001 00000008                       ........

00041330 <_ZN12_GLOBAL__N_1L17tensor_dimension8E>:
   41330:	00000004 00000010 00000001 00000003     ................
   41340:	00000008                                ....

00041344 <_ZN12_GLOBAL__N_1L17tensor_dimension9E>:
   41344:	00000001 00000010                       ........

0004134c <_ZN12_GLOBAL__N_1L18tensor_dimension10E>:
   4134c:	00000002 00000004 000000d0              ............

00041358 <_ZN12_GLOBAL__N_1L18tensor_dimension11E>:
   41358:	00000001 00000004                       ........

00041360 <_ZN12_GLOBAL__N_1L18tensor_dimension12E>:
   41360:	00000004 00000001 00000001 00000032     ............2...
   41370:	0000000d                                ....

00041374 <_ZN12_GLOBAL__N_1L18tensor_dimension13E>:
   41374:	00000004 00000001 00000001 00000032     ............2...
   41384:	00000008                                ....

00041388 <_ZN12_GLOBAL__N_1L18tensor_dimension14E>:
   41388:	00000004 00000001 00000032 00000001     ........2.......
   41398:	00000008                                ....

0004139c <_ZN12_GLOBAL__N_1L18tensor_dimension15E>:
   4139c:	00000004 00000001 00000019 00000001     ................
   413ac:	00000008                                ....

000413b0 <_ZN12_GLOBAL__N_1L18tensor_dimension16E>:
   413b0:	00000004 00000001 00000001 00000019     ................
   413c0:	00000008                                ....

000413c4 <_ZN12_GLOBAL__N_1L18tensor_dimension17E>:
   413c4:	00000004 00000001 00000001 00000019     ................
   413d4:	00000010                                ....

000413d8 <_ZN12_GLOBAL__N_1L18tensor_dimension18E>:
   413d8:	00000004 00000001 00000019 00000001     ................
   413e8:	00000010                                ....

000413ec <_ZN12_GLOBAL__N_1L18tensor_dimension19E>:
   413ec:	00000004 00000001 0000000d 00000001     ................
   413fc:	00000010                                ....

00041400 <_ZN12_GLOBAL__N_1L18tensor_dimension20E>:
   41400:	00000002 00000001 000000d0              ............

0004140c <_ZN12_GLOBAL__N_1L18tensor_dimension21E>:
   4140c:	00000002 00000001 00000004              ............

00041418 <_ZN12_GLOBAL__N_1L18tensor_dimension22E>:
   41418:	00000002 00000001 00000004              ............

00041424 <_ZN12_GLOBAL__N_1L6quant0E>:
   41424:	00040a70 00040998 00000000              p...........

00041430 <_ZN12_GLOBAL__N_1L6quant6E>:
   41430:	00040ae0 000409a0 00000000              ............

0004143c <_ZN12_GLOBAL__N_1L6quant7E>:
   4143c:	00040b04 000409c4 00000000              ............

00041448 <_ZN12_GLOBAL__N_1L6quant8E>:
   41448:	00040b28 000409e8 00000000              (...........

00041454 <_ZN12_GLOBAL__N_1L6quant9E>:
   41454:	00040b6c 00040a2c 00000000              l...,.......

00041460 <_ZN12_GLOBAL__N_1L7inputs0E>:
   41460:	00000002 00000000 00000001              ............

0004146c <_ZN12_GLOBAL__N_1L7inputs1E>:
   4146c:	00000003 0000000c 00000006 00000007     ................

0004147c <_ZN12_GLOBAL__N_1L7inputs2E>:
   4147c:	00000002 0000000d 00000002              ............

00041488 <_ZN12_GLOBAL__N_1L7inputs3E>:
   41488:	00000001 0000000e                       ........

00041490 <_ZN12_GLOBAL__N_1L7inputs4E>:
   41490:	00000002 0000000f 00000003              ............

0004149c <_ZN12_GLOBAL__N_1L7inputs5E>:
   4149c:	00000003 00000010 00000008 00000009     ................

000414ac <_ZN12_GLOBAL__N_1L7inputs6E>:
   414ac:	00000002 00000011 00000004              ............

000414b8 <_ZN12_GLOBAL__N_1L7inputs7E>:
   414b8:	00000001 00000012                       ........

000414c0 <_ZN12_GLOBAL__N_1L7inputs8E>:
   414c0:	00000002 00000013 00000005              ............

000414cc <_ZN12_GLOBAL__N_1L7inputs9E>:
   414cc:	00000003 00000014 0000000a 0000000b     ................

000414dc <_ZN12_GLOBAL__N_1L7opdata0E>:
	...

00041500 <_ZN12_GLOBAL__N_1L7opdata1E>:
   41500:	00000001 00000001 00000001 00000001     ................
   41510:	00000001 00000001                       ........

00041518 <_ZN12_GLOBAL__N_1L7opdata2E>:
	...

0004153c <_ZN12_GLOBAL__N_1L7opdata3E>:
   4153c:	00000001 00000001 00000002 00000001     ................
   4154c:	00000002 00000000 00000000 00000000     ................
	...

00041564 <_ZN12_GLOBAL__N_1L7opdata4E>:
	...

00041588 <_ZN12_GLOBAL__N_1L7opdata5E>:
   41588:	00000001 00000001 00000001 00000001     ................
   41598:	00000001 00000001                       ........

000415a0 <_ZN12_GLOBAL__N_1L7opdata6E>:
	...

000415c4 <_ZN12_GLOBAL__N_1L7opdata7E>:
   415c4:	00000001 00000001 00000002 00000001     ................
   415d4:	00000002 00000000 00000000 00000000     ................
	...

000415ec <_ZN12_GLOBAL__N_1L7opdata8E>:
	...

00041610 <_ZN12_GLOBAL__N_1L7opdata9E>:
   41610:	00000000                                ....

00041614 <_ZN12_GLOBAL__N_1L7quant10E>:
   41614:	00040f20 00040a78 00000000               ...x.......

00041620 <_ZN12_GLOBAL__N_1L7quant11E>:
   41620:	00040f28 00040a80 00000000              (...........

0004162c <_ZN12_GLOBAL__N_1L7quant12E>:
   4162c:	00040f30 00040a88 00000000              0...........

00041638 <_ZN12_GLOBAL__N_1L7quant13E>:
   41638:	00040f38 00040a90 00000000              8...........

00041644 <_ZN12_GLOBAL__N_1L7quant14E>:
   41644:	00040f40 00040a98 00000000              @...........

00041650 <_ZN12_GLOBAL__N_1L7quant15E>:
   41650:	00040f48 00040aa0 00000000              H...........

0004165c <_ZN12_GLOBAL__N_1L7quant16E>:
   4165c:	00040f50 00040aa8 00000000              P...........

00041668 <_ZN12_GLOBAL__N_1L7quant17E>:
   41668:	00040f58 00040ab0 00000000              X...........

00041674 <_ZN12_GLOBAL__N_1L7quant18E>:
   41674:	00040f60 00040ab8 00000000              `...........

00041680 <_ZN12_GLOBAL__N_1L7quant19E>:
   41680:	00040f68 00040ac0 00000000              h...........

0004168c <_ZN12_GLOBAL__N_1L7quant20E>:
   4168c:	00040f70 00040ac8 00000000              p...........

00041698 <_ZN12_GLOBAL__N_1L7quant21E>:
   41698:	00040f78 00040ad0 00000000              x...........

000416a4 <_ZN12_GLOBAL__N_1L7quant22E>:
   416a4:	00040f80 00040ad8 00000000              ............

000416b0 <_ZN12_GLOBAL__N_1L8inputs10E>:
   416b0:	00000001 00000015                       ........

000416b8 <_ZN12_GLOBAL__N_1L8nodeDataE>:
   416b8:	00041460 0004176c 000414dc 00000000     `...l...........
   416c8:	0004146c 00041774 00041500 00000001     l...t...........
   416d8:	0004147c 0004177c 00041518 00000000     |...|...........
   416e8:	00041488 00041784 0004153c 00000002     ........<.......
   416f8:	00041490 0004178c 00041564 00000000     ........d.......
   41708:	0004149c 00041794 00041588 00000001     ................
   41718:	000414ac 0004179c 000415a0 00000000     ................
   41728:	000414b8 000417a4 000415c4 00000002     ................
   41738:	000414c0 000417ac 000415ec 00000000     ................
   41748:	000414cc 000417b4 00041610 00000003     ................
   41758:	000416b0 000417bc 00041768 00000004     ........h.......

00041768 <_ZN12_GLOBAL__N_1L8opdata10E>:
   41768:	3f800000                                ...?

0004176c <_ZN12_GLOBAL__N_1L8outputs0E>:
   4176c:	00000001 0000000c                       ........

00041774 <_ZN12_GLOBAL__N_1L8outputs1E>:
   41774:	00000001 0000000d                       ........

0004177c <_ZN12_GLOBAL__N_1L8outputs2E>:
   4177c:	00000001 0000000e                       ........

00041784 <_ZN12_GLOBAL__N_1L8outputs3E>:
   41784:	00000001 0000000f                       ........

0004178c <_ZN12_GLOBAL__N_1L8outputs4E>:
   4178c:	00000001 00000010                       ........

00041794 <_ZN12_GLOBAL__N_1L8outputs5E>:
   41794:	00000001 00000011                       ........

0004179c <_ZN12_GLOBAL__N_1L8outputs6E>:
   4179c:	00000001 00000012                       ........

000417a4 <_ZN12_GLOBAL__N_1L8outputs7E>:
   417a4:	00000001 00000013                       ........

000417ac <_ZN12_GLOBAL__N_1L8outputs8E>:
   417ac:	00000001 00000014                       ........

000417b4 <_ZN12_GLOBAL__N_1L8outputs9E>:
   417b4:	00000001 00000015                       ........

000417bc <_ZN12_GLOBAL__N_1L9outputs10E>:
   417bc:	00000001 00000016 20544646 676e656c     ........FFT leng
   417cc:	6d206874 20747375 65206562 0a6e6576     th must be even.
   417dc:	00000000 7373696b 74666620 61737520     ....kiss fft usa
   417ec:	65206567 726f7272 6d69203a 706f7270     ge error: improp
   417fc:	61207265 636f6c6c 0000000a              er alloc....

00041808 <npio2_hw>:
   41808:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
   41818:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
   41828:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
   41838:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
   41848:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
   41858:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
   41868:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
   41878:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

00041888 <two_over_pi>:
   41888:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
   41898:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
   418a8:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
   418b8:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
   418c8:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
   418d8:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
   418e8:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
   418f8:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
   41908:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
   41918:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
   41928:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
   41938:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
   41948:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
   41958:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
   41968:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
   41978:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
   41988:	0060e27b 00c08c6b                       {.`.k...

00041990 <halF>:
   41990:	3f000000 bf000000                       ...?....

00041998 <ln2HI>:
   41998:	3f317180 bf317180                       .q1?.q1.

000419a0 <ln2LO>:
   419a0:	3717f7d1 b717f7d1                       ...7....

000419a8 <npio2_hw>:
   419a8:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
   419b8:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
   419c8:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
   419d8:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
   419e8:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
   419f8:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
   41a08:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
   41a18:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

00041a28 <two_over_pi>:
   41a28:	000000a2 000000f9 00000083 0000006e     ............n...
   41a38:	0000004e 00000044 00000015 00000029     N...D.......)...
   41a48:	000000fc 00000027 00000057 000000d1     ....'...W.......
   41a58:	000000f5 00000034 000000dd 000000c0     ....4...........
   41a68:	000000db 00000062 00000095 00000099     ....b...........
   41a78:	0000003c 00000043 00000090 00000041     <...C.......A...
   41a88:	000000fe 00000051 00000063 000000ab     ....Q...c.......
   41a98:	000000de 000000bb 000000c5 00000061     ............a...
   41aa8:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
   41ab8:	00000042 0000004d 000000d2 000000e0     B...M...........
   41ac8:	00000006 00000049 0000002e 000000ea     ....I...........
   41ad8:	00000009 000000d1 00000092 0000001c     ................
   41ae8:	000000fe 0000001d 000000eb 0000001c     ................
   41af8:	000000b1 00000029 000000a7 0000003e     ....).......>...
   41b08:	000000e8 00000082 00000035 000000f5     ........5.......
   41b18:	0000002e 000000bb 00000044 00000084     ........D.......
   41b28:	000000e9 0000009c 00000070 00000026     ........p...&...
   41b38:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
   41b48:	00000039 00000091 000000d6 00000039     9...........9...
   41b58:	00000083 00000053 00000039 000000f4     ....S...9.......
   41b68:	0000009c 00000084 0000005f 0000008b     ........_.......
   41b78:	000000bd 000000f9 00000028 0000003b     ........(...;...
   41b88:	0000001f 000000f8 00000097 000000ff     ................
   41b98:	000000de 00000005 00000098 0000000f     ................
   41ba8:	000000ef 0000002f 00000011 0000008b     ..../...........
   41bb8:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
   41bc8:	0000006d 00000036 0000007e 000000cf     m...6...~.......
   41bd8:	00000027 000000cb 00000009 000000b7     '...............
   41be8:	0000004f 00000046 0000003f 00000066     O...F...?...f...
   41bf8:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
   41c08:	00000075 00000027 000000ba 000000c7     u...'...........
   41c18:	000000eb 000000e5 000000f1 0000007b     ............{...
   41c28:	0000003d 00000007 00000039 000000f7     =.......9.......
   41c38:	0000008a 00000052 00000092 000000ea     ....R...........
   41c48:	0000006b 000000fb 0000005f 000000b1     k......._.......
   41c58:	0000001f 0000008d 0000005d 00000008     ........].......
   41c68:	00000056 00000003 00000030 00000046     V.......0...F...
   41c78:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
   41c88:	000000f0 000000cf 000000bc 00000020     ............ ...
   41c98:	0000009a 000000f4 00000036 0000001d     ........6.......
   41ca8:	000000a9 000000e3 00000091 00000061     ............a...
   41cb8:	0000005e 000000e6 0000001b 00000008     ^...............
   41cc8:	00000065 00000099 00000085 0000005f     e..........._...
   41cd8:	00000014 000000a0 00000068 00000040     ........h...@...
   41ce8:	0000008d 000000ff 000000d8 00000080     ................
   41cf8:	0000004d 00000073 00000027 00000031     M...s...'...1...
   41d08:	00000006 00000006 00000015 00000056     ............V...
   41d18:	000000ca 00000073 000000a8 000000c9     ....s...........
   41d28:	00000060 000000e2 0000007b 000000c0     `.......{.......
   41d38:	0000008c 0000006b                       ....k...

00041d40 <PIo2>:
   41d40:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
   41d50:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
   41d60:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
   41d70:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

00041d80 <init_jk>:
   41d80:	00000002 00000003 00000004 00000006     ................

00041d90 <PIo2>:
   41d90:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
   41da0:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
   41db0:	1fc40000 1bc60000 17440000              ..........D.

00041dbc <init_jk>:
   41dbc:	00000004 00000007 00000009 7566202c     ............, fu
   41dcc:	6974636e 203a6e6f 00000000 65737361     nction: ....asse
   41ddc:	6f697472 2522206e 66202273 656c6961     rtion "%s" faile
   41dec:	66203a64 20656c69 22732522 696c202c     d: file "%s", li
   41dfc:	2520656e 25732564 00000a73              ne %d%s%s...

00041e08 <_global_impure_ptr>:
   41e08:	100040c8 33323130 37363534 42413938     .@..0123456789AB
   41e18:	46454443 00000000 33323130 37363534     CDEF....01234567
   41e28:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   41e38:	0000296c                                l)..

00041e3c <blanks.1>:
   41e3c:	20202020 20202020 20202020 20202020                     

00041e4c <zeroes.0>:
   41e4c:	30303030 30303030 30303030 30303030     0000000000000000
   41e5c:	00000043 49534f50 00000058              C...POSIX...

00041e68 <_ctype_>:
   41e68:	20202000 20202020 28282020 20282828     .         ((((( 
   41e78:	20202020 20202020 20202020 20202020                     
   41e88:	10108820 10101010 10101010 10101010      ...............
   41e98:	04040410 04040404 10040404 10101010     ................
   41ea8:	41411010 41414141 01010101 01010101     ..AAAAAA........
   41eb8:	01010101 01010101 01010101 10101010     ................
   41ec8:	42421010 42424242 02020202 02020202     ..BBBBBB........
   41ed8:	02020202 02020202 02020202 10101010     ................
   41ee8:	00000020 00000000 00000000 00000000      ...............
	...

00041f6c <ns_button_V1_0_0>:
   41f6c:	00ca0003 00000001 00000000              ............

00041f78 <ns_button_current_version>:
   41f78:	00ca0003 00000001 00000000              ............

00041f84 <ns_button_oldest_supported_version>:
   41f84:	00ca0003 00000000 00000001 4f525245     ............ERRO
   41f94:	65542052 6f43706d 696e6920 61662074     R TempCo init fa
   41fa4:	64656c69 0000000a                       iled....

00041fac <ns_development_default>:
   41fac:	00041fbc 00010102 01010101 00010000     ................

00041fbc <ns_power_V1_0_0>:
   41fbc:	00ca0007 00000001 00000000              ............

00041fc8 <ns_power_current_version>:
   41fc8:	00ca0007 00000001 00000000              ............

00041fd4 <ns_power_oldest_supported_version>:
   41fd4:	00ca0007 00000000 00000001 706d6574     ............temp
   41fe4:	695f6f63 2874696e 72452029 20726f72     co_init() Error 
   41ff4:	6572202d 76726573 6f697461 666f206e     - reservation of
   42004:	65687420 43444120 736e6920 636e6174      the ADC instanc
   42014:	61662065 64656c69 00000a2e 706d6574     e failed....temp
   42024:	695f6f63 2874696e 72452029 20726f72     co_init() Error 
   42034:	4441202d 6f702043 20726577 66206e6f     - ADC power on f
   42044:	656c6961 000a2e64 706d6574 695f6f63     ailed...tempco_i
   42054:	2874696e 72452029 20726f72 6f63202d     nit() Error - co
   42064:	6769666e 6e697275 44412067 61662043     nfiguring ADC fa
   42074:	64656c69 00000a2e 4f525245 6d612052     iled....ERROR am
   42084:	6c61685f 7277705f 6c727463 6d65745f     _hal_pwrctrl_tem
   42094:	5f6f6370 74696e69 72202928 72757465     pco_init() retur
   420a4:	2064656e 0a2e6425 00000000 6f727245     ned %d......Erro
   420b4:	202d2072 67697274 69726567 7420676e     r - triggering t
   420c4:	41206568 44414455 61662043 64656c69     he AUDADC failed
   420d4:	00000a2e                                ....

000420d8 <ns_audio_V2_0_0>:
   420d8:	00ca0001 00000002 00000000              ............

000420e4 <ns_audio_current_version>:
   420e4:	00ca0001 00000002 00000000              ............

000420f0 <ns_audio_oldest_supported_version>:
   420f0:	00ca0001 00000000 00000001 636f6c43     ............Cloc
   42100:	6f6e206b 75732074 726f7070 20646574     k not supported 
   42110:	50207962 000a4d44                       by PDM..

00042118 <g_ePdmInterrupts>:
   42118:	33323130 6f727245 202d2072 666e6f63     0123Error - conf
   42128:	72756769 20676e69 41445541 53204344     iguring AUDADC S
   42138:	20746f6c 61662030 64656c69 00000a2e     lot 0 failed....
   42148:	6f727245 202d2072 666e6f63 72756769     Error - configur
   42158:	20676e69 41445541 53204344 20746f6c     ing AUDADC Slot 
   42168:	61662031 64656c69 00000a2e 6f727245     1 failed....Erro
   42178:	202d2072 666e6f63 72756769 20676e69     r - configuring 
   42188:	41445541 53204344 20746f6c 61662032     AUDADC Slot 2 fa
   42198:	64656c69 00000a2e 6f727245 202d2072     iled....Error - 
   421a8:	666e6f63 72756769 20676e69 41445541     configuring AUDA
   421b8:	53204344 20746f6c 61662033 64656c69     DC Slot 3 failed
   421c8:	00000a2e 6f727245 202d2072 65736572     ....Error - rese
   421d8:	74617672 206e6f69 7420666f 41206568     rvation of the A
   421e8:	44414455 6e692043 6e617473 66206563     UDADC instance f
   421f8:	656c6961 52452064 64252052 00000a2e     ailed ERR %d....
   42208:	6f727245 202d2072 41445541 70204344     Error - AUDADC p
   42218:	7265776f 206e6f20 6c696166 0a2e6465     ower on failed..
   42228:	00000000 6f727245 202d2072 666e6f63     ....Error - conf
   42238:	72756769 20676e69 41445541 66204344     iguring AUDADC f
   42248:	656c6961 000a2e64 6f727245 202d2072     ailed...Error - 
   42258:	62616e65 676e696c 44554120 20434441     enabling AUDADC 
   42268:	6c696166 0a2e6465 00000000 6f727245     failed......Erro
   42278:	202d2072 666e6f63 72756769 20676e69     r - configuring 
   42288:	41445541 44204344 6620414d 656c6961     AUDADC DMA faile
   42298:	000a2e64 6f727245 65722072 6e696461     d...Error readin
   422a8:	55412067 43444144 746e6920 75727265     g AUDADC interru
   422b8:	73207470 75746174 00000a73 6f727245     pt status...Erro
   422c8:	6c632072 69726165 4120676e 44414455     r clearing AUDAD
   422d8:	6e692043 72726574 20747075 74617473     C interrupt stat
   422e8:	000a7375 54414857 656c6320 6e697261     us..WHAT clearin
   422f8:	55412067 43444144 746e6920 75727265     g AUDADC interru
   42308:	73207470 75746174 00000a73 6c696146     pt status...Fail
   42318:	74206465 6f63206f 6769666e 20657275     ed to configure 
   42328:	454d4954 2c642552 74657220 206e7275     TIMER%d, return 
   42338:	756c6176 64253d65 00000a0d              value=%d....

00042344 <ns_timer_V1_0_0>:
   42344:	00ca0002 00000001 00000000              ............

00042350 <ns_timer_current_version>:
   42350:	00ca0002 00000001 00000000              ............

0004235c <ns_timer_oldest_supported_version>:
   4235c:	00ca0002 00000000 00000001              ............

00042368 <am_hal_cachectrl_defaults>:
   42368:	0000030e                                ....

0004236c <am_hal_daxi_defaults>:
   4236c:	0f020100 00000001                       ........

00042374 <am_hal_gpio_pincfg_disabled>:
   42374:	00000003                                ....

00042378 <am_hal_gpio_pincfg_input>:
   42378:	00000093                                ....

0004237c <g_ui32DSpintbl>:
   4237c:	8fc007e0 e3fbffff 01ffffff 00000000     ................

0004238c <am_hal_pwrctrl_peripheral_control>:
   4238c:	40021004 00000001 40021008 00000001     ...@.......@....
   4239c:	40021004 00000002 40021008 0000001e     ...@.......@....
   423ac:	40021004 00000004 40021008 0000001e     ...@.......@....
   423bc:	40021004 00000008 40021008 0000001e     ...@.......@....
   423cc:	40021004 00000010 40021008 0000001e     ...@.......@....
   423dc:	40021004 00000020 40021008 000001e0     ...@ ......@....
   423ec:	40021004 00000040 40021008 000001e0     ...@@......@....
   423fc:	40021004 00000080 40021008 000001e0     ...@.......@....
   4240c:	40021004 00000100 40021008 000001e0     ...@.......@....
   4241c:	40021004 00000200 40021008 00001e00     ...@.......@....
   4242c:	40021004 00000400 40021008 00001e00     ...@.......@....
   4243c:	40021004 00000800 40021008 00001e00     ...@.......@....
   4244c:	40021004 00001000 40021008 00001e00     ...@.......@....
   4245c:	40021004 00002000 40021008 00002000     ...@. .....@. ..
   4246c:	40021004 00004000 40021008 0001c000     ...@.@.....@....
   4247c:	40021004 00008000 40021008 0001c000     ...@.......@....
   4248c:	40021004 00010000 40021008 0001c000     ...@.......@....
   4249c:	40021004 00020000 40021008 00020000     ...@.......@....
   424ac:	40021004 00040000 40021008 00040000     ...@.......@....
   424bc:	40021004 00080000 40021008 00080000     ...@.......@....
   424cc:	40021004 00100000 40021008 00100000     ...@.......@....
   424dc:	40021004 00200000 40021008 00200000     ...@.. ....@.. .
   424ec:	40021004 00400000 40021008 00400000     ...@..@....@..@.
   424fc:	40021004 00800000 40021008 00800000     ...@.......@....
   4250c:	40021004 01000000 40021008 01000000     ...@.......@....
   4251c:	4002100c 00000001 40021010 000000ff     ...@.......@....
   4252c:	4002100c 00000002 40021010 000000ff     ...@.......@....
   4253c:	4002100c 00000004 40021010 000000ff     ...@.......@....
   4254c:	4002100c 00000008 40021010 000000ff     ...@.......@....
   4255c:	4002100c 00000010 40021010 000000ff     ...@.......@....
   4256c:	4002100c 00000020 40021010 000000ff     ...@ ......@....
   4257c:	4002100c 00000040 40021010 000000ff     ...@@......@....
   4258c:	4002100c 00000080 40021010 000000ff     ...@.......@....
   4259c:	4002100c 00000400 40021010 00000400     ...@.......@....

000425ac <g_DefaultMcuMemCfg>:
   425ac:	07070102 00000001                       ........

000425b4 <g_DefaultSRAMCfg>:
   425b4:	00000003 00000300                       ........

000425bc <g_VDDC_trimstbl>:
   425bc:	3c003cec 7f7ff05a 00000000              .<.<Z.......

000425c8 <g_VDDFLP_trimstbl>:
   425c8:	f500f5ec 08fefffe fd1108fe 1afc1a11     ................
   425d8:	2c23fb23 f9352cfa 3cf83c35 7f7ff75a     #.#,.,5.5<.<Z...
   425e8:	00000000                                ....

000425ec <g_VDDF_trimstbl>:
   425ec:	f500f5ec 08fefffe fd1108fe 1afc1a11     ................
   425fc:	2c23fb23 f9352cfa 3cf83c35 7f7ff75a     #.#,.,5.5<.<Z...
   4260c:	00000000                                ....

00042610 <g_memlpldo_trimstbl>:
   42610:	f208f2ee faf607f6 05fefa06 020402fe     ................
   42620:	0a060306 010e0a02 1200120e 1a16ff16     ................
   42630:	fd2a1afe 3cfc3c2a 7f7ffb5a 00000000     ..*.*<.<Z.......

00042640 <g_am_hal_bootrom_helper>:
   42640:	0800004d 08000051 08000055 08000059     M...Q...U...Y...
   42650:	0800006d 08000075 08000079 08000081     m...u...y.......
   42660:	08000099 0800009d                       ........

00042668 <g_sBspUartConfig>:
   42668:	0001c200 00000203 02020000              ............

00042674 <armBitRevIndexTable128>:
   42674:	02000008 00400010 02400018 00800020     ......@...@. ...
   42684:	02800028 00c00030 02c00038 01000040     (...0...8...@...
   42694:	03000048 01400050 03400058 01800060     H...P.@.X.@.`...
   426a4:	03800068 01c00070 03c00078 02000080     h...p...x.......
   426b4:	02080088 03000090 02480098 020800a0     ..........H.....
   426c4:	028800a8 00c800b0 02c800b8 010800c0     ................
   426d4:	030800c8 014800d0 034800d8 018800e0     ......H...H.....
   426e4:	038800e8 01c800f0 03c800f8 02100108     ................
   426f4:	01400110 02500118 03000120 02900128     ..@...P. ...(...
   42704:	01480130 02d00138 03100148 03500158     0.H.8...H...X.P.
   42714:	01900160 03900168 01d00170 03d00178     `...h...p...x...
   42724:	02400180 02180188 03400190 02580198     ..@.......@...X.
   42734:	024801a0 029801a8 034801b0 02d801b8     ..H.......H.....
   42744:	025001c0 031801c8 035001d0 035801d8     ..P.......P...X.
   42754:	025801e0 039801e8 035801f0 03d801f8     ..X.......X.....
   42764:	02200208 02400210 02600218 02a00228     .. ...@...`.(...
   42774:	02600230 02e00238 03000240 03200248     0.`.8...@...H. .
   42784:	03400250 03600258 03200260 03a00268     P.@.X.`.`. .h...
   42794:	03600270 03e00278 02a00288 03800290     p.`.x...........
   427a4:	03a00298 038802b0 02e802b8 038002c0     ................
   427b4:	032802c8 039002d0 036802d8 03a002e0     ..(.......h.....
   427c4:	03a802e8 039802f0 03e802f8 03200308     .............. .
   427d4:	03400310 03600318 03880328 03600330     ..@...`.(...0.`.
   427e4:	03980338 03600348 03700358 03b00368     8...H.`.X.p.h...
   427f4:	03f00378 03a00388 03c00390 03e00398     x...............
   42804:	03c803b0 03e803b8 03e003c8 03f003d8     ................

00042814 <armBitRevIndexTable16>:
   42814:	00400008 00480018 00400010 00500028     ..@...H...@.(.P.
   42824:	00400020 00580038 00480030 00680058      .@.8.X.0.H.X.h.
   42834:	00600048 00700068                       H.`.h.p.

0004283c <twiddleCoef_128>:
   4283c:	3f800000 00000000 3f7fb10f 3d48fb2f     ...?.......?/.H=
   4284c:	3f7ec46d 3dc8bd36 3f7d3aac 3e164083     m.~?6..=.:}?.@.>
   4285c:	3f7b14be 3e47c5c2 3f7853f8 3e78cfcc     ..{?..G>.Sx?..x>
   4286c:	3f74fa0b 3e94a031 3f710908 3eac7cd4     ..t?1..>..q?.|.>
   4287c:	3f6c835e 3ec3ef15 3f676bd8 3edae880     ^.l?...>.kg?...>
   4288c:	3f61c598 3ef15aea 3f5b941a 3f039c3d     ..a?.Z.>..[?=..?
   4289c:	3f54db31 3f0e39da 3f4d9f02 3f187fc0     1.T?.9.?..M?...?
   428ac:	3f45e403 3f226799 3f3daef9 3f2beb4a     ..E?.g"?..=?J.+?
   428bc:	3f3504f3 3f3504f3 3f2beb4a 3f3daef9     ..5?..5?J.+?..=?
   428cc:	3f226799 3f45e403 3f187fc0 3f4d9f02     .g"?..E?...?..M?
   428dc:	3f0e39da 3f54db31 3f039c3d 3f5b941a     .9.?1.T?=..?..[?
   428ec:	3ef15aea 3f61c598 3edae880 3f676bd8     .Z.>..a?...>.kg?
   428fc:	3ec3ef15 3f6c835e 3eac7cd4 3f710908     ...>^.l?.|.>..q?
   4290c:	3e94a031 3f74fa0b 3e78cfcc 3f7853f8     1..>..t?..x>.Sx?
   4291c:	3e47c5c2 3f7b14be 3e164083 3f7d3aac     ..G>..{?.@.>.:}?
   4292c:	3dc8bd36 3f7ec46d 3d48fb2f 3f7fb10f     6..=m.~?/.H=...?
   4293c:	00000000 3f800000 bd48fb2f 3f7fb10f     .......?/.H....?
   4294c:	bdc8bd36 3f7ec46d be164083 3f7d3aac     6...m.~?.@...:}?
   4295c:	be47c5c2 3f7b14be be78cfcc 3f7853f8     ..G...{?..x..Sx?
   4296c:	be94a031 3f74fa0b beac7cd4 3f710908     1.....t?.|....q?
   4297c:	bec3ef15 3f6c835e bedae880 3f676bd8     ....^.l?.....kg?
   4298c:	bef15aea 3f61c598 bf039c3d 3f5b941a     .Z....a?=.....[?
   4299c:	bf0e39da 3f54db31 bf187fc0 3f4d9f02     .9..1.T?......M?
   429ac:	bf226799 3f45e403 bf2beb4a 3f3daef9     .g"...E?J.+...=?
   429bc:	bf3504f3 3f3504f3 bf3daef9 3f2beb4a     ..5...5?..=.J.+?
   429cc:	bf45e403 3f226799 bf4d9f02 3f187fc0     ..E..g"?..M....?
   429dc:	bf54db31 3f0e39da bf5b941a 3f039c3d     1.T..9.?..[.=..?
   429ec:	bf61c598 3ef15aea bf676bd8 3edae880     ..a..Z.>.kg....>
   429fc:	bf6c835e 3ec3ef15 bf710908 3eac7cd4     ^.l....>..q..|.>
   42a0c:	bf74fa0b 3e94a031 bf7853f8 3e78cfcc     ..t.1..>.Sx...x>
   42a1c:	bf7b14be 3e47c5c2 bf7d3aac 3e164083     ..{...G>.:}..@.>
   42a2c:	bf7ec46d 3dc8bd36 bf7fb10f 3d48fb2f     m.~.6..=..../.H=
   42a3c:	bf800000 00000000 bf7fb10f bd48fb2f     ............/.H.
   42a4c:	bf7ec46d bdc8bd36 bf7d3aac be164083     m.~.6....:}..@..
   42a5c:	bf7b14be be47c5c2 bf7853f8 be78cfcc     ..{...G..Sx...x.
   42a6c:	bf74fa0b be94a031 bf710908 beac7cd4     ..t.1.....q..|..
   42a7c:	bf6c835e bec3ef15 bf676bd8 bedae880     ^.l......kg.....
   42a8c:	bf61c598 bef15aea bf5b941a bf039c3d     ..a..Z....[.=...
   42a9c:	bf54db31 bf0e39da bf4d9f02 bf187fc0     1.T..9....M.....
   42aac:	bf45e403 bf226799 bf3daef9 bf2beb4a     ..E..g"...=.J.+.
   42abc:	bf3504f3 bf3504f3 bf2beb4a bf3daef9     ..5...5.J.+...=.
   42acc:	bf226799 bf45e403 bf187fc0 bf4d9f02     .g"...E.......M.
   42adc:	bf0e39da bf54db31 bf039c3d bf5b941a     .9..1.T.=.....[.
   42aec:	bef15aea bf61c598 bedae880 bf676bd8     .Z....a......kg.
   42afc:	bec3ef15 bf6c835e beac7cd4 bf710908     ....^.l..|....q.
   42b0c:	be94a031 bf74fa0b be78cfcc bf7853f8     1.....t...x..Sx.
   42b1c:	be47c5c2 bf7b14be be164083 bf7d3aac     ..G...{..@...:}.
   42b2c:	bdc8bd36 bf7ec46d bd48fb2f bf7fb10f     6...m.~./.H.....
   42b3c:	80000000 bf800000 3d48fb2f bf7fb10f     ......../.H=....
   42b4c:	3dc8bd36 bf7ec46d 3e164083 bf7d3aac     6..=m.~..@.>.:}.
   42b5c:	3e47c5c2 bf7b14be 3e78cfcc bf7853f8     ..G>..{...x>.Sx.
   42b6c:	3e94a031 bf74fa0b 3eac7cd4 bf710908     1..>..t..|.>..q.
   42b7c:	3ec3ef15 bf6c835e 3edae880 bf676bd8     ...>^.l....>.kg.
   42b8c:	3ef15aea bf61c598 3f039c3d bf5b941a     .Z.>..a.=..?..[.
   42b9c:	3f0e39da bf54db31 3f187fc0 bf4d9f02     .9.?1.T....?..M.
   42bac:	3f226799 bf45e403 3f2beb4a bf3daef9     .g"?..E.J.+?..=.
   42bbc:	3f3504f3 bf3504f3 3f3daef9 bf2beb4a     ..5?..5...=?J.+.
   42bcc:	3f45e403 bf226799 3f4d9f02 bf187fc0     ..E?.g"...M?....
   42bdc:	3f54db31 bf0e39da 3f5b941a bf039c3d     1.T?.9....[?=...
   42bec:	3f61c598 bef15aea 3f676bd8 bedae880     ..a?.Z...kg?....
   42bfc:	3f6c835e bec3ef15 3f710908 beac7cd4     ^.l?......q?.|..
   42c0c:	3f74fa0b be94a031 3f7853f8 be78cfcc     ..t?1....Sx?..x.
   42c1c:	3f7b14be be47c5c2 3f7d3aac be164083     ..{?..G..:}?.@..
   42c2c:	3f7ec46d bdc8bd36 3f7fb10f bd48fb2f     m.~?6......?/.H.

00042c3c <twiddleCoef_16>:
   42c3c:	3f800000 00000000 3f6c835e 3ec3ef15     ...?....^.l?...>
   42c4c:	3f3504f3 3f3504f3 3ec3ef15 3f6c835e     ..5?..5?...>^.l?
   42c5c:	00000000 3f800000 bec3ef15 3f6c835e     .......?....^.l?
   42c6c:	bf3504f3 3f3504f3 bf6c835e 3ec3ef15     ..5...5?^.l....>
   42c7c:	bf800000 00000000 bf6c835e bec3ef15     ........^.l.....
   42c8c:	bf3504f3 bf3504f3 bec3ef15 bf6c835e     ..5...5.....^.l.
   42c9c:	80000000 bf800000 3ec3ef15 bf6c835e     ...........>^.l.
   42cac:	3f3504f3 bf3504f3 3f6c835e bec3ef15     ..5?..5.^.l?....

00042cbc <twiddleCoef_rfft_256>:
   42cbc:	00000000 3f800000 3cc90ab0 3f7fec43     .......?...<C..?
   42ccc:	3d48fb2f 3f7fb10f 3d96a905 3f7f4e6d     /.H=...?...=mN.?
   42cdc:	3dc8bd36 3f7ec46d 3dfab273 3f7e1324     6..=m.~?s..=$.~?
   42cec:	3e164083 3f7d3aac 3e2f10a2 3f7c3b28     .@.>.:}?../>(;|?
   42cfc:	3e47c5c2 3f7b14be 3e605c13 3f79c79d     ..G>..{?.\`>..y?
   42d0c:	3e78cfcc 3f7853f8 3e888e93 3f76ba07     ..x>.Sx?...>..v?
   42d1c:	3e94a031 3f74fa0b 3ea09ae5 3f731447     1..>..t?...>G.s?
   42d2c:	3eac7cd4 3f710908 3eb8442a 3f6ed89e     .|.>..q?*D.>..n?
   42d3c:	3ec3ef15 3f6c835e 3ecf7bca 3f6a09a7     ...>^.l?.{.>..j?
   42d4c:	3edae880 3f676bd8 3ee63375 3f64aa59     ...>.kg?u3.>Y.d?
   42d5c:	3ef15aea 3f61c598 3efc5d27 3f5ebe05     .Z.>..a?'].>..^?
   42d6c:	3f039c3d 3f5b941a 3f08f59b 3f584853     =..?..[?...?SHX?
   42d7c:	3f0e39da 3f54db31 3f13682a 3f514d3d     .9.?1.T?*h.?=MQ?
   42d8c:	3f187fc0 3f4d9f02 3f1d7fd1 3f49d112     ...?..M?...?..I?
   42d9c:	3f226799 3f45e403 3f273656 3f41d870     .g"?..E?V6'?p.A?
   42dac:	3f2beb4a 3f3daef9 3f3085bb 3f396842     J.+?..=?..0?Bh9?
   42dbc:	3f3504f3 3f3504f3 3f396842 3f3085bb     ..5?..5?Bh9?..0?
   42dcc:	3f3daef9 3f2beb4a 3f41d870 3f273656     ..=?J.+?p.A?V6'?
   42ddc:	3f45e403 3f226799 3f49d112 3f1d7fd1     ..E?.g"?..I?...?
   42dec:	3f4d9f02 3f187fc0 3f514d3d 3f13682a     ..M?...?=MQ?*h.?
   42dfc:	3f54db31 3f0e39da 3f584853 3f08f59b     1.T?.9.?SHX?...?
   42e0c:	3f5b941a 3f039c3d 3f5ebe05 3efc5d27     ..[?=..?..^?'].>
   42e1c:	3f61c598 3ef15aea 3f64aa59 3ee63375     ..a?.Z.>Y.d?u3.>
   42e2c:	3f676bd8 3edae880 3f6a09a7 3ecf7bca     .kg?...>..j?.{.>
   42e3c:	3f6c835e 3ec3ef15 3f6ed89e 3eb8442a     ^.l?...>..n?*D.>
   42e4c:	3f710908 3eac7cd4 3f731447 3ea09ae5     ..q?.|.>G.s?...>
   42e5c:	3f74fa0b 3e94a031 3f76ba07 3e888e93     ..t?1..>..v?...>
   42e6c:	3f7853f8 3e78cfcc 3f79c79d 3e605c13     .Sx?..x>..y?.\`>
   42e7c:	3f7b14be 3e47c5c2 3f7c3b28 3e2f10a2     ..{?..G>(;|?../>
   42e8c:	3f7d3aac 3e164083 3f7e1324 3dfab273     .:}?.@.>$.~?s..=
   42e9c:	3f7ec46d 3dc8bd36 3f7f4e6d 3d96a905     m.~?6..=mN.?...=
   42eac:	3f7fb10f 3d48fb2f 3f7fec43 3cc90ab0     ...?/.H=C..?...<
   42ebc:	3f800000 00000000 3f7fec43 bcc90ab0     ...?....C..?....
   42ecc:	3f7fb10f bd48fb2f 3f7f4e6d bd96a905     ...?/.H.mN.?....
   42edc:	3f7ec46d bdc8bd36 3f7e1324 bdfab273     m.~?6...$.~?s...
   42eec:	3f7d3aac be164083 3f7c3b28 be2f10a2     .:}?.@..(;|?../.
   42efc:	3f7b14be be47c5c2 3f79c79d be605c13     ..{?..G...y?.\`.
   42f0c:	3f7853f8 be78cfcc 3f76ba07 be888e93     .Sx?..x...v?....
   42f1c:	3f74fa0b be94a031 3f731447 bea09ae5     ..t?1...G.s?....
   42f2c:	3f710908 beac7cd4 3f6ed89e beb8442a     ..q?.|....n?*D..
   42f3c:	3f6c835e bec3ef15 3f6a09a7 becf7bca     ^.l?......j?.{..
   42f4c:	3f676bd8 bedae880 3f64aa59 bee63375     .kg?....Y.d?u3..
   42f5c:	3f61c598 bef15aea 3f5ebe05 befc5d27     ..a?.Z....^?']..
   42f6c:	3f5b941a bf039c3d 3f584853 bf08f59b     ..[?=...SHX?....
   42f7c:	3f54db31 bf0e39da 3f514d3d bf13682a     1.T?.9..=MQ?*h..
   42f8c:	3f4d9f02 bf187fc0 3f49d112 bf1d7fd1     ..M?......I?....
   42f9c:	3f45e403 bf226799 3f41d870 bf273656     ..E?.g".p.A?V6'.
   42fac:	3f3daef9 bf2beb4a 3f396842 bf3085bb     ..=?J.+.Bh9?..0.
   42fbc:	3f3504f3 bf3504f3 3f3085bb bf396842     ..5?..5...0?Bh9.
   42fcc:	3f2beb4a bf3daef9 3f273656 bf41d870     J.+?..=.V6'?p.A.
   42fdc:	3f226799 bf45e403 3f1d7fd1 bf49d112     .g"?..E....?..I.
   42fec:	3f187fc0 bf4d9f02 3f13682a bf514d3d     ...?..M.*h.?=MQ.
   42ffc:	3f0e39da bf54db31 3f08f59b bf584853     .9.?1.T....?SHX.
   4300c:	3f039c3d bf5b941a 3efc5d27 bf5ebe05     =..?..[.'].>..^.
   4301c:	3ef15aea bf61c598 3ee63375 bf64aa59     .Z.>..a.u3.>Y.d.
   4302c:	3edae880 bf676bd8 3ecf7bca bf6a09a7     ...>.kg..{.>..j.
   4303c:	3ec3ef15 bf6c835e 3eb8442a bf6ed89e     ...>^.l.*D.>..n.
   4304c:	3eac7cd4 bf710908 3ea09ae5 bf731447     .|.>..q....>G.s.
   4305c:	3e94a031 bf74fa0b 3e888e93 bf76ba07     1..>..t....>..v.
   4306c:	3e78cfcc bf7853f8 3e605c13 bf79c79d     ..x>.Sx..\`>..y.
   4307c:	3e47c5c2 bf7b14be 3e2f10a2 bf7c3b28     ..G>..{.../>(;|.
   4308c:	3e164083 bf7d3aac 3dfab273 bf7e1324     .@.>.:}.s..=$.~.
   4309c:	3dc8bd36 bf7ec46d 3d96a905 bf7f4e6d     6..=m.~....=mN..
   430ac:	3d48fb2f bf7fb10f 3cc90ab0 bf7fec43     /.H=.......<C...

000430bc <twiddleCoef_rfft_32>:
   430bc:	00000000 3f800000 3e47c5c2 3f7b14be     .......?..G>..{?
   430cc:	3ec3ef15 3f6c835e 3f0e39da 3f54db31     ...>^.l?.9.?1.T?
   430dc:	3f3504f3 3f3504f3 3f54db31 3f0e39da     ..5?..5?1.T?.9.?
   430ec:	3f6c835e 3ec3ef15 3f7b14be 3e47c5c2     ^.l?...>..{?..G>
   430fc:	3f800000 00000000 3f7b14be be47c5c2     ...?......{?..G.
   4310c:	3f6c835e bec3ef15 3f54db31 bf0e39da     ^.l?....1.T?.9..
   4311c:	3f3504f3 bf3504f3 3f0e39da bf54db31     ..5?..5..9.?1.T.
   4312c:	3ec3ef15 bf6c835e 3e47c5c2 bf7b14be     ...>^.l...G>..{.

0004313c <arm_cfft_sR_f32_len128>:
   4313c:	00000080 0004283c 00042674 000000d0     ....<(..t&......

0004314c <arm_cfft_sR_f32_len16>:
   4314c:	00000010 00042c3c 00042814 00000014     ....<,...(......
   4315c:	6f707865 746e656e 203d3c20 00003133     exponent <= 31..
   4316c:	65746e49 54726567 20657079 6d6d6567     IntegerType gemm
   4317c:	70776f6c 6f523a3a 69646e75 6944676e     lowp::RoundingDi
   4318c:	65646976 4f507942 6e492854 65676574     videByPOT(Intege
   4319c:	70795472 69202c65 2029746e 7469775b     rType, int) [wit
   431ac:	6e492068 65676574 70795472 203d2065     h IntegerType = 
   431bc:	676e6f6c 746e6920 0000005d 5f736579     long int]...yes_
   431cc:	732f6f6e 652f6372 2d656764 75706d69     no/src/edge-impu
   431dc:	2d65736c 2f6b6473 72696874 61705f64     lse-sdk/third_pa
   431ec:	2f797472 6d6d6567 70776f6c 7869662f     rty/gemmlowp/fix
   431fc:	6f706465 2f746e69 65786966 696f7064     edpoint/fixedpoi
   4320c:	682e746e 00000000                       nt.h....

00043214 <_ZN6tflite15kConvBiasTensorE>:
   43214:	00000002                                ....

00043218 <_ZN6tflite16kConvInputTensorE>:
   43218:	00000000                                ....

0004321c <_ZN6tflite17kConvOutputTensorE>:
   4321c:	00000000                                ....

00043220 <_ZN6tflite18kConvWeightsTensorE>:
   43220:	00000001                                ....

00043224 <_ZN6tflite23kConvQuantizedDimensionE>:
   43224:	00000000                                ....

00043228 <_ZN6tflite25kFullyConnectedBiasTensorE>:
   43228:	00000002                                ....

0004322c <_ZN6tflite26kFullyConnectedInputTensorE>:
   4322c:	00000000                                ....

00043230 <_ZN6tflite27kFullyConnectedOutputTensorE>:
   43230:	00000000                                ....

00043234 <_ZN6tflite28kFullyConnectedWeightsTensorE>:
   43234:	00000001                                ....

00043238 <_ZTIN10__cxxabiv117__class_type_infoE>:
   43238:	000433bc 00043244 000433e0              .3..D2...3..

00043244 <_ZTSN10__cxxabiv117__class_type_infoE>:
   43244:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   43254:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   43264:	00000045                                E...

00043268 <_ZTVN10__cxxabiv117__class_type_infoE>:
   43268:	00000000 00043238 00036619 0003662d     ....82...f..-f..
   43278:	0003691d 0003691d 000366a9 000365d9     .i...i...f...e..
   43288:	0003668d 00036649 0003660d              .f..If...f..

00043294 <_ZTIN10__cxxabiv120__function_type_infoE>:
   43294:	000433bc 000432a0 000433e0              .3...2...3..

000432a0 <_ZTSN10__cxxabiv120__function_type_infoE>:
   432a0:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   432b0:	6e75665f 6f697463 79745f6e 695f6570     _function_type_i
   432c0:	456f666e 00000000                       nfoE....

000432c8 <_ZTVN10__cxxabiv120__function_type_infoE>:
   432c8:	00000000 00043294 000366d9 000366ed     .....2...f...f..
   432d8:	0003691d 000366d5 00036925 00036921     .i...f..%i..!i..

000432e8 <_ZTIN9__gnu_cxx20recursive_init_errorE>:
   432e8:	000433bc 000432f4 00043530              .3...2..05..

000432f4 <_ZTSN9__gnu_cxx20recursive_init_errorE>:
   432f4:	5f5f394e 5f756e67 32787863 63657230     N9__gnu_cxx20rec
   43304:	69737275 695f6576 5f74696e 6f727265     ursive_init_erro
   43314:	00004572                                rE..

00043318 <_ZTVN9__gnu_cxx20recursive_init_errorE>:
   43318:	00000000 000432e8 00036749 0003675d     .....2..Ig..]g..
   43328:	00036ef1                                .n..

0004332c <_ZTIN10__cxxabiv119__pointer_type_infoE>:
   4332c:	000433bc 00043338 00043620              .3..83.. 6..

00043338 <_ZTSN10__cxxabiv119__pointer_type_infoE>:
   43338:	5f30314e 7878635f 76696261 5f393131     N10__cxxabiv119_
   43348:	696f705f 7265746e 7079745f 6e695f65     _pointer_type_in
   43358:	00456f66                                foE.

0004335c <_ZTVN10__cxxabiv119__pointer_type_infoE>:
   4335c:	00000000 0004332c 00036789 0003679d     ....,3...g...g..
   4336c:	00036785 0003691d 000377a5 00036921     .g...i...w..!i..
   4337c:	000367b9                                .g..

00043380 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   43380:	000433bc 0004338c 00043238              .3...3..82..

0004338c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   4338c:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   4339c:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   433ac:	456f666e 00000000                       nfoE....

000433b4 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   433b4:	00000000 00043380 00036801 00036815     .....3...h...h..
   433c4:	0003691d 0003691d 000366a9 000365d9     .i...i...f...e..
   433d4:	000368ed 0003686d 00036831              .h..mh..1h..

000433e0 <_ZTISt9type_info>:
   433e0:	00043270 000433e8                       p2...3..

000433e8 <_ZTSSt9type_info>:
   433e8:	74397453 5f657079 6f666e69 00000000     St9type_info....
   433f8:	20746f6e 756f6e65 73206867 65636170     not enough space
   43408:	726f6620 726f6620 2074616d 61707865      for format expa
   43418:	6f69736e 5028206e 7361656c 75732065     nsion (Please su
   43428:	74696d62 6c756620 7562206c 65722067     bmit full bug re
   43438:	74726f70 20746120 70747468 2f2f3a73     port at https://
   43448:	2e636367 2e756e67 2f67726f 73677562     gcc.gnu.org/bugs
   43458:	0a3a292f 20202020 00000000 33323130     /):.    ....0123
   43468:	37363534 00003938 3a647473 6461623a     456789..std::bad
   43478:	6c6c615f 0000636f                       _alloc..

00043480 <_ZTISt9bad_alloc>:
   43480:	000433bc 0004348c 00043530              .3...4..05..

0004348c <_ZTSSt9bad_alloc>:
   4348c:	62397453 615f6461 636f6c6c 00000000     St9bad_alloc....

0004349c <_ZTVSt9bad_alloc>:
   4349c:	00000000 00043480 00036bbd 00036bd1     .....4...k...k..
   434ac:	00036bb5 3a647473 6461623a 7079745f     .k..std::bad_typ
   434bc:	00646965                                eid.

000434c0 <_ZTISt10bad_typeid>:
   434c0:	000433bc 000434cc 00043530              .3...4..05..

000434cc <_ZTSSt10bad_typeid>:
   434cc:	30317453 5f646162 65707974 00006469     St10bad_typeid..

000434dc <_ZTVSt10bad_typeid>:
   434dc:	00000000 000434c0 00036bf5 00036c09     .....4...k...l..
   434ec:	00036bed 3a647473 6378653a 69747065     .k..std::excepti
   434fc:	00006e6f 3a647473 6461623a 6378655f     on..std::bad_exc
   4350c:	69747065 00006e6f                       eption..

00043514 <_ZTIN10__cxxabiv115__forced_unwindE>:
   43514:	00043270 00043538                       p2..85..

0004351c <_ZTIN10__cxxabiv119__foreign_exceptionE>:
   4351c:	00043270 00043558                       p2..X5..

00043524 <_ZTISt13bad_exception>:
   43524:	000433bc 0004357c 00043530              .3..|5..05..

00043530 <_ZTISt9exception>:
   43530:	00043270 00043590                       p2...5..

00043538 <_ZTSN10__cxxabiv115__forced_unwindE>:
   43538:	5f30314e 7878635f 76696261 5f353131     N10__cxxabiv115_
   43548:	726f665f 5f646563 69776e75 0045646e     _forced_unwindE.

00043558 <_ZTSN10__cxxabiv119__foreign_exceptionE>:
   43558:	5f30314e 7878635f 76696261 5f393131     N10__cxxabiv119_
   43568:	726f665f 6e676965 6378655f 69747065     _foreign_excepti
   43578:	00456e6f                                onE.

0004357c <_ZTSSt13bad_exception>:
   4357c:	33317453 5f646162 65637865 6f697470     St13bad_exceptio
   4358c:	0000006e                                n...

00043590 <_ZTSSt9exception>:
   43590:	65397453 70656378 6e6f6974 00000000     St9exception....

000435a0 <_ZTVSt13bad_exception>:
   435a0:	00000000 00043524 00036eed 00036f01     ....$5...n...o..
   435b0:	00036ef9                                .n..

000435b4 <_ZTSv>:
   435b4:	00000076                                v...

000435b8 <_ZTSDn>:
   435b8:	00006e44                                Dn..

000435bc <_ZTIDn>:
   435bc:	00043608 000435b8                       .6...5..

000435c4 <_ZTIv>:
   435c4:	00043608 000435b4                       .6...5..

000435cc <_ZTIN10__cxxabiv123__fundamental_type_infoE>:
   435cc:	000433bc 000435d8 000433e0              .3...5...3..

000435d8 <_ZTSN10__cxxabiv123__fundamental_type_infoE>:
   435d8:	5f30314e 7878635f 76696261 5f333231     N10__cxxabiv123_
   435e8:	6e75665f 656d6164 6c61746e 7079745f     _fundamental_typ
   435f8:	6e695f65 00456f66                       e_infoE.

00043600 <_ZTVN10__cxxabiv123__fundamental_type_infoE>:
   43600:	00000000 000435cc 00037731 00037745     .....5..1w..Ew..
   43610:	0003691d 0003691d 00036925 00036921     .i...i..%i..!i..

00043620 <_ZTIN10__cxxabiv117__pbase_type_infoE>:
   43620:	000433bc 0004362c 000433e0              .3..,6...3..

0004362c <_ZTSN10__cxxabiv117__pbase_type_infoE>:
   4362c:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   4363c:	6162705f 745f6573 5f657079 6f666e69     _pbase_type_info
   4364c:	00000045                                E...

00043650 <_ZTVN10__cxxabiv117__pbase_type_infoE>:
   43650:	00000000 00043620 00037775 00037789     .... 6..uw...w..
   43660:	0003691d 0003691d 000377a5 00036921     .i...i...w..!i..
   43670:	00037761                                aw..

00043674 <_ZZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvjE2pm>:
   43674:	ffffffff                                ....

00043678 <_ZZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvjE3pmf>:
	...

00043680 <_ZTIN10__cxxabiv129__pointer_to_member_type_infoE>:
   43680:	000433bc 0004368c 00043620              .3...6.. 6..

0004368c <_ZTSN10__cxxabiv129__pointer_to_member_type_infoE>:
   4368c:	5f30314e 7878635f 76696261 5f393231     N10__cxxabiv129_
   4369c:	696f705f 7265746e 5f6f745f 626d656d     _pointer_to_memb
   436ac:	745f7265 5f657079 6f666e69 00000045     er_type_infoE...
   436bc:	6d726574 74616e69 61632065 64656c6c     terminate called
   436cc:	63657220 69737275 796c6576 0000000a      recursively....
   436dc:	6d726574 74616e69 61632065 64656c6c     terminate called
   436ec:	74666120 74207265 776f7268 20676e69      after throwing 
   436fc:	69206e61 6174736e 2065636e 2720666f     an instance of '
   4370c:	00000000 00000a27 6d726574 74616e69     ....'...terminat
   4371c:	61632065 64656c6c 74697720 74756f68     e called without
   4372c:	206e6120 69746361 65206576 70656378      an active excep
   4373c:	6e6f6974 0000000a 68772020 29287461     tion....  what()
   4374c:	0020203a                                :  .

00043750 <_ZTISt11logic_error>:
   43750:	000433bc 00043774 00043530              .3..t7..05..

0004375c <_ZTISt12length_error>:
   4375c:	000433bc 00043784 00043750              .3...7..P7..

00043768 <_ZTISt12out_of_range>:
   43768:	000433bc 00043798 00043750              .3...7..P7..

00043774 <_ZTSSt11logic_error>:
   43774:	31317453 69676f6c 72655f63 00726f72     St11logic_error.

00043784 <_ZTSSt12length_error>:
   43784:	32317453 676e656c 655f6874 726f7272     St12length_error
   43794:	00000000                                ....

00043798 <_ZTSSt12out_of_range>:
   43798:	32317453 5f74756f 725f666f 65676e61     St12out_of_range
   437a8:	00000000                                ....

000437ac <_ZTVSt11logic_error>:
   437ac:	00000000 00043750 000379b5 00037a75     ....P7...y..uz..
   437bc:	000379b1                                .y..

000437c0 <_ZTVSt12length_error>:
   437c0:	00000000 0004375c 000379f5 00037b05     ....\7...y...{..
   437d0:	000379b1                                .y..

000437d4 <_ZTVSt12out_of_range>:
   437d4:	00000000 00043768 00037a35 00037abd     ....h7..5z...z..
   437e4:	000379b1 69736162 74735f63 676e6972     .y..basic_string
   437f4:	535f3a3a 6e6f635f 75727473 6e207463     ::_S_construct n
   43804:	206c6c75 20746f6e 696c6176 00000064     ull not valid...
   43814:	69736162 74735f63 676e6972 535f3a3a     basic_string::_S
   43824:	6572635f 00657461 00006425 4f4c475f     _create.%d.._GLO
   43834:	5f4c4142 00000000 6f6e6128 6f6d796e     BAL_....(anonymo
   43844:	6e207375 73656d61 65636170 00000029     us namespace)...
   43854:	6f747561 00000000 6c636564 65707974     auto....decltype
   43864:	74756128 0000296f 69727473 6c20676e     (auto)..string l
   43874:	72657469 00006c61 00647473 6c636564     iteral..std.decl
   43884:	65707974 6c756e28 7274706c 00000029     type(nullptr)...
   43894:	6962615b 0000003a 00003a3a 6665647b     [abi:...::..{def
   438a4:	746c7561 67726120 00000023 003a3a7d     ault arg#...}::.
   438b4:	6f747561 0000003a 706d6574 6574616c     auto:...template
   438c4:	72617020 74656d61 6f207265 63656a62      parameter objec
   438d4:	6f662074 00002072 62617476 6620656c     t for ..vtable f
   438e4:	0020726f 20545456 20726f66 00000000     or .VTT for ....
   438f4:	736e6f63 63757274 6e6f6974 61747620     construction vta
   43904:	20656c62 20726f66 00000000 2d6e692d     ble for ....-in-
   43914:	00000000 65707974 6f666e69 726f6620     ....typeinfo for
   43924:	00000020 65707974 6f666e69 6d616e20      ...typeinfo nam
   43934:	6f662065 00002072 65707974 6f666e69     e for ..typeinfo
   43944:	206e6620 20726f66 00000000 2d6e6f6e      fn for ....non-
   43954:	74726976 206c6175 6e756874 6f74206b     virtual thunk to
   43964:	00000020 61766f63 6e616972 65722074      ...covariant re
   43974:	6e727574 75687420 74206b6e 0000206f     turn thunk to ..
   43984:	6176616a 616c4320 66207373 0020726f     java Class for .
   43994:	72617567 61762064 62616972 6620656c     guard variable f
   439a4:	0020726f 20534c54 74696e69 6e756620     or .TLS init fun
   439b4:	6f697463 6f66206e 00002072 20534c54     ction for ..TLS 
   439c4:	70617277 20726570 636e7566 6e6f6974     wrapper function
   439d4:	726f6620 00000020 65666572 636e6572      for ...referenc
   439e4:	65742065 726f706d 20797261 00000023     e temporary #...
   439f4:	64646968 61206e65 7361696c 726f6620     hidden alias for
   43a04:	00000020 2d6e6f6e 6e617274 74636173      ...non-transact
   43a14:	206e6f69 6e6f6c63 6f662065 00002072     ion clone for ..
   43a24:	7461535f 00000020 6172465f 00007463     _Sat ..._Fract..
   43a34:	6363415f 00006d75 0000202c 7265706f     _Accum.., ..oper
   43a44:	726f7461 00000000 7265706f 726f7461     ator....operator
   43a54:	00000020 0000283e 00007571 00203a20      ...>(..qu.. : .
   43a64:	2077656e 00000000 00006c75 00006c6c     new ....ul..ll..
   43a74:	006c6c75 736c6166 00000065 65757274     ull.false...true
   43a84:	00000000 6176616a 73657220 6372756f     ....java resourc
   43a94:	00002065 6c636564 65707974 00002820     e ..decltype (..
   43aa4:	002e2e2e 73696874 00000000 7261707b     ....this....{par
   43ab4:	0000236d 626f6c67 63206c61 74736e6f     m#..global const
   43ac4:	74637572 2073726f 6579656b 6f742064     ructors keyed to
   43ad4:	00000020 626f6c67 64206c61 72747365      ...global destr
   43ae4:	6f746375 6b207372 64657965 206f7420     uctors keyed to 
   43af4:	00000000 6d616c7b 28616462 00000000     ....{lambda(....
   43b04:	00002329 6e6e757b 64656d61 70797420     )#..{unnamed typ
   43b14:	00002365 6c635b20 20656e6f 00000000     e#.. [clone ....
   43b24:	73657220 63697274 00000074 6c6f7620      restrict... vol
   43b34:	6c697461 00000065 6e6f6320 00007473     atile... const..
   43b44:	61727420 6361736e 6e6f6974 6661735f      transaction_saf
   43b54:	00000065 656f6e20 70656378 00000074     e... noexcept...
   43b64:	72687420 0000776f 00002626 6f435f20      throw..&&.. _Co
   43b74:	656c706d 00000078 6d495f20 6e696761     mplex... _Imagin
   43b84:	00797261 002a3a3a 765f5f20 6f746365     ary.::*. __vecto
   43b94:	00002872 2e2e2e28 00000000 292e2e2e     r(..(..........)
   43ba4:	00000000 3a647473 6c6c613a 7461636f     ....std::allocat
   43bb4:	0000726f 6f6c6c61 6f746163 00000072     or..allocator...
   43bc4:	3a647473 7361623a 735f6369 6e697274     std::basic_strin
   43bd4:	00000067 69736162 74735f63 676e6972     g...basic_string
   43be4:	00000000 3a647473 7274733a 00676e69     ....std::string.
   43bf4:	3a647473 7361623a 735f6369 6e697274     std::basic_strin
   43c04:	68633c67 202c7261 3a647473 6168633a     g<char, std::cha
   43c14:	72745f72 73746961 6168633c 202c3e72     r_traits<char>, 
   43c24:	3a647473 6c6c613a 7461636f 633c726f     std::allocator<c
   43c34:	3e726168 00003e20 3a647473 7473693a     har> >..std::ist
   43c44:	6d616572 00000000 3a647473 7361623a     ream....std::bas
   43c54:	695f6369 65727473 633c6d61 2c726168     ic_istream<char,
   43c64:	64747320 68633a3a 745f7261 74696172      std::char_trait
   43c74:	68633c73 203e7261 0000003e 69736162     s<char> >...basi
   43c84:	73695f63 61657274 0000006d 3a647473     c_istream...std:
   43c94:	74736f3a 6d616572 00000000 3a647473     :ostream....std:
   43ca4:	7361623a 6f5f6369 65727473 633c6d61     :basic_ostream<c
   43cb4:	2c726168 64747320 68633a3a 745f7261     har, std::char_t
   43cc4:	74696172 68633c73 203e7261 0000003e     raits<char> >...
   43cd4:	69736162 736f5f63 61657274 0000006d     basic_ostream...
   43ce4:	3a647473 736f693a 61657274 0000006d     std::iostream...
   43cf4:	3a647473 7361623a 695f6369 7274736f     std::basic_iostr
   43d04:	3c6d6165 72616863 7473202c 633a3a64     eam<char, std::c
   43d14:	5f726168 69617274 633c7374 3e726168     har_traits<char>
   43d24:	00003e20 69736162 6f695f63 65727473      >..basic_iostre
   43d34:	00006d61 00004e61 00003d26 00005361     am..aN..&=..aS..
   43d44:	0000003d 00006161 00006461 00000026     =...aa..ad..&...
   43d54:	00006e61 00007461 67696c61 20666f6e     an..at..alignof 
   43d64:	00000000 00007761 615f6f63 74696177     ....aw..co_await
   43d74:	00000020 00007a61 00006363 736e6f63      ...az..cc..cons
   43d84:	61635f74 00007473 00006c63 00002928     t_cast..cl..()..
   43d94:	00006d63 0000002c 00006f63 0000007e     cm..,...co..~...
   43da4:	00005664 00003d2f 00006164 656c6564     dV../=..da..dele
   43db4:	5d5b6574 00000020 00006364 616e7964     te[] ...dc..dyna
   43dc4:	5f63696d 74736163 00000000 00006564     mic_cast....de..
   43dd4:	0000002a 00006c64 656c6564 00206574     *...dl..delete .
   43de4:	00007364 00002a2e 00007464 00007664     ds...*..dt..dv..
   43df4:	0000002f 00004f65 00003d5e 00006f65     /...eO..^=..eo..
   43e04:	0000005e 00007165 00003d3d 00004c66     ^...eq..==..fL..
   43e14:	00005266 00006c66 00007266 00006567     fR..fl..fr..ge..
   43e24:	00003d3e 00007367 00007467 00007869     >=..gs..gt..ix..
   43e34:	00005d5b 0000536c 003d3c3c 00003d3c     []..lS..<<=.<=..
   43e44:	0000696c 7265706f 726f7461 00202222     li..operator"" .
   43e54:	0000736c 00003c3c 0000746c 0000003c     ls..<<..lt..<...
   43e64:	0000496d 00003d2d 00004c6d 00003d2a     mI..-=..mL..*=..
   43e74:	0000696d 0000002d 00006c6d 00006d6d     mi..-...ml..mm..
   43e84:	00002d2d 0000616e 5b77656e 0000005d     --..na..new[]...
   43e94:	0000656e 00003d21 00000021 0000776e     ne..!=..!...nw..
   43ea4:	0077656e 0000526f 00003d7c 00006f6f     new.oR..|=..oo..
   43eb4:	00007c7c 0000007c 00004c70 00003d2b     ||..|...pL..+=..
   43ec4:	00006c70 0000002b 00006d70 002a3e2d     pl..+...pm..->*.
   43ed4:	00007070 00002b2b 00007370 00007470     pp..++..ps..pt..
   43ee4:	00003e2d 0000003f 00004d72 00003d25     ->..?...rM..%=..
   43ef4:	00005372 003d3e3e 00006372 6e696572     rS..>>=.rc..rein
   43f04:	70726574 5f746572 74736163 00000000     terpret_cast....
   43f14:	00006d72 00000025 00007372 00003e3e     rm..%...rs..>>..
   43f24:	00005073 657a6973 2e2e666f 0000002e     sP..sizeof......
   43f34:	00005a73 00006373 74617473 635f6369     sZ..sc..static_c
   43f44:	00747361 00007373 003e3d3c 657a6973     ast.ss..<=>.size
   43f54:	0020666f 00007a73 00007274 6f726874     of .sz..tr..thro
   43f64:	00000077 00007774 6f726874 00002077     w...tw..throw ..
   43f74:	6e676973 63206465 00726168 6c6f6f62     signed char.bool
   43f84:	00000000 6c6f6f62 006e6165 72616863     ....boolean.char
   43f94:	00000000 65747962 00000000 62756f64     ....byte....doub
   43fa4:	0000656c 676e6f6c 756f6420 00656c62     le..long double.
   43fb4:	616f6c66 00000074 6c665f5f 3174616f     float...__float1
   43fc4:	00003832 69736e75 64656e67 61686320     28..unsigned cha
   43fd4:	00000072 00746e69 69736e75 64656e67     r...int.unsigned
   43fe4:	746e6920 00000000 69736e75 64656e67      int....unsigned
   43ff4:	00000000 676e6f6c 00000000 69736e75     ....long....unsi
   44004:	64656e67 6e6f6c20 00000067 6e695f5f     gned long...__in
   44014:	38323174 00000000 69736e75 64656e67     t128....unsigned
   44024:	695f5f20 3231746e 00000038 726f6873      __int128...shor
   44034:	00000074 69736e75 64656e67 6f687320     t...unsigned sho
   44044:	00007472 64696f76 00000000 61686377     rt..void....wcha
   44054:	00745f72 676e6f6c 6e6f6c20 00000067     r_t.long long...
   44064:	69736e75 64656e67 6e6f6c20 6f6c2067     unsigned long lo
   44074:	0000676e 69636564 336c616d 00000032     ng..decimal32...
   44084:	69636564 366c616d 00000034 69636564     decimal64...deci
   44094:	316c616d 00003832 666c6168 00000000     mal128..half....
   440a4:	72616863 00745f38 72616863 745f3631     char8_t.char16_t
   440b4:	00000000 72616863 745f3233 00000000     ....char32_t....
   440c4:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
   440d4:	00000030                                0...

000440d8 <blanks.1>:
   440d8:	20202020 20202020 20202020 20202020                     

000440e8 <zeroes.0>:
   440e8:	30303030 30303030 30303030 30303030     0000000000000000
   440f8:	004e614e 69666e49 7974696e 00000000     NaN.Infinity....
   44108:	6c6c6142 7320636f 65636375 64656465     Balloc succeeded
   44118:	00000000 706d742f 6e656a2f 736e696b     ..../tmp/jenkins
   44128:	4343472d 2d30312d 65706970 656e696c     -GCC-10-pipeline
   44138:	3935322d 3230325f 32373031 36315f37     -259_20210727_16
   44148:	34333732 34303035 6372732f 77656e2f     27345004/src/new
   44158:	2f62696c 6c77656e 6c2f6269 2f636269     lib/newlib/libc/
   44168:	6c647473 642f6269 2e616f74 00000063     stdlib/dtoa.c...
   44178:	706d742f 6e656a2f 736e696b 4343472d     /tmp/jenkins-GCC
   44188:	2d30312d 65706970 656e696c 3935322d     -10-pipeline-259
   44198:	3230325f 32373031 36315f37 34333732     _20210727_162734
   441a8:	34303035 6372732f 77656e2f 2f62696c     5004/src/newlib/
   441b8:	6c77656e 6c2f6269 2f636269 6c647473     newlib/libc/stdl
   441c8:	6d2f6269 63657270 0000632e 00000000     ib/mprec.c......

000441d8 <__mprec_bigtens>:
   441d8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   441e8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   441f8:	7f73bf3c 75154fdd                       <.s..O.u

00044200 <__mprec_tens>:
   44200:	00000000 3ff00000 00000000 40240000     .......?......$@
   44210:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   44220:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   44230:	00000000 412e8480 00000000 416312d0     .......A......cA
   44240:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   44250:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   44260:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   44270:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   44280:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   44290:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   442a0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   442b0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   442c0:	79d99db4 44ea7843                       ...yCx.D

000442c8 <p05.0>:
   442c8:	00000005 00000019 0000007d              ........}...

000442d4 <CSWTCH.15>:
   442d4:	016e3600 00b71b00 005b8d80 002dc6c0     .6n.......[...-.
   442e4:	02dc6c00                                .l..
