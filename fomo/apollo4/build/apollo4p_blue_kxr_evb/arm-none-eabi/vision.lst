
build/apollo4p_blue_kxr_evb/arm-none-eabi/vision.axf:     file format elf32-littlearm


Disassembly of section .text:

00018000 <g_am_pfnVectors>:
   18000:	00 90 00 10 cd 96 01 00 c1 96 01 00 c5 96 01 00     ................
   18010:	c5 96 01 00 c5 96 01 00 c5 96 01 00 00 00 00 00     ................
	...
   1802c:	91 3d 03 00 c9 96 01 00 00 00 00 00 01 3e 03 00     .=...........>..
   1803c:	65 3e 03 00 c9 96 01 00 c9 96 01 00 c9 96 01 00     e>..............
   1804c:	c9 96 01 00 c9 96 01 00 c9 96 01 00 c9 96 01 00     ................
   1805c:	99 0a 04 00 c9 96 01 00 c9 96 01 00 c9 96 01 00     ................
   1806c:	c9 96 01 00 c9 96 01 00 c9 96 01 00 c9 96 01 00     ................
   1807c:	c9 96 01 00 c9 96 01 00 c9 96 01 00 c9 96 01 00     ................
   1808c:	c9 96 01 00 c9 96 01 00 c9 96 01 00 c9 96 01 00     ................
   1809c:	c9 96 01 00 c9 96 01 00 c9 96 01 00 c9 96 01 00     ................
   180ac:	89 41 03 00 c9 96 01 00 c9 96 01 00 c9 96 01 00     .A..............
   180bc:	c9 96 01 00 0d 3f 03 00 2d 3f 03 00 c9 96 01 00     .....?..-?......
   180cc:	c9 96 01 00 c9 96 01 00 c9 96 01 00 c9 96 01 00     ................
   180dc:	c9 96 01 00 c9 96 01 00 c9 96 01 00 c9 96 01 00     ................
   180ec:	c9 96 01 00 c9 96 01 00 c9 96 01 00 c9 96 01 00     ................
   180fc:	c9 96 01 00 c9 96 01 00 c9 96 01 00 c9 96 01 00     ................
   1810c:	c9 96 01 00 c9 96 01 00 c9 96 01 00 c9 96 01 00     ................
   1811c:	c9 96 01 00 c9 96 01 00 c9 96 01 00 c9 96 01 00     ................
   1812c:	c9 96 01 00 c9 96 01 00 c9 96 01 00 c9 96 01 00     ................
   1813c:	c9 96 01 00 c9 96 01 00 c9 96 01 00 c9 96 01 00     ................
   1814c:	c9 96 01 00 dd c4 02 00 05 c5 02 00 2d c5 02 00     ............-...
   1815c:	c9 96 01 00 c9 96 01 00 c9 96 01 00 c9 96 01 00     ................
   1816c:	c9 96 01 00 c9 96 01 00 c9 96 01 00 c9 96 01 00     ................
   1817c:	c9 96 01 00 c9 96 01 00 c9 96 01 00 c9 96 01 00     ................
   1818c:	c9 96 01 00                                         ....

00018190 <__Patchable>:
	...

00018200 <strcmp>:
   18200:	7802      	ldrb	r2, [r0, #0]
   18202:	780b      	ldrb	r3, [r1, #0]
   18204:	2a01      	cmp	r2, #1
   18206:	bf28      	it	cs
   18208:	429a      	cmpcs	r2, r3
   1820a:	f040 80d8 	bne.w	183be <strcmp+0x1be>
   1820e:	e96d 4504 	strd	r4, r5, [sp, #-16]!
   18212:	ea40 0401 	orr.w	r4, r0, r1
   18216:	e9cd 6702 	strd	r6, r7, [sp, #8]
   1821a:	f06f 0c00 	mvn.w	ip, #0
   1821e:	ea4f 7244 	mov.w	r2, r4, lsl #29
   18222:	b31a      	cbz	r2, 1826c <strcmp+0x6c>
   18224:	ea80 0401 	eor.w	r4, r0, r1
   18228:	f014 0f07 	tst.w	r4, #7
   1822c:	d16b      	bne.n	18306 <strcmp+0x106>
   1822e:	f000 0407 	and.w	r4, r0, #7
   18232:	f020 0007 	bic.w	r0, r0, #7
   18236:	f004 0503 	and.w	r5, r4, #3
   1823a:	f021 0107 	bic.w	r1, r1, #7
   1823e:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   18242:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   18246:	f014 0f04 	tst.w	r4, #4
   1824a:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   1824e:	fa0c f405 	lsl.w	r4, ip, r5
   18252:	ea62 0204 	orn	r2, r2, r4
   18256:	ea66 0604 	orn	r6, r6, r4
   1825a:	d00b      	beq.n	18274 <strcmp+0x74>
   1825c:	ea63 0304 	orn	r3, r3, r4
   18260:	4662      	mov	r2, ip
   18262:	ea67 0704 	orn	r7, r7, r4
   18266:	4666      	mov	r6, ip
   18268:	e004      	b.n	18274 <strcmp+0x74>
   1826a:	bf00      	nop
   1826c:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   18270:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   18274:	fa82 f54c 	uadd8	r5, r2, ip
   18278:	ea82 0406 	eor.w	r4, r2, r6
   1827c:	faa4 f48c 	sel	r4, r4, ip
   18280:	bb6c      	cbnz	r4, 182de <strcmp+0xde>
   18282:	fa83 f54c 	uadd8	r5, r3, ip
   18286:	ea83 0507 	eor.w	r5, r3, r7
   1828a:	faa5 f58c 	sel	r5, r5, ip
   1828e:	b995      	cbnz	r5, 182b6 <strcmp+0xb6>
   18290:	e950 2302 	ldrd	r2, r3, [r0, #-8]
   18294:	e951 6702 	ldrd	r6, r7, [r1, #-8]
   18298:	fa82 f54c 	uadd8	r5, r2, ip
   1829c:	ea82 0406 	eor.w	r4, r2, r6
   182a0:	faa4 f48c 	sel	r4, r4, ip
   182a4:	fa83 f54c 	uadd8	r5, r3, ip
   182a8:	ea83 0507 	eor.w	r5, r3, r7
   182ac:	faa5 f58c 	sel	r5, r5, ip
   182b0:	4325      	orrs	r5, r4
   182b2:	d0db      	beq.n	1826c <strcmp+0x6c>
   182b4:	b99c      	cbnz	r4, 182de <strcmp+0xde>
   182b6:	ba2d      	rev	r5, r5
   182b8:	fab5 f485 	clz	r4, r5
   182bc:	f024 0407 	bic.w	r4, r4, #7
   182c0:	fa27 f104 	lsr.w	r1, r7, r4
   182c4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   182c8:	fa23 f304 	lsr.w	r3, r3, r4
   182cc:	f003 00ff 	and.w	r0, r3, #255	@ 0xff
   182d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
   182d4:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   182d8:	eba0 0001 	sub.w	r0, r0, r1
   182dc:	4770      	bx	lr
   182de:	ba24      	rev	r4, r4
   182e0:	fab4 f484 	clz	r4, r4
   182e4:	f024 0407 	bic.w	r4, r4, #7
   182e8:	fa26 f104 	lsr.w	r1, r6, r4
   182ec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   182f0:	fa22 f204 	lsr.w	r2, r2, r4
   182f4:	f002 00ff 	and.w	r0, r2, #255	@ 0xff
   182f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
   182fc:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   18300:	eba0 0001 	sub.w	r0, r0, r1
   18304:	4770      	bx	lr
   18306:	f014 0f03 	tst.w	r4, #3
   1830a:	d13c      	bne.n	18386 <strcmp+0x186>
   1830c:	f010 0403 	ands.w	r4, r0, #3
   18310:	d128      	bne.n	18364 <strcmp+0x164>
   18312:	f850 2b08 	ldr.w	r2, [r0], #8
   18316:	f851 3b08 	ldr.w	r3, [r1], #8
   1831a:	fa82 f54c 	uadd8	r5, r2, ip
   1831e:	ea82 0503 	eor.w	r5, r2, r3
   18322:	faa5 f58c 	sel	r5, r5, ip
   18326:	b95d      	cbnz	r5, 18340 <strcmp+0x140>
   18328:	f850 2c04 	ldr.w	r2, [r0, #-4]
   1832c:	f851 3c04 	ldr.w	r3, [r1, #-4]
   18330:	fa82 f54c 	uadd8	r5, r2, ip
   18334:	ea82 0503 	eor.w	r5, r2, r3
   18338:	faa5 f58c 	sel	r5, r5, ip
   1833c:	2d00      	cmp	r5, #0
   1833e:	d0e8      	beq.n	18312 <strcmp+0x112>
   18340:	ba2d      	rev	r5, r5
   18342:	fab5 f485 	clz	r4, r5
   18346:	f024 0407 	bic.w	r4, r4, #7
   1834a:	fa23 f104 	lsr.w	r1, r3, r4
   1834e:	fa22 f204 	lsr.w	r2, r2, r4
   18352:	f002 00ff 	and.w	r0, r2, #255	@ 0xff
   18356:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
   1835a:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1835e:	eba0 0001 	sub.w	r0, r0, r1
   18362:	4770      	bx	lr
   18364:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   18368:	f020 0003 	bic.w	r0, r0, #3
   1836c:	f850 2b08 	ldr.w	r2, [r0], #8
   18370:	f021 0103 	bic.w	r1, r1, #3
   18374:	f851 3b08 	ldr.w	r3, [r1], #8
   18378:	fa0c f404 	lsl.w	r4, ip, r4
   1837c:	ea62 0204 	orn	r2, r2, r4
   18380:	ea63 0304 	orn	r3, r3, r4
   18384:	e7c9      	b.n	1831a <strcmp+0x11a>
   18386:	f010 0403 	ands.w	r4, r0, #3
   1838a:	d01d      	beq.n	183c8 <strcmp+0x1c8>
   1838c:	eba1 0104 	sub.w	r1, r1, r4
   18390:	f020 0003 	bic.w	r0, r0, #3
   18394:	07e4      	lsls	r4, r4, #31
   18396:	f850 2b04 	ldr.w	r2, [r0], #4
   1839a:	d006      	beq.n	183aa <strcmp+0x1aa>
   1839c:	d212      	bcs.n	183c4 <strcmp+0x1c4>
   1839e:	788b      	ldrb	r3, [r1, #2]
   183a0:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
   183a4:	1ae4      	subs	r4, r4, r3
   183a6:	d106      	bne.n	183b6 <strcmp+0x1b6>
   183a8:	b12b      	cbz	r3, 183b6 <strcmp+0x1b6>
   183aa:	78cb      	ldrb	r3, [r1, #3]
   183ac:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
   183b0:	1ae4      	subs	r4, r4, r3
   183b2:	d100      	bne.n	183b6 <strcmp+0x1b6>
   183b4:	b933      	cbnz	r3, 183c4 <strcmp+0x1c4>
   183b6:	4620      	mov	r0, r4
   183b8:	f85d 4b10 	ldr.w	r4, [sp], #16
   183bc:	4770      	bx	lr
   183be:	eba2 0003 	sub.w	r0, r2, r3
   183c2:	4770      	bx	lr
   183c4:	f101 0104 	add.w	r1, r1, #4
   183c8:	f850 2b04 	ldr.w	r2, [r0], #4
   183cc:	07cc      	lsls	r4, r1, #31
   183ce:	f021 0103 	bic.w	r1, r1, #3
   183d2:	f851 3b04 	ldr.w	r3, [r1], #4
   183d6:	d848      	bhi.n	1846a <strcmp+0x26a>
   183d8:	d224      	bcs.n	18424 <strcmp+0x224>
   183da:	f022 447f 	bic.w	r4, r2, #4278190080	@ 0xff000000
   183de:	fa82 f54c 	uadd8	r5, r2, ip
   183e2:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
   183e6:	faa5 f58c 	sel	r5, r5, ip
   183ea:	d10a      	bne.n	18402 <strcmp+0x202>
   183ec:	b965      	cbnz	r5, 18408 <strcmp+0x208>
   183ee:	f851 3b04 	ldr.w	r3, [r1], #4
   183f2:	ea84 0402 	eor.w	r4, r4, r2
   183f6:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
   183fa:	d10e      	bne.n	1841a <strcmp+0x21a>
   183fc:	f850 2b04 	ldr.w	r2, [r0], #4
   18400:	e7eb      	b.n	183da <strcmp+0x1da>
   18402:	ea4f 2313 	mov.w	r3, r3, lsr #8
   18406:	e055      	b.n	184b4 <strcmp+0x2b4>
   18408:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
   1840c:	d14d      	bne.n	184aa <strcmp+0x2aa>
   1840e:	7808      	ldrb	r0, [r1, #0]
   18410:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   18414:	f1c0 0000 	rsb	r0, r0, #0
   18418:	4770      	bx	lr
   1841a:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1841e:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
   18422:	e047      	b.n	184b4 <strcmp+0x2b4>
   18424:	ea02 441c 	and.w	r4, r2, ip, lsr #16
   18428:	fa82 f54c 	uadd8	r5, r2, ip
   1842c:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
   18430:	faa5 f58c 	sel	r5, r5, ip
   18434:	d10a      	bne.n	1844c <strcmp+0x24c>
   18436:	b965      	cbnz	r5, 18452 <strcmp+0x252>
   18438:	f851 3b04 	ldr.w	r3, [r1], #4
   1843c:	ea84 0402 	eor.w	r4, r4, r2
   18440:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
   18444:	d10c      	bne.n	18460 <strcmp+0x260>
   18446:	f850 2b04 	ldr.w	r2, [r0], #4
   1844a:	e7eb      	b.n	18424 <strcmp+0x224>
   1844c:	ea4f 4313 	mov.w	r3, r3, lsr #16
   18450:	e030      	b.n	184b4 <strcmp+0x2b4>
   18452:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
   18456:	d128      	bne.n	184aa <strcmp+0x2aa>
   18458:	880b      	ldrh	r3, [r1, #0]
   1845a:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1845e:	e029      	b.n	184b4 <strcmp+0x2b4>
   18460:	ea4f 4212 	mov.w	r2, r2, lsr #16
   18464:	ea03 431c 	and.w	r3, r3, ip, lsr #16
   18468:	e024      	b.n	184b4 <strcmp+0x2b4>
   1846a:	f002 04ff 	and.w	r4, r2, #255	@ 0xff
   1846e:	fa82 f54c 	uadd8	r5, r2, ip
   18472:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
   18476:	faa5 f58c 	sel	r5, r5, ip
   1847a:	d10a      	bne.n	18492 <strcmp+0x292>
   1847c:	b965      	cbnz	r5, 18498 <strcmp+0x298>
   1847e:	f851 3b04 	ldr.w	r3, [r1], #4
   18482:	ea84 0402 	eor.w	r4, r4, r2
   18486:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
   1848a:	d109      	bne.n	184a0 <strcmp+0x2a0>
   1848c:	f850 2b04 	ldr.w	r2, [r0], #4
   18490:	e7eb      	b.n	1846a <strcmp+0x26a>
   18492:	ea4f 6313 	mov.w	r3, r3, lsr #24
   18496:	e00d      	b.n	184b4 <strcmp+0x2b4>
   18498:	f015 0fff 	tst.w	r5, #255	@ 0xff
   1849c:	d105      	bne.n	184aa <strcmp+0x2aa>
   1849e:	680b      	ldr	r3, [r1, #0]
   184a0:	ea4f 2212 	mov.w	r2, r2, lsr #8
   184a4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
   184a8:	e004      	b.n	184b4 <strcmp+0x2b4>
   184aa:	f04f 0000 	mov.w	r0, #0
   184ae:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   184b2:	4770      	bx	lr
   184b4:	ba12      	rev	r2, r2
   184b6:	ba1b      	rev	r3, r3
   184b8:	fa82 f44c 	uadd8	r4, r2, ip
   184bc:	ea82 0403 	eor.w	r4, r2, r3
   184c0:	faa4 f58c 	sel	r5, r4, ip
   184c4:	fab5 f485 	clz	r4, r5
   184c8:	fa02 f204 	lsl.w	r2, r2, r4
   184cc:	fa03 f304 	lsl.w	r3, r3, r4
   184d0:	ea4f 6012 	mov.w	r0, r2, lsr #24
   184d4:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   184d8:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
   184dc:	4770      	bx	lr
   184de:	bf00      	nop

000184e0 <memchr>:
   184e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
   184e4:	2a10      	cmp	r2, #16
   184e6:	db2b      	blt.n	18540 <memchr+0x60>
   184e8:	f010 0f07 	tst.w	r0, #7
   184ec:	d008      	beq.n	18500 <memchr+0x20>
   184ee:	f810 3b01 	ldrb.w	r3, [r0], #1
   184f2:	3a01      	subs	r2, #1
   184f4:	428b      	cmp	r3, r1
   184f6:	d02d      	beq.n	18554 <memchr+0x74>
   184f8:	f010 0f07 	tst.w	r0, #7
   184fc:	b342      	cbz	r2, 18550 <memchr+0x70>
   184fe:	d1f6      	bne.n	184ee <memchr+0xe>
   18500:	b4f0      	push	{r4, r5, r6, r7}
   18502:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   18506:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1850a:	f022 0407 	bic.w	r4, r2, #7
   1850e:	f07f 0700 	mvns.w	r7, #0
   18512:	2300      	movs	r3, #0
   18514:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   18518:	3c08      	subs	r4, #8
   1851a:	ea85 0501 	eor.w	r5, r5, r1
   1851e:	ea86 0601 	eor.w	r6, r6, r1
   18522:	fa85 f547 	uadd8	r5, r5, r7
   18526:	faa3 f587 	sel	r5, r3, r7
   1852a:	fa86 f647 	uadd8	r6, r6, r7
   1852e:	faa5 f687 	sel	r6, r5, r7
   18532:	b98e      	cbnz	r6, 18558 <memchr+0x78>
   18534:	d1ee      	bne.n	18514 <memchr+0x34>
   18536:	bcf0      	pop	{r4, r5, r6, r7}
   18538:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
   1853c:	f002 0207 	and.w	r2, r2, #7
   18540:	b132      	cbz	r2, 18550 <memchr+0x70>
   18542:	f810 3b01 	ldrb.w	r3, [r0], #1
   18546:	3a01      	subs	r2, #1
   18548:	ea83 0301 	eor.w	r3, r3, r1
   1854c:	b113      	cbz	r3, 18554 <memchr+0x74>
   1854e:	d1f8      	bne.n	18542 <memchr+0x62>
   18550:	2000      	movs	r0, #0
   18552:	4770      	bx	lr
   18554:	3801      	subs	r0, #1
   18556:	4770      	bx	lr
   18558:	2d00      	cmp	r5, #0
   1855a:	bf06      	itte	eq
   1855c:	4635      	moveq	r5, r6
   1855e:	3803      	subeq	r0, #3
   18560:	3807      	subne	r0, #7
   18562:	f015 0f01 	tst.w	r5, #1
   18566:	d107      	bne.n	18578 <memchr+0x98>
   18568:	3001      	adds	r0, #1
   1856a:	f415 7f80 	tst.w	r5, #256	@ 0x100
   1856e:	bf02      	ittt	eq
   18570:	3001      	addeq	r0, #1
   18572:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
   18576:	3001      	addeq	r0, #1
   18578:	bcf0      	pop	{r4, r5, r6, r7}
   1857a:	3801      	subs	r0, #1
   1857c:	4770      	bx	lr
   1857e:	bf00      	nop

00018580 <memcpy>:
   18580:	4684      	mov	ip, r0
   18582:	ea41 0300 	orr.w	r3, r1, r0
   18586:	f013 0303 	ands.w	r3, r3, #3
   1858a:	d16d      	bne.n	18668 <memcpy+0xe8>
   1858c:	3a40      	subs	r2, #64	@ 0x40
   1858e:	d341      	bcc.n	18614 <memcpy+0x94>
   18590:	f851 3b04 	ldr.w	r3, [r1], #4
   18594:	f840 3b04 	str.w	r3, [r0], #4
   18598:	f851 3b04 	ldr.w	r3, [r1], #4
   1859c:	f840 3b04 	str.w	r3, [r0], #4
   185a0:	f851 3b04 	ldr.w	r3, [r1], #4
   185a4:	f840 3b04 	str.w	r3, [r0], #4
   185a8:	f851 3b04 	ldr.w	r3, [r1], #4
   185ac:	f840 3b04 	str.w	r3, [r0], #4
   185b0:	f851 3b04 	ldr.w	r3, [r1], #4
   185b4:	f840 3b04 	str.w	r3, [r0], #4
   185b8:	f851 3b04 	ldr.w	r3, [r1], #4
   185bc:	f840 3b04 	str.w	r3, [r0], #4
   185c0:	f851 3b04 	ldr.w	r3, [r1], #4
   185c4:	f840 3b04 	str.w	r3, [r0], #4
   185c8:	f851 3b04 	ldr.w	r3, [r1], #4
   185cc:	f840 3b04 	str.w	r3, [r0], #4
   185d0:	f851 3b04 	ldr.w	r3, [r1], #4
   185d4:	f840 3b04 	str.w	r3, [r0], #4
   185d8:	f851 3b04 	ldr.w	r3, [r1], #4
   185dc:	f840 3b04 	str.w	r3, [r0], #4
   185e0:	f851 3b04 	ldr.w	r3, [r1], #4
   185e4:	f840 3b04 	str.w	r3, [r0], #4
   185e8:	f851 3b04 	ldr.w	r3, [r1], #4
   185ec:	f840 3b04 	str.w	r3, [r0], #4
   185f0:	f851 3b04 	ldr.w	r3, [r1], #4
   185f4:	f840 3b04 	str.w	r3, [r0], #4
   185f8:	f851 3b04 	ldr.w	r3, [r1], #4
   185fc:	f840 3b04 	str.w	r3, [r0], #4
   18600:	f851 3b04 	ldr.w	r3, [r1], #4
   18604:	f840 3b04 	str.w	r3, [r0], #4
   18608:	f851 3b04 	ldr.w	r3, [r1], #4
   1860c:	f840 3b04 	str.w	r3, [r0], #4
   18610:	3a40      	subs	r2, #64	@ 0x40
   18612:	d2bd      	bcs.n	18590 <memcpy+0x10>
   18614:	3230      	adds	r2, #48	@ 0x30
   18616:	d311      	bcc.n	1863c <memcpy+0xbc>
   18618:	f851 3b04 	ldr.w	r3, [r1], #4
   1861c:	f840 3b04 	str.w	r3, [r0], #4
   18620:	f851 3b04 	ldr.w	r3, [r1], #4
   18624:	f840 3b04 	str.w	r3, [r0], #4
   18628:	f851 3b04 	ldr.w	r3, [r1], #4
   1862c:	f840 3b04 	str.w	r3, [r0], #4
   18630:	f851 3b04 	ldr.w	r3, [r1], #4
   18634:	f840 3b04 	str.w	r3, [r0], #4
   18638:	3a10      	subs	r2, #16
   1863a:	d2ed      	bcs.n	18618 <memcpy+0x98>
   1863c:	320c      	adds	r2, #12
   1863e:	d305      	bcc.n	1864c <memcpy+0xcc>
   18640:	f851 3b04 	ldr.w	r3, [r1], #4
   18644:	f840 3b04 	str.w	r3, [r0], #4
   18648:	3a04      	subs	r2, #4
   1864a:	d2f9      	bcs.n	18640 <memcpy+0xc0>
   1864c:	3204      	adds	r2, #4
   1864e:	d008      	beq.n	18662 <memcpy+0xe2>
   18650:	07d2      	lsls	r2, r2, #31
   18652:	bf1c      	itt	ne
   18654:	f811 3b01 	ldrbne.w	r3, [r1], #1
   18658:	f800 3b01 	strbne.w	r3, [r0], #1
   1865c:	d301      	bcc.n	18662 <memcpy+0xe2>
   1865e:	880b      	ldrh	r3, [r1, #0]
   18660:	8003      	strh	r3, [r0, #0]
   18662:	4660      	mov	r0, ip
   18664:	4770      	bx	lr
   18666:	bf00      	nop
   18668:	2a08      	cmp	r2, #8
   1866a:	d313      	bcc.n	18694 <memcpy+0x114>
   1866c:	078b      	lsls	r3, r1, #30
   1866e:	d08d      	beq.n	1858c <memcpy+0xc>
   18670:	f010 0303 	ands.w	r3, r0, #3
   18674:	d08a      	beq.n	1858c <memcpy+0xc>
   18676:	f1c3 0304 	rsb	r3, r3, #4
   1867a:	1ad2      	subs	r2, r2, r3
   1867c:	07db      	lsls	r3, r3, #31
   1867e:	bf1c      	itt	ne
   18680:	f811 3b01 	ldrbne.w	r3, [r1], #1
   18684:	f800 3b01 	strbne.w	r3, [r0], #1
   18688:	d380      	bcc.n	1858c <memcpy+0xc>
   1868a:	f831 3b02 	ldrh.w	r3, [r1], #2
   1868e:	f820 3b02 	strh.w	r3, [r0], #2
   18692:	e77b      	b.n	1858c <memcpy+0xc>
   18694:	3a04      	subs	r2, #4
   18696:	d3d9      	bcc.n	1864c <memcpy+0xcc>
   18698:	3a01      	subs	r2, #1
   1869a:	f811 3b01 	ldrb.w	r3, [r1], #1
   1869e:	f800 3b01 	strb.w	r3, [r0], #1
   186a2:	d2f9      	bcs.n	18698 <memcpy+0x118>
   186a4:	780b      	ldrb	r3, [r1, #0]
   186a6:	7003      	strb	r3, [r0, #0]
   186a8:	784b      	ldrb	r3, [r1, #1]
   186aa:	7043      	strb	r3, [r0, #1]
   186ac:	788b      	ldrb	r3, [r1, #2]
   186ae:	7083      	strb	r3, [r0, #2]
   186b0:	4660      	mov	r0, ip
   186b2:	4770      	bx	lr
	...

000186c0 <strlen>:
   186c0:	b430      	push	{r4, r5}
   186c2:	f890 f000 	pld	[r0]
   186c6:	f020 0107 	bic.w	r1, r0, #7
   186ca:	f06f 0c00 	mvn.w	ip, #0
   186ce:	f010 0407 	ands.w	r4, r0, #7
   186d2:	f891 f020 	pld	[r1, #32]
   186d6:	f040 8048 	bne.w	1876a <strlen+0xaa>
   186da:	f04f 0400 	mov.w	r4, #0
   186de:	f06f 0007 	mvn.w	r0, #7
   186e2:	e9d1 2300 	ldrd	r2, r3, [r1]
   186e6:	f891 f040 	pld	[r1, #64]	@ 0x40
   186ea:	f100 0008 	add.w	r0, r0, #8
   186ee:	fa82 f24c 	uadd8	r2, r2, ip
   186f2:	faa4 f28c 	sel	r2, r4, ip
   186f6:	fa83 f34c 	uadd8	r3, r3, ip
   186fa:	faa2 f38c 	sel	r3, r2, ip
   186fe:	bb4b      	cbnz	r3, 18754 <strlen+0x94>
   18700:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   18704:	fa82 f24c 	uadd8	r2, r2, ip
   18708:	f100 0008 	add.w	r0, r0, #8
   1870c:	faa4 f28c 	sel	r2, r4, ip
   18710:	fa83 f34c 	uadd8	r3, r3, ip
   18714:	faa2 f38c 	sel	r3, r2, ip
   18718:	b9e3      	cbnz	r3, 18754 <strlen+0x94>
   1871a:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   1871e:	fa82 f24c 	uadd8	r2, r2, ip
   18722:	f100 0008 	add.w	r0, r0, #8
   18726:	faa4 f28c 	sel	r2, r4, ip
   1872a:	fa83 f34c 	uadd8	r3, r3, ip
   1872e:	faa2 f38c 	sel	r3, r2, ip
   18732:	b97b      	cbnz	r3, 18754 <strlen+0x94>
   18734:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   18738:	f101 0120 	add.w	r1, r1, #32
   1873c:	fa82 f24c 	uadd8	r2, r2, ip
   18740:	f100 0008 	add.w	r0, r0, #8
   18744:	faa4 f28c 	sel	r2, r4, ip
   18748:	fa83 f34c 	uadd8	r3, r3, ip
   1874c:	faa2 f38c 	sel	r3, r2, ip
   18750:	2b00      	cmp	r3, #0
   18752:	d0c6      	beq.n	186e2 <strlen+0x22>
   18754:	2a00      	cmp	r2, #0
   18756:	bf04      	itt	eq
   18758:	3004      	addeq	r0, #4
   1875a:	461a      	moveq	r2, r3
   1875c:	ba12      	rev	r2, r2
   1875e:	fab2 f282 	clz	r2, r2
   18762:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   18766:	bc30      	pop	{r4, r5}
   18768:	4770      	bx	lr
   1876a:	e9d1 2300 	ldrd	r2, r3, [r1]
   1876e:	f004 0503 	and.w	r5, r4, #3
   18772:	f1c4 0000 	rsb	r0, r4, #0
   18776:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1877a:	f014 0f04 	tst.w	r4, #4
   1877e:	f891 f040 	pld	[r1, #64]	@ 0x40
   18782:	fa0c f505 	lsl.w	r5, ip, r5
   18786:	ea62 0205 	orn	r2, r2, r5
   1878a:	bf1c      	itt	ne
   1878c:	ea63 0305 	ornne	r3, r3, r5
   18790:	4662      	movne	r2, ip
   18792:	f04f 0400 	mov.w	r4, #0
   18796:	e7aa      	b.n	186ee <strlen+0x2e>

00018798 <__aeabi_drsub>:
   18798:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
   1879c:	e002      	b.n	187a4 <__adddf3>
   1879e:	bf00      	nop

000187a0 <__aeabi_dsub>:
   187a0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

000187a4 <__adddf3>:
   187a4:	b530      	push	{r4, r5, lr}
   187a6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   187aa:	ea4f 0543 	mov.w	r5, r3, lsl #1
   187ae:	ea94 0f05 	teq	r4, r5
   187b2:	bf08      	it	eq
   187b4:	ea90 0f02 	teqeq	r0, r2
   187b8:	bf1f      	itttt	ne
   187ba:	ea54 0c00 	orrsne.w	ip, r4, r0
   187be:	ea55 0c02 	orrsne.w	ip, r5, r2
   187c2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   187c6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   187ca:	f000 80e2 	beq.w	18992 <__adddf3+0x1ee>
   187ce:	ea4f 5454 	mov.w	r4, r4, lsr #21
   187d2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   187d6:	bfb8      	it	lt
   187d8:	426d      	neglt	r5, r5
   187da:	dd0c      	ble.n	187f6 <__adddf3+0x52>
   187dc:	442c      	add	r4, r5
   187de:	ea80 0202 	eor.w	r2, r0, r2
   187e2:	ea81 0303 	eor.w	r3, r1, r3
   187e6:	ea82 0000 	eor.w	r0, r2, r0
   187ea:	ea83 0101 	eor.w	r1, r3, r1
   187ee:	ea80 0202 	eor.w	r2, r0, r2
   187f2:	ea81 0303 	eor.w	r3, r1, r3
   187f6:	2d36      	cmp	r5, #54	@ 0x36
   187f8:	bf88      	it	hi
   187fa:	bd30      	pophi	{r4, r5, pc}
   187fc:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
   18800:	ea4f 3101 	mov.w	r1, r1, lsl #12
   18804:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
   18808:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1880c:	d002      	beq.n	18814 <__adddf3+0x70>
   1880e:	4240      	negs	r0, r0
   18810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18814:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
   18818:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1881c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   18820:	d002      	beq.n	18828 <__adddf3+0x84>
   18822:	4252      	negs	r2, r2
   18824:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   18828:	ea94 0f05 	teq	r4, r5
   1882c:	f000 80a7 	beq.w	1897e <__adddf3+0x1da>
   18830:	f1a4 0401 	sub.w	r4, r4, #1
   18834:	f1d5 0e20 	rsbs	lr, r5, #32
   18838:	db0d      	blt.n	18856 <__adddf3+0xb2>
   1883a:	fa02 fc0e 	lsl.w	ip, r2, lr
   1883e:	fa22 f205 	lsr.w	r2, r2, r5
   18842:	1880      	adds	r0, r0, r2
   18844:	f141 0100 	adc.w	r1, r1, #0
   18848:	fa03 f20e 	lsl.w	r2, r3, lr
   1884c:	1880      	adds	r0, r0, r2
   1884e:	fa43 f305 	asr.w	r3, r3, r5
   18852:	4159      	adcs	r1, r3
   18854:	e00e      	b.n	18874 <__adddf3+0xd0>
   18856:	f1a5 0520 	sub.w	r5, r5, #32
   1885a:	f10e 0e20 	add.w	lr, lr, #32
   1885e:	2a01      	cmp	r2, #1
   18860:	fa03 fc0e 	lsl.w	ip, r3, lr
   18864:	bf28      	it	cs
   18866:	f04c 0c02 	orrcs.w	ip, ip, #2
   1886a:	fa43 f305 	asr.w	r3, r3, r5
   1886e:	18c0      	adds	r0, r0, r3
   18870:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   18874:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
   18878:	d507      	bpl.n	1888a <__adddf3+0xe6>
   1887a:	f04f 0e00 	mov.w	lr, #0
   1887e:	f1dc 0c00 	rsbs	ip, ip, #0
   18882:	eb7e 0000 	sbcs.w	r0, lr, r0
   18886:	eb6e 0101 	sbc.w	r1, lr, r1
   1888a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
   1888e:	d31b      	bcc.n	188c8 <__adddf3+0x124>
   18890:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
   18894:	d30c      	bcc.n	188b0 <__adddf3+0x10c>
   18896:	0849      	lsrs	r1, r1, #1
   18898:	ea5f 0030 	movs.w	r0, r0, rrx
   1889c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   188a0:	f104 0401 	add.w	r4, r4, #1
   188a4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   188a8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
   188ac:	f080 809a 	bcs.w	189e4 <__adddf3+0x240>
   188b0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
   188b4:	bf08      	it	eq
   188b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   188ba:	f150 0000 	adcs.w	r0, r0, #0
   188be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   188c2:	ea41 0105 	orr.w	r1, r1, r5
   188c6:	bd30      	pop	{r4, r5, pc}
   188c8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   188cc:	4140      	adcs	r0, r0
   188ce:	eb41 0101 	adc.w	r1, r1, r1
   188d2:	3c01      	subs	r4, #1
   188d4:	bf28      	it	cs
   188d6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
   188da:	d2e9      	bcs.n	188b0 <__adddf3+0x10c>
   188dc:	f091 0f00 	teq	r1, #0
   188e0:	bf04      	itt	eq
   188e2:	4601      	moveq	r1, r0
   188e4:	2000      	moveq	r0, #0
   188e6:	fab1 f381 	clz	r3, r1
   188ea:	bf08      	it	eq
   188ec:	3320      	addeq	r3, #32
   188ee:	f1a3 030b 	sub.w	r3, r3, #11
   188f2:	f1b3 0220 	subs.w	r2, r3, #32
   188f6:	da0c      	bge.n	18912 <__adddf3+0x16e>
   188f8:	320c      	adds	r2, #12
   188fa:	dd08      	ble.n	1890e <__adddf3+0x16a>
   188fc:	f102 0c14 	add.w	ip, r2, #20
   18900:	f1c2 020c 	rsb	r2, r2, #12
   18904:	fa01 f00c 	lsl.w	r0, r1, ip
   18908:	fa21 f102 	lsr.w	r1, r1, r2
   1890c:	e00c      	b.n	18928 <__adddf3+0x184>
   1890e:	f102 0214 	add.w	r2, r2, #20
   18912:	bfd8      	it	le
   18914:	f1c2 0c20 	rsble	ip, r2, #32
   18918:	fa01 f102 	lsl.w	r1, r1, r2
   1891c:	fa20 fc0c 	lsr.w	ip, r0, ip
   18920:	bfdc      	itt	le
   18922:	ea41 010c 	orrle.w	r1, r1, ip
   18926:	4090      	lslle	r0, r2
   18928:	1ae4      	subs	r4, r4, r3
   1892a:	bfa2      	ittt	ge
   1892c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   18930:	4329      	orrge	r1, r5
   18932:	bd30      	popge	{r4, r5, pc}
   18934:	ea6f 0404 	mvn.w	r4, r4
   18938:	3c1f      	subs	r4, #31
   1893a:	da1c      	bge.n	18976 <__adddf3+0x1d2>
   1893c:	340c      	adds	r4, #12
   1893e:	dc0e      	bgt.n	1895e <__adddf3+0x1ba>
   18940:	f104 0414 	add.w	r4, r4, #20
   18944:	f1c4 0220 	rsb	r2, r4, #32
   18948:	fa20 f004 	lsr.w	r0, r0, r4
   1894c:	fa01 f302 	lsl.w	r3, r1, r2
   18950:	ea40 0003 	orr.w	r0, r0, r3
   18954:	fa21 f304 	lsr.w	r3, r1, r4
   18958:	ea45 0103 	orr.w	r1, r5, r3
   1895c:	bd30      	pop	{r4, r5, pc}
   1895e:	f1c4 040c 	rsb	r4, r4, #12
   18962:	f1c4 0220 	rsb	r2, r4, #32
   18966:	fa20 f002 	lsr.w	r0, r0, r2
   1896a:	fa01 f304 	lsl.w	r3, r1, r4
   1896e:	ea40 0003 	orr.w	r0, r0, r3
   18972:	4629      	mov	r1, r5
   18974:	bd30      	pop	{r4, r5, pc}
   18976:	fa21 f004 	lsr.w	r0, r1, r4
   1897a:	4629      	mov	r1, r5
   1897c:	bd30      	pop	{r4, r5, pc}
   1897e:	f094 0f00 	teq	r4, #0
   18982:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
   18986:	bf06      	itte	eq
   18988:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
   1898c:	3401      	addeq	r4, #1
   1898e:	3d01      	subne	r5, #1
   18990:	e74e      	b.n	18830 <__adddf3+0x8c>
   18992:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   18996:	bf18      	it	ne
   18998:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1899c:	d029      	beq.n	189f2 <__adddf3+0x24e>
   1899e:	ea94 0f05 	teq	r4, r5
   189a2:	bf08      	it	eq
   189a4:	ea90 0f02 	teqeq	r0, r2
   189a8:	d005      	beq.n	189b6 <__adddf3+0x212>
   189aa:	ea54 0c00 	orrs.w	ip, r4, r0
   189ae:	bf04      	itt	eq
   189b0:	4619      	moveq	r1, r3
   189b2:	4610      	moveq	r0, r2
   189b4:	bd30      	pop	{r4, r5, pc}
   189b6:	ea91 0f03 	teq	r1, r3
   189ba:	bf1e      	ittt	ne
   189bc:	2100      	movne	r1, #0
   189be:	2000      	movne	r0, #0
   189c0:	bd30      	popne	{r4, r5, pc}
   189c2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   189c6:	d105      	bne.n	189d4 <__adddf3+0x230>
   189c8:	0040      	lsls	r0, r0, #1
   189ca:	4149      	adcs	r1, r1
   189cc:	bf28      	it	cs
   189ce:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
   189d2:	bd30      	pop	{r4, r5, pc}
   189d4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
   189d8:	bf3c      	itt	cc
   189da:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
   189de:	bd30      	popcc	{r4, r5, pc}
   189e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
   189e4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
   189e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
   189ec:	f04f 0000 	mov.w	r0, #0
   189f0:	bd30      	pop	{r4, r5, pc}
   189f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   189f6:	bf1a      	itte	ne
   189f8:	4619      	movne	r1, r3
   189fa:	4610      	movne	r0, r2
   189fc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   18a00:	bf1c      	itt	ne
   18a02:	460b      	movne	r3, r1
   18a04:	4602      	movne	r2, r0
   18a06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   18a0a:	bf06      	itte	eq
   18a0c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   18a10:	ea91 0f03 	teqeq	r1, r3
   18a14:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
   18a18:	bd30      	pop	{r4, r5, pc}
   18a1a:	bf00      	nop

00018a1c <__aeabi_ui2d>:
   18a1c:	f090 0f00 	teq	r0, #0
   18a20:	bf04      	itt	eq
   18a22:	2100      	moveq	r1, #0
   18a24:	4770      	bxeq	lr
   18a26:	b530      	push	{r4, r5, lr}
   18a28:	f44f 6480 	mov.w	r4, #1024	@ 0x400
   18a2c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
   18a30:	f04f 0500 	mov.w	r5, #0
   18a34:	f04f 0100 	mov.w	r1, #0
   18a38:	e750      	b.n	188dc <__adddf3+0x138>
   18a3a:	bf00      	nop

00018a3c <__aeabi_i2d>:
   18a3c:	f090 0f00 	teq	r0, #0
   18a40:	bf04      	itt	eq
   18a42:	2100      	moveq	r1, #0
   18a44:	4770      	bxeq	lr
   18a46:	b530      	push	{r4, r5, lr}
   18a48:	f44f 6480 	mov.w	r4, #1024	@ 0x400
   18a4c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
   18a50:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
   18a54:	bf48      	it	mi
   18a56:	4240      	negmi	r0, r0
   18a58:	f04f 0100 	mov.w	r1, #0
   18a5c:	e73e      	b.n	188dc <__adddf3+0x138>
   18a5e:	bf00      	nop

00018a60 <__aeabi_f2d>:
   18a60:	0042      	lsls	r2, r0, #1
   18a62:	ea4f 01e2 	mov.w	r1, r2, asr #3
   18a66:	ea4f 0131 	mov.w	r1, r1, rrx
   18a6a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   18a6e:	bf1f      	itttt	ne
   18a70:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
   18a74:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
   18a78:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
   18a7c:	4770      	bxne	lr
   18a7e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
   18a82:	bf08      	it	eq
   18a84:	4770      	bxeq	lr
   18a86:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
   18a8a:	bf04      	itt	eq
   18a8c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
   18a90:	4770      	bxeq	lr
   18a92:	b530      	push	{r4, r5, lr}
   18a94:	f44f 7460 	mov.w	r4, #896	@ 0x380
   18a98:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
   18a9c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
   18aa0:	e71c      	b.n	188dc <__adddf3+0x138>
   18aa2:	bf00      	nop

00018aa4 <__aeabi_ul2d>:
   18aa4:	ea50 0201 	orrs.w	r2, r0, r1
   18aa8:	bf08      	it	eq
   18aaa:	4770      	bxeq	lr
   18aac:	b530      	push	{r4, r5, lr}
   18aae:	f04f 0500 	mov.w	r5, #0
   18ab2:	e00a      	b.n	18aca <__aeabi_l2d+0x16>

00018ab4 <__aeabi_l2d>:
   18ab4:	ea50 0201 	orrs.w	r2, r0, r1
   18ab8:	bf08      	it	eq
   18aba:	4770      	bxeq	lr
   18abc:	b530      	push	{r4, r5, lr}
   18abe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
   18ac2:	d502      	bpl.n	18aca <__aeabi_l2d+0x16>
   18ac4:	4240      	negs	r0, r0
   18ac6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18aca:	f44f 6480 	mov.w	r4, #1024	@ 0x400
   18ace:	f104 0432 	add.w	r4, r4, #50	@ 0x32
   18ad2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   18ad6:	f43f aed8 	beq.w	1888a <__adddf3+0xe6>
   18ada:	f04f 0203 	mov.w	r2, #3
   18ade:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   18ae2:	bf18      	it	ne
   18ae4:	3203      	addne	r2, #3
   18ae6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   18aea:	bf18      	it	ne
   18aec:	3203      	addne	r2, #3
   18aee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   18af2:	f1c2 0320 	rsb	r3, r2, #32
   18af6:	fa00 fc03 	lsl.w	ip, r0, r3
   18afa:	fa20 f002 	lsr.w	r0, r0, r2
   18afe:	fa01 fe03 	lsl.w	lr, r1, r3
   18b02:	ea40 000e 	orr.w	r0, r0, lr
   18b06:	fa21 f102 	lsr.w	r1, r1, r2
   18b0a:	4414      	add	r4, r2
   18b0c:	e6bd      	b.n	1888a <__adddf3+0xe6>
   18b0e:	bf00      	nop

00018b10 <__aeabi_dmul>:
   18b10:	b570      	push	{r4, r5, r6, lr}
   18b12:	f04f 0cff 	mov.w	ip, #255	@ 0xff
   18b16:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
   18b1a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   18b1e:	bf1d      	ittte	ne
   18b20:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   18b24:	ea94 0f0c 	teqne	r4, ip
   18b28:	ea95 0f0c 	teqne	r5, ip
   18b2c:	f000 f8de 	bleq	18cec <__aeabi_dmul+0x1dc>
   18b30:	442c      	add	r4, r5
   18b32:	ea81 0603 	eor.w	r6, r1, r3
   18b36:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   18b3a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   18b3e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   18b42:	bf18      	it	ne
   18b44:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   18b48:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
   18b4c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
   18b50:	d038      	beq.n	18bc4 <__aeabi_dmul+0xb4>
   18b52:	fba0 ce02 	umull	ip, lr, r0, r2
   18b56:	f04f 0500 	mov.w	r5, #0
   18b5a:	fbe1 e502 	umlal	lr, r5, r1, r2
   18b5e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
   18b62:	fbe0 e503 	umlal	lr, r5, r0, r3
   18b66:	f04f 0600 	mov.w	r6, #0
   18b6a:	fbe1 5603 	umlal	r5, r6, r1, r3
   18b6e:	f09c 0f00 	teq	ip, #0
   18b72:	bf18      	it	ne
   18b74:	f04e 0e01 	orrne.w	lr, lr, #1
   18b78:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
   18b7c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
   18b80:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
   18b84:	d204      	bcs.n	18b90 <__aeabi_dmul+0x80>
   18b86:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   18b8a:	416d      	adcs	r5, r5
   18b8c:	eb46 0606 	adc.w	r6, r6, r6
   18b90:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   18b94:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   18b98:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   18b9c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   18ba0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   18ba4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
   18ba8:	bf88      	it	hi
   18baa:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
   18bae:	d81e      	bhi.n	18bee <__aeabi_dmul+0xde>
   18bb0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
   18bb4:	bf08      	it	eq
   18bb6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   18bba:	f150 0000 	adcs.w	r0, r0, #0
   18bbe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   18bc2:	bd70      	pop	{r4, r5, r6, pc}
   18bc4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
   18bc8:	ea46 0101 	orr.w	r1, r6, r1
   18bcc:	ea40 0002 	orr.w	r0, r0, r2
   18bd0:	ea81 0103 	eor.w	r1, r1, r3
   18bd4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   18bd8:	bfc2      	ittt	gt
   18bda:	ebd4 050c 	rsbsgt	r5, r4, ip
   18bde:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   18be2:	bd70      	popgt	{r4, r5, r6, pc}
   18be4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
   18be8:	f04f 0e00 	mov.w	lr, #0
   18bec:	3c01      	subs	r4, #1
   18bee:	f300 80ab 	bgt.w	18d48 <__aeabi_dmul+0x238>
   18bf2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
   18bf6:	bfde      	ittt	le
   18bf8:	2000      	movle	r0, #0
   18bfa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
   18bfe:	bd70      	pople	{r4, r5, r6, pc}
   18c00:	f1c4 0400 	rsb	r4, r4, #0
   18c04:	3c20      	subs	r4, #32
   18c06:	da35      	bge.n	18c74 <__aeabi_dmul+0x164>
   18c08:	340c      	adds	r4, #12
   18c0a:	dc1b      	bgt.n	18c44 <__aeabi_dmul+0x134>
   18c0c:	f104 0414 	add.w	r4, r4, #20
   18c10:	f1c4 0520 	rsb	r5, r4, #32
   18c14:	fa00 f305 	lsl.w	r3, r0, r5
   18c18:	fa20 f004 	lsr.w	r0, r0, r4
   18c1c:	fa01 f205 	lsl.w	r2, r1, r5
   18c20:	ea40 0002 	orr.w	r0, r0, r2
   18c24:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
   18c28:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
   18c2c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   18c30:	fa21 f604 	lsr.w	r6, r1, r4
   18c34:	eb42 0106 	adc.w	r1, r2, r6
   18c38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   18c3c:	bf08      	it	eq
   18c3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   18c42:	bd70      	pop	{r4, r5, r6, pc}
   18c44:	f1c4 040c 	rsb	r4, r4, #12
   18c48:	f1c4 0520 	rsb	r5, r4, #32
   18c4c:	fa00 f304 	lsl.w	r3, r0, r4
   18c50:	fa20 f005 	lsr.w	r0, r0, r5
   18c54:	fa01 f204 	lsl.w	r2, r1, r4
   18c58:	ea40 0002 	orr.w	r0, r0, r2
   18c5c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
   18c60:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   18c64:	f141 0100 	adc.w	r1, r1, #0
   18c68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   18c6c:	bf08      	it	eq
   18c6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   18c72:	bd70      	pop	{r4, r5, r6, pc}
   18c74:	f1c4 0520 	rsb	r5, r4, #32
   18c78:	fa00 f205 	lsl.w	r2, r0, r5
   18c7c:	ea4e 0e02 	orr.w	lr, lr, r2
   18c80:	fa20 f304 	lsr.w	r3, r0, r4
   18c84:	fa01 f205 	lsl.w	r2, r1, r5
   18c88:	ea43 0302 	orr.w	r3, r3, r2
   18c8c:	fa21 f004 	lsr.w	r0, r1, r4
   18c90:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
   18c94:	fa21 f204 	lsr.w	r2, r1, r4
   18c98:	ea20 0002 	bic.w	r0, r0, r2
   18c9c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   18ca0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   18ca4:	bf08      	it	eq
   18ca6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   18caa:	bd70      	pop	{r4, r5, r6, pc}
   18cac:	f094 0f00 	teq	r4, #0
   18cb0:	d10f      	bne.n	18cd2 <__aeabi_dmul+0x1c2>
   18cb2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
   18cb6:	0040      	lsls	r0, r0, #1
   18cb8:	eb41 0101 	adc.w	r1, r1, r1
   18cbc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
   18cc0:	bf08      	it	eq
   18cc2:	3c01      	subeq	r4, #1
   18cc4:	d0f7      	beq.n	18cb6 <__aeabi_dmul+0x1a6>
   18cc6:	ea41 0106 	orr.w	r1, r1, r6
   18cca:	f095 0f00 	teq	r5, #0
   18cce:	bf18      	it	ne
   18cd0:	4770      	bxne	lr
   18cd2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
   18cd6:	0052      	lsls	r2, r2, #1
   18cd8:	eb43 0303 	adc.w	r3, r3, r3
   18cdc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
   18ce0:	bf08      	it	eq
   18ce2:	3d01      	subeq	r5, #1
   18ce4:	d0f7      	beq.n	18cd6 <__aeabi_dmul+0x1c6>
   18ce6:	ea43 0306 	orr.w	r3, r3, r6
   18cea:	4770      	bx	lr
   18cec:	ea94 0f0c 	teq	r4, ip
   18cf0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   18cf4:	bf18      	it	ne
   18cf6:	ea95 0f0c 	teqne	r5, ip
   18cfa:	d00c      	beq.n	18d16 <__aeabi_dmul+0x206>
   18cfc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   18d00:	bf18      	it	ne
   18d02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   18d06:	d1d1      	bne.n	18cac <__aeabi_dmul+0x19c>
   18d08:	ea81 0103 	eor.w	r1, r1, r3
   18d0c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
   18d10:	f04f 0000 	mov.w	r0, #0
   18d14:	bd70      	pop	{r4, r5, r6, pc}
   18d16:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   18d1a:	bf06      	itte	eq
   18d1c:	4610      	moveq	r0, r2
   18d1e:	4619      	moveq	r1, r3
   18d20:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   18d24:	d019      	beq.n	18d5a <__aeabi_dmul+0x24a>
   18d26:	ea94 0f0c 	teq	r4, ip
   18d2a:	d102      	bne.n	18d32 <__aeabi_dmul+0x222>
   18d2c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   18d30:	d113      	bne.n	18d5a <__aeabi_dmul+0x24a>
   18d32:	ea95 0f0c 	teq	r5, ip
   18d36:	d105      	bne.n	18d44 <__aeabi_dmul+0x234>
   18d38:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   18d3c:	bf1c      	itt	ne
   18d3e:	4610      	movne	r0, r2
   18d40:	4619      	movne	r1, r3
   18d42:	d10a      	bne.n	18d5a <__aeabi_dmul+0x24a>
   18d44:	ea81 0103 	eor.w	r1, r1, r3
   18d48:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
   18d4c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
   18d50:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
   18d54:	f04f 0000 	mov.w	r0, #0
   18d58:	bd70      	pop	{r4, r5, r6, pc}
   18d5a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
   18d5e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
   18d62:	bd70      	pop	{r4, r5, r6, pc}

00018d64 <__aeabi_ddiv>:
   18d64:	b570      	push	{r4, r5, r6, lr}
   18d66:	f04f 0cff 	mov.w	ip, #255	@ 0xff
   18d6a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
   18d6e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   18d72:	bf1d      	ittte	ne
   18d74:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   18d78:	ea94 0f0c 	teqne	r4, ip
   18d7c:	ea95 0f0c 	teqne	r5, ip
   18d80:	f000 f8a7 	bleq	18ed2 <__aeabi_ddiv+0x16e>
   18d84:	eba4 0405 	sub.w	r4, r4, r5
   18d88:	ea81 0e03 	eor.w	lr, r1, r3
   18d8c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   18d90:	ea4f 3101 	mov.w	r1, r1, lsl #12
   18d94:	f000 8088 	beq.w	18ea8 <__aeabi_ddiv+0x144>
   18d98:	ea4f 3303 	mov.w	r3, r3, lsl #12
   18d9c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
   18da0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   18da4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   18da8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   18dac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   18db0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   18db4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   18db8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
   18dbc:	429d      	cmp	r5, r3
   18dbe:	bf08      	it	eq
   18dc0:	4296      	cmpeq	r6, r2
   18dc2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
   18dc6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
   18dca:	d202      	bcs.n	18dd2 <__aeabi_ddiv+0x6e>
   18dcc:	085b      	lsrs	r3, r3, #1
   18dce:	ea4f 0232 	mov.w	r2, r2, rrx
   18dd2:	1ab6      	subs	r6, r6, r2
   18dd4:	eb65 0503 	sbc.w	r5, r5, r3
   18dd8:	085b      	lsrs	r3, r3, #1
   18dda:	ea4f 0232 	mov.w	r2, r2, rrx
   18dde:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
   18de2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
   18de6:	ebb6 0e02 	subs.w	lr, r6, r2
   18dea:	eb75 0e03 	sbcs.w	lr, r5, r3
   18dee:	bf22      	ittt	cs
   18df0:	1ab6      	subcs	r6, r6, r2
   18df2:	4675      	movcs	r5, lr
   18df4:	ea40 000c 	orrcs.w	r0, r0, ip
   18df8:	085b      	lsrs	r3, r3, #1
   18dfa:	ea4f 0232 	mov.w	r2, r2, rrx
   18dfe:	ebb6 0e02 	subs.w	lr, r6, r2
   18e02:	eb75 0e03 	sbcs.w	lr, r5, r3
   18e06:	bf22      	ittt	cs
   18e08:	1ab6      	subcs	r6, r6, r2
   18e0a:	4675      	movcs	r5, lr
   18e0c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   18e10:	085b      	lsrs	r3, r3, #1
   18e12:	ea4f 0232 	mov.w	r2, r2, rrx
   18e16:	ebb6 0e02 	subs.w	lr, r6, r2
   18e1a:	eb75 0e03 	sbcs.w	lr, r5, r3
   18e1e:	bf22      	ittt	cs
   18e20:	1ab6      	subcs	r6, r6, r2
   18e22:	4675      	movcs	r5, lr
   18e24:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   18e28:	085b      	lsrs	r3, r3, #1
   18e2a:	ea4f 0232 	mov.w	r2, r2, rrx
   18e2e:	ebb6 0e02 	subs.w	lr, r6, r2
   18e32:	eb75 0e03 	sbcs.w	lr, r5, r3
   18e36:	bf22      	ittt	cs
   18e38:	1ab6      	subcs	r6, r6, r2
   18e3a:	4675      	movcs	r5, lr
   18e3c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   18e40:	ea55 0e06 	orrs.w	lr, r5, r6
   18e44:	d018      	beq.n	18e78 <__aeabi_ddiv+0x114>
   18e46:	ea4f 1505 	mov.w	r5, r5, lsl #4
   18e4a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   18e4e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   18e52:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   18e56:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   18e5a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   18e5e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   18e62:	d1c0      	bne.n	18de6 <__aeabi_ddiv+0x82>
   18e64:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
   18e68:	d10b      	bne.n	18e82 <__aeabi_ddiv+0x11e>
   18e6a:	ea41 0100 	orr.w	r1, r1, r0
   18e6e:	f04f 0000 	mov.w	r0, #0
   18e72:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
   18e76:	e7b6      	b.n	18de6 <__aeabi_ddiv+0x82>
   18e78:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
   18e7c:	bf04      	itt	eq
   18e7e:	4301      	orreq	r1, r0
   18e80:	2000      	moveq	r0, #0
   18e82:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
   18e86:	bf88      	it	hi
   18e88:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
   18e8c:	f63f aeaf 	bhi.w	18bee <__aeabi_dmul+0xde>
   18e90:	ebb5 0c03 	subs.w	ip, r5, r3
   18e94:	bf04      	itt	eq
   18e96:	ebb6 0c02 	subseq.w	ip, r6, r2
   18e9a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   18e9e:	f150 0000 	adcs.w	r0, r0, #0
   18ea2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   18ea6:	bd70      	pop	{r4, r5, r6, pc}
   18ea8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
   18eac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   18eb0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   18eb4:	bfc2      	ittt	gt
   18eb6:	ebd4 050c 	rsbsgt	r5, r4, ip
   18eba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   18ebe:	bd70      	popgt	{r4, r5, r6, pc}
   18ec0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
   18ec4:	f04f 0e00 	mov.w	lr, #0
   18ec8:	3c01      	subs	r4, #1
   18eca:	e690      	b.n	18bee <__aeabi_dmul+0xde>
   18ecc:	ea45 0e06 	orr.w	lr, r5, r6
   18ed0:	e68d      	b.n	18bee <__aeabi_dmul+0xde>
   18ed2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   18ed6:	ea94 0f0c 	teq	r4, ip
   18eda:	bf08      	it	eq
   18edc:	ea95 0f0c 	teqeq	r5, ip
   18ee0:	f43f af3b 	beq.w	18d5a <__aeabi_dmul+0x24a>
   18ee4:	ea94 0f0c 	teq	r4, ip
   18ee8:	d10a      	bne.n	18f00 <__aeabi_ddiv+0x19c>
   18eea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   18eee:	f47f af34 	bne.w	18d5a <__aeabi_dmul+0x24a>
   18ef2:	ea95 0f0c 	teq	r5, ip
   18ef6:	f47f af25 	bne.w	18d44 <__aeabi_dmul+0x234>
   18efa:	4610      	mov	r0, r2
   18efc:	4619      	mov	r1, r3
   18efe:	e72c      	b.n	18d5a <__aeabi_dmul+0x24a>
   18f00:	ea95 0f0c 	teq	r5, ip
   18f04:	d106      	bne.n	18f14 <__aeabi_ddiv+0x1b0>
   18f06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   18f0a:	f43f aefd 	beq.w	18d08 <__aeabi_dmul+0x1f8>
   18f0e:	4610      	mov	r0, r2
   18f10:	4619      	mov	r1, r3
   18f12:	e722      	b.n	18d5a <__aeabi_dmul+0x24a>
   18f14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   18f18:	bf18      	it	ne
   18f1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   18f1e:	f47f aec5 	bne.w	18cac <__aeabi_dmul+0x19c>
   18f22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   18f26:	f47f af0d 	bne.w	18d44 <__aeabi_dmul+0x234>
   18f2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   18f2e:	f47f aeeb 	bne.w	18d08 <__aeabi_dmul+0x1f8>
   18f32:	e712      	b.n	18d5a <__aeabi_dmul+0x24a>

00018f34 <__gedf2>:
   18f34:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
   18f38:	e006      	b.n	18f48 <__cmpdf2+0x4>
   18f3a:	bf00      	nop

00018f3c <__ledf2>:
   18f3c:	f04f 0c01 	mov.w	ip, #1
   18f40:	e002      	b.n	18f48 <__cmpdf2+0x4>
   18f42:	bf00      	nop

00018f44 <__cmpdf2>:
   18f44:	f04f 0c01 	mov.w	ip, #1
   18f48:	f84d cd04 	str.w	ip, [sp, #-4]!
   18f4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   18f50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   18f54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   18f58:	bf18      	it	ne
   18f5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   18f5e:	d01b      	beq.n	18f98 <__cmpdf2+0x54>
   18f60:	b001      	add	sp, #4
   18f62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   18f66:	bf0c      	ite	eq
   18f68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   18f6c:	ea91 0f03 	teqne	r1, r3
   18f70:	bf02      	ittt	eq
   18f72:	ea90 0f02 	teqeq	r0, r2
   18f76:	2000      	moveq	r0, #0
   18f78:	4770      	bxeq	lr
   18f7a:	f110 0f00 	cmn.w	r0, #0
   18f7e:	ea91 0f03 	teq	r1, r3
   18f82:	bf58      	it	pl
   18f84:	4299      	cmppl	r1, r3
   18f86:	bf08      	it	eq
   18f88:	4290      	cmpeq	r0, r2
   18f8a:	bf2c      	ite	cs
   18f8c:	17d8      	asrcs	r0, r3, #31
   18f8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   18f92:	f040 0001 	orr.w	r0, r0, #1
   18f96:	4770      	bx	lr
   18f98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   18f9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   18fa0:	d102      	bne.n	18fa8 <__cmpdf2+0x64>
   18fa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   18fa6:	d107      	bne.n	18fb8 <__cmpdf2+0x74>
   18fa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   18fac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   18fb0:	d1d6      	bne.n	18f60 <__cmpdf2+0x1c>
   18fb2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   18fb6:	d0d3      	beq.n	18f60 <__cmpdf2+0x1c>
   18fb8:	f85d 0b04 	ldr.w	r0, [sp], #4
   18fbc:	4770      	bx	lr
   18fbe:	bf00      	nop

00018fc0 <__aeabi_cdrcmple>:
   18fc0:	4684      	mov	ip, r0
   18fc2:	4610      	mov	r0, r2
   18fc4:	4662      	mov	r2, ip
   18fc6:	468c      	mov	ip, r1
   18fc8:	4619      	mov	r1, r3
   18fca:	4663      	mov	r3, ip
   18fcc:	e000      	b.n	18fd0 <__aeabi_cdcmpeq>
   18fce:	bf00      	nop

00018fd0 <__aeabi_cdcmpeq>:
   18fd0:	b501      	push	{r0, lr}
   18fd2:	f7ff ffb7 	bl	18f44 <__cmpdf2>
   18fd6:	2800      	cmp	r0, #0
   18fd8:	bf48      	it	mi
   18fda:	f110 0f00 	cmnmi.w	r0, #0
   18fde:	bd01      	pop	{r0, pc}

00018fe0 <__aeabi_dcmpeq>:
   18fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
   18fe4:	f7ff fff4 	bl	18fd0 <__aeabi_cdcmpeq>
   18fe8:	bf0c      	ite	eq
   18fea:	2001      	moveq	r0, #1
   18fec:	2000      	movne	r0, #0
   18fee:	f85d fb08 	ldr.w	pc, [sp], #8
   18ff2:	bf00      	nop

00018ff4 <__aeabi_dcmplt>:
   18ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
   18ff8:	f7ff ffea 	bl	18fd0 <__aeabi_cdcmpeq>
   18ffc:	bf34      	ite	cc
   18ffe:	2001      	movcc	r0, #1
   19000:	2000      	movcs	r0, #0
   19002:	f85d fb08 	ldr.w	pc, [sp], #8
   19006:	bf00      	nop

00019008 <__aeabi_dcmple>:
   19008:	f84d ed08 	str.w	lr, [sp, #-8]!
   1900c:	f7ff ffe0 	bl	18fd0 <__aeabi_cdcmpeq>
   19010:	bf94      	ite	ls
   19012:	2001      	movls	r0, #1
   19014:	2000      	movhi	r0, #0
   19016:	f85d fb08 	ldr.w	pc, [sp], #8
   1901a:	bf00      	nop

0001901c <__aeabi_dcmpge>:
   1901c:	f84d ed08 	str.w	lr, [sp, #-8]!
   19020:	f7ff ffce 	bl	18fc0 <__aeabi_cdrcmple>
   19024:	bf94      	ite	ls
   19026:	2001      	movls	r0, #1
   19028:	2000      	movhi	r0, #0
   1902a:	f85d fb08 	ldr.w	pc, [sp], #8
   1902e:	bf00      	nop

00019030 <__aeabi_dcmpgt>:
   19030:	f84d ed08 	str.w	lr, [sp, #-8]!
   19034:	f7ff ffc4 	bl	18fc0 <__aeabi_cdrcmple>
   19038:	bf34      	ite	cc
   1903a:	2001      	movcc	r0, #1
   1903c:	2000      	movcs	r0, #0
   1903e:	f85d fb08 	ldr.w	pc, [sp], #8
   19042:	bf00      	nop

00019044 <__aeabi_dcmpun>:
   19044:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   19048:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1904c:	d102      	bne.n	19054 <__aeabi_dcmpun+0x10>
   1904e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   19052:	d10a      	bne.n	1906a <__aeabi_dcmpun+0x26>
   19054:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   19058:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1905c:	d102      	bne.n	19064 <__aeabi_dcmpun+0x20>
   1905e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   19062:	d102      	bne.n	1906a <__aeabi_dcmpun+0x26>
   19064:	f04f 0000 	mov.w	r0, #0
   19068:	4770      	bx	lr
   1906a:	f04f 0001 	mov.w	r0, #1
   1906e:	4770      	bx	lr

00019070 <__aeabi_d2iz>:
   19070:	ea4f 0241 	mov.w	r2, r1, lsl #1
   19074:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
   19078:	d215      	bcs.n	190a6 <__aeabi_d2iz+0x36>
   1907a:	d511      	bpl.n	190a0 <__aeabi_d2iz+0x30>
   1907c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
   19080:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   19084:	d912      	bls.n	190ac <__aeabi_d2iz+0x3c>
   19086:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1908a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
   1908e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   19092:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
   19096:	fa23 f002 	lsr.w	r0, r3, r2
   1909a:	bf18      	it	ne
   1909c:	4240      	negne	r0, r0
   1909e:	4770      	bx	lr
   190a0:	f04f 0000 	mov.w	r0, #0
   190a4:	4770      	bx	lr
   190a6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   190aa:	d105      	bne.n	190b8 <__aeabi_d2iz+0x48>
   190ac:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
   190b0:	bf08      	it	eq
   190b2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
   190b6:	4770      	bx	lr
   190b8:	f04f 0000 	mov.w	r0, #0
   190bc:	4770      	bx	lr
   190be:	bf00      	nop

000190c0 <__aeabi_d2f>:
   190c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   190c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
   190c8:	bf24      	itt	cs
   190ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
   190ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
   190d2:	d90d      	bls.n	190f0 <__aeabi_d2f+0x30>
   190d4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
   190d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   190dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   190e0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
   190e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   190e8:	bf08      	it	eq
   190ea:	f020 0001 	biceq.w	r0, r0, #1
   190ee:	4770      	bx	lr
   190f0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
   190f4:	d121      	bne.n	1913a <__aeabi_d2f+0x7a>
   190f6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
   190fa:	bfbc      	itt	lt
   190fc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
   19100:	4770      	bxlt	lr
   19102:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
   19106:	ea4f 5252 	mov.w	r2, r2, lsr #21
   1910a:	f1c2 0218 	rsb	r2, r2, #24
   1910e:	f1c2 0c20 	rsb	ip, r2, #32
   19112:	fa10 f30c 	lsls.w	r3, r0, ip
   19116:	fa20 f002 	lsr.w	r0, r0, r2
   1911a:	bf18      	it	ne
   1911c:	f040 0001 	orrne.w	r0, r0, #1
   19120:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   19124:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   19128:	fa03 fc0c 	lsl.w	ip, r3, ip
   1912c:	ea40 000c 	orr.w	r0, r0, ip
   19130:	fa23 f302 	lsr.w	r3, r3, r2
   19134:	ea4f 0343 	mov.w	r3, r3, lsl #1
   19138:	e7cc      	b.n	190d4 <__aeabi_d2f+0x14>
   1913a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   1913e:	d107      	bne.n	19150 <__aeabi_d2f+0x90>
   19140:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   19144:	bf1e      	ittt	ne
   19146:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
   1914a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
   1914e:	4770      	bxne	lr
   19150:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
   19154:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
   19158:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
   1915c:	4770      	bx	lr
   1915e:	bf00      	nop

00019160 <__aeabi_ldivmod>:
   19160:	b97b      	cbnz	r3, 19182 <__aeabi_ldivmod+0x22>
   19162:	b972      	cbnz	r2, 19182 <__aeabi_ldivmod+0x22>
   19164:	2900      	cmp	r1, #0
   19166:	bfbe      	ittt	lt
   19168:	2000      	movlt	r0, #0
   1916a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
   1916e:	e006      	blt.n	1917e <__aeabi_ldivmod+0x1e>
   19170:	bf08      	it	eq
   19172:	2800      	cmpeq	r0, #0
   19174:	bf1c      	itt	ne
   19176:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
   1917a:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
   1917e:	f000 b857 	b.w	19230 <__aeabi_idiv0>
   19182:	f1ad 0c08 	sub.w	ip, sp, #8
   19186:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1918a:	2900      	cmp	r1, #0
   1918c:	db09      	blt.n	191a2 <__aeabi_ldivmod+0x42>
   1918e:	2b00      	cmp	r3, #0
   19190:	db1a      	blt.n	191c8 <__aeabi_ldivmod+0x68>
   19192:	f012 fbd7 	bl	2b944 <__udivmoddi4>
   19196:	f8dd e004 	ldr.w	lr, [sp, #4]
   1919a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1919e:	b004      	add	sp, #16
   191a0:	4770      	bx	lr
   191a2:	4240      	negs	r0, r0
   191a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   191a8:	2b00      	cmp	r3, #0
   191aa:	db1b      	blt.n	191e4 <__aeabi_ldivmod+0x84>
   191ac:	f012 fbca 	bl	2b944 <__udivmoddi4>
   191b0:	f8dd e004 	ldr.w	lr, [sp, #4]
   191b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   191b8:	b004      	add	sp, #16
   191ba:	4240      	negs	r0, r0
   191bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   191c0:	4252      	negs	r2, r2
   191c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   191c6:	4770      	bx	lr
   191c8:	4252      	negs	r2, r2
   191ca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   191ce:	f012 fbb9 	bl	2b944 <__udivmoddi4>
   191d2:	f8dd e004 	ldr.w	lr, [sp, #4]
   191d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   191da:	b004      	add	sp, #16
   191dc:	4240      	negs	r0, r0
   191de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   191e2:	4770      	bx	lr
   191e4:	4252      	negs	r2, r2
   191e6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   191ea:	f012 fbab 	bl	2b944 <__udivmoddi4>
   191ee:	f8dd e004 	ldr.w	lr, [sp, #4]
   191f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   191f6:	b004      	add	sp, #16
   191f8:	4252      	negs	r2, r2
   191fa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   191fe:	4770      	bx	lr

00019200 <__aeabi_uldivmod>:
   19200:	b953      	cbnz	r3, 19218 <__aeabi_uldivmod+0x18>
   19202:	b94a      	cbnz	r2, 19218 <__aeabi_uldivmod+0x18>
   19204:	2900      	cmp	r1, #0
   19206:	bf08      	it	eq
   19208:	2800      	cmpeq	r0, #0
   1920a:	bf1c      	itt	ne
   1920c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
   19210:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
   19214:	f000 b80c 	b.w	19230 <__aeabi_idiv0>
   19218:	f1ad 0c08 	sub.w	ip, sp, #8
   1921c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   19220:	f012 fb90 	bl	2b944 <__udivmoddi4>
   19224:	f8dd e004 	ldr.w	lr, [sp, #4]
   19228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1922c:	b004      	add	sp, #16
   1922e:	4770      	bx	lr

00019230 <__aeabi_idiv0>:
   19230:	4770      	bx	lr
   19232:	bf00      	nop

00019234 <__aeabi_d2uiz>:
   19234:	004a      	lsls	r2, r1, #1
   19236:	d211      	bcs.n	1925c <__aeabi_d2uiz+0x28>
   19238:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
   1923c:	d211      	bcs.n	19262 <__aeabi_d2uiz+0x2e>
   1923e:	d50d      	bpl.n	1925c <__aeabi_d2uiz+0x28>
   19240:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
   19244:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   19248:	d40e      	bmi.n	19268 <__aeabi_d2uiz+0x34>
   1924a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1924e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
   19252:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   19256:	fa23 f002 	lsr.w	r0, r3, r2
   1925a:	4770      	bx	lr
   1925c:	f04f 0000 	mov.w	r0, #0
   19260:	4770      	bx	lr
   19262:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   19266:	d102      	bne.n	1926e <__aeabi_d2uiz+0x3a>
   19268:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   1926c:	4770      	bx	lr
   1926e:	f04f 0000 	mov.w	r0, #0
   19272:	4770      	bx	lr

00019274 <__restore_core_regs>:
   19274:	f100 0134 	add.w	r1, r0, #52	@ 0x34
   19278:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
   1927c:	469c      	mov	ip, r3
   1927e:	46a6      	mov	lr, r4
   19280:	f84c 5d04 	str.w	r5, [ip, #-4]!
   19284:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
   19288:	46e5      	mov	sp, ip
   1928a:	bd00      	pop	{pc}

0001928c <__gnu_Unwind_Restore_VFP>:
   1928c:	ec90 0b21 	fldmiax	r0, {d0-d15}	@ Deprecated
   19290:	4770      	bx	lr
   19292:	bf00      	nop

00019294 <__gnu_Unwind_Save_VFP>:
   19294:	ec80 0b21 	fstmiax	r0, {d0-d15}	@ Deprecated
   19298:	4770      	bx	lr
   1929a:	bf00      	nop

0001929c <__gnu_Unwind_Restore_VFP_D>:
   1929c:	ec90 0b20 	vldmia	r0, {d0-d15}
   192a0:	4770      	bx	lr
   192a2:	bf00      	nop

000192a4 <__gnu_Unwind_Save_VFP_D>:
   192a4:	ec80 0b20 	vstmia	r0, {d0-d15}
   192a8:	4770      	bx	lr
   192aa:	bf00      	nop

000192ac <__gnu_Unwind_Restore_VFP_D_16_to_31>:
   192ac:	ecd0 0b20 	vldmia	r0, {d16-d31}
   192b0:	4770      	bx	lr
   192b2:	bf00      	nop

000192b4 <__gnu_Unwind_Save_VFP_D_16_to_31>:
   192b4:	ecc0 0b20 	vstmia	r0, {d16-d31}
   192b8:	4770      	bx	lr
   192ba:	bf00      	nop

000192bc <__gnu_Unwind_Restore_WMMXD>:
   192bc:	ecf0 0102 	ldfe	f0, [r0], #8
   192c0:	ecf0 1102 	ldfe	f1, [r0], #8
   192c4:	ecf0 2102 	ldfe	f2, [r0], #8
   192c8:	ecf0 3102 	ldfe	f3, [r0], #8
   192cc:	ecf0 4102 	ldfe	f4, [r0], #8
   192d0:	ecf0 5102 	ldfe	f5, [r0], #8
   192d4:	ecf0 6102 	ldfe	f6, [r0], #8
   192d8:	ecf0 7102 	ldfe	f7, [r0], #8
   192dc:	ecf0 8102 	ldfp	f0, [r0], #8
   192e0:	ecf0 9102 	ldfp	f1, [r0], #8
   192e4:	ecf0 a102 	ldfp	f2, [r0], #8
   192e8:	ecf0 b102 	ldfp	f3, [r0], #8
   192ec:	ecf0 c102 	ldfp	f4, [r0], #8
   192f0:	ecf0 d102 	ldfp	f5, [r0], #8
   192f4:	ecf0 e102 	ldfp	f6, [r0], #8
   192f8:	ecf0 f102 	ldfp	f7, [r0], #8
   192fc:	4770      	bx	lr
   192fe:	bf00      	nop

00019300 <__gnu_Unwind_Save_WMMXD>:
   19300:	ece0 0102 	stfe	f0, [r0], #8
   19304:	ece0 1102 	stfe	f1, [r0], #8
   19308:	ece0 2102 	stfe	f2, [r0], #8
   1930c:	ece0 3102 	stfe	f3, [r0], #8
   19310:	ece0 4102 	stfe	f4, [r0], #8
   19314:	ece0 5102 	stfe	f5, [r0], #8
   19318:	ece0 6102 	stfe	f6, [r0], #8
   1931c:	ece0 7102 	stfe	f7, [r0], #8
   19320:	ece0 8102 	stfp	f0, [r0], #8
   19324:	ece0 9102 	stfp	f1, [r0], #8
   19328:	ece0 a102 	stfp	f2, [r0], #8
   1932c:	ece0 b102 	stfp	f3, [r0], #8
   19330:	ece0 c102 	stfp	f4, [r0], #8
   19334:	ece0 d102 	stfp	f5, [r0], #8
   19338:	ece0 e102 	stfp	f6, [r0], #8
   1933c:	ece0 f102 	stfp	f7, [r0], #8
   19340:	4770      	bx	lr
   19342:	bf00      	nop

00019344 <__gnu_Unwind_Restore_WMMXC>:
   19344:	fcb0 8101 	ldc2	1, cr8, [r0], #4
   19348:	fcb0 9101 	ldc2	1, cr9, [r0], #4
   1934c:	fcb0 a101 	ldc2	1, cr10, [r0], #4
   19350:	fcb0 b101 	ldc2	1, cr11, [r0], #4
   19354:	4770      	bx	lr
   19356:	bf00      	nop

00019358 <__gnu_Unwind_Save_WMMXC>:
   19358:	fca0 8101 	stc2	1, cr8, [r0], #4
   1935c:	fca0 9101 	stc2	1, cr9, [r0], #4
   19360:	fca0 a101 	stc2	1, cr10, [r0], #4
   19364:	fca0 b101 	stc2	1, cr11, [r0], #4
   19368:	4770      	bx	lr
   1936a:	bf00      	nop

0001936c <_Unwind_RaiseException>:
   1936c:	46ec      	mov	ip, sp
   1936e:	b500      	push	{lr}
   19370:	e92d 5000 	stmdb	sp!, {ip, lr}
   19374:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   19378:	f04f 0300 	mov.w	r3, #0
   1937c:	e92d 000c 	stmdb	sp!, {r2, r3}
   19380:	a901      	add	r1, sp, #4
   19382:	f026 fdd5 	bl	3ff30 <__gnu_Unwind_RaiseException>
   19386:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
   1938a:	b012      	add	sp, #72	@ 0x48
   1938c:	4770      	bx	lr
   1938e:	bf00      	nop

00019390 <_Unwind_Resume>:
   19390:	46ec      	mov	ip, sp
   19392:	b500      	push	{lr}
   19394:	e92d 5000 	stmdb	sp!, {ip, lr}
   19398:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1939c:	f04f 0300 	mov.w	r3, #0
   193a0:	e92d 000c 	stmdb	sp!, {r2, r3}
   193a4:	a901      	add	r1, sp, #4
   193a6:	f026 fdff 	bl	3ffa8 <__gnu_Unwind_Resume>
   193aa:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
   193ae:	b012      	add	sp, #72	@ 0x48
   193b0:	4770      	bx	lr
   193b2:	bf00      	nop

000193b4 <_Unwind_Resume_or_Rethrow>:
   193b4:	46ec      	mov	ip, sp
   193b6:	b500      	push	{lr}
   193b8:	e92d 5000 	stmdb	sp!, {ip, lr}
   193bc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   193c0:	f04f 0300 	mov.w	r3, #0
   193c4:	e92d 000c 	stmdb	sp!, {r2, r3}
   193c8:	a901      	add	r1, sp, #4
   193ca:	f026 fe0f 	bl	3ffec <__gnu_Unwind_Resume_or_Rethrow>
   193ce:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
   193d2:	b012      	add	sp, #72	@ 0x48
   193d4:	4770      	bx	lr
   193d6:	bf00      	nop

000193d8 <_Unwind_ForcedUnwind>:
   193d8:	46ec      	mov	ip, sp
   193da:	b500      	push	{lr}
   193dc:	e92d 5000 	stmdb	sp!, {ip, lr}
   193e0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   193e4:	f04f 0300 	mov.w	r3, #0
   193e8:	e92d 000c 	stmdb	sp!, {r2, r3}
   193ec:	ab01      	add	r3, sp, #4
   193ee:	f026 fdd3 	bl	3ff98 <__gnu_Unwind_ForcedUnwind>
   193f2:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
   193f6:	b012      	add	sp, #72	@ 0x48
   193f8:	4770      	bx	lr
   193fa:	bf00      	nop

000193fc <_Unwind_Backtrace>:
   193fc:	46ec      	mov	ip, sp
   193fe:	b500      	push	{lr}
   19400:	e92d 5000 	stmdb	sp!, {ip, lr}
   19404:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   19408:	f04f 0300 	mov.w	r3, #0
   1940c:	e92d 000c 	stmdb	sp!, {r2, r3}
   19410:	aa01      	add	r2, sp, #4
   19412:	f026 fe4b 	bl	400ac <__gnu_Unwind_Backtrace>
   19416:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
   1941a:	b012      	add	sp, #72	@ 0x48
   1941c:	4770      	bx	lr
   1941e:	bf00      	nop

00019420 <prvInsertBlockIntoFreeList>:
    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ((size_t)1) << ((sizeof(size_t) * heapBITS_PER_BYTE) - 1);
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList(BlockLink_t *pxBlockToInsert) {
   19420:	b410      	push	{r4}
    BlockLink_t *pxIterator;
    uint8_t *puc;

    /* Iterate through the list until a block is found that has a higher address
    than the block being inserted. */
    for (pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert;
   19422:	4b15      	ldr	r3, [pc, #84]	@ (19478 <prvInsertBlockIntoFreeList+0x58>)
   19424:	461a      	mov	r2, r3
   19426:	681b      	ldr	r3, [r3, #0]
   19428:	4283      	cmp	r3, r0
   1942a:	d3fb      	bcc.n	19424 <prvInsertBlockIntoFreeList+0x4>
    }

    /* Do the block being inserted, and the block it is being inserted after
    make a contiguous block of memory? */
    puc = (uint8_t *)pxIterator;
    if ((puc + pxIterator->xBlockSize) == (uint8_t *)pxBlockToInsert) {
   1942c:	6854      	ldr	r4, [r2, #4]
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   1942e:	6841      	ldr	r1, [r0, #4]
    if ((puc + pxIterator->xBlockSize) == (uint8_t *)pxBlockToInsert) {
   19430:	eb02 0c04 	add.w	ip, r2, r4
   19434:	4560      	cmp	r0, ip
   19436:	d013      	beq.n	19460 <prvInsertBlockIntoFreeList+0x40>
    }

    /* Do the block being inserted, and the block it is being inserted before
    make a contiguous block of memory? */
    puc = (uint8_t *)pxBlockToInsert;
    if ((puc + pxBlockToInsert->xBlockSize) == (uint8_t *)pxIterator->pxNextFreeBlock) {
   19438:	1844      	adds	r4, r0, r1
   1943a:	42a3      	cmp	r3, r4
   1943c:	d006      	beq.n	1944c <prvInsertBlockIntoFreeList+0x2c>
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
        } else {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
        }
    } else {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
   1943e:	6003      	str	r3, [r0, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
    before and the block after, then it's pxNextFreeBlock pointer will have
    already been set, and should not be set here as that would make it point
    to itself. */
    if (pxIterator != pxBlockToInsert) {
   19440:	4282      	cmp	r2, r0
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
   19442:	bf18      	it	ne
   19444:	6010      	strne	r0, [r2, #0]
    } else {
        mtCOVERAGE_TEST_MARKER();
    }
}
   19446:	f85d 4b04 	ldr.w	r4, [sp], #4
   1944a:	4770      	bx	lr
        if (pxIterator->pxNextFreeBlock != pxEnd) {
   1944c:	4c0b      	ldr	r4, [pc, #44]	@ (1947c <prvInsertBlockIntoFreeList+0x5c>)
   1944e:	6824      	ldr	r4, [r4, #0]
   19450:	42a3      	cmp	r3, r4
   19452:	d0f4      	beq.n	1943e <prvInsertBlockIntoFreeList+0x1e>
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   19454:	e9d3 3400 	ldrd	r3, r4, [r3]
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   19458:	4421      	add	r1, r4
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   1945a:	6003      	str	r3, [r0, #0]
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   1945c:	6041      	str	r1, [r0, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   1945e:	e7ef      	b.n	19440 <prvInsertBlockIntoFreeList+0x20>
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   19460:	4421      	add	r1, r4
    if ((puc + pxBlockToInsert->xBlockSize) == (uint8_t *)pxIterator->pxNextFreeBlock) {
   19462:	1850      	adds	r0, r2, r1
   19464:	4283      	cmp	r3, r0
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   19466:	6051      	str	r1, [r2, #4]
    if ((puc + pxBlockToInsert->xBlockSize) == (uint8_t *)pxIterator->pxNextFreeBlock) {
   19468:	d1ed      	bne.n	19446 <prvInsertBlockIntoFreeList+0x26>
        if (pxIterator->pxNextFreeBlock != pxEnd) {
   1946a:	4804      	ldr	r0, [pc, #16]	@ (1947c <prvInsertBlockIntoFreeList+0x5c>)
   1946c:	6800      	ldr	r0, [r0, #0]
   1946e:	4283      	cmp	r3, r0
   19470:	d0e9      	beq.n	19446 <prvInsertBlockIntoFreeList+0x26>
        pxBlockToInsert = pxIterator;
   19472:	4610      	mov	r0, r2
   19474:	e7ee      	b.n	19454 <prvInsertBlockIntoFreeList+0x34>
   19476:	bf00      	nop
   19478:	1000dc90 	.word	0x1000dc90
   1947c:	1000dc8c 	.word	0x1000dc8c

00019480 <prvPortMalloc>:
void *prvPortMalloc(size_t xWantedSize, uint8_t enableSuspendResume) {
   19480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19484:	4604      	mov	r4, r0
    if (enableSuspendResume)
   19486:	460d      	mov	r5, r1
   19488:	2900      	cmp	r1, #0
   1948a:	d149      	bne.n	19520 <prvPortMalloc+0xa0>
        if (pxEnd == NULL) {
   1948c:	484a      	ldr	r0, [pc, #296]	@ (195b8 <prvPortMalloc+0x138>)
   1948e:	6803      	ldr	r3, [r0, #0]
   19490:	2b00      	cmp	r3, #0
   19492:	d058      	beq.n	19546 <prvPortMalloc+0xc6>
        if ((xWantedSize & xBlockAllocatedBit) == 0) {
   19494:	4b49      	ldr	r3, [pc, #292]	@ (195bc <prvPortMalloc+0x13c>)
   19496:	681f      	ldr	r7, [r3, #0]
   19498:	423c      	tst	r4, r7
   1949a:	d13a      	bne.n	19512 <prvPortMalloc+0x92>
            if (xWantedSize > 0) {
   1949c:	2c00      	cmp	r4, #0
   1949e:	d038      	beq.n	19512 <prvPortMalloc+0x92>
                xWantedSize += xHeapStructSize;
   194a0:	f104 0c08 	add.w	ip, r4, #8
                if ((xWantedSize & portBYTE_ALIGNMENT_MASK) != 0x00) {
   194a4:	0761      	lsls	r1, r4, #29
                    xWantedSize += (portBYTE_ALIGNMENT - (xWantedSize & portBYTE_ALIGNMENT_MASK));
   194a6:	bf1c      	itt	ne
   194a8:	f02c 0c07 	bicne.w	ip, ip, #7
   194ac:	f10c 0c08 	addne.w	ip, ip, #8
            if ((xWantedSize > 0) && (xWantedSize <= xFreeBytesRemaining)) {
   194b0:	f1bc 0f00 	cmp.w	ip, #0
   194b4:	d02c      	beq.n	19510 <prvPortMalloc+0x90>
   194b6:	4e42      	ldr	r6, [pc, #264]	@ (195c0 <prvPortMalloc+0x140>)
   194b8:	f8d6 8000 	ldr.w	r8, [r6]
   194bc:	45e0      	cmp	r8, ip
   194be:	d327      	bcc.n	19510 <prvPortMalloc+0x90>
                pxBlock = xStart.pxNextFreeBlock;
   194c0:	4940      	ldr	r1, [pc, #256]	@ (195c4 <prvPortMalloc+0x144>)
   194c2:	680c      	ldr	r4, [r1, #0]
                while ((pxBlock->xBlockSize < xWantedSize) && (pxBlock->pxNextFreeBlock != NULL)) {
   194c4:	e003      	b.n	194ce <prvPortMalloc+0x4e>
   194c6:	6823      	ldr	r3, [r4, #0]
   194c8:	b123      	cbz	r3, 194d4 <prvPortMalloc+0x54>
                    pxPreviousBlock = pxBlock;
   194ca:	4621      	mov	r1, r4
                    pxBlock = pxBlock->pxNextFreeBlock;
   194cc:	461c      	mov	r4, r3
                while ((pxBlock->xBlockSize < xWantedSize) && (pxBlock->pxNextFreeBlock != NULL)) {
   194ce:	6862      	ldr	r2, [r4, #4]
   194d0:	4562      	cmp	r2, ip
   194d2:	d3f8      	bcc.n	194c6 <prvPortMalloc+0x46>
                if (pxBlock != pxEnd) {
   194d4:	6803      	ldr	r3, [r0, #0]
   194d6:	42a3      	cmp	r3, r4
   194d8:	d01a      	beq.n	19510 <prvPortMalloc+0x90>
                    pvReturn =
   194da:	680b      	ldr	r3, [r1, #0]
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   194dc:	6820      	ldr	r0, [r4, #0]
   194de:	6008      	str	r0, [r1, #0]
                    pvReturn =
   194e0:	f103 0908 	add.w	r9, r3, #8
                    if ((pxBlock->xBlockSize - xWantedSize) > heapMINIMUM_BLOCK_SIZE) {
   194e4:	eba2 030c 	sub.w	r3, r2, ip
   194e8:	2b10      	cmp	r3, #16
   194ea:	d827      	bhi.n	1953c <prvPortMalloc+0xbc>
                    if (xFreeBytesRemaining < xMinimumEverFreeBytesRemaining) {
   194ec:	4936      	ldr	r1, [pc, #216]	@ (195c8 <prvPortMalloc+0x148>)
   194ee:	6808      	ldr	r0, [r1, #0]
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
   194f0:	eba8 0302 	sub.w	r3, r8, r2
                    if (xFreeBytesRemaining < xMinimumEverFreeBytesRemaining) {
   194f4:	4283      	cmp	r3, r0
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
   194f6:	6033      	str	r3, [r6, #0]
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
   194f8:	bf38      	it	cc
   194fa:	600b      	strcc	r3, [r1, #0]
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
   194fc:	433a      	orrs	r2, r7
                    pxBlock->pxNextFreeBlock = NULL;
   194fe:	2300      	movs	r3, #0
   19500:	e9c4 3200 	strd	r3, r2, [r4]
    if (enableSuspendResume) {
   19504:	2d00      	cmp	r5, #0
   19506:	d154      	bne.n	195b2 <prvPortMalloc+0x132>
    configASSERT((((size_t)pvReturn) & (size_t)portBYTE_ALIGNMENT_MASK) == 0);
   19508:	f019 0f07 	tst.w	r9, #7
   1950c:	d005      	beq.n	1951a <prvPortMalloc+0x9a>
   1950e:	e7fe      	b.n	1950e <prvPortMalloc+0x8e>
    if (enableSuspendResume) {
   19510:	b98d      	cbnz	r5, 19536 <prvPortMalloc+0xb6>
            vApplicationMallocFailedHook();
   19512:	f018 fd2b 	bl	31f6c <vApplicationMallocFailedHook>
   19516:	f04f 0900 	mov.w	r9, #0
}
   1951a:	4648      	mov	r0, r9
   1951c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        vTaskSuspendAll();
   19520:	f018 ff04 	bl	3232c <vTaskSuspendAll>
        if (pxEnd == NULL) {
   19524:	4824      	ldr	r0, [pc, #144]	@ (195b8 <prvPortMalloc+0x138>)
   19526:	6803      	ldr	r3, [r0, #0]
   19528:	b16b      	cbz	r3, 19546 <prvPortMalloc+0xc6>
        if ((xWantedSize & xBlockAllocatedBit) == 0) {
   1952a:	4b24      	ldr	r3, [pc, #144]	@ (195bc <prvPortMalloc+0x13c>)
   1952c:	681f      	ldr	r7, [r3, #0]
   1952e:	423c      	tst	r4, r7
   19530:	d101      	bne.n	19536 <prvPortMalloc+0xb6>
            if (xWantedSize > 0) {
   19532:	2c00      	cmp	r4, #0
   19534:	d1b4      	bne.n	194a0 <prvPortMalloc+0x20>
        (void)xTaskResumeAll();
   19536:	f018 ff01 	bl	3233c <xTaskResumeAll>
        if (pvReturn == NULL) {
   1953a:	e7ea      	b.n	19512 <prvPortMalloc+0x92>
                        pxNewBlockLink = (void *)(((uint8_t *)pxBlock) + xWantedSize);
   1953c:	eb04 000c 	add.w	r0, r4, ip
                        configASSERT((((size_t)pxNewBlockLink) & portBYTE_ALIGNMENT_MASK) == 0);
   19540:	0742      	lsls	r2, r0, #29
   19542:	d02f      	beq.n	195a4 <prvPortMalloc+0x124>
   19544:	e7fe      	b.n	19544 <prvPortMalloc+0xc4>
    size_t xTotalHeapSize = ucHeapSize;
   19546:	4b21      	ldr	r3, [pc, #132]	@ (195cc <prvPortMalloc+0x14c>)
    uxAddress = (size_t)ucHeap;
   19548:	4a21      	ldr	r2, [pc, #132]	@ (195d0 <prvPortMalloc+0x150>)
    if ((uxAddress & portBYTE_ALIGNMENT_MASK) != 0) {
   1954a:	681b      	ldr	r3, [r3, #0]
   1954c:	0756      	lsls	r6, r2, #29
   1954e:	4413      	add	r3, r2
   19550:	d002      	beq.n	19558 <prvPortMalloc+0xd8>
        uxAddress += (portBYTE_ALIGNMENT - 1);
   19552:	3207      	adds	r2, #7
        uxAddress &= ~((size_t)portBYTE_ALIGNMENT_MASK);
   19554:	f022 0207 	bic.w	r2, r2, #7
    xStart.pxNextFreeBlock = (void *)pucAlignedHeap;
   19558:	4f1a      	ldr	r7, [pc, #104]	@ (195c4 <prvPortMalloc+0x144>)
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
   1955a:	f8df e06c 	ldr.w	lr, [pc, #108]	@ 195c8 <prvPortMalloc+0x148>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
   1955e:	4e18      	ldr	r6, [pc, #96]	@ (195c0 <prvPortMalloc+0x140>)
    xBlockAllocatedBit = ((size_t)1) << ((sizeof(size_t) * heapBITS_PER_BYTE) - 1);
   19560:	f8df c058 	ldr.w	ip, [pc, #88]	@ 195bc <prvPortMalloc+0x13c>
    xStart.pxNextFreeBlock = (void *)pucAlignedHeap;
   19564:	603a      	str	r2, [r7, #0]
    uxAddress -= xHeapStructSize;
   19566:	3b08      	subs	r3, #8
    uxAddress &= ~((size_t)portBYTE_ALIGNMENT_MASK);
   19568:	f023 0307 	bic.w	r3, r3, #7
    xStart.xBlockSize = (size_t)0;
   1956c:	2100      	movs	r1, #0
   1956e:	6079      	str	r1, [r7, #4]
    pxEnd = (void *)uxAddress;
   19570:	6003      	str	r3, [r0, #0]
    pxEnd->pxNextFreeBlock = NULL;
   19572:	e9c3 1100 	strd	r1, r1, [r3]
    xBlockAllocatedBit = ((size_t)1) << ((sizeof(size_t) * heapBITS_PER_BYTE) - 1);
   19576:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   1957a:	6013      	str	r3, [r2, #0]
        if ((xWantedSize & xBlockAllocatedBit) == 0) {
   1957c:	428c      	cmp	r4, r1
    pxFirstFreeBlock->xBlockSize = uxAddress - (size_t)pxFirstFreeBlock;
   1957e:	eba3 0302 	sub.w	r3, r3, r2
   19582:	6053      	str	r3, [r2, #4]
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
   19584:	f8ce 3000 	str.w	r3, [lr]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
   19588:	6033      	str	r3, [r6, #0]
    xBlockAllocatedBit = ((size_t)1) << ((sizeof(size_t) * heapBITS_PER_BYTE) - 1);
   1958a:	f8cc 7000 	str.w	r7, [ip]
        if ((xWantedSize & xBlockAllocatedBit) == 0) {
   1958e:	dbbf      	blt.n	19510 <prvPortMalloc+0x90>
            if (xWantedSize > 0) {
   19590:	d0be      	beq.n	19510 <prvPortMalloc+0x90>
                xWantedSize += xHeapStructSize;
   19592:	f104 0c08 	add.w	ip, r4, #8
                if ((xWantedSize & portBYTE_ALIGNMENT_MASK) != 0x00) {
   19596:	0764      	lsls	r4, r4, #29
   19598:	d08e      	beq.n	194b8 <prvPortMalloc+0x38>
                    xWantedSize += (portBYTE_ALIGNMENT - (xWantedSize & portBYTE_ALIGNMENT_MASK));
   1959a:	f02c 0c07 	bic.w	ip, ip, #7
   1959e:	f10c 0c08 	add.w	ip, ip, #8
            if ((xWantedSize > 0) && (xWantedSize <= xFreeBytesRemaining)) {
   195a2:	e789      	b.n	194b8 <prvPortMalloc+0x38>
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   195a4:	6043      	str	r3, [r0, #4]
                        pxBlock->xBlockSize = xWantedSize;
   195a6:	f8c4 c004 	str.w	ip, [r4, #4]
                        prvInsertBlockIntoFreeList(pxNewBlockLink);
   195aa:	f7ff ff39 	bl	19420 <prvInsertBlockIntoFreeList>
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
   195ae:	6862      	ldr	r2, [r4, #4]
   195b0:	e79c      	b.n	194ec <prvPortMalloc+0x6c>
        (void)xTaskResumeAll();
   195b2:	f018 fec3 	bl	3233c <xTaskResumeAll>
        if (pvReturn == NULL) {
   195b6:	e7a7      	b.n	19508 <prvPortMalloc+0x88>
   195b8:	1000dc8c 	.word	0x1000dc8c
   195bc:	1000dc80 	.word	0x1000dc80
   195c0:	1000dc88 	.word	0x1000dc88
   195c4:	1000dc90 	.word	0x1000dc90
   195c8:	1000dc84 	.word	0x1000dc84
   195cc:	1000d078 	.word	0x1000d078
   195d0:	1006f000 	.word	0x1006f000

000195d4 <pvTasklessPortMalloc>:
void *pvTasklessPortMalloc(size_t xWantedSize) { return prvPortMalloc(xWantedSize, 0); }
   195d4:	2100      	movs	r1, #0
   195d6:	f7ff bf53 	b.w	19480 <prvPortMalloc>
   195da:	bf00      	nop

000195dc <vTasklessPortFree>:
    if (pv != NULL) {
   195dc:	b150      	cbz	r0, 195f4 <vTasklessPortFree+0x18>
        configASSERT((pxLink->xBlockSize & xBlockAllocatedBit) != 0);
   195de:	4a0b      	ldr	r2, [pc, #44]	@ (1960c <vTasklessPortFree+0x30>)
   195e0:	f850 3c04 	ldr.w	r3, [r0, #-4]
   195e4:	6812      	ldr	r2, [r2, #0]
   195e6:	4213      	tst	r3, r2
   195e8:	d100      	bne.n	195ec <vTasklessPortFree+0x10>
   195ea:	e7fe      	b.n	195ea <vTasklessPortFree+0xe>
        configASSERT(pxLink->pxNextFreeBlock == NULL);
   195ec:	f850 1c08 	ldr.w	r1, [r0, #-8]
   195f0:	b109      	cbz	r1, 195f6 <vTasklessPortFree+0x1a>
   195f2:	e7fe      	b.n	195f2 <vTasklessPortFree+0x16>
void vTasklessPortFree(void *pv) { prvPortFree(pv, 0); }
   195f4:	4770      	bx	lr
                    xFreeBytesRemaining += pxLink->xBlockSize;
   195f6:	4906      	ldr	r1, [pc, #24]	@ (19610 <vTasklessPortFree+0x34>)
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
   195f8:	ea23 0302 	bic.w	r3, r3, r2
                    xFreeBytesRemaining += pxLink->xBlockSize;
   195fc:	680a      	ldr	r2, [r1, #0]
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
   195fe:	f840 3c04 	str.w	r3, [r0, #-4]
                    xFreeBytesRemaining += pxLink->xBlockSize;
   19602:	441a      	add	r2, r3
                    prvInsertBlockIntoFreeList(((BlockLink_t *)pxLink));
   19604:	3808      	subs	r0, #8
                    xFreeBytesRemaining += pxLink->xBlockSize;
   19606:	600a      	str	r2, [r1, #0]
                    prvInsertBlockIntoFreeList(((BlockLink_t *)pxLink));
   19608:	f7ff bf0a 	b.w	19420 <prvInsertBlockIntoFreeList>
   1960c:	1000dc80 	.word	0x1000dc80
   19610:	1000dc88 	.word	0x1000dc88

00019614 <ns_core_check_api>:
 * param oldest
 * param newest
 * return uint32_t
 */
extern uint32_t ns_core_check_api(
    const ns_core_api_t *submitted, const ns_core_api_t *oldest, const ns_core_api_t *newest) {
   19614:	b510      	push	{r4, lr}

    if (submitted->apiId != newest->apiId) {
   19616:	6813      	ldr	r3, [r2, #0]
   19618:	6804      	ldr	r4, [r0, #0]
   1961a:	429c      	cmp	r4, r3
   1961c:	d124      	bne.n	19668 <ns_core_check_api+0x54>
    uint64_t cMinor = (uint64_t)c->minor;
   1961e:	88c3      	ldrh	r3, [r0, #6]
    uint64_t c64 = (cMajor << 32) + (cMinor << 16) + c->revision;
   19620:	f8b0 c004 	ldrh.w	ip, [r0, #4]
   19624:	8900      	ldrh	r0, [r0, #8]
    uint64_t n64 = (nMajor << 32) + (nMinor << 16) + n->revision;
   19626:	f8b1 e008 	ldrh.w	lr, [r1, #8]
    uint64_t c64 = (cMajor << 32) + (cMinor << 16) + c->revision;
   1962a:	041b      	lsls	r3, r3, #16
   1962c:	1818      	adds	r0, r3, r0
    uint64_t nMinor = (uint64_t)n->minor;
   1962e:	88cb      	ldrh	r3, [r1, #6]
    uint64_t n64 = (nMajor << 32) + (nMinor << 16) + n->revision;
   19630:	8889      	ldrh	r1, [r1, #4]
   19632:	ea4f 4303 	mov.w	r3, r3, lsl #16
    uint64_t c64 = (cMajor << 32) + (cMinor << 16) + c->revision;
   19636:	f14c 0c00 	adc.w	ip, ip, #0
    uint64_t n64 = (nMajor << 32) + (nMinor << 16) + n->revision;
   1963a:	eb13 030e 	adds.w	r3, r3, lr
   1963e:	f141 0100 	adc.w	r1, r1, #0
    } else if (c64 < n64) {
   19642:	4298      	cmp	r0, r3
   19644:	eb7c 0101 	sbcs.w	r1, ip, r1
   19648:	d30e      	bcc.n	19668 <ns_core_check_api+0x54>
    uint64_t nMinor = (uint64_t)n->minor;
   1964a:	88d3      	ldrh	r3, [r2, #6]
    uint64_t n64 = (nMajor << 32) + (nMinor << 16) + n->revision;
   1964c:	8891      	ldrh	r1, [r2, #4]
   1964e:	8912      	ldrh	r2, [r2, #8]
   19650:	041b      	lsls	r3, r3, #16
   19652:	189b      	adds	r3, r3, r2
   19654:	f141 0200 	adc.w	r2, r1, #0
    } else if (c64 < n64) {
   19658:	4283      	cmp	r3, r0
   1965a:	eb72 020c 	sbcs.w	r2, r2, ip
   1965e:	bf34      	ite	cc
   19660:	2001      	movcc	r0, #1
   19662:	2000      	movcs	r0, #0
   19664:	0040      	lsls	r0, r0, #1
        // submitted version is higher than newest supported version
        return NS_STATUS_INVALID_VERSION;
    }

    return NS_STATUS_SUCCESS;
}
   19666:	bd10      	pop	{r4, pc}
        return NS_STATUS_INVALID_VERSION;
   19668:	2002      	movs	r0, #2
}
   1966a:	bd10      	pop	{r4, pc}

0001966c <ns_core_init>:
uint32_t ns_core_init(ns_core_config_t *cfg) {
#ifndef NS_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if (cfg == NULL) {
   1966c:	b300      	cbz	r0, 196b0 <ns_core_init+0x44>
        return NS_STATUS_INVALID_HANDLE;
    }

    // check API version
    if (ns_core_check_api(cfg->api, &ns_core_oldest_supported_version, &ns_core_current_version)) {
   1966e:	6802      	ldr	r2, [r0, #0]
    if (submitted->apiId != newest->apiId) {
   19670:	6813      	ldr	r3, [r2, #0]
   19672:	f5b3 0f4a 	cmp.w	r3, #13238272	@ 0xca0000
   19676:	d119      	bne.n	196ac <ns_core_init+0x40>
    uint64_t c64 = (cMajor << 32) + (cMinor << 16) + c->revision;
   19678:	8913      	ldrh	r3, [r2, #8]
    uint64_t cMinor = (uint64_t)c->minor;
   1967a:	88d1      	ldrh	r1, [r2, #6]
    uint64_t cMajor = (uint64_t)c->major;
   1967c:	f8b2 c004 	ldrh.w	ip, [r2, #4]
    uint64_t c64 = (cMajor << 32) + (cMinor << 16) + c->revision;
   19680:	2000      	movs	r0, #0
    } else if (c64 < n64) {
   19682:	3b01      	subs	r3, #1
uint32_t ns_core_init(ns_core_config_t *cfg) {
   19684:	b510      	push	{r4, lr}
    uint64_t c64 = (cMajor << 32) + (cMinor << 16) + c->revision;
   19686:	ea4f 4101 	mov.w	r1, r1, lsl #16
    } else if (c64 < n64) {
   1968a:	f140 3eff 	adc.w	lr, r0, #4294967295	@ 0xffffffff
   1968e:	181b      	adds	r3, r3, r0
   19690:	185b      	adds	r3, r3, r1
   19692:	eb4c 030e 	adc.w	r3, ip, lr
   19696:	b93b      	cbnz	r3, 196a8 <ns_core_init+0x3c>
        return NS_STATUS_INVALID_VERSION;
    }
#endif
    g_ns_state.api = cfg->api;
   19698:	4b06      	ldr	r3, [pc, #24]	@ (196b4 <ns_core_init+0x48>)
    g_ns_state.initialized = true;
   1969a:	4907      	ldr	r1, [pc, #28]	@ (196b8 <ns_core_init+0x4c>)
   1969c:	6099      	str	r1, [r3, #8]
   1969e:	2401      	movs	r4, #1
   196a0:	e9c3 2400 	strd	r2, r4, [r3]
    g_ns_state.itmPrintWantsToBeEnabled = false;
    g_ns_state.itmPrintCurrentlyEnabled = false;
    g_ns_state.uartPrintWantsToBeEnabled = false;
    g_ns_state.uartPrintCurrentlyEnabled = false;
   196a4:	8198      	strh	r0, [r3, #12]
    g_ns_state.tempcoCurrentlyEnabled = false;
    g_ns_state.cryptoWantsToBeEnabled = true; // reset state of Crypto is 'on'
    g_ns_state.cryptoCurrentlyEnabled = true;
    g_ns_state.ap3BurstModeInitialized = false;
    return NS_STATUS_SUCCESS;
}
   196a6:	bd10      	pop	{r4, pc}
        return NS_STATUS_INVALID_VERSION;
   196a8:	2002      	movs	r0, #2
}
   196aa:	bd10      	pop	{r4, pc}
        return NS_STATUS_INVALID_VERSION;
   196ac:	2002      	movs	r0, #2
}
   196ae:	4770      	bx	lr
        return NS_STATUS_INVALID_HANDLE;
   196b0:	2001      	movs	r0, #1
   196b2:	4770      	bx	lr
   196b4:	1000dc98 	.word	0x1000dc98
   196b8:	00010100 	.word	0x00010100

000196bc <ns_core_fail_loop>:

void ns_core_fail_loop() {
    while (1)
   196bc:	e7fe      	b.n	196bc <ns_core_fail_loop>
   196be:	bf00      	nop

000196c0 <NMI_Handler>:
//*****************************************************************************
void NMI_Handler(void) {
    //
    // Go into an infinite loop.
    //
    while (1) {
   196c0:	e7fe      	b.n	196c0 <NMI_Handler>
   196c2:	bf00      	nop

000196c4 <BusFault_Handler>:
//*****************************************************************************
void HardFault_Handler(void) {
    //
    // Go into an infinite loop.
    //
    while (1) {
   196c4:	e7fe      	b.n	196c4 <BusFault_Handler>
   196c6:	bf00      	nop

000196c8 <DebugMon_Handler>:
//*****************************************************************************
void am_default_isr(void) {
    //
    // Go into an infinite loop.
    //
    while (1) {
   196c8:	e7fe      	b.n	196c8 <DebugMon_Handler>
   196ca:	bf00      	nop

000196cc <Reset_Handler>:
    __asm("    ldr    r0, =0xE000ED08\n"
   196cc:	4816      	ldr	r0, [pc, #88]	@ (19728 <zero_loop+0x14>)
   196ce:	4917      	ldr	r1, [pc, #92]	@ (1972c <zero_loop+0x18>)
   196d0:	6001      	str	r1, [r0, #0]
    __asm("    ldr    sp, [r1]");
   196d2:	f8d1 d000 	ldr.w	sp, [r1]
    __asm("ldr  r0, =0xE000ED88\n"
   196d6:	4816      	ldr	r0, [pc, #88]	@ (19730 <zero_loop+0x1c>)
   196d8:	6801      	ldr	r1, [r0, #0]
   196da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
   196de:	6001      	str	r1, [r0, #0]
   196e0:	f3bf 8f4f 	dsb	sy
   196e4:	f3bf 8f6f 	isb	sy
    __asm("    ldr     r0, =_init_data\n"
   196e8:	4812      	ldr	r0, [pc, #72]	@ (19734 <zero_loop+0x20>)
   196ea:	4913      	ldr	r1, [pc, #76]	@ (19738 <zero_loop+0x24>)
   196ec:	4a13      	ldr	r2, [pc, #76]	@ (1973c <zero_loop+0x28>)

000196ee <copy_loop>:
   196ee:	f850 3b04 	ldr.w	r3, [r0], #4
   196f2:	f841 3b04 	str.w	r3, [r1], #4
   196f6:	4291      	cmp	r1, r2
   196f8:	dbf9      	blt.n	196ee <copy_loop>
    __asm("    ldr     r0, =_init_data_sram\n"
   196fa:	4811      	ldr	r0, [pc, #68]	@ (19740 <zero_loop+0x2c>)
   196fc:	4911      	ldr	r1, [pc, #68]	@ (19744 <zero_loop+0x30>)
   196fe:	4a12      	ldr	r2, [pc, #72]	@ (19748 <zero_loop+0x34>)

00019700 <copy_loop_sram>:
   19700:	f850 3b04 	ldr.w	r3, [r0], #4
   19704:	f841 3b04 	str.w	r3, [r1], #4
   19708:	4291      	cmp	r1, r2
   1970a:	dbf9      	blt.n	19700 <copy_loop_sram>
    __asm("    ldr     r0, =_sbss\n"
   1970c:	480f      	ldr	r0, [pc, #60]	@ (1974c <zero_loop+0x38>)
   1970e:	4910      	ldr	r1, [pc, #64]	@ (19750 <zero_loop+0x3c>)
   19710:	f04f 0200 	mov.w	r2, #0

00019714 <zero_loop>:
   19714:	4288      	cmp	r0, r1
   19716:	bfb8      	it	lt
   19718:	f840 2b04 	strlt.w	r2, [r0], #4
   1971c:	dbfa      	blt.n	19714 <zero_loop>
    __libc_init_array();
   1971e:	f00d fcfd 	bl	2711c <__libc_init_array>
    main();
   19722:	f006 fe57 	bl	203d4 <main>
    __asm("    bkpt     ");
   19726:	be00      	bkpt	0x0000
}
   19728:	e000ed08 	.word	0xe000ed08
   1972c:	00018000 	.word	0x00018000
   19730:	e000ed88 	.word	0xe000ed88
   19734:	0004d0c4 	.word	0x0004d0c4
   19738:	1000d000 	.word	0x1000d000
   1973c:	1000dc78 	.word	0x1000dc78
   19740:	0004dd3c 	.word	0x0004dd3c
   19744:	10060000 	.word	0x10060000
   19748:	10078400 	.word	0x10078400
   1974c:	1000dc80 	.word	0x1000dc80
   19750:	1005c280 	.word	0x1005c280

00019754 <_init>:
extern void _init(void) { ; }
   19754:	4770      	bx	lr
   19756:	bf00      	nop

00019758 <_fini>:
extern void _fini(void) { ; }
   19758:	4770      	bx	lr
   1975a:	bf00      	nop

0001975c <arm_elementwise_add_s16>:
                                            const int32_t out_mult,
                                            const int32_t out_shift,
                                            const int32_t out_activation_min,
                                            const int32_t out_activation_max,
                                            const int32_t block_size)
{
   1975c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19760:	b097      	sub	sp, #92	@ 0x5c
   19762:	4686      	mov	lr, r0
   19764:	f8dd b0ac 	ldr.w	fp, [sp, #172]	@ 0xac
   19768:	9301      	str	r3, [sp, #4]
    int32_t sum;
    int32_t two_halfword_1, two_halfword_2;
    int16_t sum_1, sum_2;
    int32_t loop_count = block_size / 2;

    while (loop_count > 0)
   1976a:	f1bb 0f01 	cmp.w	fp, #1
{
   1976e:	e9dd 4524 	ldrd	r4, r5, [sp, #144]	@ 0x90
   19772:	9820      	ldr	r0, [sp, #128]	@ 0x80
   19774:	f8dd 9088 	ldr.w	r9, [sp, #136]	@ 0x88
   19778:	f8dd 809c 	ldr.w	r8, [sp, #156]	@ 0x9c
   1977c:	468a      	mov	sl, r1
    int32_t loop_count = block_size / 2;
   1977e:	eb0b 73db 	add.w	r3, fp, fp, lsr #31
    while (loop_count > 0)
   19782:	f340 819a 	ble.w	19aba <arm_elementwise_add_s16+0x35e>
    int32_t result = new_val >> (total_shift - 1);
    result = (result + 1) >> 1;

    return result;
#else
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19786:	4242      	negs	r2, r0
   19788:	ea22 71e2 	bic.w	r1, r2, r2, asr #31
   1978c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
   1978e:	910a      	str	r1, [sp, #40]	@ 0x28
   19790:	4256      	negs	r6, r2
   19792:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
   19794:	4257      	negs	r7, r2
    const q31_t remainder_mask = (1 << exponent) - 1;
   19796:	2201      	movs	r2, #1
   19798:	fa02 f101 	lsl.w	r1, r2, r1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1979c:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   197a0:	3901      	subs	r1, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   197a2:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   197a6:	9104      	str	r1, [sp, #16]
   197a8:	fa02 f106 	lsl.w	r1, r2, r6
   197ac:	40ba      	lsls	r2, r7
   197ae:	f101 3cff 	add.w	ip, r1, #4294967295	@ 0xffffffff
   197b2:	3a01      	subs	r2, #1
    q31_t threshold = remainder_mask >> 1;
   197b4:	9904      	ldr	r1, [sp, #16]
    const q31_t remainder_mask = (1 << exponent) - 1;
   197b6:	9206      	str	r2, [sp, #24]
    q31_t threshold = remainder_mask >> 1;
   197b8:	1052      	asrs	r2, r2, #1
   197ba:	1049      	asrs	r1, r1, #1
   197bc:	9207      	str	r2, [sp, #28]
        threshold++;
   197be:	3201      	adds	r2, #1
    q31_t threshold = remainder_mask >> 1;
   197c0:	9105      	str	r1, [sp, #20]
        threshold++;
   197c2:	9208      	str	r2, [sp, #32]
    q31_t threshold = remainder_mask >> 1;
   197c4:	4661      	mov	r1, ip
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   197c6:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
    const q31_t remainder_mask = (1 << exponent) - 1;
   197c8:	f8cd c008 	str.w	ip, [sp, #8]
    q31_t threshold = remainder_mask >> 1;
   197cc:	1049      	asrs	r1, r1, #1
   197ce:	9103      	str	r1, [sp, #12]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   197d0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
        threshold++;
   197d4:	9905      	ldr	r1, [sp, #20]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   197d6:	920e      	str	r2, [sp, #56]	@ 0x38
   197d8:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
        threshold++;
   197dc:	3101      	adds	r1, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   197de:	920f      	str	r2, [sp, #60]	@ 0x3c
   197e0:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
        threshold++;
   197e2:	910b      	str	r1, [sp, #44]	@ 0x2c
   197e4:	9903      	ldr	r1, [sp, #12]
   197e6:	9611      	str	r6, [sp, #68]	@ 0x44
   197e8:	105b      	asrs	r3, r3, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   197ea:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   197ee:	e9cd ae0c 	strd	sl, lr, [sp, #48]	@ 0x30
   197f2:	e9cd ea14 	strd	lr, sl, [sp, #80]	@ 0x50
        threshold++;
   197f6:	3101      	adds	r1, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   197f8:	9210      	str	r2, [sp, #64]	@ 0x40
   197fa:	46c8      	mov	r8, r9
   197fc:	009a      	lsls	r2, r3, #2
   197fe:	f8dd 909c 	ldr.w	r9, [sp, #156]	@ 0x9c
        threshold++;
   19802:	9109      	str	r1, [sp, #36]	@ 0x24
   19804:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   19808:	9312      	str	r3, [sp, #72]	@ 0x48
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1980a:	f04f 0c00 	mov.w	ip, #0
   1980e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
   19812:	9213      	str	r2, [sp, #76]	@ 0x4c
    memcpy(&val, *in_q15, 4);
   19814:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
   19816:	980c      	ldr	r0, [sp, #48]	@ 0x30
   19818:	f852 1b04 	ldr.w	r1, [r2], #4
   1981c:	920d      	str	r2, [sp, #52]	@ 0x34
   1981e:	f850 2b04 	ldr.w	r2, [r0], #4
   19822:	900c      	str	r0, [sp, #48]	@ 0x30
    {
        two_halfword_1 = arm_nn_read_q15x2_ia(&input_1_vect);
        two_halfword_2 = arm_nn_read_q15x2_ia(&input_2_vect);

        input_1 = (int16_t)(two_halfword_1 & 0xFFFF) << left_shift;
   19824:	fa0f fa81 	sxth.w	sl, r1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19828:	980f      	ldr	r0, [sp, #60]	@ 0x3c
   1982a:	fa0a fa04 	lsl.w	sl, sl, r4
   1982e:	fa0a fa00 	lsl.w	sl, sl, r0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19832:	9801      	ldr	r0, [sp, #4]
   19834:	461d      	mov	r5, r3
   19836:	46e6      	mov	lr, ip
   19838:	fbca 5e00 	smlal	r5, lr, sl, r0
    result = (int32_t)(mult.long_long >> 31);
   1983c:	0fe8      	lsrs	r0, r5, #31
    q31_t threshold = remainder_mask >> 1;
   1983e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
    result = (int32_t)(mult.long_long >> 31);
   19840:	ea40 004e 	orr.w	r0, r0, lr, lsl #1
    q31_t threshold = remainder_mask >> 1;
   19844:	fa50 fe05 	asrs.w	lr, r0, r5
    int32_t remainder = remainder_mask & dividend;
   19848:	9d04      	ldr	r5, [sp, #16]
   1984a:	ea00 0605 	and.w	r6, r0, r5
    q31_t threshold = remainder_mask >> 1;
   1984e:	9805      	ldr	r0, [sp, #20]
   19850:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
   19852:	bf58      	it	pl
   19854:	4682      	movpl	sl, r0
        input_1 = arm_nn_requantize(input_1, input_1_mult, input_1_shift);
        input_2 = (int16_t)(two_halfword_2 & 0xFFFF) << left_shift;
   19856:	fa0f fb82 	sxth.w	fp, r2
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1985a:	980e      	ldr	r0, [sp, #56]	@ 0x38
    q31_t threshold = remainder_mask >> 1;
   1985c:	bf48      	it	mi
   1985e:	46aa      	movmi	sl, r5
   19860:	fa0b fb04 	lsl.w	fp, fp, r4
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19864:	fa0b fb00 	lsl.w	fp, fp, r0
    if (remainder > threshold)
   19868:	45b2      	cmp	sl, r6
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1986a:	4618      	mov	r0, r3
   1986c:	46e2      	mov	sl, ip
   1986e:	fbcb 0a08 	smlal	r0, sl, fp, r8
    q31_t threshold = remainder_mask >> 1;
   19872:	9d11      	ldr	r5, [sp, #68]	@ 0x44
    result = (int32_t)(mult.long_long >> 31);
   19874:	ea4f 70d0 	mov.w	r0, r0, lsr #31
   19878:	ea40 004a 	orr.w	r0, r0, sl, lsl #1
        result++;
   1987c:	bfb8      	it	lt
   1987e:	f10e 0e01 	addlt.w	lr, lr, #1
    q31_t threshold = remainder_mask >> 1;
   19882:	fa50 fa05 	asrs.w	sl, r0, r5
    int32_t remainder = remainder_mask & dividend;
   19886:	9d02      	ldr	r5, [sp, #8]
   19888:	ea00 0605 	and.w	r6, r0, r5
    q31_t threshold = remainder_mask >> 1;
   1988c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
   1988e:	9803      	ldr	r0, [sp, #12]
   19890:	bf4c      	ite	mi
   19892:	46ab      	movmi	fp, r5
   19894:	4683      	movpl	fp, r0
    if (remainder > threshold)
   19896:	45b3      	cmp	fp, r6
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19898:	9810      	ldr	r0, [sp, #64]	@ 0x40
    int32_t remainder = remainder_mask & dividend;
   1989a:	9d06      	ldr	r5, [sp, #24]
        result++;
   1989c:	bfb8      	it	lt
   1989e:	f10a 0a01 	addlt.w	sl, sl, #1
        input_2 = arm_nn_requantize(input_2, input_2_mult, input_2_shift);
        sum = input_1 + input_2;
   198a2:	44f2      	add	sl, lr
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   198a4:	fa0a fa00 	lsl.w	sl, sl, r0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   198a8:	469e      	mov	lr, r3
   198aa:	4660      	mov	r0, ip
   198ac:	fbca e009 	smlal	lr, r0, sl, r9
    result = (int32_t)(mult.long_long >> 31);
   198b0:	ea4f 7ede 	mov.w	lr, lr, lsr #31
   198b4:	ea4e 0e40 	orr.w	lr, lr, r0, lsl #1
    q31_t threshold = remainder_mask >> 1;
   198b8:	fa5e f007 	asrs.w	r0, lr, r7
    int32_t remainder = remainder_mask & dividend;
   198bc:	ea05 0e0e 	and.w	lr, r5, lr
    q31_t threshold = remainder_mask >> 1;
   198c0:	e9dd 6507 	ldrd	r6, r5, [sp, #28]
        sum = arm_nn_requantize(sum, out_mult, out_shift);
        sum = MAX(sum, out_activation_min);
        sum = MIN(sum, out_activation_max);
        sum_1 = (int16_t)sum;

        input_1 = (int16_t)(two_halfword_1 >> 16) << left_shift;
   198c4:	ea4f 4121 	mov.w	r1, r1, asr #16
   198c8:	bf48      	it	mi
   198ca:	46aa      	movmi	sl, r5
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   198cc:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
    q31_t threshold = remainder_mask >> 1;
   198ce:	bf58      	it	pl
   198d0:	46b2      	movpl	sl, r6
   198d2:	40a1      	lsls	r1, r4
    if (remainder > threshold)
   198d4:	45f2      	cmp	sl, lr
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   198d6:	fa01 f105 	lsl.w	r1, r1, r5
        sum = MAX(sum, out_activation_min);
   198da:	9d29      	ldr	r5, [sp, #164]	@ 0xa4
    q31_t threshold = remainder_mask >> 1;
   198dc:	9e05      	ldr	r6, [sp, #20]
        result++;
   198de:	bfb8      	it	lt
   198e0:	3001      	addlt	r0, #1
   198e2:	42a8      	cmp	r0, r5
   198e4:	bfb8      	it	lt
   198e6:	4628      	movlt	r0, r5
        sum = MIN(sum, out_activation_max);
   198e8:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
   198ea:	42a8      	cmp	r0, r5
   198ec:	bfa8      	it	ge
   198ee:	4628      	movge	r0, r5
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   198f0:	9d01      	ldr	r5, [sp, #4]
   198f2:	469e      	mov	lr, r3
   198f4:	46e2      	mov	sl, ip
   198f6:	fbc1 ea05 	smlal	lr, sl, r1, r5
    result = (int32_t)(mult.long_long >> 31);
   198fa:	ea4f 7ede 	mov.w	lr, lr, lsr #31
    int32_t remainder = remainder_mask & dividend;
   198fe:	9d04      	ldr	r5, [sp, #16]
    q31_t threshold = remainder_mask >> 1;
   19900:	990a      	ldr	r1, [sp, #40]	@ 0x28
    result = (int32_t)(mult.long_long >> 31);
   19902:	ea4e 0e4a 	orr.w	lr, lr, sl, lsl #1
    q31_t threshold = remainder_mask >> 1;
   19906:	fa5e f101 	asrs.w	r1, lr, r1
    int32_t remainder = remainder_mask & dividend;
   1990a:	ea05 0e0e 	and.w	lr, r5, lr
    q31_t threshold = remainder_mask >> 1;
   1990e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
   19910:	bf54      	ite	pl
   19912:	46b2      	movpl	sl, r6
   19914:	46aa      	movmi	sl, r5
    if (remainder > threshold)
   19916:	45f2      	cmp	sl, lr
        input_1 = arm_nn_requantize(input_1, input_1_mult, input_1_shift);
        input_2 = (int16_t)(two_halfword_2 >> 16) << left_shift;
   19918:	ea4f 4a22 	mov.w	sl, r2, asr #16
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1991c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
    q31_t threshold = remainder_mask >> 1;
   1991e:	9d11      	ldr	r5, [sp, #68]	@ 0x44
   19920:	fa0a fa04 	lsl.w	sl, sl, r4
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19924:	fa0a fa02 	lsl.w	sl, sl, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19928:	46e6      	mov	lr, ip
   1992a:	461a      	mov	r2, r3
   1992c:	fbca 2e08 	smlal	r2, lr, sl, r8
    result = (int32_t)(mult.long_long >> 31);
   19930:	ea4f 72d2 	mov.w	r2, r2, lsr #31
   19934:	ea42 024e 	orr.w	r2, r2, lr, lsl #1
        result++;
   19938:	bfb8      	it	lt
   1993a:	3101      	addlt	r1, #1
    q31_t threshold = remainder_mask >> 1;
   1993c:	fa52 fe05 	asrs.w	lr, r2, r5
    int32_t remainder = remainder_mask & dividend;
   19940:	9d02      	ldr	r5, [sp, #8]
   19942:	ea02 0205 	and.w	r2, r2, r5
    q31_t threshold = remainder_mask >> 1;
   19946:	9d09      	ldr	r5, [sp, #36]	@ 0x24
   19948:	9e03      	ldr	r6, [sp, #12]
   1994a:	bf4c      	ite	mi
   1994c:	46aa      	movmi	sl, r5
   1994e:	46b2      	movpl	sl, r6
    if (remainder > threshold)
   19950:	4592      	cmp	sl, r2
        result++;
   19952:	bfb8      	it	lt
   19954:	f10e 0e01 	addlt.w	lr, lr, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19958:	9a10      	ldr	r2, [sp, #64]	@ 0x40
    int32_t remainder = remainder_mask & dividend;
   1995a:	9d06      	ldr	r5, [sp, #24]
        input_2 = arm_nn_requantize(input_2, input_2_mult, input_2_shift);
        sum = input_1 + input_2;
   1995c:	448e      	add	lr, r1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1995e:	fa0e fe02 	lsl.w	lr, lr, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19962:	4661      	mov	r1, ip
   19964:	461a      	mov	r2, r3
   19966:	fbce 2109 	smlal	r2, r1, lr, r9
    result = (int32_t)(mult.long_long >> 31);
   1996a:	0fd2      	lsrs	r2, r2, #31
   1996c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    q31_t threshold = remainder_mask >> 1;
   19970:	fa52 f107 	asrs.w	r1, r2, r7
    int32_t remainder = remainder_mask & dividend;
   19974:	ea02 0205 	and.w	r2, r2, r5
    q31_t threshold = remainder_mask >> 1;
   19978:	e9dd 6507 	ldrd	r6, r5, [sp, #28]
   1997c:	bf4c      	ite	mi
   1997e:	46ae      	movmi	lr, r5
   19980:	46b6      	movpl	lr, r6
    if (remainder > threshold)
   19982:	4596      	cmp	lr, r2
        sum = arm_nn_requantize(sum, out_mult, out_shift);
        sum = MAX(sum, out_activation_min);
   19984:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
        result++;
   19986:	bfb8      	it	lt
   19988:	3101      	addlt	r1, #1
   1998a:	4291      	cmp	r1, r2
   1998c:	bfb8      	it	lt
   1998e:	4611      	movlt	r1, r2
        sum = MIN(sum, out_activation_max);
   19990:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
        sum_1 = (int16_t)sum;
   19992:	b200      	sxth	r0, r0
        sum = MIN(sum, out_activation_max);
   19994:	4291      	cmp	r1, r2
   19996:	bfa8      	it	ge
   19998:	4611      	movge	r1, r2
        sum_2 = (int16_t)sum;

        arm_nn_write_q15x2_ia(&output, PACK_Q15x2_32x1(sum_1, sum_2));
   1999a:	b280      	uxth	r0, r0
 */
__STATIC_FORCEINLINE void arm_nn_write_q15x2_ia(q15_t **dest_q15, q31_t src_q31)
{
    q31_t val = src_q31;

    memcpy(*dest_q15, &val, 4);
   1999c:	9a25      	ldr	r2, [sp, #148]	@ 0x94
   1999e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
   199a2:	f842 0b04 	str.w	r0, [r2], #4
   199a6:	9225      	str	r2, [sp, #148]	@ 0x94
    while (loop_count > 0)
   199a8:	9925      	ldr	r1, [sp, #148]	@ 0x94
   199aa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
   199ac:	428a      	cmp	r2, r1
   199ae:	f47f af31 	bne.w	19814 <arm_elementwise_add_s16+0xb8>
   199b2:	e9dd 2e13 	ldrd	r2, lr, [sp, #76]	@ 0x4c
   199b6:	f8cd 909c 	str.w	r9, [sp, #156]	@ 0x9c
   199ba:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
   199be:	9820      	ldr	r0, [sp, #128]	@ 0x80
   199c0:	f8dd b0ac 	ldr.w	fp, [sp, #172]	@ 0xac
   199c4:	46c1      	mov	r9, r8
   199c6:	f8dd 809c 	ldr.w	r8, [sp, #156]	@ 0x9c
   199ca:	4492      	add	sl, r2
   199cc:	4496      	add	lr, r2

        loop_count--;
    }
    loop_count = block_size & 0x1;

    while (loop_count > 0)
   199ce:	f01b 0f01 	tst.w	fp, #1
   199d2:	d06e      	beq.n	19ab2 <arm_elementwise_add_s16+0x356>
    {
        /* C = A + B */
        input_1 = *input_1_vect++ << left_shift;
        input_2 = *input_2_vect++ << left_shift;
   199d4:	f9ba 3000 	ldrsh.w	r3, [sl]
        input_1 = *input_1_vect++ << left_shift;
   199d8:	f9be 2000 	ldrsh.w	r2, [lr]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   199dc:	9d01      	ldr	r5, [sp, #4]
   199de:	40a2      	lsls	r2, r4
        input_2 = *input_2_vect++ << left_shift;
   199e0:	fa03 f404 	lsl.w	r4, r3, r4
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   199e4:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   199e8:	409a      	lsls	r2, r3
   199ea:	4240      	negs	r0, r0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   199ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
   199f0:	2100      	movs	r1, #0
   199f2:	fbc2 3105 	smlal	r3, r1, r2, r5
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   199f6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   199fa:	2201      	movs	r2, #1
   199fc:	4082      	lsls	r2, r0
    result = (int32_t)(mult.long_long >> 31);
   199fe:	0fdb      	lsrs	r3, r3, #31
   19a00:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   19a04:	3a01      	subs	r2, #1
    q31_t threshold = remainder_mask >> 1;
   19a06:	1051      	asrs	r1, r2, #1
    int32_t remainder = remainder_mask & dividend;
   19a08:	ea03 0502 	and.w	r5, r3, r2
    if (result < 0)
   19a0c:	fa53 f200 	asrs.w	r2, r3, r0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19a10:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
   19a12:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   19a16:	fa04 f403 	lsl.w	r4, r4, r3
   19a1a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
        threshold++;
   19a1c:	bf48      	it	mi
   19a1e:	3101      	addmi	r1, #1
    if (remainder > threshold)
   19a20:	428d      	cmp	r5, r1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19a22:	f1c3 0000 	rsb	r0, r3, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19a26:	f04f 0100 	mov.w	r1, #0
   19a2a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
   19a2e:	fbc4 3109 	smlal	r3, r1, r4, r9
    result = (int32_t)(mult.long_long >> 31);
   19a32:	ea4f 73d3 	mov.w	r3, r3, lsr #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19a36:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    result = (int32_t)(mult.long_long >> 31);
   19a3a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   19a3e:	f04f 0101 	mov.w	r1, #1
   19a42:	fa01 f100 	lsl.w	r1, r1, r0
   19a46:	f101 31ff 	add.w	r1, r1, #4294967295	@ 0xffffffff
        result++;
   19a4a:	bfc8      	it	gt
   19a4c:	3201      	addgt	r2, #1
    int32_t remainder = remainder_mask & dividend;
   19a4e:	ea03 0401 	and.w	r4, r3, r1
    if (result < 0)
   19a52:	4103      	asrs	r3, r0
    q31_t threshold = remainder_mask >> 1;
   19a54:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
   19a58:	bf48      	it	mi
   19a5a:	3101      	addmi	r1, #1
    if (remainder > threshold)
   19a5c:	428c      	cmp	r4, r1
        result++;
   19a5e:	bfc8      	it	gt
   19a60:	3301      	addgt	r3, #1

        input_1 = arm_nn_requantize(input_1, input_1_mult, input_1_shift);
        input_2 = arm_nn_requantize(input_2, input_2_mult, input_2_shift);

        sum = input_1 + input_2;
   19a62:	4413      	add	r3, r2
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19a64:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
   19a66:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   19a6a:	4093      	lsls	r3, r2
   19a6c:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19a6e:	2000      	movs	r0, #0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19a70:	4251      	negs	r1, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19a72:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
   19a76:	fbc3 2008 	smlal	r2, r0, r3, r8
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19a7a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    result = (int32_t)(mult.long_long >> 31);
   19a7e:	0fd3      	lsrs	r3, r2, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   19a80:	2201      	movs	r2, #1
   19a82:	408a      	lsls	r2, r1
    result = (int32_t)(mult.long_long >> 31);
   19a84:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   19a88:	3a01      	subs	r2, #1
    int32_t remainder = remainder_mask & dividend;
   19a8a:	ea03 0002 	and.w	r0, r3, r2
    if (result < 0)
   19a8e:	410b      	asrs	r3, r1
    q31_t threshold = remainder_mask >> 1;
   19a90:	ea4f 0262 	mov.w	r2, r2, asr #1
        threshold++;
   19a94:	bf48      	it	mi
   19a96:	3201      	addmi	r2, #1
    if (remainder > threshold)
   19a98:	4290      	cmp	r0, r2
        sum = arm_nn_requantize(sum, out_mult, out_shift);

        sum = MAX(sum, out_activation_min);
   19a9a:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
        result++;
   19a9c:	bfc8      	it	gt
   19a9e:	3301      	addgt	r3, #1
   19aa0:	4293      	cmp	r3, r2
   19aa2:	bfb8      	it	lt
   19aa4:	4613      	movlt	r3, r2
        sum = MIN(sum, out_activation_max);
   19aa6:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
   19aa8:	4293      	cmp	r3, r2
   19aaa:	bfa8      	it	ge
   19aac:	4613      	movge	r3, r2

        *output++ = (int16_t)sum;
   19aae:	9a12      	ldr	r2, [sp, #72]	@ 0x48
   19ab0:	8013      	strh	r3, [r2, #0]
        /* Decrement loop counter */
        loop_count--;
    }

    return (ARM_CMSIS_NN_SUCCESS);
}
   19ab2:	2000      	movs	r0, #0
   19ab4:	b017      	add	sp, #92	@ 0x5c
   19ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while (loop_count > 0)
   19aba:	9512      	str	r5, [sp, #72]	@ 0x48
   19abc:	e787      	b.n	199ce <arm_elementwise_add_s16+0x272>
   19abe:	bf00      	nop

00019ac0 <arm_elementwise_add_s8>:
                                           const int32_t out_mult,
                                           const int32_t out_shift,
                                           const int32_t out_activation_min,
                                           const int32_t out_activation_max,
                                           const int32_t block_size)
{
   19ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ac4:	b09b      	sub	sp, #108	@ 0x6c
   19ac6:	e9dd 9e2b 	ldrd	r9, lr, [sp, #172]	@ 0xac
   19aca:	9301      	str	r3, [sp, #4]

    int32_t offset_1_packed, offset_2_packed;

    int8_t r1, r2, r3, r4;

    offset_1_packed = (input_1_offset << 16U) | (input_1_offset & 0x0FFFFL);
   19acc:	b293      	uxth	r3, r2
   19ace:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   19ad2:	9315      	str	r3, [sp, #84]	@ 0x54
    offset_2_packed = (input_2_offset << 16U) | (input_2_offset & 0x0FFFFL);
   19ad4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
{
   19ad6:	9217      	str	r2, [sp, #92]	@ 0x5c
    offset_2_packed = (input_2_offset << 16U) | (input_2_offset & 0x0FFFFL);
   19ad8:	9a25      	ldr	r2, [sp, #148]	@ 0x94
{
   19ada:	9010      	str	r0, [sp, #64]	@ 0x40
    offset_2_packed = (input_2_offset << 16U) | (input_2_offset & 0x0FFFFL);
   19adc:	b29b      	uxth	r3, r3
   19ade:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   19ae2:	9316      	str	r3, [sp, #88]	@ 0x58

    loop_count = block_size >> 2;
   19ae4:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
{
   19ae6:	f8dd c090 	ldr.w	ip, [sp, #144]	@ 0x90
   19aea:	9d28      	ldr	r5, [sp, #160]	@ 0xa0
   19aec:	9118      	str	r1, [sp, #96]	@ 0x60
    loop_count = block_size >> 2;
   19aee:	109b      	asrs	r3, r3, #2

    while (loop_count > 0)
   19af0:	2b00      	cmp	r3, #0
{
   19af2:	e9dd b026 	ldrd	fp, r0, [sp, #152]	@ 0x98
    while (loop_count > 0)
   19af6:	f340 82b5 	ble.w	1a064 <arm_elementwise_add_s8+0x5a4>
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19afa:	f1cc 0800 	rsb	r8, ip, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   19afe:	2201      	movs	r2, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19b00:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
   19b04:	4247      	negs	r7, r0
   19b06:	f1ce 0600 	rsb	r6, lr, #0
   19b0a:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
   19b0e:	468a      	mov	sl, r1
   19b10:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   19b14:	fa02 f108 	lsl.w	r1, r2, r8
   19b18:	1e4c      	subs	r4, r1, #1
   19b1a:	fa02 f107 	lsl.w	r1, r2, r7
   19b1e:	40b2      	lsls	r2, r6
   19b20:	3a01      	subs	r2, #1
   19b22:	9202      	str	r2, [sp, #8]
    q31_t threshold = remainder_mask >> 1;
   19b24:	9a02      	ldr	r2, [sp, #8]
    const q31_t remainder_mask = (1 << exponent) - 1;
   19b26:	9408      	str	r4, [sp, #32]
    q31_t threshold = remainder_mask >> 1;
   19b28:	1052      	asrs	r2, r2, #1
   19b2a:	9203      	str	r2, [sp, #12]
        threshold++;
   19b2c:	9a03      	ldr	r2, [sp, #12]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19b2e:	f8cd a04c 	str.w	sl, [sp, #76]	@ 0x4c
    const q31_t remainder_mask = (1 << exponent) - 1;
   19b32:	3901      	subs	r1, #1
    q31_t threshold = remainder_mask >> 1;
   19b34:	1064      	asrs	r4, r4, #1
        threshold++;
   19b36:	3201      	adds	r2, #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   19b38:	9105      	str	r1, [sp, #20]
    q31_t threshold = remainder_mask >> 1;
   19b3a:	9409      	str	r4, [sp, #36]	@ 0x24
   19b3c:	1049      	asrs	r1, r1, #1
        threshold++;
   19b3e:	3401      	adds	r4, #1
   19b40:	940a      	str	r4, [sp, #40]	@ 0x28
   19b42:	9204      	str	r2, [sp, #16]
   19b44:	1c4c      	adds	r4, r1, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19b46:	ea2e 72ee 	bic.w	r2, lr, lr, asr #31
        threshold++;
   19b4a:	9407      	str	r4, [sp, #28]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19b4c:	920b      	str	r2, [sp, #44]	@ 0x2c
   19b4e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
    q31_t threshold = remainder_mask >> 1;
   19b50:	9106      	str	r1, [sp, #24]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19b52:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
   19b56:	920c      	str	r2, [sp, #48]	@ 0x30
   19b58:	ea2c 72ec 	bic.w	r2, ip, ip, asr #31
   19b5c:	920d      	str	r2, [sp, #52]	@ 0x34
   19b5e:	009a      	lsls	r2, r3, #2
   19b60:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   19b64:	9314      	str	r3, [sp, #80]	@ 0x50
   19b66:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
   19b68:	9312      	str	r3, [sp, #72]	@ 0x48
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19b6a:	e9cd 670e 	strd	r6, r7, [sp, #56]	@ 0x38
   19b6e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
   19b72:	2400      	movs	r4, #0
   19b74:	9219      	str	r2, [sp, #100]	@ 0x64
   19b76:	464f      	mov	r7, r9
    memcpy(&val, *in_q7, 4);
   19b78:	9a10      	ldr	r2, [sp, #64]	@ 0x40
   19b7a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
   19b7c:	f852 1b04 	ldr.w	r1, [r2], #4
   19b80:	9210      	str	r2, [sp, #64]	@ 0x40
   19b82:	f850 2b04 	ldr.w	r2, [r0], #4
   19b86:	9013      	str	r0, [sp, #76]	@ 0x4c
  op2 %= 32U;
  if (op2 == 0U)
  {
    return op1;
  }
  return (op1 >> op2) | (op1 << (32U - op2));
   19b88:	ea4f 2c31 	mov.w	ip, r1, ror #8
   19b8c:	ea4f 2032 	mov.w	r0, r2, ror #8

__STATIC_FORCEINLINE uint32_t __SADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   19b90:	9e15      	ldr	r6, [sp, #84]	@ 0x54

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   19b92:	fa2f f181 	sxtb16	r1, r1
   19b96:	fa2f fc8c 	sxtb16	ip, ip
   19b9a:	fa2f f282 	sxtb16	r2, r2
   19b9e:	fa2f f080 	sxtb16	r0, r0
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   19ba2:	fa9c fc06 	sadd16	ip, ip, r6
   19ba6:	fa91 f106 	sadd16	r1, r1, r6
   19baa:	9e16      	ldr	r6, [sp, #88]	@ 0x58
   19bac:	fa90 f006 	sadd16	r0, r0, r6
   19bb0:	fa92 f206 	sadd16	r2, r2, r6
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19bb4:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
   19bb6:	9211      	str	r2, [sp, #68]	@ 0x44

        a_2 = __SADD16(a_2, offset_2_packed);
        b_2 = __SADD16(b_2, offset_2_packed);

        /* Sum 1 */
        input_1 = (b_1 & 0x0FFFF) << left_shift;
   19bb8:	fa1f fa81 	uxth.w	sl, r1
   19bbc:	fa0a fa05 	lsl.w	sl, sl, r5
   19bc0:	fa0a fa06 	lsl.w	sl, sl, r6
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19bc4:	9e01      	ldr	r6, [sp, #4]

        input_1 = arm_nn_requantize(input_1, input_1_mult, input_1_shift);

        input_2 = (b_2 & 0x0FFFF) << left_shift;
   19bc6:	f8bd b044 	ldrh.w	fp, [sp, #68]	@ 0x44
   19bca:	469e      	mov	lr, r3
   19bcc:	46a1      	mov	r9, r4
   19bce:	fbca e906 	smlal	lr, r9, sl, r6
    result = (int32_t)(mult.long_long >> 31);
   19bd2:	ea4f 7ede 	mov.w	lr, lr, lsr #31
    int32_t remainder = remainder_mask & dividend;
   19bd6:	9e08      	ldr	r6, [sp, #32]
    result = (int32_t)(mult.long_long >> 31);
   19bd8:	ea4e 0e49 	orr.w	lr, lr, r9, lsl #1
    q31_t threshold = remainder_mask >> 1;
   19bdc:	fa5e f908 	asrs.w	r9, lr, r8
    int32_t remainder = remainder_mask & dividend;
   19be0:	ea0e 0e06 	and.w	lr, lr, r6
    q31_t threshold = remainder_mask >> 1;
   19be4:	e9dd 2609 	ldrd	r2, r6, [sp, #36]	@ 0x24
   19be8:	bf58      	it	pl
   19bea:	4692      	movpl	sl, r2
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19bec:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
   19bee:	fa0b fb05 	lsl.w	fp, fp, r5
   19bf2:	fa0b fb02 	lsl.w	fp, fp, r2
    q31_t threshold = remainder_mask >> 1;
   19bf6:	bf48      	it	mi
   19bf8:	46b2      	movmi	sl, r6
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19bfa:	9a26      	ldr	r2, [sp, #152]	@ 0x98
    if (remainder > threshold)
   19bfc:	45d6      	cmp	lr, sl
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19bfe:	469e      	mov	lr, r3
   19c00:	46a2      	mov	sl, r4
   19c02:	fbcb ea02 	smlal	lr, sl, fp, r2
    result = (int32_t)(mult.long_long >> 31);
   19c06:	ea4f 7ede 	mov.w	lr, lr, lsr #31
    q31_t threshold = remainder_mask >> 1;
   19c0a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
    result = (int32_t)(mult.long_long >> 31);
   19c0c:	ea4e 0e4a 	orr.w	lr, lr, sl, lsl #1
        result++;
   19c10:	bfc8      	it	gt
   19c12:	f109 0901 	addgt.w	r9, r9, #1
    q31_t threshold = remainder_mask >> 1;
   19c16:	fa5e fa02 	asrs.w	sl, lr, r2
    int32_t remainder = remainder_mask & dividend;
   19c1a:	9a05      	ldr	r2, [sp, #20]
   19c1c:	ea0e 0e02 	and.w	lr, lr, r2
    q31_t threshold = remainder_mask >> 1;
   19c20:	e9dd 6206 	ldrd	r6, r2, [sp, #24]
   19c24:	bf4c      	ite	mi
   19c26:	4693      	movmi	fp, r2
   19c28:	46b3      	movpl	fp, r6
    if (remainder > threshold)
   19c2a:	45de      	cmp	lr, fp
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19c2c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
        result++;
   19c2e:	bfc8      	it	gt
   19c30:	f10a 0a01 	addgt.w	sl, sl, #1
        input_2 = arm_nn_requantize(input_2, input_2_mult, input_2_shift);

        sum = input_1 + input_2;
   19c34:	44ca      	add	sl, r9
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19c36:	fa0a fa02 	lsl.w	sl, sl, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19c3a:	469e      	mov	lr, r3
   19c3c:	46a1      	mov	r9, r4
   19c3e:	fbca e907 	smlal	lr, r9, sl, r7
    q31_t threshold = remainder_mask >> 1;
   19c42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
    result = (int32_t)(mult.long_long >> 31);
   19c44:	ea4f 7ede 	mov.w	lr, lr, lsr #31
   19c48:	ea4e 0e49 	orr.w	lr, lr, r9, lsl #1
    q31_t threshold = remainder_mask >> 1;
   19c4c:	fa5e f902 	asrs.w	r9, lr, r2
    int32_t remainder = remainder_mask & dividend;
   19c50:	9a02      	ldr	r2, [sp, #8]
   19c52:	ea0e 0e02 	and.w	lr, lr, r2
    q31_t threshold = remainder_mask >> 1;
   19c56:	e9dd 6203 	ldrd	r6, r2, [sp, #12]
        sum = MAX(sum, out_activation_min);
        sum = MIN(sum, out_activation_max);
        r1 = (q7_t)sum;

        /* Sum 3 */
        input_1 = ((b_1 >> 16) & 0x0FFFF) << left_shift;
   19c5a:	ea4f 4111 	mov.w	r1, r1, lsr #16
   19c5e:	bf48      	it	mi
   19c60:	4692      	movmi	sl, r2
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19c62:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
    q31_t threshold = remainder_mask >> 1;
   19c64:	bf58      	it	pl
   19c66:	46b2      	movpl	sl, r6
   19c68:	40a9      	lsls	r1, r5
    if (remainder > threshold)
   19c6a:	45d6      	cmp	lr, sl
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19c6c:	fa01 f102 	lsl.w	r1, r1, r2
        sum += out_offset;
   19c70:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
        result++;
   19c72:	bfc8      	it	gt
   19c74:	f109 0901 	addgt.w	r9, r9, #1
   19c78:	4491      	add	r9, r2
        sum = MAX(sum, out_activation_min);
   19c7a:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
   19c7c:	4591      	cmp	r9, r2
   19c7e:	bfb8      	it	lt
   19c80:	4691      	movlt	r9, r2
        sum = MIN(sum, out_activation_max);
   19c82:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
   19c84:	4591      	cmp	r9, r2
   19c86:	bfa8      	it	ge
   19c88:	4691      	movge	r9, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19c8a:	9a01      	ldr	r2, [sp, #4]
        r1 = (q7_t)sum;
   19c8c:	fa4f fb89 	sxtb.w	fp, r9
   19c90:	469e      	mov	lr, r3
   19c92:	46a1      	mov	r9, r4
   19c94:	fbc1 e902 	smlal	lr, r9, r1, r2
    result = (int32_t)(mult.long_long >> 31);
   19c98:	ea4f 7ede 	mov.w	lr, lr, lsr #31
    int32_t remainder = remainder_mask & dividend;
   19c9c:	9a08      	ldr	r2, [sp, #32]
    result = (int32_t)(mult.long_long >> 31);
   19c9e:	ea4e 0e49 	orr.w	lr, lr, r9, lsl #1
    q31_t threshold = remainder_mask >> 1;
   19ca2:	fa5e f108 	asrs.w	r1, lr, r8
    int32_t remainder = remainder_mask & dividend;
   19ca6:	ea0e 0e02 	and.w	lr, lr, r2
    q31_t threshold = remainder_mask >> 1;
   19caa:	e9dd 6209 	ldrd	r6, r2, [sp, #36]	@ 0x24
   19cae:	bf48      	it	mi
   19cb0:	4691      	movmi	r9, r2
        input_1 = arm_nn_requantize(input_1, input_1_mult, input_1_shift);

        input_2 = ((b_2 >> 16) & 0x0FFFF) << left_shift;
   19cb2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
   19cb4:	bf58      	it	pl
   19cb6:	46b1      	movpl	r9, r6
    if (remainder > threshold)
   19cb8:	45ce      	cmp	lr, r9
   19cba:	ea4f 4912 	mov.w	r9, r2, lsr #16
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19cbe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19cc0:	9e26      	ldr	r6, [sp, #152]	@ 0x98
   19cc2:	fa09 f905 	lsl.w	r9, r9, r5
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19cc6:	fa09 f902 	lsl.w	r9, r9, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19cca:	46a6      	mov	lr, r4
   19ccc:	461a      	mov	r2, r3
   19cce:	fbc9 2e06 	smlal	r2, lr, r9, r6
    result = (int32_t)(mult.long_long >> 31);
   19cd2:	ea4f 72d2 	mov.w	r2, r2, lsr #31
    q31_t threshold = remainder_mask >> 1;
   19cd6:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
    result = (int32_t)(mult.long_long >> 31);
   19cd8:	ea42 024e 	orr.w	r2, r2, lr, lsl #1
        result++;
   19cdc:	bfc8      	it	gt
   19cde:	3101      	addgt	r1, #1
    q31_t threshold = remainder_mask >> 1;
   19ce0:	fa52 fe06 	asrs.w	lr, r2, r6
    int32_t remainder = remainder_mask & dividend;
   19ce4:	9e05      	ldr	r6, [sp, #20]
   19ce6:	ea02 0a06 	and.w	sl, r2, r6
    q31_t threshold = remainder_mask >> 1;
   19cea:	e9dd 2606 	ldrd	r2, r6, [sp, #24]
   19cee:	bf4c      	ite	mi
   19cf0:	46b1      	movmi	r9, r6
   19cf2:	4691      	movpl	r9, r2
    if (remainder > threshold)
   19cf4:	45ca      	cmp	sl, r9
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19cf6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
    int32_t remainder = remainder_mask & dividend;
   19cf8:	9e02      	ldr	r6, [sp, #8]
        result++;
   19cfa:	bfc8      	it	gt
   19cfc:	f10e 0e01 	addgt.w	lr, lr, #1
        input_2 = arm_nn_requantize(input_2, input_2_mult, input_2_shift);

        sum = input_1 + input_2;
   19d00:	448e      	add	lr, r1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19d02:	fa0e fe02 	lsl.w	lr, lr, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19d06:	4619      	mov	r1, r3
   19d08:	4622      	mov	r2, r4
   19d0a:	fbce 1207 	smlal	r1, r2, lr, r7
    result = (int32_t)(mult.long_long >> 31);
   19d0e:	0fc9      	lsrs	r1, r1, #31
   19d10:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    q31_t threshold = remainder_mask >> 1;
   19d14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
    int32_t remainder = remainder_mask & dividend;
   19d16:	ea01 0906 	and.w	r9, r1, r6
    q31_t threshold = remainder_mask >> 1;
   19d1a:	fa51 f202 	asrs.w	r2, r1, r2
   19d1e:	e9dd 1603 	ldrd	r1, r6, [sp, #12]
   19d22:	bf4c      	ite	mi
   19d24:	46b6      	movmi	lr, r6
   19d26:	468e      	movpl	lr, r1
    if (remainder > threshold)
   19d28:	45f1      	cmp	r9, lr
        sum = arm_nn_requantize(sum, out_mult, out_shift);
        sum += out_offset;
   19d2a:	992a      	ldr	r1, [sp, #168]	@ 0xa8
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19d2c:	9e01      	ldr	r6, [sp, #4]
        result++;
   19d2e:	bfc8      	it	gt
   19d30:	3201      	addgt	r2, #1
   19d32:	440a      	add	r2, r1
        sum = MAX(sum, out_activation_min);
   19d34:	992d      	ldr	r1, [sp, #180]	@ 0xb4
   19d36:	428a      	cmp	r2, r1
   19d38:	bfb8      	it	lt
   19d3a:	460a      	movlt	r2, r1
        sum = MIN(sum, out_activation_max);
   19d3c:	992e      	ldr	r1, [sp, #184]	@ 0xb8
   19d3e:	428a      	cmp	r2, r1
   19d40:	bfa8      	it	ge
   19d42:	460a      	movge	r2, r1
        r3 = (q7_t)sum;

        /* Sum 2 */
        input_1 = (a_1 & 0x0FFFF) << left_shift;
   19d44:	fa1f f98c 	uxth.w	r9, ip
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19d48:	990d      	ldr	r1, [sp, #52]	@ 0x34
   19d4a:	fa09 f905 	lsl.w	r9, r9, r5
   19d4e:	fa09 f901 	lsl.w	r9, r9, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19d52:	46a6      	mov	lr, r4
   19d54:	4619      	mov	r1, r3
   19d56:	fbc9 1e06 	smlal	r1, lr, r9, r6
    result = (int32_t)(mult.long_long >> 31);
   19d5a:	0fc9      	lsrs	r1, r1, #31
    int32_t remainder = remainder_mask & dividend;
   19d5c:	9e08      	ldr	r6, [sp, #32]
        r3 = (q7_t)sum;
   19d5e:	b252      	sxtb	r2, r2
    result = (int32_t)(mult.long_long >> 31);
   19d60:	ea41 014e 	orr.w	r1, r1, lr, lsl #1
    q31_t threshold = remainder_mask >> 1;
   19d64:	fa51 fe08 	asrs.w	lr, r1, r8
   19d68:	9211      	str	r2, [sp, #68]	@ 0x44
    int32_t remainder = remainder_mask & dividend;
   19d6a:	ea01 0106 	and.w	r1, r1, r6
    q31_t threshold = remainder_mask >> 1;
   19d6e:	e9dd 2609 	ldrd	r2, r6, [sp, #36]	@ 0x24
        input_1 = arm_nn_requantize(input_1, input_1_mult, input_1_shift);

        input_2 = (a_2 & 0x0FFFF) << left_shift;
   19d72:	fa1f fa80 	uxth.w	sl, r0
   19d76:	bf58      	it	pl
   19d78:	4691      	movpl	r9, r2
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19d7a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
   19d7c:	fa0a fa05 	lsl.w	sl, sl, r5
   19d80:	fa0a fa02 	lsl.w	sl, sl, r2
    q31_t threshold = remainder_mask >> 1;
   19d84:	bf48      	it	mi
   19d86:	46b1      	movmi	r9, r6
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19d88:	9a26      	ldr	r2, [sp, #152]	@ 0x98
    if (remainder > threshold)
   19d8a:	4549      	cmp	r1, r9
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19d8c:	4619      	mov	r1, r3
   19d8e:	46a1      	mov	r9, r4
   19d90:	fbca 1902 	smlal	r1, r9, sl, r2
    result = (int32_t)(mult.long_long >> 31);
   19d94:	ea4f 71d1 	mov.w	r1, r1, lsr #31
    q31_t threshold = remainder_mask >> 1;
   19d98:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
    result = (int32_t)(mult.long_long >> 31);
   19d9a:	ea41 0149 	orr.w	r1, r1, r9, lsl #1
        result++;
   19d9e:	bfc8      	it	gt
   19da0:	f10e 0e01 	addgt.w	lr, lr, #1
    q31_t threshold = remainder_mask >> 1;
   19da4:	fa51 f902 	asrs.w	r9, r1, r2
    int32_t remainder = remainder_mask & dividend;
   19da8:	9a05      	ldr	r2, [sp, #20]
   19daa:	ea01 0102 	and.w	r1, r1, r2
    q31_t threshold = remainder_mask >> 1;
   19dae:	e9dd 6206 	ldrd	r6, r2, [sp, #24]
   19db2:	bf4c      	ite	mi
   19db4:	4692      	movmi	sl, r2
   19db6:	46b2      	movpl	sl, r6
    if (remainder > threshold)
   19db8:	4551      	cmp	r1, sl
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19dba:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
        result++;
   19dbc:	bfc8      	it	gt
   19dbe:	f109 0901 	addgt.w	r9, r9, #1
        input_2 = arm_nn_requantize(input_2, input_2_mult, input_2_shift);

        sum = input_1 + input_2;
   19dc2:	44f1      	add	r9, lr
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19dc4:	fa09 f902 	lsl.w	r9, r9, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19dc8:	469e      	mov	lr, r3
   19dca:	4621      	mov	r1, r4
   19dcc:	fbc9 e107 	smlal	lr, r1, r9, r7
    q31_t threshold = remainder_mask >> 1;
   19dd0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
    result = (int32_t)(mult.long_long >> 31);
   19dd2:	ea4f 7ede 	mov.w	lr, lr, lsr #31
   19dd6:	ea4e 0e41 	orr.w	lr, lr, r1, lsl #1
    q31_t threshold = remainder_mask >> 1;
   19dda:	fa5e f102 	asrs.w	r1, lr, r2
    int32_t remainder = remainder_mask & dividend;
   19dde:	9a02      	ldr	r2, [sp, #8]
   19de0:	ea0e 0e02 	and.w	lr, lr, r2
    q31_t threshold = remainder_mask >> 1;
   19de4:	e9dd 6203 	ldrd	r6, r2, [sp, #12]
        sum = MAX(sum, out_activation_min);
        sum = MIN(sum, out_activation_max);
        r2 = (q7_t)sum;

        /* Sum 4 */
        input_1 = ((a_1 >> 16) & 0x0FFFF) << left_shift;
   19de8:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   19dec:	bf48      	it	mi
   19dee:	4691      	movmi	r9, r2
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19df0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
    q31_t threshold = remainder_mask >> 1;
   19df2:	bf58      	it	pl
   19df4:	46b1      	movpl	r9, r6
   19df6:	fa0c fc05 	lsl.w	ip, ip, r5
    if (remainder > threshold)
   19dfa:	45ce      	cmp	lr, r9
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19dfc:	fa0c fc02 	lsl.w	ip, ip, r2
        sum += out_offset;
   19e00:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
        result++;
   19e02:	bfc8      	it	gt
   19e04:	3101      	addgt	r1, #1
   19e06:	4411      	add	r1, r2
        sum = MAX(sum, out_activation_min);
   19e08:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
   19e0a:	4291      	cmp	r1, r2
   19e0c:	bfb8      	it	lt
   19e0e:	4611      	movlt	r1, r2
        sum = MIN(sum, out_activation_max);
   19e10:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
   19e12:	4291      	cmp	r1, r2
   19e14:	bfa8      	it	ge
   19e16:	4611      	movge	r1, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19e18:	9a01      	ldr	r2, [sp, #4]
   19e1a:	469e      	mov	lr, r3
   19e1c:	46a1      	mov	r9, r4
   19e1e:	fbcc e902 	smlal	lr, r9, ip, r2
    result = (int32_t)(mult.long_long >> 31);
   19e22:	ea4f 7ede 	mov.w	lr, lr, lsr #31
    int32_t remainder = remainder_mask & dividend;
   19e26:	9a08      	ldr	r2, [sp, #32]
    result = (int32_t)(mult.long_long >> 31);
   19e28:	ea4e 0e49 	orr.w	lr, lr, r9, lsl #1
    q31_t threshold = remainder_mask >> 1;
   19e2c:	fa5e fc08 	asrs.w	ip, lr, r8
    int32_t remainder = remainder_mask & dividend;
   19e30:	ea0e 0e02 	and.w	lr, lr, r2
    q31_t threshold = remainder_mask >> 1;
   19e34:	e9dd 6209 	ldrd	r6, r2, [sp, #36]	@ 0x24
   19e38:	bf4c      	ite	mi
   19e3a:	4691      	movmi	r9, r2
   19e3c:	46b1      	movpl	r9, r6
    if (remainder > threshold)
   19e3e:	45ce      	cmp	lr, r9
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19e40:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
        input_1 = arm_nn_requantize(input_1, input_1_mult, input_1_shift);

        input_2 = ((a_2 >> 16) & 0x0FFFF) << left_shift;
   19e42:	ea4f 4910 	mov.w	r9, r0, lsr #16
   19e46:	fa09 f905 	lsl.w	r9, r9, r5
   19e4a:	fa09 f902 	lsl.w	r9, r9, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19e4e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
   19e50:	4618      	mov	r0, r3
   19e52:	46a6      	mov	lr, r4
   19e54:	fbc9 0e02 	smlal	r0, lr, r9, r2
    result = (int32_t)(mult.long_long >> 31);
   19e58:	ea4f 70d0 	mov.w	r0, r0, lsr #31
    q31_t threshold = remainder_mask >> 1;
   19e5c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
    result = (int32_t)(mult.long_long >> 31);
   19e5e:	ea40 004e 	orr.w	r0, r0, lr, lsl #1
        result++;
   19e62:	bfc8      	it	gt
   19e64:	f10c 0c01 	addgt.w	ip, ip, #1
    q31_t threshold = remainder_mask >> 1;
   19e68:	fa50 fe02 	asrs.w	lr, r0, r2
    int32_t remainder = remainder_mask & dividend;
   19e6c:	9a05      	ldr	r2, [sp, #20]
   19e6e:	ea00 0002 	and.w	r0, r0, r2
    q31_t threshold = remainder_mask >> 1;
   19e72:	e9dd 6206 	ldrd	r6, r2, [sp, #24]
   19e76:	bf4c      	ite	mi
   19e78:	4691      	movmi	r9, r2
   19e7a:	46b1      	movpl	r9, r6
    if (remainder > threshold)
   19e7c:	4548      	cmp	r0, r9
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19e7e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
        result++;
   19e80:	bfc8      	it	gt
   19e82:	f10e 0e01 	addgt.w	lr, lr, #1
        input_2 = arm_nn_requantize(input_2, input_2_mult, input_2_shift);

        sum = input_1 + input_2;
   19e86:	44e6      	add	lr, ip
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19e88:	fa0e fe02 	lsl.w	lr, lr, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19e8c:	4618      	mov	r0, r3
   19e8e:	46a4      	mov	ip, r4
   19e90:	fbce 0c07 	smlal	r0, ip, lr, r7
    q31_t threshold = remainder_mask >> 1;
   19e94:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
    result = (int32_t)(mult.long_long >> 31);
   19e96:	0fc0      	lsrs	r0, r0, #31
   19e98:	ea40 004c 	orr.w	r0, r0, ip, lsl #1
    q31_t threshold = remainder_mask >> 1;
   19e9c:	fa50 fc02 	asrs.w	ip, r0, r2
    int32_t remainder = remainder_mask & dividend;
   19ea0:	9a02      	ldr	r2, [sp, #8]
   19ea2:	ea00 0002 	and.w	r0, r0, r2
    q31_t threshold = remainder_mask >> 1;
   19ea6:	e9dd 6203 	ldrd	r6, r2, [sp, #12]
   19eaa:	bf4c      	ite	mi
   19eac:	4696      	movmi	lr, r2
   19eae:	46b6      	movpl	lr, r6
        sum += out_offset;
        sum = MAX(sum, out_activation_min);
        sum = MIN(sum, out_activation_max);
        r4 = (q7_t)sum;

        arm_nn_write_q7x4_ia(&output, PACK_Q7x4_32x1(r1, r2, r3, r4));
   19eb0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
    if (remainder > threshold)
   19eb2:	4570      	cmp	r0, lr
        sum += out_offset;
   19eb4:	982a      	ldr	r0, [sp, #168]	@ 0xa8
        result++;
   19eb6:	bfc8      	it	gt
   19eb8:	f10c 0c01 	addgt.w	ip, ip, #1
        arm_nn_write_q7x4_ia(&output, PACK_Q7x4_32x1(r1, r2, r3, r4));
   19ebc:	0412      	lsls	r2, r2, #16
        sum += out_offset;
   19ebe:	4484      	add	ip, r0
        arm_nn_write_q7x4_ia(&output, PACK_Q7x4_32x1(r1, r2, r3, r4));
   19ec0:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
   19ec4:	fa5f f08b 	uxtb.w	r0, fp
   19ec8:	4310      	orrs	r0, r2
        sum = MAX(sum, out_activation_min);
   19eca:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
   19ecc:	4594      	cmp	ip, r2
   19ece:	bfb8      	it	lt
   19ed0:	4694      	movlt	ip, r2
        r2 = (q7_t)sum;
   19ed2:	b249      	sxtb	r1, r1
        sum = MIN(sum, out_activation_max);
   19ed4:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
        arm_nn_write_q7x4_ia(&output, PACK_Q7x4_32x1(r1, r2, r3, r4));
   19ed6:	0209      	lsls	r1, r1, #8
        sum = MIN(sum, out_activation_max);
   19ed8:	4594      	cmp	ip, r2
        arm_nn_write_q7x4_ia(&output, PACK_Q7x4_32x1(r1, r2, r3, r4));
   19eda:	b289      	uxth	r1, r1
        sum = MIN(sum, out_activation_max);
   19edc:	bfa8      	it	ge
   19ede:	4694      	movge	ip, r2
        arm_nn_write_q7x4_ia(&output, PACK_Q7x4_32x1(r1, r2, r3, r4));
   19ee0:	4301      	orrs	r1, r0
    memcpy(*in, &value, 4);
   19ee2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
   19ee4:	ea41 610c 	orr.w	r1, r1, ip, lsl #24
   19ee8:	f842 1b04 	str.w	r1, [r2], #4
    while (loop_count > 0)
   19eec:	9914      	ldr	r1, [sp, #80]	@ 0x50
   19eee:	9212      	str	r2, [sp, #72]	@ 0x48
   19ef0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
   19ef2:	428a      	cmp	r2, r1
   19ef4:	f47f ae40 	bne.w	19b78 <arm_elementwise_add_s8+0xb8>
   19ef8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
   19efa:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
   19efc:	f8dd c090 	ldr.w	ip, [sp, #144]	@ 0x90
   19f00:	f8dd e0b0 	ldr.w	lr, [sp, #176]	@ 0xb0
   19f04:	4413      	add	r3, r2
   19f06:	9329      	str	r3, [sp, #164]	@ 0xa4
   19f08:	9b18      	ldr	r3, [sp, #96]	@ 0x60
   19f0a:	e9dd b026 	ldrd	fp, r0, [sp, #152]	@ 0x98
   19f0e:	4413      	add	r3, r2
   19f10:	46b9      	mov	r9, r7
   19f12:	9318      	str	r3, [sp, #96]	@ 0x60
    loop_count = block_size & 0x3;
#else
    loop_count = block_size;
#endif

    while (loop_count > 0)
   19f14:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
   19f16:	f013 0303 	ands.w	r3, r3, #3
   19f1a:	f000 809f 	beq.w	1a05c <arm_elementwise_add_s8+0x59c>
   19f1e:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19f20:	f8cd 90ac 	str.w	r9, [sp, #172]	@ 0xac
   19f24:	18d3      	adds	r3, r2, r3
   19f26:	9309      	str	r3, [sp, #36]	@ 0x24
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19f28:	ea2c 73ec 	bic.w	r3, ip, ip, asr #31
   19f2c:	930c      	str	r3, [sp, #48]	@ 0x30
   19f2e:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   19f32:	f1cc 0700 	rsb	r7, ip, #0
   19f36:	930b      	str	r3, [sp, #44]	@ 0x2c
   19f38:	ea2e 73ee 	bic.w	r3, lr, lr, asr #31
   19f3c:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
   19f40:	4246      	negs	r6, r0
   19f42:	930a      	str	r3, [sp, #40]	@ 0x28
    const q31_t remainder_mask = (1 << exponent) - 1;
   19f44:	2301      	movs	r3, #1
   19f46:	fa03 f207 	lsl.w	r2, r3, r7
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19f4a:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
   19f4e:	f1ce 0a00 	rsb	sl, lr, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   19f52:	1e51      	subs	r1, r2, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19f54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   19f58:	fa03 f206 	lsl.w	r2, r3, r6
   19f5c:	3a01      	subs	r2, #1
   19f5e:	fa03 f30a 	lsl.w	r3, r3, sl
   19f62:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
    q31_t threshold = remainder_mask >> 1;
   19f66:	1053      	asrs	r3, r2, #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   19f68:	9204      	str	r2, [sp, #16]
    q31_t threshold = remainder_mask >> 1;
   19f6a:	ea4f 0861 	mov.w	r8, r1, asr #1
   19f6e:	ea4f 026e 	mov.w	r2, lr, asr #1
   19f72:	9305      	str	r3, [sp, #20]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19f74:	e9cd 670d 	strd	r6, r7, [sp, #52]	@ 0x34
        threshold++;
   19f78:	3301      	adds	r3, #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   19f7a:	9107      	str	r1, [sp, #28]
        threshold++;
   19f7c:	9306      	str	r3, [sp, #24]
   19f7e:	f108 0101 	add.w	r1, r8, #1
   19f82:	1c53      	adds	r3, r2, #1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19f84:	f8dd c0a4 	ldr.w	ip, [sp, #164]	@ 0xa4
   19f88:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
    q31_t threshold = remainder_mask >> 1;
   19f8c:	9202      	str	r2, [sp, #8]
        threshold++;
   19f8e:	9108      	str	r1, [sp, #32]
   19f90:	9303      	str	r3, [sp, #12]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19f92:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
   19f96:	2400      	movs	r4, #0
   19f98:	f8cd b098 	str.w	fp, [sp, #152]	@ 0x98
    {
        /* C = A + B */

        input_1 = (*input_1_vect++ + input_1_offset) << left_shift;
   19f9c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
   19f9e:	f912 3b01 	ldrsb.w	r3, [r2], #1
   19fa2:	9214      	str	r2, [sp, #80]	@ 0x50
   19fa4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
   19fa6:	4413      	add	r3, r2
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19fa8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
   19faa:	40ab      	lsls	r3, r5
   19fac:	4093      	lsls	r3, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19fae:	9a01      	ldr	r2, [sp, #4]
   19fb0:	4606      	mov	r6, r0
   19fb2:	4621      	mov	r1, r4
   19fb4:	fbc3 6102 	smlal	r6, r1, r3, r2
    result = (int32_t)(mult.long_long >> 31);
   19fb8:	0ff2      	lsrs	r2, r6, #31
   19fba:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
        input_2 = (*input_2_vect++ + input_2_offset) << left_shift;
   19fbe:	9b25      	ldr	r3, [sp, #148]	@ 0x94
   19fc0:	f919 1b01 	ldrsb.w	r1, [r9], #1
   19fc4:	4419      	add	r1, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19fc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   19fc8:	40a9      	lsls	r1, r5
   19fca:	4099      	lsls	r1, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19fcc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
   19fce:	4606      	mov	r6, r0
   19fd0:	46a3      	mov	fp, r4
   19fd2:	fbc1 6b03 	smlal	r6, fp, r1, r3
    result = (int32_t)(mult.long_long >> 31);
   19fd6:	0ff3      	lsrs	r3, r6, #31
    q31_t threshold = remainder_mask >> 1;
   19fd8:	990e      	ldr	r1, [sp, #56]	@ 0x38
    int32_t remainder = remainder_mask & dividend;
   19fda:	9e07      	ldr	r6, [sp, #28]
    q31_t threshold = remainder_mask >> 1;
   19fdc:	fa52 f101 	asrs.w	r1, r2, r1
    int32_t remainder = remainder_mask & dividend;
   19fe0:	ea02 0206 	and.w	r2, r2, r6
    q31_t threshold = remainder_mask >> 1;
   19fe4:	9e08      	ldr	r6, [sp, #32]
    result = (int32_t)(mult.long_long >> 31);
   19fe6:	ea43 034b 	orr.w	r3, r3, fp, lsl #1
    q31_t threshold = remainder_mask >> 1;
   19fea:	bf4c      	ite	mi
   19fec:	46b3      	movmi	fp, r6
   19fee:	46c3      	movpl	fp, r8
    if (remainder > threshold)
   19ff0:	4593      	cmp	fp, r2
    int32_t remainder = remainder_mask & dividend;
   19ff2:	9e04      	ldr	r6, [sp, #16]
    q31_t threshold = remainder_mask >> 1;
   19ff4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
        result++;
   19ff6:	bfb8      	it	lt
   19ff8:	3101      	addlt	r1, #1
    q31_t threshold = remainder_mask >> 1;
   19ffa:	fa53 f202 	asrs.w	r2, r3, r2
    int32_t remainder = remainder_mask & dividend;
   19ffe:	ea03 0306 	and.w	r3, r3, r6
    q31_t threshold = remainder_mask >> 1;
   1a002:	e9dd 7605 	ldrd	r7, r6, [sp, #20]
   1a006:	bf4c      	ite	mi
   1a008:	46b3      	movmi	fp, r6
   1a00a:	46bb      	movpl	fp, r7
    if (remainder > threshold)
   1a00c:	459b      	cmp	fp, r3
        result++;
   1a00e:	bfb8      	it	lt
   1a010:	3201      	addlt	r2, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1a012:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1a014:	9e2b      	ldr	r6, [sp, #172]	@ 0xac

        input_1 = arm_nn_requantize(input_1, input_1_mult, input_1_shift);
        input_2 = arm_nn_requantize(input_2, input_2_mult, input_2_shift);

        sum = input_1 + input_2;
   1a016:	440a      	add	r2, r1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1a018:	409a      	lsls	r2, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1a01a:	4621      	mov	r1, r4
   1a01c:	4603      	mov	r3, r0
   1a01e:	fbc2 3106 	smlal	r3, r1, r2, r6
    result = (int32_t)(mult.long_long >> 31);
   1a022:	0fdb      	lsrs	r3, r3, #31
   1a024:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    q31_t threshold = remainder_mask >> 1;
   1a028:	e9dd 6102 	ldrd	r6, r1, [sp, #8]
   1a02c:	fa53 f20a 	asrs.w	r2, r3, sl
   1a030:	bf58      	it	pl
   1a032:	4631      	movpl	r1, r6
    int32_t remainder = remainder_mask & dividend;
   1a034:	ea0e 0303 	and.w	r3, lr, r3
    if (remainder > threshold)
   1a038:	4299      	cmp	r1, r3
        sum = arm_nn_requantize(sum, out_mult, out_shift);
        sum += out_offset;
   1a03a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
        result++;
   1a03c:	bfb8      	it	lt
   1a03e:	3201      	addlt	r2, #1
   1a040:	441a      	add	r2, r3

        sum = MAX(sum, out_activation_min);
   1a042:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   1a044:	429a      	cmp	r2, r3
   1a046:	bfb8      	it	lt
   1a048:	461a      	movlt	r2, r3
        sum = MIN(sum, out_activation_max);
   1a04a:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
   1a04c:	429a      	cmp	r2, r3
   1a04e:	bfa8      	it	ge
   1a050:	461a      	movge	r2, r3

        *output++ = (q7_t)sum;
   1a052:	f80c 2b01 	strb.w	r2, [ip], #1
    while (loop_count > 0)
   1a056:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   1a058:	4563      	cmp	r3, ip
   1a05a:	d19f      	bne.n	19f9c <arm_elementwise_add_s8+0x4dc>
    }

#endif /* ARM_MATH_MVEI */

    return (ARM_CMSIS_NN_SUCCESS);
}
   1a05c:	2000      	movs	r0, #0
   1a05e:	b01b      	add	sp, #108	@ 0x6c
   1a060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while (loop_count > 0)
   1a064:	9b10      	ldr	r3, [sp, #64]	@ 0x40
   1a066:	9314      	str	r3, [sp, #80]	@ 0x50
   1a068:	e754      	b.n	19f14 <arm_elementwise_add_s8+0x454>
   1a06a:	bf00      	nop

0001a06c <arm_convolve_1_x_n_s8>:
                                          const q7_t *filter_data,
                                          const cmsis_nn_dims *bias_dims,
                                          const int32_t *bias_data,
                                          const cmsis_nn_dims *output_dims,
                                          q7_t *output_data)
{
   1a06c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    (void)bias_dims;
    arm_cmsis_nn_status status = ARM_CMSIS_NN_SUCCESS;
    /* The wrapper API is the ultimate reference for argument check */
    if ((input_dims->h != 1) || (output_dims->w % 4 != 0) || conv_params->dilation.w != 1)
   1a070:	685d      	ldr	r5, [r3, #4]
{
   1a072:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
    if ((input_dims->h != 1) || (output_dims->w % 4 != 0) || conv_params->dilation.w != 1)
   1a076:	2d01      	cmp	r5, #1
{
   1a078:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   1a07c:	e9dd e80a 	ldrd	lr, r8, [sp, #40]	@ 0x28
   1a080:	e9dd 940c 	ldrd	r9, r4, [sp, #48]	@ 0x30
    if ((input_dims->h != 1) || (output_dims->w % 4 != 0) || conv_params->dilation.w != 1)
   1a084:	d110      	bne.n	1a0a8 <arm_convolve_1_x_n_s8+0x3c>
   1a086:	68a5      	ldr	r5, [r4, #8]
   1a088:	07ad      	lsls	r5, r5, #30
   1a08a:	d10d      	bne.n	1a0a8 <arm_convolve_1_x_n_s8+0x3c>
   1a08c:	698d      	ldr	r5, [r1, #24]
   1a08e:	2d01      	cmp	r5, #1
   1a090:	d10a      	bne.n	1a0a8 <arm_convolve_1_x_n_s8+0x3c>
        /* Advance to the next batch */
        input_data += (input_x * input_ch);
    }

#else
    status = arm_convolve_s8(ctx,
   1a092:	e9cd 4a0d 	strd	r4, sl, [sp, #52]	@ 0x34
   1a096:	e9cd 890b 	strd	r8, r9, [sp, #44]	@ 0x2c
   1a09a:	e9cd 7e09 	strd	r7, lr, [sp, #36]	@ 0x24
   1a09e:	9608      	str	r6, [sp, #32]
#endif

out:
    /* Return to application */
    return status;
}
   1a0a0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    status = arm_convolve_s8(ctx,
   1a0a4:	f000 bc00 	b.w	1a8a8 <arm_convolve_s8>
}
   1a0a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   1a0ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001a0b0 <arm_convolve_1_x_n_s8_get_buffer_size>:

int32_t arm_convolve_1_x_n_s8_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
#if !defined(ARM_MATH_MVEI)
    return arm_convolve_s8_get_buffer_size(input_dims, filter_dims);
   1a0b0:	f000 bdd2 	b.w	1ac58 <arm_convolve_s8_get_buffer_size>

0001a0b4 <arm_convolve_1x1_s8_fast>:
                                             const cmsis_nn_dims *bias_dims,
                                             const int32_t *bias_data,
                                             const cmsis_nn_dims *output_dims,
                                             q7_t *output_data)
{
    if (conv_params->padding.w != 0 || conv_params->padding.h != 0 || conv_params->stride.w != 1 ||
   1a0b4:	6908      	ldr	r0, [r1, #16]
   1a0b6:	2800      	cmp	r0, #0
   1a0b8:	d12e      	bne.n	1a118 <arm_convolve_1x1_s8_fast+0x64>
{
   1a0ba:	b530      	push	{r4, r5, lr}
    if (conv_params->padding.w != 0 || conv_params->padding.h != 0 || conv_params->stride.w != 1 ||
   1a0bc:	694c      	ldr	r4, [r1, #20]
{
   1a0be:	b08b      	sub	sp, #44	@ 0x2c
    if (conv_params->padding.w != 0 || conv_params->padding.h != 0 || conv_params->stride.w != 1 ||
   1a0c0:	bb3c      	cbnz	r4, 1a112 <arm_convolve_1x1_s8_fast+0x5e>
   1a0c2:	6888      	ldr	r0, [r1, #8]
   1a0c4:	2801      	cmp	r0, #1
   1a0c6:	d124      	bne.n	1a112 <arm_convolve_1x1_s8_fast+0x5e>
   1a0c8:	68c8      	ldr	r0, [r1, #12]
   1a0ca:	2801      	cmp	r0, #1
   1a0cc:	d121      	bne.n	1a112 <arm_convolve_1x1_s8_fast+0x5e>

    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
    const int32_t rhs_rows = output_dims->c;
    const int32_t rhs_cols = input_dims->c;

    arm_nn_mat_mult_nt_t_s8(input_data,
   1a0ce:	6a48      	ldr	r0, [r1, #36]	@ 0x24
   1a0d0:	9008      	str	r0, [sp, #32]
   1a0d2:	6a08      	ldr	r0, [r1, #32]
   1a0d4:	9007      	str	r0, [sp, #28]
   1a0d6:	e9d1 0500 	ldrd	r0, r5, [r1]
   1a0da:	9506      	str	r5, [sp, #24]
   1a0dc:	e9d3 1502 	ldrd	r1, r5, [r3, #8]
   1a0e0:	e9cd 5004 	strd	r5, r0, [sp, #16]
    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
   1a0e4:	e9d3 0500 	ldrd	r0, r5, [r3]
   1a0e8:	fb05 f301 	mul.w	r3, r5, r1
    arm_nn_mat_mult_nt_t_s8(input_data,
   1a0ec:	e9d2 2100 	ldrd	r2, r1, [r2]
    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
   1a0f0:	fb00 f303 	mul.w	r3, r0, r3
    arm_nn_mat_mult_nt_t_s8(input_data,
   1a0f4:	e9cd 1301 	strd	r1, r3, [sp, #4]
   1a0f8:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
   1a0fa:	9200      	str	r2, [sp, #0]
   1a0fc:	68ed      	ldr	r5, [r5, #12]
   1a0fe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
   1a100:	9a12      	ldr	r2, [sp, #72]	@ 0x48
   1a102:	9910      	ldr	r1, [sp, #64]	@ 0x40
   1a104:	980e      	ldr	r0, [sp, #56]	@ 0x38
   1a106:	9503      	str	r5, [sp, #12]
   1a108:	f003 f84a 	bl	1d1a0 <arm_nn_mat_mult_nt_t_s8>
                            conv_params->activation.max);

#endif

    /* Return to application */
    return ARM_CMSIS_NN_SUCCESS;
   1a10c:	4620      	mov	r0, r4
}
   1a10e:	b00b      	add	sp, #44	@ 0x2c
   1a110:	bd30      	pop	{r4, r5, pc}
        return ARM_CMSIS_NN_ARG_ERROR;
   1a112:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   1a116:	e7fa      	b.n	1a10e <arm_convolve_1x1_s8_fast+0x5a>
   1a118:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
   1a11c:	4770      	bx	lr
   1a11e:	bf00      	nop

0001a120 <arm_convolve_1x1_s8_fast_get_buffer_size>:

int32_t arm_convolve_1x1_s8_fast_get_buffer_size(const cmsis_nn_dims *input_dims)
{
    (void)input_dims;
    return 0;
}
   1a120:	2000      	movs	r0, #0
   1a122:	4770      	bx	lr

0001a124 <arm_convolve_fast_s16>:
                                          const q7_t *filter_data,
                                          const cmsis_nn_dims *bias_dims,
                                          const int64_t *bias_data,
                                          const cmsis_nn_dims *output_dims,
                                          q15_t *output_data)
{
   1a124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a128:	b0b1      	sub	sp, #196	@ 0xc4
   1a12a:	461f      	mov	r7, r3
   1a12c:	f8dd 90ec 	ldr.w	r9, [sp, #236]	@ 0xec
   1a130:	9e3f      	ldr	r6, [sp, #252]	@ 0xfc
   1a132:	4680      	mov	r8, r0
   1a134:	4615      	mov	r5, r2
    (void)bias_dims;
    if (filter_dims->w * filter_dims->h * input_dims->c >= 512)
   1a136:	68d8      	ldr	r0, [r3, #12]
   1a138:	e9d9 3201 	ldrd	r3, r2, [r9, #4]
{
   1a13c:	460c      	mov	r4, r1
    if (filter_dims->w * filter_dims->h * input_dims->c >= 512)
   1a13e:	fb03 f102 	mul.w	r1, r3, r2
   1a142:	fb00 f101 	mul.w	r1, r0, r1
   1a146:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
   1a14a:	9317      	str	r3, [sp, #92]	@ 0x5c
   1a14c:	f280 81da 	bge.w	1a504 <arm_convolve_fast_s16+0x3e0>
    {
        return ARM_CMSIS_NN_ARG_ERROR;
    }

    if (ctx->buf == NULL && arm_convolve_s8_get_buffer_size(input_dims, filter_dims) > 0)
   1a150:	f8d8 e000 	ldr.w	lr, [r8]
   1a154:	f1be 0f00 	cmp.w	lr, #0
   1a158:	f000 81c7 	beq.w	1a4ea <arm_convolve_fast_s16+0x3c6>
        return ARM_CMSIS_NN_ARG_ERROR;
    }
    q15_t *buffer_a = (q15_t *)ctx->buf;

    const int32_t input_batches = input_dims->n;
    const int32_t input_x = input_dims->w;
   1a15c:	68bb      	ldr	r3, [r7, #8]
   1a15e:	9307      	str	r3, [sp, #28]
    const int32_t input_y = input_dims->h;
    const int32_t input_ch = input_dims->c;
    const int32_t kernel_x = filter_dims->w;
    const int32_t kernel_y = filter_dims->h;
    const int32_t output_x = output_dims->w;
   1a160:	68b3      	ldr	r3, [r6, #8]
   1a162:	9310      	str	r3, [sp, #64]	@ 0x40
    const int32_t output_y = output_dims->h;
   1a164:	6873      	ldr	r3, [r6, #4]
   1a166:	9318      	str	r3, [sp, #96]	@ 0x60
    const int32_t output_ch = output_dims->c;
   1a168:	68f3      	ldr	r3, [r6, #12]
   1a16a:	9316      	str	r3, [sp, #88]	@ 0x58

    const int32_t pad_x = conv_params->padding.w;
   1a16c:	6923      	ldr	r3, [r4, #16]
   1a16e:	931e      	str	r3, [sp, #120]	@ 0x78
    const int32_t pad_y = conv_params->padding.h;
    const int32_t stride_x = conv_params->stride.w;
   1a170:	68a3      	ldr	r3, [r4, #8]
   1a172:	9311      	str	r3, [sp, #68]	@ 0x44
    const int32_t stride_y = conv_params->stride.h;
   1a174:	68e3      	ldr	r3, [r4, #12]
   1a176:	931f      	str	r3, [sp, #124]	@ 0x7c

    const int16_t out_activation_min = conv_params->activation.min;
   1a178:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
    const int32_t input_batches = input_dims->n;
   1a17c:	f8d7 8000 	ldr.w	r8, [r7]
    const int16_t out_activation_min = conv_params->activation.min;
   1a180:	9319      	str	r3, [sp, #100]	@ 0x64
    const int16_t out_activation_max = conv_params->activation.max;
   1a182:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	@ 0x24
   1a186:	931a      	str	r3, [sp, #104]	@ 0x68
    int32_t *output_mult = quant_params->multiplier;
   1a188:	682b      	ldr	r3, [r5, #0]
   1a18a:	931b      	str	r3, [sp, #108]	@ 0x6c
    int32_t *output_shift = quant_params->shift;

    for (int i_batch = 0; i_batch < input_batches; i_batch++)
   1a18c:	f1b8 0f00 	cmp.w	r8, #0
    int32_t *output_shift = quant_params->shift;
   1a190:	686b      	ldr	r3, [r5, #4]
    const int32_t input_y = input_dims->h;
   1a192:	f8d7 9004 	ldr.w	r9, [r7, #4]
    const int32_t pad_y = conv_params->padding.h;
   1a196:	f8d4 c014 	ldr.w	ip, [r4, #20]
    int32_t *output_shift = quant_params->shift;
   1a19a:	931c      	str	r3, [sp, #112]	@ 0x70
    for (int i_batch = 0; i_batch < input_batches; i_batch++)
   1a19c:	f340 815e 	ble.w	1a45c <arm_convolve_fast_s16+0x338>
                        }
                        two_column_buf += input_ch;
                    }
                }
                /* Computation is filed for every 2 columns */
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
   1a1a0:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
   1a1a2:	9b07      	ldr	r3, [sp, #28]
   1a1a4:	9e1e      	ldr	r6, [sp, #120]	@ 0x78
   1a1a6:	f8cd 80a8 	str.w	r8, [sp, #168]	@ 0xa8
   1a1aa:	fb07 f100 	mul.w	r1, r7, r0
   1a1ae:	fb02 f501 	mul.w	r5, r2, r1
   1a1b2:	fb0c f103 	mul.w	r1, ip, r3
   1a1b6:	4249      	negs	r1, r1
   1a1b8:	1b89      	subs	r1, r1, r6
   1a1ba:	fb00 f101 	mul.w	r1, r0, r1

                /* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
                const q15_t *ip_as_col = buffer_a;

                /* 4 multiply and accumulates are done in one loop. */
                uint16_t col_count = (input_ch * kernel_y * kernel_x) >> 2;
   1a1be:	f3c5 048f 	ubfx	r4, r5, #2, #16
   1a1c2:	0049      	lsls	r1, r1, #1
   1a1c4:	9129      	str	r1, [sp, #164]	@ 0xa4
   1a1c6:	1e61      	subs	r1, r4, #1
   1a1c8:	b289      	uxth	r1, r1
   1a1ca:	9420      	str	r4, [sp, #128]	@ 0x80
   1a1cc:	1c4c      	adds	r4, r1, #1
                    sum = __SMLAD(ker_a2, ip_b2, sum);

                    col_count--;
                }
                /* Handle left over mac */
                col_count = input_ch * kernel_y * kernel_x & 0x3;
   1a1ce:	fb10 f107 	smulbb	r1, r0, r7
   1a1d2:	fb11 f102 	smulbb	r1, r1, r2
   1a1d6:	f001 0103 	and.w	r1, r1, #3
   1a1da:	9125      	str	r1, [sp, #148]	@ 0x94
        (void)output_mult;
        (void)output_shift;
        return ARM_CMSIS_NN_ARG_ERROR;
#endif
        /* Advance to the next batch */
        input_data += (input_x * input_y * input_ch);
   1a1dc:	fb03 f109 	mul.w	r1, r3, r9
   1a1e0:	fb00 f101 	mul.w	r1, r0, r1
   1a1e4:	0049      	lsls	r1, r1, #1
        output_data += (output_x * output_y * output_ch);
   1a1e6:	9f10      	ldr	r7, [sp, #64]	@ 0x40
        input_data += (input_x * input_y * input_ch);
   1a1e8:	9121      	str	r1, [sp, #132]	@ 0x84
        output_data += (output_x * output_y * output_ch);
   1a1ea:	9918      	ldr	r1, [sp, #96]	@ 0x60
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
   1a1ec:	951d      	str	r5, [sp, #116]	@ 0x74
        output_data += (output_x * output_y * output_ch);
   1a1ee:	fb07 f101 	mul.w	r1, r7, r1
   1a1f2:	9f16      	ldr	r7, [sp, #88]	@ 0x58
   1a1f4:	f8cd e050 	str.w	lr, [sp, #80]	@ 0x50
   1a1f8:	fb07 f101 	mul.w	r1, r7, r1
   1a1fc:	0049      	lsls	r1, r1, #1
   1a1fe:	9123      	str	r1, [sp, #140]	@ 0x8c
   1a200:	991f      	ldr	r1, [sp, #124]	@ 0x7c
   1a202:	fb01 f103 	mul.w	r1, r1, r3
   1a206:	fb00 f101 	mul.w	r1, r0, r1
   1a20a:	0049      	lsls	r1, r1, #1
   1a20c:	9128      	str	r1, [sp, #160]	@ 0xa0
   1a20e:	9911      	ldr	r1, [sp, #68]	@ 0x44
   1a210:	fb01 f100 	mul.w	r1, r1, r0
   1a214:	0049      	lsls	r1, r1, #1
   1a216:	9113      	str	r1, [sp, #76]	@ 0x4c
   1a218:	fb03 f100 	mul.w	r1, r3, r0
   1a21c:	004b      	lsls	r3, r1, #1
   1a21e:	930b      	str	r3, [sp, #44]	@ 0x2c
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
   1a220:	eb0e 0385 	add.w	r3, lr, r5, lsl #2
   1a224:	9312      	str	r3, [sp, #72]	@ 0x48
   1a226:	4273      	negs	r3, r6
   1a228:	9326      	str	r3, [sp, #152]	@ 0x98
   1a22a:	007b      	lsls	r3, r7, #1
   1a22c:	9327      	str	r3, [sp, #156]	@ 0x9c
   1a22e:	00a3      	lsls	r3, r4, #2
   1a230:	9324      	str	r3, [sp, #144]	@ 0x90
   1a232:	eb0e 03c4 	add.w	r3, lr, r4, lsl #3
   1a236:	9322      	str	r3, [sp, #136]	@ 0x88
                            arm_memset_q7((q7_t *)two_column_buf, 0, sizeof(q15_t) * input_ch);
   1a238:	ea4f 0a40 	mov.w	sl, r0, lsl #1
    for (int i_batch = 0; i_batch < input_batches; i_batch++)
   1a23c:	2400      	movs	r4, #0
   1a23e:	4613      	mov	r3, r2
   1a240:	46c8      	mov	r8, r9
   1a242:	4666      	mov	r6, ip
        for (int32_t i_out_y = 0; i_out_y < output_y; i_out_y++)
   1a244:	9a18      	ldr	r2, [sp, #96]	@ 0x60
   1a246:	2a00      	cmp	r2, #0
   1a248:	f340 80fb 	ble.w	1a442 <arm_convolve_fast_s16+0x31e>
   1a24c:	9929      	ldr	r1, [sp, #164]	@ 0xa4
   1a24e:	9a3a      	ldr	r2, [sp, #232]	@ 0xe8
        q15_t *out = output_data;
   1a250:	f8dd c100 	ldr.w	ip, [sp, #256]	@ 0x100
        q15_t *two_column_buf = buffer_a;
   1a254:	f8dd 9050 	ldr.w	r9, [sp, #80]	@ 0x50
   1a258:	e9cd 642b 	strd	r6, r4, [sp, #172]	@ 0xac
   1a25c:	440a      	add	r2, r1
   1a25e:	4271      	negs	r1, r6
   1a260:	910f      	str	r1, [sp, #60]	@ 0x3c
   1a262:	4617      	mov	r7, r2
        for (int32_t i_out_y = 0; i_out_y < output_y; i_out_y++)
   1a264:	2100      	movs	r1, #0
            for (int32_t i_out_x = 0; i_out_x < output_x; i_out_x++)
   1a266:	9a10      	ldr	r2, [sp, #64]	@ 0x40
   1a268:	2a00      	cmp	r2, #0
   1a26a:	dd58      	ble.n	1a31e <arm_convolve_fast_s16+0x1fa>
   1a26c:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
   1a26e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
   1a270:	932d      	str	r3, [sp, #180]	@ 0xb4
   1a272:	1a9e      	subs	r6, r3, r2
                for (int32_t i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y;
   1a274:	9a26      	ldr	r2, [sp, #152]	@ 0x98
   1a276:	9209      	str	r2, [sp, #36]	@ 0x24
   1a278:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
   1a27a:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
   1a27e:	e9cd 172e 	strd	r1, r7, [sp, #184]	@ 0xb8
   1a282:	4402      	add	r2, r0
   1a284:	463d      	mov	r5, r7
            for (int32_t i_out_x = 0; i_out_x < output_x; i_out_x++)
   1a286:	2400      	movs	r4, #0
   1a288:	920a      	str	r2, [sp, #40]	@ 0x28
                for (int32_t i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y;
   1a28a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
   1a28c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   1a28e:	429a      	cmp	r2, r3
   1a290:	da31      	bge.n	1a2f6 <arm_convolve_fast_s16+0x1d2>
   1a292:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   1a294:	940d      	str	r4, [sp, #52]	@ 0x34
   1a296:	1af3      	subs	r3, r6, r3
   1a298:	fb0a f303 	mul.w	r3, sl, r3
   1a29c:	930c      	str	r3, [sp, #48]	@ 0x30
   1a29e:	462f      	mov	r7, r5
   1a2a0:	464b      	mov	r3, r9
   1a2a2:	950e      	str	r5, [sp, #56]	@ 0x38
   1a2a4:	4691      	mov	r9, r2
                    for (int32_t i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
   1a2a6:	9c09      	ldr	r4, [sp, #36]	@ 0x24
   1a2a8:	42b4      	cmp	r4, r6
   1a2aa:	da1a      	bge.n	1a2e2 <arm_convolve_fast_s16+0x1be>
   1a2ac:	461d      	mov	r5, r3
   1a2ae:	9708      	str	r7, [sp, #32]
   1a2b0:	469b      	mov	fp, r3
                        if (i_ker_y < 0 || i_ker_y >= input_y || i_ker_x < 0 || i_ker_x >= input_x)
   1a2b2:	45c8      	cmp	r8, r9
    memset(dst, val, block_size);
   1a2b4:	4652      	mov	r2, sl
   1a2b6:	f04f 0100 	mov.w	r1, #0
   1a2ba:	4628      	mov	r0, r5
   1a2bc:	dd06      	ble.n	1a2cc <arm_convolve_fast_s16+0x1a8>
   1a2be:	ea59 0c04 	orrs.w	ip, r9, r4
   1a2c2:	d403      	bmi.n	1a2cc <arm_convolve_fast_s16+0x1a8>
   1a2c4:	9b07      	ldr	r3, [sp, #28]
   1a2c6:	42a3      	cmp	r3, r4
   1a2c8:	f300 80cc 	bgt.w	1a464 <arm_convolve_fast_s16+0x340>
   1a2cc:	f00c fe06 	bl	26edc <memset>
                         i_ker_x++)
   1a2d0:	3401      	adds	r4, #1
                    for (int32_t i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
   1a2d2:	42b4      	cmp	r4, r6
                        two_column_buf += input_ch;
   1a2d4:	4455      	add	r5, sl
                    for (int32_t i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
   1a2d6:	4457      	add	r7, sl
   1a2d8:	d1eb      	bne.n	1a2b2 <arm_convolve_fast_s16+0x18e>
   1a2da:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
   1a2dc:	9f08      	ldr	r7, [sp, #32]
   1a2de:	465b      	mov	r3, fp
   1a2e0:	4413      	add	r3, r2
                for (int32_t i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y;
   1a2e2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
   1a2e4:	4417      	add	r7, r2
   1a2e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
                     i_ker_y++)
   1a2e8:	f109 0901 	add.w	r9, r9, #1
                for (int32_t i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y;
   1a2ec:	4591      	cmp	r9, r2
   1a2ee:	d1da      	bne.n	1a2a6 <arm_convolve_fast_s16+0x182>
   1a2f0:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
   1a2f2:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
   1a2f4:	4699      	mov	r9, r3
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
   1a2f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
   1a2f8:	454b      	cmp	r3, r9
   1a2fa:	f000 80b7 	beq.w	1a46c <arm_convolve_fast_s16+0x348>
            for (int32_t i_out_x = 0; i_out_x < output_x; i_out_x++)
   1a2fe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
   1a300:	9a09      	ldr	r2, [sp, #36]	@ 0x24
   1a302:	441e      	add	r6, r3
   1a304:	441a      	add	r2, r3
   1a306:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
   1a308:	9209      	str	r2, [sp, #36]	@ 0x24
   1a30a:	441d      	add	r5, r3
   1a30c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
   1a30e:	3401      	adds	r4, #1
   1a310:	42a3      	cmp	r3, r4
   1a312:	d1ba      	bne.n	1a28a <arm_convolve_fast_s16+0x166>
   1a314:	e9dd 172e 	ldrd	r1, r7, [sp, #184]	@ 0xb8
   1a318:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   1a31a:	f8dd c054 	ldr.w	ip, [sp, #84]	@ 0x54
        for (int32_t i_out_y = 0; i_out_y < output_y; i_out_y++)
   1a31e:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
   1a320:	981f      	ldr	r0, [sp, #124]	@ 0x7c
   1a322:	4417      	add	r7, r2
   1a324:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
   1a326:	4402      	add	r2, r0
   1a328:	920f      	str	r2, [sp, #60]	@ 0x3c
   1a32a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
   1a32c:	3101      	adds	r1, #1
   1a32e:	428a      	cmp	r2, r1
   1a330:	d199      	bne.n	1a266 <arm_convolve_fast_s16+0x142>
        if (two_column_buf != buffer_a)
   1a332:	9a14      	ldr	r2, [sp, #80]	@ 0x50
   1a334:	454a      	cmp	r2, r9
   1a336:	e9dd 642b 	ldrd	r6, r4, [sp, #172]	@ 0xac
   1a33a:	f000 8082 	beq.w	1a442 <arm_convolve_fast_s16+0x31e>
            for (i = 0; i < output_ch; i++)
   1a33e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
   1a340:	2a00      	cmp	r2, #0
   1a342:	dd7e      	ble.n	1a442 <arm_convolve_fast_s16+0x31e>
   1a344:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
   1a346:	f8dd b0f8 	ldr.w	fp, [sp, #248]	@ 0xf8
            const q7_t *ker_a = filter_data;
   1a34a:	983c      	ldr	r0, [sp, #240]	@ 0xf0
    const q31_t remainder_mask = (1 << exponent) - 1;
   1a34c:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
   1a350:	f1a2 0e04 	sub.w	lr, r2, #4
   1a354:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
   1a356:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
   1a35a:	f1a2 0904 	sub.w	r9, r2, #4
   1a35e:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
   1a360:	940c      	str	r4, [sp, #48]	@ 0x30
   1a362:	4462      	add	r2, ip
   1a364:	9208      	str	r2, [sp, #32]
   1a366:	469a      	mov	sl, r3
                while (col_count)
   1a368:	9b20      	ldr	r3, [sp, #128]	@ 0x80
   1a36a:	2b00      	cmp	r3, #0
   1a36c:	f000 80b9 	beq.w	1a4e2 <arm_convolve_fast_s16+0x3be>
   1a370:	9b24      	ldr	r3, [sp, #144]	@ 0x90
                const q15_t *ip_as_col = buffer_a;
   1a372:	9914      	ldr	r1, [sp, #80]	@ 0x50
                q31_t sum = 0;
   1a374:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
   1a378:	18c7      	adds	r7, r0, r3
   1a37a:	2300      	movs	r3, #0
    memcpy(&val, *in_q7, 4);
   1a37c:	f850 2b04 	ldr.w	r2, [r0], #4

__STATIC_FORCEINLINE uint32_t __SXTB16_RORn(uint32_t op1, uint32_t rotate)
{
  uint32_t result;
  if (__builtin_constant_p(rotate) && ((rotate == 8U) || (rotate == 16U) || (rotate == 24U))) {
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1a380:	fa2f f492 	sxtb16	r4, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1a384:	fa2f f282 	sxtb16	r2, r2
    memcpy(&val, *in_q15, 4);
   1a388:	f8d1 a000 	ldr.w	sl, [r1]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
   1a38c:	eac4 4822 	pkhtb	r8, r4, r2, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
   1a390:	eac2 4204 	pkhbt	r2, r2, r4, lsl #16

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1a394:	fb22 320a 	smlad	r2, r2, sl, r3
    memcpy(&val, *in_q15, 4);
   1a398:	684b      	ldr	r3, [r1, #4]
    *in_q15 += 2;
   1a39a:	3108      	adds	r1, #8
   1a39c:	fb28 2303 	smlad	r3, r8, r3, r2
                while (col_count)
   1a3a0:	4287      	cmp	r7, r0
   1a3a2:	d1eb      	bne.n	1a37c <arm_convolve_fast_s16+0x258>
   1a3a4:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
   1a3a8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
                while (col_count)
   1a3aa:	9925      	ldr	r1, [sp, #148]	@ 0x94
   1a3ac:	2900      	cmp	r1, #0
   1a3ae:	f000 8096 	beq.w	1a4de <arm_convolve_fast_s16+0x3ba>
   1a3b2:	1878      	adds	r0, r7, r1
                    sum += ker_a1 * ip_b1;
   1a3b4:	f917 1b01 	ldrsb.w	r1, [r7], #1
   1a3b8:	f832 4b02 	ldrh.w	r4, [r2], #2
                while (col_count)
   1a3bc:	42b8      	cmp	r0, r7
                    sum += ker_a1 * ip_b1;
   1a3be:	fb14 3301 	smlabb	r3, r4, r1, r3
                while (col_count)
   1a3c2:	d1f7      	bne.n	1a3b4 <arm_convolve_fast_s16+0x290>
                if (bias_data)
   1a3c4:	993e      	ldr	r1, [sp, #248]	@ 0xf8
                    q31_t reduced_multiplier = REDUCE_MULTIPLIER(output_mult[i]);
   1a3c6:	f85e 2f04 	ldr.w	r2, [lr, #4]!
                    sum = arm_nn_requantize_s64(acc_64, reduced_multiplier, output_shift[i]);
   1a3ca:	f859 8f04 	ldr.w	r8, [r9, #4]!
                if (bias_data)
   1a3ce:	2900      	cmp	r1, #0
   1a3d0:	d066      	beq.n	1a4a0 <arm_convolve_fast_s16+0x37c>
                    q31_t reduced_multiplier = REDUCE_MULTIPLIER(output_mult[i]);
   1a3d2:	494e      	ldr	r1, [pc, #312]	@ (1a50c <arm_convolve_fast_s16+0x3e8>)
   1a3d4:	428a      	cmp	r2, r1
   1a3d6:	dc5f      	bgt.n	1a498 <arm_convolve_fast_s16+0x374>
   1a3d8:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
    const q63_t new_val = val * reduced_multiplier;
   1a3dc:	1417      	asrs	r7, r2, #16
   1a3de:	17d1      	asrs	r1, r2, #31
                    q63_t acc_64 = sum + bias_data[i];
   1a3e0:	f8db 2000 	ldr.w	r2, [fp]
   1a3e4:	189a      	adds	r2, r3, r2
   1a3e6:	fb02 f401 	mul.w	r4, r2, r1
   1a3ea:	f8db 1004 	ldr.w	r1, [fp, #4]
   1a3ee:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   1a3f2:	fb07 4101 	mla	r1, r7, r1, r4
   1a3f6:	fba2 7207 	umull	r7, r2, r2, r7
   1a3fa:	188b      	adds	r3, r1, r2
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
   1a3fc:	f1c8 020e 	rsb	r2, r8, #14
   1a400:	f108 0812 	add.w	r8, r8, #18
   1a404:	40d7      	lsrs	r7, r2
   1a406:	fa03 f808 	lsl.w	r8, r3, r8
   1a40a:	3a20      	subs	r2, #32
   1a40c:	ea47 0708 	orr.w	r7, r7, r8
   1a410:	bf5c      	itt	pl
   1a412:	fa43 f202 	asrpl.w	r2, r3, r2
   1a416:	4317      	orrpl	r7, r2
    result = (result + 1) >> 1;             // Last shift position and insert round
   1a418:	1c7b      	adds	r3, r7, #1
   1a41a:	105b      	asrs	r3, r3, #1
                sum = MAX(sum, out_activation_min);
   1a41c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
   1a41e:	4293      	cmp	r3, r2
   1a420:	bfb8      	it	lt
   1a422:	4613      	movlt	r3, r2
                sum = MIN(sum, out_activation_max);
   1a424:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
   1a426:	4293      	cmp	r3, r2
   1a428:	bfa8      	it	ge
   1a42a:	4613      	movge	r3, r2
                *out++ = (q15_t)sum;
   1a42c:	f82c 3b02 	strh.w	r3, [ip], #2
            for (i = 0; i < output_ch; i++)
   1a430:	9b08      	ldr	r3, [sp, #32]
   1a432:	459c      	cmp	ip, r3
   1a434:	f10b 0b08 	add.w	fp, fp, #8
   1a438:	d196      	bne.n	1a368 <arm_convolve_fast_s16+0x244>
   1a43a:	4653      	mov	r3, sl
   1a43c:	e9dd a809 	ldrd	sl, r8, [sp, #36]	@ 0x24
   1a440:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
        input_data += (input_x * input_y * input_ch);
   1a442:	9a3a      	ldr	r2, [sp, #232]	@ 0xe8
   1a444:	9921      	ldr	r1, [sp, #132]	@ 0x84
   1a446:	440a      	add	r2, r1
   1a448:	923a      	str	r2, [sp, #232]	@ 0xe8
        output_data += (output_x * output_y * output_ch);
   1a44a:	9923      	ldr	r1, [sp, #140]	@ 0x8c
   1a44c:	9a40      	ldr	r2, [sp, #256]	@ 0x100
   1a44e:	440a      	add	r2, r1
   1a450:	9240      	str	r2, [sp, #256]	@ 0x100
    for (int i_batch = 0; i_batch < input_batches; i_batch++)
   1a452:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
   1a454:	3401      	adds	r4, #1
   1a456:	42a2      	cmp	r2, r4
   1a458:	f47f aef4 	bne.w	1a244 <arm_convolve_fast_s16+0x120>
    }

    /* Return to application */
    return ARM_CMSIS_NN_SUCCESS;
   1a45c:	2000      	movs	r0, #0
}
   1a45e:	b031      	add	sp, #196	@ 0xc4
   1a460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy(dst, src, block_size);
   1a464:	4639      	mov	r1, r7
   1a466:	f7fe f88b 	bl	18580 <memcpy>
}
   1a46a:	e731      	b.n	1a2d0 <arm_convolve_fast_s16+0x1ac>
                    out = arm_nn_mat_mult_kernel_s16(filter_data,
   1a46c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
   1a46e:	9305      	str	r3, [sp, #20]
   1a470:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
   1a472:	9304      	str	r3, [sp, #16]
   1a474:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
   1a476:	9303      	str	r3, [sp, #12]
   1a478:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
   1a47a:	f8dd 9050 	ldr.w	r9, [sp, #80]	@ 0x50
   1a47e:	9302      	str	r3, [sp, #8]
   1a480:	9b19      	ldr	r3, [sp, #100]	@ 0x64
   1a482:	9301      	str	r3, [sp, #4]
   1a484:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
   1a486:	9300      	str	r3, [sp, #0]
   1a488:	9a16      	ldr	r2, [sp, #88]	@ 0x58
   1a48a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
   1a48c:	983c      	ldr	r0, [sp, #240]	@ 0xf0
   1a48e:	4649      	mov	r1, r9
   1a490:	f002 fb6e 	bl	1cb70 <arm_nn_mat_mult_kernel_s16>
   1a494:	9015      	str	r0, [sp, #84]	@ 0x54
                    two_column_buf = buffer_a;
   1a496:	e732      	b.n	1a2fe <arm_convolve_fast_s16+0x1da>
   1a498:	f647 77ff 	movw	r7, #32767	@ 0x7fff
   1a49c:	2100      	movs	r1, #0
   1a49e:	e79f      	b.n	1a3e0 <arm_convolve_fast_s16+0x2bc>
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1a4a0:	ea28 71e8 	bic.w	r1, r8, r8, asr #31
   1a4a4:	408b      	lsls	r3, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1a4a6:	993e      	ldr	r1, [sp, #248]	@ 0xf8
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1a4a8:	f1c8 0800 	rsb	r8, r8, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1a4ac:	f04f 4780 	mov.w	r7, #1073741824	@ 0x40000000
   1a4b0:	fbc3 7102 	smlal	r7, r1, r3, r2
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1a4b4:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1a4b8:	2201      	movs	r2, #1
    result = (int32_t)(mult.long_long >> 31);
   1a4ba:	0ffb      	lsrs	r3, r7, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1a4bc:	fa02 f208 	lsl.w	r2, r2, r8
    result = (int32_t)(mult.long_long >> 31);
   1a4c0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1a4c4:	3a01      	subs	r2, #1
    int32_t remainder = remainder_mask & dividend;
   1a4c6:	ea03 0102 	and.w	r1, r3, r2
    if (result < 0)
   1a4ca:	fa53 f308 	asrs.w	r3, r3, r8
    q31_t threshold = remainder_mask >> 1;
   1a4ce:	ea4f 0262 	mov.w	r2, r2, asr #1
        threshold++;
   1a4d2:	bf48      	it	mi
   1a4d4:	3201      	addmi	r2, #1
    if (remainder > threshold)
   1a4d6:	4291      	cmp	r1, r2
        result++;
   1a4d8:	bfc8      	it	gt
   1a4da:	3301      	addgt	r3, #1
   1a4dc:	e79e      	b.n	1a41c <arm_convolve_fast_s16+0x2f8>
                while (col_count)
   1a4de:	4638      	mov	r0, r7
   1a4e0:	e770      	b.n	1a3c4 <arm_convolve_fast_s16+0x2a0>
                const q15_t *ip_as_col = buffer_a;
   1a4e2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
                q31_t sum = 0;
   1a4e4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
                while (col_count)
   1a4e6:	4607      	mov	r7, r0
   1a4e8:	e75f      	b.n	1a3aa <arm_convolve_fast_s16+0x286>
    if (ctx->buf == NULL && arm_convolve_s8_get_buffer_size(input_dims, filter_dims) > 0)
   1a4ea:	4649      	mov	r1, r9
   1a4ec:	4638      	mov	r0, r7
   1a4ee:	f000 fbb3 	bl	1ac58 <arm_convolve_s8_get_buffer_size>
   1a4f2:	2800      	cmp	r0, #0
   1a4f4:	dc06      	bgt.n	1a504 <arm_convolve_fast_s16+0x3e0>
    const int32_t kernel_y = filter_dims->h;
   1a4f6:	e9d9 3201 	ldrd	r3, r2, [r9, #4]
    q15_t *buffer_a = (q15_t *)ctx->buf;
   1a4fa:	f8d8 e000 	ldr.w	lr, [r8]
    const int32_t input_ch = input_dims->c;
   1a4fe:	68f8      	ldr	r0, [r7, #12]
    const int32_t kernel_y = filter_dims->h;
   1a500:	9317      	str	r3, [sp, #92]	@ 0x5c
   1a502:	e62b      	b.n	1a15c <arm_convolve_fast_s16+0x38>
        return ARM_CMSIS_NN_ARG_ERROR;
   1a504:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   1a508:	e7a9      	b.n	1a45e <arm_convolve_fast_s16+0x33a>
   1a50a:	bf00      	nop
   1a50c:	7ffeffff 	.word	0x7ffeffff

0001a510 <arm_convolve_fast_s16_get_buffer_size>:

int32_t arm_convolve_fast_s16_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * (int32_t)sizeof(int16_t);
   1a510:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
   1a514:	68c0      	ldr	r0, [r0, #12]
   1a516:	fb02 f000 	mul.w	r0, r2, r0
   1a51a:	fb03 f000 	mul.w	r0, r3, r0
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
   1a51e:	0080      	lsls	r0, r0, #2
   1a520:	4770      	bx	lr
   1a522:	bf00      	nop

0001a524 <arm_convolve_s16>:
                                     const q7_t *filter_data,
                                     const cmsis_nn_dims *bias_dims,
                                     const int64_t *bias_data,
                                     const cmsis_nn_dims *output_dims,
                                     q15_t *output_data)
{
   1a524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a528:	b0bb      	sub	sp, #236	@ 0xec
   1a52a:	461d      	mov	r5, r3
   1a52c:	9e45      	ldr	r6, [sp, #276]	@ 0x114
   1a52e:	9b49      	ldr	r3, [sp, #292]	@ 0x124
    (void)bias_dims;
    (void)ctx;

    const int32_t input_batches = input_dims->n;
    const int32_t input_x = input_dims->w;
   1a530:	68af      	ldr	r7, [r5, #8]
    const int32_t input_batches = input_dims->n;
   1a532:	682c      	ldr	r4, [r5, #0]
    const int32_t input_y = input_dims->h;
    const int32_t input_ch = input_dims->c;
   1a534:	f8d5 b00c 	ldr.w	fp, [r5, #12]
    const int32_t input_x = input_dims->w;
   1a538:	970e      	str	r7, [sp, #56]	@ 0x38
    const int32_t input_y = input_dims->h;
   1a53a:	686f      	ldr	r7, [r5, #4]
    const int32_t kernel_x = filter_dims->w;
   1a53c:	68b5      	ldr	r5, [r6, #8]
    const int32_t kernel_y = filter_dims->h;
   1a53e:	6876      	ldr	r6, [r6, #4]
   1a540:	9618      	str	r6, [sp, #96]	@ 0x60
    const int32_t output_x = output_dims->w;
   1a542:	689e      	ldr	r6, [r3, #8]
   1a544:	9610      	str	r6, [sp, #64]	@ 0x40
    const int32_t output_y = output_dims->h;
    const int32_t output_ch = output_dims->c;

    const int32_t pad_x = conv_params->padding.w;
   1a546:	690e      	ldr	r6, [r1, #16]
   1a548:	9619      	str	r6, [sp, #100]	@ 0x64
    const int32_t pad_y = conv_params->padding.h;
   1a54a:	694e      	ldr	r6, [r1, #20]
   1a54c:	961a      	str	r6, [sp, #104]	@ 0x68
    const int32_t stride_x = conv_params->stride.w;
   1a54e:	688e      	ldr	r6, [r1, #8]
   1a550:	961e      	str	r6, [sp, #120]	@ 0x78
    const int32_t stride_y = conv_params->stride.h;
   1a552:	68ce      	ldr	r6, [r1, #12]
    const int32_t input_y = input_dims->h;
   1a554:	9717      	str	r7, [sp, #92]	@ 0x5c
    const int32_t kernel_x = filter_dims->w;
   1a556:	950f      	str	r5, [sp, #60]	@ 0x3c
    const int32_t dilation_x = conv_params->dilation.w;
    const int32_t dilation_y = conv_params->dilation.h;
   1a558:	69cf      	ldr	r7, [r1, #28]
    const int32_t output_y = output_dims->h;
   1a55a:	685d      	ldr	r5, [r3, #4]
    const int32_t stride_y = conv_params->stride.h;
   1a55c:	961f      	str	r6, [sp, #124]	@ 0x7c
    const int32_t dilation_x = conv_params->dilation.w;
   1a55e:	698e      	ldr	r6, [r1, #24]
    const int32_t output_y = output_dims->h;
   1a560:	9511      	str	r5, [sp, #68]	@ 0x44
{
   1a562:	9846      	ldr	r0, [sp, #280]	@ 0x118
   1a564:	f8dd 8128 	ldr.w	r8, [sp, #296]	@ 0x128
    const int32_t output_ch = output_dims->c;
   1a568:	68dd      	ldr	r5, [r3, #12]
    const int32_t dilation_x = conv_params->dilation.w;
   1a56a:	9612      	str	r6, [sp, #72]	@ 0x48
    const int32_t dilation_y = conv_params->dilation.h;
   1a56c:	9713      	str	r7, [sp, #76]	@ 0x4c

    const int32_t out_activation_min = conv_params->activation.min;
   1a56e:	6a0e      	ldr	r6, [r1, #32]
    const int32_t out_activation_max = conv_params->activation.max;
   1a570:	6a49      	ldr	r1, [r1, #36]	@ 0x24
    const int32_t out_activation_min = conv_params->activation.min;
   1a572:	9620      	str	r6, [sp, #128]	@ 0x80
    const int32_t out_activation_max = conv_params->activation.max;
   1a574:	9121      	str	r1, [sp, #132]	@ 0x84
    int32_t *output_mult = quant_params->multiplier;
    int32_t *output_shift = quant_params->shift;
   1a576:	e9d2 6100 	ldrd	r6, r1, [r2]

    for (int i_batch = 0; i_batch < input_batches; i_batch++)
   1a57a:	2c00      	cmp	r4, #0
    int32_t *output_shift = quant_params->shift;
   1a57c:	9122      	str	r1, [sp, #136]	@ 0x88
    for (int i_batch = 0; i_batch < input_batches; i_batch++)
   1a57e:	f340 8185 	ble.w	1a88c <arm_convolve_s16+0x368>
                    output_data[i_out_ch + (i_out_y * output_x + i_out_x) * output_ch] = (int16_t)conv_out;
                }
            }
        }
        /* Advance to the next batch */
        input_data += (input_x * input_y * input_ch);
   1a582:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
   1a584:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
   1a586:	990f      	ldr	r1, [sp, #60]	@ 0x3c
   1a588:	fb03 f302 	mul.w	r3, r3, r2
   1a58c:	fb0b f303 	mul.w	r3, fp, r3
   1a590:	1e47      	subs	r7, r0, #1
   1a592:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        output_data += (output_x * output_y * output_ch);
   1a596:	e9dd 0310 	ldrd	r0, r3, [sp, #64]	@ 0x40
   1a59a:	fb03 f300 	mul.w	r3, r3, r0
   1a59e:	fb05 f303 	mul.w	r3, r5, r3
   1a5a2:	ea4f 0e43 	mov.w	lr, r3, lsl #1
   1a5a6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
   1a5a8:	fb01 f303 	mul.w	r3, r1, r3
   1a5ac:	fb0b f303 	mul.w	r3, fp, r3
   1a5b0:	9329      	str	r3, [sp, #164]	@ 0xa4
   1a5b2:	fb05 f300 	mul.w	r3, r5, r0
   1a5b6:	0058      	lsls	r0, r3, #1
   1a5b8:	fb0b f302 	mul.w	r3, fp, r2
   1a5bc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
   1a5be:	9028      	str	r0, [sp, #160]	@ 0xa0
   1a5c0:	fb02 f203 	mul.w	r2, r2, r3
   1a5c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
   1a5c6:	9208      	str	r2, [sp, #32]
   1a5c8:	fb0b f903 	mul.w	r9, fp, r3
   1a5cc:	006b      	lsls	r3, r5, #1
   1a5ce:	ea4f 024b 	mov.w	r2, fp, lsl #1
   1a5d2:	9327      	str	r3, [sp, #156]	@ 0x9c
   1a5d4:	fb01 f30b 	mul.w	r3, r1, fp
   1a5d8:	9309      	str	r3, [sp, #36]	@ 0x24
   1a5da:	4629      	mov	r1, r5
   1a5dc:	4610      	mov	r0, r2
   1a5de:	ea4f 0a49 	mov.w	sl, r9, lsl #1
   1a5e2:	4642      	mov	r2, r8
    for (int i_batch = 0; i_batch < input_batches; i_batch++)
   1a5e4:	2300      	movs	r3, #0
   1a5e6:	4665      	mov	r5, ip
   1a5e8:	46b8      	mov	r8, r7
        for (int32_t i_out_ch = 0; i_out_ch < output_ch; i_out_ch++)
   1a5ea:	2900      	cmp	r1, #0
   1a5ec:	f340 8146 	ble.w	1a87c <arm_convolve_s16+0x358>
            for (int32_t base_idx_y = -pad_y, i_out_y = 0; i_out_y < output_y; base_idx_y += stride_y, i_out_y++)
   1a5f0:	2700      	movs	r7, #0
   1a5f2:	970c      	str	r7, [sp, #48]	@ 0x30
   1a5f4:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
   1a5f6:	9430      	str	r4, [sp, #192]	@ 0xc0
   1a5f8:	427f      	negs	r7, r7
   1a5fa:	9701      	str	r7, [sp, #4]
        for (int32_t i_out_ch = 0; i_out_ch < output_ch; i_out_ch++)
   1a5fc:	2700      	movs	r7, #0
   1a5fe:	970b      	str	r7, [sp, #44]	@ 0x2c
   1a600:	9f44      	ldr	r7, [sp, #272]	@ 0x110
   1a602:	9331      	str	r3, [sp, #196]	@ 0xc4
   1a604:	19c7      	adds	r7, r0, r7
   1a606:	f1a6 0c04 	sub.w	ip, r6, #4
   1a60a:	970a      	str	r7, [sp, #40]	@ 0x28
   1a60c:	9f01      	ldr	r7, [sp, #4]
   1a60e:	f8cd c074 	str.w	ip, [sp, #116]	@ 0x74
   1a612:	e9cd 5e2e 	strd	r5, lr, [sp, #184]	@ 0xb8
   1a616:	460c      	mov	r4, r1
   1a618:	46d6      	mov	lr, sl
   1a61a:	46ca      	mov	sl, r9
   1a61c:	4691      	mov	r9, r2
            const q31_t reduced_multiplier = REDUCE_MULTIPLIER(output_mult[i_out_ch]);
   1a61e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
   1a620:	f852 3f04 	ldr.w	r3, [r2, #4]!
   1a624:	921d      	str	r2, [sp, #116]	@ 0x74
   1a626:	4a9e      	ldr	r2, [pc, #632]	@ (1a8a0 <arm_convolve_s16+0x37c>)
   1a628:	4293      	cmp	r3, r2
   1a62a:	bfda      	itte	le
   1a62c:	f503 4300 	addle.w	r3, r3, #32768	@ 0x8000
   1a630:	141b      	asrle	r3, r3, #16
   1a632:	f647 73ff 	movwgt	r3, #32767	@ 0x7fff
   1a636:	930d      	str	r3, [sp, #52]	@ 0x34
            for (int32_t base_idx_y = -pad_y, i_out_y = 0; i_out_y < output_y; base_idx_y += stride_y, i_out_y++)
   1a638:	9b11      	ldr	r3, [sp, #68]	@ 0x44
   1a63a:	2b00      	cmp	r3, #0
   1a63c:	f340 810b 	ble.w	1a856 <arm_convolve_s16+0x332>
   1a640:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
   1a642:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
    const q63_t new_val = val * reduced_multiplier;
   1a644:	f8cd 9128 	str.w	r9, [sp, #296]	@ 0x128
   1a648:	3b01      	subs	r3, #1
   1a64a:	4413      	add	r3, r2
   1a64c:	9316      	str	r3, [sp, #88]	@ 0x58
                for (int32_t base_idx_x = -pad_x, i_out_x = 0; i_out_x < output_x; base_idx_x += stride_x, i_out_x++)
   1a64e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
            for (int32_t base_idx_y = -pad_y, i_out_y = 0; i_out_y < output_y; base_idx_y += stride_y, i_out_y++)
   1a650:	9714      	str	r7, [sp, #80]	@ 0x50
                for (int32_t base_idx_x = -pad_x, i_out_x = 0; i_out_x < output_x; base_idx_x += stride_x, i_out_x++)
   1a652:	425b      	negs	r3, r3
   1a654:	9324      	str	r3, [sp, #144]	@ 0x90
   1a656:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   1a658:	9734      	str	r7, [sp, #208]	@ 0xd0
   1a65a:	eb09 0243 	add.w	r2, r9, r3, lsl #1
   1a65e:	9215      	str	r2, [sp, #84]	@ 0x54
   1a660:	9a48      	ldr	r2, [sp, #288]	@ 0x120
   1a662:	9035      	str	r0, [sp, #212]	@ 0xd4
   1a664:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1a668:	932a      	str	r3, [sp, #168]	@ 0xa8
            for (int32_t base_idx_y = -pad_y, i_out_y = 0; i_out_y < output_y; base_idx_y += stride_y, i_out_y++)
   1a66a:	2300      	movs	r3, #0
   1a66c:	931b      	str	r3, [sp, #108]	@ 0x6c
   1a66e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   1a670:	17da      	asrs	r2, r3, #31
   1a672:	e9cd 232c 	strd	r2, r3, [sp, #176]	@ 0xb0
   1a676:	e9cd 4632 	strd	r4, r6, [sp, #200]	@ 0xc8
   1a67a:	46f1      	mov	r9, lr
                for (int32_t base_idx_x = -pad_x, i_out_x = 0; i_out_x < output_x; base_idx_x += stride_x, i_out_x++)
   1a67c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
   1a67e:	2b00      	cmp	r3, #0
   1a680:	f340 80d0 	ble.w	1a824 <arm_convolve_s16+0x300>
   1a684:	9812      	ldr	r0, [sp, #72]	@ 0x48
   1a686:	9919      	ldr	r1, [sp, #100]	@ 0x64
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
   1a688:	9b22      	ldr	r3, [sp, #136]	@ 0x88
   1a68a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
    const q63_t new_val = val * reduced_multiplier;
   1a68c:	f8dd c054 	ldr.w	ip, [sp, #84]	@ 0x54
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
   1a690:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
                    const int32_t start_y_max = (-base_idx_y + dilation_y - 1) / dilation_y;
   1a694:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
   1a696:	9a16      	ldr	r2, [sp, #88]	@ 0x58
   1a698:	fb92 f6f3 	sdiv	r6, r2, r3
   1a69c:	4401      	add	r1, r0
   1a69e:	1e4f      	subs	r7, r1, #1
   1a6a0:	9914      	ldr	r1, [sp, #80]	@ 0x50
   1a6a2:	980e      	ldr	r0, [sp, #56]	@ 0x38
                    const int32_t ker_y_start = MAX(0, start_y_max);
   1a6a4:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
   1a6a8:	fb06 1103 	mla	r1, r6, r3, r1
   1a6ac:	fb00 f101 	mul.w	r1, r0, r1
   1a6b0:	9125      	str	r1, [sp, #148]	@ 0x94
                    const int32_t end_min_y = (input_y - base_idx_y + dilation_y - 1) / dilation_y;
   1a6b2:	9917      	ldr	r1, [sp, #92]	@ 0x5c
   1a6b4:	4411      	add	r1, r2
   1a6b6:	fb91 f1f3 	sdiv	r1, r1, r3
                    const int32_t ker_y_end = MIN(kernel_y, end_min_y);
   1a6ba:	9b18      	ldr	r3, [sp, #96]	@ 0x60
   1a6bc:	4299      	cmp	r1, r3
   1a6be:	bfa8      	it	ge
   1a6c0:	4619      	movge	r1, r3
   1a6c2:	f1c5 030e 	rsb	r3, r5, #14
   1a6c6:	9323      	str	r3, [sp, #140]	@ 0x8c
   1a6c8:	f105 0312 	add.w	r3, r5, #18
   1a6cc:	932b      	str	r3, [sp, #172]	@ 0xac
   1a6ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
                for (int32_t base_idx_x = -pad_x, i_out_x = 0; i_out_x < output_x; base_idx_x += stride_x, i_out_x++)
   1a6d0:	9d24      	ldr	r5, [sp, #144]	@ 0x90
                    const int32_t ker_y_end = MIN(kernel_y, end_min_y);
   1a6d2:	9107      	str	r1, [sp, #28]
   1a6d4:	fb03 f306 	mul.w	r3, r3, r6
   1a6d8:	9326      	str	r3, [sp, #152]	@ 0x98
                for (int32_t base_idx_x = -pad_x, i_out_x = 0; i_out_x < output_x; base_idx_x += stride_x, i_out_x++)
   1a6da:	2300      	movs	r3, #0
   1a6dc:	931c      	str	r3, [sp, #112]	@ 0x70
   1a6de:	462b      	mov	r3, r5
   1a6e0:	4635      	mov	r5, r6
   1a6e2:	461e      	mov	r6, r3
                    const int32_t end_min_x = (input_x - base_idx_x + dilation_x - 1) / dilation_x;
   1a6e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   1a6e6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
   1a6e8:	eb03 0e07 	add.w	lr, r3, r7
                    const int32_t ker_x_end = MIN(kernel_x, end_min_x);
   1a6ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
                    const int32_t end_min_x = (input_x - base_idx_x + dilation_x - 1) / dilation_x;
   1a6ee:	fb9e fef2 	sdiv	lr, lr, r2
                    const int32_t ker_x_end = MIN(kernel_x, end_min_x);
   1a6f2:	459e      	cmp	lr, r3
   1a6f4:	bfa8      	it	ge
   1a6f6:	469e      	movge	lr, r3
                    const int32_t start_x_max = (-base_idx_x + dilation_x - 1) / dilation_x;
   1a6f8:	fb97 f3f2 	sdiv	r3, r7, r2
                    const int32_t ker_x_start = MAX(0, start_x_max);
   1a6fc:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
                    for (int32_t i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
   1a700:	9b07      	ldr	r3, [sp, #28]
                    const int32_t ker_x_start = MAX(0, start_x_max);
   1a702:	9102      	str	r1, [sp, #8]
                    for (int32_t i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
   1a704:	429d      	cmp	r5, r3
   1a706:	f280 80c5 	bge.w	1a894 <arm_convolve_s16+0x370>
   1a70a:	9b25      	ldr	r3, [sp, #148]	@ 0x94
   1a70c:	f8cd 8004 	str.w	r8, [sp, #4]
   1a710:	18f3      	adds	r3, r6, r3
   1a712:	fb01 3302 	mla	r3, r1, r2, r3
   1a716:	9a26      	ldr	r2, [sp, #152]	@ 0x98
   1a718:	188a      	adds	r2, r1, r2
   1a71a:	990c      	ldr	r1, [sp, #48]	@ 0x30
   1a71c:	e9cd 7c38 	strd	r7, ip, [sp, #224]	@ 0xe0
   1a720:	fb0b 1202 	mla	r2, fp, r2, r1
   1a724:	462c      	mov	r4, r5
   1a726:	e9cd 5636 	strd	r5, r6, [sp, #216]	@ 0xd8
   1a72a:	4615      	mov	r5, r2
   1a72c:	fb0b f303 	mul.w	r3, fp, r3
   1a730:	4622      	mov	r2, r4
                    int64_t conv_out_acc = 0;
   1a732:	2000      	movs	r0, #0
   1a734:	2100      	movs	r1, #0
   1a736:	462c      	mov	r4, r5
                        for (int32_t i_ker_x = ker_x_start; i_ker_x < ker_x_end; i_ker_x++)
   1a738:	9d02      	ldr	r5, [sp, #8]
   1a73a:	4575      	cmp	r5, lr
   1a73c:	da25      	bge.n	1a78a <arm_convolve_s16+0x266>
   1a73e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
   1a740:	9406      	str	r4, [sp, #24]
   1a742:	e9cd 3204 	strd	r3, r2, [sp, #16]
   1a746:	eb05 0643 	add.w	r6, r5, r3, lsl #1
   1a74a:	9d02      	ldr	r5, [sp, #8]
   1a74c:	46a4      	mov	ip, r4
   1a74e:	461f      	mov	r7, r3
                            for (int32_t i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
   1a750:	f1bb 0f00 	cmp.w	fp, #0
   1a754:	dd10      	ble.n	1a778 <arm_convolve_s16+0x254>
   1a756:	9b44      	ldr	r3, [sp, #272]	@ 0x110
   1a758:	9a01      	ldr	r2, [sp, #4]
   1a75a:	eb03 0347 	add.w	r3, r3, r7, lsl #1
   1a75e:	46b8      	mov	r8, r7
   1a760:	4462      	add	r2, ip
   1a762:	462f      	mov	r7, r5
                                conv_out_acc += input_data[(in_row * input_x + in_col) * input_ch + i_input_ch] *
   1a764:	f933 5b02 	ldrsh.w	r5, [r3], #2
   1a768:	f912 4f01 	ldrsb.w	r4, [r2, #1]!
                            for (int32_t i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
   1a76c:	429e      	cmp	r6, r3
                                conv_out_acc += input_data[(in_row * input_x + in_col) * input_ch + i_input_ch] *
   1a76e:	fbc5 0184 	smlalbb	r0, r1, r5, r4
                            for (int32_t i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
   1a772:	d1f7      	bne.n	1a764 <arm_convolve_s16+0x240>
   1a774:	463d      	mov	r5, r7
   1a776:	4647      	mov	r7, r8
                        for (int32_t i_ker_x = ker_x_start; i_ker_x < ker_x_end; i_ker_x++)
   1a778:	3501      	adds	r5, #1
   1a77a:	45ae      	cmp	lr, r5
   1a77c:	4457      	add	r7, sl
   1a77e:	44dc      	add	ip, fp
   1a780:	444e      	add	r6, r9
   1a782:	d1e5      	bne.n	1a750 <arm_convolve_s16+0x22c>
   1a784:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   1a788:	9c06      	ldr	r4, [sp, #24]
                    for (int32_t i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
   1a78a:	9d08      	ldr	r5, [sp, #32]
   1a78c:	442b      	add	r3, r5
   1a78e:	9d09      	ldr	r5, [sp, #36]	@ 0x24
   1a790:	442c      	add	r4, r5
   1a792:	9d07      	ldr	r5, [sp, #28]
   1a794:	3201      	adds	r2, #1
   1a796:	4295      	cmp	r5, r2
   1a798:	d1ce      	bne.n	1a738 <arm_convolve_s16+0x214>
   1a79a:	e9dd 5636 	ldrd	r5, r6, [sp, #216]	@ 0xd8
   1a79e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1a7a2:	e9dd 7c38 	ldrd	r7, ip, [sp, #224]	@ 0xe0
   1a7a6:	f8dd 8004 	ldr.w	r8, [sp, #4]
                    if (bias_data)
   1a7aa:	9b48      	ldr	r3, [sp, #288]	@ 0x120
   1a7ac:	b14b      	cbz	r3, 1a7c2 <arm_convolve_s16+0x29e>
                        conv_out_acc += bias_data[i_out_ch];
   1a7ae:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
   1a7b0:	9902      	ldr	r1, [sp, #8]
   1a7b2:	6813      	ldr	r3, [r2, #0]
   1a7b4:	6852      	ldr	r2, [r2, #4]
   1a7b6:	18cb      	adds	r3, r1, r3
   1a7b8:	9903      	ldr	r1, [sp, #12]
   1a7ba:	eb42 0201 	adc.w	r2, r2, r1
   1a7be:	e9cd 3202 	strd	r3, r2, [sp, #8]
    const q63_t new_val = val * reduced_multiplier;
   1a7c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1a7c6:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
   1a7c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
   1a7ca:	fb00 f303 	mul.w	r3, r0, r3
   1a7ce:	fb02 3101 	mla	r1, r2, r1, r3
   1a7d2:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   1a7d4:	9a02      	ldr	r2, [sp, #8]
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
   1a7d6:	9823      	ldr	r0, [sp, #140]	@ 0x8c
    const q63_t new_val = val * reduced_multiplier;
   1a7d8:	fba2 2303 	umull	r2, r3, r2, r3
   1a7dc:	440b      	add	r3, r1
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
   1a7de:	992b      	ldr	r1, [sp, #172]	@ 0xac
   1a7e0:	40c2      	lsrs	r2, r0
   1a7e2:	fa03 f101 	lsl.w	r1, r3, r1
   1a7e6:	430a      	orrs	r2, r1
   1a7e8:	f1b0 0120 	subs.w	r1, r0, #32
   1a7ec:	bf5c      	itt	pl
   1a7ee:	fa43 f101 	asrpl.w	r1, r3, r1
   1a7f2:	430a      	orrpl	r2, r1
    result = (result + 1) >> 1;             // Last shift position and insert round
   1a7f4:	1c53      	adds	r3, r2, #1
                    conv_out = MAX(conv_out, out_activation_min);
   1a7f6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
   1a7f8:	105b      	asrs	r3, r3, #1
   1a7fa:	4293      	cmp	r3, r2
   1a7fc:	bfb8      	it	lt
   1a7fe:	4613      	movlt	r3, r2
                    conv_out = MIN(conv_out, out_activation_max);
   1a800:	9a21      	ldr	r2, [sp, #132]	@ 0x84
   1a802:	4293      	cmp	r3, r2
   1a804:	bfa8      	it	ge
   1a806:	4613      	movge	r3, r2
                for (int32_t base_idx_x = -pad_x, i_out_x = 0; i_out_x < output_x; base_idx_x += stride_x, i_out_x++)
   1a808:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
                    output_data[i_out_ch + (i_out_y * output_x + i_out_x) * output_ch] = (int16_t)conv_out;
   1a80a:	f8ac 3000 	strh.w	r3, [ip]
                for (int32_t base_idx_x = -pad_x, i_out_x = 0; i_out_x < output_x; base_idx_x += stride_x, i_out_x++)
   1a80e:	4416      	add	r6, r2
   1a810:	1abf      	subs	r7, r7, r2
   1a812:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
   1a814:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
   1a816:	4494      	add	ip, r2
   1a818:	9a10      	ldr	r2, [sp, #64]	@ 0x40
   1a81a:	3301      	adds	r3, #1
   1a81c:	429a      	cmp	r2, r3
   1a81e:	931c      	str	r3, [sp, #112]	@ 0x70
   1a820:	f47f af60 	bne.w	1a6e4 <arm_convolve_s16+0x1c0>
            for (int32_t base_idx_y = -pad_y, i_out_y = 0; i_out_y < output_y; base_idx_y += stride_y, i_out_y++)
   1a824:	9a14      	ldr	r2, [sp, #80]	@ 0x50
   1a826:	991f      	ldr	r1, [sp, #124]	@ 0x7c
   1a828:	9828      	ldr	r0, [sp, #160]	@ 0xa0
   1a82a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
   1a82c:	440a      	add	r2, r1
   1a82e:	9214      	str	r2, [sp, #80]	@ 0x50
   1a830:	9a15      	ldr	r2, [sp, #84]	@ 0x54
   1a832:	4402      	add	r2, r0
   1a834:	9215      	str	r2, [sp, #84]	@ 0x54
   1a836:	9a16      	ldr	r2, [sp, #88]	@ 0x58
   1a838:	1a52      	subs	r2, r2, r1
   1a83a:	9216      	str	r2, [sp, #88]	@ 0x58
   1a83c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
   1a83e:	3301      	adds	r3, #1
   1a840:	429a      	cmp	r2, r3
   1a842:	931b      	str	r3, [sp, #108]	@ 0x6c
   1a844:	f47f af1a 	bne.w	1a67c <arm_convolve_s16+0x158>
   1a848:	e9dd 4632 	ldrd	r4, r6, [sp, #200]	@ 0xc8
   1a84c:	46ce      	mov	lr, r9
   1a84e:	9f34      	ldr	r7, [sp, #208]	@ 0xd0
   1a850:	f8dd 9128 	ldr.w	r9, [sp, #296]	@ 0x128
   1a854:	9835      	ldr	r0, [sp, #212]	@ 0xd4
        for (int32_t i_out_ch = 0; i_out_ch < output_ch; i_out_ch++)
   1a856:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   1a858:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
   1a85a:	9929      	ldr	r1, [sp, #164]	@ 0xa4
   1a85c:	3301      	adds	r3, #1
   1a85e:	440a      	add	r2, r1
   1a860:	429c      	cmp	r4, r3
   1a862:	930b      	str	r3, [sp, #44]	@ 0x2c
   1a864:	920c      	str	r2, [sp, #48]	@ 0x30
   1a866:	f47f aeda 	bne.w	1a61e <arm_convolve_s16+0xfa>
   1a86a:	4621      	mov	r1, r4
   1a86c:	e9dd 4330 	ldrd	r4, r3, [sp, #192]	@ 0xc0
   1a870:	464a      	mov	r2, r9
   1a872:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   1a874:	46d1      	mov	r9, sl
   1a876:	46f2      	mov	sl, lr
   1a878:	f8dd e0bc 	ldr.w	lr, [sp, #188]	@ 0xbc
        input_data += (input_x * input_y * input_ch);
   1a87c:	9f44      	ldr	r7, [sp, #272]	@ 0x110
    for (int i_batch = 0; i_batch < input_batches; i_batch++)
   1a87e:	3301      	adds	r3, #1
        input_data += (input_x * input_y * input_ch);
   1a880:	442f      	add	r7, r5
    for (int i_batch = 0; i_batch < input_batches; i_batch++)
   1a882:	429c      	cmp	r4, r3
        input_data += (input_x * input_y * input_ch);
   1a884:	9744      	str	r7, [sp, #272]	@ 0x110
        output_data += (output_x * output_y * output_ch);
   1a886:	4472      	add	r2, lr
    for (int i_batch = 0; i_batch < input_batches; i_batch++)
   1a888:	f47f aeaf 	bne.w	1a5ea <arm_convolve_s16+0xc6>
    }

    /* Return to application */
    return ARM_CMSIS_NN_SUCCESS;
}
   1a88c:	2000      	movs	r0, #0
   1a88e:	b03b      	add	sp, #236	@ 0xec
   1a890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    int64_t conv_out_acc = 0;
   1a894:	2300      	movs	r3, #0
   1a896:	2400      	movs	r4, #0
   1a898:	e9cd 3402 	strd	r3, r4, [sp, #8]
   1a89c:	e785      	b.n	1a7aa <arm_convolve_s16+0x286>
   1a89e:	bf00      	nop
   1a8a0:	7ffeffff 	.word	0x7ffeffff

0001a8a4 <arm_convolve_s16_get_buffer_size>:
int32_t arm_convolve_s16_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
    (void)input_dims;
    (void)filter_dims;
    return 0;
}
   1a8a4:	2000      	movs	r0, #0
   1a8a6:	4770      	bx	lr

0001a8a8 <arm_convolve_s8>:
                                    const q7_t *filter_data,
                                    const cmsis_nn_dims *bias_dims,
                                    const int32_t *bias_data,
                                    const cmsis_nn_dims *output_dims,
                                    q7_t *output_data)
{
   1a8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a8ac:	b0b7      	sub	sp, #220	@ 0xdc
    (void)bias_dims;

    if (ctx->buf == NULL && arm_convolve_s8_get_buffer_size(input_dims, filter_dims) > 0)
   1a8ae:	6807      	ldr	r7, [r0, #0]
{
   1a8b0:	9d45      	ldr	r5, [sp, #276]	@ 0x114
    if (ctx->buf == NULL && arm_convolve_s8_get_buffer_size(input_dims, filter_dims) > 0)
   1a8b2:	971c      	str	r7, [sp, #112]	@ 0x70
{
   1a8b4:	4610      	mov	r0, r2
   1a8b6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
   1a8b8:	461c      	mov	r4, r3
   1a8ba:	460e      	mov	r6, r1
    // implementation of  arm_nn_mat_mult_s8
    col_length = (col_length + 7) / 8;
    // 4 -> number of im2col buffers, 8 -> 8 elements per Q register
    return 4 * col_length * 8 * (int32_t)sizeof(int8_t);
#else
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * (int32_t)sizeof(int16_t);
   1a8bc:	68db      	ldr	r3, [r3, #12]
   1a8be:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
    if (ctx->buf == NULL && arm_convolve_s8_get_buffer_size(input_dims, filter_dims) > 0)
   1a8c2:	2f00      	cmp	r7, #0
   1a8c4:	f000 81be 	beq.w	1ac44 <arm_convolve_s8+0x39c>
    const uint16_t output_ch = output_dims->c;
   1a8c8:	68ef      	ldr	r7, [r5, #12]
   1a8ca:	9709      	str	r7, [sp, #36]	@ 0x24
    const uint16_t input_y = input_dims->h;
   1a8cc:	e9d4 9e01 	ldrd	r9, lr, [r4, #4]
    const int32_t input_batches = input_dims->n;
   1a8d0:	6827      	ldr	r7, [r4, #0]
    const uint16_t pad_x = conv_params->padding.w;
   1a8d2:	6934      	ldr	r4, [r6, #16]
   1a8d4:	9428      	str	r4, [sp, #160]	@ 0xa0
    const uint16_t pad_y = conv_params->padding.h;
   1a8d6:	6974      	ldr	r4, [r6, #20]
   1a8d8:	9429      	str	r4, [sp, #164]	@ 0xa4
    const uint16_t stride_y = conv_params->stride.h;
   1a8da:	e9d6 b402 	ldrd	fp, r4, [r6, #8]
   1a8de:	942a      	str	r4, [sp, #168]	@ 0xa8
    const int32_t input_offset = conv_params->input_offset;
   1a8e0:	6834      	ldr	r4, [r6, #0]
    const int32_t input_batches = input_dims->n;
   1a8e2:	9724      	str	r7, [sp, #144]	@ 0x90
    const int32_t input_offset = conv_params->input_offset;
   1a8e4:	942e      	str	r4, [sp, #184]	@ 0xb8
    const int32_t out_offset = conv_params->output_offset;
   1a8e6:	6874      	ldr	r4, [r6, #4]
    for (i_batch = 0; i_batch < input_batches; i_batch++)
   1a8e8:	9f24      	ldr	r7, [sp, #144]	@ 0x90
    const int32_t out_offset = conv_params->output_offset;
   1a8ea:	941e      	str	r4, [sp, #120]	@ 0x78
    const int32_t out_activation_min = conv_params->activation.min;
   1a8ec:	6a34      	ldr	r4, [r6, #32]
   1a8ee:	941f      	str	r4, [sp, #124]	@ 0x7c
    const int32_t out_activation_max = conv_params->activation.max;
   1a8f0:	6a74      	ldr	r4, [r6, #36]	@ 0x24
    const uint16_t output_ch = output_dims->c;
   1a8f2:	f8bd a024 	ldrh.w	sl, [sp, #36]	@ 0x24
    const int32_t out_activation_max = conv_params->activation.max;
   1a8f6:	9420      	str	r4, [sp, #128]	@ 0x80
    for (i_batch = 0; i_batch < input_batches; i_batch++)
   1a8f8:	2f00      	cmp	r7, #0
    int32_t *output_mult = quant_params->multiplier;
   1a8fa:	6804      	ldr	r4, [r0, #0]
    int32_t *output_shift = quant_params->shift;
   1a8fc:	6840      	ldr	r0, [r0, #4]
    int32_t *output_mult = quant_params->multiplier;
   1a8fe:	9421      	str	r4, [sp, #132]	@ 0x84
    const uint16_t output_y = output_dims->h;
   1a900:	e9d5 c801 	ldrd	ip, r8, [r5, #4]
    int32_t *output_shift = quant_params->shift;
   1a904:	9022      	str	r0, [sp, #136]	@ 0x88
    const uint16_t input_ch = input_dims->c;
   1a906:	b29c      	uxth	r4, r3
    const uint16_t kernel_x = filter_dims->w;
   1a908:	b288      	uxth	r0, r1
    const uint16_t kernel_y = filter_dims->h;
   1a90a:	b295      	uxth	r5, r2
    const uint16_t output_ch = output_dims->c;
   1a90c:	f8cd a094 	str.w	sl, [sp, #148]	@ 0x94
    for (i_batch = 0; i_batch < input_batches; i_batch++)
   1a910:	f340 8167 	ble.w	1abe2 <arm_convolve_s8+0x33a>
   1a914:	fa1f fa81 	uxth.w	sl, r1
                    out = arm_nn_mat_mult_kernel_s8_s16(filter_data,
   1a918:	fb10 f005 	smulbb	r0, r0, r5
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
   1a91c:	b299      	uxth	r1, r3
   1a91e:	fa1f f389 	uxth.w	r3, r9
                    out = arm_nn_mat_mult_kernel_s8_s16(filter_data,
   1a922:	fb10 f004 	smulbb	r0, r0, r4
   1a926:	b292      	uxth	r2, r2
   1a928:	9308      	str	r3, [sp, #32]
   1a92a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	@ 0x24
   1a92e:	900b      	str	r0, [sp, #44]	@ 0x2c
   1a930:	9326      	str	r3, [sp, #152]	@ 0x98
   1a932:	fa1f f08b 	uxth.w	r0, fp
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
   1a936:	fb0a f302 	mul.w	r3, sl, r2
   1a93a:	fb01 f303 	mul.w	r3, r1, r3
   1a93e:	9018      	str	r0, [sp, #96]	@ 0x60
   1a940:	981c      	ldr	r0, [sp, #112]	@ 0x70
   1a942:	920e      	str	r2, [sp, #56]	@ 0x38
   1a944:	fa1f f48c 	uxth.w	r4, ip
   1a948:	fa1f f788 	uxth.w	r7, r8
                uint16_t col_count = (input_ch * kernel_y * kernel_x) >> 2;
   1a94c:	f3c3 028f 	ubfx	r2, r3, #2, #16
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
   1a950:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
   1a954:	9427      	str	r4, [sp, #156]	@ 0x9c
   1a956:	1e53      	subs	r3, r2, #1
                uint16_t col_count = (input_ch * kernel_y * kernel_x) >> 2;
   1a958:	922f      	str	r2, [sp, #188]	@ 0xbc
        output_data += (output_x * output_y * output_ch);
   1a95a:	fb07 f204 	mul.w	r2, r7, r4
   1a95e:	9c26      	ldr	r4, [sp, #152]	@ 0x98
   1a960:	981c      	ldr	r0, [sp, #112]	@ 0x70
   1a962:	9717      	str	r7, [sp, #92]	@ 0x5c
   1a964:	fb04 f402 	mul.w	r4, r4, r2
                    out = arm_nn_mat_mult_kernel_s8_s16(filter_data,
   1a968:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
        output_data += (output_x * output_y * output_ch);
   1a96a:	942d      	str	r4, [sp, #180]	@ 0xb4
                    out = arm_nn_mat_mult_kernel_s8_s16(filter_data,
   1a96c:	b294      	uxth	r4, r2
   1a96e:	fa1f f58e 	uxth.w	r5, lr
   1a972:	9423      	str	r4, [sp, #140]	@ 0x8c
                col_count = input_ch * kernel_y * kernel_x & 0x3;
   1a974:	f002 0403 	and.w	r4, r2, #3
        input_data += (input_x * input_y * input_ch);
   1a978:	9a08      	ldr	r2, [sp, #32]
   1a97a:	950a      	str	r5, [sp, #40]	@ 0x28
   1a97c:	fb05 f501 	mul.w	r5, r5, r1
                col_count = input_ch * kernel_y * kernel_x & 0x3;
   1a980:	9430      	str	r4, [sp, #192]	@ 0xc0
        input_data += (input_x * input_y * input_ch);
   1a982:	fb05 f402 	mul.w	r4, r5, r2
   1a986:	9a18      	ldr	r2, [sp, #96]	@ 0x60
   1a988:	9531      	str	r5, [sp, #196]	@ 0xc4
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
   1a98a:	ea4f 0b41 	mov.w	fp, r1, lsl #1
   1a98e:	fb02 f201 	mul.w	r2, r2, r1
   1a992:	b29b      	uxth	r3, r3
   1a994:	3301      	adds	r3, #1
   1a996:	921a      	str	r2, [sp, #104]	@ 0x68
   1a998:	fb0a f20b 	mul.w	r2, sl, fp
   1a99c:	9212      	str	r2, [sp, #72]	@ 0x48
   1a99e:	9d46      	ldr	r5, [sp, #280]	@ 0x118
   1a9a0:	9113      	str	r1, [sp, #76]	@ 0x4c
   1a9a2:	009a      	lsls	r2, r3, #2
   1a9a4:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
   1a9a8:	f8cd c064 	str.w	ip, [sp, #100]	@ 0x64
    for (i_batch = 0; i_batch < input_batches; i_batch++)
   1a9ac:	2700      	movs	r7, #0
        input_data += (input_x * input_y * input_ch);
   1a9ae:	9432      	str	r4, [sp, #200]	@ 0xc8
   1a9b0:	922b      	str	r2, [sp, #172]	@ 0xac
   1a9b2:	932c      	str	r3, [sp, #176]	@ 0xb0
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
   1a9b4:	46d9      	mov	r9, fp
   1a9b6:	46d0      	mov	r8, sl
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
   1a9b8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
        const uint16_t dilation_y = conv_params->dilation.h;
   1a9ba:	e9d6 2106 	ldrd	r2, r1, [r6, #24]
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
   1a9be:	2b00      	cmp	r3, #0
   1a9c0:	f000 8104 	beq.w	1abcc <arm_convolve_s8+0x324>
   1a9c4:	fa1f fa82 	uxth.w	sl, r2
   1a9c8:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
        q15_t *two_column_buf = buffer_a;
   1a9ca:	f8dd c070 	ldr.w	ip, [sp, #112]	@ 0x70
   1a9ce:	9546      	str	r5, [sp, #280]	@ 0x118
   1a9d0:	b28b      	uxth	r3, r1
   1a9d2:	9310      	str	r3, [sp, #64]	@ 0x40
   1a9d4:	fb02 f303 	mul.w	r3, r2, r3
   1a9d8:	9311      	str	r3, [sp, #68]	@ 0x44
   1a9da:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
   1a9dc:	e9cd 7633 	strd	r7, r6, [sp, #204]	@ 0xcc
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
   1a9e0:	2400      	movs	r4, #0
   1a9e2:	fb0a f303 	mul.w	r3, sl, r3
        q7_t *out = output_data;
   1a9e6:	46ae      	mov	lr, r5
   1a9e8:	9309      	str	r3, [sp, #36]	@ 0x24
   1a9ea:	4625      	mov	r5, r4
   1a9ec:	4644      	mov	r4, r8
   1a9ee:	46c8      	mov	r8, r9
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
   1a9f0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
   1a9f2:	2b00      	cmp	r3, #0
   1a9f4:	d063      	beq.n	1aabe <arm_convolve_s8+0x216>
                const int32_t base_idx_y = stride_y * i_out_y - pad_y;
   1a9f6:	f8bd 20a8 	ldrh.w	r2, [sp, #168]	@ 0xa8
   1a9fa:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	@ 0xa4
   1a9fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   1aa00:	9813      	ldr	r0, [sp, #76]	@ 0x4c
                            arm_q7_to_q15_with_offset(
   1aa02:	f8cd e074 	str.w	lr, [sp, #116]	@ 0x74
                const int32_t base_idx_y = stride_y * i_out_y - pad_y;
   1aa06:	fb05 f202 	mul.w	r2, r5, r2
   1aa0a:	eba2 0b01 	sub.w	fp, r2, r1
   1aa0e:	f8bd 20a0 	ldrh.w	r2, [sp, #160]	@ 0xa0
                            arm_q7_to_q15_with_offset(
   1aa12:	9535      	str	r5, [sp, #212]	@ 0xd4
   1aa14:	fb0b f103 	mul.w	r1, fp, r3
   1aa18:	9b40      	ldr	r3, [sp, #256]	@ 0x100
   1aa1a:	f8cd b06c 	str.w	fp, [sp, #108]	@ 0x6c
   1aa1e:	1a89      	subs	r1, r1, r2
   1aa20:	fb00 3701 	mla	r7, r0, r1, r3
   1aa24:	4253      	negs	r3, r2
   1aa26:	930f      	str	r3, [sp, #60]	@ 0x3c
   1aa28:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	@ 0xb8
   1aa2c:	9314      	str	r3, [sp, #80]	@ 0x50
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
   1aa2e:	2600      	movs	r6, #0
                for (i_ker_y = 0; i_ker_y < kernel_y; i_ker_y++)
   1aa30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   1aa32:	b39b      	cbz	r3, 1aa9c <arm_convolve_s8+0x1f4>
   1aa34:	e9cd 7615 	strd	r7, r6, [sp, #84]	@ 0x54
   1aa38:	f8dd b06c 	ldr.w	fp, [sp, #108]	@ 0x6c
   1aa3c:	4639      	mov	r1, r7
   1aa3e:	2200      	movs	r2, #0
                    for (i_ker_x = 0; i_ker_x < kernel_x; i_ker_x++)
   1aa40:	b314      	cbz	r4, 1aa88 <arm_convolve_s8+0x1e0>
   1aa42:	e9cd 210b 	strd	r2, r1, [sp, #44]	@ 0x2c
   1aa46:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
   1aa48:	f8cd c034 	str.w	ip, [sp, #52]	@ 0x34
   1aa4c:	4689      	mov	r9, r1
   1aa4e:	4666      	mov	r6, ip
   1aa50:	2500      	movs	r5, #0
                        if (k_y < 0 || k_y >= input_y || k_x < 0 || k_x >= input_x)
   1aa52:	9b08      	ldr	r3, [sp, #32]
   1aa54:	459b      	cmp	fp, r3
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
   1aa56:	4642      	mov	r2, r8
                        if (k_y < 0 || k_y >= input_y || k_x < 0 || k_x >= input_x)
   1aa58:	d205      	bcs.n	1aa66 <arm_convolve_s8+0x1be>
   1aa5a:	2f00      	cmp	r7, #0
   1aa5c:	db03      	blt.n	1aa66 <arm_convolve_s8+0x1be>
   1aa5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   1aa60:	429f      	cmp	r7, r3
   1aa62:	f2c0 80c2 	blt.w	1abea <arm_convolve_s8+0x342>
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
   1aa66:	2100      	movs	r1, #0
   1aa68:	4630      	mov	r0, r6
   1aa6a:	f00c fa37 	bl	26edc <memset>
                    for (i_ker_x = 0; i_ker_x < kernel_x; i_ker_x++)
   1aa6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   1aa70:	3501      	adds	r5, #1
   1aa72:	42ac      	cmp	r4, r5
                        two_column_buf += input_ch;
   1aa74:	4446      	add	r6, r8
                    for (i_ker_x = 0; i_ker_x < kernel_x; i_ker_x++)
   1aa76:	4499      	add	r9, r3
   1aa78:	4457      	add	r7, sl
   1aa7a:	d1ea      	bne.n	1aa52 <arm_convolve_s8+0x1aa>
   1aa7c:	f8dd c034 	ldr.w	ip, [sp, #52]	@ 0x34
   1aa80:	9b12      	ldr	r3, [sp, #72]	@ 0x48
   1aa82:	e9dd 210b 	ldrd	r2, r1, [sp, #44]	@ 0x2c
   1aa86:	449c      	add	ip, r3
                for (i_ker_y = 0; i_ker_y < kernel_y; i_ker_y++)
   1aa88:	9b11      	ldr	r3, [sp, #68]	@ 0x44
   1aa8a:	4419      	add	r1, r3
   1aa8c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
   1aa8e:	449b      	add	fp, r3
   1aa90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   1aa92:	3201      	adds	r2, #1
   1aa94:	429a      	cmp	r2, r3
   1aa96:	d1d3      	bne.n	1aa40 <arm_convolve_s8+0x198>
   1aa98:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	@ 0x54
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
   1aa9c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
   1aa9e:	4563      	cmp	r3, ip
   1aaa0:	f000 80aa 	beq.w	1abf8 <arm_convolve_s8+0x350>
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
   1aaa4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
   1aaa6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
   1aaa8:	441f      	add	r7, r3
   1aaaa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
   1aaac:	4413      	add	r3, r2
   1aaae:	930f      	str	r3, [sp, #60]	@ 0x3c
   1aab0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
   1aab2:	3601      	adds	r6, #1
   1aab4:	42b3      	cmp	r3, r6
   1aab6:	d1bb      	bne.n	1aa30 <arm_convolve_s8+0x188>
   1aab8:	f8dd e074 	ldr.w	lr, [sp, #116]	@ 0x74
   1aabc:	9d35      	ldr	r5, [sp, #212]	@ 0xd4
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
   1aabe:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
   1aac0:	3501      	adds	r5, #1
   1aac2:	429d      	cmp	r5, r3
   1aac4:	db94      	blt.n	1a9f0 <arm_convolve_s8+0x148>
        if (two_column_buf != buffer_a)
   1aac6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
   1aac8:	9d46      	ldr	r5, [sp, #280]	@ 0x118
   1aaca:	4563      	cmp	r3, ip
   1aacc:	46c1      	mov	r9, r8
   1aace:	e9dd 7633 	ldrd	r7, r6, [sp, #204]	@ 0xcc
   1aad2:	46a0      	mov	r8, r4
   1aad4:	d07a      	beq.n	1abcc <arm_convolve_s8+0x324>
            for (i = 0; i < output_ch; i++)
   1aad6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
   1aad8:	2a00      	cmp	r2, #0
   1aada:	d077      	beq.n	1abcc <arm_convolve_s8+0x324>
   1aadc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
            const q7_t *ker_a = filter_data;
   1aade:	f8dd c108 	ldr.w	ip, [sp, #264]	@ 0x108
    const q31_t remainder_mask = (1 << exponent) - 1;
   1aae2:	f8cd 902c 	str.w	r9, [sp, #44]	@ 0x2c
   1aae6:	f1a3 0b04 	sub.w	fp, r3, #4
   1aaea:	9b22      	ldr	r3, [sp, #136]	@ 0x88
   1aaec:	4472      	add	r2, lr
   1aaee:	f1a3 0a04 	sub.w	sl, r3, #4
   1aaf2:	9b44      	ldr	r3, [sp, #272]	@ 0x110
   1aaf4:	9209      	str	r2, [sp, #36]	@ 0x24
   1aaf6:	46a1      	mov	r9, r4
   1aaf8:	463c      	mov	r4, r7
                if (bias_data)
   1aafa:	9a44      	ldr	r2, [sp, #272]	@ 0x110
   1aafc:	2a00      	cmp	r2, #0
   1aafe:	f000 8095 	beq.w	1ac2c <arm_convolve_s8+0x384>
                while (col_count)
   1ab02:	992f      	ldr	r1, [sp, #188]	@ 0xbc
                    sum = bias_data[i];
   1ab04:	681a      	ldr	r2, [r3, #0]
                while (col_count)
   1ab06:	2900      	cmp	r1, #0
   1ab08:	f000 8095 	beq.w	1ac36 <arm_convolve_s8+0x38e>
   1ab0c:	992b      	ldr	r1, [sp, #172]	@ 0xac
                const q15_t *ip_as_col = buffer_a;
   1ab0e:	981c      	ldr	r0, [sp, #112]	@ 0x70
   1ab10:	e9cd 3e0c 	strd	r3, lr, [sp, #48]	@ 0x30
   1ab14:	eb0c 0701 	add.w	r7, ip, r1
    memcpy(&val, *in_q7, 4);
   1ab18:	f85c 3b04 	ldr.w	r3, [ip], #4
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1ab1c:	fa2f f193 	sxtb16	r1, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1ab20:	fa2f f383 	sxtb16	r3, r3
    memcpy(&val, *in_q15, 4);
   1ab24:	f8d0 8000 	ldr.w	r8, [r0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
   1ab28:	eac1 4e23 	pkhtb	lr, r1, r3, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
   1ab2c:	eac3 4301 	pkhbt	r3, r3, r1, lsl #16
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1ab30:	fb23 2308 	smlad	r3, r3, r8, r2
    memcpy(&val, *in_q15, 4);
   1ab34:	6842      	ldr	r2, [r0, #4]
    *in_q15 += 2;
   1ab36:	3008      	adds	r0, #8
   1ab38:	fb2e 3202 	smlad	r2, lr, r2, r3
                while (col_count)
   1ab3c:	4567      	cmp	r7, ip
   1ab3e:	d1eb      	bne.n	1ab18 <arm_convolve_s8+0x270>
                while (col_count)
   1ab40:	9830      	ldr	r0, [sp, #192]	@ 0xc0
   1ab42:	992c      	ldr	r1, [sp, #176]	@ 0xb0
   1ab44:	e9dd 3e0c 	ldrd	r3, lr, [sp, #48]	@ 0x30
   1ab48:	2800      	cmp	r0, #0
   1ab4a:	d079      	beq.n	1ac40 <arm_convolve_s8+0x398>
   1ab4c:	eb07 0c00 	add.w	ip, r7, r0
                    sum += ker_a1 * ip_b1;
   1ab50:	f917 0b01 	ldrsb.w	r0, [r7], #1
   1ab54:	f831 8b02 	ldrh.w	r8, [r1], #2
                while (col_count)
   1ab58:	45bc      	cmp	ip, r7
                    sum += ker_a1 * ip_b1;
   1ab5a:	fb18 2200 	smlabb	r2, r8, r0, r2
                while (col_count)
   1ab5e:	d1f7      	bne.n	1ab50 <arm_convolve_s8+0x2a8>
                sum = arm_nn_requantize(sum, output_mult[i], output_shift[i]);
   1ab60:	f85a 7f04 	ldr.w	r7, [sl, #4]!
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1ab64:	f85b 0f04 	ldr.w	r0, [fp, #4]!
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1ab68:	ea27 71e7 	bic.w	r1, r7, r7, asr #31
   1ab6c:	fa02 f101 	lsl.w	r1, r2, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1ab70:	f04f 4880 	mov.w	r8, #1073741824	@ 0x40000000
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1ab74:	427a      	negs	r2, r7
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1ab76:	2700      	movs	r7, #0
   1ab78:	fbc1 8700 	smlal	r8, r7, r1, r0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1ab7c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1ab80:	4641      	mov	r1, r8
    const q31_t remainder_mask = (1 << exponent) - 1;
   1ab82:	2001      	movs	r0, #1
   1ab84:	4090      	lsls	r0, r2
    result = (int32_t)(mult.long_long >> 31);
   1ab86:	0fc9      	lsrs	r1, r1, #31
   1ab88:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1ab8c:	3801      	subs	r0, #1
    int32_t remainder = remainder_mask & dividend;
   1ab8e:	ea01 0700 	and.w	r7, r1, r0
    if (result < 0)
   1ab92:	4111      	asrs	r1, r2
    q31_t threshold = remainder_mask >> 1;
   1ab94:	ea4f 0060 	mov.w	r0, r0, asr #1
        threshold++;
   1ab98:	bf48      	it	mi
   1ab9a:	3001      	addmi	r0, #1
    if (remainder > threshold)
   1ab9c:	4287      	cmp	r7, r0
                sum += out_offset;
   1ab9e:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
        result++;
   1aba0:	bfc8      	it	gt
   1aba2:	3101      	addgt	r1, #1
   1aba4:	440a      	add	r2, r1
                sum = MAX(sum, out_activation_min);
   1aba6:	991f      	ldr	r1, [sp, #124]	@ 0x7c
   1aba8:	428a      	cmp	r2, r1
   1abaa:	bfb8      	it	lt
   1abac:	460a      	movlt	r2, r1
                sum = MIN(sum, out_activation_max);
   1abae:	9920      	ldr	r1, [sp, #128]	@ 0x80
   1abb0:	428a      	cmp	r2, r1
   1abb2:	bfa8      	it	ge
   1abb4:	460a      	movge	r2, r1
                *out++ = (q7_t)sum;
   1abb6:	f80e 2b01 	strb.w	r2, [lr], #1
            for (i = 0; i < output_ch; i++)
   1abba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
   1abbc:	4572      	cmp	r2, lr
   1abbe:	f103 0304 	add.w	r3, r3, #4
   1abc2:	d19a      	bne.n	1aafa <arm_convolve_s8+0x252>
   1abc4:	46c8      	mov	r8, r9
   1abc6:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
   1abca:	4627      	mov	r7, r4
        input_data += (input_x * input_y * input_ch);
   1abcc:	9b40      	ldr	r3, [sp, #256]	@ 0x100
   1abce:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
   1abd0:	4413      	add	r3, r2
   1abd2:	9340      	str	r3, [sp, #256]	@ 0x100
        output_data += (output_x * output_y * output_ch);
   1abd4:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   1abd6:	441d      	add	r5, r3
    for (i_batch = 0; i_batch < input_batches; i_batch++)
   1abd8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
   1abda:	3701      	adds	r7, #1
   1abdc:	42bb      	cmp	r3, r7
   1abde:	f47f aeeb 	bne.w	1a9b8 <arm_convolve_s8+0x110>
    return ARM_CMSIS_NN_SUCCESS;
   1abe2:	2000      	movs	r0, #0
}
   1abe4:	b037      	add	sp, #220	@ 0xdc
   1abe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            arm_q7_to_q15_with_offset(
   1abea:	e9dd 2313 	ldrd	r2, r3, [sp, #76]	@ 0x4c
   1abee:	4631      	mov	r1, r6
   1abf0:	4648      	mov	r0, r9
   1abf2:	f002 fea1 	bl	1d938 <arm_q7_to_q15_with_offset>
   1abf6:	e73a      	b.n	1aa6e <arm_convolve_s8+0x1c6>
                    out = arm_nn_mat_mult_kernel_s8_s16(filter_data,
   1abf8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
   1abfa:	9306      	str	r3, [sp, #24]
   1abfc:	9b44      	ldr	r3, [sp, #272]	@ 0x110
   1abfe:	9305      	str	r3, [sp, #20]
   1ac00:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
   1ac02:	9304      	str	r3, [sp, #16]
   1ac04:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
   1ac06:	9301      	str	r3, [sp, #4]
   1ac08:	9b21      	ldr	r3, [sp, #132]	@ 0x84
   1ac0a:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
   1ac0c:	9300      	str	r3, [sp, #0]
   1ac0e:	f9bd 3080 	ldrsh.w	r3, [sp, #128]	@ 0x80
   1ac12:	9303      	str	r3, [sp, #12]
   1ac14:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	@ 0x7c
   1ac18:	9302      	str	r3, [sp, #8]
   1ac1a:	9a25      	ldr	r2, [sp, #148]	@ 0x94
   1ac1c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
   1ac1e:	9842      	ldr	r0, [sp, #264]	@ 0x108
   1ac20:	4629      	mov	r1, r5
   1ac22:	f001 fd51 	bl	1c6c8 <arm_nn_mat_mult_kernel_s8_s16>
                    two_column_buf = buffer_a;
   1ac26:	46ac      	mov	ip, r5
                    out = arm_nn_mat_mult_kernel_s8_s16(filter_data,
   1ac28:	901d      	str	r0, [sp, #116]	@ 0x74
                    two_column_buf = buffer_a;
   1ac2a:	e73b      	b.n	1aaa4 <arm_convolve_s8+0x1fc>
                while (col_count)
   1ac2c:	992f      	ldr	r1, [sp, #188]	@ 0xbc
                q31_t sum = 0;
   1ac2e:	9a44      	ldr	r2, [sp, #272]	@ 0x110
                while (col_count)
   1ac30:	2900      	cmp	r1, #0
   1ac32:	f47f af6b 	bne.w	1ab0c <arm_convolve_s8+0x264>
                while (col_count)
   1ac36:	9830      	ldr	r0, [sp, #192]	@ 0xc0
                const q15_t *ip_as_col = buffer_a;
   1ac38:	991c      	ldr	r1, [sp, #112]	@ 0x70
                while (col_count)
   1ac3a:	4667      	mov	r7, ip
                while (col_count)
   1ac3c:	2800      	cmp	r0, #0
   1ac3e:	d185      	bne.n	1ab4c <arm_convolve_s8+0x2a4>
   1ac40:	46bc      	mov	ip, r7
   1ac42:	e78d      	b.n	1ab60 <arm_convolve_s8+0x2b8>
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * (int32_t)sizeof(int16_t);
   1ac44:	fb01 f703 	mul.w	r7, r1, r3
   1ac48:	fb02 f707 	mul.w	r7, r2, r7
    if (ctx->buf == NULL && arm_convolve_s8_get_buffer_size(input_dims, filter_dims) > 0)
   1ac4c:	2f00      	cmp	r7, #0
   1ac4e:	f77f ae3b 	ble.w	1a8c8 <arm_convolve_s8+0x20>
        return ARM_CMSIS_NN_ARG_ERROR;
   1ac52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   1ac56:	e7c5      	b.n	1abe4 <arm_convolve_s8+0x33c>

0001ac58 <arm_convolve_s8_get_buffer_size>:
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * (int32_t)sizeof(int16_t);
   1ac58:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
   1ac5c:	68c0      	ldr	r0, [r0, #12]
   1ac5e:	fb02 f000 	mul.w	r0, r2, r0
   1ac62:	fb03 f000 	mul.w	r0, r3, r0
#endif
}
   1ac66:	0080      	lsls	r0, r0, #2
   1ac68:	4770      	bx	lr
   1ac6a:	bf00      	nop

0001ac6c <arm_convolve_wrapper_s16>:
                                             const q7_t *filter_data,
                                             const cmsis_nn_dims *bias_dims,
                                             const int64_t *bias_data,
                                             const cmsis_nn_dims *output_dims,
                                             q15_t *output_data)
{
   1ac6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ac70:	b085      	sub	sp, #20
   1ac72:	e9dd 7812 	ldrd	r7, r8, [sp, #72]	@ 0x48
   1ac76:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
   1ac78:	f8dd 9050 	ldr.w	r9, [sp, #80]	@ 0x50
   1ac7c:	9002      	str	r0, [sp, #8]
#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    if (filter_dims->w * filter_dims->h * input_dims->c < 512 &&
   1ac7e:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
   1ac82:	fb06 fb05 	mul.w	fp, r6, r5
   1ac86:	68de      	ldr	r6, [r3, #12]
{
   1ac88:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
   1ac8a:	9203      	str	r2, [sp, #12]
    if (filter_dims->w * filter_dims->h * input_dims->c < 512 &&
   1ac8c:	fb06 fb0b 	mul.w	fp, r6, fp
   1ac90:	f5bb 7f00 	cmp.w	fp, #512	@ 0x200
{
   1ac94:	e9dd 6a10 	ldrd	r6, sl, [sp, #64]	@ 0x40
   1ac98:	469e      	mov	lr, r3
   1ac9a:	468c      	mov	ip, r1
   1ac9c:	9501      	str	r5, [sp, #4]
    if (filter_dims->w * filter_dims->h * input_dims->c < 512 &&
   1ac9e:	da05      	bge.n	1acac <arm_convolve_wrapper_s16+0x40>
   1aca0:	698d      	ldr	r5, [r1, #24]
   1aca2:	2d01      	cmp	r5, #1
   1aca4:	d102      	bne.n	1acac <arm_convolve_wrapper_s16+0x40>
        (conv_params->dilation.w == 1 && conv_params->dilation.h == 1))
   1aca6:	69cd      	ldr	r5, [r1, #28]
   1aca8:	2d01      	cmp	r5, #1
   1acaa:	d010      	beq.n	1acce <arm_convolve_wrapper_s16+0x62>
                                     output_dims,
                                     output_data);
    }
    else
    {
        return arm_convolve_s16(ctx,
   1acac:	9b01      	ldr	r3, [sp, #4]
   1acae:	9a03      	ldr	r2, [sp, #12]
   1acb0:	9802      	ldr	r0, [sp, #8]
   1acb2:	930e      	str	r3, [sp, #56]	@ 0x38
   1acb4:	4661      	mov	r1, ip
   1acb6:	4673      	mov	r3, lr
   1acb8:	e9cd 8913 	strd	r8, r9, [sp, #76]	@ 0x4c
   1acbc:	e9cd a711 	strd	sl, r7, [sp, #68]	@ 0x44
   1acc0:	e9cd 460f 	strd	r4, r6, [sp, #60]	@ 0x3c
                            bias_dims,
                            bias_data,
                            output_dims,
                            output_data);
#endif
}
   1acc4:	b005      	add	sp, #20
   1acc6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return arm_convolve_s16(ctx,
   1acca:	f7ff bc2b 	b.w	1a524 <arm_convolve_s16>
        return arm_convolve_fast_s16(ctx,
   1acce:	e9cd 460f 	strd	r4, r6, [sp, #60]	@ 0x3c
   1acd2:	9c01      	ldr	r4, [sp, #4]
   1acd4:	940e      	str	r4, [sp, #56]	@ 0x38
   1acd6:	e9cd 8913 	strd	r8, r9, [sp, #76]	@ 0x4c
   1acda:	e9cd a711 	strd	sl, r7, [sp, #68]	@ 0x44
}
   1acde:	b005      	add	sp, #20
   1ace0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return arm_convolve_fast_s16(ctx,
   1ace4:	f7ff ba1e 	b.w	1a124 <arm_convolve_fast_s16>

0001ace8 <arm_convolve_wrapper_s16_get_buffer_size>:

int32_t arm_convolve_wrapper_s16_get_buffer_size(const cmsis_nn_conv_params *conv_params,
                                                 const cmsis_nn_dims *input_dims,
                                                 const cmsis_nn_dims *filter_dims,
                                                 const cmsis_nn_dims *output_dims)
{
   1ace8:	468c      	mov	ip, r1
    (void)conv_params;
    (void)output_dims;

#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    if (filter_dims->w * filter_dims->h * input_dims->c < 512 &&
   1acea:	e9d2 1301 	ldrd	r1, r3, [r2, #4]
   1acee:	fb01 f303 	mul.w	r3, r1, r3
   1acf2:	f8dc 100c 	ldr.w	r1, [ip, #12]
   1acf6:	fb01 f303 	mul.w	r3, r1, r3
   1acfa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
   1acfe:	da02      	bge.n	1ad06 <arm_convolve_wrapper_s16_get_buffer_size+0x1e>
   1ad00:	6983      	ldr	r3, [r0, #24]
   1ad02:	2b01      	cmp	r3, #1
   1ad04:	d003      	beq.n	1ad0e <arm_convolve_wrapper_s16_get_buffer_size+0x26>
        (conv_params->dilation.w == 1 && conv_params->dilation.h == 1))
    {
        return arm_convolve_fast_s16_get_buffer_size(input_dims, filter_dims);
    }

    return arm_convolve_s16_get_buffer_size(input_dims, filter_dims);
   1ad06:	4611      	mov	r1, r2
   1ad08:	4660      	mov	r0, ip
   1ad0a:	f7ff bdcb 	b.w	1a8a4 <arm_convolve_s16_get_buffer_size>
        (conv_params->dilation.w == 1 && conv_params->dilation.h == 1))
   1ad0e:	69c3      	ldr	r3, [r0, #28]
   1ad10:	2b01      	cmp	r3, #1
   1ad12:	d1f8      	bne.n	1ad06 <arm_convolve_wrapper_s16_get_buffer_size+0x1e>
        return arm_convolve_fast_s16_get_buffer_size(input_dims, filter_dims);
   1ad14:	4611      	mov	r1, r2
   1ad16:	4660      	mov	r0, ip
   1ad18:	f7ff bbfa 	b.w	1a510 <arm_convolve_fast_s16_get_buffer_size>

0001ad1c <arm_convolve_wrapper_s8>:
                                            const q7_t *filter_data,
                                            const cmsis_nn_dims *bias_dims,
                                            const int32_t *bias_data,
                                            const cmsis_nn_dims *output_dims,
                                            q7_t *output_data)
{
   1ad1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (conv_params->stride.w == 1) &&
   1ad20:	690d      	ldr	r5, [r1, #16]
{
   1ad22:	b083      	sub	sp, #12
   1ad24:	e9dd 470c 	ldrd	r4, r7, [sp, #48]	@ 0x30
   1ad28:	e9dd ba0e 	ldrd	fp, sl, [sp, #56]	@ 0x38
   1ad2c:	e9dd 9610 	ldrd	r9, r6, [sp, #64]	@ 0x40
   1ad30:	f8dd 8048 	ldr.w	r8, [sp, #72]	@ 0x48
   1ad34:	9000      	str	r0, [sp, #0]
   1ad36:	468c      	mov	ip, r1
   1ad38:	9201      	str	r2, [sp, #4]
   1ad3a:	469e      	mov	lr, r3
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (conv_params->stride.w == 1) &&
   1ad3c:	b90d      	cbnz	r5, 1ad42 <arm_convolve_wrapper_s8+0x26>
   1ad3e:	694d      	ldr	r5, [r1, #20]
   1ad40:	b1ed      	cbz	r5, 1ad7e <arm_convolve_wrapper_s8+0x62>
                                        bias_dims,
                                        bias_data,
                                        output_dims,
                                        output_data);
    }
    else if ((input_dims->h == 1) && (output_dims->w % 4 == 0) && conv_params->dilation.w == 1 && (filter_dims->h == 1))
   1ad42:	f8de 3004 	ldr.w	r3, [lr, #4]
   1ad46:	2b01      	cmp	r3, #1
   1ad48:	d109      	bne.n	1ad5e <arm_convolve_wrapper_s8+0x42>
   1ad4a:	68b3      	ldr	r3, [r6, #8]
   1ad4c:	079b      	lsls	r3, r3, #30
   1ad4e:	d106      	bne.n	1ad5e <arm_convolve_wrapper_s8+0x42>
   1ad50:	f8dc 3018 	ldr.w	r3, [ip, #24]
   1ad54:	2b01      	cmp	r3, #1
   1ad56:	d102      	bne.n	1ad5e <arm_convolve_wrapper_s8+0x42>
   1ad58:	687b      	ldr	r3, [r7, #4]
   1ad5a:	2b01      	cmp	r3, #1
   1ad5c:	d02d      	beq.n	1adba <arm_convolve_wrapper_s8+0x9e>
                                     output_dims,
                                     output_data);
    }
    else
    {
        return arm_convolve_s8(ctx,
   1ad5e:	9a01      	ldr	r2, [sp, #4]
   1ad60:	9800      	ldr	r0, [sp, #0]
   1ad62:	940c      	str	r4, [sp, #48]	@ 0x30
   1ad64:	4673      	mov	r3, lr
   1ad66:	4661      	mov	r1, ip
   1ad68:	e9cd 6811 	strd	r6, r8, [sp, #68]	@ 0x44
   1ad6c:	e9cd a90f 	strd	sl, r9, [sp, #60]	@ 0x3c
   1ad70:	e9cd 7b0d 	strd	r7, fp, [sp, #52]	@ 0x34
                               bias_dims,
                               bias_data,
                               output_dims,
                               output_data);
    }
}
   1ad74:	b003      	add	sp, #12
   1ad76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return arm_convolve_s8(ctx,
   1ad7a:	f7ff bd95 	b.w	1a8a8 <arm_convolve_s8>
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (conv_params->stride.w == 1) &&
   1ad7e:	688d      	ldr	r5, [r1, #8]
   1ad80:	2d01      	cmp	r5, #1
   1ad82:	d1de      	bne.n	1ad42 <arm_convolve_wrapper_s8+0x26>
   1ad84:	68cd      	ldr	r5, [r1, #12]
   1ad86:	2d01      	cmp	r5, #1
   1ad88:	d1db      	bne.n	1ad42 <arm_convolve_wrapper_s8+0x26>
        (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1) &&
   1ad8a:	68bd      	ldr	r5, [r7, #8]
   1ad8c:	2d01      	cmp	r5, #1
   1ad8e:	d1d8      	bne.n	1ad42 <arm_convolve_wrapper_s8+0x26>
   1ad90:	687d      	ldr	r5, [r7, #4]
   1ad92:	2d01      	cmp	r5, #1
   1ad94:	d1d5      	bne.n	1ad42 <arm_convolve_wrapper_s8+0x26>
   1ad96:	698d      	ldr	r5, [r1, #24]
   1ad98:	2d01      	cmp	r5, #1
   1ad9a:	d1d2      	bne.n	1ad42 <arm_convolve_wrapper_s8+0x26>
        (conv_params->dilation.w == 1 && conv_params->dilation.h == 1))
   1ad9c:	69cd      	ldr	r5, [r1, #28]
   1ad9e:	2d01      	cmp	r5, #1
   1ada0:	d1cf      	bne.n	1ad42 <arm_convolve_wrapper_s8+0x26>
        return arm_convolve_1x1_s8_fast(ctx,
   1ada2:	e9cd 6811 	strd	r6, r8, [sp, #68]	@ 0x44
   1ada6:	e9cd a90f 	strd	sl, r9, [sp, #60]	@ 0x3c
   1adaa:	e9cd 7b0d 	strd	r7, fp, [sp, #52]	@ 0x34
   1adae:	940c      	str	r4, [sp, #48]	@ 0x30
}
   1adb0:	b003      	add	sp, #12
   1adb2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return arm_convolve_1x1_s8_fast(ctx,
   1adb6:	f7ff b97d 	b.w	1a0b4 <arm_convolve_1x1_s8_fast>
        return arm_convolve_1_x_n_s8(ctx,
   1adba:	9a01      	ldr	r2, [sp, #4]
   1adbc:	9800      	ldr	r0, [sp, #0]
   1adbe:	940c      	str	r4, [sp, #48]	@ 0x30
   1adc0:	4673      	mov	r3, lr
   1adc2:	4661      	mov	r1, ip
   1adc4:	e9cd 6811 	strd	r6, r8, [sp, #68]	@ 0x44
   1adc8:	e9cd a90f 	strd	sl, r9, [sp, #60]	@ 0x3c
   1adcc:	e9cd 7b0d 	strd	r7, fp, [sp, #52]	@ 0x34
}
   1add0:	b003      	add	sp, #12
   1add2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return arm_convolve_1_x_n_s8(ctx,
   1add6:	f7ff b949 	b.w	1a06c <arm_convolve_1_x_n_s8>
   1adda:	bf00      	nop

0001addc <arm_convolve_wrapper_s8_get_buffer_size>:

int32_t arm_convolve_wrapper_s8_get_buffer_size(const cmsis_nn_conv_params *conv_params,
                                                const cmsis_nn_dims *input_dims,
                                                const cmsis_nn_dims *filter_dims,
                                                const cmsis_nn_dims *output_dims)
{
   1addc:	4684      	mov	ip, r0
   1adde:	4608      	mov	r0, r1
   1ade0:	4611      	mov	r1, r2
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (conv_params->stride.w == 1) &&
   1ade2:	f8dc 2010 	ldr.w	r2, [ip, #16]
   1ade6:	b912      	cbnz	r2, 1adee <arm_convolve_wrapper_s8_get_buffer_size+0x12>
   1ade8:	f8dc 2014 	ldr.w	r2, [ip, #20]
   1adec:	b172      	cbz	r2, 1ae0c <arm_convolve_wrapper_s8_get_buffer_size+0x30>
        (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1) &&
        (conv_params->dilation.w == 1 && conv_params->dilation.h == 1))
    {
        return arm_convolve_1x1_s8_fast_get_buffer_size(input_dims);
    }
    else if ((input_dims->h == 1) && (output_dims->w % 4 == 0) && (conv_params->dilation.w == 1) &&
   1adee:	6842      	ldr	r2, [r0, #4]
   1adf0:	2a01      	cmp	r2, #1
   1adf2:	d109      	bne.n	1ae08 <arm_convolve_wrapper_s8_get_buffer_size+0x2c>
   1adf4:	689b      	ldr	r3, [r3, #8]
   1adf6:	079b      	lsls	r3, r3, #30
   1adf8:	d106      	bne.n	1ae08 <arm_convolve_wrapper_s8_get_buffer_size+0x2c>
   1adfa:	f8dc 3018 	ldr.w	r3, [ip, #24]
   1adfe:	2b01      	cmp	r3, #1
   1ae00:	d102      	bne.n	1ae08 <arm_convolve_wrapper_s8_get_buffer_size+0x2c>
   1ae02:	684b      	ldr	r3, [r1, #4]
   1ae04:	2b01      	cmp	r3, #1
   1ae06:	d019      	beq.n	1ae3c <arm_convolve_wrapper_s8_get_buffer_size+0x60>
    {
        return arm_convolve_1_x_n_s8_get_buffer_size(input_dims, filter_dims);
    }
    else
    {
        return arm_convolve_s8_get_buffer_size(input_dims, filter_dims);
   1ae08:	f7ff bf26 	b.w	1ac58 <arm_convolve_s8_get_buffer_size>
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (conv_params->stride.w == 1) &&
   1ae0c:	f8dc 2008 	ldr.w	r2, [ip, #8]
   1ae10:	2a01      	cmp	r2, #1
   1ae12:	d1ec      	bne.n	1adee <arm_convolve_wrapper_s8_get_buffer_size+0x12>
   1ae14:	f8dc 200c 	ldr.w	r2, [ip, #12]
   1ae18:	2a01      	cmp	r2, #1
   1ae1a:	d1e8      	bne.n	1adee <arm_convolve_wrapper_s8_get_buffer_size+0x12>
        (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1) &&
   1ae1c:	688a      	ldr	r2, [r1, #8]
   1ae1e:	2a01      	cmp	r2, #1
   1ae20:	d1e5      	bne.n	1adee <arm_convolve_wrapper_s8_get_buffer_size+0x12>
   1ae22:	684a      	ldr	r2, [r1, #4]
   1ae24:	2a01      	cmp	r2, #1
   1ae26:	d1e2      	bne.n	1adee <arm_convolve_wrapper_s8_get_buffer_size+0x12>
   1ae28:	f8dc 2018 	ldr.w	r2, [ip, #24]
   1ae2c:	2a01      	cmp	r2, #1
   1ae2e:	d1de      	bne.n	1adee <arm_convolve_wrapper_s8_get_buffer_size+0x12>
        (conv_params->dilation.w == 1 && conv_params->dilation.h == 1))
   1ae30:	f8dc 201c 	ldr.w	r2, [ip, #28]
   1ae34:	2a01      	cmp	r2, #1
   1ae36:	d1da      	bne.n	1adee <arm_convolve_wrapper_s8_get_buffer_size+0x12>
        return arm_convolve_1x1_s8_fast_get_buffer_size(input_dims);
   1ae38:	f7ff b972 	b.w	1a120 <arm_convolve_1x1_s8_fast_get_buffer_size>
        return arm_convolve_1_x_n_s8_get_buffer_size(input_dims, filter_dims);
   1ae3c:	f7ff b938 	b.w	1a0b0 <arm_convolve_1_x_n_s8_get_buffer_size>

0001ae40 <arm_depthwise_conv_3x3_s8>:
                                              const q7_t *kernel,
                                              const cmsis_nn_dims *bias_dims,
                                              const int32_t *bias,
                                              const cmsis_nn_dims *output_dims,
                                              q7_t *output)
{
   1ae40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae44:	461e      	mov	r6, r3
   1ae46:	460b      	mov	r3, r1
   1ae48:	b0a9      	sub	sp, #164	@ 0xa4
   1ae4a:	4614      	mov	r4, r2
    const int32_t input_y = input_dims->h;
    const int32_t input_ch = input_dims->c;
    const int32_t output_ch = output_dims->c;
    const int32_t pad_x = dw_conv_params->padding.w;
    const int32_t pad_y = dw_conv_params->padding.h;
    const int32_t stride_x = dw_conv_params->stride.w;
   1ae4c:	68d8      	ldr	r0, [r3, #12]
{
   1ae4e:	9937      	ldr	r1, [sp, #220]	@ 0xdc
    const int32_t stride_x = dw_conv_params->stride.w;
   1ae50:	901a      	str	r0, [sp, #104]	@ 0x68
    const int32_t stride_y = dw_conv_params->stride.h;
    const int32_t *output_shift = quant_params->shift;
   1ae52:	6860      	ldr	r0, [r4, #4]
   1ae54:	9018      	str	r0, [sp, #96]	@ 0x60
    const int32_t *output_mult = quant_params->multiplier;
   1ae56:	6820      	ldr	r0, [r4, #0]
    const int32_t input_ch = input_dims->c;
   1ae58:	f8d6 900c 	ldr.w	r9, [r6, #12]
    const int32_t input_offset = dw_conv_params->input_offset;
    const int32_t output_activation_min = dw_conv_params->activation.min;
    const int32_t output_activation_max = dw_conv_params->activation.max;

    /* Check input constraints input_ch == output_ch */
    if (input_ch != output_ch)
   1ae5c:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    const int32_t *output_mult = quant_params->multiplier;
   1ae60:	9017      	str	r0, [sp, #92]	@ 0x5c
    const int32_t output_x = output_dims->w;
   1ae62:	6888      	ldr	r0, [r1, #8]
   1ae64:	9019      	str	r0, [sp, #100]	@ 0x64
    const int32_t output_offset = dw_conv_params->output_offset;
   1ae66:	6858      	ldr	r0, [r3, #4]
    const int32_t pad_x = dw_conv_params->padding.w;
   1ae68:	695f      	ldr	r7, [r3, #20]
    const int32_t pad_y = dw_conv_params->padding.h;
   1ae6a:	699a      	ldr	r2, [r3, #24]
    const int32_t stride_y = dw_conv_params->stride.h;
   1ae6c:	f8d3 c010 	ldr.w	ip, [r3, #16]
    const int32_t output_y = output_dims->h;
   1ae70:	6849      	ldr	r1, [r1, #4]
    const int32_t input_offset = dw_conv_params->input_offset;
   1ae72:	f8d3 b000 	ldr.w	fp, [r3]
    const int32_t output_offset = dw_conv_params->output_offset;
   1ae76:	9012      	str	r0, [sp, #72]	@ 0x48
    if (input_ch != output_ch)
   1ae78:	45f1      	cmp	r9, lr
    const int32_t output_activation_min = dw_conv_params->activation.min;
   1ae7a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
    const int32_t output_activation_max = dw_conv_params->activation.max;
   1ae7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
{
   1ae7e:	9d33      	ldr	r5, [sp, #204]	@ 0xcc
    const int32_t pad_x = dw_conv_params->padding.w;
   1ae80:	9723      	str	r7, [sp, #140]	@ 0x8c
    const int32_t input_y = input_dims->h;
   1ae82:	e9d6 6a01 	ldrd	r6, sl, [r6, #4]
    const int32_t output_y = output_dims->h;
   1ae86:	9124      	str	r1, [sp, #144]	@ 0x90
    const int32_t output_activation_min = dw_conv_params->activation.min;
   1ae88:	900f      	str	r0, [sp, #60]	@ 0x3c
    const int32_t output_activation_max = dw_conv_params->activation.max;
   1ae8a:	9310      	str	r3, [sp, #64]	@ 0x40
    if (input_ch != output_ch)
   1ae8c:	f040 827b 	bne.w	1b386 <arm_depthwise_conv_3x3_s8+0x546>
    {
        return ARM_CMSIS_NN_ARG_ERROR;
    }
    /* Check input constraints pad_x <= 1 */
    if (pad_x > 1 || filter_dims->w != 3 || filter_dims->h != 3)
   1ae90:	2f01      	cmp	r7, #1
   1ae92:	f300 8278 	bgt.w	1b386 <arm_depthwise_conv_3x3_s8+0x546>
   1ae96:	68ab      	ldr	r3, [r5, #8]
   1ae98:	2b03      	cmp	r3, #3
   1ae9a:	f040 8274 	bne.w	1b386 <arm_depthwise_conv_3x3_s8+0x546>
   1ae9e:	686b      	ldr	r3, [r5, #4]
   1aea0:	2b03      	cmp	r3, #3
   1aea2:	f040 8270 	bne.w	1b386 <arm_depthwise_conv_3x3_s8+0x546>
    {
        return ARM_CMSIS_NN_ARG_ERROR;
    }
    const int32_t *bias_base = bias;
    for (int32_t in_h = -pad_y, out_h = 0, out_idx = 0; out_h < output_y; in_h += stride_y, ++out_h)
   1aea6:	2900      	cmp	r1, #0
   1aea8:	f1c2 0700 	rsb	r7, r2, #0
   1aeac:	f340 825d 	ble.w	1b36a <arm_depthwise_conv_3x3_s8+0x52a>
   1aeb0:	eb06 0e02 	add.w	lr, r6, r2
   1aeb4:	4611      	mov	r1, r2
   1aeb6:	f1a9 0204 	sub.w	r2, r9, #4
   1aeba:	0893      	lsrs	r3, r2, #2
   1aebc:	f022 0203 	bic.w	r2, r2, #3
   1aec0:	921d      	str	r2, [sp, #116]	@ 0x74
    {
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
   1aec2:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
    const q31_t remainder_mask = (1 << exponent) - 1;
   1aec4:	f8cd a098 	str.w	sl, [sp, #152]	@ 0x98
   1aec8:	f1c2 0800 	rsb	r8, r2, #0
   1aecc:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
   1aece:	f8cd 900c 	str.w	r9, [sp, #12]
   1aed2:	3210      	adds	r2, #16
   1aed4:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   1aed8:	3301      	adds	r3, #1
   1aeda:	009b      	lsls	r3, r3, #2
   1aedc:	931c      	str	r3, [sp, #112]	@ 0x70
                    out_buff1 = *bias++;
                    out_buff2 = *bias++;
                    out_buff3 = *bias++;
                }

                const int8_t *input_ptr = input + (in_h + ker_h_start) * (input_ch * input_x) + in_w * input_ch + in_ch;
   1aede:	fb09 f30a 	mul.w	r3, r9, sl
   1aee2:	9301      	str	r3, [sp, #4]
                    out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
                    out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);

                    if ((input_x - in_w) >= 3)
                    {
                        in_val = arm_nn_read_q7x4(input_ptr + (input_ch << 1));
   1aee4:	ea4f 0349 	mov.w	r3, r9, lsl #1
   1aee8:	9309      	str	r3, [sp, #36]	@ 0x24
                        out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
                        out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
                    }

                    input_ptr += (input_ch * input_x);
                    kernel_ptr += (input_ch * 3);
   1aeea:	eb09 0349 	add.w	r3, r9, r9, lsl #1
   1aeee:	9307      	str	r3, [sp, #28]
   1aef0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
   1aef2:	9211      	str	r2, [sp, #68]	@ 0x44
   1aef4:	fb03 f309 	mul.w	r3, r3, r9
    for (int32_t in_h = -pad_y, out_h = 0, out_idx = 0; out_h < output_y; in_h += stride_y, ++out_h)
   1aef8:	2500      	movs	r5, #0
   1aefa:	931b      	str	r3, [sp, #108]	@ 0x6c
   1aefc:	fb09 f308 	mul.w	r3, r9, r8
   1af00:	9325      	str	r3, [sp, #148]	@ 0x94
   1af02:	46e2      	mov	sl, ip
   1af04:	462e      	mov	r6, r5
   1af06:	f8cd 809c 	str.w	r8, [sp, #156]	@ 0x9c
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
   1af0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
   1af0c:	ea21 72e1 	bic.w	r2, r1, r1, asr #31
   1af10:	2b00      	cmp	r3, #0
   1af12:	920e      	str	r2, [sp, #56]	@ 0x38
   1af14:	f340 821f 	ble.w	1b356 <arm_depthwise_conv_3x3_s8+0x516>
                const int8_t *kernel_ptr = kernel + ker_h_start * (input_ch * 3) + in_ch;
   1af18:	9b03      	ldr	r3, [sp, #12]
   1af1a:	9834      	ldr	r0, [sp, #208]	@ 0xd0
   1af1c:	9620      	str	r6, [sp, #128]	@ 0x80
   1af1e:	fb03 f302 	mul.w	r3, r3, r2
   1af22:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1af26:	18c3      	adds	r3, r0, r3
   1af28:	9313      	str	r3, [sp, #76]	@ 0x4c
   1af2a:	9801      	ldr	r0, [sp, #4]
                const int8_t *input_ptr = input + (in_h + ker_h_start) * (input_ch * input_x) + in_w * input_ch + in_ch;
   1af2c:	18bb      	adds	r3, r7, r2
   1af2e:	9a25      	ldr	r2, [sp, #148]	@ 0x94
   1af30:	fb00 2003 	mla	r0, r0, r3, r2
   1af34:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
   1af36:	9a26      	ldr	r2, [sp, #152]	@ 0x98
   1af38:	4413      	add	r3, r2
   1af3a:	9300      	str	r3, [sp, #0]
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
   1af3c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
   1af3e:	9304      	str	r3, [sp, #16]
                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
   1af40:	4673      	mov	r3, lr
   1af42:	2b03      	cmp	r3, #3
   1af44:	e9cd a71e 	strd	sl, r7, [sp, #120]	@ 0x78
   1af48:	e9cd e121 	strd	lr, r1, [sp, #132]	@ 0x84
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
   1af4c:	f04f 0400 	mov.w	r4, #0
                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
   1af50:	bfa8      	it	ge
   1af52:	2303      	movge	r3, #3
   1af54:	9302      	str	r3, [sp, #8]
   1af56:	9414      	str	r4, [sp, #80]	@ 0x50
            for (; in_ch <= (input_ch - 4); in_ch += 4)
   1af58:	9b03      	ldr	r3, [sp, #12]
   1af5a:	2b03      	cmp	r3, #3
   1af5c:	f340 8210 	ble.w	1b380 <arm_depthwise_conv_3x3_s8+0x540>
   1af60:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
   1af62:	f8dd a060 	ldr.w	sl, [sp, #96]	@ 0x60
            bias = bias_base;
   1af66:	9a36      	ldr	r2, [sp, #216]	@ 0xd8
   1af68:	442b      	add	r3, r5
   1af6a:	9308      	str	r3, [sp, #32]
   1af6c:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
   1af6e:	eb03 0e00 	add.w	lr, r3, r0
                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
   1af72:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
   1af74:	9305      	str	r3, [sp, #20]
            bias = bias_base;
   1af76:	e9cd 5015 	strd	r5, r0, [sp, #84]	@ 0x54
                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
   1af7a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
            bias = bias_base;
   1af7c:	f8cd e018 	str.w	lr, [sp, #24]
   1af80:	f8dd e048 	ldr.w	lr, [sp, #72]	@ 0x48
   1af84:	4699      	mov	r9, r3
                if (bias)
   1af86:	2a00      	cmp	r2, #0
   1af88:	f000 81f3 	beq.w	1b372 <arm_depthwise_conv_3x3_s8+0x532>
                    out_buff1 = *bias++;
   1af8c:	e9d2 5400 	ldrd	r5, r4, [r2]
                    out_buff3 = *bias++;
   1af90:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
   1af94:	3210      	adds	r2, #16
                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
   1af96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   1af98:	9e02      	ldr	r6, [sp, #8]
   1af9a:	42b3      	cmp	r3, r6
                const int8_t *kernel_ptr = kernel + ker_h_start * (input_ch * 3) + in_ch;
   1af9c:	e9dd 7c05 	ldrd	r7, ip, [sp, #20]
                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
   1afa0:	da6b      	bge.n	1b07a <arm_depthwise_conv_3x3_s8+0x23a>
   1afa2:	e9cd 2e0a 	strd	r2, lr, [sp, #40]	@ 0x28
   1afa6:	e9cd a90c 	strd	sl, r9, [sp, #48]	@ 0x30
   1afaa:	4698      	mov	r8, r3
   1afac:	4666      	mov	r6, ip
                    if (ker_w_start == 0)
   1afae:	9b04      	ldr	r3, [sp, #16]
   1afb0:	2b00      	cmp	r3, #0
                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
   1afb2:	f108 0801 	add.w	r8, r8, #1
                    if (ker_w_start == 0)
   1afb6:	db1a      	blt.n	1afee <arm_depthwise_conv_3x3_s8+0x1ae>
    memcpy(&val, in_q7, 4);
   1afb8:	6833      	ldr	r3, [r6, #0]
   1afba:	683a      	ldr	r2, [r7, #0]
                        out_buff0 += ((int8_t)in_val + input_offset) * (int8_t)ker_val;
   1afbc:	fa4b f983 	sxtab	r9, fp, r3
                        out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
   1afc0:	f343 2e07 	sbfx	lr, r3, #8, #8
                        out_buff0 += ((int8_t)in_val + input_offset) * (int8_t)ker_val;
   1afc4:	fa4f fa82 	sxtb.w	sl, r2
                        out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
   1afc8:	44de      	add	lr, fp
                        out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
   1afca:	f343 4c07 	sbfx	ip, r3, #16, #8
                        out_buff0 += ((int8_t)in_val + input_offset) * (int8_t)ker_val;
   1afce:	fb0a 5509 	mla	r5, sl, r9, r5
                        out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
   1afd2:	f342 2907 	sbfx	r9, r2, #8, #8
                        out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
   1afd6:	44dc      	add	ip, fp
                        out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
   1afd8:	eb0b 6323 	add.w	r3, fp, r3, asr #24
                        out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
   1afdc:	fb09 440e 	mla	r4, r9, lr, r4
                        out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
   1afe0:	f342 4e07 	sbfx	lr, r2, #16, #8
                        out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
   1afe4:	1612      	asrs	r2, r2, #24
                        out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
   1afe6:	fb0e 000c 	mla	r0, lr, ip, r0
                        out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
   1afea:	fb02 1103 	mla	r1, r2, r3, r1
   1afee:	9a03      	ldr	r2, [sp, #12]
   1aff0:	58b3      	ldr	r3, [r6, r2]
   1aff2:	58ba      	ldr	r2, [r7, r2]
                    out_buff0 += ((int8_t)in_val + input_offset) * (int8_t)ker_val;
   1aff4:	fa4b f983 	sxtab	r9, fp, r3
                    out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
   1aff8:	f343 2e07 	sbfx	lr, r3, #8, #8
                    out_buff0 += ((int8_t)in_val + input_offset) * (int8_t)ker_val;
   1affc:	fa4f fa82 	sxtb.w	sl, r2
                    out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
   1b000:	44de      	add	lr, fp
                    out_buff0 += ((int8_t)in_val + input_offset) * (int8_t)ker_val;
   1b002:	fb0a 5509 	mla	r5, sl, r9, r5
                    out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
   1b006:	f342 2907 	sbfx	r9, r2, #8, #8
                    out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
   1b00a:	f343 4c07 	sbfx	ip, r3, #16, #8
                    out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
   1b00e:	fb09 440e 	mla	r4, r9, lr, r4
                    out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
   1b012:	eb0b 6323 	add.w	r3, fp, r3, asr #24
                    out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
   1b016:	f342 4e07 	sbfx	lr, r2, #16, #8
                    out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
   1b01a:	1612      	asrs	r2, r2, #24
   1b01c:	fb02 1103 	mla	r1, r2, r3, r1
                    if ((input_x - in_w) >= 3)
   1b020:	9b00      	ldr	r3, [sp, #0]
                    out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
   1b022:	44dc      	add	ip, fp
                    if ((input_x - in_w) >= 3)
   1b024:	2b02      	cmp	r3, #2
                    out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
   1b026:	fb0e 000c 	mla	r0, lr, ip, r0
                    if ((input_x - in_w) >= 3)
   1b02a:	dd1b      	ble.n	1b064 <arm_depthwise_conv_3x3_s8+0x224>
   1b02c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
   1b02e:	5993      	ldr	r3, [r2, r6]
   1b030:	59d2      	ldr	r2, [r2, r7]
                        out_buff0 += ((int8_t)in_val + input_offset) * (int8_t)ker_val;
   1b032:	fa4b f983 	sxtab	r9, fp, r3
                        out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
   1b036:	f343 2e07 	sbfx	lr, r3, #8, #8
                        out_buff0 += ((int8_t)in_val + input_offset) * (int8_t)ker_val;
   1b03a:	fa4f fa82 	sxtb.w	sl, r2
                        out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
   1b03e:	44de      	add	lr, fp
                        out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
   1b040:	f343 4c07 	sbfx	ip, r3, #16, #8
                        out_buff0 += ((int8_t)in_val + input_offset) * (int8_t)ker_val;
   1b044:	fb0a 5509 	mla	r5, sl, r9, r5
                        out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
   1b048:	f342 2907 	sbfx	r9, r2, #8, #8
                        out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
   1b04c:	44dc      	add	ip, fp
                        out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
   1b04e:	eb0b 6323 	add.w	r3, fp, r3, asr #24
                        out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
   1b052:	fb09 440e 	mla	r4, r9, lr, r4
                        out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
   1b056:	f342 4e07 	sbfx	lr, r2, #16, #8
                        out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
   1b05a:	1612      	asrs	r2, r2, #24
                        out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
   1b05c:	fb0e 000c 	mla	r0, lr, ip, r0
                        out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
   1b060:	fb02 1103 	mla	r1, r2, r3, r1
                    input_ptr += (input_ch * input_x);
   1b064:	9b01      	ldr	r3, [sp, #4]
   1b066:	441e      	add	r6, r3
                    kernel_ptr += (input_ch * 3);
   1b068:	9b07      	ldr	r3, [sp, #28]
   1b06a:	441f      	add	r7, r3
                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
   1b06c:	9b02      	ldr	r3, [sp, #8]
   1b06e:	4598      	cmp	r8, r3
   1b070:	d19d      	bne.n	1afae <arm_depthwise_conv_3x3_s8+0x16e>
   1b072:	e9dd 2e0a 	ldrd	r2, lr, [sp, #40]	@ 0x28
   1b076:	e9dd a90c 	ldrd	sl, r9, [sp, #48]	@ 0x30
                }

                out_buff0 = arm_nn_requantize(out_buff0, output_mult[in_ch + 0], output_shift[in_ch + 0]);
   1b07a:	f8da 6000 	ldr.w	r6, [sl]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b07e:	f8d9 3000 	ldr.w	r3, [r9]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b082:	ea26 7ce6 	bic.w	ip, r6, r6, asr #31
   1b086:	fa05 fc0c 	lsl.w	ip, r5, ip
   1b08a:	4276      	negs	r6, r6
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b08c:	f04f 4580 	mov.w	r5, #1073741824	@ 0x40000000
   1b090:	2700      	movs	r7, #0
   1b092:	fbcc 5703 	smlal	r5, r7, ip, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b096:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b09a:	2301      	movs	r3, #1
   1b09c:	40b3      	lsls	r3, r6
    result = (int32_t)(mult.long_long >> 31);
   1b09e:	0fed      	lsrs	r5, r5, #31
   1b0a0:	ea45 0547 	orr.w	r5, r5, r7, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b0a4:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
   1b0a6:	ea05 0703 	and.w	r7, r5, r3
    if (result < 0)
   1b0aa:	4135      	asrs	r5, r6
    q31_t threshold = remainder_mask >> 1;
   1b0ac:	ea4f 0363 	mov.w	r3, r3, asr #1
                out_buff1 = arm_nn_requantize(out_buff1, output_mult[in_ch + 1], output_shift[in_ch + 1]);
   1b0b0:	f8da 6004 	ldr.w	r6, [sl, #4]
        threshold++;
   1b0b4:	bf48      	it	mi
   1b0b6:	3301      	addmi	r3, #1
    if (remainder > threshold)
   1b0b8:	429f      	cmp	r7, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b0ba:	ea26 7ce6 	bic.w	ip, r6, r6, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b0be:	f8d9 3004 	ldr.w	r3, [r9, #4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b0c2:	fa04 fc0c 	lsl.w	ip, r4, ip
   1b0c6:	f1c6 0600 	rsb	r6, r6, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b0ca:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
   1b0ce:	f04f 0700 	mov.w	r7, #0
   1b0d2:	fbcc 4703 	smlal	r4, r7, ip, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b0d6:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b0da:	f04f 0301 	mov.w	r3, #1
   1b0de:	fa03 f306 	lsl.w	r3, r3, r6
    result = (int32_t)(mult.long_long >> 31);
   1b0e2:	ea4f 74d4 	mov.w	r4, r4, lsr #31
   1b0e6:	ea44 0447 	orr.w	r4, r4, r7, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b0ea:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
    int32_t remainder = remainder_mask & dividend;
   1b0ee:	ea04 0703 	and.w	r7, r4, r3
        result++;
   1b0f2:	bfc8      	it	gt
   1b0f4:	3501      	addgt	r5, #1
    q31_t threshold = remainder_mask >> 1;
   1b0f6:	105b      	asrs	r3, r3, #1
    if (result < 0)
   1b0f8:	4134      	asrs	r4, r6
                out_buff2 = arm_nn_requantize(out_buff2, output_mult[in_ch + 2], output_shift[in_ch + 2]);
   1b0fa:	f8da 6008 	ldr.w	r6, [sl, #8]
        threshold++;
   1b0fe:	bf48      	it	mi
   1b100:	3301      	addmi	r3, #1
    if (remainder > threshold)
   1b102:	429f      	cmp	r7, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b104:	ea26 7ce6 	bic.w	ip, r6, r6, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b108:	f8d9 3008 	ldr.w	r3, [r9, #8]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b10c:	fa00 fc0c 	lsl.w	ip, r0, ip
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b110:	f04f 0700 	mov.w	r7, #0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b114:	f1c6 0000 	rsb	r0, r6, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b118:	f04f 4680 	mov.w	r6, #1073741824	@ 0x40000000
   1b11c:	fbcc 6703 	smlal	r6, r7, ip, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b120:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    result = (int32_t)(mult.long_long >> 31);
   1b124:	ea4f 73d6 	mov.w	r3, r6, lsr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b128:	f04f 0601 	mov.w	r6, #1
    result = (int32_t)(mult.long_long >> 31);
   1b12c:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b130:	fa06 f700 	lsl.w	r7, r6, r0
   1b134:	f107 37ff 	add.w	r7, r7, #4294967295	@ 0xffffffff
    int32_t remainder = remainder_mask & dividend;
   1b138:	ea03 0c07 	and.w	ip, r3, r7
        result++;
   1b13c:	bfc8      	it	gt
   1b13e:	3401      	addgt	r4, #1
    q31_t threshold = remainder_mask >> 1;
   1b140:	4137      	asrs	r7, r6
    if (result < 0)
   1b142:	fa53 f600 	asrs.w	r6, r3, r0
                out_buff3 = arm_nn_requantize(out_buff3, output_mult[in_ch + 3], output_shift[in_ch + 3]);
   1b146:	f8da 000c 	ldr.w	r0, [sl, #12]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b14a:	f8d9 300c 	ldr.w	r3, [r9, #12]
        threshold++;
   1b14e:	bf48      	it	mi
   1b150:	3701      	addmi	r7, #1
    if (remainder > threshold)
   1b152:	45bc      	cmp	ip, r7
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b154:	ea20 77e0 	bic.w	r7, r0, r0, asr #31
   1b158:	fa01 f707 	lsl.w	r7, r1, r7
   1b15c:	f1c0 0000 	rsb	r0, r0, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b160:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
   1b164:	f04f 0c00 	mov.w	ip, #0
   1b168:	fbc7 1c03 	smlal	r1, ip, r7, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b16c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b170:	f04f 0301 	mov.w	r3, #1
   1b174:	fa03 f300 	lsl.w	r3, r3, r0
    result = (int32_t)(mult.long_long >> 31);
   1b178:	ea4f 71d1 	mov.w	r1, r1, lsr #31
   1b17c:	ea41 014c 	orr.w	r1, r1, ip, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b180:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
        result++;
   1b184:	bfc8      	it	gt
   1b186:	3601      	addgt	r6, #1
    int32_t remainder = remainder_mask & dividend;
   1b188:	ea01 0703 	and.w	r7, r1, r3
    if (result < 0)
   1b18c:	4101      	asrs	r1, r0
    q31_t threshold = remainder_mask >> 1;
   1b18e:	ea4f 0363 	mov.w	r3, r3, asr #1
                out_buff0 += output_offset;
                out_buff1 += output_offset;
                out_buff2 += output_offset;
                out_buff3 += output_offset;

                out_buff0 = MIN(MAX(out_buff0, output_activation_min), output_activation_max);
   1b192:	980f      	ldr	r0, [sp, #60]	@ 0x3c
        threshold++;
   1b194:	bf48      	it	mi
   1b196:	3301      	addmi	r3, #1
                out_buff0 += output_offset;
   1b198:	4475      	add	r5, lr
    if (remainder > threshold)
   1b19a:	429f      	cmp	r7, r3
                out_buff1 += output_offset;
   1b19c:	4474      	add	r4, lr
                out_buff2 += output_offset;
   1b19e:	eb0e 0306 	add.w	r3, lr, r6
        result++;
   1b1a2:	bfc8      	it	gt
   1b1a4:	3101      	addgt	r1, #1
                out_buff0 = MIN(MAX(out_buff0, output_activation_min), output_activation_max);
   1b1a6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
   1b1a8:	4285      	cmp	r5, r0
   1b1aa:	bfb8      	it	lt
   1b1ac:	4605      	movlt	r5, r0
                out_buff1 = MIN(MAX(out_buff1, output_activation_min), output_activation_max);
   1b1ae:	4284      	cmp	r4, r0
   1b1b0:	bfb8      	it	lt
   1b1b2:	4604      	movlt	r4, r0
                out_buff0 = MIN(MAX(out_buff0, output_activation_min), output_activation_max);
   1b1b4:	42b5      	cmp	r5, r6
   1b1b6:	bfa8      	it	ge
   1b1b8:	4635      	movge	r5, r6
                out_buff2 = MIN(MAX(out_buff2, output_activation_min), output_activation_max);
   1b1ba:	4283      	cmp	r3, r0
   1b1bc:	bfb8      	it	lt
   1b1be:	4603      	movlt	r3, r0
                out_buff3 += output_offset;
   1b1c0:	4471      	add	r1, lr
                out_buff1 = MIN(MAX(out_buff1, output_activation_min), output_activation_max);
   1b1c2:	42b4      	cmp	r4, r6
   1b1c4:	bfa8      	it	ge
   1b1c6:	4634      	movge	r4, r6
                out_buff3 = MIN(MAX(out_buff3, output_activation_min), output_activation_max);
   1b1c8:	4281      	cmp	r1, r0
   1b1ca:	bfb8      	it	lt
   1b1cc:	4601      	movlt	r1, r0
            for (; in_ch <= (input_ch - 4); in_ch += 4)
   1b1ce:	9806      	ldr	r0, [sp, #24]
   1b1d0:	3004      	adds	r0, #4
   1b1d2:	9006      	str	r0, [sp, #24]
   1b1d4:	9805      	ldr	r0, [sp, #20]
   1b1d6:	3004      	adds	r0, #4
   1b1d8:	9005      	str	r0, [sp, #20]

                output[out_idx++] = (int8_t)out_buff0;
   1b1da:	2000      	movs	r0, #0
                out_buff2 = MIN(MAX(out_buff2, output_activation_min), output_activation_max);
   1b1dc:	42b3      	cmp	r3, r6
                output[out_idx++] = (int8_t)out_buff0;
   1b1de:	f365 0007 	bfi	r0, r5, #0, #8
                out_buff2 = MIN(MAX(out_buff2, output_activation_min), output_activation_max);
   1b1e2:	bfa8      	it	ge
   1b1e4:	4633      	movge	r3, r6
                output[out_idx++] = (int8_t)out_buff0;
   1b1e6:	f364 200f 	bfi	r0, r4, #8, #8
                out_buff3 = MIN(MAX(out_buff3, output_activation_min), output_activation_max);
   1b1ea:	42b1      	cmp	r1, r6
   1b1ec:	bfa8      	it	ge
   1b1ee:	4631      	movge	r1, r6
                output[out_idx++] = (int8_t)out_buff0;
   1b1f0:	f363 4017 	bfi	r0, r3, #16, #8
   1b1f4:	9b08      	ldr	r3, [sp, #32]
   1b1f6:	f361 601f 	bfi	r0, r1, #24, #8
   1b1fa:	f843 0b04 	str.w	r0, [r3], #4
   1b1fe:	9308      	str	r3, [sp, #32]
            for (; in_ch <= (input_ch - 4); in_ch += 4)
   1b200:	9b11      	ldr	r3, [sp, #68]	@ 0x44
   1b202:	f109 0910 	add.w	r9, r9, #16
   1b206:	454b      	cmp	r3, r9
   1b208:	f10a 0a10 	add.w	sl, sl, #16
   1b20c:	f47f aebb 	bne.w	1af86 <arm_depthwise_conv_3x3_s8+0x146>
   1b210:	e9dd 5015 	ldrd	r5, r0, [sp, #84]	@ 0x54
   1b214:	991d      	ldr	r1, [sp, #116]	@ 0x74
   1b216:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
   1b218:	1d2b      	adds	r3, r5, #4
   1b21a:	18cd      	adds	r5, r1, r3
                output[out_idx++] = (int8_t)out_buff2;
                output[out_idx++] = (int8_t)out_buff3;
            }

            // Leftover
            for (; in_ch < input_ch; ++in_ch)
   1b21c:	9b03      	ldr	r3, [sp, #12]
   1b21e:	42b3      	cmp	r3, r6
   1b220:	f340 8084 	ble.w	1b32c <arm_depthwise_conv_3x3_s8+0x4ec>
   1b224:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
   1b226:	9938      	ldr	r1, [sp, #224]	@ 0xe0
                if (bias)
                {
                    out_buff = *bias++;
                }

                const int8_t *input_ptr = input + (in_h + ker_h_start) * (input_ch * input_x) + in_w * input_ch + in_ch;
   1b228:	f8dd a008 	ldr.w	sl, [sp, #8]
   1b22c:	960d      	str	r6, [sp, #52]	@ 0x34
   1b22e:	eb04 0c86 	add.w	ip, r4, r6, lsl #2
   1b232:	9c18      	ldr	r4, [sp, #96]	@ 0x60
   1b234:	f8cd c014 	str.w	ip, [sp, #20]
   1b238:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
   1b23c:	9c32      	ldr	r4, [sp, #200]	@ 0xc8
   1b23e:	f8cd e018 	str.w	lr, [sp, #24]
   1b242:	194f      	adds	r7, r1, r5
   1b244:	e9cd 500b 	strd	r5, r0, [sp, #44]	@ 0x2c
   1b248:	eb04 0800 	add.w	r8, r4, r0
   1b24c:	46b9      	mov	r9, r7
   1b24e:	f8dd c01c 	ldr.w	ip, [sp, #28]
   1b252:	9f09      	ldr	r7, [sp, #36]	@ 0x24
   1b254:	f8dd e010 	ldr.w	lr, [sp, #16]
   1b258:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
   1b25c:	4698      	mov	r8, r3
                if (bias)
   1b25e:	2a00      	cmp	r2, #0
   1b260:	f000 808c 	beq.w	1b37c <arm_depthwise_conv_3x3_s8+0x53c>
                    out_buff = *bias++;
   1b264:	f852 3b04 	ldr.w	r3, [r2], #4
                const int8_t *kernel_ptr = kernel + ker_h_start * (input_ch * 3) + in_ch;

                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
   1b268:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
   1b26a:	4555      	cmp	r5, sl
   1b26c:	da25      	bge.n	1b2ba <arm_depthwise_conv_3x3_s8+0x47a>
                const int8_t *input_ptr = input + (in_h + ker_h_start) * (input_ch * input_x) + in_w * input_ch + in_ch;
   1b26e:	990a      	ldr	r1, [sp, #40]	@ 0x28
                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
   1b270:	9208      	str	r2, [sp, #32]
                const int8_t *input_ptr = input + (in_h + ker_h_start) * (input_ch * input_x) + in_w * input_ch + in_ch;
   1b272:	1988      	adds	r0, r1, r6
                const int8_t *kernel_ptr = kernel + ker_h_start * (input_ch * 3) + in_ch;
   1b274:	9913      	ldr	r1, [sp, #76]	@ 0x4c
   1b276:	1871      	adds	r1, r6, r1
                {
                    if (ker_w_start == 0)
   1b278:	f1be 0f00 	cmp.w	lr, #0
                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
   1b27c:	f105 0501 	add.w	r5, r5, #1
                    if (ker_w_start == 0)
   1b280:	db06      	blt.n	1b290 <arm_depthwise_conv_3x3_s8+0x450>
                    {
                        out_buff += (*(input_ptr) + input_offset) * *(kernel_ptr);
   1b282:	f990 2000 	ldrsb.w	r2, [r0]
   1b286:	f991 4000 	ldrsb.w	r4, [r1]
   1b28a:	445a      	add	r2, fp
   1b28c:	fb04 3302 	mla	r3, r4, r2, r3
                    }

                    out_buff += (*(input_ptr + input_ch) + input_offset) * *(kernel_ptr + input_ch);
   1b290:	f910 2008 	ldrsb.w	r2, [r0, r8]
   1b294:	f911 4008 	ldrsb.w	r4, [r1, r8]
   1b298:	445a      	add	r2, fp
   1b29a:	fb04 3302 	mla	r3, r4, r2, r3

                    if ((input_x - in_w) >= 3)
   1b29e:	9a00      	ldr	r2, [sp, #0]
   1b2a0:	2a02      	cmp	r2, #2
   1b2a2:	dd04      	ble.n	1b2ae <arm_depthwise_conv_3x3_s8+0x46e>
                    {
                        out_buff += (*(input_ptr + (input_ch << 1)) + input_offset) * *(kernel_ptr + (input_ch << 1));
   1b2a4:	57c2      	ldrsb	r2, [r0, r7]
   1b2a6:	57cc      	ldrsb	r4, [r1, r7]
   1b2a8:	445a      	add	r2, fp
   1b2aa:	fb04 3302 	mla	r3, r4, r2, r3
                    }

                    input_ptr += (input_ch * input_x);
   1b2ae:	9a01      	ldr	r2, [sp, #4]
                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
   1b2b0:	4555      	cmp	r5, sl
                    input_ptr += (input_ch * input_x);
   1b2b2:	4410      	add	r0, r2
                    kernel_ptr += (input_ch * 3);
   1b2b4:	4461      	add	r1, ip
                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
   1b2b6:	d1df      	bne.n	1b278 <arm_depthwise_conv_3x3_s8+0x438>
   1b2b8:	9a08      	ldr	r2, [sp, #32]
                }

                out_buff = arm_nn_requantize(out_buff, output_mult[in_ch], output_shift[in_ch]);
   1b2ba:	9806      	ldr	r0, [sp, #24]
   1b2bc:	f850 1b04 	ldr.w	r1, [r0], #4
   1b2c0:	9006      	str	r0, [sp, #24]
   1b2c2:	9805      	ldr	r0, [sp, #20]
   1b2c4:	f850 4b04 	ldr.w	r4, [r0], #4
   1b2c8:	9005      	str	r0, [sp, #20]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b2ca:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
   1b2ce:	fa03 f000 	lsl.w	r0, r3, r0
   1b2d2:	4249      	negs	r1, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b2d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
   1b2d8:	2500      	movs	r5, #0
   1b2da:	fbc0 3504 	smlal	r3, r5, r0, r4
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b2de:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b2e2:	2001      	movs	r0, #1
   1b2e4:	4088      	lsls	r0, r1
    result = (int32_t)(mult.long_long >> 31);
   1b2e6:	0fdb      	lsrs	r3, r3, #31
   1b2e8:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b2ec:	3801      	subs	r0, #1
    int32_t remainder = remainder_mask & dividend;
   1b2ee:	ea03 0400 	and.w	r4, r3, r0
    if (result < 0)
   1b2f2:	410b      	asrs	r3, r1
    q31_t threshold = remainder_mask >> 1;
   1b2f4:	ea4f 0060 	mov.w	r0, r0, asr #1
        threshold++;
   1b2f8:	bf48      	it	mi
   1b2fa:	3001      	addmi	r0, #1
                out_buff += output_offset;
   1b2fc:	9912      	ldr	r1, [sp, #72]	@ 0x48
    if (remainder > threshold)
   1b2fe:	4284      	cmp	r4, r0
        result++;
   1b300:	bfc8      	it	gt
   1b302:	3301      	addgt	r3, #1
   1b304:	440b      	add	r3, r1
                out_buff = MIN(MAX(out_buff, output_activation_min), output_activation_max);
   1b306:	990f      	ldr	r1, [sp, #60]	@ 0x3c
   1b308:	428b      	cmp	r3, r1
   1b30a:	bfb8      	it	lt
   1b30c:	460b      	movlt	r3, r1
   1b30e:	9910      	ldr	r1, [sp, #64]	@ 0x40
            for (; in_ch < input_ch; ++in_ch)
   1b310:	3601      	adds	r6, #1
                out_buff = MIN(MAX(out_buff, output_activation_min), output_activation_max);
   1b312:	428b      	cmp	r3, r1
   1b314:	bfa8      	it	ge
   1b316:	460b      	movge	r3, r1
            for (; in_ch < input_ch; ++in_ch)
   1b318:	45b0      	cmp	r8, r6
                output[out_idx++] = (int8_t)out_buff;
   1b31a:	f809 3b01 	strb.w	r3, [r9], #1
            for (; in_ch < input_ch; ++in_ch)
   1b31e:	d19e      	bne.n	1b25e <arm_depthwise_conv_3x3_s8+0x41e>
   1b320:	e9dd 500b 	ldrd	r5, r0, [sp, #44]	@ 0x2c
   1b324:	9b03      	ldr	r3, [sp, #12]
   1b326:	990d      	ldr	r1, [sp, #52]	@ 0x34
   1b328:	442b      	add	r3, r5
   1b32a:	1a5d      	subs	r5, r3, r1
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
   1b32c:	9a04      	ldr	r2, [sp, #16]
   1b32e:	991a      	ldr	r1, [sp, #104]	@ 0x68
   1b330:	9b14      	ldr	r3, [sp, #80]	@ 0x50
   1b332:	440a      	add	r2, r1
   1b334:	9204      	str	r2, [sp, #16]
   1b336:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
   1b338:	4410      	add	r0, r2
   1b33a:	9a00      	ldr	r2, [sp, #0]
   1b33c:	1a52      	subs	r2, r2, r1
   1b33e:	9200      	str	r2, [sp, #0]
   1b340:	9a19      	ldr	r2, [sp, #100]	@ 0x64
   1b342:	3301      	adds	r3, #1
   1b344:	429a      	cmp	r2, r3
   1b346:	9314      	str	r3, [sp, #80]	@ 0x50
   1b348:	f47f ae06 	bne.w	1af58 <arm_depthwise_conv_3x3_s8+0x118>
   1b34c:	e9dd a71e 	ldrd	sl, r7, [sp, #120]	@ 0x78
   1b350:	e9dd 6e20 	ldrd	r6, lr, [sp, #128]	@ 0x80
   1b354:	9922      	ldr	r1, [sp, #136]	@ 0x88
    for (int32_t in_h = -pad_y, out_h = 0, out_idx = 0; out_h < output_y; in_h += stride_y, ++out_h)
   1b356:	9b24      	ldr	r3, [sp, #144]	@ 0x90
   1b358:	3601      	adds	r6, #1
   1b35a:	42b3      	cmp	r3, r6
   1b35c:	4457      	add	r7, sl
   1b35e:	eba1 010a 	sub.w	r1, r1, sl
   1b362:	ebae 0e0a 	sub.w	lr, lr, sl
   1b366:	f47f add0 	bne.w	1af0a <arm_depthwise_conv_3x3_s8+0xca>
            }
        }
    }

    /* Return to application */
    return ARM_CMSIS_NN_SUCCESS;
   1b36a:	2000      	movs	r0, #0
}
   1b36c:	b029      	add	sp, #164	@ 0xa4
   1b36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                int32_t out_buff3 = 0;
   1b372:	4611      	mov	r1, r2
                int32_t out_buff2 = 0;
   1b374:	4610      	mov	r0, r2
                int32_t out_buff1 = 0;
   1b376:	4614      	mov	r4, r2
                int32_t out_buff0 = 0;
   1b378:	4615      	mov	r5, r2
   1b37a:	e60c      	b.n	1af96 <arm_depthwise_conv_3x3_s8+0x156>
                int32_t out_buff = 0;
   1b37c:	4613      	mov	r3, r2
   1b37e:	e773      	b.n	1b268 <arm_depthwise_conv_3x3_s8+0x428>
            bias = bias_base;
   1b380:	9a36      	ldr	r2, [sp, #216]	@ 0xd8
            int32_t in_ch = 0;
   1b382:	2600      	movs	r6, #0
   1b384:	e74a      	b.n	1b21c <arm_depthwise_conv_3x3_s8+0x3dc>
        return ARM_CMSIS_NN_ARG_ERROR;
   1b386:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   1b38a:	e7ef      	b.n	1b36c <arm_depthwise_conv_3x3_s8+0x52c>

0001b38c <arm_depthwise_conv_s16>:
                                           const q7_t *kernel,
                                           const cmsis_nn_dims *bias_dims,
                                           const int64_t *bias,
                                           const cmsis_nn_dims *output_dims,
                                           q15_t *output)
{
   1b38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b390:	b0bb      	sub	sp, #236	@ 0xec
   1b392:	4618      	mov	r0, r3
   1b394:	f8dd c114 	ldr.w	ip, [sp, #276]	@ 0x114
   1b398:	8805      	ldrh	r5, [r0, #0]

    depthwise_conv_s16_generic_s16(input,
                                   input_dims->n,
                                   input_dims->w,
                                   input_dims->h,
                                   input_dims->c,
   1b39a:	f8d0 b00c 	ldr.w	fp, [r0, #12]
                                   kernel,
                                   dw_conv_params->ch_mult,
   1b39e:	f8d1 a008 	ldr.w	sl, [r1, #8]
    depthwise_conv_s16_generic_s16(input,
   1b3a2:	f8b1 9018 	ldrh.w	r9, [r1, #24]
   1b3a6:	f8b1 8010 	ldrh.w	r8, [r1, #16]
{
   1b3aa:	9e49      	ldr	r6, [sp, #292]	@ 0x124
                                   input_dims->h,
   1b3ac:	e9d0 e401 	ldrd	lr, r4, [r0, #4]
                                   filter_dims->w,
   1b3b0:	f8dc 0008 	ldr.w	r0, [ip, #8]
   1b3b4:	9001      	str	r0, [sp, #4]
{
   1b3b6:	4617      	mov	r7, r2
                                   filter_dims->h,
   1b3b8:	f8dc 0004 	ldr.w	r0, [ip, #4]
   1b3bc:	900f      	str	r0, [sp, #60]	@ 0x3c
    const uint16_t dilation_y = dw_conv_params->dilation.h;
   1b3be:	e9d1 3207 	ldrd	r3, r2, [r1, #28]
    depthwise_conv_s16_generic_s16(input,
   1b3c2:	8988      	ldrh	r0, [r1, #12]
   1b3c4:	9010      	str	r0, [sp, #64]	@ 0x40
                                   dw_conv_params->padding.h,
                                   dw_conv_params->stride.w,
                                   dw_conv_params->stride.h,
                                   bias,
                                   output,
                                   quant_params->shift,
   1b3c6:	6878      	ldr	r0, [r7, #4]
    depthwise_conv_s16_generic_s16(input,
   1b3c8:	f8b1 c014 	ldrh.w	ip, [r1, #20]
                                   quant_params->shift,
   1b3cc:	9011      	str	r0, [sp, #68]	@ 0x44
                                   quant_params->multiplier,
                                   output_dims->w,
                                   output_dims->h,
                                   dw_conv_params->activation.min,
   1b3ce:	6a48      	ldr	r0, [r1, #36]	@ 0x24
                                   dw_conv_params->activation.max,
   1b3d0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
   1b3d2:	9114      	str	r1, [sp, #80]	@ 0x50
    const uint16_t dilation_x = dw_conv_params->dilation.w;
   1b3d4:	b299      	uxth	r1, r3
                                   quant_params->multiplier,
   1b3d6:	683f      	ldr	r7, [r7, #0]
    const uint16_t dilation_x = dw_conv_params->dilation.w;
   1b3d8:	9115      	str	r1, [sp, #84]	@ 0x54
    const uint16_t dilation_y = dw_conv_params->dilation.h;
   1b3da:	b291      	uxth	r1, r2
                                   quant_params->multiplier,
   1b3dc:	9712      	str	r7, [sp, #72]	@ 0x48
                                   dw_conv_params->activation.min,
   1b3de:	9013      	str	r0, [sp, #76]	@ 0x4c
                                   output_dims->h,
   1b3e0:	e9d6 6701 	ldrd	r6, r7, [r6, #4]
    const uint16_t dilation_y = dw_conv_params->dilation.h;
   1b3e4:	9116      	str	r1, [sp, #88]	@ 0x58
    for (int i_batch = 0; i_batch < input_batches; i_batch++)
   1b3e6:	2d00      	cmp	r5, #0
   1b3e8:	f000 81ac 	beq.w	1b744 <arm_depthwise_conv_s16+0x3b8>
   1b3ec:	b2a1      	uxth	r1, r4
   1b3ee:	b29c      	uxth	r4, r3
   1b3f0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1b3f4:	9305      	str	r3, [sp, #20]
   1b3f6:	b290      	uxth	r0, r2
   1b3f8:	fa1f fe8e 	uxth.w	lr, lr
   1b3fc:	f1c9 0200 	rsb	r2, r9, #0
   1b400:	f1cc 0300 	rsb	r3, ip, #0
   1b404:	fa1f fb8b 	uxth.w	fp, fp
   1b408:	fa1f f982 	uxth.w	r9, r2
   1b40c:	b29a      	uxth	r2, r3
        input += (input_x * input_y * input_ch);
   1b40e:	fb0e f301 	mul.w	r3, lr, r1
   1b412:	fb0b f303 	mul.w	r3, fp, r3
   1b416:	9227      	str	r2, [sp, #156]	@ 0x9c
   1b418:	460a      	mov	r2, r1
   1b41a:	910b      	str	r1, [sp, #44]	@ 0x2c
   1b41c:	0059      	lsls	r1, r3, #1
   1b41e:	fb02 f30b 	mul.w	r3, r2, fp
   1b422:	fb00 f303 	mul.w	r3, r0, r3
   1b426:	005a      	lsls	r2, r3, #1
   1b428:	fb04 f30b 	mul.w	r3, r4, fp
   1b42c:	fa1f fa8a 	uxth.w	sl, sl
   1b430:	9007      	str	r0, [sp, #28]
   1b432:	0058      	lsls	r0, r3, #1
   1b434:	9b05      	ldr	r3, [sp, #20]
   1b436:	921d      	str	r2, [sp, #116]	@ 0x74
   1b438:	901e      	str	r0, [sp, #120]	@ 0x78
                                int32_t ker_idx_0 = (i_ker_y * kernel_x + i_ker_x) * (input_ch * ch_mult) + idx_out_ch;
   1b43a:	fb0b f20a 	mul.w	r2, fp, sl
   1b43e:	ea4f 008a 	mov.w	r0, sl, lsl #2
   1b442:	fb03 f302 	mul.w	r3, r3, r2
   1b446:	901f      	str	r0, [sp, #124]	@ 0x7c
   1b448:	ea4f 004a 	mov.w	r0, sl, lsl #1
   1b44c:	920a      	str	r2, [sp, #40]	@ 0x28
   1b44e:	9018      	str	r0, [sp, #96]	@ 0x60
   1b450:	931b      	str	r3, [sp, #108]	@ 0x6c
   1b452:	9404      	str	r4, [sp, #16]
   1b454:	b2b6      	uxth	r6, r6
    for (int i_batch = 0; i_batch < input_batches; i_batch++)
   1b456:	2300      	movs	r3, #0
   1b458:	f8cd b020 	str.w	fp, [sp, #32]
   1b45c:	f8cd a038 	str.w	sl, [sp, #56]	@ 0x38
   1b460:	460a      	mov	r2, r1
   1b462:	4670      	mov	r0, lr
        for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
   1b464:	2e00      	cmp	r6, #0
   1b466:	f000 8166 	beq.w	1b736 <arm_depthwise_conv_s16+0x3aa>
   1b46a:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
   1b46e:	910d      	str	r1, [sp, #52]	@ 0x34
   1b470:	e9cd 7528 	strd	r7, r5, [sp, #160]	@ 0xa0
   1b474:	fa1f fb87 	uxth.w	fp, r7
   1b478:	461d      	mov	r5, r3
   1b47a:	46cc      	mov	ip, r9
   1b47c:	f04f 0a00 	mov.w	sl, #0
   1b480:	4614      	mov	r4, r2
   1b482:	464b      	mov	r3, r9
            const int16_t base_idx_y = (i_out_y * stride_y) - pad_y;
   1b484:	fa0f f28c 	sxth.w	r2, ip
   1b488:	9217      	str	r2, [sp, #92]	@ 0x5c
            for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
   1b48a:	f1bb 0f00 	cmp.w	fp, #0
   1b48e:	f000 8145 	beq.w	1b71c <arm_depthwise_conv_s16+0x390>
                            const int32_t start_y_max = (-base_idx_y + dilation_y - 1) / dilation_y;
   1b492:	9f07      	ldr	r7, [sp, #28]
                            ker_y_end = MIN(kernel_y, input_y - base_idx_y);
   1b494:	f8cd 80a8 	str.w	r8, [sp, #168]	@ 0xa8
   1b498:	2a00      	cmp	r2, #0
                            ker_y_start = MAX(0, -base_idx_y);
   1b49a:	f1c2 0e00 	rsb	lr, r2, #0
   1b49e:	bfd4      	ite	le
   1b4a0:	4671      	movle	r1, lr
   1b4a2:	2100      	movgt	r1, #0
                            const int32_t start_y_max = (-base_idx_y + dilation_y - 1) / dilation_y;
   1b4a4:	eba7 0e02 	sub.w	lr, r7, r2
   1b4a8:	911a      	str	r1, [sp, #104]	@ 0x68
   1b4aa:	1a81      	subs	r1, r0, r2
   1b4ac:	f10e 32ff 	add.w	r2, lr, #4294967295	@ 0xffffffff
   1b4b0:	9226      	str	r2, [sp, #152]	@ 0x98
                            ker_y_end = MIN(kernel_y, input_y - base_idx_y);
   1b4b2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
   1b4b4:	f8dd e09c 	ldr.w	lr, [sp, #156]	@ 0x9c
   1b4b8:	9124      	str	r1, [sp, #144]	@ 0x90
   1b4ba:	428a      	cmp	r2, r1
   1b4bc:	bfa8      	it	ge
   1b4be:	460a      	movge	r2, r1
   1b4c0:	46a8      	mov	r8, r5
   1b4c2:	4619      	mov	r1, r3
   1b4c4:	4605      	mov	r5, r0
            for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
   1b4c6:	f04f 0900 	mov.w	r9, #0
                            ker_y_end = MIN(kernel_y, input_y - base_idx_y);
   1b4ca:	9225      	str	r2, [sp, #148]	@ 0x94
   1b4cc:	4627      	mov	r7, r4
   1b4ce:	4660      	mov	r0, ip
   1b4d0:	4653      	mov	r3, sl
                for (int i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
   1b4d2:	9a08      	ldr	r2, [sp, #32]
                const int16_t base_idx_x = (i_out_x * stride_x) - pad_x;
   1b4d4:	fa0f fa8e 	sxth.w	sl, lr
                for (int i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
   1b4d8:	2a00      	cmp	r2, #0
   1b4da:	f000 810e 	beq.w	1b6fa <arm_depthwise_conv_s16+0x36e>
   1b4de:	f1ba 0f00 	cmp.w	sl, #0
                            ker_x_start = MAX(0, -base_idx_x);
   1b4e2:	f1ca 0200 	rsb	r2, sl, #0
   1b4e6:	bfc8      	it	gt
   1b4e8:	2200      	movgt	r2, #0
   1b4ea:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
   1b4ec:	9219      	str	r2, [sp, #100]	@ 0x64
   1b4ee:	2200      	movs	r2, #0
   1b4f0:	9206      	str	r2, [sp, #24]
                for (int i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
   1b4f2:	9201      	str	r2, [sp, #4]
                            ker_x_end = MIN(kernel_x, input_x - base_idx_x);
   1b4f4:	9a05      	ldr	r2, [sp, #20]
   1b4f6:	f8cd b0b4 	str.w	fp, [sp, #180]	@ 0xb4
   1b4fa:	eba4 0c0a 	sub.w	ip, r4, sl
   1b4fe:	4562      	cmp	r2, ip
   1b500:	bfa8      	it	ge
   1b502:	4662      	movge	r2, ip
   1b504:	9222      	str	r2, [sp, #136]	@ 0x88
                            const int32_t start_x_max = (-base_idx_x + dilation_x - 1) / dilation_x;
   1b506:	9a04      	ldr	r2, [sp, #16]
   1b508:	f8cd c008 	str.w	ip, [sp, #8]
   1b50c:	e9cd 392b 	strd	r3, r9, [sp, #172]	@ 0xac
   1b510:	eba2 020a 	sub.w	r2, r2, sl
                            ker_x_start = MAX(0, -base_idx_x);
   1b514:	f06f 0403 	mvn.w	r4, #3
                            const int32_t start_x_max = (-base_idx_x + dilation_x - 1) / dilation_x;
   1b518:	9223      	str	r2, [sp, #140]	@ 0x8c
                    for (int i_ch_mult = 0; i_ch_mult < ch_mult; i_ch_mult++)
   1b51a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   1b51c:	2b00      	cmp	r3, #0
   1b51e:	f000 80da 	beq.w	1b6d6 <arm_depthwise_conv_s16+0x34a>
                            const int32_t end_min_x = (input_x - base_idx_x + dilation_x - 1) / dilation_x;
   1b522:	9b04      	ldr	r3, [sp, #16]
   1b524:	9a02      	ldr	r2, [sp, #8]
                            const int32_t start_x_max = (-base_idx_x + dilation_x - 1) / dilation_x;
   1b526:	9034      	str	r0, [sp, #208]	@ 0xd0
                            const int32_t end_min_x = (input_x - base_idx_x + dilation_x - 1) / dilation_x;
   1b528:	eb03 0902 	add.w	r9, r3, r2
   1b52c:	f109 33ff 	add.w	r3, r9, #4294967295	@ 0xffffffff
   1b530:	9321      	str	r3, [sp, #132]	@ 0x84
   1b532:	9b12      	ldr	r3, [sp, #72]	@ 0x48
   1b534:	9a18      	ldr	r2, [sp, #96]	@ 0x60
                    for (int i_ch_mult = 0; i_ch_mult < ch_mult; i_ch_mult++)
   1b536:	f8dd 9018 	ldr.w	r9, [sp, #24]
   1b53a:	4423      	add	r3, r4
   1b53c:	9309      	str	r3, [sp, #36]	@ 0x24
   1b53e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
   1b540:	eb03 0b04 	add.w	fp, r3, r4
   1b544:	9b4a      	ldr	r3, [sp, #296]	@ 0x128
   1b546:	4413      	add	r3, r2
   1b548:	931c      	str	r3, [sp, #112]	@ 0x70
                            const int32_t start_x_max = (-base_idx_x + dilation_x - 1) / dilation_x;
   1b54a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
   1b54c:	e9cd 872e 	strd	r8, r7, [sp, #184]	@ 0xb8
   1b550:	e9cd 4e32 	strd	r4, lr, [sp, #200]	@ 0xc8
   1b554:	e9cd 5630 	strd	r5, r6, [sp, #192]	@ 0xc0
   1b558:	3b01      	subs	r3, #1
   1b55a:	9e02      	ldr	r6, [sp, #8]
   1b55c:	9320      	str	r3, [sp, #128]	@ 0x80
   1b55e:	468c      	mov	ip, r1
                        const q31_t reduced_multiplier = REDUCE_MULTIPLIER(output_mult[idx_out_ch]);
   1b560:	9a09      	ldr	r2, [sp, #36]	@ 0x24
   1b562:	f852 3f04 	ldr.w	r3, [r2, #4]!
   1b566:	9209      	str	r2, [sp, #36]	@ 0x24
   1b568:	4a85      	ldr	r2, [pc, #532]	@ (1b780 <arm_depthwise_conv_s16+0x3f4>)
   1b56a:	4293      	cmp	r3, r2
   1b56c:	f300 80ee 	bgt.w	1b74c <arm_depthwise_conv_s16+0x3c0>
   1b570:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
    const q63_t new_val = val * reduced_multiplier;
   1b574:	141f      	asrs	r7, r3, #16
   1b576:	17db      	asrs	r3, r3, #31
   1b578:	930c      	str	r3, [sp, #48]	@ 0x30
                        if (dilation_x > 1)
   1b57a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
   1b57c:	2b01      	cmp	r3, #1
   1b57e:	f240 80ed 	bls.w	1b75c <arm_depthwise_conv_s16+0x3d0>
                            const int32_t start_x_max = (-base_idx_x + dilation_x - 1) / dilation_x;
   1b582:	9b04      	ldr	r3, [sp, #16]
   1b584:	9a20      	ldr	r2, [sp, #128]	@ 0x80
   1b586:	fb92 f4f3 	sdiv	r4, r2, r3
                            const int32_t end_min_x = (input_x - base_idx_x + dilation_x - 1) / dilation_x;
   1b58a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
   1b58c:	fb92 f5f3 	sdiv	r5, r2, r3
                            ker_x_end = MIN(kernel_x, end_min_x);
   1b590:	9b05      	ldr	r3, [sp, #20]
   1b592:	429d      	cmp	r5, r3
   1b594:	bfa8      	it	ge
   1b596:	461d      	movge	r5, r3
                        if (dilation_y > 1)
   1b598:	9b16      	ldr	r3, [sp, #88]	@ 0x58
   1b59a:	2b01      	cmp	r3, #1
                            ker_x_start = MAX(0, start_x_max);
   1b59c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
                        if (dilation_y > 1)
   1b5a0:	f240 80e2 	bls.w	1b768 <arm_depthwise_conv_s16+0x3dc>
                            const int32_t end_min_y = (input_y - base_idx_y + dilation_y - 1) / dilation_y;
   1b5a4:	9b07      	ldr	r3, [sp, #28]
   1b5a6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
   1b5a8:	1898      	adds	r0, r3, r2
                            ker_y_end = MIN(kernel_y, end_min_y);
   1b5aa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
                            const int32_t end_min_y = (input_y - base_idx_y + dilation_y - 1) / dilation_y;
   1b5ac:	3801      	subs	r0, #1
   1b5ae:	fb90 f0f3 	sdiv	r0, r0, r3
                            ker_y_end = MIN(kernel_y, end_min_y);
   1b5b2:	4290      	cmp	r0, r2
   1b5b4:	bfa8      	it	ge
   1b5b6:	4610      	movge	r0, r2
                            const int32_t start_y_max = (-base_idx_y + dilation_y - 1) / dilation_y;
   1b5b8:	9a26      	ldr	r2, [sp, #152]	@ 0x98
   1b5ba:	fb92 f1f3 	sdiv	r1, r2, r3
                        if (bias)
   1b5be:	9b48      	ldr	r3, [sp, #288]	@ 0x120
                            ker_y_start = MAX(0, start_y_max);
   1b5c0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
                        if (bias)
   1b5c4:	2b00      	cmp	r3, #0
   1b5c6:	f000 80d5 	beq.w	1b774 <arm_depthwise_conv_s16+0x3e8>
                            acc_0 = bias[idx_out_ch];
   1b5ca:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   1b5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b5d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
                        for (int i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
   1b5d6:	4288      	cmp	r0, r1
   1b5d8:	dd45      	ble.n	1b666 <arm_depthwise_conv_s16+0x2da>
   1b5da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
   1b5dc:	9a07      	ldr	r2, [sp, #28]
   1b5de:	fb02 3801 	mla	r8, r2, r1, r3
   1b5e2:	9b04      	ldr	r3, [sp, #16]
   1b5e4:	9a08      	ldr	r2, [sp, #32]
   1b5e6:	fb03 ae04 	mla	lr, r3, r4, sl
   1b5ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   1b5ec:	fb03 ee08 	mla	lr, r3, r8, lr
   1b5f0:	9b01      	ldr	r3, [sp, #4]
   1b5f2:	fb02 3e0e 	mla	lr, r2, lr, r3
   1b5f6:	9b44      	ldr	r3, [sp, #272]	@ 0x110
   1b5f8:	eb03 084e 	add.w	r8, r3, lr, lsl #1
   1b5fc:	9b05      	ldr	r3, [sp, #20]
   1b5fe:	fb03 4e01 	mla	lr, r3, r1, r4
   1b602:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   1b604:	fb03 9e0e 	mla	lr, r3, lr, r9
   1b608:	9b46      	ldr	r3, [sp, #280]	@ 0x118
   1b60a:	e9cd b935 	strd	fp, r9, [sp, #212]	@ 0xd4
   1b60e:	449e      	add	lr, r3
   1b610:	46bb      	mov	fp, r7
   1b612:	4653      	mov	r3, sl
                            for (int i_ker_x = ker_x_start; i_ker_x < ker_x_end; i_ker_x++)
   1b614:	42a5      	cmp	r5, r4
   1b616:	dd19      	ble.n	1b64c <arm_depthwise_conv_s16+0x2c0>
   1b618:	e9cd 3137 	strd	r3, r1, [sp, #220]	@ 0xdc
   1b61c:	46f2      	mov	sl, lr
   1b61e:	46c1      	mov	r9, r8
   1b620:	4627      	mov	r7, r4
   1b622:	9439      	str	r4, [sp, #228]	@ 0xe4
   1b624:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
                                acc_0 += input[idx_0] * kernel[ker_idx_0];
   1b626:	f99a 1000 	ldrsb.w	r1, [sl]
   1b62a:	f8b9 2000 	ldrh.w	r2, [r9]
                            for (int i_ker_x = ker_x_start; i_ker_x < ker_x_end; i_ker_x++)
   1b62e:	449a      	add	sl, r3
                                acc_0 += input[idx_0] * kernel[ker_idx_0];
   1b630:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   1b634:	fbc2 3481 	smlalbb	r3, r4, r2, r1
   1b638:	e9cd 3402 	strd	r3, r4, [sp, #8]
                            for (int i_ker_x = ker_x_start; i_ker_x < ker_x_end; i_ker_x++)
   1b63c:	3701      	adds	r7, #1
   1b63e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
   1b640:	42af      	cmp	r7, r5
   1b642:	4499      	add	r9, r3
   1b644:	d1ee      	bne.n	1b624 <arm_depthwise_conv_s16+0x298>
   1b646:	e9dd 3137 	ldrd	r3, r1, [sp, #220]	@ 0xdc
   1b64a:	9c39      	ldr	r4, [sp, #228]	@ 0xe4
                        for (int i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
   1b64c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
   1b64e:	3101      	adds	r1, #1
   1b650:	4490      	add	r8, r2
   1b652:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
   1b654:	4281      	cmp	r1, r0
   1b656:	4496      	add	lr, r2
   1b658:	d1dc      	bne.n	1b614 <arm_depthwise_conv_s16+0x288>
   1b65a:	465f      	mov	r7, fp
   1b65c:	f8dd 90d8 	ldr.w	r9, [sp, #216]	@ 0xd8
   1b660:	f8dd b0d4 	ldr.w	fp, [sp, #212]	@ 0xd4
   1b664:	469a      	mov	sl, r3
   1b666:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
   1b66a:	990c      	ldr	r1, [sp, #48]	@ 0x30
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
   1b66c:	f85b 0f04 	ldr.w	r0, [fp, #4]!
    const q63_t new_val = val * reduced_multiplier;
   1b670:	fb04 f101 	mul.w	r1, r4, r1
   1b674:	fb07 1105 	mla	r1, r7, r5, r1
   1b678:	fba4 3207 	umull	r3, r2, r4, r7
   1b67c:	440a      	add	r2, r1
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
   1b67e:	f1c0 010e 	rsb	r1, r0, #14
   1b682:	3012      	adds	r0, #18
   1b684:	40cb      	lsrs	r3, r1
   1b686:	fa02 f000 	lsl.w	r0, r2, r0
   1b68a:	3920      	subs	r1, #32
   1b68c:	bf58      	it	pl
   1b68e:	fa42 f101 	asrpl.w	r1, r2, r1
   1b692:	ea43 0300 	orr.w	r3, r3, r0
   1b696:	bf58      	it	pl
   1b698:	430b      	orrpl	r3, r1
                        result = MAX(result, output_activation_min);
   1b69a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
    result = (result + 1) >> 1;             // Last shift position and insert round
   1b69c:	3301      	adds	r3, #1
   1b69e:	105b      	asrs	r3, r3, #1
   1b6a0:	4293      	cmp	r3, r2
   1b6a2:	bfb8      	it	lt
   1b6a4:	4613      	movlt	r3, r2
                        result = MIN(result, output_activation_max);
   1b6a6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
   1b6a8:	4293      	cmp	r3, r2
   1b6aa:	bfa8      	it	ge
   1b6ac:	4613      	movge	r3, r2
                        *output++ = (int16_t)result;
   1b6ae:	9a4a      	ldr	r2, [sp, #296]	@ 0x128
   1b6b0:	f822 3b02 	strh.w	r3, [r2], #2
                    for (int i_ch_mult = 0; i_ch_mult < ch_mult; i_ch_mult++)
   1b6b4:	4613      	mov	r3, r2
                        *output++ = (int16_t)result;
   1b6b6:	924a      	str	r2, [sp, #296]	@ 0x128
                    for (int i_ch_mult = 0; i_ch_mult < ch_mult; i_ch_mult++)
   1b6b8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
   1b6ba:	4293      	cmp	r3, r2
   1b6bc:	f109 0901 	add.w	r9, r9, #1
   1b6c0:	f47f af4e 	bne.w	1b560 <arm_depthwise_conv_s16+0x1d4>
   1b6c4:	e9dd 872e 	ldrd	r8, r7, [sp, #184]	@ 0xb8
   1b6c8:	e9dd 4e32 	ldrd	r4, lr, [sp, #200]	@ 0xc8
   1b6cc:	9602      	str	r6, [sp, #8]
   1b6ce:	9d30      	ldr	r5, [sp, #192]	@ 0xc0
   1b6d0:	9834      	ldr	r0, [sp, #208]	@ 0xd0
   1b6d2:	9e31      	ldr	r6, [sp, #196]	@ 0xc4
   1b6d4:	4661      	mov	r1, ip
                for (int i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
   1b6d6:	9b01      	ldr	r3, [sp, #4]
   1b6d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
   1b6da:	3301      	adds	r3, #1
   1b6dc:	9301      	str	r3, [sp, #4]
   1b6de:	9b06      	ldr	r3, [sp, #24]
   1b6e0:	4413      	add	r3, r2
   1b6e2:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
   1b6e4:	9306      	str	r3, [sp, #24]
   1b6e6:	4414      	add	r4, r2
   1b6e8:	9b01      	ldr	r3, [sp, #4]
   1b6ea:	9a08      	ldr	r2, [sp, #32]
   1b6ec:	429a      	cmp	r2, r3
   1b6ee:	f47f af14 	bne.w	1b51a <arm_depthwise_conv_s16+0x18e>
   1b6f2:	e9dd 392b 	ldrd	r3, r9, [sp, #172]	@ 0xac
   1b6f6:	f8dd b0b4 	ldr.w	fp, [sp, #180]	@ 0xb4
            for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
   1b6fa:	9a10      	ldr	r2, [sp, #64]	@ 0x40
   1b6fc:	f109 0901 	add.w	r9, r9, #1
   1b700:	4472      	add	r2, lr
   1b702:	45d9      	cmp	r9, fp
   1b704:	fa1f fe82 	uxth.w	lr, r2
   1b708:	f47f aee3 	bne.w	1b4d2 <arm_depthwise_conv_s16+0x146>
   1b70c:	4684      	mov	ip, r0
   1b70e:	4628      	mov	r0, r5
   1b710:	4645      	mov	r5, r8
   1b712:	f8dd 80a8 	ldr.w	r8, [sp, #168]	@ 0xa8
   1b716:	469a      	mov	sl, r3
   1b718:	463c      	mov	r4, r7
   1b71a:	460b      	mov	r3, r1
        for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
   1b71c:	f10a 0a01 	add.w	sl, sl, #1
   1b720:	44c4      	add	ip, r8
   1b722:	45b2      	cmp	sl, r6
   1b724:	fa1f fc8c 	uxth.w	ip, ip
   1b728:	f47f aeac 	bne.w	1b484 <arm_depthwise_conv_s16+0xf8>
   1b72c:	4699      	mov	r9, r3
   1b72e:	9f28      	ldr	r7, [sp, #160]	@ 0xa0
   1b730:	462b      	mov	r3, r5
   1b732:	9d29      	ldr	r5, [sp, #164]	@ 0xa4
   1b734:	4622      	mov	r2, r4
        input += (input_x * input_y * input_ch);
   1b736:	9944      	ldr	r1, [sp, #272]	@ 0x110
    for (int i_batch = 0; i_batch < input_batches; i_batch++)
   1b738:	3301      	adds	r3, #1
        input += (input_x * input_y * input_ch);
   1b73a:	4411      	add	r1, r2
    for (int i_batch = 0; i_batch < input_batches; i_batch++)
   1b73c:	429d      	cmp	r5, r3
        input += (input_x * input_y * input_ch);
   1b73e:	9144      	str	r1, [sp, #272]	@ 0x110
    for (int i_batch = 0; i_batch < input_batches; i_batch++)
   1b740:	f47f ae90 	bne.w	1b464 <arm_depthwise_conv_s16+0xd8>
                                   dilation_x,
                                   dilation_y);

    /* Return to application */
    return ARM_CMSIS_NN_SUCCESS;
}
   1b744:	2000      	movs	r0, #0
   1b746:	b03b      	add	sp, #236	@ 0xec
   1b748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b74c:	2300      	movs	r3, #0
   1b74e:	930c      	str	r3, [sp, #48]	@ 0x30
                        if (dilation_x > 1)
   1b750:	9b15      	ldr	r3, [sp, #84]	@ 0x54
   1b752:	2b01      	cmp	r3, #1
   1b754:	f647 77ff 	movw	r7, #32767	@ 0x7fff
   1b758:	f63f af13 	bhi.w	1b582 <arm_depthwise_conv_s16+0x1f6>
                        if (dilation_y > 1)
   1b75c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
                            ker_x_end = MIN(kernel_x, input_x - base_idx_x);
   1b75e:	9d22      	ldr	r5, [sp, #136]	@ 0x88
                            ker_x_start = MAX(0, -base_idx_x);
   1b760:	9c19      	ldr	r4, [sp, #100]	@ 0x64
                        if (dilation_y > 1)
   1b762:	2b01      	cmp	r3, #1
   1b764:	f63f af1e 	bhi.w	1b5a4 <arm_depthwise_conv_s16+0x218>
                        if (bias)
   1b768:	9b48      	ldr	r3, [sp, #288]	@ 0x120
                            ker_y_end = MIN(kernel_y, input_y - base_idx_y);
   1b76a:	9825      	ldr	r0, [sp, #148]	@ 0x94
                            ker_y_start = MAX(0, -base_idx_y);
   1b76c:	991a      	ldr	r1, [sp, #104]	@ 0x68
                        if (bias)
   1b76e:	2b00      	cmp	r3, #0
   1b770:	f47f af2b 	bne.w	1b5ca <arm_depthwise_conv_s16+0x23e>
                        int64_t acc_0 = 0;
   1b774:	2200      	movs	r2, #0
   1b776:	2300      	movs	r3, #0
   1b778:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1b77c:	e72b      	b.n	1b5d6 <arm_depthwise_conv_s16+0x24a>
   1b77e:	bf00      	nop
   1b780:	7ffeffff 	.word	0x7ffeffff

0001b784 <depthwise_conv_s8_mult_4>:
                         const int32_t output_y,
                         const int32_t output_offset,
                         const int32_t input_offset,
                         const int32_t output_activation_min,
                         const int32_t output_activation_max)
{
   1b784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b788:	b0a3      	sub	sp, #140	@ 0x8c
   1b78a:	4688      	mov	r8, r1
   1b78c:	9932      	ldr	r1, [sp, #200]	@ 0xc8
   1b78e:	f8dd b0b4 	ldr.w	fp, [sp, #180]	@ 0xb4
   1b792:	9f31      	ldr	r7, [sp, #196]	@ 0xc4
   1b794:	9e34      	ldr	r6, [sp, #208]	@ 0xd0
   1b796:	901a      	str	r0, [sp, #104]	@ 0x68
   1b798:	4699      	mov	r9, r3
    const int32_t *bias_base = bias;
    const int32_t *mult_base = output_mult;
    const int32_t *shift_base = output_shift;
    const int8_t *kernel_base = kernel;

    for (int32_t in_h = -pad_y, out_h = 0; out_h < output_y; in_h += stride_y, ++out_h)
   1b79a:	424b      	negs	r3, r1
   1b79c:	930e      	str	r3, [sp, #56]	@ 0x38
   1b79e:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
   1b7a0:	2b00      	cmp	r3, #0
   1b7a2:	f340 81db 	ble.w	1bb5c <depthwise_conv_s8_mult_4+0x3d8>
   1b7a6:	eb01 0e02 	add.w	lr, r1, r2
    {
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
   1b7aa:	427a      	negs	r2, r7
   1b7ac:	fb09 f202 	mul.w	r2, r9, r2
   1b7b0:	9214      	str	r2, [sp, #80]	@ 0x50
                        out_buff[3] = *bias++;
                    }

                    for (int32_t ker_h = ker_h_start; ker_h < MIN(kernel_y, input_y - in_h); ++ker_h)
                    {
                        int32_t ker_idx = ker_h * (output_ch * kernel_x) + ker_w_start * output_ch + out_ch;
   1b7b2:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
   1b7b4:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
   1b7b6:	fb0b f202 	mul.w	r2, fp, r2
   1b7ba:	9203      	str	r2, [sp, #12]
                        kernel = kernel_base + mult_tile + ker_idx;
                        int32_t in_idx = (in_h + ker_h) * (input_ch * input_x) + in_w * input_ch + in_ch;
   1b7bc:	fb09 f208 	mul.w	r2, r9, r8
   1b7c0:	3b01      	subs	r3, #1
   1b7c2:	9204      	str	r2, [sp, #16]
   1b7c4:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
   1b7c6:	089b      	lsrs	r3, r3, #2
   1b7c8:	fb02 f209 	mul.w	r2, r2, r9
   1b7cc:	3301      	adds	r3, #1
   1b7ce:	9215      	str	r2, [sp, #84]	@ 0x54
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b7d0:	46da      	mov	sl, fp
   1b7d2:	011a      	lsls	r2, r3, #4
   1b7d4:	46cb      	mov	fp, r9
   1b7d6:	009b      	lsls	r3, r3, #2
   1b7d8:	f8dd 90f0 	ldr.w	r9, [sp, #240]	@ 0xf0
   1b7dc:	9219      	str	r2, [sp, #100]	@ 0x64
    for (int32_t in_h = -pad_y, out_h = 0; out_h < output_y; in_h += stride_y, ++out_h)
   1b7de:	2400      	movs	r4, #0
   1b7e0:	4672      	mov	r2, lr
   1b7e2:	9318      	str	r3, [sp, #96]	@ 0x60
   1b7e4:	46be      	mov	lr, r7
   1b7e6:	4647      	mov	r7, r8
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
   1b7e8:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
   1b7ea:	ea21 75e1 	bic.w	r5, r1, r1, asr #31
   1b7ee:	2b00      	cmp	r3, #0
   1b7f0:	950c      	str	r5, [sp, #48]	@ 0x30
   1b7f2:	f340 81a7 	ble.w	1bb44 <depthwise_conv_s8_mult_4+0x3c0>
   1b7f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   1b7f8:	9804      	ldr	r0, [sp, #16]
   1b7fa:	f8dd 8050 	ldr.w	r8, [sp, #80]	@ 0x50
                    for (int32_t ker_h = ker_h_start; ker_h < MIN(kernel_y, input_y - in_h); ++ker_h)
   1b7fe:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
   1b802:	442b      	add	r3, r5
   1b804:	fb00 f303 	mul.w	r3, r0, r3
   1b808:	9317      	str	r3, [sp, #92]	@ 0x5c
   1b80a:	eb07 030e 	add.w	r3, r7, lr
   1b80e:	9310      	str	r3, [sp, #64]	@ 0x40
   1b810:	9b03      	ldr	r3, [sp, #12]
   1b812:	9634      	str	r6, [sp, #208]	@ 0xd0
   1b814:	fb05 f303 	mul.w	r3, r5, r3
   1b818:	9316      	str	r3, [sp, #88]	@ 0x58
   1b81a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
   1b81c:	941b      	str	r4, [sp, #108]	@ 0x6c
   1b81e:	4293      	cmp	r3, r2
   1b820:	e9cd 211c 	strd	r2, r1, [sp, #112]	@ 0x70
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
   1b824:	f04f 0c00 	mov.w	ip, #0
                    for (int32_t ker_h = ker_h_start; ker_h < MIN(kernel_y, input_y - in_h); ++ker_h)
   1b828:	bfa8      	it	ge
   1b82a:	4613      	movge	r3, r2
   1b82c:	463e      	mov	r6, r7
   1b82e:	46c8      	mov	r8, r9
   1b830:	4670      	mov	r0, lr
   1b832:	46d1      	mov	r9, sl
   1b834:	9302      	str	r3, [sp, #8]
   1b836:	f8cd c04c 	str.w	ip, [sp, #76]	@ 0x4c
   1b83a:	4677      	mov	r7, lr
   1b83c:	46da      	mov	sl, fp
            for (int32_t in_ch = 0, out_ch = 0, ker_w_start = MAX(0, -in_w); out_ch < output_ch;
   1b83e:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   1b842:	f1b9 0f00 	cmp.w	r9, #0
   1b846:	9305      	str	r3, [sp, #20]
   1b848:	f340 8162 	ble.w	1bb10 <depthwise_conv_s8_mult_4+0x38c>
   1b84c:	9917      	ldr	r1, [sp, #92]	@ 0x5c
   1b84e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
            output_shift = shift_base;
   1b850:	f8dd e0dc 	ldr.w	lr, [sp, #220]	@ 0xdc
   1b854:	440a      	add	r2, r1
   1b856:	920b      	str	r2, [sp, #44]	@ 0x2c
   1b858:	9a16      	ldr	r2, [sp, #88]	@ 0x58
   1b85a:	fb03 2209 	mla	r2, r3, r9, r2
   1b85e:	9211      	str	r2, [sp, #68]	@ 0x44
   1b860:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
   1b862:	fb03 230a 	mla	r3, r3, sl, r2
   1b866:	9306      	str	r3, [sp, #24]
            output_mult = mult_base;
   1b868:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
   1b86a:	930f      	str	r3, [sp, #60]	@ 0x3c
            bias = bias_base;
   1b86c:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
#pragma clang loop unroll(disable)
#endif
                        for (int32_t ker_w = ker_w_start; ker_w < MIN(kernel_x, input_x - in_w);
   1b86e:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
            bias = bias_base;
   1b870:	9309      	str	r3, [sp, #36]	@ 0x24
                        for (int32_t ker_w = ker_w_start; ker_w < MIN(kernel_x, input_x - in_w);
   1b872:	9b10      	ldr	r3, [sp, #64]	@ 0x40
   1b874:	4293      	cmp	r3, r2
   1b876:	bfa8      	it	ge
   1b878:	4613      	movge	r3, r2
            for (int32_t in_ch = 0, out_ch = 0, ker_w_start = MAX(0, -in_w); out_ch < output_ch;
   1b87a:	2100      	movs	r1, #0
                        for (int32_t ker_w = ker_w_start; ker_w < MIN(kernel_x, input_x - in_w);
   1b87c:	469b      	mov	fp, r3
                for (int mult_tile = 0; mult_tile < ch_mult; mult_tile += 4)
   1b87e:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
   1b880:	2b00      	cmp	r3, #0
   1b882:	f340 8139 	ble.w	1baf8 <depthwise_conv_s8_mult_4+0x374>
   1b886:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
   1b888:	9c11      	ldr	r4, [sp, #68]	@ 0x44
   1b88a:	9731      	str	r7, [sp, #196]	@ 0xc4
   1b88c:	f103 0210 	add.w	r2, r3, #16
   1b890:	f10e 0310 	add.w	r3, lr, #16
   1b894:	9307      	str	r3, [sp, #28]
   1b896:	2300      	movs	r3, #0
   1b898:	9308      	str	r3, [sp, #32]
   1b89a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
   1b89c:	e9cd 1e1e 	strd	r1, lr, [sp, #120]	@ 0x78
   1b8a0:	e9cd 0620 	strd	r0, r6, [sp, #128]	@ 0x80
   1b8a4:	4423      	add	r3, r4
   1b8a6:	930d      	str	r3, [sp, #52]	@ 0x34
                    if (bias)
   1b8a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   1b8aa:	2b00      	cmp	r3, #0
   1b8ac:	f000 8159 	beq.w	1bb62 <depthwise_conv_s8_mult_4+0x3de>
                        out_buff[1] = *bias++;
   1b8b0:	e9d3 7600 	ldrd	r7, r6, [r3]
                        out_buff[3] = *bias++;
   1b8b4:	e9d3 5402 	ldrd	r5, r4, [r3, #8]
   1b8b8:	3310      	adds	r3, #16
   1b8ba:	9309      	str	r3, [sp, #36]	@ 0x24
                    for (int32_t ker_h = ker_h_start; ker_h < MIN(kernel_y, input_y - in_h); ++ker_h)
   1b8bc:	990c      	ldr	r1, [sp, #48]	@ 0x30
   1b8be:	9b02      	ldr	r3, [sp, #8]
   1b8c0:	4299      	cmp	r1, r3
   1b8c2:	da34      	bge.n	1b92e <depthwise_conv_s8_mult_4+0x1aa>
   1b8c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   1b8c6:	9808      	ldr	r0, [sp, #32]
   1b8c8:	920a      	str	r2, [sp, #40]	@ 0x28
   1b8ca:	1818      	adds	r0, r3, r0
                        for (int32_t ker_w = ker_w_start; ker_w < MIN(kernel_x, input_x - in_w);
   1b8cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
                    for (int32_t ker_h = ker_h_start; ker_h < MIN(kernel_y, input_y - in_h); ++ker_h)
   1b8ce:	460a      	mov	r2, r1
   1b8d0:	4686      	mov	lr, r0
                        for (int32_t ker_w = ker_w_start; ker_w < MIN(kernel_x, input_x - in_w);
   1b8d2:	9805      	ldr	r0, [sp, #20]
                        kernel = kernel_base + mult_tile + ker_idx;
   1b8d4:	f8cd e000 	str.w	lr, [sp]
                        for (int32_t ker_w = ker_w_start; ker_w < MIN(kernel_x, input_x - in_w);
   1b8d8:	4558      	cmp	r0, fp
   1b8da:	da1f      	bge.n	1b91c <depthwise_conv_s8_mult_4+0x198>
   1b8dc:	9906      	ldr	r1, [sp, #24]
   1b8de:	9200      	str	r2, [sp, #0]
   1b8e0:	eb01 0c03 	add.w	ip, r1, r3
   1b8e4:	9301      	str	r3, [sp, #4]
   1b8e6:	4671      	mov	r1, lr
                             ++ker_w, kernel += output_ch)
                        {
                            int32_t in_val = input[in_idx + ker_w * input_ch] + input_offset;
   1b8e8:	f99c 3000 	ldrsb.w	r3, [ip]
                            out_buff[0] += in_val * kernel[0];
   1b8ec:	f991 2000 	ldrsb.w	r2, [r1]
                            int32_t in_val = input[in_idx + ker_w * input_ch] + input_offset;
   1b8f0:	4443      	add	r3, r8
                            out_buff[0] += in_val * kernel[0];
   1b8f2:	fb03 7702 	mla	r7, r3, r2, r7
                            out_buff[1] += in_val * kernel[1];
   1b8f6:	f991 2001 	ldrsb.w	r2, [r1, #1]
   1b8fa:	fb03 6602 	mla	r6, r3, r2, r6
                            out_buff[2] += in_val * kernel[2];
   1b8fe:	f991 2002 	ldrsb.w	r2, [r1, #2]
                             ++ker_w, kernel += output_ch)
   1b902:	3001      	adds	r0, #1
                            out_buff[2] += in_val * kernel[2];
   1b904:	fb03 5502 	mla	r5, r3, r2, r5
                            out_buff[3] += in_val * kernel[3];
   1b908:	f991 2003 	ldrsb.w	r2, [r1, #3]
                        for (int32_t ker_w = ker_w_start; ker_w < MIN(kernel_x, input_x - in_w);
   1b90c:	4558      	cmp	r0, fp
   1b90e:	44d4      	add	ip, sl
                            out_buff[3] += in_val * kernel[3];
   1b910:	fb03 4402 	mla	r4, r3, r2, r4
                             ++ker_w, kernel += output_ch)
   1b914:	4449      	add	r1, r9
                        for (int32_t ker_w = ker_w_start; ker_w < MIN(kernel_x, input_x - in_w);
   1b916:	d1e7      	bne.n	1b8e8 <depthwise_conv_s8_mult_4+0x164>
   1b918:	e9dd 2300 	ldrd	r2, r3, [sp]
                    for (int32_t ker_h = ker_h_start; ker_h < MIN(kernel_y, input_y - in_h); ++ker_h)
   1b91c:	9903      	ldr	r1, [sp, #12]
   1b91e:	448e      	add	lr, r1
   1b920:	9904      	ldr	r1, [sp, #16]
   1b922:	440b      	add	r3, r1
   1b924:	9902      	ldr	r1, [sp, #8]
   1b926:	3201      	adds	r2, #1
   1b928:	428a      	cmp	r2, r1
   1b92a:	d1d2      	bne.n	1b8d2 <depthwise_conv_s8_mult_4+0x14e>
   1b92c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
                    res = vmaxq_s32(res, vdupq_n_s32(output_activation_min));
                    res = vminq_s32(res, vdupq_n_s32(output_activation_max));
                    vstrbq_s32(output, res);
                    output += 4;
#else
                    out_buff[0] = arm_nn_requantize(out_buff[0], *output_mult++, *output_shift++);
   1b92e:	9b07      	ldr	r3, [sp, #28]
   1b930:	f853 1c10 	ldr.w	r1, [r3, #-16]
   1b934:	f852 3c10 	ldr.w	r3, [r2, #-16]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b938:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
   1b93c:	4087      	lsls	r7, r0
   1b93e:	4249      	negs	r1, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b940:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
   1b944:	f04f 0e00 	mov.w	lr, #0
   1b948:	fbc7 0e03 	smlal	r0, lr, r7, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b94c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b950:	2301      	movs	r3, #1
   1b952:	408b      	lsls	r3, r1
    result = (int32_t)(mult.long_long >> 31);
   1b954:	0fc0      	lsrs	r0, r0, #31
   1b956:	ea40 004e 	orr.w	r0, r0, lr, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b95a:	3b01      	subs	r3, #1
    if (result < 0)
   1b95c:	fa50 fe01 	asrs.w	lr, r0, r1
    int32_t remainder = remainder_mask & dividend;
   1b960:	ea00 0703 	and.w	r7, r0, r3
    q31_t threshold = remainder_mask >> 1;
   1b964:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
   1b968:	bf48      	it	mi
   1b96a:	3301      	addmi	r3, #1
    if (remainder > threshold)
   1b96c:	429f      	cmp	r7, r3
                    out_buff[1] = arm_nn_requantize(out_buff[1], *output_mult++, *output_shift++);
   1b96e:	9b07      	ldr	r3, [sp, #28]
   1b970:	f853 1c0c 	ldr.w	r1, [r3, #-12]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b974:	f852 3c0c 	ldr.w	r3, [r2, #-12]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b978:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
   1b97c:	fa06 f600 	lsl.w	r6, r6, r0
   1b980:	f1c1 0100 	rsb	r1, r1, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b984:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
   1b988:	f04f 0700 	mov.w	r7, #0
   1b98c:	fbc6 0703 	smlal	r0, r7, r6, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b990:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b994:	f04f 0301 	mov.w	r3, #1
   1b998:	fa03 f301 	lsl.w	r3, r3, r1
    result = (int32_t)(mult.long_long >> 31);
   1b99c:	ea4f 70d0 	mov.w	r0, r0, lsr #31
   1b9a0:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b9a4:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
    int32_t remainder = remainder_mask & dividend;
   1b9a8:	ea00 0603 	and.w	r6, r0, r3
        result++;
   1b9ac:	bfc8      	it	gt
   1b9ae:	f10e 0e01 	addgt.w	lr, lr, #1
    q31_t threshold = remainder_mask >> 1;
   1b9b2:	105b      	asrs	r3, r3, #1
    if (result < 0)
   1b9b4:	fa50 f701 	asrs.w	r7, r0, r1
        threshold++;
   1b9b8:	bf48      	it	mi
   1b9ba:	3301      	addmi	r3, #1
    if (remainder > threshold)
   1b9bc:	429e      	cmp	r6, r3
                    out_buff[2] = arm_nn_requantize(out_buff[2], *output_mult++, *output_shift++);
   1b9be:	9b07      	ldr	r3, [sp, #28]
   1b9c0:	f853 1c08 	ldr.w	r1, [r3, #-8]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b9c4:	f852 3c08 	ldr.w	r3, [r2, #-8]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b9c8:	ea21 76e1 	bic.w	r6, r1, r1, asr #31
   1b9cc:	fa05 f606 	lsl.w	r6, r5, r6
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b9d0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
   1b9d4:	f04f 0500 	mov.w	r5, #0
   1b9d8:	fbc6 0503 	smlal	r0, r5, r6, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b9dc:	f1c1 0100 	rsb	r1, r1, #0
   1b9e0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    result = (int32_t)(mult.long_long >> 31);
   1b9e4:	ea4f 73d0 	mov.w	r3, r0, lsr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b9e8:	f04f 0001 	mov.w	r0, #1
   1b9ec:	fa00 f001 	lsl.w	r0, r0, r1
    result = (int32_t)(mult.long_long >> 31);
   1b9f0:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b9f4:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
    int32_t remainder = remainder_mask & dividend;
   1b9f8:	ea03 0600 	and.w	r6, r3, r0
        result++;
   1b9fc:	bfc8      	it	gt
   1b9fe:	3701      	addgt	r7, #1
    q31_t threshold = remainder_mask >> 1;
   1ba00:	1040      	asrs	r0, r0, #1
    if (result < 0)
   1ba02:	fa53 f501 	asrs.w	r5, r3, r1
                    out_buff[3] = arm_nn_requantize(out_buff[3], *output_mult++, *output_shift++);
   1ba06:	9b07      	ldr	r3, [sp, #28]
        threshold++;
   1ba08:	bf48      	it	mi
   1ba0a:	3001      	addmi	r0, #1
    if (remainder > threshold)
   1ba0c:	4286      	cmp	r6, r0
   1ba0e:	f853 0c04 	ldr.w	r0, [r3, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1ba12:	f852 3c04 	ldr.w	r3, [r2, #-4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1ba16:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
   1ba1a:	fa04 f401 	lsl.w	r4, r4, r1
   1ba1e:	f1c0 0000 	rsb	r0, r0, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1ba22:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
   1ba26:	f04f 0600 	mov.w	r6, #0
   1ba2a:	fbc3 1604 	smlal	r1, r6, r3, r4
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1ba2e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1ba32:	f04f 0301 	mov.w	r3, #1
   1ba36:	fa03 f300 	lsl.w	r3, r3, r0
    result = (int32_t)(mult.long_long >> 31);
   1ba3a:	ea4f 71d1 	mov.w	r1, r1, lsr #31
   1ba3e:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1ba42:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
    int32_t remainder = remainder_mask & dividend;
   1ba46:	ea01 0403 	and.w	r4, r1, r3
        result++;
   1ba4a:	bfc8      	it	gt
   1ba4c:	3501      	addgt	r5, #1
    q31_t threshold = remainder_mask >> 1;
   1ba4e:	105b      	asrs	r3, r3, #1
    if (result < 0)
   1ba50:	4101      	asrs	r1, r0
        threshold++;
   1ba52:	bf48      	it	mi
   1ba54:	3301      	addmi	r3, #1
    if (remainder > threshold)
   1ba56:	429c      	cmp	r4, r3

                    out_buff[0] += output_offset;
   1ba58:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
   1ba5a:	eb03 000e 	add.w	r0, r3, lr
                    out_buff[1] += output_offset;
                    out_buff[2] += output_offset;
                    out_buff[3] += output_offset;

                    out_buff[0] = MIN(MAX(out_buff[0], output_activation_min), output_activation_max);
   1ba5e:	9b3d      	ldr	r3, [sp, #244]	@ 0xf4
        result++;
   1ba60:	bfc8      	it	gt
   1ba62:	3101      	addgt	r1, #1
   1ba64:	4298      	cmp	r0, r3
   1ba66:	bfb8      	it	lt
   1ba68:	4618      	movlt	r0, r3
                    out_buff[1] += output_offset;
   1ba6a:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
   1ba6c:	19dc      	adds	r4, r3, r7
                    out_buff[0] = MIN(MAX(out_buff[0], output_activation_min), output_activation_max);
   1ba6e:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
   1ba70:	4298      	cmp	r0, r3
   1ba72:	bfa8      	it	ge
   1ba74:	4618      	movge	r0, r3
                    out_buff[1] = MIN(MAX(out_buff[1], output_activation_min), output_activation_max);
   1ba76:	9b3d      	ldr	r3, [sp, #244]	@ 0xf4
   1ba78:	429c      	cmp	r4, r3
   1ba7a:	bfb8      	it	lt
   1ba7c:	461c      	movlt	r4, r3
                    out_buff[2] += output_offset;
   1ba7e:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
   1ba80:	442b      	add	r3, r5
                    out_buff[1] = MIN(MAX(out_buff[1], output_activation_min), output_activation_max);
   1ba82:	9d3e      	ldr	r5, [sp, #248]	@ 0xf8
   1ba84:	42ac      	cmp	r4, r5
   1ba86:	bfa8      	it	ge
   1ba88:	462c      	movge	r4, r5
                    out_buff[2] = MIN(MAX(out_buff[2], output_activation_min), output_activation_max);
   1ba8a:	9d3d      	ldr	r5, [sp, #244]	@ 0xf4
   1ba8c:	42ab      	cmp	r3, r5
   1ba8e:	bfb8      	it	lt
   1ba90:	462b      	movlt	r3, r5
                    out_buff[3] += output_offset;
   1ba92:	9d3b      	ldr	r5, [sp, #236]	@ 0xec
   1ba94:	4429      	add	r1, r5
                    out_buff[2] = MIN(MAX(out_buff[2], output_activation_min), output_activation_max);
   1ba96:	9d3e      	ldr	r5, [sp, #248]	@ 0xf8
   1ba98:	42ab      	cmp	r3, r5
   1ba9a:	bfa8      	it	ge
   1ba9c:	462b      	movge	r3, r5
                    out_buff[3] = MIN(MAX(out_buff[3], output_activation_min), output_activation_max);
   1ba9e:	9d3d      	ldr	r5, [sp, #244]	@ 0xf4
   1baa0:	42a9      	cmp	r1, r5
   1baa2:	bfb8      	it	lt
   1baa4:	4629      	movlt	r1, r5
   1baa6:	9d3e      	ldr	r5, [sp, #248]	@ 0xf8
   1baa8:	42a9      	cmp	r1, r5
   1baaa:	bfa8      	it	ge
   1baac:	4629      	movge	r1, r5
                for (int mult_tile = 0; mult_tile < ch_mult; mult_tile += 4)
   1baae:	9d07      	ldr	r5, [sp, #28]
   1bab0:	3510      	adds	r5, #16
   1bab2:	9507      	str	r5, [sp, #28]

                    *output++ = (int8_t)out_buff[0];
   1bab4:	2500      	movs	r5, #0
   1bab6:	f360 0507 	bfi	r5, r0, #0, #8
   1baba:	f364 250f 	bfi	r5, r4, #8, #8
   1babe:	f363 4517 	bfi	r5, r3, #16, #8
   1bac2:	f361 651f 	bfi	r5, r1, #24, #8
   1bac6:	9b08      	ldr	r3, [sp, #32]
   1bac8:	9936      	ldr	r1, [sp, #216]	@ 0xd8
   1baca:	50cd      	str	r5, [r1, r3]
                for (int mult_tile = 0; mult_tile < ch_mult; mult_tile += 4)
   1bacc:	992e      	ldr	r1, [sp, #184]	@ 0xb8
   1bace:	3304      	adds	r3, #4
   1bad0:	4299      	cmp	r1, r3
   1bad2:	f102 0210 	add.w	r2, r2, #16
   1bad6:	9308      	str	r3, [sp, #32]
   1bad8:	f73f aee6 	bgt.w	1b8a8 <depthwise_conv_s8_mult_4+0x124>
   1badc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
   1bade:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
   1bae0:	9f31      	ldr	r7, [sp, #196]	@ 0xc4
   1bae2:	e9dd 1e1e 	ldrd	r1, lr, [sp, #120]	@ 0x78
   1bae6:	4413      	add	r3, r2
   1bae8:	930f      	str	r3, [sp, #60]	@ 0x3c
   1baea:	4496      	add	lr, r2
   1baec:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
   1baee:	9a18      	ldr	r2, [sp, #96]	@ 0x60
   1baf0:	e9dd 0620 	ldrd	r0, r6, [sp, #128]	@ 0x80
   1baf4:	4413      	add	r3, r2
   1baf6:	9336      	str	r3, [sp, #216]	@ 0xd8
                 ++in_ch, out_ch += ch_mult)
   1baf8:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
            for (int32_t in_ch = 0, out_ch = 0, ker_w_start = MAX(0, -in_w); out_ch < output_ch;
   1bafa:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
                 ++in_ch, out_ch += ch_mult)
   1bafc:	4419      	add	r1, r3
            for (int32_t in_ch = 0, out_ch = 0, ker_w_start = MAX(0, -in_w); out_ch < output_ch;
   1bafe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   1bb00:	3301      	adds	r3, #1
   1bb02:	930b      	str	r3, [sp, #44]	@ 0x2c
   1bb04:	9b11      	ldr	r3, [sp, #68]	@ 0x44
   1bb06:	4589      	cmp	r9, r1
   1bb08:	4413      	add	r3, r2
   1bb0a:	9311      	str	r3, [sp, #68]	@ 0x44
   1bb0c:	f73f aeb7 	bgt.w	1b87e <depthwise_conv_s8_mult_4+0xfa>
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
   1bb10:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
   1bb12:	9915      	ldr	r1, [sp, #84]	@ 0x54
   1bb14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
   1bb16:	1a80      	subs	r0, r0, r2
   1bb18:	9a12      	ldr	r2, [sp, #72]	@ 0x48
   1bb1a:	440a      	add	r2, r1
   1bb1c:	9212      	str	r2, [sp, #72]	@ 0x48
   1bb1e:	9933      	ldr	r1, [sp, #204]	@ 0xcc
   1bb20:	9a10      	ldr	r2, [sp, #64]	@ 0x40
   1bb22:	1a52      	subs	r2, r2, r1
   1bb24:	9210      	str	r2, [sp, #64]	@ 0x40
   1bb26:	9a39      	ldr	r2, [sp, #228]	@ 0xe4
   1bb28:	3301      	adds	r3, #1
   1bb2a:	429a      	cmp	r2, r3
   1bb2c:	9313      	str	r3, [sp, #76]	@ 0x4c
   1bb2e:	f47f ae86 	bne.w	1b83e <depthwise_conv_s8_mult_4+0xba>
   1bb32:	e9dd 421b 	ldrd	r4, r2, [sp, #108]	@ 0x6c
   1bb36:	46be      	mov	lr, r7
   1bb38:	991d      	ldr	r1, [sp, #116]	@ 0x74
   1bb3a:	4637      	mov	r7, r6
   1bb3c:	9e34      	ldr	r6, [sp, #208]	@ 0xd0
   1bb3e:	46d3      	mov	fp, sl
   1bb40:	46ca      	mov	sl, r9
   1bb42:	46c1      	mov	r9, r8
    for (int32_t in_h = -pad_y, out_h = 0; out_h < output_y; in_h += stride_y, ++out_h)
   1bb44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   1bb46:	4433      	add	r3, r6
   1bb48:	930e      	str	r3, [sp, #56]	@ 0x38
   1bb4a:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
   1bb4c:	3401      	adds	r4, #1
   1bb4e:	42a3      	cmp	r3, r4
   1bb50:	eba1 0106 	sub.w	r1, r1, r6
   1bb54:	eba2 0206 	sub.w	r2, r2, r6
   1bb58:	f47f ae46 	bne.w	1b7e8 <depthwise_conv_s8_mult_4+0x64>
#endif
                }
            }
        }
    }
}
   1bb5c:	b023      	add	sp, #140	@ 0x8c
   1bb5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    int32_t out_buff[4] = {0, 0, 0, 0};
   1bb62:	9f09      	ldr	r7, [sp, #36]	@ 0x24
   1bb64:	463c      	mov	r4, r7
   1bb66:	463d      	mov	r5, r7
   1bb68:	463e      	mov	r6, r7
   1bb6a:	e6a7      	b.n	1b8bc <depthwise_conv_s8_mult_4+0x138>

0001bb6c <arm_depthwise_conv_s8>:
                                          const q7_t *kernel,
                                          const cmsis_nn_dims *bias_dims,
                                          const int32_t *bias,
                                          const cmsis_nn_dims *output_dims,
                                          q7_t *output)
{
   1bb6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bb70:	469c      	mov	ip, r3
   1bb72:	b0cb      	sub	sp, #300	@ 0x12c
   1bb74:	4691      	mov	r9, r2
    const uint16_t dilation_y = dw_conv_params->dilation.h;

    (void)bias_dims;
    (void)ctx;

    if (dw_conv_params->ch_mult % 4 == 0 && input_dims->n == 1 && dw_conv_params->dilation.w == 1 &&
   1bb76:	f8dc 0000 	ldr.w	r0, [ip]
{
   1bb7a:	9f55      	ldr	r7, [sp, #340]	@ 0x154
   1bb7c:	f8dd 8164 	ldr.w	r8, [sp, #356]	@ 0x164
    if (dw_conv_params->ch_mult % 4 == 0 && input_dims->n == 1 && dw_conv_params->dilation.w == 1 &&
   1bb80:	9017      	str	r0, [sp, #92]	@ 0x5c
                                 dw_conv_params->padding.h,
                                 dw_conv_params->stride.w,
                                 dw_conv_params->stride.h,
                                 bias,
                                 output,
                                 quant_params->shift,
   1bb82:	f8d9 0004 	ldr.w	r0, [r9, #4]
   1bb86:	9024      	str	r0, [sp, #144]	@ 0x90
                                 filter_dims->h,
   1bb88:	e9d7 7a01 	ldrd	r7, sl, [r7, #4]
                                 quant_params->multiplier,
   1bb8c:	f8d9 0000 	ldr.w	r0, [r9]
   1bb90:	9025      	str	r0, [sp, #148]	@ 0x94
{
   1bb92:	460c      	mov	r4, r1
                                 output_dims->w,
   1bb94:	f8d8 0008 	ldr.w	r0, [r8, #8]
   1bb98:	9026      	str	r0, [sp, #152]	@ 0x98
                                 output_dims->h,
   1bb9a:	f8d8 0004 	ldr.w	r0, [r8, #4]
                                 filter_dims->h,
   1bb9e:	971a      	str	r7, [sp, #104]	@ 0x68
                                 output_dims->h,
   1bba0:	901d      	str	r0, [sp, #116]	@ 0x74
                                 dw_conv_params->padding.w,
   1bba2:	6967      	ldr	r7, [r4, #20]
                                 dw_conv_params->output_offset,
   1bba4:	6860      	ldr	r0, [r4, #4]
                                 dw_conv_params->padding.w,
   1bba6:	971b      	str	r7, [sp, #108]	@ 0x6c
    const uint16_t dilation_y = dw_conv_params->dilation.h;
   1bba8:	e9d1 5607 	ldrd	r5, r6, [r1, #28]
                                 dw_conv_params->padding.h,
   1bbac:	69a7      	ldr	r7, [r4, #24]
                                 dw_conv_params->output_offset,
   1bbae:	9027      	str	r0, [sp, #156]	@ 0x9c
                                 dw_conv_params->input_offset,
   1bbb0:	6820      	ldr	r0, [r4, #0]
    if (dw_conv_params->ch_mult % 4 == 0 && input_dims->n == 1 && dw_conv_params->dilation.w == 1 &&
   1bbb2:	688b      	ldr	r3, [r1, #8]
                                 dw_conv_params->padding.h,
   1bbb4:	9723      	str	r7, [sp, #140]	@ 0x8c
                                 input_dims->h,
   1bbb6:	e9dc 2101 	ldrd	r2, r1, [ip, #4]
                                 dw_conv_params->stride.h,
   1bbba:	e9d4 b703 	ldrd	fp, r7, [r4, #12]
                                 input_dims->c,
   1bbbe:	f8dc c00c 	ldr.w	ip, [ip, #12]
                                 dw_conv_params->input_offset,
   1bbc2:	9028      	str	r0, [sp, #160]	@ 0xa0
                                 dw_conv_params->activation.min,
   1bbc4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
   1bbc6:	9029      	str	r0, [sp, #164]	@ 0xa4
                                 dw_conv_params->activation.max);
   1bbc8:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
   1bbca:	902a      	str	r0, [sp, #168]	@ 0xa8
    const uint16_t dilation_x = dw_conv_params->dilation.w;
   1bbcc:	b2a8      	uxth	r0, r5
   1bbce:	902d      	str	r0, [sp, #180]	@ 0xb4
    const uint16_t dilation_y = dw_conv_params->dilation.h;
   1bbd0:	b2b0      	uxth	r0, r6
   1bbd2:	902e      	str	r0, [sp, #184]	@ 0xb8
    if (dw_conv_params->ch_mult % 4 == 0 && input_dims->n == 1 && dw_conv_params->dilation.w == 1 &&
   1bbd4:	0798      	lsls	r0, r3, #30
   1bbd6:	d103      	bne.n	1bbe0 <arm_depthwise_conv_s8+0x74>
   1bbd8:	9817      	ldr	r0, [sp, #92]	@ 0x5c
   1bbda:	2801      	cmp	r0, #1
   1bbdc:	f000 81b8 	beq.w	1bf50 <arm_depthwise_conv_s8+0x3e4>
    }
    else
    {
        depthwise_conv_s8_generic(input,
   1bbe0:	f8bd 005c 	ldrh.w	r0, [sp, #92]	@ 0x5c
   1bbe4:	9017      	str	r0, [sp, #92]	@ 0x5c
   1bbe6:	fa1f fb8b 	uxth.w	fp, fp
   1bbea:	b2bc      	uxth	r4, r7
    for (i_batch = 0; i_batch < input_batches; i_batch++)
   1bbec:	2800      	cmp	r0, #0
   1bbee:	f000 819c 	beq.w	1bf2a <arm_depthwise_conv_s8+0x3be>
   1bbf2:	fa1f f78c 	uxth.w	r7, ip
   1bbf6:	9716      	str	r7, [sp, #88]	@ 0x58
   1bbf8:	fa1f fe82 	uxth.w	lr, r2
                                int32_t ker_idx_0 = (i_ker_y * kernel_x + i_ker_x) * (input_ch * ch_mult) + idx_out_ch;
   1bbfc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
   1bbfe:	981b      	ldr	r0, [sp, #108]	@ 0x6c
   1bc00:	fa1f f983 	uxth.w	r9, r3
   1bc04:	b28b      	uxth	r3, r1
   1bc06:	fa1f f18a 	uxth.w	r1, sl
   1bc0a:	931c      	str	r3, [sp, #112]	@ 0x70
   1bc0c:	9119      	str	r1, [sp, #100]	@ 0x64
   1bc0e:	b2a9      	uxth	r1, r5
   1bc10:	fb09 f502 	mul.w	r5, r9, r2
   1bc14:	951b      	str	r5, [sp, #108]	@ 0x6c
        input += (input_x * input_y * input_ch);
   1bc16:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
   1bc18:	9115      	str	r1, [sp, #84]	@ 0x54
   1bc1a:	4243      	negs	r3, r0
   1bc1c:	b29f      	uxth	r7, r3
   1bc1e:	fb05 f30e 	mul.w	r3, r5, lr
   1bc22:	f8bd 0068 	ldrh.w	r0, [sp, #104]	@ 0x68
   1bc26:	902c      	str	r0, [sp, #176]	@ 0xb0
   1bc28:	b2b6      	uxth	r6, r6
   1bc2a:	fb02 fc03 	mul.w	ip, r2, r3
   1bc2e:	fb05 f302 	mul.w	r3, r5, r2
   1bc32:	fb06 f003 	mul.w	r0, r6, r3
   1bc36:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
   1bc38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
   1bc3a:	9034      	str	r0, [sp, #208]	@ 0xd0
   1bc3c:	ea4f 0089 	mov.w	r0, r9, lsl #2
   1bc40:	9035      	str	r0, [sp, #212]	@ 0xd4
   1bc42:	fb03 f005 	mul.w	r0, r3, r5
   1bc46:	9b15      	ldr	r3, [sp, #84]	@ 0x54
   1bc48:	9033      	str	r0, [sp, #204]	@ 0xcc
   1bc4a:	fb03 f302 	mul.w	r3, r3, r2
    int i_out = 0;
   1bc4e:	f04f 0a00 	mov.w	sl, #0
   1bc52:	f8bd 1074 	ldrh.w	r1, [sp, #116]	@ 0x74
   1bc56:	9817      	ldr	r0, [sp, #92]	@ 0x5c
   1bc58:	9330      	str	r3, [sp, #192]	@ 0xc0
   1bc5a:	46d8      	mov	r8, fp
   1bc5c:	9618      	str	r6, [sp, #96]	@ 0x60
    for (i_batch = 0; i_batch < input_batches; i_batch++)
   1bc5e:	4652      	mov	r2, sl
   1bc60:	4625      	mov	r5, r4
   1bc62:	46cb      	mov	fp, r9
   1bc64:	4673      	mov	r3, lr
        for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
   1bc66:	2900      	cmp	r1, #0
   1bc68:	f000 8158 	beq.w	1bf1c <arm_depthwise_conv_s8+0x3b0>
   1bc6c:	9c23      	ldr	r4, [sp, #140]	@ 0x8c
    const q31_t remainder_mask = (1 << exponent) - 1;
   1bc6e:	921a      	str	r2, [sp, #104]	@ 0x68
   1bc70:	4264      	negs	r4, r4
   1bc72:	fa1f fe84 	uxth.w	lr, r4
   1bc76:	f8bd 4098 	ldrh.w	r4, [sp, #152]	@ 0x98
   1bc7a:	9422      	str	r4, [sp, #136]	@ 0x88
   1bc7c:	2400      	movs	r4, #0
   1bc7e:	9420      	str	r4, [sp, #128]	@ 0x80
   1bc80:	461a      	mov	r2, r3
   1bc82:	903d      	str	r0, [sp, #244]	@ 0xf4
   1bc84:	4664      	mov	r4, ip
   1bc86:	4673      	mov	r3, lr
            for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
   1bc88:	9822      	ldr	r0, [sp, #136]	@ 0x88
            const int16_t base_idx_y = (i_out_y * stride_y) - pad_y;
   1bc8a:	b21e      	sxth	r6, r3
   1bc8c:	962f      	str	r6, [sp, #188]	@ 0xbc
            for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
   1bc8e:	2800      	cmp	r0, #0
   1bc90:	f000 8138 	beq.w	1bf04 <arm_depthwise_conv_s8+0x398>
   1bc94:	2e00      	cmp	r6, #0
                            ker_y_start = MAX(0, -base_idx_y);
   1bc96:	f1c6 0c00 	rsb	ip, r6, #0
   1bc9a:	bfd4      	ite	le
   1bc9c:	4660      	movle	r0, ip
   1bc9e:	2000      	movgt	r0, #0
   1bca0:	9032      	str	r0, [sp, #200]	@ 0xc8
   1bca2:	1b90      	subs	r0, r2, r6
   1bca4:	902b      	str	r0, [sp, #172]	@ 0xac
                            const int32_t start_y_max = (-base_idx_y + dilation_y - 1) / dilation_y;
   1bca6:	9818      	ldr	r0, [sp, #96]	@ 0x60
                            ker_y_end = MIN(kernel_y, input_y - base_idx_y);
   1bca8:	f8dd e068 	ldr.w	lr, [sp, #104]	@ 0x68
   1bcac:	953e      	str	r5, [sp, #248]	@ 0xf8
                            const int32_t start_y_max = (-base_idx_y + dilation_y - 1) / dilation_y;
   1bcae:	eba0 0c06 	sub.w	ip, r0, r6
   1bcb2:	f10c 36ff 	add.w	r6, ip, #4294967295	@ 0xffffffff
   1bcb6:	963c      	str	r6, [sp, #240]	@ 0xf0
                            ker_y_end = MIN(kernel_y, input_y - base_idx_y);
   1bcb8:	e9dd 062b 	ldrd	r0, r6, [sp, #172]	@ 0xac
   1bcbc:	4286      	cmp	r6, r0
   1bcbe:	bfa8      	it	ge
   1bcc0:	4606      	movge	r6, r0
   1bcc2:	963b      	str	r6, [sp, #236]	@ 0xec
   1bcc4:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
   1bcc8:	46bc      	mov	ip, r7
            for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
   1bcca:	f04f 0900 	mov.w	r9, #0
                            ker_y_end = MIN(kernel_y, input_y - base_idx_y);
   1bcce:	f8cd b05c 	str.w	fp, [sp, #92]	@ 0x5c
   1bcd2:	4616      	mov	r6, r2
   1bcd4:	46a2      	mov	sl, r4
   1bcd6:	460d      	mov	r5, r1
   1bcd8:	4618      	mov	r0, r3
                for (int i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
   1bcda:	9b16      	ldr	r3, [sp, #88]	@ 0x58
                const int16_t base_idx_x = (i_out_x * stride_x) - pad_x;
   1bcdc:	fa0f fb8c 	sxth.w	fp, ip
                for (int i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
   1bce0:	2b00      	cmp	r3, #0
   1bce2:	f000 80fa 	beq.w	1beda <arm_depthwise_conv_s8+0x36e>
                            const int32_t start_x_max = (-base_idx_x + dilation_x - 1) / dilation_x;
   1bce6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
   1bce8:	f1bb 0f00 	cmp.w	fp, #0
                            ker_x_start = MAX(0, -base_idx_x);
   1bcec:	f1cb 0100 	rsb	r1, fp, #0
   1bcf0:	bfd4      	ite	le
   1bcf2:	460b      	movle	r3, r1
   1bcf4:	2300      	movgt	r3, #0
                            const int32_t start_x_max = (-base_idx_x + dilation_x - 1) / dilation_x;
   1bcf6:	eba2 040b 	sub.w	r4, r2, fp
   1bcfa:	1e62      	subs	r2, r4, #1
   1bcfc:	9331      	str	r3, [sp, #196]	@ 0xc4
   1bcfe:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
   1bd00:	923a      	str	r2, [sp, #232]	@ 0xe8
                            ker_x_end = MIN(kernel_x, input_x - base_idx_x);
   1bd02:	9a19      	ldr	r2, [sp, #100]	@ 0x64
   1bd04:	eba3 030b 	sub.w	r3, r3, fp
   1bd08:	429a      	cmp	r2, r3
                            ker_x_start = MAX(0, -base_idx_x);
   1bd0a:	f04f 0100 	mov.w	r1, #0
                            ker_x_end = MIN(kernel_x, input_x - base_idx_x);
   1bd0e:	bfa8      	it	ge
   1bd10:	461a      	movge	r2, r3
   1bd12:	e9cd 893f 	strd	r8, r9, [sp, #252]	@ 0xfc
   1bd16:	9239      	str	r2, [sp, #228]	@ 0xe4
   1bd18:	9338      	str	r3, [sp, #224]	@ 0xe0
                            ker_x_start = MAX(0, -base_idx_x);
   1bd1a:	f06f 0403 	mvn.w	r4, #3
   1bd1e:	460a      	mov	r2, r1
   1bd20:	4689      	mov	r9, r1
                    for (int i_ch_mult = 0; i_ch_mult < ch_mult; i_ch_mult++)
   1bd22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
   1bd24:	2b00      	cmp	r3, #0
   1bd26:	f000 80cf 	beq.w	1bec8 <arm_depthwise_conv_s8+0x35c>
   1bd2a:	991a      	ldr	r1, [sp, #104]	@ 0x68
                            const int32_t end_min_x = (input_x - base_idx_x + dilation_x - 1) / dilation_x;
   1bd2c:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
                    for (int i_ch_mult = 0; i_ch_mult < ch_mult; i_ch_mult++)
   1bd2e:	46c8      	mov	r8, r9
   1bd30:	f101 39ff 	add.w	r9, r1, #4294967295	@ 0xffffffff
   1bd34:	995a      	ldr	r1, [sp, #360]	@ 0x168
   1bd36:	4449      	add	r1, r9
   1bd38:	911f      	str	r1, [sp, #124]	@ 0x7c
                            const int32_t end_min_x = (input_x - base_idx_x + dilation_x - 1) / dilation_x;
   1bd3a:	9915      	ldr	r1, [sp, #84]	@ 0x54
   1bd3c:	eb01 0903 	add.w	r9, r1, r3
   1bd40:	f109 33ff 	add.w	r3, r9, #4294967295	@ 0xffffffff
   1bd44:	9336      	str	r3, [sp, #216]	@ 0xd8
   1bd46:	9b25      	ldr	r3, [sp, #148]	@ 0x94
                            const int32_t end_min_y = (input_y - base_idx_y + dilation_y - 1) / dilation_y;
   1bd48:	992b      	ldr	r1, [sp, #172]	@ 0xac
   1bd4a:	4423      	add	r3, r4
   1bd4c:	931e      	str	r3, [sp, #120]	@ 0x78
   1bd4e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
   1bd50:	4423      	add	r3, r4
   1bd52:	931d      	str	r3, [sp, #116]	@ 0x74
   1bd54:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
   1bd56:	eb03 0908 	add.w	r9, r3, r8
   1bd5a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
   1bd5c:	e9cd ae41 	strd	sl, lr, [sp, #260]	@ 0x104
   1bd60:	e9cd 6543 	strd	r6, r5, [sp, #268]	@ 0x10c
   1bd64:	e9cd 0445 	strd	r0, r4, [sp, #276]	@ 0x114
   1bd68:	440b      	add	r3, r1
   1bd6a:	9337      	str	r3, [sp, #220]	@ 0xdc
                        if (dilation_x > 1)
   1bd6c:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   1bd6e:	2b01      	cmp	r3, #1
   1bd70:	f240 80df 	bls.w	1bf32 <arm_depthwise_conv_s8+0x3c6>
                            const int32_t start_x_max = (-base_idx_x + dilation_x - 1) / dilation_x;
   1bd74:	9b15      	ldr	r3, [sp, #84]	@ 0x54
   1bd76:	993a      	ldr	r1, [sp, #232]	@ 0xe8
                            const int32_t end_min_x = (input_x - base_idx_x + dilation_x - 1) / dilation_x;
   1bd78:	9836      	ldr	r0, [sp, #216]	@ 0xd8
                            const int32_t start_x_max = (-base_idx_x + dilation_x - 1) / dilation_x;
   1bd7a:	fb91 f1f3 	sdiv	r1, r1, r3
                            const int32_t end_min_x = (input_x - base_idx_x + dilation_x - 1) / dilation_x;
   1bd7e:	fb90 f4f3 	sdiv	r4, r0, r3
                            ker_x_end = MIN(kernel_x, end_min_x);
   1bd82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
   1bd84:	429c      	cmp	r4, r3
   1bd86:	bfa8      	it	ge
   1bd88:	461c      	movge	r4, r3
                        if (dilation_y > 1)
   1bd8a:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
                            ker_x_end = MIN(kernel_x, end_min_x);
   1bd8c:	9421      	str	r4, [sp, #132]	@ 0x84
                        if (dilation_y > 1)
   1bd8e:	2b01      	cmp	r3, #1
                            ker_x_start = MAX(0, start_x_max);
   1bd90:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
                        if (dilation_y > 1)
   1bd94:	f240 80d4 	bls.w	1bf40 <arm_depthwise_conv_s8+0x3d4>
                            ker_y_end = MIN(kernel_y, end_min_y);
   1bd98:	9d2c      	ldr	r5, [sp, #176]	@ 0xb0
                            const int32_t end_min_y = (input_y - base_idx_y + dilation_y - 1) / dilation_y;
   1bd9a:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
   1bd9c:	1e58      	subs	r0, r3, #1
   1bd9e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
   1bda0:	fb90 f0f3 	sdiv	r0, r0, r3
                            ker_y_end = MIN(kernel_y, end_min_y);
   1bda4:	42a8      	cmp	r0, r5
   1bda6:	bfa8      	it	ge
   1bda8:	4628      	movge	r0, r5
                            const int32_t start_y_max = (-base_idx_y + dilation_y - 1) / dilation_y;
   1bdaa:	9d3c      	ldr	r5, [sp, #240]	@ 0xf0
   1bdac:	fb95 f3f3 	sdiv	r3, r5, r3
                        if (bias)
   1bdb0:	9d58      	ldr	r5, [sp, #352]	@ 0x160
                            ker_y_start = MAX(0, start_y_max);
   1bdb2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
                        if (bias)
   1bdb6:	2d00      	cmp	r5, #0
   1bdb8:	f000 80c8 	beq.w	1bf4c <arm_depthwise_conv_s8+0x3e0>
                            acc_0 = bias[idx_out_ch];
   1bdbc:	f855 5028 	ldr.w	r5, [r5, r8, lsl #2]
                        for (int i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
   1bdc0:	4298      	cmp	r0, r3
   1bdc2:	dd40      	ble.n	1be46 <arm_depthwise_conv_s8+0x2da>
   1bdc4:	9c18      	ldr	r4, [sp, #96]	@ 0x60
   1bdc6:	9e2f      	ldr	r6, [sp, #188]	@ 0xbc
   1bdc8:	fb04 6a03 	mla	sl, r4, r3, r6
   1bdcc:	9c15      	ldr	r4, [sp, #84]	@ 0x54
   1bdce:	fb04 be01 	mla	lr, r4, r1, fp
   1bdd2:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
   1bdd4:	fb04 ee0a 	mla	lr, r4, sl, lr
   1bdd8:	9c16      	ldr	r4, [sp, #88]	@ 0x58
   1bdda:	fb04 2e0e 	mla	lr, r4, lr, r2
   1bdde:	9c54      	ldr	r4, [sp, #336]	@ 0x150
   1bde0:	eb04 0a0e 	add.w	sl, r4, lr
   1bde4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
   1bde6:	fb04 1e03 	mla	lr, r4, r3, r1
   1bdea:	9c1b      	ldr	r4, [sp, #108]	@ 0x6c
   1bdec:	fb04 8e0e 	mla	lr, r4, lr, r8
   1bdf0:	9c56      	ldr	r4, [sp, #344]	@ 0x158
   1bdf2:	44a6      	add	lr, r4
   1bdf4:	9c21      	ldr	r4, [sp, #132]	@ 0x84
   1bdf6:	e9cd b247 	strd	fp, r2, [sp, #284]	@ 0x11c
   1bdfa:	46c3      	mov	fp, r8
   1bdfc:	46e0      	mov	r8, ip
                            for (int i_ker_x = ker_x_start; i_ker_x < ker_x_end; i_ker_x++)
   1bdfe:	428c      	cmp	r4, r1
   1be00:	dd15      	ble.n	1be2e <arm_depthwise_conv_s8+0x2c2>
   1be02:	46f4      	mov	ip, lr
   1be04:	4656      	mov	r6, sl
   1be06:	460a      	mov	r2, r1
   1be08:	9321      	str	r3, [sp, #132]	@ 0x84
   1be0a:	9149      	str	r1, [sp, #292]	@ 0x124
   1be0c:	9930      	ldr	r1, [sp, #192]	@ 0xc0
                                acc_0 += (input[idx_0] + input_offset) * kernel[ker_idx_0];
   1be0e:	f996 3000 	ldrsb.w	r3, [r6]
                            for (int i_ker_x = ker_x_start; i_ker_x < ker_x_end; i_ker_x++)
   1be12:	440e      	add	r6, r1
                                acc_0 += (input[idx_0] + input_offset) * kernel[ker_idx_0];
   1be14:	9928      	ldr	r1, [sp, #160]	@ 0xa0
   1be16:	440b      	add	r3, r1
   1be18:	f99c 1000 	ldrsb.w	r1, [ip]
                            for (int i_ker_x = ker_x_start; i_ker_x < ker_x_end; i_ker_x++)
   1be1c:	3201      	adds	r2, #1
                                acc_0 += (input[idx_0] + input_offset) * kernel[ker_idx_0];
   1be1e:	fb01 5503 	mla	r5, r1, r3, r5
                            for (int i_ker_x = ker_x_start; i_ker_x < ker_x_end; i_ker_x++)
   1be22:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
   1be24:	42a2      	cmp	r2, r4
   1be26:	449c      	add	ip, r3
   1be28:	d1f0      	bne.n	1be0c <arm_depthwise_conv_s8+0x2a0>
   1be2a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
   1be2c:	9949      	ldr	r1, [sp, #292]	@ 0x124
                        for (int i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
   1be2e:	9a34      	ldr	r2, [sp, #208]	@ 0xd0
   1be30:	3301      	adds	r3, #1
   1be32:	4492      	add	sl, r2
   1be34:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
   1be36:	4283      	cmp	r3, r0
   1be38:	4496      	add	lr, r2
   1be3a:	d1e0      	bne.n	1bdfe <arm_depthwise_conv_s8+0x292>
   1be3c:	46c4      	mov	ip, r8
   1be3e:	9a48      	ldr	r2, [sp, #288]	@ 0x120
   1be40:	46d8      	mov	r8, fp
   1be42:	f8dd b11c 	ldr.w	fp, [sp, #284]	@ 0x11c
                        acc_0 = arm_nn_requantize(acc_0, output_mult[idx_out_ch], output_shift[idx_out_ch]);
   1be46:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1be48:	991e      	ldr	r1, [sp, #120]	@ 0x78
   1be4a:	f853 0f04 	ldr.w	r0, [r3, #4]!
   1be4e:	931d      	str	r3, [sp, #116]	@ 0x74
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1be50:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1be54:	f851 3f04 	ldr.w	r3, [r1, #4]!
   1be58:	911e      	str	r1, [sp, #120]	@ 0x78
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1be5a:	fa05 f404 	lsl.w	r4, r5, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1be5e:	2100      	movs	r1, #0
   1be60:	f04f 4580 	mov.w	r5, #1073741824	@ 0x40000000
   1be64:	fbc4 5103 	smlal	r5, r1, r4, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1be68:	4240      	negs	r0, r0
    result = (int32_t)(mult.long_long >> 31);
   1be6a:	0feb      	lsrs	r3, r5, #31
   1be6c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1be70:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1be74:	2101      	movs	r1, #1
   1be76:	4081      	lsls	r1, r0
   1be78:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
   1be7a:	ea03 0401 	and.w	r4, r3, r1
    if (result < 0)
   1be7e:	4103      	asrs	r3, r0
    q31_t threshold = remainder_mask >> 1;
   1be80:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
   1be84:	bf48      	it	mi
   1be86:	3101      	addmi	r1, #1
    if (remainder > threshold)
   1be88:	428c      	cmp	r4, r1
                        acc_0 += output_offset;
   1be8a:	9927      	ldr	r1, [sp, #156]	@ 0x9c
        result++;
   1be8c:	bfc8      	it	gt
   1be8e:	3301      	addgt	r3, #1
   1be90:	440b      	add	r3, r1
                        acc_0 = MAX(acc_0, output_activation_min);
   1be92:	9929      	ldr	r1, [sp, #164]	@ 0xa4
   1be94:	428b      	cmp	r3, r1
   1be96:	bfb8      	it	lt
   1be98:	460b      	movlt	r3, r1
                        acc_0 = MIN(acc_0, output_activation_max);
   1be9a:	992a      	ldr	r1, [sp, #168]	@ 0xa8
   1be9c:	428b      	cmp	r3, r1
   1be9e:	bfa8      	it	ge
   1bea0:	460b      	movge	r3, r1
                        output[i_out++] = acc_0;
   1bea2:	991f      	ldr	r1, [sp, #124]	@ 0x7c
                    for (int i_ch_mult = 0; i_ch_mult < ch_mult; i_ch_mult++)
   1bea4:	f108 0801 	add.w	r8, r8, #1
                        output[i_out++] = acc_0;
   1bea8:	f801 3f01 	strb.w	r3, [r1, #1]!
                    for (int i_ch_mult = 0; i_ch_mult < ch_mult; i_ch_mult++)
   1beac:	45c1      	cmp	r9, r8
                        output[i_out++] = acc_0;
   1beae:	911f      	str	r1, [sp, #124]	@ 0x7c
                    for (int i_ch_mult = 0; i_ch_mult < ch_mult; i_ch_mult++)
   1beb0:	f47f af5c 	bne.w	1bd6c <arm_depthwise_conv_s8+0x200>
   1beb4:	991a      	ldr	r1, [sp, #104]	@ 0x68
   1beb6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
   1beb8:	e9dd ae41 	ldrd	sl, lr, [sp, #260]	@ 0x104
   1bebc:	e9dd 6543 	ldrd	r6, r5, [sp, #268]	@ 0x10c
   1bec0:	e9dd 0445 	ldrd	r0, r4, [sp, #276]	@ 0x114
   1bec4:	4419      	add	r1, r3
   1bec6:	911a      	str	r1, [sp, #104]	@ 0x68
                for (int i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
   1bec8:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
   1beca:	441c      	add	r4, r3
   1becc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
   1bece:	3201      	adds	r2, #1
   1bed0:	4293      	cmp	r3, r2
   1bed2:	f47f af26 	bne.w	1bd22 <arm_depthwise_conv_s8+0x1b6>
   1bed6:	e9dd 893f 	ldrd	r8, r9, [sp, #252]	@ 0xfc
            for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
   1beda:	9b22      	ldr	r3, [sp, #136]	@ 0x88
   1bedc:	f109 0901 	add.w	r9, r9, #1
   1bee0:	eb08 010c 	add.w	r1, r8, ip
   1bee4:	4599      	cmp	r9, r3
   1bee6:	fa1f fc81 	uxth.w	ip, r1
   1beea:	f47f aef6 	bne.w	1bcda <arm_depthwise_conv_s8+0x16e>
   1beee:	4629      	mov	r1, r5
   1bef0:	f8dd b05c 	ldr.w	fp, [sp, #92]	@ 0x5c
   1bef4:	9d3e      	ldr	r5, [sp, #248]	@ 0xf8
   1bef6:	4654      	mov	r4, sl
   1bef8:	4632      	mov	r2, r6
   1befa:	f8dd a068 	ldr.w	sl, [sp, #104]	@ 0x68
   1befe:	f8cd e068 	str.w	lr, [sp, #104]	@ 0x68
   1bf02:	4603      	mov	r3, r0
        for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
   1bf04:	9e20      	ldr	r6, [sp, #128]	@ 0x80
   1bf06:	3601      	adds	r6, #1
   1bf08:	442b      	add	r3, r5
   1bf0a:	428e      	cmp	r6, r1
   1bf0c:	9620      	str	r6, [sp, #128]	@ 0x80
   1bf0e:	b29b      	uxth	r3, r3
   1bf10:	f47f aeba 	bne.w	1bc88 <arm_depthwise_conv_s8+0x11c>
   1bf14:	4613      	mov	r3, r2
   1bf16:	983d      	ldr	r0, [sp, #244]	@ 0xf4
   1bf18:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
   1bf1a:	46a4      	mov	ip, r4
        input += (input_x * input_y * input_ch);
   1bf1c:	9c54      	ldr	r4, [sp, #336]	@ 0x150
    for (i_batch = 0; i_batch < input_batches; i_batch++)
   1bf1e:	3201      	adds	r2, #1
        input += (input_x * input_y * input_ch);
   1bf20:	4464      	add	r4, ip
    for (i_batch = 0; i_batch < input_batches; i_batch++)
   1bf22:	4282      	cmp	r2, r0
        input += (input_x * input_y * input_ch);
   1bf24:	9454      	str	r4, [sp, #336]	@ 0x150
    for (i_batch = 0; i_batch < input_batches; i_batch++)
   1bf26:	f47f ae9e 	bne.w	1bc66 <arm_depthwise_conv_s8+0xfa>
                                  dilation_y);
    }

    /* Return to application */
    return ARM_CMSIS_NN_SUCCESS;
}
   1bf2a:	2000      	movs	r0, #0
   1bf2c:	b04b      	add	sp, #300	@ 0x12c
   1bf2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            ker_x_end = MIN(kernel_x, input_x - base_idx_x);
   1bf32:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
   1bf34:	9321      	str	r3, [sp, #132]	@ 0x84
                        if (dilation_y > 1)
   1bf36:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
                            ker_x_start = MAX(0, -base_idx_x);
   1bf38:	9931      	ldr	r1, [sp, #196]	@ 0xc4
                        if (dilation_y > 1)
   1bf3a:	2b01      	cmp	r3, #1
   1bf3c:	f63f af2c 	bhi.w	1bd98 <arm_depthwise_conv_s8+0x22c>
                        if (bias)
   1bf40:	9d58      	ldr	r5, [sp, #352]	@ 0x160
                            ker_y_end = MIN(kernel_y, input_y - base_idx_y);
   1bf42:	983b      	ldr	r0, [sp, #236]	@ 0xec
                            ker_y_start = MAX(0, -base_idx_y);
   1bf44:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
                        if (bias)
   1bf46:	2d00      	cmp	r5, #0
   1bf48:	f47f af38 	bne.w	1bdbc <arm_depthwise_conv_s8+0x250>
                        int32_t acc_0 = 0;
   1bf4c:	9d58      	ldr	r5, [sp, #352]	@ 0x160
   1bf4e:	e737      	b.n	1bdc0 <arm_depthwise_conv_s8+0x254>
    if (dw_conv_params->ch_mult % 4 == 0 && input_dims->n == 1 && dw_conv_params->dilation.w == 1 &&
   1bf50:	2d01      	cmp	r5, #1
   1bf52:	d003      	beq.n	1bf5c <arm_depthwise_conv_s8+0x3f0>
        depthwise_conv_s8_generic(input,
   1bf54:	fa1f fb8b 	uxth.w	fp, fp
   1bf58:	b2bc      	uxth	r4, r7
    for (i_batch = 0; i_batch < input_batches; i_batch++)
   1bf5a:	e64a      	b.n	1bbf2 <arm_depthwise_conv_s8+0x86>
    if (dw_conv_params->ch_mult % 4 == 0 && input_dims->n == 1 && dw_conv_params->dilation.w == 1 &&
   1bf5c:	2e01      	cmp	r6, #1
   1bf5e:	d1f9      	bne.n	1bf54 <arm_depthwise_conv_s8+0x3e8>
        depthwise_conv_s8_mult_4(input,
   1bf60:	9824      	ldr	r0, [sp, #144]	@ 0x90
   1bf62:	900b      	str	r0, [sp, #44]	@ 0x2c
   1bf64:	985a      	ldr	r0, [sp, #360]	@ 0x168
   1bf66:	900a      	str	r0, [sp, #40]	@ 0x28
   1bf68:	9302      	str	r3, [sp, #8]
   1bf6a:	9858      	ldr	r0, [sp, #352]	@ 0x160
   1bf6c:	9b56      	ldr	r3, [sp, #344]	@ 0x158
   1bf6e:	9300      	str	r3, [sp, #0]
   1bf70:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
   1bf72:	9312      	str	r3, [sp, #72]	@ 0x48
   1bf74:	e9cd 7008 	strd	r7, r0, [sp, #32]
   1bf78:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
   1bf7a:	9823      	ldr	r0, [sp, #140]	@ 0x8c
   1bf7c:	9006      	str	r0, [sp, #24]
   1bf7e:	9311      	str	r3, [sp, #68]	@ 0x44
   1bf80:	981b      	ldr	r0, [sp, #108]	@ 0x6c
   1bf82:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
   1bf84:	9005      	str	r0, [sp, #20]
   1bf86:	9310      	str	r3, [sp, #64]	@ 0x40
   1bf88:	981a      	ldr	r0, [sp, #104]	@ 0x68
   1bf8a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
   1bf8c:	930f      	str	r3, [sp, #60]	@ 0x3c
   1bf8e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
   1bf90:	930e      	str	r3, [sp, #56]	@ 0x38
   1bf92:	e9cd a003 	strd	sl, r0, [sp, #12]
   1bf96:	9b26      	ldr	r3, [sp, #152]	@ 0x98
   1bf98:	930d      	str	r3, [sp, #52]	@ 0x34
   1bf9a:	9b25      	ldr	r3, [sp, #148]	@ 0x94
   1bf9c:	f8cd b01c 	str.w	fp, [sp, #28]
   1bfa0:	930c      	str	r3, [sp, #48]	@ 0x30
   1bfa2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1bfa6:	9301      	str	r3, [sp, #4]
   1bfa8:	9854      	ldr	r0, [sp, #336]	@ 0x150
   1bfaa:	4663      	mov	r3, ip
   1bfac:	f7ff fbea 	bl	1b784 <depthwise_conv_s8_mult_4>
   1bfb0:	e7bb      	b.n	1bf2a <arm_depthwise_conv_s8+0x3be>
   1bfb2:	bf00      	nop

0001bfb4 <arm_depthwise_conv_s8_opt>:
                                              const q7_t *kernel,
                                              const cmsis_nn_dims *bias_dims,
                                              const int32_t *bias,
                                              const cmsis_nn_dims *output_dims,
                                              q7_t *output)
{
   1bfb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bfb8:	b0b9      	sub	sp, #228	@ 0xe4
   1bfba:	461d      	mov	r5, r3
   1bfbc:	460b      	mov	r3, r1
   1bfbe:	9947      	ldr	r1, [sp, #284]	@ 0x11c

    const int32_t input_ch = input_dims->c;
   1bfc0:	68ec      	ldr	r4, [r5, #12]
    const int32_t output_ch = output_dims->c;
   1bfc2:	f8d1 c00c 	ldr.w	ip, [r1, #12]
{
   1bfc6:	9e43      	ldr	r6, [sp, #268]	@ 0x10c

    /* Check depth multiplier is 1 */
    if (input_ch != output_ch)
   1bfc8:	4564      	cmp	r4, ip
   1bfca:	f040 8308 	bne.w	1c5de <arm_depthwise_conv_s8_opt+0x62a>
    {
        return ARM_CMSIS_NN_ARG_ERROR;
    }

    if (ctx->buf == NULL && arm_depthwise_conv_s8_opt_get_buffer_size(input_dims, filter_dims) > 0)
   1bfce:	6800      	ldr	r0, [r0, #0]
{
#if defined(ARM_MATH_MVEI)
    (void)input_dims;
    return (4 * CH_IN_BLOCK_MVE * filter_dims->w * filter_dims->h) * (int32_t)sizeof(int8_t);
#elif defined(ARM_MATH_DSP)
    return (input_dims->c * filter_dims->w * filter_dims->h) * sizeof(int16_t);
   1bfd0:	68b7      	ldr	r7, [r6, #8]
   1bfd2:	6876      	ldr	r6, [r6, #4]
    if (ctx->buf == NULL && arm_depthwise_conv_s8_opt_get_buffer_size(input_dims, filter_dims) > 0)
   1bfd4:	9008      	str	r0, [sp, #32]
    return (input_dims->c * filter_dims->w * filter_dims->h) * sizeof(int16_t);
   1bfd6:	9710      	str	r7, [sp, #64]	@ 0x40
   1bfd8:	961c      	str	r6, [sp, #112]	@ 0x70
    if (ctx->buf == NULL && arm_depthwise_conv_s8_opt_get_buffer_size(input_dims, filter_dims) > 0)
   1bfda:	2800      	cmp	r0, #0
   1bfdc:	f000 82f7 	beq.w	1c5ce <arm_depthwise_conv_s8_opt+0x61a>
    const int32_t output_x = output_dims->w;
   1bfe0:	e9d1 a101 	ldrd	sl, r1, [r1, #4]
    const int32_t input_y = input_dims->h;
   1bfe4:	f8d5 9004 	ldr.w	r9, [r5, #4]
    const int32_t output_x = output_dims->w;
   1bfe8:	911f      	str	r1, [sp, #124]	@ 0x7c
    const int32_t input_x = input_dims->w;
   1bfea:	68a9      	ldr	r1, [r5, #8]
    const int32_t *output_shift = quant_params->shift;
   1bfec:	6855      	ldr	r5, [r2, #4]
    const int32_t *output_mult = quant_params->multiplier;
   1bfee:	6812      	ldr	r2, [r2, #0]
   1bff0:	921e      	str	r2, [sp, #120]	@ 0x78
    const int32_t output_offset = dw_conv_params->output_offset;
   1bff2:	685a      	ldr	r2, [r3, #4]
    const int32_t input_x = input_dims->w;
   1bff4:	9121      	str	r1, [sp, #132]	@ 0x84
    const int32_t output_offset = dw_conv_params->output_offset;
   1bff6:	9205      	str	r2, [sp, #20]
    const int32_t pad_x = dw_conv_params->padding.w;
   1bff8:	6959      	ldr	r1, [r3, #20]
    const int32_t input_offset = dw_conv_params->input_offset;
   1bffa:	681a      	ldr	r2, [r3, #0]
    const int32_t pad_x = dw_conv_params->padding.w;
   1bffc:	9131      	str	r1, [sp, #196]	@ 0xc4
    const int32_t stride_y = dw_conv_params->stride.h;
   1bffe:	e9d3 7003 	ldrd	r7, r0, [r3, #12]
    const int32_t pad_y = dw_conv_params->padding.h;
   1c002:	6999      	ldr	r1, [r3, #24]
    const int32_t input_offset = dw_conv_params->input_offset;
   1c004:	9224      	str	r2, [sp, #144]	@ 0x90
    for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
   1c006:	f1ba 0f00 	cmp.w	sl, #0
    const int32_t output_activation_min = dw_conv_params->activation.min;
   1c00a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
    const int32_t output_activation_max = dw_conv_params->activation.max;
   1c00c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    const int32_t *output_shift = quant_params->shift;
   1c00e:	951d      	str	r5, [sp, #116]	@ 0x74
    const int32_t output_activation_min = dw_conv_params->activation.min;
   1c010:	9206      	str	r2, [sp, #24]
    const int32_t output_activation_max = dw_conv_params->activation.max;
   1c012:	9307      	str	r3, [sp, #28]
    for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
   1c014:	f340 82aa 	ble.w	1c56c <arm_depthwise_conv_s8_opt+0x5b8>
                memset(&col_buffer[index], 0, (kernel_x * input_ch) * ker_y_start * sizeof(q15_t));
   1c018:	9b10      	ldr	r3, [sp, #64]	@ 0x40
                uint16_t col_count = (kernel_x * kernel_y) / 2;
   1c01a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
                memset(&col_buffer[index], 0, (kernel_x * input_ch) * ker_y_start * sizeof(q15_t));
   1c01c:	fb04 f303 	mul.w	r3, r4, r3
            row_count = output_ch / 4;
   1c020:	f1bc 0f00 	cmp.w	ip, #0
                memset(&col_buffer[index], 0, (kernel_x * input_ch) * ker_y_start * sizeof(q15_t));
   1c024:	932c      	str	r3, [sp, #176]	@ 0xb0
            row_count = output_ch / 4;
   1c026:	4663      	mov	r3, ip
   1c028:	bfb8      	it	lt
   1c02a:	f10c 0303 	addlt.w	r3, ip, #3
   1c02e:	f3c3 068f 	ubfx	r6, r3, #2, #16
   1c032:	424b      	negs	r3, r1
                uint16_t col_count = (kernel_x * kernel_y) / 2;
   1c034:	9910      	ldr	r1, [sp, #64]	@ 0x40
            row_count = output_ch / 4;
   1c036:	9620      	str	r6, [sp, #128]	@ 0x80
   1c038:	b29b      	uxth	r3, r3
   1c03a:	9301      	str	r3, [sp, #4]
                uint16_t col_count = (kernel_x * kernel_y) / 2;
   1c03c:	fb01 f302 	mul.w	r3, r1, r2
   1c040:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
        const int16_t base_idx_y = (i_out_y * stride_y) - pad_y;
   1c044:	fa1f fe80 	uxth.w	lr, r0
                uint16_t col_count = (kernel_x * kernel_y) / 2;
   1c048:	f3c3 004f 	ubfx	r0, r3, #1, #16
   1c04c:	1e73      	subs	r3, r6, #1
   1c04e:	b29b      	uxth	r3, r3
   1c050:	1e42      	subs	r2, r0, #1
   1c052:	009d      	lsls	r5, r3, #2
   1c054:	9013      	str	r0, [sp, #76]	@ 0x4c
   1c056:	b290      	uxth	r0, r2
   1c058:	1c5a      	adds	r2, r3, #1
                col_count = (kernel_x * kernel_y) & 0x1;
   1c05a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
   1c05c:	9523      	str	r5, [sp, #140]	@ 0x8c
   1c05e:	fb11 f303 	smulbb	r3, r1, r3
   1c062:	3901      	subs	r1, #1
   1c064:	fb04 f101 	mul.w	r1, r4, r1
   1c068:	9115      	str	r1, [sp, #84]	@ 0x54
   1c06a:	00b1      	lsls	r1, r6, #2
   1c06c:	b28e      	uxth	r6, r1
   1c06e:	b299      	uxth	r1, r3
   1c070:	f003 0301 	and.w	r3, r3, #1
   1c074:	9314      	str	r3, [sp, #80]	@ 0x50
   1c076:	9b21      	ldr	r3, [sp, #132]	@ 0x84
   1c078:	9129      	str	r1, [sp, #164]	@ 0xa4
                        memset(&col_buffer[index], 0, input_ch * sizeof(q15_t));
   1c07a:	ea4f 0b44 	mov.w	fp, r4, lsl #1
                    col_pos += input_ch << 1;
   1c07e:	00a5      	lsls	r5, r4, #2
   1c080:	fb04 f303 	mul.w	r3, r4, r3
   1c084:	9312      	str	r3, [sp, #72]	@ 0x48
   1c086:	fb00 b30b 	mla	r3, r0, fp, fp
   1c08a:	fb00 5005 	mla	r0, r0, r5, r5
   1c08e:	9016      	str	r0, [sp, #88]	@ 0x58
   1c090:	981e      	ldr	r0, [sp, #120]	@ 0x78
   1c092:	9901      	ldr	r1, [sp, #4]
   1c094:	9504      	str	r5, [sp, #16]
   1c096:	eb00 1002 	add.w	r0, r0, r2, lsl #4
   1c09a:	9027      	str	r0, [sp, #156]	@ 0x9c
   1c09c:	981d      	ldr	r0, [sp, #116]	@ 0x74
   1c09e:	9628      	str	r6, [sp, #160]	@ 0xa0
   1c0a0:	eb00 1002 	add.w	r0, r0, r2, lsl #4
   1c0a4:	0092      	lsls	r2, r2, #2
   1c0a6:	463d      	mov	r5, r7
    for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
   1c0a8:	2600      	movs	r6, #0
   1c0aa:	4657      	mov	r7, sl
   1c0ac:	9317      	str	r3, [sp, #92]	@ 0x5c
   1c0ae:	46da      	mov	sl, fp
   1c0b0:	9026      	str	r0, [sp, #152]	@ 0x98
   1c0b2:	46cb      	mov	fp, r9
   1c0b4:	9225      	str	r2, [sp, #148]	@ 0x94
   1c0b6:	46f0      	mov	r8, lr
   1c0b8:	46a1      	mov	r9, r4
        for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
   1c0ba:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
        const int16_t base_idx_y = (i_out_y * stride_y) - pad_y;
   1c0bc:	b20a      	sxth	r2, r1
        for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
   1c0be:	2b00      	cmp	r3, #0
        const int16_t base_idx_y = (i_out_y * stride_y) - pad_y;
   1c0c0:	921b      	str	r2, [sp, #108]	@ 0x6c
        for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
   1c0c2:	f340 824c 	ble.w	1c55e <arm_depthwise_conv_s8_opt+0x5aa>
                memset(&col_buffer[index], 0, (kernel_x * input_ch) * ker_y_start * sizeof(q15_t));
   1c0c6:	982c      	ldr	r0, [sp, #176]	@ 0xb0
        for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
   1c0c8:	912a      	str	r1, [sp, #168]	@ 0xa8
            const int ker_y_start = MAX(0, -base_idx_y);
   1c0ca:	4253      	negs	r3, r2
                memset(&col_buffer[index], 0, (kernel_x * input_ch) * ker_y_start * sizeof(q15_t));
   1c0cc:	fb00 f003 	mul.w	r0, r0, r3
            const int ker_y_start = MAX(0, -base_idx_y);
   1c0d0:	9330      	str	r3, [sp, #192]	@ 0xc0
   1c0d2:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
                memset(&col_buffer[index], 0, (kernel_x * input_ch) * ker_y_start * sizeof(q15_t));
   1c0d4:	902e      	str	r0, [sp, #184]	@ 0xb8
   1c0d6:	425b      	negs	r3, r3
   1c0d8:	b29b      	uxth	r3, r3
   1c0da:	9318      	str	r3, [sp, #96]	@ 0x60
            const int ker_y_end = MIN(kernel_y, input_y - base_idx_y);
   1c0dc:	ebab 0302 	sub.w	r3, fp, r2
   1c0e0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
   1c0e2:	4293      	cmp	r3, r2
   1c0e4:	bfa8      	it	ge
   1c0e6:	4613      	movge	r3, r2
   1c0e8:	932d      	str	r3, [sp, #180]	@ 0xb4
   1c0ea:	ebab 0301 	sub.w	r3, fp, r1
   1c0ee:	4293      	cmp	r3, r2
   1c0f0:	bfa8      	it	ge
   1c0f2:	4613      	movge	r3, r2
   1c0f4:	932b      	str	r3, [sp, #172]	@ 0xac
                memset(&col_buffer[index], 0, (kernel_x * input_ch) * ker_y_start * sizeof(q15_t));
   1c0f6:	0043      	lsls	r3, r0, #1
   1c0f8:	932f      	str	r3, [sp, #188]	@ 0xbc
            const int16_t base_idx_x = (i_out_x * stride_x) - pad_x;
   1c0fa:	b2ab      	uxth	r3, r5
   1c0fc:	9322      	str	r3, [sp, #136]	@ 0x88
        for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
   1c0fe:	e9cd cb32 	strd	ip, fp, [sp, #200]	@ 0xc8
            row_count = output_ch & 0x3;
   1c102:	f00c 0303 	and.w	r3, ip, #3
        for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
   1c106:	e9cd 5734 	strd	r5, r7, [sp, #208]	@ 0xd0
   1c10a:	e9cd 6836 	strd	r6, r8, [sp, #216]	@ 0xd8
            row_count = output_ch & 0x3;
   1c10e:	931a      	str	r3, [sp, #104]	@ 0x68
        for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
   1c110:	2300      	movs	r3, #0
   1c112:	9319      	str	r3, [sp, #100]	@ 0x64
            const int16_t base_idx_x = (i_out_x * stride_x) - pad_x;
   1c114:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	@ 0x60
   1c118:	930a      	str	r3, [sp, #40]	@ 0x28
            const int ker_y_start = MAX(0, -base_idx_y);
   1c11a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
   1c11c:	2b00      	cmp	r3, #0
   1c11e:	f340 8231 	ble.w	1c584 <arm_depthwise_conv_s8_opt+0x5d0>
            const int ker_y_end = MIN(kernel_y, input_y - base_idx_y);
   1c122:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	@ 0xa8
            const int ker_y_start = MAX(0, -base_idx_y);
   1c126:	2100      	movs	r1, #0
            const int ker_y_end = MIN(kernel_y, input_y - base_idx_y);
   1c128:	9309      	str	r3, [sp, #36]	@ 0x24
            int32_t index = 0;
   1c12a:	4688      	mov	r8, r1
            for (int i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
   1c12c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   1c12e:	4299      	cmp	r1, r3
   1c130:	da43      	bge.n	1c1ba <arm_depthwise_conv_s8_opt+0x206>
   1c132:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   1c134:	9821      	ldr	r0, [sp, #132]	@ 0x84
   1c136:	9c42      	ldr	r4, [sp, #264]	@ 0x108
   1c138:	440a      	add	r2, r1
   1c13a:	fb00 3202 	mla	r2, r0, r2, r3
   1c13e:	fb09 4202 	mla	r2, r9, r2, r4
   1c142:	9c10      	ldr	r4, [sp, #64]	@ 0x40
   1c144:	191f      	adds	r7, r3, r4
                        arm_q7_to_q15_with_offset((q7_t *)input + (idx_y * input_x + idx_x) * input_ch,
   1c146:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	@ 0x90
   1c14a:	9301      	str	r3, [sp, #4]
   1c14c:	4683      	mov	fp, r0
   1c14e:	4643      	mov	r3, r8
   1c150:	4690      	mov	r8, r2
                for (int i_ker_x = 0; i_ker_x < kernel_x; i_ker_x++)
   1c152:	9a10      	ldr	r2, [sp, #64]	@ 0x40
   1c154:	2a00      	cmp	r2, #0
   1c156:	dd29      	ble.n	1c1ac <arm_depthwise_conv_s8_opt+0x1f8>
   1c158:	9a08      	ldr	r2, [sp, #32]
   1c15a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
   1c15c:	e9cd 8102 	strd	r8, r1, [sp, #8]
   1c160:	4646      	mov	r6, r8
   1c162:	eb02 0543 	add.w	r5, r2, r3, lsl #1
   1c166:	4698      	mov	r8, r3
   1c168:	e006      	b.n	1c178 <arm_depthwise_conv_s8_opt+0x1c4>
   1c16a:	3401      	adds	r4, #1
                        memset(&col_buffer[index], 0, input_ch * sizeof(q15_t));
   1c16c:	f00a feb6 	bl	26edc <memset>
                for (int i_ker_x = 0; i_ker_x < kernel_x; i_ker_x++)
   1c170:	42bc      	cmp	r4, r7
   1c172:	4455      	add	r5, sl
   1c174:	444e      	add	r6, r9
   1c176:	d012      	beq.n	1c19e <arm_depthwise_conv_s8_opt+0x1ea>
                    if (idx_x < 0 || idx_x >= input_x)
   1c178:	2c00      	cmp	r4, #0
                        memset(&col_buffer[index], 0, input_ch * sizeof(q15_t));
   1c17a:	4652      	mov	r2, sl
   1c17c:	f04f 0100 	mov.w	r1, #0
   1c180:	4628      	mov	r0, r5
                    if (idx_x < 0 || idx_x >= input_x)
   1c182:	dbf2      	blt.n	1c16a <arm_depthwise_conv_s8_opt+0x1b6>
   1c184:	45a3      	cmp	fp, r4
   1c186:	ddf0      	ble.n	1c16a <arm_depthwise_conv_s8_opt+0x1b6>
                        arm_q7_to_q15_with_offset((q7_t *)input + (idx_y * input_x + idx_x) * input_ch,
   1c188:	4629      	mov	r1, r5
   1c18a:	4630      	mov	r0, r6
   1c18c:	9b01      	ldr	r3, [sp, #4]
   1c18e:	464a      	mov	r2, r9
                for (int i_ker_x = 0; i_ker_x < kernel_x; i_ker_x++)
   1c190:	3401      	adds	r4, #1
                        arm_q7_to_q15_with_offset((q7_t *)input + (idx_y * input_x + idx_x) * input_ch,
   1c192:	f001 fbd1 	bl	1d938 <arm_q7_to_q15_with_offset>
                for (int i_ker_x = 0; i_ker_x < kernel_x; i_ker_x++)
   1c196:	42bc      	cmp	r4, r7
   1c198:	4455      	add	r5, sl
   1c19a:	444e      	add	r6, r9
   1c19c:	d1ec      	bne.n	1c178 <arm_depthwise_conv_s8_opt+0x1c4>
   1c19e:	4643      	mov	r3, r8
   1c1a0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
   1c1a2:	9903      	ldr	r1, [sp, #12]
   1c1a4:	f8dd 8008 	ldr.w	r8, [sp, #8]
   1c1a8:	444b      	add	r3, r9
   1c1aa:	4413      	add	r3, r2
            for (int i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
   1c1ac:	9a12      	ldr	r2, [sp, #72]	@ 0x48
   1c1ae:	4490      	add	r8, r2
   1c1b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
   1c1b2:	3101      	adds	r1, #1
   1c1b4:	428a      	cmp	r2, r1
   1c1b6:	d1cc      	bne.n	1c152 <arm_depthwise_conv_s8_opt+0x19e>
   1c1b8:	4698      	mov	r8, r3
            if (diff != 0)
   1c1ba:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
   1c1bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
   1c1be:	1a9a      	subs	r2, r3, r2
   1c1c0:	f040 81ed 	bne.w	1c59e <arm_depthwise_conv_s8_opt+0x5ea>
            while (row_count)
   1c1c4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
   1c1c6:	2b00      	cmp	r3, #0
   1c1c8:	f000 81f7 	beq.w	1c5ba <arm_depthwise_conv_s8_opt+0x606>
   1c1cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
    const q31_t remainder_mask = (1 << exponent) - 1;
   1c1ce:	f8cd a008 	str.w	sl, [sp, #8]
   1c1d2:	f103 0208 	add.w	r2, r3, #8
   1c1d6:	9b48      	ldr	r3, [sp, #288]	@ 0x120
   1c1d8:	f8cd 900c 	str.w	r9, [sp, #12]
   1c1dc:	4413      	add	r3, r2
   1c1de:	9311      	str	r3, [sp, #68]	@ 0x44
   1c1e0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
            bias = bias_start_pos;
   1c1e2:	9a46      	ldr	r2, [sp, #280]	@ 0x118
   1c1e4:	f103 0510 	add.w	r5, r3, #16
   1c1e8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
   1c1ea:	f103 0110 	add.w	r1, r3, #16
   1c1ee:	9b48      	ldr	r3, [sp, #288]	@ 0x120
            row_shift = 0;
   1c1f0:	f04f 0e00 	mov.w	lr, #0
   1c1f4:	f103 0c04 	add.w	ip, r3, #4
   1c1f8:	4692      	mov	sl, r2
   1c1fa:	46f3      	mov	fp, lr
   1c1fc:	4662      	mov	r2, ip
   1c1fe:	46ac      	mov	ip, r5
   1c200:	460d      	mov	r5, r1
                if (bias)
   1c202:	f1ba 0f00 	cmp.w	sl, #0
   1c206:	f000 81b5 	beq.w	1c574 <arm_depthwise_conv_s8_opt+0x5c0>
                    sum_4 = *bias++;
   1c20a:	e9da e302 	ldrd	lr, r3, [sl, #8]
                    sum_2 = *bias++;
   1c20e:	e9da 9800 	ldrd	r9, r8, [sl]
                    sum_4 = *bias++;
   1c212:	9301      	str	r3, [sp, #4]
   1c214:	f10a 0a10 	add.w	sl, sl, #16
                q15_t *col_pos = col_buffer_start + row_shift;
   1c218:	9b08      	ldr	r3, [sp, #32]
                while (col_count)
   1c21a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
                q15_t *col_pos = col_buffer_start + row_shift;
   1c21c:	eb03 064b 	add.w	r6, r3, fp, lsl #1
                const q7_t *row_pos = kernel + row_shift;
   1c220:	9b44      	ldr	r3, [sp, #272]	@ 0x110
                row_shift += 4;
   1c222:	f10b 0104 	add.w	r1, fp, #4
                const q7_t *row_pos = kernel + row_shift;
   1c226:	445b      	add	r3, fp
                row_shift += 4;
   1c228:	fa1f fb81 	uxth.w	fp, r1
                while (col_count)
   1c22c:	2800      	cmp	r0, #0
   1c22e:	d04e      	beq.n	1c2ce <arm_depthwise_conv_s8_opt+0x31a>
   1c230:	9902      	ldr	r1, [sp, #8]
                uint16_t col_count = (kernel_x * kernel_y) / 2;
   1c232:	950f      	str	r5, [sp, #60]	@ 0x3c
   1c234:	e9cd a209 	strd	sl, r2, [sp, #36]	@ 0x24
   1c238:	e9cd b60b 	strd	fp, r6, [sp, #44]	@ 0x2c
   1c23c:	e9cd 3c0d 	strd	r3, ip, [sp, #52]	@ 0x34
   1c240:	1874      	adds	r4, r6, r1
                const q7_t *row_pos = kernel + row_shift;
   1c242:	461f      	mov	r7, r3
   1c244:	9a02      	ldr	r2, [sp, #8]
    memcpy(&val, in_q7, 4);
   1c246:	9b03      	ldr	r3, [sp, #12]
   1c248:	6839      	ldr	r1, [r7, #0]
   1c24a:	58fb      	ldr	r3, [r7, r3]
    memcpy(&val, in_q15, 4);
   1c24c:	6826      	ldr	r6, [r4, #0]
   1c24e:	eba4 0c02 	sub.w	ip, r4, r2
  return (op1 >> op2) | (op1 << (32U - op2));
   1c252:	ea4f 2531 	mov.w	r5, r1, ror #8
   1c256:	f8dc b000 	ldr.w	fp, [ip]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1c25a:	fa2f f181 	sxtb16	r1, r1
                    op_c = __PKHBT(op_b, op_a, 16);
   1c25e:	eac6 4a0b 	pkhbt	sl, r6, fp, lsl #16
  return (op1 >> op2) | (op1 << (32U - op2));
   1c262:	ea4f 2233 	mov.w	r2, r3, ror #8
                    op_a = __PKHTB(op_b, op_a, 16);
   1c266:	eac6 462b 	pkhtb	r6, r6, fp, asr #16
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1c26a:	fa2f f383 	sxtb16	r3, r3
   1c26e:	fa2f f585 	sxtb16	r5, r5
   1c272:	fa2f f282 	sxtb16	r2, r2
                    op_b = __PKHBT(ip_b2, ip_a2, 16);
   1c276:	eac3 4b01 	pkhbt	fp, r3, r1, lsl #16
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1c27a:	fb2a 990b 	smlad	r9, sl, fp, r9
                    op_b = __PKHBT(ip_b1, ip_a1, 16);
   1c27e:	eac5 4a02 	pkhbt	sl, r5, r2, lsl #16
   1c282:	fb26 880a 	smlad	r8, r6, sl, r8
   1c286:	f8dc 6004 	ldr.w	r6, [ip, #4]
                    op_b = __PKHTB(ip_a2, ip_b2, 16);
   1c28a:	eac1 4323 	pkhtb	r3, r1, r3, asr #16
   1c28e:	6861      	ldr	r1, [r4, #4]
                    op_c = __PKHBT(op_b, op_a, 16);
   1c290:	eac1 4c06 	pkhbt	ip, r1, r6, lsl #16
                    op_a = __PKHTB(op_b, op_a, 16);
   1c294:	eac1 4126 	pkhtb	r1, r1, r6, asr #16
   1c298:	fb2c ee03 	smlad	lr, ip, r3, lr
   1c29c:	9b01      	ldr	r3, [sp, #4]
                    op_b = __PKHTB(ip_a1, ip_b1, 16);
   1c29e:	eac2 4225 	pkhtb	r2, r2, r5, asr #16
   1c2a2:	fb21 3302 	smlad	r3, r1, r2, r3
                    row_pos += input_ch << 1;
   1c2a6:	9a02      	ldr	r2, [sp, #8]
   1c2a8:	9301      	str	r3, [sp, #4]
                    col_count--;
   1c2aa:	3801      	subs	r0, #1
                while (col_count)
   1c2ac:	9b04      	ldr	r3, [sp, #16]
                    col_count--;
   1c2ae:	b280      	uxth	r0, r0
                    row_pos += input_ch << 1;
   1c2b0:	4417      	add	r7, r2
                while (col_count)
   1c2b2:	441c      	add	r4, r3
   1c2b4:	2800      	cmp	r0, #0
   1c2b6:	d1c5      	bne.n	1c244 <arm_depthwise_conv_s8_opt+0x290>
   1c2b8:	e9dd 3c0d 	ldrd	r3, ip, [sp, #52]	@ 0x34
   1c2bc:	9917      	ldr	r1, [sp, #92]	@ 0x5c
   1c2be:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
   1c2c0:	e9dd b60b 	ldrd	fp, r6, [sp, #44]	@ 0x2c
   1c2c4:	440b      	add	r3, r1
   1c2c6:	e9dd a209 	ldrd	sl, r2, [sp, #36]	@ 0x24
   1c2ca:	9916      	ldr	r1, [sp, #88]	@ 0x58
   1c2cc:	440e      	add	r6, r1
                while (col_count)
   1c2ce:	9914      	ldr	r1, [sp, #80]	@ 0x50
   1c2d0:	b1a9      	cbz	r1, 1c2fe <arm_depthwise_conv_s8_opt+0x34a>
                    sum += row_pos[0] * col_pos[0];
   1c2d2:	f993 1000 	ldrsb.w	r1, [r3]
   1c2d6:	8830      	ldrh	r0, [r6, #0]
   1c2d8:	fb10 9901 	smlabb	r9, r0, r1, r9
                    sum_2 += row_pos[1] * col_pos[1];
   1c2dc:	f993 1001 	ldrsb.w	r1, [r3, #1]
   1c2e0:	8870      	ldrh	r0, [r6, #2]
   1c2e2:	fb10 8801 	smlabb	r8, r0, r1, r8
                    sum_3 += row_pos[2] * col_pos[2];
   1c2e6:	f993 1002 	ldrsb.w	r1, [r3, #2]
   1c2ea:	88b0      	ldrh	r0, [r6, #4]
                    sum_4 += row_pos[3] * col_pos[3];
   1c2ec:	f993 3003 	ldrsb.w	r3, [r3, #3]
                    sum_3 += row_pos[2] * col_pos[2];
   1c2f0:	fb10 ee01 	smlabb	lr, r0, r1, lr
                    sum_4 += row_pos[3] * col_pos[3];
   1c2f4:	9801      	ldr	r0, [sp, #4]
   1c2f6:	88f1      	ldrh	r1, [r6, #6]
   1c2f8:	fb11 0303 	smlabb	r3, r1, r3, r0
   1c2fc:	9301      	str	r3, [sp, #4]
                sum = arm_nn_requantize(sum, *output_mult++, *output_shift++);
   1c2fe:	f855 0c10 	ldr.w	r0, [r5, #-16]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1c302:	f85c 3c10 	ldr.w	r3, [ip, #-16]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1c306:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
   1c30a:	fa09 f404 	lsl.w	r4, r9, r4
   1c30e:	4240      	negs	r0, r0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1c310:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
   1c314:	2600      	movs	r6, #0
   1c316:	fbc4 1603 	smlal	r1, r6, r4, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1c31a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1c31e:	2301      	movs	r3, #1
   1c320:	4083      	lsls	r3, r0
    result = (int32_t)(mult.long_long >> 31);
   1c322:	0fc9      	lsrs	r1, r1, #31
   1c324:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1c328:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
   1c32a:	ea01 0403 	and.w	r4, r1, r3
    if (result < 0)
   1c32e:	4101      	asrs	r1, r0
    q31_t threshold = remainder_mask >> 1;
   1c330:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
   1c334:	bf48      	it	mi
   1c336:	3301      	addmi	r3, #1
    if (remainder > threshold)
   1c338:	429c      	cmp	r4, r3
                sum += output_offset;
   1c33a:	9b05      	ldr	r3, [sp, #20]
        result++;
   1c33c:	bfc8      	it	gt
   1c33e:	3101      	addgt	r1, #1
   1c340:	4419      	add	r1, r3
                sum = MAX(sum, output_activation_min);
   1c342:	9b06      	ldr	r3, [sp, #24]
   1c344:	4299      	cmp	r1, r3
   1c346:	bfb8      	it	lt
   1c348:	4619      	movlt	r1, r3
                sum = MIN(sum, output_activation_max);
   1c34a:	9b07      	ldr	r3, [sp, #28]
   1c34c:	4299      	cmp	r1, r3
   1c34e:	bfa8      	it	ge
   1c350:	4619      	movge	r1, r3
                *output++ = (q7_t)sum;
   1c352:	f802 1c04 	strb.w	r1, [r2, #-4]
                sum_2 = arm_nn_requantize(sum_2, *output_mult++, *output_shift++);
   1c356:	f855 0c0c 	ldr.w	r0, [r5, #-12]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1c35a:	f85c 3c0c 	ldr.w	r3, [ip, #-12]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1c35e:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
   1c362:	fa08 f404 	lsl.w	r4, r8, r4
   1c366:	4240      	negs	r0, r0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1c368:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
   1c36c:	2600      	movs	r6, #0
   1c36e:	fbc4 1603 	smlal	r1, r6, r4, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1c372:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1c376:	2301      	movs	r3, #1
   1c378:	4083      	lsls	r3, r0
    result = (int32_t)(mult.long_long >> 31);
   1c37a:	0fc9      	lsrs	r1, r1, #31
   1c37c:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1c380:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
   1c382:	ea01 0403 	and.w	r4, r1, r3
    if (result < 0)
   1c386:	4101      	asrs	r1, r0
    q31_t threshold = remainder_mask >> 1;
   1c388:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
   1c38c:	bf48      	it	mi
   1c38e:	3301      	addmi	r3, #1
    if (remainder > threshold)
   1c390:	429c      	cmp	r4, r3
                sum_2 += output_offset;
   1c392:	9b05      	ldr	r3, [sp, #20]
        result++;
   1c394:	bfc8      	it	gt
   1c396:	3101      	addgt	r1, #1
   1c398:	4419      	add	r1, r3
                sum_2 = MAX(sum_2, output_activation_min);
   1c39a:	9b06      	ldr	r3, [sp, #24]
   1c39c:	4299      	cmp	r1, r3
   1c39e:	bfb8      	it	lt
   1c3a0:	4619      	movlt	r1, r3
                sum_2 = MIN(sum_2, output_activation_max);
   1c3a2:	9b07      	ldr	r3, [sp, #28]
   1c3a4:	4299      	cmp	r1, r3
   1c3a6:	bfa8      	it	ge
   1c3a8:	4619      	movge	r1, r3
                *output++ = (q7_t)sum_2;
   1c3aa:	f802 1c03 	strb.w	r1, [r2, #-3]
                sum_3 = arm_nn_requantize(sum_3, *output_mult++, *output_shift++);
   1c3ae:	f855 0c08 	ldr.w	r0, [r5, #-8]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1c3b2:	f85c 3c08 	ldr.w	r3, [ip, #-8]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1c3b6:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
   1c3ba:	fa0e f404 	lsl.w	r4, lr, r4
   1c3be:	4240      	negs	r0, r0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1c3c0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
   1c3c4:	2600      	movs	r6, #0
   1c3c6:	fbc4 1603 	smlal	r1, r6, r4, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1c3ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1c3ce:	2301      	movs	r3, #1
   1c3d0:	4083      	lsls	r3, r0
    result = (int32_t)(mult.long_long >> 31);
   1c3d2:	0fc9      	lsrs	r1, r1, #31
   1c3d4:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1c3d8:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
   1c3da:	ea01 0403 	and.w	r4, r1, r3
    if (result < 0)
   1c3de:	4101      	asrs	r1, r0
    q31_t threshold = remainder_mask >> 1;
   1c3e0:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
   1c3e4:	bf48      	it	mi
   1c3e6:	3301      	addmi	r3, #1
    if (remainder > threshold)
   1c3e8:	429c      	cmp	r4, r3
                sum_3 += output_offset;
   1c3ea:	9b05      	ldr	r3, [sp, #20]
        result++;
   1c3ec:	bfc8      	it	gt
   1c3ee:	3101      	addgt	r1, #1
   1c3f0:	4419      	add	r1, r3
                sum_3 = MAX(sum_3, output_activation_min);
   1c3f2:	9b06      	ldr	r3, [sp, #24]
   1c3f4:	4299      	cmp	r1, r3
   1c3f6:	bfb8      	it	lt
   1c3f8:	4619      	movlt	r1, r3
                sum_3 = MIN(sum_3, output_activation_max);
   1c3fa:	9b07      	ldr	r3, [sp, #28]
   1c3fc:	4299      	cmp	r1, r3
   1c3fe:	bfa8      	it	ge
   1c400:	4619      	movge	r1, r3
                *output++ = (q7_t)sum_3;
   1c402:	f802 1c02 	strb.w	r1, [r2, #-2]
                sum_4 = arm_nn_requantize(sum_4, *output_mult++, *output_shift++);
   1c406:	f855 0c04 	ldr.w	r0, [r5, #-4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1c40a:	9901      	ldr	r1, [sp, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1c40c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1c410:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
   1c414:	40a1      	lsls	r1, r4
   1c416:	460c      	mov	r4, r1
   1c418:	4240      	negs	r0, r0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1c41a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
   1c41e:	2600      	movs	r6, #0
   1c420:	fbc4 1603 	smlal	r1, r6, r4, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1c424:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1c428:	2301      	movs	r3, #1
    result = (int32_t)(mult.long_long >> 31);
   1c42a:	0fc9      	lsrs	r1, r1, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1c42c:	4083      	lsls	r3, r0
    result = (int32_t)(mult.long_long >> 31);
   1c42e:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1c432:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
   1c434:	ea01 0403 	and.w	r4, r1, r3
    if (result < 0)
   1c438:	4101      	asrs	r1, r0
    q31_t threshold = remainder_mask >> 1;
   1c43a:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
   1c43e:	bf48      	it	mi
   1c440:	3301      	addmi	r3, #1
    if (remainder > threshold)
   1c442:	429c      	cmp	r4, r3
                sum_4 += output_offset;
   1c444:	9b05      	ldr	r3, [sp, #20]
        result++;
   1c446:	bfc8      	it	gt
   1c448:	3101      	addgt	r1, #1
   1c44a:	4419      	add	r1, r3
                sum_4 = MAX(sum_4, output_activation_min);
   1c44c:	9b06      	ldr	r3, [sp, #24]
   1c44e:	4299      	cmp	r1, r3
   1c450:	bfb8      	it	lt
   1c452:	4619      	movlt	r1, r3
                sum_4 = MIN(sum_4, output_activation_max);
   1c454:	9b07      	ldr	r3, [sp, #28]
   1c456:	4299      	cmp	r1, r3
   1c458:	bfa8      	it	ge
   1c45a:	4619      	movge	r1, r3
            while (row_count)
   1c45c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
                *output++ = (q7_t)sum_4;
   1c45e:	f802 1c01 	strb.w	r1, [r2, #-1]
            while (row_count)
   1c462:	3204      	adds	r2, #4
   1c464:	4293      	cmp	r3, r2
   1c466:	f10c 0c10 	add.w	ip, ip, #16
   1c46a:	f105 0510 	add.w	r5, r5, #16
   1c46e:	f47f aec8 	bne.w	1c202 <arm_depthwise_conv_s8_opt+0x24e>
   1c472:	9b48      	ldr	r3, [sp, #288]	@ 0x120
   1c474:	9925      	ldr	r1, [sp, #148]	@ 0x94
   1c476:	f8dd e098 	ldr.w	lr, [sp, #152]	@ 0x98
   1c47a:	4652      	mov	r2, sl
   1c47c:	e9dd c627 	ldrd	ip, r6, [sp, #156]	@ 0x9c
   1c480:	e9dd a902 	ldrd	sl, r9, [sp, #8]
   1c484:	440b      	add	r3, r1
   1c486:	9348      	str	r3, [sp, #288]	@ 0x120
            while (row_count)
   1c488:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
   1c48a:	2b00      	cmp	r3, #0
   1c48c:	d054      	beq.n	1c538 <arm_depthwise_conv_s8_opt+0x584>
   1c48e:	18f1      	adds	r1, r6, r3
   1c490:	fa1f f881 	uxth.w	r8, r1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1c494:	46c3      	mov	fp, r8
   1c496:	9f48      	ldr	r7, [sp, #288]	@ 0x120
   1c498:	46b0      	mov	r8, r6
   1c49a:	9e29      	ldr	r6, [sp, #164]	@ 0xa4
                q15_t *col_pos = col_buffer_start + row_shift;
   1c49c:	4643      	mov	r3, r8
                if (bias)
   1c49e:	2a00      	cmp	r2, #0
   1c4a0:	d06e      	beq.n	1c580 <arm_depthwise_conv_s8_opt+0x5cc>
                    sum = *bias++;
   1c4a2:	f852 4b04 	ldr.w	r4, [r2], #4
                row_shift += 1;
   1c4a6:	f108 0801 	add.w	r8, r8, #1
   1c4aa:	fa1f f888 	uxth.w	r8, r8
                for (int i = 0; i < col_count; i++)
   1c4ae:	b18e      	cbz	r6, 1c4d4 <arm_depthwise_conv_s8_opt+0x520>
   1c4b0:	9944      	ldr	r1, [sp, #272]	@ 0x110
   1c4b2:	9201      	str	r2, [sp, #4]
   1c4b4:	18c8      	adds	r0, r1, r3
   1c4b6:	9908      	ldr	r1, [sp, #32]
   1c4b8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   1c4bc:	2100      	movs	r1, #0
                    sum += row_pos[i * input_ch] * col_pos[i * input_ch];
   1c4be:	f990 2000 	ldrsb.w	r2, [r0]
   1c4c2:	881d      	ldrh	r5, [r3, #0]
                for (int i = 0; i < col_count; i++)
   1c4c4:	3101      	adds	r1, #1
   1c4c6:	428e      	cmp	r6, r1
   1c4c8:	4448      	add	r0, r9
                    sum += row_pos[i * input_ch] * col_pos[i * input_ch];
   1c4ca:	fb15 4402 	smlabb	r4, r5, r2, r4
                for (int i = 0; i < col_count; i++)
   1c4ce:	4453      	add	r3, sl
   1c4d0:	d1f5      	bne.n	1c4be <arm_depthwise_conv_s8_opt+0x50a>
   1c4d2:	9a01      	ldr	r2, [sp, #4]
                sum = arm_nn_requantize(sum, *output_mult++, *output_shift++);
   1c4d4:	f85e 1b04 	ldr.w	r1, [lr], #4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1c4d8:	f85c 5b04 	ldr.w	r5, [ip], #4
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1c4dc:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
   1c4e0:	fa04 f000 	lsl.w	r0, r4, r0
   1c4e4:	4249      	negs	r1, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1c4e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
   1c4ea:	2400      	movs	r4, #0
   1c4ec:	fbc0 3405 	smlal	r3, r4, r0, r5
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1c4f0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1c4f4:	2001      	movs	r0, #1
   1c4f6:	4088      	lsls	r0, r1
    result = (int32_t)(mult.long_long >> 31);
   1c4f8:	0fdb      	lsrs	r3, r3, #31
   1c4fa:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1c4fe:	3801      	subs	r0, #1
    int32_t remainder = remainder_mask & dividend;
   1c500:	ea03 0400 	and.w	r4, r3, r0
    if (result < 0)
   1c504:	410b      	asrs	r3, r1
    q31_t threshold = remainder_mask >> 1;
   1c506:	ea4f 0060 	mov.w	r0, r0, asr #1
        threshold++;
   1c50a:	bf48      	it	mi
   1c50c:	3001      	addmi	r0, #1
                sum += output_offset;
   1c50e:	9905      	ldr	r1, [sp, #20]
    if (remainder > threshold)
   1c510:	4284      	cmp	r4, r0
        result++;
   1c512:	bfc8      	it	gt
   1c514:	3301      	addgt	r3, #1
   1c516:	440b      	add	r3, r1
                sum = MAX(sum, output_activation_min);
   1c518:	9906      	ldr	r1, [sp, #24]
   1c51a:	428b      	cmp	r3, r1
   1c51c:	bfb8      	it	lt
   1c51e:	460b      	movlt	r3, r1
                sum = MIN(sum, output_activation_max);
   1c520:	9907      	ldr	r1, [sp, #28]
   1c522:	428b      	cmp	r3, r1
   1c524:	bfa8      	it	ge
   1c526:	460b      	movge	r3, r1
            while (row_count)
   1c528:	45d8      	cmp	r8, fp
                *output++ = (q7_t)sum;
   1c52a:	f807 3b01 	strb.w	r3, [r7], #1
            while (row_count)
   1c52e:	d1b5      	bne.n	1c49c <arm_depthwise_conv_s8_opt+0x4e8>
   1c530:	9b48      	ldr	r3, [sp, #288]	@ 0x120
   1c532:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
   1c534:	4413      	add	r3, r2
   1c536:	9348      	str	r3, [sp, #288]	@ 0x120
        for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
   1c538:	9a18      	ldr	r2, [sp, #96]	@ 0x60
   1c53a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
   1c53c:	441a      	add	r2, r3
   1c53e:	b292      	uxth	r2, r2
   1c540:	9b19      	ldr	r3, [sp, #100]	@ 0x64
   1c542:	9218      	str	r2, [sp, #96]	@ 0x60
   1c544:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
   1c546:	3301      	adds	r3, #1
   1c548:	429a      	cmp	r2, r3
   1c54a:	9319      	str	r3, [sp, #100]	@ 0x64
   1c54c:	f47f ade2 	bne.w	1c114 <arm_depthwise_conv_s8_opt+0x160>
   1c550:	e9dd cb32 	ldrd	ip, fp, [sp, #200]	@ 0xc8
   1c554:	e9dd 5734 	ldrd	r5, r7, [sp, #208]	@ 0xd0
   1c558:	e9dd 6836 	ldrd	r6, r8, [sp, #216]	@ 0xd8
   1c55c:	992a      	ldr	r1, [sp, #168]	@ 0xa8
    for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
   1c55e:	3601      	adds	r6, #1
   1c560:	eb08 0301 	add.w	r3, r8, r1
   1c564:	42b7      	cmp	r7, r6
   1c566:	b299      	uxth	r1, r3
   1c568:	f47f ada7 	bne.w	1c0ba <arm_depthwise_conv_s8_opt+0x106>
    return ARM_CMSIS_NN_SUCCESS;
   1c56c:	2000      	movs	r0, #0
}
   1c56e:	b039      	add	sp, #228	@ 0xe4
   1c570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                q31_t sum_4 = 0;
   1c574:	f8cd a004 	str.w	sl, [sp, #4]
                q31_t sum_3 = 0;
   1c578:	46d6      	mov	lr, sl
                q31_t sum_2 = 0;
   1c57a:	46d0      	mov	r8, sl
                q31_t sum = 0;
   1c57c:	46d1      	mov	r9, sl
   1c57e:	e64b      	b.n	1c218 <arm_depthwise_conv_s8_opt+0x264>
                q31_t sum = 0;
   1c580:	4614      	mov	r4, r2
   1c582:	e790      	b.n	1c4a6 <arm_depthwise_conv_s8_opt+0x4f2>
            const int ker_y_end = MIN(kernel_y, input_y - base_idx_y);
   1c584:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   1c586:	9309      	str	r3, [sp, #36]	@ 0x24
            if (ker_y_start != 0)
   1c588:	d01c      	beq.n	1c5c4 <arm_depthwise_conv_s8_opt+0x610>
                memset(&col_buffer[index], 0, (kernel_x * input_ch) * ker_y_start * sizeof(q15_t));
   1c58a:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
   1c58c:	9808      	ldr	r0, [sp, #32]
   1c58e:	2100      	movs	r1, #0
   1c590:	f00a fca4 	bl	26edc <memset>
   1c594:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
   1c596:	9930      	ldr	r1, [sp, #192]	@ 0xc0
                index += (kernel_x * input_ch) * ker_y_start;
   1c598:	f8dd 80b8 	ldr.w	r8, [sp, #184]	@ 0xb8
   1c59c:	e5c6      	b.n	1c12c <arm_depthwise_conv_s8_opt+0x178>
                memset(&col_buffer[index], 0, (kernel_x * input_ch) * diff * sizeof(q15_t));
   1c59e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
   1c5a0:	fb03 f202 	mul.w	r2, r3, r2
   1c5a4:	9b08      	ldr	r3, [sp, #32]
   1c5a6:	0052      	lsls	r2, r2, #1
   1c5a8:	eb03 0048 	add.w	r0, r3, r8, lsl #1
   1c5ac:	2100      	movs	r1, #0
   1c5ae:	f00a fc95 	bl	26edc <memset>
            while (row_count)
   1c5b2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
   1c5b4:	2b00      	cmp	r3, #0
   1c5b6:	f47f ae09 	bne.w	1c1cc <arm_depthwise_conv_s8_opt+0x218>
            output_shift = out_shift_start_pos;
   1c5ba:	e9dd ec1d 	ldrd	lr, ip, [sp, #116]	@ 0x74
            row_shift = 0;
   1c5be:	9e20      	ldr	r6, [sp, #128]	@ 0x80
            bias = bias_start_pos;
   1c5c0:	9a46      	ldr	r2, [sp, #280]	@ 0x118
   1c5c2:	e761      	b.n	1c488 <arm_depthwise_conv_s8_opt+0x4d4>
   1c5c4:	f8dd 806c 	ldr.w	r8, [sp, #108]	@ 0x6c
   1c5c8:	4642      	mov	r2, r8
   1c5ca:	4641      	mov	r1, r8
   1c5cc:	e5ae      	b.n	1c12c <arm_depthwise_conv_s8_opt+0x178>
    return (input_dims->c * filter_dims->w * filter_dims->h) * sizeof(int16_t);
   1c5ce:	fb07 f004 	mul.w	r0, r7, r4
   1c5d2:	fb06 f000 	mul.w	r0, r6, r0
   1c5d6:	0040      	lsls	r0, r0, #1
    if (ctx->buf == NULL && arm_depthwise_conv_s8_opt_get_buffer_size(input_dims, filter_dims) > 0)
   1c5d8:	2800      	cmp	r0, #0
   1c5da:	f77f ad01 	ble.w	1bfe0 <arm_depthwise_conv_s8_opt+0x2c>
        return ARM_CMSIS_NN_ARG_ERROR;
   1c5de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   1c5e2:	e7c4      	b.n	1c56e <arm_depthwise_conv_s8_opt+0x5ba>

0001c5e4 <arm_depthwise_conv_s8_opt_get_buffer_size>:
    return (input_dims->c * filter_dims->w * filter_dims->h) * sizeof(int16_t);
   1c5e4:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
   1c5e8:	68c0      	ldr	r0, [r0, #12]
   1c5ea:	fb02 f000 	mul.w	r0, r2, r0
   1c5ee:	fb03 f000 	mul.w	r0, r3, r0
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
   1c5f2:	0040      	lsls	r0, r0, #1
   1c5f4:	4770      	bx	lr
   1c5f6:	bf00      	nop

0001c5f8 <arm_depthwise_conv_wrapper_s8>:
                                                  const q7_t *filter,
                                                  const cmsis_nn_dims *bias_dims,
                                                  const int32_t *bias,
                                                  const cmsis_nn_dims *output_dims,
                                                  q7_t *output)
{
   1c5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    arm_cmsis_nn_status status = ARM_CMSIS_NN_SUCCESS;
    if (1 == dw_conv_params->ch_mult && input_dims->n == 1 && dw_conv_params->dilation.w == 1 &&
   1c5fc:	688d      	ldr	r5, [r1, #8]
{
   1c5fe:	b083      	sub	sp, #12
    if (1 == dw_conv_params->ch_mult && input_dims->n == 1 && dw_conv_params->dilation.w == 1 &&
   1c600:	2d01      	cmp	r5, #1
{
   1c602:	e9dd 460c 	ldrd	r4, r6, [sp, #48]	@ 0x30
   1c606:	e9dd ba0e 	ldrd	fp, sl, [sp, #56]	@ 0x38
   1c60a:	e9dd 9810 	ldrd	r9, r8, [sp, #64]	@ 0x40
   1c60e:	9f12      	ldr	r7, [sp, #72]	@ 0x48
   1c610:	9000      	str	r0, [sp, #0]
   1c612:	468c      	mov	ip, r1
   1c614:	9201      	str	r2, [sp, #4]
   1c616:	469e      	mov	lr, r3
    if (1 == dw_conv_params->ch_mult && input_dims->n == 1 && dw_conv_params->dilation.w == 1 &&
   1c618:	d102      	bne.n	1c620 <arm_depthwise_conv_wrapper_s8+0x28>
   1c61a:	681d      	ldr	r5, [r3, #0]
   1c61c:	2d01      	cmp	r5, #1
   1c61e:	d00f      	beq.n	1c640 <arm_depthwise_conv_wrapper_s8+0x48>
                                               output);
        }
    }
    else
    {
        status = arm_depthwise_conv_s8(ctx,
   1c620:	9a01      	ldr	r2, [sp, #4]
   1c622:	9800      	ldr	r0, [sp, #0]
   1c624:	940c      	str	r4, [sp, #48]	@ 0x30
   1c626:	4673      	mov	r3, lr
   1c628:	4661      	mov	r1, ip
   1c62a:	e9cd 8711 	strd	r8, r7, [sp, #68]	@ 0x44
   1c62e:	e9cd a90f 	strd	sl, r9, [sp, #60]	@ 0x3c
   1c632:	e9cd 6b0d 	strd	r6, fp, [sp, #52]	@ 0x34
                                       output);
    }

    /* Return to application */
    return status;
}
   1c636:	b003      	add	sp, #12
   1c638:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        status = arm_depthwise_conv_s8(ctx,
   1c63c:	f7ff ba96 	b.w	1bb6c <arm_depthwise_conv_s8>
    if (1 == dw_conv_params->ch_mult && input_dims->n == 1 && dw_conv_params->dilation.w == 1 &&
   1c640:	69cd      	ldr	r5, [r1, #28]
   1c642:	2d01      	cmp	r5, #1
   1c644:	d1ec      	bne.n	1c620 <arm_depthwise_conv_wrapper_s8+0x28>
   1c646:	6a0d      	ldr	r5, [r1, #32]
   1c648:	2d01      	cmp	r5, #1
   1c64a:	d1e9      	bne.n	1c620 <arm_depthwise_conv_wrapper_s8+0x28>
        if ((filter_dims->w == 3) && (filter_dims->h == 3) && (dw_conv_params->padding.h <= 1) &&
   1c64c:	68b5      	ldr	r5, [r6, #8]
   1c64e:	2d03      	cmp	r5, #3
   1c650:	d102      	bne.n	1c658 <arm_depthwise_conv_wrapper_s8+0x60>
   1c652:	6875      	ldr	r5, [r6, #4]
   1c654:	2d03      	cmp	r5, #3
   1c656:	d00f      	beq.n	1c678 <arm_depthwise_conv_wrapper_s8+0x80>
            status = arm_depthwise_conv_s8_opt(ctx,
   1c658:	9a01      	ldr	r2, [sp, #4]
   1c65a:	9800      	ldr	r0, [sp, #0]
   1c65c:	940c      	str	r4, [sp, #48]	@ 0x30
   1c65e:	4673      	mov	r3, lr
   1c660:	4661      	mov	r1, ip
   1c662:	e9cd 8711 	strd	r8, r7, [sp, #68]	@ 0x44
   1c666:	e9cd a90f 	strd	sl, r9, [sp, #60]	@ 0x3c
   1c66a:	e9cd 6b0d 	strd	r6, fp, [sp, #52]	@ 0x34
}
   1c66e:	b003      	add	sp, #12
   1c670:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            status = arm_depthwise_conv_s8_opt(ctx,
   1c674:	f7ff bc9e 	b.w	1bfb4 <arm_depthwise_conv_s8_opt>
        if ((filter_dims->w == 3) && (filter_dims->h == 3) && (dw_conv_params->padding.h <= 1) &&
   1c678:	698d      	ldr	r5, [r1, #24]
   1c67a:	2d01      	cmp	r5, #1
   1c67c:	dcec      	bgt.n	1c658 <arm_depthwise_conv_wrapper_s8+0x60>
   1c67e:	694d      	ldr	r5, [r1, #20]
   1c680:	2d01      	cmp	r5, #1
   1c682:	dce9      	bgt.n	1c658 <arm_depthwise_conv_wrapper_s8+0x60>
            status = arm_depthwise_conv_3x3_s8(ctx,
   1c684:	e9cd 8711 	strd	r8, r7, [sp, #68]	@ 0x44
   1c688:	e9cd a90f 	strd	sl, r9, [sp, #60]	@ 0x3c
   1c68c:	e9cd 6b0d 	strd	r6, fp, [sp, #52]	@ 0x34
   1c690:	940c      	str	r4, [sp, #48]	@ 0x30
}
   1c692:	b003      	add	sp, #12
   1c694:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            status = arm_depthwise_conv_3x3_s8(ctx,
   1c698:	f7fe bbd2 	b.w	1ae40 <arm_depthwise_conv_3x3_s8>

0001c69c <arm_depthwise_conv_wrapper_s8_get_buffer_size>:
                                                      const cmsis_nn_dims *output_dims)
{
    (void)dw_conv_params;
    int32_t size = 0;

    if (input_dims->c == output_dims->c && input_dims->n == 1 && dw_conv_params->dilation.w == 1 &&
   1c69c:	68db      	ldr	r3, [r3, #12]
{
   1c69e:	468c      	mov	ip, r1
    if (input_dims->c == output_dims->c && input_dims->n == 1 && dw_conv_params->dilation.w == 1 &&
   1c6a0:	68c9      	ldr	r1, [r1, #12]
   1c6a2:	4299      	cmp	r1, r3
   1c6a4:	d001      	beq.n	1c6aa <arm_depthwise_conv_wrapper_s8_get_buffer_size+0xe>
    {
        size = arm_depthwise_conv_s8_opt_get_buffer_size(input_dims, filter_dims);
    }

    return size;
}
   1c6a6:	2000      	movs	r0, #0
   1c6a8:	4770      	bx	lr
    if (input_dims->c == output_dims->c && input_dims->n == 1 && dw_conv_params->dilation.w == 1 &&
   1c6aa:	f8dc 3000 	ldr.w	r3, [ip]
   1c6ae:	2b01      	cmp	r3, #1
   1c6b0:	d1f9      	bne.n	1c6a6 <arm_depthwise_conv_wrapper_s8_get_buffer_size+0xa>
   1c6b2:	69c3      	ldr	r3, [r0, #28]
   1c6b4:	2b01      	cmp	r3, #1
   1c6b6:	d1f6      	bne.n	1c6a6 <arm_depthwise_conv_wrapper_s8_get_buffer_size+0xa>
   1c6b8:	6a03      	ldr	r3, [r0, #32]
   1c6ba:	2b01      	cmp	r3, #1
   1c6bc:	d1f3      	bne.n	1c6a6 <arm_depthwise_conv_wrapper_s8_get_buffer_size+0xa>
        size = arm_depthwise_conv_s8_opt_get_buffer_size(input_dims, filter_dims);
   1c6be:	4611      	mov	r1, r2
   1c6c0:	4660      	mov	r0, ip
   1c6c2:	f7ff bf8f 	b.w	1c5e4 <arm_depthwise_conv_s8_opt_get_buffer_size>
   1c6c6:	bf00      	nop

0001c6c8 <arm_nn_mat_mult_kernel_s8_s16>:
                                    const int16_t activation_min,
                                    const int16_t activation_max,
                                    const uint16_t num_col_a,
                                    const int32_t *const output_bias,
                                    q7_t *out_0)
{
   1c6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c6cc:	b097      	sub	sp, #92	@ 0x5c
   1c6ce:	469e      	mov	lr, r3
   1c6d0:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	@ 0x88
   1c6d4:	9302      	str	r3, [sp, #8]
   1c6d6:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
   1c6da:	9303      	str	r3, [sp, #12]
#if !defined(ARM_MATH_MVEI)
    /* set up the second output pointers */
    q7_t *out_1 = out_0 + output_ch;
   1c6dc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
{
   1c6de:	f8dd a080 	ldr.w	sl, [sp, #128]	@ 0x80
   1c6e2:	910b      	str	r1, [sp, #44]	@ 0x2c
   1c6e4:	4691      	mov	r9, r2
   1c6e6:	4683      	mov	fp, r0
    q7_t *out_1 = out_0 + output_ch;
   1c6e8:	eb03 0802 	add.w	r8, r3, r2
{
   1c6ec:	f8bd 0090 	ldrh.w	r0, [sp, #144]	@ 0x90
   1c6f0:	9005      	str	r0, [sp, #20]
    const int32_t *bias = output_bias;

    uint16_t row_count = output_ch / 2;
    const q7_t *ip_a0 = input_a;
    /* this loop over rows in A */
    while (row_count)
   1c6f2:	0852      	lsrs	r2, r2, #1
   1c6f4:	f000 8176 	beq.w	1c9e4 <arm_nn_mat_mult_kernel_s8_s16+0x31c>
   1c6f8:	460d      	mov	r5, r1
   1c6fa:	1e51      	subs	r1, r2, #1
    {
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
        const q15_t *ip_b1 = ip_b0 + num_col_a;
   1c6fc:	eb05 0640 	add.w	r6, r5, r0, lsl #1
            ch_1_out_0 = *bias;
            ch_1_out_1 = *bias++;
        }

#if defined(ARM_MATH_DSP)
        uint16_t col_count = num_col_a / 4;
   1c700:	0883      	lsrs	r3, r0, #2
   1c702:	4604      	mov	r4, r0
   1c704:	b289      	uxth	r1, r1
   1c706:	f108 0004 	add.w	r0, r8, #4
   1c70a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
   1c70e:	930d      	str	r3, [sp, #52]	@ 0x34
   1c710:	910c      	str	r1, [sp, #48]	@ 0x30
   1c712:	3b01      	subs	r3, #1
            ch_0_out_0 = __SMLAD(a02, b0, ch_0_out_0);
            ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);

            col_count--;
        }
        col_count = num_col_a & 0x3;
   1c714:	f004 0103 	and.w	r1, r4, #3
   1c718:	b29b      	uxth	r3, r3
   1c71a:	910e      	str	r1, [sp, #56]	@ 0x38
   1c71c:	9926      	ldr	r1, [sp, #152]	@ 0x98
        const q15_t *ip_b1 = ip_b0 + num_col_a;
   1c71e:	960f      	str	r6, [sp, #60]	@ 0x3c
   1c720:	3301      	adds	r3, #1
   1c722:	0098      	lsls	r0, r3, #2
   1c724:	3102      	adds	r1, #2
    const q31_t remainder_mask = (1 << exponent) - 1;
   1c726:	e9cd 2812 	strd	r2, r8, [sp, #72]	@ 0x48
   1c72a:	e9cd 9e14 	strd	r9, lr, [sp, #80]	@ 0x50
   1c72e:	9104      	str	r1, [sp, #16]
   1c730:	f10a 0c08 	add.w	ip, sl, #8
   1c734:	f108 0102 	add.w	r1, r8, #2
   1c738:	f10e 0708 	add.w	r7, lr, #8
   1c73c:	9006      	str	r0, [sp, #24]
   1c73e:	f8dd a094 	ldr.w	sl, [sp, #148]	@ 0x94
   1c742:	eb06 00c3 	add.w	r0, r6, r3, lsl #3
   1c746:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   1c74a:	9011      	str	r0, [sp, #68]	@ 0x44
   1c74c:	9310      	str	r3, [sp, #64]	@ 0x40
   1c74e:	4638      	mov	r0, r7
   1c750:	460e      	mov	r6, r1
        const q7_t *ip_a1 = ip_a0 + num_col_a;
   1c752:	9b05      	ldr	r3, [sp, #20]
   1c754:	eb0b 0103 	add.w	r1, fp, r3
        if (bias)
   1c758:	f1ba 0f00 	cmp.w	sl, #0
   1c75c:	f000 81ef 	beq.w	1cb3e <arm_nn_mat_mult_kernel_s8_s16+0x476>
        while (col_count)
   1c760:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
            ch_1_out_0 = *bias;
   1c762:	e9da 3800 	ldrd	r3, r8, [sl]
            ch_1_out_1 = *bias++;
   1c766:	f10a 0a08 	add.w	sl, sl, #8
        while (col_count)
   1c76a:	2a00      	cmp	r2, #0
   1c76c:	f000 81ed 	beq.w	1cb4a <arm_nn_mat_mult_kernel_s8_s16+0x482>
   1c770:	9a06      	ldr	r2, [sp, #24]
        const q15_t *ip_b1 = ip_b0 + num_col_a;
   1c772:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
        const q15_t *ip_b0 = input_b;
   1c774:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
        const q7_t *ip_a1 = ip_a0 + num_col_a;
   1c776:	9100      	str	r1, [sp, #0]
   1c778:	e9cd 0c07 	strd	r0, ip, [sp, #28]
   1c77c:	e9cd 6109 	strd	r6, r1, [sp, #36]	@ 0x24
   1c780:	445a      	add	r2, fp
   1c782:	9201      	str	r2, [sp, #4]
        while (col_count)
   1c784:	46c1      	mov	r9, r8
   1c786:	461a      	mov	r2, r3
        const q7_t *ip_a1 = ip_a0 + num_col_a;
   1c788:	f8cd a094 	str.w	sl, [sp, #148]	@ 0x94
    memcpy(&val, *in_q15, 4);
   1c78c:	f8d4 e000 	ldr.w	lr, [r4]
   1c790:	f8d5 c000 	ldr.w	ip, [r5]
    memcpy(&val, *in_q7, 4);
   1c794:	f85b 0b04 	ldr.w	r0, [fp], #4
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1c798:	fa2f f690 	sxtb16	r6, r0, ror #8
   1c79c:	9f00      	ldr	r7, [sp, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1c79e:	fa2f f080 	sxtb16	r0, r0
   1c7a2:	f857 1b04 	ldr.w	r1, [r7], #4
   1c7a6:	9700      	str	r7, [sp, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
   1c7a8:	eac6 4720 	pkhtb	r7, r6, r0, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
   1c7ac:	eac0 4006 	pkhbt	r0, r0, r6, lsl #16
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1c7b0:	fa2f fa91 	sxtb16	sl, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1c7b4:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
   1c7b8:	eaca 4621 	pkhtb	r6, sl, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
   1c7bc:	eac1 410a 	pkhbt	r1, r1, sl, lsl #16
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1c7c0:	fb20 330e 	smlad	r3, r0, lr, r3
   1c7c4:	fb20 220c 	smlad	r2, r0, ip, r2
   1c7c8:	fb21 880e 	smlad	r8, r1, lr, r8
   1c7cc:	fb21 910c 	smlad	r1, r1, ip, r9
    memcpy(&val, *in_q15, 4);
   1c7d0:	6860      	ldr	r0, [r4, #4]
   1c7d2:	f8d5 9004 	ldr.w	r9, [r5, #4]
    *in_q15 += 2;
   1c7d6:	3408      	adds	r4, #8
   1c7d8:	3508      	adds	r5, #8
   1c7da:	fb27 3300 	smlad	r3, r7, r0, r3
   1c7de:	fb27 2209 	smlad	r2, r7, r9, r2
   1c7e2:	fb26 8800 	smlad	r8, r6, r0, r8
   1c7e6:	fb26 1909 	smlad	r9, r6, r9, r1
        while (col_count)
   1c7ea:	9901      	ldr	r1, [sp, #4]
   1c7ec:	4559      	cmp	r1, fp
   1c7ee:	d1cd      	bne.n	1c78c <arm_nn_mat_mult_kernel_s8_s16+0xc4>
        while (col_count)
   1c7f0:	e9dd 6109 	ldrd	r6, r1, [sp, #36]	@ 0x24
   1c7f4:	9c06      	ldr	r4, [sp, #24]
   1c7f6:	f8dd a094 	ldr.w	sl, [sp, #148]	@ 0x94
   1c7fa:	4421      	add	r1, r4
   1c7fc:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
   1c7fe:	e9dd 0c07 	ldrd	r0, ip, [sp, #28]
        while (col_count)
   1c802:	e9dd 7e10 	ldrd	r7, lr, [sp, #64]	@ 0x40
        while (col_count)
   1c806:	2c00      	cmp	r4, #0
   1c808:	f000 81aa 	beq.w	1cb60 <arm_nn_mat_mult_kernel_s8_s16+0x498>
   1c80c:	9d01      	ldr	r5, [sp, #4]
   1c80e:	e9cd 0c00 	strd	r0, ip, [sp]
   1c812:	eb05 0b04 	add.w	fp, r5, r4
   1c816:	4628      	mov	r0, r5
            q7_t a0 = *ip_a0++;
   1c818:	f910 cb01 	ldrsb.w	ip, [r0], #1
            q15_t b0 = *ip_b0++;
   1c81c:	f937 5b02 	ldrsh.w	r5, [r7], #2
            q7_t a1 = *ip_a1++;
   1c820:	f911 4b01 	ldrsb.w	r4, [r1], #1
            ch_0_out_0 += a0 * b0;
   1c824:	fb05 330c 	mla	r3, r5, ip, r3
            ch_1_out_0 += a1 * b0;
   1c828:	fb05 8804 	mla	r8, r5, r4, r8
            q15_t b1 = *ip_b1++;
   1c82c:	f93e 5b02 	ldrsh.w	r5, [lr], #2
        while (col_count)
   1c830:	4583      	cmp	fp, r0
            ch_0_out_1 += a0 * b1;
   1c832:	fb05 220c 	mla	r2, r5, ip, r2
            ch_1_out_1 += a1 * b1;
   1c836:	fb05 9904 	mla	r9, r5, r4, r9
        while (col_count)
   1c83a:	d1ed      	bne.n	1c818 <arm_nn_mat_mult_kernel_s8_s16+0x150>
   1c83c:	e9dd 0c00 	ldrd	r0, ip, [sp]
        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
   1c840:	f850 4c08 	ldr.w	r4, [r0, #-8]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1c844:	f85c 1c08 	ldr.w	r1, [ip, #-8]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1c848:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
   1c84c:	fa03 f505 	lsl.w	r5, r3, r5
   1c850:	4264      	negs	r4, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1c852:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
   1c856:	2700      	movs	r7, #0
   1c858:	fbc5 3701 	smlal	r3, r7, r5, r1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1c85c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1c860:	2101      	movs	r1, #1
   1c862:	40a1      	lsls	r1, r4
    result = (int32_t)(mult.long_long >> 31);
   1c864:	0fdb      	lsrs	r3, r3, #31
   1c866:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1c86a:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
   1c86c:	ea03 0501 	and.w	r5, r3, r1
    if (result < 0)
   1c870:	4123      	asrs	r3, r4
    q31_t threshold = remainder_mask >> 1;
   1c872:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
   1c876:	bf48      	it	mi
   1c878:	3101      	addmi	r1, #1
    if (remainder > threshold)
   1c87a:	428d      	cmp	r5, r1
        ch_0_out_0 += out_offset;
   1c87c:	9921      	ldr	r1, [sp, #132]	@ 0x84
        result++;
   1c87e:	bfc8      	it	gt
   1c880:	3301      	addgt	r3, #1
   1c882:	440b      	add	r3, r1
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
   1c884:	9902      	ldr	r1, [sp, #8]
   1c886:	428b      	cmp	r3, r1
   1c888:	bfb8      	it	lt
   1c88a:	460b      	movlt	r3, r1
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
   1c88c:	9903      	ldr	r1, [sp, #12]
   1c88e:	428b      	cmp	r3, r1
   1c890:	bfa8      	it	ge
   1c892:	460b      	movge	r3, r1
        *out_0++ = (q7_t)ch_0_out_0;
   1c894:	9904      	ldr	r1, [sp, #16]
   1c896:	f801 3c02 	strb.w	r3, [r1, #-2]
        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
   1c89a:	f850 1c08 	ldr.w	r1, [r0, #-8]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1c89e:	f85c 3c08 	ldr.w	r3, [ip, #-8]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1c8a2:	ea21 74e1 	bic.w	r4, r1, r1, asr #31
   1c8a6:	fa02 f404 	lsl.w	r4, r2, r4
   1c8aa:	4249      	negs	r1, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1c8ac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
   1c8b0:	2500      	movs	r5, #0
   1c8b2:	fbc4 2503 	smlal	r2, r5, r4, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1c8b6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1c8ba:	2301      	movs	r3, #1
   1c8bc:	408b      	lsls	r3, r1
    result = (int32_t)(mult.long_long >> 31);
   1c8be:	0fd2      	lsrs	r2, r2, #31
   1c8c0:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1c8c4:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
   1c8c6:	ea02 0403 	and.w	r4, r2, r3
    if (result < 0)
   1c8ca:	410a      	asrs	r2, r1
    q31_t threshold = remainder_mask >> 1;
   1c8cc:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
   1c8d0:	bf48      	it	mi
   1c8d2:	3301      	addmi	r3, #1
    if (remainder > threshold)
   1c8d4:	429c      	cmp	r4, r3
        ch_0_out_1 += out_offset;
   1c8d6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
        result++;
   1c8d8:	bfc8      	it	gt
   1c8da:	3201      	addgt	r2, #1
   1c8dc:	441a      	add	r2, r3
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
   1c8de:	9b02      	ldr	r3, [sp, #8]
   1c8e0:	429a      	cmp	r2, r3
   1c8e2:	bfb8      	it	lt
   1c8e4:	461a      	movlt	r2, r3
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
   1c8e6:	9b03      	ldr	r3, [sp, #12]
   1c8e8:	429a      	cmp	r2, r3
   1c8ea:	bfa8      	it	ge
   1c8ec:	461a      	movge	r2, r3
        *out_1++ = (q7_t)ch_0_out_1;
   1c8ee:	f806 2c02 	strb.w	r2, [r6, #-2]
        ch_1_out_0 = arm_nn_requantize(ch_1_out_0, *out_mult, *out_shift);
   1c8f2:	f850 1c04 	ldr.w	r1, [r0, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1c8f6:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1c8fa:	ea21 74e1 	bic.w	r4, r1, r1, asr #31
   1c8fe:	fa08 f404 	lsl.w	r4, r8, r4
   1c902:	4249      	negs	r1, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1c904:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
   1c908:	2500      	movs	r5, #0
   1c90a:	fbc4 2503 	smlal	r2, r5, r4, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1c90e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1c912:	2301      	movs	r3, #1
   1c914:	408b      	lsls	r3, r1
    result = (int32_t)(mult.long_long >> 31);
   1c916:	0fd2      	lsrs	r2, r2, #31
   1c918:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1c91c:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
   1c91e:	ea02 0403 	and.w	r4, r2, r3
    if (result < 0)
   1c922:	410a      	asrs	r2, r1
    q31_t threshold = remainder_mask >> 1;
   1c924:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
   1c928:	bf48      	it	mi
   1c92a:	3301      	addmi	r3, #1
    if (remainder > threshold)
   1c92c:	429c      	cmp	r4, r3
        ch_1_out_0 += out_offset;
   1c92e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
        result++;
   1c930:	bfc8      	it	gt
   1c932:	3201      	addgt	r2, #1
   1c934:	441a      	add	r2, r3
        ch_1_out_0 = MAX(ch_1_out_0, activation_min);
   1c936:	9b02      	ldr	r3, [sp, #8]
   1c938:	429a      	cmp	r2, r3
   1c93a:	bfb8      	it	lt
   1c93c:	461a      	movlt	r2, r3
        ch_1_out_0 = MIN(ch_1_out_0, activation_max);
   1c93e:	9b03      	ldr	r3, [sp, #12]
   1c940:	429a      	cmp	r2, r3
   1c942:	bfa8      	it	ge
   1c944:	461a      	movge	r2, r3
        *out_0++ = (q7_t)ch_1_out_0;
   1c946:	9b04      	ldr	r3, [sp, #16]
   1c948:	f803 2c01 	strb.w	r2, [r3, #-1]
        ch_1_out_1 = arm_nn_requantize(ch_1_out_1, *out_mult, *out_shift);
   1c94c:	f850 1c04 	ldr.w	r1, [r0, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1c950:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1c954:	ea21 74e1 	bic.w	r4, r1, r1, asr #31
   1c958:	fa09 f404 	lsl.w	r4, r9, r4
   1c95c:	4249      	negs	r1, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1c95e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
   1c962:	2500      	movs	r5, #0
   1c964:	fbc4 2503 	smlal	r2, r5, r4, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1c968:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1c96c:	2301      	movs	r3, #1
    result = (int32_t)(mult.long_long >> 31);
   1c96e:	0fd2      	lsrs	r2, r2, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1c970:	408b      	lsls	r3, r1
    result = (int32_t)(mult.long_long >> 31);
   1c972:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1c976:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
   1c978:	ea02 0403 	and.w	r4, r2, r3
    if (result < 0)
   1c97c:	410a      	asrs	r2, r1
    q31_t threshold = remainder_mask >> 1;
   1c97e:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
   1c982:	bf48      	it	mi
   1c984:	3301      	addmi	r3, #1
    if (remainder > threshold)
   1c986:	429c      	cmp	r4, r3
        ch_1_out_1 += out_offset;
   1c988:	9b21      	ldr	r3, [sp, #132]	@ 0x84
        result++;
   1c98a:	bfc8      	it	gt
   1c98c:	3201      	addgt	r2, #1
   1c98e:	441a      	add	r2, r3
        ch_1_out_1 = MAX(ch_1_out_1, activation_min);
   1c990:	9b02      	ldr	r3, [sp, #8]
   1c992:	429a      	cmp	r2, r3
   1c994:	bfb8      	it	lt
   1c996:	461a      	movlt	r2, r3
        ch_1_out_1 = MIN(ch_1_out_1, activation_max);
   1c998:	9b03      	ldr	r3, [sp, #12]
   1c99a:	429a      	cmp	r2, r3
   1c99c:	bfa8      	it	ge
   1c99e:	461a      	movge	r2, r3
        ip_a0 += num_col_a;
   1c9a0:	9b05      	ldr	r3, [sp, #20]
        *out_1++ = (q7_t)ch_1_out_1;
   1c9a2:	f806 2c01 	strb.w	r2, [r6, #-1]
        ip_a0 += num_col_a;
   1c9a6:	449b      	add	fp, r3
    while (row_count)
   1c9a8:	9b04      	ldr	r3, [sp, #16]
   1c9aa:	3302      	adds	r3, #2
   1c9ac:	9304      	str	r3, [sp, #16]
   1c9ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   1c9b0:	3602      	adds	r6, #2
   1c9b2:	42b3      	cmp	r3, r6
   1c9b4:	f10c 0c08 	add.w	ip, ip, #8
   1c9b8:	f100 0008 	add.w	r0, r0, #8
   1c9bc:	f47f aec9 	bne.w	1c752 <arm_nn_mat_mult_kernel_s8_s16+0x8a>
   1c9c0:	e9dd 2812 	ldrd	r2, r8, [sp, #72]	@ 0x48
   1c9c4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
   1c9c6:	f8cd a094 	str.w	sl, [sp, #148]	@ 0x94
   1c9ca:	e9dd 9e14 	ldrd	r9, lr, [sp, #80]	@ 0x50
   1c9ce:	f8dd a080 	ldr.w	sl, [sp, #128]	@ 0x80
   1c9d2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   1c9d6:	9326      	str	r3, [sp, #152]	@ 0x98
   1c9d8:	eb08 0842 	add.w	r8, r8, r2, lsl #1
   1c9dc:	eb0a 0ac2 	add.w	sl, sl, r2, lsl #3
   1c9e0:	eb0e 0ec2 	add.w	lr, lr, r2, lsl #3
    if (output_ch & 0x1)
   1c9e4:	f019 0f01 	tst.w	r9, #1
   1c9e8:	f000 80a3 	beq.w	1cb32 <arm_nn_mat_mult_kernel_s8_s16+0x46a>
        const q15_t *ip_b1 = ip_b0 + num_col_a;
   1c9ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   1c9ee:	9a05      	ldr	r2, [sp, #20]
   1c9f0:	eb03 0742 	add.w	r7, r3, r2, lsl #1
        if (bias)
   1c9f4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
   1c9f6:	2b00      	cmp	r3, #0
   1c9f8:	f000 80b5 	beq.w	1cb66 <arm_nn_mat_mult_kernel_s8_s16+0x49e>
            ch_0_out_0 = *bias;
   1c9fc:	681b      	ldr	r3, [r3, #0]
        while (col_count)
   1c9fe:	9a05      	ldr	r2, [sp, #20]
   1ca00:	0896      	lsrs	r6, r2, #2
   1ca02:	f000 80b2 	beq.w	1cb6a <arm_nn_mat_mult_kernel_s8_s16+0x4a2>
   1ca06:	e9cd 6800 	strd	r6, r8, [sp]
        const q15_t *ip_b0 = input_b;
   1ca0a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
   1ca0c:	eb0b 0c86 	add.w	ip, fp, r6, lsl #2
        const q15_t *ip_b1 = ip_b0 + num_col_a;
   1ca10:	463d      	mov	r5, r7
        while (col_count)
   1ca12:	4618      	mov	r0, r3
    memcpy(&val, *in_q7, 4);
   1ca14:	f85b 2b04 	ldr.w	r2, [fp], #4
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1ca18:	fa2f f692 	sxtb16	r6, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1ca1c:	fa2f f282 	sxtb16	r2, r2
    memcpy(&val, *in_q15, 4);
   1ca20:	f8d4 8000 	ldr.w	r8, [r4]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
   1ca24:	eac6 4122 	pkhtb	r1, r6, r2, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
   1ca28:	eac2 4206 	pkhbt	r2, r2, r6, lsl #16
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1ca2c:	fb22 3308 	smlad	r3, r2, r8, r3
    memcpy(&val, *in_q15, 4);
   1ca30:	682e      	ldr	r6, [r5, #0]
   1ca32:	fb22 0206 	smlad	r2, r2, r6, r0
   1ca36:	6866      	ldr	r6, [r4, #4]
   1ca38:	6868      	ldr	r0, [r5, #4]
    *in_q15 += 2;
   1ca3a:	3408      	adds	r4, #8
   1ca3c:	3508      	adds	r5, #8
   1ca3e:	fb21 3306 	smlad	r3, r1, r6, r3
   1ca42:	fb21 2000 	smlad	r0, r1, r0, r2
   1ca46:	45dc      	cmp	ip, fp
   1ca48:	d1e4      	bne.n	1ca14 <arm_nn_mat_mult_kernel_s8_s16+0x34c>
   1ca4a:	e9dd 6800 	ldrd	r6, r8, [sp]
   1ca4e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
   1ca50:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
   1ca54:	eb07 07c6 	add.w	r7, r7, r6, lsl #3
   1ca58:	920b      	str	r2, [sp, #44]	@ 0x2c
#else
        uint16_t col_count = num_col_a;
#endif
        while (col_count)
   1ca5a:	9a05      	ldr	r2, [sp, #20]
   1ca5c:	f012 0203 	ands.w	r2, r2, #3
   1ca60:	d00d      	beq.n	1ca7e <arm_nn_mat_mult_kernel_s8_s16+0x3b6>
   1ca62:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
   1ca64:	4462      	add	r2, ip
        {
            q7_t a0 = *ip_a0++;
   1ca66:	f91c 1b01 	ldrsb.w	r1, [ip], #1
            q15_t b0 = *ip_b0++;
            q15_t b1 = *ip_b1++;

            ch_0_out_0 += a0 * b0;
   1ca6a:	f834 5b02 	ldrh.w	r5, [r4], #2
   1ca6e:	fb15 3301 	smlabb	r3, r5, r1, r3
            ch_0_out_1 += a0 * b1;
   1ca72:	f837 5b02 	ldrh.w	r5, [r7], #2
        while (col_count)
   1ca76:	4594      	cmp	ip, r2
            ch_0_out_1 += a0 * b1;
   1ca78:	fb15 0001 	smlabb	r0, r5, r1, r0
        while (col_count)
   1ca7c:	d1f3      	bne.n	1ca66 <arm_nn_mat_mult_kernel_s8_s16+0x39e>
            col_count--;
        }
        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
   1ca7e:	f8de 1000 	ldr.w	r1, [lr]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1ca82:	f8da 2000 	ldr.w	r2, [sl]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1ca86:	ea21 74e1 	bic.w	r4, r1, r1, asr #31
   1ca8a:	fa03 f404 	lsl.w	r4, r3, r4
   1ca8e:	4249      	negs	r1, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1ca90:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
   1ca94:	2500      	movs	r5, #0
   1ca96:	fbc4 3502 	smlal	r3, r5, r4, r2
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1ca9a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1ca9e:	2201      	movs	r2, #1
   1caa0:	408a      	lsls	r2, r1
    result = (int32_t)(mult.long_long >> 31);
   1caa2:	0fdb      	lsrs	r3, r3, #31
   1caa4:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1caa8:	3a01      	subs	r2, #1
    int32_t remainder = remainder_mask & dividend;
   1caaa:	ea03 0402 	and.w	r4, r3, r2
    if (result < 0)
   1caae:	410b      	asrs	r3, r1
    q31_t threshold = remainder_mask >> 1;
   1cab0:	ea4f 0262 	mov.w	r2, r2, asr #1
        threshold++;
   1cab4:	bf48      	it	mi
   1cab6:	3201      	addmi	r2, #1
    if (remainder > threshold)
   1cab8:	4294      	cmp	r4, r2
        ch_0_out_0 += out_offset;
   1caba:	9a21      	ldr	r2, [sp, #132]	@ 0x84
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
   1cabc:	9903      	ldr	r1, [sp, #12]
        result++;
   1cabe:	bfc8      	it	gt
   1cac0:	3301      	addgt	r3, #1
        ch_0_out_0 += out_offset;
   1cac2:	4413      	add	r3, r2
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
   1cac4:	9a02      	ldr	r2, [sp, #8]
   1cac6:	4293      	cmp	r3, r2
   1cac8:	bfb8      	it	lt
   1caca:	4613      	movlt	r3, r2
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
   1cacc:	428b      	cmp	r3, r1
        *out_0++ = (q7_t)ch_0_out_0;
   1cace:	9a26      	ldr	r2, [sp, #152]	@ 0x98
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
   1cad0:	bfa8      	it	ge
   1cad2:	460b      	movge	r3, r1
        *out_0++ = (q7_t)ch_0_out_0;
   1cad4:	f802 3b01 	strb.w	r3, [r2], #1

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
   1cad8:	f8de 4000 	ldr.w	r4, [lr]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1cadc:	f8da 5000 	ldr.w	r5, [sl]
        *out_0++ = (q7_t)ch_0_out_0;
   1cae0:	9226      	str	r2, [sp, #152]	@ 0x98
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1cae2:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   1cae6:	4098      	lsls	r0, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1cae8:	2100      	movs	r1, #0
   1caea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
   1caee:	fbc0 3105 	smlal	r3, r1, r0, r5
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1caf2:	4264      	negs	r4, r4
    result = (int32_t)(mult.long_long >> 31);
   1caf4:	0fdb      	lsrs	r3, r3, #31
   1caf6:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1cafa:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1cafe:	2101      	movs	r1, #1
   1cb00:	40a1      	lsls	r1, r4
   1cb02:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
   1cb04:	ea03 0001 	and.w	r0, r3, r1
    if (result < 0)
   1cb08:	4123      	asrs	r3, r4
    q31_t threshold = remainder_mask >> 1;
   1cb0a:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
   1cb0e:	bf48      	it	mi
   1cb10:	3101      	addmi	r1, #1
    if (remainder > threshold)
   1cb12:	4288      	cmp	r0, r1
        ch_0_out_1 += out_offset;
   1cb14:	9921      	ldr	r1, [sp, #132]	@ 0x84
        result++;
   1cb16:	bfc8      	it	gt
   1cb18:	3301      	addgt	r3, #1
   1cb1a:	440b      	add	r3, r1
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
   1cb1c:	9902      	ldr	r1, [sp, #8]
   1cb1e:	4299      	cmp	r1, r3
   1cb20:	bfb8      	it	lt
   1cb22:	4619      	movlt	r1, r3
   1cb24:	460b      	mov	r3, r1
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
   1cb26:	9903      	ldr	r1, [sp, #12]
   1cb28:	4299      	cmp	r1, r3
   1cb2a:	bfa8      	it	ge
   1cb2c:	4619      	movge	r1, r3
        *out_1++ = (q7_t)ch_0_out_1;
   1cb2e:	f888 1000 	strb.w	r1, [r8]
    (void)output_bias;
    (void)out_0;
    /* To be completed */
    return NULL;
#endif
}
   1cb32:	9b26      	ldr	r3, [sp, #152]	@ 0x98
   1cb34:	eb03 0009 	add.w	r0, r3, r9
   1cb38:	b017      	add	sp, #92	@ 0x5c
   1cb3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        while (col_count)
   1cb3e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
        q31_t ch_1_out_0 = 0;
   1cb40:	46d0      	mov	r8, sl
        q31_t ch_0_out_0 = 0;
   1cb42:	4653      	mov	r3, sl
        while (col_count)
   1cb44:	2a00      	cmp	r2, #0
   1cb46:	f47f ae13 	bne.w	1c770 <arm_nn_mat_mult_kernel_s8_s16+0xa8>
        while (col_count)
   1cb4a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
        const q15_t *ip_b1 = ip_b0 + num_col_a;
   1cb4c:	f8dd e03c 	ldr.w	lr, [sp, #60]	@ 0x3c
        const q15_t *ip_b0 = input_b;
   1cb50:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
        while (col_count)
   1cb52:	f8cd b004 	str.w	fp, [sp, #4]
   1cb56:	46c1      	mov	r9, r8
   1cb58:	461a      	mov	r2, r3
        while (col_count)
   1cb5a:	2c00      	cmp	r4, #0
   1cb5c:	f47f ae56 	bne.w	1c80c <arm_nn_mat_mult_kernel_s8_s16+0x144>
   1cb60:	f8dd b004 	ldr.w	fp, [sp, #4]
   1cb64:	e66c      	b.n	1c840 <arm_nn_mat_mult_kernel_s8_s16+0x178>
        q31_t ch_0_out_0 = 0;
   1cb66:	9b25      	ldr	r3, [sp, #148]	@ 0x94
   1cb68:	e749      	b.n	1c9fe <arm_nn_mat_mult_kernel_s8_s16+0x336>
        while (col_count)
   1cb6a:	46dc      	mov	ip, fp
   1cb6c:	4618      	mov	r0, r3
   1cb6e:	e774      	b.n	1ca5a <arm_nn_mat_mult_kernel_s8_s16+0x392>

0001cb70 <arm_nn_mat_mult_kernel_s16>:
                                  const int16_t activation_min,
                                  const int16_t activation_max,
                                  const int32_t num_col_a,
                                  const int64_t *const output_bias,
                                  q15_t *out_0)
{
   1cb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cb74:	b097      	sub	sp, #92	@ 0x5c
   1cb76:	460f      	mov	r7, r1
   1cb78:	f9bd 4084 	ldrsh.w	r4, [sp, #132]	@ 0x84
   1cb7c:	9e25      	ldr	r6, [sp, #148]	@ 0x94
   1cb7e:	910a      	str	r1, [sp, #40]	@ 0x28

#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    /* set up the second output pointers */
    q15_t *out_1 = out_0 + output_ch;
    const int64_t *bias = output_bias;
    uint16_t row_count = output_ch / 2;
   1cb80:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
{
   1cb84:	4680      	mov	r8, r0
   1cb86:	9405      	str	r4, [sp, #20]
   1cb88:	4618      	mov	r0, r3
   1cb8a:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	@ 0x88
   1cb8e:	f8dd a080 	ldr.w	sl, [sp, #128]	@ 0x80
   1cb92:	9406      	str	r4, [sp, #24]
    uint16_t row_count = output_ch / 2;
   1cb94:	f3c1 034f 	ubfx	r3, r1, #1, #16
    q15_t *out_1 = out_0 + output_ch;
   1cb98:	ea4f 0b42 	mov.w	fp, r2, lsl #1
   1cb9c:	eb06 0942 	add.w	r9, r6, r2, lsl #1
    const q7_t *ip_a0 = input_a;

    /* this loop over rows in A */
    while (row_count)
   1cba0:	2b00      	cmp	r3, #0
   1cba2:	f000 817a 	beq.w	1ce9a <arm_nn_mat_mult_kernel_s16+0x32a>
    {
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
        const q15_t *ip_b1 = ip_b0 + num_col_a;
   1cba6:	9c23      	ldr	r4, [sp, #140]	@ 0x8c
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1cba8:	9015      	str	r0, [sp, #84]	@ 0x54
   1cbaa:	104d      	asrs	r5, r1, #1
   1cbac:	eb07 0144 	add.w	r1, r7, r4, lsl #1
   1cbb0:	910c      	str	r1, [sp, #48]	@ 0x30
        q31_t ch_0_out_0 = 0;
        q31_t ch_0_out_1 = 0;
        q31_t ch_1_out_0 = 0;
        q31_t ch_1_out_1 = 0;

        uint16_t col_count = num_col_a / 4;
   1cbb2:	2c00      	cmp	r4, #0
   1cbb4:	4621      	mov	r1, r4
   1cbb6:	bfb8      	it	lt
   1cbb8:	3103      	addlt	r1, #3
   1cbba:	f3c1 048f 	ubfx	r4, r1, #2, #16
   1cbbe:	3b01      	subs	r3, #1
   1cbc0:	b299      	uxth	r1, r3
   1cbc2:	940b      	str	r4, [sp, #44]	@ 0x2c
   1cbc4:	1e63      	subs	r3, r4, #1
   1cbc6:	f100 0410 	add.w	r4, r0, #16
   1cbca:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
   1cbce:	910d      	str	r1, [sp, #52]	@ 0x34
            ch_1_out_0 = __SMLAD(a12, b0, ch_1_out_0);
            ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);

            col_count--;
        } /* while over col_count */
        col_count = num_col_a & 0x3;
   1cbd0:	9923      	ldr	r1, [sp, #140]	@ 0x8c
   1cbd2:	f8cd a080 	str.w	sl, [sp, #128]	@ 0x80
   1cbd6:	f001 0103 	and.w	r1, r1, #3
   1cbda:	910e      	str	r1, [sp, #56]	@ 0x38
   1cbdc:	1d31      	adds	r1, r6, #4
   1cbde:	b29b      	uxth	r3, r3
   1cbe0:	9104      	str	r1, [sp, #16]
   1cbe2:	f109 0104 	add.w	r1, r9, #4
   1cbe6:	3301      	adds	r3, #1
   1cbe8:	9103      	str	r1, [sp, #12]
   1cbea:	f10a 0108 	add.w	r1, sl, #8
   1cbee:	9102      	str	r1, [sp, #8]
   1cbf0:	0099      	lsls	r1, r3, #2
   1cbf2:	9107      	str	r1, [sp, #28]
   1cbf4:	990a      	ldr	r1, [sp, #40]	@ 0x28
   1cbf6:	9625      	str	r6, [sp, #148]	@ 0x94
   1cbf8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1cbfc:	9110      	str	r1, [sp, #64]	@ 0x40
   1cbfe:	990c      	ldr	r1, [sp, #48]	@ 0x30
   1cc00:	e9cd 9213 	strd	r9, r2, [sp, #76]	@ 0x4c
   1cc04:	e9cd b511 	strd	fp, r5, [sp, #68]	@ 0x44
   1cc08:	f100 0708 	add.w	r7, r0, #8
   1cc0c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   1cc10:	f8dd b090 	ldr.w	fp, [sp, #144]	@ 0x90
   1cc14:	930f      	str	r3, [sp, #60]	@ 0x3c
   1cc16:	4638      	mov	r0, r7
        const q7_t *ip_a1 = ip_a0 + num_col_a;
   1cc18:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
   1cc1a:	eb08 0103 	add.w	r1, r8, r3
        while (col_count)
   1cc1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   1cc20:	2b00      	cmp	r3, #0
   1cc22:	f000 8276 	beq.w	1d112 <arm_nn_mat_mult_kernel_s16+0x5a2>
   1cc26:	9b07      	ldr	r3, [sp, #28]
        const q15_t *ip_b1 = ip_b0 + num_col_a;
   1cc28:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
        const q15_t *ip_b0 = input_b;
   1cc2a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
        const q7_t *ip_a1 = ip_a0 + num_col_a;
   1cc2c:	9100      	str	r1, [sp, #0]
        q31_t ch_0_out_0 = 0;
   1cc2e:	e9cd 0108 	strd	r0, r1, [sp, #32]
        q31_t ch_1_out_1 = 0;
   1cc32:	f04f 0a00 	mov.w	sl, #0
   1cc36:	4443      	add	r3, r8
   1cc38:	9301      	str	r3, [sp, #4]
        q31_t ch_1_out_0 = 0;
   1cc3a:	46d1      	mov	r9, sl
        q31_t ch_0_out_1 = 0;
   1cc3c:	4652      	mov	r2, sl
        q31_t ch_0_out_0 = 0;
   1cc3e:	4653      	mov	r3, sl
   1cc40:	f8cd b090 	str.w	fp, [sp, #144]	@ 0x90
    memcpy(&val, *in_q15, 4);
   1cc44:	f8d4 e000 	ldr.w	lr, [r4]
   1cc48:	f8d5 c000 	ldr.w	ip, [r5]
    memcpy(&val, *in_q7, 4);
   1cc4c:	f858 0b04 	ldr.w	r0, [r8], #4
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1cc50:	fa2f f690 	sxtb16	r6, r0, ror #8
   1cc54:	9f00      	ldr	r7, [sp, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1cc56:	fa2f f080 	sxtb16	r0, r0
   1cc5a:	f857 1b04 	ldr.w	r1, [r7], #4
   1cc5e:	9700      	str	r7, [sp, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
   1cc60:	eac6 4720 	pkhtb	r7, r6, r0, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
   1cc64:	eac0 4006 	pkhbt	r0, r0, r6, lsl #16
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1cc68:	fa2f fb91 	sxtb16	fp, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1cc6c:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
   1cc70:	eacb 4621 	pkhtb	r6, fp, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
   1cc74:	eac1 410b 	pkhbt	r1, r1, fp, lsl #16
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1cc78:	fb20 330e 	smlad	r3, r0, lr, r3
   1cc7c:	fb20 220c 	smlad	r2, r0, ip, r2
   1cc80:	fb21 990e 	smlad	r9, r1, lr, r9
   1cc84:	fb21 a10c 	smlad	r1, r1, ip, sl
    memcpy(&val, *in_q15, 4);
   1cc88:	6860      	ldr	r0, [r4, #4]
   1cc8a:	f8d5 a004 	ldr.w	sl, [r5, #4]
    *in_q15 += 2;
   1cc8e:	3408      	adds	r4, #8
   1cc90:	3508      	adds	r5, #8
   1cc92:	fb27 3300 	smlad	r3, r7, r0, r3
   1cc96:	fb27 220a 	smlad	r2, r7, sl, r2
   1cc9a:	fb26 9900 	smlad	r9, r6, r0, r9
   1cc9e:	fb26 1a0a 	smlad	sl, r6, sl, r1
        while (col_count)
   1cca2:	9901      	ldr	r1, [sp, #4]
   1cca4:	4588      	cmp	r8, r1
   1cca6:	d1cd      	bne.n	1cc44 <arm_nn_mat_mult_kernel_s16+0xd4>
   1cca8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1ccac:	9c07      	ldr	r4, [sp, #28]
   1ccae:	f8dd b090 	ldr.w	fp, [sp, #144]	@ 0x90
   1ccb2:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	@ 0x3c
   1ccb6:	4421      	add	r1, r4
        while (col_count)
   1ccb8:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
   1ccba:	2d00      	cmp	r5, #0
   1ccbc:	f000 8224 	beq.w	1d108 <arm_nn_mat_mult_kernel_s16+0x598>
   1ccc0:	9c01      	ldr	r4, [sp, #4]
   1ccc2:	eb04 0805 	add.w	r8, r4, r5
        {
            q7_t a0 = *ip_a0++;
   1ccc6:	f914 eb01 	ldrsb.w	lr, [r4], #1
            q15_t b0 = *ip_b0++;
   1ccca:	f937 6b02 	ldrsh.w	r6, [r7], #2
            q7_t a1 = *ip_a1++;
   1ccce:	f911 5b01 	ldrsb.w	r5, [r1], #1
            q15_t b1 = *ip_b1++;

            ch_0_out_0 += a0 * b0;
   1ccd2:	fb06 330e 	mla	r3, r6, lr, r3
            ch_0_out_1 += a0 * b1;
            ch_1_out_0 += a1 * b0;
   1ccd6:	fb06 9905 	mla	r9, r6, r5, r9
            q15_t b1 = *ip_b1++;
   1ccda:	f93c 6b02 	ldrsh.w	r6, [ip], #2
        while (col_count)
   1ccde:	4544      	cmp	r4, r8
            ch_0_out_1 += a0 * b1;
   1cce0:	fb06 220e 	mla	r2, r6, lr, r2
            ch_1_out_1 += a1 * b1;
   1cce4:	fb06 aa05 	mla	sl, r6, r5, sl
        while (col_count)
   1cce8:	d1ed      	bne.n	1ccc6 <arm_nn_mat_mult_kernel_s16+0x156>
            col_count--;
        } /* while over col_count */
        if (bias)
        {
            q31_t reduced_multiplier = REDUCE_MULTIPLIER(*out_mult);
   1ccea:	9902      	ldr	r1, [sp, #8]
            q63_t acc_64 = ch_0_out_0 + *bias;
            ch_0_out_0 = arm_nn_requantize_s64(acc_64, reduced_multiplier, *out_shift);
   1ccec:	f850 5c08 	ldr.w	r5, [r0, #-8]
            q31_t reduced_multiplier = REDUCE_MULTIPLIER(*out_mult);
   1ccf0:	f851 4c08 	ldr.w	r4, [r1, #-8]
        if (bias)
   1ccf4:	f1bb 0f00 	cmp.w	fp, #0
   1ccf8:	f000 818c 	beq.w	1d014 <arm_nn_mat_mult_kernel_s16+0x4a4>
            q31_t reduced_multiplier = REDUCE_MULTIPLIER(*out_mult);
   1ccfc:	49c4      	ldr	r1, [pc, #784]	@ (1d010 <arm_nn_mat_mult_kernel_s16+0x4a0>)
   1ccfe:	428c      	cmp	r4, r1
   1cd00:	f300 8180 	bgt.w	1d004 <arm_nn_mat_mult_kernel_s16+0x494>
   1cd04:	f504 4400 	add.w	r4, r4, #32768	@ 0x8000
    const q63_t new_val = val * reduced_multiplier;
   1cd08:	17e1      	asrs	r1, r4, #31
   1cd0a:	1426      	asrs	r6, r4, #16
   1cd0c:	9100      	str	r1, [sp, #0]
            q63_t acc_64 = ch_0_out_0 + *bias;
   1cd0e:	e9db 1c00 	ldrd	r1, ip, [fp]
   1cd12:	9c00      	ldr	r4, [sp, #0]
   1cd14:	185f      	adds	r7, r3, r1
   1cd16:	eb4c 73e3 	adc.w	r3, ip, r3, asr #31
   1cd1a:	fb07 fe04 	mul.w	lr, r7, r4
   1cd1e:	fb06 ee03 	mla	lr, r6, r3, lr
   1cd22:	fba7 3706 	umull	r3, r7, r7, r6
   1cd26:	4477      	add	r7, lr
   1cd28:	463c      	mov	r4, r7
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
   1cd2a:	f1c5 070e 	rsb	r7, r5, #14
   1cd2e:	3512      	adds	r5, #18
   1cd30:	fa04 fe05 	lsl.w	lr, r4, r5
   1cd34:	40fb      	lsrs	r3, r7
   1cd36:	ea43 030e 	orr.w	r3, r3, lr
   1cd3a:	f1b7 0e20 	subs.w	lr, r7, #32
   1cd3e:	bf58      	it	pl
   1cd40:	fa44 fe0e 	asrpl.w	lr, r4, lr
    const q63_t new_val = val * reduced_multiplier;
   1cd44:	9c00      	ldr	r4, [sp, #0]
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
   1cd46:	bf58      	it	pl
   1cd48:	ea43 030e 	orrpl.w	r3, r3, lr
            acc_64 = ch_0_out_1 + *bias++;
   1cd4c:	1851      	adds	r1, r2, r1
   1cd4e:	eb4c 7ce2 	adc.w	ip, ip, r2, asr #31
    const q63_t new_val = val * reduced_multiplier;
   1cd52:	fb01 f404 	mul.w	r4, r1, r4
   1cd56:	fb06 440c 	mla	r4, r6, ip, r4
   1cd5a:	fba1 1606 	umull	r1, r6, r1, r6
   1cd5e:	4426      	add	r6, r4
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
   1cd60:	40f9      	lsrs	r1, r7
   1cd62:	fa06 f505 	lsl.w	r5, r6, r5
   1cd66:	3f20      	subs	r7, #32
   1cd68:	ea41 0105 	orr.w	r1, r1, r5
   1cd6c:	bf58      	it	pl
   1cd6e:	fa46 f707 	asrpl.w	r7, r6, r7
        {
            ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
            ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
            out_mult++;
        }
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
   1cd72:	9a05      	ldr	r2, [sp, #20]
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
        *out_0++ = (q15_t)ch_0_out_0;
   1cd74:	9c04      	ldr	r4, [sp, #16]
   1cd76:	bf58      	it	pl
   1cd78:	4339      	orrpl	r1, r7
    result = (result + 1) >> 1;             // Last shift position and insert round
   1cd7a:	3301      	adds	r3, #1
   1cd7c:	105b      	asrs	r3, r3, #1
   1cd7e:	3101      	adds	r1, #1
   1cd80:	1049      	asrs	r1, r1, #1
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
   1cd82:	4293      	cmp	r3, r2
   1cd84:	bfb8      	it	lt
   1cd86:	4613      	movlt	r3, r2

        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
   1cd88:	4291      	cmp	r1, r2
   1cd8a:	bfb8      	it	lt
   1cd8c:	4611      	movlt	r1, r2
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
   1cd8e:	9a06      	ldr	r2, [sp, #24]
   1cd90:	4293      	cmp	r3, r2
   1cd92:	bfa8      	it	ge
   1cd94:	4613      	movge	r3, r2
        *out_0++ = (q15_t)ch_0_out_0;
   1cd96:	f824 3c04 	strh.w	r3, [r4, #-4]
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
   1cd9a:	4291      	cmp	r1, r2
        *out_1++ = (q15_t)ch_0_out_1;
   1cd9c:	9b03      	ldr	r3, [sp, #12]
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
   1cd9e:	bfa8      	it	ge
   1cda0:	4611      	movge	r1, r2
        *out_1++ = (q15_t)ch_0_out_1;
   1cda2:	f823 1c04 	strh.w	r1, [r3, #-4]
        out_shift++;

        if (bias)
        {
            q31_t reduced_multiplier = REDUCE_MULTIPLIER(*out_mult);
   1cda6:	9b02      	ldr	r3, [sp, #8]
   1cda8:	f853 4c04 	ldr.w	r4, [r3, #-4]
   1cdac:	4b98      	ldr	r3, [pc, #608]	@ (1d010 <arm_nn_mat_mult_kernel_s16+0x4a0>)
   1cdae:	429c      	cmp	r4, r3
   1cdb0:	f340 8123 	ble.w	1cffa <arm_nn_mat_mult_kernel_s16+0x48a>
   1cdb4:	f647 73ff 	movw	r3, #32767	@ 0x7fff
   1cdb8:	2400      	movs	r4, #0
            q63_t acc_64 = ch_1_out_0 + *bias;
   1cdba:	e9db 1c02 	ldrd	r1, ip, [fp, #8]
   1cdbe:	eb19 0501 	adds.w	r5, r9, r1
   1cdc2:	eb4c 72e9 	adc.w	r2, ip, r9, asr #31
    const q63_t new_val = val * reduced_multiplier;
   1cdc6:	fb05 f704 	mul.w	r7, r5, r4
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
   1cdca:	f850 6c04 	ldr.w	r6, [r0, #-4]
    const q63_t new_val = val * reduced_multiplier;
   1cdce:	fb03 7702 	mla	r7, r3, r2, r7
   1cdd2:	fba5 2503 	umull	r2, r5, r5, r3
   1cdd6:	442f      	add	r7, r5
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
   1cdd8:	f1c6 050e 	rsb	r5, r6, #14
   1cddc:	3612      	adds	r6, #18
   1cdde:	fa07 fe06 	lsl.w	lr, r7, r6
   1cde2:	40ea      	lsrs	r2, r5
   1cde4:	ea42 020e 	orr.w	r2, r2, lr
   1cde8:	f1b5 0e20 	subs.w	lr, r5, #32
   1cdec:	bf5c      	itt	pl
   1cdee:	fa47 fe0e 	asrpl.w	lr, r7, lr
   1cdf2:	ea42 020e 	orrpl.w	r2, r2, lr
            ch_1_out_0 = arm_nn_requantize_s64(acc_64, reduced_multiplier, *out_shift);
            acc_64 = ch_1_out_1 + *bias++;
   1cdf6:	eb1a 0101 	adds.w	r1, sl, r1
   1cdfa:	eb4c 7cea 	adc.w	ip, ip, sl, asr #31
    const q63_t new_val = val * reduced_multiplier;
   1cdfe:	fb01 f404 	mul.w	r4, r1, r4
   1ce02:	fb03 440c 	mla	r4, r3, ip, r4
   1ce06:	fba1 3103 	umull	r3, r1, r1, r3
   1ce0a:	4421      	add	r1, r4
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
   1ce0c:	40eb      	lsrs	r3, r5
   1ce0e:	fa01 f606 	lsl.w	r6, r1, r6
   1ce12:	3d20      	subs	r5, #32
   1ce14:	ea43 0306 	orr.w	r3, r3, r6
   1ce18:	bf5c      	itt	pl
   1ce1a:	fa41 f505 	asrpl.w	r5, r1, r5
   1ce1e:	432b      	orrpl	r3, r5
    result = (result + 1) >> 1;             // Last shift position and insert round
   1ce20:	3201      	adds	r2, #1
   1ce22:	1c5e      	adds	r6, r3, #1
   1ce24:	1052      	asrs	r2, r2, #1
   1ce26:	f10b 0b10 	add.w	fp, fp, #16
   1ce2a:	1076      	asrs	r6, r6, #1
        {
            ch_1_out_0 = arm_nn_requantize(ch_1_out_0, *out_mult, *out_shift);
            ch_1_out_1 = arm_nn_requantize(ch_1_out_1, *out_mult, *out_shift);
            out_mult++;
        }
        ch_1_out_0 = MAX(ch_1_out_0, activation_min);
   1ce2c:	9b05      	ldr	r3, [sp, #20]
        ch_1_out_0 = MIN(ch_1_out_0, activation_max);
        *out_0++ = (q15_t)ch_1_out_0;
   1ce2e:	9904      	ldr	r1, [sp, #16]
        ch_1_out_0 = MAX(ch_1_out_0, activation_min);
   1ce30:	429a      	cmp	r2, r3
   1ce32:	bfb8      	it	lt
   1ce34:	461a      	movlt	r2, r3

        ch_1_out_1 = MAX(ch_1_out_1, activation_min);
   1ce36:	429e      	cmp	r6, r3
   1ce38:	bfb8      	it	lt
   1ce3a:	461e      	movlt	r6, r3
        ch_1_out_0 = MIN(ch_1_out_0, activation_max);
   1ce3c:	9b06      	ldr	r3, [sp, #24]
   1ce3e:	429a      	cmp	r2, r3
   1ce40:	bfa8      	it	ge
   1ce42:	461a      	movge	r2, r3
        ch_1_out_1 = MIN(ch_1_out_1, activation_max);
   1ce44:	429e      	cmp	r6, r3
   1ce46:	bfa8      	it	ge
   1ce48:	461e      	movge	r6, r3
        *out_1++ = (q15_t)ch_1_out_1;
   1ce4a:	9b03      	ldr	r3, [sp, #12]
        *out_0++ = (q15_t)ch_1_out_0;
   1ce4c:	f821 2c02 	strh.w	r2, [r1, #-2]
    while (row_count)
   1ce50:	3304      	adds	r3, #4
        *out_1++ = (q15_t)ch_1_out_1;
   1ce52:	f823 6c06 	strh.w	r6, [r3, #-6]
    while (row_count)
   1ce56:	9303      	str	r3, [sp, #12]
   1ce58:	9b02      	ldr	r3, [sp, #8]
        out_shift++;

        /* skip row */
        ip_a0 += num_col_a;
   1ce5a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
    while (row_count)
   1ce5c:	3308      	adds	r3, #8
   1ce5e:	9302      	str	r3, [sp, #8]
   1ce60:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   1ce62:	3008      	adds	r0, #8
        ip_a0 += num_col_a;
   1ce64:	4490      	add	r8, r2
    while (row_count)
   1ce66:	4283      	cmp	r3, r0
   1ce68:	f101 0204 	add.w	r2, r1, #4
   1ce6c:	9204      	str	r2, [sp, #16]
   1ce6e:	f47f aed3 	bne.w	1cc18 <arm_nn_mat_mult_kernel_s16+0xa8>
   1ce72:	e9dd 5912 	ldrd	r5, r9, [sp, #72]	@ 0x48
   1ce76:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	@ 0x50
   1ce7a:	f8dd a080 	ldr.w	sl, [sp, #128]	@ 0x80
   1ce7e:	9e25      	ldr	r6, [sp, #148]	@ 0x94
   1ce80:	f8cd b090 	str.w	fp, [sp, #144]	@ 0x90
   1ce84:	b2ad      	uxth	r5, r5
   1ce86:	f8dd b044 	ldr.w	fp, [sp, #68]	@ 0x44
   1ce8a:	eb0a 0ac5 	add.w	sl, sl, r5, lsl #3
   1ce8e:	eb06 0685 	add.w	r6, r6, r5, lsl #2
   1ce92:	eb09 0985 	add.w	r9, r9, r5, lsl #2
   1ce96:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
        row_count--;
    }

    /* compute the last odd numbered row if any */
    if (output_ch & 0x1)
   1ce9a:	07d3      	lsls	r3, r2, #31
   1ce9c:	f140 80a8 	bpl.w	1cff0 <arm_nn_mat_mult_kernel_s16+0x480>

        q31_t ch_0_out_0 = 0;
        q31_t ch_0_out_1 = 0;

        uint16_t col_count = num_col_a >> 2;
        while (col_count)
   1cea0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
        const q15_t *ip_b1 = ip_b0 + num_col_a;
   1cea2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
        while (col_count)
   1cea4:	f3c3 028f 	ubfx	r2, r3, #2, #16
        const q15_t *ip_b1 = ip_b0 + num_col_a;
   1cea8:	eb04 0743 	add.w	r7, r4, r3, lsl #1
        uint16_t col_count = num_col_a >> 2;
   1ceac:	109b      	asrs	r3, r3, #2
        while (col_count)
   1ceae:	2a00      	cmp	r2, #0
   1ceb0:	f000 813e 	beq.w	1d130 <arm_nn_mat_mult_kernel_s16+0x5c0>
        q31_t ch_0_out_0 = 0;
   1ceb4:	e9cd b900 	strd	fp, r9, [sp]
   1ceb8:	fa1f fe83 	uxth.w	lr, r3
        q31_t ch_0_out_1 = 0;
   1cebc:	2200      	movs	r2, #0
   1cebe:	eb08 0c8e 	add.w	ip, r8, lr, lsl #2
        const q15_t *ip_b1 = ip_b0 + num_col_a;
   1cec2:	463d      	mov	r5, r7
        q31_t ch_0_out_0 = 0;
   1cec4:	4611      	mov	r1, r2
   1cec6:	9702      	str	r7, [sp, #8]
    memcpy(&val, *in_q7, 4);
   1cec8:	f858 3b04 	ldr.w	r3, [r8], #4
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1cecc:	fa2f f993 	sxtb16	r9, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1ced0:	fa2f f383 	sxtb16	r3, r3
    memcpy(&val, *in_q15, 4);
   1ced4:	f8d4 b000 	ldr.w	fp, [r4]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
   1ced8:	eac9 4723 	pkhtb	r7, r9, r3, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
   1cedc:	eac3 4309 	pkhbt	r3, r3, r9, lsl #16
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1cee0:	fb23 110b 	smlad	r1, r3, fp, r1
    memcpy(&val, *in_q15, 4);
   1cee4:	f8d5 9000 	ldr.w	r9, [r5]
   1cee8:	fb23 2309 	smlad	r3, r3, r9, r2
   1ceec:	f8d4 9004 	ldr.w	r9, [r4, #4]
   1cef0:	686a      	ldr	r2, [r5, #4]
    *in_q15 += 2;
   1cef2:	3408      	adds	r4, #8
   1cef4:	3508      	adds	r5, #8
   1cef6:	fb27 1109 	smlad	r1, r7, r9, r1
   1cefa:	fb27 3202 	smlad	r2, r7, r2, r3
        while (col_count)
   1cefe:	45e0      	cmp	r8, ip
   1cf00:	d1e2      	bne.n	1cec8 <arm_nn_mat_mult_kernel_s16+0x358>
   1cf02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   1cf04:	9f02      	ldr	r7, [sp, #8]
   1cf06:	e9dd b900 	ldrd	fp, r9, [sp]
   1cf0a:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
   1cf0e:	eb07 07ce 	add.w	r7, r7, lr, lsl #3
   1cf12:	930a      	str	r3, [sp, #40]	@ 0x28
            ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);

            col_count--;
        }
        col_count = num_col_a & 0x3;
        while (col_count)
   1cf14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
   1cf16:	f013 0303 	ands.w	r3, r3, #3
   1cf1a:	d00d      	beq.n	1cf38 <arm_nn_mat_mult_kernel_s16+0x3c8>
   1cf1c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
   1cf1e:	4463      	add	r3, ip
        {
            q7_t a0 = *ip_a0++;
   1cf20:	f91c 4b01 	ldrsb.w	r4, [ip], #1
            q15_t b0 = *ip_b0++;
            q15_t b1 = *ip_b1++;

            ch_0_out_0 += a0 * b0;
   1cf24:	f835 eb02 	ldrh.w	lr, [r5], #2
   1cf28:	fb1e 1104 	smlabb	r1, lr, r4, r1
            ch_0_out_1 += a0 * b1;
   1cf2c:	f837 eb02 	ldrh.w	lr, [r7], #2
        while (col_count)
   1cf30:	459c      	cmp	ip, r3
            ch_0_out_1 += a0 * b1;
   1cf32:	fb1e 2204 	smlabb	r2, lr, r4, r2
        while (col_count)
   1cf36:	d1f3      	bne.n	1cf20 <arm_nn_mat_mult_kernel_s16+0x3b0>
            col_count--;
        }
        if (bias)
   1cf38:	9b24      	ldr	r3, [sp, #144]	@ 0x90
        {
            q31_t reduced_multiplier = REDUCE_MULTIPLIER(*out_mult);
   1cf3a:	f8da 5000 	ldr.w	r5, [sl]
            q63_t acc_64 = ch_0_out_0 + *bias;
            ch_0_out_0 = arm_nn_requantize_s64(acc_64, reduced_multiplier, *out_shift);
   1cf3e:	6804      	ldr	r4, [r0, #0]
        if (bias)
   1cf40:	2b00      	cmp	r3, #0
   1cf42:	f000 80f8 	beq.w	1d136 <arm_nn_mat_mult_kernel_s16+0x5c6>
            q31_t reduced_multiplier = REDUCE_MULTIPLIER(*out_mult);
   1cf46:	4b32      	ldr	r3, [pc, #200]	@ (1d010 <arm_nn_mat_mult_kernel_s16+0x4a0>)
   1cf48:	429d      	cmp	r5, r3
   1cf4a:	f340 80ec 	ble.w	1d126 <arm_nn_mat_mult_kernel_s16+0x5b6>
   1cf4e:	f647 77ff 	movw	r7, #32767	@ 0x7fff
   1cf52:	2000      	movs	r0, #0
            q63_t acc_64 = ch_0_out_0 + *bias;
   1cf54:	9b24      	ldr	r3, [sp, #144]	@ 0x90
   1cf56:	9d24      	ldr	r5, [sp, #144]	@ 0x90
   1cf58:	681b      	ldr	r3, [r3, #0]
   1cf5a:	f8d5 c004 	ldr.w	ip, [r5, #4]
   1cf5e:	18cd      	adds	r5, r1, r3
   1cf60:	eb4c 71e1 	adc.w	r1, ip, r1, asr #31
    const q63_t new_val = val * reduced_multiplier;
   1cf64:	fb05 fe00 	mul.w	lr, r5, r0
   1cf68:	fb07 ee01 	mla	lr, r7, r1, lr
   1cf6c:	fba5 1507 	umull	r1, r5, r5, r7
   1cf70:	44ae      	add	lr, r5
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
   1cf72:	f1c4 050e 	rsb	r5, r4, #14
   1cf76:	3412      	adds	r4, #18
   1cf78:	fa0e f804 	lsl.w	r8, lr, r4
   1cf7c:	40e9      	lsrs	r1, r5
   1cf7e:	ea41 0108 	orr.w	r1, r1, r8
   1cf82:	f1b5 0820 	subs.w	r8, r5, #32
   1cf86:	bf5c      	itt	pl
   1cf88:	fa4e f808 	asrpl.w	r8, lr, r8
   1cf8c:	ea41 0108 	orrpl.w	r1, r1, r8
            acc_64 = ch_0_out_1 + *bias++;
   1cf90:	18d3      	adds	r3, r2, r3
   1cf92:	eb4c 7ce2 	adc.w	ip, ip, r2, asr #31
    const q63_t new_val = val * reduced_multiplier;
   1cf96:	fb03 f000 	mul.w	r0, r3, r0
   1cf9a:	fb07 000c 	mla	r0, r7, ip, r0
   1cf9e:	fba3 3707 	umull	r3, r7, r3, r7
   1cfa2:	4438      	add	r0, r7
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
   1cfa4:	fa23 f205 	lsr.w	r2, r3, r5
   1cfa8:	fa00 f404 	lsl.w	r4, r0, r4
   1cfac:	3d20      	subs	r5, #32
   1cfae:	ea42 0204 	orr.w	r2, r2, r4
   1cfb2:	bf5c      	itt	pl
   1cfb4:	fa40 f505 	asrpl.w	r5, r0, r5
   1cfb8:	432a      	orrpl	r2, r5
    result = (result + 1) >> 1;             // Last shift position and insert round
   1cfba:	3101      	adds	r1, #1
   1cfbc:	3201      	adds	r2, #1
   1cfbe:	104b      	asrs	r3, r1, #1
   1cfc0:	1052      	asrs	r2, r2, #1
        else
        {
            ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
            ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
        }
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
   1cfc2:	9c05      	ldr	r4, [sp, #20]
   1cfc4:	429c      	cmp	r4, r3
   1cfc6:	4621      	mov	r1, r4
   1cfc8:	bfb8      	it	lt
   1cfca:	4619      	movlt	r1, r3
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
        *out_0++ = (q15_t)ch_0_out_0;

        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
   1cfcc:	4623      	mov	r3, r4
   1cfce:	4294      	cmp	r4, r2
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
   1cfd0:	9c06      	ldr	r4, [sp, #24]
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
   1cfd2:	bfb8      	it	lt
   1cfd4:	4613      	movlt	r3, r2
        *out_0++ = (q15_t)ch_0_out_0;
   1cfd6:	4630      	mov	r0, r6
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
   1cfd8:	428c      	cmp	r4, r1
   1cfda:	4622      	mov	r2, r4
   1cfdc:	bfa8      	it	ge
   1cfde:	460a      	movge	r2, r1
        *out_0++ = (q15_t)ch_0_out_0;
   1cfe0:	f820 2b02 	strh.w	r2, [r0], #2
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
   1cfe4:	429c      	cmp	r4, r3
   1cfe6:	bfa8      	it	ge
   1cfe8:	461c      	movge	r4, r3
        *out_1++ = (q15_t)ch_0_out_1;
   1cfea:	f8a9 4000 	strh.w	r4, [r9]
        *out_0++ = (q15_t)ch_0_out_0;
   1cfee:	4606      	mov	r6, r0
    (void)output_bias;
    (void)out_0;
    /* To be completed */
    return NULL;
#endif
}
   1cff0:	eb06 000b 	add.w	r0, r6, fp
   1cff4:	b017      	add	sp, #92	@ 0x5c
   1cff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            q31_t reduced_multiplier = REDUCE_MULTIPLIER(*out_mult);
   1cffa:	f504 4400 	add.w	r4, r4, #32768	@ 0x8000
    const q63_t new_val = val * reduced_multiplier;
   1cffe:	1423      	asrs	r3, r4, #16
   1d000:	17e4      	asrs	r4, r4, #31
   1d002:	e6da      	b.n	1cdba <arm_nn_mat_mult_kernel_s16+0x24a>
   1d004:	2100      	movs	r1, #0
   1d006:	f647 76ff 	movw	r6, #32767	@ 0x7fff
   1d00a:	9100      	str	r1, [sp, #0]
   1d00c:	e67f      	b.n	1cd0e <arm_nn_mat_mult_kernel_s16+0x19e>
   1d00e:	bf00      	nop
   1d010:	7ffeffff 	.word	0x7ffeffff
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d014:	ea25 77e5 	bic.w	r7, r5, r5, asr #31
   1d018:	fa03 f107 	lsl.w	r1, r3, r7
   1d01c:	426d      	negs	r5, r5
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1d01e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
   1d022:	465e      	mov	r6, fp
   1d024:	fbc1 3604 	smlal	r3, r6, r1, r4
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d028:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1d02c:	2101      	movs	r1, #1
   1d02e:	40a9      	lsls	r1, r5
    result = (int32_t)(mult.long_long >> 31);
   1d030:	0fdb      	lsrs	r3, r3, #31
   1d032:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1d036:	3901      	subs	r1, #1
    q31_t threshold = remainder_mask >> 1;
   1d038:	104e      	asrs	r6, r1, #1
    int32_t remainder = remainder_mask & dividend;
   1d03a:	ea03 0c01 	and.w	ip, r3, r1
    if (result < 0)
   1d03e:	412b      	asrs	r3, r5
        threshold++;
   1d040:	bf4c      	ite	mi
   1d042:	f106 0e01 	addmi.w	lr, r6, #1
    q31_t threshold = remainder_mask >> 1;
   1d046:	46b6      	movpl	lr, r6
    if (remainder > threshold)
   1d048:	45f4      	cmp	ip, lr
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d04a:	fa02 f207 	lsl.w	r2, r2, r7
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1d04e:	f04f 0c00 	mov.w	ip, #0
   1d052:	f04f 4780 	mov.w	r7, #1073741824	@ 0x40000000
   1d056:	fbc2 7c04 	smlal	r7, ip, r2, r4
    result = (int32_t)(mult.long_long >> 31);
   1d05a:	ea4f 77d7 	mov.w	r7, r7, lsr #31
   1d05e:	ea47 074c 	orr.w	r7, r7, ip, lsl #1
        result++;
   1d062:	bfc8      	it	gt
   1d064:	3301      	addgt	r3, #1
    int32_t remainder = remainder_mask & dividend;
   1d066:	4039      	ands	r1, r7
    if (result < 0)
   1d068:	412f      	asrs	r7, r5
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
   1d06a:	9a05      	ldr	r2, [sp, #20]
        threshold++;
   1d06c:	bf48      	it	mi
   1d06e:	3601      	addmi	r6, #1
    if (remainder > threshold)
   1d070:	42b1      	cmp	r1, r6
        result++;
   1d072:	bfc8      	it	gt
   1d074:	3701      	addgt	r7, #1
   1d076:	4293      	cmp	r3, r2
   1d078:	bfb8      	it	lt
   1d07a:	4613      	movlt	r3, r2
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
   1d07c:	4297      	cmp	r7, r2
   1d07e:	bfb8      	it	lt
   1d080:	4617      	movlt	r7, r2
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
   1d082:	9a06      	ldr	r2, [sp, #24]
        *out_0++ = (q15_t)ch_0_out_0;
   1d084:	9904      	ldr	r1, [sp, #16]
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
   1d086:	4293      	cmp	r3, r2
   1d088:	bfa8      	it	ge
   1d08a:	4613      	movge	r3, r2
        *out_0++ = (q15_t)ch_0_out_0;
   1d08c:	f821 3c04 	strh.w	r3, [r1, #-4]
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
   1d090:	4297      	cmp	r7, r2
        *out_1++ = (q15_t)ch_0_out_1;
   1d092:	9b03      	ldr	r3, [sp, #12]
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
   1d094:	bfa8      	it	ge
   1d096:	4617      	movge	r7, r2
        *out_1++ = (q15_t)ch_0_out_1;
   1d098:	f823 7c04 	strh.w	r7, [r3, #-4]
            ch_1_out_0 = arm_nn_requantize(ch_1_out_0, *out_mult, *out_shift);
   1d09c:	9a02      	ldr	r2, [sp, #8]
   1d09e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1d0a2:	f852 cc04 	ldr.w	ip, [r2, #-4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d0a6:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
   1d0aa:	fa09 f105 	lsl.w	r1, r9, r5
   1d0ae:	425b      	negs	r3, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1d0b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
   1d0b4:	2400      	movs	r4, #0
   1d0b6:	fbc1 240c 	smlal	r2, r4, r1, ip
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d0ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1d0be:	2101      	movs	r1, #1
    result = (int32_t)(mult.long_long >> 31);
   1d0c0:	0fd2      	lsrs	r2, r2, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1d0c2:	4099      	lsls	r1, r3
    result = (int32_t)(mult.long_long >> 31);
   1d0c4:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1d0c8:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
   1d0ca:	ea02 0601 	and.w	r6, r2, r1
    if (result < 0)
   1d0ce:	411a      	asrs	r2, r3
    q31_t threshold = remainder_mask >> 1;
   1d0d0:	ea4f 0461 	mov.w	r4, r1, asr #1
    if (result < 0)
   1d0d4:	d41b      	bmi.n	1d10e <arm_nn_mat_mult_kernel_s16+0x59e>
    q31_t threshold = remainder_mask >> 1;
   1d0d6:	4627      	mov	r7, r4
    if (remainder > threshold)
   1d0d8:	42be      	cmp	r6, r7
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d0da:	fa0a f505 	lsl.w	r5, sl, r5
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1d0de:	f04f 4680 	mov.w	r6, #1073741824	@ 0x40000000
   1d0e2:	f04f 0700 	mov.w	r7, #0
   1d0e6:	fbc5 670c 	smlal	r6, r7, r5, ip
    result = (int32_t)(mult.long_long >> 31);
   1d0ea:	ea4f 76d6 	mov.w	r6, r6, lsr #31
   1d0ee:	ea46 0647 	orr.w	r6, r6, r7, lsl #1
    int32_t remainder = remainder_mask & dividend;
   1d0f2:	ea01 0106 	and.w	r1, r1, r6
        result++;
   1d0f6:	bfc8      	it	gt
   1d0f8:	3201      	addgt	r2, #1
    if (result < 0)
   1d0fa:	411e      	asrs	r6, r3
        threshold++;
   1d0fc:	bf48      	it	mi
   1d0fe:	3401      	addmi	r4, #1
    if (remainder > threshold)
   1d100:	42a1      	cmp	r1, r4
        result++;
   1d102:	bfc8      	it	gt
   1d104:	3601      	addgt	r6, #1
            out_mult++;
   1d106:	e691      	b.n	1ce2c <arm_nn_mat_mult_kernel_s16+0x2bc>
        while (col_count)
   1d108:	f8dd 8004 	ldr.w	r8, [sp, #4]
   1d10c:	e5ed      	b.n	1ccea <arm_nn_mat_mult_kernel_s16+0x17a>
        threshold++;
   1d10e:	1c67      	adds	r7, r4, #1
   1d110:	e7e2      	b.n	1d0d8 <arm_nn_mat_mult_kernel_s16+0x568>
        q31_t ch_1_out_1 = 0;
   1d112:	e9dd 730a 	ldrd	r7, r3, [sp, #40]	@ 0x28
        const q15_t *ip_b1 = ip_b0 + num_col_a;
   1d116:	f8dd c030 	ldr.w	ip, [sp, #48]	@ 0x30
        while (col_count)
   1d11a:	f8cd 8004 	str.w	r8, [sp, #4]
        q31_t ch_1_out_1 = 0;
   1d11e:	469a      	mov	sl, r3
        q31_t ch_1_out_0 = 0;
   1d120:	4699      	mov	r9, r3
        q31_t ch_0_out_1 = 0;
   1d122:	461a      	mov	r2, r3
   1d124:	e5c8      	b.n	1ccb8 <arm_nn_mat_mult_kernel_s16+0x148>
            q31_t reduced_multiplier = REDUCE_MULTIPLIER(*out_mult);
   1d126:	f505 4000 	add.w	r0, r5, #32768	@ 0x8000
    const q63_t new_val = val * reduced_multiplier;
   1d12a:	1407      	asrs	r7, r0, #16
   1d12c:	17c0      	asrs	r0, r0, #31
   1d12e:	e711      	b.n	1cf54 <arm_nn_mat_mult_kernel_s16+0x3e4>
        while (col_count)
   1d130:	46c4      	mov	ip, r8
        q31_t ch_0_out_0 = 0;
   1d132:	4611      	mov	r1, r2
   1d134:	e6ee      	b.n	1cf14 <arm_nn_mat_mult_kernel_s16+0x3a4>
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1d136:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d13a:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1d13e:	469c      	mov	ip, r3
   1d140:	9b24      	ldr	r3, [sp, #144]	@ 0x90
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d142:	4081      	lsls	r1, r0
   1d144:	4264      	negs	r4, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1d146:	fbc1 c305 	smlal	ip, r3, r1, r5
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d14a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1d14e:	2701      	movs	r7, #1
    result = (int32_t)(mult.long_long >> 31);
   1d150:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1d154:	40a7      	lsls	r7, r4
    result = (int32_t)(mult.long_long >> 31);
   1d156:	ea4c 0c43 	orr.w	ip, ip, r3, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1d15a:	3f01      	subs	r7, #1
    q31_t threshold = remainder_mask >> 1;
   1d15c:	1079      	asrs	r1, r7, #1
    if (result < 0)
   1d15e:	fa5c f304 	asrs.w	r3, ip, r4
    int32_t remainder = remainder_mask & dividend;
   1d162:	ea0c 0e07 	and.w	lr, ip, r7
        threshold++;
   1d166:	bf4c      	ite	mi
   1d168:	f101 0c01 	addmi.w	ip, r1, #1
    q31_t threshold = remainder_mask >> 1;
   1d16c:	468c      	movpl	ip, r1
    if (remainder > threshold)
   1d16e:	45e6      	cmp	lr, ip
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d170:	fa02 f000 	lsl.w	r0, r2, r0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1d174:	f04f 0c00 	mov.w	ip, #0
   1d178:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
   1d17c:	fbc0 2c05 	smlal	r2, ip, r0, r5
    result = (int32_t)(mult.long_long >> 31);
   1d180:	ea4f 72d2 	mov.w	r2, r2, lsr #31
   1d184:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
    int32_t remainder = remainder_mask & dividend;
   1d188:	ea07 0702 	and.w	r7, r7, r2
        result++;
   1d18c:	bfc8      	it	gt
   1d18e:	3301      	addgt	r3, #1
    if (result < 0)
   1d190:	4122      	asrs	r2, r4
        threshold++;
   1d192:	bf48      	it	mi
   1d194:	3101      	addmi	r1, #1
    if (remainder > threshold)
   1d196:	428f      	cmp	r7, r1
        result++;
   1d198:	bfc8      	it	gt
   1d19a:	3201      	addgt	r2, #1
   1d19c:	e711      	b.n	1cfc2 <arm_nn_mat_mult_kernel_s16+0x452>
   1d19e:	bf00      	nop

0001d1a0 <arm_nn_mat_mult_nt_t_s8>:
                                            const int32_t rhs_cols,
                                            const int32_t lhs_offset,
                                            const int32_t dst_offset,
                                            const int32_t activation_min,
                                            const int32_t activation_max)
{
   1d1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d1a4:	b0a5      	sub	sp, #148	@ 0x94
   1d1a6:	4699      	mov	r9, r3
   1d1a8:	f8dd b0c4 	ldr.w	fp, [sp, #196]	@ 0xc4
   1d1ac:	9c2e      	ldr	r4, [sp, #184]	@ 0xb8
   1d1ae:	f8dd a0cc 	ldr.w	sl, [sp, #204]	@ 0xcc
   1d1b2:	901c      	str	r0, [sp, #112]	@ 0x70
#if defined(ARM_MATH_DSP)
    const int32_t off0 = rhs_cols - 4;

    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   1d1b4:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
   1d1b8:	f1bb 0f01 	cmp.w	fp, #1
{
   1d1bc:	460d      	mov	r5, r1
   1d1be:	9220      	str	r2, [sp, #128]	@ 0x80
   1d1c0:	992f      	ldr	r1, [sp, #188]	@ 0xbc
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   1d1c2:	931d      	str	r3, [sp, #116]	@ 0x74
   1d1c4:	f340 8238 	ble.w	1d638 <arm_nn_mat_mult_nt_t_s8+0x498>
        {
            lhs_offset_contribution0 += bias[rhs_rows_idx];
            lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
        }

        int32_t lhs_rows_idx = lhs_rows >> 1;
   1d1c8:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
   1d1ca:	9f32      	ldr	r7, [sp, #200]	@ 0xc8

            dst_ptr[0] = (q7_t)res00;
            dst_ptr[1] = (q7_t)res01;
        }

        rhs += 2 * rhs_cols;
   1d1cc:	950f      	str	r5, [sp, #60]	@ 0x3c
        int32_t lhs_rows_idx = lhs_rows >> 1;
   1d1ce:	1058      	asrs	r0, r3, #1
   1d1d0:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
   1d1d2:	3b10      	subs	r3, #16
   1d1d4:	f023 030f 	bic.w	r3, r3, #15
   1d1d8:	3310      	adds	r3, #16
   1d1da:	930e      	str	r3, [sp, #56]	@ 0x38
   1d1dc:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
   1d1de:	1e5e      	subs	r6, r3, #1
   1d1e0:	fb0b f300 	mul.w	r3, fp, r0
   1d1e4:	ebcb 0343 	rsb	r3, fp, r3, lsl #1
   1d1e8:	eb05 0e06 	add.w	lr, r5, r6
   1d1ec:	9614      	str	r6, [sp, #80]	@ 0x50
   1d1ee:	931f      	str	r3, [sp, #124]	@ 0x7c
   1d1f0:	1d26      	adds	r6, r4, #4
   1d1f2:	f06f 0303 	mvn.w	r3, #3
   1d1f6:	1bdb      	subs	r3, r3, r7
   1d1f8:	9607      	str	r6, [sp, #28]
   1d1fa:	1d0e      	adds	r6, r1, #4
   1d1fc:	461a      	mov	r2, r3
   1d1fe:	9606      	str	r6, [sp, #24]
        rhs += 2 * rhs_cols;
   1d200:	007b      	lsls	r3, r7, #1
   1d202:	ea4f 064b 	mov.w	r6, fp, lsl #1
   1d206:	9f30      	ldr	r7, [sp, #192]	@ 0xc0
   1d208:	9612      	str	r6, [sp, #72]	@ 0x48
   1d20a:	9e32      	ldr	r6, [sp, #200]	@ 0xc8
   1d20c:	9321      	str	r3, [sp, #132]	@ 0x84
   1d20e:	f007 0701 	and.w	r7, r7, #1
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   1d212:	f04f 0800 	mov.w	r8, #0
   1d216:	e9cd 5922 	strd	r5, r9, [sp, #136]	@ 0x88
   1d21a:	971e      	str	r7, [sp, #120]	@ 0x78
   1d21c:	3604      	adds	r6, #4
   1d21e:	eb09 070b 	add.w	r7, r9, fp
   1d222:	f8dd 9080 	ldr.w	r9, [sp, #128]	@ 0x80
   1d226:	f8dd b0c8 	ldr.w	fp, [sp, #200]	@ 0xc8
   1d22a:	9602      	str	r6, [sp, #8]
   1d22c:	e9cd e815 	strd	lr, r8, [sp, #84]	@ 0x54
   1d230:	469c      	mov	ip, r3
   1d232:	46d0      	mov	r8, sl
   1d234:	4686      	mov	lr, r0
   1d236:	4692      	mov	sl, r2
   1d238:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
        for (int32_t x = 0; x < rhs_cols; ++x)
   1d23a:	f1bb 0f00 	cmp.w	fp, #0
   1d23e:	eba7 0303 	sub.w	r3, r7, r3
   1d242:	9308      	str	r3, [sp, #32]
   1d244:	f340 836d 	ble.w	1d922 <arm_nn_mat_mult_nt_t_s8+0x782>
   1d248:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
   1d24a:	9d15      	ldr	r5, [sp, #84]	@ 0x54
        q31_t lhs_offset_contribution1 = 0;
   1d24c:	2200      	movs	r2, #0
   1d24e:	3b01      	subs	r3, #1
        for (int32_t x = 0; x < rhs_cols; ++x)
   1d250:	4628      	mov	r0, r5
        q31_t lhs_offset_contribution0 = 0;
   1d252:	4611      	mov	r1, r2
            lhs_offset_contribution0 += rhs[x];
   1d254:	f913 4f01 	ldrsb.w	r4, [r3, #1]!
   1d258:	4421      	add	r1, r4
            lhs_offset_contribution1 += rhs[x + rhs_cols];
   1d25a:	f910 4f01 	ldrsb.w	r4, [r0, #1]!
        for (int32_t x = 0; x < rhs_cols; ++x)
   1d25e:	429d      	cmp	r5, r3
            lhs_offset_contribution1 += rhs[x + rhs_cols];
   1d260:	4422      	add	r2, r4
        for (int32_t x = 0; x < rhs_cols; ++x)
   1d262:	d1f7      	bne.n	1d254 <arm_nn_mat_mult_nt_t_s8+0xb4>
        lhs_offset_contribution0 *= lhs_offset;
   1d264:	fb01 f308 	mul.w	r3, r1, r8
   1d268:	9310      	str	r3, [sp, #64]	@ 0x40
        lhs_offset_contribution1 *= lhs_offset;
   1d26a:	fb02 f308 	mul.w	r3, r2, r8
   1d26e:	9311      	str	r3, [sp, #68]	@ 0x44
        if (bias)
   1d270:	f1b9 0f00 	cmp.w	r9, #0
   1d274:	d00c      	beq.n	1d290 <arm_nn_mat_mult_nt_t_s8+0xf0>
            lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
   1d276:	9a16      	ldr	r2, [sp, #88]	@ 0x58
   1d278:	9911      	ldr	r1, [sp, #68]	@ 0x44
   1d27a:	f109 0304 	add.w	r3, r9, #4
   1d27e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1d282:	4419      	add	r1, r3
            lhs_offset_contribution0 += bias[rhs_rows_idx];
   1d284:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
   1d288:	9a10      	ldr	r2, [sp, #64]	@ 0x40
            lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
   1d28a:	9111      	str	r1, [sp, #68]	@ 0x44
            lhs_offset_contribution0 += bias[rhs_rows_idx];
   1d28c:	441a      	add	r2, r3
   1d28e:	9210      	str	r2, [sp, #64]	@ 0x40
        while (lhs_rows_idx)
   1d290:	f1be 0f00 	cmp.w	lr, #0
   1d294:	f000 8343 	beq.w	1d91e <arm_nn_mat_mult_nt_t_s8+0x77e>
   1d298:	1c7b      	adds	r3, r7, #1
   1d29a:	930a      	str	r3, [sp, #40]	@ 0x28
   1d29c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
   1d2a0:	e9cd ce17 	strd	ip, lr, [sp, #92]	@ 0x5c
   1d2a4:	4413      	add	r3, r2
   1d2a6:	e9cd 7919 	strd	r7, r9, [sp, #100]	@ 0x64
   1d2aa:	9313      	str	r3, [sp, #76]	@ 0x4c
   1d2ac:	f1ab 0504 	sub.w	r5, fp, #4
   1d2b0:	f10b 0308 	add.w	r3, fp, #8
        const q7_t *lhs_ptr = &lhs[0];
   1d2b4:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
   1d2b6:	f8cd a06c 	str.w	sl, [sp, #108]	@ 0x6c
        int32_t lhs_rows_idx = lhs_rows >> 1;
   1d2ba:	f8cd e024 	str.w	lr, [sp, #36]	@ 0x24
   1d2be:	9301      	str	r3, [sp, #4]
   1d2c0:	f8cd 80cc 	str.w	r8, [sp, #204]	@ 0xcc
   1d2c4:	46aa      	mov	sl, r5
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   1d2c6:	f1bb 0f0f 	cmp.w	fp, #15
   1d2ca:	f340 821a 	ble.w	1d702 <arm_nn_mat_mult_nt_t_s8+0x562>
   1d2ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
            q31_t res10 = lhs_offset_contribution0;
   1d2d0:	9e10      	ldr	r6, [sp, #64]	@ 0x40
            const q7_t *rhs_ptr = &rhs[0];
   1d2d2:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
   1d2d4:	18e3      	adds	r3, r4, r3
   1d2d6:	9303      	str	r3, [sp, #12]
            q31_t res11 = lhs_offset_contribution1;
   1d2d8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
            q31_t res10 = lhs_offset_contribution0;
   1d2da:	4632      	mov	r2, r6
            q31_t res11 = lhs_offset_contribution1;
   1d2dc:	4619      	mov	r1, r3
    memcpy(&val, *in_q7, 4);
   1d2de:	6838      	ldr	r0, [r7, #0]
   1d2e0:	f8d4 c000 	ldr.w	ip, [r4]
    memcpy(&val, in_q7, 4);
   1d2e4:	f857 500b 	ldr.w	r5, [r7, fp]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1d2e8:	fa2f fe80 	sxtb16	lr, r0
   1d2ec:	fa2f f88c 	sxtb16	r8, ip
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1d2f0:	fa2f f090 	sxtb16	r0, r0, ror #8
   1d2f4:	fa2f fc9c 	sxtb16	ip, ip, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1d2f8:	fb28 660e 	smlad	r6, r8, lr, r6
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1d2fc:	fa2f f985 	sxtb16	r9, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1d300:	fb2c 6600 	smlad	r6, ip, r0, r6
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1d304:	fa2f f595 	sxtb16	r5, r5, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1d308:	fb28 3809 	smlad	r8, r8, r9, r3
   1d30c:	fb2c 8c05 	smlad	ip, ip, r5, r8
   1d310:	f854 300b 	ldr.w	r3, [r4, fp]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1d314:	fa2f f883 	sxtb16	r8, r3
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1d318:	fa2f f393 	sxtb16	r3, r3, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1d31c:	fb28 2e0e 	smlad	lr, r8, lr, r2
   1d320:	fb28 1809 	smlad	r8, r8, r9, r1
   1d324:	fb23 ee00 	smlad	lr, r3, r0, lr
    memcpy(&val, *in_q7, 4);
   1d328:	6878      	ldr	r0, [r7, #4]
   1d32a:	fb23 8105 	smlad	r1, r3, r5, r8
    memcpy(&val, in_q7, 4);
   1d32e:	9b02      	ldr	r3, [sp, #8]
    memcpy(&val, *in_q7, 4);
   1d330:	6862      	ldr	r2, [r4, #4]
    memcpy(&val, in_q7, 4);
   1d332:	58fb      	ldr	r3, [r7, r3]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1d334:	fa2f f580 	sxtb16	r5, r0
   1d338:	fa2f f882 	sxtb16	r8, r2
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1d33c:	fa2f f090 	sxtb16	r0, r0, ror #8
   1d340:	fa2f f292 	sxtb16	r2, r2, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1d344:	fb28 6605 	smlad	r6, r8, r5, r6
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1d348:	fa2f f983 	sxtb16	r9, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1d34c:	fb22 6600 	smlad	r6, r2, r0, r6
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1d350:	fa2f f393 	sxtb16	r3, r3, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1d354:	fb28 c809 	smlad	r8, r8, r9, ip
   1d358:	fb22 8c03 	smlad	ip, r2, r3, r8
   1d35c:	9a02      	ldr	r2, [sp, #8]
   1d35e:	58a2      	ldr	r2, [r4, r2]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1d360:	fa2f f882 	sxtb16	r8, r2
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1d364:	fa2f f292 	sxtb16	r2, r2, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1d368:	fb28 e505 	smlad	r5, r8, r5, lr
   1d36c:	fb28 1809 	smlad	r8, r8, r9, r1
   1d370:	fb22 5500 	smlad	r5, r2, r0, r5
    memcpy(&val, *in_q7, 4);
   1d374:	68b9      	ldr	r1, [r7, #8]
   1d376:	fb22 8203 	smlad	r2, r2, r3, r8
    memcpy(&val, in_q7, 4);
   1d37a:	9b01      	ldr	r3, [sp, #4]
    memcpy(&val, *in_q7, 4);
   1d37c:	68a0      	ldr	r0, [r4, #8]
    memcpy(&val, in_q7, 4);
   1d37e:	58fb      	ldr	r3, [r7, r3]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1d380:	fa2f f881 	sxtb16	r8, r1
   1d384:	fa2f fe80 	sxtb16	lr, r0
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1d388:	fa2f f191 	sxtb16	r1, r1, ror #8
   1d38c:	fa2f f090 	sxtb16	r0, r0, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1d390:	fb2e 6608 	smlad	r6, lr, r8, r6
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1d394:	fa2f f983 	sxtb16	r9, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1d398:	fb20 6601 	smlad	r6, r0, r1, r6
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1d39c:	fa2f f393 	sxtb16	r3, r3, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1d3a0:	fb2e ce09 	smlad	lr, lr, r9, ip
   1d3a4:	fb20 ee03 	smlad	lr, r0, r3, lr
   1d3a8:	9801      	ldr	r0, [sp, #4]
   1d3aa:	5820      	ldr	r0, [r4, r0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1d3ac:	fa2f fc80 	sxtb16	ip, r0
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1d3b0:	fa2f f090 	sxtb16	r0, r0, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1d3b4:	fb2c 5808 	smlad	r8, ip, r8, r5
   1d3b8:	fb2c 2509 	smlad	r5, ip, r9, r2
   1d3bc:	fb20 8c01 	smlad	ip, r0, r1, r8
    memcpy(&val, *in_q7, 4);
   1d3c0:	68fa      	ldr	r2, [r7, #12]
    *in_q7 += 4;
   1d3c2:	3710      	adds	r7, #16
   1d3c4:	fb20 5003 	smlad	r0, r0, r3, r5
    memcpy(&val, *in_q7, 4);
   1d3c8:	68e3      	ldr	r3, [r4, #12]
    memcpy(&val, in_q7, 4);
   1d3ca:	f857 500a 	ldr.w	r5, [r7, sl]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1d3ce:	fa2f f882 	sxtb16	r8, r2
    *in_q7 += 4;
   1d3d2:	3410      	adds	r4, #16
   1d3d4:	fa2f f183 	sxtb16	r1, r3
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1d3d8:	fa2f f292 	sxtb16	r2, r2, ror #8
   1d3dc:	fa2f f393 	sxtb16	r3, r3, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1d3e0:	fb21 6608 	smlad	r6, r1, r8, r6
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1d3e4:	fa2f f985 	sxtb16	r9, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1d3e8:	fb23 6602 	smlad	r6, r3, r2, r6
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1d3ec:	fa2f f595 	sxtb16	r5, r5, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1d3f0:	fb21 e109 	smlad	r1, r1, r9, lr
   1d3f4:	fb23 1305 	smlad	r3, r3, r5, r1
    memcpy(&val, in_q7, 4);
   1d3f8:	f854 100a 	ldr.w	r1, [r4, sl]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1d3fc:	fa2f fe81 	sxtb16	lr, r1
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1d400:	fa2f f191 	sxtb16	r1, r1, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1d404:	fb2e c808 	smlad	r8, lr, r8, ip
   1d408:	fb2e 0e09 	smlad	lr, lr, r9, r0
   1d40c:	fb21 8202 	smlad	r2, r1, r2, r8
   1d410:	fb21 e105 	smlad	r1, r1, r5, lr
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   1d414:	9803      	ldr	r0, [sp, #12]
   1d416:	4284      	cmp	r4, r0
   1d418:	f47f af61 	bne.w	1d2de <arm_nn_mat_mult_nt_t_s8+0x13e>
   1d41c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
   1d41e:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   1d420:	45bb      	cmp	fp, r7
   1d422:	dd1e      	ble.n	1d462 <arm_nn_mat_mult_nt_t_s8+0x2c2>
   1d424:	9c14      	ldr	r4, [sp, #80]	@ 0x50
   1d426:	eb00 0e04 	add.w	lr, r0, r4
   1d42a:	9c03      	ldr	r4, [sp, #12]
   1d42c:	3801      	subs	r0, #1
   1d42e:	ebae 0e07 	sub.w	lr, lr, r7
   1d432:	3c01      	subs	r4, #1
                q7_t rhs_value0 = rhs_ptr[0];
   1d434:	f910 8f01 	ldrsb.w	r8, [r0, #1]!
                q7_t lhs_value = lhs_ptr[0];
   1d438:	f914 5f01 	ldrsb.w	r5, [r4, #1]!
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
   1d43c:	f910 c00b 	ldrsb.w	ip, [r0, fp]
                res00 += lhs_value * rhs_value0;
   1d440:	fb05 6608 	mla	r6, r5, r8, r6
                res01 += lhs_value * rhs_value1;
   1d444:	fb05 330c 	mla	r3, r5, ip, r3
                lhs_value = lhs_ptr[rhs_cols];
   1d448:	f914 500b 	ldrsb.w	r5, [r4, fp]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   1d44c:	4586      	cmp	lr, r0
                res10 += lhs_value * rhs_value0;
   1d44e:	fb08 2205 	mla	r2, r8, r5, r2
                res11 += lhs_value * rhs_value1;
   1d452:	fb0c 1105 	mla	r1, ip, r5, r1
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   1d456:	d1ed      	bne.n	1d434 <arm_nn_mat_mult_nt_t_s8+0x294>
   1d458:	9803      	ldr	r0, [sp, #12]
   1d45a:	ebab 0707 	sub.w	r7, fp, r7
   1d45e:	4438      	add	r0, r7
   1d460:	9003      	str	r0, [sp, #12]
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
   1d462:	9806      	ldr	r0, [sp, #24]
   1d464:	f850 5c04 	ldr.w	r5, [r0, #-4]
   1d468:	9807      	ldr	r0, [sp, #28]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d46a:	ea25 79e5 	bic.w	r9, r5, r5, asr #31
   1d46e:	f850 7c04 	ldr.w	r7, [r0, #-4]
   1d472:	970b      	str	r7, [sp, #44]	@ 0x2c
   1d474:	fa06 f609 	lsl.w	r6, r6, r9
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1d478:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
   1d47c:	2000      	movs	r0, #0
   1d47e:	fbc6 4007 	smlal	r4, r0, r6, r7
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d482:	426d      	negs	r5, r5
    result = (int32_t)(mult.long_long >> 31);
   1d484:	0fe4      	lsrs	r4, r4, #31
   1d486:	ea44 0440 	orr.w	r4, r4, r0, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d48a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1d48e:	2001      	movs	r0, #1
   1d490:	fa00 f705 	lsl.w	r7, r0, r5
   1d494:	3f01      	subs	r7, #1
    int32_t remainder = remainder_mask & dividend;
   1d496:	ea04 0007 	and.w	r0, r4, r7
    q31_t threshold = remainder_mask >> 1;
   1d49a:	ea4f 0e67 	mov.w	lr, r7, asr #1
    if (result < 0)
   1d49e:	412c      	asrs	r4, r5
   1d4a0:	9405      	str	r4, [sp, #20]
        threshold++;
   1d4a2:	bf4c      	ite	mi
   1d4a4:	f10e 0401 	addmi.w	r4, lr, #1
    q31_t threshold = remainder_mask >> 1;
   1d4a8:	4674      	movpl	r4, lr
    if (remainder > threshold)
   1d4aa:	42a0      	cmp	r0, r4
   1d4ac:	dd02      	ble.n	1d4b4 <arm_nn_mat_mult_nt_t_s8+0x314>
        result++;
   1d4ae:	9805      	ldr	r0, [sp, #20]
   1d4b0:	3001      	adds	r0, #1
   1d4b2:	9005      	str	r0, [sp, #20]
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
   1d4b4:	9806      	ldr	r0, [sp, #24]
   1d4b6:	6804      	ldr	r4, [r0, #0]
   1d4b8:	9807      	ldr	r0, [sp, #28]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d4ba:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
   1d4be:	6800      	ldr	r0, [r0, #0]
   1d4c0:	900c      	str	r0, [sp, #48]	@ 0x30
   1d4c2:	fa03 f30c 	lsl.w	r3, r3, ip
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1d4c6:	f04f 4880 	mov.w	r8, #1073741824	@ 0x40000000
   1d4ca:	2600      	movs	r6, #0
   1d4cc:	fbc3 8600 	smlal	r8, r6, r3, r0
   1d4d0:	4640      	mov	r0, r8
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d4d2:	4264      	negs	r4, r4
   1d4d4:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1d4d8:	2301      	movs	r3, #1
    result = (int32_t)(mult.long_long >> 31);
   1d4da:	0fc0      	lsrs	r0, r0, #31
   1d4dc:	ea40 0046 	orr.w	r0, r0, r6, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1d4e0:	fa03 f604 	lsl.w	r6, r3, r4
   1d4e4:	3e01      	subs	r6, #1
    int32_t remainder = remainder_mask & dividend;
   1d4e6:	ea00 0306 	and.w	r3, r0, r6
   1d4ea:	930d      	str	r3, [sp, #52]	@ 0x34
    q31_t threshold = remainder_mask >> 1;
   1d4ec:	1073      	asrs	r3, r6, #1
    if (result < 0)
   1d4ee:	4120      	asrs	r0, r4
    q31_t threshold = remainder_mask >> 1;
   1d4f0:	9304      	str	r3, [sp, #16]
        threshold++;
   1d4f2:	bf4c      	ite	mi
   1d4f4:	f103 0801 	addmi.w	r8, r3, #1
    q31_t threshold = remainder_mask >> 1;
   1d4f8:	f8dd 8010 	ldrpl.w	r8, [sp, #16]
    if (remainder > threshold)
   1d4fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   1d4fe:	4543      	cmp	r3, r8
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1d500:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d502:	fa02 f209 	lsl.w	r2, r2, r9
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1d506:	f04f 4880 	mov.w	r8, #1073741824	@ 0x40000000
   1d50a:	f04f 0900 	mov.w	r9, #0
   1d50e:	fbc2 8903 	smlal	r8, r9, r2, r3
   1d512:	4643      	mov	r3, r8
    result = (int32_t)(mult.long_long >> 31);
   1d514:	ea4f 73d3 	mov.w	r3, r3, lsr #31
   1d518:	ea43 0349 	orr.w	r3, r3, r9, lsl #1
    int32_t remainder = remainder_mask & dividend;
   1d51c:	ea07 0703 	and.w	r7, r7, r3
        result++;
   1d520:	bfc8      	it	gt
   1d522:	3001      	addgt	r0, #1
    if (result < 0)
   1d524:	412b      	asrs	r3, r5
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1d526:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d528:	fa01 fc0c 	lsl.w	ip, r1, ip
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1d52c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
   1d530:	f04f 0100 	mov.w	r1, #0
   1d534:	fbcc 2105 	smlal	r2, r1, ip, r5
        threshold++;
   1d538:	bf48      	it	mi
   1d53a:	f10e 0e01 	addmi.w	lr, lr, #1
    result = (int32_t)(mult.long_long >> 31);
   1d53e:	0fd2      	lsrs	r2, r2, #31
    if (remainder > threshold)
   1d540:	4577      	cmp	r7, lr
    result = (int32_t)(mult.long_long >> 31);
   1d542:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
        result++;
   1d546:	bfc8      	it	gt
   1d548:	3301      	addgt	r3, #1
    int32_t remainder = remainder_mask & dividend;
   1d54a:	4016      	ands	r6, r2
    if (result < 0)
   1d54c:	4122      	asrs	r2, r4
   1d54e:	d502      	bpl.n	1d556 <arm_nn_mat_mult_nt_t_s8+0x3b6>
        threshold++;
   1d550:	9904      	ldr	r1, [sp, #16]
   1d552:	3101      	adds	r1, #1
   1d554:	9104      	str	r1, [sp, #16]
    if (remainder > threshold)
   1d556:	9904      	ldr	r1, [sp, #16]
            res00 += dst_offset;
   1d558:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
   1d55a:	428e      	cmp	r6, r1
   1d55c:	9905      	ldr	r1, [sp, #20]
        result++;
   1d55e:	bfc8      	it	gt
   1d560:	3201      	addgt	r2, #1
   1d562:	4421      	add	r1, r4
            res01 += dst_offset;
   1d564:	4420      	add	r0, r4
            res10 += dst_offset;
   1d566:	4423      	add	r3, r4
            res11 += dst_offset;
   1d568:	4422      	add	r2, r4
            res00 = MAX(res00, activation_min);
   1d56a:	9c35      	ldr	r4, [sp, #212]	@ 0xd4
   1d56c:	42a1      	cmp	r1, r4
   1d56e:	bfb8      	it	lt
   1d570:	4621      	movlt	r1, r4
            res01 = MAX(res01, activation_min);
   1d572:	42a0      	cmp	r0, r4
   1d574:	bfb8      	it	lt
   1d576:	4620      	movlt	r0, r4
            res10 = MAX(res10, activation_min);
   1d578:	42a3      	cmp	r3, r4
   1d57a:	bfb8      	it	lt
   1d57c:	4623      	movlt	r3, r4
            res11 = MAX(res11, activation_min);
   1d57e:	42a2      	cmp	r2, r4
   1d580:	bfb8      	it	lt
   1d582:	4622      	movlt	r2, r4
            res00 = MIN(res00, activation_max);
   1d584:	9c36      	ldr	r4, [sp, #216]	@ 0xd8
   1d586:	42a1      	cmp	r1, r4
   1d588:	bfa8      	it	ge
   1d58a:	4621      	movge	r1, r4
            dst_ptr[0] = (q7_t)res00;
   1d58c:	9c08      	ldr	r4, [sp, #32]
   1d58e:	7021      	strb	r1, [r4, #0]
            res01 = MIN(res01, activation_max);
   1d590:	9936      	ldr	r1, [sp, #216]	@ 0xd8
   1d592:	4288      	cmp	r0, r1
   1d594:	bfa8      	it	ge
   1d596:	4608      	movge	r0, r1
            dst_ptr[1] = (q7_t)res01;
   1d598:	7060      	strb	r0, [r4, #1]
            res10 = MIN(res10, activation_max);
   1d59a:	9836      	ldr	r0, [sp, #216]	@ 0xd8
   1d59c:	4283      	cmp	r3, r0
   1d59e:	bfa8      	it	ge
   1d5a0:	4603      	movge	r3, r0
            dst_ptr[0] = (q7_t)res10;
   1d5a2:	980a      	ldr	r0, [sp, #40]	@ 0x28
   1d5a4:	f800 3c01 	strb.w	r3, [r0, #-1]
            res11 = MIN(res11, activation_max);
   1d5a8:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
   1d5aa:	429a      	cmp	r2, r3
   1d5ac:	bfa8      	it	ge
   1d5ae:	461a      	movge	r2, r3
            dst_ptr[1] = (q7_t)res11;
   1d5b0:	7002      	strb	r2, [r0, #0]
            dst_ptr += rhs_rows;
   1d5b2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
            dst_ptr[1] = (q7_t)res11;
   1d5b4:	4603      	mov	r3, r0
        while (lhs_rows_idx)
   1d5b6:	4413      	add	r3, r2
   1d5b8:	930a      	str	r3, [sp, #40]	@ 0x28
   1d5ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
            dst_ptr[1] = (q7_t)res01;
   1d5bc:	4621      	mov	r1, r4
            lhs_ptr += rhs_cols;
   1d5be:	9c03      	ldr	r4, [sp, #12]
   1d5c0:	4411      	add	r1, r2
        while (lhs_rows_idx)
   1d5c2:	3b01      	subs	r3, #1
   1d5c4:	9108      	str	r1, [sp, #32]
            lhs_ptr += rhs_cols;
   1d5c6:	445c      	add	r4, fp
        while (lhs_rows_idx)
   1d5c8:	9309      	str	r3, [sp, #36]	@ 0x24
   1d5ca:	f47f ae7c 	bne.w	1d2c6 <arm_nn_mat_mult_nt_t_s8+0x126>
   1d5ce:	e9dd 7919 	ldrd	r7, r9, [sp, #100]	@ 0x64
   1d5d2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
   1d5d4:	f8dd 80cc 	ldr.w	r8, [sp, #204]	@ 0xcc
   1d5d8:	f8dd a06c 	ldr.w	sl, [sp, #108]	@ 0x6c
   1d5dc:	e9dd ce17 	ldrd	ip, lr, [sp, #92]	@ 0x5c
   1d5e0:	443b      	add	r3, r7
   1d5e2:	9308      	str	r3, [sp, #32]
        if (lhs_rows % 2)
   1d5e4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
   1d5e6:	2b00      	cmp	r3, #0
   1d5e8:	f040 8093 	bne.w	1d712 <arm_nn_mat_mult_nt_t_s8+0x572>
        rhs += 2 * rhs_cols;
   1d5ec:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   1d5ee:	9b16      	ldr	r3, [sp, #88]	@ 0x58
        rhs += 2 * rhs_cols;
   1d5f0:	4462      	add	r2, ip
   1d5f2:	920f      	str	r2, [sp, #60]	@ 0x3c
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   1d5f4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
   1d5f6:	4462      	add	r2, ip
   1d5f8:	9215      	str	r2, [sp, #84]	@ 0x54
   1d5fa:	9a07      	ldr	r2, [sp, #28]
   1d5fc:	3208      	adds	r2, #8
   1d5fe:	9207      	str	r2, [sp, #28]
   1d600:	9a06      	ldr	r2, [sp, #24]
   1d602:	3208      	adds	r2, #8
   1d604:	9206      	str	r2, [sp, #24]
   1d606:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
   1d608:	3302      	adds	r3, #2
   1d60a:	4293      	cmp	r3, r2
   1d60c:	9316      	str	r3, [sp, #88]	@ 0x58
   1d60e:	f107 0702 	add.w	r7, r7, #2
   1d612:	f6ff ae11 	blt.w	1d238 <arm_nn_mat_mult_nt_t_s8+0x98>
   1d616:	f8dd b0c4 	ldr.w	fp, [sp, #196]	@ 0xc4
   1d61a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
   1d61c:	e9dd 5922 	ldrd	r5, r9, [sp, #136]	@ 0x88
   1d620:	f1ab 0302 	sub.w	r3, fp, #2
   1d624:	085b      	lsrs	r3, r3, #1
   1d626:	e9dd 412e 	ldrd	r4, r1, [sp, #184]	@ 0xb8
   1d62a:	fb03 2202 	mla	r2, r3, r2, r2
   1d62e:	3301      	adds	r3, #1
   1d630:	46c2      	mov	sl, r8
   1d632:	4415      	add	r5, r2
   1d634:	eb09 0943 	add.w	r9, r9, r3, lsl #1
        dst += 2;
    }

    if (rhs_rows % 2)
   1d638:	f01b 0f01 	tst.w	fp, #1
   1d63c:	d05d      	beq.n	1d6fa <arm_nn_mat_mult_nt_t_s8+0x55a>
    {
        const q7_t *lhs_ptr = &lhs[0];
        q7_t *dst_ptr = &dst[0];

        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
   1d63e:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
   1d640:	2b00      	cmp	r3, #0
   1d642:	dd5a      	ble.n	1d6fa <arm_nn_mat_mult_nt_t_s8+0x55a>
        {
            const q7_t *rhs_ptr = &rhs[0];
            q31_t res00 = 0;
            if (bias)
            {
                res00 = bias[rhs_rows - 1];
   1d644:	9a20      	ldr	r2, [sp, #128]	@ 0x80
    const q31_t remainder_mask = (1 << exponent) - 1;
   1d646:	f8cd b0c4 	str.w	fp, [sp, #196]	@ 0xc4
   1d64a:	f10b 4380 	add.w	r3, fp, #1073741824	@ 0x40000000
   1d64e:	3b01      	subs	r3, #1
                ++rhs_ptr;
                ++lhs_ptr;
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
   1d650:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
   1d654:	2000      	movs	r0, #0
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
   1d656:	eb01 0483 	add.w	r4, r1, r3, lsl #2
   1d65a:	f8dd b0c8 	ldr.w	fp, [sp, #200]	@ 0xc8
   1d65e:	9501      	str	r5, [sp, #4]
                res00 = bias[rhs_rows - 1];
   1d660:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1d664:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
   1d666:	9302      	str	r3, [sp, #8]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1d668:	f04f 4e80 	mov.w	lr, #1073741824	@ 0x40000000
   1d66c:	4680      	mov	r8, r0
            if (bias)
   1d66e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
   1d670:	2b00      	cmp	r3, #0
   1d672:	f000 815a 	beq.w	1d92a <arm_nn_mat_mult_nt_t_s8+0x78a>
                res00 = bias[rhs_rows - 1];
   1d676:	9b02      	ldr	r3, [sp, #8]
   1d678:	6819      	ldr	r1, [r3, #0]
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   1d67a:	f1bb 0f00 	cmp.w	fp, #0
   1d67e:	dd0c      	ble.n	1d69a <arm_nn_mat_mult_nt_t_s8+0x4fa>
   1d680:	9b01      	ldr	r3, [sp, #4]
   1d682:	eb02 070b 	add.w	r7, r2, fp
   1d686:	1e5d      	subs	r5, r3, #1
                q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   1d688:	f912 3b01 	ldrsb.w	r3, [r2], #1
                q31_t rhs_value = rhs_ptr[0];
   1d68c:	f915 6f01 	ldrsb.w	r6, [r5, #1]!
                q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   1d690:	4453      	add	r3, sl
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   1d692:	42ba      	cmp	r2, r7
                res00 += lhs_value * rhs_value;
   1d694:	fb06 1103 	mla	r1, r6, r3, r1
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   1d698:	d1f6      	bne.n	1d688 <arm_nn_mat_mult_nt_t_s8+0x4e8>
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
   1d69a:	6825      	ldr	r5, [r4, #0]
   1d69c:	f8dc 3000 	ldr.w	r3, [ip]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d6a0:	ea25 76e5 	bic.w	r6, r5, r5, asr #31
   1d6a4:	fa01 f606 	lsl.w	r6, r1, r6
   1d6a8:	426d      	negs	r5, r5
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1d6aa:	4671      	mov	r1, lr
   1d6ac:	4647      	mov	r7, r8
   1d6ae:	fbc6 1703 	smlal	r1, r7, r6, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d6b2:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1d6b6:	2301      	movs	r3, #1
    result = (int32_t)(mult.long_long >> 31);
   1d6b8:	0fc9      	lsrs	r1, r1, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1d6ba:	40ab      	lsls	r3, r5
    result = (int32_t)(mult.long_long >> 31);
   1d6bc:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1d6c0:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
   1d6c2:	ea01 0603 	and.w	r6, r1, r3
    if (result < 0)
   1d6c6:	4129      	asrs	r1, r5
    q31_t threshold = remainder_mask >> 1;
   1d6c8:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
   1d6cc:	bf48      	it	mi
   1d6ce:	3301      	addmi	r3, #1
    if (remainder > threshold)
   1d6d0:	429e      	cmp	r6, r3

            // Add offset
            res00 += dst_offset;
   1d6d2:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
        result++;
   1d6d4:	bfc8      	it	gt
   1d6d6:	3101      	addgt	r1, #1
   1d6d8:	440b      	add	r3, r1

            // Clamp the result
            res00 = MAX(res00, activation_min);
   1d6da:	9935      	ldr	r1, [sp, #212]	@ 0xd4
   1d6dc:	428b      	cmp	r3, r1
   1d6de:	bfb8      	it	lt
   1d6e0:	460b      	movlt	r3, r1
            res00 = MIN(res00, activation_max);
   1d6e2:	9936      	ldr	r1, [sp, #216]	@ 0xd8
   1d6e4:	428b      	cmp	r3, r1
   1d6e6:	bfa8      	it	ge
   1d6e8:	460b      	movge	r3, r1

            dst_ptr[0] = (q7_t)res00;
   1d6ea:	f889 3000 	strb.w	r3, [r9]
            dst_ptr += rhs_rows;
   1d6ee:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
   1d6f0:	4499      	add	r9, r3
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
   1d6f2:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
   1d6f4:	3001      	adds	r0, #1
   1d6f6:	4283      	cmp	r3, r0
   1d6f8:	d1b9      	bne.n	1d66e <arm_nn_mat_mult_nt_t_s8+0x4ce>
            dst_ptr += rhs_rows;
        }
    }
#endif
    return ARM_CMSIS_NN_SUCCESS;
}
   1d6fa:	2000      	movs	r0, #0
   1d6fc:	b025      	add	sp, #148	@ 0x94
   1d6fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            q31_t res11 = lhs_offset_contribution1;
   1d702:	9b11      	ldr	r3, [sp, #68]	@ 0x44
            q31_t res10 = lhs_offset_contribution0;
   1d704:	9e10      	ldr	r6, [sp, #64]	@ 0x40
            const q7_t *rhs_ptr = &rhs[0];
   1d706:	980f      	ldr	r0, [sp, #60]	@ 0x3c
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   1d708:	9403      	str	r4, [sp, #12]
            q31_t res11 = lhs_offset_contribution1;
   1d70a:	4619      	mov	r1, r3
            q31_t res10 = lhs_offset_contribution0;
   1d70c:	4632      	mov	r2, r6
            int32_t rhs_cols_idx = 0;
   1d70e:	2700      	movs	r7, #0
   1d710:	e686      	b.n	1d420 <arm_nn_mat_mult_nt_t_s8+0x280>
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   1d712:	f1bb 0f0f 	cmp.w	fp, #15
   1d716:	f340 810a 	ble.w	1d92e <arm_nn_mat_mult_nt_t_s8+0x78e>
   1d71a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
   1d71c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
   1d71e:	f8cd c004 	str.w	ip, [sp, #4]
   1d722:	18a6      	adds	r6, r4, r2
   1d724:	e9cd 7904 	strd	r7, r9, [sp, #16]
   1d728:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	@ 0x40
   1d72c:	3305      	adds	r3, #5
   1d72e:	f8cd e00c 	str.w	lr, [sp, #12]
   1d732:	f8cd b0c8 	str.w	fp, [sp, #200]	@ 0xc8
    memcpy(&val, *in_q7, 4);
   1d736:	f85a e003 	ldr.w	lr, [sl, r3]
    memcpy(&val, in_q7, 4);
   1d73a:	f853 5c04 	ldr.w	r5, [r3, #-4]
    memcpy(&val, *in_q7, 4);
   1d73e:	6820      	ldr	r0, [r4, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1d740:	fa2f fb8e 	sxtb16	fp, lr
   1d744:	eb0a 0703 	add.w	r7, sl, r3
   1d748:	fa2f fc80 	sxtb16	ip, r0
   1d74c:	fa2f f985 	sxtb16	r9, r5
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1d750:	fa2f fe9e 	sxtb16	lr, lr, ror #8
   1d754:	fa2f f090 	sxtb16	r0, r0, ror #8
   1d758:	fa2f f595 	sxtb16	r5, r5, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1d75c:	fb2c 1b0b 	smlad	fp, ip, fp, r1
   1d760:	fb20 b10e 	smlad	r1, r0, lr, fp
   1d764:	fb2c 2c09 	smlad	ip, ip, r9, r2
   1d768:	fb20 c005 	smlad	r0, r0, r5, ip
   1d76c:	687d      	ldr	r5, [r7, #4]
    memcpy(&val, in_q7, 4);
   1d76e:	f8d3 c000 	ldr.w	ip, [r3]
    memcpy(&val, *in_q7, 4);
   1d772:	6862      	ldr	r2, [r4, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1d774:	fa2f fb85 	sxtb16	fp, r5
   1d778:	fa2f fe82 	sxtb16	lr, r2
   1d77c:	fa2f f98c 	sxtb16	r9, ip
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1d780:	fa2f f595 	sxtb16	r5, r5, ror #8
   1d784:	fa2f f292 	sxtb16	r2, r2, ror #8
   1d788:	fa2f fc9c 	sxtb16	ip, ip, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1d78c:	fb2e 1b0b 	smlad	fp, lr, fp, r1
   1d790:	fb22 b505 	smlad	r5, r2, r5, fp
   1d794:	fb2e 0e09 	smlad	lr, lr, r9, r0
   1d798:	fb22 e20c 	smlad	r2, r2, ip, lr
   1d79c:	f8d7 9008 	ldr.w	r9, [r7, #8]
    memcpy(&val, in_q7, 4);
   1d7a0:	f8d3 e004 	ldr.w	lr, [r3, #4]
    memcpy(&val, *in_q7, 4);
   1d7a4:	f8d4 c008 	ldr.w	ip, [r4, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1d7a8:	fa2f f089 	sxtb16	r0, r9
   1d7ac:	fa2f f18c 	sxtb16	r1, ip
   1d7b0:	fa2f fb8e 	sxtb16	fp, lr
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1d7b4:	fa2f f999 	sxtb16	r9, r9, ror #8
   1d7b8:	fa2f fc9c 	sxtb16	ip, ip, ror #8
   1d7bc:	fa2f fe9e 	sxtb16	lr, lr, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1d7c0:	fb21 5000 	smlad	r0, r1, r0, r5
   1d7c4:	fb2c 0009 	smlad	r0, ip, r9, r0
   1d7c8:	fb21 210b 	smlad	r1, r1, fp, r2
   1d7cc:	fb2c 150e 	smlad	r5, ip, lr, r1
   1d7d0:	68f9      	ldr	r1, [r7, #12]
   1d7d2:	68e2      	ldr	r2, [r4, #12]
    memcpy(&val, in_q7, 4);
   1d7d4:	689f      	ldr	r7, [r3, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1d7d6:	fa2f f981 	sxtb16	r9, r1
    *in_q7 += 4;
   1d7da:	3410      	adds	r4, #16
   1d7dc:	fa2f fc82 	sxtb16	ip, r2
   1d7e0:	fa2f fe87 	sxtb16	lr, r7
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1d7e4:	fa2f f191 	sxtb16	r1, r1, ror #8
   1d7e8:	fa2f f292 	sxtb16	r2, r2, ror #8
   1d7ec:	fa2f f797 	sxtb16	r7, r7, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1d7f0:	fb2c 0909 	smlad	r9, ip, r9, r0
   1d7f4:	fb22 9101 	smlad	r1, r2, r1, r9
   1d7f8:	fb2c 5c0e 	smlad	ip, ip, lr, r5
   1d7fc:	fb22 c207 	smlad	r2, r2, r7, ip
   1d800:	42b4      	cmp	r4, r6
   1d802:	f103 0310 	add.w	r3, r3, #16
   1d806:	d196      	bne.n	1d736 <arm_nn_mat_mult_nt_t_s8+0x596>
   1d808:	e9cd 1210 	strd	r1, r2, [sp, #64]	@ 0x40
   1d80c:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	@ 0x38
   1d810:	e9dd 7904 	ldrd	r7, r9, [sp, #16]
   1d814:	f8dd c004 	ldr.w	ip, [sp, #4]
   1d818:	f8dd e00c 	ldr.w	lr, [sp, #12]
   1d81c:	f8dd b0c8 	ldr.w	fp, [sp, #200]	@ 0xc8
   1d820:	441a      	add	r2, r3
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   1d822:	459b      	cmp	fp, r3
   1d824:	dd19      	ble.n	1d85a <arm_nn_mat_mult_nt_t_s8+0x6ba>
   1d826:	ebab 0303 	sub.w	r3, fp, r3
   1d82a:	18f4      	adds	r4, r6, r3
   1d82c:	e9dd 0510 	ldrd	r0, r5, [sp, #64]	@ 0x40
   1d830:	9b14      	ldr	r3, [sp, #80]	@ 0x50
   1d832:	f8cd c004 	str.w	ip, [sp, #4]
   1d836:	1e51      	subs	r1, r2, #1
   1d838:	441a      	add	r2, r3
                q7_t lhs_value = lhs_ptr[0];
   1d83a:	f916 3b01 	ldrsb.w	r3, [r6], #1
                res00 += lhs_value * rhs_value0;
   1d83e:	f911 cf01 	ldrsb.w	ip, [r1, #1]!
   1d842:	fb13 000c 	smlabb	r0, r3, ip, r0
                res01 += lhs_value * rhs_value1;
   1d846:	f912 cf01 	ldrsb.w	ip, [r2, #1]!
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   1d84a:	42a6      	cmp	r6, r4
                res01 += lhs_value * rhs_value1;
   1d84c:	fb13 550c 	smlabb	r5, r3, ip, r5
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   1d850:	d1f3      	bne.n	1d83a <arm_nn_mat_mult_nt_t_s8+0x69a>
   1d852:	e9cd 0510 	strd	r0, r5, [sp, #64]	@ 0x40
   1d856:	f8dd c004 	ldr.w	ip, [sp, #4]
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
   1d85a:	9b06      	ldr	r3, [sp, #24]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d85c:	9810      	ldr	r0, [sp, #64]	@ 0x40
   1d85e:	f853 2c04 	ldr.w	r2, [r3, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1d862:	9b07      	ldr	r3, [sp, #28]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d864:	ea22 71e2 	bic.w	r1, r2, r2, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1d868:	f853 3c04 	ldr.w	r3, [r3, #-4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d86c:	4088      	lsls	r0, r1
   1d86e:	4601      	mov	r1, r0
   1d870:	4252      	negs	r2, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1d872:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
   1d876:	2000      	movs	r0, #0
   1d878:	fbc1 4003 	smlal	r4, r0, r1, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d87c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1d880:	2301      	movs	r3, #1
    result = (int32_t)(mult.long_long >> 31);
   1d882:	0fe1      	lsrs	r1, r4, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1d884:	4093      	lsls	r3, r2
    result = (int32_t)(mult.long_long >> 31);
   1d886:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1d88a:	3b01      	subs	r3, #1
    if (result < 0)
   1d88c:	fa51 f502 	asrs.w	r5, r1, r2
    int32_t remainder = remainder_mask & dividend;
   1d890:	ea01 0003 	and.w	r0, r1, r3
    q31_t threshold = remainder_mask >> 1;
   1d894:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
   1d898:	bf48      	it	mi
   1d89a:	3301      	addmi	r3, #1
    if (remainder > threshold)
   1d89c:	4298      	cmp	r0, r3
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
   1d89e:	9b06      	ldr	r3, [sp, #24]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d8a0:	9811      	ldr	r0, [sp, #68]	@ 0x44
   1d8a2:	681a      	ldr	r2, [r3, #0]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1d8a4:	9b07      	ldr	r3, [sp, #28]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d8a6:	ea22 71e2 	bic.w	r1, r2, r2, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1d8aa:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d8ac:	fa00 f001 	lsl.w	r0, r0, r1
   1d8b0:	4601      	mov	r1, r0
   1d8b2:	f1c2 0200 	rsb	r2, r2, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1d8b6:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
   1d8ba:	f04f 0000 	mov.w	r0, #0
   1d8be:	fbc1 4003 	smlal	r4, r0, r1, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d8c2:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1d8c6:	f04f 0101 	mov.w	r1, #1
   1d8ca:	fa01 f102 	lsl.w	r1, r1, r2
    result = (int32_t)(mult.long_long >> 31);
   1d8ce:	ea4f 73d4 	mov.w	r3, r4, lsr #31
   1d8d2:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1d8d6:	f101 31ff 	add.w	r1, r1, #4294967295	@ 0xffffffff
    int32_t remainder = remainder_mask & dividend;
   1d8da:	ea03 0001 	and.w	r0, r3, r1
        result++;
   1d8de:	bfc8      	it	gt
   1d8e0:	3501      	addgt	r5, #1
    q31_t threshold = remainder_mask >> 1;
   1d8e2:	1049      	asrs	r1, r1, #1
    if (result < 0)
   1d8e4:	4113      	asrs	r3, r2
        threshold++;
   1d8e6:	bf48      	it	mi
   1d8e8:	3101      	addmi	r1, #1
    if (remainder > threshold)
   1d8ea:	4288      	cmp	r0, r1
            res01 += dst_offset;
   1d8ec:	9934      	ldr	r1, [sp, #208]	@ 0xd0
            res00 += dst_offset;
   1d8ee:	9a34      	ldr	r2, [sp, #208]	@ 0xd0
        result++;
   1d8f0:	bfc8      	it	gt
   1d8f2:	3301      	addgt	r3, #1
            res01 += dst_offset;
   1d8f4:	440b      	add	r3, r1
            res00 = MAX(res00, activation_min);
   1d8f6:	9935      	ldr	r1, [sp, #212]	@ 0xd4
            res00 += dst_offset;
   1d8f8:	442a      	add	r2, r5
            res00 = MAX(res00, activation_min);
   1d8fa:	428a      	cmp	r2, r1
   1d8fc:	bfb8      	it	lt
   1d8fe:	460a      	movlt	r2, r1
            res01 = MAX(res01, activation_min);
   1d900:	428b      	cmp	r3, r1
   1d902:	bfb8      	it	lt
   1d904:	460b      	movlt	r3, r1
            res00 = MIN(res00, activation_max);
   1d906:	9936      	ldr	r1, [sp, #216]	@ 0xd8
   1d908:	428a      	cmp	r2, r1
   1d90a:	bfa8      	it	ge
   1d90c:	460a      	movge	r2, r1
            dst_ptr[0] = (q7_t)res00;
   1d90e:	9908      	ldr	r1, [sp, #32]
   1d910:	700a      	strb	r2, [r1, #0]
            res01 = MIN(res01, activation_max);
   1d912:	9a36      	ldr	r2, [sp, #216]	@ 0xd8
   1d914:	4293      	cmp	r3, r2
   1d916:	bfa8      	it	ge
   1d918:	4613      	movge	r3, r2
            dst_ptr[1] = (q7_t)res01;
   1d91a:	704b      	strb	r3, [r1, #1]
   1d91c:	e666      	b.n	1d5ec <arm_nn_mat_mult_nt_t_s8+0x44c>
        const q7_t *lhs_ptr = &lhs[0];
   1d91e:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
   1d920:	e660      	b.n	1d5e4 <arm_nn_mat_mult_nt_t_s8+0x444>
        for (int32_t x = 0; x < rhs_cols; ++x)
   1d922:	2300      	movs	r3, #0
   1d924:	e9cd 3310 	strd	r3, r3, [sp, #64]	@ 0x40
   1d928:	e4a2      	b.n	1d270 <arm_nn_mat_mult_nt_t_s8+0xd0>
            q31_t res00 = 0;
   1d92a:	9920      	ldr	r1, [sp, #128]	@ 0x80
   1d92c:	e6a5      	b.n	1d67a <arm_nn_mat_mult_nt_t_s8+0x4da>
            const q7_t *rhs_ptr = &rhs[0];
   1d92e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   1d930:	4626      	mov	r6, r4
            int32_t rhs_cols_idx = 0;
   1d932:	2300      	movs	r3, #0
   1d934:	e775      	b.n	1d822 <arm_nn_mat_mult_nt_t_s8+0x682>
   1d936:	bf00      	nop

0001d938 <arm_q7_to_q15_with_offset>:
 * @addtogroup nndata_convert
 * @{
 */

void arm_q7_to_q15_with_offset(const q7_t *src, q15_t *dst, uint32_t block_size, q15_t offset)
{
   1d938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    /*loop unrolling */
    block_cnt = block_size >> 2;

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time. */
    const q31_t offset_q15x2 = __PKHBT(offset, offset, 16);
   1d93c:	eac3 4603 	pkhbt	r6, r3, r3, lsl #16
    while (block_cnt > 0)
   1d940:	ea5f 0892 	movs.w	r8, r2, lsr #2
   1d944:	d025      	beq.n	1d992 <arm_q7_to_q15_with_offset+0x5a>
   1d946:	eb00 0588 	add.w	r5, r0, r8, lsl #2
   1d94a:	460c      	mov	r4, r1
    memcpy(&val, *in_q7, 4);
   1d94c:	f850 cb04 	ldr.w	ip, [r0], #4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   1d950:	fa26 fe8c 	sxtab16	lr, r6, ip
    *dest_q15 += 2;
   1d954:	3408      	adds	r4, #8
   1d956:	4285      	cmp	r5, r0
  return (op1 >> op2) | (op1 << (32U - op2));
   1d958:	ea4f 2c3c 	mov.w	ip, ip, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   1d95c:	fa26 fc8c 	sxtab16	ip, r6, ip

        /* Extract and sign extend each of the four q7 values to q15 */
        in_q15x2_1 = __SXTAB16(offset_q15x2, __ROR(in_q7x4, 8));
        in_q15x2_2 = __SXTAB16(offset_q15x2, in_q7x4);

        out_q15x2_2 = __PKHTB(in_q15x2_1, in_q15x2_2, 16);
   1d960:	eacc 472e 	pkhtb	r7, ip, lr, asr #16
        out_q15x2_1 = __PKHBT(in_q15x2_2, in_q15x2_1, 16);
   1d964:	eace 4e0c 	pkhbt	lr, lr, ip, lsl #16
    memcpy(*dest_q15, &val, 4);
   1d968:	f844 7c04 	str.w	r7, [r4, #-4]
   1d96c:	f844 ec08 	str.w	lr, [r4, #-8]
    while (block_cnt > 0)
   1d970:	d1ec      	bne.n	1d94c <arm_q7_to_q15_with_offset+0x14>
   1d972:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
    /* Run the below code for Cortex-M0 */
    /* Loop over block_size number of values */
    block_cnt = block_size;
#endif

    while (block_cnt > 0)
   1d976:	f012 0203 	ands.w	r2, r2, #3
   1d97a:	d008      	beq.n	1d98e <arm_q7_to_q15_with_offset+0x56>
    {
        *dst++ = (q15_t)*src++ + offset;
   1d97c:	b29b      	uxth	r3, r3
   1d97e:	442a      	add	r2, r5
   1d980:	f915 0b01 	ldrsb.w	r0, [r5], #1
   1d984:	4418      	add	r0, r3
    while (block_cnt > 0)
   1d986:	4295      	cmp	r5, r2
        *dst++ = (q15_t)*src++ + offset;
   1d988:	f821 0b02 	strh.w	r0, [r1], #2
    while (block_cnt > 0)
   1d98c:	d1f8      	bne.n	1d980 <arm_q7_to_q15_with_offset+0x48>

        /* Decrement the loop counter */
        block_cnt--;
    }
}
   1d98e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while (block_cnt > 0)
   1d992:	4605      	mov	r5, r0
   1d994:	e7ef      	b.n	1d976 <arm_q7_to_q15_with_offset+0x3e>
   1d996:	bf00      	nop

0001d998 <arm_nn_softmax_common_s8>:
                              const int32_t mult,
                              const int32_t shift,
                              const int32_t diff_min,
                              const bool int16_output,
                              void *output)
{
   1d998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d99c:	b09d      	sub	sp, #116	@ 0x74
   1d99e:	9302      	str	r3, [sp, #8]
   1d9a0:	f89d 30a0 	ldrb.w	r3, [sp, #160]	@ 0xa0
   1d9a4:	931a      	str	r3, [sp, #104]	@ 0x68
    const int32_t mask = (1 << shift);

    int32_t col = 0;
    int32_t row_idx;

    for (row_idx = 0; row_idx < num_rows; ++row_idx)
   1d9a6:	1e0b      	subs	r3, r1, #0
   1d9a8:	931b      	str	r3, [sp, #108]	@ 0x6c
   1d9aa:	f340 8467 	ble.w	1e27c <arm_nn_softmax_common_s8+0x8e4>
   1d9ae:	4693      	mov	fp, r2
   1d9b0:	1e53      	subs	r3, r2, #1
   1d9b2:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
    q63_t mult = 1 << 30;
   1d9b4:	f8df c38c 	ldr.w	ip, [pc, #908]	@ 1dd44 <arm_nn_softmax_common_s8+0x3ac>
   1d9b8:	f8cd b058 	str.w	fp, [sp, #88]	@ 0x58
   1d9bc:	18c3      	adds	r3, r0, r3
   1d9be:	9301      	str	r3, [sp, #4]
   1d9c0:	3a01      	subs	r2, #1
   1d9c2:	1e43      	subs	r3, r0, #1
   1d9c4:	f04f 0a00 	mov.w	sl, #0
   1d9c8:	f8cd a05c 	str.w	sl, [sp, #92]	@ 0x5c
   1d9cc:	4699      	mov	r9, r3
   1d9ce:	4693      	mov	fp, r2
    {
        // Find the maximum value in order to ensure numerical stability
        int8_t max = *input;

        for (col = 1; col < row_size; ++col)
   1d9d0:	9a16      	ldr	r2, [sp, #88]	@ 0x58
        int8_t max = *input;
   1d9d2:	f999 e001 	ldrsb.w	lr, [r9, #1]
        for (col = 1; col < row_size; ++col)
   1d9d6:	2a01      	cmp	r2, #1
   1d9d8:	f109 0301 	add.w	r3, r9, #1
   1d9dc:	f340 84da 	ble.w	1e394 <arm_nn_softmax_common_s8+0x9fc>
   1d9e0:	9901      	ldr	r1, [sp, #4]
        {
            max = MAX(max, input[col]);
   1d9e2:	f913 2f01 	ldrsb.w	r2, [r3, #1]!
   1d9e6:	4596      	cmp	lr, r2
   1d9e8:	bfb8      	it	lt
   1d9ea:	4696      	movlt	lr, r2
        for (col = 1; col < row_size; ++col)
   1d9ec:	428b      	cmp	r3, r1
   1d9ee:	d1f8      	bne.n	1d9e2 <arm_nn_softmax_common_s8+0x4a>
        }

        int32_t diff = 0;
        int32_t sum = 0;
   1d9f0:	2300      	movs	r3, #0
   1d9f2:	e9cd 3e03 	strd	r3, lr, [sp, #12]
   1d9f6:	e9cd 9b11 	strd	r9, fp, [sp, #68]	@ 0x44

            bits_over_unit = ACCUM_BITS - headroom + 23;

            for (col = 0; col < row_size; ++col)
            {
                diff = input[col] - max;
   1d9fa:	464e      	mov	r6, r9
   1d9fc:	e086      	b.n	1db0c <arm_nn_softmax_common_s8+0x174>
    result = (int32_t)(mult / (1ll << 31));
   1d9fe:	48c6      	ldr	r0, [pc, #792]	@ (1dd18 <arm_nn_softmax_common_s8+0x380>)
   1da00:	fbc3 2400 	smlal	r2, r4, r3, r0
   1da04:	2c00      	cmp	r4, #0
   1da06:	da05      	bge.n	1da14 <arm_nn_softmax_common_s8+0x7c>
   1da08:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
   1da0c:	18d3      	adds	r3, r2, r3
   1da0e:	461a      	mov	r2, r3
   1da10:	f144 0400 	adc.w	r4, r4, #0
   1da14:	0fd2      	lsrs	r2, r2, #31
   1da16:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    int32_t result = 1895147668 +
   1da1a:	f102 42e2 	add.w	r2, r2, #1895825408	@ 0x71000000
    mult = mult + (q63_t)m1 * m2;
   1da1e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
   1da22:	2000      	movs	r0, #0
   1da24:	4cbd      	ldr	r4, [pc, #756]	@ (1dd1c <arm_nn_softmax_common_s8+0x384>)
    SELECT_IF_NON_ZERO(1672461947)
   1da26:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
    int32_t result = 1895147668 +
   1da28:	f5a2 2225 	sub.w	r2, r2, #675840	@ 0xa5000
   1da2c:	f2a2 726c 	subw	r2, r2, #1900	@ 0x76c
    mult = mult + (q63_t)m1 * m2;
   1da30:	4699      	mov	r9, r3
   1da32:	4680      	mov	r8, r0
   1da34:	fbc2 9804 	smlal	r9, r8, r2, r4
   1da38:	464c      	mov	r4, r9
    result = (int32_t)(mult / (1ll << 31));
   1da3a:	0fe4      	lsrs	r4, r4, #31
   1da3c:	ea44 0448 	orr.w	r4, r4, r8, lsl #1
    SELECT_IF_NON_ZERO(1672461947)
   1da40:	4015      	ands	r5, r2
   1da42:	fb04 fe0e 	mul.w	lr, r4, lr
    SELECT_IF_NON_ZERO(1302514674)
   1da46:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
    SELECT_IF_NON_ZERO(1672461947)
   1da48:	ea8e 0e05 	eor.w	lr, lr, r5
    SELECT_IF_NON_ZERO(1302514674)
   1da4c:	ea02 040e 	and.w	r4, r2, lr
    mult = mult + (q63_t)m1 * m2;
   1da50:	4ab3      	ldr	r2, [pc, #716]	@ (1dd20 <arm_nn_softmax_common_s8+0x388>)
   1da52:	4698      	mov	r8, r3
   1da54:	4605      	mov	r5, r0
   1da56:	fbce 8502 	smlal	r8, r5, lr, r2
   1da5a:	4642      	mov	r2, r8
    result = (int32_t)(mult / (1ll << 31));
   1da5c:	0fd2      	lsrs	r2, r2, #31
   1da5e:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    SELECT_IF_NON_ZERO(1302514674)
   1da62:	fb02 f707 	mul.w	r7, r2, r7
    mult = mult + (q63_t)m1 * m2;
   1da66:	4aaf      	ldr	r2, [pc, #700]	@ (1dd24 <arm_nn_softmax_common_s8+0x38c>)
    SELECT_IF_NON_ZERO(1302514674)
   1da68:	4067      	eors	r7, r4
    mult = mult + (q63_t)m1 * m2;
   1da6a:	469e      	mov	lr, r3
   1da6c:	4605      	mov	r5, r0
   1da6e:	fbc7 e502 	smlal	lr, r5, r7, r2
   1da72:	4672      	mov	r2, lr
    SELECT_IF_NON_ZERO(790015084)
   1da74:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
    result = (int32_t)(mult / (1ll << 31));
   1da76:	0fd2      	lsrs	r2, r2, #31
   1da78:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    SELECT_IF_NON_ZERO(790015084)
   1da7c:	403c      	ands	r4, r7
   1da7e:	fb02 f101 	mul.w	r1, r2, r1
    mult = mult + (q63_t)m1 * m2;
   1da82:	4fa9      	ldr	r7, [pc, #676]	@ (1dd28 <arm_nn_softmax_common_s8+0x390>)
    SELECT_IF_NON_ZERO(790015084)
   1da84:	4061      	eors	r1, r4
    mult = mult + (q63_t)m1 * m2;
   1da86:	461a      	mov	r2, r3
   1da88:	4605      	mov	r5, r0
    SELECT_IF_NON_ZERO(290630308)
   1da8a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
    mult = mult + (q63_t)m1 * m2;
   1da8c:	fbc1 2507 	smlal	r2, r5, r1, r7
    SELECT_IF_NON_ZERO(290630308)
   1da90:	400c      	ands	r4, r1
    result = (int32_t)(mult / (1ll << 31));
   1da92:	0fd2      	lsrs	r2, r2, #31
    SELECT_IF_NON_ZERO(290630308)
   1da94:	9906      	ldr	r1, [sp, #24]
    mult = mult + (q63_t)m1 * m2;
   1da96:	4fa5      	ldr	r7, [pc, #660]	@ (1dd2c <arm_nn_softmax_common_s8+0x394>)
    result = (int32_t)(mult / (1ll << 31));
   1da98:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    SELECT_IF_NON_ZERO(290630308)
   1da9c:	fb02 f101 	mul.w	r1, r2, r1
   1daa0:	460a      	mov	r2, r1
   1daa2:	4062      	eors	r2, r4
    mult = mult + (q63_t)m1 * m2;
   1daa4:	4619      	mov	r1, r3
   1daa6:	4605      	mov	r5, r0
    SELECT_IF_NON_ZERO(39332535)
   1daa8:	9c10      	ldr	r4, [sp, #64]	@ 0x40
    mult = mult + (q63_t)m1 * m2;
   1daaa:	fbc2 1507 	smlal	r1, r5, r2, r7
    SELECT_IF_NON_ZERO(39332535)
   1daae:	4014      	ands	r4, r2
    result = (int32_t)(mult / (1ll << 31));
   1dab0:	0fc9      	lsrs	r1, r1, #31
    SELECT_IF_NON_ZERO(39332535)
   1dab2:	9a08      	ldr	r2, [sp, #32]
    mult = mult + (q63_t)m1 * m2;
   1dab4:	4f9e      	ldr	r7, [pc, #632]	@ (1dd30 <arm_nn_softmax_common_s8+0x398>)
    result = (int32_t)(mult / (1ll << 31));
   1dab6:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
    SELECT_IF_NON_ZERO(39332535)
   1daba:	fb01 f202 	mul.w	r2, r1, r2
   1dabe:	4062      	eors	r2, r4
    mult = mult + (q63_t)m1 * m2;
   1dac0:	4619      	mov	r1, r3
   1dac2:	4605      	mov	r5, r0
    SELECT_IF_NON_ZERO(720401)
   1dac4:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
    mult = mult + (q63_t)m1 * m2;
   1dac6:	fbc2 1507 	smlal	r1, r5, r2, r7
    SELECT_IF_NON_ZERO(720401)
   1daca:	4014      	ands	r4, r2
    result = (int32_t)(mult / (1ll << 31));
   1dacc:	0fc9      	lsrs	r1, r1, #31
    SELECT_IF_NON_ZERO(720401)
   1dace:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
    result = (int32_t)(mult / (1ll << 31));
   1dad0:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
    SELECT_IF_NON_ZERO(720401)
   1dad4:	fb01 f202 	mul.w	r2, r1, r2
   1dad8:	4062      	eors	r2, r4
    mult = mult + (q63_t)m1 * m2;
   1dada:	21f2      	movs	r1, #242	@ 0xf2
    SELECT_IF_NON_ZERO(242)
   1dadc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
    mult = mult + (q63_t)m1 * m2;
   1dade:	fbc2 3001 	smlal	r3, r0, r2, r1
    SELECT_IF_NON_ZERO(242)
   1dae2:	4014      	ands	r4, r2
    result = (int32_t)(mult / (1ll << 31));
   1dae4:	0fdb      	lsrs	r3, r3, #31
    SELECT_IF_NON_ZERO(242)
   1dae6:	9a05      	ldr	r2, [sp, #20]
    result = (int32_t)(mult / (1ll << 31));
   1dae8:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    SELECT_IF_NON_ZERO(242)
   1daec:	fb03 f202 	mul.w	r2, r3, r2
   1daf0:	4613      	mov	r3, r2
   1daf2:	4063      	eors	r3, r4
    if (remainder > threshold)
   1daf4:	051c      	lsls	r4, r3, #20
    result = dividend >> exponent;
   1daf6:	ea4f 3223 	mov.w	r2, r3, asr #12
    if (remainder > threshold)
   1dafa:	f100 8441 	bmi.w	1e380 <arm_nn_softmax_common_s8+0x9e8>
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
   1dafe:	9b03      	ldr	r3, [sp, #12]
   1db00:	4413      	add	r3, r2
   1db02:	9303      	str	r3, [sp, #12]
        for (col = 0; col < row_size; ++col)
   1db04:	9b01      	ldr	r3, [sp, #4]
   1db06:	429e      	cmp	r6, r3
   1db08:	f000 8122 	beq.w	1dd50 <arm_nn_softmax_common_s8+0x3b8>
            diff = input[col] - max;
   1db0c:	9a04      	ldr	r2, [sp, #16]
   1db0e:	f916 3f01 	ldrsb.w	r3, [r6, #1]!
   1db12:	1a9b      	subs	r3, r3, r2
            if (diff >= diff_min)
   1db14:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
   1db16:	429a      	cmp	r2, r3
   1db18:	dcf4      	bgt.n	1db04 <arm_nn_softmax_common_s8+0x16c>
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
   1db1a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
    if ((m1 < 0) ^ (m2 < 0))
   1db1c:	9902      	ldr	r1, [sp, #8]
   1db1e:	4093      	lsls	r3, r2
   1db20:	ea81 0203 	eor.w	r2, r1, r3
    q63_t mult = 1 << 30;
   1db24:	2a00      	cmp	r2, #0
   1db26:	bfb5      	itete	lt
   1db28:	4660      	movlt	r0, ip
   1db2a:	f04f 4080 	movge.w	r0, #1073741824	@ 0x40000000
   1db2e:	f04f 32ff 	movlt.w	r2, #4294967295	@ 0xffffffff
   1db32:	2200      	movge	r2, #0
    result = (int32_t)(mult / (1ll << 31));
   1db34:	fbc1 0203 	smlal	r0, r2, r1, r3
   1db38:	2a00      	cmp	r2, #0
   1db3a:	da04      	bge.n	1db46 <arm_nn_softmax_common_s8+0x1ae>
   1db3c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
   1db40:	1840      	adds	r0, r0, r1
   1db42:	f142 0200 	adc.w	r2, r2, #0
   1db46:	0fc0      	lsrs	r0, r0, #31
   1db48:	ea40 0042 	orr.w	r0, r0, r2, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
   1db4c:	9a02      	ldr	r2, [sp, #8]
   1db4e:	429a      	cmp	r2, r3
   1db50:	f000 80bb 	beq.w	1dcca <arm_nn_softmax_common_s8+0x332>
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
   1db54:	f040 417f 	orr.w	r1, r0, #4278190080	@ 0xff000000
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
   1db58:	014c      	lsls	r4, r1, #5
    const int32_t remainder = val_mod_minus_quarter - val;
   1db5a:	1a09      	subs	r1, r1, r0
    SELECT_IF_NON_ZERO(39332535)
   1db5c:	f3c1 7200 	ubfx	r2, r1, #28, #1
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
   1db60:	f104 5480 	add.w	r4, r4, #268435456	@ 0x10000000
    mult = mult + (q63_t)m1 * m2;
   1db64:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
   1db68:	f04f 0b00 	mov.w	fp, #0
    SELECT_IF_NON_ZERO(720401)
   1db6c:	f3c1 7540 	ubfx	r5, r1, #29, #1
    result = (int32_t)(mult / (1ll << 31));
   1db70:	fbc4 3b04 	smlal	r3, fp, r4, r4
    SELECT_IF_NON_ZERO(39332535)
   1db74:	9208      	str	r2, [sp, #32]
   1db76:	3a01      	subs	r2, #1
   1db78:	9210      	str	r2, [sp, #64]	@ 0x40
    result = (int32_t)(mult / (1ll << 31));
   1db7a:	f1bb 0f00 	cmp.w	fp, #0
   1db7e:	f105 32ff 	add.w	r2, r5, #4294967295	@ 0xffffffff
    SELECT_IF_NON_ZERO(720401)
   1db82:	950e      	str	r5, [sp, #56]	@ 0x38
   1db84:	920f      	str	r2, [sp, #60]	@ 0x3c
    result = (int32_t)(mult / (1ll << 31));
   1db86:	da05      	bge.n	1db94 <arm_nn_softmax_common_s8+0x1fc>
   1db88:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
   1db8c:	189a      	adds	r2, r3, r2
   1db8e:	4613      	mov	r3, r2
   1db90:	f14b 0b00 	adc.w	fp, fp, #0
   1db94:	0fdb      	lsrs	r3, r3, #31
   1db96:	ea43 034b 	orr.w	r3, r3, fp, lsl #1
    mult = mult + (q63_t)m1 * m2;
   1db9a:	fba3 2703 	umull	r2, r7, r3, r3
    result = (int32_t)(mult / (1ll << 31));
   1db9e:	ea4f 7beb 	mov.w	fp, fp, asr #31
    mult = mult + (q63_t)m1 * m2;
   1dba2:	f112 4280 	adds.w	r2, r2, #1073741824	@ 0x40000000
   1dba6:	fb03 fe0b 	mul.w	lr, r3, fp
    result = (int32_t)(mult / (1ll << 31));
   1dbaa:	eb47 074e 	adc.w	r7, r7, lr, lsl #1
   1dbae:	2f00      	cmp	r7, #0
   1dbb0:	9307      	str	r3, [sp, #28]
   1dbb2:	da06      	bge.n	1dbc2 <arm_nn_softmax_common_s8+0x22a>
   1dbb4:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
   1dbb8:	eb12 0e0e 	adds.w	lr, r2, lr
   1dbbc:	4672      	mov	r2, lr
   1dbbe:	f147 0700 	adc.w	r7, r7, #0
    SELECT_IF_NON_ZERO(242)
   1dbc2:	f3c1 7580 	ubfx	r5, r1, #30, #1
    result = (int32_t)(mult / (1ll << 31));
   1dbc6:	0fd2      	lsrs	r2, r2, #31
    SELECT_IF_NON_ZERO(242)
   1dbc8:	9505      	str	r5, [sp, #20]
    result = (int32_t)(mult / (1ll << 31));
   1dbca:	ea42 0247 	orr.w	r2, r2, r7, lsl #1
    SELECT_IF_NON_ZERO(290630308)
   1dbce:	f3c1 6ec0 	ubfx	lr, r1, #27, #1
   1dbd2:	9d05      	ldr	r5, [sp, #20]
   1dbd4:	f8cd e018 	str.w	lr, [sp, #24]
    mult = mult + (q63_t)m1 * m2;
   1dbd8:	17e7      	asrs	r7, r4, #31
   1dbda:	fb04 fb0b 	mul.w	fp, r4, fp
   1dbde:	fb03 bb07 	mla	fp, r3, r7, fp
    if ((m1 < 0) ^ (m2 < 0))
   1dbe2:	ea83 0a04 	eor.w	sl, r3, r4
    mult = mult + (q63_t)m1 * m2;
   1dbe6:	fba4 8303 	umull	r8, r3, r4, r3
   1dbea:	445b      	add	r3, fp
   1dbec:	f105 3bff 	add.w	fp, r5, #4294967295	@ 0xffffffff
   1dbf0:	9d06      	ldr	r5, [sp, #24]
   1dbf2:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
    SELECT_IF_NON_ZERO(1302514674)
   1dbf6:	f3c1 6740 	ubfx	r7, r1, #25, #1
   1dbfa:	3d01      	subs	r5, #1
    SELECT_IF_NON_ZERO(1672461947)
   1dbfc:	f3c1 6e00 	ubfx	lr, r1, #24, #1
   1dc00:	950c      	str	r5, [sp, #48]	@ 0x30
   1dc02:	1e7d      	subs	r5, r7, #1
    SELECT_IF_NON_ZERO(790015084)
   1dc04:	f3c1 6180 	ubfx	r1, r1, #26, #1
   1dc08:	950d      	str	r5, [sp, #52]	@ 0x34
   1dc0a:	f10e 35ff 	add.w	r5, lr, #4294967295	@ 0xffffffff
    q31_t threshold = remainder_mask >> 1;
   1dc0e:	ea5f 09a2 	movs.w	r9, r2, asr #2
   1dc12:	950a      	str	r5, [sp, #40]	@ 0x28
   1dc14:	f101 35ff 	add.w	r5, r1, #4294967295	@ 0xffffffff
    int32_t remainder = remainder_mask & dividend;
   1dc18:	f002 0203 	and.w	r2, r2, #3
   1dc1c:	950b      	str	r5, [sp, #44]	@ 0x2c
    q31_t threshold = remainder_mask >> 1;
   1dc1e:	bf4c      	ite	mi
   1dc20:	f04f 0b02 	movmi.w	fp, #2
   1dc24:	f04f 0b01 	movpl.w	fp, #1
    if (remainder > threshold)
   1dc28:	4593      	cmp	fp, r2
        result++;
   1dc2a:	bfb8      	it	lt
   1dc2c:	f109 0901 	addlt.w	r9, r9, #1
    q63_t mult = 1 << 30;
   1dc30:	f1ba 0f00 	cmp.w	sl, #0
   1dc34:	bfb5      	itete	lt
   1dc36:	4662      	movlt	r2, ip
   1dc38:	f04f 4280 	movge.w	r2, #1073741824	@ 0x40000000
   1dc3c:	f04f 3aff 	movlt.w	sl, #4294967295	@ 0xffffffff
   1dc40:	f04f 0a00 	movge.w	sl, #0
    mult = mult + (q63_t)m1 * m2;
   1dc44:	eb12 0208 	adds.w	r2, r2, r8
    result = (int32_t)(mult / (1ll << 31));
   1dc48:	eb43 0a0a 	adc.w	sl, r3, sl
   1dc4c:	f1ba 0f00 	cmp.w	sl, #0
   1dc50:	da05      	bge.n	1dc5e <arm_nn_softmax_common_s8+0x2c6>
   1dc52:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
   1dc56:	18d3      	adds	r3, r2, r3
   1dc58:	461a      	mov	r2, r3
   1dc5a:	f14a 0a00 	adc.w	sl, sl, #0
   1dc5e:	0fd2      	lsrs	r2, r2, #31
    if ((m1 < 0) ^ (m2 < 0))
   1dc60:	4b34      	ldr	r3, [pc, #208]	@ (1dd34 <arm_nn_softmax_common_s8+0x39c>)
    result = (int32_t)(mult / (1ll << 31));
   1dc62:	4d34      	ldr	r5, [pc, #208]	@ (1dd34 <arm_nn_softmax_common_s8+0x39c>)
   1dc64:	ea42 024a 	orr.w	r2, r2, sl, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
   1dc68:	444a      	add	r2, r9
    if ((m1 < 0) ^ (m2 < 0))
   1dc6a:	4053      	eors	r3, r2
    q63_t mult = 1 << 30;
   1dc6c:	2b00      	cmp	r3, #0
   1dc6e:	bfb5      	itete	lt
   1dc70:	4663      	movlt	r3, ip
   1dc72:	f04f 4380 	movge.w	r3, #1073741824	@ 0x40000000
   1dc76:	f04f 38ff 	movlt.w	r8, #4294967295	@ 0xffffffff
   1dc7a:	f04f 0800 	movge.w	r8, #0
    result = (int32_t)(mult / (1ll << 31));
   1dc7e:	fbc2 3805 	smlal	r3, r8, r2, r5
   1dc82:	f1b8 0f00 	cmp.w	r8, #0
   1dc86:	da05      	bge.n	1dc94 <arm_nn_softmax_common_s8+0x2fc>
   1dc88:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
   1dc8c:	189a      	adds	r2, r3, r2
   1dc8e:	4613      	mov	r3, r2
   1dc90:	f148 0800 	adc.w	r8, r8, #0
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
   1dc94:	9d07      	ldr	r5, [sp, #28]
    result = (int32_t)(mult / (1ll << 31));
   1dc96:	0fdb      	lsrs	r3, r3, #31
   1dc98:	ea43 0348 	orr.w	r3, r3, r8, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
   1dc9c:	441d      	add	r5, r3
    if (result < 0)
   1dc9e:	106b      	asrs	r3, r5, #1
   1dca0:	d402      	bmi.n	1dca8 <arm_nn_softmax_common_s8+0x310>
    if (remainder > threshold)
   1dca2:	07ed      	lsls	r5, r5, #31
        result++;
   1dca4:	bf48      	it	mi
   1dca6:	3301      	addmi	r3, #1
    if ((m1 < 0) ^ (m2 < 0))
   1dca8:	4a1b      	ldr	r2, [pc, #108]	@ (1dd18 <arm_nn_softmax_common_s8+0x380>)
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
   1dcaa:	4423      	add	r3, r4
    if ((m1 < 0) ^ (m2 < 0))
   1dcac:	405a      	eors	r2, r3
    q63_t mult = 1 << 30;
   1dcae:	2a00      	cmp	r2, #0
   1dcb0:	bfb5      	itete	lt
   1dcb2:	4662      	movlt	r2, ip
   1dcb4:	f04f 4280 	movge.w	r2, #1073741824	@ 0x40000000
   1dcb8:	f04f 34ff 	movlt.w	r4, #4294967295	@ 0xffffffff
   1dcbc:	2400      	movge	r4, #0
    mask = MASK_IF_ZERO(val);
   1dcbe:	2800      	cmp	r0, #0
   1dcc0:	f47f ae9d 	bne.w	1d9fe <arm_nn_softmax_common_s8+0x66>
   1dcc4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
        result++;
   1dcc8:	e719      	b.n	1dafe <arm_nn_softmax_common_s8+0x166>
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
   1dcca:	9b02      	ldr	r3, [sp, #8]
   1dccc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
   1dcd0:	f47f af40 	bne.w	1db54 <arm_nn_softmax_common_s8+0x1bc>
   1dcd4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
   1dcd8:	2200      	movs	r2, #0
   1dcda:	4b17      	ldr	r3, [pc, #92]	@ (1dd38 <arm_nn_softmax_common_s8+0x3a0>)
   1dcdc:	9110      	str	r1, [sp, #64]	@ 0x40
   1dcde:	460d      	mov	r5, r1
   1dce0:	e9cd 210e 	strd	r2, r1, [sp, #56]	@ 0x38
   1dce4:	e9cd 2108 	strd	r2, r1, [sp, #32]
   1dce8:	9307      	str	r3, [sp, #28]
   1dcea:	910c      	str	r1, [sp, #48]	@ 0x30
   1dcec:	910d      	str	r1, [sp, #52]	@ 0x34
   1dcee:	e9cd 550a 	strd	r5, r5, [sp, #40]	@ 0x28
   1dcf2:	4c12      	ldr	r4, [pc, #72]	@ (1dd3c <arm_nn_softmax_common_s8+0x3a4>)
   1dcf4:	f8df a050 	ldr.w	sl, [pc, #80]	@ 1dd48 <arm_nn_softmax_common_s8+0x3b0>
   1dcf8:	f8df 8050 	ldr.w	r8, [pc, #80]	@ 1dd4c <arm_nn_softmax_common_s8+0x3b4>
   1dcfc:	4b10      	ldr	r3, [pc, #64]	@ (1dd40 <arm_nn_softmax_common_s8+0x3a8>)
   1dcfe:	9205      	str	r2, [sp, #20]
        result = NN_Q31_MAX;
   1dd00:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
   1dd04:	f44f 3900 	mov.w	r9, #131072	@ 0x20000
   1dd08:	4617      	mov	r7, r2
   1dd0a:	9206      	str	r2, [sp, #24]
   1dd0c:	4611      	mov	r1, r2
   1dd0e:	4696      	mov	lr, r2
    q31_t threshold = remainder_mask >> 1;
   1dd10:	f04f 0b01 	mov.w	fp, #1
   1dd14:	e788      	b.n	1dc28 <arm_nn_softmax_common_s8+0x290>
   1dd16:	bf00      	nop
   1dd18:	70f5a894 	.word	0x70f5a894
   1dd1c:	63afbe7b 	.word	0x63afbe7b
   1dd20:	4da2cbf2 	.word	0x4da2cbf2
   1dd24:	2f16ac6c 	.word	0x2f16ac6c
   1dd28:	1152aaa4 	.word	0x1152aaa4
   1dd2c:	02582ab7 	.word	0x02582ab7
   1dd30:	000afe11 	.word	0x000afe11
   1dd34:	2aaaaaab 	.word	0x2aaaaaab
   1dd38:	01fffff8 	.word	0x01fffff8
   1dd3c:	0fffffe0 	.word	0x0fffffe0
   1dd40:	001fffff 	.word	0x001fffff
   1dd44:	c0000001 	.word	0xc0000001
   1dd48:	0e000018 	.word	0x0e000018
   1dd4c:	40000100 	.word	0x40000100
  if (value == 0U)
   1dd50:	9b03      	ldr	r3, [sp, #12]
   1dd52:	f8dd e010 	ldr.w	lr, [sp, #16]
   1dd56:	2b00      	cmp	r3, #0
   1dd58:	e9dd 9b11 	ldrd	r9, fp, [sp, #68]	@ 0x44
   1dd5c:	f000 831c 	beq.w	1e398 <arm_nn_softmax_common_s8+0xa00>
  return __builtin_clz(value);
   1dd60:	fab3 f883 	clz	r8, r3
        const int32_t shifted_scale = ONE_OVER1((sum > 0 ? sum << headroom : 0) - (1 << 31));
   1dd64:	f340 82b8 	ble.w	1e2d8 <arm_nn_softmax_common_s8+0x940>
   1dd68:	fa03 f208 	lsl.w	r2, r3, r8
   1dd6c:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
   1dd70:	f112 4300 	adds.w	r3, r2, #2147483648	@ 0x80000000
    const int64_t sum = (int64_t)val + (int64_t)NN_Q31_MAX;
   1dd74:	ea4f 72e2 	mov.w	r2, r2, asr #31
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
   1dd78:	f142 0200 	adc.w	r2, r2, #0
   1dd7c:	085b      	lsrs	r3, r3, #1
   1dd7e:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
    mult = mult + (q63_t)m1 * m2;
   1dd82:	486e      	ldr	r0, [pc, #440]	@ (1df3c <arm_nn_softmax_common_s8+0x5a4>)
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
   1dd84:	1052      	asrs	r2, r2, #1
    mult = mult + (q63_t)m1 * m2;
   1dd86:	425c      	negs	r4, r3
   1dd88:	fb00 4402 	mla	r4, r0, r2, r4
   1dd8c:	fba3 1000 	umull	r1, r0, r3, r0
   1dd90:	eb11 010c 	adds.w	r1, r1, ip
   1dd94:	4420      	add	r0, r4
    result = (int32_t)(mult / (1ll << 31));
   1dd96:	f160 0000 	sbc.w	r0, r0, #0
   1dd9a:	2800      	cmp	r0, #0
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
   1dd9c:	461d      	mov	r5, r3
    result = (int32_t)(mult / (1ll << 31));
   1dd9e:	da05      	bge.n	1ddac <arm_nn_softmax_common_s8+0x414>
   1dda0:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
   1dda4:	190c      	adds	r4, r1, r4
   1dda6:	4621      	mov	r1, r4
   1dda8:	f140 0000 	adc.w	r0, r0, #0
   1ddac:	0fc9      	lsrs	r1, r1, #31
   1ddae:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
    int32_t x = 1515870810 + MUL_SAT(half_denominator, -1010580540);
   1ddb2:	f101 315a 	add.w	r1, r1, #1515870810	@ 0x5a5a5a5a
    mult = mult + (q63_t)m1 * m2;
   1ddb6:	17c8      	asrs	r0, r1, #31
   1ddb8:	fb01 f602 	mul.w	r6, r1, r2
   1ddbc:	fb03 6600 	mla	r6, r3, r0, r6
   1ddc0:	fba1 0403 	umull	r0, r4, r1, r3
   1ddc4:	f110 4080 	adds.w	r0, r0, #1073741824	@ 0x40000000
   1ddc8:	eb46 0404 	adc.w	r4, r6, r4
    result = (int32_t)(mult / (1ll << 31));
   1ddcc:	0fc0      	lsrs	r0, r0, #31
   1ddce:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   1ddd2:	f1c0 5000 	rsb	r0, r0, #536870912	@ 0x20000000
    if ((m1 < 0) ^ (m2 < 0))
   1ddd6:	ea91 0f00 	teq	r1, r0
    mult = mult + (q63_t)m1 * m2;
   1ddda:	fb81 6700 	smull	r6, r7, r1, r0
    if ((m1 < 0) ^ (m2 < 0))
   1ddde:	f140 8285 	bpl.w	1e2ec <arm_nn_softmax_common_s8+0x954>
        mult = 1 - mult;
   1dde2:	4660      	mov	r0, ip
   1dde4:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
    mult = mult + (q63_t)m1 * m2;
   1dde8:	1980      	adds	r0, r0, r6
    result = (int32_t)(mult / (1ll << 31));
   1ddea:	eb44 0407 	adc.w	r4, r4, r7
   1ddee:	2c00      	cmp	r4, #0
   1ddf0:	da05      	bge.n	1ddfe <arm_nn_softmax_common_s8+0x466>
   1ddf2:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
   1ddf6:	1986      	adds	r6, r0, r6
   1ddf8:	4630      	mov	r0, r6
   1ddfa:	f144 0400 	adc.w	r4, r4, #0
   1ddfe:	0fc0      	lsrs	r0, r0, #31
   1de00:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   1de04:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    if ((m1 < 0) ^ (m2 < 0))
   1de08:	ea85 0001 	eor.w	r0, r5, r1
    q63_t mult = 1 << 30;
   1de0c:	2800      	cmp	r0, #0
    mult = mult + (q63_t)m1 * m2;
   1de0e:	fb01 f402 	mul.w	r4, r1, r2
   1de12:	ea4f 70e1 	mov.w	r0, r1, asr #31
   1de16:	fb03 4400 	mla	r4, r3, r0, r4
    q63_t mult = 1 << 30;
   1de1a:	bfb8      	it	lt
   1de1c:	4666      	movlt	r6, ip
    mult = mult + (q63_t)m1 * m2;
   1de1e:	fba1 0a03 	umull	r0, sl, r1, r3
    q63_t mult = 1 << 30;
   1de22:	bfaa      	itet	ge
   1de24:	f04f 4680 	movge.w	r6, #1073741824	@ 0x40000000
   1de28:	f04f 37ff 	movlt.w	r7, #4294967295	@ 0xffffffff
   1de2c:	2700      	movge	r7, #0
    mult = mult + (q63_t)m1 * m2;
   1de2e:	4454      	add	r4, sl
   1de30:	1980      	adds	r0, r0, r6
    result = (int32_t)(mult / (1ll << 31));
   1de32:	eb44 0407 	adc.w	r4, r4, r7
   1de36:	2c00      	cmp	r4, #0
   1de38:	f2c0 82a5 	blt.w	1e386 <arm_nn_softmax_common_s8+0x9ee>
   1de3c:	0fc0      	lsrs	r0, r0, #31
   1de3e:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   1de42:	f1c0 5400 	rsb	r4, r0, #536870912	@ 0x20000000
    if ((m1 < 0) ^ (m2 < 0))
   1de46:	ea81 0004 	eor.w	r0, r1, r4
    q63_t mult = 1 << 30;
   1de4a:	2800      	cmp	r0, #0
   1de4c:	bfb5      	itete	lt
   1de4e:	4660      	movlt	r0, ip
   1de50:	f04f 4080 	movge.w	r0, #1073741824	@ 0x40000000
   1de54:	f04f 36ff 	movlt.w	r6, #4294967295	@ 0xffffffff
   1de58:	2600      	movge	r6, #0
    result = (int32_t)(mult / (1ll << 31));
   1de5a:	fbc1 0604 	smlal	r0, r6, r1, r4
   1de5e:	2e00      	cmp	r6, #0
   1de60:	da05      	bge.n	1de6e <arm_nn_softmax_common_s8+0x4d6>
   1de62:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
   1de66:	1904      	adds	r4, r0, r4
   1de68:	4620      	mov	r0, r4
   1de6a:	f146 0600 	adc.w	r6, r6, #0
   1de6e:	0fc0      	lsrs	r0, r0, #31
   1de70:	ea40 0046 	orr.w	r0, r0, r6, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), NN_Q31_MAX, result);
   1de74:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
   1de78:	f280 823c 	bge.w	1e2f4 <arm_nn_softmax_common_s8+0x95c>
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), NN_Q31_MIN, result);
   1de7c:	f1b0 4f60 	cmp.w	r0, #3758096384	@ 0xe0000000
   1de80:	f300 82c3 	bgt.w	1e40a <arm_nn_softmax_common_s8+0xa72>
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   1de84:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
    mult = mult + (q63_t)m1 * m2;
   1de88:	17c1      	asrs	r1, r0, #31
    if ((m1 < 0) ^ (m2 < 0))
   1de8a:	ea95 0f00 	teq	r5, r0
    mult = mult + (q63_t)m1 * m2;
   1de8e:	fb03 f401 	mul.w	r4, r3, r1
    if ((m1 < 0) ^ (m2 < 0))
   1de92:	f100 82a3 	bmi.w	1e3dc <arm_nn_softmax_common_s8+0xa44>
    mult = mult + (q63_t)m1 * m2;
   1de96:	fb00 4202 	mla	r2, r0, r2, r4
   1de9a:	fba3 3400 	umull	r3, r4, r3, r0
   1de9e:	f113 4380 	adds.w	r3, r3, #1073741824	@ 0x40000000
    result = (int32_t)(mult / (1ll << 31));
   1dea2:	eb42 0404 	adc.w	r4, r2, r4
   1dea6:	2c00      	cmp	r4, #0
   1dea8:	da05      	bge.n	1deb6 <arm_nn_softmax_common_s8+0x51e>
   1deaa:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
   1deae:	189a      	adds	r2, r3, r2
   1deb0:	4613      	mov	r3, r2
   1deb2:	f144 0400 	adc.w	r4, r4, #0
   1deb6:	0fdb      	lsrs	r3, r3, #31
   1deb8:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   1debc:	f1c3 5300 	rsb	r3, r3, #536870912	@ 0x20000000
    mult = mult + (q63_t)m1 * m2;
   1dec0:	fb03 f101 	mul.w	r1, r3, r1
   1dec4:	17da      	asrs	r2, r3, #31
   1dec6:	fb00 1102 	mla	r1, r0, r2, r1
   1deca:	fba3 3200 	umull	r3, r2, r3, r0
   1dece:	eb13 030c 	adds.w	r3, r3, ip
   1ded2:	440a      	add	r2, r1
    result = (int32_t)(mult / (1ll << 31));
   1ded4:	f162 0200 	sbc.w	r2, r2, #0
   1ded8:	2a00      	cmp	r2, #0
   1deda:	da05      	bge.n	1dee8 <arm_nn_softmax_common_s8+0x550>
   1dedc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
   1dee0:	1859      	adds	r1, r3, r1
   1dee2:	460b      	mov	r3, r1
   1dee4:	f142 0200 	adc.w	r2, r2, #0
   1dee8:	0fdb      	lsrs	r3, r3, #31
   1deea:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), NN_Q31_MIN, result);
   1deee:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
   1def2:	f300 829e 	bgt.w	1e432 <arm_nn_softmax_common_s8+0xa9a>
    int32_t result = val << exp;
   1def6:	0042      	lsls	r2, r0, #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   1def8:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
    int32_t result = val << exp;
   1defc:	9212      	str	r2, [sp, #72]	@ 0x48
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), NN_Q31_MIN, result);
   1defe:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
   1df02:	9b12      	ldr	r3, [sp, #72]	@ 0x48
   1df04:	bfd8      	it	le
   1df06:	f04f 4300 	movle.w	r3, #2147483648	@ 0x80000000
   1df0a:	9312      	str	r3, [sp, #72]	@ 0x48
        if (int16_output)
   1df0c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
   1df0e:	2b00      	cmp	r3, #0
   1df10:	f040 81b4 	bne.w	1e27c <arm_nn_softmax_common_s8+0x8e4>
            for (col = 0; col < row_size; ++col)
   1df14:	9b16      	ldr	r3, [sp, #88]	@ 0x58
            bits_over_unit = ACCUM_BITS - headroom + 23;
   1df16:	f1c8 0223 	rsb	r2, r8, #35	@ 0x23
            for (col = 0; col < row_size; ++col)
   1df1a:	2b00      	cmp	r3, #0
            bits_over_unit = ACCUM_BITS - headroom + 23;
   1df1c:	9213      	str	r2, [sp, #76]	@ 0x4c
            for (col = 0; col < row_size; ++col)
   1df1e:	f340 81a0 	ble.w	1e262 <arm_nn_softmax_common_s8+0x8ca>
    const q31_t remainder_mask = (1 << exponent) - 1;
   1df22:	2301      	movs	r3, #1
   1df24:	4093      	lsls	r3, r2
   1df26:	3b01      	subs	r3, #1
   1df28:	9314      	str	r3, [sp, #80]	@ 0x50
    q31_t threshold = remainder_mask >> 1;
   1df2a:	105b      	asrs	r3, r3, #1
                diff = input[col] - max;
   1df2c:	e9cd 9b18 	strd	r9, fp, [sp, #96]	@ 0x60
   1df30:	9315      	str	r3, [sp, #84]	@ 0x54
   1df32:	46ca      	mov	sl, r9
   1df34:	f8cd e018 	str.w	lr, [sp, #24]
   1df38:	e182      	b.n	1e240 <arm_nn_softmax_common_s8+0x8a8>
   1df3a:	bf00      	nop
   1df3c:	c3c3c3c4 	.word	0xc3c3c3c4
                if (diff >= diff_min)
                {
                    const int32_t res =
                        DIV_POW2(MUL_SAT(shifted_scale, EXP_ON_NEG(MUL_SAT(diff * mask, mult))), bits_over_unit) +
   1df40:	9a26      	ldr	r2, [sp, #152]	@ 0x98
    if ((m1 < 0) ^ (m2 < 0))
   1df42:	9902      	ldr	r1, [sp, #8]
   1df44:	4093      	lsls	r3, r2
   1df46:	ea81 0203 	eor.w	r2, r1, r3
    q63_t mult = 1 << 30;
   1df4a:	2a00      	cmp	r2, #0
   1df4c:	bfb5      	itete	lt
   1df4e:	4666      	movlt	r6, ip
   1df50:	f04f 4680 	movge.w	r6, #1073741824	@ 0x40000000
   1df54:	f04f 32ff 	movlt.w	r2, #4294967295	@ 0xffffffff
   1df58:	2200      	movge	r2, #0
    result = (int32_t)(mult / (1ll << 31));
   1df5a:	fbc1 6203 	smlal	r6, r2, r1, r3
   1df5e:	2a00      	cmp	r2, #0
   1df60:	da05      	bge.n	1df6e <arm_nn_softmax_common_s8+0x5d6>
   1df62:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
   1df66:	1871      	adds	r1, r6, r1
   1df68:	460e      	mov	r6, r1
   1df6a:	f142 0200 	adc.w	r2, r2, #0
   1df6e:	0ff6      	lsrs	r6, r6, #31
   1df70:	ea46 0642 	orr.w	r6, r6, r2, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
   1df74:	9a02      	ldr	r2, [sp, #8]
   1df76:	429a      	cmp	r2, r3
   1df78:	f000 8183 	beq.w	1e282 <arm_nn_softmax_common_s8+0x8ea>
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
   1df7c:	f046 427f 	orr.w	r2, r6, #4278190080	@ 0xff000000
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
   1df80:	0150      	lsls	r0, r2, #5
    const int32_t remainder = val_mod_minus_quarter - val;
   1df82:	1b92      	subs	r2, r2, r6
    SELECT_IF_NON_ZERO(39332535)
   1df84:	f3c2 7100 	ubfx	r1, r2, #28, #1
    SELECT_IF_NON_ZERO(720401)
   1df88:	f3c2 7740 	ubfx	r7, r2, #29, #1
    SELECT_IF_NON_ZERO(39332535)
   1df8c:	9110      	str	r1, [sp, #64]	@ 0x40
   1df8e:	3901      	subs	r1, #1
   1df90:	910f      	str	r1, [sp, #60]	@ 0x3c
   1df92:	1e79      	subs	r1, r7, #1
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
   1df94:	f100 5080 	add.w	r0, r0, #268435456	@ 0x10000000
    mult = mult + (q63_t)m1 * m2;
   1df98:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
   1df9c:	2500      	movs	r5, #0
   1df9e:	910d      	str	r1, [sp, #52]	@ 0x34
    SELECT_IF_NON_ZERO(242)
   1dfa0:	f3c2 7180 	ubfx	r1, r2, #30, #1
    result = (int32_t)(mult / (1ll << 31));
   1dfa4:	fbc0 3500 	smlal	r3, r5, r0, r0
    SELECT_IF_NON_ZERO(242)
   1dfa8:	9105      	str	r1, [sp, #20]
    SELECT_IF_NON_ZERO(1302514674)
   1dfaa:	f3c2 6140 	ubfx	r1, r2, #25, #1
   1dfae:	9104      	str	r1, [sp, #16]
    result = (int32_t)(mult / (1ll << 31));
   1dfb0:	2d00      	cmp	r5, #0
    SELECT_IF_NON_ZERO(290630308)
   1dfb2:	f3c2 61c0 	ubfx	r1, r2, #27, #1
    SELECT_IF_NON_ZERO(720401)
   1dfb6:	970e      	str	r7, [sp, #56]	@ 0x38
    SELECT_IF_NON_ZERO(790015084)
   1dfb8:	f3c2 6480 	ubfx	r4, r2, #26, #1
    SELECT_IF_NON_ZERO(290630308)
   1dfbc:	9103      	str	r1, [sp, #12]
    result = (int32_t)(mult / (1ll << 31));
   1dfbe:	da05      	bge.n	1dfcc <arm_nn_softmax_common_s8+0x634>
   1dfc0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
   1dfc4:	1859      	adds	r1, r3, r1
   1dfc6:	460b      	mov	r3, r1
   1dfc8:	f145 0500 	adc.w	r5, r5, #0
   1dfcc:	0fdb      	lsrs	r3, r3, #31
   1dfce:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
    mult = mult + (q63_t)m1 * m2;
   1dfd2:	fba3 1703 	umull	r1, r7, r3, r3
    result = (int32_t)(mult / (1ll << 31));
   1dfd6:	17ed      	asrs	r5, r5, #31
    mult = mult + (q63_t)m1 * m2;
   1dfd8:	f111 4180 	adds.w	r1, r1, #1073741824	@ 0x40000000
   1dfdc:	fb03 fe05 	mul.w	lr, r3, r5
    result = (int32_t)(mult / (1ll << 31));
   1dfe0:	eb47 074e 	adc.w	r7, r7, lr, lsl #1
   1dfe4:	2f00      	cmp	r7, #0
   1dfe6:	930c      	str	r3, [sp, #48]	@ 0x30
   1dfe8:	da06      	bge.n	1dff8 <arm_nn_softmax_common_s8+0x660>
   1dfea:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
   1dfee:	eb11 0e0e 	adds.w	lr, r1, lr
   1dff2:	4671      	mov	r1, lr
   1dff4:	f147 0700 	adc.w	r7, r7, #0
    mask = MASK_IF_ZERO(val);
   1dff8:	fab6 f686 	clz	r6, r6
   1dffc:	0976      	lsrs	r6, r6, #5
    return SELECT_USING_MASK(mask, NN_Q31_MAX, result);
   1dffe:	2e00      	cmp	r6, #0
   1e000:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
    mult = mult + (q63_t)m1 * m2;
   1e004:	fb00 f505 	mul.w	r5, r0, r5
   1e008:	960b      	str	r6, [sp, #44]	@ 0x2c
   1e00a:	ea4f 76e0 	mov.w	r6, r0, asr #31
   1e00e:	fb03 5506 	mla	r5, r3, r6, r5
    return SELECT_USING_MASK(mask, NN_Q31_MAX, result);
   1e012:	bf14      	ite	ne
   1e014:	f06f 4600 	mvnne.w	r6, #2147483648	@ 0x80000000
   1e018:	2600      	moveq	r6, #0
   1e01a:	9607      	str	r6, [sp, #28]
    if ((m1 < 0) ^ (m2 < 0))
   1e01c:	ea83 0900 	eor.w	r9, r3, r0
    mult = mult + (q63_t)m1 * m2;
   1e020:	fba0 6303 	umull	r6, r3, r0, r3
   1e024:	442b      	add	r3, r5
   1e026:	9d05      	ldr	r5, [sp, #20]
   1e028:	9611      	str	r6, [sp, #68]	@ 0x44
   1e02a:	3d01      	subs	r5, #1
   1e02c:	9508      	str	r5, [sp, #32]
   1e02e:	9d04      	ldr	r5, [sp, #16]
   1e030:	1e6e      	subs	r6, r5, #1
   1e032:	1e65      	subs	r5, r4, #1
    result = (int32_t)(mult / (1ll << 31));
   1e034:	0fc9      	lsrs	r1, r1, #31
   1e036:	9509      	str	r5, [sp, #36]	@ 0x24
   1e038:	9d03      	ldr	r5, [sp, #12]
   1e03a:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
    q31_t threshold = remainder_mask >> 1;
   1e03e:	ea5f 0ea1 	movs.w	lr, r1, asr #2
    SELECT_IF_NON_ZERO(1672461947)
   1e042:	f3c2 6200 	ubfx	r2, r2, #24, #1
   1e046:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
    int32_t remainder = remainder_mask & dividend;
   1e04a:	f001 0103 	and.w	r1, r1, #3
   1e04e:	f102 37ff 	add.w	r7, r2, #4294967295	@ 0xffffffff
   1e052:	950a      	str	r5, [sp, #40]	@ 0x28
    q31_t threshold = remainder_mask >> 1;
   1e054:	bf4c      	ite	mi
   1e056:	f04f 0802 	movmi.w	r8, #2
   1e05a:	f04f 0801 	movpl.w	r8, #1
    if (remainder > threshold)
   1e05e:	4588      	cmp	r8, r1
    mult = mult + (q63_t)m1 * m2;
   1e060:	9d11      	ldr	r5, [sp, #68]	@ 0x44
        result++;
   1e062:	bfb8      	it	lt
   1e064:	f10e 0e01 	addlt.w	lr, lr, #1
    q63_t mult = 1 << 30;
   1e068:	f1b9 0f00 	cmp.w	r9, #0
   1e06c:	bfb5      	itete	lt
   1e06e:	4661      	movlt	r1, ip
   1e070:	f04f 4180 	movge.w	r1, #1073741824	@ 0x40000000
   1e074:	f04f 39ff 	movlt.w	r9, #4294967295	@ 0xffffffff
   1e078:	f04f 0900 	movge.w	r9, #0
    mult = mult + (q63_t)m1 * m2;
   1e07c:	1949      	adds	r1, r1, r5
    result = (int32_t)(mult / (1ll << 31));
   1e07e:	eb43 0909 	adc.w	r9, r3, r9
   1e082:	f1b9 0f00 	cmp.w	r9, #0
   1e086:	da05      	bge.n	1e094 <arm_nn_softmax_common_s8+0x6fc>
   1e088:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
   1e08c:	18cb      	adds	r3, r1, r3
   1e08e:	4619      	mov	r1, r3
   1e090:	f149 0900 	adc.w	r9, r9, #0
   1e094:	0fc9      	lsrs	r1, r1, #31
    if ((m1 < 0) ^ (m2 < 0))
   1e096:	4bc2      	ldr	r3, [pc, #776]	@ (1e3a0 <arm_nn_softmax_common_s8+0xa08>)
    result = (int32_t)(mult / (1ll << 31));
   1e098:	4dc1      	ldr	r5, [pc, #772]	@ (1e3a0 <arm_nn_softmax_common_s8+0xa08>)
   1e09a:	ea41 0149 	orr.w	r1, r1, r9, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
   1e09e:	4471      	add	r1, lr
    if ((m1 < 0) ^ (m2 < 0))
   1e0a0:	404b      	eors	r3, r1
    q63_t mult = 1 << 30;
   1e0a2:	2b00      	cmp	r3, #0
   1e0a4:	bfb5      	itete	lt
   1e0a6:	4663      	movlt	r3, ip
   1e0a8:	f04f 4380 	movge.w	r3, #1073741824	@ 0x40000000
   1e0ac:	f04f 3eff 	movlt.w	lr, #4294967295	@ 0xffffffff
   1e0b0:	f04f 0e00 	movge.w	lr, #0
    result = (int32_t)(mult / (1ll << 31));
   1e0b4:	fbc1 3e05 	smlal	r3, lr, r1, r5
   1e0b8:	f1be 0f00 	cmp.w	lr, #0
   1e0bc:	da05      	bge.n	1e0ca <arm_nn_softmax_common_s8+0x732>
   1e0be:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
   1e0c2:	1859      	adds	r1, r3, r1
   1e0c4:	460b      	mov	r3, r1
   1e0c6:	f14e 0e00 	adc.w	lr, lr, #0
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
   1e0ca:	990c      	ldr	r1, [sp, #48]	@ 0x30
    result = (int32_t)(mult / (1ll << 31));
   1e0cc:	0fdb      	lsrs	r3, r3, #31
   1e0ce:	ea43 034e 	orr.w	r3, r3, lr, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
   1e0d2:	4419      	add	r1, r3
    if (result < 0)
   1e0d4:	104b      	asrs	r3, r1, #1
   1e0d6:	d402      	bmi.n	1e0de <arm_nn_softmax_common_s8+0x746>
    if (remainder > threshold)
   1e0d8:	07c9      	lsls	r1, r1, #31
        result++;
   1e0da:	bf48      	it	mi
   1e0dc:	3301      	addmi	r3, #1
    if ((m1 < 0) ^ (m2 < 0))
   1e0de:	49b1      	ldr	r1, [pc, #708]	@ (1e3a4 <arm_nn_softmax_common_s8+0xa0c>)
    result = (int32_t)(mult / (1ll << 31));
   1e0e0:	4db0      	ldr	r5, [pc, #704]	@ (1e3a4 <arm_nn_softmax_common_s8+0xa0c>)
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
   1e0e2:	4403      	add	r3, r0
    if ((m1 < 0) ^ (m2 < 0))
   1e0e4:	4059      	eors	r1, r3
    q63_t mult = 1 << 30;
   1e0e6:	2900      	cmp	r1, #0
   1e0e8:	bfb5      	itete	lt
   1e0ea:	4661      	movlt	r1, ip
   1e0ec:	f04f 4180 	movge.w	r1, #1073741824	@ 0x40000000
   1e0f0:	f04f 30ff 	movlt.w	r0, #4294967295	@ 0xffffffff
   1e0f4:	2000      	movge	r0, #0
    result = (int32_t)(mult / (1ll << 31));
   1e0f6:	fbc3 1005 	smlal	r1, r0, r3, r5
   1e0fa:	2800      	cmp	r0, #0
   1e0fc:	da05      	bge.n	1e10a <arm_nn_softmax_common_s8+0x772>
   1e0fe:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
   1e102:	18cb      	adds	r3, r1, r3
   1e104:	4619      	mov	r1, r3
   1e106:	f140 0000 	adc.w	r0, r0, #0
   1e10a:	0fc9      	lsrs	r1, r1, #31
   1e10c:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
    int32_t result = 1895147668 +
   1e110:	f101 41e2 	add.w	r1, r1, #1895825408	@ 0x71000000
    mult = mult + (q63_t)m1 * m2;
   1e114:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
   1e118:	2000      	movs	r0, #0
   1e11a:	4da3      	ldr	r5, [pc, #652]	@ (1e3a8 <arm_nn_softmax_common_s8+0xa10>)
    int32_t result = 1895147668 +
   1e11c:	f5a1 2125 	sub.w	r1, r1, #675840	@ 0xa5000
   1e120:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
    mult = mult + (q63_t)m1 * m2;
   1e124:	469e      	mov	lr, r3
   1e126:	4680      	mov	r8, r0
   1e128:	fbc1 e805 	smlal	lr, r8, r1, r5
    result = (int32_t)(mult / (1ll << 31));
   1e12c:	ea4f 7ede 	mov.w	lr, lr, lsr #31
   1e130:	ea4e 0e48 	orr.w	lr, lr, r8, lsl #1
    SELECT_IF_NON_ZERO(1672461947)
   1e134:	400f      	ands	r7, r1
    mult = mult + (q63_t)m1 * m2;
   1e136:	4d9d      	ldr	r5, [pc, #628]	@ (1e3ac <arm_nn_softmax_common_s8+0xa14>)
    SELECT_IF_NON_ZERO(1672461947)
   1e138:	fb0e f202 	mul.w	r2, lr, r2
   1e13c:	407a      	eors	r2, r7
    mult = mult + (q63_t)m1 * m2;
   1e13e:	4619      	mov	r1, r3
   1e140:	4607      	mov	r7, r0
   1e142:	fbc2 1705 	smlal	r1, r7, r2, r5
    SELECT_IF_NON_ZERO(1302514674)
   1e146:	4016      	ands	r6, r2
    result = (int32_t)(mult / (1ll << 31));
   1e148:	0fc9      	lsrs	r1, r1, #31
    SELECT_IF_NON_ZERO(1302514674)
   1e14a:	9a04      	ldr	r2, [sp, #16]
    SELECT_IF_NON_ZERO(790015084)
   1e14c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
    result = (int32_t)(mult / (1ll << 31));
   1e14e:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
    SELECT_IF_NON_ZERO(1302514674)
   1e152:	fb01 f202 	mul.w	r2, r1, r2
    mult = mult + (q63_t)m1 * m2;
   1e156:	4f96      	ldr	r7, [pc, #600]	@ (1e3b0 <arm_nn_softmax_common_s8+0xa18>)
    SELECT_IF_NON_ZERO(1302514674)
   1e158:	4072      	eors	r2, r6
    mult = mult + (q63_t)m1 * m2;
   1e15a:	4619      	mov	r1, r3
   1e15c:	4606      	mov	r6, r0
   1e15e:	fbc2 1607 	smlal	r1, r6, r2, r7
    result = (int32_t)(mult / (1ll << 31));
   1e162:	0fc9      	lsrs	r1, r1, #31
   1e164:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
    SELECT_IF_NON_ZERO(790015084)
   1e168:	4015      	ands	r5, r2
    mult = mult + (q63_t)m1 * m2;
   1e16a:	4e92      	ldr	r6, [pc, #584]	@ (1e3b4 <arm_nn_softmax_common_s8+0xa1c>)
    SELECT_IF_NON_ZERO(790015084)
   1e16c:	fb01 f404 	mul.w	r4, r1, r4
   1e170:	406c      	eors	r4, r5
    mult = mult + (q63_t)m1 * m2;
   1e172:	461a      	mov	r2, r3
   1e174:	4605      	mov	r5, r0
    SELECT_IF_NON_ZERO(290630308)
   1e176:	990a      	ldr	r1, [sp, #40]	@ 0x28
    mult = mult + (q63_t)m1 * m2;
   1e178:	fbc4 2506 	smlal	r2, r5, r4, r6
    SELECT_IF_NON_ZERO(290630308)
   1e17c:	4021      	ands	r1, r4
    result = (int32_t)(mult / (1ll << 31));
   1e17e:	0fd2      	lsrs	r2, r2, #31
    SELECT_IF_NON_ZERO(290630308)
   1e180:	9c03      	ldr	r4, [sp, #12]
    mult = mult + (q63_t)m1 * m2;
   1e182:	4e8d      	ldr	r6, [pc, #564]	@ (1e3b8 <arm_nn_softmax_common_s8+0xa20>)
    result = (int32_t)(mult / (1ll << 31));
   1e184:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    SELECT_IF_NON_ZERO(290630308)
   1e188:	fb02 f404 	mul.w	r4, r2, r4
   1e18c:	4622      	mov	r2, r4
   1e18e:	404a      	eors	r2, r1
    mult = mult + (q63_t)m1 * m2;
   1e190:	4605      	mov	r5, r0
   1e192:	4619      	mov	r1, r3
    SELECT_IF_NON_ZERO(39332535)
   1e194:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
    mult = mult + (q63_t)m1 * m2;
   1e196:	fbc2 1506 	smlal	r1, r5, r2, r6
    SELECT_IF_NON_ZERO(39332535)
   1e19a:	4014      	ands	r4, r2
    result = (int32_t)(mult / (1ll << 31));
   1e19c:	0fc9      	lsrs	r1, r1, #31
    SELECT_IF_NON_ZERO(39332535)
   1e19e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
    mult = mult + (q63_t)m1 * m2;
   1e1a0:	4e86      	ldr	r6, [pc, #536]	@ (1e3bc <arm_nn_softmax_common_s8+0xa24>)
    result = (int32_t)(mult / (1ll << 31));
   1e1a2:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
    SELECT_IF_NON_ZERO(39332535)
   1e1a6:	fb01 f202 	mul.w	r2, r1, r2
   1e1aa:	4062      	eors	r2, r4
    mult = mult + (q63_t)m1 * m2;
   1e1ac:	4619      	mov	r1, r3
   1e1ae:	4605      	mov	r5, r0
    SELECT_IF_NON_ZERO(720401)
   1e1b0:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
    mult = mult + (q63_t)m1 * m2;
   1e1b2:	fbc2 1506 	smlal	r1, r5, r2, r6
    SELECT_IF_NON_ZERO(720401)
   1e1b6:	4014      	ands	r4, r2
    result = (int32_t)(mult / (1ll << 31));
   1e1b8:	0fc9      	lsrs	r1, r1, #31
    SELECT_IF_NON_ZERO(720401)
   1e1ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
    result = (int32_t)(mult / (1ll << 31));
   1e1bc:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
    SELECT_IF_NON_ZERO(720401)
   1e1c0:	fb01 f202 	mul.w	r2, r1, r2
   1e1c4:	4611      	mov	r1, r2
   1e1c6:	4061      	eors	r1, r4
    SELECT_IF_NON_ZERO(242)
   1e1c8:	9a08      	ldr	r2, [sp, #32]
    mult = mult + (q63_t)m1 * m2;
   1e1ca:	24f2      	movs	r4, #242	@ 0xf2
   1e1cc:	fbc1 3004 	smlal	r3, r0, r1, r4
    SELECT_IF_NON_ZERO(242)
   1e1d0:	400a      	ands	r2, r1
    result = (int32_t)(mult / (1ll << 31));
   1e1d2:	0fdb      	lsrs	r3, r3, #31
    SELECT_IF_NON_ZERO(242)
   1e1d4:	9905      	ldr	r1, [sp, #20]
    result = (int32_t)(mult / (1ll << 31));
   1e1d6:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    SELECT_IF_NON_ZERO(242)
   1e1da:	fb03 f101 	mul.w	r1, r3, r1
    return SELECT_USING_MASK(mask, NN_Q31_MAX, result);
   1e1de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    if ((m1 < 0) ^ (m2 < 0))
   1e1e0:	9812      	ldr	r0, [sp, #72]	@ 0x48
    SELECT_IF_NON_ZERO(242)
   1e1e2:	404a      	eors	r2, r1
    return SELECT_USING_MASK(mask, NN_Q31_MAX, result);
   1e1e4:	401a      	ands	r2, r3
   1e1e6:	9b07      	ldr	r3, [sp, #28]
   1e1e8:	405a      	eors	r2, r3
    if ((m1 < 0) ^ (m2 < 0))
   1e1ea:	ea82 0300 	eor.w	r3, r2, r0
    q63_t mult = 1 << 30;
   1e1ee:	2b00      	cmp	r3, #0
   1e1f0:	bfb5      	itete	lt
   1e1f2:	4663      	movlt	r3, ip
   1e1f4:	f04f 4380 	movge.w	r3, #1073741824	@ 0x40000000
   1e1f8:	f04f 31ff 	movlt.w	r1, #4294967295	@ 0xffffffff
   1e1fc:	2100      	movge	r1, #0
    result = (int32_t)(mult / (1ll << 31));
   1e1fe:	fbc2 3100 	smlal	r3, r1, r2, r0
   1e202:	2900      	cmp	r1, #0
   1e204:	da05      	bge.n	1e212 <arm_nn_softmax_common_s8+0x87a>
   1e206:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
   1e20a:	189a      	adds	r2, r3, r2
   1e20c:	4613      	mov	r3, r2
   1e20e:	f141 0100 	adc.w	r1, r1, #0
    if (result < 0)
   1e212:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
    result = (int32_t)(mult / (1ll << 31));
   1e214:	0fdb      	lsrs	r3, r3, #31
   1e216:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    if (result < 0)
   1e21a:	fa53 f202 	asrs.w	r2, r3, r2
   1e21e:	d417      	bmi.n	1e250 <arm_nn_softmax_common_s8+0x8b8>
    int32_t remainder = remainder_mask & dividend;
   1e220:	9914      	ldr	r1, [sp, #80]	@ 0x50
   1e222:	400b      	ands	r3, r1
    if (remainder > threshold)
   1e224:	9915      	ldr	r1, [sp, #84]	@ 0x54
   1e226:	4299      	cmp	r1, r3
   1e228:	da51      	bge.n	1e2ce <arm_nn_softmax_common_s8+0x936>
                    const int32_t res =
   1e22a:	f1a2 037f 	sub.w	r3, r2, #127	@ 0x7f
                        NN_Q7_MIN;
                    output_s8[col] = (int8_t)CLAMP(res, (int32_t)NN_Q7_MAX, (int32_t)NN_Q7_MIN);
   1e22e:	2b7e      	cmp	r3, #126	@ 0x7e
   1e230:	bfd4      	ite	le
   1e232:	b25b      	sxtble	r3, r3
   1e234:	237f      	movgt	r3, #127	@ 0x7f
   1e236:	f80b 3f01 	strb.w	r3, [fp, #1]!
            for (col = 0; col < row_size; ++col)
   1e23a:	9b01      	ldr	r3, [sp, #4]
   1e23c:	4553      	cmp	r3, sl
   1e23e:	d00e      	beq.n	1e25e <arm_nn_softmax_common_s8+0x8c6>
                diff = input[col] - max;
   1e240:	9a06      	ldr	r2, [sp, #24]
   1e242:	f91a 3f01 	ldrsb.w	r3, [sl, #1]!
   1e246:	1a9b      	subs	r3, r3, r2
                if (diff >= diff_min)
   1e248:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
   1e24a:	429a      	cmp	r2, r3
   1e24c:	f77f ae78 	ble.w	1df40 <arm_nn_softmax_common_s8+0x5a8>
   1e250:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
                    output_s8[col] = (int8_t)CLAMP(res, (int32_t)NN_Q7_MAX, (int32_t)NN_Q7_MIN);
   1e254:	f80b 3f01 	strb.w	r3, [fp, #1]!
            for (col = 0; col < row_size; ++col)
   1e258:	9b01      	ldr	r3, [sp, #4]
   1e25a:	4553      	cmp	r3, sl
   1e25c:	d1f0      	bne.n	1e240 <arm_nn_softmax_common_s8+0x8a8>
   1e25e:	e9dd 9b18 	ldrd	r9, fp, [sp, #96]	@ 0x60
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
   1e262:	9a16      	ldr	r2, [sp, #88]	@ 0x58
   1e264:	9901      	ldr	r1, [sp, #4]
   1e266:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
   1e268:	4411      	add	r1, r2
   1e26a:	4491      	add	r9, r2
   1e26c:	4493      	add	fp, r2
   1e26e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
   1e270:	9101      	str	r1, [sp, #4]
   1e272:	3301      	adds	r3, #1
   1e274:	429a      	cmp	r2, r3
   1e276:	9317      	str	r3, [sp, #92]	@ 0x5c
   1e278:	f47f abaa 	bne.w	1d9d0 <arm_nn_softmax_common_s8+0x38>
            }
        }

        input += row_size;
    }
}
   1e27c:	b01d      	add	sp, #116	@ 0x74
   1e27e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
   1e282:	9b02      	ldr	r3, [sp, #8]
   1e284:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
   1e288:	f47f ae78 	bne.w	1df7c <arm_nn_softmax_common_s8+0x5e4>
   1e28c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
   1e290:	4b4b      	ldr	r3, [pc, #300]	@ (1e3c0 <arm_nn_softmax_common_s8+0xa28>)
   1e292:	930c      	str	r3, [sp, #48]	@ 0x30
   1e294:	2400      	movs	r4, #0
   1e296:	4615      	mov	r5, r2
   1e298:	4b4a      	ldr	r3, [pc, #296]	@ (1e3c4 <arm_nn_softmax_common_s8+0xa2c>)
   1e29a:	920f      	str	r2, [sp, #60]	@ 0x3c
   1e29c:	e9cd 240d 	strd	r2, r4, [sp, #52]	@ 0x34
   1e2a0:	e9cd 4207 	strd	r4, r2, [sp, #28]
   1e2a4:	9311      	str	r3, [sp, #68]	@ 0x44
   1e2a6:	920b      	str	r2, [sp, #44]	@ 0x2c
   1e2a8:	e9cd 4404 	strd	r4, r4, [sp, #16]
   1e2ac:	e9cd 5509 	strd	r5, r5, [sp, #36]	@ 0x24
   1e2b0:	4845      	ldr	r0, [pc, #276]	@ (1e3c8 <arm_nn_softmax_common_s8+0xa30>)
   1e2b2:	f8df 9124 	ldr.w	r9, [pc, #292]	@ 1e3d8 <arm_nn_softmax_common_s8+0xa40>
   1e2b6:	4b45      	ldr	r3, [pc, #276]	@ (1e3cc <arm_nn_softmax_common_s8+0xa34>)
   1e2b8:	9410      	str	r4, [sp, #64]	@ 0x40
   1e2ba:	9403      	str	r4, [sp, #12]
   1e2bc:	4621      	mov	r1, r4
   1e2be:	f44f 3e00 	mov.w	lr, #131072	@ 0x20000
   1e2c2:	4622      	mov	r2, r4
   1e2c4:	462f      	mov	r7, r5
   1e2c6:	462e      	mov	r6, r5
    q31_t threshold = remainder_mask >> 1;
   1e2c8:	f04f 0801 	mov.w	r8, #1
   1e2cc:	e6c7      	b.n	1e05e <arm_nn_softmax_common_s8+0x6c6>
                    const int32_t res =
   1e2ce:	f1a2 0380 	sub.w	r3, r2, #128	@ 0x80
                    output_s8[col] = (int8_t)CLAMP(res, (int32_t)NN_Q7_MAX, (int32_t)NN_Q7_MIN);
   1e2d2:	2a00      	cmp	r2, #0
   1e2d4:	d1ab      	bne.n	1e22e <arm_nn_softmax_common_s8+0x896>
   1e2d6:	e7ae      	b.n	1e236 <arm_nn_softmax_common_s8+0x89e>
   1e2d8:	f04f 0800 	mov.w	r8, #0
    mask = MASK_IF_ZERO(val);
   1e2dc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
   1e2e0:	4f3b      	ldr	r7, [pc, #236]	@ (1e3d0 <arm_nn_softmax_common_s8+0xa38>)
   1e2e2:	4e3c      	ldr	r6, [pc, #240]	@ (1e3d4 <arm_nn_softmax_common_s8+0xa3c>)
   1e2e4:	462b      	mov	r3, r5
   1e2e6:	462a      	mov	r2, r5
    int32_t x = 1515870810 + MUL_SAT(half_denominator, -1010580540);
   1e2e8:	f04f 315a 	mov.w	r1, #1515870810	@ 0x5a5a5a5a
    q63_t mult = 1 << 30;
   1e2ec:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
   1e2f0:	2400      	movs	r4, #0
   1e2f2:	e579      	b.n	1dde8 <arm_nn_softmax_common_s8+0x450>
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), NN_Q31_MAX, result);
   1e2f4:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   1e2f8:	4408      	add	r0, r1
    mult = mult + (q63_t)m1 * m2;
   1e2fa:	17c1      	asrs	r1, r0, #31
    if ((m1 < 0) ^ (m2 < 0))
   1e2fc:	4045      	eors	r5, r0
    mult = mult + (q63_t)m1 * m2;
   1e2fe:	fb00 f202 	mul.w	r2, r0, r2
    q63_t mult = 1 << 30;
   1e302:	2d00      	cmp	r5, #0
    mult = mult + (q63_t)m1 * m2;
   1e304:	fb03 2201 	mla	r2, r3, r1, r2
   1e308:	fba0 3103 	umull	r3, r1, r0, r3
   1e30c:	440a      	add	r2, r1
    q63_t mult = 1 << 30;
   1e30e:	bfb5      	itete	lt
   1e310:	4661      	movlt	r1, ip
   1e312:	f04f 4180 	movge.w	r1, #1073741824	@ 0x40000000
   1e316:	f04f 34ff 	movlt.w	r4, #4294967295	@ 0xffffffff
   1e31a:	2400      	movge	r4, #0
    mult = mult + (q63_t)m1 * m2;
   1e31c:	1859      	adds	r1, r3, r1
    result = (int32_t)(mult / (1ll << 31));
   1e31e:	eb42 0404 	adc.w	r4, r2, r4
   1e322:	2c00      	cmp	r4, #0
   1e324:	da05      	bge.n	1e332 <arm_nn_softmax_common_s8+0x99a>
   1e326:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
   1e32a:	18cb      	adds	r3, r1, r3
   1e32c:	4619      	mov	r1, r3
   1e32e:	f144 0400 	adc.w	r4, r4, #0
   1e332:	0fc9      	lsrs	r1, r1, #31
   1e334:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   1e338:	f1c1 5200 	rsb	r2, r1, #536870912	@ 0x20000000
    if ((m1 < 0) ^ (m2 < 0))
   1e33c:	ea80 0302 	eor.w	r3, r0, r2
    q63_t mult = 1 << 30;
   1e340:	2b00      	cmp	r3, #0
   1e342:	bfb5      	itete	lt
   1e344:	4663      	movlt	r3, ip
   1e346:	f04f 4380 	movge.w	r3, #1073741824	@ 0x40000000
   1e34a:	f04f 31ff 	movlt.w	r1, #4294967295	@ 0xffffffff
   1e34e:	2100      	movge	r1, #0
    result = (int32_t)(mult / (1ll << 31));
   1e350:	fbc0 3102 	smlal	r3, r1, r0, r2
   1e354:	2900      	cmp	r1, #0
   1e356:	da05      	bge.n	1e364 <arm_nn_softmax_common_s8+0x9cc>
   1e358:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
   1e35c:	189a      	adds	r2, r3, r2
   1e35e:	4613      	mov	r3, r2
   1e360:	f141 0100 	adc.w	r1, r1, #0
   1e364:	0fdb      	lsrs	r3, r3, #31
   1e366:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), NN_Q31_MAX, result);
   1e36a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
   1e36e:	db51      	blt.n	1e414 <arm_nn_softmax_common_s8+0xa7c>
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   1e370:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
   1e374:	4418      	add	r0, r3
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), NN_Q31_MAX, result);
   1e376:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
   1e37a:	db48      	blt.n	1e40e <arm_nn_softmax_common_s8+0xa76>
   1e37c:	9312      	str	r3, [sp, #72]	@ 0x48
   1e37e:	e5c5      	b.n	1df0c <arm_nn_softmax_common_s8+0x574>
        result++;
   1e380:	3201      	adds	r2, #1
   1e382:	f7ff bbbc 	b.w	1dafe <arm_nn_softmax_common_s8+0x166>
    result = (int32_t)(mult / (1ll << 31));
   1e386:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
   1e38a:	1986      	adds	r6, r0, r6
   1e38c:	4630      	mov	r0, r6
   1e38e:	f144 0400 	adc.w	r4, r4, #0
   1e392:	e553      	b.n	1de3c <arm_nn_softmax_common_s8+0x4a4>
        for (col = 0; col < row_size; ++col)
   1e394:	f43f ab2c 	beq.w	1d9f0 <arm_nn_softmax_common_s8+0x58>
        const int32_t headroom = __CLZ(sum);
   1e398:	f04f 0820 	mov.w	r8, #32
   1e39c:	e79e      	b.n	1e2dc <arm_nn_softmax_common_s8+0x944>
   1e39e:	bf00      	nop
   1e3a0:	2aaaaaab 	.word	0x2aaaaaab
   1e3a4:	70f5a894 	.word	0x70f5a894
   1e3a8:	63afbe7b 	.word	0x63afbe7b
   1e3ac:	4da2cbf2 	.word	0x4da2cbf2
   1e3b0:	2f16ac6c 	.word	0x2f16ac6c
   1e3b4:	1152aaa4 	.word	0x1152aaa4
   1e3b8:	02582ab7 	.word	0x02582ab7
   1e3bc:	000afe11 	.word	0x000afe11
   1e3c0:	01fffff8 	.word	0x01fffff8
   1e3c4:	40000100 	.word	0x40000100
   1e3c8:	0fffffe0 	.word	0x0fffffe0
   1e3cc:	001fffff 	.word	0x001fffff
   1e3d0:	0b4b4b4b 	.word	0x0b4b4b4b
   1e3d4:	9a5a5a5a 	.word	0x9a5a5a5a
   1e3d8:	0e000018 	.word	0x0e000018
    mult = mult + (q63_t)m1 * m2;
   1e3dc:	fb00 4402 	mla	r4, r0, r2, r4
   1e3e0:	fba3 3200 	umull	r3, r2, r3, r0
   1e3e4:	eb13 030c 	adds.w	r3, r3, ip
   1e3e8:	4422      	add	r2, r4
    result = (int32_t)(mult / (1ll << 31));
   1e3ea:	f162 0200 	sbc.w	r2, r2, #0
   1e3ee:	2a00      	cmp	r2, #0
   1e3f0:	da05      	bge.n	1e3fe <arm_nn_softmax_common_s8+0xa66>
   1e3f2:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
   1e3f6:	191c      	adds	r4, r3, r4
   1e3f8:	4623      	mov	r3, r4
   1e3fa:	f142 0200 	adc.w	r2, r2, #0
   1e3fe:	0fdb      	lsrs	r3, r3, #31
   1e400:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   1e404:	f1c3 5300 	rsb	r3, r3, #536870912	@ 0x20000000
    if ((m1 < 0) ^ (m2 < 0))
   1e408:	e55a      	b.n	1dec0 <arm_nn_softmax_common_s8+0x528>
    int32_t result = val << exp;
   1e40a:	0080      	lsls	r0, r0, #2
   1e40c:	e774      	b.n	1e2f8 <arm_nn_softmax_common_s8+0x960>
   1e40e:	0043      	lsls	r3, r0, #1
   1e410:	9312      	str	r3, [sp, #72]	@ 0x48
   1e412:	e57b      	b.n	1df0c <arm_nn_softmax_common_s8+0x574>
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), NN_Q31_MIN, result);
   1e414:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
   1e418:	f77f ad6d 	ble.w	1def6 <arm_nn_softmax_common_s8+0x55e>
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   1e41c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    int32_t result = val << exp;
   1e420:	005a      	lsls	r2, r3, #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), NN_Q31_MAX, result);
   1e422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
    int32_t result = val << exp;
   1e426:	9212      	str	r2, [sp, #72]	@ 0x48
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), NN_Q31_MAX, result);
   1e428:	f6ff ad69 	blt.w	1defe <arm_nn_softmax_common_s8+0x566>
   1e42c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
   1e430:	e7a4      	b.n	1e37c <arm_nn_softmax_common_s8+0x9e4>
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   1e432:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    int32_t result = val << exp;
   1e436:	005a      	lsls	r2, r3, #1
   1e438:	9212      	str	r2, [sp, #72]	@ 0x48
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), NN_Q31_MAX, result);
   1e43a:	e560      	b.n	1defe <arm_nn_softmax_common_s8+0x566>

0001e43c <arm_softmax_s8>:
                    const int32_t row_size,
                    const int32_t mult,
                    const int32_t shift,
                    const int32_t diff_min,
                    int8_t *output)
{
   1e43c:	b510      	push	{r4, lr}
   1e43e:	b084      	sub	sp, #16
   1e440:	9c06      	ldr	r4, [sp, #24]

        input += row_size;
        output += row_size;
    }
#else
    arm_nn_softmax_common_s8(input, num_rows, row_size, mult, shift, diff_min, false, (void *)output);
   1e442:	9400      	str	r4, [sp, #0]
{
   1e444:	9c07      	ldr	r4, [sp, #28]
    arm_nn_softmax_common_s8(input, num_rows, row_size, mult, shift, diff_min, false, (void *)output);
   1e446:	9401      	str	r4, [sp, #4]
{
   1e448:	9c08      	ldr	r4, [sp, #32]
    arm_nn_softmax_common_s8(input, num_rows, row_size, mult, shift, diff_min, false, (void *)output);
   1e44a:	9403      	str	r4, [sp, #12]
   1e44c:	2400      	movs	r4, #0
   1e44e:	9402      	str	r4, [sp, #8]
   1e450:	f7ff faa2 	bl	1d998 <arm_nn_softmax_common_s8>
#endif
}
   1e454:	b004      	add	sp, #16
   1e456:	bd10      	pop	{r4, pc}

0001e458 <_ZL21ei_cube_check_overlapP4cubeiiiif>:

/**
 * Checks whether a new section overlaps with a cube,
 * and if so, will **update the cube**
 */
__attribute__((unused)) static bool ei_cube_check_overlap(ei_classifier_cube_t *c, int x, int y, int width, int height, float confidence) {
   1e458:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    bool is_overlapping = !(c->x + c->width < x || c->y + c->height < y || c->x > x + width || c->y > y + height);
   1e45c:	6804      	ldr	r4, [r0, #0]
   1e45e:	6885      	ldr	r5, [r0, #8]
   1e460:	eb04 0e05 	add.w	lr, r4, r5
   1e464:	458e      	cmp	lr, r1
   1e466:	d332      	bcc.n	1e4ce <_ZL21ei_cube_check_overlapP4cubeiiiif+0x76>
   1e468:	6846      	ldr	r6, [r0, #4]
   1e46a:	f8d0 800c 	ldr.w	r8, [r0, #12]
   1e46e:	eb06 0708 	add.w	r7, r6, r8
   1e472:	4297      	cmp	r7, r2
   1e474:	d32b      	bcc.n	1e4ce <_ZL21ei_cube_check_overlapP4cubeiiiif+0x76>
   1e476:	eb03 0901 	add.w	r9, r3, r1
   1e47a:	454c      	cmp	r4, r9
   1e47c:	d827      	bhi.n	1e4ce <_ZL21ei_cube_check_overlapP4cubeiiiif+0x76>
   1e47e:	9b07      	ldr	r3, [sp, #28]
   1e480:	eb02 0c03 	add.w	ip, r2, r3
   1e484:	4566      	cmp	r6, ip
   1e486:	d822      	bhi.n	1e4ce <_ZL21ei_cube_check_overlapP4cubeiiiif+0x76>
    if (!is_overlapping) return false;

    // if we overlap, but the x of the new box is lower than the x of the current box
    if (x < c->x) {
   1e488:	428c      	cmp	r4, r1
   1e48a:	d903      	bls.n	1e494 <_ZL21ei_cube_check_overlapP4cubeiiiif+0x3c>
        // update x to match new box and make width larger (by the diff between the boxes)
        c->x = x;
   1e48c:	6001      	str	r1, [r0, #0]
        // update y to match new box and make height larger (by the diff between the boxes)
        c->y = y;
        c->height += c->y - y;
    }
    // if we overlap, and x+width of the new box is higher than the x+width of the current box
    if (x + width > c->x + c->width) {
   1e48e:	eb05 0e01 	add.w	lr, r5, r1
   1e492:	460c      	mov	r4, r1
    if (y < c->y) {
   1e494:	4296      	cmp	r6, r2
   1e496:	d903      	bls.n	1e4a0 <_ZL21ei_cube_check_overlapP4cubeiiiif+0x48>
        c->y = y;
   1e498:	6042      	str	r2, [r0, #4]
        // just make the box wider
        c->width += (x + width) - (c->x + c->width);
    }
    // if we overlap, and y+height of the new box is higher than the y+height of the current box
    if (y + height > c->y + c->height) {
   1e49a:	eb08 0702 	add.w	r7, r8, r2
   1e49e:	4616      	mov	r6, r2
    if (x + width > c->x + c->width) {
   1e4a0:	45f1      	cmp	r9, lr
        c->width += (x + width) - (c->x + c->width);
   1e4a2:	bf88      	it	hi
   1e4a4:	eba9 0304 	subhi.w	r3, r9, r4
        // just make the box higher
        c->height += (y + height) - (c->y + c->height);
    }
    // if the new box has higher confidence, then override confidence of the whole box
    if (confidence > c->confidence) {
   1e4a8:	edd0 7a04 	vldr	s15, [r0, #16]
        c->width += (x + width) - (c->x + c->width);
   1e4ac:	bf88      	it	hi
   1e4ae:	6083      	strhi	r3, [r0, #8]
    if (y + height > c->y + c->height) {
   1e4b0:	45bc      	cmp	ip, r7
        c->height += (y + height) - (c->y + c->height);
   1e4b2:	bf88      	it	hi
   1e4b4:	ebac 0606 	subhi.w	r6, ip, r6
    if (confidence > c->confidence) {
   1e4b8:	eef4 7ac0 	vcmpe.f32	s15, s0
        c->height += (y + height) - (c->y + c->height);
   1e4bc:	bf88      	it	hi
   1e4be:	60c6      	strhi	r6, [r0, #12]
    if (confidence > c->confidence) {
   1e4c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1e4c4:	d501      	bpl.n	1e4ca <_ZL21ei_cube_check_overlapP4cubeiiiif+0x72>
        c->confidence = confidence;
   1e4c6:	ed80 0a04 	vstr	s0, [r0, #16]
    }
    return true;
   1e4ca:	2001      	movs	r0, #1
   1e4cc:	e000      	b.n	1e4d0 <_ZL21ei_cube_check_overlapP4cubeiiiif+0x78>
    if (!is_overlapping) return false;
   1e4ce:	2000      	movs	r0, #0
}
   1e4d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001e4d4 <_ZNSt17_Function_handlerIFijjPfEPS1_E9_M_invokeERKSt9_Any_dataOjS7_OS0_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   1e4d4:	b410      	push	{r4}
   1e4d6:	468c      	mov	ip, r1
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   1e4d8:	6804      	ldr	r4, [r0, #0]
   1e4da:	f8dc 0000 	ldr.w	r0, [ip]
   1e4de:	4611      	mov	r1, r2
   1e4e0:	681a      	ldr	r2, [r3, #0]
   1e4e2:	6809      	ldr	r1, [r1, #0]
   1e4e4:	4623      	mov	r3, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   1e4e6:	f85d 4b04 	ldr.w	r4, [sp], #4
   1e4ea:	4718      	bx	r3

0001e4ec <_ZN12_GLOBAL__N_117ei_aligned_callocEjj>:
__attribute__((unused)) void * ei_aligned_calloc(size_t align, size_t size)
{
	void * ptr = NULL;

	//We want it to be a power of two since align_up operates on powers of two
	assert((align & (align - 1)) == 0);
   1e4ec:	1e43      	subs	r3, r0, #1
   1e4ee:	4203      	tst	r3, r0
{
   1e4f0:	b510      	push	{r4, lr}
	assert((align & (align - 1)) == 0);
   1e4f2:	d114      	bne.n	1e51e <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x32>

	if(align && size)
   1e4f4:	4604      	mov	r4, r0
   1e4f6:	b180      	cbz	r0, 1e51a <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x2e>
   1e4f8:	b179      	cbz	r1, 1e51a <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x2e>
		/*
		 * We know we have to fit an offset value
		 * We also allocate extra bytes to ensure we can meet the alignment
		 */
		uint32_t hdr_size = PTR_OFFSET_SZ + (align - 1);
		void * p = ei_calloc(size + hdr_size, 1);
   1e4fa:	1c48      	adds	r0, r1, #1
   1e4fc:	4420      	add	r0, r4
   1e4fe:	2101      	movs	r1, #1
   1e500:	f006 fab6 	bl	24a70 <_Z9ei_callocjj>

		if(p)
   1e504:	4602      	mov	r2, r0
   1e506:	b140      	cbz	r0, 1e51a <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x2e>
		{
			/*
			 * Add the offset size to malloc's pointer (we will always store that)
			 * Then align the resulting value to the arget alignment
			 */
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
   1e508:	1c63      	adds	r3, r4, #1
   1e50a:	4403      	add	r3, r0
   1e50c:	4264      	negs	r4, r4
   1e50e:	ea03 0004 	and.w	r0, r3, r4

			//Calculate the offset and store it behind our aligned pointer
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
   1e512:	1a82      	subs	r2, r0, r2
   1e514:	f820 2c02 	strh.w	r2, [r0, #-2]

		} // else NULL, could not malloc
	} //else NULL, invalid arguments

	return ptr;
}
   1e518:	bd10      	pop	{r4, pc}
	void * ptr = NULL;
   1e51a:	2000      	movs	r0, #0
}
   1e51c:	bd10      	pop	{r4, pc}
	assert((align & (align - 1)) == 0);
   1e51e:	4b03      	ldr	r3, [pc, #12]	@ (1e52c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x40>)
   1e520:	4a03      	ldr	r2, [pc, #12]	@ (1e530 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x44>)
   1e522:	4804      	ldr	r0, [pc, #16]	@ (1e534 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x48>)
   1e524:	2137      	movs	r1, #55	@ 0x37
   1e526:	f006 ff33 	bl	25390 <__assert_func>
   1e52a:	bf00      	nop
   1e52c:	000431ac 	.word	0x000431ac
   1e530:	000431c8 	.word	0x000431c8
   1e534:	00043200 	.word	0x00043200

0001e538 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
__attribute__((unused)) void ei_aligned_free(void * ptr)
{
   1e538:	b508      	push	{r3, lr}
	assert(ptr);
   1e53a:	b130      	cbz	r0, 1e54a <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x12>
	offset_t offset = *((offset_t *)ptr - 1);

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
   1e53c:	f830 3c02 	ldrh.w	r3, [r0, #-2]
	ei_free(p);
   1e540:	1ac0      	subs	r0, r0, r3
}
   1e542:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ei_free(p);
   1e546:	f006 baa1 	b.w	24a8c <_Z7ei_freePv>
	assert(ptr);
   1e54a:	4b03      	ldr	r3, [pc, #12]	@ (1e558 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x20>)
   1e54c:	4a03      	ldr	r2, [pc, #12]	@ (1e55c <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x24>)
   1e54e:	4804      	ldr	r0, [pc, #16]	@ (1e560 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x28>)
   1e550:	215a      	movs	r1, #90	@ 0x5a
   1e552:	f006 ff1d 	bl	25390 <__assert_func>
   1e556:	bf00      	nop
   1e558:	00043244 	.word	0x00043244
   1e55c:	00043248 	.word	0x00043248
   1e560:	00043200 	.word	0x00043200

0001e564 <_ZL12render_imagemPhm.constprop.0>:
    }
    // ns_lp_printf("Chopped length %d\n", index + 1);
    return index + 1;
}

static void render_image(uint32_t camLength, uint8_t *buff, uint32_t pixFmt) {
   1e564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // Max xfer is 512, so we have to chunk anything bigger
    int remaining = camLength;
    int offset = bufferOffset;
   1e568:	f8df 809c 	ldr.w	r8, [pc, #156]	@ 1e608 <_ZL12render_imagemPhm.constprop.0+0xa4>
    }
    // ns_lp_printf("Rendering image len = %d buff is 0x%x, offset is %d\n",camLength, buff, offset);
    // ns_lp_printf("web available %d\n",tud_vendor_write_available()); 


    while (remaining > 0) {
   1e56c:	1e05      	subs	r5, r0, #0
    int offset = bufferOffset;
   1e56e:	f8d8 3000 	ldr.w	r3, [r8]
static void render_image(uint32_t camLength, uint8_t *buff, uint32_t pixFmt) {
   1e572:	f5ad 7d03 	sub.w	sp, sp, #524	@ 0x20c
    while (remaining > 0) {
   1e576:	dd40      	ble.n	1e5fa <_ZL12render_imagemPhm.constprop.0+0x96>
        while (tud_vendor_write_available() < MAX_WEBUSB_CHUNK) {
            ns_delay_us(200);
            if (numr++ > 100) {
                // ns_lp_printf("tud_vendor_write_available break %d\n ",tud_vendor_write_available() );
                tud_vendor_write_flush();
                ns_lp_printf(".");
   1e578:	f8df b090 	ldr.w	fp, [pc, #144]	@ 1e60c <_ZL12render_imagemPhm.constprop.0+0xa8>
   1e57c:	460f      	mov	r7, r1
   1e57e:	461e      	mov	r6, r3
            data.mode = 1;
   1e580:	f04f 0901 	mov.w	r9, #1
            data.descriptor = LAST_CHUNK;
   1e584:	f04f 0a02 	mov.w	sl, #2
        int chunkSize = remaining > MAX_WEBUSB_CHUNK ? MAX_WEBUSB_CHUNK : remaining;
   1e588:	f5b5 7fff 	cmp.w	r5, #510	@ 0x1fe
   1e58c:	462c      	mov	r4, r5
   1e58e:	bfa8      	it	ge
   1e590:	f44f 74ff 	movge.w	r4, #510	@ 0x1fe
        if (offset == bufferOffset) {
   1e594:	1af3      	subs	r3, r6, r3
   1e596:	bf18      	it	ne
   1e598:	2301      	movne	r3, #1
        memcpy(data.buffer, &buff[offset], chunkSize);
   1e59a:	4622      	mov	r2, r4
   1e59c:	19b9      	adds	r1, r7, r6
   1e59e:	f10d 0006 	add.w	r0, sp, #6
        if (offset == bufferOffset) {
   1e5a2:	f88d 3004 	strb.w	r3, [sp, #4]
            data.mode = 1;
   1e5a6:	f88d 9005 	strb.w	r9, [sp, #5]
        memcpy(data.buffer, &buff[offset], chunkSize);
   1e5aa:	f7f9 ffe9 	bl	18580 <memcpy>
        if (remaining == 0) {
   1e5ae:	1b2d      	subs	r5, r5, r4
        webusb_send_data((uint8_t *)&data, chunkSize + WEBUSB_HEADER_SIZE);
   1e5b0:	f104 0102 	add.w	r1, r4, #2
   1e5b4:	a801      	add	r0, sp, #4
        offset += chunkSize;
   1e5b6:	4426      	add	r6, r4
            data.descriptor = LAST_CHUNK;
   1e5b8:	bf08      	it	eq
   1e5ba:	f88d a004 	strbeq.w	sl, [sp, #4]
        while (tud_vendor_write_available() < MAX_WEBUSB_CHUNK) {
   1e5be:	2466      	movs	r4, #102	@ 0x66
        webusb_send_data((uint8_t *)&data, chunkSize + WEBUSB_HEADER_SIZE);
   1e5c0:	f00d fc72 	bl	2bea8 <webusb_send_data>
        while (tud_vendor_write_available() < MAX_WEBUSB_CHUNK) {
   1e5c4:	e003      	b.n	1e5ce <_ZL12render_imagemPhm.constprop.0+0x6a>
            ns_delay_us(200);
   1e5c6:	f019 f849 	bl	3765c <am_hal_delay_us>
            if (numr++ > 100) {
   1e5ca:	3c01      	subs	r4, #1
   1e5cc:	d00d      	beq.n	1e5ea <_ZL12render_imagemPhm.constprop.0+0x86>
  return tud_vendor_n_write_str(0, str);
}

static inline uint32_t tud_vendor_write_available (void)
{
  return tud_vendor_n_write_available(0);
   1e5ce:	2000      	movs	r0, #0
   1e5d0:	f015 faf2 	bl	33bb8 <tud_vendor_n_write_available>
   1e5d4:	4603      	mov	r3, r0
        while (tud_vendor_write_available() < MAX_WEBUSB_CHUNK) {
   1e5d6:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
            ns_delay_us(200);
   1e5da:	f04f 00c8 	mov.w	r0, #200	@ 0xc8
        while (tud_vendor_write_available() < MAX_WEBUSB_CHUNK) {
   1e5de:	d3f2      	bcc.n	1e5c6 <_ZL12render_imagemPhm.constprop.0+0x62>
    while (remaining > 0) {
   1e5e0:	2d00      	cmp	r5, #0
   1e5e2:	dd0a      	ble.n	1e5fa <_ZL12render_imagemPhm.constprop.0+0x96>
        if (offset == bufferOffset) {
   1e5e4:	f8d8 3000 	ldr.w	r3, [r8]
   1e5e8:	e7ce      	b.n	1e588 <_ZL12render_imagemPhm.constprop.0+0x24>
  return tud_vendor_n_write_flush(0);
   1e5ea:	4620      	mov	r0, r4
   1e5ec:	f015 fa82 	bl	33af4 <tud_vendor_n_write_flush>
                ns_lp_printf(".");
   1e5f0:	4658      	mov	r0, fp
   1e5f2:	f00d fcb9 	bl	2bf68 <ns_lp_printf>
    while (remaining > 0) {
   1e5f6:	2d00      	cmp	r5, #0
   1e5f8:	dcf4      	bgt.n	1e5e4 <_ZL12render_imagemPhm.constprop.0+0x80>
   1e5fa:	2000      	movs	r0, #0
            }

        }
    }
    tud_vendor_write_flush();
}
   1e5fc:	f50d 7d03 	add.w	sp, sp, #524	@ 0x20c
   1e600:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e604:	f015 ba76 	b.w	33af4 <tud_vendor_n_write_flush>
   1e608:	1000dcb0 	.word	0x1000dcb0
   1e60c:	0004493c 	.word	0x0004493c

0001e610 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	switch (__op)
   1e610:	b152      	cbz	r2, 1e628 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x18>
   1e612:	2a01      	cmp	r2, #1
   1e614:	d102      	bne.n	1e61c <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   1e616:	6001      	str	r1, [r0, #0]
      }
   1e618:	2000      	movs	r0, #0
   1e61a:	4770      	bx	lr
	  switch (__op)
   1e61c:	2a02      	cmp	r2, #2
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
   1e61e:	bf04      	itt	eq
   1e620:	680b      	ldreq	r3, [r1, #0]
   1e622:	6003      	streq	r3, [r0, #0]
      }
   1e624:	2000      	movs	r0, #0
   1e626:	4770      	bx	lr
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
   1e628:	4b01      	ldr	r3, [pc, #4]	@ (1e630 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x20>)
   1e62a:	6003      	str	r3, [r0, #0]
      }
   1e62c:	2000      	movs	r0, #0
   1e62e:	4770      	bx	lr
   1e630:	00044b54 	.word	0x00044b54

0001e634 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	switch (__op)
   1e634:	b152      	cbz	r2, 1e64c <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x18>
   1e636:	2a01      	cmp	r2, #1
   1e638:	d102      	bne.n	1e640 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   1e63a:	6001      	str	r1, [r0, #0]
      }
   1e63c:	2000      	movs	r0, #0
   1e63e:	4770      	bx	lr
	  switch (__op)
   1e640:	2a02      	cmp	r2, #2
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
   1e642:	bf04      	itt	eq
   1e644:	680b      	ldreq	r3, [r1, #0]
   1e646:	6003      	streq	r3, [r0, #0]
      }
   1e648:	2000      	movs	r0, #0
   1e64a:	4770      	bx	lr
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
   1e64c:	4b01      	ldr	r3, [pc, #4]	@ (1e654 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x20>)
   1e64e:	6003      	str	r3, [r0, #0]
      }
   1e650:	2000      	movs	r0, #0
   1e652:	4770      	bx	lr
   1e654:	00044b18 	.word	0x00044b18

0001e658 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.isra.0>:
 * @param      output             Pointer to output tensor
 * @param      micro_tensor_arena Pointer to the arena that will be allocated
 *
 * @return  EI_IMPULSE_OK if successful
 */
static EI_IMPULSE_ERROR inference_tflite_setup(
   1e658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    TfLiteTensor* output,
    TfLiteTensor* output_labels,
    TfLiteTensor* output_scores,
    ei_unique_ptr_t& p_tensor_arena) {

    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
   1e65c:	6985      	ldr	r5, [r0, #24]
static EI_IMPULSE_ERROR inference_tflite_setup(
   1e65e:	460e      	mov	r6, r1
   1e660:	4698      	mov	r8, r3
   1e662:	4604      	mov	r4, r0
   1e664:	4617      	mov	r7, r2

    *ctx_start_us = ei_read_timer_us();
   1e666:	f006 f9cf 	bl	24a08 <_Z16ei_read_timer_usv>

    TfLiteStatus init_status = graph_config->model_init(ei_aligned_calloc);
   1e66a:	686b      	ldr	r3, [r5, #4]
    *ctx_start_us = ei_read_timer_us();
   1e66c:	e9c6 0100 	strd	r0, r1, [r6]
    TfLiteStatus init_status = graph_config->model_init(ei_aligned_calloc);
   1e670:	4813      	ldr	r0, [pc, #76]	@ (1e6c0 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.isra.0+0x68>)
   1e672:	4798      	blx	r3
    if (init_status != kTfLiteOk) {
   1e674:	b9e8      	cbnz	r0, 1e6b2 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.isra.0+0x5a>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
    }

    TfLiteStatus status;

    status = graph_config->model_input(0, input);
   1e676:	692b      	ldr	r3, [r5, #16]
   1e678:	4639      	mov	r1, r7
   1e67a:	4798      	blx	r3
    if (status != kTfLiteOk) {
   1e67c:	b9b0      	cbnz	r0, 1e6ac <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.isra.0+0x54>
        return EI_IMPULSE_TFLITE_ERROR;
    }
    status = graph_config->model_output(block_config->output_data_tensor, output);
   1e67e:	696b      	ldr	r3, [r5, #20]
   1e680:	7aa0      	ldrb	r0, [r4, #10]
   1e682:	4641      	mov	r1, r8
   1e684:	4798      	blx	r3
    if (status != kTfLiteOk) {
   1e686:	b988      	cbnz	r0, 1e6ac <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.isra.0+0x54>
        return EI_IMPULSE_TFLITE_ERROR;
    }

    if (block_config->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_SSD) {
   1e688:	f994 3009 	ldrsb.w	r3, [r4, #9]
   1e68c:	2b01      	cmp	r3, #1
   1e68e:	d002      	beq.n	1e696 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.isra.0+0x3e>
        if (status != kTfLiteOk) {
            return EI_IMPULSE_TFLITE_ERROR;
        }
    }

    return EI_IMPULSE_OK;
   1e690:	2000      	movs	r0, #0
}
   1e692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = graph_config->model_output(block_config->output_score_tensor, output_scores);
   1e696:	696b      	ldr	r3, [r5, #20]
   1e698:	7b20      	ldrb	r0, [r4, #12]
   1e69a:	9907      	ldr	r1, [sp, #28]
   1e69c:	4798      	blx	r3
        if (status != kTfLiteOk) {
   1e69e:	b928      	cbnz	r0, 1e6ac <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.isra.0+0x54>
        status = graph_config->model_output(block_config->output_labels_tensor, output_labels);
   1e6a0:	696b      	ldr	r3, [r5, #20]
   1e6a2:	7ae0      	ldrb	r0, [r4, #11]
   1e6a4:	9906      	ldr	r1, [sp, #24]
   1e6a6:	4798      	blx	r3
        if (status != kTfLiteOk) {
   1e6a8:	2800      	cmp	r0, #0
   1e6aa:	d0f1      	beq.n	1e690 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.isra.0+0x38>
        return EI_IMPULSE_TFLITE_ERROR;
   1e6ac:	f06f 0002 	mvn.w	r0, #2
   1e6b0:	e7ef      	b.n	1e692 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.isra.0+0x3a>
   1e6b2:	4601      	mov	r1, r0
        ei_printf("Failed to initialize the model (error code %d)\n", init_status);
   1e6b4:	4803      	ldr	r0, [pc, #12]	@ (1e6c4 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.isra.0+0x6c>)
   1e6b6:	f006 f9af 	bl	24a18 <_Z9ei_printfPKcz>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
   1e6ba:	f06f 0005 	mvn.w	r0, #5
   1e6be:	e7e8      	b.n	1e692 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.isra.0+0x3a>
   1e6c0:	0001e4ed 	.word	0x0001e4ed
   1e6c4:	00043274 	.word	0x00043274

0001e6c8 <__tcf_1>:
#endif

      _GLIBCXX20_CONSTEXPR
      ~_Vector_base() _GLIBCXX_NOEXCEPT
      {
	_M_deallocate(_M_impl._M_start,
   1e6c8:	4b03      	ldr	r3, [pc, #12]	@ (1e6d8 <__tcf_1+0x10>)
   1e6ca:	6818      	ldr	r0, [r3, #0]
      _GLIBCXX20_CONSTEXPR
      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
   1e6cc:	b118      	cbz	r0, 1e6d6 <__tcf_1+0xe>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   1e6ce:	6899      	ldr	r1, [r3, #8]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1e6d0:	1a09      	subs	r1, r1, r0
   1e6d2:	f016 bead 	b.w	35430 <_ZdlPvj>
    }
}

__attribute__((unused)) static void fill_result_struct_from_cubes(ei_impulse_result_t *result, std::vector<ei_classifier_cube_t*> *cubes, int out_width_factor, uint32_t object_detection_count) {
    std::vector<ei_classifier_cube_t*> bbs;
    static std::vector<ei_impulse_result_bounding_box_t> results;
   1e6d6:	4770      	bx	lr
   1e6d8:	10015cd8 	.word	0x10015cd8

0001e6dc <_Z11ei_get_datajjPf>:
static bool debug_nn = false;
static bool inferOnRgb1 = true;
// #define FEAT_TEST
int ei_get_data(size_t offset, size_t length, float *out_ptr) {
    uint32_t outindex = 0;
    for (int i = offset; i < offset+length; i++) {
   1e6dc:	4401      	add	r1, r0
   1e6de:	4281      	cmp	r1, r0
   1e6e0:	d940      	bls.n	1e764 <_Z11ei_get_datajjPf+0x88>
            float pix = (grayScaleBuffer[offset + i]<<16)+(grayScaleBuffer[offset + i]<<8)+grayScaleBuffer[offset + i];
        #else
            // Convert RGB565 to RGB888 to pix
            // Grab the 565 pixel at offset + i
            uint16_t pixel;
            if (inferOnRgb1) {
   1e6e2:	4b21      	ldr	r3, [pc, #132]	@ (1e768 <_Z11ei_get_datajjPf+0x8c>)
int ei_get_data(size_t offset, size_t length, float *out_ptr) {
   1e6e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
                pixel = (rgbBuffer1[i * 2 +1] << 8) | rgbBuffer1[i * 2];
            } else {
                pixel = (rgbBuffer2[i * 2 +1] << 8) | rgbBuffer2[i * 2];
   1e6e8:	4e20      	ldr	r6, [pc, #128]	@ (1e76c <_Z11ei_get_datajjPf+0x90>)
                pixel = (rgbBuffer1[i * 2 +1] << 8) | rgbBuffer1[i * 2];
   1e6ea:	4d21      	ldr	r5, [pc, #132]	@ (1e770 <_Z11ei_get_datajjPf+0x94>)
            if (inferOnRgb1) {
   1e6ec:	781c      	ldrb	r4, [r3, #0]
                pixel = (rgbBuffer2[i * 2 +1] << 8) | rgbBuffer2[i * 2];
   1e6ee:	f106 3eff 	add.w	lr, r6, #4294967295	@ 0xffffffff
                pixel = (rgbBuffer1[i * 2 +1] << 8) | rgbBuffer1[i * 2];
   1e6f2:	f105 3cff 	add.w	ip, r5, #4294967295	@ 0xffffffff
            if (inferOnRgb1) {
   1e6f6:	b374      	cbz	r4, 1e756 <_Z11ei_get_datajjPf+0x7a>
                pixel = (rgbBuffer1[i * 2 +1] << 8) | rgbBuffer1[i * 2];
   1e6f8:	f815 3010 	ldrb.w	r3, [r5, r0, lsl #1]
   1e6fc:	f81c 7010 	ldrb.w	r7, [ip, r0, lsl #1]
   1e700:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
    *r = ( r5 * 527 + 23 ) >> 6;
   1e704:	0afb      	lsrs	r3, r7, #11
    *g = ( g6 * 259 + 33 ) >> 6;
   1e706:	f3c7 1845 	ubfx	r8, r7, #5, #6
    *r = ( r5 * 527 + 23 ) >> 6;
   1e70a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    *g = ( g6 * 259 + 33 ) >> 6;
   1e70e:	eb08 19c8 	add.w	r9, r8, r8, lsl #7
    *r = ( r5 * 527 + 23 ) >> 6;
   1e712:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
    *g = ( g6 * 259 + 33 ) >> 6;
   1e716:	eb08 0849 	add.w	r8, r8, r9, lsl #1
    *r = ( r5 * 527 + 23 ) >> 6;
   1e71a:	3317      	adds	r3, #23
    *b = ( b5 * 527 + 23 ) >> 6;
   1e71c:	f007 071f 	and.w	r7, r7, #31
    *g = ( g6 * 259 + 33 ) >> 6;
   1e720:	f108 0821 	add.w	r8, r8, #33	@ 0x21
    *r = ( r5 * 527 + 23 ) >> 6;
   1e724:	119b      	asrs	r3, r3, #6
    *b = ( b5 * 527 + 23 ) >> 6;
   1e726:	eb07 1707 	add.w	r7, r7, r7, lsl #4
    *g = ( g6 * 259 + 33 ) >> 6;
   1e72a:	ea4f 18a8 	mov.w	r8, r8, asr #6
            }
            // uint16_t pixel = (rgbBuffer1[i * 2 +1] << 8) | rgbBuffer1[i * 2];
            uint8_t r, g, b;
            r565_to_rgb(pixel, &r, &g, &b);
            float pix = (r << 16) + (g << 8) + b;
   1e72e:	041b      	lsls	r3, r3, #16
    *b = ( b5 * 527 + 23 ) >> 6;
   1e730:	ebc7 1747 	rsb	r7, r7, r7, lsl #5
            float pix = (r << 16) + (g << 8) + b;
   1e734:	eb03 2308 	add.w	r3, r3, r8, lsl #8
    *b = ( b5 * 527 + 23 ) >> 6;
   1e738:	3717      	adds	r7, #23
            float pix = (r << 16) + (g << 8) + b;
   1e73a:	eb03 13a7 	add.w	r3, r3, r7, asr #6
   1e73e:	ee07 3a90 	vmov	s15, r3
    for (int i = offset; i < offset+length; i++) {
   1e742:	3001      	adds	r0, #1
            float pix = (r << 16) + (g << 8) + b;
   1e744:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    for (int i = offset; i < offset+length; i++) {
   1e748:	4281      	cmp	r1, r0
            float pix = (r << 16) + (g << 8) + b;
   1e74a:	ece2 7a01 	vstmia	r2!, {s15}
    for (int i = offset; i < offset+length; i++) {
   1e74e:	d8d2      	bhi.n	1e6f6 <_Z11ei_get_datajjPf+0x1a>
        #endif
        #endif
        out_ptr[outindex++] = pix;
    }
    return 0;
}
   1e750:	2000      	movs	r0, #0
   1e752:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                pixel = (rgbBuffer2[i * 2 +1] << 8) | rgbBuffer2[i * 2];
   1e756:	f816 3010 	ldrb.w	r3, [r6, r0, lsl #1]
   1e75a:	f81e 7010 	ldrb.w	r7, [lr, r0, lsl #1]
   1e75e:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
   1e762:	e7cf      	b.n	1e704 <_Z11ei_get_datajjPf+0x28>
}
   1e764:	2000      	movs	r0, #0
   1e766:	4770      	bx	lr
   1e768:	1000d000 	.word	0x1000d000
   1e76c:	10060001 	.word	0x10060001
   1e770:	10064801 	.word	0x10064801

0001e774 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   1e774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
#ifdef __MBED__
        wrapped_signal.get_data = mbed::callback(this, &SignalWithAxes::get_data);
#else
        wrapped_signal.get_data = [this](size_t offset, size_t length, float *out_ptr) {
            return this->get_data(offset, length, out_ptr);
   1e778:	6804      	ldr	r4, [r0, #0]
   1e77a:	f8d3 8000 	ldr.w	r8, [r3]
#endif
        return &wrapped_signal;
    }

    int get_data(size_t offset, size_t length, float *out_ptr) {
        size_t offset_on_original_signal = offset / _axes_count * _impulse->raw_samples_per_frame;
   1e77e:	68e3      	ldr	r3, [r4, #12]
   1e780:	68a0      	ldr	r0, [r4, #8]
        size_t length_on_original_signal = length / _axes_count * _impulse->raw_samples_per_frame;
   1e782:	6812      	ldr	r2, [r2, #0]
   1e784:	fbb2 faf0 	udiv	sl, r2, r0
        size_t offset_on_original_signal = offset / _axes_count * _impulse->raw_samples_per_frame;
   1e788:	6a1a      	ldr	r2, [r3, #32]
   1e78a:	6809      	ldr	r1, [r1, #0]
   1e78c:	fbb1 f9f0 	udiv	r9, r1, r0
   1e790:	fb02 f909 	mul.w	r9, r2, r9

        size_t out_ptr_ix = 0;

        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
   1e794:	fb02 9a0a 	mla	sl, r2, sl, r9
   1e798:	45d1      	cmp	r9, sl
   1e79a:	b087      	sub	sp, #28
        size_t out_ptr_ix = 0;
   1e79c:	bf38      	it	cc
   1e79e:	f04f 0b00 	movcc.w	fp, #0
        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
   1e7a2:	d22c      	bcs.n	1e7fe <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x8a>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
   1e7a4:	b338      	cbz	r0, 1e7f6 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x82>
   1e7a6:	eb08 068b 	add.w	r6, r8, fp, lsl #2
   1e7aa:	2500      	movs	r5, #0
   1e7ac:	2701      	movs	r7, #1
   1e7ae:	f8cd 8004 	str.w	r8, [sp, #4]
   1e7b2:	e006      	b.n	1e7c2 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x4e>
   1e7b4:	68a0      	ldr	r0, [r4, #8]
   1e7b6:	1c6b      	adds	r3, r5, #1
   1e7b8:	4283      	cmp	r3, r0
   1e7ba:	f106 0604 	add.w	r6, r6, #4
   1e7be:	d214      	bcs.n	1e7ea <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x76>
   1e7c0:	461d      	mov	r5, r3
                int r = _original_signal->get_data(ix + _axes[axis_ix], 1, &out_ptr[out_ptr_ix++]);
   1e7c2:	e9d4 0300 	ldrd	r0, r3, [r4]
   1e7c6:	5d5b      	ldrb	r3, [r3, r5]
       *  stored by `this`.
       */
      _Res
      operator()(_ArgTypes... __args) const
      {
	if (_M_empty())
   1e7c8:	6882      	ldr	r2, [r0, #8]
   1e7ca:	9605      	str	r6, [sp, #20]
   1e7cc:	444b      	add	r3, r9
   1e7ce:	e9cd 3703 	strd	r3, r7, [sp, #12]
   1e7d2:	b1c2      	cbz	r2, 1e806 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x92>
	  __throw_bad_function_call();
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   1e7d4:	f8d0 800c 	ldr.w	r8, [r0, #12]
   1e7d8:	ab05      	add	r3, sp, #20
   1e7da:	aa04      	add	r2, sp, #16
   1e7dc:	a903      	add	r1, sp, #12
   1e7de:	47c0      	blx	r8
                if (r != 0) {
   1e7e0:	2800      	cmp	r0, #0
   1e7e2:	d0e7      	beq.n	1e7b4 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x40>
      }
   1e7e4:	b007      	add	sp, #28
   1e7e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e7ea:	f10b 0b01 	add.w	fp, fp, #1
   1e7ee:	f8dd 8004 	ldr.w	r8, [sp, #4]
   1e7f2:	68e3      	ldr	r3, [r4, #12]
                int r = _original_signal->get_data(ix + _axes[axis_ix], 1, &out_ptr[out_ptr_ix++]);
   1e7f4:	44ab      	add	fp, r5
        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
   1e7f6:	6a1a      	ldr	r2, [r3, #32]
   1e7f8:	4491      	add	r9, r2
   1e7fa:	45ca      	cmp	sl, r9
   1e7fc:	d8d2      	bhi.n	1e7a4 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x30>
                    return r;
                }
            }
        }

        return 0;
   1e7fe:	2000      	movs	r0, #0
   1e800:	b007      	add	sp, #28
   1e802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  __throw_bad_function_call();
   1e806:	f019 fc5d 	bl	380c4 <_ZSt25__throw_bad_function_callv>
   1e80a:	bf00      	nop

0001e80c <_Z11msgReceivedPKhmPv>:
void msgReceived(const uint8_t *buffer, uint32_t length, void *args) {
   1e80c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    settings.contrast = buffer[0];
   1e810:	f990 7000 	ldrsb.w	r7, [r0]
    settings.brightness = buffer[1];
   1e814:	f990 6001 	ldrsb.w	r6, [r0, #1]
    settings.ev = buffer[2];
   1e818:	f990 5002 	ldrsb.w	r5, [r0, #2]
void msgReceived(const uint8_t *buffer, uint32_t length, void *args) {
   1e81c:	4604      	mov	r4, r0
   1e81e:	4688      	mov	r8, r1
    ns_lp_printf("Received camera settings: contrast %d, brightness %d, ev %d\n", settings.contrast, settings.brightness, settings.ev);
   1e820:	482e      	ldr	r0, [pc, #184]	@ (1e8dc <_Z11msgReceivedPKhmPv+0xd0>)
   1e822:	462b      	mov	r3, r5
   1e824:	4632      	mov	r2, r6
   1e826:	4639      	mov	r1, r7
   1e828:	f00d fb9e 	bl	2bf68 <ns_lp_printf>
    if (in > 3) {
   1e82c:	2f03      	cmp	r7, #3
   1e82e:	dc11      	bgt.n	1e854 <_Z11msgReceivedPKhmPv+0x48>
    } else if (in < -3) {
   1e830:	1cf9      	adds	r1, r7, #3
   1e832:	da40      	bge.n	1e8b6 <_Z11msgReceivedPKhmPv+0xaa>
    setContrast(camera, (CAM_CONTRAST_LEVEL)mapCameraValuesToArducamScale(contrast));
   1e834:	482a      	ldr	r0, [pc, #168]	@ (1e8e0 <_Z11msgReceivedPKhmPv+0xd4>)
   1e836:	2106      	movs	r1, #6
   1e838:	f00e fef2 	bl	2d620 <setContrast>
    if (in > 3) {
   1e83c:	2e03      	cmp	r6, #3
   1e83e:	dd0f      	ble.n	1e860 <_Z11msgReceivedPKhmPv+0x54>
   1e840:	2105      	movs	r1, #5
    setBrightness(camera, (CAM_BRIGHTNESS_LEVEL) mapCameraValuesToArducamScale(brightness));
   1e842:	4827      	ldr	r0, [pc, #156]	@ (1e8e0 <_Z11msgReceivedPKhmPv+0xd4>)
   1e844:	f00e fef0 	bl	2d628 <setBrightness>
    if (in > 3) {
   1e848:	2d03      	cmp	r5, #3
   1e84a:	dc11      	bgt.n	1e870 <_Z11msgReceivedPKhmPv+0x64>
    } else if (in < -3) {
   1e84c:	1ceb      	adds	r3, r5, #3
   1e84e:	da1a      	bge.n	1e886 <_Z11msgReceivedPKhmPv+0x7a>
   1e850:	2106      	movs	r1, #6
        return abs(in) * 2;
   1e852:	e00e      	b.n	1e872 <_Z11msgReceivedPKhmPv+0x66>
   1e854:	2105      	movs	r1, #5
    setContrast(camera, (CAM_CONTRAST_LEVEL)mapCameraValuesToArducamScale(contrast));
   1e856:	4822      	ldr	r0, [pc, #136]	@ (1e8e0 <_Z11msgReceivedPKhmPv+0xd4>)
   1e858:	f00e fee2 	bl	2d620 <setContrast>
    if (in > 3) {
   1e85c:	2e03      	cmp	r6, #3
   1e85e:	dcef      	bgt.n	1e840 <_Z11msgReceivedPKhmPv+0x34>
    } else if (in < -3) {
   1e860:	1cf2      	adds	r2, r6, #3
   1e862:	da1c      	bge.n	1e89e <_Z11msgReceivedPKhmPv+0x92>
    setBrightness(camera, (CAM_BRIGHTNESS_LEVEL) mapCameraValuesToArducamScale(brightness));
   1e864:	481e      	ldr	r0, [pc, #120]	@ (1e8e0 <_Z11msgReceivedPKhmPv+0xd4>)
   1e866:	2106      	movs	r1, #6
   1e868:	f00e fede 	bl	2d628 <setBrightness>
    if (in > 3) {
   1e86c:	2d03      	cmp	r5, #3
   1e86e:	dded      	ble.n	1e84c <_Z11msgReceivedPKhmPv+0x40>
   1e870:	2105      	movs	r1, #5
    setEV(camera, (CAM_EV_LEVEL) mapCameraValuesToArducamScale(ev));
   1e872:	481b      	ldr	r0, [pc, #108]	@ (1e8e0 <_Z11msgReceivedPKhmPv+0xd4>)
   1e874:	f00e fed0 	bl	2d618 <setEV>
    ns_lp_printf("Received %d bytes: %s\n", length, buffer);
   1e878:	4622      	mov	r2, r4
   1e87a:	4641      	mov	r1, r8
   1e87c:	4819      	ldr	r0, [pc, #100]	@ (1e8e4 <_Z11msgReceivedPKhmPv+0xd8>)
}
   1e87e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ns_lp_printf("Received %d bytes: %s\n", length, buffer);
   1e882:	f00d bb71 	b.w	2bf68 <ns_lp_printf>
    if (in == 0) {
   1e886:	b315      	cbz	r5, 1e8ce <_Z11msgReceivedPKhmPv+0xc2>
        return (abs(in) * 2) - 1;
   1e888:	ea85 71e5 	eor.w	r1, r5, r5, asr #31
   1e88c:	eba1 71e5 	sub.w	r1, r1, r5, asr #31
   1e890:	0049      	lsls	r1, r1, #1
    } else if (in < 0) {
   1e892:	2d00      	cmp	r5, #0
        return (abs(in) * 2) - 1;
   1e894:	b2c9      	uxtb	r1, r1
    } else if (in < 0) {
   1e896:	dbec      	blt.n	1e872 <_Z11msgReceivedPKhmPv+0x66>
        return (abs(in) * 2) - 1;
   1e898:	3901      	subs	r1, #1
   1e89a:	b2c9      	uxtb	r1, r1
   1e89c:	e7e9      	b.n	1e872 <_Z11msgReceivedPKhmPv+0x66>
    if (in == 0) {
   1e89e:	b1d6      	cbz	r6, 1e8d6 <_Z11msgReceivedPKhmPv+0xca>
        return (abs(in) * 2) - 1;
   1e8a0:	ea86 71e6 	eor.w	r1, r6, r6, asr #31
   1e8a4:	eba1 71e6 	sub.w	r1, r1, r6, asr #31
   1e8a8:	0049      	lsls	r1, r1, #1
    } else if (in < 0) {
   1e8aa:	2e00      	cmp	r6, #0
        return (abs(in) * 2) - 1;
   1e8ac:	b2c9      	uxtb	r1, r1
    } else if (in < 0) {
   1e8ae:	dbc8      	blt.n	1e842 <_Z11msgReceivedPKhmPv+0x36>
        return (abs(in) * 2) - 1;
   1e8b0:	3901      	subs	r1, #1
   1e8b2:	b2c9      	uxtb	r1, r1
   1e8b4:	e7c5      	b.n	1e842 <_Z11msgReceivedPKhmPv+0x36>
    if (in == 0) {
   1e8b6:	b167      	cbz	r7, 1e8d2 <_Z11msgReceivedPKhmPv+0xc6>
        return (abs(in) * 2) - 1;
   1e8b8:	ea87 71e7 	eor.w	r1, r7, r7, asr #31
   1e8bc:	eba1 71e7 	sub.w	r1, r1, r7, asr #31
   1e8c0:	0049      	lsls	r1, r1, #1
    } else if (in < 0) {
   1e8c2:	2f00      	cmp	r7, #0
        return (abs(in) * 2) - 1;
   1e8c4:	b2c9      	uxtb	r1, r1
    } else if (in < 0) {
   1e8c6:	dbc6      	blt.n	1e856 <_Z11msgReceivedPKhmPv+0x4a>
        return (abs(in) * 2) - 1;
   1e8c8:	3901      	subs	r1, #1
   1e8ca:	b2c9      	uxtb	r1, r1
   1e8cc:	e7c3      	b.n	1e856 <_Z11msgReceivedPKhmPv+0x4a>
        return 0;
   1e8ce:	4629      	mov	r1, r5
   1e8d0:	e7cf      	b.n	1e872 <_Z11msgReceivedPKhmPv+0x66>
   1e8d2:	4639      	mov	r1, r7
   1e8d4:	e7bf      	b.n	1e856 <_Z11msgReceivedPKhmPv+0x4a>
   1e8d6:	4631      	mov	r1, r6
   1e8d8:	e7b3      	b.n	1e842 <_Z11msgReceivedPKhmPv+0x36>
   1e8da:	bf00      	nop
   1e8dc:	000432a4 	.word	0x000432a4
   1e8e0:	10050568 	.word	0x10050568
   1e8e4:	000432e4 	.word	0x000432e4

0001e8e8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:

    return EIDSP_OK;
#endif
}

__attribute__((unused)) int extract_image_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
   1e8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e8ec:	ed2d 8b04 	vpush	{d8-d9}
   1e8f0:	b087      	sub	sp, #28
   1e8f2:	4680      	mov	r8, r0
   1e8f4:	4689      	mov	r9, r1
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
   1e8f6:	6950      	ldr	r0, [r2, #20]
   1e8f8:	494a      	ldr	r1, [pc, #296]	@ (1ea24 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x13c>)
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
   1e8fa:	f8d2 a008 	ldr.w	sl, [r2, #8]
__attribute__((unused)) int extract_image_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
   1e8fe:	f8cd 9004 	str.w	r9, [sp, #4]
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
   1e902:	f7f9 fc7d 	bl	18200 <strcmp>
#else
    const size_t page_size = 1024;
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
   1e906:	f8d8 b010 	ldr.w	fp, [r8, #16]
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
   1e90a:	2800      	cmp	r0, #0
   1e90c:	bf14      	ite	ne
   1e90e:	2603      	movne	r6, #3
   1e910:	2601      	moveq	r6, #1
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
   1e912:	f1bb 0f00 	cmp.w	fp, #0
   1e916:	d076      	beq.n	1ea06 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x11e>
   1e918:	f04f 0900 	mov.w	r9, #0

        for (size_t jx = 0; jx < elements_to_read; jx++) {
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);

            // rgb to 0..1
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
   1e91c:	ed9f 8a42 	vldr	s16, [pc, #264]	@ 1ea28 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x140>
                output_matrix->buffer[output_ix++] = b;
            }
            else {
                // ITU-R 601-2 luma transform
                // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
   1e920:	eddf 9a42 	vldr	s19, [pc, #264]	@ 1ea2c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x144>
   1e924:	ed9f 9a42 	vldr	s18, [pc, #264]	@ 1ea30 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x148>
   1e928:	eddf 8a42 	vldr	s17, [pc, #264]	@ 1ea34 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x14c>
    size_t output_ix = 0;
   1e92c:	f8cd a000 	str.w	sl, [sp]
   1e930:	464c      	mov	r4, r9
        if (a_buffer) {
            buffer = a_buffer;
            buffer_managed_by_me = false;
        }
        else {
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   1e932:	9b00      	ldr	r3, [sp, #0]
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
   1e934:	f5bb 6f80 	cmp.w	fp, #1024	@ 0x400
   1e938:	465d      	mov	r5, fp
   1e93a:	bf28      	it	cs
   1e93c:	f44f 6580 	movcs.w	r5, #1024	@ 0x400
   1e940:	fb05 f003 	mul.w	r0, r5, r3
   1e944:	2101      	movs	r1, #1
   1e946:	0080      	lsls	r0, r0, #2
   1e948:	f006 f892 	bl	24a70 <_Z9ei_callocjj>
        if (!input_matrix.buffer) {
   1e94c:	4682      	mov	sl, r0
   1e94e:	2800      	cmp	r0, #0
   1e950:	d05f      	beq.n	1ea12 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x12a>
	if (_M_empty())
   1e952:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1e956:	9005      	str	r0, [sp, #20]
   1e958:	e9cd 9503 	strd	r9, r5, [sp, #12]
   1e95c:	2b00      	cmp	r3, #0
   1e95e:	d05e      	beq.n	1ea1e <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x136>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   1e960:	f8d8 700c 	ldr.w	r7, [r8, #12]
   1e964:	ab05      	add	r3, sp, #20
   1e966:	aa04      	add	r2, sp, #16
   1e968:	a903      	add	r1, sp, #12
   1e96a:	4640      	mov	r0, r8
   1e96c:	47b8      	blx	r7
        for (size_t jx = 0; jx < elements_to_read; jx++) {
   1e96e:	f1bb 0f00 	cmp.w	fp, #0
   1e972:	d03d      	beq.n	1e9f0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x108>
                output_matrix->buffer[output_ix++] = r;
   1e974:	9b01      	ldr	r3, [sp, #4]
   1e976:	4650      	mov	r0, sl
   1e978:	681f      	ldr	r7, [r3, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
   1e97a:	2200      	movs	r2, #0
   1e97c:	e00c      	b.n	1e998 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xb0>
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
   1e97e:	ee27 7a29 	vmul.f32	s14, s14, s19
        for (size_t jx = 0; jx < elements_to_read; jx++) {
   1e982:	3201      	adds	r2, #1
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
   1e984:	eea6 7a89 	vfma.f32	s14, s13, s18
        for (size_t jx = 0; jx < elements_to_read; jx++) {
   1e988:	4295      	cmp	r5, r2
                output_matrix->buffer[output_ix++] = r;
   1e98a:	f104 0401 	add.w	r4, r4, #1
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
   1e98e:	eea7 7aa8 	vfma.f32	s14, s15, s17
                output_matrix->buffer[output_ix++] = v;
   1e992:	ed81 7a00 	vstr	s14, [r1]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
   1e996:	d92b      	bls.n	1e9f0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x108>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
   1e998:	ecf0 7a01 	vldmia	r0!, {s15}
   1e99c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
            if (channel_count == 3) {
   1e9a0:	2e03      	cmp	r6, #3
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
   1e9a2:	ee17 3a90 	vmov	r3, s15
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
   1e9a6:	f3c3 4c07 	ubfx	ip, r3, #16, #8
   1e9aa:	ee07 ca90 	vmov	s15, ip
   1e9ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
   1e9b2:	f3c3 2c07 	ubfx	ip, r3, #8, #8
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
   1e9b6:	b2db      	uxtb	r3, r3
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
   1e9b8:	ee67 6a88 	vmul.f32	s13, s15, s16
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
   1e9bc:	ee07 ca10 	vmov	s14, ip
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
   1e9c0:	ee07 3a90 	vmov	s15, r3
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
   1e9c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
   1e9c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
   1e9cc:	ee27 7a08 	vmul.f32	s14, s14, s16
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
   1e9d0:	ee67 7a88 	vmul.f32	s15, s15, s16
                output_matrix->buffer[output_ix++] = r;
   1e9d4:	eb07 0184 	add.w	r1, r7, r4, lsl #2
            if (channel_count == 3) {
   1e9d8:	d1d1      	bne.n	1e97e <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x96>
        for (size_t jx = 0; jx < elements_to_read; jx++) {
   1e9da:	3201      	adds	r2, #1
   1e9dc:	4295      	cmp	r5, r2
                output_matrix->buffer[output_ix++] = r;
   1e9de:	edc1 6a00 	vstr	s13, [r1]
                output_matrix->buffer[output_ix++] = g;
   1e9e2:	ed81 7a01 	vstr	s14, [r1, #4]
                output_matrix->buffer[output_ix++] = b;
   1e9e6:	f104 0403 	add.w	r4, r4, #3
   1e9ea:	edc1 7a02 	vstr	s15, [r1, #8]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
   1e9ee:	d8d3      	bhi.n	1e998 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xb0>
        }
    }

    ~ei_matrix() {
        if (buffer && buffer_managed_by_me) {
            ei_free(buffer);
   1e9f0:	4650      	mov	r0, sl
   1e9f2:	f006 f84b 	bl	24a8c <_Z7ei_freePv>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
   1e9f6:	f8d8 3010 	ldr.w	r3, [r8, #16]
   1e9fa:	f509 6980 	add.w	r9, r9, #1024	@ 0x400
   1e9fe:	454b      	cmp	r3, r9
            }
        }

        bytes_left -= elements_to_read;
   1ea00:	ebab 0b05 	sub.w	fp, fp, r5
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
   1ea04:	d895      	bhi.n	1e932 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x4a>
    }

    return EIDSP_OK;
   1ea06:	2000      	movs	r0, #0
}
   1ea08:	b007      	add	sp, #28
   1ea0a:	ecbd 8b04 	vpop	{d8-d9}
   1ea0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
   1ea12:	4809      	ldr	r0, [pc, #36]	@ (1ea38 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x150>)
}
   1ea14:	b007      	add	sp, #28
   1ea16:	ecbd 8b04 	vpop	{d8-d9}
   1ea1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  __throw_bad_function_call();
   1ea1e:	f019 fb51 	bl	380c4 <_ZSt25__throw_bad_function_callv>
   1ea22:	bf00      	nop
   1ea24:	00043318 	.word	0x00043318
   1ea28:	3b808081 	.word	0x3b808081
   1ea2c:	3f1645a2 	.word	0x3f1645a2
   1ea30:	3e991687 	.word	0x3e991687
   1ea34:	3de978d5 	.word	0x3de978d5
   1ea38:	fffffc16 	.word	0xfffffc16

0001ea3c <run_postprocessing>:
}

extern "C" EI_IMPULSE_ERROR run_postprocessing(ei_impulse_handle_t *handle,
                                               ei_impulse_result_t *result,
                                               bool debug) {
    if (!handle) {
   1ea3c:	b1f8      	cbz	r0, 1ea7e <run_postprocessing+0x42>
                                               bool debug) {
   1ea3e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        return EI_IMPULSE_OUT_OF_MEMORY;
    }
    auto impulse = handle->impulse;
   1ea42:	6905      	ldr	r5, [r0, #16]

    for (size_t i = 0; i < impulse->postprocessing_blocks_size; i++) {
   1ea44:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
   1ea46:	4606      	mov	r6, r0
   1ea48:	b1b3      	cbz	r3, 1ea78 <run_postprocessing+0x3c>
   1ea4a:	460f      	mov	r7, r1
   1ea4c:	4690      	mov	r8, r2
   1ea4e:	2400      	movs	r4, #0
   1ea50:	e002      	b.n	1ea58 <run_postprocessing+0x1c>
   1ea52:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
   1ea54:	42a3      	cmp	r3, r4
   1ea56:	d90f      	bls.n	1ea78 <run_postprocessing+0x3c>

        EI_IMPULSE_ERROR res = impulse->postprocessing_blocks[i].postprocess_fn(handle, result, impulse->postprocessing_blocks[i].config, debug);
   1ea58:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
   1ea5a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1ea5e:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
   1ea62:	e9dc 9203 	ldrd	r9, r2, [ip, #12]
   1ea66:	4643      	mov	r3, r8
   1ea68:	4639      	mov	r1, r7
   1ea6a:	4630      	mov	r0, r6
   1ea6c:	47c8      	blx	r9
    for (size_t i = 0; i < impulse->postprocessing_blocks_size; i++) {
   1ea6e:	3401      	adds	r4, #1
        if (res != EI_IMPULSE_OK) {
   1ea70:	2800      	cmp	r0, #0
   1ea72:	d0ee      	beq.n	1ea52 <run_postprocessing+0x16>
            return res;
        }
    }

    return EI_IMPULSE_OK;
}
   1ea74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return EI_IMPULSE_OK;
   1ea78:	2000      	movs	r0, #0
}
   1ea7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return EI_IMPULSE_OUT_OF_MEMORY;
   1ea7e:	f06f 000a 	mvn.w	r0, #10
}
   1ea82:	4770      	bx	lr

0001ea84 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj>:
    ei_feature_t *fmatrix,
    TfLiteTensor *input,
    uint32_t* input_block_ids,
    uint32_t input_block_ids_size,
    size_t mtx_size
) {
   1ea84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ea88:	b083      	sub	sp, #12
   1ea8a:	460d      	mov	r5, r1
   1ea8c:	9001      	str	r0, [sp, #4]
    size_t matrix_els = 0;
    uint32_t input_idx = 0;

    for (size_t i = 0; i < input_block_ids_size; i++) {
   1ea8e:	469b      	mov	fp, r3
   1ea90:	2b00      	cmp	r3, #0
   1ea92:	f000 8089 	beq.w	1eba8 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x124>
   1ea96:	2700      	movs	r7, #0
    uint32_t input_idx = 0;
   1ea98:	463e      	mov	r6, r7
    size_t matrix_els = 0;
   1ea9a:	46b8      	mov	r8, r7
        if (!find_mtx_by_idx(fmatrix, &matrix, cur_mtx, mtx_size)) {
            ei_printf("ERR: Cannot find matrix with id %zu\n", cur_mtx);
            return EI_IMPULSE_INVALID_SIZE;
        }
#else
        ei::matrix_t* matrix = fmatrix[0].matrix;
   1ea9c:	9b01      	ldr	r3, [sp, #4]
#endif

        matrix_els += matrix->rows * matrix->cols;

        switch (input->type) {
   1ea9e:	7f29      	ldrb	r1, [r5, #28]
        ei::matrix_t* matrix = fmatrix[0].matrix;
   1eaa0:	681c      	ldr	r4, [r3, #0]
        matrix_els += matrix->rows * matrix->cols;
   1eaa2:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
        switch (input->type) {
   1eaa6:	2903      	cmp	r1, #3
        matrix_els += matrix->rows * matrix->cols;
   1eaa8:	fb02 f303 	mul.w	r3, r2, r3
   1eaac:	4498      	add	r8, r3
        switch (input->type) {
   1eaae:	d00b      	beq.n	1eac8 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x44>
   1eab0:	2909      	cmp	r1, #9
   1eab2:	d04b      	beq.n	1eb4c <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xc8>
   1eab4:	2901      	cmp	r1, #1
   1eab6:	d036      	beq.n	1eb26 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xa2>
                    input->data.uint8[input_idx++] = static_cast<uint8_t>(
                        pre_cast_quantize(val, input->params.scale, input->params.zero_point, false));            }
                break;
            }
            default: {
                ei_printf("ERR: Cannot handle input type (%d)\n", input->type);
   1eab8:	4841      	ldr	r0, [pc, #260]	@ (1ebc0 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x13c>)
   1eaba:	f005 ffad 	bl	24a18 <_Z9ei_printfPKcz>
                return EI_IMPULSE_INPUT_TENSOR_WAS_NULL;
   1eabe:	f06f 000c 	mvn.w	r0, #12
            (int)input->bytes, (int)matrix_els);
        return EI_IMPULSE_INVALID_SIZE;
    }

    return EI_IMPULSE_OK;
}
   1eac2:	b003      	add	sp, #12
   1eac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   1eac8:	f04f 0900 	mov.w	r9, #0
   1eacc:	b1f3      	cbz	r3, 1eb0c <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x88>
                    float val = (float)matrix->buffer[ix];
   1eace:	6823      	ldr	r3, [r4, #0]
static int32_t pre_cast_quantize(float value, float scale, int32_t zero_point, bool is_signed) {

    int32_t max_value = is_signed ? 127 : 255;
    int32_t min_value = is_signed ? -128 : 0;
    // Saturate/clip any overflows post scaling
    return std::min( std::max( static_cast<int32_t>(round(value / scale)) + zero_point, min_value), max_value);
   1ead0:	edd5 7a02 	vldr	s15, [r5, #8]
   1ead4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
   1ead8:	ed93 0a00 	vldr	s0, [r3]
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
   1eadc:	ee80 0a27 	vdiv.f32	s0, s0, s15
   1eae0:	f006 fb22 	bl	25128 <roundf>
   1eae4:	68ea      	ldr	r2, [r5, #12]
                    input->data.uint8[input_idx++] = static_cast<uint8_t>(
   1eae6:	692b      	ldr	r3, [r5, #16]
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   1eae8:	f109 0901 	add.w	r9, r9, #1
   1eaec:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   1eaf0:	ee10 0a10 	vmov	r0, s0
   1eaf4:	4410      	add	r0, r2
                    input->data.uint8[input_idx++] = static_cast<uint8_t>(
   1eaf6:	f380 0208 	usat	r2, #8, r0
   1eafa:	559a      	strb	r2, [r3, r6]
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   1eafc:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   1eb00:	fb02 f303 	mul.w	r3, r2, r3
   1eb04:	454b      	cmp	r3, r9
                    input->data.uint8[input_idx++] = static_cast<uint8_t>(
   1eb06:	f106 0601 	add.w	r6, r6, #1
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   1eb0a:	d8e0      	bhi.n	1eace <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x4a>
    for (size_t i = 0; i < input_block_ids_size; i++) {
   1eb0c:	3701      	adds	r7, #1
   1eb0e:	45bb      	cmp	fp, r7
   1eb10:	d1c4      	bne.n	1ea9c <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x18>
    if (input->bytes / 4 != matrix_els && input->bytes != matrix_els) {
   1eb12:	69a9      	ldr	r1, [r5, #24]
   1eb14:	ebb8 0f91 	cmp.w	r8, r1, lsr #2
   1eb18:	d001      	beq.n	1eb1e <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x9a>
   1eb1a:	4541      	cmp	r1, r8
   1eb1c:	d14e      	bne.n	1ebbc <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x138>
    return EI_IMPULSE_OK;
   1eb1e:	2000      	movs	r0, #0
}
   1eb20:	b003      	add	sp, #12
   1eb22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   1eb26:	2b00      	cmp	r3, #0
   1eb28:	d0f0      	beq.n	1eb0c <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x88>
   1eb2a:	6822      	ldr	r2, [r4, #0]
   1eb2c:	6929      	ldr	r1, [r5, #16]
   1eb2e:	eb02 0483 	add.w	r4, r2, r3, lsl #2
   1eb32:	eb01 0186 	add.w	r1, r1, r6, lsl #2
                    input->data.f[input_idx++] = matrix->buffer[ix];
   1eb36:	f852 0b04 	ldr.w	r0, [r2], #4
   1eb3a:	f841 0b04 	str.w	r0, [r1], #4
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   1eb3e:	4294      	cmp	r4, r2
   1eb40:	d1f9      	bne.n	1eb36 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xb2>
    for (size_t i = 0; i < input_block_ids_size; i++) {
   1eb42:	3701      	adds	r7, #1
   1eb44:	45bb      	cmp	fp, r7
   1eb46:	441e      	add	r6, r3
   1eb48:	d1a8      	bne.n	1ea9c <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x18>
   1eb4a:	e7e2      	b.n	1eb12 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x8e>
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   1eb4c:	2b00      	cmp	r3, #0
   1eb4e:	d0dd      	beq.n	1eb0c <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x88>
   1eb50:	f04f 0a00 	mov.w	sl, #0
                    input->data.int8[input_idx++] = static_cast<int8_t>(
   1eb54:	f06f 097f 	mvn.w	r9, #127	@ 0x7f
                    float val = (float)matrix->buffer[ix];
   1eb58:	6823      	ldr	r3, [r4, #0]
   1eb5a:	edd5 7a02 	vldr	s15, [r5, #8]
   1eb5e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
   1eb62:	ed93 0a00 	vldr	s0, [r3]
   1eb66:	ee80 0a27 	vdiv.f32	s0, s0, s15
   1eb6a:	f006 fadd 	bl	25128 <roundf>
   1eb6e:	68eb      	ldr	r3, [r5, #12]
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   1eb70:	f10a 0a01 	add.w	sl, sl, #1
   1eb74:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   1eb78:	ee10 2a10 	vmov	r2, s0
   1eb7c:	441a      	add	r2, r3
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
   1eb7e:	2a7f      	cmp	r2, #127	@ 0x7f
   1eb80:	bfa8      	it	ge
   1eb82:	227f      	movge	r2, #127	@ 0x7f
                    input->data.int8[input_idx++] = static_cast<int8_t>(
   1eb84:	454a      	cmp	r2, r9
   1eb86:	692b      	ldr	r3, [r5, #16]
   1eb88:	bfb8      	it	lt
   1eb8a:	464a      	movlt	r2, r9
   1eb8c:	559a      	strb	r2, [r3, r6]
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   1eb8e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   1eb92:	fb02 f303 	mul.w	r3, r2, r3
   1eb96:	4553      	cmp	r3, sl
                    input->data.int8[input_idx++] = static_cast<int8_t>(
   1eb98:	f106 0601 	add.w	r6, r6, #1
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   1eb9c:	d8dc      	bhi.n	1eb58 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xd4>
    for (size_t i = 0; i < input_block_ids_size; i++) {
   1eb9e:	3701      	adds	r7, #1
   1eba0:	45bb      	cmp	fp, r7
   1eba2:	f47f af7b 	bne.w	1ea9c <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x18>
   1eba6:	e7b4      	b.n	1eb12 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x8e>
    if (input->bytes / 4 != matrix_els && input->bytes != matrix_els) {
   1eba8:	6989      	ldr	r1, [r1, #24]
   1ebaa:	088b      	lsrs	r3, r1, #2
   1ebac:	d0b7      	beq.n	1eb1e <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x9a>
        ei_printf("ERR: input tensor has size %d bytes, but input matrix has has size %d bytes\n",
   1ebae:	4805      	ldr	r0, [pc, #20]	@ (1ebc4 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x140>)
   1ebb0:	465a      	mov	r2, fp
   1ebb2:	f005 ff31 	bl	24a18 <_Z9ei_printfPKcz>
        return EI_IMPULSE_INVALID_SIZE;
   1ebb6:	f06f 0017 	mvn.w	r0, #23
   1ebba:	e782      	b.n	1eac2 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x3e>
        ei_printf("ERR: input tensor has size %d bytes, but input matrix has has size %d bytes\n",
   1ebbc:	46c3      	mov	fp, r8
   1ebbe:	e7f6      	b.n	1ebae <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x12a>
   1ebc0:	00043324 	.word	0x00043324
   1ebc4:	00043348 	.word	0x00043348

0001ebc8 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE>:
}

EI_IMPULSE_ERROR fill_output_matrix_from_tensor(
    TfLiteTensor *output,
    matrix_t *output_matrix
) {
   1ebc8:	b510      	push	{r4, lr}
   1ebca:	460b      	mov	r3, r1
    const size_t matrix_els = output_matrix->rows * output_matrix->cols;
   1ebcc:	e9d1 2401 	ldrd	r2, r4, [r1, #4]

    switch (output->type) {
   1ebd0:	7f01      	ldrb	r1, [r0, #28]
   1ebd2:	2903      	cmp	r1, #3
    const size_t matrix_els = output_matrix->rows * output_matrix->cols;
   1ebd4:	fb02 f404 	mul.w	r4, r2, r4
    switch (output->type) {
   1ebd8:	d02f      	beq.n	1ec3a <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x72>
   1ebda:	2909      	cmp	r1, #9
   1ebdc:	d00b      	beq.n	1ebf6 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x2e>
   1ebde:	2901      	cmp	r1, #1
   1ebe0:	d125      	bne.n	1ec2e <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x66>
        case kTfLiteFloat32: {
            if (output->bytes / 4 != matrix_els) {
   1ebe2:	6982      	ldr	r2, [r0, #24]
   1ebe4:	ebb4 0f92 	cmp.w	r4, r2, lsr #2
   1ebe8:	d143      	bne.n	1ec72 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xaa>
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
                    (int)output->bytes / 4, (int)matrix_els);
                return EI_IMPULSE_INVALID_SIZE;
            }

            memcpy(output_matrix->buffer, output->data.f, output->bytes);
   1ebea:	6901      	ldr	r1, [r0, #16]
   1ebec:	6818      	ldr	r0, [r3, #0]
   1ebee:	f7f9 fcc7 	bl	18580 <memcpy>
            ei_printf("ERR: Cannot handle output type (%d)\n", output->type);
            return EI_IMPULSE_OUTPUT_TENSOR_WAS_NULL;
        }
    }

    return EI_IMPULSE_OK;
   1ebf2:	2000      	movs	r0, #0
}
   1ebf4:	bd10      	pop	{r4, pc}
            if (output->bytes != matrix_els) {
   1ebf6:	6981      	ldr	r1, [r0, #24]
   1ebf8:	42a1      	cmp	r1, r4
   1ebfa:	d145      	bne.n	1ec88 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xc0>
            for (size_t ix = 0; ix < output->bytes; ix++) {
   1ebfc:	2900      	cmp	r1, #0
   1ebfe:	d0f8      	beq.n	1ebf2 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x2a>
                float value = static_cast<float>(output->data.int8[ix] - output->params.zero_point) * output->params.scale;
   1ec00:	6902      	ldr	r2, [r0, #16]
   1ec02:	68c4      	ldr	r4, [r0, #12]
   1ec04:	f101 3cff 	add.w	ip, r1, #4294967295	@ 0xffffffff
   1ec08:	6819      	ldr	r1, [r3, #0]
   1ec0a:	4494      	add	ip, r2
   1ec0c:	3a01      	subs	r2, #1
   1ec0e:	f912 3f01 	ldrsb.w	r3, [r2, #1]!
   1ec12:	ed90 7a02 	vldr	s14, [r0, #8]
   1ec16:	1b1b      	subs	r3, r3, r4
   1ec18:	ee07 3a90 	vmov	s15, r3
   1ec1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            for (size_t ix = 0; ix < output->bytes; ix++) {
   1ec20:	4562      	cmp	r2, ip
                float value = static_cast<float>(output->data.int8[ix] - output->params.zero_point) * output->params.scale;
   1ec22:	ee67 7a87 	vmul.f32	s15, s15, s14
                output_matrix->buffer[ix] = value;
   1ec26:	ece1 7a01 	vstmia	r1!, {s15}
            for (size_t ix = 0; ix < output->bytes; ix++) {
   1ec2a:	d1f0      	bne.n	1ec0e <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x46>
   1ec2c:	e7e1      	b.n	1ebf2 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x2a>
            ei_printf("ERR: Cannot handle output type (%d)\n", output->type);
   1ec2e:	4819      	ldr	r0, [pc, #100]	@ (1ec94 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xcc>)
   1ec30:	f005 fef2 	bl	24a18 <_Z9ei_printfPKcz>
            return EI_IMPULSE_OUTPUT_TENSOR_WAS_NULL;
   1ec34:	f06f 000d 	mvn.w	r0, #13
}
   1ec38:	bd10      	pop	{r4, pc}
            if (output->bytes != matrix_els) {
   1ec3a:	6981      	ldr	r1, [r0, #24]
   1ec3c:	42a1      	cmp	r1, r4
   1ec3e:	d123      	bne.n	1ec88 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xc0>
            for (size_t ix = 0; ix < output->bytes; ix++) {
   1ec40:	2900      	cmp	r1, #0
   1ec42:	d0d6      	beq.n	1ebf2 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x2a>
                float value = static_cast<float>(output->data.uint8[ix] - output->params.zero_point) * output->params.scale;
   1ec44:	6902      	ldr	r2, [r0, #16]
   1ec46:	68c4      	ldr	r4, [r0, #12]
   1ec48:	f101 3cff 	add.w	ip, r1, #4294967295	@ 0xffffffff
   1ec4c:	6819      	ldr	r1, [r3, #0]
   1ec4e:	4494      	add	ip, r2
   1ec50:	3a01      	subs	r2, #1
   1ec52:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   1ec56:	ed90 7a02 	vldr	s14, [r0, #8]
   1ec5a:	1b1b      	subs	r3, r3, r4
   1ec5c:	ee07 3a90 	vmov	s15, r3
   1ec60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            for (size_t ix = 0; ix < output->bytes; ix++) {
   1ec64:	4594      	cmp	ip, r2
                float value = static_cast<float>(output->data.uint8[ix] - output->params.zero_point) * output->params.scale;
   1ec66:	ee67 7a87 	vmul.f32	s15, s15, s14
                output_matrix->buffer[ix] = value;
   1ec6a:	ece1 7a01 	vstmia	r1!, {s15}
            for (size_t ix = 0; ix < output->bytes; ix++) {
   1ec6e:	d1f0      	bne.n	1ec52 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x8a>
   1ec70:	e7bf      	b.n	1ebf2 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x2a>
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
   1ec72:	1e11      	subs	r1, r2, #0
   1ec74:	bfb8      	it	lt
   1ec76:	3103      	addlt	r1, #3
   1ec78:	4807      	ldr	r0, [pc, #28]	@ (1ec98 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xd0>)
   1ec7a:	4622      	mov	r2, r4
   1ec7c:	1089      	asrs	r1, r1, #2
   1ec7e:	f005 fecb 	bl	24a18 <_Z9ei_printfPKcz>
                return EI_IMPULSE_INVALID_SIZE;
   1ec82:	f06f 0017 	mvn.w	r0, #23
}
   1ec86:	bd10      	pop	{r4, pc}
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
   1ec88:	4803      	ldr	r0, [pc, #12]	@ (1ec98 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xd0>)
   1ec8a:	4622      	mov	r2, r4
   1ec8c:	f005 fec4 	bl	24a18 <_Z9ei_printfPKcz>
                return EI_IMPULSE_INVALID_SIZE;
   1ec90:	e7f7      	b.n	1ec82 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xba>
   1ec92:	bf00      	nop
   1ec94:	000433dc 	.word	0x000433dc
   1ec98:	00043398 	.word	0x00043398

0001ec9c <run_inference>:
extern "C" EI_IMPULSE_ERROR run_inference(
    ei_impulse_handle_t *handle,
    ei_feature_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
   1ec9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eca0:	4606      	mov	r6, r0
    auto& impulse = handle->impulse;
    for (size_t ix = 0; ix < impulse->learning_blocks_size; ix++) {
   1eca2:	6900      	ldr	r0, [r0, #16]
{
   1eca4:	4698      	mov	r8, r3
    for (size_t ix = 0; ix < impulse->learning_blocks_size; ix++) {
   1eca6:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
{
   1ecaa:	b085      	sub	sp, #20
    for (size_t ix = 0; ix < impulse->learning_blocks_size; ix++) {
   1ecac:	b323      	cbz	r3, 1ecf8 <run_inference+0x5c>
   1ecae:	460f      	mov	r7, r1
   1ecb0:	4615      	mov	r5, r2
   1ecb2:	2400      	movs	r4, #0
   1ecb4:	e004      	b.n	1ecc0 <run_inference+0x24>
   1ecb6:	6930      	ldr	r0, [r6, #16]
   1ecb8:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
   1ecbc:	42a3      	cmp	r3, r4
   1ecbe:	d91b      	bls.n	1ecf8 <run_inference+0x5c>

        ei_learning_block_t block = impulse->learning_blocks[ix];
   1ecc0:	6d83      	ldr	r3, [r0, #88]	@ 0x58
   1ecc2:	eb03 1c44 	add.w	ip, r3, r4, lsl #5
        }
#endif

        result->copy_output = block.keep_output;

        EI_IMPULSE_ERROR res = block.infer_fn(impulse, fmatrix, ix, (uint32_t*)block.input_block_ids, block.input_block_ids_size, result, block.config, debug);
   1ecc6:	4622      	mov	r2, r4
        ei_learning_block_t block = impulse->learning_blocks[ix];
   1ecc8:	f8dc a00c 	ldr.w	sl, [ip, #12]
   1eccc:	f89c e018 	ldrb.w	lr, [ip, #24]
        result->copy_output = block.keep_output;
   1ecd0:	f89c b004 	ldrb.w	fp, [ip, #4]
        ei_learning_block_t block = impulse->learning_blocks[ix];
   1ecd4:	f8dc 3014 	ldr.w	r3, [ip, #20]
   1ecd8:	f8dc 9008 	ldr.w	r9, [ip, #8]
        result->copy_output = block.keep_output;
   1ecdc:	f885 b040 	strb.w	fp, [r5, #64]	@ 0x40
        EI_IMPULSE_ERROR res = block.infer_fn(impulse, fmatrix, ix, (uint32_t*)block.input_block_ids, block.input_block_ids_size, result, block.config, debug);
   1ece0:	4639      	mov	r1, r7
   1ece2:	e9cd a802 	strd	sl, r8, [sp, #8]
   1ece6:	e9cd e500 	strd	lr, r5, [sp]
   1ecea:	47c8      	blx	r9
    for (size_t ix = 0; ix < impulse->learning_blocks_size; ix++) {
   1ecec:	3401      	adds	r4, #1
        if (res != EI_IMPULSE_OK) {
   1ecee:	2800      	cmp	r0, #0
   1ecf0:	d0e1      	beq.n	1ecb6 <run_inference+0x1a>
    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
        return EI_IMPULSE_CANCELED;
    }

    return EI_IMPULSE_OK;
}
   1ecf2:	b005      	add	sp, #20
   1ecf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
   1ecf8:	f005 fe84 	bl	24a04 <_Z29ei_run_impulse_check_canceledv>
    return EI_IMPULSE_OK;
   1ecfc:	1c83      	adds	r3, r0, #2
   1ecfe:	bf18      	it	ne
   1ed00:	2000      	movne	r0, #0
}
   1ed02:	b005      	add	sp, #20
   1ed04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001ed08 <_Z20camera_state_machinev>:
void camera_state_machine() {
   1ed08:	b570      	push	{r4, r5, r6, lr}
    switch (camera_state) {
   1ed0a:	4c3d      	ldr	r4, [pc, #244]	@ (1ee00 <_Z20camera_state_machinev+0xf8>)
    ns_delay_us(1000);
   1ed0c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   1ed10:	f018 fca4 	bl	3765c <am_hal_delay_us>
    switch (camera_state) {
   1ed14:	7823      	ldrb	r3, [r4, #0]
   1ed16:	2b04      	cmp	r3, #4
   1ed18:	d818      	bhi.n	1ed4c <_Z20camera_state_machinev+0x44>
   1ed1a:	e8df f003 	tbb	[pc, r3]
   1ed1e:	4a21      	.short	0x4a21
   1ed20:	5803      	.short	0x5803
   1ed22:	18          	.byte	0x18
   1ed23:	00          	.byte	0x00
        if (dmaComplete) {
   1ed24:	4b37      	ldr	r3, [pc, #220]	@ (1ee04 <_Z20camera_state_machinev+0xfc>)
   1ed26:	781a      	ldrb	r2, [r3, #0]
   1ed28:	b182      	cbz	r2, 1ed4c <_Z20camera_state_machinev+0x44>
            if (jpgReady2) {
   1ed2a:	4d37      	ldr	r5, [pc, #220]	@ (1ee08 <_Z20camera_state_machinev+0x100>)
            dmaComplete = false;
   1ed2c:	2200      	movs	r2, #0
   1ed2e:	701a      	strb	r2, [r3, #0]
            if (jpgReady2) {
   1ed30:	782b      	ldrb	r3, [r5, #0]
   1ed32:	2b00      	cmp	r3, #0
   1ed34:	d160      	bne.n	1edf8 <_Z20camera_state_machinev+0xf0>
    camera_config.imageMode = NS_CAM_IMAGE_MODE_320X320;
   1ed36:	4835      	ldr	r0, [pc, #212]	@ (1ee0c <_Z20camera_state_machinev+0x104>)
            jpgReady2 = true; // signal to CPU FSM
   1ed38:	2201      	movs	r2, #1
    camera_config.imageMode = NS_CAM_IMAGE_MODE_320X320;
   1ed3a:	f44f 7386 	mov.w	r3, #268	@ 0x10c
            jpgReady2 = true; // signal to CPU FSM
   1ed3e:	702a      	strb	r2, [r5, #0]
    camera_config.imageMode = NS_CAM_IMAGE_MODE_320X320;
   1ed40:	f8a0 300d 	strh.w	r3, [r0, #13]
    int err = ns_press_shutter_button(cfg);
   1ed44:	f00d fda4 	bl	2c890 <ns_press_shutter_button>
            camera_state = WAITING_FOR_SHUTTER;
   1ed48:	2300      	movs	r3, #0
   1ed4a:	7023      	strb	r3, [r4, #0]
}
   1ed4c:	bd70      	pop	{r4, r5, r6, pc}
        if (jpgReady2) {
   1ed4e:	4b2e      	ldr	r3, [pc, #184]	@ (1ee08 <_Z20camera_state_machinev+0x100>)
   1ed50:	781b      	ldrb	r3, [r3, #0]
   1ed52:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
   1ed56:	2b00      	cmp	r3, #0
   1ed58:	d041      	beq.n	1edde <_Z20camera_state_machinev+0xd6>
            camera_state = CAMERA_IDLE_2;
   1ed5a:	2304      	movs	r3, #4
   1ed5c:	7023      	strb	r3, [r4, #0]
}
   1ed5e:	bd70      	pop	{r4, r5, r6, pc}
        if (pictureTaken) {
   1ed60:	4e2b      	ldr	r6, [pc, #172]	@ (1ee10 <_Z20camera_state_machinev+0x108>)
   1ed62:	7833      	ldrb	r3, [r6, #0]
   1ed64:	2b00      	cmp	r3, #0
   1ed66:	d0f1      	beq.n	1ed4c <_Z20camera_state_machinev+0x44>
            if ((dmaTarget == 1) && (jpgReady1)) {
   1ed68:	4d2a      	ldr	r5, [pc, #168]	@ (1ee14 <_Z20camera_state_machinev+0x10c>)
   1ed6a:	782b      	ldrb	r3, [r5, #0]
   1ed6c:	2b01      	cmp	r3, #1
   1ed6e:	d03e      	beq.n	1edee <_Z20camera_state_machinev+0xe6>
            } else if ((dmaTarget == 2) && (jpgReady2)){
   1ed70:	782b      	ldrb	r3, [r5, #0]
   1ed72:	2b02      	cmp	r3, #2
   1ed74:	d103      	bne.n	1ed7e <_Z20camera_state_machinev+0x76>
   1ed76:	4b24      	ldr	r3, [pc, #144]	@ (1ee08 <_Z20camera_state_machinev+0x100>)
   1ed78:	781b      	ldrb	r3, [r3, #0]
   1ed7a:	2b00      	cmp	r3, #0
   1ed7c:	d1ed      	bne.n	1ed5a <_Z20camera_state_machinev+0x52>
                uint32_t buffer_length = start_jpg_dma(dmaTarget);
   1ed7e:	782b      	ldrb	r3, [r5, #0]
        camLength = ns_start_dma_read(&camera_config, jpgBuffer1, &bufferOffset, JPG_BUFF_SIZE);
   1ed80:	4a25      	ldr	r2, [pc, #148]	@ (1ee18 <_Z20camera_state_machinev+0x110>)
        camLength = ns_start_dma_read(&camera_config, jpgBuffer2, &bufferOffset, JPG_BUFF_SIZE);
   1ed82:	4822      	ldr	r0, [pc, #136]	@ (1ee0c <_Z20camera_state_machinev+0x104>)
    if (bufferId == 1) {
   1ed84:	2b01      	cmp	r3, #1
        camLength = ns_start_dma_read(&camera_config, jpgBuffer1, &bufferOffset, JPG_BUFF_SIZE);
   1ed86:	bf0c      	ite	eq
   1ed88:	4924      	ldreq	r1, [pc, #144]	@ (1ee1c <_Z20camera_state_machinev+0x114>)
        camLength = ns_start_dma_read(&camera_config, jpgBuffer2, &bufferOffset, JPG_BUFF_SIZE);
   1ed8a:	4925      	ldrne	r1, [pc, #148]	@ (1ee20 <_Z20camera_state_machinev+0x118>)
   1ed8c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
   1ed90:	f00d fdb2 	bl	2c8f8 <ns_start_dma_read>
                pictureTaken = false;
   1ed94:	2300      	movs	r3, #0
   1ed96:	7033      	strb	r3, [r6, #0]
                if (dmaTarget == 1) {
   1ed98:	782b      	ldrb	r3, [r5, #0]
    bufferOffset = 1;
   1ed9a:	491f      	ldr	r1, [pc, #124]	@ (1ee18 <_Z20camera_state_machinev+0x110>)
   1ed9c:	2201      	movs	r2, #1
                if (dmaTarget == 1) {
   1ed9e:	4293      	cmp	r3, r2
    bufferOffset = 1;
   1eda0:	600a      	str	r2, [r1, #0]
                if (dmaTarget == 1) {
   1eda2:	b2d9      	uxtb	r1, r3
   1eda4:	d01d      	beq.n	1ede2 <_Z20camera_state_machinev+0xda>
                    buffer_length2 = buffer_length;
   1eda6:	491f      	ldr	r1, [pc, #124]	@ (1ee24 <_Z20camera_state_machinev+0x11c>)
                    dmaTarget = 1;
   1eda8:	702a      	strb	r2, [r5, #0]
                    camera_state = WAITING_FOR_DMA_2;
   1edaa:	2302      	movs	r3, #2
                    buffer_length2 = buffer_length;
   1edac:	6008      	str	r0, [r1, #0]
                    camera_state = WAITING_FOR_DMA_2;
   1edae:	7023      	strb	r3, [r4, #0]
}
   1edb0:	bd70      	pop	{r4, r5, r6, pc}
        if (dmaComplete) {
   1edb2:	4b14      	ldr	r3, [pc, #80]	@ (1ee04 <_Z20camera_state_machinev+0xfc>)
   1edb4:	781a      	ldrb	r2, [r3, #0]
   1edb6:	2a00      	cmp	r2, #0
   1edb8:	d0c8      	beq.n	1ed4c <_Z20camera_state_machinev+0x44>
            if (jpgReady1) {
   1edba:	4d1b      	ldr	r5, [pc, #108]	@ (1ee28 <_Z20camera_state_machinev+0x120>)
            dmaComplete = false;
   1edbc:	2200      	movs	r2, #0
   1edbe:	701a      	strb	r2, [r3, #0]
            if (jpgReady1) {
   1edc0:	782b      	ldrb	r3, [r5, #0]
   1edc2:	2b00      	cmp	r3, #0
   1edc4:	d0b7      	beq.n	1ed36 <_Z20camera_state_machinev+0x2e>
                ns_lp_printf("Warning: JPG1 overwritten\n");
   1edc6:	4819      	ldr	r0, [pc, #100]	@ (1ee2c <_Z20camera_state_machinev+0x124>)
   1edc8:	f00d f8ce 	bl	2bf68 <ns_lp_printf>
            jpgReady1 = true; // signal to CPU FSM
   1edcc:	e7b3      	b.n	1ed36 <_Z20camera_state_machinev+0x2e>
        if (jpgReady1) {
   1edce:	4b16      	ldr	r3, [pc, #88]	@ (1ee28 <_Z20camera_state_machinev+0x120>)
   1edd0:	781b      	ldrb	r3, [r3, #0]
   1edd2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
   1edd6:	b113      	cbz	r3, 1edde <_Z20camera_state_machinev+0xd6>
            camera_state = CAMERA_IDLE_1;
   1edd8:	2303      	movs	r3, #3
   1edda:	7023      	strb	r3, [r4, #0]
}
   1eddc:	bd70      	pop	{r4, r5, r6, pc}
            camera_state = WAITING_FOR_SHUTTER;
   1edde:	7022      	strb	r2, [r4, #0]
}
   1ede0:	bd70      	pop	{r4, r5, r6, pc}
                    dmaTarget = 2;
   1ede2:	2302      	movs	r3, #2
   1ede4:	702b      	strb	r3, [r5, #0]
                    buffer_length1 = buffer_length;
   1ede6:	4b12      	ldr	r3, [pc, #72]	@ (1ee30 <_Z20camera_state_machinev+0x128>)
   1ede8:	6018      	str	r0, [r3, #0]
                    camera_state = WAITING_FOR_DMA_1;
   1edea:	7021      	strb	r1, [r4, #0]
}
   1edec:	bd70      	pop	{r4, r5, r6, pc}
            if ((dmaTarget == 1) && (jpgReady1)) {
   1edee:	4b0e      	ldr	r3, [pc, #56]	@ (1ee28 <_Z20camera_state_machinev+0x120>)
   1edf0:	781b      	ldrb	r3, [r3, #0]
   1edf2:	2b00      	cmp	r3, #0
   1edf4:	d0bc      	beq.n	1ed70 <_Z20camera_state_machinev+0x68>
   1edf6:	e7ef      	b.n	1edd8 <_Z20camera_state_machinev+0xd0>
                ns_lp_printf("Warning: JPG2 overwritten\n");
   1edf8:	480e      	ldr	r0, [pc, #56]	@ (1ee34 <_Z20camera_state_machinev+0x12c>)
   1edfa:	f00d f8b5 	bl	2bf68 <ns_lp_printf>
   1edfe:	e79a      	b.n	1ed36 <_Z20camera_state_machinev+0x2e>
   1ee00:	1000dcc0 	.word	0x1000dcc0
   1ee04:	1000dcbf 	.word	0x1000dcbf
   1ee08:	1000dcbc 	.word	0x1000dcbc
   1ee0c:	1000d004 	.word	0x1000d004
   1ee10:	1000dcbe 	.word	0x1000dcbe
   1ee14:	1000d001 	.word	0x1000d001
   1ee18:	1000dcb0 	.word	0x1000dcb0
   1ee1c:	10069000 	.word	0x10069000
   1ee20:	1000dcd0 	.word	0x1000dcd0
   1ee24:	1000dcb4 	.word	0x1000dcb4
   1ee28:	1000dcbd 	.word	0x1000dcbd
   1ee2c:	000434cc 	.word	0x000434cc
   1ee30:	1000dcb8 	.word	0x1000dcb8
   1ee34:	000434e8 	.word	0x000434e8

0001ee38 <_Z20picture_dma_completeP13ns_camera_cfg>:
    dmaComplete = true;
   1ee38:	4b02      	ldr	r3, [pc, #8]	@ (1ee44 <_Z20picture_dma_completeP13ns_camera_cfg+0xc>)
   1ee3a:	2201      	movs	r2, #1
   1ee3c:	701a      	strb	r2, [r3, #0]
    camera_state_machine();
   1ee3e:	f7ff bf63 	b.w	1ed08 <_Z20camera_state_machinev>
   1ee42:	bf00      	nop
   1ee44:	1000dcbf 	.word	0x1000dcbf

0001ee48 <_Z22picture_taken_completeP13ns_camera_cfg>:
    pictureTaken = true;
   1ee48:	4b02      	ldr	r3, [pc, #8]	@ (1ee54 <_Z22picture_taken_completeP13ns_camera_cfg+0xc>)
   1ee4a:	2201      	movs	r2, #1
   1ee4c:	701a      	strb	r2, [r3, #0]
    camera_state_machine();
   1ee4e:	f7ff bf5b 	b.w	1ed08 <_Z20camera_state_machinev>
   1ee52:	bf00      	nop
   1ee54:	1000dcbe 	.word	0x1000dcbe

0001ee58 <_Z13render_resultP19ei_impulse_result_t>:
    if (inf == NULL) {
   1ee58:	2800      	cmp	r0, #0
   1ee5a:	f000 80ab 	beq.w	1efb4 <_Z13render_resultP19ei_impulse_result_t+0x15c>
void render_result(ei_impulse_result_t *inf) {
   1ee5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    metadata.decode_time = decodeTimePerFrame/1000;
   1ee62:	4a58      	ldr	r2, [pc, #352]	@ (1efc4 <_Z13render_resultP19ei_impulse_result_t+0x16c>)
    metadata.inference_latency = inferenceTimePerFrame/1000;
   1ee64:	4b58      	ldr	r3, [pc, #352]	@ (1efc8 <_Z13render_resultP19ei_impulse_result_t+0x170>)
    metadata.decode_time = decodeTimePerFrame/1000;
   1ee66:	4959      	ldr	r1, [pc, #356]	@ (1efcc <_Z13render_resultP19ei_impulse_result_t+0x174>)
   1ee68:	6812      	ldr	r2, [r2, #0]
    metadata.inference_latency = inferenceTimePerFrame/1000;
   1ee6a:	681b      	ldr	r3, [r3, #0]
void render_result(ei_impulse_result_t *inf) {
   1ee6c:	ed2d 8b02 	vpush	{d8}
   1ee70:	4606      	mov	r6, r0
   1ee72:	b0a5      	sub	sp, #148	@ 0x94
    metadata.decode_time = decodeTimePerFrame/1000;
   1ee74:	fba1 0202 	umull	r0, r2, r1, r2
    metadata.inference_latency = inferenceTimePerFrame/1000;
   1ee78:	fba1 1303 	umull	r1, r3, r1, r3
   1ee7c:	099b      	lsrs	r3, r3, #6
    for (size_t ix = 0; ix < inf->bounding_boxes_count; ix++) {
   1ee7e:	6871      	ldr	r1, [r6, #4]
    metadata.inference_latency = inferenceTimePerFrame/1000;
   1ee80:	f88d 300e 	strb.w	r3, [sp, #14]
    metadata.descriptor = 3;
   1ee84:	2003      	movs	r0, #3
    metadata.decode_time = decodeTimePerFrame/1000;
   1ee86:	0992      	lsrs	r2, r2, #6
    metadata.microjoules_per_inference = 266; // TODO: Get this from the energy monitor
   1ee88:	f44f 7385 	mov.w	r3, #266	@ 0x10a
    metadata.decode_time = decodeTimePerFrame/1000;
   1ee8c:	f88d 200d 	strb.w	r2, [sp, #13]
    metadata.descriptor = 3;
   1ee90:	f88d 000c 	strb.w	r0, [sp, #12]
    metadata.microjoules_per_inference = 266; // TODO: Get this from the energy monitor
   1ee94:	f8ad 3010 	strh.w	r3, [sp, #16]
    for (size_t ix = 0; ix < inf->bounding_boxes_count; ix++) {
   1ee98:	2900      	cmp	r1, #0
   1ee9a:	f000 808e 	beq.w	1efba <_Z13render_resultP19ei_impulse_result_t+0x162>
   1ee9e:	2500      	movs	r5, #0
        metadata.results[result_index].confidence = bb.value * 100;
   1eea0:	eddf 8a4b 	vldr	s17, [pc, #300]	@ 1efd0 <_Z13render_resultP19ei_impulse_result_t+0x178>
   1eea4:	f10d 0413 	add.w	r4, sp, #19
    int result_index = 0;
   1eea8:	46ab      	mov	fp, r5
   1eeaa:	e025      	b.n	1eef8 <_Z13render_resultP19ei_impulse_result_t+0xa0>
            ns_lp_printf("bb.value %f\n", bb.value);
   1eeac:	f7f9 fdd8 	bl	18a60 <__aeabi_f2d>
   1eeb0:	460b      	mov	r3, r1
   1eeb2:	4602      	mov	r2, r0
   1eeb4:	4847      	ldr	r0, [pc, #284]	@ (1efd4 <_Z13render_resultP19ei_impulse_result_t+0x17c>)
   1eeb6:	f00d f857 	bl	2bf68 <ns_lp_printf>
        metadata.results[result_index].confidence = bb.value * 100;
   1eeba:	ee28 8a28 	vmul.f32	s16, s16, s17
        strncpy(metadata.results[result_index].id, bb.label, 20);
   1eebe:	9901      	ldr	r1, [sp, #4]
   1eec0:	2214      	movs	r2, #20
   1eec2:	4620      	mov	r0, r4
   1eec4:	f008 f8a2 	bl	2700c <strncpy>
        metadata.results[result_index].x = bb.x;
   1eec8:	2300      	movs	r3, #0
        metadata.results[result_index].confidence = bb.value * 100;
   1eeca:	eefc 7ac8 	vcvt.u32.f32	s15, s16
        metadata.results[result_index].x = bb.x;
   1eece:	f369 0307 	bfi	r3, r9, #0, #8
    for (size_t ix = 0; ix < inf->bounding_boxes_count; ix++) {
   1eed2:	6871      	ldr	r1, [r6, #4]
        metadata.results[result_index].x = bb.x;
   1eed4:	f368 230f 	bfi	r3, r8, #8, #8
        metadata.results[result_index].confidence = bb.value * 100;
   1eed8:	ee17 2a90 	vmov	r2, s15
        metadata.results[result_index].x = bb.x;
   1eedc:	f367 4317 	bfi	r3, r7, #16, #8
        result_index++;
   1eee0:	f10b 0b01 	add.w	fp, fp, #1
        metadata.results[result_index].x = bb.x;
   1eee4:	f36a 631f 	bfi	r3, sl, #24, #8
    for (size_t ix = 0; ix < inf->bounding_boxes_count; ix++) {
   1eee8:	4559      	cmp	r1, fp
        metadata.results[result_index].x = bb.x;
   1eeea:	6163      	str	r3, [r4, #20]
        metadata.results[result_index].confidence = bb.value * 100;
   1eeec:	7622      	strb	r2, [r4, #24]
    for (size_t ix = 0; ix < inf->bounding_boxes_count; ix++) {
   1eeee:	f105 0518 	add.w	r5, r5, #24
   1eef2:	f104 0419 	add.w	r4, r4, #25
   1eef6:	d933      	bls.n	1ef60 <_Z13render_resultP19ei_impulse_result_t+0x108>
        auto bb = inf->bounding_boxes[ix];
   1eef8:	6832      	ldr	r2, [r6, #0]
   1eefa:	1953      	adds	r3, r2, r5
   1eefc:	ed93 8a05 	vldr	s16, [r3, #20]
   1ef00:	5952      	ldr	r2, [r2, r5]
   1ef02:	9201      	str	r2, [sp, #4]
        if (bb.value == 0.0f) {
   1ef04:	eeb5 8a40 	vcmp.f32	s16, #0.0
   1ef08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        auto bb = inf->bounding_boxes[ix];
   1ef0c:	e9d3 9801 	ldrd	r9, r8, [r3, #4]
   1ef10:	e9d3 a703 	ldrd	sl, r7, [r3, #12]
            ns_lp_printf("bb.value %f\n", bb.value);
   1ef14:	ee18 0a10 	vmov	r0, s16
        if (bb.value == 0.0f) {
   1ef18:	d1c8      	bne.n	1eeac <_Z13render_resultP19ei_impulse_result_t+0x54>
    metadata.num_results = result_index;
   1ef1a:	f88d b012 	strb.w	fp, [sp, #18]
    if (metadata.num_results > 0) {
   1ef1e:	f1bb 0f00 	cmp.w	fp, #0
   1ef22:	d11f      	bne.n	1ef64 <_Z13render_resultP19ei_impulse_result_t+0x10c>
   1ef24:	f10d 080c 	add.w	r8, sp, #12
    webusb_send_data((uint8_t *)&metadata, sizeof(usb_metadata_t));
   1ef28:	2184      	movs	r1, #132	@ 0x84
   1ef2a:	4640      	mov	r0, r8
   1ef2c:	f00c ffbc 	bl	2bea8 <webusb_send_data>
   1ef30:	2000      	movs	r0, #0
   1ef32:	f014 fddf 	bl	33af4 <tud_vendor_n_write_flush>
        ns_lp_printf(".");
   1ef36:	4c28      	ldr	r4, [pc, #160]	@ (1efd8 <_Z13render_resultP19ei_impulse_result_t+0x180>)
   1ef38:	e004      	b.n	1ef44 <_Z13render_resultP19ei_impulse_result_t+0xec>
        ns_delay_us(200);
   1ef3a:	f018 fb8f 	bl	3765c <am_hal_delay_us>
        ns_lp_printf(".");
   1ef3e:	4620      	mov	r0, r4
   1ef40:	f00d f812 	bl	2bf68 <ns_lp_printf>
  return tud_vendor_n_write_available(0);
   1ef44:	2000      	movs	r0, #0
   1ef46:	f014 fe37 	bl	33bb8 <tud_vendor_n_write_available>
   1ef4a:	4603      	mov	r3, r0
    while (tud_vendor_write_available() < MAX_WEBUSB_FRAME) {
   1ef4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
        ns_delay_us(200);
   1ef50:	f04f 00c8 	mov.w	r0, #200	@ 0xc8
    while (tud_vendor_write_available() < MAX_WEBUSB_FRAME) {
   1ef54:	d3f1      	bcc.n	1ef3a <_Z13render_resultP19ei_impulse_result_t+0xe2>
}
   1ef56:	b025      	add	sp, #148	@ 0x94
   1ef58:	ecbd 8b02 	vpop	{d8}
   1ef5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    metadata.num_results = result_index;
   1ef60:	f88d b012 	strb.w	fp, [sp, #18]
   1ef64:	2000      	movs	r0, #0
        ns_lp_printf("Inference latency: %d, num_results %d, avail %d\n", metadata.inference_latency, result_index, tud_vendor_write_available());
   1ef66:	f89d 400e 	ldrb.w	r4, [sp, #14]
            ns_lp_printf("0x%x ", ((uint8_t *)&metadata)[i]);
   1ef6a:	4f1c      	ldr	r7, [pc, #112]	@ (1efdc <_Z13render_resultP19ei_impulse_result_t+0x184>)
   1ef6c:	f014 fe24 	bl	33bb8 <tud_vendor_n_write_available>
        ns_lp_printf("Inference latency: %d, num_results %d, avail %d\n", metadata.inference_latency, result_index, tud_vendor_write_available());
   1ef70:	4621      	mov	r1, r4
   1ef72:	4603      	mov	r3, r0
   1ef74:	465a      	mov	r2, fp
   1ef76:	481a      	ldr	r0, [pc, #104]	@ (1efe0 <_Z13render_resultP19ei_impulse_result_t+0x188>)
   1ef78:	f00c fff6 	bl	2bf68 <ns_lp_printf>
        for (int i = 0; i < 10; i++) {
   1ef7c:	f10d 080c 	add.w	r8, sp, #12
   1ef80:	4644      	mov	r4, r8
   1ef82:	f10d 0616 	add.w	r6, sp, #22
        ns_lp_printf("Inference latency: %d, num_results %d, avail %d\n", metadata.inference_latency, result_index, tud_vendor_write_available());
   1ef86:	4645      	mov	r5, r8
            ns_lp_printf("0x%x ", ((uint8_t *)&metadata)[i]);
   1ef88:	f815 1b01 	ldrb.w	r1, [r5], #1
   1ef8c:	4638      	mov	r0, r7
   1ef8e:	f00c ffeb 	bl	2bf68 <ns_lp_printf>
        for (int i = 0; i < 10; i++) {
   1ef92:	42b5      	cmp	r5, r6
   1ef94:	d1f8      	bne.n	1ef88 <_Z13render_resultP19ei_impulse_result_t+0x130>
        ns_lp_printf("\n");
   1ef96:	4813      	ldr	r0, [pc, #76]	@ (1efe4 <_Z13render_resultP19ei_impulse_result_t+0x18c>)
            ns_lp_printf("%d ", ((uint8_t *)&metadata)[i]);
   1ef98:	4d13      	ldr	r5, [pc, #76]	@ (1efe8 <_Z13render_resultP19ei_impulse_result_t+0x190>)
        ns_lp_printf("\n");
   1ef9a:	f00c ffe5 	bl	2bf68 <ns_lp_printf>
            ns_lp_printf("%d ", ((uint8_t *)&metadata)[i]);
   1ef9e:	f814 1b01 	ldrb.w	r1, [r4], #1
   1efa2:	4628      	mov	r0, r5
   1efa4:	f00c ffe0 	bl	2bf68 <ns_lp_printf>
        for (int i = 0; i < 10; i++) {
   1efa8:	42b4      	cmp	r4, r6
   1efaa:	d1f8      	bne.n	1ef9e <_Z13render_resultP19ei_impulse_result_t+0x146>
        ns_lp_printf("\n");
   1efac:	480d      	ldr	r0, [pc, #52]	@ (1efe4 <_Z13render_resultP19ei_impulse_result_t+0x18c>)
   1efae:	f00c ffdb 	bl	2bf68 <ns_lp_printf>
   1efb2:	e7b9      	b.n	1ef28 <_Z13render_resultP19ei_impulse_result_t+0xd0>
        ns_lp_printf("No results\n");
   1efb4:	480d      	ldr	r0, [pc, #52]	@ (1efec <_Z13render_resultP19ei_impulse_result_t+0x194>)
   1efb6:	f00c bfd7 	b.w	2bf68 <ns_lp_printf>
    metadata.num_results = result_index;
   1efba:	f88d 1012 	strb.w	r1, [sp, #18]
    if (metadata.num_results > 0) {
   1efbe:	f10d 080c 	add.w	r8, sp, #12
   1efc2:	e7b1      	b.n	1ef28 <_Z13render_resultP19ei_impulse_result_t+0xd0>
   1efc4:	1000dca8 	.word	0x1000dca8
   1efc8:	1000dcac 	.word	0x1000dcac
   1efcc:	10624dd3 	.word	0x10624dd3
   1efd0:	42c80000 	.word	0x42c80000
   1efd4:	00043510 	.word	0x00043510
   1efd8:	0004493c 	.word	0x0004493c
   1efdc:	00043554 	.word	0x00043554
   1efe0:	00043520 	.word	0x00043520
   1efe4:	000434b4 	.word	0x000434b4
   1efe8:	0004355c 	.word	0x0004355c
   1efec:	00043504 	.word	0x00043504

0001eff0 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
   1eff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eff4:	e9d0 7500 	ldrd	r7, r5, [r0]
   1eff8:	4689      	mov	r9, r1
   1effa:	4693      	mov	fp, r2
      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   1effc:	f06f 4160 	mvn.w	r1, #3758096384	@ 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1f000:	1bea      	subs	r2, r5, r7
	if (max_size() - size() < __n)
   1f002:	ebb1 0fa2 	cmp.w	r1, r2, asr #2
   1f006:	b083      	sub	sp, #12
   1f008:	d05d      	beq.n	1f0c6 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xd6>
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
   1f00a:	42af      	cmp	r7, r5
   1f00c:	4604      	mov	r4, r0
   1f00e:	ea4f 03a2 	mov.w	r3, r2, asr #2
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   1f012:	eba9 0a07 	sub.w	sl, r9, r7
   1f016:	d03f      	beq.n	1f098 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa8>
	  __throw_length_error(__N(__s));

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1f018:	ebb3 0f43 	cmp.w	r3, r3, lsl #1
	const size_type __len = size() + (std::max)(size(), __n);
   1f01c:	ea4f 0643 	mov.w	r6, r3, lsl #1
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1f020:	d819      	bhi.n	1f056 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x66>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1f022:	46b0      	mov	r8, r6
   1f024:	2e00      	cmp	r6, #0
   1f026:	d149      	bne.n	1f0bc <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
      template<typename _Up, typename... _Args>
	__attribute__((__always_inline__))
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   1f028:	f8db 3000 	ldr.w	r3, [fp]
   1f02c:	f848 300a 	str.w	r3, [r8, sl]
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
   1f030:	f10a 0b04 	add.w	fp, sl, #4
    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result,
		   [[__maybe_unused__]] allocator<_Up>& __alloc) noexcept
    {
      ptrdiff_t __count = __last - __first;
   1f034:	eba5 0309 	sub.w	r3, r5, r9
   1f038:	44c3      	add	fp, r8
      if (__count > 0)
   1f03a:	f1ba 0f00 	cmp.w	sl, #0
	      return __out.base();
	    }
#endif
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
	}
      return __result + __count;
   1f03e:	eb0b 0503 	add.w	r5, fp, r3
      if (__count > 0)
   1f042:	dc15      	bgt.n	1f070 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x80>
   1f044:	2b00      	cmp	r3, #0
   1f046:	dc0d      	bgt.n	1f064 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x74>
	if (__p)
   1f048:	b9df      	cbnz	r7, 1f082 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x92>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
   1f04a:	e9c4 8500 	strd	r8, r5, [r4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   1f04e:	60a6      	str	r6, [r4, #8]
    }
   1f050:	b003      	add	sp, #12
   1f052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f056:	4e1d      	ldr	r6, [pc, #116]	@ (1f0cc <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xdc>)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1f058:	4630      	mov	r0, r6
   1f05a:	f016 f9e3 	bl	35424 <_Znwj>
   1f05e:	4680      	mov	r8, r0
      this->_M_impl._M_end_of_storage = __new_start + __len;
   1f060:	4406      	add	r6, r0
   1f062:	e7e1      	b.n	1f028 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x38>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   1f064:	461a      	mov	r2, r3
   1f066:	4649      	mov	r1, r9
   1f068:	4658      	mov	r0, fp
   1f06a:	f7f9 fa89 	bl	18580 <memcpy>
   1f06e:	e7eb      	b.n	1f048 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x58>
   1f070:	4652      	mov	r2, sl
   1f072:	4639      	mov	r1, r7
   1f074:	4640      	mov	r0, r8
   1f076:	9301      	str	r3, [sp, #4]
   1f078:	f007 feb0 	bl	26ddc <memmove>
      if (__count > 0)
   1f07c:	9b01      	ldr	r3, [sp, #4]
   1f07e:	2b00      	cmp	r3, #0
   1f080:	dc11      	bgt.n	1f0a6 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xb6>
		    this->_M_impl._M_end_of_storage - __old_start);
   1f082:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1f084:	4638      	mov	r0, r7
   1f086:	1bc9      	subs	r1, r1, r7
   1f088:	f016 f9d2 	bl	35430 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
   1f08c:	e9c4 8500 	strd	r8, r5, [r4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   1f090:	60a6      	str	r6, [r4, #8]
    }
   1f092:	b003      	add	sp, #12
   1f094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f098:	3301      	adds	r3, #1
   1f09a:	d2dc      	bcs.n	1f056 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x66>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1f09c:	428b      	cmp	r3, r1
   1f09e:	bf28      	it	cs
   1f0a0:	460b      	movcs	r3, r1
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1f0a2:	009e      	lsls	r6, r3, #2
   1f0a4:	e7d8      	b.n	1f058 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x68>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   1f0a6:	4649      	mov	r1, r9
   1f0a8:	461a      	mov	r2, r3
   1f0aa:	4658      	mov	r0, fp
   1f0ac:	f7f9 fa68 	bl	18580 <memcpy>
		    this->_M_impl._M_end_of_storage - __old_start);
   1f0b0:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1f0b2:	4638      	mov	r0, r7
   1f0b4:	1bc9      	subs	r1, r1, r7
   1f0b6:	f016 f9bb 	bl	35430 <_ZdlPvj>
   1f0ba:	e7e7      	b.n	1f08c <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9c>
   1f0bc:	42b1      	cmp	r1, r6
   1f0be:	bf28      	it	cs
   1f0c0:	4631      	movcs	r1, r6
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1f0c2:	008e      	lsls	r6, r1, #2
   1f0c4:	e7c8      	b.n	1f058 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x68>
	  __throw_length_error(__N(__s));
   1f0c6:	4802      	ldr	r0, [pc, #8]	@ (1f0d0 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xe0>)
   1f0c8:	f018 ffc8 	bl	3805c <_ZSt20__throw_length_errorPKc>
   1f0cc:	7ffffffc 	.word	0x7ffffffc
   1f0d0:	000432fc 	.word	0x000432fc

0001f0d4 <_ZL14ei_handle_cubePSt6vectorIP4cubeSaIS1_EEiifPKcf.part.0>:
__attribute__((unused)) static void ei_handle_cube(std::vector<ei_classifier_cube_t*> *cubes, int x, int y, float vf, const char *label, float detection_threshold) {
   1f0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      : _M_current(__i) { }
   1f0d8:	6804      	ldr	r4, [r0, #0]
   1f0da:	f8d0 9004 	ldr.w	r9, [r0, #4]
   1f0de:	ed2d 8b02 	vpush	{d8}
    for (auto c : *cubes) {
   1f0e2:	454c      	cmp	r4, r9
__attribute__((unused)) static void ei_handle_cube(std::vector<ei_classifier_cube_t*> *cubes, int x, int y, float vf, const char *label, float detection_threshold) {
   1f0e4:	b085      	sub	sp, #20
   1f0e6:	4683      	mov	fp, r0
   1f0e8:	eeb0 8a40 	vmov.f32	s16, s0
   1f0ec:	4688      	mov	r8, r1
   1f0ee:	4616      	mov	r6, r2
   1f0f0:	461f      	mov	r7, r3
    for (auto c : *cubes) {
   1f0f2:	d018      	beq.n	1f126 <_ZL14ei_handle_cubePSt6vectorIP4cubeSaIS1_EEiifPKcf.part.0+0x52>
        if (ei_cube_check_overlap(c, x, y, width, height, vf)) {
   1f0f4:	f04f 0a01 	mov.w	sl, #1
    for (auto c : *cubes) {
   1f0f8:	f854 5b04 	ldr.w	r5, [r4], #4
        if (strcmp(c->label, label) != 0) continue;
   1f0fc:	4639      	mov	r1, r7
   1f0fe:	6968      	ldr	r0, [r5, #20]
   1f100:	f7f9 f87e 	bl	18200 <strcmp>
   1f104:	4684      	mov	ip, r0
        if (ei_cube_check_overlap(c, x, y, width, height, vf)) {
   1f106:	2301      	movs	r3, #1
   1f108:	eeb0 0a48 	vmov.f32	s0, s16
   1f10c:	4632      	mov	r2, r6
   1f10e:	4641      	mov	r1, r8
   1f110:	4628      	mov	r0, r5
        if (strcmp(c->label, label) != 0) continue;
   1f112:	f1bc 0f00 	cmp.w	ip, #0
   1f116:	d104      	bne.n	1f122 <_ZL14ei_handle_cubePSt6vectorIP4cubeSaIS1_EEiifPKcf.part.0+0x4e>
        if (ei_cube_check_overlap(c, x, y, width, height, vf)) {
   1f118:	f8cd a000 	str.w	sl, [sp]
   1f11c:	f7ff f99c 	bl	1e458 <_ZL21ei_cube_check_overlapP4cubeiiiif>
   1f120:	b9c0      	cbnz	r0, 1f154 <_ZL14ei_handle_cubePSt6vectorIP4cubeSaIS1_EEiifPKcf.part.0+0x80>
    for (auto c : *cubes) {
   1f122:	45a1      	cmp	r9, r4
   1f124:	d1e8      	bne.n	1f0f8 <_ZL14ei_handle_cubePSt6vectorIP4cubeSaIS1_EEiifPKcf.part.0+0x24>
        ei_classifier_cube_t *cube = new ei_classifier_cube_t();
   1f126:	2018      	movs	r0, #24
   1f128:	f016 f97c 	bl	35424 <_Znwj>
        cube->width = 1;
   1f12c:	2301      	movs	r3, #1
   1f12e:	e9c0 6301 	strd	r6, r3, [r0, #4]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   1f132:	f8db 1004 	ldr.w	r1, [fp, #4]
   1f136:	60c3      	str	r3, [r0, #12]
   1f138:	f8db 3008 	ldr.w	r3, [fp, #8]
        ei_classifier_cube_t *cube = new ei_classifier_cube_t();
   1f13c:	9003      	str	r0, [sp, #12]
   1f13e:	4299      	cmp	r1, r3
        cube->x = x;
   1f140:	f8c0 8000 	str.w	r8, [r0]
        cube->label = label;
   1f144:	6147      	str	r7, [r0, #20]
        cube->confidence = vf;
   1f146:	ed80 8a04 	vstr	s16, [r0, #16]
   1f14a:	d008      	beq.n	1f15e <_ZL14ei_handle_cubePSt6vectorIP4cubeSaIS1_EEiifPKcf.part.0+0x8a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   1f14c:	f841 0b04 	str.w	r0, [r1], #4
	    ++this->_M_impl._M_finish;
   1f150:	f8cb 1004 	str.w	r1, [fp, #4]
}
   1f154:	b005      	add	sp, #20
   1f156:	ecbd 8b02 	vpop	{d8}
   1f15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  _M_realloc_insert(end(), __x);
   1f15e:	aa03      	add	r2, sp, #12
   1f160:	4658      	mov	r0, fp
   1f162:	f7ff ff45 	bl	1eff0 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
   1f166:	e7f5      	b.n	1f154 <_ZL14ei_handle_cubePSt6vectorIP4cubeSaIS1_EEiifPKcf.part.0+0x80>

0001f168 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
   1f168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f16c:	e9d0 6500 	ldrd	r6, r5, [r0]
   1f170:	4692      	mov	sl, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1f172:	1bab      	subs	r3, r5, r6
   1f174:	4a38      	ldr	r2, [pc, #224]	@ (1f258 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf0>)
   1f176:	10db      	asrs	r3, r3, #3
   1f178:	fb02 f303 	mul.w	r3, r2, r3
	if (max_size() - size() < __n)
   1f17c:	4a37      	ldr	r2, [pc, #220]	@ (1f25c <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf4>)
   1f17e:	4293      	cmp	r3, r2
   1f180:	b083      	sub	sp, #12
   1f182:	d066      	beq.n	1f252 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xea>
   1f184:	42ae      	cmp	r6, r5
   1f186:	4604      	mov	r4, r0
   1f188:	4688      	mov	r8, r1
    { return __lhs.base() - __rhs.base(); }
   1f18a:	eba1 0906 	sub.w	r9, r1, r6
   1f18e:	d043      	beq.n	1f218 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb0>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1f190:	ebb3 0f43 	cmp.w	r3, r3, lsl #1
	const size_type __len = size() + (std::max)(size(), __n);
   1f194:	ea4f 0143 	mov.w	r1, r3, lsl #1
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1f198:	d823      	bhi.n	1f1e2 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x7a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1f19a:	2900      	cmp	r1, #0
   1f19c:	d151      	bne.n	1f242 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xda>
   1f19e:	468b      	mov	fp, r1
   1f1a0:	460f      	mov	r7, r1
   1f1a2:	46d4      	mov	ip, sl
	      ++__new_finish;
   1f1a4:	f109 0a18 	add.w	sl, r9, #24
      ptrdiff_t __count = __last - __first;
   1f1a8:	eba5 0508 	sub.w	r5, r5, r8
   1f1ac:	44ba      	add	sl, r7
      return __result + __count;
   1f1ae:	eb0a 0305 	add.w	r3, sl, r5
   1f1b2:	9301      	str	r3, [sp, #4]
   1f1b4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1f1b8:	eb07 0e09 	add.w	lr, r7, r9
   1f1bc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1f1c0:	e89c 0003 	ldmia.w	ip, {r0, r1}
      if (__count > 0)
   1f1c4:	f1b9 0f00 	cmp.w	r9, #0
   1f1c8:	e88e 0003 	stmia.w	lr, {r0, r1}
   1f1cc:	dc17      	bgt.n	1f1fe <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x96>
   1f1ce:	2d00      	cmp	r5, #0
   1f1d0:	dc0f      	bgt.n	1f1f2 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8a>
	if (__p)
   1f1d2:	b9de      	cbnz	r6, 1f20c <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa4>
      this->_M_impl._M_finish = __new_finish;
   1f1d4:	9b01      	ldr	r3, [sp, #4]
      this->_M_impl._M_start = __new_start;
   1f1d6:	6027      	str	r7, [r4, #0]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   1f1d8:	e9c4 3b01 	strd	r3, fp, [r4, #4]
    }
   1f1dc:	b003      	add	sp, #12
   1f1de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f1e2:	f8df b080 	ldr.w	fp, [pc, #128]	@ 1f264 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xfc>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1f1e6:	4658      	mov	r0, fp
   1f1e8:	f016 f91c 	bl	35424 <_Znwj>
   1f1ec:	4607      	mov	r7, r0
      this->_M_impl._M_end_of_storage = __new_start + __len;
   1f1ee:	4483      	add	fp, r0
   1f1f0:	e7d7      	b.n	1f1a2 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   1f1f2:	462a      	mov	r2, r5
   1f1f4:	4641      	mov	r1, r8
   1f1f6:	4650      	mov	r0, sl
   1f1f8:	f7f9 f9c2 	bl	18580 <memcpy>
   1f1fc:	e7e9      	b.n	1f1d2 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6a>
   1f1fe:	464a      	mov	r2, r9
   1f200:	4631      	mov	r1, r6
   1f202:	4638      	mov	r0, r7
   1f204:	f007 fdea 	bl	26ddc <memmove>
      if (__count > 0)
   1f208:	2d00      	cmp	r5, #0
   1f20a:	dc0f      	bgt.n	1f22c <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xc4>
		    this->_M_impl._M_end_of_storage - __old_start);
   1f20c:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1f20e:	4630      	mov	r0, r6
   1f210:	1b89      	subs	r1, r1, r6
   1f212:	f016 f90d 	bl	35430 <_ZdlPvj>
   1f216:	e7dd      	b.n	1f1d4 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6c>
   1f218:	3301      	adds	r3, #1
   1f21a:	d2e2      	bcs.n	1f1e2 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x7a>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1f21c:	4293      	cmp	r3, r2
   1f21e:	bf28      	it	cs
   1f220:	4613      	movcs	r3, r2
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1f222:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1f226:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   1f22a:	e7dc      	b.n	1f1e6 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x7e>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   1f22c:	4641      	mov	r1, r8
   1f22e:	462a      	mov	r2, r5
   1f230:	4650      	mov	r0, sl
   1f232:	f7f9 f9a5 	bl	18580 <memcpy>
   1f236:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1f238:	4630      	mov	r0, r6
   1f23a:	1b89      	subs	r1, r1, r6
   1f23c:	f016 f8f8 	bl	35430 <_ZdlPvj>
   1f240:	e7c8      	b.n	1f1d4 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6c>
   1f242:	4291      	cmp	r1, r2
   1f244:	bf28      	it	cs
   1f246:	4611      	movcs	r1, r2
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1f248:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1f24c:	ea4f 0bc1 	mov.w	fp, r1, lsl #3
   1f250:	e7c9      	b.n	1f1e6 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x7e>
	  __throw_length_error(__N(__s));
   1f252:	4803      	ldr	r0, [pc, #12]	@ (1f260 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf8>)
   1f254:	f018 ff02 	bl	3805c <_ZSt20__throw_length_errorPKc>
   1f258:	aaaaaaab 	.word	0xaaaaaaab
   1f25c:	05555555 	.word	0x05555555
   1f260:	000432fc 	.word	0x000432fc
   1f264:	7ffffff8 	.word	0x7ffffff8

0001f268 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj>:
    _GLIBCXX20_CONSTEXPR
    void
    vector<_Tp, _Alloc>::
    _M_default_append(size_type __n)
    {
      if (__n != 0)
   1f268:	2900      	cmp	r1, #0
   1f26a:	d06b      	beq.n	1f344 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0xdc>
    vector<_Tp, _Alloc>::
   1f26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	{
	  const size_type __size = size();
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
					 - this->_M_impl._M_finish);
   1f270:	e9d0 8301 	ldrd	r8, r3, [r0, #4]
   1f274:	4a59      	ldr	r2, [pc, #356]	@ (1f3dc <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x174>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1f276:	6807      	ldr	r7, [r0, #0]
   1f278:	eba3 0308 	sub.w	r3, r3, r8
   1f27c:	10db      	asrs	r3, r3, #3
   1f27e:	fb02 f303 	mul.w	r3, r2, r3

	  if (__size > max_size() || __navail > max_size() - __size)
	    __builtin_unreachable();

	  if (__navail >= __n)
   1f282:	4299      	cmp	r1, r3
    vector<_Tp, _Alloc>::
   1f284:	b083      	sub	sp, #12
   1f286:	4605      	mov	r5, r0
   1f288:	460c      	mov	r4, r1
	  if (__navail >= __n)
   1f28a:	d94c      	bls.n	1f326 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0xbe>
   1f28c:	eba8 0807 	sub.w	r8, r8, r7
	  if (__size > max_size() || __navail > max_size() - __size)
   1f290:	4b53      	ldr	r3, [pc, #332]	@ (1f3e0 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x178>)
   1f292:	ea4f 06e8 	mov.w	r6, r8, asr #3
   1f296:	fb02 f606 	mul.w	r6, r2, r6
   1f29a:	1b9a      	subs	r2, r3, r6
	if (max_size() - size() < __n)
   1f29c:	428a      	cmp	r2, r1
   1f29e:	f0c0 809a 	bcc.w	1f3d6 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x16e>
   1f2a2:	42b1      	cmp	r1, r6
	      __first = std::fill_n(__first, __n - 1, *__val);
   1f2a4:	f101 3bff 	add.w	fp, r1, #4294967295	@ 0xffffffff
	const size_type __len = size() + (std::max)(size(), __n);
   1f2a8:	eb01 0906 	add.w	r9, r1, r6
   1f2ac:	d877      	bhi.n	1f39e <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x136>
   1f2ae:	0076      	lsls	r6, r6, #1
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1f2b0:	429e      	cmp	r6, r3
   1f2b2:	bf28      	it	cs
   1f2b4:	461e      	movcs	r6, r3
   1f2b6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   1f2ba:	00f3      	lsls	r3, r6, #3
   1f2bc:	4618      	mov	r0, r3
   1f2be:	9301      	str	r3, [sp, #4]
   1f2c0:	f016 f8b0 	bl	35424 <_Znwj>
	      pointer __new_start(this->_M_allocate(__len));
	      if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
		{
		  __try
		    {
		      std::__uninitialized_default_n_a(__new_start + __size,
   1f2c4:	eb00 0608 	add.w	r6, r0, r8
	  // Allow std::_Construct to be used in constant expressions.
	  std::construct_at(__p, std::forward<_Args>(__args)...);
	  return;
	}
#endif
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   1f2c8:	2200      	movs	r2, #0
	       std::random_access_iterator_tag)
    {
#if __cplusplus >= 201103L
      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
#endif
      if (__n <= 0)
   1f2ca:	2c01      	cmp	r4, #1
   1f2cc:	f840 2008 	str.w	r2, [r0, r8]
   1f2d0:	4682      	mov	sl, r0
   1f2d2:	e9c6 2201 	strd	r2, r2, [r6, #4]
   1f2d6:	e9c6 2203 	strd	r2, r2, [r6, #12]
   1f2da:	6172      	str	r2, [r6, #20]
   1f2dc:	d054      	beq.n	1f388 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x120>
	      ++__first;
   1f2de:	f106 0e18 	add.w	lr, r6, #24
	return __first;

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
   1f2e2:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
   1f2e6:	eb0e 0bcb 	add.w	fp, lr, fp, lsl #3
	*__first = __value;
   1f2ea:	46b4      	mov	ip, r6
   1f2ec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1f2f0:	4674      	mov	r4, lr
   1f2f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1f2f4:	e89c 0003 	ldmia.w	ip, {r0, r1}
      for (; __first != __last; ++__first)
   1f2f8:	f10e 0e18 	add.w	lr, lr, #24
   1f2fc:	45f3      	cmp	fp, lr
	*__first = __value;
   1f2fe:	e884 0003 	stmia.w	r4, {r0, r1}
      for (; __first != __last; ++__first)
   1f302:	d1f2      	bne.n	1f2ea <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x82>
      if (__count > 0)
   1f304:	f1b8 0f00 	cmp.w	r8, #0
   1f308:	d13e      	bne.n	1f388 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x120>
	if (__p)
   1f30a:	2f00      	cmp	r7, #0
   1f30c:	d160      	bne.n	1f3d0 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x168>
	      _GLIBCXX_ASAN_ANNOTATE_REINIT;
	      _M_deallocate(__old_start,
			    this->_M_impl._M_end_of_storage - __old_start);
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_start + __size + __n;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
   1f30e:	9e01      	ldr	r6, [sp, #4]
	      this->_M_impl._M_finish = __new_start + __size + __n;
   1f310:	eb09 0949 	add.w	r9, r9, r9, lsl #1
   1f314:	eb0a 03c9 	add.w	r3, sl, r9, lsl #3
	      this->_M_impl._M_end_of_storage = __new_start + __len;
   1f318:	4456      	add	r6, sl
	      this->_M_impl._M_finish = __new_start + __size + __n;
   1f31a:	e9c5 a300 	strd	sl, r3, [r5]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
   1f31e:	60ae      	str	r6, [r5, #8]
	    }
	}
    }
   1f320:	b003      	add	sp, #12
   1f322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f326:	2300      	movs	r3, #0
      if (__n <= 0)
   1f328:	1e4c      	subs	r4, r1, #1
   1f32a:	e9c8 3300 	strd	r3, r3, [r8]
   1f32e:	e9c8 3302 	strd	r3, r3, [r8, #8]
   1f332:	e9c8 3304 	strd	r3, r3, [r8, #16]
	      ++__first;
   1f336:	f108 0718 	add.w	r7, r8, #24
   1f33a:	d104      	bne.n	1f346 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0xde>
	      this->_M_impl._M_finish =
   1f33c:	606f      	str	r7, [r5, #4]
    }
   1f33e:	b003      	add	sp, #12
   1f340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f344:	4770      	bx	lr
      std::__fill_a(__first, __first + __n, __value);
   1f346:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1f34a:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
   1f34e:	463e      	mov	r6, r7
	*__first = __value;
   1f350:	46c6      	mov	lr, r8
   1f352:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1f356:	46b4      	mov	ip, r6
   1f358:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1f35c:	e89e 0003 	ldmia.w	lr, {r0, r1}
      for (; __first != __last; ++__first)
   1f360:	3618      	adds	r6, #24
   1f362:	42b4      	cmp	r4, r6
	*__first = __value;
   1f364:	e88c 0003 	stmia.w	ip, {r0, r1}
      for (; __first != __last; ++__first)
   1f368:	d1f2      	bne.n	1f350 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0xe8>
   1f36a:	eba4 0308 	sub.w	r3, r4, r8
   1f36e:	4a1d      	ldr	r2, [pc, #116]	@ (1f3e4 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x17c>)
   1f370:	3b30      	subs	r3, #48	@ 0x30
   1f372:	08db      	lsrs	r3, r3, #3
   1f374:	fb02 f303 	mul.w	r3, r2, r3
   1f378:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
   1f37c:	3301      	adds	r3, #1
   1f37e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1f382:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
   1f386:	e7d9      	b.n	1f33c <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0xd4>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   1f388:	4639      	mov	r1, r7
   1f38a:	4642      	mov	r2, r8
   1f38c:	4650      	mov	r0, sl
   1f38e:	f007 fd25 	bl	26ddc <memmove>
			    this->_M_impl._M_end_of_storage - __old_start);
   1f392:	68a9      	ldr	r1, [r5, #8]
   1f394:	1bc9      	subs	r1, r1, r7
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1f396:	4638      	mov	r0, r7
   1f398:	f016 f84a 	bl	35430 <_ZdlPvj>
   1f39c:	e7b7      	b.n	1f30e <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0xa6>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1f39e:	454b      	cmp	r3, r9
   1f3a0:	bf28      	it	cs
   1f3a2:	464b      	movcs	r3, r9
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1f3a4:	eb03 0643 	add.w	r6, r3, r3, lsl #1
   1f3a8:	00f3      	lsls	r3, r6, #3
   1f3aa:	4618      	mov	r0, r3
   1f3ac:	9301      	str	r3, [sp, #4]
   1f3ae:	f016 f839 	bl	35424 <_Znwj>
		      std::__uninitialized_default_n_a(__new_start + __size,
   1f3b2:	eb00 0608 	add.w	r6, r0, r8
   1f3b6:	2200      	movs	r2, #0
   1f3b8:	f840 2008 	str.w	r2, [r0, r8]
   1f3bc:	4682      	mov	sl, r0
   1f3be:	e9c6 2201 	strd	r2, r2, [r6, #4]
   1f3c2:	e9c6 2203 	strd	r2, r2, [r6, #12]
   1f3c6:	6172      	str	r2, [r6, #20]
      if (__n <= 0)
   1f3c8:	f1bb 0f00 	cmp.w	fp, #0
   1f3cc:	d09a      	beq.n	1f304 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x9c>
   1f3ce:	e786      	b.n	1f2de <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x76>
			    this->_M_impl._M_end_of_storage - __old_start);
   1f3d0:	68a9      	ldr	r1, [r5, #8]
   1f3d2:	1bc9      	subs	r1, r1, r7
   1f3d4:	e7df      	b.n	1f396 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x12e>
	  __throw_length_error(__N(__s));
   1f3d6:	4804      	ldr	r0, [pc, #16]	@ (1f3e8 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x180>)
   1f3d8:	f018 fe40 	bl	3805c <_ZSt20__throw_length_errorPKc>
   1f3dc:	aaaaaaab 	.word	0xaaaaaaab
   1f3e0:	05555555 	.word	0x05555555
   1f3e4:	0aaaaaab 	.word	0x0aaaaaab
   1f3e8:	00043560 	.word	0x00043560
   1f3ec:	00000000 	.word	0x00000000

0001f3f0 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim>:
__attribute__((unused)) static void fill_result_struct_from_cubes(ei_impulse_result_t *result, std::vector<ei_classifier_cube_t*> *cubes, int out_width_factor, uint32_t object_detection_count) {
   1f3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f3f4:	ed2d 8b02 	vpush	{d8}
	: _M_start(), _M_finish(), _M_end_of_storage()
   1f3f8:	ed9f 8b83 	vldr	d8, [pc, #524]	@ 1f608 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x218>
   1f3fc:	b09b      	sub	sp, #108	@ 0x6c
   1f3fe:	ed8d 8b10 	vstr	d8, [sp, #64]	@ 0x40
    static std::vector<ei_impulse_result_bounding_box_t> results;
   1f402:	f8df 9218 	ldr.w	r9, [pc, #536]	@ 1f61c <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x22c>
__attribute__((unused)) static void fill_result_struct_from_cubes(ei_impulse_result_t *result, std::vector<ei_classifier_cube_t*> *cubes, int out_width_factor, uint32_t object_detection_count) {
   1f406:	920a      	str	r2, [sp, #40]	@ 0x28
   1f408:	4698      	mov	r8, r3
   1f40a:	2300      	movs	r3, #0
   1f40c:	9312      	str	r3, [sp, #72]	@ 0x48
    static std::vector<ei_impulse_result_bounding_box_t> results;
   1f40e:	f8d9 7000 	ldr.w	r7, [r9]
   1f412:	f3bf 8f5b 	dmb	ish
   1f416:	f017 0701 	ands.w	r7, r7, #1
__attribute__((unused)) static void fill_result_struct_from_cubes(ei_impulse_result_t *result, std::vector<ei_classifier_cube_t*> *cubes, int out_width_factor, uint32_t object_detection_count) {
   1f41a:	4604      	mov	r4, r0
   1f41c:	460e      	mov	r6, r1
    static std::vector<ei_impulse_result_bounding_box_t> results;
   1f41e:	f000 80cd 	beq.w	1f5bc <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x1cc>
   1f422:	4d7b      	ldr	r5, [pc, #492]	@ (1f610 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x220>)
	_M_deallocate(_M_impl._M_start,
   1f424:	9910      	ldr	r1, [sp, #64]	@ 0x40
   1f426:	9105      	str	r1, [sp, #20]
      // _M_assign_aux.
      _GLIBCXX20_CONSTEXPR
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
   1f428:	e9d5 3200 	ldrd	r3, r2, [r5]
   1f42c:	4293      	cmp	r3, r2
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
   1f42e:	bf18      	it	ne
   1f430:	606b      	strne	r3, [r5, #4]
      : _M_current(__i) { }
   1f432:	e9d6 3200 	ldrd	r3, r2, [r6]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   1f436:	9912      	ldr	r1, [sp, #72]	@ 0x48
   1f438:	9207      	str	r2, [sp, #28]
    int added_boxes_count = 0;
    results.clear();
    for (auto sc : *cubes) {
   1f43a:	4293      	cmp	r3, r2
   1f43c:	9108      	str	r1, [sp, #32]
   1f43e:	f000 80df 	beq.w	1f600 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x210>
    int added_boxes_count = 0;
   1f442:	e9cd 460b 	strd	r4, r6, [sp, #44]	@ 0x2c
   1f446:	9303      	str	r3, [sp, #12]
   1f448:	2300      	movs	r3, #0
   1f44a:	9306      	str	r3, [sp, #24]
   1f44c:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
   1f450:	9509      	str	r5, [sp, #36]	@ 0x24
    for (auto sc : *cubes) {
   1f452:	9b03      	ldr	r3, [sp, #12]
   1f454:	9e11      	ldr	r6, [sp, #68]	@ 0x44
   1f456:	f853 5b04 	ldr.w	r5, [r3], #4
   1f45a:	9303      	str	r3, [sp, #12]
        int width = sc->width;
        int height = sc->height;
        const char *label = sc->label;
        float vf = sc->confidence;

        for (auto c : bbs) {
   1f45c:	9b05      	ldr	r3, [sp, #20]
        float vf = sc->confidence;
   1f45e:	ed95 8a04 	vldr	s16, [r5, #16]
        const char *label = sc->label;
   1f462:	696f      	ldr	r7, [r5, #20]
    for (auto sc : *cubes) {
   1f464:	950f      	str	r5, [sp, #60]	@ 0x3c
        for (auto c : bbs) {
   1f466:	429e      	cmp	r6, r3
        int y = sc->y;
   1f468:	e9d5 9a00 	ldrd	r9, sl, [r5]
        int height = sc->height;
   1f46c:	e9d5 b802 	ldrd	fp, r8, [r5, #8]
        for (auto c : bbs) {
   1f470:	d017      	beq.n	1f4a2 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0xb2>
   1f472:	461c      	mov	r4, r3
   1f474:	9504      	str	r5, [sp, #16]
   1f476:	f854 5b04 	ldr.w	r5, [r4], #4
            // not cube for same class? continue
            if (strcmp(c->label, label) != 0) continue;
   1f47a:	4639      	mov	r1, r7
   1f47c:	6968      	ldr	r0, [r5, #20]
   1f47e:	f7f8 febf 	bl	18200 <strcmp>
   1f482:	b958      	cbnz	r0, 1f49c <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0xac>

            if (ei_cube_check_overlap(c, x, y, width, height, vf)) {
   1f484:	eeb0 0a48 	vmov.f32	s0, s16
   1f488:	f8cd 8000 	str.w	r8, [sp]
   1f48c:	465b      	mov	r3, fp
   1f48e:	4652      	mov	r2, sl
   1f490:	4649      	mov	r1, r9
   1f492:	4628      	mov	r0, r5
   1f494:	f7fe ffe0 	bl	1e458 <_ZL21ei_cube_check_overlapP4cubeiiiif>
   1f498:	2800      	cmp	r0, #0
   1f49a:	d12f      	bne.n	1f4fc <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x10c>
        for (auto c : bbs) {
   1f49c:	42a6      	cmp	r6, r4
   1f49e:	d1ea      	bne.n	1f476 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x86>
   1f4a0:	9d04      	ldr	r5, [sp, #16]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   1f4a2:	9b08      	ldr	r3, [sp, #32]
   1f4a4:	429e      	cmp	r6, r3
   1f4a6:	d05f      	beq.n	1f568 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x178>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   1f4a8:	4633      	mov	r3, r6
   1f4aa:	f843 5b04 	str.w	r5, [r3], #4
	    ++this->_M_impl._M_finish;
   1f4ae:	9311      	str	r3, [sp, #68]	@ 0x44

        bbs.push_back(sc);

        ei_impulse_result_bounding_box_t tmp = {
            .label = sc->label,
            .x = (uint32_t)(sc->x * out_width_factor),
   1f4b0:	990a      	ldr	r1, [sp, #40]	@ 0x28
   1f4b2:	682b      	ldr	r3, [r5, #0]
            .y = (uint32_t)(sc->y * out_width_factor),
            .width = (uint32_t)(sc->width * out_width_factor),
            .height = (uint32_t)(sc->height * out_width_factor),
            .value = sc->confidence
        };
   1f4b4:	9714      	str	r7, [sp, #80]	@ 0x50
            .x = (uint32_t)(sc->x * out_width_factor),
   1f4b6:	fb01 f303 	mul.w	r3, r1, r3
        };
   1f4ba:	9315      	str	r3, [sp, #84]	@ 0x54
            .y = (uint32_t)(sc->y * out_width_factor),
   1f4bc:	686b      	ldr	r3, [r5, #4]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   1f4be:	9f09      	ldr	r7, [sp, #36]	@ 0x24
        };
   1f4c0:	692a      	ldr	r2, [r5, #16]
   1f4c2:	687c      	ldr	r4, [r7, #4]
   1f4c4:	9219      	str	r2, [sp, #100]	@ 0x64
            .y = (uint32_t)(sc->y * out_width_factor),
   1f4c6:	fb01 f303 	mul.w	r3, r1, r3
        };
   1f4ca:	9316      	str	r3, [sp, #88]	@ 0x58
            .width = (uint32_t)(sc->width * out_width_factor),
   1f4cc:	68ab      	ldr	r3, [r5, #8]
   1f4ce:	fb01 f303 	mul.w	r3, r1, r3
        };
   1f4d2:	9317      	str	r3, [sp, #92]	@ 0x5c
            .height = (uint32_t)(sc->height * out_width_factor),
   1f4d4:	68eb      	ldr	r3, [r5, #12]
   1f4d6:	fb01 f303 	mul.w	r3, r1, r3
        };
   1f4da:	9318      	str	r3, [sp, #96]	@ 0x60
   1f4dc:	68bb      	ldr	r3, [r7, #8]
   1f4de:	429c      	cmp	r4, r3
   1f4e0:	d03c      	beq.n	1f55c <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x16c>
   1f4e2:	ad14      	add	r5, sp, #80	@ 0x50
   1f4e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
   1f4e6:	f104 0618 	add.w	r6, r4, #24
   1f4ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1f4ec:	e895 0003 	ldmia.w	r5, {r0, r1}
   1f4f0:	e884 0003 	stmia.w	r4, {r0, r1}
   1f4f4:	607e      	str	r6, [r7, #4]

        results.push_back(tmp);
        added_boxes_count++;
   1f4f6:	9b06      	ldr	r3, [sp, #24]
   1f4f8:	3301      	adds	r3, #1
   1f4fa:	9306      	str	r3, [sp, #24]
    for (auto sc : *cubes) {
   1f4fc:	9b07      	ldr	r3, [sp, #28]
   1f4fe:	9a03      	ldr	r2, [sp, #12]
   1f500:	4293      	cmp	r3, r2
   1f502:	d1a6      	bne.n	1f452 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x62>
    }

    // if we didn't detect min required objects, fill the rest with fixed value
    if (added_boxes_count < object_detection_count) {
   1f504:	e9dd 460b 	ldrd	r4, r6, [sp, #44]	@ 0x2c
   1f508:	f8dd 8034 	ldr.w	r8, [sp, #52]	@ 0x34
   1f50c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
   1f50e:	9f06      	ldr	r7, [sp, #24]
   1f510:	45b8      	cmp	r8, r7
   1f512:	d839      	bhi.n	1f588 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x198>
   1f514:	e9d6 3700 	ldrd	r3, r7, [r6]
        for (size_t ix = added_boxes_count; ix < object_detection_count; ix++) {
            results[ix].value = 0.0f;
        }
    }

    for (auto c : *cubes) {
   1f518:	429f      	cmp	r7, r3
   1f51a:	bf18      	it	ne
   1f51c:	461e      	movne	r6, r3
   1f51e:	d007      	beq.n	1f530 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x140>
   1f520:	f856 0b04 	ldr.w	r0, [r6], #4
        delete c;
   1f524:	2118      	movs	r1, #24
   1f526:	b108      	cbz	r0, 1f52c <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x13c>
   1f528:	f015 ff82 	bl	35430 <_ZdlPvj>
    for (auto c : *cubes) {
   1f52c:	42b7      	cmp	r7, r6
   1f52e:	d1f7      	bne.n	1f520 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x130>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1f530:	e9d5 2300 	ldrd	r2, r3, [r5]
   1f534:	1a9b      	subs	r3, r3, r2
    }

    result->bounding_boxes = results.data();
   1f536:	6022      	str	r2, [r4, #0]
   1f538:	4a36      	ldr	r2, [pc, #216]	@ (1f614 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x224>)
   1f53a:	10db      	asrs	r3, r3, #3
   1f53c:	fb02 f303 	mul.w	r3, r2, r3
    result->bounding_boxes_count = results.size();
   1f540:	6063      	str	r3, [r4, #4]
	if (__p)
   1f542:	9b05      	ldr	r3, [sp, #20]
   1f544:	b1db      	cbz	r3, 1f57e <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x18e>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1f546:	9b05      	ldr	r3, [sp, #20]
   1f548:	9a08      	ldr	r2, [sp, #32]
   1f54a:	4618      	mov	r0, r3
   1f54c:	1ad1      	subs	r1, r2, r3
}
   1f54e:	b01b      	add	sp, #108	@ 0x6c
   1f550:	ecbd 8b02 	vpop	{d8}
   1f554:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f558:	f015 bf6a 	b.w	35430 <_ZdlPvj>
	  _M_realloc_insert(end(), __x);
   1f55c:	482c      	ldr	r0, [pc, #176]	@ (1f610 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x220>)
   1f55e:	4621      	mov	r1, r4
   1f560:	aa14      	add	r2, sp, #80	@ 0x50
   1f562:	f7ff fe01 	bl	1f168 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
   1f566:	e7c6      	b.n	1f4f6 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x106>
   1f568:	9908      	ldr	r1, [sp, #32]
   1f56a:	aa0f      	add	r2, sp, #60	@ 0x3c
   1f56c:	a810      	add	r0, sp, #64	@ 0x40
   1f56e:	f7ff fd3f 	bl	1eff0 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	_M_deallocate(_M_impl._M_start,
   1f572:	9b10      	ldr	r3, [sp, #64]	@ 0x40
   1f574:	9305      	str	r3, [sp, #20]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   1f576:	9b12      	ldr	r3, [sp, #72]	@ 0x48
            .label = sc->label,
   1f578:	696f      	ldr	r7, [r5, #20]
   1f57a:	9308      	str	r3, [sp, #32]
   1f57c:	e798      	b.n	1f4b0 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0xc0>
}
   1f57e:	b01b      	add	sp, #108	@ 0x6c
   1f580:	ecbd 8b02 	vpop	{d8}
   1f584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1f588:	e9d5 0200 	ldrd	r0, r2, [r5]
   1f58c:	4b21      	ldr	r3, [pc, #132]	@ (1f614 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x224>)
   1f58e:	1a11      	subs	r1, r2, r0
   1f590:	10c9      	asrs	r1, r1, #3
   1f592:	fb03 f101 	mul.w	r1, r3, r1
	if (__new_size > size())
   1f596:	4588      	cmp	r8, r1
   1f598:	d82b      	bhi.n	1f5f2 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x202>
	else if (__new_size < size())
   1f59a:	d320      	bcc.n	1f5de <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x1ee>
   1f59c:	ea4f 0348 	mov.w	r3, r8, lsl #1
        for (size_t ix = added_boxes_count; ix < object_detection_count; ix++) {
   1f5a0:	eb03 0208 	add.w	r2, r3, r8
   1f5a4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   1f5a8:	eb00 03c7 	add.w	r3, r0, r7, lsl #3
   1f5ac:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
            results[ix].value = 0.0f;
   1f5b0:	2100      	movs	r1, #0
   1f5b2:	6159      	str	r1, [r3, #20]
        for (size_t ix = added_boxes_count; ix < object_detection_count; ix++) {
   1f5b4:	3318      	adds	r3, #24
   1f5b6:	429a      	cmp	r2, r3
   1f5b8:	d1fb      	bne.n	1f5b2 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x1c2>
   1f5ba:	e7ab      	b.n	1f514 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x124>
    static std::vector<ei_impulse_result_bounding_box_t> results;
   1f5bc:	4648      	mov	r0, r9
   1f5be:	f018 fbf9 	bl	37db4 <__cxa_guard_acquire>
	: _M_start(), _M_finish(), _M_end_of_storage()
   1f5c2:	4d13      	ldr	r5, [pc, #76]	@ (1f610 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x220>)
   1f5c4:	2800      	cmp	r0, #0
   1f5c6:	f43f af2d 	beq.w	1f424 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x34>
   1f5ca:	4813      	ldr	r0, [pc, #76]	@ (1f618 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x228>)
   1f5cc:	60af      	str	r7, [r5, #8]
   1f5ce:	ed85 8b00 	vstr	d8, [r5]
   1f5d2:	f005 fefd 	bl	253d0 <atexit>
   1f5d6:	4648      	mov	r0, r9
   1f5d8:	f018 fc08 	bl	37dec <__cxa_guard_release>
   1f5dc:	e722      	b.n	1f424 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x34>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
   1f5de:	eb08 0148 	add.w	r1, r8, r8, lsl #1
   1f5e2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (size_type __n = this->_M_impl._M_finish - __pos)
   1f5e6:	428a      	cmp	r2, r1
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
   1f5e8:	ea4f 0348 	mov.w	r3, r8, lsl #1
	if (size_type __n = this->_M_impl._M_finish - __pos)
   1f5ec:	d0d8      	beq.n	1f5a0 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x1b0>
	    this->_M_impl._M_finish = __pos;
   1f5ee:	6069      	str	r1, [r5, #4]
   1f5f0:	e7d6      	b.n	1f5a0 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x1b0>
	  _M_default_append(__new_size - size());
   1f5f2:	4807      	ldr	r0, [pc, #28]	@ (1f610 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x220>)
   1f5f4:	eba8 0101 	sub.w	r1, r8, r1
   1f5f8:	f7ff fe36 	bl	1f268 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj>
	return *(this->_M_impl._M_start + __n);
   1f5fc:	6828      	ldr	r0, [r5, #0]
   1f5fe:	e7cd      	b.n	1f59c <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x1ac>
    for (auto sc : *cubes) {
   1f600:	2700      	movs	r7, #0
   1f602:	e785      	b.n	1f510 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x120>
   1f604:	f3af 8000 	nop.w
	...
   1f610:	10015cd8 	.word	0x10015cd8
   1f614:	aaaaaaab 	.word	0xaaaaaaab
   1f618:	0001e6c9 	.word	0x0001e6c9
   1f61c:	10015cd4 	.word	0x10015cd4

0001f620 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb>:
    TfLiteTensor* output,
    TfLiteTensor* labels_tensor,
    TfLiteTensor* scores_tensor,
    ei_impulse_result_t *result,
    bool debug
) {
   1f620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f624:	ed2d 8b04 	vpush	{d8-d9}
    EI_IMPULSE_ERROR fill_res = EI_IMPULSE_OK;

    if (block_config->classification_mode == EI_CLASSIFIER_CLASSIFICATION_MODE_OBJECT_DETECTION) {
   1f628:	788b      	ldrb	r3, [r1, #2]
) {
   1f62a:	b089      	sub	sp, #36	@ 0x24
    if (block_config->classification_mode == EI_CLASSIFIER_CLASSIFICATION_MODE_OBJECT_DETECTION) {
   1f62c:	2b03      	cmp	r3, #3
) {
   1f62e:	f89d 9060 	ldrb.w	r9, [sp, #96]	@ 0x60
   1f632:	4607      	mov	r7, r0
    if (block_config->classification_mode == EI_CLASSIFIER_CLASSIFICATION_MODE_OBJECT_DETECTION) {
   1f634:	d00b      	beq.n	1f64e <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x2e>
                    block_config->object_detection_last_layer);
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
            }
        }
    }
    else if (block_config->classification_mode == EI_CLASSIFIER_CLASSIFICATION_MODE_VISUAL_ANOMALY)
   1f636:	2b05      	cmp	r3, #5
   1f638:	d003      	beq.n	1f642 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x22>
        }
    }
    // if we copy the output, we don't need to process it as classification
    else
    {
        if (!result->copy_output) {
   1f63a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
   1f63c:	f893 6040 	ldrb.w	r6, [r3, #64]	@ 0x40
   1f640:	b1c6      	cbz	r6, 1f674 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x54>
                    fill_res = fill_result_struct_f32_fomo(
   1f642:	2000      	movs	r0, #0
            }
        }
    }

    return fill_res;
}
   1f644:	b009      	add	sp, #36	@ 0x24
   1f646:	ecbd 8b04 	vpop	{d8-d9}
   1f64a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f64e:	4688      	mov	r8, r1
        switch (block_config->object_detection_last_layer) {
   1f650:	f991 1009 	ldrsb.w	r1, [r1, #9]
   1f654:	1e4b      	subs	r3, r1, #1
   1f656:	2b09      	cmp	r3, #9
   1f658:	f200 8185 	bhi.w	1f966 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x346>
   1f65c:	e8df f013 	tbh	[pc, r3, lsl #1]
   1f660:	0090008c 	.word	0x0090008c
   1f664:	00750064 	.word	0x00750064
   1f668:	00f00064 	.word	0x00f00064
   1f66c:	00500050 	.word	0x00500050
   1f670:	007d00f9 	.word	0x007d00f9
            if (int8_output) {
   1f674:	7f10      	ldrb	r0, [r2, #28]
                    fill_res = fill_result_struct_i8_fomo(
   1f676:	6911      	ldr	r1, [r2, #16]
                                                                      ei_impulse_result_t *result,
                                                                      int8_t *data,
                                                                      float zero_point,
                                                                      float scale,
                                                                      bool debug) {
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
   1f678:	f8b7 5072 	ldrh.w	r5, [r7, #114]	@ 0x72
            if (int8_output) {
   1f67c:	2809      	cmp	r0, #9
   1f67e:	d017      	beq.n	1f6b0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x90>
#ifdef EI_DSP_RESULT_OVERRIDE
    uint32_t stop_count = EI_DSP_RESULT_OVERRIDE;
#else
    uint32_t stop_count = impulse->label_count;
#endif
    for (uint32_t ix = 0; ix < stop_count; ix++) {
   1f680:	2d00      	cmp	r5, #0
   1f682:	d0de      	beq.n	1f642 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x22>

        float value = data[ix];

        if (debug) {
            ei_printf("%s:\t", impulse->categories[ix]);
   1f684:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
   1f686:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
   1f688:	4688      	mov	r8, r1
        float value = data[ix];
   1f68a:	ecb8 8a01 	vldmia	r8!, {s16}
        if (debug) {
   1f68e:	ea4f 0a86 	mov.w	sl, r6, lsl #2
   1f692:	f1b9 0f00 	cmp.w	r9, #0
   1f696:	f040 80ec 	bne.w	1f872 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x252>
    for (uint32_t ix = 0; ix < stop_count; ix++) {
   1f69a:	3601      	adds	r6, #1
            ei_printf_float(value);
            ei_printf("\n");
        }
// For testing purposes, we will have more values than labels
#ifndef EI_DSP_RESULT_OVERRIDE
        result->classification[ix].label = impulse->categories[ix];
   1f69c:	f853 200a 	ldr.w	r2, [r3, sl]
   1f6a0:	60a2      	str	r2, [r4, #8]
    for (uint32_t ix = 0; ix < stop_count; ix++) {
   1f6a2:	42b5      	cmp	r5, r6
#endif
        result->classification[ix].value = value;
   1f6a4:	ed84 8a03 	vstr	s16, [r4, #12]
    for (uint32_t ix = 0; ix < stop_count; ix++) {
   1f6a8:	f104 0408 	add.w	r4, r4, #8
   1f6ac:	d8ed      	bhi.n	1f68a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x6a>
   1f6ae:	e7c8      	b.n	1f642 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x22>
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
   1f6b0:	2d00      	cmp	r5, #0
   1f6b2:	d0c6      	beq.n	1f642 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x22>
                fill_res = fill_result_struct_i8(impulse, result, output->data.int8, output->params.zero_point, output->params.scale, debug);
   1f6b4:	edd2 8a03 	vldr	s17, [r2, #12]
   1f6b8:	ed92 9a02 	vldr	s18, [r2, #8]
            ei_printf("%s:\t", impulse->categories[ix]);
   1f6bc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
   1f6be:	eef8 8ae8 	vcvt.f32.s32	s17, s17
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
   1f6c2:	4634      	mov	r4, r6
   1f6c4:	f101 38ff 	add.w	r8, r1, #4294967295	@ 0xffffffff
   1f6c8:	461e      	mov	r6, r3
        float value = static_cast<float>(data[ix] - zero_point) * scale;
   1f6ca:	f918 3f01 	ldrsb.w	r3, [r8, #1]!
   1f6ce:	ee08 3a10 	vmov	s16, r3
   1f6d2:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   1f6d6:	ea4f 0a84 	mov.w	sl, r4, lsl #2
   1f6da:	ee38 8a68 	vsub.f32	s16, s16, s17
   1f6de:	ee28 8a09 	vmul.f32	s16, s16, s18
        if (debug) {
   1f6e2:	f1b9 0f00 	cmp.w	r9, #0
   1f6e6:	f040 80d2 	bne.w	1f88e <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x26e>
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
   1f6ea:	3401      	adds	r4, #1
        result->classification[ix].label = impulse->categories[ix];
   1f6ec:	f852 300a 	ldr.w	r3, [r2, sl]
   1f6f0:	60b3      	str	r3, [r6, #8]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
   1f6f2:	42ac      	cmp	r4, r5
        result->classification[ix].value = value;
   1f6f4:	ed86 8a03 	vstr	s16, [r6, #12]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
   1f6f8:	f106 0608 	add.w	r6, r6, #8
   1f6fc:	d3e5      	bcc.n	1f6ca <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xaa>
   1f6fe:	e7a0      	b.n	1f642 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x22>
                if (output->type == kTfLiteInt8) {
   1f700:	7f11      	ldrb	r1, [r2, #28]
   1f702:	1e4b      	subs	r3, r1, #1
   1f704:	b2db      	uxtb	r3, r3
   1f706:	2b08      	cmp	r3, #8
   1f708:	f200 8121 	bhi.w	1f94e <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x32e>
   1f70c:	f240 1205 	movw	r2, #261	@ 0x105
   1f710:	fa22 f303 	lsr.w	r3, r2, r3
   1f714:	07d8      	lsls	r0, r3, #31
   1f716:	f140 811a 	bpl.w	1f94e <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x32e>
                    fill_res = fill_result_struct_quantized_yolov5(
   1f71a:	f06f 0014 	mvn.w	r0, #20
}
   1f71e:	b009      	add	sp, #36	@ 0x24
   1f720:	ecbd 8b04 	vpop	{d8-d9}
   1f724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (output->type == kTfLiteInt8) {
   1f728:	7f11      	ldrb	r1, [r2, #28]
   1f72a:	1e4b      	subs	r3, r1, #1
   1f72c:	b2db      	uxtb	r3, r3
   1f72e:	2b08      	cmp	r3, #8
   1f730:	d805      	bhi.n	1f73e <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x11e>
   1f732:	f240 1205 	movw	r2, #261	@ 0x105
   1f736:	fa22 f303 	lsr.w	r3, r2, r3
   1f73a:	07dc      	lsls	r4, r3, #31
   1f73c:	d4ed      	bmi.n	1f71a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xfa>
                    ei_printf("ERR: Invalid output type (%d) for YOLOv5 last layer\n", output->type);
   1f73e:	488c      	ldr	r0, [pc, #560]	@ (1f970 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x350>)
   1f740:	f005 f96a 	bl	24a18 <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
   1f744:	f06f 0009 	mvn.w	r0, #9
   1f748:	e77c      	b.n	1f644 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x24>
                if (block_config->quantized == 1) {
   1f74a:	f898 3014 	ldrb.w	r3, [r8, #20]
   1f74e:	2b00      	cmp	r3, #0
   1f750:	d0e3      	beq.n	1f71a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xfa>
                    ei_printf("ERR: YOLOX does not support quantized inference\n");
   1f752:	4888      	ldr	r0, [pc, #544]	@ (1f974 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x354>)
   1f754:	f005 f960 	bl	24a18 <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
   1f758:	e7f4      	b.n	1f744 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x124>
                if (output->type == kTfLiteInt8) {
   1f75a:	7f11      	ldrb	r1, [r2, #28]
   1f75c:	1e4b      	subs	r3, r1, #1
   1f75e:	b2db      	uxtb	r3, r3
   1f760:	2b08      	cmp	r3, #8
   1f762:	d805      	bhi.n	1f770 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x150>
   1f764:	f240 1205 	movw	r2, #261	@ 0x105
   1f768:	fa22 f303 	lsr.w	r3, r2, r3
   1f76c:	07db      	lsls	r3, r3, #31
   1f76e:	d4d4      	bmi.n	1f71a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xfa>
                    ei_printf("ERR: Invalid output type (%d) for TAO YOLOv4 layer\n", output->type);
   1f770:	4881      	ldr	r0, [pc, #516]	@ (1f978 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x358>)
   1f772:	f005 f951 	bl	24a18 <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
   1f776:	e7e5      	b.n	1f744 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x124>
                ei_printf("ERR: MobileNet SSD is not supported in EON or TensorFlow Lite Micro\n");
   1f778:	4880      	ldr	r0, [pc, #512]	@ (1f97c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x35c>)
   1f77a:	f005 f94d 	bl	24a18 <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
   1f77e:	e7e1      	b.n	1f744 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x124>
                    fill_res = fill_result_struct_i8_fomo(
   1f780:	6913      	ldr	r3, [r2, #16]
   1f782:	9301      	str	r3, [sp, #4]
                if (int8_output) {
   1f784:	7f13      	ldrb	r3, [r2, #28]
                        impulse->fomo_output_size,
   1f786:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
    int out_width_factor = impulse->input_width / out_width;
   1f788:	6abc      	ldr	r4, [r7, #40]	@ 0x28
   1f78a:	fbb4 f4f0 	udiv	r4, r4, r0
                if (int8_output) {
   1f78e:	2b09      	cmp	r3, #9
   1f790:	f000 808d 	beq.w	1f8ae <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x28e>
	: _M_start(), _M_finish(), _M_end_of_storage()
   1f794:	2100      	movs	r1, #0
   1f796:	2200      	movs	r2, #0
   1f798:	2300      	movs	r3, #0
   1f79a:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1f79e:	9106      	str	r1, [sp, #24]
    for (size_t y = 0; y < out_width; y++) {
   1f7a0:	2800      	cmp	r0, #0
   1f7a2:	f000 80d8 	beq.w	1f956 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x336>
   1f7a6:	f8b7 5072 	ldrh.w	r5, [r7, #114]	@ 0x72
   1f7aa:	e9cd 0402 	strd	r0, r4, [sp, #8]
   1f7ae:	46ac      	mov	ip, r5
   1f7b0:	468a      	mov	sl, r1
   1f7b2:	f10d 0910 	add.w	r9, sp, #16
   1f7b6:	460d      	mov	r5, r1
        for (size_t x = 0; x < out_height; x++) {
   1f7b8:	f04f 0b00 	mov.w	fp, #0
            size_t loc = ((y * out_height) + x) * (impulse->label_count + 1);
   1f7bc:	eb0b 0605 	add.w	r6, fp, r5
   1f7c0:	fb0c 6606 	mla	r6, ip, r6, r6
            for (size_t ix = 1; ix < impulse->label_count + 1; ix++) {
   1f7c4:	f1bc 0f00 	cmp.w	ip, #0
   1f7c8:	d01e      	beq.n	1f808 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x1e8>
   1f7ca:	9b01      	ldr	r3, [sp, #4]
   1f7cc:	3601      	adds	r6, #1
   1f7ce:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1f7d2:	2401      	movs	r4, #1
                float vf = data[loc+ix];
   1f7d4:	ecb6 0a01 	vldmia	r6!, {s0}
    if (vf < detection_threshold) return;
   1f7d8:	edd8 7a04 	vldr	s15, [r8, #16]
   1f7dc:	eeb4 0ae7 	vcmpe.f32	s0, s15
   1f7e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1f7e4:	4652      	mov	r2, sl
   1f7e6:	4659      	mov	r1, fp
   1f7e8:	4648      	mov	r0, r9
   1f7ea:	d408      	bmi.n	1f7fe <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x1de>
                ei_handle_cube(&cubes, x, y, vf, impulse->categories[ix - 1], block_config->threshold);
   1f7ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
   1f7ee:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   1f7f2:	f853 3c04 	ldr.w	r3, [r3, #-4]
   1f7f6:	f7ff fc6d 	bl	1f0d4 <_ZL14ei_handle_cubePSt6vectorIP4cubeSaIS1_EEiifPKcf.part.0>
   1f7fa:	f8b7 c072 	ldrh.w	ip, [r7, #114]	@ 0x72
            for (size_t ix = 1; ix < impulse->label_count + 1; ix++) {
   1f7fe:	3401      	adds	r4, #1
   1f800:	f10c 0301 	add.w	r3, ip, #1
   1f804:	429c      	cmp	r4, r3
   1f806:	d3e5      	bcc.n	1f7d4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x1b4>
        for (size_t x = 0; x < out_height; x++) {
   1f808:	9b02      	ldr	r3, [sp, #8]
   1f80a:	f10b 0b01 	add.w	fp, fp, #1
   1f80e:	459b      	cmp	fp, r3
   1f810:	d1d4      	bne.n	1f7bc <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x19c>
    for (size_t y = 0; y < out_width; y++) {
   1f812:	f10a 0a01 	add.w	sl, sl, #1
   1f816:	45da      	cmp	sl, fp
   1f818:	445d      	add	r5, fp
   1f81a:	d1cd      	bne.n	1f7b8 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x198>
    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);
   1f81c:	9c03      	ldr	r4, [sp, #12]
   1f81e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
   1f822:	9817      	ldr	r0, [sp, #92]	@ 0x5c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   1f824:	9d06      	ldr	r5, [sp, #24]
   1f826:	4622      	mov	r2, r4
	_M_deallocate(_M_impl._M_start,
   1f828:	9c04      	ldr	r4, [sp, #16]
   1f82a:	4649      	mov	r1, r9
   1f82c:	f7ff fde0 	bl	1f3f0 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim>
	if (__p)
   1f830:	2c00      	cmp	r4, #0
   1f832:	f43f af06 	beq.w	1f642 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x22>
   1f836:	1b29      	subs	r1, r5, r4
   1f838:	4620      	mov	r0, r4
   1f83a:	f015 fdf9 	bl	35430 <_ZdlPvj>

      __attribute__((__always_inline__))
#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
   1f83e:	e700      	b.n	1f642 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x22>
                if (block_config->quantized == 1) {
   1f840:	f898 3014 	ldrb.w	r3, [r8, #20]
   1f844:	2b00      	cmp	r3, #0
   1f846:	f43f af68 	beq.w	1f71a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xfa>
                    ei_printf("ERR: YOLOV7 does not support quantized inference\n");
   1f84a:	484d      	ldr	r0, [pc, #308]	@ (1f980 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x360>)
   1f84c:	f005 f8e4 	bl	24a18 <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
   1f850:	e778      	b.n	1f744 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x124>
                if (output->type == kTfLiteInt8) {
   1f852:	7f11      	ldrb	r1, [r2, #28]
   1f854:	1e4b      	subs	r3, r1, #1
   1f856:	b2db      	uxtb	r3, r3
   1f858:	2b08      	cmp	r3, #8
   1f85a:	d806      	bhi.n	1f86a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x24a>
   1f85c:	f240 1205 	movw	r2, #261	@ 0x105
   1f860:	fa22 f303 	lsr.w	r3, r2, r3
   1f864:	07da      	lsls	r2, r3, #31
   1f866:	f53f af58 	bmi.w	1f71a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xfa>
                    ei_printf("ERR: Invalid output type (%d) for TAO YOLOv3 layer\n", output->type);
   1f86a:	4846      	ldr	r0, [pc, #280]	@ (1f984 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x364>)
   1f86c:	f005 f8d4 	bl	24a18 <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
   1f870:	e768      	b.n	1f744 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x124>
            ei_printf("%s:\t", impulse->categories[ix]);
   1f872:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
   1f876:	4844      	ldr	r0, [pc, #272]	@ (1f988 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x368>)
   1f878:	f005 f8ce 	bl	24a18 <_Z9ei_printfPKcz>
            ei_printf_float(value);
   1f87c:	eeb0 0a48 	vmov.f32	s0, s16
   1f880:	f005 f8e6 	bl	24a50 <_Z15ei_printf_floatf>
            ei_printf("\n");
   1f884:	4841      	ldr	r0, [pc, #260]	@ (1f98c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x36c>)
   1f886:	f005 f8c7 	bl	24a18 <_Z9ei_printfPKcz>
        result->classification[ix].label = impulse->categories[ix];
   1f88a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
   1f88c:	e705      	b.n	1f69a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x7a>
            ei_printf("%s:\t", impulse->categories[ix]);
   1f88e:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
   1f892:	483d      	ldr	r0, [pc, #244]	@ (1f988 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x368>)
   1f894:	f005 f8c0 	bl	24a18 <_Z9ei_printfPKcz>
            ei_printf_float(value);
   1f898:	eeb0 0a48 	vmov.f32	s0, s16
   1f89c:	f005 f8d8 	bl	24a50 <_Z15ei_printf_floatf>
            ei_printf("\n");
   1f8a0:	483a      	ldr	r0, [pc, #232]	@ (1f98c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x36c>)
   1f8a2:	f005 f8b9 	bl	24a18 <_Z9ei_printfPKcz>
        result->classification[ix].label = impulse->categories[ix];
   1f8a6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
   1f8a8:	f8b7 5072 	ldrh.w	r5, [r7, #114]	@ 0x72
   1f8ac:	e71d      	b.n	1f6ea <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xca>
                    fill_res = fill_result_struct_i8_fomo(
   1f8ae:	ed92 8a03 	vldr	s16, [r2, #12]
   1f8b2:	edd2 8a02 	vldr	s17, [r2, #8]
	: _M_start(), _M_finish(), _M_end_of_storage()
   1f8b6:	2100      	movs	r1, #0
   1f8b8:	2200      	movs	r2, #0
   1f8ba:	2300      	movs	r3, #0
   1f8bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1f8c0:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   1f8c4:	9106      	str	r1, [sp, #24]
    for (size_t y = 0; y < out_width; y++) {
   1f8c6:	2800      	cmp	r0, #0
   1f8c8:	d045      	beq.n	1f956 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x336>
   1f8ca:	f8b7 5072 	ldrh.w	r5, [r7, #114]	@ 0x72
   1f8ce:	e9cd 0402 	strd	r0, r4, [sp, #8]
   1f8d2:	46ac      	mov	ip, r5
   1f8d4:	468a      	mov	sl, r1
   1f8d6:	f10d 0910 	add.w	r9, sp, #16
   1f8da:	460d      	mov	r5, r1
        for (size_t x = 0; x < out_height; x++) {
   1f8dc:	f04f 0b00 	mov.w	fp, #0
            size_t loc = ((y * out_height) + x) * (impulse->label_count + 1);
   1f8e0:	eb0b 0605 	add.w	r6, fp, r5
   1f8e4:	fb0c 6606 	mla	r6, ip, r6, r6
            for (size_t ix = 1; ix < impulse->label_count + 1; ix++) {
   1f8e8:	f1bc 0f00 	cmp.w	ip, #0
   1f8ec:	d024      	beq.n	1f938 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x318>
   1f8ee:	9b01      	ldr	r3, [sp, #4]
   1f8f0:	2401      	movs	r4, #1
   1f8f2:	441e      	add	r6, r3
                float vf = static_cast<float>(v - zero_point) * scale;
   1f8f4:	f916 3f01 	ldrsb.w	r3, [r6, #1]!
    if (vf < detection_threshold) return;
   1f8f8:	edd8 7a04 	vldr	s15, [r8, #16]
                float vf = static_cast<float>(v - zero_point) * scale;
   1f8fc:	ee00 3a10 	vmov	s0, r3
   1f900:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   1f904:	4652      	mov	r2, sl
   1f906:	ee30 0a48 	vsub.f32	s0, s0, s16
   1f90a:	4659      	mov	r1, fp
   1f90c:	ee20 0a28 	vmul.f32	s0, s0, s17
    if (vf < detection_threshold) return;
   1f910:	4648      	mov	r0, r9
   1f912:	eeb4 0ae7 	vcmpe.f32	s0, s15
   1f916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1f91a:	d408      	bmi.n	1f92e <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x30e>
                ei_handle_cube(&cubes, x, y, vf, impulse->categories[ix - 1], block_config->threshold);
   1f91c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
   1f91e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   1f922:	f853 3c04 	ldr.w	r3, [r3, #-4]
   1f926:	f7ff fbd5 	bl	1f0d4 <_ZL14ei_handle_cubePSt6vectorIP4cubeSaIS1_EEiifPKcf.part.0>
   1f92a:	f8b7 c072 	ldrh.w	ip, [r7, #114]	@ 0x72
            for (size_t ix = 1; ix < impulse->label_count + 1; ix++) {
   1f92e:	3401      	adds	r4, #1
   1f930:	f10c 0301 	add.w	r3, ip, #1
   1f934:	429c      	cmp	r4, r3
   1f936:	d3dd      	bcc.n	1f8f4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x2d4>
        for (size_t x = 0; x < out_height; x++) {
   1f938:	9b02      	ldr	r3, [sp, #8]
   1f93a:	f10b 0b01 	add.w	fp, fp, #1
   1f93e:	459b      	cmp	fp, r3
   1f940:	d1ce      	bne.n	1f8e0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x2c0>
    for (size_t y = 0; y < out_width; y++) {
   1f942:	f10a 0a01 	add.w	sl, sl, #1
   1f946:	45da      	cmp	sl, fp
   1f948:	445d      	add	r5, fp
   1f94a:	d1c7      	bne.n	1f8dc <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x2bc>
   1f94c:	e766      	b.n	1f81c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x1fc>
                    ei_printf("ERR: Invalid output type (%d) for TAO last layer\n", output->type);
   1f94e:	4810      	ldr	r0, [pc, #64]	@ (1f990 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x370>)
   1f950:	f005 f862 	bl	24a18 <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
   1f954:	e6f6      	b.n	1f744 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x124>
    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);
   1f956:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
   1f95a:	9817      	ldr	r0, [sp, #92]	@ 0x5c
   1f95c:	4622      	mov	r2, r4
   1f95e:	a904      	add	r1, sp, #16
   1f960:	f7ff fd46 	bl	1f3f0 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim>
      _M_deallocate(pointer __p, size_t __n)
   1f964:	e66d      	b.n	1f642 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x22>
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
   1f966:	480b      	ldr	r0, [pc, #44]	@ (1f994 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x374>)
   1f968:	f005 f856 	bl	24a18 <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
   1f96c:	e6ea      	b.n	1f744 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x124>
   1f96e:	bf00      	nop
   1f970:	000435c4 	.word	0x000435c4
   1f974:	000435fc 	.word	0x000435fc
   1f978:	000436cc 	.word	0x000436cc
   1f97c:	0004357c 	.word	0x0004357c
   1f980:	00043630 	.word	0x00043630
   1f984:	00043698 	.word	0x00043698
   1f988:	00043734 	.word	0x00043734
   1f98c:	000434b4 	.word	0x000434b4
   1f990:	00043664 	.word	0x00043664
   1f994:	00043700 	.word	0x00043700

0001f998 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0>:
 * @param   result          Struct for results
 * @param   debug           Whether to print debug info
 *
 * @return  EI_IMPULSE_OK if successful
 */
static EI_IMPULSE_ERROR inference_tflite_run(
   1f998:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f99c:	4699      	mov	r9, r3
    ei_impulse_result_t *result,
    bool debug) {

    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;

    if (graph_config->model_invoke() != kTfLiteOk) {
   1f99e:	698b      	ldr	r3, [r1, #24]
static EI_IMPULSE_ERROR inference_tflite_run(
   1f9a0:	b085      	sub	sp, #20
    if (graph_config->model_invoke() != kTfLiteOk) {
   1f9a2:	689b      	ldr	r3, [r3, #8]
static EI_IMPULSE_ERROR inference_tflite_run(
   1f9a4:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
   1f9a6:	f89d 8040 	ldrb.w	r8, [sp, #64]	@ 0x40
   1f9aa:	460c      	mov	r4, r1
   1f9ac:	4607      	mov	r7, r0
   1f9ae:	4615      	mov	r5, r2
    if (graph_config->model_invoke() != kTfLiteOk) {
   1f9b0:	4798      	blx	r3
   1f9b2:	bb50      	cbnz	r0, 1fa0a <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0+0x72>
        return EI_IMPULSE_TFLITE_ERROR;
    }

    uint64_t ctx_end_us = ei_read_timer_us();
   1f9b4:	f005 f828 	bl	24a08 <_Z16ei_read_timer_usv>

    result->timing.classification_us = ctx_end_us - ctx_start_us;
   1f9b8:	1b40      	subs	r0, r0, r5
   1f9ba:	eb61 0109 	sbc.w	r1, r1, r9
   1f9be:	e9c6 010c 	strd	r0, r1, [r6, #48]	@ 0x30
    result->timing.classification = (int)(result->timing.classification_us / 1000);
   1f9c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
   1f9c6:	2300      	movs	r3, #0
   1f9c8:	f7f9 fbca 	bl	19160 <__aeabi_ldivmod>
   1f9cc:	6230      	str	r0, [r6, #32]

    // Read the predicted y value from the model's output tensor
    if (debug) {
   1f9ce:	f1b8 0f00 	cmp.w	r8, #0
   1f9d2:	d115      	bne.n	1fa00 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0+0x68>
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
    }

    EI_IMPULSE_ERROR fill_res = fill_result_struct_from_output_tensor_tflite(
   1f9d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   1f9d6:	9300      	str	r3, [sp, #0]
   1f9d8:	4621      	mov	r1, r4
   1f9da:	e9cd 6801 	strd	r6, r8, [sp, #4]
   1f9de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
   1f9e2:	4638      	mov	r0, r7
   1f9e4:	f7ff fe1c 	bl	1f620 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb>
        impulse, block_config, output, labels_tensor, scores_tensor, result, debug);

    if (fill_res != EI_IMPULSE_OK) {
   1f9e8:	4604      	mov	r4, r0
   1f9ea:	b928      	cbnz	r0, 1f9f8 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0+0x60>
        return fill_res;
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
   1f9ec:	f005 f80a 	bl	24a04 <_Z29ei_run_impulse_check_canceledv>
        return EI_IMPULSE_CANCELED;
   1f9f0:	3002      	adds	r0, #2
   1f9f2:	bf08      	it	eq
   1f9f4:	f06f 0401 	mvneq.w	r4, #1
    }

    return EI_IMPULSE_OK;
}
   1f9f8:	4620      	mov	r0, r4
   1f9fa:	b005      	add	sp, #20
   1f9fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
   1fa00:	4601      	mov	r1, r0
   1fa02:	4803      	ldr	r0, [pc, #12]	@ (1fa10 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0+0x78>)
   1fa04:	f005 f808 	bl	24a18 <_Z9ei_printfPKcz>
   1fa08:	e7e4      	b.n	1f9d4 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0+0x3c>
        return EI_IMPULSE_TFLITE_ERROR;
   1fa0a:	f06f 0402 	mvn.w	r4, #2
   1fa0e:	e7f3      	b.n	1f9f8 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0+0x60>
   1fa10:	0004373c 	.word	0x0004373c

0001fa14 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb>:
EI_IMPULSE_ERROR run_nn_inference_image_quantized(
    const ei_impulse_t *impulse,
    signal_t *signal,
    ei_impulse_result_t *result,
    void *config_ptr,
    bool debug = false) {
   1fa14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fa18:	ed2d 8b0a 	vpush	{d8-d12}
   1fa1c:	b0c1      	sub	sp, #260	@ 0x104
   1fa1e:	4699      	mov	r9, r3
   1fa20:	4617      	mov	r7, r2
   1fa22:	f89d 3150 	ldrb.w	r3, [sp, #336]	@ 0x150
   1fa26:	9311      	str	r3, [sp, #68]	@ 0x44
   1fa28:	910b      	str	r1, [sp, #44]	@ 0x2c

    ei_learning_block_config_tflite_graph_t *block_config = (ei_learning_block_config_tflite_graph_t*)config_ptr;
    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
   1fa2a:	f8d9 3018 	ldr.w	r3, [r9, #24]
   1fa2e:	9312      	str	r3, [sp, #72]	@ 0x48

    memset(result, 0, sizeof(ei_impulse_result_t));
   1fa30:	2248      	movs	r2, #72	@ 0x48
   1fa32:	2100      	movs	r1, #0
    bool debug = false) {
   1fa34:	4606      	mov	r6, r0
    memset(result, 0, sizeof(ei_impulse_result_t));
   1fa36:	4638      	mov	r0, r7
   1fa38:	f007 fa50 	bl	26edc <memset>
    TfLiteTensor output_scores;
    TfLiteTensor output_labels;

    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(
   1fa3c:	ab30      	add	r3, sp, #192	@ 0xc0
   1fa3e:	9301      	str	r3, [sp, #4]
   1fa40:	ab38      	add	r3, sp, #224	@ 0xe0
   1fa42:	9300      	str	r3, [sp, #0]
   1fa44:	aa20      	add	r2, sp, #128	@ 0x80
   1fa46:	ab28      	add	r3, sp, #160	@ 0xa0
   1fa48:	a91e      	add	r1, sp, #120	@ 0x78
   1fa4a:	4648      	mov	r0, r9
   1fa4c:	f7fe fe04 	bl	1e658 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.isra.0>
        &input, &output,
        &output_labels,
        &output_scores,
        p_tensor_arena);

    if (init_res != EI_IMPULSE_OK) {
   1fa50:	4604      	mov	r4, r0
   1fa52:	2800      	cmp	r0, #0
   1fa54:	f040 8149 	bne.w	1fcea <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x2d6>
        return init_res;
    }

    if (input.type != TfLiteType::kTfLiteInt8 && input.type != TfLiteType::kTfLiteUInt8) {
   1fa58:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
   1fa5c:	2b09      	cmp	r3, #9
   1fa5e:	d002      	beq.n	1fa66 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x52>
   1fa60:	2b03      	cmp	r3, #3
   1fa62:	f040 8255 	bne.w	1ff10 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x4fc>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
    }

    uint64_t dsp_start_us = ei_read_timer_us();
   1fa66:	f004 ffcf 	bl	24a08 <_Z16ei_read_timer_usv>

    // features matrix maps around the input tensor to not allocate any memory
    ei::matrix_i8_t features_matrix(1, impulse->nn_input_frame_size, input.data.int8);
   1fa6a:	f8dd b090 	ldr.w	fp, [sp, #144]	@ 0x90
   1fa6e:	69b3      	ldr	r3, [r6, #24]
   1fa70:	9319      	str	r3, [sp, #100]	@ 0x64
    uint64_t dsp_start_us = ei_read_timer_us();
   1fa72:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
   1fa76:	f1bb 0f00 	cmp.w	fp, #0
   1fa7a:	f000 8241 	beq.w	1ff00 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x4ec>
            buffer = a_buffer;
            buffer_managed_by_me = false;
   1fa7e:	2300      	movs	r3, #0
   1fa80:	9313      	str	r3, [sp, #76]	@ 0x4c

    // run DSP process and quantize automatically
    int ret = extract_image_features_quantized(signal, &features_matrix, impulse->dsp_blocks[0].config, input.params.scale, input.params.zero_point,
   1fa82:	6c33      	ldr	r3, [r6, #64]	@ 0x40
        impulse->frequency, impulse->learning_blocks[0].image_scaling);
   1fa84:	6db2      	ldr	r2, [r6, #88]	@ 0x58
    int ret = extract_image_features_quantized(signal, &features_matrix, impulse->dsp_blocks[0].config, input.params.scale, input.params.zero_point,
   1fa86:	68db      	ldr	r3, [r3, #12]
   1fa88:	eddd 7a23 	vldr	s15, [sp, #140]	@ 0x8c

__attribute__((unused)) int extract_image_features_quantized(signal_t *signal, matrix_i8_t *output_matrix, void *config_ptr, float scale, float zero_point, const float frequency,
                                                             int image_scaling) {
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
   1fa8c:	6958      	ldr	r0, [r3, #20]
   1fa8e:	49d4      	ldr	r1, [pc, #848]	@ (1fde0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3cc>)
        impulse->frequency, impulse->learning_blocks[0].image_scaling);
   1fa90:	6915      	ldr	r5, [r2, #16]
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
   1fa92:	f8d3 a008 	ldr.w	sl, [r3, #8]
    int ret = extract_image_features_quantized(signal, &features_matrix, impulse->dsp_blocks[0].config, input.params.scale, input.params.zero_point,
   1fa96:	eddd 9a22 	vldr	s19, [sp, #136]	@ 0x88
   1fa9a:	eef8 8ae7 	vcvt.f32.s32	s17, s15
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
   1fa9e:	f7f8 fbaf 	bl	18200 <strcmp>
#else
    const size_t page_size = 1024;
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
   1faa2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
   1faa4:	2800      	cmp	r0, #0
    size_t bytes_left = signal->total_length;
   1faa6:	691a      	ldr	r2, [r3, #16]
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
   1faa8:	bf14      	ite	ne
   1faaa:	2303      	movne	r3, #3
   1faac:	2301      	moveq	r3, #1
   1faae:	9308      	str	r3, [sp, #32]
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
   1fab0:	2a00      	cmp	r2, #0
   1fab2:	f000 80e5 	beq.w	1fc80 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x26c>
   1fab6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
   1faba:	ee87 9aa9 	vdiv.f32	s18, s15, s19
   1fabe:	e9cd 6716 	strd	r6, r7, [sp, #88]	@ 0x58
    size_t output_ix = 0;
   1fac2:	2400      	movs	r4, #0
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
   1fac4:	940c      	str	r4, [sp, #48]	@ 0x30
   1fac6:	f8cd a03c 	str.w	sl, [sp, #60]	@ 0x3c
   1faca:	4690      	mov	r8, r2
   1facc:	f8cd 9060 	str.w	r9, [sp, #96]	@ 0x60
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(b / scale) + zero_point);
                }
            }
            else {
                // fast code path
                if (scale == 0.003921568859368563f && zero_point == -128 && image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
   1fad0:	eddf cac4 	vldr	s25, [pc, #784]	@ 1fde4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3d0>
                        b -= 128.0f;
                    }

                    // ITU-R 601-2 luma transform
                    // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                    float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
   1fad4:	eddf bac4 	vldr	s23, [pc, #784]	@ 1fde8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3d4>
   1fad8:	ed9f bac4 	vldr	s22, [pc, #784]	@ 1fdec <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3d8>
   1fadc:	eddf aac4 	vldr	s21, [pc, #784]	@ 1fdf0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3dc>
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   1fae0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
   1fae2:	f5b8 6f80 	cmp.w	r8, #1024	@ 0x400
   1fae6:	4646      	mov	r6, r8
   1fae8:	bf28      	it	cs
   1faea:	f44f 6680 	movcs.w	r6, #1024	@ 0x400
   1faee:	fb03 f006 	mul.w	r0, r3, r6
   1faf2:	0080      	lsls	r0, r0, #2
   1faf4:	2101      	movs	r1, #1
   1faf6:	f004 ffbb 	bl	24a70 <_Z9ei_callocjj>
        if (!input_matrix.buffer) {
   1fafa:	900a      	str	r0, [sp, #40]	@ 0x28
   1fafc:	2800      	cmp	r0, #0
   1fafe:	f000 81cc 	beq.w	1fe9a <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x486>
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
   1fb02:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   1fb04:	e9cd 361b 	strd	r3, r6, [sp, #108]	@ 0x6c
   1fb08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   1fb0a:	931d      	str	r3, [sp, #116]	@ 0x74
	if (_M_empty())
   1fb0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   1fb0e:	689b      	ldr	r3, [r3, #8]
   1fb10:	2b00      	cmp	r3, #0
   1fb12:	f000 8200 	beq.w	1ff16 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x502>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   1fb16:	980b      	ldr	r0, [sp, #44]	@ 0x2c
   1fb18:	ab1d      	add	r3, sp, #116	@ 0x74
   1fb1a:	68c7      	ldr	r7, [r0, #12]
   1fb1c:	aa1c      	add	r2, sp, #112	@ 0x70
   1fb1e:	a91b      	add	r1, sp, #108	@ 0x6c
   1fb20:	47b8      	blx	r7
        for (size_t jx = 0; jx < elements_to_read; jx++) {
   1fb22:	f1b8 0f00 	cmp.w	r8, #0
   1fb26:	f000 8099 	beq.w	1fc5c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x248>
   1fb2a:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
   1fb2c:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
                if (scale == 0.003921568859368563f && zero_point == -128 && image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
   1fb30:	ed9f aab0 	vldr	s20, [pc, #704]	@ 1fdf4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3e0>
        for (size_t jx = 0; jx < elements_to_read; jx++) {
   1fb34:	46a8      	mov	r8, r5
   1fb36:	f04f 0a00 	mov.w	sl, #0
   1fb3a:	4622      	mov	r2, r4
   1fb3c:	463d      	mov	r5, r7
   1fb3e:	e033      	b.n	1fba8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x194>
                if (scale == 0.003921568859368563f && zero_point == -128 && image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
   1fb40:	eef4 9a6c 	vcmp.f32	s19, s25
   1fb44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1fb48:	f040 80d5 	bne.w	1fcf6 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x2e2>
   1fb4c:	eef4 8a4a 	vcmp.f32	s17, s20
   1fb50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1fb54:	f040 80cf 	bne.w	1fcf6 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x2e2>
   1fb58:	f1b8 0f00 	cmp.w	r8, #0
   1fb5c:	f040 80f3 	bne.w	1fd46 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x332>
                    int32_t gray = (iRedToGray * r) + (iGreenToGray * g) + (iBlueToGray * b);
   1fb60:	f249 6245 	movw	r2, #38469	@ 0x9645
   1fb64:	fb02 fc0c 	mul.w	ip, r2, ip
   1fb68:	f644 428b 	movw	r2, #19595	@ 0x4c8b
   1fb6c:	fb02 cc0e 	mla	ip, r2, lr, ip
   1fb70:	f641 522f 	movw	r2, #7471	@ 0x1d2f
   1fb74:	fb02 cc04 	mla	ip, r2, r4, ip
                    gray >>= 16; // scale down to int8_t
   1fb78:	ea4f 432c 	mov.w	r3, ip, asr #16
   1fb7c:	ee07 3a90 	vmov	s15, r3
                    gray += zero_point;
   1fb80:	ed9f 7a9e 	vldr	s14, [pc, #632]	@ 1fdfc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3e8>
   1fb84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1fb88:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1fb8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   1fb90:	ee17 2a90 	vmov	r2, s15
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(gray);
   1fb94:	f302 0207 	ssat	r2, #8, r2
   1fb98:	b252      	sxtb	r2, r2
        for (size_t jx = 0; jx < elements_to_read; jx++) {
   1fb9a:	f10a 0a01 	add.w	sl, sl, #1
   1fb9e:	4556      	cmp	r6, sl
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(gray);
   1fba0:	f889 2000 	strb.w	r2, [r9]
   1fba4:	463a      	mov	r2, r7
        for (size_t jx = 0; jx < elements_to_read; jx++) {
   1fba6:	d955      	bls.n	1fc54 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x240>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
   1fba8:	ecf5 7a01 	vldmia	r5!, {s15}
            if (channel_count == 3) {
   1fbac:	9b08      	ldr	r3, [sp, #32]
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
   1fbae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
            if (channel_count == 3) {
   1fbb2:	2b03      	cmp	r3, #3
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
   1fbb4:	ee17 4a90 	vmov	r4, s15
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
   1fbb8:	f102 0701 	add.w	r7, r2, #1
                    int32_t r = static_cast<int32_t>(pixel >> 16 & 0xff);
   1fbbc:	f3c4 4e07 	ubfx	lr, r4, #16, #8
                    int32_t g = static_cast<int32_t>(pixel >> 8 & 0xff);
   1fbc0:	f3c4 2c07 	ubfx	ip, r4, #8, #8
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
   1fbc4:	eb0b 0902 	add.w	r9, fp, r2
                    int32_t b = static_cast<int32_t>(pixel & 0xff);
   1fbc8:	b2e4      	uxtb	r4, r4
            if (channel_count == 3) {
   1fbca:	d1b9      	bne.n	1fb40 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x12c>
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
   1fbcc:	ee07 ea90 	vmov	s15, lr
   1fbd0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
   1fbd4:	ee07 ca90 	vmov	s15, ip
                if (scale == 0.003921568859368563f && zero_point == -128 && image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
   1fbd8:	eef4 9a6c 	vcmp.f32	s19, s25
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
   1fbdc:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + zero_point);
   1fbe0:	ee07 4a90 	vmov	s15, r4
                if (scale == 0.003921568859368563f && zero_point == -128 && image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
   1fbe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + zero_point);
   1fbe8:	eeb8 cae7 	vcvt.f32.s32	s24, s15
                if (scale == 0.003921568859368563f && zero_point == -128 && image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
   1fbec:	f040 80c6 	bne.w	1fd7c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x368>
   1fbf0:	eef4 8a4a 	vcmp.f32	s17, s20
   1fbf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1fbf8:	f040 80c0 	bne.w	1fd7c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x368>
   1fbfc:	f1b8 0f00 	cmp.w	r8, #0
   1fc00:	f040 810a 	bne.w	1fe18 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x404>
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
   1fc04:	eddf 7a7d 	vldr	s15, [pc, #500]	@ 1fdfc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3e8>
   1fc08:	ee70 6a67 	vsub.f32	s13, s0, s15
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
   1fc0c:	ee38 8a67 	vsub.f32	s16, s16, s15
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + zero_point);
   1fc10:	ee3c ca67 	vsub.f32	s24, s24, s15
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
   1fc14:	eefd 7ae6 	vcvt.s32.f32	s15, s13
   1fc18:	edcd 7a07 	vstr	s15, [sp, #28]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
   1fc1c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
   1fc20:	f99d 401c 	ldrsb.w	r4, [sp, #28]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
   1fc24:	edcd 7a09 	vstr	s15, [sp, #36]	@ 0x24
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + zero_point);
   1fc28:	eefd 7acc 	vcvt.s32.f32	s15, s24
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
   1fc2c:	f99d 3024 	ldrsb.w	r3, [sp, #36]	@ 0x24
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + zero_point);
   1fc30:	edcd 7a10 	vstr	s15, [sp, #64]	@ 0x40
   1fc34:	f99d c040 	ldrsb.w	ip, [sp, #64]	@ 0x40
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
   1fc38:	930d      	str	r3, [sp, #52]	@ 0x34
        for (size_t jx = 0; jx < elements_to_read; jx++) {
   1fc3a:	f10a 0a01 	add.w	sl, sl, #1
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
   1fc3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
   1fc40:	f889 4000 	strb.w	r4, [r9]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
   1fc44:	4556      	cmp	r6, sl
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
   1fc46:	f80b 3007 	strb.w	r3, [fp, r7]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + zero_point);
   1fc4a:	f102 0203 	add.w	r2, r2, #3
   1fc4e:	f889 c002 	strb.w	ip, [r9, #2]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
   1fc52:	d8a9      	bhi.n	1fba8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x194>
   1fc54:	4645      	mov	r5, r8
   1fc56:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
   1fc5a:	4614      	mov	r4, r2
            ei_free(buffer);
   1fc5c:	980a      	ldr	r0, [sp, #40]	@ 0x28
   1fc5e:	f004 ff15 	bl	24a8c <_Z7ei_freePv>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
   1fc62:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   1fc64:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
   1fc68:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   1fc6a:	920c      	str	r2, [sp, #48]	@ 0x30
   1fc6c:	691b      	ldr	r3, [r3, #16]
   1fc6e:	429a      	cmp	r2, r3
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(v / scale) + zero_point);
                }
            }
        }

        bytes_left -= elements_to_read;
   1fc70:	eba8 0806 	sub.w	r8, r8, r6
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
   1fc74:	f4ff af34 	bcc.w	1fae0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0xcc>
   1fc78:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	@ 0x58
   1fc7c:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
    if (ret != EIDSP_OK) {
        ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
        return EI_IMPULSE_DSP_ERROR;
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
   1fc80:	f004 fec0 	bl	24a04 <_Z29ei_run_impulse_check_canceledv>
   1fc84:	1c83      	adds	r3, r0, #2
   1fc86:	4604      	mov	r4, r0
   1fc88:	d028      	beq.n	1fcdc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x2c8>
        return EI_IMPULSE_CANCELED;
    }

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
   1fc8a:	f004 febd 	bl	24a08 <_Z16ei_read_timer_usv>
   1fc8e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
   1fc90:	1ac0      	subs	r0, r0, r3
   1fc92:	9b15      	ldr	r3, [sp, #84]	@ 0x54
   1fc94:	eb61 0103 	sbc.w	r1, r1, r3
   1fc98:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
   1fc9c:	2300      	movs	r3, #0
   1fc9e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
   1fca2:	f7f9 fa5d 	bl	19160 <__aeabi_ldivmod>

    if (debug) {
   1fca6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
   1fca8:	61f8      	str	r0, [r7, #28]
    if (debug) {
   1fcaa:	2b00      	cmp	r3, #0
   1fcac:	f040 8105 	bne.w	1feba <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x4a6>
            ei_printf(" ");
        }
        ei_printf("\n");
    }

    ctx_start_us = ei_read_timer_us();
   1fcb0:	f004 feaa 	bl	24a08 <_Z16ei_read_timer_usv>
   1fcb4:	460b      	mov	r3, r1

    EI_IMPULSE_ERROR run_res = inference_tflite_run(
   1fcb6:	9911      	ldr	r1, [sp, #68]	@ 0x44
   1fcb8:	e9cd 7103 	strd	r7, r1, [sp, #12]
   1fcbc:	a930      	add	r1, sp, #192	@ 0xc0
   1fcbe:	9102      	str	r1, [sp, #8]
   1fcc0:	a938      	add	r1, sp, #224	@ 0xe0
   1fcc2:	9101      	str	r1, [sp, #4]
   1fcc4:	a928      	add	r1, sp, #160	@ 0xa0
    ctx_start_us = ei_read_timer_us();
   1fcc6:	4602      	mov	r2, r0
    EI_IMPULSE_ERROR run_res = inference_tflite_run(
   1fcc8:	9100      	str	r1, [sp, #0]
   1fcca:	4630      	mov	r0, r6
   1fccc:	4649      	mov	r1, r9
   1fcce:	f7ff fe63 	bl	1f998 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0>
        &output_scores,
        static_cast<uint8_t*>(p_tensor_arena.get()),
        result,
        debug);

    graph_config->model_reset(ei_aligned_free);
   1fcd2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
    EI_IMPULSE_ERROR run_res = inference_tflite_run(
   1fcd4:	4604      	mov	r4, r0
    graph_config->model_reset(ei_aligned_free);
   1fcd6:	68db      	ldr	r3, [r3, #12]
   1fcd8:	4847      	ldr	r0, [pc, #284]	@ (1fdf8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3e4>)
   1fcda:	4798      	blx	r3
#endif
        }
    }

    ~ei_matrix_i8() {
        if (buffer && buffer_managed_by_me) {
   1fcdc:	f1bb 0f00 	cmp.w	fp, #0
   1fce0:	d003      	beq.n	1fcea <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x2d6>
   1fce2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
   1fce4:	2b00      	cmp	r3, #0
   1fce6:	f040 80df 	bne.w	1fea8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x494>
    if (run_res != EI_IMPULSE_OK) {
        return run_res;
    }

    return EI_IMPULSE_OK;
}
   1fcea:	4620      	mov	r0, r4
   1fcec:	b041      	add	sp, #260	@ 0x104
   1fcee:	ecbd 8b0a 	vpop	{d8-d12}
   1fcf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    float r = static_cast<float>(pixel >> 16 & 0xff);
   1fcf6:	ee07 ea90 	vmov	s15, lr
                    float b = static_cast<float>(pixel & 0xff);
   1fcfa:	ee07 4a10 	vmov	s14, r4
                    float r = static_cast<float>(pixel >> 16 & 0xff);
   1fcfe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                    float g = static_cast<float>(pixel >> 8 & 0xff);
   1fd02:	ee07 ca90 	vmov	s15, ip
                    float b = static_cast<float>(pixel & 0xff);
   1fd06:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                    float g = static_cast<float>(pixel >> 8 & 0xff);
   1fd0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                    if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
   1fd0e:	f1b8 0f00 	cmp.w	r8, #0
   1fd12:	d124      	bne.n	1fd5e <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x34a>
                        r /= 255.0f;
   1fd14:	ee66 6aac 	vmul.f32	s13, s13, s25
                        g /= 255.0f;
   1fd18:	ee67 7aac 	vmul.f32	s15, s15, s25
                        b /= 255.0f;
   1fd1c:	ee27 7a2c 	vmul.f32	s14, s14, s25
                    float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
   1fd20:	ee27 0aab 	vmul.f32	s0, s15, s23
   1fd24:	eea6 0a8b 	vfma.f32	s0, s13, s22
   1fd28:	eea7 0a2a 	vfma.f32	s0, s14, s21
   1fd2c:	ee29 0a00 	vmul.f32	s0, s18, s0
   1fd30:	f005 f9fa 	bl	25128 <roundf>
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(v / scale) + zero_point);
   1fd34:	ee38 0a80 	vadd.f32	s0, s17, s0
   1fd38:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   1fd3c:	edcd 7a07 	vstr	s15, [sp, #28]
   1fd40:	f99d 201c 	ldrsb.w	r2, [sp, #28]
   1fd44:	e729      	b.n	1fb9a <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x186>
                    float r = static_cast<float>(pixel >> 16 & 0xff);
   1fd46:	ee07 ea90 	vmov	s15, lr
                    float b = static_cast<float>(pixel & 0xff);
   1fd4a:	ee07 4a10 	vmov	s14, r4
                    float r = static_cast<float>(pixel >> 16 & 0xff);
   1fd4e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                    float g = static_cast<float>(pixel >> 8 & 0xff);
   1fd52:	ee07 ca90 	vmov	s15, ip
                    float b = static_cast<float>(pixel & 0xff);
   1fd56:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                    float g = static_cast<float>(pixel >> 8 & 0xff);
   1fd5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                    else if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_TORCH) {
   1fd5e:	f1b8 0f02 	cmp.w	r8, #2
   1fd62:	d068      	beq.n	1fe36 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x422>
                    else if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_MIN128_127) {
   1fd64:	f1b8 0f04 	cmp.w	r8, #4
   1fd68:	d1da      	bne.n	1fd20 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x30c>
                        r -= 128.0f;
   1fd6a:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 1fdfc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3e8>
   1fd6e:	ee76 6ac6 	vsub.f32	s13, s13, s12
                        g -= 128.0f;
   1fd72:	ee77 7ac6 	vsub.f32	s15, s15, s12
                        b -= 128.0f;
   1fd76:	ee37 7a46 	vsub.f32	s14, s14, s12
   1fd7a:	e7d1      	b.n	1fd20 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x30c>
                    if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
   1fd7c:	f1b8 0f00 	cmp.w	r8, #0
   1fd80:	d14a      	bne.n	1fe18 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x404>
                        r /= 255.0f;
   1fd82:	ee20 0a2c 	vmul.f32	s0, s0, s25
                        g /= 255.0f;
   1fd86:	ee28 8a2c 	vmul.f32	s16, s16, s25
                        b /= 255.0f;
   1fd8a:	ee2c ca2c 	vmul.f32	s24, s24, s25
   1fd8e:	ee29 0a00 	vmul.f32	s0, s18, s0
   1fd92:	9209      	str	r2, [sp, #36]	@ 0x24
   1fd94:	f005 f9c8 	bl	25128 <roundf>
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(r / scale) + zero_point);
   1fd98:	ee78 7a80 	vadd.f32	s15, s17, s0
   1fd9c:	ee29 0a08 	vmul.f32	s0, s18, s16
   1fda0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   1fda4:	edcd 7a07 	vstr	s15, [sp, #28]
   1fda8:	f005 f9be 	bl	25128 <roundf>
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(g / scale) + zero_point);
   1fdac:	ee78 7a80 	vadd.f32	s15, s17, s0
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(r / scale) + zero_point);
   1fdb0:	f99d 401c 	ldrsb.w	r4, [sp, #28]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(g / scale) + zero_point);
   1fdb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   1fdb8:	ee29 0a0c 	vmul.f32	s0, s18, s24
   1fdbc:	edcd 7a07 	vstr	s15, [sp, #28]
   1fdc0:	f99d 301c 	ldrsb.w	r3, [sp, #28]
   1fdc4:	930d      	str	r3, [sp, #52]	@ 0x34
   1fdc6:	f005 f9af 	bl	25128 <roundf>
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(b / scale) + zero_point);
   1fdca:	ee38 0a80 	vadd.f32	s0, s17, s0
   1fdce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
   1fdd0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   1fdd4:	edcd 7a07 	vstr	s15, [sp, #28]
   1fdd8:	f99d c01c 	ldrsb.w	ip, [sp, #28]
   1fddc:	e72d      	b.n	1fc3a <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x226>
   1fdde:	bf00      	nop
   1fde0:	00043318 	.word	0x00043318
   1fde4:	3b808081 	.word	0x3b808081
   1fde8:	3f1645a2 	.word	0x3f1645a2
   1fdec:	3e991687 	.word	0x3e991687
   1fdf0:	3de978d5 	.word	0x3de978d5
   1fdf4:	c3000000 	.word	0xc3000000
   1fdf8:	0001e539 	.word	0x0001e539
   1fdfc:	43000000 	.word	0x43000000
   1fe00:	bef851ec 	.word	0xbef851ec
   1fe04:	bee978d5 	.word	0xbee978d5
   1fe08:	408bbced 	.word	0x408bbced
   1fe0c:	becfdf3b 	.word	0xbecfdf3b
   1fe10:	408edb6d 	.word	0x408edb6d
   1fe14:	408e38e4 	.word	0x408e38e4
                    else if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_TORCH) {
   1fe18:	f1b8 0f02 	cmp.w	r8, #2
   1fe1c:	d024      	beq.n	1fe68 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x454>
                    else if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_MIN128_127) {
   1fe1e:	f1b8 0f04 	cmp.w	r8, #4
   1fe22:	d1b4      	bne.n	1fd8e <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x37a>
                        r -= 128.0f;
   1fe24:	ed5f 7a0b 	vldr	s15, [pc, #-44]	@ 1fdfc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3e8>
   1fe28:	ee30 0a67 	vsub.f32	s0, s0, s15
                        g -= 128.0f;
   1fe2c:	ee38 8a67 	vsub.f32	s16, s16, s15
                        b -= 128.0f;
   1fe30:	ee3c ca67 	vsub.f32	s24, s24, s15
   1fe34:	e7ab      	b.n	1fd8e <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x37a>
                        r = (r - torch_mean[0]) / torch_std[0];
   1fe36:	ed1f 5a0e 	vldr	s10, [pc, #-56]	@ 1fe00 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3ec>
                        g = (g - torch_mean[1]) / torch_std[1];
   1fe3a:	ed5f 5a0e 	vldr	s11, [pc, #-56]	@ 1fe04 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3f0>
                        b = (b - torch_mean[2]) / torch_std[2];
   1fe3e:	ed1f 6a0d 	vldr	s12, [pc, #-52]	@ 1fe0c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3f8>
                        r = (r - torch_mean[0]) / torch_std[0];
   1fe42:	eea6 5aac 	vfma.f32	s10, s13, s25
                        g = (g - torch_mean[1]) / torch_std[1];
   1fe46:	eee7 5aac 	vfma.f32	s11, s15, s25
                        b = (b - torch_mean[2]) / torch_std[2];
   1fe4a:	eea7 6a2c 	vfma.f32	s12, s14, s25
                        r = (r - torch_mean[0]) / torch_std[0];
   1fe4e:	ed5f 6a12 	vldr	s13, [pc, #-72]	@ 1fe08 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3f4>
                        g = (g - torch_mean[1]) / torch_std[1];
   1fe52:	ed5f 7a11 	vldr	s15, [pc, #-68]	@ 1fe10 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3fc>
                        b = (b - torch_mean[2]) / torch_std[2];
   1fe56:	ed1f 7a11 	vldr	s14, [pc, #-68]	@ 1fe14 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x400>
                        r = (r - torch_mean[0]) / torch_std[0];
   1fe5a:	ee65 6a26 	vmul.f32	s13, s10, s13
                        g = (g - torch_mean[1]) / torch_std[1];
   1fe5e:	ee65 7aa7 	vmul.f32	s15, s11, s15
                        b = (b - torch_mean[2]) / torch_std[2];
   1fe62:	ee26 7a07 	vmul.f32	s14, s12, s14
   1fe66:	e75b      	b.n	1fd20 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x30c>
                        r = (r - torch_mean[0]) / torch_std[0];
   1fe68:	ed1f 6a1b 	vldr	s12, [pc, #-108]	@ 1fe00 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3ec>
                        g = (g - torch_mean[1]) / torch_std[1];
   1fe6c:	ed1f 7a1b 	vldr	s14, [pc, #-108]	@ 1fe04 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3f0>
                        b = (b - torch_mean[2]) / torch_std[2];
   1fe70:	ed5f 7a1a 	vldr	s15, [pc, #-104]	@ 1fe0c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3f8>
                        r = (r - torch_mean[0]) / torch_std[0];
   1fe74:	ed5f 6a1c 	vldr	s13, [pc, #-112]	@ 1fe08 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3f4>
                        g = (g - torch_mean[1]) / torch_std[1];
   1fe78:	eea8 7a2c 	vfma.f32	s14, s16, s25
                        b = (b - torch_mean[2]) / torch_std[2];
   1fe7c:	eeec 7a2c 	vfma.f32	s15, s24, s25
                        r = (r - torch_mean[0]) / torch_std[0];
   1fe80:	eea0 6a2c 	vfma.f32	s12, s0, s25
                        g = (g - torch_mean[1]) / torch_std[1];
   1fe84:	ed1f 8a1e 	vldr	s16, [pc, #-120]	@ 1fe10 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3fc>
                        b = (b - torch_mean[2]) / torch_std[2];
   1fe88:	ed1f ca1e 	vldr	s24, [pc, #-120]	@ 1fe14 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x400>
                        r = (r - torch_mean[0]) / torch_std[0];
   1fe8c:	ee26 0a26 	vmul.f32	s0, s12, s13
                        g = (g - torch_mean[1]) / torch_std[1];
   1fe90:	ee27 8a08 	vmul.f32	s16, s14, s16
                        b = (b - torch_mean[2]) / torch_std[2];
   1fe94:	ee27 ca8c 	vmul.f32	s24, s15, s24
   1fe98:	e779      	b.n	1fd8e <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x37a>
        ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
   1fe9a:	4920      	ldr	r1, [pc, #128]	@ (1ff1c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x508>)
   1fe9c:	4820      	ldr	r0, [pc, #128]	@ (1ff20 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x50c>)
   1fe9e:	f004 fdbb 	bl	24a18 <_Z9ei_printfPKcz>
        return EI_IMPULSE_DSP_ERROR;
   1fea2:	f06f 0404 	mvn.w	r4, #4
   1fea6:	e719      	b.n	1fcdc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x2c8>
            ei_free(buffer);
   1fea8:	4658      	mov	r0, fp
   1feaa:	f004 fdef 	bl	24a8c <_Z7ei_freePv>
}
   1feae:	4620      	mov	r0, r4
   1feb0:	b041      	add	sp, #260	@ 0x104
   1feb2:	ecbd 8b0a 	vpop	{d8-d12}
   1feb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ei_printf("Features (%d ms.): ", result->timing.dsp);
   1feba:	4601      	mov	r1, r0
   1febc:	4819      	ldr	r0, [pc, #100]	@ (1ff24 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x510>)
   1febe:	f004 fdab 	bl	24a18 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
   1fec2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
   1fec4:	b1c3      	cbz	r3, 1fef8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x4e4>
   1fec6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
            ei_printf(" ");
   1fec8:	4d17      	ldr	r5, [pc, #92]	@ (1ff28 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x514>)
   1feca:	1e5c      	subs	r4, r3, #1
   1fecc:	445c      	add	r4, fp
   1fece:	f10b 38ff 	add.w	r8, fp, #4294967295	@ 0xffffffff
            ei_printf_float((features_matrix.buffer[ix] - input.params.zero_point) * input.params.scale);
   1fed2:	f918 3f01 	ldrsb.w	r3, [r8, #1]!
   1fed6:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
   1fed8:	ed9d 0a22 	vldr	s0, [sp, #136]	@ 0x88
   1fedc:	1a9b      	subs	r3, r3, r2
   1fede:	ee07 3a90 	vmov	s15, r3
   1fee2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1fee6:	ee27 0a80 	vmul.f32	s0, s15, s0
   1feea:	f004 fdb1 	bl	24a50 <_Z15ei_printf_floatf>
            ei_printf(" ");
   1feee:	4628      	mov	r0, r5
   1fef0:	f004 fd92 	bl	24a18 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
   1fef4:	4544      	cmp	r4, r8
   1fef6:	d1ec      	bne.n	1fed2 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x4be>
        ei_printf("\n");
   1fef8:	480c      	ldr	r0, [pc, #48]	@ (1ff2c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x518>)
   1fefa:	f004 fd8d 	bl	24a18 <_Z9ei_printfPKcz>
   1fefe:	e6d7      	b.n	1fcb0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x29c>
            buffer = (int8_t*)ei_calloc(n_rows * n_cols * sizeof(int8_t), 1);
   1ff00:	4618      	mov	r0, r3
   1ff02:	2101      	movs	r1, #1
   1ff04:	f004 fdb4 	bl	24a70 <_Z9ei_callocjj>
            buffer_managed_by_me = true;
   1ff08:	2301      	movs	r3, #1
            buffer = (int8_t*)ei_calloc(n_rows * n_cols * sizeof(int8_t), 1);
   1ff0a:	4683      	mov	fp, r0
            buffer_managed_by_me = true;
   1ff0c:	9313      	str	r3, [sp, #76]	@ 0x4c
   1ff0e:	e5b8      	b.n	1fa82 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x6e>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
   1ff10:	f06f 0408 	mvn.w	r4, #8
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
	return *this;
      }

      _GLIBCXX23_CONSTEXPR
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
   1ff14:	e6e9      	b.n	1fcea <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x2d6>
	  __throw_bad_function_call();
   1ff16:	f018 f8d5 	bl	380c4 <_ZSt25__throw_bad_function_callv>
   1ff1a:	bf00      	nop
   1ff1c:	fffffc16 	.word	0xfffffc16
   1ff20:	0004347c 	.word	0x0004347c
   1ff24:	0004375c 	.word	0x0004375c
   1ff28:	00044598 	.word	0x00044598
   1ff2c:	000434b4 	.word	0x000434b4

0001ff30 <process_impulse>:
 */
extern "C" EI_IMPULSE_ERROR process_impulse(ei_impulse_handle_t *handle,
                                            signal_t *signal,
                                            ei_impulse_result_t *result,
                                            bool debug = false)
{
   1ff30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ff34:	b0a5      	sub	sp, #148	@ 0x94
   1ff36:	9103      	str	r1, [sp, #12]
   1ff38:	930e      	str	r3, [sp, #56]	@ 0x38
    if(!handle) {
   1ff3a:	2800      	cmp	r0, #0
   1ff3c:	f000 8236 	beq.w	203ac <process_impulse+0x47c>
        return EI_IMPULSE_INFERENCE_ERROR;
    }

#if (EI_CLASSIFIER_QUANTIZATION_ENABLED == 1 && (EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TFLITE || EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TENSAIFLOW || EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_ONNX_TIDL)) || EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_DRPAI
    // Shortcut for quantized image models
    ei_learning_block_t block = handle->impulse->learning_blocks[0];
   1ff40:	6905      	ldr	r5, [r0, #16]
   1ff42:	4698      	mov	r8, r3
   1ff44:	f895 3064 	ldrb.w	r3, [r5, #100]	@ 0x64
   1ff48:	3b02      	subs	r3, #2
   1ff4a:	4617      	mov	r7, r2
   1ff4c:	b2db      	uxtb	r3, r3
   1ff4e:	6daa      	ldr	r2, [r5, #88]	@ 0x58
   1ff50:	2b09      	cmp	r3, #9
   1ff52:	4604      	mov	r4, r0
   1ff54:	e9d2 0602 	ldrd	r0, r6, [r2, #8]
/**
 * Check if the current impulse could be used by 'run_classifier_image_quantized'
 */
__attribute__((unused)) static EI_IMPULSE_ERROR can_run_classifier_image_quantized(const ei_impulse_t *impulse, ei_learning_block_t block_ptr) {

    if (impulse->inferencing_engine != EI_CLASSIFIER_TFLITE
   1ff58:	d829      	bhi.n	1ffae <process_impulse+0x7e>
   1ff5a:	f240 2229 	movw	r2, #553	@ 0x229
   1ff5e:	fa22 f303 	lsr.w	r3, r2, r3
   1ff62:	07da      	lsls	r2, r3, #31
   1ff64:	d523      	bpl.n	1ffae <process_impulse+0x7e>
    {
        return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
    }

    // visual anomaly also needs to go through the normal path
    if (impulse->has_anomaly){
   1ff66:	4689      	mov	r9, r1
   1ff68:	f895 1071 	ldrb.w	r1, [r5, #113]	@ 0x71
   1ff6c:	b9f9      	cbnz	r1, 1ffae <process_impulse+0x7e>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
    }

        // Check if we have tflite graph
    if (block_ptr.infer_fn != run_nn_inference) {
   1ff6e:	4baa      	ldr	r3, [pc, #680]	@ (20218 <process_impulse+0x2e8>)
   1ff70:	4298      	cmp	r0, r3
   1ff72:	d11c      	bne.n	1ffae <process_impulse+0x7e>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
    }

    // Check if we have a quantized NN Input layer (input is always quantized for DRP-AI)
    ei_learning_block_config_tflite_graph_t *block_config = (ei_learning_block_config_tflite_graph_t*)block_ptr.config;
    if (block_config->quantized != 1) {
   1ff74:	7d33      	ldrb	r3, [r6, #20]
   1ff76:	b1d3      	cbz	r3, 1ffae <process_impulse+0x7e>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
    }

    // And if we have one DSP block which operates on images...
    if (impulse->dsp_blocks_size != 1 || impulse->dsp_blocks[0].extract_fn != extract_image_features) {
   1ff78:	f895 303c 	ldrb.w	r3, [r5, #60]	@ 0x3c
   1ff7c:	2b01      	cmp	r3, #1
   1ff7e:	d116      	bne.n	1ffae <process_impulse+0x7e>
   1ff80:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
   1ff82:	689a      	ldr	r2, [r3, #8]
   1ff84:	4ba5      	ldr	r3, [pc, #660]	@ (2021c <process_impulse+0x2ec>)
   1ff86:	429a      	cmp	r2, r3
   1ff88:	d111      	bne.n	1ffae <process_impulse+0x7e>
    const ei_impulse_t *impulse,
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
    memset(result, 0, sizeof(ei_impulse_result_t));
   1ff8a:	2248      	movs	r2, #72	@ 0x48
   1ff8c:	4638      	mov	r0, r7
   1ff8e:	f006 ffa5 	bl	26edc <memset>

    return run_nn_inference_image_quantized(impulse, signal, result, impulse->learning_blocks[0].config, debug);
   1ff92:	6dab      	ldr	r3, [r5, #88]	@ 0x58
   1ff94:	463a      	mov	r2, r7
   1ff96:	68db      	ldr	r3, [r3, #12]
   1ff98:	f8cd 8000 	str.w	r8, [sp]
   1ff9c:	4649      	mov	r1, r9
   1ff9e:	4628      	mov	r0, r5
   1ffa0:	f7ff fd38 	bl	1fa14 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb>
   1ffa4:	4683      	mov	fp, r0
}
   1ffa6:	4658      	mov	r0, fp
   1ffa8:	b025      	add	sp, #148	@ 0x94
   1ffaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memset(result, 0, sizeof(ei_impulse_result_t));
   1ffae:	2100      	movs	r1, #0
   1ffb0:	2248      	movs	r2, #72	@ 0x48
   1ffb2:	4638      	mov	r0, r7
   1ffb4:	f006 ff92 	bl	26edc <memset>
    uint32_t block_num = handle->impulse->dsp_blocks_size + handle->impulse->learning_blocks_size;
   1ffb8:	6923      	ldr	r3, [r4, #16]
   1ffba:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
   1ffbe:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
   1ffc2:	18d6      	adds	r6, r2, r3
    std::unique_ptr<ei_feature_t[]> features_ptr(new ei_feature_t[block_num]);
   1ffc4:	00f5      	lsls	r5, r6, #3
   1ffc6:	4628      	mov	r0, r5
    uint32_t block_num = handle->impulse->dsp_blocks_size + handle->impulse->learning_blocks_size;
   1ffc8:	9610      	str	r6, [sp, #64]	@ 0x40
    std::unique_ptr<ei_feature_t[]> features_ptr(new ei_feature_t[block_num]);
   1ffca:	f015 fa2d 	bl	35428 <_Znaj>
    memset(features, 0, sizeof(ei_feature_t) * block_num);
   1ffce:	462a      	mov	r2, r5
   1ffd0:	2100      	movs	r1, #0
    std::unique_ptr<ei_feature_t[]> features_ptr(new ei_feature_t[block_num]);
   1ffd2:	900c      	str	r0, [sp, #48]	@ 0x30
    memset(features, 0, sizeof(ei_feature_t) * block_num);
   1ffd4:	f006 ff82 	bl	26edc <memset>
    std::unique_ptr<ei::matrix_t> *matrix_ptrs = new std::unique_ptr<ei::matrix_t>[block_num];
   1ffd8:	1cb3      	adds	r3, r6, #2
   1ffda:	009b      	lsls	r3, r3, #2
   1ffdc:	4618      	mov	r0, r3
   1ffde:	930d      	str	r3, [sp, #52]	@ 0x34
   1ffe0:	f015 fa22 	bl	35428 <_Znaj>
   1ffe4:	2304      	movs	r3, #4
   1ffe6:	6003      	str	r3, [r0, #0]
   1ffe8:	f100 0308 	add.w	r3, r0, #8
   1ffec:	900a      	str	r0, [sp, #40]	@ 0x28
   1ffee:	6046      	str	r6, [r0, #4]
   1fff0:	930b      	str	r3, [sp, #44]	@ 0x2c
   1fff2:	b12e      	cbz	r6, 20000 <process_impulse+0xd0>

  template<size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   1fff4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
   1fff6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
   1fff8:	009a      	lsls	r2, r3, #2
   1fffa:	2100      	movs	r1, #0
   1fffc:	f006 ff6e 	bl	26edc <memset>
    uint64_t dsp_start_us = ei_read_timer_us();
   20000:	f004 fd02 	bl	24a08 <_Z16ei_read_timer_usv>
    for (size_t ix = 0; ix < handle->impulse->dsp_blocks_size; ix++) {
   20004:	6923      	ldr	r3, [r4, #16]
    uint64_t dsp_start_us = ei_read_timer_us();
   20006:	9111      	str	r1, [sp, #68]	@ 0x44
    for (size_t ix = 0; ix < handle->impulse->dsp_blocks_size; ix++) {
   20008:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
    uint64_t dsp_start_us = ei_read_timer_us();
   2000c:	4606      	mov	r6, r0
    for (size_t ix = 0; ix < handle->impulse->dsp_blocks_size; ix++) {
   2000e:	2a00      	cmp	r2, #0
   20010:	f000 809f 	beq.w	20152 <process_impulse+0x222>
   20014:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
   20016:	3204      	adds	r2, #4
   20018:	9204      	str	r2, [sp, #16]
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   2001a:	e9cd 7012 	strd	r7, r0, [sp, #72]	@ 0x48
   2001e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
   20020:	f04f 0900 	mov.w	r9, #0
   20024:	f102 0804 	add.w	r8, r2, #4
   20028:	46cb      	mov	fp, r9
        ei_model_dsp_t block = handle->impulse->dsp_blocks[ix];
   2002a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
   2002c:	ea4f 1249 	mov.w	r2, r9, lsl #5
   20030:	4611      	mov	r1, r2
   20032:	9209      	str	r2, [sp, #36]	@ 0x24
   20034:	eb03 1249 	add.w	r2, r3, r9, lsl #5
   20038:	585f      	ldr	r7, [r3, r1]
   2003a:	f8d2 a014 	ldr.w	sl, [r2, #20]
   2003e:	e9d2 5301 	ldrd	r5, r3, [r2, #4]
   20042:	9308      	str	r3, [sp, #32]
   20044:	68d3      	ldr	r3, [r2, #12]
   20046:	9307      	str	r3, [sp, #28]
   20048:	6913      	ldr	r3, [r2, #16]
   2004a:	9306      	str	r3, [sp, #24]
        matrix_ptrs[ix] = std::unique_ptr<ei::matrix_t>(new ei::matrix_t(1, block.n_output_features));
   2004c:	2010      	movs	r0, #16
        ei_model_dsp_t block = handle->impulse->dsp_blocks[ix];
   2004e:	69d3      	ldr	r3, [r2, #28]
   20050:	9305      	str	r3, [sp, #20]
        matrix_ptrs[ix] = std::unique_ptr<ei::matrix_t>(new ei::matrix_t(1, block.n_output_features));
   20052:	f015 f9e7 	bl	35424 <_Znwj>
   20056:	2101      	movs	r1, #1
   20058:	4606      	mov	r6, r0
   2005a:	00a8      	lsls	r0, r5, #2
   2005c:	f004 fd08 	bl	24a70 <_Z9ei_callocjj>
            buffer_managed_by_me = true;
   20060:	f04f 0301 	mov.w	r3, #1
   20064:	7333      	strb	r3, [r6, #12]
        rows = n_rows;
   20066:	2301      	movs	r3, #1
        cols = n_cols;
   20068:	e9c6 3501 	strd	r3, r5, [r6, #4]
      const _Dp& _M_deleter() const noexcept { return std::get<1>(_M_t); }

      _GLIBCXX23_CONSTEXPR
      void reset(pointer __p) noexcept
      {
	const pointer __old_p = _M_ptr();
   2006c:	9b04      	ldr	r3, [sp, #16]
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   2006e:	6030      	str	r0, [r6, #0]
   20070:	f853 2f04 	ldr.w	r2, [r3, #4]!
   20074:	9304      	str	r3, [sp, #16]
	_M_ptr() = __p;
   20076:	601e      	str	r6, [r3, #0]
	if (__old_p)
   20078:	b14a      	cbz	r2, 2008e <process_impulse+0x15e>
        if (buffer && buffer_managed_by_me) {
   2007a:	6810      	ldr	r0, [r2, #0]
   2007c:	b118      	cbz	r0, 20086 <process_impulse+0x156>
   2007e:	7b11      	ldrb	r1, [r2, #12]
   20080:	2900      	cmp	r1, #0
   20082:	f040 8105 	bne.w	20290 <process_impulse+0x360>
	delete __ptr;
   20086:	4610      	mov	r0, r2
   20088:	2110      	movs	r1, #16
   2008a:	f015 f9d1 	bl	35430 <_ZdlPvj>
        if (out_features_index + block.n_output_features > handle->impulse->nn_input_frame_size) {
   2008e:	6922      	ldr	r2, [r4, #16]
        features[ix].blockId = block.blockId;
   20090:	f8c8 7000 	str.w	r7, [r8]
        if (out_features_index + block.n_output_features > handle->impulse->nn_input_frame_size) {
   20094:	6991      	ldr	r1, [r2, #24]
        features[ix].matrix = matrix_ptrs[ix].get();
   20096:	f848 6c04 	str.w	r6, [r8, #-4]
        if (out_features_index + block.n_output_features > handle->impulse->nn_input_frame_size) {
   2009a:	44ab      	add	fp, r5
   2009c:	458b      	cmp	fp, r1
   2009e:	f200 8107 	bhi.w	202b0 <process_impulse+0x380>
      : _Function_base() { }
   200a2:	ad1f      	add	r5, sp, #124	@ 0x7c
   200a4:	2100      	movs	r1, #0
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count), _impulse(impulse)
   200a6:	9b06      	ldr	r3, [sp, #24]
   200a8:	60a9      	str	r1, [r5, #8]
   200aa:	931c      	str	r3, [sp, #112]	@ 0x70
   200ac:	9b03      	ldr	r3, [sp, #12]
   200ae:	931b      	str	r3, [sp, #108]	@ 0x6c
        if (this->_axes_count == _impulse->raw_samples_per_frame) {
   200b0:	6a13      	ldr	r3, [r2, #32]
   200b2:	911f      	str	r1, [sp, #124]	@ 0x7c
   200b4:	459a      	cmp	sl, r3
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count), _impulse(impulse)
   200b6:	e9cd a21d 	strd	sl, r2, [sp, #116]	@ 0x74
   200ba:	6069      	str	r1, [r5, #4]
   200bc:	9122      	str	r1, [sp, #136]	@ 0x88
        if (this->_axes_count == _impulse->raw_samples_per_frame) {
   200be:	d07d      	beq.n	201bc <process_impulse+0x28c>
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   200c0:	4857      	ldr	r0, [pc, #348]	@ (20220 <process_impulse+0x2f0>)
	: _Function_base()
   200c2:	9118      	str	r1, [sp, #96]	@ 0x60
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   200c4:	a91b      	add	r1, sp, #108	@ 0x6c
      __b = _GLIBCXX_MOVE(__tmp);
   200c6:	9021      	str	r0, [sp, #132]	@ 0x84
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   200c8:	9117      	str	r1, [sp, #92]	@ 0x5c
      __b = _GLIBCXX_MOVE(__tmp);
   200ca:	4856      	ldr	r0, [pc, #344]	@ (20224 <process_impulse+0x2f4>)
   200cc:	9022      	str	r0, [sp, #136]	@ 0x88
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   200ce:	a917      	add	r1, sp, #92	@ 0x5c
   200d0:	c903      	ldmia	r1, {r0, r1}
   200d2:	af15      	add	r7, sp, #84	@ 0x54
   200d4:	e887 0003 	stmia.w	r7, {r0, r1}
        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
   200d8:	9903      	ldr	r1, [sp, #12]
   200da:	6909      	ldr	r1, [r1, #16]
   200dc:	fbb1 f1f3 	udiv	r1, r1, r3
   200e0:	fb0a f101 	mul.w	r1, sl, r1
   200e4:	9123      	str	r1, [sp, #140]	@ 0x8c
      __b = _GLIBCXX_MOVE(__tmp);
   200e6:	e897 0003 	ldmia.w	r7, {r0, r1}
        if (block.factory) { // ie, if we're using state
   200ea:	9b05      	ldr	r3, [sp, #20]
   200ec:	e885 0003 	stmia.w	r5, {r0, r1}
        return &wrapped_signal;
   200f0:	462f      	mov	r7, r5
   200f2:	2b00      	cmp	r3, #0
   200f4:	d066      	beq.n	201c4 <process_impulse+0x294>
            if (!has_printed) {
   200f6:	4e4c      	ldr	r6, [pc, #304]	@ (20228 <process_impulse+0x2f8>)
   200f8:	7833      	ldrb	r3, [r6, #0]
   200fa:	2b00      	cmp	r3, #0
   200fc:	f000 8098 	beq.w	20230 <process_impulse+0x300>
            dsp_handles[ix] = nullptr;
        }
    }

    DspHandle* get_dsp_handle(size_t ix) {
        if (dsp_handles[ix] == nullptr) {
   20100:	68a6      	ldr	r6, [r4, #8]
   20102:	f856 0029 	ldr.w	r0, [r6, r9, lsl #2]
   20106:	2800      	cmp	r0, #0
   20108:	f000 80a2 	beq.w	20250 <process_impulse+0x320>
                ret = dsp_handle->extract(internal_signal, features[ix].matrix, block.config, handle->impulse->frequency);
   2010c:	6922      	ldr	r2, [r4, #16]
   2010e:	9b07      	ldr	r3, [sp, #28]
   20110:	ed92 0a0e 	vldr	s0, [r2, #56]	@ 0x38
   20114:	6802      	ldr	r2, [r0, #0]
   20116:	4639      	mov	r1, r7
   20118:	6856      	ldr	r6, [r2, #4]
   2011a:	f858 2c04 	ldr.w	r2, [r8, #-4]
   2011e:	47b0      	blx	r6
        if (ret != EIDSP_OK) {
   20120:	2800      	cmp	r0, #0
   20122:	d158      	bne.n	201d6 <process_impulse+0x2a6>
        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
   20124:	f004 fc6e 	bl	24a04 <_Z29ei_run_impulse_check_canceledv>
   20128:	1c83      	adds	r3, r0, #2
   2012a:	f000 80ed 	beq.w	20308 <process_impulse+0x3d8>
      if (_M_manager)
   2012e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
   20130:	b11b      	cbz	r3, 2013a <process_impulse+0x20a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   20132:	2203      	movs	r2, #3
   20134:	4629      	mov	r1, r5
   20136:	4628      	mov	r0, r5
   20138:	4798      	blx	r3
    for (size_t ix = 0; ix < handle->impulse->dsp_blocks_size; ix++) {
   2013a:	6923      	ldr	r3, [r4, #16]
   2013c:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
   20140:	f109 0901 	add.w	r9, r9, #1
   20144:	454a      	cmp	r2, r9
   20146:	f108 0808 	add.w	r8, r8, #8
   2014a:	f63f af6e 	bhi.w	2002a <process_impulse+0xfa>
   2014e:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	@ 0x48
    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
   20152:	f004 fc59 	bl	24a08 <_Z16ei_read_timer_usv>
   20156:	9b11      	ldr	r3, [sp, #68]	@ 0x44
   20158:	1b80      	subs	r0, r0, r6
   2015a:	eb61 0103 	sbc.w	r1, r1, r3
   2015e:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
   20162:	2300      	movs	r3, #0
   20164:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
   20168:	f7f8 fffa 	bl	19160 <__aeabi_ldivmod>
    if (debug) {
   2016c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
   2016e:	61f8      	str	r0, [r7, #28]
    if (debug) {
   20170:	2b00      	cmp	r3, #0
   20172:	f040 80ea 	bne.w	2034a <process_impulse+0x41a>
    EI_IMPULSE_ERROR res = run_inference(handle, features, result, debug);
   20176:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   20178:	990c      	ldr	r1, [sp, #48]	@ 0x30
   2017a:	463a      	mov	r2, r7
   2017c:	4620      	mov	r0, r4
   2017e:	f7fe fd8d 	bl	1ec9c <run_inference>
    delete[] matrix_ptrs;
   20182:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   20184:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
   20186:	eb03 0a02 	add.w	sl, r3, r2
   2018a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   2018c:	4553      	cmp	r3, sl
   2018e:	f000 8084 	beq.w	2029a <process_impulse+0x36a>
   20192:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
   20194:	e005      	b.n	201a2 <process_impulse+0x272>
   20196:	2110      	movs	r1, #16
   20198:	4628      	mov	r0, r5
   2019a:	f015 f949 	bl	35430 <_ZdlPvj>
   2019e:	4556      	cmp	r6, sl
   201a0:	d07b      	beq.n	2029a <process_impulse+0x36a>
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   201a2:	f85a 5d04 	ldr.w	r5, [sl, #-4]!
   201a6:	2d00      	cmp	r5, #0
   201a8:	d0f9      	beq.n	2019e <process_impulse+0x26e>
   201aa:	6828      	ldr	r0, [r5, #0]
   201ac:	2800      	cmp	r0, #0
   201ae:	d0f2      	beq.n	20196 <process_impulse+0x266>
   201b0:	7b2b      	ldrb	r3, [r5, #12]
   201b2:	2b00      	cmp	r3, #0
   201b4:	d0ef      	beq.n	20196 <process_impulse+0x266>
            ei_free(buffer);
   201b6:	f004 fc69 	bl	24a8c <_Z7ei_freePv>
   201ba:	e7ec      	b.n	20196 <process_impulse+0x266>
        if (block.factory) { // ie, if we're using state
   201bc:	9b05      	ldr	r3, [sp, #20]
            return this->_original_signal;
   201be:	9f03      	ldr	r7, [sp, #12]
   201c0:	2b00      	cmp	r3, #0
   201c2:	d198      	bne.n	200f6 <process_impulse+0x1c6>
            ret = block.extract_fn(internal_signal, features[ix].matrix, block.config, handle->impulse->frequency);
   201c4:	ed92 0a0e 	vldr	s0, [r2, #56]	@ 0x38
   201c8:	9b08      	ldr	r3, [sp, #32]
   201ca:	9a07      	ldr	r2, [sp, #28]
   201cc:	4631      	mov	r1, r6
   201ce:	4638      	mov	r0, r7
   201d0:	4798      	blx	r3
        if (ret != EIDSP_OK) {
   201d2:	2800      	cmp	r0, #0
   201d4:	d0a6      	beq.n	20124 <process_impulse+0x1f4>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
   201d6:	4601      	mov	r1, r0
   201d8:	4814      	ldr	r0, [pc, #80]	@ (2022c <process_impulse+0x2fc>)
   201da:	f004 fc1d 	bl	24a18 <_Z9ei_printfPKcz>
            delete[] matrix_ptrs;
   201de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   201e0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
   201e2:	189f      	adds	r7, r3, r2
   201e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   201e6:	42bb      	cmp	r3, r7
   201e8:	f000 8087 	beq.w	202fa <process_impulse+0x3ca>
   201ec:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
   201ee:	e005      	b.n	201fc <process_impulse+0x2cc>
	delete __ptr;
   201f0:	2110      	movs	r1, #16
   201f2:	4620      	mov	r0, r4
   201f4:	f015 f91c 	bl	35430 <_ZdlPvj>
   201f8:	42be      	cmp	r6, r7
   201fa:	d07e      	beq.n	202fa <process_impulse+0x3ca>
	if (__ptr != nullptr)
   201fc:	f857 4d04 	ldr.w	r4, [r7, #-4]!
   20200:	2c00      	cmp	r4, #0
   20202:	d0f9      	beq.n	201f8 <process_impulse+0x2c8>
        if (buffer && buffer_managed_by_me) {
   20204:	6820      	ldr	r0, [r4, #0]
   20206:	2800      	cmp	r0, #0
   20208:	d0f2      	beq.n	201f0 <process_impulse+0x2c0>
   2020a:	7b23      	ldrb	r3, [r4, #12]
   2020c:	2b00      	cmp	r3, #0
   2020e:	d0ef      	beq.n	201f0 <process_impulse+0x2c0>
            ei_free(buffer);
   20210:	f004 fc3c 	bl	24a8c <_Z7ei_freePv>
   20214:	e7ec      	b.n	201f0 <process_impulse+0x2c0>
   20216:	bf00      	nop
   20218:	00020719 	.word	0x00020719
   2021c:	0001e8e9 	.word	0x0001e8e9
   20220:	0001e611 	.word	0x0001e611
   20224:	0001e775 	.word	0x0001e775
   20228:	10015cd0 	.word	0x10015cd0
   2022c:	0004347c 	.word	0x0004347c
                EI_LOGI("Impulse maintains state. Call run_classifier_init() to reset state (e.g. if data stream is interrupted.)\n");
   20230:	4960      	ldr	r1, [pc, #384]	@ (203b4 <process_impulse+0x484>)
   20232:	4861      	ldr	r0, [pc, #388]	@ (203b8 <process_impulse+0x488>)
   20234:	f004 fbf0 	bl	24a18 <_Z9ei_printfPKcz>
   20238:	4860      	ldr	r0, [pc, #384]	@ (203bc <process_impulse+0x48c>)
   2023a:	f004 fbed 	bl	24a18 <_Z9ei_printfPKcz>
                has_printed = true;
   2023e:	f04f 0301 	mov.w	r3, #1
   20242:	7033      	strb	r3, [r6, #0]
   20244:	68a6      	ldr	r6, [r4, #8]
   20246:	f856 0029 	ldr.w	r0, [r6, r9, lsl #2]
   2024a:	2800      	cmp	r0, #0
   2024c:	f47f af5e 	bne.w	2010c <process_impulse+0x1dc>
            dsp_handles[ix] = impulse->dsp_blocks[ix].factory(impulse->dsp_blocks[ix].config, impulse->frequency);
   20250:	6863      	ldr	r3, [r4, #4]
   20252:	9a09      	ldr	r2, [sp, #36]	@ 0x24
   20254:	ed93 0a0e 	vldr	s0, [r3, #56]	@ 0x38
   20258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
   2025a:	4413      	add	r3, r2
   2025c:	69da      	ldr	r2, [r3, #28]
   2025e:	68d8      	ldr	r0, [r3, #12]
   20260:	4790      	blx	r2
        }
        return dsp_handles[ix];
   20262:	68a3      	ldr	r3, [r4, #8]
            dsp_handles[ix] = impulse->dsp_blocks[ix].factory(impulse->dsp_blocks[ix].config, impulse->frequency);
   20264:	f846 0029 	str.w	r0, [r6, r9, lsl #2]
        return dsp_handles[ix];
   20268:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
            if(dsp_handle) {
   2026c:	2800      	cmp	r0, #0
   2026e:	f47f af4d 	bne.w	2010c <process_impulse+0x1dc>
                return EI_IMPULSE_OUT_OF_MEMORY;
   20272:	f06f 0b0a 	mvn.w	fp, #10
      if (_M_manager)
   20276:	9c21      	ldr	r4, [sp, #132]	@ 0x84
   20278:	b11c      	cbz	r4, 20282 <process_impulse+0x352>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   2027a:	2203      	movs	r2, #3
   2027c:	4629      	mov	r1, r5
   2027e:	4628      	mov	r0, r5
   20280:	47a0      	blx	r4
	  delete [] __ptr;
   20282:	980c      	ldr	r0, [sp, #48]	@ 0x30
   20284:	f015 f8d6 	bl	35434 <_ZdaPv>
}
   20288:	4658      	mov	r0, fp
   2028a:	b025      	add	sp, #148	@ 0x94
   2028c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20290:	920f      	str	r2, [sp, #60]	@ 0x3c
   20292:	f004 fbfb 	bl	24a8c <_Z7ei_freePv>
   20296:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
   20298:	e6f5      	b.n	20086 <process_impulse+0x156>
    delete[] matrix_ptrs;
   2029a:	990d      	ldr	r1, [sp, #52]	@ 0x34
   2029c:	980a      	ldr	r0, [sp, #40]	@ 0x28
   2029e:	f015 f8cb 	bl	35438 <_ZdaPvj>
    res = run_postprocessing(handle, result, debug);
   202a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
   202a4:	4639      	mov	r1, r7
   202a6:	4620      	mov	r0, r4
   202a8:	f7fe fbc8 	bl	1ea3c <run_postprocessing>
   202ac:	4683      	mov	fp, r0
    return res;
   202ae:	e7e8      	b.n	20282 <process_impulse+0x352>
            ei_printf("ERR: Would write outside feature buffer\n");
   202b0:	4843      	ldr	r0, [pc, #268]	@ (203c0 <process_impulse+0x490>)
   202b2:	f004 fbb1 	bl	24a18 <_Z9ei_printfPKcz>
            delete[] matrix_ptrs;
   202b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   202b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
   202ba:	189d      	adds	r5, r3, r2
   202bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   202be:	42ab      	cmp	r3, r5
   202c0:	d014      	beq.n	202ec <process_impulse+0x3bc>
   202c2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
   202c4:	e005      	b.n	202d2 <process_impulse+0x3a2>
	delete __ptr;
   202c6:	2110      	movs	r1, #16
   202c8:	4620      	mov	r0, r4
   202ca:	f015 f8b1 	bl	35430 <_ZdlPvj>
   202ce:	42ae      	cmp	r6, r5
   202d0:	d00c      	beq.n	202ec <process_impulse+0x3bc>
	if (__ptr != nullptr)
   202d2:	f855 4d04 	ldr.w	r4, [r5, #-4]!
   202d6:	2c00      	cmp	r4, #0
   202d8:	d0f9      	beq.n	202ce <process_impulse+0x39e>
        if (buffer && buffer_managed_by_me) {
   202da:	6820      	ldr	r0, [r4, #0]
   202dc:	2800      	cmp	r0, #0
   202de:	d0f2      	beq.n	202c6 <process_impulse+0x396>
   202e0:	7b23      	ldrb	r3, [r4, #12]
   202e2:	2b00      	cmp	r3, #0
   202e4:	d0ef      	beq.n	202c6 <process_impulse+0x396>
            ei_free(buffer);
   202e6:	f004 fbd1 	bl	24a8c <_Z7ei_freePv>
   202ea:	e7ec      	b.n	202c6 <process_impulse+0x396>
   202ec:	990d      	ldr	r1, [sp, #52]	@ 0x34
   202ee:	980a      	ldr	r0, [sp, #40]	@ 0x28
   202f0:	f015 f8a2 	bl	35438 <_ZdaPvj>
            return EI_IMPULSE_DSP_ERROR;
   202f4:	f06f 0b04 	mvn.w	fp, #4
   202f8:	e7c3      	b.n	20282 <process_impulse+0x352>
            delete[] matrix_ptrs;
   202fa:	990d      	ldr	r1, [sp, #52]	@ 0x34
   202fc:	980a      	ldr	r0, [sp, #40]	@ 0x28
   202fe:	f015 f89b 	bl	35438 <_ZdaPvj>
            return EI_IMPULSE_DSP_ERROR;
   20302:	f06f 0b04 	mvn.w	fp, #4
   20306:	e7b6      	b.n	20276 <process_impulse+0x346>
            delete[] matrix_ptrs;
   20308:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   2030a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
   2030c:	189f      	adds	r7, r3, r2
   2030e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   20310:	42bb      	cmp	r3, r7
   20312:	4683      	mov	fp, r0
   20314:	d014      	beq.n	20340 <process_impulse+0x410>
   20316:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
   20318:	e005      	b.n	20326 <process_impulse+0x3f6>
	delete __ptr;
   2031a:	2110      	movs	r1, #16
   2031c:	4620      	mov	r0, r4
   2031e:	f015 f887 	bl	35430 <_ZdlPvj>
   20322:	42be      	cmp	r6, r7
   20324:	d00c      	beq.n	20340 <process_impulse+0x410>
	if (__ptr != nullptr)
   20326:	f857 4d04 	ldr.w	r4, [r7, #-4]!
   2032a:	2c00      	cmp	r4, #0
   2032c:	d0f9      	beq.n	20322 <process_impulse+0x3f2>
        if (buffer && buffer_managed_by_me) {
   2032e:	6820      	ldr	r0, [r4, #0]
   20330:	2800      	cmp	r0, #0
   20332:	d0f2      	beq.n	2031a <process_impulse+0x3ea>
   20334:	7b23      	ldrb	r3, [r4, #12]
   20336:	2b00      	cmp	r3, #0
   20338:	d0ef      	beq.n	2031a <process_impulse+0x3ea>
            ei_free(buffer);
   2033a:	f004 fba7 	bl	24a8c <_Z7ei_freePv>
   2033e:	e7ec      	b.n	2031a <process_impulse+0x3ea>
   20340:	990d      	ldr	r1, [sp, #52]	@ 0x34
   20342:	980a      	ldr	r0, [sp, #40]	@ 0x28
   20344:	f015 f878 	bl	35438 <_ZdaPvj>
            return EI_IMPULSE_CANCELED;
   20348:	e795      	b.n	20276 <process_impulse+0x346>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
   2034a:	4601      	mov	r1, r0
   2034c:	481d      	ldr	r0, [pc, #116]	@ (203c4 <process_impulse+0x494>)
   2034e:	f004 fb63 	bl	24a18 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < block_num; ix++) {
   20352:	9b10      	ldr	r3, [sp, #64]	@ 0x40
   20354:	b333      	cbz	r3, 203a4 <process_impulse+0x474>
                ei_printf(" ");
   20356:	4d1c      	ldr	r5, [pc, #112]	@ (203c8 <process_impulse+0x498>)
            ei_printf("\n");
   20358:	4e1c      	ldr	r6, [pc, #112]	@ (203cc <process_impulse+0x49c>)
        for (size_t ix = 0; ix < block_num; ix++) {
   2035a:	f8dd a040 	ldr.w	sl, [sp, #64]	@ 0x40
   2035e:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
   20362:	f04f 0b00 	mov.w	fp, #0
            if (features[ix].matrix == nullptr) {
   20366:	f859 303b 	ldr.w	r3, [r9, fp, lsl #3]
   2036a:	b1bb      	cbz	r3, 2039c <process_impulse+0x46c>
            for (size_t jx = 0; jx < features[ix].matrix->cols; jx++) {
   2036c:	689a      	ldr	r2, [r3, #8]
   2036e:	f04f 0800 	mov.w	r8, #0
   20372:	b182      	cbz	r2, 20396 <process_impulse+0x466>
                ei_printf_float(features[ix].matrix->buffer[jx]);
   20374:	681b      	ldr	r3, [r3, #0]
   20376:	eb03 0388 	add.w	r3, r3, r8, lsl #2
   2037a:	ed93 0a00 	vldr	s0, [r3]
   2037e:	f004 fb67 	bl	24a50 <_Z15ei_printf_floatf>
                ei_printf(" ");
   20382:	4628      	mov	r0, r5
   20384:	f004 fb48 	bl	24a18 <_Z9ei_printfPKcz>
            for (size_t jx = 0; jx < features[ix].matrix->cols; jx++) {
   20388:	f859 303b 	ldr.w	r3, [r9, fp, lsl #3]
   2038c:	689a      	ldr	r2, [r3, #8]
   2038e:	f108 0801 	add.w	r8, r8, #1
   20392:	4542      	cmp	r2, r8
   20394:	d8ee      	bhi.n	20374 <process_impulse+0x444>
            ei_printf("\n");
   20396:	4630      	mov	r0, r6
   20398:	f004 fb3e 	bl	24a18 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < block_num; ix++) {
   2039c:	f10b 0b01 	add.w	fp, fp, #1
   203a0:	45da      	cmp	sl, fp
   203a2:	d1e0      	bne.n	20366 <process_impulse+0x436>
        ei_printf("Running impulse...\n");
   203a4:	480a      	ldr	r0, [pc, #40]	@ (203d0 <process_impulse+0x4a0>)
   203a6:	f004 fb37 	bl	24a18 <_Z9ei_printfPKcz>
   203aa:	e6e4      	b.n	20176 <process_impulse+0x246>
        return EI_IMPULSE_INFERENCE_ERROR;
   203ac:	f06f 0b15 	mvn.w	fp, #21
   203b0:	e5f9      	b.n	1ffa6 <process_impulse+0x76>
   203b2:	bf00      	nop
   203b4:	00043770 	.word	0x00043770
   203b8:	00043778 	.word	0x00043778
   203bc:	00043780 	.word	0x00043780
   203c0:	00043404 	.word	0x00043404
   203c4:	0004375c 	.word	0x0004375c
   203c8:	00044598 	.word	0x00044598
   203cc:	000434b4 	.word	0x000434b4
   203d0:	000434b8 	.word	0x000434b8

000203d4 <main>:

int main(void) {
   203d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // int err;
    ns_core_config_t ns_core_cfg = {.api = &ns_core_V1_0_0};
   203d8:	4aa9      	ldr	r2, [pc, #676]	@ (20680 <main+0x2ac>)
int main(void) {
   203da:	b0a1      	sub	sp, #132	@ 0x84
    usb_handle_t usb_handle = NULL;
   203dc:	2300      	movs	r3, #0

    // Power configuration (mem, cache, peripherals, clock)
    NS_TRY(ns_core_init(&ns_core_cfg), "Core init failed.\n");
   203de:	a805      	add	r0, sp, #20
    usb_handle_t usb_handle = NULL;
   203e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
    NS_TRY(ns_core_init(&ns_core_cfg), "Core init failed.\n");
   203e4:	f7f9 f942 	bl	1966c <ns_core_init>
   203e8:	2800      	cmp	r0, #0
   203ea:	f040 812a 	bne.w	20642 <main+0x26e>
    NS_TRY(ns_power_config(&ns_pwr_config), "Power config failed.\n");
   203ee:	48a5      	ldr	r0, [pc, #660]	@ (20684 <main+0x2b0>)
   203f0:	f00b fdf2 	bl	2bfd8 <ns_power_config>
   203f4:	2800      	cmp	r0, #0
   203f6:	f040 813c 	bne.w	20672 <main+0x29e>
    am_hal_pwrctrl_mcu_mode_select(AM_HAL_PWRCTRL_MCU_MODE_HIGH_PERFORMANCE);

    ns_itm_printf_enable();
    ns_interrupt_master_enable();

    elapsedTime = 0;
   203fa:	4ca3      	ldr	r4, [pc, #652]	@ (20688 <main+0x2b4>)
    am_hal_pwrctrl_mcu_mode_select(AM_HAL_PWRCTRL_MCU_MODE_HIGH_PERFORMANCE);
   203fc:	2002      	movs	r0, #2
   203fe:	f016 f857 	bl	364b0 <am_hal_pwrctrl_mcu_mode_select>
    ns_itm_printf_enable();
   20402:	f00b fd81 	bl	2bf08 <ns_itm_printf_enable>
    ns_interrupt_master_enable();
   20406:	f015 fecf 	bl	361a8 <am_hal_interrupt_master_enable>
    elapsedTime = 0;
   2040a:	2300      	movs	r3, #0
    NS_TRY(ns_timer_init(&ei_tickTimer), "Timer Init Failed\n");
   2040c:	489f      	ldr	r0, [pc, #636]	@ (2068c <main+0x2b8>)
    elapsedTime = 0;
   2040e:	6023      	str	r3, [r4, #0]
    NS_TRY(ns_timer_init(&ei_tickTimer), "Timer Init Failed\n");
   20410:	f00c f840 	bl	2c494 <ns_timer_init>
   20414:	2800      	cmp	r0, #0
   20416:	f040 8126 	bne.w	20666 <main+0x292>

    // NS_TRY(ns_peripheral_button_init(&button_config), "Button Init Failed\n");

    // WebUSB Setup
    webusb_register_raw_cb(msgReceived, NULL);
   2041a:	489d      	ldr	r0, [pc, #628]	@ (20690 <main+0x2bc>)
   2041c:	2100      	movs	r1, #0
   2041e:	f00b fd6d 	bl	2befc <webusb_register_raw_cb>
    webUsbConfig.rx_buffer = my_rx_ff_buf;
   20422:	489c      	ldr	r0, [pc, #624]	@ (20694 <main+0x2c0>)
   20424:	499c      	ldr	r1, [pc, #624]	@ (20698 <main+0x2c4>)
    webUsbConfig.rx_bufferLength = MY_RX_BUFSIZE;
    webUsbConfig.tx_buffer = my_tx_ff_buf;
   20426:	4a9d      	ldr	r2, [pc, #628]	@ (2069c <main+0x2c8>)
    webUsbConfig.rx_buffer = my_rx_ff_buf;
   20428:	6081      	str	r1, [r0, #8]
    webUsbConfig.rx_bufferLength = MY_RX_BUFSIZE;
   2042a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
    webUsbConfig.tx_bufferLength = MY_TX_BUFSIZE;
    NS_TRY(ns_usb_init(&webUsbConfig, &usb_handle), "USB Init Failed\n");
   2042e:	a906      	add	r1, sp, #24
    webUsbConfig.rx_bufferLength = MY_RX_BUFSIZE;
   20430:	8183      	strh	r3, [r0, #12]
    webUsbConfig.tx_buffer = my_tx_ff_buf;
   20432:	6102      	str	r2, [r0, #16]
    webUsbConfig.tx_bufferLength = MY_TX_BUFSIZE;
   20434:	8283      	strh	r3, [r0, #20]
    NS_TRY(ns_usb_init(&webUsbConfig, &usb_handle), "USB Init Failed\n");
   20436:	f010 ffed 	bl	31414 <ns_usb_init>
   2043a:	2800      	cmp	r0, #0
   2043c:	f040 810d 	bne.w	2065a <main+0x286>
    ns_lp_printf("USB Init Success\n");
   20440:	4897      	ldr	r0, [pc, #604]	@ (206a0 <main+0x2cc>)
   20442:	f00b fd91 	bl	2bf68 <ns_lp_printf>

    // Camera Setup
    NS_TRY(ns_camera_init(&camera_config), "Camera Stop Failed\n");
   20446:	4897      	ldr	r0, [pc, #604]	@ (206a4 <main+0x2d0>)
   20448:	f00c f950 	bl	2c6ec <ns_camera_init>
   2044c:	2800      	cmp	r0, #0
   2044e:	f040 80fe 	bne.w	2064e <main+0x27a>

    ns_lp_printf("Camera Init Success\n");
    ns_stop_camera(&camera_config);
   20452:	4e94      	ldr	r6, [pc, #592]	@ (206a4 <main+0x2d0>)
    ns_lp_printf("Camera Init Success\n");
   20454:	4894      	ldr	r0, [pc, #592]	@ (206a8 <main+0x2d4>)
   20456:	f8df 92b8 	ldr.w	r9, [pc, #696]	@ 20710 <main+0x33c>
   2045a:	f8df b2b8 	ldr.w	fp, [pc, #696]	@ 20714 <main+0x340>
   2045e:	f00b fd83 	bl	2bf68 <ns_lp_printf>
    ns_stop_camera(&camera_config);
   20462:	4630      	mov	r0, r6
   20464:	f00c fa0c 	bl	2c880 <ns_stop_camera>
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
   20468:	4b90      	ldr	r3, [pc, #576]	@ (206ac <main+0x2d8>)
	: _Function_base()
   2046a:	2500      	movs	r5, #0
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
   2046c:	e9cd 350e 	strd	r3, r5, [sp, #56]	@ 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   20470:	af0e      	add	r7, sp, #56	@ 0x38
   20472:	e897 0003 	ldmia.w	r7, {r0, r1}

    // EI Init
    signal_t signal_fomo;
    
    // signal_fomo.total_length = impulse_517398_0.input_width * impulse_517398_0.input_height;
    signal_fomo.total_length = impulse_522036_0.input_width * impulse_522036_0.input_height;
   20476:	f44f 5210 	mov.w	r2, #9216	@ 0x2400
   2047a:	920d      	str	r2, [sp, #52]	@ 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   2047c:	4a8c      	ldr	r2, [pc, #560]	@ (206b0 <main+0x2dc>)
   2047e:	920b      	str	r2, [sp, #44]	@ 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   20480:	ab07      	add	r3, sp, #28
      __b = _GLIBCXX_MOVE(__tmp);
   20482:	4a8c      	ldr	r2, [pc, #560]	@ (206b4 <main+0x2e0>)
   20484:	920c      	str	r2, [sp, #48]	@ 0x30
   20486:	f10d 0a24 	add.w	sl, sp, #36	@ 0x24
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   2048a:	e883 0003 	stmia.w	r3, {r0, r1}
    signal_fomo.get_data = &ei_get_data;
    ei_impulse_result_t result_fomo = { 0 };
   2048e:	2248      	movs	r2, #72	@ 0x48
      __b = _GLIBCXX_MOVE(__tmp);
   20490:	e88a 0003 	stmia.w	sl, {r0, r1}
   20494:	4638      	mov	r0, r7
   20496:	f006 fd21 	bl	26edc <memset>
    uint32_t camLength = 0;

    ns_lp_printf("📸 TinyVision Demo\n\n");
   2049a:	4887      	ldr	r0, [pc, #540]	@ (206b8 <main+0x2e4>)
   2049c:	f00b fd64 	bl	2bf68 <ns_lp_printf>

    ns_start_camera(&camera_config);
   204a0:	4630      	mov	r0, r6
   204a2:	f00c f9cf 	bl	2c844 <ns_start_camera>
    setBrightness(&camera, CAM_BRIGHTNESS_LEVEL_DEFAULT);
   204a6:	4629      	mov	r1, r5
   204a8:	4884      	ldr	r0, [pc, #528]	@ (206bc <main+0x2e8>)
   204aa:	f00d f8bd 	bl	2d628 <setBrightness>
    setEV(&camera, CAM_EV_LEVEL_DEFAULT);
   204ae:	4629      	mov	r1, r5
   204b0:	4882      	ldr	r0, [pc, #520]	@ (206bc <main+0x2e8>)
   204b2:	f00d f8b1 	bl	2d618 <setEV>
    setContrast(&camera, CAM_CONTRAST_LEVEL_DEFAULT);
   204b6:	4629      	mov	r1, r5
   204b8:	4880      	ldr	r0, [pc, #512]	@ (206bc <main+0x2e8>)
void tic() { elapsedTime = ns_us_ticker_read(&ei_tickTimer); }
   204ba:	4d74      	ldr	r5, [pc, #464]	@ (2068c <main+0x2b8>)
    setContrast(&camera, CAM_CONTRAST_LEVEL_DEFAULT);
   204bc:	f00d f8b0 	bl	2d620 <setContrast>
    setAutoExposure(&camera, true); 
   204c0:	2101      	movs	r1, #1
   204c2:	487e      	ldr	r0, [pc, #504]	@ (206bc <main+0x2e8>)
   204c4:	f00d f89c 	bl	2d600 <setAutoExposure>
    ns_delay_us(100000);
   204c8:	487d      	ldr	r0, [pc, #500]	@ (206c0 <main+0x2ec>)
   204ca:	f017 f8c7 	bl	3765c <am_hal_delay_us>

    // Kick off camera FSM
    ns_lp_printf("pressing shutter button for picture\n");
   204ce:	487d      	ldr	r0, [pc, #500]	@ (206c4 <main+0x2f0>)
   204d0:	f00b fd4a 	bl	2bf68 <ns_lp_printf>
    camera_config.imageMode = NS_CAM_IMAGE_MODE_320X320;
   204d4:	f44f 7386 	mov.w	r3, #268	@ 0x10c
    int err = ns_press_shutter_button(cfg);
   204d8:	4630      	mov	r0, r6
    camera_config.imageMode = NS_CAM_IMAGE_MODE_320X320;
   204da:	f8a6 300d 	strh.w	r3, [r6, #13]
    int err = ns_press_shutter_button(cfg);
   204de:	f00c f9d7 	bl	2c890 <ns_press_shutter_button>
void tic() { elapsedTime = ns_us_ticker_read(&ei_tickTimer); }
   204e2:	486a      	ldr	r0, [pc, #424]	@ (2068c <main+0x2b8>)
   204e4:	4e78      	ldr	r6, [pc, #480]	@ (206c8 <main+0x2f4>)
   204e6:	f00c f887 	bl	2c5f8 <ns_us_ticker_read>
    bool bb_found;
    ei_impulse_result_bounding_box_t bb;
    bool firstTime = true;
    tic();

    uint8_t next_pic = 1;
   204ea:	f04f 0801 	mov.w	r8, #1
void tic() { elapsedTime = ns_us_ticker_read(&ei_tickTimer); }
   204ee:	6020      	str	r0, [r4, #0]
    uint8_t next_pic = 1;
   204f0:	e021      	b.n	20536 <main+0x162>
    while (1) {
        // ns_lp_printf("jpgReady1 %d, jpgReady2 %d\n", jpgReady1, jpgReady2);
        if (jpgReady1 || jpgReady2) {
            if ((jpgReady1) && (next_pic == 1)) {
   204f2:	7833      	ldrb	r3, [r6, #0]
   204f4:	b113      	cbz	r3, 204fc <main+0x128>
   204f6:	f1b8 0f01 	cmp.w	r8, #1
   204fa:	d026      	beq.n	2054a <main+0x176>
                camera_state_machine();
                // ns_lp_printf("1Called camstate again \n");  
                camera_state_machine();

                // render_image(18432, rgbBuffer1, 0); 
            } else if ((jpgReady2) && (next_pic == 2)) {
   204fc:	f899 3000 	ldrb.w	r3, [r9]
   20500:	b113      	cbz	r3, 20508 <main+0x134>
   20502:	f1b8 0f02 	cmp.w	r8, #2
   20506:	d056      	beq.n	205b6 <main+0x1e2>
void tic() { elapsedTime = ns_us_ticker_read(&ei_tickTimer); }
   20508:	4628      	mov	r0, r5
   2050a:	f00c f875 	bl	2c5f8 <ns_us_ticker_read>
    ei_impulse_handle_t *impulse,
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
    return process_impulse(impulse, signal, result, debug);
   2050e:	2300      	movs	r3, #0
   20510:	463a      	mov	r2, r7
   20512:	4651      	mov	r1, sl
   20514:	6020      	str	r0, [r4, #0]
   20516:	486d      	ldr	r0, [pc, #436]	@ (206cc <main+0x2f8>)
   20518:	f7ff fd0a 	bl	1ff30 <process_impulse>
uint32_t toc() { return ns_us_ticker_read(&ei_tickTimer) - elapsedTime; }
   2051c:	4628      	mov	r0, r5
   2051e:	f00c f86b 	bl	2c5f8 <ns_us_ticker_read>
   20522:	6823      	ldr	r3, [r4, #0]
   20524:	1ac1      	subs	r1, r0, r3
            // ns_lp_printf("Running classifier %d\n",  tud_vendor_write_available());
            // ns_lp_printf("Inference avail  %d\n",  tud_vendor_write_available());
            tic();
            err = run_classifier(&impulse_handle_522036_0, &signal_fomo, &result_fomo, debug_nn);
            inferenceTimePerFrame = toc();
            ns_lp_printf("Inference time was %d\n", inferenceTimePerFrame);
   20526:	486a      	ldr	r0, [pc, #424]	@ (206d0 <main+0x2fc>)
            inferenceTimePerFrame = toc();
   20528:	f8cb 1000 	str.w	r1, [fp]
            ns_lp_printf("Inference time was %d\n", inferenceTimePerFrame);
   2052c:	f00b fd1c 	bl	2bf68 <ns_lp_printf>
            render_result(&result_fomo);
   20530:	4638      	mov	r0, r7
   20532:	f7fe fc91 	bl	1ee58 <_Z13render_resultP19ei_impulse_result_t>
        if (jpgReady1 || jpgReady2) {
   20536:	7833      	ldrb	r3, [r6, #0]
   20538:	2b00      	cmp	r3, #0
   2053a:	d1da      	bne.n	204f2 <main+0x11e>
   2053c:	f899 3000 	ldrb.w	r3, [r9]
   20540:	2b00      	cmp	r3, #0
   20542:	d1d6      	bne.n	204f2 <main+0x11e>
            // ns_lp_printf("after render_result, toc %d\n", toc()); tic();

        } else {
            ns_deep_sleep();
   20544:	f00b fd64 	bl	2c010 <ns_deep_sleep>
   20548:	e7f5      	b.n	20536 <main+0x162>
                uint32_t my_buffer_length = chop_off_trailing_zeros(jpgBuffer1, buffer_length1); // Remove trailing zeros, calc new length
   2054a:	4b62      	ldr	r3, [pc, #392]	@ (206d4 <main+0x300>)
        if (buff[index] != 0) {
   2054c:	4a62      	ldr	r2, [pc, #392]	@ (206d8 <main+0x304>)
                uint32_t my_buffer_length = chop_off_trailing_zeros(jpgBuffer1, buffer_length1); // Remove trailing zeros, calc new length
   2054e:	6819      	ldr	r1, [r3, #0]
    for (index = length - 1; index >= 0; index--) {
   20550:	3901      	subs	r1, #1
        if (buff[index] != 0) {
   20552:	1853      	adds	r3, r2, r1
   20554:	5c52      	ldrb	r2, [r2, r1]
   20556:	b922      	cbnz	r2, 20562 <main+0x18e>
   20558:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    for (index = length - 1; index >= 0; index--) {
   2055c:	3901      	subs	r1, #1
        if (buff[index] != 0) {
   2055e:	2a00      	cmp	r2, #0
   20560:	d0fa      	beq.n	20558 <main+0x184>
    if ((index + 1) == 0) {
   20562:	1c4a      	adds	r2, r1, #1
    return index + 1;
   20564:	bf14      	ite	ne
   20566:	f101 0801 	addne.w	r8, r1, #1
        return 0;
   2056a:	f04f 0800 	moveq.w	r8, #0
                render_image(my_buffer_length, jpgBuffer1, 1);
   2056e:	495a      	ldr	r1, [pc, #360]	@ (206d8 <main+0x304>)
   20570:	4640      	mov	r0, r8
   20572:	f7fd fff7 	bl	1e564 <_ZL12render_imagemPhm.constprop.0>
void tic() { elapsedTime = ns_us_ticker_read(&ei_tickTimer); }
   20576:	4628      	mov	r0, r5
   20578:	f00c f83e 	bl	2c5f8 <ns_us_ticker_read>
                camera_decode_image(jpgBuffer1, my_buffer_length, rgbBuffer1, 96, 96, 3);
   2057c:	2360      	movs	r3, #96	@ 0x60
   2057e:	2203      	movs	r2, #3
   20580:	4641      	mov	r1, r8
   20582:	e9cd 3200 	strd	r3, r2, [sp]
void tic() { elapsedTime = ns_us_ticker_read(&ei_tickTimer); }
   20586:	6020      	str	r0, [r4, #0]
                camera_decode_image(jpgBuffer1, my_buffer_length, rgbBuffer1, 96, 96, 3);
   20588:	4a54      	ldr	r2, [pc, #336]	@ (206dc <main+0x308>)
   2058a:	4853      	ldr	r0, [pc, #332]	@ (206d8 <main+0x304>)
   2058c:	f00c fa0a 	bl	2c9a4 <camera_decode_image>
uint32_t toc() { return ns_us_ticker_read(&ei_tickTimer) - elapsedTime; }
   20590:	4628      	mov	r0, r5
   20592:	f00c f831 	bl	2c5f8 <ns_us_ticker_read>
                inferOnRgb1 = true;
   20596:	4a52      	ldr	r2, [pc, #328]	@ (206e0 <main+0x30c>)
   20598:	2301      	movs	r3, #1
   2059a:	7013      	strb	r3, [r2, #0]
uint32_t toc() { return ns_us_ticker_read(&ei_tickTimer) - elapsedTime; }
   2059c:	6823      	ldr	r3, [r4, #0]
   2059e:	1ac0      	subs	r0, r0, r3
                decodeTimePerFrame = toc();
   205a0:	4b50      	ldr	r3, [pc, #320]	@ (206e4 <main+0x310>)
   205a2:	6018      	str	r0, [r3, #0]
                jpgReady1 = false;
   205a4:	2300      	movs	r3, #0
   205a6:	7033      	strb	r3, [r6, #0]
                next_pic = 2;
   205a8:	f04f 0802 	mov.w	r8, #2
                camera_state_machine();
   205ac:	f7fe fbac 	bl	1ed08 <_Z20camera_state_machinev>
                camera_state_machine();
   205b0:	f7fe fbaa 	bl	1ed08 <_Z20camera_state_machinev>
   205b4:	e7a8      	b.n	20508 <main+0x134>
                uint32_t my_buffer_length = chop_off_trailing_zeros(jpgBuffer2, buffer_length2); // Remove trailing zeros, calc new length
   205b6:	4b4c      	ldr	r3, [pc, #304]	@ (206e8 <main+0x314>)
        if (buff[index] != 0) {
   205b8:	4a4c      	ldr	r2, [pc, #304]	@ (206ec <main+0x318>)
                uint32_t my_buffer_length = chop_off_trailing_zeros(jpgBuffer2, buffer_length2); // Remove trailing zeros, calc new length
   205ba:	6819      	ldr	r1, [r3, #0]
    for (index = length - 1; index >= 0; index--) {
   205bc:	3901      	subs	r1, #1
        if (buff[index] != 0) {
   205be:	1853      	adds	r3, r2, r1
   205c0:	5c52      	ldrb	r2, [r2, r1]
   205c2:	b922      	cbnz	r2, 205ce <main+0x1fa>
   205c4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    for (index = length - 1; index >= 0; index--) {
   205c8:	3901      	subs	r1, #1
        if (buff[index] != 0) {
   205ca:	2a00      	cmp	r2, #0
   205cc:	d0fa      	beq.n	205c4 <main+0x1f0>
    if ((index + 1) == 0) {
   205ce:	1c4b      	adds	r3, r1, #1
    return index + 1;
   205d0:	bf14      	ite	ne
   205d2:	f101 0801 	addne.w	r8, r1, #1
        return 0;
   205d6:	f04f 0800 	moveq.w	r8, #0
                render_image(my_buffer_length, jpgBuffer2, 1);
   205da:	4944      	ldr	r1, [pc, #272]	@ (206ec <main+0x318>)
   205dc:	4640      	mov	r0, r8
   205de:	f7fd ffc1 	bl	1e564 <_ZL12render_imagemPhm.constprop.0>
                ns_lp_printf("decoding image 2 final len %d buffer_length2 %d, %d\n", my_buffer_length, buffer_length2, tud_vendor_write_available());
   205e2:	4b41      	ldr	r3, [pc, #260]	@ (206e8 <main+0x314>)
   205e4:	2000      	movs	r0, #0
   205e6:	681a      	ldr	r2, [r3, #0]
   205e8:	9203      	str	r2, [sp, #12]
   205ea:	f013 fae5 	bl	33bb8 <tud_vendor_n_write_available>
   205ee:	4641      	mov	r1, r8
   205f0:	4603      	mov	r3, r0
   205f2:	9a03      	ldr	r2, [sp, #12]
   205f4:	483e      	ldr	r0, [pc, #248]	@ (206f0 <main+0x31c>)
   205f6:	f00b fcb7 	bl	2bf68 <ns_lp_printf>
void tic() { elapsedTime = ns_us_ticker_read(&ei_tickTimer); }
   205fa:	4628      	mov	r0, r5
   205fc:	f00b fffc 	bl	2c5f8 <ns_us_ticker_read>
                camera_decode_image(jpgBuffer2, my_buffer_length, rgbBuffer2, 96, 96, 3);
   20600:	2360      	movs	r3, #96	@ 0x60
   20602:	2203      	movs	r2, #3
   20604:	e9cd 3200 	strd	r3, r2, [sp]
   20608:	4641      	mov	r1, r8
   2060a:	4a3a      	ldr	r2, [pc, #232]	@ (206f4 <main+0x320>)
void tic() { elapsedTime = ns_us_ticker_read(&ei_tickTimer); }
   2060c:	6020      	str	r0, [r4, #0]
                camera_decode_image(jpgBuffer2, my_buffer_length, rgbBuffer2, 96, 96, 3);
   2060e:	4837      	ldr	r0, [pc, #220]	@ (206ec <main+0x318>)
   20610:	f00c f9c8 	bl	2c9a4 <camera_decode_image>
uint32_t toc() { return ns_us_ticker_read(&ei_tickTimer) - elapsedTime; }
   20614:	4628      	mov	r0, r5
   20616:	f00b ffef 	bl	2c5f8 <ns_us_ticker_read>
   2061a:	6823      	ldr	r3, [r4, #0]
   2061c:	4601      	mov	r1, r0
   2061e:	1ac9      	subs	r1, r1, r3
                decodeTimePerFrame = toc();
   20620:	4b30      	ldr	r3, [pc, #192]	@ (206e4 <main+0x310>)
                ns_lp_printf("decode time 2 was %d\n", decodeTimePerFrame); 
   20622:	4835      	ldr	r0, [pc, #212]	@ (206f8 <main+0x324>)
                decodeTimePerFrame = toc();
   20624:	6019      	str	r1, [r3, #0]
                ns_lp_printf("decode time 2 was %d\n", decodeTimePerFrame); 
   20626:	f00b fc9f 	bl	2bf68 <ns_lp_printf>
                inferOnRgb1 = false;
   2062a:	4a2d      	ldr	r2, [pc, #180]	@ (206e0 <main+0x30c>)
   2062c:	2300      	movs	r3, #0
   2062e:	7013      	strb	r3, [r2, #0]
                jpgReady2 = false;
   20630:	f889 3000 	strb.w	r3, [r9]
                next_pic = 1;
   20634:	f04f 0801 	mov.w	r8, #1
                camera_state_machine();
   20638:	f7fe fb66 	bl	1ed08 <_Z20camera_state_machinev>
                camera_state_machine();
   2063c:	f7fe fb64 	bl	1ed08 <_Z20camera_state_machinev>
   20640:	e762      	b.n	20508 <main+0x134>
    NS_TRY(ns_core_init(&ns_core_cfg), "Core init failed.\n");
   20642:	482e      	ldr	r0, [pc, #184]	@ (206fc <main+0x328>)
   20644:	f00b fc90 	bl	2bf68 <ns_lp_printf>
   20648:	f7f9 f838 	bl	196bc <ns_core_fail_loop>
   2064c:	e6cf      	b.n	203ee <main+0x1a>
    NS_TRY(ns_camera_init(&camera_config), "Camera Stop Failed\n");
   2064e:	482c      	ldr	r0, [pc, #176]	@ (20700 <main+0x32c>)
   20650:	f00b fc8a 	bl	2bf68 <ns_lp_printf>
   20654:	f7f9 f832 	bl	196bc <ns_core_fail_loop>
   20658:	e6fb      	b.n	20452 <main+0x7e>
    NS_TRY(ns_usb_init(&webUsbConfig, &usb_handle), "USB Init Failed\n");
   2065a:	482a      	ldr	r0, [pc, #168]	@ (20704 <main+0x330>)
   2065c:	f00b fc84 	bl	2bf68 <ns_lp_printf>
   20660:	f7f9 f82c 	bl	196bc <ns_core_fail_loop>
   20664:	e6ec      	b.n	20440 <main+0x6c>
    NS_TRY(ns_timer_init(&ei_tickTimer), "Timer Init Failed\n");
   20666:	4828      	ldr	r0, [pc, #160]	@ (20708 <main+0x334>)
   20668:	f00b fc7e 	bl	2bf68 <ns_lp_printf>
   2066c:	f7f9 f826 	bl	196bc <ns_core_fail_loop>
   20670:	e6d3      	b.n	2041a <main+0x46>
    NS_TRY(ns_power_config(&ns_pwr_config), "Power config failed.\n");
   20672:	4826      	ldr	r0, [pc, #152]	@ (2070c <main+0x338>)
   20674:	f00b fc78 	bl	2bf68 <ns_lp_printf>
   20678:	f7f9 f820 	bl	196bc <ns_core_fail_loop>
   2067c:	e6bd      	b.n	203fa <main+0x26>
   2067e:	bf00      	nop
   20680:	00043188 	.word	0x00043188
   20684:	00044b5c 	.word	0x00044b5c
   20688:	1000dcc4 	.word	0x1000dcc4
   2068c:	1000d044 	.word	0x1000d044
   20690:	0001e80d 	.word	0x0001e80d
   20694:	1000d054 	.word	0x1000d054
   20698:	10014cd0 	.word	0x10014cd0
   2069c:	10013cd0 	.word	0x10013cd0
   206a0:	00043840 	.word	0x00043840
   206a4:	1000d004 	.word	0x1000d004
   206a8:	00043868 	.word	0x00043868
   206ac:	0001e6dd 	.word	0x0001e6dd
   206b0:	0001e635 	.word	0x0001e635
   206b4:	0001e4d5 	.word	0x0001e4d5
   206b8:	00043880 	.word	0x00043880
   206bc:	10050568 	.word	0x10050568
   206c0:	000186a0 	.word	0x000186a0
   206c4:	00043898 	.word	0x00043898
   206c8:	1000dcbd 	.word	0x1000dcbd
   206cc:	10015ce4 	.word	0x10015ce4
   206d0:	00043910 	.word	0x00043910
   206d4:	1000dcb8 	.word	0x1000dcb8
   206d8:	10069000 	.word	0x10069000
   206dc:	10064800 	.word	0x10064800
   206e0:	1000d000 	.word	0x1000d000
   206e4:	1000dca8 	.word	0x1000dca8
   206e8:	1000dcb4 	.word	0x1000dcb4
   206ec:	1000dcd0 	.word	0x1000dcd0
   206f0:	000438c0 	.word	0x000438c0
   206f4:	10060000 	.word	0x10060000
   206f8:	000438f8 	.word	0x000438f8
   206fc:	000437ec 	.word	0x000437ec
   20700:	00043854 	.word	0x00043854
   20704:	0004382c 	.word	0x0004382c
   20708:	00043818 	.word	0x00043818
   2070c:	00043800 	.word	0x00043800
   20710:	1000dcbc 	.word	0x1000dcbc
   20714:	1000dcac 	.word	0x1000dcac

00020718 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb>:
{
   20718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2071c:	b0a9      	sub	sp, #164	@ 0xa4
   2071e:	4691      	mov	r9, r2
   20720:	f8dd 80d0 	ldr.w	r8, [sp, #208]	@ 0xd0
   20724:	f89d a0d4 	ldrb.w	sl, [sp, #212]	@ 0xd4
    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
   20728:	f8d8 b018 	ldr.w	fp, [r8, #24]
{
   2072c:	461f      	mov	r7, r3
   2072e:	4605      	mov	r5, r0
   20730:	460e      	mov	r6, r1
    uint64_t ctx_start_us = ei_read_timer_us();
   20732:	f004 f969 	bl	24a08 <_Z16ei_read_timer_usv>
    EI_IMPULSE_ERROR init_res = inference_tflite_setup(
   20736:	ab18      	add	r3, sp, #96	@ 0x60
   20738:	9301      	str	r3, [sp, #4]
   2073a:	ab20      	add	r3, sp, #128	@ 0x80
   2073c:	9300      	str	r3, [sp, #0]
   2073e:	aa08      	add	r2, sp, #32
   20740:	ab10      	add	r3, sp, #64	@ 0x40
   20742:	a906      	add	r1, sp, #24
   20744:	4640      	mov	r0, r8
   20746:	f7fd ff87 	bl	1e658 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.isra.0>
    if (init_res != EI_IMPULSE_OK) {
   2074a:	4604      	mov	r4, r0
   2074c:	b118      	cbz	r0, 20756 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x3e>
}
   2074e:	4620      	mov	r0, r4
   20750:	b029      	add	sp, #164	@ 0xa4
   20752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    size_t mtx_size = impulse->dsp_blocks_size + impulse->learning_blocks_size;
   20756:	f895 0054 	ldrb.w	r0, [r5, #84]	@ 0x54
   2075a:	f895 303c 	ldrb.w	r3, [r5, #60]	@ 0x3c
   2075e:	4403      	add	r3, r0
    auto input_res = fill_input_tensor_from_matrix(fmatrix, &input, input_block_ids, input_block_ids_size, mtx_size);
   20760:	9300      	str	r3, [sp, #0]
   20762:	463a      	mov	r2, r7
   20764:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
   20766:	a908      	add	r1, sp, #32
   20768:	4630      	mov	r0, r6
   2076a:	f7fe f98b 	bl	1ea84 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj>
    if (input_res != EI_IMPULSE_OK) {
   2076e:	4604      	mov	r4, r0
   20770:	2800      	cmp	r0, #0
   20772:	d1ec      	bne.n	2074e <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x36>
    EI_IMPULSE_ERROR run_res = inference_tflite_run(
   20774:	ab18      	add	r3, sp, #96	@ 0x60
   20776:	9302      	str	r3, [sp, #8]
   20778:	ab20      	add	r3, sp, #128	@ 0x80
   2077a:	9301      	str	r3, [sp, #4]
   2077c:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
   2077e:	9303      	str	r3, [sp, #12]
   20780:	ab10      	add	r3, sp, #64	@ 0x40
   20782:	9300      	str	r3, [sp, #0]
   20784:	f8cd a010 	str.w	sl, [sp, #16]
   20788:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   2078c:	4641      	mov	r1, r8
   2078e:	4628      	mov	r0, r5
   20790:	f7ff f902 	bl	1f998 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0>
    if (result->copy_output) {
   20794:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
   20796:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
    EI_IMPULSE_ERROR run_res = inference_tflite_run(
   2079a:	4604      	mov	r4, r0
    if (result->copy_output) {
   2079c:	b93b      	cbnz	r3, 207ae <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x96>
    graph_config->model_reset(ei_aligned_free);
   2079e:	f8db 300c 	ldr.w	r3, [fp, #12]
   207a2:	4809      	ldr	r0, [pc, #36]	@ (207c8 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xb0>)
   207a4:	4798      	blx	r3
}
   207a6:	4620      	mov	r0, r4
   207a8:	b029      	add	sp, #164	@ 0xa4
   207aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        auto output_res = fill_output_matrix_from_tensor(&output, fmatrix[impulse->dsp_blocks_size + learn_block_index].matrix);
   207ae:	f895 303c 	ldrb.w	r3, [r5, #60]	@ 0x3c
   207b2:	444b      	add	r3, r9
   207b4:	a810      	add	r0, sp, #64	@ 0x40
   207b6:	f856 1033 	ldr.w	r1, [r6, r3, lsl #3]
   207ba:	f7fe fa05 	bl	1ebc8 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE>
        if (output_res != EI_IMPULSE_OK) {
   207be:	2800      	cmp	r0, #0
   207c0:	d0ed      	beq.n	2079e <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x86>
            return output_res;
   207c2:	4604      	mov	r4, r0
   207c4:	e7c3      	b.n	2074e <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x36>
   207c6:	bf00      	nop
   207c8:	0001e539 	.word	0x0001e539

000207cc <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
        }
        // camera_state_machine();
    }
   207cc:	b570      	push	{r4, r5, r6, lr}
        : impulse(impulse)
   207ce:	4c06      	ldr	r4, [pc, #24]	@ (207e8 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1c>)
   207d0:	4d06      	ldr	r5, [pc, #24]	@ (207ec <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x20>)
   207d2:	6065      	str	r5, [r4, #4]
   207d4:	2600      	movs	r6, #0
        dsp_handles = (_dsp_handle_ptr_t*)ei_malloc(sizeof(_dsp_handle_ptr_t)*num_dsp_blocks);
   207d6:	2004      	movs	r0, #4
        : impulse(impulse)
   207d8:	7326      	strb	r6, [r4, #12]
        dsp_handles = (_dsp_handle_ptr_t*)ei_malloc(sizeof(_dsp_handle_ptr_t)*num_dsp_blocks);
   207da:	f004 f947 	bl	24a6c <_Z9ei_mallocj>
            dsp_handles[ix] = nullptr;
   207de:	6006      	str	r6, [r0, #0]
        dsp_handles = (_dsp_handle_ptr_t*)ei_malloc(sizeof(_dsp_handle_ptr_t)*num_dsp_blocks);
   207e0:	60a0      	str	r0, [r4, #8]
};

class ei_impulse_handle_t {
public:
    ei_impulse_handle_t(const ei_impulse_t *impulse)
        : state(impulse), impulse(impulse) {};
   207e2:	6125      	str	r5, [r4, #16]
   207e4:	bd70      	pop	{r4, r5, r6, pc}
   207e6:	bf00      	nop
   207e8:	10015ce4 	.word	0x10015ce4
   207ec:	00044b6c 	.word	0x00044b6c

000207f0 <_GLOBAL__sub_D__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
   207f0:	b570      	push	{r4, r5, r6, lr}
        ei_free(dsp_handles);
   207f2:	4d0e      	ldr	r5, [pc, #56]	@ (2082c <_GLOBAL__sub_D__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x3c>)
   207f4:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
        for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
   207f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
   207fc:	b18b      	cbz	r3, 20822 <_GLOBAL__sub_D__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x32>
   207fe:	2400      	movs	r4, #0
                dsp_handles[ix] = nullptr;
   20800:	4626      	mov	r6, r4
            if (dsp_handles[ix] != nullptr) {
   20802:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
                delete dsp_handles[ix];
   20806:	4618      	mov	r0, r3
            if (dsp_handles[ix] != nullptr) {
   20808:	b12b      	cbz	r3, 20816 <_GLOBAL__sub_D__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x26>
                delete dsp_handles[ix];
   2080a:	681b      	ldr	r3, [r3, #0]
   2080c:	68db      	ldr	r3, [r3, #12]
   2080e:	4798      	blx	r3
                dsp_handles[ix] = nullptr;
   20810:	68aa      	ldr	r2, [r5, #8]
   20812:	f842 6024 	str.w	r6, [r2, r4, lsl #2]
        for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
   20816:	686b      	ldr	r3, [r5, #4]
   20818:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
   2081c:	3401      	adds	r4, #1
   2081e:	429c      	cmp	r4, r3
   20820:	d3ef      	bcc.n	20802 <_GLOBAL__sub_D__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x12>
   20822:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ei_free(dsp_handles);
   20826:	4610      	mov	r0, r2
   20828:	f004 b930 	b.w	24a8c <_Z7ei_freePv>
   2082c:	10015ce4 	.word	0x10015ce4

00020830 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
   20830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int32_t qmin = 0;
  int32_t qmax = 0;
  if (output->type == kTfLiteUInt8) {
   20832:	7f10      	ldrb	r0, [r2, #28]
   20834:	2807      	cmp	r0, #7
                                               int32_t* act_max) {
   20836:	ed2d 8b04 	vpush	{d8-d9}
   2083a:	461c      	mov	r4, r3
   2083c:	d056      	beq.n	208ec <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xbc>
   2083e:	2809      	cmp	r0, #9
   20840:	d013      	beq.n	2086a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x3a>
   20842:	2803      	cmp	r0, #3
   20844:	d14e      	bne.n	208e4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xb4>
  if (output->type == kTfLiteUInt8) {
   20846:	26ff      	movs	r6, #255	@ 0xff
   20848:	2500      	movs	r5, #0
  if (activation == kTfLiteActRelu) {
   2084a:	2901      	cmp	r1, #1
   2084c:	ed92 8a02 	vldr	s16, [r2, #8]
   20850:	68d7      	ldr	r7, [r2, #12]
   20852:	d013      	beq.n	2087c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
  } else if (activation == kTfLiteActRelu6) {
   20854:	2903      	cmp	r1, #3
   20856:	d04d      	beq.n	208f4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xc4>
  } else if (activation == kTfLiteActReluN1To1) {
   20858:	2902      	cmp	r1, #2
   2085a:	d02d      	beq.n	208b8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x88>
    *act_max = qmax;
   2085c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
    *act_min = qmin;
   2085e:	6025      	str	r5, [r4, #0]
    *act_max = qmax;
   20860:	601e      	str	r6, [r3, #0]
    TF_LITE_ENSURE(context, false);
  }

  return CalculateActivationRangeQuantizedImpl(context, activation, qmin, qmax,
                                               output, act_min, act_max);
}
   20862:	ecbd 8b04 	vpop	{d8-d9}
  return kTfLiteOk;
   20866:	2000      	movs	r0, #0
}
   20868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (activation == kTfLiteActRelu) {
   2086a:	2901      	cmp	r1, #1
   2086c:	ed92 8a02 	vldr	s16, [r2, #8]
   20870:	68d7      	ldr	r7, [r2, #12]
  if (output->type == kTfLiteUInt8) {
   20872:	f04f 067f 	mov.w	r6, #127	@ 0x7f
   20876:	f06f 057f 	mvn.w	r5, #127	@ 0x7f
  if (activation == kTfLiteActRelu) {
   2087a:	d1eb      	bne.n	20854 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x24>
   2087c:	ed9f 0a42 	vldr	s0, [pc, #264]	@ 20988 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x158>
   20880:	f004 fc52 	bl	25128 <roundf>
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
   20884:	eddf 7a41 	vldr	s15, [pc, #260]	@ 2098c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x15c>
   20888:	eeb4 0ae7 	vcmpe.f32	s0, s15
   2088c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   20890:	db28      	blt.n	208e4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xb4>
   20892:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 20990 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x160>
   20896:	eeb4 0ae7 	vcmpe.f32	s0, s15
   2089a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2089e:	d821      	bhi.n	208e4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xb4>
  q = zero_point + static_cast<int32_t>(tmp);
   208a0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   208a4:	ee17 3a90 	vmov	r3, s15
   208a8:	443b      	add	r3, r7
      if (__a < __b)
   208aa:	42ab      	cmp	r3, r5
   208ac:	bfb8      	it	lt
   208ae:	462b      	movlt	r3, r5
    *act_min = std::max(qmin, tmp_q);
   208b0:	6023      	str	r3, [r4, #0]
    *act_max = qmax;
   208b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   208b4:	601e      	str	r6, [r3, #0]
   208b6:	e7d4      	b.n	20862 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
  const float tmp = TfLiteRound(f / scale);
   208b8:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
   208bc:	eec7 8a88 	vdiv.f32	s17, s15, s16
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
   208c0:	ed9f 8a32 	vldr	s16, [pc, #200]	@ 2098c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x15c>
   208c4:	eeb0 0a68 	vmov.f32	s0, s17
   208c8:	f004 fc2e 	bl	25128 <roundf>
   208cc:	eeb4 0ac8 	vcmpe.f32	s0, s16
   208d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   208d4:	db06      	blt.n	208e4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xb4>
   208d6:	ed9f 9a2e 	vldr	s18, [pc, #184]	@ 20990 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x160>
   208da:	eeb4 0ac9 	vcmpe.f32	s0, s18
   208de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   208e2:	d93d      	bls.n	20960 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x130>
}
   208e4:	ecbd 8b04 	vpop	{d8-d9}
  if (output->type == kTfLiteUInt8) {
   208e8:	2001      	movs	r0, #1
}
   208ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (output->type == kTfLiteUInt8) {
   208ec:	4d29      	ldr	r5, [pc, #164]	@ (20994 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x164>)
   208ee:	f647 76ff 	movw	r6, #32767	@ 0x7fff
   208f2:	e7aa      	b.n	2084a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x1a>
   208f4:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 20988 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x158>
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
   208f8:	eddf 8a24 	vldr	s17, [pc, #144]	@ 2098c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x15c>
   208fc:	f004 fc14 	bl	25128 <roundf>
   20900:	eeb4 0ae8 	vcmpe.f32	s0, s17
   20904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   20908:	dbec      	blt.n	208e4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xb4>
   2090a:	ed9f 9a21 	vldr	s18, [pc, #132]	@ 20990 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x160>
   2090e:	eeb4 0ac9 	vcmpe.f32	s0, s18
   20912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   20916:	d8e5      	bhi.n	208e4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xb4>
  q = zero_point + static_cast<int32_t>(tmp);
   20918:	eefd 7ac0 	vcvt.s32.f32	s15, s0
  const float tmp = TfLiteRound(f / scale);
   2091c:	eeb1 0a08 	vmov.f32	s0, #24	@ 0x40c00000  6.0
  q = zero_point + static_cast<int32_t>(tmp);
   20920:	ee17 3a90 	vmov	r3, s15
   20924:	443b      	add	r3, r7
   20926:	42ab      	cmp	r3, r5
   20928:	bfb8      	it	lt
   2092a:	462b      	movlt	r3, r5
   2092c:	ee80 0a08 	vdiv.f32	s0, s0, s16
    *act_min = std::max(qmin, tmp_q);
   20930:	6023      	str	r3, [r4, #0]
   20932:	f004 fbf9 	bl	25128 <roundf>
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
   20936:	eeb4 0ae8 	vcmpe.f32	s0, s17
   2093a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2093e:	dbd1      	blt.n	208e4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xb4>
   20940:	eeb4 0ac9 	vcmpe.f32	s0, s18
   20944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   20948:	d8cc      	bhi.n	208e4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xb4>
  q = zero_point + static_cast<int32_t>(tmp);
   2094a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    *act_max = std::min(qmax, tmp_q);
   2094e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  q = zero_point + static_cast<int32_t>(tmp);
   20950:	ee17 3a90 	vmov	r3, s15
   20954:	443b      	add	r3, r7
      if (__b < __a)
   20956:	42b3      	cmp	r3, r6
   20958:	bfa8      	it	ge
   2095a:	4633      	movge	r3, r6
    *act_max = std::min(qmax, tmp_q);
   2095c:	6013      	str	r3, [r2, #0]
   2095e:	e780      	b.n	20862 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
  q = zero_point + static_cast<int32_t>(tmp);
   20960:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   20964:	eeb1 0a68 	vneg.f32	s0, s17
   20968:	ee17 3a90 	vmov	r3, s15
   2096c:	443b      	add	r3, r7
      if (__a < __b)
   2096e:	42ab      	cmp	r3, r5
   20970:	bfb8      	it	lt
   20972:	462b      	movlt	r3, r5
    *act_min = std::max(qmin, tmp_q);
   20974:	6023      	str	r3, [r4, #0]
   20976:	f004 fbd7 	bl	25128 <roundf>
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
   2097a:	eeb4 0ac8 	vcmpe.f32	s0, s16
   2097e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   20982:	dadd      	bge.n	20940 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x110>
   20984:	e7ae      	b.n	208e4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xb4>
   20986:	bf00      	nop
   20988:	00000000 	.word	0x00000000
   2098c:	cf000000 	.word	0xcf000000
   20990:	4f000000 	.word	0x4f000000
   20994:	ffff8000 	.word	0xffff8000

00020998 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0>:
TfLiteStatus PopulateConvolutionQuantizationParams(
   20998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2099c:	ed2d 8b02 	vpush	{d8}
   209a0:	b093      	sub	sp, #76	@ 0x4c
   209a2:	4615      	mov	r5, r2
   209a4:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
   209a6:	930b      	str	r3, [sp, #44]	@ 0x2c
   209a8:	e9cd 2006 	strd	r2, r0, [sp, #24]
   209ac:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
   209ae:	9208      	str	r2, [sp, #32]
   209b0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
   209b2:	920c      	str	r2, [sp, #48]	@ 0x30
   209b4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
   209b6:	920d      	str	r2, [sp, #52]	@ 0x34
  const auto* affine_quantization =
   209b8:	686b      	ldr	r3, [r5, #4]
TfLiteStatus PopulateConvolutionQuantizationParams(
   209ba:	9a22      	ldr	r2, [sp, #136]	@ 0x88
   209bc:	9209      	str	r2, [sp, #36]	@ 0x24
   209be:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
   209c0:	f8dd b098 	ldr.w	fp, [sp, #152]	@ 0x98
   209c4:	920a      	str	r2, [sp, #40]	@ 0x28
   209c6:	e9dd 6724 	ldrd	r6, r7, [sp, #144]	@ 0x90
  TF_LITE_ENSURE(context, affine_quantization);
   209ca:	b19b      	cbz	r3, 209f4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0+0x5c>
  TF_LITE_ENSURE(context, affine_quantization->scale);
   209cc:	681a      	ldr	r2, [r3, #0]
   209ce:	9205      	str	r2, [sp, #20]
   209d0:	b182      	cbz	r2, 209f4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0+0x5c>
  const bool is_per_channel = affine_quantization->scale->size > 1;
   209d2:	9a05      	ldr	r2, [sp, #20]
   209d4:	f8d2 a000 	ldr.w	sl, [r2]
  if (is_per_channel) {
   209d8:	f1ba 0f01 	cmp.w	sl, #1
   209dc:	460c      	mov	r4, r1
   209de:	dd0f      	ble.n	20a00 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0+0x68>
    TF_LITE_ENSURE(context,
   209e0:	7f0a      	ldrb	r2, [r1, #28]
   209e2:	2a09      	cmp	r2, #9
   209e4:	d001      	beq.n	209ea <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0+0x52>
   209e6:	2a07      	cmp	r2, #7
   209e8:	d104      	bne.n	209f4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0+0x5c>
    TF_LITE_ENSURE(context,
   209ea:	7f2a      	ldrb	r2, [r5, #28]
   209ec:	2a09      	cmp	r2, #9
   209ee:	d06e      	beq.n	20ace <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0+0x136>
   209f0:	2a12      	cmp	r2, #18
   209f2:	d06c      	beq.n	20ace <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0+0x136>
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
   209f4:	2001      	movs	r0, #1
}
   209f6:	b013      	add	sp, #76	@ 0x4c
   209f8:	ecbd 8b02 	vpop	{d8}
   209fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  const float output_scale = output->params.scale;
   20a00:	9b06      	ldr	r3, [sp, #24]
  const float input_scale = input->params.scale;
   20a02:	f8d1 8008 	ldr.w	r8, [r1, #8]
  const float output_scale = output->params.scale;
   20a06:	6898      	ldr	r0, [r3, #8]
  for (int i = 0; i < num_channels; ++i) {
   20a08:	f1bb 0f00 	cmp.w	fp, #0
   20a0c:	dd44      	ble.n	20a98 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0+0x100>
                                          static_cast<double>(output_scale);
   20a0e:	f7f8 f827 	bl	18a60 <__aeabi_f2d>
   20a12:	4602      	mov	r2, r0
   20a14:	460b      	mov	r3, r1
   20a16:	2000      	movs	r0, #0
   20a18:	4965      	ldr	r1, [pc, #404]	@ (20bb0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0+0x218>)
   20a1a:	f7f8 f9a3 	bl	18d64 <__aeabi_ddiv>
   20a1e:	4602      	mov	r2, r0
   20a20:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
   20a22:	4640      	mov	r0, r8
   20a24:	e9cd 2300 	strd	r2, r3, [sp]
   20a28:	f7f8 f81a 	bl	18a60 <__aeabi_f2d>
   20a2c:	9b05      	ldr	r3, [sp, #20]
   20a2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   20a32:	e9cd 450e 	strd	r4, r5, [sp, #56]	@ 0x38
   20a36:	f1a6 0804 	sub.w	r8, r6, #4
   20a3a:	f1a7 0904 	sub.w	r9, r7, #4
  for (int i = 0; i < num_channels; ++i) {
   20a3e:	2600      	movs	r6, #0
   20a40:	1d1f      	adds	r7, r3, #4
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
   20a42:	f1ba 0f01 	cmp.w	sl, #1
   20a46:	bfd6      	itet	le
   20a48:	9b05      	ldrle	r3, [sp, #20]
   20a4a:	683d      	ldrgt	r5, [r7, #0]
   20a4c:	685d      	ldrle	r5, [r3, #4]
    const double effective_output_scale = static_cast<double>(input_scale) *
   20a4e:	e9dd 0100 	ldrd	r0, r1, [sp]
   20a52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   20a56:	f7f8 f85b 	bl	18b10 <__aeabi_dmul>
   20a5a:	4602      	mov	r2, r0
    const double filter_scale = static_cast<double>(scale);
   20a5c:	4628      	mov	r0, r5
    const double effective_output_scale = static_cast<double>(input_scale) *
   20a5e:	4614      	mov	r4, r2
   20a60:	460d      	mov	r5, r1
    const double filter_scale = static_cast<double>(scale);
   20a62:	f7f7 fffd 	bl	18a60 <__aeabi_f2d>
   20a66:	460b      	mov	r3, r1
   20a68:	4602      	mov	r2, r0
    const double effective_output_scale = static_cast<double>(input_scale) *
   20a6a:	4629      	mov	r1, r5
   20a6c:	4620      	mov	r0, r4
   20a6e:	f7f8 f84f 	bl	18b10 <__aeabi_dmul>
   20a72:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
   20a76:	a911      	add	r1, sp, #68	@ 0x44
   20a78:	a810      	add	r0, sp, #64	@ 0x40
   20a7a:	f000 f927 	bl	20ccc <_ZN6tflite18QuantizeMultiplierEdPlPi>
  for (int i = 0; i < num_channels; ++i) {
   20a7e:	3601      	adds	r6, #1
    per_channel_multiplier[i] = significand;
   20a80:	9b10      	ldr	r3, [sp, #64]	@ 0x40
   20a82:	f848 3f04 	str.w	r3, [r8, #4]!
  for (int i = 0; i < num_channels; ++i) {
   20a86:	45b3      	cmp	fp, r6
    per_channel_shift[i] = channel_shift;
   20a88:	9b11      	ldr	r3, [sp, #68]	@ 0x44
   20a8a:	f849 3f04 	str.w	r3, [r9, #4]!
  for (int i = 0; i < num_channels; ++i) {
   20a8e:	f107 0704 	add.w	r7, r7, #4
   20a92:	d1d6      	bne.n	20a42 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0+0xaa>
   20a94:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	@ 0x38
  if (input->type == kTfLiteUInt8) {
   20a98:	7f23      	ldrb	r3, [r4, #28]
   20a9a:	2b03      	cmp	r3, #3
   20a9c:	d025      	beq.n	20aea <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0+0x152>
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
   20a9e:	2b09      	cmp	r3, #9
   20aa0:	d813      	bhi.n	20aca <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0+0x132>
   20aa2:	f44f 7022 	mov.w	r0, #648	@ 0x288
   20aa6:	40d8      	lsrs	r0, r3
   20aa8:	f010 0001 	ands.w	r0, r0, #1
   20aac:	d0a3      	beq.n	209f6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0+0x5e>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
   20aae:	9b08      	ldr	r3, [sp, #32]
   20ab0:	e9dd 2006 	ldrd	r2, r0, [sp, #24]
   20ab4:	7819      	ldrb	r1, [r3, #0]
   20ab6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   20ab8:	931e      	str	r3, [sp, #120]	@ 0x78
   20aba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
}
   20abc:	b013      	add	sp, #76	@ 0x4c
   20abe:	ecbd 8b02 	vpop	{d8}
   20ac2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
   20ac6:	f7ff beb3 	b.w	20830 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
   20aca:	2000      	movs	r0, #0
   20acc:	e793      	b.n	209f6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0+0x5e>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
   20ace:	45da      	cmp	sl, fp
   20ad0:	d190      	bne.n	209f4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0+0x5c>
    TF_LITE_ENSURE_EQ(
   20ad2:	689a      	ldr	r2, [r3, #8]
   20ad4:	696b      	ldr	r3, [r5, #20]
   20ad6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   20ada:	685b      	ldr	r3, [r3, #4]
   20adc:	459a      	cmp	sl, r3
   20ade:	d189      	bne.n	209f4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0+0x5c>
  const float output_scale = output->params.scale;
   20ae0:	9b06      	ldr	r3, [sp, #24]
  const float input_scale = input->params.scale;
   20ae2:	f8d4 8008 	ldr.w	r8, [r4, #8]
  const float output_scale = output->params.scale;
   20ae6:	6898      	ldr	r0, [r3, #8]
  for (int i = 0; i < num_channels; ++i) {
   20ae8:	e791      	b.n	20a0e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0+0x76>
                                     static_cast<double>(filter->params.scale);
   20aea:	edd5 8a02 	vldr	s17, [r5, #8]
  if (bias) {
   20aee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
  const double input_product_scale = static_cast<double>(input->params.scale) *
   20af0:	ed94 8a02 	vldr	s16, [r4, #8]
  if (bias) {
   20af4:	b38d      	cbz	r5, 20b5a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0+0x1c2>
  const double input_product_scale = static_cast<double>(input->params.scale) *
   20af6:	ee18 0a10 	vmov	r0, s16
   20afa:	f7f7 ffb1 	bl	18a60 <__aeabi_f2d>
   20afe:	4606      	mov	r6, r0
                                     static_cast<double>(filter->params.scale);
   20b00:	ee18 0a90 	vmov	r0, s17
  const double input_product_scale = static_cast<double>(input->params.scale) *
   20b04:	460f      	mov	r7, r1
                                     static_cast<double>(filter->params.scale);
   20b06:	f7f7 ffab 	bl	18a60 <__aeabi_f2d>
   20b0a:	4602      	mov	r2, r0
   20b0c:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
   20b0e:	4630      	mov	r0, r6
   20b10:	4639      	mov	r1, r7
   20b12:	f7f7 fffd 	bl	18b10 <__aeabi_dmul>
   20b16:	4606      	mov	r6, r0
    const double bias_scale = static_cast<double>(bias->params.scale);
   20b18:	68a8      	ldr	r0, [r5, #8]
  const double input_product_scale = static_cast<double>(input->params.scale) *
   20b1a:	460f      	mov	r7, r1
    const double bias_scale = static_cast<double>(bias->params.scale);
   20b1c:	f7f7 ffa0 	bl	18a60 <__aeabi_f2d>
   20b20:	4602      	mov	r2, r0
   20b22:	460b      	mov	r3, r1
    const double scale_diff = std::abs(input_product_scale - bias_scale);
   20b24:	4630      	mov	r0, r6
   20b26:	4639      	mov	r1, r7
   20b28:	f7f7 fe3a 	bl	187a0 <__aeabi_dsub>
   20b2c:	460b      	mov	r3, r1
    const double output_scale = static_cast<double>(output->params.scale);
   20b2e:	9906      	ldr	r1, [sp, #24]
    const double scale_diff = std::abs(input_product_scale - bias_scale);
   20b30:	4602      	mov	r2, r0
    const double output_scale = static_cast<double>(output->params.scale);
   20b32:	6888      	ldr	r0, [r1, #8]
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
   20b34:	4616      	mov	r6, r2
   20b36:	f023 4700 	bic.w	r7, r3, #2147483648	@ 0x80000000
   20b3a:	f7f7 ff91 	bl	18a60 <__aeabi_f2d>
   20b3e:	4602      	mov	r2, r0
   20b40:	460b      	mov	r3, r1
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
   20b42:	4630      	mov	r0, r6
   20b44:	4639      	mov	r1, r7
   20b46:	f7f8 f90d 	bl	18d64 <__aeabi_ddiv>
   20b4a:	a317      	add	r3, pc, #92	@ (adr r3, 20ba8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0+0x210>)
   20b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   20b50:	f7f8 fa6e 	bl	19030 <__aeabi_dcmpgt>
   20b54:	2800      	cmp	r0, #0
   20b56:	f47f af4d 	bne.w	209f4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0+0x5c>
      static_cast<double>(input->params.scale * filter->params.scale);
   20b5a:	ee28 8a28 	vmul.f32	s16, s16, s17
  TF_LITE_ENSURE(context, input_product_scale >= 0);
   20b5e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   20b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   20b66:	f53f af45 	bmi.w	209f4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0+0x5c>
  const double input_product_scale =
   20b6a:	ee18 0a10 	vmov	r0, s16
   20b6e:	f7f7 ff77 	bl	18a60 <__aeabi_f2d>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
   20b72:	9b06      	ldr	r3, [sp, #24]
  const double input_product_scale =
   20b74:	4606      	mov	r6, r0
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
   20b76:	6898      	ldr	r0, [r3, #8]
  const double input_product_scale =
   20b78:	460f      	mov	r7, r1
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
   20b7a:	f7f7 ff71 	bl	18a60 <__aeabi_f2d>
   20b7e:	4602      	mov	r2, r0
   20b80:	460b      	mov	r3, r1
   20b82:	4630      	mov	r0, r6
   20b84:	4639      	mov	r1, r7
   20b86:	f7f8 f8ed 	bl	18d64 <__aeabi_ddiv>
   20b8a:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
   20b8e:	a911      	add	r1, sp, #68	@ 0x44
   20b90:	980c      	ldr	r0, [sp, #48]	@ 0x30
   20b92:	f000 f89b 	bl	20ccc <_ZN6tflite18QuantizeMultiplierEdPlPi>
    *shift = -exponent;
   20b96:	9a11      	ldr	r2, [sp, #68]	@ 0x44
   20b98:	990d      	ldr	r1, [sp, #52]	@ 0x34
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
   20b9a:	7f23      	ldrb	r3, [r4, #28]
    *shift = -exponent;
   20b9c:	4252      	negs	r2, r2
   20b9e:	600a      	str	r2, [r1, #0]
   20ba0:	e77d      	b.n	20a9e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0+0x106>
   20ba2:	bf00      	nop
   20ba4:	f3af 8000 	nop.w
   20ba8:	47ae147b 	.word	0x47ae147b
   20bac:	3f947ae1 	.word	0x3f947ae1
   20bb0:	3ff00000 	.word	0x3ff00000

00020bb4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i>:
    int num_channels) {
   20bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
   20bb8:	f891 e000 	ldrb.w	lr, [r1]
    int num_channels) {
   20bbc:	b083      	sub	sp, #12
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
   20bbe:	f1be 0f01 	cmp.w	lr, #1
    int num_channels) {
   20bc2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
   20bc4:	9401      	str	r4, [sp, #4]
   20bc6:	e9dd 670f 	ldrd	r6, r7, [sp, #60]	@ 0x3c
   20bca:	e9dd 450d 	ldrd	r4, r5, [sp, #52]	@ 0x34
   20bce:	e9dd 8911 	ldrd	r8, r9, [sp, #68]	@ 0x44
   20bd2:	e9dd ab13 	ldrd	sl, fp, [sp, #76]	@ 0x4c
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
   20bd6:	d104      	bne.n	20be2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2e>
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
   20bd8:	f892 c000 	ldrb.w	ip, [r2]
   20bdc:	f1bc 0f01 	cmp.w	ip, #1
   20be0:	d003      	beq.n	20bea <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x36>
}
   20be2:	2001      	movs	r0, #1
   20be4:	b003      	add	sp, #12
   20be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20bea:	e9cd 450d 	strd	r4, r5, [sp, #52]	@ 0x34
   20bee:	9c01      	ldr	r4, [sp, #4]
   20bf0:	940c      	str	r4, [sp, #48]	@ 0x30
   20bf2:	e9cd ab13 	strd	sl, fp, [sp, #76]	@ 0x4c
   20bf6:	e9cd 8911 	strd	r8, r9, [sp, #68]	@ 0x44
   20bfa:	e9cd 670f 	strd	r6, r7, [sp, #60]	@ 0x3c
   20bfe:	b003      	add	sp, #12
   20c00:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20c04:	f7ff bec8 	b.w	20998 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0>

00020c08 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>:

bool HaveSameShapes(const TfLiteTensor* input1, const TfLiteTensor* input2) {
   20c08:	b508      	push	{r3, lr}
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
   20c0a:	6949      	ldr	r1, [r1, #20]
   20c0c:	6940      	ldr	r0, [r0, #20]
   20c0e:	f003 fed7 	bl	249c0 <TfLiteIntArrayEqual>
}
   20c12:	3800      	subs	r0, #0
   20c14:	bf18      	it	ne
   20c16:	2001      	movne	r0, #1
   20c18:	bd08      	pop	{r3, pc}
   20c1a:	bf00      	nop

00020c1c <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa>:
  }
}

void UnpackDenseInt4IntoInt8(const int8_t* src_buffer, int num_elements,
                             int8_t* dst_buffer) {
  for (int i = 0; i < num_elements; i += 2) {
   20c1c:	2900      	cmp	r1, #0
   20c1e:	dd23      	ble.n	20c68 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x4c>
    // Shift left first so that sign is properly extended when shifted right
    dst_buffer[i] = static_cast<int8_t>(src_buffer[i / 2] << 4) >> 4;
   20c20:	7803      	ldrb	r3, [r0, #0]
    // Break early if the tensor has odd length and the higher nibble should be
    // ignored.
    if (i + 1 == num_elements) break;
   20c22:	2901      	cmp	r1, #1
    dst_buffer[i] = static_cast<int8_t>(src_buffer[i / 2] << 4) >> 4;
   20c24:	f343 0303 	sbfx	r3, r3, #0, #4
   20c28:	7013      	strb	r3, [r2, #0]
    if (i + 1 == num_elements) break;
   20c2a:	d01d      	beq.n	20c68 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x4c>
                             int8_t* dst_buffer) {
   20c2c:	b530      	push	{r4, r5, lr}
  for (int i = 0; i < num_elements; i += 2) {
   20c2e:	2300      	movs	r3, #0
    dst_buffer[i] = static_cast<int8_t>(src_buffer[i / 2] << 4) >> 4;
   20c30:	4604      	mov	r4, r0
   20c32:	1c55      	adds	r5, r2, #1
   20c34:	e007      	b.n	20c46 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x2a>
   20c36:	f810 c00c 	ldrb.w	ip, [r0, ip]
    if (i + 1 == num_elements) break;
   20c3a:	4571      	cmp	r1, lr
    dst_buffer[i] = static_cast<int8_t>(src_buffer[i / 2] << 4) >> 4;
   20c3c:	f34c 0c03 	sbfx	ip, ip, #0, #4
   20c40:	f802 c003 	strb.w	ip, [r2, r3]
    if (i + 1 == num_elements) break;
   20c44:	d00f      	beq.n	20c66 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x4a>
    dst_buffer[i + 1] = static_cast<int8_t>(src_buffer[i / 2]) >> 4;
   20c46:	f994 c000 	ldrsb.w	ip, [r4]
   20c4a:	ea4f 1c2c 	mov.w	ip, ip, asr #4
   20c4e:	f805 c003 	strb.w	ip, [r5, r3]
  for (int i = 0; i < num_elements; i += 2) {
   20c52:	469e      	mov	lr, r3
   20c54:	3302      	adds	r3, #2
   20c56:	4299      	cmp	r1, r3
    dst_buffer[i] = static_cast<int8_t>(src_buffer[i / 2] << 4) >> 4;
   20c58:	ea4f 0c63 	mov.w	ip, r3, asr #1
    if (i + 1 == num_elements) break;
   20c5c:	f10e 0e03 	add.w	lr, lr, #3
    dst_buffer[i] = static_cast<int8_t>(src_buffer[i / 2] << 4) >> 4;
   20c60:	eb00 0463 	add.w	r4, r0, r3, asr #1
  for (int i = 0; i < num_elements; i += 2) {
   20c64:	dce7      	bgt.n	20c36 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x1a>
  }
}
   20c66:	bd30      	pop	{r4, r5, pc}
   20c68:	4770      	bx	lr
   20c6a:	bf00      	nop

00020c6c <_ZN6tflite18QuantizeMultiplierEdPlPi.part.0>:
constexpr uint32_t kFractionShift = 22;
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
   20c6c:	b538      	push	{r3, r4, r5, lr}
   20c6e:	4605      	mov	r5, r0
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
   20c70:	4608      	mov	r0, r1
void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
   20c72:	460c      	mov	r4, r1
  const double q = std::frexp(double_multiplier, shift);
   20c74:	f004 fa7e 	bl	25174 <frexp>
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1LL << 31)));
   20c78:	2200      	movs	r2, #0
   20c7a:	4b13      	ldr	r3, [pc, #76]	@ (20cc8 <_ZN6tflite18QuantizeMultiplierEdPlPi.part.0+0x5c>)
  const double q = std::frexp(double_multiplier, shift);
   20c7c:	ec51 0b10 	vmov	r0, r1, d0
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1LL << 31)));
   20c80:	f7f7 ff46 	bl	18b10 <__aeabi_dmul>
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
   20c84:	ec41 0b10 	vmov	d0, r0, r1
   20c88:	f004 fb2a 	bl	252e0 <round>
   20c8c:	ec51 0b10 	vmov	r0, r1, d0
   20c90:	f00a fe22 	bl	2b8d8 <__aeabi_d2lz>
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1LL << 31));
   20c94:	f04f 4e00 	mov.w	lr, #2147483648	@ 0x80000000
   20c98:	f04f 0c00 	mov.w	ip, #0
   20c9c:	4586      	cmp	lr, r0
   20c9e:	eb7c 0201 	sbcs.w	r2, ip, r1
   20ca2:	db0f      	blt.n	20cc4 <_ZN6tflite18QuantizeMultiplierEdPlPi.part.0+0x58>
  if (q_fixed == (1LL << 31)) {
   20ca4:	4561      	cmp	r1, ip
   20ca6:	bf08      	it	eq
   20ca8:	4570      	cmpeq	r0, lr
    q_fixed /= 2;
    ++*shift;
   20caa:	6822      	ldr	r2, [r4, #0]
   20cac:	4603      	mov	r3, r0
  if (q_fixed == (1LL << 31)) {
   20cae:	d103      	bne.n	20cb8 <_ZN6tflite18QuantizeMultiplierEdPlPi.part.0+0x4c>
    ++*shift;
   20cb0:	3201      	adds	r2, #1
   20cb2:	6022      	str	r2, [r4, #0]
    q_fixed /= 2;
   20cb4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
   20cb8:	321f      	adds	r2, #31
    *shift = 0;
   20cba:	bfbc      	itt	lt
   20cbc:	2300      	movlt	r3, #0
   20cbe:	6023      	strlt	r3, [r4, #0]
  if (*shift > 30) {
    *shift = 30;
    q_fixed = (1LL << 31) - 1;
  }
#endif
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
   20cc0:	602b      	str	r3, [r5, #0]
}
   20cc2:	bd38      	pop	{r3, r4, r5, pc}
  TFLITE_CHECK(q_fixed <= (1LL << 31));
   20cc4:	f004 fb5c 	bl	25380 <abort>
   20cc8:	41e00000 	.word	0x41e00000

00020ccc <_ZN6tflite18QuantizeMultiplierEdPlPi>:
                        int* shift) {
   20ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20cce:	ec55 4b10 	vmov	r4, r5, d0
   20cd2:	4606      	mov	r6, r0
   20cd4:	460f      	mov	r7, r1
  if (double_multiplier == 0.) {
   20cd6:	2200      	movs	r2, #0
   20cd8:	2300      	movs	r3, #0
   20cda:	4620      	mov	r0, r4
   20cdc:	4629      	mov	r1, r5
   20cde:	f7f8 f97f 	bl	18fe0 <__aeabi_dcmpeq>
   20ce2:	b118      	cbz	r0, 20cec <_ZN6tflite18QuantizeMultiplierEdPlPi+0x20>
    *quantized_multiplier = 0;
   20ce4:	2300      	movs	r3, #0
   20ce6:	6033      	str	r3, [r6, #0]
    *shift = 0;
   20ce8:	603b      	str	r3, [r7, #0]
}
   20cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20cec:	ec45 4b10 	vmov	d0, r4, r5
   20cf0:	4639      	mov	r1, r7
   20cf2:	4630      	mov	r0, r6
   20cf4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   20cf8:	f7ff bfb8 	b.w	20c6c <_ZN6tflite18QuantizeMultiplierEdPlPi.part.0>

00020cfc <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>:
  TFLITE_CHECK_GE(*left_shift, 0);
}

void QuantizeMultiplierSmallerThanOneExp(double double_multiplier,
                                         int32_t* quantized_multiplier,
                                         int* left_shift) {
   20cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   20cfe:	ec55 4b10 	vmov	r4, r5, d0
   20d02:	b083      	sub	sp, #12
   20d04:	4607      	mov	r7, r0
   20d06:	460e      	mov	r6, r1
  TFLITE_CHECK_LT(double_multiplier, 1.);
   20d08:	4b0d      	ldr	r3, [pc, #52]	@ (20d40 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi+0x44>)
   20d0a:	2200      	movs	r2, #0
   20d0c:	4620      	mov	r0, r4
   20d0e:	4629      	mov	r1, r5
   20d10:	f7f8 f970 	bl	18ff4 <__aeabi_dcmplt>
   20d14:	b190      	cbz	r0, 20d3c <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi+0x40>
  TFLITE_CHECK_GT(double_multiplier, 0.);
   20d16:	2200      	movs	r2, #0
   20d18:	2300      	movs	r3, #0
   20d1a:	4620      	mov	r0, r4
   20d1c:	4629      	mov	r1, r5
   20d1e:	f7f8 f987 	bl	19030 <__aeabi_dcmpgt>
   20d22:	b158      	cbz	r0, 20d3c <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi+0x40>
  if (double_multiplier == 0.) {
   20d24:	ec45 4b10 	vmov	d0, r4, r5
   20d28:	a901      	add	r1, sp, #4
   20d2a:	4638      	mov	r0, r7
   20d2c:	f7ff ff9e 	bl	20c6c <_ZN6tflite18QuantizeMultiplierEdPlPi.part.0>
  int shift;
  QuantizeMultiplier(double_multiplier, quantized_multiplier, &shift);
  TFLITE_CHECK_LE(shift, 0);
   20d30:	9b01      	ldr	r3, [sp, #4]
   20d32:	2b00      	cmp	r3, #0
   20d34:	dc02      	bgt.n	20d3c <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi+0x40>
  *left_shift = shift;
   20d36:	6033      	str	r3, [r6, #0]
}
   20d38:	b003      	add	sp, #12
   20d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TFLITE_CHECK_LT(double_multiplier, 1.);
   20d3c:	f004 fb20 	bl	25380 <abort>
   20d40:	3ff00000 	.word	0x3ff00000
   20d44:	00000000 	.word	0x00000000

00020d48 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
   20d48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      0) {
    input_beta_real_multiplier = max_real_multiplier;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier =
      std::min<double>(beta * input_scale * (1 << (31 - input_integer_bits)),
   20d4c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
                              int32_t* quantized_multiplier, int* left_shift) {
   20d50:	ed2d 8b02 	vpush	{d8}
      std::min<double>(beta * input_scale * (1 << (31 - input_integer_bits)),
   20d54:	fa23 f000 	lsr.w	r0, r3, r0
                              int32_t* quantized_multiplier, int* left_shift) {
   20d58:	ec57 6b10 	vmov	r6, r7, d0
   20d5c:	ec59 8b11 	vmov	r8, r9, d1
   20d60:	4692      	mov	sl, r2
   20d62:	468b      	mov	fp, r1
      std::min<double>(beta * input_scale * (1 << (31 - input_integer_bits)),
   20d64:	f7f7 fe6a 	bl	18a3c <__aeabi_i2d>
   20d68:	4642      	mov	r2, r8
   20d6a:	4604      	mov	r4, r0
   20d6c:	460d      	mov	r5, r1
   20d6e:	464b      	mov	r3, r9
   20d70:	4630      	mov	r0, r6
   20d72:	4639      	mov	r1, r7
   20d74:	f7f7 fecc 	bl	18b10 <__aeabi_dmul>
   20d78:	4602      	mov	r2, r0
   20d7a:	460b      	mov	r3, r1
   20d7c:	4620      	mov	r0, r4
   20d7e:	4629      	mov	r1, r5
   20d80:	f7f7 fec6 	bl	18b10 <__aeabi_dmul>
   20d84:	4602      	mov	r2, r0
   20d86:	460b      	mov	r3, r1
   20d88:	ec43 2b18 	vmov	d8, r2, r3
      if (__b < __a)
   20d8c:	a310      	add	r3, pc, #64	@ (adr r3, 20dd0 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x88>)
   20d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
   20d92:	f7f8 f94d 	bl	19030 <__aeabi_dcmpgt>
   20d96:	b9b0      	cbnz	r0, 20dc6 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x7e>
  TFLITE_CHECK_GT(double_multiplier, 1.);
   20d98:	4b0f      	ldr	r3, [pc, #60]	@ (20dd8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x90>)
   20d9a:	ec51 0b18 	vmov	r0, r1, d8
   20d9e:	2200      	movs	r2, #0
   20da0:	f7f8 f946 	bl	19030 <__aeabi_dcmpgt>
   20da4:	b190      	cbz	r0, 20dcc <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x84>
  if (double_multiplier == 0.) {
   20da6:	eeb0 0a48 	vmov.f32	s0, s16
   20daa:	eef0 0a68 	vmov.f32	s1, s17
   20dae:	4651      	mov	r1, sl
   20db0:	4658      	mov	r0, fp
   20db2:	f7ff ff5b 	bl	20c6c <_ZN6tflite18QuantizeMultiplierEdPlPi.part.0>
  TFLITE_CHECK_GE(*left_shift, 0);
   20db6:	f8da 3000 	ldr.w	r3, [sl]
   20dba:	2b00      	cmp	r3, #0
   20dbc:	db06      	blt.n	20dcc <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x84>
                       max_real_multiplier);
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
                                   quantized_multiplier, left_shift);
}
   20dbe:	ecbd 8b02 	vpop	{d8}
   20dc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return __b;
   20dc6:	ed9f 8b02 	vldr	d8, [pc, #8]	@ 20dd0 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x88>
   20dca:	e7ec      	b.n	20da6 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x5e>
  TFLITE_CHECK_GT(double_multiplier, 1.);
   20dcc:	f004 fad8 	bl	25380 <abort>
   20dd0:	ffc00000 	.word	0xffc00000
   20dd4:	41dfffff 	.word	0x41dfffff
   20dd8:	3ff00000 	.word	0x3ff00000

00020ddc <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
   20ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
   20de0:	2401      	movs	r4, #1
                         int total_signed_bits) {
   20de2:	4607      	mov	r7, r0
      1.0 * ((1 << input_integer_bits) - 1) *
   20de4:	fa04 f000 	lsl.w	r0, r4, r0
   20de8:	3801      	subs	r0, #1
                         int total_signed_bits) {
   20dea:	460e      	mov	r6, r1
   20dec:	4615      	mov	r5, r2
      1.0 * ((1 << input_integer_bits) - 1) *
   20dee:	f7f7 fe25 	bl	18a3c <__aeabi_i2d>
      (1LL << (total_signed_bits - input_integer_bits)) /
   20df2:	1bed      	subs	r5, r5, r7
      1.0 * ((1 << input_integer_bits) - 1) *
   20df4:	4689      	mov	r9, r1
      (1LL << (total_signed_bits - input_integer_bits)) /
   20df6:	f1c5 0320 	rsb	r3, r5, #32
   20dfa:	f1a5 0120 	sub.w	r1, r5, #32
   20dfe:	fa24 f303 	lsr.w	r3, r4, r3
   20e02:	fa04 f101 	lsl.w	r1, r4, r1
      1.0 * ((1 << input_integer_bits) - 1) *
   20e06:	4680      	mov	r8, r0
   20e08:	4319      	orrs	r1, r3
   20e0a:	fa04 f005 	lsl.w	r0, r4, r5
   20e0e:	f7f7 fe51 	bl	18ab4 <__aeabi_l2d>
   20e12:	4602      	mov	r2, r0
   20e14:	460b      	mov	r3, r1
   20e16:	4640      	mov	r0, r8
   20e18:	4649      	mov	r1, r9
   20e1a:	f7f7 fe79 	bl	18b10 <__aeabi_dmul>
      (1LL << input_left_shift);
   20e1e:	f1c6 0320 	rsb	r3, r6, #32
      1.0 * ((1 << input_integer_bits) - 1) *
   20e22:	4689      	mov	r9, r1
      (1LL << input_left_shift);
   20e24:	f1a6 0120 	sub.w	r1, r6, #32
   20e28:	fa24 f303 	lsr.w	r3, r4, r3
   20e2c:	fa04 f101 	lsl.w	r1, r4, r1
      1.0 * ((1 << input_integer_bits) - 1) *
   20e30:	4680      	mov	r8, r0
      (1LL << (total_signed_bits - input_integer_bits)) /
   20e32:	4319      	orrs	r1, r3
   20e34:	fa04 f006 	lsl.w	r0, r4, r6
   20e38:	f7f7 fe3c 	bl	18ab4 <__aeabi_l2d>
   20e3c:	4602      	mov	r2, r0
   20e3e:	460b      	mov	r3, r1
  const double max_input_rescaled =
   20e40:	4640      	mov	r0, r8
   20e42:	4649      	mov	r1, r9
   20e44:	f7f7 ff8e 	bl	18d64 <__aeabi_ddiv>
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
   20e48:	ec41 0b10 	vmov	d0, r0, r1
   20e4c:	f004 f9c4 	bl	251d8 <floor>
   20e50:	ec51 0b10 	vmov	r0, r1, d0
   20e54:	f7f8 f90c 	bl	19070 <__aeabi_d2iz>
#endif  // TFLITE_EMULATE_FLOAT
}
   20e58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00020e5c <_ZN6tflite7InitAddEP13TfLiteContextPKcj>:
}

}  // namespace

void* InitAdd(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   20e5c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   20e5e:	b10b      	cbz	r3, 20e64 <_ZN6tflite7InitAddEP13TfLiteContextPKcj+0x8>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
   20e60:	213c      	movs	r1, #60	@ 0x3c
   20e62:	4718      	bx	r3
void* InitAdd(TfLiteContext* context, const char* buffer, size_t length) {
   20e64:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   20e66:	f004 fa8b 	bl	25380 <abort>
   20e6a:	bf00      	nop
   20e6c:	0000      	movs	r0, r0
	...

00020e70 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode>:
}

TfLiteStatus PrepareAdd(TfLiteContext* context, TfLiteNode* node) {
   20e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20e74:	ed2d 8b06 	vpush	{d8-d10}
  TFLITE_DCHECK(node->user_data != nullptr);
   20e78:	68cb      	ldr	r3, [r1, #12]
TfLiteStatus PrepareAdd(TfLiteContext* context, TfLiteNode* node) {
   20e7a:	b089      	sub	sp, #36	@ 0x24
  TFLITE_DCHECK(node->user_data != nullptr);
   20e7c:	2b00      	cmp	r3, #0
   20e7e:	f000 8113 	beq.w	210a8 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x238>
  TFLITE_DCHECK(node->builtin_data != nullptr);
   20e82:	690b      	ldr	r3, [r1, #16]
   20e84:	468a      	mov	sl, r1
   20e86:	2b00      	cmp	r3, #0
   20e88:	f000 810e 	beq.w	210a8 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x238>

  TF_LITE_REMOVE_VIRTUAL_DELETE
};

inline MicroContext* GetMicroContext(const struct TfLiteContext* context) {
  return reinterpret_cast<MicroContext*>(context->impl_);
   20e8c:	6884      	ldr	r4, [r0, #8]

  MicroContext* micro_context = GetMicroContext(context);

  TfLiteTensor* input1 =
      micro_context->AllocateTempInputTensor(node, kInputTensor1);
   20e8e:	6823      	ldr	r3, [r4, #0]
   20e90:	4607      	mov	r7, r0
   20e92:	699b      	ldr	r3, [r3, #24]
   20e94:	2200      	movs	r2, #0
   20e96:	4620      	mov	r0, r4
   20e98:	4798      	blx	r3
  TF_LITE_ENSURE(context, input1 != nullptr);
   20e9a:	4605      	mov	r5, r0
   20e9c:	2800      	cmp	r0, #0
   20e9e:	d044      	beq.n	20f2a <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0xba>
  TfLiteTensor* input2 =
      micro_context->AllocateTempInputTensor(node, kInputTensor2);
   20ea0:	6823      	ldr	r3, [r4, #0]
   20ea2:	2201      	movs	r2, #1
   20ea4:	699b      	ldr	r3, [r3, #24]
   20ea6:	4651      	mov	r1, sl
   20ea8:	4620      	mov	r0, r4
   20eaa:	4798      	blx	r3
  TF_LITE_ENSURE(context, input2 != nullptr);
   20eac:	4606      	mov	r6, r0
   20eae:	2800      	cmp	r0, #0
   20eb0:	d03b      	beq.n	20f2a <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0xba>
  TfLiteTensor* output =
      micro_context->AllocateTempOutputTensor(node, kOutputTensor);
   20eb2:	6823      	ldr	r3, [r4, #0]
   20eb4:	2200      	movs	r2, #0
   20eb6:	69db      	ldr	r3, [r3, #28]
   20eb8:	4651      	mov	r1, sl
   20eba:	4620      	mov	r0, r4
   20ebc:	4798      	blx	r3
  TF_LITE_ENSURE(context, output != nullptr);
   20ebe:	4680      	mov	r8, r0
   20ec0:	2800      	cmp	r0, #0
   20ec2:	d032      	beq.n	20f2a <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0xba>

  if (input1->type == kTfLiteInt16) {
   20ec4:	7f2b      	ldrb	r3, [r5, #28]
   20ec6:	2b07      	cmp	r3, #7
   20ec8:	d105      	bne.n	20ed6 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x66>
    TF_LITE_ENSURE_EQ(context, input1->params.zero_point, 0);
   20eca:	68eb      	ldr	r3, [r5, #12]
   20ecc:	bb6b      	cbnz	r3, 20f2a <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0xba>
    TF_LITE_ENSURE_EQ(context, input2->params.zero_point, 0);
   20ece:	68f3      	ldr	r3, [r6, #12]
   20ed0:	bb5b      	cbnz	r3, 20f2a <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0xba>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
   20ed2:	68c3      	ldr	r3, [r0, #12]
   20ed4:	bb4b      	cbnz	r3, 20f2a <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0xba>
  }

  OpData* data = static_cast<OpData*>(node->user_data);
  auto* params = reinterpret_cast<TfLiteAddParams*>(node->builtin_data);
   20ed6:	e9da 9303 	ldrd	r9, r3, [sl, #12]
  data->requires_broadcast = !HaveSameShapes(input1, input2);
   20eda:	4631      	mov	r1, r6
   20edc:	4628      	mov	r0, r5
  auto* params = reinterpret_cast<TfLiteAddParams*>(node->builtin_data);
   20ede:	9305      	str	r3, [sp, #20]
  data->requires_broadcast = !HaveSameShapes(input1, input2);
   20ee0:	f7ff fe92 	bl	20c08 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
  if (output->type == kTfLiteInt8 || output->type == kTfLiteInt16) {
   20ee4:	f898 301c 	ldrb.w	r3, [r8, #28]
  data->requires_broadcast = !HaveSameShapes(input1, input2);
   20ee8:	f080 0001 	eor.w	r0, r0, #1
  if (output->type == kTfLiteInt8 || output->type == kTfLiteInt16) {
   20eec:	2b09      	cmp	r3, #9
  data->requires_broadcast = !HaveSameShapes(input1, input2);
   20eee:	f889 0000 	strb.w	r0, [r9]
  if (output->type == kTfLiteInt8 || output->type == kTfLiteInt16) {
   20ef2:	f000 80a3 	beq.w	2103c <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x1cc>
   20ef6:	2b07      	cmp	r3, #7
   20ef8:	d01d      	beq.n	20f36 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0xc6>
  } else if (output->type == kTfLiteFloat32) {
   20efa:	2b01      	cmp	r3, #1
   20efc:	f000 80ae 	beq.w	2105c <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x1ec>

  TF_LITE_ENSURE_STATUS(
      CalculateOpData(context, params, input1, input2, output, data));

  micro_context->DeallocateTempTfLiteTensor(input1);
   20f00:	6823      	ldr	r3, [r4, #0]
   20f02:	4629      	mov	r1, r5
   20f04:	4620      	mov	r0, r4
   20f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   20f08:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(input2);
   20f0a:	6823      	ldr	r3, [r4, #0]
   20f0c:	4631      	mov	r1, r6
   20f0e:	4620      	mov	r0, r4
   20f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   20f12:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
   20f14:	6823      	ldr	r3, [r4, #0]
   20f16:	4620      	mov	r0, r4
   20f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   20f1a:	4641      	mov	r1, r8
   20f1c:	4798      	blx	r3

  return kTfLiteOk;
   20f1e:	2000      	movs	r0, #0
}
   20f20:	b009      	add	sp, #36	@ 0x24
   20f22:	ecbd 8b06 	vpop	{d8-d10}
   20f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE(context, input1 != nullptr);
   20f2a:	2001      	movs	r0, #1
}
   20f2c:	b009      	add	sp, #36	@ 0x24
   20f2e:	ecbd 8b06 	vpop	{d8-d10}
   20f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    data->input1_offset = -input1->params.zero_point;
   20f36:	68eb      	ldr	r3, [r5, #12]
    data->output_offset = output->params.zero_point;
   20f38:	f8d8 200c 	ldr.w	r2, [r8, #12]
   20f3c:	ed9f 7b5c 	vldr	d7, [pc, #368]	@ 210b0 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x240>
    data->input1_offset = -input1->params.zero_point;
   20f40:	425b      	negs	r3, r3
   20f42:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
    data->input2_offset = -input2->params.zero_point;
   20f46:	68f3      	ldr	r3, [r6, #12]
    data->output_offset = output->params.zero_point;
   20f48:	ed8d 7b06 	vstr	d7, [sp, #24]
    data->input2_offset = -input2->params.zero_point;
   20f4c:	425b      	negs	r3, r3
   20f4e:	f8c9 302c 	str.w	r3, [r9, #44]	@ 0x2c
    data->left_shift = (output->type == kTfLiteInt16) ? 15 : 20;
   20f52:	230f      	movs	r3, #15
      if (__a < __b)
   20f54:	ed96 8a02 	vldr	s16, [r6, #8]
   20f58:	ed95 aa02 	vldr	s20, [r5, #8]
    data->output_offset = output->params.zero_point;
   20f5c:	f8c9 2030 	str.w	r2, [r9, #48]	@ 0x30
   20f60:	eeb4 aac8 	vcmpe.f32	s20, s16
   20f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        2 * static_cast<double>(
   20f68:	bfb4      	ite	lt
   20f6a:	ee18 0a10 	vmovlt	r0, s16
   20f6e:	ee1a 0a10 	vmovge	r0, s20
    data->left_shift = (output->type == kTfLiteInt16) ? 15 : 20;
   20f72:	f8c9 3024 	str.w	r3, [r9, #36]	@ 0x24
        2 * static_cast<double>(
   20f76:	f7f7 fd73 	bl	18a60 <__aeabi_f2d>
   20f7a:	4682      	mov	sl, r0
   20f7c:	468b      	mov	fp, r1
    const double real_input1_multiplier =
   20f7e:	4652      	mov	r2, sl
   20f80:	465b      	mov	r3, fp
   20f82:	494f      	ldr	r1, [pc, #316]	@ (210c0 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x250>)
   20f84:	2000      	movs	r0, #0
   20f86:	f7f7 feed 	bl	18d64 <__aeabi_ddiv>
    const double real_input2_multiplier =
   20f8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
        static_cast<double>(input2->params.scale) / twice_max_input_scale;
   20f8e:	ee18 0a10 	vmov	r0, s16
   20f92:	f7f7 fd65 	bl	18a60 <__aeabi_f2d>
    const double real_input2_multiplier =
   20f96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   20f9a:	f7f7 fdb9 	bl	18b10 <__aeabi_dmul>
                std::max(input1->params.scale, input2->params.scale));
   20f9e:	4652      	mov	r2, sl
   20fa0:	465b      	mov	r3, fp
    const double real_input2_multiplier =
   20fa2:	ec41 0b19 	vmov	d9, r0, r1
                std::max(input1->params.scale, input2->params.scale));
   20fa6:	4650      	mov	r0, sl
   20fa8:	4659      	mov	r1, fp
   20faa:	f7f7 fbfb 	bl	187a4 <__adddf3>
   20fae:	4682      	mov	sl, r0
        ((1 << data->left_shift) * static_cast<double>(output->params.scale));
   20fb0:	f8d8 0008 	ldr.w	r0, [r8, #8]
                std::max(input1->params.scale, input2->params.scale));
   20fb4:	468b      	mov	fp, r1
        ((1 << data->left_shift) * static_cast<double>(output->params.scale));
   20fb6:	f7f7 fd53 	bl	18a60 <__aeabi_f2d>
   20fba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   20fbe:	f7f7 fda7 	bl	18b10 <__aeabi_dmul>
   20fc2:	4602      	mov	r2, r0
   20fc4:	460b      	mov	r3, r1
    const double real_output_multiplier =
   20fc6:	4650      	mov	r0, sl
   20fc8:	4659      	mov	r1, fp
   20fca:	f7f7 fecb 	bl	18d64 <__aeabi_ddiv>
   20fce:	ec41 0b18 	vmov	d8, r0, r1
        static_cast<double>(input1->params.scale) / twice_max_input_scale;
   20fd2:	ee1a 0a10 	vmov	r0, s20
   20fd6:	f7f7 fd43 	bl	18a60 <__aeabi_f2d>
    const double real_input1_multiplier =
   20fda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   20fde:	f7f7 fd97 	bl	18b10 <__aeabi_dmul>
    QuantizeMultiplierSmallerThanOneExp(
   20fe2:	f109 0b04 	add.w	fp, r9, #4
   20fe6:	f109 0a14 	add.w	sl, r9, #20
    const double real_input1_multiplier =
   20fea:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplierSmallerThanOneExp(
   20fee:	4659      	mov	r1, fp
   20ff0:	4650      	mov	r0, sl
   20ff2:	f7ff fe83 	bl	20cfc <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
    QuantizeMultiplierSmallerThanOneExp(
   20ff6:	eeb0 0a49 	vmov.f32	s0, s18
   20ffa:	eef0 0a69 	vmov.f32	s1, s19
   20ffe:	f109 0108 	add.w	r1, r9, #8
   21002:	f109 0018 	add.w	r0, r9, #24
   21006:	f7ff fe79 	bl	20cfc <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
    QuantizeMultiplierSmallerThanOneExp(
   2100a:	eeb0 0a48 	vmov.f32	s0, s16
   2100e:	eef0 0a68 	vmov.f32	s1, s17
   21012:	f109 0120 	add.w	r1, r9, #32
   21016:	f109 001c 	add.w	r0, r9, #28
   2101a:	f7ff fe6f 	bl	20cfc <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
   2101e:	9b05      	ldr	r3, [sp, #20]
   21020:	7819      	ldrb	r1, [r3, #0]
   21022:	f109 0310 	add.w	r3, r9, #16
   21026:	9300      	str	r3, [sp, #0]
   21028:	4638      	mov	r0, r7
   2102a:	f109 030c 	add.w	r3, r9, #12
   2102e:	4642      	mov	r2, r8
   21030:	f7ff fbfe 	bl	20830 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
   21034:	2800      	cmp	r0, #0
   21036:	f43f af63 	beq.w	20f00 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x90>
   2103a:	e777      	b.n	20f2c <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0xbc>
    data->input1_offset = -input1->params.zero_point;
   2103c:	68eb      	ldr	r3, [r5, #12]
    data->output_offset = output->params.zero_point;
   2103e:	f8d8 200c 	ldr.w	r2, [r8, #12]
    data->input1_offset = -input1->params.zero_point;
   21042:	425b      	negs	r3, r3
    data->output_offset = output->params.zero_point;
   21044:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 210b8 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x248>
    data->input1_offset = -input1->params.zero_point;
   21048:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
    data->input2_offset = -input2->params.zero_point;
   2104c:	68f3      	ldr	r3, [r6, #12]
   2104e:	425b      	negs	r3, r3
   21050:	f8c9 302c 	str.w	r3, [r9, #44]	@ 0x2c
    data->output_offset = output->params.zero_point;
   21054:	ed8d 7b06 	vstr	d7, [sp, #24]
    data->left_shift = (output->type == kTfLiteInt16) ? 15 : 20;
   21058:	2314      	movs	r3, #20
   2105a:	e77b      	b.n	20f54 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0xe4>
    CalculateActivationRange(params->activation,
   2105c:	9b05      	ldr	r3, [sp, #20]
   2105e:	781b      	ldrb	r3, [r3, #0]
// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
   21060:	2b01      	cmp	r3, #1
   21062:	d00b      	beq.n	2107c <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x20c>
    *activation_min = 0;
    *activation_max = std::numeric_limits<T>::max();
  } else if (activation == kTfLiteActRelu6) {
   21064:	2b03      	cmp	r3, #3
   21066:	d010      	beq.n	2108a <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x21a>
    *activation_min = 0;
    *activation_max = 6;
  } else if (activation == kTfLiteActReluN1To1) {
   21068:	2b02      	cmp	r3, #2
   2106a:	d015      	beq.n	21098 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x228>
    *activation_min = -1;
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
   2106c:	f46f 0300 	mvn.w	r3, #8388608	@ 0x800000
   21070:	f8c9 3034 	str.w	r3, [r9, #52]	@ 0x34
    *activation_max = std::numeric_limits<T>::max();
   21074:	4b13      	ldr	r3, [pc, #76]	@ (210c4 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x254>)
   21076:	f8c9 3038 	str.w	r3, [r9, #56]	@ 0x38
  TF_LITE_ENSURE_STATUS(
   2107a:	e741      	b.n	20f00 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x90>
    *activation_min = 0;
   2107c:	2300      	movs	r3, #0
   2107e:	f8c9 3034 	str.w	r3, [r9, #52]	@ 0x34
    *activation_max = std::numeric_limits<T>::max();
   21082:	4b10      	ldr	r3, [pc, #64]	@ (210c4 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x254>)
   21084:	f8c9 3038 	str.w	r3, [r9, #56]	@ 0x38
   21088:	e73a      	b.n	20f00 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x90>
    *activation_min = 0;
   2108a:	2300      	movs	r3, #0
   2108c:	f8c9 3034 	str.w	r3, [r9, #52]	@ 0x34
    *activation_max = 6;
   21090:	4b0d      	ldr	r3, [pc, #52]	@ (210c8 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x258>)
   21092:	f8c9 3038 	str.w	r3, [r9, #56]	@ 0x38
   21096:	e733      	b.n	20f00 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x90>
    *activation_min = -1;
   21098:	4b0c      	ldr	r3, [pc, #48]	@ (210cc <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x25c>)
   2109a:	f8c9 3034 	str.w	r3, [r9, #52]	@ 0x34
    *activation_max = 1;
   2109e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
   210a2:	f8c9 3038 	str.w	r3, [r9, #56]	@ 0x38
   210a6:	e72b      	b.n	20f00 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK(node->user_data != nullptr);
   210a8:	f004 f96a 	bl	25380 <abort>
   210ac:	f3af 8000 	nop.w
   210b0:	00000000 	.word	0x00000000
   210b4:	40e00000 	.word	0x40e00000
   210b8:	00000000 	.word	0x00000000
   210bc:	41300000 	.word	0x41300000
   210c0:	3fe00000 	.word	0x3fe00000
   210c4:	7f7fffff 	.word	0x7f7fffff
   210c8:	40c00000 	.word	0x40c00000
   210cc:	bf800000 	.word	0xbf800000

000210d0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i.part.0>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
   210d0:	b508      	push	{r3, lr}
  assert(exponent >= 0);
  assert(exponent <= 31);
   210d2:	4a03      	ldr	r2, [pc, #12]	@ (210e0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i.part.0+0x10>)
   210d4:	4b03      	ldr	r3, [pc, #12]	@ (210e4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i.part.0+0x14>)
   210d6:	4804      	ldr	r0, [pc, #16]	@ (210e8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i.part.0+0x18>)
   210d8:	f240 1167 	movw	r1, #359	@ 0x167
   210dc:	f004 f958 	bl	25390 <__assert_func>
   210e0:	000439cc 	.word	0x000439cc
   210e4:	000439bc 	.word	0x000439bc
   210e8:	00043a28 	.word	0x00043a28

000210ec <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE>:
      }
    }
  }
}

inline int8_t AddFunc(int8_t x, int8_t y, const ArithmeticParams& params) {
   210ec:	b538      	push	{r3, r4, r5, lr}
  const int32_t input1_val = params.input1_offset + x;
   210ee:	6853      	ldr	r3, [r2, #4]
  const int32_t input2_val = params.input2_offset + y;
  const int32_t shifted_input1_val = input1_val * (1 << params.left_shift);
   210f0:	6994      	ldr	r4, [r2, #24]
  const int32_t input1_val = params.input1_offset + x;
   210f2:	4418      	add	r0, r3
  const int32_t input2_val = params.input2_offset + y;
   210f4:	6893      	ldr	r3, [r2, #8]
   210f6:	4419      	add	r1, r3
  const int32_t shifted_input2_val = input2_val * (1 << params.left_shift);
  const int32_t scaled_input1_val =
      MultiplyByQuantizedMultiplierSmallerThanOneExp(
          shifted_input1_val, params.input1_multiplier, params.input1_shift);
   210f8:	69d3      	ldr	r3, [r2, #28]
  const int32_t shifted_input1_val = input1_val * (1 << params.left_shift);
   210fa:	40a0      	lsls	r0, r4
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   210fc:	4283      	cmp	r3, r0
  const int32_t shifted_input2_val = input2_val * (1 << params.left_shift);
   210fe:	fa01 f104 	lsl.w	r1, r1, r4
          shifted_input1_val, params.input1_multiplier, params.input1_shift);
   21102:	6a14      	ldr	r4, [r2, #32]
   21104:	f000 80a2 	beq.w	2124c <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x160>
  std::int64_t ab_64 = a_64 * b_64;
   21108:	fb80 0303 	smull	r0, r3, r0, r3
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   2110c:	2b00      	cmp	r3, #0
   2110e:	db70      	blt.n	211f2 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x106>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   21110:	f110 4080 	adds.w	r0, r0, #1073741824	@ 0x40000000
   21114:	f143 0c00 	adc.w	ip, r3, #0
   21118:	0fc3      	lsrs	r3, r0, #31
   2111a:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
  assert(exponent >= 0);
   2111e:	2c00      	cmp	r4, #0
#else
inline int32_t MultiplyByQuantizedMultiplierSmallerThanOneExp(
    int32_t x, int32_t quantized_multiplier, int left_shift) {
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  return RoundingDivideByPOT(
   21120:	f1c4 0000 	rsb	r0, r4, #0
   21124:	f300 80a6 	bgt.w	21274 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x188>
  assert(exponent <= 31);
   21128:	341f      	adds	r4, #31
   2112a:	f2c0 80aa 	blt.w	21282 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x196>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   2112e:	2401      	movs	r4, #1
   21130:	4084      	lsls	r4, r0
   21132:	3c01      	subs	r4, #1
  return a ? BitNot(zero) : zero;
   21134:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
  return a >> offset;
   21138:	fa43 f000 	asr.w	r0, r3, r0
  return a & b;
   2113c:	4023      	ands	r3, r4
  return a + b;
   2113e:	eb0c 0464 	add.w	r4, ip, r4, asr #1
   21142:	42a3      	cmp	r3, r4
   21144:	bfc8      	it	gt
   21146:	3001      	addgt	r0, #1
  const int32_t scaled_input2_val =
      MultiplyByQuantizedMultiplierSmallerThanOneExp(
          shifted_input2_val, params.input2_multiplier, params.input2_shift);
   21148:	e9d2 3409 	ldrd	r3, r4, [r2, #36]	@ 0x24
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   2114c:	428b      	cmp	r3, r1
   2114e:	f000 8084 	beq.w	2125a <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x16e>
  std::int64_t ab_64 = a_64 * b_64;
   21152:	fb81 1303 	smull	r1, r3, r1, r3
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   21156:	2b00      	cmp	r3, #0
   21158:	db5a      	blt.n	21210 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x124>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   2115a:	f111 4180 	adds.w	r1, r1, #1073741824	@ 0x40000000
   2115e:	f143 0300 	adc.w	r3, r3, #0
   21162:	0fc9      	lsrs	r1, r1, #31
   21164:	ea41 0143 	orr.w	r1, r1, r3, lsl #1
  assert(exponent >= 0);
   21168:	2c00      	cmp	r4, #0
   2116a:	f1c4 0300 	rsb	r3, r4, #0
   2116e:	f300 8081 	bgt.w	21274 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x188>
  assert(exponent <= 31);
   21172:	341f      	adds	r4, #31
   21174:	f2c0 8085 	blt.w	21282 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x196>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   21178:	2401      	movs	r4, #1
   2117a:	409c      	lsls	r4, r3
   2117c:	3c01      	subs	r4, #1
  return a >> offset;
   2117e:	ea4f 0c64 	mov.w	ip, r4, asr #1
   21182:	fa41 f303 	asr.w	r3, r1, r3
  return a & b;
   21186:	400c      	ands	r4, r1
  return a + b;
   21188:	eb0c 7cd1 	add.w	ip, ip, r1, lsr #31
   2118c:	4564      	cmp	r4, ip
   2118e:	bfd4      	ite	le
   21190:	4619      	movle	r1, r3
   21192:	1c59      	addgt	r1, r3, #1
  const int32_t raw_sum = scaled_input1_val + scaled_input2_val;
  const int32_t raw_output =
      MultiplyByQuantizedMultiplierSmallerThanOneExp(
          raw_sum, params.output_multiplier, params.output_shift) +
   21194:	6913      	ldr	r3, [r2, #16]
  const int32_t raw_sum = scaled_input1_val + scaled_input2_val;
   21196:	4401      	add	r1, r0
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   21198:	428b      	cmp	r3, r1
          raw_sum, params.output_multiplier, params.output_shift) +
   2119a:	6950      	ldr	r0, [r2, #20]
   2119c:	d064      	beq.n	21268 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x17c>
  std::int64_t ab_64 = a_64 * b_64;
   2119e:	fb83 3101 	smull	r3, r1, r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   211a2:	2900      	cmp	r1, #0
   211a4:	db43      	blt.n	2122e <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x142>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   211a6:	f113 4380 	adds.w	r3, r3, #1073741824	@ 0x40000000
   211aa:	f141 0100 	adc.w	r1, r1, #0
   211ae:	0fdb      	lsrs	r3, r3, #31
   211b0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  assert(exponent >= 0);
   211b4:	2800      	cmp	r0, #0
   211b6:	f1c0 0400 	rsb	r4, r0, #0
   211ba:	dc5b      	bgt.n	21274 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x188>
  assert(exponent <= 31);
   211bc:	301f      	adds	r0, #31
   211be:	db60      	blt.n	21282 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x196>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   211c0:	2101      	movs	r1, #1
   211c2:	40a1      	lsls	r1, r4
   211c4:	3901      	subs	r1, #1
  return a & b;
   211c6:	ea01 0c03 	and.w	ip, r1, r3
  return a >> offset;
   211ca:	1049      	asrs	r1, r1, #1
   211cc:	fa43 f004 	asr.w	r0, r3, r4
  return a + b;
   211d0:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
   211d4:	458c      	cmp	ip, r1
   211d6:	bfc8      	it	gt
   211d8:	3001      	addgt	r0, #1
   211da:	68d4      	ldr	r4, [r2, #12]
      if (__b < __a)
   211dc:	e9d2 130b 	ldrd	r1, r3, [r2, #44]	@ 0x2c
   211e0:	4420      	add	r0, r4
      if (__a < __b)
   211e2:	4288      	cmp	r0, r1
   211e4:	bfb8      	it	lt
   211e6:	4608      	movlt	r0, r1
      if (__b < __a)
   211e8:	4298      	cmp	r0, r3
   211ea:	bfa8      	it	ge
   211ec:	4618      	movge	r0, r3
      params.output_offset;
  const int32_t clamped_output =
      std::min(params.quantized_activation_max,
               std::max(params.quantized_activation_min, raw_output));
  return static_cast<int8_t>(clamped_output);
}
   211ee:	b240      	sxtb	r0, r0
   211f0:	bd38      	pop	{r3, r4, r5, pc}
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   211f2:	4d25      	ldr	r5, [pc, #148]	@ (21288 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x19c>)
   211f4:	1940      	adds	r0, r0, r5
   211f6:	f163 0300 	sbc.w	r3, r3, #0
   211fa:	2b00      	cmp	r3, #0
   211fc:	da04      	bge.n	21208 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x11c>
   211fe:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
   21202:	1940      	adds	r0, r0, r5
   21204:	f143 0300 	adc.w	r3, r3, #0
   21208:	0fc0      	lsrs	r0, r0, #31
   2120a:	ea40 0343 	orr.w	r3, r0, r3, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   2120e:	e786      	b.n	2111e <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x32>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   21210:	4d1d      	ldr	r5, [pc, #116]	@ (21288 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x19c>)
   21212:	1949      	adds	r1, r1, r5
   21214:	f163 0300 	sbc.w	r3, r3, #0
   21218:	2b00      	cmp	r3, #0
   2121a:	da04      	bge.n	21226 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x13a>
   2121c:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
   21220:	1949      	adds	r1, r1, r5
   21222:	f143 0300 	adc.w	r3, r3, #0
   21226:	0fc9      	lsrs	r1, r1, #31
   21228:	ea41 0143 	orr.w	r1, r1, r3, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   2122c:	e79c      	b.n	21168 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x7c>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   2122e:	4c16      	ldr	r4, [pc, #88]	@ (21288 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x19c>)
   21230:	191b      	adds	r3, r3, r4
   21232:	f161 0100 	sbc.w	r1, r1, #0
   21236:	2900      	cmp	r1, #0
   21238:	da04      	bge.n	21244 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x158>
   2123a:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
   2123e:	191b      	adds	r3, r3, r4
   21240:	f141 0100 	adc.w	r1, r1, #0
   21244:	0fdb      	lsrs	r3, r3, #31
   21246:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   2124a:	e7b3      	b.n	211b4 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0xc8>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   2124c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
   21250:	f47f af5a 	bne.w	21108 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x1c>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   21254:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
   21258:	e761      	b.n	2111e <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x32>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   2125a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
   2125e:	f47f af78 	bne.w	21152 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x66>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   21262:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
   21266:	e77f      	b.n	21168 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x7c>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   21268:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
   2126c:	d197      	bne.n	2119e <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0xb2>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   2126e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
   21272:	e79f      	b.n	211b4 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0xc8>
  assert(exponent >= 0);
   21274:	4b05      	ldr	r3, [pc, #20]	@ (2128c <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x1a0>)
   21276:	4a06      	ldr	r2, [pc, #24]	@ (21290 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x1a4>)
   21278:	4806      	ldr	r0, [pc, #24]	@ (21294 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x1a8>)
   2127a:	f44f 71b3 	mov.w	r1, #358	@ 0x166
   2127e:	f004 f887 	bl	25390 <__assert_func>
   21282:	f7ff ff25 	bl	210d0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i.part.0>
   21286:	bf00      	nop
   21288:	c0000001 	.word	0xc0000001
   2128c:	00043a78 	.word	0x00043a78
   21290:	000439cc 	.word	0x000439cc
   21294:	00043a28 	.word	0x00043a28

00021298 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>:
//
// Returns true iff there is some sort of broadcast, which includes five-fold
// patterns and falling back to generic broadcast.
inline bool ProcessBroadcastShapes(const RuntimeShape& shape0,
                                   const RuntimeShape& shape1,
                                   tflite::ArithmeticParams* params) {
   21298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
               0;
  }

  ~RuntimeShape() {}

  int32_t DimensionsCount() const { return size_; }
   2129c:	f8d0 c000 	ldr.w	ip, [r0]
   212a0:	f8d1 8000 	ldr.w	r8, [r1]
      if (__a < __b)
   212a4:	45c4      	cmp	ip, r8
   212a6:	4665      	mov	r5, ip
   212a8:	b08c      	sub	sp, #48	@ 0x30
   212aa:	bfb8      	it	lt
   212ac:	4645      	movlt	r5, r8
  const int dims_count =
      std::max(shape0.DimensionsCount(), shape1.DimensionsCount());

  params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
   212ae:	2304      	movs	r3, #4
      : size_(new_shape_size) {
    // If the following check fails, it is likely because a 4D-only kernel is
    // being used with an array of larger dimension count.
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    const int size_increase = new_shape_size - shape.DimensionsCount();
    for (int i = 0; i < size_increase; ++i) {
   212b0:	ebb5 060c 	subs.w	r6, r5, ip
                                   tflite::ArithmeticParams* params) {
   212b4:	460f      	mov	r7, r1
   212b6:	4614      	mov	r4, r2
      : size_(new_shape_size) {
   212b8:	9500      	str	r5, [sp, #0]
  params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
   212ba:	7013      	strb	r3, [r2, #0]
    for (int i = 0; i < size_increase; ++i) {
   212bc:	f000 810e 	beq.w	214dc <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x244>
    TFLITE_DCHECK_LT(i, size_);
   212c0:	2d00      	cmp	r5, #0
   212c2:	f340 80fe 	ble.w	214c2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22a>
   212c6:	466a      	mov	r2, sp
    for (int i = 0; i < size_increase; ++i) {
   212c8:	2300      	movs	r3, #0
    dims_[i] = val;
   212ca:	2101      	movs	r1, #1
   212cc:	e002      	b.n	212d4 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x3c>
    TFLITE_DCHECK_LT(i, size_);
   212ce:	42ab      	cmp	r3, r5
   212d0:	f000 80f7 	beq.w	214c2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22a>
    for (int i = 0; i < size_increase; ++i) {
   212d4:	3301      	adds	r3, #1
   212d6:	429e      	cmp	r6, r3
    dims_[i] = val;
   212d8:	f842 1f04 	str.w	r1, [r2, #4]!
    for (int i = 0; i < size_increase; ++i) {
   212dc:	d1f7      	bne.n	212ce <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x36>
      SetDim(i, pad_value);
    }
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   212de:	f10d 0904 	add.w	r9, sp, #4
   212e2:	ea4f 028c 	mov.w	r2, ip, lsl #2
   212e6:	1d01      	adds	r1, r0, #4
   212e8:	eb09 0086 	add.w	r0, r9, r6, lsl #2
   212ec:	f7f7 f948 	bl	18580 <memcpy>
    for (int i = 0; i < size_increase; ++i) {
   212f0:	ebb5 0208 	subs.w	r2, r5, r8
      : size_(new_shape_size) {
   212f4:	9506      	str	r5, [sp, #24]
    for (int i = 0; i < size_increase; ++i) {
   212f6:	f000 80ca 	beq.w	2148e <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1f6>
   212fa:	ab06      	add	r3, sp, #24
   212fc:	2000      	movs	r0, #0
    dims_[i] = val;
   212fe:	2101      	movs	r1, #1
   21300:	e002      	b.n	21308 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x70>
    TFLITE_DCHECK_LT(i, size_);
   21302:	42a8      	cmp	r0, r5
   21304:	f000 80dd 	beq.w	214c2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22a>
    for (int i = 0; i < size_increase; ++i) {
   21308:	3001      	adds	r0, #1
   2130a:	4290      	cmp	r0, r2
    dims_[i] = val;
   2130c:	f843 1f04 	str.w	r1, [r3, #4]!
    for (int i = 0; i < size_increase; ++i) {
   21310:	d1f7      	bne.n	21302 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x6a>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   21312:	ae07      	add	r6, sp, #28
   21314:	ea4f 0288 	mov.w	r2, r8, lsl #2
   21318:	1d39      	adds	r1, r7, #4
   2131a:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   2131e:	f7f7 f92f 	bl	18580 <memcpy>
    return this->size_ == comp.size_ &&
   21322:	9f00      	ldr	r7, [sp, #0]
   21324:	f8dd 8018 	ldr.w	r8, [sp, #24]
   21328:	4547      	cmp	r7, r8
   2132a:	f000 80bc 	beq.w	214a6 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x20e>
  if (extended_shape0 == extended_shape1) {
    params->broadcast_category = BroadcastableOpCategory::kNonBroadcast;
    return false;
  }

  for (int i = dims_count - 1; i >= 0; --i) {
   2132e:	1e6b      	subs	r3, r5, #1
    TFLITE_DCHECK_LT(i, size_);
   21330:	42bb      	cmp	r3, r7
   21332:	f280 80c6 	bge.w	214c2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22a>
    return dims_[i];
   21336:	aa0c      	add	r2, sp, #48	@ 0x30
   21338:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    TFLITE_DCHECK_LT(i, size_);
   2133c:	4543      	cmp	r3, r8
    return dims_[i];
   2133e:	f852 1c2c 	ldr.w	r1, [r2, #-44]
    TFLITE_DCHECK_LT(i, size_);
   21342:	f280 80be 	bge.w	214c2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22a>
   21346:	aa06      	add	r2, sp, #24
   21348:	00ae      	lsls	r6, r5, #2
   2134a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
   2134e:	469c      	mov	ip, r3
   21350:	eb0d 0585 	add.w	r5, sp, r5, lsl #2
    return dims_[i];
   21354:	f852 0904 	ldr.w	r0, [r2], #-4
    if (extended_shape0.Dims(i) == extended_shape1.Dims(i)) {
   21358:	4281      	cmp	r1, r0
   2135a:	f000 80b4 	beq.w	214c6 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22e>
      continue;
    } else if (extended_shape0.Dims(i) == 1) {
   2135e:	2901      	cmp	r1, #1
   21360:	f000 8090 	beq.w	21484 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1ec>
      params->broadcast_category =
          BroadcastableOpCategory::kFirstInputBroadcastsFast;
      break;
    } else if (extended_shape1.Dims(i) == 1) {
   21364:	2801      	cmp	r0, #1
   21366:	f040 8089 	bne.w	2147c <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1e4>

  // From this point it is assumed contractually that corresponding dimensions
  // in shape0 and shape1 are either (a) equal or (b) one or other equals 1.
  const bool swap_inputs = params->broadcast_category ==
                           BroadcastableOpCategory::kSecondInputBroadcastsFast;
  const RuntimeShape* shape_a =
   2136a:	f10d 0c18 	add.w	ip, sp, #24
      swap_inputs ? &extended_shape1 : &extended_shape0;
  const RuntimeShape* shape_b =
   2136e:	46ea      	mov	sl, sp
   21370:	2203      	movs	r2, #3
      swap_inputs ? &extended_shape0 : &extended_shape1;

  int i = dims_count - 1;
  params->broadcast_shape[0] = 1;
   21372:	f04f 0801 	mov.w	r8, #1
   21376:	f04f 0901 	mov.w	r9, #1
      params->broadcast_category =
   2137a:	7022      	strb	r2, [r4, #0]
  params->broadcast_shape[1] = 1;
  params->broadcast_shape[2] = 1;
  params->broadcast_shape[3] = 1;
  params->broadcast_shape[4] = 1;
   2137c:	2201      	movs	r2, #1
   2137e:	eb0a 0706 	add.w	r7, sl, r6
  params->broadcast_shape[0] = 1;
   21382:	e9c4 8914 	strd	r8, r9, [r4, #80]	@ 0x50
   21386:	e9c4 8916 	strd	r8, r9, [r4, #88]	@ 0x58
    TFLITE_DCHECK_LT(i, size_);
   2138a:	f8dc 1000 	ldr.w	r1, [ip]
  params->broadcast_shape[4] = 1;
   2138e:	6622      	str	r2, [r4, #96]	@ 0x60
   21390:	4466      	add	r6, ip
   21392:	e006      	b.n	213a2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x10a>
  // y_0 is greedy: include dims if both or neither equal 1: in other words,
  // test for equality rather than (shape_a->Dims(i) != 1).
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
    params->broadcast_shape[4] *= shape_b->Dims(i);
   21394:	6e22      	ldr	r2, [r4, #96]	@ 0x60
    --i;
   21396:	3b01      	subs	r3, #1
    params->broadcast_shape[4] *= shape_b->Dims(i);
   21398:	fb05 f202 	mul.w	r2, r5, r2
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   2139c:	1c5d      	adds	r5, r3, #1
    params->broadcast_shape[4] *= shape_b->Dims(i);
   2139e:	6622      	str	r2, [r4, #96]	@ 0x60
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   213a0:	d06c      	beq.n	2147c <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1e4>
   213a2:	428b      	cmp	r3, r1
   213a4:	f280 808d 	bge.w	214c2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22a>
   213a8:	f8da 2000 	ldr.w	r2, [sl]
    return dims_[i];
   213ac:	f856 e904 	ldr.w	lr, [r6], #-4
    TFLITE_DCHECK_LT(i, size_);
   213b0:	4293      	cmp	r3, r2
   213b2:	f280 8086 	bge.w	214c2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22a>
    return dims_[i];
   213b6:	f857 5904 	ldr.w	r5, [r7], #-4
   213ba:	4575      	cmp	r5, lr
   213bc:	d0ea      	beq.n	21394 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xfc>
  }
  // Here either input_a or input_b has dim of 1 (if i >= 0).  If it is input_b
  // that has the unit dimension, the next two loops are not entered.
  while (i >= 0 && shape_a->Dims(i) == 1) {
   213be:	1c9e      	adds	r6, r3, #2
   213c0:	eb0a 0786 	add.w	r7, sl, r6, lsl #2
   213c4:	eb0c 0686 	add.w	r6, ip, r6, lsl #2
   213c8:	e00a      	b.n	213e0 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x148>
    TFLITE_DCHECK_LT(i, size_);
   213ca:	4293      	cmp	r3, r2
   213cc:	da79      	bge.n	214c2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22a>
    params->broadcast_shape[3] *= shape_b->Dims(i);
   213ce:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
   213d0:	f857 5d04 	ldr.w	r5, [r7, #-4]!
    --i;
   213d4:	3b01      	subs	r3, #1
    params->broadcast_shape[3] *= shape_b->Dims(i);
   213d6:	fb00 f505 	mul.w	r5, r0, r5
  while (i >= 0 && shape_a->Dims(i) == 1) {
   213da:	1c58      	adds	r0, r3, #1
    params->broadcast_shape[3] *= shape_b->Dims(i);
   213dc:	65e5      	str	r5, [r4, #92]	@ 0x5c
  while (i >= 0 && shape_a->Dims(i) == 1) {
   213de:	d04d      	beq.n	2147c <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1e4>
   213e0:	428b      	cmp	r3, r1
   213e2:	da6e      	bge.n	214c2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22a>
   213e4:	f856 5d04 	ldr.w	r5, [r6, #-4]!
   213e8:	2d01      	cmp	r5, #1
   213ea:	d0ee      	beq.n	213ca <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x132>
  }
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   213ec:	f103 0e02 	add.w	lr, r3, #2
   213f0:	eb0a 078e 	add.w	r7, sl, lr, lsl #2
   213f4:	eb0c 0e8e 	add.w	lr, ip, lr, lsl #2
   213f8:	e006      	b.n	21408 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x170>
    params->broadcast_shape[2] *= shape_a->Dims(i);
   213fa:	6da5      	ldr	r5, [r4, #88]	@ 0x58
    --i;
   213fc:	3b01      	subs	r3, #1
    params->broadcast_shape[2] *= shape_a->Dims(i);
   213fe:	fb06 f505 	mul.w	r5, r6, r5
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   21402:	1c5e      	adds	r6, r3, #1
    params->broadcast_shape[2] *= shape_a->Dims(i);
   21404:	65a5      	str	r5, [r4, #88]	@ 0x58
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   21406:	d039      	beq.n	2147c <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1e4>
   21408:	428b      	cmp	r3, r1
   2140a:	da5a      	bge.n	214c2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22a>
   2140c:	4293      	cmp	r3, r2
    return dims_[i];
   2140e:	f85e 5d04 	ldr.w	r5, [lr, #-4]!
    TFLITE_DCHECK_LT(i, size_);
   21412:	da56      	bge.n	214c2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22a>
   21414:	f857 6d04 	ldr.w	r6, [r7, #-4]!
   21418:	42ae      	cmp	r6, r5
   2141a:	d0ee      	beq.n	213fa <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x162>
  }
  // Here either input_a or input_b has dim of 1 (if i >= 0).
  while (i >= 0 && shape_b->Dims(i) == 1) {
   2141c:	1c9e      	adds	r6, r3, #2
   2141e:	eb0c 0786 	add.w	r7, ip, r6, lsl #2
   21422:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
   21426:	e00a      	b.n	2143e <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1a6>
   21428:	4299      	cmp	r1, r3
   2142a:	dd4a      	ble.n	214c2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22a>
    params->broadcast_shape[1] *= shape_a->Dims(i);
   2142c:	6d60      	ldr	r0, [r4, #84]	@ 0x54
   2142e:	f857 5d04 	ldr.w	r5, [r7, #-4]!
    --i;
   21432:	3b01      	subs	r3, #1
    params->broadcast_shape[1] *= shape_a->Dims(i);
   21434:	fb00 f505 	mul.w	r5, r0, r5
   21438:	6565      	str	r5, [r4, #84]	@ 0x54
  while (i >= 0 && shape_b->Dims(i) == 1) {
   2143a:	1c5d      	adds	r5, r3, #1
   2143c:	d01e      	beq.n	2147c <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1e4>
   2143e:	429a      	cmp	r2, r3
   21440:	dd3f      	ble.n	214c2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22a>
   21442:	f856 5d04 	ldr.w	r5, [r6, #-4]!
   21446:	2d01      	cmp	r5, #1
   21448:	d0ee      	beq.n	21428 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x190>
  }
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   2144a:	1c9e      	adds	r6, r3, #2
   2144c:	eb0a 0786 	add.w	r7, sl, r6, lsl #2
   21450:	eb0c 0686 	add.w	r6, ip, r6, lsl #2
   21454:	e006      	b.n	21464 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1cc>
    params->broadcast_shape[0] *= shape_b->Dims(i);
   21456:	6d25      	ldr	r5, [r4, #80]	@ 0x50
    --i;
   21458:	3b01      	subs	r3, #1
    params->broadcast_shape[0] *= shape_b->Dims(i);
   2145a:	fb00 f505 	mul.w	r5, r0, r5
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   2145e:	1c58      	adds	r0, r3, #1
    params->broadcast_shape[0] *= shape_b->Dims(i);
   21460:	6525      	str	r5, [r4, #80]	@ 0x50
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   21462:	d00b      	beq.n	2147c <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1e4>
   21464:	428b      	cmp	r3, r1
   21466:	da2c      	bge.n	214c2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22a>
   21468:	4293      	cmp	r3, r2
    return dims_[i];
   2146a:	f856 5d04 	ldr.w	r5, [r6, #-4]!
    TFLITE_DCHECK_LT(i, size_);
   2146e:	da28      	bge.n	214c2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22a>
    return dims_[i];
   21470:	f857 0d04 	ldr.w	r0, [r7, #-4]!
   21474:	42a8      	cmp	r0, r5
   21476:	d0ee      	beq.n	21456 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1be>
  }

  // Rarer case is when the broadcast dimensions cannot be handled by a fivefold
  // loop.
  if (i >= 0) {
    params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
   21478:	2304      	movs	r3, #4
   2147a:	7023      	strb	r3, [r4, #0]
      return true;
   2147c:	2001      	movs	r0, #1
  }
  return true;
}
   2147e:	b00c      	add	sp, #48	@ 0x30
   21480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  const RuntimeShape* shape_b =
   21484:	a806      	add	r0, sp, #24
  const RuntimeShape* shape_a =
   21486:	46ec      	mov	ip, sp
  const RuntimeShape* shape_b =
   21488:	4682      	mov	sl, r0
   2148a:	2202      	movs	r2, #2
   2148c:	e771      	b.n	21372 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xda>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   2148e:	ae07      	add	r6, sp, #28
   21490:	ea4f 0288 	mov.w	r2, r8, lsl #2
   21494:	1d39      	adds	r1, r7, #4
   21496:	4630      	mov	r0, r6
   21498:	f7f7 f872 	bl	18580 <memcpy>
    return this->size_ == comp.size_ &&
   2149c:	9f00      	ldr	r7, [sp, #0]
   2149e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   214a2:	4547      	cmp	r7, r8
   214a4:	d10a      	bne.n	214bc <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x224>
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
   214a6:	4631      	mov	r1, r6
   214a8:	4648      	mov	r0, r9
   214aa:	00ba      	lsls	r2, r7, #2
   214ac:	f005 fbfa 	bl	26ca4 <memcmp>
    return this->size_ == comp.size_ &&
   214b0:	b920      	cbnz	r0, 214bc <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x224>
    params->broadcast_category = BroadcastableOpCategory::kNonBroadcast;
   214b2:	2301      	movs	r3, #1
   214b4:	7023      	strb	r3, [r4, #0]
}
   214b6:	b00c      	add	sp, #48	@ 0x30
   214b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  for (int i = dims_count - 1; i >= 0; --i) {
   214bc:	1e6b      	subs	r3, r5, #1
   214be:	f57f af37 	bpl.w	21330 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x98>
    TFLITE_DCHECK_LT(i, size_);
   214c2:	f003 ff5d 	bl	25380 <abort>
   214c6:	f1bc 0c01 	subs.w	ip, ip, #1
   214ca:	d3fa      	bcc.n	214c2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22a>
    TFLITE_DCHECK_LT(i, size_);
   214cc:	45bc      	cmp	ip, r7
   214ce:	daf8      	bge.n	214c2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22a>
   214d0:	45c4      	cmp	ip, r8
    return dims_[i];
   214d2:	f855 1d04 	ldr.w	r1, [r5, #-4]!
    TFLITE_DCHECK_LT(i, size_);
   214d6:	f6ff af3d 	blt.w	21354 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xbc>
   214da:	e7f2      	b.n	214c2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22a>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   214dc:	eb0d 0903 	add.w	r9, sp, r3
   214e0:	ea4f 028c 	mov.w	r2, ip, lsl #2
   214e4:	18c1      	adds	r1, r0, r3
   214e6:	4648      	mov	r0, r9
   214e8:	f7f7 f84a 	bl	18580 <memcpy>
    for (int i = 0; i < size_increase; ++i) {
   214ec:	ebb5 0208 	subs.w	r2, r5, r8
      : size_(new_shape_size) {
   214f0:	9506      	str	r5, [sp, #24]
    for (int i = 0; i < size_increase; ++i) {
   214f2:	d0cc      	beq.n	2148e <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1f6>
    TFLITE_DCHECK_LT(i, size_);
   214f4:	2d00      	cmp	r5, #0
   214f6:	f73f af00 	bgt.w	212fa <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x62>
   214fa:	e7e2      	b.n	214c2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22a>

000214fc <_ZN6tflite12Register_ADDEv>:
                                                   input1, input2, output));

  return kTfLiteOk;
}

TfLiteRegistration Register_ADD() {
   214fc:	b510      	push	{r4, lr}
   214fe:	b082      	sub	sp, #8
  return tflite::micro::RegisterOp(InitAdd, PrepareAdd, EvalAdd);
   21500:	2100      	movs	r1, #0
   21502:	9100      	str	r1, [sp, #0]
   21504:	4b04      	ldr	r3, [pc, #16]	@ (21518 <_ZN6tflite12Register_ADDEv+0x1c>)
   21506:	4a05      	ldr	r2, [pc, #20]	@ (2151c <_ZN6tflite12Register_ADDEv+0x20>)
   21508:	4905      	ldr	r1, [pc, #20]	@ (21520 <_ZN6tflite12Register_ADDEv+0x24>)
TfLiteRegistration Register_ADD() {
   2150a:	4604      	mov	r4, r0
  return tflite::micro::RegisterOp(InitAdd, PrepareAdd, EvalAdd);
   2150c:	f002 f928 	bl	23760 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>
}
   21510:	4620      	mov	r0, r4
   21512:	b002      	add	sp, #8
   21514:	bd10      	pop	{r4, pc}
   21516:	bf00      	nop
   21518:	000226fd 	.word	0x000226fd
   2151c:	00020e71 	.word	0x00020e71
   21520:	00020e5d 	.word	0x00020e5d

00021524 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>:
    desc_stride *= input_shape.Dims(i);
  }
}

template <int N>
inline void NdArrayDescsForElementwiseBroadcast(
   21524:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21528:	b08d      	sub	sp, #52	@ 0x34
    const RuntimeShape& input0_shape, const RuntimeShape& input1_shape,
    NdArrayDesc<N>* desc0_out, NdArrayDesc<N>* desc1_out) {
  TFLITE_DCHECK(desc0_out != nullptr);
   2152a:	2a00      	cmp	r2, #0
   2152c:	f000 8081 	beq.w	21632 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x10e>
   21530:	461d      	mov	r5, r3
  TFLITE_DCHECK(desc1_out != nullptr);
   21532:	2b00      	cmp	r3, #0
   21534:	d07d      	beq.n	21632 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x10e>
   21536:	4614      	mov	r4, r2
  int32_t DimensionsCount() const { return size_; }
   21538:	6802      	ldr	r2, [r0, #0]
      : size_(new_shape_size) {
   2153a:	2304      	movs	r3, #4
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   2153c:	429a      	cmp	r2, r3
      : size_(new_shape_size) {
   2153e:	9300      	str	r3, [sp, #0]
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   21540:	dc77      	bgt.n	21632 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x10e>
    for (int i = 0; i < size_increase; ++i) {
   21542:	1a9b      	subs	r3, r3, r2
   21544:	460e      	mov	r6, r1
   21546:	d00d      	beq.n	21564 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x40>
   21548:	46ee      	mov	lr, sp
   2154a:	f04f 0c00 	mov.w	ip, #0
    dims_[i] = val;
   2154e:	2701      	movs	r7, #1
   21550:	e002      	b.n	21558 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x34>
    TFLITE_DCHECK_LT(i, size_);
   21552:	f1bc 0f04 	cmp.w	ip, #4
   21556:	d06c      	beq.n	21632 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x10e>
    for (int i = 0; i < size_increase; ++i) {
   21558:	f10c 0c01 	add.w	ip, ip, #1
   2155c:	4563      	cmp	r3, ip
    dims_[i] = val;
   2155e:	f84e 7f04 	str.w	r7, [lr, #4]!
    for (int i = 0; i < size_increase; ++i) {
   21562:	d1f6      	bne.n	21552 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x2e>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   21564:	1d01      	adds	r1, r0, #4
   21566:	a801      	add	r0, sp, #4
   21568:	0092      	lsls	r2, r2, #2
   2156a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2156e:	f7f7 f807 	bl	18580 <memcpy>
  int32_t DimensionsCount() const { return size_; }
   21572:	6832      	ldr	r2, [r6, #0]
      : size_(new_shape_size) {
   21574:	2304      	movs	r3, #4
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   21576:	429a      	cmp	r2, r3
      : size_(new_shape_size) {
   21578:	9306      	str	r3, [sp, #24]
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   2157a:	dc5a      	bgt.n	21632 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x10e>
    for (int i = 0; i < size_increase; ++i) {
   2157c:	f1d2 0004 	rsbs	r0, r2, #4
   21580:	d00e      	beq.n	215a0 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x7c>
   21582:	f10d 0e18 	add.w	lr, sp, #24
   21586:	f04f 0c00 	mov.w	ip, #0
    dims_[i] = val;
   2158a:	2301      	movs	r3, #1
   2158c:	e002      	b.n	21594 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x70>
    TFLITE_DCHECK_LT(i, size_);
   2158e:	f1bc 0f04 	cmp.w	ip, #4
   21592:	d04e      	beq.n	21632 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x10e>
    for (int i = 0; i < size_increase; ++i) {
   21594:	f10c 0c01 	add.w	ip, ip, #1
   21598:	4560      	cmp	r0, ip
    dims_[i] = val;
   2159a:	f84e 3f04 	str.w	r3, [lr, #4]!
    for (int i = 0; i < size_increase; ++i) {
   2159e:	d1f6      	bne.n	2158e <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x6a>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   215a0:	ab07      	add	r3, sp, #28
   215a2:	1d31      	adds	r1, r6, #4
   215a4:	0092      	lsls	r2, r2, #2
   215a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   215aa:	f7f6 ffe9 	bl	18580 <memcpy>
  for (int i = N - 1; i >= 0; --i) {
   215ae:	f104 0c10 	add.w	ip, r4, #16
    TFLITE_DCHECK_LT(i, size_);
   215b2:	9e00      	ldr	r6, [sp, #0]
   215b4:	f10d 0e14 	add.w	lr, sp, #20
   215b8:	4662      	mov	r2, ip
  int desc_stride = 1;
   215ba:	2301      	movs	r3, #1
  for (int i = N - 1; i >= 0; --i) {
   215bc:	2103      	movs	r1, #3
   215be:	42b1      	cmp	r1, r6
   215c0:	da37      	bge.n	21632 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x10e>
    return dims_[i];
   215c2:	f85e 0d04 	ldr.w	r0, [lr, #-4]!
    desc_out->extents[i] = input_shape.Dims(i);
   215c6:	f842 0d04 	str.w	r0, [r2, #-4]!
  for (int i = N - 1; i >= 0; --i) {
   215ca:	3901      	subs	r1, #1
   215cc:	1c4f      	adds	r7, r1, #1
    desc_out->strides[i] = desc_stride;
   215ce:	6113      	str	r3, [r2, #16]
    desc_stride *= input_shape.Dims(i);
   215d0:	fb00 f303 	mul.w	r3, r0, r3
  for (int i = N - 1; i >= 0; --i) {
   215d4:	d1f3      	bne.n	215be <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x9a>
   215d6:	f105 0e10 	add.w	lr, r5, #16
    TFLITE_DCHECK_LT(i, size_);
   215da:	9f06      	ldr	r7, [sp, #24]
   215dc:	f10d 082c 	add.w	r8, sp, #44	@ 0x2c
   215e0:	4672      	mov	r2, lr
  int desc_stride = 1;
   215e2:	2301      	movs	r3, #1
  for (int i = N - 1; i >= 0; --i) {
   215e4:	2103      	movs	r1, #3
   215e6:	42b9      	cmp	r1, r7
   215e8:	da23      	bge.n	21632 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x10e>
    return dims_[i];
   215ea:	f858 0d04 	ldr.w	r0, [r8, #-4]!
    desc_out->extents[i] = input_shape.Dims(i);
   215ee:	f842 0d04 	str.w	r0, [r2, #-4]!
  for (int i = N - 1; i >= 0; --i) {
   215f2:	3901      	subs	r1, #1
    desc_out->strides[i] = desc_stride;
   215f4:	6113      	str	r3, [r2, #16]
    desc_stride *= input_shape.Dims(i);
   215f6:	fb00 f303 	mul.w	r3, r0, r3
  for (int i = N - 1; i >= 0; --i) {
   215fa:	1c48      	adds	r0, r1, #1
   215fc:	d1f3      	bne.n	215e6 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xc2>
  CopyDimsToDesc<N>(extended_input1_shape, desc1_out);

  // Walk over each dimension. If the extents are equal do nothing.
  // Otherwise, set the desc with extent 1 to have extent equal to the other and
  // stride 0.
  for (int i = 0; i < N; ++i) {
   215fe:	2100      	movs	r1, #0
   21600:	f10d 0818 	add.w	r8, sp, #24
   21604:	4668      	mov	r0, sp
      if (extent0 == 1) {
        desc0_out->strides[i] = 0;
        desc0_out->extents[i] = extent1;
      } else {
        TFLITE_DCHECK_EQ(extent1, 1);
        desc1_out->strides[i] = 0;
   21606:	4689      	mov	r9, r1
    TFLITE_DCHECK_LT(i, size_);
   21608:	428f      	cmp	r7, r1
    return dims_[i];
   2160a:	f850 3f04 	ldr.w	r3, [r0, #4]!
    TFLITE_DCHECK_LT(i, size_);
   2160e:	d010      	beq.n	21632 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x10e>
    return dims_[i];
   21610:	f858 2f04 	ldr.w	r2, [r8, #4]!
    if (extent0 != extent1) {
   21614:	429a      	cmp	r2, r3
   21616:	d007      	beq.n	21628 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x104>
      if (extent0 == 1) {
   21618:	2b01      	cmp	r3, #1
   2161a:	d00c      	beq.n	21636 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x112>
        TFLITE_DCHECK_EQ(extent1, 1);
   2161c:	2a01      	cmp	r2, #1
   2161e:	d108      	bne.n	21632 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x10e>
        desc1_out->strides[i] = 0;
   21620:	f84e 9021 	str.w	r9, [lr, r1, lsl #2]
        desc1_out->extents[i] = extent0;
   21624:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
  for (int i = 0; i < N; ++i) {
   21628:	3101      	adds	r1, #1
   2162a:	2904      	cmp	r1, #4
   2162c:	d00a      	beq.n	21644 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x120>
    TFLITE_DCHECK_LT(i, size_);
   2162e:	42b1      	cmp	r1, r6
   21630:	d1ea      	bne.n	21608 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xe4>
  TFLITE_DCHECK(desc0_out != nullptr);
   21632:	f003 fea5 	bl	25380 <abort>
        desc0_out->strides[i] = 0;
   21636:	f84c 9021 	str.w	r9, [ip, r1, lsl #2]
        desc0_out->extents[i] = extent1;
   2163a:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
  for (int i = 0; i < N; ++i) {
   2163e:	3101      	adds	r1, #1
   21640:	2904      	cmp	r1, #4
   21642:	d1f4      	bne.n	2162e <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x10a>
      }
    }
  }
}
   21644:	b00d      	add	sp, #52	@ 0x34
   21646:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2164a:	bf00      	nop

0002164c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0>:
void EvalAddFloat(TfLiteContext* context, TfLiteNode* node,
   2164c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21650:	ed2d 8b02 	vpush	{d8}
  SetActivationParams(data->output_activation_min_f32,
   21654:	ed90 8a0d 	vldr	s16, [r0, #52]	@ 0x34
                      data->output_activation_max_f32, &op_params);
   21658:	edd0 8a0e 	vldr	s17, [r0, #56]	@ 0x38
  if (data->requires_broadcast) {
   2165c:	7800      	ldrb	r0, [r0, #0]
void EvalAddFloat(TfLiteContext* context, TfLiteNode* node,
   2165e:	b0d9      	sub	sp, #356	@ 0x164
   21660:	460e      	mov	r6, r1
   21662:	4615      	mov	r5, r2
   21664:	461c      	mov	r4, r3
  if (data->requires_broadcast) {
   21666:	2800      	cmp	r0, #0
   21668:	f000 8114 	beq.w	21894 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x248>
        op_params, tflite::micro::GetTensorShape(input1),
   2166c:	a83c      	add	r0, sp, #240	@ 0xf0
   2166e:	f002 f8a9 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
}

// Returns const data for a TfLiteEvalTensor struct that are expected to exist.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
  TFLITE_DCHECK(tensor != nullptr);
   21672:	2e00      	cmp	r6, #0
   21674:	f000 8183 	beq.w	2197e <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x332>
  return reinterpret_cast<const T*>(tensor->data.raw);
   21678:	6833      	ldr	r3, [r6, #0]
   2167a:	9312      	str	r3, [sp, #72]	@ 0x48
        tflite::micro::GetTensorShape(input2),
   2167c:	4629      	mov	r1, r5
   2167e:	a836      	add	r0, sp, #216	@ 0xd8
   21680:	f002 f8a0 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   21684:	2d00      	cmp	r5, #0
   21686:	f000 817a 	beq.w	2197e <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x332>
  return reinterpret_cast<const T*>(tensor->data.raw);
   2168a:	682b      	ldr	r3, [r5, #0]
   2168c:	9313      	str	r3, [sp, #76]	@ 0x4c
        tflite::micro::GetTensorShape(output),
   2168e:	4621      	mov	r1, r4
   21690:	a830      	add	r0, sp, #192	@ 0xc0
   21692:	f002 f897 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   21696:	2c00      	cmp	r4, #0
   21698:	f000 8171 	beq.w	2197e <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x332>
  return reinterpret_cast<T*>(tensor->data.raw);
   2169c:	6823      	ldr	r3, [r4, #0]
   2169e:	9314      	str	r3, [sp, #80]	@ 0x50
                   const RuntimeShape& input1_shape, const T* input1_data,
                   const RuntimeShape& input2_shape, const T* input2_data,
                   const RuntimeShape& output_shape, T* output_data) {
  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   216a0:	aa48      	add	r2, sp, #288	@ 0x120
   216a2:	ab50      	add	r3, sp, #320	@ 0x140
   216a4:	a936      	add	r1, sp, #216	@ 0xd8
   216a6:	a83c      	add	r0, sp, #240	@ 0xf0
   216a8:	f7ff ff3c 	bl	21524 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  int32_t DimensionsCount() const { return size_; }
   216ac:	9a30      	ldr	r2, [sp, #192]	@ 0xc0
      : size_(new_shape_size) {
   216ae:	2304      	movs	r3, #4
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   216b0:	429a      	cmp	r2, r3
      : size_(new_shape_size) {
   216b2:	9342      	str	r3, [sp, #264]	@ 0x108
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   216b4:	f300 8163 	bgt.w	2197e <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x332>
    for (int i = 0; i < size_increase; ++i) {
   216b8:	1a98      	subs	r0, r3, r2
   216ba:	d00b      	beq.n	216d4 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x88>
   216bc:	a942      	add	r1, sp, #264	@ 0x108
   216be:	2300      	movs	r3, #0
    dims_[i] = val;
   216c0:	2401      	movs	r4, #1
   216c2:	e002      	b.n	216ca <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x7e>
    TFLITE_DCHECK_LT(i, size_);
   216c4:	2b04      	cmp	r3, #4
   216c6:	f000 815a 	beq.w	2197e <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x332>
    for (int i = 0; i < size_increase; ++i) {
   216ca:	3301      	adds	r3, #1
   216cc:	4298      	cmp	r0, r3
    dims_[i] = val;
   216ce:	f841 4f04 	str.w	r4, [r1, #4]!
    for (int i = 0; i < size_increase; ++i) {
   216d2:	d1f7      	bne.n	216c4 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x78>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   216d4:	ab43      	add	r3, sp, #268	@ 0x10c
   216d6:	0092      	lsls	r2, r2, #2
   216d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   216dc:	a931      	add	r1, sp, #196	@ 0xc4
   216de:	f7f6 ff4f 	bl	18580 <memcpy>
    TFLITE_DCHECK_LT(i, size_);
   216e2:	9d42      	ldr	r5, [sp, #264]	@ 0x108
   216e4:	2d00      	cmp	r5, #0
   216e6:	f340 814a 	ble.w	2197e <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x332>
   216ea:	9a57      	ldr	r2, [sp, #348]	@ 0x15c
    return dims_[i];
   216ec:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
   216ee:	9845      	ldr	r0, [sp, #276]	@ 0x114
   216f0:	931a      	str	r3, [sp, #104]	@ 0x68
   216f2:	ea4f 0a82 	mov.w	sl, r2, lsl #2
   216f6:	9b44      	ldr	r3, [sp, #272]	@ 0x110
   216f8:	9a4f      	ldr	r2, [sp, #316]	@ 0x13c
   216fa:	f8dd 9118 	ldr.w	r9, [sp, #280]	@ 0x118
   216fe:	f8dd 814c 	ldr.w	r8, [sp, #332]	@ 0x14c
   21702:	9007      	str	r0, [sp, #28]
   21704:	ea4f 0b82 	mov.w	fp, r2, lsl #2
   21708:	fb00 f203 	mul.w	r2, r0, r3
   2170c:	fb09 fc02 	mul.w	ip, r9, r2
   21710:	9a48      	ldr	r2, [sp, #288]	@ 0x120
   21712:	9202      	str	r2, [sp, #8]
   21714:	9a49      	ldr	r2, [sp, #292]	@ 0x124
   21716:	9203      	str	r2, [sp, #12]
   21718:	9a4a      	ldr	r2, [sp, #296]	@ 0x128
   2171a:	9204      	str	r2, [sp, #16]
   2171c:	9a4b      	ldr	r2, [sp, #300]	@ 0x12c
   2171e:	9205      	str	r2, [sp, #20]
   21720:	9a4d      	ldr	r2, [sp, #308]	@ 0x134
   21722:	9208      	str	r2, [sp, #32]
   21724:	9a4e      	ldr	r2, [sp, #312]	@ 0x138
   21726:	9215      	str	r2, [sp, #84]	@ 0x54
   21728:	9a50      	ldr	r2, [sp, #320]	@ 0x140
   2172a:	9206      	str	r2, [sp, #24]
   2172c:	9a55      	ldr	r2, [sp, #340]	@ 0x154
   2172e:	9209      	str	r2, [sp, #36]	@ 0x24
   21730:	9a56      	ldr	r2, [sp, #344]	@ 0x158
   21732:	9216      	str	r2, [sp, #88]	@ 0x58
   21734:	2100      	movs	r1, #0
   21736:	9a54      	ldr	r2, [sp, #336]	@ 0x150
   21738:	9119      	str	r1, [sp, #100]	@ 0x64
   2173a:	e9dd 7651 	ldrd	r7, r6, [sp, #324]	@ 0x144
   2173e:	921b      	str	r2, [sp, #108]	@ 0x6c
   21740:	9a4c      	ldr	r2, [sp, #304]	@ 0x130
   21742:	921c      	str	r2, [sp, #112]	@ 0x70
   21744:	fb09 f200 	mul.w	r2, r9, r0
   21748:	920a      	str	r2, [sp, #40]	@ 0x28
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   2174a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
   2174c:	468e      	mov	lr, r1
   2174e:	4572      	cmp	r2, lr
   21750:	4664      	mov	r4, ip
   21752:	e9cd 1117 	strd	r1, r1, [sp, #92]	@ 0x5c
   21756:	46bc      	mov	ip, r7
   21758:	465f      	mov	r7, fp
   2175a:	46b3      	mov	fp, r6
   2175c:	f340 8095 	ble.w	2188a <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x23e>
    TFLITE_DCHECK_LT(i, size_);
   21760:	2d01      	cmp	r5, #1
   21762:	f000 810c 	beq.w	2197e <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x332>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   21766:	2b00      	cmp	r3, #0
   21768:	dd7e      	ble.n	21868 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x21c>
   2176a:	2d02      	cmp	r5, #2
   2176c:	f000 8107 	beq.w	2197e <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x332>
   21770:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
   21774:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
   21776:	941d      	str	r4, [sp, #116]	@ 0x74
   21778:	2000      	movs	r0, #0
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   2177a:	9c07      	ldr	r4, [sp, #28]
   2177c:	2c00      	cmp	r4, #0
   2177e:	dd69      	ble.n	21854 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x208>
   21780:	2d03      	cmp	r5, #3
   21782:	f000 80fc 	beq.w	2197e <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x332>
   21786:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
   2178a:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
   2178e:	e9cd 160d 	strd	r1, r6, [sp, #52]	@ 0x34
   21792:	9611      	str	r6, [sp, #68]	@ 0x44
   21794:	2400      	movs	r4, #0
   21796:	9b14      	ldr	r3, [sp, #80]	@ 0x50
   21798:	9a11      	ldr	r2, [sp, #68]	@ 0x44
   2179a:	eb03 0682 	add.w	r6, r3, r2, lsl #2
   2179e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
   217a0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
   217a2:	9601      	str	r6, [sp, #4]
   217a4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   217a8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
   217aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
   217ac:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   217b0:	2300      	movs	r3, #0
   217b2:	e03a      	b.n	2182a <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1de>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
   217b4:	9e02      	ldr	r6, [sp, #8]
   217b6:	4576      	cmp	r6, lr
   217b8:	f340 80e1 	ble.w	2197e <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x332>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
   217bc:	9e03      	ldr	r6, [sp, #12]
   217be:	4286      	cmp	r6, r0
   217c0:	f340 80dd 	ble.w	2197e <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x332>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
   217c4:	9e04      	ldr	r6, [sp, #16]
   217c6:	42a6      	cmp	r6, r4
   217c8:	f340 80d9 	ble.w	2197e <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x332>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
   217cc:	9e05      	ldr	r6, [sp, #20]
   217ce:	429e      	cmp	r6, r3
   217d0:	f340 80d5 	ble.w	2197e <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x332>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
   217d4:	9e06      	ldr	r6, [sp, #24]
          output_data[Offset(extended_output_shape, b, y, x, c)] =
              ActivationFunctionWithMinMax<T>(
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] +
   217d6:	edd2 7a00 	vldr	s15, [r2]
   217da:	4576      	cmp	r6, lr
   217dc:	f340 80cf 	ble.w	2197e <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x332>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
   217e0:	4584      	cmp	ip, r0
   217e2:	f340 80cc 	ble.w	2197e <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x332>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
   217e6:	45a3      	cmp	fp, r4
   217e8:	f340 80c9 	ble.w	2197e <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x332>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
   217ec:	4598      	cmp	r8, r3
   217ee:	f340 80c6 	ble.w	2197e <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x332>
              ActivationFunctionWithMinMax<T>(
   217f2:	ed91 7a00 	vldr	s14, [r1]
   217f6:	ee77 7a87 	vadd.f32	s15, s15, s14
// allow that as long as the corresponding index is also 0. It is upto the
// calling ops to ensure that they perform verification checks on tensor shapes
// if they don't support a particular behavior.

inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   217fa:	443a      	add	r2, r7
   217fc:	eef4 7ac8 	vcmpe.f32	s15, s16
   21800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21804:	bfb8      	it	lt
   21806:	eef0 7a48 	vmovlt.f32	s15, s16
      if (__b < __a)
   2180a:	eef4 7ae8 	vcmpe.f32	s15, s17
   2180e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21812:	bf88      	it	hi
   21814:	eef0 7a68 	vmovhi.f32	s15, s17
   21818:	2d04      	cmp	r5, #4
   2181a:	4451      	add	r1, sl
   2181c:	f040 80af 	bne.w	2197e <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x332>
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   21820:	9e01      	ldr	r6, [sp, #4]
   21822:	ece6 7a01 	vstmia	r6!, {s15}
   21826:	9601      	str	r6, [sp, #4]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   21828:	3301      	adds	r3, #1
   2182a:	4599      	cmp	r9, r3
   2182c:	dcc2      	bgt.n	217b4 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x168>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   2182e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
   21830:	9a16      	ldr	r2, [sp, #88]	@ 0x58
   21832:	444b      	add	r3, r9
   21834:	9311      	str	r3, [sp, #68]	@ 0x44
   21836:	9b10      	ldr	r3, [sp, #64]	@ 0x40
   21838:	4413      	add	r3, r2
   2183a:	9310      	str	r3, [sp, #64]	@ 0x40
   2183c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
   2183e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
   21840:	4413      	add	r3, r2
   21842:	930f      	str	r3, [sp, #60]	@ 0x3c
   21844:	9b07      	ldr	r3, [sp, #28]
   21846:	3401      	adds	r4, #1
   21848:	429c      	cmp	r4, r3
   2184a:	dba4      	blt.n	21796 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x14a>
   2184c:	e9dd 320b 	ldrd	r3, r2, [sp, #44]	@ 0x2c
   21850:	e9dd 160d 	ldrd	r1, r6, [sp, #52]	@ 0x34
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   21854:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
   21856:	4426      	add	r6, r4
   21858:	9c09      	ldr	r4, [sp, #36]	@ 0x24
   2185a:	3001      	adds	r0, #1
    TFLITE_DCHECK_LT(i, size_);
   2185c:	4421      	add	r1, r4
   2185e:	9c08      	ldr	r4, [sp, #32]
   21860:	4298      	cmp	r0, r3
   21862:	4422      	add	r2, r4
   21864:	db89      	blt.n	2177a <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x12e>
   21866:	9c1d      	ldr	r4, [sp, #116]	@ 0x74
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   21868:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
   2186a:	991b      	ldr	r1, [sp, #108]	@ 0x6c
   2186c:	4422      	add	r2, r4
   2186e:	9217      	str	r2, [sp, #92]	@ 0x5c
   21870:	9a18      	ldr	r2, [sp, #96]	@ 0x60
   21872:	440a      	add	r2, r1
   21874:	9218      	str	r2, [sp, #96]	@ 0x60
   21876:	991c      	ldr	r1, [sp, #112]	@ 0x70
   21878:	9a19      	ldr	r2, [sp, #100]	@ 0x64
   2187a:	440a      	add	r2, r1
   2187c:	9219      	str	r2, [sp, #100]	@ 0x64
   2187e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
   21880:	f10e 0e01 	add.w	lr, lr, #1
   21884:	4572      	cmp	r2, lr
   21886:	f73f af6b 	bgt.w	21760 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x114>
}
   2188a:	b059      	add	sp, #356	@ 0x164
   2188c:	ecbd 8b02 	vpop	{d8}
   21890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    reference_ops::Add(op_params, tflite::micro::GetTensorShape(input1),
   21894:	a82a      	add	r0, sp, #168	@ 0xa8
   21896:	f001 ff95 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   2189a:	2e00      	cmp	r6, #0
   2189c:	d06f      	beq.n	2197e <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x332>
                       tflite::micro::GetTensorShape(input2),
   2189e:	4629      	mov	r1, r5
   218a0:	a824      	add	r0, sp, #144	@ 0x90
  return reinterpret_cast<const T*>(tensor->data.raw);
   218a2:	6836      	ldr	r6, [r6, #0]
   218a4:	f001 ff8e 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   218a8:	2d00      	cmp	r5, #0
   218aa:	d068      	beq.n	2197e <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x332>
                       tflite::micro::GetTensorShape(output),
   218ac:	4621      	mov	r1, r4
   218ae:	a81e      	add	r0, sp, #120	@ 0x78
  return reinterpret_cast<const T*>(tensor->data.raw);
   218b0:	682d      	ldr	r5, [r5, #0]
   218b2:	f001 ff87 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   218b6:	2c00      	cmp	r4, #0
   218b8:	d061      	beq.n	2197e <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x332>
    for (int i = 0; i < size_; i++) {
   218ba:	992a      	ldr	r1, [sp, #168]	@ 0xa8
  return reinterpret_cast<T*>(tensor->data.raw);
   218bc:	6827      	ldr	r7, [r4, #0]
   218be:	2900      	cmp	r1, #0
   218c0:	dd4c      	ble.n	2195c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x310>
   218c2:	aa2a      	add	r2, sp, #168	@ 0xa8
   218c4:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    int buffer_size = 1;
   218c8:	2301      	movs	r3, #1
      buffer_size *= dims_data[i];
   218ca:	f852 0f04 	ldr.w	r0, [r2, #4]!
    for (int i = 0; i < size_; i++) {
   218ce:	428a      	cmp	r2, r1
      buffer_size *= dims_data[i];
   218d0:	fb00 f303 	mul.w	r3, r0, r3
    for (int i = 0; i < size_; i++) {
   218d4:	d1f9      	bne.n	218ca <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x27e>
   218d6:	9924      	ldr	r1, [sp, #144]	@ 0x90
   218d8:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
   218da:	2900      	cmp	r1, #0
   218dc:	dd47      	ble.n	2196e <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x322>
   218de:	aa24      	add	r2, sp, #144	@ 0x90
   218e0:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    int buffer_size = 1;
   218e4:	2001      	movs	r0, #1
      buffer_size *= dims_data[i];
   218e6:	f852 cf04 	ldr.w	ip, [r2, #4]!
    for (int i = 0; i < size_; i++) {
   218ea:	428a      	cmp	r2, r1
      buffer_size *= dims_data[i];
   218ec:	fb0c f000 	mul.w	r0, ip, r0
    for (int i = 0; i < size_; i++) {
   218f0:	d1f9      	bne.n	218e6 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x29a>
   218f2:	2c00      	cmp	r4, #0
   218f4:	dd3f      	ble.n	21976 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x32a>
   218f6:	aa1e      	add	r2, sp, #120	@ 0x78
    int buffer_size = 1;
   218f8:	2101      	movs	r1, #1
    for (int i = 0; i < size_; i++) {
   218fa:	f04f 0c00 	mov.w	ip, #0
      buffer_size *= dims_data[i];
   218fe:	f852 ef04 	ldr.w	lr, [r2, #4]!
    for (int i = 0; i < size_; i++) {
   21902:	f10c 0c01 	add.w	ip, ip, #1
   21906:	45a4      	cmp	ip, r4
      buffer_size *= dims_data[i];
   21908:	fb0e f101 	mul.w	r1, lr, r1
    for (int i = 0; i < size_; i++) {
   2190c:	dbf7      	blt.n	218fe <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x2b2>
                                const RuntimeShape& check_shape_0,
                                const RuntimeShape& check_shape_1) {
  const int size_1 = shape.FlatSize();
  const int size_2 = check_shape_0.FlatSize();
  const int size_3 = check_shape_1.FlatSize();
  TFLITE_CHECK_EQ(size_1, size_2);
   2190e:	4298      	cmp	r0, r3
   21910:	d135      	bne.n	2197e <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x332>
  TFLITE_CHECK_EQ(size_2, size_3);
   21912:	428b      	cmp	r3, r1
   21914:	d133      	bne.n	2197e <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x332>
  for (int i = 0; i < flat_size; ++i) {
   21916:	2b00      	cmp	r3, #0
   21918:	ddb7      	ble.n	2188a <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x23e>
   2191a:	4632      	mov	r2, r6
   2191c:	4639      	mov	r1, r7
   2191e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
        input1_data[i] + input2_data[i], activation_min, activation_max);
   21922:	ecf2 7a01 	vldmia	r2!, {s15}
   21926:	ecb5 7a01 	vldmia	r5!, {s14}
    output_data[i] = ActivationFunctionWithMinMax(
   2192a:	ee77 7a87 	vadd.f32	s15, s15, s14
      if (__a < __b)
   2192e:	eef4 7ac8 	vcmpe.f32	s15, s16
   21932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21936:	bfb8      	it	lt
   21938:	eef0 7a48 	vmovlt.f32	s15, s16
      if (__b < __a)
   2193c:	eef4 7ae8 	vcmpe.f32	s15, s17
   21940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21944:	bf88      	it	hi
   21946:	eef0 7a68 	vmovhi.f32	s15, s17
  for (int i = 0; i < flat_size; ++i) {
   2194a:	429a      	cmp	r2, r3
    output_data[i] = ActivationFunctionWithMinMax(
   2194c:	ece1 7a01 	vstmia	r1!, {s15}
  for (int i = 0; i < flat_size; ++i) {
   21950:	d1e7      	bne.n	21922 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x2d6>
}
   21952:	b059      	add	sp, #356	@ 0x164
   21954:	ecbd 8b02 	vpop	{d8}
   21958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2195c:	9924      	ldr	r1, [sp, #144]	@ 0x90
   2195e:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
   21960:	2900      	cmp	r1, #0
    int buffer_size = 1;
   21962:	f04f 0301 	mov.w	r3, #1
    for (int i = 0; i < size_; i++) {
   21966:	dcba      	bgt.n	218de <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x292>
   21968:	2c00      	cmp	r4, #0
   2196a:	dc02      	bgt.n	21972 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x326>
   2196c:	e7d5      	b.n	2191a <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x2ce>
   2196e:	2c00      	cmp	r4, #0
   21970:	dd03      	ble.n	2197a <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x32e>
    int buffer_size = 1;
   21972:	2001      	movs	r0, #1
   21974:	e7bf      	b.n	218f6 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x2aa>
   21976:	2101      	movs	r1, #1
   21978:	e7c9      	b.n	2190e <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x2c2>
  TFLITE_CHECK_EQ(size_1, size_2);
   2197a:	2b01      	cmp	r3, #1
   2197c:	d0cd      	beq.n	2191a <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x2ce>
  TFLITE_DCHECK(tensor != nullptr);
   2197e:	f003 fcff 	bl	25380 <abort>
   21982:	bf00      	nop

00021984 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0>:
TfLiteStatus EvalAddQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
   21984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21988:	f5ad 7d03 	sub.w	sp, sp, #524	@ 0x20c
   2198c:	461d      	mov	r5, r3
  op_params->left_shift = data->left_shift;
   2198e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
   21990:	930f      	str	r3, [sp, #60]	@ 0x3c
   21992:	936e      	str	r3, [sp, #440]	@ 0x1b8
  op_params->input1_offset = data->input1_offset;
   21994:	6a83      	ldr	r3, [r0, #40]	@ 0x28
   21996:	9310      	str	r3, [sp, #64]	@ 0x40
   21998:	9369      	str	r3, [sp, #420]	@ 0x1a4
  op_params->input1_multiplier = data->input1_multiplier;
   2199a:	6943      	ldr	r3, [r0, #20]
   2199c:	9311      	str	r3, [sp, #68]	@ 0x44
   2199e:	936f      	str	r3, [sp, #444]	@ 0x1bc
  op_params->input2_offset = data->input2_offset;
   219a0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
   219a2:	9312      	str	r3, [sp, #72]	@ 0x48
  SetActivationParams(data->output_activation_min, data->output_activation_max,
   219a4:	e9d0 ab03 	ldrd	sl, fp, [r0, #12]
  op_params->input2_offset = data->input2_offset;
   219a8:	936a      	str	r3, [sp, #424]	@ 0x1a8
  op_params->input2_multiplier = data->input2_multiplier;
   219aa:	6983      	ldr	r3, [r0, #24]
   219ac:	9313      	str	r3, [sp, #76]	@ 0x4c
   219ae:	9371      	str	r3, [sp, #452]	@ 0x1c4
  op_params->input2_shift = data->input2_shift;
   219b0:	6883      	ldr	r3, [r0, #8]
  op_params->input1_shift = data->input1_shift;
   219b2:	6846      	ldr	r6, [r0, #4]
  op_params->output_offset = data->output_offset;
   219b4:	6b07      	ldr	r7, [r0, #48]	@ 0x30
  op_params->output_shift = data->output_shift;
   219b6:	f8d0 9020 	ldr.w	r9, [r0, #32]
  op_params->input2_shift = data->input2_shift;
   219ba:	9314      	str	r3, [sp, #80]	@ 0x50
TfLiteStatus EvalAddQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
   219bc:	4614      	mov	r4, r2
  op_params->input2_shift = data->input2_shift;
   219be:	9372      	str	r3, [sp, #456]	@ 0x1c8
  op_params->output_multiplier = data->output_multiplier;
   219c0:	69c3      	ldr	r3, [r0, #28]
   219c2:	9315      	str	r3, [sp, #84]	@ 0x54
      tflite::micro::GetTensorShape(input1),
   219c4:	a860      	add	r0, sp, #384	@ 0x180
TfLiteStatus EvalAddQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
   219c6:	4688      	mov	r8, r1
  op_params->output_multiplier = data->output_multiplier;
   219c8:	936c      	str	r3, [sp, #432]	@ 0x1b0
}

template <typename P>
inline void SetActivationParams(int32_t min, int32_t max, P* params) {
  params->quantized_activation_min = min;
  params->quantized_activation_max = max;
   219ca:	e9cd ab73 	strd	sl, fp, [sp, #460]	@ 0x1cc
  op_params->input1_shift = data->input1_shift;
   219ce:	9670      	str	r6, [sp, #448]	@ 0x1c0
  op_params->output_offset = data->output_offset;
   219d0:	976b      	str	r7, [sp, #428]	@ 0x1ac
  op_params->output_shift = data->output_shift;
   219d2:	f8cd 91b4 	str.w	r9, [sp, #436]	@ 0x1b4
      tflite::micro::GetTensorShape(input1),
   219d6:	f001 fef5 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::micro::GetTensorShape(input2), &op_params);
   219da:	4621      	mov	r1, r4
   219dc:	a858      	add	r0, sp, #352	@ 0x160
   219de:	f001 fef1 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  bool need_broadcast = reference_ops::ProcessBroadcastShapes(
   219e2:	aa68      	add	r2, sp, #416	@ 0x1a0
   219e4:	a958      	add	r1, sp, #352	@ 0x160
   219e6:	a860      	add	r0, sp, #384	@ 0x180
   219e8:	f7ff fc56 	bl	21298 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>
  if (need_broadcast) {
   219ec:	2800      	cmp	r0, #0
   219ee:	d16b      	bne.n	21ac8 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x144>
   219f0:	f1b8 0f00 	cmp.w	r8, #0
   219f4:	f000 8177 	beq.w	21ce6 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x362>
  return reinterpret_cast<const T*>(tensor->data.raw);
   219f8:	f8d8 3000 	ldr.w	r3, [r8]
   219fc:	930d      	str	r3, [sp, #52]	@ 0x34
  TFLITE_DCHECK(tensor != nullptr);
   219fe:	2c00      	cmp	r4, #0
   21a00:	f000 8171 	beq.w	21ce6 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x362>
  return reinterpret_cast<const T*>(tensor->data.raw);
   21a04:	6823      	ldr	r3, [r4, #0]
   21a06:	930e      	str	r3, [sp, #56]	@ 0x38
  TFLITE_DCHECK(tensor != nullptr);
   21a08:	2d00      	cmp	r5, #0
   21a0a:	f000 816c 	beq.w	21ce6 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x362>
  return reinterpret_cast<T*>(tensor->data.raw);
   21a0e:	682b      	ldr	r3, [r5, #0]
        MatchingElementsSize(tflite::micro::GetTensorShape(input1),
   21a10:	4641      	mov	r1, r8
   21a12:	a83a      	add	r0, sp, #232	@ 0xe8
   21a14:	4698      	mov	r8, r3
   21a16:	f001 fed5 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                             tflite::micro::GetTensorShape(input2),
   21a1a:	4621      	mov	r1, r4
   21a1c:	a834      	add	r0, sp, #208	@ 0xd0
   21a1e:	f001 fed1 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                             tflite::micro::GetTensorShape(output)));
   21a22:	4629      	mov	r1, r5
   21a24:	a82e      	add	r0, sp, #184	@ 0xb8
   21a26:	f001 fecd 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    for (int i = 0; i < size_; i++) {
   21a2a:	993a      	ldr	r1, [sp, #232]	@ 0xe8
   21a2c:	2900      	cmp	r1, #0
   21a2e:	f340 8147 	ble.w	21cc0 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x33c>
   21a32:	aa3a      	add	r2, sp, #232	@ 0xe8
   21a34:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    int buffer_size = 1;
   21a38:	2301      	movs	r3, #1
      buffer_size *= dims_data[i];
   21a3a:	f852 0f04 	ldr.w	r0, [r2, #4]!
    for (int i = 0; i < size_; i++) {
   21a3e:	428a      	cmp	r2, r1
      buffer_size *= dims_data[i];
   21a40:	fb00 f303 	mul.w	r3, r0, r3
    for (int i = 0; i < size_; i++) {
   21a44:	d1f9      	bne.n	21a3a <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb6>
   21a46:	9834      	ldr	r0, [sp, #208]	@ 0xd0
   21a48:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   21a4a:	2800      	cmp	r0, #0
   21a4c:	f340 8142 	ble.w	21cd4 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x350>
   21a50:	aa34      	add	r2, sp, #208	@ 0xd0
   21a52:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    int buffer_size = 1;
   21a56:	2101      	movs	r1, #1
      buffer_size *= dims_data[i];
   21a58:	f852 4f04 	ldr.w	r4, [r2, #4]!
    for (int i = 0; i < size_; i++) {
   21a5c:	4282      	cmp	r2, r0
      buffer_size *= dims_data[i];
   21a5e:	fb04 f101 	mul.w	r1, r4, r1
    for (int i = 0; i < size_; i++) {
   21a62:	d1f9      	bne.n	21a58 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xd4>
   21a64:	2d00      	cmp	r5, #0
   21a66:	f340 8139 	ble.w	21cdc <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x358>
   21a6a:	aa2e      	add	r2, sp, #184	@ 0xb8
    int buffer_size = 1;
   21a6c:	2401      	movs	r4, #1
    for (int i = 0; i < size_; i++) {
   21a6e:	2000      	movs	r0, #0
   21a70:	469c      	mov	ip, r3
      buffer_size *= dims_data[i];
   21a72:	f852 3f04 	ldr.w	r3, [r2, #4]!
    for (int i = 0; i < size_; i++) {
   21a76:	3001      	adds	r0, #1
   21a78:	42a8      	cmp	r0, r5
      buffer_size *= dims_data[i];
   21a7a:	fb03 f404 	mul.w	r4, r3, r4
    for (int i = 0; i < size_; i++) {
   21a7e:	dbf8      	blt.n	21a72 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xee>
   21a80:	4663      	mov	r3, ip
  TFLITE_CHECK_EQ(size_1, size_2);
   21a82:	4299      	cmp	r1, r3
   21a84:	f040 812f 	bne.w	21ce6 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x362>
  TFLITE_CHECK_EQ(size_2, size_3);
   21a88:	42a3      	cmp	r3, r4
   21a8a:	f040 812c 	bne.w	21ce6 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x362>
    arm_elementwise_add_s8(
   21a8e:	e9cd b30a 	strd	fp, r3, [sp, #40]	@ 0x28
   21a92:	9b15      	ldr	r3, [sp, #84]	@ 0x54
   21a94:	f8cd 8014 	str.w	r8, [sp, #20]
   21a98:	e9cd 7306 	strd	r7, r3, [sp, #24]
   21a9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
   21a9e:	9304      	str	r3, [sp, #16]
   21aa0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
   21aa2:	9303      	str	r3, [sp, #12]
   21aa4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
   21aa6:	9302      	str	r3, [sp, #8]
   21aa8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
   21aaa:	e9cd 9a08 	strd	r9, sl, [sp, #32]
   21aae:	e9cd 6300 	strd	r6, r3, [sp]
   21ab2:	e9dd 010d 	ldrd	r0, r1, [sp, #52]	@ 0x34
   21ab6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
   21aba:	f7f8 f801 	bl	19ac0 <arm_elementwise_add_s8>
}
   21abe:	2000      	movs	r0, #0
   21ac0:	f50d 7d03 	add.w	sp, sp, #524	@ 0x20c
   21ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        op_params, tflite::micro::GetTensorShape(input1),
   21ac8:	4641      	mov	r1, r8
   21aca:	a84c      	add	r0, sp, #304	@ 0x130
   21acc:	f001 fe7a 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   21ad0:	f1b8 0f00 	cmp.w	r8, #0
   21ad4:	f000 8107 	beq.w	21ce6 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x362>
  return reinterpret_cast<const T*>(tensor->data.raw);
   21ad8:	f8d8 3000 	ldr.w	r3, [r8]
   21adc:	930e      	str	r3, [sp, #56]	@ 0x38
        tflite::micro::GetTensorShape(input2),
   21ade:	4621      	mov	r1, r4
   21ae0:	a846      	add	r0, sp, #280	@ 0x118
   21ae2:	f001 fe6f 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   21ae6:	2c00      	cmp	r4, #0
   21ae8:	f000 80fd 	beq.w	21ce6 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x362>
  return reinterpret_cast<const T*>(tensor->data.raw);
   21aec:	6823      	ldr	r3, [r4, #0]
   21aee:	930f      	str	r3, [sp, #60]	@ 0x3c
        tflite::micro::GetTensorShape(output),
   21af0:	4629      	mov	r1, r5
   21af2:	a840      	add	r0, sp, #256	@ 0x100
   21af4:	f001 fe66 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   21af8:	2d00      	cmp	r5, #0
   21afa:	f000 80f4 	beq.w	21ce6 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x362>
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   21afe:	ab60      	add	r3, sp, #384	@ 0x180
   21b00:	aa58      	add	r2, sp, #352	@ 0x160
   21b02:	a946      	add	r1, sp, #280	@ 0x118
   21b04:	a84c      	add	r0, sp, #304	@ 0x130
  return reinterpret_cast<T*>(tensor->data.raw);
   21b06:	682e      	ldr	r6, [r5, #0]
   21b08:	f7ff fd0c 	bl	21524 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  int32_t DimensionsCount() const { return size_; }
   21b0c:	9a40      	ldr	r2, [sp, #256]	@ 0x100
      : size_(new_shape_size) {
   21b0e:	2304      	movs	r3, #4
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   21b10:	429a      	cmp	r2, r3
      : size_(new_shape_size) {
   21b12:	9352      	str	r3, [sp, #328]	@ 0x148
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   21b14:	f300 80e7 	bgt.w	21ce6 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x362>
    for (int i = 0; i < size_increase; ++i) {
   21b18:	1a98      	subs	r0, r3, r2
   21b1a:	d00b      	beq.n	21b34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1b0>
   21b1c:	a952      	add	r1, sp, #328	@ 0x148
   21b1e:	2300      	movs	r3, #0
    dims_[i] = val;
   21b20:	2501      	movs	r5, #1
   21b22:	e002      	b.n	21b2a <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1a6>
    TFLITE_DCHECK_LT(i, size_);
   21b24:	2b04      	cmp	r3, #4
   21b26:	f000 80de 	beq.w	21ce6 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x362>
    for (int i = 0; i < size_increase; ++i) {
   21b2a:	3301      	adds	r3, #1
   21b2c:	4298      	cmp	r0, r3
    dims_[i] = val;
   21b2e:	f841 5f04 	str.w	r5, [r1, #4]!
    for (int i = 0; i < size_increase; ++i) {
   21b32:	d1f7      	bne.n	21b24 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1a0>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   21b34:	ab53      	add	r3, sp, #332	@ 0x14c
   21b36:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   21b3a:	0092      	lsls	r2, r2, #2
   21b3c:	a941      	add	r1, sp, #260	@ 0x104
   21b3e:	f7f6 fd1f 	bl	18580 <memcpy>
    TFLITE_DCHECK_LT(i, size_);
   21b42:	9b52      	ldr	r3, [sp, #328]	@ 0x148
   21b44:	9312      	str	r3, [sp, #72]	@ 0x48
   21b46:	2b00      	cmp	r3, #0
   21b48:	f340 80cd 	ble.w	21ce6 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x362>
    return dims_[i];
   21b4c:	9a55      	ldr	r2, [sp, #340]	@ 0x154
   21b4e:	f8dd 8150 	ldr.w	r8, [sp, #336]	@ 0x150
   21b52:	f8dd 9158 	ldr.w	r9, [sp, #344]	@ 0x158
   21b56:	9853      	ldr	r0, [sp, #332]	@ 0x14c
   21b58:	920d      	str	r2, [sp, #52]	@ 0x34
   21b5a:	fb02 f308 	mul.w	r3, r2, r8
   21b5e:	fb09 f103 	mul.w	r1, r9, r3
   21b62:	9b58      	ldr	r3, [sp, #352]	@ 0x160
   21b64:	931d      	str	r3, [sp, #116]	@ 0x74
   21b66:	9b59      	ldr	r3, [sp, #356]	@ 0x164
   21b68:	931e      	str	r3, [sp, #120]	@ 0x78
   21b6a:	9b5a      	ldr	r3, [sp, #360]	@ 0x168
   21b6c:	931f      	str	r3, [sp, #124]	@ 0x7c
   21b6e:	9b5b      	ldr	r3, [sp, #364]	@ 0x16c
   21b70:	9320      	str	r3, [sp, #128]	@ 0x80
   21b72:	9b5d      	ldr	r3, [sp, #372]	@ 0x174
   21b74:	9314      	str	r3, [sp, #80]	@ 0x50
   21b76:	9b5e      	ldr	r3, [sp, #376]	@ 0x178
   21b78:	9310      	str	r3, [sp, #64]	@ 0x40
   21b7a:	9b5f      	ldr	r3, [sp, #380]	@ 0x17c
   21b7c:	9321      	str	r3, [sp, #132]	@ 0x84
   21b7e:	9b60      	ldr	r3, [sp, #384]	@ 0x180
   21b80:	9322      	str	r3, [sp, #136]	@ 0x88
   21b82:	9b61      	ldr	r3, [sp, #388]	@ 0x184
   21b84:	9323      	str	r3, [sp, #140]	@ 0x8c
   21b86:	9b62      	ldr	r3, [sp, #392]	@ 0x188
   21b88:	9324      	str	r3, [sp, #144]	@ 0x90
   21b8a:	9b63      	ldr	r3, [sp, #396]	@ 0x18c
   21b8c:	9325      	str	r3, [sp, #148]	@ 0x94
   21b8e:	9b65      	ldr	r3, [sp, #404]	@ 0x194
   21b90:	9315      	str	r3, [sp, #84]	@ 0x54
   21b92:	9b66      	ldr	r3, [sp, #408]	@ 0x198
   21b94:	9311      	str	r3, [sp, #68]	@ 0x44
   21b96:	9b67      	ldr	r3, [sp, #412]	@ 0x19c
   21b98:	9326      	str	r3, [sp, #152]	@ 0x98
   21b9a:	9b5c      	ldr	r3, [sp, #368]	@ 0x170
   21b9c:	9327      	str	r3, [sp, #156]	@ 0x9c
   21b9e:	2500      	movs	r5, #0
   21ba0:	fb09 f302 	mul.w	r3, r9, r2
   21ba4:	9c64      	ldr	r4, [sp, #400]	@ 0x190
   21ba6:	9316      	str	r3, [sp, #88]	@ 0x58
   21ba8:	4684      	mov	ip, r0
   21baa:	4632      	mov	r2, r6
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   21bac:	951b      	str	r5, [sp, #108]	@ 0x6c
   21bae:	4608      	mov	r0, r1
   21bb0:	462e      	mov	r6, r5
   21bb2:	4647      	mov	r7, r8
   21bb4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
   21bb6:	4563      	cmp	r3, ip
   21bb8:	da81      	bge.n	21abe <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x13a>
    TFLITE_DCHECK_LT(i, size_);
   21bba:	9b12      	ldr	r3, [sp, #72]	@ 0x48
   21bbc:	2b01      	cmp	r3, #1
   21bbe:	f000 8092 	beq.w	21ce6 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x362>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   21bc2:	2f00      	cmp	r7, #0
   21bc4:	dd74      	ble.n	21cb0 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x32c>
   21bc6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
   21bc8:	2b02      	cmp	r3, #2
   21bca:	f000 808c 	beq.w	21ce6 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x362>
   21bce:	e9cd c228 	strd	ip, r2, [sp, #160]	@ 0xa0
   21bd2:	e9cd 062a 	strd	r0, r6, [sp, #168]	@ 0xa8
   21bd6:	e9cd 452c 	strd	r4, r5, [sp, #176]	@ 0xb0
   21bda:	46ab      	mov	fp, r5
   21bdc:	46b2      	mov	sl, r6
   21bde:	4613      	mov	r3, r2
   21be0:	2100      	movs	r1, #0
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   21be2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
   21be4:	2a00      	cmp	r2, #0
   21be6:	dd54      	ble.n	21c92 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x30e>
   21be8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
   21bea:	2a03      	cmp	r2, #3
   21bec:	d07b      	beq.n	21ce6 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x362>
   21bee:	465d      	mov	r5, fp
   21bf0:	2400      	movs	r4, #0
   21bf2:	e9cd ab17 	strd	sl, fp, [sp, #92]	@ 0x5c
   21bf6:	9719      	str	r7, [sp, #100]	@ 0x64
   21bf8:	46d3      	mov	fp, sl
   21bfa:	461f      	mov	r7, r3
   21bfc:	931a      	str	r3, [sp, #104]	@ 0x68
   21bfe:	46a2      	mov	sl, r4
   21c00:	9113      	str	r1, [sp, #76]	@ 0x4c
   21c02:	462b      	mov	r3, r5
   21c04:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
   21c06:	eb02 060b 	add.w	r6, r2, fp
   21c0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
   21c0c:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
   21c10:	18d5      	adds	r5, r2, r3
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   21c12:	2400      	movs	r4, #0
   21c14:	e02c      	b.n	21c70 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x2ec>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
   21c16:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
   21c18:	931c      	str	r3, [sp, #112]	@ 0x70
   21c1a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
   21c1c:	4293      	cmp	r3, r2
   21c1e:	da62      	bge.n	21ce6 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x362>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
   21c20:	991e      	ldr	r1, [sp, #120]	@ 0x78
   21c22:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
   21c24:	4291      	cmp	r1, r2
   21c26:	dd5e      	ble.n	21ce6 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x362>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
   21c28:	991f      	ldr	r1, [sp, #124]	@ 0x7c
   21c2a:	4551      	cmp	r1, sl
   21c2c:	dd5b      	ble.n	21ce6 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x362>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
   21c2e:	9920      	ldr	r1, [sp, #128]	@ 0x80
   21c30:	42a1      	cmp	r1, r4
   21c32:	dd58      	ble.n	21ce6 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x362>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
   21c34:	9922      	ldr	r1, [sp, #136]	@ 0x88
          output_data[Offset(extended_output_shape, b, y, x, c)] = binary_func(
   21c36:	f995 0000 	ldrsb.w	r0, [r5]
   21c3a:	428b      	cmp	r3, r1
   21c3c:	da53      	bge.n	21ce6 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x362>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
   21c3e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
   21c40:	4293      	cmp	r3, r2
   21c42:	dd50      	ble.n	21ce6 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x362>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
   21c44:	9b24      	ldr	r3, [sp, #144]	@ 0x90
   21c46:	4553      	cmp	r3, sl
   21c48:	dd4d      	ble.n	21ce6 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x362>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
   21c4a:	9b25      	ldr	r3, [sp, #148]	@ 0x94
   21c4c:	42a3      	cmp	r3, r4
   21c4e:	dd4a      	ble.n	21ce6 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x362>
   21c50:	f996 1000 	ldrsb.w	r1, [r6]
   21c54:	aa68      	add	r2, sp, #416	@ 0x1a0
   21c56:	f7ff fa49 	bl	210ec <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   21c5a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
   21c5c:	441e      	add	r6, r3
   21c5e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
   21c60:	441d      	add	r5, r3
   21c62:	9b12      	ldr	r3, [sp, #72]	@ 0x48
   21c64:	2b04      	cmp	r3, #4
   21c66:	d13e      	bne.n	21ce6 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x362>
   21c68:	f808 0f01 	strb.w	r0, [r8, #1]!
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   21c6c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
   21c6e:	3401      	adds	r4, #1
   21c70:	45a1      	cmp	r9, r4
   21c72:	dcd0      	bgt.n	21c16 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x292>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   21c74:	9a11      	ldr	r2, [sp, #68]	@ 0x44
   21c76:	4493      	add	fp, r2
   21c78:	9a10      	ldr	r2, [sp, #64]	@ 0x40
   21c7a:	4413      	add	r3, r2
   21c7c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
   21c7e:	f10a 0a01 	add.w	sl, sl, #1
   21c82:	4592      	cmp	sl, r2
   21c84:	444f      	add	r7, r9
   21c86:	dbbd      	blt.n	21c04 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x280>
   21c88:	e9dd ab17 	ldrd	sl, fp, [sp, #92]	@ 0x5c
   21c8c:	e9dd 7319 	ldrd	r7, r3, [sp, #100]	@ 0x64
   21c90:	9913      	ldr	r1, [sp, #76]	@ 0x4c
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   21c92:	9a16      	ldr	r2, [sp, #88]	@ 0x58
   21c94:	4413      	add	r3, r2
   21c96:	9a15      	ldr	r2, [sp, #84]	@ 0x54
   21c98:	3101      	adds	r1, #1
    TFLITE_DCHECK_LT(i, size_);
   21c9a:	4492      	add	sl, r2
   21c9c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
   21c9e:	42b9      	cmp	r1, r7
   21ca0:	4493      	add	fp, r2
   21ca2:	db9e      	blt.n	21be2 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x25e>
   21ca4:	e9dd c228 	ldrd	ip, r2, [sp, #160]	@ 0xa0
   21ca8:	e9dd 062a 	ldrd	r0, r6, [sp, #168]	@ 0xa8
   21cac:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	@ 0xb0
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   21cb0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
   21cb2:	3301      	adds	r3, #1
   21cb4:	931b      	str	r3, [sp, #108]	@ 0x6c
   21cb6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
   21cb8:	4402      	add	r2, r0
   21cba:	4426      	add	r6, r4
   21cbc:	441d      	add	r5, r3
   21cbe:	e779      	b.n	21bb4 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x230>
    for (int i = 0; i < size_; i++) {
   21cc0:	9834      	ldr	r0, [sp, #208]	@ 0xd0
   21cc2:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   21cc4:	2800      	cmp	r0, #0
    int buffer_size = 1;
   21cc6:	f04f 0301 	mov.w	r3, #1
    for (int i = 0; i < size_; i++) {
   21cca:	f73f aec1 	bgt.w	21a50 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xcc>
   21cce:	2d00      	cmp	r5, #0
   21cd0:	dc02      	bgt.n	21cd8 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x354>
   21cd2:	e6dc      	b.n	21a8e <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x10a>
   21cd4:	2d00      	cmp	r5, #0
   21cd6:	dd03      	ble.n	21ce0 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x35c>
    int buffer_size = 1;
   21cd8:	2101      	movs	r1, #1
   21cda:	e6c6      	b.n	21a6a <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xe6>
   21cdc:	2401      	movs	r4, #1
   21cde:	e6d0      	b.n	21a82 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xfe>
  TFLITE_CHECK_EQ(size_1, size_2);
   21ce0:	2b01      	cmp	r3, #1
   21ce2:	f43f aed4 	beq.w	21a8e <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x10a>
  TFLITE_DCHECK(tensor != nullptr);
   21ce6:	f003 fb4b 	bl	25380 <abort>
   21cea:	bf00      	nop

00021cec <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_>:
// This function is used for 8-bit as well as for 16-bit, but the accumulator
// is 32-bit for both cases. The overflow does not happen due to the
// choice of the shift (20 or 15, accordingly - see add.cc for more comments).
template <typename T>
inline typename std::enable_if<is_small_integer<T>::value, void>::type
BroadcastAdd4DSlow(const ArithmeticParams& params,
   21cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21cf0:	b0bb      	sub	sp, #236	@ 0xec
   21cf2:	460d      	mov	r5, r1
   21cf4:	9e45      	ldr	r6, [sp, #276]	@ 0x114
   21cf6:	9211      	str	r2, [sp, #68]	@ 0x44
                   const RuntimeShape& input1_shape, const T* input1_data,
                   const RuntimeShape& input2_shape, const T* input2_data,
                   const RuntimeShape& output_shape, T* output_data) {
  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   21cf8:	4619      	mov	r1, r3
   21cfa:	aa2a      	add	r2, sp, #168	@ 0xa8
   21cfc:	ab32      	add	r3, sp, #200	@ 0xc8
BroadcastAdd4DSlow(const ArithmeticParams& params,
   21cfe:	4604      	mov	r4, r0
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   21d00:	4628      	mov	r0, r5
   21d02:	f7ff fc0f 	bl	21524 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  int32_t DimensionsCount() const { return size_; }
   21d06:	6832      	ldr	r2, [r6, #0]
      : size_(new_shape_size) {
   21d08:	2304      	movs	r3, #4
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   21d0a:	429a      	cmp	r2, r3
      : size_(new_shape_size) {
   21d0c:	9324      	str	r3, [sp, #144]	@ 0x90
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   21d0e:	f300 81eb 	bgt.w	220e8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3fc>
    for (int i = 0; i < size_increase; ++i) {
   21d12:	f1d2 0004 	rsbs	r0, r2, #4
   21d16:	4625      	mov	r5, r4
   21d18:	d00b      	beq.n	21d32 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x46>
   21d1a:	a924      	add	r1, sp, #144	@ 0x90
   21d1c:	2300      	movs	r3, #0
    dims_[i] = val;
   21d1e:	2401      	movs	r4, #1
   21d20:	e002      	b.n	21d28 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3c>
    TFLITE_DCHECK_LT(i, size_);
   21d22:	2b04      	cmp	r3, #4
   21d24:	f000 81e0 	beq.w	220e8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3fc>
    for (int i = 0; i < size_increase; ++i) {
   21d28:	3301      	adds	r3, #1
   21d2a:	4298      	cmp	r0, r3
    dims_[i] = val;
   21d2c:	f841 4f04 	str.w	r4, [r1, #4]!
    for (int i = 0; i < size_increase; ++i) {
   21d30:	d1f7      	bne.n	21d22 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x36>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   21d32:	ab25      	add	r3, sp, #148	@ 0x94
   21d34:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   21d38:	0092      	lsls	r2, r2, #2
   21d3a:	1d31      	adds	r1, r6, #4
   21d3c:	f7f6 fc20 	bl	18580 <memcpy>
    TFLITE_DCHECK_LT(i, size_);
   21d40:	9b24      	ldr	r3, [sp, #144]	@ 0x90
   21d42:	9302      	str	r3, [sp, #8]
   21d44:	2b00      	cmp	r3, #0
   21d46:	f340 81cf 	ble.w	220e8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3fc>
   21d4a:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
    return dims_[i];
   21d4c:	9827      	ldr	r0, [sp, #156]	@ 0x9c
   21d4e:	f8dd c098 	ldr.w	ip, [sp, #152]	@ 0x98
   21d52:	9f28      	ldr	r7, [sp, #160]	@ 0xa0
   21d54:	9c25      	ldr	r4, [sp, #148]	@ 0x94
   21d56:	901f      	str	r0, [sp, #124]	@ 0x7c
   21d58:	005b      	lsls	r3, r3, #1
   21d5a:	930b      	str	r3, [sp, #44]	@ 0x2c
   21d5c:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
   21d5e:	9701      	str	r7, [sp, #4]
   21d60:	005b      	lsls	r3, r3, #1
   21d62:	930c      	str	r3, [sp, #48]	@ 0x30
   21d64:	fb00 f30c 	mul.w	r3, r0, ip
   21d68:	fb07 f303 	mul.w	r3, r7, r3
   21d6c:	931c      	str	r3, [sp, #112]	@ 0x70
   21d6e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
   21d70:	9307      	str	r3, [sp, #28]
   21d72:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
   21d74:	9308      	str	r3, [sp, #32]
   21d76:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
   21d78:	9309      	str	r3, [sp, #36]	@ 0x24
   21d7a:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   21d7c:	930a      	str	r3, [sp, #40]	@ 0x28
   21d7e:	e9dd 632f 	ldrd	r6, r3, [sp, #188]	@ 0xbc
   21d82:	9314      	str	r3, [sp, #80]	@ 0x50
   21d84:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
   21d86:	9303      	str	r3, [sp, #12]
   21d88:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
   21d8a:	9304      	str	r3, [sp, #16]
   21d8c:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
   21d8e:	9305      	str	r3, [sp, #20]
   21d90:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
   21d92:	9306      	str	r3, [sp, #24]
   21d94:	e9dd 1337 	ldrd	r1, r3, [sp, #220]	@ 0xdc
   21d98:	9313      	str	r3, [sp, #76]	@ 0x4c
   21d9a:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
   21d9c:	931d      	str	r3, [sp, #116]	@ 0x74
   21d9e:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
   21da0:	931e      	str	r3, [sp, #120]	@ 0x78
   21da2:	2200      	movs	r2, #0
   21da4:	fb07 f300 	mul.w	r3, r7, r0
   21da8:	e9cd 1615 	strd	r1, r6, [sp, #84]	@ 0x54
   21dac:	4696      	mov	lr, r2
   21dae:	4619      	mov	r1, r3
   21db0:	4623      	mov	r3, r4
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   21db2:	4573      	cmp	r3, lr
   21db4:	46a8      	mov	r8, r5
   21db6:	4692      	mov	sl, r2
   21db8:	4666      	mov	r6, ip
   21dba:	4691      	mov	r9, r2
   21dbc:	4615      	mov	r5, r2
   21dbe:	f340 8157 	ble.w	22070 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x384>
    TFLITE_DCHECK_LT(i, size_);
   21dc2:	9a02      	ldr	r2, [sp, #8]
   21dc4:	2a01      	cmp	r2, #1
   21dc6:	f000 818f 	beq.w	220e8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3fc>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   21dca:	2e00      	cmp	r6, #0
   21dcc:	f340 8145 	ble.w	2205a <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x36e>
   21dd0:	9a02      	ldr	r2, [sp, #8]
   21dd2:	2a02      	cmp	r2, #2
   21dd4:	f000 8188 	beq.w	220e8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3fc>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   21dd8:	e9cd 9a21 	strd	r9, sl, [sp, #132]	@ 0x84
   21ddc:	460a      	mov	r2, r1
   21dde:	f8dd b07c 	ldr.w	fp, [sp, #124]	@ 0x7c
   21de2:	9320      	str	r3, [sp, #128]	@ 0x80
   21de4:	4631      	mov	r1, r6
   21de6:	4628      	mov	r0, r5
   21de8:	4654      	mov	r4, sl
   21dea:	2700      	movs	r7, #0
   21dec:	f04f 0c01 	mov.w	ip, #1
   21df0:	464b      	mov	r3, r9
   21df2:	9523      	str	r5, [sp, #140]	@ 0x8c
   21df4:	4616      	mov	r6, r2
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   21df6:	f1bb 0f00 	cmp.w	fp, #0
   21dfa:	f340 811e 	ble.w	2203a <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x34e>
   21dfe:	9a02      	ldr	r2, [sp, #8]
   21e00:	2a03      	cmp	r2, #3
   21e02:	f000 8171 	beq.w	220e8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3fc>
   21e06:	9a46      	ldr	r2, [sp, #280]	@ 0x118
   21e08:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
   21e0c:	e9cd 1017 	strd	r1, r0, [sp, #92]	@ 0x5c
   21e10:	e9cd 4619 	strd	r4, r6, [sp, #100]	@ 0x64
   21e14:	3a02      	subs	r2, #2
   21e16:	9212      	str	r2, [sp, #72]	@ 0x48
   21e18:	46a1      	mov	r9, r4
   21e1a:	4682      	mov	sl, r0
   21e1c:	2500      	movs	r5, #0
   21e1e:	461a      	mov	r2, r3
   21e20:	931b      	str	r3, [sp, #108]	@ 0x6c
   21e22:	9b12      	ldr	r3, [sp, #72]	@ 0x48
   21e24:	f8cd 903c 	str.w	r9, [sp, #60]	@ 0x3c
   21e28:	eb03 0642 	add.w	r6, r3, r2, lsl #1
   21e2c:	9b44      	ldr	r3, [sp, #272]	@ 0x110
   21e2e:	9600      	str	r6, [sp, #0]
   21e30:	eb03 0449 	add.w	r4, r3, r9, lsl #1
   21e34:	9b11      	ldr	r3, [sp, #68]	@ 0x44
   21e36:	e9cd 2a0d 	strd	r2, sl, [sp, #52]	@ 0x34
   21e3a:	eb03 004a 	add.w	r0, r3, sl, lsl #1
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   21e3e:	2100      	movs	r1, #0
   21e40:	e08f      	b.n	21f62 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x276>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   21e42:	f113 4380 	adds.w	r3, r3, #1073741824	@ 0x40000000
   21e46:	f149 0900 	adc.w	r9, r9, #0
   21e4a:	0fdb      	lsrs	r3, r3, #31
   21e4c:	ea43 0349 	orr.w	r3, r3, r9, lsl #1
  assert(exponent >= 0);
   21e50:	f1ba 0f00 	cmp.w	sl, #0
  return RoundingDivideByPOT(
   21e54:	f1ca 0900 	rsb	r9, sl, #0
   21e58:	f300 80d4 	bgt.w	22004 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x318>
  assert(exponent <= 31);
   21e5c:	f11a 0f1f 	cmn.w	sl, #31
   21e60:	f2c0 813b 	blt.w	220da <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3ee>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   21e64:	fa0c fa09 	lsl.w	sl, ip, r9
   21e68:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
  return a ? BitNot(zero) : zero;
   21e6c:	ea4f 7bd3 	mov.w	fp, r3, lsr #31
  return a >> offset;
   21e70:	fa43 f909 	asr.w	r9, r3, r9
  return a + b;
   21e74:	eb0b 0b6a 	add.w	fp, fp, sl, asr #1
  return a & b;
   21e78:	ea0a 0303 	and.w	r3, sl, r3
  return a + b;
   21e7c:	455b      	cmp	r3, fp
   21e7e:	bfc8      	it	gt
   21e80:	f109 0901 	addgt.w	r9, r9, #1
                  shifted_input1_val, params.input1_multiplier,
                  params.input1_shift);
          const int32_t scaled_input2_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
                  shifted_input2_val, params.input2_multiplier,
                  params.input2_shift);
   21e84:	e9d8 3a09 	ldrd	r3, sl, [r8, #36]	@ 0x24
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   21e88:	4293      	cmp	r3, r2
   21e8a:	f000 8118 	beq.w	220be <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3d2>
  std::int64_t ab_64 = a_64 * b_64;
   21e8e:	fb83 3202 	smull	r3, r2, r3, r2
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   21e92:	2a00      	cmp	r2, #0
   21e94:	f2c0 80ef 	blt.w	22076 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x38a>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   21e98:	f113 4380 	adds.w	r3, r3, #1073741824	@ 0x40000000
   21e9c:	f142 0200 	adc.w	r2, r2, #0
   21ea0:	0fdb      	lsrs	r3, r3, #31
   21ea2:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
  assert(exponent >= 0);
   21ea6:	f1ba 0f00 	cmp.w	sl, #0
   21eaa:	f1ca 0200 	rsb	r2, sl, #0
   21eae:	f300 80a9 	bgt.w	22004 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x318>
  assert(exponent <= 31);
   21eb2:	f11a 0f1f 	cmn.w	sl, #31
   21eb6:	f2c0 8110 	blt.w	220da <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3ee>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   21eba:	fa0c fa02 	lsl.w	sl, ip, r2
   21ebe:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
  return a >> offset;
   21ec2:	ea4f 0b6a 	mov.w	fp, sl, asr #1
   21ec6:	fa43 f202 	asr.w	r2, r3, r2
  return a & b;
   21eca:	ea0a 0a03 	and.w	sl, sl, r3
  return a + b;
   21ece:	eb0b 7bd3 	add.w	fp, fp, r3, lsr #31
   21ed2:	45da      	cmp	sl, fp
   21ed4:	bfc8      	it	gt
   21ed6:	3201      	addgt	r2, #1
          const int32_t raw_sum = scaled_input1_val + scaled_input2_val;
   21ed8:	444a      	add	r2, r9
          const int32_t raw_output =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
                  raw_sum, params.output_multiplier, params.output_shift) +
   21eda:	e9d8 3904 	ldrd	r3, r9, [r8, #16]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   21ede:	4293      	cmp	r3, r2
   21ee0:	f000 80f4 	beq.w	220cc <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3e0>
  std::int64_t ab_64 = a_64 * b_64;
   21ee4:	fb82 3203 	smull	r3, r2, r2, r3
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   21ee8:	2a00      	cmp	r2, #0
   21eea:	f2c0 80d3 	blt.w	22094 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3a8>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   21eee:	f113 4380 	adds.w	r3, r3, #1073741824	@ 0x40000000
   21ef2:	f142 0200 	adc.w	r2, r2, #0
   21ef6:	0fdb      	lsrs	r3, r3, #31
   21ef8:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
  assert(exponent >= 0);
   21efc:	f1b9 0f00 	cmp.w	r9, #0
   21f00:	f1c9 0200 	rsb	r2, r9, #0
   21f04:	dc7e      	bgt.n	22004 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x318>
  assert(exponent <= 31);
   21f06:	f119 0f1f 	cmn.w	r9, #31
   21f0a:	f2c0 80e6 	blt.w	220da <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3ee>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   21f0e:	fa0c f902 	lsl.w	r9, ip, r2
   21f12:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
  return a ? BitNot(zero) : zero;
   21f16:	ea4f 7ad3 	mov.w	sl, r3, lsr #31
  return a >> offset;
   21f1a:	fa43 f202 	asr.w	r2, r3, r2
  return a + b;
   21f1e:	eb0a 0a69 	add.w	sl, sl, r9, asr #1
  return a & b;
   21f22:	ea09 0303 	and.w	r3, r9, r3
  return a + b;
   21f26:	4553      	cmp	r3, sl
   21f28:	bfc8      	it	gt
   21f2a:	3201      	addgt	r2, #1
   21f2c:	f8d8 300c 	ldr.w	r3, [r8, #12]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   21f30:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
   21f32:	441a      	add	r2, r3
      if (__a < __b)
   21f34:	f8d8 302c 	ldr.w	r3, [r8, #44]	@ 0x2c
   21f38:	429a      	cmp	r2, r3
   21f3a:	bfb8      	it	lt
   21f3c:	461a      	movlt	r2, r3
      if (__b < __a)
   21f3e:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
   21f42:	429a      	cmp	r2, r3
   21f44:	bfa8      	it	ge
   21f46:	461a      	movge	r2, r3
   21f48:	9b02      	ldr	r3, [sp, #8]
   21f4a:	4434      	add	r4, r6
   21f4c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
   21f4e:	2b04      	cmp	r3, #4
   21f50:	4430      	add	r0, r6
              params.output_offset;
          const int32_t clamped_output =
              std::min(params.quantized_activation_max,
                       std::max(params.quantized_activation_min, raw_output));
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   21f52:	b212      	sxth	r2, r2
   21f54:	f040 80c8 	bne.w	220e8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3fc>
   21f58:	9b00      	ldr	r3, [sp, #0]
   21f5a:	f823 2f02 	strh.w	r2, [r3, #2]!
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   21f5e:	3101      	adds	r1, #1
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   21f60:	9300      	str	r3, [sp, #0]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   21f62:	9b01      	ldr	r3, [sp, #4]
   21f64:	428b      	cmp	r3, r1
   21f66:	dd54      	ble.n	22012 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x326>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
   21f68:	9a07      	ldr	r2, [sp, #28]
              params.input1_offset +
   21f6a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   21f6e:	4572      	cmp	r2, lr
   21f70:	f340 80ba 	ble.w	220e8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3fc>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
   21f74:	9a08      	ldr	r2, [sp, #32]
   21f76:	42ba      	cmp	r2, r7
   21f78:	f340 80b6 	ble.w	220e8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3fc>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
   21f7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
   21f7e:	42aa      	cmp	r2, r5
   21f80:	f340 80b2 	ble.w	220e8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3fc>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
   21f84:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
   21f86:	428a      	cmp	r2, r1
   21f88:	f340 80ae 	ble.w	220e8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3fc>
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   21f8c:	f9b0 9000 	ldrsh.w	r9, [r0]
              params.input2_offset +
   21f90:	f8d8 a008 	ldr.w	sl, [r8, #8]
          const int32_t input1_val =
   21f94:	4499      	add	r9, r3
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
   21f96:	9b03      	ldr	r3, [sp, #12]
   21f98:	4573      	cmp	r3, lr
   21f9a:	f340 80a5 	ble.w	220e8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3fc>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
   21f9e:	9b04      	ldr	r3, [sp, #16]
   21fa0:	42bb      	cmp	r3, r7
   21fa2:	f340 80a1 	ble.w	220e8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3fc>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
   21fa6:	9b05      	ldr	r3, [sp, #20]
   21fa8:	42ab      	cmp	r3, r5
   21faa:	f340 809d 	ble.w	220e8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3fc>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
   21fae:	9b06      	ldr	r3, [sp, #24]
   21fb0:	428b      	cmp	r3, r1
   21fb2:	f340 8099 	ble.w	220e8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3fc>
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   21fb6:	f9b4 2000 	ldrsh.w	r2, [r4]
              input1_val * (1 << params.left_shift);
   21fba:	f8d8 3018 	ldr.w	r3, [r8, #24]
          const int32_t input2_val =
   21fbe:	4452      	add	r2, sl
          const int32_t shifted_input1_val =
   21fc0:	fa09 f903 	lsl.w	r9, r9, r3
          const int32_t shifted_input2_val =
   21fc4:	409a      	lsls	r2, r3
                  params.input1_shift);
   21fc6:	e9d8 3a07 	ldrd	r3, sl, [r8, #28]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   21fca:	454b      	cmp	r3, r9
   21fcc:	d071      	beq.n	220b2 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3c6>
  std::int64_t ab_64 = a_64 * b_64;
   21fce:	fb89 3903 	smull	r3, r9, r9, r3
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   21fd2:	f1b9 0f00 	cmp.w	r9, #0
   21fd6:	f6bf af34 	bge.w	21e42 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x156>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   21fda:	4e44      	ldr	r6, [pc, #272]	@ (220ec <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x400>)
   21fdc:	199b      	adds	r3, r3, r6
   21fde:	f169 0900 	sbc.w	r9, r9, #0
   21fe2:	f1b9 0f00 	cmp.w	r9, #0
   21fe6:	da04      	bge.n	21ff2 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x306>
   21fe8:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
   21fec:	199b      	adds	r3, r3, r6
   21fee:	f149 0900 	adc.w	r9, r9, #0
   21ff2:	0fdb      	lsrs	r3, r3, #31
  assert(exponent >= 0);
   21ff4:	f1ba 0f00 	cmp.w	sl, #0
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   21ff8:	ea43 0349 	orr.w	r3, r3, r9, lsl #1
  return RoundingDivideByPOT(
   21ffc:	f1ca 0900 	rsb	r9, sl, #0
  assert(exponent >= 0);
   22000:	f77f af2c 	ble.w	21e5c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x170>
   22004:	4b3a      	ldr	r3, [pc, #232]	@ (220f0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x404>)
   22006:	4a3b      	ldr	r2, [pc, #236]	@ (220f4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x408>)
   22008:	483b      	ldr	r0, [pc, #236]	@ (220f8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x40c>)
   2200a:	f44f 71b3 	mov.w	r1, #358	@ 0x166
   2200e:	f003 f9bf 	bl	25390 <__assert_func>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   22012:	e9dd 2a0d 	ldrd	r2, sl, [sp, #52]	@ 0x34
   22016:	f8dd 903c 	ldr.w	r9, [sp, #60]	@ 0x3c
   2201a:	441a      	add	r2, r3
   2201c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
   2201e:	4499      	add	r9, r3
   22020:	9b14      	ldr	r3, [sp, #80]	@ 0x50
   22022:	449a      	add	sl, r3
   22024:	9b10      	ldr	r3, [sp, #64]	@ 0x40
   22026:	3501      	adds	r5, #1
   22028:	429d      	cmp	r5, r3
   2202a:	f6ff aefa 	blt.w	21e22 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x136>
   2202e:	e9dd 1017 	ldrd	r1, r0, [sp, #92]	@ 0x5c
   22032:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	@ 0x64
   22036:	469b      	mov	fp, r3
   22038:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   2203a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
   2203c:	3701      	adds	r7, #1
    TFLITE_DCHECK_LT(i, size_);
   2203e:	4414      	add	r4, r2
   22040:	9a16      	ldr	r2, [sp, #88]	@ 0x58
   22042:	428f      	cmp	r7, r1
   22044:	4433      	add	r3, r6
   22046:	4410      	add	r0, r2
   22048:	f6ff aed5 	blt.w	21df6 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x10a>
   2204c:	e9dd 9a21 	ldrd	r9, sl, [sp, #132]	@ 0x84
   22050:	4632      	mov	r2, r6
   22052:	9b20      	ldr	r3, [sp, #128]	@ 0x80
   22054:	9d23      	ldr	r5, [sp, #140]	@ 0x8c
   22056:	460e      	mov	r6, r1
   22058:	4611      	mov	r1, r2
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   2205a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
   2205c:	4491      	add	r9, r2
   2205e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
   22060:	f10e 0e01 	add.w	lr, lr, #1
   22064:	4492      	add	sl, r2
   22066:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
   22068:	4573      	cmp	r3, lr
   2206a:	4415      	add	r5, r2
   2206c:	f73f aea9 	bgt.w	21dc2 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0xd6>
              static_cast<T>(clamped_output);
        }
      }
    }
  }
}
   22070:	b03b      	add	sp, #236	@ 0xec
   22072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   22076:	4e1d      	ldr	r6, [pc, #116]	@ (220ec <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x400>)
   22078:	199b      	adds	r3, r3, r6
   2207a:	f162 0200 	sbc.w	r2, r2, #0
   2207e:	2a00      	cmp	r2, #0
   22080:	da04      	bge.n	2208c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3a0>
   22082:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
   22086:	199b      	adds	r3, r3, r6
   22088:	f142 0200 	adc.w	r2, r2, #0
   2208c:	0fdb      	lsrs	r3, r3, #31
   2208e:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   22092:	e708      	b.n	21ea6 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x1ba>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   22094:	4e15      	ldr	r6, [pc, #84]	@ (220ec <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x400>)
   22096:	199b      	adds	r3, r3, r6
   22098:	f162 0200 	sbc.w	r2, r2, #0
   2209c:	2a00      	cmp	r2, #0
   2209e:	da04      	bge.n	220aa <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3be>
   220a0:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
   220a4:	199b      	adds	r3, r3, r6
   220a6:	f142 0200 	adc.w	r2, r2, #0
   220aa:	0fdb      	lsrs	r3, r3, #31
   220ac:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   220b0:	e724      	b.n	21efc <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x210>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   220b2:	f1b9 4f00 	cmp.w	r9, #2147483648	@ 0x80000000
   220b6:	d18a      	bne.n	21fce <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x2e2>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   220b8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
   220bc:	e6c8      	b.n	21e50 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x164>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   220be:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
   220c2:	f47f aee4 	bne.w	21e8e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x1a2>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   220c6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
   220ca:	e6ec      	b.n	21ea6 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x1ba>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   220cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
   220d0:	f47f af08 	bne.w	21ee4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x1f8>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   220d4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
   220d8:	e710      	b.n	21efc <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x210>
  assert(exponent <= 31);
   220da:	4b08      	ldr	r3, [pc, #32]	@ (220fc <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x410>)
   220dc:	4a05      	ldr	r2, [pc, #20]	@ (220f4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x408>)
   220de:	4806      	ldr	r0, [pc, #24]	@ (220f8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x40c>)
   220e0:	f240 1167 	movw	r1, #359	@ 0x167
   220e4:	f003 f954 	bl	25390 <__assert_func>
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   220e8:	f003 f94a 	bl	25380 <abort>
   220ec:	c0000001 	.word	0xc0000001
   220f0:	00043a78 	.word	0x00043a78
   220f4:	000439cc 	.word	0x000439cc
   220f8:	00043a28 	.word	0x00043a28
   220fc:	000439bc 	.word	0x000439bc

00022100 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0>:
TfLiteStatus EvalAddQuantizedInt16(TfLiteContext* context, TfLiteNode* node,
   22100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22104:	b0d5      	sub	sp, #340	@ 0x154
   22106:	461d      	mov	r5, r3
  op_params->left_shift = data->left_shift;
   22108:	6a43      	ldr	r3, [r0, #36]	@ 0x24
   2210a:	930d      	str	r3, [sp, #52]	@ 0x34
   2210c:	9340      	str	r3, [sp, #256]	@ 0x100
  op_params->input1_offset = data->input1_offset;
   2210e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
   22110:	930e      	str	r3, [sp, #56]	@ 0x38
   22112:	933b      	str	r3, [sp, #236]	@ 0xec
  op_params->input1_multiplier = data->input1_multiplier;
   22114:	6943      	ldr	r3, [r0, #20]
   22116:	930f      	str	r3, [sp, #60]	@ 0x3c
   22118:	9341      	str	r3, [sp, #260]	@ 0x104
  op_params->input2_offset = data->input2_offset;
   2211a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
   2211c:	9310      	str	r3, [sp, #64]	@ 0x40
  SetActivationParams(data->output_activation_min, data->output_activation_max,
   2211e:	e9d0 ab03 	ldrd	sl, fp, [r0, #12]
  op_params->input2_offset = data->input2_offset;
   22122:	933c      	str	r3, [sp, #240]	@ 0xf0
  op_params->input2_multiplier = data->input2_multiplier;
   22124:	6983      	ldr	r3, [r0, #24]
   22126:	9311      	str	r3, [sp, #68]	@ 0x44
   22128:	9343      	str	r3, [sp, #268]	@ 0x10c
  op_params->input2_shift = data->input2_shift;
   2212a:	6883      	ldr	r3, [r0, #8]
  op_params->input1_shift = data->input1_shift;
   2212c:	6846      	ldr	r6, [r0, #4]
  op_params->output_offset = data->output_offset;
   2212e:	6b07      	ldr	r7, [r0, #48]	@ 0x30
  op_params->output_shift = data->output_shift;
   22130:	f8d0 9020 	ldr.w	r9, [r0, #32]
  op_params->input2_shift = data->input2_shift;
   22134:	9312      	str	r3, [sp, #72]	@ 0x48
TfLiteStatus EvalAddQuantizedInt16(TfLiteContext* context, TfLiteNode* node,
   22136:	4614      	mov	r4, r2
  op_params->input2_shift = data->input2_shift;
   22138:	9344      	str	r3, [sp, #272]	@ 0x110
  op_params->output_multiplier = data->output_multiplier;
   2213a:	69c3      	ldr	r3, [r0, #28]
   2213c:	9313      	str	r3, [sp, #76]	@ 0x4c
      tflite::micro::GetTensorShape(input1),
   2213e:	a834      	add	r0, sp, #208	@ 0xd0
TfLiteStatus EvalAddQuantizedInt16(TfLiteContext* context, TfLiteNode* node,
   22140:	4688      	mov	r8, r1
  op_params->output_multiplier = data->output_multiplier;
   22142:	933e      	str	r3, [sp, #248]	@ 0xf8
  params->quantized_activation_max = max;
   22144:	e9cd ab45 	strd	sl, fp, [sp, #276]	@ 0x114
  op_params->input1_shift = data->input1_shift;
   22148:	9642      	str	r6, [sp, #264]	@ 0x108
  op_params->output_offset = data->output_offset;
   2214a:	973d      	str	r7, [sp, #244]	@ 0xf4
  op_params->output_shift = data->output_shift;
   2214c:	f8cd 90fc 	str.w	r9, [sp, #252]	@ 0xfc
      tflite::micro::GetTensorShape(input1),
   22150:	f001 fb38 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::micro::GetTensorShape(input2), &op_params);
   22154:	4621      	mov	r1, r4
   22156:	a82e      	add	r0, sp, #184	@ 0xb8
   22158:	f001 fb34 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  bool need_broadcast = reference_ops::ProcessBroadcastShapes(
   2215c:	aa3a      	add	r2, sp, #232	@ 0xe8
   2215e:	a92e      	add	r1, sp, #184	@ 0xb8
   22160:	a834      	add	r0, sp, #208	@ 0xd0
   22162:	f7ff f899 	bl	21298 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>
  if (need_broadcast) {
   22166:	2800      	cmp	r0, #0
   22168:	d165      	bne.n	22236 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x136>
   2216a:	f1b8 0f00 	cmp.w	r8, #0
   2216e:	f000 8099 	beq.w	222a4 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1a4>
  return reinterpret_cast<const T*>(tensor->data.raw);
   22172:	f8d8 3000 	ldr.w	r3, [r8]
   22176:	9314      	str	r3, [sp, #80]	@ 0x50
  TFLITE_DCHECK(tensor != nullptr);
   22178:	2c00      	cmp	r4, #0
   2217a:	f000 8093 	beq.w	222a4 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1a4>
  return reinterpret_cast<const T*>(tensor->data.raw);
   2217e:	6823      	ldr	r3, [r4, #0]
   22180:	9315      	str	r3, [sp, #84]	@ 0x54
  TFLITE_DCHECK(tensor != nullptr);
   22182:	2d00      	cmp	r5, #0
   22184:	f000 808e 	beq.w	222a4 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1a4>
  return reinterpret_cast<T*>(tensor->data.raw);
   22188:	682b      	ldr	r3, [r5, #0]
        MatchingElementsSize(tflite::micro::GetTensorShape(input1),
   2218a:	4641      	mov	r1, r8
   2218c:	a822      	add	r0, sp, #136	@ 0x88
   2218e:	4698      	mov	r8, r3
   22190:	f001 fb18 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                             tflite::micro::GetTensorShape(input2),
   22194:	4621      	mov	r1, r4
   22196:	a81c      	add	r0, sp, #112	@ 0x70
   22198:	f001 fb14 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                             tflite::micro::GetTensorShape(output)));
   2219c:	a816      	add	r0, sp, #88	@ 0x58
   2219e:	4629      	mov	r1, r5
   221a0:	f001 fb10 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    for (int i = 0; i < size_; i++) {
   221a4:	9822      	ldr	r0, [sp, #136]	@ 0x88
   221a6:	2800      	cmp	r0, #0
   221a8:	dd68      	ble.n	2227c <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x17c>
   221aa:	ab22      	add	r3, sp, #136	@ 0x88
   221ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    int buffer_size = 1;
   221b0:	2201      	movs	r2, #1
      buffer_size *= dims_data[i];
   221b2:	f853 1f04 	ldr.w	r1, [r3, #4]!
    for (int i = 0; i < size_; i++) {
   221b6:	4298      	cmp	r0, r3
      buffer_size *= dims_data[i];
   221b8:	fb01 f202 	mul.w	r2, r1, r2
    for (int i = 0; i < size_; i++) {
   221bc:	d1f9      	bne.n	221b2 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2>
   221be:	981c      	ldr	r0, [sp, #112]	@ 0x70
   221c0:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
   221c4:	2800      	cmp	r0, #0
   221c6:	dd64      	ble.n	22292 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x192>
   221c8:	ab1c      	add	r3, sp, #112	@ 0x70
   221ca:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    int buffer_size = 1;
   221ce:	2401      	movs	r4, #1
      buffer_size *= dims_data[i];
   221d0:	f853 1f04 	ldr.w	r1, [r3, #4]!
    for (int i = 0; i < size_; i++) {
   221d4:	4298      	cmp	r0, r3
      buffer_size *= dims_data[i];
   221d6:	fb01 f404 	mul.w	r4, r1, r4
    for (int i = 0; i < size_; i++) {
   221da:	d1f9      	bne.n	221d0 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xd0>
   221dc:	f1bc 0f00 	cmp.w	ip, #0
   221e0:	dd5c      	ble.n	2229c <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x19c>
   221e2:	a916      	add	r1, sp, #88	@ 0x58
    int buffer_size = 1;
   221e4:	2001      	movs	r0, #1
    for (int i = 0; i < size_; i++) {
   221e6:	2300      	movs	r3, #0
      buffer_size *= dims_data[i];
   221e8:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (int i = 0; i < size_; i++) {
   221ec:	3301      	adds	r3, #1
   221ee:	459c      	cmp	ip, r3
      buffer_size *= dims_data[i];
   221f0:	fb05 f000 	mul.w	r0, r5, r0
    for (int i = 0; i < size_; i++) {
   221f4:	dcf8      	bgt.n	221e8 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xe8>
  TFLITE_CHECK_EQ(size_1, size_2);
   221f6:	42a2      	cmp	r2, r4
   221f8:	d154      	bne.n	222a4 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1a4>
  TFLITE_CHECK_EQ(size_2, size_3);
   221fa:	4282      	cmp	r2, r0
   221fc:	d152      	bne.n	222a4 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1a4>
    arm_elementwise_add_s16(
   221fe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
   22200:	f8cd 8014 	str.w	r8, [sp, #20]
   22204:	e9cd 7306 	strd	r7, r3, [sp, #24]
   22208:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   2220a:	9304      	str	r3, [sp, #16]
   2220c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
   2220e:	9303      	str	r3, [sp, #12]
   22210:	9b11      	ldr	r3, [sp, #68]	@ 0x44
   22212:	9302      	str	r3, [sp, #8]
   22214:	9b10      	ldr	r3, [sp, #64]	@ 0x40
   22216:	e9cd b20a 	strd	fp, r2, [sp, #40]	@ 0x28
   2221a:	e9cd 6300 	strd	r6, r3, [sp]
   2221e:	e9cd 9a08 	strd	r9, sl, [sp, #32]
   22222:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
   22226:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
   2222a:	f7f7 fa97 	bl	1975c <arm_elementwise_add_s16>
}
   2222e:	2000      	movs	r0, #0
   22230:	b055      	add	sp, #340	@ 0x154
   22232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        op_params, tflite::micro::GetTensorShape(input1),
   22236:	4641      	mov	r1, r8
   22238:	a834      	add	r0, sp, #208	@ 0xd0
   2223a:	f001 fac3 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   2223e:	f1b8 0f00 	cmp.w	r8, #0
   22242:	d02f      	beq.n	222a4 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1a4>
        tflite::micro::GetTensorShape(input2),
   22244:	4621      	mov	r1, r4
   22246:	a82e      	add	r0, sp, #184	@ 0xb8
  return reinterpret_cast<const T*>(tensor->data.raw);
   22248:	f8d8 6000 	ldr.w	r6, [r8]
   2224c:	f001 faba 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   22250:	b344      	cbz	r4, 222a4 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1a4>
  return reinterpret_cast<const T*>(tensor->data.raw);
   22252:	6827      	ldr	r7, [r4, #0]
        tflite::micro::GetTensorShape(output),
   22254:	ac28      	add	r4, sp, #160	@ 0xa0
   22256:	4629      	mov	r1, r5
   22258:	4620      	mov	r0, r4
   2225a:	f001 fab3 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   2225e:	b30d      	cbz	r5, 222a4 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1a4>
    reference_ops::BroadcastAdd4DSlow(
   22260:	e9cd 7400 	strd	r7, r4, [sp]
   22264:	682b      	ldr	r3, [r5, #0]
   22266:	9302      	str	r3, [sp, #8]
   22268:	a83a      	add	r0, sp, #232	@ 0xe8
   2226a:	ab2e      	add	r3, sp, #184	@ 0xb8
   2226c:	4632      	mov	r2, r6
   2226e:	a934      	add	r1, sp, #208	@ 0xd0
   22270:	f7ff fd3c 	bl	21cec <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_>
}
   22274:	2000      	movs	r0, #0
   22276:	b055      	add	sp, #340	@ 0x154
   22278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2227c:	981c      	ldr	r0, [sp, #112]	@ 0x70
   2227e:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
   22282:	2800      	cmp	r0, #0
    int buffer_size = 1;
   22284:	f04f 0201 	mov.w	r2, #1
    for (int i = 0; i < size_; i++) {
   22288:	dc9e      	bgt.n	221c8 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xc8>
   2228a:	f1bc 0f00 	cmp.w	ip, #0
   2228e:	dc03      	bgt.n	22298 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x198>
   22290:	e7b5      	b.n	221fe <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xfe>
   22292:	f1bc 0f00 	cmp.w	ip, #0
   22296:	dd03      	ble.n	222a0 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1a0>
    int buffer_size = 1;
   22298:	2401      	movs	r4, #1
   2229a:	e7a2      	b.n	221e2 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xe2>
   2229c:	2001      	movs	r0, #1
   2229e:	e7aa      	b.n	221f6 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf6>
  TFLITE_CHECK_EQ(size_1, size_2);
   222a0:	2a01      	cmp	r2, #1
   222a2:	d0ac      	beq.n	221fe <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xfe>
  TFLITE_DCHECK(tensor != nullptr);
   222a4:	f003 f86c 	bl	25380 <abort>

000222a8 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0>:
TfLiteStatus EvalAddQuantized(TfLiteContext* context, TfLiteNode* node,
   222a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  switch (output->type) {
   222ac:	7a1e      	ldrb	r6, [r3, #8]
   222ae:	2e07      	cmp	r6, #7
TfLiteStatus EvalAddQuantized(TfLiteContext* context, TfLiteNode* node,
   222b0:	b0f9      	sub	sp, #484	@ 0x1e4
  switch (output->type) {
   222b2:	d00d      	beq.n	222d0 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x28>
   222b4:	2e09      	cmp	r6, #9
   222b6:	d005      	beq.n	222c4 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1c>
   222b8:	2e02      	cmp	r6, #2
   222ba:	d00c      	beq.n	222d6 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x2e>
   222bc:	2001      	movs	r0, #1
}
   222be:	b079      	add	sp, #484	@ 0x1e4
   222c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      EvalAddQuantizedInt8(context, node, params, data, input1, input2, output);
   222c4:	f7ff fb5e 	bl	21984 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0>
  return kTfLiteOk;
   222c8:	2000      	movs	r0, #0
}
   222ca:	b079      	add	sp, #484	@ 0x1e4
   222cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      EvalAddQuantizedInt16(context, node, params, data, input1, input2,
   222d0:	f7ff ff16 	bl	22100 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0>
      break;
   222d4:	e7f8      	b.n	222c8 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x20>
      op_params.left_shift = data->left_shift;
   222d6:	461f      	mov	r7, r3
   222d8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
   222da:	9364      	str	r3, [sp, #400]	@ 0x190
      op_params.input1_offset = data->input1_offset;
   222dc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
   222de:	935f      	str	r3, [sp, #380]	@ 0x17c
      op_params.input1_multiplier = data->input1_multiplier;
   222e0:	6943      	ldr	r3, [r0, #20]
   222e2:	9365      	str	r3, [sp, #404]	@ 0x194
      op_params.input2_offset = data->input2_offset;
   222e4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
   222e6:	9360      	str	r3, [sp, #384]	@ 0x180
      op_params.input2_multiplier = data->input2_multiplier;
   222e8:	6983      	ldr	r3, [r0, #24]
   222ea:	9367      	str	r3, [sp, #412]	@ 0x19c
      op_params.output_offset = data->output_offset;
   222ec:	6b03      	ldr	r3, [r0, #48]	@ 0x30
   222ee:	9361      	str	r3, [sp, #388]	@ 0x184
      op_params.output_multiplier = data->output_multiplier;
   222f0:	69c3      	ldr	r3, [r0, #28]
   222f2:	9362      	str	r3, [sp, #392]	@ 0x188
      op_params.output_shift = data->output_shift;
   222f4:	6a03      	ldr	r3, [r0, #32]
   222f6:	9363      	str	r3, [sp, #396]	@ 0x18c
   222f8:	4615      	mov	r5, r2
      SetActivationParams(data->output_activation_min, data->output_activation_max,
   222fa:	68c3      	ldr	r3, [r0, #12]
   222fc:	6902      	ldr	r2, [r0, #16]
      op_params.input1_shift = data->input1_shift;
   222fe:	6846      	ldr	r6, [r0, #4]
      op_params.input2_shift = data->input2_shift;
   22300:	f8d0 8008 	ldr.w	r8, [r0, #8]
      SetActivationParams(data->output_activation_min, data->output_activation_max,
   22304:	9309      	str	r3, [sp, #36]	@ 0x24
          tflite::micro::GetTensorShape(input1),
   22306:	a856      	add	r0, sp, #344	@ 0x158
  params->quantized_activation_max = max;
   22308:	e9cd 3269 	strd	r3, r2, [sp, #420]	@ 0x1a4
   2230c:	4689      	mov	r9, r1
      SetActivationParams(data->output_activation_min, data->output_activation_max,
   2230e:	9208      	str	r2, [sp, #32]
      op_params.input1_shift = data->input1_shift;
   22310:	9666      	str	r6, [sp, #408]	@ 0x198
      op_params.input2_shift = data->input2_shift;
   22312:	f8cd 81a0 	str.w	r8, [sp, #416]	@ 0x1a0
          tflite::micro::GetTensorShape(input1),
   22316:	f001 fa55 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorShape(input2), &op_params);
   2231a:	4629      	mov	r1, r5
   2231c:	a84e      	add	r0, sp, #312	@ 0x138
   2231e:	f001 fa51 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      bool need_broadcast = reference_ops::ProcessBroadcastShapes(
   22322:	a94e      	add	r1, sp, #312	@ 0x138
   22324:	aa5e      	add	r2, sp, #376	@ 0x178
   22326:	a856      	add	r0, sp, #344	@ 0x158
   22328:	f7fe ffb6 	bl	21298 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>
            op_params, tflite::micro::GetTensorShape(input1),
   2232c:	4649      	mov	r1, r9
      if (need_broadcast) {
   2232e:	2800      	cmp	r0, #0
   22330:	f000 8119 	beq.w	22566 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x2be>
            op_params, tflite::micro::GetTensorShape(input1),
   22334:	a842      	add	r0, sp, #264	@ 0x108
   22336:	f001 fa45 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
   2233a:	f1b9 0f00 	cmp.w	r9, #0
   2233e:	f000 81c1 	beq.w	226c4 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
  return reinterpret_cast<const T*>(tensor->data.raw);
   22342:	f8d9 3000 	ldr.w	r3, [r9]
   22346:	9302      	str	r3, [sp, #8]
            tflite::micro::GetTensorShape(input2),
   22348:	4629      	mov	r1, r5
   2234a:	a83c      	add	r0, sp, #240	@ 0xf0
   2234c:	f001 fa3a 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   22350:	2d00      	cmp	r5, #0
   22352:	f000 81b7 	beq.w	226c4 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
            tflite::micro::GetTensorShape(output),
   22356:	4639      	mov	r1, r7
   22358:	a836      	add	r0, sp, #216	@ 0xd8
  return reinterpret_cast<const T*>(tensor->data.raw);
   2235a:	f8d5 b000 	ldr.w	fp, [r5]
   2235e:	f001 fa31 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<T*>(tensor->data.raw);
   22362:	683c      	ldr	r4, [r7, #0]
   22364:	941b      	str	r4, [sp, #108]	@ 0x6c
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   22366:	ab56      	add	r3, sp, #344	@ 0x158
   22368:	aa4e      	add	r2, sp, #312	@ 0x138
   2236a:	a93c      	add	r1, sp, #240	@ 0xf0
   2236c:	a842      	add	r0, sp, #264	@ 0x108
   2236e:	f7ff f8d9 	bl	21524 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  int32_t DimensionsCount() const { return size_; }
   22372:	9a36      	ldr	r2, [sp, #216]	@ 0xd8
      : size_(new_shape_size) {
   22374:	2304      	movs	r3, #4
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   22376:	429a      	cmp	r2, r3
      : size_(new_shape_size) {
   22378:	9348      	str	r3, [sp, #288]	@ 0x120
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   2237a:	f300 81a3 	bgt.w	226c4 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
    for (int i = 0; i < size_increase; ++i) {
   2237e:	1a98      	subs	r0, r3, r2
   22380:	d00b      	beq.n	2239a <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf2>
   22382:	a948      	add	r1, sp, #288	@ 0x120
   22384:	2300      	movs	r3, #0
    dims_[i] = val;
   22386:	2401      	movs	r4, #1
   22388:	e002      	b.n	22390 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xe8>
    TFLITE_DCHECK_LT(i, size_);
   2238a:	2b04      	cmp	r3, #4
   2238c:	f000 819a 	beq.w	226c4 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
    for (int i = 0; i < size_increase; ++i) {
   22390:	3301      	adds	r3, #1
   22392:	4298      	cmp	r0, r3
    dims_[i] = val;
   22394:	f841 4f04 	str.w	r4, [r1, #4]!
    for (int i = 0; i < size_increase; ++i) {
   22398:	d1f7      	bne.n	2238a <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xe2>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   2239a:	ab49      	add	r3, sp, #292	@ 0x124
   2239c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   223a0:	0092      	lsls	r2, r2, #2
   223a2:	a937      	add	r1, sp, #220	@ 0xdc
   223a4:	f7f6 f8ec 	bl	18580 <memcpy>
    TFLITE_DCHECK_LT(i, size_);
   223a8:	9b48      	ldr	r3, [sp, #288]	@ 0x120
   223aa:	9307      	str	r3, [sp, #28]
   223ac:	2b00      	cmp	r3, #0
   223ae:	f340 8189 	ble.w	226c4 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
   223b2:	9b5d      	ldr	r3, [sp, #372]	@ 0x174
    return dims_[i];
   223b4:	f8dd 9130 	ldr.w	r9, [sp, #304]	@ 0x130
   223b8:	009b      	lsls	r3, r3, #2
   223ba:	e9dd 4a4a 	ldrd	r4, sl, [sp, #296]	@ 0x128
   223be:	9312      	str	r3, [sp, #72]	@ 0x48
   223c0:	9b55      	ldr	r3, [sp, #340]	@ 0x154
   223c2:	009b      	lsls	r3, r3, #2
   223c4:	9313      	str	r3, [sp, #76]	@ 0x4c
   223c6:	fb0a f304 	mul.w	r3, sl, r4
   223ca:	fb09 f203 	mul.w	r2, r9, r3
   223ce:	9b49      	ldr	r3, [sp, #292]	@ 0x124
   223d0:	931c      	str	r3, [sp, #112]	@ 0x70
   223d2:	9b4e      	ldr	r3, [sp, #312]	@ 0x138
   223d4:	930a      	str	r3, [sp, #40]	@ 0x28
   223d6:	9b4f      	ldr	r3, [sp, #316]	@ 0x13c
   223d8:	930b      	str	r3, [sp, #44]	@ 0x2c
   223da:	9b50      	ldr	r3, [sp, #320]	@ 0x140
   223dc:	930c      	str	r3, [sp, #48]	@ 0x30
   223de:	9b51      	ldr	r3, [sp, #324]	@ 0x144
   223e0:	930d      	str	r3, [sp, #52]	@ 0x34
   223e2:	e9dd 3053 	ldrd	r3, r0, [sp, #332]	@ 0x14c
   223e6:	9003      	str	r0, [sp, #12]
   223e8:	9856      	ldr	r0, [sp, #344]	@ 0x158
   223ea:	900e      	str	r0, [sp, #56]	@ 0x38
   223ec:	9857      	ldr	r0, [sp, #348]	@ 0x15c
   223ee:	900f      	str	r0, [sp, #60]	@ 0x3c
   223f0:	9858      	ldr	r0, [sp, #352]	@ 0x160
   223f2:	9010      	str	r0, [sp, #64]	@ 0x40
   223f4:	9859      	ldr	r0, [sp, #356]	@ 0x164
   223f6:	9011      	str	r0, [sp, #68]	@ 0x44
   223f8:	985b      	ldr	r0, [sp, #364]	@ 0x16c
   223fa:	9014      	str	r0, [sp, #80]	@ 0x50
   223fc:	985c      	ldr	r0, [sp, #368]	@ 0x170
   223fe:	901d      	str	r0, [sp, #116]	@ 0x74
   22400:	985a      	ldr	r0, [sp, #360]	@ 0x168
   22402:	901e      	str	r0, [sp, #120]	@ 0x78
   22404:	9852      	ldr	r0, [sp, #328]	@ 0x148
   22406:	901f      	str	r0, [sp, #124]	@ 0x7c
   22408:	2100      	movs	r1, #0
   2240a:	fb09 f00a 	mul.w	r0, r9, sl
   2240e:	9015      	str	r0, [sp, #84]	@ 0x54
   22410:	46a6      	mov	lr, r4
   22412:	4608      	mov	r0, r1
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   22414:	9105      	str	r1, [sp, #20]
   22416:	465d      	mov	r5, fp
   22418:	460c      	mov	r4, r1
   2241a:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
   2241c:	9f05      	ldr	r7, [sp, #20]
   2241e:	42be      	cmp	r6, r7
   22420:	f77f af52 	ble.w	222c8 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x20>
    TFLITE_DCHECK_LT(i, size_);
   22424:	9e07      	ldr	r6, [sp, #28]
   22426:	2e01      	cmp	r6, #1
   22428:	f000 814c 	beq.w	226c4 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   2242c:	f1be 0f00 	cmp.w	lr, #0
   22430:	f340 8090 	ble.w	22554 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x2ac>
   22434:	9e07      	ldr	r6, [sp, #28]
   22436:	2e02      	cmp	r6, #2
   22438:	f000 8144 	beq.w	226c4 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
   2243c:	9e1b      	ldr	r6, [sp, #108]	@ 0x6c
   2243e:	9301      	str	r3, [sp, #4]
   22440:	e9cd 4220 	strd	r4, r2, [sp, #128]	@ 0x80
   22444:	e9cd 0122 	strd	r0, r1, [sp, #136]	@ 0x88
   22448:	4673      	mov	r3, lr
   2244a:	f8dd e004 	ldr.w	lr, [sp, #4]
   2244e:	f1a6 0b04 	sub.w	fp, r6, #4
   22452:	4627      	mov	r7, r4
   22454:	468c      	mov	ip, r1
   22456:	f04f 0800 	mov.w	r8, #0
   2245a:	4606      	mov	r6, r0
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   2245c:	f1ba 0f00 	cmp.w	sl, #0
   22460:	dd68      	ble.n	22534 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x28c>
   22462:	9a07      	ldr	r2, [sp, #28]
   22464:	2a03      	cmp	r2, #3
   22466:	f000 812d 	beq.w	226c4 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
   2246a:	e9cd 3e17 	strd	r3, lr, [sp, #92]	@ 0x5c
   2246e:	e9cd 6c19 	strd	r6, ip, [sp, #100]	@ 0x64
   22472:	4639      	mov	r1, r7
   22474:	9716      	str	r7, [sp, #88]	@ 0x58
   22476:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
   22478:	f8cd 8010 	str.w	r8, [sp, #16]
   2247c:	4634      	mov	r4, r6
   2247e:	4660      	mov	r0, ip
   22480:	2200      	movs	r2, #0
   22482:	9b02      	ldr	r3, [sp, #8]
   22484:	9101      	str	r1, [sp, #4]
   22486:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   2248a:	eb0b 0881 	add.w	r8, fp, r1, lsl #2
   2248e:	eb05 0e84 	add.w	lr, r5, r4, lsl #2
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   22492:	2300      	movs	r3, #0
   22494:	e03d      	b.n	22512 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x26a>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
   22496:	990a      	ldr	r1, [sp, #40]	@ 0x28
   22498:	9e05      	ldr	r6, [sp, #20]
   2249a:	42b1      	cmp	r1, r6
   2249c:	f340 8112 	ble.w	226c4 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
   224a0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
   224a2:	9904      	ldr	r1, [sp, #16]
   224a4:	428e      	cmp	r6, r1
   224a6:	f340 810d 	ble.w	226c4 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
   224aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
   224ac:	42b2      	cmp	r2, r6
   224ae:	f280 8109 	bge.w	226c4 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
   224b2:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
   224b4:	429e      	cmp	r6, r3
   224b6:	f340 8105 	ble.w	226c4 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] +
   224ba:	f8dc 6000 	ldr.w	r6, [ip]
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
   224be:	9905      	ldr	r1, [sp, #20]
   224c0:	9606      	str	r6, [sp, #24]
   224c2:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
   224c4:	428e      	cmp	r6, r1
   224c6:	f340 80fd 	ble.w	226c4 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
   224ca:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
   224cc:	9904      	ldr	r1, [sp, #16]
   224ce:	428e      	cmp	r6, r1
   224d0:	f340 80f8 	ble.w	226c4 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
   224d4:	9910      	ldr	r1, [sp, #64]	@ 0x40
   224d6:	428a      	cmp	r2, r1
   224d8:	f280 80f4 	bge.w	226c4 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
   224dc:	9911      	ldr	r1, [sp, #68]	@ 0x44
   224de:	4299      	cmp	r1, r3
   224e0:	f340 80f0 	ble.w	226c4 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   224e4:	9913      	ldr	r1, [sp, #76]	@ 0x4c
              ActivationFunctionWithMinMax<T>(
   224e6:	9e06      	ldr	r6, [sp, #24]
   224e8:	448c      	add	ip, r1
   224ea:	f8de 1000 	ldr.w	r1, [lr]
   224ee:	440e      	add	r6, r1
      if (__a < __b)
   224f0:	9909      	ldr	r1, [sp, #36]	@ 0x24
   224f2:	428e      	cmp	r6, r1
   224f4:	bfb8      	it	lt
   224f6:	460e      	movlt	r6, r1
      if (__b < __a)
   224f8:	9908      	ldr	r1, [sp, #32]
   224fa:	428e      	cmp	r6, r1
   224fc:	bfa8      	it	ge
   224fe:	460e      	movge	r6, r1
   22500:	9912      	ldr	r1, [sp, #72]	@ 0x48
   22502:	448e      	add	lr, r1
   22504:	9907      	ldr	r1, [sp, #28]
   22506:	2904      	cmp	r1, #4
   22508:	f040 80dc 	bne.w	226c4 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   2250c:	f848 6f04 	str.w	r6, [r8, #4]!
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   22510:	3301      	adds	r3, #1
   22512:	4599      	cmp	r9, r3
   22514:	dcbf      	bgt.n	22496 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1ee>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   22516:	9901      	ldr	r1, [sp, #4]
   22518:	9b03      	ldr	r3, [sp, #12]
   2251a:	3201      	adds	r2, #1
   2251c:	4552      	cmp	r2, sl
   2251e:	4449      	add	r1, r9
   22520:	443c      	add	r4, r7
   22522:	4418      	add	r0, r3
   22524:	dbad      	blt.n	22482 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1da>
   22526:	e9dd 3e17 	ldrd	r3, lr, [sp, #92]	@ 0x5c
   2252a:	e9dd 6c19 	ldrd	r6, ip, [sp, #100]	@ 0x64
   2252e:	9f16      	ldr	r7, [sp, #88]	@ 0x58
   22530:	f8dd 8010 	ldr.w	r8, [sp, #16]
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   22534:	9a15      	ldr	r2, [sp, #84]	@ 0x54
   22536:	f108 0801 	add.w	r8, r8, #1
    TFLITE_DCHECK_LT(i, size_);
   2253a:	4417      	add	r7, r2
   2253c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
   2253e:	4598      	cmp	r8, r3
   22540:	4416      	add	r6, r2
   22542:	44f4      	add	ip, lr
   22544:	db8a      	blt.n	2245c <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1b4>
   22546:	e9dd 4220 	ldrd	r4, r2, [sp, #128]	@ 0x80
   2254a:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	@ 0x88
   2254e:	4676      	mov	r6, lr
   22550:	469e      	mov	lr, r3
   22552:	4633      	mov	r3, r6
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   22554:	9e05      	ldr	r6, [sp, #20]
   22556:	3601      	adds	r6, #1
   22558:	9605      	str	r6, [sp, #20]
   2255a:	9e1e      	ldr	r6, [sp, #120]	@ 0x78
   2255c:	4430      	add	r0, r6
   2255e:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
   22560:	4414      	add	r4, r2
   22562:	4431      	add	r1, r6
   22564:	e759      	b.n	2241a <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x172>
        reference_ops::Add(op_params, tflite::micro::GetTensorShape(input1),
   22566:	a830      	add	r0, sp, #192	@ 0xc0
   22568:	f001 f92c 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   2256c:	f1b9 0f00 	cmp.w	r9, #0
   22570:	f000 80a8 	beq.w	226c4 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
                           tflite::micro::GetTensorShape(input2),
   22574:	4629      	mov	r1, r5
   22576:	a82a      	add	r0, sp, #168	@ 0xa8
  return reinterpret_cast<const T*>(tensor->data.raw);
   22578:	f8d9 4000 	ldr.w	r4, [r9]
   2257c:	f001 f922 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   22580:	2d00      	cmp	r5, #0
   22582:	f000 809f 	beq.w	226c4 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
                           tflite::micro::GetTensorShape(output),
   22586:	a824      	add	r0, sp, #144	@ 0x90
   22588:	4639      	mov	r1, r7
  return reinterpret_cast<const T*>(tensor->data.raw);
   2258a:	682d      	ldr	r5, [r5, #0]
   2258c:	f001 f91a 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   22590:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   22594:	4293      	cmp	r3, r2
  return reinterpret_cast<T*>(tensor->data.raw);
   22596:	6838      	ldr	r0, [r7, #0]
   22598:	f300 8094 	bgt.w	226c4 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
    for (int i = 0; i < size_; i++) {
   2259c:	9930      	ldr	r1, [sp, #192]	@ 0xc0
   2259e:	2900      	cmp	r1, #0
   225a0:	f340 8092 	ble.w	226c8 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x420>
   225a4:	aa30      	add	r2, sp, #192	@ 0xc0
   225a6:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    int buffer_size = 1;
   225aa:	2301      	movs	r3, #1
      buffer_size *= dims_data[i];
   225ac:	f852 7f04 	ldr.w	r7, [r2, #4]!
    for (int i = 0; i < size_; i++) {
   225b0:	428a      	cmp	r2, r1
      buffer_size *= dims_data[i];
   225b2:	fb07 f303 	mul.w	r3, r7, r3
    for (int i = 0; i < size_; i++) {
   225b6:	d1f9      	bne.n	225ac <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x304>
   225b8:	992a      	ldr	r1, [sp, #168]	@ 0xa8
   225ba:	f8dd c090 	ldr.w	ip, [sp, #144]	@ 0x90
   225be:	2900      	cmp	r1, #0
   225c0:	f340 8093 	ble.w	226ea <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x442>
   225c4:	aa2a      	add	r2, sp, #168	@ 0xa8
   225c6:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    int buffer_size = 1;
   225ca:	2701      	movs	r7, #1
      buffer_size *= dims_data[i];
   225cc:	f852 ef04 	ldr.w	lr, [r2, #4]!
    for (int i = 0; i < size_; i++) {
   225d0:	428a      	cmp	r2, r1
      buffer_size *= dims_data[i];
   225d2:	fb0e f707 	mul.w	r7, lr, r7
    for (int i = 0; i < size_; i++) {
   225d6:	d1f9      	bne.n	225cc <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x324>
   225d8:	f1bc 0f00 	cmp.w	ip, #0
   225dc:	f340 8083 	ble.w	226e6 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x43e>
   225e0:	aa24      	add	r2, sp, #144	@ 0x90
    int buffer_size = 1;
   225e2:	2101      	movs	r1, #1
    for (int i = 0; i < size_; i++) {
   225e4:	f04f 0e00 	mov.w	lr, #0
      buffer_size *= dims_data[i];
   225e8:	f852 9f04 	ldr.w	r9, [r2, #4]!
    for (int i = 0; i < size_; i++) {
   225ec:	f10e 0e01 	add.w	lr, lr, #1
   225f0:	45e6      	cmp	lr, ip
      buffer_size *= dims_data[i];
   225f2:	fb09 f101 	mul.w	r1, r9, r1
    for (int i = 0; i < size_; i++) {
   225f6:	dbf7      	blt.n	225e8 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x340>
  TFLITE_CHECK_EQ(size_1, size_2);
   225f8:	429f      	cmp	r7, r3
   225fa:	d163      	bne.n	226c4 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
  TFLITE_CHECK_EQ(size_2, size_3);
   225fc:	4299      	cmp	r1, r3
   225fe:	d161      	bne.n	226c4 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
  TFLITE_DCHECK(input1_shift == 0 || params.input2_shift == 0);
   22600:	2e00      	cmp	r6, #0
   22602:	d059      	beq.n	226b8 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x410>
   22604:	f1b8 0f00 	cmp.w	r8, #0
   22608:	d15c      	bne.n	226c4 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
  TFLITE_DCHECK_LE(input1_shift, 0);
   2260a:	2e00      	cmp	r6, #0
   2260c:	dc5a      	bgt.n	226c4 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
      input1_shift == 0 ? -params.input2_shift : -input1_shift;
   2260e:	4622      	mov	r2, r4
   22610:	4276      	negs	r6, r6
      input1_shift == 0 ? input1_data : input2_data;
   22612:	462c      	mov	r4, r5
  const int32_t* shift_input = input1_shift == 0 ? input2_data : input1_data;
   22614:	4615      	mov	r5, r2
  for (int i = 0; i < flat_size; i++) {
   22616:	2b00      	cmp	r3, #0
   22618:	f77f ae56 	ble.w	222c8 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x20>
   2261c:	2e1f      	cmp	r6, #31
    F0 input_ready_scaled = F0::FromRaw(not_shift_input[i]);
   2261e:	f9b4 c000 	ldrsh.w	ip, [r4]
        gemmlowp::RoundingDivideByPOT(shift_input[i], input_right_shift));
   22622:	682a      	ldr	r2, [r5, #0]
   22624:	dc5d      	bgt.n	226e2 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x43a>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   22626:	2101      	movs	r1, #1
   22628:	40b1      	lsls	r1, r6
   2262a:	3901      	subs	r1, #1
  return a ? BitNot(zero) : zero;
   2262c:	0fd7      	lsrs	r7, r2, #31
  return a & b;
   2262e:	ea02 0e01 	and.w	lr, r2, r1
  return a + b;
   22632:	eb07 0761 	add.w	r7, r7, r1, asr #1
  return a >> offset;
   22636:	4132      	asrs	r2, r6
  return a + b;
   22638:	4577      	cmp	r7, lr
   2263a:	bfb8      	it	lt
   2263c:	3201      	addlt	r2, #1
  std::int32_t sum = a32 + b32;
   2263e:	fa0c fe82 	sxtah	lr, ip, r2
   22642:	4f2d      	ldr	r7, [pc, #180]	@ (226f8 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x450>)
   22644:	9a09      	ldr	r2, [sp, #36]	@ 0x24
   22646:	f647 7cff 	movw	ip, #32767	@ 0x7fff
   2264a:	42ba      	cmp	r2, r7
   2264c:	bfb8      	it	lt
   2264e:	463a      	movlt	r2, r7
   22650:	45e6      	cmp	lr, ip
   22652:	4690      	mov	r8, r2
   22654:	bfa8      	it	ge
   22656:	46e6      	movge	lr, ip
      if (__a < __b)
   22658:	45c6      	cmp	lr, r8
      if (__b < __a)
   2265a:	9f08      	ldr	r7, [sp, #32]
      if (__a < __b)
   2265c:	4672      	mov	r2, lr
   2265e:	bfb8      	it	lt
   22660:	4642      	movlt	r2, r8
      if (__b < __a)
   22662:	42ba      	cmp	r2, r7
   22664:	bfa8      	it	ge
   22666:	463a      	movge	r2, r7
  for (int i = 0; i < flat_size; i++) {
   22668:	2b01      	cmp	r3, #1
    output_data[i] = clamped_output;
   2266a:	6002      	str	r2, [r0, #0]
  return a >> offset;
   2266c:	ea4f 0e61 	mov.w	lr, r1, asr #1
  for (int i = 0; i < flat_size; i++) {
   22670:	f43f ae2a 	beq.w	222c8 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x20>
   22674:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   22678:	3b04      	subs	r3, #4
   2267a:	4647      	mov	r7, r8
   2267c:	469b      	mov	fp, r3
        gemmlowp::RoundingDivideByPOT(shift_input[i], input_right_shift));
   2267e:	f855 2f04 	ldr.w	r2, [r5, #4]!
  std::int32_t b32 = b;
   22682:	f934 8f04 	ldrsh.w	r8, [r4, #4]!
   22686:	9b08      	ldr	r3, [sp, #32]
  return a & b;
   22688:	ea02 0a01 	and.w	sl, r2, r1
  return a + b;
   2268c:	eb0e 79d2 	add.w	r9, lr, r2, lsr #31
  return a >> offset;
   22690:	4132      	asrs	r2, r6
  return a + b;
   22692:	45ca      	cmp	sl, r9
   22694:	bfc8      	it	gt
   22696:	3201      	addgt	r2, #1
  std::int32_t sum = a32 + b32;
   22698:	fa08 f282 	sxtah	r2, r8, r2
   2269c:	4562      	cmp	r2, ip
   2269e:	bfa8      	it	ge
   226a0:	4662      	movge	r2, ip
      if (__a < __b)
   226a2:	42ba      	cmp	r2, r7
   226a4:	bfb8      	it	lt
   226a6:	463a      	movlt	r2, r7
      if (__b < __a)
   226a8:	429a      	cmp	r2, r3
   226aa:	bfa8      	it	ge
   226ac:	461a      	movge	r2, r3
  for (int i = 0; i < flat_size; i++) {
   226ae:	455c      	cmp	r4, fp
    output_data[i] = clamped_output;
   226b0:	f840 2f04 	str.w	r2, [r0, #4]!
  for (int i = 0; i < flat_size; i++) {
   226b4:	d1e3      	bne.n	2267e <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x3d6>
   226b6:	e607      	b.n	222c8 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x20>
  TFLITE_DCHECK_LE(params.input2_shift, 0);
   226b8:	f1b8 0f00 	cmp.w	r8, #0
      input1_shift == 0 ? -params.input2_shift : -input1_shift;
   226bc:	bfd8      	it	le
   226be:	f1c8 0600 	rsble	r6, r8, #0
  TFLITE_DCHECK_LE(params.input2_shift, 0);
   226c2:	dda8      	ble.n	22616 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x36e>
  TFLITE_DCHECK(tensor != nullptr);
   226c4:	f002 fe5c 	bl	25380 <abort>
   226c8:	992a      	ldr	r1, [sp, #168]	@ 0xa8
   226ca:	f8dd c090 	ldr.w	ip, [sp, #144]	@ 0x90
   226ce:	2900      	cmp	r1, #0
    int buffer_size = 1;
   226d0:	f04f 0301 	mov.w	r3, #1
    for (int i = 0; i < size_; i++) {
   226d4:	f73f af76 	bgt.w	225c4 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x31c>
   226d8:	f1bc 0f00 	cmp.w	ip, #0
   226dc:	dd90      	ble.n	22600 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x358>
    int buffer_size = 1;
   226de:	2701      	movs	r7, #1
   226e0:	e77e      	b.n	225e0 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x338>
   226e2:	f7fe fcf5 	bl	210d0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i.part.0>
   226e6:	2101      	movs	r1, #1
   226e8:	e786      	b.n	225f8 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x350>
    for (int i = 0; i < size_; i++) {
   226ea:	f1bc 0f00 	cmp.w	ip, #0
   226ee:	dcf6      	bgt.n	226de <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x436>
  TFLITE_CHECK_EQ(size_1, size_2);
   226f0:	2b01      	cmp	r3, #1
   226f2:	d085      	beq.n	22600 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x358>
   226f4:	e7e6      	b.n	226c4 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
   226f6:	bf00      	nop
   226f8:	ffff8000 	.word	0xffff8000

000226fc <_ZN6tflite7EvalAddEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus EvalAdd(TfLiteContext* context, TfLiteNode* node) {
   226fc:	b570      	push	{r4, r5, r6, lr}
      tflite::micro::GetEvalInput(context, node, kInputTensor1);
   226fe:	2200      	movs	r2, #0
TfLiteStatus EvalAdd(TfLiteContext* context, TfLiteNode* node) {
   22700:	4605      	mov	r5, r0
   22702:	460c      	mov	r4, r1
      tflite::micro::GetEvalInput(context, node, kInputTensor1);
   22704:	f001 f838 	bl	23778 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
      tflite::micro::GetEvalInput(context, node, kInputTensor2);
   22708:	2201      	movs	r2, #1
   2270a:	4621      	mov	r1, r4
      tflite::micro::GetEvalInput(context, node, kInputTensor1);
   2270c:	4606      	mov	r6, r0
      tflite::micro::GetEvalInput(context, node, kInputTensor2);
   2270e:	4628      	mov	r0, r5
   22710:	f001 f832 	bl	23778 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
   22714:	2200      	movs	r2, #0
      tflite::micro::GetEvalInput(context, node, kInputTensor2);
   22716:	4603      	mov	r3, r0
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
   22718:	4621      	mov	r1, r4
   2271a:	4628      	mov	r0, r5
      tflite::micro::GetEvalInput(context, node, kInputTensor2);
   2271c:	461d      	mov	r5, r3
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
   2271e:	f001 f845 	bl	237ac <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
   22722:	4603      	mov	r3, r0
  TFLITE_DCHECK(node->user_data != nullptr);
   22724:	68e0      	ldr	r0, [r4, #12]
   22726:	b1c0      	cbz	r0, 2275a <_ZN6tflite7EvalAddEP13TfLiteContextP10TfLiteNode+0x5e>
  if (output->type == kTfLiteFloat32) {
   22728:	7a1c      	ldrb	r4, [r3, #8]
   2272a:	3c01      	subs	r4, #1
   2272c:	2c08      	cmp	r4, #8
   2272e:	d80c      	bhi.n	2274a <_ZN6tflite7EvalAddEP13TfLiteContextP10TfLiteNode+0x4e>
   22730:	e8df f004 	tbb	[pc, r4]
   22734:	0b0b050d 	.word	0x0b0b050d
   22738:	0b050b0b 	.word	0x0b050b0b
   2273c:	05          	.byte	0x05
   2273d:	00          	.byte	0x00
    TF_LITE_ENSURE_OK(context, EvalAddQuantized(context, node, params, data,
   2273e:	462a      	mov	r2, r5
   22740:	4631      	mov	r1, r6
}
   22742:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    TF_LITE_ENSURE_OK(context, EvalAddQuantized(context, node, params, data,
   22746:	f7ff bdaf 	b.w	222a8 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0>
  if (output->type == kTfLiteFloat32) {
   2274a:	2001      	movs	r0, #1
}
   2274c:	bd70      	pop	{r4, r5, r6, pc}
    EvalAddFloat(context, node, params, data, input1, input2, output);
   2274e:	462a      	mov	r2, r5
   22750:	4631      	mov	r1, r6
   22752:	f7fe ff7b 	bl	2164c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0>
  return kTfLiteOk;
   22756:	2000      	movs	r0, #0
}
   22758:	bd70      	pop	{r4, r5, r6, pc}
  TFLITE_DCHECK(node->user_data != nullptr);
   2275a:	f002 fe11 	bl	25380 <abort>
   2275e:	bf00      	nop

00022760 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  // Index to buffer for optimizations if applicable.
  int buffer_idx;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   22760:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   22762:	b10b      	cbz	r3, 22768 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x8>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
   22764:	213c      	movs	r1, #60	@ 0x3c
   22766:	4718      	bx	r3
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   22768:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   2276a:	f002 fe09 	bl	25380 <abort>
   2276e:	bf00      	nop

00022770 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   22770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
   22774:	f8d1 800c 	ldr.w	r8, [r1, #12]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   22778:	b0af      	sub	sp, #188	@ 0xbc
  TFLITE_DCHECK(node->user_data != nullptr);
   2277a:	f1b8 0f00 	cmp.w	r8, #0
   2277e:	f000 811b 	beq.w	229b8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x248>
  TFLITE_DCHECK(node->builtin_data != nullptr);
   22782:	f8d1 9010 	ldr.w	r9, [r1, #16]
   22786:	460d      	mov	r5, r1
   22788:	f1b9 0f00 	cmp.w	r9, #0
   2278c:	f000 8114 	beq.w	229b8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x248>
   22790:	6884      	ldr	r4, [r0, #8]
  OpData* data = static_cast<OpData*>(node->user_data);

  MicroContext* micro_context = GetMicroContext(context);

  TfLiteTensor* input =
      micro_context->AllocateTempInputTensor(node, kConvInputTensor);
   22792:	4b8a      	ldr	r3, [pc, #552]	@ (229bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
   22794:	681a      	ldr	r2, [r3, #0]
   22796:	6823      	ldr	r3, [r4, #0]
   22798:	4607      	mov	r7, r0
   2279a:	699b      	ldr	r3, [r3, #24]
   2279c:	4620      	mov	r0, r4
   2279e:	4798      	blx	r3
  TF_LITE_ENSURE(context, input != nullptr);
   227a0:	4606      	mov	r6, r0
   227a2:	2800      	cmp	r0, #0
   227a4:	f000 80b0 	beq.w	22908 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x198>
  TfLiteTensor* filter =
      micro_context->AllocateTempInputTensor(node, kConvWeightsTensor);
   227a8:	4b85      	ldr	r3, [pc, #532]	@ (229c0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x250>)
   227aa:	681a      	ldr	r2, [r3, #0]
   227ac:	6823      	ldr	r3, [r4, #0]
   227ae:	4629      	mov	r1, r5
   227b0:	699b      	ldr	r3, [r3, #24]
   227b2:	4620      	mov	r0, r4
   227b4:	4798      	blx	r3
  TF_LITE_ENSURE(context, filter != nullptr);
   227b6:	4682      	mov	sl, r0
   227b8:	2800      	cmp	r0, #0
   227ba:	f000 80a5 	beq.w	22908 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x198>
  TfLiteTensor* output =
      micro_context->AllocateTempOutputTensor(node, kConvOutputTensor);
   227be:	4b81      	ldr	r3, [pc, #516]	@ (229c4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x254>)
   227c0:	681a      	ldr	r2, [r3, #0]
   227c2:	6823      	ldr	r3, [r4, #0]
   227c4:	4629      	mov	r1, r5
   227c6:	69db      	ldr	r3, [r3, #28]
   227c8:	4620      	mov	r0, r4
   227ca:	4798      	blx	r3
  TF_LITE_ENSURE(context, output != nullptr);
   227cc:	9008      	str	r0, [sp, #32]
   227ce:	2800      	cmp	r0, #0
   227d0:	f000 809a 	beq.w	22908 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x198>
inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
  if (tensor == nullptr) {
    return RuntimeShape();
  }

  TfLiteIntArray* dims = tensor->dims;
   227d4:	6973      	ldr	r3, [r6, #20]
  const int dims_size = dims->size;
   227d6:	930b      	str	r3, [sp, #44]	@ 0x2c
   227d8:	4619      	mov	r1, r3
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   227da:	a819      	add	r0, sp, #100	@ 0x64
   227dc:	f851 3b04 	ldr.w	r3, [r1], #4
      : size_(dimensions_count) {
   227e0:	9318      	str	r3, [sp, #96]	@ 0x60
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   227e2:	009a      	lsls	r2, r3, #2
   227e4:	930a      	str	r3, [sp, #40]	@ 0x28
   227e6:	f7f5 fecb 	bl	18580 <memcpy>
  TfLiteIntArray* dims = tensor->dims;
   227ea:	9a08      	ldr	r2, [sp, #32]
   227ec:	f8d2 b014 	ldr.w	fp, [r2, #20]
  const int dims_size = dims->size;
   227f0:	4659      	mov	r1, fp
   227f2:	a81f      	add	r0, sp, #124	@ 0x7c
   227f4:	f851 2b04 	ldr.w	r2, [r1], #4
      : size_(dimensions_count) {
   227f8:	921e      	str	r2, [sp, #120]	@ 0x78
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   227fa:	9209      	str	r2, [sp, #36]	@ 0x24
   227fc:	0092      	lsls	r2, r2, #2
   227fe:	f7f5 febf 	bl	18580 <memcpy>
    TFLITE_DCHECK_LT(i, size_);
   22802:	980a      	ldr	r0, [sp, #40]	@ 0x28
   22804:	2800      	cmp	r0, #0
   22806:	f340 80d7 	ble.w	229b8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x248>
   2280a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    return dims_[i];
   2280c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
    TFLITE_DCHECK_LT(i, size_);
   2280e:	2b00      	cmp	r3, #0
   22810:	f340 80d2 	ble.w	229b8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x248>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   22814:	991f      	ldr	r1, [sp, #124]	@ 0x7c
   22816:	4291      	cmp	r1, r2
   22818:	f040 80ce 	bne.w	229b8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x248>
  RuntimeShape output_shape = GetTensorShape(output);

  // Initialize cmsis_nn input dimensions
  cmsis_nn_dims input_dims;
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
  input_dims.h = input->dims->data[1];
   2281c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
   2281e:	920c      	str	r2, [sp, #48]	@ 0x30
  input_dims.h = input->dims->data[1];
   22820:	6899      	ldr	r1, [r3, #8]
  input_dims.w = input->dims->data[2];
   22822:	68db      	ldr	r3, [r3, #12]
  input_dims.h = input->dims->data[1];
   22824:	910d      	str	r1, [sp, #52]	@ 0x34
   22826:	2803      	cmp	r0, #3
  input_dims.w = input->dims->data[2];
   22828:	930e      	str	r3, [sp, #56]	@ 0x38
   2282a:	f340 80c5 	ble.w	229b8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x248>
   2282e:	9909      	ldr	r1, [sp, #36]	@ 0x24
    return dims_[i];
   22830:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
  input_dims.c = input_shape.Dims(3);
   22832:	930f      	str	r3, [sp, #60]	@ 0x3c
    TFLITE_DCHECK_LT(i, size_);
   22834:	2903      	cmp	r1, #3
   22836:	f340 80bf 	ble.w	229b8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x248>

  // Initialize cmsis_nn filter dimensions
  cmsis_nn_dims filter_dims;
  filter_dims.n = output_shape.Dims(3);
  filter_dims.h = filter->dims->data[1];
   2283a:	f8da 1014 	ldr.w	r1, [sl, #20]
  filter_dims.w = filter->dims->data[2];
  filter_dims.c = input_dims.c;

  // Initialize cmsis_nn output dimensions
  cmsis_nn_dims output_dims;
  output_dims.n = input_dims.n;
   2283e:	9214      	str	r2, [sp, #80]	@ 0x50
  filter_dims.h = filter->dims->data[1];
   22840:	688a      	ldr	r2, [r1, #8]
   22842:	9211      	str	r2, [sp, #68]	@ 0x44
  filter_dims.w = filter->dims->data[2];
   22844:	68ca      	ldr	r2, [r1, #12]
  output_dims.h = output->dims->data[1];
  output_dims.w = output->dims->data[2];
  output_dims.c = output_shape.Dims(3);

  if (filter->type == kTfLiteInt4) {
   22846:	f89a 001c 	ldrb.w	r0, [sl, #28]
  filter_dims.c = input_dims.c;
   2284a:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
  output_dims.h = output->dims->data[1];
   2284e:	f8db 3008 	ldr.w	r3, [fp, #8]
   22852:	9315      	str	r3, [sp, #84]	@ 0x54
  output_dims.w = output->dims->data[2];
   22854:	f8db 300c 	ldr.w	r3, [fp, #12]
   22858:	9316      	str	r3, [sp, #88]	@ 0x58
  if (filter->type == kTfLiteInt4) {
   2285a:	2812      	cmp	r0, #18
    return dims_[i];
   2285c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
  filter_dims.n = output_shape.Dims(3);
   2285e:	9310      	str	r3, [sp, #64]	@ 0x40
  output_dims.c = output_shape.Dims(3);
   22860:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (filter->type == kTfLiteInt4) {
   22862:	d06d      	beq.n	22940 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1d0>
            .FlatSize();
    context->RequestScratchBufferInArena(
        context, filter_size, &data->reference_op_data.filter_buffer_index);
  }

  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
   22864:	7f33      	ldrb	r3, [r6, #28]
   22866:	2b09      	cmp	r3, #9
   22868:	d053      	beq.n	22912 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a2>
   2286a:	2b07      	cmp	r3, #7
   2286c:	d051      	beq.n	22912 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a2>
    data->reference_op_data.per_channel_output_shift =
        static_cast<int32_t*>(context->AllocatePersistentBuffer(
            context, num_channels * sizeof(int32_t)));
  }

  TF_LITE_ENSURE_STATUS(CalculateOpDataConv(
   2286e:	e9cd 3805 	strd	r3, r8, [sp, #20]
   22872:	9b15      	ldr	r3, [sp, #84]	@ 0x54
   22874:	9304      	str	r3, [sp, #16]
   22876:	9b16      	ldr	r3, [sp, #88]	@ 0x58
   22878:	9303      	str	r3, [sp, #12]
   2287a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
   2287c:	9302      	str	r3, [sp, #8]
   2287e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
   22880:	9301      	str	r3, [sp, #4]
   22882:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   22884:	9300      	str	r3, [sp, #0]
   22886:	4629      	mov	r1, r5
   22888:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   2288a:	464a      	mov	r2, r9
   2288c:	4638      	mov	r0, r7
   2288e:	f000 fa77 	bl	22d80 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
   22892:	4605      	mov	r5, r0
   22894:	2800      	cmp	r0, #0
   22896:	d138      	bne.n	2290a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x19a>
      context, node, params, input_dims.w, input_dims.h, filter_dims.w,
      filter_dims.h, output_dims.w, output_dims.h, input->type,
      &data->reference_op_data));

  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
   22898:	7f33      	ldrb	r3, [r6, #28]
   2289a:	2b09      	cmp	r3, #9
   2289c:	d014      	beq.n	228c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x158>
   2289e:	2b07      	cmp	r3, #7
   228a0:	d012      	beq.n	228c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x158>
    } else {
      data->buffer_idx = -1;
    }
  }

  micro_context->DeallocateTempTfLiteTensor(output);
   228a2:	6823      	ldr	r3, [r4, #0]
   228a4:	9908      	ldr	r1, [sp, #32]
   228a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   228a8:	4620      	mov	r0, r4
   228aa:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(input);
   228ac:	6823      	ldr	r3, [r4, #0]
   228ae:	4631      	mov	r1, r6
   228b0:	4620      	mov	r0, r4
   228b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   228b4:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(filter);
   228b6:	6823      	ldr	r3, [r4, #0]
   228b8:	4620      	mov	r0, r4
   228ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   228bc:	4651      	mov	r1, sl
   228be:	4798      	blx	r3

  return kTfLiteOk;
}
   228c0:	4628      	mov	r0, r5
   228c2:	b02f      	add	sp, #188	@ 0xbc
   228c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    conv_params.output_offset = output->params.zero_point;
   228c8:	9a08      	ldr	r2, [sp, #32]
    conv_params.stride.h = params.stride_height;
   228ca:	f8d9 0008 	ldr.w	r0, [r9, #8]
    conv_params.input_offset = -input->params.zero_point;
   228ce:	68f1      	ldr	r1, [r6, #12]
    conv_params.output_offset = output->params.zero_point;
   228d0:	68d2      	ldr	r2, [r2, #12]
    conv_params.stride.h = params.stride_height;
   228d2:	9027      	str	r0, [sp, #156]	@ 0x9c
    conv_params.stride.w = params.stride_width;
   228d4:	f8d9 0004 	ldr.w	r0, [r9, #4]
   228d8:	9026      	str	r0, [sp, #152]	@ 0x98
    conv_params.dilation.h = params.dilation_height_factor;
   228da:	f8d9 0014 	ldr.w	r0, [r9, #20]
   228de:	902b      	str	r0, [sp, #172]	@ 0xac
    conv_params.dilation.w = params.dilation_width_factor;
   228e0:	f8d9 0010 	ldr.w	r0, [r9, #16]
   228e4:	902a      	str	r0, [sp, #168]	@ 0xa8
    conv_params.padding.h = data->reference_op_data.padding.height;
   228e6:	f8d8 0004 	ldr.w	r0, [r8, #4]
   228ea:	9029      	str	r0, [sp, #164]	@ 0xa4
    conv_params.padding.w = data->reference_op_data.padding.width;
   228ec:	f8d8 0000 	ldr.w	r0, [r8]
   228f0:	9028      	str	r0, [sp, #160]	@ 0xa0
    conv_params.input_offset = -input->params.zero_point;
   228f2:	4248      	negs	r0, r1
    conv_params.output_offset = output->params.zero_point;
   228f4:	9225      	str	r2, [sp, #148]	@ 0x94
    conv_params.input_offset = -input->params.zero_point;
   228f6:	9024      	str	r0, [sp, #144]	@ 0x90
    conv_params.activation.min = data->reference_op_data.output_activation_min;
   228f8:	e9d8 c00b 	ldrd	ip, r0, [r8, #44]	@ 0x2c
    if (input->type == kTfLiteInt8) {
   228fc:	2b09      	cmp	r3, #9
    conv_params.activation.min = data->reference_op_data.output_activation_min;
   228fe:	e9cd c02c 	strd	ip, r0, [sp, #176]	@ 0xb0
    if (input->type == kTfLiteInt8) {
   22902:	d04a      	beq.n	2299a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22a>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
   22904:	430a      	orrs	r2, r1
   22906:	d036      	beq.n	22976 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x206>
      TF_LITE_ENSURE_EQ(context, input->params.zero_point, 0);
   22908:	2501      	movs	r5, #1
}
   2290a:	4628      	mov	r0, r5
   2290c:	b02f      	add	sp, #188	@ 0xbc
   2290e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const int num_channels = filter->dims->data[kConvQuantizedDimension];
   22912:	4b2d      	ldr	r3, [pc, #180]	@ (229c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>)
   22914:	681a      	ldr	r2, [r3, #0]
   22916:	f8da 3014 	ldr.w	r3, [sl, #20]
   2291a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
        static_cast<int32_t*>(context->AllocatePersistentBuffer(
   2291e:	4638      	mov	r0, r7
   22920:	6859      	ldr	r1, [r3, #4]
   22922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
   22924:	ea4f 0b81 	mov.w	fp, r1, lsl #2
   22928:	4659      	mov	r1, fp
   2292a:	4798      	blx	r3
        static_cast<int32_t*>(context->AllocatePersistentBuffer(
   2292c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    data->reference_op_data.per_channel_output_multiplier =
   2292e:	f8c8 0024 	str.w	r0, [r8, #36]	@ 0x24
        static_cast<int32_t*>(context->AllocatePersistentBuffer(
   22932:	4659      	mov	r1, fp
   22934:	4638      	mov	r0, r7
   22936:	4798      	blx	r3
  TF_LITE_ENSURE_STATUS(CalculateOpDataConv(
   22938:	7f33      	ldrb	r3, [r6, #28]
    data->reference_op_data.per_channel_output_shift =
   2293a:	f8c8 0028 	str.w	r0, [r8, #40]	@ 0x28
   2293e:	e796      	b.n	2286e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xfe>
        RuntimeShape(filter->dims->size,
   22940:	f851 3b04 	ldr.w	r3, [r1], #4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   22944:	9309      	str	r3, [sp, #36]	@ 0x24
   22946:	ea4f 0b83 	mov.w	fp, r3, lsl #2
   2294a:	a825      	add	r0, sp, #148	@ 0x94
   2294c:	465a      	mov	r2, fp
   2294e:	f7f5 fe17 	bl	18580 <memcpy>
    for (int i = 0; i < size_; i++) {
   22952:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   22954:	2b00      	cmp	r3, #0
   22956:	dd2d      	ble.n	229b4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>
   22958:	ab24      	add	r3, sp, #144	@ 0x90
   2295a:	449b      	add	fp, r3
    int buffer_size = 1;
   2295c:	2101      	movs	r1, #1
      buffer_size *= dims_data[i];
   2295e:	f853 2f04 	ldr.w	r2, [r3, #4]!
    for (int i = 0; i < size_; i++) {
   22962:	459b      	cmp	fp, r3
      buffer_size *= dims_data[i];
   22964:	fb02 f101 	mul.w	r1, r2, r1
    for (int i = 0; i < size_; i++) {
   22968:	d1f9      	bne.n	2295e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1ee>
    context->RequestScratchBufferInArena(
   2296a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
   2296c:	f108 0234 	add.w	r2, r8, #52	@ 0x34
   22970:	4638      	mov	r0, r7
   22972:	4798      	blx	r3
   22974:	e776      	b.n	22864 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xf4>
      buf_size = arm_convolve_wrapper_s16_get_buffer_size(
   22976:	a90c      	add	r1, sp, #48	@ 0x30
   22978:	ab14      	add	r3, sp, #80	@ 0x50
   2297a:	aa10      	add	r2, sp, #64	@ 0x40
   2297c:	a824      	add	r0, sp, #144	@ 0x90
   2297e:	f7f8 f9b3 	bl	1ace8 <arm_convolve_wrapper_s16_get_buffer_size>
   22982:	4601      	mov	r1, r0
    if (buf_size > 0) {
   22984:	2900      	cmp	r1, #0
   22986:	dd10      	ble.n	229aa <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x23a>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
   22988:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
   2298a:	f108 0238 	add.w	r2, r8, #56	@ 0x38
   2298e:	4638      	mov	r0, r7
   22990:	4798      	blx	r3
   22992:	2800      	cmp	r0, #0
   22994:	d085      	beq.n	228a2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x132>
   22996:	4605      	mov	r5, r0
   22998:	e7b7      	b.n	2290a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x19a>
      buf_size = arm_convolve_wrapper_s8_get_buffer_size(
   2299a:	a90c      	add	r1, sp, #48	@ 0x30
   2299c:	ab14      	add	r3, sp, #80	@ 0x50
   2299e:	aa10      	add	r2, sp, #64	@ 0x40
   229a0:	a824      	add	r0, sp, #144	@ 0x90
   229a2:	f7f8 fa1b 	bl	1addc <arm_convolve_wrapper_s8_get_buffer_size>
   229a6:	4601      	mov	r1, r0
   229a8:	e7ec      	b.n	22984 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x214>
      data->buffer_idx = -1;
   229aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
   229ae:	f8c8 3038 	str.w	r3, [r8, #56]	@ 0x38
   229b2:	e776      	b.n	228a2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x132>
   229b4:	2101      	movs	r1, #1
   229b6:	e7d8      	b.n	2296a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1fa>
  TFLITE_DCHECK(node->user_data != nullptr);
   229b8:	f002 fce2 	bl	25380 <abort>
   229bc:	00044c54 	.word	0x00044c54
   229c0:	00044c50 	.word	0x00044c50
   229c4:	00044c48 	.word	0x00044c48
   229c8:	00044c44 	.word	0x00044c44

000229cc <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0>:
      ARM_CMSIS_NN_SUCCESS);

  return kTfLiteOk;
}

TfLiteStatus EvalQuantizedPerChannel16x8(
   229cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   229d0:	461e      	mov	r6, r3
  cmsis_nn_conv_params conv_params;
  conv_params.dilation.h = params.dilation_height_factor;
  conv_params.dilation.w = params.dilation_width_factor;

  // Initialize cmsis_nn convolution parameters
  conv_params.input_offset = -data.reference_op_data.input_zero_point;
   229d2:	6913      	ldr	r3, [r2, #16]
TfLiteStatus EvalQuantizedPerChannel16x8(
   229d4:	b0be      	sub	sp, #248	@ 0xf8
  conv_params.input_offset = -data.reference_op_data.input_zero_point;
   229d6:	425b      	negs	r3, r3
   229d8:	9334      	str	r3, [sp, #208]	@ 0xd0
  conv_params.dilation.h = params.dilation_height_factor;
   229da:	694b      	ldr	r3, [r1, #20]
   229dc:	933b      	str	r3, [sp, #236]	@ 0xec
  conv_params.dilation.w = params.dilation_width_factor;
   229de:	690b      	ldr	r3, [r1, #16]
   229e0:	933a      	str	r3, [sp, #232]	@ 0xe8
  conv_params.output_offset = data.reference_op_data.output_zero_point;
   229e2:	6993      	ldr	r3, [r2, #24]
   229e4:	9335      	str	r3, [sp, #212]	@ 0xd4
  conv_params.stride.h = params.stride_height;
   229e6:	688b      	ldr	r3, [r1, #8]
   229e8:	9337      	str	r3, [sp, #220]	@ 0xdc
  conv_params.stride.w = params.stride_width;
   229ea:	684b      	ldr	r3, [r1, #4]
   229ec:	9336      	str	r3, [sp, #216]	@ 0xd8
  conv_params.padding.h = data.reference_op_data.padding.height;
   229ee:	6853      	ldr	r3, [r2, #4]
   229f0:	9339      	str	r3, [sp, #228]	@ 0xe4
  conv_params.padding.w = data.reference_op_data.padding.width;
   229f2:	6813      	ldr	r3, [r2, #0]
   229f4:	9338      	str	r3, [sp, #224]	@ 0xe0
  conv_params.activation.min = data.reference_op_data.output_activation_min;
   229f6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
TfLiteStatus EvalQuantizedPerChannel16x8(
   229f8:	f8dd 8118 	ldr.w	r8, [sp, #280]	@ 0x118
  conv_params.activation.min = data.reference_op_data.output_activation_min;
   229fc:	933c      	str	r3, [sp, #240]	@ 0xf0
  conv_params.activation.max = data.reference_op_data.output_activation_max;
   229fe:	6b13      	ldr	r3, [r2, #48]	@ 0x30
   22a00:	933d      	str	r3, [sp, #244]	@ 0xf4
TfLiteStatus EvalQuantizedPerChannel16x8(
   22a02:	e9dd 5747 	ldrd	r5, r7, [sp, #284]	@ 0x11c

  // Initialize cmsis_nn per channel quantization parameters
  cmsis_nn_per_channel_quant_params quant_params;
  quant_params.multiplier = const_cast<int32_t*>(
      data.reference_op_data.per_channel_output_multiplier);
   22a06:	6a93      	ldr	r3, [r2, #40]	@ 0x28
  quant_params.multiplier = const_cast<int32_t*>(
   22a08:	9309      	str	r3, [sp, #36]	@ 0x24
  quant_params.shift =
      const_cast<int32_t*>(data.reference_op_data.per_channel_output_shift);

  RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
   22a0a:	4641      	mov	r1, r8
  quant_params.multiplier = const_cast<int32_t*>(
   22a0c:	6a53      	ldr	r3, [r2, #36]	@ 0x24
   22a0e:	9308      	str	r3, [sp, #32]
TfLiteStatus EvalQuantizedPerChannel16x8(
   22a10:	4681      	mov	r9, r0
  RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
   22a12:	a81c      	add	r0, sp, #112	@ 0x70
TfLiteStatus EvalQuantizedPerChannel16x8(
   22a14:	4614      	mov	r4, r2
  RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
   22a16:	f000 fed5 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
   22a1a:	4631      	mov	r1, r6
   22a1c:	a822      	add	r0, sp, #136	@ 0x88
   22a1e:	f000 fed1 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
   22a22:	4639      	mov	r1, r7
   22a24:	a828      	add	r0, sp, #160	@ 0xa0
   22a26:	f000 fecd 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
   22a2a:	4629      	mov	r1, r5
   22a2c:	a82e      	add	r0, sp, #184	@ 0xb8
   22a2e:	f000 fec9 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

  // Consistency check.
  TFLITE_DCHECK_LE(conv_params.activation.min, conv_params.activation.max);
   22a32:	e9dd 233c 	ldrd	r2, r3, [sp, #240]	@ 0xf0
   22a36:	429a      	cmp	r2, r3
   22a38:	dc6e      	bgt.n	22b18 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x14c>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   22a3a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
   22a3c:	2b04      	cmp	r3, #4
   22a3e:	d16b      	bne.n	22b18 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x14c>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   22a40:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
   22a42:	2b04      	cmp	r3, #4
   22a44:	d168      	bne.n	22b18 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x14c>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   22a46:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
   22a48:	2b04      	cmp	r3, #4
   22a4a:	d165      	bne.n	22b18 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x14c>
    return dims_[i];
   22a4c:	9823      	ldr	r0, [sp, #140]	@ 0x8c
   22a4e:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
   22a50:	4283      	cmp	r3, r0
   22a52:	d161      	bne.n	22b18 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x14c>
   22a54:	9b26      	ldr	r3, [sp, #152]	@ 0x98
   22a56:	9a20      	ldr	r2, [sp, #128]	@ 0x80
   22a58:	429a      	cmp	r2, r3
   22a5a:	d15d      	bne.n	22b18 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x14c>
   22a5c:	f8dd e074 	ldr.w	lr, [sp, #116]	@ 0x74
   22a60:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
   22a62:	4596      	cmp	lr, r2
   22a64:	d158      	bne.n	22b18 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x14c>
}

// Returns const data for a TfLiteEvalTensor struct that could be null.
template <typename T>
const T* GetOptionalTensorData(const TfLiteEvalTensor* tensor) {
  return tensor == nullptr ? nullptr
   22a66:	b18d      	cbz	r5, 22a8c <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0xc0>
  const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
  if (tflite::micro::GetOptionalTensorData<int8_t>(bias)) {
   22a68:	682a      	ldr	r2, [r5, #0]
   22a6a:	b17a      	cbz	r2, 22a8c <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0xc0>
    for (int i = 0; i < size_; i++) {
   22a6c:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
   22a6e:	2a00      	cmp	r2, #0
   22a70:	dd50      	ble.n	22b14 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x148>
   22a72:	f10d 0cb8 	add.w	ip, sp, #184	@ 0xb8
   22a76:	eb0c 0a82 	add.w	sl, ip, r2, lsl #2
    int buffer_size = 1;
   22a7a:	2201      	movs	r2, #1
      buffer_size *= dims_data[i];
   22a7c:	f85c 1f04 	ldr.w	r1, [ip, #4]!
    for (int i = 0; i < size_; i++) {
   22a80:	45d4      	cmp	ip, sl
      buffer_size *= dims_data[i];
   22a82:	fb01 f202 	mul.w	r2, r1, r2
    for (int i = 0; i < size_; i++) {
   22a86:	d1f9      	bne.n	22a7c <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0xb0>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   22a88:	4596      	cmp	lr, r2
   22a8a:	d145      	bne.n	22b18 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x14c>
  // Input
  cmsis_nn_dims input_dims;
  input_dims.n = batch_size;
  input_dims.h = input_shape.Dims(1);
  input_dims.w = input_shape.Dims(2);
  input_dims.c = input_depth;
   22a8c:	930f      	str	r3, [sp, #60]	@ 0x3c
  // Filter
  cmsis_nn_dims filter_dims;
  filter_dims.n = output_depth;
  filter_dims.h = filter_shape.Dims(1);
  filter_dims.w = filter_shape.Dims(2);
  filter_dims.c = input_depth;
   22a8e:	9313      	str	r3, [sp, #76]	@ 0x4c

  // Bias
  cmsis_nn_dims bias_dims;
  bias_dims.n = 1;
   22a90:	2301      	movs	r3, #1
  bias_dims.h = 1;
   22a92:	e9cd 3314 	strd	r3, r3, [sp, #80]	@ 0x50
  bias_dims.w = 1;
   22a96:	9316      	str	r3, [sp, #88]	@ 0x58
  output_dims.w = output_shape.Dims(2);
  output_dims.c = output_depth;

  // Initialize cmsis_nn context
  cmsis_nn_context ctx;
  ctx.buf = nullptr;
   22a98:	2300      	movs	r3, #0
  ctx.size = 0;
   22a9a:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
  input_dims.h = input_shape.Dims(1);
   22a9e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
   22aa0:	930d      	str	r3, [sp, #52]	@ 0x34
  input_dims.w = input_shape.Dims(2);
   22aa2:	9b25      	ldr	r3, [sp, #148]	@ 0x94
   22aa4:	930e      	str	r3, [sp, #56]	@ 0x38
  filter_dims.h = filter_shape.Dims(1);
   22aa6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78

  if (data.buffer_idx > -1) {
   22aa8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
  filter_dims.h = filter_shape.Dims(1);
   22aaa:	9311      	str	r3, [sp, #68]	@ 0x44
  filter_dims.w = filter_shape.Dims(2);
   22aac:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
   22aae:	9312      	str	r3, [sp, #72]	@ 0x48
  output_dims.h = output_shape.Dims(1);
   22ab0:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
   22ab2:	9319      	str	r3, [sp, #100]	@ 0x64
  if (data.buffer_idx > -1) {
   22ab4:	2900      	cmp	r1, #0
  output_dims.w = output_shape.Dims(2);
   22ab6:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
  input_dims.n = batch_size;
   22ab8:	900c      	str	r0, [sp, #48]	@ 0x30
  output_dims.n = batch_size;
   22aba:	9018      	str	r0, [sp, #96]	@ 0x60
  filter_dims.n = output_depth;
   22abc:	f8cd e040 	str.w	lr, [sp, #64]	@ 0x40
  bias_dims.c = output_depth;
   22ac0:	f8cd e05c 	str.w	lr, [sp, #92]	@ 0x5c
  output_dims.c = output_depth;
   22ac4:	f8cd e06c 	str.w	lr, [sp, #108]	@ 0x6c
  output_dims.w = output_shape.Dims(2);
   22ac8:	931a      	str	r3, [sp, #104]	@ 0x68
  if (data.buffer_idx > -1) {
   22aca:	db04      	blt.n	22ad6 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x10a>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
   22acc:	f8d9 3040 	ldr.w	r3, [r9, #64]	@ 0x40
   22ad0:	4648      	mov	r0, r9
   22ad2:	4798      	blx	r3
   22ad4:	900a      	str	r0, [sp, #40]	@ 0x28
  TFLITE_DCHECK(tensor != nullptr);
   22ad6:	b1fe      	cbz	r6, 22b18 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x14c>
  return reinterpret_cast<const T*>(tensor->data.raw);
   22ad8:	6833      	ldr	r3, [r6, #0]
  TFLITE_DCHECK(tensor != nullptr);
   22ada:	f1b8 0f00 	cmp.w	r8, #0
   22ade:	d01b      	beq.n	22b18 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x14c>
  return reinterpret_cast<const T*>(tensor->data.raw);
   22ae0:	f8d8 1000 	ldr.w	r1, [r8]
  return tensor == nullptr ? nullptr
   22ae4:	b105      	cbz	r5, 22ae8 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x11c>
   22ae6:	682d      	ldr	r5, [r5, #0]
  TFLITE_DCHECK(tensor != nullptr);
   22ae8:	b1b7      	cbz	r7, 22b18 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x14c>
    // Note: ctx.size is currently not used in cmsis_nn.
    // The buffer should be allocated in the Prepare function through
    // arm_convolve_wrapper_s8_get_buffer_size
  }

  TFLITE_DCHECK_EQ(
   22aea:	6838      	ldr	r0, [r7, #0]
   22aec:	9300      	str	r3, [sp, #0]
   22aee:	aa18      	add	r2, sp, #96	@ 0x60
   22af0:	e9cd 2005 	strd	r2, r0, [sp, #20]
   22af4:	a814      	add	r0, sp, #80	@ 0x50
   22af6:	aa10      	add	r2, sp, #64	@ 0x40
   22af8:	e9cd 2101 	strd	r2, r1, [sp, #4]
   22afc:	e9cd 0503 	strd	r0, r5, [sp, #12]
   22b00:	ab0c      	add	r3, sp, #48	@ 0x30
   22b02:	aa08      	add	r2, sp, #32
   22b04:	a934      	add	r1, sp, #208	@ 0xd0
   22b06:	a80a      	add	r0, sp, #40	@ 0x28
   22b08:	f7f8 f8b0 	bl	1ac6c <arm_convolve_wrapper_s16>
   22b0c:	b920      	cbnz	r0, 22b18 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x14c>
          tflite::micro::GetOptionalTensorData<int64_t>(bias), &output_dims,
          tflite::micro::GetTensorData<int16_t>(output)),
      ARM_CMSIS_NN_SUCCESS);

  return kTfLiteOk;
}
   22b0e:	b03e      	add	sp, #248	@ 0xf8
   22b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int buffer_size = 1;
   22b14:	2201      	movs	r2, #1
   22b16:	e7b7      	b.n	22a88 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0xbc>
  TFLITE_DCHECK_LE(conv_params.activation.min, conv_params.activation.max);
   22b18:	f002 fc32 	bl	25380 <abort>

00022b1c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0>:
TfLiteStatus EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
   22b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22b20:	461e      	mov	r6, r3
  conv_params.input_offset = -data.reference_op_data.input_zero_point;
   22b22:	6913      	ldr	r3, [r2, #16]
TfLiteStatus EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
   22b24:	b0be      	sub	sp, #248	@ 0xf8
  conv_params.input_offset = -data.reference_op_data.input_zero_point;
   22b26:	425b      	negs	r3, r3
   22b28:	9334      	str	r3, [sp, #208]	@ 0xd0
  conv_params.dilation.h = params.dilation_height_factor;
   22b2a:	694b      	ldr	r3, [r1, #20]
   22b2c:	933b      	str	r3, [sp, #236]	@ 0xec
  conv_params.dilation.w = params.dilation_width_factor;
   22b2e:	690b      	ldr	r3, [r1, #16]
   22b30:	933a      	str	r3, [sp, #232]	@ 0xe8
  conv_params.output_offset = data.reference_op_data.output_zero_point;
   22b32:	6993      	ldr	r3, [r2, #24]
   22b34:	9335      	str	r3, [sp, #212]	@ 0xd4
  conv_params.stride.h = params.stride_height;
   22b36:	688b      	ldr	r3, [r1, #8]
   22b38:	9337      	str	r3, [sp, #220]	@ 0xdc
  conv_params.stride.w = params.stride_width;
   22b3a:	684b      	ldr	r3, [r1, #4]
   22b3c:	9336      	str	r3, [sp, #216]	@ 0xd8
  conv_params.padding.h = data.reference_op_data.padding.height;
   22b3e:	6853      	ldr	r3, [r2, #4]
   22b40:	9339      	str	r3, [sp, #228]	@ 0xe4
  conv_params.padding.w = data.reference_op_data.padding.width;
   22b42:	6813      	ldr	r3, [r2, #0]
   22b44:	9338      	str	r3, [sp, #224]	@ 0xe0
  conv_params.activation.min = data.reference_op_data.output_activation_min;
   22b46:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
TfLiteStatus EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
   22b48:	f8dd 8118 	ldr.w	r8, [sp, #280]	@ 0x118
  conv_params.activation.min = data.reference_op_data.output_activation_min;
   22b4c:	933c      	str	r3, [sp, #240]	@ 0xf0
  conv_params.activation.max = data.reference_op_data.output_activation_max;
   22b4e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
   22b50:	933d      	str	r3, [sp, #244]	@ 0xf4
TfLiteStatus EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
   22b52:	e9dd 5747 	ldrd	r5, r7, [sp, #284]	@ 0x11c
      data.reference_op_data.per_channel_output_multiplier);
   22b56:	6a93      	ldr	r3, [r2, #40]	@ 0x28
  quant_params.multiplier = const_cast<int32_t*>(
   22b58:	9309      	str	r3, [sp, #36]	@ 0x24
  RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
   22b5a:	4641      	mov	r1, r8
  quant_params.multiplier = const_cast<int32_t*>(
   22b5c:	6a53      	ldr	r3, [r2, #36]	@ 0x24
   22b5e:	9308      	str	r3, [sp, #32]
TfLiteStatus EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
   22b60:	4681      	mov	r9, r0
  RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
   22b62:	a81c      	add	r0, sp, #112	@ 0x70
TfLiteStatus EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
   22b64:	4614      	mov	r4, r2
  RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
   22b66:	f000 fe2d 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
   22b6a:	4631      	mov	r1, r6
   22b6c:	a822      	add	r0, sp, #136	@ 0x88
   22b6e:	f000 fe29 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
   22b72:	4639      	mov	r1, r7
   22b74:	a828      	add	r0, sp, #160	@ 0xa0
   22b76:	f000 fe25 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
   22b7a:	4629      	mov	r1, r5
   22b7c:	a82e      	add	r0, sp, #184	@ 0xb8
   22b7e:	f000 fe21 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_LE(conv_params.activation.min, conv_params.activation.max);
   22b82:	e9dd 233c 	ldrd	r2, r3, [sp, #240]	@ 0xf0
   22b86:	429a      	cmp	r2, r3
   22b88:	dc6b      	bgt.n	22c62 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x146>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   22b8a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
   22b8c:	2b04      	cmp	r3, #4
   22b8e:	d168      	bne.n	22c62 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x146>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   22b90:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
   22b92:	2b04      	cmp	r3, #4
   22b94:	d165      	bne.n	22c62 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x146>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   22b96:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
   22b98:	2b04      	cmp	r3, #4
   22b9a:	d162      	bne.n	22c62 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x146>
    return dims_[i];
   22b9c:	9823      	ldr	r0, [sp, #140]	@ 0x8c
   22b9e:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
   22ba0:	4283      	cmp	r3, r0
   22ba2:	d15e      	bne.n	22c62 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x146>
   22ba4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
   22ba6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
   22ba8:	4293      	cmp	r3, r2
   22baa:	d15a      	bne.n	22c62 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x146>
   22bac:	f8dd e074 	ldr.w	lr, [sp, #116]	@ 0x74
   22bb0:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
   22bb2:	4572      	cmp	r2, lr
   22bb4:	d155      	bne.n	22c62 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x146>
  return tensor == nullptr ? nullptr
   22bb6:	b18d      	cbz	r5, 22bdc <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0xc0>
  if (tflite::micro::GetOptionalTensorData<int8_t>(bias)) {
   22bb8:	682a      	ldr	r2, [r5, #0]
   22bba:	b17a      	cbz	r2, 22bdc <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0xc0>
    for (int i = 0; i < size_; i++) {
   22bbc:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
   22bbe:	2a00      	cmp	r2, #0
   22bc0:	dd4d      	ble.n	22c5e <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x142>
   22bc2:	f10d 0cb8 	add.w	ip, sp, #184	@ 0xb8
   22bc6:	eb0c 0a82 	add.w	sl, ip, r2, lsl #2
    int buffer_size = 1;
   22bca:	2201      	movs	r2, #1
      buffer_size *= dims_data[i];
   22bcc:	f85c 1f04 	ldr.w	r1, [ip, #4]!
    for (int i = 0; i < size_; i++) {
   22bd0:	45d4      	cmp	ip, sl
      buffer_size *= dims_data[i];
   22bd2:	fb01 f202 	mul.w	r2, r1, r2
    for (int i = 0; i < size_; i++) {
   22bd6:	d1f9      	bne.n	22bcc <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0xb0>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   22bd8:	4572      	cmp	r2, lr
   22bda:	d142      	bne.n	22c62 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x146>
  input_dims.c = input_depth;
   22bdc:	930f      	str	r3, [sp, #60]	@ 0x3c
  filter_dims.c = input_depth;
   22bde:	9313      	str	r3, [sp, #76]	@ 0x4c
  bias_dims.n = 1;
   22be0:	2301      	movs	r3, #1
  bias_dims.h = 1;
   22be2:	e9cd 3314 	strd	r3, r3, [sp, #80]	@ 0x50
  bias_dims.w = 1;
   22be6:	9316      	str	r3, [sp, #88]	@ 0x58
  ctx.buf = nullptr;
   22be8:	2300      	movs	r3, #0
  ctx.size = 0;
   22bea:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
  input_dims.h = input_shape.Dims(1);
   22bee:	9b24      	ldr	r3, [sp, #144]	@ 0x90
   22bf0:	930d      	str	r3, [sp, #52]	@ 0x34
  input_dims.w = input_shape.Dims(2);
   22bf2:	9b25      	ldr	r3, [sp, #148]	@ 0x94
   22bf4:	930e      	str	r3, [sp, #56]	@ 0x38
  filter_dims.h = filter_shape.Dims(1);
   22bf6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
  if (data.buffer_idx > -1) {
   22bf8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
  filter_dims.h = filter_shape.Dims(1);
   22bfa:	9311      	str	r3, [sp, #68]	@ 0x44
  filter_dims.w = filter_shape.Dims(2);
   22bfc:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
   22bfe:	9312      	str	r3, [sp, #72]	@ 0x48
  output_dims.h = output_shape.Dims(1);
   22c00:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
   22c02:	9319      	str	r3, [sp, #100]	@ 0x64
  if (data.buffer_idx > -1) {
   22c04:	2900      	cmp	r1, #0
  output_dims.w = output_shape.Dims(2);
   22c06:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
  input_dims.n = batch_size;
   22c08:	900c      	str	r0, [sp, #48]	@ 0x30
  output_dims.n = batch_size;
   22c0a:	9018      	str	r0, [sp, #96]	@ 0x60
  filter_dims.n = output_depth;
   22c0c:	f8cd e040 	str.w	lr, [sp, #64]	@ 0x40
  bias_dims.c = output_depth;
   22c10:	f8cd e05c 	str.w	lr, [sp, #92]	@ 0x5c
  output_dims.c = output_depth;
   22c14:	f8cd e06c 	str.w	lr, [sp, #108]	@ 0x6c
  output_dims.w = output_shape.Dims(2);
   22c18:	931a      	str	r3, [sp, #104]	@ 0x68
  if (data.buffer_idx > -1) {
   22c1a:	db04      	blt.n	22c26 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x10a>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
   22c1c:	f8d9 3040 	ldr.w	r3, [r9, #64]	@ 0x40
   22c20:	4648      	mov	r0, r9
   22c22:	4798      	blx	r3
   22c24:	900a      	str	r0, [sp, #40]	@ 0x28
  TFLITE_DCHECK(tensor != nullptr);
   22c26:	b1e6      	cbz	r6, 22c62 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x146>
  return reinterpret_cast<const T*>(tensor->data.raw);
   22c28:	6833      	ldr	r3, [r6, #0]
   22c2a:	f8d8 1000 	ldr.w	r1, [r8]
  return tensor == nullptr ? nullptr
   22c2e:	b105      	cbz	r5, 22c32 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x116>
   22c30:	682d      	ldr	r5, [r5, #0]
  TFLITE_DCHECK(tensor != nullptr);
   22c32:	b1b7      	cbz	r7, 22c62 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x146>
  TFLITE_DCHECK_EQ(
   22c34:	6838      	ldr	r0, [r7, #0]
   22c36:	9300      	str	r3, [sp, #0]
   22c38:	aa18      	add	r2, sp, #96	@ 0x60
   22c3a:	e9cd 2005 	strd	r2, r0, [sp, #20]
   22c3e:	a814      	add	r0, sp, #80	@ 0x50
   22c40:	aa10      	add	r2, sp, #64	@ 0x40
   22c42:	e9cd 2101 	strd	r2, r1, [sp, #4]
   22c46:	e9cd 0503 	strd	r0, r5, [sp, #12]
   22c4a:	ab0c      	add	r3, sp, #48	@ 0x30
   22c4c:	aa08      	add	r2, sp, #32
   22c4e:	a934      	add	r1, sp, #208	@ 0xd0
   22c50:	a80a      	add	r0, sp, #40	@ 0x28
   22c52:	f7f8 f863 	bl	1ad1c <arm_convolve_wrapper_s8>
   22c56:	b920      	cbnz	r0, 22c62 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x146>
}
   22c58:	b03e      	add	sp, #248	@ 0xf8
   22c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int buffer_size = 1;
   22c5e:	2201      	movs	r2, #1
   22c60:	e7ba      	b.n	22bd8 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0xbc>
  TFLITE_DCHECK_LE(conv_params.activation.min, conv_params.activation.max);
   22c62:	f002 fb8d 	bl	25380 <abort>
   22c66:	bf00      	nop

00022c68 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

  return EvalQuantizedPerChannel16x8(context, node, params, data, input, filter,
                                     bias, output);
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   22c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
   22c6c:	4b36      	ldr	r3, [pc, #216]	@ (22d48 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe0>)
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   22c6e:	b088      	sub	sp, #32
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
   22c70:	681a      	ldr	r2, [r3, #0]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   22c72:	460c      	mov	r4, r1
   22c74:	4605      	mov	r5, r0
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
   22c76:	f000 fd7f 	bl	23778 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kConvWeightsTensor);
   22c7a:	4b34      	ldr	r3, [pc, #208]	@ (22d4c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe4>)
   22c7c:	4621      	mov	r1, r4
   22c7e:	681a      	ldr	r2, [r3, #0]
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
   22c80:	4606      	mov	r6, r0
      tflite::micro::GetEvalInput(context, node, kConvWeightsTensor);
   22c82:	4628      	mov	r0, r5
   22c84:	f000 fd78 	bl	23778 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  return node->inputs == nullptr ? 0 : node->inputs->size;
   22c88:	f8d4 9000 	ldr.w	r9, [r4]
   22c8c:	4680      	mov	r8, r0
   22c8e:	f1b9 0f00 	cmp.w	r9, #0
   22c92:	d005      	beq.n	22ca0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x38>
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
   22c94:	f8d9 3000 	ldr.w	r3, [r9]
   22c98:	2b03      	cmp	r3, #3
   22c9a:	d047      	beq.n	22d2c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc4>
   22c9c:	f04f 0900 	mov.w	r9, #0
          : nullptr;
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kConvOutputTensor);
   22ca0:	4b2b      	ldr	r3, [pc, #172]	@ (22d50 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe8>)
   22ca2:	4621      	mov	r1, r4
   22ca4:	681a      	ldr	r2, [r3, #0]
   22ca6:	4628      	mov	r0, r5
   22ca8:	f000 fd80 	bl	237ac <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>

  TFLITE_DCHECK(node->builtin_data != nullptr);
   22cac:	f8d4 a010 	ldr.w	sl, [r4, #16]
      tflite::micro::GetEvalOutput(context, node, kConvOutputTensor);
   22cb0:	4607      	mov	r7, r0
  TFLITE_DCHECK(node->builtin_data != nullptr);
   22cb2:	f1ba 0f00 	cmp.w	sl, #0
   22cb6:	d044      	beq.n	22d42 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xda>
  const auto& params =
      *(reinterpret_cast<TfLiteConvParams*>(node->builtin_data));
  TFLITE_DCHECK(node->user_data != nullptr);
   22cb8:	68e4      	ldr	r4, [r4, #12]
   22cba:	2c00      	cmp	r4, #0
   22cbc:	d041      	beq.n	22d42 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xda>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  TF_LITE_ENSURE_EQ(context, input->type, output->type);
   22cbe:	7a32      	ldrb	r2, [r6, #8]
   22cc0:	7a03      	ldrb	r3, [r0, #8]
   22cc2:	4293      	cmp	r3, r2
   22cc4:	d003      	beq.n	22cce <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x66>
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
   22cc6:	2001      	movs	r0, #1
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
                  input->type);
      return kTfLiteError;
  }
  return kTfLiteOk;
}
   22cc8:	b008      	add	sp, #32
   22cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  TF_LITE_ENSURE_MSG(
   22cce:	f898 2008 	ldrb.w	r2, [r8, #8]
   22cd2:	4293      	cmp	r3, r2
   22cd4:	d005      	beq.n	22ce2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7a>
   22cd6:	2b07      	cmp	r3, #7
   22cd8:	d030      	beq.n	22d3c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd4>
   22cda:	2b09      	cmp	r3, #9
   22cdc:	d1f3      	bne.n	22cc6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5e>
   22cde:	2a12      	cmp	r2, #18
   22ce0:	d1f1      	bne.n	22cc6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5e>
  TfLiteEvalTensor filter_int8 = tflite::micro::MakeUnpackedInt4Tensor(
   22ce2:	4643      	mov	r3, r8
   22ce4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
   22ce6:	4629      	mov	r1, r5
   22ce8:	a805      	add	r0, sp, #20
   22cea:	f000 fd7d 	bl	237e8 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor>
  switch (input->type) {  // Already know in/out types are same.
   22cee:	7a33      	ldrb	r3, [r6, #8]
   22cf0:	2b07      	cmp	r3, #7
   22cf2:	d010      	beq.n	22d16 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xae>
   22cf4:	2b09      	cmp	r3, #9
   22cf6:	d1e6      	bne.n	22cc6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5e>
      switch (filter_int8.type) {
   22cf8:	f89d 301c 	ldrb.w	r3, [sp, #28]
   22cfc:	2b09      	cmp	r3, #9
   22cfe:	d1e2      	bne.n	22cc6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5e>
          return EvalQuantizedPerChannel(context, node, params, data, input,
   22d00:	ab05      	add	r3, sp, #20
   22d02:	9300      	str	r3, [sp, #0]
   22d04:	e9cd 9701 	strd	r9, r7, [sp, #4]
   22d08:	4633      	mov	r3, r6
   22d0a:	4622      	mov	r2, r4
   22d0c:	4651      	mov	r1, sl
   22d0e:	4628      	mov	r0, r5
   22d10:	f7ff ff04 	bl	22b1c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0>
                                         &filter_int8, bias, output);
   22d14:	e7d8      	b.n	22cc8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x60>
      return EvalQuantizedPerChannel16x8(context, node, params, data, input,
   22d16:	e9cd 9701 	strd	r9, r7, [sp, #4]
   22d1a:	f8cd 8000 	str.w	r8, [sp]
   22d1e:	4633      	mov	r3, r6
   22d20:	4622      	mov	r2, r4
   22d22:	4651      	mov	r1, sl
   22d24:	4628      	mov	r0, r5
   22d26:	f7ff fe51 	bl	229cc <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0>
                                         filter, bias, output);
   22d2a:	e7cd      	b.n	22cc8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x60>
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
   22d2c:	4b09      	ldr	r3, [pc, #36]	@ (22d54 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xec>)
   22d2e:	4621      	mov	r1, r4
   22d30:	681a      	ldr	r2, [r3, #0]
   22d32:	4628      	mov	r0, r5
   22d34:	f000 fd20 	bl	23778 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
   22d38:	4681      	mov	r9, r0
   22d3a:	e7b1      	b.n	22ca0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x38>
  TF_LITE_ENSURE_MSG(
   22d3c:	2a09      	cmp	r2, #9
   22d3e:	d1c2      	bne.n	22cc6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5e>
   22d40:	e7cf      	b.n	22ce2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7a>
  TFLITE_DCHECK(node->builtin_data != nullptr);
   22d42:	f002 fb1d 	bl	25380 <abort>
   22d46:	bf00      	nop
   22d48:	00044c54 	.word	0x00044c54
   22d4c:	00044c50 	.word	0x00044c50
   22d50:	00044c48 	.word	0x00044c48
   22d54:	00044c4c 	.word	0x00044c4c

00022d58 <_ZN6tflite16Register_CONV_2DEv>:

}  // namespace

TfLiteRegistration Register_CONV_2D() {
   22d58:	b510      	push	{r4, lr}
   22d5a:	b082      	sub	sp, #8
  return tflite::micro::RegisterOp(Init, Prepare, Eval);
   22d5c:	2100      	movs	r1, #0
   22d5e:	9100      	str	r1, [sp, #0]
   22d60:	4b04      	ldr	r3, [pc, #16]	@ (22d74 <_ZN6tflite16Register_CONV_2DEv+0x1c>)
   22d62:	4a05      	ldr	r2, [pc, #20]	@ (22d78 <_ZN6tflite16Register_CONV_2DEv+0x20>)
   22d64:	4905      	ldr	r1, [pc, #20]	@ (22d7c <_ZN6tflite16Register_CONV_2DEv+0x24>)
TfLiteRegistration Register_CONV_2D() {
   22d66:	4604      	mov	r4, r0
  return tflite::micro::RegisterOp(Init, Prepare, Eval);
   22d68:	f000 fcfa 	bl	23760 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>
}
   22d6c:	4620      	mov	r0, r4
   22d6e:	b002      	add	sp, #8
   22d70:	bd10      	pop	{r4, pc}
   22d72:	bf00      	nop
   22d74:	00022c69 	.word	0x00022c69
   22d78:	00022771 	.word	0x00022771
   22d7c:	00022761 	.word	0x00022761

00022d80 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:
TfLiteStatus CalculateOpDataConv(TfLiteContext* context, TfLiteNode* node,
                                 const TfLiteConvParams& params, int width,
                                 int height, int filter_width,
                                 int filter_height, int out_width,
                                 int out_height, const TfLiteType data_type,
                                 OpDataConv* data) {
   22d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22d84:	4614      	mov	r4, r2
  bool has_bias = node->inputs->size == 3;
   22d86:	680a      	ldr	r2, [r1, #0]
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
   22d88:	6812      	ldr	r2, [r2, #0]
                                 OpDataConv* data) {
   22d8a:	b08d      	sub	sp, #52	@ 0x34
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
   22d8c:	3a02      	subs	r2, #2
   22d8e:	2a01      	cmp	r2, #1
                                 OpDataConv* data) {
   22d90:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
   22d94:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
   22d96:	d903      	bls.n	22da0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x20>
   22d98:	2001      	movs	r0, #1
  micro_context->DeallocateTempTfLiteTensor(filter);
  micro_context->DeallocateTempTfLiteTensor(output);
  micro_context->DeallocateTempTfLiteTensor(bias);

  return kTfLiteOk;
}
   22d9a:	b00d      	add	sp, #52	@ 0x34
   22d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
   22da0:	684a      	ldr	r2, [r1, #4]
   22da2:	6812      	ldr	r2, [r2, #0]
   22da4:	2a01      	cmp	r2, #1
   22da6:	468a      	mov	sl, r1
   22da8:	d1f6      	bne.n	22d98 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x18>
}

// Matching GetWindowedOutputSize in TensorFlow.
inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   22daa:	9917      	ldr	r1, [sp, #92]	@ 0x5c
      params.stride_height, params.stride_width, params.dilation_height_factor,
   22dac:	f8d4 c004 	ldr.w	ip, [r4, #4]
   22db0:	f8d4 e008 	ldr.w	lr, [r4, #8]
   22db4:	4605      	mov	r5, r0
   22db6:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
   22dba:	3901      	subs	r1, #1
   22dbc:	fb02 f101 	mul.w	r1, r2, r1
   22dc0:	9a18      	ldr	r2, [sp, #96]	@ 0x60
   22dc2:	3a01      	subs	r2, #1
   22dc4:	fb00 f202 	mul.w	r2, r0, r2
   22dc8:	3101      	adds	r1, #1
  auto padding = params.padding;
   22dca:	7820      	ldrb	r0, [r4, #0]
   22dcc:	3201      	adds	r2, #1

  // TODO(b/186448822): This uses 0 since the function has no other way to
  // report error case
  if (stride == 0) return 0;
   22dce:	f1bc 0f00 	cmp.w	ip, #0
   22dd2:	d010      	beq.n	22df6 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x76>

  switch (padding) {
   22dd4:	2801      	cmp	r0, #1
   22dd6:	f000 809e 	beq.w	22f16 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x196>
   22dda:	2802      	cmp	r0, #2
   22ddc:	d11c      	bne.n	22e18 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x98>
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
   22dde:	eb0c 0003 	add.w	r0, ip, r3
   22de2:	1a40      	subs	r0, r0, r1
   22de4:	fb90 f0fc 	sdiv	r0, r0, ip
      ((out_size - 1) * stride + effective_filter_size - in_size);
   22de8:	3801      	subs	r0, #1
  if (stride == 0) return 0;
   22dea:	f1be 0f00 	cmp.w	lr, #0
   22dee:	d10c      	bne.n	22e0a <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x8a>
   22df0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
   22df4:	e013      	b.n	22e1e <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x9e>
   22df6:	f1be 0f00 	cmp.w	lr, #0
   22dfa:	d00d      	beq.n	22e18 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x98>
  switch (padding) {
   22dfc:	2801      	cmp	r0, #1
   22dfe:	f000 809b 	beq.w	22f38 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1b8>
   22e02:	2802      	cmp	r0, #2
   22e04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   22e08:	d108      	bne.n	22e1c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x9c>
      return (image_size + stride - effective_filter_size) / stride;
   22e0a:	9f16      	ldr	r7, [sp, #88]	@ 0x58
   22e0c:	4477      	add	r7, lr
   22e0e:	1abf      	subs	r7, r7, r2
   22e10:	fb97 f7fe 	sdiv	r7, r7, lr
      ((out_size - 1) * stride + effective_filter_size - in_size);
   22e14:	3f01      	subs	r7, #1
      return (image_size + stride - effective_filter_size) / stride;
   22e16:	e002      	b.n	22e1e <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x9e>
   22e18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   22e1c:	4607      	mov	r7, r0
      ((out_size - 1) * stride + effective_filter_size - in_size);
   22e1e:	fb00 110c 	mla	r1, r0, ip, r1
  int total_padding =
   22e22:	1acb      	subs	r3, r1, r3
   22e24:	9916      	ldr	r1, [sp, #88]	@ 0x58
      ((out_size - 1) * stride + effective_filter_size - in_size);
   22e26:	fb07 220e 	mla	r2, r7, lr, r2
  total_padding = total_padding > 0 ? total_padding : 0;
   22e2a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   22e2e:	68af      	ldr	r7, [r5, #8]
  int total_padding =
   22e30:	1a52      	subs	r2, r2, r1
  return total_padding / 2;
   22e32:	1059      	asrs	r1, r3, #1
  *offset = total_padding % 2;
   22e34:	f003 0301 	and.w	r3, r3, #1
  total_padding = total_padding > 0 ? total_padding : 0;
   22e38:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  data->padding = ComputePaddingHeightWidth(
   22e3c:	60b3      	str	r3, [r6, #8]
      micro_context->AllocateTempInputTensor(node, kConvInputTensor);
   22e3e:	683b      	ldr	r3, [r7, #0]
  data->padding = ComputePaddingHeightWidth(
   22e40:	6031      	str	r1, [r6, #0]
  return total_padding / 2;
   22e42:	1051      	asrs	r1, r2, #1
  *offset = total_padding % 2;
   22e44:	f002 0201 	and.w	r2, r2, #1
      micro_context->AllocateTempInputTensor(node, kConvInputTensor);
   22e48:	699b      	ldr	r3, [r3, #24]
  data->padding = ComputePaddingHeightWidth(
   22e4a:	6071      	str	r1, [r6, #4]
   22e4c:	60f2      	str	r2, [r6, #12]
      micro_context->AllocateTempInputTensor(node, kConvInputTensor);
   22e4e:	4651      	mov	r1, sl
   22e50:	2200      	movs	r2, #0
   22e52:	4638      	mov	r0, r7
   22e54:	4798      	blx	r3
  TF_LITE_ENSURE(context, input != nullptr);
   22e56:	4680      	mov	r8, r0
   22e58:	2800      	cmp	r0, #0
   22e5a:	d09d      	beq.n	22d98 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x18>
      micro_context->AllocateTempInputTensor(node, kConvWeightsTensor);
   22e5c:	683b      	ldr	r3, [r7, #0]
   22e5e:	2201      	movs	r2, #1
   22e60:	699b      	ldr	r3, [r3, #24]
   22e62:	4651      	mov	r1, sl
   22e64:	4638      	mov	r0, r7
   22e66:	4798      	blx	r3
  TF_LITE_ENSURE(context, filter != nullptr);
   22e68:	4681      	mov	r9, r0
   22e6a:	2800      	cmp	r0, #0
   22e6c:	d094      	beq.n	22d98 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x18>
      micro_context->AllocateTempInputTensor(node, kConvBiasTensor);
   22e6e:	683b      	ldr	r3, [r7, #0]
   22e70:	4651      	mov	r1, sl
   22e72:	699b      	ldr	r3, [r3, #24]
   22e74:	2202      	movs	r2, #2
   22e76:	4638      	mov	r0, r7
   22e78:	4798      	blx	r3
      micro_context->AllocateTempOutputTensor(node, kConvOutputTensor);
   22e7a:	683b      	ldr	r3, [r7, #0]
      micro_context->AllocateTempInputTensor(node, kConvBiasTensor);
   22e7c:	900b      	str	r0, [sp, #44]	@ 0x2c
      micro_context->AllocateTempOutputTensor(node, kConvOutputTensor);
   22e7e:	4651      	mov	r1, sl
   22e80:	69db      	ldr	r3, [r3, #28]
   22e82:	2200      	movs	r2, #0
   22e84:	4638      	mov	r0, r7
   22e86:	4798      	blx	r3
  TF_LITE_ENSURE(context, output != nullptr);
   22e88:	4682      	mov	sl, r0
   22e8a:	2800      	cmp	r0, #0
   22e8c:	d084      	beq.n	22d98 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x18>
  if (data_type != kTfLiteFloat32) {
   22e8e:	f1bb 0f01 	cmp.w	fp, #1
   22e92:	d01f      	beq.n	22ed4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x154>
    int output_channels = filter->dims->data[kConvQuantizedDimension];
   22e94:	f8d9 3014 	ldr.w	r3, [r9, #20]
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
   22e98:	340c      	adds	r4, #12
   22e9a:	685b      	ldr	r3, [r3, #4]
   22e9c:	9308      	str	r3, [sp, #32]
   22e9e:	e9cd a400 	strd	sl, r4, [sp]
   22ea2:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
   22ea4:	9307      	str	r3, [sp, #28]
   22ea6:	6a73      	ldr	r3, [r6, #36]	@ 0x24
   22ea8:	9306      	str	r3, [sp, #24]
   22eaa:	f106 0330 	add.w	r3, r6, #48	@ 0x30
   22eae:	9305      	str	r3, [sp, #20]
   22eb0:	f106 032c 	add.w	r3, r6, #44	@ 0x2c
   22eb4:	9304      	str	r3, [sp, #16]
   22eb6:	f106 0320 	add.w	r3, r6, #32
   22eba:	9303      	str	r3, [sp, #12]
   22ebc:	f106 031c 	add.w	r3, r6, #28
   22ec0:	9302      	str	r3, [sp, #8]
   22ec2:	4628      	mov	r0, r5
   22ec4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   22ec6:	464a      	mov	r2, r9
   22ec8:	4641      	mov	r1, r8
   22eca:	f7fd fe73 	bl	20bb4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i>
   22ece:	2800      	cmp	r0, #0
   22ed0:	f47f af63 	bne.w	22d9a <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a>
  micro_context->DeallocateTempTfLiteTensor(input);
   22ed4:	683b      	ldr	r3, [r7, #0]
  data->input_zero_point = input->params.zero_point;
   22ed6:	f8d8 200c 	ldr.w	r2, [r8, #12]
  micro_context->DeallocateTempTfLiteTensor(input);
   22eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  data->input_zero_point = input->params.zero_point;
   22edc:	6132      	str	r2, [r6, #16]
  data->filter_zero_point = filter->params.zero_point;
   22ede:	f8d9 200c 	ldr.w	r2, [r9, #12]
   22ee2:	6172      	str	r2, [r6, #20]
  data->output_zero_point = output->params.zero_point;
   22ee4:	f8da 200c 	ldr.w	r2, [sl, #12]
   22ee8:	61b2      	str	r2, [r6, #24]
  micro_context->DeallocateTempTfLiteTensor(input);
   22eea:	4641      	mov	r1, r8
   22eec:	4638      	mov	r0, r7
   22eee:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(filter);
   22ef0:	683b      	ldr	r3, [r7, #0]
   22ef2:	4649      	mov	r1, r9
   22ef4:	4638      	mov	r0, r7
   22ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   22ef8:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
   22efa:	683b      	ldr	r3, [r7, #0]
   22efc:	4651      	mov	r1, sl
   22efe:	4638      	mov	r0, r7
   22f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   22f02:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(bias);
   22f04:	683b      	ldr	r3, [r7, #0]
   22f06:	990b      	ldr	r1, [sp, #44]	@ 0x2c
   22f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   22f0a:	4638      	mov	r0, r7
   22f0c:	4798      	blx	r3
  return kTfLiteOk;
   22f0e:	2000      	movs	r0, #0
}
   22f10:	b00d      	add	sp, #52	@ 0x34
   22f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return (image_size + stride - 1) / stride;
   22f16:	eb0c 0003 	add.w	r0, ip, r3
   22f1a:	3801      	subs	r0, #1
   22f1c:	fb90 f0fc 	sdiv	r0, r0, ip
      ((out_size - 1) * stride + effective_filter_size - in_size);
   22f20:	3801      	subs	r0, #1
  if (stride == 0) return 0;
   22f22:	f1be 0f00 	cmp.w	lr, #0
   22f26:	f43f af63 	beq.w	22df0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x70>
      return (image_size + stride - 1) / stride;
   22f2a:	9f16      	ldr	r7, [sp, #88]	@ 0x58
   22f2c:	4477      	add	r7, lr
   22f2e:	3f01      	subs	r7, #1
   22f30:	fb97 f7fe 	sdiv	r7, r7, lr
      ((out_size - 1) * stride + effective_filter_size - in_size);
   22f34:	3f01      	subs	r7, #1
      return (image_size + stride - 1) / stride;
   22f36:	e772      	b.n	22e1e <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x9e>
  switch (padding) {
   22f38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   22f3c:	e7f5      	b.n	22f2a <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1aa>
   22f3e:	bf00      	nop

00022f40 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
    const TfLiteEvalTensor* input, const TfLiteEvalTensor* filter,
    const TfLiteEvalTensor* bias, TfLiteEvalTensor* output)
    __attribute__((always_inline));

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   22f40:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   22f42:	b10b      	cbz	r3, 22f48 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x8>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
   22f44:	213c      	movs	r1, #60	@ 0x3c
   22f46:	4718      	bx	r3
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   22f48:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   22f4a:	f002 fa19 	bl	25380 <abort>
   22f4e:	bf00      	nop

00022f50 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0>:
          tflite::micro::GetOptionalTensorData<int32_t>(bias), &output_dims,
          tflite::micro::GetTensorData<int8_t>(output)),
      ARM_CMSIS_NN_SUCCESS);
}

void EvalQuantizedPerChannel16x8(TfLiteContext* context, TfLiteNode* node,
   22f50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22f54:	461e      	mov	r6, r3
  dw_conv_params->input_offset = -data.reference_op_data.input_zero_point;
   22f56:	690b      	ldr	r3, [r1, #16]
void EvalQuantizedPerChannel16x8(TfLiteContext* context, TfLiteNode* node,
   22f58:	b0c1      	sub	sp, #260	@ 0x104
  dw_conv_params->input_offset = -data.reference_op_data.input_zero_point;
   22f5a:	425b      	negs	r3, r3
   22f5c:	9335      	str	r3, [sp, #212]	@ 0xd4
  dw_conv_params->dilation.h = params.dilation_height_factor;
   22f5e:	6983      	ldr	r3, [r0, #24]
   22f60:	933d      	str	r3, [sp, #244]	@ 0xf4
  dw_conv_params->dilation.w = params.dilation_width_factor;
   22f62:	6943      	ldr	r3, [r0, #20]
   22f64:	933c      	str	r3, [sp, #240]	@ 0xf0
  dw_conv_params->output_offset = data.reference_op_data.output_zero_point;
   22f66:	698b      	ldr	r3, [r1, #24]
   22f68:	9336      	str	r3, [sp, #216]	@ 0xd8
  dw_conv_params->stride.h = params.stride_height;
   22f6a:	6883      	ldr	r3, [r0, #8]
   22f6c:	9339      	str	r3, [sp, #228]	@ 0xe4
  dw_conv_params->stride.w = params.stride_width;
   22f6e:	6843      	ldr	r3, [r0, #4]
   22f70:	9338      	str	r3, [sp, #224]	@ 0xe0
void EvalQuantizedPerChannel16x8(TfLiteContext* context, TfLiteNode* node,
   22f72:	468c      	mov	ip, r1
  dw_conv_params->ch_mult = params.depth_multiplier;
   22f74:	68c3      	ldr	r3, [r0, #12]
   22f76:	9337      	str	r3, [sp, #220]	@ 0xdc
      data.reference_op_data.per_channel_output_multiplier;
   22f78:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
  quant_params->multiplier =
   22f7a:	930a      	str	r3, [sp, #40]	@ 0x28
  dw_conv_params->padding.h = data.reference_op_data.padding.height;
   22f7c:	f8dc 3004 	ldr.w	r3, [ip, #4]
   22f80:	933b      	str	r3, [sp, #236]	@ 0xec
  dw_conv_params->padding.w = data.reference_op_data.padding.width;
   22f82:	f8dc 3000 	ldr.w	r3, [ip]
   22f86:	933a      	str	r3, [sp, #232]	@ 0xe8
  dw_conv_params->activation.min = data.reference_op_data.output_activation_min;
   22f88:	f8dc 302c 	ldr.w	r3, [ip, #44]	@ 0x2c
   22f8c:	933e      	str	r3, [sp, #248]	@ 0xf8
  dw_conv_params->activation.max = data.reference_op_data.output_activation_max;
   22f8e:	f8dc 3030 	ldr.w	r3, [ip, #48]	@ 0x30
void EvalQuantizedPerChannel16x8(TfLiteContext* context, TfLiteNode* node,
   22f92:	9f49      	ldr	r7, [sp, #292]	@ 0x124
  dw_conv_params->activation.max = data.reference_op_data.output_activation_max;
   22f94:	933f      	str	r3, [sp, #252]	@ 0xfc
void EvalQuantizedPerChannel16x8(TfLiteContext* context, TfLiteNode* node,
   22f96:	4615      	mov	r5, r2
  quant_params->multiplier =
   22f98:	f8dc 3024 	ldr.w	r3, [ip, #36]	@ 0x24
   22f9c:	9309      	str	r3, [sp, #36]	@ 0x24
  RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
   22f9e:	4631      	mov	r1, r6
   22fa0:	a81d      	add	r0, sp, #116	@ 0x74
void EvalQuantizedPerChannel16x8(TfLiteContext* context, TfLiteNode* node,
   22fa2:	9c48      	ldr	r4, [sp, #288]	@ 0x120
  RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
   22fa4:	f000 fc0e 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
   22fa8:	4629      	mov	r1, r5
   22faa:	a823      	add	r0, sp, #140	@ 0x8c
   22fac:	f000 fc0a 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
   22fb0:	4639      	mov	r1, r7
   22fb2:	a829      	add	r0, sp, #164	@ 0xa4
   22fb4:	f000 fc06 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
   22fb8:	4621      	mov	r1, r4
   22fba:	a82f      	add	r0, sp, #188	@ 0xbc
   22fbc:	f000 fc02 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_LE(dw_conv_params->activation.min,
   22fc0:	e9dd 233e 	ldrd	r2, r3, [sp, #248]	@ 0xf8
   22fc4:	429a      	cmp	r2, r3
   22fc6:	dc6e      	bgt.n	230a6 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x156>
    TFLITE_DCHECK_LT(i, size_);
   22fc8:	f8dd 808c 	ldr.w	r8, [sp, #140]	@ 0x8c
   22fcc:	f1b8 0f00 	cmp.w	r8, #0
   22fd0:	dd69      	ble.n	230a6 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x156>
   22fd2:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
    return dims_[i];
   22fd4:	f8dd 9090 	ldr.w	r9, [sp, #144]	@ 0x90
    TFLITE_DCHECK_LT(i, size_);
   22fd8:	2b00      	cmp	r3, #0
   22fda:	dd64      	ble.n	230a6 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x156>
   22fdc:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
   22fde:	454a      	cmp	r2, r9
   22fe0:	d161      	bne.n	230a6 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x156>
   22fe2:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
   22fe4:	2a03      	cmp	r2, #3
   22fe6:	dd5e      	ble.n	230a6 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x156>
   22fe8:	2b03      	cmp	r3, #3
    return dims_[i];
   22fea:	9a21      	ldr	r2, [sp, #132]	@ 0x84
    TFLITE_DCHECK_LT(i, size_);
   22fec:	dd5b      	ble.n	230a6 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x156>
   22fee:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   22ff0:	4293      	cmp	r3, r2
   22ff2:	d158      	bne.n	230a6 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x156>
  return tensor == nullptr ? nullptr
   22ff4:	b18c      	cbz	r4, 2301a <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0xca>
  if (tflite::micro::GetOptionalTensorData<int8_t>(bias)) {
   22ff6:	6823      	ldr	r3, [r4, #0]
   22ff8:	b17b      	cbz	r3, 2301a <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0xca>
    for (int i = 0; i < size_; i++) {
   22ffa:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
   22ffc:	2b00      	cmp	r3, #0
   22ffe:	dd4f      	ble.n	230a0 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x150>
   23000:	a82f      	add	r0, sp, #188	@ 0xbc
   23002:	eb00 0e83 	add.w	lr, r0, r3, lsl #2
    int buffer_size = 1;
   23006:	f04f 0c01 	mov.w	ip, #1
      buffer_size *= dims_data[i];
   2300a:	f850 1f04 	ldr.w	r1, [r0, #4]!
    for (int i = 0; i < size_; i++) {
   2300e:	4570      	cmp	r0, lr
      buffer_size *= dims_data[i];
   23010:	fb01 fc0c 	mul.w	ip, r1, ip
    for (int i = 0; i < size_; i++) {
   23014:	d1f9      	bne.n	2300a <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0xba>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   23016:	4562      	cmp	r2, ip
   23018:	d145      	bne.n	230a6 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x156>
    TFLITE_DCHECK_LT(i, size_);
   2301a:	f1b8 0f01 	cmp.w	r8, #1
  input_dims->n = batch_size;
   2301e:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
   23022:	d040      	beq.n	230a6 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x156>
  input_dims->h = input_shape.Dims(1);
   23024:	9b25      	ldr	r3, [sp, #148]	@ 0x94
   23026:	930e      	str	r3, [sp, #56]	@ 0x38
   23028:	f1b8 0f02 	cmp.w	r8, #2
   2302c:	d03b      	beq.n	230a6 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x156>
  input_dims->w = input_shape.Dims(2);
   2302e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
   23030:	930f      	str	r3, [sp, #60]	@ 0x3c
   23032:	f1b8 0f03 	cmp.w	r8, #3
   23036:	d036      	beq.n	230a6 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x156>
  PopulateDwConvParams(&dw_conv_params, &quant_params, &input_dims,
                       &filter_dims, &bias_dims, &output_dims, params, data,
                       input, filter, bias, output);

  cmsis_nn_context ctx;
  ctx.buf = nullptr;
   23038:	2300      	movs	r3, #0
  /* 'size' is unused */
  ctx.size = 0;
   2303a:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  bias_dims->n = 1;
   2303e:	2301      	movs	r3, #1
  bias_dims->h = 1;
   23040:	e9cd 3315 	strd	r3, r3, [sp, #84]	@ 0x54
  bias_dims->w = 1;
   23044:	9317      	str	r3, [sp, #92]	@ 0x5c
  output_dims->h = output_shape.Dims(1);
   23046:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
   23048:	931a      	str	r3, [sp, #104]	@ 0x68
  output_dims->w = output_shape.Dims(2);
   2304a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
   2304c:	931b      	str	r3, [sp, #108]	@ 0x6c
  input_dims->c = input_shape.Dims(3);
   2304e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
   23050:	9310      	str	r3, [sp, #64]	@ 0x40
    return dims_[i];
   23052:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
  filter_dims->n = filter_shape.Dims(0);
   23054:	9312      	str	r3, [sp, #72]	@ 0x48
   23056:	9b20      	ldr	r3, [sp, #128]	@ 0x80
   23058:	9313      	str	r3, [sp, #76]	@ 0x4c
   2305a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
  output_dims->n = batch_size;
   2305c:	f8cd 9064 	str.w	r9, [sp, #100]	@ 0x64
  filter_dims->c = output_depth;
   23060:	9214      	str	r2, [sp, #80]	@ 0x50
  bias_dims->c = output_depth;
   23062:	9218      	str	r2, [sp, #96]	@ 0x60
  output_dims->c = output_depth;
   23064:	921c      	str	r2, [sp, #112]	@ 0x70
  filter_dims->n = filter_shape.Dims(0);
   23066:	9311      	str	r3, [sp, #68]	@ 0x44
  TFLITE_DCHECK(tensor != nullptr);
   23068:	b1ed      	cbz	r5, 230a6 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x156>
  return reinterpret_cast<const T*>(tensor->data.raw);
   2306a:	682b      	ldr	r3, [r5, #0]
  TFLITE_DCHECK(tensor != nullptr);
   2306c:	b1de      	cbz	r6, 230a6 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x156>
  return reinterpret_cast<const T*>(tensor->data.raw);
   2306e:	6831      	ldr	r1, [r6, #0]
  return tensor == nullptr ? nullptr
   23070:	b104      	cbz	r4, 23074 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x124>
   23072:	6824      	ldr	r4, [r4, #0]
  TFLITE_DCHECK(tensor != nullptr);
   23074:	b1bf      	cbz	r7, 230a6 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x156>

  TFLITE_DCHECK_EQ(
   23076:	6838      	ldr	r0, [r7, #0]
   23078:	9300      	str	r3, [sp, #0]
   2307a:	aa19      	add	r2, sp, #100	@ 0x64
   2307c:	e9cd 2005 	strd	r2, r0, [sp, #20]
   23080:	a815      	add	r0, sp, #84	@ 0x54
   23082:	aa11      	add	r2, sp, #68	@ 0x44
   23084:	e9cd 2101 	strd	r2, r1, [sp, #4]
   23088:	e9cd 0403 	strd	r0, r4, [sp, #12]
   2308c:	ab0d      	add	r3, sp, #52	@ 0x34
   2308e:	aa09      	add	r2, sp, #36	@ 0x24
   23090:	a935      	add	r1, sp, #212	@ 0xd4
   23092:	a80b      	add	r0, sp, #44	@ 0x2c
   23094:	f7f8 f97a 	bl	1b38c <arm_depthwise_conv_s16>
   23098:	b928      	cbnz	r0, 230a6 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x156>
          tflite::micro::GetTensorData<int16_t>(input), &filter_dims,
          tflite::micro::GetTensorData<int8_t>(filter), &bias_dims,
          tflite::micro::GetOptionalTensorData<int64_t>(bias), &output_dims,
          tflite::micro::GetTensorData<int16_t>(output)),
      ARM_CMSIS_NN_SUCCESS);
}
   2309a:	b041      	add	sp, #260	@ 0x104
   2309c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    int buffer_size = 1;
   230a0:	f04f 0c01 	mov.w	ip, #1
   230a4:	e7b7      	b.n	23016 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0xc6>
  TFLITE_DCHECK_LE(dw_conv_params->activation.min,
   230a6:	f002 f96b 	bl	25380 <abort>
   230aa:	bf00      	nop

000230ac <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0>:
void EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
   230ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   230b0:	461e      	mov	r6, r3
  dw_conv_params->input_offset = -data.reference_op_data.input_zero_point;
   230b2:	6913      	ldr	r3, [r2, #16]
void EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
   230b4:	b0c0      	sub	sp, #256	@ 0x100
  dw_conv_params->input_offset = -data.reference_op_data.input_zero_point;
   230b6:	425b      	negs	r3, r3
   230b8:	9335      	str	r3, [sp, #212]	@ 0xd4
  dw_conv_params->dilation.h = params.dilation_height_factor;
   230ba:	698b      	ldr	r3, [r1, #24]
   230bc:	933d      	str	r3, [sp, #244]	@ 0xf4
  dw_conv_params->dilation.w = params.dilation_width_factor;
   230be:	694b      	ldr	r3, [r1, #20]
   230c0:	933c      	str	r3, [sp, #240]	@ 0xf0
  dw_conv_params->output_offset = data.reference_op_data.output_zero_point;
   230c2:	6993      	ldr	r3, [r2, #24]
   230c4:	9336      	str	r3, [sp, #216]	@ 0xd8
  dw_conv_params->stride.h = params.stride_height;
   230c6:	688b      	ldr	r3, [r1, #8]
   230c8:	9339      	str	r3, [sp, #228]	@ 0xe4
  dw_conv_params->stride.w = params.stride_width;
   230ca:	684b      	ldr	r3, [r1, #4]
   230cc:	9338      	str	r3, [sp, #224]	@ 0xe0
  dw_conv_params->ch_mult = params.depth_multiplier;
   230ce:	68cb      	ldr	r3, [r1, #12]
   230d0:	9337      	str	r3, [sp, #220]	@ 0xdc
      data.reference_op_data.per_channel_output_multiplier;
   230d2:	6a93      	ldr	r3, [r2, #40]	@ 0x28
  quant_params->multiplier =
   230d4:	930a      	str	r3, [sp, #40]	@ 0x28
  dw_conv_params->padding.h = data.reference_op_data.padding.height;
   230d6:	6853      	ldr	r3, [r2, #4]
   230d8:	933b      	str	r3, [sp, #236]	@ 0xec
  dw_conv_params->padding.w = data.reference_op_data.padding.width;
   230da:	6813      	ldr	r3, [r2, #0]
void EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
   230dc:	f8dd 9120 	ldr.w	r9, [sp, #288]	@ 0x120
  dw_conv_params->padding.w = data.reference_op_data.padding.width;
   230e0:	933a      	str	r3, [sp, #232]	@ 0xe8
  dw_conv_params->activation.min = data.reference_op_data.output_activation_min;
   230e2:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
   230e4:	933e      	str	r3, [sp, #248]	@ 0xf8
void EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
   230e6:	e9dd 5849 	ldrd	r5, r8, [sp, #292]	@ 0x124
  dw_conv_params->activation.max = data.reference_op_data.output_activation_max;
   230ea:	6b13      	ldr	r3, [r2, #48]	@ 0x30
   230ec:	933f      	str	r3, [sp, #252]	@ 0xfc
  RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
   230ee:	4649      	mov	r1, r9
  quant_params->multiplier =
   230f0:	6a53      	ldr	r3, [r2, #36]	@ 0x24
   230f2:	9309      	str	r3, [sp, #36]	@ 0x24
void EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
   230f4:	4607      	mov	r7, r0
  RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
   230f6:	a81d      	add	r0, sp, #116	@ 0x74
void EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
   230f8:	4614      	mov	r4, r2
  RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
   230fa:	f000 fb63 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
   230fe:	4631      	mov	r1, r6
   23100:	a823      	add	r0, sp, #140	@ 0x8c
   23102:	f000 fb5f 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
   23106:	4641      	mov	r1, r8
   23108:	a829      	add	r0, sp, #164	@ 0xa4
   2310a:	f000 fb5b 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
   2310e:	4629      	mov	r1, r5
   23110:	a82f      	add	r0, sp, #188	@ 0xbc
   23112:	f000 fb57 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_LE(dw_conv_params->activation.min,
   23116:	e9dd 233e 	ldrd	r2, r3, [sp, #248]	@ 0xf8
   2311a:	429a      	cmp	r2, r3
   2311c:	dc72      	bgt.n	23204 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x158>
    TFLITE_DCHECK_LT(i, size_);
   2311e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
   23120:	2b00      	cmp	r3, #0
   23122:	dd6f      	ble.n	23204 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x158>
   23124:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
    return dims_[i];
   23126:	9924      	ldr	r1, [sp, #144]	@ 0x90
    TFLITE_DCHECK_LT(i, size_);
   23128:	2a00      	cmp	r2, #0
   2312a:	dd6b      	ble.n	23204 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x158>
   2312c:	982a      	ldr	r0, [sp, #168]	@ 0xa8
   2312e:	4288      	cmp	r0, r1
   23130:	d168      	bne.n	23204 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x158>
   23132:	981d      	ldr	r0, [sp, #116]	@ 0x74
   23134:	2803      	cmp	r0, #3
   23136:	dd65      	ble.n	23204 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x158>
   23138:	2a03      	cmp	r2, #3
    return dims_[i];
   2313a:	9821      	ldr	r0, [sp, #132]	@ 0x84
    TFLITE_DCHECK_LT(i, size_);
   2313c:	dd62      	ble.n	23204 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x158>
   2313e:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
   23140:	4282      	cmp	r2, r0
   23142:	d15f      	bne.n	23204 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x158>
  return tensor == nullptr ? nullptr
   23144:	b19d      	cbz	r5, 2316e <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0xc2>
  if (tflite::micro::GetOptionalTensorData<int8_t>(bias)) {
   23146:	682a      	ldr	r2, [r5, #0]
   23148:	b18a      	cbz	r2, 2316e <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0xc2>
    for (int i = 0; i < size_; i++) {
   2314a:	f8dd a0bc 	ldr.w	sl, [sp, #188]	@ 0xbc
   2314e:	f1ba 0f00 	cmp.w	sl, #0
   23152:	dd54      	ble.n	231fe <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x152>
   23154:	aa2f      	add	r2, sp, #188	@ 0xbc
   23156:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
    int buffer_size = 1;
   2315a:	f04f 0c01 	mov.w	ip, #1
      buffer_size *= dims_data[i];
   2315e:	f852 ef04 	ldr.w	lr, [r2, #4]!
    for (int i = 0; i < size_; i++) {
   23162:	4552      	cmp	r2, sl
      buffer_size *= dims_data[i];
   23164:	fb0e fc0c 	mul.w	ip, lr, ip
    for (int i = 0; i < size_; i++) {
   23168:	d1f9      	bne.n	2315e <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0xb2>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   2316a:	4560      	cmp	r0, ip
   2316c:	d14a      	bne.n	23204 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x158>
    TFLITE_DCHECK_LT(i, size_);
   2316e:	2b01      	cmp	r3, #1
  input_dims->n = batch_size;
   23170:	910d      	str	r1, [sp, #52]	@ 0x34
   23172:	d047      	beq.n	23204 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x158>
  input_dims->h = input_shape.Dims(1);
   23174:	9a25      	ldr	r2, [sp, #148]	@ 0x94
   23176:	920e      	str	r2, [sp, #56]	@ 0x38
   23178:	2b02      	cmp	r3, #2
   2317a:	d043      	beq.n	23204 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x158>
  input_dims->w = input_shape.Dims(2);
   2317c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
   2317e:	920f      	str	r2, [sp, #60]	@ 0x3c
   23180:	2b03      	cmp	r3, #3
   23182:	d03f      	beq.n	23204 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x158>
  bias_dims->n = 1;
   23184:	2301      	movs	r3, #1
  bias_dims->h = 1;
   23186:	e9cd 3315 	strd	r3, r3, [sp, #84]	@ 0x54
  bias_dims->w = 1;
   2318a:	9317      	str	r3, [sp, #92]	@ 0x5c
  ctx.buf = nullptr;
   2318c:	2300      	movs	r3, #0
  ctx.size = 0;
   2318e:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  input_dims->c = input_shape.Dims(3);
   23192:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
   23194:	9310      	str	r3, [sp, #64]	@ 0x40
    return dims_[i];
   23196:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
  filter_dims->n = filter_shape.Dims(0);
   23198:	9312      	str	r3, [sp, #72]	@ 0x48
   2319a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
  output_dims->n = batch_size;
   2319c:	9119      	str	r1, [sp, #100]	@ 0x64
  filter_dims->n = filter_shape.Dims(0);
   2319e:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (data.buffer_idx > -1) {
   231a0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
  filter_dims->n = filter_shape.Dims(0);
   231a2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
   231a4:	9311      	str	r3, [sp, #68]	@ 0x44
  output_dims->h = output_shape.Dims(1);
   231a6:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
   231a8:	931a      	str	r3, [sp, #104]	@ 0x68
  if (data.buffer_idx > -1) {
   231aa:	2900      	cmp	r1, #0
  output_dims->w = output_shape.Dims(2);
   231ac:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
  filter_dims->c = output_depth;
   231ae:	9014      	str	r0, [sp, #80]	@ 0x50
  bias_dims->c = output_depth;
   231b0:	9018      	str	r0, [sp, #96]	@ 0x60
  output_dims->c = output_depth;
   231b2:	901c      	str	r0, [sp, #112]	@ 0x70
  output_dims->w = output_shape.Dims(2);
   231b4:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (data.buffer_idx > -1) {
   231b6:	db03      	blt.n	231c0 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x114>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
   231b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
   231ba:	4638      	mov	r0, r7
   231bc:	4798      	blx	r3
   231be:	900b      	str	r0, [sp, #44]	@ 0x2c
  TFLITE_DCHECK(tensor != nullptr);
   231c0:	b306      	cbz	r6, 23204 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x158>
  return reinterpret_cast<const T*>(tensor->data.raw);
   231c2:	6833      	ldr	r3, [r6, #0]
   231c4:	f8d9 1000 	ldr.w	r1, [r9]
  return tensor == nullptr ? nullptr
   231c8:	b105      	cbz	r5, 231cc <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x120>
   231ca:	682d      	ldr	r5, [r5, #0]
  TFLITE_DCHECK(tensor != nullptr);
   231cc:	f1b8 0f00 	cmp.w	r8, #0
   231d0:	d018      	beq.n	23204 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x158>
  TFLITE_DCHECK_EQ(
   231d2:	f8d8 0000 	ldr.w	r0, [r8]
   231d6:	9300      	str	r3, [sp, #0]
   231d8:	aa19      	add	r2, sp, #100	@ 0x64
   231da:	e9cd 2005 	strd	r2, r0, [sp, #20]
   231de:	a815      	add	r0, sp, #84	@ 0x54
   231e0:	aa11      	add	r2, sp, #68	@ 0x44
   231e2:	e9cd 2101 	strd	r2, r1, [sp, #4]
   231e6:	e9cd 0503 	strd	r0, r5, [sp, #12]
   231ea:	ab0d      	add	r3, sp, #52	@ 0x34
   231ec:	aa09      	add	r2, sp, #36	@ 0x24
   231ee:	a935      	add	r1, sp, #212	@ 0xd4
   231f0:	a80b      	add	r0, sp, #44	@ 0x2c
   231f2:	f7f9 fa01 	bl	1c5f8 <arm_depthwise_conv_wrapper_s8>
   231f6:	b928      	cbnz	r0, 23204 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x158>
}
   231f8:	b040      	add	sp, #256	@ 0x100
   231fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int buffer_size = 1;
   231fe:	f04f 0c01 	mov.w	ip, #1
   23202:	e7b2      	b.n	2316a <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0xbe>
  TFLITE_DCHECK_LE(dw_conv_params->activation.min,
   23204:	f002 f8bc 	bl	25380 <abort>

00023208 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   23208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
   2320c:	f8d1 900c 	ldr.w	r9, [r1, #12]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   23210:	b089      	sub	sp, #36	@ 0x24
  TFLITE_DCHECK(node->user_data != nullptr);
   23212:	f1b9 0f00 	cmp.w	r9, #0
   23216:	d057      	beq.n	232c8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc0>
  TFLITE_DCHECK(node->builtin_data != nullptr);
   23218:	f8d1 b010 	ldr.w	fp, [r1, #16]
   2321c:	460c      	mov	r4, r1
   2321e:	f1bb 0f00 	cmp.w	fp, #0
   23222:	d051      	beq.n	232c8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc0>
  const auto& params =
      *(reinterpret_cast<TfLiteDepthwiseConvParams*>(node->builtin_data));
  const OpData& data = *(static_cast<OpData*>(node->user_data));

  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kDepthwiseConvOutputTensor);
   23224:	4b29      	ldr	r3, [pc, #164]	@ (232cc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc4>)
   23226:	681a      	ldr	r2, [r3, #0]
   23228:	4605      	mov	r5, r0
   2322a:	f000 fabf 	bl	237ac <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvInputTensor);
   2322e:	4b28      	ldr	r3, [pc, #160]	@ (232d0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc8>)
   23230:	4621      	mov	r1, r4
   23232:	681a      	ldr	r2, [r3, #0]
      tflite::micro::GetEvalOutput(context, node, kDepthwiseConvOutputTensor);
   23234:	4682      	mov	sl, r0
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvInputTensor);
   23236:	4628      	mov	r0, r5
   23238:	f000 fa9e 	bl	23778 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvWeightsTensor);
   2323c:	4b25      	ldr	r3, [pc, #148]	@ (232d4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xcc>)
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvInputTensor);
   2323e:	4606      	mov	r6, r0
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvWeightsTensor);
   23240:	681a      	ldr	r2, [r3, #0]
   23242:	4621      	mov	r1, r4
   23244:	4628      	mov	r0, r5
   23246:	f000 fa97 	bl	23778 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
   2324a:	f8d4 8000 	ldr.w	r8, [r4]
   2324e:	4607      	mov	r7, r0
   23250:	f1b8 0f00 	cmp.w	r8, #0
   23254:	d005      	beq.n	23262 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5a>
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
          ? tflite::micro::GetEvalInput(context, node, kDepthwiseConvBiasTensor)
   23256:	f8d8 3000 	ldr.w	r3, [r8]
   2325a:	2b03      	cmp	r3, #3
   2325c:	d02c      	beq.n	232b8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb0>
   2325e:	f04f 0800 	mov.w	r8, #0
          : nullptr;

  TfLiteEvalTensor filter_int8 = tflite::micro::MakeUnpackedInt4Tensor(
   23262:	463b      	mov	r3, r7
   23264:	f8d9 2034 	ldr.w	r2, [r9, #52]	@ 0x34
   23268:	4629      	mov	r1, r5
   2326a:	a805      	add	r0, sp, #20
   2326c:	f000 fabc 	bl	237e8 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor>
      context, data.reference_op_data.filter_buffer_index, filter);

  switch (input->type) {  // Already know in/out types are same.
   23270:	7a33      	ldrb	r3, [r6, #8]
   23272:	2b07      	cmp	r3, #7
   23274:	d014      	beq.n	232a0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x98>
   23276:	2b09      	cmp	r3, #9
   23278:	d003      	beq.n	23282 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7a>
    case kTfLiteFloat32: {
#if EI_TFLITE_DISABLE_DEPTHWISE_CONV_2D_IN_F32
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
                  input->type);
      return kTfLiteError;
   2327a:	2001      	movs	r0, #1
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
                  input->type);
      return kTfLiteError;
  }
  return kTfLiteOk;
}
   2327c:	b009      	add	sp, #36	@ 0x24
   2327e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (filter_int8.type) {
   23282:	f89d 301c 	ldrb.w	r3, [sp, #28]
   23286:	2b09      	cmp	r3, #9
   23288:	d1f7      	bne.n	2327a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
          EvalQuantizedPerChannel(context, node, params, data, input,
   2328a:	ab05      	add	r3, sp, #20
   2328c:	9300      	str	r3, [sp, #0]
   2328e:	e9cd 8a01 	strd	r8, sl, [sp, #4]
   23292:	4633      	mov	r3, r6
   23294:	464a      	mov	r2, r9
   23296:	4659      	mov	r1, fp
   23298:	4628      	mov	r0, r5
   2329a:	f7ff ff07 	bl	230ac <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0>
      break;
   2329e:	e007      	b.n	232b0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa8>
      EvalQuantizedPerChannel16x8(context, node, params, data, input, filter,
   232a0:	e9cd 8a00 	strd	r8, sl, [sp]
   232a4:	463b      	mov	r3, r7
   232a6:	4632      	mov	r2, r6
   232a8:	4649      	mov	r1, r9
   232aa:	4658      	mov	r0, fp
   232ac:	f7ff fe50 	bl	22f50 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0>
  return kTfLiteOk;
   232b0:	2000      	movs	r0, #0
}
   232b2:	b009      	add	sp, #36	@ 0x24
   232b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          ? tflite::micro::GetEvalInput(context, node, kDepthwiseConvBiasTensor)
   232b8:	4b07      	ldr	r3, [pc, #28]	@ (232d8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd0>)
   232ba:	4621      	mov	r1, r4
   232bc:	681a      	ldr	r2, [r3, #0]
   232be:	4628      	mov	r0, r5
   232c0:	f000 fa5a 	bl	23778 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
   232c4:	4680      	mov	r8, r0
   232c6:	e7cc      	b.n	23262 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5a>
  TFLITE_DCHECK(node->user_data != nullptr);
   232c8:	f002 f85a 	bl	25380 <abort>
   232cc:	00044c5c 	.word	0x00044c5c
   232d0:	00044c68 	.word	0x00044c68
   232d4:	00044c64 	.word	0x00044c64
   232d8:	00044c60 	.word	0x00044c60

000232dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   232dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
   232e0:	f8d1 a00c 	ldr.w	sl, [r1, #12]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   232e4:	b0bd      	sub	sp, #244	@ 0xf4
  TFLITE_DCHECK(node->user_data != nullptr);
   232e6:	f1ba 0f00 	cmp.w	sl, #0
   232ea:	f000 812c 	beq.w	23546 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x26a>
  TFLITE_DCHECK(node->builtin_data != nullptr);
   232ee:	f8d1 b010 	ldr.w	fp, [r1, #16]
   232f2:	460d      	mov	r5, r1
   232f4:	f1bb 0f00 	cmp.w	fp, #0
   232f8:	f000 8125 	beq.w	23546 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x26a>
   232fc:	6884      	ldr	r4, [r0, #8]
      micro_context->AllocateTempInputTensor(node, kDepthwiseConvInputTensor);
   232fe:	4b93      	ldr	r3, [pc, #588]	@ (2354c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x270>)
   23300:	681a      	ldr	r2, [r3, #0]
   23302:	6823      	ldr	r3, [r4, #0]
   23304:	4680      	mov	r8, r0
   23306:	699b      	ldr	r3, [r3, #24]
   23308:	4620      	mov	r0, r4
   2330a:	4798      	blx	r3
  TF_LITE_ENSURE(context, input != nullptr);
   2330c:	4606      	mov	r6, r0
   2330e:	2800      	cmp	r0, #0
   23310:	d060      	beq.n	233d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xf8>
      micro_context->AllocateTempInputTensor(node, kDepthwiseConvWeightsTensor);
   23312:	4b8f      	ldr	r3, [pc, #572]	@ (23550 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x274>)
   23314:	681a      	ldr	r2, [r3, #0]
   23316:	6823      	ldr	r3, [r4, #0]
   23318:	4629      	mov	r1, r5
   2331a:	699b      	ldr	r3, [r3, #24]
   2331c:	4620      	mov	r0, r4
   2331e:	4798      	blx	r3
  TF_LITE_ENSURE(context, filter != nullptr);
   23320:	4607      	mov	r7, r0
   23322:	2800      	cmp	r0, #0
   23324:	d056      	beq.n	233d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xf8>
      micro_context->AllocateTempOutputTensor(node, kDepthwiseConvOutputTensor);
   23326:	4b8b      	ldr	r3, [pc, #556]	@ (23554 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x278>)
   23328:	681a      	ldr	r2, [r3, #0]
   2332a:	6823      	ldr	r3, [r4, #0]
   2332c:	4629      	mov	r1, r5
   2332e:	69db      	ldr	r3, [r3, #28]
   23330:	4620      	mov	r0, r4
   23332:	4798      	blx	r3
  TF_LITE_ENSURE(context, output != nullptr);
   23334:	4681      	mov	r9, r0
   23336:	2800      	cmp	r0, #0
   23338:	d04c      	beq.n	233d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xf8>
  return t->dims->data[dim];
   2333a:	6971      	ldr	r1, [r6, #20]
   2333c:	697b      	ldr	r3, [r7, #20]
   2333e:	68ca      	ldr	r2, [r1, #12]
   23340:	920f      	str	r2, [sp, #60]	@ 0x3c
   23342:	688a      	ldr	r2, [r1, #8]
   23344:	f8d0 c014 	ldr.w	ip, [r0, #20]
   23348:	920e      	str	r2, [sp, #56]	@ 0x38
   2334a:	68da      	ldr	r2, [r3, #12]
  const TfLiteType data_type = input->type;
   2334c:	7f30      	ldrb	r0, [r6, #28]
   2334e:	920a      	str	r2, [sp, #40]	@ 0x28
   23350:	689a      	ldr	r2, [r3, #8]
   23352:	920b      	str	r2, [sp, #44]	@ 0x2c
   23354:	f8dc 200c 	ldr.w	r2, [ip, #12]
   23358:	920c      	str	r2, [sp, #48]	@ 0x30
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
   2335a:	2809      	cmp	r0, #9
   2335c:	f8dc 2008 	ldr.w	r2, [ip, #8]
  const TfLiteType data_type = input->type;
   23360:	9009      	str	r0, [sp, #36]	@ 0x24
   23362:	920d      	str	r2, [sp, #52]	@ 0x34
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
   23364:	d03b      	beq.n	233de <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x102>
   23366:	9a09      	ldr	r2, [sp, #36]	@ 0x24
   23368:	2a07      	cmp	r2, #7
   2336a:	d02d      	beq.n	233c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xec>
  if (filter->type == kTfLiteInt4) {
   2336c:	7f3b      	ldrb	r3, [r7, #28]
   2336e:	2b12      	cmp	r3, #18
   23370:	d063      	beq.n	2343a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x15e>
  TF_LITE_ENSURE_STATUS(CalculateOpDataDepthwiseConv(
   23372:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   23374:	e9cd 3a05 	strd	r3, sl, [sp, #20]
   23378:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   2337a:	9304      	str	r3, [sp, #16]
   2337c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   2337e:	9303      	str	r3, [sp, #12]
   23380:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   23382:	9302      	str	r3, [sp, #8]
   23384:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   23386:	9301      	str	r3, [sp, #4]
   23388:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   2338a:	9300      	str	r3, [sp, #0]
   2338c:	4629      	mov	r1, r5
   2338e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
   23390:	465a      	mov	r2, fp
   23392:	4640      	mov	r0, r8
   23394:	f000 f8f6 	bl	23584 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
   23398:	4605      	mov	r5, r0
   2339a:	b9e0      	cbnz	r0, 233d6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xfa>
  if (input->type == kTfLiteInt8) {
   2339c:	7f33      	ldrb	r3, [r6, #28]
   2339e:	2b09      	cmp	r3, #9
   233a0:	d06f      	beq.n	23482 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a6>
  micro_context->DeallocateTempTfLiteTensor(output);
   233a2:	6823      	ldr	r3, [r4, #0]
   233a4:	4649      	mov	r1, r9
   233a6:	4620      	mov	r0, r4
   233a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   233aa:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(input);
   233ac:	6823      	ldr	r3, [r4, #0]
   233ae:	4631      	mov	r1, r6
   233b0:	4620      	mov	r0, r4
   233b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   233b4:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(filter);
   233b6:	6823      	ldr	r3, [r4, #0]
   233b8:	4620      	mov	r0, r4
   233ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   233bc:	4639      	mov	r1, r7
   233be:	4798      	blx	r3
}
   233c0:	4628      	mov	r0, r5
   233c2:	b03d      	add	sp, #244	@ 0xf4
   233c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
   233c8:	783a      	ldrb	r2, [r7, #0]
   233ca:	2a01      	cmp	r2, #1
   233cc:	d102      	bne.n	233d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xf8>
      TF_LITE_ENSURE_EQ(context, input->params.zero_point, 0);
   233ce:	68f2      	ldr	r2, [r6, #12]
   233d0:	2a00      	cmp	r2, #0
   233d2:	d04f      	beq.n	23474 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x198>
  TF_LITE_ENSURE(context, input != nullptr);
   233d4:	2501      	movs	r5, #1
}
   233d6:	4628      	mov	r0, r5
   233d8:	b03d      	add	sp, #244	@ 0xf4
   233da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
   233de:	783a      	ldrb	r2, [r7, #0]
   233e0:	2a01      	cmp	r2, #1
   233e2:	d1f7      	bne.n	233d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xf8>
    const auto* affine_quantization =
   233e4:	687a      	ldr	r2, [r7, #4]
    TF_LITE_ENSURE(context, affine_quantization);
   233e6:	2a00      	cmp	r2, #0
   233e8:	d0f4      	beq.n	233d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xf8>
    TF_LITE_ENSURE(context, affine_quantization->scale);
   233ea:	6811      	ldr	r1, [r2, #0]
   233ec:	2900      	cmp	r1, #0
   233ee:	d0f1      	beq.n	233d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xf8>
    TF_LITE_ENSURE(context, affine_quantization->zero_point);
   233f0:	6850      	ldr	r0, [r2, #4]
   233f2:	2800      	cmp	r0, #0
   233f4:	d0ee      	beq.n	233d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xf8>
    TF_LITE_ENSURE(
   233f6:	680a      	ldr	r2, [r1, #0]
   233f8:	2a01      	cmp	r2, #1
   233fa:	d006      	beq.n	2340a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x12e>
   233fc:	4956      	ldr	r1, [pc, #344]	@ (23558 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x27c>)
   233fe:	6809      	ldr	r1, [r1, #0]
   23400:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   23404:	6849      	ldr	r1, [r1, #4]
   23406:	428a      	cmp	r2, r1
   23408:	d1e4      	bne.n	233d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xf8>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
   2340a:	6801      	ldr	r1, [r0, #0]
   2340c:	428a      	cmp	r2, r1
   2340e:	d1e1      	bne.n	233d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xf8>
    const int num_channels =
   23410:	4a51      	ldr	r2, [pc, #324]	@ (23558 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x27c>)
   23412:	6812      	ldr	r2, [r2, #0]
   23414:	eb03 0382 	add.w	r3, r3, r2, lsl #2
        reinterpret_cast<int32_t*>(context->AllocatePersistentBuffer(
   23418:	4640      	mov	r0, r8
   2341a:	6859      	ldr	r1, [r3, #4]
   2341c:	f8d8 3034 	ldr.w	r3, [r8, #52]	@ 0x34
   23420:	0089      	lsls	r1, r1, #2
   23422:	9110      	str	r1, [sp, #64]	@ 0x40
   23424:	4798      	blx	r3
        reinterpret_cast<int32_t*>(context->AllocatePersistentBuffer(
   23426:	9910      	ldr	r1, [sp, #64]	@ 0x40
    data->reference_op_data.per_channel_output_multiplier =
   23428:	f8ca 0024 	str.w	r0, [sl, #36]	@ 0x24
        reinterpret_cast<int32_t*>(context->AllocatePersistentBuffer(
   2342c:	f8d8 3034 	ldr.w	r3, [r8, #52]	@ 0x34
   23430:	4640      	mov	r0, r8
   23432:	4798      	blx	r3
    data->reference_op_data.per_channel_output_shift =
   23434:	f8ca 0028 	str.w	r0, [sl, #40]	@ 0x28
   23438:	e798      	b.n	2336c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x90>
        RuntimeShape(filter->dims->size,
   2343a:	6979      	ldr	r1, [r7, #20]
   2343c:	f851 3b04 	ldr.w	r3, [r1], #4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   23440:	a832      	add	r0, sp, #200	@ 0xc8
   23442:	009a      	lsls	r2, r3, #2
   23444:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
   23448:	f7f5 f89a 	bl	18580 <memcpy>
    for (int i = 0; i < size_; i++) {
   2344c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
   2344e:	2b00      	cmp	r3, #0
   23450:	dd15      	ble.n	2347e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a2>
   23452:	9a11      	ldr	r2, [sp, #68]	@ 0x44
   23454:	ab31      	add	r3, sp, #196	@ 0xc4
   23456:	441a      	add	r2, r3
    int buffer_size = 1;
   23458:	2101      	movs	r1, #1
      buffer_size *= dims_data[i];
   2345a:	f853 0f04 	ldr.w	r0, [r3, #4]!
    for (int i = 0; i < size_; i++) {
   2345e:	429a      	cmp	r2, r3
      buffer_size *= dims_data[i];
   23460:	fb00 f101 	mul.w	r1, r0, r1
    for (int i = 0; i < size_; i++) {
   23464:	d1f9      	bne.n	2345a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x17e>
    context->RequestScratchBufferInArena(
   23466:	f8d8 303c 	ldr.w	r3, [r8, #60]	@ 0x3c
   2346a:	f10a 0234 	add.w	r2, sl, #52	@ 0x34
   2346e:	4640      	mov	r0, r8
   23470:	4798      	blx	r3
   23472:	e77e      	b.n	23372 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x96>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
   23474:	f8d9 200c 	ldr.w	r2, [r9, #12]
   23478:	2a00      	cmp	r2, #0
   2347a:	d0b3      	beq.n	233e4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x108>
   2347c:	e7aa      	b.n	233d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xf8>
   2347e:	2101      	movs	r1, #1
   23480:	e7f1      	b.n	23466 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18a>
   23482:	6971      	ldr	r1, [r6, #20]
   23484:	f851 3b04 	ldr.w	r3, [r1], #4
      : size_(dimensions_count) {
   23488:	931f      	str	r3, [sp, #124]	@ 0x7c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   2348a:	009a      	lsls	r2, r3, #2
   2348c:	a820      	add	r0, sp, #128	@ 0x80
   2348e:	9310      	str	r3, [sp, #64]	@ 0x40
   23490:	f7f5 f876 	bl	18580 <memcpy>
   23494:	f8d9 1014 	ldr.w	r1, [r9, #20]
   23498:	f851 3b04 	ldr.w	r3, [r1], #4
      : size_(dimensions_count) {
   2349c:	9325      	str	r3, [sp, #148]	@ 0x94
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   2349e:	009a      	lsls	r2, r3, #2
   234a0:	a826      	add	r0, sp, #152	@ 0x98
   234a2:	9311      	str	r3, [sp, #68]	@ 0x44
   234a4:	f7f5 f86c 	bl	18580 <memcpy>
   234a8:	6979      	ldr	r1, [r7, #20]
   234aa:	f851 2b04 	ldr.w	r2, [r1], #4
      : size_(dimensions_count) {
   234ae:	922b      	str	r2, [sp, #172]	@ 0xac
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   234b0:	9209      	str	r2, [sp, #36]	@ 0x24
   234b2:	a82c      	add	r0, sp, #176	@ 0xb0
   234b4:	0092      	lsls	r2, r2, #2
   234b6:	f7f5 f863 	bl	18580 <memcpy>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   234ba:	9b10      	ldr	r3, [sp, #64]	@ 0x40
   234bc:	2b04      	cmp	r3, #4
   234be:	d142      	bne.n	23546 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x26a>
    TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   234c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
   234c2:	2a04      	cmp	r2, #4
   234c4:	d13f      	bne.n	23546 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x26a>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   234c6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
   234c8:	2b04      	cmp	r3, #4
   234ca:	d13c      	bne.n	23546 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x26a>
    return dims_[i];
   234cc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
   234ce:	9b26      	ldr	r3, [sp, #152]	@ 0x98
   234d0:	4293      	cmp	r3, r2
   234d2:	d138      	bne.n	23546 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x26a>
   234d4:	9929      	ldr	r1, [sp, #164]	@ 0xa4
   234d6:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
   234d8:	428a      	cmp	r2, r1
   234da:	d134      	bne.n	23546 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x26a>
    TFLITE_DCHECK_EQ(batch_size, 1); /* Only batch = 1 is supported */
   234dc:	2b01      	cmp	r3, #1
   234de:	d132      	bne.n	23546 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x26a>
    filter_dims.c = output_depth;
   234e0:	e9cd 231a 	strd	r2, r3, [sp, #104]	@ 0x68
    input_dims.n = batch_size;
   234e4:	9313      	str	r3, [sp, #76]	@ 0x4c
    filter_dims.n = 1;
   234e6:	9317      	str	r3, [sp, #92]	@ 0x5c
    output_dims.c = output_depth;
   234e8:	921e      	str	r2, [sp, #120]	@ 0x78
    dw_conv_params.padding.w = data->reference_op_data.padding.width;
   234ea:	e9da 2300 	ldrd	r2, r3, [sl]
    input_dims.h = input_height;
   234ee:	990e      	ldr	r1, [sp, #56]	@ 0x38
   234f0:	9114      	str	r1, [sp, #80]	@ 0x50
    input_dims.w = input_width;
   234f2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
   234f4:	9115      	str	r1, [sp, #84]	@ 0x54
    dw_conv_params.padding.w = data->reference_op_data.padding.width;
   234f6:	e9cd 2336 	strd	r2, r3, [sp, #216]	@ 0xd8
    filter_dims.h = filter_height;
   234fa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
   234fc:	9118      	str	r1, [sp, #96]	@ 0x60
    dw_conv_params.dilation.w = params.dilation_width_factor;
   234fe:	e9db 2305 	ldrd	r2, r3, [fp, #20]
    filter_dims.w = filter_width;
   23502:	990a      	ldr	r1, [sp, #40]	@ 0x28
   23504:	9119      	str	r1, [sp, #100]	@ 0x64
    output_dims.h = output_height;
   23506:	990d      	ldr	r1, [sp, #52]	@ 0x34
   23508:	911c      	str	r1, [sp, #112]	@ 0x70
    dw_conv_params.dilation.w = params.dilation_width_factor;
   2350a:	e9cd 2338 	strd	r2, r3, [sp, #224]	@ 0xe0
    output_dims.w = output_width;
   2350e:	990c      	ldr	r1, [sp, #48]	@ 0x30
    input_dims.c = input_shape.Dims(3);
   23510:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
    output_dims.w = output_width;
   23512:	911d      	str	r1, [sp, #116]	@ 0x74
    input_dims.c = input_shape.Dims(3);
   23514:	9316      	str	r3, [sp, #88]	@ 0x58
    const int32_t buf_size = arm_depthwise_conv_wrapper_s8_get_buffer_size(
   23516:	a913      	add	r1, sp, #76	@ 0x4c
   23518:	ab1b      	add	r3, sp, #108	@ 0x6c
   2351a:	aa17      	add	r2, sp, #92	@ 0x5c
   2351c:	a831      	add	r0, sp, #196	@ 0xc4
   2351e:	f7f9 f8bd 	bl	1c69c <arm_depthwise_conv_wrapper_s8_get_buffer_size>
    if (buf_size > 0) {
   23522:	1e01      	subs	r1, r0, #0
   23524:	dd0a      	ble.n	2353c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x260>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
   23526:	f8d8 303c 	ldr.w	r3, [r8, #60]	@ 0x3c
   2352a:	f10a 0238 	add.w	r2, sl, #56	@ 0x38
   2352e:	4640      	mov	r0, r8
   23530:	4798      	blx	r3
   23532:	2800      	cmp	r0, #0
   23534:	f43f af35 	beq.w	233a2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
   23538:	4605      	mov	r5, r0
   2353a:	e74c      	b.n	233d6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xfa>
      data->buffer_idx = -1;
   2353c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
   23540:	f8ca 3038 	str.w	r3, [sl, #56]	@ 0x38
  ~RuntimeShape() {}
   23544:	e72d      	b.n	233a2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TFLITE_DCHECK(node->user_data != nullptr);
   23546:	f001 ff1b 	bl	25380 <abort>
   2354a:	bf00      	nop
   2354c:	00044c68 	.word	0x00044c68
   23550:	00044c64 	.word	0x00044c64
   23554:	00044c5c 	.word	0x00044c5c
   23558:	00044c58 	.word	0x00044c58

0002355c <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>:
  return kTfLiteOk;
}

}  // namespace

TfLiteRegistration Register_DEPTHWISE_CONV_2D() {
   2355c:	b510      	push	{r4, lr}
   2355e:	b082      	sub	sp, #8
  return tflite::micro::RegisterOp(Init, Prepare, Eval);
   23560:	2100      	movs	r1, #0
   23562:	9100      	str	r1, [sp, #0]
   23564:	4b04      	ldr	r3, [pc, #16]	@ (23578 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv+0x1c>)
   23566:	4a05      	ldr	r2, [pc, #20]	@ (2357c <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv+0x20>)
   23568:	4905      	ldr	r1, [pc, #20]	@ (23580 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv+0x24>)
TfLiteRegistration Register_DEPTHWISE_CONV_2D() {
   2356a:	4604      	mov	r4, r0
  return tflite::micro::RegisterOp(Init, Prepare, Eval);
   2356c:	f000 f8f8 	bl	23760 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>
}
   23570:	4620      	mov	r0, r4
   23572:	b002      	add	sp, #8
   23574:	bd10      	pop	{r4, pc}
   23576:	bf00      	nop
   23578:	00023209 	.word	0x00023209
   2357c:	000232dd 	.word	0x000232dd
   23580:	00022f41 	.word	0x00022f41

00023584 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:

TfLiteStatus CalculateOpDataDepthwiseConv(
    TfLiteContext* context, TfLiteNode* node,
    const TfLiteDepthwiseConvParams& params, int width, int height,
    int filter_width, int filter_height, int out_width, int out_height,
    const TfLiteType data_type, OpDataConv* data) {
   23584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23588:	4614      	mov	r4, r2
  bool has_bias = node->inputs->size == 3;
   2358a:	680a      	ldr	r2, [r1, #0]
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
   2358c:	6812      	ldr	r2, [r2, #0]
    const TfLiteType data_type, OpDataConv* data) {
   2358e:	b08d      	sub	sp, #52	@ 0x34
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
   23590:	3a02      	subs	r2, #2
   23592:	2a01      	cmp	r2, #1
    const TfLiteType data_type, OpDataConv* data) {
   23594:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
   23598:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
   2359a:	d903      	bls.n	235a4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x20>
   2359c:	2001      	movs	r0, #1
  micro_context->DeallocateTempTfLiteTensor(filter);
  micro_context->DeallocateTempTfLiteTensor(bias);
  micro_context->DeallocateTempTfLiteTensor(output);

  return kTfLiteOk;
}
   2359e:	b00d      	add	sp, #52	@ 0x34
   235a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
   235a4:	684a      	ldr	r2, [r1, #4]
   235a6:	6812      	ldr	r2, [r2, #0]
   235a8:	2a01      	cmp	r2, #1
   235aa:	468a      	mov	sl, r1
   235ac:	d1f6      	bne.n	2359c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x18>
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   235ae:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
      params.stride_height, params.stride_width, params.dilation_height_factor,
   235b0:	f8d4 c004 	ldr.w	ip, [r4, #4]
   235b4:	f8d4 e008 	ldr.w	lr, [r4, #8]
   235b8:	4605      	mov	r5, r0
   235ba:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
   235be:	3a01      	subs	r2, #1
   235c0:	fb00 f202 	mul.w	r2, r0, r2
   235c4:	9818      	ldr	r0, [sp, #96]	@ 0x60
   235c6:	3801      	subs	r0, #1
   235c8:	fb01 f000 	mul.w	r0, r1, r0
   235cc:	3201      	adds	r2, #1
  auto padding = params.padding;
   235ce:	7821      	ldrb	r1, [r4, #0]
   235d0:	3001      	adds	r0, #1
  if (stride == 0) return 0;
   235d2:	f1bc 0f00 	cmp.w	ip, #0
   235d6:	d010      	beq.n	235fa <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x76>
  switch (padding) {
   235d8:	2901      	cmp	r1, #1
   235da:	f000 80a4 	beq.w	23726 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a2>
   235de:	2902      	cmp	r1, #2
   235e0:	d11c      	bne.n	2361c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x98>
      return (image_size + stride - effective_filter_size) / stride;
   235e2:	eb0c 0103 	add.w	r1, ip, r3
   235e6:	1a89      	subs	r1, r1, r2
   235e8:	fb91 f1fc 	sdiv	r1, r1, ip
      ((out_size - 1) * stride + effective_filter_size - in_size);
   235ec:	3901      	subs	r1, #1
  if (stride == 0) return 0;
   235ee:	f1be 0f00 	cmp.w	lr, #0
   235f2:	d10c      	bne.n	2360e <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x8a>
   235f4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
   235f8:	e013      	b.n	23622 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x9e>
   235fa:	f1be 0f00 	cmp.w	lr, #0
   235fe:	d00d      	beq.n	2361c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x98>
  switch (padding) {
   23600:	2901      	cmp	r1, #1
   23602:	f000 80a1 	beq.w	23748 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1c4>
   23606:	2902      	cmp	r1, #2
   23608:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
   2360c:	d108      	bne.n	23620 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x9c>
      return (image_size + stride - effective_filter_size) / stride;
   2360e:	9f16      	ldr	r7, [sp, #88]	@ 0x58
   23610:	4477      	add	r7, lr
   23612:	1a3f      	subs	r7, r7, r0
   23614:	fb97 f7fe 	sdiv	r7, r7, lr
      ((out_size - 1) * stride + effective_filter_size - in_size);
   23618:	3f01      	subs	r7, #1
      return (image_size + stride - effective_filter_size) / stride;
   2361a:	e002      	b.n	23622 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x9e>
   2361c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
   23620:	460f      	mov	r7, r1
      ((out_size - 1) * stride + effective_filter_size - in_size);
   23622:	fb01 220c 	mla	r2, r1, ip, r2
   23626:	fb07 000e 	mla	r0, r7, lr, r0
   2362a:	68af      	ldr	r7, [r5, #8]
  int total_padding =
   2362c:	1ad3      	subs	r3, r2, r3
   2362e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
      micro_context->AllocateTempInputTensor(node, kConvInputTensor);
   23630:	6839      	ldr	r1, [r7, #0]
   23632:	1a80      	subs	r0, r0, r2
  total_padding = total_padding > 0 ? total_padding : 0;
   23634:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   23638:	f8d1 8018 	ldr.w	r8, [r1, #24]
   2363c:	4a44      	ldr	r2, [pc, #272]	@ (23750 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1cc>)
  return total_padding / 2;
   2363e:	1059      	asrs	r1, r3, #1
  total_padding = total_padding > 0 ? total_padding : 0;
   23640:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  *offset = total_padding % 2;
   23644:	f003 0301 	and.w	r3, r3, #1
  data->padding = ComputePaddingHeightWidth(
   23648:	60b3      	str	r3, [r6, #8]
  return total_padding / 2;
   2364a:	1043      	asrs	r3, r0, #1
  *offset = total_padding % 2;
   2364c:	f000 0001 	and.w	r0, r0, #1
   23650:	6031      	str	r1, [r6, #0]
   23652:	60f0      	str	r0, [r6, #12]
      micro_context->AllocateTempInputTensor(node, kConvInputTensor);
   23654:	6812      	ldr	r2, [r2, #0]
  data->padding = ComputePaddingHeightWidth(
   23656:	6073      	str	r3, [r6, #4]
      micro_context->AllocateTempInputTensor(node, kConvInputTensor);
   23658:	4651      	mov	r1, sl
   2365a:	4638      	mov	r0, r7
   2365c:	47c0      	blx	r8
  TF_LITE_ENSURE(context, input != nullptr);
   2365e:	4680      	mov	r8, r0
   23660:	2800      	cmp	r0, #0
   23662:	d09b      	beq.n	2359c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x18>
      micro_context->AllocateTempInputTensor(node, kConvWeightsTensor);
   23664:	4b3b      	ldr	r3, [pc, #236]	@ (23754 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d0>)
   23666:	681a      	ldr	r2, [r3, #0]
   23668:	683b      	ldr	r3, [r7, #0]
   2366a:	4651      	mov	r1, sl
   2366c:	699b      	ldr	r3, [r3, #24]
   2366e:	4638      	mov	r0, r7
   23670:	4798      	blx	r3
  TF_LITE_ENSURE(context, filter != nullptr);
   23672:	4681      	mov	r9, r0
   23674:	2800      	cmp	r0, #0
   23676:	d091      	beq.n	2359c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x18>
      micro_context->AllocateTempInputTensor(node, kConvBiasTensor);
   23678:	4b37      	ldr	r3, [pc, #220]	@ (23758 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d4>)
   2367a:	681a      	ldr	r2, [r3, #0]
   2367c:	683b      	ldr	r3, [r7, #0]
   2367e:	4651      	mov	r1, sl
   23680:	699b      	ldr	r3, [r3, #24]
   23682:	4638      	mov	r0, r7
   23684:	4798      	blx	r3
      micro_context->AllocateTempOutputTensor(node, kConvOutputTensor);
   23686:	4b35      	ldr	r3, [pc, #212]	@ (2375c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>)
      micro_context->AllocateTempInputTensor(node, kConvBiasTensor);
   23688:	900b      	str	r0, [sp, #44]	@ 0x2c
      micro_context->AllocateTempOutputTensor(node, kConvOutputTensor);
   2368a:	681a      	ldr	r2, [r3, #0]
   2368c:	683b      	ldr	r3, [r7, #0]
   2368e:	4651      	mov	r1, sl
   23690:	69db      	ldr	r3, [r3, #28]
   23692:	4638      	mov	r0, r7
   23694:	4798      	blx	r3
  TF_LITE_ENSURE(context, output != nullptr);
   23696:	4682      	mov	sl, r0
   23698:	2800      	cmp	r0, #0
   2369a:	f43f af7f 	beq.w	2359c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x18>
  if (data_type != kTfLiteFloat32) {
   2369e:	f1bb 0f01 	cmp.w	fp, #1
   236a2:	d01f      	beq.n	236e4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x160>
    int output_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
   236a4:	f8d9 3014 	ldr.w	r3, [r9, #20]
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
   236a8:	3410      	adds	r4, #16
   236aa:	691b      	ldr	r3, [r3, #16]
   236ac:	9308      	str	r3, [sp, #32]
   236ae:	e9cd a400 	strd	sl, r4, [sp]
   236b2:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
   236b4:	9307      	str	r3, [sp, #28]
   236b6:	6a73      	ldr	r3, [r6, #36]	@ 0x24
   236b8:	9306      	str	r3, [sp, #24]
   236ba:	f106 0330 	add.w	r3, r6, #48	@ 0x30
   236be:	9305      	str	r3, [sp, #20]
   236c0:	f106 032c 	add.w	r3, r6, #44	@ 0x2c
   236c4:	9304      	str	r3, [sp, #16]
   236c6:	f106 0320 	add.w	r3, r6, #32
   236ca:	9303      	str	r3, [sp, #12]
   236cc:	f106 031c 	add.w	r3, r6, #28
   236d0:	9302      	str	r3, [sp, #8]
   236d2:	4628      	mov	r0, r5
   236d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   236d6:	464a      	mov	r2, r9
   236d8:	4641      	mov	r1, r8
   236da:	f7fd fa6b 	bl	20bb4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i>
   236de:	2800      	cmp	r0, #0
   236e0:	f47f af5d 	bne.w	2359e <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a>
  micro_context->DeallocateTempTfLiteTensor(input);
   236e4:	683b      	ldr	r3, [r7, #0]
  data->input_zero_point = input->params.zero_point;
   236e6:	f8d8 200c 	ldr.w	r2, [r8, #12]
  micro_context->DeallocateTempTfLiteTensor(input);
   236ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  data->input_zero_point = input->params.zero_point;
   236ec:	6132      	str	r2, [r6, #16]
  data->filter_zero_point = filter->params.zero_point;
   236ee:	f8d9 200c 	ldr.w	r2, [r9, #12]
   236f2:	6172      	str	r2, [r6, #20]
  data->output_zero_point = output->params.zero_point;
   236f4:	f8da 200c 	ldr.w	r2, [sl, #12]
   236f8:	61b2      	str	r2, [r6, #24]
  micro_context->DeallocateTempTfLiteTensor(input);
   236fa:	4641      	mov	r1, r8
   236fc:	4638      	mov	r0, r7
   236fe:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(filter);
   23700:	683b      	ldr	r3, [r7, #0]
   23702:	4649      	mov	r1, r9
   23704:	4638      	mov	r0, r7
   23706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   23708:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(bias);
   2370a:	683b      	ldr	r3, [r7, #0]
   2370c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
   2370e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   23710:	4638      	mov	r0, r7
   23712:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
   23714:	683b      	ldr	r3, [r7, #0]
   23716:	4638      	mov	r0, r7
   23718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   2371a:	4651      	mov	r1, sl
   2371c:	4798      	blx	r3
  return kTfLiteOk;
   2371e:	2000      	movs	r0, #0
}
   23720:	b00d      	add	sp, #52	@ 0x34
   23722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return (image_size + stride - 1) / stride;
   23726:	eb0c 0103 	add.w	r1, ip, r3
   2372a:	3901      	subs	r1, #1
   2372c:	fb91 f1fc 	sdiv	r1, r1, ip
      ((out_size - 1) * stride + effective_filter_size - in_size);
   23730:	3901      	subs	r1, #1
  if (stride == 0) return 0;
   23732:	f1be 0f00 	cmp.w	lr, #0
   23736:	f43f af5d 	beq.w	235f4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x70>
      return (image_size + stride - 1) / stride;
   2373a:	9f16      	ldr	r7, [sp, #88]	@ 0x58
   2373c:	4477      	add	r7, lr
   2373e:	3f01      	subs	r7, #1
   23740:	fb97 f7fe 	sdiv	r7, r7, lr
      ((out_size - 1) * stride + effective_filter_size - in_size);
   23744:	3f01      	subs	r7, #1
      return (image_size + stride - 1) / stride;
   23746:	e76c      	b.n	23622 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x9e>
  switch (padding) {
   23748:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
   2374c:	e7f5      	b.n	2373a <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1b6>
   2374e:	bf00      	nop
   23750:	00044c54 	.word	0x00044c54
   23754:	00044c50 	.word	0x00044c50
   23758:	00044c4c 	.word	0x00044c4c
   2375c:	00044c48 	.word	0x00044c48

00023760 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>:
          /*invoke=*/invoke,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0,
          /*registration_external=*/nullptr};
   23760:	e9c0 2302 	strd	r2, r3, [r0, #8]
   23764:	6001      	str	r1, [r0, #0]
    void (*free)(TfLiteContext* context, void* buffer)) {
   23766:	9b00      	ldr	r3, [sp, #0]
          /*registration_external=*/nullptr};
   23768:	6043      	str	r3, [r0, #4]
   2376a:	2100      	movs	r1, #0
   2376c:	e9c0 1104 	strd	r1, r1, [r0, #16]
   23770:	e9c0 1106 	strd	r1, r1, [r0, #24]
   23774:	6201      	str	r1, [r0, #32]
}
   23776:	4770      	bx	lr

00023778 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:
  return context->GetEvalTensor(context, node->inputs->data[index]);
}

// Returns the TfLiteEvalTensor struct for a given input index in a node.
const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
   23778:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context != nullptr);
   2377a:	b1a8      	cbz	r0, 237a8 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x30>
  TFLITE_DCHECK(node != nullptr);
   2377c:	b1a1      	cbz	r1, 237a8 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x30>
      context, index, node->inputs->size, node->inputs->data);
   2377e:	6809      	ldr	r1, [r1, #0]
  const int tensor_index = ValidateTensorIndexing(
   23780:	468c      	mov	ip, r1
  if (index >= 0 && index < max_size) {
   23782:	2a00      	cmp	r2, #0
  const int tensor_index = ValidateTensorIndexing(
   23784:	f85c 4b04 	ldr.w	r4, [ip], #4
  if (index >= 0 && index < max_size) {
   23788:	db0c      	blt.n	237a4 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x2c>
   2378a:	42a2      	cmp	r2, r4
   2378c:	da0a      	bge.n	237a4 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x2c>
  if (tensor_index < 0) {
   2378e:	f85c 4022 	ldr.w	r4, [ip, r2, lsl #2]
   23792:	2c00      	cmp	r4, #0
   23794:	db06      	blt.n	237a4 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x2c>
  return context->GetEvalTensor(context, node->inputs->data[index]);
   23796:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  return GetMutableEvalInput(context, node, index);
}
   2379a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->GetEvalTensor(context, node->inputs->data[index]);
   2379e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
   237a0:	6849      	ldr	r1, [r1, #4]
   237a2:	4718      	bx	r3
}
   237a4:	2000      	movs	r0, #0
   237a6:	bd10      	pop	{r4, pc}
  TFLITE_DCHECK(context != nullptr);
   237a8:	f001 fdea 	bl	25380 <abort>

000237ac <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                const TfLiteNode* node, int index) {
  TFLITE_DCHECK(context != nullptr);
   237ac:	b130      	cbz	r0, 237bc <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x10>
  TFLITE_DCHECK(node != nullptr);
   237ae:	b129      	cbz	r1, 237bc <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x10>
  return context->GetEvalTensor(context, node->outputs->data[index]);
   237b0:	6849      	ldr	r1, [r1, #4]
   237b2:	6d03      	ldr	r3, [r0, #80]	@ 0x50
   237b4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   237b8:	6851      	ldr	r1, [r2, #4]
   237ba:	4718      	bx	r3
                                const TfLiteNode* node, int index) {
   237bc:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context != nullptr);
   237be:	f001 fddf 	bl	25380 <abort>
   237c2:	bf00      	nop

000237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
   237c4:	b510      	push	{r4, lr}
   237c6:	4604      	mov	r4, r0
  if (tensor == nullptr || tensor->dims == nullptr) {
   237c8:	b151      	cbz	r1, 237e0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x1c>
   237ca:	6849      	ldr	r1, [r1, #4]
   237cc:	b141      	cbz	r1, 237e0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x1c>
    return RuntimeShape();
  }
  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
   237ce:	f851 2b04 	ldr.w	r2, [r1], #4
      : size_(dimensions_count) {
   237d2:	f840 2b04 	str.w	r2, [r0], #4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   237d6:	0092      	lsls	r2, r2, #2
   237d8:	f7f4 fed2 	bl	18580 <memcpy>
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
   237dc:	4620      	mov	r0, r4
   237de:	bd10      	pop	{r4, pc}
  RuntimeShape() : size_(0) {}
   237e0:	2300      	movs	r3, #0
   237e2:	6023      	str	r3, [r4, #0]
   237e4:	4620      	mov	r0, r4
   237e6:	bd10      	pop	{r4, pc}

000237e8 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor>:
  return kTfLiteOk;
}

TfLiteEvalTensor MakeUnpackedInt4Tensor(TfLiteContext* context,
                                        int scratch_buffer_index,
                                        const TfLiteEvalTensor* tensor) {
   237e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   237ec:	461d      	mov	r5, r3
  if (tensor->type != kTfLiteInt4) {
   237ee:	7a1b      	ldrb	r3, [r3, #8]
   237f0:	2b12      	cmp	r3, #18
                                        const TfLiteEvalTensor* tensor) {
   237f2:	b087      	sub	sp, #28
   237f4:	4604      	mov	r4, r0
  if (tensor->type != kTfLiteInt4) {
   237f6:	d007      	beq.n	23808 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0x20>
    return *tensor;
   237f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   237fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tflite::tensor_utils::UnpackDenseInt4IntoInt8(
      tflite::micro::GetTensorData<int8_t>(tensor),
      tflite::micro::GetTensorShape(tensor).FlatSize(),
      tflite::micro::GetTensorData<int8_t>(&new_tensor));
  return new_tensor;
}
   23800:	4620      	mov	r0, r4
   23802:	b007      	add	sp, #28
   23804:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      context->GetScratchBuffer(context, scratch_buffer_index));
   23808:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
   2380a:	4608      	mov	r0, r1
   2380c:	4611      	mov	r1, r2
   2380e:	4798      	blx	r3
  return reinterpret_cast<const T*>(tensor->data.raw);
   23810:	e9d5 8700 	ldrd	r8, r7, [r5]
   23814:	4606      	mov	r6, r0
  if (tensor == nullptr || tensor->dims == nullptr) {
   23816:	b307      	cbz	r7, 2385a <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0x72>
  const int dims_size = dims->size;
   23818:	4639      	mov	r1, r7
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   2381a:	a801      	add	r0, sp, #4
   2381c:	f851 9b04 	ldr.w	r9, [r1], #4
   23820:	ea4f 0589 	mov.w	r5, r9, lsl #2
   23824:	462a      	mov	r2, r5
   23826:	f7f4 feab 	bl	18580 <memcpy>
    for (int i = 0; i < size_; i++) {
   2382a:	f1b9 0f00 	cmp.w	r9, #0
   2382e:	dd14      	ble.n	2385a <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0x72>
   23830:	466b      	mov	r3, sp
   23832:	195a      	adds	r2, r3, r5
    int buffer_size = 1;
   23834:	2101      	movs	r1, #1
      buffer_size *= dims_data[i];
   23836:	f853 5f04 	ldr.w	r5, [r3, #4]!
    for (int i = 0; i < size_; i++) {
   2383a:	4293      	cmp	r3, r2
      buffer_size *= dims_data[i];
   2383c:	fb05 f101 	mul.w	r1, r5, r1
    for (int i = 0; i < size_; i++) {
   23840:	d1f9      	bne.n	23836 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0x4e>
  tflite::tensor_utils::UnpackDenseInt4IntoInt8(
   23842:	4640      	mov	r0, r8
   23844:	4632      	mov	r2, r6
   23846:	f7fd f9e9 	bl	20c1c <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa>
  return new_tensor;
   2384a:	2309      	movs	r3, #9
}
   2384c:	4620      	mov	r0, r4
  return new_tensor;
   2384e:	e9c4 6700 	strd	r6, r7, [r4]
   23852:	7223      	strb	r3, [r4, #8]
}
   23854:	b007      	add	sp, #28
   23856:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    int buffer_size = 1;
   2385a:	2101      	movs	r1, #1
   2385c:	e7f1      	b.n	23842 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0x5a>
   2385e:	bf00      	nop

00023860 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  PadParams params;
  int32_t output_zero_point;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   23860:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   23862:	b10b      	cbz	r3, 23868 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x8>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
   23864:	2138      	movs	r1, #56	@ 0x38
   23866:	4718      	bx	r3
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   23868:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   2386a:	f001 fd89 	bl	25380 <abort>
   2386e:	bf00      	nop

00023870 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode>:
  return kTfLiteOk;
}

}  // namespace

TfLiteStatus PadPrepare(TfLiteContext* context, TfLiteNode* node) {
   23870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  MicroContext* micro_context = GetMicroContext(context);

  TFLITE_DCHECK(node->user_data != nullptr);
   23874:	68cc      	ldr	r4, [r1, #12]
   23876:	6885      	ldr	r5, [r0, #8]
TfLiteStatus PadPrepare(TfLiteContext* context, TfLiteNode* node) {
   23878:	b08d      	sub	sp, #52	@ 0x34
  TFLITE_DCHECK(node->user_data != nullptr);
   2387a:	2c00      	cmp	r4, #0
   2387c:	f000 812c 	beq.w	23ad8 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x268>
  return node->inputs == nullptr ? 0 : node->inputs->size;
   23880:	680b      	ldr	r3, [r1, #0]
   23882:	4689      	mov	r9, r1
   23884:	b11b      	cbz	r3, 2388e <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
  OpData* data = static_cast<OpData*>(node->user_data);

  TF_LITE_ENSURE(context, NumInputs(node) == 2 || NumInputs(node) == 3);
   23886:	681b      	ldr	r3, [r3, #0]
   23888:	3b02      	subs	r3, #2
   2388a:	2b01      	cmp	r3, #1
   2388c:	d903      	bls.n	23896 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x26>
   2388e:	2001      	movs	r0, #1
    micro_context->DeallocateTempTfLiteTensor(constant_values);
  }
  micro_context->DeallocateTempTfLiteTensor(output);

  return kTfLiteOk;
}
   23890:	b00d      	add	sp, #52	@ 0x34
   23892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return node->outputs == nullptr ? 0 : node->outputs->size;
   23896:	684b      	ldr	r3, [r1, #4]
   23898:	2b00      	cmp	r3, #0
   2389a:	d0f8      	beq.n	2388e <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
   2389c:	681e      	ldr	r6, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   2389e:	2e01      	cmp	r6, #1
   238a0:	d1f5      	bne.n	2388e <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
      micro_context->AllocateTempInputTensor(node, /*index=*/0);
   238a2:	682b      	ldr	r3, [r5, #0]
   238a4:	2200      	movs	r2, #0
   238a6:	699b      	ldr	r3, [r3, #24]
   238a8:	4628      	mov	r0, r5
   238aa:	4798      	blx	r3
  TF_LITE_ENSURE(context, input != nullptr);
   238ac:	4607      	mov	r7, r0
   238ae:	2800      	cmp	r0, #0
   238b0:	d0ed      	beq.n	2388e <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
      micro_context->AllocateTempInputTensor(node, /*index=*/1);
   238b2:	682b      	ldr	r3, [r5, #0]
   238b4:	4632      	mov	r2, r6
   238b6:	699b      	ldr	r3, [r3, #24]
   238b8:	4649      	mov	r1, r9
   238ba:	4628      	mov	r0, r5
   238bc:	4798      	blx	r3
  TF_LITE_ENSURE(context, paddings != nullptr);
   238be:	4680      	mov	r8, r0
   238c0:	2800      	cmp	r0, #0
   238c2:	d0e4      	beq.n	2388e <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
  return node->inputs == nullptr ? 0 : node->inputs->size;
   238c4:	f8d9 a000 	ldr.w	sl, [r9]
   238c8:	f1ba 0f00 	cmp.w	sl, #0
   238cc:	d006      	beq.n	238dc <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x6c>
          ? micro_context->AllocateTempInputTensor(node, /*index=*/2)
   238ce:	f8da 3000 	ldr.w	r3, [sl]
   238d2:	2b03      	cmp	r3, #3
   238d4:	f000 8081 	beq.w	239da <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x16a>
   238d8:	f04f 0a00 	mov.w	sl, #0
      micro_context->AllocateTempOutputTensor(node, /*index=*/0);
   238dc:	682b      	ldr	r3, [r5, #0]
   238de:	4649      	mov	r1, r9
   238e0:	69db      	ldr	r3, [r3, #28]
   238e2:	2200      	movs	r2, #0
   238e4:	4628      	mov	r0, r5
   238e6:	4798      	blx	r3
  TF_LITE_ENSURE(context, output != nullptr);
   238e8:	4681      	mov	r9, r0
   238ea:	2800      	cmp	r0, #0
   238ec:	d0cf      	beq.n	2388e <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
  TF_LITE_ENSURE_EQ(context, input->type, output->type);
   238ee:	7f3b      	ldrb	r3, [r7, #28]
   238f0:	7f02      	ldrb	r2, [r0, #28]
   238f2:	429a      	cmp	r2, r3
   238f4:	d1cb      	bne.n	2388e <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   238f6:	697a      	ldr	r2, [r7, #20]
   238f8:	9201      	str	r2, [sp, #4]
   238fa:	6812      	ldr	r2, [r2, #0]
   238fc:	9202      	str	r2, [sp, #8]
  TF_LITE_ENSURE(context, NumDimensions(input) <=
   238fe:	2a05      	cmp	r2, #5
   23900:	dcc5      	bgt.n	2388e <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
  if (constant_values != nullptr) {
   23902:	f1ba 0f00 	cmp.w	sl, #0
   23906:	d021      	beq.n	2394c <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0xdc>
    TF_LITE_ENSURE_EQ(context, input->type, constant_values->type);
   23908:	f89a 201c 	ldrb.w	r2, [sl, #28]
   2390c:	429a      	cmp	r2, r3
   2390e:	d1be      	bne.n	2388e <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
  return NumElements(t->dims);
   23910:	f8da 2014 	ldr.w	r2, [sl, #20]
  for (int i = 0; i < dims->size; ++i) {
   23914:	f8d2 b000 	ldr.w	fp, [r2]
   23918:	f1bb 0f00 	cmp.w	fp, #0
   2391c:	dd16      	ble.n	2394c <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0xdc>
  int64_t count = 1;
   2391e:	2000      	movs	r0, #0
   23920:	4696      	mov	lr, r2
   23922:	2101      	movs	r1, #1
  for (int i = 0; i < dims->size; ++i) {
   23924:	4684      	mov	ip, r0
   23926:	9403      	str	r4, [sp, #12]
    count *= dims->data[i];
   23928:	f85e 4f04 	ldr.w	r4, [lr, #4]!
   2392c:	17e2      	asrs	r2, r4, #31
   2392e:	fb01 f202 	mul.w	r2, r1, r2
  for (int i = 0; i < dims->size; ++i) {
   23932:	f10c 0c01 	add.w	ip, ip, #1
    count *= dims->data[i];
   23936:	fb04 2200 	mla	r2, r4, r0, r2
  for (int i = 0; i < dims->size; ++i) {
   2393a:	45dc      	cmp	ip, fp
    count *= dims->data[i];
   2393c:	fba1 1004 	umull	r1, r0, r1, r4
   23940:	4410      	add	r0, r2
  for (int i = 0; i < dims->size; ++i) {
   23942:	d1f1      	bne.n	23928 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0xb8>
    TF_LITE_ENSURE_EQ(context, NumElements(constant_values), 1);
   23944:	3901      	subs	r1, #1
   23946:	4301      	orrs	r1, r0
   23948:	9c03      	ldr	r4, [sp, #12]
   2394a:	d1a0      	bne.n	2388e <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
   2394c:	f8d8 1014 	ldr.w	r1, [r8, #20]
   23950:	9304      	str	r3, [sp, #16]
   23952:	f851 bb04 	ldr.w	fp, [r1], #4
   23956:	9105      	str	r1, [sp, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   23958:	ea4f 038b 	mov.w	r3, fp, lsl #2
   2395c:	a807      	add	r0, sp, #28
   2395e:	461a      	mov	r2, r3
   23960:	9303      	str	r3, [sp, #12]
   23962:	f7f4 fe0d 	bl	18580 <memcpy>
    for (int i = 0; i < size_; i++) {
   23966:	f1bb 0f00 	cmp.w	fp, #0
   2396a:	dd90      	ble.n	2388e <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
   2396c:	9b03      	ldr	r3, [sp, #12]
   2396e:	3318      	adds	r3, #24
   23970:	eb0d 0c03 	add.w	ip, sp, r3
    int buffer_size = 1;
   23974:	9b04      	ldr	r3, [sp, #16]
   23976:	aa06      	add	r2, sp, #24
   23978:	2001      	movs	r0, #1
      buffer_size *= dims_data[i];
   2397a:	f852 1f04 	ldr.w	r1, [r2, #4]!
    for (int i = 0; i < size_; i++) {
   2397e:	4562      	cmp	r2, ip
      buffer_size *= dims_data[i];
   23980:	fb01 f000 	mul.w	r0, r1, r0
    for (int i = 0; i < size_; i++) {
   23984:	d1f9      	bne.n	2397a <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x10a>
  TF_LITE_ENSURE_EQ(context, GetTensorShape(paddings).FlatSize(),
   23986:	f8d9 1014 	ldr.w	r1, [r9, #20]
   2398a:	680a      	ldr	r2, [r1, #0]
   2398c:	9204      	str	r2, [sp, #16]
   2398e:	ebb0 0f42 	cmp.w	r0, r2, lsl #1
   23992:	f47f af7c 	bne.w	2388e <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
  TF_LITE_ENSURE(context, IsConstantTensor(paddings));
   23996:	f898 201d 	ldrb.w	r2, [r8, #29]
   2399a:	2a01      	cmp	r2, #1
   2399c:	f47f af77 	bne.w	2388e <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
  for (int i = 0; i < output->dims->size; i++) {
   239a0:	9804      	ldr	r0, [sp, #16]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   239a2:	f8d8 b010 	ldr.w	fp, [r8, #16]
   239a6:	2800      	cmp	r0, #0
   239a8:	dd21      	ble.n	239ee <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x17e>
   239aa:	f8dd e004 	ldr.w	lr, [sp, #4]
   239ae:	9304      	str	r3, [sp, #16]
   239b0:	2200      	movs	r2, #0
   239b2:	f10b 0c04 	add.w	ip, fp, #4
   239b6:	9401      	str	r4, [sp, #4]
   239b8:	e002      	b.n	239c0 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x150>
   239ba:	3201      	adds	r2, #1
   239bc:	4290      	cmp	r0, r2
   239be:	d014      	beq.n	239ea <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x17a>
        input->dims->data[i] + paddings_data[i * 2] + paddings_data[i * 2 + 1];
   239c0:	f85b 3032 	ldr.w	r3, [fp, r2, lsl #3]
   239c4:	f85e 4f04 	ldr.w	r4, [lr, #4]!
   239c8:	441c      	add	r4, r3
    int expected_dim =
   239ca:	f85c 3032 	ldr.w	r3, [ip, r2, lsl #3]
   239ce:	4423      	add	r3, r4
    TF_LITE_ENSURE_EQ(context, output_dim, expected_dim);
   239d0:	f851 4f04 	ldr.w	r4, [r1, #4]!
   239d4:	429c      	cmp	r4, r3
   239d6:	d0f0      	beq.n	239ba <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x14a>
   239d8:	e759      	b.n	2388e <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
          ? micro_context->AllocateTempInputTensor(node, /*index=*/2)
   239da:	682b      	ldr	r3, [r5, #0]
   239dc:	2202      	movs	r2, #2
   239de:	699b      	ldr	r3, [r3, #24]
   239e0:	4649      	mov	r1, r9
   239e2:	4628      	mov	r0, r5
   239e4:	4798      	blx	r3
   239e6:	4682      	mov	sl, r0
   239e8:	e778      	b.n	238dc <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x6c>
   239ea:	9c01      	ldr	r4, [sp, #4]
   239ec:	9b04      	ldr	r3, [sp, #16]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   239ee:	9905      	ldr	r1, [sp, #20]
   239f0:	9301      	str	r3, [sp, #4]
  data->params.resizing_category = ResizingCategory::kGenericResize;
   239f2:	2202      	movs	r2, #2
   239f4:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
   239f8:	a807      	add	r0, sp, #28
   239fa:	9a03      	ldr	r2, [sp, #12]
   239fc:	f7f4 fdc0 	bl	18580 <memcpy>
    for (int i = 0; i < size_; i++) {
   23a00:	9903      	ldr	r1, [sp, #12]
   23a02:	9b01      	ldr	r3, [sp, #4]
   23a04:	aa06      	add	r2, sp, #24
   23a06:	4411      	add	r1, r2
      buffer_size *= dims_data[i];
   23a08:	f852 0f04 	ldr.w	r0, [r2, #4]!
    for (int i = 0; i < size_; i++) {
   23a0c:	4291      	cmp	r1, r2
      buffer_size *= dims_data[i];
   23a0e:	fb00 f606 	mul.w	r6, r0, r6
    for (int i = 0; i < size_; i++) {
   23a12:	d1f9      	bne.n	23a08 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x198>
  if (paddings_total == 8 && (paddings_data[0] == 0 && paddings_data[1] == 0) &&
   23a14:	2e08      	cmp	r6, #8
   23a16:	d046      	beq.n	23aa6 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x236>
  data->params.left_padding_count = num_input_dimensions;
   23a18:	9902      	ldr	r1, [sp, #8]
   23a1a:	b24a      	sxtb	r2, r1
  for (int idx = num_input_dimensions - 1; idx >= 0; --idx) {
   23a1c:	2900      	cmp	r1, #0
  data->params.left_padding_count = num_input_dimensions;
   23a1e:	7022      	strb	r2, [r4, #0]
  data->params.right_padding_count = num_input_dimensions;
   23a20:	7622      	strb	r2, [r4, #24]
  for (int idx = num_input_dimensions - 1; idx >= 0; --idx) {
   23a22:	dd0f      	ble.n	23a44 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1d4>
   23a24:	9a02      	ldr	r2, [sp, #8]
   23a26:	eb0b 0bc2 	add.w	fp, fp, r2, lsl #3
   23a2a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    data->params.left_padding[idx] = paddings_data[idx * 2];
   23a2e:	f85b 1c08 	ldr.w	r1, [fp, #-8]
   23a32:	f842 1904 	str.w	r1, [r2], #-4
    data->params.right_padding[idx] = paddings_data[idx * 2 + 1];
   23a36:	f85b 1c04 	ldr.w	r1, [fp, #-4]
   23a3a:	61d1      	str	r1, [r2, #28]
  for (int idx = num_input_dimensions - 1; idx >= 0; --idx) {
   23a3c:	4294      	cmp	r4, r2
   23a3e:	f1ab 0b08 	sub.w	fp, fp, #8
   23a42:	d1f4      	bne.n	23a2e <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1be>
  if (input->type == kTfLiteInt8) {
   23a44:	2b09      	cmp	r3, #9
   23a46:	d018      	beq.n	23a7a <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x20a>
  micro_context->DeallocateTempTfLiteTensor(input);
   23a48:	682b      	ldr	r3, [r5, #0]
   23a4a:	4639      	mov	r1, r7
   23a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   23a4e:	4628      	mov	r0, r5
   23a50:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(paddings);
   23a52:	682b      	ldr	r3, [r5, #0]
   23a54:	4641      	mov	r1, r8
   23a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   23a58:	4628      	mov	r0, r5
   23a5a:	4798      	blx	r3
  if (constant_values != nullptr) {
   23a5c:	f1ba 0f00 	cmp.w	sl, #0
   23a60:	d004      	beq.n	23a6c <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1fc>
    micro_context->DeallocateTempTfLiteTensor(constant_values);
   23a62:	682b      	ldr	r3, [r5, #0]
   23a64:	4651      	mov	r1, sl
   23a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   23a68:	4628      	mov	r0, r5
   23a6a:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
   23a6c:	682b      	ldr	r3, [r5, #0]
   23a6e:	4628      	mov	r0, r5
   23a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   23a72:	4649      	mov	r1, r9
   23a74:	4798      	blx	r3
  return kTfLiteOk;
   23a76:	2000      	movs	r0, #0
   23a78:	e70a      	b.n	23890 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x20>
      TF_LITE_ENSURE(context, output->params.zero_point >=
   23a7a:	f8d9 300c 	ldr.w	r3, [r9, #12]
    if (constant_values == nullptr) {
   23a7e:	f1ba 0f00 	cmp.w	sl, #0
   23a82:	d024      	beq.n	23ace <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x25e>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point,
   23a84:	f8da 200c 	ldr.w	r2, [sl, #12]
   23a88:	429a      	cmp	r2, r3
   23a8a:	f47f af00 	bne.w	2388e <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
      TF_LITE_ENSURE_EQ(context, static_cast<double>(output->params.scale),
   23a8e:	ed99 7a02 	vldr	s14, [r9, #8]
   23a92:	edda 7a02 	vldr	s15, [sl, #8]
   23a96:	eeb4 7a67 	vcmp.f32	s14, s15
   23a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   23a9e:	f47f aef6 	bne.w	2388e <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
    data->output_zero_point = output->params.zero_point;
   23aa2:	6363      	str	r3, [r4, #52]	@ 0x34
   23aa4:	e7d0      	b.n	23a48 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1d8>
  if (paddings_total == 8 && (paddings_data[0] == 0 && paddings_data[1] == 0) &&
   23aa6:	f8db 2000 	ldr.w	r2, [fp]
   23aaa:	2a00      	cmp	r2, #0
   23aac:	d1b4      	bne.n	23a18 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1a8>
   23aae:	f8db 2004 	ldr.w	r2, [fp, #4]
   23ab2:	2a00      	cmp	r2, #0
   23ab4:	d1b0      	bne.n	23a18 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1a8>
   23ab6:	f8db 2018 	ldr.w	r2, [fp, #24]
   23aba:	2a00      	cmp	r2, #0
   23abc:	d1ac      	bne.n	23a18 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1a8>
      (paddings_data[6] == 0 && paddings_data[7] == 0)) {
   23abe:	f8db 201c 	ldr.w	r2, [fp, #28]
   23ac2:	2a00      	cmp	r2, #0
   23ac4:	d1a8      	bne.n	23a18 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1a8>
    data->params.resizing_category = ResizingCategory::kImageStyle;
   23ac6:	2201      	movs	r2, #1
   23ac8:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
   23acc:	e7a4      	b.n	23a18 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1a8>
      TF_LITE_ENSURE(context, output->params.zero_point >=
   23ace:	f103 0280 	add.w	r2, r3, #128	@ 0x80
   23ad2:	2aff      	cmp	r2, #255	@ 0xff
   23ad4:	d9e5      	bls.n	23aa2 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x232>
   23ad6:	e6da      	b.n	2388e <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
  TFLITE_DCHECK(node->user_data != nullptr);
   23ad8:	f001 fc52 	bl	25380 <abort>

00023adc <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0>:
// value.
//
// Note that two typenames are required, so that T=P=int32_t is considered a
// specialization distinct from P=int32_t.
template <typename T, typename P>
inline void PadImpl(const tflite::PadParams& op_params,
   23adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23ae0:	b0a7      	sub	sp, #156	@ 0x9c
   23ae2:	461c      	mov	r4, r3
   23ae4:	9209      	str	r2, [sp, #36]	@ 0x24
  int32_t DimensionsCount() const { return size_; }
   23ae6:	680a      	ldr	r2, [r1, #0]
   23ae8:	9e30      	ldr	r6, [sp, #192]	@ 0xc0
   23aea:	f8dd b0c4 	ldr.w	fp, [sp, #196]	@ 0xc4
      : size_(new_shape_size) {
   23aee:	2305      	movs	r3, #5
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   23af0:	429a      	cmp	r2, r3
      : size_(new_shape_size) {
   23af2:	931a      	str	r3, [sp, #104]	@ 0x68
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   23af4:	f300 80f4 	bgt.w	23ce0 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x204>
    for (int i = 0; i < size_increase; ++i) {
   23af8:	4605      	mov	r5, r0
   23afa:	f1d2 0005 	rsbs	r0, r2, #5
   23afe:	d00c      	beq.n	23b1a <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x3e>
   23b00:	af1a      	add	r7, sp, #104	@ 0x68
   23b02:	2300      	movs	r3, #0
    dims_[i] = val;
   23b04:	f04f 0c01 	mov.w	ip, #1
   23b08:	e002      	b.n	23b10 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x34>
    TFLITE_DCHECK_LT(i, size_);
   23b0a:	2b05      	cmp	r3, #5
   23b0c:	f000 80e8 	beq.w	23ce0 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x204>
    for (int i = 0; i < size_increase; ++i) {
   23b10:	3301      	adds	r3, #1
   23b12:	4298      	cmp	r0, r3
    dims_[i] = val;
   23b14:	f847 cf04 	str.w	ip, [r7, #4]!
    for (int i = 0; i < size_increase; ++i) {
   23b18:	d1f7      	bne.n	23b0a <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x2e>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   23b1a:	ab1b      	add	r3, sp, #108	@ 0x6c
   23b1c:	0092      	lsls	r2, r2, #2
   23b1e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   23b22:	3104      	adds	r1, #4
   23b24:	f7f4 fd2c 	bl	18580 <memcpy>
  int32_t DimensionsCount() const { return size_; }
   23b28:	6832      	ldr	r2, [r6, #0]
      : size_(new_shape_size) {
   23b2a:	2305      	movs	r3, #5
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   23b2c:	429a      	cmp	r2, r3
      : size_(new_shape_size) {
   23b2e:	9320      	str	r3, [sp, #128]	@ 0x80
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   23b30:	f300 80d6 	bgt.w	23ce0 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x204>
    for (int i = 0; i < size_increase; ++i) {
   23b34:	f1d2 0005 	rsbs	r0, r2, #5
   23b38:	d00b      	beq.n	23b52 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x76>
   23b3a:	a920      	add	r1, sp, #128	@ 0x80
   23b3c:	2300      	movs	r3, #0
    dims_[i] = val;
   23b3e:	2701      	movs	r7, #1
   23b40:	e002      	b.n	23b48 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x6c>
    TFLITE_DCHECK_LT(i, size_);
   23b42:	2b05      	cmp	r3, #5
   23b44:	f000 80cc 	beq.w	23ce0 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x204>
    for (int i = 0; i < size_increase; ++i) {
   23b48:	3301      	adds	r3, #1
   23b4a:	4298      	cmp	r0, r3
    dims_[i] = val;
   23b4c:	f841 7f04 	str.w	r7, [r1, #4]!
    for (int i = 0; i < size_increase; ++i) {
   23b50:	d1f7      	bne.n	23b42 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x66>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   23b52:	ab21      	add	r3, sp, #132	@ 0x84
   23b54:	0092      	lsls	r2, r2, #2
   23b56:	1d31      	adds	r1, r6, #4
   23b58:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   23b5c:	f7f4 fd10 	bl	18580 <memcpy>
                    T* output_data) {
  const RuntimeShape ext_input_shape =
      RuntimeShape::ExtendedShape(PadKernelMaxDimensionCount(), input_shape);
  const RuntimeShape ext_output_shape =
      RuntimeShape::ExtendedShape(PadKernelMaxDimensionCount(), output_shape);
  TFLITE_DCHECK_LE(op_params.left_padding_count, PadKernelMaxDimensionCount());
   23b60:	f995 2000 	ldrsb.w	r2, [r5]
   23b64:	2a05      	cmp	r2, #5
   23b66:	f300 80bb 	bgt.w	23ce0 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x204>
  TFLITE_DCHECK_LE(op_params.right_padding_count, PadKernelMaxDimensionCount());
   23b6a:	f995 6018 	ldrsb.w	r6, [r5, #24]
   23b6e:	2e05      	cmp	r6, #5
   23b70:	f300 80b6 	bgt.w	23ce0 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x204>

  // Runtime calls are currently fixed at 5 dimensions. Copy inputs so we can
  // pad them to 5 dims (yes, we are "padding the padding").
  int left_padding_copy[PadKernelMaxDimensionCount()];
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
    left_padding_copy[i] = 0;
   23b74:	2300      	movs	r3, #0
   23b76:	2000      	movs	r0, #0
   23b78:	2100      	movs	r1, #0
  }
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   23b7a:	429a      	cmp	r2, r3
    left_padding_copy[i] = 0;
   23b7c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
   23b80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
   23b84:	9312      	str	r3, [sp, #72]	@ 0x48
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   23b86:	dd08      	ble.n	23b9a <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0xbe>
    left_padding_copy[i + PadKernelMaxDimensionCount() -
                      op_params.left_padding_count] = op_params.left_padding[i];
   23b88:	f1c2 0005 	rsb	r0, r2, #5
   23b8c:	ab0e      	add	r3, sp, #56	@ 0x38
   23b8e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   23b92:	0092      	lsls	r2, r2, #2
   23b94:	1d29      	adds	r1, r5, #4
   23b96:	f7f4 fcf3 	bl	18580 <memcpy>
  }
  int right_padding_copy[PadKernelMaxDimensionCount()];
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
    right_padding_copy[i] = 0;
   23b9a:	2300      	movs	r3, #0
   23b9c:	2200      	movs	r2, #0
   23b9e:	9318      	str	r3, [sp, #96]	@ 0x60
  }
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   23ba0:	2e00      	cmp	r6, #0
    right_padding_copy[i] = 0;
   23ba2:	f04f 0300 	mov.w	r3, #0
   23ba6:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
   23baa:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   23bae:	dd09      	ble.n	23bc4 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0xe8>
    right_padding_copy[i + PadKernelMaxDimensionCount() -
                       op_params.right_padding_count] =
   23bb0:	f1c6 0005 	rsb	r0, r6, #5
   23bb4:	ab14      	add	r3, sp, #80	@ 0x50
   23bb6:	f105 011c 	add.w	r1, r5, #28
   23bba:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   23bbe:	00b2      	lsls	r2, r6, #2
   23bc0:	f7f4 fcde 	bl	18580 <memcpy>
    TFLITE_DCHECK_LT(i, size_);
   23bc4:	9920      	ldr	r1, [sp, #128]	@ 0x80
   23bc6:	2900      	cmp	r1, #0
   23bc8:	f340 808a 	ble.w	23ce0 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x204>
   23bcc:	2901      	cmp	r1, #1
    return dims_[i];
   23bce:	9e21      	ldr	r6, [sp, #132]	@ 0x84
    TFLITE_DCHECK_LT(i, size_);
   23bd0:	f000 8086 	beq.w	23ce0 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x204>
   23bd4:	2902      	cmp	r1, #2
    return dims_[i];
   23bd6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
    TFLITE_DCHECK_LT(i, size_);
   23bd8:	f000 8082 	beq.w	23ce0 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x204>
   23bdc:	2903      	cmp	r1, #3
    return dims_[i];
   23bde:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
    TFLITE_DCHECK_LT(i, size_);
   23be0:	d07e      	beq.n	23ce0 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x204>
   23be2:	2904      	cmp	r1, #4
    return dims_[i];
   23be4:	f8dd a090 	ldr.w	sl, [sp, #144]	@ 0x90
    TFLITE_DCHECK_LT(i, size_);
   23be8:	d07a      	beq.n	23ce0 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x204>
  const int output_width = ext_output_shape.Dims(3);
  const int output_depth = ext_output_shape.Dims(4);

  const int left_b_padding = left_padding_copy[0];
  const int left_p_padding = left_padding_copy[1];
  const int left_h_padding = left_padding_copy[2];
   23bea:	9910      	ldr	r1, [sp, #64]	@ 0x40
   23bec:	9102      	str	r1, [sp, #8]
  const int left_w_padding = left_padding_copy[3];
   23bee:	9911      	ldr	r1, [sp, #68]	@ 0x44
   23bf0:	9105      	str	r1, [sp, #20]
  const int left_d_padding = left_padding_copy[4];
   23bf2:	9912      	ldr	r1, [sp, #72]	@ 0x48
   23bf4:	9108      	str	r1, [sp, #32]

  const int right_b_padding = right_padding_copy[0];
  const int right_p_padding = right_padding_copy[1];
   23bf6:	e9dd 5114 	ldrd	r5, r1, [sp, #80]	@ 0x50
   23bfa:	910a      	str	r1, [sp, #40]	@ 0x28
  const int right_h_padding = right_padding_copy[2];
  const int right_w_padding = right_padding_copy[3];
   23bfc:	e9dd 1016 	ldrd	r1, r0, [sp, #88]	@ 0x58

  const T pad_value = *pad_value_ptr;

  const T* in_ptr = input_data;
  T* out_ptr = output_data;
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   23c00:	2e00      	cmp	r6, #0
  const int right_w_padding = right_padding_copy[3];
   23c02:	9007      	str	r0, [sp, #28]
  const int right_d_padding = right_padding_copy[4];
   23c04:	9818      	ldr	r0, [sp, #96]	@ 0x60
    return dims_[i];
   23c06:	f8dd c094 	ldr.w	ip, [sp, #148]	@ 0x94
   23c0a:	900b      	str	r0, [sp, #44]	@ 0x2c
  const int left_p_padding = left_padding_copy[1];
   23c0c:	e9dd e90e 	ldrd	lr, r9, [sp, #56]	@ 0x38
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   23c10:	dd63      	ble.n	23cda <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1fe>
    for (int out_p = 0; out_p < output_plane; ++out_p) {
      for (int out_h = 0; out_h < output_height; ++out_h) {
        for (int out_w = 0; out_w < output_width; ++out_w) {
          for (int out_d = 0; out_d < output_depth; ++out_d) {
            if (out_b < left_b_padding ||
                out_b >= output_batch - right_b_padding ||
   23c12:	1b75      	subs	r5, r6, r5
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   23c14:	2000      	movs	r0, #0
    for (int out_p = 0; out_p < output_plane; ++out_p) {
   23c16:	2b00      	cmp	r3, #0
   23c18:	dd5c      	ble.n	23cd4 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1f8>
                out_p < left_p_padding ||
                out_p >= output_plane - right_p_padding ||
   23c1a:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
    for (int out_p = 0; out_p < output_plane; ++out_p) {
   23c1c:	f04f 0800 	mov.w	r8, #0
                out_p >= output_plane - right_p_padding ||
   23c20:	1bdf      	subs	r7, r3, r7
   23c22:	9701      	str	r7, [sp, #4]
   23c24:	4647      	mov	r7, r8
      for (int out_h = 0; out_h < output_height; ++out_h) {
   23c26:	2a00      	cmp	r2, #0
   23c28:	dd51      	ble.n	23cce <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1f2>
   23c2a:	e9cd 630c 	strd	r6, r3, [sp, #48]	@ 0x30
   23c2e:	f04f 0800 	mov.w	r8, #0
   23c32:	9106      	str	r1, [sp, #24]
        for (int out_w = 0; out_w < output_width; ++out_w) {
   23c34:	f1ba 0f00 	cmp.w	sl, #0
   23c38:	dd42      	ble.n	23cc0 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1e4>
                out_h < left_h_padding ||
                out_h >= output_height - right_h_padding ||
   23c3a:	9b06      	ldr	r3, [sp, #24]
   23c3c:	1ad3      	subs	r3, r2, r3
   23c3e:	e9cd 3203 	strd	r3, r2, [sp, #12]
        for (int out_w = 0; out_w < output_width; ++out_w) {
   23c42:	2600      	movs	r6, #0
          for (int out_d = 0; out_d < output_depth; ++out_d) {
   23c44:	f1bc 0f00 	cmp.w	ip, #0
   23c48:	dd36      	ble.n	23cb8 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1dc>
   23c4a:	f10b 32ff 	add.w	r2, fp, #4294967295	@ 0xffffffff
   23c4e:	2300      	movs	r3, #0
   23c50:	9600      	str	r6, [sp, #0]
   23c52:	e027      	b.n	23ca4 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1c8>
            if (out_b < left_b_padding ||
   23c54:	4285      	cmp	r5, r0
   23c56:	dd27      	ble.n	23ca8 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1cc>
                out_b >= output_batch - right_b_padding ||
   23c58:	45b9      	cmp	r9, r7
   23c5a:	dc25      	bgt.n	23ca8 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1cc>
                out_p < left_p_padding ||
   23c5c:	9901      	ldr	r1, [sp, #4]
   23c5e:	42b9      	cmp	r1, r7
   23c60:	dd22      	ble.n	23ca8 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1cc>
                out_p >= output_plane - right_p_padding ||
   23c62:	9902      	ldr	r1, [sp, #8]
   23c64:	4541      	cmp	r1, r8
   23c66:	dc1f      	bgt.n	23ca8 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1cc>
                out_h < left_h_padding ||
   23c68:	9903      	ldr	r1, [sp, #12]
   23c6a:	4541      	cmp	r1, r8
   23c6c:	dd1c      	ble.n	23ca8 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1cc>
                out_h >= output_height - right_h_padding ||
   23c6e:	9905      	ldr	r1, [sp, #20]
   23c70:	9e00      	ldr	r6, [sp, #0]
   23c72:	428e      	cmp	r6, r1
   23c74:	db18      	blt.n	23ca8 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1cc>
                out_w < left_w_padding ||
                out_w >= output_width - right_w_padding ||
   23c76:	9907      	ldr	r1, [sp, #28]
   23c78:	ebaa 0101 	sub.w	r1, sl, r1
                out_w < left_w_padding ||
   23c7c:	428e      	cmp	r6, r1
   23c7e:	da13      	bge.n	23ca8 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1cc>
                out_w >= output_width - right_w_padding ||
   23c80:	9908      	ldr	r1, [sp, #32]
   23c82:	4299      	cmp	r1, r3
   23c84:	dc10      	bgt.n	23ca8 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1cc>
                out_d < left_d_padding ||
                out_d >= output_depth - right_d_padding) {
   23c86:	990b      	ldr	r1, [sp, #44]	@ 0x2c
   23c88:	ebac 0101 	sub.w	r1, ip, r1
                out_d < left_d_padding ||
   23c8c:	4299      	cmp	r1, r3
   23c8e:	dd0b      	ble.n	23ca8 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1cc>
              *out_ptr++ = pad_value;
            } else {
              *out_ptr++ = *in_ptr++;
   23c90:	9909      	ldr	r1, [sp, #36]	@ 0x24
   23c92:	460e      	mov	r6, r1
          for (int out_d = 0; out_d < output_depth; ++out_d) {
   23c94:	3301      	adds	r3, #1
              *out_ptr++ = *in_ptr++;
   23c96:	f916 1b01 	ldrsb.w	r1, [r6], #1
   23c9a:	f802 1f01 	strb.w	r1, [r2, #1]!
          for (int out_d = 0; out_d < output_depth; ++out_d) {
   23c9e:	459c      	cmp	ip, r3
              *out_ptr++ = *in_ptr++;
   23ca0:	9609      	str	r6, [sp, #36]	@ 0x24
          for (int out_d = 0; out_d < output_depth; ++out_d) {
   23ca2:	d007      	beq.n	23cb4 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1d8>
            if (out_b < left_b_padding ||
   23ca4:	4586      	cmp	lr, r0
   23ca6:	ddd5      	ble.n	23c54 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x178>
          for (int out_d = 0; out_d < output_depth; ++out_d) {
   23ca8:	3301      	adds	r3, #1
              *out_ptr++ = pad_value;
   23caa:	4621      	mov	r1, r4
          for (int out_d = 0; out_d < output_depth; ++out_d) {
   23cac:	459c      	cmp	ip, r3
   23cae:	f802 1f01 	strb.w	r1, [r2, #1]!
   23cb2:	d1f7      	bne.n	23ca4 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1c8>
   23cb4:	9e00      	ldr	r6, [sp, #0]
   23cb6:	44e3      	add	fp, ip
        for (int out_w = 0; out_w < output_width; ++out_w) {
   23cb8:	3601      	adds	r6, #1
   23cba:	45b2      	cmp	sl, r6
   23cbc:	d1c2      	bne.n	23c44 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x168>
   23cbe:	9a04      	ldr	r2, [sp, #16]
      for (int out_h = 0; out_h < output_height; ++out_h) {
   23cc0:	f108 0801 	add.w	r8, r8, #1
   23cc4:	4542      	cmp	r2, r8
   23cc6:	d1b5      	bne.n	23c34 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x158>
   23cc8:	e9dd 630c 	ldrd	r6, r3, [sp, #48]	@ 0x30
   23ccc:	9906      	ldr	r1, [sp, #24]
    for (int out_p = 0; out_p < output_plane; ++out_p) {
   23cce:	3701      	adds	r7, #1
   23cd0:	42bb      	cmp	r3, r7
   23cd2:	d1a8      	bne.n	23c26 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x14a>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   23cd4:	3001      	adds	r0, #1
   23cd6:	4286      	cmp	r6, r0
   23cd8:	d19d      	bne.n	23c16 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x13a>
          }
        }
      }
    }
  }
}
   23cda:	b027      	add	sp, #156	@ 0x9c
   23cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   23ce0:	f001 fb4e 	bl	25380 <abort>

00023ce4 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0>:
inline void PadImpl(const tflite::PadParams& op_params,
   23ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23ce8:	ed2d 8b02 	vpush	{d8}
   23cec:	b0a7      	sub	sp, #156	@ 0x9c
   23cee:	461d      	mov	r5, r3
   23cf0:	9209      	str	r2, [sp, #36]	@ 0x24
  int32_t DimensionsCount() const { return size_; }
   23cf2:	680a      	ldr	r2, [r1, #0]
   23cf4:	9e32      	ldr	r6, [sp, #200]	@ 0xc8
      : size_(new_shape_size) {
   23cf6:	2305      	movs	r3, #5
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   23cf8:	429a      	cmp	r2, r3
      : size_(new_shape_size) {
   23cfa:	931a      	str	r3, [sp, #104]	@ 0x68
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   23cfc:	f300 80f4 	bgt.w	23ee8 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x204>
    for (int i = 0; i < size_increase; ++i) {
   23d00:	4604      	mov	r4, r0
   23d02:	f1d2 0005 	rsbs	r0, r2, #5
   23d06:	eeb0 8a40 	vmov.f32	s16, s0
   23d0a:	d00c      	beq.n	23d26 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x42>
   23d0c:	af1a      	add	r7, sp, #104	@ 0x68
   23d0e:	2300      	movs	r3, #0
    dims_[i] = val;
   23d10:	f04f 0c01 	mov.w	ip, #1
   23d14:	e002      	b.n	23d1c <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x38>
    TFLITE_DCHECK_LT(i, size_);
   23d16:	2b05      	cmp	r3, #5
   23d18:	f000 80e6 	beq.w	23ee8 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x204>
    for (int i = 0; i < size_increase; ++i) {
   23d1c:	3301      	adds	r3, #1
   23d1e:	4298      	cmp	r0, r3
    dims_[i] = val;
   23d20:	f847 cf04 	str.w	ip, [r7, #4]!
    for (int i = 0; i < size_increase; ++i) {
   23d24:	d1f7      	bne.n	23d16 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x32>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   23d26:	ab1b      	add	r3, sp, #108	@ 0x6c
   23d28:	0092      	lsls	r2, r2, #2
   23d2a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   23d2e:	3104      	adds	r1, #4
   23d30:	f7f4 fc26 	bl	18580 <memcpy>
  int32_t DimensionsCount() const { return size_; }
   23d34:	682a      	ldr	r2, [r5, #0]
      : size_(new_shape_size) {
   23d36:	2305      	movs	r3, #5
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   23d38:	429a      	cmp	r2, r3
      : size_(new_shape_size) {
   23d3a:	9320      	str	r3, [sp, #128]	@ 0x80
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   23d3c:	f300 80d4 	bgt.w	23ee8 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x204>
    for (int i = 0; i < size_increase; ++i) {
   23d40:	f1d2 0005 	rsbs	r0, r2, #5
   23d44:	d00b      	beq.n	23d5e <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x7a>
   23d46:	a920      	add	r1, sp, #128	@ 0x80
   23d48:	2300      	movs	r3, #0
    dims_[i] = val;
   23d4a:	2701      	movs	r7, #1
   23d4c:	e002      	b.n	23d54 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x70>
    TFLITE_DCHECK_LT(i, size_);
   23d4e:	2b05      	cmp	r3, #5
   23d50:	f000 80ca 	beq.w	23ee8 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x204>
    for (int i = 0; i < size_increase; ++i) {
   23d54:	3301      	adds	r3, #1
   23d56:	4298      	cmp	r0, r3
    dims_[i] = val;
   23d58:	f841 7f04 	str.w	r7, [r1, #4]!
    for (int i = 0; i < size_increase; ++i) {
   23d5c:	d1f7      	bne.n	23d4e <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x6a>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   23d5e:	ab21      	add	r3, sp, #132	@ 0x84
   23d60:	0092      	lsls	r2, r2, #2
   23d62:	1d29      	adds	r1, r5, #4
   23d64:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   23d68:	f7f4 fc0a 	bl	18580 <memcpy>
  TFLITE_DCHECK_LE(op_params.left_padding_count, PadKernelMaxDimensionCount());
   23d6c:	f994 2000 	ldrsb.w	r2, [r4]
   23d70:	2a05      	cmp	r2, #5
   23d72:	f300 80b9 	bgt.w	23ee8 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x204>
  TFLITE_DCHECK_LE(op_params.right_padding_count, PadKernelMaxDimensionCount());
   23d76:	f994 5018 	ldrsb.w	r5, [r4, #24]
   23d7a:	2d05      	cmp	r5, #5
   23d7c:	f300 80b4 	bgt.w	23ee8 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x204>
    left_padding_copy[i] = 0;
   23d80:	2300      	movs	r3, #0
   23d82:	2000      	movs	r0, #0
   23d84:	2100      	movs	r1, #0
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   23d86:	429a      	cmp	r2, r3
    left_padding_copy[i] = 0;
   23d88:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
   23d8c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
   23d90:	9312      	str	r3, [sp, #72]	@ 0x48
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   23d92:	dd08      	ble.n	23da6 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0xc2>
                      op_params.left_padding_count] = op_params.left_padding[i];
   23d94:	f1c2 0005 	rsb	r0, r2, #5
   23d98:	ab0e      	add	r3, sp, #56	@ 0x38
   23d9a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   23d9e:	0092      	lsls	r2, r2, #2
   23da0:	1d21      	adds	r1, r4, #4
   23da2:	f7f4 fbed 	bl	18580 <memcpy>
    right_padding_copy[i] = 0;
   23da6:	2300      	movs	r3, #0
   23da8:	2200      	movs	r2, #0
   23daa:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
   23dae:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
   23db2:	2300      	movs	r3, #0
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   23db4:	429d      	cmp	r5, r3
    right_padding_copy[i] = 0;
   23db6:	9318      	str	r3, [sp, #96]	@ 0x60
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   23db8:	dd09      	ble.n	23dce <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0xea>
                       op_params.right_padding_count] =
   23dba:	f1c5 0005 	rsb	r0, r5, #5
   23dbe:	ab14      	add	r3, sp, #80	@ 0x50
   23dc0:	f104 011c 	add.w	r1, r4, #28
   23dc4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   23dc8:	00aa      	lsls	r2, r5, #2
   23dca:	f7f4 fbd9 	bl	18580 <memcpy>
    TFLITE_DCHECK_LT(i, size_);
   23dce:	9920      	ldr	r1, [sp, #128]	@ 0x80
   23dd0:	2900      	cmp	r1, #0
   23dd2:	f340 8089 	ble.w	23ee8 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x204>
   23dd6:	2901      	cmp	r1, #1
    return dims_[i];
   23dd8:	9c21      	ldr	r4, [sp, #132]	@ 0x84
    TFLITE_DCHECK_LT(i, size_);
   23dda:	f000 8085 	beq.w	23ee8 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x204>
   23dde:	2902      	cmp	r1, #2
    return dims_[i];
   23de0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
    TFLITE_DCHECK_LT(i, size_);
   23de2:	f000 8081 	beq.w	23ee8 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x204>
   23de6:	2903      	cmp	r1, #3
    return dims_[i];
   23de8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
    TFLITE_DCHECK_LT(i, size_);
   23dea:	d07d      	beq.n	23ee8 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x204>
   23dec:	2904      	cmp	r1, #4
    return dims_[i];
   23dee:	f8dd b090 	ldr.w	fp, [sp, #144]	@ 0x90
    TFLITE_DCHECK_LT(i, size_);
   23df2:	d079      	beq.n	23ee8 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x204>
  const int left_h_padding = left_padding_copy[2];
   23df4:	9910      	ldr	r1, [sp, #64]	@ 0x40
   23df6:	9102      	str	r1, [sp, #8]
  const int left_w_padding = left_padding_copy[3];
   23df8:	9911      	ldr	r1, [sp, #68]	@ 0x44
   23dfa:	9105      	str	r1, [sp, #20]
  const int left_d_padding = left_padding_copy[4];
   23dfc:	9912      	ldr	r1, [sp, #72]	@ 0x48
   23dfe:	9108      	str	r1, [sp, #32]
  const int right_p_padding = right_padding_copy[1];
   23e00:	e9dd 1514 	ldrd	r1, r5, [sp, #80]	@ 0x50
   23e04:	950a      	str	r5, [sp, #40]	@ 0x28
  const int right_h_padding = right_padding_copy[2];
   23e06:	9d16      	ldr	r5, [sp, #88]	@ 0x58
   23e08:	9506      	str	r5, [sp, #24]
  const int right_w_padding = right_padding_copy[3];
   23e0a:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
   23e0c:	9507      	str	r5, [sp, #28]
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   23e0e:	2c00      	cmp	r4, #0
  const int right_d_padding = right_padding_copy[4];
   23e10:	9d18      	ldr	r5, [sp, #96]	@ 0x60
    return dims_[i];
   23e12:	9825      	ldr	r0, [sp, #148]	@ 0x94
   23e14:	950b      	str	r5, [sp, #44]	@ 0x2c
  const int left_p_padding = left_padding_copy[1];
   23e16:	e9dd c70e 	ldrd	ip, r7, [sp, #56]	@ 0x38
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   23e1a:	dd60      	ble.n	23ede <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1fa>
   23e1c:	ea4f 0a80 	mov.w	sl, r0, lsl #2
                out_b >= output_batch - right_b_padding ||
   23e20:	eba4 0e01 	sub.w	lr, r4, r1
   23e24:	46d1      	mov	r9, sl
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   23e26:	2100      	movs	r1, #0
    for (int out_p = 0; out_p < output_plane; ++out_p) {
   23e28:	2b00      	cmp	r3, #0
   23e2a:	dd55      	ble.n	23ed8 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1f4>
                out_p >= output_plane - right_p_padding ||
   23e2c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
    for (int out_p = 0; out_p < output_plane; ++out_p) {
   23e2e:	f04f 0800 	mov.w	r8, #0
                out_p >= output_plane - right_p_padding ||
   23e32:	eba3 0a05 	sub.w	sl, r3, r5
   23e36:	4645      	mov	r5, r8
      for (int out_h = 0; out_h < output_height; ++out_h) {
   23e38:	2a00      	cmp	r2, #0
   23e3a:	dd4a      	ble.n	23ed2 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1ee>
   23e3c:	e9cd 430c 	strd	r4, r3, [sp, #48]	@ 0x30
   23e40:	f04f 0800 	mov.w	r8, #0
        for (int out_w = 0; out_w < output_width; ++out_w) {
   23e44:	f1bb 0f00 	cmp.w	fp, #0
   23e48:	dd3d      	ble.n	23ec6 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1e2>
                out_h >= output_height - right_h_padding ||
   23e4a:	9b06      	ldr	r3, [sp, #24]
   23e4c:	1ad3      	subs	r3, r2, r3
   23e4e:	e9cd 3203 	strd	r3, r2, [sp, #12]
        for (int out_w = 0; out_w < output_width; ++out_w) {
   23e52:	2400      	movs	r4, #0
          for (int out_d = 0; out_d < output_depth; ++out_d) {
   23e54:	2800      	cmp	r0, #0
   23e56:	dd32      	ble.n	23ebe <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1da>
   23e58:	4632      	mov	r2, r6
   23e5a:	2300      	movs	r3, #0
   23e5c:	9601      	str	r6, [sp, #4]
   23e5e:	e023      	b.n	23ea8 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1c4>
            if (out_b < left_b_padding ||
   23e60:	458e      	cmp	lr, r1
   23e62:	dd23      	ble.n	23eac <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1c8>
                out_b >= output_batch - right_b_padding ||
   23e64:	42af      	cmp	r7, r5
   23e66:	dc21      	bgt.n	23eac <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1c8>
                out_p < left_p_padding ||
   23e68:	45aa      	cmp	sl, r5
   23e6a:	dd1f      	ble.n	23eac <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1c8>
                out_p >= output_plane - right_p_padding ||
   23e6c:	9e02      	ldr	r6, [sp, #8]
   23e6e:	4546      	cmp	r6, r8
   23e70:	dc1c      	bgt.n	23eac <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1c8>
                out_h < left_h_padding ||
   23e72:	9e03      	ldr	r6, [sp, #12]
   23e74:	4546      	cmp	r6, r8
   23e76:	dd19      	ble.n	23eac <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1c8>
                out_h >= output_height - right_h_padding ||
   23e78:	9e05      	ldr	r6, [sp, #20]
   23e7a:	42b4      	cmp	r4, r6
   23e7c:	db16      	blt.n	23eac <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1c8>
                out_w >= output_width - right_w_padding ||
   23e7e:	9e07      	ldr	r6, [sp, #28]
   23e80:	ebab 0606 	sub.w	r6, fp, r6
                out_w < left_w_padding ||
   23e84:	42b4      	cmp	r4, r6
   23e86:	da11      	bge.n	23eac <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1c8>
                out_w >= output_width - right_w_padding ||
   23e88:	9e08      	ldr	r6, [sp, #32]
   23e8a:	429e      	cmp	r6, r3
   23e8c:	dc0e      	bgt.n	23eac <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1c8>
                out_d >= output_depth - right_d_padding) {
   23e8e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
   23e90:	1b86      	subs	r6, r0, r6
                out_d < left_d_padding ||
   23e92:	429e      	cmp	r6, r3
   23e94:	dd0a      	ble.n	23eac <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1c8>
              *out_ptr++ = *in_ptr++;
   23e96:	9e09      	ldr	r6, [sp, #36]	@ 0x24
          for (int out_d = 0; out_d < output_depth; ++out_d) {
   23e98:	3301      	adds	r3, #1
              *out_ptr++ = *in_ptr++;
   23e9a:	ecf6 7a01 	vldmia	r6!, {s15}
          for (int out_d = 0; out_d < output_depth; ++out_d) {
   23e9e:	4298      	cmp	r0, r3
              *out_ptr++ = *in_ptr++;
   23ea0:	9609      	str	r6, [sp, #36]	@ 0x24
   23ea2:	ece2 7a01 	vstmia	r2!, {s15}
          for (int out_d = 0; out_d < output_depth; ++out_d) {
   23ea6:	d008      	beq.n	23eba <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1d6>
            if (out_b < left_b_padding ||
   23ea8:	458c      	cmp	ip, r1
   23eaa:	ddd9      	ble.n	23e60 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x17c>
          for (int out_d = 0; out_d < output_depth; ++out_d) {
   23eac:	3301      	adds	r3, #1
              *out_ptr++ = pad_value;
   23eae:	eef0 7a48 	vmov.f32	s15, s16
          for (int out_d = 0; out_d < output_depth; ++out_d) {
   23eb2:	4298      	cmp	r0, r3
   23eb4:	ece2 7a01 	vstmia	r2!, {s15}
   23eb8:	d1f6      	bne.n	23ea8 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1c4>
   23eba:	9e01      	ldr	r6, [sp, #4]
   23ebc:	444e      	add	r6, r9
        for (int out_w = 0; out_w < output_width; ++out_w) {
   23ebe:	3401      	adds	r4, #1
   23ec0:	45a3      	cmp	fp, r4
   23ec2:	d1c7      	bne.n	23e54 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x170>
   23ec4:	9a04      	ldr	r2, [sp, #16]
      for (int out_h = 0; out_h < output_height; ++out_h) {
   23ec6:	f108 0801 	add.w	r8, r8, #1
   23eca:	4542      	cmp	r2, r8
   23ecc:	d1ba      	bne.n	23e44 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x160>
   23ece:	e9dd 430c 	ldrd	r4, r3, [sp, #48]	@ 0x30
    for (int out_p = 0; out_p < output_plane; ++out_p) {
   23ed2:	3501      	adds	r5, #1
   23ed4:	42ab      	cmp	r3, r5
   23ed6:	d1af      	bne.n	23e38 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x154>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   23ed8:	3101      	adds	r1, #1
   23eda:	428c      	cmp	r4, r1
   23edc:	d1a4      	bne.n	23e28 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x144>
}
   23ede:	b027      	add	sp, #156	@ 0x9c
   23ee0:	ecbd 8b02 	vpop	{d8}
   23ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   23ee8:	f001 fa4a 	bl	25380 <abort>

00023eec <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   23eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23ef0:	ed2d 8b02 	vpush	{d8}
  TFLITE_DCHECK(node->user_data != nullptr);
   23ef4:	68ce      	ldr	r6, [r1, #12]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   23ef6:	f5ad 7d0b 	sub.w	sp, sp, #556	@ 0x22c
  TFLITE_DCHECK(node->user_data != nullptr);
   23efa:	2e00      	cmp	r6, #0
   23efc:	f000 8309 	beq.w	24512 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
  const TfLiteEvalTensor* input =
   23f00:	4688      	mov	r8, r1
      tflite::micro::GetEvalInput(context, node, /*index=*/0);
   23f02:	2200      	movs	r2, #0
   23f04:	4605      	mov	r5, r0
   23f06:	f7ff fc37 	bl	23778 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  return node->inputs == nullptr ? 0 : node->inputs->size;
   23f0a:	f8d8 2000 	ldr.w	r2, [r8]
   23f0e:	4607      	mov	r7, r0
   23f10:	b11a      	cbz	r2, 23f1a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e>
          ? tflite::micro::GetEvalInput(context, node, /*index=*/2)
   23f12:	6813      	ldr	r3, [r2, #0]
   23f14:	2b03      	cmp	r3, #3
   23f16:	d01b      	beq.n	23f50 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x64>
      tflite::micro::GetEvalOutput(context, node, /*index=*/0);
   23f18:	2200      	movs	r2, #0
   23f1a:	4628      	mov	r0, r5
   23f1c:	4641      	mov	r1, r8
   23f1e:	f7ff fc45 	bl	237ac <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
  switch (input->type) {
   23f22:	7a3b      	ldrb	r3, [r7, #8]
   23f24:	3b01      	subs	r3, #1
      tflite::micro::GetEvalOutput(context, node, /*index=*/0);
   23f26:	4605      	mov	r5, r0
  switch (input->type) {
   23f28:	2b08      	cmp	r3, #8
   23f2a:	d80a      	bhi.n	23f42 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x56>
   23f2c:	e8df f013 	tbh	[pc, r3, lsl #1]
   23f30:	005a0036 	.word	0x005a0036
   23f34:	00090009 	.word	0x00090009
   23f38:	00090009 	.word	0x00090009
   23f3c:	0009017a 	.word	0x0009017a
   23f40:	0296      	.short	0x0296
      return kTfLiteError;
   23f42:	2001      	movs	r0, #1
}
   23f44:	f50d 7d0b 	add.w	sp, sp, #556	@ 0x22c
   23f48:	ecbd 8b02 	vpop	{d8}
   23f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          ? tflite::micro::GetEvalInput(context, node, /*index=*/2)
   23f50:	2202      	movs	r2, #2
   23f52:	4641      	mov	r1, r8
   23f54:	4628      	mov	r0, r5
   23f56:	f7ff fc0f 	bl	23778 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
      tflite::micro::GetEvalOutput(context, node, /*index=*/0);
   23f5a:	4641      	mov	r1, r8
          ? tflite::micro::GetEvalInput(context, node, /*index=*/2)
   23f5c:	4604      	mov	r4, r0
      tflite::micro::GetEvalOutput(context, node, /*index=*/0);
   23f5e:	2200      	movs	r2, #0
   23f60:	4628      	mov	r0, r5
   23f62:	f7ff fc23 	bl	237ac <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
  switch (input->type) {
   23f66:	7a3b      	ldrb	r3, [r7, #8]
   23f68:	3b01      	subs	r3, #1
      tflite::micro::GetEvalOutput(context, node, /*index=*/0);
   23f6a:	4605      	mov	r5, r0
  switch (input->type) {
   23f6c:	2b08      	cmp	r3, #8
   23f6e:	d8e8      	bhi.n	23f42 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x56>
   23f70:	a201      	add	r2, pc, #4	@ (adr r2, 23f78 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8c>)
   23f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   23f76:	bf00      	nop
   23f78:	0002449d 	.word	0x0002449d
   23f7c:	00024427 	.word	0x00024427
   23f80:	00023f43 	.word	0x00023f43
   23f84:	00023f43 	.word	0x00023f43
   23f88:	00023f43 	.word	0x00023f43
   23f8c:	00023f43 	.word	0x00023f43
   23f90:	0002448f 	.word	0x0002448f
   23f94:	00023f43 	.word	0x00023f43
   23f98:	000241df 	.word	0x000241df
              ? 0.f
   23f9c:	ed9f 8aaf 	vldr	s16, [pc, #700]	@ 2425c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x370>
      if (data->params.resizing_category == ResizingCategory::kImageStyle) {
   23fa0:	f896 3030 	ldrb.w	r3, [r6, #48]	@ 0x30
   23fa4:	2b01      	cmp	r3, #1
            data->params, tflite::micro::GetTensorShape(input),
   23fa6:	4639      	mov	r1, r7
      if (data->params.resizing_category == ResizingCategory::kImageStyle) {
   23fa8:	f000 8243 	beq.w	24432 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x546>
        reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),
   23fac:	a836      	add	r0, sp, #216	@ 0xd8
   23fae:	f7ff fc09 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                           &pad_value, tflite::micro::GetTensorShape(output),
   23fb2:	4629      	mov	r1, r5
   23fb4:	a83c      	add	r0, sp, #240	@ 0xf0
   23fb6:	683c      	ldr	r4, [r7, #0]
   23fb8:	f7ff fc04 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   23fbc:	2d00      	cmp	r5, #0
   23fbe:	f000 82a8 	beq.w	24512 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
template <typename T, typename P>
inline void Pad(const tflite::PadParams& op_params,
                const RuntimeShape& input_shape, const T* input_data,
                const P* pad_value_ptr, const RuntimeShape& output_shape,
                T* output_data) {
  PadImpl(op_params, input_shape, input_data, pad_value_ptr, output_shape,
   23fc2:	682b      	ldr	r3, [r5, #0]
   23fc4:	9300      	str	r3, [sp, #0]
   23fc6:	eeb0 0a48 	vmov.f32	s0, s16
   23fca:	ab3c      	add	r3, sp, #240	@ 0xf0
   23fcc:	4622      	mov	r2, r4
   23fce:	a936      	add	r1, sp, #216	@ 0xd8
   23fd0:	4630      	mov	r0, r6
   23fd2:	f7ff fe87 	bl	23ce4 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0>
  return kTfLiteOk;
   23fd6:	2000      	movs	r0, #0
}
   23fd8:	f50d 7d0b 	add.w	sp, sp, #556	@ 0x22c
   23fdc:	ecbd 8b02 	vpop	{d8}
   23fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              ? 0
   23fe4:	2400      	movs	r4, #0
      reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),
   23fe6:	4639      	mov	r1, r7
   23fe8:	a866      	add	r0, sp, #408	@ 0x198
   23fea:	f7ff fbeb 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
   23fee:	683b      	ldr	r3, [r7, #0]
   23ff0:	930d      	str	r3, [sp, #52]	@ 0x34
                         &pad_value, tflite::micro::GetTensorShape(output),
   23ff2:	4629      	mov	r1, r5
   23ff4:	a86c      	add	r0, sp, #432	@ 0x1b0
   23ff6:	f7ff fbe5 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   23ffa:	2d00      	cmp	r5, #0
   23ffc:	f000 8289 	beq.w	24512 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
  int32_t DimensionsCount() const { return size_; }
   24000:	9a66      	ldr	r2, [sp, #408]	@ 0x198
  return reinterpret_cast<T*>(tensor->data.raw);
   24002:	682d      	ldr	r5, [r5, #0]
      : size_(new_shape_size) {
   24004:	2305      	movs	r3, #5
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   24006:	429a      	cmp	r2, r3
      : size_(new_shape_size) {
   24008:	937e      	str	r3, [sp, #504]	@ 0x1f8
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   2400a:	f300 8282 	bgt.w	24512 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
    for (int i = 0; i < size_increase; ++i) {
   2400e:	1a98      	subs	r0, r3, r2
   24010:	d00b      	beq.n	2402a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13e>
   24012:	a97e      	add	r1, sp, #504	@ 0x1f8
   24014:	2300      	movs	r3, #0
    dims_[i] = val;
   24016:	2701      	movs	r7, #1
   24018:	e002      	b.n	24020 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x134>
    TFLITE_DCHECK_LT(i, size_);
   2401a:	2b05      	cmp	r3, #5
   2401c:	f000 8279 	beq.w	24512 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
    for (int i = 0; i < size_increase; ++i) {
   24020:	3301      	adds	r3, #1
   24022:	4298      	cmp	r0, r3
    dims_[i] = val;
   24024:	f841 7f04 	str.w	r7, [r1, #4]!
    for (int i = 0; i < size_increase; ++i) {
   24028:	d1f7      	bne.n	2401a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x12e>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   2402a:	ab7f      	add	r3, sp, #508	@ 0x1fc
   2402c:	0092      	lsls	r2, r2, #2
   2402e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   24032:	a967      	add	r1, sp, #412	@ 0x19c
   24034:	f7f4 faa4 	bl	18580 <memcpy>
  int32_t DimensionsCount() const { return size_; }
   24038:	9a6c      	ldr	r2, [sp, #432]	@ 0x1b0
      : size_(new_shape_size) {
   2403a:	2305      	movs	r3, #5
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   2403c:	429a      	cmp	r2, r3
      : size_(new_shape_size) {
   2403e:	9384      	str	r3, [sp, #528]	@ 0x210
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   24040:	f300 8267 	bgt.w	24512 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
    for (int i = 0; i < size_increase; ++i) {
   24044:	f1d2 0005 	rsbs	r0, r2, #5
   24048:	d00b      	beq.n	24062 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x176>
   2404a:	a984      	add	r1, sp, #528	@ 0x210
   2404c:	2300      	movs	r3, #0
    dims_[i] = val;
   2404e:	2701      	movs	r7, #1
   24050:	e002      	b.n	24058 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16c>
    TFLITE_DCHECK_LT(i, size_);
   24052:	2b05      	cmp	r3, #5
   24054:	f000 825d 	beq.w	24512 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
    for (int i = 0; i < size_increase; ++i) {
   24058:	3301      	adds	r3, #1
   2405a:	4298      	cmp	r0, r3
    dims_[i] = val;
   2405c:	f841 7f04 	str.w	r7, [r1, #4]!
    for (int i = 0; i < size_increase; ++i) {
   24060:	d1f7      	bne.n	24052 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x166>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   24062:	ab85      	add	r3, sp, #532	@ 0x214
   24064:	0092      	lsls	r2, r2, #2
   24066:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   2406a:	a96d      	add	r1, sp, #436	@ 0x1b4
   2406c:	f7f4 fa88 	bl	18580 <memcpy>
  TFLITE_DCHECK_LE(op_params.left_padding_count, PadKernelMaxDimensionCount());
   24070:	f996 2000 	ldrsb.w	r2, [r6]
   24074:	2a05      	cmp	r2, #5
   24076:	f300 824c 	bgt.w	24512 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
  TFLITE_DCHECK_LE(op_params.right_padding_count, PadKernelMaxDimensionCount());
   2407a:	f996 7018 	ldrsb.w	r7, [r6, #24]
   2407e:	2f05      	cmp	r7, #5
   24080:	f300 8247 	bgt.w	24512 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
    left_padding_copy[i] = 0;
   24084:	2300      	movs	r3, #0
   24086:	2000      	movs	r0, #0
   24088:	2100      	movs	r1, #0
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   2408a:	429a      	cmp	r2, r3
    left_padding_copy[i] = 0;
   2408c:	e9cd 011e 	strd	r0, r1, [sp, #120]	@ 0x78
   24090:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
   24094:	9322      	str	r3, [sp, #136]	@ 0x88
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   24096:	dd08      	ble.n	240aa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1be>
                      op_params.left_padding_count] = op_params.left_padding[i];
   24098:	f1c2 0005 	rsb	r0, r2, #5
   2409c:	ab1e      	add	r3, sp, #120	@ 0x78
   2409e:	0092      	lsls	r2, r2, #2
   240a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   240a4:	1d31      	adds	r1, r6, #4
   240a6:	f7f4 fa6b 	bl	18580 <memcpy>
    right_padding_copy[i] = 0;
   240aa:	2300      	movs	r3, #0
   240ac:	2200      	movs	r2, #0
   240ae:	9328      	str	r3, [sp, #160]	@ 0xa0
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   240b0:	2f00      	cmp	r7, #0
    right_padding_copy[i] = 0;
   240b2:	f04f 0300 	mov.w	r3, #0
   240b6:	e9cd 2324 	strd	r2, r3, [sp, #144]	@ 0x90
   240ba:	e9cd 2326 	strd	r2, r3, [sp, #152]	@ 0x98
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   240be:	dd09      	ble.n	240d4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e8>
                       op_params.right_padding_count] =
   240c0:	f1c7 0005 	rsb	r0, r7, #5
   240c4:	ab24      	add	r3, sp, #144	@ 0x90
   240c6:	f106 011c 	add.w	r1, r6, #28
   240ca:	00ba      	lsls	r2, r7, #2
   240cc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   240d0:	f7f4 fa56 	bl	18580 <memcpy>
    TFLITE_DCHECK_LT(i, size_);
   240d4:	9984      	ldr	r1, [sp, #528]	@ 0x210
   240d6:	2900      	cmp	r1, #0
   240d8:	f340 821b 	ble.w	24512 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
   240dc:	2901      	cmp	r1, #1
    return dims_[i];
   240de:	9e85      	ldr	r6, [sp, #532]	@ 0x214
    TFLITE_DCHECK_LT(i, size_);
   240e0:	f000 8217 	beq.w	24512 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
   240e4:	2902      	cmp	r1, #2
    return dims_[i];
   240e6:	9a86      	ldr	r2, [sp, #536]	@ 0x218
    TFLITE_DCHECK_LT(i, size_);
   240e8:	f000 8213 	beq.w	24512 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
   240ec:	2903      	cmp	r1, #3
    return dims_[i];
   240ee:	9b87      	ldr	r3, [sp, #540]	@ 0x21c
    TFLITE_DCHECK_LT(i, size_);
   240f0:	f000 820f 	beq.w	24512 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
   240f4:	2904      	cmp	r1, #4
    return dims_[i];
   240f6:	9888      	ldr	r0, [sp, #544]	@ 0x220
    TFLITE_DCHECK_LT(i, size_);
   240f8:	f000 820b 	beq.w	24512 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
  const int left_b_padding = left_padding_copy[0];
   240fc:	991e      	ldr	r1, [sp, #120]	@ 0x78
   240fe:	910b      	str	r1, [sp, #44]	@ 0x2c
  const int left_p_padding = left_padding_copy[1];
   24100:	991f      	ldr	r1, [sp, #124]	@ 0x7c
   24102:	9107      	str	r1, [sp, #28]
  const int right_w_padding = right_padding_copy[3];
   24104:	e9dd e726 	ldrd	lr, r7, [sp, #152]	@ 0x98
  const int left_h_padding = left_padding_copy[2];
   24108:	9920      	ldr	r1, [sp, #128]	@ 0x80
   2410a:	9109      	str	r1, [sp, #36]	@ 0x24
  const int left_d_padding = left_padding_copy[4];
   2410c:	e9dd 9121 	ldrd	r9, r1, [sp, #132]	@ 0x84
  const int right_w_padding = right_padding_copy[3];
   24110:	9708      	str	r7, [sp, #32]
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   24112:	2e00      	cmp	r6, #0
  const int right_d_padding = right_padding_copy[4];
   24114:	9f28      	ldr	r7, [sp, #160]	@ 0xa0
  const int left_d_padding = left_padding_copy[4];
   24116:	910c      	str	r1, [sp, #48]	@ 0x30
    return dims_[i];
   24118:	f8dd 8224 	ldr.w	r8, [sp, #548]	@ 0x224
  const int right_d_padding = right_padding_copy[4];
   2411c:	970e      	str	r7, [sp, #56]	@ 0x38
  const int right_p_padding = right_padding_copy[1];
   2411e:	e9dd 1c24 	ldrd	r1, ip, [sp, #144]	@ 0x90
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   24122:	f77f af58 	ble.w	23fd6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xea>
                out_b >= output_batch - right_b_padding ||
   24126:	1a71      	subs	r1, r6, r1
   24128:	910f      	str	r1, [sp, #60]	@ 0x3c
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   2412a:	2100      	movs	r1, #0
   2412c:	910a      	str	r1, [sp, #40]	@ 0x28
   2412e:	ea4f 0a88 	mov.w	sl, r8, lsl #2
   24132:	4611      	mov	r1, r2
   24134:	46cb      	mov	fp, r9
   24136:	4672      	mov	r2, lr
   24138:	4667      	mov	r7, ip
   2413a:	46b6      	mov	lr, r6
    for (int out_p = 0; out_p < output_plane; ++out_p) {
   2413c:	2900      	cmp	r1, #0
   2413e:	f340 81c7 	ble.w	244d0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5e4>
                out_p >= output_plane - right_p_padding ||
   24142:	1bce      	subs	r6, r1, r7
    for (int out_p = 0; out_p < output_plane; ++out_p) {
   24144:	f04f 0c00 	mov.w	ip, #0
                out_p >= output_plane - right_p_padding ||
   24148:	9606      	str	r6, [sp, #24]
   2414a:	f8cd e040 	str.w	lr, [sp, #64]	@ 0x40
      for (int out_h = 0; out_h < output_height; ++out_h) {
   2414e:	2b00      	cmp	r3, #0
   24150:	f340 81b7 	ble.w	244c2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5d6>
   24154:	2600      	movs	r6, #0
   24156:	9111      	str	r1, [sp, #68]	@ 0x44
   24158:	46b9      	mov	r9, r7
        for (int out_w = 0; out_w < output_width; ++out_w) {
   2415a:	2800      	cmp	r0, #0
   2415c:	f340 81ab 	ble.w	244b6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5ca>
                out_h >= output_height - right_h_padding ||
   24160:	eba3 0e02 	sub.w	lr, r3, r2
        for (int out_w = 0; out_w < output_width; ++out_w) {
   24164:	2100      	movs	r1, #0
                out_h >= output_height - right_h_padding ||
   24166:	f8cd e010 	str.w	lr, [sp, #16]
          for (int out_d = 0; out_d < output_depth; ++out_d) {
   2416a:	f1b8 0f00 	cmp.w	r8, #0
   2416e:	f340 819e 	ble.w	244ae <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5c2>
   24172:	1f2f      	subs	r7, r5, #4
   24174:	9705      	str	r7, [sp, #20]
   24176:	f04f 0e00 	mov.w	lr, #0
   2417a:	9303      	str	r3, [sp, #12]
   2417c:	e029      	b.n	241d2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e6>
            if (out_b < left_b_padding ||
   2417e:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
   24180:	42bb      	cmp	r3, r7
   24182:	da2a      	bge.n	241da <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ee>
                out_b >= output_batch - right_b_padding ||
   24184:	9f07      	ldr	r7, [sp, #28]
   24186:	4567      	cmp	r7, ip
   24188:	dc27      	bgt.n	241da <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ee>
                out_p < left_p_padding ||
   2418a:	9f06      	ldr	r7, [sp, #24]
   2418c:	4567      	cmp	r7, ip
   2418e:	dd24      	ble.n	241da <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ee>
                out_p >= output_plane - right_p_padding ||
   24190:	9f09      	ldr	r7, [sp, #36]	@ 0x24
   24192:	42b7      	cmp	r7, r6
   24194:	dc21      	bgt.n	241da <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ee>
                out_h < left_h_padding ||
   24196:	9f04      	ldr	r7, [sp, #16]
   24198:	42b7      	cmp	r7, r6
   2419a:	dd1e      	ble.n	241da <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ee>
                out_h >= output_height - right_h_padding ||
   2419c:	4559      	cmp	r1, fp
   2419e:	db1c      	blt.n	241da <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ee>
                out_w >= output_width - right_w_padding ||
   241a0:	9f08      	ldr	r7, [sp, #32]
   241a2:	1bc7      	subs	r7, r0, r7
                out_w < left_w_padding ||
   241a4:	42b9      	cmp	r1, r7
   241a6:	da18      	bge.n	241da <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ee>
                out_w >= output_width - right_w_padding ||
   241a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   241aa:	459e      	cmp	lr, r3
   241ac:	db15      	blt.n	241da <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ee>
                out_d >= output_depth - right_d_padding) {
   241ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   241b0:	eba8 0703 	sub.w	r7, r8, r3
                out_d < left_d_padding ||
   241b4:	45be      	cmp	lr, r7
   241b6:	da10      	bge.n	241da <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ee>
              *out_ptr++ = *in_ptr++;
   241b8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   241ba:	f853 7b04 	ldr.w	r7, [r3], #4
   241be:	930d      	str	r3, [sp, #52]	@ 0x34
   241c0:	9b05      	ldr	r3, [sp, #20]
          for (int out_d = 0; out_d < output_depth; ++out_d) {
   241c2:	f10e 0e01 	add.w	lr, lr, #1
   241c6:	f843 7f04 	str.w	r7, [r3, #4]!
   241ca:	45f0      	cmp	r8, lr
   241cc:	9305      	str	r3, [sp, #20]
   241ce:	f000 816c 	beq.w	244aa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5be>
            if (out_b < left_b_padding ||
   241d2:	e9dd 370a 	ldrd	r3, r7, [sp, #40]	@ 0x28
   241d6:	429f      	cmp	r7, r3
   241d8:	ddd1      	ble.n	2417e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x292>
              *out_ptr++ = pad_value;
   241da:	4627      	mov	r7, r4
   241dc:	e7f0      	b.n	241c0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2d4>
      if (constant_values == nullptr) {
   241de:	2c00      	cmp	r4, #0
   241e0:	f000 813c 	beq.w	2445c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x570>
        pad_value = *tflite::micro::GetTensorData<int8_t>(constant_values);
   241e4:	6823      	ldr	r3, [r4, #0]
   241e6:	f993 4000 	ldrsb.w	r4, [r3]
      if (data->params.resizing_category == ResizingCategory::kImageStyle) {
   241ea:	f896 3030 	ldrb.w	r3, [r6, #48]	@ 0x30
   241ee:	2b01      	cmp	r3, #1
            data->params, tflite::micro::GetTensorShape(input),
   241f0:	4639      	mov	r1, r7
      if (data->params.resizing_category == ResizingCategory::kImageStyle) {
   241f2:	f000 8136 	beq.w	24462 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x576>
        reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),
   241f6:	a84e      	add	r0, sp, #312	@ 0x138
   241f8:	f7ff fae4 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
   241fc:	f8d7 8000 	ldr.w	r8, [r7]
                           &pad_value, tflite::micro::GetTensorShape(output),
   24200:	af54      	add	r7, sp, #336	@ 0x150
   24202:	4629      	mov	r1, r5
   24204:	4638      	mov	r0, r7
   24206:	f7ff fadd 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   2420a:	2d00      	cmp	r5, #0
   2420c:	f000 8181 	beq.w	24512 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
  PadImpl(op_params, input_shape, input_data, pad_value_ptr, output_shape,
   24210:	682b      	ldr	r3, [r5, #0]
   24212:	4642      	mov	r2, r8
   24214:	e9cd 7300 	strd	r7, r3, [sp]
   24218:	a94e      	add	r1, sp, #312	@ 0x138
   2421a:	4623      	mov	r3, r4
   2421c:	4630      	mov	r0, r6
   2421e:	f7ff fc5d 	bl	23adc <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0>
  ~RuntimeShape() {}
   24222:	e6d8      	b.n	23fd6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xea>
              : *tflite::micro::GetTensorData<int16_t>(constant_values);
   24224:	2400      	movs	r4, #0
      reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),
   24226:	4639      	mov	r1, r7
   24228:	a85a      	add	r0, sp, #360	@ 0x168
   2422a:	f7ff facb 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
   2422e:	683b      	ldr	r3, [r7, #0]
   24230:	930d      	str	r3, [sp, #52]	@ 0x34
                         &pad_value, tflite::micro::GetTensorShape(output),
   24232:	4629      	mov	r1, r5
   24234:	a860      	add	r0, sp, #384	@ 0x180
   24236:	f7ff fac5 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   2423a:	2d00      	cmp	r5, #0
   2423c:	f000 8169 	beq.w	24512 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
  int32_t DimensionsCount() const { return size_; }
   24240:	9a5a      	ldr	r2, [sp, #360]	@ 0x168
  return reinterpret_cast<T*>(tensor->data.raw);
   24242:	682d      	ldr	r5, [r5, #0]
      : size_(new_shape_size) {
   24244:	2305      	movs	r3, #5
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   24246:	429a      	cmp	r2, r3
      : size_(new_shape_size) {
   24248:	9372      	str	r3, [sp, #456]	@ 0x1c8
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   2424a:	f300 8162 	bgt.w	24512 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
    for (int i = 0; i < size_increase; ++i) {
   2424e:	1a98      	subs	r0, r3, r2
   24250:	d00e      	beq.n	24270 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x384>
   24252:	a972      	add	r1, sp, #456	@ 0x1c8
   24254:	2300      	movs	r3, #0
    dims_[i] = val;
   24256:	2701      	movs	r7, #1
   24258:	e005      	b.n	24266 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x37a>
   2425a:	bf00      	nop
   2425c:	00000000 	.word	0x00000000
    TFLITE_DCHECK_LT(i, size_);
   24260:	2b05      	cmp	r3, #5
   24262:	f000 8156 	beq.w	24512 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
    for (int i = 0; i < size_increase; ++i) {
   24266:	3301      	adds	r3, #1
   24268:	4298      	cmp	r0, r3
    dims_[i] = val;
   2426a:	f841 7f04 	str.w	r7, [r1, #4]!
    for (int i = 0; i < size_increase; ++i) {
   2426e:	d1f7      	bne.n	24260 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x374>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   24270:	ab73      	add	r3, sp, #460	@ 0x1cc
   24272:	0092      	lsls	r2, r2, #2
   24274:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   24278:	a95b      	add	r1, sp, #364	@ 0x16c
   2427a:	f7f4 f981 	bl	18580 <memcpy>
  int32_t DimensionsCount() const { return size_; }
   2427e:	9a60      	ldr	r2, [sp, #384]	@ 0x180
      : size_(new_shape_size) {
   24280:	2305      	movs	r3, #5
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   24282:	429a      	cmp	r2, r3
      : size_(new_shape_size) {
   24284:	9378      	str	r3, [sp, #480]	@ 0x1e0
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   24286:	f300 8144 	bgt.w	24512 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
    for (int i = 0; i < size_increase; ++i) {
   2428a:	f1d2 0005 	rsbs	r0, r2, #5
   2428e:	d00b      	beq.n	242a8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3bc>
   24290:	a978      	add	r1, sp, #480	@ 0x1e0
   24292:	2300      	movs	r3, #0
    dims_[i] = val;
   24294:	2701      	movs	r7, #1
   24296:	e002      	b.n	2429e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3b2>
    TFLITE_DCHECK_LT(i, size_);
   24298:	2b05      	cmp	r3, #5
   2429a:	f000 813a 	beq.w	24512 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
    for (int i = 0; i < size_increase; ++i) {
   2429e:	3301      	adds	r3, #1
   242a0:	4298      	cmp	r0, r3
    dims_[i] = val;
   242a2:	f841 7f04 	str.w	r7, [r1, #4]!
    for (int i = 0; i < size_increase; ++i) {
   242a6:	d1f7      	bne.n	24298 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3ac>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   242a8:	ab79      	add	r3, sp, #484	@ 0x1e4
   242aa:	0092      	lsls	r2, r2, #2
   242ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   242b0:	a961      	add	r1, sp, #388	@ 0x184
   242b2:	f7f4 f965 	bl	18580 <memcpy>
  TFLITE_DCHECK_LE(op_params.left_padding_count, PadKernelMaxDimensionCount());
   242b6:	f996 2000 	ldrsb.w	r2, [r6]
   242ba:	2a05      	cmp	r2, #5
   242bc:	f300 8129 	bgt.w	24512 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
  TFLITE_DCHECK_LE(op_params.right_padding_count, PadKernelMaxDimensionCount());
   242c0:	f996 7018 	ldrsb.w	r7, [r6, #24]
   242c4:	2f05      	cmp	r7, #5
   242c6:	f300 8124 	bgt.w	24512 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
    left_padding_copy[i] = 0;
   242ca:	2300      	movs	r3, #0
   242cc:	2000      	movs	r0, #0
   242ce:	2100      	movs	r1, #0
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   242d0:	429a      	cmp	r2, r3
    left_padding_copy[i] = 0;
   242d2:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
   242d6:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
   242da:	9316      	str	r3, [sp, #88]	@ 0x58
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   242dc:	dd08      	ble.n	242f0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x404>
                      op_params.left_padding_count] = op_params.left_padding[i];
   242de:	f1c2 0005 	rsb	r0, r2, #5
   242e2:	ab12      	add	r3, sp, #72	@ 0x48
   242e4:	0092      	lsls	r2, r2, #2
   242e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   242ea:	1d31      	adds	r1, r6, #4
   242ec:	f7f4 f948 	bl	18580 <memcpy>
    right_padding_copy[i] = 0;
   242f0:	2300      	movs	r3, #0
   242f2:	2200      	movs	r2, #0
   242f4:	931c      	str	r3, [sp, #112]	@ 0x70
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   242f6:	2f00      	cmp	r7, #0
    right_padding_copy[i] = 0;
   242f8:	f04f 0300 	mov.w	r3, #0
   242fc:	e9cd 2318 	strd	r2, r3, [sp, #96]	@ 0x60
   24300:	e9cd 231a 	strd	r2, r3, [sp, #104]	@ 0x68
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   24304:	dd09      	ble.n	2431a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x42e>
                       op_params.right_padding_count] =
   24306:	f1c7 0005 	rsb	r0, r7, #5
   2430a:	ab18      	add	r3, sp, #96	@ 0x60
   2430c:	f106 011c 	add.w	r1, r6, #28
   24310:	00ba      	lsls	r2, r7, #2
   24312:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   24316:	f7f4 f933 	bl	18580 <memcpy>
    TFLITE_DCHECK_LT(i, size_);
   2431a:	9978      	ldr	r1, [sp, #480]	@ 0x1e0
   2431c:	2900      	cmp	r1, #0
   2431e:	f340 80f8 	ble.w	24512 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
   24322:	2901      	cmp	r1, #1
    return dims_[i];
   24324:	9e79      	ldr	r6, [sp, #484]	@ 0x1e4
    TFLITE_DCHECK_LT(i, size_);
   24326:	f000 80f4 	beq.w	24512 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
   2432a:	2902      	cmp	r1, #2
    return dims_[i];
   2432c:	9a7a      	ldr	r2, [sp, #488]	@ 0x1e8
    TFLITE_DCHECK_LT(i, size_);
   2432e:	f000 80f0 	beq.w	24512 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
   24332:	2903      	cmp	r1, #3
    return dims_[i];
   24334:	f8dd b1ec 	ldr.w	fp, [sp, #492]	@ 0x1ec
    TFLITE_DCHECK_LT(i, size_);
   24338:	f000 80eb 	beq.w	24512 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
   2433c:	2904      	cmp	r1, #4
    return dims_[i];
   2433e:	987c      	ldr	r0, [sp, #496]	@ 0x1f0
    TFLITE_DCHECK_LT(i, size_);
   24340:	f000 80e7 	beq.w	24512 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
  const int left_b_padding = left_padding_copy[0];
   24344:	9912      	ldr	r1, [sp, #72]	@ 0x48
   24346:	910b      	str	r1, [sp, #44]	@ 0x2c
  const int left_p_padding = left_padding_copy[1];
   24348:	9913      	ldr	r1, [sp, #76]	@ 0x4c
   2434a:	9107      	str	r1, [sp, #28]
  const int right_w_padding = right_padding_copy[3];
   2434c:	e9dd 731a 	ldrd	r7, r3, [sp, #104]	@ 0x68
  const int left_h_padding = left_padding_copy[2];
   24350:	9914      	ldr	r1, [sp, #80]	@ 0x50
   24352:	9109      	str	r1, [sp, #36]	@ 0x24
  const int left_d_padding = left_padding_copy[4];
   24354:	e9dd 9115 	ldrd	r9, r1, [sp, #84]	@ 0x54
  const int right_w_padding = right_padding_copy[3];
   24358:	9308      	str	r3, [sp, #32]
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   2435a:	2e00      	cmp	r6, #0
  const int right_d_padding = right_padding_copy[4];
   2435c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
  const int left_d_padding = left_padding_copy[4];
   2435e:	910c      	str	r1, [sp, #48]	@ 0x30
    return dims_[i];
   24360:	f8dd 81f4 	ldr.w	r8, [sp, #500]	@ 0x1f4
  const int right_d_padding = right_padding_copy[4];
   24364:	930e      	str	r3, [sp, #56]	@ 0x38
  const int right_p_padding = right_padding_copy[1];
   24366:	e9dd 1c18 	ldrd	r1, ip, [sp, #96]	@ 0x60
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   2436a:	f77f ae34 	ble.w	23fd6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xea>
                out_b >= output_batch - right_b_padding ||
   2436e:	1a73      	subs	r3, r6, r1
   24370:	930f      	str	r3, [sp, #60]	@ 0x3c
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   24372:	2300      	movs	r3, #0
   24374:	930a      	str	r3, [sp, #40]	@ 0x28
   24376:	4611      	mov	r1, r2
   24378:	465b      	mov	r3, fp
   2437a:	463a      	mov	r2, r7
   2437c:	ea4f 0a48 	mov.w	sl, r8, lsl #1
   24380:	46b6      	mov	lr, r6
   24382:	46cb      	mov	fp, r9
   24384:	4667      	mov	r7, ip
    for (int out_p = 0; out_p < output_plane; ++out_p) {
   24386:	2900      	cmp	r1, #0
   24388:	f340 80bc 	ble.w	24504 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x618>
                out_p >= output_plane - right_p_padding ||
   2438c:	1bce      	subs	r6, r1, r7
    for (int out_p = 0; out_p < output_plane; ++out_p) {
   2438e:	f04f 0c00 	mov.w	ip, #0
                out_p >= output_plane - right_p_padding ||
   24392:	9606      	str	r6, [sp, #24]
   24394:	f8cd e040 	str.w	lr, [sp, #64]	@ 0x40
      for (int out_h = 0; out_h < output_height; ++out_h) {
   24398:	2b00      	cmp	r3, #0
   2439a:	f340 80ac 	ble.w	244f6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x60a>
   2439e:	2600      	movs	r6, #0
   243a0:	9111      	str	r1, [sp, #68]	@ 0x44
   243a2:	46b9      	mov	r9, r7
        for (int out_w = 0; out_w < output_width; ++out_w) {
   243a4:	2800      	cmp	r0, #0
   243a6:	f340 80a0 	ble.w	244ea <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5fe>
                out_h >= output_height - right_h_padding ||
   243aa:	eba3 0e02 	sub.w	lr, r3, r2
        for (int out_w = 0; out_w < output_width; ++out_w) {
   243ae:	2100      	movs	r1, #0
                out_h >= output_height - right_h_padding ||
   243b0:	f8cd e010 	str.w	lr, [sp, #16]
          for (int out_d = 0; out_d < output_depth; ++out_d) {
   243b4:	f1b8 0f00 	cmp.w	r8, #0
   243b8:	f340 8093 	ble.w	244e2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5f6>
   243bc:	1eaf      	subs	r7, r5, #2
   243be:	9705      	str	r7, [sp, #20]
   243c0:	f04f 0e00 	mov.w	lr, #0
   243c4:	9303      	str	r3, [sp, #12]
   243c6:	e028      	b.n	2441a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x52e>
            if (out_b < left_b_padding ||
   243c8:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
   243ca:	429f      	cmp	r7, r3
   243cc:	dd29      	ble.n	24422 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x536>
                out_b >= output_batch - right_b_padding ||
   243ce:	9f07      	ldr	r7, [sp, #28]
   243d0:	4567      	cmp	r7, ip
   243d2:	dc26      	bgt.n	24422 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x536>
                out_p < left_p_padding ||
   243d4:	9f06      	ldr	r7, [sp, #24]
   243d6:	4567      	cmp	r7, ip
   243d8:	dd23      	ble.n	24422 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x536>
                out_p >= output_plane - right_p_padding ||
   243da:	9f09      	ldr	r7, [sp, #36]	@ 0x24
   243dc:	42b7      	cmp	r7, r6
   243de:	dc20      	bgt.n	24422 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x536>
                out_h < left_h_padding ||
   243e0:	9f04      	ldr	r7, [sp, #16]
   243e2:	42b7      	cmp	r7, r6
   243e4:	dd1d      	ble.n	24422 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x536>
                out_h >= output_height - right_h_padding ||
   243e6:	458b      	cmp	fp, r1
   243e8:	dc1b      	bgt.n	24422 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x536>
                out_w >= output_width - right_w_padding ||
   243ea:	9f08      	ldr	r7, [sp, #32]
   243ec:	1bc7      	subs	r7, r0, r7
                out_w < left_w_padding ||
   243ee:	428f      	cmp	r7, r1
   243f0:	dd17      	ble.n	24422 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x536>
                out_w >= output_width - right_w_padding ||
   243f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   243f4:	4573      	cmp	r3, lr
   243f6:	dc14      	bgt.n	24422 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x536>
                out_d >= output_depth - right_d_padding) {
   243f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   243fa:	eba8 0703 	sub.w	r7, r8, r3
                out_d < left_d_padding ||
   243fe:	4577      	cmp	r7, lr
   24400:	dd0f      	ble.n	24422 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x536>
              *out_ptr++ = *in_ptr++;
   24402:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   24404:	f933 7b02 	ldrsh.w	r7, [r3], #2
   24408:	930d      	str	r3, [sp, #52]	@ 0x34
   2440a:	9b05      	ldr	r3, [sp, #20]
          for (int out_d = 0; out_d < output_depth; ++out_d) {
   2440c:	f10e 0e01 	add.w	lr, lr, #1
   24410:	f823 7f02 	strh.w	r7, [r3, #2]!
   24414:	45f0      	cmp	r8, lr
   24416:	9305      	str	r3, [sp, #20]
   24418:	d061      	beq.n	244de <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5f2>
            if (out_b < left_b_padding ||
   2441a:	e9dd 370a 	ldrd	r3, r7, [sp, #40]	@ 0x28
   2441e:	429f      	cmp	r7, r3
   24420:	ddd2      	ble.n	243c8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4dc>
              *out_ptr++ = pad_value;
   24422:	4627      	mov	r7, r4
   24424:	e7f1      	b.n	2440a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x51e>
              ? 0
   24426:	2c00      	cmp	r4, #0
   24428:	f43f addd 	beq.w	23fe6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfa>
   2442c:	6823      	ldr	r3, [r4, #0]
   2442e:	681c      	ldr	r4, [r3, #0]
   24430:	e5d9      	b.n	23fe6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfa>
            data->params, tflite::micro::GetTensorShape(input),
   24432:	a82a      	add	r0, sp, #168	@ 0xa8
   24434:	f7ff f9c6 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
            tflite::micro::GetTensorShape(output),
   24438:	4629      	mov	r1, r5
   2443a:	a830      	add	r0, sp, #192	@ 0xc0
  return reinterpret_cast<const T*>(tensor->data.raw);
   2443c:	683c      	ldr	r4, [r7, #0]
   2443e:	f7ff f9c1 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   24442:	2d00      	cmp	r5, #0
   24444:	d065      	beq.n	24512 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
  PadImpl(op_params, input_shape, input_data, pad_value_ptr, output_shape,
   24446:	682b      	ldr	r3, [r5, #0]
   24448:	9300      	str	r3, [sp, #0]
   2444a:	eeb0 0a48 	vmov.f32	s0, s16
   2444e:	ab30      	add	r3, sp, #192	@ 0xc0
   24450:	4622      	mov	r2, r4
   24452:	a92a      	add	r1, sp, #168	@ 0xa8
   24454:	4630      	mov	r0, r6
   24456:	f7ff fc45 	bl	23ce4 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0>
  ~RuntimeShape() {}
   2445a:	e5bc      	b.n	23fd6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xea>
        pad_value = static_cast<uint8_t>(data->output_zero_point);
   2445c:	f996 4034 	ldrsb.w	r4, [r6, #52]	@ 0x34
   24460:	e6c3      	b.n	241ea <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2fe>
            data->params, tflite::micro::GetTensorShape(input),
   24462:	a842      	add	r0, sp, #264	@ 0x108
   24464:	f7ff f9ae 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
   24468:	f8d7 8000 	ldr.w	r8, [r7]
            tflite::micro::GetTensorShape(output),
   2446c:	af48      	add	r7, sp, #288	@ 0x120
   2446e:	4629      	mov	r1, r5
   24470:	4638      	mov	r0, r7
   24472:	f7ff f9a7 	bl	237c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   24476:	2d00      	cmp	r5, #0
   24478:	d04b      	beq.n	24512 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
   2447a:	682b      	ldr	r3, [r5, #0]
   2447c:	4642      	mov	r2, r8
   2447e:	e9cd 7300 	strd	r7, r3, [sp]
   24482:	a942      	add	r1, sp, #264	@ 0x108
   24484:	4623      	mov	r3, r4
   24486:	4630      	mov	r0, r6
   24488:	f7ff fb28 	bl	23adc <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0>
   2448c:	e5a3      	b.n	23fd6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xea>
              : *tflite::micro::GetTensorData<int16_t>(constant_values);
   2448e:	2c00      	cmp	r4, #0
   24490:	f43f aec9 	beq.w	24226 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x33a>
   24494:	6823      	ldr	r3, [r4, #0]
   24496:	f9b3 4000 	ldrsh.w	r4, [r3]
   2449a:	e6c4      	b.n	24226 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x33a>
              ? 0.f
   2449c:	2c00      	cmp	r4, #0
   2449e:	f43f ad7d 	beq.w	23f9c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb0>
   244a2:	6823      	ldr	r3, [r4, #0]
   244a4:	ed93 8a00 	vldr	s16, [r3]
   244a8:	e57a      	b.n	23fa0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb4>
   244aa:	9b03      	ldr	r3, [sp, #12]
   244ac:	4455      	add	r5, sl
        for (int out_w = 0; out_w < output_width; ++out_w) {
   244ae:	3101      	adds	r1, #1
   244b0:	4288      	cmp	r0, r1
   244b2:	f47f ae5a 	bne.w	2416a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x27e>
      for (int out_h = 0; out_h < output_height; ++out_h) {
   244b6:	3601      	adds	r6, #1
   244b8:	42b3      	cmp	r3, r6
   244ba:	f47f ae4e 	bne.w	2415a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x26e>
   244be:	9911      	ldr	r1, [sp, #68]	@ 0x44
   244c0:	464f      	mov	r7, r9
    for (int out_p = 0; out_p < output_plane; ++out_p) {
   244c2:	f10c 0c01 	add.w	ip, ip, #1
   244c6:	4561      	cmp	r1, ip
   244c8:	f47f ae41 	bne.w	2414e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x262>
   244cc:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   244d0:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
   244d2:	3601      	adds	r6, #1
   244d4:	45b6      	cmp	lr, r6
   244d6:	960a      	str	r6, [sp, #40]	@ 0x28
   244d8:	f47f ae30 	bne.w	2413c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x250>
   244dc:	e57b      	b.n	23fd6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xea>
   244de:	9b03      	ldr	r3, [sp, #12]
   244e0:	4455      	add	r5, sl
        for (int out_w = 0; out_w < output_width; ++out_w) {
   244e2:	3101      	adds	r1, #1
   244e4:	4288      	cmp	r0, r1
   244e6:	f47f af65 	bne.w	243b4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4c8>
      for (int out_h = 0; out_h < output_height; ++out_h) {
   244ea:	3601      	adds	r6, #1
   244ec:	42b3      	cmp	r3, r6
   244ee:	f47f af59 	bne.w	243a4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4b8>
   244f2:	9911      	ldr	r1, [sp, #68]	@ 0x44
   244f4:	464f      	mov	r7, r9
    for (int out_p = 0; out_p < output_plane; ++out_p) {
   244f6:	f10c 0c01 	add.w	ip, ip, #1
   244fa:	4561      	cmp	r1, ip
   244fc:	f47f af4c 	bne.w	24398 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4ac>
   24500:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   24504:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
   24506:	3601      	adds	r6, #1
   24508:	45b6      	cmp	lr, r6
   2450a:	960a      	str	r6, [sp, #40]	@ 0x28
   2450c:	f47f af3b 	bne.w	24386 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x49a>
   24510:	e561      	b.n	23fd6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xea>
  TFLITE_DCHECK(node->user_data != nullptr);
   24512:	f000 ff35 	bl	25380 <abort>
   24516:	bf00      	nop

00024518 <_ZN6tflite12Register_PADEv>:

TfLiteRegistration Register_PAD() {
   24518:	b510      	push	{r4, lr}
   2451a:	b082      	sub	sp, #8
  return tflite::micro::RegisterOp(Init, PadPrepare, Eval);
   2451c:	2100      	movs	r1, #0
   2451e:	9100      	str	r1, [sp, #0]
   24520:	4b04      	ldr	r3, [pc, #16]	@ (24534 <_ZN6tflite12Register_PADEv+0x1c>)
   24522:	4a05      	ldr	r2, [pc, #20]	@ (24538 <_ZN6tflite12Register_PADEv+0x20>)
   24524:	4905      	ldr	r1, [pc, #20]	@ (2453c <_ZN6tflite12Register_PADEv+0x24>)
TfLiteRegistration Register_PAD() {
   24526:	4604      	mov	r4, r0
  return tflite::micro::RegisterOp(Init, PadPrepare, Eval);
   24528:	f7ff f91a 	bl	23760 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>
}
   2452c:	4620      	mov	r0, r4
   2452e:	b002      	add	sp, #8
   24530:	bd10      	pop	{r4, pc}
   24532:	bf00      	nop
   24534:	00023eed 	.word	0x00023eed
   24538:	00023871 	.word	0x00023871
   2453c:	00023861 	.word	0x00023861

00024540 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  int32_t num_rows;
  int32_t row_size;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   24540:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   24542:	b10b      	cbz	r3, 24548 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x8>
  return context->AllocatePersistentBuffer(context,
   24544:	2140      	movs	r1, #64	@ 0x40
   24546:	4718      	bx	r3
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   24548:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   2454a:	f000 ff19 	bl	25380 <abort>
   2454e:	bf00      	nop

00024550 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:
  micro_context->DeallocateTempTfLiteTensor(input);
  micro_context->DeallocateTempTfLiteTensor(output);
  return ret_val;
}

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
   24550:	b570      	push	{r4, r5, r6, lr}
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
   24552:	2200      	movs	r2, #0
TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
   24554:	b084      	sub	sp, #16
   24556:	460c      	mov	r4, r1
   24558:	4606      	mov	r6, r0
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
   2455a:	f7ff f90d 	bl	23778 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
   2455e:	4621      	mov	r1, r4
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
   24560:	4605      	mov	r5, r0
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
   24562:	2200      	movs	r2, #0
   24564:	4630      	mov	r0, r6
   24566:	f7ff f921 	bl	237ac <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>

  TFLITE_DCHECK(node->user_data != nullptr);
   2456a:	68e4      	ldr	r4, [r4, #12]
   2456c:	b1bc      	cbz	r4, 2459e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x4e>
  const CMSISNNSoftmaxParams op_data =
      *static_cast<const CMSISNNSoftmaxParams*>(node->user_data);

  switch (input->type) {
   2456e:	7a2b      	ldrb	r3, [r5, #8]
   24570:	2b09      	cmp	r3, #9
   24572:	d002      	beq.n	2457a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x2a>
    case kTfLiteFloat32: {
#if EI_TFLITE_DISABLE_SOFTMAX_IN_F32
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
                  input->type);
      return kTfLiteError;
   24574:	2001      	movs	r0, #1
    default:
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
                  input->type);
      return kTfLiteError;
  }
}
   24576:	b004      	add	sp, #16
   24578:	bd70      	pop	{r4, r5, r6, pc}
      if (output->type == kTfLiteInt8) {
   2457a:	7a03      	ldrb	r3, [r0, #8]
   2457c:	2b09      	cmp	r3, #9
   2457e:	d1f9      	bne.n	24574 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x24>
        arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input),
   24580:	6806      	ldr	r6, [r0, #0]
   24582:	68a3      	ldr	r3, [r4, #8]
   24584:	6828      	ldr	r0, [r5, #0]
   24586:	e9d4 120e 	ldrd	r1, r2, [r4, #56]	@ 0x38
   2458a:	9602      	str	r6, [sp, #8]
   2458c:	69a5      	ldr	r5, [r4, #24]
   2458e:	9501      	str	r5, [sp, #4]
   24590:	68e4      	ldr	r4, [r4, #12]
   24592:	9400      	str	r4, [sp, #0]
   24594:	f7f9 ff52 	bl	1e43c <arm_softmax_s8>
      return kTfLiteOk;
   24598:	2000      	movs	r0, #0
}
   2459a:	b004      	add	sp, #16
   2459c:	bd70      	pop	{r4, r5, r6, pc}
  TFLITE_DCHECK(node->user_data != nullptr);
   2459e:	f000 feef 	bl	25380 <abort>
   245a2:	bf00      	nop

000245a4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   245a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   245a8:	680b      	ldr	r3, [r1, #0]
   245aa:	6886      	ldr	r6, [r0, #8]
   245ac:	b08f      	sub	sp, #60	@ 0x3c
   245ae:	b113      	cbz	r3, 245b6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x12>
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   245b0:	681b      	ldr	r3, [r3, #0]
   245b2:	2b01      	cmp	r3, #1
   245b4:	d004      	beq.n	245c0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1c>
   245b6:	2401      	movs	r4, #1
}
   245b8:	4620      	mov	r0, r4
   245ba:	b00f      	add	sp, #60	@ 0x3c
   245bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return node->outputs == nullptr ? 0 : node->outputs->size;
   245c0:	684b      	ldr	r3, [r1, #4]
   245c2:	460c      	mov	r4, r1
   245c4:	2b00      	cmp	r3, #0
   245c6:	d0f6      	beq.n	245b6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x12>
   245c8:	681f      	ldr	r7, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   245ca:	2f01      	cmp	r7, #1
   245cc:	d1f3      	bne.n	245b6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x12>
  TfLiteTensor* input = micro_context->AllocateTempInputTensor(node, 0);
   245ce:	6833      	ldr	r3, [r6, #0]
   245d0:	4605      	mov	r5, r0
   245d2:	699b      	ldr	r3, [r3, #24]
   245d4:	2200      	movs	r2, #0
   245d6:	4630      	mov	r0, r6
   245d8:	4798      	blx	r3
  TF_LITE_ENSURE(context, input != nullptr);
   245da:	4680      	mov	r8, r0
   245dc:	2800      	cmp	r0, #0
   245de:	d0ea      	beq.n	245b6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x12>
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   245e0:	6943      	ldr	r3, [r0, #20]
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
   245e2:	681b      	ldr	r3, [r3, #0]
   245e4:	2b00      	cmp	r3, #0
   245e6:	dde6      	ble.n	245b6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x12>
  TfLiteTensor* output = micro_context->AllocateTempOutputTensor(node, 0);
   245e8:	6833      	ldr	r3, [r6, #0]
   245ea:	2200      	movs	r2, #0
   245ec:	69db      	ldr	r3, [r3, #28]
   245ee:	4621      	mov	r1, r4
   245f0:	4630      	mov	r0, r6
   245f2:	4798      	blx	r3
  TF_LITE_ENSURE(context, output != nullptr);
   245f4:	4681      	mov	r9, r0
   245f6:	2800      	cmp	r0, #0
   245f8:	d0dd      	beq.n	245b6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x12>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
   245fa:	f8d4 a00c 	ldr.w	sl, [r4, #12]
   245fe:	f1ba 0f00 	cmp.w	sl, #0
   24602:	d0d8      	beq.n	245b6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x12>
  auto ret_val = CalculateSoftmaxParams(context, input, output, params,
   24604:	6923      	ldr	r3, [r4, #16]
   24606:	f8cd a000 	str.w	sl, [sp]
   2460a:	4628      	mov	r0, r5
   2460c:	464a      	mov	r2, r9
   2460e:	4641      	mov	r1, r8
   24610:	f000 f866 	bl	246e0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
  const int dims_size = dims->size;
   24614:	f8d8 1014 	ldr.w	r1, [r8, #20]
   24618:	f851 5b04 	ldr.w	r5, [r1], #4
      : size_(dimensions_count) {
   2461c:	9502      	str	r5, [sp, #8]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   2461e:	00aa      	lsls	r2, r5, #2
   24620:	4604      	mov	r4, r0
   24622:	a803      	add	r0, sp, #12
   24624:	f7f3 ffac 	bl	18580 <memcpy>
   24628:	f8d9 1014 	ldr.w	r1, [r9, #20]
   2462c:	f851 bb04 	ldr.w	fp, [r1], #4
   24630:	a809      	add	r0, sp, #36	@ 0x24
   24632:	ea4f 028b 	mov.w	r2, fp, lsl #2
   24636:	f7f3 ffa3 	bl	18580 <memcpy>
  for (int i = 0; i < dims_count; ++i) {
   2463a:	2d00      	cmp	r5, #0
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   2463c:	f105 31ff 	add.w	r1, r5, #4294967295	@ 0xffffffff
   24640:	dd37      	ble.n	246b2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x10e>
   24642:	2300      	movs	r3, #0
    if (i != skip_dim) {
   24644:	4299      	cmp	r1, r3
   24646:	d00d      	beq.n	24664 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc0>
    return dims_[i];
   24648:	aa02      	add	r2, sp, #8
   2464a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    TFLITE_DCHECK_LT(i, size_);
   2464e:	459b      	cmp	fp, r3
    return dims_[i];
   24650:	6850      	ldr	r0, [r2, #4]
   24652:	ea4f 0283 	mov.w	r2, r3, lsl #2
    TFLITE_DCHECK_LT(i, size_);
   24656:	dd2c      	ble.n	246b2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x10e>
    return dims_[i];
   24658:	f10d 0c20 	add.w	ip, sp, #32
   2465c:	4462      	add	r2, ip
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   2465e:	6852      	ldr	r2, [r2, #4]
   24660:	4282      	cmp	r2, r0
   24662:	d126      	bne.n	246b2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x10e>
  for (int i = 0; i < dims_count; ++i) {
   24664:	3301      	adds	r3, #1
   24666:	42ab      	cmp	r3, r5
   24668:	d1ec      	bne.n	24644 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xa0>
   2466a:	2300      	movs	r3, #0
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   2466c:	4299      	cmp	r1, r3
   2466e:	d005      	beq.n	2467c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xd8>
   24670:	aa02      	add	r2, sp, #8
   24672:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   24676:	6852      	ldr	r2, [r2, #4]
   24678:	fb02 f707 	mul.w	r7, r2, r7
  for (int i = 0; i < dims_count; ++i) {
   2467c:	3301      	adds	r3, #1
   2467e:	429d      	cmp	r5, r3
   24680:	d1f4      	bne.n	2466c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
   24682:	ab0e      	add	r3, sp, #56	@ 0x38
   24684:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    TFLITE_DCHECK_LT(i, size_);
   24688:	4559      	cmp	r1, fp
    return dims_[i];
   2468a:	f853 2c2c 	ldr.w	r2, [r3, #-44]
    TFLITE_DCHECK_LT(i, size_);
   2468e:	da10      	bge.n	246b2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x10e>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   24690:	f853 3c14 	ldr.w	r3, [r3, #-20]
   24694:	4293      	cmp	r3, r2
   24696:	d10c      	bne.n	246b2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x10e>
  op_data->row_size = depth;
   24698:	e9ca 730e 	strd	r7, r3, [sl, #56]	@ 0x38
  micro_context->DeallocateTempTfLiteTensor(input);
   2469c:	6833      	ldr	r3, [r6, #0]
   2469e:	4641      	mov	r1, r8
   246a0:	4630      	mov	r0, r6
   246a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   246a4:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
   246a6:	6833      	ldr	r3, [r6, #0]
   246a8:	4649      	mov	r1, r9
   246aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   246ac:	4630      	mov	r0, r6
   246ae:	4798      	blx	r3
  ~RuntimeShape() {}
   246b0:	e782      	b.n	245b8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14>
    TFLITE_DCHECK_LT(i, size_);
   246b2:	f000 fe65 	bl	25380 <abort>
   246b6:	bf00      	nop

000246b8 <_ZN6tflite16Register_SOFTMAXEv>:
  return kTfLiteOk;
}

}  // namespace

TfLiteRegistration Register_SOFTMAX() {
   246b8:	b510      	push	{r4, lr}
   246ba:	b082      	sub	sp, #8
  return tflite::micro::RegisterOp(Init, Prepare, SoftmaxEval);
   246bc:	2100      	movs	r1, #0
   246be:	9100      	str	r1, [sp, #0]
   246c0:	4b04      	ldr	r3, [pc, #16]	@ (246d4 <_ZN6tflite16Register_SOFTMAXEv+0x1c>)
   246c2:	4a05      	ldr	r2, [pc, #20]	@ (246d8 <_ZN6tflite16Register_SOFTMAXEv+0x20>)
   246c4:	4905      	ldr	r1, [pc, #20]	@ (246dc <_ZN6tflite16Register_SOFTMAXEv+0x24>)
TfLiteRegistration Register_SOFTMAX() {
   246c6:	4604      	mov	r4, r0
  return tflite::micro::RegisterOp(Init, Prepare, SoftmaxEval);
   246c8:	f7ff f84a 	bl	23760 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>
}
   246cc:	4620      	mov	r0, r4
   246ce:	b002      	add	sp, #8
   246d0:	bd10      	pop	{r4, pc}
   246d2:	bf00      	nop
   246d4:	00024551 	.word	0x00024551
   246d8:	000245a5 	.word	0x000245a5
   246dc:	00024541 	.word	0x00024541

000246e0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:
  if (InitializeLutForInt16(context, input, output, op_data) != kTfLiteOk) {
    return kTfLiteError;
  }
#endif

  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
   246e0:	7f08      	ldrb	r0, [r1, #28]
   246e2:	2809      	cmp	r0, #9
   246e4:	d001      	beq.n	246ea <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xa>
    if (input->type == kTfLiteInt16) {
#if EI_TFLITE_DISABLE_SOFTMAX_IN_I16
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
   246e6:	2001      	movs	r0, #1
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
    op_data->beta = static_cast<double>(params->beta);
  }
  return kTfLiteOk;
}
   246e8:	4770      	bx	lr
                                    SoftmaxParams* op_data) {
   246ea:	b5f0      	push	{r4, r5, r6, r7, lr}
      if (output->type == kTfLiteInt16) {
   246ec:	7f10      	ldrb	r0, [r2, #28]
                                    SoftmaxParams* op_data) {
   246ee:	ed2d 8b02 	vpush	{d8}
      if (output->type == kTfLiteInt16) {
   246f2:	2807      	cmp	r0, #7
                                    SoftmaxParams* op_data) {
   246f4:	b083      	sub	sp, #12
   246f6:	461f      	mov	r7, r3
      if (output->type == kTfLiteInt16) {
   246f8:	d006      	beq.n	24708 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28>
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
   246fa:	2809      	cmp	r0, #9
   246fc:	d049      	beq.n	24792 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xb2>
      return kTfLiteError;
   246fe:	2001      	movs	r0, #1
}
   24700:	b003      	add	sp, #12
   24702:	ecbd 8b02 	vpop	{d8}
   24706:	bdf0      	pop	{r4, r5, r6, r7, pc}
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
   24708:	68d0      	ldr	r0, [r2, #12]
   2470a:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
   2470e:	d1f6      	bne.n	246fe <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1e>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
   24710:	ed92 7a02 	vldr	s14, [r2, #8]
   24714:	eddf 7a25 	vldr	s15, [pc, #148]	@ 247ac <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xcc>
   24718:	eeb4 7ae7 	vcmpe.f32	s14, s15
   2471c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   24720:	bfcc      	ite	gt
   24722:	ee77 7a67 	vsubgt.f32	s15, s14, s15
   24726:	ee77 7ac7 	vsuble.f32	s15, s15, s14
   2472a:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 247b0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xd0>
   2472e:	eef4 7ac7 	vcmpe.f32	s15, s14
   24732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   24736:	dce2      	bgt.n	246fe <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1e>
      tflite::PreprocessSoftmaxScaling(
   24738:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   2473a:	6888      	ldr	r0, [r1, #8]
   2473c:	f103 0608 	add.w	r6, r3, #8
   24740:	f7f4 f98e 	bl	18a60 <__aeabi_f2d>
   24744:	4604      	mov	r4, r0
   24746:	6838      	ldr	r0, [r7, #0]
   24748:	460d      	mov	r5, r1
   2474a:	f7f4 f989 	bl	18a60 <__aeabi_f2d>
   2474e:	ec45 4b18 	vmov	d8, r4, r5
   24752:	ec41 0b10 	vmov	d0, r0, r1
   24756:	eeb0 1a48 	vmov.f32	s2, s16
   2475a:	eef0 1a68 	vmov.f32	s3, s17
   2475e:	aa01      	add	r2, sp, #4
   24760:	4631      	mov	r1, r6
   24762:	2005      	movs	r0, #5
   24764:	f7fc faf0 	bl	20d48 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
      op_data->input_left_shift = input_left_shift;
   24768:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   2476a:	9901      	ldr	r1, [sp, #4]
   2476c:	60d9      	str	r1, [r3, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
   2476e:	221f      	movs	r2, #31
   24770:	2005      	movs	r0, #5
   24772:	f7fc fb33 	bl	20ddc <_ZN6tflite20CalculateInputRadiusEiii>
   24776:	f7f4 f961 	bl	18a3c <__aeabi_i2d>
   2477a:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
      op_data->diff_min =
   2477e:	f7f4 fc77 	bl	19070 <__aeabi_d2iz>
   24782:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
   24784:	4603      	mov	r3, r0
  return kTfLiteOk;
   24786:	2000      	movs	r0, #0
      op_data->diff_min =
   24788:	6193      	str	r3, [r2, #24]
}
   2478a:	b003      	add	sp, #12
   2478c:	ecbd 8b02 	vpop	{d8}
   24790:	bdf0      	pop	{r4, r5, r6, r7, pc}
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
   24792:	68d0      	ldr	r0, [r2, #12]
   24794:	3080      	adds	r0, #128	@ 0x80
   24796:	d1b2      	bne.n	246fe <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1e>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
   24798:	eddf 7a06 	vldr	s15, [pc, #24]	@ 247b4 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xd4>
   2479c:	ed92 7a02 	vldr	s14, [r2, #8]
   247a0:	eeb4 7a67 	vcmp.f32	s14, s15
   247a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   247a8:	d0c6      	beq.n	24738 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x58>
   247aa:	e7a8      	b.n	246fe <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1e>
   247ac:	37800000 	.word	0x37800000
   247b0:	3283126f 	.word	0x3283126f
   247b4:	3b800000 	.word	0x3b800000

000247b8 <_ZN6tflite14AlignPointerUpEPhj>:
namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
   247b8:	1e4b      	subs	r3, r1, #1
   247ba:	4418      	add	r0, r3
   247bc:	fbb0 f0f1 	udiv	r0, r0, r1
  return aligned_result;
}
   247c0:	fb01 f000 	mul.w	r0, r1, r0
   247c4:	4770      	bx	lr
   247c6:	bf00      	nop

000247c8 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>:
      bytes, MicroArenaBufferAlignment());
}

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(size_t bytes,
                                                         int subgraph_idx,
                                                         int* buffer_idx) {
   247c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   247cc:	4605      	mov	r5, r0
   247ce:	4688      	mov	r8, r1

  return kTfLiteOk;
}

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
  return reinterpret_cast<internal::ScratchBufferRequest*>(AlignPointerUp(
   247d0:	69c0      	ldr	r0, [r0, #28]
   247d2:	2104      	movs	r1, #4
                                                         int* buffer_idx) {
   247d4:	4617      	mov	r7, r2
   247d6:	461e      	mov	r6, r3
  return reinterpret_cast<internal::ScratchBufferRequest*>(AlignPointerUp(
   247d8:	f7ff ffee 	bl	247b8 <_ZN6tflite14AlignPointerUpEPhj>
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
   247dc:	69a9      	ldr	r1, [r5, #24]
  return reinterpret_cast<internal::ScratchBufferRequest*>(AlignPointerUp(
   247de:	4684      	mov	ip, r0
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
   247e0:	b179      	cbz	r1, 24802 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x3a>
   247e2:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   247e6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  size_t current_node_request_count = 0;
   247ea:	2200      	movs	r2, #0
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
   247ec:	f8dc 4004 	ldr.w	r4, [ip, #4]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
   247f0:	f10c 0c0c 	add.w	ip, ip, #12
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
   247f4:	3401      	adds	r4, #1
      ++current_node_request_count;
   247f6:	bf08      	it	eq
   247f8:	3201      	addeq	r2, #1
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
   247fa:	459c      	cmp	ip, r3
   247fc:	d1f6      	bne.n	247ec <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x24>
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
   247fe:	2a0b      	cmp	r2, #11
   24800:	d80e      	bhi.n	24820 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x58>
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
   24802:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
   24806:	f8cc 3004 	str.w	r3, [ip, #4]
  current_request->bytes = bytes;
   2480a:	f8cc 8000 	str.w	r8, [ip]
  current_request->subgraph_idx = subgraph_idx;
   2480e:	f8cc 7008 	str.w	r7, [ip, #8]
  *buffer_idx = scratch_buffer_request_count_;
   24812:	6031      	str	r1, [r6, #0]
  ++scratch_buffer_request_count_;
   24814:	69ab      	ldr	r3, [r5, #24]
   24816:	3301      	adds	r3, #1
  return kTfLiteOk;
   24818:	2000      	movs	r0, #0
  ++scratch_buffer_request_count_;
   2481a:	61ab      	str	r3, [r5, #24]
}
   2481c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return kTfLiteError;
   24820:	2001      	movs	r0, #1
}
   24822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24826:	bf00      	nop

00024828 <_ZN6tflite12MicroContextD1Ev>:
namespace tflite {
MicroContext::MicroContext(MicroAllocator* allocator, const Model* model,
                           MicroGraph* graph)
    : allocator_(*allocator), graph_(*graph), model_(model) {}

MicroContext::~MicroContext() {}
   24828:	4770      	bx	lr
   2482a:	bf00      	nop

0002482c <_ZN6tflite12MicroContext24AllocatePersistentBufferEj>:

void* MicroContext::AllocatePersistentBuffer(size_t bytes) {
  return allocator_.AllocatePersistentBuffer(bytes);
   2482c:	6840      	ldr	r0, [r0, #4]
   2482e:	6803      	ldr	r3, [r0, #0]
   24830:	695b      	ldr	r3, [r3, #20]
   24832:	4718      	bx	r3

00024834 <_ZN6tflite12MicroContext16GetScratchBufferEi>:
      bytes, graph_.GetCurrentSubgraphIndex(), buffer_idx);
}

void* MicroContext::GetScratchBuffer(int buffer_idx) {
  ScratchBufferHandle* handle = scratch_buffer_handles_ + buffer_idx;
  return handle->data;
   24834:	6903      	ldr	r3, [r0, #16]
}
   24836:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   2483a:	4770      	bx	lr

0002483c <_ZN6tflite12MicroContext24AllocateTempTfLiteTensorEi>:

TfLiteTensor* MicroContext::AllocateTempTfLiteTensor(int tensor_idx) {
   2483c:	b530      	push	{r4, r5, lr}
   2483e:	4602      	mov	r2, r0
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
   24840:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
TfLiteTensor* MicroContext::AllocateTempTfLiteTensor(int tensor_idx) {
   24844:	460b      	mov	r3, r1
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
   24846:	68d1      	ldr	r1, [r2, #12]
   24848:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
TfLiteTensor* MicroContext::AllocateTempTfLiteTensor(int tensor_idx) {
   2484c:	b083      	sub	sp, #12
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
   2484e:	6804      	ldr	r4, [r0, #0]
   24850:	9500      	str	r5, [sp, #0]
   24852:	6864      	ldr	r4, [r4, #4]
   24854:	47a0      	blx	r4
                                             tensor_idx,
                                             graph_.GetCurrentSubgraphIndex());
}
   24856:	b003      	add	sp, #12
   24858:	bd30      	pop	{r4, r5, pc}
   2485a:	bf00      	nop

0002485c <_ZN6tflite12MicroContext26DeallocateTempTfLiteTensorEP12TfLiteTensor>:
  }
  return AllocateTempTfLiteTensor(tensor_index);
}

void MicroContext::DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
  return allocator_.DeallocateTempTfLiteTensor(tensor);
   2485c:	6840      	ldr	r0, [r0, #4]
   2485e:	6803      	ldr	r3, [r0, #0]
   24860:	689b      	ldr	r3, [r3, #8]
   24862:	4718      	bx	r3

00024864 <_ZN6tflite12MicroContext13GetEvalTensorEi>:
}

TfLiteEvalTensor* MicroContext::GetEvalTensor(int tensor_idx) {
  return &graph_.GetAllocations()[graph_.GetCurrentSubgraphIndex()]
   24864:	6883      	ldr	r3, [r0, #8]
              .tensors[tensor_idx];
   24866:	e9d3 3204 	ldrd	r3, r2, [r3, #16]
   2486a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2486e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   24872:	6858      	ldr	r0, [r3, #4]
}
   24874:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   24878:	4770      	bx	lr
   2487a:	bf00      	nop

0002487c <_ZN6tflite12MicroContextD0Ev>:
MicroContext::~MicroContext() {}
   2487c:	b510      	push	{r4, lr}
   2487e:	2118      	movs	r1, #24
   24880:	4604      	mov	r4, r0
   24882:	f010 fdd5 	bl	35430 <_ZdlPvj>
   24886:	4620      	mov	r0, r4
   24888:	bd10      	pop	{r4, pc}
   2488a:	bf00      	nop

0002488c <_ZN6tflite12MicroContext27RequestScratchBufferInArenaEjPi>:
                                                       int* buffer_idx) {
   2488c:	4613      	mov	r3, r2
  return allocator_.RequestScratchBufferInArena(
   2488e:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
   24892:	6952      	ldr	r2, [r2, #20]
   24894:	f7ff bf98 	b.w	247c8 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>

00024898 <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei>:
    const TfLiteNode* node, int index) {
   24898:	b530      	push	{r4, r5, lr}
  const int tensor_index = GetTensorIndex(index, node->intermediates->size,
   2489a:	688b      	ldr	r3, [r1, #8]
  if (index >= 0 && index < max_size) {
   2489c:	2a00      	cmp	r2, #0
  const int tensor_index = GetTensorIndex(index, node->intermediates->size,
   2489e:	f853 4b04 	ldr.w	r4, [r3], #4
    const TfLiteNode* node, int index) {
   248a2:	b083      	sub	sp, #12
  if (index >= 0 && index < max_size) {
   248a4:	db1b      	blt.n	248de <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei+0x46>
   248a6:	4294      	cmp	r4, r2
   248a8:	dd19      	ble.n	248de <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei+0x46>
    const int tensor_index = tensor_indices[index];
   248aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  if (tensor_index < 0) {
   248ae:	2b00      	cmp	r3, #0
   248b0:	db15      	blt.n	248de <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei+0x46>
  return AllocateTempTfLiteTensor(tensor_index);
   248b2:	6802      	ldr	r2, [r0, #0]
   248b4:	4c0b      	ldr	r4, [pc, #44]	@ (248e4 <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei+0x4c>)
   248b6:	6952      	ldr	r2, [r2, #20]
   248b8:	42a2      	cmp	r2, r4
   248ba:	4601      	mov	r1, r0
   248bc:	d10a      	bne.n	248d4 <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei+0x3c>
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
   248be:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
   248c2:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
   248c6:	6804      	ldr	r4, [r0, #0]
   248c8:	68c9      	ldr	r1, [r1, #12]
   248ca:	9500      	str	r5, [sp, #0]
   248cc:	6864      	ldr	r4, [r4, #4]
   248ce:	47a0      	blx	r4
}
   248d0:	b003      	add	sp, #12
   248d2:	bd30      	pop	{r4, r5, pc}
  return AllocateTempTfLiteTensor(tensor_index);
   248d4:	4619      	mov	r1, r3
}
   248d6:	b003      	add	sp, #12
   248d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return AllocateTempTfLiteTensor(tensor_index);
   248dc:	4710      	bx	r2
    return nullptr;
   248de:	2000      	movs	r0, #0
}
   248e0:	b003      	add	sp, #12
   248e2:	bd30      	pop	{r4, r5, pc}
   248e4:	0002483d 	.word	0x0002483d

000248e8 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>:
                                                    int index) {
   248e8:	b530      	push	{r4, r5, lr}
      GetTensorIndex(index, node->inputs->size, node->inputs->data);
   248ea:	680b      	ldr	r3, [r1, #0]
  if (index >= 0 && index < max_size) {
   248ec:	2a00      	cmp	r2, #0
      GetTensorIndex(index, node->inputs->size, node->inputs->data);
   248ee:	f853 4b04 	ldr.w	r4, [r3], #4
                                                    int index) {
   248f2:	b083      	sub	sp, #12
  if (index >= 0 && index < max_size) {
   248f4:	db1b      	blt.n	2492e <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei+0x46>
   248f6:	4294      	cmp	r4, r2
   248f8:	dd19      	ble.n	2492e <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei+0x46>
    const int tensor_index = tensor_indices[index];
   248fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  if (tensor_index < 0) {
   248fe:	2b00      	cmp	r3, #0
   24900:	db15      	blt.n	2492e <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei+0x46>
  return AllocateTempTfLiteTensor(tensor_index);
   24902:	6802      	ldr	r2, [r0, #0]
   24904:	4c0b      	ldr	r4, [pc, #44]	@ (24934 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei+0x4c>)
   24906:	6952      	ldr	r2, [r2, #20]
   24908:	42a2      	cmp	r2, r4
   2490a:	4601      	mov	r1, r0
   2490c:	d10a      	bne.n	24924 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei+0x3c>
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
   2490e:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
   24912:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
   24916:	6804      	ldr	r4, [r0, #0]
   24918:	68c9      	ldr	r1, [r1, #12]
   2491a:	9500      	str	r5, [sp, #0]
   2491c:	6864      	ldr	r4, [r4, #4]
   2491e:	47a0      	blx	r4
}
   24920:	b003      	add	sp, #12
   24922:	bd30      	pop	{r4, r5, pc}
  return AllocateTempTfLiteTensor(tensor_index);
   24924:	4619      	mov	r1, r3
}
   24926:	b003      	add	sp, #12
   24928:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return AllocateTempTfLiteTensor(tensor_index);
   2492c:	4710      	bx	r2
    return nullptr;
   2492e:	2000      	movs	r0, #0
}
   24930:	b003      	add	sp, #12
   24932:	bd30      	pop	{r4, r5, pc}
   24934:	0002483d 	.word	0x0002483d

00024938 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>:
                                                     int index) {
   24938:	b530      	push	{r4, r5, lr}
      GetTensorIndex(index, node->outputs->size, node->outputs->data);
   2493a:	684b      	ldr	r3, [r1, #4]
  if (index >= 0 && index < max_size) {
   2493c:	2a00      	cmp	r2, #0
      GetTensorIndex(index, node->outputs->size, node->outputs->data);
   2493e:	f853 4b04 	ldr.w	r4, [r3], #4
                                                     int index) {
   24942:	b083      	sub	sp, #12
  if (index >= 0 && index < max_size) {
   24944:	db1b      	blt.n	2497e <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei+0x46>
   24946:	4294      	cmp	r4, r2
   24948:	dd19      	ble.n	2497e <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei+0x46>
    const int tensor_index = tensor_indices[index];
   2494a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  if (tensor_index < 0) {
   2494e:	2b00      	cmp	r3, #0
   24950:	db15      	blt.n	2497e <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei+0x46>
  return AllocateTempTfLiteTensor(tensor_index);
   24952:	6802      	ldr	r2, [r0, #0]
   24954:	4c0b      	ldr	r4, [pc, #44]	@ (24984 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei+0x4c>)
   24956:	6952      	ldr	r2, [r2, #20]
   24958:	42a2      	cmp	r2, r4
   2495a:	4601      	mov	r1, r0
   2495c:	d10a      	bne.n	24974 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei+0x3c>
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
   2495e:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
   24962:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
   24966:	6804      	ldr	r4, [r0, #0]
   24968:	68c9      	ldr	r1, [r1, #12]
   2496a:	9500      	str	r5, [sp, #0]
   2496c:	6864      	ldr	r4, [r4, #4]
   2496e:	47a0      	blx	r4
}
   24970:	b003      	add	sp, #12
   24972:	bd30      	pop	{r4, r5, pc}
  return AllocateTempTfLiteTensor(tensor_index);
   24974:	4619      	mov	r1, r3
}
   24976:	b003      	add	sp, #12
   24978:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return AllocateTempTfLiteTensor(tensor_index);
   2497c:	4710      	bx	r2
    return nullptr;
   2497e:	2000      	movs	r0, #0
}
   24980:	b003      	add	sp, #12
   24982:	bd30      	pop	{r4, r5, pc}
   24984:	0002483d 	.word	0x0002483d

00024988 <_ZN6tflite12MicroContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_10MicroGraphE>:
    : allocator_(*allocator), graph_(*graph), model_(model) {}
   24988:	e9c0 3202 	strd	r3, r2, [r0, #8]
   2498c:	6041      	str	r1, [r0, #4]
   2498e:	4b03      	ldr	r3, [pc, #12]	@ (2499c <_ZN6tflite12MicroContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_10MicroGraphE+0x14>)
   24990:	6003      	str	r3, [r0, #0]
   24992:	2100      	movs	r1, #0
   24994:	e9c0 1104 	strd	r1, r1, [r0, #16]
   24998:	4770      	bx	lr
   2499a:	bf00      	nop
   2499c:	00044c94 	.word	0x00044c94

000249a0 <_ZN6tflite25MicroContextReportOpErrorEP13TfLiteContextPKcz>:
  external_context_payload_ = external_context_payload;
  return kTfLiteOk;
}

void MicroContextReportOpError(struct TfLiteContext* context,
                               const char* format, ...) {
   249a0:	b40e      	push	{r1, r2, r3}
   249a2:	b500      	push	{lr}
   249a4:	b082      	sub	sp, #8
   249a6:	a903      	add	r1, sp, #12
   249a8:	f851 0b04 	ldr.w	r0, [r1], #4
  va_list args;
  va_start(args, format);
   249ac:	9101      	str	r1, [sp, #4]
  Log(format, args);
   249ae:	f000 f805 	bl	249bc <_Z3LogPKcSt9__va_list>
  va_end(args);
}
   249b2:	b002      	add	sp, #8
   249b4:	f85d eb04 	ldr.w	lr, [sp], #4
   249b8:	b003      	add	sp, #12
   249ba:	4770      	bx	lr

000249bc <_Z3LogPKcSt9__va_list>:
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
  DebugLog(log_buffer);
  DebugLog("\r\n");
#endif
}
   249bc:	4770      	bx	lr
   249be:	bf00      	nop

000249c0 <TfLiteIntArrayEqual>:
#endif
  return computed_size;
}

int TfLiteIntArrayEqual(const TfLiteIntArray* a, const TfLiteIntArray* b) {
  if (a == b) return 1;
   249c0:	4288      	cmp	r0, r1
   249c2:	d017      	beq.n	249f4 <TfLiteIntArrayEqual+0x34>
  if (a == nullptr || b == nullptr) return 0;
   249c4:	b1c0      	cbz	r0, 249f8 <TfLiteIntArrayEqual+0x38>
   249c6:	b1c1      	cbz	r1, 249fa <TfLiteIntArrayEqual+0x3a>
int TfLiteIntArrayEqual(const TfLiteIntArray* a, const TfLiteIntArray* b) {
   249c8:	b430      	push	{r4, r5}
}

int TfLiteIntArrayEqualsArray(const TfLiteIntArray* a, int b_size,
                              const int b_data[]) {
  if (a == nullptr) return (b_size == 0);
  if (a->size != b_size) return 0;
   249ca:	680b      	ldr	r3, [r1, #0]
   249cc:	6805      	ldr	r5, [r0, #0]
   249ce:	42ab      	cmp	r3, r5
   249d0:	d10d      	bne.n	249ee <TfLiteIntArrayEqual+0x2e>
  int i = 0;
  for (; i < a->size; i++)
   249d2:	2d00      	cmp	r5, #0
   249d4:	dd13      	ble.n	249fe <TfLiteIntArrayEqual+0x3e>
  int i = 0;
   249d6:	2300      	movs	r3, #0
   249d8:	e001      	b.n	249de <TfLiteIntArrayEqual+0x1e>
  for (; i < a->size; i++)
   249da:	429d      	cmp	r5, r3
   249dc:	d00f      	beq.n	249fe <TfLiteIntArrayEqual+0x3e>
    if (a->data[i] != b_data[i]) return 0;
   249de:	f850 4f04 	ldr.w	r4, [r0, #4]!
   249e2:	f851 2f04 	ldr.w	r2, [r1, #4]!
   249e6:	4294      	cmp	r4, r2
  for (; i < a->size; i++)
   249e8:	f103 0301 	add.w	r3, r3, #1
    if (a->data[i] != b_data[i]) return 0;
   249ec:	d0f5      	beq.n	249da <TfLiteIntArrayEqual+0x1a>
  if (a == nullptr || b == nullptr) return 0;
   249ee:	2000      	movs	r0, #0
}
   249f0:	bc30      	pop	{r4, r5}
   249f2:	4770      	bx	lr
  if (a == b) return 1;
   249f4:	2001      	movs	r0, #1
   249f6:	4770      	bx	lr
}
   249f8:	4770      	bx	lr
  if (a == nullptr || b == nullptr) return 0;
   249fa:	4608      	mov	r0, r1
   249fc:	4770      	bx	lr
  if (a == b) return 1;
   249fe:	2001      	movs	r0, #1
}
   24a00:	bc30      	pop	{r4, r5}
   24a02:	4770      	bx	lr

00024a04 <_Z29ei_run_impulse_check_canceledv>:

extern ns_timer_config_t ei_tickTimer;

EI_WEAK_FN EI_IMPULSE_ERROR ei_run_impulse_check_canceled() {
    return EI_IMPULSE_OK;
}
   24a04:	2000      	movs	r0, #0
   24a06:	4770      	bx	lr

00024a08 <_Z16ei_read_timer_usv>:

uint64_t ei_read_timer_ms() {
    return ns_us_ticker_read(&ei_tickTimer) / 1000L;
}

uint64_t ei_read_timer_us() {
   24a08:	b508      	push	{r3, lr}
    return ns_us_ticker_read(&ei_tickTimer);
   24a0a:	4802      	ldr	r0, [pc, #8]	@ (24a14 <_Z16ei_read_timer_usv+0xc>)
   24a0c:	f007 fdf4 	bl	2c5f8 <ns_us_ticker_read>

}
   24a10:	2100      	movs	r1, #0
   24a12:	bd08      	pop	{r3, pc}
   24a14:	1000d044 	.word	0x1000d044

00024a18 <_Z9ei_printfPKcz>:

__attribute__((weak)) void ei_printf(const char *format, ...) {
   24a18:	b40f      	push	{r0, r1, r2, r3}
   24a1a:	b570      	push	{r4, r5, r6, lr}
   24a1c:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
   24a20:	f50d 6483 	add.w	r4, sp, #1048	@ 0x418
    char buffer[1024] = {0};
   24a24:	f44f 6580 	mov.w	r5, #1024	@ 0x400
__attribute__((weak)) void ei_printf(const char *format, ...) {
   24a28:	f854 6b04 	ldr.w	r6, [r4], #4
    char buffer[1024] = {0};
   24a2c:	462a      	mov	r2, r5
   24a2e:	2100      	movs	r1, #0
   24a30:	a802      	add	r0, sp, #8
   24a32:	f002 fa53 	bl	26edc <memset>
    int length;
    va_list myargs;
    va_start(myargs, format);
    length = vsnprintf(buffer, sizeof(buffer), format, myargs);
   24a36:	4632      	mov	r2, r6
   24a38:	4629      	mov	r1, r5
   24a3a:	a802      	add	r0, sp, #8
   24a3c:	4623      	mov	r3, r4
    va_start(myargs, format);
   24a3e:	9401      	str	r4, [sp, #4]
    length = vsnprintf(buffer, sizeof(buffer), format, myargs);
   24a40:	f001 fef4 	bl	2682c <vsnprintf>
    va_end(myargs);

    if (length > 0) {
        //ei_usb_send((uint8_t *)buffer, length);
    }
}
   24a44:	f50d 6d81 	add.w	sp, sp, #1032	@ 0x408
   24a48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   24a4c:	b004      	add	sp, #16
   24a4e:	4770      	bx	lr

00024a50 <_Z15ei_printf_floatf>:

__attribute__((weak)) void ei_printf_float(float f) {
   24a50:	b508      	push	{r3, lr}
   24a52:	ee10 0a10 	vmov	r0, s0
    ei_printf("%f", f);
   24a56:	f7f4 f803 	bl	18a60 <__aeabi_f2d>
   24a5a:	4602      	mov	r2, r0
   24a5c:	460b      	mov	r3, r1
   24a5e:	4802      	ldr	r0, [pc, #8]	@ (24a68 <_Z15ei_printf_floatf+0x18>)
   24a60:	f7ff ffda 	bl	24a18 <_Z9ei_printfPKcz>
}
   24a64:	bd08      	pop	{r3, pc}
   24a66:	bf00      	nop
   24a68:	00043a88 	.word	0x00043a88

00024a6c <_Z9ei_mallocj>:

__attribute__((weak)) void *ei_malloc(size_t size) {
    void *p = ns_malloc(size);
   24a6c:	f007 bcfc 	b.w	2c468 <ns_malloc>

00024a70 <_Z9ei_callocjj>:
    return p;
}

__attribute__((weak)) void *ei_calloc(size_t nitems, size_t size) {
   24a70:	b510      	push	{r4, lr}
    void *ret = ns_malloc(nitems*size);
   24a72:	fb01 f400 	mul.w	r4, r1, r0
   24a76:	4620      	mov	r0, r4
   24a78:	f007 fcf6 	bl	2c468 <ns_malloc>
    memset(ret, 0, nitems*size);
   24a7c:	4622      	mov	r2, r4
   24a7e:	2100      	movs	r1, #0
    void *ret = ns_malloc(nitems*size);
   24a80:	4604      	mov	r4, r0
    memset(ret, 0, nitems*size);
   24a82:	f002 fa2b 	bl	26edc <memset>
    return ret;
}
   24a86:	4620      	mov	r0, r4
   24a88:	bd10      	pop	{r4, pc}
   24a8a:	bf00      	nop

00024a8c <_Z7ei_freePv>:

__attribute__((weak)) void ei_free(void *ptr) {
    // ns_lp_printf("free @ 0x%x\n", ptr);
    ns_free(ptr);
   24a8c:	f007 bcf8 	b.w	2c480 <ns_free>

00024a90 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>:


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
   24a90:	4a1c      	ldr	r2, [pc, #112]	@ (24b04 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x74>)
   24a92:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
   24a96:	eb02 0ccc 	add.w	ip, r2, ip, lsl #3
static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
   24a9a:	b430      	push	{r4, r5}
   24a9c:	460b      	mov	r3, r1
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
   24a9e:	f8dc 4004 	ldr.w	r4, [ip, #4]
   24aa2:	4d19      	ldr	r5, [pc, #100]	@ (24b08 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x78>)
  tensor->type = tensorData[i].type;
   24aa4:	f89c 1001 	ldrb.w	r1, [ip, #1]
   24aa8:	7719      	strb	r1, [r3, #28]
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
   24aaa:	42ac      	cmp	r4, r5
  tensor->is_variable = false;
   24aac:	f04f 0100 	mov.w	r1, #0
   24ab0:	7799      	strb	r1, [r3, #30]
  tensor->type = tensorData[i].type;
   24ab2:	ea4f 0140 	mov.w	r1, r0, lsl #1
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
   24ab6:	d321      	bcc.n	24afc <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x6c>
   24ab8:	4d14      	ldr	r5, [pc, #80]	@ (24b0c <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x7c>)
   24aba:	42ac      	cmp	r4, r5
   24abc:	bf34      	ite	cc
   24abe:	f04f 0c02 	movcc.w	ip, #2
   24ac2:	f04f 0c01 	movcs.w	ip, #1
#endif
  tensor->bytes = tensorData[i].bytes;
   24ac6:	4401      	add	r1, r0
   24ac8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
   24acc:	f102 0110 	add.w	r1, r2, #16
   24ad0:	c903      	ldmia	r1, {r0, r1}
   24ad2:	e883 0003 	stmia.w	r3, {r0, r1}
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
   24ad6:	7819      	ldrb	r1, [r3, #0]
  tensor->bytes = tensorData[i].bytes;
   24ad8:	68d5      	ldr	r5, [r2, #12]
  tensor->dims = tensorData[i].dims;
   24ada:	6890      	ldr	r0, [r2, #8]
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
   24adc:	f883 c01d 	strb.w	ip, [r3, #29]
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
   24ae0:	2901      	cmp	r1, #1
  tensor->bytes = tensorData[i].bytes;
   24ae2:	619d      	str	r5, [r3, #24]
  tensor->data.data = tensorData[i].data;
   24ae4:	611c      	str	r4, [r3, #16]
  tensor->dims = tensorData[i].dims;
   24ae6:	6158      	str	r0, [r3, #20]
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
   24ae8:	d106      	bne.n	24af8 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x68>
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
   24aea:	6952      	ldr	r2, [r2, #20]
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
   24aec:	e9d2 1200 	ldrd	r1, r2, [r2]
    tensor->params.scale = quant->scale->data[0];
   24af0:	6849      	ldr	r1, [r1, #4]
    tensor->params.zero_point = quant->zero_point->data[0];
   24af2:	6852      	ldr	r2, [r2, #4]
   24af4:	60da      	str	r2, [r3, #12]
    tensor->params.scale = quant->scale->data[0];
   24af6:	6099      	str	r1, [r3, #8]
  }

}
   24af8:	bc30      	pop	{r4, r5}
   24afa:	4770      	bx	lr
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
   24afc:	f04f 0c01 	mov.w	ip, #1
   24b00:	e7e1      	b.n	24ac6 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x36>
   24b02:	bf00      	nop
   24b04:	00044d48 	.word	0x00044d48
   24b08:	10015f90 	.word	0x10015f90
   24b0c:	1004ff50 	.word	0x1004ff50

00024b10 <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti>:

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
   24b10:	4b04      	ldr	r3, [pc, #16]	@ (24b24 <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti+0x14>)
   24b12:	681b      	ldr	r3, [r3, #0]
   24b14:	428b      	cmp	r3, r1
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
   24b16:	bfa3      	ittte	ge
   24b18:	4b03      	ldrge	r3, [pc, #12]	@ (24b28 <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti+0x18>)
   24b1a:	eb03 03c1 	addge.w	r3, r3, r1, lsl #3
   24b1e:	6858      	ldrge	r0, [r3, #4]
    return NULL;
   24b20:	2000      	movlt	r0, #0
}
   24b22:	4770      	bx	lr
   24b24:	10015cfc 	.word	0x10015cfc
   24b28:	10015d00 	.word	0x10015d00

00024b2c <_ZN12_GLOBAL__N_115EonMicroContext16GetScratchBufferEi>:
  if (buffer_idx > (int)scratch_buffers_ix) {
   24b2c:	4b04      	ldr	r3, [pc, #16]	@ (24b40 <_ZN12_GLOBAL__N_115EonMicroContext16GetScratchBufferEi+0x14>)
   24b2e:	681b      	ldr	r3, [r3, #0]
   24b30:	4299      	cmp	r1, r3
  return scratch_buffers[buffer_idx].ptr;
   24b32:	bfdd      	ittte	le
   24b34:	4b03      	ldrle	r3, [pc, #12]	@ (24b44 <_ZN12_GLOBAL__N_115EonMicroContext16GetScratchBufferEi+0x18>)
   24b36:	eb03 03c1 	addle.w	r3, r3, r1, lsl #3
   24b3a:	6858      	ldrle	r0, [r3, #4]
    return NULL;
   24b3c:	2000      	movgt	r0, #0
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
   24b3e:	4770      	bx	lr
   24b40:	10015cfc 	.word	0x10015cfc
   24b44:	10015d00 	.word	0x10015d00

00024b48 <_ZN12_GLOBAL__N_115EonMicroContext26DeallocateTempTfLiteTensorEP12TfLiteTensor>:
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
   24b48:	4770      	bx	lr
   24b4a:	bf00      	nop

00024b4c <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti>:
  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;
   24b4c:	4a1c      	ldr	r2, [pc, #112]	@ (24bc0 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x74>)
   24b4e:	4b1d      	ldr	r3, [pc, #116]	@ (24bc4 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x78>)
   24b50:	6812      	ldr	r2, [r2, #0]
   24b52:	481d      	ldr	r0, [pc, #116]	@ (24bc8 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x7c>)
   24b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
                                       int tensor_idx) {
   24b58:	b510      	push	{r4, lr}
  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;
   24b5a:	eb01 0c03 	add.w	ip, r1, r3
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
   24b5e:	f647 7eff 	movw	lr, #32767	@ 0x7fff
   24b62:	4603      	mov	r3, r0
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
   24b64:	2100      	movs	r1, #0
    if (tflEvalTensors[ix].index == tensor_idx) {
   24b66:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
   24b6a:	4562      	cmp	r2, ip
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
   24b6c:	f103 0310 	add.w	r3, r3, #16
    if (tflEvalTensors[ix].index == tensor_idx) {
   24b70:	d009      	beq.n	24b86 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x3a>
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
   24b72:	4572      	cmp	r2, lr
   24b74:	d00a      	beq.n	24b8c <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x40>
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
   24b76:	3101      	adds	r1, #1
   24b78:	2904      	cmp	r1, #4
   24b7a:	d1f4      	bne.n	24b66 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x1a>
  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
   24b7c:	4813      	ldr	r0, [pc, #76]	@ (24bcc <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x80>)
   24b7e:	f7ff ff4b 	bl	24a18 <_Z9ei_printfPKcz>
  return nullptr;
   24b82:	2000      	movs	r0, #0
}
   24b84:	bd10      	pop	{r4, pc}
      return &tflEvalTensors[ix].tensor;
   24b86:	eb00 1001 	add.w	r0, r0, r1, lsl #4
}
   24b8a:	bd10      	pop	{r4, pc}
  tensor->type = tensorData[i].type;
   24b8c:	4c10      	ldr	r4, [pc, #64]	@ (24bd0 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x84>)
   24b8e:	eb0c 0e4c 	add.w	lr, ip, ip, lsl #1
   24b92:	eb00 1201 	add.w	r2, r0, r1, lsl #4
   24b96:	010b      	lsls	r3, r1, #4
   24b98:	ea4f 01ce 	mov.w	r1, lr, lsl #3
   24b9c:	eb04 0ece 	add.w	lr, r4, lr, lsl #3
   24ba0:	3108      	adds	r1, #8
   24ba2:	f89e e001 	ldrb.w	lr, [lr, #1]
   24ba6:	f882 e008 	strb.w	lr, [r2, #8]
  tensor->dims = tensorData[i].dims;
   24baa:	eb01 0e04 	add.w	lr, r1, r4
  tensor->data.data = tensorData[i].data;
   24bae:	5861      	ldr	r1, [r4, r1]
   24bb0:	f85e 4c04 	ldr.w	r4, [lr, #-4]
   24bb4:	50c4      	str	r4, [r0, r3]
      return &tflEvalTensors[ix].tensor;
   24bb6:	4610      	mov	r0, r2
  tensor->data.data = tensorData[i].data;
   24bb8:	6051      	str	r1, [r2, #4]
      tflEvalTensors[ix].index = tensor_idx;
   24bba:	f8a2 c00c 	strh.w	ip, [r2, #12]
}
   24bbe:	bd10      	pop	{r4, pc}
   24bc0:	10015d9c 	.word	0x10015d9c
   24bc4:	00044d24 	.word	0x00044d24
   24bc8:	10015e54 	.word	0x10015e54
   24bcc:	00043a8c 	.word	0x00043a8c
   24bd0:	00044d48 	.word	0x00044d48

00024bd4 <_ZN12_GLOBAL__N_115EonMicroContext13GetEvalTensorEi>:
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
   24bd4:	2000      	movs	r0, #0
   24bd6:	f7ff bfb9 	b.w	24b4c <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti>
   24bda:	bf00      	nop

00024bdc <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti>:
  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;
   24bdc:	4a16      	ldr	r2, [pc, #88]	@ (24c38 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x5c>)
   24bde:	4817      	ldr	r0, [pc, #92]	@ (24c3c <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x60>)
   24be0:	6812      	ldr	r2, [r2, #0]
                               int tensor_idx) {
   24be2:	b538      	push	{r3, r4, r5, lr}
  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;
   24be4:	4b16      	ldr	r3, [pc, #88]	@ (24c40 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x64>)
   24be6:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
   24bea:	f647 75ff 	movw	r5, #32767	@ 0x7fff
  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;
   24bee:	440c      	add	r4, r1
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
   24bf0:	4603      	mov	r3, r0
   24bf2:	2100      	movs	r1, #0
    if (tflTensors[ix].index == tensor_idx) {
   24bf4:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
   24bf8:	42a2      	cmp	r2, r4
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
   24bfa:	f103 0324 	add.w	r3, r3, #36	@ 0x24
    if (tflTensors[ix].index == tensor_idx) {
   24bfe:	d00a      	beq.n	24c16 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x3a>
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
   24c00:	42aa      	cmp	r2, r5
   24c02:	d00e      	beq.n	24c22 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x46>
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
   24c04:	3101      	adds	r1, #1
   24c06:	2904      	cmp	r1, #4
   24c08:	d1f4      	bne.n	24bf4 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x18>
  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
   24c0a:	480e      	ldr	r0, [pc, #56]	@ (24c44 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x68>)
  return nullptr;
   24c0c:	2500      	movs	r5, #0
  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
   24c0e:	f7ff ff03 	bl	24a18 <_Z9ei_printfPKcz>
}
   24c12:	4628      	mov	r0, r5
   24c14:	bd38      	pop	{r3, r4, r5, pc}
      return &tflTensors[ix].tensor;
   24c16:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
   24c1a:	eb00 0581 	add.w	r5, r0, r1, lsl #2
}
   24c1e:	4628      	mov	r0, r5
   24c20:	bd38      	pop	{r3, r4, r5, pc}
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
   24c22:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
   24c26:	eb00 0583 	add.w	r5, r0, r3, lsl #2
   24c2a:	4629      	mov	r1, r5
   24c2c:	4620      	mov	r0, r4
   24c2e:	f7ff ff2f 	bl	24a90 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
      tflTensors[ix].index = tensor_idx;
   24c32:	842c      	strh	r4, [r5, #32]
}
   24c34:	4628      	mov	r0, r5
   24c36:	bd38      	pop	{r3, r4, r5, pc}
   24c38:	10015d9c 	.word	0x10015d9c
   24c3c:	10015e94 	.word	0x10015e94
   24c40:	00044d24 	.word	0x00044d24
   24c44:	00043ac4 	.word	0x00043ac4

00024c48 <_ZN12_GLOBAL__N_115EonMicroContext24AllocateTempTfLiteTensorEi>:
    return GetTensorImpl(nullptr, tensor_index);
   24c48:	2000      	movs	r0, #0
   24c4a:	f7ff bfc7 	b.w	24bdc <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti>
   24c4e:	bf00      	nop

00024c50 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj>:
                                       size_t bytes) {
   24c50:	b538      	push	{r3, r4, r5, lr}
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;
   24c52:	f011 030f 	ands.w	r3, r1, #15
  if (current_location - (bytes + align_bytes) < tensor_boundary) {
   24c56:	4d1c      	ldr	r5, [pc, #112]	@ (24cc8 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x78>)
   24c58:	bf14      	ite	ne
   24c5a:	f101 0210 	addne.w	r2, r1, #16
   24c5e:	460a      	moveq	r2, r1
                                       size_t bytes) {
   24c60:	460c      	mov	r4, r1
  if (current_location - (bytes + align_bytes) < tensor_boundary) {
   24c62:	491a      	ldr	r1, [pc, #104]	@ (24ccc <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x7c>)
   24c64:	bf18      	it	ne
   24c66:	1ad2      	subne	r2, r2, r3
   24c68:	682b      	ldr	r3, [r5, #0]
   24c6a:	6809      	ldr	r1, [r1, #0]
   24c6c:	1a9a      	subs	r2, r3, r2
   24c6e:	4291      	cmp	r1, r2
   24c70:	d911      	bls.n	24c96 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x46>
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
   24c72:	4d17      	ldr	r5, [pc, #92]	@ (24cd0 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x80>)
   24c74:	682b      	ldr	r3, [r5, #0]
   24c76:	2b09      	cmp	r3, #9
   24c78:	d81b      	bhi.n	24cb2 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x62>
    ptr = ei_calloc(bytes, 1);
   24c7a:	2101      	movs	r1, #1
   24c7c:	4620      	mov	r0, r4
   24c7e:	f7ff fef7 	bl	24a70 <_Z9ei_callocjj>
    if (ptr == NULL) {
   24c82:	4603      	mov	r3, r0
   24c84:	b1d8      	cbz	r0, 24cbe <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x6e>
    overflow_buffers[overflow_buffers_ix++] = ptr;
   24c86:	682a      	ldr	r2, [r5, #0]
   24c88:	4812      	ldr	r0, [pc, #72]	@ (24cd4 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x84>)
   24c8a:	1c51      	adds	r1, r2, #1
   24c8c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   24c90:	6029      	str	r1, [r5, #0]
}
   24c92:	4618      	mov	r0, r3
   24c94:	bd38      	pop	{r3, r4, r5, pc}
  current_location -= 15; // for alignment
   24c96:	1b1b      	subs	r3, r3, r4
   24c98:	3b0f      	subs	r3, #15
  current_location += 16 - ((uintptr_t)(current_location) & 15);
   24c9a:	f023 030f 	bic.w	r3, r3, #15
   24c9e:	3310      	adds	r3, #16
  memset(ptr, 0, bytes);
   24ca0:	4622      	mov	r2, r4
   24ca2:	2100      	movs	r1, #0
   24ca4:	4618      	mov	r0, r3
  current_location += 16 - ((uintptr_t)(current_location) & 15);
   24ca6:	602b      	str	r3, [r5, #0]
  memset(ptr, 0, bytes);
   24ca8:	f002 f918 	bl	26edc <memset>
   24cac:	4603      	mov	r3, r0
}
   24cae:	4618      	mov	r0, r3
   24cb0:	bd38      	pop	{r3, r4, r5, pc}
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
   24cb2:	4809      	ldr	r0, [pc, #36]	@ (24cd8 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x88>)
   24cb4:	4621      	mov	r1, r4
   24cb6:	f7ff feaf 	bl	24a18 <_Z9ei_printfPKcz>
      return NULL;
   24cba:	2300      	movs	r3, #0
   24cbc:	e7e9      	b.n	24c92 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x42>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
   24cbe:	4807      	ldr	r0, [pc, #28]	@ (24cdc <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x8c>)
   24cc0:	4621      	mov	r1, r4
   24cc2:	f7ff fea9 	bl	24a18 <_Z9ei_printfPKcz>
      return NULL;
   24cc6:	e7f8      	b.n	24cba <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x6a>
   24cc8:	10015f7c 	.word	0x10015f7c
   24ccc:	10015f80 	.word	0x10015f80
   24cd0:	10015d70 	.word	0x10015d70
   24cd4:	10015d74 	.word	0x10015d74
   24cd8:	00043afc 	.word	0x00043afc
   24cdc:	00043b7c 	.word	0x00043b7c

00024ce0 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi>:
                                                int* buffer_idx) {
   24ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
   24ce2:	4f10      	ldr	r7, [pc, #64]	@ (24d24 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x44>)
   24ce4:	683b      	ldr	r3, [r7, #0]
   24ce6:	2b0d      	cmp	r3, #13
   24ce8:	d811      	bhi.n	24d0e <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x2e>
  b.bytes = bytes;
   24cea:	460e      	mov	r6, r1
  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
   24cec:	4614      	mov	r4, r2
   24cee:	f7ff ffaf 	bl	24c50 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj>
  if (!b.ptr) {
   24cf2:	4603      	mov	r3, r0
   24cf4:	b180      	cbz	r0, 24d18 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x38>
  scratch_buffers[scratch_buffers_ix] = b;
   24cf6:	683d      	ldr	r5, [r7, #0]
  *buffer_idx = scratch_buffers_ix;
   24cf8:	6025      	str	r5, [r4, #0]
  scratch_buffers_ix++;
   24cfa:	1c6a      	adds	r2, r5, #1
   24cfc:	603a      	str	r2, [r7, #0]
  scratch_buffers[scratch_buffers_ix] = b;
   24cfe:	4a0a      	ldr	r2, [pc, #40]	@ (24d28 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x48>)
   24d00:	f842 6035 	str.w	r6, [r2, r5, lsl #3]
   24d04:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
  return kTfLiteOk;
   24d08:	2000      	movs	r0, #0
  scratch_buffers[scratch_buffers_ix] = b;
   24d0a:	6053      	str	r3, [r2, #4]
}
   24d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
   24d0e:	4807      	ldr	r0, [pc, #28]	@ (24d2c <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x4c>)
   24d10:	f7ff fe82 	bl	24a18 <_Z9ei_printfPKcz>
    return kTfLiteError;
   24d14:	2001      	movs	r0, #1
}
   24d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
   24d18:	4805      	ldr	r0, [pc, #20]	@ (24d30 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x50>)
   24d1a:	4631      	mov	r1, r6
   24d1c:	f7ff fe7c 	bl	24a18 <_Z9ei_printfPKcz>
    return kTfLiteError;
   24d20:	e7f8      	b.n	24d14 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x34>
   24d22:	bf00      	nop
   24d24:	10015cfc 	.word	0x10015cfc
   24d28:	10015d00 	.word	0x10015d00
   24d2c:	00043bb4 	.word	0x00043bb4
   24d30:	00043c0c 	.word	0x00043c0c

00024d34 <_ZN12_GLOBAL__N_115EonMicroContext24AllocatePersistentBufferEj>:
    return AllocatePersistentBufferImpl(nullptr, bytes);
   24d34:	2000      	movs	r0, #0
   24d36:	f7ff bf8b 	b.w	24c50 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj>
   24d3a:	bf00      	nop

00024d3c <_ZN12_GLOBAL__N_115EonMicroContextD1Ev>:
class EonMicroContext : public MicroContext {
   24d3c:	b510      	push	{r4, lr}
   24d3e:	4b03      	ldr	r3, [pc, #12]	@ (24d4c <_ZN12_GLOBAL__N_115EonMicroContextD1Ev+0x10>)
   24d40:	6003      	str	r3, [r0, #0]
   24d42:	4604      	mov	r4, r0
   24d44:	f7ff fd70 	bl	24828 <_ZN6tflite12MicroContextD1Ev>
   24d48:	4620      	mov	r0, r4
   24d4a:	bd10      	pop	{r4, pc}
   24d4c:	00044cf8 	.word	0x00044cf8

00024d50 <_ZN12_GLOBAL__N_115EonMicroContextD0Ev>:
   24d50:	b510      	push	{r4, lr}
   24d52:	4b05      	ldr	r3, [pc, #20]	@ (24d68 <_ZN12_GLOBAL__N_115EonMicroContextD0Ev+0x18>)
   24d54:	6003      	str	r3, [r0, #0]
   24d56:	4604      	mov	r4, r0
   24d58:	f7ff fd66 	bl	24828 <_ZN6tflite12MicroContextD1Ev>
   24d5c:	4620      	mov	r0, r4
   24d5e:	2118      	movs	r1, #24
   24d60:	f010 fb66 	bl	35430 <_ZdlPvj>
   24d64:	4620      	mov	r0, r4
   24d66:	bd10      	pop	{r4, pc}
   24d68:	00044cf8 	.word	0x00044cf8

00024d6c <_ZN12_GLOBAL__N_115EonMicroContext27RequestScratchBufferInArenaEjPi>:
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
   24d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
   24d6e:	4f10      	ldr	r7, [pc, #64]	@ (24db0 <_ZN12_GLOBAL__N_115EonMicroContext27RequestScratchBufferInArenaEjPi+0x44>)
   24d70:	683b      	ldr	r3, [r7, #0]
   24d72:	2b0d      	cmp	r3, #13
   24d74:	d812      	bhi.n	24d9c <_ZN12_GLOBAL__N_115EonMicroContext27RequestScratchBufferInArenaEjPi+0x30>
  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
   24d76:	2000      	movs	r0, #0
   24d78:	460e      	mov	r6, r1
   24d7a:	4614      	mov	r4, r2
   24d7c:	f7ff ff68 	bl	24c50 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj>
  if (!b.ptr) {
   24d80:	4603      	mov	r3, r0
   24d82:	b180      	cbz	r0, 24da6 <_ZN12_GLOBAL__N_115EonMicroContext27RequestScratchBufferInArenaEjPi+0x3a>
  scratch_buffers[scratch_buffers_ix] = b;
   24d84:	683d      	ldr	r5, [r7, #0]
  *buffer_idx = scratch_buffers_ix;
   24d86:	6025      	str	r5, [r4, #0]
  scratch_buffers_ix++;
   24d88:	1c6a      	adds	r2, r5, #1
   24d8a:	603a      	str	r2, [r7, #0]
  scratch_buffers[scratch_buffers_ix] = b;
   24d8c:	4a09      	ldr	r2, [pc, #36]	@ (24db4 <_ZN12_GLOBAL__N_115EonMicroContext27RequestScratchBufferInArenaEjPi+0x48>)
   24d8e:	f842 6035 	str.w	r6, [r2, r5, lsl #3]
   24d92:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
  return kTfLiteOk;
   24d96:	2000      	movs	r0, #0
  scratch_buffers[scratch_buffers_ix] = b;
   24d98:	6053      	str	r3, [r2, #4]
  }
   24d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
   24d9c:	4806      	ldr	r0, [pc, #24]	@ (24db8 <_ZN12_GLOBAL__N_115EonMicroContext27RequestScratchBufferInArenaEjPi+0x4c>)
   24d9e:	f7ff fe3b 	bl	24a18 <_Z9ei_printfPKcz>
    return kTfLiteError;
   24da2:	2001      	movs	r0, #1
  }
   24da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
   24da6:	4805      	ldr	r0, [pc, #20]	@ (24dbc <_ZN12_GLOBAL__N_115EonMicroContext27RequestScratchBufferInArenaEjPi+0x50>)
   24da8:	4631      	mov	r1, r6
   24daa:	f7ff fe35 	bl	24a18 <_Z9ei_printfPKcz>
    return kTfLiteError;
   24dae:	e7f8      	b.n	24da2 <_ZN12_GLOBAL__N_115EonMicroContext27RequestScratchBufferInArenaEjPi+0x36>
   24db0:	10015cfc 	.word	0x10015cfc
   24db4:	10015d00 	.word	0x10015d00
   24db8:	00043bb4 	.word	0x00043bb4
   24dbc:	00043c0c 	.word	0x00043c0c

00024dc0 <_Z19tflite_learn_7_initPFPvjjE>:
};


} // namespace

TfLiteStatus tflite_learn_7_init( void*(*alloc_fnc)(size_t,size_t) ) {
   24dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
   24dc4:	4c76      	ldr	r4, [pc, #472]	@ (24fa0 <_Z19tflite_learn_7_initPFPvjjE+0x1e0>)
   24dc6:	4a77      	ldr	r2, [pc, #476]	@ (24fa4 <_Z19tflite_learn_7_initPFPvjjE+0x1e4>)
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
   24dc8:	4f77      	ldr	r7, [pc, #476]	@ (24fa8 <_Z19tflite_learn_7_initPFPvjjE+0x1e8>)
  tensor_boundary = tensor_arena;
   24dca:	4e78      	ldr	r6, [pc, #480]	@ (24fac <_Z19tflite_learn_7_initPFPvjjE+0x1ec>)
   24dcc:	4d78      	ldr	r5, [pc, #480]	@ (24fb0 <_Z19tflite_learn_7_initPFPvjjE+0x1f0>)
TfLiteStatus tflite_learn_7_init( void*(*alloc_fnc)(size_t,size_t) ) {
   24dce:	b09b      	sub	sp, #108	@ 0x6c
  memset(tensor_arena, 0, kTensorArenaSize);
   24dd0:	2100      	movs	r1, #0
   24dd2:	4620      	mov	r0, r4
   24dd4:	f002 f882 	bl	26edc <memset>
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }
   24dd8:	f10d 0b30 	add.w	fp, sp, #48	@ 0x30
   24ddc:	2300      	movs	r3, #0
  current_location = tensor_arena + kTensorArenaSize;
   24dde:	4a75      	ldr	r2, [pc, #468]	@ (24fb4 <_Z19tflite_learn_7_initPFPvjjE+0x1f4>)
   24de0:	603a      	str	r2, [r7, #0]
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }
   24de2:	4619      	mov	r1, r3
   24de4:	461a      	mov	r2, r3
   24de6:	4658      	mov	r0, fp
  tensor_boundary = tensor_arena;
   24de8:	6034      	str	r4, [r6, #0]
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }
   24dea:	f7ff fdcd 	bl	24988 <_ZN6tflite12MicroContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_10MicroGraphE>

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
   24dee:	4b72      	ldr	r3, [pc, #456]	@ (24fb8 <_Z19tflite_learn_7_initPFPvjjE+0x1f8>)
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }
   24df0:	4a72      	ldr	r2, [pc, #456]	@ (24fbc <_Z19tflite_learn_7_initPFPvjjE+0x1fc>)
   24df2:	920c      	str	r2, [sp, #48]	@ 0x30
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
   24df4:	4a72      	ldr	r2, [pc, #456]	@ (24fc0 <_Z19tflite_learn_7_initPFPvjjE+0x200>)
   24df6:	635a      	str	r2, [r3, #52]	@ 0x34
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
   24df8:	4a72      	ldr	r2, [pc, #456]	@ (24fc4 <_Z19tflite_learn_7_initPFPvjjE+0x204>)
   24dfa:	63da      	str	r2, [r3, #60]	@ 0x3c
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
   24dfc:	4a72      	ldr	r2, [pc, #456]	@ (24fc8 <_Z19tflite_learn_7_initPFPvjjE+0x208>)
   24dfe:	641a      	str	r2, [r3, #64]	@ 0x40
  ctx.GetTensor = &GetTensorImpl;
   24e00:	4a72      	ldr	r2, [pc, #456]	@ (24fcc <_Z19tflite_learn_7_initPFPvjjE+0x20c>)
   24e02:	64da      	str	r2, [r3, #76]	@ 0x4c
  ctx.GetEvalTensor = &GetEvalTensorImpl;
   24e04:	4a72      	ldr	r2, [pc, #456]	@ (24fd0 <_Z19tflite_learn_7_initPFPvjjE+0x210>)
   24e06:	651a      	str	r2, [r3, #80]	@ 0x50
  ctx.ReportError = &MicroContextReportOpError;
   24e08:	4a72      	ldr	r2, [pc, #456]	@ (24fd4 <_Z19tflite_learn_7_initPFPvjjE+0x214>)
   24e0a:	611a      	str	r2, [r3, #16]
  for (size_t i = 0; i < 72; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
   24e0c:	f8d6 8000 	ldr.w	r8, [r6]
  ctx.impl_ = static_cast<void*>(&micro_context_);
   24e10:	f8c3 b008 	str.w	fp, [r3, #8]
  ctx.tensors_size = 72;
   24e14:	2248      	movs	r2, #72	@ 0x48
   24e16:	601a      	str	r2, [r3, #0]
  for (size_t i = 0; i < 72; ++i) {
   24e18:	2400      	movs	r4, #0
    init_tflite_tensor(i, &tensor);
   24e1a:	4620      	mov	r0, r4
   24e1c:	a912      	add	r1, sp, #72	@ 0x48
   24e1e:	f7ff fe37 	bl	24a90 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
    if (tensor.allocation_type == kTfLiteArenaRw) {
   24e22:	f89d 3065 	ldrb.w	r3, [sp, #101]	@ 0x65
   24e26:	2b02      	cmp	r3, #2
  for (size_t i = 0; i < 72; ++i) {
   24e28:	f104 0401 	add.w	r4, r4, #1
    if (tensor.allocation_type == kTfLiteArenaRw) {
   24e2c:	d106      	bne.n	24e3c <_Z19tflite_learn_7_initPFPvjjE+0x7c>
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
   24e2e:	68ea      	ldr	r2, [r5, #12]
   24e30:	9b16      	ldr	r3, [sp, #88]	@ 0x58
   24e32:	4413      	add	r3, r2
      if (data_end_ptr > tensor_boundary) {
   24e34:	4598      	cmp	r8, r3
        tensor_boundary = data_end_ptr;
   24e36:	bf3c      	itt	cc
   24e38:	6033      	strcc	r3, [r6, #0]
   24e3a:	4698      	movcc	r8, r3
  for (size_t i = 0; i < 72; ++i) {
   24e3c:	2c48      	cmp	r4, #72	@ 0x48
   24e3e:	f105 0518 	add.w	r5, r5, #24
   24e42:	d1ea      	bne.n	24e1a <_Z19tflite_learn_7_initPFPvjjE+0x5a>
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
   24e44:	683b      	ldr	r3, [r7, #0]
   24e46:	4543      	cmp	r3, r8
   24e48:	f0c0 80a3 	bcc.w	24f92 <_Z19tflite_learn_7_initPFPvjjE+0x1d2>
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
   24e4c:	a802      	add	r0, sp, #8
   24e4e:	ad02      	add	r5, sp, #8
   24e50:	f7fd ff82 	bl	22d58 <_ZN6tflite16Register_CONV_2DEv>
   24e54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   24e56:	4e60      	ldr	r6, [pc, #384]	@ (24fd8 <_Z19tflite_learn_7_initPFPvjjE+0x218>)
   24e58:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 24fe8 <_Z19tflite_learn_7_initPFPvjjE+0x228>

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
   24e5c:	f8df a158 	ldr.w	sl, [pc, #344]	@ 24fb8 <_Z19tflite_learn_7_initPFPvjjE+0x1f8>
  registrations[OP_CONV_2D] = Register_CONV_2D();
   24e60:	4634      	mov	r4, r6
   24e62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   24e64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   24e66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
   24e68:	a802      	add	r0, sp, #8
  registrations[OP_CONV_2D] = Register_CONV_2D();
   24e6a:	682b      	ldr	r3, [r5, #0]
   24e6c:	6023      	str	r3, [r4, #0]
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
   24e6e:	f7fe fb75 	bl	2355c <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>
   24e72:	f10d 0c08 	add.w	ip, sp, #8
   24e76:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   24e7a:	f106 0724 	add.w	r7, r6, #36	@ 0x24
   24e7e:	682c      	ldr	r4, [r5, #0]
   24e80:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   24e82:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   24e86:	c70f      	stmia	r7!, {r0, r1, r2, r3}
  registrations[OP_ADD] = Register_ADD();
   24e88:	a802      	add	r0, sp, #8
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
   24e8a:	603c      	str	r4, [r7, #0]
  registrations[OP_ADD] = Register_ADD();
   24e8c:	f7fc fb36 	bl	214fc <_ZN6tflite12Register_ADDEv>
   24e90:	f10d 0c08 	add.w	ip, sp, #8
   24e94:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   24e98:	f106 0748 	add.w	r7, r6, #72	@ 0x48
   24e9c:	682c      	ldr	r4, [r5, #0]
   24e9e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   24ea0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   24ea4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
  registrations[OP_PAD] = Register_PAD();
   24ea6:	a802      	add	r0, sp, #8
  registrations[OP_ADD] = Register_ADD();
   24ea8:	603c      	str	r4, [r7, #0]
  registrations[OP_PAD] = Register_PAD();
   24eaa:	f7ff fb35 	bl	24518 <_ZN6tflite12Register_PADEv>
   24eae:	f10d 0c08 	add.w	ip, sp, #8
   24eb2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   24eb6:	f106 076c 	add.w	r7, r6, #108	@ 0x6c
   24eba:	682c      	ldr	r4, [r5, #0]
   24ebc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   24ebe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   24ec2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
   24ec4:	a802      	add	r0, sp, #8
  registrations[OP_PAD] = Register_PAD();
   24ec6:	603c      	str	r4, [r7, #0]
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
   24ec8:	f7ff fbf6 	bl	246b8 <_ZN6tflite16Register_SOFTMAXEv>
   24ecc:	682b      	ldr	r3, [r5, #0]
    current_subgraph_index = g;
   24ece:	4a43      	ldr	r2, [pc, #268]	@ (24fdc <_Z19tflite_learn_7_initPFPvjjE+0x21c>)
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
   24ed0:	9301      	str	r3, [sp, #4]
    current_subgraph_index = g;
   24ed2:	2300      	movs	r3, #0
   24ed4:	6013      	str	r3, [r2, #0]
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
   24ed6:	f10d 0c08 	add.w	ip, sp, #8
   24eda:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   24ede:	f106 0e90 	add.w	lr, r6, #144	@ 0x90
   24ee2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   24ee6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   24eea:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   24eee:	4d3c      	ldr	r5, [pc, #240]	@ (24fe0 <_Z19tflite_learn_7_initPFPvjjE+0x220>)
   24ef0:	9b01      	ldr	r3, [sp, #4]
   24ef2:	f8ce 3000 	str.w	r3, [lr]
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
   24ef6:	1c6f      	adds	r7, r5, #1
   24ef8:	f105 091c 	add.w	r9, r5, #28
    current_subgraph_index = g;
   24efc:	4644      	mov	r4, r8
      if (registrations[used_ops[i]].init) {
   24efe:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   24f02:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
   24f06:	2200      	movs	r2, #0
      if (registrations[used_ops[i]].init) {
   24f08:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
   24f0c:	4650      	mov	r0, sl
      if (registrations[used_ops[i]].init) {
   24f0e:	b113      	cbz	r3, 24f16 <_Z19tflite_learn_7_initPFPvjjE+0x156>
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
   24f10:	6921      	ldr	r1, [r4, #16]
   24f12:	4798      	blx	r3
   24f14:	60e0      	str	r0, [r4, #12]
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
   24f16:	454d      	cmp	r5, r9
   24f18:	f104 041c 	add.w	r4, r4, #28
   24f1c:	d1ef      	bne.n	24efe <_Z19tflite_learn_7_initPFPvjjE+0x13e>
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
   24f1e:	4a2f      	ldr	r2, [pc, #188]	@ (24fdc <_Z19tflite_learn_7_initPFPvjjE+0x21c>)
    tflTensors[ix].index = TENSOR_IX_UNUSED;
   24f20:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 24fec <_Z19tflite_learn_7_initPFPvjjE+0x22c>
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
   24f24:	f8df 90c8 	ldr.w	r9, [pc, #200]	@ 24ff0 <_Z19tflite_learn_7_initPFPvjjE+0x230>
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
   24f28:	4c23      	ldr	r4, [pc, #140]	@ (24fb8 <_Z19tflite_learn_7_initPFPvjjE+0x1f8>)
    current_subgraph_index = g;
   24f2a:	2300      	movs	r3, #0
   24f2c:	6013      	str	r3, [r2, #0]
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
   24f2e:	f107 051c 	add.w	r5, r7, #28
      if (registrations[used_ops[i]].prepare) {
   24f32:	f817 3b01 	ldrb.w	r3, [r7], #1
   24f36:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   24f3a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    tflTensors[ix].index = TENSOR_IX_UNUSED;
   24f3e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
      if (registrations[used_ops[i]].prepare) {
   24f42:	689b      	ldr	r3, [r3, #8]
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
   24f44:	4641      	mov	r1, r8
   24f46:	4620      	mov	r0, r4
      if (registrations[used_ops[i]].prepare) {
   24f48:	b18b      	cbz	r3, 24f6e <_Z19tflite_learn_7_initPFPvjjE+0x1ae>
    tflTensors[ix].index = TENSOR_IX_UNUSED;
   24f4a:	f8aa 2020 	strh.w	r2, [sl, #32]
   24f4e:	f8aa 2044 	strh.w	r2, [sl, #68]	@ 0x44
   24f52:	f8aa 2068 	strh.w	r2, [sl, #104]	@ 0x68
   24f56:	f8aa 208c 	strh.w	r2, [sl, #140]	@ 0x8c
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
   24f5a:	f8a9 200c 	strh.w	r2, [r9, #12]
   24f5e:	f8a9 201c 	strh.w	r2, [r9, #28]
   24f62:	f8a9 202c 	strh.w	r2, [r9, #44]	@ 0x2c
   24f66:	f8a9 203c 	strh.w	r2, [r9, #60]	@ 0x3c
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
   24f6a:	4798      	blx	r3
        if (status != kTfLiteOk) {
   24f6c:	b9b0      	cbnz	r0, 24f9c <_Z19tflite_learn_7_initPFPvjjE+0x1dc>
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
   24f6e:	42af      	cmp	r7, r5
   24f70:	f108 081c 	add.w	r8, r8, #28
   24f74:	d1dd      	bne.n	24f32 <_Z19tflite_learn_7_initPFPvjjE+0x172>
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;
   24f76:	4a19      	ldr	r2, [pc, #100]	@ (24fdc <_Z19tflite_learn_7_initPFPvjjE+0x21c>)
   24f78:	2300      	movs	r3, #0
   24f7a:	6013      	str	r3, [r2, #0]

  return kTfLiteOk;
   24f7c:	9301      	str	r3, [sp, #4]
class EonMicroContext : public MicroContext {
   24f7e:	4658      	mov	r0, fp
   24f80:	4b0e      	ldr	r3, [pc, #56]	@ (24fbc <_Z19tflite_learn_7_initPFPvjjE+0x1fc>)
   24f82:	930c      	str	r3, [sp, #48]	@ 0x30
   24f84:	f7ff fc50 	bl	24828 <_ZN6tflite12MicroContextD1Ev>
}
   24f88:	9b01      	ldr	r3, [sp, #4]
   24f8a:	4618      	mov	r0, r3
   24f8c:	b01b      	add	sp, #108	@ 0x6c
   24f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
   24f92:	4814      	ldr	r0, [pc, #80]	@ (24fe4 <_Z19tflite_learn_7_initPFPvjjE+0x224>)
   24f94:	f7ff fd40 	bl	24a18 <_Z9ei_printfPKcz>
    return kTfLiteError;
   24f98:	2301      	movs	r3, #1
   24f9a:	e7ef      	b.n	24f7c <_Z19tflite_learn_7_initPFPvjjE+0x1bc>
   24f9c:	4603      	mov	r3, r0
   24f9e:	e7ed      	b.n	24f7c <_Z19tflite_learn_7_initPFPvjjE+0x1bc>
   24fa0:	10015f90 	.word	0x10015f90
   24fa4:	00039fc0 	.word	0x00039fc0
   24fa8:	10015f7c 	.word	0x10015f7c
   24fac:	10015f80 	.word	0x10015f80
   24fb0:	00044d48 	.word	0x00044d48
   24fb4:	1004ff50 	.word	0x1004ff50
   24fb8:	10015f24 	.word	0x10015f24
   24fbc:	00044cf8 	.word	0x00044cf8
   24fc0:	00024c51 	.word	0x00024c51
   24fc4:	00024ce1 	.word	0x00024ce1
   24fc8:	00024b11 	.word	0x00024b11
   24fcc:	00024bdd 	.word	0x00024bdd
   24fd0:	00024b4d 	.word	0x00024b4d
   24fd4:	000249a1 	.word	0x000249a1
   24fd8:	10015da0 	.word	0x10015da0
   24fdc:	10015d9c 	.word	0x10015d9c
   24fe0:	00044d2b 	.word	0x00044d2b
   24fe4:	00043c40 	.word	0x00043c40
   24fe8:	1000d0b8 	.word	0x1000d0b8
   24fec:	10015e94 	.word	0x10015e94
   24ff0:	10015e54 	.word	0x10015e54

00024ff4 <_Z20tflite_learn_7_inputiP12TfLiteTensor>:
  tensor->quantization = tensorData[i].quantization;
   24ff4:	4a0d      	ldr	r2, [pc, #52]	@ (2502c <_Z20tflite_learn_7_inputiP12TfLiteTensor+0x38>)
    tensor->params.scale = quant->scale->data[0];
   24ff6:	f8df c040 	ldr.w	ip, [pc, #64]	@ 25038 <_Z20tflite_learn_7_inputiP12TfLiteTensor+0x44>

TfLiteStatus tflite_learn_7_input(int index, TfLiteTensor *tensor) {
   24ffa:	460b      	mov	r3, r1
  tensor->quantization = tensorData[i].quantization;
   24ffc:	e892 0003 	ldmia.w	r2, {r0, r1}
  tensor->is_variable = false;
   25000:	2200      	movs	r2, #0
  tensor->quantization = tensorData[i].quantization;
   25002:	e883 0003 	stmia.w	r3, {r0, r1}
    tensor->params.zero_point = quant->zero_point->data[0];
   25006:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
  tensor->is_variable = false;
   2500a:	779a      	strb	r2, [r3, #30]
    tensor->params.zero_point = quant->zero_point->data[0];
   2500c:	60d9      	str	r1, [r3, #12]
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}
   2500e:	4610      	mov	r0, r2
  tensor->dims = tensorData[i].dims;
   25010:	4907      	ldr	r1, [pc, #28]	@ (25030 <_Z20tflite_learn_7_inputiP12TfLiteTensor+0x3c>)
  tensor->data.data = tensorData[i].data;
   25012:	4a08      	ldr	r2, [pc, #32]	@ (25034 <_Z20tflite_learn_7_inputiP12TfLiteTensor+0x40>)
    tensor->params.scale = quant->scale->data[0];
   25014:	f8c3 c008 	str.w	ip, [r3, #8]
  tensor->data.data = tensorData[i].data;
   25018:	e9c3 2104 	strd	r2, r1, [r3, #16]
  tensor->type = tensorData[i].type;
   2501c:	f240 2109 	movw	r1, #521	@ 0x209
  tensor->bytes = tensorData[i].bytes;
   25020:	f44f 5210 	mov.w	r2, #9216	@ 0x2400
  tensor->type = tensorData[i].type;
   25024:	8399      	strh	r1, [r3, #28]
  tensor->bytes = tensorData[i].bytes;
   25026:	619a      	str	r2, [r3, #24]
}
   25028:	4770      	bx	lr
   2502a:	bf00      	nop
   2502c:	00044d58 	.word	0x00044d58
   25030:	0004b5bc 	.word	0x0004b5bc
   25034:	10015f90 	.word	0x10015f90
   25038:	3b808081 	.word	0x3b808081

0002503c <_Z21tflite_learn_7_outputiP12TfLiteTensor>:
  tensor->quantization = tensorData[i].quantization;
   2503c:	4a0d      	ldr	r2, [pc, #52]	@ (25074 <_Z21tflite_learn_7_outputiP12TfLiteTensor+0x38>)

TfLiteStatus tflite_learn_7_output(int index, TfLiteTensor *tensor) {
   2503e:	460b      	mov	r3, r1
  tensor->quantization = tensorData[i].quantization;
   25040:	e892 0003 	ldmia.w	r2, {r0, r1}
  tensor->is_variable = false;
   25044:	2200      	movs	r2, #0
  tensor->quantization = tensorData[i].quantization;
   25046:	e883 0003 	stmia.w	r3, {r0, r1}
    tensor->params.zero_point = quant->zero_point->data[0];
   2504a:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
  tensor->is_variable = false;
   2504e:	779a      	strb	r2, [r3, #30]
    tensor->params.zero_point = quant->zero_point->data[0];
   25050:	60d9      	str	r1, [r3, #12]
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}
   25052:	4610      	mov	r0, r2
  tensor->dims = tensorData[i].dims;
   25054:	4908      	ldr	r1, [pc, #32]	@ (25078 <_Z21tflite_learn_7_outputiP12TfLiteTensor+0x3c>)
  tensor->data.data = tensorData[i].data;
   25056:	4a09      	ldr	r2, [pc, #36]	@ (2507c <_Z21tflite_learn_7_outputiP12TfLiteTensor+0x40>)
    tensor->params.scale = quant->scale->data[0];
   25058:	f04f 5c6e 	mov.w	ip, #998244352	@ 0x3b800000
  tensor->data.data = tensorData[i].data;
   2505c:	e9c3 2104 	strd	r2, r1, [r3, #16]
  tensor->type = tensorData[i].type;
   25060:	f240 2109 	movw	r1, #521	@ 0x209
  tensor->bytes = tensorData[i].bytes;
   25064:	f44f 7290 	mov.w	r2, #288	@ 0x120
    tensor->params.scale = quant->scale->data[0];
   25068:	f8c3 c008 	str.w	ip, [r3, #8]
  tensor->type = tensorData[i].type;
   2506c:	8399      	strh	r1, [r3, #28]
  tensor->bytes = tensorData[i].bytes;
   2506e:	619a      	str	r2, [r3, #24]
}
   25070:	4770      	bx	lr
   25072:	bf00      	nop
   25074:	00045400 	.word	0x00045400
   25078:	000458c8 	.word	0x000458c8
   2507c:	10015f90 	.word	0x10015f90

00025080 <_Z21tflite_learn_7_invokev>:

TfLiteStatus tflite_learn_7_invoke() {
   25080:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25084:	f8df a060 	ldr.w	sl, [pc, #96]	@ 250e8 <_Z21tflite_learn_7_invokev+0x68>
   25088:	f8df b060 	ldr.w	fp, [pc, #96]	@ 250ec <_Z21tflite_learn_7_invokev+0x6c>
   2508c:	f8df 9060 	ldr.w	r9, [pc, #96]	@ 250f0 <_Z21tflite_learn_7_invokev+0x70>
   25090:	4d12      	ldr	r5, [pc, #72]	@ (250dc <_Z21tflite_learn_7_invokev+0x5c>)
   25092:	4f13      	ldr	r7, [pc, #76]	@ (250e0 <_Z21tflite_learn_7_invokev+0x60>)
  for (size_t i = 0; i < 28; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);
   25094:	4e13      	ldr	r6, [pc, #76]	@ (250e4 <_Z21tflite_learn_7_invokev+0x64>)
   25096:	f10a 081c 	add.w	r8, sl, #28
    tflTensors[ix].index = TENSOR_IX_UNUSED;
   2509a:	f647 74ff 	movw	r4, #32767	@ 0x7fff
   2509e:	e001      	b.n	250a4 <_Z21tflite_learn_7_invokev+0x24>
  for (size_t i = 0; i < 28; ++i) {
   250a0:	45d0      	cmp	r8, sl
   250a2:	d019      	beq.n	250d8 <_Z21tflite_learn_7_invokev+0x58>
    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);
   250a4:	f81a 3b01 	ldrb.w	r3, [sl], #1
    tflTensors[ix].index = TENSOR_IX_UNUSED;
   250a8:	f8a9 4020 	strh.w	r4, [r9, #32]
    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);
   250ac:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   250b0:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   250b4:	4659      	mov	r1, fp
   250b6:	68db      	ldr	r3, [r3, #12]
    tflTensors[ix].index = TENSOR_IX_UNUSED;
   250b8:	f8a9 4044 	strh.w	r4, [r9, #68]	@ 0x44
   250bc:	f8a9 4068 	strh.w	r4, [r9, #104]	@ 0x68
   250c0:	f8a9 408c 	strh.w	r4, [r9, #140]	@ 0x8c
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
   250c4:	81ac      	strh	r4, [r5, #12]
   250c6:	83ac      	strh	r4, [r5, #28]
   250c8:	85ac      	strh	r4, [r5, #44]	@ 0x2c
   250ca:	87ac      	strh	r4, [r5, #60]	@ 0x3c
    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);
   250cc:	4630      	mov	r0, r6
   250ce:	4798      	blx	r3
  for (size_t i = 0; i < 28; ++i) {
   250d0:	f10b 0b1c 	add.w	fp, fp, #28
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
   250d4:	2800      	cmp	r0, #0
   250d6:	d0e3      	beq.n	250a0 <_Z21tflite_learn_7_invokev+0x20>
      return status;
    }
  }
  return kTfLiteOk;
}
   250d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   250dc:	10015e54 	.word	0x10015e54
   250e0:	10015da0 	.word	0x10015da0
   250e4:	10015f24 	.word	0x10015f24
   250e8:	00044d2c 	.word	0x00044d2c
   250ec:	1000d0b8 	.word	0x1000d0b8
   250f0:	10015e94 	.word	0x10015e94

000250f4 <_Z20tflite_learn_7_resetPFvPvE>:

TfLiteStatus tflite_learn_7_reset( void (*free_fnc)(void* ptr) ) {
   250f4:	b570      	push	{r4, r5, r6, lr}

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
   250f6:	4e09      	ldr	r6, [pc, #36]	@ (2511c <_Z20tflite_learn_7_resetPFvPvE+0x28>)
  scratch_buffers_ix = 0;
   250f8:	4a09      	ldr	r2, [pc, #36]	@ (25120 <_Z20tflite_learn_7_resetPFvPvE+0x2c>)
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
   250fa:	6833      	ldr	r3, [r6, #0]
  scratch_buffers_ix = 0;
   250fc:	2400      	movs	r4, #0
   250fe:	6014      	str	r4, [r2, #0]
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
   25100:	b143      	cbz	r3, 25114 <_Z20tflite_learn_7_resetPFvPvE+0x20>
   25102:	4d08      	ldr	r5, [pc, #32]	@ (25124 <_Z20tflite_learn_7_resetPFvPvE+0x30>)
    ei_free(overflow_buffers[ix]);
   25104:	f855 0b04 	ldr.w	r0, [r5], #4
   25108:	f7ff fcc0 	bl	24a8c <_Z7ei_freePv>
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
   2510c:	6833      	ldr	r3, [r6, #0]
   2510e:	3401      	adds	r4, #1
   25110:	42a3      	cmp	r3, r4
   25112:	d8f7      	bhi.n	25104 <_Z20tflite_learn_7_resetPFvPvE+0x10>
  }
  overflow_buffers_ix = 0;
   25114:	2000      	movs	r0, #0
   25116:	6030      	str	r0, [r6, #0]
  return kTfLiteOk;
}
   25118:	bd70      	pop	{r4, r5, r6, pc}
   2511a:	bf00      	nop
   2511c:	10015d70 	.word	0x10015d70
   25120:	10015cfc 	.word	0x10015cfc
   25124:	10015d74 	.word	0x10015d74

00025128 <roundf>:
   25128:	ee10 3a10 	vmov	r3, s0
   2512c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   25130:	3a7f      	subs	r2, #127	@ 0x7f
   25132:	2a16      	cmp	r2, #22
   25134:	4619      	mov	r1, r3
   25136:	dc15      	bgt.n	25164 <roundf+0x3c>
   25138:	2a00      	cmp	r2, #0
   2513a:	db0c      	blt.n	25156 <roundf+0x2e>
   2513c:	480c      	ldr	r0, [pc, #48]	@ (25170 <roundf+0x48>)
   2513e:	4110      	asrs	r0, r2
   25140:	4218      	tst	r0, r3
   25142:	d005      	beq.n	25150 <roundf+0x28>
   25144:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
   25148:	4113      	asrs	r3, r2
   2514a:	440b      	add	r3, r1
   2514c:	ea23 0300 	bic.w	r3, r3, r0
   25150:	ee00 3a10 	vmov	s0, r3
   25154:	4770      	bx	lr
   25156:	3201      	adds	r2, #1
   25158:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
   2515c:	d1f8      	bne.n	25150 <roundf+0x28>
   2515e:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
   25162:	e7f5      	b.n	25150 <roundf+0x28>
   25164:	2a80      	cmp	r2, #128	@ 0x80
   25166:	d1f3      	bne.n	25150 <roundf+0x28>
   25168:	ee30 0a00 	vadd.f32	s0, s0, s0
   2516c:	4770      	bx	lr
   2516e:	bf00      	nop
   25170:	007fffff 	.word	0x007fffff

00025174 <frexp>:
   25174:	b570      	push	{r4, r5, r6, lr}
   25176:	ec55 4b10 	vmov	r4, r5, d0
   2517a:	4606      	mov	r6, r0
   2517c:	4813      	ldr	r0, [pc, #76]	@ (251cc <frexp+0x58>)
   2517e:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
   25182:	2100      	movs	r1, #0
   25184:	4283      	cmp	r3, r0
   25186:	6031      	str	r1, [r6, #0]
   25188:	d81d      	bhi.n	251c6 <frexp+0x52>
   2518a:	4620      	mov	r0, r4
   2518c:	4318      	orrs	r0, r3
   2518e:	d01a      	beq.n	251c6 <frexp+0x52>
   25190:	480f      	ldr	r0, [pc, #60]	@ (251d0 <frexp+0x5c>)
   25192:	4028      	ands	r0, r5
   25194:	462a      	mov	r2, r5
   25196:	b958      	cbnz	r0, 251b0 <frexp+0x3c>
   25198:	4b0e      	ldr	r3, [pc, #56]	@ (251d4 <frexp+0x60>)
   2519a:	2200      	movs	r2, #0
   2519c:	4620      	mov	r0, r4
   2519e:	4629      	mov	r1, r5
   251a0:	f7f3 fcb6 	bl	18b10 <__aeabi_dmul>
   251a4:	460a      	mov	r2, r1
   251a6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
   251aa:	4604      	mov	r4, r0
   251ac:	f06f 0135 	mvn.w	r1, #53	@ 0x35
   251b0:	151b      	asrs	r3, r3, #20
   251b2:	f36f 521e 	bfc	r2, #20, #11
   251b6:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
   251ba:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
   251be:	440b      	add	r3, r1
   251c0:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
   251c4:	6033      	str	r3, [r6, #0]
   251c6:	ec45 4b10 	vmov	d0, r4, r5
   251ca:	bd70      	pop	{r4, r5, r6, pc}
   251cc:	7fefffff 	.word	0x7fefffff
   251d0:	7ff00000 	.word	0x7ff00000
   251d4:	43500000 	.word	0x43500000

000251d8 <floor>:
   251d8:	ec51 0b10 	vmov	r0, r1, d0
   251dc:	f3c1 530a 	ubfx	r3, r1, #20, #11
   251e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   251e4:	f2a3 35ff 	subw	r5, r3, #1023	@ 0x3ff
   251e8:	2d13      	cmp	r5, #19
   251ea:	460c      	mov	r4, r1
   251ec:	4606      	mov	r6, r0
   251ee:	dc32      	bgt.n	25256 <floor+0x7e>
   251f0:	2d00      	cmp	r5, #0
   251f2:	db20      	blt.n	25236 <floor+0x5e>
   251f4:	4b38      	ldr	r3, [pc, #224]	@ (252d8 <floor+0x100>)
   251f6:	fa43 f805 	asr.w	r8, r3, r5
   251fa:	ea01 0308 	and.w	r3, r1, r8
   251fe:	4303      	orrs	r3, r0
   25200:	460f      	mov	r7, r1
   25202:	d02d      	beq.n	25260 <floor+0x88>
   25204:	a332      	add	r3, pc, #200	@ (adr r3, 252d0 <floor+0xf8>)
   25206:	e9d3 2300 	ldrd	r2, r3, [r3]
   2520a:	f7f3 facb 	bl	187a4 <__adddf3>
   2520e:	2200      	movs	r2, #0
   25210:	2300      	movs	r3, #0
   25212:	f7f3 ff0d 	bl	19030 <__aeabi_dcmpgt>
   25216:	b140      	cbz	r0, 2522a <floor+0x52>
   25218:	2c00      	cmp	r4, #0
   2521a:	da03      	bge.n	25224 <floor+0x4c>
   2521c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
   25220:	412b      	asrs	r3, r5
   25222:	441f      	add	r7, r3
   25224:	ea27 0408 	bic.w	r4, r7, r8
   25228:	2600      	movs	r6, #0
   2522a:	4623      	mov	r3, r4
   2522c:	4632      	mov	r2, r6
   2522e:	ec43 2b10 	vmov	d0, r2, r3
   25232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25236:	a326      	add	r3, pc, #152	@ (adr r3, 252d0 <floor+0xf8>)
   25238:	e9d3 2300 	ldrd	r2, r3, [r3]
   2523c:	f7f3 fab2 	bl	187a4 <__adddf3>
   25240:	2200      	movs	r2, #0
   25242:	2300      	movs	r3, #0
   25244:	f7f3 fef4 	bl	19030 <__aeabi_dcmpgt>
   25248:	2800      	cmp	r0, #0
   2524a:	d0ee      	beq.n	2522a <floor+0x52>
   2524c:	2c00      	cmp	r4, #0
   2524e:	db2a      	blt.n	252a6 <floor+0xce>
   25250:	2600      	movs	r6, #0
   25252:	4634      	mov	r4, r6
   25254:	e7e9      	b.n	2522a <floor+0x52>
   25256:	2d33      	cmp	r5, #51	@ 0x33
   25258:	dd06      	ble.n	25268 <floor+0x90>
   2525a:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
   2525e:	d01b      	beq.n	25298 <floor+0xc0>
   25260:	ec41 0b10 	vmov	d0, r0, r1
   25264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25268:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
   2526c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
   25270:	40df      	lsrs	r7, r3
   25272:	4207      	tst	r7, r0
   25274:	d0f4      	beq.n	25260 <floor+0x88>
   25276:	a316      	add	r3, pc, #88	@ (adr r3, 252d0 <floor+0xf8>)
   25278:	e9d3 2300 	ldrd	r2, r3, [r3]
   2527c:	f7f3 fa92 	bl	187a4 <__adddf3>
   25280:	2200      	movs	r2, #0
   25282:	2300      	movs	r3, #0
   25284:	f7f3 fed4 	bl	19030 <__aeabi_dcmpgt>
   25288:	2800      	cmp	r0, #0
   2528a:	d0ce      	beq.n	2522a <floor+0x52>
   2528c:	2c00      	cmp	r4, #0
   2528e:	4633      	mov	r3, r6
   25290:	db10      	blt.n	252b4 <floor+0xdc>
   25292:	ea23 0607 	bic.w	r6, r3, r7
   25296:	e7c8      	b.n	2522a <floor+0x52>
   25298:	4602      	mov	r2, r0
   2529a:	460b      	mov	r3, r1
   2529c:	f7f3 fa82 	bl	187a4 <__adddf3>
   252a0:	ec41 0b10 	vmov	d0, r0, r1
   252a4:	e7de      	b.n	25264 <floor+0x8c>
   252a6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
   252aa:	4326      	orrs	r6, r4
   252ac:	d10d      	bne.n	252ca <floor+0xf2>
   252ae:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
   252b2:	e7ba      	b.n	2522a <floor+0x52>
   252b4:	2d14      	cmp	r5, #20
   252b6:	d006      	beq.n	252c6 <floor+0xee>
   252b8:	f1c5 0534 	rsb	r5, r5, #52	@ 0x34
   252bc:	2201      	movs	r2, #1
   252be:	40aa      	lsls	r2, r5
   252c0:	4413      	add	r3, r2
   252c2:	42b3      	cmp	r3, r6
   252c4:	d2e5      	bcs.n	25292 <floor+0xba>
   252c6:	3401      	adds	r4, #1
   252c8:	e7e3      	b.n	25292 <floor+0xba>
   252ca:	4c04      	ldr	r4, [pc, #16]	@ (252dc <floor+0x104>)
   252cc:	2600      	movs	r6, #0
   252ce:	e7ac      	b.n	2522a <floor+0x52>
   252d0:	8800759c 	.word	0x8800759c
   252d4:	7e37e43c 	.word	0x7e37e43c
   252d8:	000fffff 	.word	0x000fffff
   252dc:	bff00000 	.word	0xbff00000

000252e0 <round>:
   252e0:	ec53 2b10 	vmov	r2, r3, d0
   252e4:	f3c3 500a 	ubfx	r0, r3, #20, #11
   252e8:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
   252ec:	2913      	cmp	r1, #19
   252ee:	b510      	push	{r4, lr}
   252f0:	469c      	mov	ip, r3
   252f2:	4696      	mov	lr, r2
   252f4:	dc19      	bgt.n	2532a <round+0x4a>
   252f6:	2900      	cmp	r1, #0
   252f8:	db11      	blt.n	2531e <round+0x3e>
   252fa:	4820      	ldr	r0, [pc, #128]	@ (2537c <round+0x9c>)
   252fc:	4108      	asrs	r0, r1
   252fe:	ea00 0403 	and.w	r4, r0, r3
   25302:	4314      	orrs	r4, r2
   25304:	d016      	beq.n	25334 <round+0x54>
   25306:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
   2530a:	410b      	asrs	r3, r1
   2530c:	4463      	add	r3, ip
   2530e:	ea23 0c00 	bic.w	ip, r3, r0
   25312:	2100      	movs	r1, #0
   25314:	4663      	mov	r3, ip
   25316:	460a      	mov	r2, r1
   25318:	ec43 2b10 	vmov	d0, r2, r3
   2531c:	bd10      	pop	{r4, pc}
   2531e:	3101      	adds	r1, #1
   25320:	f003 4c00 	and.w	ip, r3, #2147483648	@ 0x80000000
   25324:	d024      	beq.n	25370 <round+0x90>
   25326:	2100      	movs	r1, #0
   25328:	e7f4      	b.n	25314 <round+0x34>
   2532a:	2933      	cmp	r1, #51	@ 0x33
   2532c:	dd05      	ble.n	2533a <round+0x5a>
   2532e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
   25332:	d016      	beq.n	25362 <round+0x82>
   25334:	ec43 2b10 	vmov	d0, r2, r3
   25338:	bd10      	pop	{r4, pc}
   2533a:	f2a0 4013 	subw	r0, r0, #1043	@ 0x413
   2533e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
   25342:	fa24 f000 	lsr.w	r0, r4, r0
   25346:	4210      	tst	r0, r2
   25348:	d0f4      	beq.n	25334 <round+0x54>
   2534a:	2301      	movs	r3, #1
   2534c:	f1c1 0133 	rsb	r1, r1, #51	@ 0x33
   25350:	fa03 f101 	lsl.w	r1, r3, r1
   25354:	eb11 010e 	adds.w	r1, r1, lr
   25358:	bf28      	it	cs
   2535a:	449c      	addcs	ip, r3
   2535c:	ea21 0100 	bic.w	r1, r1, r0
   25360:	e7d8      	b.n	25314 <round+0x34>
   25362:	4610      	mov	r0, r2
   25364:	4619      	mov	r1, r3
   25366:	f7f3 fa1d 	bl	187a4 <__adddf3>
   2536a:	ec41 0b10 	vmov	d0, r0, r1
   2536e:	bd10      	pop	{r4, pc}
   25370:	f04c 5c7f 	orr.w	ip, ip, #1069547520	@ 0x3fc00000
   25374:	f44c 1c40 	orr.w	ip, ip, #3145728	@ 0x300000
   25378:	2100      	movs	r1, #0
   2537a:	e7cb      	b.n	25314 <round+0x34>
   2537c:	000fffff 	.word	0x000fffff

00025380 <abort>:
   25380:	b508      	push	{r3, lr}
   25382:	2006      	movs	r0, #6
   25384:	f001 fe76 	bl	27074 <raise>
   25388:	2001      	movs	r0, #1
   2538a:	f006 fc87 	bl	2bc9c <_exit>
   2538e:	bf00      	nop

00025390 <__assert_func>:
   25390:	b500      	push	{lr}
   25392:	4c0b      	ldr	r4, [pc, #44]	@ (253c0 <__assert_func+0x30>)
   25394:	6825      	ldr	r5, [r4, #0]
   25396:	4614      	mov	r4, r2
   25398:	68ee      	ldr	r6, [r5, #12]
   2539a:	461a      	mov	r2, r3
   2539c:	b085      	sub	sp, #20
   2539e:	4603      	mov	r3, r0
   253a0:	460d      	mov	r5, r1
   253a2:	b14c      	cbz	r4, 253b8 <__assert_func+0x28>
   253a4:	4907      	ldr	r1, [pc, #28]	@ (253c4 <__assert_func+0x34>)
   253a6:	9500      	str	r5, [sp, #0]
   253a8:	e9cd 1401 	strd	r1, r4, [sp, #4]
   253ac:	4630      	mov	r0, r6
   253ae:	4906      	ldr	r1, [pc, #24]	@ (253c8 <__assert_func+0x38>)
   253b0:	f000 f814 	bl	253dc <fiprintf>
   253b4:	f7ff ffe4 	bl	25380 <abort>
   253b8:	4904      	ldr	r1, [pc, #16]	@ (253cc <__assert_func+0x3c>)
   253ba:	460c      	mov	r4, r1
   253bc:	e7f3      	b.n	253a6 <__assert_func+0x16>
   253be:	bf00      	nop
   253c0:	1000d540 	.word	0x1000d540
   253c4:	00043c94 	.word	0x00043c94
   253c8:	00043ca4 	.word	0x00043ca4
   253cc:	00043738 	.word	0x00043738

000253d0 <atexit>:
   253d0:	2300      	movs	r3, #0
   253d2:	4601      	mov	r1, r0
   253d4:	461a      	mov	r2, r3
   253d6:	4618      	mov	r0, r3
   253d8:	f001 bf02 	b.w	271e0 <__register_exitproc>

000253dc <fiprintf>:
   253dc:	b40e      	push	{r1, r2, r3}
   253de:	b510      	push	{r4, lr}
   253e0:	b083      	sub	sp, #12
   253e2:	ab05      	add	r3, sp, #20
   253e4:	4c06      	ldr	r4, [pc, #24]	@ (25400 <fiprintf+0x24>)
   253e6:	f853 2b04 	ldr.w	r2, [r3], #4
   253ea:	9301      	str	r3, [sp, #4]
   253ec:	4601      	mov	r1, r0
   253ee:	6820      	ldr	r0, [r4, #0]
   253f0:	f000 f844 	bl	2547c <_vfiprintf_r>
   253f4:	b003      	add	sp, #12
   253f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   253fa:	b003      	add	sp, #12
   253fc:	4770      	bx	lr
   253fe:	bf00      	nop
   25400:	1000d540 	.word	0x1000d540

00025404 <__sprint_r.part.0>:
   25404:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25408:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
   2540a:	049c      	lsls	r4, r3, #18
   2540c:	4690      	mov	r8, r2
   2540e:	d52e      	bpl.n	2546e <__sprint_r.part.0+0x6a>
   25410:	6893      	ldr	r3, [r2, #8]
   25412:	6812      	ldr	r2, [r2, #0]
   25414:	b34b      	cbz	r3, 2546a <__sprint_r.part.0+0x66>
   25416:	460d      	mov	r5, r1
   25418:	4606      	mov	r6, r0
   2541a:	f102 0908 	add.w	r9, r2, #8
   2541e:	e959 2a02 	ldrd	r2, sl, [r9, #-8]
   25422:	ea5f 079a 	movs.w	r7, sl, lsr #2
   25426:	d016      	beq.n	25456 <__sprint_r.part.0+0x52>
   25428:	f1a2 0b04 	sub.w	fp, r2, #4
   2542c:	2400      	movs	r4, #0
   2542e:	e001      	b.n	25434 <__sprint_r.part.0+0x30>
   25430:	42a7      	cmp	r7, r4
   25432:	d00e      	beq.n	25452 <__sprint_r.part.0+0x4e>
   25434:	f85b 1f04 	ldr.w	r1, [fp, #4]!
   25438:	462a      	mov	r2, r5
   2543a:	4630      	mov	r0, r6
   2543c:	f001 fc9e 	bl	26d7c <_fputwc_r>
   25440:	1c43      	adds	r3, r0, #1
   25442:	f104 0401 	add.w	r4, r4, #1
   25446:	d1f3      	bne.n	25430 <__sprint_r.part.0+0x2c>
   25448:	2300      	movs	r3, #0
   2544a:	e9c8 3301 	strd	r3, r3, [r8, #4]
   2544e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25452:	f8d8 3008 	ldr.w	r3, [r8, #8]
   25456:	f02a 0a03 	bic.w	sl, sl, #3
   2545a:	eba3 030a 	sub.w	r3, r3, sl
   2545e:	f8c8 3008 	str.w	r3, [r8, #8]
   25462:	f109 0908 	add.w	r9, r9, #8
   25466:	2b00      	cmp	r3, #0
   25468:	d1d9      	bne.n	2541e <__sprint_r.part.0+0x1a>
   2546a:	2000      	movs	r0, #0
   2546c:	e7ec      	b.n	25448 <__sprint_r.part.0+0x44>
   2546e:	f001 fa15 	bl	2689c <__sfvwrite_r>
   25472:	2300      	movs	r3, #0
   25474:	e9c8 3301 	strd	r3, r3, [r8, #4]
   25478:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002547c <_vfiprintf_r>:
   2547c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25480:	b0c7      	sub	sp, #284	@ 0x11c
   25482:	af16      	add	r7, sp, #88	@ 0x58
   25484:	e9cd 2105 	strd	r2, r1, [sp, #20]
   25488:	4683      	mov	fp, r0
   2548a:	2208      	movs	r2, #8
   2548c:	2100      	movs	r1, #0
   2548e:	4638      	mov	r0, r7
   25490:	461c      	mov	r4, r3
   25492:	930a      	str	r3, [sp, #40]	@ 0x28
   25494:	f001 fd22 	bl	26edc <memset>
   25498:	f1bb 0f00 	cmp.w	fp, #0
   2549c:	d004      	beq.n	254a8 <_vfiprintf_r+0x2c>
   2549e:	f8db 3034 	ldr.w	r3, [fp, #52]	@ 0x34
   254a2:	2b00      	cmp	r3, #0
   254a4:	f000 86e2 	beq.w	2626c <_vfiprintf_r+0xdf0>
   254a8:	9a06      	ldr	r2, [sp, #24]
   254aa:	6e53      	ldr	r3, [r2, #100]	@ 0x64
   254ac:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
   254b0:	07de      	lsls	r6, r3, #31
   254b2:	d402      	bmi.n	254ba <_vfiprintf_r+0x3e>
   254b4:	0595      	lsls	r5, r2, #22
   254b6:	f140 860e 	bpl.w	260d6 <_vfiprintf_r+0xc5a>
   254ba:	0490      	lsls	r0, r2, #18
   254bc:	d407      	bmi.n	254ce <_vfiprintf_r+0x52>
   254be:	9906      	ldr	r1, [sp, #24]
   254c0:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
   254c2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
   254c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
   254ca:	818a      	strh	r2, [r1, #12]
   254cc:	664b      	str	r3, [r1, #100]	@ 0x64
   254ce:	0711      	lsls	r1, r2, #28
   254d0:	f140 80c8 	bpl.w	25664 <_vfiprintf_r+0x1e8>
   254d4:	9b06      	ldr	r3, [sp, #24]
   254d6:	691b      	ldr	r3, [r3, #16]
   254d8:	2b00      	cmp	r3, #0
   254da:	f000 80c3 	beq.w	25664 <_vfiprintf_r+0x1e8>
   254de:	f002 031a 	and.w	r3, r2, #26
   254e2:	2b0a      	cmp	r3, #10
   254e4:	f000 80cd 	beq.w	25682 <_vfiprintf_r+0x206>
   254e8:	2300      	movs	r3, #0
   254ea:	e9cd 331b 	strd	r3, r3, [sp, #108]	@ 0x6c
   254ee:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
   254f2:	aa1d      	add	r2, sp, #116	@ 0x74
   254f4:	f8df a8f4 	ldr.w	sl, [pc, #2292]	@ 25dec <_vfiprintf_r+0x970>
   254f8:	930d      	str	r3, [sp, #52]	@ 0x34
   254fa:	921a      	str	r2, [sp, #104]	@ 0x68
   254fc:	4691      	mov	r9, r2
   254fe:	9310      	str	r3, [sp, #64]	@ 0x40
   25500:	9307      	str	r3, [sp, #28]
   25502:	9d05      	ldr	r5, [sp, #20]
   25504:	f8da 40e4 	ldr.w	r4, [sl, #228]	@ 0xe4
   25508:	f001 fde0 	bl	270cc <__locale_mb_cur_max>
   2550c:	9700      	str	r7, [sp, #0]
   2550e:	4603      	mov	r3, r0
   25510:	462a      	mov	r2, r5
   25512:	a914      	add	r1, sp, #80	@ 0x50
   25514:	4658      	mov	r0, fp
   25516:	47a0      	blx	r4
   25518:	2800      	cmp	r0, #0
   2551a:	f000 80d1 	beq.w	256c0 <_vfiprintf_r+0x244>
   2551e:	f2c0 80c7 	blt.w	256b0 <_vfiprintf_r+0x234>
   25522:	9a14      	ldr	r2, [sp, #80]	@ 0x50
   25524:	2a25      	cmp	r2, #37	@ 0x25
   25526:	4603      	mov	r3, r0
   25528:	d001      	beq.n	2552e <_vfiprintf_r+0xb2>
   2552a:	441d      	add	r5, r3
   2552c:	e7ea      	b.n	25504 <_vfiprintf_r+0x88>
   2552e:	9b05      	ldr	r3, [sp, #20]
   25530:	1aee      	subs	r6, r5, r3
   25532:	4604      	mov	r4, r0
   25534:	f040 80c8 	bne.w	256c8 <_vfiprintf_r+0x24c>
   25538:	2300      	movs	r3, #0
   2553a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
   2553e:	7869      	ldrb	r1, [r5, #1]
   25540:	f88d 304b 	strb.w	r3, [sp, #75]	@ 0x4b
   25544:	9308      	str	r3, [sp, #32]
   25546:	1c6c      	adds	r4, r5, #1
   25548:	9204      	str	r2, [sp, #16]
   2554a:	9302      	str	r3, [sp, #8]
   2554c:	3401      	adds	r4, #1
   2554e:	f1a1 0320 	sub.w	r3, r1, #32
   25552:	2b5a      	cmp	r3, #90	@ 0x5a
   25554:	f200 80fe 	bhi.w	25754 <_vfiprintf_r+0x2d8>
   25558:	e8df f013 	tbh	[pc, r3, lsl #1]
   2555c:	00fc030a 	.word	0x00fc030a
   25560:	030400fc 	.word	0x030400fc
   25564:	00fc00fc 	.word	0x00fc00fc
   25568:	006a00fc 	.word	0x006a00fc
   2556c:	00fc00fc 	.word	0x00fc00fc
   25570:	0336020f 	.word	0x0336020f
   25574:	021a00fc 	.word	0x021a00fc
   25578:	00fc031a 	.word	0x00fc031a
   2557c:	005b0314 	.word	0x005b0314
   25580:	005b005b 	.word	0x005b005b
   25584:	005b005b 	.word	0x005b005b
   25588:	005b005b 	.word	0x005b005b
   2558c:	005b005b 	.word	0x005b005b
   25590:	00fc00fc 	.word	0x00fc00fc
   25594:	00fc00fc 	.word	0x00fc00fc
   25598:	00fc00fc 	.word	0x00fc00fc
   2559c:	00fc00fc 	.word	0x00fc00fc
   255a0:	01c500fc 	.word	0x01c500fc
   255a4:	00fc025a 	.word	0x00fc025a
   255a8:	00fc00fc 	.word	0x00fc00fc
   255ac:	00fc00fc 	.word	0x00fc00fc
   255b0:	00fc00fc 	.word	0x00fc00fc
   255b4:	00fc00fc 	.word	0x00fc00fc
   255b8:	022000fc 	.word	0x022000fc
   255bc:	00fc00fc 	.word	0x00fc00fc
   255c0:	019e00fc 	.word	0x019e00fc
   255c4:	027300fc 	.word	0x027300fc
   255c8:	00fc00fc 	.word	0x00fc00fc
   255cc:	00fc0603 	.word	0x00fc0603
   255d0:	00fc00fc 	.word	0x00fc00fc
   255d4:	00fc00fc 	.word	0x00fc00fc
   255d8:	00fc00fc 	.word	0x00fc00fc
   255dc:	00fc00fc 	.word	0x00fc00fc
   255e0:	01c500fc 	.word	0x01c500fc
   255e4:	00fc01ea 	.word	0x00fc01ea
   255e8:	00fc00fc 	.word	0x00fc00fc
   255ec:	01ea02c1 	.word	0x01ea02c1
   255f0:	00fc007e 	.word	0x00fc007e
   255f4:	00fc02fb 	.word	0x00fc02fb
   255f8:	062602ec 	.word	0x062602ec
   255fc:	007e02ca 	.word	0x007e02ca
   25600:	019e00fc 	.word	0x019e00fc
   25604:	0600007c 	.word	0x0600007c
   25608:	00fc00fc 	.word	0x00fc00fc
   2560c:	00fc062a 	.word	0x00fc062a
   25610:	007c      	.short	0x007c
   25612:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
   25616:	2200      	movs	r2, #0
   25618:	f814 1b01 	ldrb.w	r1, [r4], #1
   2561c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   25620:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   25624:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
   25628:	2b09      	cmp	r3, #9
   2562a:	d9f5      	bls.n	25618 <_vfiprintf_r+0x19c>
   2562c:	9208      	str	r2, [sp, #32]
   2562e:	e78e      	b.n	2554e <_vfiprintf_r+0xd2>
   25630:	4658      	mov	r0, fp
   25632:	f001 fd51 	bl	270d8 <_localeconv_r>
   25636:	6843      	ldr	r3, [r0, #4]
   25638:	9310      	str	r3, [sp, #64]	@ 0x40
   2563a:	4618      	mov	r0, r3
   2563c:	f7f3 f840 	bl	186c0 <strlen>
   25640:	900f      	str	r0, [sp, #60]	@ 0x3c
   25642:	4605      	mov	r5, r0
   25644:	4658      	mov	r0, fp
   25646:	f001 fd47 	bl	270d8 <_localeconv_r>
   2564a:	6883      	ldr	r3, [r0, #8]
   2564c:	930e      	str	r3, [sp, #56]	@ 0x38
   2564e:	2d00      	cmp	r5, #0
   25650:	f040 856a 	bne.w	26128 <_vfiprintf_r+0xcac>
   25654:	7821      	ldrb	r1, [r4, #0]
   25656:	e779      	b.n	2554c <_vfiprintf_r+0xd0>
   25658:	9b02      	ldr	r3, [sp, #8]
   2565a:	7821      	ldrb	r1, [r4, #0]
   2565c:	f043 0320 	orr.w	r3, r3, #32
   25660:	9302      	str	r3, [sp, #8]
   25662:	e773      	b.n	2554c <_vfiprintf_r+0xd0>
   25664:	9d06      	ldr	r5, [sp, #24]
   25666:	4658      	mov	r0, fp
   25668:	4629      	mov	r1, r5
   2566a:	f001 fab9 	bl	26be0 <__swsetup_r>
   2566e:	2800      	cmp	r0, #0
   25670:	f040 86da 	bne.w	26428 <_vfiprintf_r+0xfac>
   25674:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   25678:	f002 031a 	and.w	r3, r2, #26
   2567c:	2b0a      	cmp	r3, #10
   2567e:	f47f af33 	bne.w	254e8 <_vfiprintf_r+0x6c>
   25682:	9906      	ldr	r1, [sp, #24]
   25684:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   25688:	2b00      	cmp	r3, #0
   2568a:	f6ff af2d 	blt.w	254e8 <_vfiprintf_r+0x6c>
   2568e:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
   25690:	07de      	lsls	r6, r3, #31
   25692:	d402      	bmi.n	2569a <_vfiprintf_r+0x21e>
   25694:	0595      	lsls	r5, r2, #22
   25696:	f140 868e 	bpl.w	263b6 <_vfiprintf_r+0xf3a>
   2569a:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   2569e:	4623      	mov	r3, r4
   256a0:	4658      	mov	r0, fp
   256a2:	f000 feef 	bl	26484 <__sbprintf>
   256a6:	9007      	str	r0, [sp, #28]
   256a8:	9807      	ldr	r0, [sp, #28]
   256aa:	b047      	add	sp, #284	@ 0x11c
   256ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   256b0:	2208      	movs	r2, #8
   256b2:	2100      	movs	r1, #0
   256b4:	4638      	mov	r0, r7
   256b6:	f001 fc11 	bl	26edc <memset>
   256ba:	2301      	movs	r3, #1
   256bc:	441d      	add	r5, r3
   256be:	e721      	b.n	25504 <_vfiprintf_r+0x88>
   256c0:	9b05      	ldr	r3, [sp, #20]
   256c2:	1aee      	subs	r6, r5, r3
   256c4:	4604      	mov	r4, r0
   256c6:	d012      	beq.n	256ee <_vfiprintf_r+0x272>
   256c8:	9b05      	ldr	r3, [sp, #20]
   256ca:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
   256cc:	e9c9 3600 	strd	r3, r6, [r9]
   256d0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
   256d2:	3301      	adds	r3, #1
   256d4:	4432      	add	r2, r6
   256d6:	2b07      	cmp	r3, #7
   256d8:	921c      	str	r2, [sp, #112]	@ 0x70
   256da:	931b      	str	r3, [sp, #108]	@ 0x6c
   256dc:	dc11      	bgt.n	25702 <_vfiprintf_r+0x286>
   256de:	f109 0908 	add.w	r9, r9, #8
   256e2:	9b07      	ldr	r3, [sp, #28]
   256e4:	4433      	add	r3, r6
   256e6:	9307      	str	r3, [sp, #28]
   256e8:	2c00      	cmp	r4, #0
   256ea:	f47f af25 	bne.w	25538 <_vfiprintf_r+0xbc>
   256ee:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
   256f0:	2b00      	cmp	r3, #0
   256f2:	f040 867c 	bne.w	263ee <_vfiprintf_r+0xf72>
   256f6:	9b06      	ldr	r3, [sp, #24]
   256f8:	2200      	movs	r2, #0
   256fa:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   256fe:	921b      	str	r2, [sp, #108]	@ 0x6c
   25700:	e01c      	b.n	2573c <_vfiprintf_r+0x2c0>
   25702:	2a00      	cmp	r2, #0
   25704:	f000 8441 	beq.w	25f8a <_vfiprintf_r+0xb0e>
   25708:	9906      	ldr	r1, [sp, #24]
   2570a:	aa1a      	add	r2, sp, #104	@ 0x68
   2570c:	4658      	mov	r0, fp
   2570e:	f7ff fe79 	bl	25404 <__sprint_r.part.0>
   25712:	b980      	cbnz	r0, 25736 <_vfiprintf_r+0x2ba>
   25714:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
   25718:	e7e3      	b.n	256e2 <_vfiprintf_r+0x266>
   2571a:	9906      	ldr	r1, [sp, #24]
   2571c:	aa1a      	add	r2, sp, #104	@ 0x68
   2571e:	4658      	mov	r0, fp
   25720:	f7ff fe70 	bl	25404 <__sprint_r.part.0>
   25724:	2800      	cmp	r0, #0
   25726:	f000 80a2 	beq.w	2586e <_vfiprintf_r+0x3f2>
   2572a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   2572c:	b11b      	cbz	r3, 25736 <_vfiprintf_r+0x2ba>
   2572e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
   25730:	4658      	mov	r0, fp
   25732:	f001 fdfb 	bl	2732c <_free_r>
   25736:	9b06      	ldr	r3, [sp, #24]
   25738:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   2573c:	9a06      	ldr	r2, [sp, #24]
   2573e:	6e52      	ldr	r2, [r2, #100]	@ 0x64
   25740:	07d1      	lsls	r1, r2, #31
   25742:	f140 809f 	bpl.w	25884 <_vfiprintf_r+0x408>
   25746:	065b      	lsls	r3, r3, #25
   25748:	f100 867a 	bmi.w	26440 <_vfiprintf_r+0xfc4>
   2574c:	9807      	ldr	r0, [sp, #28]
   2574e:	b047      	add	sp, #284	@ 0x11c
   25750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25754:	9405      	str	r4, [sp, #20]
   25756:	2900      	cmp	r1, #0
   25758:	d0c9      	beq.n	256ee <_vfiprintf_r+0x272>
   2575a:	2300      	movs	r3, #0
   2575c:	f88d 304b 	strb.w	r3, [sp, #75]	@ 0x4b
   25760:	2301      	movs	r3, #1
   25762:	f88d 10b4 	strb.w	r1, [sp, #180]	@ 0xb4
   25766:	9303      	str	r3, [sp, #12]
   25768:	9309      	str	r3, [sp, #36]	@ 0x24
   2576a:	ac2d      	add	r4, sp, #180	@ 0xb4
   2576c:	2300      	movs	r3, #0
   2576e:	930b      	str	r3, [sp, #44]	@ 0x2c
   25770:	9304      	str	r3, [sp, #16]
   25772:	4698      	mov	r8, r3
   25774:	e9dd 2c1b 	ldrd	r2, ip, [sp, #108]	@ 0x6c
   25778:	9b02      	ldr	r3, [sp, #8]
   2577a:	1c50      	adds	r0, r2, #1
   2577c:	f013 0384 	ands.w	r3, r3, #132	@ 0x84
   25780:	4601      	mov	r1, r0
   25782:	930c      	str	r3, [sp, #48]	@ 0x30
   25784:	d105      	bne.n	25792 <_vfiprintf_r+0x316>
   25786:	9b08      	ldr	r3, [sp, #32]
   25788:	9d03      	ldr	r5, [sp, #12]
   2578a:	1b5d      	subs	r5, r3, r5
   2578c:	2d00      	cmp	r5, #0
   2578e:	f300 8349 	bgt.w	25e24 <_vfiprintf_r+0x9a8>
   25792:	f89d 304b 	ldrb.w	r3, [sp, #75]	@ 0x4b
   25796:	b18b      	cbz	r3, 257bc <_vfiprintf_r+0x340>
   25798:	2301      	movs	r3, #1
   2579a:	f10c 0c01 	add.w	ip, ip, #1
   2579e:	f8c9 3004 	str.w	r3, [r9, #4]
   257a2:	2907      	cmp	r1, #7
   257a4:	f10d 034b 	add.w	r3, sp, #75	@ 0x4b
   257a8:	e9cd 1c1b 	strd	r1, ip, [sp, #108]	@ 0x6c
   257ac:	f8c9 3000 	str.w	r3, [r9]
   257b0:	f300 82f8 	bgt.w	25da4 <_vfiprintf_r+0x928>
   257b4:	460a      	mov	r2, r1
   257b6:	f109 0908 	add.w	r9, r9, #8
   257ba:	3101      	adds	r1, #1
   257bc:	f1b8 0f00 	cmp.w	r8, #0
   257c0:	d01d      	beq.n	257fe <_vfiprintf_r+0x382>
   257c2:	ab13      	add	r3, sp, #76	@ 0x4c
   257c4:	f10c 0c02 	add.w	ip, ip, #2
   257c8:	f8c9 3000 	str.w	r3, [r9]
   257cc:	2907      	cmp	r1, #7
   257ce:	f04f 0302 	mov.w	r3, #2
   257d2:	e9cd 1c1b 	strd	r1, ip, [sp, #108]	@ 0x6c
   257d6:	f8c9 3004 	str.w	r3, [r9, #4]
   257da:	f340 8300 	ble.w	25dde <_vfiprintf_r+0x962>
   257de:	f1bc 0f00 	cmp.w	ip, #0
   257e2:	f000 8452 	beq.w	2608a <_vfiprintf_r+0xc0e>
   257e6:	9906      	ldr	r1, [sp, #24]
   257e8:	aa1a      	add	r2, sp, #104	@ 0x68
   257ea:	4658      	mov	r0, fp
   257ec:	f7ff fe0a 	bl	25404 <__sprint_r.part.0>
   257f0:	2800      	cmp	r0, #0
   257f2:	d19a      	bne.n	2572a <_vfiprintf_r+0x2ae>
   257f4:	e9dd 2c1b 	ldrd	r2, ip, [sp, #108]	@ 0x6c
   257f8:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
   257fc:	1c51      	adds	r1, r2, #1
   257fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   25800:	2b80      	cmp	r3, #128	@ 0x80
   25802:	f000 8225 	beq.w	25c50 <_vfiprintf_r+0x7d4>
   25806:	9b04      	ldr	r3, [sp, #16]
   25808:	9809      	ldr	r0, [sp, #36]	@ 0x24
   2580a:	1a1d      	subs	r5, r3, r0
   2580c:	2d00      	cmp	r5, #0
   2580e:	f300 827c 	bgt.w	25d0a <_vfiprintf_r+0x88e>
   25812:	9a09      	ldr	r2, [sp, #36]	@ 0x24
   25814:	f8c9 4000 	str.w	r4, [r9]
   25818:	eb02 030c 	add.w	r3, r2, ip
   2581c:	2907      	cmp	r1, #7
   2581e:	e9cd 131b 	strd	r1, r3, [sp, #108]	@ 0x6c
   25822:	f8c9 2004 	str.w	r2, [r9, #4]
   25826:	f340 8210 	ble.w	25c4a <_vfiprintf_r+0x7ce>
   2582a:	2b00      	cmp	r3, #0
   2582c:	f000 8344 	beq.w	25eb8 <_vfiprintf_r+0xa3c>
   25830:	9906      	ldr	r1, [sp, #24]
   25832:	aa1a      	add	r2, sp, #104	@ 0x68
   25834:	4658      	mov	r0, fp
   25836:	f7ff fde5 	bl	25404 <__sprint_r.part.0>
   2583a:	2800      	cmp	r0, #0
   2583c:	f47f af75 	bne.w	2572a <_vfiprintf_r+0x2ae>
   25840:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
   25842:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
   25846:	9a02      	ldr	r2, [sp, #8]
   25848:	0750      	lsls	r0, r2, #29
   2584a:	d505      	bpl.n	25858 <_vfiprintf_r+0x3dc>
   2584c:	9a08      	ldr	r2, [sp, #32]
   2584e:	9903      	ldr	r1, [sp, #12]
   25850:	1a54      	subs	r4, r2, r1
   25852:	2c00      	cmp	r4, #0
   25854:	f300 833b 	bgt.w	25ece <_vfiprintf_r+0xa52>
   25858:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
   2585c:	9803      	ldr	r0, [sp, #12]
   2585e:	4281      	cmp	r1, r0
   25860:	bfac      	ite	ge
   25862:	1852      	addge	r2, r2, r1
   25864:	1812      	addlt	r2, r2, r0
   25866:	9207      	str	r2, [sp, #28]
   25868:	2b00      	cmp	r3, #0
   2586a:	f47f af56 	bne.w	2571a <_vfiprintf_r+0x29e>
   2586e:	2300      	movs	r3, #0
   25870:	931b      	str	r3, [sp, #108]	@ 0x6c
   25872:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   25874:	b11b      	cbz	r3, 2587e <_vfiprintf_r+0x402>
   25876:	4619      	mov	r1, r3
   25878:	4658      	mov	r0, fp
   2587a:	f001 fd57 	bl	2732c <_free_r>
   2587e:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
   25882:	e63e      	b.n	25502 <_vfiprintf_r+0x86>
   25884:	059a      	lsls	r2, r3, #22
   25886:	f53f af5e 	bmi.w	25746 <_vfiprintf_r+0x2ca>
   2588a:	9c06      	ldr	r4, [sp, #24]
   2588c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
   2588e:	f001 fc73 	bl	27178 <__retarget_lock_release_recursive>
   25892:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   25896:	e756      	b.n	25746 <_vfiprintf_r+0x2ca>
   25898:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
   2589a:	9405      	str	r4, [sp, #20]
   2589c:	f856 4b04 	ldr.w	r4, [r6], #4
   258a0:	2300      	movs	r3, #0
   258a2:	f88d 304b 	strb.w	r3, [sp, #75]	@ 0x4b
   258a6:	2c00      	cmp	r4, #0
   258a8:	f000 84f8 	beq.w	2629c <_vfiprintf_r+0xe20>
   258ac:	2953      	cmp	r1, #83	@ 0x53
   258ae:	f000 849c 	beq.w	261ea <_vfiprintf_r+0xd6e>
   258b2:	9b02      	ldr	r3, [sp, #8]
   258b4:	f013 0510 	ands.w	r5, r3, #16
   258b8:	f040 8497 	bne.w	261ea <_vfiprintf_r+0xd6e>
   258bc:	9b04      	ldr	r3, [sp, #16]
   258be:	2b00      	cmp	r3, #0
   258c0:	f2c0 8582 	blt.w	263c8 <_vfiprintf_r+0xf4c>
   258c4:	461a      	mov	r2, r3
   258c6:	4629      	mov	r1, r5
   258c8:	4620      	mov	r0, r4
   258ca:	f7f2 fe09 	bl	184e0 <memchr>
   258ce:	900b      	str	r0, [sp, #44]	@ 0x2c
   258d0:	2800      	cmp	r0, #0
   258d2:	f000 8575 	beq.w	263c0 <_vfiprintf_r+0xf44>
   258d6:	1b03      	subs	r3, r0, r4
   258d8:	9309      	str	r3, [sp, #36]	@ 0x24
   258da:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   258de:	950b      	str	r5, [sp, #44]	@ 0x2c
   258e0:	9303      	str	r3, [sp, #12]
   258e2:	f000 bd39 	b.w	26358 <_vfiprintf_r+0xedc>
   258e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   258e8:	9405      	str	r4, [sp, #20]
   258ea:	2943      	cmp	r1, #67	@ 0x43
   258ec:	f103 0504 	add.w	r5, r3, #4
   258f0:	d003      	beq.n	258fa <_vfiprintf_r+0x47e>
   258f2:	9b02      	ldr	r3, [sp, #8]
   258f4:	06dc      	lsls	r4, r3, #27
   258f6:	f140 845f 	bpl.w	261b8 <_vfiprintf_r+0xd3c>
   258fa:	2208      	movs	r2, #8
   258fc:	2100      	movs	r1, #0
   258fe:	a818      	add	r0, sp, #96	@ 0x60
   25900:	f001 faec 	bl	26edc <memset>
   25904:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   25906:	ac2d      	add	r4, sp, #180	@ 0xb4
   25908:	681a      	ldr	r2, [r3, #0]
   2590a:	4621      	mov	r1, r4
   2590c:	ab18      	add	r3, sp, #96	@ 0x60
   2590e:	4658      	mov	r0, fp
   25910:	f001 fc34 	bl	2717c <_wcrtomb_r>
   25914:	4603      	mov	r3, r0
   25916:	3301      	adds	r3, #1
   25918:	9009      	str	r0, [sp, #36]	@ 0x24
   2591a:	f000 857d 	beq.w	26418 <_vfiprintf_r+0xf9c>
   2591e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   25920:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   25924:	9303      	str	r3, [sp, #12]
   25926:	2300      	movs	r3, #0
   25928:	950a      	str	r5, [sp, #40]	@ 0x28
   2592a:	f88d 304b 	strb.w	r3, [sp, #75]	@ 0x4b
   2592e:	e71d      	b.n	2576c <_vfiprintf_r+0x2f0>
   25930:	9b02      	ldr	r3, [sp, #8]
   25932:	9405      	str	r4, [sp, #20]
   25934:	0698      	lsls	r0, r3, #26
   25936:	d573      	bpl.n	25a20 <_vfiprintf_r+0x5a4>
   25938:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   2593a:	3307      	adds	r3, #7
   2593c:	f023 0307 	bic.w	r3, r3, #7
   25940:	4619      	mov	r1, r3
   25942:	685a      	ldr	r2, [r3, #4]
   25944:	f851 3b08 	ldr.w	r3, [r1], #8
   25948:	910a      	str	r1, [sp, #40]	@ 0x28
   2594a:	4611      	mov	r1, r2
   2594c:	2a00      	cmp	r2, #0
   2594e:	f2c0 8140 	blt.w	25bd2 <_vfiprintf_r+0x756>
   25952:	9a04      	ldr	r2, [sp, #16]
   25954:	2a00      	cmp	r2, #0
   25956:	f2c0 8149 	blt.w	25bec <_vfiprintf_r+0x770>
   2595a:	9a02      	ldr	r2, [sp, #8]
   2595c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   25960:	9202      	str	r2, [sp, #8]
   25962:	ea53 0201 	orrs.w	r2, r3, r1
   25966:	f040 8141 	bne.w	25bec <_vfiprintf_r+0x770>
   2596a:	9b04      	ldr	r3, [sp, #16]
   2596c:	2b00      	cmp	r3, #0
   2596e:	f040 853c 	bne.w	263ea <_vfiprintf_r+0xf6e>
   25972:	9303      	str	r3, [sp, #12]
   25974:	9309      	str	r3, [sp, #36]	@ 0x24
   25976:	ac46      	add	r4, sp, #280	@ 0x118
   25978:	e14a      	b.n	25c10 <_vfiprintf_r+0x794>
   2597a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   2597c:	f853 2b04 	ldr.w	r2, [r3], #4
   25980:	9208      	str	r2, [sp, #32]
   25982:	2a00      	cmp	r2, #0
   25984:	f280 839f 	bge.w	260c6 <_vfiprintf_r+0xc4a>
   25988:	9a08      	ldr	r2, [sp, #32]
   2598a:	930a      	str	r3, [sp, #40]	@ 0x28
   2598c:	4252      	negs	r2, r2
   2598e:	9208      	str	r2, [sp, #32]
   25990:	9b02      	ldr	r3, [sp, #8]
   25992:	7821      	ldrb	r1, [r4, #0]
   25994:	f043 0304 	orr.w	r3, r3, #4
   25998:	9302      	str	r3, [sp, #8]
   2599a:	e5d7      	b.n	2554c <_vfiprintf_r+0xd0>
   2599c:	9b02      	ldr	r3, [sp, #8]
   2599e:	9405      	str	r4, [sp, #20]
   259a0:	f043 0110 	orr.w	r1, r3, #16
   259a4:	f011 0220 	ands.w	r2, r1, #32
   259a8:	f000 82f2 	beq.w	25f90 <_vfiprintf_r+0xb14>
   259ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   259ae:	3307      	adds	r3, #7
   259b0:	f023 0307 	bic.w	r3, r3, #7
   259b4:	4618      	mov	r0, r3
   259b6:	685a      	ldr	r2, [r3, #4]
   259b8:	f850 3b08 	ldr.w	r3, [r0], #8
   259bc:	900a      	str	r0, [sp, #40]	@ 0x28
   259be:	f421 6480 	bic.w	r4, r1, #1024	@ 0x400
   259c2:	9402      	str	r4, [sp, #8]
   259c4:	9c04      	ldr	r4, [sp, #16]
   259c6:	2000      	movs	r0, #0
   259c8:	4284      	cmp	r4, r0
   259ca:	f88d 004b 	strb.w	r0, [sp, #75]	@ 0x4b
   259ce:	db63      	blt.n	25a98 <_vfiprintf_r+0x61c>
   259d0:	ea53 0402 	orrs.w	r4, r3, r2
   259d4:	f421 6190 	bic.w	r1, r1, #1152	@ 0x480
   259d8:	f040 8446 	bne.w	26268 <_vfiprintf_r+0xdec>
   259dc:	9a02      	ldr	r2, [sp, #8]
   259de:	9102      	str	r1, [sp, #8]
   259e0:	9b04      	ldr	r3, [sp, #16]
   259e2:	2b00      	cmp	r3, #0
   259e4:	d150      	bne.n	25a88 <_vfiprintf_r+0x60c>
   259e6:	2800      	cmp	r0, #0
   259e8:	f040 8368 	bne.w	260bc <_vfiprintf_r+0xc40>
   259ec:	f012 0201 	ands.w	r2, r2, #1
   259f0:	9209      	str	r2, [sp, #36]	@ 0x24
   259f2:	f000 836c 	beq.w	260ce <_vfiprintf_r+0xc52>
   259f6:	2330      	movs	r3, #48	@ 0x30
   259f8:	f88d 3117 	strb.w	r3, [sp, #279]	@ 0x117
   259fc:	f89d 304b 	ldrb.w	r3, [sp, #75]	@ 0x4b
   25a00:	9203      	str	r2, [sp, #12]
   25a02:	f20d 1417 	addw	r4, sp, #279	@ 0x117
   25a06:	2b00      	cmp	r3, #0
   25a08:	f040 8107 	bne.w	25c1a <_vfiprintf_r+0x79e>
   25a0c:	930b      	str	r3, [sp, #44]	@ 0x2c
   25a0e:	e109      	b.n	25c24 <_vfiprintf_r+0x7a8>
   25a10:	9b02      	ldr	r3, [sp, #8]
   25a12:	9405      	str	r4, [sp, #20]
   25a14:	f043 0310 	orr.w	r3, r3, #16
   25a18:	9302      	str	r3, [sp, #8]
   25a1a:	9b02      	ldr	r3, [sp, #8]
   25a1c:	0698      	lsls	r0, r3, #26
   25a1e:	d48b      	bmi.n	25938 <_vfiprintf_r+0x4bc>
   25a20:	9902      	ldr	r1, [sp, #8]
   25a22:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
   25a24:	06c9      	lsls	r1, r1, #27
   25a26:	f852 3b04 	ldr.w	r3, [r2], #4
   25a2a:	f100 838c 	bmi.w	26146 <_vfiprintf_r+0xcca>
   25a2e:	9902      	ldr	r1, [sp, #8]
   25a30:	064e      	lsls	r6, r1, #25
   25a32:	f140 8446 	bpl.w	262c2 <_vfiprintf_r+0xe46>
   25a36:	f343 31c0 	sbfx	r1, r3, #15, #1
   25a3a:	920a      	str	r2, [sp, #40]	@ 0x28
   25a3c:	b21b      	sxth	r3, r3
   25a3e:	460a      	mov	r2, r1
   25a40:	e784      	b.n	2594c <_vfiprintf_r+0x4d0>
   25a42:	9b02      	ldr	r3, [sp, #8]
   25a44:	9405      	str	r4, [sp, #20]
   25a46:	f043 0210 	orr.w	r2, r3, #16
   25a4a:	f012 0120 	ands.w	r1, r2, #32
   25a4e:	f000 82ae 	beq.w	25fae <_vfiprintf_r+0xb32>
   25a52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   25a54:	3307      	adds	r3, #7
   25a56:	f023 0307 	bic.w	r3, r3, #7
   25a5a:	4618      	mov	r0, r3
   25a5c:	6859      	ldr	r1, [r3, #4]
   25a5e:	f850 3b08 	ldr.w	r3, [r0], #8
   25a62:	900a      	str	r0, [sp, #40]	@ 0x28
   25a64:	2000      	movs	r0, #0
   25a66:	f88d 004b 	strb.w	r0, [sp, #75]	@ 0x4b
   25a6a:	9804      	ldr	r0, [sp, #16]
   25a6c:	2800      	cmp	r0, #0
   25a6e:	f2c0 82b2 	blt.w	25fd6 <_vfiprintf_r+0xb5a>
   25a72:	f022 0080 	bic.w	r0, r2, #128	@ 0x80
   25a76:	9002      	str	r0, [sp, #8]
   25a78:	ea53 0001 	orrs.w	r0, r3, r1
   25a7c:	f040 80b6 	bne.w	25bec <_vfiprintf_r+0x770>
   25a80:	9b04      	ldr	r3, [sp, #16]
   25a82:	2001      	movs	r0, #1
   25a84:	2b00      	cmp	r3, #0
   25a86:	d0ae      	beq.n	259e6 <_vfiprintf_r+0x56a>
   25a88:	2801      	cmp	r0, #1
   25a8a:	f000 84ae 	beq.w	263ea <_vfiprintf_r+0xf6e>
   25a8e:	2300      	movs	r3, #0
   25a90:	2802      	cmp	r0, #2
   25a92:	461a      	mov	r2, r3
   25a94:	f000 81af 	beq.w	25df6 <_vfiprintf_r+0x97a>
   25a98:	ac46      	add	r4, sp, #280	@ 0x118
   25a9a:	f003 0107 	and.w	r1, r3, #7
   25a9e:	08db      	lsrs	r3, r3, #3
   25aa0:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   25aa4:	08d2      	lsrs	r2, r2, #3
   25aa6:	3130      	adds	r1, #48	@ 0x30
   25aa8:	ea53 0502 	orrs.w	r5, r3, r2
   25aac:	4620      	mov	r0, r4
   25aae:	f804 1d01 	strb.w	r1, [r4, #-1]!
   25ab2:	d1f2      	bne.n	25a9a <_vfiprintf_r+0x61e>
   25ab4:	9b02      	ldr	r3, [sp, #8]
   25ab6:	07dd      	lsls	r5, r3, #31
   25ab8:	f140 81ab 	bpl.w	25e12 <_vfiprintf_r+0x996>
   25abc:	2930      	cmp	r1, #48	@ 0x30
   25abe:	f000 81a8 	beq.w	25e12 <_vfiprintf_r+0x996>
   25ac2:	2330      	movs	r3, #48	@ 0x30
   25ac4:	9a04      	ldr	r2, [sp, #16]
   25ac6:	f804 3c01 	strb.w	r3, [r4, #-1]
   25aca:	3802      	subs	r0, #2
   25acc:	ab46      	add	r3, sp, #280	@ 0x118
   25ace:	1a1b      	subs	r3, r3, r0
   25ad0:	429a      	cmp	r2, r3
   25ad2:	bfb8      	it	lt
   25ad4:	461a      	movlt	r2, r3
   25ad6:	9309      	str	r3, [sp, #36]	@ 0x24
   25ad8:	4604      	mov	r4, r0
   25ada:	9203      	str	r2, [sp, #12]
   25adc:	e098      	b.n	25c10 <_vfiprintf_r+0x794>
   25ade:	7821      	ldrb	r1, [r4, #0]
   25ae0:	9b02      	ldr	r3, [sp, #8]
   25ae2:	2968      	cmp	r1, #104	@ 0x68
   25ae4:	f000 83ce 	beq.w	26284 <_vfiprintf_r+0xe08>
   25ae8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   25aec:	9302      	str	r3, [sp, #8]
   25aee:	e52d      	b.n	2554c <_vfiprintf_r+0xd0>
   25af0:	9b02      	ldr	r3, [sp, #8]
   25af2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
   25af4:	9405      	str	r4, [sp, #20]
   25af6:	f043 0302 	orr.w	r3, r3, #2
   25afa:	9302      	str	r3, [sp, #8]
   25afc:	f852 3b04 	ldr.w	r3, [r2], #4
   25b00:	920a      	str	r2, [sp, #40]	@ 0x28
   25b02:	f647 0230 	movw	r2, #30768	@ 0x7830
   25b06:	f8ad 204c 	strh.w	r2, [sp, #76]	@ 0x4c
   25b0a:	4ab7      	ldr	r2, [pc, #732]	@ (25de8 <_vfiprintf_r+0x96c>)
   25b0c:	920d      	str	r2, [sp, #52]	@ 0x34
   25b0e:	2200      	movs	r2, #0
   25b10:	2100      	movs	r1, #0
   25b12:	f88d 104b 	strb.w	r1, [sp, #75]	@ 0x4b
   25b16:	9904      	ldr	r1, [sp, #16]
   25b18:	2900      	cmp	r1, #0
   25b1a:	f2c0 816c 	blt.w	25df6 <_vfiprintf_r+0x97a>
   25b1e:	9c02      	ldr	r4, [sp, #8]
   25b20:	ea53 0002 	orrs.w	r0, r3, r2
   25b24:	f024 0180 	bic.w	r1, r4, #128	@ 0x80
   25b28:	f040 8164 	bne.w	25df4 <_vfiprintf_r+0x978>
   25b2c:	4622      	mov	r2, r4
   25b2e:	9102      	str	r1, [sp, #8]
   25b30:	2002      	movs	r0, #2
   25b32:	e755      	b.n	259e0 <_vfiprintf_r+0x564>
   25b34:	9b02      	ldr	r3, [sp, #8]
   25b36:	9405      	str	r4, [sp, #20]
   25b38:	069c      	lsls	r4, r3, #26
   25b3a:	f140 82e0 	bpl.w	260fe <_vfiprintf_r+0xc82>
   25b3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   25b40:	9a07      	ldr	r2, [sp, #28]
   25b42:	681b      	ldr	r3, [r3, #0]
   25b44:	601a      	str	r2, [r3, #0]
   25b46:	17d2      	asrs	r2, r2, #31
   25b48:	605a      	str	r2, [r3, #4]
   25b4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   25b4c:	3304      	adds	r3, #4
   25b4e:	930a      	str	r3, [sp, #40]	@ 0x28
   25b50:	e4d7      	b.n	25502 <_vfiprintf_r+0x86>
   25b52:	7821      	ldrb	r1, [r4, #0]
   25b54:	9b02      	ldr	r3, [sp, #8]
   25b56:	296c      	cmp	r1, #108	@ 0x6c
   25b58:	f000 838d 	beq.w	26276 <_vfiprintf_r+0xdfa>
   25b5c:	f043 0310 	orr.w	r3, r3, #16
   25b60:	9302      	str	r3, [sp, #8]
   25b62:	e4f3      	b.n	2554c <_vfiprintf_r+0xd0>
   25b64:	9b02      	ldr	r3, [sp, #8]
   25b66:	7821      	ldrb	r1, [r4, #0]
   25b68:	f043 0301 	orr.w	r3, r3, #1
   25b6c:	9302      	str	r3, [sp, #8]
   25b6e:	e4ed      	b.n	2554c <_vfiprintf_r+0xd0>
   25b70:	f89d 304b 	ldrb.w	r3, [sp, #75]	@ 0x4b
   25b74:	7821      	ldrb	r1, [r4, #0]
   25b76:	2b00      	cmp	r3, #0
   25b78:	f47f ace8 	bne.w	2554c <_vfiprintf_r+0xd0>
   25b7c:	2320      	movs	r3, #32
   25b7e:	f88d 304b 	strb.w	r3, [sp, #75]	@ 0x4b
   25b82:	e4e3      	b.n	2554c <_vfiprintf_r+0xd0>
   25b84:	9b02      	ldr	r3, [sp, #8]
   25b86:	7821      	ldrb	r1, [r4, #0]
   25b88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   25b8c:	9302      	str	r3, [sp, #8]
   25b8e:	e4dd      	b.n	2554c <_vfiprintf_r+0xd0>
   25b90:	4620      	mov	r0, r4
   25b92:	f810 1b01 	ldrb.w	r1, [r0], #1
   25b96:	292a      	cmp	r1, #42	@ 0x2a
   25b98:	f000 845f 	beq.w	2645a <_vfiprintf_r+0xfde>
   25b9c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
   25ba0:	2b09      	cmp	r3, #9
   25ba2:	bf98      	it	ls
   25ba4:	2200      	movls	r2, #0
   25ba6:	f200 841b 	bhi.w	263e0 <_vfiprintf_r+0xf64>
   25baa:	f810 1b01 	ldrb.w	r1, [r0], #1
   25bae:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   25bb2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   25bb6:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
   25bba:	2b09      	cmp	r3, #9
   25bbc:	d9f5      	bls.n	25baa <_vfiprintf_r+0x72e>
   25bbe:	ea42 73e2 	orr.w	r3, r2, r2, asr #31
   25bc2:	9304      	str	r3, [sp, #16]
   25bc4:	4604      	mov	r4, r0
   25bc6:	e4c2      	b.n	2554e <_vfiprintf_r+0xd2>
   25bc8:	232b      	movs	r3, #43	@ 0x2b
   25bca:	7821      	ldrb	r1, [r4, #0]
   25bcc:	f88d 304b 	strb.w	r3, [sp, #75]	@ 0x4b
   25bd0:	e4bc      	b.n	2554c <_vfiprintf_r+0xd0>
   25bd2:	222d      	movs	r2, #45	@ 0x2d
   25bd4:	f88d 204b 	strb.w	r2, [sp, #75]	@ 0x4b
   25bd8:	9a04      	ldr	r2, [sp, #16]
   25bda:	425b      	negs	r3, r3
   25bdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   25be0:	2a00      	cmp	r2, #0
   25be2:	db03      	blt.n	25bec <_vfiprintf_r+0x770>
   25be4:	9a02      	ldr	r2, [sp, #8]
   25be6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   25bea:	9202      	str	r2, [sp, #8]
   25bec:	2b0a      	cmp	r3, #10
   25bee:	f171 0200 	sbcs.w	r2, r1, #0
   25bf2:	f080 81f6 	bcs.w	25fe2 <_vfiprintf_r+0xb66>
   25bf6:	3330      	adds	r3, #48	@ 0x30
   25bf8:	b2db      	uxtb	r3, r3
   25bfa:	f88d 3117 	strb.w	r3, [sp, #279]	@ 0x117
   25bfe:	9b04      	ldr	r3, [sp, #16]
   25c00:	2b01      	cmp	r3, #1
   25c02:	bfb8      	it	lt
   25c04:	2301      	movlt	r3, #1
   25c06:	9303      	str	r3, [sp, #12]
   25c08:	2301      	movs	r3, #1
   25c0a:	9309      	str	r3, [sp, #36]	@ 0x24
   25c0c:	f20d 1417 	addw	r4, sp, #279	@ 0x117
   25c10:	f89d 304b 	ldrb.w	r3, [sp, #75]	@ 0x4b
   25c14:	2b00      	cmp	r3, #0
   25c16:	f43f aef9 	beq.w	25a0c <_vfiprintf_r+0x590>
   25c1a:	2300      	movs	r3, #0
   25c1c:	930b      	str	r3, [sp, #44]	@ 0x2c
   25c1e:	9b03      	ldr	r3, [sp, #12]
   25c20:	3301      	adds	r3, #1
   25c22:	9303      	str	r3, [sp, #12]
   25c24:	9b02      	ldr	r3, [sp, #8]
   25c26:	f013 0802 	ands.w	r8, r3, #2
   25c2a:	f43f ada3 	beq.w	25774 <_vfiprintf_r+0x2f8>
   25c2e:	9b03      	ldr	r3, [sp, #12]
   25c30:	3302      	adds	r3, #2
   25c32:	9303      	str	r3, [sp, #12]
   25c34:	f04f 0802 	mov.w	r8, #2
   25c38:	e59c      	b.n	25774 <_vfiprintf_r+0x2f8>
   25c3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   25c3c:	941d      	str	r4, [sp, #116]	@ 0x74
   25c3e:	2201      	movs	r2, #1
   25c40:	931e      	str	r3, [sp, #120]	@ 0x78
   25c42:	931c      	str	r3, [sp, #112]	@ 0x70
   25c44:	921b      	str	r2, [sp, #108]	@ 0x6c
   25c46:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
   25c4a:	f109 0908 	add.w	r9, r9, #8
   25c4e:	e5fa      	b.n	25846 <_vfiprintf_r+0x3ca>
   25c50:	9b08      	ldr	r3, [sp, #32]
   25c52:	9803      	ldr	r0, [sp, #12]
   25c54:	1a1d      	subs	r5, r3, r0
   25c56:	2d00      	cmp	r5, #0
   25c58:	f77f add5 	ble.w	25806 <_vfiprintf_r+0x38a>
   25c5c:	2d10      	cmp	r5, #16
   25c5e:	f340 83f4 	ble.w	2644a <_vfiprintf_r+0xfce>
   25c62:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 25df0 <_vfiprintf_r+0x974>
   25c66:	4641      	mov	r1, r8
   25c68:	4663      	mov	r3, ip
   25c6a:	46a0      	mov	r8, r4
   25c6c:	46cc      	mov	ip, r9
   25c6e:	2610      	movs	r6, #16
   25c70:	f8dd 9018 	ldr.w	r9, [sp, #24]
   25c74:	460c      	mov	r4, r1
   25c76:	e006      	b.n	25c86 <_vfiprintf_r+0x80a>
   25c78:	1c90      	adds	r0, r2, #2
   25c7a:	f10c 0c08 	add.w	ip, ip, #8
   25c7e:	460a      	mov	r2, r1
   25c80:	3d10      	subs	r5, #16
   25c82:	2d10      	cmp	r5, #16
   25c84:	dd1a      	ble.n	25cbc <_vfiprintf_r+0x840>
   25c86:	1c51      	adds	r1, r2, #1
   25c88:	3310      	adds	r3, #16
   25c8a:	2907      	cmp	r1, #7
   25c8c:	e9cc 4600 	strd	r4, r6, [ip]
   25c90:	e9cd 131b 	strd	r1, r3, [sp, #108]	@ 0x6c
   25c94:	ddf0      	ble.n	25c78 <_vfiprintf_r+0x7fc>
   25c96:	aa1a      	add	r2, sp, #104	@ 0x68
   25c98:	2b00      	cmp	r3, #0
   25c9a:	d07e      	beq.n	25d9a <_vfiprintf_r+0x91e>
   25c9c:	4649      	mov	r1, r9
   25c9e:	4658      	mov	r0, fp
   25ca0:	f7ff fbb0 	bl	25404 <__sprint_r.part.0>
   25ca4:	2800      	cmp	r0, #0
   25ca6:	f47f ad40 	bne.w	2572a <_vfiprintf_r+0x2ae>
   25caa:	e9dd 231b 	ldrd	r2, r3, [sp, #108]	@ 0x6c
   25cae:	3d10      	subs	r5, #16
   25cb0:	2d10      	cmp	r5, #16
   25cb2:	f102 0001 	add.w	r0, r2, #1
   25cb6:	f10d 0c74 	add.w	ip, sp, #116	@ 0x74
   25cba:	dce4      	bgt.n	25c86 <_vfiprintf_r+0x80a>
   25cbc:	46e1      	mov	r9, ip
   25cbe:	469c      	mov	ip, r3
   25cc0:	4623      	mov	r3, r4
   25cc2:	4644      	mov	r4, r8
   25cc4:	4698      	mov	r8, r3
   25cc6:	44ac      	add	ip, r5
   25cc8:	2807      	cmp	r0, #7
   25cca:	e9cd 0c1b 	strd	r0, ip, [sp, #108]	@ 0x6c
   25cce:	f8c9 8000 	str.w	r8, [r9]
   25cd2:	f8c9 5004 	str.w	r5, [r9, #4]
   25cd6:	f340 8206 	ble.w	260e6 <_vfiprintf_r+0xc6a>
   25cda:	f1bc 0f00 	cmp.w	ip, #0
   25cde:	f000 8347 	beq.w	26370 <_vfiprintf_r+0xef4>
   25ce2:	9906      	ldr	r1, [sp, #24]
   25ce4:	aa1a      	add	r2, sp, #104	@ 0x68
   25ce6:	4658      	mov	r0, fp
   25ce8:	f7ff fb8c 	bl	25404 <__sprint_r.part.0>
   25cec:	2800      	cmp	r0, #0
   25cee:	f47f ad1c 	bne.w	2572a <_vfiprintf_r+0x2ae>
   25cf2:	9b04      	ldr	r3, [sp, #16]
   25cf4:	9809      	ldr	r0, [sp, #36]	@ 0x24
   25cf6:	e9dd 2c1b 	ldrd	r2, ip, [sp, #108]	@ 0x6c
   25cfa:	1a1d      	subs	r5, r3, r0
   25cfc:	2d00      	cmp	r5, #0
   25cfe:	f102 0101 	add.w	r1, r2, #1
   25d02:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
   25d06:	f77f ad84 	ble.w	25812 <_vfiprintf_r+0x396>
   25d0a:	2d10      	cmp	r5, #16
   25d0c:	f8df 80e0 	ldr.w	r8, [pc, #224]	@ 25df0 <_vfiprintf_r+0x974>
   25d10:	dd30      	ble.n	25d74 <_vfiprintf_r+0x8f8>
   25d12:	4663      	mov	r3, ip
   25d14:	2610      	movs	r6, #16
   25d16:	46cc      	mov	ip, r9
   25d18:	46a9      	mov	r9, r5
   25d1a:	4625      	mov	r5, r4
   25d1c:	9c06      	ldr	r4, [sp, #24]
   25d1e:	e008      	b.n	25d32 <_vfiprintf_r+0x8b6>
   25d20:	1c91      	adds	r1, r2, #2
   25d22:	f10c 0c08 	add.w	ip, ip, #8
   25d26:	4602      	mov	r2, r0
   25d28:	f1a9 0910 	sub.w	r9, r9, #16
   25d2c:	f1b9 0f10 	cmp.w	r9, #16
   25d30:	dd1c      	ble.n	25d6c <_vfiprintf_r+0x8f0>
   25d32:	1c50      	adds	r0, r2, #1
   25d34:	492e      	ldr	r1, [pc, #184]	@ (25df0 <_vfiprintf_r+0x974>)
   25d36:	3310      	adds	r3, #16
   25d38:	2807      	cmp	r0, #7
   25d3a:	e9cc 1600 	strd	r1, r6, [ip]
   25d3e:	e9cd 031b 	strd	r0, r3, [sp, #108]	@ 0x6c
   25d42:	dded      	ble.n	25d20 <_vfiprintf_r+0x8a4>
   25d44:	aa1a      	add	r2, sp, #104	@ 0x68
   25d46:	b31b      	cbz	r3, 25d90 <_vfiprintf_r+0x914>
   25d48:	4621      	mov	r1, r4
   25d4a:	4658      	mov	r0, fp
   25d4c:	f7ff fb5a 	bl	25404 <__sprint_r.part.0>
   25d50:	2800      	cmp	r0, #0
   25d52:	f47f acea 	bne.w	2572a <_vfiprintf_r+0x2ae>
   25d56:	e9dd 231b 	ldrd	r2, r3, [sp, #108]	@ 0x6c
   25d5a:	f1a9 0910 	sub.w	r9, r9, #16
   25d5e:	f1b9 0f10 	cmp.w	r9, #16
   25d62:	f102 0101 	add.w	r1, r2, #1
   25d66:	f10d 0c74 	add.w	ip, sp, #116	@ 0x74
   25d6a:	dce2      	bgt.n	25d32 <_vfiprintf_r+0x8b6>
   25d6c:	462c      	mov	r4, r5
   25d6e:	464d      	mov	r5, r9
   25d70:	46e1      	mov	r9, ip
   25d72:	469c      	mov	ip, r3
   25d74:	44ac      	add	ip, r5
   25d76:	2907      	cmp	r1, #7
   25d78:	e9cd 1c1b 	strd	r1, ip, [sp, #108]	@ 0x6c
   25d7c:	f8c9 8000 	str.w	r8, [r9]
   25d80:	f8c9 5004 	str.w	r5, [r9, #4]
   25d84:	f300 80ee 	bgt.w	25f64 <_vfiprintf_r+0xae8>
   25d88:	f109 0908 	add.w	r9, r9, #8
   25d8c:	3101      	adds	r1, #1
   25d8e:	e540      	b.n	25812 <_vfiprintf_r+0x396>
   25d90:	2101      	movs	r1, #1
   25d92:	461a      	mov	r2, r3
   25d94:	f10d 0c74 	add.w	ip, sp, #116	@ 0x74
   25d98:	e7c6      	b.n	25d28 <_vfiprintf_r+0x8ac>
   25d9a:	2001      	movs	r0, #1
   25d9c:	461a      	mov	r2, r3
   25d9e:	f10d 0c74 	add.w	ip, sp, #116	@ 0x74
   25da2:	e76d      	b.n	25c80 <_vfiprintf_r+0x804>
   25da4:	f1bc 0f00 	cmp.w	ip, #0
   25da8:	d00d      	beq.n	25dc6 <_vfiprintf_r+0x94a>
   25daa:	9906      	ldr	r1, [sp, #24]
   25dac:	aa1a      	add	r2, sp, #104	@ 0x68
   25dae:	4658      	mov	r0, fp
   25db0:	f7ff fb28 	bl	25404 <__sprint_r.part.0>
   25db4:	2800      	cmp	r0, #0
   25db6:	f47f acb8 	bne.w	2572a <_vfiprintf_r+0x2ae>
   25dba:	e9dd 2c1b 	ldrd	r2, ip, [sp, #108]	@ 0x6c
   25dbe:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
   25dc2:	1c51      	adds	r1, r2, #1
   25dc4:	e4fa      	b.n	257bc <_vfiprintf_r+0x340>
   25dc6:	f1b8 0f00 	cmp.w	r8, #0
   25dca:	f000 81c1 	beq.w	26150 <_vfiprintf_r+0xcd4>
   25dce:	2302      	movs	r3, #2
   25dd0:	931e      	str	r3, [sp, #120]	@ 0x78
   25dd2:	469c      	mov	ip, r3
   25dd4:	ab13      	add	r3, sp, #76	@ 0x4c
   25dd6:	931d      	str	r3, [sp, #116]	@ 0x74
   25dd8:	2101      	movs	r1, #1
   25dda:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
   25dde:	460a      	mov	r2, r1
   25de0:	f109 0908 	add.w	r9, r9, #8
   25de4:	3101      	adds	r1, #1
   25de6:	e50a      	b.n	257fe <_vfiprintf_r+0x382>
   25de8:	00043ce8 	.word	0x00043ce8
   25dec:	1000d3d4 	.word	0x1000d3d4
   25df0:	0004b5d0 	.word	0x0004b5d0
   25df4:	9102      	str	r1, [sp, #8]
   25df6:	980d      	ldr	r0, [sp, #52]	@ 0x34
   25df8:	ac46      	add	r4, sp, #280	@ 0x118
   25dfa:	f003 010f 	and.w	r1, r3, #15
   25dfe:	091b      	lsrs	r3, r3, #4
   25e00:	5c41      	ldrb	r1, [r0, r1]
   25e02:	f804 1d01 	strb.w	r1, [r4, #-1]!
   25e06:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   25e0a:	0912      	lsrs	r2, r2, #4
   25e0c:	ea53 0102 	orrs.w	r1, r3, r2
   25e10:	d1f3      	bne.n	25dfa <_vfiprintf_r+0x97e>
   25e12:	9a04      	ldr	r2, [sp, #16]
   25e14:	ab46      	add	r3, sp, #280	@ 0x118
   25e16:	1b1b      	subs	r3, r3, r4
   25e18:	429a      	cmp	r2, r3
   25e1a:	bfb8      	it	lt
   25e1c:	461a      	movlt	r2, r3
   25e1e:	9309      	str	r3, [sp, #36]	@ 0x24
   25e20:	9203      	str	r2, [sp, #12]
   25e22:	e6f5      	b.n	25c10 <_vfiprintf_r+0x794>
   25e24:	2d10      	cmp	r5, #16
   25e26:	f340 82d8 	ble.w	263da <_vfiprintf_r+0xf5e>
   25e2a:	4649      	mov	r1, r9
   25e2c:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
   25e30:	46a1      	mov	r9, r4
   25e32:	4ebb      	ldr	r6, [pc, #748]	@ (26120 <_vfiprintf_r+0xca4>)
   25e34:	f8dd 8018 	ldr.w	r8, [sp, #24]
   25e38:	2310      	movs	r3, #16
   25e3a:	4664      	mov	r4, ip
   25e3c:	e007      	b.n	25e4e <_vfiprintf_r+0x9d2>
   25e3e:	f102 0e02 	add.w	lr, r2, #2
   25e42:	3108      	adds	r1, #8
   25e44:	4602      	mov	r2, r0
   25e46:	3d10      	subs	r5, #16
   25e48:	2d10      	cmp	r5, #16
   25e4a:	dd1a      	ble.n	25e82 <_vfiprintf_r+0xa06>
   25e4c:	1c50      	adds	r0, r2, #1
   25e4e:	3410      	adds	r4, #16
   25e50:	2807      	cmp	r0, #7
   25e52:	e9c1 6300 	strd	r6, r3, [r1]
   25e56:	e9cd 041b 	strd	r0, r4, [sp, #108]	@ 0x6c
   25e5a:	ddf0      	ble.n	25e3e <_vfiprintf_r+0x9c2>
   25e5c:	aa1a      	add	r2, sp, #104	@ 0x68
   25e5e:	4641      	mov	r1, r8
   25e60:	4658      	mov	r0, fp
   25e62:	b324      	cbz	r4, 25eae <_vfiprintf_r+0xa32>
   25e64:	f7ff face 	bl	25404 <__sprint_r.part.0>
   25e68:	2800      	cmp	r0, #0
   25e6a:	f47f ac5e 	bne.w	2572a <_vfiprintf_r+0x2ae>
   25e6e:	e9dd 241b 	ldrd	r2, r4, [sp, #108]	@ 0x6c
   25e72:	3d10      	subs	r5, #16
   25e74:	2d10      	cmp	r5, #16
   25e76:	f102 0e01 	add.w	lr, r2, #1
   25e7a:	a91d      	add	r1, sp, #116	@ 0x74
   25e7c:	f04f 0310 	mov.w	r3, #16
   25e80:	dce4      	bgt.n	25e4c <_vfiprintf_r+0x9d0>
   25e82:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
   25e86:	46a4      	mov	ip, r4
   25e88:	464c      	mov	r4, r9
   25e8a:	4689      	mov	r9, r1
   25e8c:	44ac      	add	ip, r5
   25e8e:	f1be 0f07 	cmp.w	lr, #7
   25e92:	e9cd ec1b 	strd	lr, ip, [sp, #108]	@ 0x6c
   25e96:	f8c9 6000 	str.w	r6, [r9]
   25e9a:	f8c9 5004 	str.w	r5, [r9, #4]
   25e9e:	f300 80fa 	bgt.w	26096 <_vfiprintf_r+0xc1a>
   25ea2:	f109 0908 	add.w	r9, r9, #8
   25ea6:	f10e 0101 	add.w	r1, lr, #1
   25eaa:	4672      	mov	r2, lr
   25eac:	e471      	b.n	25792 <_vfiprintf_r+0x316>
   25eae:	4622      	mov	r2, r4
   25eb0:	f04f 0e01 	mov.w	lr, #1
   25eb4:	a91d      	add	r1, sp, #116	@ 0x74
   25eb6:	e7c6      	b.n	25e46 <_vfiprintf_r+0x9ca>
   25eb8:	9a02      	ldr	r2, [sp, #8]
   25eba:	931b      	str	r3, [sp, #108]	@ 0x6c
   25ebc:	0754      	lsls	r4, r2, #29
   25ebe:	d548      	bpl.n	25f52 <_vfiprintf_r+0xad6>
   25ec0:	9a08      	ldr	r2, [sp, #32]
   25ec2:	9903      	ldr	r1, [sp, #12]
   25ec4:	1a54      	subs	r4, r2, r1
   25ec6:	2c00      	cmp	r4, #0
   25ec8:	dd43      	ble.n	25f52 <_vfiprintf_r+0xad6>
   25eca:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
   25ece:	2c10      	cmp	r4, #16
   25ed0:	991b      	ldr	r1, [sp, #108]	@ 0x6c
   25ed2:	f340 8296 	ble.w	26402 <_vfiprintf_r+0xf86>
   25ed6:	4e92      	ldr	r6, [pc, #584]	@ (26120 <_vfiprintf_r+0xca4>)
   25ed8:	f8dd 8018 	ldr.w	r8, [sp, #24]
   25edc:	2510      	movs	r5, #16
   25ede:	e006      	b.n	25eee <_vfiprintf_r+0xa72>
   25ee0:	1c88      	adds	r0, r1, #2
   25ee2:	f109 0908 	add.w	r9, r9, #8
   25ee6:	4611      	mov	r1, r2
   25ee8:	3c10      	subs	r4, #16
   25eea:	2c10      	cmp	r4, #16
   25eec:	dd19      	ble.n	25f22 <_vfiprintf_r+0xaa6>
   25eee:	1c4a      	adds	r2, r1, #1
   25ef0:	3310      	adds	r3, #16
   25ef2:	2a07      	cmp	r2, #7
   25ef4:	e9c9 6500 	strd	r6, r5, [r9]
   25ef8:	e9cd 231b 	strd	r2, r3, [sp, #108]	@ 0x6c
   25efc:	ddf0      	ble.n	25ee0 <_vfiprintf_r+0xa64>
   25efe:	aa1a      	add	r2, sp, #104	@ 0x68
   25f00:	b313      	cbz	r3, 25f48 <_vfiprintf_r+0xacc>
   25f02:	4641      	mov	r1, r8
   25f04:	4658      	mov	r0, fp
   25f06:	f7ff fa7d 	bl	25404 <__sprint_r.part.0>
   25f0a:	2800      	cmp	r0, #0
   25f0c:	f47f ac0d 	bne.w	2572a <_vfiprintf_r+0x2ae>
   25f10:	e9dd 131b 	ldrd	r1, r3, [sp, #108]	@ 0x6c
   25f14:	3c10      	subs	r4, #16
   25f16:	2c10      	cmp	r4, #16
   25f18:	f101 0001 	add.w	r0, r1, #1
   25f1c:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
   25f20:	dce5      	bgt.n	25eee <_vfiprintf_r+0xa72>
   25f22:	4423      	add	r3, r4
   25f24:	2807      	cmp	r0, #7
   25f26:	e9c9 6400 	strd	r6, r4, [r9]
   25f2a:	e9cd 031b 	strd	r0, r3, [sp, #108]	@ 0x6c
   25f2e:	f77f ac93 	ble.w	25858 <_vfiprintf_r+0x3dc>
   25f32:	b173      	cbz	r3, 25f52 <_vfiprintf_r+0xad6>
   25f34:	9906      	ldr	r1, [sp, #24]
   25f36:	aa1a      	add	r2, sp, #104	@ 0x68
   25f38:	4658      	mov	r0, fp
   25f3a:	f7ff fa63 	bl	25404 <__sprint_r.part.0>
   25f3e:	2800      	cmp	r0, #0
   25f40:	f47f abf3 	bne.w	2572a <_vfiprintf_r+0x2ae>
   25f44:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
   25f46:	e487      	b.n	25858 <_vfiprintf_r+0x3dc>
   25f48:	2001      	movs	r0, #1
   25f4a:	4619      	mov	r1, r3
   25f4c:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
   25f50:	e7ca      	b.n	25ee8 <_vfiprintf_r+0xa6c>
   25f52:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
   25f56:	9903      	ldr	r1, [sp, #12]
   25f58:	428a      	cmp	r2, r1
   25f5a:	bfac      	ite	ge
   25f5c:	189b      	addge	r3, r3, r2
   25f5e:	185b      	addlt	r3, r3, r1
   25f60:	9307      	str	r3, [sp, #28]
   25f62:	e484      	b.n	2586e <_vfiprintf_r+0x3f2>
   25f64:	f1bc 0f00 	cmp.w	ip, #0
   25f68:	f43f ae67 	beq.w	25c3a <_vfiprintf_r+0x7be>
   25f6c:	9906      	ldr	r1, [sp, #24]
   25f6e:	aa1a      	add	r2, sp, #104	@ 0x68
   25f70:	4658      	mov	r0, fp
   25f72:	f7ff fa47 	bl	25404 <__sprint_r.part.0>
   25f76:	2800      	cmp	r0, #0
   25f78:	f47f abd7 	bne.w	2572a <_vfiprintf_r+0x2ae>
   25f7c:	991b      	ldr	r1, [sp, #108]	@ 0x6c
   25f7e:	f8dd c070 	ldr.w	ip, [sp, #112]	@ 0x70
   25f82:	3101      	adds	r1, #1
   25f84:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
   25f88:	e443      	b.n	25812 <_vfiprintf_r+0x396>
   25f8a:	921b      	str	r2, [sp, #108]	@ 0x6c
   25f8c:	f7ff bbc2 	b.w	25714 <_vfiprintf_r+0x298>
   25f90:	980a      	ldr	r0, [sp, #40]	@ 0x28
   25f92:	f011 0410 	ands.w	r4, r1, #16
   25f96:	f850 3b04 	ldr.w	r3, [r0], #4
   25f9a:	f040 80ae 	bne.w	260fa <_vfiprintf_r+0xc7e>
   25f9e:	f011 0540 	ands.w	r5, r1, #64	@ 0x40
   25fa2:	f000 80a6 	beq.w	260f2 <_vfiprintf_r+0xc76>
   25fa6:	b29b      	uxth	r3, r3
   25fa8:	4622      	mov	r2, r4
   25faa:	900a      	str	r0, [sp, #40]	@ 0x28
   25fac:	e507      	b.n	259be <_vfiprintf_r+0x542>
   25fae:	980a      	ldr	r0, [sp, #40]	@ 0x28
   25fb0:	f012 0410 	ands.w	r4, r2, #16
   25fb4:	f850 3b04 	ldr.w	r3, [r0], #4
   25fb8:	d105      	bne.n	25fc6 <_vfiprintf_r+0xb4a>
   25fba:	f012 0540 	ands.w	r5, r2, #64	@ 0x40
   25fbe:	f000 8177 	beq.w	262b0 <_vfiprintf_r+0xe34>
   25fc2:	b29b      	uxth	r3, r3
   25fc4:	4621      	mov	r1, r4
   25fc6:	900a      	str	r0, [sp, #40]	@ 0x28
   25fc8:	2000      	movs	r0, #0
   25fca:	f88d 004b 	strb.w	r0, [sp, #75]	@ 0x4b
   25fce:	9804      	ldr	r0, [sp, #16]
   25fd0:	2800      	cmp	r0, #0
   25fd2:	f6bf ad4e 	bge.w	25a72 <_vfiprintf_r+0x5f6>
   25fd6:	2b0a      	cmp	r3, #10
   25fd8:	9202      	str	r2, [sp, #8]
   25fda:	f171 0200 	sbcs.w	r2, r1, #0
   25fde:	f4ff ae0a 	bcc.w	25bf6 <_vfiprintf_r+0x77a>
   25fe2:	9a02      	ldr	r2, [sp, #8]
   25fe4:	f8cd 900c 	str.w	r9, [sp, #12]
   25fe8:	ac46      	add	r4, sp, #280	@ 0x118
   25fea:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
   25fee:	46a1      	mov	r9, r4
   25ff0:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
   25ff4:	4e4b      	ldr	r6, [pc, #300]	@ (26124 <_vfiprintf_r+0xca8>)
   25ff6:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
   25ffa:	f04f 0c00 	mov.w	ip, #0
   25ffe:	4614      	mov	r4, r2
   26000:	e005      	b.n	2600e <_vfiprintf_r+0xb92>
   26002:	2b0a      	cmp	r3, #10
   26004:	f171 0100 	sbcs.w	r1, r1, #0
   26008:	d337      	bcc.n	2607a <_vfiprintf_r+0xbfe>
   2600a:	4643      	mov	r3, r8
   2600c:	4629      	mov	r1, r5
   2600e:	185a      	adds	r2, r3, r1
   26010:	f142 0200 	adc.w	r2, r2, #0
   26014:	fba6 0502 	umull	r0, r5, r6, r2
   26018:	f025 0003 	bic.w	r0, r5, #3
   2601c:	eb00 0095 	add.w	r0, r0, r5, lsr #2
   26020:	1a12      	subs	r2, r2, r0
   26022:	1a98      	subs	r0, r3, r2
   26024:	f04f 35cc 	mov.w	r5, #3435973836	@ 0xcccccccc
   26028:	f161 0e00 	sbc.w	lr, r1, #0
   2602c:	fb05 f500 	mul.w	r5, r5, r0
   26030:	fb06 550e 	mla	r5, r6, lr, r5
   26034:	fba0 8006 	umull	r8, r0, r0, r6
   26038:	4405      	add	r5, r0
   2603a:	f008 0e01 	and.w	lr, r8, #1
   2603e:	2005      	movs	r0, #5
   26040:	fbae 0e00 	umull	r0, lr, lr, r0
   26044:	1880      	adds	r0, r0, r2
   26046:	ea4f 0858 	mov.w	r8, r8, lsr #1
   2604a:	3030      	adds	r0, #48	@ 0x30
   2604c:	f809 0c01 	strb.w	r0, [r9, #-1]
   26050:	ea48 78c5 	orr.w	r8, r8, r5, lsl #31
   26054:	f10c 0c01 	add.w	ip, ip, #1
   26058:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
   2605c:	086d      	lsrs	r5, r5, #1
   2605e:	2c00      	cmp	r4, #0
   26060:	d0cf      	beq.n	26002 <_vfiprintf_r+0xb86>
   26062:	f89b 2000 	ldrb.w	r2, [fp]
   26066:	4562      	cmp	r2, ip
   26068:	d1cb      	bne.n	26002 <_vfiprintf_r+0xb86>
   2606a:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
   2606e:	d0c8      	beq.n	26002 <_vfiprintf_r+0xb86>
   26070:	2b0a      	cmp	r3, #10
   26072:	f171 0100 	sbcs.w	r1, r1, #0
   26076:	f080 815c 	bcs.w	26332 <_vfiprintf_r+0xeb6>
   2607a:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
   2607e:	464c      	mov	r4, r9
   26080:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
   26084:	f8dd 900c 	ldr.w	r9, [sp, #12]
   26088:	e6c3      	b.n	25e12 <_vfiprintf_r+0x996>
   2608a:	2101      	movs	r1, #1
   2608c:	4662      	mov	r2, ip
   2608e:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
   26092:	f7ff bbb4 	b.w	257fe <_vfiprintf_r+0x382>
   26096:	f1bc 0f00 	cmp.w	ip, #0
   2609a:	f000 8097 	beq.w	261cc <_vfiprintf_r+0xd50>
   2609e:	9906      	ldr	r1, [sp, #24]
   260a0:	aa1a      	add	r2, sp, #104	@ 0x68
   260a2:	4658      	mov	r0, fp
   260a4:	f7ff f9ae 	bl	25404 <__sprint_r.part.0>
   260a8:	2800      	cmp	r0, #0
   260aa:	f47f ab3e 	bne.w	2572a <_vfiprintf_r+0x2ae>
   260ae:	e9dd 2c1b 	ldrd	r2, ip, [sp, #108]	@ 0x6c
   260b2:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
   260b6:	1c51      	adds	r1, r2, #1
   260b8:	f7ff bb6b 	b.w	25792 <_vfiprintf_r+0x316>
   260bc:	9b04      	ldr	r3, [sp, #16]
   260be:	9303      	str	r3, [sp, #12]
   260c0:	9309      	str	r3, [sp, #36]	@ 0x24
   260c2:	ac46      	add	r4, sp, #280	@ 0x118
   260c4:	e5a4      	b.n	25c10 <_vfiprintf_r+0x794>
   260c6:	7821      	ldrb	r1, [r4, #0]
   260c8:	930a      	str	r3, [sp, #40]	@ 0x28
   260ca:	f7ff ba3f 	b.w	2554c <_vfiprintf_r+0xd0>
   260ce:	9b04      	ldr	r3, [sp, #16]
   260d0:	9303      	str	r3, [sp, #12]
   260d2:	ac46      	add	r4, sp, #280	@ 0x118
   260d4:	e59c      	b.n	25c10 <_vfiprintf_r+0x794>
   260d6:	9d06      	ldr	r5, [sp, #24]
   260d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
   260da:	f001 f84b 	bl	27174 <__retarget_lock_acquire_recursive>
   260de:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   260e2:	f7ff b9ea 	b.w	254ba <_vfiprintf_r+0x3e>
   260e6:	f109 0908 	add.w	r9, r9, #8
   260ea:	1c41      	adds	r1, r0, #1
   260ec:	4602      	mov	r2, r0
   260ee:	f7ff bb8a 	b.w	25806 <_vfiprintf_r+0x38a>
   260f2:	f411 7200 	ands.w	r2, r1, #512	@ 0x200
   260f6:	f040 8144 	bne.w	26382 <_vfiprintf_r+0xf06>
   260fa:	900a      	str	r0, [sp, #40]	@ 0x28
   260fc:	e45f      	b.n	259be <_vfiprintf_r+0x542>
   260fe:	9b02      	ldr	r3, [sp, #8]
   26100:	06d8      	lsls	r0, r3, #27
   26102:	f100 80c6 	bmi.w	26292 <_vfiprintf_r+0xe16>
   26106:	9b02      	ldr	r3, [sp, #8]
   26108:	0659      	lsls	r1, r3, #25
   2610a:	f100 8145 	bmi.w	26398 <_vfiprintf_r+0xf1c>
   2610e:	9b02      	ldr	r3, [sp, #8]
   26110:	059a      	lsls	r2, r3, #22
   26112:	f140 80be 	bpl.w	26292 <_vfiprintf_r+0xe16>
   26116:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   26118:	9a07      	ldr	r2, [sp, #28]
   2611a:	681b      	ldr	r3, [r3, #0]
   2611c:	701a      	strb	r2, [r3, #0]
   2611e:	e514      	b.n	25b4a <_vfiprintf_r+0x6ce>
   26120:	0004b5e0 	.word	0x0004b5e0
   26124:	cccccccd 	.word	0xcccccccd
   26128:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   2612a:	7821      	ldrb	r1, [r4, #0]
   2612c:	2b00      	cmp	r3, #0
   2612e:	f43f aa0d 	beq.w	2554c <_vfiprintf_r+0xd0>
   26132:	781b      	ldrb	r3, [r3, #0]
   26134:	2b00      	cmp	r3, #0
   26136:	f43f aa09 	beq.w	2554c <_vfiprintf_r+0xd0>
   2613a:	9b02      	ldr	r3, [sp, #8]
   2613c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
   26140:	9302      	str	r3, [sp, #8]
   26142:	f7ff ba03 	b.w	2554c <_vfiprintf_r+0xd0>
   26146:	17d9      	asrs	r1, r3, #31
   26148:	920a      	str	r2, [sp, #40]	@ 0x28
   2614a:	460a      	mov	r2, r1
   2614c:	f7ff bbfe 	b.w	2594c <_vfiprintf_r+0x4d0>
   26150:	4662      	mov	r2, ip
   26152:	2101      	movs	r1, #1
   26154:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
   26158:	f7ff bb51 	b.w	257fe <_vfiprintf_r+0x382>
   2615c:	9a02      	ldr	r2, [sp, #8]
   2615e:	9405      	str	r4, [sp, #20]
   26160:	e473      	b.n	25a4a <_vfiprintf_r+0x5ce>
   26162:	4ba9      	ldr	r3, [pc, #676]	@ (26408 <_vfiprintf_r+0xf8c>)
   26164:	9405      	str	r4, [sp, #20]
   26166:	930d      	str	r3, [sp, #52]	@ 0x34
   26168:	9b02      	ldr	r3, [sp, #8]
   2616a:	f013 0220 	ands.w	r2, r3, #32
   2616e:	d064      	beq.n	2623a <_vfiprintf_r+0xdbe>
   26170:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   26172:	3307      	adds	r3, #7
   26174:	f023 0307 	bic.w	r3, r3, #7
   26178:	4618      	mov	r0, r3
   2617a:	685a      	ldr	r2, [r3, #4]
   2617c:	f850 3b08 	ldr.w	r3, [r0], #8
   26180:	900a      	str	r0, [sp, #40]	@ 0x28
   26182:	9c02      	ldr	r4, [sp, #8]
   26184:	07e6      	lsls	r6, r4, #31
   26186:	d50a      	bpl.n	2619e <_vfiprintf_r+0xd22>
   26188:	ea53 0002 	orrs.w	r0, r3, r2
   2618c:	d007      	beq.n	2619e <_vfiprintf_r+0xd22>
   2618e:	f88d 104d 	strb.w	r1, [sp, #77]	@ 0x4d
   26192:	f044 0102 	orr.w	r1, r4, #2
   26196:	9102      	str	r1, [sp, #8]
   26198:	2130      	movs	r1, #48	@ 0x30
   2619a:	f88d 104c 	strb.w	r1, [sp, #76]	@ 0x4c
   2619e:	9902      	ldr	r1, [sp, #8]
   261a0:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
   261a4:	9102      	str	r1, [sp, #8]
   261a6:	e4b3      	b.n	25b10 <_vfiprintf_r+0x694>
   261a8:	9902      	ldr	r1, [sp, #8]
   261aa:	9405      	str	r4, [sp, #20]
   261ac:	f7ff bbfa 	b.w	259a4 <_vfiprintf_r+0x528>
   261b0:	4b96      	ldr	r3, [pc, #600]	@ (2640c <_vfiprintf_r+0xf90>)
   261b2:	9405      	str	r4, [sp, #20]
   261b4:	930d      	str	r3, [sp, #52]	@ 0x34
   261b6:	e7d7      	b.n	26168 <_vfiprintf_r+0xcec>
   261b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   261ba:	681b      	ldr	r3, [r3, #0]
   261bc:	f88d 30b4 	strb.w	r3, [sp, #180]	@ 0xb4
   261c0:	2301      	movs	r3, #1
   261c2:	9303      	str	r3, [sp, #12]
   261c4:	9309      	str	r3, [sp, #36]	@ 0x24
   261c6:	ac2d      	add	r4, sp, #180	@ 0xb4
   261c8:	f7ff bbad 	b.w	25926 <_vfiprintf_r+0x4aa>
   261cc:	f89d 304b 	ldrb.w	r3, [sp, #75]	@ 0x4b
   261d0:	2b00      	cmp	r3, #0
   261d2:	f000 80db 	beq.w	2638c <_vfiprintf_r+0xf10>
   261d6:	2101      	movs	r1, #1
   261d8:	f10d 034b 	add.w	r3, sp, #75	@ 0x4b
   261dc:	911e      	str	r1, [sp, #120]	@ 0x78
   261de:	931d      	str	r3, [sp, #116]	@ 0x74
   261e0:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
   261e4:	468c      	mov	ip, r1
   261e6:	f7ff bae5 	b.w	257b4 <_vfiprintf_r+0x338>
   261ea:	2208      	movs	r2, #8
   261ec:	2100      	movs	r1, #0
   261ee:	a818      	add	r0, sp, #96	@ 0x60
   261f0:	9415      	str	r4, [sp, #84]	@ 0x54
   261f2:	f000 fe73 	bl	26edc <memset>
   261f6:	9b04      	ldr	r3, [sp, #16]
   261f8:	2b00      	cmp	r3, #0
   261fa:	db6d      	blt.n	262d8 <_vfiprintf_r+0xe5c>
   261fc:	2500      	movs	r5, #0
   261fe:	f8cd 900c 	str.w	r9, [sp, #12]
   26202:	46a8      	mov	r8, r5
   26204:	4699      	mov	r9, r3
   26206:	e00e      	b.n	26226 <_vfiprintf_r+0xdaa>
   26208:	a92d      	add	r1, sp, #180	@ 0xb4
   2620a:	4658      	mov	r0, fp
   2620c:	f000 ffb6 	bl	2717c <_wcrtomb_r>
   26210:	1c43      	adds	r3, r0, #1
   26212:	4440      	add	r0, r8
   26214:	f000 8100 	beq.w	26418 <_vfiprintf_r+0xf9c>
   26218:	4548      	cmp	r0, r9
   2621a:	dc09      	bgt.n	26230 <_vfiprintf_r+0xdb4>
   2621c:	f105 0504 	add.w	r5, r5, #4
   26220:	f000 8117 	beq.w	26452 <_vfiprintf_r+0xfd6>
   26224:	4680      	mov	r8, r0
   26226:	9a15      	ldr	r2, [sp, #84]	@ 0x54
   26228:	5952      	ldr	r2, [r2, r5]
   2622a:	ab18      	add	r3, sp, #96	@ 0x60
   2622c:	2a00      	cmp	r2, #0
   2622e:	d1eb      	bne.n	26208 <_vfiprintf_r+0xd8c>
   26230:	f8dd 900c 	ldr.w	r9, [sp, #12]
   26234:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
   26238:	e05c      	b.n	262f4 <_vfiprintf_r+0xe78>
   2623a:	9c02      	ldr	r4, [sp, #8]
   2623c:	980a      	ldr	r0, [sp, #40]	@ 0x28
   2623e:	f014 0410 	ands.w	r4, r4, #16
   26242:	f850 3b04 	ldr.w	r3, [r0], #4
   26246:	d10d      	bne.n	26264 <_vfiprintf_r+0xde8>
   26248:	9a02      	ldr	r2, [sp, #8]
   2624a:	f012 0240 	ands.w	r2, r2, #64	@ 0x40
   2624e:	d003      	beq.n	26258 <_vfiprintf_r+0xddc>
   26250:	b29b      	uxth	r3, r3
   26252:	4622      	mov	r2, r4
   26254:	900a      	str	r0, [sp, #40]	@ 0x28
   26256:	e794      	b.n	26182 <_vfiprintf_r+0xd06>
   26258:	9c02      	ldr	r4, [sp, #8]
   2625a:	f414 7400 	ands.w	r4, r4, #512	@ 0x200
   2625e:	f040 808d 	bne.w	2637c <_vfiprintf_r+0xf00>
   26262:	4622      	mov	r2, r4
   26264:	900a      	str	r0, [sp, #40]	@ 0x28
   26266:	e78c      	b.n	26182 <_vfiprintf_r+0xd06>
   26268:	9102      	str	r1, [sp, #8]
   2626a:	e415      	b.n	25a98 <_vfiprintf_r+0x61c>
   2626c:	4658      	mov	r0, fp
   2626e:	f000 fab3 	bl	267d8 <__sinit>
   26272:	f7ff b919 	b.w	254a8 <_vfiprintf_r+0x2c>
   26276:	f043 0320 	orr.w	r3, r3, #32
   2627a:	7861      	ldrb	r1, [r4, #1]
   2627c:	9302      	str	r3, [sp, #8]
   2627e:	3401      	adds	r4, #1
   26280:	f7ff b964 	b.w	2554c <_vfiprintf_r+0xd0>
   26284:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
   26288:	7861      	ldrb	r1, [r4, #1]
   2628a:	9302      	str	r3, [sp, #8]
   2628c:	3401      	adds	r4, #1
   2628e:	f7ff b95d 	b.w	2554c <_vfiprintf_r+0xd0>
   26292:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   26294:	9a07      	ldr	r2, [sp, #28]
   26296:	681b      	ldr	r3, [r3, #0]
   26298:	601a      	str	r2, [r3, #0]
   2629a:	e456      	b.n	25b4a <_vfiprintf_r+0x6ce>
   2629c:	9b04      	ldr	r3, [sp, #16]
   2629e:	4c5c      	ldr	r4, [pc, #368]	@ (26410 <_vfiprintf_r+0xf94>)
   262a0:	2b06      	cmp	r3, #6
   262a2:	bf28      	it	cs
   262a4:	2306      	movcs	r3, #6
   262a6:	e9cd 3609 	strd	r3, r6, [sp, #36]	@ 0x24
   262aa:	9303      	str	r3, [sp, #12]
   262ac:	f7ff ba5e 	b.w	2576c <_vfiprintf_r+0x2f0>
   262b0:	f412 7100 	ands.w	r1, r2, #512	@ 0x200
   262b4:	f43f ae87 	beq.w	25fc6 <_vfiprintf_r+0xb4a>
   262b8:	b2db      	uxtb	r3, r3
   262ba:	4629      	mov	r1, r5
   262bc:	900a      	str	r0, [sp, #40]	@ 0x28
   262be:	f7ff bbd1 	b.w	25a64 <_vfiprintf_r+0x5e8>
   262c2:	9902      	ldr	r1, [sp, #8]
   262c4:	920a      	str	r2, [sp, #40]	@ 0x28
   262c6:	058d      	lsls	r5, r1, #22
   262c8:	bf4a      	itet	mi
   262ca:	f343 11c0 	sbfxmi	r1, r3, #7, #1
   262ce:	17d9      	asrpl	r1, r3, #31
   262d0:	b25b      	sxtbmi	r3, r3
   262d2:	460a      	mov	r2, r1
   262d4:	f7ff bb3a 	b.w	2594c <_vfiprintf_r+0x4d0>
   262d8:	ab18      	add	r3, sp, #96	@ 0x60
   262da:	9300      	str	r3, [sp, #0]
   262dc:	2300      	movs	r3, #0
   262de:	4619      	mov	r1, r3
   262e0:	aa15      	add	r2, sp, #84	@ 0x54
   262e2:	4658      	mov	r0, fp
   262e4:	f000 ff70 	bl	271c8 <_wcsrtombs_r>
   262e8:	4603      	mov	r3, r0
   262ea:	3301      	adds	r3, #1
   262ec:	9009      	str	r0, [sp, #36]	@ 0x24
   262ee:	f000 8093 	beq.w	26418 <_vfiprintf_r+0xf9c>
   262f2:	9415      	str	r4, [sp, #84]	@ 0x54
   262f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   262f6:	b363      	cbz	r3, 26352 <_vfiprintf_r+0xed6>
   262f8:	2b63      	cmp	r3, #99	@ 0x63
   262fa:	dc53      	bgt.n	263a4 <_vfiprintf_r+0xf28>
   262fc:	2300      	movs	r3, #0
   262fe:	930b      	str	r3, [sp, #44]	@ 0x2c
   26300:	ac2d      	add	r4, sp, #180	@ 0xb4
   26302:	2208      	movs	r2, #8
   26304:	2100      	movs	r1, #0
   26306:	a818      	add	r0, sp, #96	@ 0x60
   26308:	f000 fde8 	bl	26edc <memset>
   2630c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
   2630e:	ab18      	add	r3, sp, #96	@ 0x60
   26310:	9300      	str	r3, [sp, #0]
   26312:	aa15      	add	r2, sp, #84	@ 0x54
   26314:	462b      	mov	r3, r5
   26316:	4621      	mov	r1, r4
   26318:	4658      	mov	r0, fp
   2631a:	f000 ff55 	bl	271c8 <_wcsrtombs_r>
   2631e:	4285      	cmp	r5, r0
   26320:	f040 80a6 	bne.w	26470 <_vfiprintf_r+0xff4>
   26324:	9a09      	ldr	r2, [sp, #36]	@ 0x24
   26326:	2300      	movs	r3, #0
   26328:	54a3      	strb	r3, [r4, r2]
   2632a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   2632e:	9303      	str	r3, [sp, #12]
   26330:	e012      	b.n	26358 <_vfiprintf_r+0xedc>
   26332:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
   26334:	9910      	ldr	r1, [sp, #64]	@ 0x40
   26336:	eba9 0903 	sub.w	r9, r9, r3
   2633a:	461a      	mov	r2, r3
   2633c:	4648      	mov	r0, r9
   2633e:	f000 fe65 	bl	2700c <strncpy>
   26342:	f89b 3001 	ldrb.w	r3, [fp, #1]
   26346:	b10b      	cbz	r3, 2634c <_vfiprintf_r+0xed0>
   26348:	f10b 0b01 	add.w	fp, fp, #1
   2634c:	f04f 0c00 	mov.w	ip, #0
   26350:	e65b      	b.n	2600a <_vfiprintf_r+0xb8e>
   26352:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   26354:	9303      	str	r3, [sp, #12]
   26356:	930b      	str	r3, [sp, #44]	@ 0x2c
   26358:	f89d 304b 	ldrb.w	r3, [sp, #75]	@ 0x4b
   2635c:	b11b      	cbz	r3, 26366 <_vfiprintf_r+0xeea>
   2635e:	2300      	movs	r3, #0
   26360:	960a      	str	r6, [sp, #40]	@ 0x28
   26362:	9304      	str	r3, [sp, #16]
   26364:	e45b      	b.n	25c1e <_vfiprintf_r+0x7a2>
   26366:	9304      	str	r3, [sp, #16]
   26368:	960a      	str	r6, [sp, #40]	@ 0x28
   2636a:	4698      	mov	r8, r3
   2636c:	f7ff ba02 	b.w	25774 <_vfiprintf_r+0x2f8>
   26370:	2101      	movs	r1, #1
   26372:	4662      	mov	r2, ip
   26374:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
   26378:	f7ff ba45 	b.w	25806 <_vfiprintf_r+0x38a>
   2637c:	b2db      	uxtb	r3, r3
   2637e:	900a      	str	r0, [sp, #40]	@ 0x28
   26380:	e6ff      	b.n	26182 <_vfiprintf_r+0xd06>
   26382:	b2db      	uxtb	r3, r3
   26384:	462a      	mov	r2, r5
   26386:	900a      	str	r0, [sp, #40]	@ 0x28
   26388:	f7ff bb19 	b.w	259be <_vfiprintf_r+0x542>
   2638c:	4662      	mov	r2, ip
   2638e:	2101      	movs	r1, #1
   26390:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
   26394:	f7ff ba12 	b.w	257bc <_vfiprintf_r+0x340>
   26398:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   2639a:	9a07      	ldr	r2, [sp, #28]
   2639c:	681b      	ldr	r3, [r3, #0]
   2639e:	801a      	strh	r2, [r3, #0]
   263a0:	f7ff bbd3 	b.w	25b4a <_vfiprintf_r+0x6ce>
   263a4:	1c59      	adds	r1, r3, #1
   263a6:	4658      	mov	r0, fp
   263a8:	f001 f8fc 	bl	275a4 <_malloc_r>
   263ac:	4604      	mov	r4, r0
   263ae:	2800      	cmp	r0, #0
   263b0:	d032      	beq.n	26418 <_vfiprintf_r+0xf9c>
   263b2:	900b      	str	r0, [sp, #44]	@ 0x2c
   263b4:	e7a5      	b.n	26302 <_vfiprintf_r+0xe86>
   263b6:	6d88      	ldr	r0, [r1, #88]	@ 0x58
   263b8:	f000 fede 	bl	27178 <__retarget_lock_release_recursive>
   263bc:	f7ff b96d 	b.w	2569a <_vfiprintf_r+0x21e>
   263c0:	9b04      	ldr	r3, [sp, #16]
   263c2:	9303      	str	r3, [sp, #12]
   263c4:	9309      	str	r3, [sp, #36]	@ 0x24
   263c6:	e7c7      	b.n	26358 <_vfiprintf_r+0xedc>
   263c8:	4620      	mov	r0, r4
   263ca:	f7f2 f979 	bl	186c0 <strlen>
   263ce:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   263d2:	9009      	str	r0, [sp, #36]	@ 0x24
   263d4:	950b      	str	r5, [sp, #44]	@ 0x2c
   263d6:	9303      	str	r3, [sp, #12]
   263d8:	e7be      	b.n	26358 <_vfiprintf_r+0xedc>
   263da:	4e0e      	ldr	r6, [pc, #56]	@ (26414 <_vfiprintf_r+0xf98>)
   263dc:	4686      	mov	lr, r0
   263de:	e555      	b.n	25e8c <_vfiprintf_r+0xa10>
   263e0:	2300      	movs	r3, #0
   263e2:	4604      	mov	r4, r0
   263e4:	9304      	str	r3, [sp, #16]
   263e6:	f7ff b8b2 	b.w	2554e <_vfiprintf_r+0xd2>
   263ea:	2330      	movs	r3, #48	@ 0x30
   263ec:	e405      	b.n	25bfa <_vfiprintf_r+0x77e>
   263ee:	9906      	ldr	r1, [sp, #24]
   263f0:	aa1a      	add	r2, sp, #104	@ 0x68
   263f2:	4658      	mov	r0, fp
   263f4:	f7ff f806 	bl	25404 <__sprint_r.part.0>
   263f8:	2800      	cmp	r0, #0
   263fa:	f43f a97c 	beq.w	256f6 <_vfiprintf_r+0x27a>
   263fe:	f7ff b99a 	b.w	25736 <_vfiprintf_r+0x2ba>
   26402:	4e04      	ldr	r6, [pc, #16]	@ (26414 <_vfiprintf_r+0xf98>)
   26404:	1c48      	adds	r0, r1, #1
   26406:	e58c      	b.n	25f22 <_vfiprintf_r+0xaa6>
   26408:	00043cd4 	.word	0x00043cd4
   2640c:	00043ce8 	.word	0x00043ce8
   26410:	00043cfc 	.word	0x00043cfc
   26414:	0004b5e0 	.word	0x0004b5e0
   26418:	9a06      	ldr	r2, [sp, #24]
   2641a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   2641e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   26422:	8193      	strh	r3, [r2, #12]
   26424:	f7ff b98a 	b.w	2573c <_vfiprintf_r+0x2c0>
   26428:	9b06      	ldr	r3, [sp, #24]
   2642a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
   2642c:	07db      	lsls	r3, r3, #31
   2642e:	d407      	bmi.n	26440 <_vfiprintf_r+0xfc4>
   26430:	9b06      	ldr	r3, [sp, #24]
   26432:	899b      	ldrh	r3, [r3, #12]
   26434:	059f      	lsls	r7, r3, #22
   26436:	d403      	bmi.n	26440 <_vfiprintf_r+0xfc4>
   26438:	9b06      	ldr	r3, [sp, #24]
   2643a:	6d98      	ldr	r0, [r3, #88]	@ 0x58
   2643c:	f000 fe9c 	bl	27178 <__retarget_lock_release_recursive>
   26440:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
   26444:	9307      	str	r3, [sp, #28]
   26446:	f7ff b981 	b.w	2574c <_vfiprintf_r+0x2d0>
   2644a:	f8df 8034 	ldr.w	r8, [pc, #52]	@ 26480 <_vfiprintf_r+0x1004>
   2644e:	4608      	mov	r0, r1
   26450:	e439      	b.n	25cc6 <_vfiprintf_r+0x84a>
   26452:	e9dd 9303 	ldrd	r9, r3, [sp, #12]
   26456:	9309      	str	r3, [sp, #36]	@ 0x24
   26458:	e74c      	b.n	262f4 <_vfiprintf_r+0xe78>
   2645a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   2645c:	7861      	ldrb	r1, [r4, #1]
   2645e:	f853 2b04 	ldr.w	r2, [r3], #4
   26462:	930a      	str	r3, [sp, #40]	@ 0x28
   26464:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   26468:	4604      	mov	r4, r0
   2646a:	9204      	str	r2, [sp, #16]
   2646c:	f7ff b86e 	b.w	2554c <_vfiprintf_r+0xd0>
   26470:	9a06      	ldr	r2, [sp, #24]
   26472:	8993      	ldrh	r3, [r2, #12]
   26474:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   26478:	8193      	strh	r3, [r2, #12]
   2647a:	f7ff b956 	b.w	2572a <_vfiprintf_r+0x2ae>
   2647e:	bf00      	nop
   26480:	0004b5d0 	.word	0x0004b5d0

00026484 <__sbprintf>:
   26484:	b5f0      	push	{r4, r5, r6, r7, lr}
   26486:	461f      	mov	r7, r3
   26488:	898b      	ldrh	r3, [r1, #12]
   2648a:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
   2648e:	f023 0302 	bic.w	r3, r3, #2
   26492:	f8ad 300c 	strh.w	r3, [sp, #12]
   26496:	ab1a      	add	r3, sp, #104	@ 0x68
   26498:	9300      	str	r3, [sp, #0]
   2649a:	9304      	str	r3, [sp, #16]
   2649c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
   264a0:	9302      	str	r3, [sp, #8]
   264a2:	9305      	str	r3, [sp, #20]
   264a4:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
   264a6:	9319      	str	r3, [sp, #100]	@ 0x64
   264a8:	89cb      	ldrh	r3, [r1, #14]
   264aa:	f8ad 300e 	strh.w	r3, [sp, #14]
   264ae:	69cb      	ldr	r3, [r1, #28]
   264b0:	9307      	str	r3, [sp, #28]
   264b2:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
   264b4:	9309      	str	r3, [sp, #36]	@ 0x24
   264b6:	4615      	mov	r5, r2
   264b8:	2300      	movs	r3, #0
   264ba:	4606      	mov	r6, r0
   264bc:	a816      	add	r0, sp, #88	@ 0x58
   264be:	460c      	mov	r4, r1
   264c0:	9306      	str	r3, [sp, #24]
   264c2:	f000 fe53 	bl	2716c <__retarget_lock_init_recursive>
   264c6:	462a      	mov	r2, r5
   264c8:	463b      	mov	r3, r7
   264ca:	4669      	mov	r1, sp
   264cc:	4630      	mov	r0, r6
   264ce:	f7fe ffd5 	bl	2547c <_vfiprintf_r>
   264d2:	1e05      	subs	r5, r0, #0
   264d4:	db07      	blt.n	264e6 <__sbprintf+0x62>
   264d6:	4669      	mov	r1, sp
   264d8:	4630      	mov	r0, r6
   264da:	f000 f8af 	bl	2663c <_fflush_r>
   264de:	2800      	cmp	r0, #0
   264e0:	bf18      	it	ne
   264e2:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
   264e6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   264ea:	065b      	lsls	r3, r3, #25
   264ec:	d503      	bpl.n	264f6 <__sbprintf+0x72>
   264ee:	89a3      	ldrh	r3, [r4, #12]
   264f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   264f4:	81a3      	strh	r3, [r4, #12]
   264f6:	9816      	ldr	r0, [sp, #88]	@ 0x58
   264f8:	f000 fe3a 	bl	27170 <__retarget_lock_close_recursive>
   264fc:	4628      	mov	r0, r5
   264fe:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
   26502:	bdf0      	pop	{r4, r5, r6, r7, pc}

00026504 <__sflush_r>:
   26504:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   26508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2650c:	0716      	lsls	r6, r2, #28
   2650e:	460c      	mov	r4, r1
   26510:	4680      	mov	r8, r0
   26512:	d44e      	bmi.n	265b2 <__sflush_r+0xae>
   26514:	6849      	ldr	r1, [r1, #4]
   26516:	f442 6300 	orr.w	r3, r2, #2048	@ 0x800
   2651a:	2900      	cmp	r1, #0
   2651c:	81a3      	strh	r3, [r4, #12]
   2651e:	dd63      	ble.n	265e8 <__sflush_r+0xe4>
   26520:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
   26522:	2d00      	cmp	r5, #0
   26524:	d042      	beq.n	265ac <__sflush_r+0xa8>
   26526:	2100      	movs	r1, #0
   26528:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
   2652c:	f8d8 6000 	ldr.w	r6, [r8]
   26530:	f8c8 1000 	str.w	r1, [r8]
   26534:	69e1      	ldr	r1, [r4, #28]
   26536:	d164      	bne.n	26602 <__sflush_r+0xfe>
   26538:	2301      	movs	r3, #1
   2653a:	4640      	mov	r0, r8
   2653c:	47a8      	blx	r5
   2653e:	1c45      	adds	r5, r0, #1
   26540:	4602      	mov	r2, r0
   26542:	d06e      	beq.n	26622 <__sflush_r+0x11e>
   26544:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   26548:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
   2654a:	69e1      	ldr	r1, [r4, #28]
   2654c:	0758      	lsls	r0, r3, #29
   2654e:	d505      	bpl.n	2655c <__sflush_r+0x58>
   26550:	6863      	ldr	r3, [r4, #4]
   26552:	1ad2      	subs	r2, r2, r3
   26554:	6b23      	ldr	r3, [r4, #48]	@ 0x30
   26556:	b10b      	cbz	r3, 2655c <__sflush_r+0x58>
   26558:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
   2655a:	1ad2      	subs	r2, r2, r3
   2655c:	2300      	movs	r3, #0
   2655e:	4640      	mov	r0, r8
   26560:	47a8      	blx	r5
   26562:	1c43      	adds	r3, r0, #1
   26564:	d14f      	bne.n	26606 <__sflush_r+0x102>
   26566:	f8d8 1000 	ldr.w	r1, [r8]
   2656a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2656e:	291d      	cmp	r1, #29
   26570:	d840      	bhi.n	265f4 <__sflush_r+0xf0>
   26572:	4a31      	ldr	r2, [pc, #196]	@ (26638 <__sflush_r+0x134>)
   26574:	40ca      	lsrs	r2, r1
   26576:	07d7      	lsls	r7, r2, #31
   26578:	d53c      	bpl.n	265f4 <__sflush_r+0xf0>
   2657a:	6922      	ldr	r2, [r4, #16]
   2657c:	6022      	str	r2, [r4, #0]
   2657e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
   26582:	81a2      	strh	r2, [r4, #12]
   26584:	04dd      	lsls	r5, r3, #19
   26586:	f04f 0200 	mov.w	r2, #0
   2658a:	6062      	str	r2, [r4, #4]
   2658c:	d501      	bpl.n	26592 <__sflush_r+0x8e>
   2658e:	2900      	cmp	r1, #0
   26590:	d045      	beq.n	2661e <__sflush_r+0x11a>
   26592:	6b21      	ldr	r1, [r4, #48]	@ 0x30
   26594:	f8c8 6000 	str.w	r6, [r8]
   26598:	b141      	cbz	r1, 265ac <__sflush_r+0xa8>
   2659a:	f104 0340 	add.w	r3, r4, #64	@ 0x40
   2659e:	4299      	cmp	r1, r3
   265a0:	d002      	beq.n	265a8 <__sflush_r+0xa4>
   265a2:	4640      	mov	r0, r8
   265a4:	f000 fec2 	bl	2732c <_free_r>
   265a8:	2300      	movs	r3, #0
   265aa:	6323      	str	r3, [r4, #48]	@ 0x30
   265ac:	2000      	movs	r0, #0
   265ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   265b2:	690e      	ldr	r6, [r1, #16]
   265b4:	2e00      	cmp	r6, #0
   265b6:	d0f9      	beq.n	265ac <__sflush_r+0xa8>
   265b8:	680d      	ldr	r5, [r1, #0]
   265ba:	600e      	str	r6, [r1, #0]
   265bc:	0792      	lsls	r2, r2, #30
   265be:	bf0c      	ite	eq
   265c0:	694b      	ldreq	r3, [r1, #20]
   265c2:	2300      	movne	r3, #0
   265c4:	1bad      	subs	r5, r5, r6
   265c6:	608b      	str	r3, [r1, #8]
   265c8:	e00b      	b.n	265e2 <__sflush_r+0xde>
   265ca:	462b      	mov	r3, r5
   265cc:	4632      	mov	r2, r6
   265ce:	69e1      	ldr	r1, [r4, #28]
   265d0:	6a67      	ldr	r7, [r4, #36]	@ 0x24
   265d2:	4640      	mov	r0, r8
   265d4:	47b8      	blx	r7
   265d6:	f1b0 0c00 	subs.w	ip, r0, #0
   265da:	eba5 050c 	sub.w	r5, r5, ip
   265de:	4466      	add	r6, ip
   265e0:	dd06      	ble.n	265f0 <__sflush_r+0xec>
   265e2:	2d00      	cmp	r5, #0
   265e4:	dcf1      	bgt.n	265ca <__sflush_r+0xc6>
   265e6:	e7e1      	b.n	265ac <__sflush_r+0xa8>
   265e8:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
   265ea:	2900      	cmp	r1, #0
   265ec:	dc98      	bgt.n	26520 <__sflush_r+0x1c>
   265ee:	e7dd      	b.n	265ac <__sflush_r+0xa8>
   265f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   265f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   265f8:	81a3      	strh	r3, [r4, #12]
   265fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   265fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26602:	6d22      	ldr	r2, [r4, #80]	@ 0x50
   26604:	e7a2      	b.n	2654c <__sflush_r+0x48>
   26606:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2660a:	6922      	ldr	r2, [r4, #16]
   2660c:	6022      	str	r2, [r4, #0]
   2660e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
   26612:	81a2      	strh	r2, [r4, #12]
   26614:	04db      	lsls	r3, r3, #19
   26616:	f04f 0200 	mov.w	r2, #0
   2661a:	6062      	str	r2, [r4, #4]
   2661c:	d5b9      	bpl.n	26592 <__sflush_r+0x8e>
   2661e:	6520      	str	r0, [r4, #80]	@ 0x50
   26620:	e7b7      	b.n	26592 <__sflush_r+0x8e>
   26622:	f8d8 3000 	ldr.w	r3, [r8]
   26626:	2b00      	cmp	r3, #0
   26628:	d08c      	beq.n	26544 <__sflush_r+0x40>
   2662a:	2b1d      	cmp	r3, #29
   2662c:	d001      	beq.n	26632 <__sflush_r+0x12e>
   2662e:	2b16      	cmp	r3, #22
   26630:	d1de      	bne.n	265f0 <__sflush_r+0xec>
   26632:	f8c8 6000 	str.w	r6, [r8]
   26636:	e7b9      	b.n	265ac <__sflush_r+0xa8>
   26638:	20400001 	.word	0x20400001

0002663c <_fflush_r>:
   2663c:	b538      	push	{r3, r4, r5, lr}
   2663e:	460c      	mov	r4, r1
   26640:	4605      	mov	r5, r0
   26642:	b108      	cbz	r0, 26648 <_fflush_r+0xc>
   26644:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   26646:	b303      	cbz	r3, 2668a <_fflush_r+0x4e>
   26648:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   2664c:	b188      	cbz	r0, 26672 <_fflush_r+0x36>
   2664e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
   26650:	07db      	lsls	r3, r3, #31
   26652:	d401      	bmi.n	26658 <_fflush_r+0x1c>
   26654:	0581      	lsls	r1, r0, #22
   26656:	d50f      	bpl.n	26678 <_fflush_r+0x3c>
   26658:	4628      	mov	r0, r5
   2665a:	4621      	mov	r1, r4
   2665c:	f7ff ff52 	bl	26504 <__sflush_r>
   26660:	6e63      	ldr	r3, [r4, #100]	@ 0x64
   26662:	07da      	lsls	r2, r3, #31
   26664:	4605      	mov	r5, r0
   26666:	d402      	bmi.n	2666e <_fflush_r+0x32>
   26668:	89a3      	ldrh	r3, [r4, #12]
   2666a:	059b      	lsls	r3, r3, #22
   2666c:	d508      	bpl.n	26680 <_fflush_r+0x44>
   2666e:	4628      	mov	r0, r5
   26670:	bd38      	pop	{r3, r4, r5, pc}
   26672:	4605      	mov	r5, r0
   26674:	4628      	mov	r0, r5
   26676:	bd38      	pop	{r3, r4, r5, pc}
   26678:	6da0      	ldr	r0, [r4, #88]	@ 0x58
   2667a:	f000 fd7b 	bl	27174 <__retarget_lock_acquire_recursive>
   2667e:	e7eb      	b.n	26658 <_fflush_r+0x1c>
   26680:	6da0      	ldr	r0, [r4, #88]	@ 0x58
   26682:	f000 fd79 	bl	27178 <__retarget_lock_release_recursive>
   26686:	4628      	mov	r0, r5
   26688:	bd38      	pop	{r3, r4, r5, pc}
   2668a:	f000 f8a5 	bl	267d8 <__sinit>
   2668e:	e7db      	b.n	26648 <_fflush_r+0xc>

00026690 <stdio_exit_handler>:
   26690:	4a02      	ldr	r2, [pc, #8]	@ (2669c <stdio_exit_handler+0xc>)
   26692:	4903      	ldr	r1, [pc, #12]	@ (266a0 <stdio_exit_handler+0x10>)
   26694:	4803      	ldr	r0, [pc, #12]	@ (266a4 <stdio_exit_handler+0x14>)
   26696:	f000 ba81 	b.w	26b9c <_fwalk_sglue>
   2669a:	bf00      	nop
   2669c:	1000d3c8 	.word	0x1000d3c8
   266a0:	00029769 	.word	0x00029769
   266a4:	1000d548 	.word	0x1000d548

000266a8 <cleanup_stdio>:
   266a8:	4b0c      	ldr	r3, [pc, #48]	@ (266dc <cleanup_stdio+0x34>)
   266aa:	6841      	ldr	r1, [r0, #4]
   266ac:	4299      	cmp	r1, r3
   266ae:	b510      	push	{r4, lr}
   266b0:	4604      	mov	r4, r0
   266b2:	d001      	beq.n	266b8 <cleanup_stdio+0x10>
   266b4:	f003 f858 	bl	29768 <_fclose_r>
   266b8:	68a1      	ldr	r1, [r4, #8]
   266ba:	4b09      	ldr	r3, [pc, #36]	@ (266e0 <cleanup_stdio+0x38>)
   266bc:	4299      	cmp	r1, r3
   266be:	d002      	beq.n	266c6 <cleanup_stdio+0x1e>
   266c0:	4620      	mov	r0, r4
   266c2:	f003 f851 	bl	29768 <_fclose_r>
   266c6:	68e1      	ldr	r1, [r4, #12]
   266c8:	4b06      	ldr	r3, [pc, #24]	@ (266e4 <cleanup_stdio+0x3c>)
   266ca:	4299      	cmp	r1, r3
   266cc:	d004      	beq.n	266d8 <cleanup_stdio+0x30>
   266ce:	4620      	mov	r0, r4
   266d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   266d4:	f003 b848 	b.w	29768 <_fclose_r>
   266d8:	bd10      	pop	{r4, pc}
   266da:	bf00      	nop
   266dc:	1004ff50 	.word	0x1004ff50
   266e0:	1004ffb8 	.word	0x1004ffb8
   266e4:	10050020 	.word	0x10050020

000266e8 <global_stdio_init.part.0>:
   266e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   266ec:	4a31      	ldr	r2, [pc, #196]	@ (267b4 <global_stdio_init.part.0+0xcc>)
   266ee:	4c32      	ldr	r4, [pc, #200]	@ (267b8 <global_stdio_init.part.0+0xd0>)
   266f0:	4932      	ldr	r1, [pc, #200]	@ (267bc <global_stdio_init.part.0+0xd4>)
   266f2:	f8df 90dc 	ldr.w	r9, [pc, #220]	@ 267d0 <global_stdio_init.part.0+0xe8>
   266f6:	f8df 80dc 	ldr.w	r8, [pc, #220]	@ 267d4 <global_stdio_init.part.0+0xec>
   266fa:	4f31      	ldr	r7, [pc, #196]	@ (267c0 <global_stdio_init.part.0+0xd8>)
   266fc:	6011      	str	r1, [r2, #0]
   266fe:	2500      	movs	r5, #0
   26700:	2304      	movs	r3, #4
   26702:	4629      	mov	r1, r5
   26704:	2208      	movs	r2, #8
   26706:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
   2670a:	e9c4 3503 	strd	r3, r5, [r4, #12]
   2670e:	4e2d      	ldr	r6, [pc, #180]	@ (267c4 <global_stdio_init.part.0+0xdc>)
   26710:	60a5      	str	r5, [r4, #8]
   26712:	e9c4 5500 	strd	r5, r5, [r4]
   26716:	e9c4 5505 	strd	r5, r5, [r4, #20]
   2671a:	6665      	str	r5, [r4, #100]	@ 0x64
   2671c:	f000 fbde 	bl	26edc <memset>
   26720:	f104 0058 	add.w	r0, r4, #88	@ 0x58
   26724:	e9c4 4907 	strd	r4, r9, [r4, #28]
   26728:	e9c4 8709 	strd	r8, r7, [r4, #36]	@ 0x24
   2672c:	62e6      	str	r6, [r4, #44]	@ 0x2c
   2672e:	f000 fd1d 	bl	2716c <__retarget_lock_init_recursive>
   26732:	4629      	mov	r1, r5
   26734:	4b24      	ldr	r3, [pc, #144]	@ (267c8 <global_stdio_init.part.0+0xe0>)
   26736:	6763      	str	r3, [r4, #116]	@ 0x74
   26738:	2208      	movs	r2, #8
   2673a:	f104 00c4 	add.w	r0, r4, #196	@ 0xc4
   2673e:	e9c4 551a 	strd	r5, r5, [r4, #104]	@ 0x68
   26742:	e9c4 551e 	strd	r5, r5, [r4, #120]	@ 0x78
   26746:	6725      	str	r5, [r4, #112]	@ 0x70
   26748:	f8c4 50cc 	str.w	r5, [r4, #204]	@ 0xcc
   2674c:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
   26750:	f000 fbc4 	bl	26edc <memset>
   26754:	f104 0368 	add.w	r3, r4, #104	@ 0x68
   26758:	f104 00c0 	add.w	r0, r4, #192	@ 0xc0
   2675c:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
   26760:	e9c4 9822 	strd	r9, r8, [r4, #136]	@ 0x88
   26764:	e9c4 7624 	strd	r7, r6, [r4, #144]	@ 0x90
   26768:	f000 fd00 	bl	2716c <__retarget_lock_init_recursive>
   2676c:	4b17      	ldr	r3, [pc, #92]	@ (267cc <global_stdio_init.part.0+0xe4>)
   2676e:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
   26772:	4629      	mov	r1, r5
   26774:	f504 7096 	add.w	r0, r4, #300	@ 0x12c
   26778:	2208      	movs	r2, #8
   2677a:	e9c4 5534 	strd	r5, r5, [r4, #208]	@ 0xd0
   2677e:	e9c4 5538 	strd	r5, r5, [r4, #224]	@ 0xe0
   26782:	f8c4 50d8 	str.w	r5, [r4, #216]	@ 0xd8
   26786:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
   2678a:	f8c4 50e8 	str.w	r5, [r4, #232]	@ 0xe8
   2678e:	f000 fba5 	bl	26edc <memset>
   26792:	f104 03d0 	add.w	r3, r4, #208	@ 0xd0
   26796:	e9c4 873d 	strd	r8, r7, [r4, #244]	@ 0xf4
   2679a:	f8c4 90f0 	str.w	r9, [r4, #240]	@ 0xf0
   2679e:	f504 7094 	add.w	r0, r4, #296	@ 0x128
   267a2:	f8c4 60fc 	str.w	r6, [r4, #252]	@ 0xfc
   267a6:	f8c4 30ec 	str.w	r3, [r4, #236]	@ 0xec
   267aa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   267ae:	f000 bcdd 	b.w	2716c <__retarget_lock_init_recursive>
   267b2:	bf00      	nop
   267b4:	10050088 	.word	0x10050088
   267b8:	1004ff50 	.word	0x1004ff50
   267bc:	00026691 	.word	0x00026691
   267c0:	00029bd1 	.word	0x00029bd1
   267c4:	00029bf5 	.word	0x00029bf5
   267c8:	00010009 	.word	0x00010009
   267cc:	00020012 	.word	0x00020012
   267d0:	00029b6d 	.word	0x00029b6d
   267d4:	00029b91 	.word	0x00029b91

000267d8 <__sinit>:
   267d8:	b510      	push	{r4, lr}
   267da:	4604      	mov	r4, r0
   267dc:	480a      	ldr	r0, [pc, #40]	@ (26808 <__sinit+0x30>)
   267de:	f000 fcc9 	bl	27174 <__retarget_lock_acquire_recursive>
   267e2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   267e4:	b923      	cbnz	r3, 267f0 <__sinit+0x18>
   267e6:	4b09      	ldr	r3, [pc, #36]	@ (2680c <__sinit+0x34>)
   267e8:	4a09      	ldr	r2, [pc, #36]	@ (26810 <__sinit+0x38>)
   267ea:	681b      	ldr	r3, [r3, #0]
   267ec:	6362      	str	r2, [r4, #52]	@ 0x34
   267ee:	b123      	cbz	r3, 267fa <__sinit+0x22>
   267f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   267f4:	4804      	ldr	r0, [pc, #16]	@ (26808 <__sinit+0x30>)
   267f6:	f000 bcbf 	b.w	27178 <__retarget_lock_release_recursive>
   267fa:	f7ff ff75 	bl	266e8 <global_stdio_init.part.0>
   267fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   26802:	4801      	ldr	r0, [pc, #4]	@ (26808 <__sinit+0x30>)
   26804:	f000 bcb8 	b.w	27178 <__retarget_lock_release_recursive>
   26808:	10050098 	.word	0x10050098
   2680c:	10050088 	.word	0x10050088
   26810:	000266a9 	.word	0x000266a9

00026814 <__sfp_lock_acquire>:
   26814:	4801      	ldr	r0, [pc, #4]	@ (2681c <__sfp_lock_acquire+0x8>)
   26816:	f000 bcad 	b.w	27174 <__retarget_lock_acquire_recursive>
   2681a:	bf00      	nop
   2681c:	10050098 	.word	0x10050098

00026820 <__sfp_lock_release>:
   26820:	4801      	ldr	r0, [pc, #4]	@ (26828 <__sfp_lock_release+0x8>)
   26822:	f000 bca9 	b.w	27178 <__retarget_lock_release_recursive>
   26826:	bf00      	nop
   26828:	10050098 	.word	0x10050098

0002682c <vsnprintf>:
   2682c:	b510      	push	{r4, lr}
   2682e:	4c1a      	ldr	r4, [pc, #104]	@ (26898 <vsnprintf+0x6c>)
   26830:	2900      	cmp	r1, #0
   26832:	6824      	ldr	r4, [r4, #0]
   26834:	b09a      	sub	sp, #104	@ 0x68
   26836:	db2a      	blt.n	2688e <vsnprintf+0x62>
   26838:	9000      	str	r0, [sp, #0]
   2683a:	9004      	str	r0, [sp, #16]
   2683c:	f44f 7002 	mov.w	r0, #520	@ 0x208
   26840:	f8ad 000c 	strh.w	r0, [sp, #12]
   26844:	d013      	beq.n	2686e <vsnprintf+0x42>
   26846:	3901      	subs	r1, #1
   26848:	f64f 70ff 	movw	r0, #65535	@ 0xffff
   2684c:	9102      	str	r1, [sp, #8]
   2684e:	9105      	str	r1, [sp, #20]
   26850:	f8ad 000e 	strh.w	r0, [sp, #14]
   26854:	4669      	mov	r1, sp
   26856:	4620      	mov	r0, r4
   26858:	f001 f96e 	bl	27b38 <_svfprintf_r>
   2685c:	1c42      	adds	r2, r0, #1
   2685e:	da01      	bge.n	26864 <vsnprintf+0x38>
   26860:	238b      	movs	r3, #139	@ 0x8b
   26862:	6023      	str	r3, [r4, #0]
   26864:	9b00      	ldr	r3, [sp, #0]
   26866:	2200      	movs	r2, #0
   26868:	701a      	strb	r2, [r3, #0]
   2686a:	b01a      	add	sp, #104	@ 0x68
   2686c:	bd10      	pop	{r4, pc}
   2686e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
   26872:	9102      	str	r1, [sp, #8]
   26874:	9105      	str	r1, [sp, #20]
   26876:	f8ad 000e 	strh.w	r0, [sp, #14]
   2687a:	4669      	mov	r1, sp
   2687c:	4620      	mov	r0, r4
   2687e:	f001 f95b 	bl	27b38 <_svfprintf_r>
   26882:	1c43      	adds	r3, r0, #1
   26884:	da01      	bge.n	2688a <vsnprintf+0x5e>
   26886:	238b      	movs	r3, #139	@ 0x8b
   26888:	6023      	str	r3, [r4, #0]
   2688a:	b01a      	add	sp, #104	@ 0x68
   2688c:	bd10      	pop	{r4, pc}
   2688e:	238b      	movs	r3, #139	@ 0x8b
   26890:	6023      	str	r3, [r4, #0]
   26892:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   26896:	e7f8      	b.n	2688a <vsnprintf+0x5e>
   26898:	1000d540 	.word	0x1000d540

0002689c <__sfvwrite_r>:
   2689c:	6893      	ldr	r3, [r2, #8]
   2689e:	2b00      	cmp	r3, #0
   268a0:	f000 80f8 	beq.w	26a94 <__sfvwrite_r+0x1f8>
   268a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   268a8:	f9b1 c00c 	ldrsh.w	ip, [r1, #12]
   268ac:	f01c 0f08 	tst.w	ip, #8
   268b0:	b083      	sub	sp, #12
   268b2:	4690      	mov	r8, r2
   268b4:	4681      	mov	r9, r0
   268b6:	460c      	mov	r4, r1
   268b8:	d031      	beq.n	2691e <__sfvwrite_r+0x82>
   268ba:	690b      	ldr	r3, [r1, #16]
   268bc:	b37b      	cbz	r3, 2691e <__sfvwrite_r+0x82>
   268be:	f01c 0702 	ands.w	r7, ip, #2
   268c2:	f8d8 6000 	ldr.w	r6, [r8]
   268c6:	d038      	beq.n	2693a <__sfvwrite_r+0x9e>
   268c8:	2700      	movs	r7, #0
   268ca:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
   268ce:	69e1      	ldr	r1, [r4, #28]
   268d0:	f8df a2c4 	ldr.w	sl, [pc, #708]	@ 26b98 <__sfvwrite_r+0x2fc>
   268d4:	463d      	mov	r5, r7
   268d6:	4555      	cmp	r5, sl
   268d8:	462b      	mov	r3, r5
   268da:	463a      	mov	r2, r7
   268dc:	bf28      	it	cs
   268de:	4653      	movcs	r3, sl
   268e0:	4648      	mov	r0, r9
   268e2:	b1c5      	cbz	r5, 26916 <__sfvwrite_r+0x7a>
   268e4:	47d8      	blx	fp
   268e6:	2800      	cmp	r0, #0
   268e8:	f340 80ca 	ble.w	26a80 <__sfvwrite_r+0x1e4>
   268ec:	f8d8 3008 	ldr.w	r3, [r8, #8]
   268f0:	1a1b      	subs	r3, r3, r0
   268f2:	4407      	add	r7, r0
   268f4:	1a2d      	subs	r5, r5, r0
   268f6:	f8c8 3008 	str.w	r3, [r8, #8]
   268fa:	2b00      	cmp	r3, #0
   268fc:	f000 80b6 	beq.w	26a6c <__sfvwrite_r+0x1d0>
   26900:	4555      	cmp	r5, sl
   26902:	462b      	mov	r3, r5
   26904:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
   26908:	69e1      	ldr	r1, [r4, #28]
   2690a:	bf28      	it	cs
   2690c:	4653      	movcs	r3, sl
   2690e:	463a      	mov	r2, r7
   26910:	4648      	mov	r0, r9
   26912:	2d00      	cmp	r5, #0
   26914:	d1e6      	bne.n	268e4 <__sfvwrite_r+0x48>
   26916:	e9d6 7500 	ldrd	r7, r5, [r6]
   2691a:	3608      	adds	r6, #8
   2691c:	e7db      	b.n	268d6 <__sfvwrite_r+0x3a>
   2691e:	4621      	mov	r1, r4
   26920:	4648      	mov	r0, r9
   26922:	f000 f95d 	bl	26be0 <__swsetup_r>
   26926:	2800      	cmp	r0, #0
   26928:	f040 80af 	bne.w	26a8a <__sfvwrite_r+0x1ee>
   2692c:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
   26930:	f8d8 6000 	ldr.w	r6, [r8]
   26934:	f01c 0702 	ands.w	r7, ip, #2
   26938:	d1c6      	bne.n	268c8 <__sfvwrite_r+0x2c>
   2693a:	f01c 0a01 	ands.w	sl, ip, #1
   2693e:	d163      	bne.n	26a08 <__sfvwrite_r+0x16c>
   26940:	6823      	ldr	r3, [r4, #0]
   26942:	68a1      	ldr	r1, [r4, #8]
   26944:	4657      	mov	r7, sl
   26946:	4618      	mov	r0, r3
   26948:	468b      	mov	fp, r1
   2694a:	2f00      	cmp	r7, #0
   2694c:	d058      	beq.n	26a00 <__sfvwrite_r+0x164>
   2694e:	f41c 7f00 	tst.w	ip, #512	@ 0x200
   26952:	f000 80b5 	beq.w	26ac0 <__sfvwrite_r+0x224>
   26956:	42b9      	cmp	r1, r7
   26958:	460a      	mov	r2, r1
   2695a:	f200 80e1 	bhi.w	26b20 <__sfvwrite_r+0x284>
   2695e:	f41c 6f90 	tst.w	ip, #1152	@ 0x480
   26962:	d02f      	beq.n	269c4 <__sfvwrite_r+0x128>
   26964:	6921      	ldr	r1, [r4, #16]
   26966:	6962      	ldr	r2, [r4, #20]
   26968:	1a5d      	subs	r5, r3, r1
   2696a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   2696e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   26972:	1c6b      	adds	r3, r5, #1
   26974:	1052      	asrs	r2, r2, #1
   26976:	443b      	add	r3, r7
   26978:	4293      	cmp	r3, r2
   2697a:	bf92      	itee	ls
   2697c:	4693      	movls	fp, r2
   2697e:	469b      	movhi	fp, r3
   26980:	461a      	movhi	r2, r3
   26982:	f41c 6f80 	tst.w	ip, #1024	@ 0x400
   26986:	f000 80ea 	beq.w	26b5e <__sfvwrite_r+0x2c2>
   2698a:	4611      	mov	r1, r2
   2698c:	4648      	mov	r0, r9
   2698e:	f000 fe09 	bl	275a4 <_malloc_r>
   26992:	2800      	cmp	r0, #0
   26994:	f000 80f9 	beq.w	26b8a <__sfvwrite_r+0x2ee>
   26998:	462a      	mov	r2, r5
   2699a:	6921      	ldr	r1, [r4, #16]
   2699c:	9000      	str	r0, [sp, #0]
   2699e:	f7f1 fdef 	bl	18580 <memcpy>
   269a2:	89a2      	ldrh	r2, [r4, #12]
   269a4:	9b00      	ldr	r3, [sp, #0]
   269a6:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
   269aa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
   269ae:	81a2      	strh	r2, [r4, #12]
   269b0:	1958      	adds	r0, r3, r5
   269b2:	ebab 0505 	sub.w	r5, fp, r5
   269b6:	f8c4 b014 	str.w	fp, [r4, #20]
   269ba:	6123      	str	r3, [r4, #16]
   269bc:	60a5      	str	r5, [r4, #8]
   269be:	6020      	str	r0, [r4, #0]
   269c0:	46bb      	mov	fp, r7
   269c2:	463a      	mov	r2, r7
   269c4:	4651      	mov	r1, sl
   269c6:	9200      	str	r2, [sp, #0]
   269c8:	f000 fa08 	bl	26ddc <memmove>
   269cc:	68a1      	ldr	r1, [r4, #8]
   269ce:	6823      	ldr	r3, [r4, #0]
   269d0:	9a00      	ldr	r2, [sp, #0]
   269d2:	eba1 010b 	sub.w	r1, r1, fp
   269d6:	441a      	add	r2, r3
   269d8:	463d      	mov	r5, r7
   269da:	60a1      	str	r1, [r4, #8]
   269dc:	6022      	str	r2, [r4, #0]
   269de:	2700      	movs	r7, #0
   269e0:	f8d8 3008 	ldr.w	r3, [r8, #8]
   269e4:	1b5b      	subs	r3, r3, r5
   269e6:	44aa      	add	sl, r5
   269e8:	f8c8 3008 	str.w	r3, [r8, #8]
   269ec:	2b00      	cmp	r3, #0
   269ee:	d03d      	beq.n	26a6c <__sfvwrite_r+0x1d0>
   269f0:	6823      	ldr	r3, [r4, #0]
   269f2:	68a1      	ldr	r1, [r4, #8]
   269f4:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
   269f8:	4618      	mov	r0, r3
   269fa:	468b      	mov	fp, r1
   269fc:	2f00      	cmp	r7, #0
   269fe:	d1a6      	bne.n	2694e <__sfvwrite_r+0xb2>
   26a00:	e9d6 a700 	ldrd	sl, r7, [r6]
   26a04:	3608      	adds	r6, #8
   26a06:	e79e      	b.n	26946 <__sfvwrite_r+0xaa>
   26a08:	4638      	mov	r0, r7
   26a0a:	46bb      	mov	fp, r7
   26a0c:	463d      	mov	r5, r7
   26a0e:	9700      	str	r7, [sp, #0]
   26a10:	2d00      	cmp	r5, #0
   26a12:	d041      	beq.n	26a98 <__sfvwrite_r+0x1fc>
   26a14:	2800      	cmp	r0, #0
   26a16:	d046      	beq.n	26aa6 <__sfvwrite_r+0x20a>
   26a18:	9a00      	ldr	r2, [sp, #0]
   26a1a:	6820      	ldr	r0, [r4, #0]
   26a1c:	68a1      	ldr	r1, [r4, #8]
   26a1e:	e9d4 7304 	ldrd	r7, r3, [r4, #16]
   26a22:	42aa      	cmp	r2, r5
   26a24:	bf28      	it	cs
   26a26:	462a      	movcs	r2, r5
   26a28:	42b8      	cmp	r0, r7
   26a2a:	d904      	bls.n	26a36 <__sfvwrite_r+0x19a>
   26a2c:	eb01 0a03 	add.w	sl, r1, r3
   26a30:	4552      	cmp	r2, sl
   26a32:	f300 8085 	bgt.w	26b40 <__sfvwrite_r+0x2a4>
   26a36:	4293      	cmp	r3, r2
   26a38:	dc75      	bgt.n	26b26 <__sfvwrite_r+0x28a>
   26a3a:	69e1      	ldr	r1, [r4, #28]
   26a3c:	6a67      	ldr	r7, [r4, #36]	@ 0x24
   26a3e:	465a      	mov	r2, fp
   26a40:	4648      	mov	r0, r9
   26a42:	47b8      	blx	r7
   26a44:	f1b0 0a00 	subs.w	sl, r0, #0
   26a48:	dd1a      	ble.n	26a80 <__sfvwrite_r+0x1e4>
   26a4a:	9b00      	ldr	r3, [sp, #0]
   26a4c:	ebb3 030a 	subs.w	r3, r3, sl
   26a50:	9300      	str	r3, [sp, #0]
   26a52:	d00f      	beq.n	26a74 <__sfvwrite_r+0x1d8>
   26a54:	2001      	movs	r0, #1
   26a56:	f8d8 3008 	ldr.w	r3, [r8, #8]
   26a5a:	eba3 030a 	sub.w	r3, r3, sl
   26a5e:	44d3      	add	fp, sl
   26a60:	eba5 050a 	sub.w	r5, r5, sl
   26a64:	f8c8 3008 	str.w	r3, [r8, #8]
   26a68:	2b00      	cmp	r3, #0
   26a6a:	d1d1      	bne.n	26a10 <__sfvwrite_r+0x174>
   26a6c:	2000      	movs	r0, #0
   26a6e:	b003      	add	sp, #12
   26a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26a74:	4621      	mov	r1, r4
   26a76:	4648      	mov	r0, r9
   26a78:	f7ff fde0 	bl	2663c <_fflush_r>
   26a7c:	2800      	cmp	r0, #0
   26a7e:	d0ea      	beq.n	26a56 <__sfvwrite_r+0x1ba>
   26a80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   26a84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   26a88:	81a3      	strh	r3, [r4, #12]
   26a8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   26a8e:	b003      	add	sp, #12
   26a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26a94:	2000      	movs	r0, #0
   26a96:	4770      	bx	lr
   26a98:	6875      	ldr	r5, [r6, #4]
   26a9a:	4633      	mov	r3, r6
   26a9c:	3608      	adds	r6, #8
   26a9e:	2d00      	cmp	r5, #0
   26aa0:	d0fa      	beq.n	26a98 <__sfvwrite_r+0x1fc>
   26aa2:	f8d3 b000 	ldr.w	fp, [r3]
   26aa6:	462a      	mov	r2, r5
   26aa8:	210a      	movs	r1, #10
   26aaa:	4658      	mov	r0, fp
   26aac:	f7f1 fd18 	bl	184e0 <memchr>
   26ab0:	2800      	cmp	r0, #0
   26ab2:	d067      	beq.n	26b84 <__sfvwrite_r+0x2e8>
   26ab4:	3001      	adds	r0, #1
   26ab6:	eba0 030b 	sub.w	r3, r0, fp
   26aba:	9300      	str	r3, [sp, #0]
   26abc:	461a      	mov	r2, r3
   26abe:	e7ac      	b.n	26a1a <__sfvwrite_r+0x17e>
   26ac0:	6922      	ldr	r2, [r4, #16]
   26ac2:	429a      	cmp	r2, r3
   26ac4:	d314      	bcc.n	26af0 <__sfvwrite_r+0x254>
   26ac6:	6962      	ldr	r2, [r4, #20]
   26ac8:	42ba      	cmp	r2, r7
   26aca:	d811      	bhi.n	26af0 <__sfvwrite_r+0x254>
   26acc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
   26ad0:	42bb      	cmp	r3, r7
   26ad2:	bf28      	it	cs
   26ad4:	463b      	movcs	r3, r7
   26ad6:	6a65      	ldr	r5, [r4, #36]	@ 0x24
   26ad8:	fb93 f3f2 	sdiv	r3, r3, r2
   26adc:	69e1      	ldr	r1, [r4, #28]
   26ade:	fb02 f303 	mul.w	r3, r2, r3
   26ae2:	4648      	mov	r0, r9
   26ae4:	4652      	mov	r2, sl
   26ae6:	47a8      	blx	r5
   26ae8:	1e05      	subs	r5, r0, #0
   26aea:	ddc9      	ble.n	26a80 <__sfvwrite_r+0x1e4>
   26aec:	1b7f      	subs	r7, r7, r5
   26aee:	e777      	b.n	269e0 <__sfvwrite_r+0x144>
   26af0:	42b9      	cmp	r1, r7
   26af2:	bf28      	it	cs
   26af4:	4639      	movcs	r1, r7
   26af6:	460d      	mov	r5, r1
   26af8:	4618      	mov	r0, r3
   26afa:	460a      	mov	r2, r1
   26afc:	4651      	mov	r1, sl
   26afe:	f000 f96d 	bl	26ddc <memmove>
   26b02:	68a1      	ldr	r1, [r4, #8]
   26b04:	6823      	ldr	r3, [r4, #0]
   26b06:	1b49      	subs	r1, r1, r5
   26b08:	442b      	add	r3, r5
   26b0a:	60a1      	str	r1, [r4, #8]
   26b0c:	6023      	str	r3, [r4, #0]
   26b0e:	2900      	cmp	r1, #0
   26b10:	d1ec      	bne.n	26aec <__sfvwrite_r+0x250>
   26b12:	4621      	mov	r1, r4
   26b14:	4648      	mov	r0, r9
   26b16:	f7ff fd91 	bl	2663c <_fflush_r>
   26b1a:	2800      	cmp	r0, #0
   26b1c:	d0e6      	beq.n	26aec <__sfvwrite_r+0x250>
   26b1e:	e7af      	b.n	26a80 <__sfvwrite_r+0x1e4>
   26b20:	46bb      	mov	fp, r7
   26b22:	463a      	mov	r2, r7
   26b24:	e74e      	b.n	269c4 <__sfvwrite_r+0x128>
   26b26:	4659      	mov	r1, fp
   26b28:	9201      	str	r2, [sp, #4]
   26b2a:	f000 f957 	bl	26ddc <memmove>
   26b2e:	9a01      	ldr	r2, [sp, #4]
   26b30:	68a3      	ldr	r3, [r4, #8]
   26b32:	1a9b      	subs	r3, r3, r2
   26b34:	60a3      	str	r3, [r4, #8]
   26b36:	6823      	ldr	r3, [r4, #0]
   26b38:	4413      	add	r3, r2
   26b3a:	6023      	str	r3, [r4, #0]
   26b3c:	4692      	mov	sl, r2
   26b3e:	e784      	b.n	26a4a <__sfvwrite_r+0x1ae>
   26b40:	4659      	mov	r1, fp
   26b42:	4652      	mov	r2, sl
   26b44:	f000 f94a 	bl	26ddc <memmove>
   26b48:	6823      	ldr	r3, [r4, #0]
   26b4a:	4453      	add	r3, sl
   26b4c:	6023      	str	r3, [r4, #0]
   26b4e:	4621      	mov	r1, r4
   26b50:	4648      	mov	r0, r9
   26b52:	f7ff fd73 	bl	2663c <_fflush_r>
   26b56:	2800      	cmp	r0, #0
   26b58:	f43f af77 	beq.w	26a4a <__sfvwrite_r+0x1ae>
   26b5c:	e790      	b.n	26a80 <__sfvwrite_r+0x1e4>
   26b5e:	4648      	mov	r0, r9
   26b60:	f002 fe62 	bl	29828 <_realloc_r>
   26b64:	4603      	mov	r3, r0
   26b66:	2800      	cmp	r0, #0
   26b68:	f47f af22 	bne.w	269b0 <__sfvwrite_r+0x114>
   26b6c:	6921      	ldr	r1, [r4, #16]
   26b6e:	4648      	mov	r0, r9
   26b70:	f000 fbdc 	bl	2732c <_free_r>
   26b74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   26b78:	220c      	movs	r2, #12
   26b7a:	f8c9 2000 	str.w	r2, [r9]
   26b7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   26b82:	e77f      	b.n	26a84 <__sfvwrite_r+0x1e8>
   26b84:	1c6a      	adds	r2, r5, #1
   26b86:	9200      	str	r2, [sp, #0]
   26b88:	e747      	b.n	26a1a <__sfvwrite_r+0x17e>
   26b8a:	220c      	movs	r2, #12
   26b8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   26b90:	f8c9 2000 	str.w	r2, [r9]
   26b94:	e776      	b.n	26a84 <__sfvwrite_r+0x1e8>
   26b96:	bf00      	nop
   26b98:	7ffffc00 	.word	0x7ffffc00

00026b9c <_fwalk_sglue>:
   26b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26ba0:	4607      	mov	r7, r0
   26ba2:	4688      	mov	r8, r1
   26ba4:	4616      	mov	r6, r2
   26ba6:	f04f 0900 	mov.w	r9, #0
   26baa:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   26bae:	3d01      	subs	r5, #1
   26bb0:	d410      	bmi.n	26bd4 <_fwalk_sglue+0x38>
   26bb2:	89a3      	ldrh	r3, [r4, #12]
   26bb4:	2b01      	cmp	r3, #1
   26bb6:	d908      	bls.n	26bca <_fwalk_sglue+0x2e>
   26bb8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   26bbc:	3301      	adds	r3, #1
   26bbe:	4621      	mov	r1, r4
   26bc0:	4638      	mov	r0, r7
   26bc2:	d002      	beq.n	26bca <_fwalk_sglue+0x2e>
   26bc4:	47c0      	blx	r8
   26bc6:	ea49 0900 	orr.w	r9, r9, r0
   26bca:	3d01      	subs	r5, #1
   26bcc:	1c6b      	adds	r3, r5, #1
   26bce:	f104 0468 	add.w	r4, r4, #104	@ 0x68
   26bd2:	d1ee      	bne.n	26bb2 <_fwalk_sglue+0x16>
   26bd4:	6836      	ldr	r6, [r6, #0]
   26bd6:	2e00      	cmp	r6, #0
   26bd8:	d1e7      	bne.n	26baa <_fwalk_sglue+0xe>
   26bda:	4648      	mov	r0, r9
   26bdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00026be0 <__swsetup_r>:
   26be0:	b538      	push	{r3, r4, r5, lr}
   26be2:	4b2f      	ldr	r3, [pc, #188]	@ (26ca0 <__swsetup_r+0xc0>)
   26be4:	681b      	ldr	r3, [r3, #0]
   26be6:	4605      	mov	r5, r0
   26be8:	460c      	mov	r4, r1
   26bea:	b113      	cbz	r3, 26bf2 <__swsetup_r+0x12>
   26bec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
   26bee:	2a00      	cmp	r2, #0
   26bf0:	d04b      	beq.n	26c8a <__swsetup_r+0xaa>
   26bf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   26bf6:	0718      	lsls	r0, r3, #28
   26bf8:	d51c      	bpl.n	26c34 <__swsetup_r+0x54>
   26bfa:	6922      	ldr	r2, [r4, #16]
   26bfc:	b322      	cbz	r2, 26c48 <__swsetup_r+0x68>
   26bfe:	f013 0101 	ands.w	r1, r3, #1
   26c02:	d007      	beq.n	26c14 <__swsetup_r+0x34>
   26c04:	6961      	ldr	r1, [r4, #20]
   26c06:	2000      	movs	r0, #0
   26c08:	4249      	negs	r1, r1
   26c0a:	60a0      	str	r0, [r4, #8]
   26c0c:	61a1      	str	r1, [r4, #24]
   26c0e:	b13a      	cbz	r2, 26c20 <__swsetup_r+0x40>
   26c10:	2000      	movs	r0, #0
   26c12:	bd38      	pop	{r3, r4, r5, pc}
   26c14:	0798      	lsls	r0, r3, #30
   26c16:	bf58      	it	pl
   26c18:	6961      	ldrpl	r1, [r4, #20]
   26c1a:	60a1      	str	r1, [r4, #8]
   26c1c:	2a00      	cmp	r2, #0
   26c1e:	d1f7      	bne.n	26c10 <__swsetup_r+0x30>
   26c20:	0619      	lsls	r1, r3, #24
   26c22:	bf58      	it	pl
   26c24:	4610      	movpl	r0, r2
   26c26:	d5f4      	bpl.n	26c12 <__swsetup_r+0x32>
   26c28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   26c2c:	81a3      	strh	r3, [r4, #12]
   26c2e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   26c32:	bd38      	pop	{r3, r4, r5, pc}
   26c34:	06d9      	lsls	r1, r3, #27
   26c36:	d52c      	bpl.n	26c92 <__swsetup_r+0xb2>
   26c38:	075a      	lsls	r2, r3, #29
   26c3a:	d412      	bmi.n	26c62 <__swsetup_r+0x82>
   26c3c:	6922      	ldr	r2, [r4, #16]
   26c3e:	f043 0308 	orr.w	r3, r3, #8
   26c42:	81a3      	strh	r3, [r4, #12]
   26c44:	2a00      	cmp	r2, #0
   26c46:	d1da      	bne.n	26bfe <__swsetup_r+0x1e>
   26c48:	f403 7120 	and.w	r1, r3, #640	@ 0x280
   26c4c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
   26c50:	d0d5      	beq.n	26bfe <__swsetup_r+0x1e>
   26c52:	4621      	mov	r1, r4
   26c54:	4628      	mov	r0, r5
   26c56:	f002 fd0d 	bl	29674 <__smakebuf_r>
   26c5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   26c5e:	6922      	ldr	r2, [r4, #16]
   26c60:	e7cd      	b.n	26bfe <__swsetup_r+0x1e>
   26c62:	6b21      	ldr	r1, [r4, #48]	@ 0x30
   26c64:	b151      	cbz	r1, 26c7c <__swsetup_r+0x9c>
   26c66:	f104 0240 	add.w	r2, r4, #64	@ 0x40
   26c6a:	4291      	cmp	r1, r2
   26c6c:	d004      	beq.n	26c78 <__swsetup_r+0x98>
   26c6e:	4628      	mov	r0, r5
   26c70:	f000 fb5c 	bl	2732c <_free_r>
   26c74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   26c78:	2200      	movs	r2, #0
   26c7a:	6322      	str	r2, [r4, #48]	@ 0x30
   26c7c:	6922      	ldr	r2, [r4, #16]
   26c7e:	2100      	movs	r1, #0
   26c80:	e9c4 2100 	strd	r2, r1, [r4]
   26c84:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
   26c88:	e7d9      	b.n	26c3e <__swsetup_r+0x5e>
   26c8a:	4618      	mov	r0, r3
   26c8c:	f7ff fda4 	bl	267d8 <__sinit>
   26c90:	e7af      	b.n	26bf2 <__swsetup_r+0x12>
   26c92:	2209      	movs	r2, #9
   26c94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   26c98:	602a      	str	r2, [r5, #0]
   26c9a:	81a3      	strh	r3, [r4, #12]
   26c9c:	e7c7      	b.n	26c2e <__swsetup_r+0x4e>
   26c9e:	bf00      	nop
   26ca0:	1000d540 	.word	0x1000d540

00026ca4 <memcmp>:
   26ca4:	2a03      	cmp	r2, #3
   26ca6:	b430      	push	{r4, r5}
   26ca8:	d915      	bls.n	26cd6 <memcmp+0x32>
   26caa:	ea41 0400 	orr.w	r4, r1, r0
   26cae:	07a4      	lsls	r4, r4, #30
   26cb0:	4684      	mov	ip, r0
   26cb2:	460b      	mov	r3, r1
   26cb4:	d004      	beq.n	26cc0 <memcmp+0x1c>
   26cb6:	1e54      	subs	r4, r2, #1
   26cb8:	e00f      	b.n	26cda <memcmp+0x36>
   26cba:	3a04      	subs	r2, #4
   26cbc:	2a03      	cmp	r2, #3
   26cbe:	d908      	bls.n	26cd2 <memcmp+0x2e>
   26cc0:	4619      	mov	r1, r3
   26cc2:	4660      	mov	r0, ip
   26cc4:	f853 4b04 	ldr.w	r4, [r3], #4
   26cc8:	f85c 5b04 	ldr.w	r5, [ip], #4
   26ccc:	42a5      	cmp	r5, r4
   26cce:	d0f4      	beq.n	26cba <memcmp+0x16>
   26cd0:	e7f1      	b.n	26cb6 <memcmp+0x12>
   26cd2:	4660      	mov	r0, ip
   26cd4:	4619      	mov	r1, r3
   26cd6:	1e54      	subs	r4, r2, #1
   26cd8:	b17a      	cbz	r2, 26cfa <memcmp+0x56>
   26cda:	1e43      	subs	r3, r0, #1
   26cdc:	3901      	subs	r1, #1
   26cde:	1902      	adds	r2, r0, r4
   26ce0:	e001      	b.n	26ce6 <memcmp+0x42>
   26ce2:	429a      	cmp	r2, r3
   26ce4:	d009      	beq.n	26cfa <memcmp+0x56>
   26ce6:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   26cea:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   26cee:	4560      	cmp	r0, ip
   26cf0:	d0f7      	beq.n	26ce2 <memcmp+0x3e>
   26cf2:	eba0 000c 	sub.w	r0, r0, ip
   26cf6:	bc30      	pop	{r4, r5}
   26cf8:	4770      	bx	lr
   26cfa:	2000      	movs	r0, #0
   26cfc:	bc30      	pop	{r4, r5}
   26cfe:	4770      	bx	lr

00026d00 <__fputwc>:
   26d00:	b570      	push	{r4, r5, r6, lr}
   26d02:	b082      	sub	sp, #8
   26d04:	4606      	mov	r6, r0
   26d06:	460d      	mov	r5, r1
   26d08:	4614      	mov	r4, r2
   26d0a:	f000 f9df 	bl	270cc <__locale_mb_cur_max>
   26d0e:	2801      	cmp	r0, #1
   26d10:	d102      	bne.n	26d18 <__fputwc+0x18>
   26d12:	1e6b      	subs	r3, r5, #1
   26d14:	2bfe      	cmp	r3, #254	@ 0xfe
   26d16:	d926      	bls.n	26d66 <__fputwc+0x66>
   26d18:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
   26d1c:	462a      	mov	r2, r5
   26d1e:	a901      	add	r1, sp, #4
   26d20:	4630      	mov	r0, r6
   26d22:	f000 fa2b 	bl	2717c <_wcrtomb_r>
   26d26:	1c43      	adds	r3, r0, #1
   26d28:	d020      	beq.n	26d6c <__fputwc+0x6c>
   26d2a:	b178      	cbz	r0, 26d4c <__fputwc+0x4c>
   26d2c:	68a3      	ldr	r3, [r4, #8]
   26d2e:	f89d 1004 	ldrb.w	r1, [sp, #4]
   26d32:	3b01      	subs	r3, #1
   26d34:	2b00      	cmp	r3, #0
   26d36:	60a3      	str	r3, [r4, #8]
   26d38:	da04      	bge.n	26d44 <__fputwc+0x44>
   26d3a:	69a2      	ldr	r2, [r4, #24]
   26d3c:	4293      	cmp	r3, r2
   26d3e:	db08      	blt.n	26d52 <__fputwc+0x52>
   26d40:	290a      	cmp	r1, #10
   26d42:	d006      	beq.n	26d52 <__fputwc+0x52>
   26d44:	6823      	ldr	r3, [r4, #0]
   26d46:	1c5a      	adds	r2, r3, #1
   26d48:	6022      	str	r2, [r4, #0]
   26d4a:	7019      	strb	r1, [r3, #0]
   26d4c:	4628      	mov	r0, r5
   26d4e:	b002      	add	sp, #8
   26d50:	bd70      	pop	{r4, r5, r6, pc}
   26d52:	4622      	mov	r2, r4
   26d54:	4630      	mov	r0, r6
   26d56:	f002 ff5f 	bl	29c18 <__swbuf_r>
   26d5a:	3001      	adds	r0, #1
   26d5c:	d1f6      	bne.n	26d4c <__fputwc+0x4c>
   26d5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   26d62:	b002      	add	sp, #8
   26d64:	bd70      	pop	{r4, r5, r6, pc}
   26d66:	f88d 5004 	strb.w	r5, [sp, #4]
   26d6a:	e7df      	b.n	26d2c <__fputwc+0x2c>
   26d6c:	89a3      	ldrh	r3, [r4, #12]
   26d6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   26d72:	81a3      	strh	r3, [r4, #12]
   26d74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   26d78:	e7f3      	b.n	26d62 <__fputwc+0x62>
   26d7a:	bf00      	nop

00026d7c <_fputwc_r>:
   26d7c:	b530      	push	{r4, r5, lr}
   26d7e:	4614      	mov	r4, r2
   26d80:	6e52      	ldr	r2, [r2, #100]	@ 0x64
   26d82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   26d86:	4605      	mov	r5, r0
   26d88:	07d0      	lsls	r0, r2, #31
   26d8a:	b083      	sub	sp, #12
   26d8c:	d401      	bmi.n	26d92 <_fputwc_r+0x16>
   26d8e:	059a      	lsls	r2, r3, #22
   26d90:	d51c      	bpl.n	26dcc <_fputwc_r+0x50>
   26d92:	0498      	lsls	r0, r3, #18
   26d94:	d406      	bmi.n	26da4 <_fputwc_r+0x28>
   26d96:	6e62      	ldr	r2, [r4, #100]	@ 0x64
   26d98:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
   26d9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
   26da0:	81a3      	strh	r3, [r4, #12]
   26da2:	6662      	str	r2, [r4, #100]	@ 0x64
   26da4:	4622      	mov	r2, r4
   26da6:	4628      	mov	r0, r5
   26da8:	f7ff ffaa 	bl	26d00 <__fputwc>
   26dac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
   26dae:	07da      	lsls	r2, r3, #31
   26db0:	4605      	mov	r5, r0
   26db2:	d402      	bmi.n	26dba <_fputwc_r+0x3e>
   26db4:	89a3      	ldrh	r3, [r4, #12]
   26db6:	059b      	lsls	r3, r3, #22
   26db8:	d502      	bpl.n	26dc0 <_fputwc_r+0x44>
   26dba:	4628      	mov	r0, r5
   26dbc:	b003      	add	sp, #12
   26dbe:	bd30      	pop	{r4, r5, pc}
   26dc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
   26dc2:	f000 f9d9 	bl	27178 <__retarget_lock_release_recursive>
   26dc6:	4628      	mov	r0, r5
   26dc8:	b003      	add	sp, #12
   26dca:	bd30      	pop	{r4, r5, pc}
   26dcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
   26dce:	9101      	str	r1, [sp, #4]
   26dd0:	f000 f9d0 	bl	27174 <__retarget_lock_acquire_recursive>
   26dd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   26dd8:	9901      	ldr	r1, [sp, #4]
   26dda:	e7da      	b.n	26d92 <_fputwc_r+0x16>

00026ddc <memmove>:
   26ddc:	4288      	cmp	r0, r1
   26dde:	d90e      	bls.n	26dfe <memmove+0x22>
   26de0:	188b      	adds	r3, r1, r2
   26de2:	4283      	cmp	r3, r0
   26de4:	d90b      	bls.n	26dfe <memmove+0x22>
   26de6:	eb00 0c02 	add.w	ip, r0, r2
   26dea:	2a00      	cmp	r2, #0
   26dec:	d06e      	beq.n	26ecc <memmove+0xf0>
   26dee:	4662      	mov	r2, ip
   26df0:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   26df4:	f802 cd01 	strb.w	ip, [r2, #-1]!
   26df8:	4299      	cmp	r1, r3
   26dfa:	d1f9      	bne.n	26df0 <memmove+0x14>
   26dfc:	4770      	bx	lr
   26dfe:	2a0f      	cmp	r2, #15
   26e00:	d80f      	bhi.n	26e22 <memmove+0x46>
   26e02:	4603      	mov	r3, r0
   26e04:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
   26e08:	2a00      	cmp	r2, #0
   26e0a:	d05f      	beq.n	26ecc <memmove+0xf0>
   26e0c:	f10c 0c01 	add.w	ip, ip, #1
   26e10:	3b01      	subs	r3, #1
   26e12:	448c      	add	ip, r1
   26e14:	f811 2b01 	ldrb.w	r2, [r1], #1
   26e18:	f803 2f01 	strb.w	r2, [r3, #1]!
   26e1c:	4561      	cmp	r1, ip
   26e1e:	d1f9      	bne.n	26e14 <memmove+0x38>
   26e20:	4770      	bx	lr
   26e22:	ea40 0301 	orr.w	r3, r0, r1
   26e26:	079b      	lsls	r3, r3, #30
   26e28:	d151      	bne.n	26ece <memmove+0xf2>
   26e2a:	f1a2 0310 	sub.w	r3, r2, #16
   26e2e:	b570      	push	{r4, r5, r6, lr}
   26e30:	f101 0c20 	add.w	ip, r1, #32
   26e34:	f023 050f 	bic.w	r5, r3, #15
   26e38:	f101 0e10 	add.w	lr, r1, #16
   26e3c:	f100 0410 	add.w	r4, r0, #16
   26e40:	44ac      	add	ip, r5
   26e42:	091b      	lsrs	r3, r3, #4
   26e44:	f85e 5c10 	ldr.w	r5, [lr, #-16]
   26e48:	f844 5c10 	str.w	r5, [r4, #-16]
   26e4c:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   26e50:	f844 5c0c 	str.w	r5, [r4, #-12]
   26e54:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   26e58:	f844 5c08 	str.w	r5, [r4, #-8]
   26e5c:	f85e 5c04 	ldr.w	r5, [lr, #-4]
   26e60:	f844 5c04 	str.w	r5, [r4, #-4]
   26e64:	f10e 0e10 	add.w	lr, lr, #16
   26e68:	45e6      	cmp	lr, ip
   26e6a:	f104 0410 	add.w	r4, r4, #16
   26e6e:	d1e9      	bne.n	26e44 <memmove+0x68>
   26e70:	3301      	adds	r3, #1
   26e72:	f012 0f0c 	tst.w	r2, #12
   26e76:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   26e7a:	f002 040f 	and.w	r4, r2, #15
   26e7e:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   26e82:	d028      	beq.n	26ed6 <memmove+0xfa>
   26e84:	3c04      	subs	r4, #4
   26e86:	f024 0603 	bic.w	r6, r4, #3
   26e8a:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   26e8e:	441e      	add	r6, r3
   26e90:	1f1c      	subs	r4, r3, #4
   26e92:	468e      	mov	lr, r1
   26e94:	f85e 5b04 	ldr.w	r5, [lr], #4
   26e98:	f844 5f04 	str.w	r5, [r4, #4]!
   26e9c:	42b4      	cmp	r4, r6
   26e9e:	d1f9      	bne.n	26e94 <memmove+0xb8>
   26ea0:	f10c 0401 	add.w	r4, ip, #1
   26ea4:	f002 0203 	and.w	r2, r2, #3
   26ea8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   26eac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   26eb0:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
   26eb4:	b14a      	cbz	r2, 26eca <memmove+0xee>
   26eb6:	f10c 0c01 	add.w	ip, ip, #1
   26eba:	3b01      	subs	r3, #1
   26ebc:	448c      	add	ip, r1
   26ebe:	f811 2b01 	ldrb.w	r2, [r1], #1
   26ec2:	f803 2f01 	strb.w	r2, [r3, #1]!
   26ec6:	4561      	cmp	r1, ip
   26ec8:	d1f9      	bne.n	26ebe <memmove+0xe2>
   26eca:	bd70      	pop	{r4, r5, r6, pc}
   26ecc:	4770      	bx	lr
   26ece:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
   26ed2:	4603      	mov	r3, r0
   26ed4:	e79a      	b.n	26e0c <memmove+0x30>
   26ed6:	4622      	mov	r2, r4
   26ed8:	e7ea      	b.n	26eb0 <memmove+0xd4>
   26eda:	bf00      	nop

00026edc <memset>:
   26edc:	0783      	lsls	r3, r0, #30
   26ede:	b530      	push	{r4, r5, lr}
   26ee0:	d047      	beq.n	26f72 <memset+0x96>
   26ee2:	1e54      	subs	r4, r2, #1
   26ee4:	2a00      	cmp	r2, #0
   26ee6:	d03e      	beq.n	26f66 <memset+0x8a>
   26ee8:	b2ca      	uxtb	r2, r1
   26eea:	4603      	mov	r3, r0
   26eec:	e001      	b.n	26ef2 <memset+0x16>
   26eee:	3c01      	subs	r4, #1
   26ef0:	d339      	bcc.n	26f66 <memset+0x8a>
   26ef2:	f803 2b01 	strb.w	r2, [r3], #1
   26ef6:	079d      	lsls	r5, r3, #30
   26ef8:	d1f9      	bne.n	26eee <memset+0x12>
   26efa:	2c03      	cmp	r4, #3
   26efc:	d92c      	bls.n	26f58 <memset+0x7c>
   26efe:	b2cd      	uxtb	r5, r1
   26f00:	eb05 2505 	add.w	r5, r5, r5, lsl #8
   26f04:	2c0f      	cmp	r4, #15
   26f06:	eb05 4505 	add.w	r5, r5, r5, lsl #16
   26f0a:	d935      	bls.n	26f78 <memset+0x9c>
   26f0c:	f1a4 0210 	sub.w	r2, r4, #16
   26f10:	f022 0c0f 	bic.w	ip, r2, #15
   26f14:	f103 0e10 	add.w	lr, r3, #16
   26f18:	44e6      	add	lr, ip
   26f1a:	ea4f 1c12 	mov.w	ip, r2, lsr #4
   26f1e:	461a      	mov	r2, r3
   26f20:	e9c2 5500 	strd	r5, r5, [r2]
   26f24:	e9c2 5502 	strd	r5, r5, [r2, #8]
   26f28:	3210      	adds	r2, #16
   26f2a:	4572      	cmp	r2, lr
   26f2c:	d1f8      	bne.n	26f20 <memset+0x44>
   26f2e:	f10c 0201 	add.w	r2, ip, #1
   26f32:	f014 0f0c 	tst.w	r4, #12
   26f36:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   26f3a:	f004 0c0f 	and.w	ip, r4, #15
   26f3e:	d013      	beq.n	26f68 <memset+0x8c>
   26f40:	f1ac 0304 	sub.w	r3, ip, #4
   26f44:	f023 0303 	bic.w	r3, r3, #3
   26f48:	3304      	adds	r3, #4
   26f4a:	4413      	add	r3, r2
   26f4c:	f842 5b04 	str.w	r5, [r2], #4
   26f50:	4293      	cmp	r3, r2
   26f52:	d1fb      	bne.n	26f4c <memset+0x70>
   26f54:	f00c 0403 	and.w	r4, ip, #3
   26f58:	b12c      	cbz	r4, 26f66 <memset+0x8a>
   26f5a:	b2c9      	uxtb	r1, r1
   26f5c:	441c      	add	r4, r3
   26f5e:	f803 1b01 	strb.w	r1, [r3], #1
   26f62:	42a3      	cmp	r3, r4
   26f64:	d1fb      	bne.n	26f5e <memset+0x82>
   26f66:	bd30      	pop	{r4, r5, pc}
   26f68:	4664      	mov	r4, ip
   26f6a:	4613      	mov	r3, r2
   26f6c:	2c00      	cmp	r4, #0
   26f6e:	d1f4      	bne.n	26f5a <memset+0x7e>
   26f70:	e7f9      	b.n	26f66 <memset+0x8a>
   26f72:	4603      	mov	r3, r0
   26f74:	4614      	mov	r4, r2
   26f76:	e7c0      	b.n	26efa <memset+0x1e>
   26f78:	461a      	mov	r2, r3
   26f7a:	46a4      	mov	ip, r4
   26f7c:	e7e0      	b.n	26f40 <memset+0x64>
   26f7e:	bf00      	nop

00026f80 <strncmp>:
   26f80:	2a00      	cmp	r2, #0
   26f82:	d03e      	beq.n	27002 <strncmp+0x82>
   26f84:	b530      	push	{r4, r5, lr}
   26f86:	4684      	mov	ip, r0
   26f88:	4604      	mov	r4, r0
   26f8a:	4308      	orrs	r0, r1
   26f8c:	0780      	lsls	r0, r0, #30
   26f8e:	460b      	mov	r3, r1
   26f90:	d12e      	bne.n	26ff0 <strncmp+0x70>
   26f92:	2a03      	cmp	r2, #3
   26f94:	d807      	bhi.n	26fa6 <strncmp+0x26>
   26f96:	e02b      	b.n	26ff0 <strncmp+0x70>
   26f98:	3a04      	subs	r2, #4
   26f9a:	d025      	beq.n	26fe8 <strncmp+0x68>
   26f9c:	f01e 3f80 	tst.w	lr, #2155905152	@ 0x80808080
   26fa0:	d122      	bne.n	26fe8 <strncmp+0x68>
   26fa2:	2a03      	cmp	r2, #3
   26fa4:	d922      	bls.n	26fec <strncmp+0x6c>
   26fa6:	6820      	ldr	r0, [r4, #0]
   26fa8:	4619      	mov	r1, r3
   26faa:	f853 5b04 	ldr.w	r5, [r3], #4
   26fae:	f1a0 3e01 	sub.w	lr, r0, #16843009	@ 0x1010101
   26fb2:	42a8      	cmp	r0, r5
   26fb4:	46a4      	mov	ip, r4
   26fb6:	ea2e 0e00 	bic.w	lr, lr, r0
   26fba:	f104 0404 	add.w	r4, r4, #4
   26fbe:	d0eb      	beq.n	26f98 <strncmp+0x18>
   26fc0:	f89c 0000 	ldrb.w	r0, [ip]
   26fc4:	780c      	ldrb	r4, [r1, #0]
   26fc6:	4284      	cmp	r4, r0
   26fc8:	d11d      	bne.n	27006 <strncmp+0x86>
   26fca:	46e6      	mov	lr, ip
   26fcc:	b168      	cbz	r0, 26fea <strncmp+0x6a>
   26fce:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   26fd2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   26fd6:	eba2 030e 	sub.w	r3, r2, lr
   26fda:	42a0      	cmp	r0, r4
   26fdc:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
   26fe0:	d111      	bne.n	27006 <strncmp+0x86>
   26fe2:	eb1c 0303 	adds.w	r3, ip, r3
   26fe6:	d1f1      	bne.n	26fcc <strncmp+0x4c>
   26fe8:	2000      	movs	r0, #0
   26fea:	bd30      	pop	{r4, r5, pc}
   26fec:	46a4      	mov	ip, r4
   26fee:	4619      	mov	r1, r3
   26ff0:	f89c 0000 	ldrb.w	r0, [ip]
   26ff4:	780c      	ldrb	r4, [r1, #0]
   26ff6:	42a0      	cmp	r0, r4
   26ff8:	d105      	bne.n	27006 <strncmp+0x86>
   26ffa:	2a01      	cmp	r2, #1
   26ffc:	d0f4      	beq.n	26fe8 <strncmp+0x68>
   26ffe:	46e6      	mov	lr, ip
   27000:	e7e4      	b.n	26fcc <strncmp+0x4c>
   27002:	4610      	mov	r0, r2
   27004:	4770      	bx	lr
   27006:	1b00      	subs	r0, r0, r4
   27008:	bd30      	pop	{r4, r5, pc}
   2700a:	bf00      	nop

0002700c <strncpy>:
   2700c:	ea40 0301 	orr.w	r3, r0, r1
   27010:	079b      	lsls	r3, r3, #30
   27012:	b510      	push	{r4, lr}
   27014:	d101      	bne.n	2701a <strncpy+0xe>
   27016:	2a03      	cmp	r2, #3
   27018:	d817      	bhi.n	2704a <strncpy+0x3e>
   2701a:	4684      	mov	ip, r0
   2701c:	f101 3eff 	add.w	lr, r1, #4294967295	@ 0xffffffff
   27020:	e007      	b.n	27032 <strncpy+0x26>
   27022:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
   27026:	f803 1b01 	strb.w	r1, [r3], #1
   2702a:	1e54      	subs	r4, r2, #1
   2702c:	b129      	cbz	r1, 2703a <strncpy+0x2e>
   2702e:	469c      	mov	ip, r3
   27030:	4622      	mov	r2, r4
   27032:	4663      	mov	r3, ip
   27034:	2a00      	cmp	r2, #0
   27036:	d1f4      	bne.n	27022 <strncpy+0x16>
   27038:	bd10      	pop	{r4, pc}
   2703a:	4494      	add	ip, r2
   2703c:	2c00      	cmp	r4, #0
   2703e:	d0fb      	beq.n	27038 <strncpy+0x2c>
   27040:	f803 1b01 	strb.w	r1, [r3], #1
   27044:	4563      	cmp	r3, ip
   27046:	d1fb      	bne.n	27040 <strncpy+0x34>
   27048:	bd10      	pop	{r4, pc}
   2704a:	468e      	mov	lr, r1
   2704c:	4684      	mov	ip, r0
   2704e:	f8de 4000 	ldr.w	r4, [lr]
   27052:	f1a4 3301 	sub.w	r3, r4, #16843009	@ 0x1010101
   27056:	ea23 0304 	bic.w	r3, r3, r4
   2705a:	f013 3f80 	tst.w	r3, #2155905152	@ 0x80808080
   2705e:	4671      	mov	r1, lr
   27060:	f10e 0e04 	add.w	lr, lr, #4
   27064:	d1da      	bne.n	2701c <strncpy+0x10>
   27066:	3a04      	subs	r2, #4
   27068:	2a03      	cmp	r2, #3
   2706a:	f84c 4b04 	str.w	r4, [ip], #4
   2706e:	d8ee      	bhi.n	2704e <strncpy+0x42>
   27070:	4671      	mov	r1, lr
   27072:	e7d3      	b.n	2701c <strncpy+0x10>

00027074 <raise>:
   27074:	b538      	push	{r3, r4, r5, lr}
   27076:	4b14      	ldr	r3, [pc, #80]	@ (270c8 <raise+0x54>)
   27078:	281f      	cmp	r0, #31
   2707a:	681d      	ldr	r5, [r3, #0]
   2707c:	d81e      	bhi.n	270bc <raise+0x48>
   2707e:	f8d5 2118 	ldr.w	r2, [r5, #280]	@ 0x118
   27082:	4604      	mov	r4, r0
   27084:	b162      	cbz	r2, 270a0 <raise+0x2c>
   27086:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
   2708a:	b14b      	cbz	r3, 270a0 <raise+0x2c>
   2708c:	2b01      	cmp	r3, #1
   2708e:	d005      	beq.n	2709c <raise+0x28>
   27090:	1c59      	adds	r1, r3, #1
   27092:	d00f      	beq.n	270b4 <raise+0x40>
   27094:	2100      	movs	r1, #0
   27096:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
   2709a:	4798      	blx	r3
   2709c:	2000      	movs	r0, #0
   2709e:	bd38      	pop	{r3, r4, r5, pc}
   270a0:	4628      	mov	r0, r5
   270a2:	f000 f833 	bl	2710c <_getpid_r>
   270a6:	4622      	mov	r2, r4
   270a8:	4601      	mov	r1, r0
   270aa:	4628      	mov	r0, r5
   270ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   270b0:	f000 b816 	b.w	270e0 <_kill_r>
   270b4:	2316      	movs	r3, #22
   270b6:	602b      	str	r3, [r5, #0]
   270b8:	2001      	movs	r0, #1
   270ba:	bd38      	pop	{r3, r4, r5, pc}
   270bc:	2316      	movs	r3, #22
   270be:	602b      	str	r3, [r5, #0]
   270c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   270c4:	bd38      	pop	{r3, r4, r5, pc}
   270c6:	bf00      	nop
   270c8:	1000d540 	.word	0x1000d540

000270cc <__locale_mb_cur_max>:
   270cc:	4b01      	ldr	r3, [pc, #4]	@ (270d4 <__locale_mb_cur_max+0x8>)
   270ce:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
   270d2:	4770      	bx	lr
   270d4:	1000d3d4 	.word	0x1000d3d4

000270d8 <_localeconv_r>:
   270d8:	4800      	ldr	r0, [pc, #0]	@ (270dc <_localeconv_r+0x4>)
   270da:	4770      	bx	lr
   270dc:	1000d4c4 	.word	0x1000d4c4

000270e0 <_kill_r>:
   270e0:	b570      	push	{r4, r5, r6, lr}
   270e2:	460c      	mov	r4, r1
   270e4:	4d08      	ldr	r5, [pc, #32]	@ (27108 <_kill_r+0x28>)
   270e6:	4603      	mov	r3, r0
   270e8:	2600      	movs	r6, #0
   270ea:	4620      	mov	r0, r4
   270ec:	4611      	mov	r1, r2
   270ee:	461c      	mov	r4, r3
   270f0:	602e      	str	r6, [r5, #0]
   270f2:	f004 fda5 	bl	2bc40 <_kill>
   270f6:	1c43      	adds	r3, r0, #1
   270f8:	d000      	beq.n	270fc <_kill_r+0x1c>
   270fa:	bd70      	pop	{r4, r5, r6, pc}
   270fc:	682b      	ldr	r3, [r5, #0]
   270fe:	2b00      	cmp	r3, #0
   27100:	d0fb      	beq.n	270fa <_kill_r+0x1a>
   27102:	6023      	str	r3, [r4, #0]
   27104:	bd70      	pop	{r4, r5, r6, pc}
   27106:	bf00      	nop
   27108:	10050264 	.word	0x10050264

0002710c <_getpid_r>:
   2710c:	f004 bd88 	b.w	2bc20 <_getpid>

00027110 <__errno>:
   27110:	4b01      	ldr	r3, [pc, #4]	@ (27118 <__errno+0x8>)
   27112:	6818      	ldr	r0, [r3, #0]
   27114:	4770      	bx	lr
   27116:	bf00      	nop
   27118:	1000d540 	.word	0x1000d540

0002711c <__libc_init_array>:
   2711c:	b570      	push	{r4, r5, r6, lr}
   2711e:	4b0f      	ldr	r3, [pc, #60]	@ (2715c <__libc_init_array+0x40>)
   27120:	4d0f      	ldr	r5, [pc, #60]	@ (27160 <__libc_init_array+0x44>)
   27122:	42ab      	cmp	r3, r5
   27124:	eba3 0605 	sub.w	r6, r3, r5
   27128:	d007      	beq.n	2713a <__libc_init_array+0x1e>
   2712a:	10b6      	asrs	r6, r6, #2
   2712c:	2400      	movs	r4, #0
   2712e:	f855 3b04 	ldr.w	r3, [r5], #4
   27132:	3401      	adds	r4, #1
   27134:	4798      	blx	r3
   27136:	42a6      	cmp	r6, r4
   27138:	d8f9      	bhi.n	2712e <__libc_init_array+0x12>
   2713a:	f7f2 fb0b 	bl	19754 <_init>
   2713e:	4d09      	ldr	r5, [pc, #36]	@ (27164 <__libc_init_array+0x48>)
   27140:	4b09      	ldr	r3, [pc, #36]	@ (27168 <__libc_init_array+0x4c>)
   27142:	1b5e      	subs	r6, r3, r5
   27144:	42ab      	cmp	r3, r5
   27146:	ea4f 06a6 	mov.w	r6, r6, asr #2
   2714a:	d006      	beq.n	2715a <__libc_init_array+0x3e>
   2714c:	2400      	movs	r4, #0
   2714e:	f855 3b04 	ldr.w	r3, [r5], #4
   27152:	3401      	adds	r4, #1
   27154:	4798      	blx	r3
   27156:	42a6      	cmp	r6, r4
   27158:	d8f9      	bhi.n	2714e <__libc_init_array+0x32>
   2715a:	bd70      	pop	{r4, r5, r6, pc}
   2715c:	0004d0b4 	.word	0x0004d0b4
   27160:	0004d0b4 	.word	0x0004d0b4
   27164:	0004d0b4 	.word	0x0004d0b4
   27168:	0004d0c0 	.word	0x0004d0c0

0002716c <__retarget_lock_init_recursive>:
   2716c:	4770      	bx	lr
   2716e:	bf00      	nop

00027170 <__retarget_lock_close_recursive>:
   27170:	4770      	bx	lr
   27172:	bf00      	nop

00027174 <__retarget_lock_acquire_recursive>:
   27174:	4770      	bx	lr
   27176:	bf00      	nop

00027178 <__retarget_lock_release_recursive>:
   27178:	4770      	bx	lr
   2717a:	bf00      	nop

0002717c <_wcrtomb_r>:
   2717c:	b570      	push	{r4, r5, r6, lr}
   2717e:	4605      	mov	r5, r0
   27180:	b084      	sub	sp, #16
   27182:	b15b      	cbz	r3, 2719c <_wcrtomb_r+0x20>
   27184:	461c      	mov	r4, r3
   27186:	4b0f      	ldr	r3, [pc, #60]	@ (271c4 <_wcrtomb_r+0x48>)
   27188:	f8d3 60e0 	ldr.w	r6, [r3, #224]	@ 0xe0
   2718c:	4623      	mov	r3, r4
   2718e:	b169      	cbz	r1, 271ac <_wcrtomb_r+0x30>
   27190:	4628      	mov	r0, r5
   27192:	47b0      	blx	r6
   27194:	1c43      	adds	r3, r0, #1
   27196:	d00f      	beq.n	271b8 <_wcrtomb_r+0x3c>
   27198:	b004      	add	sp, #16
   2719a:	bd70      	pop	{r4, r5, r6, pc}
   2719c:	4b09      	ldr	r3, [pc, #36]	@ (271c4 <_wcrtomb_r+0x48>)
   2719e:	f500 7482 	add.w	r4, r0, #260	@ 0x104
   271a2:	f8d3 60e0 	ldr.w	r6, [r3, #224]	@ 0xe0
   271a6:	4623      	mov	r3, r4
   271a8:	2900      	cmp	r1, #0
   271aa:	d1f1      	bne.n	27190 <_wcrtomb_r+0x14>
   271ac:	460a      	mov	r2, r1
   271ae:	4628      	mov	r0, r5
   271b0:	a901      	add	r1, sp, #4
   271b2:	47b0      	blx	r6
   271b4:	1c43      	adds	r3, r0, #1
   271b6:	d1ef      	bne.n	27198 <_wcrtomb_r+0x1c>
   271b8:	2200      	movs	r2, #0
   271ba:	238a      	movs	r3, #138	@ 0x8a
   271bc:	6022      	str	r2, [r4, #0]
   271be:	602b      	str	r3, [r5, #0]
   271c0:	b004      	add	sp, #16
   271c2:	bd70      	pop	{r4, r5, r6, pc}
   271c4:	1000d3d4 	.word	0x1000d3d4

000271c8 <_wcsrtombs_r>:
   271c8:	b510      	push	{r4, lr}
   271ca:	b082      	sub	sp, #8
   271cc:	9c04      	ldr	r4, [sp, #16]
   271ce:	e9cd 3400 	strd	r3, r4, [sp]
   271d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
   271d6:	f002 ff0b 	bl	29ff0 <_wcsnrtombs_r>
   271da:	b002      	add	sp, #8
   271dc:	bd10      	pop	{r4, pc}
   271de:	bf00      	nop

000271e0 <__register_exitproc>:
   271e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   271e4:	4d1b      	ldr	r5, [pc, #108]	@ (27254 <__register_exitproc+0x74>)
   271e6:	4606      	mov	r6, r0
   271e8:	6828      	ldr	r0, [r5, #0]
   271ea:	4698      	mov	r8, r3
   271ec:	460f      	mov	r7, r1
   271ee:	4691      	mov	r9, r2
   271f0:	f7ff ffc0 	bl	27174 <__retarget_lock_acquire_recursive>
   271f4:	4b18      	ldr	r3, [pc, #96]	@ (27258 <__register_exitproc+0x78>)
   271f6:	681c      	ldr	r4, [r3, #0]
   271f8:	b31c      	cbz	r4, 27242 <__register_exitproc+0x62>
   271fa:	6828      	ldr	r0, [r5, #0]
   271fc:	6865      	ldr	r5, [r4, #4]
   271fe:	2d1f      	cmp	r5, #31
   27200:	dc22      	bgt.n	27248 <__register_exitproc+0x68>
   27202:	b94e      	cbnz	r6, 27218 <__register_exitproc+0x38>
   27204:	1c6b      	adds	r3, r5, #1
   27206:	3502      	adds	r5, #2
   27208:	6063      	str	r3, [r4, #4]
   2720a:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   2720e:	f7ff ffb3 	bl	27178 <__retarget_lock_release_recursive>
   27212:	2000      	movs	r0, #0
   27214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   27218:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   2721c:	2301      	movs	r3, #1
   2721e:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
   27222:	f8d4 2188 	ldr.w	r2, [r4, #392]	@ 0x188
   27226:	40ab      	lsls	r3, r5
   27228:	431a      	orrs	r2, r3
   2722a:	2e02      	cmp	r6, #2
   2722c:	f8c4 2188 	str.w	r2, [r4, #392]	@ 0x188
   27230:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
   27234:	d1e6      	bne.n	27204 <__register_exitproc+0x24>
   27236:	f8d4 218c 	ldr.w	r2, [r4, #396]	@ 0x18c
   2723a:	431a      	orrs	r2, r3
   2723c:	f8c4 218c 	str.w	r2, [r4, #396]	@ 0x18c
   27240:	e7e0      	b.n	27204 <__register_exitproc+0x24>
   27242:	4c06      	ldr	r4, [pc, #24]	@ (2725c <__register_exitproc+0x7c>)
   27244:	601c      	str	r4, [r3, #0]
   27246:	e7d8      	b.n	271fa <__register_exitproc+0x1a>
   27248:	f7ff ff96 	bl	27178 <__retarget_lock_release_recursive>
   2724c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   27250:	e7e0      	b.n	27214 <__register_exitproc+0x34>
   27252:	bf00      	nop
   27254:	1000d668 	.word	0x1000d668
   27258:	1005022c 	.word	0x1005022c
   2725c:	1005009c 	.word	0x1005009c

00027260 <register_fini>:
   27260:	4b02      	ldr	r3, [pc, #8]	@ (2726c <register_fini+0xc>)
   27262:	b113      	cbz	r3, 2726a <register_fini+0xa>
   27264:	4802      	ldr	r0, [pc, #8]	@ (27270 <register_fini+0x10>)
   27266:	f7fe b8b3 	b.w	253d0 <atexit>
   2726a:	4770      	bx	lr
   2726c:	00000000 	.word	0x00000000
   27270:	00029ecd 	.word	0x00029ecd

00027274 <_malloc_trim_r>:
   27274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27278:	4606      	mov	r6, r0
   2727a:	2008      	movs	r0, #8
   2727c:	4689      	mov	r9, r1
   2727e:	f002 fe17 	bl	29eb0 <sysconf>
   27282:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 27328 <_malloc_trim_r+0xb4>
   27286:	4605      	mov	r5, r0
   27288:	4630      	mov	r0, r6
   2728a:	f002 fa61 	bl	29750 <__malloc_lock>
   2728e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   27292:	685f      	ldr	r7, [r3, #4]
   27294:	f027 0703 	bic.w	r7, r7, #3
   27298:	f1a7 0411 	sub.w	r4, r7, #17
   2729c:	eba4 0409 	sub.w	r4, r4, r9
   272a0:	442c      	add	r4, r5
   272a2:	fbb4 f4f5 	udiv	r4, r4, r5
   272a6:	3c01      	subs	r4, #1
   272a8:	fb05 f404 	mul.w	r4, r5, r4
   272ac:	42a5      	cmp	r5, r4
   272ae:	dc08      	bgt.n	272c2 <_malloc_trim_r+0x4e>
   272b0:	2100      	movs	r1, #0
   272b2:	4630      	mov	r0, r6
   272b4:	f002 fdd4 	bl	29e60 <_sbrk_r>
   272b8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   272bc:	443b      	add	r3, r7
   272be:	4298      	cmp	r0, r3
   272c0:	d005      	beq.n	272ce <_malloc_trim_r+0x5a>
   272c2:	4630      	mov	r0, r6
   272c4:	f002 fa4a 	bl	2975c <__malloc_unlock>
   272c8:	2000      	movs	r0, #0
   272ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   272ce:	4261      	negs	r1, r4
   272d0:	4630      	mov	r0, r6
   272d2:	f002 fdc5 	bl	29e60 <_sbrk_r>
   272d6:	3001      	adds	r0, #1
   272d8:	d00f      	beq.n	272fa <_malloc_trim_r+0x86>
   272da:	4a11      	ldr	r2, [pc, #68]	@ (27320 <_malloc_trim_r+0xac>)
   272dc:	f8d8 3008 	ldr.w	r3, [r8, #8]
   272e0:	1b3f      	subs	r7, r7, r4
   272e2:	f047 0701 	orr.w	r7, r7, #1
   272e6:	605f      	str	r7, [r3, #4]
   272e8:	6813      	ldr	r3, [r2, #0]
   272ea:	4630      	mov	r0, r6
   272ec:	1b1b      	subs	r3, r3, r4
   272ee:	6013      	str	r3, [r2, #0]
   272f0:	f002 fa34 	bl	2975c <__malloc_unlock>
   272f4:	2001      	movs	r0, #1
   272f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   272fa:	2100      	movs	r1, #0
   272fc:	4630      	mov	r0, r6
   272fe:	f002 fdaf 	bl	29e60 <_sbrk_r>
   27302:	f8d8 2008 	ldr.w	r2, [r8, #8]
   27306:	1a83      	subs	r3, r0, r2
   27308:	2b0f      	cmp	r3, #15
   2730a:	ddda      	ble.n	272c2 <_malloc_trim_r+0x4e>
   2730c:	f043 0301 	orr.w	r3, r3, #1
   27310:	6053      	str	r3, [r2, #4]
   27312:	4b04      	ldr	r3, [pc, #16]	@ (27324 <_malloc_trim_r+0xb0>)
   27314:	4902      	ldr	r1, [pc, #8]	@ (27320 <_malloc_trim_r+0xac>)
   27316:	681b      	ldr	r3, [r3, #0]
   27318:	1ac0      	subs	r0, r0, r3
   2731a:	6008      	str	r0, [r1, #0]
   2731c:	e7d1      	b.n	272c2 <_malloc_trim_r+0x4e>
   2731e:	bf00      	nop
   27320:	10050230 	.word	0x10050230
   27324:	1000d66c 	.word	0x1000d66c
   27328:	1000d678 	.word	0x1000d678

0002732c <_free_r>:
   2732c:	2900      	cmp	r1, #0
   2732e:	d07c      	beq.n	2742a <_free_r+0xfe>
   27330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27334:	460c      	mov	r4, r1
   27336:	4680      	mov	r8, r0
   27338:	f002 fa0a 	bl	29750 <__malloc_lock>
   2733c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   27340:	4f75      	ldr	r7, [pc, #468]	@ (27518 <_free_r+0x1ec>)
   27342:	f1a4 0508 	sub.w	r5, r4, #8
   27346:	f023 0101 	bic.w	r1, r3, #1
   2734a:	1868      	adds	r0, r5, r1
   2734c:	68be      	ldr	r6, [r7, #8]
   2734e:	6842      	ldr	r2, [r0, #4]
   27350:	4286      	cmp	r6, r0
   27352:	f022 0203 	bic.w	r2, r2, #3
   27356:	f000 8083 	beq.w	27460 <_free_r+0x134>
   2735a:	07de      	lsls	r6, r3, #31
   2735c:	6042      	str	r2, [r0, #4]
   2735e:	eb00 0c02 	add.w	ip, r0, r2
   27362:	d433      	bmi.n	273cc <_free_r+0xa0>
   27364:	f854 4c08 	ldr.w	r4, [r4, #-8]
   27368:	f8dc 3004 	ldr.w	r3, [ip, #4]
   2736c:	1b2d      	subs	r5, r5, r4
   2736e:	4421      	add	r1, r4
   27370:	68ac      	ldr	r4, [r5, #8]
   27372:	f107 0c08 	add.w	ip, r7, #8
   27376:	4564      	cmp	r4, ip
   27378:	f003 0301 	and.w	r3, r3, #1
   2737c:	d064      	beq.n	27448 <_free_r+0x11c>
   2737e:	f8d5 e00c 	ldr.w	lr, [r5, #12]
   27382:	f8c4 e00c 	str.w	lr, [r4, #12]
   27386:	f8ce 4008 	str.w	r4, [lr, #8]
   2738a:	2b00      	cmp	r3, #0
   2738c:	f000 8081 	beq.w	27492 <_free_r+0x166>
   27390:	f041 0301 	orr.w	r3, r1, #1
   27394:	606b      	str	r3, [r5, #4]
   27396:	6001      	str	r1, [r0, #0]
   27398:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
   2739c:	d222      	bcs.n	273e4 <_free_r+0xb8>
   2739e:	6878      	ldr	r0, [r7, #4]
   273a0:	08cb      	lsrs	r3, r1, #3
   273a2:	2201      	movs	r2, #1
   273a4:	0949      	lsrs	r1, r1, #5
   273a6:	3301      	adds	r3, #1
   273a8:	408a      	lsls	r2, r1
   273aa:	4302      	orrs	r2, r0
   273ac:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   273b0:	607a      	str	r2, [r7, #4]
   273b2:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   273b6:	3a08      	subs	r2, #8
   273b8:	e9c5 1202 	strd	r1, r2, [r5, #8]
   273bc:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   273c0:	60cd      	str	r5, [r1, #12]
   273c2:	4640      	mov	r0, r8
   273c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   273c8:	f002 b9c8 	b.w	2975c <__malloc_unlock>
   273cc:	f8dc 3004 	ldr.w	r3, [ip, #4]
   273d0:	07db      	lsls	r3, r3, #31
   273d2:	d52b      	bpl.n	2742c <_free_r+0x100>
   273d4:	f041 0301 	orr.w	r3, r1, #1
   273d8:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
   273dc:	f844 3c04 	str.w	r3, [r4, #-4]
   273e0:	6001      	str	r1, [r0, #0]
   273e2:	d3dc      	bcc.n	2739e <_free_r+0x72>
   273e4:	f5b1 6f20 	cmp.w	r1, #2560	@ 0xa00
   273e8:	ea4f 2351 	mov.w	r3, r1, lsr #9
   273ec:	d253      	bcs.n	27496 <_free_r+0x16a>
   273ee:	098b      	lsrs	r3, r1, #6
   273f0:	f103 0039 	add.w	r0, r3, #57	@ 0x39
   273f4:	f103 0238 	add.w	r2, r3, #56	@ 0x38
   273f8:	00c3      	lsls	r3, r0, #3
   273fa:	18f8      	adds	r0, r7, r3
   273fc:	58fb      	ldr	r3, [r7, r3]
   273fe:	3808      	subs	r0, #8
   27400:	4298      	cmp	r0, r3
   27402:	d103      	bne.n	2740c <_free_r+0xe0>
   27404:	e061      	b.n	274ca <_free_r+0x19e>
   27406:	689b      	ldr	r3, [r3, #8]
   27408:	4298      	cmp	r0, r3
   2740a:	d004      	beq.n	27416 <_free_r+0xea>
   2740c:	685a      	ldr	r2, [r3, #4]
   2740e:	f022 0203 	bic.w	r2, r2, #3
   27412:	428a      	cmp	r2, r1
   27414:	d8f7      	bhi.n	27406 <_free_r+0xda>
   27416:	68d8      	ldr	r0, [r3, #12]
   27418:	e9c5 3002 	strd	r3, r0, [r5, #8]
   2741c:	6085      	str	r5, [r0, #8]
   2741e:	60dd      	str	r5, [r3, #12]
   27420:	4640      	mov	r0, r8
   27422:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   27426:	f002 b999 	b.w	2975c <__malloc_unlock>
   2742a:	4770      	bx	lr
   2742c:	4411      	add	r1, r2
   2742e:	f107 0c08 	add.w	ip, r7, #8
   27432:	6883      	ldr	r3, [r0, #8]
   27434:	4563      	cmp	r3, ip
   27436:	d03f      	beq.n	274b8 <_free_r+0x18c>
   27438:	68c2      	ldr	r2, [r0, #12]
   2743a:	60da      	str	r2, [r3, #12]
   2743c:	6093      	str	r3, [r2, #8]
   2743e:	f041 0301 	orr.w	r3, r1, #1
   27442:	606b      	str	r3, [r5, #4]
   27444:	5069      	str	r1, [r5, r1]
   27446:	e7a7      	b.n	27398 <_free_r+0x6c>
   27448:	2b00      	cmp	r3, #0
   2744a:	d15f      	bne.n	2750c <_free_r+0x1e0>
   2744c:	440a      	add	r2, r1
   2744e:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   27452:	60cb      	str	r3, [r1, #12]
   27454:	6099      	str	r1, [r3, #8]
   27456:	f042 0301 	orr.w	r3, r2, #1
   2745a:	606b      	str	r3, [r5, #4]
   2745c:	50aa      	str	r2, [r5, r2]
   2745e:	e7b0      	b.n	273c2 <_free_r+0x96>
   27460:	07db      	lsls	r3, r3, #31
   27462:	440a      	add	r2, r1
   27464:	d407      	bmi.n	27476 <_free_r+0x14a>
   27466:	f854 3c08 	ldr.w	r3, [r4, #-8]
   2746a:	1aed      	subs	r5, r5, r3
   2746c:	441a      	add	r2, r3
   2746e:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
   27472:	60cb      	str	r3, [r1, #12]
   27474:	6099      	str	r1, [r3, #8]
   27476:	f042 0301 	orr.w	r3, r2, #1
   2747a:	606b      	str	r3, [r5, #4]
   2747c:	4b27      	ldr	r3, [pc, #156]	@ (2751c <_free_r+0x1f0>)
   2747e:	60bd      	str	r5, [r7, #8]
   27480:	681b      	ldr	r3, [r3, #0]
   27482:	4293      	cmp	r3, r2
   27484:	d89d      	bhi.n	273c2 <_free_r+0x96>
   27486:	4b26      	ldr	r3, [pc, #152]	@ (27520 <_free_r+0x1f4>)
   27488:	4640      	mov	r0, r8
   2748a:	6819      	ldr	r1, [r3, #0]
   2748c:	f7ff fef2 	bl	27274 <_malloc_trim_r>
   27490:	e797      	b.n	273c2 <_free_r+0x96>
   27492:	4411      	add	r1, r2
   27494:	e7cd      	b.n	27432 <_free_r+0x106>
   27496:	2b14      	cmp	r3, #20
   27498:	d908      	bls.n	274ac <_free_r+0x180>
   2749a:	2b54      	cmp	r3, #84	@ 0x54
   2749c:	d81d      	bhi.n	274da <_free_r+0x1ae>
   2749e:	0b0b      	lsrs	r3, r1, #12
   274a0:	f103 006f 	add.w	r0, r3, #111	@ 0x6f
   274a4:	f103 026e 	add.w	r2, r3, #110	@ 0x6e
   274a8:	00c3      	lsls	r3, r0, #3
   274aa:	e7a6      	b.n	273fa <_free_r+0xce>
   274ac:	f103 005c 	add.w	r0, r3, #92	@ 0x5c
   274b0:	f103 025b 	add.w	r2, r3, #91	@ 0x5b
   274b4:	00c3      	lsls	r3, r0, #3
   274b6:	e7a0      	b.n	273fa <_free_r+0xce>
   274b8:	f041 0301 	orr.w	r3, r1, #1
   274bc:	e9c7 5504 	strd	r5, r5, [r7, #16]
   274c0:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   274c4:	606b      	str	r3, [r5, #4]
   274c6:	5069      	str	r1, [r5, r1]
   274c8:	e77b      	b.n	273c2 <_free_r+0x96>
   274ca:	6879      	ldr	r1, [r7, #4]
   274cc:	1092      	asrs	r2, r2, #2
   274ce:	2401      	movs	r4, #1
   274d0:	fa04 f202 	lsl.w	r2, r4, r2
   274d4:	430a      	orrs	r2, r1
   274d6:	607a      	str	r2, [r7, #4]
   274d8:	e79e      	b.n	27418 <_free_r+0xec>
   274da:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
   274de:	d806      	bhi.n	274ee <_free_r+0x1c2>
   274e0:	0bcb      	lsrs	r3, r1, #15
   274e2:	f103 0078 	add.w	r0, r3, #120	@ 0x78
   274e6:	f103 0277 	add.w	r2, r3, #119	@ 0x77
   274ea:	00c3      	lsls	r3, r0, #3
   274ec:	e785      	b.n	273fa <_free_r+0xce>
   274ee:	f240 5254 	movw	r2, #1364	@ 0x554
   274f2:	4293      	cmp	r3, r2
   274f4:	d806      	bhi.n	27504 <_free_r+0x1d8>
   274f6:	0c8b      	lsrs	r3, r1, #18
   274f8:	f103 007d 	add.w	r0, r3, #125	@ 0x7d
   274fc:	f103 027c 	add.w	r2, r3, #124	@ 0x7c
   27500:	00c3      	lsls	r3, r0, #3
   27502:	e77a      	b.n	273fa <_free_r+0xce>
   27504:	f44f 737e 	mov.w	r3, #1016	@ 0x3f8
   27508:	227e      	movs	r2, #126	@ 0x7e
   2750a:	e776      	b.n	273fa <_free_r+0xce>
   2750c:	f041 0301 	orr.w	r3, r1, #1
   27510:	606b      	str	r3, [r5, #4]
   27512:	6001      	str	r1, [r0, #0]
   27514:	e755      	b.n	273c2 <_free_r+0x96>
   27516:	bf00      	nop
   27518:	1000d678 	.word	0x1000d678
   2751c:	1000d670 	.word	0x1000d670
   27520:	10050260 	.word	0x10050260

00027524 <_findenv_r>:
   27524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27528:	f8df 9074 	ldr.w	r9, [pc, #116]	@ 275a0 <_findenv_r+0x7c>
   2752c:	4607      	mov	r7, r0
   2752e:	460e      	mov	r6, r1
   27530:	4690      	mov	r8, r2
   27532:	f003 fd45 	bl	2afc0 <__env_lock>
   27536:	f8d9 5000 	ldr.w	r5, [r9]
   2753a:	b14d      	cbz	r5, 27550 <_findenv_r+0x2c>
   2753c:	7833      	ldrb	r3, [r6, #0]
   2753e:	461c      	mov	r4, r3
   27540:	b16b      	cbz	r3, 2755e <_findenv_r+0x3a>
   27542:	4634      	mov	r4, r6
   27544:	e002      	b.n	2754c <_findenv_r+0x28>
   27546:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   2754a:	b13b      	cbz	r3, 2755c <_findenv_r+0x38>
   2754c:	2b3d      	cmp	r3, #61	@ 0x3d
   2754e:	d1fa      	bne.n	27546 <_findenv_r+0x22>
   27550:	4638      	mov	r0, r7
   27552:	f003 fd3b 	bl	2afcc <__env_unlock>
   27556:	2000      	movs	r0, #0
   27558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2755c:	1ba4      	subs	r4, r4, r6
   2755e:	6828      	ldr	r0, [r5, #0]
   27560:	2800      	cmp	r0, #0
   27562:	d0f5      	beq.n	27550 <_findenv_r+0x2c>
   27564:	4622      	mov	r2, r4
   27566:	4631      	mov	r1, r6
   27568:	f7ff fd0a 	bl	26f80 <strncmp>
   2756c:	b928      	cbnz	r0, 2757a <_findenv_r+0x56>
   2756e:	6828      	ldr	r0, [r5, #0]
   27570:	5d03      	ldrb	r3, [r0, r4]
   27572:	2b3d      	cmp	r3, #61	@ 0x3d
   27574:	eb00 0a04 	add.w	sl, r0, r4
   27578:	d004      	beq.n	27584 <_findenv_r+0x60>
   2757a:	f855 0f04 	ldr.w	r0, [r5, #4]!
   2757e:	2800      	cmp	r0, #0
   27580:	d1f0      	bne.n	27564 <_findenv_r+0x40>
   27582:	e7e5      	b.n	27550 <_findenv_r+0x2c>
   27584:	f8d9 3000 	ldr.w	r3, [r9]
   27588:	1aeb      	subs	r3, r5, r3
   2758a:	109b      	asrs	r3, r3, #2
   2758c:	4638      	mov	r0, r7
   2758e:	f8c8 3000 	str.w	r3, [r8]
   27592:	f003 fd1b 	bl	2afcc <__env_unlock>
   27596:	f10a 0001 	add.w	r0, sl, #1
   2759a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2759e:	bf00      	nop
   275a0:	1000da80 	.word	0x1000da80

000275a4 <_malloc_r>:
   275a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   275a8:	f101 050b 	add.w	r5, r1, #11
   275ac:	2d16      	cmp	r5, #22
   275ae:	b083      	sub	sp, #12
   275b0:	4606      	mov	r6, r0
   275b2:	d823      	bhi.n	275fc <_malloc_r+0x58>
   275b4:	2910      	cmp	r1, #16
   275b6:	f200 80af 	bhi.w	27718 <_malloc_r+0x174>
   275ba:	f002 f8c9 	bl	29750 <__malloc_lock>
   275be:	2510      	movs	r5, #16
   275c0:	2318      	movs	r3, #24
   275c2:	2002      	movs	r0, #2
   275c4:	4fb7      	ldr	r7, [pc, #732]	@ (278a4 <_malloc_r+0x300>)
   275c6:	443b      	add	r3, r7
   275c8:	f1a3 0208 	sub.w	r2, r3, #8
   275cc:	685c      	ldr	r4, [r3, #4]
   275ce:	4294      	cmp	r4, r2
   275d0:	f000 811e 	beq.w	27810 <_malloc_r+0x26c>
   275d4:	6863      	ldr	r3, [r4, #4]
   275d6:	68e2      	ldr	r2, [r4, #12]
   275d8:	68a1      	ldr	r1, [r4, #8]
   275da:	f023 0303 	bic.w	r3, r3, #3
   275de:	60ca      	str	r2, [r1, #12]
   275e0:	4423      	add	r3, r4
   275e2:	4630      	mov	r0, r6
   275e4:	6091      	str	r1, [r2, #8]
   275e6:	685a      	ldr	r2, [r3, #4]
   275e8:	f042 0201 	orr.w	r2, r2, #1
   275ec:	605a      	str	r2, [r3, #4]
   275ee:	f002 f8b5 	bl	2975c <__malloc_unlock>
   275f2:	3408      	adds	r4, #8
   275f4:	4620      	mov	r0, r4
   275f6:	b003      	add	sp, #12
   275f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   275fc:	f035 0507 	bics.w	r5, r5, #7
   27600:	f100 808a 	bmi.w	27718 <_malloc_r+0x174>
   27604:	42a9      	cmp	r1, r5
   27606:	f200 8087 	bhi.w	27718 <_malloc_r+0x174>
   2760a:	f002 f8a1 	bl	29750 <__malloc_lock>
   2760e:	f5b5 7ffc 	cmp.w	r5, #504	@ 0x1f8
   27612:	f0c0 816e 	bcc.w	278f2 <_malloc_r+0x34e>
   27616:	0a6b      	lsrs	r3, r5, #9
   27618:	f000 8082 	beq.w	27720 <_malloc_r+0x17c>
   2761c:	2b04      	cmp	r3, #4
   2761e:	f200 811d 	bhi.w	2785c <_malloc_r+0x2b8>
   27622:	09ab      	lsrs	r3, r5, #6
   27624:	f103 0039 	add.w	r0, r3, #57	@ 0x39
   27628:	f103 0e38 	add.w	lr, r3, #56	@ 0x38
   2762c:	00c3      	lsls	r3, r0, #3
   2762e:	4f9d      	ldr	r7, [pc, #628]	@ (278a4 <_malloc_r+0x300>)
   27630:	443b      	add	r3, r7
   27632:	f1a3 0c08 	sub.w	ip, r3, #8
   27636:	685c      	ldr	r4, [r3, #4]
   27638:	45a4      	cmp	ip, r4
   2763a:	d107      	bne.n	2764c <_malloc_r+0xa8>
   2763c:	e00d      	b.n	2765a <_malloc_r+0xb6>
   2763e:	2a00      	cmp	r2, #0
   27640:	68e1      	ldr	r1, [r4, #12]
   27642:	f280 80df 	bge.w	27804 <_malloc_r+0x260>
   27646:	458c      	cmp	ip, r1
   27648:	d007      	beq.n	2765a <_malloc_r+0xb6>
   2764a:	460c      	mov	r4, r1
   2764c:	6863      	ldr	r3, [r4, #4]
   2764e:	f023 0303 	bic.w	r3, r3, #3
   27652:	1b5a      	subs	r2, r3, r5
   27654:	2a0f      	cmp	r2, #15
   27656:	ddf2      	ble.n	2763e <_malloc_r+0x9a>
   27658:	4670      	mov	r0, lr
   2765a:	f8df 8260 	ldr.w	r8, [pc, #608]	@ 278bc <_malloc_r+0x318>
   2765e:	693c      	ldr	r4, [r7, #16]
   27660:	4544      	cmp	r4, r8
   27662:	f000 80bc 	beq.w	277de <_malloc_r+0x23a>
   27666:	6863      	ldr	r3, [r4, #4]
   27668:	f023 0c03 	bic.w	ip, r3, #3
   2766c:	ebac 0305 	sub.w	r3, ip, r5
   27670:	2b0f      	cmp	r3, #15
   27672:	f300 8142 	bgt.w	278fa <_malloc_r+0x356>
   27676:	2b00      	cmp	r3, #0
   27678:	e9c7 8804 	strd	r8, r8, [r7, #16]
   2767c:	f280 812d 	bge.w	278da <_malloc_r+0x336>
   27680:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
   27684:	f8d7 e004 	ldr.w	lr, [r7, #4]
   27688:	f080 80c8 	bcs.w	2781c <_malloc_r+0x278>
   2768c:	ea4f 01dc 	mov.w	r1, ip, lsr #3
   27690:	3101      	adds	r1, #1
   27692:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
   27696:	2301      	movs	r3, #1
   27698:	fa03 f30c 	lsl.w	r3, r3, ip
   2769c:	f857 2031 	ldr.w	r2, [r7, r1, lsl #3]
   276a0:	60a2      	str	r2, [r4, #8]
   276a2:	ea4e 0e03 	orr.w	lr, lr, r3
   276a6:	eb07 03c1 	add.w	r3, r7, r1, lsl #3
   276aa:	3b08      	subs	r3, #8
   276ac:	60e3      	str	r3, [r4, #12]
   276ae:	f8c7 e004 	str.w	lr, [r7, #4]
   276b2:	f847 4031 	str.w	r4, [r7, r1, lsl #3]
   276b6:	60d4      	str	r4, [r2, #12]
   276b8:	1083      	asrs	r3, r0, #2
   276ba:	f04f 0c01 	mov.w	ip, #1
   276be:	fa0c fc03 	lsl.w	ip, ip, r3
   276c2:	45f4      	cmp	ip, lr
   276c4:	d832      	bhi.n	2772c <_malloc_r+0x188>
   276c6:	ea1c 0f0e 	tst.w	ip, lr
   276ca:	d108      	bne.n	276de <_malloc_r+0x13a>
   276cc:	f020 0003 	bic.w	r0, r0, #3
   276d0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   276d4:	ea1c 0f0e 	tst.w	ip, lr
   276d8:	f100 0004 	add.w	r0, r0, #4
   276dc:	d0f8      	beq.n	276d0 <_malloc_r+0x12c>
   276de:	eb07 0ac0 	add.w	sl, r7, r0, lsl #3
   276e2:	46d6      	mov	lr, sl
   276e4:	4681      	mov	r9, r0
   276e6:	f8de 300c 	ldr.w	r3, [lr, #12]
   276ea:	e00b      	b.n	27704 <_malloc_r+0x160>
   276ec:	6859      	ldr	r1, [r3, #4]
   276ee:	f021 0103 	bic.w	r1, r1, #3
   276f2:	1b4a      	subs	r2, r1, r5
   276f4:	2a0f      	cmp	r2, #15
   276f6:	461c      	mov	r4, r3
   276f8:	68db      	ldr	r3, [r3, #12]
   276fa:	f300 80bb 	bgt.w	27874 <_malloc_r+0x2d0>
   276fe:	2a00      	cmp	r2, #0
   27700:	f280 80de 	bge.w	278c0 <_malloc_r+0x31c>
   27704:	459e      	cmp	lr, r3
   27706:	d1f1      	bne.n	276ec <_malloc_r+0x148>
   27708:	f109 0901 	add.w	r9, r9, #1
   2770c:	f019 0f03 	tst.w	r9, #3
   27710:	f10e 0e08 	add.w	lr, lr, #8
   27714:	d1e7      	bne.n	276e6 <_malloc_r+0x142>
   27716:	e119      	b.n	2794c <_malloc_r+0x3a8>
   27718:	230c      	movs	r3, #12
   2771a:	6033      	str	r3, [r6, #0]
   2771c:	2400      	movs	r4, #0
   2771e:	e769      	b.n	275f4 <_malloc_r+0x50>
   27720:	f44f 7300 	mov.w	r3, #512	@ 0x200
   27724:	2040      	movs	r0, #64	@ 0x40
   27726:	f04f 0e3f 	mov.w	lr, #63	@ 0x3f
   2772a:	e780      	b.n	2762e <_malloc_r+0x8a>
   2772c:	68bc      	ldr	r4, [r7, #8]
   2772e:	6863      	ldr	r3, [r4, #4]
   27730:	f023 0903 	bic.w	r9, r3, #3
   27734:	45a9      	cmp	r9, r5
   27736:	d303      	bcc.n	27740 <_malloc_r+0x19c>
   27738:	eba9 0305 	sub.w	r3, r9, r5
   2773c:	2b0f      	cmp	r3, #15
   2773e:	dc51      	bgt.n	277e4 <_malloc_r+0x240>
   27740:	4b59      	ldr	r3, [pc, #356]	@ (278a8 <_malloc_r+0x304>)
   27742:	681b      	ldr	r3, [r3, #0]
   27744:	2008      	movs	r0, #8
   27746:	f103 0810 	add.w	r8, r3, #16
   2774a:	eb04 0309 	add.w	r3, r4, r9
   2774e:	9300      	str	r3, [sp, #0]
   27750:	f002 fbae 	bl	29eb0 <sysconf>
   27754:	4a55      	ldr	r2, [pc, #340]	@ (278ac <_malloc_r+0x308>)
   27756:	6813      	ldr	r3, [r2, #0]
   27758:	3301      	adds	r3, #1
   2775a:	44a8      	add	r8, r5
   2775c:	4683      	mov	fp, r0
   2775e:	d005      	beq.n	2776c <_malloc_r+0x1c8>
   27760:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
   27764:	4480      	add	r8, r0
   27766:	4243      	negs	r3, r0
   27768:	ea03 0808 	and.w	r8, r3, r8
   2776c:	4641      	mov	r1, r8
   2776e:	4630      	mov	r0, r6
   27770:	f002 fb76 	bl	29e60 <_sbrk_r>
   27774:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
   27778:	4a4c      	ldr	r2, [pc, #304]	@ (278ac <_malloc_r+0x308>)
   2777a:	4682      	mov	sl, r0
   2777c:	f000 80d8 	beq.w	27930 <_malloc_r+0x38c>
   27780:	9b00      	ldr	r3, [sp, #0]
   27782:	4283      	cmp	r3, r0
   27784:	f200 80d2 	bhi.w	2792c <_malloc_r+0x388>
   27788:	4b49      	ldr	r3, [pc, #292]	@ (278b0 <_malloc_r+0x30c>)
   2778a:	6818      	ldr	r0, [r3, #0]
   2778c:	4440      	add	r0, r8
   2778e:	f10b 31ff 	add.w	r1, fp, #4294967295	@ 0xffffffff
   27792:	6018      	str	r0, [r3, #0]
   27794:	4684      	mov	ip, r0
   27796:	f040 80fc 	bne.w	27992 <_malloc_r+0x3ee>
   2779a:	ea1a 0f01 	tst.w	sl, r1
   2779e:	f040 80f8 	bne.w	27992 <_malloc_r+0x3ee>
   277a2:	f8d7 a008 	ldr.w	sl, [r7, #8]
   277a6:	44c8      	add	r8, r9
   277a8:	f048 0201 	orr.w	r2, r8, #1
   277ac:	f8ca 2004 	str.w	r2, [sl, #4]
   277b0:	4b40      	ldr	r3, [pc, #256]	@ (278b4 <_malloc_r+0x310>)
   277b2:	6819      	ldr	r1, [r3, #0]
   277b4:	4281      	cmp	r1, r0
   277b6:	bf38      	it	cc
   277b8:	6018      	strcc	r0, [r3, #0]
   277ba:	4b3f      	ldr	r3, [pc, #252]	@ (278b8 <_malloc_r+0x314>)
   277bc:	6819      	ldr	r1, [r3, #0]
   277be:	4281      	cmp	r1, r0
   277c0:	bf38      	it	cc
   277c2:	6018      	strcc	r0, [r3, #0]
   277c4:	4654      	mov	r4, sl
   277c6:	f022 0803 	bic.w	r8, r2, #3
   277ca:	45a8      	cmp	r8, r5
   277cc:	eba8 0305 	sub.w	r3, r8, r5
   277d0:	d301      	bcc.n	277d6 <_malloc_r+0x232>
   277d2:	2b0f      	cmp	r3, #15
   277d4:	dc06      	bgt.n	277e4 <_malloc_r+0x240>
   277d6:	4630      	mov	r0, r6
   277d8:	f001 ffc0 	bl	2975c <__malloc_unlock>
   277dc:	e79e      	b.n	2771c <_malloc_r+0x178>
   277de:	f8d7 e004 	ldr.w	lr, [r7, #4]
   277e2:	e769      	b.n	276b8 <_malloc_r+0x114>
   277e4:	1962      	adds	r2, r4, r5
   277e6:	f043 0301 	orr.w	r3, r3, #1
   277ea:	f045 0501 	orr.w	r5, r5, #1
   277ee:	6065      	str	r5, [r4, #4]
   277f0:	4630      	mov	r0, r6
   277f2:	60ba      	str	r2, [r7, #8]
   277f4:	6053      	str	r3, [r2, #4]
   277f6:	f001 ffb1 	bl	2975c <__malloc_unlock>
   277fa:	3408      	adds	r4, #8
   277fc:	4620      	mov	r0, r4
   277fe:	b003      	add	sp, #12
   27800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27804:	68a2      	ldr	r2, [r4, #8]
   27806:	4423      	add	r3, r4
   27808:	60d1      	str	r1, [r2, #12]
   2780a:	4630      	mov	r0, r6
   2780c:	608a      	str	r2, [r1, #8]
   2780e:	e6ea      	b.n	275e6 <_malloc_r+0x42>
   27810:	68dc      	ldr	r4, [r3, #12]
   27812:	42a3      	cmp	r3, r4
   27814:	f47f aede 	bne.w	275d4 <_malloc_r+0x30>
   27818:	3002      	adds	r0, #2
   2781a:	e71e      	b.n	2765a <_malloc_r+0xb6>
   2781c:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
   27820:	ea4f 225c 	mov.w	r2, ip, lsr #9
   27824:	d37b      	bcc.n	2791e <_malloc_r+0x37a>
   27826:	2a14      	cmp	r2, #20
   27828:	f200 8112 	bhi.w	27a50 <_malloc_r+0x4ac>
   2782c:	f102 035c 	add.w	r3, r2, #92	@ 0x5c
   27830:	00db      	lsls	r3, r3, #3
   27832:	325b      	adds	r2, #91	@ 0x5b
   27834:	18f9      	adds	r1, r7, r3
   27836:	58fb      	ldr	r3, [r7, r3]
   27838:	3908      	subs	r1, #8
   2783a:	4299      	cmp	r1, r3
   2783c:	d103      	bne.n	27846 <_malloc_r+0x2a2>
   2783e:	e0ec      	b.n	27a1a <_malloc_r+0x476>
   27840:	689b      	ldr	r3, [r3, #8]
   27842:	4299      	cmp	r1, r3
   27844:	d004      	beq.n	27850 <_malloc_r+0x2ac>
   27846:	685a      	ldr	r2, [r3, #4]
   27848:	f022 0203 	bic.w	r2, r2, #3
   2784c:	4562      	cmp	r2, ip
   2784e:	d8f7      	bhi.n	27840 <_malloc_r+0x29c>
   27850:	68d9      	ldr	r1, [r3, #12]
   27852:	e9c4 3102 	strd	r3, r1, [r4, #8]
   27856:	608c      	str	r4, [r1, #8]
   27858:	60dc      	str	r4, [r3, #12]
   2785a:	e72d      	b.n	276b8 <_malloc_r+0x114>
   2785c:	2b14      	cmp	r3, #20
   2785e:	d96a      	bls.n	27936 <_malloc_r+0x392>
   27860:	2b54      	cmp	r3, #84	@ 0x54
   27862:	f200 80fe 	bhi.w	27a62 <_malloc_r+0x4be>
   27866:	0b2b      	lsrs	r3, r5, #12
   27868:	f103 006f 	add.w	r0, r3, #111	@ 0x6f
   2786c:	f103 0e6e 	add.w	lr, r3, #110	@ 0x6e
   27870:	00c3      	lsls	r3, r0, #3
   27872:	e6dc      	b.n	2762e <_malloc_r+0x8a>
   27874:	f8d4 c008 	ldr.w	ip, [r4, #8]
   27878:	4630      	mov	r0, r6
   2787a:	1966      	adds	r6, r4, r5
   2787c:	f045 0501 	orr.w	r5, r5, #1
   27880:	6065      	str	r5, [r4, #4]
   27882:	f8cc 300c 	str.w	r3, [ip, #12]
   27886:	f8c3 c008 	str.w	ip, [r3, #8]
   2788a:	f042 0301 	orr.w	r3, r2, #1
   2788e:	e9c7 6604 	strd	r6, r6, [r7, #16]
   27892:	e9c6 8802 	strd	r8, r8, [r6, #8]
   27896:	6073      	str	r3, [r6, #4]
   27898:	5062      	str	r2, [r4, r1]
   2789a:	f001 ff5f 	bl	2975c <__malloc_unlock>
   2789e:	3408      	adds	r4, #8
   278a0:	e6a8      	b.n	275f4 <_malloc_r+0x50>
   278a2:	bf00      	nop
   278a4:	1000d678 	.word	0x1000d678
   278a8:	10050260 	.word	0x10050260
   278ac:	1000d66c 	.word	0x1000d66c
   278b0:	10050230 	.word	0x10050230
   278b4:	1005025c 	.word	0x1005025c
   278b8:	10050258 	.word	0x10050258
   278bc:	1000d680 	.word	0x1000d680
   278c0:	4421      	add	r1, r4
   278c2:	4630      	mov	r0, r6
   278c4:	684a      	ldr	r2, [r1, #4]
   278c6:	f042 0201 	orr.w	r2, r2, #1
   278ca:	604a      	str	r2, [r1, #4]
   278cc:	f854 2f08 	ldr.w	r2, [r4, #8]!
   278d0:	60d3      	str	r3, [r2, #12]
   278d2:	609a      	str	r2, [r3, #8]
   278d4:	f001 ff42 	bl	2975c <__malloc_unlock>
   278d8:	e68c      	b.n	275f4 <_malloc_r+0x50>
   278da:	44a4      	add	ip, r4
   278dc:	4630      	mov	r0, r6
   278de:	f8dc 3004 	ldr.w	r3, [ip, #4]
   278e2:	f043 0301 	orr.w	r3, r3, #1
   278e6:	f8cc 3004 	str.w	r3, [ip, #4]
   278ea:	f001 ff37 	bl	2975c <__malloc_unlock>
   278ee:	3408      	adds	r4, #8
   278f0:	e680      	b.n	275f4 <_malloc_r+0x50>
   278f2:	08e8      	lsrs	r0, r5, #3
   278f4:	f105 0308 	add.w	r3, r5, #8
   278f8:	e664      	b.n	275c4 <_malloc_r+0x20>
   278fa:	1962      	adds	r2, r4, r5
   278fc:	f043 0101 	orr.w	r1, r3, #1
   27900:	f045 0501 	orr.w	r5, r5, #1
   27904:	6065      	str	r5, [r4, #4]
   27906:	4630      	mov	r0, r6
   27908:	e9c7 2204 	strd	r2, r2, [r7, #16]
   2790c:	e9c2 8802 	strd	r8, r8, [r2, #8]
   27910:	6051      	str	r1, [r2, #4]
   27912:	f844 300c 	str.w	r3, [r4, ip]
   27916:	f001 ff21 	bl	2975c <__malloc_unlock>
   2791a:	3408      	adds	r4, #8
   2791c:	e66a      	b.n	275f4 <_malloc_r+0x50>
   2791e:	ea4f 129c 	mov.w	r2, ip, lsr #6
   27922:	f102 0339 	add.w	r3, r2, #57	@ 0x39
   27926:	00db      	lsls	r3, r3, #3
   27928:	3238      	adds	r2, #56	@ 0x38
   2792a:	e783      	b.n	27834 <_malloc_r+0x290>
   2792c:	42bc      	cmp	r4, r7
   2792e:	d028      	beq.n	27982 <_malloc_r+0x3de>
   27930:	68bc      	ldr	r4, [r7, #8]
   27932:	6862      	ldr	r2, [r4, #4]
   27934:	e747      	b.n	277c6 <_malloc_r+0x222>
   27936:	f103 005c 	add.w	r0, r3, #92	@ 0x5c
   2793a:	f103 0e5b 	add.w	lr, r3, #91	@ 0x5b
   2793e:	00c3      	lsls	r3, r0, #3
   27940:	e675      	b.n	2762e <_malloc_r+0x8a>
   27942:	f85a 3908 	ldr.w	r3, [sl], #-8
   27946:	4553      	cmp	r3, sl
   27948:	f040 80d9 	bne.w	27afe <_malloc_r+0x55a>
   2794c:	f010 0f03 	tst.w	r0, #3
   27950:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
   27954:	d1f5      	bne.n	27942 <_malloc_r+0x39e>
   27956:	687b      	ldr	r3, [r7, #4]
   27958:	ea23 030c 	bic.w	r3, r3, ip
   2795c:	607b      	str	r3, [r7, #4]
   2795e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   27962:	459c      	cmp	ip, r3
   27964:	f63f aee2 	bhi.w	2772c <_malloc_r+0x188>
   27968:	f1bc 0f00 	cmp.w	ip, #0
   2796c:	d104      	bne.n	27978 <_malloc_r+0x3d4>
   2796e:	e6dd      	b.n	2772c <_malloc_r+0x188>
   27970:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   27974:	f109 0904 	add.w	r9, r9, #4
   27978:	ea1c 0f03 	tst.w	ip, r3
   2797c:	d0f8      	beq.n	27970 <_malloc_r+0x3cc>
   2797e:	4648      	mov	r0, r9
   27980:	e6ad      	b.n	276de <_malloc_r+0x13a>
   27982:	4b60      	ldr	r3, [pc, #384]	@ (27b04 <_malloc_r+0x560>)
   27984:	6818      	ldr	r0, [r3, #0]
   27986:	eb08 0c00 	add.w	ip, r8, r0
   2798a:	f10b 31ff 	add.w	r1, fp, #4294967295	@ 0xffffffff
   2798e:	f8c3 c000 	str.w	ip, [r3]
   27992:	6810      	ldr	r0, [r2, #0]
   27994:	3001      	adds	r0, #1
   27996:	d06e      	beq.n	27a76 <_malloc_r+0x4d2>
   27998:	9a00      	ldr	r2, [sp, #0]
   2799a:	ebaa 0202 	sub.w	r2, sl, r2
   2799e:	4462      	add	r2, ip
   279a0:	601a      	str	r2, [r3, #0]
   279a2:	f01a 0207 	ands.w	r2, sl, #7
   279a6:	e9cd 2300 	strd	r2, r3, [sp]
   279aa:	d040      	beq.n	27a2e <_malloc_r+0x48a>
   279ac:	f1c2 0208 	rsb	r2, r2, #8
   279b0:	4492      	add	sl, r2
   279b2:	44d0      	add	r8, sl
   279b4:	ea08 0001 	and.w	r0, r8, r1
   279b8:	445a      	add	r2, fp
   279ba:	1a12      	subs	r2, r2, r0
   279bc:	ea02 0b01 	and.w	fp, r2, r1
   279c0:	4659      	mov	r1, fp
   279c2:	4630      	mov	r0, r6
   279c4:	f002 fa4c 	bl	29e60 <_sbrk_r>
   279c8:	1c42      	adds	r2, r0, #1
   279ca:	9b01      	ldr	r3, [sp, #4]
   279cc:	d06f      	beq.n	27aae <_malloc_r+0x50a>
   279ce:	eba0 000a 	sub.w	r0, r0, sl
   279d2:	eb00 080b 	add.w	r8, r0, fp
   279d6:	6818      	ldr	r0, [r3, #0]
   279d8:	f8c7 a008 	str.w	sl, [r7, #8]
   279dc:	f048 0201 	orr.w	r2, r8, #1
   279e0:	4458      	add	r0, fp
   279e2:	42bc      	cmp	r4, r7
   279e4:	f8ca 2004 	str.w	r2, [sl, #4]
   279e8:	6018      	str	r0, [r3, #0]
   279ea:	f43f aee1 	beq.w	277b0 <_malloc_r+0x20c>
   279ee:	f1b9 0f0f 	cmp.w	r9, #15
   279f2:	d943      	bls.n	27a7c <_malloc_r+0x4d8>
   279f4:	6861      	ldr	r1, [r4, #4]
   279f6:	f1a9 020c 	sub.w	r2, r9, #12
   279fa:	f022 0207 	bic.w	r2, r2, #7
   279fe:	f001 0101 	and.w	r1, r1, #1
   27a02:	4311      	orrs	r1, r2
   27a04:	6061      	str	r1, [r4, #4]
   27a06:	f04f 0c05 	mov.w	ip, #5
   27a0a:	18a1      	adds	r1, r4, r2
   27a0c:	2a0f      	cmp	r2, #15
   27a0e:	e9c1 cc01 	strd	ip, ip, [r1, #4]
   27a12:	d854      	bhi.n	27abe <_malloc_r+0x51a>
   27a14:	f8da 2004 	ldr.w	r2, [sl, #4]
   27a18:	e6ca      	b.n	277b0 <_malloc_r+0x20c>
   27a1a:	1092      	asrs	r2, r2, #2
   27a1c:	f04f 0c01 	mov.w	ip, #1
   27a20:	fa0c f202 	lsl.w	r2, ip, r2
   27a24:	ea4e 0e02 	orr.w	lr, lr, r2
   27a28:	f8c7 e004 	str.w	lr, [r7, #4]
   27a2c:	e711      	b.n	27852 <_malloc_r+0x2ae>
   27a2e:	eb0a 0208 	add.w	r2, sl, r8
   27a32:	400a      	ands	r2, r1
   27a34:	ebab 0202 	sub.w	r2, fp, r2
   27a38:	ea02 0b01 	and.w	fp, r2, r1
   27a3c:	4659      	mov	r1, fp
   27a3e:	4630      	mov	r0, r6
   27a40:	f002 fa0e 	bl	29e60 <_sbrk_r>
   27a44:	1c43      	adds	r3, r0, #1
   27a46:	9b01      	ldr	r3, [sp, #4]
   27a48:	d1c1      	bne.n	279ce <_malloc_r+0x42a>
   27a4a:	f8dd b000 	ldr.w	fp, [sp]
   27a4e:	e7c2      	b.n	279d6 <_malloc_r+0x432>
   27a50:	2a54      	cmp	r2, #84	@ 0x54
   27a52:	d817      	bhi.n	27a84 <_malloc_r+0x4e0>
   27a54:	ea4f 321c 	mov.w	r2, ip, lsr #12
   27a58:	f102 036f 	add.w	r3, r2, #111	@ 0x6f
   27a5c:	00db      	lsls	r3, r3, #3
   27a5e:	326e      	adds	r2, #110	@ 0x6e
   27a60:	e6e8      	b.n	27834 <_malloc_r+0x290>
   27a62:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
   27a66:	d817      	bhi.n	27a98 <_malloc_r+0x4f4>
   27a68:	0beb      	lsrs	r3, r5, #15
   27a6a:	f103 0078 	add.w	r0, r3, #120	@ 0x78
   27a6e:	f103 0e77 	add.w	lr, r3, #119	@ 0x77
   27a72:	00c3      	lsls	r3, r0, #3
   27a74:	e5db      	b.n	2762e <_malloc_r+0x8a>
   27a76:	f8c2 a000 	str.w	sl, [r2]
   27a7a:	e792      	b.n	279a2 <_malloc_r+0x3fe>
   27a7c:	2301      	movs	r3, #1
   27a7e:	f8ca 3004 	str.w	r3, [sl, #4]
   27a82:	e6a8      	b.n	277d6 <_malloc_r+0x232>
   27a84:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
   27a88:	d824      	bhi.n	27ad4 <_malloc_r+0x530>
   27a8a:	ea4f 32dc 	mov.w	r2, ip, lsr #15
   27a8e:	f102 0378 	add.w	r3, r2, #120	@ 0x78
   27a92:	00db      	lsls	r3, r3, #3
   27a94:	3277      	adds	r2, #119	@ 0x77
   27a96:	e6cd      	b.n	27834 <_malloc_r+0x290>
   27a98:	f240 5254 	movw	r2, #1364	@ 0x554
   27a9c:	4293      	cmp	r3, r2
   27a9e:	d824      	bhi.n	27aea <_malloc_r+0x546>
   27aa0:	0cab      	lsrs	r3, r5, #18
   27aa2:	f103 007d 	add.w	r0, r3, #125	@ 0x7d
   27aa6:	f103 0e7c 	add.w	lr, r3, #124	@ 0x7c
   27aaa:	00c3      	lsls	r3, r0, #3
   27aac:	e5bf      	b.n	2762e <_malloc_r+0x8a>
   27aae:	9a00      	ldr	r2, [sp, #0]
   27ab0:	3a08      	subs	r2, #8
   27ab2:	4490      	add	r8, r2
   27ab4:	eba8 080a 	sub.w	r8, r8, sl
   27ab8:	f04f 0b00 	mov.w	fp, #0
   27abc:	e78b      	b.n	279d6 <_malloc_r+0x432>
   27abe:	4630      	mov	r0, r6
   27ac0:	f104 0108 	add.w	r1, r4, #8
   27ac4:	9300      	str	r3, [sp, #0]
   27ac6:	f7ff fc31 	bl	2732c <_free_r>
   27aca:	9b00      	ldr	r3, [sp, #0]
   27acc:	f8d7 a008 	ldr.w	sl, [r7, #8]
   27ad0:	6818      	ldr	r0, [r3, #0]
   27ad2:	e79f      	b.n	27a14 <_malloc_r+0x470>
   27ad4:	f240 5354 	movw	r3, #1364	@ 0x554
   27ad8:	429a      	cmp	r2, r3
   27ada:	d80c      	bhi.n	27af6 <_malloc_r+0x552>
   27adc:	ea4f 429c 	mov.w	r2, ip, lsr #18
   27ae0:	f102 037d 	add.w	r3, r2, #125	@ 0x7d
   27ae4:	00db      	lsls	r3, r3, #3
   27ae6:	327c      	adds	r2, #124	@ 0x7c
   27ae8:	e6a4      	b.n	27834 <_malloc_r+0x290>
   27aea:	f44f 737e 	mov.w	r3, #1016	@ 0x3f8
   27aee:	207f      	movs	r0, #127	@ 0x7f
   27af0:	f04f 0e7e 	mov.w	lr, #126	@ 0x7e
   27af4:	e59b      	b.n	2762e <_malloc_r+0x8a>
   27af6:	f44f 737e 	mov.w	r3, #1016	@ 0x3f8
   27afa:	227e      	movs	r2, #126	@ 0x7e
   27afc:	e69a      	b.n	27834 <_malloc_r+0x290>
   27afe:	687b      	ldr	r3, [r7, #4]
   27b00:	e72d      	b.n	2795e <_malloc_r+0x3ba>
   27b02:	bf00      	nop
   27b04:	10050230 	.word	0x10050230

00027b08 <__ascii_mbtowc>:
   27b08:	b082      	sub	sp, #8
   27b0a:	b149      	cbz	r1, 27b20 <__ascii_mbtowc+0x18>
   27b0c:	b15a      	cbz	r2, 27b26 <__ascii_mbtowc+0x1e>
   27b0e:	b16b      	cbz	r3, 27b2c <__ascii_mbtowc+0x24>
   27b10:	7813      	ldrb	r3, [r2, #0]
   27b12:	600b      	str	r3, [r1, #0]
   27b14:	7812      	ldrb	r2, [r2, #0]
   27b16:	1e10      	subs	r0, r2, #0
   27b18:	bf18      	it	ne
   27b1a:	2001      	movne	r0, #1
   27b1c:	b002      	add	sp, #8
   27b1e:	4770      	bx	lr
   27b20:	a901      	add	r1, sp, #4
   27b22:	2a00      	cmp	r2, #0
   27b24:	d1f3      	bne.n	27b0e <__ascii_mbtowc+0x6>
   27b26:	4610      	mov	r0, r2
   27b28:	b002      	add	sp, #8
   27b2a:	4770      	bx	lr
   27b2c:	f06f 0001 	mvn.w	r0, #1
   27b30:	e7f4      	b.n	27b1c <__ascii_mbtowc+0x14>
   27b32:	bf00      	nop
   27b34:	0000      	movs	r0, r0
	...

00027b38 <_svfprintf_r>:
   27b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27b3c:	b0d9      	sub	sp, #356	@ 0x164
   27b3e:	460c      	mov	r4, r1
   27b40:	9109      	str	r1, [sp, #36]	@ 0x24
   27b42:	4615      	mov	r5, r2
   27b44:	930b      	str	r3, [sp, #44]	@ 0x2c
   27b46:	4683      	mov	fp, r0
   27b48:	f7ff fac6 	bl	270d8 <_localeconv_r>
   27b4c:	6803      	ldr	r3, [r0, #0]
   27b4e:	9316      	str	r3, [sp, #88]	@ 0x58
   27b50:	4618      	mov	r0, r3
   27b52:	f7f0 fdb5 	bl	186c0 <strlen>
   27b56:	2100      	movs	r1, #0
   27b58:	9014      	str	r0, [sp, #80]	@ 0x50
   27b5a:	2208      	movs	r2, #8
   27b5c:	a828      	add	r0, sp, #160	@ 0xa0
   27b5e:	f7ff f9bd 	bl	26edc <memset>
   27b62:	89a3      	ldrh	r3, [r4, #12]
   27b64:	0619      	lsls	r1, r3, #24
   27b66:	d503      	bpl.n	27b70 <_svfprintf_r+0x38>
   27b68:	6923      	ldr	r3, [r4, #16]
   27b6a:	2b00      	cmp	r3, #0
   27b6c:	f000 875e 	beq.w	28a2c <_svfprintf_r+0xef4>
   27b70:	ed9f 7b7f 	vldr	d7, [pc, #508]	@ 27d70 <_svfprintf_r+0x238>
   27b74:	2300      	movs	r3, #0
   27b76:	e9cd 332d 	strd	r3, r3, [sp, #180]	@ 0xb4
   27b7a:	e9cd 3317 	strd	r3, r3, [sp, #92]	@ 0x5c
   27b7e:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
   27b82:	aa2f      	add	r2, sp, #188	@ 0xbc
   27b84:	930e      	str	r3, [sp, #56]	@ 0x38
   27b86:	922c      	str	r2, [sp, #176]	@ 0xb0
   27b88:	4614      	mov	r4, r2
   27b8a:	9315      	str	r3, [sp, #84]	@ 0x54
   27b8c:	931c      	str	r3, [sp, #112]	@ 0x70
   27b8e:	9319      	str	r3, [sp, #100]	@ 0x64
   27b90:	9306      	str	r3, [sp, #24]
   27b92:	462e      	mov	r6, r5
   27b94:	46b2      	mov	sl, r6
   27b96:	4b78      	ldr	r3, [pc, #480]	@ (27d78 <_svfprintf_r+0x240>)
   27b98:	f8d3 50e4 	ldr.w	r5, [r3, #228]	@ 0xe4
   27b9c:	f7ff fa96 	bl	270cc <__locale_mb_cur_max>
   27ba0:	aa28      	add	r2, sp, #160	@ 0xa0
   27ba2:	4603      	mov	r3, r0
   27ba4:	9200      	str	r2, [sp, #0]
   27ba6:	a924      	add	r1, sp, #144	@ 0x90
   27ba8:	4652      	mov	r2, sl
   27baa:	4658      	mov	r0, fp
   27bac:	47a8      	blx	r5
   27bae:	2800      	cmp	r0, #0
   27bb0:	f000 80b1 	beq.w	27d16 <_svfprintf_r+0x1de>
   27bb4:	f2c0 80a7 	blt.w	27d06 <_svfprintf_r+0x1ce>
   27bb8:	9a24      	ldr	r2, [sp, #144]	@ 0x90
   27bba:	2a25      	cmp	r2, #37	@ 0x25
   27bbc:	4603      	mov	r3, r0
   27bbe:	d001      	beq.n	27bc4 <_svfprintf_r+0x8c>
   27bc0:	449a      	add	sl, r3
   27bc2:	e7e8      	b.n	27b96 <_svfprintf_r+0x5e>
   27bc4:	ebba 0706 	subs.w	r7, sl, r6
   27bc8:	4605      	mov	r5, r0
   27bca:	f040 80a8 	bne.w	27d1e <_svfprintf_r+0x1e6>
   27bce:	2300      	movs	r3, #0
   27bd0:	4619      	mov	r1, r3
   27bd2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
   27bd6:	f88d 3087 	strb.w	r3, [sp, #135]	@ 0x87
   27bda:	9307      	str	r3, [sp, #28]
   27bdc:	f10a 0a01 	add.w	sl, sl, #1
   27be0:	f89a 3000 	ldrb.w	r3, [sl]
   27be4:	9205      	str	r2, [sp, #20]
   27be6:	9104      	str	r1, [sp, #16]
   27be8:	f10a 0a01 	add.w	sl, sl, #1
   27bec:	f1a3 0220 	sub.w	r2, r3, #32
   27bf0:	2a5a      	cmp	r2, #90	@ 0x5a
   27bf2:	f200 80c3 	bhi.w	27d7c <_svfprintf_r+0x244>
   27bf6:	e8df f012 	tbh	[pc, r2, lsl #1]
   27bfa:	02f4      	.short	0x02f4
   27bfc:	00c100c1 	.word	0x00c100c1
   27c00:	00c102ed 	.word	0x00c102ed
   27c04:	00c100c1 	.word	0x00c100c1
   27c08:	00c1006a 	.word	0x00c1006a
   27c0c:	023f00c1 	.word	0x023f00c1
   27c10:	00c10251 	.word	0x00c10251
   27c14:	0306024a 	.word	0x0306024a
   27c18:	02ff00c1 	.word	0x02ff00c1
   27c1c:	005b005b 	.word	0x005b005b
   27c20:	005b005b 	.word	0x005b005b
   27c24:	005b005b 	.word	0x005b005b
   27c28:	005b005b 	.word	0x005b005b
   27c2c:	00c1005b 	.word	0x00c1005b
   27c30:	00c100c1 	.word	0x00c100c1
   27c34:	00c100c1 	.word	0x00c100c1
   27c38:	00c100c1 	.word	0x00c100c1
   27c3c:	00c1013b 	.word	0x00c1013b
   27c40:	02d301be 	.word	0x02d301be
   27c44:	013b013b 	.word	0x013b013b
   27c48:	00c1013b 	.word	0x00c1013b
   27c4c:	00c100c1 	.word	0x00c100c1
   27c50:	02cc00c1 	.word	0x02cc00c1
   27c54:	00c100c1 	.word	0x00c100c1
   27c58:	00c10288 	.word	0x00c10288
   27c5c:	00c100c1 	.word	0x00c100c1
   27c60:	00c101e8 	.word	0x00c101e8
   27c64:	00c10257 	.word	0x00c10257
   27c68:	06b200c1 	.word	0x06b200c1
   27c6c:	00c100c1 	.word	0x00c100c1
   27c70:	00c100c1 	.word	0x00c100c1
   27c74:	00c100c1 	.word	0x00c100c1
   27c78:	00c100c1 	.word	0x00c100c1
   27c7c:	00c1013b 	.word	0x00c1013b
   27c80:	021a01be 	.word	0x021a01be
   27c84:	013b013b 	.word	0x013b013b
   27c88:	02a0013b 	.word	0x02a0013b
   27c8c:	007f021a 	.word	0x007f021a
   27c90:	02c200c1 	.word	0x02c200c1
   27c94:	02b300c1 	.word	0x02b300c1
   27c98:	032206d8 	.word	0x032206d8
   27c9c:	00c1007f 	.word	0x00c1007f
   27ca0:	007c01e8 	.word	0x007c01e8
   27ca4:	00c106ae 	.word	0x00c106ae
   27ca8:	06db00c1 	.word	0x06db00c1
   27cac:	007c00c1 	.word	0x007c00c1
   27cb0:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
   27cb4:	2100      	movs	r1, #0
   27cb6:	f81a 3b01 	ldrb.w	r3, [sl], #1
   27cba:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   27cbe:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   27cc2:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
   27cc6:	2a09      	cmp	r2, #9
   27cc8:	d9f5      	bls.n	27cb6 <_svfprintf_r+0x17e>
   27cca:	9107      	str	r1, [sp, #28]
   27ccc:	e78e      	b.n	27bec <_svfprintf_r+0xb4>
   27cce:	4658      	mov	r0, fp
   27cd0:	f7ff fa02 	bl	270d8 <_localeconv_r>
   27cd4:	6843      	ldr	r3, [r0, #4]
   27cd6:	9319      	str	r3, [sp, #100]	@ 0x64
   27cd8:	4618      	mov	r0, r3
   27cda:	f7f0 fcf1 	bl	186c0 <strlen>
   27cde:	901c      	str	r0, [sp, #112]	@ 0x70
   27ce0:	4605      	mov	r5, r0
   27ce2:	4658      	mov	r0, fp
   27ce4:	f7ff f9f8 	bl	270d8 <_localeconv_r>
   27ce8:	6883      	ldr	r3, [r0, #8]
   27cea:	9317      	str	r3, [sp, #92]	@ 0x5c
   27cec:	2d00      	cmp	r5, #0
   27cee:	f040 85b7 	bne.w	28860 <_svfprintf_r+0xd28>
   27cf2:	f89a 3000 	ldrb.w	r3, [sl]
   27cf6:	e777      	b.n	27be8 <_svfprintf_r+0xb0>
   27cf8:	9b04      	ldr	r3, [sp, #16]
   27cfa:	f043 0320 	orr.w	r3, r3, #32
   27cfe:	9304      	str	r3, [sp, #16]
   27d00:	f89a 3000 	ldrb.w	r3, [sl]
   27d04:	e770      	b.n	27be8 <_svfprintf_r+0xb0>
   27d06:	2208      	movs	r2, #8
   27d08:	2100      	movs	r1, #0
   27d0a:	a828      	add	r0, sp, #160	@ 0xa0
   27d0c:	f7ff f8e6 	bl	26edc <memset>
   27d10:	2301      	movs	r3, #1
   27d12:	449a      	add	sl, r3
   27d14:	e73f      	b.n	27b96 <_svfprintf_r+0x5e>
   27d16:	ebba 0706 	subs.w	r7, sl, r6
   27d1a:	4605      	mov	r5, r0
   27d1c:	d010      	beq.n	27d40 <_svfprintf_r+0x208>
   27d1e:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
   27d20:	443b      	add	r3, r7
   27d22:	932e      	str	r3, [sp, #184]	@ 0xb8
   27d24:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   27d26:	3301      	adds	r3, #1
   27d28:	2b07      	cmp	r3, #7
   27d2a:	e9c4 6700 	strd	r6, r7, [r4]
   27d2e:	932d      	str	r3, [sp, #180]	@ 0xb4
   27d30:	dc15      	bgt.n	27d5e <_svfprintf_r+0x226>
   27d32:	3408      	adds	r4, #8
   27d34:	9b06      	ldr	r3, [sp, #24]
   27d36:	443b      	add	r3, r7
   27d38:	9306      	str	r3, [sp, #24]
   27d3a:	2d00      	cmp	r5, #0
   27d3c:	f47f af47 	bne.w	27bce <_svfprintf_r+0x96>
   27d40:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
   27d42:	2b00      	cmp	r3, #0
   27d44:	f041 8193 	bne.w	2906e <_svfprintf_r+0x1536>
   27d48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   27d4a:	899b      	ldrh	r3, [r3, #12]
   27d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
   27d50:	2b00      	cmp	r3, #0
   27d52:	f041 8392 	bne.w	2947a <_svfprintf_r+0x1942>
   27d56:	9806      	ldr	r0, [sp, #24]
   27d58:	b059      	add	sp, #356	@ 0x164
   27d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27d5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
   27d60:	aa2c      	add	r2, sp, #176	@ 0xb0
   27d62:	4658      	mov	r0, fp
   27d64:	f003 f938 	bl	2afd8 <__ssprint_r>
   27d68:	2800      	cmp	r0, #0
   27d6a:	d1ed      	bne.n	27d48 <_svfprintf_r+0x210>
   27d6c:	ac2f      	add	r4, sp, #188	@ 0xbc
   27d6e:	e7e1      	b.n	27d34 <_svfprintf_r+0x1fc>
	...
   27d78:	1000d3d4 	.word	0x1000d3d4
   27d7c:	930c      	str	r3, [sp, #48]	@ 0x30
   27d7e:	2b00      	cmp	r3, #0
   27d80:	d0de      	beq.n	27d40 <_svfprintf_r+0x208>
   27d82:	2200      	movs	r2, #0
   27d84:	f88d 30fc 	strb.w	r3, [sp, #252]	@ 0xfc
   27d88:	2301      	movs	r3, #1
   27d8a:	f88d 2087 	strb.w	r2, [sp, #135]	@ 0x87
   27d8e:	9302      	str	r3, [sp, #8]
   27d90:	920a      	str	r2, [sp, #40]	@ 0x28
   27d92:	9308      	str	r3, [sp, #32]
   27d94:	9205      	str	r2, [sp, #20]
   27d96:	9212      	str	r2, [sp, #72]	@ 0x48
   27d98:	920f      	str	r2, [sp, #60]	@ 0x3c
   27d9a:	920d      	str	r2, [sp, #52]	@ 0x34
   27d9c:	ae3f      	add	r6, sp, #252	@ 0xfc
   27d9e:	9b04      	ldr	r3, [sp, #16]
   27da0:	f013 0302 	ands.w	r3, r3, #2
   27da4:	d002      	beq.n	27dac <_svfprintf_r+0x274>
   27da6:	9902      	ldr	r1, [sp, #8]
   27da8:	3102      	adds	r1, #2
   27daa:	9102      	str	r1, [sp, #8]
   27dac:	9904      	ldr	r1, [sp, #16]
   27dae:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   27db0:	f011 0884 	ands.w	r8, r1, #132	@ 0x84
   27db4:	d105      	bne.n	27dc2 <_svfprintf_r+0x28a>
   27db6:	9907      	ldr	r1, [sp, #28]
   27db8:	9802      	ldr	r0, [sp, #8]
   27dba:	1a0f      	subs	r7, r1, r0
   27dbc:	2f00      	cmp	r7, #0
   27dbe:	f300 80a1 	bgt.w	27f04 <_svfprintf_r+0x3cc>
   27dc2:	b16a      	cbz	r2, 27de0 <_svfprintf_r+0x2a8>
   27dc4:	2201      	movs	r2, #1
   27dc6:	6062      	str	r2, [r4, #4]
   27dc8:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
   27dca:	3201      	adds	r2, #1
   27dcc:	3501      	adds	r5, #1
   27dce:	f10d 0187 	add.w	r1, sp, #135	@ 0x87
   27dd2:	2a07      	cmp	r2, #7
   27dd4:	952e      	str	r5, [sp, #184]	@ 0xb8
   27dd6:	922d      	str	r2, [sp, #180]	@ 0xb4
   27dd8:	6021      	str	r1, [r4, #0]
   27dda:	f300 83db 	bgt.w	28594 <_svfprintf_r+0xa5c>
   27dde:	3408      	adds	r4, #8
   27de0:	b16b      	cbz	r3, 27dfe <_svfprintf_r+0x2c6>
   27de2:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   27de4:	aa22      	add	r2, sp, #136	@ 0x88
   27de6:	3301      	adds	r3, #1
   27de8:	3502      	adds	r5, #2
   27dea:	6022      	str	r2, [r4, #0]
   27dec:	2b07      	cmp	r3, #7
   27dee:	f04f 0202 	mov.w	r2, #2
   27df2:	952e      	str	r5, [sp, #184]	@ 0xb8
   27df4:	932d      	str	r3, [sp, #180]	@ 0xb4
   27df6:	6062      	str	r2, [r4, #4]
   27df8:	f300 83c1 	bgt.w	2857e <_svfprintf_r+0xa46>
   27dfc:	3408      	adds	r4, #8
   27dfe:	f1b8 0f80 	cmp.w	r8, #128	@ 0x80
   27e02:	f000 82c4 	beq.w	2838e <_svfprintf_r+0x856>
   27e06:	9b05      	ldr	r3, [sp, #20]
   27e08:	9a08      	ldr	r2, [sp, #32]
   27e0a:	1a9f      	subs	r7, r3, r2
   27e0c:	2f00      	cmp	r7, #0
   27e0e:	f300 82fe 	bgt.w	2840e <_svfprintf_r+0x8d6>
   27e12:	9b04      	ldr	r3, [sp, #16]
   27e14:	05da      	lsls	r2, r3, #23
   27e16:	f100 8224 	bmi.w	28262 <_svfprintf_r+0x72a>
   27e1a:	9b08      	ldr	r3, [sp, #32]
   27e1c:	6063      	str	r3, [r4, #4]
   27e1e:	441d      	add	r5, r3
   27e20:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   27e22:	6026      	str	r6, [r4, #0]
   27e24:	3301      	adds	r3, #1
   27e26:	2b07      	cmp	r3, #7
   27e28:	952e      	str	r5, [sp, #184]	@ 0xb8
   27e2a:	932d      	str	r3, [sp, #180]	@ 0xb4
   27e2c:	f300 833f 	bgt.w	284ae <_svfprintf_r+0x976>
   27e30:	3408      	adds	r4, #8
   27e32:	9b04      	ldr	r3, [sp, #16]
   27e34:	075a      	lsls	r2, r3, #29
   27e36:	d505      	bpl.n	27e44 <_svfprintf_r+0x30c>
   27e38:	9b07      	ldr	r3, [sp, #28]
   27e3a:	9a02      	ldr	r2, [sp, #8]
   27e3c:	1a9e      	subs	r6, r3, r2
   27e3e:	2e00      	cmp	r6, #0
   27e40:	f300 83b5 	bgt.w	285ae <_svfprintf_r+0xa76>
   27e44:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
   27e48:	9902      	ldr	r1, [sp, #8]
   27e4a:	428a      	cmp	r2, r1
   27e4c:	bfac      	ite	ge
   27e4e:	189b      	addge	r3, r3, r2
   27e50:	185b      	addlt	r3, r3, r1
   27e52:	9306      	str	r3, [sp, #24]
   27e54:	2d00      	cmp	r5, #0
   27e56:	f040 830b 	bne.w	28470 <_svfprintf_r+0x938>
   27e5a:	2300      	movs	r3, #0
   27e5c:	932d      	str	r3, [sp, #180]	@ 0xb4
   27e5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   27e60:	b11b      	cbz	r3, 27e6a <_svfprintf_r+0x332>
   27e62:	990a      	ldr	r1, [sp, #40]	@ 0x28
   27e64:	4658      	mov	r0, fp
   27e66:	f7ff fa61 	bl	2732c <_free_r>
   27e6a:	ac2f      	add	r4, sp, #188	@ 0xbc
   27e6c:	4656      	mov	r6, sl
   27e6e:	e691      	b.n	27b94 <_svfprintf_r+0x5c>
   27e70:	930c      	str	r3, [sp, #48]	@ 0x30
   27e72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   27e74:	3307      	adds	r3, #7
   27e76:	f023 0307 	bic.w	r3, r3, #7
   27e7a:	ecb3 7b02 	vldmia	r3!, {d7}
   27e7e:	ec58 7b17 	vmov	r7, r8, d7
   27e82:	930b      	str	r3, [sp, #44]	@ 0x2c
   27e84:	f028 4300 	bic.w	r3, r8, #2147483648	@ 0x80000000
   27e88:	931b      	str	r3, [sp, #108]	@ 0x6c
   27e8a:	ed8d 7a1a 	vstr	s14, [sp, #104]	@ 0x68
   27e8e:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
   27e92:	4baf      	ldr	r3, [pc, #700]	@ (28150 <_svfprintf_r+0x618>)
   27e94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
   27e98:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
   27e9c:	f7f1 f8d2 	bl	19044 <__aeabi_dcmpun>
   27ea0:	2800      	cmp	r0, #0
   27ea2:	f040 8502 	bne.w	288aa <_svfprintf_r+0xd72>
   27ea6:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
   27eaa:	4ba9      	ldr	r3, [pc, #676]	@ (28150 <_svfprintf_r+0x618>)
   27eac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
   27eb0:	f7f1 f8aa 	bl	19008 <__aeabi_dcmple>
   27eb4:	2800      	cmp	r0, #0
   27eb6:	f040 84f8 	bne.w	288aa <_svfprintf_r+0xd72>
   27eba:	2200      	movs	r2, #0
   27ebc:	2300      	movs	r3, #0
   27ebe:	4638      	mov	r0, r7
   27ec0:	4641      	mov	r1, r8
   27ec2:	f7f1 f897 	bl	18ff4 <__aeabi_dcmplt>
   27ec6:	2800      	cmp	r0, #0
   27ec8:	f041 8021 	bne.w	28f0e <_svfprintf_r+0x13d6>
   27ecc:	f89d 2087 	ldrb.w	r2, [sp, #135]	@ 0x87
   27ed0:	9b04      	ldr	r3, [sp, #16]
   27ed2:	4ea0      	ldr	r6, [pc, #640]	@ (28154 <_svfprintf_r+0x61c>)
   27ed4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   27ed8:	9304      	str	r3, [sp, #16]
   27eda:	4b9f      	ldr	r3, [pc, #636]	@ (28158 <_svfprintf_r+0x620>)
   27edc:	990c      	ldr	r1, [sp, #48]	@ 0x30
   27ede:	2947      	cmp	r1, #71	@ 0x47
   27ee0:	bfd8      	it	le
   27ee2:	461e      	movle	r6, r3
   27ee4:	2300      	movs	r3, #0
   27ee6:	2103      	movs	r1, #3
   27ee8:	930a      	str	r3, [sp, #40]	@ 0x28
   27eea:	9102      	str	r1, [sp, #8]
   27eec:	9108      	str	r1, [sp, #32]
   27eee:	9305      	str	r3, [sp, #20]
   27ef0:	9312      	str	r3, [sp, #72]	@ 0x48
   27ef2:	930f      	str	r3, [sp, #60]	@ 0x3c
   27ef4:	930d      	str	r3, [sp, #52]	@ 0x34
   27ef6:	2a00      	cmp	r2, #0
   27ef8:	f43f af51 	beq.w	27d9e <_svfprintf_r+0x266>
   27efc:	9b02      	ldr	r3, [sp, #8]
   27efe:	3301      	adds	r3, #1
   27f00:	9302      	str	r3, [sp, #8]
   27f02:	e74c      	b.n	27d9e <_svfprintf_r+0x266>
   27f04:	4995      	ldr	r1, [pc, #596]	@ (2815c <_svfprintf_r+0x624>)
   27f06:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
   27f08:	9113      	str	r1, [sp, #76]	@ 0x4c
   27f0a:	2f10      	cmp	r7, #16
   27f0c:	dd25      	ble.n	27f5a <_svfprintf_r+0x422>
   27f0e:	4621      	mov	r1, r4
   27f10:	4628      	mov	r0, r5
   27f12:	9c09      	ldr	r4, [sp, #36]	@ 0x24
   27f14:	4d91      	ldr	r5, [pc, #580]	@ (2815c <_svfprintf_r+0x624>)
   27f16:	931d      	str	r3, [sp, #116]	@ 0x74
   27f18:	f04f 0910 	mov.w	r9, #16
   27f1c:	e004      	b.n	27f28 <_svfprintf_r+0x3f0>
   27f1e:	3f10      	subs	r7, #16
   27f20:	2f10      	cmp	r7, #16
   27f22:	f101 0108 	add.w	r1, r1, #8
   27f26:	dd15      	ble.n	27f54 <_svfprintf_r+0x41c>
   27f28:	3201      	adds	r2, #1
   27f2a:	3010      	adds	r0, #16
   27f2c:	2a07      	cmp	r2, #7
   27f2e:	e9c1 5900 	strd	r5, r9, [r1]
   27f32:	e9cd 202d 	strd	r2, r0, [sp, #180]	@ 0xb4
   27f36:	ddf2      	ble.n	27f1e <_svfprintf_r+0x3e6>
   27f38:	aa2c      	add	r2, sp, #176	@ 0xb0
   27f3a:	4621      	mov	r1, r4
   27f3c:	4658      	mov	r0, fp
   27f3e:	f003 f84b 	bl	2afd8 <__ssprint_r>
   27f42:	2800      	cmp	r0, #0
   27f44:	f040 829c 	bne.w	28480 <_svfprintf_r+0x948>
   27f48:	3f10      	subs	r7, #16
   27f4a:	2f10      	cmp	r7, #16
   27f4c:	e9dd 202d 	ldrd	r2, r0, [sp, #180]	@ 0xb4
   27f50:	a92f      	add	r1, sp, #188	@ 0xbc
   27f52:	dce9      	bgt.n	27f28 <_svfprintf_r+0x3f0>
   27f54:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
   27f56:	460c      	mov	r4, r1
   27f58:	4605      	mov	r5, r0
   27f5a:	3201      	adds	r2, #1
   27f5c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
   27f5e:	6021      	str	r1, [r4, #0]
   27f60:	443d      	add	r5, r7
   27f62:	2a07      	cmp	r2, #7
   27f64:	e9cd 252d 	strd	r2, r5, [sp, #180]	@ 0xb4
   27f68:	6067      	str	r7, [r4, #4]
   27f6a:	f300 86d4 	bgt.w	28d16 <_svfprintf_r+0x11de>
   27f6e:	f89d 2087 	ldrb.w	r2, [sp, #135]	@ 0x87
   27f72:	3408      	adds	r4, #8
   27f74:	e725      	b.n	27dc2 <_svfprintf_r+0x28a>
   27f76:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
   27f78:	930c      	str	r3, [sp, #48]	@ 0x30
   27f7a:	2b43      	cmp	r3, #67	@ 0x43
   27f7c:	f102 0504 	add.w	r5, r2, #4
   27f80:	d003      	beq.n	27f8a <_svfprintf_r+0x452>
   27f82:	9b04      	ldr	r3, [sp, #16]
   27f84:	06da      	lsls	r2, r3, #27
   27f86:	f140 8517 	bpl.w	289b8 <_svfprintf_r+0xe80>
   27f8a:	2208      	movs	r2, #8
   27f8c:	2100      	movs	r1, #0
   27f8e:	a82a      	add	r0, sp, #168	@ 0xa8
   27f90:	f7fe ffa4 	bl	26edc <memset>
   27f94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   27f96:	ae3f      	add	r6, sp, #252	@ 0xfc
   27f98:	681a      	ldr	r2, [r3, #0]
   27f9a:	4631      	mov	r1, r6
   27f9c:	ab2a      	add	r3, sp, #168	@ 0xa8
   27f9e:	4658      	mov	r0, fp
   27fa0:	f7ff f8ec 	bl	2717c <_wcrtomb_r>
   27fa4:	4603      	mov	r3, r0
   27fa6:	3301      	adds	r3, #1
   27fa8:	9008      	str	r0, [sp, #32]
   27faa:	f001 8261 	beq.w	29470 <_svfprintf_r+0x1938>
   27fae:	9b08      	ldr	r3, [sp, #32]
   27fb0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   27fb4:	9302      	str	r3, [sp, #8]
   27fb6:	2200      	movs	r2, #0
   27fb8:	950b      	str	r5, [sp, #44]	@ 0x2c
   27fba:	f88d 2087 	strb.w	r2, [sp, #135]	@ 0x87
   27fbe:	920a      	str	r2, [sp, #40]	@ 0x28
   27fc0:	9205      	str	r2, [sp, #20]
   27fc2:	9212      	str	r2, [sp, #72]	@ 0x48
   27fc4:	920f      	str	r2, [sp, #60]	@ 0x3c
   27fc6:	920d      	str	r2, [sp, #52]	@ 0x34
   27fc8:	e6e9      	b.n	27d9e <_svfprintf_r+0x266>
   27fca:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
   27fcc:	930c      	str	r3, [sp, #48]	@ 0x30
   27fce:	f857 6b04 	ldr.w	r6, [r7], #4
   27fd2:	2300      	movs	r3, #0
   27fd4:	f88d 3087 	strb.w	r3, [sp, #135]	@ 0x87
   27fd8:	2e00      	cmp	r6, #0
   27fda:	f000 8516 	beq.w	28a0a <_svfprintf_r+0xed2>
   27fde:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   27fe0:	2b53      	cmp	r3, #83	@ 0x53
   27fe2:	f000 86bf 	beq.w	28d64 <_svfprintf_r+0x122c>
   27fe6:	9b04      	ldr	r3, [sp, #16]
   27fe8:	f013 0310 	ands.w	r3, r3, #16
   27fec:	930d      	str	r3, [sp, #52]	@ 0x34
   27fee:	f040 86b9 	bne.w	28d64 <_svfprintf_r+0x122c>
   27ff2:	9b05      	ldr	r3, [sp, #20]
   27ff4:	2b00      	cmp	r3, #0
   27ff6:	f2c1 8045 	blt.w	29084 <_svfprintf_r+0x154c>
   27ffa:	990d      	ldr	r1, [sp, #52]	@ 0x34
   27ffc:	461a      	mov	r2, r3
   27ffe:	4630      	mov	r0, r6
   28000:	f7f0 fa6e 	bl	184e0 <memchr>
   28004:	900a      	str	r0, [sp, #40]	@ 0x28
   28006:	2800      	cmp	r0, #0
   28008:	f001 8266 	beq.w	294d8 <_svfprintf_r+0x19a0>
   2800c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   2800e:	1b99      	subs	r1, r3, r6
   28010:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   28012:	9108      	str	r1, [sp, #32]
   28014:	9305      	str	r3, [sp, #20]
   28016:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   2801a:	9312      	str	r3, [sp, #72]	@ 0x48
   2801c:	930f      	str	r3, [sp, #60]	@ 0x3c
   2801e:	930a      	str	r3, [sp, #40]	@ 0x28
   28020:	2373      	movs	r3, #115	@ 0x73
   28022:	f89d 2087 	ldrb.w	r2, [sp, #135]	@ 0x87
   28026:	970b      	str	r7, [sp, #44]	@ 0x2c
   28028:	9102      	str	r1, [sp, #8]
   2802a:	930c      	str	r3, [sp, #48]	@ 0x30
   2802c:	e763      	b.n	27ef6 <_svfprintf_r+0x3be>
   2802e:	930c      	str	r3, [sp, #48]	@ 0x30
   28030:	9b04      	ldr	r3, [sp, #16]
   28032:	069b      	lsls	r3, r3, #26
   28034:	f140 80bd 	bpl.w	281b2 <_svfprintf_r+0x67a>
   28038:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   2803a:	3307      	adds	r3, #7
   2803c:	f023 0307 	bic.w	r3, r3, #7
   28040:	461a      	mov	r2, r3
   28042:	6859      	ldr	r1, [r3, #4]
   28044:	f852 3b08 	ldr.w	r3, [r2], #8
   28048:	920b      	str	r2, [sp, #44]	@ 0x2c
   2804a:	460a      	mov	r2, r1
   2804c:	2900      	cmp	r1, #0
   2804e:	f2c0 83ca 	blt.w	287e6 <_svfprintf_r+0xcae>
   28052:	9905      	ldr	r1, [sp, #20]
   28054:	2900      	cmp	r1, #0
   28056:	f2c0 8283 	blt.w	28560 <_svfprintf_r+0xa28>
   2805a:	9904      	ldr	r1, [sp, #16]
   2805c:	f021 0580 	bic.w	r5, r1, #128	@ 0x80
   28060:	ea53 0102 	orrs.w	r1, r3, r2
   28064:	f040 827d 	bne.w	28562 <_svfprintf_r+0xa2a>
   28068:	9a05      	ldr	r2, [sp, #20]
   2806a:	2a00      	cmp	r2, #0
   2806c:	f040 827e 	bne.w	2856c <_svfprintf_r+0xa34>
   28070:	9504      	str	r5, [sp, #16]
   28072:	9208      	str	r2, [sp, #32]
   28074:	ae58      	add	r6, sp, #352	@ 0x160
   28076:	e160      	b.n	2833a <_svfprintf_r+0x802>
   28078:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   2807a:	f853 2b04 	ldr.w	r2, [r3], #4
   2807e:	9207      	str	r2, [sp, #28]
   28080:	2a00      	cmp	r2, #0
   28082:	f280 83da 	bge.w	2883a <_svfprintf_r+0xd02>
   28086:	9a07      	ldr	r2, [sp, #28]
   28088:	930b      	str	r3, [sp, #44]	@ 0x2c
   2808a:	4252      	negs	r2, r2
   2808c:	9207      	str	r2, [sp, #28]
   2808e:	9b04      	ldr	r3, [sp, #16]
   28090:	f043 0304 	orr.w	r3, r3, #4
   28094:	9304      	str	r3, [sp, #16]
   28096:	f89a 3000 	ldrb.w	r3, [sl]
   2809a:	e5a5      	b.n	27be8 <_svfprintf_r+0xb0>
   2809c:	232b      	movs	r3, #43	@ 0x2b
   2809e:	f88d 3087 	strb.w	r3, [sp, #135]	@ 0x87
   280a2:	f89a 3000 	ldrb.w	r3, [sl]
   280a6:	e59f      	b.n	27be8 <_svfprintf_r+0xb0>
   280a8:	930c      	str	r3, [sp, #48]	@ 0x30
   280aa:	9b04      	ldr	r3, [sp, #16]
   280ac:	f043 0510 	orr.w	r5, r3, #16
   280b0:	f015 0220 	ands.w	r2, r5, #32
   280b4:	f000 8372 	beq.w	2879c <_svfprintf_r+0xc64>
   280b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   280ba:	3307      	adds	r3, #7
   280bc:	f023 0307 	bic.w	r3, r3, #7
   280c0:	4619      	mov	r1, r3
   280c2:	685a      	ldr	r2, [r3, #4]
   280c4:	f851 3b08 	ldr.w	r3, [r1], #8
   280c8:	910b      	str	r1, [sp, #44]	@ 0x2c
   280ca:	2101      	movs	r1, #1
   280cc:	2000      	movs	r0, #0
   280ce:	9e05      	ldr	r6, [sp, #20]
   280d0:	f88d 0087 	strb.w	r0, [sp, #135]	@ 0x87
   280d4:	2e00      	cmp	r6, #0
   280d6:	f2c0 8119 	blt.w	2830c <_svfprintf_r+0x7d4>
   280da:	f025 0080 	bic.w	r0, r5, #128	@ 0x80
   280de:	9004      	str	r0, [sp, #16]
   280e0:	ea53 0002 	orrs.w	r0, r3, r2
   280e4:	f040 8111 	bne.w	2830a <_svfprintf_r+0x7d2>
   280e8:	2e00      	cmp	r6, #0
   280ea:	f040 8624 	bne.w	28d36 <_svfprintf_r+0x11fe>
   280ee:	2900      	cmp	r1, #0
   280f0:	f040 8380 	bne.w	287f4 <_svfprintf_r+0xcbc>
   280f4:	f015 0301 	ands.w	r3, r5, #1
   280f8:	9308      	str	r3, [sp, #32]
   280fa:	f000 83a3 	beq.w	28844 <_svfprintf_r+0xd0c>
   280fe:	2330      	movs	r3, #48	@ 0x30
   28100:	f88d 315f 	strb.w	r3, [sp, #351]	@ 0x15f
   28104:	f20d 165f 	addw	r6, sp, #351	@ 0x15f
   28108:	e117      	b.n	2833a <_svfprintf_r+0x802>
   2810a:	930c      	str	r3, [sp, #48]	@ 0x30
   2810c:	9b04      	ldr	r3, [sp, #16]
   2810e:	f043 0310 	orr.w	r3, r3, #16
   28112:	9304      	str	r3, [sp, #16]
   28114:	9b04      	ldr	r3, [sp, #16]
   28116:	f013 0220 	ands.w	r2, r3, #32
   2811a:	f000 8355 	beq.w	287c8 <_svfprintf_r+0xc90>
   2811e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   28120:	3307      	adds	r3, #7
   28122:	f023 0307 	bic.w	r3, r3, #7
   28126:	4619      	mov	r1, r3
   28128:	685a      	ldr	r2, [r3, #4]
   2812a:	f851 3b08 	ldr.w	r3, [r1], #8
   2812e:	910b      	str	r1, [sp, #44]	@ 0x2c
   28130:	9904      	ldr	r1, [sp, #16]
   28132:	f421 6580 	bic.w	r5, r1, #1024	@ 0x400
   28136:	2100      	movs	r1, #0
   28138:	e7c8      	b.n	280cc <_svfprintf_r+0x594>
   2813a:	f89a 3000 	ldrb.w	r3, [sl]
   2813e:	2b68      	cmp	r3, #104	@ 0x68
   28140:	f000 844e 	beq.w	289e0 <_svfprintf_r+0xea8>
   28144:	9a04      	ldr	r2, [sp, #16]
   28146:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
   2814a:	9204      	str	r2, [sp, #16]
   2814c:	e54c      	b.n	27be8 <_svfprintf_r+0xb0>
   2814e:	bf00      	nop
   28150:	7fefffff 	.word	0x7fefffff
   28154:	00043d4c 	.word	0x00043d4c
   28158:	00043d48 	.word	0x00043d48
   2815c:	0004b704 	.word	0x0004b704
   28160:	9b04      	ldr	r3, [sp, #16]
   28162:	069d      	lsls	r5, r3, #26
   28164:	f140 8390 	bpl.w	28888 <_svfprintf_r+0xd50>
   28168:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   2816a:	9a06      	ldr	r2, [sp, #24]
   2816c:	681b      	ldr	r3, [r3, #0]
   2816e:	601a      	str	r2, [r3, #0]
   28170:	17d2      	asrs	r2, r2, #31
   28172:	605a      	str	r2, [r3, #4]
   28174:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   28176:	3304      	adds	r3, #4
   28178:	930b      	str	r3, [sp, #44]	@ 0x2c
   2817a:	4656      	mov	r6, sl
   2817c:	e50a      	b.n	27b94 <_svfprintf_r+0x5c>
   2817e:	f89a 3000 	ldrb.w	r3, [sl]
   28182:	2b6c      	cmp	r3, #108	@ 0x6c
   28184:	f000 8422 	beq.w	289cc <_svfprintf_r+0xe94>
   28188:	9a04      	ldr	r2, [sp, #16]
   2818a:	f042 0210 	orr.w	r2, r2, #16
   2818e:	9204      	str	r2, [sp, #16]
   28190:	e52a      	b.n	27be8 <_svfprintf_r+0xb0>
   28192:	9b04      	ldr	r3, [sp, #16]
   28194:	f043 0308 	orr.w	r3, r3, #8
   28198:	9304      	str	r3, [sp, #16]
   2819a:	f89a 3000 	ldrb.w	r3, [sl]
   2819e:	e523      	b.n	27be8 <_svfprintf_r+0xb0>
   281a0:	930c      	str	r3, [sp, #48]	@ 0x30
   281a2:	9b04      	ldr	r3, [sp, #16]
   281a4:	f043 0310 	orr.w	r3, r3, #16
   281a8:	9304      	str	r3, [sp, #16]
   281aa:	9b04      	ldr	r3, [sp, #16]
   281ac:	069b      	lsls	r3, r3, #26
   281ae:	f53f af43 	bmi.w	28038 <_svfprintf_r+0x500>
   281b2:	9904      	ldr	r1, [sp, #16]
   281b4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
   281b6:	06cf      	lsls	r7, r1, #27
   281b8:	f852 3b04 	ldr.w	r3, [r2], #4
   281bc:	f100 834b 	bmi.w	28856 <_svfprintf_r+0xd1e>
   281c0:	9904      	ldr	r1, [sp, #16]
   281c2:	064e      	lsls	r6, r1, #25
   281c4:	f140 8643 	bpl.w	28e4e <_svfprintf_r+0x1316>
   281c8:	920b      	str	r2, [sp, #44]	@ 0x2c
   281ca:	f343 32c0 	sbfx	r2, r3, #15, #1
   281ce:	4611      	mov	r1, r2
   281d0:	b21b      	sxth	r3, r3
   281d2:	e73b      	b.n	2804c <_svfprintf_r+0x514>
   281d4:	9b04      	ldr	r3, [sp, #16]
   281d6:	f043 0301 	orr.w	r3, r3, #1
   281da:	9304      	str	r3, [sp, #16]
   281dc:	f89a 3000 	ldrb.w	r3, [sl]
   281e0:	e502      	b.n	27be8 <_svfprintf_r+0xb0>
   281e2:	f89d 2087 	ldrb.w	r2, [sp, #135]	@ 0x87
   281e6:	f89a 3000 	ldrb.w	r3, [sl]
   281ea:	2a00      	cmp	r2, #0
   281ec:	f47f acfc 	bne.w	27be8 <_svfprintf_r+0xb0>
   281f0:	2220      	movs	r2, #32
   281f2:	f88d 2087 	strb.w	r2, [sp, #135]	@ 0x87
   281f6:	e4f7      	b.n	27be8 <_svfprintf_r+0xb0>
   281f8:	9b04      	ldr	r3, [sp, #16]
   281fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   281fe:	9304      	str	r3, [sp, #16]
   28200:	f89a 3000 	ldrb.w	r3, [sl]
   28204:	e4f0      	b.n	27be8 <_svfprintf_r+0xb0>
   28206:	4650      	mov	r0, sl
   28208:	f810 3b01 	ldrb.w	r3, [r0], #1
   2820c:	2b2a      	cmp	r3, #42	@ 0x2a
   2820e:	f001 81e5 	beq.w	295dc <_svfprintf_r+0x1aa4>
   28212:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
   28216:	2a09      	cmp	r2, #9
   28218:	bf98      	it	ls
   2821a:	2100      	movls	r1, #0
   2821c:	f201 80e4 	bhi.w	293e8 <_svfprintf_r+0x18b0>
   28220:	f810 3b01 	ldrb.w	r3, [r0], #1
   28224:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   28228:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   2822c:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
   28230:	2a09      	cmp	r2, #9
   28232:	d9f5      	bls.n	28220 <_svfprintf_r+0x6e8>
   28234:	ea41 72e1 	orr.w	r2, r1, r1, asr #31
   28238:	9205      	str	r2, [sp, #20]
   2823a:	4682      	mov	sl, r0
   2823c:	e4d6      	b.n	27bec <_svfprintf_r+0xb4>
   2823e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
   28240:	9b04      	ldr	r3, [sp, #16]
   28242:	f043 0502 	orr.w	r5, r3, #2
   28246:	f852 3b04 	ldr.w	r3, [r2], #4
   2824a:	920b      	str	r2, [sp, #44]	@ 0x2c
   2824c:	f647 0230 	movw	r2, #30768	@ 0x7830
   28250:	f8ad 2088 	strh.w	r2, [sp, #136]	@ 0x88
   28254:	2078      	movs	r0, #120	@ 0x78
   28256:	4a9b      	ldr	r2, [pc, #620]	@ (284c4 <_svfprintf_r+0x98c>)
   28258:	9215      	str	r2, [sp, #84]	@ 0x54
   2825a:	2102      	movs	r1, #2
   2825c:	2200      	movs	r2, #0
   2825e:	900c      	str	r0, [sp, #48]	@ 0x30
   28260:	e734      	b.n	280cc <_svfprintf_r+0x594>
   28262:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   28264:	2b65      	cmp	r3, #101	@ 0x65
   28266:	f340 8133 	ble.w	284d0 <_svfprintf_r+0x998>
   2826a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
   2826e:	2200      	movs	r2, #0
   28270:	2300      	movs	r3, #0
   28272:	f7f0 feb5 	bl	18fe0 <__aeabi_dcmpeq>
   28276:	2800      	cmp	r0, #0
   28278:	f000 81d2 	beq.w	28620 <_svfprintf_r+0xae8>
   2827c:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   2827e:	4a92      	ldr	r2, [pc, #584]	@ (284c8 <_svfprintf_r+0x990>)
   28280:	6022      	str	r2, [r4, #0]
   28282:	3301      	adds	r3, #1
   28284:	3501      	adds	r5, #1
   28286:	2201      	movs	r2, #1
   28288:	2b07      	cmp	r3, #7
   2828a:	952e      	str	r5, [sp, #184]	@ 0xb8
   2828c:	932d      	str	r3, [sp, #180]	@ 0xb4
   2828e:	6062      	str	r2, [r4, #4]
   28290:	f300 855c 	bgt.w	28d4c <_svfprintf_r+0x1214>
   28294:	3408      	adds	r4, #8
   28296:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
   28298:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
   2829a:	4293      	cmp	r3, r2
   2829c:	f280 82c8 	bge.w	28830 <_svfprintf_r+0xcf8>
   282a0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
   282a2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
   282a4:	441d      	add	r5, r3
   282a6:	e9c4 2300 	strd	r2, r3, [r4]
   282aa:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   282ac:	952e      	str	r5, [sp, #184]	@ 0xb8
   282ae:	3301      	adds	r3, #1
   282b0:	2b07      	cmp	r3, #7
   282b2:	932d      	str	r3, [sp, #180]	@ 0xb4
   282b4:	f300 839e 	bgt.w	289f4 <_svfprintf_r+0xebc>
   282b8:	3408      	adds	r4, #8
   282ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   282bc:	1e5e      	subs	r6, r3, #1
   282be:	2e00      	cmp	r6, #0
   282c0:	f77f adb7 	ble.w	27e32 <_svfprintf_r+0x2fa>
   282c4:	2e10      	cmp	r6, #16
   282c6:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   282c8:	f8df 9200 	ldr.w	r9, [pc, #512]	@ 284cc <_svfprintf_r+0x994>
   282cc:	f340 80e5 	ble.w	2849a <_svfprintf_r+0x962>
   282d0:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
   282d4:	2710      	movs	r7, #16
   282d6:	e004      	b.n	282e2 <_svfprintf_r+0x7aa>
   282d8:	3408      	adds	r4, #8
   282da:	3e10      	subs	r6, #16
   282dc:	2e10      	cmp	r6, #16
   282de:	f340 80dc 	ble.w	2849a <_svfprintf_r+0x962>
   282e2:	3301      	adds	r3, #1
   282e4:	3510      	adds	r5, #16
   282e6:	2b07      	cmp	r3, #7
   282e8:	e9c4 9700 	strd	r9, r7, [r4]
   282ec:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
   282f0:	ddf2      	ble.n	282d8 <_svfprintf_r+0x7a0>
   282f2:	aa2c      	add	r2, sp, #176	@ 0xb0
   282f4:	4641      	mov	r1, r8
   282f6:	4658      	mov	r0, fp
   282f8:	f002 fe6e 	bl	2afd8 <__ssprint_r>
   282fc:	2800      	cmp	r0, #0
   282fe:	f040 80bf 	bne.w	28480 <_svfprintf_r+0x948>
   28302:	e9dd 352d 	ldrd	r3, r5, [sp, #180]	@ 0xb4
   28306:	ac2f      	add	r4, sp, #188	@ 0xbc
   28308:	e7e7      	b.n	282da <_svfprintf_r+0x7a2>
   2830a:	9d04      	ldr	r5, [sp, #16]
   2830c:	2901      	cmp	r1, #1
   2830e:	f000 8128 	beq.w	28562 <_svfprintf_r+0xa2a>
   28312:	2902      	cmp	r1, #2
   28314:	ae58      	add	r6, sp, #352	@ 0x160
   28316:	d11f      	bne.n	28358 <_svfprintf_r+0x820>
   28318:	9815      	ldr	r0, [sp, #84]	@ 0x54
   2831a:	f003 010f 	and.w	r1, r3, #15
   2831e:	091b      	lsrs	r3, r3, #4
   28320:	5c41      	ldrb	r1, [r0, r1]
   28322:	f806 1d01 	strb.w	r1, [r6, #-1]!
   28326:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   2832a:	0912      	lsrs	r2, r2, #4
   2832c:	ea53 0102 	orrs.w	r1, r3, r2
   28330:	d1f3      	bne.n	2831a <_svfprintf_r+0x7e2>
   28332:	ab58      	add	r3, sp, #352	@ 0x160
   28334:	1b9b      	subs	r3, r3, r6
   28336:	9504      	str	r5, [sp, #16]
   28338:	9308      	str	r3, [sp, #32]
   2833a:	9905      	ldr	r1, [sp, #20]
   2833c:	9808      	ldr	r0, [sp, #32]
   2833e:	f89d 2087 	ldrb.w	r2, [sp, #135]	@ 0x87
   28342:	4281      	cmp	r1, r0
   28344:	f04f 0300 	mov.w	r3, #0
   28348:	bfb8      	it	lt
   2834a:	4601      	movlt	r1, r0
   2834c:	930a      	str	r3, [sp, #40]	@ 0x28
   2834e:	9102      	str	r1, [sp, #8]
   28350:	9312      	str	r3, [sp, #72]	@ 0x48
   28352:	930f      	str	r3, [sp, #60]	@ 0x3c
   28354:	930d      	str	r3, [sp, #52]	@ 0x34
   28356:	e5ce      	b.n	27ef6 <_svfprintf_r+0x3be>
   28358:	f003 0107 	and.w	r1, r3, #7
   2835c:	08db      	lsrs	r3, r3, #3
   2835e:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   28362:	08d2      	lsrs	r2, r2, #3
   28364:	3130      	adds	r1, #48	@ 0x30
   28366:	ea53 0702 	orrs.w	r7, r3, r2
   2836a:	4630      	mov	r0, r6
   2836c:	f806 1d01 	strb.w	r1, [r6, #-1]!
   28370:	d1f2      	bne.n	28358 <_svfprintf_r+0x820>
   28372:	07ef      	lsls	r7, r5, #31
   28374:	d5dd      	bpl.n	28332 <_svfprintf_r+0x7fa>
   28376:	2930      	cmp	r1, #48	@ 0x30
   28378:	d0db      	beq.n	28332 <_svfprintf_r+0x7fa>
   2837a:	2330      	movs	r3, #48	@ 0x30
   2837c:	3802      	subs	r0, #2
   2837e:	f806 3c01 	strb.w	r3, [r6, #-1]
   28382:	ab58      	add	r3, sp, #352	@ 0x160
   28384:	1a1b      	subs	r3, r3, r0
   28386:	9504      	str	r5, [sp, #16]
   28388:	9308      	str	r3, [sp, #32]
   2838a:	4606      	mov	r6, r0
   2838c:	e7d5      	b.n	2833a <_svfprintf_r+0x802>
   2838e:	9b07      	ldr	r3, [sp, #28]
   28390:	9a02      	ldr	r2, [sp, #8]
   28392:	1a9f      	subs	r7, r3, r2
   28394:	2f00      	cmp	r7, #0
   28396:	f77f ad36 	ble.w	27e06 <_svfprintf_r+0x2ce>
   2839a:	2f10      	cmp	r7, #16
   2839c:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   2839e:	f8df 912c 	ldr.w	r9, [pc, #300]	@ 284cc <_svfprintf_r+0x994>
   283a2:	dd22      	ble.n	283ea <_svfprintf_r+0x8b2>
   283a4:	462a      	mov	r2, r5
   283a6:	f04f 0810 	mov.w	r8, #16
   283aa:	464d      	mov	r5, r9
   283ac:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
   283b0:	e004      	b.n	283bc <_svfprintf_r+0x884>
   283b2:	3f10      	subs	r7, #16
   283b4:	2f10      	cmp	r7, #16
   283b6:	f104 0408 	add.w	r4, r4, #8
   283ba:	dd14      	ble.n	283e6 <_svfprintf_r+0x8ae>
   283bc:	3301      	adds	r3, #1
   283be:	3210      	adds	r2, #16
   283c0:	2b07      	cmp	r3, #7
   283c2:	e9c4 5800 	strd	r5, r8, [r4]
   283c6:	e9cd 322d 	strd	r3, r2, [sp, #180]	@ 0xb4
   283ca:	ddf2      	ble.n	283b2 <_svfprintf_r+0x87a>
   283cc:	aa2c      	add	r2, sp, #176	@ 0xb0
   283ce:	4649      	mov	r1, r9
   283d0:	4658      	mov	r0, fp
   283d2:	f002 fe01 	bl	2afd8 <__ssprint_r>
   283d6:	2800      	cmp	r0, #0
   283d8:	d152      	bne.n	28480 <_svfprintf_r+0x948>
   283da:	3f10      	subs	r7, #16
   283dc:	2f10      	cmp	r7, #16
   283de:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	@ 0xb4
   283e2:	ac2f      	add	r4, sp, #188	@ 0xbc
   283e4:	dcea      	bgt.n	283bc <_svfprintf_r+0x884>
   283e6:	46a9      	mov	r9, r5
   283e8:	4615      	mov	r5, r2
   283ea:	3301      	adds	r3, #1
   283ec:	443d      	add	r5, r7
   283ee:	2b07      	cmp	r3, #7
   283f0:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
   283f4:	f8c4 9000 	str.w	r9, [r4]
   283f8:	6067      	str	r7, [r4, #4]
   283fa:	f300 84db 	bgt.w	28db4 <_svfprintf_r+0x127c>
   283fe:	9b05      	ldr	r3, [sp, #20]
   28400:	9a08      	ldr	r2, [sp, #32]
   28402:	1a9f      	subs	r7, r3, r2
   28404:	2f00      	cmp	r7, #0
   28406:	f104 0408 	add.w	r4, r4, #8
   2840a:	f77f ad02 	ble.w	27e12 <_svfprintf_r+0x2da>
   2840e:	2f10      	cmp	r7, #16
   28410:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   28412:	f8df 90b8 	ldr.w	r9, [pc, #184]	@ 284cc <_svfprintf_r+0x994>
   28416:	dd1f      	ble.n	28458 <_svfprintf_r+0x920>
   28418:	462a      	mov	r2, r5
   2841a:	f04f 0810 	mov.w	r8, #16
   2841e:	9d09      	ldr	r5, [sp, #36]	@ 0x24
   28420:	e004      	b.n	2842c <_svfprintf_r+0x8f4>
   28422:	3f10      	subs	r7, #16
   28424:	2f10      	cmp	r7, #16
   28426:	f104 0408 	add.w	r4, r4, #8
   2842a:	dd14      	ble.n	28456 <_svfprintf_r+0x91e>
   2842c:	3301      	adds	r3, #1
   2842e:	4927      	ldr	r1, [pc, #156]	@ (284cc <_svfprintf_r+0x994>)
   28430:	3210      	adds	r2, #16
   28432:	2b07      	cmp	r3, #7
   28434:	e9c4 1800 	strd	r1, r8, [r4]
   28438:	e9cd 322d 	strd	r3, r2, [sp, #180]	@ 0xb4
   2843c:	ddf1      	ble.n	28422 <_svfprintf_r+0x8ea>
   2843e:	aa2c      	add	r2, sp, #176	@ 0xb0
   28440:	4629      	mov	r1, r5
   28442:	4658      	mov	r0, fp
   28444:	f002 fdc8 	bl	2afd8 <__ssprint_r>
   28448:	b9d0      	cbnz	r0, 28480 <_svfprintf_r+0x948>
   2844a:	3f10      	subs	r7, #16
   2844c:	2f10      	cmp	r7, #16
   2844e:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	@ 0xb4
   28452:	ac2f      	add	r4, sp, #188	@ 0xbc
   28454:	dcea      	bgt.n	2842c <_svfprintf_r+0x8f4>
   28456:	4615      	mov	r5, r2
   28458:	3301      	adds	r3, #1
   2845a:	443d      	add	r5, r7
   2845c:	2b07      	cmp	r3, #7
   2845e:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
   28462:	f8c4 9000 	str.w	r9, [r4]
   28466:	6067      	str	r7, [r4, #4]
   28468:	f300 818c 	bgt.w	28784 <_svfprintf_r+0xc4c>
   2846c:	3408      	adds	r4, #8
   2846e:	e4d0      	b.n	27e12 <_svfprintf_r+0x2da>
   28470:	9909      	ldr	r1, [sp, #36]	@ 0x24
   28472:	aa2c      	add	r2, sp, #176	@ 0xb0
   28474:	4658      	mov	r0, fp
   28476:	f002 fdaf 	bl	2afd8 <__ssprint_r>
   2847a:	2800      	cmp	r0, #0
   2847c:	f43f aced 	beq.w	27e5a <_svfprintf_r+0x322>
   28480:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   28482:	2b00      	cmp	r3, #0
   28484:	f43f ac60 	beq.w	27d48 <_svfprintf_r+0x210>
   28488:	990a      	ldr	r1, [sp, #40]	@ 0x28
   2848a:	4658      	mov	r0, fp
   2848c:	f7fe ff4e 	bl	2732c <_free_r>
   28490:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   28492:	899b      	ldrh	r3, [r3, #12]
   28494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
   28498:	e45a      	b.n	27d50 <_svfprintf_r+0x218>
   2849a:	3301      	adds	r3, #1
   2849c:	4435      	add	r5, r6
   2849e:	2b07      	cmp	r3, #7
   284a0:	f8c4 9000 	str.w	r9, [r4]
   284a4:	6066      	str	r6, [r4, #4]
   284a6:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
   284aa:	f77f acc1 	ble.w	27e30 <_svfprintf_r+0x2f8>
   284ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
   284b0:	aa2c      	add	r2, sp, #176	@ 0xb0
   284b2:	4658      	mov	r0, fp
   284b4:	f002 fd90 	bl	2afd8 <__ssprint_r>
   284b8:	2800      	cmp	r0, #0
   284ba:	d1e1      	bne.n	28480 <_svfprintf_r+0x948>
   284bc:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   284be:	ac2f      	add	r4, sp, #188	@ 0xbc
   284c0:	e4b7      	b.n	27e32 <_svfprintf_r+0x2fa>
   284c2:	bf00      	nop
   284c4:	00043ce8 	.word	0x00043ce8
   284c8:	00043a84 	.word	0x00043a84
   284cc:	0004b6f4 	.word	0x0004b6f4
   284d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   284d2:	9f2d      	ldr	r7, [sp, #180]	@ 0xb4
   284d4:	2b01      	cmp	r3, #1
   284d6:	f105 0501 	add.w	r5, r5, #1
   284da:	f107 0701 	add.w	r7, r7, #1
   284de:	f104 0808 	add.w	r8, r4, #8
   284e2:	f340 810b 	ble.w	286fc <_svfprintf_r+0xbc4>
   284e6:	2301      	movs	r3, #1
   284e8:	2f07      	cmp	r7, #7
   284ea:	e9cd 752d 	strd	r7, r5, [sp, #180]	@ 0xb4
   284ee:	6026      	str	r6, [r4, #0]
   284f0:	6063      	str	r3, [r4, #4]
   284f2:	f300 8183 	bgt.w	287fc <_svfprintf_r+0xcc4>
   284f6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
   284f8:	9a16      	ldr	r2, [sp, #88]	@ 0x58
   284fa:	3701      	adds	r7, #1
   284fc:	441d      	add	r5, r3
   284fe:	2f07      	cmp	r7, #7
   28500:	e9c8 2300 	strd	r2, r3, [r8]
   28504:	e9cd 752d 	strd	r7, r5, [sp, #180]	@ 0xb4
   28508:	f300 8185 	bgt.w	28816 <_svfprintf_r+0xcde>
   2850c:	f108 0808 	add.w	r8, r8, #8
   28510:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   28512:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
   28516:	1e5c      	subs	r4, r3, #1
   28518:	2200      	movs	r2, #0
   2851a:	2300      	movs	r3, #0
   2851c:	f7f0 fd60 	bl	18fe0 <__aeabi_dcmpeq>
   28520:	2800      	cmp	r0, #0
   28522:	f040 8104 	bne.w	2872e <_svfprintf_r+0xbf6>
   28526:	3701      	adds	r7, #1
   28528:	3601      	adds	r6, #1
   2852a:	4425      	add	r5, r4
   2852c:	2f07      	cmp	r7, #7
   2852e:	e9cd 752d 	strd	r7, r5, [sp, #180]	@ 0xb4
   28532:	f8c8 6000 	str.w	r6, [r8]
   28536:	f8c8 4004 	str.w	r4, [r8, #4]
   2853a:	f300 80eb 	bgt.w	28714 <_svfprintf_r+0xbdc>
   2853e:	f108 0808 	add.w	r8, r8, #8
   28542:	9b18      	ldr	r3, [sp, #96]	@ 0x60
   28544:	f8c8 3004 	str.w	r3, [r8, #4]
   28548:	3701      	adds	r7, #1
   2854a:	441d      	add	r5, r3
   2854c:	2f07      	cmp	r7, #7
   2854e:	ab26      	add	r3, sp, #152	@ 0x98
   28550:	e9cd 752d 	strd	r7, r5, [sp, #180]	@ 0xb4
   28554:	f8c8 3000 	str.w	r3, [r8]
   28558:	dca9      	bgt.n	284ae <_svfprintf_r+0x976>
   2855a:	f108 0408 	add.w	r4, r8, #8
   2855e:	e468      	b.n	27e32 <_svfprintf_r+0x2fa>
   28560:	9d04      	ldr	r5, [sp, #16]
   28562:	2b0a      	cmp	r3, #10
   28564:	f172 0100 	sbcs.w	r1, r2, #0
   28568:	f080 835e 	bcs.w	28c28 <_svfprintf_r+0x10f0>
   2856c:	3330      	adds	r3, #48	@ 0x30
   2856e:	f88d 315f 	strb.w	r3, [sp, #351]	@ 0x15f
   28572:	2301      	movs	r3, #1
   28574:	9504      	str	r5, [sp, #16]
   28576:	9308      	str	r3, [sp, #32]
   28578:	f20d 165f 	addw	r6, sp, #351	@ 0x15f
   2857c:	e6dd      	b.n	2833a <_svfprintf_r+0x802>
   2857e:	9909      	ldr	r1, [sp, #36]	@ 0x24
   28580:	aa2c      	add	r2, sp, #176	@ 0xb0
   28582:	4658      	mov	r0, fp
   28584:	f002 fd28 	bl	2afd8 <__ssprint_r>
   28588:	2800      	cmp	r0, #0
   2858a:	f47f af79 	bne.w	28480 <_svfprintf_r+0x948>
   2858e:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   28590:	ac2f      	add	r4, sp, #188	@ 0xbc
   28592:	e434      	b.n	27dfe <_svfprintf_r+0x2c6>
   28594:	9909      	ldr	r1, [sp, #36]	@ 0x24
   28596:	9313      	str	r3, [sp, #76]	@ 0x4c
   28598:	aa2c      	add	r2, sp, #176	@ 0xb0
   2859a:	4658      	mov	r0, fp
   2859c:	f002 fd1c 	bl	2afd8 <__ssprint_r>
   285a0:	2800      	cmp	r0, #0
   285a2:	f47f af6d 	bne.w	28480 <_svfprintf_r+0x948>
   285a6:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   285a8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
   285aa:	ac2f      	add	r4, sp, #188	@ 0xbc
   285ac:	e418      	b.n	27de0 <_svfprintf_r+0x2a8>
   285ae:	4ab4      	ldr	r2, [pc, #720]	@ (28880 <_svfprintf_r+0xd48>)
   285b0:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   285b2:	9213      	str	r2, [sp, #76]	@ 0x4c
   285b4:	2e10      	cmp	r6, #16
   285b6:	dd1f      	ble.n	285f8 <_svfprintf_r+0xac0>
   285b8:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
   285bc:	2710      	movs	r7, #16
   285be:	4691      	mov	r9, r2
   285c0:	e004      	b.n	285cc <_svfprintf_r+0xa94>
   285c2:	3e10      	subs	r6, #16
   285c4:	2e10      	cmp	r6, #16
   285c6:	f104 0408 	add.w	r4, r4, #8
   285ca:	dd15      	ble.n	285f8 <_svfprintf_r+0xac0>
   285cc:	3301      	adds	r3, #1
   285ce:	3510      	adds	r5, #16
   285d0:	2b07      	cmp	r3, #7
   285d2:	e9c4 9700 	strd	r9, r7, [r4]
   285d6:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
   285da:	ddf2      	ble.n	285c2 <_svfprintf_r+0xa8a>
   285dc:	aa2c      	add	r2, sp, #176	@ 0xb0
   285de:	4641      	mov	r1, r8
   285e0:	4658      	mov	r0, fp
   285e2:	f002 fcf9 	bl	2afd8 <__ssprint_r>
   285e6:	2800      	cmp	r0, #0
   285e8:	f47f af4a 	bne.w	28480 <_svfprintf_r+0x948>
   285ec:	3e10      	subs	r6, #16
   285ee:	2e10      	cmp	r6, #16
   285f0:	e9dd 352d 	ldrd	r3, r5, [sp, #180]	@ 0xb4
   285f4:	ac2f      	add	r4, sp, #188	@ 0xbc
   285f6:	dce9      	bgt.n	285cc <_svfprintf_r+0xa94>
   285f8:	3301      	adds	r3, #1
   285fa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
   285fc:	4435      	add	r5, r6
   285fe:	2b07      	cmp	r3, #7
   28600:	e9c4 2600 	strd	r2, r6, [r4]
   28604:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
   28608:	f77f ac1c 	ble.w	27e44 <_svfprintf_r+0x30c>
   2860c:	9909      	ldr	r1, [sp, #36]	@ 0x24
   2860e:	aa2c      	add	r2, sp, #176	@ 0xb0
   28610:	4658      	mov	r0, fp
   28612:	f002 fce1 	bl	2afd8 <__ssprint_r>
   28616:	2800      	cmp	r0, #0
   28618:	f47f af32 	bne.w	28480 <_svfprintf_r+0x948>
   2861c:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   2861e:	e411      	b.n	27e44 <_svfprintf_r+0x30c>
   28620:	9923      	ldr	r1, [sp, #140]	@ 0x8c
   28622:	2900      	cmp	r1, #0
   28624:	f340 8351 	ble.w	28cca <_svfprintf_r+0x1192>
   28628:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
   2862c:	4293      	cmp	r3, r2
   2862e:	bfa8      	it	ge
   28630:	4613      	movge	r3, r2
   28632:	2b00      	cmp	r3, #0
   28634:	4698      	mov	r8, r3
   28636:	dd0a      	ble.n	2864e <_svfprintf_r+0xb16>
   28638:	441d      	add	r5, r3
   2863a:	e9c4 6300 	strd	r6, r3, [r4]
   2863e:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   28640:	952e      	str	r5, [sp, #184]	@ 0xb8
   28642:	3301      	adds	r3, #1
   28644:	2b07      	cmp	r3, #7
   28646:	932d      	str	r3, [sp, #180]	@ 0xb4
   28648:	f300 8661 	bgt.w	2930e <_svfprintf_r+0x17d6>
   2864c:	3408      	adds	r4, #8
   2864e:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
   28650:	f1b8 0f00 	cmp.w	r8, #0
   28654:	bfa8      	it	ge
   28656:	eba7 0708 	subge.w	r7, r7, r8
   2865a:	2f00      	cmp	r7, #0
   2865c:	f300 81f5 	bgt.w	28a4a <_svfprintf_r+0xf12>
   28660:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   28662:	4433      	add	r3, r6
   28664:	9305      	str	r3, [sp, #20]
   28666:	9b04      	ldr	r3, [sp, #16]
   28668:	055f      	lsls	r7, r3, #21
   2866a:	f100 8215 	bmi.w	28a98 <_svfprintf_r+0xf60>
   2866e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
   28670:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
   28672:	4293      	cmp	r3, r2
   28674:	f2c0 82a0 	blt.w	28bb8 <_svfprintf_r+0x1080>
   28678:	9a04      	ldr	r2, [sp, #16]
   2867a:	07d0      	lsls	r0, r2, #31
   2867c:	f100 829c 	bmi.w	28bb8 <_svfprintf_r+0x1080>
   28680:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
   28682:	18b7      	adds	r7, r6, r2
   28684:	1ad6      	subs	r6, r2, r3
   28686:	9b05      	ldr	r3, [sp, #20]
   28688:	1aff      	subs	r7, r7, r3
   2868a:	42b7      	cmp	r7, r6
   2868c:	bfa8      	it	ge
   2868e:	4637      	movge	r7, r6
   28690:	2f00      	cmp	r7, #0
   28692:	dd0a      	ble.n	286aa <_svfprintf_r+0xb72>
   28694:	6023      	str	r3, [r4, #0]
   28696:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   28698:	6067      	str	r7, [r4, #4]
   2869a:	3301      	adds	r3, #1
   2869c:	443d      	add	r5, r7
   2869e:	2b07      	cmp	r3, #7
   286a0:	952e      	str	r5, [sp, #184]	@ 0xb8
   286a2:	932d      	str	r3, [sp, #180]	@ 0xb4
   286a4:	f300 8665 	bgt.w	29372 <_svfprintf_r+0x183a>
   286a8:	3408      	adds	r4, #8
   286aa:	2f00      	cmp	r7, #0
   286ac:	bfa8      	it	ge
   286ae:	1bf6      	subge	r6, r6, r7
   286b0:	2e00      	cmp	r6, #0
   286b2:	f77f abbe 	ble.w	27e32 <_svfprintf_r+0x2fa>
   286b6:	2e10      	cmp	r6, #16
   286b8:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   286ba:	f8df 91c8 	ldr.w	r9, [pc, #456]	@ 28884 <_svfprintf_r+0xd4c>
   286be:	f77f aeec 	ble.w	2849a <_svfprintf_r+0x962>
   286c2:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
   286c6:	2710      	movs	r7, #16
   286c8:	e004      	b.n	286d4 <_svfprintf_r+0xb9c>
   286ca:	3408      	adds	r4, #8
   286cc:	3e10      	subs	r6, #16
   286ce:	2e10      	cmp	r6, #16
   286d0:	f77f aee3 	ble.w	2849a <_svfprintf_r+0x962>
   286d4:	3301      	adds	r3, #1
   286d6:	3510      	adds	r5, #16
   286d8:	2b07      	cmp	r3, #7
   286da:	e9c4 9700 	strd	r9, r7, [r4]
   286de:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
   286e2:	ddf2      	ble.n	286ca <_svfprintf_r+0xb92>
   286e4:	aa2c      	add	r2, sp, #176	@ 0xb0
   286e6:	4641      	mov	r1, r8
   286e8:	4658      	mov	r0, fp
   286ea:	f002 fc75 	bl	2afd8 <__ssprint_r>
   286ee:	2800      	cmp	r0, #0
   286f0:	f47f aec6 	bne.w	28480 <_svfprintf_r+0x948>
   286f4:	e9dd 352d 	ldrd	r3, r5, [sp, #180]	@ 0xb4
   286f8:	ac2f      	add	r4, sp, #188	@ 0xbc
   286fa:	e7e7      	b.n	286cc <_svfprintf_r+0xb94>
   286fc:	9b04      	ldr	r3, [sp, #16]
   286fe:	07d9      	lsls	r1, r3, #31
   28700:	f53f aef1 	bmi.w	284e6 <_svfprintf_r+0x9ae>
   28704:	2301      	movs	r3, #1
   28706:	2f07      	cmp	r7, #7
   28708:	e9cd 752d 	strd	r7, r5, [sp, #180]	@ 0xb4
   2870c:	6026      	str	r6, [r4, #0]
   2870e:	6063      	str	r3, [r4, #4]
   28710:	f77f af17 	ble.w	28542 <_svfprintf_r+0xa0a>
   28714:	9909      	ldr	r1, [sp, #36]	@ 0x24
   28716:	aa2c      	add	r2, sp, #176	@ 0xb0
   28718:	4658      	mov	r0, fp
   2871a:	f002 fc5d 	bl	2afd8 <__ssprint_r>
   2871e:	2800      	cmp	r0, #0
   28720:	f47f aeae 	bne.w	28480 <_svfprintf_r+0x948>
   28724:	e9dd 752d 	ldrd	r7, r5, [sp, #180]	@ 0xb4
   28728:	f10d 08bc 	add.w	r8, sp, #188	@ 0xbc
   2872c:	e709      	b.n	28542 <_svfprintf_r+0xa0a>
   2872e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   28730:	2b01      	cmp	r3, #1
   28732:	f77f af06 	ble.w	28542 <_svfprintf_r+0xa0a>
   28736:	2b11      	cmp	r3, #17
   28738:	f8df 9148 	ldr.w	r9, [pc, #328]	@ 28884 <_svfprintf_r+0xd4c>
   2873c:	f340 835c 	ble.w	28df8 <_svfprintf_r+0x12c0>
   28740:	f8cd a014 	str.w	sl, [sp, #20]
   28744:	2610      	movs	r6, #16
   28746:	46ca      	mov	sl, r9
   28748:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
   2874c:	e005      	b.n	2875a <_svfprintf_r+0xc22>
   2874e:	f108 0808 	add.w	r8, r8, #8
   28752:	3c10      	subs	r4, #16
   28754:	2c10      	cmp	r4, #16
   28756:	f340 834c 	ble.w	28df2 <_svfprintf_r+0x12ba>
   2875a:	3701      	adds	r7, #1
   2875c:	3510      	adds	r5, #16
   2875e:	2f07      	cmp	r7, #7
   28760:	e9c8 a600 	strd	sl, r6, [r8]
   28764:	e9cd 752d 	strd	r7, r5, [sp, #180]	@ 0xb4
   28768:	ddf1      	ble.n	2874e <_svfprintf_r+0xc16>
   2876a:	aa2c      	add	r2, sp, #176	@ 0xb0
   2876c:	4649      	mov	r1, r9
   2876e:	4658      	mov	r0, fp
   28770:	f002 fc32 	bl	2afd8 <__ssprint_r>
   28774:	2800      	cmp	r0, #0
   28776:	f47f ae83 	bne.w	28480 <_svfprintf_r+0x948>
   2877a:	e9dd 752d 	ldrd	r7, r5, [sp, #180]	@ 0xb4
   2877e:	f10d 08bc 	add.w	r8, sp, #188	@ 0xbc
   28782:	e7e6      	b.n	28752 <_svfprintf_r+0xc1a>
   28784:	9909      	ldr	r1, [sp, #36]	@ 0x24
   28786:	aa2c      	add	r2, sp, #176	@ 0xb0
   28788:	4658      	mov	r0, fp
   2878a:	f002 fc25 	bl	2afd8 <__ssprint_r>
   2878e:	2800      	cmp	r0, #0
   28790:	f47f ae76 	bne.w	28480 <_svfprintf_r+0x948>
   28794:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   28796:	ac2f      	add	r4, sp, #188	@ 0xbc
   28798:	f7ff bb3b 	b.w	27e12 <_svfprintf_r+0x2da>
   2879c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
   2879e:	f015 0010 	ands.w	r0, r5, #16
   287a2:	f851 3b04 	ldr.w	r3, [r1], #4
   287a6:	d10c      	bne.n	287c2 <_svfprintf_r+0xc8a>
   287a8:	f015 0640 	ands.w	r6, r5, #64	@ 0x40
   287ac:	d004      	beq.n	287b8 <_svfprintf_r+0xc80>
   287ae:	910b      	str	r1, [sp, #44]	@ 0x2c
   287b0:	b29b      	uxth	r3, r3
   287b2:	4602      	mov	r2, r0
   287b4:	2101      	movs	r1, #1
   287b6:	e489      	b.n	280cc <_svfprintf_r+0x594>
   287b8:	f415 7200 	ands.w	r2, r5, #512	@ 0x200
   287bc:	bf1c      	itt	ne
   287be:	b2db      	uxtbne	r3, r3
   287c0:	4632      	movne	r2, r6
   287c2:	910b      	str	r1, [sp, #44]	@ 0x2c
   287c4:	2101      	movs	r1, #1
   287c6:	e481      	b.n	280cc <_svfprintf_r+0x594>
   287c8:	9804      	ldr	r0, [sp, #16]
   287ca:	990b      	ldr	r1, [sp, #44]	@ 0x2c
   287cc:	f010 0010 	ands.w	r0, r0, #16
   287d0:	f851 3b04 	ldr.w	r3, [r1], #4
   287d4:	d13d      	bne.n	28852 <_svfprintf_r+0xd1a>
   287d6:	9a04      	ldr	r2, [sp, #16]
   287d8:	f012 0540 	ands.w	r5, r2, #64	@ 0x40
   287dc:	d034      	beq.n	28848 <_svfprintf_r+0xd10>
   287de:	b29b      	uxth	r3, r3
   287e0:	4602      	mov	r2, r0
   287e2:	910b      	str	r1, [sp, #44]	@ 0x2c
   287e4:	e4a4      	b.n	28130 <_svfprintf_r+0x5f8>
   287e6:	425b      	negs	r3, r3
   287e8:	9d04      	ldr	r5, [sp, #16]
   287ea:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   287ee:	202d      	movs	r0, #45	@ 0x2d
   287f0:	2101      	movs	r1, #1
   287f2:	e46c      	b.n	280ce <_svfprintf_r+0x596>
   287f4:	9b05      	ldr	r3, [sp, #20]
   287f6:	9308      	str	r3, [sp, #32]
   287f8:	ae58      	add	r6, sp, #352	@ 0x160
   287fa:	e59e      	b.n	2833a <_svfprintf_r+0x802>
   287fc:	9909      	ldr	r1, [sp, #36]	@ 0x24
   287fe:	aa2c      	add	r2, sp, #176	@ 0xb0
   28800:	4658      	mov	r0, fp
   28802:	f002 fbe9 	bl	2afd8 <__ssprint_r>
   28806:	2800      	cmp	r0, #0
   28808:	f47f ae3a 	bne.w	28480 <_svfprintf_r+0x948>
   2880c:	e9dd 752d 	ldrd	r7, r5, [sp, #180]	@ 0xb4
   28810:	f10d 08bc 	add.w	r8, sp, #188	@ 0xbc
   28814:	e66f      	b.n	284f6 <_svfprintf_r+0x9be>
   28816:	9909      	ldr	r1, [sp, #36]	@ 0x24
   28818:	aa2c      	add	r2, sp, #176	@ 0xb0
   2881a:	4658      	mov	r0, fp
   2881c:	f002 fbdc 	bl	2afd8 <__ssprint_r>
   28820:	2800      	cmp	r0, #0
   28822:	f47f ae2d 	bne.w	28480 <_svfprintf_r+0x948>
   28826:	e9dd 752d 	ldrd	r7, r5, [sp, #180]	@ 0xb4
   2882a:	f10d 08bc 	add.w	r8, sp, #188	@ 0xbc
   2882e:	e66f      	b.n	28510 <_svfprintf_r+0x9d8>
   28830:	9b04      	ldr	r3, [sp, #16]
   28832:	07db      	lsls	r3, r3, #31
   28834:	f57f aafd 	bpl.w	27e32 <_svfprintf_r+0x2fa>
   28838:	e532      	b.n	282a0 <_svfprintf_r+0x768>
   2883a:	930b      	str	r3, [sp, #44]	@ 0x2c
   2883c:	f89a 3000 	ldrb.w	r3, [sl]
   28840:	f7ff b9d2 	b.w	27be8 <_svfprintf_r+0xb0>
   28844:	ae58      	add	r6, sp, #352	@ 0x160
   28846:	e578      	b.n	2833a <_svfprintf_r+0x802>
   28848:	9a04      	ldr	r2, [sp, #16]
   2884a:	f412 7200 	ands.w	r2, r2, #512	@ 0x200
   2884e:	f040 8409 	bne.w	29064 <_svfprintf_r+0x152c>
   28852:	910b      	str	r1, [sp, #44]	@ 0x2c
   28854:	e46c      	b.n	28130 <_svfprintf_r+0x5f8>
   28856:	920b      	str	r2, [sp, #44]	@ 0x2c
   28858:	17da      	asrs	r2, r3, #31
   2885a:	4611      	mov	r1, r2
   2885c:	f7ff bbf6 	b.w	2804c <_svfprintf_r+0x514>
   28860:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
   28862:	f89a 3000 	ldrb.w	r3, [sl]
   28866:	2a00      	cmp	r2, #0
   28868:	f43f a9be 	beq.w	27be8 <_svfprintf_r+0xb0>
   2886c:	7812      	ldrb	r2, [r2, #0]
   2886e:	2a00      	cmp	r2, #0
   28870:	f43f a9ba 	beq.w	27be8 <_svfprintf_r+0xb0>
   28874:	9a04      	ldr	r2, [sp, #16]
   28876:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
   2887a:	9204      	str	r2, [sp, #16]
   2887c:	f7ff b9b4 	b.w	27be8 <_svfprintf_r+0xb0>
   28880:	0004b704 	.word	0x0004b704
   28884:	0004b6f4 	.word	0x0004b6f4
   28888:	9b04      	ldr	r3, [sp, #16]
   2888a:	06d8      	lsls	r0, r3, #27
   2888c:	f100 82ab 	bmi.w	28de6 <_svfprintf_r+0x12ae>
   28890:	9b04      	ldr	r3, [sp, #16]
   28892:	0659      	lsls	r1, r3, #25
   28894:	f100 83e0 	bmi.w	29058 <_svfprintf_r+0x1520>
   28898:	9b04      	ldr	r3, [sp, #16]
   2889a:	059a      	lsls	r2, r3, #22
   2889c:	f140 82a3 	bpl.w	28de6 <_svfprintf_r+0x12ae>
   288a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   288a2:	9a06      	ldr	r2, [sp, #24]
   288a4:	681b      	ldr	r3, [r3, #0]
   288a6:	701a      	strb	r2, [r3, #0]
   288a8:	e464      	b.n	28174 <_svfprintf_r+0x63c>
   288aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
   288ae:	4602      	mov	r2, r0
   288b0:	460b      	mov	r3, r1
   288b2:	f7f0 fbc7 	bl	19044 <__aeabi_dcmpun>
   288b6:	2800      	cmp	r0, #0
   288b8:	f040 861e 	bne.w	294f8 <_svfprintf_r+0x19c0>
   288bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   288be:	2b61      	cmp	r3, #97	@ 0x61
   288c0:	f000 8531 	beq.w	29326 <_svfprintf_r+0x17ee>
   288c4:	2b41      	cmp	r3, #65	@ 0x41
   288c6:	f000 854e 	beq.w	29366 <_svfprintf_r+0x182e>
   288ca:	9b05      	ldr	r3, [sp, #20]
   288cc:	3301      	adds	r3, #1
   288ce:	f000 8402 	beq.w	290d6 <_svfprintf_r+0x159e>
   288d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   288d4:	f023 0320 	bic.w	r3, r3, #32
   288d8:	2b47      	cmp	r3, #71	@ 0x47
   288da:	f000 85e1 	beq.w	294a0 <_svfprintf_r+0x1968>
   288de:	900a      	str	r0, [sp, #40]	@ 0x28
   288e0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
   288e4:	9a04      	ldr	r2, [sp, #16]
   288e6:	2900      	cmp	r1, #0
   288e8:	f442 7980 	orr.w	r9, r2, #256	@ 0x100
   288ec:	f2c0 84f9 	blt.w	292e2 <_svfprintf_r+0x17aa>
   288f0:	ed9d 7b10 	vldr	d7, [sp, #64]	@ 0x40
   288f4:	ed8d 7b1e 	vstr	d7, [sp, #120]	@ 0x78
   288f8:	2300      	movs	r3, #0
   288fa:	9313      	str	r3, [sp, #76]	@ 0x4c
   288fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   288fe:	3b41      	subs	r3, #65	@ 0x41
   28900:	2b25      	cmp	r3, #37	@ 0x25
   28902:	f200 8325 	bhi.w	28f50 <_svfprintf_r+0x1418>
   28906:	e8df f013 	tbh	[pc, r3, lsl #1]
   2890a:	0429      	.short	0x0429
   2890c:	03230323 	.word	0x03230323
   28910:	03ea0323 	.word	0x03ea0323
   28914:	032304b5 	.word	0x032304b5
   28918:	03230323 	.word	0x03230323
   2891c:	03230323 	.word	0x03230323
   28920:	03230323 	.word	0x03230323
   28924:	03230323 	.word	0x03230323
   28928:	03230323 	.word	0x03230323
   2892c:	03230323 	.word	0x03230323
   28930:	03230323 	.word	0x03230323
   28934:	03230323 	.word	0x03230323
   28938:	03230323 	.word	0x03230323
   2893c:	03230323 	.word	0x03230323
   28940:	03230323 	.word	0x03230323
   28944:	03230323 	.word	0x03230323
   28948:	04290323 	.word	0x04290323
   2894c:	03230323 	.word	0x03230323
   28950:	03ea0323 	.word	0x03ea0323
   28954:	04b5      	.short	0x04b5
   28956:	9d04      	ldr	r5, [sp, #16]
   28958:	930c      	str	r3, [sp, #48]	@ 0x30
   2895a:	f7ff bba9 	b.w	280b0 <_svfprintf_r+0x578>
   2895e:	930c      	str	r3, [sp, #48]	@ 0x30
   28960:	4bad      	ldr	r3, [pc, #692]	@ (28c18 <_svfprintf_r+0x10e0>)
   28962:	9315      	str	r3, [sp, #84]	@ 0x54
   28964:	9b04      	ldr	r3, [sp, #16]
   28966:	f013 0220 	ands.w	r2, r3, #32
   2896a:	f000 8133 	beq.w	28bd4 <_svfprintf_r+0x109c>
   2896e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   28970:	3307      	adds	r3, #7
   28972:	f023 0307 	bic.w	r3, r3, #7
   28976:	4619      	mov	r1, r3
   28978:	685a      	ldr	r2, [r3, #4]
   2897a:	f851 3b08 	ldr.w	r3, [r1], #8
   2897e:	910b      	str	r1, [sp, #44]	@ 0x2c
   28980:	9804      	ldr	r0, [sp, #16]
   28982:	07c1      	lsls	r1, r0, #31
   28984:	d50b      	bpl.n	2899e <_svfprintf_r+0xe66>
   28986:	ea53 0102 	orrs.w	r1, r3, r2
   2898a:	d008      	beq.n	2899e <_svfprintf_r+0xe66>
   2898c:	990c      	ldr	r1, [sp, #48]	@ 0x30
   2898e:	f88d 1089 	strb.w	r1, [sp, #137]	@ 0x89
   28992:	f040 0102 	orr.w	r1, r0, #2
   28996:	9104      	str	r1, [sp, #16]
   28998:	2130      	movs	r1, #48	@ 0x30
   2899a:	f88d 1088 	strb.w	r1, [sp, #136]	@ 0x88
   2899e:	9904      	ldr	r1, [sp, #16]
   289a0:	f421 6580 	bic.w	r5, r1, #1024	@ 0x400
   289a4:	2102      	movs	r1, #2
   289a6:	f7ff bb91 	b.w	280cc <_svfprintf_r+0x594>
   289aa:	930c      	str	r3, [sp, #48]	@ 0x30
   289ac:	f7ff bbb2 	b.w	28114 <_svfprintf_r+0x5dc>
   289b0:	930c      	str	r3, [sp, #48]	@ 0x30
   289b2:	4b9a      	ldr	r3, [pc, #616]	@ (28c1c <_svfprintf_r+0x10e4>)
   289b4:	9315      	str	r3, [sp, #84]	@ 0x54
   289b6:	e7d5      	b.n	28964 <_svfprintf_r+0xe2c>
   289b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   289ba:	681b      	ldr	r3, [r3, #0]
   289bc:	f88d 30fc 	strb.w	r3, [sp, #252]	@ 0xfc
   289c0:	2301      	movs	r3, #1
   289c2:	9302      	str	r3, [sp, #8]
   289c4:	9308      	str	r3, [sp, #32]
   289c6:	ae3f      	add	r6, sp, #252	@ 0xfc
   289c8:	f7ff baf5 	b.w	27fb6 <_svfprintf_r+0x47e>
   289cc:	9b04      	ldr	r3, [sp, #16]
   289ce:	f043 0320 	orr.w	r3, r3, #32
   289d2:	9304      	str	r3, [sp, #16]
   289d4:	f10a 0a01 	add.w	sl, sl, #1
   289d8:	f89a 3000 	ldrb.w	r3, [sl]
   289dc:	f7ff b904 	b.w	27be8 <_svfprintf_r+0xb0>
   289e0:	9b04      	ldr	r3, [sp, #16]
   289e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
   289e6:	9304      	str	r3, [sp, #16]
   289e8:	f10a 0a01 	add.w	sl, sl, #1
   289ec:	f89a 3000 	ldrb.w	r3, [sl]
   289f0:	f7ff b8fa 	b.w	27be8 <_svfprintf_r+0xb0>
   289f4:	9909      	ldr	r1, [sp, #36]	@ 0x24
   289f6:	aa2c      	add	r2, sp, #176	@ 0xb0
   289f8:	4658      	mov	r0, fp
   289fa:	f002 faed 	bl	2afd8 <__ssprint_r>
   289fe:	2800      	cmp	r0, #0
   28a00:	f47f ad3e 	bne.w	28480 <_svfprintf_r+0x948>
   28a04:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   28a06:	ac2f      	add	r4, sp, #188	@ 0xbc
   28a08:	e457      	b.n	282ba <_svfprintf_r+0x782>
   28a0a:	9b05      	ldr	r3, [sp, #20]
   28a0c:	960a      	str	r6, [sp, #40]	@ 0x28
   28a0e:	2b06      	cmp	r3, #6
   28a10:	4631      	mov	r1, r6
   28a12:	bf28      	it	cs
   28a14:	2306      	movcs	r3, #6
   28a16:	9605      	str	r6, [sp, #20]
   28a18:	4632      	mov	r2, r6
   28a1a:	9302      	str	r3, [sp, #8]
   28a1c:	4e80      	ldr	r6, [pc, #512]	@ (28c20 <_svfprintf_r+0x10e8>)
   28a1e:	970b      	str	r7, [sp, #44]	@ 0x2c
   28a20:	9308      	str	r3, [sp, #32]
   28a22:	9112      	str	r1, [sp, #72]	@ 0x48
   28a24:	910f      	str	r1, [sp, #60]	@ 0x3c
   28a26:	910d      	str	r1, [sp, #52]	@ 0x34
   28a28:	f7ff ba65 	b.w	27ef6 <_svfprintf_r+0x3be>
   28a2c:	2140      	movs	r1, #64	@ 0x40
   28a2e:	4658      	mov	r0, fp
   28a30:	f7fe fdb8 	bl	275a4 <_malloc_r>
   28a34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   28a36:	6018      	str	r0, [r3, #0]
   28a38:	6118      	str	r0, [r3, #16]
   28a3a:	2800      	cmp	r0, #0
   28a3c:	f000 8603 	beq.w	29646 <_svfprintf_r+0x1b0e>
   28a40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
   28a42:	2340      	movs	r3, #64	@ 0x40
   28a44:	6153      	str	r3, [r2, #20]
   28a46:	f7ff b893 	b.w	27b70 <_svfprintf_r+0x38>
   28a4a:	2f10      	cmp	r7, #16
   28a4c:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   28a4e:	f8df 91d4 	ldr.w	r9, [pc, #468]	@ 28c24 <_svfprintf_r+0x10ec>
   28a52:	f340 820b 	ble.w	28e6c <_svfprintf_r+0x1334>
   28a56:	4649      	mov	r1, r9
   28a58:	462a      	mov	r2, r5
   28a5a:	46b1      	mov	r9, r6
   28a5c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
   28a5e:	f04f 0810 	mov.w	r8, #16
   28a62:	460e      	mov	r6, r1
   28a64:	e004      	b.n	28a70 <_svfprintf_r+0xf38>
   28a66:	3408      	adds	r4, #8
   28a68:	3f10      	subs	r7, #16
   28a6a:	2f10      	cmp	r7, #16
   28a6c:	f340 81fa 	ble.w	28e64 <_svfprintf_r+0x132c>
   28a70:	3301      	adds	r3, #1
   28a72:	3210      	adds	r2, #16
   28a74:	2b07      	cmp	r3, #7
   28a76:	e9c4 6800 	strd	r6, r8, [r4]
   28a7a:	e9cd 322d 	strd	r3, r2, [sp, #180]	@ 0xb4
   28a7e:	ddf2      	ble.n	28a66 <_svfprintf_r+0xf2e>
   28a80:	aa2c      	add	r2, sp, #176	@ 0xb0
   28a82:	4629      	mov	r1, r5
   28a84:	4658      	mov	r0, fp
   28a86:	f002 faa7 	bl	2afd8 <__ssprint_r>
   28a8a:	2800      	cmp	r0, #0
   28a8c:	f47f acf8 	bne.w	28480 <_svfprintf_r+0x948>
   28a90:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	@ 0xb4
   28a94:	ac2f      	add	r4, sp, #188	@ 0xbc
   28a96:	e7e7      	b.n	28a68 <_svfprintf_r+0xf30>
   28a98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   28a9a:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
   28a9e:	eb06 0903 	add.w	r9, r6, r3
   28aa2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
   28aa4:	f8dd a05c 	ldr.w	sl, [sp, #92]	@ 0x5c
   28aa8:	f8dd 8048 	ldr.w	r8, [sp, #72]	@ 0x48
   28aac:	960d      	str	r6, [sp, #52]	@ 0x34
   28aae:	2b00      	cmp	r3, #0
   28ab0:	4622      	mov	r2, r4
   28ab2:	4629      	mov	r1, r5
   28ab4:	9c05      	ldr	r4, [sp, #20]
   28ab6:	9d09      	ldr	r5, [sp, #36]	@ 0x24
   28ab8:	f8cd 9014 	str.w	r9, [sp, #20]
   28abc:	f8dd 9070 	ldr.w	r9, [sp, #112]	@ 0x70
   28ac0:	dd31      	ble.n	28b26 <_svfprintf_r+0xfee>
   28ac2:	f1b8 0f00 	cmp.w	r8, #0
   28ac6:	f340 813b 	ble.w	28d40 <_svfprintf_r+0x1208>
   28aca:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
   28ace:	982d      	ldr	r0, [sp, #180]	@ 0xb4
   28ad0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
   28ad2:	3001      	adds	r0, #1
   28ad4:	4449      	add	r1, r9
   28ad6:	2807      	cmp	r0, #7
   28ad8:	e9c2 3900 	strd	r3, r9, [r2]
   28adc:	912e      	str	r1, [sp, #184]	@ 0xb8
   28ade:	902d      	str	r0, [sp, #180]	@ 0xb4
   28ae0:	f300 8087 	bgt.w	28bf2 <_svfprintf_r+0x10ba>
   28ae4:	3208      	adds	r2, #8
   28ae6:	9b05      	ldr	r3, [sp, #20]
   28ae8:	f89a 0000 	ldrb.w	r0, [sl]
   28aec:	1b1f      	subs	r7, r3, r4
   28aee:	4287      	cmp	r7, r0
   28af0:	bfa8      	it	ge
   28af2:	4607      	movge	r7, r0
   28af4:	2f00      	cmp	r7, #0
   28af6:	dd0c      	ble.n	28b12 <_svfprintf_r+0xfda>
   28af8:	982d      	ldr	r0, [sp, #180]	@ 0xb4
   28afa:	3001      	adds	r0, #1
   28afc:	4439      	add	r1, r7
   28afe:	2807      	cmp	r0, #7
   28b00:	e9c2 4700 	strd	r4, r7, [r2]
   28b04:	912e      	str	r1, [sp, #184]	@ 0xb8
   28b06:	902d      	str	r0, [sp, #180]	@ 0xb4
   28b08:	f300 8160 	bgt.w	28dcc <_svfprintf_r+0x1294>
   28b0c:	f89a 0000 	ldrb.w	r0, [sl]
   28b10:	3208      	adds	r2, #8
   28b12:	2f00      	cmp	r7, #0
   28b14:	bfac      	ite	ge
   28b16:	1bc6      	subge	r6, r0, r7
   28b18:	4606      	movlt	r6, r0
   28b1a:	2e00      	cmp	r6, #0
   28b1c:	dc16      	bgt.n	28b4c <_svfprintf_r+0x1014>
   28b1e:	4404      	add	r4, r0
   28b20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
   28b22:	2b00      	cmp	r3, #0
   28b24:	dccd      	bgt.n	28ac2 <_svfprintf_r+0xf8a>
   28b26:	f1b8 0f00 	cmp.w	r8, #0
   28b2a:	dcce      	bgt.n	28aca <_svfprintf_r+0xf92>
   28b2c:	e9dd 630d 	ldrd	r6, r3, [sp, #52]	@ 0x34
   28b30:	4620      	mov	r0, r4
   28b32:	18f3      	adds	r3, r6, r3
   28b34:	4298      	cmp	r0, r3
   28b36:	4614      	mov	r4, r2
   28b38:	4602      	mov	r2, r0
   28b3a:	bf28      	it	cs
   28b3c:	461a      	movcs	r2, r3
   28b3e:	f8cd a05c 	str.w	sl, [sp, #92]	@ 0x5c
   28b42:	460d      	mov	r5, r1
   28b44:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
   28b48:	9205      	str	r2, [sp, #20]
   28b4a:	e590      	b.n	2866e <_svfprintf_r+0xb36>
   28b4c:	2e10      	cmp	r6, #16
   28b4e:	982d      	ldr	r0, [sp, #180]	@ 0xb4
   28b50:	4b34      	ldr	r3, [pc, #208]	@ (28c24 <_svfprintf_r+0x10ec>)
   28b52:	dd23      	ble.n	28b9c <_svfprintf_r+0x1064>
   28b54:	9408      	str	r4, [sp, #32]
   28b56:	2710      	movs	r7, #16
   28b58:	4634      	mov	r4, r6
   28b5a:	461e      	mov	r6, r3
   28b5c:	e004      	b.n	28b68 <_svfprintf_r+0x1030>
   28b5e:	3c10      	subs	r4, #16
   28b60:	2c10      	cmp	r4, #16
   28b62:	f102 0208 	add.w	r2, r2, #8
   28b66:	dd16      	ble.n	28b96 <_svfprintf_r+0x105e>
   28b68:	3001      	adds	r0, #1
   28b6a:	4b2e      	ldr	r3, [pc, #184]	@ (28c24 <_svfprintf_r+0x10ec>)
   28b6c:	3110      	adds	r1, #16
   28b6e:	2807      	cmp	r0, #7
   28b70:	e9c2 3700 	strd	r3, r7, [r2]
   28b74:	e9cd 012d 	strd	r0, r1, [sp, #180]	@ 0xb4
   28b78:	ddf1      	ble.n	28b5e <_svfprintf_r+0x1026>
   28b7a:	aa2c      	add	r2, sp, #176	@ 0xb0
   28b7c:	4629      	mov	r1, r5
   28b7e:	4658      	mov	r0, fp
   28b80:	f002 fa2a 	bl	2afd8 <__ssprint_r>
   28b84:	2800      	cmp	r0, #0
   28b86:	f47f ac7b 	bne.w	28480 <_svfprintf_r+0x948>
   28b8a:	3c10      	subs	r4, #16
   28b8c:	2c10      	cmp	r4, #16
   28b8e:	e9dd 012d 	ldrd	r0, r1, [sp, #180]	@ 0xb4
   28b92:	aa2f      	add	r2, sp, #188	@ 0xbc
   28b94:	dce8      	bgt.n	28b68 <_svfprintf_r+0x1030>
   28b96:	4633      	mov	r3, r6
   28b98:	4626      	mov	r6, r4
   28b9a:	9c08      	ldr	r4, [sp, #32]
   28b9c:	6013      	str	r3, [r2, #0]
   28b9e:	3001      	adds	r0, #1
   28ba0:	4431      	add	r1, r6
   28ba2:	2807      	cmp	r0, #7
   28ba4:	e9cd 012d 	strd	r0, r1, [sp, #180]	@ 0xb4
   28ba8:	6056      	str	r6, [r2, #4]
   28baa:	f300 83a2 	bgt.w	292f2 <_svfprintf_r+0x17ba>
   28bae:	f89a 0000 	ldrb.w	r0, [sl]
   28bb2:	3208      	adds	r2, #8
   28bb4:	4404      	add	r4, r0
   28bb6:	e7b3      	b.n	28b20 <_svfprintf_r+0xfe8>
   28bb8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
   28bba:	9916      	ldr	r1, [sp, #88]	@ 0x58
   28bbc:	4415      	add	r5, r2
   28bbe:	e9c4 1200 	strd	r1, r2, [r4]
   28bc2:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
   28bc4:	952e      	str	r5, [sp, #184]	@ 0xb8
   28bc6:	3201      	adds	r2, #1
   28bc8:	2a07      	cmp	r2, #7
   28bca:	922d      	str	r2, [sp, #180]	@ 0xb4
   28bcc:	f300 83be 	bgt.w	2934c <_svfprintf_r+0x1814>
   28bd0:	3408      	adds	r4, #8
   28bd2:	e555      	b.n	28680 <_svfprintf_r+0xb48>
   28bd4:	9804      	ldr	r0, [sp, #16]
   28bd6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
   28bd8:	f010 0010 	ands.w	r0, r0, #16
   28bdc:	f851 3b04 	ldr.w	r3, [r1], #4
   28be0:	d117      	bne.n	28c12 <_svfprintf_r+0x10da>
   28be2:	9a04      	ldr	r2, [sp, #16]
   28be4:	f012 0540 	ands.w	r5, r2, #64	@ 0x40
   28be8:	d00e      	beq.n	28c08 <_svfprintf_r+0x10d0>
   28bea:	b29b      	uxth	r3, r3
   28bec:	4602      	mov	r2, r0
   28bee:	910b      	str	r1, [sp, #44]	@ 0x2c
   28bf0:	e6c6      	b.n	28980 <_svfprintf_r+0xe48>
   28bf2:	aa2c      	add	r2, sp, #176	@ 0xb0
   28bf4:	4629      	mov	r1, r5
   28bf6:	4658      	mov	r0, fp
   28bf8:	f002 f9ee 	bl	2afd8 <__ssprint_r>
   28bfc:	2800      	cmp	r0, #0
   28bfe:	f47f ac3f 	bne.w	28480 <_svfprintf_r+0x948>
   28c02:	992e      	ldr	r1, [sp, #184]	@ 0xb8
   28c04:	aa2f      	add	r2, sp, #188	@ 0xbc
   28c06:	e76e      	b.n	28ae6 <_svfprintf_r+0xfae>
   28c08:	9a04      	ldr	r2, [sp, #16]
   28c0a:	f412 7200 	ands.w	r2, r2, #512	@ 0x200
   28c0e:	f040 821f 	bne.w	29050 <_svfprintf_r+0x1518>
   28c12:	910b      	str	r1, [sp, #44]	@ 0x2c
   28c14:	e6b4      	b.n	28980 <_svfprintf_r+0xe48>
   28c16:	bf00      	nop
   28c18:	00043cd4 	.word	0x00043cd4
   28c1c:	00043ce8 	.word	0x00043ce8
   28c20:	00043cfc 	.word	0x00043cfc
   28c24:	0004b6f4 	.word	0x0004b6f4
   28c28:	2100      	movs	r1, #0
   28c2a:	9408      	str	r4, [sp, #32]
   28c2c:	f8df 931c 	ldr.w	r9, [pc, #796]	@ 28f4c <_svfprintf_r+0x1414>
   28c30:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
   28c32:	f8cd a010 	str.w	sl, [sp, #16]
   28c36:	f405 6780 	and.w	r7, r5, #1024	@ 0x400
   28c3a:	ae58      	add	r6, sp, #352	@ 0x160
   28c3c:	f04f 0805 	mov.w	r8, #5
   28c40:	9502      	str	r5, [sp, #8]
   28c42:	468c      	mov	ip, r1
   28c44:	e005      	b.n	28c52 <_svfprintf_r+0x111a>
   28c46:	2b0a      	cmp	r3, #10
   28c48:	f172 0200 	sbcs.w	r2, r2, #0
   28c4c:	d334      	bcc.n	28cb8 <_svfprintf_r+0x1180>
   28c4e:	4653      	mov	r3, sl
   28c50:	462a      	mov	r2, r5
   28c52:	1899      	adds	r1, r3, r2
   28c54:	f141 0100 	adc.w	r1, r1, #0
   28c58:	fba9 0501 	umull	r0, r5, r9, r1
   28c5c:	f025 0003 	bic.w	r0, r5, #3
   28c60:	eb00 0095 	add.w	r0, r0, r5, lsr #2
   28c64:	1a09      	subs	r1, r1, r0
   28c66:	1a58      	subs	r0, r3, r1
   28c68:	f04f 35cc 	mov.w	r5, #3435973836	@ 0xcccccccc
   28c6c:	f162 0e00 	sbc.w	lr, r2, #0
   28c70:	fb05 f500 	mul.w	r5, r5, r0
   28c74:	fba0 a009 	umull	sl, r0, r0, r9
   28c78:	fb09 550e 	mla	r5, r9, lr, r5
   28c7c:	f00a 0e01 	and.w	lr, sl, #1
   28c80:	4405      	add	r5, r0
   28c82:	fbae 0e08 	umull	r0, lr, lr, r8
   28c86:	1840      	adds	r0, r0, r1
   28c88:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
   28c8c:	3030      	adds	r0, #48	@ 0x30
   28c8e:	f806 0c01 	strb.w	r0, [r6, #-1]
   28c92:	ea4a 7ac5 	orr.w	sl, sl, r5, lsl #31
   28c96:	f10c 0c01 	add.w	ip, ip, #1
   28c9a:	3e01      	subs	r6, #1
   28c9c:	086d      	lsrs	r5, r5, #1
   28c9e:	2f00      	cmp	r7, #0
   28ca0:	d0d1      	beq.n	28c46 <_svfprintf_r+0x110e>
   28ca2:	7821      	ldrb	r1, [r4, #0]
   28ca4:	458c      	cmp	ip, r1
   28ca6:	d1ce      	bne.n	28c46 <_svfprintf_r+0x110e>
   28ca8:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
   28cac:	d0cb      	beq.n	28c46 <_svfprintf_r+0x110e>
   28cae:	2b0a      	cmp	r3, #10
   28cb0:	f172 0200 	sbcs.w	r2, r2, #0
   28cb4:	f080 80e7 	bcs.w	28e86 <_svfprintf_r+0x134e>
   28cb8:	9417      	str	r4, [sp, #92]	@ 0x5c
   28cba:	f8dd a010 	ldr.w	sl, [sp, #16]
   28cbe:	9d02      	ldr	r5, [sp, #8]
   28cc0:	9c08      	ldr	r4, [sp, #32]
   28cc2:	f8cd c038 	str.w	ip, [sp, #56]	@ 0x38
   28cc6:	f7ff bb34 	b.w	28332 <_svfprintf_r+0x7fa>
   28cca:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   28ccc:	4a9e      	ldr	r2, [pc, #632]	@ (28f48 <_svfprintf_r+0x1410>)
   28cce:	6022      	str	r2, [r4, #0]
   28cd0:	3301      	adds	r3, #1
   28cd2:	3501      	adds	r5, #1
   28cd4:	2201      	movs	r2, #1
   28cd6:	2b07      	cmp	r3, #7
   28cd8:	952e      	str	r5, [sp, #184]	@ 0xb8
   28cda:	932d      	str	r3, [sp, #180]	@ 0xb4
   28cdc:	6062      	str	r2, [r4, #4]
   28cde:	f300 811b 	bgt.w	28f18 <_svfprintf_r+0x13e0>
   28ce2:	3408      	adds	r4, #8
   28ce4:	2900      	cmp	r1, #0
   28ce6:	f040 8093 	bne.w	28e10 <_svfprintf_r+0x12d8>
   28cea:	9b04      	ldr	r3, [sp, #16]
   28cec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
   28cee:	f003 0301 	and.w	r3, r3, #1
   28cf2:	4313      	orrs	r3, r2
   28cf4:	f43f a89d 	beq.w	27e32 <_svfprintf_r+0x2fa>
   28cf8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
   28cfa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
   28cfc:	441d      	add	r5, r3
   28cfe:	e9c4 2300 	strd	r2, r3, [r4]
   28d02:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   28d04:	952e      	str	r5, [sp, #184]	@ 0xb8
   28d06:	3301      	adds	r3, #1
   28d08:	2b07      	cmp	r3, #7
   28d0a:	932d      	str	r3, [sp, #180]	@ 0xb4
   28d0c:	f300 81d6 	bgt.w	290bc <_svfprintf_r+0x1584>
   28d10:	f104 0208 	add.w	r2, r4, #8
   28d14:	e08d      	b.n	28e32 <_svfprintf_r+0x12fa>
   28d16:	9909      	ldr	r1, [sp, #36]	@ 0x24
   28d18:	9313      	str	r3, [sp, #76]	@ 0x4c
   28d1a:	aa2c      	add	r2, sp, #176	@ 0xb0
   28d1c:	4658      	mov	r0, fp
   28d1e:	f002 f95b 	bl	2afd8 <__ssprint_r>
   28d22:	2800      	cmp	r0, #0
   28d24:	f47f abac 	bne.w	28480 <_svfprintf_r+0x948>
   28d28:	f89d 2087 	ldrb.w	r2, [sp, #135]	@ 0x87
   28d2c:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   28d2e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
   28d30:	ac2f      	add	r4, sp, #188	@ 0xbc
   28d32:	f7ff b846 	b.w	27dc2 <_svfprintf_r+0x28a>
   28d36:	2901      	cmp	r1, #1
   28d38:	9d04      	ldr	r5, [sp, #16]
   28d3a:	f47f aaea 	bne.w	28312 <_svfprintf_r+0x7da>
   28d3e:	e415      	b.n	2856c <_svfprintf_r+0xa34>
   28d40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
   28d42:	3b01      	subs	r3, #1
   28d44:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
   28d48:	930f      	str	r3, [sp, #60]	@ 0x3c
   28d4a:	e6c0      	b.n	28ace <_svfprintf_r+0xf96>
   28d4c:	9909      	ldr	r1, [sp, #36]	@ 0x24
   28d4e:	aa2c      	add	r2, sp, #176	@ 0xb0
   28d50:	4658      	mov	r0, fp
   28d52:	f002 f941 	bl	2afd8 <__ssprint_r>
   28d56:	2800      	cmp	r0, #0
   28d58:	f47f ab92 	bne.w	28480 <_svfprintf_r+0x948>
   28d5c:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   28d5e:	ac2f      	add	r4, sp, #188	@ 0xbc
   28d60:	f7ff ba99 	b.w	28296 <_svfprintf_r+0x75e>
   28d64:	f10d 08a8 	add.w	r8, sp, #168	@ 0xa8
   28d68:	2208      	movs	r2, #8
   28d6a:	2100      	movs	r1, #0
   28d6c:	4640      	mov	r0, r8
   28d6e:	9625      	str	r6, [sp, #148]	@ 0x94
   28d70:	f7fe f8b4 	bl	26edc <memset>
   28d74:	9b05      	ldr	r3, [sp, #20]
   28d76:	2b00      	cmp	r3, #0
   28d78:	f2c0 8092 	blt.w	28ea0 <_svfprintf_r+0x1368>
   28d7c:	2500      	movs	r5, #0
   28d7e:	9702      	str	r7, [sp, #8]
   28d80:	4699      	mov	r9, r3
   28d82:	462f      	mov	r7, r5
   28d84:	e00e      	b.n	28da4 <_svfprintf_r+0x126c>
   28d86:	a93f      	add	r1, sp, #252	@ 0xfc
   28d88:	4658      	mov	r0, fp
   28d8a:	f7fe f9f7 	bl	2717c <_wcrtomb_r>
   28d8e:	1c43      	adds	r3, r0, #1
   28d90:	4438      	add	r0, r7
   28d92:	f000 838f 	beq.w	294b4 <_svfprintf_r+0x197c>
   28d96:	4548      	cmp	r0, r9
   28d98:	dc09      	bgt.n	28dae <_svfprintf_r+0x1276>
   28d9a:	f105 0504 	add.w	r5, r5, #4
   28d9e:	f000 83bd 	beq.w	2951c <_svfprintf_r+0x19e4>
   28da2:	4607      	mov	r7, r0
   28da4:	9a25      	ldr	r2, [sp, #148]	@ 0x94
   28da6:	5952      	ldr	r2, [r2, r5]
   28da8:	4643      	mov	r3, r8
   28daa:	2a00      	cmp	r2, #0
   28dac:	d1eb      	bne.n	28d86 <_svfprintf_r+0x124e>
   28dae:	9708      	str	r7, [sp, #32]
   28db0:	9f02      	ldr	r7, [sp, #8]
   28db2:	e083      	b.n	28ebc <_svfprintf_r+0x1384>
   28db4:	9909      	ldr	r1, [sp, #36]	@ 0x24
   28db6:	aa2c      	add	r2, sp, #176	@ 0xb0
   28db8:	4658      	mov	r0, fp
   28dba:	f002 f90d 	bl	2afd8 <__ssprint_r>
   28dbe:	2800      	cmp	r0, #0
   28dc0:	f47f ab5e 	bne.w	28480 <_svfprintf_r+0x948>
   28dc4:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   28dc6:	ac2f      	add	r4, sp, #188	@ 0xbc
   28dc8:	f7ff b81d 	b.w	27e06 <_svfprintf_r+0x2ce>
   28dcc:	aa2c      	add	r2, sp, #176	@ 0xb0
   28dce:	4629      	mov	r1, r5
   28dd0:	4658      	mov	r0, fp
   28dd2:	f002 f901 	bl	2afd8 <__ssprint_r>
   28dd6:	2800      	cmp	r0, #0
   28dd8:	f47f ab52 	bne.w	28480 <_svfprintf_r+0x948>
   28ddc:	f89a 0000 	ldrb.w	r0, [sl]
   28de0:	992e      	ldr	r1, [sp, #184]	@ 0xb8
   28de2:	aa2f      	add	r2, sp, #188	@ 0xbc
   28de4:	e695      	b.n	28b12 <_svfprintf_r+0xfda>
   28de6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   28de8:	9a06      	ldr	r2, [sp, #24]
   28dea:	681b      	ldr	r3, [r3, #0]
   28dec:	601a      	str	r2, [r3, #0]
   28dee:	f7ff b9c1 	b.w	28174 <_svfprintf_r+0x63c>
   28df2:	46d1      	mov	r9, sl
   28df4:	f8dd a014 	ldr.w	sl, [sp, #20]
   28df8:	f8c8 9000 	str.w	r9, [r8]
   28dfc:	3701      	adds	r7, #1
   28dfe:	4425      	add	r5, r4
   28e00:	2f07      	cmp	r7, #7
   28e02:	e9cd 752d 	strd	r7, r5, [sp, #180]	@ 0xb4
   28e06:	f8c8 4004 	str.w	r4, [r8, #4]
   28e0a:	f77f ab98 	ble.w	2853e <_svfprintf_r+0xa06>
   28e0e:	e481      	b.n	28714 <_svfprintf_r+0xbdc>
   28e10:	9b14      	ldr	r3, [sp, #80]	@ 0x50
   28e12:	9a16      	ldr	r2, [sp, #88]	@ 0x58
   28e14:	441d      	add	r5, r3
   28e16:	e9c4 2300 	strd	r2, r3, [r4]
   28e1a:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   28e1c:	952e      	str	r5, [sp, #184]	@ 0xb8
   28e1e:	3301      	adds	r3, #1
   28e20:	2b07      	cmp	r3, #7
   28e22:	932d      	str	r3, [sp, #180]	@ 0xb4
   28e24:	f300 814a 	bgt.w	290bc <_svfprintf_r+0x1584>
   28e28:	f104 0208 	add.w	r2, r4, #8
   28e2c:	2900      	cmp	r1, #0
   28e2e:	f2c0 82e0 	blt.w	293f2 <_svfprintf_r+0x18ba>
   28e32:	990e      	ldr	r1, [sp, #56]	@ 0x38
   28e34:	6016      	str	r6, [r2, #0]
   28e36:	3301      	adds	r3, #1
   28e38:	440d      	add	r5, r1
   28e3a:	2b07      	cmp	r3, #7
   28e3c:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
   28e40:	6051      	str	r1, [r2, #4]
   28e42:	f73f ab34 	bgt.w	284ae <_svfprintf_r+0x976>
   28e46:	f102 0408 	add.w	r4, r2, #8
   28e4a:	f7fe bff2 	b.w	27e32 <_svfprintf_r+0x2fa>
   28e4e:	9904      	ldr	r1, [sp, #16]
   28e50:	920b      	str	r2, [sp, #44]	@ 0x2c
   28e52:	058d      	lsls	r5, r1, #22
   28e54:	bf4a      	itet	mi
   28e56:	f343 12c0 	sbfxmi	r2, r3, #7, #1
   28e5a:	17da      	asrpl	r2, r3, #31
   28e5c:	b25b      	sxtbmi	r3, r3
   28e5e:	4611      	mov	r1, r2
   28e60:	f7ff b8f4 	b.w	2804c <_svfprintf_r+0x514>
   28e64:	4615      	mov	r5, r2
   28e66:	4632      	mov	r2, r6
   28e68:	464e      	mov	r6, r9
   28e6a:	4691      	mov	r9, r2
   28e6c:	3301      	adds	r3, #1
   28e6e:	443d      	add	r5, r7
   28e70:	2b07      	cmp	r3, #7
   28e72:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
   28e76:	f8c4 9000 	str.w	r9, [r4]
   28e7a:	6067      	str	r7, [r4, #4]
   28e7c:	f300 8112 	bgt.w	290a4 <_svfprintf_r+0x156c>
   28e80:	3408      	adds	r4, #8
   28e82:	f7ff bbed 	b.w	28660 <_svfprintf_r+0xb28>
   28e86:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
   28e88:	9919      	ldr	r1, [sp, #100]	@ 0x64
   28e8a:	1af6      	subs	r6, r6, r3
   28e8c:	461a      	mov	r2, r3
   28e8e:	4630      	mov	r0, r6
   28e90:	f7fe f8bc 	bl	2700c <strncpy>
   28e94:	7863      	ldrb	r3, [r4, #1]
   28e96:	b103      	cbz	r3, 28e9a <_svfprintf_r+0x1362>
   28e98:	3401      	adds	r4, #1
   28e9a:	f04f 0c00 	mov.w	ip, #0
   28e9e:	e6d6      	b.n	28c4e <_svfprintf_r+0x1116>
   28ea0:	2300      	movs	r3, #0
   28ea2:	4619      	mov	r1, r3
   28ea4:	f8cd 8000 	str.w	r8, [sp]
   28ea8:	aa25      	add	r2, sp, #148	@ 0x94
   28eaa:	4658      	mov	r0, fp
   28eac:	f7fe f98c 	bl	271c8 <_wcsrtombs_r>
   28eb0:	4603      	mov	r3, r0
   28eb2:	3301      	adds	r3, #1
   28eb4:	9008      	str	r0, [sp, #32]
   28eb6:	f000 82fd 	beq.w	294b4 <_svfprintf_r+0x197c>
   28eba:	9625      	str	r6, [sp, #148]	@ 0x94
   28ebc:	9b08      	ldr	r3, [sp, #32]
   28ebe:	2b00      	cmp	r3, #0
   28ec0:	d036      	beq.n	28f30 <_svfprintf_r+0x13f8>
   28ec2:	2b63      	cmp	r3, #99	@ 0x63
   28ec4:	f300 80e4 	bgt.w	29090 <_svfprintf_r+0x1558>
   28ec8:	2300      	movs	r3, #0
   28eca:	930a      	str	r3, [sp, #40]	@ 0x28
   28ecc:	ae3f      	add	r6, sp, #252	@ 0xfc
   28ece:	2208      	movs	r2, #8
   28ed0:	2100      	movs	r1, #0
   28ed2:	4640      	mov	r0, r8
   28ed4:	f7fe f802 	bl	26edc <memset>
   28ed8:	9d08      	ldr	r5, [sp, #32]
   28eda:	f8cd 8000 	str.w	r8, [sp]
   28ede:	462b      	mov	r3, r5
   28ee0:	aa25      	add	r2, sp, #148	@ 0x94
   28ee2:	4631      	mov	r1, r6
   28ee4:	4658      	mov	r0, fp
   28ee6:	f7fe f96f 	bl	271c8 <_wcsrtombs_r>
   28eea:	4285      	cmp	r5, r0
   28eec:	f040 83a5 	bne.w	2963a <_svfprintf_r+0x1b02>
   28ef0:	9908      	ldr	r1, [sp, #32]
   28ef2:	970b      	str	r7, [sp, #44]	@ 0x2c
   28ef4:	2300      	movs	r3, #0
   28ef6:	5473      	strb	r3, [r6, r1]
   28ef8:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   28efc:	f89d 2087 	ldrb.w	r2, [sp, #135]	@ 0x87
   28f00:	9305      	str	r3, [sp, #20]
   28f02:	9102      	str	r1, [sp, #8]
   28f04:	9312      	str	r3, [sp, #72]	@ 0x48
   28f06:	930f      	str	r3, [sp, #60]	@ 0x3c
   28f08:	930d      	str	r3, [sp, #52]	@ 0x34
   28f0a:	f7fe bff4 	b.w	27ef6 <_svfprintf_r+0x3be>
   28f0e:	222d      	movs	r2, #45	@ 0x2d
   28f10:	f88d 2087 	strb.w	r2, [sp, #135]	@ 0x87
   28f14:	f7fe bfdc 	b.w	27ed0 <_svfprintf_r+0x398>
   28f18:	9909      	ldr	r1, [sp, #36]	@ 0x24
   28f1a:	aa2c      	add	r2, sp, #176	@ 0xb0
   28f1c:	4658      	mov	r0, fp
   28f1e:	f002 f85b 	bl	2afd8 <__ssprint_r>
   28f22:	2800      	cmp	r0, #0
   28f24:	f47f aaac 	bne.w	28480 <_svfprintf_r+0x948>
   28f28:	9923      	ldr	r1, [sp, #140]	@ 0x8c
   28f2a:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   28f2c:	ac2f      	add	r4, sp, #188	@ 0xbc
   28f2e:	e6d9      	b.n	28ce4 <_svfprintf_r+0x11ac>
   28f30:	9b08      	ldr	r3, [sp, #32]
   28f32:	f89d 2087 	ldrb.w	r2, [sp, #135]	@ 0x87
   28f36:	970b      	str	r7, [sp, #44]	@ 0x2c
   28f38:	9302      	str	r3, [sp, #8]
   28f3a:	9305      	str	r3, [sp, #20]
   28f3c:	9312      	str	r3, [sp, #72]	@ 0x48
   28f3e:	930f      	str	r3, [sp, #60]	@ 0x3c
   28f40:	930d      	str	r3, [sp, #52]	@ 0x34
   28f42:	930a      	str	r3, [sp, #40]	@ 0x28
   28f44:	f7fe bfd7 	b.w	27ef6 <_svfprintf_r+0x3be>
   28f48:	00043a84 	.word	0x00043a84
   28f4c:	cccccccd 	.word	0xcccccccd
   28f50:	ab2a      	add	r3, sp, #168	@ 0xa8
   28f52:	9301      	str	r3, [sp, #4]
   28f54:	ab25      	add	r3, sp, #148	@ 0x94
   28f56:	9300      	str	r3, [sp, #0]
   28f58:	2102      	movs	r1, #2
   28f5a:	ab23      	add	r3, sp, #140	@ 0x8c
   28f5c:	ed9d 0b1e 	vldr	d0, [sp, #120]	@ 0x78
   28f60:	9a05      	ldr	r2, [sp, #20]
   28f62:	4658      	mov	r0, fp
   28f64:	f001 f8ec 	bl	2a140 <_dtoa_r>
   28f68:	9b04      	ldr	r3, [sp, #16]
   28f6a:	07d9      	lsls	r1, r3, #31
   28f6c:	4606      	mov	r6, r0
   28f6e:	f100 81fc 	bmi.w	2936a <_svfprintf_r+0x1832>
   28f72:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
   28f74:	1a1b      	subs	r3, r3, r0
   28f76:	930e      	str	r3, [sp, #56]	@ 0x38
   28f78:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
   28f7a:	930d      	str	r3, [sp, #52]	@ 0x34
   28f7c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   28f7e:	1cda      	adds	r2, r3, #3
   28f80:	db03      	blt.n	28f8a <_svfprintf_r+0x1452>
   28f82:	9a05      	ldr	r2, [sp, #20]
   28f84:	429a      	cmp	r2, r3
   28f86:	f280 818b 	bge.w	292a0 <_svfprintf_r+0x1768>
   28f8a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   28f8c:	3b02      	subs	r3, #2
   28f8e:	930c      	str	r3, [sp, #48]	@ 0x30
   28f90:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   28f92:	3b01      	subs	r3, #1
   28f94:	f89d 2030 	ldrb.w	r2, [sp, #48]	@ 0x30
   28f98:	9323      	str	r3, [sp, #140]	@ 0x8c
   28f9a:	2100      	movs	r1, #0
   28f9c:	2b00      	cmp	r3, #0
   28f9e:	bfb8      	it	lt
   28fa0:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
   28fa2:	f88d 2098 	strb.w	r2, [sp, #152]	@ 0x98
   28fa6:	bfba      	itte	lt
   28fa8:	f1c3 0301 	rsblt	r3, r3, #1
   28fac:	222d      	movlt	r2, #45	@ 0x2d
   28fae:	222b      	movge	r2, #43	@ 0x2b
   28fb0:	2b09      	cmp	r3, #9
   28fb2:	f88d 2099 	strb.w	r2, [sp, #153]	@ 0x99
   28fb6:	f340 8265 	ble.w	29484 <_svfprintf_r+0x194c>
   28fba:	f10d 05af 	add.w	r5, sp, #175	@ 0xaf
   28fbe:	4fb3      	ldr	r7, [pc, #716]	@ (2928c <_svfprintf_r+0x1754>)
   28fc0:	462a      	mov	r2, r5
   28fc2:	4610      	mov	r0, r2
   28fc4:	fba7 1203 	umull	r1, r2, r7, r3
   28fc8:	08d2      	lsrs	r2, r2, #3
   28fca:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   28fce:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
   28fd2:	3130      	adds	r1, #48	@ 0x30
   28fd4:	f800 1c01 	strb.w	r1, [r0, #-1]
   28fd8:	4619      	mov	r1, r3
   28fda:	2963      	cmp	r1, #99	@ 0x63
   28fdc:	4613      	mov	r3, r2
   28fde:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
   28fe2:	dcee      	bgt.n	28fc2 <_svfprintf_r+0x148a>
   28fe4:	3330      	adds	r3, #48	@ 0x30
   28fe6:	f802 3c01 	strb.w	r3, [r2, #-1]
   28fea:	1e83      	subs	r3, r0, #2
   28fec:	42ab      	cmp	r3, r5
   28fee:	f080 8321 	bcs.w	29634 <_svfprintf_r+0x1afc>
   28ff2:	f10d 0299 	add.w	r2, sp, #153	@ 0x99
   28ff6:	f813 1b01 	ldrb.w	r1, [r3], #1
   28ffa:	f802 1f01 	strb.w	r1, [r2, #1]!
   28ffe:	42ab      	cmp	r3, r5
   29000:	d1f9      	bne.n	28ff6 <_svfprintf_r+0x14be>
   29002:	ab58      	add	r3, sp, #352	@ 0x160
   29004:	1a18      	subs	r0, r3, r0
   29006:	f1a0 03ad 	sub.w	r3, r0, #173	@ 0xad
   2900a:	9318      	str	r3, [sp, #96]	@ 0x60
   2900c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   2900e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
   29010:	2b01      	cmp	r3, #1
   29012:	441a      	add	r2, r3
   29014:	9208      	str	r2, [sp, #32]
   29016:	f340 8258 	ble.w	294ca <_svfprintf_r+0x1992>
   2901a:	9b08      	ldr	r3, [sp, #32]
   2901c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
   2901e:	4413      	add	r3, r2
   29020:	9308      	str	r3, [sp, #32]
   29022:	9b04      	ldr	r3, [sp, #16]
   29024:	9a08      	ldr	r2, [sp, #32]
   29026:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
   2902a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   2902e:	9304      	str	r3, [sp, #16]
   29030:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   29034:	2300      	movs	r3, #0
   29036:	9312      	str	r3, [sp, #72]	@ 0x48
   29038:	9202      	str	r2, [sp, #8]
   2903a:	930f      	str	r3, [sp, #60]	@ 0x3c
   2903c:	930d      	str	r3, [sp, #52]	@ 0x34
   2903e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
   29040:	2b00      	cmp	r3, #0
   29042:	f040 811b 	bne.w	2927c <_svfprintf_r+0x1744>
   29046:	f89d 2087 	ldrb.w	r2, [sp, #135]	@ 0x87
   2904a:	9305      	str	r3, [sp, #20]
   2904c:	f7fe bf53 	b.w	27ef6 <_svfprintf_r+0x3be>
   29050:	b2db      	uxtb	r3, r3
   29052:	462a      	mov	r2, r5
   29054:	910b      	str	r1, [sp, #44]	@ 0x2c
   29056:	e493      	b.n	28980 <_svfprintf_r+0xe48>
   29058:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   2905a:	9a06      	ldr	r2, [sp, #24]
   2905c:	681b      	ldr	r3, [r3, #0]
   2905e:	801a      	strh	r2, [r3, #0]
   29060:	f7ff b888 	b.w	28174 <_svfprintf_r+0x63c>
   29064:	b2db      	uxtb	r3, r3
   29066:	462a      	mov	r2, r5
   29068:	910b      	str	r1, [sp, #44]	@ 0x2c
   2906a:	f7ff b861 	b.w	28130 <_svfprintf_r+0x5f8>
   2906e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
   29070:	aa2c      	add	r2, sp, #176	@ 0xb0
   29072:	4621      	mov	r1, r4
   29074:	4658      	mov	r0, fp
   29076:	f001 ffaf 	bl	2afd8 <__ssprint_r>
   2907a:	89a3      	ldrh	r3, [r4, #12]
   2907c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
   29080:	f7fe be66 	b.w	27d50 <_svfprintf_r+0x218>
   29084:	4630      	mov	r0, r6
   29086:	f7ef fb1b 	bl	186c0 <strlen>
   2908a:	4601      	mov	r1, r0
   2908c:	f7fe bfc0 	b.w	28010 <_svfprintf_r+0x4d8>
   29090:	1c59      	adds	r1, r3, #1
   29092:	4658      	mov	r0, fp
   29094:	f7fe fa86 	bl	275a4 <_malloc_r>
   29098:	4606      	mov	r6, r0
   2909a:	2800      	cmp	r0, #0
   2909c:	f000 82db 	beq.w	29656 <_svfprintf_r+0x1b1e>
   290a0:	900a      	str	r0, [sp, #40]	@ 0x28
   290a2:	e714      	b.n	28ece <_svfprintf_r+0x1396>
   290a4:	9909      	ldr	r1, [sp, #36]	@ 0x24
   290a6:	aa2c      	add	r2, sp, #176	@ 0xb0
   290a8:	4658      	mov	r0, fp
   290aa:	f001 ff95 	bl	2afd8 <__ssprint_r>
   290ae:	2800      	cmp	r0, #0
   290b0:	f47f a9e6 	bne.w	28480 <_svfprintf_r+0x948>
   290b4:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   290b6:	ac2f      	add	r4, sp, #188	@ 0xbc
   290b8:	f7ff bad2 	b.w	28660 <_svfprintf_r+0xb28>
   290bc:	9909      	ldr	r1, [sp, #36]	@ 0x24
   290be:	aa2c      	add	r2, sp, #176	@ 0xb0
   290c0:	4658      	mov	r0, fp
   290c2:	f001 ff89 	bl	2afd8 <__ssprint_r>
   290c6:	2800      	cmp	r0, #0
   290c8:	f47f a9da 	bne.w	28480 <_svfprintf_r+0x948>
   290cc:	e9dd 352d 	ldrd	r3, r5, [sp, #180]	@ 0xb4
   290d0:	9923      	ldr	r1, [sp, #140]	@ 0x8c
   290d2:	aa2f      	add	r2, sp, #188	@ 0xbc
   290d4:	e6aa      	b.n	28e2c <_svfprintf_r+0x12f4>
   290d6:	2306      	movs	r3, #6
   290d8:	900a      	str	r0, [sp, #40]	@ 0x28
   290da:	9305      	str	r3, [sp, #20]
   290dc:	e400      	b.n	288e0 <_svfprintf_r+0xda8>
   290de:	9b05      	ldr	r3, [sp, #20]
   290e0:	2102      	movs	r1, #2
   290e2:	f103 0801 	add.w	r8, r3, #1
   290e6:	ab2a      	add	r3, sp, #168	@ 0xa8
   290e8:	9301      	str	r3, [sp, #4]
   290ea:	ab25      	add	r3, sp, #148	@ 0x94
   290ec:	9300      	str	r3, [sp, #0]
   290ee:	ed9d 0b1e 	vldr	d0, [sp, #120]	@ 0x78
   290f2:	ab23      	add	r3, sp, #140	@ 0x8c
   290f4:	4642      	mov	r2, r8
   290f6:	4658      	mov	r0, fp
   290f8:	f001 f822 	bl	2a140 <_dtoa_r>
   290fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   290fe:	f023 0720 	bic.w	r7, r3, #32
   29102:	2f46      	cmp	r7, #70	@ 0x46
   29104:	4606      	mov	r6, r0
   29106:	eb00 0508 	add.w	r5, r0, r8
   2910a:	bf18      	it	ne
   2910c:	2745      	movne	r7, #69	@ 0x45
   2910e:	d105      	bne.n	2911c <_svfprintf_r+0x15e4>
   29110:	7833      	ldrb	r3, [r6, #0]
   29112:	2b30      	cmp	r3, #48	@ 0x30
   29114:	f000 813c 	beq.w	29390 <_svfprintf_r+0x1858>
   29118:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
   2911a:	441d      	add	r5, r3
   2911c:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	@ 0x78
   29120:	2200      	movs	r2, #0
   29122:	2300      	movs	r3, #0
   29124:	f7ef ff5c 	bl	18fe0 <__aeabi_dcmpeq>
   29128:	2800      	cmp	r0, #0
   2912a:	f040 8159 	bne.w	293e0 <_svfprintf_r+0x18a8>
   2912e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
   29130:	42ab      	cmp	r3, r5
   29132:	d206      	bcs.n	29142 <_svfprintf_r+0x160a>
   29134:	2130      	movs	r1, #48	@ 0x30
   29136:	1c5a      	adds	r2, r3, #1
   29138:	922a      	str	r2, [sp, #168]	@ 0xa8
   2913a:	7019      	strb	r1, [r3, #0]
   2913c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
   2913e:	429d      	cmp	r5, r3
   29140:	d8f9      	bhi.n	29136 <_svfprintf_r+0x15fe>
   29142:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
   29144:	920d      	str	r2, [sp, #52]	@ 0x34
   29146:	1b9b      	subs	r3, r3, r6
   29148:	2f47      	cmp	r7, #71	@ 0x47
   2914a:	930e      	str	r3, [sp, #56]	@ 0x38
   2914c:	f43f af16 	beq.w	28f7c <_svfprintf_r+0x1444>
   29150:	2f46      	cmp	r7, #70	@ 0x46
   29152:	f000 812b 	beq.w	293ac <_svfprintf_r+0x1874>
   29156:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   29158:	3b01      	subs	r3, #1
   2915a:	e71b      	b.n	28f94 <_svfprintf_r+0x145c>
   2915c:	a823      	add	r0, sp, #140	@ 0x8c
   2915e:	ed9d 0b1e 	vldr	d0, [sp, #120]	@ 0x78
   29162:	f7fc f807 	bl	25174 <frexp>
   29166:	2200      	movs	r2, #0
   29168:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
   2916c:	ec51 0b10 	vmov	r0, r1, d0
   29170:	f7ef fcce 	bl	18b10 <__aeabi_dmul>
   29174:	4602      	mov	r2, r0
   29176:	460b      	mov	r3, r1
   29178:	e9cd 2302 	strd	r2, r3, [sp, #8]
   2917c:	2200      	movs	r2, #0
   2917e:	2300      	movs	r3, #0
   29180:	f7ef ff2e 	bl	18fe0 <__aeabi_dcmpeq>
   29184:	b108      	cbz	r0, 2918a <_svfprintf_r+0x1652>
   29186:	2301      	movs	r3, #1
   29188:	9323      	str	r3, [sp, #140]	@ 0x8c
   2918a:	9b05      	ldr	r3, [sp, #20]
   2918c:	4a40      	ldr	r2, [pc, #256]	@ (29290 <_svfprintf_r+0x1758>)
   2918e:	980c      	ldr	r0, [sp, #48]	@ 0x30
   29190:	f8cd a020 	str.w	sl, [sp, #32]
   29194:	1e59      	subs	r1, r3, #1
   29196:	4b3f      	ldr	r3, [pc, #252]	@ (29294 <_svfprintf_r+0x175c>)
   29198:	960d      	str	r6, [sp, #52]	@ 0x34
   2919a:	2861      	cmp	r0, #97	@ 0x61
   2919c:	bf08      	it	eq
   2919e:	461a      	moveq	r2, r3
   291a0:	4637      	mov	r7, r6
   291a2:	46a0      	mov	r8, r4
   291a4:	9205      	str	r2, [sp, #20]
   291a6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
   291aa:	468a      	mov	sl, r1
   291ac:	4616      	mov	r6, r2
   291ae:	e009      	b.n	291c4 <_svfprintf_r+0x168c>
   291b0:	2200      	movs	r2, #0
   291b2:	2300      	movs	r3, #0
   291b4:	f10a 39ff 	add.w	r9, sl, #4294967295	@ 0xffffffff
   291b8:	f7ef ff12 	bl	18fe0 <__aeabi_dcmpeq>
   291bc:	2800      	cmp	r0, #0
   291be:	f040 81bb 	bne.w	29538 <_svfprintf_r+0x1a00>
   291c2:	46ca      	mov	sl, r9
   291c4:	4b34      	ldr	r3, [pc, #208]	@ (29298 <_svfprintf_r+0x1760>)
   291c6:	2200      	movs	r2, #0
   291c8:	4620      	mov	r0, r4
   291ca:	4629      	mov	r1, r5
   291cc:	f7ef fca0 	bl	18b10 <__aeabi_dmul>
   291d0:	460d      	mov	r5, r1
   291d2:	4604      	mov	r4, r0
   291d4:	f7ef ff4c 	bl	19070 <__aeabi_d2iz>
   291d8:	4681      	mov	r9, r0
   291da:	f7ef fc2f 	bl	18a3c <__aeabi_i2d>
   291de:	4602      	mov	r2, r0
   291e0:	460b      	mov	r3, r1
   291e2:	4620      	mov	r0, r4
   291e4:	4629      	mov	r1, r5
   291e6:	f7ef fadb 	bl	187a0 <__aeabi_dsub>
   291ea:	f816 3009 	ldrb.w	r3, [r6, r9]
   291ee:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
   291f2:	463a      	mov	r2, r7
   291f4:	4604      	mov	r4, r0
   291f6:	f807 3b01 	strb.w	r3, [r7], #1
   291fa:	460d      	mov	r5, r1
   291fc:	d1d8      	bne.n	291b0 <_svfprintf_r+0x1678>
   291fe:	e9cd 4502 	strd	r4, r5, [sp, #8]
   29202:	4b26      	ldr	r3, [pc, #152]	@ (2929c <_svfprintf_r+0x1764>)
   29204:	f8dd a020 	ldr.w	sl, [sp, #32]
   29208:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
   2920a:	4644      	mov	r4, r8
   2920c:	4690      	mov	r8, r2
   2920e:	2200      	movs	r2, #0
   29210:	464d      	mov	r5, r9
   29212:	f7ef ff0d 	bl	19030 <__aeabi_dcmpgt>
   29216:	2800      	cmp	r0, #0
   29218:	f000 81ff 	beq.w	2961a <_svfprintf_r+0x1ae2>
   2921c:	9b05      	ldr	r3, [sp, #20]
   2921e:	f8cd 80a8 	str.w	r8, [sp, #168]	@ 0xa8
   29222:	7bd9      	ldrb	r1, [r3, #15]
   29224:	f817 2c01 	ldrb.w	r2, [r7, #-1]
   29228:	4291      	cmp	r1, r2
   2922a:	463b      	mov	r3, r7
   2922c:	d109      	bne.n	29242 <_svfprintf_r+0x170a>
   2922e:	2030      	movs	r0, #48	@ 0x30
   29230:	f803 0c01 	strb.w	r0, [r3, #-1]
   29234:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
   29236:	1e5a      	subs	r2, r3, #1
   29238:	922a      	str	r2, [sp, #168]	@ 0xa8
   2923a:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   2923e:	4291      	cmp	r1, r2
   29240:	d0f6      	beq.n	29230 <_svfprintf_r+0x16f8>
   29242:	2a39      	cmp	r2, #57	@ 0x39
   29244:	bf0b      	itete	eq
   29246:	9a05      	ldreq	r2, [sp, #20]
   29248:	3201      	addne	r2, #1
   2924a:	7a92      	ldrbeq	r2, [r2, #10]
   2924c:	b2d2      	uxtbne	r2, r2
   2924e:	f803 2c01 	strb.w	r2, [r3, #-1]
   29252:	463b      	mov	r3, r7
   29254:	1b9b      	subs	r3, r3, r6
   29256:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
   29258:	930e      	str	r3, [sp, #56]	@ 0x38
   2925a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
   2925c:	930d      	str	r3, [sp, #52]	@ 0x34
   2925e:	2a61      	cmp	r2, #97	@ 0x61
   29260:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
   29264:	9323      	str	r3, [sp, #140]	@ 0x8c
   29266:	f000 81b3 	beq.w	295d0 <_svfprintf_r+0x1a98>
   2926a:	2141      	movs	r1, #65	@ 0x41
   2926c:	2250      	movs	r2, #80	@ 0x50
   2926e:	910c      	str	r1, [sp, #48]	@ 0x30
   29270:	2101      	movs	r1, #1
   29272:	e693      	b.n	28f9c <_svfprintf_r+0x1464>
   29274:	f8dd 8014 	ldr.w	r8, [sp, #20]
   29278:	2103      	movs	r1, #3
   2927a:	e734      	b.n	290e6 <_svfprintf_r+0x15ae>
   2927c:	222d      	movs	r2, #45	@ 0x2d
   2927e:	2300      	movs	r3, #0
   29280:	f88d 2087 	strb.w	r2, [sp, #135]	@ 0x87
   29284:	9305      	str	r3, [sp, #20]
   29286:	f7fe be39 	b.w	27efc <_svfprintf_r+0x3c4>
   2928a:	bf00      	nop
   2928c:	cccccccd 	.word	0xcccccccd
   29290:	00043cd4 	.word	0x00043cd4
   29294:	00043ce8 	.word	0x00043ce8
   29298:	40300000 	.word	0x40300000
   2929c:	3fe00000 	.word	0x3fe00000
   292a0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	@ 0x34
   292a4:	4293      	cmp	r3, r2
   292a6:	f300 80c4 	bgt.w	29432 <_svfprintf_r+0x18fa>
   292aa:	9b04      	ldr	r3, [sp, #16]
   292ac:	f013 0f01 	tst.w	r3, #1
   292b0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   292b2:	f000 810f 	beq.w	294d4 <_svfprintf_r+0x199c>
   292b6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
   292b8:	4413      	add	r3, r2
   292ba:	9308      	str	r3, [sp, #32]
   292bc:	9b04      	ldr	r3, [sp, #16]
   292be:	055f      	lsls	r7, r3, #21
   292c0:	d503      	bpl.n	292ca <_svfprintf_r+0x1792>
   292c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   292c4:	2b00      	cmp	r3, #0
   292c6:	f300 8147 	bgt.w	29558 <_svfprintf_r+0x1a20>
   292ca:	9b08      	ldr	r3, [sp, #32]
   292cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   292d0:	9302      	str	r3, [sp, #8]
   292d2:	2367      	movs	r3, #103	@ 0x67
   292d4:	930c      	str	r3, [sp, #48]	@ 0x30
   292d6:	2300      	movs	r3, #0
   292d8:	f8cd 9010 	str.w	r9, [sp, #16]
   292dc:	9312      	str	r3, [sp, #72]	@ 0x48
   292de:	930f      	str	r3, [sp, #60]	@ 0x3c
   292e0:	e6ad      	b.n	2903e <_svfprintf_r+0x1506>
   292e2:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
   292e6:	931f      	str	r3, [sp, #124]	@ 0x7c
   292e8:	232d      	movs	r3, #45	@ 0x2d
   292ea:	901e      	str	r0, [sp, #120]	@ 0x78
   292ec:	9313      	str	r3, [sp, #76]	@ 0x4c
   292ee:	f7ff bb05 	b.w	288fc <_svfprintf_r+0xdc4>
   292f2:	aa2c      	add	r2, sp, #176	@ 0xb0
   292f4:	4629      	mov	r1, r5
   292f6:	4658      	mov	r0, fp
   292f8:	f001 fe6e 	bl	2afd8 <__ssprint_r>
   292fc:	2800      	cmp	r0, #0
   292fe:	f47f a8bf 	bne.w	28480 <_svfprintf_r+0x948>
   29302:	f89a 0000 	ldrb.w	r0, [sl]
   29306:	992e      	ldr	r1, [sp, #184]	@ 0xb8
   29308:	aa2f      	add	r2, sp, #188	@ 0xbc
   2930a:	4404      	add	r4, r0
   2930c:	e408      	b.n	28b20 <_svfprintf_r+0xfe8>
   2930e:	9909      	ldr	r1, [sp, #36]	@ 0x24
   29310:	aa2c      	add	r2, sp, #176	@ 0xb0
   29312:	4658      	mov	r0, fp
   29314:	f001 fe60 	bl	2afd8 <__ssprint_r>
   29318:	2800      	cmp	r0, #0
   2931a:	f47f a8b1 	bne.w	28480 <_svfprintf_r+0x948>
   2931e:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   29320:	ac2f      	add	r4, sp, #188	@ 0xbc
   29322:	f7ff b994 	b.w	2864e <_svfprintf_r+0xb16>
   29326:	2378      	movs	r3, #120	@ 0x78
   29328:	f88d 3089 	strb.w	r3, [sp, #137]	@ 0x89
   2932c:	9b04      	ldr	r3, [sp, #16]
   2932e:	f043 0302 	orr.w	r3, r3, #2
   29332:	9304      	str	r3, [sp, #16]
   29334:	2330      	movs	r3, #48	@ 0x30
   29336:	f88d 3088 	strb.w	r3, [sp, #136]	@ 0x88
   2933a:	9b05      	ldr	r3, [sp, #20]
   2933c:	2b63      	cmp	r3, #99	@ 0x63
   2933e:	f300 808e 	bgt.w	2945e <_svfprintf_r+0x1926>
   29342:	2300      	movs	r3, #0
   29344:	930a      	str	r3, [sp, #40]	@ 0x28
   29346:	ae3f      	add	r6, sp, #252	@ 0xfc
   29348:	f7ff baca 	b.w	288e0 <_svfprintf_r+0xda8>
   2934c:	9909      	ldr	r1, [sp, #36]	@ 0x24
   2934e:	aa2c      	add	r2, sp, #176	@ 0xb0
   29350:	4658      	mov	r0, fp
   29352:	f001 fe41 	bl	2afd8 <__ssprint_r>
   29356:	2800      	cmp	r0, #0
   29358:	f47f a892 	bne.w	28480 <_svfprintf_r+0x948>
   2935c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
   2935e:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   29360:	ac2f      	add	r4, sp, #188	@ 0xbc
   29362:	f7ff b98d 	b.w	28680 <_svfprintf_r+0xb48>
   29366:	2358      	movs	r3, #88	@ 0x58
   29368:	e7de      	b.n	29328 <_svfprintf_r+0x17f0>
   2936a:	9b05      	ldr	r3, [sp, #20]
   2936c:	2747      	movs	r7, #71	@ 0x47
   2936e:	18c5      	adds	r5, r0, r3
   29370:	e6d4      	b.n	2911c <_svfprintf_r+0x15e4>
   29372:	9909      	ldr	r1, [sp, #36]	@ 0x24
   29374:	aa2c      	add	r2, sp, #176	@ 0xb0
   29376:	4658      	mov	r0, fp
   29378:	f001 fe2e 	bl	2afd8 <__ssprint_r>
   2937c:	2800      	cmp	r0, #0
   2937e:	f47f a87f 	bne.w	28480 <_svfprintf_r+0x948>
   29382:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
   29384:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   29386:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   29388:	1b9e      	subs	r6, r3, r6
   2938a:	ac2f      	add	r4, sp, #188	@ 0xbc
   2938c:	f7ff b98d 	b.w	286aa <_svfprintf_r+0xb72>
   29390:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	@ 0x78
   29394:	2200      	movs	r2, #0
   29396:	2300      	movs	r3, #0
   29398:	f7ef fe22 	bl	18fe0 <__aeabi_dcmpeq>
   2939c:	2800      	cmp	r0, #0
   2939e:	f000 8119 	beq.w	295d4 <_svfprintf_r+0x1a9c>
   293a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
   293a4:	930d      	str	r3, [sp, #52]	@ 0x34
   293a6:	441d      	add	r5, r3
   293a8:	1bab      	subs	r3, r5, r6
   293aa:	930e      	str	r3, [sp, #56]	@ 0x38
   293ac:	9b04      	ldr	r3, [sp, #16]
   293ae:	990d      	ldr	r1, [sp, #52]	@ 0x34
   293b0:	9a05      	ldr	r2, [sp, #20]
   293b2:	f003 0301 	and.w	r3, r3, #1
   293b6:	2900      	cmp	r1, #0
   293b8:	ea43 0302 	orr.w	r3, r3, r2
   293bc:	f340 811a 	ble.w	295f4 <_svfprintf_r+0x1abc>
   293c0:	2b00      	cmp	r3, #0
   293c2:	f040 80f2 	bne.w	295aa <_svfprintf_r+0x1a72>
   293c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   293c8:	9308      	str	r3, [sp, #32]
   293ca:	2366      	movs	r3, #102	@ 0x66
   293cc:	930c      	str	r3, [sp, #48]	@ 0x30
   293ce:	9b04      	ldr	r3, [sp, #16]
   293d0:	055b      	lsls	r3, r3, #21
   293d2:	f100 80c3 	bmi.w	2955c <_svfprintf_r+0x1a24>
   293d6:	9b08      	ldr	r3, [sp, #32]
   293d8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   293dc:	9302      	str	r3, [sp, #8]
   293de:	e77a      	b.n	292d6 <_svfprintf_r+0x179e>
   293e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
   293e2:	920d      	str	r2, [sp, #52]	@ 0x34
   293e4:	462b      	mov	r3, r5
   293e6:	e6ae      	b.n	29146 <_svfprintf_r+0x160e>
   293e8:	2200      	movs	r2, #0
   293ea:	4682      	mov	sl, r0
   293ec:	9205      	str	r2, [sp, #20]
   293ee:	f7fe bbfd 	b.w	27bec <_svfprintf_r+0xb4>
   293f2:	424f      	negs	r7, r1
   293f4:	3110      	adds	r1, #16
   293f6:	f8df 9278 	ldr.w	r9, [pc, #632]	@ 29670 <_svfprintf_r+0x1b38>
   293fa:	bfb8      	it	lt
   293fc:	2410      	movlt	r4, #16
   293fe:	db04      	blt.n	2940a <_svfprintf_r+0x18d2>
   29400:	e021      	b.n	29446 <_svfprintf_r+0x190e>
   29402:	3208      	adds	r2, #8
   29404:	3f10      	subs	r7, #16
   29406:	2f10      	cmp	r7, #16
   29408:	dd1d      	ble.n	29446 <_svfprintf_r+0x190e>
   2940a:	3301      	adds	r3, #1
   2940c:	3510      	adds	r5, #16
   2940e:	2b07      	cmp	r3, #7
   29410:	e9c2 9400 	strd	r9, r4, [r2]
   29414:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
   29418:	ddf3      	ble.n	29402 <_svfprintf_r+0x18ca>
   2941a:	9909      	ldr	r1, [sp, #36]	@ 0x24
   2941c:	aa2c      	add	r2, sp, #176	@ 0xb0
   2941e:	4658      	mov	r0, fp
   29420:	f001 fdda 	bl	2afd8 <__ssprint_r>
   29424:	2800      	cmp	r0, #0
   29426:	f47f a82b 	bne.w	28480 <_svfprintf_r+0x948>
   2942a:	e9dd 352d 	ldrd	r3, r5, [sp, #180]	@ 0xb4
   2942e:	aa2f      	add	r2, sp, #188	@ 0xbc
   29430:	e7e8      	b.n	29404 <_svfprintf_r+0x18cc>
   29432:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   29434:	9a14      	ldr	r2, [sp, #80]	@ 0x50
   29436:	189a      	adds	r2, r3, r2
   29438:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   2943a:	9208      	str	r2, [sp, #32]
   2943c:	2b00      	cmp	r3, #0
   2943e:	dd71      	ble.n	29524 <_svfprintf_r+0x19ec>
   29440:	2367      	movs	r3, #103	@ 0x67
   29442:	930c      	str	r3, [sp, #48]	@ 0x30
   29444:	e7c3      	b.n	293ce <_svfprintf_r+0x1896>
   29446:	3301      	adds	r3, #1
   29448:	443d      	add	r5, r7
   2944a:	2b07      	cmp	r3, #7
   2944c:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
   29450:	f8c2 9000 	str.w	r9, [r2]
   29454:	6057      	str	r7, [r2, #4]
   29456:	f300 80af 	bgt.w	295b8 <_svfprintf_r+0x1a80>
   2945a:	3208      	adds	r2, #8
   2945c:	e4e9      	b.n	28e32 <_svfprintf_r+0x12fa>
   2945e:	1c59      	adds	r1, r3, #1
   29460:	4658      	mov	r0, fp
   29462:	f7fe f89f 	bl	275a4 <_malloc_r>
   29466:	4606      	mov	r6, r0
   29468:	b110      	cbz	r0, 29470 <_svfprintf_r+0x1938>
   2946a:	900a      	str	r0, [sp, #40]	@ 0x28
   2946c:	f7ff ba38 	b.w	288e0 <_svfprintf_r+0xda8>
   29470:	9a09      	ldr	r2, [sp, #36]	@ 0x24
   29472:	8993      	ldrh	r3, [r2, #12]
   29474:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   29478:	8193      	strh	r3, [r2, #12]
   2947a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
   2947e:	9306      	str	r3, [sp, #24]
   29480:	f7fe bc69 	b.w	27d56 <_svfprintf_r+0x21e>
   29484:	2900      	cmp	r1, #0
   29486:	d134      	bne.n	294f2 <_svfprintf_r+0x19ba>
   29488:	2230      	movs	r2, #48	@ 0x30
   2948a:	f88d 209a 	strb.w	r2, [sp, #154]	@ 0x9a
   2948e:	f10d 029b 	add.w	r2, sp, #155	@ 0x9b
   29492:	3330      	adds	r3, #48	@ 0x30
   29494:	f802 3b01 	strb.w	r3, [r2], #1
   29498:	ab26      	add	r3, sp, #152	@ 0x98
   2949a:	1ad3      	subs	r3, r2, r3
   2949c:	9318      	str	r3, [sp, #96]	@ 0x60
   2949e:	e5b5      	b.n	2900c <_svfprintf_r+0x14d4>
   294a0:	9b05      	ldr	r3, [sp, #20]
   294a2:	2b00      	cmp	r3, #0
   294a4:	f47f aa1b 	bne.w	288de <_svfprintf_r+0xda6>
   294a8:	9b05      	ldr	r3, [sp, #20]
   294aa:	930a      	str	r3, [sp, #40]	@ 0x28
   294ac:	2301      	movs	r3, #1
   294ae:	9305      	str	r3, [sp, #20]
   294b0:	f7ff ba16 	b.w	288e0 <_svfprintf_r+0xda8>
   294b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   294b6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   294ba:	2200      	movs	r2, #0
   294bc:	920a      	str	r2, [sp, #40]	@ 0x28
   294be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   294c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
   294c4:	8193      	strh	r3, [r2, #12]
   294c6:	f7fe bfdb 	b.w	28480 <_svfprintf_r+0x948>
   294ca:	9b04      	ldr	r3, [sp, #16]
   294cc:	07db      	lsls	r3, r3, #31
   294ce:	f57f ada8 	bpl.w	29022 <_svfprintf_r+0x14ea>
   294d2:	e5a2      	b.n	2901a <_svfprintf_r+0x14e2>
   294d4:	9308      	str	r3, [sp, #32]
   294d6:	e6f1      	b.n	292bc <_svfprintf_r+0x1784>
   294d8:	9b05      	ldr	r3, [sp, #20]
   294da:	9302      	str	r3, [sp, #8]
   294dc:	9308      	str	r3, [sp, #32]
   294de:	2373      	movs	r3, #115	@ 0x73
   294e0:	f89d 2087 	ldrb.w	r2, [sp, #135]	@ 0x87
   294e4:	970b      	str	r7, [sp, #44]	@ 0x2c
   294e6:	9005      	str	r0, [sp, #20]
   294e8:	9012      	str	r0, [sp, #72]	@ 0x48
   294ea:	900f      	str	r0, [sp, #60]	@ 0x3c
   294ec:	930c      	str	r3, [sp, #48]	@ 0x30
   294ee:	f7fe bd02 	b.w	27ef6 <_svfprintf_r+0x3be>
   294f2:	f10d 029a 	add.w	r2, sp, #154	@ 0x9a
   294f6:	e7cc      	b.n	29492 <_svfprintf_r+0x195a>
   294f8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
   294fa:	4e5a      	ldr	r6, [pc, #360]	@ (29664 <_svfprintf_r+0x1b2c>)
   294fc:	2b00      	cmp	r3, #0
   294fe:	9b04      	ldr	r3, [sp, #16]
   29500:	bfa8      	it	ge
   29502:	f89d 2087 	ldrbge.w	r2, [sp, #135]	@ 0x87
   29506:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   2950a:	bfb8      	it	lt
   2950c:	222d      	movlt	r2, #45	@ 0x2d
   2950e:	9304      	str	r3, [sp, #16]
   29510:	bfb8      	it	lt
   29512:	f88d 2087 	strblt.w	r2, [sp, #135]	@ 0x87
   29516:	4b54      	ldr	r3, [pc, #336]	@ (29668 <_svfprintf_r+0x1b30>)
   29518:	f7fe bce0 	b.w	27edc <_svfprintf_r+0x3a4>
   2951c:	9b05      	ldr	r3, [sp, #20]
   2951e:	9f02      	ldr	r7, [sp, #8]
   29520:	9308      	str	r3, [sp, #32]
   29522:	e4cb      	b.n	28ebc <_svfprintf_r+0x1384>
   29524:	f1c3 0301 	rsb	r3, r3, #1
   29528:	441a      	add	r2, r3
   2952a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   2952e:	9302      	str	r3, [sp, #8]
   29530:	2367      	movs	r3, #103	@ 0x67
   29532:	9208      	str	r2, [sp, #32]
   29534:	930c      	str	r3, [sp, #48]	@ 0x30
   29536:	e6ce      	b.n	292d6 <_svfprintf_r+0x179e>
   29538:	4651      	mov	r1, sl
   2953a:	2900      	cmp	r1, #0
   2953c:	f8dd a020 	ldr.w	sl, [sp, #32]
   29540:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
   29542:	4644      	mov	r4, r8
   29544:	f6ff ae85 	blt.w	29252 <_svfprintf_r+0x171a>
   29548:	1c4b      	adds	r3, r1, #1
   2954a:	443b      	add	r3, r7
   2954c:	2230      	movs	r2, #48	@ 0x30
   2954e:	f807 2b01 	strb.w	r2, [r7], #1
   29552:	429f      	cmp	r7, r3
   29554:	d1fb      	bne.n	2954e <_svfprintf_r+0x1a16>
   29556:	e67d      	b.n	29254 <_svfprintf_r+0x171c>
   29558:	2367      	movs	r3, #103	@ 0x67
   2955a:	930c      	str	r3, [sp, #48]	@ 0x30
   2955c:	9917      	ldr	r1, [sp, #92]	@ 0x5c
   2955e:	780b      	ldrb	r3, [r1, #0]
   29560:	2bff      	cmp	r3, #255	@ 0xff
   29562:	d074      	beq.n	2964e <_svfprintf_r+0x1b16>
   29564:	2500      	movs	r5, #0
   29566:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
   29568:	4628      	mov	r0, r5
   2956a:	e003      	b.n	29574 <_svfprintf_r+0x1a3c>
   2956c:	3001      	adds	r0, #1
   2956e:	3101      	adds	r1, #1
   29570:	2bff      	cmp	r3, #255	@ 0xff
   29572:	d008      	beq.n	29586 <_svfprintf_r+0x1a4e>
   29574:	4293      	cmp	r3, r2
   29576:	da06      	bge.n	29586 <_svfprintf_r+0x1a4e>
   29578:	1ad2      	subs	r2, r2, r3
   2957a:	784b      	ldrb	r3, [r1, #1]
   2957c:	2b00      	cmp	r3, #0
   2957e:	d1f5      	bne.n	2956c <_svfprintf_r+0x1a34>
   29580:	780b      	ldrb	r3, [r1, #0]
   29582:	3501      	adds	r5, #1
   29584:	e7f4      	b.n	29570 <_svfprintf_r+0x1a38>
   29586:	9117      	str	r1, [sp, #92]	@ 0x5c
   29588:	920d      	str	r2, [sp, #52]	@ 0x34
   2958a:	900f      	str	r0, [sp, #60]	@ 0x3c
   2958c:	9512      	str	r5, [sp, #72]	@ 0x48
   2958e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
   29590:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
   29592:	991c      	ldr	r1, [sp, #112]	@ 0x70
   29594:	f8cd 9010 	str.w	r9, [sp, #16]
   29598:	4413      	add	r3, r2
   2959a:	9a08      	ldr	r2, [sp, #32]
   2959c:	fb01 2303 	mla	r3, r1, r3, r2
   295a0:	9308      	str	r3, [sp, #32]
   295a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   295a6:	9302      	str	r3, [sp, #8]
   295a8:	e549      	b.n	2903e <_svfprintf_r+0x1506>
   295aa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
   295ac:	441a      	add	r2, r3
   295ae:	1853      	adds	r3, r2, r1
   295b0:	9308      	str	r3, [sp, #32]
   295b2:	2366      	movs	r3, #102	@ 0x66
   295b4:	930c      	str	r3, [sp, #48]	@ 0x30
   295b6:	e70a      	b.n	293ce <_svfprintf_r+0x1896>
   295b8:	9909      	ldr	r1, [sp, #36]	@ 0x24
   295ba:	aa2c      	add	r2, sp, #176	@ 0xb0
   295bc:	4658      	mov	r0, fp
   295be:	f001 fd0b 	bl	2afd8 <__ssprint_r>
   295c2:	2800      	cmp	r0, #0
   295c4:	f47e af5c 	bne.w	28480 <_svfprintf_r+0x948>
   295c8:	e9dd 352d 	ldrd	r3, r5, [sp, #180]	@ 0xb4
   295cc:	aa2f      	add	r2, sp, #188	@ 0xbc
   295ce:	e430      	b.n	28e32 <_svfprintf_r+0x12fa>
   295d0:	2270      	movs	r2, #112	@ 0x70
   295d2:	e64d      	b.n	29270 <_svfprintf_r+0x1738>
   295d4:	f1c8 0301 	rsb	r3, r8, #1
   295d8:	9323      	str	r3, [sp, #140]	@ 0x8c
   295da:	e59e      	b.n	2911a <_svfprintf_r+0x15e2>
   295dc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
   295de:	f89a 3001 	ldrb.w	r3, [sl, #1]
   295e2:	f852 1b04 	ldr.w	r1, [r2], #4
   295e6:	920b      	str	r2, [sp, #44]	@ 0x2c
   295e8:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
   295ec:	4682      	mov	sl, r0
   295ee:	9105      	str	r1, [sp, #20]
   295f0:	f7fe bafa 	b.w	27be8 <_svfprintf_r+0xb0>
   295f4:	b92b      	cbnz	r3, 29602 <_svfprintf_r+0x1aca>
   295f6:	2301      	movs	r3, #1
   295f8:	2266      	movs	r2, #102	@ 0x66
   295fa:	9302      	str	r3, [sp, #8]
   295fc:	920c      	str	r2, [sp, #48]	@ 0x30
   295fe:	9308      	str	r3, [sp, #32]
   29600:	e669      	b.n	292d6 <_svfprintf_r+0x179e>
   29602:	9b14      	ldr	r3, [sp, #80]	@ 0x50
   29604:	f103 0801 	add.w	r8, r3, #1
   29608:	9b05      	ldr	r3, [sp, #20]
   2960a:	4443      	add	r3, r8
   2960c:	9308      	str	r3, [sp, #32]
   2960e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   29612:	9302      	str	r3, [sp, #8]
   29614:	2366      	movs	r3, #102	@ 0x66
   29616:	930c      	str	r3, [sp, #48]	@ 0x30
   29618:	e65d      	b.n	292d6 <_svfprintf_r+0x179e>
   2961a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   2961e:	4b13      	ldr	r3, [pc, #76]	@ (2966c <_svfprintf_r+0x1b34>)
   29620:	2200      	movs	r2, #0
   29622:	f7ef fcdd 	bl	18fe0 <__aeabi_dcmpeq>
   29626:	2800      	cmp	r0, #0
   29628:	f43f ae13 	beq.w	29252 <_svfprintf_r+0x171a>
   2962c:	07e8      	lsls	r0, r5, #31
   2962e:	f57f ae10 	bpl.w	29252 <_svfprintf_r+0x171a>
   29632:	e5f3      	b.n	2921c <_svfprintf_r+0x16e4>
   29634:	2302      	movs	r3, #2
   29636:	9318      	str	r3, [sp, #96]	@ 0x60
   29638:	e4e8      	b.n	2900c <_svfprintf_r+0x14d4>
   2963a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   2963c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   29640:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   29644:	e73d      	b.n	294c2 <_svfprintf_r+0x198a>
   29646:	230c      	movs	r3, #12
   29648:	f8cb 3000 	str.w	r3, [fp]
   2964c:	e715      	b.n	2947a <_svfprintf_r+0x1942>
   2964e:	2300      	movs	r3, #0
   29650:	9312      	str	r3, [sp, #72]	@ 0x48
   29652:	930f      	str	r3, [sp, #60]	@ 0x3c
   29654:	e79b      	b.n	2958e <_svfprintf_r+0x1a56>
   29656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   29658:	900a      	str	r0, [sp, #40]	@ 0x28
   2965a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   2965e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   29662:	e72e      	b.n	294c2 <_svfprintf_r+0x198a>
   29664:	00043d54 	.word	0x00043d54
   29668:	00043d50 	.word	0x00043d50
   2966c:	3fe00000 	.word	0x3fe00000
   29670:	0004b6f4 	.word	0x0004b6f4

00029674 <__smakebuf_r>:
   29674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29678:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   2967c:	460c      	mov	r4, r1
   2967e:	0799      	lsls	r1, r3, #30
   29680:	b096      	sub	sp, #88	@ 0x58
   29682:	d508      	bpl.n	29696 <__smakebuf_r+0x22>
   29684:	f104 0343 	add.w	r3, r4, #67	@ 0x43
   29688:	2201      	movs	r2, #1
   2968a:	e9c4 3204 	strd	r3, r2, [r4, #16]
   2968e:	6023      	str	r3, [r4, #0]
   29690:	b016      	add	sp, #88	@ 0x58
   29692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29696:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   2969a:	2900      	cmp	r1, #0
   2969c:	4606      	mov	r6, r0
   2969e:	db26      	blt.n	296ee <__smakebuf_r+0x7a>
   296a0:	466a      	mov	r2, sp
   296a2:	f000 fb89 	bl	29db8 <_fstat_r>
   296a6:	2800      	cmp	r0, #0
   296a8:	db1f      	blt.n	296ea <__smakebuf_r+0x76>
   296aa:	9d01      	ldr	r5, [sp, #4]
   296ac:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
   296b0:	f5a5 5500 	sub.w	r5, r5, #8192	@ 0x2000
   296b4:	fab5 f585 	clz	r5, r5
   296b8:	f44f 6880 	mov.w	r8, #1024	@ 0x400
   296bc:	096d      	lsrs	r5, r5, #5
   296be:	f44f 6700 	mov.w	r7, #2048	@ 0x800
   296c2:	4641      	mov	r1, r8
   296c4:	4630      	mov	r0, r6
   296c6:	f7fd ff6d 	bl	275a4 <_malloc_r>
   296ca:	b1e8      	cbz	r0, 29708 <__smakebuf_r+0x94>
   296cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   296d0:	f8c4 8014 	str.w	r8, [r4, #20]
   296d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   296d8:	6020      	str	r0, [r4, #0]
   296da:	6120      	str	r0, [r4, #16]
   296dc:	81a3      	strh	r3, [r4, #12]
   296de:	bb3d      	cbnz	r5, 29730 <__smakebuf_r+0xbc>
   296e0:	433b      	orrs	r3, r7
   296e2:	81a3      	strh	r3, [r4, #12]
   296e4:	b016      	add	sp, #88	@ 0x58
   296e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   296ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   296ee:	f013 0580 	ands.w	r5, r3, #128	@ 0x80
   296f2:	d019      	beq.n	29728 <__smakebuf_r+0xb4>
   296f4:	f04f 0840 	mov.w	r8, #64	@ 0x40
   296f8:	2500      	movs	r5, #0
   296fa:	4641      	mov	r1, r8
   296fc:	4630      	mov	r0, r6
   296fe:	462f      	mov	r7, r5
   29700:	f7fd ff50 	bl	275a4 <_malloc_r>
   29704:	2800      	cmp	r0, #0
   29706:	d1e1      	bne.n	296cc <__smakebuf_r+0x58>
   29708:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2970c:	059a      	lsls	r2, r3, #22
   2970e:	d4bf      	bmi.n	29690 <__smakebuf_r+0x1c>
   29710:	f023 0303 	bic.w	r3, r3, #3
   29714:	f104 0243 	add.w	r2, r4, #67	@ 0x43
   29718:	f043 0302 	orr.w	r3, r3, #2
   2971c:	2101      	movs	r1, #1
   2971e:	e9c4 2104 	strd	r2, r1, [r4, #16]
   29722:	81a3      	strh	r3, [r4, #12]
   29724:	6022      	str	r2, [r4, #0]
   29726:	e7b3      	b.n	29690 <__smakebuf_r+0x1c>
   29728:	f44f 6880 	mov.w	r8, #1024	@ 0x400
   2972c:	462f      	mov	r7, r5
   2972e:	e7c8      	b.n	296c2 <__smakebuf_r+0x4e>
   29730:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   29734:	4630      	mov	r0, r6
   29736:	f000 fb55 	bl	29de4 <_isatty_r>
   2973a:	b910      	cbnz	r0, 29742 <__smakebuf_r+0xce>
   2973c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   29740:	e7ce      	b.n	296e0 <__smakebuf_r+0x6c>
   29742:	89a3      	ldrh	r3, [r4, #12]
   29744:	f023 0303 	bic.w	r3, r3, #3
   29748:	f043 0301 	orr.w	r3, r3, #1
   2974c:	b21b      	sxth	r3, r3
   2974e:	e7c7      	b.n	296e0 <__smakebuf_r+0x6c>

00029750 <__malloc_lock>:
   29750:	4801      	ldr	r0, [pc, #4]	@ (29758 <__malloc_lock+0x8>)
   29752:	f7fd bd0f 	b.w	27174 <__retarget_lock_acquire_recursive>
   29756:	bf00      	nop
   29758:	10050090 	.word	0x10050090

0002975c <__malloc_unlock>:
   2975c:	4801      	ldr	r0, [pc, #4]	@ (29764 <__malloc_unlock+0x8>)
   2975e:	f7fd bd0b 	b.w	27178 <__retarget_lock_release_recursive>
   29762:	bf00      	nop
   29764:	10050090 	.word	0x10050090

00029768 <_fclose_r>:
   29768:	b570      	push	{r4, r5, r6, lr}
   2976a:	2900      	cmp	r1, #0
   2976c:	d03f      	beq.n	297ee <_fclose_r+0x86>
   2976e:	4606      	mov	r6, r0
   29770:	460c      	mov	r4, r1
   29772:	b110      	cbz	r0, 2977a <_fclose_r+0x12>
   29774:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   29776:	2b00      	cmp	r3, #0
   29778:	d03c      	beq.n	297f4 <_fclose_r+0x8c>
   2977a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
   2977c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   29780:	07dd      	lsls	r5, r3, #31
   29782:	d432      	bmi.n	297ea <_fclose_r+0x82>
   29784:	0590      	lsls	r0, r2, #22
   29786:	d538      	bpl.n	297fa <_fclose_r+0x92>
   29788:	4621      	mov	r1, r4
   2978a:	4630      	mov	r0, r6
   2978c:	f7fc feba 	bl	26504 <__sflush_r>
   29790:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   29792:	4605      	mov	r5, r0
   29794:	b133      	cbz	r3, 297a4 <_fclose_r+0x3c>
   29796:	69e1      	ldr	r1, [r4, #28]
   29798:	4630      	mov	r0, r6
   2979a:	4798      	blx	r3
   2979c:	2800      	cmp	r0, #0
   2979e:	bfb8      	it	lt
   297a0:	f04f 35ff 	movlt.w	r5, #4294967295	@ 0xffffffff
   297a4:	89a3      	ldrh	r3, [r4, #12]
   297a6:	061a      	lsls	r2, r3, #24
   297a8:	d439      	bmi.n	2981e <_fclose_r+0xb6>
   297aa:	6b21      	ldr	r1, [r4, #48]	@ 0x30
   297ac:	b141      	cbz	r1, 297c0 <_fclose_r+0x58>
   297ae:	f104 0340 	add.w	r3, r4, #64	@ 0x40
   297b2:	4299      	cmp	r1, r3
   297b4:	d002      	beq.n	297bc <_fclose_r+0x54>
   297b6:	4630      	mov	r0, r6
   297b8:	f7fd fdb8 	bl	2732c <_free_r>
   297bc:	2300      	movs	r3, #0
   297be:	6323      	str	r3, [r4, #48]	@ 0x30
   297c0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
   297c2:	b121      	cbz	r1, 297ce <_fclose_r+0x66>
   297c4:	4630      	mov	r0, r6
   297c6:	f7fd fdb1 	bl	2732c <_free_r>
   297ca:	2300      	movs	r3, #0
   297cc:	6463      	str	r3, [r4, #68]	@ 0x44
   297ce:	f7fd f821 	bl	26814 <__sfp_lock_acquire>
   297d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
   297d4:	2200      	movs	r2, #0
   297d6:	07db      	lsls	r3, r3, #31
   297d8:	81a2      	strh	r2, [r4, #12]
   297da:	d51c      	bpl.n	29816 <_fclose_r+0xae>
   297dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
   297de:	f7fd fcc7 	bl	27170 <__retarget_lock_close_recursive>
   297e2:	f7fd f81d 	bl	26820 <__sfp_lock_release>
   297e6:	4628      	mov	r0, r5
   297e8:	bd70      	pop	{r4, r5, r6, pc}
   297ea:	2a00      	cmp	r2, #0
   297ec:	d1cc      	bne.n	29788 <_fclose_r+0x20>
   297ee:	2500      	movs	r5, #0
   297f0:	4628      	mov	r0, r5
   297f2:	bd70      	pop	{r4, r5, r6, pc}
   297f4:	f7fc fff0 	bl	267d8 <__sinit>
   297f8:	e7bf      	b.n	2977a <_fclose_r+0x12>
   297fa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
   297fc:	f7fd fcba 	bl	27174 <__retarget_lock_acquire_recursive>
   29800:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   29804:	2b00      	cmp	r3, #0
   29806:	d1bf      	bne.n	29788 <_fclose_r+0x20>
   29808:	6e63      	ldr	r3, [r4, #100]	@ 0x64
   2980a:	07d9      	lsls	r1, r3, #31
   2980c:	d4ef      	bmi.n	297ee <_fclose_r+0x86>
   2980e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
   29810:	f7fd fcb2 	bl	27178 <__retarget_lock_release_recursive>
   29814:	e7eb      	b.n	297ee <_fclose_r+0x86>
   29816:	6da0      	ldr	r0, [r4, #88]	@ 0x58
   29818:	f7fd fcae 	bl	27178 <__retarget_lock_release_recursive>
   2981c:	e7de      	b.n	297dc <_fclose_r+0x74>
   2981e:	6921      	ldr	r1, [r4, #16]
   29820:	4630      	mov	r0, r6
   29822:	f7fd fd83 	bl	2732c <_free_r>
   29826:	e7c0      	b.n	297aa <_fclose_r+0x42>

00029828 <_realloc_r>:
   29828:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2982c:	4616      	mov	r6, r2
   2982e:	2900      	cmp	r1, #0
   29830:	f000 8096 	beq.w	29960 <_realloc_r+0x138>
   29834:	460c      	mov	r4, r1
   29836:	4680      	mov	r8, r0
   29838:	f106 050b 	add.w	r5, r6, #11
   2983c:	f7ff ff88 	bl	29750 <__malloc_lock>
   29840:	f854 1c04 	ldr.w	r1, [r4, #-4]
   29844:	2d16      	cmp	r5, #22
   29846:	f1a4 0908 	sub.w	r9, r4, #8
   2984a:	f021 0703 	bic.w	r7, r1, #3
   2984e:	d858      	bhi.n	29902 <_realloc_r+0xda>
   29850:	2510      	movs	r5, #16
   29852:	42ae      	cmp	r6, r5
   29854:	d858      	bhi.n	29908 <_realloc_r+0xe0>
   29856:	42af      	cmp	r7, r5
   29858:	da60      	bge.n	2991c <_realloc_r+0xf4>
   2985a:	4bbe      	ldr	r3, [pc, #760]	@ (29b54 <_realloc_r+0x32c>)
   2985c:	689a      	ldr	r2, [r3, #8]
   2985e:	eb09 0c07 	add.w	ip, r9, r7
   29862:	4562      	cmp	r2, ip
   29864:	f8dc 0004 	ldr.w	r0, [ip, #4]
   29868:	f000 8090 	beq.w	2998c <_realloc_r+0x164>
   2986c:	f020 0301 	bic.w	r3, r0, #1
   29870:	4463      	add	r3, ip
   29872:	685b      	ldr	r3, [r3, #4]
   29874:	07db      	lsls	r3, r3, #31
   29876:	d468      	bmi.n	2994a <_realloc_r+0x122>
   29878:	f020 0003 	bic.w	r0, r0, #3
   2987c:	183b      	adds	r3, r7, r0
   2987e:	429d      	cmp	r5, r3
   29880:	dd47      	ble.n	29912 <_realloc_r+0xea>
   29882:	07cb      	lsls	r3, r1, #31
   29884:	d412      	bmi.n	298ac <_realloc_r+0x84>
   29886:	f854 3c08 	ldr.w	r3, [r4, #-8]
   2988a:	eba9 0b03 	sub.w	fp, r9, r3
   2988e:	f8db 3004 	ldr.w	r3, [fp, #4]
   29892:	f023 0203 	bic.w	r2, r3, #3
   29896:	4410      	add	r0, r2
   29898:	eb00 0a07 	add.w	sl, r0, r7
   2989c:	4555      	cmp	r5, sl
   2989e:	f340 80f6 	ble.w	29a8e <_realloc_r+0x266>
   298a2:	eb07 0a02 	add.w	sl, r7, r2
   298a6:	4555      	cmp	r5, sl
   298a8:	f340 80cc 	ble.w	29a44 <_realloc_r+0x21c>
   298ac:	4631      	mov	r1, r6
   298ae:	4640      	mov	r0, r8
   298b0:	f7fd fe78 	bl	275a4 <_malloc_r>
   298b4:	4606      	mov	r6, r0
   298b6:	2800      	cmp	r0, #0
   298b8:	f000 8120 	beq.w	29afc <_realloc_r+0x2d4>
   298bc:	f854 3c04 	ldr.w	r3, [r4, #-4]
   298c0:	f023 0301 	bic.w	r3, r3, #1
   298c4:	444b      	add	r3, r9
   298c6:	f1a0 0208 	sub.w	r2, r0, #8
   298ca:	4293      	cmp	r3, r2
   298cc:	f000 80b4 	beq.w	29a38 <_realloc_r+0x210>
   298d0:	1f3a      	subs	r2, r7, #4
   298d2:	2a24      	cmp	r2, #36	@ 0x24
   298d4:	f200 80d7 	bhi.w	29a86 <_realloc_r+0x25e>
   298d8:	2a13      	cmp	r2, #19
   298da:	f200 80a2 	bhi.w	29a22 <_realloc_r+0x1fa>
   298de:	4603      	mov	r3, r0
   298e0:	4622      	mov	r2, r4
   298e2:	6811      	ldr	r1, [r2, #0]
   298e4:	6019      	str	r1, [r3, #0]
   298e6:	6851      	ldr	r1, [r2, #4]
   298e8:	6059      	str	r1, [r3, #4]
   298ea:	6892      	ldr	r2, [r2, #8]
   298ec:	609a      	str	r2, [r3, #8]
   298ee:	4621      	mov	r1, r4
   298f0:	4640      	mov	r0, r8
   298f2:	f7fd fd1b 	bl	2732c <_free_r>
   298f6:	4640      	mov	r0, r8
   298f8:	f7ff ff30 	bl	2975c <__malloc_unlock>
   298fc:	4630      	mov	r0, r6
   298fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29902:	f035 0507 	bics.w	r5, r5, #7
   29906:	d5a4      	bpl.n	29852 <_realloc_r+0x2a>
   29908:	230c      	movs	r3, #12
   2990a:	f8c8 3000 	str.w	r3, [r8]
   2990e:	2600      	movs	r6, #0
   29910:	e018      	b.n	29944 <_realloc_r+0x11c>
   29912:	461f      	mov	r7, r3
   29914:	e9dc 2302 	ldrd	r2, r3, [ip, #8]
   29918:	60d3      	str	r3, [r2, #12]
   2991a:	609a      	str	r2, [r3, #8]
   2991c:	f8d9 3004 	ldr.w	r3, [r9, #4]
   29920:	1b7a      	subs	r2, r7, r5
   29922:	2a0f      	cmp	r2, #15
   29924:	f003 0301 	and.w	r3, r3, #1
   29928:	eb09 0007 	add.w	r0, r9, r7
   2992c:	d81d      	bhi.n	2996a <_realloc_r+0x142>
   2992e:	433b      	orrs	r3, r7
   29930:	f8c9 3004 	str.w	r3, [r9, #4]
   29934:	6843      	ldr	r3, [r0, #4]
   29936:	f043 0301 	orr.w	r3, r3, #1
   2993a:	6043      	str	r3, [r0, #4]
   2993c:	4640      	mov	r0, r8
   2993e:	f7ff ff0d 	bl	2975c <__malloc_unlock>
   29942:	4626      	mov	r6, r4
   29944:	4630      	mov	r0, r6
   29946:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2994a:	07c9      	lsls	r1, r1, #31
   2994c:	d4ae      	bmi.n	298ac <_realloc_r+0x84>
   2994e:	f854 3c08 	ldr.w	r3, [r4, #-8]
   29952:	eba9 0b03 	sub.w	fp, r9, r3
   29956:	f8db 3004 	ldr.w	r3, [fp, #4]
   2995a:	f023 0203 	bic.w	r2, r3, #3
   2995e:	e7a0      	b.n	298a2 <_realloc_r+0x7a>
   29960:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29964:	4611      	mov	r1, r2
   29966:	f7fd be1d 	b.w	275a4 <_malloc_r>
   2996a:	eb09 0105 	add.w	r1, r9, r5
   2996e:	432b      	orrs	r3, r5
   29970:	f042 0201 	orr.w	r2, r2, #1
   29974:	f8c9 3004 	str.w	r3, [r9, #4]
   29978:	604a      	str	r2, [r1, #4]
   2997a:	6843      	ldr	r3, [r0, #4]
   2997c:	f043 0301 	orr.w	r3, r3, #1
   29980:	6043      	str	r3, [r0, #4]
   29982:	3108      	adds	r1, #8
   29984:	4640      	mov	r0, r8
   29986:	f7fd fcd1 	bl	2732c <_free_r>
   2998a:	e7d7      	b.n	2993c <_realloc_r+0x114>
   2998c:	f020 0003 	bic.w	r0, r0, #3
   29990:	19c2      	adds	r2, r0, r7
   29992:	f105 0c10 	add.w	ip, r5, #16
   29996:	4562      	cmp	r2, ip
   29998:	f280 8091 	bge.w	29abe <_realloc_r+0x296>
   2999c:	07ca      	lsls	r2, r1, #31
   2999e:	d485      	bmi.n	298ac <_realloc_r+0x84>
   299a0:	f854 2c08 	ldr.w	r2, [r4, #-8]
   299a4:	eba9 0b02 	sub.w	fp, r9, r2
   299a8:	f8db 2004 	ldr.w	r2, [fp, #4]
   299ac:	f022 0203 	bic.w	r2, r2, #3
   299b0:	4410      	add	r0, r2
   299b2:	eb00 0a07 	add.w	sl, r0, r7
   299b6:	45d4      	cmp	ip, sl
   299b8:	f73f af73 	bgt.w	298a2 <_realloc_r+0x7a>
   299bc:	465e      	mov	r6, fp
   299be:	f8db 100c 	ldr.w	r1, [fp, #12]
   299c2:	f856 0f08 	ldr.w	r0, [r6, #8]!
   299c6:	1f3a      	subs	r2, r7, #4
   299c8:	2a24      	cmp	r2, #36	@ 0x24
   299ca:	60c1      	str	r1, [r0, #12]
   299cc:	6088      	str	r0, [r1, #8]
   299ce:	f200 80ae 	bhi.w	29b2e <_realloc_r+0x306>
   299d2:	2a13      	cmp	r2, #19
   299d4:	f240 80a9 	bls.w	29b2a <_realloc_r+0x302>
   299d8:	6821      	ldr	r1, [r4, #0]
   299da:	f8cb 1008 	str.w	r1, [fp, #8]
   299de:	6861      	ldr	r1, [r4, #4]
   299e0:	f8cb 100c 	str.w	r1, [fp, #12]
   299e4:	2a1b      	cmp	r2, #27
   299e6:	f200 80a8 	bhi.w	29b3a <_realloc_r+0x312>
   299ea:	3408      	adds	r4, #8
   299ec:	f10b 0210 	add.w	r2, fp, #16
   299f0:	6821      	ldr	r1, [r4, #0]
   299f2:	6011      	str	r1, [r2, #0]
   299f4:	6861      	ldr	r1, [r4, #4]
   299f6:	6051      	str	r1, [r2, #4]
   299f8:	68a1      	ldr	r1, [r4, #8]
   299fa:	6091      	str	r1, [r2, #8]
   299fc:	eb0b 0105 	add.w	r1, fp, r5
   29a00:	ebaa 0205 	sub.w	r2, sl, r5
   29a04:	f042 0201 	orr.w	r2, r2, #1
   29a08:	6099      	str	r1, [r3, #8]
   29a0a:	604a      	str	r2, [r1, #4]
   29a0c:	f8db 3004 	ldr.w	r3, [fp, #4]
   29a10:	f003 0301 	and.w	r3, r3, #1
   29a14:	432b      	orrs	r3, r5
   29a16:	4640      	mov	r0, r8
   29a18:	f8cb 3004 	str.w	r3, [fp, #4]
   29a1c:	f7ff fe9e 	bl	2975c <__malloc_unlock>
   29a20:	e790      	b.n	29944 <_realloc_r+0x11c>
   29a22:	6823      	ldr	r3, [r4, #0]
   29a24:	6003      	str	r3, [r0, #0]
   29a26:	6863      	ldr	r3, [r4, #4]
   29a28:	6043      	str	r3, [r0, #4]
   29a2a:	2a1b      	cmp	r2, #27
   29a2c:	d83c      	bhi.n	29aa8 <_realloc_r+0x280>
   29a2e:	f104 0208 	add.w	r2, r4, #8
   29a32:	f100 0308 	add.w	r3, r0, #8
   29a36:	e754      	b.n	298e2 <_realloc_r+0xba>
   29a38:	f850 3c04 	ldr.w	r3, [r0, #-4]
   29a3c:	f023 0303 	bic.w	r3, r3, #3
   29a40:	441f      	add	r7, r3
   29a42:	e76b      	b.n	2991c <_realloc_r+0xf4>
   29a44:	1f3a      	subs	r2, r7, #4
   29a46:	465e      	mov	r6, fp
   29a48:	f8db 300c 	ldr.w	r3, [fp, #12]
   29a4c:	f856 1f08 	ldr.w	r1, [r6, #8]!
   29a50:	2a24      	cmp	r2, #36	@ 0x24
   29a52:	60cb      	str	r3, [r1, #12]
   29a54:	6099      	str	r1, [r3, #8]
   29a56:	d822      	bhi.n	29a9e <_realloc_r+0x276>
   29a58:	2a13      	cmp	r2, #19
   29a5a:	d91e      	bls.n	29a9a <_realloc_r+0x272>
   29a5c:	6823      	ldr	r3, [r4, #0]
   29a5e:	f8cb 3008 	str.w	r3, [fp, #8]
   29a62:	6863      	ldr	r3, [r4, #4]
   29a64:	f8cb 300c 	str.w	r3, [fp, #12]
   29a68:	2a1b      	cmp	r2, #27
   29a6a:	d83b      	bhi.n	29ae4 <_realloc_r+0x2bc>
   29a6c:	3408      	adds	r4, #8
   29a6e:	f10b 0310 	add.w	r3, fp, #16
   29a72:	6822      	ldr	r2, [r4, #0]
   29a74:	601a      	str	r2, [r3, #0]
   29a76:	6862      	ldr	r2, [r4, #4]
   29a78:	605a      	str	r2, [r3, #4]
   29a7a:	68a2      	ldr	r2, [r4, #8]
   29a7c:	609a      	str	r2, [r3, #8]
   29a7e:	4634      	mov	r4, r6
   29a80:	4657      	mov	r7, sl
   29a82:	46d9      	mov	r9, fp
   29a84:	e74a      	b.n	2991c <_realloc_r+0xf4>
   29a86:	4621      	mov	r1, r4
   29a88:	f7fd f9a8 	bl	26ddc <memmove>
   29a8c:	e72f      	b.n	298ee <_realloc_r+0xc6>
   29a8e:	e9dc 1302 	ldrd	r1, r3, [ip, #8]
   29a92:	1f3a      	subs	r2, r7, #4
   29a94:	60cb      	str	r3, [r1, #12]
   29a96:	6099      	str	r1, [r3, #8]
   29a98:	e7d5      	b.n	29a46 <_realloc_r+0x21e>
   29a9a:	4633      	mov	r3, r6
   29a9c:	e7e9      	b.n	29a72 <_realloc_r+0x24a>
   29a9e:	4621      	mov	r1, r4
   29aa0:	4630      	mov	r0, r6
   29aa2:	f7fd f99b 	bl	26ddc <memmove>
   29aa6:	e7ea      	b.n	29a7e <_realloc_r+0x256>
   29aa8:	68a3      	ldr	r3, [r4, #8]
   29aaa:	6083      	str	r3, [r0, #8]
   29aac:	68e3      	ldr	r3, [r4, #12]
   29aae:	60c3      	str	r3, [r0, #12]
   29ab0:	2a24      	cmp	r2, #36	@ 0x24
   29ab2:	d027      	beq.n	29b04 <_realloc_r+0x2dc>
   29ab4:	f104 0210 	add.w	r2, r4, #16
   29ab8:	f100 0310 	add.w	r3, r0, #16
   29abc:	e711      	b.n	298e2 <_realloc_r+0xba>
   29abe:	eb09 0105 	add.w	r1, r9, r5
   29ac2:	6099      	str	r1, [r3, #8]
   29ac4:	1b53      	subs	r3, r2, r5
   29ac6:	f043 0301 	orr.w	r3, r3, #1
   29aca:	604b      	str	r3, [r1, #4]
   29acc:	f854 3c04 	ldr.w	r3, [r4, #-4]
   29ad0:	f003 0301 	and.w	r3, r3, #1
   29ad4:	432b      	orrs	r3, r5
   29ad6:	4640      	mov	r0, r8
   29ad8:	f844 3c04 	str.w	r3, [r4, #-4]
   29adc:	f7ff fe3e 	bl	2975c <__malloc_unlock>
   29ae0:	4626      	mov	r6, r4
   29ae2:	e72f      	b.n	29944 <_realloc_r+0x11c>
   29ae4:	68a3      	ldr	r3, [r4, #8]
   29ae6:	f8cb 3010 	str.w	r3, [fp, #16]
   29aea:	68e3      	ldr	r3, [r4, #12]
   29aec:	f8cb 3014 	str.w	r3, [fp, #20]
   29af0:	2a24      	cmp	r2, #36	@ 0x24
   29af2:	d010      	beq.n	29b16 <_realloc_r+0x2ee>
   29af4:	3410      	adds	r4, #16
   29af6:	f10b 0318 	add.w	r3, fp, #24
   29afa:	e7ba      	b.n	29a72 <_realloc_r+0x24a>
   29afc:	4640      	mov	r0, r8
   29afe:	f7ff fe2d 	bl	2975c <__malloc_unlock>
   29b02:	e704      	b.n	2990e <_realloc_r+0xe6>
   29b04:	6923      	ldr	r3, [r4, #16]
   29b06:	6103      	str	r3, [r0, #16]
   29b08:	6961      	ldr	r1, [r4, #20]
   29b0a:	6141      	str	r1, [r0, #20]
   29b0c:	f104 0218 	add.w	r2, r4, #24
   29b10:	f100 0318 	add.w	r3, r0, #24
   29b14:	e6e5      	b.n	298e2 <_realloc_r+0xba>
   29b16:	6923      	ldr	r3, [r4, #16]
   29b18:	f8cb 3018 	str.w	r3, [fp, #24]
   29b1c:	6963      	ldr	r3, [r4, #20]
   29b1e:	f8cb 301c 	str.w	r3, [fp, #28]
   29b22:	3418      	adds	r4, #24
   29b24:	f10b 0320 	add.w	r3, fp, #32
   29b28:	e7a3      	b.n	29a72 <_realloc_r+0x24a>
   29b2a:	4632      	mov	r2, r6
   29b2c:	e760      	b.n	299f0 <_realloc_r+0x1c8>
   29b2e:	4621      	mov	r1, r4
   29b30:	4630      	mov	r0, r6
   29b32:	f7fd f953 	bl	26ddc <memmove>
   29b36:	4b07      	ldr	r3, [pc, #28]	@ (29b54 <_realloc_r+0x32c>)
   29b38:	e760      	b.n	299fc <_realloc_r+0x1d4>
   29b3a:	68a1      	ldr	r1, [r4, #8]
   29b3c:	f8cb 1010 	str.w	r1, [fp, #16]
   29b40:	68e1      	ldr	r1, [r4, #12]
   29b42:	f8cb 1014 	str.w	r1, [fp, #20]
   29b46:	2a24      	cmp	r2, #36	@ 0x24
   29b48:	d006      	beq.n	29b58 <_realloc_r+0x330>
   29b4a:	3410      	adds	r4, #16
   29b4c:	f10b 0218 	add.w	r2, fp, #24
   29b50:	e74e      	b.n	299f0 <_realloc_r+0x1c8>
   29b52:	bf00      	nop
   29b54:	1000d678 	.word	0x1000d678
   29b58:	6922      	ldr	r2, [r4, #16]
   29b5a:	f8cb 2018 	str.w	r2, [fp, #24]
   29b5e:	6962      	ldr	r2, [r4, #20]
   29b60:	f8cb 201c 	str.w	r2, [fp, #28]
   29b64:	3418      	adds	r4, #24
   29b66:	f10b 0220 	add.w	r2, fp, #32
   29b6a:	e741      	b.n	299f0 <_realloc_r+0x1c8>

00029b6c <__sread>:
   29b6c:	b510      	push	{r4, lr}
   29b6e:	460c      	mov	r4, r1
   29b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   29b74:	f000 f95e 	bl	29e34 <_read_r>
   29b78:	2800      	cmp	r0, #0
   29b7a:	db03      	blt.n	29b84 <__sread+0x18>
   29b7c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
   29b7e:	4403      	add	r3, r0
   29b80:	6523      	str	r3, [r4, #80]	@ 0x50
   29b82:	bd10      	pop	{r4, pc}
   29b84:	89a3      	ldrh	r3, [r4, #12]
   29b86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
   29b8a:	81a3      	strh	r3, [r4, #12]
   29b8c:	bd10      	pop	{r4, pc}
   29b8e:	bf00      	nop

00029b90 <__swrite>:
   29b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29b94:	460c      	mov	r4, r1
   29b96:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   29b9a:	461f      	mov	r7, r3
   29b9c:	05cb      	lsls	r3, r1, #23
   29b9e:	4605      	mov	r5, r0
   29ba0:	4616      	mov	r6, r2
   29ba2:	d40b      	bmi.n	29bbc <__swrite+0x2c>
   29ba4:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
   29ba8:	81a1      	strh	r1, [r4, #12]
   29baa:	463b      	mov	r3, r7
   29bac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   29bb0:	4632      	mov	r2, r6
   29bb2:	4628      	mov	r0, r5
   29bb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   29bb8:	f000 b964 	b.w	29e84 <_write_r>
   29bbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   29bc0:	2302      	movs	r3, #2
   29bc2:	2200      	movs	r2, #0
   29bc4:	f000 f920 	bl	29e08 <_lseek_r>
   29bc8:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   29bcc:	e7ea      	b.n	29ba4 <__swrite+0x14>
   29bce:	bf00      	nop

00029bd0 <__sseek>:
   29bd0:	b510      	push	{r4, lr}
   29bd2:	460c      	mov	r4, r1
   29bd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   29bd8:	f000 f916 	bl	29e08 <_lseek_r>
   29bdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   29be0:	1c42      	adds	r2, r0, #1
   29be2:	bf0e      	itee	eq
   29be4:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
   29be8:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
   29bec:	6520      	strne	r0, [r4, #80]	@ 0x50
   29bee:	81a3      	strh	r3, [r4, #12]
   29bf0:	bd10      	pop	{r4, pc}
   29bf2:	bf00      	nop

00029bf4 <__sclose>:
   29bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   29bf8:	f000 b8cc 	b.w	29d94 <_close_r>

00029bfc <__ascii_wctomb>:
   29bfc:	b149      	cbz	r1, 29c12 <__ascii_wctomb+0x16>
   29bfe:	2aff      	cmp	r2, #255	@ 0xff
   29c00:	d802      	bhi.n	29c08 <__ascii_wctomb+0xc>
   29c02:	700a      	strb	r2, [r1, #0]
   29c04:	2001      	movs	r0, #1
   29c06:	4770      	bx	lr
   29c08:	238a      	movs	r3, #138	@ 0x8a
   29c0a:	6003      	str	r3, [r0, #0]
   29c0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   29c10:	4770      	bx	lr
   29c12:	4608      	mov	r0, r1
   29c14:	4770      	bx	lr
   29c16:	bf00      	nop

00029c18 <__swbuf_r>:
   29c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29c1a:	460d      	mov	r5, r1
   29c1c:	4614      	mov	r4, r2
   29c1e:	4606      	mov	r6, r0
   29c20:	b110      	cbz	r0, 29c28 <__swbuf_r+0x10>
   29c22:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   29c24:	2b00      	cmp	r3, #0
   29c26:	d04a      	beq.n	29cbe <__swbuf_r+0xa6>
   29c28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   29c2c:	69a3      	ldr	r3, [r4, #24]
   29c2e:	60a3      	str	r3, [r4, #8]
   29c30:	0710      	lsls	r0, r2, #28
   29c32:	d51b      	bpl.n	29c6c <__swbuf_r+0x54>
   29c34:	6923      	ldr	r3, [r4, #16]
   29c36:	b1cb      	cbz	r3, 29c6c <__swbuf_r+0x54>
   29c38:	b2ed      	uxtb	r5, r5
   29c3a:	0491      	lsls	r1, r2, #18
   29c3c:	462f      	mov	r7, r5
   29c3e:	d521      	bpl.n	29c84 <__swbuf_r+0x6c>
   29c40:	6822      	ldr	r2, [r4, #0]
   29c42:	6961      	ldr	r1, [r4, #20]
   29c44:	1ad3      	subs	r3, r2, r3
   29c46:	4299      	cmp	r1, r3
   29c48:	dd28      	ble.n	29c9c <__swbuf_r+0x84>
   29c4a:	3301      	adds	r3, #1
   29c4c:	68a1      	ldr	r1, [r4, #8]
   29c4e:	3901      	subs	r1, #1
   29c50:	60a1      	str	r1, [r4, #8]
   29c52:	1c51      	adds	r1, r2, #1
   29c54:	6021      	str	r1, [r4, #0]
   29c56:	7015      	strb	r5, [r2, #0]
   29c58:	6962      	ldr	r2, [r4, #20]
   29c5a:	429a      	cmp	r2, r3
   29c5c:	d026      	beq.n	29cac <__swbuf_r+0x94>
   29c5e:	89a3      	ldrh	r3, [r4, #12]
   29c60:	07db      	lsls	r3, r3, #31
   29c62:	d501      	bpl.n	29c68 <__swbuf_r+0x50>
   29c64:	2d0a      	cmp	r5, #10
   29c66:	d021      	beq.n	29cac <__swbuf_r+0x94>
   29c68:	4638      	mov	r0, r7
   29c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29c6c:	4621      	mov	r1, r4
   29c6e:	4630      	mov	r0, r6
   29c70:	f7fc ffb6 	bl	26be0 <__swsetup_r>
   29c74:	bb00      	cbnz	r0, 29cb8 <__swbuf_r+0xa0>
   29c76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   29c7a:	6923      	ldr	r3, [r4, #16]
   29c7c:	b2ed      	uxtb	r5, r5
   29c7e:	0491      	lsls	r1, r2, #18
   29c80:	462f      	mov	r7, r5
   29c82:	d4dd      	bmi.n	29c40 <__swbuf_r+0x28>
   29c84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
   29c88:	81a2      	strh	r2, [r4, #12]
   29c8a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
   29c8c:	6961      	ldr	r1, [r4, #20]
   29c8e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
   29c92:	6662      	str	r2, [r4, #100]	@ 0x64
   29c94:	6822      	ldr	r2, [r4, #0]
   29c96:	1ad3      	subs	r3, r2, r3
   29c98:	4299      	cmp	r1, r3
   29c9a:	dcd6      	bgt.n	29c4a <__swbuf_r+0x32>
   29c9c:	4621      	mov	r1, r4
   29c9e:	4630      	mov	r0, r6
   29ca0:	f7fc fccc 	bl	2663c <_fflush_r>
   29ca4:	b940      	cbnz	r0, 29cb8 <__swbuf_r+0xa0>
   29ca6:	6822      	ldr	r2, [r4, #0]
   29ca8:	2301      	movs	r3, #1
   29caa:	e7cf      	b.n	29c4c <__swbuf_r+0x34>
   29cac:	4621      	mov	r1, r4
   29cae:	4630      	mov	r0, r6
   29cb0:	f7fc fcc4 	bl	2663c <_fflush_r>
   29cb4:	2800      	cmp	r0, #0
   29cb6:	d0d7      	beq.n	29c68 <__swbuf_r+0x50>
   29cb8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
   29cbc:	e7d4      	b.n	29c68 <__swbuf_r+0x50>
   29cbe:	f7fc fd8b 	bl	267d8 <__sinit>
   29cc2:	e7b1      	b.n	29c28 <__swbuf_r+0x10>

00029cc4 <strchr>:
   29cc4:	f011 01ff 	ands.w	r1, r1, #255	@ 0xff
   29cc8:	4603      	mov	r3, r0
   29cca:	f000 0203 	and.w	r2, r0, #3
   29cce:	d039      	beq.n	29d44 <strchr+0x80>
   29cd0:	bb8a      	cbnz	r2, 29d36 <strchr+0x72>
   29cd2:	6802      	ldr	r2, [r0, #0]
   29cd4:	b510      	push	{r4, lr}
   29cd6:	eb01 2e01 	add.w	lr, r1, r1, lsl #8
   29cda:	eb0e 4e0e 	add.w	lr, lr, lr, lsl #16
   29cde:	ea8e 0402 	eor.w	r4, lr, r2
   29ce2:	f1a2 3301 	sub.w	r3, r2, #16843009	@ 0x1010101
   29ce6:	ea23 0302 	bic.w	r3, r3, r2
   29cea:	f1a4 3201 	sub.w	r2, r4, #16843009	@ 0x1010101
   29cee:	ea22 0204 	bic.w	r2, r2, r4
   29cf2:	4313      	orrs	r3, r2
   29cf4:	f013 3f80 	tst.w	r3, #2155905152	@ 0x80808080
   29cf8:	d10f      	bne.n	29d1a <strchr+0x56>
   29cfa:	f850 4f04 	ldr.w	r4, [r0, #4]!
   29cfe:	ea84 0c0e 	eor.w	ip, r4, lr
   29d02:	f1a4 3301 	sub.w	r3, r4, #16843009	@ 0x1010101
   29d06:	f1ac 3201 	sub.w	r2, ip, #16843009	@ 0x1010101
   29d0a:	ea23 0304 	bic.w	r3, r3, r4
   29d0e:	ea22 020c 	bic.w	r2, r2, ip
   29d12:	4313      	orrs	r3, r2
   29d14:	f013 3f80 	tst.w	r3, #2155905152	@ 0x80808080
   29d18:	d0ef      	beq.n	29cfa <strchr+0x36>
   29d1a:	7803      	ldrb	r3, [r0, #0]
   29d1c:	b923      	cbnz	r3, 29d28 <strchr+0x64>
   29d1e:	e036      	b.n	29d8e <strchr+0xca>
   29d20:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   29d24:	2b00      	cmp	r3, #0
   29d26:	d032      	beq.n	29d8e <strchr+0xca>
   29d28:	4299      	cmp	r1, r3
   29d2a:	d1f9      	bne.n	29d20 <strchr+0x5c>
   29d2c:	bd10      	pop	{r4, pc}
   29d2e:	428a      	cmp	r2, r1
   29d30:	d028      	beq.n	29d84 <strchr+0xc0>
   29d32:	079a      	lsls	r2, r3, #30
   29d34:	d029      	beq.n	29d8a <strchr+0xc6>
   29d36:	781a      	ldrb	r2, [r3, #0]
   29d38:	4618      	mov	r0, r3
   29d3a:	3301      	adds	r3, #1
   29d3c:	2a00      	cmp	r2, #0
   29d3e:	d1f6      	bne.n	29d2e <strchr+0x6a>
   29d40:	4610      	mov	r0, r2
   29d42:	4770      	bx	lr
   29d44:	b9ca      	cbnz	r2, 29d7a <strchr+0xb6>
   29d46:	6802      	ldr	r2, [r0, #0]
   29d48:	f1a2 3301 	sub.w	r3, r2, #16843009	@ 0x1010101
   29d4c:	ea23 0302 	bic.w	r3, r3, r2
   29d50:	f013 3f80 	tst.w	r3, #2155905152	@ 0x80808080
   29d54:	d108      	bne.n	29d68 <strchr+0xa4>
   29d56:	f850 2f04 	ldr.w	r2, [r0, #4]!
   29d5a:	f1a2 3301 	sub.w	r3, r2, #16843009	@ 0x1010101
   29d5e:	ea23 0302 	bic.w	r3, r3, r2
   29d62:	f013 3f80 	tst.w	r3, #2155905152	@ 0x80808080
   29d66:	d0f6      	beq.n	29d56 <strchr+0x92>
   29d68:	7803      	ldrb	r3, [r0, #0]
   29d6a:	b15b      	cbz	r3, 29d84 <strchr+0xc0>
   29d6c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   29d70:	2b00      	cmp	r3, #0
   29d72:	d1fb      	bne.n	29d6c <strchr+0xa8>
   29d74:	4770      	bx	lr
   29d76:	0799      	lsls	r1, r3, #30
   29d78:	d005      	beq.n	29d86 <strchr+0xc2>
   29d7a:	4618      	mov	r0, r3
   29d7c:	f813 2b01 	ldrb.w	r2, [r3], #1
   29d80:	2a00      	cmp	r2, #0
   29d82:	d1f8      	bne.n	29d76 <strchr+0xb2>
   29d84:	4770      	bx	lr
   29d86:	4618      	mov	r0, r3
   29d88:	e7dd      	b.n	29d46 <strchr+0x82>
   29d8a:	4618      	mov	r0, r3
   29d8c:	e7a1      	b.n	29cd2 <strchr+0xe>
   29d8e:	4618      	mov	r0, r3
   29d90:	bd10      	pop	{r4, pc}
   29d92:	bf00      	nop

00029d94 <_close_r>:
   29d94:	b538      	push	{r3, r4, r5, lr}
   29d96:	4d07      	ldr	r5, [pc, #28]	@ (29db4 <_close_r+0x20>)
   29d98:	2200      	movs	r2, #0
   29d9a:	4604      	mov	r4, r0
   29d9c:	4608      	mov	r0, r1
   29d9e:	602a      	str	r2, [r5, #0]
   29da0:	f001 ff2e 	bl	2bc00 <_close>
   29da4:	1c43      	adds	r3, r0, #1
   29da6:	d000      	beq.n	29daa <_close_r+0x16>
   29da8:	bd38      	pop	{r3, r4, r5, pc}
   29daa:	682b      	ldr	r3, [r5, #0]
   29dac:	2b00      	cmp	r3, #0
   29dae:	d0fb      	beq.n	29da8 <_close_r+0x14>
   29db0:	6023      	str	r3, [r4, #0]
   29db2:	bd38      	pop	{r3, r4, r5, pc}
   29db4:	10050264 	.word	0x10050264

00029db8 <_fstat_r>:
   29db8:	b570      	push	{r4, r5, r6, lr}
   29dba:	460c      	mov	r4, r1
   29dbc:	4d08      	ldr	r5, [pc, #32]	@ (29de0 <_fstat_r+0x28>)
   29dbe:	4603      	mov	r3, r0
   29dc0:	2600      	movs	r6, #0
   29dc2:	4620      	mov	r0, r4
   29dc4:	4611      	mov	r1, r2
   29dc6:	461c      	mov	r4, r3
   29dc8:	602e      	str	r6, [r5, #0]
   29dca:	f001 ff21 	bl	2bc10 <_fstat>
   29dce:	1c43      	adds	r3, r0, #1
   29dd0:	d000      	beq.n	29dd4 <_fstat_r+0x1c>
   29dd2:	bd70      	pop	{r4, r5, r6, pc}
   29dd4:	682b      	ldr	r3, [r5, #0]
   29dd6:	2b00      	cmp	r3, #0
   29dd8:	d0fb      	beq.n	29dd2 <_fstat_r+0x1a>
   29dda:	6023      	str	r3, [r4, #0]
   29ddc:	bd70      	pop	{r4, r5, r6, pc}
   29dde:	bf00      	nop
   29de0:	10050264 	.word	0x10050264

00029de4 <_isatty_r>:
   29de4:	b538      	push	{r3, r4, r5, lr}
   29de6:	4d07      	ldr	r5, [pc, #28]	@ (29e04 <_isatty_r+0x20>)
   29de8:	2200      	movs	r2, #0
   29dea:	4604      	mov	r4, r0
   29dec:	4608      	mov	r0, r1
   29dee:	602a      	str	r2, [r5, #0]
   29df0:	f001 ff1e 	bl	2bc30 <_isatty>
   29df4:	1c43      	adds	r3, r0, #1
   29df6:	d000      	beq.n	29dfa <_isatty_r+0x16>
   29df8:	bd38      	pop	{r3, r4, r5, pc}
   29dfa:	682b      	ldr	r3, [r5, #0]
   29dfc:	2b00      	cmp	r3, #0
   29dfe:	d0fb      	beq.n	29df8 <_isatty_r+0x14>
   29e00:	6023      	str	r3, [r4, #0]
   29e02:	bd38      	pop	{r3, r4, r5, pc}
   29e04:	10050264 	.word	0x10050264

00029e08 <_lseek_r>:
   29e08:	b538      	push	{r3, r4, r5, lr}
   29e0a:	460c      	mov	r4, r1
   29e0c:	4d08      	ldr	r5, [pc, #32]	@ (29e30 <_lseek_r+0x28>)
   29e0e:	4684      	mov	ip, r0
   29e10:	4611      	mov	r1, r2
   29e12:	4620      	mov	r0, r4
   29e14:	461a      	mov	r2, r3
   29e16:	2300      	movs	r3, #0
   29e18:	602b      	str	r3, [r5, #0]
   29e1a:	4664      	mov	r4, ip
   29e1c:	f001 ff18 	bl	2bc50 <_lseek>
   29e20:	1c43      	adds	r3, r0, #1
   29e22:	d000      	beq.n	29e26 <_lseek_r+0x1e>
   29e24:	bd38      	pop	{r3, r4, r5, pc}
   29e26:	682b      	ldr	r3, [r5, #0]
   29e28:	2b00      	cmp	r3, #0
   29e2a:	d0fb      	beq.n	29e24 <_lseek_r+0x1c>
   29e2c:	6023      	str	r3, [r4, #0]
   29e2e:	bd38      	pop	{r3, r4, r5, pc}
   29e30:	10050264 	.word	0x10050264

00029e34 <_read_r>:
   29e34:	b538      	push	{r3, r4, r5, lr}
   29e36:	460c      	mov	r4, r1
   29e38:	4d08      	ldr	r5, [pc, #32]	@ (29e5c <_read_r+0x28>)
   29e3a:	4684      	mov	ip, r0
   29e3c:	4611      	mov	r1, r2
   29e3e:	4620      	mov	r0, r4
   29e40:	461a      	mov	r2, r3
   29e42:	2300      	movs	r3, #0
   29e44:	602b      	str	r3, [r5, #0]
   29e46:	4664      	mov	r4, ip
   29e48:	f001 ff0a 	bl	2bc60 <_read>
   29e4c:	1c43      	adds	r3, r0, #1
   29e4e:	d000      	beq.n	29e52 <_read_r+0x1e>
   29e50:	bd38      	pop	{r3, r4, r5, pc}
   29e52:	682b      	ldr	r3, [r5, #0]
   29e54:	2b00      	cmp	r3, #0
   29e56:	d0fb      	beq.n	29e50 <_read_r+0x1c>
   29e58:	6023      	str	r3, [r4, #0]
   29e5a:	bd38      	pop	{r3, r4, r5, pc}
   29e5c:	10050264 	.word	0x10050264

00029e60 <_sbrk_r>:
   29e60:	b538      	push	{r3, r4, r5, lr}
   29e62:	4d07      	ldr	r5, [pc, #28]	@ (29e80 <_sbrk_r+0x20>)
   29e64:	2200      	movs	r2, #0
   29e66:	4604      	mov	r4, r0
   29e68:	4608      	mov	r0, r1
   29e6a:	602a      	str	r2, [r5, #0]
   29e6c:	f001 ff00 	bl	2bc70 <_sbrk>
   29e70:	1c43      	adds	r3, r0, #1
   29e72:	d000      	beq.n	29e76 <_sbrk_r+0x16>
   29e74:	bd38      	pop	{r3, r4, r5, pc}
   29e76:	682b      	ldr	r3, [r5, #0]
   29e78:	2b00      	cmp	r3, #0
   29e7a:	d0fb      	beq.n	29e74 <_sbrk_r+0x14>
   29e7c:	6023      	str	r3, [r4, #0]
   29e7e:	bd38      	pop	{r3, r4, r5, pc}
   29e80:	10050264 	.word	0x10050264

00029e84 <_write_r>:
   29e84:	b538      	push	{r3, r4, r5, lr}
   29e86:	460c      	mov	r4, r1
   29e88:	4d08      	ldr	r5, [pc, #32]	@ (29eac <_write_r+0x28>)
   29e8a:	4684      	mov	ip, r0
   29e8c:	4611      	mov	r1, r2
   29e8e:	4620      	mov	r0, r4
   29e90:	461a      	mov	r2, r3
   29e92:	2300      	movs	r3, #0
   29e94:	602b      	str	r3, [r5, #0]
   29e96:	4664      	mov	r4, ip
   29e98:	f001 fef8 	bl	2bc8c <_write>
   29e9c:	1c43      	adds	r3, r0, #1
   29e9e:	d000      	beq.n	29ea2 <_write_r+0x1e>
   29ea0:	bd38      	pop	{r3, r4, r5, pc}
   29ea2:	682b      	ldr	r3, [r5, #0]
   29ea4:	2b00      	cmp	r3, #0
   29ea6:	d0fb      	beq.n	29ea0 <_write_r+0x1c>
   29ea8:	6023      	str	r3, [r4, #0]
   29eaa:	bd38      	pop	{r3, r4, r5, pc}
   29eac:	10050264 	.word	0x10050264

00029eb0 <sysconf>:
   29eb0:	2808      	cmp	r0, #8
   29eb2:	d102      	bne.n	29eba <sysconf+0xa>
   29eb4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
   29eb8:	4770      	bx	lr
   29eba:	b508      	push	{r3, lr}
   29ebc:	f7fd f928 	bl	27110 <__errno>
   29ec0:	2316      	movs	r3, #22
   29ec2:	6003      	str	r3, [r0, #0]
   29ec4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   29ec8:	bd08      	pop	{r3, pc}
   29eca:	bf00      	nop

00029ecc <__libc_fini_array>:
   29ecc:	b538      	push	{r3, r4, r5, lr}
   29ece:	4d07      	ldr	r5, [pc, #28]	@ (29eec <__libc_fini_array+0x20>)
   29ed0:	4c07      	ldr	r4, [pc, #28]	@ (29ef0 <__libc_fini_array+0x24>)
   29ed2:	1b2c      	subs	r4, r5, r4
   29ed4:	10a4      	asrs	r4, r4, #2
   29ed6:	d005      	beq.n	29ee4 <__libc_fini_array+0x18>
   29ed8:	3c01      	subs	r4, #1
   29eda:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   29ede:	4798      	blx	r3
   29ee0:	2c00      	cmp	r4, #0
   29ee2:	d1f9      	bne.n	29ed8 <__libc_fini_array+0xc>
   29ee4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   29ee8:	f7ef bc36 	b.w	19758 <_fini>
   29eec:	0004d0c4 	.word	0x0004d0c4
   29ef0:	0004d0c0 	.word	0x0004d0c0

00029ef4 <_wcsnrtombs_l>:
   29ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29ef8:	b08b      	sub	sp, #44	@ 0x2c
   29efa:	e9dd 7a15 	ldrd	r7, sl, [sp, #84]	@ 0x54
   29efe:	4686      	mov	lr, r0
   29f00:	461e      	mov	r6, r3
   29f02:	2f00      	cmp	r7, #0
   29f04:	d05a      	beq.n	29fbc <_wcsnrtombs_l+0xc8>
   29f06:	6815      	ldr	r5, [r2, #0]
   29f08:	2900      	cmp	r1, #0
   29f0a:	d05c      	beq.n	29fc6 <_wcsnrtombs_l+0xd2>
   29f0c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
   29f0e:	2b00      	cmp	r3, #0
   29f10:	d069      	beq.n	29fe6 <_wcsnrtombs_l+0xf2>
   29f12:	1e74      	subs	r4, r6, #1
   29f14:	b34e      	cbz	r6, 29f6a <_wcsnrtombs_l+0x76>
   29f16:	3d04      	subs	r5, #4
   29f18:	e9cd 5e01 	strd	r5, lr, [sp, #4]
   29f1c:	f8dd b050 	ldr.w	fp, [sp, #80]	@ 0x50
   29f20:	9104      	str	r1, [sp, #16]
   29f22:	2600      	movs	r6, #0
   29f24:	9103      	str	r1, [sp, #12]
   29f26:	9205      	str	r2, [sp, #20]
   29f28:	e00b      	b.n	29f42 <_wcsnrtombs_l+0x4e>
   29f2a:	9b03      	ldr	r3, [sp, #12]
   29f2c:	bb0b      	cbnz	r3, 29f72 <_wcsnrtombs_l+0x7e>
   29f2e:	9b01      	ldr	r3, [sp, #4]
   29f30:	6818      	ldr	r0, [r3, #0]
   29f32:	2800      	cmp	r0, #0
   29f34:	d036      	beq.n	29fa4 <_wcsnrtombs_l+0xb0>
   29f36:	45dc      	cmp	ip, fp
   29f38:	d257      	bcs.n	29fea <_wcsnrtombs_l+0xf6>
   29f3a:	3c01      	subs	r4, #1
   29f3c:	1c63      	adds	r3, r4, #1
   29f3e:	4666      	mov	r6, ip
   29f40:	d013      	beq.n	29f6a <_wcsnrtombs_l+0x76>
   29f42:	9b01      	ldr	r3, [sp, #4]
   29f44:	9802      	ldr	r0, [sp, #8]
   29f46:	f853 2f04 	ldr.w	r2, [r3, #4]!
   29f4a:	9301      	str	r3, [sp, #4]
   29f4c:	f8da 50e0 	ldr.w	r5, [sl, #224]	@ 0xe0
   29f50:	463b      	mov	r3, r7
   29f52:	a907      	add	r1, sp, #28
   29f54:	e9d7 9800 	ldrd	r9, r8, [r7]
   29f58:	47a8      	blx	r5
   29f5a:	1c42      	adds	r2, r0, #1
   29f5c:	d037      	beq.n	29fce <_wcsnrtombs_l+0xda>
   29f5e:	eb00 0c06 	add.w	ip, r0, r6
   29f62:	45dc      	cmp	ip, fp
   29f64:	d9e1      	bls.n	29f2a <_wcsnrtombs_l+0x36>
   29f66:	e9c7 9800 	strd	r9, r8, [r7]
   29f6a:	4630      	mov	r0, r6
   29f6c:	b00b      	add	sp, #44	@ 0x2c
   29f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29f72:	2800      	cmp	r0, #0
   29f74:	dd0e      	ble.n	29f94 <_wcsnrtombs_l+0xa0>
   29f76:	9b04      	ldr	r3, [sp, #16]
   29f78:	9d01      	ldr	r5, [sp, #4]
   29f7a:	4418      	add	r0, r3
   29f7c:	1e5a      	subs	r2, r3, #1
   29f7e:	a907      	add	r1, sp, #28
   29f80:	f100 3eff 	add.w	lr, r0, #4294967295	@ 0xffffffff
   29f84:	f811 3b01 	ldrb.w	r3, [r1], #1
   29f88:	f802 3f01 	strb.w	r3, [r2, #1]!
   29f8c:	4572      	cmp	r2, lr
   29f8e:	d1f9      	bne.n	29f84 <_wcsnrtombs_l+0x90>
   29f90:	9501      	str	r5, [sp, #4]
   29f92:	9004      	str	r0, [sp, #16]
   29f94:	9b05      	ldr	r3, [sp, #20]
   29f96:	681a      	ldr	r2, [r3, #0]
   29f98:	3204      	adds	r2, #4
   29f9a:	601a      	str	r2, [r3, #0]
   29f9c:	9b01      	ldr	r3, [sp, #4]
   29f9e:	6818      	ldr	r0, [r3, #0]
   29fa0:	2800      	cmp	r0, #0
   29fa2:	d1c8      	bne.n	29f36 <_wcsnrtombs_l+0x42>
   29fa4:	9903      	ldr	r1, [sp, #12]
   29fa6:	9a05      	ldr	r2, [sp, #20]
   29fa8:	b101      	cbz	r1, 29fac <_wcsnrtombs_l+0xb8>
   29faa:	6010      	str	r0, [r2, #0]
   29fac:	f10c 36ff 	add.w	r6, ip, #4294967295	@ 0xffffffff
   29fb0:	2200      	movs	r2, #0
   29fb2:	4630      	mov	r0, r6
   29fb4:	603a      	str	r2, [r7, #0]
   29fb6:	b00b      	add	sp, #44	@ 0x2c
   29fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29fbc:	6815      	ldr	r5, [r2, #0]
   29fbe:	f500 7786 	add.w	r7, r0, #268	@ 0x10c
   29fc2:	2900      	cmp	r1, #0
   29fc4:	d1a2      	bne.n	29f0c <_wcsnrtombs_l+0x18>
   29fc6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
   29fca:	9314      	str	r3, [sp, #80]	@ 0x50
   29fcc:	e7a1      	b.n	29f12 <_wcsnrtombs_l+0x1e>
   29fce:	f8dd e008 	ldr.w	lr, [sp, #8]
   29fd2:	4606      	mov	r6, r0
   29fd4:	218a      	movs	r1, #138	@ 0x8a
   29fd6:	2200      	movs	r2, #0
   29fd8:	4630      	mov	r0, r6
   29fda:	f8ce 1000 	str.w	r1, [lr]
   29fde:	603a      	str	r2, [r7, #0]
   29fe0:	b00b      	add	sp, #44	@ 0x2c
   29fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29fe6:	9e14      	ldr	r6, [sp, #80]	@ 0x50
   29fe8:	e7bf      	b.n	29f6a <_wcsnrtombs_l+0x76>
   29fea:	4666      	mov	r6, ip
   29fec:	e7bd      	b.n	29f6a <_wcsnrtombs_l+0x76>
   29fee:	bf00      	nop

00029ff0 <_wcsnrtombs_r>:
   29ff0:	b510      	push	{r4, lr}
   29ff2:	b084      	sub	sp, #16
   29ff4:	4c05      	ldr	r4, [pc, #20]	@ (2a00c <_wcsnrtombs_r+0x1c>)
   29ff6:	9806      	ldr	r0, [sp, #24]
   29ff8:	9000      	str	r0, [sp, #0]
   29ffa:	9807      	ldr	r0, [sp, #28]
   29ffc:	9001      	str	r0, [sp, #4]
   29ffe:	4804      	ldr	r0, [pc, #16]	@ (2a010 <_wcsnrtombs_r+0x20>)
   2a000:	6800      	ldr	r0, [r0, #0]
   2a002:	9402      	str	r4, [sp, #8]
   2a004:	f7ff ff76 	bl	29ef4 <_wcsnrtombs_l>
   2a008:	b004      	add	sp, #16
   2a00a:	bd10      	pop	{r4, pc}
   2a00c:	1000d3d4 	.word	0x1000d3d4
   2a010:	1000d540 	.word	0x1000d540

0002a014 <quorem>:
   2a014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a018:	6903      	ldr	r3, [r0, #16]
   2a01a:	690c      	ldr	r4, [r1, #16]
   2a01c:	42a3      	cmp	r3, r4
   2a01e:	b083      	sub	sp, #12
   2a020:	f2c0 808a 	blt.w	2a138 <quorem+0x124>
   2a024:	3c01      	subs	r4, #1
   2a026:	f101 0514 	add.w	r5, r1, #20
   2a02a:	f100 0814 	add.w	r8, r0, #20
   2a02e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   2a032:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   2a036:	3301      	adds	r3, #1
   2a038:	429a      	cmp	r2, r3
   2a03a:	468e      	mov	lr, r1
   2a03c:	4681      	mov	r9, r0
   2a03e:	ea4f 0184 	mov.w	r1, r4, lsl #2
   2a042:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   2a046:	eb08 0a84 	add.w	sl, r8, r4, lsl #2
   2a04a:	fbb2 f6f3 	udiv	r6, r2, r3
   2a04e:	d33a      	bcc.n	2a0c6 <quorem+0xb2>
   2a050:	e9cd 1500 	strd	r1, r5, [sp]
   2a054:	2200      	movs	r2, #0
   2a056:	46ac      	mov	ip, r5
   2a058:	4640      	mov	r0, r8
   2a05a:	4613      	mov	r3, r2
   2a05c:	f85c 1b04 	ldr.w	r1, [ip], #4
   2a060:	6805      	ldr	r5, [r0, #0]
   2a062:	fa1f fb81 	uxth.w	fp, r1
   2a066:	fb06 220b 	mla	r2, r6, fp, r2
   2a06a:	0c09      	lsrs	r1, r1, #16
   2a06c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   2a070:	fb06 bb01 	mla	fp, r6, r1, fp
   2a074:	b292      	uxth	r2, r2
   2a076:	b2a9      	uxth	r1, r5
   2a078:	1a89      	subs	r1, r1, r2
   2a07a:	4419      	add	r1, r3
   2a07c:	fa1f f38b 	uxth.w	r3, fp
   2a080:	ebc3 4321 	rsb	r3, r3, r1, asr #16
   2a084:	eb03 4315 	add.w	r3, r3, r5, lsr #16
   2a088:	b289      	uxth	r1, r1
   2a08a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   2a08e:	4567      	cmp	r7, ip
   2a090:	f840 1b04 	str.w	r1, [r0], #4
   2a094:	ea4f 421b 	mov.w	r2, fp, lsr #16
   2a098:	ea4f 4323 	mov.w	r3, r3, asr #16
   2a09c:	d2de      	bcs.n	2a05c <quorem+0x48>
   2a09e:	e9dd 1500 	ldrd	r1, r5, [sp]
   2a0a2:	f858 3001 	ldr.w	r3, [r8, r1]
   2a0a6:	b973      	cbnz	r3, 2a0c6 <quorem+0xb2>
   2a0a8:	f1aa 0a04 	sub.w	sl, sl, #4
   2a0ac:	45d0      	cmp	r8, sl
   2a0ae:	d304      	bcc.n	2a0ba <quorem+0xa6>
   2a0b0:	e007      	b.n	2a0c2 <quorem+0xae>
   2a0b2:	45d0      	cmp	r8, sl
   2a0b4:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
   2a0b8:	d203      	bcs.n	2a0c2 <quorem+0xae>
   2a0ba:	f85a 3904 	ldr.w	r3, [sl], #-4
   2a0be:	2b00      	cmp	r3, #0
   2a0c0:	d0f7      	beq.n	2a0b2 <quorem+0x9e>
   2a0c2:	f8c9 4010 	str.w	r4, [r9, #16]
   2a0c6:	4671      	mov	r1, lr
   2a0c8:	4648      	mov	r0, r9
   2a0ca:	f001 fa91 	bl	2b5f0 <__mcmp>
   2a0ce:	2800      	cmp	r0, #0
   2a0d0:	db2e      	blt.n	2a130 <quorem+0x11c>
   2a0d2:	4641      	mov	r1, r8
   2a0d4:	2200      	movs	r2, #0
   2a0d6:	f855 0b04 	ldr.w	r0, [r5], #4
   2a0da:	f8d1 c000 	ldr.w	ip, [r1]
   2a0de:	fa1f fe80 	uxth.w	lr, r0
   2a0e2:	fa1f f38c 	uxth.w	r3, ip
   2a0e6:	eba3 030e 	sub.w	r3, r3, lr
   2a0ea:	4413      	add	r3, r2
   2a0ec:	0c02      	lsrs	r2, r0, #16
   2a0ee:	ebc2 4223 	rsb	r2, r2, r3, asr #16
   2a0f2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
   2a0f6:	b29b      	uxth	r3, r3
   2a0f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2a0fc:	42af      	cmp	r7, r5
   2a0fe:	f841 3b04 	str.w	r3, [r1], #4
   2a102:	ea4f 4222 	mov.w	r2, r2, asr #16
   2a106:	d2e6      	bcs.n	2a0d6 <quorem+0xc2>
   2a108:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   2a10c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   2a110:	b96a      	cbnz	r2, 2a12e <quorem+0x11a>
   2a112:	3b04      	subs	r3, #4
   2a114:	4543      	cmp	r3, r8
   2a116:	d804      	bhi.n	2a122 <quorem+0x10e>
   2a118:	e007      	b.n	2a12a <quorem+0x116>
   2a11a:	4598      	cmp	r8, r3
   2a11c:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
   2a120:	d203      	bcs.n	2a12a <quorem+0x116>
   2a122:	f853 2904 	ldr.w	r2, [r3], #-4
   2a126:	2a00      	cmp	r2, #0
   2a128:	d0f7      	beq.n	2a11a <quorem+0x106>
   2a12a:	f8c9 4010 	str.w	r4, [r9, #16]
   2a12e:	3601      	adds	r6, #1
   2a130:	4630      	mov	r0, r6
   2a132:	b003      	add	sp, #12
   2a134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a138:	2000      	movs	r0, #0
   2a13a:	b003      	add	sp, #12
   2a13c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002a140 <_dtoa_r>:
   2a140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a144:	b09d      	sub	sp, #116	@ 0x74
   2a146:	e9cd 320a 	strd	r3, r2, [sp, #40]	@ 0x28
   2a14a:	9102      	str	r1, [sp, #8]
   2a14c:	6b81      	ldr	r1, [r0, #56]	@ 0x38
   2a14e:	9d26      	ldr	r5, [sp, #152]	@ 0x98
   2a150:	9004      	str	r0, [sp, #16]
   2a152:	ed8d 0b06 	vstr	d0, [sp, #24]
   2a156:	ec57 6b10 	vmov	r6, r7, d0
   2a15a:	b149      	cbz	r1, 2a170 <_dtoa_r+0x30>
   2a15c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
   2a15e:	604a      	str	r2, [r1, #4]
   2a160:	2301      	movs	r3, #1
   2a162:	4093      	lsls	r3, r2
   2a164:	4604      	mov	r4, r0
   2a166:	608b      	str	r3, [r1, #8]
   2a168:	f000 ffe0 	bl	2b12c <_Bfree>
   2a16c:	2300      	movs	r3, #0
   2a16e:	63a3      	str	r3, [r4, #56]	@ 0x38
   2a170:	f1b7 0900 	subs.w	r9, r7, #0
   2a174:	bfb4      	ite	lt
   2a176:	2301      	movlt	r3, #1
   2a178:	2300      	movge	r3, #0
   2a17a:	602b      	str	r3, [r5, #0]
   2a17c:	4b76      	ldr	r3, [pc, #472]	@ (2a358 <_dtoa_r+0x218>)
   2a17e:	bfbc      	itt	lt
   2a180:	f029 4900 	biclt.w	r9, r9, #2147483648	@ 0x80000000
   2a184:	f8cd 901c 	strlt.w	r9, [sp, #28]
   2a188:	ea33 0309 	bics.w	r3, r3, r9
   2a18c:	f000 80aa 	beq.w	2a2e4 <_dtoa_r+0x1a4>
   2a190:	ed9d 7b06 	vldr	d7, [sp, #24]
   2a194:	2200      	movs	r2, #0
   2a196:	ec51 0b17 	vmov	r0, r1, d7
   2a19a:	2300      	movs	r3, #0
   2a19c:	ed8d 7b00 	vstr	d7, [sp]
   2a1a0:	f7ee ff1e 	bl	18fe0 <__aeabi_dcmpeq>
   2a1a4:	4680      	mov	r8, r0
   2a1a6:	b168      	cbz	r0, 2a1c4 <_dtoa_r+0x84>
   2a1a8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
   2a1aa:	2301      	movs	r3, #1
   2a1ac:	6013      	str	r3, [r2, #0]
   2a1ae:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
   2a1b0:	b113      	cbz	r3, 2a1b8 <_dtoa_r+0x78>
   2a1b2:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
   2a1b4:	4b69      	ldr	r3, [pc, #420]	@ (2a35c <_dtoa_r+0x21c>)
   2a1b6:	6013      	str	r3, [r2, #0]
   2a1b8:	4b69      	ldr	r3, [pc, #420]	@ (2a360 <_dtoa_r+0x220>)
   2a1ba:	9305      	str	r3, [sp, #20]
   2a1bc:	9805      	ldr	r0, [sp, #20]
   2a1be:	b01d      	add	sp, #116	@ 0x74
   2a1c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a1c4:	ed9d 0b00 	vldr	d0, [sp]
   2a1c8:	9804      	ldr	r0, [sp, #16]
   2a1ca:	aa1a      	add	r2, sp, #104	@ 0x68
   2a1cc:	a91b      	add	r1, sp, #108	@ 0x6c
   2a1ce:	f001 faed 	bl	2b7ac <__d2b>
   2a1d2:	ea5f 5519 	movs.w	r5, r9, lsr #20
   2a1d6:	4682      	mov	sl, r0
   2a1d8:	f040 809a 	bne.w	2a310 <_dtoa_r+0x1d0>
   2a1dc:	e9dd 851a 	ldrd	r8, r5, [sp, #104]	@ 0x68
   2a1e0:	4445      	add	r5, r8
   2a1e2:	f205 4332 	addw	r3, r5, #1074	@ 0x432
   2a1e6:	2b20      	cmp	r3, #32
   2a1e8:	f340 838a 	ble.w	2a900 <_dtoa_r+0x7c0>
   2a1ec:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
   2a1f0:	fa09 f903 	lsl.w	r9, r9, r3
   2a1f4:	f205 4312 	addw	r3, r5, #1042	@ 0x412
   2a1f8:	fa26 f303 	lsr.w	r3, r6, r3
   2a1fc:	ea49 0003 	orr.w	r0, r9, r3
   2a200:	f7ee fc0c 	bl	18a1c <__aeabi_ui2d>
   2a204:	2301      	movs	r3, #1
   2a206:	3d01      	subs	r5, #1
   2a208:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
   2a20c:	9312      	str	r3, [sp, #72]	@ 0x48
   2a20e:	4b55      	ldr	r3, [pc, #340]	@ (2a364 <_dtoa_r+0x224>)
   2a210:	2200      	movs	r2, #0
   2a212:	f7ee fac5 	bl	187a0 <__aeabi_dsub>
   2a216:	a34a      	add	r3, pc, #296	@ (adr r3, 2a340 <_dtoa_r+0x200>)
   2a218:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a21c:	f7ee fc78 	bl	18b10 <__aeabi_dmul>
   2a220:	a349      	add	r3, pc, #292	@ (adr r3, 2a348 <_dtoa_r+0x208>)
   2a222:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a226:	f7ee fabd 	bl	187a4 <__adddf3>
   2a22a:	4606      	mov	r6, r0
   2a22c:	4628      	mov	r0, r5
   2a22e:	460f      	mov	r7, r1
   2a230:	f7ee fc04 	bl	18a3c <__aeabi_i2d>
   2a234:	a346      	add	r3, pc, #280	@ (adr r3, 2a350 <_dtoa_r+0x210>)
   2a236:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a23a:	f7ee fc69 	bl	18b10 <__aeabi_dmul>
   2a23e:	4602      	mov	r2, r0
   2a240:	460b      	mov	r3, r1
   2a242:	4630      	mov	r0, r6
   2a244:	4639      	mov	r1, r7
   2a246:	f7ee faad 	bl	187a4 <__adddf3>
   2a24a:	4606      	mov	r6, r0
   2a24c:	460f      	mov	r7, r1
   2a24e:	f7ee ff0f 	bl	19070 <__aeabi_d2iz>
   2a252:	2200      	movs	r2, #0
   2a254:	4604      	mov	r4, r0
   2a256:	9009      	str	r0, [sp, #36]	@ 0x24
   2a258:	2300      	movs	r3, #0
   2a25a:	4630      	mov	r0, r6
   2a25c:	4639      	mov	r1, r7
   2a25e:	f7ee fec9 	bl	18ff4 <__aeabi_dcmplt>
   2a262:	2800      	cmp	r0, #0
   2a264:	f040 8322 	bne.w	2a8ac <_dtoa_r+0x76c>
   2a268:	9c09      	ldr	r4, [sp, #36]	@ 0x24
   2a26a:	eba8 0805 	sub.w	r8, r8, r5
   2a26e:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
   2a272:	2c16      	cmp	r4, #22
   2a274:	9308      	str	r3, [sp, #32]
   2a276:	f200 818a 	bhi.w	2a58e <_dtoa_r+0x44e>
   2a27a:	4b3b      	ldr	r3, [pc, #236]	@ (2a368 <_dtoa_r+0x228>)
   2a27c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   2a280:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a284:	e9dd 0100 	ldrd	r0, r1, [sp]
   2a288:	f7ee feb4 	bl	18ff4 <__aeabi_dcmplt>
   2a28c:	2800      	cmp	r0, #0
   2a28e:	d071      	beq.n	2a374 <_dtoa_r+0x234>
   2a290:	1e63      	subs	r3, r4, #1
   2a292:	9309      	str	r3, [sp, #36]	@ 0x24
   2a294:	2300      	movs	r3, #0
   2a296:	9311      	str	r3, [sp, #68]	@ 0x44
   2a298:	9b08      	ldr	r3, [sp, #32]
   2a29a:	2b00      	cmp	r3, #0
   2a29c:	f2c0 817d 	blt.w	2a59a <_dtoa_r+0x45a>
   2a2a0:	2300      	movs	r3, #0
   2a2a2:	930c      	str	r3, [sp, #48]	@ 0x30
   2a2a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   2a2a6:	2b00      	cmp	r3, #0
   2a2a8:	da6a      	bge.n	2a380 <_dtoa_r+0x240>
   2a2aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   2a2ac:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
   2a2ae:	930d      	str	r3, [sp, #52]	@ 0x34
   2a2b0:	1ad2      	subs	r2, r2, r3
   2a2b2:	920c      	str	r2, [sp, #48]	@ 0x30
   2a2b4:	425a      	negs	r2, r3
   2a2b6:	2300      	movs	r3, #0
   2a2b8:	9309      	str	r3, [sp, #36]	@ 0x24
   2a2ba:	9b02      	ldr	r3, [sp, #8]
   2a2bc:	9210      	str	r2, [sp, #64]	@ 0x40
   2a2be:	2b09      	cmp	r3, #9
   2a2c0:	d868      	bhi.n	2a394 <_dtoa_r+0x254>
   2a2c2:	2b05      	cmp	r3, #5
   2a2c4:	f340 8321 	ble.w	2a90a <_dtoa_r+0x7ca>
   2a2c8:	3b04      	subs	r3, #4
   2a2ca:	9302      	str	r3, [sp, #8]
   2a2cc:	2500      	movs	r5, #0
   2a2ce:	9b02      	ldr	r3, [sp, #8]
   2a2d0:	3b02      	subs	r3, #2
   2a2d2:	2b03      	cmp	r3, #3
   2a2d4:	f200 8636 	bhi.w	2af44 <_dtoa_r+0xe04>
   2a2d8:	e8df f013 	tbh	[pc, r3, lsl #1]
   2a2dc:	046b046e 	.word	0x046b046e
   2a2e0:	04470463 	.word	0x04470463
   2a2e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
   2a2e6:	f3c9 0913 	ubfx	r9, r9, #0, #20
   2a2ea:	f242 730f 	movw	r3, #9999	@ 0x270f
   2a2ee:	ea59 0906 	orrs.w	r9, r9, r6
   2a2f2:	6013      	str	r3, [r2, #0]
   2a2f4:	d11c      	bne.n	2a330 <_dtoa_r+0x1f0>
   2a2f6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
   2a2f8:	2b00      	cmp	r3, #0
   2a2fa:	f000 8643 	beq.w	2af84 <_dtoa_r+0xe44>
   2a2fe:	4b1b      	ldr	r3, [pc, #108]	@ (2a36c <_dtoa_r+0x22c>)
   2a300:	9305      	str	r3, [sp, #20]
   2a302:	3308      	adds	r3, #8
   2a304:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
   2a306:	9805      	ldr	r0, [sp, #20]
   2a308:	6013      	str	r3, [r2, #0]
   2a30a:	b01d      	add	sp, #116	@ 0x74
   2a30c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a310:	e9dd 1200 	ldrd	r1, r2, [sp]
   2a314:	f3c2 0313 	ubfx	r3, r2, #0, #20
   2a318:	4608      	mov	r0, r1
   2a31a:	f043 517f 	orr.w	r1, r3, #1069547520	@ 0x3fc00000
   2a31e:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
   2a322:	f2a5 35ff 	subw	r5, r5, #1023	@ 0x3ff
   2a326:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
   2a32a:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
   2a32e:	e76e      	b.n	2a20e <_dtoa_r+0xce>
   2a330:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
   2a332:	2b00      	cmp	r3, #0
   2a334:	f040 83f4 	bne.w	2ab20 <_dtoa_r+0x9e0>
   2a338:	4b0d      	ldr	r3, [pc, #52]	@ (2a370 <_dtoa_r+0x230>)
   2a33a:	9305      	str	r3, [sp, #20]
   2a33c:	e73e      	b.n	2a1bc <_dtoa_r+0x7c>
   2a33e:	bf00      	nop
   2a340:	636f4361 	.word	0x636f4361
   2a344:	3fd287a7 	.word	0x3fd287a7
   2a348:	8b60c8b3 	.word	0x8b60c8b3
   2a34c:	3fc68a28 	.word	0x3fc68a28
   2a350:	509f79fb 	.word	0x509f79fb
   2a354:	3fd34413 	.word	0x3fd34413
   2a358:	7ff00000 	.word	0x7ff00000
   2a35c:	00043a85 	.word	0x00043a85
   2a360:	00043a84 	.word	0x00043a84
   2a364:	3ff80000 	.word	0x3ff80000
   2a368:	0004b748 	.word	0x0004b748
   2a36c:	00043d58 	.word	0x00043d58
   2a370:	00043d64 	.word	0x00043d64
   2a374:	f1b8 0f00 	cmp.w	r8, #0
   2a378:	f340 84a3 	ble.w	2acc2 <_dtoa_r+0xb82>
   2a37c:	9011      	str	r0, [sp, #68]	@ 0x44
   2a37e:	900c      	str	r0, [sp, #48]	@ 0x30
   2a380:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   2a384:	4413      	add	r3, r2
   2a386:	9308      	str	r3, [sp, #32]
   2a388:	2300      	movs	r3, #0
   2a38a:	9310      	str	r3, [sp, #64]	@ 0x40
   2a38c:	9b02      	ldr	r3, [sp, #8]
   2a38e:	920d      	str	r2, [sp, #52]	@ 0x34
   2a390:	2b09      	cmp	r3, #9
   2a392:	d996      	bls.n	2a2c2 <_dtoa_r+0x182>
   2a394:	2300      	movs	r3, #0
   2a396:	2501      	movs	r5, #1
   2a398:	9302      	str	r3, [sp, #8]
   2a39a:	950e      	str	r5, [sp, #56]	@ 0x38
   2a39c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
   2a3a0:	930b      	str	r3, [sp, #44]	@ 0x2c
   2a3a2:	9b04      	ldr	r3, [sp, #16]
   2a3a4:	f8cd b04c 	str.w	fp, [sp, #76]	@ 0x4c
   2a3a8:	2100      	movs	r1, #0
   2a3aa:	63d9      	str	r1, [r3, #60]	@ 0x3c
   2a3ac:	9804      	ldr	r0, [sp, #16]
   2a3ae:	f000 fe97 	bl	2b0e0 <_Balloc>
   2a3b2:	9005      	str	r0, [sp, #20]
   2a3b4:	2800      	cmp	r0, #0
   2a3b6:	f000 85ce 	beq.w	2af56 <_dtoa_r+0xe16>
   2a3ba:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   2a3be:	f1bb 0f0e 	cmp.w	fp, #14
   2a3c2:	639a      	str	r2, [r3, #56]	@ 0x38
   2a3c4:	f200 8118 	bhi.w	2a5f8 <_dtoa_r+0x4b8>
   2a3c8:	2d00      	cmp	r5, #0
   2a3ca:	f000 8115 	beq.w	2a5f8 <_dtoa_r+0x4b8>
   2a3ce:	990d      	ldr	r1, [sp, #52]	@ 0x34
   2a3d0:	2900      	cmp	r1, #0
   2a3d2:	f340 8446 	ble.w	2ac62 <_dtoa_r+0xb22>
   2a3d6:	4bb3      	ldr	r3, [pc, #716]	@ (2a6a4 <_dtoa_r+0x564>)
   2a3d8:	f001 020f 	and.w	r2, r1, #15
   2a3dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2a3e0:	05c8      	lsls	r0, r1, #23
   2a3e2:	e9d3 8900 	ldrd	r8, r9, [r3]
   2a3e6:	ea4f 1521 	mov.w	r5, r1, asr #4
   2a3ea:	f140 8408 	bpl.w	2abfe <_dtoa_r+0xabe>
   2a3ee:	4bae      	ldr	r3, [pc, #696]	@ (2a6a8 <_dtoa_r+0x568>)
   2a3f0:	e9dd 0100 	ldrd	r0, r1, [sp]
   2a3f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   2a3f8:	f7ee fcb4 	bl	18d64 <__aeabi_ddiv>
   2a3fc:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
   2a400:	f005 050f 	and.w	r5, r5, #15
   2a404:	2703      	movs	r7, #3
   2a406:	b17d      	cbz	r5, 2a428 <_dtoa_r+0x2e8>
   2a408:	4ea7      	ldr	r6, [pc, #668]	@ (2a6a8 <_dtoa_r+0x568>)
   2a40a:	07e9      	lsls	r1, r5, #31
   2a40c:	d508      	bpl.n	2a420 <_dtoa_r+0x2e0>
   2a40e:	4640      	mov	r0, r8
   2a410:	4649      	mov	r1, r9
   2a412:	e9d6 2300 	ldrd	r2, r3, [r6]
   2a416:	f7ee fb7b 	bl	18b10 <__aeabi_dmul>
   2a41a:	3701      	adds	r7, #1
   2a41c:	4680      	mov	r8, r0
   2a41e:	4689      	mov	r9, r1
   2a420:	106d      	asrs	r5, r5, #1
   2a422:	f106 0608 	add.w	r6, r6, #8
   2a426:	d1f0      	bne.n	2a40a <_dtoa_r+0x2ca>
   2a428:	4642      	mov	r2, r8
   2a42a:	464b      	mov	r3, r9
   2a42c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
   2a430:	f7ee fc98 	bl	18d64 <__aeabi_ddiv>
   2a434:	4680      	mov	r8, r0
   2a436:	4689      	mov	r9, r1
   2a438:	9b11      	ldr	r3, [sp, #68]	@ 0x44
   2a43a:	b143      	cbz	r3, 2a44e <_dtoa_r+0x30e>
   2a43c:	4b9b      	ldr	r3, [pc, #620]	@ (2a6ac <_dtoa_r+0x56c>)
   2a43e:	2200      	movs	r2, #0
   2a440:	4640      	mov	r0, r8
   2a442:	4649      	mov	r1, r9
   2a444:	f7ee fdd6 	bl	18ff4 <__aeabi_dcmplt>
   2a448:	2800      	cmp	r0, #0
   2a44a:	f040 850b 	bne.w	2ae64 <_dtoa_r+0xd24>
   2a44e:	4638      	mov	r0, r7
   2a450:	f7ee faf4 	bl	18a3c <__aeabi_i2d>
   2a454:	4642      	mov	r2, r8
   2a456:	464b      	mov	r3, r9
   2a458:	f7ee fb5a 	bl	18b10 <__aeabi_dmul>
   2a45c:	4b94      	ldr	r3, [pc, #592]	@ (2a6b0 <_dtoa_r+0x570>)
   2a45e:	2200      	movs	r2, #0
   2a460:	f7ee f9a0 	bl	187a4 <__adddf3>
   2a464:	f1a1 7350 	sub.w	r3, r1, #54525952	@ 0x3400000
   2a468:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
   2a46c:	9315      	str	r3, [sp, #84]	@ 0x54
   2a46e:	f1bb 0f00 	cmp.w	fp, #0
   2a472:	f000 80a8 	beq.w	2a5c6 <_dtoa_r+0x486>
   2a476:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   2a478:	e9cd b318 	strd	fp, r3, [sp, #96]	@ 0x60
   2a47c:	4649      	mov	r1, r9
   2a47e:	4640      	mov	r0, r8
   2a480:	f7ee fdf6 	bl	19070 <__aeabi_d2iz>
   2a484:	9a18      	ldr	r2, [sp, #96]	@ 0x60
   2a486:	4b87      	ldr	r3, [pc, #540]	@ (2a6a4 <_dtoa_r+0x564>)
   2a488:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2a48c:	ed13 7b02 	vldr	d7, [r3, #-8]
   2a490:	4605      	mov	r5, r0
   2a492:	ed8d 7b16 	vstr	d7, [sp, #88]	@ 0x58
   2a496:	f7ee fad1 	bl	18a3c <__aeabi_i2d>
   2a49a:	460b      	mov	r3, r1
   2a49c:	4602      	mov	r2, r0
   2a49e:	4649      	mov	r1, r9
   2a4a0:	4640      	mov	r0, r8
   2a4a2:	f7ee f97d 	bl	187a0 <__aeabi_dsub>
   2a4a6:	9f05      	ldr	r7, [sp, #20]
   2a4a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   2a4aa:	3530      	adds	r5, #48	@ 0x30
   2a4ac:	1c7e      	adds	r6, r7, #1
   2a4ae:	b2ec      	uxtb	r4, r5
   2a4b0:	4680      	mov	r8, r0
   2a4b2:	4689      	mov	r9, r1
   2a4b4:	4635      	mov	r5, r6
   2a4b6:	2b00      	cmp	r3, #0
   2a4b8:	f000 846c 	beq.w	2ad94 <_dtoa_r+0xc54>
   2a4bc:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	@ 0x58
   2a4c0:	497c      	ldr	r1, [pc, #496]	@ (2a6b4 <_dtoa_r+0x574>)
   2a4c2:	2000      	movs	r0, #0
   2a4c4:	f7ee fc4e 	bl	18d64 <__aeabi_ddiv>
   2a4c8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
   2a4cc:	f7ee f968 	bl	187a0 <__aeabi_dsub>
   2a4d0:	703c      	strb	r4, [r7, #0]
   2a4d2:	4642      	mov	r2, r8
   2a4d4:	464b      	mov	r3, r9
   2a4d6:	4604      	mov	r4, r0
   2a4d8:	460d      	mov	r5, r1
   2a4da:	f7ee fda9 	bl	19030 <__aeabi_dcmpgt>
   2a4de:	2800      	cmp	r0, #0
   2a4e0:	f040 84b8 	bne.w	2ae54 <_dtoa_r+0xd14>
   2a4e4:	f8cd a050 	str.w	sl, [sp, #80]	@ 0x50
   2a4e8:	f8cd b058 	str.w	fp, [sp, #88]	@ 0x58
   2a4ec:	2700      	movs	r7, #0
   2a4ee:	46ab      	mov	fp, r5
   2a4f0:	46a2      	mov	sl, r4
   2a4f2:	9d18      	ldr	r5, [sp, #96]	@ 0x60
   2a4f4:	e02a      	b.n	2a54c <_dtoa_r+0x40c>
   2a4f6:	3701      	adds	r7, #1
   2a4f8:	42af      	cmp	r7, r5
   2a4fa:	f280 84fd 	bge.w	2aef8 <_dtoa_r+0xdb8>
   2a4fe:	4b6e      	ldr	r3, [pc, #440]	@ (2a6b8 <_dtoa_r+0x578>)
   2a500:	4650      	mov	r0, sl
   2a502:	4659      	mov	r1, fp
   2a504:	2200      	movs	r2, #0
   2a506:	f7ee fb03 	bl	18b10 <__aeabi_dmul>
   2a50a:	4b6b      	ldr	r3, [pc, #428]	@ (2a6b8 <_dtoa_r+0x578>)
   2a50c:	2200      	movs	r2, #0
   2a50e:	4682      	mov	sl, r0
   2a510:	468b      	mov	fp, r1
   2a512:	4640      	mov	r0, r8
   2a514:	4649      	mov	r1, r9
   2a516:	f7ee fafb 	bl	18b10 <__aeabi_dmul>
   2a51a:	4689      	mov	r9, r1
   2a51c:	4680      	mov	r8, r0
   2a51e:	f7ee fda7 	bl	19070 <__aeabi_d2iz>
   2a522:	4604      	mov	r4, r0
   2a524:	f7ee fa8a 	bl	18a3c <__aeabi_i2d>
   2a528:	4602      	mov	r2, r0
   2a52a:	460b      	mov	r3, r1
   2a52c:	4640      	mov	r0, r8
   2a52e:	4649      	mov	r1, r9
   2a530:	f7ee f936 	bl	187a0 <__aeabi_dsub>
   2a534:	3430      	adds	r4, #48	@ 0x30
   2a536:	f806 4b01 	strb.w	r4, [r6], #1
   2a53a:	4652      	mov	r2, sl
   2a53c:	465b      	mov	r3, fp
   2a53e:	4680      	mov	r8, r0
   2a540:	4689      	mov	r9, r1
   2a542:	f7ee fd57 	bl	18ff4 <__aeabi_dcmplt>
   2a546:	2800      	cmp	r0, #0
   2a548:	f040 84d3 	bne.w	2aef2 <_dtoa_r+0xdb2>
   2a54c:	4642      	mov	r2, r8
   2a54e:	464b      	mov	r3, r9
   2a550:	4956      	ldr	r1, [pc, #344]	@ (2a6ac <_dtoa_r+0x56c>)
   2a552:	2000      	movs	r0, #0
   2a554:	f7ee f924 	bl	187a0 <__aeabi_dsub>
   2a558:	4652      	mov	r2, sl
   2a55a:	465b      	mov	r3, fp
   2a55c:	f7ee fd4a 	bl	18ff4 <__aeabi_dcmplt>
   2a560:	2800      	cmp	r0, #0
   2a562:	d0c8      	beq.n	2a4f6 <_dtoa_r+0x3b6>
   2a564:	9b19      	ldr	r3, [sp, #100]	@ 0x64
   2a566:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
   2a56a:	9a05      	ldr	r2, [sp, #20]
   2a56c:	4637      	mov	r7, r6
   2a56e:	f103 0801 	add.w	r8, r3, #1
   2a572:	e002      	b.n	2a57a <_dtoa_r+0x43a>
   2a574:	4297      	cmp	r7, r2
   2a576:	f000 849b 	beq.w	2aeb0 <_dtoa_r+0xd70>
   2a57a:	463e      	mov	r6, r7
   2a57c:	f817 3d01 	ldrb.w	r3, [r7, #-1]!
   2a580:	2b39      	cmp	r3, #57	@ 0x39
   2a582:	d0f7      	beq.n	2a574 <_dtoa_r+0x434>
   2a584:	3301      	adds	r3, #1
   2a586:	b2db      	uxtb	r3, r3
   2a588:	703b      	strb	r3, [r7, #0]
   2a58a:	4645      	mov	r5, r8
   2a58c:	e17d      	b.n	2a88a <_dtoa_r+0x74a>
   2a58e:	2301      	movs	r3, #1
   2a590:	9311      	str	r3, [sp, #68]	@ 0x44
   2a592:	9b08      	ldr	r3, [sp, #32]
   2a594:	2b00      	cmp	r3, #0
   2a596:	f6bf ae83 	bge.w	2a2a0 <_dtoa_r+0x160>
   2a59a:	f1c8 0301 	rsb	r3, r8, #1
   2a59e:	930c      	str	r3, [sp, #48]	@ 0x30
   2a5a0:	2300      	movs	r3, #0
   2a5a2:	9308      	str	r3, [sp, #32]
   2a5a4:	e67e      	b.n	2a2a4 <_dtoa_r+0x164>
   2a5a6:	4638      	mov	r0, r7
   2a5a8:	f7ee fa48 	bl	18a3c <__aeabi_i2d>
   2a5ac:	4642      	mov	r2, r8
   2a5ae:	464b      	mov	r3, r9
   2a5b0:	f7ee faae 	bl	18b10 <__aeabi_dmul>
   2a5b4:	4b3e      	ldr	r3, [pc, #248]	@ (2a6b0 <_dtoa_r+0x570>)
   2a5b6:	2200      	movs	r2, #0
   2a5b8:	f7ee f8f4 	bl	187a4 <__adddf3>
   2a5bc:	f1a1 7350 	sub.w	r3, r1, #54525952	@ 0x3400000
   2a5c0:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
   2a5c4:	9315      	str	r3, [sp, #84]	@ 0x54
   2a5c6:	4b3d      	ldr	r3, [pc, #244]	@ (2a6bc <_dtoa_r+0x57c>)
   2a5c8:	2200      	movs	r2, #0
   2a5ca:	4640      	mov	r0, r8
   2a5cc:	4649      	mov	r1, r9
   2a5ce:	f7ee f8e7 	bl	187a0 <__aeabi_dsub>
   2a5d2:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	@ 0x50
   2a5d6:	4622      	mov	r2, r4
   2a5d8:	462b      	mov	r3, r5
   2a5da:	4606      	mov	r6, r0
   2a5dc:	460f      	mov	r7, r1
   2a5de:	f7ee fd27 	bl	19030 <__aeabi_dcmpgt>
   2a5e2:	2800      	cmp	r0, #0
   2a5e4:	f040 8473 	bne.w	2aece <_dtoa_r+0xd8e>
   2a5e8:	4630      	mov	r0, r6
   2a5ea:	4639      	mov	r1, r7
   2a5ec:	4622      	mov	r2, r4
   2a5ee:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
   2a5f2:	f7ee fcff 	bl	18ff4 <__aeabi_dcmplt>
   2a5f6:	bb28      	cbnz	r0, 2a644 <_dtoa_r+0x504>
   2a5f8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
   2a5fa:	2b00      	cmp	r3, #0
   2a5fc:	f2c0 8090 	blt.w	2a720 <_dtoa_r+0x5e0>
   2a600:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
   2a602:	2a0e      	cmp	r2, #14
   2a604:	f300 808c 	bgt.w	2a720 <_dtoa_r+0x5e0>
   2a608:	4b26      	ldr	r3, [pc, #152]	@ (2a6a4 <_dtoa_r+0x564>)
   2a60a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
   2a60c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2a610:	ed93 7b00 	vldr	d7, [r3]
   2a614:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   2a616:	2b00      	cmp	r3, #0
   2a618:	ed8d 7b02 	vstr	d7, [sp, #8]
   2a61c:	da19      	bge.n	2a652 <_dtoa_r+0x512>
   2a61e:	f1bb 0f00 	cmp.w	fp, #0
   2a622:	dc16      	bgt.n	2a652 <_dtoa_r+0x512>
   2a624:	d10e      	bne.n	2a644 <_dtoa_r+0x504>
   2a626:	4b25      	ldr	r3, [pc, #148]	@ (2a6bc <_dtoa_r+0x57c>)
   2a628:	2200      	movs	r2, #0
   2a62a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   2a62e:	f7ee fa6f 	bl	18b10 <__aeabi_dmul>
   2a632:	4602      	mov	r2, r0
   2a634:	460b      	mov	r3, r1
   2a636:	e9dd 0100 	ldrd	r0, r1, [sp]
   2a63a:	f7ee fce5 	bl	19008 <__aeabi_dcmple>
   2a63e:	2800      	cmp	r0, #0
   2a640:	f000 8445 	beq.w	2aece <_dtoa_r+0xd8e>
   2a644:	2300      	movs	r3, #0
   2a646:	9e05      	ldr	r6, [sp, #20]
   2a648:	9300      	str	r3, [sp, #0]
   2a64a:	461f      	mov	r7, r3
   2a64c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   2a64e:	43dd      	mvns	r5, r3
   2a650:	e22d      	b.n	2aaae <_dtoa_r+0x96e>
   2a652:	9b05      	ldr	r3, [sp, #20]
   2a654:	1c5d      	adds	r5, r3, #1
   2a656:	e9dd 7802 	ldrd	r7, r8, [sp, #8]
   2a65a:	e9dd 0100 	ldrd	r0, r1, [sp]
   2a65e:	463a      	mov	r2, r7
   2a660:	4643      	mov	r3, r8
   2a662:	f7ee fb7f 	bl	18d64 <__aeabi_ddiv>
   2a666:	f7ee fd03 	bl	19070 <__aeabi_d2iz>
   2a66a:	4606      	mov	r6, r0
   2a66c:	f7ee f9e6 	bl	18a3c <__aeabi_i2d>
   2a670:	463a      	mov	r2, r7
   2a672:	4643      	mov	r3, r8
   2a674:	f7ee fa4c 	bl	18b10 <__aeabi_dmul>
   2a678:	4602      	mov	r2, r0
   2a67a:	460b      	mov	r3, r1
   2a67c:	e9dd 0100 	ldrd	r0, r1, [sp]
   2a680:	f7ee f88e 	bl	187a0 <__aeabi_dsub>
   2a684:	9a05      	ldr	r2, [sp, #20]
   2a686:	f106 0330 	add.w	r3, r6, #48	@ 0x30
   2a68a:	f1bb 0f01 	cmp.w	fp, #1
   2a68e:	462f      	mov	r7, r5
   2a690:	7013      	strb	r3, [r2, #0]
   2a692:	f000 8321 	beq.w	2acd8 <_dtoa_r+0xb98>
   2a696:	2501      	movs	r5, #1
   2a698:	f8cd a000 	str.w	sl, [sp]
   2a69c:	46a8      	mov	r8, r5
   2a69e:	e9dd 9a02 	ldrd	r9, sl, [sp, #8]
   2a6a2:	e02b      	b.n	2a6fc <_dtoa_r+0x5bc>
   2a6a4:	0004b748 	.word	0x0004b748
   2a6a8:	0004b720 	.word	0x0004b720
   2a6ac:	3ff00000 	.word	0x3ff00000
   2a6b0:	401c0000 	.word	0x401c0000
   2a6b4:	3fe00000 	.word	0x3fe00000
   2a6b8:	40240000 	.word	0x40240000
   2a6bc:	40140000 	.word	0x40140000
   2a6c0:	464a      	mov	r2, r9
   2a6c2:	4653      	mov	r3, sl
   2a6c4:	4620      	mov	r0, r4
   2a6c6:	4629      	mov	r1, r5
   2a6c8:	f7ee fb4c 	bl	18d64 <__aeabi_ddiv>
   2a6cc:	f7ee fcd0 	bl	19070 <__aeabi_d2iz>
   2a6d0:	4606      	mov	r6, r0
   2a6d2:	f7ee f9b3 	bl	18a3c <__aeabi_i2d>
   2a6d6:	464a      	mov	r2, r9
   2a6d8:	4653      	mov	r3, sl
   2a6da:	f7ee fa19 	bl	18b10 <__aeabi_dmul>
   2a6de:	f108 0801 	add.w	r8, r8, #1
   2a6e2:	460b      	mov	r3, r1
   2a6e4:	4602      	mov	r2, r0
   2a6e6:	4629      	mov	r1, r5
   2a6e8:	4620      	mov	r0, r4
   2a6ea:	f7ee f859 	bl	187a0 <__aeabi_dsub>
   2a6ee:	f106 0330 	add.w	r3, r6, #48	@ 0x30
   2a6f2:	45d8      	cmp	r8, fp
   2a6f4:	f807 3b01 	strb.w	r3, [r7], #1
   2a6f8:	f000 82ec 	beq.w	2acd4 <_dtoa_r+0xb94>
   2a6fc:	4b84      	ldr	r3, [pc, #528]	@ (2a910 <_dtoa_r+0x7d0>)
   2a6fe:	2200      	movs	r2, #0
   2a700:	f7ee fa06 	bl	18b10 <__aeabi_dmul>
   2a704:	2200      	movs	r2, #0
   2a706:	2300      	movs	r3, #0
   2a708:	4604      	mov	r4, r0
   2a70a:	460d      	mov	r5, r1
   2a70c:	f7ee fc68 	bl	18fe0 <__aeabi_dcmpeq>
   2a710:	2800      	cmp	r0, #0
   2a712:	d0d5      	beq.n	2a6c0 <_dtoa_r+0x580>
   2a714:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
   2a716:	f8dd a000 	ldr.w	sl, [sp]
   2a71a:	3501      	adds	r5, #1
   2a71c:	463e      	mov	r6, r7
   2a71e:	e0b4      	b.n	2a88a <_dtoa_r+0x74a>
   2a720:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
   2a722:	2a00      	cmp	r2, #0
   2a724:	f040 80d8 	bne.w	2a8d8 <_dtoa_r+0x798>
   2a728:	2300      	movs	r3, #0
   2a72a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
   2a72c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
   2a72e:	930e      	str	r3, [sp, #56]	@ 0x38
   2a730:	461f      	mov	r7, r3
   2a732:	b165      	cbz	r5, 2a74e <_dtoa_r+0x60e>
   2a734:	9a08      	ldr	r2, [sp, #32]
   2a736:	2a00      	cmp	r2, #0
   2a738:	dd09      	ble.n	2a74e <_dtoa_r+0x60e>
   2a73a:	990c      	ldr	r1, [sp, #48]	@ 0x30
   2a73c:	42aa      	cmp	r2, r5
   2a73e:	4613      	mov	r3, r2
   2a740:	bfa8      	it	ge
   2a742:	462b      	movge	r3, r5
   2a744:	1ac9      	subs	r1, r1, r3
   2a746:	1aed      	subs	r5, r5, r3
   2a748:	1ad3      	subs	r3, r2, r3
   2a74a:	910c      	str	r1, [sp, #48]	@ 0x30
   2a74c:	9308      	str	r3, [sp, #32]
   2a74e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
   2a750:	b153      	cbz	r3, 2a768 <_dtoa_r+0x628>
   2a752:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   2a754:	b113      	cbz	r3, 2a75c <_dtoa_r+0x61c>
   2a756:	2e00      	cmp	r6, #0
   2a758:	f040 82f7 	bne.w	2ad4a <_dtoa_r+0xc0a>
   2a75c:	4651      	mov	r1, sl
   2a75e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
   2a760:	9804      	ldr	r0, [sp, #16]
   2a762:	f000 fe73 	bl	2b44c <__pow5mult>
   2a766:	4682      	mov	sl, r0
   2a768:	9804      	ldr	r0, [sp, #16]
   2a76a:	2101      	movs	r1, #1
   2a76c:	f000 fd8a 	bl	2b284 <__i2b>
   2a770:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   2a772:	9000      	str	r0, [sp, #0]
   2a774:	2b00      	cmp	r3, #0
   2a776:	f040 81be 	bne.w	2aaf6 <_dtoa_r+0x9b6>
   2a77a:	9b02      	ldr	r3, [sp, #8]
   2a77c:	2b01      	cmp	r3, #1
   2a77e:	f340 81d4 	ble.w	2ab2a <_dtoa_r+0x9ea>
   2a782:	2001      	movs	r0, #1
   2a784:	9a08      	ldr	r2, [sp, #32]
   2a786:	4410      	add	r0, r2
   2a788:	f010 001f 	ands.w	r0, r0, #31
   2a78c:	f000 809b 	beq.w	2a8c6 <_dtoa_r+0x786>
   2a790:	f1c0 0320 	rsb	r3, r0, #32
   2a794:	2b04      	cmp	r3, #4
   2a796:	f340 81e3 	ble.w	2ab60 <_dtoa_r+0xa20>
   2a79a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   2a79c:	f1c0 001c 	rsb	r0, r0, #28
   2a7a0:	4403      	add	r3, r0
   2a7a2:	4402      	add	r2, r0
   2a7a4:	930c      	str	r3, [sp, #48]	@ 0x30
   2a7a6:	4405      	add	r5, r0
   2a7a8:	9208      	str	r2, [sp, #32]
   2a7aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   2a7ac:	2b00      	cmp	r3, #0
   2a7ae:	dd05      	ble.n	2a7bc <_dtoa_r+0x67c>
   2a7b0:	4651      	mov	r1, sl
   2a7b2:	9804      	ldr	r0, [sp, #16]
   2a7b4:	461a      	mov	r2, r3
   2a7b6:	f000 fea3 	bl	2b500 <__lshift>
   2a7ba:	4682      	mov	sl, r0
   2a7bc:	9b08      	ldr	r3, [sp, #32]
   2a7be:	2b00      	cmp	r3, #0
   2a7c0:	dd05      	ble.n	2a7ce <_dtoa_r+0x68e>
   2a7c2:	9900      	ldr	r1, [sp, #0]
   2a7c4:	9804      	ldr	r0, [sp, #16]
   2a7c6:	461a      	mov	r2, r3
   2a7c8:	f000 fe9a 	bl	2b500 <__lshift>
   2a7cc:	9000      	str	r0, [sp, #0]
   2a7ce:	9b11      	ldr	r3, [sp, #68]	@ 0x44
   2a7d0:	2b00      	cmp	r3, #0
   2a7d2:	f040 8175 	bne.w	2aac0 <_dtoa_r+0x980>
   2a7d6:	f1bb 0f00 	cmp.w	fp, #0
   2a7da:	f340 814c 	ble.w	2aa76 <_dtoa_r+0x936>
   2a7de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   2a7e0:	2b00      	cmp	r3, #0
   2a7e2:	f040 80a4 	bne.w	2a92e <_dtoa_r+0x7ee>
   2a7e6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
   2a7e8:	3501      	adds	r5, #1
   2a7ea:	f8dd 8014 	ldr.w	r8, [sp, #20]
   2a7ee:	9c00      	ldr	r4, [sp, #0]
   2a7f0:	f8dd 9010 	ldr.w	r9, [sp, #16]
   2a7f4:	2601      	movs	r6, #1
   2a7f6:	e007      	b.n	2a808 <_dtoa_r+0x6c8>
   2a7f8:	4651      	mov	r1, sl
   2a7fa:	2300      	movs	r3, #0
   2a7fc:	220a      	movs	r2, #10
   2a7fe:	4648      	mov	r0, r9
   2a800:	f000 fc9e 	bl	2b140 <__multadd>
   2a804:	3601      	adds	r6, #1
   2a806:	4682      	mov	sl, r0
   2a808:	4621      	mov	r1, r4
   2a80a:	4650      	mov	r0, sl
   2a80c:	f7ff fc02 	bl	2a014 <quorem>
   2a810:	45b3      	cmp	fp, r6
   2a812:	f100 0030 	add.w	r0, r0, #48	@ 0x30
   2a816:	f808 0b01 	strb.w	r0, [r8], #1
   2a81a:	dced      	bgt.n	2a7f8 <_dtoa_r+0x6b8>
   2a81c:	f1bb 0f00 	cmp.w	fp, #0
   2a820:	9b05      	ldr	r3, [sp, #20]
   2a822:	bfcc      	ite	gt
   2a824:	465e      	movgt	r6, fp
   2a826:	2601      	movle	r6, #1
   2a828:	4681      	mov	r9, r0
   2a82a:	eb03 0b06 	add.w	fp, r3, r6
   2a82e:	2400      	movs	r4, #0
   2a830:	4651      	mov	r1, sl
   2a832:	2201      	movs	r2, #1
   2a834:	9804      	ldr	r0, [sp, #16]
   2a836:	f000 fe63 	bl	2b500 <__lshift>
   2a83a:	9900      	ldr	r1, [sp, #0]
   2a83c:	4682      	mov	sl, r0
   2a83e:	f000 fed7 	bl	2b5f0 <__mcmp>
   2a842:	2800      	cmp	r0, #0
   2a844:	f340 81ee 	ble.w	2ac24 <_dtoa_r+0xae4>
   2a848:	9a05      	ldr	r2, [sp, #20]
   2a84a:	e002      	b.n	2a852 <_dtoa_r+0x712>
   2a84c:	4593      	cmp	fp, r2
   2a84e:	f000 8203 	beq.w	2ac58 <_dtoa_r+0xb18>
   2a852:	465e      	mov	r6, fp
   2a854:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
   2a858:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   2a85c:	2b39      	cmp	r3, #57	@ 0x39
   2a85e:	d0f5      	beq.n	2a84c <_dtoa_r+0x70c>
   2a860:	3301      	adds	r3, #1
   2a862:	f88b 3000 	strb.w	r3, [fp]
   2a866:	f8dd 8010 	ldr.w	r8, [sp, #16]
   2a86a:	9900      	ldr	r1, [sp, #0]
   2a86c:	4640      	mov	r0, r8
   2a86e:	f000 fc5d 	bl	2b12c <_Bfree>
   2a872:	b157      	cbz	r7, 2a88a <_dtoa_r+0x74a>
   2a874:	b12c      	cbz	r4, 2a882 <_dtoa_r+0x742>
   2a876:	42bc      	cmp	r4, r7
   2a878:	d003      	beq.n	2a882 <_dtoa_r+0x742>
   2a87a:	4621      	mov	r1, r4
   2a87c:	4640      	mov	r0, r8
   2a87e:	f000 fc55 	bl	2b12c <_Bfree>
   2a882:	9804      	ldr	r0, [sp, #16]
   2a884:	4639      	mov	r1, r7
   2a886:	f000 fc51 	bl	2b12c <_Bfree>
   2a88a:	9804      	ldr	r0, [sp, #16]
   2a88c:	4651      	mov	r1, sl
   2a88e:	f000 fc4d 	bl	2b12c <_Bfree>
   2a892:	2300      	movs	r3, #0
   2a894:	7033      	strb	r3, [r6, #0]
   2a896:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   2a898:	601d      	str	r5, [r3, #0]
   2a89a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
   2a89c:	2b00      	cmp	r3, #0
   2a89e:	f43f ac8d 	beq.w	2a1bc <_dtoa_r+0x7c>
   2a8a2:	9805      	ldr	r0, [sp, #20]
   2a8a4:	601e      	str	r6, [r3, #0]
   2a8a6:	b01d      	add	sp, #116	@ 0x74
   2a8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a8ac:	4620      	mov	r0, r4
   2a8ae:	f7ee f8c5 	bl	18a3c <__aeabi_i2d>
   2a8b2:	4632      	mov	r2, r6
   2a8b4:	463b      	mov	r3, r7
   2a8b6:	f7ee fb93 	bl	18fe0 <__aeabi_dcmpeq>
   2a8ba:	2800      	cmp	r0, #0
   2a8bc:	f47f acd4 	bne.w	2a268 <_dtoa_r+0x128>
   2a8c0:	1e63      	subs	r3, r4, #1
   2a8c2:	9309      	str	r3, [sp, #36]	@ 0x24
   2a8c4:	e4d0      	b.n	2a268 <_dtoa_r+0x128>
   2a8c6:	231c      	movs	r3, #28
   2a8c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
   2a8ca:	441a      	add	r2, r3
   2a8cc:	920c      	str	r2, [sp, #48]	@ 0x30
   2a8ce:	9a08      	ldr	r2, [sp, #32]
   2a8d0:	441a      	add	r2, r3
   2a8d2:	441d      	add	r5, r3
   2a8d4:	9208      	str	r2, [sp, #32]
   2a8d6:	e768      	b.n	2a7aa <_dtoa_r+0x66a>
   2a8d8:	9a02      	ldr	r2, [sp, #8]
   2a8da:	2a01      	cmp	r2, #1
   2a8dc:	f340 81ad 	ble.w	2ac3a <_dtoa_r+0xafa>
   2a8e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
   2a8e2:	f10b 36ff 	add.w	r6, fp, #4294967295	@ 0xffffffff
   2a8e6:	42b3      	cmp	r3, r6
   2a8e8:	f2c0 8169 	blt.w	2abbe <_dtoa_r+0xa7e>
   2a8ec:	f1bb 0f00 	cmp.w	fp, #0
   2a8f0:	eba3 0606 	sub.w	r6, r3, r6
   2a8f4:	f280 82ef 	bge.w	2aed6 <_dtoa_r+0xd96>
   2a8f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   2a8fa:	eba3 050b 	sub.w	r5, r3, fp
   2a8fe:	e16c      	b.n	2abda <_dtoa_r+0xa9a>
   2a900:	f1c3 0320 	rsb	r3, r3, #32
   2a904:	fa06 f003 	lsl.w	r0, r6, r3
   2a908:	e47a      	b.n	2a200 <_dtoa_r+0xc0>
   2a90a:	2501      	movs	r5, #1
   2a90c:	e4df      	b.n	2a2ce <_dtoa_r+0x18e>
   2a90e:	bf00      	nop
   2a910:	40240000 	.word	0x40240000
   2a914:	4639      	mov	r1, r7
   2a916:	2300      	movs	r3, #0
   2a918:	9804      	ldr	r0, [sp, #16]
   2a91a:	220a      	movs	r2, #10
   2a91c:	f000 fc10 	bl	2b140 <__multadd>
   2a920:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
   2a922:	2b00      	cmp	r3, #0
   2a924:	4607      	mov	r7, r0
   2a926:	f340 82ff 	ble.w	2af28 <_dtoa_r+0xde8>
   2a92a:	960d      	str	r6, [sp, #52]	@ 0x34
   2a92c:	469b      	mov	fp, r3
   2a92e:	2d00      	cmp	r5, #0
   2a930:	dd05      	ble.n	2a93e <_dtoa_r+0x7fe>
   2a932:	4639      	mov	r1, r7
   2a934:	9804      	ldr	r0, [sp, #16]
   2a936:	462a      	mov	r2, r5
   2a938:	f000 fde2 	bl	2b500 <__lshift>
   2a93c:	4607      	mov	r7, r0
   2a93e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   2a940:	2b00      	cmp	r3, #0
   2a942:	f040 81e6 	bne.w	2ad12 <_dtoa_r+0xbd2>
   2a946:	46b8      	mov	r8, r7
   2a948:	9e05      	ldr	r6, [sp, #20]
   2a94a:	1e73      	subs	r3, r6, #1
   2a94c:	eb03 040b 	add.w	r4, r3, fp
   2a950:	9b06      	ldr	r3, [sp, #24]
   2a952:	f003 0301 	and.w	r3, r3, #1
   2a956:	e9cd 430b 	strd	r4, r3, [sp, #44]	@ 0x2c
   2a95a:	9c04      	ldr	r4, [sp, #16]
   2a95c:	9900      	ldr	r1, [sp, #0]
   2a95e:	4650      	mov	r0, sl
   2a960:	f7ff fb58 	bl	2a014 <quorem>
   2a964:	4639      	mov	r1, r7
   2a966:	4683      	mov	fp, r0
   2a968:	4650      	mov	r0, sl
   2a96a:	f000 fe41 	bl	2b5f0 <__mcmp>
   2a96e:	9900      	ldr	r1, [sp, #0]
   2a970:	4605      	mov	r5, r0
   2a972:	4642      	mov	r2, r8
   2a974:	4620      	mov	r0, r4
   2a976:	f000 fe5d 	bl	2b634 <__mdiff>
   2a97a:	68c3      	ldr	r3, [r0, #12]
   2a97c:	f10b 0930 	add.w	r9, fp, #48	@ 0x30
   2a980:	4601      	mov	r1, r0
   2a982:	bbab      	cbnz	r3, 2a9f0 <_dtoa_r+0x8b0>
   2a984:	9009      	str	r0, [sp, #36]	@ 0x24
   2a986:	4650      	mov	r0, sl
   2a988:	f000 fe32 	bl	2b5f0 <__mcmp>
   2a98c:	9909      	ldr	r1, [sp, #36]	@ 0x24
   2a98e:	9008      	str	r0, [sp, #32]
   2a990:	4620      	mov	r0, r4
   2a992:	f000 fbcb 	bl	2b12c <_Bfree>
   2a996:	9a08      	ldr	r2, [sp, #32]
   2a998:	2a00      	cmp	r2, #0
   2a99a:	d154      	bne.n	2aa46 <_dtoa_r+0x906>
   2a99c:	9b02      	ldr	r3, [sp, #8]
   2a99e:	b91b      	cbnz	r3, 2a9a8 <_dtoa_r+0x868>
   2a9a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   2a9a2:	2b00      	cmp	r3, #0
   2a9a4:	f000 82ae 	beq.w	2af04 <_dtoa_r+0xdc4>
   2a9a8:	2d00      	cmp	r5, #0
   2a9aa:	db3f      	blt.n	2aa2c <_dtoa_r+0x8ec>
   2a9ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   2a9ae:	46b3      	mov	fp, r6
   2a9b0:	429e      	cmp	r6, r3
   2a9b2:	f80b 9b01 	strb.w	r9, [fp], #1
   2a9b6:	f000 81c3 	beq.w	2ad40 <_dtoa_r+0xc00>
   2a9ba:	4651      	mov	r1, sl
   2a9bc:	2300      	movs	r3, #0
   2a9be:	220a      	movs	r2, #10
   2a9c0:	4620      	mov	r0, r4
   2a9c2:	f000 fbbd 	bl	2b140 <__multadd>
   2a9c6:	4547      	cmp	r7, r8
   2a9c8:	4682      	mov	sl, r0
   2a9ca:	4639      	mov	r1, r7
   2a9cc:	f04f 0300 	mov.w	r3, #0
   2a9d0:	f04f 020a 	mov.w	r2, #10
   2a9d4:	4620      	mov	r0, r4
   2a9d6:	d030      	beq.n	2aa3a <_dtoa_r+0x8fa>
   2a9d8:	f000 fbb2 	bl	2b140 <__multadd>
   2a9dc:	4641      	mov	r1, r8
   2a9de:	4607      	mov	r7, r0
   2a9e0:	2300      	movs	r3, #0
   2a9e2:	220a      	movs	r2, #10
   2a9e4:	4620      	mov	r0, r4
   2a9e6:	f000 fbab 	bl	2b140 <__multadd>
   2a9ea:	465e      	mov	r6, fp
   2a9ec:	4680      	mov	r8, r0
   2a9ee:	e7b5      	b.n	2a95c <_dtoa_r+0x81c>
   2a9f0:	9804      	ldr	r0, [sp, #16]
   2a9f2:	f000 fb9b 	bl	2b12c <_Bfree>
   2a9f6:	2d00      	cmp	r5, #0
   2a9f8:	db06      	blt.n	2aa08 <_dtoa_r+0x8c8>
   2a9fa:	9b06      	ldr	r3, [sp, #24]
   2a9fc:	f003 0201 	and.w	r2, r3, #1
   2aa00:	9b02      	ldr	r3, [sp, #8]
   2aa02:	431d      	orrs	r5, r3
   2aa04:	432a      	orrs	r2, r5
   2aa06:	d129      	bne.n	2aa5c <_dtoa_r+0x91c>
   2aa08:	4651      	mov	r1, sl
   2aa0a:	2201      	movs	r2, #1
   2aa0c:	9804      	ldr	r0, [sp, #16]
   2aa0e:	f000 fd77 	bl	2b500 <__lshift>
   2aa12:	9900      	ldr	r1, [sp, #0]
   2aa14:	4682      	mov	sl, r0
   2aa16:	f000 fdeb 	bl	2b5f0 <__mcmp>
   2aa1a:	2800      	cmp	r0, #0
   2aa1c:	f340 80f6 	ble.w	2ac0c <_dtoa_r+0xacc>
   2aa20:	f1b9 0f39 	cmp.w	r9, #57	@ 0x39
   2aa24:	f000 8249 	beq.w	2aeba <_dtoa_r+0xd7a>
   2aa28:	f10b 0931 	add.w	r9, fp, #49	@ 0x31
   2aa2c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
   2aa2e:	f806 9b01 	strb.w	r9, [r6], #1
   2aa32:	463c      	mov	r4, r7
   2aa34:	3501      	adds	r5, #1
   2aa36:	4647      	mov	r7, r8
   2aa38:	e715      	b.n	2a866 <_dtoa_r+0x726>
   2aa3a:	f000 fb81 	bl	2b140 <__multadd>
   2aa3e:	465e      	mov	r6, fp
   2aa40:	4607      	mov	r7, r0
   2aa42:	4680      	mov	r8, r0
   2aa44:	e78a      	b.n	2a95c <_dtoa_r+0x81c>
   2aa46:	2d00      	cmp	r5, #0
   2aa48:	f2c0 8293 	blt.w	2af72 <_dtoa_r+0xe32>
   2aa4c:	9b02      	ldr	r3, [sp, #8]
   2aa4e:	431d      	orrs	r5, r3
   2aa50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   2aa52:	431d      	orrs	r5, r3
   2aa54:	f000 828d 	beq.w	2af72 <_dtoa_r+0xe32>
   2aa58:	2a00      	cmp	r2, #0
   2aa5a:	dda7      	ble.n	2a9ac <_dtoa_r+0x86c>
   2aa5c:	f1b9 0f39 	cmp.w	r9, #57	@ 0x39
   2aa60:	f000 822b 	beq.w	2aeba <_dtoa_r+0xd7a>
   2aa64:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
   2aa66:	f109 0301 	add.w	r3, r9, #1
   2aa6a:	463c      	mov	r4, r7
   2aa6c:	f806 3b01 	strb.w	r3, [r6], #1
   2aa70:	3501      	adds	r5, #1
   2aa72:	4647      	mov	r7, r8
   2aa74:	e6f7      	b.n	2a866 <_dtoa_r+0x726>
   2aa76:	9b02      	ldr	r3, [sp, #8]
   2aa78:	2b02      	cmp	r3, #2
   2aa7a:	f77f aeb0 	ble.w	2a7de <_dtoa_r+0x69e>
   2aa7e:	f1bb 0f00 	cmp.w	fp, #0
   2aa82:	f040 8125 	bne.w	2acd0 <_dtoa_r+0xb90>
   2aa86:	9900      	ldr	r1, [sp, #0]
   2aa88:	9804      	ldr	r0, [sp, #16]
   2aa8a:	465b      	mov	r3, fp
   2aa8c:	2205      	movs	r2, #5
   2aa8e:	f000 fb57 	bl	2b140 <__multadd>
   2aa92:	4601      	mov	r1, r0
   2aa94:	9000      	str	r0, [sp, #0]
   2aa96:	4650      	mov	r0, sl
   2aa98:	f000 fdaa 	bl	2b5f0 <__mcmp>
   2aa9c:	2800      	cmp	r0, #0
   2aa9e:	f340 8117 	ble.w	2acd0 <_dtoa_r+0xb90>
   2aaa2:	9e05      	ldr	r6, [sp, #20]
   2aaa4:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
   2aaa6:	2331      	movs	r3, #49	@ 0x31
   2aaa8:	f806 3b01 	strb.w	r3, [r6], #1
   2aaac:	3501      	adds	r5, #1
   2aaae:	9900      	ldr	r1, [sp, #0]
   2aab0:	9804      	ldr	r0, [sp, #16]
   2aab2:	f000 fb3b 	bl	2b12c <_Bfree>
   2aab6:	3501      	adds	r5, #1
   2aab8:	2f00      	cmp	r7, #0
   2aaba:	f47f aee2 	bne.w	2a882 <_dtoa_r+0x742>
   2aabe:	e6e4      	b.n	2a88a <_dtoa_r+0x74a>
   2aac0:	9900      	ldr	r1, [sp, #0]
   2aac2:	4650      	mov	r0, sl
   2aac4:	f000 fd94 	bl	2b5f0 <__mcmp>
   2aac8:	2800      	cmp	r0, #0
   2aaca:	f6bf ae84 	bge.w	2a7d6 <_dtoa_r+0x696>
   2aace:	4651      	mov	r1, sl
   2aad0:	2300      	movs	r3, #0
   2aad2:	9804      	ldr	r0, [sp, #16]
   2aad4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
   2aad6:	220a      	movs	r2, #10
   2aad8:	f000 fb32 	bl	2b140 <__multadd>
   2aadc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   2aade:	1e66      	subs	r6, r4, #1
   2aae0:	4682      	mov	sl, r0
   2aae2:	2b00      	cmp	r3, #0
   2aae4:	f47f af16 	bne.w	2a914 <_dtoa_r+0x7d4>
   2aae8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
   2aaea:	2b00      	cmp	r3, #0
   2aaec:	f340 8211 	ble.w	2af12 <_dtoa_r+0xdd2>
   2aaf0:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
   2aaf2:	469b      	mov	fp, r3
   2aaf4:	e679      	b.n	2a7ea <_dtoa_r+0x6aa>
   2aaf6:	4601      	mov	r1, r0
   2aaf8:	461a      	mov	r2, r3
   2aafa:	9804      	ldr	r0, [sp, #16]
   2aafc:	f000 fca6 	bl	2b44c <__pow5mult>
   2ab00:	9b02      	ldr	r3, [sp, #8]
   2ab02:	9000      	str	r0, [sp, #0]
   2ab04:	2b01      	cmp	r3, #1
   2ab06:	dd6e      	ble.n	2abe6 <_dtoa_r+0xaa6>
   2ab08:	2300      	movs	r3, #0
   2ab0a:	9309      	str	r3, [sp, #36]	@ 0x24
   2ab0c:	9a00      	ldr	r2, [sp, #0]
   2ab0e:	6913      	ldr	r3, [r2, #16]
   2ab10:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   2ab14:	6918      	ldr	r0, [r3, #16]
   2ab16:	f000 fb63 	bl	2b1e0 <__hi0bits>
   2ab1a:	f1c0 0020 	rsb	r0, r0, #32
   2ab1e:	e631      	b.n	2a784 <_dtoa_r+0x644>
   2ab20:	4b98      	ldr	r3, [pc, #608]	@ (2ad84 <_dtoa_r+0xc44>)
   2ab22:	9305      	str	r3, [sp, #20]
   2ab24:	3303      	adds	r3, #3
   2ab26:	f7ff bbed 	b.w	2a304 <_dtoa_r+0x1c4>
   2ab2a:	9b06      	ldr	r3, [sp, #24]
   2ab2c:	2b00      	cmp	r3, #0
   2ab2e:	f47f ae28 	bne.w	2a782 <_dtoa_r+0x642>
   2ab32:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
   2ab36:	f3c2 0313 	ubfx	r3, r2, #0, #20
   2ab3a:	2b00      	cmp	r3, #0
   2ab3c:	f47f ae21 	bne.w	2a782 <_dtoa_r+0x642>
   2ab40:	4b91      	ldr	r3, [pc, #580]	@ (2ad88 <_dtoa_r+0xc48>)
   2ab42:	4013      	ands	r3, r2
   2ab44:	b133      	cbz	r3, 2ab54 <_dtoa_r+0xa14>
   2ab46:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   2ab48:	3301      	adds	r3, #1
   2ab4a:	930c      	str	r3, [sp, #48]	@ 0x30
   2ab4c:	9b08      	ldr	r3, [sp, #32]
   2ab4e:	3301      	adds	r3, #1
   2ab50:	9308      	str	r3, [sp, #32]
   2ab52:	2301      	movs	r3, #1
   2ab54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
   2ab56:	9309      	str	r3, [sp, #36]	@ 0x24
   2ab58:	2a00      	cmp	r2, #0
   2ab5a:	f43f ae12 	beq.w	2a782 <_dtoa_r+0x642>
   2ab5e:	e7d5      	b.n	2ab0c <_dtoa_r+0x9cc>
   2ab60:	f43f ae23 	beq.w	2a7aa <_dtoa_r+0x66a>
   2ab64:	f1c0 033c 	rsb	r3, r0, #60	@ 0x3c
   2ab68:	e6ae      	b.n	2a8c8 <_dtoa_r+0x788>
   2ab6a:	2301      	movs	r3, #1
   2ab6c:	930e      	str	r3, [sp, #56]	@ 0x38
   2ab6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   2ab70:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
   2ab72:	4413      	add	r3, r2
   2ab74:	f103 0b01 	add.w	fp, r3, #1
   2ab78:	465e      	mov	r6, fp
   2ab7a:	2e01      	cmp	r6, #1
   2ab7c:	9313      	str	r3, [sp, #76]	@ 0x4c
   2ab7e:	bfb8      	it	lt
   2ab80:	2601      	movlt	r6, #1
   2ab82:	2e17      	cmp	r6, #23
   2ab84:	f340 81f9 	ble.w	2af7a <_dtoa_r+0xe3a>
   2ab88:	2201      	movs	r2, #1
   2ab8a:	2304      	movs	r3, #4
   2ab8c:	005b      	lsls	r3, r3, #1
   2ab8e:	f103 0014 	add.w	r0, r3, #20
   2ab92:	42b0      	cmp	r0, r6
   2ab94:	4611      	mov	r1, r2
   2ab96:	f102 0201 	add.w	r2, r2, #1
   2ab9a:	d9f7      	bls.n	2ab8c <_dtoa_r+0xa4c>
   2ab9c:	9b04      	ldr	r3, [sp, #16]
   2ab9e:	63d9      	str	r1, [r3, #60]	@ 0x3c
   2aba0:	e404      	b.n	2a3ac <_dtoa_r+0x26c>
   2aba2:	2301      	movs	r3, #1
   2aba4:	930e      	str	r3, [sp, #56]	@ 0x38
   2aba6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
   2aba8:	2e00      	cmp	r6, #0
   2abaa:	dd36      	ble.n	2ac1a <_dtoa_r+0xada>
   2abac:	9613      	str	r6, [sp, #76]	@ 0x4c
   2abae:	46b3      	mov	fp, r6
   2abb0:	e7e7      	b.n	2ab82 <_dtoa_r+0xa42>
   2abb2:	2300      	movs	r3, #0
   2abb4:	930e      	str	r3, [sp, #56]	@ 0x38
   2abb6:	e7da      	b.n	2ab6e <_dtoa_r+0xa2e>
   2abb8:	2300      	movs	r3, #0
   2abba:	930e      	str	r3, [sp, #56]	@ 0x38
   2abbc:	e7f3      	b.n	2aba6 <_dtoa_r+0xa66>
   2abbe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
   2abc0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
   2abc2:	9610      	str	r6, [sp, #64]	@ 0x40
   2abc4:	1af3      	subs	r3, r6, r3
   2abc6:	441a      	add	r2, r3
   2abc8:	9b08      	ldr	r3, [sp, #32]
   2abca:	9209      	str	r2, [sp, #36]	@ 0x24
   2abcc:	445b      	add	r3, fp
   2abce:	9308      	str	r3, [sp, #32]
   2abd0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   2abd2:	461d      	mov	r5, r3
   2abd4:	445b      	add	r3, fp
   2abd6:	930c      	str	r3, [sp, #48]	@ 0x30
   2abd8:	2600      	movs	r6, #0
   2abda:	9804      	ldr	r0, [sp, #16]
   2abdc:	2101      	movs	r1, #1
   2abde:	f000 fb51 	bl	2b284 <__i2b>
   2abe2:	4607      	mov	r7, r0
   2abe4:	e5a5      	b.n	2a732 <_dtoa_r+0x5f2>
   2abe6:	9b06      	ldr	r3, [sp, #24]
   2abe8:	2b00      	cmp	r3, #0
   2abea:	d18d      	bne.n	2ab08 <_dtoa_r+0x9c8>
   2abec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   2abf0:	f3c1 0313 	ubfx	r3, r1, #0, #20
   2abf4:	460a      	mov	r2, r1
   2abf6:	2b00      	cmp	r3, #0
   2abf8:	d0a2      	beq.n	2ab40 <_dtoa_r+0xa00>
   2abfa:	9009      	str	r0, [sp, #36]	@ 0x24
   2abfc:	e786      	b.n	2ab0c <_dtoa_r+0x9cc>
   2abfe:	ed9d 7b00 	vldr	d7, [sp]
   2ac02:	2702      	movs	r7, #2
   2ac04:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
   2ac08:	f7ff bbfd 	b.w	2a406 <_dtoa_r+0x2c6>
   2ac0c:	f47f af0e 	bne.w	2aa2c <_dtoa_r+0x8ec>
   2ac10:	f019 0f01 	tst.w	r9, #1
   2ac14:	f47f af04 	bne.w	2aa20 <_dtoa_r+0x8e0>
   2ac18:	e708      	b.n	2aa2c <_dtoa_r+0x8ec>
   2ac1a:	2301      	movs	r3, #1
   2ac1c:	930b      	str	r3, [sp, #44]	@ 0x2c
   2ac1e:	469b      	mov	fp, r3
   2ac20:	f7ff bbbf 	b.w	2a3a2 <_dtoa_r+0x262>
   2ac24:	d103      	bne.n	2ac2e <_dtoa_r+0xaee>
   2ac26:	f019 0f01 	tst.w	r9, #1
   2ac2a:	f47f ae0d 	bne.w	2a848 <_dtoa_r+0x708>
   2ac2e:	465e      	mov	r6, fp
   2ac30:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   2ac34:	2b30      	cmp	r3, #48	@ 0x30
   2ac36:	d0fa      	beq.n	2ac2e <_dtoa_r+0xaee>
   2ac38:	e615      	b.n	2a866 <_dtoa_r+0x726>
   2ac3a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
   2ac3c:	2a00      	cmp	r2, #0
   2ac3e:	f000 809c 	beq.w	2ad7a <_dtoa_r+0xc3a>
   2ac42:	f203 4333 	addw	r3, r3, #1075	@ 0x433
   2ac46:	9a08      	ldr	r2, [sp, #32]
   2ac48:	9e10      	ldr	r6, [sp, #64]	@ 0x40
   2ac4a:	441a      	add	r2, r3
   2ac4c:	9208      	str	r2, [sp, #32]
   2ac4e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
   2ac50:	4615      	mov	r5, r2
   2ac52:	441a      	add	r2, r3
   2ac54:	920c      	str	r2, [sp, #48]	@ 0x30
   2ac56:	e7c0      	b.n	2abda <_dtoa_r+0xa9a>
   2ac58:	9a05      	ldr	r2, [sp, #20]
   2ac5a:	2331      	movs	r3, #49	@ 0x31
   2ac5c:	3501      	adds	r5, #1
   2ac5e:	7013      	strb	r3, [r2, #0]
   2ac60:	e601      	b.n	2a866 <_dtoa_r+0x726>
   2ac62:	f000 80fa 	beq.w	2ae5a <_dtoa_r+0xd1a>
   2ac66:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
   2ac68:	4b48      	ldr	r3, [pc, #288]	@ (2ad8c <_dtoa_r+0xc4c>)
   2ac6a:	4255      	negs	r5, r2
   2ac6c:	f005 020f 	and.w	r2, r5, #15
   2ac70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2ac74:	e9d3 2300 	ldrd	r2, r3, [r3]
   2ac78:	e9dd 0100 	ldrd	r0, r1, [sp]
   2ac7c:	f7ed ff48 	bl	18b10 <__aeabi_dmul>
   2ac80:	112d      	asrs	r5, r5, #4
   2ac82:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
   2ac86:	f000 8158 	beq.w	2af3a <_dtoa_r+0xdfa>
   2ac8a:	4e41      	ldr	r6, [pc, #260]	@ (2ad90 <_dtoa_r+0xc50>)
   2ac8c:	2300      	movs	r3, #0
   2ac8e:	2702      	movs	r7, #2
   2ac90:	4680      	mov	r8, r0
   2ac92:	4689      	mov	r9, r1
   2ac94:	07ea      	lsls	r2, r5, #31
   2ac96:	d509      	bpl.n	2acac <_dtoa_r+0xb6c>
   2ac98:	e9d6 2300 	ldrd	r2, r3, [r6]
   2ac9c:	4640      	mov	r0, r8
   2ac9e:	4649      	mov	r1, r9
   2aca0:	f7ed ff36 	bl	18b10 <__aeabi_dmul>
   2aca4:	3701      	adds	r7, #1
   2aca6:	4680      	mov	r8, r0
   2aca8:	4689      	mov	r9, r1
   2acaa:	2301      	movs	r3, #1
   2acac:	106d      	asrs	r5, r5, #1
   2acae:	f106 0608 	add.w	r6, r6, #8
   2acb2:	d1ef      	bne.n	2ac94 <_dtoa_r+0xb54>
   2acb4:	2b00      	cmp	r3, #0
   2acb6:	f47f abbf 	bne.w	2a438 <_dtoa_r+0x2f8>
   2acba:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	@ 0x50
   2acbe:	f7ff bbbb 	b.w	2a438 <_dtoa_r+0x2f8>
   2acc2:	f1c8 0301 	rsb	r3, r8, #1
   2acc6:	9008      	str	r0, [sp, #32]
   2acc8:	930c      	str	r3, [sp, #48]	@ 0x30
   2acca:	9011      	str	r0, [sp, #68]	@ 0x44
   2accc:	f7ff bb58 	b.w	2a380 <_dtoa_r+0x240>
   2acd0:	9e05      	ldr	r6, [sp, #20]
   2acd2:	e4bb      	b.n	2a64c <_dtoa_r+0x50c>
   2acd4:	f8dd a000 	ldr.w	sl, [sp]
   2acd8:	4602      	mov	r2, r0
   2acda:	460b      	mov	r3, r1
   2acdc:	f7ed fd62 	bl	187a4 <__adddf3>
   2ace0:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
   2ace2:	e9cd 0100 	strd	r0, r1, [sp]
   2ace6:	3501      	adds	r5, #1
   2ace8:	4602      	mov	r2, r0
   2acea:	460b      	mov	r3, r1
   2acec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   2acf0:	46a8      	mov	r8, r5
   2acf2:	f7ee f97f 	bl	18ff4 <__aeabi_dcmplt>
   2acf6:	b940      	cbnz	r0, 2ad0a <_dtoa_r+0xbca>
   2acf8:	e9dd 2300 	ldrd	r2, r3, [sp]
   2acfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   2ad00:	f7ee f96e 	bl	18fe0 <__aeabi_dcmpeq>
   2ad04:	b118      	cbz	r0, 2ad0e <_dtoa_r+0xbce>
   2ad06:	07f3      	lsls	r3, r6, #31
   2ad08:	d501      	bpl.n	2ad0e <_dtoa_r+0xbce>
   2ad0a:	9a05      	ldr	r2, [sp, #20]
   2ad0c:	e435      	b.n	2a57a <_dtoa_r+0x43a>
   2ad0e:	463e      	mov	r6, r7
   2ad10:	e5bb      	b.n	2a88a <_dtoa_r+0x74a>
   2ad12:	6879      	ldr	r1, [r7, #4]
   2ad14:	9804      	ldr	r0, [sp, #16]
   2ad16:	f000 f9e3 	bl	2b0e0 <_Balloc>
   2ad1a:	4605      	mov	r5, r0
   2ad1c:	2800      	cmp	r0, #0
   2ad1e:	f000 8121 	beq.w	2af64 <_dtoa_r+0xe24>
   2ad22:	693b      	ldr	r3, [r7, #16]
   2ad24:	3302      	adds	r3, #2
   2ad26:	009a      	lsls	r2, r3, #2
   2ad28:	f107 010c 	add.w	r1, r7, #12
   2ad2c:	300c      	adds	r0, #12
   2ad2e:	f7ed fc27 	bl	18580 <memcpy>
   2ad32:	9804      	ldr	r0, [sp, #16]
   2ad34:	4629      	mov	r1, r5
   2ad36:	2201      	movs	r2, #1
   2ad38:	f000 fbe2 	bl	2b500 <__lshift>
   2ad3c:	4680      	mov	r8, r0
   2ad3e:	e603      	b.n	2a948 <_dtoa_r+0x808>
   2ad40:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
   2ad42:	463c      	mov	r4, r7
   2ad44:	3501      	adds	r5, #1
   2ad46:	4647      	mov	r7, r8
   2ad48:	e572      	b.n	2a830 <_dtoa_r+0x6f0>
   2ad4a:	9c04      	ldr	r4, [sp, #16]
   2ad4c:	4639      	mov	r1, r7
   2ad4e:	4632      	mov	r2, r6
   2ad50:	4620      	mov	r0, r4
   2ad52:	f000 fb7b 	bl	2b44c <__pow5mult>
   2ad56:	4652      	mov	r2, sl
   2ad58:	4601      	mov	r1, r0
   2ad5a:	4607      	mov	r7, r0
   2ad5c:	4620      	mov	r0, r4
   2ad5e:	f000 fabf 	bl	2b2e0 <__multiply>
   2ad62:	4651      	mov	r1, sl
   2ad64:	4680      	mov	r8, r0
   2ad66:	4620      	mov	r0, r4
   2ad68:	f000 f9e0 	bl	2b12c <_Bfree>
   2ad6c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
   2ad6e:	1b9b      	subs	r3, r3, r6
   2ad70:	46c2      	mov	sl, r8
   2ad72:	9310      	str	r3, [sp, #64]	@ 0x40
   2ad74:	f43f acf8 	beq.w	2a768 <_dtoa_r+0x628>
   2ad78:	e4f0      	b.n	2a75c <_dtoa_r+0x61c>
   2ad7a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
   2ad7c:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
   2ad80:	e761      	b.n	2ac46 <_dtoa_r+0xb06>
   2ad82:	bf00      	nop
   2ad84:	00043d64 	.word	0x00043d64
   2ad88:	7ff00000 	.word	0x7ff00000
   2ad8c:	0004b748 	.word	0x0004b748
   2ad90:	0004b720 	.word	0x0004b720
   2ad94:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	@ 0x58
   2ad98:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
   2ad9c:	f7ed feb8 	bl	18b10 <__aeabi_dmul>
   2ada0:	9b05      	ldr	r3, [sp, #20]
   2ada2:	701c      	strb	r4, [r3, #0]
   2ada4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
   2ada6:	2b01      	cmp	r3, #1
   2ada8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
   2adac:	f000 80c3 	beq.w	2af36 <_dtoa_r+0xdf6>
   2adb0:	9f18      	ldr	r7, [sp, #96]	@ 0x60
   2adb2:	9b05      	ldr	r3, [sp, #20]
   2adb4:	9612      	str	r6, [sp, #72]	@ 0x48
   2adb6:	441f      	add	r7, r3
   2adb8:	4b7a      	ldr	r3, [pc, #488]	@ (2afa4 <_dtoa_r+0xe64>)
   2adba:	2200      	movs	r2, #0
   2adbc:	4640      	mov	r0, r8
   2adbe:	4649      	mov	r1, r9
   2adc0:	f7ed fea6 	bl	18b10 <__aeabi_dmul>
   2adc4:	460d      	mov	r5, r1
   2adc6:	4604      	mov	r4, r0
   2adc8:	f7ee f952 	bl	19070 <__aeabi_d2iz>
   2adcc:	4681      	mov	r9, r0
   2adce:	f7ed fe35 	bl	18a3c <__aeabi_i2d>
   2add2:	f109 0930 	add.w	r9, r9, #48	@ 0x30
   2add6:	4602      	mov	r2, r0
   2add8:	460b      	mov	r3, r1
   2adda:	4620      	mov	r0, r4
   2addc:	4629      	mov	r1, r5
   2adde:	f7ed fcdf 	bl	187a0 <__aeabi_dsub>
   2ade2:	f806 9b01 	strb.w	r9, [r6], #1
   2ade6:	42be      	cmp	r6, r7
   2ade8:	4680      	mov	r8, r0
   2adea:	4689      	mov	r9, r1
   2adec:	d1e4      	bne.n	2adb8 <_dtoa_r+0xc78>
   2adee:	9d12      	ldr	r5, [sp, #72]	@ 0x48
   2adf0:	4b6d      	ldr	r3, [pc, #436]	@ (2afa8 <_dtoa_r+0xe68>)
   2adf2:	2200      	movs	r2, #0
   2adf4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
   2adf8:	f7ed fcd4 	bl	187a4 <__adddf3>
   2adfc:	4602      	mov	r2, r0
   2adfe:	460b      	mov	r3, r1
   2ae00:	4640      	mov	r0, r8
   2ae02:	4649      	mov	r1, r9
   2ae04:	f7ee f914 	bl	19030 <__aeabi_dcmpgt>
   2ae08:	2800      	cmp	r0, #0
   2ae0a:	d16c      	bne.n	2aee6 <_dtoa_r+0xda6>
   2ae0c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
   2ae10:	4965      	ldr	r1, [pc, #404]	@ (2afa8 <_dtoa_r+0xe68>)
   2ae12:	2000      	movs	r0, #0
   2ae14:	f7ed fcc4 	bl	187a0 <__aeabi_dsub>
   2ae18:	4602      	mov	r2, r0
   2ae1a:	460b      	mov	r3, r1
   2ae1c:	4640      	mov	r0, r8
   2ae1e:	4649      	mov	r1, r9
   2ae20:	f7ee f8e8 	bl	18ff4 <__aeabi_dcmplt>
   2ae24:	b980      	cbnz	r0, 2ae48 <_dtoa_r+0xd08>
   2ae26:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
   2ae28:	2b00      	cmp	r3, #0
   2ae2a:	f6ff ac7d 	blt.w	2a728 <_dtoa_r+0x5e8>
   2ae2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   2ae30:	2b0e      	cmp	r3, #14
   2ae32:	f73f ac79 	bgt.w	2a728 <_dtoa_r+0x5e8>
   2ae36:	4b5d      	ldr	r3, [pc, #372]	@ (2afac <_dtoa_r+0xe6c>)
   2ae38:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
   2ae3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2ae3e:	ed93 7b00 	vldr	d7, [r3]
   2ae42:	ed8d 7b02 	vstr	d7, [sp, #8]
   2ae46:	e406      	b.n	2a656 <_dtoa_r+0x516>
   2ae48:	463e      	mov	r6, r7
   2ae4a:	3f01      	subs	r7, #1
   2ae4c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   2ae50:	2b30      	cmp	r3, #48	@ 0x30
   2ae52:	d0f9      	beq.n	2ae48 <_dtoa_r+0xd08>
   2ae54:	9d19      	ldr	r5, [sp, #100]	@ 0x64
   2ae56:	3501      	adds	r5, #1
   2ae58:	e517      	b.n	2a88a <_dtoa_r+0x74a>
   2ae5a:	e9dd 8900 	ldrd	r8, r9, [sp]
   2ae5e:	2702      	movs	r7, #2
   2ae60:	f7ff baea 	b.w	2a438 <_dtoa_r+0x2f8>
   2ae64:	f1bb 0f00 	cmp.w	fp, #0
   2ae68:	f43f ab9d 	beq.w	2a5a6 <_dtoa_r+0x466>
   2ae6c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
   2ae6e:	2c00      	cmp	r4, #0
   2ae70:	f77f abc2 	ble.w	2a5f8 <_dtoa_r+0x4b8>
   2ae74:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   2ae76:	3b01      	subs	r3, #1
   2ae78:	2200      	movs	r2, #0
   2ae7a:	4640      	mov	r0, r8
   2ae7c:	4649      	mov	r1, r9
   2ae7e:	9319      	str	r3, [sp, #100]	@ 0x64
   2ae80:	4b48      	ldr	r3, [pc, #288]	@ (2afa4 <_dtoa_r+0xe64>)
   2ae82:	f7ed fe45 	bl	18b10 <__aeabi_dmul>
   2ae86:	4680      	mov	r8, r0
   2ae88:	4689      	mov	r9, r1
   2ae8a:	1c78      	adds	r0, r7, #1
   2ae8c:	f7ed fdd6 	bl	18a3c <__aeabi_i2d>
   2ae90:	4642      	mov	r2, r8
   2ae92:	464b      	mov	r3, r9
   2ae94:	f7ed fe3c 	bl	18b10 <__aeabi_dmul>
   2ae98:	4b45      	ldr	r3, [pc, #276]	@ (2afb0 <_dtoa_r+0xe70>)
   2ae9a:	2200      	movs	r2, #0
   2ae9c:	f7ed fc82 	bl	187a4 <__adddf3>
   2aea0:	f1a1 7350 	sub.w	r3, r1, #54525952	@ 0x3400000
   2aea4:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
   2aea8:	9418      	str	r4, [sp, #96]	@ 0x60
   2aeaa:	9315      	str	r3, [sp, #84]	@ 0x54
   2aeac:	f7ff bae6 	b.w	2a47c <_dtoa_r+0x33c>
   2aeb0:	f108 0801 	add.w	r8, r8, #1
   2aeb4:	2331      	movs	r3, #49	@ 0x31
   2aeb6:	f7ff bb67 	b.w	2a588 <_dtoa_r+0x448>
   2aeba:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
   2aebc:	9a05      	ldr	r2, [sp, #20]
   2aebe:	46b3      	mov	fp, r6
   2aec0:	2339      	movs	r3, #57	@ 0x39
   2aec2:	463c      	mov	r4, r7
   2aec4:	f80b 3b01 	strb.w	r3, [fp], #1
   2aec8:	3501      	adds	r5, #1
   2aeca:	4647      	mov	r7, r8
   2aecc:	e4c1      	b.n	2a852 <_dtoa_r+0x712>
   2aece:	2300      	movs	r3, #0
   2aed0:	9300      	str	r3, [sp, #0]
   2aed2:	461f      	mov	r7, r3
   2aed4:	e5e5      	b.n	2aaa2 <_dtoa_r+0x962>
   2aed6:	9b08      	ldr	r3, [sp, #32]
   2aed8:	445b      	add	r3, fp
   2aeda:	9308      	str	r3, [sp, #32]
   2aedc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   2aede:	461d      	mov	r5, r3
   2aee0:	445b      	add	r3, fp
   2aee2:	930c      	str	r3, [sp, #48]	@ 0x30
   2aee4:	e679      	b.n	2abda <_dtoa_r+0xa9a>
   2aee6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
   2aee8:	9a05      	ldr	r2, [sp, #20]
   2aeea:	f103 0801 	add.w	r8, r3, #1
   2aeee:	f7ff bb44 	b.w	2a57a <_dtoa_r+0x43a>
   2aef2:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
   2aef6:	e7ad      	b.n	2ae54 <_dtoa_r+0xd14>
   2aef8:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
   2aefc:	f8dd b058 	ldr.w	fp, [sp, #88]	@ 0x58
   2af00:	f7ff bb7a 	b.w	2a5f8 <_dtoa_r+0x4b8>
   2af04:	f1b9 0f39 	cmp.w	r9, #57	@ 0x39
   2af08:	d0d7      	beq.n	2aeba <_dtoa_r+0xd7a>
   2af0a:	2d00      	cmp	r5, #0
   2af0c:	f73f ad8c 	bgt.w	2aa28 <_dtoa_r+0x8e8>
   2af10:	e58c      	b.n	2aa2c <_dtoa_r+0x8ec>
   2af12:	9b02      	ldr	r3, [sp, #8]
   2af14:	2b02      	cmp	r3, #2
   2af16:	dc03      	bgt.n	2af20 <_dtoa_r+0xde0>
   2af18:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
   2af1a:	f8dd b04c 	ldr.w	fp, [sp, #76]	@ 0x4c
   2af1e:	e464      	b.n	2a7ea <_dtoa_r+0x6aa>
   2af20:	f8dd b04c 	ldr.w	fp, [sp, #76]	@ 0x4c
   2af24:	960d      	str	r6, [sp, #52]	@ 0x34
   2af26:	e5aa      	b.n	2aa7e <_dtoa_r+0x93e>
   2af28:	9b02      	ldr	r3, [sp, #8]
   2af2a:	2b02      	cmp	r3, #2
   2af2c:	dcf8      	bgt.n	2af20 <_dtoa_r+0xde0>
   2af2e:	f8dd b04c 	ldr.w	fp, [sp, #76]	@ 0x4c
   2af32:	960d      	str	r6, [sp, #52]	@ 0x34
   2af34:	e4fb      	b.n	2a92e <_dtoa_r+0x7ee>
   2af36:	4637      	mov	r7, r6
   2af38:	e75a      	b.n	2adf0 <_dtoa_r+0xcb0>
   2af3a:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	@ 0x50
   2af3e:	2702      	movs	r7, #2
   2af40:	f7ff ba7a 	b.w	2a438 <_dtoa_r+0x2f8>
   2af44:	9b04      	ldr	r3, [sp, #16]
   2af46:	2500      	movs	r5, #0
   2af48:	63dd      	str	r5, [r3, #60]	@ 0x3c
   2af4a:	4629      	mov	r1, r5
   2af4c:	4618      	mov	r0, r3
   2af4e:	f000 f8c7 	bl	2b0e0 <_Balloc>
   2af52:	9005      	str	r0, [sp, #20]
   2af54:	b9d0      	cbnz	r0, 2af8c <_dtoa_r+0xe4c>
   2af56:	4b17      	ldr	r3, [pc, #92]	@ (2afb4 <_dtoa_r+0xe74>)
   2af58:	4817      	ldr	r0, [pc, #92]	@ (2afb8 <_dtoa_r+0xe78>)
   2af5a:	2200      	movs	r2, #0
   2af5c:	f240 11af 	movw	r1, #431	@ 0x1af
   2af60:	f7fa fa16 	bl	25390 <__assert_func>
   2af64:	4b13      	ldr	r3, [pc, #76]	@ (2afb4 <_dtoa_r+0xe74>)
   2af66:	4814      	ldr	r0, [pc, #80]	@ (2afb8 <_dtoa_r+0xe78>)
   2af68:	462a      	mov	r2, r5
   2af6a:	f240 21ef 	movw	r1, #751	@ 0x2ef
   2af6e:	f7fa fa0f 	bl	25390 <__assert_func>
   2af72:	2a00      	cmp	r2, #0
   2af74:	f73f ad48 	bgt.w	2aa08 <_dtoa_r+0x8c8>
   2af78:	e558      	b.n	2aa2c <_dtoa_r+0x8ec>
   2af7a:	9b04      	ldr	r3, [sp, #16]
   2af7c:	2100      	movs	r1, #0
   2af7e:	63d9      	str	r1, [r3, #60]	@ 0x3c
   2af80:	f7ff ba14 	b.w	2a3ac <_dtoa_r+0x26c>
   2af84:	4b0d      	ldr	r3, [pc, #52]	@ (2afbc <_dtoa_r+0xe7c>)
   2af86:	9305      	str	r3, [sp, #20]
   2af88:	f7ff b918 	b.w	2a1bc <_dtoa_r+0x7c>
   2af8c:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   2af90:	639a      	str	r2, [r3, #56]	@ 0x38
   2af92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
   2af96:	2201      	movs	r2, #1
   2af98:	950b      	str	r5, [sp, #44]	@ 0x2c
   2af9a:	9313      	str	r3, [sp, #76]	@ 0x4c
   2af9c:	920e      	str	r2, [sp, #56]	@ 0x38
   2af9e:	469b      	mov	fp, r3
   2afa0:	f7ff bb2a 	b.w	2a5f8 <_dtoa_r+0x4b8>
   2afa4:	40240000 	.word	0x40240000
   2afa8:	3fe00000 	.word	0x3fe00000
   2afac:	0004b748 	.word	0x0004b748
   2afb0:	401c0000 	.word	0x401c0000
   2afb4:	00043d68 	.word	0x00043d68
   2afb8:	00043d7c 	.word	0x00043d7c
   2afbc:	00043d58 	.word	0x00043d58

0002afc0 <__env_lock>:
   2afc0:	4801      	ldr	r0, [pc, #4]	@ (2afc8 <__env_lock+0x8>)
   2afc2:	f7fc b8d7 	b.w	27174 <__retarget_lock_acquire_recursive>
   2afc6:	bf00      	nop
   2afc8:	1005008c 	.word	0x1005008c

0002afcc <__env_unlock>:
   2afcc:	4801      	ldr	r0, [pc, #4]	@ (2afd4 <__env_unlock+0x8>)
   2afce:	f7fc b8d3 	b.w	27178 <__retarget_lock_release_recursive>
   2afd2:	bf00      	nop
   2afd4:	1005008c 	.word	0x1005008c

0002afd8 <__ssprint_r>:
   2afd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2afdc:	6893      	ldr	r3, [r2, #8]
   2afde:	6817      	ldr	r7, [r2, #0]
   2afe0:	b083      	sub	sp, #12
   2afe2:	4692      	mov	sl, r2
   2afe4:	2b00      	cmp	r3, #0
   2afe6:	d074      	beq.n	2b0d2 <__ssprint_r+0xfa>
   2afe8:	f04f 0b00 	mov.w	fp, #0
   2afec:	688b      	ldr	r3, [r1, #8]
   2afee:	680a      	ldr	r2, [r1, #0]
   2aff0:	4681      	mov	r9, r0
   2aff2:	460c      	mov	r4, r1
   2aff4:	465d      	mov	r5, fp
   2aff6:	e045      	b.n	2b084 <__ssprint_r+0xac>
   2aff8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2affc:	f413 6f90 	tst.w	r3, #1152	@ 0x480
   2b000:	d02c      	beq.n	2b05c <__ssprint_r+0x84>
   2b002:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   2b006:	1a16      	subs	r6, r2, r0
   2b008:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   2b00c:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   2b010:	1c71      	adds	r1, r6, #1
   2b012:	1052      	asrs	r2, r2, #1
   2b014:	4429      	add	r1, r5
   2b016:	4291      	cmp	r1, r2
   2b018:	bf92      	itee	ls
   2b01a:	4690      	movls	r8, r2
   2b01c:	4688      	movhi	r8, r1
   2b01e:	460a      	movhi	r2, r1
   2b020:	055b      	lsls	r3, r3, #21
   2b022:	d539      	bpl.n	2b098 <__ssprint_r+0xc0>
   2b024:	4611      	mov	r1, r2
   2b026:	4648      	mov	r0, r9
   2b028:	f7fc fabc 	bl	275a4 <_malloc_r>
   2b02c:	9001      	str	r0, [sp, #4]
   2b02e:	2800      	cmp	r0, #0
   2b030:	d03d      	beq.n	2b0ae <__ssprint_r+0xd6>
   2b032:	4632      	mov	r2, r6
   2b034:	6921      	ldr	r1, [r4, #16]
   2b036:	f7ed faa3 	bl	18580 <memcpy>
   2b03a:	89a2      	ldrh	r2, [r4, #12]
   2b03c:	9b01      	ldr	r3, [sp, #4]
   2b03e:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
   2b042:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
   2b046:	81a2      	strh	r2, [r4, #12]
   2b048:	1998      	adds	r0, r3, r6
   2b04a:	eba8 0606 	sub.w	r6, r8, r6
   2b04e:	60a6      	str	r6, [r4, #8]
   2b050:	f8c4 8014 	str.w	r8, [r4, #20]
   2b054:	6123      	str	r3, [r4, #16]
   2b056:	6020      	str	r0, [r4, #0]
   2b058:	46a8      	mov	r8, r5
   2b05a:	462e      	mov	r6, r5
   2b05c:	4632      	mov	r2, r6
   2b05e:	4659      	mov	r1, fp
   2b060:	f7fb febc 	bl	26ddc <memmove>
   2b064:	f8da 1008 	ldr.w	r1, [sl, #8]
   2b068:	68a3      	ldr	r3, [r4, #8]
   2b06a:	6822      	ldr	r2, [r4, #0]
   2b06c:	eba3 0308 	sub.w	r3, r3, r8
   2b070:	4432      	add	r2, r6
   2b072:	1b49      	subs	r1, r1, r5
   2b074:	60a3      	str	r3, [r4, #8]
   2b076:	6022      	str	r2, [r4, #0]
   2b078:	f8ca 1008 	str.w	r1, [sl, #8]
   2b07c:	b349      	cbz	r1, 2b0d2 <__ssprint_r+0xfa>
   2b07e:	e9d7 b500 	ldrd	fp, r5, [r7]
   2b082:	3708      	adds	r7, #8
   2b084:	4698      	mov	r8, r3
   2b086:	4610      	mov	r0, r2
   2b088:	2d00      	cmp	r5, #0
   2b08a:	d0f8      	beq.n	2b07e <__ssprint_r+0xa6>
   2b08c:	429d      	cmp	r5, r3
   2b08e:	461e      	mov	r6, r3
   2b090:	d2b2      	bcs.n	2aff8 <__ssprint_r+0x20>
   2b092:	46a8      	mov	r8, r5
   2b094:	462e      	mov	r6, r5
   2b096:	e7e1      	b.n	2b05c <__ssprint_r+0x84>
   2b098:	4601      	mov	r1, r0
   2b09a:	4648      	mov	r0, r9
   2b09c:	f7fe fbc4 	bl	29828 <_realloc_r>
   2b0a0:	4603      	mov	r3, r0
   2b0a2:	2800      	cmp	r0, #0
   2b0a4:	d1d0      	bne.n	2b048 <__ssprint_r+0x70>
   2b0a6:	6921      	ldr	r1, [r4, #16]
   2b0a8:	4648      	mov	r0, r9
   2b0aa:	f7fc f93f 	bl	2732c <_free_r>
   2b0ae:	89a3      	ldrh	r3, [r4, #12]
   2b0b0:	220c      	movs	r2, #12
   2b0b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   2b0b6:	f8c9 2000 	str.w	r2, [r9]
   2b0ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   2b0be:	81a3      	strh	r3, [r4, #12]
   2b0c0:	2200      	movs	r2, #0
   2b0c2:	2300      	movs	r3, #0
   2b0c4:	f8ca 2008 	str.w	r2, [sl, #8]
   2b0c8:	f8ca 3004 	str.w	r3, [sl, #4]
   2b0cc:	b003      	add	sp, #12
   2b0ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b0d2:	2000      	movs	r0, #0
   2b0d4:	2300      	movs	r3, #0
   2b0d6:	f8ca 3004 	str.w	r3, [sl, #4]
   2b0da:	b003      	add	sp, #12
   2b0dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002b0e0 <_Balloc>:
   2b0e0:	6c43      	ldr	r3, [r0, #68]	@ 0x44
   2b0e2:	b570      	push	{r4, r5, r6, lr}
   2b0e4:	4605      	mov	r5, r0
   2b0e6:	460c      	mov	r4, r1
   2b0e8:	b14b      	cbz	r3, 2b0fe <_Balloc+0x1e>
   2b0ea:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   2b0ee:	b180      	cbz	r0, 2b112 <_Balloc+0x32>
   2b0f0:	6802      	ldr	r2, [r0, #0]
   2b0f2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   2b0f6:	2300      	movs	r3, #0
   2b0f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
   2b0fc:	bd70      	pop	{r4, r5, r6, pc}
   2b0fe:	2221      	movs	r2, #33	@ 0x21
   2b100:	2104      	movs	r1, #4
   2b102:	f000 fbb3 	bl	2b86c <_calloc_r>
   2b106:	4603      	mov	r3, r0
   2b108:	6468      	str	r0, [r5, #68]	@ 0x44
   2b10a:	2800      	cmp	r0, #0
   2b10c:	d1ed      	bne.n	2b0ea <_Balloc+0xa>
   2b10e:	2000      	movs	r0, #0
   2b110:	bd70      	pop	{r4, r5, r6, pc}
   2b112:	2101      	movs	r1, #1
   2b114:	fa01 f604 	lsl.w	r6, r1, r4
   2b118:	1d72      	adds	r2, r6, #5
   2b11a:	0092      	lsls	r2, r2, #2
   2b11c:	4628      	mov	r0, r5
   2b11e:	f000 fba5 	bl	2b86c <_calloc_r>
   2b122:	2800      	cmp	r0, #0
   2b124:	d0f3      	beq.n	2b10e <_Balloc+0x2e>
   2b126:	e9c0 4601 	strd	r4, r6, [r0, #4]
   2b12a:	e7e4      	b.n	2b0f6 <_Balloc+0x16>

0002b12c <_Bfree>:
   2b12c:	b131      	cbz	r1, 2b13c <_Bfree+0x10>
   2b12e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
   2b130:	684a      	ldr	r2, [r1, #4]
   2b132:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   2b136:	6008      	str	r0, [r1, #0]
   2b138:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   2b13c:	4770      	bx	lr
   2b13e:	bf00      	nop

0002b140 <__multadd>:
   2b140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b144:	690d      	ldr	r5, [r1, #16]
   2b146:	4607      	mov	r7, r0
   2b148:	460e      	mov	r6, r1
   2b14a:	461c      	mov	r4, r3
   2b14c:	f101 0e14 	add.w	lr, r1, #20
   2b150:	2000      	movs	r0, #0
   2b152:	f8de 1000 	ldr.w	r1, [lr]
   2b156:	b28b      	uxth	r3, r1
   2b158:	fb02 4303 	mla	r3, r2, r3, r4
   2b15c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   2b160:	0c09      	lsrs	r1, r1, #16
   2b162:	fb02 cc01 	mla	ip, r2, r1, ip
   2b166:	3001      	adds	r0, #1
   2b168:	b29b      	uxth	r3, r3
   2b16a:	eb03 430c 	add.w	r3, r3, ip, lsl #16
   2b16e:	4285      	cmp	r5, r0
   2b170:	f84e 3b04 	str.w	r3, [lr], #4
   2b174:	ea4f 441c 	mov.w	r4, ip, lsr #16
   2b178:	dceb      	bgt.n	2b152 <__multadd+0x12>
   2b17a:	b13c      	cbz	r4, 2b18c <__multadd+0x4c>
   2b17c:	68b3      	ldr	r3, [r6, #8]
   2b17e:	42ab      	cmp	r3, r5
   2b180:	dd07      	ble.n	2b192 <__multadd+0x52>
   2b182:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   2b186:	3501      	adds	r5, #1
   2b188:	615c      	str	r4, [r3, #20]
   2b18a:	6135      	str	r5, [r6, #16]
   2b18c:	4630      	mov	r0, r6
   2b18e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2b192:	6871      	ldr	r1, [r6, #4]
   2b194:	4638      	mov	r0, r7
   2b196:	3101      	adds	r1, #1
   2b198:	f7ff ffa2 	bl	2b0e0 <_Balloc>
   2b19c:	4680      	mov	r8, r0
   2b19e:	b1a8      	cbz	r0, 2b1cc <__multadd+0x8c>
   2b1a0:	6932      	ldr	r2, [r6, #16]
   2b1a2:	3202      	adds	r2, #2
   2b1a4:	f106 010c 	add.w	r1, r6, #12
   2b1a8:	0092      	lsls	r2, r2, #2
   2b1aa:	300c      	adds	r0, #12
   2b1ac:	f7ed f9e8 	bl	18580 <memcpy>
   2b1b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
   2b1b2:	6872      	ldr	r2, [r6, #4]
   2b1b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2b1b8:	6031      	str	r1, [r6, #0]
   2b1ba:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   2b1be:	4646      	mov	r6, r8
   2b1c0:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   2b1c4:	3501      	adds	r5, #1
   2b1c6:	615c      	str	r4, [r3, #20]
   2b1c8:	6135      	str	r5, [r6, #16]
   2b1ca:	e7df      	b.n	2b18c <__multadd+0x4c>
   2b1cc:	4b02      	ldr	r3, [pc, #8]	@ (2b1d8 <__multadd+0x98>)
   2b1ce:	4803      	ldr	r0, [pc, #12]	@ (2b1dc <__multadd+0x9c>)
   2b1d0:	4642      	mov	r2, r8
   2b1d2:	21ba      	movs	r1, #186	@ 0xba
   2b1d4:	f7fa f8dc 	bl	25390 <__assert_func>
   2b1d8:	00043d68 	.word	0x00043d68
   2b1dc:	00043de0 	.word	0x00043de0

0002b1e0 <__hi0bits>:
   2b1e0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
   2b1e4:	4603      	mov	r3, r0
   2b1e6:	bf36      	itet	cc
   2b1e8:	0403      	lslcc	r3, r0, #16
   2b1ea:	2000      	movcs	r0, #0
   2b1ec:	2010      	movcc	r0, #16
   2b1ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
   2b1f2:	bf3c      	itt	cc
   2b1f4:	021b      	lslcc	r3, r3, #8
   2b1f6:	3008      	addcc	r0, #8
   2b1f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
   2b1fc:	bf3c      	itt	cc
   2b1fe:	011b      	lslcc	r3, r3, #4
   2b200:	3004      	addcc	r0, #4
   2b202:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
   2b206:	d303      	bcc.n	2b210 <__hi0bits+0x30>
   2b208:	2b00      	cmp	r3, #0
   2b20a:	db06      	blt.n	2b21a <__hi0bits+0x3a>
   2b20c:	3001      	adds	r0, #1
   2b20e:	4770      	bx	lr
   2b210:	009b      	lsls	r3, r3, #2
   2b212:	d403      	bmi.n	2b21c <__hi0bits+0x3c>
   2b214:	005b      	lsls	r3, r3, #1
   2b216:	d403      	bmi.n	2b220 <__hi0bits+0x40>
   2b218:	2020      	movs	r0, #32
   2b21a:	4770      	bx	lr
   2b21c:	3002      	adds	r0, #2
   2b21e:	4770      	bx	lr
   2b220:	3003      	adds	r0, #3
   2b222:	4770      	bx	lr

0002b224 <__lo0bits>:
   2b224:	6803      	ldr	r3, [r0, #0]
   2b226:	f013 0207 	ands.w	r2, r3, #7
   2b22a:	4601      	mov	r1, r0
   2b22c:	d007      	beq.n	2b23e <__lo0bits+0x1a>
   2b22e:	07da      	lsls	r2, r3, #31
   2b230:	d41f      	bmi.n	2b272 <__lo0bits+0x4e>
   2b232:	0798      	lsls	r0, r3, #30
   2b234:	d521      	bpl.n	2b27a <__lo0bits+0x56>
   2b236:	085b      	lsrs	r3, r3, #1
   2b238:	600b      	str	r3, [r1, #0]
   2b23a:	2001      	movs	r0, #1
   2b23c:	4770      	bx	lr
   2b23e:	b298      	uxth	r0, r3
   2b240:	b1a0      	cbz	r0, 2b26c <__lo0bits+0x48>
   2b242:	4610      	mov	r0, r2
   2b244:	b2da      	uxtb	r2, r3
   2b246:	b90a      	cbnz	r2, 2b24c <__lo0bits+0x28>
   2b248:	3008      	adds	r0, #8
   2b24a:	0a1b      	lsrs	r3, r3, #8
   2b24c:	071a      	lsls	r2, r3, #28
   2b24e:	bf04      	itt	eq
   2b250:	091b      	lsreq	r3, r3, #4
   2b252:	3004      	addeq	r0, #4
   2b254:	079a      	lsls	r2, r3, #30
   2b256:	bf04      	itt	eq
   2b258:	089b      	lsreq	r3, r3, #2
   2b25a:	3002      	addeq	r0, #2
   2b25c:	07da      	lsls	r2, r3, #31
   2b25e:	d403      	bmi.n	2b268 <__lo0bits+0x44>
   2b260:	085b      	lsrs	r3, r3, #1
   2b262:	f100 0001 	add.w	r0, r0, #1
   2b266:	d006      	beq.n	2b276 <__lo0bits+0x52>
   2b268:	600b      	str	r3, [r1, #0]
   2b26a:	4770      	bx	lr
   2b26c:	0c1b      	lsrs	r3, r3, #16
   2b26e:	2010      	movs	r0, #16
   2b270:	e7e8      	b.n	2b244 <__lo0bits+0x20>
   2b272:	2000      	movs	r0, #0
   2b274:	4770      	bx	lr
   2b276:	2020      	movs	r0, #32
   2b278:	4770      	bx	lr
   2b27a:	089b      	lsrs	r3, r3, #2
   2b27c:	600b      	str	r3, [r1, #0]
   2b27e:	2002      	movs	r0, #2
   2b280:	4770      	bx	lr
   2b282:	bf00      	nop

0002b284 <__i2b>:
   2b284:	b538      	push	{r3, r4, r5, lr}
   2b286:	6c43      	ldr	r3, [r0, #68]	@ 0x44
   2b288:	4604      	mov	r4, r0
   2b28a:	460d      	mov	r5, r1
   2b28c:	b14b      	cbz	r3, 2b2a2 <__i2b+0x1e>
   2b28e:	6858      	ldr	r0, [r3, #4]
   2b290:	b1b0      	cbz	r0, 2b2c0 <__i2b+0x3c>
   2b292:	6802      	ldr	r2, [r0, #0]
   2b294:	605a      	str	r2, [r3, #4]
   2b296:	2200      	movs	r2, #0
   2b298:	2301      	movs	r3, #1
   2b29a:	e9c0 2303 	strd	r2, r3, [r0, #12]
   2b29e:	6145      	str	r5, [r0, #20]
   2b2a0:	bd38      	pop	{r3, r4, r5, pc}
   2b2a2:	2221      	movs	r2, #33	@ 0x21
   2b2a4:	2104      	movs	r1, #4
   2b2a6:	f000 fae1 	bl	2b86c <_calloc_r>
   2b2aa:	4603      	mov	r3, r0
   2b2ac:	6460      	str	r0, [r4, #68]	@ 0x44
   2b2ae:	2800      	cmp	r0, #0
   2b2b0:	d1ed      	bne.n	2b28e <__i2b+0xa>
   2b2b2:	4b09      	ldr	r3, [pc, #36]	@ (2b2d8 <__i2b+0x54>)
   2b2b4:	4809      	ldr	r0, [pc, #36]	@ (2b2dc <__i2b+0x58>)
   2b2b6:	2200      	movs	r2, #0
   2b2b8:	f240 1145 	movw	r1, #325	@ 0x145
   2b2bc:	f7fa f868 	bl	25390 <__assert_func>
   2b2c0:	221c      	movs	r2, #28
   2b2c2:	2101      	movs	r1, #1
   2b2c4:	4620      	mov	r0, r4
   2b2c6:	f000 fad1 	bl	2b86c <_calloc_r>
   2b2ca:	2800      	cmp	r0, #0
   2b2cc:	d0f1      	beq.n	2b2b2 <__i2b+0x2e>
   2b2ce:	2201      	movs	r2, #1
   2b2d0:	2302      	movs	r3, #2
   2b2d2:	e9c0 2301 	strd	r2, r3, [r0, #4]
   2b2d6:	e7de      	b.n	2b296 <__i2b+0x12>
   2b2d8:	00043d68 	.word	0x00043d68
   2b2dc:	00043de0 	.word	0x00043de0

0002b2e0 <__multiply>:
   2b2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b2e4:	f8d1 8010 	ldr.w	r8, [r1, #16]
   2b2e8:	6915      	ldr	r5, [r2, #16]
   2b2ea:	45a8      	cmp	r8, r5
   2b2ec:	b085      	sub	sp, #20
   2b2ee:	460e      	mov	r6, r1
   2b2f0:	4692      	mov	sl, r2
   2b2f2:	db05      	blt.n	2b300 <__multiply+0x20>
   2b2f4:	462a      	mov	r2, r5
   2b2f6:	4653      	mov	r3, sl
   2b2f8:	4645      	mov	r5, r8
   2b2fa:	468a      	mov	sl, r1
   2b2fc:	4690      	mov	r8, r2
   2b2fe:	461e      	mov	r6, r3
   2b300:	f8da 3008 	ldr.w	r3, [sl, #8]
   2b304:	f8da 1004 	ldr.w	r1, [sl, #4]
   2b308:	eb05 0408 	add.w	r4, r5, r8
   2b30c:	42a3      	cmp	r3, r4
   2b30e:	bfb8      	it	lt
   2b310:	3101      	addlt	r1, #1
   2b312:	f7ff fee5 	bl	2b0e0 <_Balloc>
   2b316:	4684      	mov	ip, r0
   2b318:	2800      	cmp	r0, #0
   2b31a:	f000 808b 	beq.w	2b434 <__multiply+0x154>
   2b31e:	f100 0714 	add.w	r7, r0, #20
   2b322:	eb07 0e84 	add.w	lr, r7, r4, lsl #2
   2b326:	4577      	cmp	r7, lr
   2b328:	d205      	bcs.n	2b336 <__multiply+0x56>
   2b32a:	463b      	mov	r3, r7
   2b32c:	2200      	movs	r2, #0
   2b32e:	f843 2b04 	str.w	r2, [r3], #4
   2b332:	459e      	cmp	lr, r3
   2b334:	d8fb      	bhi.n	2b32e <__multiply+0x4e>
   2b336:	3614      	adds	r6, #20
   2b338:	eb06 0888 	add.w	r8, r6, r8, lsl #2
   2b33c:	f10a 0914 	add.w	r9, sl, #20
   2b340:	4546      	cmp	r6, r8
   2b342:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   2b346:	d266      	bcs.n	2b416 <__multiply+0x136>
   2b348:	eba5 030a 	sub.w	r3, r5, sl
   2b34c:	3b15      	subs	r3, #21
   2b34e:	f023 0303 	bic.w	r3, r3, #3
   2b352:	f10a 0a15 	add.w	sl, sl, #21
   2b356:	3304      	adds	r3, #4
   2b358:	4555      	cmp	r5, sl
   2b35a:	bf2c      	ite	cs
   2b35c:	469b      	movcs	fp, r3
   2b35e:	f04f 0b04 	movcc.w	fp, #4
   2b362:	f8cd e008 	str.w	lr, [sp, #8]
   2b366:	9403      	str	r4, [sp, #12]
   2b368:	46ae      	mov	lr, r5
   2b36a:	46e2      	mov	sl, ip
   2b36c:	e005      	b.n	2b37a <__multiply+0x9a>
   2b36e:	0c09      	lsrs	r1, r1, #16
   2b370:	d12a      	bne.n	2b3c8 <__multiply+0xe8>
   2b372:	45b0      	cmp	r8, r6
   2b374:	f107 0704 	add.w	r7, r7, #4
   2b378:	d94a      	bls.n	2b410 <__multiply+0x130>
   2b37a:	f856 1b04 	ldr.w	r1, [r6], #4
   2b37e:	b28d      	uxth	r5, r1
   2b380:	2d00      	cmp	r5, #0
   2b382:	d0f4      	beq.n	2b36e <__multiply+0x8e>
   2b384:	46cc      	mov	ip, r9
   2b386:	463c      	mov	r4, r7
   2b388:	2300      	movs	r3, #0
   2b38a:	9601      	str	r6, [sp, #4]
   2b38c:	f85c 0b04 	ldr.w	r0, [ip], #4
   2b390:	6821      	ldr	r1, [r4, #0]
   2b392:	b286      	uxth	r6, r0
   2b394:	b28a      	uxth	r2, r1
   2b396:	0c00      	lsrs	r0, r0, #16
   2b398:	fb05 2206 	mla	r2, r5, r6, r2
   2b39c:	0c09      	lsrs	r1, r1, #16
   2b39e:	441a      	add	r2, r3
   2b3a0:	fb05 1100 	mla	r1, r5, r0, r1
   2b3a4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
   2b3a8:	b292      	uxth	r2, r2
   2b3aa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   2b3ae:	45e6      	cmp	lr, ip
   2b3b0:	f844 2b04 	str.w	r2, [r4], #4
   2b3b4:	ea4f 4311 	mov.w	r3, r1, lsr #16
   2b3b8:	d8e8      	bhi.n	2b38c <__multiply+0xac>
   2b3ba:	9e01      	ldr	r6, [sp, #4]
   2b3bc:	f847 300b 	str.w	r3, [r7, fp]
   2b3c0:	f856 1c04 	ldr.w	r1, [r6, #-4]
   2b3c4:	0c09      	lsrs	r1, r1, #16
   2b3c6:	d0d4      	beq.n	2b372 <__multiply+0x92>
   2b3c8:	683b      	ldr	r3, [r7, #0]
   2b3ca:	2200      	movs	r2, #0
   2b3cc:	4648      	mov	r0, r9
   2b3ce:	461d      	mov	r5, r3
   2b3d0:	463c      	mov	r4, r7
   2b3d2:	4694      	mov	ip, r2
   2b3d4:	8802      	ldrh	r2, [r0, #0]
   2b3d6:	fb01 c202 	mla	r2, r1, r2, ip
   2b3da:	eb02 4215 	add.w	r2, r2, r5, lsr #16
   2b3de:	b29b      	uxth	r3, r3
   2b3e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2b3e4:	f844 3b04 	str.w	r3, [r4], #4
   2b3e8:	f850 3b04 	ldr.w	r3, [r0], #4
   2b3ec:	6825      	ldr	r5, [r4, #0]
   2b3ee:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   2b3f2:	b2ab      	uxth	r3, r5
   2b3f4:	fb01 330c 	mla	r3, r1, ip, r3
   2b3f8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   2b3fc:	4570      	cmp	r0, lr
   2b3fe:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   2b402:	d3e7      	bcc.n	2b3d4 <__multiply+0xf4>
   2b404:	45b0      	cmp	r8, r6
   2b406:	f847 300b 	str.w	r3, [r7, fp]
   2b40a:	f107 0704 	add.w	r7, r7, #4
   2b40e:	d8b4      	bhi.n	2b37a <__multiply+0x9a>
   2b410:	e9dd e402 	ldrd	lr, r4, [sp, #8]
   2b414:	46d4      	mov	ip, sl
   2b416:	2c00      	cmp	r4, #0
   2b418:	dc02      	bgt.n	2b420 <__multiply+0x140>
   2b41a:	e005      	b.n	2b428 <__multiply+0x148>
   2b41c:	3c01      	subs	r4, #1
   2b41e:	d003      	beq.n	2b428 <__multiply+0x148>
   2b420:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
   2b424:	2b00      	cmp	r3, #0
   2b426:	d0f9      	beq.n	2b41c <__multiply+0x13c>
   2b428:	4660      	mov	r0, ip
   2b42a:	f8cc 4010 	str.w	r4, [ip, #16]
   2b42e:	b005      	add	sp, #20
   2b430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b434:	4b03      	ldr	r3, [pc, #12]	@ (2b444 <__multiply+0x164>)
   2b436:	4804      	ldr	r0, [pc, #16]	@ (2b448 <__multiply+0x168>)
   2b438:	4662      	mov	r2, ip
   2b43a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
   2b43e:	f7f9 ffa7 	bl	25390 <__assert_func>
   2b442:	bf00      	nop
   2b444:	00043d68 	.word	0x00043d68
   2b448:	00043de0 	.word	0x00043de0

0002b44c <__pow5mult>:
   2b44c:	f012 0303 	ands.w	r3, r2, #3
   2b450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b454:	4614      	mov	r4, r2
   2b456:	4607      	mov	r7, r0
   2b458:	d12c      	bne.n	2b4b4 <__pow5mult+0x68>
   2b45a:	460d      	mov	r5, r1
   2b45c:	10a4      	asrs	r4, r4, #2
   2b45e:	d01c      	beq.n	2b49a <__pow5mult+0x4e>
   2b460:	6c3e      	ldr	r6, [r7, #64]	@ 0x40
   2b462:	b386      	cbz	r6, 2b4c6 <__pow5mult+0x7a>
   2b464:	07e3      	lsls	r3, r4, #31
   2b466:	f04f 0800 	mov.w	r8, #0
   2b46a:	d406      	bmi.n	2b47a <__pow5mult+0x2e>
   2b46c:	1064      	asrs	r4, r4, #1
   2b46e:	d014      	beq.n	2b49a <__pow5mult+0x4e>
   2b470:	6830      	ldr	r0, [r6, #0]
   2b472:	b1a8      	cbz	r0, 2b4a0 <__pow5mult+0x54>
   2b474:	4606      	mov	r6, r0
   2b476:	07e3      	lsls	r3, r4, #31
   2b478:	d5f8      	bpl.n	2b46c <__pow5mult+0x20>
   2b47a:	4632      	mov	r2, r6
   2b47c:	4629      	mov	r1, r5
   2b47e:	4638      	mov	r0, r7
   2b480:	f7ff ff2e 	bl	2b2e0 <__multiply>
   2b484:	b135      	cbz	r5, 2b494 <__pow5mult+0x48>
   2b486:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
   2b488:	6869      	ldr	r1, [r5, #4]
   2b48a:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   2b48e:	602a      	str	r2, [r5, #0]
   2b490:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
   2b494:	1064      	asrs	r4, r4, #1
   2b496:	4605      	mov	r5, r0
   2b498:	d1ea      	bne.n	2b470 <__pow5mult+0x24>
   2b49a:	4628      	mov	r0, r5
   2b49c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2b4a0:	4632      	mov	r2, r6
   2b4a2:	4631      	mov	r1, r6
   2b4a4:	4638      	mov	r0, r7
   2b4a6:	f7ff ff1b 	bl	2b2e0 <__multiply>
   2b4aa:	6030      	str	r0, [r6, #0]
   2b4ac:	f8c0 8000 	str.w	r8, [r0]
   2b4b0:	4606      	mov	r6, r0
   2b4b2:	e7e0      	b.n	2b476 <__pow5mult+0x2a>
   2b4b4:	3b01      	subs	r3, #1
   2b4b6:	4a0f      	ldr	r2, [pc, #60]	@ (2b4f4 <__pow5mult+0xa8>)
   2b4b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   2b4bc:	2300      	movs	r3, #0
   2b4be:	f7ff fe3f 	bl	2b140 <__multadd>
   2b4c2:	4605      	mov	r5, r0
   2b4c4:	e7ca      	b.n	2b45c <__pow5mult+0x10>
   2b4c6:	2101      	movs	r1, #1
   2b4c8:	4638      	mov	r0, r7
   2b4ca:	f7ff fe09 	bl	2b0e0 <_Balloc>
   2b4ce:	4606      	mov	r6, r0
   2b4d0:	b140      	cbz	r0, 2b4e4 <__pow5mult+0x98>
   2b4d2:	2301      	movs	r3, #1
   2b4d4:	f240 2271 	movw	r2, #625	@ 0x271
   2b4d8:	e9c0 3204 	strd	r3, r2, [r0, #16]
   2b4dc:	2300      	movs	r3, #0
   2b4de:	6438      	str	r0, [r7, #64]	@ 0x40
   2b4e0:	6003      	str	r3, [r0, #0]
   2b4e2:	e7bf      	b.n	2b464 <__pow5mult+0x18>
   2b4e4:	4b04      	ldr	r3, [pc, #16]	@ (2b4f8 <__pow5mult+0xac>)
   2b4e6:	4805      	ldr	r0, [pc, #20]	@ (2b4fc <__pow5mult+0xb0>)
   2b4e8:	4632      	mov	r2, r6
   2b4ea:	f240 1145 	movw	r1, #325	@ 0x145
   2b4ee:	f7f9 ff4f 	bl	25390 <__assert_func>
   2b4f2:	bf00      	nop
   2b4f4:	0004b714 	.word	0x0004b714
   2b4f8:	00043d68 	.word	0x00043d68
   2b4fc:	00043de0 	.word	0x00043de0

0002b500 <__lshift>:
   2b500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b504:	460c      	mov	r4, r1
   2b506:	4690      	mov	r8, r2
   2b508:	6927      	ldr	r7, [r4, #16]
   2b50a:	68a3      	ldr	r3, [r4, #8]
   2b50c:	6849      	ldr	r1, [r1, #4]
   2b50e:	eb07 1762 	add.w	r7, r7, r2, asr #5
   2b512:	1c7d      	adds	r5, r7, #1
   2b514:	429d      	cmp	r5, r3
   2b516:	4606      	mov	r6, r0
   2b518:	ea4f 1962 	mov.w	r9, r2, asr #5
   2b51c:	dd04      	ble.n	2b528 <__lshift+0x28>
   2b51e:	005b      	lsls	r3, r3, #1
   2b520:	429d      	cmp	r5, r3
   2b522:	f101 0101 	add.w	r1, r1, #1
   2b526:	dcfa      	bgt.n	2b51e <__lshift+0x1e>
   2b528:	4630      	mov	r0, r6
   2b52a:	f7ff fdd9 	bl	2b0e0 <_Balloc>
   2b52e:	4684      	mov	ip, r0
   2b530:	2800      	cmp	r0, #0
   2b532:	d051      	beq.n	2b5d8 <__lshift+0xd8>
   2b534:	f1b9 0f00 	cmp.w	r9, #0
   2b538:	f100 0014 	add.w	r0, r0, #20
   2b53c:	dd0e      	ble.n	2b55c <__lshift+0x5c>
   2b53e:	f109 0205 	add.w	r2, r9, #5
   2b542:	ea4f 0e82 	mov.w	lr, r2, lsl #2
   2b546:	4603      	mov	r3, r0
   2b548:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
   2b54c:	2100      	movs	r1, #0
   2b54e:	f843 1b04 	str.w	r1, [r3], #4
   2b552:	4293      	cmp	r3, r2
   2b554:	d1fb      	bne.n	2b54e <__lshift+0x4e>
   2b556:	f1ae 0314 	sub.w	r3, lr, #20
   2b55a:	4418      	add	r0, r3
   2b55c:	6921      	ldr	r1, [r4, #16]
   2b55e:	f104 0314 	add.w	r3, r4, #20
   2b562:	f018 081f 	ands.w	r8, r8, #31
   2b566:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   2b56a:	d02d      	beq.n	2b5c8 <__lshift+0xc8>
   2b56c:	f1c8 0920 	rsb	r9, r8, #32
   2b570:	4686      	mov	lr, r0
   2b572:	f04f 0a00 	mov.w	sl, #0
   2b576:	681a      	ldr	r2, [r3, #0]
   2b578:	fa02 f208 	lsl.w	r2, r2, r8
   2b57c:	ea42 020a 	orr.w	r2, r2, sl
   2b580:	f84e 2b04 	str.w	r2, [lr], #4
   2b584:	f853 2b04 	ldr.w	r2, [r3], #4
   2b588:	4299      	cmp	r1, r3
   2b58a:	fa22 fa09 	lsr.w	sl, r2, r9
   2b58e:	d8f2      	bhi.n	2b576 <__lshift+0x76>
   2b590:	1b0b      	subs	r3, r1, r4
   2b592:	3b15      	subs	r3, #21
   2b594:	f023 0303 	bic.w	r3, r3, #3
   2b598:	3304      	adds	r3, #4
   2b59a:	f104 0215 	add.w	r2, r4, #21
   2b59e:	4291      	cmp	r1, r2
   2b5a0:	bf38      	it	cc
   2b5a2:	2304      	movcc	r3, #4
   2b5a4:	f840 a003 	str.w	sl, [r0, r3]
   2b5a8:	f1ba 0f00 	cmp.w	sl, #0
   2b5ac:	d100      	bne.n	2b5b0 <__lshift+0xb0>
   2b5ae:	463d      	mov	r5, r7
   2b5b0:	6c73      	ldr	r3, [r6, #68]	@ 0x44
   2b5b2:	6862      	ldr	r2, [r4, #4]
   2b5b4:	f8cc 5010 	str.w	r5, [ip, #16]
   2b5b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2b5bc:	6021      	str	r1, [r4, #0]
   2b5be:	4660      	mov	r0, ip
   2b5c0:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   2b5c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2b5c8:	3804      	subs	r0, #4
   2b5ca:	f853 2b04 	ldr.w	r2, [r3], #4
   2b5ce:	f840 2f04 	str.w	r2, [r0, #4]!
   2b5d2:	4299      	cmp	r1, r3
   2b5d4:	d8f9      	bhi.n	2b5ca <__lshift+0xca>
   2b5d6:	e7ea      	b.n	2b5ae <__lshift+0xae>
   2b5d8:	4b03      	ldr	r3, [pc, #12]	@ (2b5e8 <__lshift+0xe8>)
   2b5da:	4804      	ldr	r0, [pc, #16]	@ (2b5ec <__lshift+0xec>)
   2b5dc:	4662      	mov	r2, ip
   2b5de:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
   2b5e2:	f7f9 fed5 	bl	25390 <__assert_func>
   2b5e6:	bf00      	nop
   2b5e8:	00043d68 	.word	0x00043d68
   2b5ec:	00043de0 	.word	0x00043de0

0002b5f0 <__mcmp>:
   2b5f0:	690b      	ldr	r3, [r1, #16]
   2b5f2:	4684      	mov	ip, r0
   2b5f4:	6900      	ldr	r0, [r0, #16]
   2b5f6:	1ac0      	subs	r0, r0, r3
   2b5f8:	d116      	bne.n	2b628 <__mcmp+0x38>
   2b5fa:	f10c 0c14 	add.w	ip, ip, #20
   2b5fe:	3114      	adds	r1, #20
   2b600:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
   2b604:	b410      	push	{r4}
   2b606:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   2b60a:	e001      	b.n	2b610 <__mcmp+0x20>
   2b60c:	4594      	cmp	ip, r2
   2b60e:	d208      	bcs.n	2b622 <__mcmp+0x32>
   2b610:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   2b614:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   2b618:	428c      	cmp	r4, r1
   2b61a:	d0f7      	beq.n	2b60c <__mcmp+0x1c>
   2b61c:	d205      	bcs.n	2b62a <__mcmp+0x3a>
   2b61e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   2b622:	f85d 4b04 	ldr.w	r4, [sp], #4
   2b626:	4770      	bx	lr
   2b628:	4770      	bx	lr
   2b62a:	2001      	movs	r0, #1
   2b62c:	f85d 4b04 	ldr.w	r4, [sp], #4
   2b630:	4770      	bx	lr
   2b632:	bf00      	nop

0002b634 <__mdiff>:
   2b634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b638:	4615      	mov	r5, r2
   2b63a:	690a      	ldr	r2, [r1, #16]
   2b63c:	692b      	ldr	r3, [r5, #16]
   2b63e:	1ad2      	subs	r2, r2, r3
   2b640:	2a00      	cmp	r2, #0
   2b642:	b083      	sub	sp, #12
   2b644:	4688      	mov	r8, r1
   2b646:	f040 8087 	bne.w	2b758 <__mdiff+0x124>
   2b64a:	f101 0614 	add.w	r6, r1, #20
   2b64e:	f105 0114 	add.w	r1, r5, #20
   2b652:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   2b656:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   2b65a:	e001      	b.n	2b660 <__mdiff+0x2c>
   2b65c:	429e      	cmp	r6, r3
   2b65e:	d27e      	bcs.n	2b75e <__mdiff+0x12a>
   2b660:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   2b664:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   2b668:	4294      	cmp	r4, r2
   2b66a:	d0f7      	beq.n	2b65c <__mdiff+0x28>
   2b66c:	d375      	bcc.n	2b75a <__mdiff+0x126>
   2b66e:	462b      	mov	r3, r5
   2b670:	2400      	movs	r4, #0
   2b672:	4645      	mov	r5, r8
   2b674:	4698      	mov	r8, r3
   2b676:	6869      	ldr	r1, [r5, #4]
   2b678:	f7ff fd32 	bl	2b0e0 <_Balloc>
   2b67c:	4681      	mov	r9, r0
   2b67e:	2800      	cmp	r0, #0
   2b680:	f000 8089 	beq.w	2b796 <__mdiff+0x162>
   2b684:	692e      	ldr	r6, [r5, #16]
   2b686:	60c4      	str	r4, [r0, #12]
   2b688:	f8d8 0010 	ldr.w	r0, [r8, #16]
   2b68c:	f105 0b14 	add.w	fp, r5, #20
   2b690:	f108 0e14 	add.w	lr, r8, #20
   2b694:	f109 0a14 	add.w	sl, r9, #20
   2b698:	f105 0210 	add.w	r2, r5, #16
   2b69c:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
   2b6a0:	eb0b 0186 	add.w	r1, fp, r6, lsl #2
   2b6a4:	4657      	mov	r7, sl
   2b6a6:	f04f 0c00 	mov.w	ip, #0
   2b6aa:	f8cd b004 	str.w	fp, [sp, #4]
   2b6ae:	f85e 4b04 	ldr.w	r4, [lr], #4
   2b6b2:	f852 5f04 	ldr.w	r5, [r2, #4]!
   2b6b6:	fa1f fb84 	uxth.w	fp, r4
   2b6ba:	b2ab      	uxth	r3, r5
   2b6bc:	eba3 030b 	sub.w	r3, r3, fp
   2b6c0:	0c24      	lsrs	r4, r4, #16
   2b6c2:	4463      	add	r3, ip
   2b6c4:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
   2b6c8:	eb04 4423 	add.w	r4, r4, r3, asr #16
   2b6cc:	b29b      	uxth	r3, r3
   2b6ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   2b6d2:	4570      	cmp	r0, lr
   2b6d4:	f847 3b04 	str.w	r3, [r7], #4
   2b6d8:	ea4f 4c24 	mov.w	ip, r4, asr #16
   2b6dc:	d8e7      	bhi.n	2b6ae <__mdiff+0x7a>
   2b6de:	eba0 0208 	sub.w	r2, r0, r8
   2b6e2:	f108 0815 	add.w	r8, r8, #21
   2b6e6:	4540      	cmp	r0, r8
   2b6e8:	f1a2 0215 	sub.w	r2, r2, #21
   2b6ec:	bf34      	ite	cc
   2b6ee:	2000      	movcc	r0, #0
   2b6f0:	2001      	movcs	r0, #1
   2b6f2:	0892      	lsrs	r2, r2, #2
   2b6f4:	2800      	cmp	r0, #0
   2b6f6:	f8dd b004 	ldr.w	fp, [sp, #4]
   2b6fa:	f102 0401 	add.w	r4, r2, #1
   2b6fe:	ea4f 0484 	mov.w	r4, r4, lsl #2
   2b702:	bf08      	it	eq
   2b704:	2404      	moveq	r4, #4
   2b706:	eb0b 0504 	add.w	r5, fp, r4
   2b70a:	42a9      	cmp	r1, r5
   2b70c:	4454      	add	r4, sl
   2b70e:	d933      	bls.n	2b778 <__mdiff+0x144>
   2b710:	4627      	mov	r7, r4
   2b712:	4628      	mov	r0, r5
   2b714:	f850 3b04 	ldr.w	r3, [r0], #4
   2b718:	fa1c fe83 	uxtah	lr, ip, r3
   2b71c:	0c1a      	lsrs	r2, r3, #16
   2b71e:	4463      	add	r3, ip
   2b720:	eb02 422e 	add.w	r2, r2, lr, asr #16
   2b724:	b29b      	uxth	r3, r3
   2b726:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2b72a:	4281      	cmp	r1, r0
   2b72c:	f847 3b04 	str.w	r3, [r7], #4
   2b730:	ea4f 4c22 	mov.w	ip, r2, asr #16
   2b734:	d8ee      	bhi.n	2b714 <__mdiff+0xe0>
   2b736:	3901      	subs	r1, #1
   2b738:	1b49      	subs	r1, r1, r5
   2b73a:	f021 0103 	bic.w	r1, r1, #3
   2b73e:	440c      	add	r4, r1
   2b740:	b923      	cbnz	r3, 2b74c <__mdiff+0x118>
   2b742:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   2b746:	3e01      	subs	r6, #1
   2b748:	2b00      	cmp	r3, #0
   2b74a:	d0fa      	beq.n	2b742 <__mdiff+0x10e>
   2b74c:	4648      	mov	r0, r9
   2b74e:	f8c9 6010 	str.w	r6, [r9, #16]
   2b752:	b003      	add	sp, #12
   2b754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b758:	da89      	bge.n	2b66e <__mdiff+0x3a>
   2b75a:	2401      	movs	r4, #1
   2b75c:	e78b      	b.n	2b676 <__mdiff+0x42>
   2b75e:	2100      	movs	r1, #0
   2b760:	f7ff fcbe 	bl	2b0e0 <_Balloc>
   2b764:	4681      	mov	r9, r0
   2b766:	b178      	cbz	r0, 2b788 <__mdiff+0x154>
   2b768:	2201      	movs	r2, #1
   2b76a:	2300      	movs	r3, #0
   2b76c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   2b770:	4648      	mov	r0, r9
   2b772:	b003      	add	sp, #12
   2b774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b778:	2800      	cmp	r0, #0
   2b77a:	ea4f 0282 	mov.w	r2, r2, lsl #2
   2b77e:	bf08      	it	eq
   2b780:	2200      	moveq	r2, #0
   2b782:	eb0a 0402 	add.w	r4, sl, r2
   2b786:	e7db      	b.n	2b740 <__mdiff+0x10c>
   2b788:	4b06      	ldr	r3, [pc, #24]	@ (2b7a4 <__mdiff+0x170>)
   2b78a:	4807      	ldr	r0, [pc, #28]	@ (2b7a8 <__mdiff+0x174>)
   2b78c:	464a      	mov	r2, r9
   2b78e:	f240 2137 	movw	r1, #567	@ 0x237
   2b792:	f7f9 fdfd 	bl	25390 <__assert_func>
   2b796:	4b03      	ldr	r3, [pc, #12]	@ (2b7a4 <__mdiff+0x170>)
   2b798:	4803      	ldr	r0, [pc, #12]	@ (2b7a8 <__mdiff+0x174>)
   2b79a:	464a      	mov	r2, r9
   2b79c:	f240 2145 	movw	r1, #581	@ 0x245
   2b7a0:	f7f9 fdf6 	bl	25390 <__assert_func>
   2b7a4:	00043d68 	.word	0x00043d68
   2b7a8:	00043de0 	.word	0x00043de0

0002b7ac <__d2b>:
   2b7ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2b7b0:	460e      	mov	r6, r1
   2b7b2:	b083      	sub	sp, #12
   2b7b4:	2101      	movs	r1, #1
   2b7b6:	ec59 8b10 	vmov	r8, r9, d0
   2b7ba:	4615      	mov	r5, r2
   2b7bc:	f7ff fc90 	bl	2b0e0 <_Balloc>
   2b7c0:	4604      	mov	r4, r0
   2b7c2:	2800      	cmp	r0, #0
   2b7c4:	d046      	beq.n	2b854 <__d2b+0xa8>
   2b7c6:	f3c9 570a 	ubfx	r7, r9, #20, #11
   2b7ca:	f3c9 0313 	ubfx	r3, r9, #0, #20
   2b7ce:	b10f      	cbz	r7, 2b7d4 <__d2b+0x28>
   2b7d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
   2b7d4:	9301      	str	r3, [sp, #4]
   2b7d6:	f1b8 0300 	subs.w	r3, r8, #0
   2b7da:	d113      	bne.n	2b804 <__d2b+0x58>
   2b7dc:	a801      	add	r0, sp, #4
   2b7de:	f7ff fd21 	bl	2b224 <__lo0bits>
   2b7e2:	9b01      	ldr	r3, [sp, #4]
   2b7e4:	6163      	str	r3, [r4, #20]
   2b7e6:	2201      	movs	r2, #1
   2b7e8:	3020      	adds	r0, #32
   2b7ea:	6122      	str	r2, [r4, #16]
   2b7ec:	b30f      	cbz	r7, 2b832 <__d2b+0x86>
   2b7ee:	f2a7 4733 	subw	r7, r7, #1075	@ 0x433
   2b7f2:	4407      	add	r7, r0
   2b7f4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
   2b7f8:	6037      	str	r7, [r6, #0]
   2b7fa:	6028      	str	r0, [r5, #0]
   2b7fc:	4620      	mov	r0, r4
   2b7fe:	b003      	add	sp, #12
   2b800:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2b804:	4668      	mov	r0, sp
   2b806:	9300      	str	r3, [sp, #0]
   2b808:	f7ff fd0c 	bl	2b224 <__lo0bits>
   2b80c:	9b01      	ldr	r3, [sp, #4]
   2b80e:	b1f8      	cbz	r0, 2b850 <__d2b+0xa4>
   2b810:	9900      	ldr	r1, [sp, #0]
   2b812:	f1c0 0220 	rsb	r2, r0, #32
   2b816:	fa03 f202 	lsl.w	r2, r3, r2
   2b81a:	40c3      	lsrs	r3, r0
   2b81c:	430a      	orrs	r2, r1
   2b81e:	9301      	str	r3, [sp, #4]
   2b820:	2b00      	cmp	r3, #0
   2b822:	6162      	str	r2, [r4, #20]
   2b824:	bf0c      	ite	eq
   2b826:	2201      	moveq	r2, #1
   2b828:	2202      	movne	r2, #2
   2b82a:	61a3      	str	r3, [r4, #24]
   2b82c:	6122      	str	r2, [r4, #16]
   2b82e:	2f00      	cmp	r7, #0
   2b830:	d1dd      	bne.n	2b7ee <__d2b+0x42>
   2b832:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   2b836:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
   2b83a:	6030      	str	r0, [r6, #0]
   2b83c:	6918      	ldr	r0, [r3, #16]
   2b83e:	f7ff fccf 	bl	2b1e0 <__hi0bits>
   2b842:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   2b846:	6028      	str	r0, [r5, #0]
   2b848:	4620      	mov	r0, r4
   2b84a:	b003      	add	sp, #12
   2b84c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2b850:	9a00      	ldr	r2, [sp, #0]
   2b852:	e7e5      	b.n	2b820 <__d2b+0x74>
   2b854:	4b03      	ldr	r3, [pc, #12]	@ (2b864 <__d2b+0xb8>)
   2b856:	4804      	ldr	r0, [pc, #16]	@ (2b868 <__d2b+0xbc>)
   2b858:	4622      	mov	r2, r4
   2b85a:	f240 310f 	movw	r1, #783	@ 0x30f
   2b85e:	f7f9 fd97 	bl	25390 <__assert_func>
   2b862:	bf00      	nop
   2b864:	00043d68 	.word	0x00043d68
   2b868:	00043de0 	.word	0x00043de0

0002b86c <_calloc_r>:
   2b86c:	b538      	push	{r3, r4, r5, lr}
   2b86e:	fba1 1402 	umull	r1, r4, r1, r2
   2b872:	bb54      	cbnz	r4, 2b8ca <_calloc_r+0x5e>
   2b874:	f7fb fe96 	bl	275a4 <_malloc_r>
   2b878:	4605      	mov	r5, r0
   2b87a:	b350      	cbz	r0, 2b8d2 <_calloc_r+0x66>
   2b87c:	f850 2c04 	ldr.w	r2, [r0, #-4]
   2b880:	f022 0203 	bic.w	r2, r2, #3
   2b884:	3a04      	subs	r2, #4
   2b886:	2a24      	cmp	r2, #36	@ 0x24
   2b888:	d810      	bhi.n	2b8ac <_calloc_r+0x40>
   2b88a:	2a13      	cmp	r2, #19
   2b88c:	d913      	bls.n	2b8b6 <_calloc_r+0x4a>
   2b88e:	2a1b      	cmp	r2, #27
   2b890:	e9c0 4400 	strd	r4, r4, [r0]
   2b894:	d916      	bls.n	2b8c4 <_calloc_r+0x58>
   2b896:	2a24      	cmp	r2, #36	@ 0x24
   2b898:	e9c0 4402 	strd	r4, r4, [r0, #8]
   2b89c:	bf0a      	itet	eq
   2b89e:	e9c0 4404 	strdeq	r4, r4, [r0, #16]
   2b8a2:	f100 0210 	addne.w	r2, r0, #16
   2b8a6:	f100 0218 	addeq.w	r2, r0, #24
   2b8aa:	e005      	b.n	2b8b8 <_calloc_r+0x4c>
   2b8ac:	4621      	mov	r1, r4
   2b8ae:	f7fb fb15 	bl	26edc <memset>
   2b8b2:	4628      	mov	r0, r5
   2b8b4:	bd38      	pop	{r3, r4, r5, pc}
   2b8b6:	4602      	mov	r2, r0
   2b8b8:	2300      	movs	r3, #0
   2b8ba:	e9c2 3300 	strd	r3, r3, [r2]
   2b8be:	6093      	str	r3, [r2, #8]
   2b8c0:	4628      	mov	r0, r5
   2b8c2:	bd38      	pop	{r3, r4, r5, pc}
   2b8c4:	f100 0208 	add.w	r2, r0, #8
   2b8c8:	e7f6      	b.n	2b8b8 <_calloc_r+0x4c>
   2b8ca:	f7fb fc21 	bl	27110 <__errno>
   2b8ce:	230c      	movs	r3, #12
   2b8d0:	6003      	str	r3, [r0, #0]
   2b8d2:	2500      	movs	r5, #0
   2b8d4:	4628      	mov	r0, r5
   2b8d6:	bd38      	pop	{r3, r4, r5, pc}

0002b8d8 <__aeabi_d2lz>:
   2b8d8:	b538      	push	{r3, r4, r5, lr}
   2b8da:	2200      	movs	r2, #0
   2b8dc:	2300      	movs	r3, #0
   2b8de:	4604      	mov	r4, r0
   2b8e0:	460d      	mov	r5, r1
   2b8e2:	f7ed fb87 	bl	18ff4 <__aeabi_dcmplt>
   2b8e6:	b928      	cbnz	r0, 2b8f4 <__aeabi_d2lz+0x1c>
   2b8e8:	4620      	mov	r0, r4
   2b8ea:	4629      	mov	r1, r5
   2b8ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2b8f0:	f000 b80a 	b.w	2b908 <__aeabi_d2ulz>
   2b8f4:	4620      	mov	r0, r4
   2b8f6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
   2b8fa:	f000 f805 	bl	2b908 <__aeabi_d2ulz>
   2b8fe:	4240      	negs	r0, r0
   2b900:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   2b904:	bd38      	pop	{r3, r4, r5, pc}
   2b906:	bf00      	nop

0002b908 <__aeabi_d2ulz>:
   2b908:	b5d0      	push	{r4, r6, r7, lr}
   2b90a:	4b0c      	ldr	r3, [pc, #48]	@ (2b93c <__aeabi_d2ulz+0x34>)
   2b90c:	2200      	movs	r2, #0
   2b90e:	4606      	mov	r6, r0
   2b910:	460f      	mov	r7, r1
   2b912:	f7ed f8fd 	bl	18b10 <__aeabi_dmul>
   2b916:	f7ed fc8d 	bl	19234 <__aeabi_d2uiz>
   2b91a:	4604      	mov	r4, r0
   2b91c:	f7ed f87e 	bl	18a1c <__aeabi_ui2d>
   2b920:	4b07      	ldr	r3, [pc, #28]	@ (2b940 <__aeabi_d2ulz+0x38>)
   2b922:	2200      	movs	r2, #0
   2b924:	f7ed f8f4 	bl	18b10 <__aeabi_dmul>
   2b928:	4602      	mov	r2, r0
   2b92a:	460b      	mov	r3, r1
   2b92c:	4630      	mov	r0, r6
   2b92e:	4639      	mov	r1, r7
   2b930:	f7ec ff36 	bl	187a0 <__aeabi_dsub>
   2b934:	f7ed fc7e 	bl	19234 <__aeabi_d2uiz>
   2b938:	4621      	mov	r1, r4
   2b93a:	bdd0      	pop	{r4, r6, r7, pc}
   2b93c:	3df00000 	.word	0x3df00000
   2b940:	41f00000 	.word	0x41f00000

0002b944 <__udivmoddi4>:
   2b944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b948:	9d08      	ldr	r5, [sp, #32]
   2b94a:	460e      	mov	r6, r1
   2b94c:	4604      	mov	r4, r0
   2b94e:	460f      	mov	r7, r1
   2b950:	2b00      	cmp	r3, #0
   2b952:	d14a      	bne.n	2b9ea <__udivmoddi4+0xa6>
   2b954:	4694      	mov	ip, r2
   2b956:	458c      	cmp	ip, r1
   2b958:	fab2 f282 	clz	r2, r2
   2b95c:	d960      	bls.n	2ba20 <__udivmoddi4+0xdc>
   2b95e:	b142      	cbz	r2, 2b972 <__udivmoddi4+0x2e>
   2b960:	f1c2 0320 	rsb	r3, r2, #32
   2b964:	4097      	lsls	r7, r2
   2b966:	fa20 f303 	lsr.w	r3, r0, r3
   2b96a:	fa0c fc02 	lsl.w	ip, ip, r2
   2b96e:	431f      	orrs	r7, r3
   2b970:	4094      	lsls	r4, r2
   2b972:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   2b976:	fa1f f68c 	uxth.w	r6, ip
   2b97a:	fbb7 f1fe 	udiv	r1, r7, lr
   2b97e:	0c23      	lsrs	r3, r4, #16
   2b980:	fb0e 7711 	mls	r7, lr, r1, r7
   2b984:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   2b988:	fb01 f006 	mul.w	r0, r1, r6
   2b98c:	4298      	cmp	r0, r3
   2b98e:	d90a      	bls.n	2b9a6 <__udivmoddi4+0x62>
   2b990:	eb1c 0303 	adds.w	r3, ip, r3
   2b994:	f101 37ff 	add.w	r7, r1, #4294967295	@ 0xffffffff
   2b998:	f080 8115 	bcs.w	2bbc6 <__udivmoddi4+0x282>
   2b99c:	4298      	cmp	r0, r3
   2b99e:	f240 8112 	bls.w	2bbc6 <__udivmoddi4+0x282>
   2b9a2:	3902      	subs	r1, #2
   2b9a4:	4463      	add	r3, ip
   2b9a6:	1a1b      	subs	r3, r3, r0
   2b9a8:	b2a4      	uxth	r4, r4
   2b9aa:	fbb3 f0fe 	udiv	r0, r3, lr
   2b9ae:	fb0e 3310 	mls	r3, lr, r0, r3
   2b9b2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   2b9b6:	fb00 f606 	mul.w	r6, r0, r6
   2b9ba:	42a6      	cmp	r6, r4
   2b9bc:	d90a      	bls.n	2b9d4 <__udivmoddi4+0x90>
   2b9be:	eb1c 0404 	adds.w	r4, ip, r4
   2b9c2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
   2b9c6:	f080 8100 	bcs.w	2bbca <__udivmoddi4+0x286>
   2b9ca:	42a6      	cmp	r6, r4
   2b9cc:	f240 80fd 	bls.w	2bbca <__udivmoddi4+0x286>
   2b9d0:	4464      	add	r4, ip
   2b9d2:	3802      	subs	r0, #2
   2b9d4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
   2b9d8:	1ba4      	subs	r4, r4, r6
   2b9da:	2100      	movs	r1, #0
   2b9dc:	b11d      	cbz	r5, 2b9e6 <__udivmoddi4+0xa2>
   2b9de:	40d4      	lsrs	r4, r2
   2b9e0:	2300      	movs	r3, #0
   2b9e2:	e9c5 4300 	strd	r4, r3, [r5]
   2b9e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2b9ea:	428b      	cmp	r3, r1
   2b9ec:	d905      	bls.n	2b9fa <__udivmoddi4+0xb6>
   2b9ee:	b10d      	cbz	r5, 2b9f4 <__udivmoddi4+0xb0>
   2b9f0:	e9c5 0100 	strd	r0, r1, [r5]
   2b9f4:	2100      	movs	r1, #0
   2b9f6:	4608      	mov	r0, r1
   2b9f8:	e7f5      	b.n	2b9e6 <__udivmoddi4+0xa2>
   2b9fa:	fab3 f183 	clz	r1, r3
   2b9fe:	2900      	cmp	r1, #0
   2ba00:	d146      	bne.n	2ba90 <__udivmoddi4+0x14c>
   2ba02:	42b3      	cmp	r3, r6
   2ba04:	d302      	bcc.n	2ba0c <__udivmoddi4+0xc8>
   2ba06:	4282      	cmp	r2, r0
   2ba08:	f200 80f5 	bhi.w	2bbf6 <__udivmoddi4+0x2b2>
   2ba0c:	1a84      	subs	r4, r0, r2
   2ba0e:	eb66 0203 	sbc.w	r2, r6, r3
   2ba12:	2001      	movs	r0, #1
   2ba14:	4617      	mov	r7, r2
   2ba16:	2d00      	cmp	r5, #0
   2ba18:	d0e5      	beq.n	2b9e6 <__udivmoddi4+0xa2>
   2ba1a:	e9c5 4700 	strd	r4, r7, [r5]
   2ba1e:	e7e2      	b.n	2b9e6 <__udivmoddi4+0xa2>
   2ba20:	2a00      	cmp	r2, #0
   2ba22:	f040 8093 	bne.w	2bb4c <__udivmoddi4+0x208>
   2ba26:	eba1 030c 	sub.w	r3, r1, ip
   2ba2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
   2ba2e:	fa1f fe8c 	uxth.w	lr, ip
   2ba32:	2101      	movs	r1, #1
   2ba34:	fbb3 f6f7 	udiv	r6, r3, r7
   2ba38:	fb07 3016 	mls	r0, r7, r6, r3
   2ba3c:	0c23      	lsrs	r3, r4, #16
   2ba3e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   2ba42:	fb0e f006 	mul.w	r0, lr, r6
   2ba46:	4298      	cmp	r0, r3
   2ba48:	d908      	bls.n	2ba5c <__udivmoddi4+0x118>
   2ba4a:	eb1c 0303 	adds.w	r3, ip, r3
   2ba4e:	f106 38ff 	add.w	r8, r6, #4294967295	@ 0xffffffff
   2ba52:	d202      	bcs.n	2ba5a <__udivmoddi4+0x116>
   2ba54:	4298      	cmp	r0, r3
   2ba56:	f200 80d0 	bhi.w	2bbfa <__udivmoddi4+0x2b6>
   2ba5a:	4646      	mov	r6, r8
   2ba5c:	1a1b      	subs	r3, r3, r0
   2ba5e:	b2a4      	uxth	r4, r4
   2ba60:	fbb3 f0f7 	udiv	r0, r3, r7
   2ba64:	fb07 3310 	mls	r3, r7, r0, r3
   2ba68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   2ba6c:	fb0e fe00 	mul.w	lr, lr, r0
   2ba70:	45a6      	cmp	lr, r4
   2ba72:	d908      	bls.n	2ba86 <__udivmoddi4+0x142>
   2ba74:	eb1c 0404 	adds.w	r4, ip, r4
   2ba78:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
   2ba7c:	d202      	bcs.n	2ba84 <__udivmoddi4+0x140>
   2ba7e:	45a6      	cmp	lr, r4
   2ba80:	f200 80b6 	bhi.w	2bbf0 <__udivmoddi4+0x2ac>
   2ba84:	4618      	mov	r0, r3
   2ba86:	eba4 040e 	sub.w	r4, r4, lr
   2ba8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   2ba8e:	e7a5      	b.n	2b9dc <__udivmoddi4+0x98>
   2ba90:	f1c1 0720 	rsb	r7, r1, #32
   2ba94:	408b      	lsls	r3, r1
   2ba96:	fa22 fc07 	lsr.w	ip, r2, r7
   2ba9a:	ea4c 0c03 	orr.w	ip, ip, r3
   2ba9e:	fa06 fe01 	lsl.w	lr, r6, r1
   2baa2:	fa20 f407 	lsr.w	r4, r0, r7
   2baa6:	fa26 f307 	lsr.w	r3, r6, r7
   2baaa:	ea44 040e 	orr.w	r4, r4, lr
   2baae:	fa00 f801 	lsl.w	r8, r0, r1
   2bab2:	ea4f 401c 	mov.w	r0, ip, lsr #16
   2bab6:	ea4f 4914 	mov.w	r9, r4, lsr #16
   2baba:	fbb3 fef0 	udiv	lr, r3, r0
   2babe:	fa1f f68c 	uxth.w	r6, ip
   2bac2:	fb00 331e 	mls	r3, r0, lr, r3
   2bac6:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   2baca:	fb0e f906 	mul.w	r9, lr, r6
   2bace:	4599      	cmp	r9, r3
   2bad0:	fa02 f201 	lsl.w	r2, r2, r1
   2bad4:	d90b      	bls.n	2baee <__udivmoddi4+0x1aa>
   2bad6:	eb1c 0303 	adds.w	r3, ip, r3
   2bada:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
   2bade:	f080 8085 	bcs.w	2bbec <__udivmoddi4+0x2a8>
   2bae2:	4599      	cmp	r9, r3
   2bae4:	f240 8082 	bls.w	2bbec <__udivmoddi4+0x2a8>
   2bae8:	f1ae 0e02 	sub.w	lr, lr, #2
   2baec:	4463      	add	r3, ip
   2baee:	eba3 0909 	sub.w	r9, r3, r9
   2baf2:	b2a4      	uxth	r4, r4
   2baf4:	fbb9 f3f0 	udiv	r3, r9, r0
   2baf8:	fb00 9913 	mls	r9, r0, r3, r9
   2bafc:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
   2bb00:	fb03 f606 	mul.w	r6, r3, r6
   2bb04:	42a6      	cmp	r6, r4
   2bb06:	d908      	bls.n	2bb1a <__udivmoddi4+0x1d6>
   2bb08:	eb1c 0404 	adds.w	r4, ip, r4
   2bb0c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
   2bb10:	d268      	bcs.n	2bbe4 <__udivmoddi4+0x2a0>
   2bb12:	42a6      	cmp	r6, r4
   2bb14:	d966      	bls.n	2bbe4 <__udivmoddi4+0x2a0>
   2bb16:	3b02      	subs	r3, #2
   2bb18:	4464      	add	r4, ip
   2bb1a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
   2bb1e:	1ba4      	subs	r4, r4, r6
   2bb20:	fba0 e602 	umull	lr, r6, r0, r2
   2bb24:	42b4      	cmp	r4, r6
   2bb26:	4673      	mov	r3, lr
   2bb28:	46b1      	mov	r9, r6
   2bb2a:	d352      	bcc.n	2bbd2 <__udivmoddi4+0x28e>
   2bb2c:	d04f      	beq.n	2bbce <__udivmoddi4+0x28a>
   2bb2e:	b15d      	cbz	r5, 2bb48 <__udivmoddi4+0x204>
   2bb30:	ebb8 0203 	subs.w	r2, r8, r3
   2bb34:	eb64 0409 	sbc.w	r4, r4, r9
   2bb38:	fa04 f707 	lsl.w	r7, r4, r7
   2bb3c:	fa22 f301 	lsr.w	r3, r2, r1
   2bb40:	431f      	orrs	r7, r3
   2bb42:	40cc      	lsrs	r4, r1
   2bb44:	e9c5 7400 	strd	r7, r4, [r5]
   2bb48:	2100      	movs	r1, #0
   2bb4a:	e74c      	b.n	2b9e6 <__udivmoddi4+0xa2>
   2bb4c:	f1c2 0120 	rsb	r1, r2, #32
   2bb50:	fa20 f301 	lsr.w	r3, r0, r1
   2bb54:	fa0c fc02 	lsl.w	ip, ip, r2
   2bb58:	fa26 f101 	lsr.w	r1, r6, r1
   2bb5c:	4096      	lsls	r6, r2
   2bb5e:	4333      	orrs	r3, r6
   2bb60:	ea4f 471c 	mov.w	r7, ip, lsr #16
   2bb64:	fa1f fe8c 	uxth.w	lr, ip
   2bb68:	fbb1 f0f7 	udiv	r0, r1, r7
   2bb6c:	fb07 1610 	mls	r6, r7, r0, r1
   2bb70:	0c19      	lsrs	r1, r3, #16
   2bb72:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
   2bb76:	fb00 f60e 	mul.w	r6, r0, lr
   2bb7a:	428e      	cmp	r6, r1
   2bb7c:	fa04 f402 	lsl.w	r4, r4, r2
   2bb80:	d908      	bls.n	2bb94 <__udivmoddi4+0x250>
   2bb82:	eb1c 0101 	adds.w	r1, ip, r1
   2bb86:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
   2bb8a:	d22d      	bcs.n	2bbe8 <__udivmoddi4+0x2a4>
   2bb8c:	428e      	cmp	r6, r1
   2bb8e:	d92b      	bls.n	2bbe8 <__udivmoddi4+0x2a4>
   2bb90:	3802      	subs	r0, #2
   2bb92:	4461      	add	r1, ip
   2bb94:	1b89      	subs	r1, r1, r6
   2bb96:	b29b      	uxth	r3, r3
   2bb98:	fbb1 f6f7 	udiv	r6, r1, r7
   2bb9c:	fb07 1116 	mls	r1, r7, r6, r1
   2bba0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   2bba4:	fb06 f10e 	mul.w	r1, r6, lr
   2bba8:	4299      	cmp	r1, r3
   2bbaa:	d908      	bls.n	2bbbe <__udivmoddi4+0x27a>
   2bbac:	eb1c 0303 	adds.w	r3, ip, r3
   2bbb0:	f106 38ff 	add.w	r8, r6, #4294967295	@ 0xffffffff
   2bbb4:	d214      	bcs.n	2bbe0 <__udivmoddi4+0x29c>
   2bbb6:	4299      	cmp	r1, r3
   2bbb8:	d912      	bls.n	2bbe0 <__udivmoddi4+0x29c>
   2bbba:	3e02      	subs	r6, #2
   2bbbc:	4463      	add	r3, ip
   2bbbe:	1a5b      	subs	r3, r3, r1
   2bbc0:	ea46 4100 	orr.w	r1, r6, r0, lsl #16
   2bbc4:	e736      	b.n	2ba34 <__udivmoddi4+0xf0>
   2bbc6:	4639      	mov	r1, r7
   2bbc8:	e6ed      	b.n	2b9a6 <__udivmoddi4+0x62>
   2bbca:	4618      	mov	r0, r3
   2bbcc:	e702      	b.n	2b9d4 <__udivmoddi4+0x90>
   2bbce:	45f0      	cmp	r8, lr
   2bbd0:	d2ad      	bcs.n	2bb2e <__udivmoddi4+0x1ea>
   2bbd2:	ebbe 0302 	subs.w	r3, lr, r2
   2bbd6:	eb66 060c 	sbc.w	r6, r6, ip
   2bbda:	3801      	subs	r0, #1
   2bbdc:	46b1      	mov	r9, r6
   2bbde:	e7a6      	b.n	2bb2e <__udivmoddi4+0x1ea>
   2bbe0:	4646      	mov	r6, r8
   2bbe2:	e7ec      	b.n	2bbbe <__udivmoddi4+0x27a>
   2bbe4:	4603      	mov	r3, r0
   2bbe6:	e798      	b.n	2bb1a <__udivmoddi4+0x1d6>
   2bbe8:	4640      	mov	r0, r8
   2bbea:	e7d3      	b.n	2bb94 <__udivmoddi4+0x250>
   2bbec:	46d6      	mov	lr, sl
   2bbee:	e77e      	b.n	2baee <__udivmoddi4+0x1aa>
   2bbf0:	4464      	add	r4, ip
   2bbf2:	3802      	subs	r0, #2
   2bbf4:	e747      	b.n	2ba86 <__udivmoddi4+0x142>
   2bbf6:	4608      	mov	r0, r1
   2bbf8:	e70d      	b.n	2ba16 <__udivmoddi4+0xd2>
   2bbfa:	3e02      	subs	r6, #2
   2bbfc:	4463      	add	r3, ip
   2bbfe:	e72d      	b.n	2ba5c <__udivmoddi4+0x118>

0002bc00 <_close>:
   2bc00:	4b02      	ldr	r3, [pc, #8]	@ (2bc0c <_close+0xc>)
   2bc02:	2258      	movs	r2, #88	@ 0x58
   2bc04:	601a      	str	r2, [r3, #0]
   2bc06:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   2bc0a:	4770      	bx	lr
   2bc0c:	10050264 	.word	0x10050264

0002bc10 <_fstat>:
   2bc10:	4b02      	ldr	r3, [pc, #8]	@ (2bc1c <_fstat+0xc>)
   2bc12:	2258      	movs	r2, #88	@ 0x58
   2bc14:	601a      	str	r2, [r3, #0]
   2bc16:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   2bc1a:	4770      	bx	lr
   2bc1c:	10050264 	.word	0x10050264

0002bc20 <_getpid>:
   2bc20:	4b02      	ldr	r3, [pc, #8]	@ (2bc2c <_getpid+0xc>)
   2bc22:	2258      	movs	r2, #88	@ 0x58
   2bc24:	601a      	str	r2, [r3, #0]
   2bc26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   2bc2a:	4770      	bx	lr
   2bc2c:	10050264 	.word	0x10050264

0002bc30 <_isatty>:
   2bc30:	4b02      	ldr	r3, [pc, #8]	@ (2bc3c <_isatty+0xc>)
   2bc32:	2258      	movs	r2, #88	@ 0x58
   2bc34:	601a      	str	r2, [r3, #0]
   2bc36:	2000      	movs	r0, #0
   2bc38:	4770      	bx	lr
   2bc3a:	bf00      	nop
   2bc3c:	10050264 	.word	0x10050264

0002bc40 <_kill>:
   2bc40:	4b02      	ldr	r3, [pc, #8]	@ (2bc4c <_kill+0xc>)
   2bc42:	2258      	movs	r2, #88	@ 0x58
   2bc44:	601a      	str	r2, [r3, #0]
   2bc46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   2bc4a:	4770      	bx	lr
   2bc4c:	10050264 	.word	0x10050264

0002bc50 <_lseek>:
   2bc50:	4b02      	ldr	r3, [pc, #8]	@ (2bc5c <_lseek+0xc>)
   2bc52:	2258      	movs	r2, #88	@ 0x58
   2bc54:	601a      	str	r2, [r3, #0]
   2bc56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   2bc5a:	4770      	bx	lr
   2bc5c:	10050264 	.word	0x10050264

0002bc60 <_read>:
   2bc60:	4b02      	ldr	r3, [pc, #8]	@ (2bc6c <_read+0xc>)
   2bc62:	2258      	movs	r2, #88	@ 0x58
   2bc64:	601a      	str	r2, [r3, #0]
   2bc66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   2bc6a:	4770      	bx	lr
   2bc6c:	10050264 	.word	0x10050264

0002bc70 <_sbrk>:
   2bc70:	4a04      	ldr	r2, [pc, #16]	@ (2bc84 <_sbrk+0x14>)
   2bc72:	4905      	ldr	r1, [pc, #20]	@ (2bc88 <_sbrk+0x18>)
   2bc74:	6813      	ldr	r3, [r2, #0]
   2bc76:	2b00      	cmp	r3, #0
   2bc78:	bf08      	it	eq
   2bc7a:	460b      	moveq	r3, r1
   2bc7c:	4418      	add	r0, r3
   2bc7e:	6010      	str	r0, [r2, #0]
   2bc80:	4618      	mov	r0, r3
   2bc82:	4770      	bx	lr
   2bc84:	1005026c 	.word	0x1005026c
   2bc88:	10009000 	.word	0x10009000

0002bc8c <_write>:
   2bc8c:	4b02      	ldr	r3, [pc, #8]	@ (2bc98 <_write+0xc>)
   2bc8e:	2258      	movs	r2, #88	@ 0x58
   2bc90:	601a      	str	r2, [r3, #0]
   2bc92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   2bc96:	4770      	bx	lr
   2bc98:	10050264 	.word	0x10050264

0002bc9c <_exit>:
   2bc9c:	e7fe      	b.n	2bc9c <_exit>
   2bc9e:	bf00      	nop

0002bca0 <tud_cdc_rx_cb>:

// Invoked when CDC interface received data from host
void tud_cdc_rx_cb(uint8_t itf) {
    (void)itf;
    ns_usb_transaction_t rx;
    if (usb_config.rx_cb != NULL) {
   2bca0:	4b0c      	ldr	r3, [pc, #48]	@ (2bcd4 <tud_cdc_rx_cb+0x34>)
   2bca2:	699a      	ldr	r2, [r3, #24]
   2bca4:	b192      	cbz	r2, 2bccc <tud_cdc_rx_cb+0x2c>
void tud_cdc_rx_cb(uint8_t itf) {
   2bca6:	b510      	push	{r4, lr}
        rx.handle = &usb_config;
        rx.rx_buffer = usb_config.rx_buffer;
   2bca8:	689c      	ldr	r4, [r3, #8]
        rx.tx_buffer = usb_config.tx_buffer;
   2bcaa:	6919      	ldr	r1, [r3, #16]
void tud_cdc_rx_cb(uint8_t itf) {
   2bcac:	b084      	sub	sp, #16
        rx.rx_buffer = usb_config.rx_buffer;
   2bcae:	e9cd 3400 	strd	r3, r4, [sp]
        rx.status = AM_HAL_STATUS_SUCCESS;
   2bcb2:	2300      	movs	r3, #0
   2bcb4:	f88d 300c 	strb.w	r3, [sp, #12]
        rx.itf = itf;
   2bcb8:	f88d 000d 	strb.w	r0, [sp, #13]
        rx.tx_buffer = usb_config.tx_buffer;
   2bcbc:	9102      	str	r1, [sp, #8]
        usb_config.rx_cb(&rx);
   2bcbe:	4668      	mov	r0, sp
   2bcc0:	4790      	blx	r2
    }
    gGotUSBRx = 1;
   2bcc2:	4b05      	ldr	r3, [pc, #20]	@ (2bcd8 <tud_cdc_rx_cb+0x38>)
   2bcc4:	2201      	movs	r2, #1
   2bcc6:	701a      	strb	r2, [r3, #0]
    // ns_lp_printf("---rx---\n");
}
   2bcc8:	b004      	add	sp, #16
   2bcca:	bd10      	pop	{r4, pc}
    gGotUSBRx = 1;
   2bccc:	4b02      	ldr	r3, [pc, #8]	@ (2bcd8 <tud_cdc_rx_cb+0x38>)
   2bcce:	2201      	movs	r2, #1
   2bcd0:	701a      	strb	r2, [r3, #0]
   2bcd2:	4770      	bx	lr
   2bcd4:	1000db34 	.word	0x1000db34
   2bcd8:	10051248 	.word	0x10051248

0002bcdc <tud_cdc_tx_complete_cb>:

void tud_cdc_tx_complete_cb(uint8_t itf) {
    (void)itf;
    ns_usb_transaction_t rx;
    if (usb_config.tx_cb != NULL) {
   2bcdc:	4b09      	ldr	r3, [pc, #36]	@ (2bd04 <tud_cdc_tx_complete_cb+0x28>)
   2bcde:	69da      	ldr	r2, [r3, #28]
   2bce0:	b17a      	cbz	r2, 2bd02 <tud_cdc_tx_complete_cb+0x26>
void tud_cdc_tx_complete_cb(uint8_t itf) {
   2bce2:	b510      	push	{r4, lr}
        rx.handle = &usb_config;
        rx.rx_buffer = usb_config.rx_buffer;
   2bce4:	689c      	ldr	r4, [r3, #8]
        rx.tx_buffer = usb_config.tx_buffer;
   2bce6:	6919      	ldr	r1, [r3, #16]
void tud_cdc_tx_complete_cb(uint8_t itf) {
   2bce8:	b084      	sub	sp, #16
        rx.rx_buffer = usb_config.rx_buffer;
   2bcea:	e9cd 3400 	strd	r3, r4, [sp]
        rx.status = AM_HAL_STATUS_SUCCESS;
   2bcee:	2300      	movs	r3, #0
        rx.itf = itf;
   2bcf0:	f88d 000d 	strb.w	r0, [sp, #13]
        rx.tx_buffer = usb_config.tx_buffer;
   2bcf4:	9102      	str	r1, [sp, #8]
        rx.status = AM_HAL_STATUS_SUCCESS;
   2bcf6:	f88d 300c 	strb.w	r3, [sp, #12]
        usb_config.tx_cb(&rx);
   2bcfa:	4668      	mov	r0, sp
   2bcfc:	4790      	blx	r2
    }
    // ns_lp_printf("---tx---\n");
}
   2bcfe:	b004      	add	sp, #16
   2bd00:	bd10      	pop	{r4, pc}
   2bd02:	4770      	bx	lr
   2bd04:	1000db34 	.word	0x1000db34

0002bd08 <tud_descriptor_device_cb>:

//*****************************************************************************
//! @brief Invoked when received GET DEVICE DESCRIPTOR
//! @return Application return pointer to descriptor
//*****************************************************************************
uint8_t const *tud_descriptor_device_cb(void) { return (uint8_t const *)&desc_device; }
   2bd08:	4800      	ldr	r0, [pc, #0]	@ (2bd0c <tud_descriptor_device_cb+0x4>)
   2bd0a:	4770      	bx	lr
   2bd0c:	0004b9cc 	.word	0x0004b9cc

0002bd10 <tud_descriptor_configuration_cb>:
//! @note Descriptor contents must exist long enough for transfer to complete
//!
//! @param index
//! @return Application return pointer to descriptor.
//*****************************************************************************
uint8_t const *tud_descriptor_configuration_cb(uint8_t index) {
   2bd10:	b508      	push	{r3, lr}
    (void)index; // for multiple configurations

#if TUD_OPT_HIGH_SPEED
    // Although we are highspeed, host may be fullspeed.
    return (tud_speed_get() == TUSB_SPEED_HIGH) ? desc_hs_configuration : desc_fs_configuration;
   2bd12:	f007 f809 	bl	32d28 <tud_speed_get>
   2bd16:	4a03      	ldr	r2, [pc, #12]	@ (2bd24 <tud_descriptor_configuration_cb+0x14>)
   2bd18:	4b03      	ldr	r3, [pc, #12]	@ (2bd28 <tud_descriptor_configuration_cb+0x18>)
#else
    return desc_fs_configuration;
#endif
}
   2bd1a:	2802      	cmp	r0, #2
   2bd1c:	bf14      	ite	ne
   2bd1e:	4610      	movne	r0, r2
   2bd20:	4618      	moveq	r0, r3
   2bd22:	bd08      	pop	{r3, pc}
   2bd24:	0004b964 	.word	0x0004b964
   2bd28:	0004b900 	.word	0x0004b900

0002bd2c <tud_descriptor_bos_cb>:
    TUD_BOS_WEBUSB_DESCRIPTOR(VENDOR_REQUEST_WEBUSB, 1),

    // Microsoft OS 2.0 descriptor
    TUD_BOS_MS_OS_20_DESCRIPTOR(MS_OS_20_DESC_LEN, VENDOR_REQUEST_MICROSOFT)};

uint8_t const *tud_descriptor_bos_cb(void) { return desc_bos; }
   2bd2c:	4800      	ldr	r0, [pc, #0]	@ (2bd30 <tud_descriptor_bos_cb+0x4>)
   2bd2e:	4770      	bx	lr
   2bd30:	0004b8c4 	.word	0x0004b8c4

0002bd34 <tud_descriptor_string_cb>:
//! @brief Invoked when received GET STRING DESCRIPTOR request
//!
//! @return Application return pointer to descriptor.
//
//*****************************************************************************
uint16_t const *tud_descriptor_string_cb(uint8_t index, uint16_t langid) {
   2bd34:	b538      	push	{r3, r4, r5, lr}
    (void)langid;

    uint8_t chr_count;

    if (index == 0) {
   2bd36:	b950      	cbnz	r0, 2bd4e <tud_descriptor_string_cb+0x1a>
        memcpy(&_desc_str[1], usb_string_desc_arr[0], 2);
   2bd38:	4b1a      	ldr	r3, [pc, #104]	@ (2bda4 <tud_descriptor_string_cb+0x70>)
   2bd3a:	4d1b      	ldr	r5, [pc, #108]	@ (2bda8 <tud_descriptor_string_cb+0x74>)
   2bd3c:	681b      	ldr	r3, [r3, #0]
   2bd3e:	881b      	ldrh	r3, [r3, #0]
   2bd40:	806b      	strh	r3, [r5, #2]
        chr_count = 1;
   2bd42:	f44f 7c41 	mov.w	ip, #772	@ 0x304
    //
    // first byte is length (including header), second byte is string type
    //
    _desc_str[0] = (TUSB_DESC_STRING << 8) | (2 * chr_count + 2);

    return _desc_str;
   2bd46:	4818      	ldr	r0, [pc, #96]	@ (2bda8 <tud_descriptor_string_cb+0x74>)
    _desc_str[0] = (TUSB_DESC_STRING << 8) | (2 * chr_count + 2);
   2bd48:	f8a5 c000 	strh.w	ip, [r5]
}
   2bd4c:	bd38      	pop	{r3, r4, r5, pc}
        if (!(index < sizeof(usb_string_desc_arr) / sizeof(usb_string_desc_arr[0]))) {
   2bd4e:	2805      	cmp	r0, #5
   2bd50:	d825      	bhi.n	2bd9e <tud_descriptor_string_cb+0x6a>
        const char *str = usb_string_desc_arr[index];
   2bd52:	4b14      	ldr	r3, [pc, #80]	@ (2bda4 <tud_descriptor_string_cb+0x70>)
   2bd54:	4d14      	ldr	r5, [pc, #80]	@ (2bda8 <tud_descriptor_string_cb+0x74>)
   2bd56:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
        chr_count = strlen(str);
   2bd5a:	4620      	mov	r0, r4
   2bd5c:	f7ec fcb0 	bl	186c0 <strlen>
   2bd60:	b2c0      	uxtb	r0, r0
        if (chr_count >= sizeof(_desc_str)) {
   2bd62:	283f      	cmp	r0, #63	@ 0x3f
   2bd64:	4686      	mov	lr, r0
   2bd66:	bf28      	it	cs
   2bd68:	f04f 0e3f 	movcs.w	lr, #63	@ 0x3f
    _desc_str[0] = (TUSB_DESC_STRING << 8) | (2 * chr_count + 2);
   2bd6c:	f10e 0c01 	add.w	ip, lr, #1
   2bd70:	fa5f fc8c 	uxtb.w	ip, ip
   2bd74:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   2bd78:	f44c 7c40 	orr.w	ip, ip, #768	@ 0x300
        for (uint8_t i = 0; i < chr_count; i++) {
   2bd7c:	2800      	cmp	r0, #0
   2bd7e:	d0e2      	beq.n	2bd46 <tud_descriptor_string_cb+0x12>
   2bd80:	1e60      	subs	r0, r4, #1
   2bd82:	462a      	mov	r2, r5
   2bd84:	2300      	movs	r3, #0
            _desc_str[1 + i] = str[i];
   2bd86:	3301      	adds	r3, #1
   2bd88:	b2db      	uxtb	r3, r3
   2bd8a:	f810 1f01 	ldrb.w	r1, [r0, #1]!
   2bd8e:	f822 1f02 	strh.w	r1, [r2, #2]!
        for (uint8_t i = 0; i < chr_count; i++) {
   2bd92:	459e      	cmp	lr, r3
   2bd94:	d8f7      	bhi.n	2bd86 <tud_descriptor_string_cb+0x52>
    return _desc_str;
   2bd96:	4804      	ldr	r0, [pc, #16]	@ (2bda8 <tud_descriptor_string_cb+0x74>)
    _desc_str[0] = (TUSB_DESC_STRING << 8) | (2 * chr_count + 2);
   2bd98:	f8a5 c000 	strh.w	ip, [r5]
    return _desc_str;
   2bd9c:	e7d6      	b.n	2bd4c <tud_descriptor_string_cb+0x18>
            return NULL;
   2bd9e:	2000      	movs	r0, #0
}
   2bda0:	bd38      	pop	{r3, r4, r5, pc}
   2bda2:	bf00      	nop
   2bda4:	1000da84 	.word	0x1000da84
   2bda8:	10050270 	.word	0x10050270

0002bdac <tud_mount_cb>:
//--------------------------------------------------------------------+
// Device callbacks
//--------------------------------------------------------------------+

// Invoked when device is mounted
void tud_mount_cb(void) { webusb_connected = false; }
   2bdac:	4b01      	ldr	r3, [pc, #4]	@ (2bdb4 <tud_mount_cb+0x8>)
   2bdae:	2200      	movs	r2, #0
   2bdb0:	701a      	strb	r2, [r3, #0]
   2bdb2:	4770      	bx	lr
   2bdb4:	100502c0 	.word	0x100502c0

0002bdb8 <tud_umount_cb>:

#ifndef TUSB_ADDED_FUNCTIONS
// Invoked when device is unmounted
void tud_umount_cb(void) { webusb_connected = false; }
   2bdb8:	4b01      	ldr	r3, [pc, #4]	@ (2bdc0 <tud_umount_cb+0x8>)
   2bdba:	2200      	movs	r2, #0
   2bdbc:	701a      	strb	r2, [r3, #0]
   2bdbe:	4770      	bx	lr
   2bdc0:	100502c0 	.word	0x100502c0

0002bdc4 <tud_suspend_cb>:
// Invoked when usb bus is suspended
// remote_wakeup_en : if host allow us  to perform remote wakeup
// Within 7ms, device must draw an average of current less than 2.5 mA from bus
void tud_suspend_cb(bool remote_wakeup_en) {
    (void)remote_wakeup_en;
    webusb_connected = false;
   2bdc4:	4b01      	ldr	r3, [pc, #4]	@ (2bdcc <tud_suspend_cb+0x8>)
   2bdc6:	2200      	movs	r2, #0
   2bdc8:	701a      	strb	r2, [r3, #0]
}
   2bdca:	4770      	bx	lr
   2bdcc:	100502c0 	.word	0x100502c0

0002bdd0 <tud_resume_cb>:

// Invoked when usb bus is resumed
void tud_resume_cb(void) { webusb_connected = false; }
   2bdd0:	4b01      	ldr	r3, [pc, #4]	@ (2bdd8 <tud_resume_cb+0x8>)
   2bdd2:	2200      	movs	r2, #0
   2bdd4:	701a      	strb	r2, [r3, #0]
   2bdd6:	4770      	bx	lr
   2bdd8:	100502c0 	.word	0x100502c0

0002bddc <tud_vendor_rx_cb>:

// Invoked when received new data
void tud_vendor_rx_cb(uint8_t itf) {
   2bddc:	b570      	push	{r4, r5, r6, lr}
  return tud_vendor_n_available(0);
}

static inline uint32_t tud_vendor_read (void* buffer, uint32_t bufsize)
{
  return tud_vendor_n_read(0, buffer, bufsize);
   2bdde:	4d16      	ldr	r5, [pc, #88]	@ (2be38 <tud_vendor_rx_cb+0x5c>)
        BSTREAM_TO_UINT16(frame_header, p);

        // Skip frame header, then transfer buffer to callback function
        switch (frame_header) {
        case RX_ACORE_MSG:
            if (webusb_parameter.rx_msg_cb) {
   2bde0:	4c16      	ldr	r4, [pc, #88]	@ (2be3c <tud_vendor_rx_cb+0x60>)
                webusb_parameter.rx_msg_cb(
   2bde2:	1cae      	adds	r6, r5, #2
  return tud_vendor_n_available(0);
   2bde4:	2000      	movs	r0, #0
   2bde6:	f007 fe41 	bl	33a6c <tud_vendor_n_available>
   2bdea:	4603      	mov	r3, r0
  return tud_vendor_n_read(0, buffer, bufsize);
   2bdec:	4912      	ldr	r1, [pc, #72]	@ (2be38 <tud_vendor_rx_cb+0x5c>)
   2bdee:	f44f 7200 	mov.w	r2, #512	@ 0x200
   2bdf2:	2000      	movs	r0, #0
    while (tud_vendor_available()) {
   2bdf4:	b1f3      	cbz	r3, 2be34 <tud_vendor_rx_cb+0x58>
   2bdf6:	f007 fe45 	bl	33a84 <tud_vendor_n_read>
        BSTREAM_TO_UINT16(frame_header, p);
   2bdfa:	8829      	ldrh	r1, [r5, #0]
        switch (frame_header) {
   2bdfc:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
   2be00:	d008      	beq.n	2be14 <tud_vendor_rx_cb+0x38>
   2be02:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
   2be06:	d00d      	beq.n	2be24 <tud_vendor_rx_cb+0x48>
                webusb_parameter.rx_raw_cb(
                    p, bytes_rx - sizeof(frame_header), webusb_parameter.rx_raw_param);
            }
            break;
        default:
            ns_lp_printf("Error: Unsupported type of Rx Frame Header: %d\n", frame_header);
   2be08:	ba49      	rev16	r1, r1
   2be0a:	480d      	ldr	r0, [pc, #52]	@ (2be40 <tud_vendor_rx_cb+0x64>)
   2be0c:	b289      	uxth	r1, r1
   2be0e:	f000 f8ab 	bl	2bf68 <ns_lp_printf>
            break;
   2be12:	e7e7      	b.n	2bde4 <tud_vendor_rx_cb+0x8>
            if (webusb_parameter.rx_msg_cb) {
   2be14:	6823      	ldr	r3, [r4, #0]
                webusb_parameter.rx_msg_cb(
   2be16:	1e81      	subs	r1, r0, #2
   2be18:	4630      	mov	r0, r6
            if (webusb_parameter.rx_msg_cb) {
   2be1a:	2b00      	cmp	r3, #0
   2be1c:	d0e2      	beq.n	2bde4 <tud_vendor_rx_cb+0x8>
                webusb_parameter.rx_msg_cb(
   2be1e:	68a2      	ldr	r2, [r4, #8]
   2be20:	4798      	blx	r3
   2be22:	e7df      	b.n	2bde4 <tud_vendor_rx_cb+0x8>
            if (webusb_parameter.rx_raw_cb) {
   2be24:	6863      	ldr	r3, [r4, #4]
                webusb_parameter.rx_raw_cb(
   2be26:	1e81      	subs	r1, r0, #2
   2be28:	4630      	mov	r0, r6
            if (webusb_parameter.rx_raw_cb) {
   2be2a:	2b00      	cmp	r3, #0
   2be2c:	d0da      	beq.n	2bde4 <tud_vendor_rx_cb+0x8>
                webusb_parameter.rx_raw_cb(
   2be2e:	68e2      	ldr	r2, [r4, #12]
   2be30:	4798      	blx	r3
   2be32:	e7d7      	b.n	2bde4 <tud_vendor_rx_cb+0x8>
        }
    }
}
   2be34:	bd70      	pop	{r4, r5, r6, pc}
   2be36:	bf00      	nop
   2be38:	100502c4 	.word	0x100502c4
   2be3c:	100502b0 	.word	0x100502b0
   2be40:	00043e80 	.word	0x00043e80

0002be44 <tud_vendor_control_xfer_cb>:
// (setup/data/ack) return false to stall control endpoint (e.g unsupported
// request)
bool tud_vendor_control_xfer_cb(
    uint8_t rhport, uint8_t stage, tusb_control_request_t const *request) {
    // nothing to with DATA & ACK stage
    if (stage != CONTROL_STAGE_SETUP)
   2be44:	2901      	cmp	r1, #1
    uint8_t rhport, uint8_t stage, tusb_control_request_t const *request) {
   2be46:	4694      	mov	ip, r2
    if (stage != CONTROL_STAGE_SETUP)
   2be48:	d110      	bne.n	2be6c <tud_vendor_control_xfer_cb+0x28>
        return true;
    switch (request->bmRequestType_bit.type) {
   2be4a:	7813      	ldrb	r3, [r2, #0]
   2be4c:	f3c3 1341 	ubfx	r3, r3, #5, #2
   2be50:	2b01      	cmp	r3, #1
   2be52:	d00d      	beq.n	2be70 <tud_vendor_control_xfer_cb+0x2c>
   2be54:	2b02      	cmp	r3, #2
   2be56:	d107      	bne.n	2be68 <tud_vendor_control_xfer_cb+0x24>
    case TUSB_REQ_TYPE_VENDOR:
        switch (request->bRequest) {
   2be58:	7853      	ldrb	r3, [r2, #1]
   2be5a:	2b01      	cmp	r3, #1
   2be5c:	d014      	beq.n	2be88 <tud_vendor_control_xfer_cb+0x44>
   2be5e:	2b02      	cmp	r3, #2
   2be60:	d102      	bne.n	2be68 <tud_vendor_control_xfer_cb+0x24>
            // Get landing page url
            return tud_control_xfer(
                rhport, request, (void *)(uintptr_t)&desc_url, desc_url.bLength);

        case VENDOR_REQUEST_MICROSOFT:
            if (request->wIndex == DESC_MS_OS_20) {
   2be62:	8893      	ldrh	r3, [r2, #4]
   2be64:	2b07      	cmp	r3, #7
   2be66:	d014      	beq.n	2be92 <tud_vendor_control_xfer_cb+0x4e>
   2be68:	2000      	movs	r0, #0
        break;
    }

    // stall unknown request
    return false;
}
   2be6a:	4770      	bx	lr
        return true;
   2be6c:	2001      	movs	r0, #1
   2be6e:	4770      	bx	lr
        if (request->bRequest == WEBUSB_REQUEST_SET_CONTROL_LINE_STATE) {
   2be70:	7853      	ldrb	r3, [r2, #1]
   2be72:	2b22      	cmp	r3, #34	@ 0x22
   2be74:	d1f8      	bne.n	2be68 <tud_vendor_control_xfer_cb+0x24>
            if (request->wValue != 0) {
   2be76:	8853      	ldrh	r3, [r2, #2]
   2be78:	4a08      	ldr	r2, [pc, #32]	@ (2be9c <tud_vendor_control_xfer_cb+0x58>)
   2be7a:	3b00      	subs	r3, #0
   2be7c:	bf18      	it	ne
   2be7e:	2301      	movne	r3, #1
            return tud_control_status(rhport, request);
   2be80:	4661      	mov	r1, ip
            if (request->wValue != 0) {
   2be82:	7013      	strb	r3, [r2, #0]
            return tud_control_status(rhport, request);
   2be84:	f007 bd28 	b.w	338d8 <tud_control_status>
            return tud_control_xfer(
   2be88:	4a05      	ldr	r2, [pc, #20]	@ (2bea0 <tud_vendor_control_xfer_cb+0x5c>)
   2be8a:	2330      	movs	r3, #48	@ 0x30
   2be8c:	4661      	mov	r1, ip
   2be8e:	f007 bd3b 	b.w	33908 <tud_control_xfer>
                memcpy(&total_len, desc_ms_os_20 + 8, 2);
   2be92:	4a04      	ldr	r2, [pc, #16]	@ (2bea4 <tud_vendor_control_xfer_cb+0x60>)
                return tud_control_xfer(
   2be94:	4661      	mov	r1, ip
   2be96:	8913      	ldrh	r3, [r2, #8]
   2be98:	f007 bd36 	b.w	33908 <tud_control_xfer>
   2be9c:	100502c0 	.word	0x100502c0
   2bea0:	0004b9e0 	.word	0x0004b9e0
   2bea4:	0004b810 	.word	0x0004b810

0002bea8 <webusb_send_data>:
    // for (int i = 0; i < 5; i++) {
    //     ns_lp_printf("0x%02x ", buf[i]);
    // }
    // ns_lp_printf("\n");

    if (webusb_connected && buf) {
   2bea8:	4b12      	ldr	r3, [pc, #72]	@ (2bef4 <webusb_send_data+0x4c>)
uint32_t webusb_send_data(uint8_t *buf, uint32_t bufsize) {
   2beaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (webusb_connected && buf) {
   2beae:	781e      	ldrb	r6, [r3, #0]
   2beb0:	b196      	cbz	r6, 2bed8 <webusb_send_data+0x30>
   2beb2:	4607      	mov	r7, r0
   2beb4:	b198      	cbz	r0, 2bede <webusb_send_data+0x36>
   2beb6:	4688      	mov	r8, r1
    uint32_t bufremain = bufsize;
   2beb8:	460c      	mov	r4, r1
   2beba:	2529      	movs	r5, #41	@ 0x29
                ns_lp_printf("Warning: The number of rewriting is over %d\n", i);
                break;
            }

            // bytes_tx = tud_vendor_write_pkt((void *)(buf + bufsize - bufremain), bufremain);
            bytes_tx = tud_vendor_write((void *)(buf + bufsize - bufremain), bufremain);
   2bebc:	eba8 0604 	sub.w	r6, r8, r4
            if (i == REWRIT_NUMBER) {
   2bec0:	3d01      	subs	r5, #1
    tud_vendor_n_read_flush(0);
}

static inline uint32_t tud_vendor_write (void const* buffer, uint32_t bufsize)
{
  return tud_vendor_n_write(0, buffer, bufsize);
   2bec2:	4622      	mov	r2, r4
   2bec4:	f04f 0000 	mov.w	r0, #0
   2bec8:	eb07 0106 	add.w	r1, r7, r6
   2becc:	d00b      	beq.n	2bee6 <webusb_send_data+0x3e>
   2bece:	f007 fe57 	bl	33b80 <tud_vendor_n_write>
            // tud_vendor_write_flush();
            // ns_lp_printf("Sent %d of %d bytes\n", bytes_tx, bufsize);
            bufremain -= bytes_tx;

            i++;
        } while (bufremain);
   2bed2:	1a24      	subs	r4, r4, r0
   2bed4:	d1f2      	bne.n	2bebc <webusb_send_data+0x14>
   2bed6:	4646      	mov	r6, r8
    if (bufremain) {
        // Collects the amount of data that has not been written
    }

    return bufsize - bufremain;
}
   2bed8:	4630      	mov	r0, r6
   2beda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2bede:	4606      	mov	r6, r0
   2bee0:	4630      	mov	r0, r6
   2bee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                ns_lp_printf("Warning: The number of rewriting is over %d\n", i);
   2bee6:	4804      	ldr	r0, [pc, #16]	@ (2bef8 <webusb_send_data+0x50>)
   2bee8:	2128      	movs	r1, #40	@ 0x28
   2beea:	f000 f83d 	bl	2bf68 <ns_lp_printf>
}
   2beee:	4630      	mov	r0, r6
   2bef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2bef4:	100502c0 	.word	0x100502c0
   2bef8:	00043eb0 	.word	0x00043eb0

0002befc <webusb_register_raw_cb>:
    webusb_parameter.rx_msg_cb = cb;
    webusb_parameter.rx_msg_param = param;
}

void webusb_register_raw_cb(webusb_rx_cb cb, void *param) {
    webusb_parameter.rx_raw_cb = cb;
   2befc:	4b01      	ldr	r3, [pc, #4]	@ (2bf04 <webusb_register_raw_cb+0x8>)
   2befe:	6058      	str	r0, [r3, #4]
    webusb_parameter.rx_raw_param = param;
   2bf00:	60d9      	str	r1, [r3, #12]
}
   2bf02:	4770      	bx	lr
   2bf04:	100502b0 	.word	0x100502b0

0002bf08 <ns_itm_printf_enable>:

/**
 * @brief Wraps am_bsp_itm_printf_enable() to turn on crypto temporarily if needed
 *
 */
void ns_itm_printf_enable(void) {
   2bf08:	b510      	push	{r4, lr}
    // Enable crypto only as long as needed
    if (g_ns_state.cryptoCurrentlyEnabled == false) {
   2bf0a:	4c0e      	ldr	r4, [pc, #56]	@ (2bf44 <ns_itm_printf_enable+0x3c>)
   2bf0c:	7aa3      	ldrb	r3, [r4, #10]
   2bf0e:	b143      	cbz	r3, 2bf22 <ns_itm_printf_enable+0x1a>
        am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_PERIPH_CRYPTO);
    }
    am_bsp_itm_printf_enable();
   2bf10:	f00b fc92 	bl	37838 <am_bsp_itm_printf_enable>

    if (g_ns_state.cryptoWantsToBeEnabled == false) {
   2bf14:	7a61      	ldrb	r1, [r4, #9]
   2bf16:	b161      	cbz	r1, 2bf32 <ns_itm_printf_enable+0x2a>
        am_hal_pwrctrl_control(AM_HAL_PWRCTRL_CONTROL_CRYPTO_POWERDOWN, 0);
    }

    g_ns_state.itmPrintCurrentlyEnabled = true;
    g_ns_state.itmPrintWantsToBeEnabled = true;
   2bf18:	f240 1301 	movw	r3, #257	@ 0x101
   2bf1c:	f8a4 3005 	strh.w	r3, [r4, #5]
}
   2bf20:	bd10      	pop	{r4, pc}
        am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_PERIPH_CRYPTO);
   2bf22:	2014      	movs	r0, #20
   2bf24:	f00a fce6 	bl	368f4 <am_hal_pwrctrl_periph_enable>
    am_bsp_itm_printf_enable();
   2bf28:	f00b fc86 	bl	37838 <am_bsp_itm_printf_enable>
    if (g_ns_state.cryptoWantsToBeEnabled == false) {
   2bf2c:	7a61      	ldrb	r1, [r4, #9]
   2bf2e:	2900      	cmp	r1, #0
   2bf30:	d1f2      	bne.n	2bf18 <ns_itm_printf_enable+0x10>
        am_hal_pwrctrl_control(AM_HAL_PWRCTRL_CONTROL_CRYPTO_POWERDOWN, 0);
   2bf32:	2001      	movs	r0, #1
   2bf34:	f00a ff4a 	bl	36dcc <am_hal_pwrctrl_control>
    g_ns_state.itmPrintWantsToBeEnabled = true;
   2bf38:	f240 1301 	movw	r3, #257	@ 0x101
   2bf3c:	f8a4 3005 	strh.w	r3, [r4, #5]
}
   2bf40:	bd10      	pop	{r4, pc}
   2bf42:	bf00      	nop
   2bf44:	1000dc98 	.word	0x1000dc98

0002bf48 <ns_cryptoless_itm_printf_disable>:
//! @brief Special disable doesn't turn disconnect SWO
//
//! @return 0 on success.
//
//*****************************************************************************
int32_t ns_cryptoless_itm_printf_disable(void) {
   2bf48:	b508      	push	{r3, lr}
    // Disable the ITM/TPIU
    am_hal_itm_disable();
   2bf4a:	f00a f95d 	bl	36208 <am_hal_itm_disable>

    // Detach the ITM interface from the STDIO driver.
    am_util_stdio_printf_init(0);
   2bf4e:	2000      	movs	r0, #0
   2bf50:	f005 fb7e 	bl	31650 <am_util_stdio_printf_init>

    // Disconnect the SWO pin
    am_hal_gpio_pinconfig(AM_BSP_GPIO_ITM_SWO, am_hal_gpio_pincfg_disabled);
   2bf54:	4b03      	ldr	r3, [pc, #12]	@ (2bf64 <ns_cryptoless_itm_printf_disable+0x1c>)
   2bf56:	201c      	movs	r0, #28
   2bf58:	6819      	ldr	r1, [r3, #0]
   2bf5a:	f00a f8a5 	bl	360a8 <am_hal_gpio_pinconfig>

    return 0;
}
   2bf5e:	2000      	movs	r0, #0
   2bf60:	bd08      	pop	{r3, pc}
   2bf62:	bf00      	nop
   2bf64:	0004bc58 	.word	0x0004bc58

0002bf68 <ns_lp_printf>:
 *

 * @param format
 * @param ...
 */
void ns_lp_printf(const char *format, ...) {
   2bf68:	b40f      	push	{r0, r1, r2, r3}
   2bf6a:	b510      	push	{r4, lr}
    va_list myargs;

    if ((g_ns_state.uartPrintWantsToBeEnabled == false) &&
   2bf6c:	4c16      	ldr	r4, [pc, #88]	@ (2bfc8 <ns_lp_printf+0x60>)
   2bf6e:	7ae3      	ldrb	r3, [r4, #11]
void ns_lp_printf(const char *format, ...) {
   2bf70:	b082      	sub	sp, #8
    if ((g_ns_state.uartPrintWantsToBeEnabled == false) &&
   2bf72:	b16b      	cbz	r3, 2bf90 <ns_lp_printf+0x28>
        (g_ns_state.itmPrintWantsToBeEnabled == false)) {
        // No print interface has been enabled, ns_lp_printf is a no-op
        return;
    }

    if ((g_ns_state.uartPrintWantsToBeEnabled) && (g_ns_state.uartPrintCurrentlyEnabled == false)) {
   2bf74:	7b23      	ldrb	r3, [r4, #12]
   2bf76:	b30b      	cbz	r3, 2bfbc <ns_lp_printf+0x54>
        am_bsp_uart_printf_enable();
        g_ns_state.uartPrintCurrentlyEnabled = true;
    } else if (
   2bf78:	7963      	ldrb	r3, [r4, #5]
   2bf7a:	b963      	cbnz	r3, 2bf96 <ns_lp_printf+0x2e>
        (g_ns_state.itmPrintCurrentlyEnabled == false)) {
        ns_cryptoless_itm_printf_enable();
        g_ns_state.itmPrintCurrentlyEnabled = true;
    }

    va_start(myargs, format);
   2bf7c:	a905      	add	r1, sp, #20
    am_util_stdio_vprintf(format, myargs);
   2bf7e:	9804      	ldr	r0, [sp, #16]
    va_start(myargs, format);
   2bf80:	9101      	str	r1, [sp, #4]
    am_util_stdio_vprintf(format, myargs);
   2bf82:	f005 ffdb 	bl	31f3c <am_util_stdio_vprintf>
    va_end(myargs);
}
   2bf86:	b002      	add	sp, #8
   2bf88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2bf8c:	b004      	add	sp, #16
   2bf8e:	4770      	bx	lr
    if ((g_ns_state.uartPrintWantsToBeEnabled == false) &&
   2bf90:	7963      	ldrb	r3, [r4, #5]
   2bf92:	2b00      	cmp	r3, #0
   2bf94:	d0f7      	beq.n	2bf86 <ns_lp_printf+0x1e>
        (g_ns_state.itmPrintWantsToBeEnabled == true) &&
   2bf96:	79a3      	ldrb	r3, [r4, #6]
   2bf98:	2b00      	cmp	r3, #0
   2bf9a:	d1ef      	bne.n	2bf7c <ns_lp_printf+0x14>
    am_hal_itm_enable();
   2bf9c:	f00a f910 	bl	361c0 <am_hal_itm_enable>
    am_hal_tpiu_enable(AM_HAL_TPIU_BAUD_1M);
   2bfa0:	480a      	ldr	r0, [pc, #40]	@ (2bfcc <ns_lp_printf+0x64>)
   2bfa2:	f00b fb25 	bl	375f0 <am_hal_tpiu_enable>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_ITM_SWO, g_AM_BSP_GPIO_ITM_SWO);
   2bfa6:	4b0a      	ldr	r3, [pc, #40]	@ (2bfd0 <ns_lp_printf+0x68>)
   2bfa8:	201c      	movs	r0, #28
   2bfaa:	6819      	ldr	r1, [r3, #0]
   2bfac:	f00a f87c 	bl	360a8 <am_hal_gpio_pinconfig>
    am_util_stdio_printf_init(am_hal_itm_print);
   2bfb0:	4808      	ldr	r0, [pc, #32]	@ (2bfd4 <ns_lp_printf+0x6c>)
   2bfb2:	f005 fb4d 	bl	31650 <am_util_stdio_printf_init>
        g_ns_state.itmPrintCurrentlyEnabled = true;
   2bfb6:	2301      	movs	r3, #1
   2bfb8:	71a3      	strb	r3, [r4, #6]
   2bfba:	e7df      	b.n	2bf7c <ns_lp_printf+0x14>
        am_bsp_uart_printf_enable();
   2bfbc:	f00b fc7a 	bl	378b4 <am_bsp_uart_printf_enable>
        g_ns_state.uartPrintCurrentlyEnabled = true;
   2bfc0:	2301      	movs	r3, #1
   2bfc2:	7323      	strb	r3, [r4, #12]
   2bfc4:	e7da      	b.n	2bf7c <ns_lp_printf+0x14>
   2bfc6:	bf00      	nop
   2bfc8:	1000dc98 	.word	0x1000dc98
   2bfcc:	000f4240 	.word	0x000f4240
   2bfd0:	1000dc48 	.word	0x1000dc48
   2bfd4:	000362dd 	.word	0x000362dd

0002bfd8 <ns_power_config>:
// Main function for power configuration
uint32_t ns_power_config(const ns_power_config_t *pCfg) {
    uint32_t ui32ReturnStatus = AM_HAL_STATUS_SUCCESS;

#ifndef NS_DISABLE_API_VALIDATION
    if (pCfg == NULL) {
   2bfd8:	b188      	cbz	r0, 2bffe <ns_power_config+0x26>
uint32_t ns_power_config(const ns_power_config_t *pCfg) {
   2bfda:	b510      	push	{r4, lr}
        return NS_STATUS_INVALID_HANDLE;
    }

    if (ns_core_check_api(
   2bfdc:	4a0a      	ldr	r2, [pc, #40]	@ (2c008 <ns_power_config+0x30>)
   2bfde:	490b      	ldr	r1, [pc, #44]	@ (2c00c <ns_power_config+0x34>)
   2bfe0:	4604      	mov	r4, r0
   2bfe2:	6800      	ldr	r0, [r0, #0]
   2bfe4:	f7ed fb16 	bl	19614 <ns_core_check_api>
   2bfe8:	b938      	cbnz	r0, 2bffa <ns_power_config+0x22>
            pCfg->api, &ns_power_oldest_supported_version, &ns_power_current_version)) {
        return NS_STATUS_INVALID_VERSION;
    }

    if (!ns_core_initialized()) {
   2bfea:	f000 fa4d 	bl	2c488 <ns_core_initialized>
   2bfee:	b140      	cbz	r0, 2c002 <ns_power_config+0x2a>
        // Power needs ns_core to be initialized first
        return NS_STATUS_INIT_FAILED;
    }
#endif

    ui32ReturnStatus = ns_power_platform_config(pCfg);
   2bff0:	4620      	mov	r0, r4

    return ui32ReturnStatus;
}
   2bff2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ui32ReturnStatus = ns_power_platform_config(pCfg);
   2bff6:	f000 b8b5 	b.w	2c164 <ns_power_platform_config>
        return NS_STATUS_INVALID_VERSION;
   2bffa:	2002      	movs	r0, #2
}
   2bffc:	bd10      	pop	{r4, pc}
        return NS_STATUS_INVALID_HANDLE;
   2bffe:	2001      	movs	r0, #1
}
   2c000:	4770      	bx	lr
        return NS_STATUS_INIT_FAILED;
   2c002:	2004      	movs	r0, #4
}
   2c004:	bd10      	pop	{r4, pc}
   2c006:	bf00      	nop
   2c008:	0004ba14 	.word	0x0004ba14
   2c00c:	0004ba20 	.word	0x0004ba20

0002c010 <ns_deep_sleep>:
 * systems as needed.
 *
 */
extern void ns_platform_deep_sleep(void);

void ns_deep_sleep(void) { ns_platform_deep_sleep(); }
   2c010:	f000 b93a 	b.w	2c288 <ns_platform_deep_sleep>

0002c014 <ns_power_down_peripherals>:
//*****************************************************************************
//
// Internal method for turning off peripherals
//
//*****************************************************************************
void ns_power_down_peripherals(const ns_power_config_t *pCfg) {
   2c014:	b570      	push	{r4, r5, r6, lr}
   2c016:	4604      	mov	r4, r0

    //
    // Disable the XTAL.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_RTC_SEL_LFRC, 0);
   2c018:	2100      	movs	r1, #0
   2c01a:	2001      	movs	r0, #1
   2c01c:	f009 fec2 	bl	35da4 <am_hal_clkgen_control>

    //
    // Turn off the voltage comparator.
    //
    VCOMP->PWDKEY = _VAL2FLD(VCOMP_PWDKEY_PWDKEY, VCOMP_PWDKEY_PWDKEY_Key);
   2c020:	4b4e      	ldr	r3, [pc, #312]	@ (2c15c <ns_power_down_peripherals+0x148>)
    MCUCTRL->MRAMPWRCTRL_b.MRAMSLPEN = 0;
    MCUCTRL->MRAMPWRCTRL_b.MRAMLPREN = 1;
#endif
// return; ok
#ifdef AM_DEVICES_BLECTRLR_RESET_PIN
    if (pCfg->bNeedBluetooth == false) {
   2c022:	7a26      	ldrb	r6, [r4, #8]
    VCOMP->PWDKEY = _VAL2FLD(VCOMP_PWDKEY_PWDKEY, VCOMP_PWDKEY_PWDKEY_Key);
   2c024:	2537      	movs	r5, #55	@ 0x37
   2c026:	609d      	str	r5, [r3, #8]
    if (pCfg->bNeedBluetooth == false) {
   2c028:	2e00      	cmp	r6, #0
   2c02a:	d051      	beq.n	2c0d0 <ns_power_down_peripherals+0xbc>
       // return; ok

    //
    // Disable all peripherals
    //
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_IOS);
   2c02c:	2000      	movs	r0, #0
   2c02e:	f00a fd31 	bl	36a94 <am_hal_pwrctrl_periph_disable>

    if (pCfg->bNeedIOM == false) {
   2c032:	7aa3      	ldrb	r3, [r4, #10]
   2c034:	2b00      	cmp	r3, #0
   2c036:	d062      	beq.n	2c0fe <ns_power_down_peripherals+0xea>
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_IOM5);
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_IOM6);
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_IOM7);
    };

    if (pCfg->bNeedAlternativeUART == false) {
   2c038:	7ae3      	ldrb	r3, [r4, #11]
   2c03a:	2b00      	cmp	r3, #0
   2c03c:	d07a      	beq.n	2c134 <ns_power_down_peripherals+0x120>
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_UART0);
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_UART3);
    }

    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_UART1);
   2c03e:	200a      	movs	r0, #10
   2c040:	f00a fd28 	bl	36a94 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_UART2);
   2c044:	200b      	movs	r0, #11
   2c046:	f00a fd25 	bl	36a94 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_ADC);
   2c04a:	200d      	movs	r0, #13
   2c04c:	f00a fd22 	bl	36a94 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_MSPI0);
   2c050:	200e      	movs	r0, #14
   2c052:	f00a fd1f 	bl	36a94 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_MSPI1);
   2c056:	200f      	movs	r0, #15
   2c058:	f00a fd1c 	bl	36a94 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_MSPI2);
   2c05c:	2010      	movs	r0, #16
   2c05e:	f00a fd19 	bl	36a94 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_GFX);
   2c062:	2011      	movs	r0, #17
   2c064:	f00a fd16 	bl	36a94 <am_hal_pwrctrl_periph_disable>

#ifndef AM_PART_APOLLO4L
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_DISP);
   2c068:	2012      	movs	r0, #18
   2c06a:	f00a fd13 	bl	36a94 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_DISPPHY);
   2c06e:	2013      	movs	r0, #19
   2c070:	f00a fd10 	bl	36a94 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_USB);
   2c074:	2016      	movs	r0, #22
   2c076:	f00a fd0d 	bl	36a94 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_USBPHY);
   2c07a:	2017      	movs	r0, #23
   2c07c:	f00a fd0a 	bl	36a94 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_PDM1);
   2c080:	201c      	movs	r0, #28
   2c082:	f00a fd07 	bl	36a94 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_PDM2);
   2c086:	201d      	movs	r0, #29
   2c088:	f00a fd04 	bl	36a94 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_PDM3);
   2c08c:	201e      	movs	r0, #30
   2c08e:	f00a fd01 	bl	36a94 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_I2S1);
   2c092:	2020      	movs	r0, #32
   2c094:	f00a fcfe 	bl	36a94 <am_hal_pwrctrl_periph_disable>
#endif

    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_SDIO);
   2c098:	2015      	movs	r0, #21
   2c09a:	f00a fcfb 	bl	36a94 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_DEBUG);
   2c09e:	2018      	movs	r0, #24
   2c0a0:	f00a fcf8 	bl	36a94 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_AUDREC);
   2c0a4:	2019      	movs	r0, #25
   2c0a6:	f00a fcf5 	bl	36a94 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_AUDPB);
   2c0aa:	201a      	movs	r0, #26
   2c0ac:	f00a fcf2 	bl	36a94 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_PDM0);
   2c0b0:	201b      	movs	r0, #27
   2c0b2:	f00a fcef 	bl	36a94 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_I2S0);
   2c0b6:	201f      	movs	r0, #31
   2c0b8:	f00a fcec 	bl	36a94 <am_hal_pwrctrl_periph_disable>
// return;
#ifndef AM_PART_APOLLO4L
    if (pCfg->bNeedAudAdc == false) {
   2c0bc:	7963      	ldrb	r3, [r4, #5]
   2c0be:	2b00      	cmp	r3, #0
   2c0c0:	d048      	beq.n	2c154 <ns_power_down_peripherals+0x140>
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_AUDADC);
    }
#endif

    if (pCfg->bNeedCrypto == false) {
   2c0c2:	79e1      	ldrb	r1, [r4, #7]
   2c0c4:	2900      	cmp	r1, #0
   2c0c6:	d041      	beq.n	2c14c <ns_power_down_peripherals+0x138>
        // Power down Crypto.
        am_hal_pwrctrl_control(AM_HAL_PWRCTRL_CONTROL_CRYPTO_POWERDOWN, 0);
    }
    // return;
    if (pCfg->bNeedBluetooth == false) {
   2c0c8:	7a21      	ldrb	r1, [r4, #8]
   2c0ca:	2900      	cmp	r1, #0
   2c0cc:	d039      	beq.n	2c142 <ns_power_down_peripherals+0x12e>
        // Since the only neuralSPOT examples needing freertos involve bluetooth,
        // use that flag for now.
        // XTAL powerdown
        am_hal_pwrctrl_control(AM_HAL_PWRCTRL_CONTROL_XTAL_PWDN_DEEPSLEEP, 0);
    }
}
   2c0ce:	bd70      	pop	{r4, r5, r6, pc}
        am_hal_gpio_state_write(AM_DEVICES_BLECTRLR_RESET_PIN, AM_HAL_GPIO_OUTPUT_CLEAR);
   2c0d0:	4631      	mov	r1, r6
   2c0d2:	4628      	mov	r0, r5
   2c0d4:	f00a f814 	bl	36100 <am_hal_gpio_state_write>
        am_hal_gpio_pinconfig(AM_DEVICES_BLECTRLR_RESET_PIN, am_hal_gpio_pincfg_output);
   2c0d8:	4b21      	ldr	r3, [pc, #132]	@ (2c160 <ns_power_down_peripherals+0x14c>)
   2c0da:	4628      	mov	r0, r5
   2c0dc:	6819      	ldr	r1, [r3, #0]
   2c0de:	f009 ffe3 	bl	360a8 <am_hal_gpio_pinconfig>
        am_hal_gpio_state_write(AM_DEVICES_BLECTRLR_RESET_PIN, AM_HAL_GPIO_OUTPUT_SET);
   2c0e2:	2101      	movs	r1, #1
   2c0e4:	4628      	mov	r0, r5
   2c0e6:	f00a f80b 	bl	36100 <am_hal_gpio_state_write>
        am_hal_gpio_state_write(AM_DEVICES_BLECTRLR_RESET_PIN, AM_HAL_GPIO_OUTPUT_CLEAR);
   2c0ea:	4631      	mov	r1, r6
   2c0ec:	4628      	mov	r0, r5
   2c0ee:	f00a f807 	bl	36100 <am_hal_gpio_state_write>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_IOS);
   2c0f2:	2000      	movs	r0, #0
   2c0f4:	f00a fcce 	bl	36a94 <am_hal_pwrctrl_periph_disable>
    if (pCfg->bNeedIOM == false) {
   2c0f8:	7aa3      	ldrb	r3, [r4, #10]
   2c0fa:	2b00      	cmp	r3, #0
   2c0fc:	d19c      	bne.n	2c038 <ns_power_down_peripherals+0x24>
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_IOM0);
   2c0fe:	2001      	movs	r0, #1
   2c100:	f00a fcc8 	bl	36a94 <am_hal_pwrctrl_periph_disable>
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_IOM1);
   2c104:	2002      	movs	r0, #2
   2c106:	f00a fcc5 	bl	36a94 <am_hal_pwrctrl_periph_disable>
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_IOM2);
   2c10a:	2003      	movs	r0, #3
   2c10c:	f00a fcc2 	bl	36a94 <am_hal_pwrctrl_periph_disable>
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_IOM3);
   2c110:	2004      	movs	r0, #4
   2c112:	f00a fcbf 	bl	36a94 <am_hal_pwrctrl_periph_disable>
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_IOM4);
   2c116:	2005      	movs	r0, #5
   2c118:	f00a fcbc 	bl	36a94 <am_hal_pwrctrl_periph_disable>
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_IOM5);
   2c11c:	2006      	movs	r0, #6
   2c11e:	f00a fcb9 	bl	36a94 <am_hal_pwrctrl_periph_disable>
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_IOM6);
   2c122:	2007      	movs	r0, #7
   2c124:	f00a fcb6 	bl	36a94 <am_hal_pwrctrl_periph_disable>
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_IOM7);
   2c128:	2008      	movs	r0, #8
   2c12a:	f00a fcb3 	bl	36a94 <am_hal_pwrctrl_periph_disable>
    if (pCfg->bNeedAlternativeUART == false) {
   2c12e:	7ae3      	ldrb	r3, [r4, #11]
   2c130:	2b00      	cmp	r3, #0
   2c132:	d184      	bne.n	2c03e <ns_power_down_peripherals+0x2a>
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_UART0);
   2c134:	2009      	movs	r0, #9
   2c136:	f00a fcad 	bl	36a94 <am_hal_pwrctrl_periph_disable>
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_UART3);
   2c13a:	200c      	movs	r0, #12
   2c13c:	f00a fcaa 	bl	36a94 <am_hal_pwrctrl_periph_disable>
   2c140:	e77d      	b.n	2c03e <ns_power_down_peripherals+0x2a>
}
   2c142:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        am_hal_pwrctrl_control(AM_HAL_PWRCTRL_CONTROL_XTAL_PWDN_DEEPSLEEP, 0);
   2c146:	2002      	movs	r0, #2
   2c148:	f00a be40 	b.w	36dcc <am_hal_pwrctrl_control>
        am_hal_pwrctrl_control(AM_HAL_PWRCTRL_CONTROL_CRYPTO_POWERDOWN, 0);
   2c14c:	2001      	movs	r0, #1
   2c14e:	f00a fe3d 	bl	36dcc <am_hal_pwrctrl_control>
   2c152:	e7b9      	b.n	2c0c8 <ns_power_down_peripherals+0xb4>
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_AUDADC);
   2c154:	2021      	movs	r0, #33	@ 0x21
   2c156:	f00a fc9d 	bl	36a94 <am_hal_pwrctrl_periph_disable>
   2c15a:	e7b2      	b.n	2c0c2 <ns_power_down_peripherals+0xae>
   2c15c:	4000c000 	.word	0x4000c000
   2c160:	0004bc5c 	.word	0x0004bc5c

0002c164 <ns_power_platform_config>:

// Main function for power configuration
uint32_t ns_power_platform_config(const ns_power_config_t *pCfg) {
   2c164:	b570      	push	{r4, r5, r6, lr}
   2c166:	b084      	sub	sp, #16
    uint32_t ui32ReturnStatus = AM_HAL_STATUS_SUCCESS;

#ifndef NS_DISABLE_API_VALIDATION
    if (pCfg == NULL) {
   2c168:	2800      	cmp	r0, #0
   2c16a:	d043      	beq.n	2c1f4 <ns_power_platform_config+0x90>
        return NS_STATUS_INVALID_HANDLE;
    }

    if (ns_core_check_api(
   2c16c:	4a3f      	ldr	r2, [pc, #252]	@ (2c26c <ns_power_platform_config+0x108>)
   2c16e:	4940      	ldr	r1, [pc, #256]	@ (2c270 <ns_power_platform_config+0x10c>)
   2c170:	4604      	mov	r4, r0
   2c172:	6800      	ldr	r0, [r0, #0]
   2c174:	f7ed fa4e 	bl	19614 <ns_core_check_api>
   2c178:	4605      	mov	r5, r0
   2c17a:	2800      	cmp	r0, #0
   2c17c:	d136      	bne.n	2c1ec <ns_power_platform_config+0x88>
            pCfg->api, &ns_power_oldest_supported_version, &ns_power_current_version)) {
        return NS_STATUS_INVALID_VERSION;
    }

    if (!ns_core_initialized()) {
   2c17e:	f000 f983 	bl	2c488 <ns_core_initialized>
   2c182:	2800      	cmp	r0, #0
   2c184:	d048      	beq.n	2c218 <ns_power_platform_config+0xb4>
        // Power needs ns_core to be initialized first
        return NS_STATUS_INIT_FAILED;
    }
#endif

    am_bsp_low_power_init();
   2c186:	f00b fb41 	bl	3780c <am_bsp_low_power_init>

    // configure SRAM & other memories
    if (pCfg->bNeedSharedSRAM == false) {
   2c18a:	79a3      	ldrb	r3, [r4, #6]
   2c18c:	2b00      	cmp	r3, #0
   2c18e:	d035      	beq.n	2c1fc <ns_power_platform_config+0x98>
            .bActiveRAM = false,
            .bRetainRAM = false};
        am_hal_pwrctrl_dsp_memory_config(AM_HAL_DSP0, &sExtSRAMMemCfg);
#endif
    } else {
        am_hal_daxi_config_t DaxiConfigLongAging = {
   2c190:	4b38      	ldr	r3, [pc, #224]	@ (2c274 <ns_power_platform_config+0x110>)
   2c192:	e893 0003 	ldmia.w	r3, {r0, r1}
                                                            // cycles.  Optimal for most use cases
                                                            // should be 256, 512, 1024, or 2048
            .eNumBuf = AM_HAL_DAXI_CONFIG_NUMBUF_32,
            .eNumFreeBuf = AM_HAL_DAXI_CONFIG_NUMFREEBUF_3,
        };
        am_hal_daxi_config(&DaxiConfigLongAging);
   2c196:	ae02      	add	r6, sp, #8
        am_hal_daxi_config_t DaxiConfigLongAging = {
   2c198:	9002      	str	r0, [sp, #8]
        am_hal_daxi_config(&DaxiConfigLongAging);
   2c19a:	4630      	mov	r0, r6
        am_hal_daxi_config_t DaxiConfigLongAging = {
   2c19c:	f88d 100c 	strb.w	r1, [sp, #12]
        am_hal_daxi_config(&DaxiConfigLongAging);
   2c1a0:	f009 fd3e 	bl	35c20 <am_hal_daxi_config>
    }

    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
   2c1a4:	4834      	ldr	r0, [pc, #208]	@ (2c278 <ns_power_platform_config+0x114>)
   2c1a6:	f009 fd0d 	bl	35bc4 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
   2c1aa:	f009 fd2d 	bl	35c08 <am_hal_cachectrl_enable>

    // configure peripherals
    ns_power_down_peripherals(pCfg);
   2c1ae:	4620      	mov	r0, r4
   2c1b0:	f7ff ff30 	bl	2c014 <ns_power_down_peripherals>

    // Configure power mode
    if(ns_set_performance_mode(pCfg->eAIPowerMode) != NS_STATUS_SUCCESS) {
   2c1b4:	7923      	ldrb	r3, [r4, #4]
    if ((eAIPowerMode == NS_MAXIMUM_PERF) || (eAIPowerMode == NS_MEDIUM_PERF))
   2c1b6:	1e5a      	subs	r2, r3, #1
   2c1b8:	2a01      	cmp	r2, #1
   2c1ba:	d952      	bls.n	2c262 <ns_power_platform_config+0xfe>
    else if (eAIPowerMode == NS_MINIMUM_PERF)
   2c1bc:	bb83      	cbnz	r3, 2c220 <ns_power_platform_config+0xbc>
        am_hal_pwrctrl_mcu_mode_select(AM_HAL_PWRCTRL_MCU_MODE_LOW_POWER);
   2c1be:	2001      	movs	r0, #1
   2c1c0:	f00a f976 	bl	364b0 <am_hal_pwrctrl_mcu_mode_select>
        return NS_STATUS_INVALID_CONFIG;
    }

    if (pCfg->b128kTCM == true) {
   2c1c4:	7b23      	ldrb	r3, [r4, #12]
   2c1c6:	2b00      	cmp	r3, #0
   2c1c8:	d141      	bne.n	2c24e <ns_power_platform_config+0xea>
            .bRetainNVM0 = false};

        am_hal_pwrctrl_mcu_memory_config(&McuMemCfg);
    }

    if (pCfg->bEnableTempCo) {
   2c1ca:	7b63      	ldrb	r3, [r4, #13]
   2c1cc:	bb53      	cbnz	r3, 2c224 <ns_power_platform_config+0xc0>
                ns_printf("ERROR TempCo init failed\n");
            }
        }
#endif
    }
    g_ns_state.cryptoWantsToBeEnabled = pCfg->bNeedCrypto;
   2c1ce:	79e1      	ldrb	r1, [r4, #7]
   2c1d0:	4a2a      	ldr	r2, [pc, #168]	@ (2c27c <ns_power_platform_config+0x118>)
    g_ns_state.cryptoCurrentlyEnabled = pCfg->bNeedCrypto;
    g_ns_state.itmPrintWantsToBeEnabled = pCfg->bNeedITM;
   2c1d2:	7ba0      	ldrb	r0, [r4, #14]
   2c1d4:	7150      	strb	r0, [r2, #5]
    g_ns_state.cryptoWantsToBeEnabled = pCfg->bNeedCrypto;
   2c1d6:	f04f 0300 	mov.w	r3, #0
   2c1da:	f361 0307 	bfi	r3, r1, #0, #8
   2c1de:	f361 230f 	bfi	r3, r1, #8, #8

    return ui32ReturnStatus;
}
   2c1e2:	4628      	mov	r0, r5
    g_ns_state.cryptoWantsToBeEnabled = pCfg->bNeedCrypto;
   2c1e4:	f8a2 3009 	strh.w	r3, [r2, #9]
}
   2c1e8:	b004      	add	sp, #16
   2c1ea:	bd70      	pop	{r4, r5, r6, pc}
        return NS_STATUS_INVALID_VERSION;
   2c1ec:	2502      	movs	r5, #2
}
   2c1ee:	4628      	mov	r0, r5
   2c1f0:	b004      	add	sp, #16
   2c1f2:	bd70      	pop	{r4, r5, r6, pc}
        return NS_STATUS_INVALID_HANDLE;
   2c1f4:	2501      	movs	r5, #1
}
   2c1f6:	4628      	mov	r0, r5
   2c1f8:	b004      	add	sp, #16
   2c1fa:	bd70      	pop	{r4, r5, r6, pc}
        am_hal_pwrctrl_sram_memcfg_t SRAMMemCfg = {
   2c1fc:	ae02      	add	r6, sp, #8
   2c1fe:	9502      	str	r5, [sp, #8]
        am_hal_pwrctrl_sram_config(&SRAMMemCfg);
   2c200:	4630      	mov	r0, r6
        am_hal_pwrctrl_sram_memcfg_t SRAMMemCfg = {
   2c202:	80b5      	strh	r5, [r6, #4]
        am_hal_pwrctrl_sram_config(&SRAMMemCfg);
   2c204:	f00a fa38 	bl	36678 <am_hal_pwrctrl_sram_config>
        am_hal_pwrctrl_dsp_memory_config(AM_HAL_DSP0, &sExtSRAMMemCfg);
   2c208:	4669      	mov	r1, sp
   2c20a:	4628      	mov	r0, r5
        am_hal_pwrctrl_dsp_memory_config_t sExtSRAMMemCfg = {
   2c20c:	9500      	str	r5, [sp, #0]
   2c20e:	f88d 5004 	strb.w	r5, [sp, #4]
        am_hal_pwrctrl_dsp_memory_config(AM_HAL_DSP0, &sExtSRAMMemCfg);
   2c212:	f00a fa89 	bl	36728 <am_hal_pwrctrl_dsp_memory_config>
   2c216:	e7c5      	b.n	2c1a4 <ns_power_platform_config+0x40>
        return NS_STATUS_INIT_FAILED;
   2c218:	2504      	movs	r5, #4
}
   2c21a:	4628      	mov	r0, r5
   2c21c:	b004      	add	sp, #16
   2c21e:	bd70      	pop	{r4, r5, r6, pc}
        return NS_STATUS_INVALID_CONFIG;
   2c220:	2503      	movs	r5, #3
   2c222:	e7e4      	b.n	2c1ee <ns_power_platform_config+0x8a>
        ui32Ret = am_hal_mram_info_read(1, AM_REG_INFO1_TRIM_REV_O / 4, 1, &ui32TrimVer);
   2c224:	2201      	movs	r2, #1
   2c226:	4633      	mov	r3, r6
   2c228:	f240 41c4 	movw	r1, #1220	@ 0x4c4
   2c22c:	4610      	mov	r0, r2
   2c22e:	f00a f86d 	bl	3630c <am_hal_mram_info_read>
        if ((ui32Ret == 0) && (ui32TrimVer != 0xFFFFFFFF) && (ui32TrimVer >= 6)) {
   2c232:	2800      	cmp	r0, #0
   2c234:	d1cb      	bne.n	2c1ce <ns_power_platform_config+0x6a>
   2c236:	9b02      	ldr	r3, [sp, #8]
   2c238:	3b06      	subs	r3, #6
   2c23a:	3308      	adds	r3, #8
   2c23c:	d8c7      	bhi.n	2c1ce <ns_power_platform_config+0x6a>
            if (ns_tempco_init() != 0) {
   2c23e:	f000 f8b3 	bl	2c3a8 <ns_tempco_init>
   2c242:	2800      	cmp	r0, #0
   2c244:	d0c3      	beq.n	2c1ce <ns_power_platform_config+0x6a>
                ns_printf("ERROR TempCo init failed\n");
   2c246:	480e      	ldr	r0, [pc, #56]	@ (2c280 <ns_power_platform_config+0x11c>)
   2c248:	f7ff fe8e 	bl	2bf68 <ns_lp_printf>
   2c24c:	e7bf      	b.n	2c1ce <ns_power_platform_config+0x6a>
        am_hal_pwrctrl_mcu_memory_config_t McuMemCfg = {
   2c24e:	4b0d      	ldr	r3, [pc, #52]	@ (2c284 <ns_power_platform_config+0x120>)
   2c250:	e893 0003 	ldmia.w	r3, {r0, r1}
   2c254:	9002      	str	r0, [sp, #8]
        am_hal_pwrctrl_mcu_memory_config(&McuMemCfg);
   2c256:	4630      	mov	r0, r6
        am_hal_pwrctrl_mcu_memory_config_t McuMemCfg = {
   2c258:	f8ad 100c 	strh.w	r1, [sp, #12]
        am_hal_pwrctrl_mcu_memory_config(&McuMemCfg);
   2c25c:	f00a f95e 	bl	3651c <am_hal_pwrctrl_mcu_memory_config>
   2c260:	e7b3      	b.n	2c1ca <ns_power_platform_config+0x66>
        am_hal_pwrctrl_mcu_mode_select(AM_HAL_PWRCTRL_MCU_MODE_HIGH_PERFORMANCE);
   2c262:	2002      	movs	r0, #2
   2c264:	f00a f924 	bl	364b0 <am_hal_pwrctrl_mcu_mode_select>
   2c268:	e7ac      	b.n	2c1c4 <ns_power_platform_config+0x60>
   2c26a:	bf00      	nop
   2c26c:	0004ba14 	.word	0x0004ba14
   2c270:	0004ba20 	.word	0x0004ba20
   2c274:	00043170 	.word	0x00043170
   2c278:	0004bc4c 	.word	0x0004bc4c
   2c27c:	1000dc98 	.word	0x1000dc98
   2c280:	00043ee0 	.word	0x00043ee0
   2c284:	00043178 	.word	0x00043178

0002c288 <ns_platform_deep_sleep>:
/**
 * @brief Wraps am_hal_sysctrl_sleep to enable and disable
 * systems as needed.
 *
 */
void ns_platform_deep_sleep(void) {
   2c288:	b538      	push	{r3, r4, r5, lr}

    if (g_ns_state.uartPrintCurrentlyEnabled) {
   2c28a:	4c16      	ldr	r4, [pc, #88]	@ (2c2e4 <ns_platform_deep_sleep+0x5c>)
   2c28c:	7b25      	ldrb	r5, [r4, #12]
   2c28e:	bb25      	cbnz	r5, 2c2da <ns_platform_deep_sleep+0x52>
        am_bsp_uart_printf_disable();
        g_ns_state.uartPrintCurrentlyEnabled = false;
    } else if (g_ns_state.itmPrintCurrentlyEnabled) {
   2c290:	79a3      	ldrb	r3, [r4, #6]
   2c292:	b943      	cbnz	r3, 2c2a6 <ns_platform_deep_sleep+0x1e>
        ns_cryptoless_itm_printf_disable();
        g_ns_state.itmPrintCurrentlyEnabled = false;
    }

    if (g_ns_state.cryptoCurrentlyEnabled) {
   2c294:	7aa3      	ldrb	r3, [r4, #10]
   2c296:	b963      	cbnz	r3, 2c2b2 <ns_platform_deep_sleep+0x2a>
    }

#if defined(NS_AMBIQSUITE_VERSION_R4_1_0) || defined(AM_PART_APOLLO4L)
    // TEMPCO not supported in this version
#else
    if (g_ns_state.tempcoCurrentlyEnabled) {
   2c298:	7a23      	ldrb	r3, [r4, #8]
   2c29a:	b99b      	cbnz	r3, 2c2c4 <ns_platform_deep_sleep+0x3c>

    am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);

    if (g_ns_state.tempcoWantsToBeEnabled) { // isr turns ADC on
    }
}
   2c29c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
   2c2a0:	2001      	movs	r0, #1
   2c2a2:	f00b b879 	b.w	37398 <am_hal_sysctrl_sleep>
        ns_cryptoless_itm_printf_disable();
   2c2a6:	f7ff fe4f 	bl	2bf48 <ns_cryptoless_itm_printf_disable>
    if (g_ns_state.cryptoCurrentlyEnabled) {
   2c2aa:	7aa3      	ldrb	r3, [r4, #10]
        g_ns_state.itmPrintCurrentlyEnabled = false;
   2c2ac:	71a5      	strb	r5, [r4, #6]
    if (g_ns_state.cryptoCurrentlyEnabled) {
   2c2ae:	2b00      	cmp	r3, #0
   2c2b0:	d0f2      	beq.n	2c298 <ns_platform_deep_sleep+0x10>
        am_hal_pwrctrl_control(AM_HAL_PWRCTRL_CONTROL_CRYPTO_POWERDOWN, 0);
   2c2b2:	2100      	movs	r1, #0
   2c2b4:	2001      	movs	r0, #1
   2c2b6:	f00a fd89 	bl	36dcc <am_hal_pwrctrl_control>
        g_ns_state.cryptoCurrentlyEnabled = false;
   2c2ba:	2300      	movs	r3, #0
   2c2bc:	72a3      	strb	r3, [r4, #10]
    if (g_ns_state.tempcoCurrentlyEnabled) {
   2c2be:	7a23      	ldrb	r3, [r4, #8]
   2c2c0:	2b00      	cmp	r3, #0
   2c2c2:	d0eb      	beq.n	2c29c <ns_platform_deep_sleep+0x14>
        am_hal_adc_power_control(g_ns_tempco_ADCHandle, AM_HAL_SYSCTRL_DEEPSLEEP, true);
   2c2c4:	4b08      	ldr	r3, [pc, #32]	@ (2c2e8 <ns_platform_deep_sleep+0x60>)
   2c2c6:	2201      	movs	r2, #1
   2c2c8:	6818      	ldr	r0, [r3, #0]
   2c2ca:	2102      	movs	r1, #2
   2c2cc:	f009 fbd8 	bl	35a80 <am_hal_adc_power_control>
}
   2c2d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
   2c2d4:	2001      	movs	r0, #1
   2c2d6:	f00b b85f 	b.w	37398 <am_hal_sysctrl_sleep>
        am_bsp_uart_printf_disable();
   2c2da:	f00b fb21 	bl	37920 <am_bsp_uart_printf_disable>
        g_ns_state.uartPrintCurrentlyEnabled = false;
   2c2de:	2300      	movs	r3, #0
   2c2e0:	7323      	strb	r3, [r4, #12]
   2c2e2:	e7d7      	b.n	2c294 <ns_platform_deep_sleep+0xc>
   2c2e4:	1000dc98 	.word	0x1000dc98
   2c2e8:	100504c4 	.word	0x100504c4

0002c2ec <ns_tempco_callback>:

    return 0;
}

// timer ISR callback
static void ns_tempco_callback(ns_timer_config_t *c) {
   2c2ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    // Power up, configure, and enable the ADC.
    am_hal_adc_power_control(g_ns_tempco_ADCHandle, AM_HAL_SYSCTRL_WAKE, true);
   2c2f0:	4e28      	ldr	r6, [pc, #160]	@ (2c394 <ns_tempco_callback+0xa8>)
    uint32_t ux, ui32OneSample;

    ui32OneSample = 1;

    sSamples[0].ui32Sample = sSamples[1].ui32Sample = sSamples[2].ui32Sample =
        sSamples[3].ui32Sample = sSamples[4].ui32Sample = 0;
   2c2f2:	4f29      	ldr	r7, [pc, #164]	@ (2c398 <ns_tempco_callback+0xac>)
    am_hal_adc_power_control(g_ns_tempco_ADCHandle, AM_HAL_SYSCTRL_WAKE, true);
   2c2f4:	6830      	ldr	r0, [r6, #0]
   2c2f6:	f8df a0ac 	ldr.w	sl, [pc, #172]	@ 2c3a4 <ns_tempco_callback+0xb8>
    ui32Cnt0 = _FLD2VAL(ADC_FIFO_COUNT, ADC->FIFO);
   2c2fa:	4c28      	ldr	r4, [pc, #160]	@ (2c39c <ns_tempco_callback+0xb0>)
static void ns_tempco_callback(ns_timer_config_t *c) {
   2c2fc:	b084      	sub	sp, #16
    am_hal_adc_power_control(g_ns_tempco_ADCHandle, AM_HAL_SYSCTRL_WAKE, true);
   2c2fe:	2201      	movs	r2, #1
   2c300:	2100      	movs	r1, #0
   2c302:	f009 fbbd 	bl	35a80 <am_hal_adc_power_control>
    am_hal_adc_enable(g_ns_tempco_ADCHandle);
   2c306:	6830      	ldr	r0, [r6, #0]
   2c308:	f009 fa3a 	bl	35780 <am_hal_adc_enable>
        sSamples[3].ui32Sample = sSamples[4].ui32Sample = 0;
   2c30c:	2300      	movs	r3, #0
    ui32OneSample = 1;
   2c30e:	2201      	movs	r2, #1
    ux = 0;
   2c310:	4698      	mov	r8, r3
    ui32OneSample = 1;
   2c312:	9203      	str	r2, [sp, #12]
        sSamples[3].ui32Sample = sSamples[4].ui32Sample = 0;
   2c314:	623b      	str	r3, [r7, #32]
   2c316:	61bb      	str	r3, [r7, #24]
    sSamples[0].ui32Sample = sSamples[1].ui32Sample = sSamples[2].ui32Sample =
   2c318:	613b      	str	r3, [r7, #16]
   2c31a:	60bb      	str	r3, [r7, #8]
   2c31c:	603b      	str	r3, [r7, #0]
    while (ux < ui32NumSamples) {
   2c31e:	4699      	mov	r9, r3
    ui32Cnt0 = _FLD2VAL(ADC_FIFO_COUNT, ADC->FIFO);
   2c320:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
    while (_FLD2VAL(ADC_FIFO_COUNT, ADC->FIFO) == ui32Cnt0) {
   2c322:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
   2c324:	406b      	eors	r3, r5
   2c326:	f013 6f7f 	tst.w	r3, #267386880	@ 0xff00000
   2c32a:	d10a      	bne.n	2c342 <ns_tempco_callback+0x56>
        am_hal_adc_sw_trigger(g_ns_tempco_ADCHandle);
   2c32c:	6830      	ldr	r0, [r6, #0]
   2c32e:	f009 fb95 	bl	35a5c <am_hal_adc_sw_trigger>
        am_hal_delay_us(1);
   2c332:	2001      	movs	r0, #1
   2c334:	f00b f992 	bl	3765c <am_hal_delay_us>
    while (_FLD2VAL(ADC_FIFO_COUNT, ADC->FIFO) == ui32Cnt0) {
   2c338:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
   2c33a:	406b      	eors	r3, r5
   2c33c:	f013 6f7f 	tst.w	r3, #267386880	@ 0xff00000
   2c340:	d0f4      	beq.n	2c32c <ns_tempco_callback+0x40>
        adc_trigger_wait();

        // Invalidate DAXI to make sure CPU sees the new data when loaded.
        am_hal_daxi_control(AM_HAL_DAXI_CONTROL_INVALIDATE, NULL);
   2c342:	2100      	movs	r1, #0
   2c344:	4608      	mov	r0, r1
        am_hal_adc_samples_read(g_ns_tempco_ADCHandle, true, NULL, &ui32OneSample, &sSamples[ux]);
   2c346:	eb07 0509 	add.w	r5, r7, r9
        am_hal_daxi_control(AM_HAL_DAXI_CONTROL_INVALIDATE, NULL);
   2c34a:	f009 fcb5 	bl	35cb8 <am_hal_daxi_control>
        am_hal_adc_samples_read(g_ns_tempco_ADCHandle, true, NULL, &ui32OneSample, &sSamples[ux]);
   2c34e:	6830      	ldr	r0, [r6, #0]
   2c350:	9500      	str	r5, [sp, #0]
   2c352:	2200      	movs	r2, #0
   2c354:	ab03      	add	r3, sp, #12
   2c356:	2101      	movs	r1, #1
   2c358:	f009 fa42 	bl	357e0 <am_hal_adc_samples_read>

        if (sSamples[ux].ui32Slot == g_ns_tempco_ui32TempcoADCslot) {
   2c35c:	686a      	ldr	r2, [r5, #4]
   2c35e:	f8da 3000 	ldr.w	r3, [sl]
   2c362:	429a      	cmp	r2, r3
   2c364:	d1dc      	bne.n	2c320 <ns_tempco_callback+0x34>
            // This is a temperature sample. Get the next sample.
            ux++;
   2c366:	f108 0801 	add.w	r8, r8, #1
    while (ux < ui32NumSamples) {
   2c36a:	f1b8 0f05 	cmp.w	r8, #5
   2c36e:	d002      	beq.n	2c376 <ns_tempco_callback+0x8a>
   2c370:	ea4f 09c8 	mov.w	r9, r8, lsl #3
   2c374:	e7d4      	b.n	2c320 <ns_tempco_callback+0x34>
        am_hal_pwrctrl_tempco_sample_handler(AM_HAL_TEMPCO_NUMSAMPLES, g_ns_tempco_sSamples);
   2c376:	4908      	ldr	r1, [pc, #32]	@ (2c398 <ns_tempco_callback+0xac>)
   2c378:	4640      	mov	r0, r8
   2c37a:	f00a feb1 	bl	370e0 <am_hal_pwrctrl_tempco_sample_handler>
    g_ns_tempco_ui32TempcoIsrRet =
   2c37e:	4b08      	ldr	r3, [pc, #32]	@ (2c3a0 <ns_tempco_callback+0xb4>)
        am_hal_pwrctrl_tempco_sample_handler(AM_HAL_TEMPCO_NUMSAMPLES, g_ns_tempco_sSamples);
   2c380:	4604      	mov	r4, r0
    am_hal_adc_power_control(g_ns_tempco_ADCHandle, AM_HAL_SYSCTRL_DEEPSLEEP, true);
   2c382:	6830      	ldr	r0, [r6, #0]
    g_ns_tempco_ui32TempcoIsrRet =
   2c384:	601c      	str	r4, [r3, #0]
    am_hal_adc_power_control(g_ns_tempco_ADCHandle, AM_HAL_SYSCTRL_DEEPSLEEP, true);
   2c386:	2201      	movs	r2, #1
   2c388:	2102      	movs	r1, #2
}
   2c38a:	b004      	add	sp, #16
   2c38c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    am_hal_adc_power_control(g_ns_tempco_ADCHandle, AM_HAL_SYSCTRL_DEEPSLEEP, true);
   2c390:	f009 bb76 	b.w	35a80 <am_hal_adc_power_control>
   2c394:	100504c4 	.word	0x100504c4
   2c398:	100504c8 	.word	0x100504c8
   2c39c:	40038000 	.word	0x40038000
   2c3a0:	100504f4 	.word	0x100504f4
   2c3a4:	100504f0 	.word	0x100504f0

0002c3a8 <ns_tempco_init>:
uint32_t ns_tempco_init(void) {
   2c3a8:	b530      	push	{r4, r5, lr}
    am_hal_adc_config_t sADC_Cfg = {
   2c3aa:	4b26      	ldr	r3, [pc, #152]	@ (2c444 <ns_tempco_init+0x9c>)
    if (am_hal_adc_initialize(0, &g_ns_tempco_ADCHandle) != AM_HAL_STATUS_SUCCESS) {
   2c3ac:	4c26      	ldr	r4, [pc, #152]	@ (2c448 <ns_tempco_init+0xa0>)
    g_ns_tempco_ui32TempcoADCslot = TEMPCO_ADC_TEMPERATURE_SLOT;
   2c3ae:	4d27      	ldr	r5, [pc, #156]	@ (2c44c <ns_tempco_init+0xa4>)
    am_hal_adc_config_t sADC_Cfg = {
   2c3b0:	e893 0003 	ldmia.w	r3, {r0, r1}
uint32_t ns_tempco_init(void) {
   2c3b4:	b083      	sub	sp, #12
    am_hal_adc_config_t sADC_Cfg = {
   2c3b6:	0c0a      	lsrs	r2, r1, #16
    g_ns_tempco_ui32TempcoADCslot = TEMPCO_ADC_TEMPERATURE_SLOT;
   2c3b8:	2305      	movs	r3, #5
    am_hal_adc_config_t sADC_Cfg = {
   2c3ba:	9000      	str	r0, [sp, #0]
   2c3bc:	f8ad 1004 	strh.w	r1, [sp, #4]
    if (am_hal_adc_initialize(0, &g_ns_tempco_ADCHandle) != AM_HAL_STATUS_SUCCESS) {
   2c3c0:	2000      	movs	r0, #0
   2c3c2:	4621      	mov	r1, r4
    am_hal_adc_config_t sADC_Cfg = {
   2c3c4:	f88d 2006 	strb.w	r2, [sp, #6]
    g_ns_tempco_ui32TempcoADCslot = TEMPCO_ADC_TEMPERATURE_SLOT;
   2c3c8:	602b      	str	r3, [r5, #0]
    if (am_hal_adc_initialize(0, &g_ns_tempco_ADCHandle) != AM_HAL_STATUS_SUCCESS) {
   2c3ca:	f009 f837 	bl	3543c <am_hal_adc_initialize>
   2c3ce:	b9f0      	cbnz	r0, 2c40e <ns_tempco_init+0x66>
    if (am_hal_adc_power_control(g_ns_tempco_ADCHandle, AM_HAL_SYSCTRL_WAKE, false) !=
   2c3d0:	4602      	mov	r2, r0
   2c3d2:	4601      	mov	r1, r0
   2c3d4:	6820      	ldr	r0, [r4, #0]
   2c3d6:	f009 fb53 	bl	35a80 <am_hal_adc_power_control>
   2c3da:	bb30      	cbnz	r0, 2c42a <ns_tempco_init+0x82>
    if (am_hal_adc_configure(g_ns_tempco_ADCHandle, (am_hal_adc_config_t *)&sADC_Cfg) !=
   2c3dc:	6820      	ldr	r0, [r4, #0]
   2c3de:	4669      	mov	r1, sp
   2c3e0:	f009 f8be 	bl	35560 <am_hal_adc_configure>
   2c3e4:	b9d0      	cbnz	r0, 2c41c <ns_tempco_init+0x74>
    ns_timer_init(&g_ns_tempcoTimer);
   2c3e6:	481a      	ldr	r0, [pc, #104]	@ (2c450 <ns_tempco_init+0xa8>)
   2c3e8:	f000 f854 	bl	2c494 <ns_timer_init>
    ui32Retval = am_hal_pwrctrl_tempco_init(g_ns_tempco_ADCHandle, g_ns_tempco_ui32TempcoADCslot);
   2c3ec:	6829      	ldr	r1, [r5, #0]
   2c3ee:	6820      	ldr	r0, [r4, #0]
   2c3f0:	f00a fe26 	bl	37040 <am_hal_pwrctrl_tempco_init>
    if (ui32Retval != AM_HAL_STATUS_SUCCESS) {
   2c3f4:	4605      	mov	r5, r0
   2c3f6:	b9f8      	cbnz	r0, 2c438 <ns_tempco_init+0x90>
    am_hal_adc_enable(g_ns_tempco_ADCHandle);
   2c3f8:	6820      	ldr	r0, [r4, #0]
   2c3fa:	f009 f9c1 	bl	35780 <am_hal_adc_enable>
    g_ns_state.tempcoWantsToBeEnabled = true;
   2c3fe:	4b15      	ldr	r3, [pc, #84]	@ (2c454 <ns_tempco_init+0xac>)
   2c400:	f240 1201 	movw	r2, #257	@ 0x101
   2c404:	f8a3 2007 	strh.w	r2, [r3, #7]
}
   2c408:	4628      	mov	r0, r5
   2c40a:	b003      	add	sp, #12
   2c40c:	bd30      	pop	{r4, r5, pc}
        ns_printf("tempco_init() Error - reservation of the ADC instance failed.\n");
   2c40e:	4812      	ldr	r0, [pc, #72]	@ (2c458 <ns_tempco_init+0xb0>)
   2c410:	f7ff fdaa 	bl	2bf68 <ns_lp_printf>
        return 1;
   2c414:	2501      	movs	r5, #1
}
   2c416:	4628      	mov	r0, r5
   2c418:	b003      	add	sp, #12
   2c41a:	bd30      	pop	{r4, r5, pc}
        ns_printf("tempco_init() Error - configuring ADC failed.\n");
   2c41c:	480f      	ldr	r0, [pc, #60]	@ (2c45c <ns_tempco_init+0xb4>)
   2c41e:	f7ff fda3 	bl	2bf68 <ns_lp_printf>
        return 3;
   2c422:	2503      	movs	r5, #3
}
   2c424:	4628      	mov	r0, r5
   2c426:	b003      	add	sp, #12
   2c428:	bd30      	pop	{r4, r5, pc}
        ns_printf("tempco_init() Error - ADC power on failed.\n");
   2c42a:	480d      	ldr	r0, [pc, #52]	@ (2c460 <ns_tempco_init+0xb8>)
   2c42c:	f7ff fd9c 	bl	2bf68 <ns_lp_printf>
        return 2;
   2c430:	2502      	movs	r5, #2
}
   2c432:	4628      	mov	r0, r5
   2c434:	b003      	add	sp, #12
   2c436:	bd30      	pop	{r4, r5, pc}
        ns_printf("ERROR am_hal_pwrctrl_tempco_init() returned %d.\n", ui32Retval);
   2c438:	4629      	mov	r1, r5
   2c43a:	480a      	ldr	r0, [pc, #40]	@ (2c464 <ns_tempco_init+0xbc>)
   2c43c:	f7ff fd94 	bl	2bf68 <ns_lp_printf>
        return 4;
   2c440:	2504      	movs	r5, #4
   2c442:	e7e1      	b.n	2c408 <ns_tempco_init+0x60>
   2c444:	00043180 	.word	0x00043180
   2c448:	100504c4 	.word	0x100504c4
   2c44c:	100504f0 	.word	0x100504f0
   2c450:	1000da9c 	.word	0x1000da9c
   2c454:	1000dc98 	.word	0x1000dc98
   2c458:	00043efc 	.word	0x00043efc
   2c45c:	00043f68 	.word	0x00043f68
   2c460:	00043f3c 	.word	0x00043f3c
   2c464:	00043f98 	.word	0x00043f98

0002c468 <ns_malloc>:
/// Empty for now, but placeholder in case we need multi-heap support
uint8_t ns_malloc_init() { return 0; };

int total_allocated = 0;
/// Simple pvPortMalloc wrapper
void *ns_malloc(size_t size) {
   2c468:	b510      	push	{r4, lr}
    void *ptr = NULL;

    if (size > 0) {
   2c46a:	4604      	mov	r4, r0
   2c46c:	b108      	cbz	r0, 2c472 <ns_malloc+0xa>
        ptr = pvTasklessPortMalloc(size);
   2c46e:	f7ed f8b1 	bl	195d4 <pvTasklessPortMalloc>
    } // else NULL if there was an error
    total_allocated += size;
   2c472:	4a02      	ldr	r2, [pc, #8]	@ (2c47c <ns_malloc+0x14>)
   2c474:	6813      	ldr	r3, [r2, #0]
   2c476:	4423      	add	r3, r4
   2c478:	6013      	str	r3, [r2, #0]
    // ns_lp_printf("ns_malloc(%d) total %d returning 0x%x\n", size, total_allocated, ptr);
    return ptr;
}
   2c47a:	bd10      	pop	{r4, pc}
   2c47c:	100504f8 	.word	0x100504f8

0002c480 <ns_free>:

/// Simple vPortFree wrapper
void ns_free(void *ptr) {
    if (ptr) {
   2c480:	b108      	cbz	r0, 2c486 <ns_free+0x6>
        vTasklessPortFree(ptr);
   2c482:	f7ed b8ab 	b.w	195dc <vTasklessPortFree>
    }
    // ns_lp_printf("ns_free(0x%x)\n", ptr);
}
   2c486:	4770      	bx	lr

0002c488 <ns_core_initialized>:
const ns_core_api_t ns_timer_current_version = {
    .apiId = NS_TIMER_API_ID, .version = NS_TIMER_V1_0_0};

ns_timer_config_t *ns_timer_config[NS_TIMER_TEMPCO + 1];

extern bool ns_core_initialized(void) { return g_ns_state.initialized; }
   2c488:	4b01      	ldr	r3, [pc, #4]	@ (2c490 <ns_core_initialized+0x8>)
   2c48a:	7918      	ldrb	r0, [r3, #4]
   2c48c:	4770      	bx	lr
   2c48e:	bf00      	nop
   2c490:	1000dc98 	.word	0x1000dc98

0002c494 <ns_timer_init>:

uint32_t ns_timer_init(ns_timer_config_t *cfg) {
    uint32_t ui32Status = AM_HAL_STATUS_SUCCESS;

#ifndef NS_DISABLE_API_VALIDATION
    if (cfg == NULL) {
   2c494:	b1b0      	cbz	r0, 2c4c4 <ns_timer_init+0x30>
uint32_t ns_timer_init(ns_timer_config_t *cfg) {
   2c496:	b510      	push	{r4, lr}
        return NS_STATUS_INVALID_HANDLE;
    }

    if (ns_core_check_api(
   2c498:	4a0d      	ldr	r2, [pc, #52]	@ (2c4d0 <ns_timer_init+0x3c>)
   2c49a:	490e      	ldr	r1, [pc, #56]	@ (2c4d4 <ns_timer_init+0x40>)
   2c49c:	4604      	mov	r4, r0
   2c49e:	6800      	ldr	r0, [r0, #0]
   2c4a0:	f7ed f8b8 	bl	19614 <ns_core_check_api>
   2c4a4:	b990      	cbnz	r0, 2c4cc <ns_timer_init+0x38>
            cfg->api, &ns_timer_oldest_supported_version, &ns_timer_current_version)) {
        return NS_STATUS_INVALID_VERSION;
    }

    if (cfg->timer > NS_TIMER_TEMPCO) {
   2c4a6:	7923      	ldrb	r3, [r4, #4]
   2c4a8:	2b03      	cmp	r3, #3
   2c4aa:	d80d      	bhi.n	2c4c8 <ns_timer_init+0x34>
        return NS_STATUS_INVALID_CONFIG;
    }
    if ((cfg->enableInterrupt) && (cfg->callback == NULL)) {
   2c4ac:	7962      	ldrb	r2, [r4, #5]
   2c4ae:	b10a      	cbz	r2, 2c4b4 <ns_timer_init+0x20>
   2c4b0:	68e2      	ldr	r2, [r4, #12]
   2c4b2:	b14a      	cbz	r2, 2c4c8 <ns_timer_init+0x34>
        return NS_STATUS_INVALID_CONFIG;
    }
#endif

    ns_timer_config[cfg->timer] = cfg;
   2c4b4:	4a08      	ldr	r2, [pc, #32]	@ (2c4d8 <ns_timer_init+0x44>)

    ui32Status = ns_timer_platform_init(cfg);
   2c4b6:	4620      	mov	r0, r4
    ns_timer_config[cfg->timer] = cfg;
   2c4b8:	f842 4023 	str.w	r4, [r2, r3, lsl #2]

    return ui32Status;
}
   2c4bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ui32Status = ns_timer_platform_init(cfg);
   2c4c0:	f000 b848 	b.w	2c554 <ns_timer_platform_init>
        return NS_STATUS_INVALID_HANDLE;
   2c4c4:	2001      	movs	r0, #1
}
   2c4c6:	4770      	bx	lr
        return NS_STATUS_INVALID_CONFIG;
   2c4c8:	2003      	movs	r0, #3
}
   2c4ca:	bd10      	pop	{r4, pc}
        return NS_STATUS_INVALID_VERSION;
   2c4cc:	2002      	movs	r0, #2
}
   2c4ce:	bd10      	pop	{r4, pc}
   2c4d0:	0004ba38 	.word	0x0004ba38
   2c4d4:	0004ba44 	.word	0x0004ba44
   2c4d8:	100504fc 	.word	0x100504fc

0002c4dc <am_timer01_isr>:
#include "am_util.h"
#include "ns_core.h"

extern ns_timer_config_t *ns_timer_config[NS_TIMER_TEMPCO + 1];

void am_timer01_isr(void) {
   2c4dc:	b570      	push	{r4, r5, r6, lr}
    ns_timers_e timerNum = ns_timer_config[1]->timer;
   2c4de:	4c08      	ldr	r4, [pc, #32]	@ (2c500 <am_timer01_isr+0x24>)
   2c4e0:	6863      	ldr	r3, [r4, #4]
   2c4e2:	791d      	ldrb	r5, [r3, #4]
    //
    // Clear the timer Interrupt (write to clear).
    //
    am_hal_timer_interrupt_clear(AM_HAL_TIMER_MASK(timerNum, AM_HAL_TIMER_COMPARE1));
   2c4e4:	2002      	movs	r0, #2
   2c4e6:	006b      	lsls	r3, r5, #1
   2c4e8:	4098      	lsls	r0, r3
   2c4ea:	f00b f87b 	bl	375e4 <am_hal_timer_interrupt_clear>
    am_hal_timer_clear(timerNum);
   2c4ee:	4628      	mov	r0, r5
   2c4f0:	f00b f830 	bl	37554 <am_hal_timer_clear>

    ns_timer_config[1]->callback(ns_timer_config[1]);
   2c4f4:	6860      	ldr	r0, [r4, #4]
}
   2c4f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ns_timer_config[1]->callback(ns_timer_config[1]);
   2c4fa:	68c3      	ldr	r3, [r0, #12]
   2c4fc:	4718      	bx	r3
   2c4fe:	bf00      	nop
   2c500:	100504fc 	.word	0x100504fc

0002c504 <am_timer02_isr>:

void am_timer02_isr(void) {
   2c504:	b570      	push	{r4, r5, r6, lr}
    ns_timers_e timerNum = ns_timer_config[2]->timer;
   2c506:	4c08      	ldr	r4, [pc, #32]	@ (2c528 <am_timer02_isr+0x24>)
   2c508:	68a3      	ldr	r3, [r4, #8]
   2c50a:	791d      	ldrb	r5, [r3, #4]
    //
    // Clear the timer Interrupt (write to clear).
    //
    am_hal_timer_interrupt_clear(AM_HAL_TIMER_MASK(timerNum, AM_HAL_TIMER_COMPARE1));
   2c50c:	2002      	movs	r0, #2
   2c50e:	006b      	lsls	r3, r5, #1
   2c510:	4098      	lsls	r0, r3
   2c512:	f00b f867 	bl	375e4 <am_hal_timer_interrupt_clear>
    am_hal_timer_clear(timerNum);
   2c516:	4628      	mov	r0, r5
   2c518:	f00b f81c 	bl	37554 <am_hal_timer_clear>

    ns_timer_config[2]->callback(ns_timer_config[2]);
   2c51c:	68a0      	ldr	r0, [r4, #8]
}
   2c51e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ns_timer_config[2]->callback(ns_timer_config[2]);
   2c522:	68c3      	ldr	r3, [r0, #12]
   2c524:	4718      	bx	r3
   2c526:	bf00      	nop
   2c528:	100504fc 	.word	0x100504fc

0002c52c <am_timer03_isr>:

void am_timer03_isr(void) {
   2c52c:	b570      	push	{r4, r5, r6, lr}
    ns_timers_e timerNum = ns_timer_config[3]->timer;
   2c52e:	4c08      	ldr	r4, [pc, #32]	@ (2c550 <am_timer03_isr+0x24>)
   2c530:	68e3      	ldr	r3, [r4, #12]
   2c532:	791d      	ldrb	r5, [r3, #4]
    //
    // Clear the timer Interrupt (write to clear).
    //
    am_hal_timer_interrupt_clear(AM_HAL_TIMER_MASK(timerNum, AM_HAL_TIMER_COMPARE1));
   2c534:	2002      	movs	r0, #2
   2c536:	006b      	lsls	r3, r5, #1
   2c538:	4098      	lsls	r0, r3
   2c53a:	f00b f853 	bl	375e4 <am_hal_timer_interrupt_clear>
    am_hal_timer_clear(timerNum);
   2c53e:	4628      	mov	r0, r5
   2c540:	f00b f808 	bl	37554 <am_hal_timer_clear>

    ns_timer_config[2]->callback(ns_timer_config[3]);
   2c544:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
}
   2c548:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ns_timer_config[2]->callback(ns_timer_config[3]);
   2c54c:	68db      	ldr	r3, [r3, #12]
   2c54e:	4718      	bx	r3
   2c550:	100504fc 	.word	0x100504fc

0002c554 <ns_timer_platform_init>:

uint32_t ns_timer_platform_init(ns_timer_config_t *cfg) {
   2c554:	b570      	push	{r4, r5, r6, lr}
   2c556:	4604      	mov	r4, r0
   2c558:	b086      	sub	sp, #24

    am_hal_timer_config_t TimerConfig;

    // Set the timer configuration
    // The default timer configuration is HFRC_DIV16, EDGE, compares=0, no trig.
    am_hal_timer_default_config_set(&TimerConfig);
   2c55a:	a801      	add	r0, sp, #4
   2c55c:	f00a ffea 	bl	37534 <am_hal_timer_default_config_set>

    // modify the default
    if (cfg->timer == NS_TIMER_TEMPCO) {
   2c560:	7920      	ldrb	r0, [r4, #4]
   2c562:	2803      	cmp	r0, #3
        TimerConfig.eInputClock = AM_HAL_TIMER_CLOCK_HFRC_DIV16;
   2c564:	bf04      	itt	eq
   2c566:	2301      	moveq	r3, #1
   2c568:	f88d 3004 	strbeq.w	r3, [sp, #4]
    }

    if ((cfg->enableInterrupt)) {
   2c56c:	7963      	ldrb	r3, [r4, #5]
   2c56e:	b143      	cbz	r3, 2c582 <ns_timer_platform_init+0x2e>
        TimerConfig.eFunction = AM_HAL_TIMER_FN_UPCOUNT;
        TimerConfig.ui32Compare1 = cfg->periodInMicroseconds / 6; // 6 ticks per uS
   2c570:	68a3      	ldr	r3, [r4, #8]
   2c572:	4a1e      	ldr	r2, [pc, #120]	@ (2c5ec <ns_timer_platform_init+0x98>)
        TimerConfig.eFunction = AM_HAL_TIMER_FN_UPCOUNT;
   2c574:	2102      	movs	r1, #2
        TimerConfig.ui32Compare1 = cfg->periodInMicroseconds / 6; // 6 ticks per uS
   2c576:	fba2 2303 	umull	r2, r3, r2, r3
   2c57a:	40cb      	lsrs	r3, r1
        TimerConfig.eFunction = AM_HAL_TIMER_FN_UPCOUNT;
   2c57c:	f88d 1005 	strb.w	r1, [sp, #5]
        TimerConfig.ui32Compare1 = cfg->periodInMicroseconds / 6; // 6 ticks per uS
   2c580:	9305      	str	r3, [sp, #20]
    }

    ui32Status = am_hal_timer_config(cfg->timer, &TimerConfig);
   2c582:	a901      	add	r1, sp, #4
   2c584:	f00a ff86 	bl	37494 <am_hal_timer_config>
    if (ui32Status != AM_HAL_STATUS_SUCCESS) {
   2c588:	4605      	mov	r5, r0
   2c58a:	bb00      	cbnz	r0, 2c5ce <ns_timer_platform_init+0x7a>
    }

    //
    // Stop and clear the timer.
    //
    am_hal_timer_clear(cfg->timer);
   2c58c:	7920      	ldrb	r0, [r4, #4]
   2c58e:	f00a ffe1 	bl	37554 <am_hal_timer_clear>

    if ((cfg->enableInterrupt)) {
   2c592:	7963      	ldrb	r3, [r4, #5]
   2c594:	b913      	cbnz	r3, 2c59c <ns_timer_platform_init+0x48>
            NVIC_SetPriority(TIMER2_IRQn, AM_IRQ_PRIORITY_DEFAULT);
            NVIC_EnableIRQ(TIMER2_IRQn);
        }
    }
    return ui32Status;
}
   2c596:	4628      	mov	r0, r5
   2c598:	b006      	add	sp, #24
   2c59a:	bd70      	pop	{r4, r5, r6, pc}
        am_hal_timer_interrupt_clear(AM_HAL_TIMER_MASK(cfg->timer, AM_HAL_TIMER_COMPARE1));
   2c59c:	7920      	ldrb	r0, [r4, #4]
   2c59e:	2602      	movs	r6, #2
   2c5a0:	0040      	lsls	r0, r0, #1
   2c5a2:	fa06 f000 	lsl.w	r0, r6, r0
   2c5a6:	f00b f81d 	bl	375e4 <am_hal_timer_interrupt_clear>
        am_hal_timer_interrupt_enable(AM_HAL_TIMER_MASK(cfg->timer, AM_HAL_TIMER_COMPARE1));
   2c5aa:	7920      	ldrb	r0, [r4, #4]
   2c5ac:	0040      	lsls	r0, r0, #1
   2c5ae:	fa06 f000 	lsl.w	r0, r6, r0
   2c5b2:	f00b f80d 	bl	375d0 <am_hal_timer_interrupt_enable>
        if (cfg->timer == NS_TIMER_INTERRUPT) {
   2c5b6:	7923      	ldrb	r3, [r4, #4]
   2c5b8:	2b01      	cmp	r3, #1
   2c5ba:	d010      	beq.n	2c5de <ns_timer_platform_init+0x8a>
        } else if (cfg->timer == NS_TIMER_USB) {
   2c5bc:	2b02      	cmp	r3, #2
   2c5be:	d1ea      	bne.n	2c596 <ns_timer_platform_init+0x42>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2c5c0:	4b0b      	ldr	r3, [pc, #44]	@ (2c5f0 <ns_timer_platform_init+0x9c>)
   2c5c2:	2280      	movs	r2, #128	@ 0x80
   2c5c4:	f883 2345 	strb.w	r2, [r3, #837]	@ 0x345
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2c5c8:	2220      	movs	r2, #32
   2c5ca:	609a      	str	r2, [r3, #8]
    __COMPILER_BARRIER();
   2c5cc:	e7e3      	b.n	2c596 <ns_timer_platform_init+0x42>
        ns_lp_printf("Failed to configure TIMER%d, return value=%d\r\n", cfg->timer, ui32Status);
   2c5ce:	7921      	ldrb	r1, [r4, #4]
   2c5d0:	4808      	ldr	r0, [pc, #32]	@ (2c5f4 <ns_timer_platform_init+0xa0>)
   2c5d2:	462a      	mov	r2, r5
   2c5d4:	f7ff fcc8 	bl	2bf68 <ns_lp_printf>
}
   2c5d8:	4628      	mov	r0, r5
   2c5da:	b006      	add	sp, #24
   2c5dc:	bd70      	pop	{r4, r5, r6, pc}
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2c5de:	4b04      	ldr	r3, [pc, #16]	@ (2c5f0 <ns_timer_platform_init+0x9c>)
   2c5e0:	2210      	movs	r2, #16
   2c5e2:	609a      	str	r2, [r3, #8]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2c5e4:	2280      	movs	r2, #128	@ 0x80
   2c5e6:	f883 2344 	strb.w	r2, [r3, #836]	@ 0x344
   2c5ea:	e7d4      	b.n	2c596 <ns_timer_platform_init+0x42>
   2c5ec:	aaaaaaab 	.word	0xaaaaaaab
   2c5f0:	e000e100 	.word	0xe000e100
   2c5f4:	00043fcc 	.word	0x00043fcc

0002c5f8 <ns_us_ticker_read>:

uint32_t ns_us_ticker_read(ns_timer_config_t *cfg) {
#ifndef NS_DISABLE_API_VALIDATION
    if (cfg == NULL) {
   2c5f8:	b140      	cbz	r0, 2c60c <ns_us_ticker_read+0x14>
uint32_t ns_us_ticker_read(ns_timer_config_t *cfg) {
   2c5fa:	b508      	push	{r3, lr}
        return 0xDEADBEEF;
    }
#endif
    return am_hal_timer_read(cfg->timer) / 6; // 6 ticks per uS
   2c5fc:	7900      	ldrb	r0, [r0, #4]
   2c5fe:	f00a ffd3 	bl	375a8 <am_hal_timer_read>
   2c602:	4b03      	ldr	r3, [pc, #12]	@ (2c610 <ns_us_ticker_read+0x18>)
   2c604:	fba3 3000 	umull	r3, r0, r3, r0
   2c608:	0880      	lsrs	r0, r0, #2
}
   2c60a:	bd08      	pop	{r3, pc}
        return 0xDEADBEEF;
   2c60c:	4801      	ldr	r0, [pc, #4]	@ (2c614 <ns_us_ticker_read+0x1c>)
}
   2c60e:	4770      	bx	lr
   2c610:	aaaaaaab 	.word	0xaaaaaaab
   2c614:	deadbeef 	.word	0xdeadbeef

0002c618 <ns_camera_buff_read_done>:
static uint32_t dma_offset;
static uint8_t *dma_cambuf;

bool ns_read_done = false;

static void ns_camera_buff_read_done(ns_spi_config_t *cfg) {
   2c618:	b530      	push	{r4, r5, lr}
    // ns_printf("Chunk Read done for chunk starting at offset %d\n", dma_offset);

    // Calculate next chunk offset
    dma_offset += dma_current_chunk_length;
   2c61a:	491b      	ldr	r1, [pc, #108]	@ (2c688 <ns_camera_buff_read_done+0x70>)
   2c61c:	4d1b      	ldr	r5, [pc, #108]	@ (2c68c <ns_camera_buff_read_done+0x74>)
   2c61e:	680b      	ldr	r3, [r1, #0]
   2c620:	682a      	ldr	r2, [r5, #0]

    // Check if we have more to read
    if (dma_offset < dma_total_requested_length) {
   2c622:	4c1b      	ldr	r4, [pc, #108]	@ (2c690 <ns_camera_buff_read_done+0x78>)
    dma_offset += dma_current_chunk_length;
   2c624:	4413      	add	r3, r2
    if (dma_offset < dma_total_requested_length) {
   2c626:	6822      	ldr	r2, [r4, #0]
    dma_offset += dma_current_chunk_length;
   2c628:	600b      	str	r3, [r1, #0]
    if (dma_offset < dma_total_requested_length) {
   2c62a:	4293      	cmp	r3, r2
static void ns_camera_buff_read_done(ns_spi_config_t *cfg) {
   2c62c:	b085      	sub	sp, #20
    if (dma_offset < dma_total_requested_length) {
   2c62e:	d312      	bcc.n	2c656 <ns_camera_buff_read_done+0x3e>
        // dma_cambuf, dma_offset, dma_current_chunk_length); ns_delay_us(1000);
        ns_spi_read_dma(
            spiHandle, dma_offset + dma_cambuf, dma_current_chunk_length, ARDU_BURST_FIFO_READ, 1,
            camera.csPin);
    } else {
        ns_read_done = true;
   2c630:	4b18      	ldr	r3, [pc, #96]	@ (2c694 <ns_camera_buff_read_done+0x7c>)
        // ns_lp_printf("DMA Read done\n");
        if (ns_camera_config.dmaCompleteCb) {
   2c632:	4819      	ldr	r0, [pc, #100]	@ (2c698 <ns_camera_buff_read_done+0x80>)
        ns_read_done = true;
   2c634:	2101      	movs	r1, #1
   2c636:	7019      	strb	r1, [r3, #0]
        if (ns_camera_config.dmaCompleteCb) {
   2c638:	6b03      	ldr	r3, [r0, #48]	@ 0x30
   2c63a:	b10b      	cbz	r3, 2c640 <ns_camera_buff_read_done+0x28>
            ns_camera_config.dmaCompleteCb(&ns_camera_config);
   2c63c:	4798      	blx	r3
        }
        if (camera.burstFirstFlag == 0) {
            camera.burstFirstFlag = 1;
        }
        camera.receivedLength -= dma_total_requested_length;
   2c63e:	6822      	ldr	r2, [r4, #0]
        if (camera.burstFirstFlag == 0) {
   2c640:	4b16      	ldr	r3, [pc, #88]	@ (2c69c <ns_camera_buff_read_done+0x84>)
   2c642:	7b99      	ldrb	r1, [r3, #14]
   2c644:	b121      	cbz	r1, 2c650 <ns_camera_buff_read_done+0x38>
        camera.receivedLength -= dma_total_requested_length;
   2c646:	6899      	ldr	r1, [r3, #8]
   2c648:	1a89      	subs	r1, r1, r2
   2c64a:	6099      	str	r1, [r3, #8]
    }
}
   2c64c:	b005      	add	sp, #20
   2c64e:	bd30      	pop	{r4, r5, pc}
            camera.burstFirstFlag = 1;
   2c650:	2101      	movs	r1, #1
   2c652:	7399      	strb	r1, [r3, #14]
   2c654:	e7f7      	b.n	2c646 <ns_camera_buff_read_done+0x2e>
        ns_spi_read_dma(
   2c656:	4912      	ldr	r1, [pc, #72]	@ (2c6a0 <ns_camera_buff_read_done+0x88>)
            camera.csPin);
   2c658:	4c10      	ldr	r4, [pc, #64]	@ (2c69c <ns_camera_buff_read_done+0x84>)
            spiHandle, dma_offset + dma_cambuf, dma_current_chunk_length, ARDU_BURST_FIFO_READ, 1,
   2c65a:	6809      	ldr	r1, [r1, #0]
        ns_spi_read_dma(
   2c65c:	6824      	ldr	r4, [r4, #0]
   2c65e:	4811      	ldr	r0, [pc, #68]	@ (2c6a4 <ns_camera_buff_read_done+0x8c>)
        dma_current_chunk_length = (dma_total_requested_length - dma_offset) > MAX_SPI_DMA_LEN
   2c660:	1ad2      	subs	r2, r2, r3
                                       : (dma_total_requested_length - dma_offset);
   2c662:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
        ns_spi_read_dma(
   2c666:	4419      	add	r1, r3
                                       : (dma_total_requested_length - dma_offset);
   2c668:	bf28      	it	cs
   2c66a:	f44f 6200 	movcs.w	r2, #2048	@ 0x800
        ns_spi_read_dma(
   2c66e:	2301      	movs	r3, #1
        dma_current_chunk_length = (dma_total_requested_length - dma_offset) > MAX_SPI_DMA_LEN
   2c670:	602a      	str	r2, [r5, #0]
        ns_spi_read_dma(
   2c672:	6800      	ldr	r0, [r0, #0]
   2c674:	2500      	movs	r5, #0
   2c676:	e9cd 3402 	strd	r3, r4, [sp, #8]
   2c67a:	243c      	movs	r4, #60	@ 0x3c
   2c67c:	e9cd 4500 	strd	r4, r5, [sp]
   2c680:	f014 fa8c 	bl	40b9c <ns_spi_read_dma>
}
   2c684:	b005      	add	sp, #20
   2c686:	bd30      	pop	{r4, r5, pc}
   2c688:	10050514 	.word	0x10050514
   2c68c:	10050518 	.word	0x10050518
   2c690:	1005051c 	.word	0x1005051c
   2c694:	1005050c 	.word	0x1005050c
   2c698:	10050524 	.word	0x10050524
   2c69c:	10050568 	.word	0x10050568
   2c6a0:	10050510 	.word	0x10050510
   2c6a4:	10050564 	.word	0x10050564

0002c6a8 <ns_camera_check_picture_completion>:

void ns_camera_check_picture_completion(ns_timer_config_t *timer) {
   2c6a8:	b538      	push	{r3, r4, r5, lr}
    if (!nsCameraPictureBeingTaken) {
   2c6aa:	4c0d      	ldr	r4, [pc, #52]	@ (2c6e0 <ns_camera_check_picture_completion+0x38>)
   2c6ac:	7823      	ldrb	r3, [r4, #0]
   2c6ae:	b903      	cbnz	r3, 2c6b2 <ns_camera_check_picture_completion+0xa>
    if (ns_camera_config.pictureTakenCb) {
        // ns_lp_printf("Calling picture taken CB\n");
        ns_camera_config.pictureTakenCb(&ns_camera_config);
    }
    nsCameraPictureBeingTaken = false;
}
   2c6b0:	bd38      	pop	{r3, r4, r5, pc}
    if (getBit(&camera, NS_CAMERA_ARDUCHIP_TRIG, NS_CAMERA_CAP_DONE_MASK) == 0) {
   2c6b2:	4d0c      	ldr	r5, [pc, #48]	@ (2c6e4 <ns_camera_check_picture_completion+0x3c>)
   2c6b4:	2204      	movs	r2, #4
   2c6b6:	2144      	movs	r1, #68	@ 0x44
   2c6b8:	4628      	mov	r0, r5
   2c6ba:	f000 ffc9 	bl	2d650 <getBit>
   2c6be:	2800      	cmp	r0, #0
   2c6c0:	d0f6      	beq.n	2c6b0 <ns_camera_check_picture_completion+0x8>
    camera.receivedLength = readFifoLength(&camera);
   2c6c2:	4628      	mov	r0, r5
   2c6c4:	f000 ffc0 	bl	2d648 <readFifoLength>
   2c6c8:	4603      	mov	r3, r0
    if (ns_camera_config.pictureTakenCb) {
   2c6ca:	4807      	ldr	r0, [pc, #28]	@ (2c6e8 <ns_camera_check_picture_completion+0x40>)
   2c6cc:	6b42      	ldr	r2, [r0, #52]	@ 0x34
    camera.burstFirstFlag = 0;
   2c6ce:	2100      	movs	r1, #0
    camera.totalLength = camera.receivedLength;
   2c6d0:	e9c5 3301 	strd	r3, r3, [r5, #4]
    camera.burstFirstFlag = 0;
   2c6d4:	73a9      	strb	r1, [r5, #14]
    if (ns_camera_config.pictureTakenCb) {
   2c6d6:	b102      	cbz	r2, 2c6da <ns_camera_check_picture_completion+0x32>
        ns_camera_config.pictureTakenCb(&ns_camera_config);
   2c6d8:	4790      	blx	r2
    nsCameraPictureBeingTaken = false;
   2c6da:	2300      	movs	r3, #0
   2c6dc:	7023      	strb	r3, [r4, #0]
}
   2c6de:	bd38      	pop	{r3, r4, r5, pc}
   2c6e0:	10050520 	.word	0x10050520
   2c6e4:	10050568 	.word	0x10050568
   2c6e8:	10050524 	.word	0x10050524

0002c6ec <ns_camera_init>:
    .enableInterrupt = true,
    .periodInMicroseconds = 80000,
    .callback = ns_camera_check_picture_completion,
};

uint32_t ns_camera_init(ns_camera_config_t *cfg) {
   2c6ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    // Only IOM1 is supported currently - check it
    // Check that buff size is sane
    // Check that picture mode is sane
    // Check that pix format is sane

    spiHandle = &cfg->spiConfig;
   2c6ee:	4a21      	ldr	r2, [pc, #132]	@ (2c774 <ns_camera_init+0x88>)
    cfg->spiConfig.cb = ns_camera_buff_read_done;
   2c6f0:	4b21      	ldr	r3, [pc, #132]	@ (2c778 <ns_camera_init+0x8c>)
    memcpy(&ns_camera_config, cfg, sizeof(ns_camera_config_t));
   2c6f2:	4d22      	ldr	r5, [pc, #136]	@ (2c77c <ns_camera_init+0x90>)
    cfg->spiConfig.cb = ns_camera_buff_read_done;
   2c6f4:	62c3      	str	r3, [r0, #44]	@ 0x2c
    spiHandle = &cfg->spiConfig;
   2c6f6:	f100 0610 	add.w	r6, r0, #16
uint32_t ns_camera_init(ns_camera_config_t *cfg) {
   2c6fa:	b093      	sub	sp, #76	@ 0x4c
   2c6fc:	4604      	mov	r4, r0
    spiHandle = &cfg->spiConfig;
   2c6fe:	6016      	str	r6, [r2, #0]
    memcpy(&ns_camera_config, cfg, sizeof(ns_camera_config_t));
   2c700:	4684      	mov	ip, r0
   2c702:	f100 0740 	add.w	r7, r0, #64	@ 0x40
   2c706:	f8dc 0000 	ldr.w	r0, [ip]
   2c70a:	f8dc 1004 	ldr.w	r1, [ip, #4]
   2c70e:	f8dc 2008 	ldr.w	r2, [ip, #8]
   2c712:	f8dc 300c 	ldr.w	r3, [ip, #12]
   2c716:	46ae      	mov	lr, r5
   2c718:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   2c71c:	f10c 0c10 	add.w	ip, ip, #16
   2c720:	45bc      	cmp	ip, r7
   2c722:	4675      	mov	r5, lr
   2c724:	d1ef      	bne.n	2c706 <ns_camera_init+0x1a>

    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_PERIPH_IOM1);
   2c726:	2002      	movs	r0, #2
   2c728:	f00a f8e4 	bl	368f4 <am_hal_pwrctrl_periph_enable>
    if (ns_spi_interface_init(&cfg->spiConfig, cfg->spiSpeed, AM_HAL_IOM_SPI_MODE_0)) {
   2c72c:	68a1      	ldr	r1, [r4, #8]
   2c72e:	2200      	movs	r2, #0
   2c730:	4630      	mov	r0, r6
   2c732:	f014 f9cf 	bl	40ad4 <ns_spi_interface_init>
   2c736:	4605      	mov	r5, r0
   2c738:	b990      	cbnz	r0, 2c760 <ns_camera_init+0x74>
        return NS_STATUS_INIT_FAILED;
    }
    createArducamCamera(AM_BSP_IOM1_CS_CHNL); // inits camera global, other stuff
   2c73a:	4601      	mov	r1, r0
   2c73c:	4668      	mov	r0, sp
   2c73e:	f000 ff8f 	bl	2d660 <createArducamCamera>

    // Start a polling timer is needed
    if (cfg->pictureTakenCb != NULL) {
   2c742:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2c744:	b11b      	cbz	r3, 2c74e <ns_camera_init+0x62>
        // ns_lp_printf("Starting camera timer\n");
        NS_TRY(ns_timer_init(&timerCfg), "Failed to init camera timer\n");
   2c746:	480e      	ldr	r0, [pc, #56]	@ (2c780 <ns_camera_init+0x94>)
   2c748:	f7ff fea4 	bl	2c494 <ns_timer_init>
   2c74c:	b960      	cbnz	r0, 2c768 <ns_camera_init+0x7c>
    }

    begin(&camera);
   2c74e:	480d      	ldr	r0, [pc, #52]	@ (2c784 <ns_camera_init+0x98>)
   2c750:	f000 ff52 	bl	2d5f8 <begin>
    lowPowerOn(&camera);
   2c754:	480b      	ldr	r0, [pc, #44]	@ (2c784 <ns_camera_init+0x98>)
   2c756:	f000 ff6b 	bl	2d630 <lowPowerOn>
    return NS_STATUS_SUCCESS;
}
   2c75a:	4628      	mov	r0, r5
   2c75c:	b013      	add	sp, #76	@ 0x4c
   2c75e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return NS_STATUS_INIT_FAILED;
   2c760:	2504      	movs	r5, #4
}
   2c762:	4628      	mov	r0, r5
   2c764:	b013      	add	sp, #76	@ 0x4c
   2c766:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NS_TRY(ns_timer_init(&timerCfg), "Failed to init camera timer\n");
   2c768:	4807      	ldr	r0, [pc, #28]	@ (2c788 <ns_camera_init+0x9c>)
   2c76a:	f7ff fbfd 	bl	2bf68 <ns_lp_printf>
   2c76e:	f7ec ffa5 	bl	196bc <ns_core_fail_loop>
   2c772:	e7ec      	b.n	2c74e <ns_camera_init+0x62>
   2c774:	10050564 	.word	0x10050564
   2c778:	0002c619 	.word	0x0002c619
   2c77c:	10050524 	.word	0x10050524
   2c780:	1000daac 	.word	0x1000daac
   2c784:	10050568 	.word	0x10050568
   2c788:	00043ffc 	.word	0x00043ffc

0002c78c <arducam_spi_read>:

// Functions used by Arducam driver

   2c78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c790:	b085      	sub	sp, #20
   2c792:	e9dd 9a0e 	ldrd	r9, sl, [sp, #56]	@ 0x38
int arducam_spi_read(
    const void *buf, uint32_t bufLen, uint64_t reg, uint32_t regLen, uint32_t csPin) {
    uint32_t err = 0;
    uint8_t *bufPtr = (uint8_t *)buf;
    uint32_t bytesLeft = bufLen;
   2c796:	460d      	mov	r5, r1
   2c798:	b1c1      	cbz	r1, 2c7cc <arducam_spi_read+0x40>
   2c79a:	f8df b038 	ldr.w	fp, [pc, #56]	@ 2c7d4 <arducam_spi_read+0x48>
   2c79e:	4606      	mov	r6, r0
   2c7a0:	4617      	mov	r7, r2
   2c7a2:	4698      	mov	r8, r3
    uint32_t chunkSize;
   2c7a4:	2d40      	cmp	r5, #64	@ 0x40
   2c7a6:	462c      	mov	r4, r5
   2c7a8:	bf28      	it	cs
   2c7aa:	2440      	movcs	r4, #64	@ 0x40
    while (bytesLeft) {
   2c7ac:	f8db 0000 	ldr.w	r0, [fp]
   2c7b0:	4631      	mov	r1, r6
   2c7b2:	e9cd 9a02 	strd	r9, sl, [sp, #8]
   2c7b6:	e9cd 7800 	strd	r7, r8, [sp]
   2c7ba:	4622      	mov	r2, r4
   2c7bc:	f014 f9ce 	bl	40b5c <ns_spi_read>
    uint32_t bytesLeft = bufLen;
   2c7c0:	1b2d      	subs	r5, r5, r4
        chunkSize = bytesLeft > MAX_SPI_BUF_LEN ? MAX_SPI_BUF_LEN : bytesLeft;
   2c7c2:	4426      	add	r6, r4
    uint32_t bytesLeft = bufLen;
   2c7c4:	d1ee      	bne.n	2c7a4 <arducam_spi_read+0x18>
        err = ns_spi_read(spiHandle, bufPtr, chunkSize, reg, regLen, csPin);
        bufPtr += chunkSize;
        bytesLeft -= chunkSize;
    }
   2c7c6:	b005      	add	sp, #20
   2c7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t bytesLeft = bufLen;
   2c7cc:	4608      	mov	r0, r1
    }
   2c7ce:	b005      	add	sp, #20
   2c7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c7d4:	10050564 	.word	0x10050564

0002c7d8 <arducam_spi_write>:
    return err;
}

   2c7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c7dc:	b085      	sub	sp, #20
   2c7de:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	@ 0x38
int arducam_spi_write(
    const void *buf, uint32_t bufLen, uint64_t reg, uint32_t regLen, uint32_t csPin) {
    uint8_t *bufPtr = (uint8_t *)buf;
    uint32_t bytesLeft = bufLen;
   2c7e2:	b301      	cbz	r1, 2c826 <arducam_spi_write+0x4e>
   2c7e4:	f8df a04c 	ldr.w	sl, [pc, #76]	@ 2c834 <arducam_spi_write+0x5c>
   2c7e8:	4683      	mov	fp, r0
   2c7ea:	4616      	mov	r6, r2
   2c7ec:	461f      	mov	r7, r3
   2c7ee:	460d      	mov	r5, r1
   2c7f0:	e002      	b.n	2c7f8 <arducam_spi_write+0x20>
   2c7f2:	1b2d      	subs	r5, r5, r4
    uint32_t chunkSize;
    while (bytesLeft) {
        chunkSize = bytesLeft > MAX_SPI_BUF_LEN ? MAX_SPI_BUF_LEN : bytesLeft;
        uint32_t ret = ns_spi_write(spiHandle, bufPtr, chunkSize, reg, regLen, csPin);
        if (ret)
   2c7f4:	44a3      	add	fp, r4
    uint32_t bytesLeft = bufLen;
   2c7f6:	d016      	beq.n	2c826 <arducam_spi_write+0x4e>
    uint32_t chunkSize;
   2c7f8:	2d40      	cmp	r5, #64	@ 0x40
   2c7fa:	462c      	mov	r4, r5
   2c7fc:	bf28      	it	cs
   2c7fe:	2440      	movcs	r4, #64	@ 0x40
    while (bytesLeft) {
   2c800:	f8da 0000 	ldr.w	r0, [sl]
   2c804:	4622      	mov	r2, r4
   2c806:	e9cd 8902 	strd	r8, r9, [sp, #8]
   2c80a:	e9cd 6700 	strd	r6, r7, [sp]
   2c80e:	4659      	mov	r1, fp
   2c810:	f014 f9f2 	bl	40bf8 <ns_spi_write>
        chunkSize = bytesLeft > MAX_SPI_BUF_LEN ? MAX_SPI_BUF_LEN : bytesLeft;
   2c814:	2800      	cmp	r0, #0
   2c816:	d0ec      	beq.n	2c7f2 <arducam_spi_write+0x1a>
        uint32_t ret = ns_spi_write(spiHandle, bufPtr, chunkSize, reg, regLen, csPin);
   2c818:	4601      	mov	r1, r0
   2c81a:	4805      	ldr	r0, [pc, #20]	@ (2c830 <arducam_spi_write+0x58>)
   2c81c:	f7ff fba4 	bl	2bf68 <ns_lp_printf>
    uint32_t bytesLeft = bufLen;
   2c820:	1b2d      	subs	r5, r5, r4
        if (ret)
   2c822:	44a3      	add	fp, r4
    uint32_t bytesLeft = bufLen;
   2c824:	d1e8      	bne.n	2c7f8 <arducam_spi_write+0x20>
            ns_lp_printf("spi write ret %d\n", ret);
        bufPtr += chunkSize;
        bytesLeft -= chunkSize;
    }
   2c826:	2000      	movs	r0, #0
   2c828:	b005      	add	sp, #20
   2c82a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c82e:	bf00      	nop
   2c830:	0004401c 	.word	0x0004401c
   2c834:	10050564 	.word	0x10050564

0002c838 <arducam_delay_ms>:
    return 0;
}
   2c838:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
   2c83c:	fb03 f000 	mul.w	r0, r3, r0
   2c840:	f00a bf0c 	b.w	3765c <am_hal_delay_us>

0002c844 <ns_start_camera>:
    if (camera->burstFirstFlag == 0) {
        camera->burstFirstFlag = 1;
    }
    camera->receivedLength -= length;
    return length;
}
   2c844:	b510      	push	{r4, lr}

uint32_t ns_start_camera(ns_camera_config_t *cfg) {
    /**
     * @brief Start camera and take out of standby
     *
   2c846:	4c0d      	ldr	r4, [pc, #52]	@ (2c87c <ns_start_camera+0x38>)
   2c848:	4620      	mov	r0, r4
   2c84a:	f000 fef5 	bl	2d638 <lowPowerOff>
     */
   2c84e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   2c852:	f00a ff03 	bl	3765c <am_hal_delay_us>
    lowPowerOff(&camera);
   2c856:	2101      	movs	r1, #1
   2c858:	4620      	mov	r0, r4
   2c85a:	f000 fee5 	bl	2d628 <setBrightness>
    ns_delay_us(1000);
   2c85e:	2101      	movs	r1, #1
   2c860:	4620      	mov	r0, r4
   2c862:	f000 fecd 	bl	2d600 <setAutoExposure>
    setBrightness(&camera, CAM_BRIGHTNESS_LEVEL_DEFAULT);
   2c866:	2101      	movs	r1, #1
   2c868:	4620      	mov	r0, r4
   2c86a:	f000 fed1 	bl	2d610 <setAutoFocus>
    // setAutoExposure(&camera, true);
   2c86e:	2101      	movs	r1, #1
   2c870:	4620      	mov	r0, r4
   2c872:	f000 fec9 	bl	2d608 <setAutoISOSensitive>
    setAutoFocus(&camera, true);
    // setAutoISOSensitive(&camera, true);

   2c876:	2000      	movs	r0, #0
   2c878:	bd10      	pop	{r4, pc}
   2c87a:	bf00      	nop
   2c87c:	10050568 	.word	0x10050568

0002c880 <ns_stop_camera>:
    return NS_STATUS_SUCCESS;
   2c880:	b508      	push	{r3, lr}
}
uint32_t ns_stop_camera(ns_camera_config_t *cfg) {
    /**
     * @brief Stop camera and put into low-power standby mode.
     *
   2c882:	4802      	ldr	r0, [pc, #8]	@ (2c88c <ns_stop_camera+0xc>)
   2c884:	f000 fed4 	bl	2d630 <lowPowerOn>
     */
    lowPowerOn(&camera);
   2c888:	2000      	movs	r0, #0
   2c88a:	bd08      	pop	{r3, pc}
   2c88c:	10050568 	.word	0x10050568

0002c890 <ns_press_shutter_button>:
    // This version blocks...
    return takePicture(&camera, cfg->imageMode, cfg->imagePixFmt);
}

// Arducam needs to be polled to check when a capture is done.
// Instead of a tight loop, we use a timer to poll the camera.
   2c890:	b538      	push	{r3, r4, r5, lr}
// This function just starts the timer and sets state.
uint32_t ns_press_shutter_button(ns_camera_config_t *cfg) {
    ns_image_pix_fmt_e pixel_format = cfg->imagePixFmt;
    ns_image_mode_e mode = cfg->imageMode;
   2c892:	6b43      	ldr	r3, [r0, #52]	@ 0x34
// This function just starts the timer and sets state.
   2c894:	7b82      	ldrb	r2, [r0, #14]
uint32_t ns_press_shutter_button(ns_camera_config_t *cfg) {
   2c896:	7b45      	ldrb	r5, [r0, #13]
    ns_image_mode_e mode = cfg->imageMode;
   2c898:	b33b      	cbz	r3, 2c8ea <ns_press_shutter_button+0x5a>

    if (cfg->pictureTakenCb == NULL) {
        return NS_STATUS_INVALID_CONFIG;
    }
   2c89a:	4c15      	ldr	r4, [pc, #84]	@ (2c8f0 <ns_press_shutter_button+0x60>)
   2c89c:	7c23      	ldrb	r3, [r4, #16]
   2c89e:	4293      	cmp	r3, r2
   2c8a0:	d117      	bne.n	2c8d2 <ns_press_shutter_button+0x42>
    if (camera.currentPixelFormat != pixel_format) {
        camera.currentPixelFormat = pixel_format;
        // ns_lp_printf("Setting pixel format to %d\n", pixel_format);
        writeReg(&camera, NS_CAM_REG_FORMAT, pixel_format); // set the data format
        waitI2cIdle(&camera);                               // Wait I2c Idle
    }
   2c8a2:	7c63      	ldrb	r3, [r4, #17]
   2c8a4:	42ab      	cmp	r3, r5
   2c8a6:	d10a      	bne.n	2c8be <ns_press_shutter_button+0x2e>
    if (camera.currentPictureMode != mode) {
        camera.currentPictureMode = mode;
        // ns_lp_printf("Setting capture mode to %d\n", mode);
        writeReg(&camera, NS_CAM_REG_CAPTURE_RESOLUTION, NS_CAM_SET_CAPTURE_MODE | mode);
        waitI2cIdle(&camera); // Wait I2c Idle
    }
   2c8a8:	4811      	ldr	r0, [pc, #68]	@ (2c8f0 <ns_press_shutter_button+0x60>)
   2c8aa:	f000 fbe3 	bl	2d074 <cameraClearFifoFlag>

   2c8ae:	4810      	ldr	r0, [pc, #64]	@ (2c8f0 <ns_press_shutter_button+0x60>)
   2c8b0:	f000 fbda 	bl	2d068 <cameraStartCapture>
    cameraClearFifoFlag(&camera);
   2c8b4:	4b0f      	ldr	r3, [pc, #60]	@ (2c8f4 <ns_press_shutter_button+0x64>)
   2c8b6:	2201      	movs	r2, #1
   2c8b8:	701a      	strb	r2, [r3, #0]
    cameraStartCapture(&camera);
   2c8ba:	2000      	movs	r0, #0
    nsCameraPictureBeingTaken = true;
   2c8bc:	bd38      	pop	{r3, r4, r5, pc}
        camera.currentPictureMode = mode;
   2c8be:	462a      	mov	r2, r5
   2c8c0:	2121      	movs	r1, #33	@ 0x21
   2c8c2:	480b      	ldr	r0, [pc, #44]	@ (2c8f0 <ns_press_shutter_button+0x60>)

   2c8c4:	7465      	strb	r5, [r4, #17]
        camera.currentPictureMode = mode;
   2c8c6:	f000 febb 	bl	2d640 <writeReg>
        // ns_lp_printf("Setting capture mode to %d\n", mode);
   2c8ca:	4809      	ldr	r0, [pc, #36]	@ (2c8f0 <ns_press_shutter_button+0x60>)
   2c8cc:	f000 fec4 	bl	2d658 <waitI2cIdle>
   2c8d0:	e7ea      	b.n	2c8a8 <ns_press_shutter_button+0x18>
        camera.currentPixelFormat = pixel_format;
   2c8d2:	2120      	movs	r1, #32
   2c8d4:	4620      	mov	r0, r4

   2c8d6:	7422      	strb	r2, [r4, #16]
        camera.currentPixelFormat = pixel_format;
   2c8d8:	f000 feb2 	bl	2d640 <writeReg>
        // ns_lp_printf("Setting pixel format to %d\n", pixel_format);
   2c8dc:	4620      	mov	r0, r4
   2c8de:	f000 febb 	bl	2d658 <waitI2cIdle>
    }
   2c8e2:	7c63      	ldrb	r3, [r4, #17]
   2c8e4:	42ab      	cmp	r3, r5
   2c8e6:	d0df      	beq.n	2c8a8 <ns_press_shutter_button+0x18>
   2c8e8:	e7e9      	b.n	2c8be <ns_press_shutter_button+0x2e>

   2c8ea:	2003      	movs	r0, #3
    nsCameraPictureBeingTaken = true;
   2c8ec:	bd38      	pop	{r3, r4, r5, pc}
   2c8ee:	bf00      	nop
   2c8f0:	10050568 	.word	0x10050568
   2c8f4:	10050520 	.word	0x10050520

0002c8f8 <ns_start_dma_read>:
     * @brief Check if Arducam is still fetching frame
     *
     */
    return !cameraImageAvailable(&camera);
}

   2c8f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c8fc:	4c21      	ldr	r4, [pc, #132]	@ (2c984 <ns_start_dma_read+0x8c>)
static uint8_t ns_mapCameraValuesToArducamScale(int8_t in) {
    // 0 is 0, negative numbers map to positive even uints, positive map to odd
    if (in > 3) {
        in = 3;
   2c8fe:	4d22      	ldr	r5, [pc, #136]	@ (2c988 <ns_start_dma_read+0x90>)

   2c900:	b084      	sub	sp, #16
   2c902:	4680      	mov	r8, r0
   2c904:	460e      	mov	r6, r1
   2c906:	4617      	mov	r7, r2
    // 0 is 0, negative numbers map to positive even uints, positive map to odd
   2c908:	e004      	b.n	2c914 <ns_start_dma_read+0x1c>
    if (in > 3) {
   2c90a:	f00a fea7 	bl	3765c <am_hal_delay_us>
        in = 3;
   2c90e:	4628      	mov	r0, r5
   2c910:	f7ff fb2a 	bl	2bf68 <ns_lp_printf>
     *
   2c914:	4620      	mov	r0, r4
   2c916:	f000 f997 	bl	2cc48 <cameraImageAvailable>
   2c91a:	4603      	mov	r3, r0
    if (in > 3) {
   2c91c:	f242 7010 	movw	r0, #10000	@ 0x2710
    // 0 is 0, negative numbers map to positive even uints, positive map to odd
   2c920:	2b00      	cmp	r3, #0
   2c922:	d0f2      	beq.n	2c90a <ns_start_dma_read+0x12>
    } else if (in < -3) {
        in = -3;
    }

   2c924:	4817      	ldr	r0, [pc, #92]	@ (2c984 <ns_start_dma_read+0x8c>)
        return (abs(in) * 2) - 1;
    }
}

void ns_camera_adjust_settings(int8_t contrast, int8_t brightness, int8_t ev) {
    setContrast(&camera, (CAM_CONTRAST_LEVEL)ns_mapCameraValuesToArducamScale(contrast));
   2c926:	4d19      	ldr	r5, [pc, #100]	@ (2c98c <ns_start_dma_read+0x94>)

   2c928:	f000 fbaa 	bl	2d080 <cameraReadFifoLength>
    setBrightness(&camera, (CAM_BRIGHTNESS_LEVEL) ns_mapCameraValuesToArducamScale(brightness));
    setEV(&camera, (CAM_EV_LEVEL) ns_mapCameraValuesToArducamScale(ev));
}

uint32_t ns_start_dma_read(
   2c92c:	6821      	ldr	r1, [r4, #0]
        return 0;
   2c92e:	f898 200e 	ldrb.w	r2, [r8, #14]

   2c932:	4c17      	ldr	r4, [pc, #92]	@ (2c990 <ns_start_dma_read+0x98>)
uint32_t ns_start_dma_read(
   2c934:	9103      	str	r1, [sp, #12]

   2c936:	4603      	mov	r3, r0
   2c938:	6023      	str	r3, [r4, #0]
        return 0;
   2c93a:	f1a2 0201 	sub.w	r2, r2, #1
void ns_camera_adjust_settings(int8_t contrast, int8_t brightness, int8_t ev) {
   2c93e:	4b15      	ldr	r3, [pc, #84]	@ (2c994 <ns_start_dma_read+0x9c>)
uint32_t ns_start_dma_read(
   2c940:	4915      	ldr	r1, [pc, #84]	@ (2c998 <ns_start_dma_read+0xa0>)
void ns_camera_adjust_settings(int8_t contrast, int8_t brightness, int8_t ev) {
   2c942:	601e      	str	r6, [r3, #0]
        return 0;
   2c944:	fab2 f282 	clz	r2, r2
}
   2c948:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
    setBrightness(&camera, (CAM_BRIGHTNESS_LEVEL) ns_mapCameraValuesToArducamScale(brightness));
   2c94c:	4b13      	ldr	r3, [pc, #76]	@ (2c99c <ns_start_dma_read+0xa4>)
        return 0;
   2c94e:	ea4f 1252 	mov.w	r2, r2, lsr #5
   2c952:	603a      	str	r2, [r7, #0]
}
   2c954:	4602      	mov	r2, r0
   2c956:	bf28      	it	cs
   2c958:	f44f 6200 	movcs.w	r2, #2048	@ 0x800
    setBrightness(&camera, (CAM_BRIGHTNESS_LEVEL) ns_mapCameraValuesToArducamScale(brightness));
   2c95c:	601a      	str	r2, [r3, #0]

   2c95e:	4f10      	ldr	r7, [pc, #64]	@ (2c9a0 <ns_start_dma_read+0xa8>)
uint32_t ns_start_dma_read(
   2c960:	6808      	ldr	r0, [r1, #0]
   2c962:	2301      	movs	r3, #1
   2c964:	9302      	str	r3, [sp, #8]

   2c966:	2300      	movs	r3, #0
   2c968:	703b      	strb	r3, [r7, #0]
uint32_t ns_start_dma_read(
   2c96a:	4631      	mov	r1, r6
   2c96c:	2700      	movs	r7, #0
   2c96e:	263c      	movs	r6, #60	@ 0x3c
    setContrast(&camera, (CAM_CONTRAST_LEVEL)ns_mapCameraValuesToArducamScale(contrast));
   2c970:	602b      	str	r3, [r5, #0]
uint32_t ns_start_dma_read(
   2c972:	e9cd 6700 	strd	r6, r7, [sp]
   2c976:	f014 f911 	bl	40b9c <ns_spi_read_dma>
    ns_camera_config_t *cfg, uint8_t *camBuf, uint32_t *buffer_offset, uint32_t bufLen) {
    // Wait for capture to complete
    while (ns_is_camera_capturing()) {
        ns_delay_us(10000);
   2c97a:	6820      	ldr	r0, [r4, #0]
   2c97c:	b004      	add	sp, #16
   2c97e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2c982:	bf00      	nop
   2c984:	10050568 	.word	0x10050568
   2c988:	00044030 	.word	0x00044030
   2c98c:	10050514 	.word	0x10050514
   2c990:	1005051c 	.word	0x1005051c
   2c994:	10050510 	.word	0x10050510
   2c998:	10050564 	.word	0x10050564
   2c99c:	10050518 	.word	0x10050518
   2c9a0:	1005050c 	.word	0x1005050c

0002c9a4 <camera_decode_image>:
        }
        // Out of width bounds
        if (jpegCtx.MCUx < skip_start_x_mcus || jpegCtx.MCUx >= skip_end_x_mcu_index) {
            continue;
        }

   2c9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        pImg = jpegCtx.pImage;

        int relMcuX = jpegCtx.MCUx - skip_start_x_mcus;
        int relMcuY = jpegCtx.MCUy - skip_start_y_mcus;

        int xOrigin = relMcuX * jpegCtx.imgInfo.m_MCUWidth;
   2c9a8:	4d96      	ldr	r5, [pc, #600]	@ (2cc04 <camera_decode_image+0x260>)

   2c9aa:	b087      	sub	sp, #28
   2c9ac:	4614      	mov	r4, r2
        int xOrigin = relMcuX * jpegCtx.imgInfo.m_MCUWidth;
   2c9ae:	460a      	mov	r2, r1
   2c9b0:	4601      	mov	r1, r0
   2c9b2:	4628      	mov	r0, r5

   2c9b4:	461f      	mov	r7, r3
   2c9b6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
   2c9b8:	f8dd a044 	ldr.w	sl, [sp, #68]	@ 0x44
        int xOrigin = relMcuX * jpegCtx.imgInfo.m_MCUWidth;
   2c9bc:	f001 f850 	bl	2da60 <jpeg_decoder_init>
                int currentX = xOrigin + mcuCol;
                color = *pImg++;
                if (scaleFactor != 1 &&
                    (currentY % scaleFactor != 0 || currentX % scaleFactor != 0)) {
                    continue;
                }
   2c9c0:	e9d5 2305 	ldrd	r2, r3, [r5, #20]
        for (int mcuRow = 0; mcuRow < jpegCtx.imgInfo.m_MCUHeight; mcuRow++) {
   2c9c4:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
        // ns_lp_printf("Writing to imgBuf at 0x%x\n", imgBuf);
   2c9c8:	9702      	str	r7, [sp, #8]
   2c9ca:	fb07 f70a 	mul.w	r7, r7, sl
   2c9ce:	fbb7 f0f0 	udiv	r0, r7, r0
                int index = (currentY / scaleFactor) * (imgWidth / 1) + currentX / scaleFactor;
                imgBuf[index * 2 + 1] = (color & 0xFF00) >> 8;
                imgBuf[index * 2 + 0] = (color & 0x00FF);
            }
   2c9d2:	9f02      	ldr	r7, [sp, #8]
            for (int mcuCol = 0; mcuCol < jpegCtx.imgInfo.m_MCUWidth; mcuCol++) {
   2c9d4:	1a12      	subs	r2, r2, r0
                color = *pImg++;
   2c9d6:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
                    (currentY % scaleFactor != 0 || currentX % scaleFactor != 0)) {
   2c9da:	eb00 0062 	add.w	r0, r0, r2, asr #1
                color = *pImg++;
   2c9de:	ea4f 0b62 	mov.w	fp, r2, asr #1
        for (int mcuRow = 0; mcuRow < jpegCtx.imgInfo.m_MCUHeight; mcuRow++) {
   2c9e2:	fb06 f20a 	mul.w	r2, r6, sl
            }
   2c9e6:	fb07 f606 	mul.w	r6, r7, r6
        for (int mcuRow = 0; mcuRow < jpegCtx.imgInfo.m_MCUHeight; mcuRow++) {
   2c9ea:	fbb2 f1f1 	udiv	r1, r2, r1
            }
   2c9ee:	eb06 0246 	add.w	r2, r6, r6, lsl #1
                }
   2c9f2:	1a5b      	subs	r3, r3, r1
                int index = (currentY / scaleFactor) * (imgWidth / 1) + currentX / scaleFactor;
   2c9f4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
        }
    }
    return 0;
}
   2c9f8:	2a00      	cmp	r2, #0
                    (currentY % scaleFactor != 0 || currentX % scaleFactor != 0)) {
   2c9fa:	9001      	str	r0, [sp, #4]
                imgBuf[index * 2 + 1] = (color & 0xFF00) >> 8;
   2c9fc:	eb01 0863 	add.w	r8, r1, r3, asr #1
                int index = (currentY / scaleFactor) * (imgWidth / 1) + currentX / scaleFactor;
   2ca00:	ea4f 0963 	mov.w	r9, r3, asr #1
}
   2ca04:	dd03      	ble.n	2ca0e <camera_decode_image+0x6a>
   2ca06:	2100      	movs	r1, #0
   2ca08:	4620      	mov	r0, r4
   2ca0a:	f7fa fa67 	bl	26edc <memset>
   2ca0e:	f1ba 0f01 	cmp.w	sl, #1
   2ca12:	d057      	beq.n	2cac4 <camera_decode_image+0x120>
   2ca14:	487b      	ldr	r0, [pc, #492]	@ (2cc04 <camera_decode_image+0x260>)
   2ca16:	f000 fe63 	bl	2d6e0 <jpeg_decoder_read>
   2ca1a:	2800      	cmp	r0, #0
   2ca1c:	d04e      	beq.n	2cabc <camera_decode_image+0x118>
   2ca1e:	686b      	ldr	r3, [r5, #4]
   2ca20:	454b      	cmp	r3, r9
   2ca22:	dbf7      	blt.n	2ca14 <camera_decode_image+0x70>
   2ca24:	4543      	cmp	r3, r8
   2ca26:	daf5      	bge.n	2ca14 <camera_decode_image+0x70>
   2ca28:	682a      	ldr	r2, [r5, #0]
   2ca2a:	455a      	cmp	r2, fp
   2ca2c:	dbf2      	blt.n	2ca14 <camera_decode_image+0x70>
   2ca2e:	9901      	ldr	r1, [sp, #4]
   2ca30:	428a      	cmp	r2, r1
   2ca32:	daef      	bge.n	2ca14 <camera_decode_image+0x70>
   2ca34:	6a28      	ldr	r0, [r5, #32]
   2ca36:	eba2 020b 	sub.w	r2, r2, fp
   2ca3a:	fb00 fc02 	mul.w	ip, r0, r2
   2ca3e:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
   2ca40:	eba3 0309 	sub.w	r3, r3, r9
   2ca44:	fb02 f303 	mul.w	r3, r2, r3
   2ca48:	2a00      	cmp	r2, #0
   2ca4a:	9300      	str	r3, [sp, #0]
   2ca4c:	dde2      	ble.n	2ca14 <camera_decode_image+0x70>
   2ca4e:	9b02      	ldr	r3, [sp, #8]
   2ca50:	496d      	ldr	r1, [pc, #436]	@ (2cc08 <camera_decode_image+0x264>)
   2ca52:	2b01      	cmp	r3, #1
   2ca54:	d17a      	bne.n	2cb4c <camera_decode_image+0x1a8>
   2ca56:	e9cd b903 	strd	fp, r9, [sp, #12]
   2ca5a:	2700      	movs	r7, #0
   2ca5c:	f8cd 8014 	str.w	r8, [sp, #20]
   2ca60:	2800      	cmp	r0, #0
   2ca62:	dd22      	ble.n	2caaa <camera_decode_image+0x106>
   2ca64:	9b00      	ldr	r3, [sp, #0]
   2ca66:	19de      	adds	r6, r3, r7
   2ca68:	2300      	movs	r3, #0
   2ca6a:	fbb6 fbfa 	udiv	fp, r6, sl
   2ca6e:	fb0a 661b 	mls	r6, sl, fp, r6
   2ca72:	eb03 020c 	add.w	r2, r3, ip
   2ca76:	3102      	adds	r1, #2
   2ca78:	3301      	adds	r3, #1
   2ca7a:	b986      	cbnz	r6, 2ca9e <camera_decode_image+0xfa>
   2ca7c:	fbb2 f8fa 	udiv	r8, r2, sl
   2ca80:	eb0b 0e08 	add.w	lr, fp, r8
   2ca84:	fb0a 2218 	mls	r2, sl, r8, r2
   2ca88:	eb04 094e 	add.w	r9, r4, lr, lsl #1
   2ca8c:	b93a      	cbnz	r2, 2ca9e <camera_decode_image+0xfa>
   2ca8e:	f831 2c02 	ldrh.w	r2, [r1, #-2]
   2ca92:	0a10      	lsrs	r0, r2, #8
   2ca94:	f889 0001 	strb.w	r0, [r9, #1]
   2ca98:	f804 201e 	strb.w	r2, [r4, lr, lsl #1]
   2ca9c:	6a28      	ldr	r0, [r5, #32]
   2ca9e:	4298      	cmp	r0, r3
   2caa0:	dce7      	bgt.n	2ca72 <camera_decode_image+0xce>
   2caa2:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
   2caa4:	3701      	adds	r7, #1
   2caa6:	42bb      	cmp	r3, r7
   2caa8:	dcda      	bgt.n	2ca60 <camera_decode_image+0xbc>
   2caaa:	e9dd b903 	ldrd	fp, r9, [sp, #12]
   2caae:	f8dd 8014 	ldr.w	r8, [sp, #20]
   2cab2:	4854      	ldr	r0, [pc, #336]	@ (2cc04 <camera_decode_image+0x260>)
   2cab4:	f000 fe14 	bl	2d6e0 <jpeg_decoder_read>
   2cab8:	2800      	cmp	r0, #0
   2caba:	d1b0      	bne.n	2ca1e <camera_decode_image+0x7a>
   2cabc:	2000      	movs	r0, #0
   2cabe:	b007      	add	sp, #28
   2cac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cac4:	4e4f      	ldr	r6, [pc, #316]	@ (2cc04 <camera_decode_image+0x260>)
   2cac6:	4630      	mov	r0, r6
   2cac8:	f000 fe0a 	bl	2d6e0 <jpeg_decoder_read>
   2cacc:	2800      	cmp	r0, #0
   2cace:	d0f5      	beq.n	2cabc <camera_decode_image+0x118>
   2cad0:	686b      	ldr	r3, [r5, #4]
   2cad2:	4599      	cmp	r9, r3
   2cad4:	dcf7      	bgt.n	2cac6 <camera_decode_image+0x122>
   2cad6:	4598      	cmp	r8, r3
   2cad8:	ddf5      	ble.n	2cac6 <camera_decode_image+0x122>
   2cada:	682a      	ldr	r2, [r5, #0]
   2cadc:	4593      	cmp	fp, r2
   2cade:	dcf2      	bgt.n	2cac6 <camera_decode_image+0x122>
   2cae0:	9901      	ldr	r1, [sp, #4]
   2cae2:	4291      	cmp	r1, r2
   2cae4:	ddef      	ble.n	2cac6 <camera_decode_image+0x122>
   2cae6:	6a2f      	ldr	r7, [r5, #32]
   2cae8:	eba2 020b 	sub.w	r2, r2, fp
   2caec:	fb07 fe02 	mul.w	lr, r7, r2
   2caf0:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
   2caf2:	eba3 0309 	sub.w	r3, r3, r9
   2caf6:	fb02 f303 	mul.w	r3, r2, r3
   2cafa:	2a00      	cmp	r2, #0
   2cafc:	9300      	str	r3, [sp, #0]
   2cafe:	dde2      	ble.n	2cac6 <camera_decode_image+0x122>
   2cb00:	9b02      	ldr	r3, [sp, #8]
   2cb02:	4841      	ldr	r0, [pc, #260]	@ (2cc08 <camera_decode_image+0x264>)
   2cb04:	2b01      	cmp	r3, #1
   2cb06:	f04f 0100 	mov.w	r1, #0
   2cb0a:	d153      	bne.n	2cbb4 <camera_decode_image+0x210>
   2cb0c:	f8cd b00c 	str.w	fp, [sp, #12]
   2cb10:	2f00      	cmp	r7, #0
   2cb12:	dd18      	ble.n	2cb46 <camera_decode_image+0x1a2>
   2cb14:	9b00      	ldr	r3, [sp, #0]
   2cb16:	2200      	movs	r2, #0
   2cb18:	eb01 0a03 	add.w	sl, r1, r3
   2cb1c:	eb02 030e 	add.w	r3, r2, lr
   2cb20:	f830 7b02 	ldrh.w	r7, [r0], #2
   2cb24:	4453      	add	r3, sl
   2cb26:	eb04 0c43 	add.w	ip, r4, r3, lsl #1
   2cb2a:	ea4f 2b17 	mov.w	fp, r7, lsr #8
   2cb2e:	f88c b001 	strb.w	fp, [ip, #1]
   2cb32:	f804 7013 	strb.w	r7, [r4, r3, lsl #1]
   2cb36:	6a2f      	ldr	r7, [r5, #32]
   2cb38:	3201      	adds	r2, #1
   2cb3a:	4297      	cmp	r7, r2
   2cb3c:	dcee      	bgt.n	2cb1c <camera_decode_image+0x178>
   2cb3e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
   2cb40:	3101      	adds	r1, #1
   2cb42:	428b      	cmp	r3, r1
   2cb44:	dce4      	bgt.n	2cb10 <camera_decode_image+0x16c>
   2cb46:	f8dd b00c 	ldr.w	fp, [sp, #12]
   2cb4a:	e7bc      	b.n	2cac6 <camera_decode_image+0x122>
   2cb4c:	2600      	movs	r6, #0
   2cb4e:	e9cd b903 	strd	fp, r9, [sp, #12]
   2cb52:	f8cd 8014 	str.w	r8, [sp, #20]
   2cb56:	4637      	mov	r7, r6
   2cb58:	4699      	mov	r9, r3
   2cb5a:	2800      	cmp	r0, #0
   2cb5c:	dda5      	ble.n	2caaa <camera_decode_image+0x106>
   2cb5e:	9b00      	ldr	r3, [sp, #0]
   2cb60:	19de      	adds	r6, r3, r7
   2cb62:	2300      	movs	r3, #0
   2cb64:	fbb6 f8fa 	udiv	r8, r6, sl
   2cb68:	fb0a 6618 	mls	r6, sl, r8, r6
   2cb6c:	fb09 f808 	mul.w	r8, r9, r8
   2cb70:	eb03 020c 	add.w	r2, r3, ip
   2cb74:	3102      	adds	r1, #2
   2cb76:	3301      	adds	r3, #1
   2cb78:	b98e      	cbnz	r6, 2cb9e <camera_decode_image+0x1fa>
   2cb7a:	fbb2 fbfa 	udiv	fp, r2, sl
   2cb7e:	fb0a 221b 	mls	r2, sl, fp, r2
   2cb82:	eb08 0e0b 	add.w	lr, r8, fp
   2cb86:	b952      	cbnz	r2, 2cb9e <camera_decode_image+0x1fa>
   2cb88:	f831 2c02 	ldrh.w	r2, [r1, #-2]
   2cb8c:	eb04 004e 	add.w	r0, r4, lr, lsl #1
   2cb90:	ea4f 2b12 	mov.w	fp, r2, lsr #8
   2cb94:	f880 b001 	strb.w	fp, [r0, #1]
   2cb98:	f804 201e 	strb.w	r2, [r4, lr, lsl #1]
   2cb9c:	6a28      	ldr	r0, [r5, #32]
   2cb9e:	4283      	cmp	r3, r0
   2cba0:	dbe6      	blt.n	2cb70 <camera_decode_image+0x1cc>
   2cba2:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
   2cba4:	3701      	adds	r7, #1
   2cba6:	429f      	cmp	r7, r3
   2cba8:	dbd7      	blt.n	2cb5a <camera_decode_image+0x1b6>
   2cbaa:	e9dd b903 	ldrd	fp, r9, [sp, #12]
   2cbae:	f8dd 8014 	ldr.w	r8, [sp, #20]
   2cbb2:	e77e      	b.n	2cab2 <camera_decode_image+0x10e>
   2cbb4:	e9cd 1b03 	strd	r1, fp, [sp, #12]
   2cbb8:	469a      	mov	sl, r3
   2cbba:	2f00      	cmp	r7, #0
   2cbbc:	dd1e      	ble.n	2cbfc <camera_decode_image+0x258>
   2cbbe:	9a00      	ldr	r2, [sp, #0]
   2cbc0:	9b03      	ldr	r3, [sp, #12]
   2cbc2:	eb03 0b02 	add.w	fp, r3, r2
   2cbc6:	fb0a fb0b 	mul.w	fp, sl, fp
   2cbca:	2200      	movs	r2, #0
   2cbcc:	eb0e 0302 	add.w	r3, lr, r2
   2cbd0:	f830 1b02 	ldrh.w	r1, [r0], #2
   2cbd4:	445b      	add	r3, fp
   2cbd6:	eb04 0743 	add.w	r7, r4, r3, lsl #1
   2cbda:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   2cbde:	f887 c001 	strb.w	ip, [r7, #1]
   2cbe2:	f804 1013 	strb.w	r1, [r4, r3, lsl #1]
   2cbe6:	6a2f      	ldr	r7, [r5, #32]
   2cbe8:	3201      	adds	r2, #1
   2cbea:	42ba      	cmp	r2, r7
   2cbec:	dbee      	blt.n	2cbcc <camera_decode_image+0x228>
   2cbee:	9b03      	ldr	r3, [sp, #12]
   2cbf0:	3301      	adds	r3, #1
   2cbf2:	461a      	mov	r2, r3
   2cbf4:	9303      	str	r3, [sp, #12]
   2cbf6:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
   2cbf8:	429a      	cmp	r2, r3
   2cbfa:	dbde      	blt.n	2cbba <camera_decode_image+0x216>
   2cbfc:	f8dd b010 	ldr.w	fp, [sp, #16]
   2cc00:	e761      	b.n	2cac6 <camera_decode_image+0x122>
   2cc02:	bf00      	nop
   2cc04:	100505b0 	.word	0x100505b0
   2cc08:	10050604 	.word	0x10050604

0002cc0c <cameraSetCapture>:
    return camera->arducamCameraOp->busWrite(camera, address, value);
}

void startCapture(ArducamCamera *camera) { camera->arducamCameraOp->startCapture(camera); }
void clearFifoFlag(ArducamCamera *camera) { camera->arducamCameraOp->clearFifoFlag(camera); }
uint32_t readFifoLength(ArducamCamera *camera) {
   2cc0c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
void cameraSetCapture(ArducamCamera *camera) {
   2cc0e:	b510      	push	{r4, lr}
   2cc10:	4604      	mov	r4, r0
uint32_t readFifoLength(ArducamCamera *camera) {
   2cc12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
   2cc16:	4798      	blx	r3
void clearFifoFlag(ArducamCamera *camera) { camera->arducamCameraOp->clearFifoFlag(camera); }
   2cc18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cc1a:	4620      	mov	r0, r4
   2cc1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
   2cc20:	4798      	blx	r3
    return camera->arducamCameraOp->readFifoLength(camera);
}
uint8_t getBit(ArducamCamera *camera, uint8_t addr, uint8_t bit) {
    return camera->arducamCameraOp->getBit(camera, addr, bit);
}
   2cc22:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cc24:	2204      	movs	r2, #4
   2cc26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
   2cc2a:	2144      	movs	r1, #68	@ 0x44
   2cc2c:	4620      	mov	r0, r4
   2cc2e:	4798      	blx	r3
    while (getBit(camera, ARDUCHIP_TRIG, CAP_DONE_MASK) == 0)
   2cc30:	2800      	cmp	r0, #0
   2cc32:	d0f6      	beq.n	2cc22 <cameraSetCapture+0x16>
}
   2cc34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cc36:	4620      	mov	r0, r4
   2cc38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
   2cc3c:	4798      	blx	r3
    camera->burstFirstFlag = 0;
   2cc3e:	2300      	movs	r3, #0
   2cc40:	73a3      	strb	r3, [r4, #14]
    camera->totalLength = camera->receivedLength;
   2cc42:	e9c4 0001 	strd	r0, r0, [r4, #4]
}
   2cc46:	bd10      	pop	{r4, pc}

0002cc48 <cameraImageAvailable>:
uint32_t cameraImageAvailable(ArducamCamera *camera) { return camera->receivedLength; }
   2cc48:	6880      	ldr	r0, [r0, #8]
   2cc4a:	4770      	bx	lr

0002cc4c <cameraSetAutoFocus>:
}
   2cc4c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
CamStatus cameraSetAutoFocus(ArducamCamera *camera, uint8_t val) {
   2cc4e:	b510      	push	{r4, lr}
   2cc50:	4604      	mov	r4, r0
   2cc52:	460a      	mov	r2, r1
}
   2cc54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2cc56:	2129      	movs	r1, #41	@ 0x29
   2cc58:	4798      	blx	r3
void setFifoBurst(ArducamCamera *camera) { camera->arducamCameraOp->setFifoBurst(camera); }
void setCapture(ArducamCamera *camera) { camera->arducamCameraOp->setCapture(camera); }
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }

   2cc5a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cc5c:	4620      	mov	r0, r4
   2cc5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2cc62:	4798      	blx	r3
}
   2cc64:	2000      	movs	r0, #0
   2cc66:	bd10      	pop	{r4, pc}

0002cc68 <cameraSetManualFocus>:
CamStatus cameraSetManualFocus(ArducamCamera *camera, uint16_t val) {
   2cc68:	b538      	push	{r3, r4, r5, lr}
}
   2cc6a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
CamStatus cameraSetManualFocus(ArducamCamera *camera, uint16_t val) {
   2cc6c:	4604      	mov	r4, r0
   2cc6e:	460d      	mov	r5, r1
}
   2cc70:	2236      	movs	r2, #54	@ 0x36
   2cc72:	210b      	movs	r1, #11
   2cc74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2cc76:	4798      	blx	r3

   2cc78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cc7a:	4620      	mov	r0, r4
   2cc7c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2cc80:	4798      	blx	r3
}
   2cc82:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cc84:	2203      	movs	r2, #3
   2cc86:	210c      	movs	r1, #12
   2cc88:	4620      	mov	r0, r4
   2cc8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2cc8c:	4798      	blx	r3

   2cc8e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cc90:	4620      	mov	r0, r4
   2cc92:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2cc96:	4798      	blx	r3
}
   2cc98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cc9a:	f3c5 1205 	ubfx	r2, r5, #4, #6
   2cc9e:	210d      	movs	r1, #13
   2cca0:	4620      	mov	r0, r4
   2cca2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2cca4:	4798      	blx	r3

   2cca6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cca8:	4620      	mov	r0, r4
   2ccaa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2ccae:	4798      	blx	r3
}
   2ccb0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2ccb2:	2236      	movs	r2, #54	@ 0x36
   2ccb4:	210b      	movs	r1, #11
   2ccb6:	4620      	mov	r0, r4
   2ccb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2ccba:	4798      	blx	r3

   2ccbc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2ccbe:	4620      	mov	r0, r4
   2ccc0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2ccc4:	4798      	blx	r3
}
   2ccc6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2ccc8:	2202      	movs	r2, #2
   2ccca:	210c      	movs	r1, #12
   2cccc:	4620      	mov	r0, r4
   2ccce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2ccd0:	4798      	blx	r3

   2ccd2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2ccd4:	4620      	mov	r0, r4
   2ccd6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2ccda:	4798      	blx	r3
}
   2ccdc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
    uint8_t code_3_0 = (val << 4) & 0xF0;
   2ccde:	012a      	lsls	r2, r5, #4
}
   2cce0:	210d      	movs	r1, #13
   2cce2:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
   2cce6:	4620      	mov	r0, r4
   2cce8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2ccea:	4798      	blx	r3

   2ccec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2ccee:	4620      	mov	r0, r4
   2ccf0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2ccf4:	4798      	blx	r3
}
   2ccf6:	2000      	movs	r0, #0
   2ccf8:	bd38      	pop	{r3, r4, r5, pc}
   2ccfa:	bf00      	nop

0002ccfc <cameraTakePicture>:
cameraTakePicture(ArducamCamera *camera, CAM_IMAGE_MODE mode, CAM_IMAGE_PIX_FMT pixel_format) {
   2ccfc:	b538      	push	{r3, r4, r5, lr}
   2ccfe:	460d      	mov	r5, r1
    if (camera->currentPixelFormat != pixel_format) {
   2cd00:	7c01      	ldrb	r1, [r0, #16]
   2cd02:	4291      	cmp	r1, r2
cameraTakePicture(ArducamCamera *camera, CAM_IMAGE_MODE mode, CAM_IMAGE_PIX_FMT pixel_format) {
   2cd04:	4604      	mov	r4, r0
    if (camera->currentPixelFormat != pixel_format) {
   2cd06:	d009      	beq.n	2cd1c <cameraTakePicture+0x20>
        camera->currentPixelFormat = pixel_format;
   2cd08:	7422      	strb	r2, [r4, #16]
}
   2cd0a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2cd0c:	2120      	movs	r1, #32
   2cd0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2cd10:	4798      	blx	r3

   2cd12:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cd14:	4620      	mov	r0, r4
   2cd16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2cd1a:	4798      	blx	r3
    if (camera->currentPictureMode != mode) {
   2cd1c:	7c63      	ldrb	r3, [r4, #17]
   2cd1e:	42ab      	cmp	r3, r5
   2cd20:	d00b      	beq.n	2cd3a <cameraTakePicture+0x3e>
}
   2cd22:	6b63      	ldr	r3, [r4, #52]	@ 0x34
        camera->currentPictureMode = mode;
   2cd24:	7465      	strb	r5, [r4, #17]
}
   2cd26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2cd28:	4620      	mov	r0, r4
   2cd2a:	462a      	mov	r2, r5
   2cd2c:	2121      	movs	r1, #33	@ 0x21
   2cd2e:	4798      	blx	r3

   2cd30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cd32:	4620      	mov	r0, r4
   2cd34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2cd38:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2cd3a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cd3c:	4620      	mov	r0, r4
   2cd3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
   2cd42:	4798      	blx	r3
}
   2cd44:	2000      	movs	r0, #0
   2cd46:	bd38      	pop	{r3, r4, r5, pc}

0002cd48 <cameratakeMultiPictures>:
    ArducamCamera *camera, CAM_IMAGE_MODE mode, CAM_IMAGE_PIX_FMT pixel_format, uint8_t num) {
   2cd48:	b570      	push	{r4, r5, r6, lr}
    if (camera->currentPixelFormat != pixel_format) {
   2cd4a:	f890 c010 	ldrb.w	ip, [r0, #16]
   2cd4e:	4594      	cmp	ip, r2
    ArducamCamera *camera, CAM_IMAGE_MODE mode, CAM_IMAGE_PIX_FMT pixel_format, uint8_t num) {
   2cd50:	4604      	mov	r4, r0
   2cd52:	460d      	mov	r5, r1
   2cd54:	461e      	mov	r6, r3
    if (camera->currentPixelFormat != pixel_format) {
   2cd56:	d009      	beq.n	2cd6c <cameratakeMultiPictures+0x24>
}
   2cd58:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2cd5a:	2120      	movs	r1, #32
   2cd5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
        camera->currentPixelFormat = pixel_format;
   2cd5e:	7422      	strb	r2, [r4, #16]
}
   2cd60:	4798      	blx	r3

   2cd62:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cd64:	4620      	mov	r0, r4
   2cd66:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2cd6a:	4798      	blx	r3
    if (camera->currentPictureMode != mode) {
   2cd6c:	7c61      	ldrb	r1, [r4, #17]
   2cd6e:	42a9      	cmp	r1, r5
   2cd70:	d00b      	beq.n	2cd8a <cameratakeMultiPictures+0x42>
}
   2cd72:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cd74:	4620      	mov	r0, r4
   2cd76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
        camera->currentPictureMode = mode;
   2cd78:	7465      	strb	r5, [r4, #17]
}
   2cd7a:	462a      	mov	r2, r5
   2cd7c:	2121      	movs	r1, #33	@ 0x21
   2cd7e:	4798      	blx	r3

   2cd80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cd82:	4620      	mov	r0, r4
   2cd84:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2cd88:	4798      	blx	r3
}
   2cd8a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
   2cd8c:	4632      	mov	r2, r6
   2cd8e:	6f4b      	ldr	r3, [r1, #116]	@ 0x74
   2cd90:	4620      	mov	r0, r4
   2cd92:	2101      	movs	r1, #1
   2cd94:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2cd96:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cd98:	4620      	mov	r0, r4
   2cd9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
   2cd9e:	4798      	blx	r3
}
   2cda0:	2000      	movs	r0, #0
   2cda2:	bd70      	pop	{r4, r5, r6, pc}

0002cda4 <cameraRegisterCallback>:
    camera->callBackFunction = function;
   2cda4:	6381      	str	r1, [r0, #56]	@ 0x38
    camera->blockSize = size;
   2cda6:	7302      	strb	r2, [r0, #12]
    camera->handle = handle;
   2cda8:	63c3      	str	r3, [r0, #60]	@ 0x3c
}
   2cdaa:	4770      	bx	lr

0002cdac <cameraStartPreview>:
CamStatus cameraStartPreview(ArducamCamera *camera, CAM_VIDEO_MODE mode) {
   2cdac:	b538      	push	{r3, r4, r5, lr}
    if (!camera->callBackFunction) {
   2cdae:	6b83      	ldr	r3, [r0, #56]	@ 0x38
    camera->previewMode = TRUE;
   2cdb0:	2201      	movs	r2, #1
   2cdb2:	73c2      	strb	r2, [r0, #15]
    if (!camera->callBackFunction) {
   2cdb4:	b1eb      	cbz	r3, 2cdf2 <cameraStartPreview+0x46>
}
   2cdb6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2cdb8:	4604      	mov	r4, r0
   2cdba:	460d      	mov	r5, r1
   2cdbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2cdbe:	2120      	movs	r1, #32
   2cdc0:	4798      	blx	r3

   2cdc2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cdc4:	4620      	mov	r0, r4
   2cdc6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2cdca:	4798      	blx	r3
}
   2cdcc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cdce:	2121      	movs	r1, #33	@ 0x21
   2cdd0:	f045 0280 	orr.w	r2, r5, #128	@ 0x80
   2cdd4:	4620      	mov	r0, r4
   2cdd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2cdd8:	4798      	blx	r3

   2cdda:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cddc:	4620      	mov	r0, r4
   2cdde:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2cde2:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2cde4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cde6:	4620      	mov	r0, r4
   2cde8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
   2cdec:	4798      	blx	r3
    return CAM_ERR_SUCCESS;
   2cdee:	2000      	movs	r0, #0
}
   2cdf0:	bd38      	pop	{r3, r4, r5, pc}
        return CAM_ERR_NO_CALLBACK;
   2cdf2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
   2cdf6:	bd38      	pop	{r3, r4, r5, pc}

0002cdf8 <cameraStopPreview>:
CamStatus cameraStopPreview(ArducamCamera *camera) {
   2cdf8:	b538      	push	{r3, r4, r5, lr}
    if (camera->previewMode == TRUE && camera->handle != 0) {
   2cdfa:	7bc3      	ldrb	r3, [r0, #15]
   2cdfc:	2b01      	cmp	r3, #1
CamStatus cameraStopPreview(ArducamCamera *camera) {
   2cdfe:	4604      	mov	r4, r0
    if (camera->previewMode == TRUE && camera->handle != 0) {
   2ce00:	d014      	beq.n	2ce2c <cameraStopPreview+0x34>
    camera->currentPictureMode = CAM_IMAGE_MODE_QVGA;
   2ce02:	2201      	movs	r2, #1
}
   2ce04:	6b63      	ldr	r3, [r4, #52]	@ 0x34
    camera->currentPictureMode = CAM_IMAGE_MODE_QVGA;
   2ce06:	7462      	strb	r2, [r4, #17]
    camera->previewMode = FALSE;
   2ce08:	f44f 7180 	mov.w	r1, #256	@ 0x100
   2ce0c:	f8a4 100f 	strh.w	r1, [r4, #15]
    camera->receivedLength = 0;
   2ce10:	2500      	movs	r5, #0
}
   2ce12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2ce14:	2120      	movs	r1, #32
   2ce16:	4620      	mov	r0, r4
    camera->totalLength = 0;
   2ce18:	e9c4 5501 	strd	r5, r5, [r4, #4]
}
   2ce1c:	4798      	blx	r3

   2ce1e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2ce20:	4620      	mov	r0, r4
   2ce22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2ce26:	4798      	blx	r3
}
   2ce28:	4628      	mov	r0, r5
   2ce2a:	bd38      	pop	{r3, r4, r5, pc}
    if (camera->previewMode == TRUE && camera->handle != 0) {
   2ce2c:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
   2ce2e:	2b00      	cmp	r3, #0
   2ce30:	d0e7      	beq.n	2ce02 <cameraStopPreview+0xa>
        camera->handle();
   2ce32:	4798      	blx	r3
   2ce34:	e7e5      	b.n	2ce02 <cameraStopPreview+0xa>
   2ce36:	bf00      	nop

0002ce38 <cameraSetImageQuality>:
}
   2ce38:	6b43      	ldr	r3, [r0, #52]	@ 0x34
CamStatus cameraSetImageQuality(ArducamCamera *camera, IMAGE_QUALITY qualtiy) {
   2ce3a:	b510      	push	{r4, lr}
   2ce3c:	4604      	mov	r4, r0
   2ce3e:	460a      	mov	r2, r1
}
   2ce40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2ce42:	212a      	movs	r1, #42	@ 0x2a
   2ce44:	4798      	blx	r3

   2ce46:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2ce48:	4620      	mov	r0, r4
   2ce4a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2ce4e:	4798      	blx	r3
}
   2ce50:	2000      	movs	r0, #0
   2ce52:	bd10      	pop	{r4, pc}

0002ce54 <cameraReset>:
}
   2ce54:	6b43      	ldr	r3, [r0, #52]	@ 0x34
CamStatus cameraReset(ArducamCamera *camera) {
   2ce56:	b510      	push	{r4, lr}
   2ce58:	4604      	mov	r4, r0
}
   2ce5a:	2240      	movs	r2, #64	@ 0x40
   2ce5c:	2107      	movs	r1, #7
   2ce5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2ce60:	4798      	blx	r3

   2ce62:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2ce64:	4620      	mov	r0, r4
   2ce66:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2ce6a:	4798      	blx	r3
    camera->currentPixelFormat = -1;
   2ce6c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
   2ce70:	8223      	strh	r3, [r4, #16]
}
   2ce72:	2000      	movs	r0, #0
   2ce74:	bd10      	pop	{r4, pc}
   2ce76:	bf00      	nop

0002ce78 <cameraSetAutoWhiteBalanceMode>:
}
   2ce78:	6b43      	ldr	r3, [r0, #52]	@ 0x34
CamStatus cameraSetAutoWhiteBalanceMode(ArducamCamera *camera, CAM_WHITE_BALANCE mode) {
   2ce7a:	b510      	push	{r4, lr}
   2ce7c:	4604      	mov	r4, r0
   2ce7e:	460a      	mov	r2, r1
}
   2ce80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2ce82:	2126      	movs	r1, #38	@ 0x26
   2ce84:	4798      	blx	r3

   2ce86:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2ce88:	4620      	mov	r0, r4
   2ce8a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2ce8e:	4798      	blx	r3
}
   2ce90:	2000      	movs	r0, #0
   2ce92:	bd10      	pop	{r4, pc}

0002ce94 <cameraSetAutoWhiteBalance>:
    if (val == TRUE) {
   2ce94:	f1a1 0201 	sub.w	r2, r1, #1
   2ce98:	fab2 f282 	clz	r2, r2
}
   2ce9c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
    if (val == TRUE) {
   2ce9e:	0952      	lsrs	r2, r2, #5
CamStatus cameraSetAutoWhiteBalance(ArducamCamera *camera, uint8_t val) {
   2cea0:	b510      	push	{r4, lr}
    if (val == TRUE) {
   2cea2:	01d2      	lsls	r2, r2, #7
CamStatus cameraSetAutoWhiteBalance(ArducamCamera *camera, uint8_t val) {
   2cea4:	4604      	mov	r4, r0
}
   2cea6:	f042 0202 	orr.w	r2, r2, #2
   2ceaa:	2130      	movs	r1, #48	@ 0x30
   2ceac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2ceae:	4798      	blx	r3

   2ceb0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2ceb2:	4620      	mov	r0, r4
   2ceb4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2ceb8:	4798      	blx	r3
}
   2ceba:	2000      	movs	r0, #0
   2cebc:	bd10      	pop	{r4, pc}
   2cebe:	bf00      	nop

0002cec0 <cameraSetAutoISOSensitive>:
    if (val == TRUE) {
   2cec0:	f1a1 0201 	sub.w	r2, r1, #1
}
   2cec4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
    if (val == TRUE) {
   2cec6:	fab2 f282 	clz	r2, r2
CamStatus cameraSetAutoISOSensitive(ArducamCamera *camera, uint8_t val) {
   2ceca:	b510      	push	{r4, lr}
    if (val == TRUE) {
   2cecc:	0952      	lsrs	r2, r2, #5
CamStatus cameraSetAutoISOSensitive(ArducamCamera *camera, uint8_t val) {
   2cece:	4604      	mov	r4, r0
}
   2ced0:	01d2      	lsls	r2, r2, #7
   2ced2:	2130      	movs	r1, #48	@ 0x30
   2ced4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2ced6:	4798      	blx	r3

   2ced8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2ceda:	4620      	mov	r0, r4
   2cedc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2cee0:	4798      	blx	r3
}
   2cee2:	2000      	movs	r0, #0
   2cee4:	bd10      	pop	{r4, pc}
   2cee6:	bf00      	nop

0002cee8 <cameraSetISOSensitivity>:
CamStatus cameraSetISOSensitivity(ArducamCamera *camera, int iso_sense) {
   2cee8:	b538      	push	{r3, r4, r5, lr}
    if (camera->cameraId == SENSOR_3MP_1) {
   2ceea:	7b43      	ldrb	r3, [r0, #13]
   2ceec:	2b82      	cmp	r3, #130	@ 0x82
CamStatus cameraSetISOSensitivity(ArducamCamera *camera, int iso_sense) {
   2ceee:	4604      	mov	r4, r0
    if (camera->cameraId == SENSOR_3MP_1) {
   2cef0:	d019      	beq.n	2cf26 <cameraSetISOSensitivity+0x3e>
    writeReg(camera, CAM_REG_MANUAL_GAIN_BIT_7_0, iso_sense & 0xff);
   2cef2:	b2cd      	uxtb	r5, r1
}
   2cef4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cef6:	f3c1 2207 	ubfx	r2, r1, #8, #8
   2cefa:	4620      	mov	r0, r4
   2cefc:	2131      	movs	r1, #49	@ 0x31
   2cefe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2cf00:	4798      	blx	r3

   2cf02:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cf04:	4620      	mov	r0, r4
   2cf06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2cf0a:	4798      	blx	r3
}
   2cf0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cf0e:	2132      	movs	r1, #50	@ 0x32
   2cf10:	462a      	mov	r2, r5
   2cf12:	4620      	mov	r0, r4
   2cf14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2cf16:	4798      	blx	r3

   2cf18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cf1a:	4620      	mov	r0, r4
   2cf1c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2cf20:	4798      	blx	r3
}
   2cf22:	2000      	movs	r0, #0
   2cf24:	bd38      	pop	{r3, r4, r5, pc}
        iso_sense = ov3640GainValue[iso_sense - 1];
   2cf26:	4b03      	ldr	r3, [pc, #12]	@ (2cf34 <cameraSetISOSensitivity+0x4c>)
   2cf28:	440b      	add	r3, r1
   2cf2a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   2cf2e:	460d      	mov	r5, r1
   2cf30:	e7e0      	b.n	2cef4 <cameraSetISOSensitivity+0xc>
   2cf32:	bf00      	nop
   2cf34:	1000dabc 	.word	0x1000dabc

0002cf38 <cameraSetAutoExposure>:
    if (val == TRUE) {
   2cf38:	f1a1 0201 	sub.w	r2, r1, #1
   2cf3c:	fab2 f282 	clz	r2, r2
}
   2cf40:	6b43      	ldr	r3, [r0, #52]	@ 0x34
    if (val == TRUE) {
   2cf42:	0952      	lsrs	r2, r2, #5
CamStatus cameraSetAutoExposure(ArducamCamera *camera, uint8_t val) {
   2cf44:	b510      	push	{r4, lr}
    if (val == TRUE) {
   2cf46:	01d2      	lsls	r2, r2, #7
CamStatus cameraSetAutoExposure(ArducamCamera *camera, uint8_t val) {
   2cf48:	4604      	mov	r4, r0
}
   2cf4a:	f042 0201 	orr.w	r2, r2, #1
   2cf4e:	2130      	movs	r1, #48	@ 0x30
   2cf50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2cf52:	4798      	blx	r3

   2cf54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cf56:	4620      	mov	r0, r4
   2cf58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2cf5c:	4798      	blx	r3
}
   2cf5e:	2000      	movs	r0, #0
   2cf60:	bd10      	pop	{r4, pc}
   2cf62:	bf00      	nop

0002cf64 <cameraSetAbsoluteExposure>:
CamStatus cameraSetAbsoluteExposure(ArducamCamera *camera, uint32_t exposure_time) {
   2cf64:	b538      	push	{r3, r4, r5, lr}
}
   2cf66:	6b43      	ldr	r3, [r0, #52]	@ 0x34
CamStatus cameraSetAbsoluteExposure(ArducamCamera *camera, uint32_t exposure_time) {
   2cf68:	4604      	mov	r4, r0
   2cf6a:	460d      	mov	r5, r1
}
   2cf6c:	f3c1 4207 	ubfx	r2, r1, #16, #8
   2cf70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2cf72:	2133      	movs	r1, #51	@ 0x33
   2cf74:	4798      	blx	r3

   2cf76:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cf78:	4620      	mov	r0, r4
   2cf7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2cf7e:	4798      	blx	r3
}
   2cf80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cf82:	f3c5 2207 	ubfx	r2, r5, #8, #8
   2cf86:	2134      	movs	r1, #52	@ 0x34
   2cf88:	4620      	mov	r0, r4
   2cf8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2cf8c:	4798      	blx	r3

   2cf8e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cf90:	4620      	mov	r0, r4
   2cf92:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2cf96:	4798      	blx	r3
}
   2cf98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cf9a:	2135      	movs	r1, #53	@ 0x35
   2cf9c:	b2ea      	uxtb	r2, r5
   2cf9e:	4620      	mov	r0, r4
   2cfa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2cfa2:	4798      	blx	r3

   2cfa4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cfa6:	4620      	mov	r0, r4
   2cfa8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2cfac:	4798      	blx	r3
}
   2cfae:	2000      	movs	r0, #0
   2cfb0:	bd38      	pop	{r3, r4, r5, pc}
   2cfb2:	bf00      	nop

0002cfb4 <cameraSetColorEffect>:
}
   2cfb4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
CamStatus cameraSetColorEffect(ArducamCamera *camera, CAM_COLOR_FX effect) {
   2cfb6:	b510      	push	{r4, lr}
   2cfb8:	4604      	mov	r4, r0
   2cfba:	460a      	mov	r2, r1
}
   2cfbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2cfbe:	2127      	movs	r1, #39	@ 0x27
   2cfc0:	4798      	blx	r3

   2cfc2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cfc4:	4620      	mov	r0, r4
   2cfc6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2cfca:	4798      	blx	r3
}
   2cfcc:	2000      	movs	r0, #0
   2cfce:	bd10      	pop	{r4, pc}

0002cfd0 <cameraSetSaturation>:
}
   2cfd0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
CamStatus cameraSetSaturation(ArducamCamera *camera, CAM_STAURATION_LEVEL level) {
   2cfd2:	b510      	push	{r4, lr}
   2cfd4:	4604      	mov	r4, r0
   2cfd6:	460a      	mov	r2, r1
}
   2cfd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2cfda:	2124      	movs	r1, #36	@ 0x24
   2cfdc:	4798      	blx	r3

   2cfde:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cfe0:	4620      	mov	r0, r4
   2cfe2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2cfe6:	4798      	blx	r3
}
   2cfe8:	2000      	movs	r0, #0
   2cfea:	bd10      	pop	{r4, pc}

0002cfec <cameraSetEV>:
}
   2cfec:	6b43      	ldr	r3, [r0, #52]	@ 0x34
CamStatus cameraSetEV(ArducamCamera *camera, CAM_EV_LEVEL level) {
   2cfee:	b510      	push	{r4, lr}
   2cff0:	4604      	mov	r4, r0
   2cff2:	460a      	mov	r2, r1
}
   2cff4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2cff6:	2125      	movs	r1, #37	@ 0x25
   2cff8:	4798      	blx	r3

   2cffa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cffc:	4620      	mov	r0, r4
   2cffe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2d002:	4798      	blx	r3
}
   2d004:	2000      	movs	r0, #0
   2d006:	bd10      	pop	{r4, pc}

0002d008 <cameraSetContrast>:
}
   2d008:	6b43      	ldr	r3, [r0, #52]	@ 0x34
CamStatus cameraSetContrast(ArducamCamera *camera, CAM_CONTRAST_LEVEL level) {
   2d00a:	b510      	push	{r4, lr}
   2d00c:	4604      	mov	r4, r0
   2d00e:	460a      	mov	r2, r1
}
   2d010:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2d012:	2123      	movs	r1, #35	@ 0x23
   2d014:	4798      	blx	r3

   2d016:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d018:	4620      	mov	r0, r4
   2d01a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2d01e:	4798      	blx	r3
}
   2d020:	2000      	movs	r0, #0
   2d022:	bd10      	pop	{r4, pc}

0002d024 <cameraSetSharpness>:
}
   2d024:	6b43      	ldr	r3, [r0, #52]	@ 0x34
CamStatus cameraSetSharpness(ArducamCamera *camera, CAM_SHARPNESS_LEVEL level) {
   2d026:	b510      	push	{r4, lr}
   2d028:	4604      	mov	r4, r0
   2d02a:	460a      	mov	r2, r1
}
   2d02c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2d02e:	2128      	movs	r1, #40	@ 0x28
   2d030:	4798      	blx	r3

   2d032:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d034:	4620      	mov	r0, r4
   2d036:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2d03a:	4798      	blx	r3
}
   2d03c:	2000      	movs	r0, #0
   2d03e:	bd10      	pop	{r4, pc}

0002d040 <cameraSetBrightness>:
}
   2d040:	6b43      	ldr	r3, [r0, #52]	@ 0x34
CamStatus cameraSetBrightness(ArducamCamera *camera, CAM_BRIGHTNESS_LEVEL level) {
   2d042:	b510      	push	{r4, lr}
   2d044:	4604      	mov	r4, r0
   2d046:	460a      	mov	r2, r1
}
   2d048:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2d04a:	2122      	movs	r1, #34	@ 0x22
   2d04c:	4798      	blx	r3

   2d04e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d050:	4620      	mov	r0, r4
   2d052:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2d056:	4798      	blx	r3
}
   2d058:	2000      	movs	r0, #0
   2d05a:	bd10      	pop	{r4, pc}

0002d05c <cameraFlushFifo>:
}
   2d05c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2d05e:	2280      	movs	r2, #128	@ 0x80
   2d060:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2d062:	2107      	movs	r1, #7
   2d064:	4718      	bx	r3
   2d066:	bf00      	nop

0002d068 <cameraStartCapture>:
   2d068:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2d06a:	2202      	movs	r2, #2
   2d06c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2d06e:	2104      	movs	r1, #4
   2d070:	4718      	bx	r3
   2d072:	bf00      	nop

0002d074 <cameraClearFifoFlag>:
   2d074:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2d076:	2201      	movs	r2, #1
   2d078:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2d07a:	2104      	movs	r1, #4
   2d07c:	4718      	bx	r3
   2d07e:	bf00      	nop

0002d080 <cameraReadFifoLength>:
}
   2d080:	6b43      	ldr	r3, [r0, #52]	@ 0x34
    uint32_t len1, len2, len3, length = 0;
   2d082:	b570      	push	{r4, r5, r6, lr}
}
   2d084:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
    uint32_t len1, len2, len3, length = 0;
   2d086:	4605      	mov	r5, r0
}
   2d088:	2145      	movs	r1, #69	@ 0x45
   2d08a:	4798      	blx	r3
   2d08c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
   2d08e:	4606      	mov	r6, r0
   2d090:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
   2d092:	2146      	movs	r1, #70	@ 0x46
   2d094:	4628      	mov	r0, r5
   2d096:	4798      	blx	r3
   2d098:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
   2d09a:	4604      	mov	r4, r0
   2d09c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
   2d09e:	2147      	movs	r1, #71	@ 0x47
   2d0a0:	4628      	mov	r0, r5
   2d0a2:	4798      	blx	r3
    return length;
   2d0a4:	0224      	lsls	r4, r4, #8
   2d0a6:	ea44 4000 	orr.w	r0, r4, r0, lsl #16

   2d0aa:	4330      	orrs	r0, r6
   2d0ac:	bd70      	pop	{r4, r5, r6, pc}
   2d0ae:	bf00      	nop

0002d0b0 <cameraGetBit>:
}
   2d0b0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
    uint8_t temp;
   2d0b2:	b510      	push	{r4, lr}
}
   2d0b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
    uint8_t temp;
   2d0b6:	4614      	mov	r4, r2
}
   2d0b8:	4798      	blx	r3

   2d0ba:	4020      	ands	r0, r4
   2d0bc:	bd10      	pop	{r4, pc}
   2d0be:	bf00      	nop

0002d0c0 <cameraReadByte>:
}
   2d0c0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
    uint8_t data = cameraReadReg(camera, SINGLE_FIFO_READ);
   2d0c2:	b510      	push	{r4, lr}
   2d0c4:	4604      	mov	r4, r0
}
   2d0c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
   2d0c8:	213d      	movs	r1, #61	@ 0x3d
   2d0ca:	4798      	blx	r3
    return data;
   2d0cc:	68a3      	ldr	r3, [r4, #8]
   2d0ce:	3b01      	subs	r3, #1
   2d0d0:	60a3      	str	r3, [r4, #8]

   2d0d2:	bd10      	pop	{r4, pc}

0002d0d4 <cameraWriteReg>:
}
   2d0d4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2d0d6:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
   2d0da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
   2d0de:	4718      	bx	r3

0002d0e0 <cameraReadReg>:
}
   2d0e0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2d0e2:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
   2d0e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
   2d0e8:	4718      	bx	r3
   2d0ea:	bf00      	nop

0002d0ec <cameraWaitI2cIdle>:
    while ((readReg(camera, CAM_REG_SENSOR_STATE) & 0X03) != CAM_REG_SENSOR_STATE_IDLE) {
   2d0ec:	b510      	push	{r4, lr}
   2d0ee:	4604      	mov	r4, r0
}
   2d0f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d0f2:	2144      	movs	r1, #68	@ 0x44
   2d0f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
   2d0f6:	4620      	mov	r0, r4
   2d0f8:	4798      	blx	r3
        ; // arducamDelayMs(2);
   2d0fa:	f000 0003 	and.w	r0, r0, #3
   2d0fe:	2802      	cmp	r0, #2
   2d100:	d1f6      	bne.n	2d0f0 <cameraWaitI2cIdle+0x4>

   2d102:	bd10      	pop	{r4, pc}

0002d104 <cameraDebugWriteRegister>:
    uint8_t register_high = buff[0];
   2d104:	b570      	push	{r4, r5, r6, lr}
}
   2d106:	6b43      	ldr	r3, [r0, #52]	@ 0x34
    uint8_t value = buff[2];
   2d108:	784e      	ldrb	r6, [r1, #1]
    writeReg(camera, CAM_REG_DEBUG_REGISTER_HIGH, register_high);
   2d10a:	788d      	ldrb	r5, [r1, #2]
}
   2d10c:	780a      	ldrb	r2, [r1, #0]
   2d10e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
    uint8_t register_high = buff[0];
   2d110:	4604      	mov	r4, r0
}
   2d112:	210b      	movs	r1, #11
   2d114:	4798      	blx	r3
   2d116:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d118:	4632      	mov	r2, r6
   2d11a:	4620      	mov	r0, r4
   2d11c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2d11e:	210c      	movs	r1, #12
   2d120:	4798      	blx	r3
   2d122:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d124:	462a      	mov	r2, r5
   2d126:	4620      	mov	r0, r4
   2d128:	6f5b      	ldr	r3, [r3, #116]	@ 0x74

   2d12a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
}
   2d12e:	210d      	movs	r1, #13
   2d130:	4718      	bx	r3
   2d132:	bf00      	nop

0002d134 <cameraGetAutoFocusSta>:
   2d134:	6b43      	ldr	r3, [r0, #52]	@ 0x34
uint8_t cameraGetAutoFocusSta(ArducamCamera *camera) {
   2d136:	b510      	push	{r4, lr}
   2d138:	4604      	mov	r4, r0
}
   2d13a:	2230      	movs	r2, #48	@ 0x30
   2d13c:	210b      	movs	r1, #11
   2d13e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2d140:	4798      	blx	r3

   2d142:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d144:	4620      	mov	r0, r4
   2d146:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2d14a:	4798      	blx	r3
}
   2d14c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d14e:	2229      	movs	r2, #41	@ 0x29
   2d150:	210c      	movs	r1, #12
   2d152:	4620      	mov	r0, r4
   2d154:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2d156:	4798      	blx	r3

   2d158:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d15a:	4620      	mov	r0, r4
   2d15c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2d160:	4798      	blx	r3
}
   2d162:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d164:	2107      	movs	r1, #7
   2d166:	2201      	movs	r2, #1
   2d168:	4620      	mov	r0, r4
   2d16a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2d16c:	4798      	blx	r3

   2d16e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d170:	4620      	mov	r0, r4
   2d172:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2d176:	4798      	blx	r3
    arducamDelayMs(5);   // wait read finish
   2d178:	2005      	movs	r0, #5
   2d17a:	f7ff fb5d 	bl	2c838 <arducam_delay_ms>
}
   2d17e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d180:	4620      	mov	r0, r4
   2d182:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
}
   2d184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}
   2d188:	2148      	movs	r1, #72	@ 0x48
   2d18a:	4718      	bx	r3

0002d18c <cameraBusRead>:
    uint8_t value[2];
   2d18c:	b500      	push	{lr}
   2d18e:	460a      	mov	r2, r1

   2d190:	6801      	ldr	r1, [r0, #0]
    uint8_t value[2];
   2d192:	b085      	sub	sp, #20

   2d194:	2301      	movs	r3, #1
   2d196:	e9cd 3100 	strd	r3, r1, [sp]
   2d19a:	a803      	add	r0, sp, #12
   2d19c:	17d3      	asrs	r3, r2, #31
   2d19e:	2102      	movs	r1, #2
   2d1a0:	f7ff faf4 	bl	2c78c <arducam_spi_read>

   2d1a4:	f89d 000d 	ldrb.w	r0, [sp, #13]
   2d1a8:	b005      	add	sp, #20
   2d1aa:	f85d fb04 	ldr.w	pc, [sp], #4
   2d1ae:	bf00      	nop

0002d1b0 <cameraBusWrite>:
    // arducamSpiCsPinLow(camera->csPin);
   2d1b0:	b510      	push	{r4, lr}
    // arducamDelayMs(1);
   2d1b2:	6803      	ldr	r3, [r0, #0]
    // arducamSpiCsPinLow(camera->csPin);
   2d1b4:	b084      	sub	sp, #16
    // arducamDelayMs(1);
   2d1b6:	2401      	movs	r4, #1
   2d1b8:	e9cd 4300 	strd	r4, r3, [sp]
    // arducamSpiCsPinLow(camera->csPin);
   2d1bc:	9203      	str	r2, [sp, #12]
    // arducamDelayMs(1);
   2d1be:	17cb      	asrs	r3, r1, #31
   2d1c0:	460a      	mov	r2, r1
   2d1c2:	a803      	add	r0, sp, #12
   2d1c4:	4621      	mov	r1, r4
   2d1c6:	f7ff fb07 	bl	2c7d8 <arducam_spi_write>

   2d1ca:	4620      	mov	r0, r4
   2d1cc:	b004      	add	sp, #16
   2d1ce:	bd10      	pop	{r4, pc}

0002d1d0 <cameraCaptureThread>:
    if (camera->previewMode) {
   2d1d0:	7bc3      	ldrb	r3, [r0, #15]
   2d1d2:	b173      	cbz	r3, 2d1f2 <cameraCaptureThread+0x22>
void cameraCaptureThread(ArducamCamera *camera) {
   2d1d4:	b510      	push	{r4, lr}
}
   2d1d6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2d1d8:	490a      	ldr	r1, [pc, #40]	@ (2d204 <cameraCaptureThread+0x34>)
   2d1da:	7b02      	ldrb	r2, [r0, #12]
   2d1dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
   2d1de:	4604      	mov	r4, r0
   2d1e0:	4798      	blx	r3
        if (callBackLength != FALSE) {
   2d1e2:	f010 01ff 	ands.w	r1, r0, #255	@ 0xff
   2d1e6:	d005      	beq.n	2d1f4 <cameraCaptureThread+0x24>
            camera->callBackFunction(callBackBuff, callBackLength);
   2d1e8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
   2d1ea:	4806      	ldr	r0, [pc, #24]	@ (2d204 <cameraCaptureThread+0x34>)
}
   2d1ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            camera->callBackFunction(callBackBuff, callBackLength);
   2d1f0:	4718      	bx	r3
   2d1f2:	4770      	bx	lr
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2d1f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d1f6:	4620      	mov	r0, r4
   2d1f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
}
   2d1fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2d200:	4718      	bx	r3
   2d202:	bf00      	nop
   2d204:	10050804 	.word	0x10050804

0002d208 <cameraLowPowerOn>:

   2d208:	b570      	push	{r4, r5, r6, lr}
        uint16_t reg1 = 0x0028;
   2d20a:	7b43      	ldrb	r3, [r0, #13]
}
   2d20c:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        uint16_t reg1 = 0x0028;
   2d20e:	337d      	adds	r3, #125	@ 0x7d
   2d210:	b2db      	uxtb	r3, r3
   2d212:	2b01      	cmp	r3, #1
}
   2d214:	6f55      	ldr	r5, [r2, #116]	@ 0x74
        uint16_t reg1 = 0x0028;
   2d216:	d905      	bls.n	2d224 <cameraLowPowerOn+0x1c>
}
   2d218:	462b      	mov	r3, r5
   2d21a:	2207      	movs	r2, #7

   2d21c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
}
   2d220:	2102      	movs	r1, #2
   2d222:	4718      	bx	r3
   2d224:	4604      	mov	r4, r0
   2d226:	2200      	movs	r2, #0
   2d228:	210b      	movs	r1, #11
   2d22a:	47a8      	blx	r5

   2d22c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d22e:	4620      	mov	r0, r4
   2d230:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2d234:	4798      	blx	r3
}
   2d236:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d238:	2228      	movs	r2, #40	@ 0x28
   2d23a:	210c      	movs	r1, #12
   2d23c:	4620      	mov	r0, r4
   2d23e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2d240:	4798      	blx	r3

   2d242:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d244:	4620      	mov	r0, r4
   2d246:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2d24a:	4798      	blx	r3
}
   2d24c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d24e:	22d0      	movs	r2, #208	@ 0xd0
   2d250:	210e      	movs	r1, #14
   2d252:	4620      	mov	r0, r4
   2d254:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2d256:	4798      	blx	r3

   2d258:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d25a:	4620      	mov	r0, r4
   2d25c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2d260:	4798      	blx	r3
}
   2d262:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d264:	2200      	movs	r2, #0
   2d266:	210d      	movs	r1, #13
   2d268:	4620      	mov	r0, r4
   2d26a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2d26c:	4798      	blx	r3

   2d26e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d270:	4620      	mov	r0, r4
   2d272:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2d276:	4798      	blx	r3
}
   2d278:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d27a:	2200      	movs	r2, #0
   2d27c:	210b      	movs	r1, #11
   2d27e:	4620      	mov	r0, r4
   2d280:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2d282:	4798      	blx	r3

   2d284:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d286:	4620      	mov	r0, r4
   2d288:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2d28c:	4798      	blx	r3
}
   2d28e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d290:	222a      	movs	r2, #42	@ 0x2a
   2d292:	210c      	movs	r1, #12
   2d294:	4620      	mov	r0, r4
   2d296:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2d298:	4798      	blx	r3

   2d29a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d29c:	4620      	mov	r0, r4
   2d29e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2d2a2:	4798      	blx	r3
}
   2d2a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d2a6:	2210      	movs	r2, #16
   2d2a8:	210e      	movs	r1, #14
   2d2aa:	4620      	mov	r0, r4
   2d2ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2d2ae:	4798      	blx	r3

   2d2b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d2b2:	4620      	mov	r0, r4
   2d2b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2d2b8:	4798      	blx	r3
}
   2d2ba:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d2bc:	227e      	movs	r2, #126	@ 0x7e
   2d2be:	210d      	movs	r1, #13
   2d2c0:	4620      	mov	r0, r4
   2d2c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2d2c4:	4798      	blx	r3

   2d2c6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d2c8:	4620      	mov	r0, r4
   2d2ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2d2ce:	4798      	blx	r3
}
   2d2d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d2d2:	220f      	movs	r2, #15
   2d2d4:	210b      	movs	r1, #11
   2d2d6:	4620      	mov	r0, r4
   2d2d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2d2da:	4798      	blx	r3

   2d2dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d2de:	4620      	mov	r0, r4
   2d2e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2d2e4:	4798      	blx	r3
}
   2d2e6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d2e8:	2212      	movs	r2, #18
   2d2ea:	210c      	movs	r1, #12
   2d2ec:	4620      	mov	r0, r4
   2d2ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2d2f0:	4798      	blx	r3

   2d2f2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d2f4:	4620      	mov	r0, r4
   2d2f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2d2fa:	4798      	blx	r3
}
   2d2fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d2fe:	2200      	movs	r2, #0
   2d300:	210e      	movs	r1, #14
   2d302:	4620      	mov	r0, r4
   2d304:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2d306:	4798      	blx	r3

   2d308:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d30a:	4620      	mov	r0, r4
   2d30c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2d310:	4798      	blx	r3
}
   2d312:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d314:	4620      	mov	r0, r4
   2d316:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2d318:	2201      	movs	r2, #1
   2d31a:	210d      	movs	r1, #13
   2d31c:	4798      	blx	r3

   2d31e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d320:	4620      	mov	r0, r4
   2d322:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0

   2d326:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

   2d32a:	4718      	bx	r3

0002d32c <cameraLowPowerOff>:
    if ((camera->cameraId == SENSOR_5MP_2) || (camera->cameraId == SENSOR_3MP_2)) {
   2d32c:	b570      	push	{r4, r5, r6, lr}
        uint16_t reg1 = 0x0028;
   2d32e:	7b43      	ldrb	r3, [r0, #13]
}
   2d330:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        uint16_t reg1 = 0x0028;
   2d332:	337d      	adds	r3, #125	@ 0x7d
   2d334:	b2db      	uxtb	r3, r3
   2d336:	2b01      	cmp	r3, #1
}
   2d338:	6f55      	ldr	r5, [r2, #116]	@ 0x74
        uint16_t reg1 = 0x0028;
   2d33a:	d905      	bls.n	2d348 <cameraLowPowerOff+0x1c>
}
   2d33c:	462b      	mov	r3, r5
   2d33e:	2205      	movs	r2, #5

   2d340:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
}
   2d344:	2102      	movs	r1, #2
   2d346:	4718      	bx	r3
   2d348:	4604      	mov	r4, r0
   2d34a:	2200      	movs	r2, #0
   2d34c:	210b      	movs	r1, #11
   2d34e:	47a8      	blx	r5

   2d350:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d352:	4620      	mov	r0, r4
   2d354:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2d358:	4798      	blx	r3
}
   2d35a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d35c:	2228      	movs	r2, #40	@ 0x28
   2d35e:	210c      	movs	r1, #12
   2d360:	4620      	mov	r0, r4
   2d362:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2d364:	4798      	blx	r3

   2d366:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d368:	4620      	mov	r0, r4
   2d36a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2d36e:	4798      	blx	r3
}
   2d370:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d372:	22d0      	movs	r2, #208	@ 0xd0
   2d374:	210e      	movs	r1, #14
   2d376:	4620      	mov	r0, r4
   2d378:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2d37a:	4798      	blx	r3

   2d37c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d37e:	4620      	mov	r0, r4
   2d380:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2d384:	4798      	blx	r3
}
   2d386:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d388:	2200      	movs	r2, #0
   2d38a:	210d      	movs	r1, #13
   2d38c:	4620      	mov	r0, r4
   2d38e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2d390:	4798      	blx	r3

   2d392:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d394:	4620      	mov	r0, r4
   2d396:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2d39a:	4798      	blx	r3
}
   2d39c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d39e:	2200      	movs	r2, #0
   2d3a0:	210b      	movs	r1, #11
   2d3a2:	4620      	mov	r0, r4
   2d3a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2d3a6:	4798      	blx	r3

   2d3a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d3aa:	4620      	mov	r0, r4
   2d3ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2d3b0:	4798      	blx	r3
}
   2d3b2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d3b4:	222a      	movs	r2, #42	@ 0x2a
   2d3b6:	210c      	movs	r1, #12
   2d3b8:	4620      	mov	r0, r4
   2d3ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2d3bc:	4798      	blx	r3

   2d3be:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d3c0:	4620      	mov	r0, r4
   2d3c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2d3c6:	4798      	blx	r3
}
   2d3c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d3ca:	2210      	movs	r2, #16
   2d3cc:	210e      	movs	r1, #14
   2d3ce:	4620      	mov	r0, r4
   2d3d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2d3d2:	4798      	blx	r3

   2d3d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d3d6:	4620      	mov	r0, r4
   2d3d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2d3dc:	4798      	blx	r3
}
   2d3de:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d3e0:	227e      	movs	r2, #126	@ 0x7e
   2d3e2:	210d      	movs	r1, #13
   2d3e4:	4620      	mov	r0, r4
   2d3e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2d3e8:	4798      	blx	r3

   2d3ea:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d3ec:	4620      	mov	r0, r4
   2d3ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2d3f2:	4798      	blx	r3
}
   2d3f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d3f6:	220f      	movs	r2, #15
   2d3f8:	210b      	movs	r1, #11
   2d3fa:	4620      	mov	r0, r4
   2d3fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2d3fe:	4798      	blx	r3

   2d400:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d402:	4620      	mov	r0, r4
   2d404:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2d408:	4798      	blx	r3
}
   2d40a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d40c:	2212      	movs	r2, #18
   2d40e:	210c      	movs	r1, #12
   2d410:	4620      	mov	r0, r4
   2d412:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2d414:	4798      	blx	r3

   2d416:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d418:	4620      	mov	r0, r4
   2d41a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2d41e:	4798      	blx	r3
}
   2d420:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d422:	2200      	movs	r2, #0
   2d424:	210e      	movs	r1, #14
   2d426:	4620      	mov	r0, r4
   2d428:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2d42a:	4798      	blx	r3

   2d42c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d42e:	4620      	mov	r0, r4
   2d430:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2d434:	4798      	blx	r3
}
   2d436:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d438:	4620      	mov	r0, r4
   2d43a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2d43c:	2200      	movs	r2, #0
   2d43e:	210d      	movs	r1, #13
   2d440:	4798      	blx	r3

   2d442:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d444:	4620      	mov	r0, r4
   2d446:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0

   2d44a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

   2d44e:	4718      	bx	r3

0002d450 <cameraReadBuff>:
    if (imageAvailable(camera) == 0 || (length == 0)) {
   2d450:	b5f0      	push	{r4, r5, r6, r7, lr}
uint32_t imageAvailable(ArducamCamera *camera) {
    return camera->arducamCameraOp->imageAvailable(camera);
}
   2d452:	6b43      	ldr	r3, [r0, #52]	@ 0x34
    if (imageAvailable(camera) == 0 || (length == 0)) {
   2d454:	b083      	sub	sp, #12
}
   2d456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
    if (imageAvailable(camera) == 0 || (length == 0)) {
   2d458:	4605      	mov	r5, r0
   2d45a:	460f      	mov	r7, r1
   2d45c:	4616      	mov	r6, r2
}
   2d45e:	4798      	blx	r3
        return 0;
   2d460:	4604      	mov	r4, r0
   2d462:	b108      	cbz	r0, 2d468 <cameraReadBuff+0x18>
   2d464:	b91e      	cbnz	r6, 2d46e <cameraReadBuff+0x1e>
    }
   2d466:	4634      	mov	r4, r6

   2d468:	4620      	mov	r0, r4
   2d46a:	b003      	add	sp, #12
   2d46c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        length = camera->receivedLength;
   2d46e:	68ac      	ldr	r4, [r5, #8]

   2d470:	682b      	ldr	r3, [r5, #0]
   2d472:	9301      	str	r3, [sp, #4]
        length = camera->receivedLength;
   2d474:	42b4      	cmp	r4, r6
   2d476:	bf28      	it	cs
   2d478:	4634      	movcs	r4, r6

   2d47a:	2601      	movs	r6, #1
   2d47c:	2300      	movs	r3, #0
   2d47e:	9600      	str	r6, [sp, #0]
   2d480:	4638      	mov	r0, r7
   2d482:	223c      	movs	r2, #60	@ 0x3c
   2d484:	4621      	mov	r1, r4
   2d486:	f7ff f981 	bl	2c78c <arducam_spi_read>
        camera->burstFirstFlag = 1;
   2d48a:	7bab      	ldrb	r3, [r5, #14]
   2d48c:	b903      	cbnz	r3, 2d490 <cameraReadBuff+0x40>
        // arducamSpiTransfer(0x00);
   2d48e:	73ae      	strb	r6, [r5, #14]
    return length;
   2d490:	68ab      	ldr	r3, [r5, #8]

   2d492:	4620      	mov	r0, r4
    return length;
   2d494:	1b1b      	subs	r3, r3, r4
   2d496:	60ab      	str	r3, [r5, #8]

   2d498:	b003      	add	sp, #12
   2d49a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002d49c <cameraCsHigh>:
void cameraCsLow(ArducamCamera *camera) { arducamSpiCsPinLow(camera->csPin); }
   2d49c:	4770      	bx	lr
   2d49e:	bf00      	nop

0002d4a0 <cameraCsLow>:

   2d4a0:	4770      	bx	lr
   2d4a2:	bf00      	nop

0002d4a4 <cameraSetFifoBurst>:
    // arducamSpiTransfer(BURST_FIFO_READ);
   2d4a4:	4770      	bx	lr
   2d4a6:	bf00      	nop

0002d4a8 <cameraGetSensorConfig>:
}
   2d4a8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
void cameraGetSensorConfig(ArducamCamera *camera) {
   2d4aa:	b510      	push	{r4, lr}
}
   2d4ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
   2d4ae:	2140      	movs	r1, #64	@ 0x40
void cameraGetSensorConfig(ArducamCamera *camera) {
   2d4b0:	4604      	mov	r4, r0
}
   2d4b2:	4798      	blx	r3

   2d4b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
    camera->cameraId = readReg(camera, CAM_REG_SENSOR_ID);
   2d4b6:	7360      	strb	r0, [r4, #13]

   2d4b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2d4bc:	4620      	mov	r0, r4
   2d4be:	4798      	blx	r3
    switch (camera->cameraId) {
   2d4c0:	7b63      	ldrb	r3, [r4, #13]
   2d4c2:	2b83      	cmp	r3, #131	@ 0x83
   2d4c4:	d013      	beq.n	2d4ee <cameraGetSensorConfig+0x46>
   2d4c6:	2b84      	cmp	r3, #132	@ 0x84
   2d4c8:	d016      	beq.n	2d4f8 <cameraGetSensorConfig+0x50>
   2d4ca:	f1a3 0382 	sub.w	r3, r3, #130	@ 0x82
   2d4ce:	fab3 f383 	clz	r3, r3
   2d4d2:	095b      	lsrs	r3, r3, #5
    camera->myCameraInfo = *CameraType[cameraIdx];
   2d4d4:	4a09      	ldr	r2, [pc, #36]	@ (2d4fc <cameraGetSensorConfig+0x54>)
   2d4d6:	f104 0c14 	add.w	ip, r4, #20
   2d4da:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   2d4de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   2d4e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   2d4e4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   2d4e8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
   2d4ec:	bd10      	pop	{r4, pc}
        CameraInfo_5MP.cameraId = "5MP_2";
   2d4ee:	4b04      	ldr	r3, [pc, #16]	@ (2d500 <cameraGetSensorConfig+0x58>)
   2d4f0:	4a04      	ldr	r2, [pc, #16]	@ (2d504 <cameraGetSensorConfig+0x5c>)
   2d4f2:	601a      	str	r2, [r3, #0]
   2d4f4:	2300      	movs	r3, #0
   2d4f6:	e7ed      	b.n	2d4d4 <cameraGetSensorConfig+0x2c>
    switch (camera->cameraId) {
   2d4f8:	2301      	movs	r3, #1
   2d4fa:	e7eb      	b.n	2d4d4 <cameraGetSensorConfig+0x2c>
   2d4fc:	10050904 	.word	0x10050904
   2d500:	1000dafc 	.word	0x1000dafc
   2d504:	0004404c 	.word	0x0004404c

0002d508 <cameraBegin>:
}
   2d508:	6b43      	ldr	r3, [r0, #52]	@ 0x34
CamStatus cameraBegin(ArducamCamera *camera) {
   2d50a:	b510      	push	{r4, lr}
   2d50c:	4604      	mov	r4, r0
}
   2d50e:	2240      	movs	r2, #64	@ 0x40
   2d510:	2107      	movs	r1, #7
   2d512:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2d514:	4798      	blx	r3

   2d516:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d518:	4620      	mov	r0, r4
   2d51a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2d51e:	4798      	blx	r3
    cameraGetSensorConfig(camera);
   2d520:	4620      	mov	r0, r4
   2d522:	f7ff ffc1 	bl	2d4a8 <cameraGetSensorConfig>
    if (camera->cameraId == SENSOR_5MP_2 || camera->cameraId == SENSOR_3MP_2) {
   2d526:	7b63      	ldrb	r3, [r4, #13]
   2d528:	337d      	adds	r3, #125	@ 0x7d
   2d52a:	b2db      	uxtb	r3, r3
   2d52c:	2b01      	cmp	r3, #1
   2d52e:	d803      	bhi.n	2d538 <cameraBegin+0x30>
        camera->myCameraInfo.exposureValueMax = 0xFFFF;
   2d530:	f64f 73ff 	movw	r3, #65535	@ 0xffff
   2d534:	6223      	str	r3, [r4, #32]
        camera->myCameraInfo.gainValueMax = 0xFFFF;
   2d536:	62a3      	str	r3, [r4, #40]	@ 0x28
}
   2d538:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d53a:	2141      	movs	r1, #65	@ 0x41
   2d53c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
   2d53e:	4620      	mov	r0, r4
   2d540:	4798      	blx	r3

   2d542:	6b63      	ldr	r3, [r4, #52]	@ 0x34
    camera->verDateAndNumber[0] = readReg(camera, CAM_REG_YEAR_ID) & 0x3F; // year
   2d544:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
   2d548:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40

   2d54c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2d550:	4620      	mov	r0, r4
   2d552:	4798      	blx	r3
    ns_lp_printf("year: %d\n", camera->verDateAndNumber[0]);
   2d554:	f894 1040 	ldrb.w	r1, [r4, #64]	@ 0x40
   2d558:	4823      	ldr	r0, [pc, #140]	@ (2d5e8 <cameraBegin+0xe0>)
   2d55a:	f7fe fd05 	bl	2bf68 <ns_lp_printf>
}
   2d55e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d560:	2142      	movs	r1, #66	@ 0x42
   2d562:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
   2d564:	4620      	mov	r0, r4
   2d566:	4798      	blx	r3

   2d568:	6b63      	ldr	r3, [r4, #52]	@ 0x34
    camera->verDateAndNumber[1] = readReg(camera, CAM_REG_MONTH_ID) & 0x0F; // month
   2d56a:	f000 000f 	and.w	r0, r0, #15
   2d56e:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41

   2d572:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2d576:	4620      	mov	r0, r4
   2d578:	4798      	blx	r3
    ns_lp_printf("month: %d\n", camera->verDateAndNumber[1]);
   2d57a:	f894 1041 	ldrb.w	r1, [r4, #65]	@ 0x41
   2d57e:	481b      	ldr	r0, [pc, #108]	@ (2d5ec <cameraBegin+0xe4>)
   2d580:	f7fe fcf2 	bl	2bf68 <ns_lp_printf>
}
   2d584:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d586:	2143      	movs	r1, #67	@ 0x43
   2d588:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
   2d58a:	4620      	mov	r0, r4
   2d58c:	4798      	blx	r3

   2d58e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
    camera->verDateAndNumber[2] = readReg(camera, CAM_REG_DAY_ID) & 0x1F; // day
   2d590:	f000 001f 	and.w	r0, r0, #31
   2d594:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42

   2d598:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2d59c:	4620      	mov	r0, r4
   2d59e:	4798      	blx	r3
    ns_lp_printf("day: %d\n", camera->verDateAndNumber[2]);
   2d5a0:	f894 1042 	ldrb.w	r1, [r4, #66]	@ 0x42
   2d5a4:	4812      	ldr	r0, [pc, #72]	@ (2d5f0 <cameraBegin+0xe8>)
   2d5a6:	f7fe fcdf 	bl	2bf68 <ns_lp_printf>
}
   2d5aa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d5ac:	2149      	movs	r1, #73	@ 0x49
   2d5ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
   2d5b0:	4620      	mov	r0, r4
   2d5b2:	4798      	blx	r3

   2d5b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
    camera->verDateAndNumber[3] = readReg(camera, CAM_REG_FPGA_VERSION_NUMBER) & 0xFF; // day
   2d5b6:	f884 0043 	strb.w	r0, [r4, #67]	@ 0x43

   2d5ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2d5be:	4620      	mov	r0, r4
   2d5c0:	4798      	blx	r3
    ns_lp_printf("fpga version: %d\n", camera->verDateAndNumber[3]);
   2d5c2:	f894 1043 	ldrb.w	r1, [r4, #67]	@ 0x43
   2d5c6:	480b      	ldr	r0, [pc, #44]	@ (2d5f4 <cameraBegin+0xec>)
   2d5c8:	f7fe fcce 	bl	2bf68 <ns_lp_printf>
}
   2d5cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d5ce:	f894 2032 	ldrb.w	r2, [r4, #50]	@ 0x32
   2d5d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2d5d4:	210a      	movs	r1, #10
   2d5d6:	4620      	mov	r0, r4
   2d5d8:	4798      	blx	r3

   2d5da:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d5dc:	4620      	mov	r0, r4
   2d5de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2d5e2:	4798      	blx	r3
}
   2d5e4:	2000      	movs	r0, #0
   2d5e6:	bd10      	pop	{r4, pc}
   2d5e8:	00044054 	.word	0x00044054
   2d5ec:	00044060 	.word	0x00044060
   2d5f0:	0004406c 	.word	0x0004406c
   2d5f4:	00044078 	.word	0x00044078

0002d5f8 <begin>:

   2d5f8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2d5fa:	685b      	ldr	r3, [r3, #4]
   2d5fc:	4718      	bx	r3
   2d5fe:	bf00      	nop

0002d600 <setAutoExposure>:
}
   2d600:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2d602:	69db      	ldr	r3, [r3, #28]
   2d604:	4718      	bx	r3
   2d606:	bf00      	nop

0002d608 <setAutoISOSensitive>:
}
   2d608:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2d60a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   2d60c:	4718      	bx	r3
   2d60e:	bf00      	nop

0002d610 <setAutoFocus>:
}
   2d610:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2d612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
   2d614:	4718      	bx	r3
   2d616:	bf00      	nop

0002d618 <setEV>:
}
   2d618:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2d61a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
   2d61c:	4718      	bx	r3
   2d61e:	bf00      	nop

0002d620 <setContrast>:
}
   2d620:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2d622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
   2d624:	4718      	bx	r3
   2d626:	bf00      	nop

0002d628 <setBrightness>:
}
   2d628:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2d62a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
   2d62c:	4718      	bx	r3
   2d62e:	bf00      	nop

0002d630 <lowPowerOn>:
void lowPowerOff(ArducamCamera *camera) { camera->arducamCameraOp->lowPowerOff(camera); }
   2d630:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2d632:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
   2d636:	4718      	bx	r3

0002d638 <lowPowerOff>:

   2d638:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2d63a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
   2d63e:	4718      	bx	r3

0002d640 <writeReg>:
}
   2d640:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2d642:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2d644:	4718      	bx	r3
   2d646:	bf00      	nop

0002d648 <readFifoLength>:
}
   2d648:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2d64a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
   2d64e:	4718      	bx	r3

0002d650 <getBit>:
}
   2d650:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2d652:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
   2d656:	4718      	bx	r3

0002d658 <waitI2cIdle>:

   2d658:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2d65a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2d65e:	4718      	bx	r3

0002d660 <createArducamCamera>:
};

extern ArducamCamera camera;

ArducamCamera createArducamCamera(int CS) {
    // ArducamCamera camera;
   2d660:	b538      	push	{r3, r4, r5, lr}
    // cameraDefaultInfo[0] = &DefaultState_5mp;
    // cameraDefaultInfo[1] = &DefaultState_3mp;
    camera.cameraId = FALSE;
    camera.currentPixelFormat = CAM_IMAGE_PIX_FMT_NONE;
    camera.currentPictureMode = CAM_IMAGE_MODE_NONE;
    camera.burstFirstFlag = FALSE;
   2d662:	4b0c      	ldr	r3, [pc, #48]	@ (2d694 <createArducamCamera+0x34>)
    CameraType[1] = &CameraInfo_3MP;
   2d664:	4d0c      	ldr	r5, [pc, #48]	@ (2d698 <createArducamCamera+0x38>)
    camera.previewMode = FALSE;
    camera.csPin = CS;
    camera.arducamCameraOp = &ArducamcameraOperations;
   2d666:	6019      	str	r1, [r3, #0]
    CameraType[1] = &CameraInfo_3MP;
   2d668:	4a0c      	ldr	r2, [pc, #48]	@ (2d69c <createArducamCamera+0x3c>)
    // cameraDefaultInfo[0] = &DefaultState_5mp;
   2d66a:	490d      	ldr	r1, [pc, #52]	@ (2d6a0 <createArducamCamera+0x40>)
    CameraType[1] = &CameraInfo_3MP;
   2d66c:	602a      	str	r2, [r5, #0]
    // cameraDefaultInfo[0] = &DefaultState_5mp;
   2d66e:	6069      	str	r1, [r5, #4]
    camera.currentSDK = &currentSDK;
   2d670:	4a0c      	ldr	r2, [pc, #48]	@ (2d6a4 <createArducamCamera+0x44>)
   2d672:	635a      	str	r2, [r3, #52]	@ 0x34
    camera.burstFirstFlag = FALSE;
   2d674:	2111      	movs	r1, #17
   2d676:	7459      	strb	r1, [r3, #17]
    cameraInit(&camera);
   2d678:	4a0b      	ldr	r2, [pc, #44]	@ (2d6a8 <createArducamCamera+0x48>)
   2d67a:	645a      	str	r2, [r3, #68]	@ 0x44
    camera.currentPixelFormat = CAM_IMAGE_PIX_FMT_NONE;
   2d67c:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
    // ArducamCamera camera;
   2d680:	4604      	mov	r4, r0
    camera.currentPixelFormat = CAM_IMAGE_PIX_FMT_NONE;
   2d682:	f8c3 100d 	str.w	r1, [r3, #13]
    return camera;
}
   2d686:	2248      	movs	r2, #72	@ 0x48
   2d688:	4619      	mov	r1, r3
   2d68a:	f7ea ff79 	bl	18580 <memcpy>

   2d68e:	4620      	mov	r0, r4
   2d690:	bd38      	pop	{r3, r4, r5, pc}
   2d692:	bf00      	nop
   2d694:	10050568 	.word	0x10050568
   2d698:	10050904 	.word	0x10050904
   2d69c:	1000dafc 	.word	0x1000dafc
   2d6a0:	1000dadc 	.word	0x1000dadc
   2d6a4:	0004ba68 	.word	0x0004ba68
   2d6a8:	1000db1c 	.word	0x1000db1c

0002d6ac <pjpeg_callback>:
    #define min(a, b) (((a) < (b)) ? (a) : (b))
#endif

unsigned char pjpeg_callback(
    unsigned char *pBuf, unsigned char buf_size, unsigned char *pBytes_actually_read,
    void *pCallback_data) {
   2d6ac:	b430      	push	{r4, r5}
    uint32_t n;
    jpeg_decoder_context_t *ctx = (jpeg_decoder_context_t *)pCallback_data;

    n = jpg_min(ctx->g_nInFileSize - ctx->g_nInFileOfs, buf_size);
   2d6ae:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	@ 0x48
   2d6b2:	1b64      	subs	r4, r4, r5
   2d6b4:	42a1      	cmp	r1, r4
   2d6b6:	bf28      	it	cs
   2d6b8:	4621      	movcs	r1, r4
    for (int i = 0; i < n; i++) {
   2d6ba:	b151      	cbz	r1, 2d6d2 <pjpeg_callback+0x26>
   2d6bc:	3801      	subs	r0, #1
   2d6be:	eb00 0c01 	add.w	ip, r0, r1
        pBuf[i] = *ctx->jpg_data++;
   2d6c2:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
   2d6c4:	1c65      	adds	r5, r4, #1
   2d6c6:	635d      	str	r5, [r3, #52]	@ 0x34
   2d6c8:	7824      	ldrb	r4, [r4, #0]
   2d6ca:	f800 4f01 	strb.w	r4, [r0, #1]!
    for (int i = 0; i < n; i++) {
   2d6ce:	4560      	cmp	r0, ip
   2d6d0:	d1f7      	bne.n	2d6c2 <pjpeg_callback+0x16>
    }

    *pBytes_actually_read = (uint8_t)(n);
   2d6d2:	7011      	strb	r1, [r2, #0]
    ctx->g_nInFileOfs += n;
   2d6d4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
   2d6d6:	440a      	add	r2, r1
    return 0;
}
   2d6d8:	2000      	movs	r0, #0
   2d6da:	bc30      	pop	{r4, r5}
    ctx->g_nInFileOfs += n;
   2d6dc:	64da      	str	r2, [r3, #76]	@ 0x4c
}
   2d6de:	4770      	bx	lr

0002d6e0 <jpeg_decoder_read>:
        }
    }
    return 1;
}

int jpeg_decoder_read(jpeg_decoder_context_t *ctx) {
   2d6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int y, x;
    uint16_t *pDst_row;

    if (ctx->is_available == 0 || ctx->mcu_y >= ctx->imgInfo.m_MCUSPerCol) {
   2d6e4:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
int jpeg_decoder_read(jpeg_decoder_context_t *ctx) {
   2d6e6:	b093      	sub	sp, #76	@ 0x4c
   2d6e8:	4604      	mov	r4, r0
    if (ctx->is_available == 0 || ctx->mcu_y >= ctx->imgInfo.m_MCUSPerCol) {
   2d6ea:	2b00      	cmp	r3, #0
   2d6ec:	f000 8135 	beq.w	2d95a <jpeg_decoder_read+0x27a>
   2d6f0:	6c40      	ldr	r0, [r0, #68]	@ 0x44
   2d6f2:	69a3      	ldr	r3, [r4, #24]
   2d6f4:	4298      	cmp	r0, r3
   2d6f6:	f280 8130 	bge.w	2d95a <jpeg_decoder_read+0x27a>
        jpeg_decoder_abort(ctx);
        return 0;
    }

    pDst_row = ctx->pImage;
    for (y = 0; y < ctx->imgInfo.m_MCUHeight; y += 8) {
   2d6fa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
            }
        }
        pDst_row += (ctx->row_pitch * 8);
    }

    ctx->MCUx = ctx->mcu_x;
   2d6fc:	6c25      	ldr	r5, [r4, #64]	@ 0x40
    for (y = 0; y < ctx->imgInfo.m_MCUHeight; y += 8) {
   2d6fe:	2b00      	cmp	r3, #0
    pDst_row = ctx->pImage;
   2d700:	f104 0254 	add.w	r2, r4, #84	@ 0x54
    for (y = 0; y < ctx->imgInfo.m_MCUHeight; y += 8) {
   2d704:	f340 8113 	ble.w	2d92e <jpeg_decoder_read+0x24e>
        for (x = 0; x < ctx->imgInfo.m_MCUWidth; x += 8) {
   2d708:	6a21      	ldr	r1, [r4, #32]
        pDst_row += (ctx->row_pitch * 8);
   2d70a:	6d26      	ldr	r6, [r4, #80]	@ 0x50
            jpg_min(8, ctx->imgInfo.m_height - (ctx->mcu_y * ctx->imgInfo.m_MCUHeight + y));
   2d70c:	f8d4 a00c 	ldr.w	sl, [r4, #12]
   2d710:	2900      	cmp	r1, #0
   2d712:	fb03 f700 	mul.w	r7, r3, r0
        pDst_row += (ctx->row_pitch * 8);
   2d716:	ea4f 1e06 	mov.w	lr, r6, lsl #4
   2d71a:	f340 8108 	ble.w	2d92e <jpeg_decoder_read+0x24e>
   2d71e:	3b01      	subs	r3, #1
   2d720:	08db      	lsrs	r3, r3, #3
   2d722:	3301      	adds	r3, #1
   2d724:	011b      	lsls	r3, r3, #4
   2d726:	930c      	str	r3, [sp, #48]	@ 0x30
   2d728:	1e4b      	subs	r3, r1, #1
   2d72a:	08db      	lsrs	r3, r3, #3
   2d72c:	3301      	adds	r3, #1
   2d72e:	011b      	lsls	r3, r3, #4
   2d730:	930d      	str	r3, [sp, #52]	@ 0x34
   2d732:	68a3      	ldr	r3, [r4, #8]
                        *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
   2d734:	f8df 8324 	ldr.w	r8, [pc, #804]	@ 2da5c <jpeg_decoder_read+0x37c>
   2d738:	fb05 3311 	mls	r3, r5, r1, r3
   2d73c:	930b      	str	r3, [sp, #44]	@ 0x2c
            const uint8_t *pSrcR = ctx->imgInfo.m_pMCUBufR + src_ofs;
   2d73e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
   2d740:	9308      	str	r3, [sp, #32]
            const uint8_t *pSrcG = ctx->imgInfo.m_pMCUBufG + src_ofs;
   2d742:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   2d744:	9309      	str	r3, [sp, #36]	@ 0x24
                    pDst_block += ctx->row_pitch;
   2d746:	e9cd e00e 	strd	lr, r0, [sp, #56]	@ 0x38
            const uint8_t *pSrcB = ctx->imgInfo.m_pMCUBufB + src_ofs;
   2d74a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
   2d74c:	930a      	str	r3, [sp, #40]	@ 0x28
                    pDst_block += ctx->row_pitch;
   2d74e:	f04f 0c00 	mov.w	ip, #0
            if (ctx->imgInfo.m_scanType == PJPG_GRAYSCALE) {
   2d752:	7f23      	ldrb	r3, [r4, #28]
   2d754:	9300      	str	r3, [sp, #0]
                    pDst_block += ctx->row_pitch;
   2d756:	e9cd 5410 	strd	r5, r4, [sp, #64]	@ 0x40
   2d75a:	ebaa 0a07 	sub.w	sl, sl, r7
   2d75e:	ea4f 0946 	mov.w	r9, r6, lsl #1
   2d762:	4663      	mov	r3, ip
   2d764:	4664      	mov	r4, ip
        const int by_limit =
   2d766:	9908      	ldr	r1, [sp, #32]
   2d768:	9407      	str	r4, [sp, #28]
   2d76a:	eb01 0e03 	add.w	lr, r1, r3
   2d76e:	9909      	ldr	r1, [sp, #36]	@ 0x24
   2d770:	18c8      	adds	r0, r1, r3
   2d772:	990a      	ldr	r1, [sp, #40]	@ 0x28
   2d774:	eb01 0b03 	add.w	fp, r1, r3
   2d778:	990d      	ldr	r1, [sp, #52]	@ 0x34
   2d77a:	4657      	mov	r7, sl
   2d77c:	4411      	add	r1, r2
   2d77e:	e9cd 2305 	strd	r2, r3, [sp, #20]
   2d782:	2f08      	cmp	r7, #8
   2d784:	9101      	str	r1, [sp, #4]
   2d786:	990b      	ldr	r1, [sp, #44]	@ 0x2c
   2d788:	bfa8      	it	ge
   2d78a:	2708      	movge	r7, #8
        for (x = 0; x < ctx->imgInfo.m_MCUWidth; x += 8) {
   2d78c:	4694      	mov	ip, r2
            if (ctx->imgInfo.m_scanType == PJPG_GRAYSCALE) {
   2d78e:	9c00      	ldr	r4, [sp, #0]
            uint16_t *pDst_block = pDst_row + x;
   2d790:	4662      	mov	r2, ip
            const uint8_t *pSrcR = ctx->imgInfo.m_pMCUBufR + src_ofs;
   2d792:	4673      	mov	r3, lr
            if (ctx->imgInfo.m_scanType == PJPG_GRAYSCALE) {
   2d794:	2c00      	cmp	r4, #0
   2d796:	f000 80e7 	beq.w	2d968 <jpeg_decoder_read+0x288>
                for (by = 0; by < by_limit; by++) {
   2d79a:	f1ba 0f00 	cmp.w	sl, #0
   2d79e:	f340 80a7 	ble.w	2d8f0 <jpeg_decoder_read+0x210>
   2d7a2:	2900      	cmp	r1, #0
            const uint8_t *pSrcG = ctx->imgInfo.m_pMCUBufG + src_ofs;
   2d7a4:	4604      	mov	r4, r0
            const uint8_t *pSrcB = ctx->imgInfo.m_pMCUBufB + src_ofs;
   2d7a6:	465d      	mov	r5, fp
   2d7a8:	f340 80a2 	ble.w	2d8f0 <jpeg_decoder_read+0x210>
                for (by = 0; by < by_limit; by++) {
   2d7ac:	e9cd b002 	strd	fp, r0, [sp, #8]
   2d7b0:	2600      	movs	r6, #0
   2d7b2:	f8cd e010 	str.w	lr, [sp, #16]
                        *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
   2d7b6:	f894 e000 	ldrb.w	lr, [r4]
   2d7ba:	7818      	ldrb	r0, [r3, #0]
   2d7bc:	f895 b000 	ldrb.w	fp, [r5]
   2d7c0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
   2d7c4:	ea08 2000 	and.w	r0, r8, r0, lsl #8
   2d7c8:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
   2d7cc:	ea40 000e 	orr.w	r0, r0, lr
   2d7d0:	ea40 00db 	orr.w	r0, r0, fp, lsr #3
                    for (bx = 0; bx < bx_limit; bx++) {
   2d7d4:	2901      	cmp	r1, #1
                        *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
   2d7d6:	8010      	strh	r0, [r2, #0]
                    for (bx = 0; bx < bx_limit; bx++) {
   2d7d8:	dd7b      	ble.n	2d8d2 <jpeg_decoder_read+0x1f2>
                        *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
   2d7da:	f894 e001 	ldrb.w	lr, [r4, #1]
   2d7de:	7858      	ldrb	r0, [r3, #1]
   2d7e0:	f895 b001 	ldrb.w	fp, [r5, #1]
   2d7e4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
   2d7e8:	ea08 2000 	and.w	r0, r8, r0, lsl #8
   2d7ec:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
   2d7f0:	ea40 000e 	orr.w	r0, r0, lr
   2d7f4:	ea40 00db 	orr.w	r0, r0, fp, lsr #3
                    for (bx = 0; bx < bx_limit; bx++) {
   2d7f8:	2902      	cmp	r1, #2
                        *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
   2d7fa:	8050      	strh	r0, [r2, #2]
                    for (bx = 0; bx < bx_limit; bx++) {
   2d7fc:	dd69      	ble.n	2d8d2 <jpeg_decoder_read+0x1f2>
                        *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
   2d7fe:	f894 e002 	ldrb.w	lr, [r4, #2]
   2d802:	7898      	ldrb	r0, [r3, #2]
   2d804:	f895 b002 	ldrb.w	fp, [r5, #2]
   2d808:	ea4f 0ece 	mov.w	lr, lr, lsl #3
   2d80c:	ea08 2000 	and.w	r0, r8, r0, lsl #8
   2d810:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
   2d814:	ea40 000e 	orr.w	r0, r0, lr
   2d818:	ea40 00db 	orr.w	r0, r0, fp, lsr #3
                    for (bx = 0; bx < bx_limit; bx++) {
   2d81c:	2903      	cmp	r1, #3
                        *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
   2d81e:	8090      	strh	r0, [r2, #4]
                    for (bx = 0; bx < bx_limit; bx++) {
   2d820:	dd57      	ble.n	2d8d2 <jpeg_decoder_read+0x1f2>
                        *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
   2d822:	f894 e003 	ldrb.w	lr, [r4, #3]
   2d826:	78d8      	ldrb	r0, [r3, #3]
   2d828:	f895 b003 	ldrb.w	fp, [r5, #3]
   2d82c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
   2d830:	ea08 2000 	and.w	r0, r8, r0, lsl #8
   2d834:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
   2d838:	ea40 000e 	orr.w	r0, r0, lr
   2d83c:	ea40 00db 	orr.w	r0, r0, fp, lsr #3
                    for (bx = 0; bx < bx_limit; bx++) {
   2d840:	2904      	cmp	r1, #4
                        *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
   2d842:	80d0      	strh	r0, [r2, #6]
                    for (bx = 0; bx < bx_limit; bx++) {
   2d844:	dd45      	ble.n	2d8d2 <jpeg_decoder_read+0x1f2>
                        *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
   2d846:	f894 e004 	ldrb.w	lr, [r4, #4]
   2d84a:	7918      	ldrb	r0, [r3, #4]
   2d84c:	f895 b004 	ldrb.w	fp, [r5, #4]
   2d850:	ea4f 0ece 	mov.w	lr, lr, lsl #3
   2d854:	ea08 2000 	and.w	r0, r8, r0, lsl #8
   2d858:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
   2d85c:	ea40 000e 	orr.w	r0, r0, lr
   2d860:	ea40 00db 	orr.w	r0, r0, fp, lsr #3
                    for (bx = 0; bx < bx_limit; bx++) {
   2d864:	2905      	cmp	r1, #5
                        *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
   2d866:	8110      	strh	r0, [r2, #8]
                    for (bx = 0; bx < bx_limit; bx++) {
   2d868:	dd33      	ble.n	2d8d2 <jpeg_decoder_read+0x1f2>
                        *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
   2d86a:	f894 e005 	ldrb.w	lr, [r4, #5]
   2d86e:	7958      	ldrb	r0, [r3, #5]
   2d870:	f895 b005 	ldrb.w	fp, [r5, #5]
   2d874:	ea4f 0ece 	mov.w	lr, lr, lsl #3
   2d878:	ea08 2000 	and.w	r0, r8, r0, lsl #8
   2d87c:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
   2d880:	ea40 000e 	orr.w	r0, r0, lr
   2d884:	ea40 00db 	orr.w	r0, r0, fp, lsr #3
                    for (bx = 0; bx < bx_limit; bx++) {
   2d888:	2906      	cmp	r1, #6
                        *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
   2d88a:	8150      	strh	r0, [r2, #10]
                    for (bx = 0; bx < bx_limit; bx++) {
   2d88c:	dd21      	ble.n	2d8d2 <jpeg_decoder_read+0x1f2>
                        *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
   2d88e:	f894 e006 	ldrb.w	lr, [r4, #6]
   2d892:	7998      	ldrb	r0, [r3, #6]
   2d894:	f895 b006 	ldrb.w	fp, [r5, #6]
   2d898:	ea4f 0ece 	mov.w	lr, lr, lsl #3
   2d89c:	ea08 2000 	and.w	r0, r8, r0, lsl #8
   2d8a0:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
   2d8a4:	ea40 000e 	orr.w	r0, r0, lr
   2d8a8:	ea40 00db 	orr.w	r0, r0, fp, lsr #3
                    for (bx = 0; bx < bx_limit; bx++) {
   2d8ac:	2907      	cmp	r1, #7
                        *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
   2d8ae:	8190      	strh	r0, [r2, #12]
                    for (bx = 0; bx < bx_limit; bx++) {
   2d8b0:	dd0f      	ble.n	2d8d2 <jpeg_decoder_read+0x1f2>
                        *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
   2d8b2:	f894 e007 	ldrb.w	lr, [r4, #7]
   2d8b6:	79d8      	ldrb	r0, [r3, #7]
   2d8b8:	f895 b007 	ldrb.w	fp, [r5, #7]
   2d8bc:	ea4f 0ece 	mov.w	lr, lr, lsl #3
   2d8c0:	ea08 2000 	and.w	r0, r8, r0, lsl #8
   2d8c4:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
   2d8c8:	ea40 000e 	orr.w	r0, r0, lr
   2d8cc:	ea40 00db 	orr.w	r0, r0, fp, lsr #3
   2d8d0:	81d0      	strh	r0, [r2, #14]
                for (by = 0; by < by_limit; by++) {
   2d8d2:	3601      	adds	r6, #1
   2d8d4:	42b7      	cmp	r7, r6
                    pSrcR += (8 - bx_limit);
   2d8d6:	f103 0308 	add.w	r3, r3, #8
                    pSrcG += (8 - bx_limit);
   2d8da:	f104 0408 	add.w	r4, r4, #8
                    pSrcB += (8 - bx_limit);
   2d8de:	f105 0508 	add.w	r5, r5, #8
                    pDst_block += ctx->row_pitch;
   2d8e2:	444a      	add	r2, r9
                for (by = 0; by < by_limit; by++) {
   2d8e4:	f73f af67 	bgt.w	2d7b6 <jpeg_decoder_read+0xd6>
   2d8e8:	e9dd b002 	ldrd	fp, r0, [sp, #8]
   2d8ec:	f8dd e010 	ldr.w	lr, [sp, #16]
        for (x = 0; x < ctx->imgInfo.m_MCUWidth; x += 8) {
   2d8f0:	9b01      	ldr	r3, [sp, #4]
   2d8f2:	f10c 0c10 	add.w	ip, ip, #16
   2d8f6:	4563      	cmp	r3, ip
   2d8f8:	f1a1 0108 	sub.w	r1, r1, #8
   2d8fc:	f10e 0e40 	add.w	lr, lr, #64	@ 0x40
   2d900:	f100 0040 	add.w	r0, r0, #64	@ 0x40
   2d904:	f10b 0b40 	add.w	fp, fp, #64	@ 0x40
   2d908:	f47f af41 	bne.w	2d78e <jpeg_decoder_read+0xae>
    for (y = 0; y < ctx->imgInfo.m_MCUHeight; y += 8) {
   2d90c:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
        pDst_row += (ctx->row_pitch * 8);
   2d910:	990e      	ldr	r1, [sp, #56]	@ 0x38
    for (y = 0; y < ctx->imgInfo.m_MCUHeight; y += 8) {
   2d912:	9c07      	ldr	r4, [sp, #28]
        pDst_row += (ctx->row_pitch * 8);
   2d914:	440a      	add	r2, r1
    for (y = 0; y < ctx->imgInfo.m_MCUHeight; y += 8) {
   2d916:	990c      	ldr	r1, [sp, #48]	@ 0x30
   2d918:	3410      	adds	r4, #16
   2d91a:	428c      	cmp	r4, r1
   2d91c:	f1aa 0a08 	sub.w	sl, sl, #8
   2d920:	f103 0380 	add.w	r3, r3, #128	@ 0x80
   2d924:	f47f af1f 	bne.w	2d766 <jpeg_decoder_read+0x86>
   2d928:	e9dd 050f 	ldrd	r0, r5, [sp, #60]	@ 0x3c
   2d92c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
    ctx->MCUy = ctx->mcu_y;

    ctx->mcu_x++;
    if (ctx->mcu_x == ctx->imgInfo.m_MCUSPerRow) {
   2d92e:	6962      	ldr	r2, [r4, #20]
    ctx->mcu_x++;
   2d930:	1c6b      	adds	r3, r5, #1
    if (ctx->mcu_x == ctx->imgInfo.m_MCUSPerRow) {
   2d932:	4293      	cmp	r3, r2
    ctx->MCUy = ctx->mcu_y;
   2d934:	e9c4 5000 	strd	r5, r0, [r4]
    ctx->mcu_x++;
   2d938:	6423      	str	r3, [r4, #64]	@ 0x40
    if (ctx->mcu_x == ctx->imgInfo.m_MCUSPerRow) {
   2d93a:	d103      	bne.n	2d944 <jpeg_decoder_read+0x264>
        ctx->mcu_x = 0;
   2d93c:	2300      	movs	r3, #0
        ctx->mcu_y++;
   2d93e:	3001      	adds	r0, #1
   2d940:	e9c4 3010 	strd	r3, r0, [r4, #64]	@ 0x40
    ctx->status = pjpeg_decode_mcu();
   2d944:	f001 ffbe 	bl	2f8c4 <pjpeg_decode_mcu>
   2d948:	f884 0038 	strb.w	r0, [r4, #56]	@ 0x38
    if (ctx->status) {
   2d94c:	b108      	cbz	r0, 2d952 <jpeg_decoder_read+0x272>
        ctx->is_available = 0;
   2d94e:	2300      	movs	r3, #0
   2d950:	63e3      	str	r3, [r4, #60]	@ 0x3c

    if (jpeg_decoder_decode_mcu(ctx) == -1) {
        ctx->is_available = 0;
    }

    return 1;
   2d952:	2001      	movs	r0, #1
}
   2d954:	b013      	add	sp, #76	@ 0x4c
   2d956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return jpeg_decoder_decode_mcu(ctx);
}

void jpeg_decoder_abort(jpeg_decoder_context_t *ctx) {
    ctx->mcu_x = 0;
    ctx->mcu_y = 0;
   2d95a:	2000      	movs	r0, #0
    ctx->is_available = 0;
   2d95c:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
    ctx->mcu_y = 0;
   2d960:	6460      	str	r0, [r4, #68]	@ 0x44
}
   2d962:	b013      	add	sp, #76	@ 0x4c
   2d964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                for (by = 0; by < by_limit; by++) {
   2d968:	f1ba 0f00 	cmp.w	sl, #0
   2d96c:	ddc0      	ble.n	2d8f0 <jpeg_decoder_read+0x210>
   2d96e:	2900      	cmp	r1, #0
   2d970:	ddbe      	ble.n	2d8f0 <jpeg_decoder_read+0x210>
   2d972:	4625      	mov	r5, r4
   2d974:	f8cd b008 	str.w	fp, [sp, #8]
                        *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
   2d978:	781e      	ldrb	r6, [r3, #0]
   2d97a:	00f4      	lsls	r4, r6, #3
   2d97c:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
   2d980:	ea08 2b06 	and.w	fp, r8, r6, lsl #8
   2d984:	ea44 040b 	orr.w	r4, r4, fp
   2d988:	ea44 04d6 	orr.w	r4, r4, r6, lsr #3
                    for (bx = 0; bx < bx_limit; bx++) {
   2d98c:	2901      	cmp	r1, #1
                        *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
   2d98e:	8014      	strh	r4, [r2, #0]
                    for (bx = 0; bx < bx_limit; bx++) {
   2d990:	dd5a      	ble.n	2da48 <jpeg_decoder_read+0x368>
                        *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
   2d992:	785e      	ldrb	r6, [r3, #1]
   2d994:	00f4      	lsls	r4, r6, #3
   2d996:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
   2d99a:	ea08 2b06 	and.w	fp, r8, r6, lsl #8
   2d99e:	ea44 040b 	orr.w	r4, r4, fp
   2d9a2:	ea44 04d6 	orr.w	r4, r4, r6, lsr #3
                    for (bx = 0; bx < bx_limit; bx++) {
   2d9a6:	2902      	cmp	r1, #2
                        *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
   2d9a8:	8054      	strh	r4, [r2, #2]
                    for (bx = 0; bx < bx_limit; bx++) {
   2d9aa:	dd4d      	ble.n	2da48 <jpeg_decoder_read+0x368>
                        *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
   2d9ac:	789e      	ldrb	r6, [r3, #2]
   2d9ae:	00f4      	lsls	r4, r6, #3
   2d9b0:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
   2d9b4:	ea08 2b06 	and.w	fp, r8, r6, lsl #8
   2d9b8:	ea44 040b 	orr.w	r4, r4, fp
   2d9bc:	ea44 04d6 	orr.w	r4, r4, r6, lsr #3
                    for (bx = 0; bx < bx_limit; bx++) {
   2d9c0:	2903      	cmp	r1, #3
                        *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
   2d9c2:	8094      	strh	r4, [r2, #4]
                    for (bx = 0; bx < bx_limit; bx++) {
   2d9c4:	dd40      	ble.n	2da48 <jpeg_decoder_read+0x368>
                        *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
   2d9c6:	78de      	ldrb	r6, [r3, #3]
   2d9c8:	00f4      	lsls	r4, r6, #3
   2d9ca:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
   2d9ce:	ea08 2b06 	and.w	fp, r8, r6, lsl #8
   2d9d2:	ea44 040b 	orr.w	r4, r4, fp
   2d9d6:	ea44 04d6 	orr.w	r4, r4, r6, lsr #3
                    for (bx = 0; bx < bx_limit; bx++) {
   2d9da:	2904      	cmp	r1, #4
                        *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
   2d9dc:	80d4      	strh	r4, [r2, #6]
                    for (bx = 0; bx < bx_limit; bx++) {
   2d9de:	dd33      	ble.n	2da48 <jpeg_decoder_read+0x368>
                        *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
   2d9e0:	791e      	ldrb	r6, [r3, #4]
   2d9e2:	00f4      	lsls	r4, r6, #3
   2d9e4:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
   2d9e8:	ea08 2b06 	and.w	fp, r8, r6, lsl #8
   2d9ec:	ea44 040b 	orr.w	r4, r4, fp
   2d9f0:	ea44 04d6 	orr.w	r4, r4, r6, lsr #3
                    for (bx = 0; bx < bx_limit; bx++) {
   2d9f4:	2905      	cmp	r1, #5
                        *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
   2d9f6:	8114      	strh	r4, [r2, #8]
                    for (bx = 0; bx < bx_limit; bx++) {
   2d9f8:	dd26      	ble.n	2da48 <jpeg_decoder_read+0x368>
                        *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
   2d9fa:	795e      	ldrb	r6, [r3, #5]
   2d9fc:	00f4      	lsls	r4, r6, #3
   2d9fe:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
   2da02:	ea08 2b06 	and.w	fp, r8, r6, lsl #8
   2da06:	ea44 040b 	orr.w	r4, r4, fp
   2da0a:	ea44 04d6 	orr.w	r4, r4, r6, lsr #3
                    for (bx = 0; bx < bx_limit; bx++) {
   2da0e:	2906      	cmp	r1, #6
                        *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
   2da10:	8154      	strh	r4, [r2, #10]
                    for (bx = 0; bx < bx_limit; bx++) {
   2da12:	dd19      	ble.n	2da48 <jpeg_decoder_read+0x368>
                        *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
   2da14:	799e      	ldrb	r6, [r3, #6]
   2da16:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
   2da1a:	ea08 2406 	and.w	r4, r8, r6, lsl #8
   2da1e:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
   2da22:	ea44 040b 	orr.w	r4, r4, fp
   2da26:	ea44 04d6 	orr.w	r4, r4, r6, lsr #3
                    for (bx = 0; bx < bx_limit; bx++) {
   2da2a:	2907      	cmp	r1, #7
                        *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
   2da2c:	8194      	strh	r4, [r2, #12]
                    for (bx = 0; bx < bx_limit; bx++) {
   2da2e:	dd0b      	ble.n	2da48 <jpeg_decoder_read+0x368>
                        *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
   2da30:	79de      	ldrb	r6, [r3, #7]
   2da32:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
   2da36:	ea08 2406 	and.w	r4, r8, r6, lsl #8
   2da3a:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
   2da3e:	ea44 040b 	orr.w	r4, r4, fp
   2da42:	ea44 04d6 	orr.w	r4, r4, r6, lsr #3
   2da46:	81d4      	strh	r4, [r2, #14]
                for (by = 0; by < by_limit; by++) {
   2da48:	3501      	adds	r5, #1
   2da4a:	42af      	cmp	r7, r5
                    pSrcR += (8 - bx_limit);
   2da4c:	f103 0308 	add.w	r3, r3, #8
                    pDst_block += ctx->row_pitch;
   2da50:	444a      	add	r2, r9
                for (by = 0; by < by_limit; by++) {
   2da52:	dc91      	bgt.n	2d978 <jpeg_decoder_read+0x298>
   2da54:	f8dd b008 	ldr.w	fp, [sp, #8]
   2da58:	e74a      	b.n	2d8f0 <jpeg_decoder_read+0x210>
   2da5a:	bf00      	nop
   2da5c:	fffff800 	.word	0xfffff800

0002da60 <jpeg_decoder_init>:
int jpeg_decoder_init(jpeg_decoder_context_t *ctx, const uint8_t *array, uint32_t array_size) {
   2da60:	b570      	push	{r4, r5, r6, lr}
   2da62:	460b      	mov	r3, r1
    ctx->mcu_y = 0;
   2da64:	2500      	movs	r5, #0
    ctx->jpg_data = (uint8_t *)array;
   2da66:	6343      	str	r3, [r0, #52]	@ 0x34
    ctx->g_nInFileSize = array_size;
   2da68:	6482      	str	r2, [r0, #72]	@ 0x48
    ctx->is_available = 0;
   2da6a:	e9c0 550f 	strd	r5, r5, [r0, #60]	@ 0x3c
int jpeg_decoder_init(jpeg_decoder_context_t *ctx, const uint8_t *array, uint32_t array_size) {
   2da6e:	4604      	mov	r4, r0
    ctx->mcu_y = 0;
   2da70:	6445      	str	r5, [r0, #68]	@ 0x44
    ctx->status = 0;
   2da72:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
    ctx->g_nInFileOfs = 0;
   2da76:	64c5      	str	r5, [r0, #76]	@ 0x4c
    ctx->status = pjpeg_decode_init(&ctx->imgInfo, pjpeg_callback, ctx, 0);
   2da78:	4602      	mov	r2, r0
   2da7a:	4912      	ldr	r1, [pc, #72]	@ (2dac4 <jpeg_decoder_init+0x64>)
   2da7c:	462b      	mov	r3, r5
   2da7e:	3008      	adds	r0, #8
   2da80:	f003 f8bc 	bl	30bfc <pjpeg_decode_init>
   2da84:	f884 0038 	strb.w	r0, [r4, #56]	@ 0x38
    if (ctx->status) {
   2da88:	b108      	cbz	r0, 2da8e <jpeg_decoder_init+0x2e>
        return 0;
   2da8a:	4628      	mov	r0, r5
}
   2da8c:	bd70      	pop	{r4, r5, r6, pc}
        ctx->pImage, 0, ctx->imgInfo.m_MCUWidth * ctx->imgInfo.m_MCUHeight * sizeof(*ctx->pImage));
   2da8e:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
    ctx->row_pitch = ctx->imgInfo.m_MCUWidth;
   2da92:	6522      	str	r2, [r4, #80]	@ 0x50
        ctx->pImage, 0, ctx->imgInfo.m_MCUWidth * ctx->imgInfo.m_MCUHeight * sizeof(*ctx->pImage));
   2da94:	fb03 f202 	mul.w	r2, r3, r2
    memset(
   2da98:	4601      	mov	r1, r0
   2da9a:	0052      	lsls	r2, r2, #1
   2da9c:	4606      	mov	r6, r0
   2da9e:	f104 0054 	add.w	r0, r4, #84	@ 0x54
   2daa2:	f7f9 fa1b 	bl	26edc <memset>
    ctx->is_available = 1;
   2daa6:	2301      	movs	r3, #1
   2daa8:	63e3      	str	r3, [r4, #60]	@ 0x3c
    ctx->status = pjpeg_decode_mcu();
   2daaa:	f001 ff0b 	bl	2f8c4 <pjpeg_decode_mcu>
   2daae:	f884 0038 	strb.w	r0, [r4, #56]	@ 0x38
    if (ctx->status) {
   2dab2:	b128      	cbz	r0, 2dac0 <jpeg_decoder_init+0x60>
        if (ctx->status != PJPG_NO_MORE_BLOCKS) {
   2dab4:	2801      	cmp	r0, #1
        ctx->is_available = 0;
   2dab6:	63e6      	str	r6, [r4, #60]	@ 0x3c
        if (ctx->status != PJPG_NO_MORE_BLOCKS) {
   2dab8:	d002      	beq.n	2dac0 <jpeg_decoder_init+0x60>
            return -1;
   2daba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
   2dabe:	bd70      	pop	{r4, r5, r6, pc}
    return 1;
   2dac0:	2001      	movs	r0, #1
}
   2dac2:	bd70      	pop	{r4, r5, r6, pc}
   2dac4:	0002d6ad 	.word	0x0002d6ad

0002dac8 <upsampleCb>:

// 198/256
// B = Y + 1.772 (Cb-128)
/*----------------------------------------------------------------------------*/
// Cb upsample and accumulate, 4x4 to 8x8
static void upsampleCb(uint8 srcOfs, uint8 dstOfs) {
   2dac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    // Cb - affects G and B
    uint8 x, y;
    int16 *pSrc = gCoeffBuf + srcOfs;
   2dacc:	4e76      	ldr	r6, [pc, #472]	@ (2dca8 <upsampleCb+0x1e0>)
    uint8 *pDstG = gMCUBufG + dstOfs;
   2dace:	4d77      	ldr	r5, [pc, #476]	@ (2dcac <upsampleCb+0x1e4>)
    uint8 *pDstB = gMCUBufB + dstOfs;
   2dad0:	4c77      	ldr	r4, [pc, #476]	@ (2dcb0 <upsampleCb+0x1e8>)
    int16 *pSrc = gCoeffBuf + srcOfs;
   2dad2:	eb06 0640 	add.w	r6, r6, r0, lsl #1
    uint8 *pDstG = gMCUBufG + dstOfs;
   2dad6:	f106 0c08 	add.w	ip, r6, #8
   2dada:	440d      	add	r5, r1
    uint8 *pDstB = gMCUBufB + dstOfs;
   2dadc:	440c      	add	r4, r1
    for (y = 0; y < 4; y++) {
   2dade:	3648      	adds	r6, #72	@ 0x48
            int16 cbG, cbB;

            cbG = ((cb * 88U) >> 8U) - 44U;
            pDstG[0] = subAndClamp(pDstG[0], cbG);
            pDstG[1] = subAndClamp(pDstG[1], cbG);
            pDstG[8] = subAndClamp(pDstG[8], cbG);
   2dae0:	f04f 0eff 	mov.w	lr, #255	@ 0xff
   2dae4:	f1ac 0008 	sub.w	r0, ip, #8
        for (x = 0; x < 4; x++) {
   2dae8:	1ca9      	adds	r1, r5, #2
   2daea:	1ca2      	adds	r2, r4, #2
            uint8 cb = (uint8)*pSrc++;
   2daec:	f930 3b02 	ldrsh.w	r3, [r0], #2
    b = a - b;
   2daf0:	f811 9c02 	ldrb.w	r9, [r1, #-2]
   2daf4:	f811 ac01 	ldrb.w	sl, [r1, #-1]
            cbG = ((cb * 88U) >> 8U) - 44U;
   2daf8:	fa5f f883 	uxtb.w	r8, r3
   2dafc:	eb08 0788 	add.w	r7, r8, r8, lsl #2
   2db00:	eb08 0747 	add.w	r7, r8, r7, lsl #1
   2db04:	097f      	lsrs	r7, r7, #5
   2db06:	3f2c      	subs	r7, #44	@ 0x2c
   2db08:	b2bf      	uxth	r7, r7
    b = a - b;
   2db0a:	eba9 0907 	sub.w	r9, r9, r7
   2db0e:	fa1f f989 	uxth.w	r9, r9
   2db12:	ebaa 0a07 	sub.w	sl, sl, r7
    if ((uint16)b > 255U) {
   2db16:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
            uint8 cb = (uint8)*pSrc++;
   2db1a:	4643      	mov	r3, r8
    b = a - b;
   2db1c:	fa1f fa8a 	uxth.w	sl, sl
    if ((uint16)b > 255U) {
   2db20:	f240 8094 	bls.w	2dc4c <upsampleCb+0x184>
        if (b < 0)
   2db24:	f419 4f00 	tst.w	r9, #32768	@ 0x8000
   2db28:	f000 8088 	beq.w	2dc3c <upsampleCb+0x174>
            return 0;
   2db2c:	f04f 0900 	mov.w	r9, #0
    if ((uint16)b > 255U) {
   2db30:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
            pDstG[0] = subAndClamp(pDstG[0], cbG);
   2db34:	f801 9c02 	strb.w	r9, [r1, #-2]
    if ((uint16)b > 255U) {
   2db38:	f240 8085 	bls.w	2dc46 <upsampleCb+0x17e>
        if (b < 0)
   2db3c:	f41a 4f00 	tst.w	sl, #32768	@ 0x8000
   2db40:	f000 8087 	beq.w	2dc52 <upsampleCb+0x18a>
            return 0;
   2db44:	f04f 0a00 	mov.w	sl, #0
    b = a - b;
   2db48:	f891 9006 	ldrb.w	r9, [r1, #6]
            pDstG[1] = subAndClamp(pDstG[1], cbG);
   2db4c:	f801 ac01 	strb.w	sl, [r1, #-1]
    b = a - b;
   2db50:	eba9 0907 	sub.w	r9, r9, r7
   2db54:	fa1f f989 	uxth.w	r9, r9
    if ((uint16)b > 255U) {
   2db58:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
   2db5c:	d96b      	bls.n	2dc36 <upsampleCb+0x16e>
        if (b < 0)
   2db5e:	f419 4f00 	tst.w	r9, #32768	@ 0x8000
   2db62:	f000 8081 	beq.w	2dc68 <upsampleCb+0x1a0>
            return 0;
   2db66:	f04f 0900 	mov.w	r9, #0
    b = a - b;
   2db6a:	f891 a007 	ldrb.w	sl, [r1, #7]
            pDstG[8] = subAndClamp(pDstG[8], cbG);
   2db6e:	f881 9006 	strb.w	r9, [r1, #6]
    b = a - b;
   2db72:	ebaa 0707 	sub.w	r7, sl, r7
   2db76:	b2bf      	uxth	r7, r7
    if ((uint16)b > 255U) {
   2db78:	2fff      	cmp	r7, #255	@ 0xff
   2db7a:	d95a      	bls.n	2dc32 <upsampleCb+0x16a>
        if (b < 0)
   2db7c:	43ff      	mvns	r7, r7
   2db7e:	f347 37c0 	sbfx	r7, r7, #15, #1
   2db82:	b2ff      	uxtb	r7, r7
            pDstG[9] = subAndClamp(pDstG[9], cbG);

            cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
   2db84:	eb08 0848 	add.w	r8, r8, r8, lsl #1
   2db88:	eb08 1848 	add.w	r8, r8, r8, lsl #5
   2db8c:	3be3      	subs	r3, #227	@ 0xe3
    b = a + b;
   2db8e:	f812 9c02 	ldrb.w	r9, [r2, #-2]
   2db92:	f812 ac01 	ldrb.w	sl, [r2, #-1]
            pDstG[9] = subAndClamp(pDstG[9], cbG);
   2db96:	71cf      	strb	r7, [r1, #7]
            cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
   2db98:	eb03 13d8 	add.w	r3, r3, r8, lsr #7
   2db9c:	b29b      	uxth	r3, r3
    b = a + b;
   2db9e:	eb03 0809 	add.w	r8, r3, r9
   2dba2:	fa1f f888 	uxth.w	r8, r8
   2dba6:	eb03 090a 	add.w	r9, r3, sl
    if ((uint16)b > 255U) {
   2dbaa:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
    b = a + b;
   2dbae:	fa1f f789 	uxth.w	r7, r9
    if ((uint16)b > 255U) {
   2dbb2:	d93b      	bls.n	2dc2c <upsampleCb+0x164>
        if (b < 0)
   2dbb4:	f418 4f00 	tst.w	r8, #32768	@ 0x8000
   2dbb8:	d061      	beq.n	2dc7e <upsampleCb+0x1b6>
            return 0;
   2dbba:	f04f 0800 	mov.w	r8, #0
    if ((uint16)b > 255U) {
   2dbbe:	2fff      	cmp	r7, #255	@ 0xff
            pDstB[0] = addAndClamp(pDstB[0], cbB);
   2dbc0:	f802 8c02 	strb.w	r8, [r2, #-2]
    if ((uint16)b > 255U) {
   2dbc4:	d930      	bls.n	2dc28 <upsampleCb+0x160>
        if (b < 0)
   2dbc6:	043f      	lsls	r7, r7, #16
   2dbc8:	d55d      	bpl.n	2dc86 <upsampleCb+0x1be>
            return 0;
   2dbca:	2700      	movs	r7, #0
    b = a + b;
   2dbcc:	f892 8006 	ldrb.w	r8, [r2, #6]
            pDstB[1] = addAndClamp(pDstB[1], cbB);
   2dbd0:	f802 7c01 	strb.w	r7, [r2, #-1]
    b = a + b;
   2dbd4:	eb03 0708 	add.w	r7, r3, r8
   2dbd8:	b2bf      	uxth	r7, r7
    if ((uint16)b > 255U) {
   2dbda:	2fff      	cmp	r7, #255	@ 0xff
   2dbdc:	d922      	bls.n	2dc24 <upsampleCb+0x15c>
        if (b < 0)
   2dbde:	043f      	lsls	r7, r7, #16
   2dbe0:	d558      	bpl.n	2dc94 <upsampleCb+0x1cc>
            return 0;
   2dbe2:	2700      	movs	r7, #0
    b = a + b;
   2dbe4:	f892 8007 	ldrb.w	r8, [r2, #7]
            pDstB[8] = addAndClamp(pDstB[8], cbB);
   2dbe8:	7197      	strb	r7, [r2, #6]
    b = a + b;
   2dbea:	4443      	add	r3, r8
   2dbec:	b29b      	uxth	r3, r3
    if ((uint16)b > 255U) {
   2dbee:	2bff      	cmp	r3, #255	@ 0xff
   2dbf0:	d916      	bls.n	2dc20 <upsampleCb+0x158>
        if (b < 0)
   2dbf2:	43db      	mvns	r3, r3
   2dbf4:	f343 33c0 	sbfx	r3, r3, #15, #1
   2dbf8:	b2db      	uxtb	r3, r3
        for (x = 0; x < 4; x++) {
   2dbfa:	4560      	cmp	r0, ip
            pDstB[9] = addAndClamp(pDstB[9], cbB);
   2dbfc:	71d3      	strb	r3, [r2, #7]
        for (x = 0; x < 4; x++) {
   2dbfe:	f101 0102 	add.w	r1, r1, #2
   2dc02:	f102 0202 	add.w	r2, r2, #2
   2dc06:	f47f af71 	bne.w	2daec <upsampleCb+0x24>
    for (y = 0; y < 4; y++) {
   2dc0a:	f100 0c10 	add.w	ip, r0, #16
   2dc0e:	4566      	cmp	r6, ip
            pDstG += 2;
            pDstB += 2;
        }

        pSrc = pSrc - 4 + 8;
        pDstG = pDstG - 8 + 16;
   2dc10:	f105 0510 	add.w	r5, r5, #16
        pDstB = pDstB - 8 + 16;
   2dc14:	f104 0410 	add.w	r4, r4, #16
    for (y = 0; y < 4; y++) {
   2dc18:	f47f af64 	bne.w	2dae4 <upsampleCb+0x1c>
    }
}
   2dc1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return (uint8)b;
   2dc20:	b2db      	uxtb	r3, r3
   2dc22:	e7ea      	b.n	2dbfa <upsampleCb+0x132>
   2dc24:	b2ff      	uxtb	r7, r7
   2dc26:	e7dd      	b.n	2dbe4 <upsampleCb+0x11c>
   2dc28:	b2ff      	uxtb	r7, r7
   2dc2a:	e7cf      	b.n	2dbcc <upsampleCb+0x104>
   2dc2c:	fa5f f888 	uxtb.w	r8, r8
   2dc30:	e7c5      	b.n	2dbbe <upsampleCb+0xf6>
    return (uint8)b;
   2dc32:	b2ff      	uxtb	r7, r7
   2dc34:	e7a6      	b.n	2db84 <upsampleCb+0xbc>
   2dc36:	fa5f f989 	uxtb.w	r9, r9
   2dc3a:	e796      	b.n	2db6a <upsampleCb+0xa2>
    if ((uint16)b > 255U) {
   2dc3c:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
            pDstG[0] = subAndClamp(pDstG[0], cbG);
   2dc40:	f801 ec02 	strb.w	lr, [r1, #-2]
    if ((uint16)b > 255U) {
   2dc44:	d805      	bhi.n	2dc52 <upsampleCb+0x18a>
    return (uint8)b;
   2dc46:	fa5f fa8a 	uxtb.w	sl, sl
   2dc4a:	e77d      	b.n	2db48 <upsampleCb+0x80>
   2dc4c:	fa5f f989 	uxtb.w	r9, r9
   2dc50:	e76e      	b.n	2db30 <upsampleCb+0x68>
    b = a - b;
   2dc52:	f891 9006 	ldrb.w	r9, [r1, #6]
            pDstG[1] = subAndClamp(pDstG[1], cbG);
   2dc56:	f801 ec01 	strb.w	lr, [r1, #-1]
    b = a - b;
   2dc5a:	eba9 0907 	sub.w	r9, r9, r7
   2dc5e:	fa1f f989 	uxth.w	r9, r9
    if ((uint16)b > 255U) {
   2dc62:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
   2dc66:	d9e6      	bls.n	2dc36 <upsampleCb+0x16e>
    b = a - b;
   2dc68:	f891 9007 	ldrb.w	r9, [r1, #7]
            pDstG[8] = subAndClamp(pDstG[8], cbG);
   2dc6c:	f881 e006 	strb.w	lr, [r1, #6]
    b = a - b;
   2dc70:	eba9 0707 	sub.w	r7, r9, r7
   2dc74:	b2bf      	uxth	r7, r7
    if ((uint16)b > 255U) {
   2dc76:	2fff      	cmp	r7, #255	@ 0xff
   2dc78:	d9db      	bls.n	2dc32 <upsampleCb+0x16a>
            return 255;
   2dc7a:	27ff      	movs	r7, #255	@ 0xff
   2dc7c:	e782      	b.n	2db84 <upsampleCb+0xbc>
    if ((uint16)b > 255U) {
   2dc7e:	2fff      	cmp	r7, #255	@ 0xff
            pDstB[0] = addAndClamp(pDstB[0], cbB);
   2dc80:	f802 ec02 	strb.w	lr, [r2, #-2]
    if ((uint16)b > 255U) {
   2dc84:	d9d0      	bls.n	2dc28 <upsampleCb+0x160>
    b = a + b;
   2dc86:	7997      	ldrb	r7, [r2, #6]
            pDstB[1] = addAndClamp(pDstB[1], cbB);
   2dc88:	f802 ec01 	strb.w	lr, [r2, #-1]
    b = a + b;
   2dc8c:	441f      	add	r7, r3
   2dc8e:	b2bf      	uxth	r7, r7
    if ((uint16)b > 255U) {
   2dc90:	2fff      	cmp	r7, #255	@ 0xff
   2dc92:	d9c7      	bls.n	2dc24 <upsampleCb+0x15c>
    b = a + b;
   2dc94:	79d7      	ldrb	r7, [r2, #7]
            pDstB[8] = addAndClamp(pDstB[8], cbB);
   2dc96:	f882 e006 	strb.w	lr, [r2, #6]
    b = a + b;
   2dc9a:	443b      	add	r3, r7
   2dc9c:	b29b      	uxth	r3, r3
    if ((uint16)b > 255U) {
   2dc9e:	2bff      	cmp	r3, #255	@ 0xff
   2dca0:	d9be      	bls.n	2dc20 <upsampleCb+0x158>
            return 255;
   2dca2:	23ff      	movs	r3, #255	@ 0xff
   2dca4:	e7a9      	b.n	2dbfa <upsampleCb+0x132>
   2dca6:	bf00      	nop
   2dca8:	100511c8 	.word	0x100511c8
   2dcac:	10050fc8 	.word	0x10050fc8
   2dcb0:	10050ec8 	.word	0x10050ec8

0002dcb4 <upsampleCbH>:
/*----------------------------------------------------------------------------*/
// Cb upsample and accumulate, 4x8 to 8x8
static void upsampleCbH(uint8 srcOfs, uint8 dstOfs) {
    // Cb - affects G and B
    uint8 x, y;
    int16 *pSrc = gCoeffBuf + srcOfs;
   2dcb4:	4bbb      	ldr	r3, [pc, #748]	@ (2dfa4 <upsampleCbH+0x2f0>)
static void upsampleCbH(uint8 srcOfs, uint8 dstOfs) {
   2dcb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2dcba:	4dbb      	ldr	r5, [pc, #748]	@ (2dfa8 <upsampleCbH+0x2f4>)
   2dcbc:	4cbb      	ldr	r4, [pc, #748]	@ (2dfac <upsampleCbH+0x2f8>)
   2dcbe:	f101 0208 	add.w	r2, r1, #8
    int16 *pSrc = gCoeffBuf + srcOfs;
   2dcc2:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    uint8 *pDstG = gMCUBufG + dstOfs;
    uint8 *pDstB = gMCUBufB + dstOfs;
    for (y = 0; y < 8; y++) {
   2dcc6:	f100 0e10 	add.w	lr, r0, #16
   2dcca:	eb02 0c05 	add.w	ip, r2, r5
   2dcce:	3090      	adds	r0, #144	@ 0x90
   2dcd0:	4422      	add	r2, r4
        for (x = 0; x < 4; x++) {
            uint8 cb = (uint8)*pSrc++;
            int16 cbG, cbB;

            cbG = ((cb * 88U) >> 8U) - 44U;
            pDstG[0] = subAndClamp(pDstG[0], cbG);
   2dcd2:	21ff      	movs	r1, #255	@ 0xff
   2dcd4:	e0f8      	b.n	2dec8 <upsampleCbH+0x214>
    return (uint8)b;
   2dcd6:	b2f6      	uxtb	r6, r6
    if ((uint16)b > 255U) {
   2dcd8:	2dff      	cmp	r5, #255	@ 0xff
        if (b < 0)
   2dcda:	bf88      	it	hi
   2dcdc:	43ed      	mvnhi	r5, r5
            pDstG[0] = subAndClamp(pDstG[0], cbG);
   2dcde:	f80c 6c08 	strb.w	r6, [ip, #-8]
        if (b < 0)
   2dce2:	bf88      	it	hi
   2dce4:	f345 35c0 	sbfxhi	r5, r5, #15, #1
   2dce8:	b2ed      	uxtb	r5, r5
            pDstG[1] = subAndClamp(pDstG[1], cbG);

            cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
   2dcea:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   2dcee:	eb04 1444 	add.w	r4, r4, r4, lsl #5
   2dcf2:	3be3      	subs	r3, #227	@ 0xe3
   2dcf4:	eb03 13d4 	add.w	r3, r3, r4, lsr #7
    b = a + b;
   2dcf8:	f812 6c08 	ldrb.w	r6, [r2, #-8]
   2dcfc:	f812 7c07 	ldrb.w	r7, [r2, #-7]
            pDstG[1] = subAndClamp(pDstG[1], cbG);
   2dd00:	f80c 5c07 	strb.w	r5, [ip, #-7]
            cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
   2dd04:	b29b      	uxth	r3, r3
    b = a + b;
   2dd06:	199c      	adds	r4, r3, r6
   2dd08:	b2a4      	uxth	r4, r4
   2dd0a:	443b      	add	r3, r7
    if ((uint16)b > 255U) {
   2dd0c:	2cff      	cmp	r4, #255	@ 0xff
    b = a + b;
   2dd0e:	b29b      	uxth	r3, r3
    if ((uint16)b > 255U) {
   2dd10:	f200 810c 	bhi.w	2df2c <upsampleCbH+0x278>
    return (uint8)b;
   2dd14:	b2e4      	uxtb	r4, r4
    if ((uint16)b > 255U) {
   2dd16:	2bff      	cmp	r3, #255	@ 0xff
        if (b < 0)
   2dd18:	bf88      	it	hi
   2dd1a:	43db      	mvnhi	r3, r3
            pDstB[0] = addAndClamp(pDstB[0], cbB);
   2dd1c:	f802 4c08 	strb.w	r4, [r2, #-8]
        if (b < 0)
   2dd20:	bf88      	it	hi
   2dd22:	f343 33c0 	sbfxhi	r3, r3, #15, #1
   2dd26:	b2dc      	uxtb	r4, r3
            uint8 cb = (uint8)*pSrc++;
   2dd28:	f93e 3c0e 	ldrsh.w	r3, [lr, #-14]
    b = a - b;
   2dd2c:	f81c 7c06 	ldrb.w	r7, [ip, #-6]
   2dd30:	f81c 8c05 	ldrb.w	r8, [ip, #-5]
            pDstB[1] = addAndClamp(pDstB[1], cbB);
   2dd34:	f802 4c07 	strb.w	r4, [r2, #-7]
            cbG = ((cb * 88U) >> 8U) - 44U;
   2dd38:	b2dd      	uxtb	r5, r3
   2dd3a:	eb05 0685 	add.w	r6, r5, r5, lsl #2
   2dd3e:	eb05 0646 	add.w	r6, r5, r6, lsl #1
   2dd42:	0976      	lsrs	r6, r6, #5
   2dd44:	3e2c      	subs	r6, #44	@ 0x2c
   2dd46:	b2b6      	uxth	r6, r6
    b = a - b;
   2dd48:	1bbf      	subs	r7, r7, r6
   2dd4a:	eba8 0806 	sub.w	r8, r8, r6
   2dd4e:	b2be      	uxth	r6, r7
    if ((uint16)b > 255U) {
   2dd50:	2eff      	cmp	r6, #255	@ 0xff
            uint8 cb = (uint8)*pSrc++;
   2dd52:	462b      	mov	r3, r5
    b = a - b;
   2dd54:	fa1f f488 	uxth.w	r4, r8
    if ((uint16)b > 255U) {
   2dd58:	f200 80dc 	bhi.w	2df14 <upsampleCbH+0x260>
    return (uint8)b;
   2dd5c:	b2f6      	uxtb	r6, r6
    if ((uint16)b > 255U) {
   2dd5e:	2cff      	cmp	r4, #255	@ 0xff
        if (b < 0)
   2dd60:	bf88      	it	hi
   2dd62:	43e4      	mvnhi	r4, r4
            pDstG[0] = subAndClamp(pDstG[0], cbG);
   2dd64:	f80c 6c06 	strb.w	r6, [ip, #-6]
        if (b < 0)
   2dd68:	bf88      	it	hi
   2dd6a:	f344 34c0 	sbfxhi	r4, r4, #15, #1
   2dd6e:	b2e4      	uxtb	r4, r4
            cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
   2dd70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2dd74:	eb05 1545 	add.w	r5, r5, r5, lsl #5
   2dd78:	3be3      	subs	r3, #227	@ 0xe3
   2dd7a:	eb03 13d5 	add.w	r3, r3, r5, lsr #7
    b = a + b;
   2dd7e:	f812 6c06 	ldrb.w	r6, [r2, #-6]
   2dd82:	f812 7c05 	ldrb.w	r7, [r2, #-5]
            pDstG[1] = subAndClamp(pDstG[1], cbG);
   2dd86:	f80c 4c05 	strb.w	r4, [ip, #-5]
            cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
   2dd8a:	b29b      	uxth	r3, r3
    b = a + b;
   2dd8c:	199d      	adds	r5, r3, r6
   2dd8e:	b2ad      	uxth	r5, r5
   2dd90:	443b      	add	r3, r7
    if ((uint16)b > 255U) {
   2dd92:	2dff      	cmp	r5, #255	@ 0xff
    b = a + b;
   2dd94:	b29b      	uxth	r3, r3
    if ((uint16)b > 255U) {
   2dd96:	f200 80c5 	bhi.w	2df24 <upsampleCbH+0x270>
    return (uint8)b;
   2dd9a:	b2ed      	uxtb	r5, r5
    if ((uint16)b > 255U) {
   2dd9c:	2bff      	cmp	r3, #255	@ 0xff
        if (b < 0)
   2dd9e:	bf88      	it	hi
   2dda0:	43db      	mvnhi	r3, r3
            pDstB[0] = addAndClamp(pDstB[0], cbB);
   2dda2:	f802 5c06 	strb.w	r5, [r2, #-6]
        if (b < 0)
   2dda6:	bf88      	it	hi
   2dda8:	f343 33c0 	sbfxhi	r3, r3, #15, #1
   2ddac:	b2dc      	uxtb	r4, r3
            uint8 cb = (uint8)*pSrc++;
   2ddae:	f93e 3c0c 	ldrsh.w	r3, [lr, #-12]
    b = a - b;
   2ddb2:	f81c 7c04 	ldrb.w	r7, [ip, #-4]
   2ddb6:	f81c 8c03 	ldrb.w	r8, [ip, #-3]
            pDstB[1] = addAndClamp(pDstB[1], cbB);
   2ddba:	f802 4c05 	strb.w	r4, [r2, #-5]
            cbG = ((cb * 88U) >> 8U) - 44U;
   2ddbe:	b2dd      	uxtb	r5, r3
   2ddc0:	eb05 0685 	add.w	r6, r5, r5, lsl #2
   2ddc4:	eb05 0646 	add.w	r6, r5, r6, lsl #1
   2ddc8:	0976      	lsrs	r6, r6, #5
   2ddca:	3e2c      	subs	r6, #44	@ 0x2c
   2ddcc:	b2b6      	uxth	r6, r6
    b = a - b;
   2ddce:	1bbf      	subs	r7, r7, r6
   2ddd0:	eba8 0806 	sub.w	r8, r8, r6
   2ddd4:	b2be      	uxth	r6, r7
    if ((uint16)b > 255U) {
   2ddd6:	2eff      	cmp	r6, #255	@ 0xff
            uint8 cb = (uint8)*pSrc++;
   2ddd8:	462b      	mov	r3, r5
    b = a - b;
   2ddda:	fa1f f488 	uxth.w	r4, r8
    if ((uint16)b > 255U) {
   2ddde:	f200 8091 	bhi.w	2df04 <upsampleCbH+0x250>
    return (uint8)b;
   2dde2:	b2f6      	uxtb	r6, r6
    if ((uint16)b > 255U) {
   2dde4:	2cff      	cmp	r4, #255	@ 0xff
        if (b < 0)
   2dde6:	bf88      	it	hi
   2dde8:	43e4      	mvnhi	r4, r4
            pDstG[0] = subAndClamp(pDstG[0], cbG);
   2ddea:	f80c 6c04 	strb.w	r6, [ip, #-4]
        if (b < 0)
   2ddee:	bf88      	it	hi
   2ddf0:	f344 34c0 	sbfxhi	r4, r4, #15, #1
   2ddf4:	b2e4      	uxtb	r4, r4
            cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
   2ddf6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2ddfa:	eb05 1545 	add.w	r5, r5, r5, lsl #5
   2ddfe:	3be3      	subs	r3, #227	@ 0xe3
   2de00:	eb03 13d5 	add.w	r3, r3, r5, lsr #7
    b = a + b;
   2de04:	f812 6c04 	ldrb.w	r6, [r2, #-4]
   2de08:	f812 7c03 	ldrb.w	r7, [r2, #-3]
            pDstG[1] = subAndClamp(pDstG[1], cbG);
   2de0c:	f80c 4c03 	strb.w	r4, [ip, #-3]
            cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
   2de10:	b29b      	uxth	r3, r3
    b = a + b;
   2de12:	199d      	adds	r5, r3, r6
   2de14:	b2ad      	uxth	r5, r5
   2de16:	443b      	add	r3, r7
    if ((uint16)b > 255U) {
   2de18:	2dff      	cmp	r5, #255	@ 0xff
    b = a + b;
   2de1a:	b29b      	uxth	r3, r3
    if ((uint16)b > 255U) {
   2de1c:	d87e      	bhi.n	2df1c <upsampleCbH+0x268>
    return (uint8)b;
   2de1e:	b2ed      	uxtb	r5, r5
    if ((uint16)b > 255U) {
   2de20:	2bff      	cmp	r3, #255	@ 0xff
        if (b < 0)
   2de22:	bf88      	it	hi
   2de24:	43db      	mvnhi	r3, r3
            pDstB[0] = addAndClamp(pDstB[0], cbB);
   2de26:	f802 5c04 	strb.w	r5, [r2, #-4]
        if (b < 0)
   2de2a:	bf88      	it	hi
   2de2c:	f343 33c0 	sbfxhi	r3, r3, #15, #1
   2de30:	b2dc      	uxtb	r4, r3
            uint8 cb = (uint8)*pSrc++;
   2de32:	f93e 3c0a 	ldrsh.w	r3, [lr, #-10]
    b = a - b;
   2de36:	f81c 7c02 	ldrb.w	r7, [ip, #-2]
   2de3a:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
            pDstB[1] = addAndClamp(pDstB[1], cbB);
   2de3e:	f802 4c03 	strb.w	r4, [r2, #-3]
            cbG = ((cb * 88U) >> 8U) - 44U;
   2de42:	b2dd      	uxtb	r5, r3
   2de44:	eb05 0685 	add.w	r6, r5, r5, lsl #2
   2de48:	eb05 0646 	add.w	r6, r5, r6, lsl #1
   2de4c:	0976      	lsrs	r6, r6, #5
   2de4e:	3e2c      	subs	r6, #44	@ 0x2c
   2de50:	b2b6      	uxth	r6, r6
    b = a - b;
   2de52:	1bbf      	subs	r7, r7, r6
   2de54:	eba8 0806 	sub.w	r8, r8, r6
   2de58:	b2be      	uxth	r6, r7
    if ((uint16)b > 255U) {
   2de5a:	2eff      	cmp	r6, #255	@ 0xff
            uint8 cb = (uint8)*pSrc++;
   2de5c:	462b      	mov	r3, r5
    b = a - b;
   2de5e:	fa1f f488 	uxth.w	r4, r8
    if ((uint16)b > 255U) {
   2de62:	d853      	bhi.n	2df0c <upsampleCbH+0x258>
    return (uint8)b;
   2de64:	b2f6      	uxtb	r6, r6
    if ((uint16)b > 255U) {
   2de66:	2cff      	cmp	r4, #255	@ 0xff
        if (b < 0)
   2de68:	bf88      	it	hi
   2de6a:	43e4      	mvnhi	r4, r4
            pDstG[0] = subAndClamp(pDstG[0], cbG);
   2de6c:	f80c 6c02 	strb.w	r6, [ip, #-2]
        if (b < 0)
   2de70:	bf88      	it	hi
   2de72:	f344 34c0 	sbfxhi	r4, r4, #15, #1
   2de76:	b2e4      	uxtb	r4, r4
            cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
   2de78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2de7c:	eb05 1545 	add.w	r5, r5, r5, lsl #5
   2de80:	3be3      	subs	r3, #227	@ 0xe3
   2de82:	eb03 13d5 	add.w	r3, r3, r5, lsr #7
    b = a + b;
   2de86:	f812 6c02 	ldrb.w	r6, [r2, #-2]
   2de8a:	f812 7c01 	ldrb.w	r7, [r2, #-1]
            pDstG[1] = subAndClamp(pDstG[1], cbG);
   2de8e:	f80c 4c01 	strb.w	r4, [ip, #-1]
            cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
   2de92:	b29b      	uxth	r3, r3
    b = a + b;
   2de94:	199d      	adds	r5, r3, r6
   2de96:	b2ad      	uxth	r5, r5
   2de98:	443b      	add	r3, r7
    if ((uint16)b > 255U) {
   2de9a:	2dff      	cmp	r5, #255	@ 0xff
    b = a + b;
   2de9c:	b29b      	uxth	r3, r3
    if ((uint16)b > 255U) {
   2de9e:	d82d      	bhi.n	2defc <upsampleCbH+0x248>
    return (uint8)b;
   2dea0:	b2ed      	uxtb	r5, r5
    if ((uint16)b > 255U) {
   2dea2:	2bff      	cmp	r3, #255	@ 0xff
        if (b < 0)
   2dea4:	bf88      	it	hi
   2dea6:	43db      	mvnhi	r3, r3
            pDstB[0] = addAndClamp(pDstB[0], cbB);
   2dea8:	f802 5c02 	strb.w	r5, [r2, #-2]
        if (b < 0)
   2deac:	bf88      	it	hi
   2deae:	f343 33c0 	sbfxhi	r3, r3, #15, #1
   2deb2:	b2db      	uxtb	r3, r3
    for (y = 0; y < 8; y++) {
   2deb4:	f10e 0e10 	add.w	lr, lr, #16
   2deb8:	4586      	cmp	lr, r0
            pDstB[1] = addAndClamp(pDstB[1], cbB);
   2deba:	f802 3c01 	strb.w	r3, [r2, #-1]
    for (y = 0; y < 8; y++) {
   2debe:	f10c 0c08 	add.w	ip, ip, #8
   2dec2:	f102 0208 	add.w	r2, r2, #8
   2dec6:	d06b      	beq.n	2dfa0 <upsampleCbH+0x2ec>
            uint8 cb = (uint8)*pSrc++;
   2dec8:	f93e 3c10 	ldrsh.w	r3, [lr, #-16]
    b = a - b;
   2decc:	f81c 6c08 	ldrb.w	r6, [ip, #-8]
   2ded0:	f81c 7c07 	ldrb.w	r7, [ip, #-7]
            cbG = ((cb * 88U) >> 8U) - 44U;
   2ded4:	b2dc      	uxtb	r4, r3
   2ded6:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   2deda:	eb04 0545 	add.w	r5, r4, r5, lsl #1
   2dede:	096d      	lsrs	r5, r5, #5
   2dee0:	3d2c      	subs	r5, #44	@ 0x2c
   2dee2:	b2ad      	uxth	r5, r5
    b = a - b;
   2dee4:	1b76      	subs	r6, r6, r5
   2dee6:	b2b6      	uxth	r6, r6
   2dee8:	1b7d      	subs	r5, r7, r5
    if ((uint16)b > 255U) {
   2deea:	2eff      	cmp	r6, #255	@ 0xff
            uint8 cb = (uint8)*pSrc++;
   2deec:	4623      	mov	r3, r4
    b = a - b;
   2deee:	b2ad      	uxth	r5, r5
    if ((uint16)b > 255U) {
   2def0:	f67f aef1 	bls.w	2dcd6 <upsampleCbH+0x22>
        if (b < 0)
   2def4:	0436      	lsls	r6, r6, #16
   2def6:	d51d      	bpl.n	2df34 <upsampleCbH+0x280>
            return 0;
   2def8:	2600      	movs	r6, #0
   2defa:	e6ed      	b.n	2dcd8 <upsampleCbH+0x24>
        if (b < 0)
   2defc:	042c      	lsls	r4, r5, #16
   2defe:	d520      	bpl.n	2df42 <upsampleCbH+0x28e>
            return 0;
   2df00:	2500      	movs	r5, #0
   2df02:	e7ce      	b.n	2dea2 <upsampleCbH+0x1ee>
        if (b < 0)
   2df04:	0436      	lsls	r6, r6, #16
   2df06:	d536      	bpl.n	2df76 <upsampleCbH+0x2c2>
            return 0;
   2df08:	2600      	movs	r6, #0
   2df0a:	e76b      	b.n	2dde4 <upsampleCbH+0x130>
        if (b < 0)
   2df0c:	0436      	lsls	r6, r6, #16
   2df0e:	d525      	bpl.n	2df5c <upsampleCbH+0x2a8>
            return 0;
   2df10:	2600      	movs	r6, #0
   2df12:	e7a8      	b.n	2de66 <upsampleCbH+0x1b2>
        if (b < 0)
   2df14:	0436      	lsls	r6, r6, #16
   2df16:	d535      	bpl.n	2df84 <upsampleCbH+0x2d0>
            return 0;
   2df18:	2600      	movs	r6, #0
   2df1a:	e720      	b.n	2dd5e <upsampleCbH+0xaa>
        if (b < 0)
   2df1c:	042f      	lsls	r7, r5, #16
   2df1e:	d516      	bpl.n	2df4e <upsampleCbH+0x29a>
            return 0;
   2df20:	2500      	movs	r5, #0
   2df22:	e77d      	b.n	2de20 <upsampleCbH+0x16c>
        if (b < 0)
   2df24:	042f      	lsls	r7, r5, #16
   2df26:	d51f      	bpl.n	2df68 <upsampleCbH+0x2b4>
            return 0;
   2df28:	2500      	movs	r5, #0
   2df2a:	e737      	b.n	2dd9c <upsampleCbH+0xe8>
        if (b < 0)
   2df2c:	0427      	lsls	r7, r4, #16
   2df2e:	d530      	bpl.n	2df92 <upsampleCbH+0x2de>
            return 0;
   2df30:	2400      	movs	r4, #0
   2df32:	e6f0      	b.n	2dd16 <upsampleCbH+0x62>
    if ((uint16)b > 255U) {
   2df34:	2dff      	cmp	r5, #255	@ 0xff
            pDstG[0] = subAndClamp(pDstG[0], cbG);
   2df36:	f80c 1c08 	strb.w	r1, [ip, #-8]
    if ((uint16)b > 255U) {
   2df3a:	f67f aed5 	bls.w	2dce8 <upsampleCbH+0x34>
            return 255;
   2df3e:	25ff      	movs	r5, #255	@ 0xff
   2df40:	e6d3      	b.n	2dcea <upsampleCbH+0x36>
    if ((uint16)b > 255U) {
   2df42:	2bff      	cmp	r3, #255	@ 0xff
            pDstB[0] = addAndClamp(pDstB[0], cbB);
   2df44:	f802 1c02 	strb.w	r1, [r2, #-2]
    if ((uint16)b > 255U) {
   2df48:	d9b3      	bls.n	2deb2 <upsampleCbH+0x1fe>
            return 255;
   2df4a:	23ff      	movs	r3, #255	@ 0xff
   2df4c:	e7b2      	b.n	2deb4 <upsampleCbH+0x200>
    if ((uint16)b > 255U) {
   2df4e:	2bff      	cmp	r3, #255	@ 0xff
            pDstB[0] = addAndClamp(pDstB[0], cbB);
   2df50:	f802 1c04 	strb.w	r1, [r2, #-4]
    if ((uint16)b > 255U) {
   2df54:	f67f af6c 	bls.w	2de30 <upsampleCbH+0x17c>
            return 255;
   2df58:	24ff      	movs	r4, #255	@ 0xff
   2df5a:	e76a      	b.n	2de32 <upsampleCbH+0x17e>
    if ((uint16)b > 255U) {
   2df5c:	2cff      	cmp	r4, #255	@ 0xff
            pDstG[0] = subAndClamp(pDstG[0], cbG);
   2df5e:	f80c 1c02 	strb.w	r1, [ip, #-2]
    if ((uint16)b > 255U) {
   2df62:	d988      	bls.n	2de76 <upsampleCbH+0x1c2>
            return 255;
   2df64:	24ff      	movs	r4, #255	@ 0xff
   2df66:	e787      	b.n	2de78 <upsampleCbH+0x1c4>
    if ((uint16)b > 255U) {
   2df68:	2bff      	cmp	r3, #255	@ 0xff
            pDstB[0] = addAndClamp(pDstB[0], cbB);
   2df6a:	f802 1c06 	strb.w	r1, [r2, #-6]
    if ((uint16)b > 255U) {
   2df6e:	f67f af1d 	bls.w	2ddac <upsampleCbH+0xf8>
            return 255;
   2df72:	24ff      	movs	r4, #255	@ 0xff
   2df74:	e71b      	b.n	2ddae <upsampleCbH+0xfa>
    if ((uint16)b > 255U) {
   2df76:	2cff      	cmp	r4, #255	@ 0xff
            pDstG[0] = subAndClamp(pDstG[0], cbG);
   2df78:	f80c 1c04 	strb.w	r1, [ip, #-4]
    if ((uint16)b > 255U) {
   2df7c:	f67f af3a 	bls.w	2ddf4 <upsampleCbH+0x140>
            return 255;
   2df80:	24ff      	movs	r4, #255	@ 0xff
   2df82:	e738      	b.n	2ddf6 <upsampleCbH+0x142>
    if ((uint16)b > 255U) {
   2df84:	2cff      	cmp	r4, #255	@ 0xff
            pDstG[0] = subAndClamp(pDstG[0], cbG);
   2df86:	f80c 1c06 	strb.w	r1, [ip, #-6]
    if ((uint16)b > 255U) {
   2df8a:	f67f aef0 	bls.w	2dd6e <upsampleCbH+0xba>
            return 255;
   2df8e:	24ff      	movs	r4, #255	@ 0xff
   2df90:	e6ee      	b.n	2dd70 <upsampleCbH+0xbc>
    if ((uint16)b > 255U) {
   2df92:	2bff      	cmp	r3, #255	@ 0xff
            pDstB[0] = addAndClamp(pDstB[0], cbB);
   2df94:	f802 1c08 	strb.w	r1, [r2, #-8]
    if ((uint16)b > 255U) {
   2df98:	f67f aec5 	bls.w	2dd26 <upsampleCbH+0x72>
            return 255;
   2df9c:	24ff      	movs	r4, #255	@ 0xff
   2df9e:	e6c3      	b.n	2dd28 <upsampleCbH+0x74>
            pDstB += 2;
        }

        pSrc = pSrc - 4 + 8;
    }
}
   2dfa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2dfa4:	100511c8 	.word	0x100511c8
   2dfa8:	10050fc8 	.word	0x10050fc8
   2dfac:	10050ec8 	.word	0x10050ec8

0002dfb0 <upsampleCbV>:
/*----------------------------------------------------------------------------*/
// Cb upsample and accumulate, 8x4 to 8x8
static void upsampleCbV(uint8 srcOfs, uint8 dstOfs) {
   2dfb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // Cb - affects G and B
    uint8 x, y;
    int16 *pSrc = gCoeffBuf + srcOfs;
    uint8 *pDstG = gMCUBufG + dstOfs;
   2dfb4:	4b47      	ldr	r3, [pc, #284]	@ (2e0d4 <upsampleCbV+0x124>)
    uint8 *pDstB = gMCUBufB + dstOfs;
   2dfb6:	4a48      	ldr	r2, [pc, #288]	@ (2e0d8 <upsampleCbV+0x128>)
    uint8 *pDstG = gMCUBufG + dstOfs;
   2dfb8:	eb01 0903 	add.w	r9, r1, r3
    uint8 *pDstB = gMCUBufB + dstOfs;
   2dfbc:	f04f 0810 	mov.w	r8, #16
   2dfc0:	4b46      	ldr	r3, [pc, #280]	@ (2e0dc <upsampleCbV+0x12c>)
   2dfc2:	eb08 0840 	add.w	r8, r8, r0, lsl #1
static void upsampleCbV(uint8 srcOfs, uint8 dstOfs) {
   2dfc6:	b083      	sub	sp, #12
    uint8 *pDstB = gMCUBufB + dstOfs;
   2dfc8:	eb01 0e02 	add.w	lr, r1, r2
    for (y = 0; y < 4; y++) {
   2dfcc:	4498      	add	r8, r3
   2dfce:	f109 0040 	add.w	r0, r9, #64	@ 0x40
        for (x = 0; x < 8; x++) {
            uint8 cb = (uint8)*pSrc++;
            int16 cbG, cbB;

            cbG = ((cb * 88U) >> 8U) - 44U;
            pDstG[0] = subAndClamp(pDstG[0], cbG);
   2dfd2:	f04f 0aff 	mov.w	sl, #255	@ 0xff
   2dfd6:	f1a8 0510 	sub.w	r5, r8, #16
        for (x = 0; x < 8; x++) {
   2dfda:	f109 3cff 	add.w	ip, r9, #4294967295	@ 0xffffffff
   2dfde:	f109 0707 	add.w	r7, r9, #7
   2dfe2:	46f3      	mov	fp, lr
   2dfe4:	f10e 0607 	add.w	r6, lr, #7
   2dfe8:	f8cd 9004 	str.w	r9, [sp, #4]
   2dfec:	e02f      	b.n	2e04e <upsampleCbV+0x9e>
        if (b < 0)
   2dfee:	f419 4f00 	tst.w	r9, #32768	@ 0x8000
   2dff2:	d062      	beq.n	2e0ba <upsampleCbV+0x10a>
            return 0;
   2dff4:	f04f 0900 	mov.w	r9, #0
    if ((uint16)b > 255U) {
   2dff8:	2cff      	cmp	r4, #255	@ 0xff
            pDstG[0] = subAndClamp(pDstG[0], cbG);
   2dffa:	f88c 9000 	strb.w	r9, [ip]
    if ((uint16)b > 255U) {
   2dffe:	d944      	bls.n	2e08a <upsampleCbV+0xda>
        if (b < 0)
   2e000:	43e4      	mvns	r4, r4
   2e002:	f344 34c0 	sbfx	r4, r4, #15, #1
   2e006:	b2e4      	uxtb	r4, r4
            pDstG[8] = subAndClamp(pDstG[8], cbG);

            cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
   2e008:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   2e00c:	eb02 1242 	add.w	r2, r2, r2, lsl #5
   2e010:	3be3      	subs	r3, #227	@ 0xe3
   2e012:	eb03 13d2 	add.w	r3, r3, r2, lsr #7
    b = a + b;
   2e016:	f89e 2000 	ldrb.w	r2, [lr]
   2e01a:	7871      	ldrb	r1, [r6, #1]
            pDstG[8] = subAndClamp(pDstG[8], cbG);
   2e01c:	703c      	strb	r4, [r7, #0]
            cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
   2e01e:	b29b      	uxth	r3, r3
    b = a + b;
   2e020:	441a      	add	r2, r3
   2e022:	b292      	uxth	r2, r2
   2e024:	440b      	add	r3, r1
    if ((uint16)b > 255U) {
   2e026:	2aff      	cmp	r2, #255	@ 0xff
    b = a + b;
   2e028:	b29b      	uxth	r3, r3
    if ((uint16)b > 255U) {
   2e02a:	d944      	bls.n	2e0b6 <upsampleCbV+0x106>
        if (b < 0)
   2e02c:	0412      	lsls	r2, r2, #16
   2e02e:	d54a      	bpl.n	2e0c6 <upsampleCbV+0x116>
            return 0;
   2e030:	2200      	movs	r2, #0
    if ((uint16)b > 255U) {
   2e032:	2bff      	cmp	r3, #255	@ 0xff
            pDstB[0] = addAndClamp(pDstB[0], cbB);
   2e034:	f88e 2000 	strb.w	r2, [lr]
    if ((uint16)b > 255U) {
   2e038:	d929      	bls.n	2e08e <upsampleCbV+0xde>
        if (b < 0)
   2e03a:	43db      	mvns	r3, r3
   2e03c:	f343 33c0 	sbfx	r3, r3, #15, #1
   2e040:	b2db      	uxtb	r3, r3
        for (x = 0; x < 8; x++) {
   2e042:	4545      	cmp	r5, r8
            pDstB[8] = addAndClamp(pDstB[8], cbB);
   2e044:	f806 3f01 	strb.w	r3, [r6, #1]!

            ++pDstG;
            ++pDstB;
   2e048:	f10e 0e01 	add.w	lr, lr, #1
        for (x = 0; x < 8; x++) {
   2e04c:	d026      	beq.n	2e09c <upsampleCbV+0xec>
            uint8 cb = (uint8)*pSrc++;
   2e04e:	f935 3b02 	ldrsh.w	r3, [r5], #2
    b = a - b;
   2e052:	f81c 9f01 	ldrb.w	r9, [ip, #1]!
   2e056:	f817 4f01 	ldrb.w	r4, [r7, #1]!
            cbG = ((cb * 88U) >> 8U) - 44U;
   2e05a:	b2da      	uxtb	r2, r3
   2e05c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   2e060:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   2e064:	0949      	lsrs	r1, r1, #5
   2e066:	392c      	subs	r1, #44	@ 0x2c
   2e068:	b289      	uxth	r1, r1
    b = a - b;
   2e06a:	eba9 0901 	sub.w	r9, r9, r1
   2e06e:	fa1f f989 	uxth.w	r9, r9
   2e072:	1a64      	subs	r4, r4, r1
    if ((uint16)b > 255U) {
   2e074:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
            uint8 cb = (uint8)*pSrc++;
   2e078:	4613      	mov	r3, r2
    b = a - b;
   2e07a:	b2a4      	uxth	r4, r4
    if ((uint16)b > 255U) {
   2e07c:	d8b7      	bhi.n	2dfee <upsampleCbV+0x3e>
    return (uint8)b;
   2e07e:	fa5f f989 	uxtb.w	r9, r9
    if ((uint16)b > 255U) {
   2e082:	2cff      	cmp	r4, #255	@ 0xff
            pDstG[0] = subAndClamp(pDstG[0], cbG);
   2e084:	f88c 9000 	strb.w	r9, [ip]
    if ((uint16)b > 255U) {
   2e088:	d8ba      	bhi.n	2e000 <upsampleCbV+0x50>
    return (uint8)b;
   2e08a:	b2e4      	uxtb	r4, r4
   2e08c:	e7bc      	b.n	2e008 <upsampleCbV+0x58>
    return (uint8)b;
   2e08e:	b2db      	uxtb	r3, r3
        for (x = 0; x < 8; x++) {
   2e090:	4545      	cmp	r5, r8
            pDstB[8] = addAndClamp(pDstB[8], cbB);
   2e092:	f806 3f01 	strb.w	r3, [r6, #1]!
            ++pDstB;
   2e096:	f10e 0e01 	add.w	lr, lr, #1
        for (x = 0; x < 8; x++) {
   2e09a:	d1d8      	bne.n	2e04e <upsampleCbV+0x9e>
        }

        pDstG = pDstG - 8 + 16;
   2e09c:	f8dd 9004 	ldr.w	r9, [sp, #4]
   2e0a0:	f109 0910 	add.w	r9, r9, #16
    for (y = 0; y < 4; y++) {
   2e0a4:	4581      	cmp	r9, r0
        pDstB = pDstB - 8 + 16;
   2e0a6:	f10b 0e10 	add.w	lr, fp, #16
    for (y = 0; y < 4; y++) {
   2e0aa:	f105 0810 	add.w	r8, r5, #16
   2e0ae:	d192      	bne.n	2dfd6 <upsampleCbV+0x26>
    }
}
   2e0b0:	b003      	add	sp, #12
   2e0b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (uint8)b;
   2e0b6:	b2d2      	uxtb	r2, r2
   2e0b8:	e7bb      	b.n	2e032 <upsampleCbV+0x82>
    if ((uint16)b > 255U) {
   2e0ba:	2cff      	cmp	r4, #255	@ 0xff
            pDstG[0] = subAndClamp(pDstG[0], cbG);
   2e0bc:	f88c a000 	strb.w	sl, [ip]
    if ((uint16)b > 255U) {
   2e0c0:	d9e3      	bls.n	2e08a <upsampleCbV+0xda>
            return 255;
   2e0c2:	24ff      	movs	r4, #255	@ 0xff
   2e0c4:	e7a0      	b.n	2e008 <upsampleCbV+0x58>
    if ((uint16)b > 255U) {
   2e0c6:	2bff      	cmp	r3, #255	@ 0xff
            pDstB[0] = addAndClamp(pDstB[0], cbB);
   2e0c8:	f88e a000 	strb.w	sl, [lr]
    if ((uint16)b > 255U) {
   2e0cc:	d9df      	bls.n	2e08e <upsampleCbV+0xde>
            return 255;
   2e0ce:	23ff      	movs	r3, #255	@ 0xff
   2e0d0:	e7b7      	b.n	2e042 <upsampleCbV+0x92>
   2e0d2:	bf00      	nop
   2e0d4:	10050fc8 	.word	0x10050fc8
   2e0d8:	10050ec8 	.word	0x10050ec8
   2e0dc:	100511c8 	.word	0x100511c8

0002e0e0 <upsampleCr>:

// 198/256
// B = Y + 1.772 (Cb-128)
/*----------------------------------------------------------------------------*/
// Cr upsample and accumulate, 4x4 to 8x8
static void upsampleCr(uint8 srcOfs, uint8 dstOfs) {
   2e0e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    // Cr - affects R and G
    uint8 x, y;
    int16 *pSrc = gCoeffBuf + srcOfs;
   2e0e4:	4f74      	ldr	r7, [pc, #464]	@ (2e2b8 <upsampleCr+0x1d8>)
    uint8 *pDstR = gMCUBufR + dstOfs;
   2e0e6:	4e75      	ldr	r6, [pc, #468]	@ (2e2bc <upsampleCr+0x1dc>)
    uint8 *pDstG = gMCUBufG + dstOfs;
   2e0e8:	4d75      	ldr	r5, [pc, #468]	@ (2e2c0 <upsampleCr+0x1e0>)
    int16 *pSrc = gCoeffBuf + srcOfs;
   2e0ea:	eb07 0740 	add.w	r7, r7, r0, lsl #1
    uint8 *pDstR = gMCUBufR + dstOfs;
   2e0ee:	f107 0e08 	add.w	lr, r7, #8
   2e0f2:	440e      	add	r6, r1
    uint8 *pDstG = gMCUBufG + dstOfs;
   2e0f4:	440d      	add	r5, r1
    for (y = 0; y < 4; y++) {
   2e0f6:	3748      	adds	r7, #72	@ 0x48
            int16 crR, crG;

            crR = (cr + ((cr * 103U) >> 8U)) - 179;
            pDstR[0] = addAndClamp(pDstR[0], crR);
            pDstR[1] = addAndClamp(pDstR[1], crR);
            pDstR[8] = addAndClamp(pDstR[8], crR);
   2e0f8:	24ff      	movs	r4, #255	@ 0xff
   2e0fa:	f1ae 0c08 	sub.w	ip, lr, #8
        for (x = 0; x < 4; x++) {
   2e0fe:	1cb0      	adds	r0, r6, #2
   2e100:	1ca9      	adds	r1, r5, #2
            uint8 cr = (uint8)*pSrc++;
   2e102:	f93c 2b02 	ldrsh.w	r2, [ip], #2
    b = a + b;
   2e106:	f810 8c02 	ldrb.w	r8, [r0, #-2]
            crR = (cr + ((cr * 103U) >> 8U)) - 179;
   2e10a:	b2d3      	uxtb	r3, r2
   2e10c:	eb03 0943 	add.w	r9, r3, r3, lsl #1
   2e110:	eb09 1909 	add.w	r9, r9, r9, lsl #4
   2e114:	eb03 0949 	add.w	r9, r3, r9, lsl #1
   2e118:	f1a3 02b3 	sub.w	r2, r3, #179	@ 0xb3
   2e11c:	eb02 2219 	add.w	r2, r2, r9, lsr #8
   2e120:	b292      	uxth	r2, r2
    b = a + b;
   2e122:	f810 9c01 	ldrb.w	r9, [r0, #-1]
   2e126:	4490      	add	r8, r2
   2e128:	fa1f f888 	uxth.w	r8, r8
   2e12c:	4491      	add	r9, r2
    if ((uint16)b > 255U) {
   2e12e:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
    b = a + b;
   2e132:	fa1f f989 	uxth.w	r9, r9
    if ((uint16)b > 255U) {
   2e136:	f240 8095 	bls.w	2e264 <upsampleCr+0x184>
        if (b < 0)
   2e13a:	f418 4f00 	tst.w	r8, #32768	@ 0x8000
   2e13e:	f000 8089 	beq.w	2e254 <upsampleCr+0x174>
            return 0;
   2e142:	f04f 0800 	mov.w	r8, #0
    if ((uint16)b > 255U) {
   2e146:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
            pDstR[0] = addAndClamp(pDstR[0], crR);
   2e14a:	f800 8c02 	strb.w	r8, [r0, #-2]
    if ((uint16)b > 255U) {
   2e14e:	f240 8086 	bls.w	2e25e <upsampleCr+0x17e>
        if (b < 0)
   2e152:	f419 4f00 	tst.w	r9, #32768	@ 0x8000
   2e156:	f000 8088 	beq.w	2e26a <upsampleCr+0x18a>
            return 0;
   2e15a:	f04f 0900 	mov.w	r9, #0
    b = a + b;
   2e15e:	f890 8006 	ldrb.w	r8, [r0, #6]
            pDstR[1] = addAndClamp(pDstR[1], crR);
   2e162:	f800 9c01 	strb.w	r9, [r0, #-1]
    b = a + b;
   2e166:	4490      	add	r8, r2
   2e168:	fa1f f888 	uxth.w	r8, r8
    if ((uint16)b > 255U) {
   2e16c:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
   2e170:	d96d      	bls.n	2e24e <upsampleCr+0x16e>
        if (b < 0)
   2e172:	f418 4f00 	tst.w	r8, #32768	@ 0x8000
   2e176:	f000 8082 	beq.w	2e27e <upsampleCr+0x19e>
            return 0;
   2e17a:	f04f 0800 	mov.w	r8, #0
    b = a + b;
   2e17e:	f890 9007 	ldrb.w	r9, [r0, #7]
            pDstR[8] = addAndClamp(pDstR[8], crR);
   2e182:	f880 8006 	strb.w	r8, [r0, #6]
    b = a + b;
   2e186:	444a      	add	r2, r9
   2e188:	b292      	uxth	r2, r2
    if ((uint16)b > 255U) {
   2e18a:	2aff      	cmp	r2, #255	@ 0xff
   2e18c:	d95d      	bls.n	2e24a <upsampleCr+0x16a>
        if (b < 0)
   2e18e:	43d2      	mvns	r2, r2
   2e190:	f342 32c0 	sbfx	r2, r2, #15, #1
   2e194:	b2d2      	uxtb	r2, r2
            pDstR[9] = addAndClamp(pDstR[9], crR);

            crG = ((cr * 183U) >> 8U) - 91;
   2e196:	ebc3 1803 	rsb	r8, r3, r3, lsl #4
   2e19a:	eb03 0388 	add.w	r3, r3, r8, lsl #2
   2e19e:	ebc3 0383 	rsb	r3, r3, r3, lsl #2
   2e1a2:	0a1b      	lsrs	r3, r3, #8
    b = a - b;
   2e1a4:	f811 8c02 	ldrb.w	r8, [r1, #-2]
   2e1a8:	f811 9c01 	ldrb.w	r9, [r1, #-1]
            pDstR[9] = addAndClamp(pDstR[9], crR);
   2e1ac:	71c2      	strb	r2, [r0, #7]
            crG = ((cr * 183U) >> 8U) - 91;
   2e1ae:	3b5b      	subs	r3, #91	@ 0x5b
   2e1b0:	b29b      	uxth	r3, r3
    b = a - b;
   2e1b2:	eba8 0803 	sub.w	r8, r8, r3
   2e1b6:	fa1f f888 	uxth.w	r8, r8
   2e1ba:	eba9 0903 	sub.w	r9, r9, r3
    if ((uint16)b > 255U) {
   2e1be:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
    b = a - b;
   2e1c2:	fa1f f289 	uxth.w	r2, r9
    if ((uint16)b > 255U) {
   2e1c6:	d93d      	bls.n	2e244 <upsampleCr+0x164>
        if (b < 0)
   2e1c8:	f418 4f00 	tst.w	r8, #32768	@ 0x8000
   2e1cc:	d060      	beq.n	2e290 <upsampleCr+0x1b0>
            return 0;
   2e1ce:	f04f 0800 	mov.w	r8, #0
    if ((uint16)b > 255U) {
   2e1d2:	2aff      	cmp	r2, #255	@ 0xff
            pDstG[0] = subAndClamp(pDstG[0], crG);
   2e1d4:	f801 8c02 	strb.w	r8, [r1, #-2]
    if ((uint16)b > 255U) {
   2e1d8:	d932      	bls.n	2e240 <upsampleCr+0x160>
        if (b < 0)
   2e1da:	0412      	lsls	r2, r2, #16
   2e1dc:	d55c      	bpl.n	2e298 <upsampleCr+0x1b8>
            return 0;
   2e1de:	2200      	movs	r2, #0
    b = a - b;
   2e1e0:	f891 8006 	ldrb.w	r8, [r1, #6]
            pDstG[1] = subAndClamp(pDstG[1], crG);
   2e1e4:	f801 2c01 	strb.w	r2, [r1, #-1]
    b = a - b;
   2e1e8:	eba8 0203 	sub.w	r2, r8, r3
   2e1ec:	b292      	uxth	r2, r2
    if ((uint16)b > 255U) {
   2e1ee:	2aff      	cmp	r2, #255	@ 0xff
   2e1f0:	d923      	bls.n	2e23a <upsampleCr+0x15a>
        if (b < 0)
   2e1f2:	0412      	lsls	r2, r2, #16
   2e1f4:	d557      	bpl.n	2e2a6 <upsampleCr+0x1c6>
            return 0;
   2e1f6:	f04f 0800 	mov.w	r8, #0
    b = a - b;
   2e1fa:	79ca      	ldrb	r2, [r1, #7]
            pDstG[8] = subAndClamp(pDstG[8], crG);
   2e1fc:	f881 8006 	strb.w	r8, [r1, #6]
    b = a - b;
   2e200:	1ad3      	subs	r3, r2, r3
   2e202:	b29b      	uxth	r3, r3
    if ((uint16)b > 255U) {
   2e204:	2bff      	cmp	r3, #255	@ 0xff
   2e206:	d916      	bls.n	2e236 <upsampleCr+0x156>
        if (b < 0)
   2e208:	43db      	mvns	r3, r3
   2e20a:	f343 33c0 	sbfx	r3, r3, #15, #1
   2e20e:	b2db      	uxtb	r3, r3
        for (x = 0; x < 4; x++) {
   2e210:	45f4      	cmp	ip, lr
            pDstG[9] = subAndClamp(pDstG[9], crG);
   2e212:	71cb      	strb	r3, [r1, #7]
        for (x = 0; x < 4; x++) {
   2e214:	f100 0002 	add.w	r0, r0, #2
   2e218:	f101 0102 	add.w	r1, r1, #2
   2e21c:	f47f af71 	bne.w	2e102 <upsampleCr+0x22>
    for (y = 0; y < 4; y++) {
   2e220:	f10c 0e10 	add.w	lr, ip, #16
   2e224:	4577      	cmp	r7, lr
            pDstR += 2;
            pDstG += 2;
        }

        pSrc = pSrc - 4 + 8;
        pDstR = pDstR - 8 + 16;
   2e226:	f106 0610 	add.w	r6, r6, #16
        pDstG = pDstG - 8 + 16;
   2e22a:	f105 0510 	add.w	r5, r5, #16
    for (y = 0; y < 4; y++) {
   2e22e:	f47f af64 	bne.w	2e0fa <upsampleCr+0x1a>
    }
}
   2e232:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return (uint8)b;
   2e236:	b2db      	uxtb	r3, r3
   2e238:	e7ea      	b.n	2e210 <upsampleCr+0x130>
   2e23a:	fa5f f882 	uxtb.w	r8, r2
   2e23e:	e7dc      	b.n	2e1fa <upsampleCr+0x11a>
   2e240:	b2d2      	uxtb	r2, r2
   2e242:	e7cd      	b.n	2e1e0 <upsampleCr+0x100>
   2e244:	fa5f f888 	uxtb.w	r8, r8
   2e248:	e7c3      	b.n	2e1d2 <upsampleCr+0xf2>
    return (uint8)b;
   2e24a:	b2d2      	uxtb	r2, r2
   2e24c:	e7a3      	b.n	2e196 <upsampleCr+0xb6>
   2e24e:	fa5f f888 	uxtb.w	r8, r8
   2e252:	e794      	b.n	2e17e <upsampleCr+0x9e>
    if ((uint16)b > 255U) {
   2e254:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
            pDstR[0] = addAndClamp(pDstR[0], crR);
   2e258:	f800 4c02 	strb.w	r4, [r0, #-2]
    if ((uint16)b > 255U) {
   2e25c:	d805      	bhi.n	2e26a <upsampleCr+0x18a>
    return (uint8)b;
   2e25e:	fa5f f989 	uxtb.w	r9, r9
   2e262:	e77c      	b.n	2e15e <upsampleCr+0x7e>
   2e264:	fa5f f888 	uxtb.w	r8, r8
   2e268:	e76d      	b.n	2e146 <upsampleCr+0x66>
    b = a + b;
   2e26a:	f890 8006 	ldrb.w	r8, [r0, #6]
            pDstR[1] = addAndClamp(pDstR[1], crR);
   2e26e:	f800 4c01 	strb.w	r4, [r0, #-1]
    b = a + b;
   2e272:	4490      	add	r8, r2
   2e274:	fa1f f888 	uxth.w	r8, r8
    if ((uint16)b > 255U) {
   2e278:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
   2e27c:	d9e7      	bls.n	2e24e <upsampleCr+0x16e>
    b = a + b;
   2e27e:	f890 8007 	ldrb.w	r8, [r0, #7]
            pDstR[8] = addAndClamp(pDstR[8], crR);
   2e282:	7184      	strb	r4, [r0, #6]
    b = a + b;
   2e284:	4442      	add	r2, r8
   2e286:	b292      	uxth	r2, r2
    if ((uint16)b > 255U) {
   2e288:	2aff      	cmp	r2, #255	@ 0xff
   2e28a:	d9de      	bls.n	2e24a <upsampleCr+0x16a>
            return 255;
   2e28c:	22ff      	movs	r2, #255	@ 0xff
   2e28e:	e782      	b.n	2e196 <upsampleCr+0xb6>
    if ((uint16)b > 255U) {
   2e290:	2aff      	cmp	r2, #255	@ 0xff
            pDstG[0] = subAndClamp(pDstG[0], crG);
   2e292:	f801 4c02 	strb.w	r4, [r1, #-2]
    if ((uint16)b > 255U) {
   2e296:	d9d3      	bls.n	2e240 <upsampleCr+0x160>
    b = a - b;
   2e298:	798a      	ldrb	r2, [r1, #6]
            pDstG[1] = subAndClamp(pDstG[1], crG);
   2e29a:	f801 4c01 	strb.w	r4, [r1, #-1]
    b = a - b;
   2e29e:	1ad2      	subs	r2, r2, r3
   2e2a0:	b292      	uxth	r2, r2
    if ((uint16)b > 255U) {
   2e2a2:	2aff      	cmp	r2, #255	@ 0xff
   2e2a4:	d9c9      	bls.n	2e23a <upsampleCr+0x15a>
    b = a - b;
   2e2a6:	79ca      	ldrb	r2, [r1, #7]
            pDstG[8] = subAndClamp(pDstG[8], crG);
   2e2a8:	718c      	strb	r4, [r1, #6]
    b = a - b;
   2e2aa:	1ad3      	subs	r3, r2, r3
   2e2ac:	b29b      	uxth	r3, r3
    if ((uint16)b > 255U) {
   2e2ae:	2bff      	cmp	r3, #255	@ 0xff
   2e2b0:	d9c1      	bls.n	2e236 <upsampleCr+0x156>
            return 255;
   2e2b2:	23ff      	movs	r3, #255	@ 0xff
   2e2b4:	e7ac      	b.n	2e210 <upsampleCr+0x130>
   2e2b6:	bf00      	nop
   2e2b8:	100511c8 	.word	0x100511c8
   2e2bc:	100510c8 	.word	0x100510c8
   2e2c0:	10050fc8 	.word	0x10050fc8

0002e2c4 <upsampleCrH>:
/*----------------------------------------------------------------------------*/
// Cr upsample and accumulate, 4x8 to 8x8
static void upsampleCrH(uint8 srcOfs, uint8 dstOfs) {
    // Cr - affects R and G
    uint8 x, y;
    int16 *pSrc = gCoeffBuf + srcOfs;
   2e2c4:	4bc1      	ldr	r3, [pc, #772]	@ (2e5cc <upsampleCrH+0x308>)
static void upsampleCrH(uint8 srcOfs, uint8 dstOfs) {
   2e2c6:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e2c8:	4dc1      	ldr	r5, [pc, #772]	@ (2e5d0 <upsampleCrH+0x30c>)
   2e2ca:	4cc2      	ldr	r4, [pc, #776]	@ (2e5d4 <upsampleCrH+0x310>)
   2e2cc:	f101 0208 	add.w	r2, r1, #8
    int16 *pSrc = gCoeffBuf + srcOfs;
   2e2d0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    uint8 *pDstR = gMCUBufR + dstOfs;
    uint8 *pDstG = gMCUBufG + dstOfs;
    for (y = 0; y < 8; y++) {
   2e2d4:	f100 0e10 	add.w	lr, r0, #16
   2e2d8:	eb02 0c05 	add.w	ip, r2, r5
   2e2dc:	3090      	adds	r0, #144	@ 0x90
   2e2de:	4422      	add	r2, r4
        for (x = 0; x < 4; x++) {
            uint8 cr = (uint8)*pSrc++;
            int16 crR, crG;

            crR = (cr + ((cr * 103U) >> 8U)) - 179;
            pDstR[0] = addAndClamp(pDstR[0], crR);
   2e2e0:	21ff      	movs	r1, #255	@ 0xff
   2e2e2:	e102      	b.n	2e4ea <upsampleCrH+0x226>
    return (uint8)b;
   2e2e4:	b2ed      	uxtb	r5, r5
    if ((uint16)b > 255U) {
   2e2e6:	2cff      	cmp	r4, #255	@ 0xff
        if (b < 0)
   2e2e8:	bf88      	it	hi
   2e2ea:	43e4      	mvnhi	r4, r4
            pDstR[0] = addAndClamp(pDstR[0], crR);
   2e2ec:	f80c 5c08 	strb.w	r5, [ip, #-8]
        if (b < 0)
   2e2f0:	bf88      	it	hi
   2e2f2:	f344 34c0 	sbfxhi	r4, r4, #15, #1
   2e2f6:	b2e4      	uxtb	r4, r4
            pDstR[1] = addAndClamp(pDstR[1], crR);

            crG = ((cr * 183U) >> 8U) - 91;
   2e2f8:	ebc3 1503 	rsb	r5, r3, r3, lsl #4
   2e2fc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   2e300:	ebc3 0383 	rsb	r3, r3, r3, lsl #2
   2e304:	0a1b      	lsrs	r3, r3, #8
    b = a - b;
   2e306:	f812 5c08 	ldrb.w	r5, [r2, #-8]
   2e30a:	f812 6c07 	ldrb.w	r6, [r2, #-7]
            pDstR[1] = addAndClamp(pDstR[1], crR);
   2e30e:	f80c 4c07 	strb.w	r4, [ip, #-7]
            crG = ((cr * 183U) >> 8U) - 91;
   2e312:	3b5b      	subs	r3, #91	@ 0x5b
   2e314:	b29b      	uxth	r3, r3
    b = a - b;
   2e316:	1aed      	subs	r5, r5, r3
   2e318:	1af6      	subs	r6, r6, r3
   2e31a:	b2ab      	uxth	r3, r5
    if ((uint16)b > 255U) {
   2e31c:	2bff      	cmp	r3, #255	@ 0xff
    b = a - b;
   2e31e:	b2b4      	uxth	r4, r6
    if ((uint16)b > 255U) {
   2e320:	f200 8119 	bhi.w	2e556 <upsampleCrH+0x292>
    return (uint8)b;
   2e324:	b2db      	uxtb	r3, r3
    if ((uint16)b > 255U) {
   2e326:	2cff      	cmp	r4, #255	@ 0xff
        if (b < 0)
   2e328:	bf88      	it	hi
   2e32a:	43e4      	mvnhi	r4, r4
            pDstG[0] = subAndClamp(pDstG[0], crG);
   2e32c:	f802 3c08 	strb.w	r3, [r2, #-8]
        if (b < 0)
   2e330:	bf88      	it	hi
   2e332:	f344 34c0 	sbfxhi	r4, r4, #15, #1
   2e336:	b2e6      	uxtb	r6, r4
            uint8 cr = (uint8)*pSrc++;
   2e338:	f93e 3c0e 	ldrsh.w	r3, [lr, #-14]
    b = a + b;
   2e33c:	f81c 5c06 	ldrb.w	r5, [ip, #-6]
            pDstG[1] = subAndClamp(pDstG[1], crG);
   2e340:	f802 6c07 	strb.w	r6, [r2, #-7]
            uint8 cr = (uint8)*pSrc++;
   2e344:	b2db      	uxtb	r3, r3
            crR = (cr + ((cr * 103U) >> 8U)) - 179;
   2e346:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   2e34a:	eb04 1704 	add.w	r7, r4, r4, lsl #4
   2e34e:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   2e352:	f1a3 04b3 	sub.w	r4, r3, #179	@ 0xb3
   2e356:	eb04 2417 	add.w	r4, r4, r7, lsr #8
   2e35a:	b2a4      	uxth	r4, r4
    b = a + b;
   2e35c:	4425      	add	r5, r4
   2e35e:	f81c 7c05 	ldrb.w	r7, [ip, #-5]
   2e362:	b2ad      	uxth	r5, r5
   2e364:	443c      	add	r4, r7
    if ((uint16)b > 255U) {
   2e366:	2dff      	cmp	r5, #255	@ 0xff
            crR = (cr + ((cr * 103U) >> 8U)) - 179;
   2e368:	b21b      	sxth	r3, r3
    b = a + b;
   2e36a:	b2a4      	uxth	r4, r4
    if ((uint16)b > 255U) {
   2e36c:	f200 80e7 	bhi.w	2e53e <upsampleCrH+0x27a>
    return (uint8)b;
   2e370:	b2ed      	uxtb	r5, r5
    if ((uint16)b > 255U) {
   2e372:	2cff      	cmp	r4, #255	@ 0xff
        if (b < 0)
   2e374:	bf88      	it	hi
   2e376:	43e4      	mvnhi	r4, r4
            pDstR[0] = addAndClamp(pDstR[0], crR);
   2e378:	f80c 5c06 	strb.w	r5, [ip, #-6]
        if (b < 0)
   2e37c:	bf88      	it	hi
   2e37e:	f344 34c0 	sbfxhi	r4, r4, #15, #1
   2e382:	b2e4      	uxtb	r4, r4
            crG = ((cr * 183U) >> 8U) - 91;
   2e384:	ebc3 1503 	rsb	r5, r3, r3, lsl #4
   2e388:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   2e38c:	ebc3 0383 	rsb	r3, r3, r3, lsl #2
   2e390:	0a1b      	lsrs	r3, r3, #8
    b = a - b;
   2e392:	f812 5c06 	ldrb.w	r5, [r2, #-6]
   2e396:	f812 6c05 	ldrb.w	r6, [r2, #-5]
            pDstR[1] = addAndClamp(pDstR[1], crR);
   2e39a:	f80c 4c05 	strb.w	r4, [ip, #-5]
            crG = ((cr * 183U) >> 8U) - 91;
   2e39e:	3b5b      	subs	r3, #91	@ 0x5b
   2e3a0:	b29b      	uxth	r3, r3
    b = a - b;
   2e3a2:	1aed      	subs	r5, r5, r3
   2e3a4:	1af6      	subs	r6, r6, r3
   2e3a6:	b2ab      	uxth	r3, r5
    if ((uint16)b > 255U) {
   2e3a8:	2bff      	cmp	r3, #255	@ 0xff
    b = a - b;
   2e3aa:	b2b4      	uxth	r4, r6
    if ((uint16)b > 255U) {
   2e3ac:	f200 80cf 	bhi.w	2e54e <upsampleCrH+0x28a>
    return (uint8)b;
   2e3b0:	b2db      	uxtb	r3, r3
    if ((uint16)b > 255U) {
   2e3b2:	2cff      	cmp	r4, #255	@ 0xff
        if (b < 0)
   2e3b4:	bf88      	it	hi
   2e3b6:	43e4      	mvnhi	r4, r4
            pDstG[0] = subAndClamp(pDstG[0], crG);
   2e3b8:	f802 3c06 	strb.w	r3, [r2, #-6]
        if (b < 0)
   2e3bc:	bf88      	it	hi
   2e3be:	f344 34c0 	sbfxhi	r4, r4, #15, #1
   2e3c2:	b2e6      	uxtb	r6, r4
            uint8 cr = (uint8)*pSrc++;
   2e3c4:	f93e 3c0c 	ldrsh.w	r3, [lr, #-12]
    b = a + b;
   2e3c8:	f81c 5c04 	ldrb.w	r5, [ip, #-4]
            pDstG[1] = subAndClamp(pDstG[1], crG);
   2e3cc:	f802 6c05 	strb.w	r6, [r2, #-5]
            uint8 cr = (uint8)*pSrc++;
   2e3d0:	b2db      	uxtb	r3, r3
            crR = (cr + ((cr * 103U) >> 8U)) - 179;
   2e3d2:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   2e3d6:	eb04 1704 	add.w	r7, r4, r4, lsl #4
   2e3da:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   2e3de:	f1a3 04b3 	sub.w	r4, r3, #179	@ 0xb3
   2e3e2:	eb04 2417 	add.w	r4, r4, r7, lsr #8
   2e3e6:	b2a4      	uxth	r4, r4
    b = a + b;
   2e3e8:	4425      	add	r5, r4
   2e3ea:	f81c 7c03 	ldrb.w	r7, [ip, #-3]
   2e3ee:	b2ad      	uxth	r5, r5
   2e3f0:	443c      	add	r4, r7
    if ((uint16)b > 255U) {
   2e3f2:	2dff      	cmp	r5, #255	@ 0xff
            crR = (cr + ((cr * 103U) >> 8U)) - 179;
   2e3f4:	b21b      	sxth	r3, r3
    b = a + b;
   2e3f6:	b2a4      	uxth	r4, r4
    if ((uint16)b > 255U) {
   2e3f8:	f200 8099 	bhi.w	2e52e <upsampleCrH+0x26a>
    return (uint8)b;
   2e3fc:	b2ed      	uxtb	r5, r5
    if ((uint16)b > 255U) {
   2e3fe:	2cff      	cmp	r4, #255	@ 0xff
        if (b < 0)
   2e400:	bf88      	it	hi
   2e402:	43e4      	mvnhi	r4, r4
            pDstR[0] = addAndClamp(pDstR[0], crR);
   2e404:	f80c 5c04 	strb.w	r5, [ip, #-4]
        if (b < 0)
   2e408:	bf88      	it	hi
   2e40a:	f344 34c0 	sbfxhi	r4, r4, #15, #1
   2e40e:	b2e4      	uxtb	r4, r4
            crG = ((cr * 183U) >> 8U) - 91;
   2e410:	ebc3 1503 	rsb	r5, r3, r3, lsl #4
   2e414:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   2e418:	ebc3 0383 	rsb	r3, r3, r3, lsl #2
   2e41c:	0a1b      	lsrs	r3, r3, #8
    b = a - b;
   2e41e:	f812 6c04 	ldrb.w	r6, [r2, #-4]
   2e422:	f812 5c03 	ldrb.w	r5, [r2, #-3]
            pDstR[1] = addAndClamp(pDstR[1], crR);
   2e426:	f80c 4c03 	strb.w	r4, [ip, #-3]
            crG = ((cr * 183U) >> 8U) - 91;
   2e42a:	3b5b      	subs	r3, #91	@ 0x5b
   2e42c:	b29b      	uxth	r3, r3
    b = a - b;
   2e42e:	1af6      	subs	r6, r6, r3
   2e430:	1aed      	subs	r5, r5, r3
   2e432:	b2b3      	uxth	r3, r6
    if ((uint16)b > 255U) {
   2e434:	2bff      	cmp	r3, #255	@ 0xff
    b = a - b;
   2e436:	b2ad      	uxth	r5, r5
    if ((uint16)b > 255U) {
   2e438:	f200 8085 	bhi.w	2e546 <upsampleCrH+0x282>
    return (uint8)b;
   2e43c:	b2db      	uxtb	r3, r3
    if ((uint16)b > 255U) {
   2e43e:	2dff      	cmp	r5, #255	@ 0xff
        if (b < 0)
   2e440:	bf88      	it	hi
   2e442:	43ed      	mvnhi	r5, r5
            pDstG[0] = subAndClamp(pDstG[0], crG);
   2e444:	f802 3c04 	strb.w	r3, [r2, #-4]
        if (b < 0)
   2e448:	bf88      	it	hi
   2e44a:	f345 35c0 	sbfxhi	r5, r5, #15, #1
   2e44e:	b2ed      	uxtb	r5, r5
            uint8 cr = (uint8)*pSrc++;
   2e450:	f93e 4c0a 	ldrsh.w	r4, [lr, #-10]
    b = a + b;
   2e454:	f81c 6c02 	ldrb.w	r6, [ip, #-2]
            pDstG[1] = subAndClamp(pDstG[1], crG);
   2e458:	f802 5c03 	strb.w	r5, [r2, #-3]
            crR = (cr + ((cr * 103U) >> 8U)) - 179;
   2e45c:	b2e3      	uxtb	r3, r4
   2e45e:	eb03 0743 	add.w	r7, r3, r3, lsl #1
   2e462:	eb07 1707 	add.w	r7, r7, r7, lsl #4
   2e466:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   2e46a:	f1a3 04b3 	sub.w	r4, r3, #179	@ 0xb3
   2e46e:	eb04 2417 	add.w	r4, r4, r7, lsr #8
   2e472:	b2a4      	uxth	r4, r4
    b = a + b;
   2e474:	4426      	add	r6, r4
   2e476:	f81c 7c01 	ldrb.w	r7, [ip, #-1]
   2e47a:	b2b6      	uxth	r6, r6
   2e47c:	443c      	add	r4, r7
    if ((uint16)b > 255U) {
   2e47e:	2eff      	cmp	r6, #255	@ 0xff
    b = a + b;
   2e480:	b2a4      	uxth	r4, r4
    if ((uint16)b > 255U) {
   2e482:	d858      	bhi.n	2e536 <upsampleCrH+0x272>
    return (uint8)b;
   2e484:	b2f6      	uxtb	r6, r6
    if ((uint16)b > 255U) {
   2e486:	2cff      	cmp	r4, #255	@ 0xff
        if (b < 0)
   2e488:	bf88      	it	hi
   2e48a:	43e4      	mvnhi	r4, r4
            pDstR[0] = addAndClamp(pDstR[0], crR);
   2e48c:	f80c 6c02 	strb.w	r6, [ip, #-2]
        if (b < 0)
   2e490:	bf88      	it	hi
   2e492:	f344 34c0 	sbfxhi	r4, r4, #15, #1
   2e496:	b2e4      	uxtb	r4, r4
            crG = ((cr * 183U) >> 8U) - 91;
   2e498:	ebc3 1503 	rsb	r5, r3, r3, lsl #4
   2e49c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   2e4a0:	ebc3 0383 	rsb	r3, r3, r3, lsl #2
   2e4a4:	0a1b      	lsrs	r3, r3, #8
    b = a - b;
   2e4a6:	f812 6c02 	ldrb.w	r6, [r2, #-2]
   2e4aa:	f812 5c01 	ldrb.w	r5, [r2, #-1]
            pDstR[1] = addAndClamp(pDstR[1], crR);
   2e4ae:	f80c 4c01 	strb.w	r4, [ip, #-1]
            crG = ((cr * 183U) >> 8U) - 91;
   2e4b2:	3b5b      	subs	r3, #91	@ 0x5b
   2e4b4:	b29b      	uxth	r3, r3
    b = a - b;
   2e4b6:	1af6      	subs	r6, r6, r3
   2e4b8:	1aeb      	subs	r3, r5, r3
   2e4ba:	b2b5      	uxth	r5, r6
    if ((uint16)b > 255U) {
   2e4bc:	2dff      	cmp	r5, #255	@ 0xff
    b = a - b;
   2e4be:	b29b      	uxth	r3, r3
    if ((uint16)b > 255U) {
   2e4c0:	d831      	bhi.n	2e526 <upsampleCrH+0x262>
    return (uint8)b;
   2e4c2:	b2ed      	uxtb	r5, r5
    if ((uint16)b > 255U) {
   2e4c4:	2bff      	cmp	r3, #255	@ 0xff
        if (b < 0)
   2e4c6:	bf88      	it	hi
   2e4c8:	43db      	mvnhi	r3, r3
            pDstG[0] = subAndClamp(pDstG[0], crG);
   2e4ca:	f802 5c02 	strb.w	r5, [r2, #-2]
        if (b < 0)
   2e4ce:	bf88      	it	hi
   2e4d0:	f343 33c0 	sbfxhi	r3, r3, #15, #1
   2e4d4:	b2db      	uxtb	r3, r3
    for (y = 0; y < 8; y++) {
   2e4d6:	f10e 0e10 	add.w	lr, lr, #16
   2e4da:	4586      	cmp	lr, r0
            pDstG[1] = subAndClamp(pDstG[1], crG);
   2e4dc:	f802 3c01 	strb.w	r3, [r2, #-1]
    for (y = 0; y < 8; y++) {
   2e4e0:	f10c 0c08 	add.w	ip, ip, #8
   2e4e4:	f102 0208 	add.w	r2, r2, #8
   2e4e8:	d076      	beq.n	2e5d8 <upsampleCrH+0x314>
            uint8 cr = (uint8)*pSrc++;
   2e4ea:	f93e 3c10 	ldrsh.w	r3, [lr, #-16]
    b = a + b;
   2e4ee:	f81c 5c08 	ldrb.w	r5, [ip, #-8]
            uint8 cr = (uint8)*pSrc++;
   2e4f2:	b2db      	uxtb	r3, r3
            crR = (cr + ((cr * 103U) >> 8U)) - 179;
   2e4f4:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   2e4f8:	eb04 1604 	add.w	r6, r4, r4, lsl #4
   2e4fc:	eb03 0646 	add.w	r6, r3, r6, lsl #1
   2e500:	f1a3 04b3 	sub.w	r4, r3, #179	@ 0xb3
   2e504:	eb04 2416 	add.w	r4, r4, r6, lsr #8
   2e508:	b2a4      	uxth	r4, r4
    b = a + b;
   2e50a:	4425      	add	r5, r4
   2e50c:	f81c 6c07 	ldrb.w	r6, [ip, #-7]
   2e510:	b2ad      	uxth	r5, r5
   2e512:	4434      	add	r4, r6
    if ((uint16)b > 255U) {
   2e514:	2dff      	cmp	r5, #255	@ 0xff
            crR = (cr + ((cr * 103U) >> 8U)) - 179;
   2e516:	b21b      	sxth	r3, r3
    b = a + b;
   2e518:	b2a4      	uxth	r4, r4
    if ((uint16)b > 255U) {
   2e51a:	f67f aee3 	bls.w	2e2e4 <upsampleCrH+0x20>
        if (b < 0)
   2e51e:	042f      	lsls	r7, r5, #16
   2e520:	d51d      	bpl.n	2e55e <upsampleCrH+0x29a>
            return 0;
   2e522:	2500      	movs	r5, #0
   2e524:	e6df      	b.n	2e2e6 <upsampleCrH+0x22>
        if (b < 0)
   2e526:	042c      	lsls	r4, r5, #16
   2e528:	d520      	bpl.n	2e56c <upsampleCrH+0x2a8>
            return 0;
   2e52a:	2500      	movs	r5, #0
   2e52c:	e7ca      	b.n	2e4c4 <upsampleCrH+0x200>
        if (b < 0)
   2e52e:	042f      	lsls	r7, r5, #16
   2e530:	d536      	bpl.n	2e5a0 <upsampleCrH+0x2dc>
            return 0;
   2e532:	2500      	movs	r5, #0
   2e534:	e763      	b.n	2e3fe <upsampleCrH+0x13a>
        if (b < 0)
   2e536:	0435      	lsls	r5, r6, #16
   2e538:	d525      	bpl.n	2e586 <upsampleCrH+0x2c2>
            return 0;
   2e53a:	2600      	movs	r6, #0
   2e53c:	e7a3      	b.n	2e486 <upsampleCrH+0x1c2>
        if (b < 0)
   2e53e:	042d      	lsls	r5, r5, #16
   2e540:	d535      	bpl.n	2e5ae <upsampleCrH+0x2ea>
            return 0;
   2e542:	2500      	movs	r5, #0
   2e544:	e715      	b.n	2e372 <upsampleCrH+0xae>
        if (b < 0)
   2e546:	041e      	lsls	r6, r3, #16
   2e548:	d516      	bpl.n	2e578 <upsampleCrH+0x2b4>
            return 0;
   2e54a:	2300      	movs	r3, #0
   2e54c:	e777      	b.n	2e43e <upsampleCrH+0x17a>
        if (b < 0)
   2e54e:	041b      	lsls	r3, r3, #16
   2e550:	d51f      	bpl.n	2e592 <upsampleCrH+0x2ce>
            return 0;
   2e552:	2300      	movs	r3, #0
   2e554:	e72d      	b.n	2e3b2 <upsampleCrH+0xee>
        if (b < 0)
   2e556:	041e      	lsls	r6, r3, #16
   2e558:	d530      	bpl.n	2e5bc <upsampleCrH+0x2f8>
            return 0;
   2e55a:	2300      	movs	r3, #0
   2e55c:	e6e3      	b.n	2e326 <upsampleCrH+0x62>
    if ((uint16)b > 255U) {
   2e55e:	2cff      	cmp	r4, #255	@ 0xff
            pDstR[0] = addAndClamp(pDstR[0], crR);
   2e560:	f80c 1c08 	strb.w	r1, [ip, #-8]
    if ((uint16)b > 255U) {
   2e564:	f67f aec7 	bls.w	2e2f6 <upsampleCrH+0x32>
            return 255;
   2e568:	24ff      	movs	r4, #255	@ 0xff
   2e56a:	e6c5      	b.n	2e2f8 <upsampleCrH+0x34>
    if ((uint16)b > 255U) {
   2e56c:	2bff      	cmp	r3, #255	@ 0xff
            pDstG[0] = subAndClamp(pDstG[0], crG);
   2e56e:	f802 1c02 	strb.w	r1, [r2, #-2]
    if ((uint16)b > 255U) {
   2e572:	d9af      	bls.n	2e4d4 <upsampleCrH+0x210>
            return 255;
   2e574:	23ff      	movs	r3, #255	@ 0xff
   2e576:	e7ae      	b.n	2e4d6 <upsampleCrH+0x212>
    if ((uint16)b > 255U) {
   2e578:	2dff      	cmp	r5, #255	@ 0xff
            pDstG[0] = subAndClamp(pDstG[0], crG);
   2e57a:	f802 1c04 	strb.w	r1, [r2, #-4]
    if ((uint16)b > 255U) {
   2e57e:	f67f af66 	bls.w	2e44e <upsampleCrH+0x18a>
            return 255;
   2e582:	25ff      	movs	r5, #255	@ 0xff
   2e584:	e764      	b.n	2e450 <upsampleCrH+0x18c>
    if ((uint16)b > 255U) {
   2e586:	2cff      	cmp	r4, #255	@ 0xff
            pDstR[0] = addAndClamp(pDstR[0], crR);
   2e588:	f80c 1c02 	strb.w	r1, [ip, #-2]
    if ((uint16)b > 255U) {
   2e58c:	d983      	bls.n	2e496 <upsampleCrH+0x1d2>
            return 255;
   2e58e:	24ff      	movs	r4, #255	@ 0xff
   2e590:	e782      	b.n	2e498 <upsampleCrH+0x1d4>
    if ((uint16)b > 255U) {
   2e592:	2cff      	cmp	r4, #255	@ 0xff
            pDstG[0] = subAndClamp(pDstG[0], crG);
   2e594:	f802 1c06 	strb.w	r1, [r2, #-6]
    if ((uint16)b > 255U) {
   2e598:	f67f af13 	bls.w	2e3c2 <upsampleCrH+0xfe>
            return 255;
   2e59c:	26ff      	movs	r6, #255	@ 0xff
   2e59e:	e711      	b.n	2e3c4 <upsampleCrH+0x100>
    if ((uint16)b > 255U) {
   2e5a0:	2cff      	cmp	r4, #255	@ 0xff
            pDstR[0] = addAndClamp(pDstR[0], crR);
   2e5a2:	f80c 1c04 	strb.w	r1, [ip, #-4]
    if ((uint16)b > 255U) {
   2e5a6:	f67f af32 	bls.w	2e40e <upsampleCrH+0x14a>
            return 255;
   2e5aa:	24ff      	movs	r4, #255	@ 0xff
   2e5ac:	e730      	b.n	2e410 <upsampleCrH+0x14c>
    if ((uint16)b > 255U) {
   2e5ae:	2cff      	cmp	r4, #255	@ 0xff
            pDstR[0] = addAndClamp(pDstR[0], crR);
   2e5b0:	f80c 1c06 	strb.w	r1, [ip, #-6]
    if ((uint16)b > 255U) {
   2e5b4:	f67f aee5 	bls.w	2e382 <upsampleCrH+0xbe>
            return 255;
   2e5b8:	24ff      	movs	r4, #255	@ 0xff
   2e5ba:	e6e3      	b.n	2e384 <upsampleCrH+0xc0>
    if ((uint16)b > 255U) {
   2e5bc:	2cff      	cmp	r4, #255	@ 0xff
            pDstG[0] = subAndClamp(pDstG[0], crG);
   2e5be:	f802 1c08 	strb.w	r1, [r2, #-8]
    if ((uint16)b > 255U) {
   2e5c2:	f67f aeb8 	bls.w	2e336 <upsampleCrH+0x72>
            return 255;
   2e5c6:	26ff      	movs	r6, #255	@ 0xff
   2e5c8:	e6b6      	b.n	2e338 <upsampleCrH+0x74>
   2e5ca:	bf00      	nop
   2e5cc:	100511c8 	.word	0x100511c8
   2e5d0:	100510c8 	.word	0x100510c8
   2e5d4:	10050fc8 	.word	0x10050fc8
            pDstG += 2;
        }

        pSrc = pSrc - 4 + 8;
    }
}
   2e5d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e5da:	bf00      	nop

0002e5dc <upsampleCrV>:
/*----------------------------------------------------------------------------*/
// Cr upsample and accumulate, 8x4 to 8x8
static void upsampleCrV(uint8 srcOfs, uint8 dstOfs) {
   2e5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // Cr - affects R and G
    uint8 x, y;
    int16 *pSrc = gCoeffBuf + srcOfs;
    uint8 *pDstR = gMCUBufR + dstOfs;
   2e5e0:	4e45      	ldr	r6, [pc, #276]	@ (2e6f8 <upsampleCrV+0x11c>)
    uint8 *pDstG = gMCUBufG + dstOfs;
   2e5e2:	4a46      	ldr	r2, [pc, #280]	@ (2e6fc <upsampleCrV+0x120>)
    uint8 *pDstR = gMCUBufR + dstOfs;
   2e5e4:	4b46      	ldr	r3, [pc, #280]	@ (2e700 <upsampleCrV+0x124>)
   2e5e6:	2510      	movs	r5, #16
   2e5e8:	440e      	add	r6, r1
    uint8 *pDstG = gMCUBufG + dstOfs;
   2e5ea:	eb05 0540 	add.w	r5, r5, r0, lsl #1
   2e5ee:	4411      	add	r1, r2
    for (y = 0; y < 4; y++) {
   2e5f0:	441d      	add	r5, r3
   2e5f2:	f106 0940 	add.w	r9, r6, #64	@ 0x40
        for (x = 0; x < 8; x++) {
            uint8 cr = (uint8)*pSrc++;
            int16 crR, crG;

            crR = (cr + ((cr * 103U) >> 8U)) - 179;
            pDstR[0] = addAndClamp(pDstR[0], crR);
   2e5f6:	27ff      	movs	r7, #255	@ 0xff
   2e5f8:	f1a5 0010 	sub.w	r0, r5, #16
        for (x = 0; x < 8; x++) {
   2e5fc:	1e74      	subs	r4, r6, #1
   2e5fe:	f106 0e07 	add.w	lr, r6, #7
   2e602:	4688      	mov	r8, r1
   2e604:	f101 0c07 	add.w	ip, r1, #7
   2e608:	e037      	b.n	2e67a <upsampleCrV+0x9e>
        if (b < 0)
   2e60a:	f41a 4f00 	tst.w	sl, #32768	@ 0x8000
   2e60e:	d069      	beq.n	2e6e4 <upsampleCrV+0x108>
            return 0;
   2e610:	f04f 0a00 	mov.w	sl, #0
    if ((uint16)b > 255U) {
   2e614:	2bff      	cmp	r3, #255	@ 0xff
            pDstR[0] = addAndClamp(pDstR[0], crR);
   2e616:	f884 a000 	strb.w	sl, [r4]
    if ((uint16)b > 255U) {
   2e61a:	d94e      	bls.n	2e6ba <upsampleCrV+0xde>
        if (b < 0)
   2e61c:	43db      	mvns	r3, r3
   2e61e:	f343 33c0 	sbfx	r3, r3, #15, #1
   2e622:	b2db      	uxtb	r3, r3
            pDstR[8] = addAndClamp(pDstR[8], crR);

            crG = ((cr * 183U) >> 8U) - 91;
   2e624:	ebc2 1a02 	rsb	sl, r2, r2, lsl #4
   2e628:	eb02 028a 	add.w	r2, r2, sl, lsl #2
   2e62c:	ebc2 0282 	rsb	r2, r2, r2, lsl #2
   2e630:	0a12      	lsrs	r2, r2, #8
    b = a - b;
   2e632:	f891 a000 	ldrb.w	sl, [r1]
            pDstR[8] = addAndClamp(pDstR[8], crR);
   2e636:	f88e 3000 	strb.w	r3, [lr]
            crG = ((cr * 183U) >> 8U) - 91;
   2e63a:	3a5b      	subs	r2, #91	@ 0x5b
   2e63c:	b292      	uxth	r2, r2
    b = a - b;
   2e63e:	f89c 3001 	ldrb.w	r3, [ip, #1]
   2e642:	ebaa 0a02 	sub.w	sl, sl, r2
   2e646:	fa1f fa8a 	uxth.w	sl, sl
   2e64a:	1a9b      	subs	r3, r3, r2
    if ((uint16)b > 255U) {
   2e64c:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
    b = a - b;
   2e650:	b29b      	uxth	r3, r3
    if ((uint16)b > 255U) {
   2e652:	d944      	bls.n	2e6de <upsampleCrV+0x102>
        if (b < 0)
   2e654:	f41a 4f00 	tst.w	sl, #32768	@ 0x8000
   2e658:	d049      	beq.n	2e6ee <upsampleCrV+0x112>
            return 0;
   2e65a:	f04f 0a00 	mov.w	sl, #0
    if ((uint16)b > 255U) {
   2e65e:	2bff      	cmp	r3, #255	@ 0xff
            pDstG[0] = subAndClamp(pDstG[0], crG);
   2e660:	f881 a000 	strb.w	sl, [r1]
    if ((uint16)b > 255U) {
   2e664:	d92b      	bls.n	2e6be <upsampleCrV+0xe2>
        if (b < 0)
   2e666:	43db      	mvns	r3, r3
   2e668:	f343 33c0 	sbfx	r3, r3, #15, #1
   2e66c:	b2db      	uxtb	r3, r3
        for (x = 0; x < 8; x++) {
   2e66e:	42a8      	cmp	r0, r5
            pDstG[8] = subAndClamp(pDstG[8], crG);
   2e670:	f80c 3f01 	strb.w	r3, [ip, #1]!

            ++pDstR;
            ++pDstG;
   2e674:	f101 0101 	add.w	r1, r1, #1
        for (x = 0; x < 8; x++) {
   2e678:	d028      	beq.n	2e6cc <upsampleCrV+0xf0>
            uint8 cr = (uint8)*pSrc++;
   2e67a:	f930 3b02 	ldrsh.w	r3, [r0], #2
    b = a + b;
   2e67e:	f81e bf01 	ldrb.w	fp, [lr, #1]!
            crR = (cr + ((cr * 103U) >> 8U)) - 179;
   2e682:	b2da      	uxtb	r2, r3
   2e684:	eb02 0a42 	add.w	sl, r2, r2, lsl #1
   2e688:	eb0a 1a0a 	add.w	sl, sl, sl, lsl #4
   2e68c:	eb02 0a4a 	add.w	sl, r2, sl, lsl #1
   2e690:	f1a2 03b3 	sub.w	r3, r2, #179	@ 0xb3
   2e694:	eb03 231a 	add.w	r3, r3, sl, lsr #8
    b = a + b;
   2e698:	f814 af01 	ldrb.w	sl, [r4, #1]!
            crR = (cr + ((cr * 103U) >> 8U)) - 179;
   2e69c:	b29b      	uxth	r3, r3
    b = a + b;
   2e69e:	449a      	add	sl, r3
   2e6a0:	fa1f fa8a 	uxth.w	sl, sl
   2e6a4:	445b      	add	r3, fp
    if ((uint16)b > 255U) {
   2e6a6:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
    b = a + b;
   2e6aa:	b29b      	uxth	r3, r3
    if ((uint16)b > 255U) {
   2e6ac:	d8ad      	bhi.n	2e60a <upsampleCrV+0x2e>
    return (uint8)b;
   2e6ae:	fa5f fa8a 	uxtb.w	sl, sl
    if ((uint16)b > 255U) {
   2e6b2:	2bff      	cmp	r3, #255	@ 0xff
            pDstR[0] = addAndClamp(pDstR[0], crR);
   2e6b4:	f884 a000 	strb.w	sl, [r4]
    if ((uint16)b > 255U) {
   2e6b8:	d8b0      	bhi.n	2e61c <upsampleCrV+0x40>
    return (uint8)b;
   2e6ba:	b2db      	uxtb	r3, r3
   2e6bc:	e7b2      	b.n	2e624 <upsampleCrV+0x48>
    return (uint8)b;
   2e6be:	b2db      	uxtb	r3, r3
        for (x = 0; x < 8; x++) {
   2e6c0:	42a8      	cmp	r0, r5
            pDstG[8] = subAndClamp(pDstG[8], crG);
   2e6c2:	f80c 3f01 	strb.w	r3, [ip, #1]!
            ++pDstG;
   2e6c6:	f101 0101 	add.w	r1, r1, #1
        for (x = 0; x < 8; x++) {
   2e6ca:	d1d6      	bne.n	2e67a <upsampleCrV+0x9e>
        }

        pDstR = pDstR - 8 + 16;
   2e6cc:	3610      	adds	r6, #16
    for (y = 0; y < 4; y++) {
   2e6ce:	454e      	cmp	r6, r9
        pDstG = pDstG - 8 + 16;
   2e6d0:	f108 0110 	add.w	r1, r8, #16
    for (y = 0; y < 4; y++) {
   2e6d4:	f100 0510 	add.w	r5, r0, #16
   2e6d8:	d18e      	bne.n	2e5f8 <upsampleCrV+0x1c>
    }
}
   2e6da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (uint8)b;
   2e6de:	fa5f fa8a 	uxtb.w	sl, sl
   2e6e2:	e7bc      	b.n	2e65e <upsampleCrV+0x82>
    if ((uint16)b > 255U) {
   2e6e4:	2bff      	cmp	r3, #255	@ 0xff
            pDstR[0] = addAndClamp(pDstR[0], crR);
   2e6e6:	7027      	strb	r7, [r4, #0]
    if ((uint16)b > 255U) {
   2e6e8:	d9e7      	bls.n	2e6ba <upsampleCrV+0xde>
            return 255;
   2e6ea:	23ff      	movs	r3, #255	@ 0xff
   2e6ec:	e79a      	b.n	2e624 <upsampleCrV+0x48>
    if ((uint16)b > 255U) {
   2e6ee:	2bff      	cmp	r3, #255	@ 0xff
            pDstG[0] = subAndClamp(pDstG[0], crG);
   2e6f0:	700f      	strb	r7, [r1, #0]
    if ((uint16)b > 255U) {
   2e6f2:	d9e4      	bls.n	2e6be <upsampleCrV+0xe2>
            return 255;
   2e6f4:	23ff      	movs	r3, #255	@ 0xff
   2e6f6:	e7ba      	b.n	2e66e <upsampleCrV+0x92>
   2e6f8:	100510c8 	.word	0x100510c8
   2e6fc:	10050fc8 	.word	0x10050fc8
   2e700:	100511c8 	.word	0x100511c8

0002e704 <getChar>:
static PJPG_INLINE uint8 getChar(void) {
   2e704:	b570      	push	{r4, r5, r6, lr}
    if (!gInBufLeft) {
   2e706:	4c14      	ldr	r4, [pc, #80]	@ (2e758 <getChar+0x54>)
   2e708:	7823      	ldrb	r3, [r4, #0]
   2e70a:	b143      	cbz	r3, 2e71e <getChar+0x1a>
   2e70c:	4d13      	ldr	r5, [pc, #76]	@ (2e75c <getChar+0x58>)
    return gInBuf[gInBufOfs++];
   2e70e:	782a      	ldrb	r2, [r5, #0]
    gInBufLeft--;
   2e710:	3b01      	subs	r3, #1
    return gInBuf[gInBufOfs++];
   2e712:	1c51      	adds	r1, r2, #1
    gInBufLeft--;
   2e714:	7023      	strb	r3, [r4, #0]
    return gInBuf[gInBufOfs++];
   2e716:	4b12      	ldr	r3, [pc, #72]	@ (2e760 <getChar+0x5c>)
   2e718:	7029      	strb	r1, [r5, #0]
   2e71a:	5c98      	ldrb	r0, [r3, r2]
}
   2e71c:	bd70      	pop	{r4, r5, r6, pc}
    status = (*g_pNeedBytesCallback)(
   2e71e:	4911      	ldr	r1, [pc, #68]	@ (2e764 <getChar+0x60>)
   2e720:	4a11      	ldr	r2, [pc, #68]	@ (2e768 <getChar+0x64>)
    gInBufOfs = 4;
   2e722:	4d0e      	ldr	r5, [pc, #56]	@ (2e75c <getChar+0x58>)
    status = (*g_pNeedBytesCallback)(
   2e724:	680e      	ldr	r6, [r1, #0]
    gInBufLeft = 0;
   2e726:	7023      	strb	r3, [r4, #0]
    gInBufOfs = 4;
   2e728:	2104      	movs	r1, #4
    status = (*g_pNeedBytesCallback)(
   2e72a:	6813      	ldr	r3, [r2, #0]
    gInBufOfs = 4;
   2e72c:	7029      	strb	r1, [r5, #0]
    status = (*g_pNeedBytesCallback)(
   2e72e:	480f      	ldr	r0, [pc, #60]	@ (2e76c <getChar+0x68>)
   2e730:	4622      	mov	r2, r4
   2e732:	21fc      	movs	r1, #252	@ 0xfc
   2e734:	47b0      	blx	r6
    if (status) {
   2e736:	b108      	cbz	r0, 2e73c <getChar+0x38>
        gCallbackStatus = status;
   2e738:	4b0d      	ldr	r3, [pc, #52]	@ (2e770 <getChar+0x6c>)
   2e73a:	7018      	strb	r0, [r3, #0]
        if (!gInBufLeft) {
   2e73c:	7823      	ldrb	r3, [r4, #0]
   2e73e:	2b00      	cmp	r3, #0
   2e740:	d1e5      	bne.n	2e70e <getChar+0xa>
            gTemFlag = ~gTemFlag;
   2e742:	4a0c      	ldr	r2, [pc, #48]	@ (2e774 <getChar+0x70>)
   2e744:	7813      	ldrb	r3, [r2, #0]
   2e746:	43db      	mvns	r3, r3
   2e748:	b2db      	uxtb	r3, r3
            return gTemFlag ? 0xFF : 0xD9;
   2e74a:	2b00      	cmp	r3, #0
            gTemFlag = ~gTemFlag;
   2e74c:	7013      	strb	r3, [r2, #0]
            return gTemFlag ? 0xFF : 0xD9;
   2e74e:	bf0c      	ite	eq
   2e750:	20d9      	moveq	r0, #217	@ 0xd9
   2e752:	20ff      	movne	r0, #255	@ 0xff
}
   2e754:	bd70      	pop	{r4, r5, r6, pc}
   2e756:	bf00      	nop
   2e758:	10050958 	.word	0x10050958
   2e75c:	10050959 	.word	0x10050959
   2e760:	1005095c 	.word	0x1005095c
   2e764:	10050914 	.word	0x10050914
   2e768:	10050910 	.word	0x10050910
   2e76c:	10050960 	.word	0x10050960
   2e770:	1005090d 	.word	0x1005090d
   2e774:	10050a5c 	.word	0x10050a5c

0002e778 <getBits.constprop.1>:
static uint16 getBits(uint8 numBits, uint8 FFCheck) {
   2e778:	b570      	push	{r4, r5, r6, lr}
    uint16 ret = gBitBuf;
   2e77a:	4c18      	ldr	r4, [pc, #96]	@ (2e7dc <getBits.constprop.1+0x64>)
        gBitBuf <<= gBitsLeft;
   2e77c:	4e18      	ldr	r6, [pc, #96]	@ (2e7e0 <getBits.constprop.1+0x68>)
    uint16 ret = gBitBuf;
   2e77e:	8825      	ldrh	r5, [r4, #0]
        gBitBuf <<= gBitsLeft;
   2e780:	7833      	ldrb	r3, [r6, #0]
   2e782:	fa05 f303 	lsl.w	r3, r5, r3
   2e786:	8023      	strh	r3, [r4, #0]
    uint8 c = getChar();
   2e788:	f7ff ffbc 	bl	2e704 <getChar>
        gBitBuf |= getOctet(FFCheck);
   2e78c:	8823      	ldrh	r3, [r4, #0]
        gBitBuf <<= (8 - gBitsLeft);
   2e78e:	7831      	ldrb	r1, [r6, #0]
        gBitBuf |= getOctet(FFCheck);
   2e790:	4303      	orrs	r3, r0
        gBitBuf <<= (8 - gBitsLeft);
   2e792:	f1c1 0208 	rsb	r2, r1, #8
   2e796:	b29b      	uxth	r3, r3
   2e798:	4093      	lsls	r3, r2
        ret = (ret & 0xFF00) | (gBitBuf >> 8);
   2e79a:	f3c3 2207 	ubfx	r2, r3, #8, #8
   2e79e:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
    if (gBitsLeft < numBits) {
   2e7a2:	2907      	cmp	r1, #7
   2e7a4:	ea45 0502 	orr.w	r5, r5, r2
        gBitBuf <<= (8 - gBitsLeft);
   2e7a8:	b29a      	uxth	r2, r3
    if (gBitsLeft < numBits) {
   2e7aa:	d906      	bls.n	2e7ba <getBits.constprop.1+0x42>
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2e7ac:	3908      	subs	r1, #8
        gBitBuf <<= numBits;
   2e7ae:	0213      	lsls	r3, r2, #8
   2e7b0:	b29b      	uxth	r3, r3
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2e7b2:	7031      	strb	r1, [r6, #0]
        gBitBuf <<= (numBits - gBitsLeft);
   2e7b4:	8023      	strh	r3, [r4, #0]
}
   2e7b6:	4628      	mov	r0, r5
   2e7b8:	bd70      	pop	{r4, r5, r6, pc}
        gBitBuf <<= gBitsLeft;
   2e7ba:	4613      	mov	r3, r2
   2e7bc:	408b      	lsls	r3, r1
   2e7be:	8023      	strh	r3, [r4, #0]
    uint8 c = getChar();
   2e7c0:	f7ff ffa0 	bl	2e704 <getChar>
        gBitBuf |= getOctet(FFCheck);
   2e7c4:	8823      	ldrh	r3, [r4, #0]
        gBitBuf <<= (numBits - gBitsLeft);
   2e7c6:	7832      	ldrb	r2, [r6, #0]
        gBitBuf |= getOctet(FFCheck);
   2e7c8:	4303      	orrs	r3, r0
        gBitBuf <<= (numBits - gBitsLeft);
   2e7ca:	f1c2 0208 	rsb	r2, r2, #8
   2e7ce:	b29b      	uxth	r3, r3
   2e7d0:	4093      	lsls	r3, r2
   2e7d2:	b29b      	uxth	r3, r3
   2e7d4:	8023      	strh	r3, [r4, #0]
}
   2e7d6:	4628      	mov	r0, r5
   2e7d8:	bd70      	pop	{r4, r5, r6, pc}
   2e7da:	bf00      	nop
   2e7dc:	10050956 	.word	0x10050956
   2e7e0:	10050954 	.word	0x10050954

0002e7e4 <huffDecode>:
static PJPG_INLINE uint8 huffDecode(const HuffTable *pHuffTable, const uint8 *pHuffVal) {
   2e7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (gBitBuf & 0x8000)
   2e7e8:	f8df 9144 	ldr.w	r9, [pc, #324]	@ 2e930 <huffDecode+0x14c>
    if (!gBitsLeft) {
   2e7ec:	f8df a144 	ldr.w	sl, [pc, #324]	@ 2e934 <huffDecode+0x150>
    if (gBitBuf & 0x8000)
   2e7f0:	f8b9 3000 	ldrh.w	r3, [r9]
    if (!gBitsLeft) {
   2e7f4:	f89a 2000 	ldrb.w	r2, [sl]
static PJPG_INLINE uint8 huffDecode(const HuffTable *pHuffTable, const uint8 *pHuffVal) {
   2e7f8:	b083      	sub	sp, #12
   2e7fa:	4680      	mov	r8, r0
   2e7fc:	460c      	mov	r4, r1
    if (gBitBuf & 0x8000)
   2e7fe:	0bdd      	lsrs	r5, r3, #15
    if (!gBitsLeft) {
   2e800:	2a00      	cmp	r2, #0
   2e802:	d06b      	beq.n	2e8dc <huffDecode+0xf8>
    gBitsLeft--;
   2e804:	3a01      	subs	r2, #1
    gBitBuf <<= 1;
   2e806:	005b      	lsls	r3, r3, #1
   2e808:	b29b      	uxth	r3, r3
   2e80a:	f108 071e 	add.w	r7, r8, #30
    uint16 code = getBit();
   2e80e:	2600      	movs	r6, #0
    gBitsLeft--;
   2e810:	b2d2      	uxtb	r2, r2
        if ((code <= maxCode) && (maxCode != 0xFFFF))
   2e812:	f8cd 8000 	str.w	r8, [sp]
    gBitsLeft--;
   2e816:	f88a 2000 	strb.w	r2, [sl]
        if ((code <= maxCode) && (maxCode != 0xFFFF))
   2e81a:	46b0      	mov	r8, r6
    gBitBuf <<= 1;
   2e81c:	f8a9 3000 	strh.w	r3, [r9]
        if ((code <= maxCode) && (maxCode != 0xFFFF))
   2e820:	f64f 7bff 	movw	fp, #65535	@ 0xffff
   2e824:	4618      	mov	r0, r3
   2e826:	463e      	mov	r6, r7
   2e828:	9401      	str	r4, [sp, #4]
   2e82a:	e00e      	b.n	2e84a <huffDecode+0x66>
    gBitsLeft--;
   2e82c:	3a01      	subs	r2, #1
    gBitBuf <<= 1;
   2e82e:	0040      	lsls	r0, r0, #1
        if (i == 16)
   2e830:	f108 0801 	add.w	r8, r8, #1
    gBitsLeft--;
   2e834:	b2d2      	uxtb	r2, r2
    gBitBuf <<= 1;
   2e836:	b280      	uxth	r0, r0
        if (i == 16)
   2e838:	f1b8 0f10 	cmp.w	r8, #16
    gBitsLeft--;
   2e83c:	f88a 2000 	strb.w	r2, [sl]
    gBitBuf <<= 1;
   2e840:	f8a9 0000 	strh.w	r0, [r9]
        code |= getBit();
   2e844:	ea47 0504 	orr.w	r5, r7, r4
        if (i == 16)
   2e848:	d033      	beq.n	2e8b2 <huffDecode+0xce>
        maxCode = pHuffTable->mMaxCode[i];
   2e84a:	f836 7f02 	ldrh.w	r7, [r6, #2]!
        if ((code <= maxCode) && (maxCode != 0xFFFF))
   2e84e:	42bd      	cmp	r5, r7
        code <<= 1;
   2e850:	ea4f 0445 	mov.w	r4, r5, lsl #1
        if ((code <= maxCode) && (maxCode != 0xFFFF))
   2e854:	d801      	bhi.n	2e85a <huffDecode+0x76>
   2e856:	455f      	cmp	r7, fp
   2e858:	d12f      	bne.n	2e8ba <huffDecode+0xd6>
    if (gBitBuf & 0x8000)
   2e85a:	0bc7      	lsrs	r7, r0, #15
        code <<= 1;
   2e85c:	b2a4      	uxth	r4, r4
    if (!gBitsLeft) {
   2e85e:	2a00      	cmp	r2, #0
   2e860:	d1e4      	bne.n	2e82c <huffDecode+0x48>
    uint8 c = getChar();
   2e862:	f7ff ff4f 	bl	2e704 <getChar>
    if ((FFCheck) && (c == 0xFF)) {
   2e866:	28ff      	cmp	r0, #255	@ 0xff
    uint8 c = getChar();
   2e868:	4605      	mov	r5, r0
    if ((FFCheck) && (c == 0xFF)) {
   2e86a:	d008      	beq.n	2e87e <huffDecode+0x9a>
        gBitBuf |= getOctet(1);
   2e86c:	f8b9 0000 	ldrh.w	r0, [r9]
        gBitsLeft += 8;
   2e870:	f89a 2000 	ldrb.w	r2, [sl]
        gBitBuf |= getOctet(1);
   2e874:	4305      	orrs	r5, r0
        gBitsLeft += 8;
   2e876:	3208      	adds	r2, #8
        gBitBuf |= getOctet(1);
   2e878:	b2a8      	uxth	r0, r5
        gBitsLeft += 8;
   2e87a:	b2d2      	uxtb	r2, r2
   2e87c:	e7d6      	b.n	2e82c <huffDecode+0x48>
        uint8 n = getChar();
   2e87e:	f7ff ff41 	bl	2e704 <getChar>
    gInBufOfs--;
   2e882:	4928      	ldr	r1, [pc, #160]	@ (2e924 <huffDecode+0x140>)
    gInBufLeft++;
   2e884:	f8df c0a4 	ldr.w	ip, [pc, #164]	@ 2e92c <huffDecode+0x148>
    gInBuf[gInBufOfs] = i;
   2e888:	4b27      	ldr	r3, [pc, #156]	@ (2e928 <huffDecode+0x144>)
        if (n) {
   2e88a:	2800      	cmp	r0, #0
   2e88c:	d0ee      	beq.n	2e86c <huffDecode+0x88>
    gInBufLeft++;
   2e88e:	f89c e000 	ldrb.w	lr, [ip]
    gInBufOfs--;
   2e892:	780a      	ldrb	r2, [r1, #0]
    gInBufLeft++;
   2e894:	f10e 0e02 	add.w	lr, lr, #2
   2e898:	f88c e000 	strb.w	lr, [ip]
    gInBufOfs--;
   2e89c:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
   2e8a0:	3a02      	subs	r2, #2
   2e8a2:	b2d2      	uxtb	r2, r2
    gInBuf[gInBufOfs] = i;
   2e8a4:	fa5f fc8c 	uxtb.w	ip, ip
    gInBufOfs--;
   2e8a8:	700a      	strb	r2, [r1, #0]
    gInBuf[gInBufOfs] = i;
   2e8aa:	f803 000c 	strb.w	r0, [r3, ip]
   2e8ae:	549d      	strb	r5, [r3, r2]
}
   2e8b0:	e7dc      	b.n	2e86c <huffDecode+0x88>
            return 0;
   2e8b2:	2000      	movs	r0, #0
}
   2e8b4:	b003      	add	sp, #12
   2e8b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    j = pHuffTable->mValPtr[i];
   2e8ba:	4646      	mov	r6, r8
   2e8bc:	e9dd 8400 	ldrd	r8, r4, [sp]
   2e8c0:	eb08 0306 	add.w	r3, r8, r6
    j = (uint8)(j + (code - pHuffTable->mMinCode[i]));
   2e8c4:	f838 2016 	ldrh.w	r2, [r8, r6, lsl #1]
   2e8c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
   2e8cc:	442b      	add	r3, r5
   2e8ce:	1a9b      	subs	r3, r3, r2
    return pHuffVal[j];
   2e8d0:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
   2e8d4:	5ce0      	ldrb	r0, [r4, r3]
}
   2e8d6:	b003      	add	sp, #12
   2e8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint8 c = getChar();
   2e8dc:	f7ff ff12 	bl	2e704 <getChar>
    if ((FFCheck) && (c == 0xFF)) {
   2e8e0:	28ff      	cmp	r0, #255	@ 0xff
    uint8 c = getChar();
   2e8e2:	4606      	mov	r6, r0
    if ((FFCheck) && (c == 0xFF)) {
   2e8e4:	d008      	beq.n	2e8f8 <huffDecode+0x114>
        gBitBuf |= getOctet(1);
   2e8e6:	f8b9 3000 	ldrh.w	r3, [r9]
        gBitsLeft += 8;
   2e8ea:	f89a 2000 	ldrb.w	r2, [sl]
        gBitBuf |= getOctet(1);
   2e8ee:	4333      	orrs	r3, r6
        gBitsLeft += 8;
   2e8f0:	3208      	adds	r2, #8
        gBitBuf |= getOctet(1);
   2e8f2:	b29b      	uxth	r3, r3
        gBitsLeft += 8;
   2e8f4:	b2d2      	uxtb	r2, r2
   2e8f6:	e785      	b.n	2e804 <huffDecode+0x20>
        uint8 n = getChar();
   2e8f8:	f7ff ff04 	bl	2e704 <getChar>
        if (n) {
   2e8fc:	2800      	cmp	r0, #0
   2e8fe:	d0f2      	beq.n	2e8e6 <huffDecode+0x102>
    gInBufOfs--;
   2e900:	f8df c020 	ldr.w	ip, [pc, #32]	@ 2e924 <huffDecode+0x140>
    gInBufLeft++;
   2e904:	4909      	ldr	r1, [pc, #36]	@ (2e92c <huffDecode+0x148>)
    gInBufOfs--;
   2e906:	f89c 3000 	ldrb.w	r3, [ip]
    gInBuf[gInBufOfs] = i;
   2e90a:	4f07      	ldr	r7, [pc, #28]	@ (2e928 <huffDecode+0x144>)
    gInBufOfs--;
   2e90c:	1e5a      	subs	r2, r3, #1
   2e90e:	3b02      	subs	r3, #2
   2e910:	b2db      	uxtb	r3, r3
    gInBuf[gInBufOfs] = i;
   2e912:	b2d2      	uxtb	r2, r2
    gInBufOfs--;
   2e914:	f88c 3000 	strb.w	r3, [ip]
    gInBuf[gInBufOfs] = i;
   2e918:	54b8      	strb	r0, [r7, r2]
   2e91a:	54fe      	strb	r6, [r7, r3]
    gInBufLeft++;
   2e91c:	780b      	ldrb	r3, [r1, #0]
   2e91e:	3302      	adds	r3, #2
   2e920:	700b      	strb	r3, [r1, #0]
}
   2e922:	e7e0      	b.n	2e8e6 <huffDecode+0x102>
   2e924:	10050959 	.word	0x10050959
   2e928:	1005095c 	.word	0x1005095c
   2e92c:	10050958 	.word	0x10050958
   2e930:	10050956 	.word	0x10050956
   2e934:	10050954 	.word	0x10050954

0002e938 <getOctet.part.0>:
static PJPG_INLINE uint8 getOctet(uint8 FFCheck) {
   2e938:	b570      	push	{r4, r5, r6, lr}
    if (!gInBufLeft) {
   2e93a:	4d1e      	ldr	r5, [pc, #120]	@ (2e9b4 <getOctet.part.0+0x7c>)
   2e93c:	7829      	ldrb	r1, [r5, #0]
   2e93e:	b159      	cbz	r1, 2e958 <getOctet.part.0+0x20>
   2e940:	4c1d      	ldr	r4, [pc, #116]	@ (2e9b8 <getOctet.part.0+0x80>)
    return gInBuf[gInBufOfs++];
   2e942:	7820      	ldrb	r0, [r4, #0]
    gInBufLeft--;
   2e944:	3901      	subs	r1, #1
   2e946:	b2ca      	uxtb	r2, r1
    return gInBuf[gInBufOfs++];
   2e948:	491c      	ldr	r1, [pc, #112]	@ (2e9bc <getOctet.part.0+0x84>)
    gInBufLeft--;
   2e94a:	702a      	strb	r2, [r5, #0]
    return gInBuf[gInBufOfs++];
   2e94c:	1c43      	adds	r3, r0, #1
   2e94e:	5c0e      	ldrb	r6, [r1, r0]
   2e950:	b2db      	uxtb	r3, r3
   2e952:	7023      	strb	r3, [r4, #0]
        if (n) {
   2e954:	b9e6      	cbnz	r6, 2e990 <getOctet.part.0+0x58>
}
   2e956:	bd70      	pop	{r4, r5, r6, pc}
    status = (*g_pNeedBytesCallback)(
   2e958:	4a19      	ldr	r2, [pc, #100]	@ (2e9c0 <getOctet.part.0+0x88>)
   2e95a:	4b1a      	ldr	r3, [pc, #104]	@ (2e9c4 <getOctet.part.0+0x8c>)
    gInBufOfs = 4;
   2e95c:	4c16      	ldr	r4, [pc, #88]	@ (2e9b8 <getOctet.part.0+0x80>)
    gInBufLeft = 0;
   2e95e:	7029      	strb	r1, [r5, #0]
    gInBufOfs = 4;
   2e960:	2104      	movs	r1, #4
    status = (*g_pNeedBytesCallback)(
   2e962:	6816      	ldr	r6, [r2, #0]
    gInBufOfs = 4;
   2e964:	7021      	strb	r1, [r4, #0]
    status = (*g_pNeedBytesCallback)(
   2e966:	681b      	ldr	r3, [r3, #0]
   2e968:	4817      	ldr	r0, [pc, #92]	@ (2e9c8 <getOctet.part.0+0x90>)
   2e96a:	462a      	mov	r2, r5
   2e96c:	21fc      	movs	r1, #252	@ 0xfc
   2e96e:	47b0      	blx	r6
    if (status) {
   2e970:	b9b8      	cbnz	r0, 2e9a2 <getOctet.part.0+0x6a>
        if (!gInBufLeft) {
   2e972:	7829      	ldrb	r1, [r5, #0]
   2e974:	2900      	cmp	r1, #0
   2e976:	d1e4      	bne.n	2e942 <getOctet.part.0+0xa>
            gTemFlag = ~gTemFlag;
   2e978:	4b14      	ldr	r3, [pc, #80]	@ (2e9cc <getOctet.part.0+0x94>)
   2e97a:	781a      	ldrb	r2, [r3, #0]
   2e97c:	43d2      	mvns	r2, r2
   2e97e:	b2d2      	uxtb	r2, r2
   2e980:	701a      	strb	r2, [r3, #0]
    gInBufOfs--;
   2e982:	7823      	ldrb	r3, [r4, #0]
   2e984:	1e58      	subs	r0, r3, #1
    gInBuf[gInBufOfs] = i;
   2e986:	b2c0      	uxtb	r0, r0
            return gTemFlag ? 0xFF : 0xD9;
   2e988:	b18a      	cbz	r2, 2e9ae <getOctet.part.0+0x76>
   2e98a:	460a      	mov	r2, r1
   2e98c:	490b      	ldr	r1, [pc, #44]	@ (2e9bc <getOctet.part.0+0x84>)
   2e98e:	26ff      	movs	r6, #255	@ 0xff
    gInBufOfs--;
   2e990:	3b02      	subs	r3, #2
   2e992:	b2db      	uxtb	r3, r3
    gInBuf[gInBufOfs] = i;
   2e994:	540e      	strb	r6, [r1, r0]
   2e996:	20ff      	movs	r0, #255	@ 0xff
    gInBufLeft++;
   2e998:	3202      	adds	r2, #2
    gInBuf[gInBufOfs] = i;
   2e99a:	54c8      	strb	r0, [r1, r3]
    gInBufOfs--;
   2e99c:	7023      	strb	r3, [r4, #0]
    gInBufLeft++;
   2e99e:	702a      	strb	r2, [r5, #0]
}
   2e9a0:	bd70      	pop	{r4, r5, r6, pc}
        gCallbackStatus = status;
   2e9a2:	4b0b      	ldr	r3, [pc, #44]	@ (2e9d0 <getOctet.part.0+0x98>)
        if (!gInBufLeft) {
   2e9a4:	7829      	ldrb	r1, [r5, #0]
        gCallbackStatus = status;
   2e9a6:	7018      	strb	r0, [r3, #0]
        if (!gInBufLeft) {
   2e9a8:	2900      	cmp	r1, #0
   2e9aa:	d1ca      	bne.n	2e942 <getOctet.part.0+0xa>
   2e9ac:	e7e4      	b.n	2e978 <getOctet.part.0+0x40>
   2e9ae:	4903      	ldr	r1, [pc, #12]	@ (2e9bc <getOctet.part.0+0x84>)
            return gTemFlag ? 0xFF : 0xD9;
   2e9b0:	26d9      	movs	r6, #217	@ 0xd9
   2e9b2:	e7ed      	b.n	2e990 <getOctet.part.0+0x58>
   2e9b4:	10050958 	.word	0x10050958
   2e9b8:	10050959 	.word	0x10050959
   2e9bc:	1005095c 	.word	0x1005095c
   2e9c0:	10050914 	.word	0x10050914
   2e9c4:	10050910 	.word	0x10050910
   2e9c8:	10050960 	.word	0x10050960
   2e9cc:	10050a5c 	.word	0x10050a5c
   2e9d0:	1005090d 	.word	0x1005090d

0002e9d4 <getBits.constprop.2>:
static uint16 getBits(uint8 numBits, uint8 FFCheck) {
   2e9d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint16 ret = gBitBuf;
   2e9d8:	4f2a      	ldr	r7, [pc, #168]	@ (2ea84 <getBits.constprop.2+0xb0>)
        gBitBuf <<= gBitsLeft;
   2e9da:	f8df 80ac 	ldr.w	r8, [pc, #172]	@ 2ea88 <getBits.constprop.2+0xb4>
    uint16 ret = gBitBuf;
   2e9de:	f8b7 9000 	ldrh.w	r9, [r7]
        gBitBuf <<= gBitsLeft;
   2e9e2:	f898 2000 	ldrb.w	r2, [r8]
    if (numBits > 8) {
   2e9e6:	2808      	cmp	r0, #8
static uint16 getBits(uint8 numBits, uint8 FFCheck) {
   2e9e8:	4604      	mov	r4, r0
    if (numBits > 8) {
   2e9ea:	d80f      	bhi.n	2ea0c <getBits.constprop.2+0x38>
   2e9ec:	4606      	mov	r6, r0
    if (gBitsLeft < numBits) {
   2e9ee:	4296      	cmp	r6, r2
   2e9f0:	464b      	mov	r3, r9
   2e9f2:	d827      	bhi.n	2ea44 <getBits.constprop.2+0x70>
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2e9f4:	1b92      	subs	r2, r2, r6
    return ret >> (16 - origBits);
   2e9f6:	f1c4 0410 	rsb	r4, r4, #16
        gBitBuf <<= numBits;
   2e9fa:	40b3      	lsls	r3, r6
    return ret >> (16 - origBits);
   2e9fc:	fa49 f004 	asr.w	r0, r9, r4
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2ea00:	f888 2000 	strb.w	r2, [r8]
        gBitBuf <<= numBits;
   2ea04:	803b      	strh	r3, [r7, #0]
}
   2ea06:	b280      	uxth	r0, r0
   2ea08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        gBitBuf <<= gBitsLeft;
   2ea0c:	fa09 f202 	lsl.w	r2, r9, r2
        numBits -= 8;
   2ea10:	f1a0 0608 	sub.w	r6, r0, #8
        gBitBuf <<= gBitsLeft;
   2ea14:	803a      	strh	r2, [r7, #0]
    uint8 c = getChar();
   2ea16:	f7ff fe75 	bl	2e704 <getChar>
    if ((FFCheck) && (c == 0xFF)) {
   2ea1a:	28ff      	cmp	r0, #255	@ 0xff
        numBits -= 8;
   2ea1c:	b2f6      	uxtb	r6, r6
    uint8 c = getChar();
   2ea1e:	4605      	mov	r5, r0
    if ((FFCheck) && (c == 0xFF)) {
   2ea20:	d02a      	beq.n	2ea78 <getBits.constprop.2+0xa4>
        gBitBuf |= getOctet(FFCheck);
   2ea22:	883b      	ldrh	r3, [r7, #0]
        gBitBuf <<= (8 - gBitsLeft);
   2ea24:	f898 2000 	ldrb.w	r2, [r8]
        gBitBuf |= getOctet(FFCheck);
   2ea28:	432b      	orrs	r3, r5
        gBitBuf <<= (8 - gBitsLeft);
   2ea2a:	f1c2 0108 	rsb	r1, r2, #8
   2ea2e:	b29b      	uxth	r3, r3
   2ea30:	408b      	lsls	r3, r1
        ret = (ret & 0xFF00) | (gBitBuf >> 8);
   2ea32:	f3c3 2107 	ubfx	r1, r3, #8, #8
   2ea36:	f029 09ff 	bic.w	r9, r9, #255	@ 0xff
    if (gBitsLeft < numBits) {
   2ea3a:	4296      	cmp	r6, r2
   2ea3c:	ea49 0901 	orr.w	r9, r9, r1
        gBitBuf <<= (8 - gBitsLeft);
   2ea40:	b29b      	uxth	r3, r3
    if (gBitsLeft < numBits) {
   2ea42:	d9d7      	bls.n	2e9f4 <getBits.constprop.2+0x20>
        gBitBuf <<= gBitsLeft;
   2ea44:	4093      	lsls	r3, r2
   2ea46:	803b      	strh	r3, [r7, #0]
    uint8 c = getChar();
   2ea48:	f7ff fe5c 	bl	2e704 <getChar>
    if ((FFCheck) && (c == 0xFF)) {
   2ea4c:	28ff      	cmp	r0, #255	@ 0xff
    uint8 c = getChar();
   2ea4e:	4605      	mov	r5, r0
    if ((FFCheck) && (c == 0xFF)) {
   2ea50:	d015      	beq.n	2ea7e <getBits.constprop.2+0xaa>
        gBitBuf |= getOctet(FFCheck);
   2ea52:	883b      	ldrh	r3, [r7, #0]
   2ea54:	431d      	orrs	r5, r3
        gBitBuf <<= (numBits - gBitsLeft);
   2ea56:	f898 3000 	ldrb.w	r3, [r8]
   2ea5a:	1af2      	subs	r2, r6, r3
        gBitsLeft = 8 - (numBits - gBitsLeft);
   2ea5c:	3308      	adds	r3, #8
   2ea5e:	1b9b      	subs	r3, r3, r6
    return ret >> (16 - origBits);
   2ea60:	f1c4 0410 	rsb	r4, r4, #16
        gBitBuf <<= (numBits - gBitsLeft);
   2ea64:	b2ad      	uxth	r5, r5
   2ea66:	4095      	lsls	r5, r2
    return ret >> (16 - origBits);
   2ea68:	fa49 f004 	asr.w	r0, r9, r4
        gBitsLeft = 8 - (numBits - gBitsLeft);
   2ea6c:	f888 3000 	strb.w	r3, [r8]
        gBitBuf <<= (numBits - gBitsLeft);
   2ea70:	803d      	strh	r5, [r7, #0]
}
   2ea72:	b280      	uxth	r0, r0
   2ea74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2ea78:	f7ff ff5e 	bl	2e938 <getOctet.part.0>
   2ea7c:	e7d1      	b.n	2ea22 <getBits.constprop.2+0x4e>
   2ea7e:	f7ff ff5b 	bl	2e938 <getOctet.part.0>
   2ea82:	e7e6      	b.n	2ea52 <getBits.constprop.2+0x7e>
   2ea84:	10050956 	.word	0x10050956
   2ea88:	10050954 	.word	0x10050954

0002ea8c <processMarkers>:
static uint8 processMarkers(uint8 *pMarker) {
   2ea8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16 ret = gBitBuf;
   2ea90:	4f44      	ldr	r7, [pc, #272]	@ (2eba4 <processMarkers+0x118>)
    if (gBitsLeft < numBits) {
   2ea92:	f8df 8118 	ldr.w	r8, [pc, #280]	@ 2ebac <processMarkers+0x120>
    uint16 ret = gBitBuf;
   2ea96:	f8b7 b000 	ldrh.w	fp, [r7]
    if (gBitsLeft < numBits) {
   2ea9a:	f898 e000 	ldrb.w	lr, [r8]
static uint8 processMarkers(uint8 *pMarker) {
   2ea9e:	b097      	sub	sp, #92	@ 0x5c
   2eaa0:	4604      	mov	r4, r0
            (int16)((x + (1 << (PJPG_WINOGRAD_QUANT_SCALE_BITS - PJPG_DCT_SCALE_BITS - 1))) >> (PJPG_WINOGRAD_QUANT_SCALE_BITS - PJPG_DCT_SCALE_BITS));
   2eaa2:	f04f 0904 	mov.w	r9, #4
   2eaa6:	46da      	mov	sl, fp
    if (gBitsLeft < numBits) {
   2eaa8:	f1be 0f07 	cmp.w	lr, #7
        gBitBuf <<= gBitsLeft;
   2eaac:	4655      	mov	r5, sl
    if (gBitsLeft < numBits) {
   2eaae:	d954      	bls.n	2eb5a <processMarkers+0xce>
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2eab0:	f1ae 0308 	sub.w	r3, lr, #8
    return ret >> (16 - origBits);
   2eab4:	122d      	asrs	r5, r5, #8
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2eab6:	fa5f fe83 	uxtb.w	lr, r3
        } while (c != 0xFF);
   2eaba:	2dff      	cmp	r5, #255	@ 0xff
        gBitBuf <<= numBits;
   2eabc:	ea4f 230a 	mov.w	r3, sl, lsl #8
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2eac0:	f888 e000 	strb.w	lr, [r8]
        gBitBuf <<= numBits;
   2eac4:	fa1f fa83 	uxth.w	sl, r3
        } while (c != 0xFF);
   2eac8:	d1ee      	bne.n	2eaa8 <processMarkers+0x1c>
        gBitBuf <<= gBitsLeft;
   2eaca:	4655      	mov	r5, sl
    if (gBitsLeft < numBits) {
   2eacc:	f1be 0f07 	cmp.w	lr, #7
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2ead0:	f1ae 0108 	sub.w	r1, lr, #8
        gBitBuf <<= numBits;
   2ead4:	ea4f 220a 	mov.w	r2, sl, lsl #8
    return ret >> (16 - origBits);
   2ead8:	ea4f 2325 	mov.w	r3, r5, asr #8
    if (gBitsLeft < numBits) {
   2eadc:	d922      	bls.n	2eb24 <processMarkers+0x98>
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2eade:	fa5f fe81 	uxtb.w	lr, r1
        gBitBuf <<= numBits;
   2eae2:	fa1f fa82 	uxth.w	sl, r2
        } while (c == 0xFF);
   2eae6:	2bff      	cmp	r3, #255	@ 0xff
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2eae8:	f888 e000 	strb.w	lr, [r8]
        gBitBuf <<= (numBits - gBitsLeft);
   2eaec:	f8a7 a000 	strh.w	sl, [r7]
        } while (c == 0xFF);
   2eaf0:	d0eb      	beq.n	2eaca <processMarkers+0x3e>
    } while (c == 0);
   2eaf2:	2b00      	cmp	r3, #0
   2eaf4:	d0d8      	beq.n	2eaa8 <processMarkers+0x1c>
            c = (uint8)getBits1(8);
   2eaf6:	b2db      	uxtb	r3, r3
        switch (c) {
   2eaf8:	2bd7      	cmp	r3, #215	@ 0xd7
   2eafa:	d841      	bhi.n	2eb80 <processMarkers+0xf4>
   2eafc:	2bc4      	cmp	r3, #196	@ 0xc4
   2eafe:	d957      	bls.n	2ebb0 <processMarkers+0x124>
   2eb00:	f103 013b 	add.w	r1, r3, #59	@ 0x3b
   2eb04:	4828      	ldr	r0, [pc, #160]	@ (2eba8 <processMarkers+0x11c>)
   2eb06:	b2c9      	uxtb	r1, r1
   2eb08:	2201      	movs	r2, #1
   2eb0a:	408a      	lsls	r2, r1
   2eb0c:	4202      	tst	r2, r0
   2eb0e:	f040 830f 	bne.w	2f130 <processMarkers+0x6a4>
   2eb12:	f240 7177 	movw	r1, #1911	@ 0x777
   2eb16:	420a      	tst	r2, r1
   2eb18:	f040 8305 	bne.w	2f126 <processMarkers+0x69a>
            return PJPG_NO_ARITHMITIC_SUPPORT;
   2eb1c:	2011      	movs	r0, #17
}
   2eb1e:	b017      	add	sp, #92	@ 0x5c
   2eb20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        gBitBuf <<= gBitsLeft;
   2eb24:	fa0a fa0e 	lsl.w	sl, sl, lr
   2eb28:	f8a7 a000 	strh.w	sl, [r7]
    uint8 c = getChar();
   2eb2c:	f7ff fdea 	bl	2e704 <getChar>
        gBitBuf |= getOctet(FFCheck);
   2eb30:	883b      	ldrh	r3, [r7, #0]
        gBitBuf <<= (numBits - gBitsLeft);
   2eb32:	f898 e000 	ldrb.w	lr, [r8]
        gBitBuf |= getOctet(FFCheck);
   2eb36:	ea40 0a03 	orr.w	sl, r0, r3
        gBitBuf <<= (numBits - gBitsLeft);
   2eb3a:	fa1f fa8a 	uxth.w	sl, sl
   2eb3e:	f1ce 0308 	rsb	r3, lr, #8
   2eb42:	fa0a fa03 	lsl.w	sl, sl, r3
    return ret >> (16 - origBits);
   2eb46:	122b      	asrs	r3, r5, #8
        gBitBuf <<= (numBits - gBitsLeft);
   2eb48:	fa1f fa8a 	uxth.w	sl, sl
        } while (c == 0xFF);
   2eb4c:	2bff      	cmp	r3, #255	@ 0xff
        gBitBuf <<= (numBits - gBitsLeft);
   2eb4e:	f8a7 a000 	strh.w	sl, [r7]
        } while (c == 0xFF);
   2eb52:	d0ba      	beq.n	2eaca <processMarkers+0x3e>
    } while (c == 0);
   2eb54:	2b00      	cmp	r3, #0
   2eb56:	d0a7      	beq.n	2eaa8 <processMarkers+0x1c>
   2eb58:	e7cd      	b.n	2eaf6 <processMarkers+0x6a>
        gBitBuf <<= gBitsLeft;
   2eb5a:	fa0a f30e 	lsl.w	r3, sl, lr
   2eb5e:	803b      	strh	r3, [r7, #0]
    uint8 c = getChar();
   2eb60:	f7ff fdd0 	bl	2e704 <getChar>
        gBitBuf |= getOctet(FFCheck);
   2eb64:	883b      	ldrh	r3, [r7, #0]
        gBitBuf <<= (numBits - gBitsLeft);
   2eb66:	f898 e000 	ldrb.w	lr, [r8]
        gBitBuf |= getOctet(FFCheck);
   2eb6a:	4303      	orrs	r3, r0
        gBitBuf <<= (numBits - gBitsLeft);
   2eb6c:	b29b      	uxth	r3, r3
   2eb6e:	f1ce 0208 	rsb	r2, lr, #8
    return ret >> (16 - origBits);
   2eb72:	122d      	asrs	r5, r5, #8
        gBitBuf <<= (numBits - gBitsLeft);
   2eb74:	4093      	lsls	r3, r2
        } while (c != 0xFF);
   2eb76:	2dff      	cmp	r5, #255	@ 0xff
        gBitBuf <<= (numBits - gBitsLeft);
   2eb78:	fa1f fa83 	uxth.w	sl, r3
        } while (c != 0xFF);
   2eb7c:	d194      	bne.n	2eaa8 <processMarkers+0x1c>
   2eb7e:	e7a4      	b.n	2eaca <processMarkers+0x3e>
        switch (c) {
   2eb80:	2bdb      	cmp	r3, #219	@ 0xdb
   2eb82:	f000 8487 	beq.w	2f494 <processMarkers+0xa08>
   2eb86:	f240 82ce 	bls.w	2f126 <processMarkers+0x69a>
   2eb8a:	2bdd      	cmp	r3, #221	@ 0xdd
   2eb8c:	f040 85c4 	bne.w	2f718 <processMarkers+0xc8c>
static PJPG_INLINE uint16 getBits1(uint8 numBits) { return getBits(numBits, 0); }
   2eb90:	f7ff fdf2 	bl	2e778 <getBits.constprop.1>
    if (getBits1(16) != 4)
   2eb94:	2804      	cmp	r0, #4
   2eb96:	f000 85fa 	beq.w	2f78e <processMarkers+0xd02>
    uint16 ret = gBitBuf;
   2eb9a:	f8b7 a000 	ldrh.w	sl, [r7]
    if (gBitsLeft < numBits) {
   2eb9e:	f898 e000 	ldrb.w	lr, [r8]
   2eba2:	e781      	b.n	2eaa8 <processMarkers+0x1c>
   2eba4:	10050956 	.word	0x10050956
   2eba8:	0007f808 	.word	0x0007f808
   2ebac:	10050954 	.word	0x10050954
        switch (c) {
   2ebb0:	f040 82b1 	bne.w	2f116 <processMarkers+0x68a>
static PJPG_INLINE uint16 getBits1(uint8 numBits) { return getBits(numBits, 0); }
   2ebb4:	f7ff fde0 	bl	2e778 <getBits.constprop.1>
    if (left < 2)
   2ebb8:	2801      	cmp	r0, #1
   2ebba:	d9ee      	bls.n	2eb9a <processMarkers+0x10e>
    left -= 2;
   2ebbc:	1e83      	subs	r3, r0, #2
   2ebbe:	b29b      	uxth	r3, r3
    uint16 ret = gBitBuf;
   2ebc0:	f8b7 a000 	ldrh.w	sl, [r7]
    if (gBitsLeft < numBits) {
   2ebc4:	f898 e000 	ldrb.w	lr, [r8]
    left -= 2;
   2ebc8:	9302      	str	r3, [sp, #8]
    while (left) {
   2ebca:	2b00      	cmp	r3, #0
   2ebcc:	f43f af6c 	beq.w	2eaa8 <processMarkers+0x1c>
        gValidHuffTables |= (1 << tableIndex);
   2ebd0:	9415      	str	r4, [sp, #84]	@ 0x54
    if (gBitsLeft < numBits) {
   2ebd2:	f1be 0f07 	cmp.w	lr, #7
        gBitBuf <<= gBitsLeft;
   2ebd6:	4654      	mov	r4, sl
    if (gBitsLeft < numBits) {
   2ebd8:	f240 82db 	bls.w	2f192 <processMarkers+0x706>
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2ebdc:	f1ae 0e08 	sub.w	lr, lr, #8
   2ebe0:	fa5f fe8e 	uxtb.w	lr, lr
        gBitBuf <<= numBits;
   2ebe4:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2ebe8:	f888 e000 	strb.w	lr, [r8]
        gBitBuf <<= numBits;
   2ebec:	fa1f fa8a 	uxth.w	sl, sl
        index = (uint8)getBits1(8);
   2ebf0:	0a22      	lsrs	r2, r4, #8
        if (((index & 0xF) > 1) || ((index & 0xF0) > 0x10))
   2ebf2:	f012 010e 	ands.w	r1, r2, #14
    return ret >> (16 - origBits);
   2ebf6:	ea4f 2324 	mov.w	r3, r4, asr #8
        if (((index & 0xF) > 1) || ((index & 0xF0) > 0x10))
   2ebfa:	9103      	str	r1, [sp, #12]
   2ebfc:	f040 8289 	bne.w	2f112 <processMarkers+0x686>
   2ec00:	f002 01f0 	and.w	r1, r2, #240	@ 0xf0
   2ec04:	2910      	cmp	r1, #16
   2ec06:	f200 8284 	bhi.w	2f112 <processMarkers+0x686>
        gValidHuffTables |= (1 << tableIndex);
   2ec0a:	499f      	ldr	r1, [pc, #636]	@ (2ee88 <processMarkers+0x3fc>)
        tableIndex = ((index >> 3) & 2) + (index & 1);
   2ec0c:	f003 0301 	and.w	r3, r3, #1
   2ec10:	ea43 04d2 	orr.w	r4, r3, r2, lsr #3
        gValidHuffTables |= (1 << tableIndex);
   2ec14:	780b      	ldrb	r3, [r1, #0]
   2ec16:	2201      	movs	r2, #1
   2ec18:	40a2      	lsls	r2, r4
   2ec1a:	4313      	orrs	r3, r2
   2ec1c:	700b      	strb	r3, [r1, #0]
   2ec1e:	4b9b      	ldr	r3, [pc, #620]	@ (2ee8c <processMarkers+0x400>)
   2ec20:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
    switch (index) {
   2ec24:	4b9a      	ldr	r3, [pc, #616]	@ (2ee90 <processMarkers+0x404>)
    if (gBitsLeft < numBits) {
   2ec26:	f1be 0f07 	cmp.w	lr, #7
   2ec2a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   2ec2e:	9300      	str	r3, [sp, #0]
   2ec30:	f240 840b 	bls.w	2f44a <processMarkers+0x9be>
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2ec34:	f1ae 0308 	sub.w	r3, lr, #8
   2ec38:	b2db      	uxtb	r3, r3
        gBitBuf <<= numBits;
   2ec3a:	ea4f 220a 	mov.w	r2, sl, lsl #8
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2ec3e:	f888 3000 	strb.w	r3, [r8]
        gBitBuf <<= numBits;
   2ec42:	b292      	uxth	r2, r2
    return ret >> (16 - origBits);
   2ec44:	ea4f 212a 	mov.w	r1, sl, asr #8
   2ec48:	9109      	str	r1, [sp, #36]	@ 0x24
    if (gBitsLeft < numBits) {
   2ec4a:	2b07      	cmp	r3, #7
    return ret >> (16 - origBits);
   2ec4c:	ea4f 211a 	mov.w	r1, sl, lsr #8
   2ec50:	9114      	str	r1, [sp, #80]	@ 0x50
            uint8 n = (uint8)getBits1(8);
   2ec52:	468b      	mov	fp, r1
    if (gBitsLeft < numBits) {
   2ec54:	f240 840b 	bls.w	2f46e <processMarkers+0x9e2>
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2ec58:	3b08      	subs	r3, #8
   2ec5a:	b2d9      	uxtb	r1, r3
        gBitBuf <<= numBits;
   2ec5c:	0216      	lsls	r6, r2, #8
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2ec5e:	f888 1000 	strb.w	r1, [r8]
        gBitBuf <<= numBits;
   2ec62:	b2b6      	uxth	r6, r6
            count = (uint16)(count + n);
   2ec64:	9b14      	ldr	r3, [sp, #80]	@ 0x50
    if (gBitsLeft < numBits) {
   2ec66:	2907      	cmp	r1, #7
            count = (uint16)(count + n);
   2ec68:	eb03 2312 	add.w	r3, r3, r2, lsr #8
    return ret >> (16 - origBits);
   2ec6c:	ea4f 2222 	mov.w	r2, r2, asr #8
   2ec70:	920c      	str	r2, [sp, #48]	@ 0x30
            count = (uint16)(count + n);
   2ec72:	b29b      	uxth	r3, r3
    if (gBitsLeft < numBits) {
   2ec74:	f240 83d4 	bls.w	2f420 <processMarkers+0x994>
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2ec78:	f1a1 0208 	sub.w	r2, r1, #8
   2ec7c:	b2d2      	uxtb	r2, r2
        gBitBuf <<= numBits;
   2ec7e:	ea4f 2a06 	mov.w	sl, r6, lsl #8
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2ec82:	f888 2000 	strb.w	r2, [r8]
        gBitBuf <<= numBits;
   2ec86:	fa1f fa8a 	uxth.w	sl, sl
    return ret >> (16 - origBits);
   2ec8a:	1231      	asrs	r1, r6, #8
            count = (uint16)(count + n);
   2ec8c:	eb03 2316 	add.w	r3, r3, r6, lsr #8
    if (gBitsLeft < numBits) {
   2ec90:	2a07      	cmp	r2, #7
    return ret >> (16 - origBits);
   2ec92:	910b      	str	r1, [sp, #44]	@ 0x2c
            count = (uint16)(count + n);
   2ec94:	b29e      	uxth	r6, r3
    if (gBitsLeft < numBits) {
   2ec96:	f240 83b4 	bls.w	2f402 <processMarkers+0x976>
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2ec9a:	3a08      	subs	r2, #8
   2ec9c:	b2d2      	uxtb	r2, r2
        gBitBuf <<= numBits;
   2ec9e:	ea4f 230a 	mov.w	r3, sl, lsl #8
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2eca2:	f888 2000 	strb.w	r2, [r8]
        gBitBuf <<= numBits;
   2eca6:	b29b      	uxth	r3, r3
            count = (uint16)(count + n);
   2eca8:	eb06 261a 	add.w	r6, r6, sl, lsr #8
    return ret >> (16 - origBits);
   2ecac:	ea4f 212a 	mov.w	r1, sl, asr #8
    if (gBitsLeft < numBits) {
   2ecb0:	2a07      	cmp	r2, #7
    return ret >> (16 - origBits);
   2ecb2:	910a      	str	r1, [sp, #40]	@ 0x28
            count = (uint16)(count + n);
   2ecb4:	b2b6      	uxth	r6, r6
    if (gBitsLeft < numBits) {
   2ecb6:	f240 838f 	bls.w	2f3d8 <processMarkers+0x94c>
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2ecba:	3a08      	subs	r2, #8
   2ecbc:	b2d2      	uxtb	r2, r2
        gBitBuf <<= numBits;
   2ecbe:	ea4f 2a03 	mov.w	sl, r3, lsl #8
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2ecc2:	f888 2000 	strb.w	r2, [r8]
        gBitBuf <<= numBits;
   2ecc6:	fa1f fa8a 	uxth.w	sl, sl
            count = (uint16)(count + n);
   2ecca:	eb06 2613 	add.w	r6, r6, r3, lsr #8
    if (gBitsLeft < numBits) {
   2ecce:	2a07      	cmp	r2, #7
    return ret >> (16 - origBits);
   2ecd0:	ea4f 2323 	mov.w	r3, r3, asr #8
   2ecd4:	9307      	str	r3, [sp, #28]
            count = (uint16)(count + n);
   2ecd6:	b2b6      	uxth	r6, r6
    if (gBitsLeft < numBits) {
   2ecd8:	f240 836f 	bls.w	2f3ba <processMarkers+0x92e>
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2ecdc:	3a08      	subs	r2, #8
   2ecde:	b2d2      	uxtb	r2, r2
        gBitBuf <<= numBits;
   2ece0:	ea4f 230a 	mov.w	r3, sl, lsl #8
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2ece4:	f888 2000 	strb.w	r2, [r8]
        gBitBuf <<= numBits;
   2ece8:	b29b      	uxth	r3, r3
            count = (uint16)(count + n);
   2ecea:	eb06 261a 	add.w	r6, r6, sl, lsr #8
    return ret >> (16 - origBits);
   2ecee:	ea4f 212a 	mov.w	r1, sl, asr #8
    if (gBitsLeft < numBits) {
   2ecf2:	2a07      	cmp	r2, #7
    return ret >> (16 - origBits);
   2ecf4:	9104      	str	r1, [sp, #16]
            count = (uint16)(count + n);
   2ecf6:	b2b6      	uxth	r6, r6
    if (gBitsLeft < numBits) {
   2ecf8:	f240 834a 	bls.w	2f390 <processMarkers+0x904>
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2ecfc:	3a08      	subs	r2, #8
   2ecfe:	b2d2      	uxtb	r2, r2
        gBitBuf <<= numBits;
   2ed00:	ea4f 2a03 	mov.w	sl, r3, lsl #8
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2ed04:	f888 2000 	strb.w	r2, [r8]
        gBitBuf <<= numBits;
   2ed08:	fa1f fa8a 	uxth.w	sl, sl
            count = (uint16)(count + n);
   2ed0c:	eb06 2613 	add.w	r6, r6, r3, lsr #8
    if (gBitsLeft < numBits) {
   2ed10:	2a07      	cmp	r2, #7
    return ret >> (16 - origBits);
   2ed12:	ea4f 2323 	mov.w	r3, r3, asr #8
   2ed16:	9305      	str	r3, [sp, #20]
            count = (uint16)(count + n);
   2ed18:	b2b6      	uxth	r6, r6
    if (gBitsLeft < numBits) {
   2ed1a:	f240 832a 	bls.w	2f372 <processMarkers+0x8e6>
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2ed1e:	3a08      	subs	r2, #8
   2ed20:	b2d2      	uxtb	r2, r2
        gBitBuf <<= numBits;
   2ed22:	ea4f 230a 	mov.w	r3, sl, lsl #8
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2ed26:	f888 2000 	strb.w	r2, [r8]
        gBitBuf <<= numBits;
   2ed2a:	b29b      	uxth	r3, r3
            count = (uint16)(count + n);
   2ed2c:	eb06 261a 	add.w	r6, r6, sl, lsr #8
    return ret >> (16 - origBits);
   2ed30:	ea4f 212a 	mov.w	r1, sl, asr #8
    if (gBitsLeft < numBits) {
   2ed34:	2a07      	cmp	r2, #7
    return ret >> (16 - origBits);
   2ed36:	9106      	str	r1, [sp, #24]
            count = (uint16)(count + n);
   2ed38:	b2b6      	uxth	r6, r6
    if (gBitsLeft < numBits) {
   2ed3a:	f240 8305 	bls.w	2f348 <processMarkers+0x8bc>
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2ed3e:	3a08      	subs	r2, #8
   2ed40:	b2d2      	uxtb	r2, r2
        gBitBuf <<= numBits;
   2ed42:	ea4f 2a03 	mov.w	sl, r3, lsl #8
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2ed46:	f888 2000 	strb.w	r2, [r8]
        gBitBuf <<= numBits;
   2ed4a:	fa1f fa8a 	uxth.w	sl, sl
            count = (uint16)(count + n);
   2ed4e:	eb06 2613 	add.w	r6, r6, r3, lsr #8
    if (gBitsLeft < numBits) {
   2ed52:	2a07      	cmp	r2, #7
    return ret >> (16 - origBits);
   2ed54:	ea4f 2323 	mov.w	r3, r3, asr #8
   2ed58:	930d      	str	r3, [sp, #52]	@ 0x34
            count = (uint16)(count + n);
   2ed5a:	b2b6      	uxth	r6, r6
    if (gBitsLeft < numBits) {
   2ed5c:	f240 82e5 	bls.w	2f32a <processMarkers+0x89e>
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2ed60:	3a08      	subs	r2, #8
   2ed62:	b2d2      	uxtb	r2, r2
        gBitBuf <<= numBits;
   2ed64:	ea4f 230a 	mov.w	r3, sl, lsl #8
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2ed68:	f888 2000 	strb.w	r2, [r8]
        gBitBuf <<= numBits;
   2ed6c:	b29b      	uxth	r3, r3
            count = (uint16)(count + n);
   2ed6e:	eb06 261a 	add.w	r6, r6, sl, lsr #8
    return ret >> (16 - origBits);
   2ed72:	ea4f 212a 	mov.w	r1, sl, asr #8
    if (gBitsLeft < numBits) {
   2ed76:	2a07      	cmp	r2, #7
    return ret >> (16 - origBits);
   2ed78:	910e      	str	r1, [sp, #56]	@ 0x38
            count = (uint16)(count + n);
   2ed7a:	b2b6      	uxth	r6, r6
    if (gBitsLeft < numBits) {
   2ed7c:	f240 82c0 	bls.w	2f300 <processMarkers+0x874>
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2ed80:	3a08      	subs	r2, #8
   2ed82:	b2d2      	uxtb	r2, r2
        gBitBuf <<= numBits;
   2ed84:	ea4f 2a03 	mov.w	sl, r3, lsl #8
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2ed88:	f888 2000 	strb.w	r2, [r8]
        gBitBuf <<= numBits;
   2ed8c:	fa1f fa8a 	uxth.w	sl, sl
            count = (uint16)(count + n);
   2ed90:	eb06 2613 	add.w	r6, r6, r3, lsr #8
    if (gBitsLeft < numBits) {
   2ed94:	2a07      	cmp	r2, #7
    return ret >> (16 - origBits);
   2ed96:	ea4f 2323 	mov.w	r3, r3, asr #8
   2ed9a:	930f      	str	r3, [sp, #60]	@ 0x3c
            count = (uint16)(count + n);
   2ed9c:	b2b6      	uxth	r6, r6
    if (gBitsLeft < numBits) {
   2ed9e:	f240 82a0 	bls.w	2f2e2 <processMarkers+0x856>
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2eda2:	3a08      	subs	r2, #8
   2eda4:	b2d2      	uxtb	r2, r2
        gBitBuf <<= numBits;
   2eda6:	ea4f 230a 	mov.w	r3, sl, lsl #8
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2edaa:	f888 2000 	strb.w	r2, [r8]
        gBitBuf <<= numBits;
   2edae:	b29b      	uxth	r3, r3
            count = (uint16)(count + n);
   2edb0:	eb06 261a 	add.w	r6, r6, sl, lsr #8
    return ret >> (16 - origBits);
   2edb4:	ea4f 212a 	mov.w	r1, sl, asr #8
    if (gBitsLeft < numBits) {
   2edb8:	2a07      	cmp	r2, #7
    return ret >> (16 - origBits);
   2edba:	9110      	str	r1, [sp, #64]	@ 0x40
            count = (uint16)(count + n);
   2edbc:	b2b6      	uxth	r6, r6
    if (gBitsLeft < numBits) {
   2edbe:	f240 827b 	bls.w	2f2b8 <processMarkers+0x82c>
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2edc2:	3a08      	subs	r2, #8
   2edc4:	b2d2      	uxtb	r2, r2
        gBitBuf <<= numBits;
   2edc6:	ea4f 2a03 	mov.w	sl, r3, lsl #8
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2edca:	f888 2000 	strb.w	r2, [r8]
        gBitBuf <<= numBits;
   2edce:	fa1f fa8a 	uxth.w	sl, sl
            count = (uint16)(count + n);
   2edd2:	eb06 2613 	add.w	r6, r6, r3, lsr #8
    if (gBitsLeft < numBits) {
   2edd6:	2a07      	cmp	r2, #7
    return ret >> (16 - origBits);
   2edd8:	ea4f 2323 	mov.w	r3, r3, asr #8
   2eddc:	9311      	str	r3, [sp, #68]	@ 0x44
            count = (uint16)(count + n);
   2edde:	b2b6      	uxth	r6, r6
    if (gBitsLeft < numBits) {
   2ede0:	f240 825a 	bls.w	2f298 <processMarkers+0x80c>
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2ede4:	f1a2 0308 	sub.w	r3, r2, #8
   2ede8:	b2db      	uxtb	r3, r3
        gBitBuf <<= numBits;
   2edea:	ea4f 220a 	mov.w	r2, sl, lsl #8
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2edee:	f888 3000 	strb.w	r3, [r8]
        gBitBuf <<= numBits;
   2edf2:	b292      	uxth	r2, r2
    return ret >> (16 - origBits);
   2edf4:	ea4f 212a 	mov.w	r1, sl, asr #8
            count = (uint16)(count + n);
   2edf8:	eb06 261a 	add.w	r6, r6, sl, lsr #8
    if (gBitsLeft < numBits) {
   2edfc:	2b07      	cmp	r3, #7
    return ret >> (16 - origBits);
   2edfe:	9112      	str	r1, [sp, #72]	@ 0x48
            count = (uint16)(count + n);
   2ee00:	fa1f fa86 	uxth.w	sl, r6
    if (gBitsLeft < numBits) {
   2ee04:	f240 8236 	bls.w	2f274 <processMarkers+0x7e8>
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2ee08:	3b08      	subs	r3, #8
   2ee0a:	b2d9      	uxtb	r1, r3
        gBitBuf <<= numBits;
   2ee0c:	0216      	lsls	r6, r2, #8
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2ee0e:	f888 1000 	strb.w	r1, [r8]
        gBitBuf <<= numBits;
   2ee12:	b2b6      	uxth	r6, r6
            count = (uint16)(count + n);
   2ee14:	eb0a 2312 	add.w	r3, sl, r2, lsr #8
    if (gBitsLeft < numBits) {
   2ee18:	2907      	cmp	r1, #7
    return ret >> (16 - origBits);
   2ee1a:	ea4f 2222 	mov.w	r2, r2, asr #8
   2ee1e:	9213      	str	r2, [sp, #76]	@ 0x4c
            count = (uint16)(count + n);
   2ee20:	b29b      	uxth	r3, r3
    if (gBitsLeft < numBits) {
   2ee22:	f240 8212 	bls.w	2f24a <processMarkers+0x7be>
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2ee26:	3908      	subs	r1, #8
   2ee28:	fa5f fe81 	uxtb.w	lr, r1
        gBitBuf <<= numBits;
   2ee2c:	ea4f 2a06 	mov.w	sl, r6, lsl #8
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2ee30:	f888 e000 	strb.w	lr, [r8]
        gBitBuf <<= numBits;
   2ee34:	fa1f fa8a 	uxth.w	sl, sl
            count = (uint16)(count + n);
   2ee38:	eb03 2316 	add.w	r3, r3, r6, lsr #8
static uint16 getMaxHuffCodes(uint8 index) { return (index < 2) ? 12 : 255; }
   2ee3c:	2c01      	cmp	r4, #1
            count = (uint16)(count + n);
   2ee3e:	b29c      	uxth	r4, r3
    return ret >> (16 - origBits);
   2ee40:	ea4f 2326 	mov.w	r3, r6, asr #8
   2ee44:	9308      	str	r3, [sp, #32]
static uint16 getMaxHuffCodes(uint8 index) { return (index < 2) ? 12 : 255; }
   2ee46:	bf8c      	ite	hi
   2ee48:	23ff      	movhi	r3, #255	@ 0xff
   2ee4a:	230c      	movls	r3, #12
        if (count > getMaxHuffCodes(tableIndex))
   2ee4c:	429c      	cmp	r4, r3
   2ee4e:	f200 8160 	bhi.w	2f112 <processMarkers+0x686>
        for (i = 0; i < count; i++)
   2ee52:	b1fc      	cbz	r4, 2ee94 <processMarkers+0x408>
   2ee54:	2600      	movs	r6, #0
    if (gBitsLeft < numBits) {
   2ee56:	f1be 0f07 	cmp.w	lr, #7
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2ee5a:	f1ae 0008 	sub.w	r0, lr, #8
        for (i = 0; i < count; i++)
   2ee5e:	f106 0101 	add.w	r1, r6, #1
        gBitBuf <<= numBits;
   2ee62:	ea4f 220a 	mov.w	r2, sl, lsl #8
    return ret >> (16 - origBits);
   2ee66:	ea4f 2c2a 	mov.w	ip, sl, asr #8
    if (gBitsLeft < numBits) {
   2ee6a:	f240 8165 	bls.w	2f138 <processMarkers+0x6ac>
            pHuffVal[i] = (uint8)getBits1(8);
   2ee6e:	9b00      	ldr	r3, [sp, #0]
   2ee70:	f803 c006 	strb.w	ip, [r3, r6]
        for (i = 0; i < count; i++)
   2ee74:	b2ce      	uxtb	r6, r1
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2ee76:	fa5f fe80 	uxtb.w	lr, r0
        for (i = 0; i < count; i++)
   2ee7a:	42b4      	cmp	r4, r6
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2ee7c:	f888 e000 	strb.w	lr, [r8]
        gBitBuf <<= numBits;
   2ee80:	fa1f fa82 	uxth.w	sl, r2
        for (i = 0; i < count; i++)
   2ee84:	d8e7      	bhi.n	2ee56 <processMarkers+0x3ca>
   2ee86:	e005      	b.n	2ee94 <processMarkers+0x408>
   2ee88:	10050a5e 	.word	0x10050a5e
   2ee8c:	0004bb28 	.word	0x0004bb28
   2ee90:	0004bb18 	.word	0x0004bb18
        if (left < totalRead)
   2ee94:	9a02      	ldr	r2, [sp, #8]
        totalRead = 1 + 16 + count;
   2ee96:	f104 0311 	add.w	r3, r4, #17
   2ee9a:	b29b      	uxth	r3, r3
        if (left < totalRead)
   2ee9c:	429a      	cmp	r2, r3
   2ee9e:	f0c0 8138 	bcc.w	2f112 <processMarkers+0x686>
        left = (uint16)(left - totalRead);
   2eea2:	1ad3      	subs	r3, r2, r3
   2eea4:	b29b      	uxth	r3, r3
   2eea6:	9302      	str	r3, [sp, #8]
        if (!num) {
   2eea8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   2eeaa:	2b00      	cmp	r3, #0
   2eeac:	f000 81ca 	beq.w	2f244 <processMarkers+0x7b8>
            pHuffTable->mMaxCode[i] = code + num - 1;
   2eeb0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
   2eeb2:	1e5a      	subs	r2, r3, #1
        code <<= 1;
   2eeb4:	005b      	lsls	r3, r3, #1
            pHuffTable->mMaxCode[i] = code + num - 1;
   2eeb6:	b292      	uxth	r2, r2
        code <<= 1;
   2eeb8:	b29b      	uxth	r3, r3
            pHuffTable->mMaxCode[i] = code + num - 1;
   2eeba:	842a      	strh	r2, [r5, #32]
            pHuffTable->mMinCode[i] = code;
   2eebc:	f04f 0200 	mov.w	r2, #0
   2eec0:	802a      	strh	r2, [r5, #0]
            pHuffTable->mValPtr[i] = j;
   2eec2:	f885 2040 	strb.w	r2, [r5, #64]	@ 0x40
        if (!num) {
   2eec6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
   2eec8:	2a00      	cmp	r2, #0
   2eeca:	f000 81b6 	beq.w	2f23a <processMarkers+0x7ae>
            pHuffTable->mMaxCode[i] = code + num - 1;
   2eece:	1898      	adds	r0, r3, r2
   2eed0:	b280      	uxth	r0, r0
            j = (uint8)(j + num);
   2eed2:	445a      	add	r2, fp
   2eed4:	4659      	mov	r1, fp
   2eed6:	fa5f fb82 	uxtb.w	fp, r2
            pHuffTable->mMaxCode[i] = code + num - 1;
   2eeda:	1e42      	subs	r2, r0, #1
            j = (uint8)(j + num);
   2eedc:	461c      	mov	r4, r3
            pHuffTable->mMaxCode[i] = code + num - 1;
   2eede:	b292      	uxth	r2, r2
            code = (uint16)(code + num);
   2eee0:	4603      	mov	r3, r0
            pHuffTable->mMaxCode[i] = code + num - 1;
   2eee2:	846a      	strh	r2, [r5, #34]	@ 0x22
        if (!num) {
   2eee4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
            pHuffTable->mMinCode[i] = code;
   2eee6:	806c      	strh	r4, [r5, #2]
        code <<= 1;
   2eee8:	005b      	lsls	r3, r3, #1
            pHuffTable->mValPtr[i] = j;
   2eeea:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
        code <<= 1;
   2eeee:	b29b      	uxth	r3, r3
        if (!num) {
   2eef0:	2a00      	cmp	r2, #0
   2eef2:	f000 819d 	beq.w	2f230 <processMarkers+0x7a4>
            pHuffTable->mMaxCode[i] = code + num - 1;
   2eef6:	1898      	adds	r0, r3, r2
   2eef8:	b280      	uxth	r0, r0
            j = (uint8)(j + num);
   2eefa:	445a      	add	r2, fp
   2eefc:	4659      	mov	r1, fp
   2eefe:	fa5f fb82 	uxtb.w	fp, r2
            pHuffTable->mMaxCode[i] = code + num - 1;
   2ef02:	1e42      	subs	r2, r0, #1
            j = (uint8)(j + num);
   2ef04:	461c      	mov	r4, r3
            pHuffTable->mMaxCode[i] = code + num - 1;
   2ef06:	b292      	uxth	r2, r2
            code = (uint16)(code + num);
   2ef08:	4603      	mov	r3, r0
            pHuffTable->mMaxCode[i] = code + num - 1;
   2ef0a:	84aa      	strh	r2, [r5, #36]	@ 0x24
        if (!num) {
   2ef0c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
            pHuffTable->mMinCode[i] = code;
   2ef0e:	80ac      	strh	r4, [r5, #4]
        code <<= 1;
   2ef10:	005b      	lsls	r3, r3, #1
            pHuffTable->mValPtr[i] = j;
   2ef12:	f885 1042 	strb.w	r1, [r5, #66]	@ 0x42
        code <<= 1;
   2ef16:	b29b      	uxth	r3, r3
        if (!num) {
   2ef18:	2a00      	cmp	r2, #0
   2ef1a:	f000 8184 	beq.w	2f226 <processMarkers+0x79a>
            pHuffTable->mMaxCode[i] = code + num - 1;
   2ef1e:	1898      	adds	r0, r3, r2
   2ef20:	b280      	uxth	r0, r0
            j = (uint8)(j + num);
   2ef22:	445a      	add	r2, fp
   2ef24:	4659      	mov	r1, fp
   2ef26:	fa5f fb82 	uxtb.w	fp, r2
            pHuffTable->mMaxCode[i] = code + num - 1;
   2ef2a:	1e42      	subs	r2, r0, #1
            j = (uint8)(j + num);
   2ef2c:	461c      	mov	r4, r3
            pHuffTable->mMaxCode[i] = code + num - 1;
   2ef2e:	b292      	uxth	r2, r2
            code = (uint16)(code + num);
   2ef30:	4603      	mov	r3, r0
            pHuffTable->mMaxCode[i] = code + num - 1;
   2ef32:	84ea      	strh	r2, [r5, #38]	@ 0x26
        if (!num) {
   2ef34:	9a07      	ldr	r2, [sp, #28]
            pHuffTable->mMinCode[i] = code;
   2ef36:	80ec      	strh	r4, [r5, #6]
        code <<= 1;
   2ef38:	005b      	lsls	r3, r3, #1
            pHuffTable->mValPtr[i] = j;
   2ef3a:	f885 1043 	strb.w	r1, [r5, #67]	@ 0x43
        code <<= 1;
   2ef3e:	b29b      	uxth	r3, r3
        if (!num) {
   2ef40:	2a00      	cmp	r2, #0
   2ef42:	f000 816b 	beq.w	2f21c <processMarkers+0x790>
            pHuffTable->mMaxCode[i] = code + num - 1;
   2ef46:	1898      	adds	r0, r3, r2
   2ef48:	b280      	uxth	r0, r0
            j = (uint8)(j + num);
   2ef4a:	445a      	add	r2, fp
   2ef4c:	4659      	mov	r1, fp
   2ef4e:	fa5f fb82 	uxtb.w	fp, r2
            pHuffTable->mMaxCode[i] = code + num - 1;
   2ef52:	1e42      	subs	r2, r0, #1
            j = (uint8)(j + num);
   2ef54:	461c      	mov	r4, r3
            pHuffTable->mMaxCode[i] = code + num - 1;
   2ef56:	b292      	uxth	r2, r2
            code = (uint16)(code + num);
   2ef58:	4603      	mov	r3, r0
            pHuffTable->mMaxCode[i] = code + num - 1;
   2ef5a:	852a      	strh	r2, [r5, #40]	@ 0x28
        if (!num) {
   2ef5c:	9a04      	ldr	r2, [sp, #16]
            pHuffTable->mMinCode[i] = code;
   2ef5e:	812c      	strh	r4, [r5, #8]
        code <<= 1;
   2ef60:	005b      	lsls	r3, r3, #1
            pHuffTable->mValPtr[i] = j;
   2ef62:	f885 1044 	strb.w	r1, [r5, #68]	@ 0x44
        code <<= 1;
   2ef66:	b29b      	uxth	r3, r3
        if (!num) {
   2ef68:	2a00      	cmp	r2, #0
   2ef6a:	f000 8152 	beq.w	2f212 <processMarkers+0x786>
            pHuffTable->mMaxCode[i] = code + num - 1;
   2ef6e:	1898      	adds	r0, r3, r2
   2ef70:	b280      	uxth	r0, r0
            j = (uint8)(j + num);
   2ef72:	445a      	add	r2, fp
   2ef74:	4659      	mov	r1, fp
   2ef76:	fa5f fb82 	uxtb.w	fp, r2
            pHuffTable->mMaxCode[i] = code + num - 1;
   2ef7a:	1e42      	subs	r2, r0, #1
            j = (uint8)(j + num);
   2ef7c:	461c      	mov	r4, r3
            pHuffTable->mMaxCode[i] = code + num - 1;
   2ef7e:	b292      	uxth	r2, r2
            code = (uint16)(code + num);
   2ef80:	4603      	mov	r3, r0
            pHuffTable->mMaxCode[i] = code + num - 1;
   2ef82:	856a      	strh	r2, [r5, #42]	@ 0x2a
        if (!num) {
   2ef84:	9a05      	ldr	r2, [sp, #20]
            pHuffTable->mMinCode[i] = code;
   2ef86:	816c      	strh	r4, [r5, #10]
        code <<= 1;
   2ef88:	005b      	lsls	r3, r3, #1
            pHuffTable->mValPtr[i] = j;
   2ef8a:	f885 1045 	strb.w	r1, [r5, #69]	@ 0x45
        code <<= 1;
   2ef8e:	b29b      	uxth	r3, r3
        if (!num) {
   2ef90:	2a00      	cmp	r2, #0
   2ef92:	f000 8139 	beq.w	2f208 <processMarkers+0x77c>
            pHuffTable->mMaxCode[i] = code + num - 1;
   2ef96:	1898      	adds	r0, r3, r2
   2ef98:	b280      	uxth	r0, r0
            j = (uint8)(j + num);
   2ef9a:	445a      	add	r2, fp
   2ef9c:	4659      	mov	r1, fp
   2ef9e:	fa5f fb82 	uxtb.w	fp, r2
            pHuffTable->mMaxCode[i] = code + num - 1;
   2efa2:	1e42      	subs	r2, r0, #1
            j = (uint8)(j + num);
   2efa4:	461c      	mov	r4, r3
            pHuffTable->mMaxCode[i] = code + num - 1;
   2efa6:	b292      	uxth	r2, r2
            code = (uint16)(code + num);
   2efa8:	4603      	mov	r3, r0
            pHuffTable->mMaxCode[i] = code + num - 1;
   2efaa:	85aa      	strh	r2, [r5, #44]	@ 0x2c
        if (!num) {
   2efac:	9a06      	ldr	r2, [sp, #24]
            pHuffTable->mMinCode[i] = code;
   2efae:	81ac      	strh	r4, [r5, #12]
        code <<= 1;
   2efb0:	005b      	lsls	r3, r3, #1
            pHuffTable->mValPtr[i] = j;
   2efb2:	f885 1046 	strb.w	r1, [r5, #70]	@ 0x46
        code <<= 1;
   2efb6:	b29b      	uxth	r3, r3
        if (!num) {
   2efb8:	2a00      	cmp	r2, #0
   2efba:	f000 8120 	beq.w	2f1fe <processMarkers+0x772>
            pHuffTable->mMaxCode[i] = code + num - 1;
   2efbe:	1898      	adds	r0, r3, r2
   2efc0:	b280      	uxth	r0, r0
            j = (uint8)(j + num);
   2efc2:	445a      	add	r2, fp
   2efc4:	4659      	mov	r1, fp
   2efc6:	fa5f fb82 	uxtb.w	fp, r2
            pHuffTable->mMaxCode[i] = code + num - 1;
   2efca:	1e42      	subs	r2, r0, #1
            j = (uint8)(j + num);
   2efcc:	461c      	mov	r4, r3
            pHuffTable->mMaxCode[i] = code + num - 1;
   2efce:	b292      	uxth	r2, r2
            code = (uint16)(code + num);
   2efd0:	4603      	mov	r3, r0
            pHuffTable->mMaxCode[i] = code + num - 1;
   2efd2:	85ea      	strh	r2, [r5, #46]	@ 0x2e
        if (!num) {
   2efd4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
            pHuffTable->mMinCode[i] = code;
   2efd6:	81ec      	strh	r4, [r5, #14]
        code <<= 1;
   2efd8:	005b      	lsls	r3, r3, #1
            pHuffTable->mValPtr[i] = j;
   2efda:	f885 1047 	strb.w	r1, [r5, #71]	@ 0x47
        code <<= 1;
   2efde:	b29b      	uxth	r3, r3
        if (!num) {
   2efe0:	2a00      	cmp	r2, #0
   2efe2:	f000 8107 	beq.w	2f1f4 <processMarkers+0x768>
            pHuffTable->mMaxCode[i] = code + num - 1;
   2efe6:	1898      	adds	r0, r3, r2
   2efe8:	b280      	uxth	r0, r0
            j = (uint8)(j + num);
   2efea:	445a      	add	r2, fp
   2efec:	4659      	mov	r1, fp
   2efee:	fa5f fb82 	uxtb.w	fp, r2
            pHuffTable->mMaxCode[i] = code + num - 1;
   2eff2:	1e42      	subs	r2, r0, #1
            j = (uint8)(j + num);
   2eff4:	461c      	mov	r4, r3
            pHuffTable->mMaxCode[i] = code + num - 1;
   2eff6:	b292      	uxth	r2, r2
            code = (uint16)(code + num);
   2eff8:	4603      	mov	r3, r0
            pHuffTable->mMaxCode[i] = code + num - 1;
   2effa:	862a      	strh	r2, [r5, #48]	@ 0x30
        if (!num) {
   2effc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
            pHuffTable->mMinCode[i] = code;
   2effe:	822c      	strh	r4, [r5, #16]
        code <<= 1;
   2f000:	005b      	lsls	r3, r3, #1
            pHuffTable->mValPtr[i] = j;
   2f002:	f885 1048 	strb.w	r1, [r5, #72]	@ 0x48
        code <<= 1;
   2f006:	b29b      	uxth	r3, r3
        if (!num) {
   2f008:	2a00      	cmp	r2, #0
   2f00a:	f000 80ee 	beq.w	2f1ea <processMarkers+0x75e>
            pHuffTable->mMaxCode[i] = code + num - 1;
   2f00e:	1898      	adds	r0, r3, r2
   2f010:	b280      	uxth	r0, r0
            j = (uint8)(j + num);
   2f012:	445a      	add	r2, fp
   2f014:	4659      	mov	r1, fp
   2f016:	fa5f fb82 	uxtb.w	fp, r2
            pHuffTable->mMaxCode[i] = code + num - 1;
   2f01a:	1e42      	subs	r2, r0, #1
            j = (uint8)(j + num);
   2f01c:	461c      	mov	r4, r3
            pHuffTable->mMaxCode[i] = code + num - 1;
   2f01e:	b292      	uxth	r2, r2
            code = (uint16)(code + num);
   2f020:	4603      	mov	r3, r0
            pHuffTable->mMaxCode[i] = code + num - 1;
   2f022:	866a      	strh	r2, [r5, #50]	@ 0x32
        if (!num) {
   2f024:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
            pHuffTable->mMinCode[i] = code;
   2f026:	826c      	strh	r4, [r5, #18]
        code <<= 1;
   2f028:	005b      	lsls	r3, r3, #1
            pHuffTable->mValPtr[i] = j;
   2f02a:	f885 1049 	strb.w	r1, [r5, #73]	@ 0x49
        code <<= 1;
   2f02e:	b29b      	uxth	r3, r3
        if (!num) {
   2f030:	2a00      	cmp	r2, #0
   2f032:	f000 80d5 	beq.w	2f1e0 <processMarkers+0x754>
            pHuffTable->mMaxCode[i] = code + num - 1;
   2f036:	1898      	adds	r0, r3, r2
   2f038:	b280      	uxth	r0, r0
            j = (uint8)(j + num);
   2f03a:	445a      	add	r2, fp
   2f03c:	4659      	mov	r1, fp
   2f03e:	fa5f fb82 	uxtb.w	fp, r2
            pHuffTable->mMaxCode[i] = code + num - 1;
   2f042:	1e42      	subs	r2, r0, #1
            j = (uint8)(j + num);
   2f044:	461c      	mov	r4, r3
            pHuffTable->mMaxCode[i] = code + num - 1;
   2f046:	b292      	uxth	r2, r2
            code = (uint16)(code + num);
   2f048:	4603      	mov	r3, r0
            pHuffTable->mMaxCode[i] = code + num - 1;
   2f04a:	86aa      	strh	r2, [r5, #52]	@ 0x34
        if (!num) {
   2f04c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
            pHuffTable->mMinCode[i] = code;
   2f04e:	82ac      	strh	r4, [r5, #20]
        code <<= 1;
   2f050:	005b      	lsls	r3, r3, #1
            pHuffTable->mValPtr[i] = j;
   2f052:	f885 104a 	strb.w	r1, [r5, #74]	@ 0x4a
        code <<= 1;
   2f056:	b29b      	uxth	r3, r3
        if (!num) {
   2f058:	2a00      	cmp	r2, #0
   2f05a:	f000 80bc 	beq.w	2f1d6 <processMarkers+0x74a>
            pHuffTable->mMaxCode[i] = code + num - 1;
   2f05e:	1898      	adds	r0, r3, r2
   2f060:	b280      	uxth	r0, r0
            j = (uint8)(j + num);
   2f062:	445a      	add	r2, fp
   2f064:	4659      	mov	r1, fp
   2f066:	fa5f fb82 	uxtb.w	fp, r2
            pHuffTable->mMaxCode[i] = code + num - 1;
   2f06a:	1e42      	subs	r2, r0, #1
            j = (uint8)(j + num);
   2f06c:	461c      	mov	r4, r3
            pHuffTable->mMaxCode[i] = code + num - 1;
   2f06e:	b292      	uxth	r2, r2
            code = (uint16)(code + num);
   2f070:	4603      	mov	r3, r0
            pHuffTable->mMaxCode[i] = code + num - 1;
   2f072:	86ea      	strh	r2, [r5, #54]	@ 0x36
        if (!num) {
   2f074:	9a11      	ldr	r2, [sp, #68]	@ 0x44
            pHuffTable->mMinCode[i] = code;
   2f076:	82ec      	strh	r4, [r5, #22]
        code <<= 1;
   2f078:	005b      	lsls	r3, r3, #1
            pHuffTable->mValPtr[i] = j;
   2f07a:	f885 104b 	strb.w	r1, [r5, #75]	@ 0x4b
        code <<= 1;
   2f07e:	b29b      	uxth	r3, r3
        if (!num) {
   2f080:	2a00      	cmp	r2, #0
   2f082:	f000 80a3 	beq.w	2f1cc <processMarkers+0x740>
            pHuffTable->mMaxCode[i] = code + num - 1;
   2f086:	1898      	adds	r0, r3, r2
   2f088:	b280      	uxth	r0, r0
            j = (uint8)(j + num);
   2f08a:	445a      	add	r2, fp
   2f08c:	4659      	mov	r1, fp
   2f08e:	fa5f fb82 	uxtb.w	fp, r2
            pHuffTable->mMaxCode[i] = code + num - 1;
   2f092:	1e42      	subs	r2, r0, #1
            j = (uint8)(j + num);
   2f094:	461c      	mov	r4, r3
            pHuffTable->mMaxCode[i] = code + num - 1;
   2f096:	b292      	uxth	r2, r2
            code = (uint16)(code + num);
   2f098:	4603      	mov	r3, r0
            pHuffTable->mMaxCode[i] = code + num - 1;
   2f09a:	872a      	strh	r2, [r5, #56]	@ 0x38
        if (!num) {
   2f09c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
            pHuffTable->mMinCode[i] = code;
   2f09e:	832c      	strh	r4, [r5, #24]
        code <<= 1;
   2f0a0:	005b      	lsls	r3, r3, #1
            pHuffTable->mValPtr[i] = j;
   2f0a2:	f885 104c 	strb.w	r1, [r5, #76]	@ 0x4c
        code <<= 1;
   2f0a6:	b29b      	uxth	r3, r3
        if (!num) {
   2f0a8:	2a00      	cmp	r2, #0
   2f0aa:	f000 808a 	beq.w	2f1c2 <processMarkers+0x736>
            pHuffTable->mMaxCode[i] = code + num - 1;
   2f0ae:	1898      	adds	r0, r3, r2
   2f0b0:	b280      	uxth	r0, r0
            j = (uint8)(j + num);
   2f0b2:	445a      	add	r2, fp
   2f0b4:	4659      	mov	r1, fp
   2f0b6:	fa5f fb82 	uxtb.w	fp, r2
            pHuffTable->mMaxCode[i] = code + num - 1;
   2f0ba:	1e42      	subs	r2, r0, #1
            j = (uint8)(j + num);
   2f0bc:	461c      	mov	r4, r3
            pHuffTable->mMaxCode[i] = code + num - 1;
   2f0be:	b292      	uxth	r2, r2
            code = (uint16)(code + num);
   2f0c0:	4603      	mov	r3, r0
            pHuffTable->mMaxCode[i] = code + num - 1;
   2f0c2:	876a      	strh	r2, [r5, #58]	@ 0x3a
        if (!num) {
   2f0c4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
            pHuffTable->mMinCode[i] = code;
   2f0c6:	836c      	strh	r4, [r5, #26]
        code <<= 1;
   2f0c8:	005b      	lsls	r3, r3, #1
            pHuffTable->mValPtr[i] = j;
   2f0ca:	f885 104d 	strb.w	r1, [r5, #77]	@ 0x4d
        code <<= 1;
   2f0ce:	b29b      	uxth	r3, r3
        if (!num) {
   2f0d0:	2a00      	cmp	r2, #0
   2f0d2:	d072      	beq.n	2f1ba <processMarkers+0x72e>
            pHuffTable->mMaxCode[i] = code + num - 1;
   2f0d4:	1899      	adds	r1, r3, r2
   2f0d6:	b289      	uxth	r1, r1
            j = (uint8)(j + num);
   2f0d8:	445a      	add	r2, fp
   2f0da:	f8cd b00c 	str.w	fp, [sp, #12]
   2f0de:	fa5f fb82 	uxtb.w	fp, r2
            pHuffTable->mMaxCode[i] = code + num - 1;
   2f0e2:	1e4a      	subs	r2, r1, #1
            j = (uint8)(j + num);
   2f0e4:	4618      	mov	r0, r3
            pHuffTable->mMaxCode[i] = code + num - 1;
   2f0e6:	b292      	uxth	r2, r2
            code = (uint16)(code + num);
   2f0e8:	460b      	mov	r3, r1
            pHuffTable->mMaxCode[i] = code + num - 1;
   2f0ea:	87aa      	strh	r2, [r5, #60]	@ 0x3c
            pHuffTable->mValPtr[i] = j;
   2f0ec:	9a03      	ldr	r2, [sp, #12]
   2f0ee:	f885 204e 	strb.w	r2, [r5, #78]	@ 0x4e
        if (!num) {
   2f0f2:	9a08      	ldr	r2, [sp, #32]
            pHuffTable->mMinCode[i] = code;
   2f0f4:	83a8      	strh	r0, [r5, #28]
        if (!num) {
   2f0f6:	2a00      	cmp	r2, #0
   2f0f8:	d03d      	beq.n	2f176 <processMarkers+0x6ea>
        code <<= 1;
   2f0fa:	005b      	lsls	r3, r3, #1
   2f0fc:	b29b      	uxth	r3, r3
            pHuffTable->mMaxCode[i] = code + num - 1;
   2f0fe:	3a01      	subs	r2, #1
   2f100:	441a      	add	r2, r3
            pHuffTable->mMinCode[i] = 0x0000;
   2f102:	83eb      	strh	r3, [r5, #30]
    while (left) {
   2f104:	9b02      	ldr	r3, [sp, #8]
            pHuffTable->mValPtr[i] = 0;
   2f106:	f885 b04f 	strb.w	fp, [r5, #79]	@ 0x4f
            pHuffTable->mMaxCode[i] = 0xFFFF;
   2f10a:	87ea      	strh	r2, [r5, #62]	@ 0x3e
    while (left) {
   2f10c:	2b00      	cmp	r3, #0
   2f10e:	f47f ad60 	bne.w	2ebd2 <processMarkers+0x146>
   2f112:	9c15      	ldr	r4, [sp, #84]	@ 0x54
   2f114:	e4c8      	b.n	2eaa8 <processMarkers+0x1c>
        switch (c) {
   2f116:	2b01      	cmp	r3, #1
   2f118:	d00a      	beq.n	2f130 <processMarkers+0x6a4>
   2f11a:	f103 0240 	add.w	r2, r3, #64	@ 0x40
   2f11e:	b2d2      	uxtb	r2, r2
   2f120:	2a03      	cmp	r2, #3
   2f122:	f200 82f9 	bhi.w	2f718 <processMarkers+0xc8c>
            return 0;
   2f126:	2000      	movs	r0, #0
            *pMarker = c;
   2f128:	7023      	strb	r3, [r4, #0]
}
   2f12a:	b017      	add	sp, #92	@ 0x5c
   2f12c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch (c) {
   2f130:	2012      	movs	r0, #18
}
   2f132:	b017      	add	sp, #92	@ 0x5c
   2f134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        gBitBuf <<= gBitsLeft;
   2f138:	f8cd a004 	str.w	sl, [sp, #4]
   2f13c:	fa0a fa0e 	lsl.w	sl, sl, lr
   2f140:	f8a7 a000 	strh.w	sl, [r7]
    uint8 c = getChar();
   2f144:	f7ff fade 	bl	2e704 <getChar>
    return ret >> (16 - origBits);
   2f148:	9b01      	ldr	r3, [sp, #4]
        gBitBuf |= getOctet(FFCheck);
   2f14a:	883a      	ldrh	r2, [r7, #0]
            pHuffVal[i] = (uint8)getBits1(8);
   2f14c:	9900      	ldr	r1, [sp, #0]
        gBitBuf <<= (numBits - gBitsLeft);
   2f14e:	f898 e000 	ldrb.w	lr, [r8]
    return ret >> (16 - origBits);
   2f152:	121b      	asrs	r3, r3, #8
        gBitBuf |= getOctet(FFCheck);
   2f154:	ea40 0a02 	orr.w	sl, r0, r2
            pHuffVal[i] = (uint8)getBits1(8);
   2f158:	558b      	strb	r3, [r1, r6]
        for (i = 0; i < count; i++)
   2f15a:	3601      	adds	r6, #1
        gBitBuf <<= (numBits - gBitsLeft);
   2f15c:	fa1f fa8a 	uxth.w	sl, sl
   2f160:	f1ce 0208 	rsb	r2, lr, #8
        for (i = 0; i < count; i++)
   2f164:	b2f6      	uxtb	r6, r6
        gBitBuf <<= (numBits - gBitsLeft);
   2f166:	fa0a fa02 	lsl.w	sl, sl, r2
        for (i = 0; i < count; i++)
   2f16a:	42b4      	cmp	r4, r6
        gBitBuf <<= (numBits - gBitsLeft);
   2f16c:	fa1f fa8a 	uxth.w	sl, sl
        for (i = 0; i < count; i++)
   2f170:	f63f ae71 	bhi.w	2ee56 <processMarkers+0x3ca>
   2f174:	e68e      	b.n	2ee94 <processMarkers+0x408>
            pHuffTable->mMaxCode[i] = 0xFFFF;
   2f176:	f64f 73ff 	movw	r3, #65535	@ 0xffff
   2f17a:	87eb      	strh	r3, [r5, #62]	@ 0x3e
    while (left) {
   2f17c:	9b02      	ldr	r3, [sp, #8]
            pHuffTable->mMinCode[i] = 0x0000;
   2f17e:	83ea      	strh	r2, [r5, #30]
            pHuffTable->mValPtr[i] = 0;
   2f180:	f885 204f 	strb.w	r2, [r5, #79]	@ 0x4f
    while (left) {
   2f184:	2b00      	cmp	r3, #0
   2f186:	d0c4      	beq.n	2f112 <processMarkers+0x686>
    if (gBitsLeft < numBits) {
   2f188:	f1be 0f07 	cmp.w	lr, #7
        gBitBuf <<= gBitsLeft;
   2f18c:	4654      	mov	r4, sl
    if (gBitsLeft < numBits) {
   2f18e:	f63f ad25 	bhi.w	2ebdc <processMarkers+0x150>
        gBitBuf <<= gBitsLeft;
   2f192:	fa0a fe0e 	lsl.w	lr, sl, lr
   2f196:	f8a7 e000 	strh.w	lr, [r7]
    uint8 c = getChar();
   2f19a:	f7ff fab3 	bl	2e704 <getChar>
        gBitBuf |= getOctet(FFCheck);
   2f19e:	883b      	ldrh	r3, [r7, #0]
        gBitBuf <<= (numBits - gBitsLeft);
   2f1a0:	f898 e000 	ldrb.w	lr, [r8]
        gBitBuf |= getOctet(FFCheck);
   2f1a4:	ea40 0a03 	orr.w	sl, r0, r3
        gBitBuf <<= (numBits - gBitsLeft);
   2f1a8:	fa1f fa8a 	uxth.w	sl, sl
   2f1ac:	f1ce 0308 	rsb	r3, lr, #8
   2f1b0:	fa0a fa03 	lsl.w	sl, sl, r3
   2f1b4:	fa1f fa8a 	uxth.w	sl, sl
        gBitsLeft = 8 - (numBits - gBitsLeft);
   2f1b8:	e51a      	b.n	2ebf0 <processMarkers+0x164>
   2f1ba:	4610      	mov	r0, r2
        if (!num) {
   2f1bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
   2f1c0:	e793      	b.n	2f0ea <processMarkers+0x65e>
   2f1c2:	4611      	mov	r1, r2
   2f1c4:	4614      	mov	r4, r2
   2f1c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
   2f1ca:	e77a      	b.n	2f0c2 <processMarkers+0x636>
   2f1cc:	4611      	mov	r1, r2
   2f1ce:	4614      	mov	r4, r2
   2f1d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
   2f1d4:	e761      	b.n	2f09a <processMarkers+0x60e>
   2f1d6:	4611      	mov	r1, r2
   2f1d8:	4614      	mov	r4, r2
   2f1da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
   2f1de:	e748      	b.n	2f072 <processMarkers+0x5e6>
   2f1e0:	4611      	mov	r1, r2
   2f1e2:	4614      	mov	r4, r2
   2f1e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
   2f1e8:	e72f      	b.n	2f04a <processMarkers+0x5be>
   2f1ea:	4611      	mov	r1, r2
   2f1ec:	4614      	mov	r4, r2
   2f1ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
   2f1f2:	e716      	b.n	2f022 <processMarkers+0x596>
   2f1f4:	4611      	mov	r1, r2
   2f1f6:	4614      	mov	r4, r2
   2f1f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
   2f1fc:	e6fd      	b.n	2effa <processMarkers+0x56e>
   2f1fe:	4611      	mov	r1, r2
   2f200:	4614      	mov	r4, r2
   2f202:	f64f 72ff 	movw	r2, #65535	@ 0xffff
   2f206:	e6e4      	b.n	2efd2 <processMarkers+0x546>
   2f208:	4611      	mov	r1, r2
   2f20a:	4614      	mov	r4, r2
   2f20c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
   2f210:	e6cb      	b.n	2efaa <processMarkers+0x51e>
   2f212:	4611      	mov	r1, r2
   2f214:	4614      	mov	r4, r2
   2f216:	f64f 72ff 	movw	r2, #65535	@ 0xffff
   2f21a:	e6b2      	b.n	2ef82 <processMarkers+0x4f6>
   2f21c:	4611      	mov	r1, r2
   2f21e:	4614      	mov	r4, r2
   2f220:	f64f 72ff 	movw	r2, #65535	@ 0xffff
   2f224:	e699      	b.n	2ef5a <processMarkers+0x4ce>
   2f226:	4611      	mov	r1, r2
   2f228:	4614      	mov	r4, r2
   2f22a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
   2f22e:	e680      	b.n	2ef32 <processMarkers+0x4a6>
   2f230:	4611      	mov	r1, r2
   2f232:	4614      	mov	r4, r2
   2f234:	f64f 72ff 	movw	r2, #65535	@ 0xffff
   2f238:	e667      	b.n	2ef0a <processMarkers+0x47e>
   2f23a:	4611      	mov	r1, r2
   2f23c:	4614      	mov	r4, r2
   2f23e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
   2f242:	e64e      	b.n	2eee2 <processMarkers+0x456>
   2f244:	f64f 72ff 	movw	r2, #65535	@ 0xffff
   2f248:	e637      	b.n	2eeba <processMarkers+0x42e>
        gBitBuf <<= gBitsLeft;
   2f24a:	fa06 f101 	lsl.w	r1, r6, r1
   2f24e:	9301      	str	r3, [sp, #4]
   2f250:	8039      	strh	r1, [r7, #0]
    uint8 c = getChar();
   2f252:	f7ff fa57 	bl	2e704 <getChar>
        gBitBuf |= getOctet(FFCheck);
   2f256:	883a      	ldrh	r2, [r7, #0]
        gBitBuf <<= (numBits - gBitsLeft);
   2f258:	f898 e000 	ldrb.w	lr, [r8]
   2f25c:	9b01      	ldr	r3, [sp, #4]
        gBitBuf |= getOctet(FFCheck);
   2f25e:	ea40 0a02 	orr.w	sl, r0, r2
        gBitBuf <<= (numBits - gBitsLeft);
   2f262:	fa1f fa8a 	uxth.w	sl, sl
   2f266:	f1ce 0208 	rsb	r2, lr, #8
   2f26a:	fa0a fa02 	lsl.w	sl, sl, r2
   2f26e:	fa1f fa8a 	uxth.w	sl, sl
        gBitsLeft = 8 - (numBits - gBitsLeft);
   2f272:	e5e1      	b.n	2ee38 <processMarkers+0x3ac>
        gBitBuf <<= gBitsLeft;
   2f274:	fa02 f303 	lsl.w	r3, r2, r3
   2f278:	9201      	str	r2, [sp, #4]
   2f27a:	803b      	strh	r3, [r7, #0]
    uint8 c = getChar();
   2f27c:	f7ff fa42 	bl	2e704 <getChar>
        gBitBuf |= getOctet(FFCheck);
   2f280:	883b      	ldrh	r3, [r7, #0]
        gBitBuf <<= (numBits - gBitsLeft);
   2f282:	f898 1000 	ldrb.w	r1, [r8]
   2f286:	9a01      	ldr	r2, [sp, #4]
        gBitBuf |= getOctet(FFCheck);
   2f288:	ea40 0603 	orr.w	r6, r0, r3
        gBitBuf <<= (numBits - gBitsLeft);
   2f28c:	b2b6      	uxth	r6, r6
   2f28e:	f1c1 0308 	rsb	r3, r1, #8
   2f292:	409e      	lsls	r6, r3
   2f294:	b2b6      	uxth	r6, r6
   2f296:	e5bd      	b.n	2ee14 <processMarkers+0x388>
        gBitBuf <<= gBitsLeft;
   2f298:	fa0a f202 	lsl.w	r2, sl, r2
   2f29c:	803a      	strh	r2, [r7, #0]
    uint8 c = getChar();
   2f29e:	f7ff fa31 	bl	2e704 <getChar>
        gBitBuf |= getOctet(FFCheck);
   2f2a2:	883b      	ldrh	r3, [r7, #0]
   2f2a4:	ea40 0203 	orr.w	r2, r0, r3
        gBitBuf <<= (numBits - gBitsLeft);
   2f2a8:	f898 3000 	ldrb.w	r3, [r8]
   2f2ac:	b292      	uxth	r2, r2
   2f2ae:	f1c3 0108 	rsb	r1, r3, #8
   2f2b2:	408a      	lsls	r2, r1
   2f2b4:	b292      	uxth	r2, r2
        gBitsLeft = 8 - (numBits - gBitsLeft);
   2f2b6:	e59d      	b.n	2edf4 <processMarkers+0x368>
        gBitBuf <<= gBitsLeft;
   2f2b8:	fa03 f202 	lsl.w	r2, r3, r2
   2f2bc:	9301      	str	r3, [sp, #4]
   2f2be:	803a      	strh	r2, [r7, #0]
    uint8 c = getChar();
   2f2c0:	f7ff fa20 	bl	2e704 <getChar>
        gBitBuf |= getOctet(FFCheck);
   2f2c4:	883a      	ldrh	r2, [r7, #0]
        gBitBuf <<= (numBits - gBitsLeft);
   2f2c6:	9b01      	ldr	r3, [sp, #4]
        gBitBuf |= getOctet(FFCheck);
   2f2c8:	ea40 0a02 	orr.w	sl, r0, r2
        gBitBuf <<= (numBits - gBitsLeft);
   2f2cc:	f898 2000 	ldrb.w	r2, [r8]
   2f2d0:	fa1f fa8a 	uxth.w	sl, sl
   2f2d4:	f1c2 0108 	rsb	r1, r2, #8
   2f2d8:	fa0a fa01 	lsl.w	sl, sl, r1
   2f2dc:	fa1f fa8a 	uxth.w	sl, sl
   2f2e0:	e577      	b.n	2edd2 <processMarkers+0x346>
        gBitBuf <<= gBitsLeft;
   2f2e2:	fa0a f202 	lsl.w	r2, sl, r2
   2f2e6:	803a      	strh	r2, [r7, #0]
    uint8 c = getChar();
   2f2e8:	f7ff fa0c 	bl	2e704 <getChar>
        gBitBuf |= getOctet(FFCheck);
   2f2ec:	883b      	ldrh	r3, [r7, #0]
        gBitBuf <<= (numBits - gBitsLeft);
   2f2ee:	f898 2000 	ldrb.w	r2, [r8]
        gBitBuf |= getOctet(FFCheck);
   2f2f2:	4303      	orrs	r3, r0
        gBitBuf <<= (numBits - gBitsLeft);
   2f2f4:	b29b      	uxth	r3, r3
   2f2f6:	f1c2 0108 	rsb	r1, r2, #8
   2f2fa:	408b      	lsls	r3, r1
   2f2fc:	b29b      	uxth	r3, r3
        gBitsLeft = 8 - (numBits - gBitsLeft);
   2f2fe:	e557      	b.n	2edb0 <processMarkers+0x324>
        gBitBuf <<= gBitsLeft;
   2f300:	fa03 f202 	lsl.w	r2, r3, r2
   2f304:	9301      	str	r3, [sp, #4]
   2f306:	803a      	strh	r2, [r7, #0]
    uint8 c = getChar();
   2f308:	f7ff f9fc 	bl	2e704 <getChar>
        gBitBuf |= getOctet(FFCheck);
   2f30c:	883a      	ldrh	r2, [r7, #0]
        gBitBuf <<= (numBits - gBitsLeft);
   2f30e:	9b01      	ldr	r3, [sp, #4]
        gBitBuf |= getOctet(FFCheck);
   2f310:	ea40 0a02 	orr.w	sl, r0, r2
        gBitBuf <<= (numBits - gBitsLeft);
   2f314:	f898 2000 	ldrb.w	r2, [r8]
   2f318:	fa1f fa8a 	uxth.w	sl, sl
   2f31c:	f1c2 0108 	rsb	r1, r2, #8
   2f320:	fa0a fa01 	lsl.w	sl, sl, r1
   2f324:	fa1f fa8a 	uxth.w	sl, sl
   2f328:	e532      	b.n	2ed90 <processMarkers+0x304>
        gBitBuf <<= gBitsLeft;
   2f32a:	fa0a f202 	lsl.w	r2, sl, r2
   2f32e:	803a      	strh	r2, [r7, #0]
    uint8 c = getChar();
   2f330:	f7ff f9e8 	bl	2e704 <getChar>
        gBitBuf |= getOctet(FFCheck);
   2f334:	883b      	ldrh	r3, [r7, #0]
        gBitBuf <<= (numBits - gBitsLeft);
   2f336:	f898 2000 	ldrb.w	r2, [r8]
        gBitBuf |= getOctet(FFCheck);
   2f33a:	4303      	orrs	r3, r0
        gBitBuf <<= (numBits - gBitsLeft);
   2f33c:	b29b      	uxth	r3, r3
   2f33e:	f1c2 0108 	rsb	r1, r2, #8
   2f342:	408b      	lsls	r3, r1
   2f344:	b29b      	uxth	r3, r3
        gBitsLeft = 8 - (numBits - gBitsLeft);
   2f346:	e512      	b.n	2ed6e <processMarkers+0x2e2>
        gBitBuf <<= gBitsLeft;
   2f348:	fa03 f202 	lsl.w	r2, r3, r2
   2f34c:	9301      	str	r3, [sp, #4]
   2f34e:	803a      	strh	r2, [r7, #0]
    uint8 c = getChar();
   2f350:	f7ff f9d8 	bl	2e704 <getChar>
        gBitBuf |= getOctet(FFCheck);
   2f354:	883a      	ldrh	r2, [r7, #0]
        gBitBuf <<= (numBits - gBitsLeft);
   2f356:	9b01      	ldr	r3, [sp, #4]
        gBitBuf |= getOctet(FFCheck);
   2f358:	ea40 0a02 	orr.w	sl, r0, r2
        gBitBuf <<= (numBits - gBitsLeft);
   2f35c:	f898 2000 	ldrb.w	r2, [r8]
   2f360:	fa1f fa8a 	uxth.w	sl, sl
   2f364:	f1c2 0108 	rsb	r1, r2, #8
   2f368:	fa0a fa01 	lsl.w	sl, sl, r1
   2f36c:	fa1f fa8a 	uxth.w	sl, sl
   2f370:	e4ed      	b.n	2ed4e <processMarkers+0x2c2>
        gBitBuf <<= gBitsLeft;
   2f372:	fa0a f202 	lsl.w	r2, sl, r2
   2f376:	803a      	strh	r2, [r7, #0]
    uint8 c = getChar();
   2f378:	f7ff f9c4 	bl	2e704 <getChar>
        gBitBuf |= getOctet(FFCheck);
   2f37c:	883b      	ldrh	r3, [r7, #0]
        gBitBuf <<= (numBits - gBitsLeft);
   2f37e:	f898 2000 	ldrb.w	r2, [r8]
        gBitBuf |= getOctet(FFCheck);
   2f382:	4303      	orrs	r3, r0
        gBitBuf <<= (numBits - gBitsLeft);
   2f384:	b29b      	uxth	r3, r3
   2f386:	f1c2 0108 	rsb	r1, r2, #8
   2f38a:	408b      	lsls	r3, r1
   2f38c:	b29b      	uxth	r3, r3
        gBitsLeft = 8 - (numBits - gBitsLeft);
   2f38e:	e4cd      	b.n	2ed2c <processMarkers+0x2a0>
        gBitBuf <<= gBitsLeft;
   2f390:	fa03 f202 	lsl.w	r2, r3, r2
   2f394:	9301      	str	r3, [sp, #4]
   2f396:	803a      	strh	r2, [r7, #0]
    uint8 c = getChar();
   2f398:	f7ff f9b4 	bl	2e704 <getChar>
        gBitBuf |= getOctet(FFCheck);
   2f39c:	883a      	ldrh	r2, [r7, #0]
        gBitBuf <<= (numBits - gBitsLeft);
   2f39e:	9b01      	ldr	r3, [sp, #4]
        gBitBuf |= getOctet(FFCheck);
   2f3a0:	ea40 0a02 	orr.w	sl, r0, r2
        gBitBuf <<= (numBits - gBitsLeft);
   2f3a4:	f898 2000 	ldrb.w	r2, [r8]
   2f3a8:	fa1f fa8a 	uxth.w	sl, sl
   2f3ac:	f1c2 0108 	rsb	r1, r2, #8
   2f3b0:	fa0a fa01 	lsl.w	sl, sl, r1
   2f3b4:	fa1f fa8a 	uxth.w	sl, sl
   2f3b8:	e4a8      	b.n	2ed0c <processMarkers+0x280>
        gBitBuf <<= gBitsLeft;
   2f3ba:	fa0a f202 	lsl.w	r2, sl, r2
   2f3be:	803a      	strh	r2, [r7, #0]
    uint8 c = getChar();
   2f3c0:	f7ff f9a0 	bl	2e704 <getChar>
        gBitBuf |= getOctet(FFCheck);
   2f3c4:	883b      	ldrh	r3, [r7, #0]
        gBitBuf <<= (numBits - gBitsLeft);
   2f3c6:	f898 2000 	ldrb.w	r2, [r8]
        gBitBuf |= getOctet(FFCheck);
   2f3ca:	4303      	orrs	r3, r0
        gBitBuf <<= (numBits - gBitsLeft);
   2f3cc:	b29b      	uxth	r3, r3
   2f3ce:	f1c2 0108 	rsb	r1, r2, #8
   2f3d2:	408b      	lsls	r3, r1
   2f3d4:	b29b      	uxth	r3, r3
        gBitsLeft = 8 - (numBits - gBitsLeft);
   2f3d6:	e488      	b.n	2ecea <processMarkers+0x25e>
        gBitBuf <<= gBitsLeft;
   2f3d8:	fa03 f202 	lsl.w	r2, r3, r2
   2f3dc:	9301      	str	r3, [sp, #4]
   2f3de:	803a      	strh	r2, [r7, #0]
    uint8 c = getChar();
   2f3e0:	f7ff f990 	bl	2e704 <getChar>
        gBitBuf |= getOctet(FFCheck);
   2f3e4:	883a      	ldrh	r2, [r7, #0]
        gBitBuf <<= (numBits - gBitsLeft);
   2f3e6:	9b01      	ldr	r3, [sp, #4]
        gBitBuf |= getOctet(FFCheck);
   2f3e8:	ea40 0a02 	orr.w	sl, r0, r2
        gBitBuf <<= (numBits - gBitsLeft);
   2f3ec:	f898 2000 	ldrb.w	r2, [r8]
   2f3f0:	fa1f fa8a 	uxth.w	sl, sl
   2f3f4:	f1c2 0108 	rsb	r1, r2, #8
   2f3f8:	fa0a fa01 	lsl.w	sl, sl, r1
   2f3fc:	fa1f fa8a 	uxth.w	sl, sl
   2f400:	e463      	b.n	2ecca <processMarkers+0x23e>
        gBitBuf <<= gBitsLeft;
   2f402:	fa0a f202 	lsl.w	r2, sl, r2
   2f406:	803a      	strh	r2, [r7, #0]
    uint8 c = getChar();
   2f408:	f7ff f97c 	bl	2e704 <getChar>
        gBitBuf |= getOctet(FFCheck);
   2f40c:	883b      	ldrh	r3, [r7, #0]
        gBitBuf <<= (numBits - gBitsLeft);
   2f40e:	f898 2000 	ldrb.w	r2, [r8]
        gBitBuf |= getOctet(FFCheck);
   2f412:	4303      	orrs	r3, r0
        gBitBuf <<= (numBits - gBitsLeft);
   2f414:	b29b      	uxth	r3, r3
   2f416:	f1c2 0108 	rsb	r1, r2, #8
   2f41a:	408b      	lsls	r3, r1
   2f41c:	b29b      	uxth	r3, r3
        gBitsLeft = 8 - (numBits - gBitsLeft);
   2f41e:	e443      	b.n	2eca8 <processMarkers+0x21c>
        gBitBuf <<= gBitsLeft;
   2f420:	fa06 f101 	lsl.w	r1, r6, r1
   2f424:	9301      	str	r3, [sp, #4]
   2f426:	8039      	strh	r1, [r7, #0]
    uint8 c = getChar();
   2f428:	f7ff f96c 	bl	2e704 <getChar>
        gBitBuf |= getOctet(FFCheck);
   2f42c:	883a      	ldrh	r2, [r7, #0]
        gBitBuf <<= (numBits - gBitsLeft);
   2f42e:	9b01      	ldr	r3, [sp, #4]
        gBitBuf |= getOctet(FFCheck);
   2f430:	ea40 0a02 	orr.w	sl, r0, r2
        gBitBuf <<= (numBits - gBitsLeft);
   2f434:	f898 2000 	ldrb.w	r2, [r8]
   2f438:	fa1f fa8a 	uxth.w	sl, sl
   2f43c:	f1c2 0108 	rsb	r1, r2, #8
   2f440:	fa0a fa01 	lsl.w	sl, sl, r1
   2f444:	fa1f fa8a 	uxth.w	sl, sl
   2f448:	e41f      	b.n	2ec8a <processMarkers+0x1fe>
        gBitBuf <<= gBitsLeft;
   2f44a:	fa0a fe0e 	lsl.w	lr, sl, lr
   2f44e:	f8a7 e000 	strh.w	lr, [r7]
    uint8 c = getChar();
   2f452:	f7ff f957 	bl	2e704 <getChar>
        gBitBuf |= getOctet(FFCheck);
   2f456:	883b      	ldrh	r3, [r7, #0]
   2f458:	ea40 0203 	orr.w	r2, r0, r3
        gBitBuf <<= (numBits - gBitsLeft);
   2f45c:	f898 3000 	ldrb.w	r3, [r8]
   2f460:	b292      	uxth	r2, r2
   2f462:	f1c3 0108 	rsb	r1, r3, #8
   2f466:	408a      	lsls	r2, r1
   2f468:	b292      	uxth	r2, r2
        gBitsLeft = 8 - (numBits - gBitsLeft);
   2f46a:	f7ff bbeb 	b.w	2ec44 <processMarkers+0x1b8>
        gBitBuf <<= gBitsLeft;
   2f46e:	fa02 f303 	lsl.w	r3, r2, r3
   2f472:	9201      	str	r2, [sp, #4]
   2f474:	803b      	strh	r3, [r7, #0]
    uint8 c = getChar();
   2f476:	f7ff f945 	bl	2e704 <getChar>
        gBitBuf |= getOctet(FFCheck);
   2f47a:	883b      	ldrh	r3, [r7, #0]
        gBitBuf <<= (numBits - gBitsLeft);
   2f47c:	f898 1000 	ldrb.w	r1, [r8]
   2f480:	9a01      	ldr	r2, [sp, #4]
        gBitBuf |= getOctet(FFCheck);
   2f482:	ea40 0603 	orr.w	r6, r0, r3
        gBitBuf <<= (numBits - gBitsLeft);
   2f486:	b2b6      	uxth	r6, r6
   2f488:	f1c1 0308 	rsb	r3, r1, #8
   2f48c:	409e      	lsls	r6, r3
   2f48e:	b2b6      	uxth	r6, r6
   2f490:	f7ff bbe8 	b.w	2ec64 <processMarkers+0x1d8>
static PJPG_INLINE uint16 getBits1(uint8 numBits) { return getBits(numBits, 0); }
   2f494:	f7ff f970 	bl	2e778 <getBits.constprop.1>
    if (left < 2)
   2f498:	2801      	cmp	r0, #1
   2f49a:	f67f ab7e 	bls.w	2eb9a <processMarkers+0x10e>
    left -= 2;
   2f49e:	1e83      	subs	r3, r0, #2
   2f4a0:	b29d      	uxth	r5, r3
    uint16 ret = gBitBuf;
   2f4a2:	f8b7 a000 	ldrh.w	sl, [r7]
    if (gBitsLeft < numBits) {
   2f4a6:	f898 e000 	ldrb.w	lr, [r8]
    while (left) {
   2f4aa:	2d00      	cmp	r5, #0
   2f4ac:	f43f aafc 	beq.w	2eaa8 <processMarkers+0x1c>
        gValidQuantTables |= (n ? 2 : 1);
   2f4b0:	e9cd 5402 	strd	r5, r4, [sp, #8]
    if (gBitsLeft < numBits) {
   2f4b4:	f1be 0f07 	cmp.w	lr, #7
        gBitBuf <<= gBitsLeft;
   2f4b8:	46d3      	mov	fp, sl
    if (gBitsLeft < numBits) {
   2f4ba:	f240 80b1 	bls.w	2f620 <processMarkers+0xb94>
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2f4be:	f1ae 0e08 	sub.w	lr, lr, #8
   2f4c2:	fa5f fe8e 	uxtb.w	lr, lr
        gBitBuf <<= numBits;
   2f4c6:	ea4f 2c0a 	mov.w	ip, sl, lsl #8
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2f4ca:	f888 e000 	strb.w	lr, [r8]
        gBitBuf <<= numBits;
   2f4ce:	fa1f fa8c 	uxth.w	sl, ip
        uint8 n = (uint8)getBits1(8);
   2f4d2:	ea4f 231b 	mov.w	r3, fp, lsr #8
        uint8 prec = n >> 4;
   2f4d6:	ea4f 321b 	mov.w	r2, fp, lsr #12
        if (n > 1)
   2f4da:	f013 0f0e 	tst.w	r3, #14
        uint8 prec = n >> 4;
   2f4de:	9201      	str	r2, [sp, #4]
        n &= 0x0F;
   2f4e0:	f3cb 2b03 	ubfx	fp, fp, #8, #4
        if (n > 1)
   2f4e4:	d13f      	bne.n	2f566 <processMarkers+0xada>
        gValidQuantTables |= (n ? 2 : 1);
   2f4e6:	f1bb 0f00 	cmp.w	fp, #0
   2f4ea:	d15a      	bne.n	2f5a2 <processMarkers+0xb16>
   2f4ec:	49ad      	ldr	r1, [pc, #692]	@ (2f7a4 <processMarkers+0xd18>)
   2f4ee:	780b      	ldrb	r3, [r1, #0]
   2f4f0:	f043 0301 	orr.w	r3, r3, #1
   2f4f4:	700b      	strb	r3, [r1, #0]
        for (i = 0; i < 64; i++) {
   2f4f6:	2a00      	cmp	r2, #0
   2f4f8:	f040 80a6 	bne.w	2f648 <processMarkers+0xbbc>
   2f4fc:	4caa      	ldr	r4, [pc, #680]	@ (2f7a8 <processMarkers+0xd1c>)
   2f4fe:	f104 0680 	add.w	r6, r4, #128	@ 0x80
        gBitBuf <<= gBitsLeft;
   2f502:	4655      	mov	r5, sl
    if (gBitsLeft < numBits) {
   2f504:	f1be 0f07 	cmp.w	lr, #7
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2f508:	f1ae 0208 	sub.w	r2, lr, #8
        gBitBuf <<= numBits;
   2f50c:	ea4f 230a 	mov.w	r3, sl, lsl #8
    return ret >> (16 - origBits);
   2f510:	ea4f 2125 	mov.w	r1, r5, asr #8
    if (gBitsLeft < numBits) {
   2f514:	d92a      	bls.n	2f56c <processMarkers+0xae0>
                gQuant1[i] = (int16)temp;
   2f516:	f824 1f02 	strh.w	r1, [r4, #2]!
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2f51a:	fa5f fe82 	uxtb.w	lr, r2
        gBitBuf <<= numBits;
   2f51e:	fa1f fa83 	uxth.w	sl, r3
        for (i = 0; i < 64; i++) {
   2f522:	42b4      	cmp	r4, r6
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2f524:	f888 e000 	strb.w	lr, [r8]
        gBitBuf <<= (numBits - gBitsLeft);
   2f528:	f8a7 a000 	strh.w	sl, [r7]
        for (i = 0; i < 64; i++) {
   2f52c:	d1e9      	bne.n	2f502 <processMarkers+0xa76>
        createWinogradQuant(n ? gQuant1 : gQuant0);
   2f52e:	4b9f      	ldr	r3, [pc, #636]	@ (2f7ac <processMarkers+0xd20>)
    for (i = 0; i < 64; i++) {
   2f530:	499f      	ldr	r1, [pc, #636]	@ (2f7b0 <processMarkers+0xd24>)
   2f532:	1e9a      	subs	r2, r3, #2
   2f534:	f101 0040 	add.w	r0, r1, #64	@ 0x40
            (int16)((x + (1 << (PJPG_WINOGRAD_QUANT_SCALE_BITS - PJPG_DCT_SCALE_BITS - 1))) >> (PJPG_WINOGRAD_QUANT_SCALE_BITS - PJPG_DCT_SCALE_BITS));
   2f538:	f832 3f02 	ldrh.w	r3, [r2, #2]!
        x *= gWinogradQuant[i];
   2f53c:	f811 4b01 	ldrb.w	r4, [r1], #1
            (int16)((x + (1 << (PJPG_WINOGRAD_QUANT_SCALE_BITS - PJPG_DCT_SCALE_BITS - 1))) >> (PJPG_WINOGRAD_QUANT_SCALE_BITS - PJPG_DCT_SCALE_BITS));
   2f540:	fb13 9304 	smlabb	r3, r3, r4, r9
   2f544:	10db      	asrs	r3, r3, #3
    for (i = 0; i < 64; i++) {
   2f546:	4281      	cmp	r1, r0
            (int16)((x + (1 << (PJPG_WINOGRAD_QUANT_SCALE_BITS - PJPG_DCT_SCALE_BITS - 1))) >> (PJPG_WINOGRAD_QUANT_SCALE_BITS - PJPG_DCT_SCALE_BITS));
   2f548:	8013      	strh	r3, [r2, #0]
    for (i = 0; i < 64; i++) {
   2f54a:	d1f5      	bne.n	2f538 <processMarkers+0xaac>
        totalRead = 64 + 1;
   2f54c:	9b01      	ldr	r3, [sp, #4]
        if (left < totalRead)
   2f54e:	9a02      	ldr	r2, [sp, #8]
        totalRead = 64 + 1;
   2f550:	2b00      	cmp	r3, #0
   2f552:	bf14      	ite	ne
   2f554:	2381      	movne	r3, #129	@ 0x81
   2f556:	2341      	moveq	r3, #65	@ 0x41
        if (left < totalRead)
   2f558:	4293      	cmp	r3, r2
   2f55a:	d804      	bhi.n	2f566 <processMarkers+0xada>
        left = (uint16)(left - totalRead);
   2f55c:	1ad3      	subs	r3, r2, r3
   2f55e:	b29b      	uxth	r3, r3
   2f560:	9302      	str	r3, [sp, #8]
    while (left) {
   2f562:	2b00      	cmp	r3, #0
   2f564:	d1a6      	bne.n	2f4b4 <processMarkers+0xa28>
   2f566:	9c03      	ldr	r4, [sp, #12]
   2f568:	f7ff ba9e 	b.w	2eaa8 <processMarkers+0x1c>
        gBitBuf <<= gBitsLeft;
   2f56c:	fa0a fa0e 	lsl.w	sl, sl, lr
   2f570:	f8a7 a000 	strh.w	sl, [r7]
    uint8 c = getChar();
   2f574:	f7ff f8c6 	bl	2e704 <getChar>
        gBitBuf |= getOctet(FFCheck);
   2f578:	883b      	ldrh	r3, [r7, #0]
        gBitBuf <<= (numBits - gBitsLeft);
   2f57a:	f898 e000 	ldrb.w	lr, [r8]
        gBitBuf |= getOctet(FFCheck);
   2f57e:	ea40 0a03 	orr.w	sl, r0, r3
    return ret >> (16 - origBits);
   2f582:	122d      	asrs	r5, r5, #8
                gQuant1[i] = (int16)temp;
   2f584:	f824 5f02 	strh.w	r5, [r4, #2]!
        gBitBuf <<= (numBits - gBitsLeft);
   2f588:	fa1f fa8a 	uxth.w	sl, sl
   2f58c:	f1ce 0308 	rsb	r3, lr, #8
   2f590:	fa0a fa03 	lsl.w	sl, sl, r3
   2f594:	fa1f fa8a 	uxth.w	sl, sl
        for (i = 0; i < 64; i++) {
   2f598:	42b4      	cmp	r4, r6
        gBitBuf <<= (numBits - gBitsLeft);
   2f59a:	f8a7 a000 	strh.w	sl, [r7]
        for (i = 0; i < 64; i++) {
   2f59e:	d1b0      	bne.n	2f502 <processMarkers+0xa76>
   2f5a0:	e7c5      	b.n	2f52e <processMarkers+0xaa2>
        gValidQuantTables |= (n ? 2 : 1);
   2f5a2:	4a80      	ldr	r2, [pc, #512]	@ (2f7a4 <processMarkers+0xd18>)
   2f5a4:	7813      	ldrb	r3, [r2, #0]
   2f5a6:	f043 0302 	orr.w	r3, r3, #2
   2f5aa:	7013      	strb	r3, [r2, #0]
        for (i = 0; i < 64; i++) {
   2f5ac:	9b01      	ldr	r3, [sp, #4]
   2f5ae:	2b00      	cmp	r3, #0
   2f5b0:	d14a      	bne.n	2f648 <processMarkers+0xbbc>
   2f5b2:	4c80      	ldr	r4, [pc, #512]	@ (2f7b4 <processMarkers+0xd28>)
   2f5b4:	f104 0680 	add.w	r6, r4, #128	@ 0x80
        gBitBuf <<= gBitsLeft;
   2f5b8:	4655      	mov	r5, sl
    if (gBitsLeft < numBits) {
   2f5ba:	f1be 0f07 	cmp.w	lr, #7
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2f5be:	f1ae 0208 	sub.w	r2, lr, #8
        gBitBuf <<= numBits;
   2f5c2:	ea4f 230a 	mov.w	r3, sl, lsl #8
    return ret >> (16 - origBits);
   2f5c6:	ea4f 2125 	mov.w	r1, r5, asr #8
    if (gBitsLeft < numBits) {
   2f5ca:	d90d      	bls.n	2f5e8 <processMarkers+0xb5c>
                gQuant1[i] = (int16)temp;
   2f5cc:	f824 1f02 	strh.w	r1, [r4, #2]!
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2f5d0:	fa5f fe82 	uxtb.w	lr, r2
        gBitBuf <<= numBits;
   2f5d4:	fa1f fa83 	uxth.w	sl, r3
        for (i = 0; i < 64; i++) {
   2f5d8:	42b4      	cmp	r4, r6
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2f5da:	f888 e000 	strb.w	lr, [r8]
        gBitBuf <<= (numBits - gBitsLeft);
   2f5de:	f8a7 a000 	strh.w	sl, [r7]
        for (i = 0; i < 64; i++) {
   2f5e2:	d1e9      	bne.n	2f5b8 <processMarkers+0xb2c>
        createWinogradQuant(n ? gQuant1 : gQuant0);
   2f5e4:	4b74      	ldr	r3, [pc, #464]	@ (2f7b8 <processMarkers+0xd2c>)
   2f5e6:	e7a3      	b.n	2f530 <processMarkers+0xaa4>
        gBitBuf <<= gBitsLeft;
   2f5e8:	fa0a fa0e 	lsl.w	sl, sl, lr
   2f5ec:	f8a7 a000 	strh.w	sl, [r7]
    uint8 c = getChar();
   2f5f0:	f7ff f888 	bl	2e704 <getChar>
        gBitBuf |= getOctet(FFCheck);
   2f5f4:	883b      	ldrh	r3, [r7, #0]
        gBitBuf <<= (numBits - gBitsLeft);
   2f5f6:	f898 e000 	ldrb.w	lr, [r8]
        gBitBuf |= getOctet(FFCheck);
   2f5fa:	ea40 0a03 	orr.w	sl, r0, r3
    return ret >> (16 - origBits);
   2f5fe:	122d      	asrs	r5, r5, #8
                gQuant1[i] = (int16)temp;
   2f600:	f824 5f02 	strh.w	r5, [r4, #2]!
        gBitBuf <<= (numBits - gBitsLeft);
   2f604:	fa1f fa8a 	uxth.w	sl, sl
   2f608:	f1ce 0308 	rsb	r3, lr, #8
   2f60c:	fa0a fa03 	lsl.w	sl, sl, r3
   2f610:	fa1f fa8a 	uxth.w	sl, sl
        for (i = 0; i < 64; i++) {
   2f614:	42b4      	cmp	r4, r6
        gBitBuf <<= (numBits - gBitsLeft);
   2f616:	f8a7 a000 	strh.w	sl, [r7]
        for (i = 0; i < 64; i++) {
   2f61a:	d1cd      	bne.n	2f5b8 <processMarkers+0xb2c>
        createWinogradQuant(n ? gQuant1 : gQuant0);
   2f61c:	4b66      	ldr	r3, [pc, #408]	@ (2f7b8 <processMarkers+0xd2c>)
   2f61e:	e787      	b.n	2f530 <processMarkers+0xaa4>
        gBitBuf <<= gBitsLeft;
   2f620:	fa0a fc0e 	lsl.w	ip, sl, lr
   2f624:	f8a7 c000 	strh.w	ip, [r7]
    uint8 c = getChar();
   2f628:	f7ff f86c 	bl	2e704 <getChar>
        gBitBuf |= getOctet(FFCheck);
   2f62c:	883b      	ldrh	r3, [r7, #0]
        gBitBuf <<= (numBits - gBitsLeft);
   2f62e:	f898 e000 	ldrb.w	lr, [r8]
        gBitBuf |= getOctet(FFCheck);
   2f632:	ea40 0c03 	orr.w	ip, r0, r3
        gBitBuf <<= (numBits - gBitsLeft);
   2f636:	fa1f fc8c 	uxth.w	ip, ip
   2f63a:	f1ce 0308 	rsb	r3, lr, #8
   2f63e:	fa0c fc03 	lsl.w	ip, ip, r3
   2f642:	fa1f fa8c 	uxth.w	sl, ip
        gBitsLeft = 8 - (numBits - gBitsLeft);
   2f646:	e744      	b.n	2f4d2 <processMarkers+0xa46>
   2f648:	4b58      	ldr	r3, [pc, #352]	@ (2f7ac <processMarkers+0xd20>)
   2f64a:	4d5b      	ldr	r5, [pc, #364]	@ (2f7b8 <processMarkers+0xd2c>)
   2f64c:	461a      	mov	r2, r3
   2f64e:	f105 0180 	add.w	r1, r5, #128	@ 0x80
   2f652:	465b      	mov	r3, fp
   2f654:	4693      	mov	fp, r2
   2f656:	e005      	b.n	2f664 <processMarkers+0xbd8>
                gQuant1[i] = (int16)temp;
   2f658:	802e      	strh	r6, [r5, #0]
        for (i = 0; i < 64; i++) {
   2f65a:	3502      	adds	r5, #2
   2f65c:	42a9      	cmp	r1, r5
   2f65e:	f10b 0b02 	add.w	fp, fp, #2
   2f662:	d025      	beq.n	2f6b0 <processMarkers+0xc24>
    if (gBitsLeft < numBits) {
   2f664:	f1be 0f07 	cmp.w	lr, #7
   2f668:	d92a      	bls.n	2f6c0 <processMarkers+0xc34>
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2f66a:	f1ae 0208 	sub.w	r2, lr, #8
   2f66e:	b2d2      	uxtb	r2, r2
        gBitBuf <<= numBits;
   2f670:	ea4f 240a 	mov.w	r4, sl, lsl #8
    if (gBitsLeft < numBits) {
   2f674:	2a07      	cmp	r2, #7
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2f676:	f888 2000 	strb.w	r2, [r8]
        gBitBuf <<= numBits;
   2f67a:	b2a4      	uxth	r4, r4
                temp = (temp << 8) + getBits1(8);
   2f67c:	f40a 467f 	and.w	r6, sl, #65280	@ 0xff00
    if (gBitsLeft < numBits) {
   2f680:	d934      	bls.n	2f6ec <processMarkers+0xc60>
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2f682:	3a08      	subs	r2, #8
   2f684:	fa5f fe82 	uxtb.w	lr, r2
        gBitBuf <<= numBits;
   2f688:	ea4f 2a04 	mov.w	sl, r4, lsl #8
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2f68c:	f888 e000 	strb.w	lr, [r8]
        gBitBuf <<= numBits;
   2f690:	fa1f fa8a 	uxth.w	sl, sl
                temp = (temp << 8) + getBits1(8);
   2f694:	eb06 2614 	add.w	r6, r6, r4, lsr #8
                gQuant1[i] = (int16)temp;
   2f698:	b236      	sxth	r6, r6
        gBitBuf <<= (numBits - gBitsLeft);
   2f69a:	f8a7 a000 	strh.w	sl, [r7]
            if (n)
   2f69e:	2b00      	cmp	r3, #0
   2f6a0:	d1da      	bne.n	2f658 <processMarkers+0xbcc>
        for (i = 0; i < 64; i++) {
   2f6a2:	3502      	adds	r5, #2
   2f6a4:	42a9      	cmp	r1, r5
                gQuant0[i] = (int16)temp;
   2f6a6:	f8ab 6000 	strh.w	r6, [fp]
        for (i = 0; i < 64; i++) {
   2f6aa:	f10b 0b02 	add.w	fp, fp, #2
   2f6ae:	d1d9      	bne.n	2f664 <processMarkers+0xbd8>
        createWinogradQuant(n ? gQuant1 : gQuant0);
   2f6b0:	469b      	mov	fp, r3
   2f6b2:	4a41      	ldr	r2, [pc, #260]	@ (2f7b8 <processMarkers+0xd2c>)
   2f6b4:	4b3d      	ldr	r3, [pc, #244]	@ (2f7ac <processMarkers+0xd20>)
   2f6b6:	f1bb 0f00 	cmp.w	fp, #0
   2f6ba:	bf18      	it	ne
   2f6bc:	4613      	movne	r3, r2
   2f6be:	e737      	b.n	2f530 <processMarkers+0xaa4>
        gBitBuf <<= gBitsLeft;
   2f6c0:	fa0a fe0e 	lsl.w	lr, sl, lr
   2f6c4:	9300      	str	r3, [sp, #0]
   2f6c6:	f8a7 e000 	strh.w	lr, [r7]
    uint8 c = getChar();
   2f6ca:	f7ff f81b 	bl	2e704 <getChar>
        gBitBuf |= getOctet(FFCheck);
   2f6ce:	883c      	ldrh	r4, [r7, #0]
        gBitBuf <<= (numBits - gBitsLeft);
   2f6d0:	f898 2000 	ldrb.w	r2, [r8]
   2f6d4:	4939      	ldr	r1, [pc, #228]	@ (2f7bc <processMarkers+0xd30>)
   2f6d6:	9b00      	ldr	r3, [sp, #0]
        gBitBuf |= getOctet(FFCheck);
   2f6d8:	4304      	orrs	r4, r0
        gBitBuf <<= (numBits - gBitsLeft);
   2f6da:	b2a4      	uxth	r4, r4
   2f6dc:	f1c2 0008 	rsb	r0, r2, #8
   2f6e0:	4084      	lsls	r4, r0
    if (gBitsLeft < numBits) {
   2f6e2:	2a07      	cmp	r2, #7
        gBitBuf <<= (numBits - gBitsLeft);
   2f6e4:	b2a4      	uxth	r4, r4
                temp = (temp << 8) + getBits1(8);
   2f6e6:	f40a 467f 	and.w	r6, sl, #65280	@ 0xff00
    if (gBitsLeft < numBits) {
   2f6ea:	d8ca      	bhi.n	2f682 <processMarkers+0xbf6>
        gBitBuf <<= gBitsLeft;
   2f6ec:	fa04 f202 	lsl.w	r2, r4, r2
   2f6f0:	9300      	str	r3, [sp, #0]
   2f6f2:	803a      	strh	r2, [r7, #0]
    uint8 c = getChar();
   2f6f4:	f7ff f806 	bl	2e704 <getChar>
        gBitBuf |= getOctet(FFCheck);
   2f6f8:	883a      	ldrh	r2, [r7, #0]
        gBitBuf <<= (numBits - gBitsLeft);
   2f6fa:	f898 e000 	ldrb.w	lr, [r8]
   2f6fe:	492f      	ldr	r1, [pc, #188]	@ (2f7bc <processMarkers+0xd30>)
   2f700:	9b00      	ldr	r3, [sp, #0]
        gBitBuf |= getOctet(FFCheck);
   2f702:	ea40 0a02 	orr.w	sl, r0, r2
        gBitBuf <<= (numBits - gBitsLeft);
   2f706:	fa1f fa8a 	uxth.w	sl, sl
   2f70a:	f1ce 0208 	rsb	r2, lr, #8
   2f70e:	fa0a fa02 	lsl.w	sl, sl, r2
   2f712:	fa1f fa8a 	uxth.w	sl, sl
        gBitsLeft = 8 - (numBits - gBitsLeft);
   2f716:	e7bd      	b.n	2f694 <processMarkers+0xc08>
static PJPG_INLINE uint16 getBits1(uint8 numBits) { return getBits(numBits, 0); }
   2f718:	f7ff f82e 	bl	2e778 <getBits.constprop.1>
    if (left < 2)
   2f71c:	2801      	cmp	r0, #1
   2f71e:	f67f aa3c 	bls.w	2eb9a <processMarkers+0x10e>
    left -= 2;
   2f722:	1e83      	subs	r3, r0, #2
   2f724:	b29d      	uxth	r5, r3
    uint16 ret = gBitBuf;
   2f726:	f8b7 a000 	ldrh.w	sl, [r7]
    if (gBitsLeft < numBits) {
   2f72a:	f898 e000 	ldrb.w	lr, [r8]
    while (left) {
   2f72e:	2d00      	cmp	r5, #0
   2f730:	f43f a9ba 	beq.w	2eaa8 <processMarkers+0x1c>
    if (gBitsLeft < numBits) {
   2f734:	f1be 0f07 	cmp.w	lr, #7
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2f738:	f1ae 0108 	sub.w	r1, lr, #8
        left--;
   2f73c:	f105 32ff 	add.w	r2, r5, #4294967295	@ 0xffffffff
        gBitBuf <<= numBits;
   2f740:	ea4f 230a 	mov.w	r3, sl, lsl #8
    if (gBitsLeft < numBits) {
   2f744:	d90a      	bls.n	2f75c <processMarkers+0xcd0>
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2f746:	fa5f fe81 	uxtb.w	lr, r1
        left--;
   2f74a:	b295      	uxth	r5, r2
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2f74c:	f888 e000 	strb.w	lr, [r8]
        gBitBuf <<= numBits;
   2f750:	fa1f fa83 	uxth.w	sl, r3
    while (left) {
   2f754:	2d00      	cmp	r5, #0
   2f756:	d1ed      	bne.n	2f734 <processMarkers+0xca8>
   2f758:	f7ff b9a6 	b.w	2eaa8 <processMarkers+0x1c>
        gBitBuf <<= gBitsLeft;
   2f75c:	fa0a fa0e 	lsl.w	sl, sl, lr
   2f760:	f8a7 a000 	strh.w	sl, [r7]
    uint8 c = getChar();
   2f764:	f7fe ffce 	bl	2e704 <getChar>
        gBitBuf |= getOctet(FFCheck);
   2f768:	883b      	ldrh	r3, [r7, #0]
        gBitBuf <<= (numBits - gBitsLeft);
   2f76a:	f898 e000 	ldrb.w	lr, [r8]
        gBitBuf |= getOctet(FFCheck);
   2f76e:	ea40 0a03 	orr.w	sl, r0, r3
        left--;
   2f772:	3d01      	subs	r5, #1
        gBitBuf <<= (numBits - gBitsLeft);
   2f774:	fa1f fa8a 	uxth.w	sl, sl
   2f778:	f1ce 0308 	rsb	r3, lr, #8
   2f77c:	fa0a fa03 	lsl.w	sl, sl, r3
        left--;
   2f780:	b2ad      	uxth	r5, r5
        gBitBuf <<= (numBits - gBitsLeft);
   2f782:	fa1f fa8a 	uxth.w	sl, sl
    while (left) {
   2f786:	2d00      	cmp	r5, #0
   2f788:	d1d4      	bne.n	2f734 <processMarkers+0xca8>
   2f78a:	f7ff b98d 	b.w	2eaa8 <processMarkers+0x1c>
static PJPG_INLINE uint16 getBits1(uint8 numBits) { return getBits(numBits, 0); }
   2f78e:	f7fe fff3 	bl	2e778 <getBits.constprop.1>
    gRestartInterval = getBits1(16);
   2f792:	4b0b      	ldr	r3, [pc, #44]	@ (2f7c0 <processMarkers+0xd34>)
    uint16 ret = gBitBuf;
   2f794:	f8b7 a000 	ldrh.w	sl, [r7]
    if (gBitsLeft < numBits) {
   2f798:	f898 e000 	ldrb.w	lr, [r8]
    gRestartInterval = getBits1(16);
   2f79c:	8018      	strh	r0, [r3, #0]
    return 0;
   2f79e:	f7ff b983 	b.w	2eaa8 <processMarkers+0x1c>
   2f7a2:	bf00      	nop
   2f7a4:	10050a5d 	.word	0x10050a5d
   2f7a8:	10050e46 	.word	0x10050e46
   2f7ac:	10050e48 	.word	0x10050e48
   2f7b0:	0004bb78 	.word	0x0004bb78
   2f7b4:	10050dc6 	.word	0x10050dc6
   2f7b8:	10050dc8 	.word	0x10050dc8
   2f7bc:	10050e48 	.word	0x10050e48
   2f7c0:	1005093c 	.word	0x1005093c

0002f7c4 <getBits.constprop.0>:
static uint16 getBits(uint8 numBits, uint8 FFCheck) {
   2f7c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (gBitsLeft < numBits) {
   2f7c8:	4e34      	ldr	r6, [pc, #208]	@ (2f89c <getBits.constprop.0+0xd8>)
    uint16 ret = gBitBuf;
   2f7ca:	4c35      	ldr	r4, [pc, #212]	@ (2f8a0 <getBits.constprop.0+0xdc>)
    if (gBitsLeft < numBits) {
   2f7cc:	7833      	ldrb	r3, [r6, #0]
    uint16 ret = gBitBuf;
   2f7ce:	8825      	ldrh	r5, [r4, #0]
    if (gBitsLeft < numBits) {
   2f7d0:	2b07      	cmp	r3, #7
   2f7d2:	d908      	bls.n	2f7e6 <getBits.constprop.0+0x22>
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2f7d4:	f1a3 0208 	sub.w	r2, r3, #8
        gBitBuf <<= numBits;
   2f7d8:	022b      	lsls	r3, r5, #8
   2f7da:	b29b      	uxth	r3, r3
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   2f7dc:	7032      	strb	r2, [r6, #0]
        gBitBuf <<= (numBits - gBitsLeft);
   2f7de:	8023      	strh	r3, [r4, #0]
}
   2f7e0:	0a28      	lsrs	r0, r5, #8
   2f7e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!gInBufLeft) {
   2f7e6:	f8df 90d4 	ldr.w	r9, [pc, #212]	@ 2f8bc <getBits.constprop.0+0xf8>
        gBitBuf <<= gBitsLeft;
   2f7ea:	fa05 f303 	lsl.w	r3, r5, r3
   2f7ee:	8023      	strh	r3, [r4, #0]
    if (!gInBufLeft) {
   2f7f0:	f899 3000 	ldrb.w	r3, [r9]
   2f7f4:	4607      	mov	r7, r0
   2f7f6:	b9f3      	cbnz	r3, 2f836 <getBits.constprop.0+0x72>
    status = (*g_pNeedBytesCallback)(
   2f7f8:	4a2a      	ldr	r2, [pc, #168]	@ (2f8a4 <getBits.constprop.0+0xe0>)
    gInBufOfs = 4;
   2f7fa:	f8df 80c4 	ldr.w	r8, [pc, #196]	@ 2f8c0 <getBits.constprop.0+0xfc>
    gInBufLeft = 0;
   2f7fe:	f889 3000 	strb.w	r3, [r9]
    status = (*g_pNeedBytesCallback)(
   2f802:	4b29      	ldr	r3, [pc, #164]	@ (2f8a8 <getBits.constprop.0+0xe4>)
   2f804:	f8d2 a000 	ldr.w	sl, [r2]
   2f808:	681b      	ldr	r3, [r3, #0]
   2f80a:	4828      	ldr	r0, [pc, #160]	@ (2f8ac <getBits.constprop.0+0xe8>)
    gInBufOfs = 4;
   2f80c:	2204      	movs	r2, #4
   2f80e:	f888 2000 	strb.w	r2, [r8]
    status = (*g_pNeedBytesCallback)(
   2f812:	21fc      	movs	r1, #252	@ 0xfc
   2f814:	464a      	mov	r2, r9
   2f816:	47d0      	blx	sl
    if (status) {
   2f818:	b108      	cbz	r0, 2f81e <getBits.constprop.0+0x5a>
        gCallbackStatus = status;
   2f81a:	4b25      	ldr	r3, [pc, #148]	@ (2f8b0 <getBits.constprop.0+0xec>)
   2f81c:	7018      	strb	r0, [r3, #0]
        if (!gInBufLeft) {
   2f81e:	f899 3000 	ldrb.w	r3, [r9]
   2f822:	b953      	cbnz	r3, 2f83a <getBits.constprop.0+0x76>
            gTemFlag = ~gTemFlag;
   2f824:	4a23      	ldr	r2, [pc, #140]	@ (2f8b4 <getBits.constprop.0+0xf0>)
   2f826:	7813      	ldrb	r3, [r2, #0]
   2f828:	43db      	mvns	r3, r3
   2f82a:	b2db      	uxtb	r3, r3
   2f82c:	7013      	strb	r3, [r2, #0]
            return gTemFlag ? 0xFF : 0xD9;
   2f82e:	b1e3      	cbz	r3, 2f86a <getBits.constprop.0+0xa6>
    if ((FFCheck) && (c == 0xFF)) {
   2f830:	b9ef      	cbnz	r7, 2f86e <getBits.constprop.0+0xaa>
static uint16 getBits(uint8 numBits, uint8 FFCheck) {
   2f832:	23ff      	movs	r3, #255	@ 0xff
   2f834:	e00e      	b.n	2f854 <getBits.constprop.0+0x90>
   2f836:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 2f8c0 <getBits.constprop.0+0xfc>
    return gInBuf[gInBufOfs++];
   2f83a:	f898 2000 	ldrb.w	r2, [r8]
    gInBufLeft--;
   2f83e:	3b01      	subs	r3, #1
   2f840:	f889 3000 	strb.w	r3, [r9]
    return gInBuf[gInBufOfs++];
   2f844:	4b1c      	ldr	r3, [pc, #112]	@ (2f8b8 <getBits.constprop.0+0xf4>)
   2f846:	5c9b      	ldrb	r3, [r3, r2]
   2f848:	3201      	adds	r2, #1
   2f84a:	f888 2000 	strb.w	r2, [r8]
    if ((FFCheck) && (c == 0xFF)) {
   2f84e:	b10f      	cbz	r7, 2f854 <getBits.constprop.0+0x90>
   2f850:	2bff      	cmp	r3, #255	@ 0xff
   2f852:	d00c      	beq.n	2f86e <getBits.constprop.0+0xaa>
        gBitBuf |= getOctet(FFCheck);
   2f854:	8821      	ldrh	r1, [r4, #0]
        gBitBuf <<= (numBits - gBitsLeft);
   2f856:	7832      	ldrb	r2, [r6, #0]
   2f858:	430b      	orrs	r3, r1
   2f85a:	f1c2 0208 	rsb	r2, r2, #8
   2f85e:	4093      	lsls	r3, r2
   2f860:	b29b      	uxth	r3, r3
   2f862:	8023      	strh	r3, [r4, #0]
}
   2f864:	0a28      	lsrs	r0, r5, #8
   2f866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2f86a:	23d9      	movs	r3, #217	@ 0xd9
   2f86c:	e7f2      	b.n	2f854 <getBits.constprop.0+0x90>
        uint8 n = getChar();
   2f86e:	f7fe ff49 	bl	2e704 <getChar>
        if (n) {
   2f872:	2800      	cmp	r0, #0
   2f874:	d0dd      	beq.n	2f832 <getBits.constprop.0+0x6e>
    gInBufOfs--;
   2f876:	f898 3000 	ldrb.w	r3, [r8]
    gInBuf[gInBufOfs] = i;
   2f87a:	490f      	ldr	r1, [pc, #60]	@ (2f8b8 <getBits.constprop.0+0xf4>)
    gInBufOfs--;
   2f87c:	1e5a      	subs	r2, r3, #1
    gInBuf[gInBufOfs] = i;
   2f87e:	b2d2      	uxtb	r2, r2
    gInBufOfs--;
   2f880:	3b02      	subs	r3, #2
    gInBuf[gInBufOfs] = i;
   2f882:	5488      	strb	r0, [r1, r2]
    gInBufLeft++;
   2f884:	f899 2000 	ldrb.w	r2, [r9]
    gInBufOfs--;
   2f888:	b2db      	uxtb	r3, r3
    gInBufLeft++;
   2f88a:	3202      	adds	r2, #2
   2f88c:	f889 2000 	strb.w	r2, [r9]
    gInBuf[gInBufOfs] = i;
   2f890:	22ff      	movs	r2, #255	@ 0xff
   2f892:	54ca      	strb	r2, [r1, r3]
    gInBufOfs--;
   2f894:	f888 3000 	strb.w	r3, [r8]
}
   2f898:	e7cb      	b.n	2f832 <getBits.constprop.0+0x6e>
   2f89a:	bf00      	nop
   2f89c:	10050954 	.word	0x10050954
   2f8a0:	10050956 	.word	0x10050956
   2f8a4:	10050914 	.word	0x10050914
   2f8a8:	10050910 	.word	0x10050910
   2f8ac:	10050960 	.word	0x10050960
   2f8b0:	1005090d 	.word	0x1005090d
   2f8b4:	10050a5c 	.word	0x10050a5c
   2f8b8:	1005095c 	.word	0x1005095c
   2f8bc:	10050958 	.word	0x10050958
   2f8c0:	10050959 	.word	0x10050959

0002f8c4 <pjpeg_decode_mcu>:
    }

    return 0;
}
//------------------------------------------------------------------------------
unsigned char pjpeg_decode_mcu(void) {
   2f8c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8 status;

    if (gCallbackStatus)
   2f8c8:	4b7d      	ldr	r3, [pc, #500]	@ (2fac0 <pjpeg_decode_mcu+0x1fc>)
   2f8ca:	781e      	ldrb	r6, [r3, #0]
unsigned char pjpeg_decode_mcu(void) {
   2f8cc:	b08f      	sub	sp, #60	@ 0x3c
    if (gCallbackStatus)
   2f8ce:	2e00      	cmp	r6, #0
   2f8d0:	f040 80bb 	bne.w	2fa4a <pjpeg_decode_mcu+0x186>
        return gCallbackStatus;

    if ((!gNumMCUSRemainingX) && (!gNumMCUSRemainingY))
   2f8d4:	4b7b      	ldr	r3, [pc, #492]	@ (2fac4 <pjpeg_decode_mcu+0x200>)
   2f8d6:	4a7c      	ldr	r2, [pc, #496]	@ (2fac8 <pjpeg_decode_mcu+0x204>)
   2f8d8:	881b      	ldrh	r3, [r3, #0]
   2f8da:	8812      	ldrh	r2, [r2, #0]
   2f8dc:	4313      	orrs	r3, r2
   2f8de:	b29b      	uxth	r3, r3
   2f8e0:	2b00      	cmp	r3, #0
   2f8e2:	f000 80b1 	beq.w	2fa48 <pjpeg_decode_mcu+0x184>
    if (gRestartInterval) {
   2f8e6:	4f79      	ldr	r7, [pc, #484]	@ (2facc <pjpeg_decode_mcu+0x208>)
   2f8e8:	883b      	ldrh	r3, [r7, #0]
   2f8ea:	2b00      	cmp	r3, #0
   2f8ec:	f040 80b1 	bne.w	2fa52 <pjpeg_decode_mcu+0x18e>
    for (mcuBlock = 0; mcuBlock < gMaxBlocksPerMCU; mcuBlock++) {
   2f8f0:	f8df 9230 	ldr.w	r9, [pc, #560]	@ 2fb24 <pjpeg_decode_mcu+0x260>
   2f8f4:	f899 3000 	ldrb.w	r3, [r9]
   2f8f8:	2b00      	cmp	r3, #0
   2f8fa:	f000 80bd 	beq.w	2fa78 <pjpeg_decode_mcu+0x1b4>
   2f8fe:	4b74      	ldr	r3, [pc, #464]	@ (2fad0 <pjpeg_decode_mcu+0x20c>)
   2f900:	9309      	str	r3, [sp, #36]	@ 0x24
   2f902:	e9cd 960c 	strd	r9, r6, [sp, #48]	@ 0x30
   2f906:	4b73      	ldr	r3, [pc, #460]	@ (2fad4 <pjpeg_decode_mcu+0x210>)
   2f908:	930b      	str	r3, [sp, #44]	@ 0x2c
                            gCoeffBuf[ZAG[k++]] = 0;
   2f90a:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 2fb28 <pjpeg_decode_mcu+0x264>
   2f90e:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 2fb2c <pjpeg_decode_mcu+0x268>
    for (i = 1536; i > 0; i--)
   2f912:	2300      	movs	r3, #0
   2f914:	930a      	str	r3, [sp, #40]	@ 0x28
        uint8 componentID = gMCUOrg[mcuBlock];
   2f916:	9b09      	ldr	r3, [sp, #36]	@ 0x24
        const int16 *pQ = compQuant ? gQuant1 : gQuant0;
   2f918:	4a6f      	ldr	r2, [pc, #444]	@ (2fad8 <pjpeg_decode_mcu+0x214>)
        uint8 componentID = gMCUOrg[mcuBlock];
   2f91a:	f813 8b01 	ldrb.w	r8, [r3], #1
   2f91e:	9309      	str	r3, [sp, #36]	@ 0x24
        uint8 compDCTab = gCompDCTab[componentID];
   2f920:	4b6e      	ldr	r3, [pc, #440]	@ (2fadc <pjpeg_decode_mcu+0x218>)
        const int16 *pQ = compQuant ? gQuant1 : gQuant0;
   2f922:	f812 2008 	ldrb.w	r2, [r2, r8]
        uint8 compDCTab = gCompDCTab[componentID];
   2f926:	f813 3008 	ldrb.w	r3, [r3, r8]
        const int16 *pQ = compQuant ? gQuant1 : gQuant0;
   2f92a:	496d      	ldr	r1, [pc, #436]	@ (2fae0 <pjpeg_decode_mcu+0x21c>)
   2f92c:	4e6d      	ldr	r6, [pc, #436]	@ (2fae4 <pjpeg_decode_mcu+0x220>)
            huffDecode(compDCTab ? &gHuffTab1 : &gHuffTab0, compDCTab ? gHuffVal1 : gHuffVal0);
   2f92e:	486e      	ldr	r0, [pc, #440]	@ (2fae8 <pjpeg_decode_mcu+0x224>)
        const int16 *pQ = compQuant ? gQuant1 : gQuant0;
   2f930:	2a00      	cmp	r2, #0
   2f932:	bf18      	it	ne
   2f934:	460e      	movne	r6, r1
            huffDecode(compDCTab ? &gHuffTab1 : &gHuffTab0, compDCTab ? gHuffVal1 : gHuffVal0);
   2f936:	2b00      	cmp	r3, #0
   2f938:	4b6c      	ldr	r3, [pc, #432]	@ (2faec <pjpeg_decode_mcu+0x228>)
   2f93a:	496d      	ldr	r1, [pc, #436]	@ (2faf0 <pjpeg_decode_mcu+0x22c>)
   2f93c:	bf18      	it	ne
   2f93e:	4618      	movne	r0, r3
   2f940:	4b6c      	ldr	r3, [pc, #432]	@ (2faf4 <pjpeg_decode_mcu+0x230>)
   2f942:	bf18      	it	ne
   2f944:	4619      	movne	r1, r3
   2f946:	f7fe ff4d 	bl	2e7e4 <huffDecode>
   2f94a:	4604      	mov	r4, r0
        if (numExtraBits)
   2f94c:	f010 000f 	ands.w	r0, r0, #15
   2f950:	f040 83d7 	bne.w	30102 <pjpeg_decode_mcu+0x83e>
    switch (i) {
   2f954:	3c01      	subs	r4, #1
   2f956:	b2e4      	uxtb	r4, r4
   2f958:	2c0e      	cmp	r4, #14
   2f95a:	d809      	bhi.n	2f970 <pjpeg_decode_mcu+0xac>
    return ((x < getExtendTest(s)) ? ((int16)x + getExtendOffset(s)) : (int16)x);
   2f95c:	4b66      	ldr	r3, [pc, #408]	@ (2faf8 <pjpeg_decode_mcu+0x234>)
   2f95e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   2f962:	4283      	cmp	r3, r0
   2f964:	d904      	bls.n	2f970 <pjpeg_decode_mcu+0xac>
   2f966:	4b65      	ldr	r3, [pc, #404]	@ (2fafc <pjpeg_decode_mcu+0x238>)
   2f968:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   2f96c:	4403      	add	r3, r0
   2f96e:	b298      	uxth	r0, r3
        dc = dc + gLastDC[componentID];
   2f970:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
        gCoeffBuf[0] = dc * pQ[0];
   2f972:	8831      	ldrh	r1, [r6, #0]
        dc = dc + gLastDC[componentID];
   2f974:	f832 3018 	ldrh.w	r3, [r2, r8, lsl #1]
   2f978:	4403      	add	r3, r0
   2f97a:	b29b      	uxth	r3, r3
        gLastDC[componentID] = dc;
   2f97c:	f822 3018 	strh.w	r3, [r2, r8, lsl #1]
        gCoeffBuf[0] = dc * pQ[0];
   2f980:	fb11 f303 	smulbb	r3, r1, r3
   2f984:	4a5e      	ldr	r2, [pc, #376]	@ (2fb00 <pjpeg_decode_mcu+0x23c>)
   2f986:	f8ab 3000 	strh.w	r3, [fp]
        if (gReduce) {
   2f98a:	4b5e      	ldr	r3, [pc, #376]	@ (2fb04 <pjpeg_decode_mcu+0x240>)
   2f98c:	f812 2008 	ldrb.w	r2, [r2, r8]
   2f990:	781b      	ldrb	r3, [r3, #0]
   2f992:	3a00      	subs	r2, #0
   2f994:	bf18      	it	ne
   2f996:	2201      	movne	r2, #1
   2f998:	2b00      	cmp	r3, #0
   2f99a:	d07f      	beq.n	2fa9c <pjpeg_decode_mcu+0x1d8>
   2f99c:	2a00      	cmp	r2, #0
   2f99e:	4b5a      	ldr	r3, [pc, #360]	@ (2fb08 <pjpeg_decode_mcu+0x244>)
   2f9a0:	4a5a      	ldr	r2, [pc, #360]	@ (2fb0c <pjpeg_decode_mcu+0x248>)
   2f9a2:	bf14      	ite	ne
   2f9a4:	4698      	movne	r8, r3
   2f9a6:	4690      	moveq	r8, r2
   2f9a8:	4b59      	ldr	r3, [pc, #356]	@ (2fb10 <pjpeg_decode_mcu+0x24c>)
   2f9aa:	4a5a      	ldr	r2, [pc, #360]	@ (2fb14 <pjpeg_decode_mcu+0x250>)
   2f9ac:	bf14      	ite	ne
   2f9ae:	461c      	movne	r4, r3
   2f9b0:	4614      	moveq	r4, r2
            for (k = 1; k < 64; k++) {
   2f9b2:	f04f 0901 	mov.w	r9, #1
   2f9b6:	e010      	b.n	2f9da <pjpeg_decode_mcu+0x116>
                    if (r == 15) {
   2f9b8:	2b0f      	cmp	r3, #15
   2f9ba:	d12c      	bne.n	2fa16 <pjpeg_decode_mcu+0x152>
                        if ((k + 16) > 64)
   2f9bc:	f1b9 0f30 	cmp.w	r9, #48	@ 0x30
   2f9c0:	f200 83a2 	bhi.w	30108 <pjpeg_decode_mcu+0x844>
                        k += (16 - 1); // - 1 because the loop counter is k
   2f9c4:	f109 090f 	add.w	r9, r9, #15
   2f9c8:	fa5f f989 	uxtb.w	r9, r9
            for (k = 1; k < 64; k++) {
   2f9cc:	f109 0901 	add.w	r9, r9, #1
   2f9d0:	fa5f f989 	uxtb.w	r9, r9
   2f9d4:	f1b9 0f3f 	cmp.w	r9, #63	@ 0x3f
   2f9d8:	d81d      	bhi.n	2fa16 <pjpeg_decode_mcu+0x152>
                s = huffDecode(
   2f9da:	4641      	mov	r1, r8
   2f9dc:	4620      	mov	r0, r4
   2f9de:	f7fe ff01 	bl	2e7e4 <huffDecode>
   2f9e2:	4605      	mov	r5, r0
                    if (r == 15) {
   2f9e4:	f3c0 1307 	ubfx	r3, r0, #4, #8
                if (numExtraBits)
   2f9e8:	f010 000f 	ands.w	r0, r0, #15
   2f9ec:	d0e4      	beq.n	2f9b8 <pjpeg_decode_mcu+0xf4>
static PJPG_INLINE uint16 getBits2(uint8 numBits) { return getBits(numBits, 1); }
   2f9ee:	f7fe fff1 	bl	2e9d4 <getBits.constprop.2>
                r = s >> 4;
   2f9f2:	f3c5 1307 	ubfx	r3, r5, #4, #8
                    if (r) {
   2f9f6:	f415 6f7f 	tst.w	r5, #4080	@ 0xff0
                        if ((k + r) > 63)
   2f9fa:	444b      	add	r3, r9
                    if (r) {
   2f9fc:	d0e6      	beq.n	2f9cc <pjpeg_decode_mcu+0x108>
                        if ((k + r) > 63)
   2f9fe:	2b3f      	cmp	r3, #63	@ 0x3f
   2fa00:	f300 8382 	bgt.w	30108 <pjpeg_decode_mcu+0x844>
                        k = (uint8)(k + r);
   2fa04:	fa5f f983 	uxtb.w	r9, r3
            for (k = 1; k < 64; k++) {
   2fa08:	f109 0901 	add.w	r9, r9, #1
   2fa0c:	fa5f f989 	uxtb.w	r9, r9
   2fa10:	f1b9 0f3f 	cmp.w	r9, #63	@ 0x3f
   2fa14:	d9e1      	bls.n	2f9da <pjpeg_decode_mcu+0x116>
    uint8 c = clamp(PJPG_DESCALE(gCoeffBuf[0]) + 128);
   2fa16:	f9bb 3000 	ldrsh.w	r3, [fp]
   2fa1a:	3340      	adds	r3, #64	@ 0x40
   2fa1c:	11db      	asrs	r3, r3, #7
   2fa1e:	3380      	adds	r3, #128	@ 0x80
   2fa20:	b29b      	uxth	r3, r3
    if ((uint16)s > 255U) {
   2fa22:	2bff      	cmp	r3, #255	@ 0xff
   2fa24:	f240 837a 	bls.w	3011c <pjpeg_decode_mcu+0x858>
        if (s < 0)
   2fa28:	43db      	mvns	r3, r3
   2fa2a:	f343 33c0 	sbfx	r3, r3, #15, #1
   2fa2e:	b2d9      	uxtb	r1, r3
    switch (gScanType) {
   2fa30:	4b39      	ldr	r3, [pc, #228]	@ (2fb18 <pjpeg_decode_mcu+0x254>)
   2fa32:	781b      	ldrb	r3, [r3, #0]
   2fa34:	2b04      	cmp	r3, #4
   2fa36:	f200 8359 	bhi.w	300ec <pjpeg_decode_mcu+0x828>
   2fa3a:	e8df f013 	tbh	[pc, r3, lsl #1]
   2fa3e:	03d7      	.short	0x03d7
   2fa40:	03be03c7 	.word	0x03be03c7
   2fa44:	03aa03b5 	.word	0x03aa03b5
        return PJPG_NO_MORE_BLOCKS;
   2fa48:	2601      	movs	r6, #1
        if (gNumMCUSRemainingY > 0)
            gNumMCUSRemainingX = gMaxMCUSPerRow;
    }

    return 0;
}
   2fa4a:	4630      	mov	r0, r6
   2fa4c:	b00f      	add	sp, #60	@ 0x3c
   2fa4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (gRestartsLeft == 0) {
   2fa52:	4d32      	ldr	r5, [pc, #200]	@ (2fb1c <pjpeg_decode_mcu+0x258>)
   2fa54:	882b      	ldrh	r3, [r5, #0]
   2fa56:	2b00      	cmp	r3, #0
   2fa58:	f000 83cb 	beq.w	301f2 <pjpeg_decode_mcu+0x92e>
    for (mcuBlock = 0; mcuBlock < gMaxBlocksPerMCU; mcuBlock++) {
   2fa5c:	f8df 90c4 	ldr.w	r9, [pc, #196]	@ 2fb24 <pjpeg_decode_mcu+0x260>
        gRestartsLeft--;
   2fa60:	3b01      	subs	r3, #1
   2fa62:	802b      	strh	r3, [r5, #0]
    for (mcuBlock = 0; mcuBlock < gMaxBlocksPerMCU; mcuBlock++) {
   2fa64:	f899 3000 	ldrb.w	r3, [r9]
   2fa68:	2b00      	cmp	r3, #0
   2fa6a:	f47f af48 	bne.w	2f8fe <pjpeg_decode_mcu+0x3a>
    if ((status) || (gCallbackStatus))
   2fa6e:	4b14      	ldr	r3, [pc, #80]	@ (2fac0 <pjpeg_decode_mcu+0x1fc>)
   2fa70:	781b      	ldrb	r3, [r3, #0]
   2fa72:	2b00      	cmp	r3, #0
   2fa74:	f040 83d8 	bne.w	30228 <pjpeg_decode_mcu+0x964>
    gNumMCUSRemainingX--;
   2fa78:	4a12      	ldr	r2, [pc, #72]	@ (2fac4 <pjpeg_decode_mcu+0x200>)
   2fa7a:	8813      	ldrh	r3, [r2, #0]
   2fa7c:	3b01      	subs	r3, #1
   2fa7e:	b29b      	uxth	r3, r3
   2fa80:	8013      	strh	r3, [r2, #0]
    if (!gNumMCUSRemainingX) {
   2fa82:	2b00      	cmp	r3, #0
   2fa84:	d1e1      	bne.n	2fa4a <pjpeg_decode_mcu+0x186>
        gNumMCUSRemainingY--;
   2fa86:	4910      	ldr	r1, [pc, #64]	@ (2fac8 <pjpeg_decode_mcu+0x204>)
   2fa88:	880b      	ldrh	r3, [r1, #0]
   2fa8a:	3b01      	subs	r3, #1
   2fa8c:	b29b      	uxth	r3, r3
   2fa8e:	800b      	strh	r3, [r1, #0]
        if (gNumMCUSRemainingY > 0)
   2fa90:	2b00      	cmp	r3, #0
   2fa92:	d0da      	beq.n	2fa4a <pjpeg_decode_mcu+0x186>
            gNumMCUSRemainingX = gMaxMCUSPerRow;
   2fa94:	4b22      	ldr	r3, [pc, #136]	@ (2fb20 <pjpeg_decode_mcu+0x25c>)
   2fa96:	881b      	ldrh	r3, [r3, #0]
   2fa98:	8013      	strh	r3, [r2, #0]
   2fa9a:	e7d6      	b.n	2fa4a <pjpeg_decode_mcu+0x186>
   2fa9c:	2a00      	cmp	r2, #0
   2fa9e:	4b1a      	ldr	r3, [pc, #104]	@ (2fb08 <pjpeg_decode_mcu+0x244>)
   2faa0:	4a1a      	ldr	r2, [pc, #104]	@ (2fb0c <pjpeg_decode_mcu+0x248>)
   2faa2:	bf14      	ite	ne
   2faa4:	461f      	movne	r7, r3
   2faa6:	4617      	moveq	r7, r2
   2faa8:	4b19      	ldr	r3, [pc, #100]	@ (2fb10 <pjpeg_decode_mcu+0x24c>)
   2faaa:	4a1a      	ldr	r2, [pc, #104]	@ (2fb14 <pjpeg_decode_mcu+0x250>)
   2faac:	bf14      	ite	ne
   2faae:	461d      	movne	r5, r3
   2fab0:	4615      	moveq	r5, r2
            for (k = 1; k < 64; k++) {
   2fab2:	462b      	mov	r3, r5
   2fab4:	f04f 0801 	mov.w	r8, #1
   2fab8:	4635      	mov	r5, r6
   2faba:	461e      	mov	r6, r3
   2fabc:	e0c7      	b.n	2fc4e <pjpeg_decode_mcu+0x38a>
   2fabe:	bf00      	nop
   2fac0:	1005090d 	.word	0x1005090d
   2fac4:	10050920 	.word	0x10050920
   2fac8:	1005091e 	.word	0x1005091e
   2facc:	1005093c 	.word	0x1005093c
   2fad0:	10050918 	.word	0x10050918
   2fad4:	10050dc0 	.word	0x10050dc0
   2fad8:	10050940 	.word	0x10050940
   2fadc:	10050930 	.word	0x10050930
   2fae0:	10050dc8 	.word	0x10050dc8
   2fae4:	10050e48 	.word	0x10050e48
   2fae8:	10050d70 	.word	0x10050d70
   2faec:	10050d10 	.word	0x10050d10
   2faf0:	10050d60 	.word	0x10050d60
   2faf4:	10050d00 	.word	0x10050d00
   2faf8:	0004bb58 	.word	0x0004bb58
   2fafc:	0004bb38 	.word	0x0004bb38
   2fb00:	1005092c 	.word	0x1005092c
   2fb04:	1005090c 	.word	0x1005090c
   2fb08:	10050a60 	.word	0x10050a60
   2fb0c:	10050bb0 	.word	0x10050bb0
   2fb10:	10050b60 	.word	0x10050b60
   2fb14:	10050cb0 	.word	0x10050cb0
   2fb18:	10050929 	.word	0x10050929
   2fb1c:	10050938 	.word	0x10050938
   2fb20:	10050924 	.word	0x10050924
   2fb24:	10050928 	.word	0x10050928
   2fb28:	0004bbb8 	.word	0x0004bbb8
   2fb2c:	100511c8 	.word	0x100511c8
                    if (r == 15) {
   2fb30:	f3c0 1407 	ubfx	r4, r0, #4, #8
   2fb34:	2c0f      	cmp	r4, #15
   2fb36:	f040 829f 	bne.w	30078 <pjpeg_decode_mcu+0x7b4>
                        if ((k + 16) > 64)
   2fb3a:	f1b8 0f30 	cmp.w	r8, #48	@ 0x30
   2fb3e:	f200 82e3 	bhi.w	30108 <pjpeg_decode_mcu+0x844>
                            gCoeffBuf[ZAG[k++]] = 0;
   2fb42:	f108 0301 	add.w	r3, r8, #1
   2fb46:	b2db      	uxtb	r3, r3
   2fb48:	f91a 3003 	ldrsb.w	r3, [sl, r3]
   2fb4c:	461a      	mov	r2, r3
   2fb4e:	f108 0302 	add.w	r3, r8, #2
   2fb52:	b2db      	uxtb	r3, r3
   2fb54:	f91a 1003 	ldrsb.w	r1, [sl, r3]
   2fb58:	9101      	str	r1, [sp, #4]
   2fb5a:	f108 0303 	add.w	r3, r8, #3
   2fb5e:	b2db      	uxtb	r3, r3
   2fb60:	f91a 0003 	ldrsb.w	r0, [sl, r3]
   2fb64:	9002      	str	r0, [sp, #8]
   2fb66:	f108 0304 	add.w	r3, r8, #4
   2fb6a:	b2db      	uxtb	r3, r3
   2fb6c:	f91a 4003 	ldrsb.w	r4, [sl, r3]
   2fb70:	9403      	str	r4, [sp, #12]
   2fb72:	f108 0305 	add.w	r3, r8, #5
   2fb76:	b2db      	uxtb	r3, r3
   2fb78:	f91a 3003 	ldrsb.w	r3, [sl, r3]
   2fb7c:	9304      	str	r3, [sp, #16]
   2fb7e:	f108 0306 	add.w	r3, r8, #6
   2fb82:	b2db      	uxtb	r3, r3
   2fb84:	f91a e003 	ldrsb.w	lr, [sl, r3]
   2fb88:	f108 0307 	add.w	r3, r8, #7
   2fb8c:	b2db      	uxtb	r3, r3
   2fb8e:	f91a c003 	ldrsb.w	ip, [sl, r3]
   2fb92:	f108 0308 	add.w	r3, r8, #8
   2fb96:	b2db      	uxtb	r3, r3
   2fb98:	f91a 1003 	ldrsb.w	r1, [sl, r3]
   2fb9c:	9105      	str	r1, [sp, #20]
   2fb9e:	f108 0309 	add.w	r3, r8, #9
   2fba2:	b2db      	uxtb	r3, r3
   2fba4:	f91a 0003 	ldrsb.w	r0, [sl, r3]
   2fba8:	9006      	str	r0, [sp, #24]
   2fbaa:	f108 030a 	add.w	r3, r8, #10
   2fbae:	b2db      	uxtb	r3, r3
   2fbb0:	f91a 4003 	ldrsb.w	r4, [sl, r3]
   2fbb4:	9407      	str	r4, [sp, #28]
   2fbb6:	f108 030b 	add.w	r3, r8, #11
   2fbba:	b2db      	uxtb	r3, r3
   2fbbc:	f91a 4003 	ldrsb.w	r4, [sl, r3]
   2fbc0:	f108 030c 	add.w	r3, r8, #12
   2fbc4:	b2db      	uxtb	r3, r3
   2fbc6:	f91a 0003 	ldrsb.w	r0, [sl, r3]
   2fbca:	f108 030e 	add.w	r3, r8, #14
   2fbce:	b2db      	uxtb	r3, r3
   2fbd0:	f91a 3003 	ldrsb.w	r3, [sl, r3]
   2fbd4:	9308      	str	r3, [sp, #32]
   2fbd6:	f108 030d 	add.w	r3, r8, #13
   2fbda:	b2db      	uxtb	r3, r3
   2fbdc:	f91a 1003 	ldrsb.w	r1, [sl, r3]
   2fbe0:	f108 030f 	add.w	r3, r8, #15
   2fbe4:	f91a 8008 	ldrsb.w	r8, [sl, r8]
   2fbe8:	f82b 9018 	strh.w	r9, [fp, r8, lsl #1]
   2fbec:	f82b 9012 	strh.w	r9, [fp, r2, lsl #1]
   2fbf0:	9a01      	ldr	r2, [sp, #4]
   2fbf2:	f82b 9012 	strh.w	r9, [fp, r2, lsl #1]
   2fbf6:	9a02      	ldr	r2, [sp, #8]
   2fbf8:	f82b 9012 	strh.w	r9, [fp, r2, lsl #1]
   2fbfc:	9a03      	ldr	r2, [sp, #12]
   2fbfe:	f82b 9012 	strh.w	r9, [fp, r2, lsl #1]
   2fc02:	9a04      	ldr	r2, [sp, #16]
   2fc04:	f82b 9012 	strh.w	r9, [fp, r2, lsl #1]
   2fc08:	9a05      	ldr	r2, [sp, #20]
   2fc0a:	f82b 901e 	strh.w	r9, [fp, lr, lsl #1]
   2fc0e:	f82b 901c 	strh.w	r9, [fp, ip, lsl #1]
   2fc12:	f82b 9012 	strh.w	r9, [fp, r2, lsl #1]
   2fc16:	9a06      	ldr	r2, [sp, #24]
   2fc18:	fa5f f883 	uxtb.w	r8, r3
   2fc1c:	f82b 9012 	strh.w	r9, [fp, r2, lsl #1]
   2fc20:	9a07      	ldr	r2, [sp, #28]
   2fc22:	f91a 3008 	ldrsb.w	r3, [sl, r8]
   2fc26:	f82b 9012 	strh.w	r9, [fp, r2, lsl #1]
            for (k = 1; k < 64; k++) {
   2fc2a:	f108 0801 	add.w	r8, r8, #1
                            gCoeffBuf[ZAG[k++]] = 0;
   2fc2e:	9a08      	ldr	r2, [sp, #32]
   2fc30:	f82b 9014 	strh.w	r9, [fp, r4, lsl #1]
            for (k = 1; k < 64; k++) {
   2fc34:	fa5f f888 	uxtb.w	r8, r8
   2fc38:	f1b8 0f3f 	cmp.w	r8, #63	@ 0x3f
                            gCoeffBuf[ZAG[k++]] = 0;
   2fc3c:	f82b 9010 	strh.w	r9, [fp, r0, lsl #1]
   2fc40:	f82b 9011 	strh.w	r9, [fp, r1, lsl #1]
   2fc44:	f82b 9012 	strh.w	r9, [fp, r2, lsl #1]
   2fc48:	f82b 9013 	strh.w	r9, [fp, r3, lsl #1]
            for (k = 1; k < 64; k++) {
   2fc4c:	d82e      	bhi.n	2fcac <pjpeg_decode_mcu+0x3e8>
                s = huffDecode(
   2fc4e:	4639      	mov	r1, r7
   2fc50:	4630      	mov	r0, r6
   2fc52:	f7fe fdc7 	bl	2e7e4 <huffDecode>
                if (numExtraBits)
   2fc56:	f010 090f 	ands.w	r9, r0, #15
                s = huffDecode(
   2fc5a:	4604      	mov	r4, r0
                if (numExtraBits)
   2fc5c:	f43f af68 	beq.w	2fb30 <pjpeg_decode_mcu+0x26c>
static PJPG_INLINE uint16 getBits2(uint8 numBits) { return getBits(numBits, 1); }
   2fc60:	4648      	mov	r0, r9
   2fc62:	f7fe feb7 	bl	2e9d4 <getBits.constprop.2>
                    if (r) {
   2fc66:	f414 6f7f 	tst.w	r4, #4080	@ 0xff0
                r = s >> 4;
   2fc6a:	f3c4 1307 	ubfx	r3, r4, #4, #8
                    if (r) {
   2fc6e:	f040 81f0 	bne.w	30052 <pjpeg_decode_mcu+0x78e>
    switch (i) {
   2fc72:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
    return ((x < getExtendTest(s)) ? ((int16)x + getExtendOffset(s)) : (int16)x);
   2fc76:	4b65      	ldr	r3, [pc, #404]	@ (2fe0c <pjpeg_decode_mcu+0x548>)
   2fc78:	fa5f f989 	uxtb.w	r9, r9
   2fc7c:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
   2fc80:	4283      	cmp	r3, r0
   2fc82:	d904      	bls.n	2fc8e <pjpeg_decode_mcu+0x3ca>
   2fc84:	4b62      	ldr	r3, [pc, #392]	@ (2fe10 <pjpeg_decode_mcu+0x54c>)
   2fc86:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
   2fc8a:	4403      	add	r3, r0
   2fc8c:	b298      	uxth	r0, r3
                    gCoeffBuf[ZAG[k]] = ac * pQ[k];
   2fc8e:	f835 3018 	ldrh.w	r3, [r5, r8, lsl #1]
   2fc92:	f91a 2008 	ldrsb.w	r2, [sl, r8]
            for (k = 1; k < 64; k++) {
   2fc96:	f108 0801 	add.w	r8, r8, #1
   2fc9a:	fa5f f888 	uxtb.w	r8, r8
                    gCoeffBuf[ZAG[k]] = ac * pQ[k];
   2fc9e:	fb13 f300 	smulbb	r3, r3, r0
            for (k = 1; k < 64; k++) {
   2fca2:	f1b8 0f3f 	cmp.w	r8, #63	@ 0x3f
                    gCoeffBuf[ZAG[k]] = ac * pQ[k];
   2fca6:	f82b 3012 	strh.w	r3, [fp, r2, lsl #1]
            for (k = 1; k < 64; k++) {
   2fcaa:	d9d0      	bls.n	2fc4e <pjpeg_decode_mcu+0x38a>
    for (i = 0; i < 8; i++) {
   2fcac:	4b59      	ldr	r3, [pc, #356]	@ (2fe14 <pjpeg_decode_mcu+0x550>)
        if ((pSrc[1] | pSrc[2] | pSrc[3] | pSrc[4] | pSrc[5] | pSrc[6] | pSrc[7]) == 0) {
   2fcae:	f933 4c04 	ldrsh.w	r4, [r3, #-4]
   2fcb2:	f933 0c02 	ldrsh.w	r0, [r3, #-2]
   2fcb6:	f9b3 6000 	ldrsh.w	r6, [r3]
   2fcba:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
   2fcbe:	f9b3 c004 	ldrsh.w	ip, [r3, #4]
   2fcc2:	f9b3 e006 	ldrsh.w	lr, [r3, #6]
   2fcc6:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
            int16 src0 = *pSrc;
   2fcca:	f933 1c06 	ldrsh.w	r1, [r3, #-6]
        if ((pSrc[1] | pSrc[2] | pSrc[3] | pSrc[4] | pSrc[5] | pSrc[6] | pSrc[7]) == 0) {
   2fcce:	ea44 0200 	orr.w	r2, r4, r0
   2fcd2:	4332      	orrs	r2, r6
   2fcd4:	432a      	orrs	r2, r5
   2fcd6:	ea4c 0202 	orr.w	r2, ip, r2
   2fcda:	ea4e 0202 	orr.w	r2, lr, r2
   2fcde:	433a      	orrs	r2, r7
   2fce0:	f000 81d9 	beq.w	30096 <pjpeg_decode_mcu+0x7d2>
            int16 x4 = src4 - src7;
   2fce4:	b2b6      	uxth	r6, r6
   2fce6:	fa1f fc8c 	uxth.w	ip, ip
   2fcea:	ebac 0906 	sub.w	r9, ip, r6
            int16 x5 = src5 + src6;
   2fcee:	b2a4      	uxth	r4, r4
   2fcf0:	b2bf      	uxth	r7, r7
            int16 x4 = src4 - src7;
   2fcf2:	fa1f f989 	uxth.w	r9, r9
            int16 x7 = src4 + src7;
   2fcf6:	44b4      	add	ip, r6
            int16 x5 = src5 + src6;
   2fcf8:	19e2      	adds	r2, r4, r7
            int16 x6 = src5 - src6;
   2fcfa:	1be6      	subs	r6, r4, r7
            int16 tmp1 = imul_b5(x4 - x6);
   2fcfc:	eba9 0404 	sub.w	r4, r9, r4
   2fd00:	4427      	add	r7, r4
    x += 128L;
   2fd02:	f240 1415 	movw	r4, #277	@ 0x115
            int16 x7 = src4 + src7;
   2fd06:	fa1f f88c 	uxth.w	r8, ip
    x += 128L;
   2fd0a:	46a4      	mov	ip, r4
   2fd0c:	2480      	movs	r4, #128	@ 0x80
   2fd0e:	fb16 460c 	smlabb	r6, r6, ip, r4
    x += 128L;
   2fd12:	f04f 0cc4 	mov.w	ip, #196	@ 0xc4
   2fd16:	fb17 470c 	smlabb	r7, r7, ip, r4
            int16 x5 = src5 + src6;
   2fd1a:	b292      	uxth	r2, r2
    x += 128L;
   2fd1c:	f240 2c9d 	movw	ip, #669	@ 0x29d
            int16 x30 = src0 + src1;
   2fd20:	b2ad      	uxth	r5, r5
    x += 128L;
   2fd22:	fb19 440c 	smlabb	r4, r9, ip, r4
            int16 x30 = src0 + src1;
   2fd26:	b289      	uxth	r1, r1
            int16 x17 = x5 + x7;
   2fd28:	eb08 0c02 	add.w	ip, r8, r2
    x += 128L;
   2fd2c:	f44f 79b5 	mov.w	r9, #362	@ 0x16a
            int16 x15 = x5 - x7;
   2fd30:	eba2 0208 	sub.w	r2, r2, r8
    x += 128L;
   2fd34:	f04f 0880 	mov.w	r8, #128	@ 0x80
            int16 x12 = src2 - src3;
   2fd38:	fa1f fe8e 	uxth.w	lr, lr
    x += 128L;
   2fd3c:	fb12 8209 	smlabb	r2, r2, r9, r8
            int16 x12 = src2 - src3;
   2fd40:	b280      	uxth	r0, r0
            int16 x31 = src0 - src1;
   2fd42:	eba1 0905 	sub.w	r9, r1, r5
            int16 x17 = x5 + x7;
   2fd46:	fa1f fc8c 	uxth.w	ip, ip
            int16 stg26 = imul_b4(x6) - tmp1;
   2fd4a:	f3c6 260f 	ubfx	r6, r6, #8, #16
            int16 x30 = src0 + src1;
   2fd4e:	4429      	add	r1, r5
            int16 x31 = src0 - src1;
   2fd50:	fa1f f589 	uxth.w	r5, r9
            int16 x13 = src2 + src3;
   2fd54:	eb00 090e 	add.w	r9, r0, lr
   2fd58:	ebac 0806 	sub.w	r8, ip, r6
            int16 x12 = src2 - src3;
   2fd5c:	eba0 000e 	sub.w	r0, r0, lr
            *(pSrc + 1) = x41 + tmp2;
   2fd60:	eba6 060c 	sub.w	r6, r6, ip
            int16 x13 = src2 + src3;
   2fd64:	fa1f fe89 	uxth.w	lr, r9
    x += 128L;
   2fd68:	f44f 79b5 	mov.w	r9, #362	@ 0x16a
            *(pSrc + 1) = x41 + tmp2;
   2fd6c:	9601      	str	r6, [sp, #4]
    x += 128L;
   2fd6e:	464e      	mov	r6, r9
   2fd70:	f04f 0980 	mov.w	r9, #128	@ 0x80
   2fd74:	fb10 9006 	smlabb	r0, r0, r6, r9
            int16 stg26 = imul_b4(x6) - tmp1;
   2fd78:	f3c7 270f 	ubfx	r7, r7, #8, #16
            int16 x42 = x31 - x32;
   2fd7c:	eb05 090e 	add.w	r9, r5, lr
            int16 x32 = imul_b1_b3(x12) - x13;
   2fd80:	f3c0 200f 	ubfx	r0, r0, #8, #16
            int16 x41 = x31 + x32;
   2fd84:	eba5 050e 	sub.w	r5, r5, lr
   2fd88:	44b8      	add	r8, r7
            int16 x42 = x31 - x32;
   2fd8a:	eba9 0900 	sub.w	r9, r9, r0
            *(pSrc + 1) = x41 + tmp2;
   2fd8e:	9e01      	ldr	r6, [sp, #4]
            int16 x41 = x31 + x32;
   2fd90:	4428      	add	r0, r5
   2fd92:	fa1f f888 	uxth.w	r8, r8
   2fd96:	b280      	uxth	r0, r0
            *(pSrc + 1) = x41 + tmp2;
   2fd98:	4406      	add	r6, r0
            int16 tmp3 = imul_b1_b3(x15) - tmp2;
   2fd9a:	eb08 2222 	add.w	r2, r8, r2, asr #8
   2fd9e:	b292      	uxth	r2, r2
            *(pSrc + 1) = x41 + tmp2;
   2fda0:	1bf6      	subs	r6, r6, r7
            int16 x24 = tmp1 - imul_b2(x4);
   2fda2:	eba7 2424 	sub.w	r4, r7, r4, asr #8
            int16 x30 = src0 + src1;
   2fda6:	b289      	uxth	r1, r1
            *(pSrc + 1) = src0;
   2fda8:	f823 6c04 	strh.w	r6, [r3, #-4]
            int16 x44 = tmp3 + x24;
   2fdac:	4414      	add	r4, r2
            int16 x43 = x30 - x13;
   2fdae:	eba1 060e 	sub.w	r6, r1, lr
   2fdb2:	b2b6      	uxth	r6, r6
            int16 x44 = tmp3 + x24;
   2fdb4:	b2a4      	uxth	r4, r4
            int16 x40 = x30 + x13;
   2fdb6:	4471      	add	r1, lr
            *(pSrc + 3) = x43 - x44;
   2fdb8:	2700      	movs	r7, #0
   2fdba:	eba6 0e04 	sub.w	lr, r6, r4
            int16 x42 = x31 - x32;
   2fdbe:	fa1f f589 	uxth.w	r5, r9
            *(pSrc + 4) = x43 + x44;
   2fdc2:	4434      	add	r4, r6
            *(pSrc + 3) = x43 - x44;
   2fdc4:	f36e 070f 	bfi	r7, lr, #0, #16
            int16 x40 = x30 + x13;
   2fdc8:	b289      	uxth	r1, r1
            *(pSrc + 3) = x43 - x44;
   2fdca:	f364 471f 	bfi	r7, r4, #16, #16
            *(pSrc + 5) = x42 - tmp3;
   2fdce:	1aae      	subs	r6, r5, r2
   2fdd0:	2400      	movs	r4, #0
            *(pSrc + 2) = x42 + tmp3;
   2fdd2:	442a      	add	r2, r5
            *(pSrc + 2) = src0;
   2fdd4:	f823 2c02 	strh.w	r2, [r3, #-2]
            *(pSrc + 6) = x41 - tmp2;
   2fdd8:	4440      	add	r0, r8
            *(pSrc + 0) = x40 + x17;
   2fdda:	eb0c 0201 	add.w	r2, ip, r1
            *(pSrc + 5) = x42 - tmp3;
   2fdde:	f366 040f 	bfi	r4, r6, #0, #16
            *(pSrc + 0) = x40 + x17;
   2fde2:	f823 2c06 	strh.w	r2, [r3, #-6]
            *(pSrc + 5) = x42 - tmp3;
   2fde6:	f360 441f 	bfi	r4, r0, #16, #16
    for (i = 0; i < 8; i++) {
   2fdea:	4a0b      	ldr	r2, [pc, #44]	@ (2fe18 <pjpeg_decode_mcu+0x554>)
            *(pSrc + 3) = src0;
   2fdec:	601f      	str	r7, [r3, #0]
            *(pSrc + 7) = x40 - x17;
   2fdee:	eba1 010c 	sub.w	r1, r1, ip
            *(pSrc + 5) = src0;
   2fdf2:	605c      	str	r4, [r3, #4]
            *(pSrc + 7) = src0;
   2fdf4:	8119      	strh	r1, [r3, #8]
    for (i = 0; i < 8; i++) {
   2fdf6:	3310      	adds	r3, #16
   2fdf8:	429a      	cmp	r2, r3
   2fdfa:	f47f af58 	bne.w	2fcae <pjpeg_decode_mcu+0x3ea>
   2fdfe:	f10b 030e 	add.w	r3, fp, #14
   2fe02:	f8df 9018 	ldr.w	r9, [pc, #24]	@ 2fe1c <pjpeg_decode_mcu+0x558>
   2fe06:	9302      	str	r3, [sp, #8]
   2fe08:	e030      	b.n	2fe6c <pjpeg_decode_mcu+0x5a8>
   2fe0a:	bf00      	nop
   2fe0c:	0004bb58 	.word	0x0004bb58
   2fe10:	0004bb38 	.word	0x0004bb38
   2fe14:	100511ce 	.word	0x100511ce
   2fe18:	1005124e 	.word	0x1005124e
   2fe1c:	100511c6 	.word	0x100511c6
            uint8 c = clamp(PJPG_DESCALE(*pSrc) + 128);
   2fe20:	3340      	adds	r3, #64	@ 0x40
   2fe22:	11db      	asrs	r3, r3, #7
   2fe24:	3380      	adds	r3, #128	@ 0x80
   2fe26:	b29b      	uxth	r3, r3
    if ((uint16)s > 255U) {
   2fe28:	2bff      	cmp	r3, #255	@ 0xff
        if (s < 0)
   2fe2a:	bf84      	itt	hi
   2fe2c:	43db      	mvnhi	r3, r3
   2fe2e:	f343 33c0 	sbfxhi	r3, r3, #15, #1
    return (uint8)s;
   2fe32:	b2db      	uxtb	r3, r3
            *(pSrc + 0 * 8) = c;
   2fe34:	b21b      	sxth	r3, r3
   2fe36:	461f      	mov	r7, r3
   2fe38:	461e      	mov	r6, r3
   2fe3a:	461d      	mov	r5, r3
   2fe3c:	461c      	mov	r4, r3
   2fe3e:	461a      	mov	r2, r3
   2fe40:	4619      	mov	r1, r3
   2fe42:	4618      	mov	r0, r3
            *(pSrc + 7 * 8) = c;
   2fe44:	f8a9 3070 	strh.w	r3, [r9, #112]	@ 0x70
    for (i = 0; i < 8; i++) {
   2fe48:	9b02      	ldr	r3, [sp, #8]
            *(pSrc + 0 * 8) = c;
   2fe4a:	f8a9 7000 	strh.w	r7, [r9]
    for (i = 0; i < 8; i++) {
   2fe4e:	4599      	cmp	r9, r3
            *(pSrc + 1 * 8) = c;
   2fe50:	f8a9 6010 	strh.w	r6, [r9, #16]
            *(pSrc + 2 * 8) = c;
   2fe54:	f8a9 5020 	strh.w	r5, [r9, #32]
            *(pSrc + 3 * 8) = c;
   2fe58:	f8a9 4030 	strh.w	r4, [r9, #48]	@ 0x30
            *(pSrc + 4 * 8) = c;
   2fe5c:	f8a9 2040 	strh.w	r2, [r9, #64]	@ 0x40
            *(pSrc + 5 * 8) = c;
   2fe60:	f8a9 1050 	strh.w	r1, [r9, #80]	@ 0x50
            *(pSrc + 6 * 8) = c;
   2fe64:	f8a9 0060 	strh.w	r0, [r9, #96]	@ 0x60
    for (i = 0; i < 8; i++) {
   2fe68:	f000 8126 	beq.w	300b8 <pjpeg_decode_mcu+0x7f4>
        if ((pSrc[1 * 8] | pSrc[2 * 8] | pSrc[3 * 8] | pSrc[4 * 8] | pSrc[5 * 8] | pSrc[6 * 8] |
   2fe6c:	f9b9 7012 	ldrsh.w	r7, [r9, #18]
   2fe70:	f9b9 4022 	ldrsh.w	r4, [r9, #34]	@ 0x22
   2fe74:	f9b9 5032 	ldrsh.w	r5, [r9, #50]	@ 0x32
   2fe78:	f9b9 1042 	ldrsh.w	r1, [r9, #66]	@ 0x42
   2fe7c:	f9b9 6052 	ldrsh.w	r6, [r9, #82]	@ 0x52
   2fe80:	f9b9 e062 	ldrsh.w	lr, [r9, #98]	@ 0x62
             pSrc[7 * 8]) == 0) {
   2fe84:	f9b9 0072 	ldrsh.w	r0, [r9, #114]	@ 0x72
            uint8 c = clamp(PJPG_DESCALE(*pSrc) + 128);
   2fe88:	f939 3f02 	ldrsh.w	r3, [r9, #2]!
             pSrc[7 * 8]) == 0) {
   2fe8c:	ea44 0207 	orr.w	r2, r4, r7
   2fe90:	432a      	orrs	r2, r5
   2fe92:	430a      	orrs	r2, r1
   2fe94:	4332      	orrs	r2, r6
   2fe96:	ea4e 0202 	orr.w	r2, lr, r2
        if ((pSrc[1 * 8] | pSrc[2 * 8] | pSrc[3 * 8] | pSrc[4 * 8] | pSrc[5 * 8] | pSrc[6 * 8] |
   2fe9a:	4302      	orrs	r2, r0
   2fe9c:	d0c0      	beq.n	2fe20 <pjpeg_decode_mcu+0x55c>
            int16 x4 = src4 - src7;
   2fe9e:	b2b2      	uxth	r2, r6
   2fea0:	b2ad      	uxth	r5, r5
            int16 x7 = src4 + src7;
   2fea2:	eb05 0c02 	add.w	ip, r5, r2
            int16 x4 = src4 - src7;
   2fea6:	1b52      	subs	r2, r2, r5
            int16 x5 = src5 + src6;
   2fea8:	b280      	uxth	r0, r0
   2feaa:	b2bf      	uxth	r7, r7
            int16 x30 = src0 + src1;
   2feac:	b289      	uxth	r1, r1
            int16 x4 = src4 - src7;
   2feae:	b296      	uxth	r6, r2
            int16 x30 = src0 + src1;
   2feb0:	b29b      	uxth	r3, r3
            int16 x4 = src4 - src7;
   2feb2:	9601      	str	r6, [sp, #4]
            int16 x30 = src0 + src1;
   2feb4:	eb01 0803 	add.w	r8, r1, r3
            int16 x5 = src5 + src6;
   2feb8:	19c6      	adds	r6, r0, r7
            int16 x31 = src0 - src1;
   2feba:	1a5b      	subs	r3, r3, r1
   2febc:	b29d      	uxth	r5, r3
            int16 x12 = src2 - src3;
   2febe:	fa1f fe8e 	uxth.w	lr, lr
            int16 x7 = src4 + src7;
   2fec2:	fa1f fc8c 	uxth.w	ip, ip
            int16 x12 = src2 - src3;
   2fec6:	b2a4      	uxth	r4, r4
            int16 x5 = src5 + src6;
   2fec8:	b2b6      	uxth	r6, r6
    x += 128L;
   2feca:	f44f 73b5 	mov.w	r3, #362	@ 0x16a
   2fece:	461a      	mov	r2, r3
            int16 x13 = src2 + src3;
   2fed0:	eb0e 0104 	add.w	r1, lr, r4
    x += 128L;
   2fed4:	2380      	movs	r3, #128	@ 0x80
            int16 x12 = src2 - src3;
   2fed6:	eba4 040e 	sub.w	r4, r4, lr
            int16 x17 = x5 + x7;
   2feda:	eb06 0e0c 	add.w	lr, r6, ip
            int16 x15 = x5 - x7;
   2fede:	eba6 060c 	sub.w	r6, r6, ip
    x += 128L;
   2fee2:	fb16 3602 	smlabb	r6, r6, r2, r3
   2fee6:	fb14 3402 	smlabb	r4, r4, r2, r3
            int16 x6 = src5 - src6;
   2feea:	eba7 0c00 	sub.w	ip, r7, r0
    x += 128L;
   2feee:	f240 1215 	movw	r2, #277	@ 0x115
   2fef2:	fb1c 3c02 	smlabb	ip, ip, r2, r3
            int16 tmp1 = imul_b5(x4 - x6);
   2fef6:	9b01      	ldr	r3, [sp, #4]
   2fef8:	1bdf      	subs	r7, r3, r7
   2fefa:	19c3      	adds	r3, r0, r7
    x += 128L;
   2fefc:	22c4      	movs	r2, #196	@ 0xc4
   2fefe:	2080      	movs	r0, #128	@ 0x80
            int16 stg26 = imul_b4(x6) - tmp1;
   2ff00:	f3cc 270f 	ubfx	r7, ip, #8, #16
            int16 x17 = x5 + x7;
   2ff04:	fa1f fe8e 	uxth.w	lr, lr
    x += 128L;
   2ff08:	fb13 0302 	smlabb	r3, r3, r2, r0
            int16 tmp3 = imul_b1_b3(x15) - tmp2;
   2ff0c:	ebc7 2c26 	rsb	ip, r7, r6, asr #8
    x += 128L;
   2ff10:	9e01      	ldr	r6, [sp, #4]
            int16 stg26 = imul_b4(x6) - tmp1;
   2ff12:	f3c3 230f 	ubfx	r3, r3, #8, #16
            int16 tmp2 = stg26 - x17;
   2ff16:	eba7 070e 	sub.w	r7, r7, lr
    x += 128L;
   2ff1a:	f240 229d 	movw	r2, #669	@ 0x29d
   2ff1e:	fb16 0202 	smlabb	r2, r6, r2, r0
            int16 tmp3 = imul_b1_b3(x15) - tmp2;
   2ff22:	44f4      	add	ip, lr
            int16 tmp2 = stg26 - x17;
   2ff24:	1aff      	subs	r7, r7, r3
            int16 x13 = src2 + src3;
   2ff26:	b289      	uxth	r1, r1
            int16 tmp3 = imul_b1_b3(x15) - tmp2;
   2ff28:	449c      	add	ip, r3
            int16 x30 = src0 + src1;
   2ff2a:	fa1f f888 	uxth.w	r8, r8
            int16 x24 = tmp1 - imul_b2(x4);
   2ff2e:	eba3 2222 	sub.w	r2, r3, r2, asr #8
            int16 tmp2 = stg26 - x17;
   2ff32:	b23b      	sxth	r3, r7
   2ff34:	9301      	str	r3, [sp, #4]
            int16 x40 = x30 + x13;
   2ff36:	eb01 0308 	add.w	r3, r1, r8
            *(pSrc + 0 * 8) = clamp(PJPG_DESCALE(x40 + x17) + 128);
   2ff3a:	fa0f fe8e 	sxth.w	lr, lr
   2ff3e:	b21b      	sxth	r3, r3
   2ff40:	eb0e 0703 	add.w	r7, lr, r3
   2ff44:	3740      	adds	r7, #64	@ 0x40
   2ff46:	11ff      	asrs	r7, r7, #7
            int16 x32 = imul_b1_b3(x12) - x13;
   2ff48:	f3c4 240f 	ubfx	r4, r4, #8, #16
            int16 x43 = x30 - x13;
   2ff4c:	eba8 0801 	sub.w	r8, r8, r1
            *(pSrc + 0 * 8) = clamp(PJPG_DESCALE(x40 + x17) + 128);
   2ff50:	4407      	add	r7, r0
            int16 x41 = x31 + x32;
   2ff52:	1a68      	subs	r0, r5, r1
            int16 x42 = x31 - x32;
   2ff54:	4429      	add	r1, r5
            int16 x41 = x31 + x32;
   2ff56:	4420      	add	r0, r4
            int16 x42 = x31 - x32;
   2ff58:	1b09      	subs	r1, r1, r4
            *(pSrc + 1 * 8) = clamp(PJPG_DESCALE(x41 + tmp2) + 128);
   2ff5a:	9c01      	ldr	r4, [sp, #4]
            int16 x41 = x31 + x32;
   2ff5c:	b200      	sxth	r0, r0
            *(pSrc + 1 * 8) = clamp(PJPG_DESCALE(x41 + tmp2) + 128);
   2ff5e:	1826      	adds	r6, r4, r0
            int16 x44 = tmp3 + x24;
   2ff60:	fa12 f28c 	uxtah	r2, r2, ip
            int16 x42 = x31 - x32;
   2ff64:	b209      	sxth	r1, r1
            int16 tmp3 = imul_b1_b3(x15) - tmp2;
   2ff66:	fa0f fc8c 	sxth.w	ip, ip
            *(pSrc + 1 * 8) = clamp(PJPG_DESCALE(x41 + tmp2) + 128);
   2ff6a:	3640      	adds	r6, #64	@ 0x40
            *(pSrc + 0 * 8) = clamp(PJPG_DESCALE(x40 + x17) + 128);
   2ff6c:	b2bf      	uxth	r7, r7
            *(pSrc + 2 * 8) = clamp(PJPG_DESCALE(x42 + tmp3) + 128);
   2ff6e:	eb0c 0501 	add.w	r5, ip, r1
            *(pSrc + 1 * 8) = clamp(PJPG_DESCALE(x41 + tmp2) + 128);
   2ff72:	11f6      	asrs	r6, r6, #7
    if ((uint16)s > 255U) {
   2ff74:	2fff      	cmp	r7, #255	@ 0xff
            int16 x44 = tmp3 + x24;
   2ff76:	b212      	sxth	r2, r2
            int16 x43 = x30 - x13;
   2ff78:	fa0f f888 	sxth.w	r8, r8
            *(pSrc + 1 * 8) = clamp(PJPG_DESCALE(x41 + tmp2) + 128);
   2ff7c:	f106 0680 	add.w	r6, r6, #128	@ 0x80
            *(pSrc + 2 * 8) = clamp(PJPG_DESCALE(x42 + tmp3) + 128);
   2ff80:	f105 0540 	add.w	r5, r5, #64	@ 0x40
            *(pSrc + 1 * 8) = clamp(PJPG_DESCALE(x41 + tmp2) + 128);
   2ff84:	b2b6      	uxth	r6, r6
        if (s < 0)
   2ff86:	bf88      	it	hi
   2ff88:	43ff      	mvnhi	r7, r7
            *(pSrc + 3 * 8) = clamp(PJPG_DESCALE(x43 - x44) + 128);
   2ff8a:	eba8 0402 	sub.w	r4, r8, r2
            *(pSrc + 2 * 8) = clamp(PJPG_DESCALE(x42 + tmp3) + 128);
   2ff8e:	ea4f 15e5 	mov.w	r5, r5, asr #7
        if (s < 0)
   2ff92:	bf88      	it	hi
   2ff94:	f347 37c0 	sbfxhi	r7, r7, #15, #1
            *(pSrc + 2 * 8) = clamp(PJPG_DESCALE(x42 + tmp3) + 128);
   2ff98:	3580      	adds	r5, #128	@ 0x80
    if ((uint16)s > 255U) {
   2ff9a:	2eff      	cmp	r6, #255	@ 0xff
            *(pSrc + 3 * 8) = clamp(PJPG_DESCALE(x43 - x44) + 128);
   2ff9c:	f104 0440 	add.w	r4, r4, #64	@ 0x40
            *(pSrc + 2 * 8) = clamp(PJPG_DESCALE(x42 + tmp3) + 128);
   2ffa0:	b2ad      	uxth	r5, r5
        if (s < 0)
   2ffa2:	bf88      	it	hi
   2ffa4:	43f6      	mvnhi	r6, r6
            *(pSrc + 3 * 8) = clamp(PJPG_DESCALE(x43 - x44) + 128);
   2ffa6:	ea4f 14e4 	mov.w	r4, r4, asr #7
            *(pSrc + 4 * 8) = clamp(PJPG_DESCALE(x43 + x44) + 128);
   2ffaa:	4442      	add	r2, r8
        if (s < 0)
   2ffac:	bf88      	it	hi
   2ffae:	f346 36c0 	sbfxhi	r6, r6, #15, #1
            *(pSrc + 3 * 8) = clamp(PJPG_DESCALE(x43 - x44) + 128);
   2ffb2:	3480      	adds	r4, #128	@ 0x80
    if ((uint16)s > 255U) {
   2ffb4:	2dff      	cmp	r5, #255	@ 0xff
            *(pSrc + 4 * 8) = clamp(PJPG_DESCALE(x43 + x44) + 128);
   2ffb6:	f102 0240 	add.w	r2, r2, #64	@ 0x40
            *(pSrc + 3 * 8) = clamp(PJPG_DESCALE(x43 - x44) + 128);
   2ffba:	b2a4      	uxth	r4, r4
        if (s < 0)
   2ffbc:	bf88      	it	hi
   2ffbe:	43ed      	mvnhi	r5, r5
            *(pSrc + 5 * 8) = clamp(PJPG_DESCALE(x42 - tmp3) + 128);
   2ffc0:	eba1 010c 	sub.w	r1, r1, ip
            *(pSrc + 4 * 8) = clamp(PJPG_DESCALE(x43 + x44) + 128);
   2ffc4:	ea4f 12e2 	mov.w	r2, r2, asr #7
        if (s < 0)
   2ffc8:	bf88      	it	hi
   2ffca:	f345 35c0 	sbfxhi	r5, r5, #15, #1
            *(pSrc + 4 * 8) = clamp(PJPG_DESCALE(x43 + x44) + 128);
   2ffce:	3280      	adds	r2, #128	@ 0x80
    if ((uint16)s > 255U) {
   2ffd0:	2cff      	cmp	r4, #255	@ 0xff
            *(pSrc + 5 * 8) = clamp(PJPG_DESCALE(x42 - tmp3) + 128);
   2ffd2:	f101 0140 	add.w	r1, r1, #64	@ 0x40
            *(pSrc + 4 * 8) = clamp(PJPG_DESCALE(x43 + x44) + 128);
   2ffd6:	b292      	uxth	r2, r2
        if (s < 0)
   2ffd8:	bf88      	it	hi
   2ffda:	43e4      	mvnhi	r4, r4
            *(pSrc + 5 * 8) = clamp(PJPG_DESCALE(x42 - tmp3) + 128);
   2ffdc:	ea4f 11e1 	mov.w	r1, r1, asr #7
        if (s < 0)
   2ffe0:	bf88      	it	hi
   2ffe2:	f344 34c0 	sbfxhi	r4, r4, #15, #1
            *(pSrc + 5 * 8) = clamp(PJPG_DESCALE(x42 - tmp3) + 128);
   2ffe6:	3180      	adds	r1, #128	@ 0x80
    if ((uint16)s > 255U) {
   2ffe8:	2aff      	cmp	r2, #255	@ 0xff
            *(pSrc + 5 * 8) = clamp(PJPG_DESCALE(x42 - tmp3) + 128);
   2ffea:	b289      	uxth	r1, r1
        if (s < 0)
   2ffec:	bf84      	itt	hi
   2ffee:	43d2      	mvnhi	r2, r2
   2fff0:	f342 32c0 	sbfxhi	r2, r2, #15, #1
    if ((uint16)s > 255U) {
   2fff4:	29ff      	cmp	r1, #255	@ 0xff
        if (s < 0)
   2fff6:	bf84      	itt	hi
   2fff8:	43c9      	mvnhi	r1, r1
   2fffa:	f341 31c0 	sbfxhi	r1, r1, #15, #1
    return (uint8)s;
   2fffe:	fa5f fc81 	uxtb.w	ip, r1
            *(pSrc + 6 * 8) = clamp(PJPG_DESCALE(x41 - tmp2) + 128);
   30002:	9901      	ldr	r1, [sp, #4]
   30004:	1a40      	subs	r0, r0, r1
   30006:	3040      	adds	r0, #64	@ 0x40
   30008:	11c0      	asrs	r0, r0, #7
            *(pSrc + 7 * 8) = clamp(PJPG_DESCALE(x40 - x17) + 128);
   3000a:	eba3 030e 	sub.w	r3, r3, lr
            *(pSrc + 6 * 8) = clamp(PJPG_DESCALE(x41 - tmp2) + 128);
   3000e:	3080      	adds	r0, #128	@ 0x80
            *(pSrc + 7 * 8) = clamp(PJPG_DESCALE(x40 - x17) + 128);
   30010:	3340      	adds	r3, #64	@ 0x40
            *(pSrc + 6 * 8) = clamp(PJPG_DESCALE(x41 - tmp2) + 128);
   30012:	b280      	uxth	r0, r0
            *(pSrc + 7 * 8) = clamp(PJPG_DESCALE(x40 - x17) + 128);
   30014:	11db      	asrs	r3, r3, #7
    if ((uint16)s > 255U) {
   30016:	28ff      	cmp	r0, #255	@ 0xff
            *(pSrc + 7 * 8) = clamp(PJPG_DESCALE(x40 - x17) + 128);
   30018:	f103 0380 	add.w	r3, r3, #128	@ 0x80
   3001c:	b29b      	uxth	r3, r3
        if (s < 0)
   3001e:	bf84      	itt	hi
   30020:	43c0      	mvnhi	r0, r0
   30022:	f340 30c0 	sbfxhi	r0, r0, #15, #1
    if ((uint16)s > 255U) {
   30026:	2bff      	cmp	r3, #255	@ 0xff
        if (s < 0)
   30028:	bf84      	itt	hi
   3002a:	43db      	mvnhi	r3, r3
   3002c:	f343 33c0 	sbfxhi	r3, r3, #15, #1
    return (uint8)s;
   30030:	b2ff      	uxtb	r7, r7
   30032:	b2f6      	uxtb	r6, r6
   30034:	b2ed      	uxtb	r5, r5
   30036:	b2e4      	uxtb	r4, r4
   30038:	b2d2      	uxtb	r2, r2
   3003a:	b2c0      	uxtb	r0, r0
   3003c:	b2db      	uxtb	r3, r3
            *(pSrc + 0 * 8) = clamp(PJPG_DESCALE(x40 + x17) + 128);
   3003e:	b23f      	sxth	r7, r7
            *(pSrc + 1 * 8) = clamp(PJPG_DESCALE(x41 + tmp2) + 128);
   30040:	b236      	sxth	r6, r6
            *(pSrc + 2 * 8) = clamp(PJPG_DESCALE(x42 + tmp3) + 128);
   30042:	b22d      	sxth	r5, r5
            *(pSrc + 3 * 8) = clamp(PJPG_DESCALE(x43 - x44) + 128);
   30044:	b224      	sxth	r4, r4
            *(pSrc + 4 * 8) = clamp(PJPG_DESCALE(x43 + x44) + 128);
   30046:	b212      	sxth	r2, r2
            *(pSrc + 5 * 8) = clamp(PJPG_DESCALE(x42 - tmp3) + 128);
   30048:	fa0f f18c 	sxth.w	r1, ip
            *(pSrc + 6 * 8) = clamp(PJPG_DESCALE(x41 - tmp2) + 128);
   3004c:	b200      	sxth	r0, r0
            *(pSrc + 7 * 8) = clamp(PJPG_DESCALE(x40 - x17) + 128);
   3004e:	b21b      	sxth	r3, r3
   30050:	e6f8      	b.n	2fe44 <pjpeg_decode_mcu+0x580>
                        if ((k + r) > 63)
   30052:	4498      	add	r8, r3
   30054:	f1b8 0f3f 	cmp.w	r8, #63	@ 0x3f
   30058:	dc56      	bgt.n	30108 <pjpeg_decode_mcu+0x844>
   3005a:	fa5f f888 	uxtb.w	r8, r8
                            gCoeffBuf[ZAG[k++]] = 0;
   3005e:	2100      	movs	r1, #0
   30060:	eba8 0203 	sub.w	r2, r8, r3
   30064:	b2d2      	uxtb	r2, r2
                            r--;
   30066:	3b01      	subs	r3, #1
                            gCoeffBuf[ZAG[k++]] = 0;
   30068:	f91a 2002 	ldrsb.w	r2, [sl, r2]
                            r--;
   3006c:	b29b      	uxth	r3, r3
                            gCoeffBuf[ZAG[k++]] = 0;
   3006e:	f82b 1012 	strh.w	r1, [fp, r2, lsl #1]
                        while (r) {
   30072:	2b00      	cmp	r3, #0
   30074:	d1f4      	bne.n	30060 <pjpeg_decode_mcu+0x79c>
   30076:	e5fc      	b.n	2fc72 <pjpeg_decode_mcu+0x3ae>
            while (k < 64)
   30078:	4ba1      	ldr	r3, [pc, #644]	@ (30300 <pjpeg_decode_mcu+0xa3c>)
   3007a:	f1c8 013f 	rsb	r1, r8, #63	@ 0x3f
   3007e:	4443      	add	r3, r8
   30080:	fa53 f181 	uxtab	r1, r3, r1
   30084:	eb0a 0308 	add.w	r3, sl, r8
                gCoeffBuf[ZAG[k++]] = 0;
   30088:	f913 2b01 	ldrsb.w	r2, [r3], #1
            while (k < 64)
   3008c:	4299      	cmp	r1, r3
                gCoeffBuf[ZAG[k++]] = 0;
   3008e:	f82b 9012 	strh.w	r9, [fp, r2, lsl #1]
            while (k < 64)
   30092:	d1f9      	bne.n	30088 <pjpeg_decode_mcu+0x7c4>
   30094:	e60a      	b.n	2fcac <pjpeg_decode_mcu+0x3e8>
   30096:	f361 020f 	bfi	r2, r1, #0, #16
   3009a:	f361 421f 	bfi	r2, r1, #16, #16
            *(pSrc + 3) = src0;
   3009e:	601a      	str	r2, [r3, #0]
            *(pSrc + 5) = src0;
   300a0:	605a      	str	r2, [r3, #4]
    for (i = 0; i < 8; i++) {
   300a2:	4a98      	ldr	r2, [pc, #608]	@ (30304 <pjpeg_decode_mcu+0xa40>)
            *(pSrc + 1) = src0;
   300a4:	f823 1c04 	strh.w	r1, [r3, #-4]
            *(pSrc + 2) = src0;
   300a8:	f823 1c02 	strh.w	r1, [r3, #-2]
            *(pSrc + 7) = src0;
   300ac:	8119      	strh	r1, [r3, #8]
    for (i = 0; i < 8; i++) {
   300ae:	3310      	adds	r3, #16
   300b0:	429a      	cmp	r2, r3
   300b2:	f47f adfc 	bne.w	2fcae <pjpeg_decode_mcu+0x3ea>
   300b6:	e6a2      	b.n	2fdfe <pjpeg_decode_mcu+0x53a>
    switch (gScanType) {
   300b8:	4b93      	ldr	r3, [pc, #588]	@ (30308 <pjpeg_decode_mcu+0xa44>)
   300ba:	781b      	ldrb	r3, [r3, #0]
   300bc:	2b04      	cmp	r3, #4
   300be:	d815      	bhi.n	300ec <pjpeg_decode_mcu+0x828>
   300c0:	e8df f003 	tbb	[pc, r3]
   300c4:	3a434c03 	.word	0x3a434c03
   300c8:	2e          	.byte	0x2e
   300c9:	00          	.byte	0x00
    int16 *pSrc = gCoeffBuf;
   300ca:	4a90      	ldr	r2, [pc, #576]	@ (3030c <pjpeg_decode_mcu+0xa48>)
    uint8 *pBDst = gMCUBufB + dstOfs;
   300cc:	4c90      	ldr	r4, [pc, #576]	@ (30310 <pjpeg_decode_mcu+0xa4c>)
    uint8 *pGDst = gMCUBufG + dstOfs;
   300ce:	4891      	ldr	r0, [pc, #580]	@ (30314 <pjpeg_decode_mcu+0xa50>)
    uint8 *pRDst = gMCUBufR + dstOfs;
   300d0:	4991      	ldr	r1, [pc, #580]	@ (30318 <pjpeg_decode_mcu+0xa54>)
   300d2:	f102 0c80 	add.w	ip, r2, #128	@ 0x80
        uint8 c = (uint8)*pSrc++;
   300d6:	f832 3b02 	ldrh.w	r3, [r2], #2
   300da:	b2db      	uxtb	r3, r3
    for (i = 64; i > 0; i--) {
   300dc:	4562      	cmp	r2, ip
        *pRDst++ = c;
   300de:	f801 3b01 	strb.w	r3, [r1], #1
        *pGDst++ = c;
   300e2:	f800 3b01 	strb.w	r3, [r0], #1
        *pBDst++ = c;
   300e6:	f804 3b01 	strb.w	r3, [r4], #1
    for (i = 64; i > 0; i--) {
   300ea:	d1f4      	bne.n	300d6 <pjpeg_decode_mcu+0x812>
    for (mcuBlock = 0; mcuBlock < gMaxBlocksPerMCU; mcuBlock++) {
   300ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   300ee:	3301      	adds	r3, #1
   300f0:	b2da      	uxtb	r2, r3
   300f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   300f4:	920a      	str	r2, [sp, #40]	@ 0x28
   300f6:	781b      	ldrb	r3, [r3, #0]
   300f8:	4293      	cmp	r3, r2
   300fa:	f63f ac0c 	bhi.w	2f916 <pjpeg_decode_mcu+0x52>
   300fe:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
   30100:	e4b5      	b.n	2fa6e <pjpeg_decode_mcu+0x1aa>
static PJPG_INLINE uint16 getBits2(uint8 numBits) { return getBits(numBits, 1); }
   30102:	f7fe fc67 	bl	2e9d4 <getBits.constprop.2>
   30106:	e425      	b.n	2f954 <pjpeg_decode_mcu+0x90>
                            return PJPG_DECODE_ERROR;
   30108:	261c      	movs	r6, #28
        return gCallbackStatus ? gCallbackStatus : status;
   3010a:	4b84      	ldr	r3, [pc, #528]	@ (3031c <pjpeg_decode_mcu+0xa58>)
   3010c:	781b      	ldrb	r3, [r3, #0]
   3010e:	2b00      	cmp	r3, #0
   30110:	bf18      	it	ne
   30112:	461e      	movne	r6, r3
}
   30114:	4630      	mov	r0, r6
   30116:	b00f      	add	sp, #60	@ 0x3c
   30118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (uint8)s;
   3011c:	b2d9      	uxtb	r1, r3
   3011e:	e487      	b.n	2fa30 <pjpeg_decode_mcu+0x16c>
        switch (mcuBlock) {
   30120:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   30122:	3b01      	subs	r3, #1
   30124:	2b04      	cmp	r3, #4
   30126:	f200 854f 	bhi.w	30bc8 <pjpeg_decode_mcu+0x1304>
   3012a:	e8df f013 	tbh	[pc, r3, lsl #1]
   3012e:	012e      	.short	0x012e
   30130:	010a011c 	.word	0x010a011c
   30134:	02f70390 	.word	0x02f70390
        switch (mcuBlock) {
   30138:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
   3013a:	2a03      	cmp	r2, #3
   3013c:	d8d6      	bhi.n	300ec <pjpeg_decode_mcu+0x828>
   3013e:	e8df f012 	tbh	[pc, r2, lsl #1]
   30142:	0136      	.short	0x0136
   30144:	00f70148 	.word	0x00f70148
   30148:	0187      	.short	0x0187
        switch (mcuBlock) {
   3014a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
   3014c:	2a03      	cmp	r2, #3
   3014e:	d8cd      	bhi.n	300ec <pjpeg_decode_mcu+0x828>
   30150:	e8df f012 	tbh	[pc, r2, lsl #1]
   30154:	015a016c 	.word	0x015a016c
   30158:	02390151 	.word	0x02390151
        switch (mcuBlock) {
   3015c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   3015e:	2b01      	cmp	r3, #1
   30160:	f000 842f 	beq.w	309c2 <pjpeg_decode_mcu+0x10fe>
   30164:	2b02      	cmp	r3, #2
   30166:	f000 808f 	beq.w	30288 <pjpeg_decode_mcu+0x9c4>
   3016a:	2b00      	cmp	r3, #0
   3016c:	d1be      	bne.n	300ec <pjpeg_decode_mcu+0x828>
    int16 *pSrc = gCoeffBuf;
   3016e:	4a67      	ldr	r2, [pc, #412]	@ (3030c <pjpeg_decode_mcu+0xa48>)
    uint8 *pBDst = gMCUBufB + dstOfs;
   30170:	4c67      	ldr	r4, [pc, #412]	@ (30310 <pjpeg_decode_mcu+0xa4c>)
    uint8 *pGDst = gMCUBufG + dstOfs;
   30172:	4868      	ldr	r0, [pc, #416]	@ (30314 <pjpeg_decode_mcu+0xa50>)
    uint8 *pRDst = gMCUBufR + dstOfs;
   30174:	4968      	ldr	r1, [pc, #416]	@ (30318 <pjpeg_decode_mcu+0xa54>)
   30176:	f102 0c80 	add.w	ip, r2, #128	@ 0x80
        uint8 c = (uint8)*pSrc++;
   3017a:	f832 3b02 	ldrh.w	r3, [r2], #2
   3017e:	b2db      	uxtb	r3, r3
    for (i = 64; i > 0; i--) {
   30180:	4562      	cmp	r2, ip
        *pRDst++ = c;
   30182:	f801 3b01 	strb.w	r3, [r1], #1
        *pGDst++ = c;
   30186:	f800 3b01 	strb.w	r3, [r0], #1
        *pBDst++ = c;
   3018a:	f804 3b01 	strb.w	r3, [r4], #1
    for (i = 64; i > 0; i--) {
   3018e:	d1f4      	bne.n	3017a <pjpeg_decode_mcu+0x8b6>
   30190:	e7ac      	b.n	300ec <pjpeg_decode_mcu+0x828>
        switch (mcuBlock) {
   30192:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   30194:	3b01      	subs	r3, #1
   30196:	2b04      	cmp	r3, #4
   30198:	d821      	bhi.n	301de <pjpeg_decode_mcu+0x91a>
   3019a:	e8df f013 	tbh	[pc, r3, lsl #1]
   3019e:	006b      	.short	0x006b
   301a0:	034e0061 	.word	0x034e0061
   301a4:	036f02d0 	.word	0x036f02d0
        switch (mcuBlock) {
   301a8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
   301aa:	2a03      	cmp	r2, #3
   301ac:	d89e      	bhi.n	300ec <pjpeg_decode_mcu+0x828>
   301ae:	e8df f012 	tbh	[pc, r2, lsl #1]
   301b2:	0016      	.short	0x0016
   301b4:	019f0057 	.word	0x019f0057
   301b8:	0158      	.short	0x0158
        switch (mcuBlock) {
   301ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
   301bc:	2a03      	cmp	r2, #3
   301be:	d895      	bhi.n	300ec <pjpeg_decode_mcu+0x828>
   301c0:	e8df f012 	tbh	[pc, r2, lsl #1]
   301c4:	0058000d 	.word	0x0058000d
   301c8:	0224026b 	.word	0x0224026b
        switch (mcuBlock) {
   301cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   301ce:	2b01      	cmp	r3, #1
   301d0:	f000 83d1 	beq.w	30976 <pjpeg_decode_mcu+0x10b2>
   301d4:	2b02      	cmp	r3, #2
   301d6:	f000 81cc 	beq.w	30572 <pjpeg_decode_mcu+0xcae>
   301da:	2b00      	cmp	r3, #0
   301dc:	d186      	bne.n	300ec <pjpeg_decode_mcu+0x828>
            gMCUBufR[0] = c;
   301de:	4b4e      	ldr	r3, [pc, #312]	@ (30318 <pjpeg_decode_mcu+0xa54>)
   301e0:	7019      	strb	r1, [r3, #0]
            gMCUBufG[0] = c;
   301e2:	4b4c      	ldr	r3, [pc, #304]	@ (30314 <pjpeg_decode_mcu+0xa50>)
   301e4:	7019      	strb	r1, [r3, #0]
            gMCUBufB[0] = c;
   301e6:	4b4a      	ldr	r3, [pc, #296]	@ (30310 <pjpeg_decode_mcu+0xa4c>)
   301e8:	7019      	strb	r1, [r3, #0]
            break;
   301ea:	e77f      	b.n	300ec <pjpeg_decode_mcu+0x828>
        gMCUBufR[0] = c;
   301ec:	4b4a      	ldr	r3, [pc, #296]	@ (30318 <pjpeg_decode_mcu+0xa54>)
   301ee:	7019      	strb	r1, [r3, #0]
        break;
   301f0:	e77c      	b.n	300ec <pjpeg_decode_mcu+0x828>
    for (i = 1536; i > 0; i--)
   301f2:	f44f 64c0 	mov.w	r4, #1536	@ 0x600
   301f6:	e001      	b.n	301fc <pjpeg_decode_mcu+0x938>
   301f8:	b29c      	uxth	r4, r3
   301fa:	b19c      	cbz	r4, 30224 <pjpeg_decode_mcu+0x960>
        if (getChar() == 0xFF)
   301fc:	f7fe fa82 	bl	2e704 <getChar>
   30200:	28ff      	cmp	r0, #255	@ 0xff
    for (i = 1536; i > 0; i--)
   30202:	f104 33ff 	add.w	r3, r4, #4294967295	@ 0xffffffff
        if (getChar() == 0xFF)
   30206:	d1f7      	bne.n	301f8 <pjpeg_decode_mcu+0x934>
   30208:	e000      	b.n	3020c <pjpeg_decode_mcu+0x948>
    for (; i > 0; i--)
   3020a:	b15c      	cbz	r4, 30224 <pjpeg_decode_mcu+0x960>
        if ((c = getChar()) != 0xFF)
   3020c:	f7fe fa7a 	bl	2e704 <getChar>
    for (; i > 0; i--)
   30210:	3c01      	subs	r4, #1
        if ((c = getChar()) != 0xFF)
   30212:	28ff      	cmp	r0, #255	@ 0xff
    for (; i > 0; i--)
   30214:	b2a4      	uxth	r4, r4
        if ((c = getChar()) != 0xFF)
   30216:	d0f8      	beq.n	3020a <pjpeg_decode_mcu+0x946>
    if (c != (gNextRestartNum + M_RST0))
   30218:	4a41      	ldr	r2, [pc, #260]	@ (30320 <pjpeg_decode_mcu+0xa5c>)
   3021a:	8813      	ldrh	r3, [r2, #0]
   3021c:	f103 01d0 	add.w	r1, r3, #208	@ 0xd0
   30220:	4288      	cmp	r0, r1
   30222:	d006      	beq.n	30232 <pjpeg_decode_mcu+0x96e>
                            return PJPG_DECODE_ERROR;
   30224:	261d      	movs	r6, #29
   30226:	e770      	b.n	3010a <pjpeg_decode_mcu+0x846>
        return gCallbackStatus ? gCallbackStatus : status;
   30228:	461e      	mov	r6, r3
}
   3022a:	4630      	mov	r0, r6
   3022c:	b00f      	add	sp, #60	@ 0x3c
   3022e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    gNextRestartNum = (gNextRestartNum + 1) & 7;
   30232:	3301      	adds	r3, #1
   30234:	f003 0307 	and.w	r3, r3, #7
   30238:	8013      	strh	r3, [r2, #0]
    gLastDC[0] = 0;
   3023a:	4b3a      	ldr	r3, [pc, #232]	@ (30324 <pjpeg_decode_mcu+0xa60>)
    gRestartsLeft = gRestartInterval;
   3023c:	8839      	ldrh	r1, [r7, #0]
   3023e:	8029      	strh	r1, [r5, #0]
    gLastDC[0] = 0;
   30240:	4619      	mov	r1, r3
    gBitsLeft = 8;
   30242:	4a39      	ldr	r2, [pc, #228]	@ (30328 <pjpeg_decode_mcu+0xa64>)
    gLastDC[0] = 0;
   30244:	2300      	movs	r3, #0
   30246:	600b      	str	r3, [r1, #0]
    gLastDC[2] = 0;
   30248:	808b      	strh	r3, [r1, #4]
static PJPG_INLINE uint16 getBits2(uint8 numBits) { return getBits(numBits, 1); }
   3024a:	2001      	movs	r0, #1
    gBitsLeft = 8;
   3024c:	2308      	movs	r3, #8
   3024e:	7013      	strb	r3, [r2, #0]
static PJPG_INLINE uint16 getBits2(uint8 numBits) { return getBits(numBits, 1); }
   30250:	f7ff fab8 	bl	2f7c4 <getBits.constprop.0>
   30254:	2001      	movs	r0, #1
   30256:	f7ff fab5 	bl	2f7c4 <getBits.constprop.0>
        gRestartsLeft--;
   3025a:	882b      	ldrh	r3, [r5, #0]
   3025c:	f7ff bbfe 	b.w	2fa5c <pjpeg_decode_mcu+0x198>
            gMCUBufR[128] = c;
   30260:	4b2d      	ldr	r3, [pc, #180]	@ (30318 <pjpeg_decode_mcu+0xa54>)
   30262:	f883 1080 	strb.w	r1, [r3, #128]	@ 0x80
            gMCUBufG[128] = c;
   30266:	4b2b      	ldr	r3, [pc, #172]	@ (30314 <pjpeg_decode_mcu+0xa50>)
   30268:	f883 1080 	strb.w	r1, [r3, #128]	@ 0x80
            gMCUBufB[128] = c;
   3026c:	4b28      	ldr	r3, [pc, #160]	@ (30310 <pjpeg_decode_mcu+0xa4c>)
   3026e:	f883 1080 	strb.w	r1, [r3, #128]	@ 0x80
            break;
   30272:	e73b      	b.n	300ec <pjpeg_decode_mcu+0x828>
            gMCUBufR[64] = c;
   30274:	4b28      	ldr	r3, [pc, #160]	@ (30318 <pjpeg_decode_mcu+0xa54>)
   30276:	f883 1040 	strb.w	r1, [r3, #64]	@ 0x40
            gMCUBufG[64] = c;
   3027a:	4b26      	ldr	r3, [pc, #152]	@ (30314 <pjpeg_decode_mcu+0xa50>)
   3027c:	f883 1040 	strb.w	r1, [r3, #64]	@ 0x40
            gMCUBufB[64] = c;
   30280:	4b23      	ldr	r3, [pc, #140]	@ (30310 <pjpeg_decode_mcu+0xa4c>)
   30282:	f883 1040 	strb.w	r1, [r3, #64]	@ 0x40
            break;
   30286:	e731      	b.n	300ec <pjpeg_decode_mcu+0x828>
    uint8 *pDstR = gMCUBufR + dstOfs;
   30288:	4c23      	ldr	r4, [pc, #140]	@ (30318 <pjpeg_decode_mcu+0xa54>)
   3028a:	f8df e0a0 	ldr.w	lr, [pc, #160]	@ 3032c <pjpeg_decode_mcu+0xa68>
    int16 *pSrc = gCoeffBuf;
   3028e:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 3030c <pjpeg_decode_mcu+0xa48>
   30292:	f104 0940 	add.w	r9, r4, #64	@ 0x40
        uint8 cr = (uint8)*pSrc++;
   30296:	f938 2b02 	ldrsh.w	r2, [r8], #2
        *pDstR++ = addAndClamp(pDstR[0], crR);
   3029a:	f814 1b01 	ldrb.w	r1, [r4], #1
        uint8 cr = (uint8)*pSrc++;
   3029e:	b2d2      	uxtb	r2, r2
        crR = (cr + ((cr * 103U) >> 8U)) - 179;
   302a0:	eb02 0042 	add.w	r0, r2, r2, lsl #1
   302a4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
   302a8:	b213      	sxth	r3, r2
    b = a + b;
   302aa:	f1a2 05b3 	sub.w	r5, r2, #179	@ 0xb3
        crR = (cr + ((cr * 103U) >> 8U)) - 179;
   302ae:	eb02 0240 	add.w	r2, r2, r0, lsl #1
    b = a + b;
   302b2:	eb05 2212 	add.w	r2, r5, r2, lsr #8
   302b6:	440a      	add	r2, r1
   302b8:	b292      	uxth	r2, r2
        if (b < 0)
   302ba:	43d1      	mvns	r1, r2
    if ((uint16)b > 255U) {
   302bc:	2aff      	cmp	r2, #255	@ 0xff
        if (b < 0)
   302be:	f341 31c0 	sbfx	r1, r1, #15, #1
   302c2:	bf88      	it	hi
   302c4:	b2ca      	uxtbhi	r2, r1
        crG = ((cr * 183U) >> 8U) - 91;
   302c6:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   302ca:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   302ce:	ebc3 0383 	rsb	r3, r3, r3, lsl #2
    b = a - b;
   302d2:	f89e 1001 	ldrb.w	r1, [lr, #1]
        crG = ((cr * 183U) >> 8U) - 91;
   302d6:	ea4f 2313 	mov.w	r3, r3, lsr #8
    b = a - b;
   302da:	f1c3 035b 	rsb	r3, r3, #91	@ 0x5b
   302de:	440b      	add	r3, r1
   302e0:	b29b      	uxth	r3, r3
    return (uint8)b;
   302e2:	bf98      	it	ls
   302e4:	b2d2      	uxtbls	r2, r2
        if (b < 0)
   302e6:	43d9      	mvns	r1, r3
    if ((uint16)b > 255U) {
   302e8:	2bff      	cmp	r3, #255	@ 0xff
        if (b < 0)
   302ea:	f341 31c0 	sbfx	r1, r1, #15, #1
        *pDstR++ = addAndClamp(pDstR[0], crR);
   302ee:	f804 2c01 	strb.w	r2, [r4, #-1]
    if ((uint16)b > 255U) {
   302f2:	f240 8339 	bls.w	30968 <pjpeg_decode_mcu+0x10a4>
    for (i = 64; i > 0; i--) {
   302f6:	454c      	cmp	r4, r9
        *pDstG++ = subAndClamp(pDstG[0], crG);
   302f8:	f80e 1f01 	strb.w	r1, [lr, #1]!
    for (i = 64; i > 0; i--) {
   302fc:	d1cb      	bne.n	30296 <pjpeg_decode_mcu+0x9d2>
   302fe:	e6f5      	b.n	300ec <pjpeg_decode_mcu+0x828>
   30300:	0004bbb9 	.word	0x0004bbb9
   30304:	1005124e 	.word	0x1005124e
   30308:	10050929 	.word	0x10050929
   3030c:	100511c8 	.word	0x100511c8
   30310:	10050ec8 	.word	0x10050ec8
   30314:	10050fc8 	.word	0x10050fc8
   30318:	100510c8 	.word	0x100510c8
   3031c:	1005090d 	.word	0x1005090d
   30320:	1005093a 	.word	0x1005093a
   30324:	10050dc0 	.word	0x10050dc0
   30328:	10050954 	.word	0x10050954
   3032c:	10050fc7 	.word	0x10050fc7
            upsampleCbV(0, 0);
   30330:	2100      	movs	r1, #0
   30332:	4608      	mov	r0, r1
   30334:	f7fd fe3c 	bl	2dfb0 <upsampleCbV>
            upsampleCbV(4 * 8, 128);
   30338:	2180      	movs	r1, #128	@ 0x80
   3033a:	2020      	movs	r0, #32
   3033c:	f7fd fe38 	bl	2dfb0 <upsampleCbV>
            break;
   30340:	e6d4      	b.n	300ec <pjpeg_decode_mcu+0x828>
    int16 *pSrc = gCoeffBuf;
   30342:	4aa5      	ldr	r2, [pc, #660]	@ (305d8 <pjpeg_decode_mcu+0xd14>)
    uint8 *pBDst = gMCUBufB + dstOfs;
   30344:	4ca5      	ldr	r4, [pc, #660]	@ (305dc <pjpeg_decode_mcu+0xd18>)
    uint8 *pGDst = gMCUBufG + dstOfs;
   30346:	48a6      	ldr	r0, [pc, #664]	@ (305e0 <pjpeg_decode_mcu+0xd1c>)
    uint8 *pRDst = gMCUBufR + dstOfs;
   30348:	49a6      	ldr	r1, [pc, #664]	@ (305e4 <pjpeg_decode_mcu+0xd20>)
   3034a:	f102 0c80 	add.w	ip, r2, #128	@ 0x80
        uint8 c = (uint8)*pSrc++;
   3034e:	f832 3b02 	ldrh.w	r3, [r2], #2
   30352:	b2db      	uxtb	r3, r3
    for (i = 64; i > 0; i--) {
   30354:	4562      	cmp	r2, ip
        *pRDst++ = c;
   30356:	f801 3b01 	strb.w	r3, [r1], #1
        *pGDst++ = c;
   3035a:	f800 3b01 	strb.w	r3, [r0], #1
        *pBDst++ = c;
   3035e:	f804 3b01 	strb.w	r3, [r4], #1
    for (i = 64; i > 0; i--) {
   30362:	d1f4      	bne.n	3034e <pjpeg_decode_mcu+0xa8a>
   30364:	e6c2      	b.n	300ec <pjpeg_decode_mcu+0x828>
    int16 *pSrc = gCoeffBuf;
   30366:	4a9c      	ldr	r2, [pc, #624]	@ (305d8 <pjpeg_decode_mcu+0xd14>)
    uint8 *pBDst = gMCUBufB + dstOfs;
   30368:	4c9f      	ldr	r4, [pc, #636]	@ (305e8 <pjpeg_decode_mcu+0xd24>)
    uint8 *pGDst = gMCUBufG + dstOfs;
   3036a:	48a0      	ldr	r0, [pc, #640]	@ (305ec <pjpeg_decode_mcu+0xd28>)
    uint8 *pRDst = gMCUBufR + dstOfs;
   3036c:	49a0      	ldr	r1, [pc, #640]	@ (305f0 <pjpeg_decode_mcu+0xd2c>)
   3036e:	f102 0c80 	add.w	ip, r2, #128	@ 0x80
        uint8 c = (uint8)*pSrc++;
   30372:	f832 3b02 	ldrh.w	r3, [r2], #2
   30376:	b2db      	uxtb	r3, r3
    for (i = 64; i > 0; i--) {
   30378:	4562      	cmp	r2, ip
        *pRDst++ = c;
   3037a:	f801 3b01 	strb.w	r3, [r1], #1
        *pGDst++ = c;
   3037e:	f800 3b01 	strb.w	r3, [r0], #1
        *pBDst++ = c;
   30382:	f804 3b01 	strb.w	r3, [r4], #1
    for (i = 64; i > 0; i--) {
   30386:	d1f4      	bne.n	30372 <pjpeg_decode_mcu+0xaae>
   30388:	e6b0      	b.n	300ec <pjpeg_decode_mcu+0x828>
    int16 *pSrc = gCoeffBuf;
   3038a:	4a93      	ldr	r2, [pc, #588]	@ (305d8 <pjpeg_decode_mcu+0xd14>)
    uint8 *pBDst = gMCUBufB + dstOfs;
   3038c:	4c99      	ldr	r4, [pc, #612]	@ (305f4 <pjpeg_decode_mcu+0xd30>)
    uint8 *pGDst = gMCUBufG + dstOfs;
   3038e:	489a      	ldr	r0, [pc, #616]	@ (305f8 <pjpeg_decode_mcu+0xd34>)
    uint8 *pRDst = gMCUBufR + dstOfs;
   30390:	499a      	ldr	r1, [pc, #616]	@ (305fc <pjpeg_decode_mcu+0xd38>)
   30392:	f102 0c80 	add.w	ip, r2, #128	@ 0x80
        uint8 c = (uint8)*pSrc++;
   30396:	f832 3b02 	ldrh.w	r3, [r2], #2
   3039a:	b2db      	uxtb	r3, r3
    for (i = 64; i > 0; i--) {
   3039c:	4562      	cmp	r2, ip
        *pRDst++ = c;
   3039e:	f801 3b01 	strb.w	r3, [r1], #1
        *pGDst++ = c;
   303a2:	f800 3b01 	strb.w	r3, [r0], #1
        *pBDst++ = c;
   303a6:	f804 3b01 	strb.w	r3, [r4], #1
    for (i = 64; i > 0; i--) {
   303aa:	d1f4      	bne.n	30396 <pjpeg_decode_mcu+0xad2>
   303ac:	e69e      	b.n	300ec <pjpeg_decode_mcu+0x828>
    int16 *pSrc = gCoeffBuf;
   303ae:	4a8a      	ldr	r2, [pc, #552]	@ (305d8 <pjpeg_decode_mcu+0xd14>)
    uint8 *pBDst = gMCUBufB + dstOfs;
   303b0:	4c93      	ldr	r4, [pc, #588]	@ (30600 <pjpeg_decode_mcu+0xd3c>)
    uint8 *pGDst = gMCUBufG + dstOfs;
   303b2:	4894      	ldr	r0, [pc, #592]	@ (30604 <pjpeg_decode_mcu+0xd40>)
    uint8 *pRDst = gMCUBufR + dstOfs;
   303b4:	4994      	ldr	r1, [pc, #592]	@ (30608 <pjpeg_decode_mcu+0xd44>)
   303b6:	f102 0c80 	add.w	ip, r2, #128	@ 0x80
        uint8 c = (uint8)*pSrc++;
   303ba:	f832 3b02 	ldrh.w	r3, [r2], #2
   303be:	b2db      	uxtb	r3, r3
    for (i = 64; i > 0; i--) {
   303c0:	4562      	cmp	r2, ip
        *pRDst++ = c;
   303c2:	f801 3b01 	strb.w	r3, [r1], #1
        *pGDst++ = c;
   303c6:	f800 3b01 	strb.w	r3, [r0], #1
        *pBDst++ = c;
   303ca:	f804 3b01 	strb.w	r3, [r4], #1
    for (i = 64; i > 0; i--) {
   303ce:	d1f4      	bne.n	303ba <pjpeg_decode_mcu+0xaf6>
   303d0:	e68c      	b.n	300ec <pjpeg_decode_mcu+0x828>
    int16 *pSrc = gCoeffBuf;
   303d2:	4a81      	ldr	r2, [pc, #516]	@ (305d8 <pjpeg_decode_mcu+0xd14>)
    uint8 *pBDst = gMCUBufB + dstOfs;
   303d4:	4c84      	ldr	r4, [pc, #528]	@ (305e8 <pjpeg_decode_mcu+0xd24>)
    uint8 *pGDst = gMCUBufG + dstOfs;
   303d6:	4885      	ldr	r0, [pc, #532]	@ (305ec <pjpeg_decode_mcu+0xd28>)
    uint8 *pRDst = gMCUBufR + dstOfs;
   303d8:	4985      	ldr	r1, [pc, #532]	@ (305f0 <pjpeg_decode_mcu+0xd2c>)
   303da:	f102 0c80 	add.w	ip, r2, #128	@ 0x80
        uint8 c = (uint8)*pSrc++;
   303de:	f832 3b02 	ldrh.w	r3, [r2], #2
   303e2:	b2db      	uxtb	r3, r3
    for (i = 64; i > 0; i--) {
   303e4:	4562      	cmp	r2, ip
        *pRDst++ = c;
   303e6:	f801 3b01 	strb.w	r3, [r1], #1
        *pGDst++ = c;
   303ea:	f800 3b01 	strb.w	r3, [r0], #1
        *pBDst++ = c;
   303ee:	f804 3b01 	strb.w	r3, [r4], #1
    for (i = 64; i > 0; i--) {
   303f2:	d1f4      	bne.n	303de <pjpeg_decode_mcu+0xb1a>
   303f4:	e67a      	b.n	300ec <pjpeg_decode_mcu+0x828>
            upsampleCbH(0, 0);
   303f6:	2100      	movs	r1, #0
   303f8:	4608      	mov	r0, r1
   303fa:	f7fd fc5b 	bl	2dcb4 <upsampleCbH>
            upsampleCbH(4, 64);
   303fe:	2140      	movs	r1, #64	@ 0x40
   30400:	2004      	movs	r0, #4
   30402:	f7fd fc57 	bl	2dcb4 <upsampleCbH>
            break;
   30406:	e671      	b.n	300ec <pjpeg_decode_mcu+0x828>
    int16 *pSrc = gCoeffBuf;
   30408:	4a73      	ldr	r2, [pc, #460]	@ (305d8 <pjpeg_decode_mcu+0xd14>)
    uint8 *pBDst = gMCUBufB + dstOfs;
   3040a:	4c7a      	ldr	r4, [pc, #488]	@ (305f4 <pjpeg_decode_mcu+0xd30>)
    uint8 *pGDst = gMCUBufG + dstOfs;
   3040c:	487a      	ldr	r0, [pc, #488]	@ (305f8 <pjpeg_decode_mcu+0xd34>)
    uint8 *pRDst = gMCUBufR + dstOfs;
   3040e:	497b      	ldr	r1, [pc, #492]	@ (305fc <pjpeg_decode_mcu+0xd38>)
   30410:	f102 0c80 	add.w	ip, r2, #128	@ 0x80
        uint8 c = (uint8)*pSrc++;
   30414:	f832 3b02 	ldrh.w	r3, [r2], #2
   30418:	b2db      	uxtb	r3, r3
    for (i = 64; i > 0; i--) {
   3041a:	4562      	cmp	r2, ip
        *pRDst++ = c;
   3041c:	f801 3b01 	strb.w	r3, [r1], #1
        *pGDst++ = c;
   30420:	f800 3b01 	strb.w	r3, [r0], #1
        *pBDst++ = c;
   30424:	f804 3b01 	strb.w	r3, [r4], #1
    for (i = 64; i > 0; i--) {
   30428:	d1f4      	bne.n	30414 <pjpeg_decode_mcu+0xb50>
   3042a:	e65f      	b.n	300ec <pjpeg_decode_mcu+0x828>
    int16 *pSrc = gCoeffBuf;
   3042c:	4a6a      	ldr	r2, [pc, #424]	@ (305d8 <pjpeg_decode_mcu+0xd14>)
    uint8 *pBDst = gMCUBufB + dstOfs;
   3042e:	4c74      	ldr	r4, [pc, #464]	@ (30600 <pjpeg_decode_mcu+0xd3c>)
    uint8 *pGDst = gMCUBufG + dstOfs;
   30430:	4874      	ldr	r0, [pc, #464]	@ (30604 <pjpeg_decode_mcu+0xd40>)
    uint8 *pRDst = gMCUBufR + dstOfs;
   30432:	4975      	ldr	r1, [pc, #468]	@ (30608 <pjpeg_decode_mcu+0xd44>)
   30434:	f102 0c80 	add.w	ip, r2, #128	@ 0x80
        uint8 c = (uint8)*pSrc++;
   30438:	f832 3b02 	ldrh.w	r3, [r2], #2
   3043c:	b2db      	uxtb	r3, r3
    for (i = 64; i > 0; i--) {
   3043e:	4562      	cmp	r2, ip
        *pRDst++ = c;
   30440:	f801 3b01 	strb.w	r3, [r1], #1
        *pGDst++ = c;
   30444:	f800 3b01 	strb.w	r3, [r0], #1
        *pBDst++ = c;
   30448:	f804 3b01 	strb.w	r3, [r4], #1
    for (i = 64; i > 0; i--) {
   3044c:	d1f4      	bne.n	30438 <pjpeg_decode_mcu+0xb74>
   3044e:	e64d      	b.n	300ec <pjpeg_decode_mcu+0x828>
            upsampleCrV(0, 0);
   30450:	2100      	movs	r1, #0
   30452:	4608      	mov	r0, r1
   30454:	f7fe f8c2 	bl	2e5dc <upsampleCrV>
            upsampleCrV(4 * 8, 128);
   30458:	2180      	movs	r1, #128	@ 0x80
   3045a:	2020      	movs	r0, #32
   3045c:	f7fe f8be 	bl	2e5dc <upsampleCrV>
            break;
   30460:	e644      	b.n	300ec <pjpeg_decode_mcu+0x828>
            crR = (c + ((c * 103U) >> 8U)) - 179;
   30462:	eb01 0341 	add.w	r3, r1, r1, lsl #1
            gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
   30466:	4a68      	ldr	r2, [pc, #416]	@ (30608 <pjpeg_decode_mcu+0xd44>)
            crR = (c + ((c * 103U) >> 8U)) - 179;
   30468:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   3046c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   30470:	f1a1 00b3 	sub.w	r0, r1, #179	@ 0xb3
   30474:	eb00 2013 	add.w	r0, r0, r3, lsr #8
    b = a + b;
   30478:	7814      	ldrb	r4, [r2, #0]
            crR = (c + ((c * 103U) >> 8U)) - 179;
   3047a:	b280      	uxth	r0, r0
   3047c:	b20b      	sxth	r3, r1
    b = a + b;
   3047e:	4404      	add	r4, r0
   30480:	f892 1080 	ldrb.w	r1, [r2, #128]	@ 0x80
   30484:	b2a4      	uxth	r4, r4
   30486:	4401      	add	r1, r0
    if ((uint16)b > 255U) {
   30488:	2cff      	cmp	r4, #255	@ 0xff
    b = a + b;
   3048a:	b289      	uxth	r1, r1
    if ((uint16)b > 255U) {
   3048c:	f240 82d6 	bls.w	30a3c <pjpeg_decode_mcu+0x1178>
        if (b < 0)
   30490:	0420      	lsls	r0, r4, #16
   30492:	f140 82f2 	bpl.w	30a7a <pjpeg_decode_mcu+0x11b6>
            return 0;
   30496:	2400      	movs	r4, #0
    if ((uint16)b > 255U) {
   30498:	29ff      	cmp	r1, #255	@ 0xff
            gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
   3049a:	7014      	strb	r4, [r2, #0]
    if ((uint16)b > 255U) {
   3049c:	f240 82eb 	bls.w	30a76 <pjpeg_decode_mcu+0x11b2>
        if (b < 0)
   304a0:	43c9      	mvns	r1, r1
   304a2:	f341 31c0 	sbfx	r1, r1, #15, #1
   304a6:	b2c9      	uxtb	r1, r1
            gMCUBufR[128] = addAndClamp(gMCUBufR[128], crR);
   304a8:	f882 1080 	strb.w	r1, [r2, #128]	@ 0x80
            crG = ((c * 183U) >> 8U) - 91;
   304ac:	ebc3 1203 	rsb	r2, r3, r3, lsl #4
   304b0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   304b4:	ebc3 0383 	rsb	r3, r3, r3, lsl #2
            gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
   304b8:	4a52      	ldr	r2, [pc, #328]	@ (30604 <pjpeg_decode_mcu+0xd40>)
            crG = ((c * 183U) >> 8U) - 91;
   304ba:	0a1b      	lsrs	r3, r3, #8
    b = a - b;
   304bc:	7810      	ldrb	r0, [r2, #0]
   304be:	f892 1080 	ldrb.w	r1, [r2, #128]	@ 0x80
            crG = ((c * 183U) >> 8U) - 91;
   304c2:	3b5b      	subs	r3, #91	@ 0x5b
   304c4:	b29b      	uxth	r3, r3
    b = a - b;
   304c6:	1ac0      	subs	r0, r0, r3
   304c8:	b280      	uxth	r0, r0
   304ca:	1acb      	subs	r3, r1, r3
    if ((uint16)b > 255U) {
   304cc:	28ff      	cmp	r0, #255	@ 0xff
    b = a - b;
   304ce:	b29b      	uxth	r3, r3
    if ((uint16)b > 255U) {
   304d0:	f240 82cf 	bls.w	30a72 <pjpeg_decode_mcu+0x11ae>
        if (b < 0)
   304d4:	0406      	lsls	r6, r0, #16
   304d6:	f140 82c5 	bpl.w	30a64 <pjpeg_decode_mcu+0x11a0>
            return 0;
   304da:	2000      	movs	r0, #0
    if ((uint16)b > 255U) {
   304dc:	2bff      	cmp	r3, #255	@ 0xff
            gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
   304de:	7010      	strb	r0, [r2, #0]
    if ((uint16)b > 255U) {
   304e0:	d902      	bls.n	304e8 <pjpeg_decode_mcu+0xc24>
        if (b < 0)
   304e2:	43db      	mvns	r3, r3
   304e4:	f343 33c0 	sbfx	r3, r3, #15, #1
   304e8:	b2db      	uxtb	r3, r3
            gMCUBufG[128] = subAndClamp(gMCUBufG[128], crG);
   304ea:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
            break;
   304ee:	e5fd      	b.n	300ec <pjpeg_decode_mcu+0x828>
            cbG = ((c * 88U) >> 8U) - 44U;
   304f0:	eb01 0381 	add.w	r3, r1, r1, lsl #2
            gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
   304f4:	4a43      	ldr	r2, [pc, #268]	@ (30604 <pjpeg_decode_mcu+0xd40>)
            cbG = ((c * 88U) >> 8U) - 44U;
   304f6:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   304fa:	f3c3 1357 	ubfx	r3, r3, #5, #24
   304fe:	3b2c      	subs	r3, #44	@ 0x2c
    b = a - b;
   30500:	7814      	ldrb	r4, [r2, #0]
   30502:	f892 0080 	ldrb.w	r0, [r2, #128]	@ 0x80
            cbG = ((c * 88U) >> 8U) - 44U;
   30506:	fa1f fc83 	uxth.w	ip, r3
    b = a - b;
   3050a:	eba4 040c 	sub.w	r4, r4, ip
   3050e:	b2a4      	uxth	r4, r4
   30510:	eba0 000c 	sub.w	r0, r0, ip
    if ((uint16)b > 255U) {
   30514:	2cff      	cmp	r4, #255	@ 0xff
            cbG = ((c * 88U) >> 8U) - 44U;
   30516:	b20b      	sxth	r3, r1
    b = a - b;
   30518:	b280      	uxth	r0, r0
    if ((uint16)b > 255U) {
   3051a:	f240 829b 	bls.w	30a54 <pjpeg_decode_mcu+0x1190>
        if (b < 0)
   3051e:	0426      	lsls	r6, r4, #16
   30520:	f140 8292 	bpl.w	30a48 <pjpeg_decode_mcu+0x1184>
            return 0;
   30524:	2400      	movs	r4, #0
    if ((uint16)b > 255U) {
   30526:	28ff      	cmp	r0, #255	@ 0xff
            gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
   30528:	7014      	strb	r4, [r2, #0]
    if ((uint16)b > 255U) {
   3052a:	f240 828b 	bls.w	30a44 <pjpeg_decode_mcu+0x1180>
        if (b < 0)
   3052e:	43c0      	mvns	r0, r0
   30530:	f340 30c0 	sbfx	r0, r0, #15, #1
   30534:	b2c0      	uxtb	r0, r0
            cbB = (c + ((c * 198U) >> 8U)) - 227U;
   30536:	eb03 0343 	add.w	r3, r3, r3, lsl #1
            gMCUBufG[128] = subAndClamp(gMCUBufG[128], cbG);
   3053a:	f882 0080 	strb.w	r0, [r2, #128]	@ 0x80
            cbB = (c + ((c * 198U) >> 8U)) - 227U;
   3053e:	eb03 1343 	add.w	r3, r3, r3, lsl #5
            gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
   30542:	4a2f      	ldr	r2, [pc, #188]	@ (30600 <pjpeg_decode_mcu+0xd3c>)
            cbB = (c + ((c * 198U) >> 8U)) - 227U;
   30544:	39e3      	subs	r1, #227	@ 0xe3
   30546:	f3c3 13d7 	ubfx	r3, r3, #7, #24
   3054a:	440b      	add	r3, r1
    b = a + b;
   3054c:	7811      	ldrb	r1, [r2, #0]
   3054e:	f892 0080 	ldrb.w	r0, [r2, #128]	@ 0x80
            cbB = (c + ((c * 198U) >> 8U)) - 227U;
   30552:	b29b      	uxth	r3, r3
    b = a + b;
   30554:	4419      	add	r1, r3
   30556:	b289      	uxth	r1, r1
   30558:	4403      	add	r3, r0
    if ((uint16)b > 255U) {
   3055a:	29ff      	cmp	r1, #255	@ 0xff
    b = a + b;
   3055c:	b29b      	uxth	r3, r3
    if ((uint16)b > 255U) {
   3055e:	f240 826f 	bls.w	30a40 <pjpeg_decode_mcu+0x117c>
        if (b < 0)
   30562:	040c      	lsls	r4, r1, #16
   30564:	f140 827e 	bpl.w	30a64 <pjpeg_decode_mcu+0x11a0>
            return 0;
   30568:	2100      	movs	r1, #0
    if ((uint16)b > 255U) {
   3056a:	2bff      	cmp	r3, #255	@ 0xff
            gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
   3056c:	7011      	strb	r1, [r2, #0]
    if ((uint16)b > 255U) {
   3056e:	d9bb      	bls.n	304e8 <pjpeg_decode_mcu+0xc24>
   30570:	e7b7      	b.n	304e2 <pjpeg_decode_mcu+0xc1e>
            gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
   30572:	4a25      	ldr	r2, [pc, #148]	@ (30608 <pjpeg_decode_mcu+0xd44>)
    b = a + b;
   30574:	7810      	ldrb	r0, [r2, #0]
            crR = (c + ((c * 103U) >> 8U)) - 179;
   30576:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   3057a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    b = a + b;
   3057e:	38b3      	subs	r0, #179	@ 0xb3
            crR = (c + ((c * 103U) >> 8U)) - 179;
   30580:	eb01 0343 	add.w	r3, r1, r3, lsl #1
    b = a + b;
   30584:	4408      	add	r0, r1
   30586:	eb00 2013 	add.w	r0, r0, r3, lsr #8
   3058a:	b280      	uxth	r0, r0
    if ((uint16)b > 255U) {
   3058c:	28ff      	cmp	r0, #255	@ 0xff
        if (b < 0)
   3058e:	bf84      	itt	hi
   30590:	43c0      	mvnhi	r0, r0
   30592:	f340 30c0 	sbfxhi	r0, r0, #15, #1
            crR = (c + ((c * 103U) >> 8U)) - 179;
   30596:	b20b      	sxth	r3, r1
    return (uint8)b;
   30598:	b2c0      	uxtb	r0, r0
            gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
   3059a:	7010      	strb	r0, [r2, #0]
            crG = ((c * 183U) >> 8U) - 91;
   3059c:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
            gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
   305a0:	4a18      	ldr	r2, [pc, #96]	@ (30604 <pjpeg_decode_mcu+0xd40>)
            crG = ((c * 183U) >> 8U) - 91;
   305a2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   305a6:	ebc3 0183 	rsb	r1, r3, r3, lsl #2
    b = a - b;
   305aa:	7813      	ldrb	r3, [r2, #0]
   305ac:	335b      	adds	r3, #91	@ 0x5b
   305ae:	eba3 2311 	sub.w	r3, r3, r1, lsr #8
   305b2:	b29b      	uxth	r3, r3
    if ((uint16)b > 255U) {
   305b4:	2bff      	cmp	r3, #255	@ 0xff
   305b6:	f240 8200 	bls.w	309ba <pjpeg_decode_mcu+0x10f6>
        if (b < 0)
   305ba:	43db      	mvns	r3, r3
   305bc:	f343 33c0 	sbfx	r3, r3, #15, #1
   305c0:	b2db      	uxtb	r3, r3
            gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
   305c2:	7013      	strb	r3, [r2, #0]
            break;
   305c4:	e592      	b.n	300ec <pjpeg_decode_mcu+0x828>
            upsampleCrH(0, 0);
   305c6:	2100      	movs	r1, #0
   305c8:	4608      	mov	r0, r1
   305ca:	f7fd fe7b 	bl	2e2c4 <upsampleCrH>
            upsampleCrH(4, 64);
   305ce:	2140      	movs	r1, #64	@ 0x40
   305d0:	2004      	movs	r0, #4
   305d2:	f7fd fe77 	bl	2e2c4 <upsampleCrH>
            break;
   305d6:	e589      	b.n	300ec <pjpeg_decode_mcu+0x828>
   305d8:	100511c8 	.word	0x100511c8
   305dc:	10050f88 	.word	0x10050f88
   305e0:	10051088 	.word	0x10051088
   305e4:	10051188 	.word	0x10051188
   305e8:	10050f48 	.word	0x10050f48
   305ec:	10051048 	.word	0x10051048
   305f0:	10051148 	.word	0x10051148
   305f4:	10050f08 	.word	0x10050f08
   305f8:	10051008 	.word	0x10051008
   305fc:	10051108 	.word	0x10051108
   30600:	10050ec8 	.word	0x10050ec8
   30604:	10050fc8 	.word	0x10050fc8
   30608:	100510c8 	.word	0x100510c8
            crR = (c + ((c * 103U) >> 8U)) - 179;
   3060c:	eb01 0341 	add.w	r3, r1, r1, lsl #1
            gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
   30610:	4a97      	ldr	r2, [pc, #604]	@ (30870 <pjpeg_decode_mcu+0xfac>)
            crR = (c + ((c * 103U) >> 8U)) - 179;
   30612:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   30616:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   3061a:	f1a1 00b3 	sub.w	r0, r1, #179	@ 0xb3
   3061e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
    b = a + b;
   30622:	7814      	ldrb	r4, [r2, #0]
            crR = (c + ((c * 103U) >> 8U)) - 179;
   30624:	b280      	uxth	r0, r0
   30626:	b20b      	sxth	r3, r1
    b = a + b;
   30628:	4404      	add	r4, r0
   3062a:	f892 1040 	ldrb.w	r1, [r2, #64]	@ 0x40
   3062e:	b2a4      	uxth	r4, r4
   30630:	4401      	add	r1, r0
    if ((uint16)b > 255U) {
   30632:	2cff      	cmp	r4, #255	@ 0xff
    b = a + b;
   30634:	b289      	uxth	r1, r1
    if ((uint16)b > 255U) {
   30636:	f240 8244 	bls.w	30ac2 <pjpeg_decode_mcu+0x11fe>
        if (b < 0)
   3063a:	0426      	lsls	r6, r4, #16
   3063c:	f140 823b 	bpl.w	30ab6 <pjpeg_decode_mcu+0x11f2>
            return 0;
   30640:	2400      	movs	r4, #0
    if ((uint16)b > 255U) {
   30642:	29ff      	cmp	r1, #255	@ 0xff
            gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
   30644:	7014      	strb	r4, [r2, #0]
    if ((uint16)b > 255U) {
   30646:	f240 8234 	bls.w	30ab2 <pjpeg_decode_mcu+0x11ee>
        if (b < 0)
   3064a:	43c9      	mvns	r1, r1
   3064c:	f341 31c0 	sbfx	r1, r1, #15, #1
   30650:	b2c9      	uxtb	r1, r1
            gMCUBufR[64] = addAndClamp(gMCUBufR[64], crR);
   30652:	f882 1040 	strb.w	r1, [r2, #64]	@ 0x40
            crG = ((c * 183U) >> 8U) - 91;
   30656:	ebc3 1203 	rsb	r2, r3, r3, lsl #4
   3065a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   3065e:	ebc3 0383 	rsb	r3, r3, r3, lsl #2
            gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
   30662:	4a84      	ldr	r2, [pc, #528]	@ (30874 <pjpeg_decode_mcu+0xfb0>)
            crG = ((c * 183U) >> 8U) - 91;
   30664:	0a1b      	lsrs	r3, r3, #8
    b = a - b;
   30666:	7810      	ldrb	r0, [r2, #0]
   30668:	f892 1040 	ldrb.w	r1, [r2, #64]	@ 0x40
            crG = ((c * 183U) >> 8U) - 91;
   3066c:	3b5b      	subs	r3, #91	@ 0x5b
   3066e:	b29b      	uxth	r3, r3
    b = a - b;
   30670:	1ac0      	subs	r0, r0, r3
   30672:	b280      	uxth	r0, r0
   30674:	1acb      	subs	r3, r1, r3
    if ((uint16)b > 255U) {
   30676:	28ff      	cmp	r0, #255	@ 0xff
    b = a - b;
   30678:	b29b      	uxth	r3, r3
    if ((uint16)b > 255U) {
   3067a:	f240 8218 	bls.w	30aae <pjpeg_decode_mcu+0x11ea>
        if (b < 0)
   3067e:	0404      	lsls	r4, r0, #16
   30680:	f140 8201 	bpl.w	30a86 <pjpeg_decode_mcu+0x11c2>
            return 0;
   30684:	2000      	movs	r0, #0
    if ((uint16)b > 255U) {
   30686:	2bff      	cmp	r3, #255	@ 0xff
            gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
   30688:	7010      	strb	r0, [r2, #0]
    if ((uint16)b > 255U) {
   3068a:	d902      	bls.n	30692 <pjpeg_decode_mcu+0xdce>
        if (b < 0)
   3068c:	43db      	mvns	r3, r3
   3068e:	f343 33c0 	sbfx	r3, r3, #15, #1
   30692:	b2db      	uxtb	r3, r3
            gMCUBufG[64] = subAndClamp(gMCUBufG[64], crG);
   30694:	f882 3040 	strb.w	r3, [r2, #64]	@ 0x40
            break;
   30698:	e528      	b.n	300ec <pjpeg_decode_mcu+0x828>
            cbG = ((c * 88U) >> 8U) - 44U;
   3069a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
            gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
   3069e:	4a75      	ldr	r2, [pc, #468]	@ (30874 <pjpeg_decode_mcu+0xfb0>)
            cbG = ((c * 88U) >> 8U) - 44U;
   306a0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   306a4:	f3c3 1357 	ubfx	r3, r3, #5, #24
   306a8:	3b2c      	subs	r3, #44	@ 0x2c
    b = a - b;
   306aa:	7814      	ldrb	r4, [r2, #0]
   306ac:	f892 0040 	ldrb.w	r0, [r2, #64]	@ 0x40
            cbG = ((c * 88U) >> 8U) - 44U;
   306b0:	fa1f fc83 	uxth.w	ip, r3
    b = a - b;
   306b4:	eba4 040c 	sub.w	r4, r4, ip
   306b8:	b2a4      	uxth	r4, r4
   306ba:	eba0 000c 	sub.w	r0, r0, ip
    if ((uint16)b > 255U) {
   306be:	2cff      	cmp	r4, #255	@ 0xff
            cbG = ((c * 88U) >> 8U) - 44U;
   306c0:	b20b      	sxth	r3, r1
    b = a - b;
   306c2:	b280      	uxth	r0, r0
    if ((uint16)b > 255U) {
   306c4:	f240 8209 	bls.w	30ada <pjpeg_decode_mcu+0x1216>
        if (b < 0)
   306c8:	0424      	lsls	r4, r4, #16
   306ca:	f140 8200 	bpl.w	30ace <pjpeg_decode_mcu+0x120a>
            return 0;
   306ce:	2400      	movs	r4, #0
    if ((uint16)b > 255U) {
   306d0:	28ff      	cmp	r0, #255	@ 0xff
            gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
   306d2:	7014      	strb	r4, [r2, #0]
    if ((uint16)b > 255U) {
   306d4:	f240 81f9 	bls.w	30aca <pjpeg_decode_mcu+0x1206>
        if (b < 0)
   306d8:	43c0      	mvns	r0, r0
   306da:	f340 30c0 	sbfx	r0, r0, #15, #1
   306de:	b2c0      	uxtb	r0, r0
            cbB = (c + ((c * 198U) >> 8U)) - 227U;
   306e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
            gMCUBufG[64] = subAndClamp(gMCUBufG[64], cbG);
   306e4:	f882 0040 	strb.w	r0, [r2, #64]	@ 0x40
            cbB = (c + ((c * 198U) >> 8U)) - 227U;
   306e8:	eb03 1343 	add.w	r3, r3, r3, lsl #5
            gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
   306ec:	4a62      	ldr	r2, [pc, #392]	@ (30878 <pjpeg_decode_mcu+0xfb4>)
            cbB = (c + ((c * 198U) >> 8U)) - 227U;
   306ee:	39e3      	subs	r1, #227	@ 0xe3
   306f0:	f3c3 13d7 	ubfx	r3, r3, #7, #24
   306f4:	440b      	add	r3, r1
    b = a + b;
   306f6:	7811      	ldrb	r1, [r2, #0]
   306f8:	f892 0040 	ldrb.w	r0, [r2, #64]	@ 0x40
            cbB = (c + ((c * 198U) >> 8U)) - 227U;
   306fc:	b29b      	uxth	r3, r3
    b = a + b;
   306fe:	4419      	add	r1, r3
   30700:	b289      	uxth	r1, r1
   30702:	4403      	add	r3, r0
    if ((uint16)b > 255U) {
   30704:	29ff      	cmp	r1, #255	@ 0xff
    b = a + b;
   30706:	b29b      	uxth	r3, r3
    if ((uint16)b > 255U) {
   30708:	f240 81dd 	bls.w	30ac6 <pjpeg_decode_mcu+0x1202>
        if (b < 0)
   3070c:	0409      	lsls	r1, r1, #16
   3070e:	f140 81ba 	bpl.w	30a86 <pjpeg_decode_mcu+0x11c2>
            return 0;
   30712:	2100      	movs	r1, #0
    if ((uint16)b > 255U) {
   30714:	2bff      	cmp	r3, #255	@ 0xff
            gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
   30716:	7011      	strb	r1, [r2, #0]
    if ((uint16)b > 255U) {
   30718:	d9bb      	bls.n	30692 <pjpeg_decode_mcu+0xdce>
   3071a:	e7b7      	b.n	3068c <pjpeg_decode_mcu+0xdc8>
            upsampleCr(0, 0);
   3071c:	2100      	movs	r1, #0
   3071e:	4608      	mov	r0, r1
   30720:	f7fd fcde 	bl	2e0e0 <upsampleCr>
            upsampleCr(4, 64);
   30724:	2140      	movs	r1, #64	@ 0x40
   30726:	2004      	movs	r0, #4
   30728:	f7fd fcda 	bl	2e0e0 <upsampleCr>
            upsampleCr(4 * 8, 128);
   3072c:	2180      	movs	r1, #128	@ 0x80
   3072e:	2020      	movs	r0, #32
   30730:	f7fd fcd6 	bl	2e0e0 <upsampleCr>
            upsampleCr(4 + 4 * 8, 192);
   30734:	21c0      	movs	r1, #192	@ 0xc0
   30736:	2024      	movs	r0, #36	@ 0x24
   30738:	f7fd fcd2 	bl	2e0e0 <upsampleCr>
            break;
   3073c:	e4d6      	b.n	300ec <pjpeg_decode_mcu+0x828>
            cbG = ((c * 88U) >> 8U) - 44U;
   3073e:	eb01 0481 	add.w	r4, r1, r1, lsl #2
            gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
   30742:	4a4c      	ldr	r2, [pc, #304]	@ (30874 <pjpeg_decode_mcu+0xfb0>)
            cbG = ((c * 88U) >> 8U) - 44U;
   30744:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   30748:	f3c4 1457 	ubfx	r4, r4, #5, #24
    b = a - b;
   3074c:	7810      	ldrb	r0, [r2, #0]
            cbG = ((c * 88U) >> 8U) - 44U;
   3074e:	3c2c      	subs	r4, #44	@ 0x2c
   30750:	b2a4      	uxth	r4, r4
    b = a - b;
   30752:	1b00      	subs	r0, r0, r4
   30754:	fa1f fc80 	uxth.w	ip, r0
   30758:	f892 0040 	ldrb.w	r0, [r2, #64]	@ 0x40
    if ((uint16)b > 255U) {
   3075c:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
    b = a - b;
   30760:	eba0 0004 	sub.w	r0, r0, r4
            cbG = ((c * 88U) >> 8U) - 44U;
   30764:	b20b      	sxth	r3, r1
    b = a - b;
   30766:	b280      	uxth	r0, r0
    if ((uint16)b > 255U) {
   30768:	f240 8194 	bls.w	30a94 <pjpeg_decode_mcu+0x11d0>
        if (b < 0)
   3076c:	f41c 4f00 	tst.w	ip, #32768	@ 0x8000
   30770:	f000 8195 	beq.w	30a9e <pjpeg_decode_mcu+0x11da>
            return 0;
   30774:	f04f 0c00 	mov.w	ip, #0
    if ((uint16)b > 255U) {
   30778:	28ff      	cmp	r0, #255	@ 0xff
            gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
   3077a:	f882 c000 	strb.w	ip, [r2]
    if ((uint16)b > 255U) {
   3077e:	f240 8194 	bls.w	30aaa <pjpeg_decode_mcu+0x11e6>
        if (b < 0)
   30782:	0400      	lsls	r0, r0, #16
   30784:	f140 8209 	bpl.w	30b9a <pjpeg_decode_mcu+0x12d6>
            return 0;
   30788:	2000      	movs	r0, #0
            gMCUBufG[64] = subAndClamp(gMCUBufG[64], cbG);
   3078a:	f882 0040 	strb.w	r0, [r2, #64]	@ 0x40
    b = a - b;
   3078e:	f892 0080 	ldrb.w	r0, [r2, #128]	@ 0x80
   30792:	1b00      	subs	r0, r0, r4
   30794:	b280      	uxth	r0, r0
    if ((uint16)b > 255U) {
   30796:	28ff      	cmp	r0, #255	@ 0xff
   30798:	f240 817f 	bls.w	30a9a <pjpeg_decode_mcu+0x11d6>
        if (b < 0)
   3079c:	0406      	lsls	r6, r0, #16
   3079e:	f140 8207 	bpl.w	30bb0 <pjpeg_decode_mcu+0x12ec>
            return 0;
   307a2:	2000      	movs	r0, #0
            gMCUBufG[128] = subAndClamp(gMCUBufG[128], cbG);
   307a4:	f882 0080 	strb.w	r0, [r2, #128]	@ 0x80
    b = a - b;
   307a8:	f892 00c0 	ldrb.w	r0, [r2, #192]	@ 0xc0
   307ac:	1b00      	subs	r0, r0, r4
   307ae:	b280      	uxth	r0, r0
    if ((uint16)b > 255U) {
   307b0:	28ff      	cmp	r0, #255	@ 0xff
   307b2:	f240 8155 	bls.w	30a60 <pjpeg_decode_mcu+0x119c>
        if (b < 0)
   307b6:	43c0      	mvns	r0, r0
   307b8:	f340 30c0 	sbfx	r0, r0, #15, #1
   307bc:	b2c0      	uxtb	r0, r0
            cbB = (c + ((c * 198U) >> 8U)) - 227U;
   307be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
            gMCUBufG[192] = subAndClamp(gMCUBufG[192], cbG);
   307c2:	f882 00c0 	strb.w	r0, [r2, #192]	@ 0xc0
            cbB = (c + ((c * 198U) >> 8U)) - 227U;
   307c6:	eb03 1343 	add.w	r3, r3, r3, lsl #5
            gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
   307ca:	4a2b      	ldr	r2, [pc, #172]	@ (30878 <pjpeg_decode_mcu+0xfb4>)
            cbB = (c + ((c * 198U) >> 8U)) - 227U;
   307cc:	39e3      	subs	r1, #227	@ 0xe3
   307ce:	f3c3 13d7 	ubfx	r3, r3, #7, #24
   307d2:	440b      	add	r3, r1
    b = a + b;
   307d4:	7810      	ldrb	r0, [r2, #0]
   307d6:	f892 1040 	ldrb.w	r1, [r2, #64]	@ 0x40
            cbB = (c + ((c * 198U) >> 8U)) - 227U;
   307da:	b29b      	uxth	r3, r3
    b = a + b;
   307dc:	4418      	add	r0, r3
   307de:	b280      	uxth	r0, r0
   307e0:	4419      	add	r1, r3
    if ((uint16)b > 255U) {
   307e2:	28ff      	cmp	r0, #255	@ 0xff
    b = a + b;
   307e4:	b289      	uxth	r1, r1
    if ((uint16)b > 255U) {
   307e6:	f240 8139 	bls.w	30a5c <pjpeg_decode_mcu+0x1198>
        if (b < 0)
   307ea:	0400      	lsls	r0, r0, #16
   307ec:	f140 81c3 	bpl.w	30b76 <pjpeg_decode_mcu+0x12b2>
            return 0;
   307f0:	2000      	movs	r0, #0
    if ((uint16)b > 255U) {
   307f2:	29ff      	cmp	r1, #255	@ 0xff
            gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
   307f4:	7010      	strb	r0, [r2, #0]
    if ((uint16)b > 255U) {
   307f6:	f240 812f 	bls.w	30a58 <pjpeg_decode_mcu+0x1194>
        if (b < 0)
   307fa:	0409      	lsls	r1, r1, #16
   307fc:	f140 81c0 	bpl.w	30b80 <pjpeg_decode_mcu+0x12bc>
            return 0;
   30800:	2100      	movs	r1, #0
            gMCUBufB[64] = addAndClamp(gMCUBufB[64], cbB);
   30802:	f882 1040 	strb.w	r1, [r2, #64]	@ 0x40
    b = a + b;
   30806:	f892 1080 	ldrb.w	r1, [r2, #128]	@ 0x80
   3080a:	4419      	add	r1, r3
   3080c:	b289      	uxth	r1, r1
    if ((uint16)b > 255U) {
   3080e:	29ff      	cmp	r1, #255	@ 0xff
   30810:	f240 8165 	bls.w	30ade <pjpeg_decode_mcu+0x121a>
        if (b < 0)
   30814:	040e      	lsls	r6, r1, #16
   30816:	f140 81bc 	bpl.w	30b92 <pjpeg_decode_mcu+0x12ce>
            return 0;
   3081a:	2100      	movs	r1, #0
            gMCUBufB[128] = addAndClamp(gMCUBufB[128], cbB);
   3081c:	f882 1080 	strb.w	r1, [r2, #128]	@ 0x80
    b = a + b;
   30820:	f892 10c0 	ldrb.w	r1, [r2, #192]	@ 0xc0
   30824:	440b      	add	r3, r1
   30826:	b29b      	uxth	r3, r3
    if ((uint16)b > 255U) {
   30828:	2bff      	cmp	r3, #255	@ 0xff
   3082a:	d902      	bls.n	30832 <pjpeg_decode_mcu+0xf6e>
        if (b < 0)
   3082c:	43db      	mvns	r3, r3
   3082e:	f343 33c0 	sbfx	r3, r3, #15, #1
   30832:	b2db      	uxtb	r3, r3
            gMCUBufG[192] = subAndClamp(gMCUBufG[192], crG);
   30834:	f882 30c0 	strb.w	r3, [r2, #192]	@ 0xc0
            break;
   30838:	e458      	b.n	300ec <pjpeg_decode_mcu+0x828>
            gMCUBufR[192] = c;
   3083a:	4b0d      	ldr	r3, [pc, #52]	@ (30870 <pjpeg_decode_mcu+0xfac>)
   3083c:	f883 10c0 	strb.w	r1, [r3, #192]	@ 0xc0
            gMCUBufG[192] = c;
   30840:	4b0c      	ldr	r3, [pc, #48]	@ (30874 <pjpeg_decode_mcu+0xfb0>)
   30842:	f883 10c0 	strb.w	r1, [r3, #192]	@ 0xc0
            gMCUBufB[192] = c;
   30846:	4b0c      	ldr	r3, [pc, #48]	@ (30878 <pjpeg_decode_mcu+0xfb4>)
   30848:	f883 10c0 	strb.w	r1, [r3, #192]	@ 0xc0
            break;
   3084c:	e44e      	b.n	300ec <pjpeg_decode_mcu+0x828>
            upsampleCb(0, 0);
   3084e:	2100      	movs	r1, #0
   30850:	4608      	mov	r0, r1
   30852:	f7fd f939 	bl	2dac8 <upsampleCb>
            upsampleCb(4, 64);
   30856:	2140      	movs	r1, #64	@ 0x40
   30858:	2004      	movs	r0, #4
   3085a:	f7fd f935 	bl	2dac8 <upsampleCb>
            upsampleCb(4 * 8, 128);
   3085e:	2180      	movs	r1, #128	@ 0x80
   30860:	2020      	movs	r0, #32
   30862:	f7fd f931 	bl	2dac8 <upsampleCb>
            upsampleCb(4 + 4 * 8, 192);
   30866:	21c0      	movs	r1, #192	@ 0xc0
   30868:	2024      	movs	r0, #36	@ 0x24
   3086a:	f7fd f92d 	bl	2dac8 <upsampleCb>
            break;
   3086e:	e43d      	b.n	300ec <pjpeg_decode_mcu+0x828>
   30870:	100510c8 	.word	0x100510c8
   30874:	10050fc8 	.word	0x10050fc8
   30878:	10050ec8 	.word	0x10050ec8
            crR = (c + ((c * 103U) >> 8U)) - 179;
   3087c:	eb01 0341 	add.w	r3, r1, r1, lsl #1
            gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
   30880:	4aad      	ldr	r2, [pc, #692]	@ (30b38 <pjpeg_decode_mcu+0x1274>)
            crR = (c + ((c * 103U) >> 8U)) - 179;
   30882:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   30886:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   3088a:	f1a1 00b3 	sub.w	r0, r1, #179	@ 0xb3
   3088e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
    b = a + b;
   30892:	7814      	ldrb	r4, [r2, #0]
            crR = (c + ((c * 103U) >> 8U)) - 179;
   30894:	b280      	uxth	r0, r0
   30896:	b20b      	sxth	r3, r1
    b = a + b;
   30898:	4404      	add	r4, r0
   3089a:	f892 1040 	ldrb.w	r1, [r2, #64]	@ 0x40
   3089e:	b2a4      	uxth	r4, r4
   308a0:	4401      	add	r1, r0
    if ((uint16)b > 255U) {
   308a2:	2cff      	cmp	r4, #255	@ 0xff
    b = a + b;
   308a4:	b289      	uxth	r1, r1
    if ((uint16)b > 255U) {
   308a6:	f240 812c 	bls.w	30b02 <pjpeg_decode_mcu+0x123e>
        if (b < 0)
   308aa:	0424      	lsls	r4, r4, #16
   308ac:	f140 812b 	bpl.w	30b06 <pjpeg_decode_mcu+0x1242>
            return 0;
   308b0:	2400      	movs	r4, #0
    if ((uint16)b > 255U) {
   308b2:	29ff      	cmp	r1, #255	@ 0xff
            gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
   308b4:	7014      	strb	r4, [r2, #0]
    if ((uint16)b > 255U) {
   308b6:	f240 8122 	bls.w	30afe <pjpeg_decode_mcu+0x123a>
        if (b < 0)
   308ba:	0409      	lsls	r1, r1, #16
   308bc:	f140 8127 	bpl.w	30b0e <pjpeg_decode_mcu+0x124a>
            return 0;
   308c0:	2100      	movs	r1, #0
            gMCUBufR[64] = addAndClamp(gMCUBufR[64], crR);
   308c2:	f882 1040 	strb.w	r1, [r2, #64]	@ 0x40
    b = a + b;
   308c6:	f892 1080 	ldrb.w	r1, [r2, #128]	@ 0x80
   308ca:	4401      	add	r1, r0
   308cc:	b289      	uxth	r1, r1
    if ((uint16)b > 255U) {
   308ce:	29ff      	cmp	r1, #255	@ 0xff
   308d0:	f240 8113 	bls.w	30afa <pjpeg_decode_mcu+0x1236>
        if (b < 0)
   308d4:	040e      	lsls	r6, r1, #16
   308d6:	f140 8123 	bpl.w	30b20 <pjpeg_decode_mcu+0x125c>
            return 0;
   308da:	2100      	movs	r1, #0
            gMCUBufR[128] = addAndClamp(gMCUBufR[128], crR);
   308dc:	f882 1080 	strb.w	r1, [r2, #128]	@ 0x80
    b = a + b;
   308e0:	f892 10c0 	ldrb.w	r1, [r2, #192]	@ 0xc0
   308e4:	4401      	add	r1, r0
   308e6:	b289      	uxth	r1, r1
    if ((uint16)b > 255U) {
   308e8:	29ff      	cmp	r1, #255	@ 0xff
   308ea:	f240 8104 	bls.w	30af6 <pjpeg_decode_mcu+0x1232>
        if (b < 0)
   308ee:	43c9      	mvns	r1, r1
   308f0:	f341 31c0 	sbfx	r1, r1, #15, #1
   308f4:	b2c9      	uxtb	r1, r1
            gMCUBufR[192] = addAndClamp(gMCUBufR[192], crR);
   308f6:	f882 10c0 	strb.w	r1, [r2, #192]	@ 0xc0
            crG = ((c * 183U) >> 8U) - 91;
   308fa:	ebc3 1203 	rsb	r2, r3, r3, lsl #4
   308fe:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   30902:	ebc3 0383 	rsb	r3, r3, r3, lsl #2
            gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
   30906:	4a8d      	ldr	r2, [pc, #564]	@ (30b3c <pjpeg_decode_mcu+0x1278>)
            crG = ((c * 183U) >> 8U) - 91;
   30908:	0a1b      	lsrs	r3, r3, #8
    b = a - b;
   3090a:	7810      	ldrb	r0, [r2, #0]
   3090c:	f892 1040 	ldrb.w	r1, [r2, #64]	@ 0x40
            crG = ((c * 183U) >> 8U) - 91;
   30910:	3b5b      	subs	r3, #91	@ 0x5b
   30912:	b29b      	uxth	r3, r3
    b = a - b;
   30914:	1ac0      	subs	r0, r0, r3
   30916:	b280      	uxth	r0, r0
   30918:	1ac9      	subs	r1, r1, r3
    if ((uint16)b > 255U) {
   3091a:	28ff      	cmp	r0, #255	@ 0xff
    b = a - b;
   3091c:	b289      	uxth	r1, r1
    if ((uint16)b > 255U) {
   3091e:	f240 80e8 	bls.w	30af2 <pjpeg_decode_mcu+0x122e>
        if (b < 0)
   30922:	0404      	lsls	r4, r0, #16
   30924:	f140 80df 	bpl.w	30ae6 <pjpeg_decode_mcu+0x1222>
            return 0;
   30928:	2000      	movs	r0, #0
    if ((uint16)b > 255U) {
   3092a:	29ff      	cmp	r1, #255	@ 0xff
            gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
   3092c:	7010      	strb	r0, [r2, #0]
    if ((uint16)b > 255U) {
   3092e:	f240 80de 	bls.w	30aee <pjpeg_decode_mcu+0x122a>
        if (b < 0)
   30932:	0408      	lsls	r0, r1, #16
   30934:	f140 810a 	bpl.w	30b4c <pjpeg_decode_mcu+0x1288>
            return 0;
   30938:	2100      	movs	r1, #0
            gMCUBufG[64] = subAndClamp(gMCUBufG[64], crG);
   3093a:	f882 1040 	strb.w	r1, [r2, #64]	@ 0x40
    b = a - b;
   3093e:	f892 1080 	ldrb.w	r1, [r2, #128]	@ 0x80
   30942:	1ac9      	subs	r1, r1, r3
   30944:	b289      	uxth	r1, r1
    if ((uint16)b > 255U) {
   30946:	29ff      	cmp	r1, #255	@ 0xff
   30948:	f240 80cb 	bls.w	30ae2 <pjpeg_decode_mcu+0x121e>
        if (b < 0)
   3094c:	0409      	lsls	r1, r1, #16
   3094e:	f140 8106 	bpl.w	30b5e <pjpeg_decode_mcu+0x129a>
            return 0;
   30952:	2100      	movs	r1, #0
            gMCUBufG[128] = subAndClamp(gMCUBufG[128], crG);
   30954:	f882 1080 	strb.w	r1, [r2, #128]	@ 0x80
    b = a - b;
   30958:	f892 10c0 	ldrb.w	r1, [r2, #192]	@ 0xc0
   3095c:	1acb      	subs	r3, r1, r3
   3095e:	b29b      	uxth	r3, r3
    if ((uint16)b > 255U) {
   30960:	2bff      	cmp	r3, #255	@ 0xff
   30962:	f67f af66 	bls.w	30832 <pjpeg_decode_mcu+0xf6e>
   30966:	e761      	b.n	3082c <pjpeg_decode_mcu+0xf68>
    for (i = 64; i > 0; i--) {
   30968:	454c      	cmp	r4, r9
    return (uint8)b;
   3096a:	f80e 3f01 	strb.w	r3, [lr, #1]!
    for (i = 64; i > 0; i--) {
   3096e:	f47f ac92 	bne.w	30296 <pjpeg_decode_mcu+0x9d2>
   30972:	f7ff bbbb 	b.w	300ec <pjpeg_decode_mcu+0x828>
            gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
   30976:	4a71      	ldr	r2, [pc, #452]	@ (30b3c <pjpeg_decode_mcu+0x1278>)
            cbG = ((c * 88U) >> 8U) - 44U;
   30978:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    b = a - b;
   3097c:	7810      	ldrb	r0, [r2, #0]
            cbG = ((c * 88U) >> 8U) - 44U;
   3097e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   30982:	f3c3 1357 	ubfx	r3, r3, #5, #24
    b = a - b;
   30986:	302c      	adds	r0, #44	@ 0x2c
   30988:	1ac0      	subs	r0, r0, r3
   3098a:	b280      	uxth	r0, r0
    if ((uint16)b > 255U) {
   3098c:	28ff      	cmp	r0, #255	@ 0xff
        if (b < 0)
   3098e:	bf84      	itt	hi
   30990:	43c0      	mvnhi	r0, r0
   30992:	f340 30c0 	sbfxhi	r0, r0, #15, #1
    return (uint8)b;
   30996:	b2c0      	uxtb	r0, r0
            cbG = ((c * 88U) >> 8U) - 44U;
   30998:	b20b      	sxth	r3, r1
            gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
   3099a:	7010      	strb	r0, [r2, #0]
            cbB = (c + ((c * 198U) >> 8U)) - 227U;
   3099c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
            gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
   309a0:	4a67      	ldr	r2, [pc, #412]	@ (30b40 <pjpeg_decode_mcu+0x127c>)
            cbB = (c + ((c * 198U) >> 8U)) - 227U;
   309a2:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   309a6:	f3c3 10d7 	ubfx	r0, r3, #7, #24
    b = a + b;
   309aa:	7813      	ldrb	r3, [r2, #0]
   309ac:	3be3      	subs	r3, #227	@ 0xe3
   309ae:	440b      	add	r3, r1
   309b0:	4403      	add	r3, r0
   309b2:	b29b      	uxth	r3, r3
    if ((uint16)b > 255U) {
   309b4:	2bff      	cmp	r3, #255	@ 0xff
   309b6:	f63f ae00 	bhi.w	305ba <pjpeg_decode_mcu+0xcf6>
    return (uint8)b;
   309ba:	b2db      	uxtb	r3, r3
            gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
   309bc:	7013      	strb	r3, [r2, #0]
            break;
   309be:	f7ff bb95 	b.w	300ec <pjpeg_decode_mcu+0x828>
    uint8 *pDstG = gMCUBufG + dstOfs;
   309c2:	4c5e      	ldr	r4, [pc, #376]	@ (30b3c <pjpeg_decode_mcu+0x1278>)
   309c4:	f8df c17c 	ldr.w	ip, [pc, #380]	@ 30b44 <pjpeg_decode_mcu+0x1280>
    int16 *pSrc = gCoeffBuf;
   309c8:	f8df e17c 	ldr.w	lr, [pc, #380]	@ 30b48 <pjpeg_decode_mcu+0x1284>
   309cc:	f104 0840 	add.w	r8, r4, #64	@ 0x40
        uint8 cb = (uint8)*pSrc++;
   309d0:	f93e 1b02 	ldrsh.w	r1, [lr], #2
        *pDstG++ = subAndClamp(pDstG[0], cbG);
   309d4:	f814 0b01 	ldrb.w	r0, [r4], #1
        cbG = ((cb * 88U) >> 8U) - 44U;
   309d8:	b2cb      	uxtb	r3, r1
   309da:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   309de:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   309e2:	0952      	lsrs	r2, r2, #5
    b = a - b;
   309e4:	f1c2 022c 	rsb	r2, r2, #44	@ 0x2c
   309e8:	4402      	add	r2, r0
   309ea:	b292      	uxth	r2, r2
        if (b < 0)
   309ec:	43d0      	mvns	r0, r2
    if ((uint16)b > 255U) {
   309ee:	2aff      	cmp	r2, #255	@ 0xff
        uint8 cb = (uint8)*pSrc++;
   309f0:	4619      	mov	r1, r3
        if (b < 0)
   309f2:	f340 30c0 	sbfx	r0, r0, #15, #1
        cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
   309f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
        if (b < 0)
   309fa:	bf88      	it	hi
   309fc:	b2c2      	uxtbhi	r2, r0
    b = a + b;
   309fe:	f1a1 01e3 	sub.w	r1, r1, #227	@ 0xe3
   30a02:	f89c 0001 	ldrb.w	r0, [ip, #1]
        cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
   30a06:	eb03 1343 	add.w	r3, r3, r3, lsl #5
    b = a + b;
   30a0a:	eb01 13d3 	add.w	r3, r1, r3, lsr #7
   30a0e:	4403      	add	r3, r0
   30a10:	b29b      	uxth	r3, r3
    return (uint8)b;
   30a12:	bf98      	it	ls
   30a14:	b2d2      	uxtbls	r2, r2
        if (b < 0)
   30a16:	43d9      	mvns	r1, r3
    if ((uint16)b > 255U) {
   30a18:	2bff      	cmp	r3, #255	@ 0xff
        if (b < 0)
   30a1a:	f341 31c0 	sbfx	r1, r1, #15, #1
        *pDstG++ = subAndClamp(pDstG[0], cbG);
   30a1e:	f804 2c01 	strb.w	r2, [r4, #-1]
    if ((uint16)b > 255U) {
   30a22:	d905      	bls.n	30a30 <pjpeg_decode_mcu+0x116c>
    for (i = 64; i > 0; i--) {
   30a24:	4544      	cmp	r4, r8
        *pDstB++ = addAndClamp(pDstB[0], cbB);
   30a26:	f80c 1f01 	strb.w	r1, [ip, #1]!
    for (i = 64; i > 0; i--) {
   30a2a:	d1d1      	bne.n	309d0 <pjpeg_decode_mcu+0x110c>
   30a2c:	f7ff bb5e 	b.w	300ec <pjpeg_decode_mcu+0x828>
   30a30:	4544      	cmp	r4, r8
    return (uint8)b;
   30a32:	f80c 3f01 	strb.w	r3, [ip, #1]!
    for (i = 64; i > 0; i--) {
   30a36:	d1cb      	bne.n	309d0 <pjpeg_decode_mcu+0x110c>
   30a38:	f7ff bb58 	b.w	300ec <pjpeg_decode_mcu+0x828>
    return (uint8)b;
   30a3c:	b2e4      	uxtb	r4, r4
   30a3e:	e52b      	b.n	30498 <pjpeg_decode_mcu+0xbd4>
   30a40:	b2c9      	uxtb	r1, r1
   30a42:	e592      	b.n	3056a <pjpeg_decode_mcu+0xca6>
    return (uint8)b;
   30a44:	b2c0      	uxtb	r0, r0
   30a46:	e576      	b.n	30536 <pjpeg_decode_mcu+0xc72>
            gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
   30a48:	24ff      	movs	r4, #255	@ 0xff
    if ((uint16)b > 255U) {
   30a4a:	42a0      	cmp	r0, r4
            gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
   30a4c:	7014      	strb	r4, [r2, #0]
    if ((uint16)b > 255U) {
   30a4e:	d9f9      	bls.n	30a44 <pjpeg_decode_mcu+0x1180>
            return 255;
   30a50:	4620      	mov	r0, r4
   30a52:	e570      	b.n	30536 <pjpeg_decode_mcu+0xc72>
    return (uint8)b;
   30a54:	b2e4      	uxtb	r4, r4
   30a56:	e566      	b.n	30526 <pjpeg_decode_mcu+0xc62>
    return (uint8)b;
   30a58:	b2c9      	uxtb	r1, r1
   30a5a:	e6d2      	b.n	30802 <pjpeg_decode_mcu+0xf3e>
   30a5c:	b2c0      	uxtb	r0, r0
   30a5e:	e6c8      	b.n	307f2 <pjpeg_decode_mcu+0xf2e>
    return (uint8)b;
   30a60:	b2c0      	uxtb	r0, r0
   30a62:	e6ac      	b.n	307be <pjpeg_decode_mcu+0xefa>
            gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
   30a64:	21ff      	movs	r1, #255	@ 0xff
    if ((uint16)b > 255U) {
   30a66:	428b      	cmp	r3, r1
            gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
   30a68:	7011      	strb	r1, [r2, #0]
    if ((uint16)b > 255U) {
   30a6a:	f67f ad3d 	bls.w	304e8 <pjpeg_decode_mcu+0xc24>
            return 255;
   30a6e:	460b      	mov	r3, r1
   30a70:	e53b      	b.n	304ea <pjpeg_decode_mcu+0xc26>
    return (uint8)b;
   30a72:	b2c0      	uxtb	r0, r0
   30a74:	e532      	b.n	304dc <pjpeg_decode_mcu+0xc18>
    return (uint8)b;
   30a76:	b2c9      	uxtb	r1, r1
   30a78:	e516      	b.n	304a8 <pjpeg_decode_mcu+0xbe4>
            gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
   30a7a:	20ff      	movs	r0, #255	@ 0xff
    if ((uint16)b > 255U) {
   30a7c:	4281      	cmp	r1, r0
            gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
   30a7e:	7010      	strb	r0, [r2, #0]
    if ((uint16)b > 255U) {
   30a80:	d9f9      	bls.n	30a76 <pjpeg_decode_mcu+0x11b2>
            return 255;
   30a82:	4601      	mov	r1, r0
   30a84:	e510      	b.n	304a8 <pjpeg_decode_mcu+0xbe4>
            gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
   30a86:	21ff      	movs	r1, #255	@ 0xff
    if ((uint16)b > 255U) {
   30a88:	428b      	cmp	r3, r1
            gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
   30a8a:	7011      	strb	r1, [r2, #0]
    if ((uint16)b > 255U) {
   30a8c:	f67f ae01 	bls.w	30692 <pjpeg_decode_mcu+0xdce>
            return 255;
   30a90:	460b      	mov	r3, r1
   30a92:	e5ff      	b.n	30694 <pjpeg_decode_mcu+0xdd0>
    return (uint8)b;
   30a94:	fa5f fc8c 	uxtb.w	ip, ip
   30a98:	e66e      	b.n	30778 <pjpeg_decode_mcu+0xeb4>
   30a9a:	b2c0      	uxtb	r0, r0
   30a9c:	e682      	b.n	307a4 <pjpeg_decode_mcu+0xee0>
            gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
   30a9e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
    if ((uint16)b > 255U) {
   30aa2:	4560      	cmp	r0, ip
            gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
   30aa4:	f882 c000 	strb.w	ip, [r2]
    if ((uint16)b > 255U) {
   30aa8:	d877      	bhi.n	30b9a <pjpeg_decode_mcu+0x12d6>
    return (uint8)b;
   30aaa:	b2c0      	uxtb	r0, r0
   30aac:	e66d      	b.n	3078a <pjpeg_decode_mcu+0xec6>
   30aae:	b2c0      	uxtb	r0, r0
   30ab0:	e5e9      	b.n	30686 <pjpeg_decode_mcu+0xdc2>
    return (uint8)b;
   30ab2:	b2c9      	uxtb	r1, r1
   30ab4:	e5cd      	b.n	30652 <pjpeg_decode_mcu+0xd8e>
            gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
   30ab6:	20ff      	movs	r0, #255	@ 0xff
    if ((uint16)b > 255U) {
   30ab8:	4281      	cmp	r1, r0
            gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
   30aba:	7010      	strb	r0, [r2, #0]
    if ((uint16)b > 255U) {
   30abc:	d9f9      	bls.n	30ab2 <pjpeg_decode_mcu+0x11ee>
            return 255;
   30abe:	4601      	mov	r1, r0
   30ac0:	e5c7      	b.n	30652 <pjpeg_decode_mcu+0xd8e>
    return (uint8)b;
   30ac2:	b2e4      	uxtb	r4, r4
   30ac4:	e5bd      	b.n	30642 <pjpeg_decode_mcu+0xd7e>
   30ac6:	b2c9      	uxtb	r1, r1
   30ac8:	e624      	b.n	30714 <pjpeg_decode_mcu+0xe50>
    return (uint8)b;
   30aca:	b2c0      	uxtb	r0, r0
   30acc:	e608      	b.n	306e0 <pjpeg_decode_mcu+0xe1c>
            gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
   30ace:	24ff      	movs	r4, #255	@ 0xff
    if ((uint16)b > 255U) {
   30ad0:	42a0      	cmp	r0, r4
            gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
   30ad2:	7014      	strb	r4, [r2, #0]
    if ((uint16)b > 255U) {
   30ad4:	d9f9      	bls.n	30aca <pjpeg_decode_mcu+0x1206>
            return 255;
   30ad6:	4620      	mov	r0, r4
   30ad8:	e602      	b.n	306e0 <pjpeg_decode_mcu+0xe1c>
    return (uint8)b;
   30ada:	b2e4      	uxtb	r4, r4
   30adc:	e5f8      	b.n	306d0 <pjpeg_decode_mcu+0xe0c>
    return (uint8)b;
   30ade:	b2c9      	uxtb	r1, r1
   30ae0:	e69c      	b.n	3081c <pjpeg_decode_mcu+0xf58>
    return (uint8)b;
   30ae2:	b2c9      	uxtb	r1, r1
   30ae4:	e736      	b.n	30954 <pjpeg_decode_mcu+0x1090>
            gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
   30ae6:	20ff      	movs	r0, #255	@ 0xff
    if ((uint16)b > 255U) {
   30ae8:	4281      	cmp	r1, r0
            gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
   30aea:	7010      	strb	r0, [r2, #0]
    if ((uint16)b > 255U) {
   30aec:	d82e      	bhi.n	30b4c <pjpeg_decode_mcu+0x1288>
    return (uint8)b;
   30aee:	b2c9      	uxtb	r1, r1
   30af0:	e723      	b.n	3093a <pjpeg_decode_mcu+0x1076>
   30af2:	b2c0      	uxtb	r0, r0
   30af4:	e719      	b.n	3092a <pjpeg_decode_mcu+0x1066>
    return (uint8)b;
   30af6:	b2c9      	uxtb	r1, r1
   30af8:	e6fd      	b.n	308f6 <pjpeg_decode_mcu+0x1032>
   30afa:	b2c9      	uxtb	r1, r1
   30afc:	e6ee      	b.n	308dc <pjpeg_decode_mcu+0x1018>
   30afe:	b2c9      	uxtb	r1, r1
   30b00:	e6df      	b.n	308c2 <pjpeg_decode_mcu+0xffe>
   30b02:	b2e4      	uxtb	r4, r4
   30b04:	e6d5      	b.n	308b2 <pjpeg_decode_mcu+0xfee>
            gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
   30b06:	24ff      	movs	r4, #255	@ 0xff
    if ((uint16)b > 255U) {
   30b08:	42a1      	cmp	r1, r4
            gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
   30b0a:	7014      	strb	r4, [r2, #0]
    if ((uint16)b > 255U) {
   30b0c:	d9f7      	bls.n	30afe <pjpeg_decode_mcu+0x123a>
    b = a + b;
   30b0e:	f892 1080 	ldrb.w	r1, [r2, #128]	@ 0x80
   30b12:	4401      	add	r1, r0
            gMCUBufR[64] = addAndClamp(gMCUBufR[64], crR);
   30b14:	24ff      	movs	r4, #255	@ 0xff
    b = a + b;
   30b16:	b289      	uxth	r1, r1
    if ((uint16)b > 255U) {
   30b18:	42a1      	cmp	r1, r4
            gMCUBufR[64] = addAndClamp(gMCUBufR[64], crR);
   30b1a:	f882 4040 	strb.w	r4, [r2, #64]	@ 0x40
    if ((uint16)b > 255U) {
   30b1e:	d9ec      	bls.n	30afa <pjpeg_decode_mcu+0x1236>
    b = a + b;
   30b20:	f892 10c0 	ldrb.w	r1, [r2, #192]	@ 0xc0
   30b24:	4401      	add	r1, r0
   30b26:	b289      	uxth	r1, r1
            gMCUBufR[128] = addAndClamp(gMCUBufR[128], crR);
   30b28:	20ff      	movs	r0, #255	@ 0xff
    if ((uint16)b > 255U) {
   30b2a:	4281      	cmp	r1, r0
            gMCUBufR[128] = addAndClamp(gMCUBufR[128], crR);
   30b2c:	f882 0080 	strb.w	r0, [r2, #128]	@ 0x80
    if ((uint16)b > 255U) {
   30b30:	d9e1      	bls.n	30af6 <pjpeg_decode_mcu+0x1232>
            return 255;
   30b32:	4601      	mov	r1, r0
   30b34:	e6df      	b.n	308f6 <pjpeg_decode_mcu+0x1032>
   30b36:	bf00      	nop
   30b38:	100510c8 	.word	0x100510c8
   30b3c:	10050fc8 	.word	0x10050fc8
   30b40:	10050ec8 	.word	0x10050ec8
   30b44:	10050ec7 	.word	0x10050ec7
   30b48:	100511c8 	.word	0x100511c8
    b = a - b;
   30b4c:	f892 1080 	ldrb.w	r1, [r2, #128]	@ 0x80
   30b50:	1ac9      	subs	r1, r1, r3
            gMCUBufG[64] = subAndClamp(gMCUBufG[64], crG);
   30b52:	20ff      	movs	r0, #255	@ 0xff
    b = a - b;
   30b54:	b289      	uxth	r1, r1
    if ((uint16)b > 255U) {
   30b56:	4281      	cmp	r1, r0
            gMCUBufG[64] = subAndClamp(gMCUBufG[64], crG);
   30b58:	f882 0040 	strb.w	r0, [r2, #64]	@ 0x40
    if ((uint16)b > 255U) {
   30b5c:	d9c1      	bls.n	30ae2 <pjpeg_decode_mcu+0x121e>
    b = a - b;
   30b5e:	f892 10c0 	ldrb.w	r1, [r2, #192]	@ 0xc0
   30b62:	1acb      	subs	r3, r1, r3
            gMCUBufG[128] = subAndClamp(gMCUBufG[128], crG);
   30b64:	21ff      	movs	r1, #255	@ 0xff
    b = a - b;
   30b66:	b29b      	uxth	r3, r3
    if ((uint16)b > 255U) {
   30b68:	428b      	cmp	r3, r1
            gMCUBufG[128] = subAndClamp(gMCUBufG[128], crG);
   30b6a:	f882 1080 	strb.w	r1, [r2, #128]	@ 0x80
    if ((uint16)b > 255U) {
   30b6e:	f67f ae60 	bls.w	30832 <pjpeg_decode_mcu+0xf6e>
            return 255;
   30b72:	460b      	mov	r3, r1
   30b74:	e65e      	b.n	30834 <pjpeg_decode_mcu+0xf70>
            gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
   30b76:	20ff      	movs	r0, #255	@ 0xff
    if ((uint16)b > 255U) {
   30b78:	4281      	cmp	r1, r0
            gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
   30b7a:	7010      	strb	r0, [r2, #0]
    if ((uint16)b > 255U) {
   30b7c:	f67f af6c 	bls.w	30a58 <pjpeg_decode_mcu+0x1194>
    b = a + b;
   30b80:	f892 1080 	ldrb.w	r1, [r2, #128]	@ 0x80
   30b84:	4419      	add	r1, r3
            gMCUBufB[64] = addAndClamp(gMCUBufB[64], cbB);
   30b86:	20ff      	movs	r0, #255	@ 0xff
    b = a + b;
   30b88:	b289      	uxth	r1, r1
    if ((uint16)b > 255U) {
   30b8a:	4281      	cmp	r1, r0
            gMCUBufB[64] = addAndClamp(gMCUBufB[64], cbB);
   30b8c:	f882 0040 	strb.w	r0, [r2, #64]	@ 0x40
    if ((uint16)b > 255U) {
   30b90:	d9a5      	bls.n	30ade <pjpeg_decode_mcu+0x121a>
    b = a + b;
   30b92:	f892 10c0 	ldrb.w	r1, [r2, #192]	@ 0xc0
   30b96:	440b      	add	r3, r1
   30b98:	e7e4      	b.n	30b64 <pjpeg_decode_mcu+0x12a0>
    b = a - b;
   30b9a:	f892 0080 	ldrb.w	r0, [r2, #128]	@ 0x80
   30b9e:	1b00      	subs	r0, r0, r4
            gMCUBufG[64] = subAndClamp(gMCUBufG[64], cbG);
   30ba0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
    b = a - b;
   30ba4:	b280      	uxth	r0, r0
    if ((uint16)b > 255U) {
   30ba6:	4560      	cmp	r0, ip
            gMCUBufG[64] = subAndClamp(gMCUBufG[64], cbG);
   30ba8:	f882 c040 	strb.w	ip, [r2, #64]	@ 0x40
    if ((uint16)b > 255U) {
   30bac:	f67f af75 	bls.w	30a9a <pjpeg_decode_mcu+0x11d6>
    b = a - b;
   30bb0:	f892 00c0 	ldrb.w	r0, [r2, #192]	@ 0xc0
   30bb4:	1b00      	subs	r0, r0, r4
   30bb6:	b280      	uxth	r0, r0
            gMCUBufG[128] = subAndClamp(gMCUBufG[128], cbG);
   30bb8:	24ff      	movs	r4, #255	@ 0xff
    if ((uint16)b > 255U) {
   30bba:	42a0      	cmp	r0, r4
            gMCUBufG[128] = subAndClamp(gMCUBufG[128], cbG);
   30bbc:	f882 4080 	strb.w	r4, [r2, #128]	@ 0x80
    if ((uint16)b > 255U) {
   30bc0:	f67f af4e 	bls.w	30a60 <pjpeg_decode_mcu+0x119c>
            return 255;
   30bc4:	4620      	mov	r0, r4
   30bc6:	e5fa      	b.n	307be <pjpeg_decode_mcu+0xefa>
    int16 *pSrc = gCoeffBuf;
   30bc8:	4b08      	ldr	r3, [pc, #32]	@ (30bec <pjpeg_decode_mcu+0x1328>)
    uint8 *pBDst = gMCUBufB + dstOfs;
   30bca:	4c09      	ldr	r4, [pc, #36]	@ (30bf0 <pjpeg_decode_mcu+0x132c>)
    uint8 *pGDst = gMCUBufG + dstOfs;
   30bcc:	4809      	ldr	r0, [pc, #36]	@ (30bf4 <pjpeg_decode_mcu+0x1330>)
    uint8 *pRDst = gMCUBufR + dstOfs;
   30bce:	490a      	ldr	r1, [pc, #40]	@ (30bf8 <pjpeg_decode_mcu+0x1334>)
   30bd0:	f103 0c80 	add.w	ip, r3, #128	@ 0x80
        uint8 c = (uint8)*pSrc++;
   30bd4:	f813 2b02 	ldrb.w	r2, [r3], #2
        *pRDst++ = c;
   30bd8:	f801 2b01 	strb.w	r2, [r1], #1
    for (i = 64; i > 0; i--) {
   30bdc:	4563      	cmp	r3, ip
        *pGDst++ = c;
   30bde:	f800 2b01 	strb.w	r2, [r0], #1
        *pBDst++ = c;
   30be2:	f804 2b01 	strb.w	r2, [r4], #1
    for (i = 64; i > 0; i--) {
   30be6:	d1f5      	bne.n	30bd4 <pjpeg_decode_mcu+0x1310>
   30be8:	f7ff ba80 	b.w	300ec <pjpeg_decode_mcu+0x828>
   30bec:	100511c8 	.word	0x100511c8
   30bf0:	10050ec8 	.word	0x10050ec8
   30bf4:	10050fc8 	.word	0x10050fc8
   30bf8:	100510c8 	.word	0x100510c8

00030bfc <pjpeg_decode_init>:
//------------------------------------------------------------------------------
unsigned char pjpeg_decode_init(
    pjpeg_image_info_t *pInfo, pjpeg_need_bytes_callback_t pNeed_bytes_callback,
    void *pCallback_data, unsigned char reduce) {
   30bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8 status;

    pInfo->m_width = 0;
   30c00:	2400      	movs	r4, #0
    pInfo->m_height = 0;
   30c02:	e9c0 4400 	strd	r4, r4, [r0]
    pInfo->m_comps = 0;
    pInfo->m_MCUSPerRow = 0;
   30c06:	e9c0 4402 	strd	r4, r4, [r0, #8]
    pInfo->m_MCUSPerCol = 0;
    pInfo->m_scanType = PJPG_GRAYSCALE;
    pInfo->m_MCUWidth = 0;
    pInfo->m_MCUHeight = 0;
   30c0a:	e9c0 4406 	strd	r4, r4, [r0, #24]
    pInfo->m_pMCUBufR = (unsigned char *)0;
    pInfo->m_pMCUBufG = (unsigned char *)0;
   30c0e:	e9c0 4408 	strd	r4, r4, [r0, #32]
    pInfo->m_MCUSPerCol = 0;
   30c12:	6104      	str	r4, [r0, #16]
    pInfo->m_scanType = PJPG_GRAYSCALE;
   30c14:	7504      	strb	r4, [r0, #20]
    pInfo->m_pMCUBufB = (unsigned char *)0;
   30c16:	6284      	str	r4, [r0, #40]	@ 0x28
    void *pCallback_data, unsigned char reduce) {
   30c18:	4606      	mov	r6, r0

    g_pNeedBytesCallback = pNeed_bytes_callback;
   30c1a:	488d      	ldr	r0, [pc, #564]	@ (30e50 <pjpeg_decode_init+0x254>)
    g_pCallback_data = pCallback_data;
    gCallbackStatus = 0;
   30c1c:	4f8d      	ldr	r7, [pc, #564]	@ (30e54 <pjpeg_decode_init+0x258>)
    g_pNeedBytesCallback = pNeed_bytes_callback;
   30c1e:	6001      	str	r1, [r0, #0]
    g_pCallback_data = pCallback_data;
   30c20:	498d      	ldr	r1, [pc, #564]	@ (30e58 <pjpeg_decode_init+0x25c>)
    gCompsInFrame = 0;
   30c22:	f8df 8270 	ldr.w	r8, [pc, #624]	@ 30e94 <pjpeg_decode_init+0x298>
    g_pCallback_data = pCallback_data;
   30c26:	600a      	str	r2, [r1, #0]
    gReduce = reduce;
   30c28:	4a8c      	ldr	r2, [pc, #560]	@ (30e5c <pjpeg_decode_init+0x260>)
    gBitBuf = 0;
   30c2a:	f8df b26c 	ldr.w	fp, [pc, #620]	@ 30e98 <pjpeg_decode_init+0x29c>
    gReduce = reduce;
   30c2e:	7013      	strb	r3, [r2, #0]
    gImageXSize = 0;
   30c30:	4b8b      	ldr	r3, [pc, #556]	@ (30e60 <pjpeg_decode_init+0x264>)
    gBitsLeft = 8;
   30c32:	f8df a268 	ldr.w	sl, [pc, #616]	@ 30e9c <pjpeg_decode_init+0x2a0>
    gImageXSize = 0;
   30c36:	801c      	strh	r4, [r3, #0]
    gImageYSize = 0;
   30c38:	4b8a      	ldr	r3, [pc, #552]	@ (30e64 <pjpeg_decode_init+0x268>)
    gCallbackStatus = 0;
   30c3a:	703c      	strb	r4, [r7, #0]
    gImageYSize = 0;
   30c3c:	801c      	strh	r4, [r3, #0]
    gRestartInterval = 0;
   30c3e:	4b8a      	ldr	r3, [pc, #552]	@ (30e68 <pjpeg_decode_init+0x26c>)
    gCompsInFrame = 0;
   30c40:	f888 4000 	strb.w	r4, [r8]
    gRestartInterval = 0;
   30c44:	801c      	strh	r4, [r3, #0]
    gCompsInScan = 0;
   30c46:	4b89      	ldr	r3, [pc, #548]	@ (30e6c <pjpeg_decode_init+0x270>)
    gBitBuf = 0;
   30c48:	f8ab 4000 	strh.w	r4, [fp]
    gCompsInScan = 0;
   30c4c:	701c      	strb	r4, [r3, #0]
    gValidHuffTables = 0;
   30c4e:	4b88      	ldr	r3, [pc, #544]	@ (30e70 <pjpeg_decode_init+0x274>)
   30c50:	701c      	strb	r4, [r3, #0]
    gValidQuantTables = 0;
   30c52:	4b88      	ldr	r3, [pc, #544]	@ (30e74 <pjpeg_decode_init+0x278>)
   30c54:	701c      	strb	r4, [r3, #0]
    gTemFlag = 0;
   30c56:	4b88      	ldr	r3, [pc, #544]	@ (30e78 <pjpeg_decode_init+0x27c>)
   30c58:	701c      	strb	r4, [r3, #0]
    gInBufOfs = 0;
   30c5a:	4b88      	ldr	r3, [pc, #544]	@ (30e7c <pjpeg_decode_init+0x280>)
   30c5c:	701c      	strb	r4, [r3, #0]
    gInBufLeft = 0;
   30c5e:	4b88      	ldr	r3, [pc, #544]	@ (30e80 <pjpeg_decode_init+0x284>)
    gBitsLeft = 8;
   30c60:	2108      	movs	r1, #8
    void *pCallback_data, unsigned char reduce) {
   30c62:	b087      	sub	sp, #28
static PJPG_INLINE uint16 getBits1(uint8 numBits) { return getBits(numBits, 0); }
   30c64:	4620      	mov	r0, r4
    gInBufLeft = 0;
   30c66:	701c      	strb	r4, [r3, #0]
    gBitsLeft = 8;
   30c68:	f88a 1000 	strb.w	r1, [sl]
static PJPG_INLINE uint16 getBits1(uint8 numBits) { return getBits(numBits, 0); }
   30c6c:	f7fe fdaa 	bl	2f7c4 <getBits.constprop.0>
   30c70:	4620      	mov	r0, r4
   30c72:	f7fe fda7 	bl	2f7c4 <getBits.constprop.0>

    status = init();
    if ((status) || (gCallbackStatus))
   30c76:	783d      	ldrb	r5, [r7, #0]
   30c78:	b11d      	cbz	r5, 30c82 <pjpeg_decode_init+0x86>
    pInfo->m_pMCUBufR = gMCUBufR;
    pInfo->m_pMCUBufG = gMCUBufG;
    pInfo->m_pMCUBufB = gMCUBufB;

    return 0;
}
   30c7a:	4628      	mov	r0, r5
   30c7c:	b007      	add	sp, #28
   30c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
static PJPG_INLINE uint16 getBits1(uint8 numBits) { return getBits(numBits, 0); }
   30c82:	4628      	mov	r0, r5
   30c84:	f7fe fd9e 	bl	2f7c4 <getBits.constprop.0>
   30c88:	4604      	mov	r4, r0
   30c8a:	4628      	mov	r0, r5
   30c8c:	f7fe fd9a 	bl	2f7c4 <getBits.constprop.0>
    if ((lastchar == 0xFF) && (thischar == M_SOI))
   30c90:	b2e4      	uxtb	r4, r4
   30c92:	2cff      	cmp	r4, #255	@ 0xff
    uint8 thischar = (uint8)getBits1(8);
   30c94:	fa5f f980 	uxtb.w	r9, r0
    if ((lastchar == 0xFF) && (thischar == M_SOI))
   30c98:	d03d      	beq.n	30d16 <pjpeg_decode_init+0x11a>
    if (gBitsLeft < numBits) {
   30c9a:	f89a 3000 	ldrb.w	r3, [sl]
    uint16 ret = gBitBuf;
   30c9e:	f8bb 0000 	ldrh.w	r0, [fp]
    if (gBitsLeft < numBits) {
   30ca2:	2b07      	cmp	r3, #7
    uint16 ret = gBitBuf;
   30ca4:	f640 74ff 	movw	r4, #4095	@ 0xfff
        gBitBuf <<= gBitsLeft;
   30ca8:	4605      	mov	r5, r0
    if (gBitsLeft < numBits) {
   30caa:	d916      	bls.n	30cda <pjpeg_decode_init+0xde>
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   30cac:	3b08      	subs	r3, #8
        gBitBuf <<= numBits;
   30cae:	0200      	lsls	r0, r0, #8
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   30cb0:	f88a 3000 	strb.w	r3, [sl]
        gBitBuf <<= numBits;
   30cb4:	b280      	uxth	r0, r0
        if (--bytesleft == 0)
   30cb6:	3c01      	subs	r4, #1
        if (lastchar == 0xFF) {
   30cb8:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
    return ret >> (16 - origBits);
   30cbc:	ea4f 2325 	mov.w	r3, r5, asr #8
        gBitBuf <<= (numBits - gBitsLeft);
   30cc0:	f8ab 0000 	strh.w	r0, [fp]
        thischar = (uint8)getBits1(8);
   30cc4:	ea4f 2515 	mov.w	r5, r5, lsr #8
        if (--bytesleft == 0)
   30cc8:	b2a4      	uxth	r4, r4
        if (lastchar == 0xFF) {
   30cca:	d016      	beq.n	30cfa <pjpeg_decode_init+0xfe>
        if (--bytesleft == 0)
   30ccc:	b1d4      	cbz	r4, 30d04 <pjpeg_decode_init+0x108>
    if (gBitsLeft < numBits) {
   30cce:	f89a 3000 	ldrb.w	r3, [sl]
   30cd2:	2b07      	cmp	r3, #7
   30cd4:	46a9      	mov	r9, r5
        gBitBuf <<= gBitsLeft;
   30cd6:	4605      	mov	r5, r0
    if (gBitsLeft < numBits) {
   30cd8:	d8e8      	bhi.n	30cac <pjpeg_decode_init+0xb0>
        gBitBuf <<= gBitsLeft;
   30cda:	4098      	lsls	r0, r3
   30cdc:	f8ab 0000 	strh.w	r0, [fp]
    uint8 c = getChar();
   30ce0:	f7fd fd10 	bl	2e704 <getChar>
        gBitBuf |= getOctet(FFCheck);
   30ce4:	f8bb 2000 	ldrh.w	r2, [fp]
        gBitBuf <<= (numBits - gBitsLeft);
   30ce8:	f89a 3000 	ldrb.w	r3, [sl]
        gBitBuf |= getOctet(FFCheck);
   30cec:	4310      	orrs	r0, r2
        gBitBuf <<= (numBits - gBitsLeft);
   30cee:	b280      	uxth	r0, r0
   30cf0:	f1c3 0308 	rsb	r3, r3, #8
   30cf4:	4098      	lsls	r0, r3
   30cf6:	b280      	uxth	r0, r0
        gBitsLeft = 8 - (numBits - gBitsLeft);
   30cf8:	e7dd      	b.n	30cb6 <pjpeg_decode_init+0xba>
            if (thischar == M_SOI)
   30cfa:	2bd8      	cmp	r3, #216	@ 0xd8
   30cfc:	f000 80a1 	beq.w	30e42 <pjpeg_decode_init+0x246>
            else if (thischar == M_EOI) // getBits1 will keep returning M_EOI if we
   30d00:	2bd9      	cmp	r3, #217	@ 0xd9
   30d02:	d1e3      	bne.n	30ccc <pjpeg_decode_init+0xd0>
   30d04:	2513      	movs	r5, #19
        return gCallbackStatus ? gCallbackStatus : status;
   30d06:	783b      	ldrb	r3, [r7, #0]
   30d08:	2b00      	cmp	r3, #0
   30d0a:	bf18      	it	ne
   30d0c:	461d      	movne	r5, r3
}
   30d0e:	4628      	mov	r0, r5
   30d10:	b007      	add	sp, #28
   30d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((lastchar == 0xFF) && (thischar == M_SOI))
   30d16:	f1b9 0fd8 	cmp.w	r9, #216	@ 0xd8
   30d1a:	d1be      	bne.n	30c9a <pjpeg_decode_init+0x9e>
    status = processMarkers(&c);
   30d1c:	f10d 0017 	add.w	r0, sp, #23
   30d20:	f7fd feb4 	bl	2ea8c <processMarkers>
    if (status)
   30d24:	4605      	mov	r5, r0
   30d26:	2800      	cmp	r0, #0
   30d28:	d1ed      	bne.n	30d06 <pjpeg_decode_init+0x10a>
    switch (c) {
   30d2a:	f89d 1017 	ldrb.w	r1, [sp, #23]
   30d2e:	29c2      	cmp	r1, #194	@ 0xc2
   30d30:	f000 8175 	beq.w	3101e <pjpeg_decode_init+0x422>
   30d34:	29c9      	cmp	r1, #201	@ 0xc9
   30d36:	f000 8170 	beq.w	3101a <pjpeg_decode_init+0x41e>
   30d3a:	29c0      	cmp	r1, #192	@ 0xc0
   30d3c:	f040 8086 	bne.w	30e4c <pjpeg_decode_init+0x250>
static PJPG_INLINE uint16 getBits1(uint8 numBits) { return getBits(numBits, 0); }
   30d40:	f7fd fd1a 	bl	2e778 <getBits.constprop.1>
   30d44:	4681      	mov	r9, r0
   30d46:	4628      	mov	r0, r5
   30d48:	f7fe fd3c 	bl	2f7c4 <getBits.constprop.0>
    if (getBits1(8) != 8)
   30d4c:	2808      	cmp	r0, #8
static PJPG_INLINE uint16 getBits1(uint8 numBits) { return getBits(numBits, 0); }
   30d4e:	4604      	mov	r4, r0
    if (getBits1(8) != 8)
   30d50:	f040 816f 	bne.w	31032 <pjpeg_decode_init+0x436>
static PJPG_INLINE uint16 getBits1(uint8 numBits) { return getBits(numBits, 0); }
   30d54:	f7fd fd10 	bl	2e778 <getBits.constprop.1>
    gImageYSize = getBits1(16);
   30d58:	4b42      	ldr	r3, [pc, #264]	@ (30e64 <pjpeg_decode_init+0x268>)
    if ((!gImageYSize) || (gImageYSize > PJPG_MAX_HEIGHT))
   30d5a:	1e41      	subs	r1, r0, #1
   30d5c:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
    gImageYSize = getBits1(16);
   30d60:	8018      	strh	r0, [r3, #0]
    if ((!gImageYSize) || (gImageYSize > PJPG_MAX_HEIGHT))
   30d62:	f080 8183 	bcs.w	3106c <pjpeg_decode_init+0x470>
static PJPG_INLINE uint16 getBits1(uint8 numBits) { return getBits(numBits, 0); }
   30d66:	f7fd fd07 	bl	2e778 <getBits.constprop.1>
    gImageXSize = getBits1(16);
   30d6a:	4b3d      	ldr	r3, [pc, #244]	@ (30e60 <pjpeg_decode_init+0x264>)
    if ((!gImageXSize) || (gImageXSize > PJPG_MAX_WIDTH))
   30d6c:	1e41      	subs	r1, r0, #1
   30d6e:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
    gImageXSize = getBits1(16);
   30d72:	8018      	strh	r0, [r3, #0]
    if ((!gImageXSize) || (gImageXSize > PJPG_MAX_WIDTH))
   30d74:	f080 818f 	bcs.w	31096 <pjpeg_decode_init+0x49a>
static PJPG_INLINE uint16 getBits1(uint8 numBits) { return getBits(numBits, 0); }
   30d78:	4628      	mov	r0, r5
   30d7a:	f7fe fd23 	bl	2f7c4 <getBits.constprop.0>
    gCompsInFrame = (uint8)getBits1(8);
   30d7e:	b2c1      	uxtb	r1, r0
    if (gCompsInFrame > 3)
   30d80:	2903      	cmp	r1, #3
    gCompsInFrame = (uint8)getBits1(8);
   30d82:	f888 1000 	strb.w	r1, [r8]
    if (gCompsInFrame > 3)
   30d86:	f200 82c4 	bhi.w	31312 <pjpeg_decode_init+0x716>
    if (left != (gCompsInFrame + gCompsInFrame + gCompsInFrame + 8))
   30d8a:	2003      	movs	r0, #3
   30d8c:	fb10 4001 	smlabb	r0, r0, r1, r4
   30d90:	4581      	cmp	r9, r0
   30d92:	f040 8294 	bne.w	312be <pjpeg_decode_init+0x6c2>
    for (i = 0; i < gCompsInFrame; i++) {
   30d96:	2900      	cmp	r1, #0
   30d98:	f000 8143 	beq.w	31022 <pjpeg_decode_init+0x426>
   30d9c:	4b39      	ldr	r3, [pc, #228]	@ (30e84 <pjpeg_decode_init+0x288>)
   30d9e:	493a      	ldr	r1, [pc, #232]	@ (30e88 <pjpeg_decode_init+0x28c>)
   30da0:	9300      	str	r3, [sp, #0]
   30da2:	4b3a      	ldr	r3, [pc, #232]	@ (30e8c <pjpeg_decode_init+0x290>)
   30da4:	4d3a      	ldr	r5, [pc, #232]	@ (30e90 <pjpeg_decode_init+0x294>)
   30da6:	4689      	mov	r9, r1
   30da8:	461c      	mov	r4, r3
   30daa:	e025      	b.n	30df8 <pjpeg_decode_init+0x1fc>
        gBitBuf <<= numBits;
   30dac:	0113      	lsls	r3, r2, #4
   30dae:	b29b      	uxth	r3, r3
    return ret >> (16 - origBits);
   30db0:	1312      	asrs	r2, r2, #12
    if (gBitsLeft < numBits) {
   30db2:	2803      	cmp	r0, #3
        gCompHSamp[i] = (uint8)getBits1(4);
   30db4:	f809 2b01 	strb.w	r2, [r9], #1
        gBitsLeft = 8 - (numBits - gBitsLeft);
   30db8:	f88a 0000 	strb.w	r0, [sl]
    if (gBitsLeft < numBits) {
   30dbc:	f240 813b 	bls.w	31036 <pjpeg_decode_init+0x43a>
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   30dc0:	3804      	subs	r0, #4
        gBitBuf <<= numBits;
   30dc2:	011a      	lsls	r2, r3, #4
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   30dc4:	f88a 0000 	strb.w	r0, [sl]
        gBitBuf <<= numBits;
   30dc8:	f8ab 2000 	strh.w	r2, [fp]
        gCompVSamp[i] = (uint8)getBits1(4);
   30dcc:	9a00      	ldr	r2, [sp, #0]
    return ret >> (16 - origBits);
   30dce:	131b      	asrs	r3, r3, #12
        gCompVSamp[i] = (uint8)getBits1(4);
   30dd0:	f802 3b01 	strb.w	r3, [r2], #1
static PJPG_INLINE uint16 getBits1(uint8 numBits) { return getBits(numBits, 0); }
   30dd4:	2000      	movs	r0, #0
        gCompVSamp[i] = (uint8)getBits1(4);
   30dd6:	9200      	str	r2, [sp, #0]
static PJPG_INLINE uint16 getBits1(uint8 numBits) { return getBits(numBits, 0); }
   30dd8:	f7fe fcf4 	bl	2f7c4 <getBits.constprop.0>
        gCompQuant[i] = (uint8)getBits1(8);
   30ddc:	b2c3      	uxtb	r3, r0
        if (gCompQuant[i] > 1)
   30dde:	2b01      	cmp	r3, #1
        gCompQuant[i] = (uint8)getBits1(8);
   30de0:	f805 3b01 	strb.w	r3, [r5], #1
        if (gCompQuant[i] > 1)
   30de4:	f200 82b5 	bhi.w	31352 <pjpeg_decode_init+0x756>
    for (i = 0; i < gCompsInFrame; i++) {
   30de8:	4b28      	ldr	r3, [pc, #160]	@ (30e8c <pjpeg_decode_init+0x290>)
   30dea:	f898 0000 	ldrb.w	r0, [r8]
   30dee:	4926      	ldr	r1, [pc, #152]	@ (30e88 <pjpeg_decode_init+0x28c>)
   30df0:	1ae3      	subs	r3, r4, r3
   30df2:	b2db      	uxtb	r3, r3
   30df4:	4298      	cmp	r0, r3
   30df6:	d953      	bls.n	30ea0 <pjpeg_decode_init+0x2a4>
static PJPG_INLINE uint16 getBits1(uint8 numBits) { return getBits(numBits, 0); }
   30df8:	2000      	movs	r0, #0
   30dfa:	f7fe fce3 	bl	2f7c4 <getBits.constprop.0>
    if (gBitsLeft < numBits) {
   30dfe:	f89a 3000 	ldrb.w	r3, [sl]
        gCompIdent[i] = (uint8)getBits1(8);
   30e02:	f804 0b01 	strb.w	r0, [r4], #1
    if (gBitsLeft < numBits) {
   30e06:	2b03      	cmp	r3, #3
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   30e08:	f1a3 0004 	sub.w	r0, r3, #4
    uint16 ret = gBitBuf;
   30e0c:	f8bb 2000 	ldrh.w	r2, [fp]
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   30e10:	b2c0      	uxtb	r0, r0
    if (gBitsLeft < numBits) {
   30e12:	d8cb      	bhi.n	30dac <pjpeg_decode_init+0x1b0>
        gBitBuf <<= gBitsLeft;
   30e14:	fa02 f303 	lsl.w	r3, r2, r3
   30e18:	9201      	str	r2, [sp, #4]
   30e1a:	f8ab 3000 	strh.w	r3, [fp]
    uint8 c = getChar();
   30e1e:	f7fd fc71 	bl	2e704 <getChar>
   30e22:	4603      	mov	r3, r0
        gBitBuf |= getOctet(FFCheck);
   30e24:	f8bb 0000 	ldrh.w	r0, [fp]
   30e28:	9a01      	ldr	r2, [sp, #4]
   30e2a:	4303      	orrs	r3, r0
        gBitBuf <<= (numBits - gBitsLeft);
   30e2c:	f89a 0000 	ldrb.w	r0, [sl]
   30e30:	b29b      	uxth	r3, r3
   30e32:	f1c0 0c04 	rsb	ip, r0, #4
   30e36:	fa03 f30c 	lsl.w	r3, r3, ip
        gBitsLeft = 8 - (numBits - gBitsLeft);
   30e3a:	3004      	adds	r0, #4
        gBitBuf <<= (numBits - gBitsLeft);
   30e3c:	b29b      	uxth	r3, r3
        gBitsLeft = 8 - (numBits - gBitsLeft);
   30e3e:	b2c0      	uxtb	r0, r0
   30e40:	e7b6      	b.n	30db0 <pjpeg_decode_init+0x1b4>
    if (thischar != 0xFF)
   30e42:	0a00      	lsrs	r0, r0, #8
   30e44:	28ff      	cmp	r0, #255	@ 0xff
   30e46:	f43f af69 	beq.w	30d1c <pjpeg_decode_init+0x120>
   30e4a:	e75b      	b.n	30d04 <pjpeg_decode_init+0x108>
        return PJPG_UNSUPPORTED_MARKER;
   30e4c:	2514      	movs	r5, #20
   30e4e:	e75a      	b.n	30d06 <pjpeg_decode_init+0x10a>
   30e50:	10050914 	.word	0x10050914
   30e54:	1005090d 	.word	0x1005090d
   30e58:	10050910 	.word	0x10050910
   30e5c:	1005090c 	.word	0x1005090c
   30e60:	10050952 	.word	0x10050952
   30e64:	10050950 	.word	0x10050950
   30e68:	1005093c 	.word	0x1005093c
   30e6c:	10050937 	.word	0x10050937
   30e70:	10050a5e 	.word	0x10050a5e
   30e74:	10050a5d 	.word	0x10050a5d
   30e78:	10050a5c 	.word	0x10050a5c
   30e7c:	10050959 	.word	0x10050959
   30e80:	10050958 	.word	0x10050958
   30e84:	10050944 	.word	0x10050944
   30e88:	10050948 	.word	0x10050948
   30e8c:	1005094c 	.word	0x1005094c
   30e90:	10050940 	.word	0x10050940
   30e94:	1005094f 	.word	0x1005094f
   30e98:	10050956 	.word	0x10050956
   30e9c:	10050954 	.word	0x10050954
    if ((status) || (gCallbackStatus))
   30ea0:	783d      	ldrb	r5, [r7, #0]
   30ea2:	2d00      	cmp	r5, #0
   30ea4:	f47f aee9 	bne.w	30c7a <pjpeg_decode_init+0x7e>
    if (gCompsInFrame == 1) {
   30ea8:	2801      	cmp	r0, #1
   30eaa:	f000 809a 	beq.w	30fe2 <pjpeg_decode_init+0x3e6>
    } else if (gCompsInFrame == 3) {
   30eae:	2803      	cmp	r0, #3
   30eb0:	f040 80bb 	bne.w	3102a <pjpeg_decode_init+0x42e>
        if (((gCompHSamp[1] != 1) || (gCompVSamp[1] != 1)) ||
   30eb4:	7848      	ldrb	r0, [r1, #1]
   30eb6:	2801      	cmp	r0, #1
   30eb8:	f040 8091 	bne.w	30fde <pjpeg_decode_init+0x3e2>
   30ebc:	4b77      	ldr	r3, [pc, #476]	@ (3109c <pjpeg_decode_init+0x4a0>)
   30ebe:	7858      	ldrb	r0, [r3, #1]
   30ec0:	2801      	cmp	r0, #1
   30ec2:	f040 808c 	bne.w	30fde <pjpeg_decode_init+0x3e2>
   30ec6:	7888      	ldrb	r0, [r1, #2]
   30ec8:	2801      	cmp	r0, #1
   30eca:	f040 8088 	bne.w	30fde <pjpeg_decode_init+0x3e2>
            ((gCompHSamp[2] != 1) || (gCompVSamp[2] != 1)))
   30ece:	7898      	ldrb	r0, [r3, #2]
   30ed0:	2801      	cmp	r0, #1
   30ed2:	f040 8084 	bne.w	30fde <pjpeg_decode_init+0x3e2>
        if ((gCompHSamp[0] == 1) && (gCompVSamp[0] == 1)) {
   30ed6:	7809      	ldrb	r1, [r1, #0]
   30ed8:	2901      	cmp	r1, #1
   30eda:	f000 80c9 	beq.w	31070 <pjpeg_decode_init+0x474>
        } else if ((gCompHSamp[0] == 2) && (gCompVSamp[0] == 1)) {
   30ede:	2902      	cmp	r1, #2
   30ee0:	d17d      	bne.n	30fde <pjpeg_decode_init+0x3e2>
   30ee2:	4b6e      	ldr	r3, [pc, #440]	@ (3109c <pjpeg_decode_init+0x4a0>)
   30ee4:	7818      	ldrb	r0, [r3, #0]
   30ee6:	2801      	cmp	r0, #1
   30ee8:	f000 8224 	beq.w	31334 <pjpeg_decode_init+0x738>
        } else if ((gCompHSamp[0] == 2) && (gCompVSamp[0] == 2)) {
   30eec:	2802      	cmp	r0, #2
   30eee:	d176      	bne.n	30fde <pjpeg_decode_init+0x3e2>
            gScanType = PJPG_YH2V2;
   30ef0:	4b6b      	ldr	r3, [pc, #428]	@ (310a0 <pjpeg_decode_init+0x4a4>)
            gMaxBlocksPerMCU = 6;
   30ef2:	486c      	ldr	r0, [pc, #432]	@ (310a4 <pjpeg_decode_init+0x4a8>)
            gMCUOrg[0] = 0;
   30ef4:	496c      	ldr	r1, [pc, #432]	@ (310a8 <pjpeg_decode_init+0x4ac>)
            gScanType = PJPG_YH2V2;
   30ef6:	9300      	str	r3, [sp, #0]
   30ef8:	2404      	movs	r4, #4
   30efa:	701c      	strb	r4, [r3, #0]
            gMaxBlocksPerMCU = 6;
   30efc:	2406      	movs	r4, #6
   30efe:	7004      	strb	r4, [r0, #0]
            gMCUOrg[0] = 0;
   30f00:	2000      	movs	r0, #0
   30f02:	6008      	str	r0, [r1, #0]
            gMCUOrg[4] = 1;
   30f04:	f240 2001 	movw	r0, #513	@ 0x201
   30f08:	8088      	strh	r0, [r1, #4]
            gMaxMCUYSize = 16;
   30f0a:	250f      	movs	r5, #15
   30f0c:	2410      	movs	r4, #16
   30f0e:	4a67      	ldr	r2, [pc, #412]	@ (310ac <pjpeg_decode_init+0x4b0>)
   30f10:	9202      	str	r2, [sp, #8]
   30f12:	7014      	strb	r4, [r2, #0]
    gMaxMCUSPerRow = (gImageXSize + (gMaxMCUXSize - 1)) >> ((gMaxMCUXSize == 8) ? 3 : 4);
   30f14:	4a66      	ldr	r2, [pc, #408]	@ (310b0 <pjpeg_decode_init+0x4b4>)
            gMaxMCUXSize = 16;
   30f16:	4b67      	ldr	r3, [pc, #412]	@ (310b4 <pjpeg_decode_init+0x4b8>)
    gMaxMCUSPerRow = (gImageXSize + (gMaxMCUXSize - 1)) >> ((gMaxMCUXSize == 8) ? 3 : 4);
   30f18:	8810      	ldrh	r0, [r2, #0]
            gMaxMCUXSize = 16;
   30f1a:	9301      	str	r3, [sp, #4]
   30f1c:	2110      	movs	r1, #16
   30f1e:	7019      	strb	r1, [r3, #0]
    gMaxMCUSPerRow = (gImageXSize + (gMaxMCUXSize - 1)) >> ((gMaxMCUXSize == 8) ? 3 : 4);
   30f20:	300f      	adds	r0, #15
   30f22:	2104      	movs	r1, #4
    gMaxMCUSPerCol = (gImageYSize + (gMaxMCUYSize - 1)) >> ((gMaxMCUYSize == 8) ? 3 : 4);
   30f24:	4b64      	ldr	r3, [pc, #400]	@ (310b8 <pjpeg_decode_init+0x4bc>)
    gMaxMCUSPerRow = (gImageXSize + (gMaxMCUXSize - 1)) >> ((gMaxMCUXSize == 8) ? 3 : 4);
   30f26:	fa40 f101 	asr.w	r1, r0, r1
    gMaxMCUSPerCol = (gImageYSize + (gMaxMCUYSize - 1)) >> ((gMaxMCUYSize == 8) ? 3 : 4);
   30f2a:	2c08      	cmp	r4, #8
    gMaxMCUSPerRow = (gImageXSize + (gMaxMCUXSize - 1)) >> ((gMaxMCUXSize == 8) ? 3 : 4);
   30f2c:	b28c      	uxth	r4, r1
    gMaxMCUSPerCol = (gImageYSize + (gMaxMCUYSize - 1)) >> ((gMaxMCUYSize == 8) ? 3 : 4);
   30f2e:	8819      	ldrh	r1, [r3, #0]
    gMaxMCUSPerRow = (gImageXSize + (gMaxMCUXSize - 1)) >> ((gMaxMCUXSize == 8) ? 3 : 4);
   30f30:	4b62      	ldr	r3, [pc, #392]	@ (310bc <pjpeg_decode_init+0x4c0>)
    gMaxMCUSPerCol = (gImageYSize + (gMaxMCUYSize - 1)) >> ((gMaxMCUYSize == 8) ? 3 : 4);
   30f32:	4429      	add	r1, r5
   30f34:	bf14      	ite	ne
   30f36:	2504      	movne	r5, #4
   30f38:	2503      	moveq	r5, #3
   30f3a:	4129      	asrs	r1, r5
    gNumMCUSRemainingX = gMaxMCUSPerRow;
   30f3c:	4d60      	ldr	r5, [pc, #384]	@ (310c0 <pjpeg_decode_init+0x4c4>)
    gMaxMCUSPerRow = (gImageXSize + (gMaxMCUXSize - 1)) >> ((gMaxMCUXSize == 8) ? 3 : 4);
   30f3e:	801c      	strh	r4, [r3, #0]
    gNumMCUSRemainingX = gMaxMCUSPerRow;
   30f40:	802c      	strh	r4, [r5, #0]
    gMaxMCUSPerCol = (gImageYSize + (gMaxMCUYSize - 1)) >> ((gMaxMCUYSize == 8) ? 3 : 4);
   30f42:	4b60      	ldr	r3, [pc, #384]	@ (310c4 <pjpeg_decode_init+0x4c8>)
    gNumMCUSRemainingY = gMaxMCUSPerCol;
   30f44:	4c60      	ldr	r4, [pc, #384]	@ (310c8 <pjpeg_decode_init+0x4cc>)
    gMaxMCUSPerCol = (gImageYSize + (gMaxMCUYSize - 1)) >> ((gMaxMCUYSize == 8) ? 3 : 4);
   30f46:	b289      	uxth	r1, r1
    status = processMarkers(&c);
   30f48:	f10d 0017 	add.w	r0, sp, #23
    gMaxMCUSPerCol = (gImageYSize + (gMaxMCUYSize - 1)) >> ((gMaxMCUYSize == 8) ? 3 : 4);
   30f4c:	8019      	strh	r1, [r3, #0]
    gNumMCUSRemainingY = gMaxMCUSPerCol;
   30f4e:	8021      	strh	r1, [r4, #0]
    status = processMarkers(&c);
   30f50:	f7fd fd9c 	bl	2ea8c <processMarkers>
    if (status)
   30f54:	4605      	mov	r5, r0
   30f56:	2800      	cmp	r0, #0
   30f58:	f47f aed5 	bne.w	30d06 <pjpeg_decode_init+0x10a>
    if (c == M_EOI) {
   30f5c:	f89d 1017 	ldrb.w	r1, [sp, #23]
   30f60:	29da      	cmp	r1, #218	@ 0xda
   30f62:	d164      	bne.n	3102e <pjpeg_decode_init+0x432>
static PJPG_INLINE uint16 getBits1(uint8 numBits) { return getBits(numBits, 0); }
   30f64:	f7fd fc08 	bl	2e778 <getBits.constprop.1>
   30f68:	4604      	mov	r4, r0
   30f6a:	4628      	mov	r0, r5
   30f6c:	f7fe fc2a 	bl	2f7c4 <getBits.constprop.0>
    left -= 3;
   30f70:	3c03      	subs	r4, #3
    gCompsInScan = (uint8)getBits1(8);
   30f72:	b2c1      	uxtb	r1, r0
    if ((left != (gCompsInScan + gCompsInScan + 3)) || (gCompsInScan < 1) ||
   30f74:	2003      	movs	r0, #3
    gCompsInScan = (uint8)getBits1(8);
   30f76:	4a55      	ldr	r2, [pc, #340]	@ (310cc <pjpeg_decode_init+0x4d0>)
    left -= 3;
   30f78:	b2a3      	uxth	r3, r4
    if ((left != (gCompsInScan + gCompsInScan + 3)) || (gCompsInScan < 1) ||
   30f7a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   30f7e:	4283      	cmp	r3, r0
    gCompsInScan = (uint8)getBits1(8);
   30f80:	7011      	strb	r1, [r2, #0]
    if ((left != (gCompsInScan + gCompsInScan + 3)) || (gCompsInScan < 1) ||
   30f82:	d171      	bne.n	31068 <pjpeg_decode_init+0x46c>
   30f84:	3901      	subs	r1, #1
   30f86:	2902      	cmp	r1, #2
   30f88:	d86e      	bhi.n	31068 <pjpeg_decode_init+0x46c>
   30f8a:	f8df 914c 	ldr.w	r9, [pc, #332]	@ 310d8 <pjpeg_decode_init+0x4dc>
   30f8e:	9603      	str	r6, [sp, #12]
   30f90:	464e      	mov	r6, r9
   30f92:	4699      	mov	r9, r3
static PJPG_INLINE uint16 getBits1(uint8 numBits) { return getBits(numBits, 0); }
   30f94:	2000      	movs	r0, #0
   30f96:	f7fe fc15 	bl	2f7c4 <getBits.constprop.0>
        uint8 cc = (uint8)getBits1(8);
   30f9a:	b2c4      	uxtb	r4, r0
static PJPG_INLINE uint16 getBits1(uint8 numBits) { return getBits(numBits, 0); }
   30f9c:	2000      	movs	r0, #0
   30f9e:	f7fe fc11 	bl	2f7c4 <getBits.constprop.0>
        for (ci = 0; ci < gCompsInFrame; ci++)
   30fa2:	f898 2000 	ldrb.w	r2, [r8]
        left -= 2;
   30fa6:	f1a9 0c02 	sub.w	ip, r9, #2
        uint8 c = (uint8)getBits1(8);
   30faa:	b2c1      	uxtb	r1, r0
        left -= 2;
   30fac:	4648      	mov	r0, r9
   30fae:	fa1f f98c 	uxth.w	r9, ip
        for (ci = 0; ci < gCompsInFrame; ci++)
   30fb2:	b192      	cbz	r2, 30fda <pjpeg_decode_init+0x3de>
            if (cc == gCompIdent[ci])
   30fb4:	4b46      	ldr	r3, [pc, #280]	@ (310d0 <pjpeg_decode_init+0x4d4>)
   30fb6:	f893 c000 	ldrb.w	ip, [r3]
   30fba:	45a4      	cmp	ip, r4
   30fbc:	f000 817c 	beq.w	312b8 <pjpeg_decode_init+0x6bc>
        for (ci = 0; ci < gCompsInFrame; ci++)
   30fc0:	2a01      	cmp	r2, #1
   30fc2:	d00a      	beq.n	30fda <pjpeg_decode_init+0x3de>
            if (cc == gCompIdent[ci])
   30fc4:	f893 c001 	ldrb.w	ip, [r3, #1]
   30fc8:	45a4      	cmp	ip, r4
   30fca:	f000 8087 	beq.w	310dc <pjpeg_decode_init+0x4e0>
        for (ci = 0; ci < gCompsInFrame; ci++)
   30fce:	2a02      	cmp	r2, #2
   30fd0:	d003      	beq.n	30fda <pjpeg_decode_init+0x3de>
            if (cc == gCompIdent[ci])
   30fd2:	789a      	ldrb	r2, [r3, #2]
   30fd4:	42a2      	cmp	r2, r4
   30fd6:	f000 81b9 	beq.w	3134c <pjpeg_decode_init+0x750>
        return status;
   30fda:	250f      	movs	r5, #15
   30fdc:	e693      	b.n	30d06 <pjpeg_decode_init+0x10a>
        return gCallbackStatus ? gCallbackStatus : status;
   30fde:	251b      	movs	r5, #27
   30fe0:	e64b      	b.n	30c7a <pjpeg_decode_init+0x7e>
        if ((gCompHSamp[0] != 1) || (gCompVSamp[0] != 1))
   30fe2:	7809      	ldrb	r1, [r1, #0]
   30fe4:	2901      	cmp	r1, #1
   30fe6:	d1fa      	bne.n	30fde <pjpeg_decode_init+0x3e2>
   30fe8:	4b2c      	ldr	r3, [pc, #176]	@ (3109c <pjpeg_decode_init+0x4a0>)
   30fea:	7819      	ldrb	r1, [r3, #0]
   30fec:	2901      	cmp	r1, #1
   30fee:	d1f6      	bne.n	30fde <pjpeg_decode_init+0x3e2>
        gMaxBlocksPerMCU = 1;
   30ff0:	482c      	ldr	r0, [pc, #176]	@ (310a4 <pjpeg_decode_init+0x4a8>)
        gScanType = PJPG_GRAYSCALE;
   30ff2:	4b2b      	ldr	r3, [pc, #172]	@ (310a0 <pjpeg_decode_init+0x4a4>)
        gMaxBlocksPerMCU = 1;
   30ff4:	7001      	strb	r1, [r0, #0]
        gMCUOrg[0] = 0;
   30ff6:	492c      	ldr	r1, [pc, #176]	@ (310a8 <pjpeg_decode_init+0x4ac>)
        gScanType = PJPG_GRAYSCALE;
   30ff8:	9300      	str	r3, [sp, #0]
   30ffa:	701d      	strb	r5, [r3, #0]
        gMCUOrg[0] = 0;
   30ffc:	700d      	strb	r5, [r1, #0]
            gMaxMCUYSize = 16;
   30ffe:	2507      	movs	r5, #7
   31000:	2408      	movs	r4, #8
   31002:	4a2a      	ldr	r2, [pc, #168]	@ (310ac <pjpeg_decode_init+0x4b0>)
   31004:	9202      	str	r2, [sp, #8]
   31006:	7014      	strb	r4, [r2, #0]
    gMaxMCUSPerRow = (gImageXSize + (gMaxMCUXSize - 1)) >> ((gMaxMCUXSize == 8) ? 3 : 4);
   31008:	4a29      	ldr	r2, [pc, #164]	@ (310b0 <pjpeg_decode_init+0x4b4>)
            gMaxMCUXSize = 8;
   3100a:	4b2a      	ldr	r3, [pc, #168]	@ (310b4 <pjpeg_decode_init+0x4b8>)
    gMaxMCUSPerRow = (gImageXSize + (gMaxMCUXSize - 1)) >> ((gMaxMCUXSize == 8) ? 3 : 4);
   3100c:	8810      	ldrh	r0, [r2, #0]
            gMaxMCUXSize = 8;
   3100e:	9301      	str	r3, [sp, #4]
   31010:	2108      	movs	r1, #8
   31012:	7019      	strb	r1, [r3, #0]
    gMaxMCUSPerRow = (gImageXSize + (gMaxMCUXSize - 1)) >> ((gMaxMCUXSize == 8) ? 3 : 4);
   31014:	3007      	adds	r0, #7
   31016:	2103      	movs	r1, #3
   31018:	e784      	b.n	30f24 <pjpeg_decode_init+0x328>
        return PJPG_NO_ARITHMITIC_SUPPORT;
   3101a:	2511      	movs	r5, #17
   3101c:	e673      	b.n	30d06 <pjpeg_decode_init+0x10a>
        return PJPG_UNSUPPORTED_MODE;
   3101e:	2525      	movs	r5, #37	@ 0x25
   31020:	e671      	b.n	30d06 <pjpeg_decode_init+0x10a>
    if ((status) || (gCallbackStatus))
   31022:	783d      	ldrb	r5, [r7, #0]
   31024:	2d00      	cmp	r5, #0
   31026:	f47f ae28 	bne.w	30c7a <pjpeg_decode_init+0x7e>
        return gCallbackStatus ? gCallbackStatus : status;
   3102a:	251a      	movs	r5, #26
   3102c:	e625      	b.n	30c7a <pjpeg_decode_init+0x7e>
    if ((status) || (gCallbackStatus))
   3102e:	2512      	movs	r5, #18
   31030:	e669      	b.n	30d06 <pjpeg_decode_init+0x10a>
        return PJPG_BAD_PRECISION;
   31032:	2507      	movs	r5, #7
   31034:	e667      	b.n	30d06 <pjpeg_decode_init+0x10a>
        gBitBuf <<= gBitsLeft;
   31036:	fa03 f000 	lsl.w	r0, r3, r0
   3103a:	9301      	str	r3, [sp, #4]
   3103c:	f8ab 0000 	strh.w	r0, [fp]
    uint8 c = getChar();
   31040:	f7fd fb60 	bl	2e704 <getChar>
   31044:	4602      	mov	r2, r0
        gBitBuf |= getOctet(FFCheck);
   31046:	f8bb 0000 	ldrh.w	r0, [fp]
   3104a:	9b01      	ldr	r3, [sp, #4]
   3104c:	4302      	orrs	r2, r0
        gBitBuf <<= (numBits - gBitsLeft);
   3104e:	f89a 0000 	ldrb.w	r0, [sl]
   31052:	b292      	uxth	r2, r2
   31054:	f1c0 0c04 	rsb	ip, r0, #4
   31058:	fa02 f20c 	lsl.w	r2, r2, ip
        gBitsLeft = 8 - (numBits - gBitsLeft);
   3105c:	3004      	adds	r0, #4
        gBitBuf <<= (numBits - gBitsLeft);
   3105e:	f8ab 2000 	strh.w	r2, [fp]
        gBitsLeft = 8 - (numBits - gBitsLeft);
   31062:	f88a 0000 	strb.w	r0, [sl]
   31066:	e6b1      	b.n	30dcc <pjpeg_decode_init+0x1d0>
        return status;
   31068:	250e      	movs	r5, #14
   3106a:	e64c      	b.n	30d06 <pjpeg_decode_init+0x10a>
        return PJPG_BAD_HEIGHT;
   3106c:	4625      	mov	r5, r4
   3106e:	e64a      	b.n	30d06 <pjpeg_decode_init+0x10a>
        if ((gCompHSamp[0] == 1) && (gCompVSamp[0] == 1)) {
   31070:	7819      	ldrb	r1, [r3, #0]
   31072:	2901      	cmp	r1, #1
   31074:	f000 814f 	beq.w	31316 <pjpeg_decode_init+0x71a>
        } else if ((gCompHSamp[0] == 1) && (gCompVSamp[0] == 2)) {
   31078:	2902      	cmp	r1, #2
   3107a:	d1b0      	bne.n	30fde <pjpeg_decode_init+0x3e2>
            gMCUOrg[0] = 0;
   3107c:	480a      	ldr	r0, [pc, #40]	@ (310a8 <pjpeg_decode_init+0x4ac>)
            gScanType = PJPG_YH1V2;
   3107e:	4b08      	ldr	r3, [pc, #32]	@ (310a0 <pjpeg_decode_init+0x4a4>)
            gMCUOrg[0] = 0;
   31080:	4c14      	ldr	r4, [pc, #80]	@ (310d4 <pjpeg_decode_init+0x4d8>)
   31082:	6004      	str	r4, [r0, #0]
            gMaxBlocksPerMCU = 4;
   31084:	4907      	ldr	r1, [pc, #28]	@ (310a4 <pjpeg_decode_init+0x4a8>)
            gScanType = PJPG_YH1V2;
   31086:	9300      	str	r3, [sp, #0]
   31088:	2003      	movs	r0, #3
   3108a:	7018      	strb	r0, [r3, #0]
            gMaxBlocksPerMCU = 4;
   3108c:	2004      	movs	r0, #4
   3108e:	7008      	strb	r0, [r1, #0]
            gMaxMCUYSize = 16;
   31090:	250f      	movs	r5, #15
   31092:	2410      	movs	r4, #16
   31094:	e7b5      	b.n	31002 <pjpeg_decode_init+0x406>
        return PJPG_BAD_WIDTH;
   31096:	2509      	movs	r5, #9
   31098:	e635      	b.n	30d06 <pjpeg_decode_init+0x10a>
   3109a:	bf00      	nop
   3109c:	10050944 	.word	0x10050944
   310a0:	10050929 	.word	0x10050929
   310a4:	10050928 	.word	0x10050928
   310a8:	10050918 	.word	0x10050918
   310ac:	10050926 	.word	0x10050926
   310b0:	10050952 	.word	0x10050952
   310b4:	10050927 	.word	0x10050927
   310b8:	10050950 	.word	0x10050950
   310bc:	10050924 	.word	0x10050924
   310c0:	10050920 	.word	0x10050920
   310c4:	10050922 	.word	0x10050922
   310c8:	1005091e 	.word	0x1005091e
   310cc:	10050937 	.word	0x10050937
   310d0:	1005094c 	.word	0x1005094c
   310d4:	02010000 	.word	0x02010000
   310d8:	10050934 	.word	0x10050934
            if (cc == gCompIdent[ci])
   310dc:	2201      	movs	r2, #1
        for (ci = 0; ci < gCompsInFrame; ci++)
   310de:	4614      	mov	r4, r2
    for (i = 0; i < gCompsInScan; i++) {
   310e0:	4b9d      	ldr	r3, [pc, #628]	@ (31358 <pjpeg_decode_init+0x75c>)
        gCompList[i] = ci;
   310e2:	f806 4b01 	strb.w	r4, [r6], #1
    for (i = 0; i < gCompsInScan; i++) {
   310e6:	781c      	ldrb	r4, [r3, #0]
        gCompDCTab[ci] = (c >> 4) & 15;
   310e8:	4b9c      	ldr	r3, [pc, #624]	@ (3135c <pjpeg_decode_init+0x760>)
   310ea:	ea4f 1c11 	mov.w	ip, r1, lsr #4
    for (i = 0; i < gCompsInScan; i++) {
   310ee:	3501      	adds	r5, #1
        gCompDCTab[ci] = (c >> 4) & 15;
   310f0:	f803 c002 	strb.w	ip, [r3, r2]
    for (i = 0; i < gCompsInScan; i++) {
   310f4:	b2ed      	uxtb	r5, r5
        gCompACTab[ci] = (c & 15);
   310f6:	4b9a      	ldr	r3, [pc, #616]	@ (31360 <pjpeg_decode_init+0x764>)
   310f8:	f001 010f 	and.w	r1, r1, #15
    for (i = 0; i < gCompsInScan; i++) {
   310fc:	42ac      	cmp	r4, r5
        gCompACTab[ci] = (c & 15);
   310fe:	5499      	strb	r1, [r3, r2]
    for (i = 0; i < gCompsInScan; i++) {
   31100:	f63f af48 	bhi.w	30f94 <pjpeg_decode_init+0x398>
static PJPG_INLINE uint16 getBits1(uint8 numBits) { return getBits(numBits, 0); }
   31104:	4605      	mov	r5, r0
   31106:	2000      	movs	r0, #0
   31108:	9e03      	ldr	r6, [sp, #12]
   3110a:	f7fe fb5b 	bl	2f7c4 <getBits.constprop.0>
   3110e:	2000      	movs	r0, #0
   31110:	f7fe fb58 	bl	2f7c4 <getBits.constprop.0>
    if (gBitsLeft < numBits) {
   31114:	f89a 0000 	ldrb.w	r0, [sl]
    uint16 ret = gBitBuf;
   31118:	f8bb 1000 	ldrh.w	r1, [fp]
    if (gBitsLeft < numBits) {
   3111c:	2803      	cmp	r0, #3
   3111e:	f240 80e5 	bls.w	312ec <pjpeg_decode_init+0x6f0>
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   31122:	3804      	subs	r0, #4
        gBitBuf <<= numBits;
   31124:	0109      	lsls	r1, r1, #4
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   31126:	b2c0      	uxtb	r0, r0
        gBitBuf <<= numBits;
   31128:	b289      	uxth	r1, r1
    if (gBitsLeft < numBits) {
   3112a:	2803      	cmp	r0, #3
        gBitsLeft = 8 - (numBits - gBitsLeft);
   3112c:	f88a 0000 	strb.w	r0, [sl]
    if (gBitsLeft < numBits) {
   31130:	f240 80c7 	bls.w	312c2 <pjpeg_decode_init+0x6c6>
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   31134:	3804      	subs	r0, #4
        gBitBuf <<= numBits;
   31136:	0109      	lsls	r1, r1, #4
        gBitsLeft = (uint8)(gBitsLeft - numBits);
   31138:	f88a 0000 	strb.w	r0, [sl]
        gBitBuf <<= numBits;
   3113c:	f8ab 1000 	strh.w	r1, [fp]
    left -= 3;
   31140:	1f6c      	subs	r4, r5, #5
   31142:	b2a4      	uxth	r4, r4
    while (left) {
   31144:	b134      	cbz	r4, 31154 <pjpeg_decode_init+0x558>
        left--;
   31146:	3c01      	subs	r4, #1
static PJPG_INLINE uint16 getBits1(uint8 numBits) { return getBits(numBits, 0); }
   31148:	2000      	movs	r0, #0
        left--;
   3114a:	b2a4      	uxth	r4, r4
static PJPG_INLINE uint16 getBits1(uint8 numBits) { return getBits(numBits, 0); }
   3114c:	f7fe fb3a 	bl	2f7c4 <getBits.constprop.0>
    while (left) {
   31150:	2c00      	cmp	r4, #0
   31152:	d1f8      	bne.n	31146 <pjpeg_decode_init+0x54a>
    for (i = 0; i < gCompsInScan; i++) {
   31154:	4b80      	ldr	r3, [pc, #512]	@ (31358 <pjpeg_decode_init+0x75c>)
   31156:	781c      	ldrb	r4, [r3, #0]
   31158:	2c00      	cmp	r4, #0
   3115a:	d059      	beq.n	31210 <pjpeg_decode_init+0x614>
        if (((gValidHuffTables & (1 << compDCTab)) == 0) ||
   3115c:	4b81      	ldr	r3, [pc, #516]	@ (31364 <pjpeg_decode_init+0x768>)
        uint8 compACTab = gCompACTab[gCompList[i]] + 2;
   3115e:	4a80      	ldr	r2, [pc, #512]	@ (31360 <pjpeg_decode_init+0x764>)
        if (((gValidHuffTables & (1 << compDCTab)) == 0) ||
   31160:	f893 c000 	ldrb.w	ip, [r3]
        uint8 compDCTab = gCompDCTab[gCompList[i]];
   31164:	4b80      	ldr	r3, [pc, #512]	@ (31368 <pjpeg_decode_init+0x76c>)
        if (((gValidHuffTables & (1 << compDCTab)) == 0) ||
   31166:	4d7d      	ldr	r5, [pc, #500]	@ (3135c <pjpeg_decode_init+0x760>)
        uint8 compDCTab = gCompDCTab[gCompList[i]];
   31168:	f893 e000 	ldrb.w	lr, [r3]
        uint8 compACTab = gCompACTab[gCompList[i]] + 2;
   3116c:	f812 100e 	ldrb.w	r1, [r2, lr]
        if (((gValidHuffTables & (1 << compDCTab)) == 0) ||
   31170:	f815 500e 	ldrb.w	r5, [r5, lr]
        uint8 compACTab = gCompACTab[gCompList[i]] + 2;
   31174:	3102      	adds	r1, #2
   31176:	2001      	movs	r0, #1
            ((gValidHuffTables & (1 << compACTab)) == 0))
   31178:	b2c9      	uxtb	r1, r1
   3117a:	fa00 f101 	lsl.w	r1, r0, r1
   3117e:	fa00 f505 	lsl.w	r5, r0, r5
   31182:	4329      	orrs	r1, r5
        if (((gValidHuffTables & (1 << compDCTab)) == 0) ||
   31184:	ea31 010c 	bics.w	r1, r1, ip
   31188:	f040 80d2 	bne.w	31330 <pjpeg_decode_init+0x734>
    for (i = 0; i < gCompsInScan; i++) {
   3118c:	4284      	cmp	r4, r0
   3118e:	d01f      	beq.n	311d0 <pjpeg_decode_init+0x5d4>
        uint8 compDCTab = gCompDCTab[gCompList[i]];
   31190:	785d      	ldrb	r5, [r3, #1]
        if (((gValidHuffTables & (1 << compDCTab)) == 0) ||
   31192:	4b72      	ldr	r3, [pc, #456]	@ (3135c <pjpeg_decode_init+0x760>)
        uint8 compACTab = gCompACTab[gCompList[i]] + 2;
   31194:	5d51      	ldrb	r1, [r2, r5]
        if (((gValidHuffTables & (1 << compDCTab)) == 0) ||
   31196:	5d5d      	ldrb	r5, [r3, r5]
        uint8 compACTab = gCompACTab[gCompList[i]] + 2;
   31198:	3102      	adds	r1, #2
            ((gValidHuffTables & (1 << compACTab)) == 0))
   3119a:	b2c9      	uxtb	r1, r1
   3119c:	fa00 f101 	lsl.w	r1, r0, r1
   311a0:	fa00 f505 	lsl.w	r5, r0, r5
   311a4:	4329      	orrs	r1, r5
        if (((gValidHuffTables & (1 << compDCTab)) == 0) ||
   311a6:	ea31 010c 	bics.w	r1, r1, ip
   311aa:	f040 80c1 	bne.w	31330 <pjpeg_decode_init+0x734>
    for (i = 0; i < gCompsInScan; i++) {
   311ae:	2c02      	cmp	r4, #2
   311b0:	d00e      	beq.n	311d0 <pjpeg_decode_init+0x5d4>
        uint8 compDCTab = gCompDCTab[gCompList[i]];
   311b2:	4b6d      	ldr	r3, [pc, #436]	@ (31368 <pjpeg_decode_init+0x76c>)
   311b4:	789d      	ldrb	r5, [r3, #2]
        if (((gValidHuffTables & (1 << compDCTab)) == 0) ||
   311b6:	4b69      	ldr	r3, [pc, #420]	@ (3135c <pjpeg_decode_init+0x760>)
        uint8 compACTab = gCompACTab[gCompList[i]] + 2;
   311b8:	5d51      	ldrb	r1, [r2, r5]
        if (((gValidHuffTables & (1 << compDCTab)) == 0) ||
   311ba:	5d5d      	ldrb	r5, [r3, r5]
        uint8 compACTab = gCompACTab[gCompList[i]] + 2;
   311bc:	3102      	adds	r1, #2
            ((gValidHuffTables & (1 << compACTab)) == 0))
   311be:	b2c9      	uxtb	r1, r1
   311c0:	fa00 f101 	lsl.w	r1, r0, r1
   311c4:	40a8      	lsls	r0, r5
   311c6:	4301      	orrs	r1, r0
        if (((gValidHuffTables & (1 << compDCTab)) == 0) ||
   311c8:	ea31 010c 	bics.w	r1, r1, ip
   311cc:	f040 80b0 	bne.w	31330 <pjpeg_decode_init+0x734>
        uint8 compQuantMask = gCompQuant[gCompList[i]] ? 2 : 1;
   311d0:	4b66      	ldr	r3, [pc, #408]	@ (3136c <pjpeg_decode_init+0x770>)
        if ((gValidQuantTables & compQuantMask) == 0)
   311d2:	4a67      	ldr	r2, [pc, #412]	@ (31370 <pjpeg_decode_init+0x774>)
        uint8 compQuantMask = gCompQuant[gCompList[i]] ? 2 : 1;
   311d4:	f813 100e 	ldrb.w	r1, [r3, lr]
   311d8:	2900      	cmp	r1, #0
        if ((gValidQuantTables & compQuantMask) == 0)
   311da:	7811      	ldrb	r1, [r2, #0]
        uint8 compQuantMask = gCompQuant[gCompList[i]] ? 2 : 1;
   311dc:	bf0c      	ite	eq
   311de:	2001      	moveq	r0, #1
   311e0:	2002      	movne	r0, #2
        if ((gValidQuantTables & compQuantMask) == 0)
   311e2:	4201      	tst	r1, r0
   311e4:	d066      	beq.n	312b4 <pjpeg_decode_init+0x6b8>
    for (i = 0; i < gCompsInScan; i++) {
   311e6:	2c01      	cmp	r4, #1
   311e8:	d012      	beq.n	31210 <pjpeg_decode_init+0x614>
        uint8 compQuantMask = gCompQuant[gCompList[i]] ? 2 : 1;
   311ea:	4a5f      	ldr	r2, [pc, #380]	@ (31368 <pjpeg_decode_init+0x76c>)
   311ec:	7850      	ldrb	r0, [r2, #1]
   311ee:	5c18      	ldrb	r0, [r3, r0]
   311f0:	2800      	cmp	r0, #0
   311f2:	bf0c      	ite	eq
   311f4:	2001      	moveq	r0, #1
   311f6:	2002      	movne	r0, #2
        if ((gValidQuantTables & compQuantMask) == 0)
   311f8:	4201      	tst	r1, r0
   311fa:	d05b      	beq.n	312b4 <pjpeg_decode_init+0x6b8>
    for (i = 0; i < gCompsInScan; i++) {
   311fc:	2c02      	cmp	r4, #2
   311fe:	d007      	beq.n	31210 <pjpeg_decode_init+0x614>
        uint8 compQuantMask = gCompQuant[gCompList[i]] ? 2 : 1;
   31200:	7890      	ldrb	r0, [r2, #2]
   31202:	5c18      	ldrb	r0, [r3, r0]
   31204:	2800      	cmp	r0, #0
   31206:	bf0c      	ite	eq
   31208:	2001      	moveq	r0, #1
   3120a:	2002      	movne	r0, #2
        if ((gValidQuantTables & compQuantMask) == 0)
   3120c:	4201      	tst	r1, r0
   3120e:	d051      	beq.n	312b4 <pjpeg_decode_init+0x6b8>
    if (gRestartInterval) {
   31210:	4b58      	ldr	r3, [pc, #352]	@ (31374 <pjpeg_decode_init+0x778>)
    gLastDC[0] = 0;
   31212:	4c59      	ldr	r4, [pc, #356]	@ (31378 <pjpeg_decode_init+0x77c>)
    if (gRestartInterval) {
   31214:	8818      	ldrh	r0, [r3, #0]
    gLastDC[0] = 0;
   31216:	2100      	movs	r1, #0
   31218:	6021      	str	r1, [r4, #0]
    gLastDC[2] = 0;
   3121a:	80a1      	strh	r1, [r4, #4]
    if (gRestartInterval) {
   3121c:	b118      	cbz	r0, 31226 <pjpeg_decode_init+0x62a>
        gRestartsLeft = gRestartInterval;
   3121e:	4c57      	ldr	r4, [pc, #348]	@ (3137c <pjpeg_decode_init+0x780>)
   31220:	8020      	strh	r0, [r4, #0]
        gNextRestartNum = 0;
   31222:	4857      	ldr	r0, [pc, #348]	@ (31380 <pjpeg_decode_init+0x784>)
   31224:	8001      	strh	r1, [r0, #0]
    gInBufOfs--;
   31226:	4b57      	ldr	r3, [pc, #348]	@ (31384 <pjpeg_decode_init+0x788>)
    if (gBitsLeft > 0)
   31228:	f89a 2000 	ldrb.w	r2, [sl]
    gInBufOfs--;
   3122c:	781d      	ldrb	r5, [r3, #0]
    gInBufLeft++;
   3122e:	4b56      	ldr	r3, [pc, #344]	@ (31388 <pjpeg_decode_init+0x78c>)
        stuffChar((uint8)gBitBuf);
   31230:	f8bb 1000 	ldrh.w	r1, [fp]
    gInBufLeft++;
   31234:	7818      	ldrb	r0, [r3, #0]
    if (gBitsLeft > 0)
   31236:	2a00      	cmp	r2, #0
   31238:	d135      	bne.n	312a6 <pjpeg_decode_init+0x6aa>
   3123a:	4c54      	ldr	r4, [pc, #336]	@ (3138c <pjpeg_decode_init+0x790>)
    gInBufOfs--;
   3123c:	4b51      	ldr	r3, [pc, #324]	@ (31384 <pjpeg_decode_init+0x788>)
   3123e:	1e6a      	subs	r2, r5, #1
   31240:	b2d2      	uxtb	r2, r2
   31242:	701a      	strb	r2, [r3, #0]
    stuffChar((uint8)(gBitBuf >> 8));
   31244:	0a09      	lsrs	r1, r1, #8
    gInBufLeft++;
   31246:	4b50      	ldr	r3, [pc, #320]	@ (31388 <pjpeg_decode_init+0x78c>)
    stuffChar((uint8)(gBitBuf >> 8));
   31248:	54a1      	strb	r1, [r4, r2]
    gInBufLeft++;
   3124a:	1c42      	adds	r2, r0, #1
   3124c:	701a      	strb	r2, [r3, #0]
static PJPG_INLINE uint16 getBits2(uint8 numBits) { return getBits(numBits, 1); }
   3124e:	2001      	movs	r0, #1
    gBitsLeft = 8;
   31250:	2208      	movs	r2, #8
   31252:	f88a 2000 	strb.w	r2, [sl]
static PJPG_INLINE uint16 getBits2(uint8 numBits) { return getBits(numBits, 1); }
   31256:	f7fe fab5 	bl	2f7c4 <getBits.constprop.0>
   3125a:	2001      	movs	r0, #1
   3125c:	f7fe fab2 	bl	2f7c4 <getBits.constprop.0>
    if ((status) || (gCallbackStatus))
   31260:	783d      	ldrb	r5, [r7, #0]
   31262:	2d00      	cmp	r5, #0
   31264:	f47f ad09 	bne.w	30c7a <pjpeg_decode_init+0x7e>
    pInfo->m_width = gImageXSize;
   31268:	4b49      	ldr	r3, [pc, #292]	@ (31390 <pjpeg_decode_init+0x794>)
   3126a:	881b      	ldrh	r3, [r3, #0]
   3126c:	6033      	str	r3, [r6, #0]
    pInfo->m_height = gImageYSize;
   3126e:	4b49      	ldr	r3, [pc, #292]	@ (31394 <pjpeg_decode_init+0x798>)
   31270:	881b      	ldrh	r3, [r3, #0]
   31272:	6073      	str	r3, [r6, #4]
    pInfo->m_comps = gCompsInFrame;
   31274:	f898 3000 	ldrb.w	r3, [r8]
   31278:	60b3      	str	r3, [r6, #8]
    pInfo->m_scanType = gScanType;
   3127a:	9b00      	ldr	r3, [sp, #0]
   3127c:	781b      	ldrb	r3, [r3, #0]
   3127e:	7533      	strb	r3, [r6, #20]
    pInfo->m_MCUSPerRow = gMaxMCUSPerRow;
   31280:	4b45      	ldr	r3, [pc, #276]	@ (31398 <pjpeg_decode_init+0x79c>)
   31282:	881b      	ldrh	r3, [r3, #0]
   31284:	60f3      	str	r3, [r6, #12]
    pInfo->m_MCUSPerCol = gMaxMCUSPerCol;
   31286:	4b45      	ldr	r3, [pc, #276]	@ (3139c <pjpeg_decode_init+0x7a0>)
   31288:	8819      	ldrh	r1, [r3, #0]
    pInfo->m_MCUWidth = gMaxMCUXSize;
   3128a:	9b01      	ldr	r3, [sp, #4]
    pInfo->m_MCUSPerCol = gMaxMCUSPerCol;
   3128c:	6131      	str	r1, [r6, #16]
    pInfo->m_MCUWidth = gMaxMCUXSize;
   3128e:	781a      	ldrb	r2, [r3, #0]
    pInfo->m_MCUHeight = gMaxMCUYSize;
   31290:	9b02      	ldr	r3, [sp, #8]
    pInfo->m_pMCUBufR = gMCUBufR;
   31292:	4943      	ldr	r1, [pc, #268]	@ (313a0 <pjpeg_decode_init+0x7a4>)
    pInfo->m_MCUHeight = gMaxMCUYSize;
   31294:	781b      	ldrb	r3, [r3, #0]
   31296:	e9c6 2306 	strd	r2, r3, [r6, #24]
    pInfo->m_pMCUBufG = gMCUBufG;
   3129a:	4a42      	ldr	r2, [pc, #264]	@ (313a4 <pjpeg_decode_init+0x7a8>)
    pInfo->m_pMCUBufB = gMCUBufB;
   3129c:	4b42      	ldr	r3, [pc, #264]	@ (313a8 <pjpeg_decode_init+0x7ac>)
   3129e:	62b3      	str	r3, [r6, #40]	@ 0x28
    pInfo->m_pMCUBufG = gMCUBufG;
   312a0:	e9c6 1208 	strd	r1, r2, [r6, #32]
    return 0;
   312a4:	e4e9      	b.n	30c7a <pjpeg_decode_init+0x7e>
    gInBufOfs--;
   312a6:	1e6a      	subs	r2, r5, #1
   312a8:	b2d5      	uxtb	r5, r2
    gInBuf[gInBufOfs] = i;
   312aa:	4c38      	ldr	r4, [pc, #224]	@ (3138c <pjpeg_decode_init+0x790>)
    gInBufLeft++;
   312ac:	1c42      	adds	r2, r0, #1
        stuffChar((uint8)gBitBuf);
   312ae:	5561      	strb	r1, [r4, r5]
    gInBufLeft++;
   312b0:	b2d0      	uxtb	r0, r2
}
   312b2:	e7c3      	b.n	3123c <pjpeg_decode_init+0x640>
        return status;
   312b4:	2517      	movs	r5, #23
   312b6:	e526      	b.n	30d06 <pjpeg_decode_init+0x10a>
        for (ci = 0; ci < gCompsInFrame; ci++)
   312b8:	2400      	movs	r4, #0
            if (cc == gCompIdent[ci])
   312ba:	4622      	mov	r2, r4
   312bc:	e710      	b.n	310e0 <pjpeg_decode_init+0x4e4>
        return PJPG_BAD_SOF_LENGTH;
   312be:	250b      	movs	r5, #11
   312c0:	e521      	b.n	30d06 <pjpeg_decode_init+0x10a>
        gBitBuf <<= gBitsLeft;
   312c2:	4081      	lsls	r1, r0
   312c4:	f8ab 1000 	strh.w	r1, [fp]
    uint8 c = getChar();
   312c8:	f7fd fa1c 	bl	2e704 <getChar>
   312cc:	4601      	mov	r1, r0
        gBitBuf |= getOctet(FFCheck);
   312ce:	f8bb 0000 	ldrh.w	r0, [fp]
   312d2:	4301      	orrs	r1, r0
        gBitBuf <<= (numBits - gBitsLeft);
   312d4:	f89a 0000 	ldrb.w	r0, [sl]
   312d8:	b289      	uxth	r1, r1
   312da:	f1c0 0404 	rsb	r4, r0, #4
   312de:	40a1      	lsls	r1, r4
        gBitsLeft = 8 - (numBits - gBitsLeft);
   312e0:	3004      	adds	r0, #4
        gBitBuf <<= (numBits - gBitsLeft);
   312e2:	f8ab 1000 	strh.w	r1, [fp]
        gBitsLeft = 8 - (numBits - gBitsLeft);
   312e6:	f88a 0000 	strb.w	r0, [sl]
   312ea:	e729      	b.n	31140 <pjpeg_decode_init+0x544>
        gBitBuf <<= gBitsLeft;
   312ec:	4081      	lsls	r1, r0
   312ee:	f8ab 1000 	strh.w	r1, [fp]
    uint8 c = getChar();
   312f2:	f7fd fa07 	bl	2e704 <getChar>
   312f6:	4601      	mov	r1, r0
        gBitBuf |= getOctet(FFCheck);
   312f8:	f8bb 0000 	ldrh.w	r0, [fp]
   312fc:	4301      	orrs	r1, r0
        gBitBuf <<= (numBits - gBitsLeft);
   312fe:	f89a 0000 	ldrb.w	r0, [sl]
   31302:	b289      	uxth	r1, r1
   31304:	f1c0 0404 	rsb	r4, r0, #4
   31308:	40a1      	lsls	r1, r4
        gBitsLeft = 8 - (numBits - gBitsLeft);
   3130a:	3004      	adds	r0, #4
        gBitBuf <<= (numBits - gBitsLeft);
   3130c:	b289      	uxth	r1, r1
        gBitsLeft = 8 - (numBits - gBitsLeft);
   3130e:	b2c0      	uxtb	r0, r0
   31310:	e70b      	b.n	3112a <pjpeg_decode_init+0x52e>
        return PJPG_TOO_MANY_COMPONENTS;
   31312:	250a      	movs	r5, #10
   31314:	e4f7      	b.n	30d06 <pjpeg_decode_init+0x10a>
            gScanType = PJPG_YH1V1;
   31316:	4b25      	ldr	r3, [pc, #148]	@ (313ac <pjpeg_decode_init+0x7b0>)
            gMCUOrg[0] = 0;
   31318:	4825      	ldr	r0, [pc, #148]	@ (313b0 <pjpeg_decode_init+0x7b4>)
            gScanType = PJPG_YH1V1;
   3131a:	7019      	strb	r1, [r3, #0]
            gMaxBlocksPerMCU = 3;
   3131c:	4925      	ldr	r1, [pc, #148]	@ (313b4 <pjpeg_decode_init+0x7b8>)
            gScanType = PJPG_YH1V1;
   3131e:	9300      	str	r3, [sp, #0]
            gMaxBlocksPerMCU = 3;
   31320:	2403      	movs	r4, #3
   31322:	700c      	strb	r4, [r1, #0]
            gMCUOrg[0] = 0;
   31324:	f44f 7180 	mov.w	r1, #256	@ 0x100
   31328:	8001      	strh	r1, [r0, #0]
            gMCUOrg[2] = 2;
   3132a:	2102      	movs	r1, #2
   3132c:	7081      	strb	r1, [r0, #2]
            gMaxMCUYSize = 8;
   3132e:	e666      	b.n	30ffe <pjpeg_decode_init+0x402>
        return status;
   31330:	2518      	movs	r5, #24
   31332:	e4e8      	b.n	30d06 <pjpeg_decode_init+0x10a>
            gScanType = PJPG_YH2V1;
   31334:	4b1d      	ldr	r3, [pc, #116]	@ (313ac <pjpeg_decode_init+0x7b0>)
            gMCUOrg[0] = 0;
   31336:	481e      	ldr	r0, [pc, #120]	@ (313b0 <pjpeg_decode_init+0x7b4>)
   31338:	4c1f      	ldr	r4, [pc, #124]	@ (313b8 <pjpeg_decode_init+0x7bc>)
            gScanType = PJPG_YH2V1;
   3133a:	7019      	strb	r1, [r3, #0]
            gMaxBlocksPerMCU = 4;
   3133c:	491d      	ldr	r1, [pc, #116]	@ (313b4 <pjpeg_decode_init+0x7b8>)
            gMCUOrg[0] = 0;
   3133e:	6004      	str	r4, [r0, #0]
            gMaxBlocksPerMCU = 4;
   31340:	2004      	movs	r0, #4
            gScanType = PJPG_YH2V1;
   31342:	9300      	str	r3, [sp, #0]
            gMaxBlocksPerMCU = 4;
   31344:	7008      	strb	r0, [r1, #0]
            gMaxMCUYSize = 8;
   31346:	2507      	movs	r5, #7
   31348:	2408      	movs	r4, #8
   3134a:	e5e0      	b.n	30f0e <pjpeg_decode_init+0x312>
   3134c:	2202      	movs	r2, #2
   3134e:	4614      	mov	r4, r2
   31350:	e6c6      	b.n	310e0 <pjpeg_decode_init+0x4e4>
   31352:	2524      	movs	r5, #36	@ 0x24
   31354:	e4d7      	b.n	30d06 <pjpeg_decode_init+0x10a>
   31356:	bf00      	nop
   31358:	10050937 	.word	0x10050937
   3135c:	10050930 	.word	0x10050930
   31360:	1005092c 	.word	0x1005092c
   31364:	10050a5e 	.word	0x10050a5e
   31368:	10050934 	.word	0x10050934
   3136c:	10050940 	.word	0x10050940
   31370:	10050a5d 	.word	0x10050a5d
   31374:	1005093c 	.word	0x1005093c
   31378:	10050dc0 	.word	0x10050dc0
   3137c:	10050938 	.word	0x10050938
   31380:	1005093a 	.word	0x1005093a
   31384:	10050959 	.word	0x10050959
   31388:	10050958 	.word	0x10050958
   3138c:	1005095c 	.word	0x1005095c
   31390:	10050952 	.word	0x10050952
   31394:	10050950 	.word	0x10050950
   31398:	10050924 	.word	0x10050924
   3139c:	10050922 	.word	0x10050922
   313a0:	100510c8 	.word	0x100510c8
   313a4:	10050fc8 	.word	0x10050fc8
   313a8:	10050ec8 	.word	0x10050ec8
   313ac:	10050929 	.word	0x10050929
   313b0:	10050918 	.word	0x10050918
   313b4:	10050928 	.word	0x10050928
   313b8:	02010000 	.word	0x02010000

000313bc <ns_usb_service_callback>:

uint8_t *ns_usb_get_rx_buffer() { return usb_config.rx_buffer; }

uint8_t *ns_usb_get_tx_buffer() { return usb_config.tx_buffer; }

static void ns_usb_service_callback(ns_timer_config_t *c) {
   313bc:	b510      	push	{r4, lr}
void tud_task_ext(uint32_t timeout_ms, bool in_isr);

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void) {
  tud_task_ext(UINT32_MAX, false);
   313be:	2100      	movs	r1, #0
   313c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   313c4:	f001 fd2c 	bl	32e20 <tud_task_ext>
    // Invoked in ISR context
    // ns_lp_printf("U");
    tud_task();
    if (usb_config.service_cb != NULL) {
   313c8:	4b04      	ldr	r3, [pc, #16]	@ (313dc <ns_usb_service_callback+0x20>)
   313ca:	6a1b      	ldr	r3, [r3, #32]
   313cc:	b123      	cbz	r3, 313d8 <ns_usb_service_callback+0x1c>
        usb_config.service_cb(gGotUSBRx);
   313ce:	4a04      	ldr	r2, [pc, #16]	@ (313e0 <ns_usb_service_callback+0x24>)
        // ns_lp_printf("got usb rx %d\n", gGotUSBRx);
    }
}
   313d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        usb_config.service_cb(gGotUSBRx);
   313d4:	7810      	ldrb	r0, [r2, #0]
   313d6:	4718      	bx	r3
}
   313d8:	bd10      	pop	{r4, pc}
   313da:	bf00      	nop
   313dc:	1000db34 	.word	0x1000db34
   313e0:	10051248 	.word	0x10051248

000313e4 <ns_get_cdc_rx_bufferLength>:
uint32_t ns_get_cdc_rx_bufferLength() { return usb_config.rx_bufferLength; }
   313e4:	4b01      	ldr	r3, [pc, #4]	@ (313ec <ns_get_cdc_rx_bufferLength+0x8>)
   313e6:	8998      	ldrh	r0, [r3, #12]
   313e8:	4770      	bx	lr
   313ea:	bf00      	nop
   313ec:	1000db34 	.word	0x1000db34

000313f0 <ns_get_cdc_tx_bufferLength>:
uint32_t ns_get_cdc_tx_bufferLength() { return usb_config.tx_bufferLength; }
   313f0:	4b01      	ldr	r3, [pc, #4]	@ (313f8 <ns_get_cdc_tx_bufferLength+0x8>)
   313f2:	8a98      	ldrh	r0, [r3, #20]
   313f4:	4770      	bx	lr
   313f6:	bf00      	nop
   313f8:	1000db34 	.word	0x1000db34

000313fc <ns_usb_get_rx_buffer>:
uint8_t *ns_usb_get_rx_buffer() { return usb_config.rx_buffer; }
   313fc:	4b01      	ldr	r3, [pc, #4]	@ (31404 <ns_usb_get_rx_buffer+0x8>)
   313fe:	6898      	ldr	r0, [r3, #8]
   31400:	4770      	bx	lr
   31402:	bf00      	nop
   31404:	1000db34 	.word	0x1000db34

00031408 <ns_usb_get_tx_buffer>:
uint8_t *ns_usb_get_tx_buffer() { return usb_config.tx_buffer; }
   31408:	4b01      	ldr	r3, [pc, #4]	@ (31410 <ns_usb_get_tx_buffer+0x8>)
   3140a:	6918      	ldr	r0, [r3, #16]
   3140c:	4770      	bx	lr
   3140e:	bf00      	nop
   31410:	1000db34 	.word	0x1000db34

00031414 <ns_usb_init>:
    .timer = NS_TIMER_USB,
    .enableInterrupt = true,
    .periodInMicroseconds = 1000,
    .callback = ns_usb_service_callback};

uint32_t ns_usb_init(ns_usb_config_t *cfg, usb_handle_t *h) {
   31414:	b570      	push	{r4, r5, r6, lr}

#ifndef NS_DISABLE_API_VALIDATION
    if (cfg == NULL) {
   31416:	b320      	cbz	r0, 31462 <ns_usb_init+0x4e>
        return NS_STATUS_INVALID_HANDLE;
    }

    if (ns_core_check_api(cfg->api, &ns_usb_oldest_supported_version, &ns_usb_current_version)) {
   31418:	4a1a      	ldr	r2, [pc, #104]	@ (31484 <ns_usb_init+0x70>)
   3141a:	460e      	mov	r6, r1
   3141c:	4604      	mov	r4, r0
   3141e:	491a      	ldr	r1, [pc, #104]	@ (31488 <ns_usb_init+0x74>)
   31420:	6800      	ldr	r0, [r0, #0]
   31422:	f7e8 f8f7 	bl	19614 <ns_core_check_api>
   31426:	4605      	mov	r5, r0
   31428:	bb08      	cbnz	r0, 3146e <ns_usb_init+0x5a>
        return NS_STATUS_INVALID_VERSION;
    }

    if ((cfg->rx_buffer == NULL) || (cfg->tx_buffer == NULL)) {
   3142a:	68a2      	ldr	r2, [r4, #8]
   3142c:	b1e2      	cbz	r2, 31468 <ns_usb_init+0x54>
   3142e:	6921      	ldr	r1, [r4, #16]
   31430:	b1d1      	cbz	r1, 31468 <ns_usb_init+0x54>
        return NS_STATUS_INVALID_CONFIG;
    }
#endif

    usb_config.deviceType = cfg->deviceType;
   31432:	4b16      	ldr	r3, [pc, #88]	@ (3148c <ns_usb_init+0x78>)
   31434:	7920      	ldrb	r0, [r4, #4]
    usb_config.rx_buffer = cfg->rx_buffer;
   31436:	609a      	str	r2, [r3, #8]
    usb_config.rx_bufferLength = cfg->rx_bufferLength;
   31438:	89a2      	ldrh	r2, [r4, #12]
   3143a:	819a      	strh	r2, [r3, #12]
    usb_config.tx_buffer = cfg->tx_buffer;
    usb_config.tx_bufferLength = cfg->tx_bufferLength;
   3143c:	8aa2      	ldrh	r2, [r4, #20]
   3143e:	829a      	strh	r2, [r3, #20]
    usb_config.rx_cb = cfg->rx_cb;
   31440:	69a2      	ldr	r2, [r4, #24]
   31442:	619a      	str	r2, [r3, #24]
   31444:	69e2      	ldr	r2, [r4, #28]
   31446:	61da      	str	r2, [r3, #28]
   31448:	6a22      	ldr	r2, [r4, #32]
    usb_config.deviceType = cfg->deviceType;
   3144a:	7118      	strb	r0, [r3, #4]
    usb_config.tx_buffer = cfg->tx_buffer;
   3144c:	6119      	str	r1, [r3, #16]
    usb_config.rx_cb = cfg->rx_cb;
   3144e:	621a      	str	r2, [r3, #32]
    usb_config.tx_cb = cfg->tx_cb;
    usb_config.service_cb = cfg->service_cb;
    *h = (void *)&usb_config;
   31450:	6033      	str	r3, [r6, #0]
    tusb_init();
   31452:	f001 f9a7 	bl	327a4 <tusb_init>

    // Set up a timer to service usb

    NS_TRY(ns_timer_init(&g_ns_usbTimer), "Timer Init Failed.\n");
   31456:	480e      	ldr	r0, [pc, #56]	@ (31490 <ns_usb_init+0x7c>)
   31458:	f7fb f81c 	bl	2c494 <ns_timer_init>
   3145c:	b950      	cbnz	r0, 31474 <ns_usb_init+0x60>

    return NS_STATUS_SUCCESS;
}
   3145e:	4628      	mov	r0, r5
   31460:	bd70      	pop	{r4, r5, r6, pc}
        return NS_STATUS_INVALID_HANDLE;
   31462:	2501      	movs	r5, #1
}
   31464:	4628      	mov	r0, r5
   31466:	bd70      	pop	{r4, r5, r6, pc}
        return NS_STATUS_INVALID_CONFIG;
   31468:	2503      	movs	r5, #3
}
   3146a:	4628      	mov	r0, r5
   3146c:	bd70      	pop	{r4, r5, r6, pc}
        return NS_STATUS_INVALID_VERSION;
   3146e:	2502      	movs	r5, #2
}
   31470:	4628      	mov	r0, r5
   31472:	bd70      	pop	{r4, r5, r6, pc}
    NS_TRY(ns_timer_init(&g_ns_usbTimer), "Timer Init Failed.\n");
   31474:	4807      	ldr	r0, [pc, #28]	@ (31494 <ns_usb_init+0x80>)
   31476:	f7fa fd77 	bl	2bf68 <ns_lp_printf>
   3147a:	f7e8 f91f 	bl	196bc <ns_core_fail_loop>
}
   3147e:	4628      	mov	r0, r5
   31480:	bd70      	pop	{r4, r5, r6, pc}
   31482:	bf00      	nop
   31484:	0004bbf8 	.word	0x0004bbf8
   31488:	0004bc04 	.word	0x0004bc04
   3148c:	1000db34 	.word	0x1000db34
   31490:	1000db24 	.word	0x1000db24
   31494:	00044094 	.word	0x00044094

00031498 <divu64_10>:
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
   31498:	2900      	cmp	r1, #0
   3149a:	d047      	beq.n	3152c <divu64_10+0x94>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
   3149c:	0843      	lsrs	r3, r0, #1
   3149e:	0882      	lsrs	r2, r0, #2
   314a0:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
   314a4:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
   314a8:	189b      	adds	r3, r3, r2
   314aa:	ea4f 0291 	mov.w	r2, r1, lsr #2
   314ae:	eb42 0251 	adc.w	r2, r2, r1, lsr #1
        q64 += (q64 >> 4);
   314b2:	ea4f 1c13 	mov.w	ip, r3, lsr #4
   314b6:	ea4c 7c02 	orr.w	ip, ip, r2, lsl #28
   314ba:	eb13 030c 	adds.w	r3, r3, ip
   314be:	eb42 1212 	adc.w	r2, r2, r2, lsr #4
        q64 += (q64 >> 8);
   314c2:	ea4f 2c13 	mov.w	ip, r3, lsr #8
   314c6:	ea4c 6c02 	orr.w	ip, ip, r2, lsl #24
   314ca:	eb13 030c 	adds.w	r3, r3, ip
   314ce:	eb42 2212 	adc.w	r2, r2, r2, lsr #8
        q64 += (q64 >> 16);
   314d2:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   314d6:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
   314da:	eb13 030c 	adds.w	r3, r3, ip
   314de:	eb42 4212 	adc.w	r2, r2, r2, lsr #16
        q64 += (q64 >> 32);
   314e2:	189b      	adds	r3, r3, r2
   314e4:	f142 0200 	adc.w	r2, r2, #0
        q64 >>= 3;
   314e8:	08db      	lsrs	r3, r3, #3
   314ea:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   314ee:	08d2      	lsrs	r2, r2, #3
        r64 = ui64Val - q64*10;
        return q64 + ((r64 + 6) >> 4);
   314f0:	3006      	adds	r0, #6
{
   314f2:	b500      	push	{lr}
        r64 = ui64Val - q64*10;
   314f4:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   314f8:	ea4f 0e82 	mov.w	lr, r2, lsl #2
        return q64 + ((r64 + 6) >> 4);
   314fc:	f141 0100 	adc.w	r1, r1, #0
        r64 = ui64Val - q64*10;
   31500:	ea4e 7e93 	orr.w	lr, lr, r3, lsr #30
   31504:	eb1c 0c03 	adds.w	ip, ip, r3
   31508:	eb42 0e0e 	adc.w	lr, r2, lr
   3150c:	eb1c 0c0c 	adds.w	ip, ip, ip
   31510:	eb4e 0e0e 	adc.w	lr, lr, lr
        return q64 + ((r64 + 6) >> 4);
   31514:	ebb0 000c 	subs.w	r0, r0, ip
   31518:	eb61 010e 	sbc.w	r1, r1, lr
   3151c:	0900      	lsrs	r0, r0, #4
   3151e:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
   31522:	18c0      	adds	r0, r0, r3
   31524:	eb42 1111 	adc.w	r1, r2, r1, lsr #4
        q32 += (q32 >> 16);
        q32 >>= 3;
        r32 = ui32Val - q32*10;
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    }
}
   31528:	f85d fb04 	ldr.w	pc, [sp], #4
        q32 = (ui32Val>>1) + (ui32Val>>2);
   3152c:	0883      	lsrs	r3, r0, #2
   3152e:	eb03 0350 	add.w	r3, r3, r0, lsr #1
        q32 += (q32 >> 4);
   31532:	eb03 1313 	add.w	r3, r3, r3, lsr #4
        q32 += (q32 >> 8);
   31536:	eb03 2313 	add.w	r3, r3, r3, lsr #8
        q32 += (q32 >> 16);
   3153a:	eb03 4313 	add.w	r3, r3, r3, lsr #16
        q32 >>= 3;
   3153e:	08db      	lsrs	r3, r3, #3
        r32 = ui32Val - q32*10;
   31540:	eb03 0283 	add.w	r2, r3, r3, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
   31544:	3006      	adds	r0, #6
   31546:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
   3154a:	eb03 1010 	add.w	r0, r3, r0, lsr #4
}
   3154e:	4770      	bx	lr

00031550 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
   31550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   31554:	b088      	sub	sp, #32
   31556:	ad01      	add	r5, sp, #4
   31558:	4684      	mov	ip, r0
   3155a:	46ae      	mov	lr, r5
    char tbuf[25];
    int ix = 0, iNumDig = 0;
   3155c:	2000      	movs	r0, #0
   3155e:	e040      	b.n	315e2 <uint64_to_str+0x92>
        q64 = (ui64Val>>1) + (ui64Val>>2);
   31560:	19f6      	adds	r6, r6, r7
   31562:	eb43 0391 	adc.w	r3, r3, r1, lsr #2
        q64 += (q64 >> 4);
   31566:	0937      	lsrs	r7, r6, #4
   31568:	ea47 7703 	orr.w	r7, r7, r3, lsl #28
   3156c:	19bf      	adds	r7, r7, r6
   3156e:	eb43 1313 	adc.w	r3, r3, r3, lsr #4
        q64 += (q64 >> 8);
   31572:	0a3e      	lsrs	r6, r7, #8
   31574:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
   31578:	19f7      	adds	r7, r6, r7
   3157a:	eb43 2313 	adc.w	r3, r3, r3, lsr #8
        q64 += (q64 >> 16);
   3157e:	0c3e      	lsrs	r6, r7, #16
   31580:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
   31584:	19f6      	adds	r6, r6, r7
   31586:	eb43 4313 	adc.w	r3, r3, r3, lsr #16
        q64 += (q64 >> 32);
   3158a:	199e      	adds	r6, r3, r6
   3158c:	f143 0300 	adc.w	r3, r3, #0
        q64 >>= 3;
   31590:	08f6      	lsrs	r6, r6, #3
   31592:	ea46 7643 	orr.w	r6, r6, r3, lsl #29
   31596:	08db      	lsrs	r3, r3, #3
        return q64 + ((r64 + 6) >> 4);
   31598:	f11c 0c06 	adds.w	ip, ip, #6
        r64 = ui64Val - q64*10;
   3159c:	ea4f 0786 	mov.w	r7, r6, lsl #2
   315a0:	ea4f 0883 	mov.w	r8, r3, lsl #2
        return q64 + ((r64 + 6) >> 4);
   315a4:	f141 0100 	adc.w	r1, r1, #0
        r64 = ui64Val - q64*10;
   315a8:	ea48 7896 	orr.w	r8, r8, r6, lsr #30
   315ac:	19bf      	adds	r7, r7, r6
   315ae:	eb43 0808 	adc.w	r8, r3, r8
   315b2:	19ff      	adds	r7, r7, r7
   315b4:	eb48 0808 	adc.w	r8, r8, r8
        return q64 + ((r64 + 6) >> 4);
   315b8:	ebbc 0c07 	subs.w	ip, ip, r7
   315bc:	eb61 0108 	sbc.w	r1, r1, r8
   315c0:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
   315c4:	ea4c 7c01 	orr.w	ip, ip, r1, lsl #28
   315c8:	eb1c 0c06 	adds.w	ip, ip, r6
        u64Tmp = divu64_10(ui64Val);

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
   315cc:	eb0c 068c 	add.w	r6, ip, ip, lsl #2
   315d0:	eba4 0446 	sub.w	r4, r4, r6, lsl #1

        tbuf[ix++] = uMod + '0';
   315d4:	f104 0430 	add.w	r4, r4, #48	@ 0x30
   315d8:	f80e 4b01 	strb.w	r4, [lr], #1
        return q64 + ((r64 + 6) >> 4);
   315dc:	eb43 1111 	adc.w	r1, r3, r1, lsr #4
        tbuf[ix++] = uMod + '0';
   315e0:	3001      	adds	r0, #1
        q64 = (ui64Val>>1) + (ui64Val>>2);
   315e2:	ea4f 069c 	mov.w	r6, ip, lsr #2
   315e6:	ea4f 075c 	mov.w	r7, ip, lsr #1
   315ea:	ea46 7681 	orr.w	r6, r6, r1, lsl #30
   315ee:	ea47 77c1 	orr.w	r7, r7, r1, lsl #31
   315f2:	084b      	lsrs	r3, r1, #1
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
   315f4:	4664      	mov	r4, ip
    if ( ui64Val >> 32 )
   315f6:	2900      	cmp	r1, #0
   315f8:	d1b2      	bne.n	31560 <uint64_to_str+0x10>
        q32 = (ui32Val>>1) + (ui32Val>>2);
   315fa:	0863      	lsrs	r3, r4, #1
   315fc:	eb03 0394 	add.w	r3, r3, r4, lsr #2
        q32 += (q32 >> 4);
   31600:	eb03 1313 	add.w	r3, r3, r3, lsr #4
        q32 += (q32 >> 8);
   31604:	eb03 2313 	add.w	r3, r3, r3, lsr #8
        q32 += (q32 >> 16);
   31608:	eb03 4313 	add.w	r3, r3, r3, lsr #16
        q32 >>= 3;
   3160c:	08db      	lsrs	r3, r3, #3
        r32 = ui32Val - q32*10;
   3160e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
   31612:	1da6      	adds	r6, r4, #6
   31614:	eba6 0641 	sub.w	r6, r6, r1, lsl #1
   31618:	4621      	mov	r1, r4
   3161a:	eb03 1416 	add.w	r4, r3, r6, lsr #4
        uMod = ui64Val - (u64Tmp * 10);
   3161e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   31622:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
        tbuf[ix++] = uMod + '0';
   31626:	3330      	adds	r3, #48	@ 0x30
   31628:	f80e 3b01 	strb.w	r3, [lr], #1
   3162c:	3001      	adds	r0, #1
        ui64Val = u64Tmp;
    } while ( ui64Val );
   3162e:	2c00      	cmp	r4, #0
   31630:	d1e3      	bne.n	315fa <uint64_to_str+0xaa>
    iNumDig = ix;

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
   31632:	b152      	cbz	r2, 3164a <uint64_to_str+0xfa>
   31634:	4606      	mov	r6, r0
   31636:	182b      	adds	r3, r5, r0
   31638:	1e51      	subs	r1, r2, #1
    {
        while ( ix-- )
        {
            *pcBuf++ = tbuf[ix];
   3163a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   3163e:	f801 4f01 	strb.w	r4, [r1, #1]!
        while ( ix-- )
   31642:	42ab      	cmp	r3, r5
   31644:	d1f9      	bne.n	3163a <uint64_to_str+0xea>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
   31646:	2300      	movs	r3, #0
   31648:	5593      	strb	r3, [r2, r6]
    }

    return iNumDig;
}
   3164a:	b008      	add	sp, #32
   3164c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00031650 <am_util_stdio_printf_init>:
    g_pfnCharPrint = pfnCharPrint;
   31650:	4b01      	ldr	r3, [pc, #4]	@ (31658 <am_util_stdio_printf_init+0x8>)
   31652:	6018      	str	r0, [r3, #0]
}
   31654:	4770      	bx	lr
   31656:	bf00      	nop
   31658:	1005164c 	.word	0x1005164c

0003165c <am_util_stdio_vsprintf>:
// Format data into string. (va_list implementation)
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
   3165c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
   31660:	780b      	ldrb	r3, [r1, #0]
{
   31662:	b089      	sub	sp, #36	@ 0x24
   31664:	4604      	mov	r4, r0
    while ( *pcFmt != 0x0 )
   31666:	2b00      	cmp	r3, #0
   31668:	f000 809b 	beq.w	317a2 <am_util_stdio_vsprintf+0x146>
   3166c:	460d      	mov	r5, r1
   3166e:	4692      	mov	sl, r2
    uint32_t ui32NumChars, ui32CharCnt = 0;
   31670:	2600      	movs	r6, #0
   31672:	e00b      	b.n	3168c <am_util_stdio_vsprintf+0x30>
        if ( *pcFmt != '%' )
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
   31674:	b124      	cbz	r4, 31680 <am_util_stdio_vsprintf+0x24>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
   31676:	2b0a      	cmp	r3, #10
   31678:	f000 8088 	beq.w	3178c <am_util_stdio_vsprintf+0x130>
                {
                    *pcBuf++ = '\r';
                    ++ui32CharCnt;
                }
                *pcBuf++ = *pcFmt;
   3167c:	f804 3b01 	strb.w	r3, [r4], #1
            }

            ++pcFmt;
            ++ui32CharCnt;
   31680:	3601      	adds	r6, #1
            ++pcFmt;
   31682:	463d      	mov	r5, r7
    while ( *pcFmt != 0x0 )
   31684:	782b      	ldrb	r3, [r5, #0]
   31686:	2b00      	cmp	r3, #0
   31688:	f000 808c 	beq.w	317a4 <am_util_stdio_vsprintf+0x148>
        if ( *pcFmt != '%' )
   3168c:	2b25      	cmp	r3, #37	@ 0x25
            ++pcFmt;
   3168e:	f105 0701 	add.w	r7, r5, #1
        if ( *pcFmt != '%' )
   31692:	d1ef      	bne.n	31674 <am_util_stdio_vsprintf+0x18>
        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';

        if ( *pcFmt == '0' )
   31694:	786a      	ldrb	r2, [r5, #1]
   31696:	2a30      	cmp	r2, #48	@ 0x30
        {
            ui8PadChar = '0';
   31698:	bf03      	ittte	eq
   3169a:	4691      	moveq	r9, r2
    if ( *pcStr == '-')
   3169c:	78aa      	ldrbeq	r2, [r5, #2]
            ++pcFmt;
   3169e:	1caf      	addeq	r7, r5, #2
        ui8PadChar = ' ';
   316a0:	f04f 0920 	movne.w	r9, #32
    if ( *pcStr == '-')
   316a4:	2a2d      	cmp	r2, #45	@ 0x2d
   316a6:	f000 8084 	beq.w	317b2 <am_util_stdio_vsprintf+0x156>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   316aa:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
    uint32_t ui32Val = 0, uCnt = 0;
   316ae:	f04f 0c00 	mov.w	ip, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   316b2:	2b09      	cmp	r3, #9
   316b4:	463d      	mov	r5, r7
    bool bNeg = false;
   316b6:	46e6      	mov	lr, ip
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   316b8:	f200 8086 	bhi.w	317c8 <am_util_stdio_vsprintf+0x16c>
   316bc:	4629      	mov	r1, r5
   316be:	2300      	movs	r3, #0
        ui32Val *= 10;
   316c0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        ui32Val += (*pcStr - '0');
   316c4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   316c8:	4688      	mov	r8, r1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   316ca:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   316ce:	f1a2 0030 	sub.w	r0, r2, #48	@ 0x30
   316d2:	2809      	cmp	r0, #9
        ui32Val += (*pcStr - '0');
   316d4:	f1a3 0330 	sub.w	r3, r3, #48	@ 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   316d8:	d9f2      	bls.n	316c0 <am_util_stdio_vsprintf+0x64>
   316da:	f10c 0c01 	add.w	ip, ip, #1
   316de:	ebac 0c05 	sub.w	ip, ip, r5
        ++uCnt;
   316e2:	44e0      	add	r8, ip

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
        pcFmt += ui32NumChars;
   316e4:	eb07 0508 	add.w	r5, r7, r8

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
   316e8:	f817 2008 	ldrb.w	r2, [r7, r8]
    return bNeg ? -ui32Val : ui32Val;
   316ec:	f1be 0f00 	cmp.w	lr, #0
   316f0:	d000      	beq.n	316f4 <am_util_stdio_vsprintf+0x98>
   316f2:	425b      	negs	r3, r3
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
   316f4:	2a73      	cmp	r2, #115	@ 0x73
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
   316f6:	4698      	mov	r8, r3
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
   316f8:	f000 80f9 	beq.w	318ee <am_util_stdio_vsprintf+0x292>
   316fc:	ea83 7be3 	eor.w	fp, r3, r3, asr #31
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
   31700:	2a2e      	cmp	r2, #46	@ 0x2e
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
   31702:	ebab 7be3 	sub.w	fp, fp, r3, asr #31
        if (*pcFmt == '.')
   31706:	f000 80c3 	beq.w	31890 <am_util_stdio_vsprintf+0x234>
        iPrecision = 6;             // printf() default precision for %f is 6
   3170a:	2706      	movs	r7, #6
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
   3170c:	2a6c      	cmp	r2, #108	@ 0x6c
   3170e:	d104      	bne.n	3171a <am_util_stdio_vsprintf+0xbe>
        {
            pcFmt++;
            if ( *pcFmt == 'l' )    // "ll" (long long)
   31710:	786a      	ldrb	r2, [r5, #1]
   31712:	2a6c      	cmp	r2, #108	@ 0x6c
   31714:	f000 812f 	beq.w	31976 <am_util_stdio_vsprintf+0x31a>
            pcFmt++;
   31718:	3501      	adds	r5, #1
                pcFmt++;
                bLongLong = true;
            }
        }

        switch ( *pcFmt )
   3171a:	f1a2 0146 	sub.w	r1, r2, #70	@ 0x46
   3171e:	2932      	cmp	r1, #50	@ 0x32
   31720:	d854      	bhi.n	317cc <am_util_stdio_vsprintf+0x170>
   31722:	e8df f011 	tbh	[pc, r1, lsl #1]
   31726:	0059      	.short	0x0059
   31728:	00530053 	.word	0x00530053
   3172c:	00530053 	.word	0x00530053
   31730:	00530053 	.word	0x00530053
   31734:	00530053 	.word	0x00530053
   31738:	00530053 	.word	0x00530053
   3173c:	00530053 	.word	0x00530053
   31740:	00530053 	.word	0x00530053
   31744:	00530053 	.word	0x00530053
   31748:	02750053 	.word	0x02750053
   3174c:	00530053 	.word	0x00530053
   31750:	00530053 	.word	0x00530053
   31754:	00530053 	.word	0x00530053
   31758:	00530053 	.word	0x00530053
   3175c:	00530053 	.word	0x00530053
   31760:	01b100ab 	.word	0x01b100ab
   31764:	00590053 	.word	0x00590053
   31768:	00530053 	.word	0x00530053
   3176c:	005301b1 	.word	0x005301b1
   31770:	00530053 	.word	0x00530053
   31774:	00530053 	.word	0x00530053
   31778:	00530053 	.word	0x00530053
   3177c:	00530053 	.word	0x00530053
   31780:	005300e3 	.word	0x005300e3
   31784:	005301c2 	.word	0x005301c2
   31788:	02980053 	.word	0x02980053
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
   3178c:	4acf      	ldr	r2, [pc, #828]	@ (31acc <am_util_stdio_vsprintf+0x470>)
   3178e:	7812      	ldrb	r2, [r2, #0]
   31790:	2a00      	cmp	r2, #0
   31792:	f43f af73 	beq.w	3167c <am_util_stdio_vsprintf+0x20>
                    *pcBuf++ = '\r';
   31796:	230d      	movs	r3, #13
   31798:	f804 3b01 	strb.w	r3, [r4], #1
                    ++ui32CharCnt;
   3179c:	3601      	adds	r6, #1
                *pcBuf++ = *pcFmt;
   3179e:	782b      	ldrb	r3, [r5, #0]
   317a0:	e76c      	b.n	3167c <am_util_stdio_vsprintf+0x20>
    uint32_t ui32NumChars, ui32CharCnt = 0;
   317a2:	461e      	mov	r6, r3
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
   317a4:	b10c      	cbz	r4, 317aa <am_util_stdio_vsprintf+0x14e>
    {
        *pcBuf = 0x0;
   317a6:	2300      	movs	r3, #0
   317a8:	7023      	strb	r3, [r4, #0]
    }

    return (ui32CharCnt);
}
   317aa:	4630      	mov	r0, r6
   317ac:	b009      	add	sp, #36	@ 0x24
   317ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   317b2:	787a      	ldrb	r2, [r7, #1]
   317b4:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
        uCnt++;
   317b8:	f04f 0c01 	mov.w	ip, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   317bc:	2b09      	cmp	r3, #9
        pcStr++;
   317be:	eb07 050c 	add.w	r5, r7, ip
        bNeg = true;
   317c2:	46e6      	mov	lr, ip
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   317c4:	f67f af7a 	bls.w	316bc <am_util_stdio_vsprintf+0x60>
   317c8:	2300      	movs	r3, #0
   317ca:	e78f      	b.n	316ec <am_util_stdio_vsprintf+0x90>
                if ( pcBuf )
   317cc:	b10c      	cbz	r4, 317d2 <am_util_stdio_vsprintf+0x176>
                    *pcBuf++ = *pcFmt;
   317ce:	f804 2b01 	strb.w	r2, [r4], #1
                ++ui32CharCnt;
   317d2:	3601      	adds	r6, #1
        ++pcFmt;
   317d4:	3501      	adds	r5, #1
   317d6:	e755      	b.n	31684 <am_util_stdio_vsprintf+0x28>
                if ( pcBuf )
   317d8:	2c00      	cmp	r4, #0
   317da:	d0fb      	beq.n	317d4 <am_util_stdio_vsprintf+0x178>
                    float fValue = va_arg(pArgs, double);
   317dc:	f10a 0a07 	add.w	sl, sl, #7
   317e0:	f02a 0a07 	bic.w	sl, sl, #7
   317e4:	e8fa 0102 	ldrd	r0, r1, [sl], #8
   317e8:	f7e7 fc6a 	bl	190c0 <__aeabi_d2f>
   317ec:	ee07 0a90 	vmov	s15, r0
    if (fValue == 0.0f)
   317f0:	eef5 7a40 	vcmp.f32	s15, #0.0
                    *(uint32_t*)pcBuf = 20;
   317f4:	2314      	movs	r3, #20
    if (fValue == 0.0f)
   317f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    *(uint32_t*)pcBuf = 20;
   317fa:	6023      	str	r3, [r4, #0]
    if (fValue == 0.0f)
   317fc:	f000 81e1 	beq.w	31bc2 <am_util_stdio_vsprintf+0x566>
    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
   31800:	f3c0 5cc7 	ubfx	ip, r0, #23, #8
   31804:	f1ac 017f 	sub.w	r1, ip, #127	@ 0x7f
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
   31808:	f3c0 0216 	ubfx	r2, r0, #0, #23
    if (iExp2 >= 31)
   3180c:	291e      	cmp	r1, #30
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
   3180e:	f442 0e00 	orr.w	lr, r2, #8388608	@ 0x800000
    if (iExp2 >= 31)
   31812:	f300 8348 	bgt.w	31ea6 <am_util_stdio_vsprintf+0x84a>
    else if (iExp2 < -23)
   31816:	f111 0f17 	cmn.w	r1, #23
   3181a:	f2c0 81d2 	blt.w	31bc2 <am_util_stdio_vsprintf+0x566>
    else if (iExp2 >= 23)
   3181e:	2916      	cmp	r1, #22
   31820:	f340 81b5 	ble.w	31b8e <am_util_stdio_vsprintf+0x532>
    if (unFloatValue.I32 < 0)
   31824:	2800      	cmp	r0, #0
        *pcBuf++ = '-';
   31826:	4622      	mov	r2, r4
    if (unFloatValue.I32 < 0)
   31828:	f2c0 825f 	blt.w	31cea <am_util_stdio_vsprintf+0x68e>
        i32IntPart = i32Significand << (iExp2 - 23);
   3182c:	f1ac 0c96 	sub.w	ip, ip, #150	@ 0x96
   31830:	fa0e f00c 	lsl.w	r0, lr, ip
            uint64_to_str(i32IntPart, pcBuf);
   31834:	17c1      	asrs	r1, r0, #31
   31836:	f7ff fe8b 	bl	31550 <uint64_to_str>
        while (*pcBuf)    // Get to end of new string
   3183a:	7813      	ldrb	r3, [r2, #0]
   3183c:	f04f 0800 	mov.w	r8, #0
   31840:	2b00      	cmp	r3, #0
   31842:	f000 8366 	beq.w	31f12 <am_util_stdio_vsprintf+0x8b6>
   31846:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   3184a:	2b00      	cmp	r3, #0
   3184c:	d1fb      	bne.n	31846 <am_util_stdio_vsprintf+0x1ea>
    *pcBuf++ = '.';
   3184e:	232e      	movs	r3, #46	@ 0x2e
   31850:	7013      	strb	r3, [r2, #0]
    if (i32FracPart == 0)
   31852:	f1b8 0f00 	cmp.w	r8, #0
   31856:	f040 8301 	bne.w	31e5c <am_util_stdio_vsprintf+0x800>
        *pcBuf++ = '0';
   3185a:	1c91      	adds	r1, r2, #2
   3185c:	2330      	movs	r3, #48	@ 0x30
   3185e:	7053      	strb	r3, [r2, #1]
    return (pcBuf - pcBufInitial);
   31860:	1b08      	subs	r0, r1, r4
    *pcBuf = 0x00;
   31862:	2300      	movs	r3, #0
                    if ( iVal < 0 )
   31864:	4298      	cmp	r0, r3
    *pcBuf = 0x00;
   31866:	700b      	strb	r3, [r1, #0]
                    if ( iVal < 0 )
   31868:	f280 81ae 	bge.w	31bc8 <am_util_stdio_vsprintf+0x56c>
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
   3186c:	1c43      	adds	r3, r0, #1
   3186e:	f000 81a8 	beq.w	31bc2 <am_util_stdio_vsprintf+0x566>
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
   31872:	3002      	adds	r0, #2
   31874:	f000 8317 	beq.w	31ea6 <am_util_stdio_vsprintf+0x84a>
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
   31878:	4b95      	ldr	r3, [pc, #596]	@ (31ad0 <am_util_stdio_vsprintf+0x474>)
                        iVal = 3;
   3187a:	e1a3      	b.n	31bc4 <am_util_stdio_vsprintf+0x568>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
   3187c:	f10a 0304 	add.w	r3, sl, #4
                if ( pcBuf )
   31880:	b11c      	cbz	r4, 3188a <am_util_stdio_vsprintf+0x22e>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
   31882:	f8da 2000 	ldr.w	r2, [sl]
   31886:	f804 2b01 	strb.w	r2, [r4], #1
                ++ui32CharCnt;
   3188a:	3601      	adds	r6, #1
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
   3188c:	469a      	mov	sl, r3
                break;
   3188e:	e7a1      	b.n	317d4 <am_util_stdio_vsprintf+0x178>
    if ( *pcStr == '-')
   31890:	786a      	ldrb	r2, [r5, #1]
   31892:	2a2d      	cmp	r2, #45	@ 0x2d
            ++pcFmt;
   31894:	f105 0c01 	add.w	ip, r5, #1
    if ( *pcStr == '-')
   31898:	f000 8145 	beq.w	31b26 <am_util_stdio_vsprintf+0x4ca>
    uint32_t ui32Val = 0, uCnt = 0;
   3189c:	2700      	movs	r7, #0
   3189e:	4665      	mov	r5, ip
    bool bNeg = false;
   318a0:	9700      	str	r7, [sp, #0]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   318a2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
   318a6:	2909      	cmp	r1, #9
   318a8:	f200 82d6 	bhi.w	31e58 <am_util_stdio_vsprintf+0x7fc>
   318ac:	4628      	mov	r0, r5
   318ae:	2100      	movs	r1, #0
   318b0:	f8cd 9004 	str.w	r9, [sp, #4]
        ui32Val *= 10;
   318b4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
        ui32Val += (*pcStr - '0');
   318b8:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   318bc:	4686      	mov	lr, r0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   318be:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   318c2:	f1a2 0930 	sub.w	r9, r2, #48	@ 0x30
   318c6:	f1b9 0f09 	cmp.w	r9, #9
        ui32Val += (*pcStr - '0');
   318ca:	f1a1 0130 	sub.w	r1, r1, #48	@ 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   318ce:	d9f1      	bls.n	318b4 <am_util_stdio_vsprintf+0x258>
   318d0:	1c7a      	adds	r2, r7, #1
   318d2:	1b52      	subs	r2, r2, r5
        ++uCnt;
   318d4:	4496      	add	lr, r2
   318d6:	f8dd 9004 	ldr.w	r9, [sp, #4]
        if ( *pcFmt == 'l' )
   318da:	f81c 200e 	ldrb.w	r2, [ip, lr]
            pcFmt += ui32NumChars;
   318de:	eb0c 050e 	add.w	r5, ip, lr
    return bNeg ? -ui32Val : ui32Val;
   318e2:	9800      	ldr	r0, [sp, #0]
   318e4:	b100      	cbz	r0, 318e8 <am_util_stdio_vsprintf+0x28c>
   318e6:	4249      	negs	r1, r1
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
   318e8:	460f      	mov	r7, r1
            pcFmt += ui32NumChars;
   318ea:	e70f      	b.n	3170c <am_util_stdio_vsprintf+0xb0>
        switch ( *pcFmt )
   318ec:	46d8      	mov	r8, fp
                pcStr = va_arg(pArgs, char *);
   318ee:	f85a bb04 	ldr.w	fp, [sl], #4
    if ( !pcBuf )
   318f2:	f1bb 0f00 	cmp.w	fp, #0
   318f6:	f000 816a 	beq.w	31bce <am_util_stdio_vsprintf+0x572>
    while ( *pcBuf++ )
   318fa:	4658      	mov	r0, fp
   318fc:	f810 7b01 	ldrb.w	r7, [r0], #1
   31900:	2f00      	cmp	r7, #0
   31902:	f000 81aa 	beq.w	31c5a <am_util_stdio_vsprintf+0x5fe>
   31906:	f7e6 fedb 	bl	186c0 <strlen>
                if ( iWidth > 0 )
   3190a:	f1b8 0f00 	cmp.w	r8, #0
   3190e:	f100 0101 	add.w	r1, r0, #1
   31912:	dd02      	ble.n	3191a <am_util_stdio_vsprintf+0x2be>
                    if ( ui32strlen < iWidth )
   31914:	4588      	cmp	r8, r1
   31916:	f200 809f 	bhi.w	31a58 <am_util_stdio_vsprintf+0x3fc>
   3191a:	465b      	mov	r3, fp
                    if ( pcBuf )
   3191c:	2c00      	cmp	r4, #0
   3191e:	f000 80a7 	beq.w	31a70 <am_util_stdio_vsprintf+0x414>
                        *pcBuf++ = *pcStr;
   31922:	7027      	strb	r7, [r4, #0]
   31924:	461a      	mov	r2, r3
                while (*pcStr != 0x0)
   31926:	f813 7f01 	ldrb.w	r7, [r3, #1]!
                        *pcBuf++ = *pcStr;
   3192a:	3401      	adds	r4, #1
                while (*pcStr != 0x0)
   3192c:	2f00      	cmp	r7, #0
   3192e:	d1f8      	bne.n	31922 <am_util_stdio_vsprintf+0x2c6>
                if ( iWidth )
   31930:	f1cb 0301 	rsb	r3, fp, #1
   31934:	4433      	add	r3, r6
                    ++ui32CharCnt;
   31936:	18d6      	adds	r6, r2, r3
                if ( iWidth )
   31938:	f1b8 0f00 	cmp.w	r8, #0
   3193c:	f43f af4a 	beq.w	317d4 <am_util_stdio_vsprintf+0x178>
                    iWidth = -iWidth;
   31940:	f1c8 0300 	rsb	r3, r8, #0
                    if ( ui32strlen < iWidth )
   31944:	428b      	cmp	r3, r1
   31946:	f67f af45 	bls.w	317d4 <am_util_stdio_vsprintf+0x178>
                        iWidth -= ui32strlen;
   3194a:	1a59      	subs	r1, r3, r1
    if ( i32NumChars <= 0 )
   3194c:	2900      	cmp	r1, #0
                        iWidth -= ui32strlen;
   3194e:	4688      	mov	r8, r1
    if ( i32NumChars <= 0 )
   31950:	f340 81d6 	ble.w	31d00 <am_util_stdio_vsprintf+0x6a4>
    while ( i32NumChars-- )
   31954:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
        if ( pcBuf )
   31958:	b13c      	cbz	r4, 3196a <am_util_stdio_vsprintf+0x30e>
   3195a:	4622      	mov	r2, r4
    while ( i32NumChars-- )
   3195c:	3b01      	subs	r3, #1
   3195e:	1c58      	adds	r0, r3, #1
            *pcBuf++ = cPadChar;
   31960:	f882 9000 	strb.w	r9, [r2]
   31964:	f102 0201 	add.w	r2, r2, #1
    while ( i32NumChars-- )
   31968:	d1f8      	bne.n	3195c <am_util_stdio_vsprintf+0x300>
                        ui32CharCnt += iWidth;
   3196a:	440e      	add	r6, r1
                        pcBuf += pcBuf ? iWidth : 0;
   3196c:	2c00      	cmp	r4, #0
   3196e:	f43f af31 	beq.w	317d4 <am_util_stdio_vsprintf+0x178>
   31972:	440c      	add	r4, r1
                        iWidth = 0;
   31974:	e72e      	b.n	317d4 <am_util_stdio_vsprintf+0x178>
        switch ( *pcFmt )
   31976:	78aa      	ldrb	r2, [r5, #2]
   31978:	f1a2 0146 	sub.w	r1, r2, #70	@ 0x46
                pcFmt++;
   3197c:	3502      	adds	r5, #2
        switch ( *pcFmt )
   3197e:	2932      	cmp	r1, #50	@ 0x32
   31980:	f63f af24 	bhi.w	317cc <am_util_stdio_vsprintf+0x170>
   31984:	a001      	add	r0, pc, #4	@ (adr r0, 3198c <am_util_stdio_vsprintf+0x330>)
   31986:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   3198a:	bf00      	nop
   3198c:	000317d9 	.word	0x000317d9
   31990:	000317cd 	.word	0x000317cd
   31994:	000317cd 	.word	0x000317cd
   31998:	000317cd 	.word	0x000317cd
   3199c:	000317cd 	.word	0x000317cd
   319a0:	000317cd 	.word	0x000317cd
   319a4:	000317cd 	.word	0x000317cd
   319a8:	000317cd 	.word	0x000317cd
   319ac:	000317cd 	.word	0x000317cd
   319b0:	000317cd 	.word	0x000317cd
   319b4:	000317cd 	.word	0x000317cd
   319b8:	000317cd 	.word	0x000317cd
   319bc:	000317cd 	.word	0x000317cd
   319c0:	000317cd 	.word	0x000317cd
   319c4:	000317cd 	.word	0x000317cd
   319c8:	000317cd 	.word	0x000317cd
   319cc:	000317cd 	.word	0x000317cd
   319d0:	000317cd 	.word	0x000317cd
   319d4:	00031d05 	.word	0x00031d05
   319d8:	000317cd 	.word	0x000317cd
   319dc:	000317cd 	.word	0x000317cd
   319e0:	000317cd 	.word	0x000317cd
   319e4:	000317cd 	.word	0x000317cd
   319e8:	000317cd 	.word	0x000317cd
   319ec:	000317cd 	.word	0x000317cd
   319f0:	000317cd 	.word	0x000317cd
   319f4:	000317cd 	.word	0x000317cd
   319f8:	000317cd 	.word	0x000317cd
   319fc:	000317cd 	.word	0x000317cd
   31a00:	0003187d 	.word	0x0003187d
   31a04:	00031ad5 	.word	0x00031ad5
   31a08:	000317cd 	.word	0x000317cd
   31a0c:	000317d9 	.word	0x000317d9
   31a10:	000317cd 	.word	0x000317cd
   31a14:	000317cd 	.word	0x000317cd
   31a18:	00031ad5 	.word	0x00031ad5
   31a1c:	000317cd 	.word	0x000317cd
   31a20:	000317cd 	.word	0x000317cd
   31a24:	000317cd 	.word	0x000317cd
   31a28:	000317cd 	.word	0x000317cd
   31a2c:	000317cd 	.word	0x000317cd
   31a30:	000317cd 	.word	0x000317cd
   31a34:	000317cd 	.word	0x000317cd
   31a38:	000317cd 	.word	0x000317cd
   31a3c:	000317cd 	.word	0x000317cd
   31a40:	000318ed 	.word	0x000318ed
   31a44:	000317cd 	.word	0x000317cd
   31a48:	00031b15 	.word	0x00031b15
   31a4c:	000317cd 	.word	0x000317cd
   31a50:	000317cd 	.word	0x000317cd
   31a54:	00031d7f 	.word	0x00031d7f
                        iWidth -= ui32strlen;
   31a58:	eba8 0801 	sub.w	r8, r8, r1
    if ( i32NumChars <= 0 )
   31a5c:	f1b8 0f00 	cmp.w	r8, #0
   31a60:	f300 8100 	bgt.w	31c64 <am_util_stdio_vsprintf+0x608>
                        pcBuf += pcBuf ? iWidth : 0;
   31a64:	2c00      	cmp	r4, #0
   31a66:	f040 80cf 	bne.w	31c08 <am_util_stdio_vsprintf+0x5ac>
   31a6a:	465b      	mov	r3, fp
                        iWidth = 0;
   31a6c:	f04f 0800 	mov.w	r8, #0
                while (*pcStr != 0x0)
   31a70:	461a      	mov	r2, r3
   31a72:	f813 4f01 	ldrb.w	r4, [r3, #1]!
   31a76:	2c00      	cmp	r4, #0
   31a78:	f43f af5a 	beq.w	31930 <am_util_stdio_vsprintf+0x2d4>
   31a7c:	461a      	mov	r2, r3
   31a7e:	f813 4f01 	ldrb.w	r4, [r3, #1]!
   31a82:	2c00      	cmp	r4, #0
   31a84:	d1f4      	bne.n	31a70 <am_util_stdio_vsprintf+0x414>
   31a86:	e753      	b.n	31930 <am_util_stdio_vsprintf+0x2d4>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
   31a88:	f85a 0b04 	ldr.w	r0, [sl], #4
   31a8c:	17c1      	asrs	r1, r0, #31
                if ( i64Val < 0 )
   31a8e:	2900      	cmp	r1, #0
   31a90:	db2a      	blt.n	31ae8 <am_util_stdio_vsprintf+0x48c>
                    ui64Val = i64Val;
   31a92:	4684      	mov	ip, r0
   31a94:	4688      	mov	r8, r1
                if ( iWidth )
   31a96:	2b00      	cmp	r3, #0
   31a98:	f040 8191 	bne.w	31dbe <am_util_stdio_vsprintf+0x762>
                iVal = uint64_to_str(ui64Val, pcBuf);
   31a9c:	4622      	mov	r2, r4
   31a9e:	f7ff fd57 	bl	31550 <uint64_to_str>
                if ( pcBuf )
   31aa2:	b104      	cbz	r4, 31aa6 <am_util_stdio_vsprintf+0x44a>
                    pcBuf += iVal;
   31aa4:	4404      	add	r4, r0
                ui32CharCnt += iVal;
   31aa6:	4406      	add	r6, r0
                break;
   31aa8:	e694      	b.n	317d4 <am_util_stdio_vsprintf+0x178>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   31aaa:	f85a cb04 	ldr.w	ip, [sl], #4
   31aae:	f04f 0800 	mov.w	r8, #0
                if ( iWidth )
   31ab2:	2b00      	cmp	r3, #0
   31ab4:	d13c      	bne.n	31b30 <am_util_stdio_vsprintf+0x4d4>
                iVal = uint64_to_str(ui64Val, pcBuf);
   31ab6:	4660      	mov	r0, ip
   31ab8:	4641      	mov	r1, r8
   31aba:	4622      	mov	r2, r4
   31abc:	f7ff fd48 	bl	31550 <uint64_to_str>
                if ( pcBuf )
   31ac0:	2c00      	cmp	r4, #0
   31ac2:	d1ef      	bne.n	31aa4 <am_util_stdio_vsprintf+0x448>
                    pcBuf += iVal;
   31ac4:	2400      	movs	r4, #0
                ui32CharCnt += iVal;
   31ac6:	4406      	add	r6, r0
                break;
   31ac8:	e684      	b.n	317d4 <am_util_stdio_vsprintf+0x178>
   31aca:	bf00      	nop
   31acc:	10051249 	.word	0x10051249
   31ad0:	003f2e3f 	.word	0x003f2e3f
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
   31ad4:	f10a 0a07 	add.w	sl, sl, #7
   31ad8:	f02a 0a07 	bic.w	sl, sl, #7
   31adc:	f8da 1004 	ldr.w	r1, [sl, #4]
   31ae0:	f85a 0b08 	ldr.w	r0, [sl], #8
                if ( i64Val < 0 )
   31ae4:	2900      	cmp	r1, #0
   31ae6:	dad4      	bge.n	31a92 <am_util_stdio_vsprintf+0x436>
                    ui64Val = -i64Val;          // Get absolute value
   31ae8:	f1d0 0c00 	rsbs	ip, r0, #0
   31aec:	eb61 0841 	sbc.w	r8, r1, r1, lsl #1
                if ( iWidth )
   31af0:	2b00      	cmp	r3, #0
   31af2:	f040 81b8 	bne.w	31e66 <am_util_stdio_vsprintf+0x80a>
                    ++ui32CharCnt;
   31af6:	3601      	adds	r6, #1
                        if ( pcBuf )
   31af8:	2c00      	cmp	r4, #0
   31afa:	f000 81a3 	beq.w	31e44 <am_util_stdio_vsprintf+0x7e8>
                            *pcBuf++ = '-';
   31afe:	4622      	mov	r2, r4
   31b00:	232d      	movs	r3, #45	@ 0x2d
   31b02:	f802 3b01 	strb.w	r3, [r2], #1
                iVal = uint64_to_str(ui64Val, pcBuf);
   31b06:	4660      	mov	r0, ip
   31b08:	4641      	mov	r1, r8
   31b0a:	f7ff fd21 	bl	31550 <uint64_to_str>
                            *pcBuf++ = '-';
   31b0e:	4614      	mov	r4, r2
                    pcBuf += iVal;
   31b10:	4404      	add	r4, r0
   31b12:	e7c8      	b.n	31aa6 <am_util_stdio_vsprintf+0x44a>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   31b14:	f10a 0a07 	add.w	sl, sl, #7
   31b18:	f02a 0a07 	bic.w	sl, sl, #7
   31b1c:	f8da 8004 	ldr.w	r8, [sl, #4]
   31b20:	f85a cb08 	ldr.w	ip, [sl], #8
   31b24:	e7c5      	b.n	31ab2 <am_util_stdio_vsprintf+0x456>
        uCnt++;
   31b26:	2701      	movs	r7, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   31b28:	78aa      	ldrb	r2, [r5, #2]
        bNeg = true;
   31b2a:	9700      	str	r7, [sp, #0]
        pcStr++;
   31b2c:	3502      	adds	r5, #2
        uCnt++;
   31b2e:	e6b8      	b.n	318a2 <am_util_stdio_vsprintf+0x246>
    while ( ui64Val )
   31b30:	ea5c 0308 	orrs.w	r3, ip, r8
   31b34:	f000 81e9 	beq.w	31f0a <am_util_stdio_vsprintf+0x8ae>
    int iNDigits = ui64Val ? 0 : 1;
   31b38:	2700      	movs	r7, #0
   31b3a:	9400      	str	r4, [sp, #0]
    while ( ui64Val )
   31b3c:	4660      	mov	r0, ip
    int iNDigits = ui64Val ? 0 : 1;
   31b3e:	463c      	mov	r4, r7
    while ( ui64Val )
   31b40:	4641      	mov	r1, r8
    int iNDigits = ui64Val ? 0 : 1;
   31b42:	4667      	mov	r7, ip
        ui64Val = divu64_10(ui64Val);
   31b44:	f7ff fca8 	bl	31498 <divu64_10>
    while ( ui64Val )
   31b48:	ea50 0201 	orrs.w	r2, r0, r1
        ++iNDigits;
   31b4c:	f104 0401 	add.w	r4, r4, #1
    while ( ui64Val )
   31b50:	d1f8      	bne.n	31b44 <am_util_stdio_vsprintf+0x4e8>
   31b52:	46bc      	mov	ip, r7
   31b54:	4627      	mov	r7, r4
   31b56:	9c00      	ldr	r4, [sp, #0]
                    iWidth -= ndigits_in_u64(ui64Val);
   31b58:	ebab 0707 	sub.w	r7, fp, r7
    if ( i32NumChars <= 0 )
   31b5c:	2f00      	cmp	r7, #0
   31b5e:	f340 8197 	ble.w	31e90 <am_util_stdio_vsprintf+0x834>
    while ( i32NumChars-- )
   31b62:	1e7b      	subs	r3, r7, #1
        if ( pcBuf )
   31b64:	b13c      	cbz	r4, 31b76 <am_util_stdio_vsprintf+0x51a>
   31b66:	4622      	mov	r2, r4
    while ( i32NumChars-- )
   31b68:	3b01      	subs	r3, #1
   31b6a:	1c59      	adds	r1, r3, #1
            *pcBuf++ = cPadChar;
   31b6c:	f882 9000 	strb.w	r9, [r2]
   31b70:	f102 0201 	add.w	r2, r2, #1
    while ( i32NumChars-- )
   31b74:	d1f8      	bne.n	31b68 <am_util_stdio_vsprintf+0x50c>
                    ui32CharCnt += iWidth;
   31b76:	443e      	add	r6, r7
                    pcBuf += pcBuf ? iWidth : 0;
   31b78:	2c00      	cmp	r4, #0
   31b7a:	f000 8183 	beq.w	31e84 <am_util_stdio_vsprintf+0x828>
   31b7e:	443c      	add	r4, r7
                iVal = uint64_to_str(ui64Val, pcBuf);
   31b80:	4622      	mov	r2, r4
   31b82:	4660      	mov	r0, ip
   31b84:	4641      	mov	r1, r8
   31b86:	f7ff fce3 	bl	31550 <uint64_to_str>
                    pcBuf += iVal;
   31b8a:	4404      	add	r4, r0
   31b8c:	e78b      	b.n	31aa6 <am_util_stdio_vsprintf+0x44a>
    else if (iExp2 >= 0)
   31b8e:	2900      	cmp	r1, #0
   31b90:	db6b      	blt.n	31c6a <am_util_stdio_vsprintf+0x60e>
    if (unFloatValue.I32 < 0)
   31b92:	2800      	cmp	r0, #0
                    *pcBuf++ = '\r';
   31b94:	4622      	mov	r2, r4
    if (unFloatValue.I32 < 0)
   31b96:	da02      	bge.n	31b9e <am_util_stdio_vsprintf+0x542>
        *pcBuf++ = '-';
   31b98:	232d      	movs	r3, #45	@ 0x2d
   31b9a:	f802 3b01 	strb.w	r3, [r2], #1
        i32IntPart = i32Significand >> (23 - iExp2);
   31b9e:	f1c1 0117 	rsb	r1, r1, #23
   31ba2:	fa4e f001 	asr.w	r0, lr, r1
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
   31ba6:	f1ac 087e 	sub.w	r8, ip, #126	@ 0x7e
            uint64_to_str(i32IntPart, pcBuf);
   31baa:	17c1      	asrs	r1, r0, #31
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
   31bac:	fa0e f808 	lsl.w	r8, lr, r8
            uint64_to_str(i32IntPart, pcBuf);
   31bb0:	f7ff fcce 	bl	31550 <uint64_to_str>
        while (*pcBuf)    // Get to end of new string
   31bb4:	7813      	ldrb	r3, [r2, #0]
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
   31bb6:	f028 487f 	bic.w	r8, r8, #4278190080	@ 0xff000000
        while (*pcBuf)    // Get to end of new string
   31bba:	2b00      	cmp	r3, #0
   31bbc:	f47f ae43 	bne.w	31846 <am_util_stdio_vsprintf+0x1ea>
   31bc0:	e645      	b.n	3184e <am_util_stdio_vsprintf+0x1f2>
   31bc2:	4bc0      	ldr	r3, [pc, #768]	@ (31ec4 <am_util_stdio_vsprintf+0x868>)
                        *(uint32_t*)pcBuf = u32PrntErrVal;
   31bc4:	6023      	str	r3, [r4, #0]
   31bc6:	2003      	movs	r0, #3
                    ui32CharCnt += iVal;
   31bc8:	4406      	add	r6, r0
                    pcBuf += iVal;
   31bca:	4404      	add	r4, r0
   31bcc:	e602      	b.n	317d4 <am_util_stdio_vsprintf+0x178>
                if ( iWidth > 0 )
   31bce:	f1b8 0f00 	cmp.w	r8, #0
   31bd2:	f340 808e 	ble.w	31cf2 <am_util_stdio_vsprintf+0x696>
    while ( i32NumChars-- )
   31bd6:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
        return ui32RetVal;
   31bda:	4659      	mov	r1, fp
        if ( pcBuf )
   31bdc:	b144      	cbz	r4, 31bf0 <am_util_stdio_vsprintf+0x594>
   31bde:	4642      	mov	r2, r8
   31be0:	4623      	mov	r3, r4
    while ( i32NumChars-- )
   31be2:	3a01      	subs	r2, #1
   31be4:	1c57      	adds	r7, r2, #1
            *pcBuf++ = cPadChar;
   31be6:	f883 9000 	strb.w	r9, [r3]
   31bea:	f103 0301 	add.w	r3, r3, #1
    while ( i32NumChars-- )
   31bee:	d1f8      	bne.n	31be2 <am_util_stdio_vsprintf+0x586>
                        ui32CharCnt += iWidth;
   31bf0:	f108 0301 	add.w	r3, r8, #1
                while (*pcStr != 0x0)
   31bf4:	f89b 7000 	ldrb.w	r7, [fp]
                        ui32CharCnt += iWidth;
   31bf8:	441e      	add	r6, r3
                        pcBuf += pcBuf ? iWidth : 0;
   31bfa:	2c00      	cmp	r4, #0
   31bfc:	f000 814a 	beq.w	31e94 <am_util_stdio_vsprintf+0x838>
   31c00:	441c      	add	r4, r3
                while (*pcStr != 0x0)
   31c02:	2f00      	cmp	r7, #0
   31c04:	f43f ade6 	beq.w	317d4 <am_util_stdio_vsprintf+0x178>
   31c08:	465b      	mov	r3, fp
                        iWidth = 0;
   31c0a:	f04f 0800 	mov.w	r8, #0
   31c0e:	e688      	b.n	31922 <am_util_stdio_vsprintf+0x2c6>
        switch ( *pcFmt )
   31c10:	2700      	movs	r7, #0
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   31c12:	f85a 2b04 	ldr.w	r2, [sl], #4
   31c16:	2100      	movs	r1, #0
                if ( iWidth )
   31c18:	2b00      	cmp	r3, #0
   31c1a:	d17e      	bne.n	31d1a <am_util_stdio_vsprintf+0x6be>
    if ( ui64Val == 0 )
   31c1c:	ea52 0301 	orrs.w	r3, r2, r1
   31c20:	f040 80af 	bne.w	31d82 <am_util_stdio_vsprintf+0x726>
   31c24:	2330      	movs	r3, #48	@ 0x30
   31c26:	f88d 300c 	strb.w	r3, [sp, #12]
   31c2a:	2001      	movs	r0, #1
    if (pcBuf)
   31c2c:	2c00      	cmp	r4, #0
   31c2e:	f43f af3a 	beq.w	31aa6 <am_util_stdio_vsprintf+0x44a>
   31c32:	f108 0801 	add.w	r8, r8, #1
   31c36:	af03      	add	r7, sp, #12
   31c38:	eb07 0308 	add.w	r3, r7, r8
   31c3c:	1e62      	subs	r2, r4, #1
            *pcBuf++ = tbuf[ix];
   31c3e:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
   31c42:	f802 1f01 	strb.w	r1, [r2, #1]!
        while (ix--)
   31c46:	42bb      	cmp	r3, r7
   31c48:	d1f9      	bne.n	31c3e <am_util_stdio_vsprintf+0x5e2>
        *pcBuf = 0;
   31c4a:	2300      	movs	r3, #0
   31c4c:	f804 3008 	strb.w	r3, [r4, r8]
                ui32CharCnt += iVal;
   31c50:	4406      	add	r6, r0
                    pcBuf += iVal;
   31c52:	4404      	add	r4, r0
                break;
   31c54:	e5be      	b.n	317d4 <am_util_stdio_vsprintf+0x178>
        switch ( *pcFmt )
   31c56:	2701      	movs	r7, #1
   31c58:	e7db      	b.n	31c12 <am_util_stdio_vsprintf+0x5b6>
                if ( iWidth > 0 )
   31c5a:	f1b8 0f00 	cmp.w	r8, #0
   31c5e:	f340 8135 	ble.w	31ecc <am_util_stdio_vsprintf+0x870>
    uint32_t ui32RetVal = 0;
   31c62:	4639      	mov	r1, r7
    while ( i32NumChars-- )
   31c64:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
   31c68:	e7b8      	b.n	31bdc <am_util_stdio_vsprintf+0x580>
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
   31c6a:	43c9      	mvns	r1, r1
    if (unFloatValue.I32 < 0)
   31c6c:	2800      	cmp	r0, #0
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
   31c6e:	fa4e f801 	asr.w	r8, lr, r1
        *pcBuf++ = '-';
   31c72:	4622      	mov	r2, r4
    if (unFloatValue.I32 < 0)
   31c74:	f2c0 8130 	blt.w	31ed8 <am_util_stdio_vsprintf+0x87c>
        *pcBuf++ = '0';
   31c78:	f642 6330 	movw	r3, #11824	@ 0x2e30
   31c7c:	f822 3b02 	strh.w	r3, [r2], #2
   31c80:	2111      	movs	r1, #17
   31c82:	2002      	movs	r0, #2
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
   31c84:	42b9      	cmp	r1, r7
   31c86:	bfa8      	it	ge
   31c88:	4639      	movge	r1, r7
        for (jx = 0; jx < iMax; jx++)
   31c8a:	2900      	cmp	r1, #0
   31c8c:	f340 813f 	ble.w	31f0e <am_util_stdio_vsprintf+0x8b2>
   31c90:	4411      	add	r1, r2
            i32FracPart *= 10;
   31c92:	eb08 0888 	add.w	r8, r8, r8, lsl #2
            *pcBuf++ = (i32FracPart >> 24) + '0';
   31c96:	ea4f 53e8 	mov.w	r3, r8, asr #23
   31c9a:	3330      	adds	r3, #48	@ 0x30
   31c9c:	f802 3b01 	strb.w	r3, [r2], #1
            i32FracPart *= 10;
   31ca0:	ea4f 0848 	mov.w	r8, r8, lsl #1
        for (jx = 0; jx < iMax; jx++)
   31ca4:	4291      	cmp	r1, r2
            i32FracPart &= 0x00FFFFFF;
   31ca6:	f028 487f 	bic.w	r8, r8, #4278190080	@ 0xff000000
        for (jx = 0; jx < iMax; jx++)
   31caa:	d1f2      	bne.n	31c92 <am_util_stdio_vsprintf+0x636>
    return (pcBuf - pcBufInitial);
   31cac:	1b08      	subs	r0, r1, r4
        if ( ((i32FracPart * 10) >> 24) >= 5 )
   31cae:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   31cb2:	f348 53c7 	sbfx	r3, r8, #23, #8
   31cb6:	2b04      	cmp	r3, #4
   31cb8:	f77f add3 	ble.w	31862 <am_util_stdio_vsprintf+0x206>
            pcBuftmp = pcBuf - 1;
   31cbc:	1e4b      	subs	r3, r1, #1
            while ( pcBuftmp >= pcBufInitial )
   31cbe:	429c      	cmp	r4, r3
   31cc0:	f63f adcf 	bhi.w	31862 <am_util_stdio_vsprintf+0x206>
                    *pcBuftmp = '0';
   31cc4:	f04f 0e30 	mov.w	lr, #48	@ 0x30
   31cc8:	e004      	b.n	31cd4 <am_util_stdio_vsprintf+0x678>
   31cca:	f883 e001 	strb.w	lr, [r3, #1]
            while ( pcBuftmp >= pcBufInitial )
   31cce:	42bc      	cmp	r4, r7
   31cd0:	f43f adc7 	beq.w	31862 <am_util_stdio_vsprintf+0x206>
                if ( *pcBuftmp == '.' )
   31cd4:	781a      	ldrb	r2, [r3, #0]
   31cd6:	2a2e      	cmp	r2, #46	@ 0x2e
   31cd8:	461f      	mov	r7, r3
   31cda:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
   31cde:	d0f6      	beq.n	31cce <am_util_stdio_vsprintf+0x672>
                else if ( *pcBuftmp == '9' )
   31ce0:	2a39      	cmp	r2, #57	@ 0x39
   31ce2:	d0f2      	beq.n	31cca <am_util_stdio_vsprintf+0x66e>
                    *pcBuftmp += 1;
   31ce4:	3201      	adds	r2, #1
   31ce6:	703a      	strb	r2, [r7, #0]
                    break;
   31ce8:	e5bb      	b.n	31862 <am_util_stdio_vsprintf+0x206>
        *pcBuf++ = '-';
   31cea:	232d      	movs	r3, #45	@ 0x2d
   31cec:	f802 3b01 	strb.w	r3, [r2], #1
    if (i32IntPart == 0)
   31cf0:	e59c      	b.n	3182c <am_util_stdio_vsprintf+0x1d0>
    while ( *pcBuf++ )
   31cf2:	f89b 7000 	ldrb.w	r7, [fp]
                while (*pcStr != 0x0)
   31cf6:	2f00      	cmp	r7, #0
   31cf8:	f000 80f7 	beq.w	31eea <am_util_stdio_vsprintf+0x88e>
   31cfc:	4659      	mov	r1, fp
   31cfe:	e60c      	b.n	3191a <am_util_stdio_vsprintf+0x2be>
   31d00:	2100      	movs	r1, #0
   31d02:	e633      	b.n	3196c <am_util_stdio_vsprintf+0x310>
        switch ( *pcFmt )
   31d04:	2700      	movs	r7, #0
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   31d06:	f10a 0a07 	add.w	sl, sl, #7
   31d0a:	f02a 0a07 	bic.w	sl, sl, #7
   31d0e:	f8da 1004 	ldr.w	r1, [sl, #4]
   31d12:	f85a 2b08 	ldr.w	r2, [sl], #8
                if ( iWidth )
   31d16:	2b00      	cmp	r3, #0
   31d18:	d080      	beq.n	31c1c <am_util_stdio_vsprintf+0x5c0>
    while ( ui64Val )
   31d1a:	ea52 0301 	orrs.w	r3, r2, r1
   31d1e:	f000 80bd 	beq.w	31e9c <am_util_stdio_vsprintf+0x840>
   31d22:	4613      	mov	r3, r2
   31d24:	4608      	mov	r0, r1
    int iDigits = ui64Val ? 0 : 1;
   31d26:	f04f 0c00 	mov.w	ip, #0
        ui64Val >>= 4;
   31d2a:	091b      	lsrs	r3, r3, #4
   31d2c:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
   31d30:	0900      	lsrs	r0, r0, #4
    while ( ui64Val )
   31d32:	ea53 0e00 	orrs.w	lr, r3, r0
        ++iDigits;
   31d36:	f10c 0c01 	add.w	ip, ip, #1
    while ( ui64Val )
   31d3a:	d1f6      	bne.n	31d2a <am_util_stdio_vsprintf+0x6ce>
                    iWidth -= ndigits_in_hex(ui64Val);
   31d3c:	ebab 0c0c 	sub.w	ip, fp, ip
    if ( i32NumChars <= 0 )
   31d40:	f1bc 0f00 	cmp.w	ip, #0
   31d44:	f340 8085 	ble.w	31e52 <am_util_stdio_vsprintf+0x7f6>
    while ( i32NumChars-- )
   31d48:	f10c 33ff 	add.w	r3, ip, #4294967295	@ 0xffffffff
        if ( pcBuf )
   31d4c:	b14c      	cbz	r4, 31d62 <am_util_stdio_vsprintf+0x706>
   31d4e:	4620      	mov	r0, r4
    while ( i32NumChars-- )
   31d50:	3b01      	subs	r3, #1
   31d52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
   31d56:	4686      	mov	lr, r0
            *pcBuf++ = cPadChar;
   31d58:	f880 9000 	strb.w	r9, [r0]
   31d5c:	f100 0001 	add.w	r0, r0, #1
    while ( i32NumChars-- )
   31d60:	d1f6      	bne.n	31d50 <am_util_stdio_vsprintf+0x6f4>
                    ui32CharCnt += iWidth;
   31d62:	4466      	add	r6, ip
                    pcBuf += pcBuf ? iWidth : 0;
   31d64:	2c00      	cmp	r4, #0
   31d66:	d067      	beq.n	31e38 <am_util_stdio_vsprintf+0x7dc>
    if ( ui64Val == 0 )
   31d68:	ea52 0301 	orrs.w	r3, r2, r1
                    pcBuf += pcBuf ? iWidth : 0;
   31d6c:	4464      	add	r4, ip
    if ( ui64Val == 0 )
   31d6e:	d108      	bne.n	31d82 <am_util_stdio_vsprintf+0x726>
   31d70:	2330      	movs	r3, #48	@ 0x30
   31d72:	f88d 300c 	strb.w	r3, [sp, #12]
   31d76:	f04f 0800 	mov.w	r8, #0
   31d7a:	2001      	movs	r0, #1
   31d7c:	e759      	b.n	31c32 <am_util_stdio_vsprintf+0x5d6>
        switch ( *pcFmt )
   31d7e:	2701      	movs	r7, #1
   31d80:	e7c1      	b.n	31d06 <am_util_stdio_vsprintf+0x6aa>
   31d82:	2f00      	cmp	r7, #0
   31d84:	bf14      	ite	ne
   31d86:	f04f 0c27 	movne.w	ip, #39	@ 0x27
   31d8a:	f04f 0c07 	moveq.w	ip, #7
   31d8e:	af03      	add	r7, sp, #12
    int iNumDig, ix = 0;
   31d90:	f04f 0800 	mov.w	r8, #0
   31d94:	e000      	b.n	31d98 <am_util_stdio_vsprintf+0x73c>
        tbuf[ix++] = cCh + '0';
   31d96:	4680      	mov	r8, r0
        cCh = ui64Val & 0xf;
   31d98:	f002 030f 	and.w	r3, r2, #15
        if ( cCh > 9 )
   31d9c:	2b09      	cmp	r3, #9
        ui64Val >>= 4;
   31d9e:	ea4f 1012 	mov.w	r0, r2, lsr #4
            cCh += bLower ? 0x27 : 0x7;
   31da2:	bf88      	it	hi
   31da4:	4463      	addhi	r3, ip
        ui64Val >>= 4;
   31da6:	ea40 7201 	orr.w	r2, r0, r1, lsl #28
        tbuf[ix++] = cCh + '0';
   31daa:	3330      	adds	r3, #48	@ 0x30
        ui64Val >>= 4;
   31dac:	0909      	lsrs	r1, r1, #4
        tbuf[ix++] = cCh + '0';
   31dae:	f807 3b01 	strb.w	r3, [r7], #1
    while ( ui64Val )
   31db2:	ea52 0301 	orrs.w	r3, r2, r1
        tbuf[ix++] = cCh + '0';
   31db6:	f108 0001 	add.w	r0, r8, #1
    while ( ui64Val )
   31dba:	d1ec      	bne.n	31d96 <am_util_stdio_vsprintf+0x73a>
   31dbc:	e736      	b.n	31c2c <am_util_stdio_vsprintf+0x5d0>
    while ( ui64Val )
   31dbe:	ea50 0301 	orrs.w	r3, r0, r1
                    bNeg = false;
   31dc2:	bf18      	it	ne
   31dc4:	2300      	movne	r3, #0
    while ( ui64Val )
   31dc6:	f000 80af 	beq.w	31f28 <am_util_stdio_vsprintf+0x8cc>
    int iNDigits = ui64Val ? 0 : 1;
   31dca:	2700      	movs	r7, #0
   31dcc:	e9cd 3400 	strd	r3, r4, [sp]
                    bNeg = false;
   31dd0:	4660      	mov	r0, ip
    int iNDigits = ui64Val ? 0 : 1;
   31dd2:	463c      	mov	r4, r7
                    bNeg = false;
   31dd4:	4641      	mov	r1, r8
    int iNDigits = ui64Val ? 0 : 1;
   31dd6:	4667      	mov	r7, ip
        ui64Val = divu64_10(ui64Val);
   31dd8:	f7ff fb5e 	bl	31498 <divu64_10>
    while ( ui64Val )
   31ddc:	ea50 0201 	orrs.w	r2, r0, r1
        ++iNDigits;
   31de0:	f104 0401 	add.w	r4, r4, #1
    while ( ui64Val )
   31de4:	d1f8      	bne.n	31dd8 <am_util_stdio_vsprintf+0x77c>
                    iWidth -= ndigits_in_i64(ui64Val);
   31de6:	9b00      	ldr	r3, [sp, #0]
   31de8:	46bc      	mov	ip, r7
   31dea:	4627      	mov	r7, r4
   31dec:	ebab 0707 	sub.w	r7, fp, r7
   31df0:	9c01      	ldr	r4, [sp, #4]
                    if ( bNeg )
   31df2:	b12b      	cbz	r3, 31e00 <am_util_stdio_vsprintf+0x7a4>
                        if ( ui8PadChar == '0' )
   31df4:	f1b9 0f30 	cmp.w	r9, #48	@ 0x30
                        --iWidth;
   31df8:	f107 31ff 	add.w	r1, r7, #4294967295	@ 0xffffffff
                        if ( ui8PadChar == '0' )
   31dfc:	d055      	beq.n	31eaa <am_util_stdio_vsprintf+0x84e>
                        --iWidth;
   31dfe:	460f      	mov	r7, r1
    if ( i32NumChars <= 0 )
   31e00:	2f00      	cmp	r7, #0
   31e02:	dd4e      	ble.n	31ea2 <am_util_stdio_vsprintf+0x846>
    while ( i32NumChars-- )
   31e04:	3f01      	subs	r7, #1
        if ( pcBuf )
   31e06:	b144      	cbz	r4, 31e1a <am_util_stdio_vsprintf+0x7be>
   31e08:	4639      	mov	r1, r7
   31e0a:	4622      	mov	r2, r4
    while ( i32NumChars-- )
   31e0c:	3901      	subs	r1, #1
   31e0e:	1c48      	adds	r0, r1, #1
            *pcBuf++ = cPadChar;
   31e10:	f882 9000 	strb.w	r9, [r2]
   31e14:	f102 0201 	add.w	r2, r2, #1
    while ( i32NumChars-- )
   31e18:	d1f8      	bne.n	31e0c <am_util_stdio_vsprintf+0x7b0>
                    ui32CharCnt += iWidth;
   31e1a:	1c7a      	adds	r2, r7, #1
   31e1c:	4416      	add	r6, r2
                    pcBuf += pcBuf ? iWidth : 0;
   31e1e:	b324      	cbz	r4, 31e6a <am_util_stdio_vsprintf+0x80e>
   31e20:	4414      	add	r4, r2
                    if ( bNeg  &&  (ui8PadChar == ' ') )
   31e22:	b113      	cbz	r3, 31e2a <am_util_stdio_vsprintf+0x7ce>
   31e24:	f1b9 0f20 	cmp.w	r9, #32
   31e28:	d063      	beq.n	31ef2 <am_util_stdio_vsprintf+0x896>
                iVal = uint64_to_str(ui64Val, pcBuf);
   31e2a:	4622      	mov	r2, r4
   31e2c:	4660      	mov	r0, ip
   31e2e:	4641      	mov	r1, r8
   31e30:	f7ff fb8e 	bl	31550 <uint64_to_str>
                    pcBuf += iVal;
   31e34:	4404      	add	r4, r0
   31e36:	e636      	b.n	31aa6 <am_util_stdio_vsprintf+0x44a>
    if ( ui64Val == 0 )
   31e38:	ea52 0301 	orrs.w	r3, r2, r1
   31e3c:	d1a1      	bne.n	31d82 <am_util_stdio_vsprintf+0x726>
   31e3e:	2001      	movs	r0, #1
                ui32CharCnt += iVal;
   31e40:	4406      	add	r6, r0
                break;
   31e42:	e4c7      	b.n	317d4 <am_util_stdio_vsprintf+0x178>
                iVal = uint64_to_str(ui64Val, pcBuf);
   31e44:	4660      	mov	r0, ip
   31e46:	4641      	mov	r1, r8
   31e48:	4622      	mov	r2, r4
   31e4a:	f7ff fb81 	bl	31550 <uint64_to_str>
                ui32CharCnt += iVal;
   31e4e:	4406      	add	r6, r0
                break;
   31e50:	e4c0      	b.n	317d4 <am_util_stdio_vsprintf+0x178>
   31e52:	f04f 0c00 	mov.w	ip, #0
   31e56:	e785      	b.n	31d64 <am_util_stdio_vsprintf+0x708>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   31e58:	2100      	movs	r1, #0
   31e5a:	e542      	b.n	318e2 <am_util_stdio_vsprintf+0x286>
    *pcBuf++ = '.';
   31e5c:	3201      	adds	r2, #1
        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
   31e5e:	1b10      	subs	r0, r2, r4
   31e60:	f1c0 0113 	rsb	r1, r0, #19
   31e64:	e70e      	b.n	31c84 <am_util_stdio_vsprintf+0x628>
                    bNeg = true;
   31e66:	2301      	movs	r3, #1
   31e68:	e7af      	b.n	31dca <am_util_stdio_vsprintf+0x76e>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
   31e6a:	2b00      	cmp	r3, #0
   31e6c:	d0ea      	beq.n	31e44 <am_util_stdio_vsprintf+0x7e8>
   31e6e:	f1b9 0f20 	cmp.w	r9, #32
   31e72:	d051      	beq.n	31f18 <am_util_stdio_vsprintf+0x8bc>
                iVal = uint64_to_str(ui64Val, pcBuf);
   31e74:	2200      	movs	r2, #0
   31e76:	4660      	mov	r0, ip
   31e78:	4641      	mov	r1, r8
   31e7a:	f7ff fb69 	bl	31550 <uint64_to_str>
                ui32CharCnt += iVal;
   31e7e:	4614      	mov	r4, r2
   31e80:	4406      	add	r6, r0
                break;
   31e82:	e4a7      	b.n	317d4 <am_util_stdio_vsprintf+0x178>
                iVal = uint64_to_str(ui64Val, pcBuf);
   31e84:	4622      	mov	r2, r4
   31e86:	4660      	mov	r0, ip
   31e88:	4641      	mov	r1, r8
   31e8a:	f7ff fb61 	bl	31550 <uint64_to_str>
                if ( pcBuf )
   31e8e:	e619      	b.n	31ac4 <am_util_stdio_vsprintf+0x468>
   31e90:	2700      	movs	r7, #0
   31e92:	e671      	b.n	31b78 <am_util_stdio_vsprintf+0x51c>
                while (*pcStr != 0x0)
   31e94:	2f00      	cmp	r7, #0
   31e96:	f47f ade8 	bne.w	31a6a <am_util_stdio_vsprintf+0x40e>
   31e9a:	e49b      	b.n	317d4 <am_util_stdio_vsprintf+0x178>
    int iDigits = ui64Val ? 0 : 1;
   31e9c:	f04f 0c01 	mov.w	ip, #1
   31ea0:	e74c      	b.n	31d3c <am_util_stdio_vsprintf+0x6e0>
   31ea2:	2200      	movs	r2, #0
   31ea4:	e7bb      	b.n	31e1e <am_util_stdio_vsprintf+0x7c2>
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
   31ea6:	4b08      	ldr	r3, [pc, #32]	@ (31ec8 <am_util_stdio_vsprintf+0x86c>)
   31ea8:	e68c      	b.n	31bc4 <am_util_stdio_vsprintf+0x568>
                    ++ui32CharCnt;
   31eaa:	3601      	adds	r6, #1
                            if ( pcBuf )
   31eac:	2c00      	cmp	r4, #0
   31eae:	d03f      	beq.n	31f30 <am_util_stdio_vsprintf+0x8d4>
                                *pcBuf++ = '-';
   31eb0:	4622      	mov	r2, r4
   31eb2:	202d      	movs	r0, #45	@ 0x2d
    if ( i32NumChars <= 0 )
   31eb4:	2900      	cmp	r1, #0
                                *pcBuf++ = '-';
   31eb6:	f802 0b01 	strb.w	r0, [r2], #1
    if ( i32NumChars <= 0 )
   31eba:	dd3d      	ble.n	31f38 <am_util_stdio_vsprintf+0x8dc>
    while ( i32NumChars-- )
   31ebc:	1eb9      	subs	r1, r7, #2
                                *pcBuf++ = '-';
   31ebe:	4614      	mov	r4, r2
    while ( i32NumChars-- )
   31ec0:	460f      	mov	r7, r1
   31ec2:	e7a3      	b.n	31e0c <am_util_stdio_vsprintf+0x7b0>
   31ec4:	00302e30 	.word	0x00302e30
   31ec8:	00232e23 	.word	0x00232e23
                if ( iWidth )
   31ecc:	f43f ac82 	beq.w	317d4 <am_util_stdio_vsprintf+0x178>
                    iWidth = -iWidth;
   31ed0:	f1c8 0800 	rsb	r8, r8, #0
                    if ( ui32strlen < iWidth )
   31ed4:	4641      	mov	r1, r8
    if ( i32NumChars <= 0 )
   31ed6:	e53d      	b.n	31954 <am_util_stdio_vsprintf+0x2f8>
        *pcBuf++ = '-';
   31ed8:	f243 032d 	movw	r3, #12333	@ 0x302d
   31edc:	f822 3b03 	strh.w	r3, [r2], #3
    *pcBuf++ = '.';
   31ee0:	232e      	movs	r3, #46	@ 0x2e
   31ee2:	70a3      	strb	r3, [r4, #2]
   31ee4:	2110      	movs	r1, #16
   31ee6:	2003      	movs	r0, #3
   31ee8:	e6cc      	b.n	31c84 <am_util_stdio_vsprintf+0x628>
                if ( iWidth )
   31eea:	f1b8 0f00 	cmp.w	r8, #0
   31eee:	d1ef      	bne.n	31ed0 <am_util_stdio_vsprintf+0x874>
   31ef0:	e470      	b.n	317d4 <am_util_stdio_vsprintf+0x178>
                            *pcBuf++ = '-';
   31ef2:	4622      	mov	r2, r4
   31ef4:	232d      	movs	r3, #45	@ 0x2d
   31ef6:	f802 3b01 	strb.w	r3, [r2], #1
                iVal = uint64_to_str(ui64Val, pcBuf);
   31efa:	4660      	mov	r0, ip
   31efc:	4641      	mov	r1, r8
   31efe:	f7ff fb27 	bl	31550 <uint64_to_str>
                            *pcBuf++ = '-';
   31f02:	4614      	mov	r4, r2
                        ++ui32CharCnt;
   31f04:	3601      	adds	r6, #1
                    pcBuf += iVal;
   31f06:	4404      	add	r4, r0
   31f08:	e5cd      	b.n	31aa6 <am_util_stdio_vsprintf+0x44a>
    int iNDigits = ui64Val ? 0 : 1;
   31f0a:	2701      	movs	r7, #1
   31f0c:	e624      	b.n	31b58 <am_util_stdio_vsprintf+0x4fc>
    *pcBuf++ = '.';
   31f0e:	4611      	mov	r1, r2
   31f10:	e6cd      	b.n	31cae <am_util_stdio_vsprintf+0x652>
   31f12:	232e      	movs	r3, #46	@ 0x2e
   31f14:	7013      	strb	r3, [r2, #0]
    if (i32FracPart == 0)
   31f16:	e4a0      	b.n	3185a <am_util_stdio_vsprintf+0x1fe>
                iVal = uint64_to_str(ui64Val, pcBuf);
   31f18:	4660      	mov	r0, ip
   31f1a:	4641      	mov	r1, r8
   31f1c:	4622      	mov	r2, r4
   31f1e:	f7ff fb17 	bl	31550 <uint64_to_str>
                        ++ui32CharCnt;
   31f22:	3601      	adds	r6, #1
                ui32CharCnt += iVal;
   31f24:	4406      	add	r6, r0
                break;
   31f26:	e455      	b.n	317d4 <am_util_stdio_vsprintf+0x178>
                    iWidth -= ndigits_in_i64(ui64Val);
   31f28:	f10b 37ff 	add.w	r7, fp, #4294967295	@ 0xffffffff
                    bNeg = false;
   31f2c:	2300      	movs	r3, #0
   31f2e:	e767      	b.n	31e00 <am_util_stdio_vsprintf+0x7a4>
    if ( i32NumChars <= 0 )
   31f30:	2900      	cmp	r1, #0
   31f32:	dd9f      	ble.n	31e74 <am_util_stdio_vsprintf+0x818>
    while ( i32NumChars-- )
   31f34:	3f02      	subs	r7, #2
   31f36:	e770      	b.n	31e1a <am_util_stdio_vsprintf+0x7be>
                    pcBuf += pcBuf ? iWidth : 0;
   31f38:	4614      	mov	r4, r2
   31f3a:	e776      	b.n	31e2a <am_util_stdio_vsprintf+0x7ce>

00031f3c <am_util_stdio_vprintf>:
    return ui32CharCnt;
}

uint32_t
am_util_stdio_vprintf(const char *pcFmt, va_list pArgs)
{
   31f3c:	b538      	push	{r3, r4, r5, lr}
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
   31f3e:	4d09      	ldr	r5, [pc, #36]	@ (31f64 <am_util_stdio_vprintf+0x28>)
   31f40:	682b      	ldr	r3, [r5, #0]
   31f42:	b15b      	cbz	r3, 31f5c <am_util_stdio_vprintf+0x20>
   31f44:	4604      	mov	r4, r0
   31f46:	460a      	mov	r2, r1
    {
        return 0;
    }

    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
   31f48:	4807      	ldr	r0, [pc, #28]	@ (31f68 <am_util_stdio_vprintf+0x2c>)
   31f4a:	4621      	mov	r1, r4
   31f4c:	f7ff fb86 	bl	3165c <am_util_stdio_vsprintf>

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
   31f50:	682a      	ldr	r2, [r5, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
   31f52:	4604      	mov	r4, r0
    g_pfnCharPrint(g_prfbuf);
   31f54:	4804      	ldr	r0, [pc, #16]	@ (31f68 <am_util_stdio_vprintf+0x2c>)
   31f56:	4790      	blx	r2

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
}
   31f58:	4620      	mov	r0, r4
   31f5a:	bd38      	pop	{r3, r4, r5, pc}
        return 0;
   31f5c:	461c      	mov	r4, r3
}
   31f5e:	4620      	mov	r0, r4
   31f60:	bd38      	pop	{r3, r4, r5, pc}
   31f62:	bf00      	nop
   31f64:	1005164c 	.word	0x1005164c
   31f68:	1005124c 	.word	0x1005124c

00031f6c <vApplicationMallocFailedHook>:
    // free memory available in the FreeRTOS heap.  pvPortMalloc() is called
    // internally by FreeRTOS API functions that create tasks, queues, software
    // timers, and semaphores.  The size of the FreeRTOS heap is set by the
    // configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h.
    //
    while (1)
   31f6c:	e7fe      	b.n	31f6c <vApplicationMallocFailedHook>
   31f6e:	bf00      	nop

00031f70 <vApplicationStackOverflowHook>:
    // Run time stack overflow checking is performed if
    // configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
    // function is called if a stack overflow is detected.
    //
    while (1) {
        __asm("BKPT #0\n"); // Break into the debugger
   31f70:	be00      	bkpt	0x0000
    while (1) {
   31f72:	e7fd      	b.n	31f70 <vApplicationStackOverflowHook>

00031f74 <vTaskSwitchContext.part.0>:
         * switch. */
        xYieldPending = pdTRUE;
    }
    else
    {
        xYieldPending = pdFALSE;
   31f74:	4b2b      	ldr	r3, [pc, #172]	@ (32024 <vTaskSwitchContext.part.0+0xb0>)
void vTaskSwitchContext( void )
   31f76:	b570      	push	{r4, r5, r6, lr}
        xYieldPending = pdFALSE;
   31f78:	2200      	movs	r2, #0
            ulTaskSwitchedInTime = ulTotalRunTime;
        }
        #endif /* configGENERATE_RUN_TIME_STATS */

        /* Check for stack overflow, if configured. */
        taskCHECK_FOR_STACK_OVERFLOW();
   31f7a:	4c2b      	ldr	r4, [pc, #172]	@ (32028 <vTaskSwitchContext.part.0+0xb4>)
        xYieldPending = pdFALSE;
   31f7c:	601a      	str	r2, [r3, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
   31f7e:	6823      	ldr	r3, [r4, #0]
   31f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
   31f82:	681a      	ldr	r2, [r3, #0]
   31f84:	f1b2 3fa5 	cmp.w	r2, #2779096485	@ 0xa5a5a5a5
   31f88:	d103      	bne.n	31f92 <vTaskSwitchContext.part.0+0x1e>
   31f8a:	685a      	ldr	r2, [r3, #4]
   31f8c:	f1b2 3fa5 	cmp.w	r2, #2779096485	@ 0xa5a5a5a5
   31f90:	d03f      	beq.n	32012 <vTaskSwitchContext.part.0+0x9e>
   31f92:	6820      	ldr	r0, [r4, #0]
   31f94:	6821      	ldr	r1, [r4, #0]
   31f96:	3134      	adds	r1, #52	@ 0x34
   31f98:	f7ff ffea 	bl	31f70 <vApplicationStackOverflowHook>
        }
        #endif

        /* Select a new task to run using either the generic C or port
         * optimised asm code. */
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   31f9c:	4d23      	ldr	r5, [pc, #140]	@ (3202c <vTaskSwitchContext.part.0+0xb8>)
   31f9e:	4a24      	ldr	r2, [pc, #144]	@ (32030 <vTaskSwitchContext.part.0+0xbc>)
   31fa0:	682b      	ldr	r3, [r5, #0]
   31fa2:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   31fa6:	0080      	lsls	r0, r0, #2
   31fa8:	0099      	lsls	r1, r3, #2
   31faa:	5810      	ldr	r0, [r2, r0]
   31fac:	bb08      	cbnz	r0, 31ff2 <vTaskSwitchContext.part.0+0x7e>
   31fae:	b1f3      	cbz	r3, 31fee <vTaskSwitchContext.part.0+0x7a>
   31fb0:	1e58      	subs	r0, r3, #1
   31fb2:	eb00 0180 	add.w	r1, r0, r0, lsl #2
   31fb6:	0089      	lsls	r1, r1, #2
   31fb8:	5856      	ldr	r6, [r2, r1]
   31fba:	0081      	lsls	r1, r0, #2
   31fbc:	b9c6      	cbnz	r6, 31ff0 <vTaskSwitchContext.part.0+0x7c>
   31fbe:	b1b0      	cbz	r0, 31fee <vTaskSwitchContext.part.0+0x7a>
   31fc0:	1e98      	subs	r0, r3, #2
   31fc2:	eb00 0180 	add.w	r1, r0, r0, lsl #2
   31fc6:	0089      	lsls	r1, r1, #2
   31fc8:	5856      	ldr	r6, [r2, r1]
   31fca:	0081      	lsls	r1, r0, #2
   31fcc:	b986      	cbnz	r6, 31ff0 <vTaskSwitchContext.part.0+0x7c>
   31fce:	b170      	cbz	r0, 31fee <vTaskSwitchContext.part.0+0x7a>
   31fd0:	1ed8      	subs	r0, r3, #3
   31fd2:	eb00 0180 	add.w	r1, r0, r0, lsl #2
   31fd6:	0089      	lsls	r1, r1, #2
   31fd8:	5856      	ldr	r6, [r2, r1]
   31fda:	0081      	lsls	r1, r0, #2
   31fdc:	b946      	cbnz	r6, 31ff0 <vTaskSwitchContext.part.0+0x7c>
   31fde:	b130      	cbz	r0, 31fee <vTaskSwitchContext.part.0+0x7a>
   31fe0:	3b04      	subs	r3, #4
   31fe2:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   31fe6:	0080      	lsls	r0, r0, #2
   31fe8:	0099      	lsls	r1, r3, #2
   31fea:	5810      	ldr	r0, [r2, r0]
   31fec:	b908      	cbnz	r0, 31ff2 <vTaskSwitchContext.part.0+0x7e>
   31fee:	e7fe      	b.n	31fee <vTaskSwitchContext.part.0+0x7a>
   31ff0:	4603      	mov	r3, r0
   31ff2:	4419      	add	r1, r3
   31ff4:	eb02 0081 	add.w	r0, r2, r1, lsl #2
   31ff8:	4602      	mov	r2, r0
   31ffa:	6841      	ldr	r1, [r0, #4]
   31ffc:	6849      	ldr	r1, [r1, #4]
   31ffe:	6041      	str	r1, [r0, #4]
   32000:	3208      	adds	r2, #8
   32002:	4291      	cmp	r1, r2
   32004:	bf04      	itt	eq
   32006:	6849      	ldreq	r1, [r1, #4]
   32008:	6041      	streq	r1, [r0, #4]
   3200a:	68ca      	ldr	r2, [r1, #12]
   3200c:	6022      	str	r2, [r4, #0]
   3200e:	602b      	str	r3, [r5, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
   32010:	bd70      	pop	{r4, r5, r6, pc}
        taskCHECK_FOR_STACK_OVERFLOW();
   32012:	689a      	ldr	r2, [r3, #8]
   32014:	f1b2 3fa5 	cmp.w	r2, #2779096485	@ 0xa5a5a5a5
   32018:	d1bb      	bne.n	31f92 <vTaskSwitchContext.part.0+0x1e>
   3201a:	68db      	ldr	r3, [r3, #12]
   3201c:	f1b3 3fa5 	cmp.w	r3, #2779096485	@ 0xa5a5a5a5
   32020:	d1b7      	bne.n	31f92 <vTaskSwitchContext.part.0+0x1e>
   32022:	e7bb      	b.n	31f9c <vTaskSwitchContext.part.0+0x28>
   32024:	1005165c 	.word	0x1005165c
   32028:	100516dc 	.word	0x100516dc
   3202c:	10051664 	.word	0x10051664
   32030:	1005168c 	.word	0x1005168c

00032034 <xTaskIncrementTick.part.0>:
BaseType_t xTaskIncrementTick( void )
   32034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   32038:	4b4c      	ldr	r3, [pc, #304]	@ (3216c <xTaskIncrementTick.part.0+0x138>)
   3203a:	681e      	ldr	r6, [r3, #0]
   3203c:	3601      	adds	r6, #1
BaseType_t xTaskIncrementTick( void )
   3203e:	b083      	sub	sp, #12
        xTickCount = xConstTickCount;
   32040:	601e      	str	r6, [r3, #0]
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   32042:	2e00      	cmp	r6, #0
   32044:	d063      	beq.n	3210e <xTaskIncrementTick.part.0+0xda>
   32046:	4a4a      	ldr	r2, [pc, #296]	@ (32170 <xTaskIncrementTick.part.0+0x13c>)
        if( xConstTickCount >= xNextTaskUnblockTime )
   32048:	6813      	ldr	r3, [r2, #0]
   3204a:	429e      	cmp	r6, r3
   3204c:	d364      	bcc.n	32118 <xTaskIncrementTick.part.0+0xe4>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   3204e:	4f49      	ldr	r7, [pc, #292]	@ (32174 <xTaskIncrementTick.part.0+0x140>)
   32050:	683b      	ldr	r3, [r7, #0]
   32052:	681b      	ldr	r3, [r3, #0]
   32054:	2b00      	cmp	r3, #0
   32056:	f000 8086 	beq.w	32166 <xTaskIncrementTick.part.0+0x132>
    BaseType_t xSwitchRequired = pdFALSE;
   3205a:	f04f 0e00 	mov.w	lr, #0
                    prvAddTaskToReadyList( pxTCB );
   3205e:	f8df 912c 	ldr.w	r9, [pc, #300]	@ 3218c <xTaskIncrementTick.part.0+0x158>
   32062:	4d45      	ldr	r5, [pc, #276]	@ (32178 <xTaskIncrementTick.part.0+0x144>)
   32064:	9201      	str	r2, [sp, #4]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
   32066:	46f0      	mov	r8, lr
   32068:	46b3      	mov	fp, r6
   3206a:	e043      	b.n	320f4 <xTaskIncrementTick.part.0+0xc0>
   3206c:	e9d3 2602 	ldrd	r2, r6, [r3, #8]
   32070:	6958      	ldr	r0, [r3, #20]
   32072:	6096      	str	r6, [r2, #8]
   32074:	6072      	str	r2, [r6, #4]
   32076:	6842      	ldr	r2, [r0, #4]
   32078:	428a      	cmp	r2, r1
   3207a:	6802      	ldr	r2, [r0, #0]
   3207c:	bf08      	it	eq
   3207e:	6046      	streq	r6, [r0, #4]
   32080:	3a01      	subs	r2, #1
   32082:	f8c3 8014 	str.w	r8, [r3, #20]
   32086:	6002      	str	r2, [r0, #0]
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   32088:	6a98      	ldr	r0, [r3, #40]	@ 0x28
   3208a:	b160      	cbz	r0, 320a6 <xTaskIncrementTick.part.0+0x72>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
   3208c:	e9d3 2607 	ldrd	r2, r6, [r3, #28]
   32090:	6096      	str	r6, [r2, #8]
   32092:	6072      	str	r2, [r6, #4]
   32094:	6842      	ldr	r2, [r0, #4]
   32096:	42a2      	cmp	r2, r4
   32098:	6802      	ldr	r2, [r0, #0]
   3209a:	bf08      	it	eq
   3209c:	6046      	streq	r6, [r0, #4]
   3209e:	3a01      	subs	r2, #1
   320a0:	f8c3 8028 	str.w	r8, [r3, #40]	@ 0x28
   320a4:	6002      	str	r2, [r0, #0]
                    prvAddTaskToReadyList( pxTCB );
   320a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
   320a8:	f8d9 4000 	ldr.w	r4, [r9]
   320ac:	eb02 0082 	add.w	r0, r2, r2, lsl #2
   320b0:	eb05 0c80 	add.w	ip, r5, r0, lsl #2
   320b4:	42a2      	cmp	r2, r4
   320b6:	f8dc 6004 	ldr.w	r6, [ip, #4]
   320ba:	bf88      	it	hi
   320bc:	f8c9 2000 	strhi.w	r2, [r9]
   320c0:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
   320c4:	f8d6 a008 	ldr.w	sl, [r6, #8]
   320c8:	609e      	str	r6, [r3, #8]
   320ca:	3401      	adds	r4, #1
   320cc:	f8c3 a00c 	str.w	sl, [r3, #12]
   320d0:	f8ca 1004 	str.w	r1, [sl, #4]
   320d4:	60b1      	str	r1, [r6, #8]
   320d6:	f8c3 c014 	str.w	ip, [r3, #20]
   320da:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
   320de:	4b27      	ldr	r3, [pc, #156]	@ (3217c <xTaskIncrementTick.part.0+0x148>)
   320e0:	6819      	ldr	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   320e2:	683b      	ldr	r3, [r7, #0]
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
   320e4:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   320e6:	681b      	ldr	r3, [r3, #0]
                            xSwitchRequired = pdTRUE;
   320e8:	428a      	cmp	r2, r1
   320ea:	bf88      	it	hi
   320ec:	f04f 0e01 	movhi.w	lr, #1
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   320f0:	2b00      	cmp	r3, #0
   320f2:	d033      	beq.n	3215c <xTaskIncrementTick.part.0+0x128>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   320f4:	683b      	ldr	r3, [r7, #0]
   320f6:	68db      	ldr	r3, [r3, #12]
   320f8:	68db      	ldr	r3, [r3, #12]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   320fa:	6858      	ldr	r0, [r3, #4]
                    if( xConstTickCount < xItemValue )
   320fc:	4583      	cmp	fp, r0
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
   320fe:	f103 0104 	add.w	r1, r3, #4
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
   32102:	f103 0418 	add.w	r4, r3, #24
                    if( xConstTickCount < xItemValue )
   32106:	d2b1      	bcs.n	3206c <xTaskIncrementTick.part.0+0x38>
                        xNextTaskUnblockTime = xItemValue;
   32108:	9a01      	ldr	r2, [sp, #4]
   3210a:	6010      	str	r0, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
   3210c:	e006      	b.n	3211c <xTaskIncrementTick.part.0+0xe8>
            taskSWITCH_DELAYED_LISTS();
   3210e:	4b19      	ldr	r3, [pc, #100]	@ (32174 <xTaskIncrementTick.part.0+0x140>)
   32110:	681a      	ldr	r2, [r3, #0]
   32112:	6812      	ldr	r2, [r2, #0]
   32114:	b15a      	cbz	r2, 3212e <xTaskIncrementTick.part.0+0xfa>
   32116:	e7fe      	b.n	32116 <xTaskIncrementTick.part.0+0xe2>
    BaseType_t xSwitchRequired = pdFALSE;
   32118:	f04f 0e00 	mov.w	lr, #0
            if( xYieldPending != pdFALSE )
   3211c:	4b18      	ldr	r3, [pc, #96]	@ (32180 <xTaskIncrementTick.part.0+0x14c>)
   3211e:	681b      	ldr	r3, [r3, #0]
                xSwitchRequired = pdTRUE;
   32120:	2b00      	cmp	r3, #0
}
   32122:	bf0c      	ite	eq
   32124:	4670      	moveq	r0, lr
   32126:	2001      	movne	r0, #1
   32128:	b003      	add	sp, #12
   3212a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            taskSWITCH_DELAYED_LISTS();
   3212e:	4a15      	ldr	r2, [pc, #84]	@ (32184 <xTaskIncrementTick.part.0+0x150>)
   32130:	6818      	ldr	r0, [r3, #0]
   32132:	6811      	ldr	r1, [r2, #0]
   32134:	6019      	str	r1, [r3, #0]
   32136:	4914      	ldr	r1, [pc, #80]	@ (32188 <xTaskIncrementTick.part.0+0x154>)
   32138:	6010      	str	r0, [r2, #0]
   3213a:	680a      	ldr	r2, [r1, #0]
   3213c:	3201      	adds	r2, #1
   3213e:	600a      	str	r2, [r1, #0]
#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   32140:	681a      	ldr	r2, [r3, #0]
   32142:	6812      	ldr	r2, [r2, #0]
   32144:	b922      	cbnz	r2, 32150 <xTaskIncrementTick.part.0+0x11c>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
   32146:	4a0a      	ldr	r2, [pc, #40]	@ (32170 <xTaskIncrementTick.part.0+0x13c>)
   32148:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
   3214c:	6013      	str	r3, [r2, #0]
   3214e:	e77b      	b.n	32048 <xTaskIncrementTick.part.0+0x14>
    {
        /* The new current delayed list is not empty, get the value of
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
   32150:	681b      	ldr	r3, [r3, #0]
   32152:	4a07      	ldr	r2, [pc, #28]	@ (32170 <xTaskIncrementTick.part.0+0x13c>)
   32154:	68db      	ldr	r3, [r3, #12]
   32156:	681b      	ldr	r3, [r3, #0]
   32158:	6013      	str	r3, [r2, #0]
    }
}
   3215a:	e775      	b.n	32048 <xTaskIncrementTick.part.0+0x14>
   3215c:	9a01      	ldr	r2, [sp, #4]
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   3215e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
   32162:	6013      	str	r3, [r2, #0]
                    break;
   32164:	e7da      	b.n	3211c <xTaskIncrementTick.part.0+0xe8>
    BaseType_t xSwitchRequired = pdFALSE;
   32166:	469e      	mov	lr, r3
   32168:	e7f9      	b.n	3215e <xTaskIncrementTick.part.0+0x12a>
   3216a:	bf00      	nop
   3216c:	10051668 	.word	0x10051668
   32170:	10051654 	.word	0x10051654
   32174:	10051688 	.word	0x10051688
   32178:	1005168c 	.word	0x1005168c
   3217c:	100516dc 	.word	0x100516dc
   32180:	1005165c 	.word	0x1005165c
   32184:	10051684 	.word	0x10051684
   32188:	10051658 	.word	0x10051658
   3218c:	10051664 	.word	0x10051664

00032190 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
   32190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        --uxSchedulerSuspended;
   32194:	4e5b      	ldr	r6, [pc, #364]	@ (32304 <xTaskResumeAll.part.0+0x174>)
BaseType_t xTaskResumeAll( void )
   32196:	b083      	sub	sp, #12
    taskENTER_CRITICAL();
   32198:	f001 fe0c 	bl	33db4 <vPortEnterCritical>
        --uxSchedulerSuspended;
   3219c:	6833      	ldr	r3, [r6, #0]
   3219e:	3b01      	subs	r3, #1
   321a0:	6033      	str	r3, [r6, #0]
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   321a2:	6837      	ldr	r7, [r6, #0]
   321a4:	2f00      	cmp	r7, #0
   321a6:	f040 809e 	bne.w	322e6 <xTaskResumeAll.part.0+0x156>
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   321aa:	4b57      	ldr	r3, [pc, #348]	@ (32308 <xTaskResumeAll.part.0+0x178>)
   321ac:	681b      	ldr	r3, [r3, #0]
   321ae:	2b00      	cmp	r3, #0
   321b0:	f000 8099 	beq.w	322e6 <xTaskResumeAll.part.0+0x156>
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   321b4:	f8df e168 	ldr.w	lr, [pc, #360]	@ 32320 <xTaskResumeAll.part.0+0x190>
   321b8:	f8de 3000 	ldr.w	r3, [lr]
   321bc:	2b00      	cmp	r3, #0
   321be:	f000 809e 	beq.w	322fe <xTaskResumeAll.part.0+0x16e>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   321c2:	f8de 300c 	ldr.w	r3, [lr, #12]
                    prvAddTaskToReadyList( pxTCB );
   321c6:	4a51      	ldr	r2, [pc, #324]	@ (3230c <xTaskResumeAll.part.0+0x17c>)
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   321c8:	68db      	ldr	r3, [r3, #12]
   321ca:	4c51      	ldr	r4, [pc, #324]	@ (32310 <xTaskResumeAll.part.0+0x180>)
                    prvAddTaskToReadyList( pxTCB );
   321cc:	6add      	ldr	r5, [r3, #44]	@ 0x2c
   321ce:	9401      	str	r4, [sp, #4]
   321d0:	eb05 0185 	add.w	r1, r5, r5, lsl #2
   321d4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
   321d8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
   321da:	6959      	ldr	r1, [r3, #20]
   321dc:	f8df c144 	ldr.w	ip, [pc, #324]	@ 32324 <xTaskResumeAll.part.0+0x194>
   321e0:	f8df 8144 	ldr.w	r8, [pc, #324]	@ 32328 <xTaskResumeAll.part.0+0x198>
                        xYieldPending = pdTRUE;
   321e4:	9700      	str	r7, [sp, #0]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
   321e6:	f103 0918 	add.w	r9, r3, #24
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
   321ea:	1d1c      	adds	r4, r3, #4
   321ec:	e008      	b.n	32200 <xTaskResumeAll.part.0+0x70>
                        xYieldPending = pdTRUE;
   321ee:	9901      	ldr	r1, [sp, #4]
   321f0:	2001      	movs	r0, #1
   321f2:	6008      	str	r0, [r1, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   321f4:	f8de 1000 	ldr.w	r1, [lr]
   321f8:	2900      	cmp	r1, #0
   321fa:	d03e      	beq.n	3227a <xTaskResumeAll.part.0+0xea>
BaseType_t xTaskResumeAll( void )
   321fc:	4611      	mov	r1, r2
   321fe:	2000      	movs	r0, #0
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
   32200:	6847      	ldr	r7, [r0, #4]
   32202:	e9d3 ba07 	ldrd	fp, sl, [r3, #28]
   32206:	454f      	cmp	r7, r9
   32208:	f8cb a008 	str.w	sl, [fp, #8]
   3220c:	f8ca b004 	str.w	fp, [sl, #4]
   32210:	bf08      	it	eq
   32212:	f8c0 a004 	streq.w	sl, [r0, #4]
   32216:	f8d0 a000 	ldr.w	sl, [r0]
   3221a:	9f00      	ldr	r7, [sp, #0]
   3221c:	629f      	str	r7, [r3, #40]	@ 0x28
   3221e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
   32222:	f8c0 a000 	str.w	sl, [r0]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
   32226:	e9d3 0a02 	ldrd	r0, sl, [r3, #8]
   3222a:	f8c0 a008 	str.w	sl, [r0, #8]
   3222e:	f8ca 0004 	str.w	r0, [sl, #4]
   32232:	6848      	ldr	r0, [r1, #4]
   32234:	42a0      	cmp	r0, r4
   32236:	6808      	ldr	r0, [r1, #0]
   32238:	bf08      	it	eq
   3223a:	f8c1 a004 	streq.w	sl, [r1, #4]
   3223e:	3801      	subs	r0, #1
   32240:	6008      	str	r0, [r1, #0]
                    prvAddTaskToReadyList( pxTCB );
   32242:	f8dc 1000 	ldr.w	r1, [ip]
   32246:	6850      	ldr	r0, [r2, #4]
   32248:	6098      	str	r0, [r3, #8]
   3224a:	42a9      	cmp	r1, r5
   3224c:	bf38      	it	cc
   3224e:	f8cc 5000 	strcc.w	r5, [ip]
   32252:	6811      	ldr	r1, [r2, #0]
   32254:	f8d0 a008 	ldr.w	sl, [r0, #8]
   32258:	f8c3 a00c 	str.w	sl, [r3, #12]
   3225c:	3101      	adds	r1, #1
   3225e:	f8ca 4004 	str.w	r4, [sl, #4]
   32262:	6084      	str	r4, [r0, #8]
   32264:	615a      	str	r2, [r3, #20]
   32266:	6011      	str	r1, [r2, #0]
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   32268:	f8d8 1000 	ldr.w	r1, [r8]
   3226c:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
   3226e:	42a9      	cmp	r1, r5
   32270:	d9bd      	bls.n	321ee <xTaskResumeAll.part.0+0x5e>
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   32272:	f8de 1000 	ldr.w	r1, [lr]
   32276:	2900      	cmp	r1, #0
   32278:	d1c0      	bne.n	321fc <xTaskResumeAll.part.0+0x6c>
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   3227a:	4b26      	ldr	r3, [pc, #152]	@ (32314 <xTaskResumeAll.part.0+0x184>)
   3227c:	681a      	ldr	r2, [r3, #0]
   3227e:	6812      	ldr	r2, [r2, #0]
   32280:	2a00      	cmp	r2, #0
   32282:	d037      	beq.n	322f4 <xTaskResumeAll.part.0+0x164>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
   32284:	681a      	ldr	r2, [r3, #0]
   32286:	4b24      	ldr	r3, [pc, #144]	@ (32318 <xTaskResumeAll.part.0+0x188>)
   32288:	68d2      	ldr	r2, [r2, #12]
   3228a:	6812      	ldr	r2, [r2, #0]
   3228c:	601a      	str	r2, [r3, #0]
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
   3228e:	4d23      	ldr	r5, [pc, #140]	@ (3231c <xTaskResumeAll.part.0+0x18c>)
   32290:	682c      	ldr	r4, [r5, #0]
                    if( xPendedCounts > ( TickType_t ) 0U )
   32292:	b1a4      	cbz	r4, 322be <xTaskResumeAll.part.0+0x12e>
                                xYieldPending = pdTRUE;
   32294:	f8dd 8004 	ldr.w	r8, [sp, #4]
   32298:	2701      	movs	r7, #1
   3229a:	e006      	b.n	322aa <xTaskResumeAll.part.0+0x11a>
   3229c:	f7ff feca 	bl	32034 <xTaskIncrementTick.part.0>
                            if( xTaskIncrementTick() != pdFALSE )
   322a0:	b108      	cbz	r0, 322a6 <xTaskResumeAll.part.0+0x116>
                                xYieldPending = pdTRUE;
   322a2:	f8c8 7000 	str.w	r7, [r8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
   322a6:	3c01      	subs	r4, #1
   322a8:	d008      	beq.n	322bc <xTaskResumeAll.part.0+0x12c>
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   322aa:	6833      	ldr	r3, [r6, #0]
   322ac:	2b00      	cmp	r3, #0
   322ae:	d0f5      	beq.n	3229c <xTaskResumeAll.part.0+0x10c>
        ++xPendedTicks;
   322b0:	682b      	ldr	r3, [r5, #0]
                        } while( xPendedCounts > ( TickType_t ) 0U );
   322b2:	3c01      	subs	r4, #1
        ++xPendedTicks;
   322b4:	f103 0301 	add.w	r3, r3, #1
   322b8:	602b      	str	r3, [r5, #0]
                        } while( xPendedCounts > ( TickType_t ) 0U );
   322ba:	d1f6      	bne.n	322aa <xTaskResumeAll.part.0+0x11a>
                        xPendedTicks = 0;
   322bc:	602c      	str	r4, [r5, #0]
                if( xYieldPending != pdFALSE )
   322be:	9b01      	ldr	r3, [sp, #4]
   322c0:	681b      	ldr	r3, [r3, #0]
   322c2:	b183      	cbz	r3, 322e6 <xTaskResumeAll.part.0+0x156>
                    taskYIELD_IF_USING_PREEMPTION();
   322c4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   322c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
   322cc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
   322d0:	f3bf 8f4f 	dsb	sy
   322d4:	f3bf 8f6f 	isb	sy
    taskEXIT_CRITICAL();
   322d8:	f001 fd86 	bl	33de8 <vPortExitCritical>
                        xAlreadyYielded = pdTRUE;
   322dc:	2401      	movs	r4, #1
}
   322de:	4620      	mov	r0, r4
   322e0:	b003      	add	sp, #12
   322e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    taskEXIT_CRITICAL();
   322e6:	f001 fd7f 	bl	33de8 <vPortExitCritical>
    BaseType_t xAlreadyYielded = pdFALSE;
   322ea:	2400      	movs	r4, #0
}
   322ec:	4620      	mov	r0, r4
   322ee:	b003      	add	sp, #12
   322f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        xNextTaskUnblockTime = portMAX_DELAY;
   322f4:	4b08      	ldr	r3, [pc, #32]	@ (32318 <xTaskResumeAll.part.0+0x188>)
   322f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
   322fa:	601a      	str	r2, [r3, #0]
   322fc:	e7c7      	b.n	3228e <xTaskResumeAll.part.0+0xfe>
   322fe:	4b04      	ldr	r3, [pc, #16]	@ (32310 <xTaskResumeAll.part.0+0x180>)
   32300:	9301      	str	r3, [sp, #4]
   32302:	e7c4      	b.n	3228e <xTaskResumeAll.part.0+0xfe>
   32304:	10051650 	.word	0x10051650
   32308:	1005166c 	.word	0x1005166c
   3230c:	1005168c 	.word	0x1005168c
   32310:	1005165c 	.word	0x1005165c
   32314:	10051688 	.word	0x10051688
   32318:	10051654 	.word	0x10051654
   3231c:	10051660 	.word	0x10051660
   32320:	10051670 	.word	0x10051670
   32324:	10051664 	.word	0x10051664
   32328:	100516dc 	.word	0x100516dc

0003232c <vTaskSuspendAll>:
    ++uxSchedulerSuspended;
   3232c:	4a02      	ldr	r2, [pc, #8]	@ (32338 <vTaskSuspendAll+0xc>)
   3232e:	6813      	ldr	r3, [r2, #0]
   32330:	3301      	adds	r3, #1
   32332:	6013      	str	r3, [r2, #0]
}
   32334:	4770      	bx	lr
   32336:	bf00      	nop
   32338:	10051650 	.word	0x10051650

0003233c <xTaskResumeAll>:
    configASSERT( uxSchedulerSuspended );
   3233c:	4b02      	ldr	r3, [pc, #8]	@ (32348 <xTaskResumeAll+0xc>)
   3233e:	681b      	ldr	r3, [r3, #0]
   32340:	b903      	cbnz	r3, 32344 <xTaskResumeAll+0x8>
   32342:	e7fe      	b.n	32342 <xTaskResumeAll+0x6>
   32344:	f7ff bf24 	b.w	32190 <xTaskResumeAll.part.0>
   32348:	10051650 	.word	0x10051650

0003234c <xTaskIncrementTick>:
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   3234c:	4b05      	ldr	r3, [pc, #20]	@ (32364 <xTaskIncrementTick+0x18>)
   3234e:	681b      	ldr	r3, [r3, #0]
   32350:	b90b      	cbnz	r3, 32356 <xTaskIncrementTick+0xa>
   32352:	f7ff be6f 	b.w	32034 <xTaskIncrementTick.part.0>
        ++xPendedTicks;
   32356:	4a04      	ldr	r2, [pc, #16]	@ (32368 <xTaskIncrementTick+0x1c>)
   32358:	6813      	ldr	r3, [r2, #0]
   3235a:	3301      	adds	r3, #1
}
   3235c:	2000      	movs	r0, #0
        ++xPendedTicks;
   3235e:	6013      	str	r3, [r2, #0]
}
   32360:	4770      	bx	lr
   32362:	bf00      	nop
   32364:	10051650 	.word	0x10051650
   32368:	10051660 	.word	0x10051660

0003236c <vTaskSwitchContext>:
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   3236c:	4b04      	ldr	r3, [pc, #16]	@ (32380 <vTaskSwitchContext+0x14>)
   3236e:	681b      	ldr	r3, [r3, #0]
   32370:	b11b      	cbz	r3, 3237a <vTaskSwitchContext+0xe>
        xYieldPending = pdTRUE;
   32372:	4b04      	ldr	r3, [pc, #16]	@ (32384 <vTaskSwitchContext+0x18>)
   32374:	2201      	movs	r2, #1
   32376:	601a      	str	r2, [r3, #0]
}
   32378:	4770      	bx	lr
   3237a:	f7ff bdfb 	b.w	31f74 <vTaskSwitchContext.part.0>
   3237e:	bf00      	nop
   32380:	10051650 	.word	0x10051650
   32384:	1005165c 	.word	0x1005165c

00032388 <tud_cdc_n_write_flush>:

  return ret;
}

uint32_t tud_cdc_n_write_flush (uint8_t itf)
{
   32388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3238c:	4604      	mov	r4, r0
bool tud_suspended(void);

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void) {
  return tud_mounted() && !tud_suspended();
   3238e:	f000 fcd1 	bl	32d34 <tud_mounted>
   32392:	b910      	cbnz	r0, 3239a <tud_cdc_n_write_flush+0x12>
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];

  // Skip if usb is not ready yet
  TU_VERIFY( tud_ready(), 0 );
   32394:	2000      	movs	r0, #0
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
    return 0;
  }
}
   32396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3239a:	f000 fcd3 	bl	32d44 <tud_suspended>
   3239e:	4606      	mov	r6, r0
   323a0:	2800      	cmp	r0, #0
   323a2:	d1f7      	bne.n	32394 <tud_cdc_n_write_flush+0xc>
  if ( !tu_fifo_count(&p_cdc->tx_ff) ) return 0;
   323a4:	f640 0338 	movw	r3, #2104	@ 0x838
   323a8:	f8df 8064 	ldr.w	r8, [pc, #100]	@ 32410 <tud_cdc_n_write_flush+0x88>
   323ac:	fb03 f404 	mul.w	r4, r3, r4
   323b0:	f104 0520 	add.w	r5, r4, #32
   323b4:	4445      	add	r5, r8
   323b6:	4628      	mov	r0, r5
   323b8:	f000 faac 	bl	32914 <tu_fifo_count>
   323bc:	2800      	cmp	r0, #0
   323be:	d0e9      	beq.n	32394 <tud_cdc_n_write_flush+0xc>
  TU_VERIFY( usbd_edpt_claim(rhport, p_cdc->ep_in), 0 );
   323c0:	eb08 0704 	add.w	r7, r8, r4
   323c4:	4630      	mov	r0, r6
   323c6:	78b9      	ldrb	r1, [r7, #2]
   323c8:	f001 fa34 	bl	33834 <usbd_edpt_claim>
   323cc:	2800      	cmp	r0, #0
   323ce:	d0e1      	beq.n	32394 <tud_cdc_n_write_flush+0xc>
  uint16_t const count = tu_fifo_read_n(&p_cdc->tx_ff, p_cdc->epin_buf, sizeof(p_cdc->epin_buf));
   323d0:	f504 6487 	add.w	r4, r4, #1080	@ 0x438
   323d4:	4444      	add	r4, r8
   323d6:	4628      	mov	r0, r5
   323d8:	4621      	mov	r1, r4
   323da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
   323de:	f000 fb1f 	bl	32a20 <tu_fifo_read_n>
    TU_ASSERT( usbd_edpt_xfer(rhport, p_cdc->ep_in, p_cdc->epin_buf, count), 0 );
   323e2:	78b9      	ldrb	r1, [r7, #2]
  if ( count )
   323e4:	4605      	mov	r5, r0
   323e6:	b178      	cbz	r0, 32408 <tud_cdc_n_write_flush+0x80>
    TU_ASSERT( usbd_edpt_xfer(rhport, p_cdc->ep_in, p_cdc->epin_buf, count), 0 );
   323e8:	4603      	mov	r3, r0
   323ea:	4622      	mov	r2, r4
   323ec:	4630      	mov	r0, r6
   323ee:	f001 fa3d 	bl	3386c <usbd_edpt_xfer>
   323f2:	b938      	cbnz	r0, 32404 <tud_cdc_n_write_flush+0x7c>
   323f4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   323f8:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
   323fc:	07db      	lsls	r3, r3, #31
   323fe:	d5c9      	bpl.n	32394 <tud_cdc_n_write_flush+0xc>
   32400:	be00      	bkpt	0x0000
   32402:	e7c7      	b.n	32394 <tud_cdc_n_write_flush+0xc>
    return count;
   32404:	4628      	mov	r0, r5
   32406:	e7c6      	b.n	32396 <tud_cdc_n_write_flush+0xe>
    usbd_edpt_release(rhport, p_cdc->ep_in);
   32408:	f001 fa22 	bl	33850 <usbd_edpt_release>
    return 0;
   3240c:	e7c2      	b.n	32394 <tud_cdc_n_write_flush+0xc>
   3240e:	bf00      	nop
   32410:	100516e0 	.word	0x100516e0

00032414 <cdcd_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void)
{
   32414:	b5f0      	push	{r4, r5, r6, r7, lr}
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
   32416:	4c18      	ldr	r4, [pc, #96]	@ (32478 <cdcd_init+0x64>)
{
   32418:	b083      	sub	sp, #12
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
   3241a:	f640 0238 	movw	r2, #2104	@ 0x838
   3241e:	2100      	movs	r1, #0
   32420:	4620      	mov	r0, r4
   32422:	f7f4 fd5b 	bl	26edc <memset>

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
  
    p_cdc->wanted_char = (char) -1;
   32426:	23ff      	movs	r3, #255	@ 0xff
   32428:	7163      	strb	r3, [r4, #5]
    
    // NS override of ff_buf, defined in neuralspot/ns_usb
    p_cdc->rx_ff_buf = ns_usb_get_rx_buffer();
   3242a:	f7fe ffe7 	bl	313fc <ns_usb_get_rx_buffer>
   3242e:	6320      	str	r0, [r4, #48]	@ 0x30
    p_cdc->tx_ff_buf = ns_usb_get_tx_buffer();
   32430:	f7fe ffea 	bl	31408 <ns_usb_get_tx_buffer>

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate  = 115200;
   32434:	f44f 4342 	mov.w	r3, #49664	@ 0xc200
   32438:	2501      	movs	r5, #1
   3243a:	2600      	movs	r6, #0
   3243c:	80e3      	strh	r3, [r4, #6]
    p_cdc->line_coding.stop_bits = 0;
    p_cdc->line_coding.parity    = 0;
    p_cdc->line_coding.data_bits = 8;
   3243e:	2308      	movs	r3, #8

    // Config RX fifo
    // tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(ns_cdc_rx_ff_buf), 1, false);
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, ns_get_cdc_rx_bufferLength(), 1, false);
   32440:	6b27      	ldr	r7, [r4, #48]	@ 0x30
    p_cdc->line_coding.stop_bits = 0;
   32442:	8166      	strh	r6, [r4, #10]
    p_cdc->line_coding.data_bits = 8;
   32444:	7323      	strb	r3, [r4, #12]
    p_cdc->tx_ff_buf = ns_usb_get_tx_buffer();
   32446:	6360      	str	r0, [r4, #52]	@ 0x34
    p_cdc->line_coding.bit_rate  = 115200;
   32448:	8125      	strh	r5, [r4, #8]
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, ns_get_cdc_rx_bufferLength(), 1, false);
   3244a:	f7fe ffcb 	bl	313e4 <ns_get_cdc_rx_bufferLength>
   3244e:	462b      	mov	r3, r5
   32450:	b282      	uxth	r2, r0
   32452:	4639      	mov	r1, r7
   32454:	9600      	str	r6, [sp, #0]
   32456:	f104 0010 	add.w	r0, r4, #16
   3245a:	f000 fa3d 	bl	328d8 <tu_fifo_config>

    // Config TX fifo as overwritable at initialization and will be changed to non-overwritable
    // if terminal supports DTR bit. Without DTR we do not know if data is actually polled by terminal.
    // In this way, the most current data is prioritized.
    // tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(ns_cdc_tx_ff_buf), 1, true);
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, ns_get_cdc_tx_bufferLength(), 1, true);
   3245e:	6b66      	ldr	r6, [r4, #52]	@ 0x34
   32460:	f7fe ffc6 	bl	313f0 <ns_get_cdc_tx_bufferLength>
   32464:	9500      	str	r5, [sp, #0]
   32466:	b282      	uxth	r2, r0
   32468:	462b      	mov	r3, r5
   3246a:	4631      	mov	r1, r6
   3246c:	f104 0020 	add.w	r0, r4, #32
   32470:	f000 fa32 	bl	328d8 <tu_fifo_config>
#if CFG_FIFO_MUTEX
    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, osal_mutex_create(&p_cdc->rx_ff_mutex));
    tu_fifo_config_mutex(&p_cdc->tx_ff, osal_mutex_create(&p_cdc->tx_ff_mutex), NULL);
#endif
  }
}
   32474:	b003      	add	sp, #12
   32476:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32478:	100516e0 	.word	0x100516e0

0003247c <cdcd_reset>:

void cdcd_reset(uint8_t rhport)
{
   3247c:	b510      	push	{r4, lr}

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
   3247e:	4c09      	ldr	r4, [pc, #36]	@ (324a4 <cdcd_reset+0x28>)
   32480:	2300      	movs	r3, #0
   32482:	6023      	str	r3, [r4, #0]
   32484:	7123      	strb	r3, [r4, #4]
    tu_fifo_clear(&p_cdc->rx_ff);
   32486:	f104 0010 	add.w	r0, r4, #16
    tu_fifo_clear(&p_cdc->tx_ff);
   3248a:	3420      	adds	r4, #32
    tu_fifo_clear(&p_cdc->rx_ff);
   3248c:	f000 fbde 	bl	32c4c <tu_fifo_clear>
    tu_fifo_clear(&p_cdc->tx_ff);
   32490:	4620      	mov	r0, r4
   32492:	f000 fbdb 	bl	32c4c <tu_fifo_clear>
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
   32496:	4620      	mov	r0, r4
   32498:	2101      	movs	r1, #1
  }
}
   3249a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
   3249e:	f000 bbe1 	b.w	32c64 <tu_fifo_set_overwritable>
   324a2:	bf00      	nop
   324a4:	100516e0 	.word	0x100516e0

000324a8 <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
   324a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
   324ac:	794b      	ldrb	r3, [r1, #5]
   324ae:	2b02      	cmp	r3, #2
{
   324b0:	b082      	sub	sp, #8
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
   324b2:	d004      	beq.n	324be <cdcd_open+0x16>
   324b4:	2500      	movs	r5, #0

  // Prepare for incoming data
  _prep_out_transaction(p_cdc);

  return drv_len;
}
   324b6:	4628      	mov	r0, r5
   324b8:	b002      	add	sp, #8
   324ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
   324be:	798b      	ldrb	r3, [r1, #6]
   324c0:	2b02      	cmp	r3, #2
   324c2:	d1f7      	bne.n	324b4 <cdcd_open+0xc>
    if ( _cdcd_itf[cdc_id].ep_in == 0 )
   324c4:	4f33      	ldr	r7, [pc, #204]	@ (32594 <cdcd_open+0xec>)
   324c6:	78bb      	ldrb	r3, [r7, #2]
   324c8:	2b00      	cmp	r3, #0
   324ca:	d148      	bne.n	3255e <cdcd_open+0xb6>
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
   324cc:	788b      	ldrb	r3, [r1, #2]
   324ce:	703b      	strb	r3, [r7, #0]

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc)
{
  uint8_t const* desc8 = (uint8_t const*) desc;
  return desc8 + desc8[DESC_OFFSET_LEN];
   324d0:	780b      	ldrb	r3, [r1, #0]
   324d2:	18cc      	adds	r4, r1, r3
   324d4:	4606      	mov	r6, r0
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
   324d6:	7861      	ldrb	r1, [r4, #1]
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
   324d8:	2924      	cmp	r1, #36	@ 0x24
  uint16_t drv_len = sizeof(tusb_desc_interface_t);
   324da:	f04f 0509 	mov.w	r5, #9
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
   324de:	d10b      	bne.n	324f8 <cdcd_open+0x50>
   324e0:	2a08      	cmp	r2, #8
   324e2:	d802      	bhi.n	324ea <cdcd_open+0x42>
   324e4:	e021      	b.n	3252a <cdcd_open+0x82>
   324e6:	42aa      	cmp	r2, r5
   324e8:	d31f      	bcc.n	3252a <cdcd_open+0x82>
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
   324ea:	7823      	ldrb	r3, [r4, #0]
  return desc8 + desc8[DESC_OFFSET_LEN];
   324ec:	441c      	add	r4, r3
    drv_len += tu_desc_len(p_desc);
   324ee:	442b      	add	r3, r5
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
   324f0:	7861      	ldrb	r1, [r4, #1]
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
   324f2:	2924      	cmp	r1, #36	@ 0x24
    drv_len += tu_desc_len(p_desc);
   324f4:	b29d      	uxth	r5, r3
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
   324f6:	d0f6      	beq.n	324e6 <cdcd_open+0x3e>
  if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
   324f8:	2905      	cmp	r1, #5
   324fa:	d038      	beq.n	3256e <cdcd_open+0xc6>
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
   324fc:	2904      	cmp	r1, #4
   324fe:	d114      	bne.n	3252a <cdcd_open+0x82>
   32500:	7963      	ldrb	r3, [r4, #5]
   32502:	2b0a      	cmp	r3, #10
   32504:	d111      	bne.n	3252a <cdcd_open+0x82>
    TU_ASSERT( usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0 );
   32506:	4b24      	ldr	r3, [pc, #144]	@ (32598 <cdcd_open+0xf0>)
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
   32508:	f894 8000 	ldrb.w	r8, [r4]
   3250c:	9301      	str	r3, [sp, #4]
   3250e:	3301      	adds	r3, #1
   32510:	9300      	str	r3, [sp, #0]
   32512:	2302      	movs	r3, #2
   32514:	4630      	mov	r0, r6
   32516:	eb04 0108 	add.w	r1, r4, r8
   3251a:	461a      	mov	r2, r3
   3251c:	f001 f918 	bl	33750 <usbd_open_edpt_pair>
   32520:	b1e8      	cbz	r0, 3255e <cdcd_open+0xb6>
    drv_len += 2*sizeof(tusb_desc_endpoint_t);
   32522:	350e      	adds	r5, #14
   32524:	fa18 f585 	uxtah	r5, r8, r5
   32528:	b2ad      	uxth	r5, r5
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
   3252a:	481c      	ldr	r0, [pc, #112]	@ (3259c <cdcd_open+0xf4>)
   3252c:	f000 fa0e 	bl	3294c <tu_fifo_remaining>
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf), );
   32530:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
   32534:	d3bf      	bcc.n	324b6 <cdcd_open+0xe>
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out), );
   32536:	78f9      	ldrb	r1, [r7, #3]
   32538:	2000      	movs	r0, #0
   3253a:	f001 f97b 	bl	33834 <usbd_edpt_claim>
   3253e:	2800      	cmp	r0, #0
   32540:	d0b9      	beq.n	324b6 <cdcd_open+0xe>
  available = tu_fifo_remaining(&p_cdc->rx_ff);
   32542:	4816      	ldr	r0, [pc, #88]	@ (3259c <cdcd_open+0xf4>)
   32544:	f000 fa02 	bl	3294c <tu_fifo_remaining>
  if ( available >= sizeof(p_cdc->epout_buf) )
   32548:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
   3254c:	d31d      	bcc.n	3258a <cdcd_open+0xe2>
    usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
   3254e:	4a14      	ldr	r2, [pc, #80]	@ (325a0 <cdcd_open+0xf8>)
   32550:	78f9      	ldrb	r1, [r7, #3]
   32552:	f44f 6380 	mov.w	r3, #1024	@ 0x400
   32556:	2000      	movs	r0, #0
   32558:	f001 f988 	bl	3386c <usbd_edpt_xfer>
   3255c:	e7ab      	b.n	324b6 <cdcd_open+0xe>
  TU_ASSERT(p_cdc, 0);
   3255e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   32562:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
   32566:	07db      	lsls	r3, r3, #31
   32568:	d5a4      	bpl.n	324b4 <cdcd_open+0xc>
   3256a:	be00      	bkpt	0x0000
   3256c:	e7a2      	b.n	324b4 <cdcd_open+0xc>
    TU_ASSERT( usbd_edpt_open(rhport, desc_ep), 0 );
   3256e:	4621      	mov	r1, r4
   32570:	4630      	mov	r0, r6
   32572:	f001 f93b 	bl	337ec <usbd_edpt_open>
   32576:	2800      	cmp	r0, #0
   32578:	d0f1      	beq.n	3255e <cdcd_open+0xb6>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
   3257a:	78a3      	ldrb	r3, [r4, #2]
   3257c:	707b      	strb	r3, [r7, #1]
   3257e:	7823      	ldrb	r3, [r4, #0]
  return desc8 + desc8[DESC_OFFSET_LEN];
   32580:	441c      	add	r4, r3
    drv_len += tu_desc_len(p_desc);
   32582:	442b      	add	r3, r5
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
   32584:	7861      	ldrb	r1, [r4, #1]
   32586:	b29d      	uxth	r5, r3
  return desc8 + desc8[DESC_OFFSET_LEN];
   32588:	e7b8      	b.n	324fc <cdcd_open+0x54>
    usbd_edpt_release(rhport, p_cdc->ep_out);
   3258a:	78f9      	ldrb	r1, [r7, #3]
   3258c:	2000      	movs	r0, #0
   3258e:	f001 f95f 	bl	33850 <usbd_edpt_release>
   32592:	e790      	b.n	324b6 <cdcd_open+0xe>
   32594:	100516e0 	.word	0x100516e0
   32598:	100516e2 	.word	0x100516e2
   3259c:	100516f0 	.word	0x100516f0
   325a0:	10051718 	.word	0x10051718

000325a4 <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
   325a4:	b538      	push	{r3, r4, r5, lr}
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
   325a6:	7813      	ldrb	r3, [r2, #0]
   325a8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
   325ac:	2b20      	cmp	r3, #32
   325ae:	d110      	bne.n	325d2 <cdcd_control_xfer_cb+0x2e>
  // Identify which interface to use
  for ( ; ; itf++, p_cdc++)
  {
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;

    if ( p_cdc->itf_num == request->wIndex ) break;
   325b0:	4694      	mov	ip, r2
   325b2:	4a28      	ldr	r2, [pc, #160]	@ (32654 <cdcd_control_xfer_cb+0xb0>)
   325b4:	f8bc 3004 	ldrh.w	r3, [ip, #4]
   325b8:	f892 e000 	ldrb.w	lr, [r2]
   325bc:	459e      	cmp	lr, r3
   325be:	d108      	bne.n	325d2 <cdcd_control_xfer_cb+0x2e>
  }

  switch ( request->bRequest )
   325c0:	f89c 3001 	ldrb.w	r3, [ip, #1]
   325c4:	3b20      	subs	r3, #32
   325c6:	2b03      	cmp	r3, #3
   325c8:	d803      	bhi.n	325d2 <cdcd_control_xfer_cb+0x2e>
   325ca:	e8df f003 	tbb	[pc, r3]
   325ce:	160a      	.short	0x160a
   325d0:	041e      	.short	0x041e
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
   325d2:	2000      	movs	r0, #0

    default: return false; // stall unsupported request
  }

  return true;
}
   325d4:	bd38      	pop	{r3, r4, r5, pc}
      if (stage == CONTROL_STAGE_SETUP)
   325d6:	2901      	cmp	r1, #1
   325d8:	d02f      	beq.n	3263a <cdcd_control_xfer_cb+0x96>
      else if (stage == CONTROL_STAGE_ACK)
   325da:	2903      	cmp	r1, #3
   325dc:	d031      	beq.n	32642 <cdcd_control_xfer_cb+0x9e>
  return true;
   325de:	2001      	movs	r0, #1
}
   325e0:	bd38      	pop	{r3, r4, r5, pc}
      if (stage == CONTROL_STAGE_SETUP)
   325e2:	2901      	cmp	r1, #1
   325e4:	d00b      	beq.n	325fe <cdcd_control_xfer_cb+0x5a>
      else if ( stage == CONTROL_STAGE_ACK)
   325e6:	2903      	cmp	r1, #3
   325e8:	d1f9      	bne.n	325de <cdcd_control_xfer_cb+0x3a>
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
   325ea:	4b1b      	ldr	r3, [pc, #108]	@ (32658 <cdcd_control_xfer_cb+0xb4>)
   325ec:	2b00      	cmp	r3, #0
   325ee:	d0f6      	beq.n	325de <cdcd_control_xfer_cb+0x3a>
   325f0:	491a      	ldr	r1, [pc, #104]	@ (3265c <cdcd_control_xfer_cb+0xb8>)
   325f2:	2000      	movs	r0, #0
   325f4:	f3af 8000 	nop.w
   325f8:	e7f1      	b.n	325de <cdcd_control_xfer_cb+0x3a>
      if (stage == CONTROL_STAGE_SETUP)
   325fa:	2901      	cmp	r1, #1
   325fc:	d1ef      	bne.n	325de <cdcd_control_xfer_cb+0x3a>
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
   325fe:	4a17      	ldr	r2, [pc, #92]	@ (3265c <cdcd_control_xfer_cb+0xb8>)
   32600:	2307      	movs	r3, #7
   32602:	4661      	mov	r1, ip
   32604:	f001 f980 	bl	33908 <tud_control_xfer>
   32608:	e7e9      	b.n	325de <cdcd_control_xfer_cb+0x3a>
      if (stage == CONTROL_STAGE_SETUP)
   3260a:	2901      	cmp	r1, #1
   3260c:	d015      	beq.n	3263a <cdcd_control_xfer_cb+0x96>
      else if (stage == CONTROL_STAGE_ACK)
   3260e:	2903      	cmp	r1, #3
   32610:	d1e5      	bne.n	325de <cdcd_control_xfer_cb+0x3a>
        bool const dtr = tu_bit_test(request->wValue, 0);
   32612:	f8bc 4002 	ldrh.w	r4, [ip, #2]
        tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
   32616:	4812      	ldr	r0, [pc, #72]	@ (32660 <cdcd_control_xfer_cb+0xbc>)
        p_cdc->line_state = (uint8_t) request->wValue;
   32618:	7114      	strb	r4, [r2, #4]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }

//------------- Bits -------------//
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
   3261a:	f004 0501 	and.w	r5, r4, #1
        tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
   3261e:	f085 0101 	eor.w	r1, r5, #1
   32622:	f000 fb1f 	bl	32c64 <tu_fifo_set_overwritable>
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
   32626:	4b0f      	ldr	r3, [pc, #60]	@ (32664 <cdcd_control_xfer_cb+0xc0>)
   32628:	2b00      	cmp	r3, #0
   3262a:	d0d8      	beq.n	325de <cdcd_control_xfer_cb+0x3a>
   3262c:	f3c4 0240 	ubfx	r2, r4, #1, #1
   32630:	4629      	mov	r1, r5
   32632:	2000      	movs	r0, #0
   32634:	f3af 8000 	nop.w
   32638:	e7d1      	b.n	325de <cdcd_control_xfer_cb+0x3a>
        tud_control_status(rhport, request);
   3263a:	4661      	mov	r1, ip
   3263c:	f001 f94c 	bl	338d8 <tud_control_status>
   32640:	e7cd      	b.n	325de <cdcd_control_xfer_cb+0x3a>
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
   32642:	4b09      	ldr	r3, [pc, #36]	@ (32668 <cdcd_control_xfer_cb+0xc4>)
   32644:	2b00      	cmp	r3, #0
   32646:	d0ca      	beq.n	325de <cdcd_control_xfer_cb+0x3a>
   32648:	f8bc 1002 	ldrh.w	r1, [ip, #2]
   3264c:	2000      	movs	r0, #0
   3264e:	f3af 8000 	nop.w
   32652:	e7c4      	b.n	325de <cdcd_control_xfer_cb+0x3a>
   32654:	100516e0 	.word	0x100516e0
   32658:	00000000 	.word	0x00000000
   3265c:	100516e6 	.word	0x100516e6
   32660:	10051700 	.word	0x10051700
	...

0003266c <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
   3266c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   32670:	4f45      	ldr	r7, [pc, #276]	@ (32788 <cdcd_xfer_cb+0x11c>)

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
  {
    p_cdc = &_cdcd_itf[itf];
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
   32672:	78fa      	ldrb	r2, [r7, #3]
{
   32674:	460c      	mov	r4, r1
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
   32676:	42a2      	cmp	r2, r4
   32678:	78b9      	ldrb	r1, [r7, #2]
{
   3267a:	4606      	mov	r6, r0
   3267c:	461d      	mov	r5, r3
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
   3267e:	d046      	beq.n	3270e <cdcd_xfer_cb+0xa2>
   32680:	42a1      	cmp	r1, r4
   32682:	d01c      	beq.n	326be <cdcd_xfer_cb+0x52>
  }
  TU_ASSERT(itf < CFG_TUD_CDC);
   32684:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   32688:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
   3268c:	07db      	lsls	r3, r3, #31
   3268e:	d500      	bpl.n	32692 <cdcd_xfer_cb+0x26>
   32690:	be00      	bkpt	0x0000
   32692:	2000      	movs	r0, #0
  }

  // nothing to do with notif endpoint for now

  return true;
}
   32694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
   32698:	4b3c      	ldr	r3, [pc, #240]	@ (3278c <cdcd_xfer_cb+0x120>)
   3269a:	b123      	cbz	r3, 326a6 <cdcd_xfer_cb+0x3a>
   3269c:	483c      	ldr	r0, [pc, #240]	@ (32790 <cdcd_xfer_cb+0x124>)
   3269e:	f000 f94b 	bl	32938 <tu_fifo_empty>
   326a2:	2800      	cmp	r0, #0
   326a4:	d067      	beq.n	32776 <cdcd_xfer_cb+0x10a>
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
   326a6:	483a      	ldr	r0, [pc, #232]	@ (32790 <cdcd_xfer_cb+0x124>)
   326a8:	f000 f950 	bl	3294c <tu_fifo_remaining>
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf), );
   326ac:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
   326b0:	d305      	bcc.n	326be <cdcd_xfer_cb+0x52>
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out), );
   326b2:	78f9      	ldrb	r1, [r7, #3]
   326b4:	2000      	movs	r0, #0
   326b6:	f001 f8bd 	bl	33834 <usbd_edpt_claim>
   326ba:	2800      	cmp	r0, #0
   326bc:	d14d      	bne.n	3275a <cdcd_xfer_cb+0xee>
  if ( ep_addr == p_cdc->ep_in )
   326be:	78bb      	ldrb	r3, [r7, #2]
   326c0:	42a3      	cmp	r3, r4
   326c2:	d002      	beq.n	326ca <cdcd_xfer_cb+0x5e>
  return true;
   326c4:	2001      	movs	r0, #1
}
   326c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ( tud_cdc_tx_complete_cb ) tud_cdc_tx_complete_cb(itf);
   326ca:	4b32      	ldr	r3, [pc, #200]	@ (32794 <cdcd_xfer_cb+0x128>)
   326cc:	b113      	cbz	r3, 326d4 <cdcd_xfer_cb+0x68>
   326ce:	2000      	movs	r0, #0
   326d0:	f7f9 fb04 	bl	2bcdc <tud_cdc_tx_complete_cb>
    if ( 0 == tud_cdc_n_write_flush(itf) )
   326d4:	2000      	movs	r0, #0
   326d6:	f7ff fe57 	bl	32388 <tud_cdc_n_write_flush>
   326da:	2800      	cmp	r0, #0
   326dc:	d1f2      	bne.n	326c4 <cdcd_xfer_cb+0x58>
      if ( !tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE-1))) )
   326de:	482e      	ldr	r0, [pc, #184]	@ (32798 <cdcd_xfer_cb+0x12c>)
   326e0:	f000 f918 	bl	32914 <tu_fifo_count>
   326e4:	2800      	cmp	r0, #0
   326e6:	d1ed      	bne.n	326c4 <cdcd_xfer_cb+0x58>
   326e8:	2d00      	cmp	r5, #0
   326ea:	d0eb      	beq.n	326c4 <cdcd_xfer_cb+0x58>
   326ec:	f3c5 0508 	ubfx	r5, r5, #0, #9
   326f0:	2d00      	cmp	r5, #0
   326f2:	d1e7      	bne.n	326c4 <cdcd_xfer_cb+0x58>
        if ( usbd_edpt_claim(rhport, p_cdc->ep_in) )
   326f4:	78b9      	ldrb	r1, [r7, #2]
   326f6:	4630      	mov	r0, r6
   326f8:	f001 f89c 	bl	33834 <usbd_edpt_claim>
   326fc:	2800      	cmp	r0, #0
   326fe:	d0e1      	beq.n	326c4 <cdcd_xfer_cb+0x58>
          usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0);
   32700:	78b9      	ldrb	r1, [r7, #2]
   32702:	462b      	mov	r3, r5
   32704:	462a      	mov	r2, r5
   32706:	4630      	mov	r0, r6
   32708:	f001 f8b0 	bl	3386c <usbd_edpt_xfer>
   3270c:	e7da      	b.n	326c4 <cdcd_xfer_cb+0x58>
    tu_fifo_write_n(&p_cdc->rx_ff, &p_cdc->epout_buf, xferred_bytes);
   3270e:	b29a      	uxth	r2, r3
   32710:	f107 0138 	add.w	r1, r7, #56	@ 0x38
   32714:	f107 0010 	add.w	r0, r7, #16
   32718:	f000 fa30 	bl	32b7c <tu_fifo_write_n>
    if ( tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1) )
   3271c:	4b1f      	ldr	r3, [pc, #124]	@ (3279c <cdcd_xfer_cb+0x130>)
   3271e:	2b00      	cmp	r3, #0
   32720:	d0ba      	beq.n	32698 <cdcd_xfer_cb+0x2c>
   32722:	797b      	ldrb	r3, [r7, #5]
   32724:	2bff      	cmp	r3, #255	@ 0xff
   32726:	d0b7      	beq.n	32698 <cdcd_xfer_cb+0x2c>
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
   32728:	2d00      	cmp	r5, #0
   3272a:	d0b5      	beq.n	32698 <cdcd_xfer_cb+0x2c>
   3272c:	f107 0837 	add.w	r8, r7, #55	@ 0x37
   32730:	eb08 0a05 	add.w	sl, r8, r5
        if ( (p_cdc->wanted_char == p_cdc->epout_buf[i]) && !tu_fifo_empty(&p_cdc->rx_ff) )
   32734:	f1a8 0927 	sub.w	r9, r8, #39	@ 0x27
   32738:	e002      	b.n	32740 <cdcd_xfer_cb+0xd4>
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
   3273a:	45c2      	cmp	sl, r8
   3273c:	d0ac      	beq.n	32698 <cdcd_xfer_cb+0x2c>
        if ( (p_cdc->wanted_char == p_cdc->epout_buf[i]) && !tu_fifo_empty(&p_cdc->rx_ff) )
   3273e:	797b      	ldrb	r3, [r7, #5]
   32740:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   32744:	429a      	cmp	r2, r3
   32746:	d1f8      	bne.n	3273a <cdcd_xfer_cb+0xce>
   32748:	4648      	mov	r0, r9
   3274a:	f000 f8f5 	bl	32938 <tu_fifo_empty>
   3274e:	2800      	cmp	r0, #0
   32750:	d1f3      	bne.n	3273a <cdcd_xfer_cb+0xce>
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
   32752:	7979      	ldrb	r1, [r7, #5]
   32754:	f3af 8000 	nop.w
   32758:	e7ef      	b.n	3273a <cdcd_xfer_cb+0xce>
  available = tu_fifo_remaining(&p_cdc->rx_ff);
   3275a:	480d      	ldr	r0, [pc, #52]	@ (32790 <cdcd_xfer_cb+0x124>)
   3275c:	f000 f8f6 	bl	3294c <tu_fifo_remaining>
  if ( available >= sizeof(p_cdc->epout_buf) )
   32760:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
   32764:	d30a      	bcc.n	3277c <cdcd_xfer_cb+0x110>
    usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
   32766:	4a0e      	ldr	r2, [pc, #56]	@ (327a0 <cdcd_xfer_cb+0x134>)
   32768:	78f9      	ldrb	r1, [r7, #3]
   3276a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
   3276e:	2000      	movs	r0, #0
   32770:	f001 f87c 	bl	3386c <usbd_edpt_xfer>
   32774:	e7a3      	b.n	326be <cdcd_xfer_cb+0x52>
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
   32776:	f7f9 fa93 	bl	2bca0 <tud_cdc_rx_cb>
   3277a:	e794      	b.n	326a6 <cdcd_xfer_cb+0x3a>
    usbd_edpt_release(rhport, p_cdc->ep_out);
   3277c:	78f9      	ldrb	r1, [r7, #3]
   3277e:	2000      	movs	r0, #0
   32780:	f001 f866 	bl	33850 <usbd_edpt_release>
   32784:	e79b      	b.n	326be <cdcd_xfer_cb+0x52>
   32786:	bf00      	nop
   32788:	100516e0 	.word	0x100516e0
   3278c:	0002bca1 	.word	0x0002bca1
   32790:	100516f0 	.word	0x100516f0
   32794:	0002bcdd 	.word	0x0002bcdd
   32798:	10051700 	.word	0x10051700
   3279c:	00000000 	.word	0x00000000
   327a0:	10051718 	.word	0x10051718

000327a4 <tusb_init>:
//--------------------------------------------------------------------+
// Public API
//--------------------------------------------------------------------+

bool tusb_init(void)
{
   327a4:	b508      	push	{r3, lr}
#if CFG_TUD_ENABLED && defined(TUD_OPT_RHPORT)
  // init device stack CFG_TUSB_RHPORTx_MODE must be defined
  TU_ASSERT ( tud_init(TUD_OPT_RHPORT) );
   327a6:	2000      	movs	r0, #0
   327a8:	f000 fad4 	bl	32d54 <tud_init>
   327ac:	b100      	cbz	r0, 327b0 <tusb_init+0xc>
  // init host stack CFG_TUSB_RHPORTx_MODE must be defined
  TU_ASSERT( tuh_init(TUH_OPT_RHPORT) );
#endif

  return true;
}
   327ae:	bd08      	pop	{r3, pc}
  TU_ASSERT ( tud_init(TUD_OPT_RHPORT) );
   327b0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   327b4:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
   327b8:	07db      	lsls	r3, r3, #31
   327ba:	d5f8      	bpl.n	327ae <tusb_init+0xa>
   327bc:	be00      	bkpt	0x0000
}
   327be:	bd08      	pop	{r3, pc}

000327c0 <tu_edpt_claim>:
bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
{
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
   327c0:	7803      	ldrb	r3, [r0, #0]
{
   327c2:	4602      	mov	r2, r0
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
   327c4:	f013 0001 	ands.w	r0, r3, #1
   327c8:	d113      	bne.n	327f2 <tu_edpt_claim+0x32>
   327ca:	7813      	ldrb	r3, [r2, #0]
   327cc:	f3c3 0180 	ubfx	r1, r3, #2, #1
   327d0:	075b      	lsls	r3, r3, #29
   327d2:	d40d      	bmi.n	327f0 <tu_edpt_claim+0x30>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
   327d4:	7813      	ldrb	r3, [r2, #0]
   327d6:	f013 0001 	ands.w	r0, r3, #1
   327da:	d108      	bne.n	327ee <tu_edpt_claim+0x2e>
   327dc:	7813      	ldrb	r3, [r2, #0]
   327de:	075b      	lsls	r3, r3, #29
   327e0:	d406      	bmi.n	327f0 <tu_edpt_claim+0x30>
  if (available)
  {
    ep_state->claimed = 1;
   327e2:	7813      	ldrb	r3, [r2, #0]
   327e4:	f043 0304 	orr.w	r3, r3, #4
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
   327e8:	2001      	movs	r0, #1
    ep_state->claimed = 1;
   327ea:	7013      	strb	r3, [r2, #0]
   327ec:	4770      	bx	lr
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
   327ee:	4608      	mov	r0, r1
  }

  (void) osal_mutex_unlock(mutex);

  return available;
}
   327f0:	4770      	bx	lr
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
   327f2:	2000      	movs	r0, #0
   327f4:	4770      	bx	lr
   327f6:	bf00      	nop

000327f8 <tu_edpt_release>:
  (void) mutex;

  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
   327f8:	7802      	ldrb	r2, [r0, #0]
{
   327fa:	4603      	mov	r3, r0
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
   327fc:	f3c2 0080 	ubfx	r0, r2, #2, #1
   32800:	0752      	lsls	r2, r2, #29
   32802:	d400      	bmi.n	32806 <tu_edpt_release+0xe>
  }

  (void) osal_mutex_unlock(mutex);

  return ret;
}
   32804:	4770      	bx	lr
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
   32806:	781a      	ldrb	r2, [r3, #0]
   32808:	f012 0201 	ands.w	r2, r2, #1
   3280c:	d104      	bne.n	32818 <tu_edpt_release+0x20>
    ep_state->claimed = 0;
   3280e:	7819      	ldrb	r1, [r3, #0]
   32810:	f362 0182 	bfi	r1, r2, #2, #1
   32814:	7019      	strb	r1, [r3, #0]
   32816:	4770      	bx	lr
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
   32818:	2000      	movs	r0, #0
}
   3281a:	4770      	bx	lr

0003281c <tu_edpt_validate>:
bool tu_edpt_validate(tusb_desc_endpoint_t const * desc_ep, tusb_speed_t speed)
{
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer)
   3281c:	78c3      	ldrb	r3, [r0, #3]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
   3281e:	8882      	ldrh	r2, [r0, #4]
   32820:	f003 0003 	and.w	r0, r3, #3
   32824:	2802      	cmp	r0, #2
   32826:	f3c2 020a 	ubfx	r2, r2, #0, #11
   3282a:	d01f      	beq.n	3286c <tu_edpt_validate+0x50>
   3282c:	2803      	cmp	r0, #3
   3282e:	d003      	beq.n	32838 <tu_edpt_validate+0x1c>
   32830:	2801      	cmp	r0, #1
   32832:	d00a      	beq.n	3284a <tu_edpt_validate+0x2e>
  {
    case TUSB_XFER_ISOCHRONOUS:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
      TU_ASSERT(max_packet_size <= spec_size);
   32834:	2000      	movs	r0, #0
   32836:	4770      	bx	lr
      }
    break;

    case TUSB_XFER_INTERRUPT:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
   32838:	2902      	cmp	r1, #2
   3283a:	bf14      	ite	ne
   3283c:	2340      	movne	r3, #64	@ 0x40
   3283e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
      TU_ASSERT(max_packet_size <= spec_size);
   32842:	4293      	cmp	r3, r2
   32844:	d309      	bcc.n	3285a <tu_edpt_validate+0x3e>
    break;

    default: return false;
  }

  return true;
   32846:	2001      	movs	r0, #1
}
   32848:	4770      	bx	lr
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
   3284a:	2902      	cmp	r1, #2
   3284c:	f240 33ff 	movw	r3, #1023	@ 0x3ff
   32850:	bf08      	it	eq
   32852:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
      TU_ASSERT(max_packet_size <= spec_size);
   32856:	4293      	cmp	r3, r2
   32858:	d2f6      	bcs.n	32848 <tu_edpt_validate+0x2c>
        TU_ASSERT(max_packet_size == 512);
   3285a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   3285e:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
   32862:	07db      	lsls	r3, r3, #31
   32864:	d5e6      	bpl.n	32834 <tu_edpt_validate+0x18>
   32866:	be00      	bkpt	0x0000
      TU_ASSERT(max_packet_size <= spec_size);
   32868:	2000      	movs	r0, #0
   3286a:	4770      	bx	lr
      if (speed == TUSB_SPEED_HIGH)
   3286c:	2902      	cmp	r1, #2
   3286e:	d002      	beq.n	32876 <tu_edpt_validate+0x5a>
        TU_ASSERT(max_packet_size <= 64);
   32870:	2a40      	cmp	r2, #64	@ 0x40
   32872:	d9e8      	bls.n	32846 <tu_edpt_validate+0x2a>
   32874:	e7f1      	b.n	3285a <tu_edpt_validate+0x3e>
        TU_ASSERT(max_packet_size == 512);
   32876:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
   3287a:	d0e4      	beq.n	32846 <tu_edpt_validate+0x2a>
   3287c:	e7ed      	b.n	3285a <tu_edpt_validate+0x3e>
   3287e:	bf00      	nop

00032880 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len, uint8_t driver_id)
{
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
  uint8_t const* desc_end = p_desc + desc_len;
   32880:	440a      	add	r2, r1

  while( p_desc < desc_end )
   32882:	4291      	cmp	r1, r2
   32884:	d226      	bcs.n	328d4 <tu_edpt_bind_driver+0x54>
  {
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
   32886:	f891 c001 	ldrb.w	ip, [r1, #1]
   3288a:	f1bc 0f05 	cmp.w	ip, #5
   3288e:	d005      	beq.n	3289c <tu_edpt_bind_driver+0x1c>
  return desc8 + desc8[DESC_OFFSET_LEN];
   32890:	f891 c000 	ldrb.w	ip, [r1]
   32894:	4461      	add	r1, ip
  while( p_desc < desc_end )
   32896:	428a      	cmp	r2, r1
   32898:	d8f5      	bhi.n	32886 <tu_edpt_bind_driver+0x6>
   3289a:	4770      	bx	lr
{
   3289c:	b500      	push	{lr}
    {
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
   3289e:	f891 c002 	ldrb.w	ip, [r1, #2]

      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
   328a2:	f00c 0e7f 	and.w	lr, ip, #127	@ 0x7f
   328a6:	eb00 0e4e 	add.w	lr, r0, lr, lsl #1
   328aa:	ea4f 1cdc 	mov.w	ip, ip, lsr #7
   328ae:	f80e 300c 	strb.w	r3, [lr, ip]
   328b2:	f891 c000 	ldrb.w	ip, [r1]
   328b6:	4461      	add	r1, ip
  while( p_desc < desc_end )
   328b8:	428a      	cmp	r2, r1
   328ba:	d909      	bls.n	328d0 <tu_edpt_bind_driver+0x50>
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
   328bc:	f891 c001 	ldrb.w	ip, [r1, #1]
   328c0:	f1bc 0f05 	cmp.w	ip, #5
   328c4:	d0eb      	beq.n	3289e <tu_edpt_bind_driver+0x1e>
   328c6:	f891 c000 	ldrb.w	ip, [r1]
   328ca:	4461      	add	r1, ip
  while( p_desc < desc_end )
   328cc:	428a      	cmp	r2, r1
   328ce:	d8f5      	bhi.n	328bc <tu_edpt_bind_driver+0x3c>
    }

    p_desc = tu_desc_next(p_desc);
  }
}
   328d0:	f85d fb04 	ldr.w	pc, [sp], #4
   328d4:	4770      	bx	lr
   328d6:	bf00      	nop

000328d8 <tu_fifo_config>:
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
   328d8:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
{
   328dc:	f89d c000 	ldrb.w	ip, [sp]
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
   328e0:	d816      	bhi.n	32910 <tu_fifo_config+0x38>
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer = (uint8_t*) buffer;
  f->depth  = depth;
  f->item_size = item_size;
   328e2:	f3c3 030e 	ubfx	r3, r3, #0, #15
   328e6:	ea43 33cc 	orr.w	r3, r3, ip, lsl #15
  f->overwritable = overwritable;

  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  f->max_pointer_idx = 2*depth - 1;
   328ea:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   328ee:	fa1f fc8c 	uxth.w	ip, ip
  f->depth  = depth;
   328f2:	8082      	strh	r2, [r0, #4]
  f->item_size = item_size;
   328f4:	80c3      	strh	r3, [r0, #6]
  f->max_pointer_idx = 2*depth - 1;
   328f6:	f10c 32ff 	add.w	r2, ip, #4294967295	@ 0xffffffff
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;

  f->rd_idx = f->wr_idx = 0;
   328fa:	2300      	movs	r3, #0
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;
   328fc:	f1cc 0c00 	rsb	ip, ip, #0
  f->rd_idx = f->wr_idx = 0;
   32900:	8183      	strh	r3, [r0, #12]
  f->buffer = (uint8_t*) buffer;
   32902:	6001      	str	r1, [r0, #0]
  f->max_pointer_idx = 2*depth - 1;
   32904:	8142      	strh	r2, [r0, #10]
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;
   32906:	f8a0 c008 	strh.w	ip, [r0, #8]
  f->rd_idx = f->wr_idx = 0;
   3290a:	81c3      	strh	r3, [r0, #14]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
   3290c:	2001      	movs	r0, #1
   3290e:	4770      	bx	lr
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
   32910:	2000      	movs	r0, #0
}
   32912:	4770      	bx	lr

00032914 <tu_fifo_count>:
    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
  return tu_min16(_tu_fifo_count(f, f->wr_idx, f->rd_idx), f->depth);
   32914:	8981      	ldrh	r1, [r0, #12]
   32916:	89c2      	ldrh	r2, [r0, #14]
   32918:	b289      	uxth	r1, r1
   3291a:	b292      	uxth	r2, r2
{
   3291c:	4603      	mov	r3, r0
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
   3291e:	4291      	cmp	r1, r2
  uint16_t cnt = wAbs-rAbs;
   32920:	eba1 0002 	sub.w	r0, r1, r2
   32924:	b280      	uxth	r0, r0
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
   32926:	d202      	bcs.n	3292e <tu_fifo_count+0x1a>
   32928:	891a      	ldrh	r2, [r3, #8]
   3292a:	1a80      	subs	r0, r0, r2
   3292c:	b280      	uxth	r0, r0

//------------- Min -------------//
TU_ATTR_ALWAYS_INLINE static inline uint8_t  tu_min8  (uint8_t  x, uint8_t y ) { return (x < y) ? x : y; }
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
   3292e:	889b      	ldrh	r3, [r3, #4]
}
   32930:	4298      	cmp	r0, r3
   32932:	bf28      	it	cs
   32934:	4618      	movcs	r0, r3
   32936:	4770      	bx	lr

00032938 <tu_fifo_empty>:
    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
  return _tu_fifo_empty(f->wr_idx, f->rd_idx);
   32938:	8982      	ldrh	r2, [r0, #12]
   3293a:	89c3      	ldrh	r3, [r0, #14]
   3293c:	b290      	uxth	r0, r2
   3293e:	b29b      	uxth	r3, r3
}
   32940:	1ac0      	subs	r0, r0, r3
   32942:	fab0 f080 	clz	r0, r0
   32946:	0940      	lsrs	r0, r0, #5
   32948:	4770      	bx	lr
   3294a:	bf00      	nop

0003294c <tu_fifo_remaining>:
    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
  return _tu_fifo_remaining(f, f->wr_idx, f->rd_idx);
   3294c:	8981      	ldrh	r1, [r0, #12]
   3294e:	89c2      	ldrh	r2, [r0, #14]
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
   32950:	f8b0 c004 	ldrh.w	ip, [r0, #4]
  return _tu_fifo_remaining(f, f->wr_idx, f->rd_idx);
   32954:	b289      	uxth	r1, r1
   32956:	b292      	uxth	r2, r2
  uint16_t cnt = wAbs-rAbs;
   32958:	1a8b      	subs	r3, r1, r2
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
   3295a:	4291      	cmp	r1, r2
  uint16_t cnt = wAbs-rAbs;
   3295c:	b29b      	uxth	r3, r3
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
   3295e:	d202      	bcs.n	32966 <tu_fifo_remaining+0x1a>
   32960:	8902      	ldrh	r2, [r0, #8]
   32962:	1a9b      	subs	r3, r3, r2
   32964:	b29b      	uxth	r3, r3
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
   32966:	ebac 0003 	sub.w	r0, ip, r3
}
   3296a:	b280      	uxth	r0, r0
   3296c:	4770      	bx	lr
   3296e:	bf00      	nop

00032970 <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
   32970:	b538      	push	{r3, r4, r5, lr}
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
   32972:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
   32976:	89c3      	ldrh	r3, [r0, #14]
   32978:	fa1f fc8c 	uxth.w	ip, ip
   3297c:	b29b      	uxth	r3, r3
  uint16_t cnt = wAbs-rAbs;
   3297e:	ebac 0503 	sub.w	r5, ip, r3
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
   32982:	459c      	cmp	ip, r3
{
   32984:	4604      	mov	r4, r0
  uint16_t cnt = wAbs-rAbs;
   32986:	b2ad      	uxth	r5, r5
{
   32988:	4608      	mov	r0, r1
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
   3298a:	d202      	bcs.n	32992 <tu_fifo_read+0x22>
   3298c:	8922      	ldrh	r2, [r4, #8]
   3298e:	1aad      	subs	r5, r5, r2
   32990:	b2ad      	uxth	r5, r5
  if (cnt > f->depth)
   32992:	88a2      	ldrh	r2, [r4, #4]
   32994:	42aa      	cmp	r2, r5
   32996:	d22f      	bcs.n	329f8 <tu_fifo_read+0x88>
  if ((p < (uint16_t)(p - offset)) || ((uint16_t)(p - offset) > f->max_pointer_idx))
   32998:	4594      	cmp	ip, r2
   3299a:	d223      	bcs.n	329e4 <tu_fifo_read+0x74>
    p = (p - offset) - f->non_used_index_space;
   3299c:	8921      	ldrh	r1, [r4, #8]
   3299e:	4411      	add	r1, r2
   329a0:	ebac 0c01 	sub.w	ip, ip, r1
   329a4:	fa1f fc8c 	uxth.w	ip, ip
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
   329a8:	f8a4 c00e 	strh.w	ip, [r4, #14]
  while ( idx >= depth) idx -= depth;
   329ac:	4293      	cmp	r3, r2
   329ae:	d303      	bcc.n	329b8 <tu_fifo_read+0x48>
   329b0:	1a9b      	subs	r3, r3, r2
   329b2:	b29b      	uxth	r3, r3
   329b4:	429a      	cmp	r2, r3
   329b6:	d9fb      	bls.n	329b0 <tu_fifo_read+0x40>
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
   329b8:	88e2      	ldrh	r2, [r4, #6]
   329ba:	6821      	ldr	r1, [r4, #0]
   329bc:	f3c2 020e 	ubfx	r2, r2, #0, #15
   329c0:	fb02 1103 	mla	r1, r2, r3, r1
   329c4:	f7e5 fddc 	bl	18580 <memcpy>

  // Advance pointer
  f->rd_idx = advance_pointer(f, f->rd_idx, ret);
   329c8:	89e2      	ldrh	r2, [r4, #14]
   329ca:	b292      	uxth	r2, r2
  if ((p > (uint16_t)(p + offset)) || ((uint16_t)(p + offset) > f->max_pointer_idx))
   329cc:	1c53      	adds	r3, r2, #1
   329ce:	b29b      	uxth	r3, r3
   329d0:	429a      	cmp	r2, r3
   329d2:	f04f 0001 	mov.w	r0, #1
   329d6:	d914      	bls.n	32a02 <tu_fifo_read+0x92>
   329d8:	2300      	movs	r3, #0
    p = (p + offset) + f->non_used_index_space;
   329da:	8922      	ldrh	r2, [r4, #8]
   329dc:	4413      	add	r3, r2
   329de:	b29b      	uxth	r3, r3
  f->rd_idx = advance_pointer(f, f->rd_idx, ret);
   329e0:	81e3      	strh	r3, [r4, #14]

  _ff_unlock(f->mutex_rd);
  return ret;
}
   329e2:	bd38      	pop	{r3, r4, r5, pc}
  if ((p < (uint16_t)(p - offset)) || ((uint16_t)(p - offset) > f->max_pointer_idx))
   329e4:	8961      	ldrh	r1, [r4, #10]
   329e6:	ebac 0c02 	sub.w	ip, ip, r2
   329ea:	fa1f fc8c 	uxth.w	ip, ip
   329ee:	4561      	cmp	r1, ip
   329f0:	d30c      	bcc.n	32a0c <tu_fifo_read+0x9c>
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
   329f2:	f8a4 c00e 	strh.w	ip, [r4, #14]
    cnt = f->depth;
   329f6:	4615      	mov	r5, r2
  if (cnt == 0) return false;
   329f8:	2d00      	cmp	r5, #0
   329fa:	d1d7      	bne.n	329ac <tu_fifo_read+0x3c>
  f->rd_idx = advance_pointer(f, f->rd_idx, ret);
   329fc:	89e3      	ldrh	r3, [r4, #14]
  if (cnt == 0) return false;
   329fe:	4628      	mov	r0, r5
  f->rd_idx = advance_pointer(f, f->rd_idx, ret);
   32a00:	b29b      	uxth	r3, r3
  if ((p > (uint16_t)(p + offset)) || ((uint16_t)(p + offset) > f->max_pointer_idx))
   32a02:	8962      	ldrh	r2, [r4, #10]
   32a04:	429a      	cmp	r2, r3
   32a06:	d3e8      	bcc.n	329da <tu_fifo_read+0x6a>
  f->rd_idx = advance_pointer(f, f->rd_idx, ret);
   32a08:	81e3      	strh	r3, [r4, #14]
}
   32a0a:	bd38      	pop	{r3, r4, r5, pc}
    p = (p - offset) - f->non_used_index_space;
   32a0c:	8921      	ldrh	r1, [r4, #8]
   32a0e:	ebac 0c01 	sub.w	ip, ip, r1
   32a12:	fa1f fc8c 	uxth.w	ip, ip
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
   32a16:	f8a4 c00e 	strh.w	ip, [r4, #14]
    cnt = f->depth;
   32a1a:	4615      	mov	r5, r2
   32a1c:	e7ec      	b.n	329f8 <tu_fifo_read+0x88>
   32a1e:	bf00      	nop

00032a20 <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
   32a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
   32a24:	8983      	ldrh	r3, [r0, #12]
   32a26:	89c4      	ldrh	r4, [r0, #14]
   32a28:	b29b      	uxth	r3, r3
   32a2a:	b2a4      	uxth	r4, r4
  uint16_t cnt = wAbs-rAbs;
   32a2c:	1b1f      	subs	r7, r3, r4
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
   32a2e:	42a3      	cmp	r3, r4
{
   32a30:	4606      	mov	r6, r0
   32a32:	4688      	mov	r8, r1
  uint16_t cnt = wAbs-rAbs;
   32a34:	b2bf      	uxth	r7, r7
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
   32a36:	d202      	bcs.n	32a3e <tu_fifo_read_n+0x1e>
   32a38:	8901      	ldrh	r1, [r0, #8]
   32a3a:	1a79      	subs	r1, r7, r1
   32a3c:	b28f      	uxth	r7, r1
  if (cnt > f->depth)
   32a3e:	88b5      	ldrh	r5, [r6, #4]
   32a40:	42bd      	cmp	r5, r7
   32a42:	d240      	bcs.n	32ac6 <tu_fifo_read_n+0xa6>
  if ((p < (uint16_t)(p - offset)) || ((uint16_t)(p - offset) > f->max_pointer_idx))
   32a44:	42ab      	cmp	r3, r5
   32a46:	d235      	bcs.n	32ab4 <tu_fifo_read_n+0x94>
    p = (p - offset) - f->non_used_index_space;
   32a48:	8931      	ldrh	r1, [r6, #8]
   32a4a:	4429      	add	r1, r5
   32a4c:	1a5b      	subs	r3, r3, r1
   32a4e:	b29b      	uxth	r3, r3
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
   32a50:	81f3      	strh	r3, [r6, #14]
    rAbs = f->rd_idx;
   32a52:	89f4      	ldrh	r4, [r6, #14]
    cnt = f->depth;
   32a54:	462f      	mov	r7, r5
    rAbs = f->rd_idx;
   32a56:	b2a4      	uxth	r4, r4
  if (cnt < n) n = cnt;
   32a58:	4297      	cmp	r7, r2
   32a5a:	bf28      	it	cs
   32a5c:	4617      	movcs	r7, r2
  while ( idx >= depth) idx -= depth;
   32a5e:	42a5      	cmp	r5, r4
   32a60:	d803      	bhi.n	32a6a <tu_fifo_read_n+0x4a>
   32a62:	1b64      	subs	r4, r4, r5
   32a64:	b2a4      	uxth	r4, r4
   32a66:	42a5      	cmp	r5, r4
   32a68:	d9fb      	bls.n	32a62 <tu_fifo_read_n+0x42>
  uint16_t nLin_bytes = nLin * f->item_size;
   32a6a:	f8b6 9006 	ldrh.w	r9, [r6, #6]
  uint8_t* ff_buf = f->buffer + (rel * f->item_size);
   32a6e:	6831      	ldr	r1, [r6, #0]
  uint16_t const nLin = f->depth - rel;
   32a70:	1b2b      	subs	r3, r5, r4
   32a72:	b29b      	uxth	r3, r3
  uint16_t nLin_bytes = nLin * f->item_size;
   32a74:	f3c9 020e 	ubfx	r2, r9, #0, #15
      if ( n <= nLin )
   32a78:	429f      	cmp	r7, r3
  uint16_t nLin_bytes = nLin * f->item_size;
   32a7a:	4691      	mov	r9, r2
  uint8_t* ff_buf = f->buffer + (rel * f->item_size);
   32a7c:	fb02 1104 	mla	r1, r2, r4, r1
      if ( n <= nLin )
   32a80:	d92f      	bls.n	32ae2 <tu_fifo_read_n+0xc2>
  uint16_t nLin_bytes = nLin * f->item_size;
   32a82:	fb13 f302 	smulbb	r3, r3, r2
        memcpy(app_buf, ff_buf, nLin_bytes);
   32a86:	fa1f fa83 	uxth.w	sl, r3
   32a8a:	4652      	mov	r2, sl
   32a8c:	4640      	mov	r0, r8
   32a8e:	f7e5 fd77 	bl	18580 <memcpy>
  uint16_t const nWrap = n - nLin; // only used if wrapped
   32a92:	1b7b      	subs	r3, r7, r5
   32a94:	18e2      	adds	r2, r4, r3
  uint16_t nWrap_bytes = nWrap * f->item_size;
   32a96:	fb12 f209 	smulbb	r2, r2, r9
        memcpy((uint8_t*) app_buf + nLin_bytes, f->buffer, nWrap_bytes);
   32a9a:	6831      	ldr	r1, [r6, #0]
   32a9c:	eb08 000a 	add.w	r0, r8, sl
   32aa0:	b292      	uxth	r2, r2
   32aa2:	f7e5 fd6d 	bl	18580 <memcpy>
  f->rd_idx = advance_pointer(f, f->rd_idx, n);
   32aa6:	89f2      	ldrh	r2, [r6, #14]
   32aa8:	b292      	uxth	r2, r2
  if ((p > (uint16_t)(p + offset)) || ((uint16_t)(p + offset) > f->max_pointer_idx))
   32aaa:	19d3      	adds	r3, r2, r7
   32aac:	b29b      	uxth	r3, r3
   32aae:	429a      	cmp	r2, r3
   32ab0:	d810      	bhi.n	32ad4 <tu_fifo_read_n+0xb4>
   32ab2:	e00c      	b.n	32ace <tu_fifo_read_n+0xae>
  if ((p < (uint16_t)(p - offset)) || ((uint16_t)(p - offset) > f->max_pointer_idx))
   32ab4:	8971      	ldrh	r1, [r6, #10]
   32ab6:	1b5b      	subs	r3, r3, r5
   32ab8:	b29b      	uxth	r3, r3
   32aba:	4299      	cmp	r1, r3
   32abc:	d317      	bcc.n	32aee <tu_fifo_read_n+0xce>
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
   32abe:	81f3      	strh	r3, [r6, #14]
    rAbs = f->rd_idx;
   32ac0:	89f4      	ldrh	r4, [r6, #14]
    cnt = f->depth;
   32ac2:	462f      	mov	r7, r5
    rAbs = f->rd_idx;
   32ac4:	b2a4      	uxth	r4, r4
  if (cnt == 0) return 0;
   32ac6:	2f00      	cmp	r7, #0
   32ac8:	d1c6      	bne.n	32a58 <tu_fifo_read_n+0x38>
  f->rd_idx = advance_pointer(f, f->rd_idx, n);
   32aca:	89f3      	ldrh	r3, [r6, #14]
   32acc:	b29b      	uxth	r3, r3
  if ((p > (uint16_t)(p + offset)) || ((uint16_t)(p + offset) > f->max_pointer_idx))
   32ace:	8972      	ldrh	r2, [r6, #10]
   32ad0:	429a      	cmp	r2, r3
   32ad2:	d202      	bcs.n	32ada <tu_fifo_read_n+0xba>
    p = (p + offset) + f->non_used_index_space;
   32ad4:	8932      	ldrh	r2, [r6, #8]
   32ad6:	4413      	add	r3, r2
   32ad8:	b29b      	uxth	r3, r3
  f->rd_idx = advance_pointer(f, f->rd_idx, n);
   32ada:	81f3      	strh	r3, [r6, #14]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
}
   32adc:	4638      	mov	r0, r7
   32ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        memcpy(app_buf, ff_buf, n*f->item_size);
   32ae2:	fb07 f202 	mul.w	r2, r7, r2
   32ae6:	4640      	mov	r0, r8
   32ae8:	f7e5 fd4a 	bl	18580 <memcpy>
   32aec:	e7db      	b.n	32aa6 <tu_fifo_read_n+0x86>
    p = (p - offset) - f->non_used_index_space;
   32aee:	8931      	ldrh	r1, [r6, #8]
   32af0:	1a5b      	subs	r3, r3, r1
   32af2:	b29b      	uxth	r3, r3
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
   32af4:	81f3      	strh	r3, [r6, #14]
    rAbs = f->rd_idx;
   32af6:	89f4      	ldrh	r4, [r6, #14]
    cnt = f->depth;
   32af8:	462f      	mov	r7, r5
    rAbs = f->rd_idx;
   32afa:	b2a4      	uxth	r4, r4
    cnt = f->depth;
   32afc:	e7e3      	b.n	32ac6 <tu_fifo_read_n+0xa6>
   32afe:	bf00      	nop

00032b00 <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
   32b00:	b538      	push	{r3, r4, r5, lr}
  _ff_lock(f->mutex_wr);

  uint16_t w = f->wr_idx;
   32b02:	8985      	ldrh	r5, [r0, #12]

  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable ) 
   32b04:	89c2      	ldrh	r2, [r0, #14]
  uint16_t w = f->wr_idx;
   32b06:	b2ad      	uxth	r5, r5
  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable ) 
   32b08:	b292      	uxth	r2, r2
  uint16_t cnt = wAbs-rAbs;
   32b0a:	1aab      	subs	r3, r5, r2
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
   32b0c:	42aa      	cmp	r2, r5
{
   32b0e:	4604      	mov	r4, r0
  uint16_t cnt = wAbs-rAbs;
   32b10:	b29b      	uxth	r3, r3
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
   32b12:	d902      	bls.n	32b1a <tu_fifo_write+0x1a>
   32b14:	8902      	ldrh	r2, [r0, #8]
   32b16:	1a9b      	subs	r3, r3, r2
   32b18:	b29b      	uxth	r3, r3
  return (_tu_fifo_count(f, wAbs, rAbs) == f->depth);
   32b1a:	88a2      	ldrh	r2, [r4, #4]
  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable ) 
   32b1c:	429a      	cmp	r2, r3
   32b1e:	d028      	beq.n	32b72 <tu_fifo_write+0x72>
  while ( idx >= depth) idx -= depth;
   32b20:	4295      	cmp	r5, r2
   32b22:	bf28      	it	cs
   32b24:	462b      	movcs	r3, r5
   32b26:	d316      	bcc.n	32b56 <tu_fifo_write+0x56>
   32b28:	1a9b      	subs	r3, r3, r2
   32b2a:	b29b      	uxth	r3, r3
   32b2c:	429a      	cmp	r2, r3
   32b2e:	d9fb      	bls.n	32b28 <tu_fifo_write+0x28>
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
   32b30:	88e2      	ldrh	r2, [r4, #6]
   32b32:	6820      	ldr	r0, [r4, #0]
   32b34:	f3c2 020e 	ubfx	r2, r2, #0, #15
   32b38:	fb02 0003 	mla	r0, r2, r3, r0
   32b3c:	f7e5 fd20 	bl	18580 <memcpy>
  if ((p > (uint16_t)(p + offset)) || ((uint16_t)(p + offset) > f->max_pointer_idx))
   32b40:	1c6b      	adds	r3, r5, #1
   32b42:	b29b      	uxth	r3, r3
   32b44:	429d      	cmp	r5, r3
   32b46:	d910      	bls.n	32b6a <tu_fifo_write+0x6a>
   32b48:	2300      	movs	r3, #0
    p = (p + offset) + f->non_used_index_space;
   32b4a:	8922      	ldrh	r2, [r4, #8]
   32b4c:	4413      	add	r3, r2
   32b4e:	b29b      	uxth	r3, r3

  // Write data
  _ff_push(f, data, wRel);

  // Advance pointer
  f->wr_idx = advance_pointer(f, w, 1);
   32b50:	81a3      	strh	r3, [r4, #12]

  _ff_unlock(f->mutex_wr);

  return true;
   32b52:	2001      	movs	r0, #1
}
   32b54:	bd38      	pop	{r3, r4, r5, pc}
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
   32b56:	88e2      	ldrh	r2, [r4, #6]
   32b58:	6820      	ldr	r0, [r4, #0]
   32b5a:	f3c2 020e 	ubfx	r2, r2, #0, #15
   32b5e:	fb05 0002 	mla	r0, r5, r2, r0
  if ((p > (uint16_t)(p + offset)) || ((uint16_t)(p + offset) > f->max_pointer_idx))
   32b62:	3501      	adds	r5, #1
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
   32b64:	f7e5 fd0c 	bl	18580 <memcpy>
  if ((p > (uint16_t)(p + offset)) || ((uint16_t)(p + offset) > f->max_pointer_idx))
   32b68:	b2ab      	uxth	r3, r5
   32b6a:	8962      	ldrh	r2, [r4, #10]
   32b6c:	429a      	cmp	r2, r3
   32b6e:	d2ef      	bcs.n	32b50 <tu_fifo_write+0x50>
   32b70:	e7eb      	b.n	32b4a <tu_fifo_write+0x4a>
  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable ) 
   32b72:	79e0      	ldrb	r0, [r4, #7]
   32b74:	09c0      	lsrs	r0, r0, #7
   32b76:	d1d3      	bne.n	32b20 <tu_fifo_write+0x20>
}
   32b78:	bd38      	pop	{r3, r4, r5, pc}
   32b7a:	bf00      	nop

00032b7c <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
   32b7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ( n == 0 ) return 0;
   32b80:	4615      	mov	r5, r2
   32b82:	2a00      	cmp	r2, #0
   32b84:	d038      	beq.n	32bf8 <tu_fifo_write_n+0x7c>
   32b86:	4606      	mov	r6, r0
   32b88:	468a      	mov	sl, r1
    buf8 = buf8 + (n - f->depth) * f->item_size;
   32b8a:	88f2      	ldrh	r2, [r6, #6]
  if (!f->overwritable)
   32b8c:	79f1      	ldrb	r1, [r6, #7]
  uint16_t w = f->wr_idx, r = f->rd_idx;
   32b8e:	8987      	ldrh	r7, [r0, #12]
   32b90:	89c0      	ldrh	r0, [r0, #14]
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
   32b92:	88b3      	ldrh	r3, [r6, #4]
    buf8 = buf8 + (n - f->depth) * f->item_size;
   32b94:	f3c2 090e 	ubfx	r9, r2, #0, #15
  if (!f->overwritable)
   32b98:	09c9      	lsrs	r1, r1, #7
  uint16_t w = f->wr_idx, r = f->rd_idx;
   32b9a:	b2bf      	uxth	r7, r7
   32b9c:	b280      	uxth	r0, r0
    buf8 = buf8 + (n - f->depth) * f->item_size;
   32b9e:	464a      	mov	r2, r9
  if (!f->overwritable)
   32ba0:	d12d      	bne.n	32bfe <tu_fifo_write_n+0x82>
  uint16_t cnt = wAbs-rAbs;
   32ba2:	1a39      	subs	r1, r7, r0
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
   32ba4:	4287      	cmp	r7, r0
  uint16_t cnt = wAbs-rAbs;
   32ba6:	b289      	uxth	r1, r1
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
   32ba8:	d346      	bcc.n	32c38 <tu_fifo_write_n+0xbc>
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
   32baa:	1a59      	subs	r1, r3, r1
   32bac:	b289      	uxth	r1, r1
   32bae:	428d      	cmp	r5, r1
   32bb0:	bf28      	it	cs
   32bb2:	460d      	movcs	r5, r1
   32bb4:	eba5 0803 	sub.w	r8, r5, r3
   32bb8:	fa1f f888 	uxth.w	r8, r8
  while ( idx >= depth) idx -= depth;
   32bbc:	429f      	cmp	r7, r3
   32bbe:	463c      	mov	r4, r7
   32bc0:	d303      	bcc.n	32bca <tu_fifo_write_n+0x4e>
   32bc2:	1ae4      	subs	r4, r4, r3
   32bc4:	b2a4      	uxth	r4, r4
   32bc6:	429c      	cmp	r4, r3
   32bc8:	d2fb      	bcs.n	32bc2 <tu_fifo_write_n+0x46>
  uint16_t const nLin = f->depth - rel;
   32bca:	1b1b      	subs	r3, r3, r4
  uint8_t* ff_buf = f->buffer + (rel * f->item_size);
   32bcc:	6830      	ldr	r0, [r6, #0]
  uint16_t const nLin = f->depth - rel;
   32bce:	b29b      	uxth	r3, r3
      if(n <= nLin)
   32bd0:	429d      	cmp	r5, r3
  uint8_t* ff_buf = f->buffer + (rel * f->item_size);
   32bd2:	fb02 0004 	mla	r0, r2, r4, r0
      if(n <= nLin)
   32bd6:	d81c      	bhi.n	32c12 <tu_fifo_write_n+0x96>
        memcpy(ff_buf, app_buf, n*f->item_size);
   32bd8:	fb05 f202 	mul.w	r2, r5, r2
   32bdc:	4651      	mov	r1, sl
   32bde:	f7e5 fccf 	bl	18580 <memcpy>
  if ((p > (uint16_t)(p + offset)) || ((uint16_t)(p + offset) > f->max_pointer_idx))
   32be2:	19eb      	adds	r3, r5, r7
   32be4:	b29b      	uxth	r3, r3
   32be6:	429f      	cmp	r7, r3
   32be8:	d802      	bhi.n	32bf0 <tu_fifo_write_n+0x74>
   32bea:	8972      	ldrh	r2, [r6, #10]
   32bec:	429a      	cmp	r2, r3
   32bee:	d202      	bcs.n	32bf6 <tu_fifo_write_n+0x7a>
    p = (p + offset) + f->non_used_index_space;
   32bf0:	8932      	ldrh	r2, [r6, #8]
   32bf2:	4413      	add	r3, r2
   32bf4:	b29b      	uxth	r3, r3
  f->wr_idx = advance_pointer(f, w, n);
   32bf6:	81b3      	strh	r3, [r6, #12]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
}
   32bf8:	4628      	mov	r0, r5
   32bfa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if (n >= f->depth)
   32bfe:	429d      	cmp	r5, r3
   32c00:	d31e      	bcc.n	32c40 <tu_fifo_write_n+0xc4>
    buf8 = buf8 + (n - f->depth) * f->item_size;
   32c02:	1aed      	subs	r5, r5, r3
   32c04:	fb09 aa05 	mla	sl, r9, r5, sl
    w = r;
   32c08:	4607      	mov	r7, r0
    n = f->depth;
   32c0a:	461d      	mov	r5, r3
    buf8 = buf8 + (n - f->depth) * f->item_size;
   32c0c:	f04f 0800 	mov.w	r8, #0
   32c10:	e7d4      	b.n	32bbc <tu_fifo_write_n+0x40>
  uint16_t nLin_bytes = nLin * f->item_size;
   32c12:	fb13 f309 	smulbb	r3, r3, r9
        memcpy(ff_buf, app_buf, nLin_bytes);
   32c16:	fa1f fb83 	uxth.w	fp, r3
   32c1a:	465a      	mov	r2, fp
   32c1c:	4651      	mov	r1, sl
   32c1e:	f7e5 fcaf 	bl	18580 <memcpy>
  uint16_t const nWrap = n - nLin;
   32c22:	eb08 0204 	add.w	r2, r8, r4
  uint16_t nWrap_bytes = nWrap * f->item_size;
   32c26:	fb12 f209 	smulbb	r2, r2, r9
        memcpy(f->buffer, ((uint8_t const*) app_buf) + nLin_bytes, nWrap_bytes);
   32c2a:	6830      	ldr	r0, [r6, #0]
   32c2c:	eb0a 010b 	add.w	r1, sl, fp
   32c30:	b292      	uxth	r2, r2
   32c32:	f7e5 fca5 	bl	18580 <memcpy>
   32c36:	e7d4      	b.n	32be2 <tu_fifo_write_n+0x66>
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
   32c38:	8930      	ldrh	r0, [r6, #8]
   32c3a:	1a09      	subs	r1, r1, r0
   32c3c:	b289      	uxth	r1, r1
   32c3e:	e7b4      	b.n	32baa <tu_fifo_write_n+0x2e>
   32c40:	eba5 0803 	sub.w	r8, r5, r3
   32c44:	fa1f f888 	uxth.w	r8, r8
   32c48:	e7b8      	b.n	32bbc <tu_fifo_write_n+0x40>
   32c4a:	bf00      	nop

00032c4c <tu_fifo_clear>:
{
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = f->wr_idx = 0;
  f->max_pointer_idx = 2*f->depth-1;
   32c4c:	8883      	ldrh	r3, [r0, #4]
   32c4e:	005b      	lsls	r3, r3, #1
   32c50:	b29b      	uxth	r3, r3
  f->rd_idx = f->wr_idx = 0;
   32c52:	2200      	movs	r2, #0
  f->max_pointer_idx = 2*f->depth-1;
   32c54:	1e59      	subs	r1, r3, #1
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;
   32c56:	425b      	negs	r3, r3
  f->rd_idx = f->wr_idx = 0;
   32c58:	8182      	strh	r2, [r0, #12]
  f->max_pointer_idx = 2*f->depth-1;
   32c5a:	8141      	strh	r1, [r0, #10]
  f->rd_idx = f->wr_idx = 0;
   32c5c:	81c2      	strh	r2, [r0, #14]
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;
   32c5e:	8103      	strh	r3, [r0, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
}
   32c60:	2001      	movs	r0, #1
   32c62:	4770      	bx	lr

00032c64 <tu_fifo_set_overwritable>:
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable)
{
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->overwritable = overwritable;
   32c64:	79c2      	ldrb	r2, [r0, #7]
{
   32c66:	4603      	mov	r3, r0
  f->overwritable = overwritable;
   32c68:	f361 12c7 	bfi	r2, r1, #7, #1

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
}
   32c6c:	2001      	movs	r0, #1
  f->overwritable = overwritable;
   32c6e:	71da      	strb	r2, [r3, #7]
}
   32c70:	4770      	bx	lr
   32c72:	bf00      	nop

00032c74 <configuration_reset>:

  return true;
}

static void configuration_reset(uint8_t rhport)
{
   32c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
   32c78:	4d21      	ldr	r5, [pc, #132]	@ (32d00 <configuration_reset+0x8c>)
    driver = &_usbd_driver[drvid - _app_driver_count];
   32c7a:	4f22      	ldr	r7, [pc, #136]	@ (32d04 <configuration_reset+0x90>)
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
   32c7c:	782a      	ldrb	r2, [r5, #0]
    driver = &_app_driver[drvid];
   32c7e:	4e22      	ldr	r6, [pc, #136]	@ (32d08 <configuration_reset+0x94>)
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
   32c80:	f04f 0800 	mov.w	r8, #0
{
   32c84:	4604      	mov	r4, r0
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
   32c86:	4643      	mov	r3, r8
   32c88:	e00f      	b.n	32caa <configuration_reset+0x36>
    driver = &_app_driver[drvid];
   32c8a:	6833      	ldr	r3, [r6, #0]
  {
    usbd_class_driver_t const * driver = get_driver(i);
    TU_ASSERT(driver, );
   32c8c:	eb13 03c1 	adds.w	r3, r3, r1, lsl #3
   32c90:	d02d      	beq.n	32cee <configuration_reset+0x7a>
    driver->reset(rhport);
   32c92:	685b      	ldr	r3, [r3, #4]
   32c94:	4620      	mov	r0, r4
   32c96:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
   32c98:	782a      	ldrb	r2, [r5, #0]
   32c9a:	f108 0801 	add.w	r8, r8, #1
   32c9e:	fa5f f888 	uxtb.w	r8, r8
   32ca2:	1c51      	adds	r1, r2, #1
   32ca4:	4541      	cmp	r1, r8
   32ca6:	4643      	mov	r3, r8
   32ca8:	db09      	blt.n	32cbe <configuration_reset+0x4a>
    driver = &_usbd_driver[drvid - _app_driver_count];
   32caa:	1a9b      	subs	r3, r3, r2
  if ( drvid < _app_driver_count ) {
   32cac:	4542      	cmp	r2, r8
    driver = &_app_driver[drvid];
   32cae:	eb08 0148 	add.w	r1, r8, r8, lsl #1
    driver = &_usbd_driver[drvid - _app_driver_count];
   32cb2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  if ( drvid < _app_driver_count ) {
   32cb6:	d8e8      	bhi.n	32c8a <configuration_reset+0x16>
    driver = &_usbd_driver[drvid - _app_driver_count];
   32cb8:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
    TU_ASSERT(driver, );
   32cbc:	e7e9      	b.n	32c92 <configuration_reset+0x1e>
  }

  tu_varclr(&_usbd_dev);
   32cbe:	4b13      	ldr	r3, [pc, #76]	@ (32d0c <configuration_reset+0x98>)
   32cc0:	222b      	movs	r2, #43	@ 0x2b
   32cc2:	2100      	movs	r1, #0
   32cc4:	4618      	mov	r0, r3
   32cc6:	f7f4 f909 	bl	26edc <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
   32cca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
   32cce:	f8c0 2003 	str.w	r2, [r0, #3]
   32cd2:	f8c0 2007 	str.w	r2, [r0, #7]
   32cd6:	f8c0 200b 	str.w	r2, [r0, #11]
   32cda:	f8c0 200f 	str.w	r2, [r0, #15]
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
   32cde:	f8c0 2013 	str.w	r2, [r0, #19]
   32ce2:	f8c0 2017 	str.w	r2, [r0, #23]
   32ce6:	f8c0 201b 	str.w	r2, [r0, #27]
}
   32cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    TU_ASSERT(driver, );
   32cee:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   32cf2:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
   32cf6:	07db      	lsls	r3, r3, #31
   32cf8:	d5f7      	bpl.n	32cea <configuration_reset+0x76>
   32cfa:	be00      	bkpt	0x0000
}
   32cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   32d00:	10051fdc 	.word	0x10051fdc
   32d04:	0004bc1c 	.word	0x0004bc1c
   32d08:	10051fe0 	.word	0x10051fe0
   32d0c:	10051fe4 	.word	0x10051fe4

00032d10 <usbd_int_set>:

void usbd_int_set(bool enabled)
{
  if (enabled)
  {
    dcd_int_enable(_usbd_rhport);
   32d10:	4b04      	ldr	r3, [pc, #16]	@ (32d24 <usbd_int_set+0x14>)
   32d12:	781b      	ldrb	r3, [r3, #0]
  if (enabled)
   32d14:	b110      	cbz	r0, 32d1c <usbd_int_set+0xc>
    dcd_int_enable(_usbd_rhport);
   32d16:	4618      	mov	r0, r3
   32d18:	f001 b9e0 	b.w	340dc <dcd_int_enable>
  }else
  {
    dcd_int_disable(_usbd_rhport);
   32d1c:	4618      	mov	r0, r3
   32d1e:	f001 b9e7 	b.w	340f0 <dcd_int_disable>
   32d22:	bf00      	nop
   32d24:	1000db6c 	.word	0x1000db6c

00032d28 <tud_speed_get>:
  return (tusb_speed_t) _usbd_dev.speed;
   32d28:	4b01      	ldr	r3, [pc, #4]	@ (32d30 <tud_speed_get+0x8>)
}
   32d2a:	7898      	ldrb	r0, [r3, #2]
   32d2c:	4770      	bx	lr
   32d2e:	bf00      	nop
   32d30:	10051fe4 	.word	0x10051fe4

00032d34 <tud_mounted>:
  return _usbd_dev.cfg_num ? true : false;
   32d34:	4b02      	ldr	r3, [pc, #8]	@ (32d40 <tud_mounted+0xc>)
   32d36:	7858      	ldrb	r0, [r3, #1]
}
   32d38:	3800      	subs	r0, #0
   32d3a:	bf18      	it	ne
   32d3c:	2001      	movne	r0, #1
   32d3e:	4770      	bx	lr
   32d40:	10051fe4 	.word	0x10051fe4

00032d44 <tud_suspended>:
  return _usbd_dev.suspended;
   32d44:	4b02      	ldr	r3, [pc, #8]	@ (32d50 <tud_suspended+0xc>)
   32d46:	7818      	ldrb	r0, [r3, #0]
}
   32d48:	f3c0 0080 	ubfx	r0, r0, #2, #1
   32d4c:	4770      	bx	lr
   32d4e:	bf00      	nop
   32d50:	10051fe4 	.word	0x10051fe4

00032d54 <tud_init>:
{
   32d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return _usbd_rhport != RHPORT_INVALID;
   32d58:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 32e1c <tud_init+0xc8>
  if ( tud_inited() ) return true;
   32d5c:	f898 3000 	ldrb.w	r3, [r8]
   32d60:	2bff      	cmp	r3, #255	@ 0xff
   32d62:	d002      	beq.n	32d6a <tud_init+0x16>
   32d64:	2001      	movs	r0, #1
}
   32d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  tu_varclr(&_usbd_dev);
   32d6a:	222b      	movs	r2, #43	@ 0x2b
   32d6c:	2100      	movs	r1, #0
   32d6e:	4605      	mov	r5, r0
   32d70:	4822      	ldr	r0, [pc, #136]	@ (32dfc <tud_init+0xa8>)
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
   32d72:	4c23      	ldr	r4, [pc, #140]	@ (32e00 <tud_init+0xac>)
  tu_varclr(&_usbd_dev);
   32d74:	f7f4 f8b2 	bl	26edc <memset>
  // enable dcd/hcd interrupt
  qhdl->interrupt_set(true);
}

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef) {
  tu_fifo_clear(&qdef->ff);
   32d78:	4822      	ldr	r0, [pc, #136]	@ (32e04 <tud_init+0xb0>)
   32d7a:	f7ff ff67 	bl	32c4c <tu_fifo_clear>
  _usbd_q = osal_queue_create(&_usbd_qdef);
   32d7e:	4a22      	ldr	r2, [pc, #136]	@ (32e08 <tud_init+0xb4>)
  if ( usbd_app_driver_get_cb )
   32d80:	4b22      	ldr	r3, [pc, #136]	@ (32e0c <tud_init+0xb8>)
  _usbd_q = osal_queue_create(&_usbd_qdef);
   32d82:	4923      	ldr	r1, [pc, #140]	@ (32e10 <tud_init+0xbc>)
   32d84:	6011      	str	r1, [r2, #0]
  if ( usbd_app_driver_get_cb )
   32d86:	b323      	cbz	r3, 32dd2 <tud_init+0x7e>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
   32d88:	4620      	mov	r0, r4
   32d8a:	f3af 8000 	nop.w
   32d8e:	4b21      	ldr	r3, [pc, #132]	@ (32e14 <tud_init+0xc0>)
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
   32d90:	7822      	ldrb	r2, [r4, #0]
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
   32d92:	6018      	str	r0, [r3, #0]
{
   32d94:	f04f 0900 	mov.w	r9, #0
    driver = &_usbd_driver[drvid - _app_driver_count];
   32d98:	4f1f      	ldr	r7, [pc, #124]	@ (32e18 <tud_init+0xc4>)
    driver = &_app_driver[drvid];
   32d9a:	4e1e      	ldr	r6, [pc, #120]	@ (32e14 <tud_init+0xc0>)
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
   32d9c:	464b      	mov	r3, r9
   32d9e:	e00e      	b.n	32dbe <tud_init+0x6a>
    driver = &_app_driver[drvid];
   32da0:	6833      	ldr	r3, [r6, #0]
    TU_ASSERT(driver);
   32da2:	eb13 03c1 	adds.w	r3, r3, r1, lsl #3
   32da6:	d01f      	beq.n	32de8 <tud_init+0x94>
    driver->init();
   32da8:	681b      	ldr	r3, [r3, #0]
   32daa:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
   32dac:	7822      	ldrb	r2, [r4, #0]
   32dae:	f109 0901 	add.w	r9, r9, #1
   32db2:	fa5f f989 	uxtb.w	r9, r9
   32db6:	1c51      	adds	r1, r2, #1
   32db8:	4549      	cmp	r1, r9
   32dba:	464b      	mov	r3, r9
   32dbc:	db0b      	blt.n	32dd6 <tud_init+0x82>
    driver = &_usbd_driver[drvid - _app_driver_count];
   32dbe:	1a9b      	subs	r3, r3, r2
  if ( drvid < _app_driver_count ) {
   32dc0:	454a      	cmp	r2, r9
    driver = &_app_driver[drvid];
   32dc2:	eb09 0149 	add.w	r1, r9, r9, lsl #1
    driver = &_usbd_driver[drvid - _app_driver_count];
   32dc6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  if ( drvid < _app_driver_count ) {
   32dca:	d8e9      	bhi.n	32da0 <tud_init+0x4c>
    driver = &_usbd_driver[drvid - _app_driver_count];
   32dcc:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
    TU_ASSERT(driver);
   32dd0:	e7ea      	b.n	32da8 <tud_init+0x54>
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
   32dd2:	7822      	ldrb	r2, [r4, #0]
   32dd4:	e7de      	b.n	32d94 <tud_init+0x40>
  dcd_init(rhport);
   32dd6:	4628      	mov	r0, r5
  _usbd_rhport = rhport;
   32dd8:	f888 5000 	strb.w	r5, [r8]
  dcd_init(rhport);
   32ddc:	f001 f9ee 	bl	341bc <dcd_init>
  dcd_int_enable(rhport);
   32de0:	4628      	mov	r0, r5
   32de2:	f001 f97b 	bl	340dc <dcd_int_enable>
  return true;
   32de6:	e7bd      	b.n	32d64 <tud_init+0x10>
    TU_ASSERT(driver);
   32de8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   32dec:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
   32df0:	07db      	lsls	r3, r3, #31
   32df2:	d500      	bpl.n	32df6 <tud_init+0xa2>
   32df4:	be00      	bkpt	0x0000
   32df6:	2000      	movs	r0, #0
   32df8:	e7b5      	b.n	32d66 <tud_init+0x12>
   32dfa:	bf00      	nop
   32dfc:	10051fe4 	.word	0x10051fe4
   32e00:	10051fdc 	.word	0x10051fdc
   32e04:	1000db5c 	.word	0x1000db5c
   32e08:	10051f18 	.word	0x10051f18
   32e0c:	00000000 	.word	0x00000000
   32e10:	1000db58 	.word	0x1000db58
   32e14:	10051fe0 	.word	0x10051fe0
   32e18:	0004bc1c 	.word	0x0004bc1c
   32e1c:	1000db6c 	.word	0x1000db6c

00032e20 <tud_task_ext>:
{
   32e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return _usbd_rhport != RHPORT_INVALID;
   32e24:	f8df a2c8 	ldr.w	sl, [pc, #712]	@ 330f0 <tud_task_ext+0x2d0>
  if ( !tud_inited() ) return;
   32e28:	f89a 3000 	ldrb.w	r3, [sl]
   32e2c:	2bff      	cmp	r3, #255	@ 0xff
{
   32e2e:	b08b      	sub	sp, #44	@ 0x2c
  if ( !tud_inited() ) return;
   32e30:	f000 80da 	beq.w	32fe8 <tud_task_ext+0x1c8>
   32e34:	4da7      	ldr	r5, [pc, #668]	@ (330d4 <tud_task_ext+0x2b4>)
        if ( _usbd_dev.connected )
   32e36:	4ca8      	ldr	r4, [pc, #672]	@ (330d8 <tud_task_ext+0x2b8>)
          if (tud_resume_cb) tud_resume_cb();
   32e38:	f8df 92b8 	ldr.w	r9, [pc, #696]	@ 330f4 <tud_task_ext+0x2d4>
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
   32e3c:	f8df b2b8 	ldr.w	fp, [pc, #696]	@ 330f8 <tud_task_ext+0x2d8>
    if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
   32e40:	682f      	ldr	r7, [r5, #0]
  qhdl->interrupt_set(false);
   32e42:	463e      	mov	r6, r7
   32e44:	2000      	movs	r0, #0
   32e46:	f856 3b04 	ldr.w	r3, [r6], #4
   32e4a:	4798      	blx	r3

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec) {
  (void) msec; // not used, always behave as msec = 0

  _osal_q_lock(qhdl);
  bool success = tu_fifo_read(&qhdl->ff, data);
   32e4c:	4630      	mov	r0, r6
   32e4e:	a907      	add	r1, sp, #28
   32e50:	f7ff fd8e 	bl	32970 <tu_fifo_read>
  qhdl->interrupt_set(true);
   32e54:	683b      	ldr	r3, [r7, #0]
  bool success = tu_fifo_read(&qhdl->ff, data);
   32e56:	4606      	mov	r6, r0
  qhdl->interrupt_set(true);
   32e58:	2001      	movs	r0, #1
   32e5a:	4798      	blx	r3
   32e5c:	2e00      	cmp	r6, #0
   32e5e:	f000 80c3 	beq.w	32fe8 <tud_task_ext+0x1c8>
    switch ( event.event_id )
   32e62:	f89d 301d 	ldrb.w	r3, [sp, #29]
   32e66:	3b01      	subs	r3, #1
   32e68:	2b07      	cmp	r3, #7
   32e6a:	f200 80a6 	bhi.w	32fba <tud_task_ext+0x19a>
   32e6e:	e8df f003 	tbb	[pc, r3]
   32e72:	7f8c      	.short	0x7f8c
   32e74:	307496a4 	.word	0x307496a4
   32e78:	040a      	.short	0x040a
        if ( event.func_call.func ) event.func_call.func(event.func_call.param);
   32e7a:	9b08      	ldr	r3, [sp, #32]
   32e7c:	2b00      	cmp	r3, #0
   32e7e:	d0df      	beq.n	32e40 <tud_task_ext+0x20>
   32e80:	9809      	ldr	r0, [sp, #36]	@ 0x24
   32e82:	4798      	blx	r3
   32e84:	e7dc      	b.n	32e40 <tud_task_ext+0x20>
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
   32e86:	f89d 1020 	ldrb.w	r1, [sp, #32]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
   32e8a:	f001 067f 	and.w	r6, r1, #127	@ 0x7f
        _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
   32e8e:	eb04 0046 	add.w	r0, r4, r6, lsl #1
   32e92:	eb00 10d1 	add.w	r0, r0, r1, lsr #7
   32e96:	7fc3      	ldrb	r3, [r0, #31]
   32e98:	f023 0301 	bic.w	r3, r3, #1
   32e9c:	77c3      	strb	r3, [r0, #31]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
   32e9e:	7fc3      	ldrb	r3, [r0, #31]
   32ea0:	f023 0304 	bic.w	r3, r3, #4
   32ea4:	77c3      	strb	r3, [r0, #31]
        if ( 0 == epnum )
   32ea6:	2e00      	cmp	r6, #0
   32ea8:	f000 80ba 	beq.w	33020 <tud_task_ext+0x200>
  if ( drvid < _app_driver_count ) {
   32eac:	4a8b      	ldr	r2, [pc, #556]	@ (330dc <tud_task_ext+0x2bc>)
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
   32eae:	7cc3      	ldrb	r3, [r0, #19]
  if ( drvid < _app_driver_count ) {
   32eb0:	7812      	ldrb	r2, [r2, #0]
   32eb2:	4293      	cmp	r3, r2
   32eb4:	f080 808a 	bcs.w	32fcc <tud_task_ext+0x1ac>
    driver = &_app_driver[drvid];
   32eb8:	4a89      	ldr	r2, [pc, #548]	@ (330e0 <tud_task_ext+0x2c0>)
   32eba:	6812      	ldr	r2, [r2, #0]
   32ebc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   32ec0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
          if ((_usbd_dev.connected == 0) && (driver == NULL))
   32ec4:	7822      	ldrb	r2, [r4, #0]
   32ec6:	07d7      	lsls	r7, r2, #31
   32ec8:	f100 80c1 	bmi.w	3304e <tud_task_ext+0x22e>
   32ecc:	2b00      	cmp	r3, #0
   32ece:	d0b7      	beq.n	32e40 <tud_task_ext+0x20>
   32ed0:	e0b5      	b.n	3303e <tud_task_ext+0x21e>
        _usbd_dev.connected = 1;
   32ed2:	7823      	ldrb	r3, [r4, #0]
        if ( !process_control_request(event.rhport, &event.setup_received) )
   32ed4:	f89d 801c 	ldrb.w	r8, [sp, #28]
        _usbd_dev.connected = 1;
   32ed8:	f043 0301 	orr.w	r3, r3, #1
   32edc:	7023      	strb	r3, [r4, #0]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = 0;
   32ede:	7fe3      	ldrb	r3, [r4, #31]
   32ee0:	f023 0301 	bic.w	r3, r3, #1
   32ee4:	77e3      	strb	r3, [r4, #31]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
   32ee6:	7fe3      	ldrb	r3, [r4, #31]
   32ee8:	f023 0304 	bic.w	r3, r3, #4
   32eec:	77e3      	strb	r3, [r4, #31]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].busy = 0;
   32eee:	f894 3020 	ldrb.w	r3, [r4, #32]
   32ef2:	f023 0301 	bic.w	r3, r3, #1
   32ef6:	f884 3020 	strb.w	r3, [r4, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].claimed = 0;
   32efa:	f894 3020 	ldrb.w	r3, [r4, #32]
  usbd_control_set_complete_callback(NULL);
   32efe:	2000      	movs	r0, #0
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].claimed = 0;
   32f00:	f023 0304 	bic.w	r3, r3, #4
   32f04:	f884 3020 	strb.w	r3, [r4, #32]
  usbd_control_set_complete_callback(NULL);
   32f08:	f000 fd40 	bl	3398c <usbd_control_set_complete_callback>
  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
   32f0c:	f89d 3020 	ldrb.w	r3, [sp, #32]
   32f10:	f003 0260 	and.w	r2, r3, #96	@ 0x60
   32f14:	2a60      	cmp	r2, #96	@ 0x60
   32f16:	d071      	beq.n	32ffc <tud_task_ext+0x1dc>
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR )
   32f18:	2a40      	cmp	r2, #64	@ 0x40
   32f1a:	f000 809b 	beq.w	33054 <tud_task_ext+0x234>
  switch ( p_request->bmRequestType_bit.recipient )
   32f1e:	f003 031f 	and.w	r3, r3, #31
   32f22:	2b01      	cmp	r3, #1
   32f24:	f000 80a4 	beq.w	33070 <tud_task_ext+0x250>
   32f28:	2b02      	cmp	r3, #2
   32f2a:	d060      	beq.n	32fee <tud_task_ext+0x1ce>
   32f2c:	2b00      	cmp	r3, #0
   32f2e:	d165      	bne.n	32ffc <tud_task_ext+0x1dc>
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type )
   32f30:	2a20      	cmp	r2, #32
   32f32:	f000 8111 	beq.w	33158 <tud_task_ext+0x338>
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
   32f36:	2a00      	cmp	r2, #0
   32f38:	d160      	bne.n	32ffc <tud_task_ext+0x1dc>
      switch ( p_request->bRequest )
   32f3a:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
   32f3e:	2b09      	cmp	r3, #9
   32f40:	d85c      	bhi.n	32ffc <tud_task_ext+0x1dc>
   32f42:	e8df f013 	tbh	[pc, r3, lsl #1]
   32f46:	014a      	.short	0x014a
   32f48:	005b01c0 	.word	0x005b01c0
   32f4c:	005b01b2 	.word	0x005b01b2
   32f50:	017b01a5 	.word	0x017b01a5
   32f54:	0170005b 	.word	0x0170005b
   32f58:	015b      	.short	0x015b
        if ( _usbd_dev.connected )
   32f5a:	7823      	ldrb	r3, [r4, #0]
   32f5c:	07da      	lsls	r2, r3, #31
   32f5e:	f57f af6f 	bpl.w	32e40 <tud_task_ext+0x20>
          if (tud_resume_cb) tud_resume_cb();
   32f62:	f1b9 0f00 	cmp.w	r9, #0
   32f66:	f43f af6b 	beq.w	32e40 <tud_task_ext+0x20>
   32f6a:	f7f8 ff31 	bl	2bdd0 <tud_resume_cb>
   32f6e:	e767      	b.n	32e40 <tud_task_ext+0x20>
  configuration_reset(rhport);
   32f70:	f89d 001c 	ldrb.w	r0, [sp, #28]
   32f74:	f7ff fe7e 	bl	32c74 <configuration_reset>
  usbd_control_reset();
   32f78:	f000 fcfe 	bl	33978 <usbd_control_reset>
        if (tud_umount_cb) tud_umount_cb();
   32f7c:	4b59      	ldr	r3, [pc, #356]	@ (330e4 <tud_task_ext+0x2c4>)
   32f7e:	2b00      	cmp	r3, #0
   32f80:	f43f af5e 	beq.w	32e40 <tud_task_ext+0x20>
   32f84:	f7f8 ff18 	bl	2bdb8 <tud_umount_cb>
   32f88:	e75a      	b.n	32e40 <tud_task_ext+0x20>
  configuration_reset(rhport);
   32f8a:	f89d 001c 	ldrb.w	r0, [sp, #28]
   32f8e:	f7ff fe71 	bl	32c74 <configuration_reset>
  usbd_control_reset();
   32f92:	f000 fcf1 	bl	33978 <usbd_control_reset>
        _usbd_dev.speed = event.bus_reset.speed;
   32f96:	f89d 3020 	ldrb.w	r3, [sp, #32]
   32f9a:	70a3      	strb	r3, [r4, #2]
      break;
   32f9c:	e750      	b.n	32e40 <tud_task_ext+0x20>
        if ( _usbd_dev.connected )
   32f9e:	7823      	ldrb	r3, [r4, #0]
   32fa0:	07d9      	lsls	r1, r3, #31
   32fa2:	f57f af4d 	bpl.w	32e40 <tud_task_ext+0x20>
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
   32fa6:	f1bb 0f00 	cmp.w	fp, #0
   32faa:	f43f af49 	beq.w	32e40 <tud_task_ext+0x20>
   32fae:	7820      	ldrb	r0, [r4, #0]
   32fb0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   32fb4:	f7f8 ff06 	bl	2bdc4 <tud_suspend_cb>
   32fb8:	e742      	b.n	32e40 <tud_task_ext+0x20>
        TU_BREAKPOINT();
   32fba:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   32fbe:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
   32fc2:	07db      	lsls	r3, r3, #31
   32fc4:	f57f af3c 	bpl.w	32e40 <tud_task_ext+0x20>
   32fc8:	be00      	bkpt	0x0000
  {
   32fca:	e739      	b.n	32e40 <tud_task_ext+0x20>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
   32fcc:	1c50      	adds	r0, r2, #1
   32fce:	4298      	cmp	r0, r3
   32fd0:	da2e      	bge.n	33030 <tud_task_ext+0x210>
          if ((_usbd_dev.connected == 0) && (driver == NULL))
   32fd2:	7823      	ldrb	r3, [r4, #0]
   32fd4:	07de      	lsls	r6, r3, #31
   32fd6:	f57f af33 	bpl.w	32e40 <tud_task_ext+0x20>
          TU_ASSERT(driver, );
   32fda:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   32fde:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
   32fe2:	07d8      	lsls	r0, r3, #31
   32fe4:	f100 80f7 	bmi.w	331d6 <tud_task_ext+0x3b6>
}
   32fe8:	b00b      	add	sp, #44	@ 0x2c
   32fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
   32fee:	f89d 1024 	ldrb.w	r1, [sp, #36]	@ 0x24
   32ff2:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
   32ff6:	2b05      	cmp	r3, #5
   32ff8:	f240 8080 	bls.w	330fc <tud_task_ext+0x2dc>
    default: TU_BREAKPOINT(); return false;
   32ffc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   33000:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
   33004:	07db      	lsls	r3, r3, #31
   33006:	d500      	bpl.n	3300a <tud_task_ext+0x1ea>
   33008:	be00      	bkpt	0x0000
          dcd_edpt_stall(event.rhport, 0);
   3300a:	f89d 001c 	ldrb.w	r0, [sp, #28]
   3300e:	2100      	movs	r1, #0
   33010:	f001 f8ae 	bl	34170 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
   33014:	f89d 001c 	ldrb.w	r0, [sp, #28]
   33018:	2180      	movs	r1, #128	@ 0x80
   3301a:	f001 f8a9 	bl	34170 <dcd_edpt_stall>
   3301e:	e70f      	b.n	32e40 <tud_task_ext+0x20>
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete
   33020:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   33022:	f89d 2021 	ldrb.w	r2, [sp, #33]	@ 0x21
   33026:	f89d 001c 	ldrb.w	r0, [sp, #28]
   3302a:	f000 fcc1 	bl	339b0 <usbd_control_xfer_cb>
   3302e:	e707      	b.n	32e40 <tud_task_ext+0x20>
    driver = &_usbd_driver[drvid - _app_driver_count];
   33030:	1a9b      	subs	r3, r3, r2
          if ((_usbd_dev.connected == 0) && (driver == NULL))
   33032:	7822      	ldrb	r2, [r4, #0]
    driver = &_usbd_driver[drvid - _app_driver_count];
   33034:	4a2c      	ldr	r2, [pc, #176]	@ (330e8 <tud_task_ext+0x2c8>)
   33036:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   3303a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
   3303e:	691e      	ldr	r6, [r3, #16]
   33040:	f89d 2021 	ldrb.w	r2, [sp, #33]	@ 0x21
   33044:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   33046:	f89d 001c 	ldrb.w	r0, [sp, #28]
   3304a:	47b0      	blx	r6
   3304c:	e6f8      	b.n	32e40 <tud_task_ext+0x20>
          TU_ASSERT(driver, );
   3304e:	2b00      	cmp	r3, #0
   33050:	d1f5      	bne.n	3303e <tud_task_ext+0x21e>
   33052:	e7c2      	b.n	32fda <tud_task_ext+0x1ba>
    TU_VERIFY(tud_vendor_control_xfer_cb);
   33054:	4825      	ldr	r0, [pc, #148]	@ (330ec <tud_task_ext+0x2cc>)
   33056:	2800      	cmp	r0, #0
   33058:	d0d7      	beq.n	3300a <tud_task_ext+0x1ea>
    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
   3305a:	f000 fc97 	bl	3398c <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
   3305e:	4640      	mov	r0, r8
   33060:	aa08      	add	r2, sp, #32
   33062:	2101      	movs	r1, #1
   33064:	f7f8 feee 	bl	2be44 <tud_vendor_control_xfer_cb>
        if ( !process_control_request(event.rhport, &event.setup_received) )
   33068:	2800      	cmp	r0, #0
   3306a:	f47f aee9 	bne.w	32e40 <tud_task_ext+0x20>
   3306e:	e7cc      	b.n	3300a <tud_task_ext+0x1ea>
   33070:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
   33074:	2b0f      	cmp	r3, #15
   33076:	d8c8      	bhi.n	3300a <tud_task_ext+0x1ea>
  if ( drvid < _app_driver_count ) {
   33078:	4a18      	ldr	r2, [pc, #96]	@ (330dc <tud_task_ext+0x2bc>)
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
   3307a:	4423      	add	r3, r4
  if ( drvid < _app_driver_count ) {
   3307c:	7812      	ldrb	r2, [r2, #0]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
   3307e:	78db      	ldrb	r3, [r3, #3]
  if ( drvid < _app_driver_count ) {
   33080:	4293      	cmp	r3, r2
   33082:	d27d      	bcs.n	33180 <tud_task_ext+0x360>
    driver = &_app_driver[drvid];
   33084:	4a16      	ldr	r2, [pc, #88]	@ (330e0 <tud_task_ext+0x2c0>)
   33086:	6816      	ldr	r6, [r2, #0]
   33088:	eb03 0343 	add.w	r3, r3, r3, lsl #1
      TU_VERIFY(driver);
   3308c:	eb16 06c3 	adds.w	r6, r6, r3, lsl #3
   33090:	d0bb      	beq.n	3300a <tud_task_ext+0x1ea>
  usbd_control_set_complete_callback(driver->control_xfer_cb);
   33092:	68f0      	ldr	r0, [r6, #12]
   33094:	f000 fc7a 	bl	3398c <usbd_control_set_complete_callback>
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
   33098:	68f3      	ldr	r3, [r6, #12]
   3309a:	aa08      	add	r2, sp, #32
   3309c:	2101      	movs	r1, #1
   3309e:	4640      	mov	r0, r8
   330a0:	4798      	blx	r3
      if ( !invoke_class_control(rhport, driver, p_request) )
   330a2:	2800      	cmp	r0, #0
   330a4:	f47f aecc 	bne.w	32e40 <tud_task_ext+0x20>
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
   330a8:	f89d 3020 	ldrb.w	r3, [sp, #32]
   330ac:	f013 0660 	ands.w	r6, r3, #96	@ 0x60
   330b0:	d1ab      	bne.n	3300a <tud_task_ext+0x1ea>
        switch(p_request->bRequest)
   330b2:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
   330b6:	3b0a      	subs	r3, #10
   330b8:	2b01      	cmp	r3, #1
   330ba:	d8a6      	bhi.n	3300a <tud_task_ext+0x1ea>
            usbd_control_set_complete_callback(NULL);
   330bc:	f000 fc66 	bl	3398c <usbd_control_set_complete_callback>
            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest)
   330c0:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
   330c4:	2b0a      	cmp	r3, #10
   330c6:	f000 81a1 	beq.w	3340c <tud_task_ext+0x5ec>
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
   330ca:	a908      	add	r1, sp, #32
   330cc:	4640      	mov	r0, r8
   330ce:	f000 fc03 	bl	338d8 <tud_control_status>
   330d2:	e6b5      	b.n	32e40 <tud_task_ext+0x20>
   330d4:	10051f18 	.word	0x10051f18
   330d8:	10051fe4 	.word	0x10051fe4
   330dc:	10051fdc 	.word	0x10051fdc
   330e0:	10051fe0 	.word	0x10051fe0
   330e4:	0002bdb9 	.word	0x0002bdb9
   330e8:	0004bc1c 	.word	0x0004bc1c
   330ec:	0002be45 	.word	0x0002be45
   330f0:	1000db6c 	.word	0x1000db6c
   330f4:	0002bdd1 	.word	0x0002bdd1
   330f8:	0002bdc5 	.word	0x0002bdc5
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
   330fc:	eb04 0043 	add.w	r0, r4, r3, lsl #1
  if ( drvid < _app_driver_count ) {
   33100:	4ebb      	ldr	r6, [pc, #748]	@ (333f0 <tud_task_ext+0x5d0>)
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
   33102:	eb00 10d1 	add.w	r0, r0, r1, lsr #7
  if ( drvid < _app_driver_count ) {
   33106:	7836      	ldrb	r6, [r6, #0]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
   33108:	7cc0      	ldrb	r0, [r0, #19]
  if ( drvid < _app_driver_count ) {
   3310a:	42b0      	cmp	r0, r6
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
   3310c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   33110:	ea4f 1cd1 	mov.w	ip, r1, lsr #7
  if ( drvid < _app_driver_count ) {
   33114:	d23f      	bcs.n	33196 <tud_task_ext+0x376>
    driver = &_app_driver[drvid];
   33116:	4eb7      	ldr	r6, [pc, #732]	@ (333f4 <tud_task_ext+0x5d4>)
   33118:	6836      	ldr	r6, [r6, #0]
   3311a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   3311e:	eb06 06c0 	add.w	r6, r6, r0, lsl #3
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
   33122:	2a00      	cmp	r2, #0
   33124:	d14e      	bne.n	331c4 <tud_task_ext+0x3a4>
        switch ( p_request->bRequest )
   33126:	f89d 2021 	ldrb.w	r2, [sp, #33]	@ 0x21
   3312a:	f002 00fd 	and.w	r0, r2, #253	@ 0xfd
   3312e:	2801      	cmp	r0, #1
   33130:	f000 8132 	beq.w	33398 <tud_task_ext+0x578>
   33134:	2a00      	cmp	r2, #0
   33136:	f47f af61 	bne.w	32ffc <tud_task_ext+0x1dc>
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  return _usbd_dev.ep_status[epnum][dir].stalled;
   3313a:	4423      	add	r3, r4
   3313c:	4463      	add	r3, ip
            tud_control_xfer(rhport, p_request, &status, 2);
   3313e:	4640      	mov	r0, r8
  return _usbd_dev.ep_status[epnum][dir].stalled;
   33140:	7fdb      	ldrb	r3, [r3, #31]
   33142:	f3c3 0340 	ubfx	r3, r3, #1, #1
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
   33146:	f8ad 301a 	strh.w	r3, [sp, #26]
            tud_control_xfer(rhport, p_request, &status, 2);
   3314a:	f10d 021a 	add.w	r2, sp, #26
   3314e:	2302      	movs	r3, #2
   33150:	a908      	add	r1, sp, #32
   33152:	f000 fbd9 	bl	33908 <tud_control_xfer>
          break;
   33156:	e673      	b.n	32e40 <tud_task_ext+0x20>
   33158:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
   3315c:	2b0f      	cmp	r3, #15
   3315e:	f63f af54 	bhi.w	3300a <tud_task_ext+0x1ea>
  if ( drvid < _app_driver_count ) {
   33162:	4aa3      	ldr	r2, [pc, #652]	@ (333f0 <tud_task_ext+0x5d0>)
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
   33164:	4423      	add	r3, r4
  if ( drvid < _app_driver_count ) {
   33166:	7812      	ldrb	r2, [r2, #0]
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
   33168:	78db      	ldrb	r3, [r3, #3]
  if ( drvid < _app_driver_count ) {
   3316a:	4293      	cmp	r3, r2
   3316c:	f080 8109 	bcs.w	33382 <tud_task_ext+0x562>
    driver = &_app_driver[drvid];
   33170:	4aa0      	ldr	r2, [pc, #640]	@ (333f4 <tud_task_ext+0x5d4>)
   33172:	6816      	ldr	r6, [r2, #0]
   33174:	eb03 0343 	add.w	r3, r3, r3, lsl #1
        TU_VERIFY(driver);
   33178:	eb16 06c3 	adds.w	r6, r6, r3, lsl #3
   3317c:	d116      	bne.n	331ac <tud_task_ext+0x38c>
   3317e:	e744      	b.n	3300a <tud_task_ext+0x1ea>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
   33180:	1c51      	adds	r1, r2, #1
   33182:	4299      	cmp	r1, r3
   33184:	f6ff af41 	blt.w	3300a <tud_task_ext+0x1ea>
    driver = &_usbd_driver[drvid - _app_driver_count];
   33188:	4e9b      	ldr	r6, [pc, #620]	@ (333f8 <tud_task_ext+0x5d8>)
   3318a:	1a9b      	subs	r3, r3, r2
   3318c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   33190:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
      TU_VERIFY(driver);
   33194:	e77d      	b.n	33092 <tud_task_ext+0x272>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
   33196:	1c77      	adds	r7, r6, #1
   33198:	4287      	cmp	r7, r0
   3319a:	db17      	blt.n	331cc <tud_task_ext+0x3ac>
    driver = &_usbd_driver[drvid - _app_driver_count];
   3319c:	1b80      	subs	r0, r0, r6
   3319e:	4e96      	ldr	r6, [pc, #600]	@ (333f8 <tud_task_ext+0x5d8>)
   331a0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   331a4:	eb06 06c0 	add.w	r6, r6, r0, lsl #3
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
   331a8:	2a00      	cmp	r2, #0
   331aa:	d0bc      	beq.n	33126 <tud_task_ext+0x306>
  usbd_control_set_complete_callback(driver->control_xfer_cb);
   331ac:	68f0      	ldr	r0, [r6, #12]
   331ae:	f000 fbed 	bl	3398c <usbd_control_set_complete_callback>
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
   331b2:	68f3      	ldr	r3, [r6, #12]
   331b4:	4640      	mov	r0, r8
   331b6:	aa08      	add	r2, sp, #32
   331b8:	2101      	movs	r1, #1
   331ba:	4798      	blx	r3
        if ( !process_control_request(event.rhport, &event.setup_received) )
   331bc:	2800      	cmp	r0, #0
   331be:	f47f ae3f 	bne.w	32e40 <tud_task_ext+0x20>
   331c2:	e722      	b.n	3300a <tud_task_ext+0x1ea>
        TU_VERIFY(driver);
   331c4:	2e00      	cmp	r6, #0
   331c6:	f43f af20 	beq.w	3300a <tud_task_ext+0x1ea>
   331ca:	e7ef      	b.n	331ac <tud_task_ext+0x38c>
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
   331cc:	2a00      	cmp	r2, #0
   331ce:	f47f af1c 	bne.w	3300a <tud_task_ext+0x1ea>
  usbd_class_driver_t const * driver = NULL;
   331d2:	4616      	mov	r6, r2
   331d4:	e7a7      	b.n	33126 <tud_task_ext+0x306>
          TU_ASSERT(driver, );
   331d6:	be00      	bkpt	0x0000
   331d8:	e706      	b.n	32fe8 <tud_task_ext+0x1c8>
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
   331da:	7822      	ldrb	r2, [r4, #0]
          tud_control_xfer(rhport, p_request, &status, 2);
   331dc:	2302      	movs	r3, #2
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
   331de:	fa22 f103 	lsr.w	r1, r2, r3
   331e2:	4019      	ands	r1, r3
   331e4:	f3c2 1240 	ubfx	r2, r2, #5, #1
   331e8:	430a      	orrs	r2, r1
   331ea:	f8ad 201a 	strh.w	r2, [sp, #26]
          tud_control_xfer(rhport, p_request, &status, 2);
   331ee:	4640      	mov	r0, r8
   331f0:	f10d 021a 	add.w	r2, sp, #26
   331f4:	a908      	add	r1, sp, #32
   331f6:	f000 fb87 	bl	33908 <tud_control_xfer>
        break;
   331fa:	e621      	b.n	32e40 <tud_task_ext+0x20>
          if (_usbd_dev.cfg_num != cfg_num)
   331fc:	7863      	ldrb	r3, [r4, #1]
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
   331fe:	f89d 6022 	ldrb.w	r6, [sp, #34]	@ 0x22
          if (_usbd_dev.cfg_num != cfg_num)
   33202:	429e      	cmp	r6, r3
   33204:	d009      	beq.n	3321a <tud_task_ext+0x3fa>
            if ( _usbd_dev.cfg_num )
   33206:	7863      	ldrb	r3, [r4, #1]
   33208:	2b00      	cmp	r3, #0
   3320a:	d16a      	bne.n	332e2 <tud_task_ext+0x4c2>
            if ( cfg_num )
   3320c:	2e00      	cmp	r6, #0
   3320e:	f040 811b 	bne.w	33448 <tud_task_ext+0x628>
              if ( tud_umount_cb ) tud_umount_cb();
   33212:	4b7a      	ldr	r3, [pc, #488]	@ (333fc <tud_task_ext+0x5dc>)
   33214:	b10b      	cbz	r3, 3321a <tud_task_ext+0x3fa>
   33216:	f7f8 fdcf 	bl	2bdb8 <tud_umount_cb>
          tud_control_status(rhport, p_request);
   3321a:	4640      	mov	r0, r8
   3321c:	a908      	add	r1, sp, #32
          _usbd_dev.cfg_num = cfg_num;
   3321e:	7066      	strb	r6, [r4, #1]
          tud_control_status(rhport, p_request);
   33220:	f000 fb5a 	bl	338d8 <tud_control_status>
        break;
   33224:	e60c      	b.n	32e40 <tud_task_ext+0x20>
          uint8_t cfg_num = _usbd_dev.cfg_num;
   33226:	7863      	ldrb	r3, [r4, #1]
   33228:	f88d 301a 	strb.w	r3, [sp, #26]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
   3322c:	4640      	mov	r0, r8
   3322e:	2301      	movs	r3, #1
   33230:	f10d 021a 	add.w	r2, sp, #26
   33234:	a908      	add	r1, sp, #32
   33236:	f000 fb67 	bl	33908 <tud_control_xfer>
        break;
   3323a:	e601      	b.n	32e40 <tud_task_ext+0x20>
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
   3323c:	f8bd 0022 	ldrh.w	r0, [sp, #34]	@ 0x22
  switch(desc_type)
   33240:	0a03      	lsrs	r3, r0, #8
   33242:	3b01      	subs	r3, #1
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
   33244:	0a02      	lsrs	r2, r0, #8
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
   33246:	b2c0      	uxtb	r0, r0
   33248:	2b0e      	cmp	r3, #14
   3324a:	f63f aede 	bhi.w	3300a <tud_task_ext+0x1ea>
   3324e:	a101      	add	r1, pc, #4	@ (adr r1, 33254 <tud_task_ext+0x434>)
   33250:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   33254:	00033321 	.word	0x00033321
   33258:	000332f5 	.word	0x000332f5
   3325c:	0003335f 	.word	0x0003335f
   33260:	0003300b 	.word	0x0003300b
   33264:	0003300b 	.word	0x0003300b
   33268:	00033339 	.word	0x00033339
   3326c:	000332f5 	.word	0x000332f5
   33270:	0003300b 	.word	0x0003300b
   33274:	0003300b 	.word	0x0003300b
   33278:	0003300b 	.word	0x0003300b
   3327c:	0003300b 	.word	0x0003300b
   33280:	0003300b 	.word	0x0003300b
   33284:	0003300b 	.word	0x0003300b
   33288:	0003300b 	.word	0x0003300b
   3328c:	0003336f 	.word	0x0003336f
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
   33290:	a808      	add	r0, sp, #32
   33292:	f000 fb81 	bl	33998 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
   33296:	f89d 1022 	ldrb.w	r1, [sp, #34]	@ 0x22
   3329a:	4640      	mov	r0, r8
   3329c:	f000 ff34 	bl	34108 <dcd_set_address>
          _usbd_dev.addressed = 1;
   332a0:	7823      	ldrb	r3, [r4, #0]
   332a2:	f043 0302 	orr.w	r3, r3, #2
   332a6:	7023      	strb	r3, [r4, #0]
        break;
   332a8:	e5ca      	b.n	32e40 <tud_task_ext+0x20>
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
   332aa:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
   332ae:	2b01      	cmp	r3, #1
   332b0:	f47f aeab 	bne.w	3300a <tud_task_ext+0x1ea>
          _usbd_dev.remote_wakeup_en = true;
   332b4:	7823      	ldrb	r3, [r4, #0]
          tud_control_status(rhport, p_request);
   332b6:	4640      	mov	r0, r8
          _usbd_dev.remote_wakeup_en = true;
   332b8:	f043 0308 	orr.w	r3, r3, #8
          tud_control_status(rhport, p_request);
   332bc:	a908      	add	r1, sp, #32
          _usbd_dev.remote_wakeup_en = true;
   332be:	7023      	strb	r3, [r4, #0]
          tud_control_status(rhport, p_request);
   332c0:	f000 fb0a 	bl	338d8 <tud_control_status>
        break;
   332c4:	e5bc      	b.n	32e40 <tud_task_ext+0x20>
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
   332c6:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
   332ca:	2b01      	cmp	r3, #1
   332cc:	f47f ae9d 	bne.w	3300a <tud_task_ext+0x1ea>
          _usbd_dev.remote_wakeup_en = false;
   332d0:	7823      	ldrb	r3, [r4, #0]
          tud_control_status(rhport, p_request);
   332d2:	4640      	mov	r0, r8
          _usbd_dev.remote_wakeup_en = false;
   332d4:	f023 0308 	bic.w	r3, r3, #8
          tud_control_status(rhport, p_request);
   332d8:	a908      	add	r1, sp, #32
          _usbd_dev.remote_wakeup_en = false;
   332da:	7023      	strb	r3, [r4, #0]
          tud_control_status(rhport, p_request);
   332dc:	f000 fafc 	bl	338d8 <tud_control_status>
        break;
   332e0:	e5ae      	b.n	32e40 <tud_task_ext+0x20>
              dcd_edpt_close_all(rhport);
   332e2:	4640      	mov	r0, r8
   332e4:	f000 ff36 	bl	34154 <dcd_edpt_close_all>
              uint8_t const speed = _usbd_dev.speed;
   332e8:	78a7      	ldrb	r7, [r4, #2]
              configuration_reset(rhport);
   332ea:	4640      	mov	r0, r8
   332ec:	f7ff fcc2 	bl	32c74 <configuration_reset>
              _usbd_dev.speed = speed; // restore speed
   332f0:	70a7      	strb	r7, [r4, #2]
   332f2:	e78b      	b.n	3320c <tud_task_ext+0x3ec>
      if ( desc_type == TUSB_DESC_CONFIGURATION )
   332f4:	2a02      	cmp	r2, #2
   332f6:	f000 814a 	beq.w	3358e <tud_task_ext+0x76e>
        TU_VERIFY( tud_descriptor_other_speed_configuration_cb );
   332fa:	4b41      	ldr	r3, [pc, #260]	@ (33400 <tud_task_ext+0x5e0>)
   332fc:	2b00      	cmp	r3, #0
   332fe:	f43f ae84 	beq.w	3300a <tud_task_ext+0x1ea>
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
   33302:	f3af 8000 	nop.w
   33306:	4602      	mov	r2, r0
      TU_ASSERT(desc_config);
   33308:	2a00      	cmp	r2, #0
   3330a:	f43f ae77 	beq.w	32ffc <tud_task_ext+0x1dc>
      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
   3330e:	8853      	ldrh	r3, [r2, #2]
   33310:	4640      	mov	r0, r8
   33312:	a908      	add	r1, sp, #32
   33314:	f000 faf8 	bl	33908 <tud_control_xfer>
        if ( !process_control_request(event.rhport, &event.setup_received) )
   33318:	2800      	cmp	r0, #0
   3331a:	f47f ad91 	bne.w	32e40 <tud_task_ext+0x20>
   3331e:	e674      	b.n	3300a <tud_task_ext+0x1ea>
      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
   33320:	f7f8 fcf2 	bl	2bd08 <tud_descriptor_device_cb>
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
   33324:	2312      	movs	r3, #18
      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
   33326:	4602      	mov	r2, r0
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
   33328:	a908      	add	r1, sp, #32
   3332a:	4640      	mov	r0, r8
   3332c:	f000 faec 	bl	33908 <tud_control_xfer>
        if ( !process_control_request(event.rhport, &event.setup_received) )
   33330:	2800      	cmp	r0, #0
   33332:	f47f ad85 	bne.w	32e40 <tud_task_ext+0x20>
   33336:	e668      	b.n	3300a <tud_task_ext+0x1ea>
      TU_VERIFY( tud_descriptor_device_qualifier_cb );
   33338:	4b32      	ldr	r3, [pc, #200]	@ (33404 <tud_task_ext+0x5e4>)
   3333a:	2b00      	cmp	r3, #0
   3333c:	f43f ae65 	beq.w	3300a <tud_task_ext+0x1ea>
      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
   33340:	f3af 8000 	nop.w
      TU_VERIFY(desc_qualifier);
   33344:	4602      	mov	r2, r0
   33346:	2800      	cmp	r0, #0
   33348:	f43f ae5f 	beq.w	3300a <tud_task_ext+0x1ea>
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
   3334c:	7813      	ldrb	r3, [r2, #0]
   3334e:	4640      	mov	r0, r8
   33350:	a908      	add	r1, sp, #32
   33352:	f000 fad9 	bl	33908 <tud_control_xfer>
        if ( !process_control_request(event.rhport, &event.setup_received) )
   33356:	2800      	cmp	r0, #0
   33358:	f47f ad72 	bne.w	32e40 <tud_task_ext+0x20>
   3335c:	e655      	b.n	3300a <tud_task_ext+0x1ea>
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
   3335e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
   33362:	f7f8 fce7 	bl	2bd34 <tud_descriptor_string_cb>
      TU_VERIFY(desc_str);
   33366:	4602      	mov	r2, r0
   33368:	2800      	cmp	r0, #0
   3336a:	d1ef      	bne.n	3334c <tud_task_ext+0x52c>
   3336c:	e64d      	b.n	3300a <tud_task_ext+0x1ea>
      if (!tud_descriptor_bos_cb) return false;
   3336e:	4b26      	ldr	r3, [pc, #152]	@ (33408 <tud_task_ext+0x5e8>)
   33370:	2b00      	cmp	r3, #0
   33372:	f43f ae4a 	beq.w	3300a <tud_task_ext+0x1ea>
      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
   33376:	f7f8 fcd9 	bl	2bd2c <tud_descriptor_bos_cb>
      TU_ASSERT(desc_bos);
   3337a:	4602      	mov	r2, r0
   3337c:	2800      	cmp	r0, #0
   3337e:	d1c6      	bne.n	3330e <tud_task_ext+0x4ee>
   33380:	e63c      	b.n	32ffc <tud_task_ext+0x1dc>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
   33382:	1c51      	adds	r1, r2, #1
   33384:	4299      	cmp	r1, r3
   33386:	f6ff ae40 	blt.w	3300a <tud_task_ext+0x1ea>
    driver = &_usbd_driver[drvid - _app_driver_count];
   3338a:	4e1b      	ldr	r6, [pc, #108]	@ (333f8 <tud_task_ext+0x5d8>)
   3338c:	1a9b      	subs	r3, r3, r2
   3338e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   33392:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
        TU_VERIFY(driver);
   33396:	e709      	b.n	331ac <tud_task_ext+0x38c>
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue )
   33398:	f8bd 7022 	ldrh.w	r7, [sp, #34]	@ 0x22
   3339c:	b94f      	cbnz	r7, 333b2 <tud_task_ext+0x592>
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest )
   3339e:	2a01      	cmp	r2, #1
  rhport = _usbd_rhport;
   333a0:	f89a 0000 	ldrb.w	r0, [sl]
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest )
   333a4:	d03c      	beq.n	33420 <tud_task_ext+0x600>
  if ( !_usbd_dev.ep_status[epnum][dir].stalled )
   333a6:	18e7      	adds	r7, r4, r3
   333a8:	4467      	add	r7, ip
   333aa:	3718      	adds	r7, #24
   333ac:	79fb      	ldrb	r3, [r7, #7]
   333ae:	079b      	lsls	r3, r3, #30
   333b0:	d513      	bpl.n	333da <tud_task_ext+0x5ba>
            if (driver)
   333b2:	2e00      	cmp	r6, #0
   333b4:	f43f ad44 	beq.w	32e40 <tud_task_ext+0x20>
  usbd_control_set_complete_callback(driver->control_xfer_cb);
   333b8:	68f0      	ldr	r0, [r6, #12]
   333ba:	f000 fae7 	bl	3398c <usbd_control_set_complete_callback>
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
   333be:	68f3      	ldr	r3, [r6, #12]
   333c0:	aa08      	add	r2, sp, #32
   333c2:	2101      	movs	r1, #1
   333c4:	4640      	mov	r0, r8
   333c6:	4798      	blx	r3
              usbd_control_set_complete_callback(NULL);
   333c8:	2000      	movs	r0, #0
   333ca:	f000 fadf 	bl	3398c <usbd_control_set_complete_callback>
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
   333ce:	f894 3020 	ldrb.w	r3, [r4, #32]
   333d2:	07da      	lsls	r2, r3, #31
   333d4:	f53f ad34 	bmi.w	32e40 <tud_task_ext+0x20>
   333d8:	e677      	b.n	330ca <tud_task_ext+0x2aa>
    dcd_edpt_stall(rhport, ep_addr);
   333da:	f000 fec9 	bl	34170 <dcd_edpt_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = 1;
   333de:	79fb      	ldrb	r3, [r7, #7]
   333e0:	f043 0302 	orr.w	r3, r3, #2
   333e4:	71fb      	strb	r3, [r7, #7]
    _usbd_dev.ep_status[epnum][dir].busy = 1;
   333e6:	79fb      	ldrb	r3, [r7, #7]
   333e8:	f043 0301 	orr.w	r3, r3, #1
   333ec:	71fb      	strb	r3, [r7, #7]
   333ee:	e7e0      	b.n	333b2 <tud_task_ext+0x592>
   333f0:	10051fdc 	.word	0x10051fdc
   333f4:	10051fe0 	.word	0x10051fe0
   333f8:	0004bc1c 	.word	0x0004bc1c
   333fc:	0002bdb9 	.word	0x0002bdb9
	...
   33408:	0002bd2d 	.word	0x0002bd2d
              tud_control_xfer(rhport, p_request, &alternate, 1);
   3340c:	a908      	add	r1, sp, #32
   3340e:	4640      	mov	r0, r8
   33410:	2301      	movs	r3, #1
   33412:	f10d 021a 	add.w	r2, sp, #26
              uint8_t alternate = 0;
   33416:	f88d 601a 	strb.w	r6, [sp, #26]
              tud_control_xfer(rhport, p_request, &alternate, 1);
   3341a:	f000 fa75 	bl	33908 <tud_control_xfer>
   3341e:	e50f      	b.n	32e40 <tud_task_ext+0x20>
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
   33420:	4423      	add	r3, r4
   33422:	4463      	add	r3, ip
   33424:	f103 0218 	add.w	r2, r3, #24
   33428:	7fdb      	ldrb	r3, [r3, #31]
   3342a:	079b      	lsls	r3, r3, #30
   3342c:	d5c1      	bpl.n	333b2 <tud_task_ext+0x592>
   3342e:	9200      	str	r2, [sp, #0]
    dcd_edpt_clear_stall(rhport, ep_addr);
   33430:	f000 fea4 	bl	3417c <dcd_edpt_clear_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = 0;
   33434:	9a00      	ldr	r2, [sp, #0]
   33436:	79d3      	ldrb	r3, [r2, #7]
   33438:	f367 0341 	bfi	r3, r7, #1, #1
   3343c:	71d3      	strb	r3, [r2, #7]
    _usbd_dev.ep_status[epnum][dir].busy = 0;
   3343e:	79d3      	ldrb	r3, [r2, #7]
   33440:	f367 0300 	bfi	r3, r7, #0, #1
   33444:	71d3      	strb	r3, [r2, #7]
   33446:	e7b4      	b.n	333b2 <tud_task_ext+0x592>
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
   33448:	1e70      	subs	r0, r6, #1
   3344a:	b2c0      	uxtb	r0, r0
   3344c:	f7f8 fc60 	bl	2bd10 <tud_descriptor_configuration_cb>
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
   33450:	4603      	mov	r3, r0
   33452:	2800      	cmp	r0, #0
   33454:	d06d      	beq.n	33532 <tud_task_ext+0x712>
   33456:	7842      	ldrb	r2, [r0, #1]
   33458:	2a02      	cmp	r2, #2
   3345a:	d16a      	bne.n	33532 <tud_task_ext+0x712>
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
   3345c:	79c1      	ldrb	r1, [r0, #7]
   3345e:	7820      	ldrb	r0, [r4, #0]
   33460:	f3c1 1240 	ubfx	r2, r1, #5, #1
   33464:	0112      	lsls	r2, r2, #4
   33466:	f3c1 1180 	ubfx	r1, r1, #6, #1
   3346a:	f020 0030 	bic.w	r0, r0, #48	@ 0x30
   3346e:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
   33472:	4302      	orrs	r2, r0
   33474:	7022      	strb	r2, [r4, #0]
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
   33476:	885a      	ldrh	r2, [r3, #2]
   33478:	f8cd 8008 	str.w	r8, [sp, #8]
   3347c:	189a      	adds	r2, r3, r2
   3347e:	9203      	str	r2, [sp, #12]
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
   33480:	f103 0709 	add.w	r7, r3, #9
  while( p_desc < desc_end )
   33484:	9604      	str	r6, [sp, #16]
   33486:	9b03      	ldr	r3, [sp, #12]
   33488:	42bb      	cmp	r3, r7
   3348a:	d960      	bls.n	3354e <tud_task_ext+0x72e>
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
   3348c:	787b      	ldrb	r3, [r7, #1]
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
   3348e:	2b0b      	cmp	r3, #11
   33490:	d058      	beq.n	33544 <tud_task_ext+0x724>
    uint8_t assoc_itf_count = 1;
   33492:	2101      	movs	r1, #1
    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
   33494:	2b04      	cmp	r3, #4
   33496:	d14c      	bne.n	33532 <tud_task_ext+0x712>
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
   33498:	9b03      	ldr	r3, [sp, #12]
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
   3349a:	9105      	str	r1, [sp, #20]
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
   3349c:	1bdb      	subs	r3, r3, r7
   3349e:	b29b      	uxth	r3, r3
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
   334a0:	2600      	movs	r6, #0
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
   334a2:	9301      	str	r3, [sp, #4]
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
   334a4:	4b3c      	ldr	r3, [pc, #240]	@ (33598 <tud_task_ext+0x778>)
   334a6:	9600      	str	r6, [sp, #0]
   334a8:	4632      	mov	r2, r6
   334aa:	781b      	ldrb	r3, [r3, #0]
   334ac:	463e      	mov	r6, r7
   334ae:	4617      	mov	r7, r2
   334b0:	e019      	b.n	334e6 <tud_task_ext+0x6c6>
    driver = &_app_driver[drvid];
   334b2:	4b3a      	ldr	r3, [pc, #232]	@ (3359c <tud_task_ext+0x77c>)
   334b4:	681b      	ldr	r3, [r3, #0]
      TU_ASSERT(driver);
   334b6:	eb13 08c2 	adds.w	r8, r3, r2, lsl #3
   334ba:	d03a      	beq.n	33532 <tud_task_ext+0x712>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
   334bc:	f8d8 3008 	ldr.w	r3, [r8, #8]
   334c0:	9a01      	ldr	r2, [sp, #4]
   334c2:	9802      	ldr	r0, [sp, #8]
   334c4:	4631      	mov	r1, r6
   334c6:	4798      	blx	r3
      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
   334c8:	2808      	cmp	r0, #8
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
   334ca:	4602      	mov	r2, r0
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
   334cc:	f107 0301 	add.w	r3, r7, #1
      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
   334d0:	d902      	bls.n	334d8 <tud_task_ext+0x6b8>
   334d2:	9901      	ldr	r1, [sp, #4]
   334d4:	4281      	cmp	r1, r0
   334d6:	d213      	bcs.n	33500 <tud_task_ext+0x6e0>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
   334d8:	b2df      	uxtb	r7, r3
   334da:	4b2f      	ldr	r3, [pc, #188]	@ (33598 <tud_task_ext+0x778>)
   334dc:	9700      	str	r7, [sp, #0]
   334de:	781b      	ldrb	r3, [r3, #0]
   334e0:	1c5a      	adds	r2, r3, #1
   334e2:	4297      	cmp	r7, r2
   334e4:	dc25      	bgt.n	33532 <tud_task_ext+0x712>
    driver = &_usbd_driver[drvid - _app_driver_count];
   334e6:	9a00      	ldr	r2, [sp, #0]
  if ( drvid < _app_driver_count ) {
   334e8:	429f      	cmp	r7, r3
    driver = &_usbd_driver[drvid - _app_driver_count];
   334ea:	eba2 0803 	sub.w	r8, r2, r3
   334ee:	eb08 0848 	add.w	r8, r8, r8, lsl #1
    driver = &_app_driver[drvid];
   334f2:	eb07 0247 	add.w	r2, r7, r7, lsl #1
  if ( drvid < _app_driver_count ) {
   334f6:	d3dc      	bcc.n	334b2 <tud_task_ext+0x692>
    driver = &_usbd_driver[drvid - _app_driver_count];
   334f8:	4b29      	ldr	r3, [pc, #164]	@ (335a0 <tud_task_ext+0x780>)
   334fa:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
      TU_ASSERT(driver);
   334fe:	e7dd      	b.n	334bc <tud_task_ext+0x69c>
        if ( assoc_itf_count == 1)
   33500:	9905      	ldr	r1, [sp, #20]
   33502:	463b      	mov	r3, r7
   33504:	2901      	cmp	r1, #1
   33506:	4637      	mov	r7, r6
   33508:	461e      	mov	r6, r3
   3350a:	d039      	beq.n	33580 <tud_task_ext+0x760>
        for(uint8_t i=0; i<assoc_itf_count; i++)
   3350c:	b349      	cbz	r1, 33562 <tud_task_ext+0x742>
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
   3350e:	f897 e002 	ldrb.w	lr, [r7, #2]
   33512:	2300      	movs	r3, #0
   33514:	e003      	b.n	3351e <tud_task_ext+0x6fe>
          _usbd_dev.itf2drv[itf_num] = drv_id;
   33516:	70c6      	strb	r6, [r0, #3]
        for(uint8_t i=0; i<assoc_itf_count; i++)
   33518:	b2d8      	uxtb	r0, r3
   3351a:	4288      	cmp	r0, r1
   3351c:	d221      	bcs.n	33562 <tud_task_ext+0x742>
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
   3351e:	eb0e 0003 	add.w	r0, lr, r3
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
   33522:	fa54 f080 	uxtab	r0, r4, r0
        for(uint8_t i=0; i<assoc_itf_count; i++)
   33526:	3301      	adds	r3, #1
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
   33528:	f890 c003 	ldrb.w	ip, [r0, #3]
   3352c:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
   33530:	d0f1      	beq.n	33516 <tud_task_ext+0x6f6>
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
   33532:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   33536:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
   3353a:	07da      	lsls	r2, r3, #31
   3353c:	f57f ad5e 	bpl.w	32ffc <tud_task_ext+0x1dc>
   33540:	be00      	bkpt	0x0000
   33542:	e55b      	b.n	32ffc <tud_task_ext+0x1dc>
  return desc8 + desc8[DESC_OFFSET_LEN];
   33544:	783b      	ldrb	r3, [r7, #0]
      assoc_itf_count = desc_iad->bInterfaceCount;
   33546:	78f9      	ldrb	r1, [r7, #3]
   33548:	441f      	add	r7, r3
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
   3354a:	787b      	ldrb	r3, [r7, #1]
   3354c:	e7a2      	b.n	33494 <tud_task_ext+0x674>
              if ( tud_mount_cb ) tud_mount_cb();
   3354e:	4b15      	ldr	r3, [pc, #84]	@ (335a4 <tud_task_ext+0x784>)
   33550:	f8dd 8008 	ldr.w	r8, [sp, #8]
   33554:	9e04      	ldr	r6, [sp, #16]
   33556:	2b00      	cmp	r3, #0
   33558:	f43f ae5f 	beq.w	3321a <tud_task_ext+0x3fa>
   3355c:	f7f8 fc26 	bl	2bdac <tud_mount_cb>
   33560:	e65b      	b.n	3321a <tud_task_ext+0x3fa>
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
   33562:	4633      	mov	r3, r6
   33564:	4639      	mov	r1, r7
   33566:	4810      	ldr	r0, [pc, #64]	@ (335a8 <tud_task_ext+0x788>)
   33568:	9201      	str	r2, [sp, #4]
   3356a:	f7ff f989 	bl	32880 <tu_edpt_bind_driver>
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
   3356e:	4b0a      	ldr	r3, [pc, #40]	@ (33598 <tud_task_ext+0x778>)
        p_desc += drv_len;
   33570:	9a01      	ldr	r2, [sp, #4]
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
   33572:	781b      	ldrb	r3, [r3, #0]
        p_desc += drv_len;
   33574:	4417      	add	r7, r2
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
   33576:	9a00      	ldr	r2, [sp, #0]
   33578:	3301      	adds	r3, #1
   3357a:	429a      	cmp	r2, r3
   3357c:	dd83      	ble.n	33486 <tud_task_ext+0x666>
   3357e:	e7d8      	b.n	33532 <tud_task_ext+0x712>
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
   33580:	f8d8 0008 	ldr.w	r0, [r8, #8]
   33584:	4b09      	ldr	r3, [pc, #36]	@ (335ac <tud_task_ext+0x78c>)
   33586:	4298      	cmp	r0, r3
   33588:	bf08      	it	eq
   3358a:	2102      	moveq	r1, #2
   3358c:	e7bf      	b.n	3350e <tud_task_ext+0x6ee>
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
   3358e:	f7f8 fbbf 	bl	2bd10 <tud_descriptor_configuration_cb>
   33592:	4602      	mov	r2, r0
   33594:	e6b8      	b.n	33308 <tud_task_ext+0x4e8>
   33596:	bf00      	nop
   33598:	10051fdc 	.word	0x10051fdc
   3359c:	10051fe0 	.word	0x10051fe0
   335a0:	0004bc1c 	.word	0x0004bc1c
   335a4:	0002bdad 	.word	0x0002bdad
   335a8:	10051ff7 	.word	0x10051ff7
   335ac:	000324a9 	.word	0x000324a9

000335b0 <dcd_event_handler>:
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const* event, bool in_isr) {
   335b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch (event->event_id) {
   335b4:	7843      	ldrb	r3, [r0, #1]
   335b6:	3b02      	subs	r3, #2
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const* event, bool in_isr) {
   335b8:	b084      	sub	sp, #16
   335ba:	4607      	mov	r7, r0
   335bc:	460c      	mov	r4, r1
  switch (event->event_id) {
   335be:	2b03      	cmp	r3, #3
   335c0:	d812      	bhi.n	335e8 <dcd_event_handler+0x38>
   335c2:	e8df f003 	tbb	[pc, r3]
   335c6:	5502      	.short	0x5502
   335c8:	3b48      	.short	0x3b48
      _usbd_dev.connected = 0;
   335ca:	4b5b      	ldr	r3, [pc, #364]	@ (33738 <dcd_event_handler+0x188>)
   335cc:	781a      	ldrb	r2, [r3, #0]
   335ce:	f022 0201 	bic.w	r2, r2, #1
   335d2:	701a      	strb	r2, [r3, #0]
      _usbd_dev.addressed = 0;
   335d4:	781a      	ldrb	r2, [r3, #0]
      _usbd_dev.cfg_num = 0;
   335d6:	2100      	movs	r1, #0
      _usbd_dev.addressed = 0;
   335d8:	f022 0202 	bic.w	r2, r2, #2
   335dc:	701a      	strb	r2, [r3, #0]
      _usbd_dev.cfg_num = 0;
   335de:	7059      	strb	r1, [r3, #1]
      _usbd_dev.suspended = 0;
   335e0:	781a      	ldrb	r2, [r3, #0]
   335e2:	f361 0282 	bfi	r2, r1, #2, #1
   335e6:	701a      	strb	r2, [r3, #0]
  bool ret = osal_queue_send(_usbd_q, event, in_isr);
   335e8:	4b54      	ldr	r3, [pc, #336]	@ (3373c <dcd_event_handler+0x18c>)
   335ea:	681e      	ldr	r6, [r3, #0]

  return success;
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const* data, bool in_isr) {
  if (!in_isr) {
   335ec:	b9bc      	cbnz	r4, 3361e <dcd_event_handler+0x6e>
  qhdl->interrupt_set(false);
   335ee:	4635      	mov	r5, r6
   335f0:	4620      	mov	r0, r4
   335f2:	f855 3b04 	ldr.w	r3, [r5], #4
   335f6:	4798      	blx	r3
    _osal_q_lock(qhdl);
  }

  bool success = tu_fifo_write(&qhdl->ff, data);
   335f8:	4628      	mov	r0, r5
   335fa:	4639      	mov	r1, r7
   335fc:	f7ff fa80 	bl	32b00 <tu_fifo_write>
  qhdl->interrupt_set(true);
   33600:	6833      	ldr	r3, [r6, #0]
  bool success = tu_fifo_write(&qhdl->ff, data);
   33602:	4605      	mov	r5, r0
  qhdl->interrupt_set(true);
   33604:	2001      	movs	r0, #1
   33606:	4798      	blx	r3

  if (!in_isr) {
    _osal_q_unlock(qhdl);
  }

  TU_ASSERT(success);
   33608:	b185      	cbz	r5, 3362c <dcd_event_handler+0x7c>
  if (tud_event_hook_cb) tud_event_hook_cb(event->rhport, event->event_id, in_isr);
   3360a:	4b4d      	ldr	r3, [pc, #308]	@ (33740 <dcd_event_handler+0x190>)
   3360c:	b123      	cbz	r3, 33618 <dcd_event_handler+0x68>
   3360e:	7879      	ldrb	r1, [r7, #1]
   33610:	7838      	ldrb	r0, [r7, #0]
   33612:	4622      	mov	r2, r4
   33614:	f3af 8000 	nop.w
}
   33618:	b004      	add	sp, #16
   3361a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  bool success = tu_fifo_write(&qhdl->ff, data);
   3361e:	4639      	mov	r1, r7
   33620:	1d30      	adds	r0, r6, #4
   33622:	f7ff fa6d 	bl	32b00 <tu_fifo_write>
   33626:	4605      	mov	r5, r0
  TU_ASSERT(success);
   33628:	2d00      	cmp	r5, #0
   3362a:	d1ee      	bne.n	3360a <dcd_event_handler+0x5a>
   3362c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   33630:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
   33634:	07db      	lsls	r3, r3, #31
   33636:	d5e8      	bpl.n	3360a <dcd_event_handler+0x5a>
   33638:	be00      	bkpt	0x0000
   3363a:	e7e6      	b.n	3360a <dcd_event_handler+0x5a>
      if (_usbd_dev.connected) {
   3363c:	4b3e      	ldr	r3, [pc, #248]	@ (33738 <dcd_event_handler+0x188>)
   3363e:	781a      	ldrb	r2, [r3, #0]
   33640:	07d0      	lsls	r0, r2, #31
   33642:	d5e9      	bpl.n	33618 <dcd_event_handler+0x68>
        _usbd_dev.suspended = 0;
   33644:	781a      	ldrb	r2, [r3, #0]
   33646:	f022 0204 	bic.w	r2, r2, #4
   3364a:	701a      	strb	r2, [r3, #0]
  bool ret = osal_queue_send(_usbd_q, event, in_isr);
   3364c:	4b3b      	ldr	r3, [pc, #236]	@ (3373c <dcd_event_handler+0x18c>)
   3364e:	681e      	ldr	r6, [r3, #0]
  if (!in_isr) {
   33650:	2c00      	cmp	r4, #0
   33652:	d1e4      	bne.n	3361e <dcd_event_handler+0x6e>
   33654:	e7cb      	b.n	335ee <dcd_event_handler+0x3e>
      if (_usbd_dev.connected) {
   33656:	4b38      	ldr	r3, [pc, #224]	@ (33738 <dcd_event_handler+0x188>)
   33658:	781a      	ldrb	r2, [r3, #0]
   3365a:	07d5      	lsls	r5, r2, #31
   3365c:	d5dc      	bpl.n	33618 <dcd_event_handler+0x68>
        _usbd_dev.suspended = 1;
   3365e:	781a      	ldrb	r2, [r3, #0]
   33660:	f042 0204 	orr.w	r2, r2, #4
   33664:	701a      	strb	r2, [r3, #0]
  bool ret = osal_queue_send(_usbd_q, event, in_isr);
   33666:	4b35      	ldr	r3, [pc, #212]	@ (3373c <dcd_event_handler+0x18c>)
   33668:	681e      	ldr	r6, [r3, #0]
   3366a:	2c00      	cmp	r4, #0
   3366c:	d1d7      	bne.n	3361e <dcd_event_handler+0x6e>
   3366e:	e7be      	b.n	335ee <dcd_event_handler+0x3e>
      if (_usbd_dev.suspended) {
   33670:	4b31      	ldr	r3, [pc, #196]	@ (33738 <dcd_event_handler+0x188>)
   33672:	781a      	ldrb	r2, [r3, #0]
   33674:	0751      	lsls	r1, r2, #29
   33676:	d423      	bmi.n	336c0 <dcd_event_handler+0x110>
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
   33678:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 3374c <dcd_event_handler+0x19c>
    driver = &_usbd_driver[drvid - _app_driver_count];
   3367c:	4e31      	ldr	r6, [pc, #196]	@ (33744 <dcd_event_handler+0x194>)
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
   3367e:	f898 2000 	ldrb.w	r2, [r8]
    driver = &_app_driver[drvid];
   33682:	4d31      	ldr	r5, [pc, #196]	@ (33748 <dcd_event_handler+0x198>)
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const* event, bool in_isr) {
   33684:	2400      	movs	r4, #0
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
   33686:	4623      	mov	r3, r4
   33688:	e010      	b.n	336ac <dcd_event_handler+0xfc>
    driver = &_app_driver[drvid];
   3368a:	682b      	ldr	r3, [r5, #0]
        if (driver && driver->sof) {
   3368c:	eb13 03c1 	adds.w	r3, r3, r1, lsl #3
   33690:	d004      	beq.n	3369c <dcd_event_handler+0xec>
   33692:	695b      	ldr	r3, [r3, #20]
   33694:	b113      	cbz	r3, 3369c <dcd_event_handler+0xec>
          driver->sof(event->rhport, event->sof.frame_count);
   33696:	6879      	ldr	r1, [r7, #4]
   33698:	7838      	ldrb	r0, [r7, #0]
   3369a:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
   3369c:	f898 2000 	ldrb.w	r2, [r8]
   336a0:	3401      	adds	r4, #1
   336a2:	b2e4      	uxtb	r4, r4
   336a4:	1c51      	adds	r1, r2, #1
   336a6:	42a1      	cmp	r1, r4
   336a8:	4623      	mov	r3, r4
   336aa:	dbb5      	blt.n	33618 <dcd_event_handler+0x68>
  if ( drvid < _app_driver_count ) {
   336ac:	4294      	cmp	r4, r2
    driver = &_app_driver[drvid];
   336ae:	eb04 0144 	add.w	r1, r4, r4, lsl #1
  if ( drvid < _app_driver_count ) {
   336b2:	d3ea      	bcc.n	3368a <dcd_event_handler+0xda>
    driver = &_usbd_driver[drvid - _app_driver_count];
   336b4:	1a9b      	subs	r3, r3, r2
   336b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   336ba:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
        if (driver && driver->sof) {
   336be:	e7e8      	b.n	33692 <dcd_event_handler+0xe2>
        _usbd_dev.suspended = 0;
   336c0:	781a      	ldrb	r2, [r3, #0]
   336c2:	f022 0204 	bic.w	r2, r2, #4
   336c6:	701a      	strb	r2, [r3, #0]
  bool ret = osal_queue_send(_usbd_q, event, in_isr);
   336c8:	4a1c      	ldr	r2, [pc, #112]	@ (3373c <dcd_event_handler+0x18c>)
        dcd_event_t const event_resume = {.rhport = event->rhport, .event_id = DCD_EVENT_RESUME};
   336ca:	2300      	movs	r3, #0
  bool ret = osal_queue_send(_usbd_q, event, in_isr);
   336cc:	6816      	ldr	r6, [r2, #0]
        dcd_event_t const event_resume = {.rhport = event->rhport, .event_id = DCD_EVENT_RESUME};
   336ce:	f8cd 3006 	str.w	r3, [sp, #6]
   336d2:	7802      	ldrb	r2, [r0, #0]
   336d4:	f8cd 300a 	str.w	r3, [sp, #10]
   336d8:	f8ad 300e 	strh.w	r3, [sp, #14]
   336dc:	2305      	movs	r3, #5
   336de:	f88d 2004 	strb.w	r2, [sp, #4]
   336e2:	f88d 3005 	strb.w	r3, [sp, #5]
   336e6:	b184      	cbz	r4, 3370a <dcd_event_handler+0x15a>
  bool success = tu_fifo_write(&qhdl->ff, data);
   336e8:	a901      	add	r1, sp, #4
   336ea:	1d30      	adds	r0, r6, #4
   336ec:	f7ff fa08 	bl	32b00 <tu_fifo_write>
   336f0:	4605      	mov	r5, r0
  TU_ASSERT(success);
   336f2:	b1c5      	cbz	r5, 33726 <dcd_event_handler+0x176>
  if (tud_event_hook_cb) tud_event_hook_cb(event->rhport, event->event_id, in_isr);
   336f4:	4b12      	ldr	r3, [pc, #72]	@ (33740 <dcd_event_handler+0x190>)
   336f6:	2b00      	cmp	r3, #0
   336f8:	d0be      	beq.n	33678 <dcd_event_handler+0xc8>
   336fa:	f89d 1005 	ldrb.w	r1, [sp, #5]
   336fe:	f89d 0004 	ldrb.w	r0, [sp, #4]
   33702:	4622      	mov	r2, r4
   33704:	f3af 8000 	nop.w
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
   33708:	e7b6      	b.n	33678 <dcd_event_handler+0xc8>
  qhdl->interrupt_set(false);
   3370a:	4635      	mov	r5, r6
   3370c:	4620      	mov	r0, r4
   3370e:	f855 3b04 	ldr.w	r3, [r5], #4
   33712:	4798      	blx	r3
  bool success = tu_fifo_write(&qhdl->ff, data);
   33714:	a901      	add	r1, sp, #4
   33716:	4628      	mov	r0, r5
   33718:	f7ff f9f2 	bl	32b00 <tu_fifo_write>
  qhdl->interrupt_set(true);
   3371c:	6833      	ldr	r3, [r6, #0]
  bool success = tu_fifo_write(&qhdl->ff, data);
   3371e:	4605      	mov	r5, r0
  qhdl->interrupt_set(true);
   33720:	2001      	movs	r0, #1
   33722:	4798      	blx	r3
}
   33724:	e7e5      	b.n	336f2 <dcd_event_handler+0x142>
  TU_ASSERT(success);
   33726:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   3372a:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
   3372e:	07da      	lsls	r2, r3, #31
   33730:	d5e0      	bpl.n	336f4 <dcd_event_handler+0x144>
   33732:	be00      	bkpt	0x0000
   33734:	e7de      	b.n	336f4 <dcd_event_handler+0x144>
   33736:	bf00      	nop
   33738:	10051fe4 	.word	0x10051fe4
   3373c:	10051f18 	.word	0x10051f18
   33740:	00000000 	.word	0x00000000
   33744:	0004bc1c 	.word	0x0004bc1c
   33748:	10051fe0 	.word	0x10051fe0
   3374c:	10051fdc 	.word	0x10051fdc

00033750 <usbd_open_edpt_pair>:
{
   33750:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33754:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  for(int i=0; i<ep_count; i++)
   33758:	2a00      	cmp	r2, #0
   3375a:	d040      	beq.n	337de <usbd_open_edpt_pair+0x8e>
  rhport = _usbd_rhport;
   3375c:	4f21      	ldr	r7, [pc, #132]	@ (337e4 <usbd_open_edpt_pair+0x94>)
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
   3375e:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 337e8 <usbd_open_edpt_pair+0x98>
   33762:	460c      	mov	r4, r1
   33764:	461e      	mov	r6, r3
   33766:	4615      	mov	r5, r2
  for(int i=0; i<ep_count; i++)
   33768:	f04f 0b00 	mov.w	fp, #0
   3376c:	e016      	b.n	3379c <usbd_open_edpt_pair+0x4c>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
   3376e:	f899 1002 	ldrb.w	r1, [r9, #2]
   33772:	f7ff f853 	bl	3281c <tu_edpt_validate>
   33776:	b308      	cbz	r0, 337bc <usbd_open_edpt_pair+0x6c>
  return dcd_edpt_open(rhport, desc_ep);
   33778:	4621      	mov	r1, r4
   3377a:	4650      	mov	r0, sl
   3377c:	f000 fcda 	bl	34134 <dcd_edpt_open>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
   33780:	b318      	cbz	r0, 337ca <usbd_open_edpt_pair+0x7a>
    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
   33782:	78a3      	ldrb	r3, [r4, #2]
   33784:	09da      	lsrs	r2, r3, #7
      (*ep_in) = desc_ep->bEndpointAddress;
   33786:	bf16      	itet	ne
   33788:	9a0b      	ldrne	r2, [sp, #44]	@ 0x2c
      (*ep_out) = desc_ep->bEndpointAddress;
   3378a:	f888 3000 	strbeq.w	r3, [r8]
      (*ep_in) = desc_ep->bEndpointAddress;
   3378e:	7013      	strbne	r3, [r2, #0]
  return desc8 + desc8[DESC_OFFSET_LEN];
   33790:	7823      	ldrb	r3, [r4, #0]
  for(int i=0; i<ep_count; i++)
   33792:	f10b 0b01 	add.w	fp, fp, #1
   33796:	45ab      	cmp	fp, r5
   33798:	441c      	add	r4, r3
   3379a:	d020      	beq.n	337de <usbd_open_edpt_pair+0x8e>
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
   3379c:	7863      	ldrb	r3, [r4, #1]
   3379e:	2b05      	cmp	r3, #5
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
   337a0:	4620      	mov	r0, r4
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
   337a2:	d112      	bne.n	337ca <usbd_open_edpt_pair+0x7a>
   337a4:	78e1      	ldrb	r1, [r4, #3]
   337a6:	f001 0103 	and.w	r1, r1, #3
   337aa:	42b1      	cmp	r1, r6
   337ac:	d10d      	bne.n	337ca <usbd_open_edpt_pair+0x7a>
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
   337ae:	78a3      	ldrb	r3, [r4, #2]
  rhport = _usbd_rhport;
   337b0:	f897 a000 	ldrb.w	sl, [r7]
  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
   337b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
   337b8:	2b05      	cmp	r3, #5
   337ba:	d9d8      	bls.n	3376e <usbd_open_edpt_pair+0x1e>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
   337bc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   337c0:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
   337c4:	07da      	lsls	r2, r3, #31
   337c6:	d500      	bpl.n	337ca <usbd_open_edpt_pair+0x7a>
   337c8:	be00      	bkpt	0x0000
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
   337ca:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   337ce:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
   337d2:	07db      	lsls	r3, r3, #31
   337d4:	d500      	bpl.n	337d8 <usbd_open_edpt_pair+0x88>
   337d6:	be00      	bkpt	0x0000
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
   337d8:	2000      	movs	r0, #0
}
   337da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return true;
   337de:	2001      	movs	r0, #1
}
   337e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   337e4:	1000db6c 	.word	0x1000db6c
   337e8:	10051fe4 	.word	0x10051fe4

000337ec <usbd_edpt_open>:
{
   337ec:	b538      	push	{r3, r4, r5, lr}
   337ee:	788b      	ldrb	r3, [r1, #2]
  rhport = _usbd_rhport;
   337f0:	4a0e      	ldr	r2, [pc, #56]	@ (3382c <usbd_edpt_open+0x40>)
  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
   337f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
   337f6:	2b05      	cmp	r3, #5
  rhport = _usbd_rhport;
   337f8:	7815      	ldrb	r5, [r2, #0]
  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
   337fa:	d908      	bls.n	3380e <usbd_edpt_open+0x22>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
   337fc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   33800:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
   33804:	07db      	lsls	r3, r3, #31
   33806:	d500      	bpl.n	3380a <usbd_edpt_open+0x1e>
   33808:	be00      	bkpt	0x0000
}
   3380a:	2000      	movs	r0, #0
   3380c:	bd38      	pop	{r3, r4, r5, pc}
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
   3380e:	4b08      	ldr	r3, [pc, #32]	@ (33830 <usbd_edpt_open+0x44>)
   33810:	460c      	mov	r4, r1
   33812:	4608      	mov	r0, r1
   33814:	7899      	ldrb	r1, [r3, #2]
   33816:	f7ff f801 	bl	3281c <tu_edpt_validate>
   3381a:	2800      	cmp	r0, #0
   3381c:	d0ee      	beq.n	337fc <usbd_edpt_open+0x10>
  return dcd_edpt_open(rhport, desc_ep);
   3381e:	4621      	mov	r1, r4
   33820:	4628      	mov	r0, r5
}
   33822:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return dcd_edpt_open(rhport, desc_ep);
   33826:	f000 bc85 	b.w	34134 <dcd_edpt_open>
   3382a:	bf00      	nop
   3382c:	1000db6c 	.word	0x1000db6c
   33830:	10051fe4 	.word	0x10051fe4

00033834 <usbd_edpt_claim>:
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
   33834:	09cb      	lsrs	r3, r1, #7
   33836:	4805      	ldr	r0, [pc, #20]	@ (3384c <usbd_edpt_claim+0x18>)
   33838:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
   3383c:	331f      	adds	r3, #31
   3383e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
  return tu_edpt_claim(ep_state, _usbd_mutex);
   33842:	4418      	add	r0, r3
   33844:	2100      	movs	r1, #0
   33846:	f7fe bfbb 	b.w	327c0 <tu_edpt_claim>
   3384a:	bf00      	nop
   3384c:	10051fe4 	.word	0x10051fe4

00033850 <usbd_edpt_release>:
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
   33850:	09cb      	lsrs	r3, r1, #7
   33852:	4805      	ldr	r0, [pc, #20]	@ (33868 <usbd_edpt_release+0x18>)
   33854:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
   33858:	331f      	adds	r3, #31
   3385a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
  return tu_edpt_release(ep_state, _usbd_mutex);
   3385e:	4418      	add	r0, r3
   33860:	2100      	movs	r1, #0
   33862:	f7fe bfc9 	b.w	327f8 <tu_edpt_release>
   33866:	bf00      	nop
   33868:	10051fe4 	.word	0x10051fe4

0003386c <usbd_edpt_xfer>:
{
   3386c:	b510      	push	{r4, lr}
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
   3386e:	4c18      	ldr	r4, [pc, #96]	@ (338d0 <usbd_edpt_xfer+0x64>)
  rhport = _usbd_rhport;
   33870:	4818      	ldr	r0, [pc, #96]	@ (338d4 <usbd_edpt_xfer+0x68>)
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
   33872:	f001 0e7f 	and.w	lr, r1, #127	@ 0x7f
   33876:	eb04 044e 	add.w	r4, r4, lr, lsl #1
   3387a:	eb04 14d1 	add.w	r4, r4, r1, lsr #7
   3387e:	3418      	adds	r4, #24
   33880:	f894 c007 	ldrb.w	ip, [r4, #7]
  rhport = _usbd_rhport;
   33884:	7800      	ldrb	r0, [r0, #0]
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
   33886:	f01c 0f01 	tst.w	ip, #1
   3388a:	d008      	beq.n	3389e <usbd_edpt_xfer+0x32>
   3388c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   33890:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
   33894:	07da      	lsls	r2, r3, #31
   33896:	d500      	bpl.n	3389a <usbd_edpt_xfer+0x2e>
    TU_BREAKPOINT();
   33898:	be00      	bkpt	0x0000
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
   3389a:	2000      	movs	r0, #0
}
   3389c:	bd10      	pop	{r4, pc}
  _usbd_dev.ep_status[epnum][dir].busy = 1;
   3389e:	f894 c007 	ldrb.w	ip, [r4, #7]
   338a2:	f04c 0c01 	orr.w	ip, ip, #1
   338a6:	f884 c007 	strb.w	ip, [r4, #7]
  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
   338aa:	f000 fc55 	bl	34158 <dcd_edpt_xfer>
   338ae:	2800      	cmp	r0, #0
   338b0:	d1f4      	bne.n	3389c <usbd_edpt_xfer+0x30>
    _usbd_dev.ep_status[epnum][dir].busy = 0;
   338b2:	79e2      	ldrb	r2, [r4, #7]
   338b4:	f360 0200 	bfi	r2, r0, #0, #1
   338b8:	71e2      	strb	r2, [r4, #7]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
   338ba:	79e2      	ldrb	r2, [r4, #7]
    TU_BREAKPOINT();
   338bc:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
   338c0:	f360 0282 	bfi	r2, r0, #2, #1
   338c4:	71e2      	strb	r2, [r4, #7]
    TU_BREAKPOINT();
   338c6:	f8d1 3df0 	ldr.w	r3, [r1, #3568]	@ 0xdf0
   338ca:	07db      	lsls	r3, r3, #31
   338cc:	d5e5      	bpl.n	3389a <usbd_edpt_xfer+0x2e>
   338ce:	e7e3      	b.n	33898 <usbd_edpt_xfer+0x2c>
   338d0:	10051fe4 	.word	0x10051fe4
   338d4:	1000db6c 	.word	0x1000db6c

000338d8 <tud_control_status>:
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
}

// Status phase
bool tud_control_status(uint8_t rhport, tusb_control_request_t const * request)
{
   338d8:	b410      	push	{r4}
  _ctrl_xfer.request       = (*request);
   338da:	4c0a      	ldr	r4, [pc, #40]	@ (33904 <tud_control_status+0x2c>)
{
   338dc:	460a      	mov	r2, r1
   338de:	4684      	mov	ip, r0
  _ctrl_xfer.request       = (*request);
   338e0:	6808      	ldr	r0, [r1, #0]
   338e2:	6849      	ldr	r1, [r1, #4]
   338e4:	4623      	mov	r3, r4
   338e6:	c303      	stmia	r3!, {r0, r1}
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
   338e8:	7811      	ldrb	r1, [r2, #0]
  _ctrl_xfer.buffer        = NULL;
   338ea:	2300      	movs	r3, #0
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
   338ec:	43c9      	mvns	r1, r1
  _ctrl_xfer.total_xferred = 0;
  _ctrl_xfer.data_len      = 0;
   338ee:	e9c4 3302 	strd	r3, r3, [r4, #8]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
   338f2:	4660      	mov	r0, ip

  return _status_stage_xact(rhport, request);
}
   338f4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
   338f8:	f001 0180 	and.w	r1, r1, #128	@ 0x80
   338fc:	461a      	mov	r2, r3
   338fe:	f7ff bfb5 	b.w	3386c <usbd_edpt_xfer>
   33902:	bf00      	nop
   33904:	10052010 	.word	0x10052010

00033908 <tud_control_xfer>:
}

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
{
   33908:	b538      	push	{r3, r4, r5, lr}
  _ctrl_xfer.request       = (*request);
   3390a:	4c1a      	ldr	r4, [pc, #104]	@ (33974 <tud_control_xfer+0x6c>)
{
   3390c:	468c      	mov	ip, r1
   3390e:	4605      	mov	r5, r0
  _ctrl_xfer.request       = (*request);
   33910:	6808      	ldr	r0, [r1, #0]
   33912:	6849      	ldr	r1, [r1, #4]
  _ctrl_xfer.buffer        = (uint8_t*) buffer;
   33914:	60a2      	str	r2, [r4, #8]
  _ctrl_xfer.request       = (*request);
   33916:	46a6      	mov	lr, r4
   33918:	e8ae 0003 	stmia.w	lr!, {r0, r1}
  _ctrl_xfer.total_xferred = 0U;
   3391c:	2100      	movs	r1, #0
   3391e:	81e1      	strh	r1, [r4, #14]
  _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
   33920:	f8bc 0006 	ldrh.w	r0, [ip, #6]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
   33924:	4283      	cmp	r3, r0
   33926:	bf28      	it	cs
   33928:	4603      	movcs	r3, r0
   3392a:	81a3      	strh	r3, [r4, #12]

  if (request->wLength > 0U)
   3392c:	b188      	cbz	r0, 33952 <tud_control_xfer+0x4a>
  {
    if(_ctrl_xfer.data_len > 0U)
   3392e:	b1f3      	cbz	r3, 3396e <tud_control_xfer+0x66>
    {
      TU_ASSERT(buffer);
   33930:	b132      	cbz	r2, 33940 <tud_control_xfer+0x38>
  uint8_t ep_addr =  (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN) ? EDPT_CTRL_IN : EDPT_CTRL_OUT;
   33932:	7821      	ldrb	r1, [r4, #0]
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _ctrl_xfer.buffer : NULL, xact_len);
   33934:	4628      	mov	r0, r5
  uint8_t ep_addr =  (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN) ? EDPT_CTRL_IN : EDPT_CTRL_OUT;
   33936:	f001 0180 	and.w	r1, r1, #128	@ 0x80
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _ctrl_xfer.buffer : NULL, xact_len);
   3393a:	f7ff ff97 	bl	3386c <usbd_edpt_xfer>
    }

//    TU_LOG2("  Control total data length is %u bytes\r\n", _ctrl_xfer.data_len);

    // Data stage
    TU_ASSERT( _data_stage_xact(rhport) );
   3393e:	b9a0      	cbnz	r0, 3396a <tud_control_xfer+0x62>
   33940:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   33944:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
   33948:	07db      	lsls	r3, r3, #31
   3394a:	d500      	bpl.n	3394e <tud_control_xfer+0x46>
   3394c:	be00      	bkpt	0x0000
      TU_ASSERT(buffer);
   3394e:	2000      	movs	r0, #0
    // Status stage
    TU_ASSERT( _status_stage_xact(rhport, request) );
  }

  return true;
}
   33950:	bd38      	pop	{r3, r4, r5, pc}
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
   33952:	f89c 1000 	ldrb.w	r1, [ip]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
   33956:	4603      	mov	r3, r0
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
   33958:	43c9      	mvns	r1, r1
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _ctrl_xfer.buffer : NULL, xact_len);
   3395a:	461a      	mov	r2, r3
  uint8_t ep_addr =  (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN) ? EDPT_CTRL_IN : EDPT_CTRL_OUT;
   3395c:	f001 0180 	and.w	r1, r1, #128	@ 0x80
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _ctrl_xfer.buffer : NULL, xact_len);
   33960:	4628      	mov	r0, r5
   33962:	f7ff ff83 	bl	3386c <usbd_edpt_xfer>
    TU_ASSERT( _data_stage_xact(rhport) );
   33966:	2800      	cmp	r0, #0
   33968:	d0ea      	beq.n	33940 <tud_control_xfer+0x38>
  return true;
   3396a:	2001      	movs	r0, #1
}
   3396c:	bd38      	pop	{r3, r4, r5, pc}
  uint8_t ep_addr =  (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN) ? EDPT_CTRL_IN : EDPT_CTRL_OUT;
   3396e:	7821      	ldrb	r1, [r4, #0]
   33970:	e7f3      	b.n	3395a <tud_control_xfer+0x52>
   33972:	bf00      	nop
   33974:	10052010 	.word	0x10052010

00033978 <usbd_control_reset>:
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp );
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes);

void usbd_control_reset(void)
{
  tu_varclr(&_ctrl_xfer);
   33978:	4b03      	ldr	r3, [pc, #12]	@ (33988 <usbd_control_reset+0x10>)
   3397a:	2200      	movs	r2, #0
   3397c:	e9c3 2200 	strd	r2, r2, [r3]
   33980:	e9c3 2202 	strd	r2, r2, [r3, #8]
   33984:	611a      	str	r2, [r3, #16]
}
   33986:	4770      	bx	lr
   33988:	10052010 	.word	0x10052010

0003398c <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp )
{
  _ctrl_xfer.complete_cb = fp;
   3398c:	4b01      	ldr	r3, [pc, #4]	@ (33994 <usbd_control_set_complete_callback+0x8>)
   3398e:	6118      	str	r0, [r3, #16]
}
   33990:	4770      	bx	lr
   33992:	bf00      	nop
   33994:	10052010 	.word	0x10052010

00033998 <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(tusb_control_request_t const *request)
{
   33998:	4603      	mov	r3, r0
  _ctrl_xfer.request       = (*request);
   3399a:	4a04      	ldr	r2, [pc, #16]	@ (339ac <usbd_control_set_request+0x14>)
   3399c:	6859      	ldr	r1, [r3, #4]
   3399e:	6800      	ldr	r0, [r0, #0]
   339a0:	4613      	mov	r3, r2
   339a2:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = NULL;
   339a4:	2300      	movs	r3, #0
  _ctrl_xfer.total_xferred = 0;
  _ctrl_xfer.data_len      = 0;
   339a6:	e9c2 3302 	strd	r3, r3, [r2, #8]
}
   339aa:	4770      	bx	lr
   339ac:	10052010 	.word	0x10052010

000339b0 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
   339b0:	b538      	push	{r3, r4, r5, lr}
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
   339b2:	4c2c      	ldr	r4, [pc, #176]	@ (33a64 <usbd_control_xfer_cb+0xb4>)
   339b4:	f894 e000 	ldrb.w	lr, [r4]
   339b8:	09c9      	lsrs	r1, r1, #7
   339ba:	ebb1 1fde 	cmp.w	r1, lr, lsr #7
{
   339be:	4605      	mov	r5, r0
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
   339c0:	d016      	beq.n	339f0 <usbd_control_xfer_cb+0x40>
  {
    TU_ASSERT(0 == xferred_bytes);
   339c2:	b143      	cbz	r3, 339d6 <usbd_control_xfer_cb+0x26>
    }

    if ( is_ok )
    {
      // Send status
      TU_ASSERT( _status_stage_xact(rhport, &_ctrl_xfer.request) );
   339c4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   339c8:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
   339cc:	07db      	lsls	r3, r3, #31
   339ce:	d500      	bpl.n	339d2 <usbd_control_xfer_cb+0x22>
   339d0:	be00      	bkpt	0x0000
    TU_ASSERT(0 == xferred_bytes);
   339d2:	2000      	movs	r0, #0
    // More data to transfer
    TU_ASSERT( _data_stage_xact(rhport) );
  }

  return true;
}
   339d4:	bd38      	pop	{r3, r4, r5, pc}
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
   339d6:	4b24      	ldr	r3, [pc, #144]	@ (33a68 <usbd_control_xfer_cb+0xb8>)
   339d8:	b113      	cbz	r3, 339e0 <usbd_control_xfer_cb+0x30>
   339da:	4621      	mov	r1, r4
   339dc:	f3af 8000 	nop.w
    if (_ctrl_xfer.complete_cb)
   339e0:	6923      	ldr	r3, [r4, #16]
   339e2:	b11b      	cbz	r3, 339ec <usbd_control_xfer_cb+0x3c>
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
   339e4:	4a1f      	ldr	r2, [pc, #124]	@ (33a64 <usbd_control_xfer_cb+0xb4>)
   339e6:	2103      	movs	r1, #3
   339e8:	4628      	mov	r0, r5
   339ea:	4798      	blx	r3
    return true;
   339ec:	2001      	movs	r0, #1
}
   339ee:	bd38      	pop	{r3, r4, r5, pc}
  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
   339f0:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
  _ctrl_xfer.buffer += xferred_bytes;
   339f4:	68a2      	ldr	r2, [r4, #8]
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
   339f6:	88e1      	ldrh	r1, [r4, #6]
  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
   339f8:	449c      	add	ip, r3
   339fa:	fa1f fc8c 	uxth.w	ip, ip
  _ctrl_xfer.buffer += xferred_bytes;
   339fe:	441a      	add	r2, r3
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
   33a00:	4561      	cmp	r1, ip
  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
   33a02:	f8a4 c00e 	strh.w	ip, [r4, #14]
  _ctrl_xfer.buffer += xferred_bytes;
   33a06:	60a2      	str	r2, [r4, #8]
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
   33a08:	d001      	beq.n	33a0e <usbd_control_xfer_cb+0x5e>
   33a0a:	2b3f      	cmp	r3, #63	@ 0x3f
   33a0c:	d81b      	bhi.n	33a46 <usbd_control_xfer_cb+0x96>
    if ( _ctrl_xfer.complete_cb )
   33a0e:	6923      	ldr	r3, [r4, #16]
   33a10:	b16b      	cbz	r3, 33a2e <usbd_control_xfer_cb+0x7e>
      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
   33a12:	4a14      	ldr	r2, [pc, #80]	@ (33a64 <usbd_control_xfer_cb+0xb4>)
   33a14:	2102      	movs	r1, #2
   33a16:	4628      	mov	r0, r5
   33a18:	4798      	blx	r3
    if ( is_ok )
   33a1a:	b940      	cbnz	r0, 33a2e <usbd_control_xfer_cb+0x7e>
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
   33a1c:	4601      	mov	r1, r0
   33a1e:	4628      	mov	r0, r5
   33a20:	f000 fba6 	bl	34170 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
   33a24:	2180      	movs	r1, #128	@ 0x80
   33a26:	4628      	mov	r0, r5
   33a28:	f000 fba2 	bl	34170 <dcd_edpt_stall>
   33a2c:	e7de      	b.n	339ec <usbd_control_xfer_cb+0x3c>
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
   33a2e:	7821      	ldrb	r1, [r4, #0]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
   33a30:	2300      	movs	r3, #0
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
   33a32:	43c9      	mvns	r1, r1
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
   33a34:	461a      	mov	r2, r3
   33a36:	f001 0180 	and.w	r1, r1, #128	@ 0x80
   33a3a:	4628      	mov	r0, r5
   33a3c:	f7ff ff16 	bl	3386c <usbd_edpt_xfer>
      TU_ASSERT( _status_stage_xact(rhport, &_ctrl_xfer.request) );
   33a40:	2800      	cmp	r0, #0
   33a42:	d1d3      	bne.n	339ec <usbd_control_xfer_cb+0x3c>
   33a44:	e7be      	b.n	339c4 <usbd_control_xfer_cb+0x14>
  uint16_t const xact_len = _ctrl_xfer.data_len - _ctrl_xfer.total_xferred;
   33a46:	89a3      	ldrh	r3, [r4, #12]
   33a48:	eba3 030c 	sub.w	r3, r3, ip
   33a4c:	b29b      	uxth	r3, r3
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _ctrl_xfer.buffer : NULL, xact_len);
   33a4e:	2b00      	cmp	r3, #0
   33a50:	bf08      	it	eq
   33a52:	2200      	moveq	r2, #0
   33a54:	f00e 0180 	and.w	r1, lr, #128	@ 0x80
   33a58:	f7ff ff08 	bl	3386c <usbd_edpt_xfer>
    TU_ASSERT( _data_stage_xact(rhport) );
   33a5c:	2800      	cmp	r0, #0
   33a5e:	d1c5      	bne.n	339ec <usbd_control_xfer_cb+0x3c>
   33a60:	e7b0      	b.n	339c4 <usbd_control_xfer_cb+0x14>
   33a62:	bf00      	nop
   33a64:	10052010 	.word	0x10052010
   33a68:	00000000 	.word	0x00000000

00033a6c <tud_vendor_n_available>:
{
  return _vendord_itf[itf].ep_in && _vendord_itf[itf].ep_out;
}

uint32_t tud_vendor_n_available (uint8_t itf)
{
   33a6c:	b508      	push	{r3, lr}
  return tu_fifo_count(&_vendord_itf[itf].rx_ff);
   33a6e:	4b04      	ldr	r3, [pc, #16]	@ (33a80 <tud_vendor_n_available+0x14>)
   33a70:	f241 6224 	movw	r2, #5668	@ 0x1624
   33a74:	fb02 3000 	mla	r0, r2, r0, r3
   33a78:	f7fe ff4c 	bl	32914 <tu_fifo_count>
}
   33a7c:	bd08      	pop	{r3, pc}
   33a7e:	bf00      	nop
   33a80:	10052028 	.word	0x10052028

00033a84 <tud_vendor_n_read>:
}

uint32_t tud_vendor_n_read (uint8_t itf, void* buffer, uint32_t bufsize)
{
  vendord_interface_t* p_itf = &_vendord_itf[itf];
  uint32_t num_read = tu_fifo_read_n(&p_itf->rx_ff, buffer, (uint16_t) bufsize);
   33a84:	f241 6324 	movw	r3, #5668	@ 0x1624
{
   33a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33a8c:	fb03 f400 	mul.w	r4, r3, r0
  uint32_t num_read = tu_fifo_read_n(&p_itf->rx_ff, buffer, (uint16_t) bufsize);
   33a90:	4f17      	ldr	r7, [pc, #92]	@ (33af0 <tud_vendor_n_read+0x6c>)
   33a92:	1d25      	adds	r5, r4, #4
   33a94:	443d      	add	r5, r7
   33a96:	b292      	uxth	r2, r2
   33a98:	4628      	mov	r0, r5
   33a9a:	f7fe ffc1 	bl	32a20 <tu_fifo_read_n>
  TU_VERIFY(usbd_edpt_claim(rhport, p_itf->ep_out), );
   33a9e:	eb07 0804 	add.w	r8, r7, r4
  uint32_t num_read = tu_fifo_read_n(&p_itf->rx_ff, buffer, (uint16_t) bufsize);
   33aa2:	4606      	mov	r6, r0
  TU_VERIFY(usbd_edpt_claim(rhport, p_itf->ep_out), );
   33aa4:	f898 1002 	ldrb.w	r1, [r8, #2]
   33aa8:	2000      	movs	r0, #0
   33aaa:	f7ff fec3 	bl	33834 <usbd_edpt_claim>
   33aae:	b910      	cbnz	r0, 33ab6 <tud_vendor_n_read+0x32>
  _prep_out_transaction(p_itf);
  return num_read;
}
   33ab0:	4630      	mov	r0, r6
   33ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint16_t max_read = tu_fifo_remaining(&p_itf->rx_ff);
   33ab6:	4628      	mov	r0, r5
   33ab8:	f7fe ff48 	bl	3294c <tu_fifo_remaining>
  if ( max_read >= CFG_TUD_VENDOR_EPSIZE )
   33abc:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
   33ac0:	d30d      	bcc.n	33ade <tud_vendor_n_read+0x5a>
    usbd_edpt_xfer(rhport, p_itf->ep_out, p_itf->epout_buf, CFG_TUD_VENDOR_EPSIZE);
   33ac2:	f504 5291 	add.w	r2, r4, #4640	@ 0x1220
   33ac6:	3204      	adds	r2, #4
   33ac8:	f898 1002 	ldrb.w	r1, [r8, #2]
   33acc:	f44f 7300 	mov.w	r3, #512	@ 0x200
   33ad0:	443a      	add	r2, r7
   33ad2:	2000      	movs	r0, #0
   33ad4:	f7ff feca 	bl	3386c <usbd_edpt_xfer>
}
   33ad8:	4630      	mov	r0, r6
   33ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    usbd_edpt_release(rhport, p_itf->ep_out);
   33ade:	f898 1002 	ldrb.w	r1, [r8, #2]
   33ae2:	2000      	movs	r0, #0
   33ae4:	f7ff feb4 	bl	33850 <usbd_edpt_release>
}
   33ae8:	4630      	mov	r0, r6
   33aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   33aee:	bf00      	nop
   33af0:	10052024 	.word	0x10052024

00033af4 <tud_vendor_n_write_flush>:
  }
  return ret;
}

uint32_t tud_vendor_n_write_flush (uint8_t itf)
{
   33af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33af8:	4604      	mov	r4, r0
   33afa:	f7ff f91b 	bl	32d34 <tud_mounted>
   33afe:	b910      	cbnz	r0, 33b06 <tud_vendor_n_write_flush+0x12>
  vendord_interface_t* p_itf = &_vendord_itf[itf];

  // Skip if usb is not ready yet
  TU_VERIFY( tud_ready(), 0 );
   33b00:	2000      	movs	r0, #0
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_itf->ep_in);
    return 0;
  }
}
   33b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   33b06:	f7ff f91d 	bl	32d44 <tud_suspended>
   33b0a:	4606      	mov	r6, r0
   33b0c:	2800      	cmp	r0, #0
   33b0e:	d1f7      	bne.n	33b00 <tud_vendor_n_write_flush+0xc>
  if ( !tu_fifo_count(&p_itf->tx_ff) ) return 0;
   33b10:	f241 6324 	movw	r3, #5668	@ 0x1624
   33b14:	f8df 8064 	ldr.w	r8, [pc, #100]	@ 33b7c <tud_vendor_n_write_flush+0x88>
   33b18:	fb03 f404 	mul.w	r4, r3, r4
   33b1c:	f104 0514 	add.w	r5, r4, #20
   33b20:	4445      	add	r5, r8
   33b22:	4628      	mov	r0, r5
   33b24:	f7fe fef6 	bl	32914 <tu_fifo_count>
   33b28:	2800      	cmp	r0, #0
   33b2a:	d0e9      	beq.n	33b00 <tud_vendor_n_write_flush+0xc>
  TU_VERIFY( usbd_edpt_claim(rhport, p_itf->ep_in), 0 );
   33b2c:	eb08 0704 	add.w	r7, r8, r4
   33b30:	4630      	mov	r0, r6
   33b32:	7879      	ldrb	r1, [r7, #1]
   33b34:	f7ff fe7e 	bl	33834 <usbd_edpt_claim>
   33b38:	2800      	cmp	r0, #0
   33b3a:	d0e1      	beq.n	33b00 <tud_vendor_n_write_flush+0xc>
  uint16_t const count = tu_fifo_read_n(&p_itf->tx_ff, p_itf->epin_buf, sizeof(p_itf->epin_buf));
   33b3c:	f504 54a1 	add.w	r4, r4, #5152	@ 0x1420
   33b40:	3404      	adds	r4, #4
   33b42:	4444      	add	r4, r8
   33b44:	4628      	mov	r0, r5
   33b46:	4621      	mov	r1, r4
   33b48:	f44f 7200 	mov.w	r2, #512	@ 0x200
   33b4c:	f7fe ff68 	bl	32a20 <tu_fifo_read_n>
    TU_ASSERT( usbd_edpt_xfer(rhport, p_itf->ep_in, p_itf->epin_buf, count), 0 );
   33b50:	7879      	ldrb	r1, [r7, #1]
  if ( count )
   33b52:	4605      	mov	r5, r0
   33b54:	b178      	cbz	r0, 33b76 <tud_vendor_n_write_flush+0x82>
    TU_ASSERT( usbd_edpt_xfer(rhport, p_itf->ep_in, p_itf->epin_buf, count), 0 );
   33b56:	4603      	mov	r3, r0
   33b58:	4622      	mov	r2, r4
   33b5a:	4630      	mov	r0, r6
   33b5c:	f7ff fe86 	bl	3386c <usbd_edpt_xfer>
   33b60:	b938      	cbnz	r0, 33b72 <tud_vendor_n_write_flush+0x7e>
   33b62:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   33b66:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
   33b6a:	07db      	lsls	r3, r3, #31
   33b6c:	d5c8      	bpl.n	33b00 <tud_vendor_n_write_flush+0xc>
   33b6e:	be00      	bkpt	0x0000
   33b70:	e7c6      	b.n	33b00 <tud_vendor_n_write_flush+0xc>
    return count;
   33b72:	4628      	mov	r0, r5
   33b74:	e7c5      	b.n	33b02 <tud_vendor_n_write_flush+0xe>
    usbd_edpt_release(rhport, p_itf->ep_in);
   33b76:	f7ff fe6b 	bl	33850 <usbd_edpt_release>
    return 0;
   33b7a:	e7c1      	b.n	33b00 <tud_vendor_n_write_flush+0xc>
   33b7c:	10052024 	.word	0x10052024

00033b80 <tud_vendor_n_write>:
{
   33b80:	b570      	push	{r4, r5, r6, lr}
  uint16_t ret = tu_fifo_write_n(&p_itf->tx_ff, buffer, (uint16_t) bufsize);
   33b82:	4c0c      	ldr	r4, [pc, #48]	@ (33bb4 <tud_vendor_n_write+0x34>)
   33b84:	f241 6324 	movw	r3, #5668	@ 0x1624
   33b88:	fb03 4400 	mla	r4, r3, r0, r4
   33b8c:	b292      	uxth	r2, r2
{
   33b8e:	4605      	mov	r5, r0
  uint16_t ret = tu_fifo_write_n(&p_itf->tx_ff, buffer, (uint16_t) bufsize);
   33b90:	4620      	mov	r0, r4
   33b92:	f7fe fff3 	bl	32b7c <tu_fifo_write_n>
   33b96:	4606      	mov	r6, r0
  if (tu_fifo_count(&p_itf->tx_ff) >= CFG_TUD_VENDOR_EPSIZE) {
   33b98:	4620      	mov	r0, r4
   33b9a:	f7fe febb 	bl	32914 <tu_fifo_count>
   33b9e:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
   33ba2:	d201      	bcs.n	33ba8 <tud_vendor_n_write+0x28>
}
   33ba4:	4630      	mov	r0, r6
   33ba6:	bd70      	pop	{r4, r5, r6, pc}
    tud_vendor_n_write_flush(itf);
   33ba8:	4628      	mov	r0, r5
   33baa:	f7ff ffa3 	bl	33af4 <tud_vendor_n_write_flush>
}
   33bae:	4630      	mov	r0, r6
   33bb0:	bd70      	pop	{r4, r5, r6, pc}
   33bb2:	bf00      	nop
   33bb4:	10052038 	.word	0x10052038

00033bb8 <tud_vendor_n_write_available>:

uint32_t tud_vendor_n_write_available (uint8_t itf)
{
   33bb8:	b508      	push	{r3, lr}
  return tu_fifo_remaining(&_vendord_itf[itf].tx_ff);
   33bba:	4b04      	ldr	r3, [pc, #16]	@ (33bcc <tud_vendor_n_write_available+0x14>)
   33bbc:	f241 6224 	movw	r2, #5668	@ 0x1624
   33bc0:	fb02 3000 	mla	r0, r2, r0, r3
   33bc4:	f7fe fec2 	bl	3294c <tu_fifo_remaining>
}
   33bc8:	bd08      	pop	{r3, pc}
   33bca:	bf00      	nop
   33bcc:	10052038 	.word	0x10052038

00033bd0 <vendord_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void vendord_init(void)
{
   33bd0:	b530      	push	{r4, r5, lr}
  tu_memclr(_vendord_itf, sizeof(_vendord_itf));
   33bd2:	4c0f      	ldr	r4, [pc, #60]	@ (33c10 <vendord_init+0x40>)
{
   33bd4:	b083      	sub	sp, #12
  for(uint8_t i=0; i<CFG_TUD_VENDOR; i++)
  {
    vendord_interface_t* p_itf = &_vendord_itf[i];

    // config fifo
    tu_fifo_config(&p_itf->rx_ff, p_itf->rx_ff_buf, CFG_TUD_VENDOR_RX_BUFSIZE, 1, false);
   33bd6:	2500      	movs	r5, #0
  tu_memclr(_vendord_itf, sizeof(_vendord_itf));
   33bd8:	f241 6224 	movw	r2, #5668	@ 0x1624
   33bdc:	2100      	movs	r1, #0
   33bde:	4620      	mov	r0, r4
   33be0:	f7f3 f97c 	bl	26edc <memset>
    tu_fifo_config(&p_itf->rx_ff, p_itf->rx_ff_buf, CFG_TUD_VENDOR_RX_BUFSIZE, 1, false);
   33be4:	f104 0124 	add.w	r1, r4, #36	@ 0x24
   33be8:	2301      	movs	r3, #1
   33bea:	9500      	str	r5, [sp, #0]
   33bec:	f44f 7200 	mov.w	r2, #512	@ 0x200
   33bf0:	1d20      	adds	r0, r4, #4
   33bf2:	f7fe fe71 	bl	328d8 <tu_fifo_config>
    tu_fifo_config(&p_itf->tx_ff, p_itf->tx_ff_buf, CFG_TUD_VENDOR_TX_BUFSIZE, 1, false);
   33bf6:	2301      	movs	r3, #1
   33bf8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
   33bfc:	9500      	str	r5, [sp, #0]
   33bfe:	f504 7109 	add.w	r1, r4, #548	@ 0x224
   33c02:	f104 0014 	add.w	r0, r4, #20
   33c06:	f7fe fe67 	bl	328d8 <tu_fifo_config>
#if CFG_FIFO_MUTEX
    tu_fifo_config_mutex(&p_itf->rx_ff, NULL, osal_mutex_create(&p_itf->rx_ff_mutex));
    tu_fifo_config_mutex(&p_itf->tx_ff, osal_mutex_create(&p_itf->tx_ff_mutex), NULL);
#endif
  }
}
   33c0a:	b003      	add	sp, #12
   33c0c:	bd30      	pop	{r4, r5, pc}
   33c0e:	bf00      	nop
   33c10:	10052024 	.word	0x10052024

00033c14 <vendord_reset>:

void vendord_reset(uint8_t rhport)
{
   33c14:	b510      	push	{r4, lr}

  for(uint8_t i=0; i<CFG_TUD_VENDOR; i++)
  {
    vendord_interface_t* p_itf = &_vendord_itf[i];

    tu_memclr(p_itf, ITF_MEM_RESET_SIZE);
   33c16:	4c06      	ldr	r4, [pc, #24]	@ (33c30 <vendord_reset+0x1c>)
   33c18:	4620      	mov	r0, r4
   33c1a:	2300      	movs	r3, #0
   33c1c:	f840 3b04 	str.w	r3, [r0], #4
    tu_fifo_clear(&p_itf->rx_ff);
   33c20:	f7ff f814 	bl	32c4c <tu_fifo_clear>
    tu_fifo_clear(&p_itf->tx_ff);
   33c24:	f104 0014 	add.w	r0, r4, #20
  }
}
   33c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tu_fifo_clear(&p_itf->tx_ff);
   33c2c:	f7ff b80e 	b.w	32c4c <tu_fifo_clear>
   33c30:	10052024 	.word	0x10052024

00033c34 <vendord_open>:

uint16_t vendord_open(uint8_t rhport, tusb_desc_interface_t const * desc_itf, uint16_t max_len)
{
  TU_VERIFY(TUSB_CLASS_VENDOR_SPECIFIC == desc_itf->bInterfaceClass, 0);
   33c34:	794b      	ldrb	r3, [r1, #5]
   33c36:	2bff      	cmp	r3, #255	@ 0xff
   33c38:	d001      	beq.n	33c3e <vendord_open+0xa>
   33c3a:	2000      	movs	r0, #0

    if ( p_vendor->ep_in ) tud_vendor_n_write_flush((uint8_t)(p_vendor - _vendord_itf));
  }

  return (uint16_t) ((uintptr_t) p_desc - (uintptr_t) desc_itf);
}
   33c3c:	4770      	bx	lr
{
   33c3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if ( _vendord_itf[i].ep_in == 0 && _vendord_itf[i].ep_out == 0 )
   33c42:	4e2d      	ldr	r6, [pc, #180]	@ (33cf8 <vendord_open+0xc4>)
  return desc8 + desc8[DESC_OFFSET_LEN];
   33c44:	780c      	ldrb	r4, [r1, #0]
   33c46:	7873      	ldrb	r3, [r6, #1]
   33c48:	460d      	mov	r5, r1
{
   33c4a:	b082      	sub	sp, #8
    if ( _vendord_itf[i].ep_in == 0 && _vendord_itf[i].ep_out == 0 )
   33c4c:	78b1      	ldrb	r1, [r6, #2]
   33c4e:	b903      	cbnz	r3, 33c52 <vendord_open+0x1e>
   33c50:	b119      	cbz	r1, 33c5a <vendord_open+0x26>
  TU_VERIFY(TUSB_CLASS_VENDOR_SPECIFIC == desc_itf->bInterfaceClass, 0);
   33c52:	2000      	movs	r0, #0
}
   33c54:	b002      	add	sp, #8
   33c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (desc_itf->bNumEndpoints)
   33c5a:	792f      	ldrb	r7, [r5, #4]
  p_vendor->itf_num = desc_itf->bInterfaceNumber;
   33c5c:	78ab      	ldrb	r3, [r5, #2]
   33c5e:	7033      	strb	r3, [r6, #0]
   33c60:	442c      	add	r4, r5
  if (desc_itf->bNumEndpoints)
   33c62:	b307      	cbz	r7, 33ca6 <vendord_open+0x72>
    while ( (TUSB_DESC_ENDPOINT != tu_desc_type(p_desc)) && (p_desc < desc_end) )
   33c64:	7863      	ldrb	r3, [r4, #1]
   33c66:	2b05      	cmp	r3, #5
   33c68:	d00a      	beq.n	33c80 <vendord_open+0x4c>
  uint8_t const * desc_end = p_desc + max_len;
   33c6a:	18a3      	adds	r3, r4, r2
    while ( (TUSB_DESC_ENDPOINT != tu_desc_type(p_desc)) && (p_desc < desc_end) )
   33c6c:	429c      	cmp	r4, r3
   33c6e:	d302      	bcc.n	33c76 <vendord_open+0x42>
   33c70:	e006      	b.n	33c80 <vendord_open+0x4c>
   33c72:	42a3      	cmp	r3, r4
   33c74:	d904      	bls.n	33c80 <vendord_open+0x4c>
   33c76:	7821      	ldrb	r1, [r4, #0]
   33c78:	440c      	add	r4, r1
   33c7a:	7861      	ldrb	r1, [r4, #1]
   33c7c:	2905      	cmp	r1, #5
   33c7e:	d1f8      	bne.n	33c72 <vendord_open+0x3e>
    TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, desc_itf->bNumEndpoints, TUSB_XFER_BULK, &p_vendor->ep_out, &p_vendor->ep_in), 0);
   33c80:	463a      	mov	r2, r7
   33c82:	4f1e      	ldr	r7, [pc, #120]	@ (33cfc <vendord_open+0xc8>)
   33c84:	9701      	str	r7, [sp, #4]
   33c86:	1c7b      	adds	r3, r7, #1
   33c88:	9300      	str	r3, [sp, #0]
   33c8a:	4621      	mov	r1, r4
   33c8c:	2302      	movs	r3, #2
   33c8e:	f7ff fd5f 	bl	33750 <usbd_open_edpt_pair>
   33c92:	b320      	cbz	r0, 33cde <vendord_open+0xaa>
    if ( p_vendor->ep_out )
   33c94:	78b1      	ldrb	r1, [r6, #2]
    p_desc += desc_itf->bNumEndpoints*sizeof(tusb_desc_endpoint_t);
   33c96:	f895 8004 	ldrb.w	r8, [r5, #4]
    if ( p_vendor->ep_out )
   33c9a:	b969      	cbnz	r1, 33cb8 <vendord_open+0x84>
    if ( p_vendor->ep_in ) tud_vendor_n_write_flush((uint8_t)(p_vendor - _vendord_itf));
   33c9c:	7873      	ldrb	r3, [r6, #1]
   33c9e:	b93b      	cbnz	r3, 33cb0 <vendord_open+0x7c>
    p_desc += desc_itf->bNumEndpoints*sizeof(tusb_desc_endpoint_t);
   33ca0:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
   33ca4:	4444      	add	r4, r8
  return (uint16_t) ((uintptr_t) p_desc - (uintptr_t) desc_itf);
   33ca6:	1b61      	subs	r1, r4, r5
   33ca8:	b288      	uxth	r0, r1
}
   33caa:	b002      	add	sp, #8
   33cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ( p_vendor->ep_in ) tud_vendor_n_write_flush((uint8_t)(p_vendor - _vendord_itf));
   33cb0:	2000      	movs	r0, #0
   33cb2:	f7ff ff1f 	bl	33af4 <tud_vendor_n_write_flush>
   33cb6:	e7f3      	b.n	33ca0 <vendord_open+0x6c>
  TU_VERIFY(usbd_edpt_claim(rhport, p_itf->ep_out), );
   33cb8:	2000      	movs	r0, #0
   33cba:	f7ff fdbb 	bl	33834 <usbd_edpt_claim>
   33cbe:	2800      	cmp	r0, #0
   33cc0:	d0ec      	beq.n	33c9c <vendord_open+0x68>
  uint16_t max_read = tu_fifo_remaining(&p_itf->rx_ff);
   33cc2:	1cf8      	adds	r0, r7, #3
   33cc4:	f7fe fe42 	bl	3294c <tu_fifo_remaining>
  if ( max_read >= CFG_TUD_VENDOR_EPSIZE )
   33cc8:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
   33ccc:	d30f      	bcc.n	33cee <vendord_open+0xba>
    usbd_edpt_xfer(rhport, p_itf->ep_out, p_itf->epout_buf, CFG_TUD_VENDOR_EPSIZE);
   33cce:	4a0c      	ldr	r2, [pc, #48]	@ (33d00 <vendord_open+0xcc>)
   33cd0:	78b1      	ldrb	r1, [r6, #2]
   33cd2:	f44f 7300 	mov.w	r3, #512	@ 0x200
   33cd6:	2000      	movs	r0, #0
   33cd8:	f7ff fdc8 	bl	3386c <usbd_edpt_xfer>
   33cdc:	e7de      	b.n	33c9c <vendord_open+0x68>
    TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, desc_itf->bNumEndpoints, TUSB_XFER_BULK, &p_vendor->ep_out, &p_vendor->ep_in), 0);
   33cde:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   33ce2:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
   33ce6:	07db      	lsls	r3, r3, #31
   33ce8:	d5b3      	bpl.n	33c52 <vendord_open+0x1e>
   33cea:	be00      	bkpt	0x0000
   33cec:	e7b1      	b.n	33c52 <vendord_open+0x1e>
    usbd_edpt_release(rhport, p_itf->ep_out);
   33cee:	78b1      	ldrb	r1, [r6, #2]
   33cf0:	2000      	movs	r0, #0
   33cf2:	f7ff fdad 	bl	33850 <usbd_edpt_release>
   33cf6:	e7d1      	b.n	33c9c <vendord_open+0x68>
   33cf8:	10052024 	.word	0x10052024
   33cfc:	10052025 	.word	0x10052025
   33d00:	10053248 	.word	0x10053248

00033d04 <vendord_xfer_cb>:

bool vendord_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
   33d04:	b510      	push	{r4, lr}

  for ( ; ; itf++, p_itf++)
  {
    if (itf >= TU_ARRAY_SIZE(_vendord_itf)) return false;

    if ( ( ep_addr == p_itf->ep_out ) || ( ep_addr == p_itf->ep_in ) ) break;
   33d06:	4c1b      	ldr	r4, [pc, #108]	@ (33d74 <vendord_xfer_cb+0x70>)
   33d08:	78a2      	ldrb	r2, [r4, #2]
   33d0a:	428a      	cmp	r2, r1
   33d0c:	d00f      	beq.n	33d2e <vendord_xfer_cb+0x2a>
   33d0e:	7862      	ldrb	r2, [r4, #1]
   33d10:	428a      	cmp	r2, r1
   33d12:	d10a      	bne.n	33d2a <vendord_xfer_cb+0x26>

    _prep_out_transaction(p_itf);
  }
  else if ( ep_addr == p_itf->ep_in )
  {
    if (tud_vendor_tx_cb) tud_vendor_tx_cb(itf, (uint16_t) xferred_bytes);
   33d14:	4a18      	ldr	r2, [pc, #96]	@ (33d78 <vendord_xfer_cb+0x74>)
   33d16:	b11a      	cbz	r2, 33d20 <vendord_xfer_cb+0x1c>
   33d18:	b299      	uxth	r1, r3
   33d1a:	2000      	movs	r0, #0
   33d1c:	f3af 8000 	nop.w
    // Send complete, try to send more if possible
    tud_vendor_n_write_flush(itf);
   33d20:	2000      	movs	r0, #0
   33d22:	f7ff fee7 	bl	33af4 <tud_vendor_n_write_flush>
  }

  return true;
   33d26:	2001      	movs	r0, #1
}
   33d28:	bd10      	pop	{r4, pc}
    if (itf >= TU_ARRAY_SIZE(_vendord_itf)) return false;
   33d2a:	2000      	movs	r0, #0
}
   33d2c:	bd10      	pop	{r4, pc}
    tu_fifo_write_n(&p_itf->rx_ff, p_itf->epout_buf, (uint16_t) xferred_bytes);
   33d2e:	b29a      	uxth	r2, r3
   33d30:	4912      	ldr	r1, [pc, #72]	@ (33d7c <vendord_xfer_cb+0x78>)
   33d32:	1d20      	adds	r0, r4, #4
   33d34:	f7fe ff22 	bl	32b7c <tu_fifo_write_n>
    if (tud_vendor_rx_cb) tud_vendor_rx_cb(itf);
   33d38:	4b11      	ldr	r3, [pc, #68]	@ (33d80 <vendord_xfer_cb+0x7c>)
   33d3a:	b113      	cbz	r3, 33d42 <vendord_xfer_cb+0x3e>
   33d3c:	2000      	movs	r0, #0
   33d3e:	f7f8 f84d 	bl	2bddc <tud_vendor_rx_cb>
  TU_VERIFY(usbd_edpt_claim(rhport, p_itf->ep_out), );
   33d42:	78a1      	ldrb	r1, [r4, #2]
   33d44:	2000      	movs	r0, #0
   33d46:	f7ff fd75 	bl	33834 <usbd_edpt_claim>
   33d4a:	2800      	cmp	r0, #0
   33d4c:	d0eb      	beq.n	33d26 <vendord_xfer_cb+0x22>
  uint16_t max_read = tu_fifo_remaining(&p_itf->rx_ff);
   33d4e:	480d      	ldr	r0, [pc, #52]	@ (33d84 <vendord_xfer_cb+0x80>)
   33d50:	f7fe fdfc 	bl	3294c <tu_fifo_remaining>
  if ( max_read >= CFG_TUD_VENDOR_EPSIZE )
   33d54:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
   33d58:	d307      	bcc.n	33d6a <vendord_xfer_cb+0x66>
    usbd_edpt_xfer(rhport, p_itf->ep_out, p_itf->epout_buf, CFG_TUD_VENDOR_EPSIZE);
   33d5a:	4a08      	ldr	r2, [pc, #32]	@ (33d7c <vendord_xfer_cb+0x78>)
   33d5c:	78a1      	ldrb	r1, [r4, #2]
   33d5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
   33d62:	2000      	movs	r0, #0
   33d64:	f7ff fd82 	bl	3386c <usbd_edpt_xfer>
   33d68:	e7dd      	b.n	33d26 <vendord_xfer_cb+0x22>
    usbd_edpt_release(rhport, p_itf->ep_out);
   33d6a:	78a1      	ldrb	r1, [r4, #2]
   33d6c:	2000      	movs	r0, #0
   33d6e:	f7ff fd6f 	bl	33850 <usbd_edpt_release>
   33d72:	e7d8      	b.n	33d26 <vendord_xfer_cb+0x22>
   33d74:	10052024 	.word	0x10052024
   33d78:	00000000 	.word	0x00000000
   33d7c:	10053248 	.word	0x10053248
   33d80:	0002bddd 	.word	0x0002bddd
   33d84:	10052028 	.word	0x10052028
	...

00033d90 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
   33d90:	4b07      	ldr	r3, [pc, #28]	@ (33db0 <pxCurrentTCBConst2>)
   33d92:	6819      	ldr	r1, [r3, #0]
   33d94:	6808      	ldr	r0, [r1, #0]
   33d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33d9a:	f380 8809 	msr	PSP, r0
   33d9e:	f3bf 8f6f 	isb	sy
   33da2:	f04f 0000 	mov.w	r0, #0
   33da6:	f380 8811 	msr	BASEPRI, r0
   33daa:	4770      	bx	lr
   33dac:	f3af 8000 	nop.w

00033db0 <pxCurrentTCBConst2>:
   33db0:	100516dc 	.word	0x100516dc

00033db4 <vPortEnterCritical>:

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
   33db4:	f04f 0380 	mov.w	r3, #128	@ 0x80
   33db8:	f383 8811 	msr	BASEPRI, r3
   33dbc:	f3bf 8f6f 	isb	sy
   33dc0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
   33dc4:	4a07      	ldr	r2, [pc, #28]	@ (33de4 <vPortEnterCritical+0x30>)
   33dc6:	6813      	ldr	r3, [r2, #0]
   33dc8:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
   33dca:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
   33dcc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
   33dce:	d000      	beq.n	33dd2 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
   33dd0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
   33dd2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   33dd6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
   33dda:	b2db      	uxtb	r3, r3
   33ddc:	2b00      	cmp	r3, #0
   33dde:	d0f7      	beq.n	33dd0 <vPortEnterCritical+0x1c>
   33de0:	e7fe      	b.n	33de0 <vPortEnterCritical+0x2c>
   33de2:	bf00      	nop
   33de4:	1000db70 	.word	0x1000db70

00033de8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
   33de8:	4a04      	ldr	r2, [pc, #16]	@ (33dfc <vPortExitCritical+0x14>)
   33dea:	6813      	ldr	r3, [r2, #0]
   33dec:	b12b      	cbz	r3, 33dfa <vPortExitCritical+0x12>
	uxCriticalNesting--;
   33dee:	3b01      	subs	r3, #1
   33df0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   33df2:	b90b      	cbnz	r3, 33df8 <vPortExitCritical+0x10>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
   33df4:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
   33df8:	4770      	bx	lr
	configASSERT( uxCriticalNesting );
   33dfa:	e7fe      	b.n	33dfa <vPortExitCritical+0x12>
   33dfc:	1000db70 	.word	0x1000db70

00033e00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   33e00:	f3ef 8009 	mrs	r0, PSP
   33e04:	f3bf 8f6f 	isb	sy
   33e08:	4b15      	ldr	r3, [pc, #84]	@ (33e60 <pxCurrentTCBConst>)
   33e0a:	681a      	ldr	r2, [r3, #0]
   33e0c:	f01e 0f10 	tst.w	lr, #16
   33e10:	bf08      	it	eq
   33e12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
   33e16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33e1a:	6010      	str	r0, [r2, #0]
   33e1c:	e92d 0009 	stmdb	sp!, {r0, r3}
   33e20:	f04f 0080 	mov.w	r0, #128	@ 0x80
   33e24:	f380 8811 	msr	BASEPRI, r0
   33e28:	f3bf 8f4f 	dsb	sy
   33e2c:	f3bf 8f6f 	isb	sy
   33e30:	f7fe fa9c 	bl	3236c <vTaskSwitchContext>
   33e34:	f04f 0000 	mov.w	r0, #0
   33e38:	f380 8811 	msr	BASEPRI, r0
   33e3c:	bc09      	pop	{r0, r3}
   33e3e:	6819      	ldr	r1, [r3, #0]
   33e40:	6808      	ldr	r0, [r1, #0]
   33e42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33e46:	f01e 0f10 	tst.w	lr, #16
   33e4a:	bf08      	it	eq
   33e4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
   33e50:	f380 8809 	msr	PSP, r0
   33e54:	f3bf 8f6f 	isb	sy
   33e58:	4770      	bx	lr
   33e5a:	bf00      	nop
   33e5c:	f3af 8000 	nop.w

00033e60 <pxCurrentTCBConst>:
   33e60:	100516dc 	.word	0x100516dc

00033e64 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   33e64:	b508      	push	{r3, lr}
	__asm volatile
   33e66:	f04f 0380 	mov.w	r3, #128	@ 0x80
   33e6a:	f383 8811 	msr	BASEPRI, r3
   33e6e:	f3bf 8f6f 	isb	sy
   33e72:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   33e76:	f7fe fa69 	bl	3234c <xTaskIncrementTick>
   33e7a:	b128      	cbz	r0, 33e88 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   33e7c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   33e80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
   33e84:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
   33e88:	2300      	movs	r3, #0
   33e8a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
   33e8e:	bd08      	pop	{r3, pc}

00033e90 <xPortStimerTickHandler>:
//
//
//*****************************************************************************
void
xPortStimerTickHandler(uint32_t delta)
{
   33e90:	b570      	push	{r4, r5, r6, lr}

    curSTimer = am_hal_stimer_counter_get();
    //
    // Configure the STIMER->COMPARE_0
    //
    am_hal_stimer_compare_delta_set(0, (ulTimerCountsForOneTick-delta));
   33e92:	4e1c      	ldr	r6, [pc, #112]	@ (33f04 <xPortStimerTickHandler+0x74>)
{
   33e94:	4604      	mov	r4, r0
    curSTimer = am_hal_stimer_counter_get();
   33e96:	f003 f9fd 	bl	37294 <am_hal_stimer_counter_get>
    am_hal_stimer_compare_delta_set(0, (ulTimerCountsForOneTick-delta));
   33e9a:	6831      	ldr	r1, [r6, #0]
    curSTimer = am_hal_stimer_counter_get();
   33e9c:	4605      	mov	r5, r0
    am_hal_stimer_compare_delta_set(0, (ulTimerCountsForOneTick-delta));
   33e9e:	1b09      	subs	r1, r1, r4
   33ea0:	2000      	movs	r0, #0
   33ea2:	f003 fa07 	bl	372b4 <am_hal_stimer_compare_delta_set>
#ifdef AM_FREERTOS_STIMER_BACKUP
    am_hal_stimer_compare_delta_set(1, (ulTimerCountsForOneTick-delta+1));
   33ea6:	6831      	ldr	r1, [r6, #0]
   33ea8:	2001      	movs	r0, #1
   33eaa:	4401      	add	r1, r0
   33eac:	1b09      	subs	r1, r1, r4
   33eae:	f003 fa01 	bl	372b4 <am_hal_stimer_compare_delta_set>
#endif

    timerCounts = curSTimer - g_lastSTimerVal;
   33eb2:	4915      	ldr	r1, [pc, #84]	@ (33f08 <xPortStimerTickHandler+0x78>)
    numTicksElapsed = timerCounts/ulTimerCountsForOneTick;
   33eb4:	6832      	ldr	r2, [r6, #0]
    timerCounts = curSTimer - g_lastSTimerVal;
   33eb6:	680b      	ldr	r3, [r1, #0]
   33eb8:	1aeb      	subs	r3, r5, r3
    numTicksElapsed = timerCounts/ulTimerCountsForOneTick;
   33eba:	fbb3 f4f2 	udiv	r4, r3, r2
    remainder = timerCounts % ulTimerCountsForOneTick;
   33ebe:	fb02 3014 	mls	r0, r2, r4, r3
    g_lastSTimerVal = curSTimer - remainder;
   33ec2:	1a2d      	subs	r5, r5, r0
   33ec4:	600d      	str	r5, [r1, #0]
	__asm volatile
   33ec6:	f3ef 8111 	mrs	r1, BASEPRI
   33eca:	f04f 0080 	mov.w	r0, #128	@ 0x80
   33ece:	f380 8811 	msr	BASEPRI, r0
   33ed2:	f3bf 8f6f 	isb	sy
   33ed6:	f3bf 8f4f 	dsb	sy
        //
        // Increment RTOS tick
        // Allowing for need to increment the tick more than one... to avoid accumulation of
        // error in case of interrupt latencies
        //
        while (numTicksElapsed--)
   33eda:	429a      	cmp	r2, r3
   33edc:	d80e      	bhi.n	33efc <xPortStimerTickHandler+0x6c>
    BaseType_t ctxtSwitchReqd = pdFALSE;
   33ede:	2500      	movs	r5, #0
        {
            ctxtSwitchReqd = (( xTaskIncrementTick() != pdFALSE ) ? pdTRUE : ctxtSwitchReqd);
   33ee0:	f7fe fa34 	bl	3234c <xTaskIncrementTick>
   33ee4:	2800      	cmp	r0, #0
   33ee6:	bf18      	it	ne
   33ee8:	2501      	movne	r5, #1
        while (numTicksElapsed--)
   33eea:	3c01      	subs	r4, #1
   33eec:	d1f8      	bne.n	33ee0 <xPortStimerTickHandler+0x50>
        }
        if ( ctxtSwitchReqd != pdFALSE )
   33eee:	b12d      	cbz	r5, 33efc <xPortStimerTickHandler+0x6c>
            //
            // A context switch is required.  Context switching is
            // performed in the PendSV interrupt. Pend the PendSV
            // interrupt.
            //
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   33ef0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   33ef4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
   33ef8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
   33efc:	2300      	movs	r3, #0
   33efe:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR(0);
}
   33f02:	bd70      	pop	{r4, r5, r6, pc}
   33f04:	1005364c 	.word	0x1005364c
   33f08:	10053650 	.word	0x10053650

00033f0c <am_stimer_cmpr0_isr>:
// Interrupt handler for the STIMER module Compare 0.
//
//*****************************************************************************
void
am_stimer_cmpr0_isr(void)
{
   33f0c:	b508      	push	{r3, lr}

    //
    // Check the timer interrupt status.
    //
    uint32_t ui32Status = am_hal_stimer_int_status_get(false);
   33f0e:	2000      	movs	r0, #0
   33f10:	f003 fa36 	bl	37380 <am_hal_stimer_int_status_get>
    if (ui32Status & AM_HAL_STIMER_INT_COMPAREA)
   33f14:	07c3      	lsls	r3, r0, #31
   33f16:	d400      	bmi.n	33f1a <am_stimer_cmpr0_isr+0xe>
        //
        // Run handlers for the various possible timer events.
        //
        xPortStimerTickHandler(0);
    }
}
   33f18:	bd08      	pop	{r3, pc}
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
   33f1a:	2001      	movs	r0, #1
   33f1c:	f003 fa2a 	bl	37374 <am_hal_stimer_int_clear>
}
   33f20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        xPortStimerTickHandler(0);
   33f24:	2000      	movs	r0, #0
   33f26:	f7ff bfb3 	b.w	33e90 <xPortStimerTickHandler>
   33f2a:	bf00      	nop

00033f2c <am_stimer_cmpr1_isr>:
// Interrupt handler for the STIMER module Compare 0.
//
//*****************************************************************************
void
am_stimer_cmpr1_isr(void)
{
   33f2c:	b508      	push	{r3, lr}

    //
    // Check the timer interrupt status.
    //
    uint32_t ui32Status = am_hal_stimer_int_status_get(false);
   33f2e:	2000      	movs	r0, #0
   33f30:	f003 fa26 	bl	37380 <am_hal_stimer_int_status_get>
    if (ui32Status & AM_HAL_STIMER_INT_COMPAREB)
   33f34:	0783      	lsls	r3, r0, #30
   33f36:	d400      	bmi.n	33f3a <am_stimer_cmpr1_isr+0xe>
        //
        // Run handlers for the various possible timer events.
        //
        xPortStimerTickHandler(1);
    }
}
   33f38:	bd08      	pop	{r3, pc}
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREB);
   33f3a:	2002      	movs	r0, #2
   33f3c:	f003 fa1a 	bl	37374 <am_hal_stimer_int_clear>
        gNumCmpB++;
   33f40:	4a04      	ldr	r2, [pc, #16]	@ (33f54 <am_stimer_cmpr1_isr+0x28>)
   33f42:	6813      	ldr	r3, [r2, #0]
        xPortStimerTickHandler(1);
   33f44:	2001      	movs	r0, #1
        gNumCmpB++;
   33f46:	4403      	add	r3, r0
   33f48:	6013      	str	r3, [r2, #0]
}
   33f4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        xPortStimerTickHandler(1);
   33f4e:	f7ff bf9f 	b.w	33e90 <xPortStimerTickHandler>
   33f52:	bf00      	nop
   33f54:	10053648 	.word	0x10053648

00033f58 <dcd_usb_ep0_setup_callback>:
//!
//! @param setup
//*****************************************************************************
static void
dcd_usb_ep0_setup_callback(uint8_t *setup)
{
   33f58:	b500      	push	{lr}
   33f5a:	4602      	mov	r2, r0
   33f5c:	b085      	sub	sp, #20
}

// helper to send setup received
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_setup_received(uint8_t rhport, uint8_t const * setup, bool in_isr) {
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
   33f5e:	6851      	ldr	r1, [r2, #4]
   33f60:	6800      	ldr	r0, [r0, #0]
   33f62:	ab02      	add	r3, sp, #8
   33f64:	c303      	stmia	r3!, {r0, r1}
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
   33f66:	f44f 62c0 	mov.w	r2, #1536	@ 0x600

  dcd_event_handler(&event, in_isr);
   33f6a:	2101      	movs	r1, #1
   33f6c:	a801      	add	r0, sp, #4
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
   33f6e:	9201      	str	r2, [sp, #4]
  dcd_event_handler(&event, in_isr);
   33f70:	f7ff fb1e 	bl	335b0 <dcd_event_handler>
    dcd_event_setup_received(0, setup, true);
}
   33f74:	b005      	add	sp, #20
   33f76:	f85d fb04 	ldr.w	pc, [sp], #4
   33f7a:	bf00      	nop

00033f7c <dcd_usb_dev_evt_callback>:
{
   33f7c:	b510      	push	{r4, lr}
   33f7e:	b084      	sub	sp, #16
    switch (eDevState)
   33f80:	2803      	cmp	r0, #3
   33f82:	d821      	bhi.n	33fc8 <dcd_usb_dev_evt_callback+0x4c>
   33f84:	e8df f000 	tbb	[pc, r0]
   33f88:	22395002 	.word	0x22395002
            am_hal_usb_intr_usb_enable(pUSBHandle, USB_CFG2_SOFE_Msk | USB_CFG2_ResumeE_Msk | USB_CFG2_SuspendE_Msk |
   33f8c:	4c2f      	ldr	r4, [pc, #188]	@ (3404c <dcd_usb_dev_evt_callback+0xd0>)
   33f8e:	f04f 6170 	mov.w	r1, #251658240	@ 0xf000000
   33f92:	6820      	ldr	r0, [r4, #0]
   33f94:	f000 fdfa 	bl	34b8c <am_hal_usb_intr_usb_enable>
            am_hal_usb_ep_init(pUSBHandle, 0, 0, 64);
   33f98:	2200      	movs	r2, #0
   33f9a:	4611      	mov	r1, r2
   33f9c:	6820      	ldr	r0, [r4, #0]
   33f9e:	2340      	movs	r3, #64	@ 0x40
   33fa0:	f000 fb66 	bl	34670 <am_hal_usb_ep_init>
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
   33fa4:	f44f 7480 	mov.w	r4, #256	@ 0x100
   33fa8:	2300      	movs	r3, #0
  event.bus_reset.speed = speed;
   33faa:	2202      	movs	r2, #2
  dcd_event_handler(&event, in_isr);
   33fac:	2101      	movs	r1, #1
   33fae:	a801      	add	r0, sp, #4
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
   33fb0:	f8cd 3006 	str.w	r3, [sp, #6]
   33fb4:	f8ad 4004 	strh.w	r4, [sp, #4]
   33fb8:	f8ad 300e 	strh.w	r3, [sp, #14]
   33fbc:	f8cd 300a 	str.w	r3, [sp, #10]
  event.bus_reset.speed = speed;
   33fc0:	f88d 2008 	strb.w	r2, [sp, #8]
  dcd_event_handler(&event, in_isr);
   33fc4:	f7ff faf4 	bl	335b0 <dcd_event_handler>
}
   33fc8:	b004      	add	sp, #16
   33fca:	bd10      	pop	{r4, pc}
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
   33fcc:	2300      	movs	r3, #0
   33fce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  dcd_event_handler(&event, in_isr);
   33fd2:	a801      	add	r0, sp, #4
   33fd4:	2101      	movs	r1, #1
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
   33fd6:	f8cd 3006 	str.w	r3, [sp, #6]
   33fda:	f8cd 300a 	str.w	r3, [sp, #10]
   33fde:	f8ad 300e 	strh.w	r3, [sp, #14]
   33fe2:	f8ad 2004 	strh.w	r2, [sp, #4]
  dcd_event_handler(&event, in_isr);
   33fe6:	f7ff fae3 	bl	335b0 <dcd_event_handler>
            am_hal_usb_set_dev_state(pUSBHandle, AM_HAL_USB_DEV_STATE_SUSPENDED);
   33fea:	4b18      	ldr	r3, [pc, #96]	@ (3404c <dcd_usb_dev_evt_callback+0xd0>)
   33fec:	6818      	ldr	r0, [r3, #0]
   33fee:	2106      	movs	r1, #6
}
   33ff0:	b004      	add	sp, #16
   33ff2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            am_hal_usb_set_dev_state(pUSBHandle, AM_HAL_USB_DEV_STATE_SUSPENDED);
   33ff6:	f000 ba87 	b.w	34508 <am_hal_usb_set_dev_state>
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
   33ffa:	2300      	movs	r3, #0
   33ffc:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
  dcd_event_handler(&event, in_isr);
   34000:	a801      	add	r0, sp, #4
   34002:	2101      	movs	r1, #1
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
   34004:	f8cd 3006 	str.w	r3, [sp, #6]
   34008:	f8cd 300a 	str.w	r3, [sp, #10]
   3400c:	f8ad 300e 	strh.w	r3, [sp, #14]
   34010:	f8ad 2004 	strh.w	r2, [sp, #4]
  dcd_event_handler(&event, in_isr);
   34014:	f7ff facc 	bl	335b0 <dcd_event_handler>
            am_hal_usb_set_dev_state(pUSBHandle, AM_HAL_USB_DEV_STATE_ACTIVE);
   34018:	4b0c      	ldr	r3, [pc, #48]	@ (3404c <dcd_usb_dev_evt_callback+0xd0>)
            am_hal_usb_set_dev_state(pUSBHandle, AM_HAL_USB_DEV_STATE_SUSPENDED);
   3401a:	6818      	ldr	r0, [r3, #0]
            am_hal_usb_set_dev_state(pUSBHandle, AM_HAL_USB_DEV_STATE_ACTIVE);
   3401c:	2104      	movs	r1, #4
}
   3401e:	b004      	add	sp, #16
   34020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            am_hal_usb_set_dev_state(pUSBHandle, AM_HAL_USB_DEV_STATE_SUSPENDED);
   34024:	f000 ba70 	b.w	34508 <am_hal_usb_set_dev_state>
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
   34028:	2300      	movs	r3, #0
   3402a:	f44f 7240 	mov.w	r2, #768	@ 0x300
  dcd_event_handler(&event, in_isr);
   3402e:	2101      	movs	r1, #1
   34030:	a801      	add	r0, sp, #4
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
   34032:	f8cd 3006 	str.w	r3, [sp, #6]
   34036:	f8cd 300a 	str.w	r3, [sp, #10]
   3403a:	f8ad 300e 	strh.w	r3, [sp, #14]
   3403e:	f8ad 2004 	strh.w	r2, [sp, #4]
  dcd_event_handler(&event, in_isr);
   34042:	f7ff fab5 	bl	335b0 <dcd_event_handler>
}
   34046:	b004      	add	sp, #16
   34048:	bd10      	pop	{r4, pc}
   3404a:	bf00      	nop
   3404c:	10053654 	.word	0x10053654

00034050 <dcd_usb_ep_xfer_complete_callback>:
static void
dcd_usb_ep_xfer_complete_callback(const uint8_t ep_addr,
                                  const uint16_t xfer_len,
                                  am_hal_usb_xfer_code_e code,
                                  void *param)
{
   34050:	b500      	push	{lr}
    switch (code)
   34052:	2a02      	cmp	r2, #2
{
   34054:	b085      	sub	sp, #20
   34056:	4684      	mov	ip, r0
   34058:	460b      	mov	r3, r1
    switch (code)
   3405a:	d014      	beq.n	34086 <dcd_usb_ep_xfer_complete_callback+0x36>
   3405c:	2a04      	cmp	r2, #4
   3405e:	d00f      	beq.n	34080 <dcd_usb_ep_xfer_complete_callback+0x30>
   34060:	bb32      	cbnz	r2, 340b0 <dcd_usb_ep_xfer_complete_callback+0x60>
}

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr) {
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
   34062:	f44f 60e0 	mov.w	r0, #1792	@ 0x700
   34066:	f8ad 0004 	strh.w	r0, [sp, #4]

  event.xfer_complete.ep_addr = ep_addr;
  event.xfer_complete.len     = xferred_bytes;
  event.xfer_complete.result  = result;

  dcd_event_handler(&event, in_isr);
   3406a:	2101      	movs	r1, #1
   3406c:	a801      	add	r0, sp, #4
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
   3406e:	f8cd 2006 	str.w	r2, [sp, #6]
   34072:	f8ad 200a 	strh.w	r2, [sp, #10]
  event.xfer_complete.ep_addr = ep_addr;
   34076:	f88d c008 	strb.w	ip, [sp, #8]
    {
        case USB_XFER_DONE:
            dcd_event_xfer_complete(0, ep_addr, xfer_len, XFER_RESULT_SUCCESS, true);
   3407a:	9303      	str	r3, [sp, #12]
  dcd_event_handler(&event, in_isr);
   3407c:	f7ff fa98 	bl	335b0 <dcd_event_handler>
            {
                dcd_event_xfer_complete(0, ep_addr, xfer_len, XFER_RESULT_FAILED, true);
            }
            break;
    }
}
   34080:	b005      	add	sp, #20
   34082:	f85d fb04 	ldr.w	pc, [sp], #4
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
   34086:	2100      	movs	r1, #0
   34088:	f44f 60e0 	mov.w	r0, #1792	@ 0x700
   3408c:	f8cd 1006 	str.w	r1, [sp, #6]
   34090:	f8ad 100a 	strh.w	r1, [sp, #10]
   34094:	f8ad 0004 	strh.w	r0, [sp, #4]
  dcd_event_handler(&event, in_isr);
   34098:	2101      	movs	r1, #1
   3409a:	a801      	add	r0, sp, #4
  event.xfer_complete.ep_addr = ep_addr;
   3409c:	f88d c008 	strb.w	ip, [sp, #8]
            dcd_event_xfer_complete(0, ep_addr, xfer_len, XFER_RESULT_STALLED, true);
   340a0:	9303      	str	r3, [sp, #12]
  event.xfer_complete.result  = result;
   340a2:	f88d 2009 	strb.w	r2, [sp, #9]
  dcd_event_handler(&event, in_isr);
   340a6:	f7ff fa83 	bl	335b0 <dcd_event_handler>
}
   340aa:	b005      	add	sp, #20
   340ac:	f85d fb04 	ldr.w	pc, [sp], #4
            if (xfer_len)
   340b0:	2900      	cmp	r1, #0
   340b2:	d0e5      	beq.n	34080 <dcd_usb_ep_xfer_complete_callback+0x30>
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
   340b4:	2200      	movs	r2, #0
   340b6:	f8cd 2006 	str.w	r2, [sp, #6]
  event.xfer_complete.result  = result;
   340ba:	2101      	movs	r1, #1
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
   340bc:	f8ad 200a 	strh.w	r2, [sp, #10]
  event.xfer_complete.ep_addr = ep_addr;
   340c0:	f88d 0008 	strb.w	r0, [sp, #8]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
   340c4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
  dcd_event_handler(&event, in_isr);
   340c8:	a801      	add	r0, sp, #4
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
   340ca:	f8ad 2004 	strh.w	r2, [sp, #4]
                dcd_event_xfer_complete(0, ep_addr, xfer_len, XFER_RESULT_FAILED, true);
   340ce:	9303      	str	r3, [sp, #12]
  event.xfer_complete.result  = result;
   340d0:	f88d 1009 	strb.w	r1, [sp, #9]
  dcd_event_handler(&event, in_isr);
   340d4:	f7ff fa6c 	bl	335b0 <dcd_event_handler>
}
   340d8:	e7d2      	b.n	34080 <dcd_usb_ep_xfer_complete_callback+0x30>
   340da:	bf00      	nop

000340dc <dcd_int_enable>:
   340dc:	4b03      	ldr	r3, [pc, #12]	@ (340ec <dcd_int_enable+0x10>)
   340de:	2280      	movs	r2, #128	@ 0x80
   340e0:	f883 231b 	strb.w	r2, [r3, #795]	@ 0x31b
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   340e4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
   340e8:	601a      	str	r2, [r3, #0]
dcd_int_enable(uint8_t rhport)
{
    (void) rhport;
    NVIC_SetPriority(USB0_IRQn, AM_IRQ_PRIORITY_DEFAULT);
    NVIC_EnableIRQ(USB0_IRQn);
}
   340ea:	4770      	bx	lr
   340ec:	e000e100 	.word	0xe000e100

000340f0 <dcd_int_disable>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   340f0:	4b04      	ldr	r3, [pc, #16]	@ (34104 <dcd_int_disable+0x14>)
   340f2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
   340f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   340fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   340fe:	f3bf 8f6f 	isb	sy
void
dcd_int_disable(uint8_t rhport)
{
    (void) rhport;
    NVIC_DisableIRQ(USB0_IRQn);
}
   34102:	4770      	bx	lr
   34104:	e000e100 	.word	0xe000e100

00034108 <dcd_set_address>:
//
//
//*****************************************************************************
void
dcd_set_address(uint8_t rhport, uint8_t dev_addr)
{
   34108:	b538      	push	{r3, r4, r5, lr}
              uint8_t *buffer,
              uint16_t total_bytes)
{
    (void) rhport;

    return am_hal_usb_ep_xfer(pUSBHandle,
   3410a:	4c09      	ldr	r4, [pc, #36]	@ (34130 <dcd_set_address+0x28>)
   3410c:	2300      	movs	r3, #0
{
   3410e:	460d      	mov	r5, r1
    return am_hal_usb_ep_xfer(pUSBHandle,
   34110:	461a      	mov	r2, r3
   34112:	6820      	ldr	r0, [r4, #0]
   34114:	2180      	movs	r1, #128	@ 0x80
   34116:	f000 fb5b 	bl	347d0 <am_hal_usb_ep_xfer>
    am_hal_usb_set_addr(pUSBHandle, dev_addr);
   3411a:	4629      	mov	r1, r5
   3411c:	6820      	ldr	r0, [r4, #0]
   3411e:	f000 f9db 	bl	344d8 <am_hal_usb_set_addr>
    am_hal_usb_set_dev_state(pUSBHandle, AM_HAL_USB_DEV_STATE_ADDRESSED);
   34122:	6820      	ldr	r0, [r4, #0]
   34124:	2101      	movs	r1, #1
}
   34126:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_usb_set_dev_state(pUSBHandle, AM_HAL_USB_DEV_STATE_ADDRESSED);
   3412a:	f000 b9ed 	b.w	34508 <am_hal_usb_set_dev_state>
   3412e:	bf00      	nop
   34130:	10053654 	.word	0x10053654

00034134 <dcd_edpt_open>:
{
   34134:	b508      	push	{r3, lr}
                              (uint8_t) (desc_edpt->bmAttributes.xfer),
   34136:	78ca      	ldrb	r2, [r1, #3]
    return am_hal_usb_ep_init((void *) pUSBHandle,
   34138:	4805      	ldr	r0, [pc, #20]	@ (34150 <dcd_edpt_open+0x1c>)
   3413a:	888b      	ldrh	r3, [r1, #4]
   3413c:	6800      	ldr	r0, [r0, #0]
   3413e:	7889      	ldrb	r1, [r1, #2]
   34140:	f002 0203 	and.w	r2, r2, #3
   34144:	f000 fa94 	bl	34670 <am_hal_usb_ep_init>
}
   34148:	fab0 f080 	clz	r0, r0
   3414c:	0940      	lsrs	r0, r0, #5
   3414e:	bd08      	pop	{r3, pc}
   34150:	10053654 	.word	0x10053654

00034154 <dcd_edpt_close_all>:
}
   34154:	4770      	bx	lr
   34156:	bf00      	nop

00034158 <dcd_edpt_xfer>:
    return am_hal_usb_ep_xfer(pUSBHandle,
   34158:	4804      	ldr	r0, [pc, #16]	@ (3416c <dcd_edpt_xfer+0x14>)
{
   3415a:	b508      	push	{r3, lr}
    return am_hal_usb_ep_xfer(pUSBHandle,
   3415c:	6800      	ldr	r0, [r0, #0]
   3415e:	f000 fb37 	bl	347d0 <am_hal_usb_ep_xfer>
                              ep_addr,
                              buffer,
                              total_bytes) == AM_HAL_STATUS_SUCCESS;
}
   34162:	fab0 f080 	clz	r0, r0
   34166:	0940      	lsrs	r0, r0, #5
   34168:	bd08      	pop	{r3, pc}
   3416a:	bf00      	nop
   3416c:	10053654 	.word	0x10053654

00034170 <dcd_edpt_stall>:
void
dcd_edpt_stall(uint8_t rhport, uint8_t ep_addr)
{
    (void) rhport;

    am_hal_usb_ep_stall(pUSBHandle, ep_addr);
   34170:	4b01      	ldr	r3, [pc, #4]	@ (34178 <dcd_edpt_stall+0x8>)
   34172:	6818      	ldr	r0, [r3, #0]
   34174:	f000 b9fa 	b.w	3456c <am_hal_usb_ep_stall>
   34178:	10053654 	.word	0x10053654

0003417c <dcd_edpt_clear_stall>:
//
//*****************************************************************************
void
dcd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr)
{
    am_hal_usb_ep_clear_stall(pUSBHandle, ep_addr);
   3417c:	4b01      	ldr	r3, [pc, #4]	@ (34184 <dcd_edpt_clear_stall+0x8>)
   3417e:	6818      	ldr	r0, [r3, #0]
   34180:	f000 ba32 	b.w	345e8 <am_hal_usb_ep_clear_stall>
   34184:	10053654 	.word	0x10053654

00034188 <am_usb_isr>:
// the usb isr
//
//*****************************************************************************
void
am_usb_isr(void)
{
   34188:	b510      	push	{r4, lr}
    uint32_t ui32IntStatus[3];
    am_hal_usb_intr_status_get(pUSBHandle,
   3418a:	4c08      	ldr	r4, [pc, #32]	@ (341ac <am_usb_isr+0x24>)
{
   3418c:	b084      	sub	sp, #16
    am_hal_usb_intr_status_get(pUSBHandle,
   3418e:	ab03      	add	r3, sp, #12
   34190:	aa02      	add	r2, sp, #8
   34192:	a901      	add	r1, sp, #4
   34194:	6820      	ldr	r0, [r4, #0]
   34196:	f000 fcd5 	bl	34b44 <am_hal_usb_intr_status_get>
                               &ui32IntStatus[0],
                               &ui32IntStatus[1],
                               &ui32IntStatus[2]);
    am_hal_usb_interrupt_service(pUSBHandle,
   3419a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   3419e:	9901      	ldr	r1, [sp, #4]
   341a0:	6820      	ldr	r0, [r4, #0]
   341a2:	f000 fd41 	bl	34c28 <am_hal_usb_interrupt_service>
                                 ui32IntStatus[0],
                                 ui32IntStatus[1],
                                 ui32IntStatus[2]);
}
   341a6:	b004      	add	sp, #16
   341a8:	bd10      	pop	{r4, pc}
   341aa:	bf00      	nop
   341ac:	10053654 	.word	0x10053654

000341b0 <dcd_connect>:
//*****************************************************************************
void
dcd_connect(uint8_t rhport)
{
    (void) rhport;
    am_hal_usb_attach(pUSBHandle);
   341b0:	4b01      	ldr	r3, [pc, #4]	@ (341b8 <dcd_connect+0x8>)
   341b2:	6818      	ldr	r0, [r3, #0]
   341b4:	f000 b9c6 	b.w	34544 <am_hal_usb_attach>
   341b8:	10053654 	.word	0x10053654

000341bc <dcd_init>:
{
   341bc:	b570      	push	{r4, r5, r6, lr}
    uint32_t initStat = am_hal_usb_initialize(0, (void *) &pUSBHandle);
   341be:	4d1e      	ldr	r5, [pc, #120]	@ (34238 <dcd_init+0x7c>)
{
   341c0:	4606      	mov	r6, r0
    uint32_t initStat = am_hal_usb_initialize(0, (void *) &pUSBHandle);
   341c2:	4629      	mov	r1, r5
   341c4:	2000      	movs	r0, #0
   341c6:	f000 f849 	bl	3425c <am_hal_usb_initialize>
    if (initStat != AM_HAL_STATUS_SUCCESS) return;
   341ca:	b100      	cbz	r0, 341ce <dcd_init+0x12>
}
   341cc:	bd70      	pop	{r4, r5, r6, pc}
    am_hal_usb_register_dev_evt_callback(pUSBHandle, dcd_usb_dev_evt_callback);
   341ce:	4604      	mov	r4, r0
   341d0:	491a      	ldr	r1, [pc, #104]	@ (3423c <dcd_init+0x80>)
   341d2:	6828      	ldr	r0, [r5, #0]
   341d4:	f000 fcf2 	bl	34bbc <am_hal_usb_register_dev_evt_callback>
    am_hal_usb_register_ep0_setup_received_callback(pUSBHandle, dcd_usb_ep0_setup_callback);
   341d8:	4919      	ldr	r1, [pc, #100]	@ (34240 <dcd_init+0x84>)
   341da:	6828      	ldr	r0, [r5, #0]
   341dc:	f000 fd00 	bl	34be0 <am_hal_usb_register_ep0_setup_received_callback>
    am_hal_usb_register_ep_xfer_complete_callback(pUSBHandle, dcd_usb_ep_xfer_complete_callback);
   341e0:	4918      	ldr	r1, [pc, #96]	@ (34244 <dcd_init+0x88>)
   341e2:	6828      	ldr	r0, [r5, #0]
   341e4:	f000 fd0e 	bl	34c04 <am_hal_usb_register_ep_xfer_complete_callback>
    am_hal_usb_power_control(pUSBHandle, AM_HAL_SYSCTRL_WAKE, false);
   341e8:	4622      	mov	r2, r4
   341ea:	4621      	mov	r1, r4
//! @return - none
//
//*****************************************************************************
static inline void am_hal_usb_enable_phy_reset_override(void)
{
    MCUCTRL->USBPHYRESET &= ~ (_VAL2FLD(MCUCTRL_USBPHYRESET_USBPHYPORRSTDIS, 0x1) |
   341ec:	4c16      	ldr	r4, [pc, #88]	@ (34248 <dcd_init+0x8c>)
   341ee:	6828      	ldr	r0, [r5, #0]
   341f0:	f000 f856 	bl	342a0 <am_hal_usb_power_control>
   341f4:	f8d4 3418 	ldr.w	r3, [r4, #1048]	@ 0x418
   341f8:	f023 0303 	bic.w	r3, r3, #3
   341fc:	f8c4 3418 	str.w	r3, [r4, #1048]	@ 0x418
    am_bsp_external_vddusb33_switch(true);
   34200:	2001      	movs	r0, #1
   34202:	f003 fae3 	bl	377cc <am_bsp_external_vddusb33_switch>
    am_bsp_external_vddusb0p9_switch(true);
   34206:	2001      	movs	r0, #1
   34208:	f003 faf0 	bl	377ec <am_bsp_external_vddusb0p9_switch>
    am_util_delay_ms(50);
   3420c:	2032      	movs	r0, #50	@ 0x32
   3420e:	f000 f81f 	bl	34250 <am_util_delay_ms>
    USB->BCDETCRTL1 =
   34212:	4b0e      	ldr	r3, [pc, #56]	@ (3424c <dcd_init+0x90>)
    am_hal_usb_intr_usb_enable(pUSBHandle, USB_INTRUSB_Reset_Msk);
   34214:	6828      	ldr	r0, [r5, #0]
   34216:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
   3421a:	625a      	str	r2, [r3, #36]	@ 0x24
//! @return - none
//
//*****************************************************************************
static inline void am_hal_usb_disable_phy_reset_override(void)
{
    MCUCTRL->USBPHYRESET |= (_VAL2FLD(MCUCTRL_USBPHYRESET_USBPHYPORRSTDIS, 0x1) |
   3421c:	f8d4 3418 	ldr.w	r3, [r4, #1048]	@ 0x418
   34220:	f043 0303 	orr.w	r3, r3, #3
   34224:	2104      	movs	r1, #4
   34226:	f8c4 3418 	str.w	r3, [r4, #1048]	@ 0x418
   3422a:	f000 fcaf 	bl	34b8c <am_hal_usb_intr_usb_enable>
    dcd_connect(rhport);
   3422e:	4630      	mov	r0, r6
   34230:	f7ff ffbe 	bl	341b0 <dcd_connect>
}
   34234:	bd70      	pop	{r4, r5, r6, pc}
   34236:	bf00      	nop
   34238:	10053654 	.word	0x10053654
   3423c:	00033f7d 	.word	0x00033f7d
   34240:	00033f59 	.word	0x00033f59
   34244:	00034051 	.word	0x00034051
   34248:	40020000 	.word	0x40020000
   3424c:	400b2000 	.word	0x400b2000

00034250 <am_util_delay_ms>:
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
#if defined(AM_PART_APOLLO4_API) || defined(AM_PART_APOLLO5_API)
    am_hal_delay_us( ui32MilliSeconds * 1000);
   34250:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
   34254:	fb03 f000 	mul.w	r0, r3, r0
   34258:	f003 ba00 	b.w	3765c <am_hal_delay_us>

0003425c <am_hal_usb_initialize>:
{
    //
    // Check that the request module is in range.
    //
#ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( ui32Module >= AM_REG_USB_NUM_MODULES )
   3425c:	b9b0      	cbnz	r0, 3428c <am_hal_usb_initialize+0x30>
#endif // AM_HAL_DISABLE_API_VALIDATION

    //
    // Check for valid arguments.
    //
    if ( !ppHandle )
   3425e:	b1c9      	cbz	r1, 34294 <am_hal_usb_initialize+0x38>
    }

    //
    // Check if the handle is unallocated.
    //
    if ( g_am_hal_usb_states[ui32Module].prefix.s.bInit )
   34260:	4b0d      	ldr	r3, [pc, #52]	@ (34298 <am_hal_usb_initialize+0x3c>)
   34262:	78d8      	ldrb	r0, [r3, #3]
   34264:	f3c0 0200 	ubfx	r2, r0, #0, #1
   34268:	f010 0001 	ands.w	r0, r0, #1
   3426c:	d110      	bne.n	34290 <am_hal_usb_initialize+0x34>
{
   3426e:	b410      	push	{r4}

    //
    // Initialize the handle.
    //
    g_am_hal_usb_states[ui32Module].prefix.s.bInit   = true;
    g_am_hal_usb_states[ui32Module].prefix.s.magic   = AM_HAL_MAGIC_USB;
   34270:	681c      	ldr	r4, [r3, #0]
    g_am_hal_usb_states[ui32Module].ui32Module       = ui32Module;
    g_am_hal_usb_states[ui32Module].sRegState.bValid = false;
   34272:	711a      	strb	r2, [r3, #4]
    g_am_hal_usb_states[ui32Module].prefix.s.magic   = AM_HAL_MAGIC_USB;
   34274:	4a09      	ldr	r2, [pc, #36]	@ (3429c <am_hal_usb_initialize+0x40>)
    g_am_hal_usb_states[ui32Module].ui32Module       = ui32Module;
   34276:	f8c3 00f8 	str.w	r0, [r3, #248]	@ 0xf8
    g_am_hal_usb_states[ui32Module].prefix.s.magic   = AM_HAL_MAGIC_USB;
   3427a:	f004 4c7e 	and.w	ip, r4, #4261412864	@ 0xfe000000
   3427e:	ea4c 0202 	orr.w	r2, ip, r2
   34282:	601a      	str	r2, [r3, #0]

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
} // am_hal_usb_initialize()
   34284:	f85d 4b04 	ldr.w	r4, [sp], #4
    *ppHandle = (void *)&g_am_hal_usb_states[ui32Module];
   34288:	600b      	str	r3, [r1, #0]
} // am_hal_usb_initialize()
   3428a:	4770      	bx	lr
        return AM_HAL_STATUS_OUT_OF_RANGE;
   3428c:	2005      	movs	r0, #5
   3428e:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_OPERATION;
   34290:	2007      	movs	r0, #7
} // am_hal_usb_initialize()
   34292:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   34294:	2006      	movs	r0, #6
   34296:	4770      	bx	lr
   34298:	10053658 	.word	0x10053658
   3429c:	01ea9e06 	.word	0x01ea9e06

000342a0 <am_hal_usb_power_control>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check to make sure this is a valid handle.
    //
    if ( !AM_HAL_USB_CHK_HANDLE(pHandle) )
   342a0:	2800      	cmp	r0, #0
   342a2:	f000 80a8 	beq.w	343f6 <am_hal_usb_power_control+0x156>
{
   342a6:	b570      	push	{r4, r5, r6, lr}
    if ( !AM_HAL_USB_CHK_HANDLE(pHandle) )
   342a8:	6803      	ldr	r3, [r0, #0]
   342aa:	4615      	mov	r5, r2
   342ac:	4a86      	ldr	r2, [pc, #536]	@ (344c8 <am_hal_usb_power_control+0x228>)
   342ae:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   342b2:	4293      	cmp	r3, r2
{
   342b4:	b084      	sub	sp, #16
   342b6:	4604      	mov	r4, r0
    if ( !AM_HAL_USB_CHK_HANDLE(pHandle) )
   342b8:	d127      	bne.n	3430a <am_hal_usb_power_control+0x6a>
    uint32_t ui32Status;
    am_hal_usb_state_t *pState = (am_hal_usb_state_t *) pHandle;
    uint32_t ui32Module = pState->ui32Module;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( ui32Module >= AM_REG_USB_NUM_MODULES )
   342ba:	f8d0 00f8 	ldr.w	r0, [r0, #248]	@ 0xf8
   342be:	bb38      	cbnz	r0, 34310 <am_hal_usb_power_control+0x70>
    USB_Type *pUSB = USBn(ui32Module);

    //
    // Decode the requested power state and update SCARD operation accordingly.
    //
    switch (ePowerState)
   342c0:	b359      	cbz	r1, 3431a <am_hal_usb_power_control+0x7a>
   342c2:	3901      	subs	r1, #1
   342c4:	2901      	cmp	r1, #1
   342c6:	d826      	bhi.n	34316 <am_hal_usb_power_control+0x76>
            }
            break;

        case AM_HAL_SYSCTRL_NORMALSLEEP:
        case AM_HAL_SYSCTRL_DEEPSLEEP:
            if ( bRetainState )
   342c8:	2d00      	cmp	r5, #0
   342ca:	f040 8096 	bne.w	343fa <am_hal_usb_power_control+0x15a>
//
//*****************************************************************************
uint32_t
am_hal_usb_intr_usb_clear(void *pHandle)
{
    volatile uint32_t tmp = 0;
   342ce:	9502      	str	r5, [sp, #8]
    }
#endif
    am_hal_usb_state_t *pState = (am_hal_usb_state_t *)pHandle;
    USB_Type *pUSB = USBn(pState->ui32Module);

    tmp = INTRUSB_Clear(pUSB);
   342d0:	4b7e      	ldr	r3, [pc, #504]	@ (344cc <am_hal_usb_power_control+0x22c>)
   342d2:	7a9a      	ldrb	r2, [r3, #10]
   342d4:	f002 020f 	and.w	r2, r2, #15
   342d8:	9202      	str	r2, [sp, #8]
    volatile uint32_t tmp = 0;
   342da:	2100      	movs	r1, #0
    (void)tmp;
   342dc:	9a02      	ldr	r2, [sp, #8]
    volatile uint32_t tmp = 0;
   342de:	9103      	str	r1, [sp, #12]
    tmp = INTRIN_Clear(pUSB);
   342e0:	885a      	ldrh	r2, [r3, #2]
   342e2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
   342e6:	9203      	str	r2, [sp, #12]
    (void)tmp;
   342e8:	9a03      	ldr	r2, [sp, #12]
    volatile uint32_t tmp = 0;
   342ea:	9101      	str	r1, [sp, #4]
    tmp = INTROUT_Clear(pUSB);
   342ec:	791b      	ldrb	r3, [r3, #4]
   342ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
   342f2:	9301      	str	r3, [sp, #4]
    (void)tmp;
   342f4:	9b01      	ldr	r3, [sp, #4]
            if ((ui32Status = am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_USB)) == AM_HAL_STATUS_SUCCESS)
   342f6:	2016      	movs	r0, #22
   342f8:	f002 fbcc 	bl	36a94 <am_hal_pwrctrl_periph_disable>
   342fc:	b930      	cbnz	r0, 3430c <am_hal_usb_power_control+0x6c>
                ui32Status = am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_USBPHY);
   342fe:	2017      	movs	r0, #23
}
   34300:	b004      	add	sp, #16
   34302:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                ui32Status = am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_USBPHY);
   34306:	f002 bbc5 	b.w	36a94 <am_hal_pwrctrl_periph_disable>
        return AM_HAL_STATUS_INVALID_HANDLE;
   3430a:	2002      	movs	r0, #2
}
   3430c:	b004      	add	sp, #16
   3430e:	bd70      	pop	{r4, r5, r6, pc}
        return AM_HAL_STATUS_OUT_OF_RANGE;
   34310:	2005      	movs	r0, #5
}
   34312:	b004      	add	sp, #16
   34314:	bd70      	pop	{r4, r5, r6, pc}
    switch (ePowerState)
   34316:	2006      	movs	r0, #6
   34318:	e7f8      	b.n	3430c <am_hal_usb_power_control+0x6c>
            if ( bRetainState && !pState->sRegState.bValid )
   3431a:	b11d      	cbz	r5, 34324 <am_hal_usb_power_control+0x84>
   3431c:	7923      	ldrb	r3, [r4, #4]
   3431e:	2b00      	cmp	r3, #0
   34320:	f000 80d0 	beq.w	344c4 <am_hal_usb_power_control+0x224>
            if ((ui32Status = am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_PERIPH_USB)) != AM_HAL_STATUS_SUCCESS)
   34324:	2016      	movs	r0, #22
   34326:	f002 fae5 	bl	368f4 <am_hal_pwrctrl_periph_enable>
   3432a:	2800      	cmp	r0, #0
   3432c:	d1ee      	bne.n	3430c <am_hal_usb_power_control+0x6c>
            if ((ui32Status = am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_PERIPH_USBPHY)) != AM_HAL_STATUS_SUCCESS)
   3432e:	2017      	movs	r0, #23
   34330:	f002 fae0 	bl	368f4 <am_hal_pwrctrl_periph_enable>
   34334:	2800      	cmp	r0, #0
   34336:	d1e9      	bne.n	3430c <am_hal_usb_power_control+0x6c>
            pUSB->SRAMCTRL = _VAL2FLD(USB_SRAMCTRL_WABL, 1)     |
   34338:	4a65      	ldr	r2, [pc, #404]	@ (344d0 <am_hal_usb_power_control+0x230>)
   3433a:	4b64      	ldr	r3, [pc, #400]	@ (344cc <am_hal_usb_power_control+0x22c>)
   3433c:	f242 7107 	movw	r1, #9991	@ 0x2707
   34340:	6051      	str	r1, [r2, #4]
            if ( bRetainState )
   34342:	2d00      	cmp	r5, #0
   34344:	d0e2      	beq.n	3430c <am_hal_usb_power_control+0x6c>
   34346:	4963      	ldr	r1, [pc, #396]	@ (344d4 <am_hal_usb_power_control+0x234>)
   34348:	f04f 6500 	mov.w	r5, #134217728	@ 0x8000000
   3434c:	f8c1 5080 	str.w	r5, [r1, #128]	@ 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   34350:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   34354:	f3bf 8f6f 	isb	sy
                pUSB->CFG0 = pState->sRegState.regCFG0;
   34358:	68a2      	ldr	r2, [r4, #8]
   3435a:	601a      	str	r2, [r3, #0]
                pUSB->CFG1 = pState->sRegState.regCFG1;
   3435c:	68e2      	ldr	r2, [r4, #12]
   3435e:	605a      	str	r2, [r3, #4]
                pUSB->CFG2 = pState->sRegState.regCFG2;
   34360:	6922      	ldr	r2, [r4, #16]
   34362:	609a      	str	r2, [r3, #8]
                    EP_INDEX_Set(pUSB, i);
   34364:	68da      	ldr	r2, [r3, #12]
   34366:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
   3436a:	60da      	str	r2, [r3, #12]
   3436c:	68da      	ldr	r2, [r3, #12]
   3436e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
   34372:	60da      	str	r2, [r3, #12]
                    pUSB->IDX0 = pState->sRegState.regEndPoints[i-1].regIDX0;
   34374:	6962      	ldr	r2, [r4, #20]
   34376:	611a      	str	r2, [r3, #16]
                    pUSB->IDX1 = pState->sRegState.regEndPoints[i-1].regIDX1;
   34378:	69a2      	ldr	r2, [r4, #24]
   3437a:	615a      	str	r2, [r3, #20]
                    pUSB->IDX2 = pState->sRegState.regEndPoints[i-1].regIDX2;
   3437c:	69e2      	ldr	r2, [r4, #28]
   3437e:	619a      	str	r2, [r3, #24]
                    EP_INDEX_Set(pUSB, i);
   34380:	68da      	ldr	r2, [r3, #12]
   34382:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
   34386:	60da      	str	r2, [r3, #12]
   34388:	68da      	ldr	r2, [r3, #12]
   3438a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
   3438e:	60da      	str	r2, [r3, #12]
                    pUSB->IDX0 = pState->sRegState.regEndPoints[i-1].regIDX0;
   34390:	6a22      	ldr	r2, [r4, #32]
   34392:	611a      	str	r2, [r3, #16]
                    pUSB->IDX1 = pState->sRegState.regEndPoints[i-1].regIDX1;
   34394:	6a62      	ldr	r2, [r4, #36]	@ 0x24
   34396:	615a      	str	r2, [r3, #20]
                    pUSB->IDX2 = pState->sRegState.regEndPoints[i-1].regIDX2;
   34398:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
   3439a:	619a      	str	r2, [r3, #24]
                    EP_INDEX_Set(pUSB, i);
   3439c:	68da      	ldr	r2, [r3, #12]
   3439e:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
   343a2:	60da      	str	r2, [r3, #12]
   343a4:	68da      	ldr	r2, [r3, #12]
   343a6:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
   343aa:	60da      	str	r2, [r3, #12]
                    pUSB->IDX0 = pState->sRegState.regEndPoints[i-1].regIDX0;
   343ac:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
   343ae:	611a      	str	r2, [r3, #16]
                    pUSB->IDX1 = pState->sRegState.regEndPoints[i-1].regIDX1;
   343b0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
   343b2:	615a      	str	r2, [r3, #20]
                    pUSB->IDX2 = pState->sRegState.regEndPoints[i-1].regIDX2;
   343b4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
   343b6:	619a      	str	r2, [r3, #24]
                    EP_INDEX_Set(pUSB, i);
   343b8:	68da      	ldr	r2, [r3, #12]
   343ba:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
   343be:	60da      	str	r2, [r3, #12]
   343c0:	68da      	ldr	r2, [r3, #12]
   343c2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
   343c6:	60da      	str	r2, [r3, #12]
                    pUSB->IDX0 = pState->sRegState.regEndPoints[i-1].regIDX0;
   343c8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
   343ca:	611a      	str	r2, [r3, #16]
                    pUSB->IDX1 = pState->sRegState.regEndPoints[i-1].regIDX1;
   343cc:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
   343ce:	615a      	str	r2, [r3, #20]
                    pUSB->IDX2 = pState->sRegState.regEndPoints[i-1].regIDX2;
   343d0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
   343d2:	619a      	str	r2, [r3, #24]
                    EP_INDEX_Set(pUSB, i);
   343d4:	68da      	ldr	r2, [r3, #12]
   343d6:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
   343da:	60da      	str	r2, [r3, #12]
   343dc:	68da      	ldr	r2, [r3, #12]
   343de:	f442 22a0 	orr.w	r2, r2, #327680	@ 0x50000
   343e2:	60da      	str	r2, [r3, #12]
                    pUSB->IDX0 = pState->sRegState.regEndPoints[i-1].regIDX0;
   343e4:	6c62      	ldr	r2, [r4, #68]	@ 0x44
   343e6:	611a      	str	r2, [r3, #16]
                    pUSB->IDX1 = pState->sRegState.regEndPoints[i-1].regIDX1;
   343e8:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
   343ea:	615a      	str	r2, [r3, #20]
                    pUSB->IDX2 = pState->sRegState.regEndPoints[i-1].regIDX2;
   343ec:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
   343ee:	619a      	str	r2, [r3, #24]
                pState->sRegState.bValid = false;
   343f0:	7120      	strb	r0, [r4, #4]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   343f2:	600d      	str	r5, [r1, #0]
    __COMPILER_BARRIER();
   343f4:	e78a      	b.n	3430c <am_hal_usb_power_control+0x6c>
        return AM_HAL_STATUS_INVALID_HANDLE;
   343f6:	2002      	movs	r0, #2
}
   343f8:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   343fa:	4d36      	ldr	r5, [pc, #216]	@ (344d4 <am_hal_usb_power_control+0x234>)
   343fc:	f04f 6600 	mov.w	r6, #134217728	@ 0x8000000
   34400:	f8c5 6080 	str.w	r6, [r5, #128]	@ 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   34404:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   34408:	f3bf 8f6f 	isb	sy
                pState->sRegState.regCFG0 = pUSB->CFG0;
   3440c:	4a2f      	ldr	r2, [pc, #188]	@ (344cc <am_hal_usb_power_control+0x22c>)
   3440e:	6811      	ldr	r1, [r2, #0]
   34410:	60a1      	str	r1, [r4, #8]
                pState->sRegState.regCFG1 = pUSB->CFG1;
   34412:	6851      	ldr	r1, [r2, #4]
   34414:	60e1      	str	r1, [r4, #12]
                pState->sRegState.regCFG2 = pUSB->CFG2;
   34416:	6891      	ldr	r1, [r2, #8]
   34418:	6121      	str	r1, [r4, #16]
                    EP_INDEX_Set(pUSB, i);
   3441a:	68d1      	ldr	r1, [r2, #12]
   3441c:	f421 2170 	bic.w	r1, r1, #983040	@ 0xf0000
   34420:	60d1      	str	r1, [r2, #12]
   34422:	68d1      	ldr	r1, [r2, #12]
   34424:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
   34428:	60d1      	str	r1, [r2, #12]
                    pState->sRegState.regEndPoints[i - 1].regIDX0 = pUSB->IDX0;
   3442a:	6911      	ldr	r1, [r2, #16]
   3442c:	6161      	str	r1, [r4, #20]
                    pState->sRegState.regEndPoints[i - 1].regIDX1 = pUSB->IDX1;
   3442e:	6951      	ldr	r1, [r2, #20]
   34430:	61a1      	str	r1, [r4, #24]
                    pState->sRegState.regEndPoints[i - 1].regIDX2 = pUSB->IDX2;
   34432:	6991      	ldr	r1, [r2, #24]
   34434:	61e1      	str	r1, [r4, #28]
                    EP_INDEX_Set(pUSB, i);
   34436:	68d1      	ldr	r1, [r2, #12]
   34438:	f421 2170 	bic.w	r1, r1, #983040	@ 0xf0000
   3443c:	60d1      	str	r1, [r2, #12]
   3443e:	68d1      	ldr	r1, [r2, #12]
   34440:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
   34444:	60d1      	str	r1, [r2, #12]
                    pState->sRegState.regEndPoints[i - 1].regIDX0 = pUSB->IDX0;
   34446:	6911      	ldr	r1, [r2, #16]
   34448:	6221      	str	r1, [r4, #32]
                    pState->sRegState.regEndPoints[i - 1].regIDX1 = pUSB->IDX1;
   3444a:	6951      	ldr	r1, [r2, #20]
   3444c:	6261      	str	r1, [r4, #36]	@ 0x24
                    pState->sRegState.regEndPoints[i - 1].regIDX2 = pUSB->IDX2;
   3444e:	6991      	ldr	r1, [r2, #24]
   34450:	62a1      	str	r1, [r4, #40]	@ 0x28
                    EP_INDEX_Set(pUSB, i);
   34452:	68d1      	ldr	r1, [r2, #12]
   34454:	f421 2170 	bic.w	r1, r1, #983040	@ 0xf0000
   34458:	60d1      	str	r1, [r2, #12]
   3445a:	68d1      	ldr	r1, [r2, #12]
   3445c:	f441 3140 	orr.w	r1, r1, #196608	@ 0x30000
   34460:	60d1      	str	r1, [r2, #12]
                    pState->sRegState.regEndPoints[i - 1].regIDX0 = pUSB->IDX0;
   34462:	6911      	ldr	r1, [r2, #16]
   34464:	62e1      	str	r1, [r4, #44]	@ 0x2c
                    pState->sRegState.regEndPoints[i - 1].regIDX1 = pUSB->IDX1;
   34466:	6951      	ldr	r1, [r2, #20]
   34468:	6321      	str	r1, [r4, #48]	@ 0x30
                    pState->sRegState.regEndPoints[i - 1].regIDX2 = pUSB->IDX2;
   3446a:	6991      	ldr	r1, [r2, #24]
   3446c:	6361      	str	r1, [r4, #52]	@ 0x34
                    EP_INDEX_Set(pUSB, i);
   3446e:	68d1      	ldr	r1, [r2, #12]
   34470:	f421 2170 	bic.w	r1, r1, #983040	@ 0xf0000
   34474:	60d1      	str	r1, [r2, #12]
   34476:	68d1      	ldr	r1, [r2, #12]
   34478:	f441 2180 	orr.w	r1, r1, #262144	@ 0x40000
   3447c:	60d1      	str	r1, [r2, #12]
                    pState->sRegState.regEndPoints[i - 1].regIDX0 = pUSB->IDX0;
   3447e:	6911      	ldr	r1, [r2, #16]
   34480:	63a1      	str	r1, [r4, #56]	@ 0x38
                    pState->sRegState.regEndPoints[i - 1].regIDX1 = pUSB->IDX1;
   34482:	6951      	ldr	r1, [r2, #20]
   34484:	63e1      	str	r1, [r4, #60]	@ 0x3c
                    pState->sRegState.regEndPoints[i - 1].regIDX2 = pUSB->IDX2;
   34486:	6991      	ldr	r1, [r2, #24]
   34488:	6421      	str	r1, [r4, #64]	@ 0x40
                    EP_INDEX_Set(pUSB, i);
   3448a:	68d1      	ldr	r1, [r2, #12]
   3448c:	f421 2170 	bic.w	r1, r1, #983040	@ 0xf0000
   34490:	60d1      	str	r1, [r2, #12]
   34492:	68d1      	ldr	r1, [r2, #12]
   34494:	f441 21a0 	orr.w	r1, r1, #327680	@ 0x50000
   34498:	60d1      	str	r1, [r2, #12]
                    pState->sRegState.regEndPoints[i - 1].regIDX0 = pUSB->IDX0;
   3449a:	6911      	ldr	r1, [r2, #16]
   3449c:	6461      	str	r1, [r4, #68]	@ 0x44
                    pState->sRegState.regEndPoints[i - 1].regIDX1 = pUSB->IDX1;
   3449e:	6951      	ldr	r1, [r2, #20]
   344a0:	64a1      	str	r1, [r4, #72]	@ 0x48
                    pState->sRegState.regEndPoints[i - 1].regIDX2 = pUSB->IDX2;
   344a2:	6992      	ldr	r2, [r2, #24]
   344a4:	64e2      	str	r2, [r4, #76]	@ 0x4c
                pState->sRegState.bValid = true;
   344a6:	f04f 0c01 	mov.w	ip, #1
   344aa:	f884 c004 	strb.w	ip, [r4, #4]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   344ae:	602e      	str	r6, [r5, #0]
    if (!AM_HAL_USB_CHK_HANDLE(pHandle))
   344b0:	6822      	ldr	r2, [r4, #0]
    volatile uint32_t tmp = 0;
   344b2:	9002      	str	r0, [sp, #8]
    if (!AM_HAL_USB_CHK_HANDLE(pHandle))
   344b4:	f022 427e 	bic.w	r2, r2, #4261412864	@ 0xfe000000
   344b8:	429a      	cmp	r2, r3
    volatile uint32_t tmp = 0;
   344ba:	bf18      	it	ne
   344bc:	9001      	strne	r0, [sp, #4]
    if (!AM_HAL_USB_CHK_HANDLE(pHandle))
   344be:	f47f af1a 	bne.w	342f6 <am_hal_usb_power_control+0x56>
   344c2:	e705      	b.n	342d0 <am_hal_usb_power_control+0x30>
                return AM_HAL_STATUS_INVALID_OPERATION;
   344c4:	2007      	movs	r0, #7
   344c6:	e721      	b.n	3430c <am_hal_usb_power_control+0x6c>
   344c8:	01ea9e06 	.word	0x01ea9e06
   344cc:	400b0000 	.word	0x400b0000
   344d0:	400b2000 	.word	0x400b2000
   344d4:	e000e100 	.word	0xe000e100

000344d8 <am_hal_usb_set_addr>:
        if (!AM_HAL_USB_CHK_HANDLE(pHandle) )
   344d8:	b178      	cbz	r0, 344fa <am_hal_usb_set_addr+0x22>
   344da:	6803      	ldr	r3, [r0, #0]
   344dc:	4a08      	ldr	r2, [pc, #32]	@ (34500 <am_hal_usb_set_addr+0x28>)
   344de:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   344e2:	4293      	cmp	r3, r2
   344e4:	d109      	bne.n	344fa <am_hal_usb_set_addr+0x22>
    FADDR_FuncAddr_Set(pUSB, ui8DevAddr);
   344e6:	4b07      	ldr	r3, [pc, #28]	@ (34504 <am_hal_usb_set_addr+0x2c>)
   344e8:	781a      	ldrb	r2, [r3, #0]
   344ea:	f002 0280 	and.w	r2, r2, #128	@ 0x80
   344ee:	701a      	strb	r2, [r3, #0]
   344f0:	781a      	ldrb	r2, [r3, #0]
   344f2:	430a      	orrs	r2, r1
    return AM_HAL_STATUS_SUCCESS;
   344f4:	2000      	movs	r0, #0
    FADDR_FuncAddr_Set(pUSB, ui8DevAddr);
   344f6:	701a      	strb	r2, [r3, #0]
    return AM_HAL_STATUS_SUCCESS;
   344f8:	4770      	bx	lr
            return AM_HAL_STATUS_INVALID_HANDLE;
   344fa:	2002      	movs	r0, #2
}
   344fc:	4770      	bx	lr
   344fe:	bf00      	nop
   34500:	01ea9e06 	.word	0x01ea9e06
   34504:	400b0000 	.word	0x400b0000

00034508 <am_hal_usb_set_dev_state>:
    if (!AM_HAL_USB_CHK_HANDLE(pHandle) )
   34508:	b1b8      	cbz	r0, 3453a <am_hal_usb_set_dev_state+0x32>
{
   3450a:	b530      	push	{r4, r5, lr}
    if (!AM_HAL_USB_CHK_HANDLE(pHandle) )
   3450c:	6803      	ldr	r3, [r0, #0]
   3450e:	4a0c      	ldr	r2, [pc, #48]	@ (34540 <am_hal_usb_set_dev_state+0x38>)
   34510:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   34514:	4293      	cmp	r3, r2
{
   34516:	b083      	sub	sp, #12
   34518:	4604      	mov	r4, r0
    if (!AM_HAL_USB_CHK_HANDLE(pHandle) )
   3451a:	d002      	beq.n	34522 <am_hal_usb_set_dev_state+0x1a>
        return AM_HAL_STATUS_INVALID_HANDLE;
   3451c:	2002      	movs	r0, #2
}
   3451e:	b003      	add	sp, #12
   34520:	bd30      	pop	{r4, r5, pc}
   34522:	460d      	mov	r5, r1
    AM_CRITICAL_BEGIN
   34524:	f001 fe44 	bl	361b0 <am_hal_interrupt_master_disable>
   34528:	9001      	str	r0, [sp, #4]
    AM_CRITICAL_END
   3452a:	9801      	ldr	r0, [sp, #4]
    pState->eDevState = eDevState;
   3452c:	f884 5055 	strb.w	r5, [r4, #85]	@ 0x55
    AM_CRITICAL_END
   34530:	f001 fe42 	bl	361b8 <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
   34534:	2000      	movs	r0, #0
}
   34536:	b003      	add	sp, #12
   34538:	bd30      	pop	{r4, r5, pc}
        return AM_HAL_STATUS_INVALID_HANDLE;
   3453a:	2002      	movs	r0, #2
}
   3453c:	4770      	bx	lr
   3453e:	bf00      	nop
   34540:	01ea9e06 	.word	0x01ea9e06

00034544 <am_hal_usb_attach>:
    if (!AM_HAL_USB_CHK_HANDLE(pHandle) )
   34544:	b160      	cbz	r0, 34560 <am_hal_usb_attach+0x1c>
   34546:	6803      	ldr	r3, [r0, #0]
   34548:	4a06      	ldr	r2, [pc, #24]	@ (34564 <am_hal_usb_attach+0x20>)
   3454a:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   3454e:	4293      	cmp	r3, r2
   34550:	d106      	bne.n	34560 <am_hal_usb_attach+0x1c>
    POWER_AMSPECIFIC_Set(pUSB);
   34552:	4a05      	ldr	r2, [pc, #20]	@ (34568 <am_hal_usb_attach+0x24>)
   34554:	7853      	ldrb	r3, [r2, #1]
   34556:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
    return AM_HAL_STATUS_SUCCESS;
   3455a:	2000      	movs	r0, #0
    POWER_AMSPECIFIC_Set(pUSB);
   3455c:	7053      	strb	r3, [r2, #1]
    return AM_HAL_STATUS_SUCCESS;
   3455e:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   34560:	2002      	movs	r0, #2
}
   34562:	4770      	bx	lr
   34564:	01ea9e06 	.word	0x01ea9e06
   34568:	400b0000 	.word	0x400b0000

0003456c <am_hal_usb_ep_stall>:
    if (!AM_HAL_USB_CHK_HANDLE(pHandle) )
   3456c:	b350      	cbz	r0, 345c4 <am_hal_usb_ep_stall+0x58>
   3456e:	6803      	ldr	r3, [r0, #0]
   34570:	4a1a      	ldr	r2, [pc, #104]	@ (345dc <am_hal_usb_ep_stall+0x70>)
   34572:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   34576:	4293      	cmp	r3, r2
   34578:	d124      	bne.n	345c4 <am_hal_usb_ep_stall+0x58>
    if (AM_HAL_USB_CHK_EP_NUM(ui8EpAddr))
   3457a:	f001 027f 	and.w	r2, r1, #127	@ 0x7f
   3457e:	2a05      	cmp	r2, #5
   34580:	d81e      	bhi.n	345c0 <am_hal_usb_ep_stall+0x54>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   34582:	4b17      	ldr	r3, [pc, #92]	@ (345e0 <am_hal_usb_ep_stall+0x74>)
   34584:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
   34588:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   3458c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   34590:	f3bf 8f6f 	isb	sy
    EP_INDEX_Set(pUSB, ui8EpNum);
   34594:	4b13      	ldr	r3, [pc, #76]	@ (345e4 <am_hal_usb_ep_stall+0x78>)
   34596:	68d8      	ldr	r0, [r3, #12]
   34598:	f420 2070 	bic.w	r0, r0, #983040	@ 0xf0000
   3459c:	60d8      	str	r0, [r3, #12]
   3459e:	68d8      	ldr	r0, [r3, #12]
   345a0:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   345a4:	60d8      	str	r0, [r3, #12]
    if (ui8EpNum == AM_HAL_USB_EP0_NUMBER)
   345a6:	b17a      	cbz	r2, 345c8 <am_hal_usb_ep_stall+0x5c>
        switch ( ui8EpDir )
   345a8:	09c9      	lsrs	r1, r1, #7
   345aa:	d112      	bne.n	345d2 <am_hal_usb_ep_stall+0x66>
                OUTCSRL_SendStall_Set(pUSB);
   345ac:	695a      	ldr	r2, [r3, #20]
   345ae:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
   345b2:	615a      	str	r2, [r3, #20]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   345b4:	4b0a      	ldr	r3, [pc, #40]	@ (345e0 <am_hal_usb_ep_stall+0x74>)
   345b6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
   345ba:	601a      	str	r2, [r3, #0]
    return AM_HAL_STATUS_SUCCESS;
   345bc:	2000      	movs	r0, #0
   345be:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   345c0:	2006      	movs	r0, #6
}
   345c2:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   345c4:	2002      	movs	r0, #2
   345c6:	4770      	bx	lr
        CSR0_ServicedOutPktRdyAndSendStall_Set(pUSB);
   345c8:	691a      	ldr	r2, [r3, #16]
   345ca:	f442 02c0 	orr.w	r2, r2, #6291456	@ 0x600000
   345ce:	611a      	str	r2, [r3, #16]
   345d0:	e7f0      	b.n	345b4 <am_hal_usb_ep_stall+0x48>
                INCSRL_SendStall_Set(pUSB);
   345d2:	691a      	ldr	r2, [r3, #16]
   345d4:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
   345d8:	611a      	str	r2, [r3, #16]
                break;
   345da:	e7eb      	b.n	345b4 <am_hal_usb_ep_stall+0x48>
   345dc:	01ea9e06 	.word	0x01ea9e06
   345e0:	e000e100 	.word	0xe000e100
   345e4:	400b0000 	.word	0x400b0000

000345e8 <am_hal_usb_ep_clear_stall>:
    if (!AM_HAL_USB_CHK_HANDLE(pHandle) )
   345e8:	b160      	cbz	r0, 34604 <am_hal_usb_ep_clear_stall+0x1c>
   345ea:	6803      	ldr	r3, [r0, #0]
   345ec:	4a1d      	ldr	r2, [pc, #116]	@ (34664 <am_hal_usb_ep_clear_stall+0x7c>)
   345ee:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   345f2:	4293      	cmp	r3, r2
   345f4:	d106      	bne.n	34604 <am_hal_usb_ep_clear_stall+0x1c>
    if (AM_HAL_USB_CHK_EP_NUM(ui8EpAddr))
   345f6:	f001 027f 	and.w	r2, r1, #127	@ 0x7f
   345fa:	2a05      	cmp	r2, #5
   345fc:	d826      	bhi.n	3464c <am_hal_usb_ep_clear_stall+0x64>
    if (ui8EpNum == AM_HAL_USB_EP0_NUMBER)
   345fe:	b91a      	cbnz	r2, 34608 <am_hal_usb_ep_clear_stall+0x20>
        return AM_HAL_STATUS_SUCCESS;
   34600:	2000      	movs	r0, #0
   34602:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   34604:	2002      	movs	r0, #2
   34606:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   34608:	4b17      	ldr	r3, [pc, #92]	@ (34668 <am_hal_usb_ep_clear_stall+0x80>)
   3460a:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
   3460e:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   34612:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   34616:	f3bf 8f6f 	isb	sy
    EP_INDEX_Set(pUSB, ui8EpNum);
   3461a:	4b14      	ldr	r3, [pc, #80]	@ (3466c <am_hal_usb_ep_clear_stall+0x84>)
   3461c:	68d8      	ldr	r0, [r3, #12]
   3461e:	f420 2070 	bic.w	r0, r0, #983040	@ 0xf0000
   34622:	60d8      	str	r0, [r3, #12]
   34624:	68d8      	ldr	r0, [r3, #12]
    if (ui8EpDir == AM_HAL_USB_EP_DIR_IN)
   34626:	09c9      	lsrs	r1, r1, #7
    EP_INDEX_Set(pUSB, ui8EpNum);
   34628:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
   3462c:	60da      	str	r2, [r3, #12]
    if (ui8EpDir == AM_HAL_USB_EP_DIR_IN)
   3462e:	d10f      	bne.n	34650 <am_hal_usb_ep_clear_stall+0x68>
        OUTCSRL_SendStall_Clear(pUSB);
   34630:	695a      	ldr	r2, [r3, #20]
   34632:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
   34636:	615a      	str	r2, [r3, #20]
        OUTCSRL_ClrDataTog_Set(pUSB);
   34638:	695a      	ldr	r2, [r3, #20]
   3463a:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
   3463e:	615a      	str	r2, [r3, #20]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   34640:	4b09      	ldr	r3, [pc, #36]	@ (34668 <am_hal_usb_ep_clear_stall+0x80>)
   34642:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
   34646:	601a      	str	r2, [r3, #0]
        return AM_HAL_STATUS_SUCCESS;
   34648:	2000      	movs	r0, #0
   3464a:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   3464c:	2006      	movs	r0, #6
}
   3464e:	4770      	bx	lr
        INCSRL_SendStall_Clear(pUSB);
   34650:	691a      	ldr	r2, [r3, #16]
   34652:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
   34656:	611a      	str	r2, [r3, #16]
        INCSRL_ClrDataTog_Set(pUSB);
   34658:	691a      	ldr	r2, [r3, #16]
   3465a:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
   3465e:	611a      	str	r2, [r3, #16]
   34660:	e7ee      	b.n	34640 <am_hal_usb_ep_clear_stall+0x58>
   34662:	bf00      	nop
   34664:	01ea9e06 	.word	0x01ea9e06
   34668:	e000e100 	.word	0xe000e100
   3466c:	400b0000 	.word	0x400b0000

00034670 <am_hal_usb_ep_init>:
    if (!AM_HAL_USB_CHK_HANDLE(pHandle))
   34670:	2800      	cmp	r0, #0
   34672:	f000 80a1 	beq.w	347b8 <am_hal_usb_ep_init+0x148>
{
   34676:	b470      	push	{r4, r5, r6}
    if (!AM_HAL_USB_CHK_HANDLE(pHandle))
   34678:	6804      	ldr	r4, [r0, #0]
   3467a:	4d53      	ldr	r5, [pc, #332]	@ (347c8 <am_hal_usb_ep_init+0x158>)
   3467c:	f024 447e 	bic.w	r4, r4, #4261412864	@ 0xfe000000
   34680:	42ac      	cmp	r4, r5
   34682:	d156      	bne.n	34732 <am_hal_usb_ep_init+0xc2>
    if (AM_HAL_USB_CHK_EP_NUM(ui8EpAddr))
   34684:	f001 057f 	and.w	r5, r1, #127	@ 0x7f
   34688:	2d05      	cmp	r5, #5
   3468a:	d855      	bhi.n	34738 <am_hal_usb_ep_init+0xc8>
    bool hspeed = POWER_HSMode(pUSB);
   3468c:	4c4f      	ldr	r4, [pc, #316]	@ (347cc <am_hal_usb_ep_init+0x15c>)
   3468e:	7864      	ldrb	r4, [r4, #1]
    if ((ui16MaxPacket > am_hal_usb_fifo_size(EP_FIFO_SZ_64)) && !hspeed)
   34690:	2b40      	cmp	r3, #64	@ 0x40
    bool hspeed = POWER_HSMode(pUSB);
   34692:	b2e4      	uxtb	r4, r4
    if ((ui16MaxPacket > am_hal_usb_fifo_size(EP_FIFO_SZ_64)) && !hspeed)
   34694:	d901      	bls.n	3469a <am_hal_usb_ep_init+0x2a>
   34696:	06e6      	lsls	r6, r4, #27
   34698:	d54e      	bpl.n	34738 <am_hal_usb_ep_init+0xc8>
    EP_INDEX_Set(pUSB, ui8EpNum);
   3469a:	4c4c      	ldr	r4, [pc, #304]	@ (347cc <am_hal_usb_ep_init+0x15c>)
   3469c:	68e6      	ldr	r6, [r4, #12]
   3469e:	f426 2670 	bic.w	r6, r6, #983040	@ 0xf0000
   346a2:	60e6      	str	r6, [r4, #12]
   346a4:	68e6      	ldr	r6, [r4, #12]
   346a6:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
   346aa:	60e6      	str	r6, [r4, #12]
    if (ui8EpNum == 0x0)
   346ac:	2d00      	cmp	r5, #0
   346ae:	d07b      	beq.n	347a8 <am_hal_usb_ep_init+0x138>
    switch ( ui8EpDir )
   346b0:	09c9      	lsrs	r1, r1, #7
    return (am_hal_usb_ep_xfer_type_e)(attr & AM_HAL_USB_EP_XFER_MASK);
   346b2:	f002 0203 	and.w	r2, r2, #3
            pState->epin_maxpackets[ui8EpNum - 1] = ui16MaxPacket;
   346b6:	eb00 0545 	add.w	r5, r0, r5, lsl #1
    switch ( ui8EpDir )
   346ba:	d140      	bne.n	3473e <am_hal_usb_ep_init+0xce>
            OUTMAXP_MaxPayload_Set(pUSB, ui16MaxPacket);
   346bc:	6961      	ldr	r1, [r4, #20]
   346be:	f36f 010a 	bfc	r1, #0, #11
   346c2:	6161      	str	r1, [r4, #20]
   346c4:	6961      	ldr	r1, [r4, #20]
   346c6:	4319      	orrs	r1, r3
   346c8:	6161      	str	r1, [r4, #20]
            if (am_hal_usb_ep_xfer_type(ui8EpAttr) == AM_HAL_USB_EP_XFER_ISOCHRONOUS)
   346ca:	2a01      	cmp	r2, #1
                OUTCSRU_ISO_Set(pUSB);
   346cc:	6962      	ldr	r2, [r4, #20]
            pState->epout_maxpackets[ui8EpNum - 1] = ui16MaxPacket;
   346ce:	f8a5 3062 	strh.w	r3, [r5, #98]	@ 0x62
                OUTCSRU_ISO_Set(pUSB);
   346d2:	bf0c      	ite	eq
   346d4:	f042 4280 	orreq.w	r2, r2, #1073741824	@ 0x40000000
                OUTCSRU_ISO_Clear(pUSB);
   346d8:	f022 4280 	bicne.w	r2, r2, #1073741824	@ 0x40000000
   346dc:	6162      	str	r2, [r4, #20]
            OUTCSRL_ClrDataTog_Set(pUSB);
   346de:	4a3b      	ldr	r2, [pc, #236]	@ (347cc <am_hal_usb_ep_init+0x15c>)
   346e0:	6951      	ldr	r1, [r2, #20]
   346e2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
   346e6:	6151      	str	r1, [r2, #20]
            if (OUTCSRL_OutPktRdy(pUSB))
   346e8:	6951      	ldr	r1, [r2, #20]
   346ea:	03c9      	lsls	r1, r1, #15
   346ec:	d503      	bpl.n	346f6 <am_hal_usb_ep_init+0x86>
                OUTCSRL_FlushFIFO_Set(pUSB);
   346ee:	6951      	ldr	r1, [r2, #20]
   346f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
   346f4:	6151      	str	r1, [r2, #20]
    while (tmp)
   346f6:	0919      	lsrs	r1, r3, #4
   346f8:	d004      	beq.n	34704 <am_hal_usb_ep_init+0x94>
   346fa:	fab1 f181 	clz	r1, r1
            OutFIFOsz_Set(pUSB, FIFO_SINGLE_PKTBUF, sz);
   346fe:	f1c1 0120 	rsb	r1, r1, #32
   34702:	0609      	lsls	r1, r1, #24
   34704:	4a31      	ldr	r2, [pc, #196]	@ (347cc <am_hal_usb_ep_init+0x15c>)
   34706:	6994      	ldr	r4, [r2, #24]
   34708:	f024 54f8 	bic.w	r4, r4, #520093696	@ 0x1f000000
   3470c:	6194      	str	r4, [r2, #24]
   3470e:	6994      	ldr	r4, [r2, #24]
   34710:	4321      	orrs	r1, r4
   34712:	6191      	str	r1, [r2, #24]
            OutFIFOadd_Set(pUSB, am_hal_usb_ep_fifo_addr(&pState->ui32Allocated, ui16MaxPacket));
   34714:	69d1      	ldr	r1, [r2, #28]
   34716:	f36f 411c 	bfc	r1, #16, #13
   3471a:	61d1      	str	r1, [r2, #28]
    uint32_t tmp = *ui32Allocated;
   3471c:	6d01      	ldr	r1, [r0, #80]	@ 0x50
     *ui32Allocated += ui16PktSize / 8;
   3471e:	eb01 03d3 	add.w	r3, r1, r3, lsr #3
   34722:	6503      	str	r3, [r0, #80]	@ 0x50
            OutFIFOadd_Set(pUSB, am_hal_usb_ep_fifo_addr(&pState->ui32Allocated, ui16MaxPacket));
   34724:	69d3      	ldr	r3, [r2, #28]
   34726:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   3472a:	61d3      	str	r3, [r2, #28]
        return AM_HAL_STATUS_SUCCESS;
   3472c:	2000      	movs	r0, #0
}
   3472e:	bc70      	pop	{r4, r5, r6}
   34730:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   34732:	2002      	movs	r0, #2
}
   34734:	bc70      	pop	{r4, r5, r6}
   34736:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   34738:	2006      	movs	r0, #6
}
   3473a:	bc70      	pop	{r4, r5, r6}
   3473c:	4770      	bx	lr
            INMAXP_MaxPayload_Set(pUSB, ui16MaxPacket);
   3473e:	6921      	ldr	r1, [r4, #16]
   34740:	f36f 010a 	bfc	r1, #0, #11
   34744:	6121      	str	r1, [r4, #16]
   34746:	6921      	ldr	r1, [r4, #16]
   34748:	4319      	orrs	r1, r3
   3474a:	6121      	str	r1, [r4, #16]
            if (am_hal_usb_ep_xfer_type(ui8EpAttr) == AM_HAL_USB_EP_XFER_ISOCHRONOUS)
   3474c:	2a01      	cmp	r2, #1
                INCSRU_ISO_Set(pUSB);
   3474e:	6922      	ldr	r2, [r4, #16]
            pState->epin_maxpackets[ui8EpNum - 1] = ui16MaxPacket;
   34750:	f8a5 3058 	strh.w	r3, [r5, #88]	@ 0x58
                INCSRU_ISO_Set(pUSB);
   34754:	bf0c      	ite	eq
   34756:	f042 4280 	orreq.w	r2, r2, #1073741824	@ 0x40000000
                INCSRU_ISO_Clear(pUSB);
   3475a:	f022 4280 	bicne.w	r2, r2, #1073741824	@ 0x40000000
   3475e:	6122      	str	r2, [r4, #16]
            INCSRL_ClrDataTog_Set(pUSB);
   34760:	4a1a      	ldr	r2, [pc, #104]	@ (347cc <am_hal_usb_ep_init+0x15c>)
   34762:	6911      	ldr	r1, [r2, #16]
   34764:	f441 0180 	orr.w	r1, r1, #4194304	@ 0x400000
   34768:	6111      	str	r1, [r2, #16]
            if (INCSRL_FIFONotEmpty(pUSB))
   3476a:	6911      	ldr	r1, [r2, #16]
   3476c:	038c      	lsls	r4, r1, #14
   3476e:	d425      	bmi.n	347bc <am_hal_usb_ep_init+0x14c>
    while (tmp)
   34770:	091a      	lsrs	r2, r3, #4
   34772:	d005      	beq.n	34780 <am_hal_usb_ep_init+0x110>
   34774:	fab2 f282 	clz	r2, r2
            InFIFOsz_Set(pUSB, FIFO_SINGLE_PKTBUF, sz);
   34778:	f1c2 0220 	rsb	r2, r2, #32
   3477c:	b2d2      	uxtb	r2, r2
   3477e:	0412      	lsls	r2, r2, #16
   34780:	4912      	ldr	r1, [pc, #72]	@ (347cc <am_hal_usb_ep_init+0x15c>)
   34782:	698c      	ldr	r4, [r1, #24]
   34784:	f424 14f8 	bic.w	r4, r4, #2031616	@ 0x1f0000
   34788:	618c      	str	r4, [r1, #24]
   3478a:	698c      	ldr	r4, [r1, #24]
   3478c:	4322      	orrs	r2, r4
   3478e:	618a      	str	r2, [r1, #24]
            InFIFOadd_Set(pUSB, am_hal_usb_ep_fifo_addr(&pState->ui32Allocated, ui16MaxPacket));
   34790:	69ca      	ldr	r2, [r1, #28]
   34792:	f36f 020c 	bfc	r2, #0, #13
   34796:	61ca      	str	r2, [r1, #28]
    uint32_t tmp = *ui32Allocated;
   34798:	6d02      	ldr	r2, [r0, #80]	@ 0x50
     *ui32Allocated += ui16PktSize / 8;
   3479a:	eb02 03d3 	add.w	r3, r2, r3, lsr #3
   3479e:	6503      	str	r3, [r0, #80]	@ 0x50
            InFIFOadd_Set(pUSB, am_hal_usb_ep_fifo_addr(&pState->ui32Allocated, ui16MaxPacket));
   347a0:	69cb      	ldr	r3, [r1, #28]
   347a2:	4313      	orrs	r3, r2
   347a4:	61cb      	str	r3, [r1, #28]
            break;
   347a6:	e7c1      	b.n	3472c <am_hal_usb_ep_init+0xbc>
        INTRINE_Enable(pUSB, 0x1 << 0x0);
   347a8:	88e2      	ldrh	r2, [r4, #6]
   347aa:	b292      	uxth	r2, r2
   347ac:	f042 0201 	orr.w	r2, r2, #1
   347b0:	80e2      	strh	r2, [r4, #6]
        pState->ep0_maxpacket = ui16MaxPacket;
   347b2:	f8a0 3058 	strh.w	r3, [r0, #88]	@ 0x58
        return AM_HAL_STATUS_SUCCESS;
   347b6:	e7b9      	b.n	3472c <am_hal_usb_ep_init+0xbc>
        return AM_HAL_STATUS_INVALID_HANDLE;
   347b8:	2002      	movs	r0, #2
}
   347ba:	4770      	bx	lr
                INCSRL_FlushFIFO_Set(pUSB);
   347bc:	6911      	ldr	r1, [r2, #16]
   347be:	f441 2100 	orr.w	r1, r1, #524288	@ 0x80000
   347c2:	6111      	str	r1, [r2, #16]
   347c4:	e7d4      	b.n	34770 <am_hal_usb_ep_init+0x100>
   347c6:	bf00      	nop
   347c8:	01ea9e06 	.word	0x01ea9e06
   347cc:	400b0000 	.word	0x400b0000

000347d0 <am_hal_usb_ep_xfer>:
    if (!AM_HAL_USB_CHK_HANDLE(pHandle))
   347d0:	2800      	cmp	r0, #0
   347d2:	f000 80e5 	beq.w	349a0 <am_hal_usb_ep_xfer+0x1d0>
{
   347d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!AM_HAL_USB_CHK_HANDLE(pHandle))
   347da:	6804      	ldr	r4, [r0, #0]
   347dc:	f024 4c7e 	bic.w	ip, r4, #4261412864	@ 0xfe000000
   347e0:	4cbd      	ldr	r4, [pc, #756]	@ (34ad8 <am_hal_usb_ep_xfer+0x308>)
   347e2:	45a4      	cmp	ip, r4
   347e4:	d134      	bne.n	34850 <am_hal_usb_ep_xfer+0x80>
    if (AM_HAL_USB_CHK_EP_NUM(ui8EpAddr))
   347e6:	f001 047f 	and.w	r4, r1, #127	@ 0x7f
   347ea:	2c05      	cmp	r4, #5
   347ec:	f200 8083 	bhi.w	348f6 <am_hal_usb_ep_xfer+0x126>
    return (addr & AM_HAL_USB_EP_DIR_IN_MASK) ? AM_HAL_USB_EP_DIR_IN : AM_HAL_USB_EP_DIR_OUT;
   347f0:	09c9      	lsrs	r1, r1, #7
    if (ui8EpNum == AM_HAL_USB_EP0_NUMBER)
   347f2:	bb84      	cbnz	r4, 34856 <am_hal_usb_ep_xfer+0x86>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   347f4:	4fb9      	ldr	r7, [pc, #740]	@ (34adc <am_hal_usb_ep_xfer+0x30c>)
   347f6:	f04f 6c00 	mov.w	ip, #134217728	@ 0x8000000
   347fa:	f8c7 c080 	str.w	ip, [r7, #128]	@ 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   347fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   34802:	f3bf 8f6f 	isb	sy
    EP_INDEX_Set(pUSB, ui8EpNum);
   34806:	4cb6      	ldr	r4, [pc, #728]	@ (34ae0 <am_hal_usb_ep_xfer+0x310>)
    if (pState->ep0_xfer.flags.busy == 0x1)
   34808:	f890 5078 	ldrb.w	r5, [r0, #120]	@ 0x78
    EP_INDEX_Set(pUSB, ui8EpNum);
   3480c:	68e6      	ldr	r6, [r4, #12]
   3480e:	f426 2670 	bic.w	r6, r6, #983040	@ 0xf0000
   34812:	60e6      	str	r6, [r4, #12]
   34814:	68e6      	ldr	r6, [r4, #12]
   34816:	60e6      	str	r6, [r4, #12]
    if (pState->ep0_xfer.flags.busy == 0x1)
   34818:	07ee      	lsls	r6, r5, #31
   3481a:	f100 8151 	bmi.w	34ac0 <am_hal_usb_ep_xfer+0x2f0>
        pState->ep0_xfer.flags.busy = 0x1;
   3481e:	f025 0605 	bic.w	r6, r5, #5
   34822:	008d      	lsls	r5, r1, #2
   34824:	f045 0501 	orr.w	r5, r5, #1
   34828:	4335      	orrs	r5, r6
   3482a:	f880 5078 	strb.w	r5, [r0, #120]	@ 0x78
    switch ( pState->eEP0State )
   3482e:	f890 5056 	ldrb.w	r5, [r0, #86]	@ 0x56
    maxpacket = pState->ep0_maxpacket;
   34832:	f8b0 6058 	ldrh.w	r6, [r0, #88]	@ 0x58
    pState->ep0_xfer.buf = pui8Buf;
   34836:	6702      	str	r2, [r0, #112]	@ 0x70
    pState->ep0_xfer.len = ui16Len;
   34838:	f8a0 3074 	strh.w	r3, [r0, #116]	@ 0x74
    switch ( pState->eEP0State )
   3483c:	2d00      	cmp	r5, #0
   3483e:	f000 80a4 	beq.w	3498a <am_hal_usb_ep_xfer+0x1ba>
   34842:	2d01      	cmp	r5, #1
   34844:	f000 80ae 	beq.w	349a4 <am_hal_usb_ep_xfer+0x1d4>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   34848:	f8c7 c000 	str.w	ip, [r7]
                return AM_HAL_STATUS_FAIL;
   3484c:	2001      	movs	r0, #1
   3484e:	e000      	b.n	34852 <am_hal_usb_ep_xfer+0x82>
        return AM_HAL_STATUS_INVALID_HANDLE;
   34850:	2002      	movs	r0, #2
}
   34852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   34856:	f8df a284 	ldr.w	sl, [pc, #644]	@ 34adc <am_hal_usb_ep_xfer+0x30c>
   3485a:	f04f 6b00 	mov.w	fp, #134217728	@ 0x8000000
   3485e:	f8ca b080 	str.w	fp, [sl, #128]	@ 0x80
    am_hal_usb_ep_xfer_t *pXfer = &pState->ep_xfers[ui8EpNum - 1][ui8EpDir];
   34862:	1e67      	subs	r7, r4, #1
  __ASM volatile ("dsb 0xF":::"memory");
   34864:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   34868:	f3bf 8f6f 	isb	sy
    EP_INDEX_Set(pUSB, ui8EpNum);
   3486c:	4d9c      	ldr	r5, [pc, #624]	@ (34ae0 <am_hal_usb_ep_xfer+0x310>)
   3486e:	f8d5 c00c 	ldr.w	ip, [r5, #12]
    if (pXfer->flags.busy == 0x1)
   34872:	eb07 0647 	add.w	r6, r7, r7, lsl #1
    EP_INDEX_Set(pUSB, ui8EpNum);
   34876:	f42c 2c70 	bic.w	ip, ip, #983040	@ 0xf0000
   3487a:	f8c5 c00c 	str.w	ip, [r5, #12]
    if (pXfer->flags.busy == 0x1)
   3487e:	00f6      	lsls	r6, r6, #3
   34880:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
    EP_INDEX_Set(pUSB, ui8EpNum);
   34884:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    if (pXfer->flags.busy == 0x1)
   34888:	eb06 0c8c 	add.w	ip, r6, ip, lsl #2
   3488c:	4484      	add	ip, r0
    EP_INDEX_Set(pUSB, ui8EpNum);
   3488e:	ea4e 4e04 	orr.w	lr, lr, r4, lsl #16
   34892:	f8c5 e00c 	str.w	lr, [r5, #12]
    if (pXfer->flags.busy == 0x1)
   34896:	f89c e084 	ldrb.w	lr, [ip, #132]	@ 0x84
   3489a:	f01e 0901 	ands.w	r9, lr, #1
   3489e:	ea4f 0847 	mov.w	r8, r7, lsl #1
   348a2:	f040 8109 	bne.w	34ab8 <am_hal_usb_ep_xfer+0x2e8>
        pXfer->flags.busy = 0x1;
   348a6:	ea4f 0a81 	mov.w	sl, r1, lsl #2
   348aa:	f02e 0e05 	bic.w	lr, lr, #5
   348ae:	f04a 0a01 	orr.w	sl, sl, #1
   348b2:	ea4a 0e0e 	orr.w	lr, sl, lr
   348b6:	f88c e084 	strb.w	lr, [ip, #132]	@ 0x84
            INTRINE_Enable(pUSB, 0x1 << ui8EpNum);
   348ba:	f04f 0c01 	mov.w	ip, #1
   348be:	fa0c fc04 	lsl.w	ip, ip, r4
    switch (ui8EpDir)
   348c2:	b9d9      	cbnz	r1, 348fc <am_hal_usb_ep_xfer+0x12c>
            pXfer->len = ui16Len;
   348c4:	4649      	mov	r1, r9
   348c6:	f363 010f 	bfi	r1, r3, #0, #16
   348ca:	f363 411f 	bfi	r1, r3, #16, #16
            OUTCSRL_OutPktRdy_Clear(pUSB);
   348ce:	696b      	ldr	r3, [r5, #20]
            pXfer->buf = pui8Buf;
   348d0:	1984      	adds	r4, r0, r6
            OUTCSRL_OutPktRdy_Clear(pUSB);
   348d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
            pXfer->buf = pui8Buf;
   348d6:	67e2      	str	r2, [r4, #124]	@ 0x7c
            pXfer->len = ui16Len;
   348d8:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
            OUTCSRL_OutPktRdy_Clear(pUSB);
   348dc:	616b      	str	r3, [r5, #20]
            INTROUTE_Enable(pUSB, 0x1 << ui8EpNum);
   348de:	7a2b      	ldrb	r3, [r5, #8]
   348e0:	ea43 030c 	orr.w	r3, r3, ip
   348e4:	b2db      	uxtb	r3, r3
   348e6:	722b      	strb	r3, [r5, #8]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   348e8:	4b7c      	ldr	r3, [pc, #496]	@ (34adc <am_hal_usb_ep_xfer+0x30c>)
   348ea:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
   348ee:	601a      	str	r2, [r3, #0]
    return AM_HAL_STATUS_SUCCESS;
   348f0:	2000      	movs	r0, #0
}
   348f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return AM_HAL_STATUS_INVALID_ARG;
   348f6:	2006      	movs	r0, #6
}
   348f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            maxpacket  = pState->epin_maxpackets[ui8EpNum - 1];
   348fc:	eb00 0144 	add.w	r1, r0, r4, lsl #1
   34900:	f8b1 9058 	ldrh.w	r9, [r1, #88]	@ 0x58
            if (ui16Len < maxpacket)
   34904:	454b      	cmp	r3, r9
   34906:	f080 8097 	bcs.w	34a38 <am_hal_usb_ep_xfer+0x268>
    for (int i = 0; i < Write32bitCount; i++)
   3490a:	089e      	lsrs	r6, r3, #2
   3490c:	f003 0903 	and.w	r9, r3, #3
   34910:	d00b      	beq.n	3492a <am_hal_usb_ep_xfer+0x15a>
        *FIFOx_ADDR(pUSB, ui8EpNum) = *((uint32_t *)pucBuf + i);
   34912:	4974      	ldr	r1, [pc, #464]	@ (34ae4 <am_hal_usb_ep_xfer+0x314>)
   34914:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   34918:	1f11      	subs	r1, r2, #4
   3491a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
   3491e:	f851 5f04 	ldr.w	r5, [r1, #4]!
   34922:	f8ce 5000 	str.w	r5, [lr]
    for (int i = 0; i < Write32bitCount; i++)
   34926:	428e      	cmp	r6, r1
   34928:	d1f9      	bne.n	3491e <am_hal_usb_ep_xfer+0x14e>
    if (Write32bitRemain)
   3492a:	f1b9 0f00 	cmp.w	r9, #0
   3492e:	d013      	beq.n	34958 <am_hal_usb_ep_xfer+0x188>
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   34930:	f023 0103 	bic.w	r1, r3, #3
        volatile uint8_t *pui8FIFO = ((volatile uint8_t *)FIFOx_ADDR(pUSB, ui8EpNum));
   34934:	4d6b      	ldr	r5, [pc, #428]	@ (34ae4 <am_hal_usb_ep_xfer+0x314>)
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   34936:	5c56      	ldrb	r6, [r2, r1]
        volatile uint8_t *pui8FIFO = ((volatile uint8_t *)FIFOx_ADDR(pUSB, ui8EpNum));
   34938:	b224      	sxth	r4, r4
        for (int i = 0; i < Write32bitRemain; i++)
   3493a:	f1b9 0f01 	cmp.w	r9, #1
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   3493e:	f805 6024 	strb.w	r6, [r5, r4, lsl #2]
        for (int i = 0; i < Write32bitRemain; i++)
   34942:	d009      	beq.n	34958 <am_hal_usb_ep_xfer+0x188>
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   34944:	4411      	add	r1, r2
        for (int i = 0; i < Write32bitRemain; i++)
   34946:	f1b9 0f03 	cmp.w	r9, #3
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   3494a:	784e      	ldrb	r6, [r1, #1]
   3494c:	f805 6024 	strb.w	r6, [r5, r4, lsl #2]
        for (int i = 0; i < Write32bitRemain; i++)
   34950:	d102      	bne.n	34958 <am_hal_usb_ep_xfer+0x188>
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   34952:	7889      	ldrb	r1, [r1, #2]
   34954:	f805 1024 	strb.w	r1, [r5, r4, lsl #2]
                pXfer->remaining = 0x0;
   34958:	eb08 0107 	add.w	r1, r8, r7
   3495c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   34960:	2400      	movs	r4, #0
   34962:	f8a1 408e 	strh.w	r4, [r1, #142]	@ 0x8e
            pXfer->buf = pui8Buf;
   34966:	44b8      	add	r8, r7
            INCSRL_InPktRdy_Set(pUSB);
   34968:	495d      	ldr	r1, [pc, #372]	@ (34ae0 <am_hal_usb_ep_xfer+0x310>)
            pXfer->buf = pui8Buf;
   3496a:	eb00 08c8 	add.w	r8, r0, r8, lsl #3
            pXfer->len = ui16Len;
   3496e:	f8a8 308c 	strh.w	r3, [r8, #140]	@ 0x8c
            INCSRL_InPktRdy_Set(pUSB);
   34972:	690b      	ldr	r3, [r1, #16]
            pXfer->buf = pui8Buf;
   34974:	f8c8 2088 	str.w	r2, [r8, #136]	@ 0x88
            INCSRL_InPktRdy_Set(pUSB);
   34978:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
   3497c:	610b      	str	r3, [r1, #16]
            INTRINE_Enable(pUSB, 0x1 << ui8EpNum);
   3497e:	88cb      	ldrh	r3, [r1, #6]
   34980:	ea4c 0303 	orr.w	r3, ip, r3
   34984:	b29b      	uxth	r3, r3
   34986:	80cb      	strh	r3, [r1, #6]
            break;
   34988:	e7ae      	b.n	348e8 <am_hal_usb_ep_xfer+0x118>
            if ( (pState->bPendingInEndData || pState->bPendingOutEndData) && (ui16Len == 0) )
   3498a:	f8b0 2108 	ldrh.w	r2, [r0, #264]	@ 0x108
   3498e:	b112      	cbz	r2, 34996 <am_hal_usb_ep_xfer+0x1c6>
   34990:	2b00      	cmp	r3, #0
   34992:	f000 808b 	beq.w	34aac <am_hal_usb_ep_xfer+0x2dc>
   34996:	4b51      	ldr	r3, [pc, #324]	@ (34adc <am_hal_usb_ep_xfer+0x30c>)
   34998:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
   3499c:	601a      	str	r2, [r3, #0]
}
   3499e:	e755      	b.n	3484c <am_hal_usb_ep_xfer+0x7c>
        return AM_HAL_STATUS_INVALID_HANDLE;
   349a0:	2002      	movs	r0, #2
}
   349a2:	4770      	bx	lr
            if (ui16Len == 0x0)
   349a4:	b95b      	cbnz	r3, 349be <am_hal_usb_ep_xfer+0x1ee>
                if ( pState->bPendingOutEndData || pState->bPendingInEndData )
   349a6:	f8b0 2108 	ldrh.w	r2, [r0, #264]	@ 0x108
   349aa:	2a00      	cmp	r2, #0
   349ac:	d17e      	bne.n	34aac <am_hal_usb_ep_xfer+0x2dc>
                    CSR0_ServicedOutPktRdyAndDataEnd_Set(pUSB);
   349ae:	6923      	ldr	r3, [r4, #16]
                    pState->eEP0State =
   349b0:	3104      	adds	r1, #4
                    CSR0_ServicedOutPktRdyAndDataEnd_Set(pUSB);
   349b2:	f443 0390 	orr.w	r3, r3, #4718592	@ 0x480000
   349b6:	6123      	str	r3, [r4, #16]
                    pState->eEP0State =
   349b8:	f880 1056 	strb.w	r1, [r0, #86]	@ 0x56
   349bc:	e794      	b.n	348e8 <am_hal_usb_ep_xfer+0x118>
                CSR0_ServicedOutPktRdy_Set(pUSB);
   349be:	6925      	ldr	r5, [r4, #16]
   349c0:	f445 0580 	orr.w	r5, r5, #4194304	@ 0x400000
   349c4:	6125      	str	r5, [r4, #16]
                if (CSR0_SetupEnd(pUSB))
   349c6:	6925      	ldr	r5, [r4, #16]
   349c8:	02ed      	lsls	r5, r5, #11
   349ca:	d503      	bpl.n	349d4 <am_hal_usb_ep_xfer+0x204>
                    CSR0_ServicedSetupEnd_Set(pUSB);
   349cc:	6925      	ldr	r5, [r4, #16]
   349ce:	f445 0500 	orr.w	r5, r5, #8388608	@ 0x800000
   349d2:	6125      	str	r5, [r4, #16]
                switch ( ui8EpDir )
   349d4:	2900      	cmp	r1, #0
   349d6:	d076      	beq.n	34ac6 <am_hal_usb_ep_xfer+0x2f6>
                        if (ui16Len < maxpacket)
   349d8:	42b3      	cmp	r3, r6
                        pState->bPendingOutEndData = true;
   349da:	f880 1109 	strb.w	r1, [r0, #265]	@ 0x109
                        if (ui16Len < maxpacket)
   349de:	f080 8083 	bcs.w	34ae8 <am_hal_usb_ep_xfer+0x318>
                            pState->ep0_xfer.remaining = 0x0;
   349e2:	2400      	movs	r4, #0
                            pState->eEP0State = AM_HAL_USB_EP0_STATE_STATUS_TX;
   349e4:	2105      	movs	r1, #5
                            pState->ep0_xfer.remaining = 0x0;
   349e6:	f8a0 4076 	strh.w	r4, [r0, #118]	@ 0x76
    for (int i = 0; i < Write32bitCount; i++)
   349ea:	089c      	lsrs	r4, r3, #2
                            pState->eEP0State = AM_HAL_USB_EP0_STATE_STATUS_TX;
   349ec:	f880 1056 	strb.w	r1, [r0, #86]	@ 0x56
    Write32bitRemain  = ui32Count - Write32bitCount * sizeof(uint32_t);
   349f0:	f003 0603 	and.w	r6, r3, #3
    for (int i = 0; i < Write32bitCount; i++)
   349f4:	d008      	beq.n	34a08 <am_hal_usb_ep_xfer+0x238>
   349f6:	1f11      	subs	r1, r2, #4
        *FIFOx_ADDR(pUSB, ui8EpNum) = *((uint32_t *)pucBuf + i);
   349f8:	4d39      	ldr	r5, [pc, #228]	@ (34ae0 <am_hal_usb_ep_xfer+0x310>)
   349fa:	eb01 0484 	add.w	r4, r1, r4, lsl #2
   349fe:	f851 0f04 	ldr.w	r0, [r1, #4]!
   34a02:	6228      	str	r0, [r5, #32]
    for (int i = 0; i < Write32bitCount; i++)
   34a04:	42a1      	cmp	r1, r4
   34a06:	d1fa      	bne.n	349fe <am_hal_usb_ep_xfer+0x22e>
    if (Write32bitRemain)
   34a08:	b186      	cbz	r6, 34a2c <am_hal_usb_ep_xfer+0x25c>
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   34a0a:	f023 0303 	bic.w	r3, r3, #3
   34a0e:	4934      	ldr	r1, [pc, #208]	@ (34ae0 <am_hal_usb_ep_xfer+0x310>)
   34a10:	5cd0      	ldrb	r0, [r2, r3]
   34a12:	f881 0020 	strb.w	r0, [r1, #32]
        for (int i = 0; i < Write32bitRemain; i++)
   34a16:	2e01      	cmp	r6, #1
   34a18:	d008      	beq.n	34a2c <am_hal_usb_ep_xfer+0x25c>
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   34a1a:	4413      	add	r3, r2
        for (int i = 0; i < Write32bitRemain; i++)
   34a1c:	2e03      	cmp	r6, #3
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   34a1e:	785a      	ldrb	r2, [r3, #1]
   34a20:	f881 2020 	strb.w	r2, [r1, #32]
        for (int i = 0; i < Write32bitRemain; i++)
   34a24:	d102      	bne.n	34a2c <am_hal_usb_ep_xfer+0x25c>
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   34a26:	789b      	ldrb	r3, [r3, #2]
   34a28:	f881 3020 	strb.w	r3, [r1, #32]
                            CSR0_InPktRdyAndDataEnd_Set(pUSB);
   34a2c:	4a2c      	ldr	r2, [pc, #176]	@ (34ae0 <am_hal_usb_ep_xfer+0x310>)
   34a2e:	6913      	ldr	r3, [r2, #16]
   34a30:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
   34a34:	6113      	str	r3, [r2, #16]
   34a36:	e757      	b.n	348e8 <am_hal_usb_ep_xfer+0x118>
    for (int i = 0; i < Write32bitCount; i++)
   34a38:	ea5f 0699 	movs.w	r6, r9, lsr #2
   34a3c:	f009 0a03 	and.w	sl, r9, #3
   34a40:	d00b      	beq.n	34a5a <am_hal_usb_ep_xfer+0x28a>
        *FIFOx_ADDR(pUSB, ui8EpNum) = *((uint32_t *)pucBuf + i);
   34a42:	4928      	ldr	r1, [pc, #160]	@ (34ae4 <am_hal_usb_ep_xfer+0x314>)
   34a44:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   34a48:	1f11      	subs	r1, r2, #4
   34a4a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
   34a4e:	f851 5f04 	ldr.w	r5, [r1, #4]!
   34a52:	f8ce 5000 	str.w	r5, [lr]
    for (int i = 0; i < Write32bitCount; i++)
   34a56:	428e      	cmp	r6, r1
   34a58:	d1f9      	bne.n	34a4e <am_hal_usb_ep_xfer+0x27e>
    if (Write32bitRemain)
   34a5a:	f1ba 0f00 	cmp.w	sl, #0
   34a5e:	d013      	beq.n	34a88 <am_hal_usb_ep_xfer+0x2b8>
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   34a60:	f029 0103 	bic.w	r1, r9, #3
        volatile uint8_t *pui8FIFO = ((volatile uint8_t *)FIFOx_ADDR(pUSB, ui8EpNum));
   34a64:	4d1f      	ldr	r5, [pc, #124]	@ (34ae4 <am_hal_usb_ep_xfer+0x314>)
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   34a66:	5c56      	ldrb	r6, [r2, r1]
        volatile uint8_t *pui8FIFO = ((volatile uint8_t *)FIFOx_ADDR(pUSB, ui8EpNum));
   34a68:	b224      	sxth	r4, r4
        for (int i = 0; i < Write32bitRemain; i++)
   34a6a:	f1ba 0f01 	cmp.w	sl, #1
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   34a6e:	f805 6024 	strb.w	r6, [r5, r4, lsl #2]
        for (int i = 0; i < Write32bitRemain; i++)
   34a72:	d009      	beq.n	34a88 <am_hal_usb_ep_xfer+0x2b8>
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   34a74:	4411      	add	r1, r2
        for (int i = 0; i < Write32bitRemain; i++)
   34a76:	f1ba 0f03 	cmp.w	sl, #3
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   34a7a:	784e      	ldrb	r6, [r1, #1]
   34a7c:	f805 6024 	strb.w	r6, [r5, r4, lsl #2]
        for (int i = 0; i < Write32bitRemain; i++)
   34a80:	d102      	bne.n	34a88 <am_hal_usb_ep_xfer+0x2b8>
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   34a82:	7889      	ldrb	r1, [r1, #2]
   34a84:	f805 1024 	strb.w	r1, [r5, r4, lsl #2]
                pXfer->remaining = ui16Len - maxpacket;
   34a88:	eb08 0107 	add.w	r1, r8, r7
   34a8c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   34a90:	eba3 0409 	sub.w	r4, r3, r9
            if (ui16Len == maxpacket)
   34a94:	454b      	cmp	r3, r9
                pXfer->remaining = ui16Len - maxpacket;
   34a96:	f8a1 408e 	strh.w	r4, [r1, #142]	@ 0x8e
            if (ui16Len == maxpacket)
   34a9a:	f47f af64 	bne.w	34966 <am_hal_usb_ep_xfer+0x196>
                pXfer->flags.zlp = 1;
   34a9e:	f891 4090 	ldrb.w	r4, [r1, #144]	@ 0x90
   34aa2:	f044 0402 	orr.w	r4, r4, #2
   34aa6:	f881 4090 	strb.w	r4, [r1, #144]	@ 0x90
   34aaa:	e75c      	b.n	34966 <am_hal_usb_ep_xfer+0x196>
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   34aac:	6703      	str	r3, [r0, #112]	@ 0x70
   34aae:	6743      	str	r3, [r0, #116]	@ 0x74
   34ab0:	6783      	str	r3, [r0, #120]	@ 0x78
                    pState->bPendingInEndData  = false;
   34ab2:	f8a0 3108 	strh.w	r3, [r0, #264]	@ 0x108
   34ab6:	e717      	b.n	348e8 <am_hal_usb_ep_xfer+0x118>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   34ab8:	f8ca b000 	str.w	fp, [sl]
        return status;
   34abc:	2003      	movs	r0, #3
   34abe:	e6c8      	b.n	34852 <am_hal_usb_ep_xfer+0x82>
   34ac0:	f8c7 c000 	str.w	ip, [r7]
}
   34ac4:	e7fa      	b.n	34abc <am_hal_usb_ep_xfer+0x2ec>
                        pState->bPendingInEndData = true;
   34ac6:	2101      	movs	r1, #1
                        pState->eEP0State = AM_HAL_USB_EP0_STATE_DATA_RX;
   34ac8:	2202      	movs	r2, #2
                        pState->bPendingInEndData = true;
   34aca:	f880 1108 	strb.w	r1, [r0, #264]	@ 0x108
                        pState->ep0_xfer.remaining = ui16Len;
   34ace:	f8a0 3076 	strh.w	r3, [r0, #118]	@ 0x76
                        pState->eEP0State = AM_HAL_USB_EP0_STATE_DATA_RX;
   34ad2:	f880 2056 	strb.w	r2, [r0, #86]	@ 0x56
                        break;
   34ad6:	e707      	b.n	348e8 <am_hal_usb_ep_xfer+0x118>
   34ad8:	01ea9e06 	.word	0x01ea9e06
   34adc:	e000e100 	.word	0xe000e100
   34ae0:	400b0000 	.word	0x400b0000
   34ae4:	400b0020 	.word	0x400b0020
                            pState->eEP0State = AM_HAL_USB_EP0_STATE_DATA_TX;
   34ae8:	2103      	movs	r1, #3
                            pState->ep0_xfer.remaining = ui16Len - maxpacket;
   34aea:	1b9b      	subs	r3, r3, r6
   34aec:	f8a0 3076 	strh.w	r3, [r0, #118]	@ 0x76
                            pState->eEP0State = AM_HAL_USB_EP0_STATE_DATA_TX;
   34af0:	f880 1056 	strb.w	r1, [r0, #86]	@ 0x56
    for (int i = 0; i < Write32bitCount; i++)
   34af4:	08b0      	lsrs	r0, r6, #2
   34af6:	ea06 0501 	and.w	r5, r6, r1
   34afa:	d008      	beq.n	34b0e <am_hal_usb_ep_xfer+0x33e>
   34afc:	1f13      	subs	r3, r2, #4
        *FIFOx_ADDR(pUSB, ui8EpNum) = *((uint32_t *)pucBuf + i);
   34afe:	4c10      	ldr	r4, [pc, #64]	@ (34b40 <am_hal_usb_ep_xfer+0x370>)
   34b00:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   34b04:	f853 1f04 	ldr.w	r1, [r3, #4]!
   34b08:	6221      	str	r1, [r4, #32]
    for (int i = 0; i < Write32bitCount; i++)
   34b0a:	4298      	cmp	r0, r3
   34b0c:	d1fa      	bne.n	34b04 <am_hal_usb_ep_xfer+0x334>
    if (Write32bitRemain)
   34b0e:	b185      	cbz	r5, 34b32 <am_hal_usb_ep_xfer+0x362>
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   34b10:	f026 0603 	bic.w	r6, r6, #3
   34b14:	4b0a      	ldr	r3, [pc, #40]	@ (34b40 <am_hal_usb_ep_xfer+0x370>)
   34b16:	5d91      	ldrb	r1, [r2, r6]
   34b18:	f883 1020 	strb.w	r1, [r3, #32]
        for (int i = 0; i < Write32bitRemain; i++)
   34b1c:	2d01      	cmp	r5, #1
   34b1e:	d008      	beq.n	34b32 <am_hal_usb_ep_xfer+0x362>
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   34b20:	4416      	add	r6, r2
        for (int i = 0; i < Write32bitRemain; i++)
   34b22:	2d03      	cmp	r5, #3
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   34b24:	7872      	ldrb	r2, [r6, #1]
   34b26:	f883 2020 	strb.w	r2, [r3, #32]
        for (int i = 0; i < Write32bitRemain; i++)
   34b2a:	d102      	bne.n	34b32 <am_hal_usb_ep_xfer+0x362>
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   34b2c:	78b2      	ldrb	r2, [r6, #2]
   34b2e:	f883 2020 	strb.w	r2, [r3, #32]
                            CSR0_InPktRdy_Set(pUSB);
   34b32:	4a03      	ldr	r2, [pc, #12]	@ (34b40 <am_hal_usb_ep_xfer+0x370>)
   34b34:	6913      	ldr	r3, [r2, #16]
   34b36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
   34b3a:	6113      	str	r3, [r2, #16]
   34b3c:	e6d4      	b.n	348e8 <am_hal_usb_ep_xfer+0x118>
   34b3e:	bf00      	nop
   34b40:	400b0000 	.word	0x400b0000

00034b44 <am_hal_usb_intr_status_get>:
    if (!AM_HAL_USB_CHK_HANDLE(pHandle))
   34b44:	b1d8      	cbz	r0, 34b7e <am_hal_usb_intr_status_get+0x3a>
   34b46:	6800      	ldr	r0, [r0, #0]
{
   34b48:	b410      	push	{r4}
    if (!AM_HAL_USB_CHK_HANDLE(pHandle))
   34b4a:	4c0e      	ldr	r4, [pc, #56]	@ (34b84 <am_hal_usb_intr_status_get+0x40>)
   34b4c:	f020 407e 	bic.w	r0, r0, #4261412864	@ 0xfe000000
   34b50:	42a0      	cmp	r0, r4
   34b52:	d110      	bne.n	34b76 <am_hal_usb_intr_status_get+0x32>
   *ui32IntrUsbStatus = INTRUSB_Get(pUSB);
   34b54:	4c0c      	ldr	r4, [pc, #48]	@ (34b88 <am_hal_usb_intr_status_get+0x44>)
   34b56:	7aa0      	ldrb	r0, [r4, #10]
   34b58:	f000 000f 	and.w	r0, r0, #15
   34b5c:	6008      	str	r0, [r1, #0]
   *ui32IntrInStatus  = INTRIN_Get(pUSB);
   34b5e:	8861      	ldrh	r1, [r4, #2]
   34b60:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
   34b64:	6011      	str	r1, [r2, #0]
   *ui32IntrOutStatus = INTROUT_Get(pUSB);
   34b66:	7922      	ldrb	r2, [r4, #4]
}
   34b68:	f85d 4b04 	ldr.w	r4, [sp], #4
   *ui32IntrOutStatus = INTROUT_Get(pUSB);
   34b6c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
   return AM_HAL_STATUS_SUCCESS;
   34b70:	2000      	movs	r0, #0
   *ui32IntrOutStatus = INTROUT_Get(pUSB);
   34b72:	601a      	str	r2, [r3, #0]
}
   34b74:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   34b76:	2002      	movs	r0, #2
}
   34b78:	f85d 4b04 	ldr.w	r4, [sp], #4
   34b7c:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   34b7e:	2002      	movs	r0, #2
}
   34b80:	4770      	bx	lr
   34b82:	bf00      	nop
   34b84:	01ea9e06 	.word	0x01ea9e06
   34b88:	400b0000 	.word	0x400b0000

00034b8c <am_hal_usb_intr_usb_enable>:
    if (!AM_HAL_USB_CHK_HANDLE(pHandle))
   34b8c:	b170      	cbz	r0, 34bac <am_hal_usb_intr_usb_enable+0x20>
   34b8e:	6803      	ldr	r3, [r0, #0]
   34b90:	4a08      	ldr	r2, [pc, #32]	@ (34bb4 <am_hal_usb_intr_usb_enable+0x28>)
   34b92:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   34b96:	4293      	cmp	r3, r2
   34b98:	d108      	bne.n	34bac <am_hal_usb_intr_usb_enable+0x20>
    if (AM_HAL_USB_CHK_USB(ui32IntMask))
   34b9a:	290f      	cmp	r1, #15
   34b9c:	d808      	bhi.n	34bb0 <am_hal_usb_intr_usb_enable+0x24>
    INTRUSBE_Enable(pUSB, ui32IntMask);
   34b9e:	4a06      	ldr	r2, [pc, #24]	@ (34bb8 <am_hal_usb_intr_usb_enable+0x2c>)
   34ba0:	7ad3      	ldrb	r3, [r2, #11]
   34ba2:	430b      	orrs	r3, r1
   34ba4:	b2db      	uxtb	r3, r3
    return AM_HAL_STATUS_SUCCESS;
   34ba6:	2000      	movs	r0, #0
    INTRUSBE_Enable(pUSB, ui32IntMask);
   34ba8:	72d3      	strb	r3, [r2, #11]
    return AM_HAL_STATUS_SUCCESS;
   34baa:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   34bac:	2002      	movs	r0, #2
   34bae:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   34bb0:	2006      	movs	r0, #6
}
   34bb2:	4770      	bx	lr
   34bb4:	01ea9e06 	.word	0x01ea9e06
   34bb8:	400b0000 	.word	0x400b0000

00034bbc <am_hal_usb_register_dev_evt_callback>:
am_hal_usb_register_dev_evt_callback(void *pHandle, const am_hal_usb_dev_evt_callback cb)
{
    am_hal_usb_state_t *pState = (am_hal_usb_state_t *)pHandle;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (!AM_HAL_USB_CHK_HANDLE(pHandle))
   34bbc:	b150      	cbz	r0, 34bd4 <am_hal_usb_register_dev_evt_callback+0x18>
   34bbe:	6803      	ldr	r3, [r0, #0]
   34bc0:	4a06      	ldr	r2, [pc, #24]	@ (34bdc <am_hal_usb_register_dev_evt_callback+0x20>)
   34bc2:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   34bc6:	4293      	cmp	r3, r2
   34bc8:	d104      	bne.n	34bd4 <am_hal_usb_register_dev_evt_callback+0x18>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }
#endif

    if (cb != NULL)
   34bca:	b129      	cbz	r1, 34bd8 <am_hal_usb_register_dev_evt_callback+0x1c>
    {
        pState->dev_evt_callback = cb;
   34bcc:	f8c0 10fc 	str.w	r1, [r0, #252]	@ 0xfc
    else
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }

    return AM_HAL_STATUS_SUCCESS;
   34bd0:	2000      	movs	r0, #0
   34bd2:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   34bd4:	2002      	movs	r0, #2
   34bd6:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   34bd8:	2006      	movs	r0, #6
}
   34bda:	4770      	bx	lr
   34bdc:	01ea9e06 	.word	0x01ea9e06

00034be0 <am_hal_usb_register_ep0_setup_received_callback>:
am_hal_usb_register_ep0_setup_received_callback(void *pHandle, const am_hal_usb_ep0_setup_received_callback cb)
{
    am_hal_usb_state_t *pState = (am_hal_usb_state_t *)pHandle;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (!AM_HAL_USB_CHK_HANDLE(pHandle))
   34be0:	b150      	cbz	r0, 34bf8 <am_hal_usb_register_ep0_setup_received_callback+0x18>
   34be2:	6803      	ldr	r3, [r0, #0]
   34be4:	4a06      	ldr	r2, [pc, #24]	@ (34c00 <am_hal_usb_register_ep0_setup_received_callback+0x20>)
   34be6:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   34bea:	4293      	cmp	r3, r2
   34bec:	d104      	bne.n	34bf8 <am_hal_usb_register_ep0_setup_received_callback+0x18>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }
#endif

    if (cb != NULL)
   34bee:	b129      	cbz	r1, 34bfc <am_hal_usb_register_ep0_setup_received_callback+0x1c>
    {
        pState->ep0_setup_callback = cb;
   34bf0:	f8c0 1100 	str.w	r1, [r0, #256]	@ 0x100
    else
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }

    return AM_HAL_STATUS_SUCCESS;
   34bf4:	2000      	movs	r0, #0
   34bf6:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   34bf8:	2002      	movs	r0, #2
   34bfa:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   34bfc:	2006      	movs	r0, #6
}
   34bfe:	4770      	bx	lr
   34c00:	01ea9e06 	.word	0x01ea9e06

00034c04 <am_hal_usb_register_ep_xfer_complete_callback>:
am_hal_usb_register_ep_xfer_complete_callback(void *pHandle, const am_hal_usb_ep_xfer_complete_callback cb)
{
    am_hal_usb_state_t *pState = (am_hal_usb_state_t *)pHandle;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (!AM_HAL_USB_CHK_HANDLE(pHandle))
   34c04:	b150      	cbz	r0, 34c1c <am_hal_usb_register_ep_xfer_complete_callback+0x18>
   34c06:	6803      	ldr	r3, [r0, #0]
   34c08:	4a06      	ldr	r2, [pc, #24]	@ (34c24 <am_hal_usb_register_ep_xfer_complete_callback+0x20>)
   34c0a:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   34c0e:	4293      	cmp	r3, r2
   34c10:	d104      	bne.n	34c1c <am_hal_usb_register_ep_xfer_complete_callback+0x18>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }
#endif

    if (cb != NULL)
   34c12:	b129      	cbz	r1, 34c20 <am_hal_usb_register_ep_xfer_complete_callback+0x1c>
    {
        pState->ep_xfer_complete_callback = cb;
   34c14:	f8c0 1104 	str.w	r1, [r0, #260]	@ 0x104
    else
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }

    return AM_HAL_STATUS_SUCCESS;
   34c18:	2000      	movs	r0, #0
   34c1a:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   34c1c:	2002      	movs	r0, #2
   34c1e:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   34c20:	2006      	movs	r0, #6
}
   34c22:	4770      	bx	lr
   34c24:	01ea9e06 	.word	0x01ea9e06

00034c28 <am_hal_usb_interrupt_service>:
void
am_hal_usb_interrupt_service(void *pHandle,
                             uint32_t ui32IntrUsbStatus,
                             uint32_t ui32IntrInStatus,
                             uint32_t ui32IntrOutStatus)
{
   34c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34c2c:	b089      	sub	sp, #36	@ 0x24
   34c2e:	e9cd 1302 	strd	r1, r3, [sp, #8]
    uint8_t i;
    am_hal_usb_state_t *pState = (am_hal_usb_state_t *)pHandle;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (!AM_HAL_USB_CHK_HANDLE(pHandle))
   34c32:	2800      	cmp	r0, #0
   34c34:	f000 80a6 	beq.w	34d84 <am_hal_usb_interrupt_service+0x15c>
   34c38:	6803      	ldr	r3, [r0, #0]
   34c3a:	4693      	mov	fp, r2
   34c3c:	4a92      	ldr	r2, [pc, #584]	@ (34e88 <am_hal_usb_interrupt_service+0x260>)
   34c3e:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   34c42:	4293      	cmp	r3, r2
   34c44:	4682      	mov	sl, r0
   34c46:	f040 809d 	bne.w	34d84 <am_hal_usb_interrupt_service+0x15c>
#endif

    USB_Type *pUSB = USBn(pState->ui32Module);

    // Handling the resume interrupt
    if (ui32IntrUsbStatus & USB_INTRUSB_Resume_Msk)
   34c4a:	078a      	lsls	r2, r1, #30
   34c4c:	d50c      	bpl.n	34c68 <am_hal_usb_interrupt_service+0x40>
    {
        //
        // Turning XCVRs on
        //
        USBPHY->REG10 |= 0x2;
   34c4e:	4a8f      	ldr	r2, [pc, #572]	@ (34e8c <am_hal_usb_interrupt_service+0x264>)

        // Back to active state
        pState->eDevState = AM_HAL_USB_DEV_STATE_RESUMING;
        if (pState->dev_evt_callback)
   34c50:	f8d0 10fc 	ldr.w	r1, [r0, #252]	@ 0xfc
        USBPHY->REG10 |= 0x2;
   34c54:	6913      	ldr	r3, [r2, #16]
   34c56:	f043 0302 	orr.w	r3, r3, #2
   34c5a:	6113      	str	r3, [r2, #16]
        pState->eDevState = AM_HAL_USB_DEV_STATE_RESUMING;
   34c5c:	2303      	movs	r3, #3
   34c5e:	f880 3055 	strb.w	r3, [r0, #85]	@ 0x55
        if (pState->dev_evt_callback)
   34c62:	b109      	cbz	r1, 34c68 <am_hal_usb_interrupt_service+0x40>
        {
            pState->dev_evt_callback(AM_HAL_USB_DEV_EVT_RESUME);
   34c64:	2002      	movs	r0, #2
   34c66:	4788      	blx	r1
        }
    }

    // Handling the reset interrupt
    if (ui32IntrUsbStatus & USB_INTRUSB_Reset_Msk)
   34c68:	9b02      	ldr	r3, [sp, #8]
   34c6a:	075b      	lsls	r3, r3, #29
   34c6c:	f100 8114 	bmi.w	34e98 <am_hal_usb_interrupt_service+0x270>
            pState->dev_evt_callback(AM_HAL_USB_DEV_EVT_BUS_RESET);
        }
    }

    // Handling the SOF interrupt
    if (ui32IntrUsbStatus & USB_INTRUSB_SOF_Msk)
   34c70:	f10a 037c 	add.w	r3, sl, #124	@ 0x7c
   34c74:	9304      	str	r3, [sp, #16]
   34c76:	9b02      	ldr	r3, [sp, #8]
   34c78:	071c      	lsls	r4, r3, #28
   34c7a:	f100 816a 	bmi.w	34f52 <am_hal_usb_interrupt_service+0x32a>
            pState->dev_evt_callback(AM_HAL_USB_DEV_EVT_SOF);
        }
    }

    // Handling the EP0 interrupt
    if (ui32IntrInStatus & USB_INTRIN_EP0_Msk)
   34c7e:	f01b 0f01 	tst.w	fp, #1
   34c82:	f040 8171 	bne.w	34f68 <am_hal_usb_interrupt_service+0x340>
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   34c86:	4f82      	ldr	r7, [pc, #520]	@ (34e90 <am_hal_usb_interrupt_service+0x268>)
    EP_INDEX_Set(pUSB, ui8EpNum);
   34c88:	f8df 8208 	ldr.w	r8, [pc, #520]	@ 34e94 <am_hal_usb_interrupt_service+0x26c>
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   34c8c:	2401      	movs	r4, #1
   34c8e:	f10a 0588 	add.w	r5, sl, #136	@ 0x88
    maxpacket = pState->epin_maxpackets[ui8EpNum - 1];
   34c92:	f10a 0958 	add.w	r9, sl, #88	@ 0x58
   34c96:	e006      	b.n	34ca6 <am_hal_usb_interrupt_service+0x7e>
    {
        am_hal_usb_ep0_handling(pState, pUSB);
    }

    // Handling IN Endpoint one by one
    for (i = AM_HAL_USB_EP1_NUMBER; i <= AM_HAL_USB_EP_MAX_NUMBER; i++)
   34c98:	3401      	adds	r4, #1
   34c9a:	2c06      	cmp	r4, #6
   34c9c:	f105 0518 	add.w	r5, r5, #24
   34ca0:	f107 0704 	add.w	r7, r7, #4
   34ca4:	d071      	beq.n	34d8a <am_hal_usb_interrupt_service+0x162>
    {
        if (ui32IntrInStatus & (0x1 << i))
   34ca6:	2301      	movs	r3, #1
   34ca8:	fa03 f204 	lsl.w	r2, r3, r4
   34cac:	ea12 0f0b 	tst.w	r2, fp
   34cb0:	d0f2      	beq.n	34c98 <am_hal_usb_interrupt_service+0x70>
    EP_INDEX_Set(pUSB, ui8EpNum);
   34cb2:	f8d8 300c 	ldr.w	r3, [r8, #12]
    maxpacket = pState->epin_maxpackets[ui8EpNum - 1];
   34cb6:	f839 c014 	ldrh.w	ip, [r9, r4, lsl #1]
    EP_INDEX_Set(pUSB, ui8EpNum);
   34cba:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
   34cbe:	f8c8 300c 	str.w	r3, [r8, #12]
   34cc2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   34cc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   34cca:	f8c8 300c 	str.w	r3, [r8, #12]
    if (INCSRL_SentStall(pUSB))
   34cce:	f8d8 3010 	ldr.w	r3, [r8, #16]
   34cd2:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
        INCSRL_SentStall_Clear(pUSB);
   34cd6:	f8d8 3010 	ldr.w	r3, [r8, #16]
    if (INCSRL_SentStall(pUSB))
   34cda:	f040 80cf 	bne.w	34e7c <am_hal_usb_interrupt_service+0x254>
    if (INCSRL_InPktRdy(pUSB) == 0x0)
   34cde:	03d8      	lsls	r0, r3, #15
   34ce0:	d4da      	bmi.n	34c98 <am_hal_usb_interrupt_service+0x70>
        if (pXfer->remaining == 0x0)
   34ce2:	88eb      	ldrh	r3, [r5, #6]
   34ce4:	2b00      	cmp	r3, #0
   34ce6:	f000 8195 	beq.w	35014 <am_hal_usb_interrupt_service+0x3ec>
        am_hal_usb_fifo_loading(pUSB, ui8EpNum, pXfer->buf + pXfer->len - pXfer->remaining, min);
   34cea:	88aa      	ldrh	r2, [r5, #4]
   34cec:	6829      	ldr	r1, [r5, #0]
        uint16_t min = pXfer->remaining < maxpacket ? pXfer->remaining : maxpacket;
   34cee:	459c      	cmp	ip, r3
   34cf0:	46e6      	mov	lr, ip
        am_hal_usb_fifo_loading(pUSB, ui8EpNum, pXfer->buf + pXfer->len - pXfer->remaining, min);
   34cf2:	eba2 0203 	sub.w	r2, r2, r3
        uint16_t min = pXfer->remaining < maxpacket ? pXfer->remaining : maxpacket;
   34cf6:	bf28      	it	cs
   34cf8:	469e      	movcs	lr, r3
        am_hal_usb_fifo_loading(pUSB, ui8EpNum, pXfer->buf + pXfer->len - pXfer->remaining, min);
   34cfa:	4411      	add	r1, r2
        uint16_t min = pXfer->remaining < maxpacket ? pXfer->remaining : maxpacket;
   34cfc:	fa1f f28e 	uxth.w	r2, lr
   34d00:	9201      	str	r2, [sp, #4]
    for (int i = 0; i < Write32bitCount; i++)
   34d02:	ea5f 009e 	movs.w	r0, lr, lsr #2
   34d06:	f00e 0203 	and.w	r2, lr, #3
   34d0a:	4616      	mov	r6, r2
   34d0c:	d00d      	beq.n	34d2a <am_hal_usb_interrupt_service+0x102>
   34d0e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   34d12:	3804      	subs	r0, #4
   34d14:	f8cd c014 	str.w	ip, [sp, #20]
   34d18:	1f0a      	subs	r2, r1, #4
   34d1a:	4684      	mov	ip, r0
        *FIFOx_ADDR(pUSB, ui8EpNum) = *((uint32_t *)pucBuf + i);
   34d1c:	f852 0f04 	ldr.w	r0, [r2, #4]!
   34d20:	6038      	str	r0, [r7, #0]
    for (int i = 0; i < Write32bitCount; i++)
   34d22:	4562      	cmp	r2, ip
   34d24:	d1fa      	bne.n	34d1c <am_hal_usb_interrupt_service+0xf4>
   34d26:	f8dd c014 	ldr.w	ip, [sp, #20]
    if (Write32bitRemain)
   34d2a:	2e00      	cmp	r6, #0
   34d2c:	f040 819b 	bne.w	35066 <am_hal_usb_interrupt_service+0x43e>
   34d30:	461a      	mov	r2, r3
        pXfer->remaining -= min;
   34d32:	9901      	ldr	r1, [sp, #4]
        INCSRL_InPktRdy_Set(pUSB);
   34d34:	4857      	ldr	r0, [pc, #348]	@ (34e94 <am_hal_usb_interrupt_service+0x26c>)
        pXfer->remaining -= min;
   34d36:	1a52      	subs	r2, r2, r1
        INCSRL_InPktRdy_Set(pUSB);
   34d38:	6901      	ldr	r1, [r0, #16]
        pXfer->remaining -= min;
   34d3a:	b292      	uxth	r2, r2
        INCSRL_InPktRdy_Set(pUSB);
   34d3c:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
   34d40:	6101      	str	r1, [r0, #16]
        pXfer->remaining -= min;
   34d42:	80ea      	strh	r2, [r5, #6]
        if (pXfer->remaining == 0x0 && min == maxpacket)
   34d44:	2a00      	cmp	r2, #0
   34d46:	d1a7      	bne.n	34c98 <am_hal_usb_interrupt_service+0x70>
   34d48:	459c      	cmp	ip, r3
   34d4a:	d8a5      	bhi.n	34c98 <am_hal_usb_interrupt_service+0x70>
            pXfer->flags.zlp = 1;
   34d4c:	1e63      	subs	r3, r4, #1
   34d4e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   34d52:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
   34d56:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
   34d5a:	f042 0202 	orr.w	r2, r2, #2
   34d5e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
   34d62:	e799      	b.n	34c98 <am_hal_usb_interrupt_service+0x70>
            am_hal_usb_out_ep_handling(pState, pUSB, i);
        }
    }

    // Handing the suspend interrupt finally
    if (ui32IntrUsbStatus & USB_INTRUSB_Suspend_Msk)
   34d64:	9b02      	ldr	r3, [sp, #8]
   34d66:	07db      	lsls	r3, r3, #31
   34d68:	d50c      	bpl.n	34d84 <am_hal_usb_interrupt_service+0x15c>
    {
        //
        // Turning XCVRs off for more power saving
        //
        USBPHY->REG10 &= 0xFD;
   34d6a:	4a48      	ldr	r2, [pc, #288]	@ (34e8c <am_hal_usb_interrupt_service+0x264>)

        pState->eDevState = AM_HAL_USB_DEV_STATE_SUSPENDING;
        if (pState->dev_evt_callback)
   34d6c:	f8da 10fc 	ldr.w	r1, [sl, #252]	@ 0xfc
        USBPHY->REG10 &= 0xFD;
   34d70:	6913      	ldr	r3, [r2, #16]
        pState->eDevState = AM_HAL_USB_DEV_STATE_SUSPENDING;
   34d72:	2005      	movs	r0, #5
        USBPHY->REG10 &= 0xFD;
   34d74:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
   34d78:	6113      	str	r3, [r2, #16]
        pState->eDevState = AM_HAL_USB_DEV_STATE_SUSPENDING;
   34d7a:	f88a 0055 	strb.w	r0, [sl, #85]	@ 0x55
        if (pState->dev_evt_callback)
   34d7e:	2900      	cmp	r1, #0
   34d80:	f040 8108 	bne.w	34f94 <am_hal_usb_interrupt_service+0x36c>
            pState->dev_evt_callback(AM_HAL_USB_DEV_EVT_SUSPEND);
        }
    }

    return;
}
   34d84:	b009      	add	sp, #36	@ 0x24
   34d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (i = AM_HAL_USB_EP1_NUMBER; i <= AM_HAL_USB_EP_MAX_NUMBER; i++)
   34d8a:	4d41      	ldr	r5, [pc, #260]	@ (34e90 <am_hal_usb_interrupt_service+0x268>)
   34d8c:	9e04      	ldr	r6, [sp, #16]
    EP_INDEX_Set(pUSB, ui8EpNum);
   34d8e:	4f41      	ldr	r7, [pc, #260]	@ (34e94 <am_hal_usb_interrupt_service+0x26c>)
        if (ui32IntrOutStatus & (0x1 << i))
   34d90:	f8dd 800c 	ldr.w	r8, [sp, #12]
   34d94:	9501      	str	r5, [sp, #4]
    for (i = AM_HAL_USB_EP1_NUMBER; i <= AM_HAL_USB_EP_MAX_NUMBER; i++)
   34d96:	2401      	movs	r4, #1
        if (ui32IntrOutStatus & (0x1 << i))
   34d98:	46a3      	mov	fp, r4
   34d9a:	e007      	b.n	34dac <am_hal_usb_interrupt_service+0x184>
    for (i = AM_HAL_USB_EP1_NUMBER; i <= AM_HAL_USB_EP_MAX_NUMBER; i++)
   34d9c:	9b01      	ldr	r3, [sp, #4]
   34d9e:	3401      	adds	r4, #1
   34da0:	3304      	adds	r3, #4
   34da2:	2c06      	cmp	r4, #6
   34da4:	f106 0618 	add.w	r6, r6, #24
   34da8:	9301      	str	r3, [sp, #4]
   34daa:	d0db      	beq.n	34d64 <am_hal_usb_interrupt_service+0x13c>
        if (ui32IntrOutStatus & (0x1 << i))
   34dac:	fa0b f204 	lsl.w	r2, fp, r4
   34db0:	ea12 0f08 	tst.w	r2, r8
   34db4:	d0f2      	beq.n	34d9c <am_hal_usb_interrupt_service+0x174>
    EP_INDEX_Set(pUSB, ui8EpNum);
   34db6:	68fb      	ldr	r3, [r7, #12]
   34db8:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
   34dbc:	60fb      	str	r3, [r7, #12]
   34dbe:	68fb      	ldr	r3, [r7, #12]
   34dc0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   34dc4:	60fb      	str	r3, [r7, #12]
    if (OUTCSRL_SentStall(pUSB))
   34dc6:	697b      	ldr	r3, [r7, #20]
   34dc8:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
        OUTCSRL_SentStall_Clear(pUSB);
   34dcc:	697b      	ldr	r3, [r7, #20]
    if (OUTCSRL_SentStall(pUSB))
   34dce:	d151      	bne.n	34e74 <am_hal_usb_interrupt_service+0x24c>
    if (OUTCSRL_OutPktRdy(pUSB))
   34dd0:	03d9      	lsls	r1, r3, #15
   34dd2:	d5e3      	bpl.n	34d9c <am_hal_usb_interrupt_service+0x174>
        count = OUTCOUNT(pUSB);
   34dd4:	69bd      	ldr	r5, [r7, #24]
        if (pXfer->remaining < count)
   34dd6:	88f1      	ldrh	r1, [r6, #6]
            am_hal_usb_fifo_unloading(pUSB, ui8EpNum, pXfer->buf + pXfer->len - pXfer->remaining, pXfer->remaining);
   34dd8:	88b0      	ldrh	r0, [r6, #4]
        maxpacket = pState->epout_maxpackets[ui8EpNum - 1];
   34dda:	f10a 0c62 	add.w	ip, sl, #98	@ 0x62
        count = OUTCOUNT(pUSB);
   34dde:	f3c5 090c 	ubfx	r9, r5, #0, #13
        maxpacket = pState->epout_maxpackets[ui8EpNum - 1];
   34de2:	f83c 3014 	ldrh.w	r3, [ip, r4, lsl #1]
   34de6:	9303      	str	r3, [sp, #12]
        if (pXfer->remaining < count)
   34de8:	4589      	cmp	r9, r1
            am_hal_usb_fifo_unloading(pUSB, ui8EpNum, pXfer->buf + pXfer->len - pXfer->remaining, pXfer->remaining);
   34dea:	f8d6 c000 	ldr.w	ip, [r6]
   34dee:	eba0 0001 	sub.w	r0, r0, r1
        count = OUTCOUNT(pUSB);
   34df2:	b2ab      	uxth	r3, r5
        if (pXfer->remaining < count)
   34df4:	f240 80d3 	bls.w	34f9e <am_hal_usb_interrupt_service+0x376>
    for (int i = 0; i < Read32bitCount; i++)
   34df8:	ea5f 0e91 	movs.w	lr, r1, lsr #2
   34dfc:	f001 0903 	and.w	r9, r1, #3
   34e00:	d00c      	beq.n	34e1c <am_hal_usb_interrupt_service+0x1f4>
   34e02:	eb0c 0300 	add.w	r3, ip, r0
   34e06:	9d01      	ldr	r5, [sp, #4]
   34e08:	9203      	str	r2, [sp, #12]
   34e0a:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
        *((uint32_t *)pucBuf + i) = *FIFOx_ADDR(pUSB, ui8EpNum);
   34e0e:	682a      	ldr	r2, [r5, #0]
   34e10:	f843 2b04 	str.w	r2, [r3], #4
    for (int i = 0; i < Read32bitCount; i++)
   34e14:	459e      	cmp	lr, r3
   34e16:	d1fa      	bne.n	34e0e <am_hal_usb_interrupt_service+0x1e6>
   34e18:	9a03      	ldr	r2, [sp, #12]
   34e1a:	9501      	str	r5, [sp, #4]
    if (Read32bitRemain)
   34e1c:	f1b9 0f00 	cmp.w	r9, #0
   34e20:	d011      	beq.n	34e46 <am_hal_usb_interrupt_service+0x21e>
            pucBuf[Read32bitCount*sizeof(uint32_t) + i] = (uint8_t) *pui8FIFO;
   34e22:	f021 0103 	bic.w	r1, r1, #3
   34e26:	4401      	add	r1, r0
   34e28:	9801      	ldr	r0, [sp, #4]
        for (int i = 0; i < Read32bitRemain; i++)
   34e2a:	f1b9 0f01 	cmp.w	r9, #1
            pucBuf[Read32bitCount*sizeof(uint32_t) + i] = (uint8_t) *pui8FIFO;
   34e2e:	7803      	ldrb	r3, [r0, #0]
   34e30:	f80c 3001 	strb.w	r3, [ip, r1]
        for (int i = 0; i < Read32bitRemain; i++)
   34e34:	d007      	beq.n	34e46 <am_hal_usb_interrupt_service+0x21e>
            pucBuf[Read32bitCount*sizeof(uint32_t) + i] = (uint8_t) *pui8FIFO;
   34e36:	4461      	add	r1, ip
   34e38:	7803      	ldrb	r3, [r0, #0]
   34e3a:	704b      	strb	r3, [r1, #1]
        for (int i = 0; i < Read32bitRemain; i++)
   34e3c:	f1b9 0f03 	cmp.w	r9, #3
   34e40:	d101      	bne.n	34e46 <am_hal_usb_interrupt_service+0x21e>
            pucBuf[Read32bitCount*sizeof(uint32_t) + i] = (uint8_t) *pui8FIFO;
   34e42:	7803      	ldrb	r3, [r0, #0]
   34e44:	708b      	strb	r3, [r1, #2]
            pXfer->remaining = 0;
   34e46:	2300      	movs	r3, #0
   34e48:	80f3      	strh	r3, [r6, #6]
            INTROUTE_Disable(pUSB, 0x1 << ui8EpNum);
   34e4a:	4812      	ldr	r0, [pc, #72]	@ (34e94 <am_hal_usb_interrupt_service+0x26c>)
   34e4c:	7a01      	ldrb	r1, [r0, #8]
   34e4e:	ea21 0202 	bic.w	r2, r1, r2
   34e52:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
   34e56:	7202      	strb	r2, [r0, #8]
            am_hal_usb_xfer_complete(pState, pXfer, ui8EpNum, pXfer->len - pXfer->remaining, USB_XFER_DONE, NULL);
   34e58:	88f2      	ldrh	r2, [r6, #6]
   34e5a:	88b1      	ldrh	r1, [r6, #4]
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   34e5c:	2300      	movs	r3, #0
   34e5e:	6033      	str	r3, [r6, #0]
   34e60:	60b3      	str	r3, [r6, #8]
            am_hal_usb_xfer_complete(pState, pXfer, ui8EpNum, pXfer->len - pXfer->remaining, USB_XFER_DONE, NULL);
   34e62:	1a89      	subs	r1, r1, r2
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   34e64:	6073      	str	r3, [r6, #4]
        pState->ep_xfer_complete_callback(ui8EpAddr, ui16XferLen, eXferCode, param);
   34e66:	f8da 5104 	ldr.w	r5, [sl, #260]	@ 0x104
   34e6a:	b289      	uxth	r1, r1
   34e6c:	461a      	mov	r2, r3
   34e6e:	b2e0      	uxtb	r0, r4
   34e70:	47a8      	blx	r5
            return;
   34e72:	e793      	b.n	34d9c <am_hal_usb_interrupt_service+0x174>
        OUTCSRL_SentStall_Clear(pUSB);
   34e74:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
   34e78:	617b      	str	r3, [r7, #20]
        return;
   34e7a:	e78f      	b.n	34d9c <am_hal_usb_interrupt_service+0x174>
        INCSRL_SentStall_Clear(pUSB);
   34e7c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
   34e80:	f8c8 3010 	str.w	r3, [r8, #16]
        return;
   34e84:	e708      	b.n	34c98 <am_hal_usb_interrupt_service+0x70>
   34e86:	bf00      	nop
   34e88:	01ea9e06 	.word	0x01ea9e06
   34e8c:	400b4000 	.word	0x400b4000
   34e90:	400b0024 	.word	0x400b0024
   34e94:	400b0000 	.word	0x400b0000
        if (pXfer->flags.busy == 0x1)
   34e98:	f89a 2078 	ldrb.w	r2, [sl, #120]	@ 0x78
        pState->eDevState = AM_HAL_USB_DEV_STATE_INIT;
   34e9c:	2300      	movs	r3, #0
        if (pXfer->flags.busy == 0x1)
   34e9e:	07d7      	lsls	r7, r2, #31
        pState->eDevState = AM_HAL_USB_DEV_STATE_INIT;
   34ea0:	f88a 3055 	strb.w	r3, [sl, #85]	@ 0x55
        am_hal_usb_ep_xfer_t *pXfer = &pState->ep0_xfer;
   34ea4:	f10a 0570 	add.w	r5, sl, #112	@ 0x70
        if (pXfer->flags.busy == 0x1)
   34ea8:	f100 80c9 	bmi.w	3503e <am_hal_usb_interrupt_service+0x416>
    pState->eEP0State = AM_HAL_USB_EP0_STATE_IDLE;
   34eac:	2700      	movs	r7, #0
   34eae:	f10a 067c 	add.w	r6, sl, #124	@ 0x7c
   34eb2:	f88a 7056 	strb.w	r7, [sl, #86]	@ 0x56
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   34eb6:	f8ca 7070 	str.w	r7, [sl, #112]	@ 0x70
   34eba:	f04f 0901 	mov.w	r9, #1
   34ebe:	606f      	str	r7, [r5, #4]
   34ec0:	60af      	str	r7, [r5, #8]
        for (int i = 0; i < AM_HAL_USB_EP_MAX_NUMBER; i++)
   34ec2:	9604      	str	r6, [sp, #16]
   34ec4:	46b8      	mov	r8, r7
   34ec6:	9601      	str	r6, [sp, #4]
            for (int j = 0; j < 2; j++)
   34ec8:	9b01      	ldr	r3, [sp, #4]
   34eca:	19dc      	adds	r4, r3, r7
                if (pXfer->flags.busy)
   34ecc:	7a25      	ldrb	r5, [r4, #8]
   34ece:	f015 0501 	ands.w	r5, r5, #1
   34ed2:	d012      	beq.n	34efa <am_hal_usb_interrupt_service+0x2d2>
   34ed4:	2500      	movs	r5, #0
                    am_hal_usb_xfer_complete(pState, pXfer, am_hal_usb_ep_addr(i + 1, j), pXfer->len - pXfer->remaining, USB_XFER_ABORT, NULL);
   34ed6:	88e3      	ldrh	r3, [r4, #6]
   34ed8:	88a1      	ldrh	r1, [r4, #4]
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   34eda:	f8c4 8000 	str.w	r8, [r4]
                    am_hal_usb_xfer_complete(pState, pXfer, am_hal_usb_ep_addr(i + 1, j), pXfer->len - pXfer->remaining, USB_XFER_ABORT, NULL);
   34ede:	1ac9      	subs	r1, r1, r3
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   34ee0:	f8c4 8008 	str.w	r8, [r4, #8]
   34ee4:	f8c4 8004 	str.w	r8, [r4, #4]
    return (uint8_t)(num | (dir ?  AM_HAL_USB_EP_DIR_IN_MASK : 0));
   34ee8:	ea49 10c5 	orr.w	r0, r9, r5, lsl #7
        pState->ep_xfer_complete_callback(ui8EpAddr, ui16XferLen, eXferCode, param);
   34eec:	f8da 6104 	ldr.w	r6, [sl, #260]	@ 0x104
   34ef0:	b289      	uxth	r1, r1
   34ef2:	b2c0      	uxtb	r0, r0
   34ef4:	2300      	movs	r3, #0
   34ef6:	2204      	movs	r2, #4
   34ef8:	47b0      	blx	r6
            for (int j = 0; j < 2; j++)
   34efa:	340c      	adds	r4, #12
   34efc:	b925      	cbnz	r5, 34f08 <am_hal_usb_interrupt_service+0x2e0>
                if (pXfer->flags.busy)
   34efe:	7a23      	ldrb	r3, [r4, #8]
   34f00:	07de      	lsls	r6, r3, #31
   34f02:	f04f 0501 	mov.w	r5, #1
   34f06:	d4e6      	bmi.n	34ed6 <am_hal_usb_interrupt_service+0x2ae>
        for (int i = 0; i < AM_HAL_USB_EP_MAX_NUMBER; i++)
   34f08:	3718      	adds	r7, #24
   34f0a:	2f78      	cmp	r7, #120	@ 0x78
   34f0c:	f109 0901 	add.w	r9, r9, #1
   34f10:	d1da      	bne.n	34ec8 <am_hal_usb_interrupt_service+0x2a0>
        memset((void *)&pState->ep_xfers, 0x0, sizeof(pState->ep_xfers));
   34f12:	463a      	mov	r2, r7
   34f14:	9804      	ldr	r0, [sp, #16]
   34f16:	2100      	movs	r1, #0
   34f18:	f7f1 ffe0 	bl	26edc <memset>
        INTRINE_Disable(pUSB, AM_HAL_USB_EP_MASK);
   34f1c:	4ba9      	ldr	r3, [pc, #676]	@ (351c4 <am_hal_usb_interrupt_service+0x59c>)
   34f1e:	2000      	movs	r0, #0
   34f20:	88da      	ldrh	r2, [r3, #6]
    *ui32Allocated = 8;
   34f22:	2208      	movs	r2, #8
   34f24:	f8ca 2050 	str.w	r2, [sl, #80]	@ 0x50
        INTRINE_Disable(pUSB, AM_HAL_USB_EP_MASK);
   34f28:	80d8      	strh	r0, [r3, #6]
        INTROUTE_Disable(pUSB, AM_HAL_USB_EP_MASK);
   34f2a:	7a1a      	ldrb	r2, [r3, #8]
   34f2c:	7218      	strb	r0, [r3, #8]
        INTRUSBE_SOF_Disable(pUSB);
   34f2e:	7ada      	ldrb	r2, [r3, #11]
   34f30:	f002 02f7 	and.w	r2, r2, #247	@ 0xf7
   34f34:	72da      	strb	r2, [r3, #11]
        INTRUSBE_Suspend_Enable(pUSB);
   34f36:	7ada      	ldrb	r2, [r3, #11]
   34f38:	f042 0201 	orr.w	r2, r2, #1
   34f3c:	72da      	strb	r2, [r3, #11]
        if (pState->dev_evt_callback)
   34f3e:	f8da 30fc 	ldr.w	r3, [sl, #252]	@ 0xfc
   34f42:	2b00      	cmp	r3, #0
   34f44:	f43f ae9b 	beq.w	34c7e <am_hal_usb_interrupt_service+0x56>
            pState->dev_evt_callback(AM_HAL_USB_DEV_EVT_BUS_RESET);
   34f48:	4798      	blx	r3
    if (ui32IntrUsbStatus & USB_INTRUSB_SOF_Msk)
   34f4a:	9b02      	ldr	r3, [sp, #8]
   34f4c:	071c      	lsls	r4, r3, #28
   34f4e:	f57f ae96 	bpl.w	34c7e <am_hal_usb_interrupt_service+0x56>
        if (pState->dev_evt_callback)
   34f52:	f8da 30fc 	ldr.w	r3, [sl, #252]	@ 0xfc
   34f56:	2b00      	cmp	r3, #0
   34f58:	f43f ae91 	beq.w	34c7e <am_hal_usb_interrupt_service+0x56>
            pState->dev_evt_callback(AM_HAL_USB_DEV_EVT_SOF);
   34f5c:	2001      	movs	r0, #1
   34f5e:	4798      	blx	r3
    if (ui32IntrInStatus & USB_INTRIN_EP0_Msk)
   34f60:	f01b 0f01 	tst.w	fp, #1
   34f64:	f43f ae8f 	beq.w	34c86 <am_hal_usb_interrupt_service+0x5e>
    EP_INDEX_Set(pUSB, AM_HAL_USB_EP0_NUMBER);
   34f68:	4b96      	ldr	r3, [pc, #600]	@ (351c4 <am_hal_usb_interrupt_service+0x59c>)
    maxpacket = pState->ep0_maxpacket;
   34f6a:	f8ba 0058 	ldrh.w	r0, [sl, #88]	@ 0x58
    EP_INDEX_Set(pUSB, AM_HAL_USB_EP0_NUMBER);
   34f6e:	68da      	ldr	r2, [r3, #12]
   34f70:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
   34f74:	60da      	str	r2, [r3, #12]
   34f76:	68da      	ldr	r2, [r3, #12]
   34f78:	60da      	str	r2, [r3, #12]
    switch ( pState->eEP0State )
   34f7a:	f89a 3056 	ldrb.w	r3, [sl, #86]	@ 0x56
   34f7e:	2b05      	cmp	r3, #5
   34f80:	f63f ae81 	bhi.w	34c86 <am_hal_usb_interrupt_service+0x5e>
   34f84:	e8df f013 	tbh	[pc, r3, lsl #1]
   34f88:	01be015e 	.word	0x01be015e
   34f8c:	00d80177 	.word	0x00d80177
   34f90:	01200080 	.word	0x01200080
            pState->dev_evt_callback(AM_HAL_USB_DEV_EVT_SUSPEND);
   34f94:	2003      	movs	r0, #3
}
   34f96:	b009      	add	sp, #36	@ 0x24
   34f98:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            pState->dev_evt_callback(AM_HAL_USB_DEV_EVT_SUSPEND);
   34f9c:	4708      	bx	r1
    Read32bitRemain  = ui32Count - Read32bitCount * sizeof(uint32_t);
   34f9e:	f003 0303 	and.w	r3, r3, #3
    for (int i = 0; i < Read32bitCount; i++)
   34fa2:	ea5f 0e99 	movs.w	lr, r9, lsr #2
   34fa6:	9304      	str	r3, [sp, #16]
   34fa8:	d00d      	beq.n	34fc6 <am_hal_usb_interrupt_service+0x39e>
   34faa:	eb0c 0e8e 	add.w	lr, ip, lr, lsl #2
   34fae:	9d01      	ldr	r5, [sp, #4]
   34fb0:	9205      	str	r2, [sp, #20]
   34fb2:	4486      	add	lr, r0
   34fb4:	eb0c 0300 	add.w	r3, ip, r0
        *((uint32_t *)pucBuf + i) = *FIFOx_ADDR(pUSB, ui8EpNum);
   34fb8:	682a      	ldr	r2, [r5, #0]
   34fba:	f843 2b04 	str.w	r2, [r3], #4
    for (int i = 0; i < Read32bitCount; i++)
   34fbe:	4573      	cmp	r3, lr
   34fc0:	d1fa      	bne.n	34fb8 <am_hal_usb_interrupt_service+0x390>
   34fc2:	9a05      	ldr	r2, [sp, #20]
   34fc4:	9501      	str	r5, [sp, #4]
    if (Read32bitRemain)
   34fc6:	9b04      	ldr	r3, [sp, #16]
   34fc8:	b19b      	cbz	r3, 34ff2 <am_hal_usb_interrupt_service+0x3ca>
        for (int i = 0; i < Read32bitRemain; i++)
   34fca:	4619      	mov	r1, r3
            pucBuf[Read32bitCount*sizeof(uint32_t) + i] = (uint8_t) *pui8FIFO;
   34fcc:	9d01      	ldr	r5, [sp, #4]
   34fce:	f029 0303 	bic.w	r3, r9, #3
   34fd2:	449c      	add	ip, r3
        for (int i = 0; i < Read32bitRemain; i++)
   34fd4:	2901      	cmp	r1, #1
            pucBuf[Read32bitCount*sizeof(uint32_t) + i] = (uint8_t) *pui8FIFO;
   34fd6:	782b      	ldrb	r3, [r5, #0]
   34fd8:	f80c 3000 	strb.w	r3, [ip, r0]
   34fdc:	4484      	add	ip, r0
        for (int i = 0; i < Read32bitRemain; i++)
   34fde:	d007      	beq.n	34ff0 <am_hal_usb_interrupt_service+0x3c8>
            pucBuf[Read32bitCount*sizeof(uint32_t) + i] = (uint8_t) *pui8FIFO;
   34fe0:	782b      	ldrb	r3, [r5, #0]
   34fe2:	f88c 3001 	strb.w	r3, [ip, #1]
        for (int i = 0; i < Read32bitRemain; i++)
   34fe6:	2903      	cmp	r1, #3
            pucBuf[Read32bitCount*sizeof(uint32_t) + i] = (uint8_t) *pui8FIFO;
   34fe8:	bf04      	itt	eq
   34fea:	782b      	ldrbeq	r3, [r5, #0]
   34fec:	f88c 3002 	strbeq.w	r3, [ip, #2]
            pXfer->remaining -= count;
   34ff0:	88f1      	ldrh	r1, [r6, #6]
   34ff2:	eba1 0109 	sub.w	r1, r1, r9
   34ff6:	b289      	uxth	r1, r1
   34ff8:	80f1      	strh	r1, [r6, #6]
        if (pXfer->remaining == 0x0 || count < maxpacket)
   34ffa:	2900      	cmp	r1, #0
   34ffc:	f43f af25 	beq.w	34e4a <am_hal_usb_interrupt_service+0x222>
   35000:	9b03      	ldr	r3, [sp, #12]
   35002:	4599      	cmp	r9, r3
   35004:	f4ff af21 	bcc.w	34e4a <am_hal_usb_interrupt_service+0x222>
        OUTCSRL_OutPktRdy_Clear(pUSB);
   35008:	4a6e      	ldr	r2, [pc, #440]	@ (351c4 <am_hal_usb_interrupt_service+0x59c>)
   3500a:	6953      	ldr	r3, [r2, #20]
   3500c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
   35010:	6153      	str	r3, [r2, #20]
   35012:	e6c3      	b.n	34d9c <am_hal_usb_interrupt_service+0x174>
            INTRINE_Disable(pUSB, 0x1 << ui8EpNum);
   35014:	f8b8 1006 	ldrh.w	r1, [r8, #6]
   35018:	b289      	uxth	r1, r1
   3501a:	ea21 0202 	bic.w	r2, r1, r2
   3501e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
   35022:	f8a8 2006 	strh.w	r2, [r8, #6]
            am_hal_usb_xfer_complete(pState, pXfer, ui8EpNum | AM_HAL_USB_EP_DIR_IN_MASK, pXfer->len, USB_XFER_DONE, NULL);
   35026:	88a9      	ldrh	r1, [r5, #4]
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   35028:	602b      	str	r3, [r5, #0]
   3502a:	60ab      	str	r3, [r5, #8]
   3502c:	606b      	str	r3, [r5, #4]
            am_hal_usb_xfer_complete(pState, pXfer, ui8EpNum | AM_HAL_USB_EP_DIR_IN_MASK, pXfer->len, USB_XFER_DONE, NULL);
   3502e:	f064 007f 	orn	r0, r4, #127	@ 0x7f
        pState->ep_xfer_complete_callback(ui8EpAddr, ui16XferLen, eXferCode, param);
   35032:	f8da 6104 	ldr.w	r6, [sl, #260]	@ 0x104
   35036:	b2c0      	uxtb	r0, r0
   35038:	461a      	mov	r2, r3
   3503a:	47b0      	blx	r6
            return;
   3503c:	e62c      	b.n	34c98 <am_hal_usb_interrupt_service+0x70>
            am_hal_usb_xfer_complete(pState, pXfer, am_hal_usb_ep_addr(0x0, pXfer->flags.dir), pXfer->len - pXfer->remaining, USB_XFER_ABORT, NULL);
   3503e:	f3c2 0280 	ubfx	r2, r2, #2, #1
   35042:	f8ba 1074 	ldrh.w	r1, [sl, #116]	@ 0x74
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   35046:	f8ca 3070 	str.w	r3, [sl, #112]	@ 0x70
   3504a:	01d0      	lsls	r0, r2, #7
            am_hal_usb_xfer_complete(pState, pXfer, am_hal_usb_ep_addr(0x0, pXfer->flags.dir), pXfer->len - pXfer->remaining, USB_XFER_ABORT, NULL);
   3504c:	f8ba 2076 	ldrh.w	r2, [sl, #118]	@ 0x76
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   35050:	606b      	str	r3, [r5, #4]
            am_hal_usb_xfer_complete(pState, pXfer, am_hal_usb_ep_addr(0x0, pXfer->flags.dir), pXfer->len - pXfer->remaining, USB_XFER_ABORT, NULL);
   35052:	1a89      	subs	r1, r1, r2
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   35054:	60ab      	str	r3, [r5, #8]
        pState->ep_xfer_complete_callback(ui8EpAddr, ui16XferLen, eXferCode, param);
   35056:	f8da 4104 	ldr.w	r4, [sl, #260]	@ 0x104
   3505a:	f000 0080 	and.w	r0, r0, #128	@ 0x80
   3505e:	b289      	uxth	r1, r1
   35060:	2204      	movs	r2, #4
   35062:	47a0      	blx	r4
   35064:	e722      	b.n	34eac <am_hal_usb_interrupt_service+0x284>
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   35066:	f02e 0203 	bic.w	r2, lr, #3
        for (int i = 0; i < Write32bitRemain; i++)
   3506a:	f01e 0f02 	tst.w	lr, #2
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   3506e:	5c88      	ldrb	r0, [r1, r2]
   35070:	7038      	strb	r0, [r7, #0]
        for (int i = 0; i < Write32bitRemain; i++)
   35072:	d007      	beq.n	35084 <am_hal_usb_interrupt_service+0x45c>
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   35074:	4411      	add	r1, r2
        for (int i = 0; i < Write32bitRemain; i++)
   35076:	2e03      	cmp	r6, #3
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   35078:	784a      	ldrb	r2, [r1, #1]
   3507a:	703a      	strb	r2, [r7, #0]
        for (int i = 0; i < Write32bitRemain; i++)
   3507c:	4632      	mov	r2, r6
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   3507e:	bf04      	itt	eq
   35080:	788a      	ldrbeq	r2, [r1, #2]
   35082:	703a      	strbeq	r2, [r7, #0]
        pXfer->remaining -= min;
   35084:	88ea      	ldrh	r2, [r5, #6]
   35086:	e654      	b.n	34d32 <am_hal_usb_interrupt_service+0x10a>
                am_hal_usb_xfer_complete(pState, &pState->ep0_xfer, 0x0, pState->ep0_xfer.len - pState->ep0_xfer.remaining, USB_XFER_STALL, NULL);
   35088:	f8ba 3076 	ldrh.w	r3, [sl, #118]	@ 0x76
            if (CSR0_SentStall(pUSB))
   3508c:	4a4d      	ldr	r2, [pc, #308]	@ (351c4 <am_hal_usb_interrupt_service+0x59c>)
                am_hal_usb_xfer_complete(pState, &pState->ep0_xfer, 0x0, pState->ep0_xfer.len - pState->ep0_xfer.remaining, USB_XFER_STALL, NULL);
   3508e:	f8ba 1074 	ldrh.w	r1, [sl, #116]	@ 0x74
   35092:	1ac9      	subs	r1, r1, r3
            if (CSR0_SentStall(pUSB))
   35094:	6913      	ldr	r3, [r2, #16]
   35096:	f413 2380 	ands.w	r3, r3, #262144	@ 0x40000
                am_hal_usb_xfer_complete(pState, &pState->ep0_xfer, 0x0, pState->ep0_xfer.len - pState->ep0_xfer.remaining, USB_XFER_STALL, NULL);
   3509a:	b289      	uxth	r1, r1
            if (CSR0_SentStall(pUSB))
   3509c:	f000 8153 	beq.w	35346 <am_hal_usb_interrupt_service+0x71e>
                CSR0_SentStall_Clear(pUSB);
   350a0:	6913      	ldr	r3, [r2, #16]
        pState->ep_xfer_complete_callback(ui8EpAddr, ui16XferLen, eXferCode, param);
   350a2:	f8da 4104 	ldr.w	r4, [sl, #260]	@ 0x104
                CSR0_SentStall_Clear(pUSB);
   350a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
   350aa:	6113      	str	r3, [r2, #16]
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   350ac:	2300      	movs	r3, #0
   350ae:	f8ca 3070 	str.w	r3, [sl, #112]	@ 0x70
   350b2:	f8ca 3074 	str.w	r3, [sl, #116]	@ 0x74
   350b6:	f8ca 3078 	str.w	r3, [sl, #120]	@ 0x78
        pState->ep_xfer_complete_callback(ui8EpAddr, ui16XferLen, eXferCode, param);
   350ba:	4618      	mov	r0, r3
   350bc:	2202      	movs	r2, #2
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   350be:	f10a 0570 	add.w	r5, sl, #112	@ 0x70
        pState->ep_xfer_complete_callback(ui8EpAddr, ui16XferLen, eXferCode, param);
   350c2:	47a0      	blx	r4
    pState->eEP0State = AM_HAL_USB_EP0_STATE_IDLE;
   350c4:	2300      	movs	r3, #0
    if (CSR0_OutPktRdy(pUSB))
   350c6:	493f      	ldr	r1, [pc, #252]	@ (351c4 <am_hal_usb_interrupt_service+0x59c>)
    pState->eEP0State = AM_HAL_USB_EP0_STATE_IDLE;
   350c8:	f88a 3056 	strb.w	r3, [sl, #86]	@ 0x56
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   350cc:	f8ca 3070 	str.w	r3, [sl, #112]	@ 0x70
   350d0:	606b      	str	r3, [r5, #4]
   350d2:	60ab      	str	r3, [r5, #8]
    if (CSR0_OutPktRdy(pUSB))
   350d4:	690b      	ldr	r3, [r1, #16]
   350d6:	03dd      	lsls	r5, r3, #15
   350d8:	f57f add5 	bpl.w	34c86 <am_hal_usb_interrupt_service+0x5e>
        uint16_t count0 = COUNT0(pUSB);
   350dc:	698d      	ldr	r5, [r1, #24]
    Read32bitCount   = ui32Count / sizeof(uint32_t);
   350de:	f3c5 048a 	ubfx	r4, r5, #2, #11
        am_hal_usb_fifo_unloading(pUSB, AM_HAL_USB_EP0_NUMBER, setup_req, count0);
   350e2:	f3c5 060c 	ubfx	r6, r5, #0, #13
    Read32bitRemain  = ui32Count - Read32bitCount * sizeof(uint32_t);
   350e6:	a806      	add	r0, sp, #24
   350e8:	f005 0503 	and.w	r5, r5, #3
    for (int i = 0; i < Read32bitCount; i++)
   350ec:	b13c      	cbz	r4, 350fe <am_hal_usb_interrupt_service+0x4d6>
   350ee:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   350f2:	4603      	mov	r3, r0
        *((uint32_t *)pucBuf + i) = *FIFOx_ADDR(pUSB, ui8EpNum);
   350f4:	6a0a      	ldr	r2, [r1, #32]
   350f6:	f843 2b04 	str.w	r2, [r3], #4
    for (int i = 0; i < Read32bitCount; i++)
   350fa:	429c      	cmp	r4, r3
   350fc:	d1fa      	bne.n	350f4 <am_hal_usb_interrupt_service+0x4cc>
    if (Read32bitRemain)
   350fe:	b1a5      	cbz	r5, 3512a <am_hal_usb_interrupt_service+0x502>
            pucBuf[Read32bitCount*sizeof(uint32_t) + i] = (uint8_t) *pui8FIFO;
   35100:	f026 0303 	bic.w	r3, r6, #3
   35104:	4a2f      	ldr	r2, [pc, #188]	@ (351c4 <am_hal_usb_interrupt_service+0x59c>)
   35106:	3320      	adds	r3, #32
   35108:	446b      	add	r3, sp
   3510a:	f892 1020 	ldrb.w	r1, [r2, #32]
   3510e:	f803 1c08 	strb.w	r1, [r3, #-8]
        for (int i = 0; i < Read32bitRemain; i++)
   35112:	2d01      	cmp	r5, #1
   35114:	d009      	beq.n	3512a <am_hal_usb_interrupt_service+0x502>
            pucBuf[Read32bitCount*sizeof(uint32_t) + i] = (uint8_t) *pui8FIFO;
   35116:	f892 1020 	ldrb.w	r1, [r2, #32]
   3511a:	f803 1c07 	strb.w	r1, [r3, #-7]
        for (int i = 0; i < Read32bitRemain; i++)
   3511e:	2d03      	cmp	r5, #3
   35120:	d103      	bne.n	3512a <am_hal_usb_interrupt_service+0x502>
            pucBuf[Read32bitCount*sizeof(uint32_t) + i] = (uint8_t) *pui8FIFO;
   35122:	f892 2020 	ldrb.w	r2, [r2, #32]
   35126:	f803 2c06 	strb.w	r2, [r3, #-6]
        pState->eEP0State = AM_HAL_USB_EP0_STATE_SETUP;
   3512a:	2301      	movs	r3, #1
   3512c:	f88a 3056 	strb.w	r3, [sl, #86]	@ 0x56
        pState->ep0_setup_callback(setup_req);
   35130:	f8da 3100 	ldr.w	r3, [sl, #256]	@ 0x100
   35134:	4798      	blx	r3
    for (i = AM_HAL_USB_EP1_NUMBER; i <= AM_HAL_USB_EP_MAX_NUMBER; i++)
   35136:	e5a6      	b.n	34c86 <am_hal_usb_interrupt_service+0x5e>
            remaining = pState->ep0_xfer.remaining;
   35138:	f8ba 4076 	ldrh.w	r4, [sl, #118]	@ 0x76
            index     = pState->ep0_xfer.len - remaining;
   3513c:	f8ba 3074 	ldrh.w	r3, [sl, #116]	@ 0x74
            if (CSR0_SetupEnd(pUSB))
   35140:	4a20      	ldr	r2, [pc, #128]	@ (351c4 <am_hal_usb_interrupt_service+0x59c>)
            buf       = pState->ep0_xfer.buf;
   35142:	f8da 5070 	ldr.w	r5, [sl, #112]	@ 0x70
            index     = pState->ep0_xfer.len - remaining;
   35146:	1b1b      	subs	r3, r3, r4
   35148:	b299      	uxth	r1, r3
            if (CSR0_SetupEnd(pUSB))
   3514a:	6913      	ldr	r3, [r2, #16]
   3514c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
                CSR0_ServicedSetupEnd_Set(pUSB);
   35150:	6913      	ldr	r3, [r2, #16]
            if (CSR0_SetupEnd(pUSB))
   35152:	f040 8127 	bne.w	353a4 <am_hal_usb_interrupt_service+0x77c>
            if (CSR0_SentStall(pUSB))
   35156:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
                CSR0_SentStall_Clear(pUSB);
   3515a:	6913      	ldr	r3, [r2, #16]
            if (CSR0_SentStall(pUSB))
   3515c:	f040 8101 	bne.w	35362 <am_hal_usb_interrupt_service+0x73a>
            if (CSR0_InPktRdy(pUSB) == 0x0) //In data packet FIFO is empty
   35160:	039e      	lsls	r6, r3, #14
   35162:	f53f ad90 	bmi.w	34c86 <am_hal_usb_interrupt_service+0x5e>
                if (remaining <= maxpacket)
   35166:	42a0      	cmp	r0, r4
   35168:	f0c0 812c 	bcc.w	353c4 <am_hal_usb_interrupt_service+0x79c>
    for (int i = 0; i < Write32bitCount; i++)
   3516c:	08a6      	lsrs	r6, r4, #2
   3516e:	f004 0703 	and.w	r7, r4, #3
   35172:	d007      	beq.n	35184 <am_hal_usb_interrupt_service+0x55c>
   35174:	186b      	adds	r3, r5, r1
   35176:	eb03 0686 	add.w	r6, r3, r6, lsl #2
        *FIFOx_ADDR(pUSB, ui8EpNum) = *((uint32_t *)pucBuf + i);
   3517a:	f853 0b04 	ldr.w	r0, [r3], #4
   3517e:	6210      	str	r0, [r2, #32]
    for (int i = 0; i < Write32bitCount; i++)
   35180:	429e      	cmp	r6, r3
   35182:	d1fa      	bne.n	3517a <am_hal_usb_interrupt_service+0x552>
    if (Write32bitRemain)
   35184:	b18f      	cbz	r7, 351aa <am_hal_usb_interrupt_service+0x582>
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   35186:	f024 0303 	bic.w	r3, r4, #3
   3518a:	440b      	add	r3, r1
   3518c:	4a0d      	ldr	r2, [pc, #52]	@ (351c4 <am_hal_usb_interrupt_service+0x59c>)
   3518e:	5ce9      	ldrb	r1, [r5, r3]
   35190:	f882 1020 	strb.w	r1, [r2, #32]
        for (int i = 0; i < Write32bitRemain; i++)
   35194:	2f01      	cmp	r7, #1
   35196:	d008      	beq.n	351aa <am_hal_usb_interrupt_service+0x582>
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   35198:	442b      	add	r3, r5
        for (int i = 0; i < Write32bitRemain; i++)
   3519a:	2f03      	cmp	r7, #3
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   3519c:	7859      	ldrb	r1, [r3, #1]
   3519e:	f882 1020 	strb.w	r1, [r2, #32]
        for (int i = 0; i < Write32bitRemain; i++)
   351a2:	d102      	bne.n	351aa <am_hal_usb_interrupt_service+0x582>
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   351a4:	789b      	ldrb	r3, [r3, #2]
   351a6:	f882 3020 	strb.w	r3, [r2, #32]
                    CSR0_InPktRdyAndDataEnd_Set(pUSB);
   351aa:	4a06      	ldr	r2, [pc, #24]	@ (351c4 <am_hal_usb_interrupt_service+0x59c>)
                    pState->eEP0State = AM_HAL_USB_EP0_STATE_STATUS_TX;
   351ac:	2305      	movs	r3, #5
   351ae:	f88a 3056 	strb.w	r3, [sl, #86]	@ 0x56
                    CSR0_InPktRdyAndDataEnd_Set(pUSB);
   351b2:	6913      	ldr	r3, [r2, #16]
                    pState->ep0_xfer.remaining = 0;
   351b4:	2100      	movs	r1, #0
                    CSR0_InPktRdyAndDataEnd_Set(pUSB);
   351b6:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
                    pState->ep0_xfer.remaining = 0;
   351ba:	f8aa 1076 	strh.w	r1, [sl, #118]	@ 0x76
                    CSR0_InPktRdyAndDataEnd_Set(pUSB);
   351be:	6113      	str	r3, [r2, #16]
    for (i = AM_HAL_USB_EP1_NUMBER; i <= AM_HAL_USB_EP_MAX_NUMBER; i++)
   351c0:	e561      	b.n	34c86 <am_hal_usb_interrupt_service+0x5e>
   351c2:	bf00      	nop
   351c4:	400b0000 	.word	0x400b0000
                am_hal_usb_xfer_complete(pState, &pState->ep0_xfer, 0x0 | AM_HAL_USB_EP_DIR_IN_MASK, pState->ep0_xfer.len - pState->ep0_xfer.remaining, USB_XFER_STALL, NULL);
   351c8:	f8ba 3076 	ldrh.w	r3, [sl, #118]	@ 0x76
            if (CSR0_SentStall(pUSB))
   351cc:	4a94      	ldr	r2, [pc, #592]	@ (35420 <am_hal_usb_interrupt_service+0x7f8>)
                am_hal_usb_xfer_complete(pState, &pState->ep0_xfer, 0x0 | AM_HAL_USB_EP_DIR_IN_MASK, pState->ep0_xfer.len - pState->ep0_xfer.remaining, USB_XFER_STALL, NULL);
   351ce:	f8ba 1074 	ldrh.w	r1, [sl, #116]	@ 0x74
   351d2:	1ac9      	subs	r1, r1, r3
            if (CSR0_SentStall(pUSB))
   351d4:	6913      	ldr	r3, [r2, #16]
   351d6:	f413 2380 	ands.w	r3, r3, #262144	@ 0x40000
                am_hal_usb_xfer_complete(pState, &pState->ep0_xfer, 0x0 | AM_HAL_USB_EP_DIR_IN_MASK, pState->ep0_xfer.len - pState->ep0_xfer.remaining, USB_XFER_STALL, NULL);
   351da:	b289      	uxth	r1, r1
            if (CSR0_SentStall(pUSB))
   351dc:	f000 80a5 	beq.w	3532a <am_hal_usb_interrupt_service+0x702>
                CSR0_SentStall_Clear(pUSB);
   351e0:	6913      	ldr	r3, [r2, #16]
        pState->ep_xfer_complete_callback(ui8EpAddr, ui16XferLen, eXferCode, param);
   351e2:	f8da 4104 	ldr.w	r4, [sl, #260]	@ 0x104
                CSR0_SentStall_Clear(pUSB);
   351e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
   351ea:	6113      	str	r3, [r2, #16]
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   351ec:	2300      	movs	r3, #0
   351ee:	f8ca 3070 	str.w	r3, [sl, #112]	@ 0x70
   351f2:	f8ca 3074 	str.w	r3, [sl, #116]	@ 0x74
   351f6:	f8ca 3078 	str.w	r3, [sl, #120]	@ 0x78
        pState->ep_xfer_complete_callback(ui8EpAddr, ui16XferLen, eXferCode, param);
   351fa:	2202      	movs	r2, #2
   351fc:	2080      	movs	r0, #128	@ 0x80
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   351fe:	f10a 0570 	add.w	r5, sl, #112	@ 0x70
        pState->ep_xfer_complete_callback(ui8EpAddr, ui16XferLen, eXferCode, param);
   35202:	47a0      	blx	r4
    pState->eEP0State = AM_HAL_USB_EP0_STATE_IDLE;
   35204:	2300      	movs	r3, #0
    if (CSR0_OutPktRdy(pUSB))
   35206:	4986      	ldr	r1, [pc, #536]	@ (35420 <am_hal_usb_interrupt_service+0x7f8>)
    pState->eEP0State = AM_HAL_USB_EP0_STATE_IDLE;
   35208:	f88a 3056 	strb.w	r3, [sl, #86]	@ 0x56
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   3520c:	f8ca 3070 	str.w	r3, [sl, #112]	@ 0x70
   35210:	606b      	str	r3, [r5, #4]
   35212:	60ab      	str	r3, [r5, #8]
    if (CSR0_OutPktRdy(pUSB))
   35214:	690b      	ldr	r3, [r1, #16]
   35216:	03dc      	lsls	r4, r3, #15
   35218:	f57f ad35 	bpl.w	34c86 <am_hal_usb_interrupt_service+0x5e>
        uint16_t count0 = COUNT0(pUSB);
   3521c:	698d      	ldr	r5, [r1, #24]
    Read32bitCount   = ui32Count / sizeof(uint32_t);
   3521e:	f3c5 048a 	ubfx	r4, r5, #2, #11
        am_hal_usb_fifo_unloading(pUSB, AM_HAL_USB_EP0_NUMBER, setup_req, count0);
   35222:	f3c5 060c 	ubfx	r6, r5, #0, #13
    Read32bitRemain  = ui32Count - Read32bitCount * sizeof(uint32_t);
   35226:	a806      	add	r0, sp, #24
   35228:	f005 0503 	and.w	r5, r5, #3
    for (int i = 0; i < Read32bitCount; i++)
   3522c:	2c00      	cmp	r4, #0
   3522e:	f43f af66 	beq.w	350fe <am_hal_usb_interrupt_service+0x4d6>
   35232:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   35236:	4603      	mov	r3, r0
        *((uint32_t *)pucBuf + i) = *FIFOx_ADDR(pUSB, ui8EpNum);
   35238:	6a0a      	ldr	r2, [r1, #32]
   3523a:	f843 2b04 	str.w	r2, [r3], #4
    for (int i = 0; i < Read32bitCount; i++)
   3523e:	42a3      	cmp	r3, r4
   35240:	d1fa      	bne.n	35238 <am_hal_usb_interrupt_service+0x610>
   35242:	e75c      	b.n	350fe <am_hal_usb_interrupt_service+0x4d6>
    if (CSR0_OutPktRdy(pUSB))
   35244:	4976      	ldr	r1, [pc, #472]	@ (35420 <am_hal_usb_interrupt_service+0x7f8>)
   35246:	690b      	ldr	r3, [r1, #16]
   35248:	03d8      	lsls	r0, r3, #15
   3524a:	f57f ad1c 	bpl.w	34c86 <am_hal_usb_interrupt_service+0x5e>
        uint16_t count0 = COUNT0(pUSB);
   3524e:	698d      	ldr	r5, [r1, #24]
    Read32bitCount   = ui32Count / sizeof(uint32_t);
   35250:	f3c5 048a 	ubfx	r4, r5, #2, #11
        am_hal_usb_fifo_unloading(pUSB, AM_HAL_USB_EP0_NUMBER, setup_req, count0);
   35254:	f3c5 060c 	ubfx	r6, r5, #0, #13
    Read32bitRemain  = ui32Count - Read32bitCount * sizeof(uint32_t);
   35258:	a806      	add	r0, sp, #24
   3525a:	f005 0503 	and.w	r5, r5, #3
    for (int i = 0; i < Read32bitCount; i++)
   3525e:	2c00      	cmp	r4, #0
   35260:	f43f af4d 	beq.w	350fe <am_hal_usb_interrupt_service+0x4d6>
   35264:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   35268:	4603      	mov	r3, r0
        *((uint32_t *)pucBuf + i) = *FIFOx_ADDR(pUSB, ui8EpNum);
   3526a:	6a0a      	ldr	r2, [r1, #32]
   3526c:	f843 2b04 	str.w	r2, [r3], #4
    for (int i = 0; i < Read32bitCount; i++)
   35270:	429c      	cmp	r4, r3
   35272:	d1fa      	bne.n	3526a <am_hal_usb_interrupt_service+0x642>
   35274:	e743      	b.n	350fe <am_hal_usb_interrupt_service+0x4d6>
            remaining = pState->ep0_xfer.remaining;
   35276:	f8ba 4076 	ldrh.w	r4, [sl, #118]	@ 0x76
            index     = pState->ep0_xfer.len - remaining;
   3527a:	f8ba 3074 	ldrh.w	r3, [sl, #116]	@ 0x74
            if (CSR0_SetupEnd(pUSB))
   3527e:	4a68      	ldr	r2, [pc, #416]	@ (35420 <am_hal_usb_interrupt_service+0x7f8>)
            index     = pState->ep0_xfer.len - remaining;
   35280:	1b1b      	subs	r3, r3, r4
   35282:	b299      	uxth	r1, r3
            if (CSR0_SetupEnd(pUSB))
   35284:	6913      	ldr	r3, [r2, #16]
   35286:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
                CSR0_ServicedSetupEnd_Set(pUSB);
   3528a:	6913      	ldr	r3, [r2, #16]
            if (CSR0_SetupEnd(pUSB))
   3528c:	d16d      	bne.n	3536a <am_hal_usb_interrupt_service+0x742>
            if (CSR0_SentStall(pUSB))
   3528e:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
                CSR0_SentStall_Clear(pUSB);
   35292:	6913      	ldr	r3, [r2, #16]
            if (CSR0_SentStall(pUSB))
   35294:	d165      	bne.n	35362 <am_hal_usb_interrupt_service+0x73a>
            if (CSR0_OutPktRdy(pUSB))
   35296:	03df      	lsls	r7, r3, #15
   35298:	f57f acf5 	bpl.w	34c86 <am_hal_usb_interrupt_service+0x5e>
                count0 = COUNT0(pUSB);
   3529c:	6997      	ldr	r7, [r2, #24]
                am_hal_usb_fifo_unloading(pUSB, 0x0, pState->ep0_xfer.buf + index, count0);
   3529e:	f8da 3070 	ldr.w	r3, [sl, #112]	@ 0x70
                count0 = COUNT0(pUSB);
   352a2:	f3c7 060c 	ubfx	r6, r7, #0, #13
                pState->ep0_xfer.remaining -= count0;
   352a6:	1ba4      	subs	r4, r4, r6
    for (int i = 0; i < Read32bitCount; i++)
   352a8:	08b5      	lsrs	r5, r6, #2
                am_hal_usb_fifo_unloading(pUSB, 0x0, pState->ep0_xfer.buf + index, count0);
   352aa:	440b      	add	r3, r1
                pState->ep0_xfer.remaining -= count0;
   352ac:	f8aa 4076 	strh.w	r4, [sl, #118]	@ 0x76
    Read32bitRemain  = ui32Count - Read32bitCount * sizeof(uint32_t);
   352b0:	f007 0703 	and.w	r7, r7, #3
    for (int i = 0; i < Read32bitCount; i++)
   352b4:	d008      	beq.n	352c8 <am_hal_usb_interrupt_service+0x6a0>
   352b6:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   352ba:	3d04      	subs	r5, #4
   352bc:	1f19      	subs	r1, r3, #4
        *((uint32_t *)pucBuf + i) = *FIFOx_ADDR(pUSB, ui8EpNum);
   352be:	6a14      	ldr	r4, [r2, #32]
   352c0:	f841 4f04 	str.w	r4, [r1, #4]!
    for (int i = 0; i < Read32bitCount; i++)
   352c4:	42a9      	cmp	r1, r5
   352c6:	d1fa      	bne.n	352be <am_hal_usb_interrupt_service+0x696>
    if (Read32bitRemain)
   352c8:	b187      	cbz	r7, 352ec <am_hal_usb_interrupt_service+0x6c4>
            pucBuf[Read32bitCount*sizeof(uint32_t) + i] = (uint8_t) *pui8FIFO;
   352ca:	4a55      	ldr	r2, [pc, #340]	@ (35420 <am_hal_usb_interrupt_service+0x7f8>)
   352cc:	f026 0103 	bic.w	r1, r6, #3
   352d0:	f892 4020 	ldrb.w	r4, [r2, #32]
   352d4:	545c      	strb	r4, [r3, r1]
        for (int i = 0; i < Read32bitRemain; i++)
   352d6:	2f01      	cmp	r7, #1
   352d8:	d008      	beq.n	352ec <am_hal_usb_interrupt_service+0x6c4>
            pucBuf[Read32bitCount*sizeof(uint32_t) + i] = (uint8_t) *pui8FIFO;
   352da:	440b      	add	r3, r1
        for (int i = 0; i < Read32bitRemain; i++)
   352dc:	2f03      	cmp	r7, #3
            pucBuf[Read32bitCount*sizeof(uint32_t) + i] = (uint8_t) *pui8FIFO;
   352de:	f892 1020 	ldrb.w	r1, [r2, #32]
   352e2:	7059      	strb	r1, [r3, #1]
        for (int i = 0; i < Read32bitRemain; i++)
   352e4:	d102      	bne.n	352ec <am_hal_usb_interrupt_service+0x6c4>
            pucBuf[Read32bitCount*sizeof(uint32_t) + i] = (uint8_t) *pui8FIFO;
   352e6:	f892 2020 	ldrb.w	r2, [r2, #32]
   352ea:	709a      	strb	r2, [r3, #2]
                if (count0 < maxpacket)
   352ec:	42b0      	cmp	r0, r6
   352ee:	f240 8091 	bls.w	35414 <am_hal_usb_interrupt_service+0x7ec>
                    CSR0_ServicedOutPktRdyAndDataEnd_Set(pUSB);
   352f2:	4a4b      	ldr	r2, [pc, #300]	@ (35420 <am_hal_usb_interrupt_service+0x7f8>)
                    pState->eEP0State = AM_HAL_USB_EP0_STATE_STATUS_RX;
   352f4:	2304      	movs	r3, #4
   352f6:	f88a 3056 	strb.w	r3, [sl, #86]	@ 0x56
                    CSR0_ServicedOutPktRdyAndDataEnd_Set(pUSB);
   352fa:	6913      	ldr	r3, [r2, #16]
   352fc:	f443 0390 	orr.w	r3, r3, #4718592	@ 0x480000
   35300:	6113      	str	r3, [r2, #16]
    for (i = AM_HAL_USB_EP1_NUMBER; i <= AM_HAL_USB_EP_MAX_NUMBER; i++)
   35302:	e4c0      	b.n	34c86 <am_hal_usb_interrupt_service+0x5e>
            if (CSR0_SentStall(pUSB))
   35304:	4b46      	ldr	r3, [pc, #280]	@ (35420 <am_hal_usb_interrupt_service+0x7f8>)
   35306:	691a      	ldr	r2, [r3, #16]
   35308:	0352      	lsls	r2, r2, #13
   3530a:	f57f acbc 	bpl.w	34c86 <am_hal_usb_interrupt_service+0x5e>
                CSR0_SentStall_Clear(pUSB);
   3530e:	691a      	ldr	r2, [r3, #16]
   35310:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
   35314:	611a      	str	r2, [r3, #16]
    pState->eEP0State = AM_HAL_USB_EP0_STATE_IDLE;
   35316:	2300      	movs	r3, #0
   35318:	f88a 3056 	strb.w	r3, [sl, #86]	@ 0x56
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   3531c:	f8ca 3070 	str.w	r3, [sl, #112]	@ 0x70
   35320:	f8ca 3074 	str.w	r3, [sl, #116]	@ 0x74
   35324:	f8ca 3078 	str.w	r3, [sl, #120]	@ 0x78
    for (i = AM_HAL_USB_EP1_NUMBER; i <= AM_HAL_USB_EP_MAX_NUMBER; i++)
   35328:	e4ad      	b.n	34c86 <am_hal_usb_interrupt_service+0x5e>
        pState->ep_xfer_complete_callback(ui8EpAddr, ui16XferLen, eXferCode, param);
   3532a:	f8da 4104 	ldr.w	r4, [sl, #260]	@ 0x104
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   3532e:	f8ca 3070 	str.w	r3, [sl, #112]	@ 0x70
   35332:	f8ca 3074 	str.w	r3, [sl, #116]	@ 0x74
   35336:	f8ca 3078 	str.w	r3, [sl, #120]	@ 0x78
        pState->ep_xfer_complete_callback(ui8EpAddr, ui16XferLen, eXferCode, param);
   3533a:	461a      	mov	r2, r3
   3533c:	2080      	movs	r0, #128	@ 0x80
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   3533e:	f10a 0570 	add.w	r5, sl, #112	@ 0x70
        pState->ep_xfer_complete_callback(ui8EpAddr, ui16XferLen, eXferCode, param);
   35342:	47a0      	blx	r4
   35344:	e75e      	b.n	35204 <am_hal_usb_interrupt_service+0x5dc>
   35346:	f8da 4104 	ldr.w	r4, [sl, #260]	@ 0x104
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   3534a:	f8ca 3070 	str.w	r3, [sl, #112]	@ 0x70
   3534e:	f8ca 3074 	str.w	r3, [sl, #116]	@ 0x74
   35352:	f8ca 3078 	str.w	r3, [sl, #120]	@ 0x78
        pState->ep_xfer_complete_callback(ui8EpAddr, ui16XferLen, eXferCode, param);
   35356:	461a      	mov	r2, r3
   35358:	4618      	mov	r0, r3
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   3535a:	f10a 0570 	add.w	r5, sl, #112	@ 0x70
        pState->ep_xfer_complete_callback(ui8EpAddr, ui16XferLen, eXferCode, param);
   3535e:	47a0      	blx	r4
   35360:	e6b0      	b.n	350c4 <am_hal_usb_interrupt_service+0x49c>
                CSR0_SentStall_Clear(pUSB);
   35362:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
   35366:	6113      	str	r3, [r2, #16]
    for (i = AM_HAL_USB_EP1_NUMBER; i <= AM_HAL_USB_EP_MAX_NUMBER; i++)
   35368:	e48d      	b.n	34c86 <am_hal_usb_interrupt_service+0x5e>
                CSR0_ServicedSetupEnd_Set(pUSB);
   3536a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
   3536e:	6113      	str	r3, [r2, #16]
                if (!CSR0_OutPktRdy(pUSB))
   35370:	6915      	ldr	r5, [r2, #16]
   35372:	f415 3580 	ands.w	r5, r5, #65536	@ 0x10000
   35376:	f47f ac86 	bne.w	34c86 <am_hal_usb_interrupt_service+0x5e>
        pState->ep_xfer_complete_callback(ui8EpAddr, ui16XferLen, eXferCode, param);
   3537a:	f8da 4104 	ldr.w	r4, [sl, #260]	@ 0x104
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   3537e:	f8ca 5070 	str.w	r5, [sl, #112]	@ 0x70
   35382:	f8ca 5074 	str.w	r5, [sl, #116]	@ 0x74
   35386:	f8ca 5078 	str.w	r5, [sl, #120]	@ 0x78
        pState->ep_xfer_complete_callback(ui8EpAddr, ui16XferLen, eXferCode, param);
   3538a:	462b      	mov	r3, r5
   3538c:	2206      	movs	r2, #6
   3538e:	4628      	mov	r0, r5
                am_hal_usb_xfer_complete(pState, &pState->ep0_xfer, 0x0 | AM_HAL_USB_EP_DIR_IN_MASK, pState->ep0_xfer.len - pState->ep0_xfer.remaining, USB_XFER_ERROR, NULL);
   35390:	f10a 0670 	add.w	r6, sl, #112	@ 0x70
        pState->ep_xfer_complete_callback(ui8EpAddr, ui16XferLen, eXferCode, param);
   35394:	47a0      	blx	r4
    pState->eEP0State = AM_HAL_USB_EP0_STATE_IDLE;
   35396:	f88a 5056 	strb.w	r5, [sl, #86]	@ 0x56
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   3539a:	f8ca 5070 	str.w	r5, [sl, #112]	@ 0x70
   3539e:	6075      	str	r5, [r6, #4]
   353a0:	60b5      	str	r5, [r6, #8]
    for (i = AM_HAL_USB_EP1_NUMBER; i <= AM_HAL_USB_EP_MAX_NUMBER; i++)
   353a2:	e470      	b.n	34c86 <am_hal_usb_interrupt_service+0x5e>
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   353a4:	2500      	movs	r5, #0
                CSR0_ServicedSetupEnd_Set(pUSB);
   353a6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
   353aa:	6113      	str	r3, [r2, #16]
        pState->ep_xfer_complete_callback(ui8EpAddr, ui16XferLen, eXferCode, param);
   353ac:	f8da 4104 	ldr.w	r4, [sl, #260]	@ 0x104
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   353b0:	f8ca 5070 	str.w	r5, [sl, #112]	@ 0x70
   353b4:	f8ca 5074 	str.w	r5, [sl, #116]	@ 0x74
   353b8:	f8ca 5078 	str.w	r5, [sl, #120]	@ 0x78
        pState->ep_xfer_complete_callback(ui8EpAddr, ui16XferLen, eXferCode, param);
   353bc:	462b      	mov	r3, r5
   353be:	2206      	movs	r2, #6
   353c0:	2080      	movs	r0, #128	@ 0x80
   353c2:	e7e5      	b.n	35390 <am_hal_usb_interrupt_service+0x768>
                    pState->ep0_xfer.remaining -= maxpacket;
   353c4:	1a24      	subs	r4, r4, r0
    for (int i = 0; i < Write32bitCount; i++)
   353c6:	0887      	lsrs	r7, r0, #2
                    pState->ep0_xfer.remaining -= maxpacket;
   353c8:	f8aa 4076 	strh.w	r4, [sl, #118]	@ 0x76
    Write32bitRemain  = ui32Count - Write32bitCount * sizeof(uint32_t);
   353cc:	f000 0403 	and.w	r4, r0, #3
    for (int i = 0; i < Write32bitCount; i++)
   353d0:	d007      	beq.n	353e2 <am_hal_usb_interrupt_service+0x7ba>
   353d2:	186b      	adds	r3, r5, r1
   353d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
        *FIFOx_ADDR(pUSB, ui8EpNum) = *((uint32_t *)pucBuf + i);
   353d8:	f853 6b04 	ldr.w	r6, [r3], #4
   353dc:	6216      	str	r6, [r2, #32]
    for (int i = 0; i < Write32bitCount; i++)
   353de:	42bb      	cmp	r3, r7
   353e0:	d1fa      	bne.n	353d8 <am_hal_usb_interrupt_service+0x7b0>
    if (Write32bitRemain)
   353e2:	b18c      	cbz	r4, 35408 <am_hal_usb_interrupt_service+0x7e0>
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   353e4:	f020 0303 	bic.w	r3, r0, #3
   353e8:	440b      	add	r3, r1
   353ea:	4a0d      	ldr	r2, [pc, #52]	@ (35420 <am_hal_usb_interrupt_service+0x7f8>)
   353ec:	5ce9      	ldrb	r1, [r5, r3]
   353ee:	f882 1020 	strb.w	r1, [r2, #32]
        for (int i = 0; i < Write32bitRemain; i++)
   353f2:	2c01      	cmp	r4, #1
   353f4:	d008      	beq.n	35408 <am_hal_usb_interrupt_service+0x7e0>
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   353f6:	441d      	add	r5, r3
        for (int i = 0; i < Write32bitRemain; i++)
   353f8:	2c03      	cmp	r4, #3
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   353fa:	786b      	ldrb	r3, [r5, #1]
   353fc:	f882 3020 	strb.w	r3, [r2, #32]
        for (int i = 0; i < Write32bitRemain; i++)
   35400:	d102      	bne.n	35408 <am_hal_usb_interrupt_service+0x7e0>
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   35402:	78ab      	ldrb	r3, [r5, #2]
   35404:	f882 3020 	strb.w	r3, [r2, #32]
                    CSR0_InPktRdy_Set(pUSB);
   35408:	4a05      	ldr	r2, [pc, #20]	@ (35420 <am_hal_usb_interrupt_service+0x7f8>)
   3540a:	6913      	ldr	r3, [r2, #16]
   3540c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
   35410:	6113      	str	r3, [r2, #16]
    for (i = AM_HAL_USB_EP1_NUMBER; i <= AM_HAL_USB_EP_MAX_NUMBER; i++)
   35412:	e438      	b.n	34c86 <am_hal_usb_interrupt_service+0x5e>
                    CSR0_ServicedOutPktRdy_Set(pUSB);
   35414:	4a02      	ldr	r2, [pc, #8]	@ (35420 <am_hal_usb_interrupt_service+0x7f8>)
   35416:	6913      	ldr	r3, [r2, #16]
   35418:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
   3541c:	6113      	str	r3, [r2, #16]
    for (i = AM_HAL_USB_EP1_NUMBER; i <= AM_HAL_USB_EP_MAX_NUMBER; i++)
   3541e:	e432      	b.n	34c86 <am_hal_usb_interrupt_service+0x5e>
   35420:	400b0000 	.word	0x400b0000

00035424 <_Znwj>:
    erpc_free(ptr);
}

void *erpc_malloc(size_t size)
{
    void *p = ns_malloc(size);
   35424:	f7f7 b820 	b.w	2c468 <ns_malloc>

00035428 <_Znaj>:
void *operator new[](size_t count) THROW_BADALLOC
   35428:	f7f7 b81e 	b.w	2c468 <ns_malloc>

0003542c <_ZdlPv>:
    return p;
}

void erpc_free(void *ptr)
{
    ns_free(ptr);
   3542c:	f7f7 b828 	b.w	2c480 <ns_free>

00035430 <_ZdlPvj>:
   35430:	f7f7 b826 	b.w	2c480 <ns_free>

00035434 <_ZdaPv>:
void operator delete[](void *ptr) THROW NOEXCEPT
   35434:	f7f7 b824 	b.w	2c480 <ns_free>

00035438 <_ZdaPvj>:
void operator delete[](void *ptr, std::size_t count) THROW NOEXCEPT
   35438:	f7f7 b822 	b.w	2c480 <ns_free>

0003543c <am_hal_adc_initialize>:
   3543c:	2800      	cmp	r0, #0
   3543e:	d176      	bne.n	3552e <am_hal_adc_initialize+0xf2>
   35440:	2900      	cmp	r1, #0
   35442:	d076      	beq.n	35532 <am_hal_adc_initialize+0xf6>
   35444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35446:	4b3c      	ldr	r3, [pc, #240]	@ (35538 <am_hal_adc_initialize+0xfc>)
   35448:	78dd      	ldrb	r5, [r3, #3]
   3544a:	f015 0501 	ands.w	r5, r5, #1
   3544e:	d131      	bne.n	354b4 <am_hal_adc_initialize+0x78>
   35450:	681a      	ldr	r2, [r3, #0]
   35452:	483a      	ldr	r0, [pc, #232]	@ (3553c <am_hal_adc_initialize+0x100>)
   35454:	4c3a      	ldr	r4, [pc, #232]	@ (35540 <am_hal_adc_initialize+0x104>)
   35456:	f002 427e 	and.w	r2, r2, #4261412864	@ 0xfe000000
   3545a:	4302      	orrs	r2, r0
   3545c:	4839      	ldr	r0, [pc, #228]	@ (35544 <am_hal_adc_initialize+0x108>)
   3545e:	e9c3 2500 	strd	r2, r5, [r3]
   35462:	2201      	movs	r2, #1
   35464:	6005      	str	r5, [r0, #0]
   35466:	600b      	str	r3, [r1, #0]
   35468:	4610      	mov	r0, r2
   3546a:	4623      	mov	r3, r4
   3546c:	f44f 6198 	mov.w	r1, #1216	@ 0x4c0
   35470:	f000 ff4c 	bl	3630c <am_hal_mram_info_read>
   35474:	2201      	movs	r2, #1
   35476:	1d23      	adds	r3, r4, #4
   35478:	f240 41c1 	movw	r1, #1217	@ 0x4c1
   3547c:	4607      	mov	r7, r0
   3547e:	4610      	mov	r0, r2
   35480:	f000 ff44 	bl	3630c <am_hal_mram_info_read>
   35484:	2201      	movs	r2, #1
   35486:	f104 0308 	add.w	r3, r4, #8
   3548a:	4606      	mov	r6, r0
   3548c:	f240 41c2 	movw	r1, #1218	@ 0x4c2
   35490:	4610      	mov	r0, r2
   35492:	f000 ff3b 	bl	3630c <am_hal_mram_info_read>
   35496:	6822      	ldr	r2, [r4, #0]
   35498:	3201      	adds	r2, #1
   3549a:	d00d      	beq.n	354b8 <am_hal_adc_initialize+0x7c>
   3549c:	6862      	ldr	r2, [r4, #4]
   3549e:	3201      	adds	r2, #1
   354a0:	d00a      	beq.n	354b8 <am_hal_adc_initialize+0x7c>
   354a2:	68a2      	ldr	r2, [r4, #8]
   354a4:	3201      	adds	r2, #1
   354a6:	d007      	beq.n	354b8 <am_hal_adc_initialize+0x7c>
   354a8:	4330      	orrs	r0, r6
   354aa:	ea50 0307 	orrs.w	r3, r0, r7
   354ae:	d103      	bne.n	354b8 <am_hal_adc_initialize+0x7c>
   354b0:	2501      	movs	r5, #1
   354b2:	e007      	b.n	354c4 <am_hal_adc_initialize+0x88>
   354b4:	2007      	movs	r0, #7
   354b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   354b8:	4923      	ldr	r1, [pc, #140]	@ (35548 <am_hal_adc_initialize+0x10c>)
   354ba:	4a24      	ldr	r2, [pc, #144]	@ (3554c <am_hal_adc_initialize+0x110>)
   354bc:	4b24      	ldr	r3, [pc, #144]	@ (35550 <am_hal_adc_initialize+0x114>)
   354be:	6021      	str	r1, [r4, #0]
   354c0:	6062      	str	r2, [r4, #4]
   354c2:	60a3      	str	r3, [r4, #8]
   354c4:	4e23      	ldr	r6, [pc, #140]	@ (35554 <am_hal_adc_initialize+0x118>)
   354c6:	7325      	strb	r5, [r4, #12]
   354c8:	2201      	movs	r2, #1
   354ca:	1d33      	adds	r3, r6, #4
   354cc:	f240 41ca 	movw	r1, #1226	@ 0x4ca
   354d0:	4610      	mov	r0, r2
   354d2:	f000 ff1b 	bl	3630c <am_hal_mram_info_read>
   354d6:	2201      	movs	r2, #1
   354d8:	4633      	mov	r3, r6
   354da:	f240 41cb 	movw	r1, #1227	@ 0x4cb
   354de:	4604      	mov	r4, r0
   354e0:	4610      	mov	r0, r2
   354e2:	f000 ff13 	bl	3630c <am_hal_mram_info_read>
   354e6:	4b1c      	ldr	r3, [pc, #112]	@ (35558 <am_hal_adc_initialize+0x11c>)
   354e8:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
   354ec:	f36f 0200 	bfc	r2, #0, #1
   354f0:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
   354f4:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
   354f8:	f36f 0207 	bfc	r2, #0, #8
   354fc:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
   35500:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
   35504:	2104      	movs	r1, #4
   35506:	f361 220f 	bfi	r2, r1, #8, #8
   3550a:	4320      	orrs	r0, r4
   3550c:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
   35510:	d109      	bne.n	35526 <am_hal_adc_initialize+0xea>
   35512:	6873      	ldr	r3, [r6, #4]
   35514:	3301      	adds	r3, #1
   35516:	d006      	beq.n	35526 <am_hal_adc_initialize+0xea>
   35518:	6833      	ldr	r3, [r6, #0]
   3551a:	3301      	adds	r3, #1
   3551c:	d003      	beq.n	35526 <am_hal_adc_initialize+0xea>
   3551e:	4b0f      	ldr	r3, [pc, #60]	@ (3555c <am_hal_adc_initialize+0x120>)
   35520:	2201      	movs	r2, #1
   35522:	701a      	strb	r2, [r3, #0]
   35524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35526:	4b0d      	ldr	r3, [pc, #52]	@ (3555c <am_hal_adc_initialize+0x120>)
   35528:	2000      	movs	r0, #0
   3552a:	7018      	strb	r0, [r3, #0]
   3552c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3552e:	2005      	movs	r0, #5
   35530:	4770      	bx	lr
   35532:	2006      	movs	r0, #6
   35534:	4770      	bx	lr
   35536:	bf00      	nop
   35538:	10053768 	.word	0x10053768
   3553c:	01afafaf 	.word	0x01afafaf
   35540:	100537c0 	.word	0x100537c0
   35544:	10053764 	.word	0x10053764
   35548:	4395c000 	.word	0x4395c000
   3554c:	3f839874 	.word	0x3f839874
   35550:	bb8c47a1 	.word	0xbb8c47a1
   35554:	100537b4 	.word	0x100537b4
   35558:	40020000 	.word	0x40020000
   3555c:	100537ac 	.word	0x100537ac

00035560 <am_hal_adc_configure>:
   35560:	b390      	cbz	r0, 355c8 <am_hal_adc_configure+0x68>
   35562:	6803      	ldr	r3, [r0, #0]
   35564:	4a19      	ldr	r2, [pc, #100]	@ (355cc <am_hal_adc_configure+0x6c>)
   35566:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   3556a:	4293      	cmp	r3, r2
   3556c:	d12c      	bne.n	355c8 <am_hal_adc_configure+0x68>
   3556e:	780b      	ldrb	r3, [r1, #0]
   35570:	2b02      	cmp	r3, #2
   35572:	d127      	bne.n	355c4 <am_hal_adc_configure+0x64>
   35574:	784b      	ldrb	r3, [r1, #1]
   35576:	7988      	ldrb	r0, [r1, #6]
   35578:	788a      	ldrb	r2, [r1, #2]
   3557a:	f891 c003 	ldrb.w	ip, [r1, #3]
   3557e:	051b      	lsls	r3, r3, #20
   35580:	0080      	lsls	r0, r0, #2
   35582:	f000 0004 	and.w	r0, r0, #4
   35586:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
   3558a:	04d2      	lsls	r2, r2, #19
   3558c:	4303      	orrs	r3, r0
   3558e:	f402 2200 	and.w	r2, r2, #524288	@ 0x80000
   35592:	7908      	ldrb	r0, [r1, #4]
   35594:	4313      	orrs	r3, r2
   35596:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
   3559a:	794a      	ldrb	r2, [r1, #5]
   3559c:	f40c 2ce0 	and.w	ip, ip, #458752	@ 0x70000
   355a0:	0101      	lsls	r1, r0, #4
   355a2:	ea43 030c 	orr.w	r3, r3, ip
   355a6:	f001 0110 	and.w	r1, r1, #16
   355aa:	00d2      	lsls	r2, r2, #3
   355ac:	430b      	orrs	r3, r1
   355ae:	f002 0208 	and.w	r2, r2, #8
   355b2:	4313      	orrs	r3, r2
   355b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
   355b8:	4a05      	ldr	r2, [pc, #20]	@ (355d0 <am_hal_adc_configure+0x70>)
   355ba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
   355be:	6013      	str	r3, [r2, #0]
   355c0:	2000      	movs	r0, #0
   355c2:	4770      	bx	lr
   355c4:	2006      	movs	r0, #6
   355c6:	4770      	bx	lr
   355c8:	2002      	movs	r0, #2
   355ca:	4770      	bx	lr
   355cc:	01afafaf 	.word	0x01afafaf
   355d0:	40038000 	.word	0x40038000

000355d4 <am_hal_adc_configure_slot>:
   355d4:	b378      	cbz	r0, 35636 <am_hal_adc_configure_slot+0x62>
   355d6:	6803      	ldr	r3, [r0, #0]
   355d8:	481a      	ldr	r0, [pc, #104]	@ (35644 <am_hal_adc_configure_slot+0x70>)
   355da:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   355de:	4283      	cmp	r3, r0
   355e0:	d129      	bne.n	35636 <am_hal_adc_configure_slot+0x62>
   355e2:	2907      	cmp	r1, #7
   355e4:	d829      	bhi.n	3563a <am_hal_adc_configure_slot+0x66>
   355e6:	b410      	push	{r4}
   355e8:	6854      	ldr	r4, [r2, #4]
   355ea:	2c3f      	cmp	r4, #63	@ 0x3f
   355ec:	d827      	bhi.n	3563e <am_hal_adc_configure_slot+0x6a>
   355ee:	7ad3      	ldrb	r3, [r2, #11]
   355f0:	7810      	ldrb	r0, [r2, #0]
   355f2:	f892 c008 	ldrb.w	ip, [r2, #8]
   355f6:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
   355fa:	7a94      	ldrb	r4, [r2, #10]
   355fc:	0600      	lsls	r0, r0, #24
   355fe:	f000 60e0 	and.w	r0, r0, #117440512	@ 0x7000000
   35602:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
   35606:	4303      	orrs	r3, r0
   35608:	7a50      	ldrb	r0, [r2, #9]
   3560a:	4a0f      	ldr	r2, [pc, #60]	@ (35648 <am_hal_adc_configure_slot+0x74>)
   3560c:	4c0f      	ldr	r4, [pc, #60]	@ (3564c <am_hal_adc_configure_slot+0x78>)
   3560e:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
   35612:	0200      	lsls	r0, r0, #8
   35614:	440a      	add	r2, r1
   35616:	f40c 3c40 	and.w	ip, ip, #196608	@ 0x30000
   3561a:	f400 6170 	and.w	r1, r0, #3840	@ 0xf00
   3561e:	ea43 030c 	orr.w	r3, r3, ip
   35622:	0092      	lsls	r2, r2, #2
   35624:	430b      	orrs	r3, r1
   35626:	6013      	str	r3, [r2, #0]
   35628:	6823      	ldr	r3, [r4, #0]
   3562a:	3301      	adds	r3, #1
   3562c:	2000      	movs	r0, #0
   3562e:	6023      	str	r3, [r4, #0]
   35630:	f85d 4b04 	ldr.w	r4, [sp], #4
   35634:	4770      	bx	lr
   35636:	2002      	movs	r0, #2
   35638:	4770      	bx	lr
   3563a:	2005      	movs	r0, #5
   3563c:	4770      	bx	lr
   3563e:	2006      	movs	r0, #6
   35640:	e7f6      	b.n	35630 <am_hal_adc_configure_slot+0x5c>
   35642:	bf00      	nop
   35644:	01afafaf 	.word	0x01afafaf
   35648:	1000e003 	.word	0x1000e003
   3564c:	10053764 	.word	0x10053764

00035650 <am_hal_adc_control>:
   35650:	b158      	cbz	r0, 3566a <am_hal_adc_control+0x1a>
   35652:	6803      	ldr	r3, [r0, #0]
   35654:	4841      	ldr	r0, [pc, #260]	@ (3575c <am_hal_adc_control+0x10c>)
   35656:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   3565a:	4283      	cmp	r3, r0
   3565c:	d105      	bne.n	3566a <am_hal_adc_control+0x1a>
   3565e:	2903      	cmp	r1, #3
   35660:	d876      	bhi.n	35750 <am_hal_adc_control+0x100>
   35662:	e8df f001 	tbb	[pc, r1]
   35666:	2a18      	.short	0x2a18
   35668:	045e      	.short	0x045e
   3566a:	2002      	movs	r0, #2
   3566c:	4770      	bx	lr
   3566e:	2a00      	cmp	r2, #0
   35670:	d06e      	beq.n	35750 <am_hal_adc_control+0x100>
   35672:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 35760 <am_hal_adc_control+0x110>
   35676:	ed92 7a03 	vldr	s14, [r2, #12]
   3567a:	eeb4 7a67 	vcmp.f32	s14, s15
   3567e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   35682:	d163      	bne.n	3574c <am_hal_adc_control+0xfc>
   35684:	4b37      	ldr	r3, [pc, #220]	@ (35764 <am_hal_adc_control+0x114>)
   35686:	6819      	ldr	r1, [r3, #0]
   35688:	6011      	str	r1, [r2, #0]
   3568a:	2000      	movs	r0, #0
   3568c:	685b      	ldr	r3, [r3, #4]
   3568e:	6090      	str	r0, [r2, #8]
   35690:	60d0      	str	r0, [r2, #12]
   35692:	6053      	str	r3, [r2, #4]
   35694:	4770      	bx	lr
   35696:	6853      	ldr	r3, [r2, #4]
   35698:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
   3569c:	d25a      	bcs.n	35754 <am_hal_adc_control+0x104>
   3569e:	b410      	push	{r4}
   356a0:	6894      	ldr	r4, [r2, #8]
   356a2:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
   356a6:	d257      	bcs.n	35758 <am_hal_adc_control+0x108>
   356a8:	492f      	ldr	r1, [pc, #188]	@ (35768 <am_hal_adc_control+0x118>)
   356aa:	7812      	ldrb	r2, [r2, #0]
   356ac:	62cb      	str	r3, [r1, #44]	@ 0x2c
   356ae:	2000      	movs	r0, #0
   356b0:	630c      	str	r4, [r1, #48]	@ 0x30
   356b2:	634a      	str	r2, [r1, #52]	@ 0x34
   356b4:	f85d 4b04 	ldr.w	r4, [sp], #4
   356b8:	4770      	bx	lr
   356ba:	2a00      	cmp	r2, #0
   356bc:	d048      	beq.n	35750 <am_hal_adc_control+0x100>
   356be:	eddf 7a28 	vldr	s15, [pc, #160]	@ 35760 <am_hal_adc_control+0x110>
   356c2:	ed92 7a02 	vldr	s14, [r2, #8]
   356c6:	eeb4 7a67 	vcmp.f32	s14, s15
   356ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   356ce:	d13d      	bne.n	3574c <am_hal_adc_control+0xfc>
   356d0:	4b26      	ldr	r3, [pc, #152]	@ (3576c <am_hal_adc_control+0x11c>)
   356d2:	edd2 6a00 	vldr	s13, [r2]
   356d6:	edd3 7a00 	vldr	s15, [r3]
   356da:	eef5 7a40 	vcmp.f32	s15, #0.0
   356de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   356e2:	d110      	bne.n	35706 <am_hal_adc_control+0xb6>
   356e4:	4922      	ldr	r1, [pc, #136]	@ (35770 <am_hal_adc_control+0x120>)
   356e6:	ed9f 6a23 	vldr	s12, [pc, #140]	@ 35774 <am_hal_adc_control+0x124>
   356ea:	ed91 7a01 	vldr	s14, [r1, #4]
   356ee:	edd1 5a02 	vldr	s11, [r1, #8]
   356f2:	edd1 7a00 	vldr	s15, [r1]
   356f6:	ee37 7a25 	vadd.f32	s14, s14, s11
   356fa:	ee27 7a06 	vmul.f32	s14, s14, s12
   356fe:	ee77 7a27 	vadd.f32	s15, s14, s15
   35702:	edc3 7a00 	vstr	s15, [r3]
   35706:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 35778 <am_hal_adc_control+0x128>
   3570a:	ed9f 6a1c 	vldr	s12, [pc, #112]	@ 3577c <am_hal_adc_control+0x12c>
   3570e:	ee26 7a87 	vmul.f32	s14, s13, s14
   35712:	2000      	movs	r0, #0
   35714:	ee77 7a87 	vadd.f32	s15, s15, s14
   35718:	ee77 7ac6 	vsub.f32	s15, s15, s12
   3571c:	edc2 7a01 	vstr	s15, [r2, #4]
   35720:	4770      	bx	lr
   35722:	b1aa      	cbz	r2, 35750 <am_hal_adc_control+0x100>
   35724:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 35760 <am_hal_adc_control+0x110>
   35728:	ed92 7a03 	vldr	s14, [r2, #12]
   3572c:	eeb4 7a67 	vcmp.f32	s14, s15
   35730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   35734:	d10a      	bne.n	3574c <am_hal_adc_control+0xfc>
   35736:	4b0e      	ldr	r3, [pc, #56]	@ (35770 <am_hal_adc_control+0x120>)
   35738:	6819      	ldr	r1, [r3, #0]
   3573a:	6011      	str	r1, [r2, #0]
   3573c:	6859      	ldr	r1, [r3, #4]
   3573e:	6051      	str	r1, [r2, #4]
   35740:	6899      	ldr	r1, [r3, #8]
   35742:	6091      	str	r1, [r2, #8]
   35744:	7b1b      	ldrb	r3, [r3, #12]
   35746:	60d3      	str	r3, [r2, #12]
   35748:	2000      	movs	r0, #0
   3574a:	4770      	bx	lr
   3574c:	2007      	movs	r0, #7
   3574e:	4770      	bx	lr
   35750:	2006      	movs	r0, #6
   35752:	4770      	bx	lr
   35754:	2005      	movs	r0, #5
   35756:	4770      	bx	lr
   35758:	2005      	movs	r0, #5
   3575a:	e7ab      	b.n	356b4 <am_hal_adc_control+0x64>
   3575c:	01afafaf 	.word	0x01afafaf
   35760:	c2f6e979 	.word	0xc2f6e979
   35764:	100537b4 	.word	0x100537b4
   35768:	40038000 	.word	0x40038000
   3576c:	100537b0 	.word	0x100537b0
   35770:	100537c0 	.word	0x100537c0
   35774:	c3910000 	.word	0xc3910000
   35778:	43910000 	.word	0x43910000
   3577c:	43889333 	.word	0x43889333

00035780 <am_hal_adc_enable>:
   35780:	b328      	cbz	r0, 357ce <am_hal_adc_enable+0x4e>
   35782:	6803      	ldr	r3, [r0, #0]
   35784:	4a14      	ldr	r2, [pc, #80]	@ (357d8 <am_hal_adc_enable+0x58>)
   35786:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   3578a:	4293      	cmp	r3, r2
   3578c:	d11f      	bne.n	357ce <am_hal_adc_enable+0x4e>
   3578e:	78c3      	ldrb	r3, [r0, #3]
   35790:	f013 0302 	ands.w	r3, r3, #2
   35794:	d11d      	bne.n	357d2 <am_hal_adc_enable+0x52>
   35796:	b410      	push	{r4}
   35798:	4a10      	ldr	r2, [pc, #64]	@ (357dc <am_hal_adc_enable+0x5c>)
   3579a:	f8d2 1200 	ldr.w	r1, [r2, #512]	@ 0x200
   3579e:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
   357a2:	f8d2 4204 	ldr.w	r4, [r2, #516]	@ 0x204
   357a6:	6813      	ldr	r3, [r2, #0]
   357a8:	f043 0301 	orr.w	r3, r3, #1
   357ac:	6013      	str	r3, [r2, #0]
   357ae:	78c3      	ldrb	r3, [r0, #3]
   357b0:	f043 0302 	orr.w	r3, r3, #2
   357b4:	70c3      	strb	r3, [r0, #3]
   357b6:	07a3      	lsls	r3, r4, #30
   357b8:	bf04      	itt	eq
   357ba:	2303      	moveq	r3, #3
   357bc:	f8c2 3208 	streq.w	r3, [r2, #520]	@ 0x208
   357c0:	4b06      	ldr	r3, [pc, #24]	@ (357dc <am_hal_adc_enable+0x5c>)
   357c2:	f85d 4b04 	ldr.w	r4, [sp], #4
   357c6:	f8c3 1200 	str.w	r1, [r3, #512]	@ 0x200
   357ca:	2000      	movs	r0, #0
   357cc:	4770      	bx	lr
   357ce:	2002      	movs	r0, #2
   357d0:	4770      	bx	lr
   357d2:	2000      	movs	r0, #0
   357d4:	4770      	bx	lr
   357d6:	bf00      	nop
   357d8:	01afafaf 	.word	0x01afafaf
   357dc:	40038000 	.word	0x40038000

000357e0 <am_hal_adc_samples_read>:
   357e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   357e4:	9d07      	ldr	r5, [sp, #28]
   357e6:	2800      	cmp	r0, #0
   357e8:	f000 80a5 	beq.w	35936 <am_hal_adc_samples_read+0x156>
   357ec:	6804      	ldr	r4, [r0, #0]
   357ee:	4891      	ldr	r0, [pc, #580]	@ (35a34 <am_hal_adc_samples_read+0x254>)
   357f0:	f024 447e 	bic.w	r4, r4, #4261412864	@ 0xfe000000
   357f4:	4284      	cmp	r4, r0
   357f6:	f040 809e 	bne.w	35936 <am_hal_adc_samples_read+0x156>
   357fa:	2d00      	cmp	r5, #0
   357fc:	f000 8118 	beq.w	35a30 <am_hal_adc_samples_read+0x250>
   35800:	2000      	movs	r0, #0
   35802:	681c      	ldr	r4, [r3, #0]
   35804:	6018      	str	r0, [r3, #0]
   35806:	2a00      	cmp	r2, #0
   35808:	f000 80ab 	beq.w	35962 <am_hal_adc_samples_read+0x182>
   3580c:	498a      	ldr	r1, [pc, #552]	@ (35a38 <am_hal_adc_samples_read+0x258>)
   3580e:	68c8      	ldr	r0, [r1, #12]
   35810:	6909      	ldr	r1, [r1, #16]
   35812:	f3c1 2103 	ubfx	r1, r1, #8, #4
   35816:	2908      	cmp	r1, #8
   35818:	4987      	ldr	r1, [pc, #540]	@ (35a38 <am_hal_adc_samples_read+0x258>)
   3581a:	f3c0 2e03 	ubfx	lr, r0, #8, #4
   3581e:	6949      	ldr	r1, [r1, #20]
   35820:	f1ae 0e08 	sub.w	lr, lr, #8
   35824:	fabe fe8e 	clz	lr, lr
   35828:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   3582c:	f3c1 2103 	ubfx	r1, r1, #8, #4
   35830:	bf08      	it	eq
   35832:	f04e 0e02 	orreq.w	lr, lr, #2
   35836:	2908      	cmp	r1, #8
   35838:	497f      	ldr	r1, [pc, #508]	@ (35a38 <am_hal_adc_samples_read+0x258>)
   3583a:	6989      	ldr	r1, [r1, #24]
   3583c:	f3c1 2103 	ubfx	r1, r1, #8, #4
   35840:	bf08      	it	eq
   35842:	f04e 0e04 	orreq.w	lr, lr, #4
   35846:	2908      	cmp	r1, #8
   35848:	497b      	ldr	r1, [pc, #492]	@ (35a38 <am_hal_adc_samples_read+0x258>)
   3584a:	69c9      	ldr	r1, [r1, #28]
   3584c:	f3c1 2103 	ubfx	r1, r1, #8, #4
   35850:	bf08      	it	eq
   35852:	f04e 0e08 	orreq.w	lr, lr, #8
   35856:	2908      	cmp	r1, #8
   35858:	4977      	ldr	r1, [pc, #476]	@ (35a38 <am_hal_adc_samples_read+0x258>)
   3585a:	6a09      	ldr	r1, [r1, #32]
   3585c:	f3c1 2103 	ubfx	r1, r1, #8, #4
   35860:	bf08      	it	eq
   35862:	f04e 0e10 	orreq.w	lr, lr, #16
   35866:	2908      	cmp	r1, #8
   35868:	4973      	ldr	r1, [pc, #460]	@ (35a38 <am_hal_adc_samples_read+0x258>)
   3586a:	6a49      	ldr	r1, [r1, #36]	@ 0x24
   3586c:	f3c1 2103 	ubfx	r1, r1, #8, #4
   35870:	bf08      	it	eq
   35872:	f04e 0e20 	orreq.w	lr, lr, #32
   35876:	2908      	cmp	r1, #8
   35878:	496f      	ldr	r1, [pc, #444]	@ (35a38 <am_hal_adc_samples_read+0x258>)
   3587a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
   3587c:	f3c1 2103 	ubfx	r1, r1, #8, #4
   35880:	bf08      	it	eq
   35882:	f04e 0e40 	orreq.w	lr, lr, #64	@ 0x40
   35886:	2908      	cmp	r1, #8
   35888:	496c      	ldr	r1, [pc, #432]	@ (35a3c <am_hal_adc_samples_read+0x25c>)
   3588a:	7809      	ldrb	r1, [r1, #0]
   3588c:	bf08      	it	eq
   3588e:	f04e 0e80 	orreq.w	lr, lr, #128	@ 0x80
   35892:	2900      	cmp	r1, #0
   35894:	d052      	beq.n	3593c <am_hal_adc_samples_read+0x15c>
   35896:	eddf 3a6a 	vldr	s7, [pc, #424]	@ 35a40 <am_hal_adc_samples_read+0x260>
   3589a:	ed9f 4a6a 	vldr	s8, [pc, #424]	@ 35a44 <am_hal_adc_samples_read+0x264>
   3589e:	eddf 4a6a 	vldr	s9, [pc, #424]	@ 35a48 <am_hal_adc_samples_read+0x268>
   358a2:	ed9f 5a6a 	vldr	s10, [pc, #424]	@ 35a4c <am_hal_adc_samples_read+0x26c>
   358a6:	4e6a      	ldr	r6, [pc, #424]	@ (35a50 <am_hal_adc_samples_read+0x270>)
   358a8:	f105 0108 	add.w	r1, r5, #8
   358ac:	1f10      	subs	r0, r2, #4
   358ae:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
   358b2:	f240 45a6 	movw	r5, #1190	@ 0x4a6
   358b6:	f850 2f04 	ldr.w	r2, [r0, #4]!
   358ba:	f3c2 7702 	ubfx	r7, r2, #28, #3
   358be:	f3c2 0213 	ubfx	r2, r2, #0, #20
   358c2:	ea4f 1c92 	mov.w	ip, r2, lsr #6
   358c6:	fa2e f807 	lsr.w	r8, lr, r7
   358ca:	fb05 fc0c 	mul.w	ip, r5, ip
   358ce:	f018 0f01 	tst.w	r8, #1
   358d2:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
   358d6:	ea4f 1292 	mov.w	r2, r2, lsr #6
   358da:	d120      	bne.n	3591e <am_hal_adc_samples_read+0x13e>
   358dc:	ed96 6a01 	vldr	s12, [r6, #4]
   358e0:	edd6 6a00 	vldr	s13, [r6]
   358e4:	ee07 ca90 	vmov	s15, ip
   358e8:	ee35 6ac6 	vsub.f32	s12, s11, s12
   358ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   358f0:	f640 72ff 	movw	r2, #4095	@ 0xfff
   358f4:	ee87 7a86 	vdiv.f32	s14, s15, s12
   358f8:	ee66 7aa3 	vmul.f32	s15, s13, s7
   358fc:	ee77 7a67 	vsub.f32	s15, s14, s15
   35900:	ee67 7a84 	vmul.f32	s15, s15, s8
   35904:	ee87 7aa4 	vdiv.f32	s14, s15, s9
   35908:	eeb4 7ac5 	vcmpe.f32	s14, s10
   3590c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   35910:	dc05      	bgt.n	3591e <am_hal_adc_samples_read+0x13e>
   35912:	eefc 7ac7 	vcvt.u32.f32	s15, s14
   35916:	ee17 2a90 	vmov	r2, s15
   3591a:	f3c2 020b 	ubfx	r2, r2, #0, #12
   3591e:	e941 2702 	strd	r2, r7, [r1, #-8]
   35922:	681a      	ldr	r2, [r3, #0]
   35924:	3201      	adds	r2, #1
   35926:	42a2      	cmp	r2, r4
   35928:	f101 0108 	add.w	r1, r1, #8
   3592c:	601a      	str	r2, [r3, #0]
   3592e:	d3c2      	bcc.n	358b6 <am_hal_adc_samples_read+0xd6>
   35930:	2000      	movs	r0, #0
   35932:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   35936:	2002      	movs	r0, #2
   35938:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3593c:	f105 0108 	add.w	r1, r5, #8
   35940:	1f10      	subs	r0, r2, #4
   35942:	f850 2f04 	ldr.w	r2, [r0, #4]!
   35946:	3108      	adds	r1, #8
   35948:	f3c2 158d 	ubfx	r5, r2, #6, #14
   3594c:	f3c2 7202 	ubfx	r2, r2, #28, #3
   35950:	e941 5204 	strd	r5, r2, [r1, #-16]
   35954:	681a      	ldr	r2, [r3, #0]
   35956:	3201      	adds	r2, #1
   35958:	4294      	cmp	r4, r2
   3595a:	601a      	str	r2, [r3, #0]
   3595c:	d8f1      	bhi.n	35942 <am_hal_adc_samples_read+0x162>
   3595e:	2000      	movs	r0, #0
   35960:	e7e7      	b.n	35932 <am_hal_adc_samples_read+0x152>
   35962:	4a36      	ldr	r2, [pc, #216]	@ (35a3c <am_hal_adc_samples_read+0x25c>)
   35964:	ed9f 4a36 	vldr	s8, [pc, #216]	@ 35a40 <am_hal_adc_samples_read+0x260>
   35968:	f892 c000 	ldrb.w	ip, [r2]
   3596c:	eddf 4a35 	vldr	s9, [pc, #212]	@ 35a44 <am_hal_adc_samples_read+0x264>
   35970:	ed9f 5a35 	vldr	s10, [pc, #212]	@ 35a48 <am_hal_adc_samples_read+0x268>
   35974:	eddf 5a35 	vldr	s11, [pc, #212]	@ 35a4c <am_hal_adc_samples_read+0x26c>
   35978:	4f2f      	ldr	r7, [pc, #188]	@ (35a38 <am_hal_adc_samples_read+0x258>)
   3597a:	4e36      	ldr	r6, [pc, #216]	@ (35a54 <am_hal_adc_samples_read+0x274>)
   3597c:	f8df e0d0 	ldr.w	lr, [pc, #208]	@ 35a50 <am_hal_adc_samples_read+0x270>
   35980:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 35a58 <am_hal_adc_samples_read+0x278>
   35984:	f105 0008 	add.w	r0, r5, #8
   35988:	e00e      	b.n	359a8 <am_hal_adc_samples_read+0x1c8>
   3598a:	f3c5 0213 	ubfx	r2, r5, #0, #20
   3598e:	f840 2c08 	str.w	r2, [r0, #-8]
   35992:	681a      	ldr	r2, [r3, #0]
   35994:	f015 6f7f 	tst.w	r5, #267386880	@ 0xff00000
   35998:	f102 0201 	add.w	r2, r2, #1
   3599c:	601a      	str	r2, [r3, #0]
   3599e:	d0c7      	beq.n	35930 <am_hal_adc_samples_read+0x150>
   359a0:	42a2      	cmp	r2, r4
   359a2:	f100 0008 	add.w	r0, r0, #8
   359a6:	d2c3      	bcs.n	35930 <am_hal_adc_samples_read+0x150>
   359a8:	6bfd      	ldr	r5, [r7, #60]	@ 0x3c
   359aa:	f3c5 7902 	ubfx	r9, r5, #28, #3
   359ae:	eb09 0206 	add.w	r2, r9, r6
   359b2:	0092      	lsls	r2, r2, #2
   359b4:	6812      	ldr	r2, [r2, #0]
   359b6:	f1bc 0f00 	cmp.w	ip, #0
   359ba:	d030      	beq.n	35a1e <am_hal_adc_samples_read+0x23e>
   359bc:	f3c2 2203 	ubfx	r2, r2, #8, #4
   359c0:	2a08      	cmp	r2, #8
   359c2:	d02c      	beq.n	35a1e <am_hal_adc_samples_read+0x23e>
   359c4:	f3c5 128d 	ubfx	r2, r5, #6, #14
   359c8:	f240 49a6 	movw	r9, #1190	@ 0x4a6
   359cc:	edde 7a01 	vldr	s15, [lr, #4]
   359d0:	ed9e 7a00 	vldr	s14, [lr]
   359d4:	fb09 f202 	mul.w	r2, r9, r2
   359d8:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
   359dc:	0b12      	lsrs	r2, r2, #12
   359de:	ee36 6a67 	vsub.f32	s12, s12, s15
   359e2:	ee07 2a90 	vmov	s15, r2
   359e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   359ea:	ee67 6a04 	vmul.f32	s13, s14, s8
   359ee:	ee87 7a86 	vdiv.f32	s14, s15, s12
   359f2:	ee37 7a66 	vsub.f32	s14, s14, s13
   359f6:	ee27 7a24 	vmul.f32	s14, s14, s9
   359fa:	eec7 7a05 	vdiv.f32	s15, s14, s10
   359fe:	eef4 7ae5 	vcmpe.f32	s15, s11
   35a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   35a06:	dc11      	bgt.n	35a2c <am_hal_adc_samples_read+0x24c>
   35a08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   35a0c:	ee17 2a90 	vmov	r2, s15
   35a10:	0192      	lsls	r2, r2, #6
   35a12:	f3c2 0211 	ubfx	r2, r2, #0, #18
   35a16:	f362 0513 	bfi	r5, r2, #0, #20
   35a1a:	f3c5 7902 	ubfx	r9, r5, #28, #3
   35a1e:	f840 9c04 	str.w	r9, [r0, #-4]
   35a22:	2900      	cmp	r1, #0
   35a24:	d1b1      	bne.n	3598a <am_hal_adc_samples_read+0x1aa>
   35a26:	f3c5 128d 	ubfx	r2, r5, #6, #14
   35a2a:	e7b0      	b.n	3598e <am_hal_adc_samples_read+0x1ae>
   35a2c:	4642      	mov	r2, r8
   35a2e:	e7f2      	b.n	35a16 <am_hal_adc_samples_read+0x236>
   35a30:	2006      	movs	r0, #6
   35a32:	e781      	b.n	35938 <am_hal_adc_samples_read+0x158>
   35a34:	01afafaf 	.word	0x01afafaf
   35a38:	40038000 	.word	0x40038000
   35a3c:	100537ac 	.word	0x100537ac
   35a40:	447a0000 	.word	0x447a0000
   35a44:	45800000 	.word	0x45800000
   35a48:	4494c000 	.word	0x4494c000
   35a4c:	457ff000 	.word	0x457ff000
   35a50:	100537b4 	.word	0x100537b4
   35a54:	1000e003 	.word	0x1000e003
   35a58:	0003ffc0 	.word	0x0003ffc0

00035a5c <am_hal_adc_sw_trigger>:
   35a5c:	b150      	cbz	r0, 35a74 <am_hal_adc_sw_trigger+0x18>
   35a5e:	6803      	ldr	r3, [r0, #0]
   35a60:	4a05      	ldr	r2, [pc, #20]	@ (35a78 <am_hal_adc_sw_trigger+0x1c>)
   35a62:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   35a66:	4293      	cmp	r3, r2
   35a68:	d104      	bne.n	35a74 <am_hal_adc_sw_trigger+0x18>
   35a6a:	4b04      	ldr	r3, [pc, #16]	@ (35a7c <am_hal_adc_sw_trigger+0x20>)
   35a6c:	2237      	movs	r2, #55	@ 0x37
   35a6e:	609a      	str	r2, [r3, #8]
   35a70:	2000      	movs	r0, #0
   35a72:	4770      	bx	lr
   35a74:	2002      	movs	r0, #2
   35a76:	4770      	bx	lr
   35a78:	01afafaf 	.word	0x01afafaf
   35a7c:	40038000 	.word	0x40038000

00035a80 <am_hal_adc_power_control>:
   35a80:	2800      	cmp	r0, #0
   35a82:	f000 8081 	beq.w	35b88 <am_hal_adc_power_control+0x108>
   35a86:	b510      	push	{r4, lr}
   35a88:	6803      	ldr	r3, [r0, #0]
   35a8a:	4604      	mov	r4, r0
   35a8c:	484b      	ldr	r0, [pc, #300]	@ (35bbc <am_hal_adc_power_control+0x13c>)
   35a8e:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   35a92:	4283      	cmp	r3, r0
   35a94:	b082      	sub	sp, #8
   35a96:	d129      	bne.n	35aec <am_hal_adc_power_control+0x6c>
   35a98:	2900      	cmp	r1, #0
   35a9a:	d02d      	beq.n	35af8 <am_hal_adc_power_control+0x78>
   35a9c:	3901      	subs	r1, #1
   35a9e:	2901      	cmp	r1, #1
   35aa0:	d827      	bhi.n	35af2 <am_hal_adc_power_control+0x72>
   35aa2:	b1ea      	cbz	r2, 35ae0 <am_hal_adc_power_control+0x60>
   35aa4:	4b46      	ldr	r3, [pc, #280]	@ (35bc0 <am_hal_adc_power_control+0x140>)
   35aa6:	68d9      	ldr	r1, [r3, #12]
   35aa8:	6161      	str	r1, [r4, #20]
   35aaa:	6919      	ldr	r1, [r3, #16]
   35aac:	61a1      	str	r1, [r4, #24]
   35aae:	6959      	ldr	r1, [r3, #20]
   35ab0:	61e1      	str	r1, [r4, #28]
   35ab2:	6999      	ldr	r1, [r3, #24]
   35ab4:	6221      	str	r1, [r4, #32]
   35ab6:	69d9      	ldr	r1, [r3, #28]
   35ab8:	6261      	str	r1, [r4, #36]	@ 0x24
   35aba:	6a19      	ldr	r1, [r3, #32]
   35abc:	62a1      	str	r1, [r4, #40]	@ 0x28
   35abe:	6a59      	ldr	r1, [r3, #36]	@ 0x24
   35ac0:	62e1      	str	r1, [r4, #44]	@ 0x2c
   35ac2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
   35ac4:	6321      	str	r1, [r4, #48]	@ 0x30
   35ac6:	6c19      	ldr	r1, [r3, #64]	@ 0x40
   35ac8:	6361      	str	r1, [r4, #52]	@ 0x34
   35aca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
   35acc:	63a1      	str	r1, [r4, #56]	@ 0x38
   35ace:	6b19      	ldr	r1, [r3, #48]	@ 0x30
   35ad0:	63e1      	str	r1, [r4, #60]	@ 0x3c
   35ad2:	f8d3 1200 	ldr.w	r1, [r3, #512]	@ 0x200
   35ad6:	6421      	str	r1, [r4, #64]	@ 0x40
   35ad8:	681b      	ldr	r3, [r3, #0]
   35ada:	6123      	str	r3, [r4, #16]
   35adc:	2201      	movs	r2, #1
   35ade:	7322      	strb	r2, [r4, #12]
   35ae0:	200d      	movs	r0, #13
   35ae2:	f000 ffd7 	bl	36a94 <am_hal_pwrctrl_periph_disable>
   35ae6:	2000      	movs	r0, #0
   35ae8:	b002      	add	sp, #8
   35aea:	bd10      	pop	{r4, pc}
   35aec:	2002      	movs	r0, #2
   35aee:	b002      	add	sp, #8
   35af0:	bd10      	pop	{r4, pc}
   35af2:	2006      	movs	r0, #6
   35af4:	b002      	add	sp, #8
   35af6:	bd10      	pop	{r4, pc}
   35af8:	2a00      	cmp	r2, #0
   35afa:	d047      	beq.n	35b8c <am_hal_adc_power_control+0x10c>
   35afc:	7b23      	ldrb	r3, [r4, #12]
   35afe:	2b00      	cmp	r3, #0
   35b00:	d05a      	beq.n	35bb8 <am_hal_adc_power_control+0x138>
   35b02:	200d      	movs	r0, #13
   35b04:	9101      	str	r1, [sp, #4]
   35b06:	f000 fef5 	bl	368f4 <am_hal_pwrctrl_periph_enable>
   35b0a:	4b2d      	ldr	r3, [pc, #180]	@ (35bc0 <am_hal_adc_power_control+0x140>)
   35b0c:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
   35b10:	f240 30ff 	movw	r0, #1023	@ 0x3ff
   35b14:	f360 2293 	bfi	r2, r0, #10, #10
   35b18:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
   35b1c:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
   35b20:	f360 0209 	bfi	r2, r0, #0, #10
   35b24:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
   35b28:	6962      	ldr	r2, [r4, #20]
   35b2a:	60da      	str	r2, [r3, #12]
   35b2c:	69a2      	ldr	r2, [r4, #24]
   35b2e:	611a      	str	r2, [r3, #16]
   35b30:	69e2      	ldr	r2, [r4, #28]
   35b32:	615a      	str	r2, [r3, #20]
   35b34:	6a22      	ldr	r2, [r4, #32]
   35b36:	619a      	str	r2, [r3, #24]
   35b38:	6a62      	ldr	r2, [r4, #36]	@ 0x24
   35b3a:	61da      	str	r2, [r3, #28]
   35b3c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
   35b3e:	621a      	str	r2, [r3, #32]
   35b40:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
   35b42:	625a      	str	r2, [r3, #36]	@ 0x24
   35b44:	6b22      	ldr	r2, [r4, #48]	@ 0x30
   35b46:	629a      	str	r2, [r3, #40]	@ 0x28
   35b48:	6b62      	ldr	r2, [r4, #52]	@ 0x34
   35b4a:	641a      	str	r2, [r3, #64]	@ 0x40
   35b4c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
   35b4e:	62da      	str	r2, [r3, #44]	@ 0x2c
   35b50:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
   35b52:	9901      	ldr	r1, [sp, #4]
   35b54:	631a      	str	r2, [r3, #48]	@ 0x30
   35b56:	f8c3 1200 	str.w	r1, [r3, #512]	@ 0x200
   35b5a:	f8d3 0200 	ldr.w	r0, [r3, #512]	@ 0x200
   35b5e:	f8c3 1200 	str.w	r1, [r3, #512]	@ 0x200
   35b62:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
   35b66:	6921      	ldr	r1, [r4, #16]
   35b68:	6019      	str	r1, [r3, #0]
   35b6a:	0792      	lsls	r2, r2, #30
   35b6c:	d102      	bne.n	35b74 <am_hal_adc_power_control+0xf4>
   35b6e:	2203      	movs	r2, #3
   35b70:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
   35b74:	4a12      	ldr	r2, [pc, #72]	@ (35bc0 <am_hal_adc_power_control+0x140>)
   35b76:	f8c2 0200 	str.w	r0, [r2, #512]	@ 0x200
   35b7a:	2300      	movs	r3, #0
   35b7c:	6c21      	ldr	r1, [r4, #64]	@ 0x40
   35b7e:	f8c2 1200 	str.w	r1, [r2, #512]	@ 0x200
   35b82:	4618      	mov	r0, r3
   35b84:	7323      	strb	r3, [r4, #12]
   35b86:	e7b2      	b.n	35aee <am_hal_adc_power_control+0x6e>
   35b88:	2002      	movs	r0, #2
   35b8a:	4770      	bx	lr
   35b8c:	200d      	movs	r0, #13
   35b8e:	9201      	str	r2, [sp, #4]
   35b90:	f000 feb0 	bl	368f4 <am_hal_pwrctrl_periph_enable>
   35b94:	4b0a      	ldr	r3, [pc, #40]	@ (35bc0 <am_hal_adc_power_control+0x140>)
   35b96:	9a01      	ldr	r2, [sp, #4]
   35b98:	f8d3 4118 	ldr.w	r4, [r3, #280]	@ 0x118
   35b9c:	f240 31ff 	movw	r1, #1023	@ 0x3ff
   35ba0:	f361 2493 	bfi	r4, r1, #10, #10
   35ba4:	f8c3 4118 	str.w	r4, [r3, #280]	@ 0x118
   35ba8:	4610      	mov	r0, r2
   35baa:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
   35bae:	f361 0209 	bfi	r2, r1, #0, #10
   35bb2:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
   35bb6:	e79a      	b.n	35aee <am_hal_adc_power_control+0x6e>
   35bb8:	2007      	movs	r0, #7
   35bba:	e798      	b.n	35aee <am_hal_adc_power_control+0x6e>
   35bbc:	01afafaf 	.word	0x01afafaf
   35bc0:	40038000 	.word	0x40038000

00035bc4 <am_hal_cachectrl_config>:
   35bc4:	b530      	push	{r4, r5, lr}
   35bc6:	b083      	sub	sp, #12
   35bc8:	4604      	mov	r4, r0
   35bca:	f000 faf1 	bl	361b0 <am_hal_interrupt_master_disable>
   35bce:	f04f 4590 	mov.w	r5, #1207959552	@ 0x48000000
   35bd2:	9001      	str	r0, [sp, #4]
   35bd4:	682b      	ldr	r3, [r5, #0]
   35bd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
   35bda:	602b      	str	r3, [r5, #0]
   35bdc:	9801      	ldr	r0, [sp, #4]
   35bde:	f000 faeb 	bl	361b8 <am_hal_interrupt_master_set>
   35be2:	7863      	ldrb	r3, [r4, #1]
   35be4:	7822      	ldrb	r2, [r4, #0]
   35be6:	78a1      	ldrb	r1, [r4, #2]
   35be8:	021b      	lsls	r3, r3, #8
   35bea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
   35bee:	0112      	lsls	r2, r2, #4
   35bf0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
   35bf4:	b2d2      	uxtb	r2, r2
   35bf6:	4313      	orrs	r3, r2
   35bf8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
   35bfc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
   35c00:	2000      	movs	r0, #0
   35c02:	602b      	str	r3, [r5, #0]
   35c04:	b003      	add	sp, #12
   35c06:	bd30      	pop	{r4, r5, pc}

00035c08 <am_hal_cachectrl_enable>:
   35c08:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
   35c0c:	2000      	movs	r0, #0
   35c0e:	681a      	ldr	r2, [r3, #0]
   35c10:	f042 0201 	orr.w	r2, r2, #1
   35c14:	601a      	str	r2, [r3, #0]
   35c16:	689a      	ldr	r2, [r3, #8]
   35c18:	f042 0201 	orr.w	r2, r2, #1
   35c1c:	609a      	str	r2, [r3, #8]
   35c1e:	4770      	bx	lr

00035c20 <am_hal_daxi_config>:
   35c20:	b510      	push	{r4, lr}
   35c22:	b082      	sub	sp, #8
   35c24:	4604      	mov	r4, r0
   35c26:	f000 fac3 	bl	361b0 <am_hal_interrupt_master_disable>
   35c2a:	9000      	str	r0, [sp, #0]
   35c2c:	f000 fac0 	bl	361b0 <am_hal_interrupt_master_disable>
   35c30:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
   35c34:	9001      	str	r0, [sp, #4]
   35c36:	6d13      	ldr	r3, [r2, #80]	@ 0x50
   35c38:	0759      	lsls	r1, r3, #29
   35c3a:	d410      	bmi.n	35c5e <am_hal_daxi_config+0x3e>
   35c3c:	f3bf 8f4f 	dsb	sy
   35c40:	6d53      	ldr	r3, [r2, #84]	@ 0x54
   35c42:	491b      	ldr	r1, [pc, #108]	@ (35cb0 <am_hal_daxi_config+0x90>)
   35c44:	f043 0301 	orr.w	r3, r3, #1
   35c48:	6553      	str	r3, [r2, #84]	@ 0x54
   35c4a:	680b      	ldr	r3, [r1, #0]
   35c4c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
   35c4e:	075b      	lsls	r3, r3, #29
   35c50:	d5fc      	bpl.n	35c4c <am_hal_daxi_config+0x2c>
   35c52:	6d53      	ldr	r3, [r2, #84]	@ 0x54
   35c54:	4916      	ldr	r1, [pc, #88]	@ (35cb0 <am_hal_daxi_config+0x90>)
   35c56:	f043 0302 	orr.w	r3, r3, #2
   35c5a:	6553      	str	r3, [r2, #84]	@ 0x54
   35c5c:	680b      	ldr	r3, [r1, #0]
   35c5e:	9801      	ldr	r0, [sp, #4]
   35c60:	f000 faaa 	bl	361b8 <am_hal_interrupt_master_set>
   35c64:	b1fc      	cbz	r4, 35ca6 <am_hal_daxi_config+0x86>
   35c66:	7923      	ldrb	r3, [r4, #4]
   35c68:	78e1      	ldrb	r1, [r4, #3]
   35c6a:	7860      	ldrb	r0, [r4, #1]
   35c6c:	78a2      	ldrb	r2, [r4, #2]
   35c6e:	f003 0301 	and.w	r3, r3, #1
   35c72:	0209      	lsls	r1, r1, #8
   35c74:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
   35c78:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
   35c7c:	0412      	lsls	r2, r2, #16
   35c7e:	430b      	orrs	r3, r1
   35c80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
   35c84:	f402 12f8 	and.w	r2, r2, #2031616	@ 0x1f0000
   35c88:	490a      	ldr	r1, [pc, #40]	@ (35cb4 <am_hal_daxi_config+0x94>)
   35c8a:	4313      	orrs	r3, r2
   35c8c:	6503      	str	r3, [r0, #80]	@ 0x50
   35c8e:	6820      	ldr	r0, [r4, #0]
   35c90:	6008      	str	r0, [r1, #0]
   35c92:	7923      	ldrb	r3, [r4, #4]
   35c94:	710b      	strb	r3, [r1, #4]
   35c96:	4b06      	ldr	r3, [pc, #24]	@ (35cb0 <am_hal_daxi_config+0x90>)
   35c98:	681b      	ldr	r3, [r3, #0]
   35c9a:	9800      	ldr	r0, [sp, #0]
   35c9c:	f000 fa8c 	bl	361b8 <am_hal_interrupt_master_set>
   35ca0:	2000      	movs	r0, #0
   35ca2:	b002      	add	sp, #8
   35ca4:	bd10      	pop	{r4, pc}
   35ca6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
   35caa:	2206      	movs	r2, #6
   35cac:	651a      	str	r2, [r3, #80]	@ 0x50
   35cae:	e7f2      	b.n	35c96 <am_hal_daxi_config+0x76>
   35cb0:	47ff0000 	.word	0x47ff0000
   35cb4:	1000db74 	.word	0x1000db74

00035cb8 <am_hal_daxi_control>:
   35cb8:	b500      	push	{lr}
   35cba:	b085      	sub	sp, #20
   35cbc:	2803      	cmp	r0, #3
   35cbe:	d86a      	bhi.n	35d96 <am_hal_daxi_control+0xde>
   35cc0:	e8df f000 	tbb	[pc, r0]
   35cc4:	02093555 	.word	0x02093555
   35cc8:	4834      	ldr	r0, [pc, #208]	@ (35d9c <am_hal_daxi_control+0xe4>)
   35cca:	f7ff ffa9 	bl	35c20 <am_hal_daxi_config>
   35cce:	2000      	movs	r0, #0
   35cd0:	b005      	add	sp, #20
   35cd2:	f85d fb04 	ldr.w	pc, [sp], #4
   35cd6:	f000 fa6b 	bl	361b0 <am_hal_interrupt_master_disable>
   35cda:	9002      	str	r0, [sp, #8]
   35cdc:	f000 fa68 	bl	361b0 <am_hal_interrupt_master_disable>
   35ce0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
   35ce4:	9003      	str	r0, [sp, #12]
   35ce6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
   35ce8:	0759      	lsls	r1, r3, #29
   35cea:	d410      	bmi.n	35d0e <am_hal_daxi_control+0x56>
   35cec:	f3bf 8f4f 	dsb	sy
   35cf0:	6d53      	ldr	r3, [r2, #84]	@ 0x54
   35cf2:	492b      	ldr	r1, [pc, #172]	@ (35da0 <am_hal_daxi_control+0xe8>)
   35cf4:	f043 0301 	orr.w	r3, r3, #1
   35cf8:	6553      	str	r3, [r2, #84]	@ 0x54
   35cfa:	680b      	ldr	r3, [r1, #0]
   35cfc:	6d53      	ldr	r3, [r2, #84]	@ 0x54
   35cfe:	075b      	lsls	r3, r3, #29
   35d00:	d5fc      	bpl.n	35cfc <am_hal_daxi_control+0x44>
   35d02:	6d53      	ldr	r3, [r2, #84]	@ 0x54
   35d04:	4926      	ldr	r1, [pc, #152]	@ (35da0 <am_hal_daxi_control+0xe8>)
   35d06:	f043 0302 	orr.w	r3, r3, #2
   35d0a:	6553      	str	r3, [r2, #84]	@ 0x54
   35d0c:	680b      	ldr	r3, [r1, #0]
   35d0e:	9803      	ldr	r0, [sp, #12]
   35d10:	f000 fa52 	bl	361b8 <am_hal_interrupt_master_set>
   35d14:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
   35d18:	2106      	movs	r1, #6
   35d1a:	4b21      	ldr	r3, [pc, #132]	@ (35da0 <am_hal_daxi_control+0xe8>)
   35d1c:	6511      	str	r1, [r2, #80]	@ 0x50
   35d1e:	681b      	ldr	r3, [r3, #0]
   35d20:	9802      	ldr	r0, [sp, #8]
   35d22:	f000 fa49 	bl	361b8 <am_hal_interrupt_master_set>
   35d26:	2000      	movs	r0, #0
   35d28:	b005      	add	sp, #20
   35d2a:	f85d fb04 	ldr.w	pc, [sp], #4
   35d2e:	f000 fa3f 	bl	361b0 <am_hal_interrupt_master_disable>
   35d32:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
   35d36:	9001      	str	r0, [sp, #4]
   35d38:	6d13      	ldr	r3, [r2, #80]	@ 0x50
   35d3a:	0758      	lsls	r0, r3, #29
   35d3c:	d410      	bmi.n	35d60 <am_hal_daxi_control+0xa8>
   35d3e:	f3bf 8f4f 	dsb	sy
   35d42:	6d53      	ldr	r3, [r2, #84]	@ 0x54
   35d44:	4916      	ldr	r1, [pc, #88]	@ (35da0 <am_hal_daxi_control+0xe8>)
   35d46:	f043 0301 	orr.w	r3, r3, #1
   35d4a:	6553      	str	r3, [r2, #84]	@ 0x54
   35d4c:	680b      	ldr	r3, [r1, #0]
   35d4e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
   35d50:	0759      	lsls	r1, r3, #29
   35d52:	d5fc      	bpl.n	35d4e <am_hal_daxi_control+0x96>
   35d54:	6d53      	ldr	r3, [r2, #84]	@ 0x54
   35d56:	4912      	ldr	r1, [pc, #72]	@ (35da0 <am_hal_daxi_control+0xe8>)
   35d58:	f043 0302 	orr.w	r3, r3, #2
   35d5c:	6553      	str	r3, [r2, #84]	@ 0x54
   35d5e:	680b      	ldr	r3, [r1, #0]
   35d60:	9801      	ldr	r0, [sp, #4]
   35d62:	f000 fa29 	bl	361b8 <am_hal_interrupt_master_set>
   35d66:	2000      	movs	r0, #0
   35d68:	b005      	add	sp, #20
   35d6a:	f85d fb04 	ldr.w	pc, [sp], #4
   35d6e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
   35d72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
   35d74:	f3c2 0080 	ubfx	r0, r2, #2, #1
   35d78:	0752      	lsls	r2, r2, #29
   35d7a:	d40a      	bmi.n	35d92 <am_hal_daxi_control+0xda>
   35d7c:	f3bf 8f4f 	dsb	sy
   35d80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
   35d82:	4907      	ldr	r1, [pc, #28]	@ (35da0 <am_hal_daxi_control+0xe8>)
   35d84:	f042 0202 	orr.w	r2, r2, #2
   35d88:	655a      	str	r2, [r3, #84]	@ 0x54
   35d8a:	680b      	ldr	r3, [r1, #0]
   35d8c:	b005      	add	sp, #20
   35d8e:	f85d fb04 	ldr.w	pc, [sp], #4
   35d92:	2000      	movs	r0, #0
   35d94:	e79c      	b.n	35cd0 <am_hal_daxi_control+0x18>
   35d96:	2006      	movs	r0, #6
   35d98:	e79a      	b.n	35cd0 <am_hal_daxi_control+0x18>
   35d9a:	bf00      	nop
   35d9c:	1000db74 	.word	0x1000db74
   35da0:	47ff0000 	.word	0x47ff0000

00035da4 <am_hal_clkgen_control>:
   35da4:	b570      	push	{r4, r5, r6, lr}
   35da6:	460c      	mov	r4, r1
   35da8:	2814      	cmp	r0, #20
   35daa:	f200 814f 	bhi.w	3604c <am_hal_clkgen_control+0x2a8>
   35dae:	e8df f010 	tbh	[pc, r0, lsl #1]
   35db2:	013d      	.short	0x013d
   35db4:	00ae00b9 	.word	0x00ae00b9
   35db8:	011c00a6 	.word	0x011c00a6
   35dbc:	00c900c1 	.word	0x00c900c1
   35dc0:	0091009c 	.word	0x0091009c
   35dc4:	007d0087 	.word	0x007d0087
   35dc8:	00680073 	.word	0x00680073
   35dcc:	0053005d 	.word	0x0053005d
   35dd0:	003f0049 	.word	0x003f0049
   35dd4:	002a0035 	.word	0x002a0035
   35dd8:	0015001f 	.word	0x0015001f
   35ddc:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
   35de0:	2000      	movs	r0, #0
   35de2:	f8d2 3084 	ldr.w	r3, [r2, #132]	@ 0x84
   35de6:	f043 0303 	orr.w	r3, r3, #3
   35dea:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
   35dee:	bd70      	pop	{r4, r5, r6, pc}
   35df0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
   35df4:	2102      	movs	r1, #2
   35df6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
   35dfa:	f361 0201 	bfi	r2, r1, #0, #2
   35dfe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
   35e02:	2000      	movs	r0, #0
   35e04:	bd70      	pop	{r4, r5, r6, pc}
   35e06:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
   35e0a:	2101      	movs	r1, #1
   35e0c:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
   35e10:	f361 0201 	bfi	r2, r1, #0, #2
   35e14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
   35e18:	2000      	movs	r0, #0
   35e1a:	bd70      	pop	{r4, r5, r6, pc}
   35e1c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
   35e20:	2000      	movs	r0, #0
   35e22:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
   35e26:	f36f 0201 	bfc	r2, #0, #2
   35e2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
   35e2e:	bd70      	pop	{r4, r5, r6, pc}
   35e30:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
   35e34:	2000      	movs	r0, #0
   35e36:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
   35e3a:	f36f 02c3 	bfc	r2, #3, #1
   35e3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
   35e42:	bd70      	pop	{r4, r5, r6, pc}
   35e44:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
   35e48:	2000      	movs	r0, #0
   35e4a:	f8d2 3084 	ldr.w	r3, [r2, #132]	@ 0x84
   35e4e:	f043 0308 	orr.w	r3, r3, #8
   35e52:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
   35e56:	bd70      	pop	{r4, r5, r6, pc}
   35e58:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
   35e5c:	2000      	movs	r0, #0
   35e5e:	f8d2 3084 	ldr.w	r3, [r2, #132]	@ 0x84
   35e62:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
   35e66:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
   35e6a:	bd70      	pop	{r4, r5, r6, pc}
   35e6c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
   35e70:	2102      	movs	r1, #2
   35e72:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
   35e76:	f361 1205 	bfi	r2, r1, #4, #2
   35e7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
   35e7e:	2000      	movs	r0, #0
   35e80:	bd70      	pop	{r4, r5, r6, pc}
   35e82:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
   35e86:	2101      	movs	r1, #1
   35e88:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
   35e8c:	f361 1205 	bfi	r2, r1, #4, #2
   35e90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
   35e94:	2000      	movs	r0, #0
   35e96:	bd70      	pop	{r4, r5, r6, pc}
   35e98:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
   35e9c:	2000      	movs	r0, #0
   35e9e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
   35ea2:	f36f 1205 	bfc	r2, #4, #2
   35ea6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
   35eaa:	bd70      	pop	{r4, r5, r6, pc}
   35eac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
   35eb0:	2000      	movs	r0, #0
   35eb2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
   35eb6:	f36f 12c7 	bfc	r2, #7, #1
   35eba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
   35ebe:	bd70      	pop	{r4, r5, r6, pc}
   35ec0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
   35ec4:	2000      	movs	r0, #0
   35ec6:	f8d2 3084 	ldr.w	r3, [r2, #132]	@ 0x84
   35eca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   35ece:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
   35ed2:	bd70      	pop	{r4, r5, r6, pc}
   35ed4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
   35ed8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
   35eda:	0690      	lsls	r0, r2, #26
   35edc:	d50d      	bpl.n	35efa <am_hal_clkgen_control+0x156>
   35ede:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
   35ee0:	f36f 1245 	bfc	r2, #5, #1
   35ee4:	645a      	str	r2, [r3, #68]	@ 0x44
   35ee6:	2000      	movs	r0, #0
   35ee8:	bd70      	pop	{r4, r5, r6, pc}
   35eea:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
   35eee:	6c53      	ldr	r3, [r2, #68]	@ 0x44
   35ef0:	069d      	lsls	r5, r3, #26
   35ef2:	f3c3 1440 	ubfx	r4, r3, #5, #1
   35ef6:	f140 80ab 	bpl.w	36050 <am_hal_clkgen_control+0x2ac>
   35efa:	2000      	movs	r0, #0
   35efc:	bd70      	pop	{r4, r5, r6, pc}
   35efe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
   35f02:	2000      	movs	r0, #0
   35f04:	6a1a      	ldr	r2, [r3, #32]
   35f06:	f36f 0200 	bfc	r2, #0, #1
   35f0a:	621a      	str	r2, [r3, #32]
   35f0c:	bd70      	pop	{r4, r5, r6, pc}
   35f0e:	2900      	cmp	r1, #0
   35f10:	f000 80a7 	beq.w	36062 <am_hal_clkgen_control+0x2be>
   35f14:	680b      	ldr	r3, [r1, #0]
   35f16:	f043 0301 	orr.w	r3, r3, #1
   35f1a:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
   35f1e:	2000      	movs	r0, #0
   35f20:	6213      	str	r3, [r2, #32]
   35f22:	bd70      	pop	{r4, r5, r6, pc}
   35f24:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
   35f28:	2000      	movs	r0, #0
   35f2a:	68d3      	ldr	r3, [r2, #12]
   35f2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   35f30:	60d3      	str	r3, [r2, #12]
   35f32:	bd70      	pop	{r4, r5, r6, pc}
   35f34:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
   35f38:	2000      	movs	r0, #0
   35f3a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
   35f3c:	f36f 0200 	bfc	r2, #0, #1
   35f40:	649a      	str	r2, [r3, #72]	@ 0x48
   35f42:	bd70      	pop	{r4, r5, r6, pc}
   35f44:	2900      	cmp	r1, #0
   35f46:	f000 8081 	beq.w	3604c <am_hal_clkgen_control+0x2a8>
   35f4a:	680b      	ldr	r3, [r1, #0]
   35f4c:	2b01      	cmp	r3, #1
   35f4e:	d17d      	bne.n	3604c <am_hal_clkgen_control+0x2a8>
   35f50:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
   35f54:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
   35f56:	f36f 0200 	bfc	r2, #0, #1
   35f5a:	649a      	str	r2, [r3, #72]	@ 0x48
   35f5c:	7c0b      	ldrb	r3, [r1, #16]
   35f5e:	68ca      	ldr	r2, [r1, #12]
   35f60:	07d9      	lsls	r1, r3, #31
   35f62:	f140 8085 	bpl.w	36070 <am_hal_clkgen_control+0x2cc>
   35f66:	f003 0307 	and.w	r3, r3, #7
   35f6a:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
   35f6e:	bf38      	it	cc
   35f70:	ea43 03c2 	orrcc.w	r3, r3, r2, lsl #3
   35f74:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
   35f78:	493f      	ldr	r1, [pc, #252]	@ (36078 <am_hal_clkgen_control+0x2d4>)
   35f7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
   35f7c:	6862      	ldr	r2, [r4, #4]
   35f7e:	1e53      	subs	r3, r2, #1
   35f80:	428b      	cmp	r3, r1
   35f82:	d370      	bcc.n	36066 <am_hal_clkgen_control+0x2c2>
   35f84:	493d      	ldr	r1, [pc, #244]	@ (3607c <am_hal_clkgen_control+0x2d8>)
   35f86:	428b      	cmp	r3, r1
   35f88:	d274      	bcs.n	36074 <am_hal_clkgen_control+0x2d0>
   35f8a:	f04f 0c08 	mov.w	ip, #8
   35f8e:	2600      	movs	r6, #0
   35f90:	2103      	movs	r1, #3
   35f92:	f04f 2540 	mov.w	r5, #1073758208	@ 0x40004000
   35f96:	ea4f 0e52 	mov.w	lr, r2, lsr #1
   35f9a:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
   35f9c:	f361 0301 	bfi	r3, r1, #0, #2
   35fa0:	652b      	str	r3, [r5, #80]	@ 0x50
   35fa2:	68a0      	ldr	r0, [r4, #8]
   35fa4:	fba0 c10c 	umull	ip, r1, r0, ip
   35fa8:	fb00 1106 	mla	r1, r0, r6, r1
   35fac:	04c9      	lsls	r1, r1, #19
   35fae:	ea4f 40cc 	mov.w	r0, ip, lsl #19
   35fb2:	eb10 000e 	adds.w	r0, r0, lr
   35fb6:	ea41 315c 	orr.w	r1, r1, ip, lsr #13
   35fba:	f04f 0300 	mov.w	r3, #0
   35fbe:	f141 0100 	adc.w	r1, r1, #0
   35fc2:	f7e3 f91d 	bl	19200 <__aeabi_uldivmod>
   35fc6:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
   35fca:	f171 0300 	sbcs.w	r3, r1, #0
   35fce:	d251      	bcs.n	36074 <am_hal_clkgen_control+0x2d0>
   35fd0:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
   35fd2:	7c62      	ldrb	r2, [r4, #17]
   35fd4:	f360 039e 	bfi	r3, r0, #2, #29
   35fd8:	652b      	str	r3, [r5, #80]	@ 0x50
   35fda:	2a00      	cmp	r2, #0
   35fdc:	d18d      	bne.n	35efa <am_hal_clkgen_control+0x156>
   35fde:	6cab      	ldr	r3, [r5, #72]	@ 0x48
   35fe0:	f043 0301 	orr.w	r3, r3, #1
   35fe4:	64ab      	str	r3, [r5, #72]	@ 0x48
   35fe6:	4610      	mov	r0, r2
   35fe8:	bd70      	pop	{r4, r5, r6, pc}
   35fea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
   35fee:	2005      	movs	r0, #5
   35ff0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
   35ff2:	f36f 0200 	bfc	r2, #0, #1
   35ff6:	649a      	str	r2, [r3, #72]	@ 0x48
   35ff8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
   35ffa:	f360 0202 	bfi	r2, r0, #0, #3
   35ffe:	64da      	str	r2, [r3, #76]	@ 0x4c
   36000:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
   36002:	2102      	movs	r1, #2
   36004:	f361 0201 	bfi	r2, r1, #0, #2
   36008:	651a      	str	r2, [r3, #80]	@ 0x50
   3600a:	b1bc      	cbz	r4, 3603c <am_hal_clkgen_control+0x298>
   3600c:	6822      	ldr	r2, [r4, #0]
   3600e:	b1aa      	cbz	r2, 3603c <am_hal_clkgen_control+0x298>
   36010:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
   36012:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
   36016:	f361 029e 	bfi	r2, r1, #2, #29
   3601a:	651a      	str	r2, [r3, #80]	@ 0x50
   3601c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
   36020:	2000      	movs	r0, #0
   36022:	6c93      	ldr	r3, [r2, #72]	@ 0x48
   36024:	f043 0301 	orr.w	r3, r3, #1
   36028:	6493      	str	r3, [r2, #72]	@ 0x48
   3602a:	bd70      	pop	{r4, r5, r6, pc}
   3602c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
   36030:	2000      	movs	r0, #0
   36032:	68da      	ldr	r2, [r3, #12]
   36034:	f36f 12c7 	bfc	r2, #7, #1
   36038:	60da      	str	r2, [r3, #12]
   3603a:	bd70      	pop	{r4, r5, r6, pc}
   3603c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
   36040:	490f      	ldr	r1, [pc, #60]	@ (36080 <am_hal_clkgen_control+0x2dc>)
   36042:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
   36044:	f361 029e 	bfi	r2, r1, #2, #29
   36048:	651a      	str	r2, [r3, #80]	@ 0x50
   3604a:	e7e7      	b.n	3601c <am_hal_clkgen_control+0x278>
   3604c:	2006      	movs	r0, #6
   3604e:	bd70      	pop	{r4, r5, r6, pc}
   36050:	6c53      	ldr	r3, [r2, #68]	@ 0x44
   36052:	f043 0320 	orr.w	r3, r3, #32
   36056:	200a      	movs	r0, #10
   36058:	6453      	str	r3, [r2, #68]	@ 0x44
   3605a:	f001 faff 	bl	3765c <am_hal_delay_us>
   3605e:	4620      	mov	r0, r4
   36060:	bd70      	pop	{r4, r5, r6, pc}
   36062:	4b08      	ldr	r3, [pc, #32]	@ (36084 <am_hal_clkgen_control+0x2e0>)
   36064:	e759      	b.n	35f1a <am_hal_clkgen_control+0x176>
   36066:	f04f 0c04 	mov.w	ip, #4
   3606a:	2600      	movs	r6, #0
   3606c:	2102      	movs	r1, #2
   3606e:	e790      	b.n	35f92 <am_hal_clkgen_control+0x1ee>
   36070:	2307      	movs	r3, #7
   36072:	e77f      	b.n	35f74 <am_hal_clkgen_control+0x1d0>
   36074:	2005      	movs	r0, #5
   36076:	bd70      	pop	{r4, r5, r6, pc}
   36078:	02dc6c00 	.word	0x02dc6c00
   3607c:	05b8d800 	.word	0x05b8d800
   36080:	00189374 	.word	0x00189374
   36084:	00a5b801 	.word	0x00a5b801

00036088 <am_hal_gpio_pinconfig_get>:
   36088:	287f      	cmp	r0, #127	@ 0x7f
   3608a:	d809      	bhi.n	360a0 <am_hal_gpio_pinconfig_get+0x18>
   3608c:	b151      	cbz	r1, 360a4 <am_hal_gpio_pinconfig_get+0x1c>
   3608e:	0080      	lsls	r0, r0, #2
   36090:	f100 4380 	add.w	r3, r0, #1073741824	@ 0x40000000
   36094:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
   36098:	2000      	movs	r0, #0
   3609a:	681b      	ldr	r3, [r3, #0]
   3609c:	600b      	str	r3, [r1, #0]
   3609e:	4770      	bx	lr
   360a0:	2005      	movs	r0, #5
   360a2:	4770      	bx	lr
   360a4:	2006      	movs	r0, #6
   360a6:	4770      	bx	lr

000360a8 <am_hal_gpio_pinconfig>:
   360a8:	287f      	cmp	r0, #127	@ 0x7f
   360aa:	d81f      	bhi.n	360ec <am_hal_gpio_pinconfig+0x44>
   360ac:	f3c1 2381 	ubfx	r3, r1, #10, #2
   360b0:	2b01      	cmp	r3, #1
   360b2:	b410      	push	{r4}
   360b4:	d909      	bls.n	360ca <am_hal_gpio_pinconfig+0x22>
   360b6:	4b10      	ldr	r3, [pc, #64]	@ (360f8 <am_hal_gpio_pinconfig+0x50>)
   360b8:	0942      	lsrs	r2, r0, #5
   360ba:	f000 041f 	and.w	r4, r0, #31
   360be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   360c2:	2301      	movs	r3, #1
   360c4:	40a3      	lsls	r3, r4
   360c6:	4213      	tst	r3, r2
   360c8:	d012      	beq.n	360f0 <am_hal_gpio_pinconfig+0x48>
   360ca:	0080      	lsls	r0, r0, #2
   360cc:	f100 4080 	add.w	r0, r0, #1073741824	@ 0x40000000
   360d0:	4b0a      	ldr	r3, [pc, #40]	@ (360fc <am_hal_gpio_pinconfig+0x54>)
   360d2:	f500 3080 	add.w	r0, r0, #65536	@ 0x10000
   360d6:	2200      	movs	r2, #0
   360d8:	2473      	movs	r4, #115	@ 0x73
   360da:	f8c3 4200 	str.w	r4, [r3, #512]	@ 0x200
   360de:	6001      	str	r1, [r0, #0]
   360e0:	f85d 4b04 	ldr.w	r4, [sp], #4
   360e4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
   360e8:	4610      	mov	r0, r2
   360ea:	4770      	bx	lr
   360ec:	2005      	movs	r0, #5
   360ee:	4770      	bx	lr
   360f0:	2007      	movs	r0, #7
   360f2:	f85d 4b04 	ldr.w	r4, [sp], #4
   360f6:	4770      	bx	lr
   360f8:	0004bc64 	.word	0x0004bc64
   360fc:	40010000 	.word	0x40010000

00036100 <am_hal_gpio_state_write>:
   36100:	b510      	push	{r4, lr}
   36102:	4604      	mov	r4, r0
   36104:	b082      	sub	sp, #8
   36106:	2905      	cmp	r1, #5
   36108:	d80e      	bhi.n	36128 <am_hal_gpio_state_write+0x28>
   3610a:	e8df f001 	tbb	[pc, r1]
   3610e:	2603      	.short	0x2603
   36110:	103f3d28 	.word	0x103f3d28
   36114:	4a1e      	ldr	r2, [pc, #120]	@ (36190 <am_hal_gpio_state_write+0x90>)
   36116:	f3c4 1141 	ubfx	r1, r4, #5, #2
   3611a:	2301      	movs	r3, #1
   3611c:	f004 041f 	and.w	r4, r4, #31
   36120:	fa03 f404 	lsl.w	r4, r3, r4
   36124:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   36128:	2000      	movs	r0, #0
   3612a:	b002      	add	sp, #8
   3612c:	bd10      	pop	{r4, pc}
   3612e:	f000 f83f 	bl	361b0 <am_hal_interrupt_master_disable>
   36132:	f3c4 1141 	ubfx	r1, r4, #5, #2
   36136:	4a17      	ldr	r2, [pc, #92]	@ (36194 <am_hal_gpio_state_write+0x94>)
   36138:	9001      	str	r0, [sp, #4]
   3613a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   3613e:	2301      	movs	r3, #1
   36140:	f004 041f 	and.w	r4, r4, #31
   36144:	fa03 f404 	lsl.w	r4, r3, r4
   36148:	4044      	eors	r4, r0
   3614a:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   3614e:	9801      	ldr	r0, [sp, #4]
   36150:	f000 f832 	bl	361b8 <am_hal_interrupt_master_set>
   36154:	2000      	movs	r0, #0
   36156:	b002      	add	sp, #8
   36158:	bd10      	pop	{r4, pc}
   3615a:	4a0f      	ldr	r2, [pc, #60]	@ (36198 <am_hal_gpio_state_write+0x98>)
   3615c:	e7db      	b.n	36116 <am_hal_gpio_state_write+0x16>
   3615e:	f000 f827 	bl	361b0 <am_hal_interrupt_master_disable>
   36162:	f3c4 1241 	ubfx	r2, r4, #5, #2
   36166:	4b0d      	ldr	r3, [pc, #52]	@ (3619c <am_hal_gpio_state_write+0x9c>)
   36168:	9000      	str	r0, [sp, #0]
   3616a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   3616e:	f004 001f 	and.w	r0, r4, #31
   36172:	2401      	movs	r4, #1
   36174:	4084      	lsls	r4, r0
   36176:	404c      	eors	r4, r1
   36178:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   3617c:	9800      	ldr	r0, [sp, #0]
   3617e:	f000 f81b 	bl	361b8 <am_hal_interrupt_master_set>
   36182:	2000      	movs	r0, #0
   36184:	b002      	add	sp, #8
   36186:	bd10      	pop	{r4, pc}
   36188:	4a05      	ldr	r2, [pc, #20]	@ (361a0 <am_hal_gpio_state_write+0xa0>)
   3618a:	e7c4      	b.n	36116 <am_hal_gpio_state_write+0x16>
   3618c:	4a05      	ldr	r2, [pc, #20]	@ (361a4 <am_hal_gpio_state_write+0xa4>)
   3618e:	e7c2      	b.n	36116 <am_hal_gpio_state_write+0x16>
   36190:	40010234 	.word	0x40010234
   36194:	40010244 	.word	0x40010244
   36198:	40010224 	.word	0x40010224
   3619c:	40010214 	.word	0x40010214
   361a0:	40010264 	.word	0x40010264
   361a4:	40010254 	.word	0x40010254

000361a8 <am_hal_interrupt_master_enable>:
   361a8:	f3ef 8010 	mrs	r0, PRIMASK
   361ac:	b662      	cpsie	i
   361ae:	4770      	bx	lr

000361b0 <am_hal_interrupt_master_disable>:
   361b0:	f3ef 8010 	mrs	r0, PRIMASK
   361b4:	b672      	cpsid	i
   361b6:	4770      	bx	lr

000361b8 <am_hal_interrupt_master_set>:
   361b8:	f380 8810 	msr	PRIMASK, r0
   361bc:	4770      	bx	lr
   361be:	bf00      	nop

000361c0 <am_hal_itm_enable>:
   361c0:	4a0e      	ldr	r2, [pc, #56]	@ (361fc <am_hal_itm_enable+0x3c>)
   361c2:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
   361c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
   361ca:	b410      	push	{r4}
   361cc:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
   361d0:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
   361d4:	01db      	lsls	r3, r3, #7
   361d6:	d5fb      	bpl.n	361d0 <am_hal_itm_enable+0x10>
   361d8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
   361dc:	4c08      	ldr	r4, [pc, #32]	@ (36200 <am_hal_itm_enable+0x40>)
   361de:	4a09      	ldr	r2, [pc, #36]	@ (36204 <am_hal_itm_enable+0x44>)
   361e0:	f8c3 4fb0 	str.w	r4, [r3, #4016]	@ 0xfb0
   361e4:	200f      	movs	r0, #15
   361e6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
   361ea:	f8c3 0e40 	str.w	r0, [r3, #3648]	@ 0xe40
   361ee:	f85d 4b04 	ldr.w	r4, [sp], #4
   361f2:	f8c3 1e00 	str.w	r1, [r3, #3584]	@ 0xe00
   361f6:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
   361fa:	4770      	bx	lr
   361fc:	e000ed00 	.word	0xe000ed00
   36200:	c5acce55 	.word	0xc5acce55
   36204:	00150511 	.word	0x00150511

00036208 <am_hal_itm_disable>:
   36208:	4b2f      	ldr	r3, [pc, #188]	@ (362c8 <am_hal_itm_disable+0xc0>)
   3620a:	f8d3 3250 	ldr.w	r3, [r3, #592]	@ 0x250
   3620e:	b510      	push	{r4, lr}
   36210:	b9cb      	cbnz	r3, 36246 <am_hal_itm_disable+0x3e>
   36212:	4a2e      	ldr	r2, [pc, #184]	@ (362cc <am_hal_itm_disable+0xc4>)
   36214:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
   36218:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
   3621c:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
   36220:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
   36224:	01d9      	lsls	r1, r3, #7
   36226:	d5fb      	bpl.n	36220 <am_hal_itm_disable+0x18>
   36228:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
   3622c:	4c28      	ldr	r4, [pc, #160]	@ (362d0 <am_hal_itm_disable+0xc8>)
   3622e:	4a29      	ldr	r2, [pc, #164]	@ (362d4 <am_hal_itm_disable+0xcc>)
   36230:	f8c3 4fb0 	str.w	r4, [r3, #4016]	@ 0xfb0
   36234:	200f      	movs	r0, #15
   36236:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
   3623a:	f8c3 0e40 	str.w	r0, [r3, #3648]	@ 0xe40
   3623e:	f8c3 1e00 	str.w	r1, [r3, #3584]	@ 0xe00
   36242:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
   36246:	f04f 4460 	mov.w	r4, #3758096384	@ 0xe0000000
   3624a:	f8d4 3e80 	ldr.w	r3, [r4, #3712]	@ 0xe80
   3624e:	021b      	lsls	r3, r3, #8
   36250:	d4fb      	bmi.n	3624a <am_hal_itm_disable+0x42>
   36252:	2032      	movs	r0, #50	@ 0x32
   36254:	f001 fa02 	bl	3765c <am_hal_delay_us>
   36258:	4b1d      	ldr	r3, [pc, #116]	@ (362d0 <am_hal_itm_disable+0xc8>)
   3625a:	491f      	ldr	r1, [pc, #124]	@ (362d8 <am_hal_itm_disable+0xd0>)
   3625c:	f8c4 3fb0 	str.w	r3, [r4, #4016]	@ 0xfb0
   36260:	2064      	movs	r0, #100	@ 0x64
   36262:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
   36266:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	@ 0xe80
   3626a:	f023 0301 	bic.w	r3, r3, #1
   3626e:	f8c2 3e80 	str.w	r3, [r2, #3712]	@ 0xe80
   36272:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	@ 0xe80
   36276:	420b      	tst	r3, r1
   36278:	d1fb      	bne.n	36272 <am_hal_itm_disable+0x6a>
   3627a:	3801      	subs	r0, #1
   3627c:	d1f3      	bne.n	36266 <am_hal_itm_disable+0x5e>
   3627e:	4a13      	ldr	r2, [pc, #76]	@ (362cc <am_hal_itm_disable+0xc4>)
   36280:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
   36284:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
   36288:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
   3628c:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
   36290:	f013 7380 	ands.w	r3, r3, #16777216	@ 0x1000000
   36294:	d1fa      	bne.n	3628c <am_hal_itm_disable+0x84>
   36296:	4a0c      	ldr	r2, [pc, #48]	@ (362c8 <am_hal_itm_disable+0xc0>)
   36298:	f8d2 1250 	ldr.w	r1, [r2, #592]	@ 0x250
   3629c:	f363 0143 	bfi	r1, r3, #1, #3
   362a0:	f8c2 1250 	str.w	r1, [r2, #592]	@ 0x250
   362a4:	f8d2 1250 	ldr.w	r1, [r2, #592]	@ 0x250
   362a8:	f363 0100 	bfi	r1, r3, #0, #1
   362ac:	f8c2 1250 	str.w	r1, [r2, #592]	@ 0x250
   362b0:	f8d2 1250 	ldr.w	r1, [r2, #592]	@ 0x250
   362b4:	f363 310e 	bfi	r1, r3, #12, #3
   362b8:	f8c2 1250 	str.w	r1, [r2, #592]	@ 0x250
   362bc:	f8d2 3250 	ldr.w	r3, [r2, #592]	@ 0x250
   362c0:	2b00      	cmp	r3, #0
   362c2:	d1fb      	bne.n	362bc <am_hal_itm_disable+0xb4>
   362c4:	bd10      	pop	{r4, pc}
   362c6:	bf00      	nop
   362c8:	40020000 	.word	0x40020000
   362cc:	e000ed00 	.word	0xe000ed00
   362d0:	c5acce55 	.word	0xc5acce55
   362d4:	00150511 	.word	0x00150511
   362d8:	00800001 	.word	0x00800001

000362dc <am_hal_itm_print>:
   362dc:	7803      	ldrb	r3, [r0, #0]
   362de:	b1a3      	cbz	r3, 3630a <am_hal_itm_print+0x2e>
   362e0:	4603      	mov	r3, r0
   362e2:	f1c0 0c01 	rsb	ip, r0, #1
   362e6:	eb0c 0103 	add.w	r1, ip, r3
   362ea:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   362ee:	2a00      	cmp	r2, #0
   362f0:	d1f9      	bne.n	362e6 <am_hal_itm_print+0xa>
   362f2:	4401      	add	r1, r0
   362f4:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
   362f8:	f810 cb01 	ldrb.w	ip, [r0], #1
   362fc:	6813      	ldr	r3, [r2, #0]
   362fe:	2b00      	cmp	r3, #0
   36300:	d0fc      	beq.n	362fc <am_hal_itm_print+0x20>
   36302:	4288      	cmp	r0, r1
   36304:	f882 c000 	strb.w	ip, [r2]
   36308:	d1f6      	bne.n	362f8 <am_hal_itm_print+0x1c>
   3630a:	4770      	bx	lr

0003630c <am_hal_mram_info_read>:
   3630c:	b9c0      	cbnz	r0, 36340 <am_hal_mram_info_read+0x34>
   3630e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
   36312:	d228      	bcs.n	36366 <am_hal_mram_info_read+0x5a>
   36314:	1888      	adds	r0, r1, r2
   36316:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
   3631a:	d824      	bhi.n	36366 <am_hal_mram_info_read+0x5a>
   3631c:	f101 5184 	add.w	r1, r1, #276824064	@ 0x10800000
   36320:	0089      	lsls	r1, r1, #2
   36322:	b312      	cbz	r2, 3636a <am_hal_mram_info_read+0x5e>
   36324:	b410      	push	{r4}
   36326:	2000      	movs	r0, #0
   36328:	3001      	adds	r0, #1
   3632a:	680c      	ldr	r4, [r1, #0]
   3632c:	f843 4b04 	str.w	r4, [r3], #4
   36330:	4282      	cmp	r2, r0
   36332:	f101 0104 	add.w	r1, r1, #4
   36336:	d1f7      	bne.n	36328 <am_hal_mram_info_read+0x1c>
   36338:	2000      	movs	r0, #0
   3633a:	f85d 4b04 	ldr.w	r4, [sp], #4
   3633e:	4770      	bx	lr
   36340:	2801      	cmp	r0, #1
   36342:	d10e      	bne.n	36362 <am_hal_mram_info_read+0x56>
   36344:	f5a1 6090 	sub.w	r0, r1, #1152	@ 0x480
   36348:	f5b0 7fc0 	cmp.w	r0, #384	@ 0x180
   3634c:	d20b      	bcs.n	36366 <am_hal_mram_info_read+0x5a>
   3634e:	1888      	adds	r0, r1, r2
   36350:	f5b0 6fc0 	cmp.w	r0, #1536	@ 0x600
   36354:	d807      	bhi.n	36366 <am_hal_mram_info_read+0x5a>
   36356:	f101 5184 	add.w	r1, r1, #276824064	@ 0x10800000
   3635a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
   3635e:	0089      	lsls	r1, r1, #2
   36360:	e7df      	b.n	36322 <am_hal_mram_info_read+0x16>
   36362:	2001      	movs	r0, #1
   36364:	4770      	bx	lr
   36366:	2002      	movs	r0, #2
   36368:	4770      	bx	lr
   3636a:	2000      	movs	r0, #0
   3636c:	4770      	bx	lr
   3636e:	bf00      	nop

00036370 <tempco_set_trims.part.0>:
   36370:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   36374:	4c43      	ldr	r4, [pc, #268]	@ (36484 <tempco_set_trims.part.0+0x114>)
   36376:	6826      	ldr	r6, [r4, #0]
   36378:	4c43      	ldr	r4, [pc, #268]	@ (36488 <tempco_set_trims.part.0+0x118>)
   3637a:	6824      	ldr	r4, [r4, #0]
   3637c:	4406      	add	r6, r0
   3637e:	4404      	add	r4, r0
   36380:	4842      	ldr	r0, [pc, #264]	@ (3648c <tempco_set_trims.part.0+0x11c>)
   36382:	6800      	ldr	r0, [r0, #0]
   36384:	eb01 0800 	add.w	r8, r1, r0
   36388:	4941      	ldr	r1, [pc, #260]	@ (36490 <tempco_set_trims.part.0+0x120>)
   3638a:	680f      	ldr	r7, [r1, #0]
   3638c:	4417      	add	r7, r2
   3638e:	4a41      	ldr	r2, [pc, #260]	@ (36494 <tempco_set_trims.part.0+0x124>)
   36390:	6812      	ldr	r2, [r2, #0]
   36392:	eb03 0902 	add.w	r9, r3, r2
   36396:	4a40      	ldr	r2, [pc, #256]	@ (36498 <tempco_set_trims.part.0+0x128>)
   36398:	6815      	ldr	r5, [r2, #0]
   3639a:	b083      	sub	sp, #12
   3639c:	441d      	add	r5, r3
   3639e:	f7ff ff07 	bl	361b0 <am_hal_interrupt_master_disable>
   363a2:	4b3e      	ldr	r3, [pc, #248]	@ (3649c <tempco_set_trims.part.0+0x12c>)
   363a4:	9001      	str	r0, [sp, #4]
   363a6:	781b      	ldrb	r3, [r3, #0]
   363a8:	b91b      	cbnz	r3, 363b2 <tempco_set_trims.part.0+0x42>
   363aa:	4b3d      	ldr	r3, [pc, #244]	@ (364a0 <tempco_set_trims.part.0+0x130>)
   363ac:	6818      	ldr	r0, [r3, #0]
   363ae:	1a36      	subs	r6, r6, r0
   363b0:	1a24      	subs	r4, r4, r0
   363b2:	4a3c      	ldr	r2, [pc, #240]	@ (364a4 <tempco_set_trims.part.0+0x134>)
   363b4:	4b3c      	ldr	r3, [pc, #240]	@ (364a8 <tempco_set_trims.part.0+0x138>)
   363b6:	6016      	str	r6, [r2, #0]
   363b8:	f1b8 0f00 	cmp.w	r8, #0
   363bc:	f386 0c06 	usat	ip, #6, r6
   363c0:	601c      	str	r4, [r3, #0]
   363c2:	f384 0006 	usat	r0, #6, r4
   363c6:	db51      	blt.n	3646c <tempco_set_trims.part.0+0xfc>
   363c8:	f1b8 0f3f 	cmp.w	r8, #63	@ 0x3f
   363cc:	d83f      	bhi.n	3644e <tempco_set_trims.part.0+0xde>
   363ce:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
   363d2:	2f00      	cmp	r7, #0
   363d4:	db3f      	blt.n	36456 <tempco_set_trims.part.0+0xe6>
   363d6:	2f3f      	cmp	r7, #63	@ 0x3f
   363d8:	d84b      	bhi.n	36472 <tempco_set_trims.part.0+0x102>
   363da:	f007 073f 	and.w	r7, r7, #63	@ 0x3f
   363de:	f1b9 0f00 	cmp.w	r9, #0
   363e2:	db3d      	blt.n	36460 <tempco_set_trims.part.0+0xf0>
   363e4:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
   363e8:	d848      	bhi.n	3647c <tempco_set_trims.part.0+0x10c>
   363ea:	f009 097f 	and.w	r9, r9, #127	@ 0x7f
   363ee:	2d00      	cmp	r5, #0
   363f0:	db3a      	blt.n	36468 <tempco_set_trims.part.0+0xf8>
   363f2:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
   363f6:	d23e      	bcs.n	36476 <tempco_set_trims.part.0+0x106>
   363f8:	f3c5 0509 	ubfx	r5, r5, #0, #10
   363fc:	4b2b      	ldr	r3, [pc, #172]	@ (364ac <tempco_set_trims.part.0+0x13c>)
   363fe:	f8d3 236c 	ldr.w	r2, [r3, #876]	@ 0x36c
   36402:	f36c 5219 	bfi	r2, ip, #20, #6
   36406:	f8c3 236c 	str.w	r2, [r3, #876]	@ 0x36c
   3640a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
   3640e:	f360 0205 	bfi	r2, r0, #0, #6
   36412:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
   36416:	f8d3 236c 	ldr.w	r2, [r3, #876]	@ 0x36c
   3641a:	f368 629f 	bfi	r2, r8, #26, #6
   3641e:	f8c3 236c 	str.w	r2, [r3, #876]	@ 0x36c
   36422:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
   36426:	f367 4297 	bfi	r2, r7, #18, #6
   3642a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
   3642e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
   36430:	f369 12cd 	bfi	r2, r9, #7, #7
   36434:	645a      	str	r2, [r3, #68]	@ 0x44
   36436:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
   3643a:	f365 0209 	bfi	r2, r5, #0, #10
   3643e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
   36442:	9801      	ldr	r0, [sp, #4]
   36444:	b003      	add	sp, #12
   36446:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3644a:	f7ff beb5 	b.w	361b8 <am_hal_interrupt_master_set>
   3644e:	2f00      	cmp	r7, #0
   36450:	f04f 083f 	mov.w	r8, #63	@ 0x3f
   36454:	dabf      	bge.n	363d6 <tempco_set_trims.part.0+0x66>
   36456:	f1b9 0f00 	cmp.w	r9, #0
   3645a:	f04f 0700 	mov.w	r7, #0
   3645e:	dac1      	bge.n	363e4 <tempco_set_trims.part.0+0x74>
   36460:	2d00      	cmp	r5, #0
   36462:	f04f 0900 	mov.w	r9, #0
   36466:	dac4      	bge.n	363f2 <tempco_set_trims.part.0+0x82>
   36468:	2500      	movs	r5, #0
   3646a:	e7c7      	b.n	363fc <tempco_set_trims.part.0+0x8c>
   3646c:	f04f 0800 	mov.w	r8, #0
   36470:	e7af      	b.n	363d2 <tempco_set_trims.part.0+0x62>
   36472:	273f      	movs	r7, #63	@ 0x3f
   36474:	e7b3      	b.n	363de <tempco_set_trims.part.0+0x6e>
   36476:	f240 35ff 	movw	r5, #1023	@ 0x3ff
   3647a:	e7bf      	b.n	363fc <tempco_set_trims.part.0+0x8c>
   3647c:	f04f 097f 	mov.w	r9, #127	@ 0x7f
   36480:	e7b5      	b.n	363ee <tempco_set_trims.part.0+0x7e>
   36482:	bf00      	nop
   36484:	100537e0 	.word	0x100537e0
   36488:	100537ec 	.word	0x100537ec
   3648c:	100537e8 	.word	0x100537e8
   36490:	100537f0 	.word	0x100537f0
   36494:	100537f4 	.word	0x100537f4
   36498:	100537e4 	.word	0x100537e4
   3649c:	100537d4 	.word	0x100537d4
   364a0:	100537fc 	.word	0x100537fc
   364a4:	100537dc 	.word	0x100537dc
   364a8:	100537d8 	.word	0x100537d8
   364ac:	40020000 	.word	0x40020000

000364b0 <am_hal_pwrctrl_mcu_mode_select>:
   364b0:	1e43      	subs	r3, r0, #1
   364b2:	2b01      	cmp	r3, #1
   364b4:	d829      	bhi.n	3650a <am_hal_pwrctrl_mcu_mode_select+0x5a>
   364b6:	2802      	cmp	r0, #2
   364b8:	b570      	push	{r4, r5, r6, lr}
   364ba:	4604      	mov	r4, r0
   364bc:	d015      	beq.n	364ea <am_hal_pwrctrl_mcu_mode_select+0x3a>
   364be:	4b15      	ldr	r3, [pc, #84]	@ (36514 <am_hal_pwrctrl_mcu_mode_select+0x64>)
   364c0:	781a      	ldrb	r2, [r3, #0]
   364c2:	42a2      	cmp	r2, r4
   364c4:	d023      	beq.n	3650e <am_hal_pwrctrl_mcu_mode_select+0x5e>
   364c6:	4e14      	ldr	r6, [pc, #80]	@ (36518 <am_hal_pwrctrl_mcu_mode_select+0x68>)
   364c8:	701c      	strb	r4, [r3, #0]
   364ca:	6833      	ldr	r3, [r6, #0]
   364cc:	f364 0301 	bfi	r3, r4, #0, #2
   364d0:	2505      	movs	r5, #5
   364d2:	6033      	str	r3, [r6, #0]
   364d4:	6833      	ldr	r3, [r6, #0]
   364d6:	075b      	lsls	r3, r3, #29
   364d8:	f04f 0001 	mov.w	r0, #1
   364dc:	d40e      	bmi.n	364fc <am_hal_pwrctrl_mcu_mode_select+0x4c>
   364de:	f001 f8bd 	bl	3765c <am_hal_delay_us>
   364e2:	3d01      	subs	r5, #1
   364e4:	d1f6      	bne.n	364d4 <am_hal_pwrctrl_mcu_mode_select+0x24>
   364e6:	2004      	movs	r0, #4
   364e8:	bd70      	pop	{r4, r5, r6, pc}
   364ea:	4b0b      	ldr	r3, [pc, #44]	@ (36518 <am_hal_pwrctrl_mcu_mode_select+0x68>)
   364ec:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
   364f0:	f3c3 1301 	ubfx	r3, r3, #4, #2
   364f4:	2b03      	cmp	r3, #3
   364f6:	d0e2      	beq.n	364be <am_hal_pwrctrl_mcu_mode_select+0xe>
   364f8:	2007      	movs	r0, #7
   364fa:	bd70      	pop	{r4, r5, r6, pc}
   364fc:	6830      	ldr	r0, [r6, #0]
   364fe:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   36502:	1b00      	subs	r0, r0, r4
   36504:	bf18      	it	ne
   36506:	2001      	movne	r0, #1
   36508:	bd70      	pop	{r4, r5, r6, pc}
   3650a:	2006      	movs	r0, #6
   3650c:	4770      	bx	lr
   3650e:	2000      	movs	r0, #0
   36510:	bd70      	pop	{r4, r5, r6, pc}
   36512:	bf00      	nop
   36514:	1000db79 	.word	0x1000db79
   36518:	40021000 	.word	0x40021000

0003651c <am_hal_pwrctrl_mcu_memory_config>:
   3651c:	b570      	push	{r4, r5, r6, lr}
   3651e:	7803      	ldrb	r3, [r0, #0]
   36520:	2b01      	cmp	r3, #1
   36522:	b082      	sub	sp, #8
   36524:	4605      	mov	r5, r0
   36526:	d073      	beq.n	36610 <am_hal_pwrctrl_mcu_memory_config+0xf4>
   36528:	2b02      	cmp	r3, #2
   3652a:	d067      	beq.n	365fc <am_hal_pwrctrl_mcu_memory_config+0xe0>
   3652c:	2b00      	cmp	r3, #0
   3652e:	d05b      	beq.n	365e8 <am_hal_pwrctrl_mcu_memory_config+0xcc>
   36530:	4c4f      	ldr	r4, [pc, #316]	@ (36670 <am_hal_pwrctrl_mcu_memory_config+0x154>)
   36532:	78aa      	ldrb	r2, [r5, #2]
   36534:	6963      	ldr	r3, [r4, #20]
   36536:	494f      	ldr	r1, [pc, #316]	@ (36674 <am_hal_pwrctrl_mcu_memory_config+0x158>)
   36538:	f362 0302 	bfi	r3, r2, #0, #3
   3653c:	6163      	str	r3, [r4, #20]
   3653e:	6963      	ldr	r3, [r4, #20]
   36540:	792a      	ldrb	r2, [r5, #4]
   36542:	f362 03c3 	bfi	r3, r2, #3, #1
   36546:	6163      	str	r3, [r4, #20]
   36548:	2601      	movs	r6, #1
   3654a:	6963      	ldr	r3, [r4, #20]
   3654c:	9600      	str	r6, [sp, #0]
   3654e:	223f      	movs	r2, #63	@ 0x3f
   36550:	2005      	movs	r0, #5
   36552:	f001 f8c7 	bl	376e4 <am_hal_delay_us_status_check>
   36556:	b940      	cbnz	r0, 3656a <am_hal_pwrctrl_mcu_memory_config+0x4e>
   36558:	69a2      	ldr	r2, [r4, #24]
   3655a:	6963      	ldr	r3, [r4, #20]
   3655c:	f3c2 1200 	ubfx	r2, r2, #4, #1
   36560:	f3c3 1300 	ubfx	r3, r3, #4, #1
   36564:	429a      	cmp	r2, r3
   36566:	d002      	beq.n	3656e <am_hal_pwrctrl_mcu_memory_config+0x52>
   36568:	4630      	mov	r0, r6
   3656a:	b002      	add	sp, #8
   3656c:	bd70      	pop	{r4, r5, r6, pc}
   3656e:	69a2      	ldr	r2, [r4, #24]
   36570:	6963      	ldr	r3, [r4, #20]
   36572:	f3c2 1240 	ubfx	r2, r2, #5, #1
   36576:	f3c3 1340 	ubfx	r3, r3, #5, #1
   3657a:	429a      	cmp	r2, r3
   3657c:	d1f4      	bne.n	36568 <am_hal_pwrctrl_mcu_memory_config+0x4c>
   3657e:	69a2      	ldr	r2, [r4, #24]
   36580:	6963      	ldr	r3, [r4, #20]
   36582:	f002 0207 	and.w	r2, r2, #7
   36586:	f003 0307 	and.w	r3, r3, #7
   3658a:	429a      	cmp	r2, r3
   3658c:	d1ec      	bne.n	36568 <am_hal_pwrctrl_mcu_memory_config+0x4c>
   3658e:	69a2      	ldr	r2, [r4, #24]
   36590:	6963      	ldr	r3, [r4, #20]
   36592:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   36596:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   3659a:	429a      	cmp	r2, r3
   3659c:	d1e4      	bne.n	36568 <am_hal_pwrctrl_mcu_memory_config+0x4c>
   3659e:	786b      	ldrb	r3, [r5, #1]
   365a0:	2b00      	cmp	r3, #0
   365a2:	d05f      	beq.n	36664 <am_hal_pwrctrl_mcu_memory_config+0x148>
   365a4:	69e3      	ldr	r3, [r4, #28]
   365a6:	f360 1304 	bfi	r3, r0, #4, #1
   365aa:	61e3      	str	r3, [r4, #28]
   365ac:	796b      	ldrb	r3, [r5, #5]
   365ae:	2b00      	cmp	r3, #0
   365b0:	d052      	beq.n	36658 <am_hal_pwrctrl_mcu_memory_config+0x13c>
   365b2:	4b2f      	ldr	r3, [pc, #188]	@ (36670 <am_hal_pwrctrl_mcu_memory_config+0x154>)
   365b4:	69da      	ldr	r2, [r3, #28]
   365b6:	f36f 02c3 	bfc	r2, #3, #1
   365ba:	61da      	str	r2, [r3, #28]
   365bc:	78eb      	ldrb	r3, [r5, #3]
   365be:	2b07      	cmp	r3, #7
   365c0:	d8d3      	bhi.n	3656a <am_hal_pwrctrl_mcu_memory_config+0x4e>
   365c2:	a201      	add	r2, pc, #4	@ (adr r2, 365c8 <am_hal_pwrctrl_mcu_memory_config+0xac>)
   365c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   365c8:	0003664d 	.word	0x0003664d
   365cc:	0003663f 	.word	0x0003663f
   365d0:	0003656b 	.word	0x0003656b
   365d4:	00036631 	.word	0x00036631
   365d8:	0003656b 	.word	0x0003656b
   365dc:	0003656b 	.word	0x0003656b
   365e0:	0003656b 	.word	0x0003656b
   365e4:	00036625 	.word	0x00036625
   365e8:	4a21      	ldr	r2, [pc, #132]	@ (36670 <am_hal_pwrctrl_mcu_memory_config+0x154>)
   365ea:	6951      	ldr	r1, [r2, #20]
   365ec:	f363 1104 	bfi	r1, r3, #4, #1
   365f0:	6151      	str	r1, [r2, #20]
   365f2:	6951      	ldr	r1, [r2, #20]
   365f4:	f363 1145 	bfi	r1, r3, #5, #1
   365f8:	6151      	str	r1, [r2, #20]
   365fa:	e799      	b.n	36530 <am_hal_pwrctrl_mcu_memory_config+0x14>
   365fc:	4b1c      	ldr	r3, [pc, #112]	@ (36670 <am_hal_pwrctrl_mcu_memory_config+0x154>)
   365fe:	695a      	ldr	r2, [r3, #20]
   36600:	f042 0210 	orr.w	r2, r2, #16
   36604:	615a      	str	r2, [r3, #20]
   36606:	695a      	ldr	r2, [r3, #20]
   36608:	f042 0220 	orr.w	r2, r2, #32
   3660c:	615a      	str	r2, [r3, #20]
   3660e:	e78f      	b.n	36530 <am_hal_pwrctrl_mcu_memory_config+0x14>
   36610:	4b17      	ldr	r3, [pc, #92]	@ (36670 <am_hal_pwrctrl_mcu_memory_config+0x154>)
   36612:	695a      	ldr	r2, [r3, #20]
   36614:	f042 0210 	orr.w	r2, r2, #16
   36618:	615a      	str	r2, [r3, #20]
   3661a:	695a      	ldr	r2, [r3, #20]
   3661c:	f36f 1245 	bfc	r2, #5, #1
   36620:	615a      	str	r2, [r3, #20]
   36622:	e785      	b.n	36530 <am_hal_pwrctrl_mcu_memory_config+0x14>
   36624:	4b12      	ldr	r3, [pc, #72]	@ (36670 <am_hal_pwrctrl_mcu_memory_config+0x154>)
   36626:	69da      	ldr	r2, [r3, #28]
   36628:	f36f 0202 	bfc	r2, #0, #3
   3662c:	61da      	str	r2, [r3, #28]
   3662e:	e79c      	b.n	3656a <am_hal_pwrctrl_mcu_memory_config+0x4e>
   36630:	4b0f      	ldr	r3, [pc, #60]	@ (36670 <am_hal_pwrctrl_mcu_memory_config+0x154>)
   36632:	69da      	ldr	r2, [r3, #28]
   36634:	2104      	movs	r1, #4
   36636:	f361 0202 	bfi	r2, r1, #0, #3
   3663a:	61da      	str	r2, [r3, #28]
   3663c:	e795      	b.n	3656a <am_hal_pwrctrl_mcu_memory_config+0x4e>
   3663e:	4b0c      	ldr	r3, [pc, #48]	@ (36670 <am_hal_pwrctrl_mcu_memory_config+0x154>)
   36640:	69da      	ldr	r2, [r3, #28]
   36642:	2106      	movs	r1, #6
   36644:	f361 0202 	bfi	r2, r1, #0, #3
   36648:	61da      	str	r2, [r3, #28]
   3664a:	e78e      	b.n	3656a <am_hal_pwrctrl_mcu_memory_config+0x4e>
   3664c:	4a08      	ldr	r2, [pc, #32]	@ (36670 <am_hal_pwrctrl_mcu_memory_config+0x154>)
   3664e:	69d3      	ldr	r3, [r2, #28]
   36650:	f043 0307 	orr.w	r3, r3, #7
   36654:	61d3      	str	r3, [r2, #28]
   36656:	e788      	b.n	3656a <am_hal_pwrctrl_mcu_memory_config+0x4e>
   36658:	4a05      	ldr	r2, [pc, #20]	@ (36670 <am_hal_pwrctrl_mcu_memory_config+0x154>)
   3665a:	69d3      	ldr	r3, [r2, #28]
   3665c:	f043 0308 	orr.w	r3, r3, #8
   36660:	61d3      	str	r3, [r2, #28]
   36662:	e7ab      	b.n	365bc <am_hal_pwrctrl_mcu_memory_config+0xa0>
   36664:	69e3      	ldr	r3, [r4, #28]
   36666:	f043 0310 	orr.w	r3, r3, #16
   3666a:	61e3      	str	r3, [r4, #28]
   3666c:	e79e      	b.n	365ac <am_hal_pwrctrl_mcu_memory_config+0x90>
   3666e:	bf00      	nop
   36670:	40021000 	.word	0x40021000
   36674:	40021018 	.word	0x40021018

00036678 <am_hal_pwrctrl_sram_config>:
   36678:	b570      	push	{r4, r5, r6, lr}
   3667a:	4c29      	ldr	r4, [pc, #164]	@ (36720 <am_hal_pwrctrl_sram_config+0xa8>)
   3667c:	7802      	ldrb	r2, [r0, #0]
   3667e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
   36680:	4928      	ldr	r1, [pc, #160]	@ (36724 <am_hal_pwrctrl_sram_config+0xac>)
   36682:	f362 0301 	bfi	r3, r2, #0, #2
   36686:	b082      	sub	sp, #8
   36688:	6263      	str	r3, [r4, #36]	@ 0x24
   3668a:	2601      	movs	r6, #1
   3668c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
   3668e:	9600      	str	r6, [sp, #0]
   36690:	4605      	mov	r5, r0
   36692:	2203      	movs	r2, #3
   36694:	2005      	movs	r0, #5
   36696:	f001 f825 	bl	376e4 <am_hal_delay_us_status_check>
   3669a:	b940      	cbnz	r0, 366ae <am_hal_pwrctrl_sram_config+0x36>
   3669c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
   3669e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
   366a0:	f002 0203 	and.w	r2, r2, #3
   366a4:	f003 0303 	and.w	r3, r3, #3
   366a8:	429a      	cmp	r2, r3
   366aa:	d002      	beq.n	366b2 <am_hal_pwrctrl_sram_config+0x3a>
   366ac:	4630      	mov	r0, r6
   366ae:	b002      	add	sp, #8
   366b0:	bd70      	pop	{r4, r5, r6, pc}
   366b2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
   366b4:	786b      	ldrb	r3, [r5, #1]
   366b6:	f895 c002 	ldrb.w	ip, [r5, #2]
   366ba:	78ee      	ldrb	r6, [r5, #3]
   366bc:	7929      	ldrb	r1, [r5, #4]
   366be:	f363 0283 	bfi	r2, r3, #2, #2
   366c2:	796b      	ldrb	r3, [r5, #5]
   366c4:	62e2      	str	r2, [r4, #44]	@ 0x2c
   366c6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
   366c8:	f36c 1287 	bfi	r2, ip, #6, #2
   366cc:	62e2      	str	r2, [r4, #44]	@ 0x2c
   366ce:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
   366d0:	f366 2209 	bfi	r2, r6, #8, #2
   366d4:	62e2      	str	r2, [r4, #44]	@ 0x2c
   366d6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
   366d8:	f361 1205 	bfi	r2, r1, #4, #2
   366dc:	62e2      	str	r2, [r4, #44]	@ 0x2c
   366de:	2b03      	cmp	r3, #3
   366e0:	d8e5      	bhi.n	366ae <am_hal_pwrctrl_sram_config+0x36>
   366e2:	e8df f003 	tbb	[pc, r3]
   366e6:	0f16      	.short	0x0f16
   366e8:	0208      	.short	0x0208
   366ea:	4b0d      	ldr	r3, [pc, #52]	@ (36720 <am_hal_pwrctrl_sram_config+0xa8>)
   366ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
   366ee:	f36f 0201 	bfc	r2, #0, #2
   366f2:	62da      	str	r2, [r3, #44]	@ 0x2c
   366f4:	e7db      	b.n	366ae <am_hal_pwrctrl_sram_config+0x36>
   366f6:	4b0a      	ldr	r3, [pc, #40]	@ (36720 <am_hal_pwrctrl_sram_config+0xa8>)
   366f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
   366fa:	2101      	movs	r1, #1
   366fc:	f361 0201 	bfi	r2, r1, #0, #2
   36700:	62da      	str	r2, [r3, #44]	@ 0x2c
   36702:	e7d4      	b.n	366ae <am_hal_pwrctrl_sram_config+0x36>
   36704:	4b06      	ldr	r3, [pc, #24]	@ (36720 <am_hal_pwrctrl_sram_config+0xa8>)
   36706:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
   36708:	2102      	movs	r1, #2
   3670a:	f361 0201 	bfi	r2, r1, #0, #2
   3670e:	62da      	str	r2, [r3, #44]	@ 0x2c
   36710:	e7cd      	b.n	366ae <am_hal_pwrctrl_sram_config+0x36>
   36712:	4a03      	ldr	r2, [pc, #12]	@ (36720 <am_hal_pwrctrl_sram_config+0xa8>)
   36714:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
   36716:	f043 0303 	orr.w	r3, r3, #3
   3671a:	62d3      	str	r3, [r2, #44]	@ 0x2c
   3671c:	e7c7      	b.n	366ae <am_hal_pwrctrl_sram_config+0x36>
   3671e:	bf00      	nop
   36720:	40021000 	.word	0x40021000
   36724:	40021028 	.word	0x40021028

00036728 <am_hal_pwrctrl_dsp_memory_config>:
   36728:	b530      	push	{r4, r5, lr}
   3672a:	460c      	mov	r4, r1
   3672c:	b083      	sub	sp, #12
   3672e:	2800      	cmp	r0, #0
   36730:	d053      	beq.n	367da <am_hal_pwrctrl_dsp_memory_config+0xb2>
   36732:	2801      	cmp	r0, #1
   36734:	d14e      	bne.n	367d4 <am_hal_pwrctrl_dsp_memory_config+0xac>
   36736:	780b      	ldrb	r3, [r1, #0]
   36738:	4a6b      	ldr	r2, [pc, #428]	@ (368e8 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   3673a:	2b00      	cmp	r3, #0
   3673c:	f000 809d 	beq.w	3687a <am_hal_pwrctrl_dsp_memory_config+0x152>
   36740:	6f93      	ldr	r3, [r2, #120]	@ 0x78
   36742:	f043 0302 	orr.w	r3, r3, #2
   36746:	6793      	str	r3, [r2, #120]	@ 0x78
   36748:	78a3      	ldrb	r3, [r4, #2]
   3674a:	4a67      	ldr	r2, [pc, #412]	@ (368e8 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   3674c:	2b00      	cmp	r3, #0
   3674e:	f000 809d 	beq.w	3688c <am_hal_pwrctrl_dsp_memory_config+0x164>
   36752:	6f93      	ldr	r3, [r2, #120]	@ 0x78
   36754:	f043 0301 	orr.w	r3, r3, #1
   36758:	6793      	str	r3, [r2, #120]	@ 0x78
   3675a:	4d63      	ldr	r5, [pc, #396]	@ (368e8 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   3675c:	4963      	ldr	r1, [pc, #396]	@ (368ec <am_hal_pwrctrl_dsp_memory_config+0x1c4>)
   3675e:	6fab      	ldr	r3, [r5, #120]	@ 0x78
   36760:	2201      	movs	r2, #1
   36762:	9200      	str	r2, [sp, #0]
   36764:	2005      	movs	r0, #5
   36766:	2203      	movs	r2, #3
   36768:	f000 ffbc 	bl	376e4 <am_hal_delay_us_status_check>
   3676c:	bb98      	cbnz	r0, 367d6 <am_hal_pwrctrl_dsp_memory_config+0xae>
   3676e:	6fea      	ldr	r2, [r5, #124]	@ 0x7c
   36770:	6fab      	ldr	r3, [r5, #120]	@ 0x78
   36772:	f3c2 0240 	ubfx	r2, r2, #1, #1
   36776:	f3c3 0340 	ubfx	r3, r3, #1, #1
   3677a:	429a      	cmp	r2, r3
   3677c:	f040 808b 	bne.w	36896 <am_hal_pwrctrl_dsp_memory_config+0x16e>
   36780:	6fea      	ldr	r2, [r5, #124]	@ 0x7c
   36782:	6fab      	ldr	r3, [r5, #120]	@ 0x78
   36784:	f002 0201 	and.w	r2, r2, #1
   36788:	f003 0301 	and.w	r3, r3, #1
   3678c:	429a      	cmp	r2, r3
   3678e:	f040 8082 	bne.w	36896 <am_hal_pwrctrl_dsp_memory_config+0x16e>
   36792:	7863      	ldrb	r3, [r4, #1]
   36794:	2b00      	cmp	r3, #0
   36796:	f040 8081 	bne.w	3689c <am_hal_pwrctrl_dsp_memory_config+0x174>
   3679a:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
   3679e:	f043 0304 	orr.w	r3, r3, #4
   367a2:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
   367a6:	78e3      	ldrb	r3, [r4, #3]
   367a8:	4a4f      	ldr	r2, [pc, #316]	@ (368e8 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   367aa:	2b00      	cmp	r3, #0
   367ac:	f000 8095 	beq.w	368da <am_hal_pwrctrl_dsp_memory_config+0x1b2>
   367b0:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
   367b4:	f043 0302 	orr.w	r3, r3, #2
   367b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
   367bc:	7923      	ldrb	r3, [r4, #4]
   367be:	2b00      	cmp	r3, #0
   367c0:	f000 8083 	beq.w	368ca <am_hal_pwrctrl_dsp_memory_config+0x1a2>
   367c4:	4b48      	ldr	r3, [pc, #288]	@ (368e8 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   367c6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
   367ca:	f36f 0200 	bfc	r2, #0, #1
   367ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
   367d2:	e000      	b.n	367d6 <am_hal_pwrctrl_dsp_memory_config+0xae>
   367d4:	2000      	movs	r0, #0
   367d6:	b003      	add	sp, #12
   367d8:	bd30      	pop	{r4, r5, pc}
   367da:	780b      	ldrb	r3, [r1, #0]
   367dc:	4a42      	ldr	r2, [pc, #264]	@ (368e8 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   367de:	2b00      	cmp	r3, #0
   367e0:	d13e      	bne.n	36860 <am_hal_pwrctrl_dsp_memory_config+0x138>
   367e2:	6d91      	ldr	r1, [r2, #88]	@ 0x58
   367e4:	f363 0141 	bfi	r1, r3, #1, #1
   367e8:	6591      	str	r1, [r2, #88]	@ 0x58
   367ea:	78a3      	ldrb	r3, [r4, #2]
   367ec:	4a3e      	ldr	r2, [pc, #248]	@ (368e8 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   367ee:	2b00      	cmp	r3, #0
   367f0:	d03e      	beq.n	36870 <am_hal_pwrctrl_dsp_memory_config+0x148>
   367f2:	6d93      	ldr	r3, [r2, #88]	@ 0x58
   367f4:	f043 0301 	orr.w	r3, r3, #1
   367f8:	6593      	str	r3, [r2, #88]	@ 0x58
   367fa:	4d3b      	ldr	r5, [pc, #236]	@ (368e8 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   367fc:	493c      	ldr	r1, [pc, #240]	@ (368f0 <am_hal_pwrctrl_dsp_memory_config+0x1c8>)
   367fe:	6dab      	ldr	r3, [r5, #88]	@ 0x58
   36800:	2201      	movs	r2, #1
   36802:	9200      	str	r2, [sp, #0]
   36804:	2005      	movs	r0, #5
   36806:	2203      	movs	r2, #3
   36808:	f000 ff6c 	bl	376e4 <am_hal_delay_us_status_check>
   3680c:	2800      	cmp	r0, #0
   3680e:	d1e2      	bne.n	367d6 <am_hal_pwrctrl_dsp_memory_config+0xae>
   36810:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
   36812:	6dab      	ldr	r3, [r5, #88]	@ 0x58
   36814:	f3c2 0240 	ubfx	r2, r2, #1, #1
   36818:	f3c3 0340 	ubfx	r3, r3, #1, #1
   3681c:	429a      	cmp	r2, r3
   3681e:	d13a      	bne.n	36896 <am_hal_pwrctrl_dsp_memory_config+0x16e>
   36820:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
   36822:	6dab      	ldr	r3, [r5, #88]	@ 0x58
   36824:	f002 0201 	and.w	r2, r2, #1
   36828:	f003 0301 	and.w	r3, r3, #1
   3682c:	429a      	cmp	r2, r3
   3682e:	d132      	bne.n	36896 <am_hal_pwrctrl_dsp_memory_config+0x16e>
   36830:	7863      	ldrb	r3, [r4, #1]
   36832:	2b00      	cmp	r3, #0
   36834:	d139      	bne.n	368aa <am_hal_pwrctrl_dsp_memory_config+0x182>
   36836:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
   36838:	f043 0304 	orr.w	r3, r3, #4
   3683c:	662b      	str	r3, [r5, #96]	@ 0x60
   3683e:	78e3      	ldrb	r3, [r4, #3]
   36840:	4a29      	ldr	r2, [pc, #164]	@ (368e8 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   36842:	2b00      	cmp	r3, #0
   36844:	d03c      	beq.n	368c0 <am_hal_pwrctrl_dsp_memory_config+0x198>
   36846:	6e13      	ldr	r3, [r2, #96]	@ 0x60
   36848:	f043 0302 	orr.w	r3, r3, #2
   3684c:	6613      	str	r3, [r2, #96]	@ 0x60
   3684e:	7923      	ldrb	r3, [r4, #4]
   36850:	2b00      	cmp	r3, #0
   36852:	d02f      	beq.n	368b4 <am_hal_pwrctrl_dsp_memory_config+0x18c>
   36854:	4b24      	ldr	r3, [pc, #144]	@ (368e8 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   36856:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
   36858:	f36f 0200 	bfc	r2, #0, #1
   3685c:	661a      	str	r2, [r3, #96]	@ 0x60
   3685e:	e7ba      	b.n	367d6 <am_hal_pwrctrl_dsp_memory_config+0xae>
   36860:	6d93      	ldr	r3, [r2, #88]	@ 0x58
   36862:	f043 0302 	orr.w	r3, r3, #2
   36866:	6593      	str	r3, [r2, #88]	@ 0x58
   36868:	78a3      	ldrb	r3, [r4, #2]
   3686a:	4a1f      	ldr	r2, [pc, #124]	@ (368e8 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   3686c:	2b00      	cmp	r3, #0
   3686e:	d1c0      	bne.n	367f2 <am_hal_pwrctrl_dsp_memory_config+0xca>
   36870:	6d91      	ldr	r1, [r2, #88]	@ 0x58
   36872:	f363 0100 	bfi	r1, r3, #0, #1
   36876:	6591      	str	r1, [r2, #88]	@ 0x58
   36878:	e7bf      	b.n	367fa <am_hal_pwrctrl_dsp_memory_config+0xd2>
   3687a:	6f91      	ldr	r1, [r2, #120]	@ 0x78
   3687c:	f363 0141 	bfi	r1, r3, #1, #1
   36880:	6791      	str	r1, [r2, #120]	@ 0x78
   36882:	78a3      	ldrb	r3, [r4, #2]
   36884:	4a18      	ldr	r2, [pc, #96]	@ (368e8 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   36886:	2b00      	cmp	r3, #0
   36888:	f47f af63 	bne.w	36752 <am_hal_pwrctrl_dsp_memory_config+0x2a>
   3688c:	6f91      	ldr	r1, [r2, #120]	@ 0x78
   3688e:	f363 0100 	bfi	r1, r3, #0, #1
   36892:	6791      	str	r1, [r2, #120]	@ 0x78
   36894:	e761      	b.n	3675a <am_hal_pwrctrl_dsp_memory_config+0x32>
   36896:	2001      	movs	r0, #1
   36898:	b003      	add	sp, #12
   3689a:	bd30      	pop	{r4, r5, pc}
   3689c:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
   368a0:	f360 0382 	bfi	r3, r0, #2, #1
   368a4:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
   368a8:	e77d      	b.n	367a6 <am_hal_pwrctrl_dsp_memory_config+0x7e>
   368aa:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
   368ac:	f360 0382 	bfi	r3, r0, #2, #1
   368b0:	662b      	str	r3, [r5, #96]	@ 0x60
   368b2:	e7c4      	b.n	3683e <am_hal_pwrctrl_dsp_memory_config+0x116>
   368b4:	4a0c      	ldr	r2, [pc, #48]	@ (368e8 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   368b6:	6e13      	ldr	r3, [r2, #96]	@ 0x60
   368b8:	f043 0301 	orr.w	r3, r3, #1
   368bc:	6613      	str	r3, [r2, #96]	@ 0x60
   368be:	e78a      	b.n	367d6 <am_hal_pwrctrl_dsp_memory_config+0xae>
   368c0:	6e11      	ldr	r1, [r2, #96]	@ 0x60
   368c2:	f363 0141 	bfi	r1, r3, #1, #1
   368c6:	6611      	str	r1, [r2, #96]	@ 0x60
   368c8:	e7c1      	b.n	3684e <am_hal_pwrctrl_dsp_memory_config+0x126>
   368ca:	4a07      	ldr	r2, [pc, #28]	@ (368e8 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   368cc:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
   368d0:	f043 0301 	orr.w	r3, r3, #1
   368d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
   368d8:	e77d      	b.n	367d6 <am_hal_pwrctrl_dsp_memory_config+0xae>
   368da:	f8d2 1080 	ldr.w	r1, [r2, #128]	@ 0x80
   368de:	f363 0141 	bfi	r1, r3, #1, #1
   368e2:	f8c2 1080 	str.w	r1, [r2, #128]	@ 0x80
   368e6:	e769      	b.n	367bc <am_hal_pwrctrl_dsp_memory_config+0x94>
   368e8:	40021000 	.word	0x40021000
   368ec:	4002107c 	.word	0x4002107c
   368f0:	4002105c 	.word	0x4002105c

000368f4 <am_hal_pwrctrl_periph_enable>:
   368f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   368f8:	2821      	cmp	r0, #33	@ 0x21
   368fa:	b089      	sub	sp, #36	@ 0x24
   368fc:	d831      	bhi.n	36962 <am_hal_pwrctrl_periph_enable+0x6e>
   368fe:	4b5e      	ldr	r3, [pc, #376]	@ (36a78 <am_hal_pwrctrl_periph_enable+0x184>)
   36900:	0101      	lsls	r1, r0, #4
   36902:	eb03 1200 	add.w	r2, r3, r0, lsl #4
   36906:	585f      	ldr	r7, [r3, r1]
   36908:	f8d2 8004 	ldr.w	r8, [r2, #4]
   3690c:	6839      	ldr	r1, [r7, #0]
   3690e:	ea11 0f08 	tst.w	r1, r8
   36912:	4604      	mov	r4, r0
   36914:	d120      	bne.n	36958 <am_hal_pwrctrl_periph_enable+0x64>
   36916:	2814      	cmp	r0, #20
   36918:	e9d2 6502 	ldrd	r6, r5, [r2, #8]
   3691c:	d026      	beq.n	3696c <am_hal_pwrctrl_periph_enable+0x78>
   3691e:	f7ff fc47 	bl	361b0 <am_hal_interrupt_master_disable>
   36922:	9005      	str	r0, [sp, #20]
   36924:	683b      	ldr	r3, [r7, #0]
   36926:	ea43 0308 	orr.w	r3, r3, r8
   3692a:	603b      	str	r3, [r7, #0]
   3692c:	9805      	ldr	r0, [sp, #20]
   3692e:	f7ff fc43 	bl	361b8 <am_hal_interrupt_master_set>
   36932:	2301      	movs	r3, #1
   36934:	9300      	str	r3, [sp, #0]
   36936:	462a      	mov	r2, r5
   36938:	462b      	mov	r3, r5
   3693a:	4631      	mov	r1, r6
   3693c:	2005      	movs	r0, #5
   3693e:	f000 fed1 	bl	376e4 <am_hal_delay_us_status_check>
   36942:	4604      	mov	r4, r0
   36944:	b920      	cbnz	r0, 36950 <am_hal_pwrctrl_periph_enable+0x5c>
   36946:	6833      	ldr	r3, [r6, #0]
   36948:	422b      	tst	r3, r5
   3694a:	bf0c      	ite	eq
   3694c:	2401      	moveq	r4, #1
   3694e:	2400      	movne	r4, #0
   36950:	4620      	mov	r0, r4
   36952:	b009      	add	sp, #36	@ 0x24
   36954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36958:	2400      	movs	r4, #0
   3695a:	4620      	mov	r0, r4
   3695c:	b009      	add	sp, #36	@ 0x24
   3695e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36962:	2406      	movs	r4, #6
   36964:	4620      	mov	r0, r4
   36966:	b009      	add	sp, #36	@ 0x24
   36968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3696c:	f8df 9120 	ldr.w	r9, [pc, #288]	@ 36a90 <am_hal_pwrctrl_periph_enable+0x19c>
   36970:	f8d9 a000 	ldr.w	sl, [r9]
   36974:	f1ba 0f00 	cmp.w	sl, #0
   36978:	d02f      	beq.n	369da <am_hal_pwrctrl_periph_enable+0xe6>
   3697a:	f8df b108 	ldr.w	fp, [pc, #264]	@ 36a84 <am_hal_pwrctrl_periph_enable+0x190>
   3697e:	f89b 3000 	ldrb.w	r3, [fp]
   36982:	bb53      	cbnz	r3, 369da <am_hal_pwrctrl_periph_enable+0xe6>
   36984:	f7ff fc14 	bl	361b0 <am_hal_interrupt_master_disable>
   36988:	4a3c      	ldr	r2, [pc, #240]	@ (36a7c <am_hal_pwrctrl_periph_enable+0x188>)
   3698a:	493d      	ldr	r1, [pc, #244]	@ (36a80 <am_hal_pwrctrl_periph_enable+0x18c>)
   3698c:	6813      	ldr	r3, [r2, #0]
   3698e:	9006      	str	r0, [sp, #24]
   36990:	4453      	add	r3, sl
   36992:	6013      	str	r3, [r2, #0]
   36994:	f383 0006 	usat	r0, #6, r3
   36998:	680b      	ldr	r3, [r1, #0]
   3699a:	2201      	movs	r2, #1
   3699c:	4453      	add	r3, sl
   3699e:	f8df a0e8 	ldr.w	sl, [pc, #232]	@ 36a88 <am_hal_pwrctrl_periph_enable+0x194>
   369a2:	600b      	str	r3, [r1, #0]
   369a4:	9303      	str	r3, [sp, #12]
   369a6:	f88b 2000 	strb.w	r2, [fp]
   369aa:	f8da 236c 	ldr.w	r2, [sl, #876]	@ 0x36c
   369ae:	f360 5219 	bfi	r2, r0, #20, #6
   369b2:	f8ca 236c 	str.w	r2, [sl, #876]	@ 0x36c
   369b6:	4620      	mov	r0, r4
   369b8:	f000 fe50 	bl	3765c <am_hal_delay_us>
   369bc:	9b03      	ldr	r3, [sp, #12]
   369be:	f8da 2088 	ldr.w	r2, [sl, #136]	@ 0x88
   369c2:	f383 0306 	usat	r3, #6, r3
   369c6:	f363 0205 	bfi	r2, r3, #0, #6
   369ca:	f8ca 2088 	str.w	r2, [sl, #136]	@ 0x88
   369ce:	9806      	ldr	r0, [sp, #24]
   369d0:	f7ff fbf2 	bl	361b8 <am_hal_interrupt_master_set>
   369d4:	4620      	mov	r0, r4
   369d6:	f000 fe41 	bl	3765c <am_hal_delay_us>
   369da:	f7ff fbe9 	bl	361b0 <am_hal_interrupt_master_disable>
   369de:	9005      	str	r0, [sp, #20]
   369e0:	683b      	ldr	r3, [r7, #0]
   369e2:	ea48 0303 	orr.w	r3, r8, r3
   369e6:	603b      	str	r3, [r7, #0]
   369e8:	9805      	ldr	r0, [sp, #20]
   369ea:	f7ff fbe5 	bl	361b8 <am_hal_interrupt_master_set>
   369ee:	2301      	movs	r3, #1
   369f0:	9300      	str	r3, [sp, #0]
   369f2:	462a      	mov	r2, r5
   369f4:	462b      	mov	r3, r5
   369f6:	4631      	mov	r1, r6
   369f8:	2005      	movs	r0, #5
   369fa:	f000 fe73 	bl	376e4 <am_hal_delay_us_status_check>
   369fe:	4604      	mov	r4, r0
   36a00:	b378      	cbz	r0, 36a62 <am_hal_pwrctrl_periph_enable+0x16e>
   36a02:	f8d9 5000 	ldr.w	r5, [r9]
   36a06:	2d00      	cmp	r5, #0
   36a08:	d0a2      	beq.n	36950 <am_hal_pwrctrl_periph_enable+0x5c>
   36a0a:	4e1e      	ldr	r6, [pc, #120]	@ (36a84 <am_hal_pwrctrl_periph_enable+0x190>)
   36a0c:	7833      	ldrb	r3, [r6, #0]
   36a0e:	2b00      	cmp	r3, #0
   36a10:	d09e      	beq.n	36950 <am_hal_pwrctrl_periph_enable+0x5c>
   36a12:	f7ff fbcd 	bl	361b0 <am_hal_interrupt_master_disable>
   36a16:	4b19      	ldr	r3, [pc, #100]	@ (36a7c <am_hal_pwrctrl_periph_enable+0x188>)
   36a18:	4f1b      	ldr	r7, [pc, #108]	@ (36a88 <am_hal_pwrctrl_periph_enable+0x194>)
   36a1a:	9007      	str	r0, [sp, #28]
   36a1c:	2200      	movs	r2, #0
   36a1e:	7032      	strb	r2, [r6, #0]
   36a20:	681e      	ldr	r6, [r3, #0]
   36a22:	4a17      	ldr	r2, [pc, #92]	@ (36a80 <am_hal_pwrctrl_periph_enable+0x18c>)
   36a24:	1b76      	subs	r6, r6, r5
   36a26:	601e      	str	r6, [r3, #0]
   36a28:	6813      	ldr	r3, [r2, #0]
   36a2a:	1b5d      	subs	r5, r3, r5
   36a2c:	6015      	str	r5, [r2, #0]
   36a2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
   36a32:	f385 0506 	usat	r5, #6, r5
   36a36:	f365 0305 	bfi	r3, r5, #0, #6
   36a3a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   36a3e:	2014      	movs	r0, #20
   36a40:	f000 fe0c 	bl	3765c <am_hal_delay_us>
   36a44:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
   36a48:	f386 0606 	usat	r6, #6, r6
   36a4c:	f366 5319 	bfi	r3, r6, #20, #6
   36a50:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
   36a54:	9807      	ldr	r0, [sp, #28]
   36a56:	f7ff fbaf 	bl	361b8 <am_hal_interrupt_master_set>
   36a5a:	2014      	movs	r0, #20
   36a5c:	f000 fdfe 	bl	3765c <am_hal_delay_us>
   36a60:	e776      	b.n	36950 <am_hal_pwrctrl_periph_enable+0x5c>
   36a62:	2301      	movs	r3, #1
   36a64:	4909      	ldr	r1, [pc, #36]	@ (36a8c <am_hal_pwrctrl_periph_enable+0x198>)
   36a66:	461a      	mov	r2, r3
   36a68:	2064      	movs	r0, #100	@ 0x64
   36a6a:	f000 fe0f 	bl	3768c <am_hal_delay_us_status_change>
   36a6e:	4604      	mov	r4, r0
   36a70:	2800      	cmp	r0, #0
   36a72:	f43f af68 	beq.w	36946 <am_hal_pwrctrl_periph_enable+0x52>
   36a76:	e76b      	b.n	36950 <am_hal_pwrctrl_periph_enable+0x5c>
   36a78:	0004bc74 	.word	0x0004bc74
   36a7c:	100537dc 	.word	0x100537dc
   36a80:	100537d8 	.word	0x100537d8
   36a84:	100537d4 	.word	0x100537d4
   36a88:	40020000 	.word	0x40020000
   36a8c:	400c1f10 	.word	0x400c1f10
   36a90:	100537fc 	.word	0x100537fc

00036a94 <am_hal_pwrctrl_periph_disable>:
   36a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36a98:	2821      	cmp	r0, #33	@ 0x21
   36a9a:	b085      	sub	sp, #20
   36a9c:	d82b      	bhi.n	36af6 <am_hal_pwrctrl_periph_disable+0x62>
   36a9e:	4b55      	ldr	r3, [pc, #340]	@ (36bf4 <am_hal_pwrctrl_periph_disable+0x160>)
   36aa0:	0101      	lsls	r1, r0, #4
   36aa2:	eb03 1200 	add.w	r2, r3, r0, lsl #4
   36aa6:	585d      	ldr	r5, [r3, r1]
   36aa8:	6857      	ldr	r7, [r2, #4]
   36aaa:	682b      	ldr	r3, [r5, #0]
   36aac:	423b      	tst	r3, r7
   36aae:	4604      	mov	r4, r0
   36ab0:	d01c      	beq.n	36aec <am_hal_pwrctrl_periph_disable+0x58>
   36ab2:	2814      	cmp	r0, #20
   36ab4:	e9d2 9802 	ldrd	r9, r8, [r2, #8]
   36ab8:	d105      	bne.n	36ac6 <am_hal_pwrctrl_periph_disable+0x32>
   36aba:	f8df a150 	ldr.w	sl, [pc, #336]	@ 36c0c <am_hal_pwrctrl_periph_disable+0x178>
   36abe:	f8da 3fe0 	ldr.w	r3, [sl, #4064]	@ 0xfe0
   36ac2:	2bc0      	cmp	r3, #192	@ 0xc0
   36ac4:	d037      	beq.n	36b36 <am_hal_pwrctrl_periph_disable+0xa2>
   36ac6:	f7ff fb73 	bl	361b0 <am_hal_interrupt_master_disable>
   36aca:	9002      	str	r0, [sp, #8]
   36acc:	682b      	ldr	r3, [r5, #0]
   36ace:	ea23 0707 	bic.w	r7, r3, r7
   36ad2:	602f      	str	r7, [r5, #0]
   36ad4:	9802      	ldr	r0, [sp, #8]
   36ad6:	f7ff fb6f 	bl	361b8 <am_hal_interrupt_master_set>
   36ada:	2300      	movs	r3, #0
   36adc:	9300      	str	r3, [sp, #0]
   36ade:	4642      	mov	r2, r8
   36ae0:	4643      	mov	r3, r8
   36ae2:	4649      	mov	r1, r9
   36ae4:	2005      	movs	r0, #5
   36ae6:	f000 fdfd 	bl	376e4 <am_hal_delay_us_status_check>
   36aea:	b948      	cbnz	r0, 36b00 <am_hal_pwrctrl_periph_disable+0x6c>
   36aec:	2600      	movs	r6, #0
   36aee:	4630      	mov	r0, r6
   36af0:	b005      	add	sp, #20
   36af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36af6:	2606      	movs	r6, #6
   36af8:	4630      	mov	r0, r6
   36afa:	b005      	add	sp, #20
   36afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36b00:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
   36b04:	d070      	beq.n	36be8 <am_hal_pwrctrl_periph_disable+0x154>
   36b06:	d90b      	bls.n	36b20 <am_hal_pwrctrl_periph_disable+0x8c>
   36b08:	f5b8 5ff0 	cmp.w	r8, #7680	@ 0x1e00
   36b0c:	d067      	beq.n	36bde <am_hal_pwrctrl_periph_disable+0x14a>
   36b0e:	f5b8 3fe0 	cmp.w	r8, #114688	@ 0x1c000
   36b12:	d1eb      	bne.n	36aec <am_hal_pwrctrl_periph_disable+0x58>
   36b14:	682b      	ldr	r3, [r5, #0]
   36b16:	f413 3fe0 	tst.w	r3, #114688	@ 0x1c000
   36b1a:	d0e7      	beq.n	36aec <am_hal_pwrctrl_periph_disable+0x58>
   36b1c:	682b      	ldr	r3, [r5, #0]
   36b1e:	e7e5      	b.n	36aec <am_hal_pwrctrl_periph_disable+0x58>
   36b20:	f1b8 0f1e 	cmp.w	r8, #30
   36b24:	d056      	beq.n	36bd4 <am_hal_pwrctrl_periph_disable+0x140>
   36b26:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
   36b2a:	d1df      	bne.n	36aec <am_hal_pwrctrl_periph_disable+0x58>
   36b2c:	682b      	ldr	r3, [r5, #0]
   36b2e:	b2db      	uxtb	r3, r3
   36b30:	2b00      	cmp	r3, #0
   36b32:	d0db      	beq.n	36aec <am_hal_pwrctrl_periph_disable+0x58>
   36b34:	e7f2      	b.n	36b1c <am_hal_pwrctrl_periph_disable+0x88>
   36b36:	2301      	movs	r3, #1
   36b38:	492f      	ldr	r1, [pc, #188]	@ (36bf8 <am_hal_pwrctrl_periph_disable+0x164>)
   36b3a:	461a      	mov	r2, r3
   36b3c:	2064      	movs	r0, #100	@ 0x64
   36b3e:	f000 fda5 	bl	3768c <am_hal_delay_us_status_change>
   36b42:	4606      	mov	r6, r0
   36b44:	2800      	cmp	r0, #0
   36b46:	d1d2      	bne.n	36aee <am_hal_pwrctrl_periph_disable+0x5a>
   36b48:	2301      	movs	r3, #1
   36b4a:	492c      	ldr	r1, [pc, #176]	@ (36bfc <am_hal_pwrctrl_periph_disable+0x168>)
   36b4c:	461a      	mov	r2, r3
   36b4e:	2064      	movs	r0, #100	@ 0x64
   36b50:	f000 fd9c 	bl	3768c <am_hal_delay_us_status_change>
   36b54:	4606      	mov	r6, r0
   36b56:	2800      	cmp	r0, #0
   36b58:	d1c9      	bne.n	36aee <am_hal_pwrctrl_periph_disable+0x5a>
   36b5a:	f8da 3a80 	ldr.w	r3, [sl, #2688]	@ 0xa80
   36b5e:	f043 0301 	orr.w	r3, r3, #1
   36b62:	f8ca 3a80 	str.w	r3, [sl, #2688]	@ 0xa80
   36b66:	4b26      	ldr	r3, [pc, #152]	@ (36c00 <am_hal_pwrctrl_periph_disable+0x16c>)
   36b68:	f8d3 a000 	ldr.w	sl, [r3]
   36b6c:	f1ba 0f00 	cmp.w	sl, #0
   36b70:	d0a9      	beq.n	36ac6 <am_hal_pwrctrl_periph_disable+0x32>
   36b72:	f8df b09c 	ldr.w	fp, [pc, #156]	@ 36c10 <am_hal_pwrctrl_periph_disable+0x17c>
   36b76:	f89b 3000 	ldrb.w	r3, [fp]
   36b7a:	2b00      	cmp	r3, #0
   36b7c:	d0a3      	beq.n	36ac6 <am_hal_pwrctrl_periph_disable+0x32>
   36b7e:	f7ff fb17 	bl	361b0 <am_hal_interrupt_master_disable>
   36b82:	4b20      	ldr	r3, [pc, #128]	@ (36c04 <am_hal_pwrctrl_periph_disable+0x170>)
   36b84:	f88b 6000 	strb.w	r6, [fp]
   36b88:	681e      	ldr	r6, [r3, #0]
   36b8a:	4a1f      	ldr	r2, [pc, #124]	@ (36c08 <am_hal_pwrctrl_periph_disable+0x174>)
   36b8c:	9003      	str	r0, [sp, #12]
   36b8e:	eba6 060a 	sub.w	r6, r6, sl
   36b92:	601e      	str	r6, [r3, #0]
   36b94:	6813      	ldr	r3, [r2, #0]
   36b96:	eba3 030a 	sub.w	r3, r3, sl
   36b9a:	f8df a078 	ldr.w	sl, [pc, #120]	@ 36c14 <am_hal_pwrctrl_periph_disable+0x180>
   36b9e:	6013      	str	r3, [r2, #0]
   36ba0:	f8da 2088 	ldr.w	r2, [sl, #136]	@ 0x88
   36ba4:	f383 0306 	usat	r3, #6, r3
   36ba8:	f363 0205 	bfi	r2, r3, #0, #6
   36bac:	4620      	mov	r0, r4
   36bae:	f8ca 2088 	str.w	r2, [sl, #136]	@ 0x88
   36bb2:	f000 fd53 	bl	3765c <am_hal_delay_us>
   36bb6:	f8da 336c 	ldr.w	r3, [sl, #876]	@ 0x36c
   36bba:	f386 0606 	usat	r6, #6, r6
   36bbe:	f366 5319 	bfi	r3, r6, #20, #6
   36bc2:	f8ca 336c 	str.w	r3, [sl, #876]	@ 0x36c
   36bc6:	9803      	ldr	r0, [sp, #12]
   36bc8:	f7ff faf6 	bl	361b8 <am_hal_interrupt_master_set>
   36bcc:	4620      	mov	r0, r4
   36bce:	f000 fd45 	bl	3765c <am_hal_delay_us>
   36bd2:	e778      	b.n	36ac6 <am_hal_pwrctrl_periph_disable+0x32>
   36bd4:	682b      	ldr	r3, [r5, #0]
   36bd6:	f013 0f1e 	tst.w	r3, #30
   36bda:	d087      	beq.n	36aec <am_hal_pwrctrl_periph_disable+0x58>
   36bdc:	e79e      	b.n	36b1c <am_hal_pwrctrl_periph_disable+0x88>
   36bde:	682b      	ldr	r3, [r5, #0]
   36be0:	f413 5ff0 	tst.w	r3, #7680	@ 0x1e00
   36be4:	d082      	beq.n	36aec <am_hal_pwrctrl_periph_disable+0x58>
   36be6:	e799      	b.n	36b1c <am_hal_pwrctrl_periph_disable+0x88>
   36be8:	682b      	ldr	r3, [r5, #0]
   36bea:	f413 7ff0 	tst.w	r3, #480	@ 0x1e0
   36bee:	f43f af7d 	beq.w	36aec <am_hal_pwrctrl_periph_disable+0x58>
   36bf2:	e793      	b.n	36b1c <am_hal_pwrctrl_periph_disable+0x88>
   36bf4:	0004bc74 	.word	0x0004bc74
   36bf8:	400c0a7c 	.word	0x400c0a7c
   36bfc:	400c1f10 	.word	0x400c1f10
   36c00:	100537fc 	.word	0x100537fc
   36c04:	100537dc 	.word	0x100537dc
   36c08:	100537d8 	.word	0x100537d8
   36c0c:	400c0000 	.word	0x400c0000
   36c10:	100537d4 	.word	0x100537d4
   36c14:	40020000 	.word	0x40020000

00036c18 <am_hal_pwrctrl_low_power_init>:
   36c18:	b530      	push	{r4, r5, lr}
   36c1a:	4c54      	ldr	r4, [pc, #336]	@ (36d6c <am_hal_pwrctrl_low_power_init+0x154>)
   36c1c:	4a54      	ldr	r2, [pc, #336]	@ (36d70 <am_hal_pwrctrl_low_power_init+0x158>)
   36c1e:	68a3      	ldr	r3, [r4, #8]
   36c20:	4854      	ldr	r0, [pc, #336]	@ (36d74 <am_hal_pwrctrl_low_power_init+0x15c>)
   36c22:	b083      	sub	sp, #12
   36c24:	f04f 2540 	mov.w	r5, #1073758208	@ 0x40004000
   36c28:	f3c3 5300 	ubfx	r3, r3, #20, #1
   36c2c:	7013      	strb	r3, [r2, #0]
   36c2e:	f7ff fc75 	bl	3651c <am_hal_pwrctrl_mcu_memory_config>
   36c32:	4851      	ldr	r0, [pc, #324]	@ (36d78 <am_hal_pwrctrl_low_power_init+0x160>)
   36c34:	f7ff fd20 	bl	36678 <am_hal_pwrctrl_sram_config>
   36c38:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
   36c3a:	4850      	ldr	r0, [pc, #320]	@ (36d7c <am_hal_pwrctrl_low_power_init+0x164>)
   36c3c:	2300      	movs	r3, #0
   36c3e:	f442 027c 	orr.w	r2, r2, #16515072	@ 0xfc0000
   36c42:	646a      	str	r2, [r5, #68]	@ 0x44
   36c44:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
   36c48:	f8c4 3144 	str.w	r3, [r4, #324]	@ 0x144
   36c4c:	f8c4 3148 	str.w	r3, [r4, #328]	@ 0x148
   36c50:	f8c4 314c 	str.w	r3, [r4, #332]	@ 0x14c
   36c54:	f8c4 3150 	str.w	r3, [r4, #336]	@ 0x150
   36c58:	f8c4 3154 	str.w	r3, [r4, #340]	@ 0x154
   36c5c:	f8c4 3158 	str.w	r3, [r4, #344]	@ 0x158
   36c60:	f8c4 315c 	str.w	r3, [r4, #348]	@ 0x15c
   36c64:	f8c4 3160 	str.w	r3, [r4, #352]	@ 0x160
   36c68:	f8c4 3164 	str.w	r3, [r4, #356]	@ 0x164
   36c6c:	f8c4 3168 	str.w	r3, [r4, #360]	@ 0x168
   36c70:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
   36c74:	f8c4 3170 	str.w	r3, [r4, #368]	@ 0x170
   36c78:	f8c4 3174 	str.w	r3, [r4, #372]	@ 0x174
   36c7c:	f8c4 3178 	str.w	r3, [r4, #376]	@ 0x178
   36c80:	f8c4 317c 	str.w	r3, [r4, #380]	@ 0x17c
   36c84:	f8c4 3180 	str.w	r3, [r4, #384]	@ 0x180
   36c88:	f8c4 3184 	str.w	r3, [r4, #388]	@ 0x184
   36c8c:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
   36c90:	f7fe ffc6 	bl	35c20 <am_hal_daxi_config>
   36c94:	2064      	movs	r0, #100	@ 0x64
   36c96:	f000 fce1 	bl	3765c <am_hal_delay_us>
   36c9a:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
   36c9c:	4b38      	ldr	r3, [pc, #224]	@ (36d80 <am_hal_pwrctrl_low_power_init+0x168>)
   36c9e:	4c39      	ldr	r4, [pc, #228]	@ (36d84 <am_hal_pwrctrl_low_power_init+0x16c>)
   36ca0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
   36ca4:	646a      	str	r2, [r5, #68]	@ 0x44
   36ca6:	f8d3 237c 	ldr.w	r2, [r3, #892]	@ 0x37c
   36caa:	f042 62bf 	orr.w	r2, r2, #100139008	@ 0x5f80000
   36cae:	f442 22d0 	orr.w	r2, r2, #425984	@ 0x68000
   36cb2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
   36cb6:	f8d3 2444 	ldr.w	r2, [r3, #1092]	@ 0x444
   36cba:	2104      	movs	r1, #4
   36cbc:	f361 220f 	bfi	r2, r1, #8, #8
   36cc0:	f8c3 2444 	str.w	r2, [r3, #1092]	@ 0x444
   36cc4:	7822      	ldrb	r2, [r4, #0]
   36cc6:	b1da      	cbz	r2, 36d00 <am_hal_pwrctrl_low_power_init+0xe8>
   36cc8:	4a2f      	ldr	r2, [pc, #188]	@ (36d88 <am_hal_pwrctrl_low_power_init+0x170>)
   36cca:	4b30      	ldr	r3, [pc, #192]	@ (36d8c <am_hal_pwrctrl_low_power_init+0x174>)
   36ccc:	6810      	ldr	r0, [r2, #0]
   36cce:	6819      	ldr	r1, [r3, #0]
   36cd0:	4b2f      	ldr	r3, [pc, #188]	@ (36d90 <am_hal_pwrctrl_low_power_init+0x178>)
   36cd2:	4d30      	ldr	r5, [pc, #192]	@ (36d94 <am_hal_pwrctrl_low_power_init+0x17c>)
   36cd4:	4c30      	ldr	r4, [pc, #192]	@ (36d98 <am_hal_pwrctrl_low_power_init+0x180>)
   36cd6:	6018      	str	r0, [r3, #0]
   36cd8:	2201      	movs	r2, #1
   36cda:	2300      	movs	r3, #0
   36cdc:	6029      	str	r1, [r5, #0]
   36cde:	6023      	str	r3, [r4, #0]
   36ce0:	f44f 6192 	mov.w	r1, #1168	@ 0x490
   36ce4:	ab01      	add	r3, sp, #4
   36ce6:	4610      	mov	r0, r2
   36ce8:	f7ff fb10 	bl	3630c <am_hal_mram_info_read>
   36cec:	b928      	cbnz	r0, 36cfa <am_hal_pwrctrl_low_power_init+0xe2>
   36cee:	9b01      	ldr	r3, [sp, #4]
   36cf0:	f013 0f06 	tst.w	r3, #6
   36cf4:	d129      	bne.n	36d4a <am_hal_pwrctrl_low_power_init+0x132>
   36cf6:	2303      	movs	r3, #3
   36cf8:	6023      	str	r3, [r4, #0]
   36cfa:	2000      	movs	r0, #0
   36cfc:	b003      	add	sp, #12
   36cfe:	bd30      	pop	{r4, r5, pc}
   36d00:	f8d3 036c 	ldr.w	r0, [r3, #876]	@ 0x36c
   36d04:	4a20      	ldr	r2, [pc, #128]	@ (36d88 <am_hal_pwrctrl_low_power_init+0x170>)
   36d06:	4d25      	ldr	r5, [pc, #148]	@ (36d9c <am_hal_pwrctrl_low_power_init+0x184>)
   36d08:	f3c0 5005 	ubfx	r0, r0, #20, #6
   36d0c:	6010      	str	r0, [r2, #0]
   36d0e:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
   36d12:	4a1e      	ldr	r2, [pc, #120]	@ (36d8c <am_hal_pwrctrl_low_power_init+0x174>)
   36d14:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
   36d18:	6011      	str	r1, [r2, #0]
   36d1a:	f8d3 236c 	ldr.w	r2, [r3, #876]	@ 0x36c
   36d1e:	0e92      	lsrs	r2, r2, #26
   36d20:	602a      	str	r2, [r5, #0]
   36d22:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
   36d26:	4d1e      	ldr	r5, [pc, #120]	@ (36da0 <am_hal_pwrctrl_low_power_init+0x188>)
   36d28:	f3c2 4285 	ubfx	r2, r2, #18, #6
   36d2c:	602a      	str	r2, [r5, #0]
   36d2e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
   36d30:	4d1c      	ldr	r5, [pc, #112]	@ (36da4 <am_hal_pwrctrl_low_power_init+0x18c>)
   36d32:	f3c2 12c6 	ubfx	r2, r2, #7, #7
   36d36:	602a      	str	r2, [r5, #0]
   36d38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
   36d3c:	4a1a      	ldr	r2, [pc, #104]	@ (36da8 <am_hal_pwrctrl_low_power_init+0x190>)
   36d3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
   36d42:	6013      	str	r3, [r2, #0]
   36d44:	2301      	movs	r3, #1
   36d46:	7023      	strb	r3, [r4, #0]
   36d48:	e7c2      	b.n	36cd0 <am_hal_pwrctrl_low_power_init+0xb8>
   36d4a:	079a      	lsls	r2, r3, #30
   36d4c:	d404      	bmi.n	36d58 <am_hal_pwrctrl_low_power_init+0x140>
   36d4e:	2306      	movs	r3, #6
   36d50:	2000      	movs	r0, #0
   36d52:	6023      	str	r3, [r4, #0]
   36d54:	b003      	add	sp, #12
   36d56:	bd30      	pop	{r4, r5, pc}
   36d58:	075b      	lsls	r3, r3, #29
   36d5a:	bf54      	ite	pl
   36d5c:	2309      	movpl	r3, #9
   36d5e:	6020      	strmi	r0, [r4, #0]
   36d60:	f04f 0000 	mov.w	r0, #0
   36d64:	bf58      	it	pl
   36d66:	6023      	strpl	r3, [r4, #0]
   36d68:	b003      	add	sp, #12
   36d6a:	bd30      	pop	{r4, r5, pc}
   36d6c:	40021000 	.word	0x40021000
   36d70:	100537d4 	.word	0x100537d4
   36d74:	0004be94 	.word	0x0004be94
   36d78:	0004be9c 	.word	0x0004be9c
   36d7c:	0004bc50 	.word	0x0004bc50
   36d80:	40020000 	.word	0x40020000
   36d84:	100537d5 	.word	0x100537d5
   36d88:	100537e0 	.word	0x100537e0
   36d8c:	100537ec 	.word	0x100537ec
   36d90:	100537dc 	.word	0x100537dc
   36d94:	100537d8 	.word	0x100537d8
   36d98:	100537fc 	.word	0x100537fc
   36d9c:	100537e8 	.word	0x100537e8
   36da0:	100537f0 	.word	0x100537f0
   36da4:	100537f4 	.word	0x100537f4
   36da8:	100537e4 	.word	0x100537e4

00036dac <buck_ldo_update_override>:
   36dac:	4b06      	ldr	r3, [pc, #24]	@ (36dc8 <buck_ldo_update_override+0x1c>)
   36dae:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
   36db0:	f360 4210 	bfi	r2, r0, #16, #1
   36db4:	661a      	str	r2, [r3, #96]	@ 0x60
   36db6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
   36db8:	f360 0200 	bfi	r2, r0, #0, #1
   36dbc:	661a      	str	r2, [r3, #96]	@ 0x60
   36dbe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
   36dc0:	f360 1245 	bfi	r2, r0, #5, #1
   36dc4:	661a      	str	r2, [r3, #96]	@ 0x60
   36dc6:	4770      	bx	lr
   36dc8:	40020000 	.word	0x40020000

00036dcc <am_hal_pwrctrl_control>:
   36dcc:	2804      	cmp	r0, #4
   36dce:	f200 812b 	bhi.w	37028 <am_hal_pwrctrl_control+0x25c>
   36dd2:	e8df f000 	tbb	[pc, r0]
   36dd6:	8c0b      	.short	0x8c0b
   36dd8:	a093      	.short	0xa093
   36dda:	03          	.byte	0x03
   36ddb:	00          	.byte	0x00
   36ddc:	2900      	cmp	r1, #0
   36dde:	f000 8123 	beq.w	37028 <am_hal_pwrctrl_control+0x25c>
   36de2:	4b92      	ldr	r3, [pc, #584]	@ (3702c <am_hal_pwrctrl_control+0x260>)
   36de4:	681b      	ldr	r3, [r3, #0]
   36de6:	600b      	str	r3, [r1, #0]
   36de8:	2006      	movs	r0, #6
   36dea:	4770      	bx	lr
   36dec:	b510      	push	{r4, lr}
   36dee:	4c90      	ldr	r4, [pc, #576]	@ (37030 <am_hal_pwrctrl_control+0x264>)
   36df0:	6822      	ldr	r2, [r4, #0]
   36df2:	1c51      	adds	r1, r2, #1
   36df4:	f000 8093 	beq.w	36f1e <am_hal_pwrctrl_control+0x152>
   36df8:	2a02      	cmp	r2, #2
   36dfa:	f240 809e 	bls.w	36f3a <am_hal_pwrctrl_control+0x16e>
   36dfe:	4b8d      	ldr	r3, [pc, #564]	@ (37034 <am_hal_pwrctrl_control+0x268>)
   36e00:	4c8d      	ldr	r4, [pc, #564]	@ (37038 <am_hal_pwrctrl_control+0x26c>)
   36e02:	f8d3 1348 	ldr.w	r1, [r3, #840]	@ 0x348
   36e06:	200a      	movs	r0, #10
   36e08:	f360 619d 	bfi	r1, r0, #26, #4
   36e0c:	f8c3 1348 	str.w	r1, [r3, #840]	@ 0x348
   36e10:	f8d3 1348 	ldr.w	r1, [r3, #840]	@ 0x348
   36e14:	f360 3150 	bfi	r1, r0, #13, #4
   36e18:	f8c3 1348 	str.w	r1, [r3, #840]	@ 0x348
   36e1c:	f8d3 135c 	ldr.w	r1, [r3, #860]	@ 0x35c
   36e20:	f041 7170 	orr.w	r1, r1, #62914560	@ 0x3c00000
   36e24:	f8c3 135c 	str.w	r1, [r3, #860]	@ 0x35c
   36e28:	f8d3 135c 	ldr.w	r1, [r3, #860]	@ 0x35c
   36e2c:	f441 51f0 	orr.w	r1, r1, #7680	@ 0x1e00
   36e30:	f8c3 135c 	str.w	r1, [r3, #860]	@ 0x35c
   36e34:	f8d3 1380 	ldr.w	r1, [r3, #896]	@ 0x380
   36e38:	f041 4100 	orr.w	r1, r1, #2147483648	@ 0x80000000
   36e3c:	f8c3 1380 	str.w	r1, [r3, #896]	@ 0x380
   36e40:	f8d3 1380 	ldr.w	r1, [r3, #896]	@ 0x380
   36e44:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
   36e48:	f8c3 1380 	str.w	r1, [r3, #896]	@ 0x380
   36e4c:	f8d3 1370 	ldr.w	r1, [r3, #880]	@ 0x370
   36e50:	f3c1 5105 	ubfx	r1, r1, #20, #6
   36e54:	6021      	str	r1, [r4, #0]
   36e56:	f8d3 1370 	ldr.w	r1, [r3, #880]	@ 0x370
   36e5a:	2007      	movs	r0, #7
   36e5c:	f36f 5119 	bfc	r1, #20, #6
   36e60:	2a05      	cmp	r2, #5
   36e62:	f8c3 1370 	str.w	r1, [r3, #880]	@ 0x370
   36e66:	f8c3 033c 	str.w	r0, [r3, #828]	@ 0x33c
   36e6a:	d908      	bls.n	36e7e <am_hal_pwrctrl_control+0xb2>
   36e6c:	220f      	movs	r2, #15
   36e6e:	f8c3 233c 	str.w	r2, [r3, #828]	@ 0x33c
   36e72:	f8d3 21b0 	ldr.w	r2, [r3, #432]	@ 0x1b0
   36e76:	f022 0218 	bic.w	r2, r2, #24
   36e7a:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
   36e7e:	496f      	ldr	r1, [pc, #444]	@ (3703c <am_hal_pwrctrl_control+0x270>)
   36e80:	4b6c      	ldr	r3, [pc, #432]	@ (37034 <am_hal_pwrctrl_control+0x268>)
   36e82:	f8d1 2100 	ldr.w	r2, [r1, #256]	@ 0x100
   36e86:	f042 0201 	orr.w	r2, r2, #1
   36e8a:	f8c1 2100 	str.w	r2, [r1, #256]	@ 0x100
   36e8e:	f8d3 2378 	ldr.w	r2, [r3, #888]	@ 0x378
   36e92:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
   36e96:	f8c3 2378 	str.w	r2, [r3, #888]	@ 0x378
   36e9a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
   36e9c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
   36ea0:	661a      	str	r2, [r3, #96]	@ 0x60
   36ea2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
   36ea4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
   36ea8:	661a      	str	r2, [r3, #96]	@ 0x60
   36eaa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
   36eac:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
   36eb0:	661a      	str	r2, [r3, #96]	@ 0x60
   36eb2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
   36eb4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
   36eb8:	661a      	str	r2, [r3, #96]	@ 0x60
   36eba:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
   36ebc:	f36f 1204 	bfc	r2, #4, #1
   36ec0:	661a      	str	r2, [r3, #96]	@ 0x60
   36ec2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
   36ec4:	f042 020e 	orr.w	r2, r2, #14
   36ec8:	661a      	str	r2, [r3, #96]	@ 0x60
   36eca:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
   36ecc:	f042 0201 	orr.w	r2, r2, #1
   36ed0:	661a      	str	r2, [r3, #96]	@ 0x60
   36ed2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
   36ed4:	f36f 2249 	bfc	r2, #9, #1
   36ed8:	661a      	str	r2, [r3, #96]	@ 0x60
   36eda:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
   36edc:	f442 72e0 	orr.w	r2, r2, #448	@ 0x1c0
   36ee0:	661a      	str	r2, [r3, #96]	@ 0x60
   36ee2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
   36ee4:	f042 0220 	orr.w	r2, r2, #32
   36ee8:	661a      	str	r2, [r3, #96]	@ 0x60
   36eea:	2000      	movs	r0, #0
   36eec:	bd10      	pop	{r4, pc}
   36eee:	4b53      	ldr	r3, [pc, #332]	@ (3703c <am_hal_pwrctrl_control+0x270>)
   36ef0:	6898      	ldr	r0, [r3, #8]
   36ef2:	f410 1080 	ands.w	r0, r0, #1048576	@ 0x100000
   36ef6:	f040 8094 	bne.w	37022 <am_hal_pwrctrl_control+0x256>
   36efa:	4770      	bx	lr
   36efc:	4b4d      	ldr	r3, [pc, #308]	@ (37034 <am_hal_pwrctrl_control+0x268>)
   36efe:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
   36f02:	2020      	movs	r0, #32
   36f04:	f360 0287 	bfi	r2, r0, #2, #6
   36f08:	2101      	movs	r1, #1
   36f0a:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
   36f0e:	2000      	movs	r0, #0
   36f10:	f8c3 1120 	str.w	r1, [r3, #288]	@ 0x120
   36f14:	4770      	bx	lr
   36f16:	4b49      	ldr	r3, [pc, #292]	@ (3703c <am_hal_pwrctrl_control+0x270>)
   36f18:	2000      	movs	r0, #0
   36f1a:	6058      	str	r0, [r3, #4]
   36f1c:	4770      	bx	lr
   36f1e:	2201      	movs	r2, #1
   36f20:	4623      	mov	r3, r4
   36f22:	f240 41c4 	movw	r1, #1220	@ 0x4c4
   36f26:	4610      	mov	r0, r2
   36f28:	f7ff f9f0 	bl	3630c <am_hal_mram_info_read>
   36f2c:	b918      	cbnz	r0, 36f36 <am_hal_pwrctrl_control+0x16a>
   36f2e:	6822      	ldr	r2, [r4, #0]
   36f30:	1c53      	adds	r3, r2, #1
   36f32:	f47f af61 	bne.w	36df8 <am_hal_pwrctrl_control+0x2c>
   36f36:	2300      	movs	r3, #0
   36f38:	6023      	str	r3, [r4, #0]
   36f3a:	4b3e      	ldr	r3, [pc, #248]	@ (37034 <am_hal_pwrctrl_control+0x268>)
   36f3c:	483e      	ldr	r0, [pc, #248]	@ (37038 <am_hal_pwrctrl_control+0x26c>)
   36f3e:	f8d3 1378 	ldr.w	r1, [r3, #888]	@ 0x378
   36f42:	f36f 611c 	bfc	r1, #24, #5
   36f46:	f8c3 1378 	str.w	r1, [r3, #888]	@ 0x378
   36f4a:	f8d3 1358 	ldr.w	r1, [r3, #856]	@ 0x358
   36f4e:	f36f 4196 	bfc	r1, #18, #5
   36f52:	f8c3 1358 	str.w	r1, [r3, #856]	@ 0x358
   36f56:	f8d3 1344 	ldr.w	r1, [r3, #836]	@ 0x344
   36f5a:	220a      	movs	r2, #10
   36f5c:	f362 611c 	bfi	r1, r2, #24, #5
   36f60:	f8c3 1344 	str.w	r1, [r3, #836]	@ 0x344
   36f64:	f8d3 1344 	ldr.w	r1, [r3, #836]	@ 0x344
   36f68:	f362 21ce 	bfi	r1, r2, #11, #4
   36f6c:	f8c3 1344 	str.w	r1, [r3, #836]	@ 0x344
   36f70:	f8d3 1358 	ldr.w	r1, [r3, #856]	@ 0x358
   36f74:	240f      	movs	r4, #15
   36f76:	f364 210c 	bfi	r1, r4, #8, #5
   36f7a:	f8c3 1358 	str.w	r1, [r3, #856]	@ 0x358
   36f7e:	f8d3 1354 	ldr.w	r1, [r3, #852]	@ 0x354
   36f82:	f441 11f0 	orr.w	r1, r1, #1966080	@ 0x1e0000
   36f86:	f8c3 1354 	str.w	r1, [r3, #852]	@ 0x354
   36f8a:	f8d3 1360 	ldr.w	r1, [r3, #864]	@ 0x360
   36f8e:	f364 519a 	bfi	r1, r4, #22, #5
   36f92:	f8c3 1360 	str.w	r1, [r3, #864]	@ 0x360
   36f96:	f8d3 1360 	ldr.w	r1, [r3, #864]	@ 0x360
   36f9a:	f441 11f0 	orr.w	r1, r1, #1966080	@ 0x1e0000
   36f9e:	f8c3 1360 	str.w	r1, [r3, #864]	@ 0x360
   36fa2:	f8d3 1348 	ldr.w	r1, [r3, #840]	@ 0x348
   36fa6:	f362 619d 	bfi	r1, r2, #26, #4
   36faa:	f8c3 1348 	str.w	r1, [r3, #840]	@ 0x348
   36fae:	f8d3 1348 	ldr.w	r1, [r3, #840]	@ 0x348
   36fb2:	f362 3150 	bfi	r1, r2, #13, #4
   36fb6:	f8c3 1348 	str.w	r1, [r3, #840]	@ 0x348
   36fba:	f8d3 235c 	ldr.w	r2, [r3, #860]	@ 0x35c
   36fbe:	f042 7270 	orr.w	r2, r2, #62914560	@ 0x3c00000
   36fc2:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
   36fc6:	f8d3 235c 	ldr.w	r2, [r3, #860]	@ 0x35c
   36fca:	f442 52f0 	orr.w	r2, r2, #7680	@ 0x1e00
   36fce:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
   36fd2:	f8d3 2380 	ldr.w	r2, [r3, #896]	@ 0x380
   36fd6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
   36fda:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
   36fde:	f8d3 2380 	ldr.w	r2, [r3, #896]	@ 0x380
   36fe2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
   36fe6:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
   36fea:	f8d3 2370 	ldr.w	r2, [r3, #880]	@ 0x370
   36fee:	f3c2 5205 	ubfx	r2, r2, #20, #6
   36ff2:	6002      	str	r2, [r0, #0]
   36ff4:	f8d3 2370 	ldr.w	r2, [r3, #880]	@ 0x370
   36ff8:	2407      	movs	r4, #7
   36ffa:	f36f 5219 	bfc	r2, #20, #6
   36ffe:	f8c3 2370 	str.w	r2, [r3, #880]	@ 0x370
   37002:	f8c3 433c 	str.w	r4, [r3, #828]	@ 0x33c
   37006:	f8d3 2340 	ldr.w	r2, [r3, #832]	@ 0x340
   3700a:	f36f 5299 	bfc	r2, #22, #4
   3700e:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
   37012:	f8d3 2340 	ldr.w	r2, [r3, #832]	@ 0x340
   37016:	2101      	movs	r1, #1
   37018:	f361 128a 	bfi	r2, r1, #6, #5
   3701c:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
   37020:	e72d      	b.n	36e7e <am_hal_pwrctrl_control+0xb2>
   37022:	2014      	movs	r0, #20
   37024:	f7ff bd36 	b.w	36a94 <am_hal_pwrctrl_periph_disable>
   37028:	2006      	movs	r0, #6
   3702a:	4770      	bx	lr
   3702c:	100537f8 	.word	0x100537f8
   37030:	1000db7c 	.word	0x1000db7c
   37034:	40020000 	.word	0x40020000
   37038:	1000db80 	.word	0x1000db80
   3703c:	40021000 	.word	0x40021000

00037040 <am_hal_pwrctrl_tempco_init>:
   37040:	b570      	push	{r4, r5, r6, lr}
   37042:	b086      	sub	sp, #24
   37044:	460c      	mov	r4, r1
   37046:	4605      	mov	r5, r0
   37048:	ab03      	add	r3, sp, #12
   3704a:	2203      	movs	r2, #3
   3704c:	f44f 6198 	mov.w	r1, #1216	@ 0x4c0
   37050:	2001      	movs	r0, #1
   37052:	f7ff f95b 	bl	3630c <am_hal_mram_info_read>
   37056:	bb08      	cbnz	r0, 3709c <am_hal_pwrctrl_tempco_init+0x5c>
   37058:	9b03      	ldr	r3, [sp, #12]
   3705a:	3301      	adds	r3, #1
   3705c:	d01e      	beq.n	3709c <am_hal_pwrctrl_tempco_init+0x5c>
   3705e:	9b04      	ldr	r3, [sp, #16]
   37060:	3301      	adds	r3, #1
   37062:	d01b      	beq.n	3709c <am_hal_pwrctrl_tempco_init+0x5c>
   37064:	9b05      	ldr	r3, [sp, #20]
   37066:	3301      	adds	r3, #1
   37068:	d018      	beq.n	3709c <am_hal_pwrctrl_tempco_init+0x5c>
   3706a:	4e19      	ldr	r6, [pc, #100]	@ (370d0 <am_hal_pwrctrl_tempco_init+0x90>)
   3706c:	6832      	ldr	r2, [r6, #0]
   3706e:	1c51      	adds	r1, r2, #1
   37070:	d01a      	beq.n	370a8 <am_hal_pwrctrl_tempco_init+0x68>
   37072:	2a05      	cmp	r2, #5
   37074:	d922      	bls.n	370bc <am_hal_pwrctrl_tempco_init+0x7c>
   37076:	4a17      	ldr	r2, [pc, #92]	@ (370d4 <am_hal_pwrctrl_tempco_init+0x94>)
   37078:	4817      	ldr	r0, [pc, #92]	@ (370d8 <am_hal_pwrctrl_tempco_init+0x98>)
   3707a:	4b18      	ldr	r3, [pc, #96]	@ (370dc <am_hal_pwrctrl_tempco_init+0x9c>)
   3707c:	6005      	str	r5, [r0, #0]
   3707e:	2101      	movs	r1, #1
   37080:	7011      	strb	r1, [r2, #0]
   37082:	2200      	movs	r2, #0
   37084:	4621      	mov	r1, r4
   37086:	f88d 2000 	strb.w	r2, [sp]
   3708a:	4628      	mov	r0, r5
   3708c:	2420      	movs	r4, #32
   3708e:	466a      	mov	r2, sp
   37090:	e9cd 4301 	strd	r4, r3, [sp, #4]
   37094:	f7fe fa9e 	bl	355d4 <am_hal_adc_configure_slot>
   37098:	b006      	add	sp, #24
   3709a:	bd70      	pop	{r4, r5, r6, pc}
   3709c:	4b0d      	ldr	r3, [pc, #52]	@ (370d4 <am_hal_pwrctrl_tempco_init+0x94>)
   3709e:	2200      	movs	r2, #0
   370a0:	2009      	movs	r0, #9
   370a2:	701a      	strb	r2, [r3, #0]
   370a4:	b006      	add	sp, #24
   370a6:	bd70      	pop	{r4, r5, r6, pc}
   370a8:	2201      	movs	r2, #1
   370aa:	4633      	mov	r3, r6
   370ac:	f240 41c4 	movw	r1, #1220	@ 0x4c4
   370b0:	4610      	mov	r0, r2
   370b2:	f7ff f92b 	bl	3630c <am_hal_mram_info_read>
   370b6:	b138      	cbz	r0, 370c8 <am_hal_pwrctrl_tempco_init+0x88>
   370b8:	2300      	movs	r3, #0
   370ba:	6033      	str	r3, [r6, #0]
   370bc:	4b05      	ldr	r3, [pc, #20]	@ (370d4 <am_hal_pwrctrl_tempco_init+0x94>)
   370be:	2200      	movs	r2, #0
   370c0:	2001      	movs	r0, #1
   370c2:	701a      	strb	r2, [r3, #0]
   370c4:	b006      	add	sp, #24
   370c6:	bd70      	pop	{r4, r5, r6, pc}
   370c8:	6832      	ldr	r2, [r6, #0]
   370ca:	1c53      	adds	r3, r2, #1
   370cc:	d1d1      	bne.n	37072 <am_hal_pwrctrl_tempco_init+0x32>
   370ce:	e7f3      	b.n	370b8 <am_hal_pwrctrl_tempco_init+0x78>
   370d0:	1000db7c 	.word	0x1000db7c
   370d4:	100537d6 	.word	0x100537d6
   370d8:	100537d0 	.word	0x100537d0
   370dc:	01000800 	.word	0x01000800

000370e0 <am_hal_pwrctrl_tempco_sample_handler>:
   370e0:	b530      	push	{r4, r5, lr}
   370e2:	4b60      	ldr	r3, [pc, #384]	@ (37264 <am_hal_pwrctrl_tempco_sample_handler+0x184>)
   370e4:	781b      	ldrb	r3, [r3, #0]
   370e6:	b085      	sub	sp, #20
   370e8:	b10b      	cbz	r3, 370ee <am_hal_pwrctrl_tempco_sample_handler+0xe>
   370ea:	2804      	cmp	r0, #4
   370ec:	d803      	bhi.n	370f6 <am_hal_pwrctrl_tempco_sample_handler+0x16>
   370ee:	2401      	movs	r4, #1
   370f0:	4620      	mov	r0, r4
   370f2:	b005      	add	sp, #20
   370f4:	bd30      	pop	{r4, r5, pc}
   370f6:	680a      	ldr	r2, [r1, #0]
   370f8:	f100 3eff 	add.w	lr, r0, #4294967295	@ 0xffffffff
   370fc:	2300      	movs	r3, #0
   370fe:	3301      	adds	r3, #1
   37100:	4694      	mov	ip, r2
   37102:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
   37106:	4562      	cmp	r2, ip
   37108:	d10d      	bne.n	37126 <am_hal_pwrctrl_tempco_sample_handler+0x46>
   3710a:	4573      	cmp	r3, lr
   3710c:	d1f7      	bne.n	370fe <am_hal_pwrctrl_tempco_sample_handler+0x1e>
   3710e:	4b56      	ldr	r3, [pc, #344]	@ (37268 <am_hal_pwrctrl_tempco_sample_handler+0x188>)
   37110:	781b      	ldrb	r3, [r3, #0]
   37112:	2b00      	cmp	r3, #0
   37114:	d0eb      	beq.n	370ee <am_hal_pwrctrl_tempco_sample_handler+0xe>
   37116:	2300      	movs	r3, #0
   37118:	2208      	movs	r2, #8
   3711a:	4619      	mov	r1, r3
   3711c:	4618      	mov	r0, r3
   3711e:	f7ff f927 	bl	36370 <tempco_set_trims.part.0>
   37122:	2401      	movs	r4, #1
   37124:	e7e4      	b.n	370f0 <am_hal_pwrctrl_tempco_sample_handler+0x10>
   37126:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 3726c <am_hal_pwrctrl_tempco_sample_handler+0x18c>
   3712a:	ed9f 6a51 	vldr	s12, [pc, #324]	@ 37270 <am_hal_pwrctrl_tempco_sample_handler+0x190>
   3712e:	eddf 6a51 	vldr	s13, [pc, #324]	@ 37274 <am_hal_pwrctrl_tempco_sample_handler+0x194>
   37132:	2200      	movs	r2, #0
   37134:	f851 3032 	ldr.w	r3, [r1, r2, lsl #3]
   37138:	f3c3 138d 	ubfx	r3, r3, #6, #14
   3713c:	ee07 3a90 	vmov	s15, r3
   37140:	eef8 7a67 	vcvt.f32.u32	s15, s15
   37144:	3201      	adds	r2, #1
   37146:	ee67 7a86 	vmul.f32	s15, s15, s12
   3714a:	4290      	cmp	r0, r2
   3714c:	ee67 7aa6 	vmul.f32	s15, s15, s13
   37150:	ee37 7a27 	vadd.f32	s14, s14, s15
   37154:	d1ee      	bne.n	37134 <am_hal_pwrctrl_tempco_sample_handler+0x54>
   37156:	ee07 0a90 	vmov	s15, r0
   3715a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   3715e:	4a46      	ldr	r2, [pc, #280]	@ (37278 <am_hal_pwrctrl_tempco_sample_handler+0x198>)
   37160:	4b46      	ldr	r3, [pc, #280]	@ (3727c <am_hal_pwrctrl_tempco_sample_handler+0x19c>)
   37162:	6810      	ldr	r0, [r2, #0]
   37164:	9303      	str	r3, [sp, #12]
   37166:	eec7 6a27 	vdiv.f32	s13, s14, s15
   3716a:	2400      	movs	r4, #0
   3716c:	aa01      	add	r2, sp, #4
   3716e:	2101      	movs	r1, #1
   37170:	9402      	str	r4, [sp, #8]
   37172:	edcd 6a01 	vstr	s13, [sp, #4]
   37176:	f7fe fa6b 	bl	35650 <am_hal_adc_control>
   3717a:	4604      	mov	r4, r0
   3717c:	2800      	cmp	r0, #0
   3717e:	d14e      	bne.n	3721e <am_hal_pwrctrl_tempco_sample_handler+0x13e>
   37180:	eddd 7a02 	vldr	s15, [sp, #8]
   37184:	4b3e      	ldr	r3, [pc, #248]	@ (37280 <am_hal_pwrctrl_tempco_sample_handler+0x1a0>)
   37186:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   3718a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   3718e:	edc3 7a00 	vstr	s15, [r3]
   37192:	d452      	bmi.n	3723a <am_hal_pwrctrl_tempco_sample_handler+0x15a>
   37194:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   37198:	ee17 3a90 	vmov	r3, s15
   3719c:	3b03      	subs	r3, #3
   3719e:	b25b      	sxtb	r3, r3
   371a0:	f113 0f14 	cmn.w	r3, #20
   371a4:	db4f      	blt.n	37246 <am_hal_pwrctrl_tempco_sample_handler+0x166>
   371a6:	4a37      	ldr	r2, [pc, #220]	@ (37284 <am_hal_pwrctrl_tempco_sample_handler+0x1a4>)
   371a8:	e003      	b.n	371b2 <am_hal_pwrctrl_tempco_sample_handler+0xd2>
   371aa:	f912 1f03 	ldrsb.w	r1, [r2, #3]!
   371ae:	297f      	cmp	r1, #127	@ 0x7f
   371b0:	d04e      	beq.n	37250 <am_hal_pwrctrl_tempco_sample_handler+0x170>
   371b2:	f992 1001 	ldrsb.w	r1, [r2, #1]
   371b6:	4299      	cmp	r1, r3
   371b8:	dbf7      	blt.n	371aa <am_hal_pwrctrl_tempco_sample_handler+0xca>
   371ba:	f992 0002 	ldrsb.w	r0, [r2, #2]
   371be:	4a32      	ldr	r2, [pc, #200]	@ (37288 <am_hal_pwrctrl_tempco_sample_handler+0x1a8>)
   371c0:	e003      	b.n	371ca <am_hal_pwrctrl_tempco_sample_handler+0xea>
   371c2:	f912 1f03 	ldrsb.w	r1, [r2, #3]!
   371c6:	297f      	cmp	r1, #127	@ 0x7f
   371c8:	d044      	beq.n	37254 <am_hal_pwrctrl_tempco_sample_handler+0x174>
   371ca:	f992 1001 	ldrsb.w	r1, [r2, #1]
   371ce:	4299      	cmp	r1, r3
   371d0:	dbf7      	blt.n	371c2 <am_hal_pwrctrl_tempco_sample_handler+0xe2>
   371d2:	f992 1002 	ldrsb.w	r1, [r2, #2]
   371d6:	f113 0f12 	cmn.w	r3, #18
   371da:	db41      	blt.n	37260 <am_hal_pwrctrl_tempco_sample_handler+0x180>
   371dc:	4a2b      	ldr	r2, [pc, #172]	@ (3728c <am_hal_pwrctrl_tempco_sample_handler+0x1ac>)
   371de:	e003      	b.n	371e8 <am_hal_pwrctrl_tempco_sample_handler+0x108>
   371e0:	f912 5f03 	ldrsb.w	r5, [r2, #3]!
   371e4:	2d7f      	cmp	r5, #127	@ 0x7f
   371e6:	d037      	beq.n	37258 <am_hal_pwrctrl_tempco_sample_handler+0x178>
   371e8:	f992 5001 	ldrsb.w	r5, [r2, #1]
   371ec:	429d      	cmp	r5, r3
   371ee:	dbf7      	blt.n	371e0 <am_hal_pwrctrl_tempco_sample_handler+0x100>
   371f0:	f992 2002 	ldrsb.w	r2, [r2, #2]
   371f4:	4d26      	ldr	r5, [pc, #152]	@ (37290 <am_hal_pwrctrl_tempco_sample_handler+0x1b0>)
   371f6:	e004      	b.n	37202 <am_hal_pwrctrl_tempco_sample_handler+0x122>
   371f8:	f915 cf03 	ldrsb.w	ip, [r5, #3]!
   371fc:	f1bc 0f7f 	cmp.w	ip, #127	@ 0x7f
   37200:	d02c      	beq.n	3725c <am_hal_pwrctrl_tempco_sample_handler+0x17c>
   37202:	f995 c001 	ldrsb.w	ip, [r5, #1]
   37206:	459c      	cmp	ip, r3
   37208:	dbf6      	blt.n	371f8 <am_hal_pwrctrl_tempco_sample_handler+0x118>
   3720a:	f995 3002 	ldrsb.w	r3, [r5, #2]
   3720e:	4d16      	ldr	r5, [pc, #88]	@ (37268 <am_hal_pwrctrl_tempco_sample_handler+0x188>)
   37210:	782d      	ldrb	r5, [r5, #0]
   37212:	2d00      	cmp	r5, #0
   37214:	f43f af6c 	beq.w	370f0 <am_hal_pwrctrl_tempco_sample_handler+0x10>
   37218:	f7ff f8aa 	bl	36370 <tempco_set_trims.part.0>
   3721c:	e768      	b.n	370f0 <am_hal_pwrctrl_tempco_sample_handler+0x10>
   3721e:	4b12      	ldr	r3, [pc, #72]	@ (37268 <am_hal_pwrctrl_tempco_sample_handler+0x188>)
   37220:	781b      	ldrb	r3, [r3, #0]
   37222:	b91b      	cbnz	r3, 3722c <am_hal_pwrctrl_tempco_sample_handler+0x14c>
   37224:	4b16      	ldr	r3, [pc, #88]	@ (37280 <am_hal_pwrctrl_tempco_sample_handler+0x1a0>)
   37226:	2200      	movs	r2, #0
   37228:	601a      	str	r2, [r3, #0]
   3722a:	e761      	b.n	370f0 <am_hal_pwrctrl_tempco_sample_handler+0x10>
   3722c:	2300      	movs	r3, #0
   3722e:	461a      	mov	r2, r3
   37230:	4619      	mov	r1, r3
   37232:	4618      	mov	r0, r3
   37234:	f7ff f89c 	bl	36370 <tempco_set_trims.part.0>
   37238:	e7f4      	b.n	37224 <am_hal_pwrctrl_tempco_sample_handler+0x144>
   3723a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   3723e:	ee17 3a90 	vmov	r3, s15
   37242:	3b01      	subs	r3, #1
   37244:	e7aa      	b.n	3719c <am_hal_pwrctrl_tempco_sample_handler+0xbc>
   37246:	2300      	movs	r3, #0
   37248:	2208      	movs	r2, #8
   3724a:	4619      	mov	r1, r3
   3724c:	4618      	mov	r0, r3
   3724e:	e7de      	b.n	3720e <am_hal_pwrctrl_tempco_sample_handler+0x12e>
   37250:	2000      	movs	r0, #0
   37252:	e7b4      	b.n	371be <am_hal_pwrctrl_tempco_sample_handler+0xde>
   37254:	2100      	movs	r1, #0
   37256:	e7be      	b.n	371d6 <am_hal_pwrctrl_tempco_sample_handler+0xf6>
   37258:	2200      	movs	r2, #0
   3725a:	e7cb      	b.n	371f4 <am_hal_pwrctrl_tempco_sample_handler+0x114>
   3725c:	2300      	movs	r3, #0
   3725e:	e7d6      	b.n	3720e <am_hal_pwrctrl_tempco_sample_handler+0x12e>
   37260:	2208      	movs	r2, #8
   37262:	e7c7      	b.n	371f4 <am_hal_pwrctrl_tempco_sample_handler+0x114>
   37264:	100537d6 	.word	0x100537d6
   37268:	100537d5 	.word	0x100537d5
   3726c:	00000000 	.word	0x00000000
   37270:	3f9851ec 	.word	0x3f9851ec
   37274:	39800000 	.word	0x39800000
   37278:	100537d0 	.word	0x100537d0
   3727c:	c2f6e979 	.word	0xc2f6e979
   37280:	100537f8 	.word	0x100537f8
   37284:	0004bed4 	.word	0x0004bed4
   37288:	0004beb0 	.word	0x0004beb0
   3728c:	0004bef8 	.word	0x0004bef8
   37290:	0004bea4 	.word	0x0004bea4

00037294 <am_hal_stimer_counter_get>:
   37294:	b500      	push	{lr}
   37296:	b085      	sub	sp, #20
   37298:	4805      	ldr	r0, [pc, #20]	@ (372b0 <am_hal_stimer_counter_get+0x1c>)
   3729a:	a901      	add	r1, sp, #4
   3729c:	f000 fa60 	bl	37760 <am_hal_triple_read>
   372a0:	e9dd 3001 	ldrd	r3, r0, [sp, #4]
   372a4:	4283      	cmp	r3, r0
   372a6:	bf18      	it	ne
   372a8:	9803      	ldrne	r0, [sp, #12]
   372aa:	b005      	add	sp, #20
   372ac:	f85d fb04 	ldr.w	pc, [sp], #4
   372b0:	40008804 	.word	0x40008804

000372b4 <am_hal_stimer_compare_delta_set>:
   372b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   372b8:	b084      	sub	sp, #16
   372ba:	4604      	mov	r4, r0
   372bc:	460e      	mov	r6, r1
   372be:	482a      	ldr	r0, [pc, #168]	@ (37368 <am_hal_stimer_compare_delta_set+0xb4>)
   372c0:	a901      	add	r1, sp, #4
   372c2:	f000 fa4d 	bl	37760 <am_hal_triple_read>
   372c6:	e9dd 3701 	ldrd	r3, r7, [sp, #4]
   372ca:	42bb      	cmp	r3, r7
   372cc:	bf18      	it	ne
   372ce:	9f03      	ldrne	r7, [sp, #12]
   372d0:	2c07      	cmp	r4, #7
   372d2:	d843      	bhi.n	3735c <am_hal_stimer_compare_delta_set+0xa8>
   372d4:	4d25      	ldr	r5, [pc, #148]	@ (3736c <am_hal_stimer_compare_delta_set+0xb8>)
   372d6:	f8df 8090 	ldr.w	r8, [pc, #144]	@ 37368 <am_hal_stimer_compare_delta_set+0xb4>
   372da:	463b      	mov	r3, r7
   372dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   372e0:	429a      	cmp	r2, r3
   372e2:	a901      	add	r1, sp, #4
   372e4:	4640      	mov	r0, r8
   372e6:	f102 0c01 	add.w	ip, r2, #1
   372ea:	d001      	beq.n	372f0 <am_hal_stimer_compare_delta_set+0x3c>
   372ec:	459c      	cmp	ip, r3
   372ee:	d107      	bne.n	37300 <am_hal_stimer_compare_delta_set+0x4c>
   372f0:	f000 fa36 	bl	37760 <am_hal_triple_read>
   372f4:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   372f8:	429a      	cmp	r2, r3
   372fa:	d0ef      	beq.n	372dc <am_hal_stimer_compare_delta_set+0x28>
   372fc:	9b03      	ldr	r3, [sp, #12]
   372fe:	e7ed      	b.n	372dc <am_hal_stimer_compare_delta_set+0x28>
   37300:	f7fe ff56 	bl	361b0 <am_hal_interrupt_master_disable>
   37304:	a901      	add	r1, sp, #4
   37306:	9000      	str	r0, [sp, #0]
   37308:	4817      	ldr	r0, [pc, #92]	@ (37368 <am_hal_stimer_compare_delta_set+0xb4>)
   3730a:	f000 fa29 	bl	37760 <am_hal_triple_read>
   3730e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   37312:	429a      	cmp	r2, r3
   37314:	bf18      	it	ne
   37316:	9b03      	ldrne	r3, [sp, #12]
   37318:	f1c7 0203 	rsb	r2, r7, #3
   3731c:	441a      	add	r2, r3
   3731e:	42b2      	cmp	r2, r6
   37320:	d317      	bcc.n	37352 <am_hal_stimer_compare_delta_set+0x9e>
   37322:	f04f 6600 	mov.w	r6, #134217728	@ 0x8000000
   37326:	2701      	movs	r7, #1
   37328:	4b11      	ldr	r3, [pc, #68]	@ (37370 <am_hal_stimer_compare_delta_set+0xbc>)
   3732a:	480f      	ldr	r0, [pc, #60]	@ (37368 <am_hal_stimer_compare_delta_set+0xb4>)
   3732c:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
   37330:	a901      	add	r1, sp, #4
   37332:	f000 fa15 	bl	37760 <am_hal_triple_read>
   37336:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   3733a:	429a      	cmp	r2, r3
   3733c:	bf18      	it	ne
   3733e:	9b03      	ldrne	r3, [sp, #12]
   37340:	9800      	ldr	r0, [sp, #0]
   37342:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   37346:	f7fe ff37 	bl	361b8 <am_hal_interrupt_master_set>
   3734a:	4630      	mov	r0, r6
   3734c:	b004      	add	sp, #16
   3734e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   37352:	3e03      	subs	r6, #3
   37354:	4437      	add	r7, r6
   37356:	1aff      	subs	r7, r7, r3
   37358:	2600      	movs	r6, #0
   3735a:	e7e5      	b.n	37328 <am_hal_stimer_compare_delta_set+0x74>
   3735c:	2605      	movs	r6, #5
   3735e:	4630      	mov	r0, r6
   37360:	b004      	add	sp, #16
   37362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   37366:	bf00      	nop
   37368:	40008804 	.word	0x40008804
   3736c:	1000db84 	.word	0x1000db84
   37370:	40008820 	.word	0x40008820

00037374 <am_hal_stimer_int_clear>:
   37374:	4b01      	ldr	r3, [pc, #4]	@ (3737c <am_hal_stimer_int_clear+0x8>)
   37376:	f8c3 0108 	str.w	r0, [r3, #264]	@ 0x108
   3737a:	4770      	bx	lr
   3737c:	40008800 	.word	0x40008800

00037380 <am_hal_stimer_int_status_get>:
   37380:	4a04      	ldr	r2, [pc, #16]	@ (37394 <am_hal_stimer_int_status_get+0x14>)
   37382:	f8d2 3104 	ldr.w	r3, [r2, #260]	@ 0x104
   37386:	b110      	cbz	r0, 3738e <am_hal_stimer_int_status_get+0xe>
   37388:	f8d2 2100 	ldr.w	r2, [r2, #256]	@ 0x100
   3738c:	4013      	ands	r3, r2
   3738e:	4618      	mov	r0, r3
   37390:	4770      	bx	lr
   37392:	bf00      	nop
   37394:	40008800 	.word	0x40008800

00037398 <am_hal_sysctrl_sleep>:
   37398:	b530      	push	{r4, r5, lr}
   3739a:	b083      	sub	sp, #12
   3739c:	f10d 4370 	add.w	r3, sp, #4026531840	@ 0xf0000000
   373a0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
   373a4:	d300      	bcc.n	373a8 <am_hal_sysctrl_sleep+0x10>
   373a6:	e7fe      	b.n	373a6 <am_hal_sysctrl_sleep+0xe>
   373a8:	4604      	mov	r4, r0
   373aa:	f7fe ff01 	bl	361b0 <am_hal_interrupt_master_disable>
   373ae:	4935      	ldr	r1, [pc, #212]	@ (37484 <am_hal_sysctrl_sleep+0xec>)
   373b0:	9001      	str	r0, [sp, #4]
   373b2:	f8d1 3108 	ldr.w	r3, [r1, #264]	@ 0x108
   373b6:	f3c3 1301 	ubfx	r3, r3, #4, #2
   373ba:	b384      	cbz	r4, 3741e <am_hal_sysctrl_sleep+0x86>
   373bc:	4a32      	ldr	r2, [pc, #200]	@ (37488 <am_hal_sysctrl_sleep+0xf0>)
   373be:	f8d2 5250 	ldr.w	r5, [r2, #592]	@ 0x250
   373c2:	f015 0501 	ands.w	r5, r5, #1
   373c6:	d12a      	bne.n	3741e <am_hal_sysctrl_sleep+0x86>
   373c8:	2b03      	cmp	r3, #3
   373ca:	d03a      	beq.n	37442 <am_hal_sysctrl_sleep+0xaa>
   373cc:	4a2f      	ldr	r2, [pc, #188]	@ (3748c <am_hal_sysctrl_sleep+0xf4>)
   373ce:	6913      	ldr	r3, [r2, #16]
   373d0:	f043 0304 	orr.w	r3, r3, #4
   373d4:	2100      	movs	r1, #0
   373d6:	6113      	str	r3, [r2, #16]
   373d8:	2001      	movs	r0, #1
   373da:	f7fe fc6d 	bl	35cb8 <am_hal_daxi_control>
   373de:	bf30      	wfi
   373e0:	f3bf 8f6f 	isb	sy
   373e4:	b33d      	cbz	r5, 37436 <am_hal_sysctrl_sleep+0x9e>
   373e6:	2001      	movs	r0, #1
   373e8:	f7ff fce0 	bl	36dac <buck_ldo_update_override>
   373ec:	4b26      	ldr	r3, [pc, #152]	@ (37488 <am_hal_sysctrl_sleep+0xf0>)
   373ee:	f8d3 2380 	ldr.w	r2, [r3, #896]	@ 0x380
   373f2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
   373f6:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
   373fa:	f8d3 2380 	ldr.w	r2, [r3, #896]	@ 0x380
   373fe:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
   37402:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
   37406:	f8d3 2370 	ldr.w	r2, [r3, #880]	@ 0x370
   3740a:	f36f 5219 	bfc	r2, #20, #6
   3740e:	f8c3 2370 	str.w	r2, [r3, #880]	@ 0x370
   37412:	9801      	ldr	r0, [sp, #4]
   37414:	b003      	add	sp, #12
   37416:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   3741a:	f7fe becd 	b.w	361b8 <am_hal_interrupt_master_set>
   3741e:	4a1b      	ldr	r2, [pc, #108]	@ (3748c <am_hal_sysctrl_sleep+0xf4>)
   37420:	6913      	ldr	r3, [r2, #16]
   37422:	f023 0304 	bic.w	r3, r3, #4
   37426:	2100      	movs	r1, #0
   37428:	6113      	str	r3, [r2, #16]
   3742a:	2001      	movs	r0, #1
   3742c:	f7fe fc44 	bl	35cb8 <am_hal_daxi_control>
   37430:	bf30      	wfi
   37432:	f3bf 8f6f 	isb	sy
   37436:	9801      	ldr	r0, [sp, #4]
   37438:	b003      	add	sp, #12
   3743a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   3743e:	f7fe bebb 	b.w	361b8 <am_hal_interrupt_master_set>
   37442:	690b      	ldr	r3, [r1, #16]
   37444:	055b      	lsls	r3, r3, #21
   37446:	d4c1      	bmi.n	373cc <am_hal_sysctrl_sleep+0x34>
   37448:	688b      	ldr	r3, [r1, #8]
   3744a:	f033 437e 	bics.w	r3, r3, #4261412864	@ 0xfe000000
   3744e:	d1bd      	bne.n	373cc <am_hal_sysctrl_sleep+0x34>
   37450:	490f      	ldr	r1, [pc, #60]	@ (37490 <am_hal_sysctrl_sleep+0xf8>)
   37452:	f8d2 3370 	ldr.w	r3, [r2, #880]	@ 0x370
   37456:	6809      	ldr	r1, [r1, #0]
   37458:	f361 5319 	bfi	r3, r1, #20, #6
   3745c:	f8c2 3370 	str.w	r3, [r2, #880]	@ 0x370
   37460:	f8d2 3380 	ldr.w	r3, [r2, #896]	@ 0x380
   37464:	f365 73df 	bfi	r3, r5, #31, #1
   37468:	f8c2 3380 	str.w	r3, [r2, #896]	@ 0x380
   3746c:	f8d2 3380 	ldr.w	r3, [r2, #896]	@ 0x380
   37470:	f365 739e 	bfi	r3, r5, #30, #1
   37474:	4628      	mov	r0, r5
   37476:	f8c2 3380 	str.w	r3, [r2, #896]	@ 0x380
   3747a:	f7ff fc97 	bl	36dac <buck_ldo_update_override>
   3747e:	4625      	mov	r5, r4
   37480:	e7a4      	b.n	373cc <am_hal_sysctrl_sleep+0x34>
   37482:	bf00      	nop
   37484:	40021000 	.word	0x40021000
   37488:	40020000 	.word	0x40020000
   3748c:	e000ed00 	.word	0xe000ed00
   37490:	1000db80 	.word	0x1000db80

00037494 <am_hal_timer_config>:
   37494:	b470      	push	{r4, r5, r6}
   37496:	f891 c001 	ldrb.w	ip, [r1, #1]
   3749a:	690c      	ldr	r4, [r1, #16]
   3749c:	f10c 33ff 	add.w	r3, ip, #4294967295	@ 0xffffffff
   374a0:	e9d1 6502 	ldrd	r6, r5, [r1, #8]
   374a4:	2b0c      	cmp	r3, #12
   374a6:	d80a      	bhi.n	374be <am_hal_timer_config+0x2a>
   374a8:	e8df f003 	tbb	[pc, r3]
   374ac:	1009100c 	.word	0x1009100c
   374b0:	09090909 	.word	0x09090909
   374b4:	07090909 	.word	0x07090909
   374b8:	07          	.byte	0x07
   374b9:	00          	.byte	0x00
   374ba:	2e3f      	cmp	r6, #63	@ 0x3f
   374bc:	d906      	bls.n	374cc <am_hal_timer_config+0x38>
   374be:	2007      	movs	r0, #7
   374c0:	bc70      	pop	{r4, r5, r6}
   374c2:	4770      	bx	lr
   374c4:	1c63      	adds	r3, r4, #1
   374c6:	d001      	beq.n	374cc <am_hal_timer_config+0x38>
   374c8:	42a5      	cmp	r5, r4
   374ca:	d9f8      	bls.n	374be <am_hal_timer_config+0x2a>
   374cc:	78ca      	ldrb	r2, [r1, #3]
   374ce:	f100 7300 	add.w	r3, r0, #33554432	@ 0x2000000
   374d2:	7808      	ldrb	r0, [r1, #0]
   374d4:	00d2      	lsls	r2, r2, #3
   374d6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
   374da:	7888      	ldrb	r0, [r1, #2]
   374dc:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
   374e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
   374e4:	015b      	lsls	r3, r3, #5
   374e6:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
   374ea:	7908      	ldrb	r0, [r1, #4]
   374ec:	794e      	ldrb	r6, [r1, #5]
   374ee:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
   374f2:	0401      	lsls	r1, r0, #16
   374f4:	fa5f fc8c 	uxtb.w	ip, ip
   374f8:	f8d3 0200 	ldr.w	r0, [r3, #512]	@ 0x200
   374fc:	ea42 020c 	orr.w	r2, r2, ip
   37500:	f401 3140 	and.w	r1, r1, #196608	@ 0x30000
   37504:	430a      	orrs	r2, r1
   37506:	0236      	lsls	r6, r6, #8
   37508:	f36f 0000 	bfc	r0, #0, #1
   3750c:	f8c3 0200 	str.w	r0, [r3, #512]	@ 0x200
   37510:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
   37514:	f8c3 6210 	str.w	r6, [r3, #528]	@ 0x210
   37518:	f8c3 5208 	str.w	r5, [r3, #520]	@ 0x208
   3751c:	f8c3 420c 	str.w	r4, [r3, #524]	@ 0x20c
   37520:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
   37524:	f042 0202 	orr.w	r2, r2, #2
   37528:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
   3752c:	2000      	movs	r0, #0
   3752e:	bc70      	pop	{r4, r5, r6}
   37530:	4770      	bx	lr
   37532:	bf00      	nop

00037534 <am_hal_timer_default_config_set>:
   37534:	2300      	movs	r3, #0
   37536:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
   3753a:	f240 1c01 	movw	ip, #257	@ 0x101
   3753e:	f44f 7180 	mov.w	r1, #256	@ 0x100
   37542:	e9c0 2203 	strd	r2, r2, [r0, #12]
   37546:	f8a0 c000 	strh.w	ip, [r0]
   3754a:	8043      	strh	r3, [r0, #2]
   3754c:	8081      	strh	r1, [r0, #4]
   3754e:	6083      	str	r3, [r0, #8]
   37550:	4618      	mov	r0, r3
   37552:	4770      	bx	lr

00037554 <am_hal_timer_clear>:
   37554:	b510      	push	{r4, lr}
   37556:	4604      	mov	r4, r0
   37558:	b082      	sub	sp, #8
   3755a:	f7fe fe29 	bl	361b0 <am_hal_interrupt_master_disable>
   3755e:	f104 7300 	add.w	r3, r4, #33554432	@ 0x2000000
   37562:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
   37566:	015b      	lsls	r3, r3, #5
   37568:	9001      	str	r0, [sp, #4]
   3756a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
   3756e:	f36f 0200 	bfc	r2, #0, #1
   37572:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
   37576:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
   3757a:	f042 0202 	orr.w	r2, r2, #2
   3757e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
   37582:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
   37586:	f36f 0241 	bfc	r2, #1, #1
   3758a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
   3758e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
   37592:	f042 0201 	orr.w	r2, r2, #1
   37596:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
   3759a:	9801      	ldr	r0, [sp, #4]
   3759c:	f7fe fe0c 	bl	361b8 <am_hal_interrupt_master_set>
   375a0:	2000      	movs	r0, #0
   375a2:	b002      	add	sp, #8
   375a4:	bd10      	pop	{r4, pc}
   375a6:	bf00      	nop

000375a8 <am_hal_timer_read>:
   375a8:	b500      	push	{lr}
   375aa:	4603      	mov	r3, r0
   375ac:	4807      	ldr	r0, [pc, #28]	@ (375cc <am_hal_timer_read+0x24>)
   375ae:	b085      	sub	sp, #20
   375b0:	015b      	lsls	r3, r3, #5
   375b2:	a901      	add	r1, sp, #4
   375b4:	4418      	add	r0, r3
   375b6:	f000 f8d3 	bl	37760 <am_hal_triple_read>
   375ba:	e9dd 3001 	ldrd	r3, r0, [sp, #4]
   375be:	4283      	cmp	r3, r0
   375c0:	bf18      	it	ne
   375c2:	9803      	ldrne	r0, [sp, #12]
   375c4:	b005      	add	sp, #20
   375c6:	f85d fb04 	ldr.w	pc, [sp], #4
   375ca:	bf00      	nop
   375cc:	40008204 	.word	0x40008204

000375d0 <am_hal_timer_interrupt_enable>:
   375d0:	4903      	ldr	r1, [pc, #12]	@ (375e0 <am_hal_timer_interrupt_enable+0x10>)
   375d2:	6e0a      	ldr	r2, [r1, #96]	@ 0x60
   375d4:	4603      	mov	r3, r0
   375d6:	4313      	orrs	r3, r2
   375d8:	2000      	movs	r0, #0
   375da:	660b      	str	r3, [r1, #96]	@ 0x60
   375dc:	4770      	bx	lr
   375de:	bf00      	nop
   375e0:	40008000 	.word	0x40008000

000375e4 <am_hal_timer_interrupt_clear>:
   375e4:	4b01      	ldr	r3, [pc, #4]	@ (375ec <am_hal_timer_interrupt_clear+0x8>)
   375e6:	6698      	str	r0, [r3, #104]	@ 0x68
   375e8:	2000      	movs	r0, #0
   375ea:	4770      	bx	lr
   375ec:	40008000 	.word	0x40008000

000375f0 <am_hal_tpiu_enable>:
   375f0:	4b16      	ldr	r3, [pc, #88]	@ (3764c <am_hal_tpiu_enable+0x5c>)
   375f2:	4a17      	ldr	r2, [pc, #92]	@ (37650 <am_hal_tpiu_enable+0x60>)
   375f4:	b410      	push	{r4}
   375f6:	2101      	movs	r1, #1
   375f8:	2400      	movs	r4, #0
   375fa:	f8c3 4304 	str.w	r4, [r3, #772]	@ 0x304
   375fe:	6059      	str	r1, [r3, #4]
   37600:	f5a0 4361 	sub.w	r3, r0, #57600	@ 0xe100
   37604:	4293      	cmp	r3, r2
   37606:	4a11      	ldr	r2, [pc, #68]	@ (3764c <am_hal_tpiu_enable+0x5c>)
   37608:	bf9a      	itte	ls
   3760a:	4b12      	ldrls	r3, [pc, #72]	@ (37654 <am_hal_tpiu_enable+0x64>)
   3760c:	fbb3 f0f0 	udivls	r0, r3, r0
   37610:	202f      	movhi	r0, #47	@ 0x2f
   37612:	4b11      	ldr	r3, [pc, #68]	@ (37658 <am_hal_tpiu_enable+0x68>)
   37614:	bf98      	it	ls
   37616:	f100 30ff 	addls.w	r0, r0, #4294967295	@ 0xffffffff
   3761a:	2102      	movs	r1, #2
   3761c:	2400      	movs	r4, #0
   3761e:	6110      	str	r0, [r2, #16]
   37620:	f8c2 10f0 	str.w	r1, [r2, #240]	@ 0xf0
   37624:	f8c2 4f00 	str.w	r4, [r2, #3840]	@ 0xf00
   37628:	f8d3 2250 	ldr.w	r2, [r3, #592]	@ 0x250
   3762c:	f361 0243 	bfi	r2, r1, #1, #3
   37630:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
   37634:	f8d3 2250 	ldr.w	r2, [r3, #592]	@ 0x250
   37638:	f042 0201 	orr.w	r2, r2, #1
   3763c:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
   37640:	f85d 4b04 	ldr.w	r4, [sp], #4
   37644:	2064      	movs	r0, #100	@ 0x64
   37646:	f000 b809 	b.w	3765c <am_hal_delay_us>
   3764a:	bf00      	nop
   3764c:	e0040000 	.word	0xe0040000
   37650:	001da380 	.word	0x001da380
   37654:	02dc6c00 	.word	0x02dc6c00
   37658:	40020000 	.word	0x40020000

0003765c <am_hal_delay_us>:
   3765c:	4b09      	ldr	r3, [pc, #36]	@ (37684 <am_hal_delay_us+0x28>)
   3765e:	681b      	ldr	r3, [r3, #0]
   37660:	f3c3 03c1 	ubfx	r3, r3, #3, #2
   37664:	2b02      	cmp	r3, #2
   37666:	bf0b      	itete	eq
   37668:	0182      	lsleq	r2, r0, #6
   3766a:	0142      	lslne	r2, r0, #5
   3766c:	2015      	moveq	r0, #21
   3766e:	200f      	movne	r0, #15
   37670:	4282      	cmp	r2, r0
   37672:	d906      	bls.n	37682 <am_hal_delay_us+0x26>
   37674:	4b04      	ldr	r3, [pc, #16]	@ (37688 <am_hal_delay_us+0x2c>)
   37676:	b082      	sub	sp, #8
   37678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   3767a:	9301      	str	r3, [sp, #4]
   3767c:	1a10      	subs	r0, r2, r0
   3767e:	b002      	add	sp, #8
   37680:	4718      	bx	r3
   37682:	4770      	bx	lr
   37684:	40021000 	.word	0x40021000
   37688:	0004bf28 	.word	0x0004bf28

0003768c <am_hal_delay_us_status_change>:
   3768c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   37690:	460c      	mov	r4, r1
   37692:	6809      	ldr	r1, [r1, #0]
   37694:	4011      	ands	r1, r2
   37696:	428b      	cmp	r3, r1
   37698:	d01a      	beq.n	376d0 <am_hal_delay_us_status_change+0x44>
   3769a:	f100 39ff 	add.w	r9, r0, #4294967295	@ 0xffffffff
   3769e:	b1d0      	cbz	r0, 376d6 <am_hal_delay_us_status_change+0x4a>
   376a0:	461e      	mov	r6, r3
   376a2:	4b0e      	ldr	r3, [pc, #56]	@ (376dc <am_hal_delay_us_status_change+0x50>)
   376a4:	4f0e      	ldr	r7, [pc, #56]	@ (376e0 <am_hal_delay_us_status_change+0x54>)
   376a6:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
   376aa:	4615      	mov	r5, r2
   376ac:	e002      	b.n	376b4 <am_hal_delay_us_status_change+0x28>
   376ae:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
   376b2:	d010      	beq.n	376d6 <am_hal_delay_us_status_change+0x4a>
   376b4:	6838      	ldr	r0, [r7, #0]
   376b6:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   376ba:	2802      	cmp	r0, #2
   376bc:	bf14      	ite	ne
   376be:	2011      	movne	r0, #17
   376c0:	202b      	moveq	r0, #43	@ 0x2b
   376c2:	47c0      	blx	r8
   376c4:	6820      	ldr	r0, [r4, #0]
   376c6:	4028      	ands	r0, r5
   376c8:	42b0      	cmp	r0, r6
   376ca:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
   376ce:	d1ee      	bne.n	376ae <am_hal_delay_us_status_change+0x22>
   376d0:	2000      	movs	r0, #0
   376d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   376d6:	2004      	movs	r0, #4
   376d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   376dc:	0004bf28 	.word	0x0004bf28
   376e0:	40021000 	.word	0x40021000

000376e4 <am_hal_delay_us_status_check>:
   376e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   376e8:	f89d c020 	ldrb.w	ip, [sp, #32]
   376ec:	f8df 8068 	ldr.w	r8, [pc, #104]	@ 37758 <am_hal_delay_us_status_check+0x74>
   376f0:	f8df 9068 	ldr.w	r9, [pc, #104]	@ 3775c <am_hal_delay_us_status_check+0x78>
   376f4:	4604      	mov	r4, r0
   376f6:	460d      	mov	r5, r1
   376f8:	4616      	mov	r6, r2
   376fa:	461f      	mov	r7, r3
   376fc:	f1bc 0f00 	cmp.w	ip, #0
   37700:	d00d      	beq.n	3771e <am_hal_delay_us_status_check+0x3a>
   37702:	e020      	b.n	37746 <am_hal_delay_us_status_check+0x62>
   37704:	b324      	cbz	r4, 37750 <am_hal_delay_us_status_check+0x6c>
   37706:	f8d8 3000 	ldr.w	r3, [r8]
   3770a:	f8d9 2024 	ldr.w	r2, [r9, #36]	@ 0x24
   3770e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
   37712:	2b02      	cmp	r3, #2
   37714:	bf14      	ite	ne
   37716:	2011      	movne	r0, #17
   37718:	202b      	moveq	r0, #43	@ 0x2b
   3771a:	4790      	blx	r2
   3771c:	3c01      	subs	r4, #1
   3771e:	6828      	ldr	r0, [r5, #0]
   37720:	4030      	ands	r0, r6
   37722:	42b8      	cmp	r0, r7
   37724:	d0ee      	beq.n	37704 <am_hal_delay_us_status_check+0x20>
   37726:	2000      	movs	r0, #0
   37728:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3772c:	b184      	cbz	r4, 37750 <am_hal_delay_us_status_check+0x6c>
   3772e:	f8d8 3000 	ldr.w	r3, [r8]
   37732:	f8d9 2024 	ldr.w	r2, [r9, #36]	@ 0x24
   37736:	f3c3 03c1 	ubfx	r3, r3, #3, #2
   3773a:	2b02      	cmp	r3, #2
   3773c:	bf14      	ite	ne
   3773e:	2011      	movne	r0, #17
   37740:	202b      	moveq	r0, #43	@ 0x2b
   37742:	4790      	blx	r2
   37744:	3c01      	subs	r4, #1
   37746:	6828      	ldr	r0, [r5, #0]
   37748:	4030      	ands	r0, r6
   3774a:	42b8      	cmp	r0, r7
   3774c:	d1ee      	bne.n	3772c <am_hal_delay_us_status_check+0x48>
   3774e:	e7ea      	b.n	37726 <am_hal_delay_us_status_check+0x42>
   37750:	2004      	movs	r0, #4
   37752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   37756:	bf00      	nop
   37758:	40021000 	.word	0x40021000
   3775c:	0004bf28 	.word	0x0004bf28

00037760 <am_hal_triple_read>:
   37760:	b412      	push	{r1, r4}
   37762:	f3ef 8410 	mrs	r4, PRIMASK
   37766:	b672      	cpsid	i
   37768:	6801      	ldr	r1, [r0, #0]
   3776a:	6802      	ldr	r2, [r0, #0]
   3776c:	6803      	ldr	r3, [r0, #0]
   3776e:	f384 8810 	msr	PRIMASK, r4
   37772:	bc11      	pop	{r0, r4}
   37774:	6001      	str	r1, [r0, #0]
   37776:	6042      	str	r2, [r0, #4]
   37778:	6083      	str	r3, [r0, #8]
   3777a:	4770      	bx	lr

0003777c <am_bsp_uart_string_print>:
   3777c:	b530      	push	{r4, r5, lr}
   3777e:	b08b      	sub	sp, #44	@ 0x2c
   37780:	7804      	ldrb	r4, [r0, #0]
   37782:	2300      	movs	r3, #0
   37784:	4605      	mov	r5, r0
   37786:	9301      	str	r3, [sp, #4]
   37788:	b13c      	cbz	r4, 3779a <am_bsp_uart_string_print+0x1e>
   3778a:	4603      	mov	r3, r0
   3778c:	f1c0 0101 	rsb	r1, r0, #1
   37790:	18cc      	adds	r4, r1, r3
   37792:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   37796:	2a00      	cmp	r2, #0
   37798:	d1fa      	bne.n	37790 <am_bsp_uart_string_print+0x14>
   3779a:	2220      	movs	r2, #32
   3779c:	2100      	movs	r1, #0
   3779e:	a802      	add	r0, sp, #8
   377a0:	f7ef fb9c 	bl	26edc <memset>
   377a4:	4b08      	ldr	r3, [pc, #32]	@ (377c8 <am_bsp_uart_string_print+0x4c>)
   377a6:	9503      	str	r5, [sp, #12]
   377a8:	6818      	ldr	r0, [r3, #0]
   377aa:	aa01      	add	r2, sp, #4
   377ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
   377b0:	a902      	add	r1, sp, #8
   377b2:	9306      	str	r3, [sp, #24]
   377b4:	e9cd 4204 	strd	r4, r2, [sp, #16]
   377b8:	f00b f87a 	bl	428b0 <am_hal_uart_transfer>
   377bc:	9b01      	ldr	r3, [sp, #4]
   377be:	42a3      	cmp	r3, r4
   377c0:	d000      	beq.n	377c4 <am_bsp_uart_string_print+0x48>
   377c2:	e7fe      	b.n	377c2 <am_bsp_uart_string_print+0x46>
   377c4:	b00b      	add	sp, #44	@ 0x2c
   377c6:	bd30      	pop	{r4, r5, pc}
   377c8:	10053804 	.word	0x10053804

000377cc <am_bsp_external_vddusb33_switch>:
   377cc:	b510      	push	{r4, lr}
   377ce:	4b06      	ldr	r3, [pc, #24]	@ (377e8 <am_bsp_external_vddusb33_switch+0x1c>)
   377d0:	4604      	mov	r4, r0
   377d2:	6819      	ldr	r1, [r3, #0]
   377d4:	200d      	movs	r0, #13
   377d6:	f7fe fc67 	bl	360a8 <am_hal_gpio_pinconfig>
   377da:	4621      	mov	r1, r4
   377dc:	200d      	movs	r0, #13
   377de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   377e2:	f7fe bc8d 	b.w	36100 <am_hal_gpio_state_write>
   377e6:	bf00      	nop
   377e8:	1000dc50 	.word	0x1000dc50

000377ec <am_bsp_external_vddusb0p9_switch>:
   377ec:	b510      	push	{r4, lr}
   377ee:	4b06      	ldr	r3, [pc, #24]	@ (37808 <am_bsp_external_vddusb0p9_switch+0x1c>)
   377f0:	4604      	mov	r4, r0
   377f2:	6819      	ldr	r1, [r3, #0]
   377f4:	200f      	movs	r0, #15
   377f6:	f7fe fc57 	bl	360a8 <am_hal_gpio_pinconfig>
   377fa:	4621      	mov	r1, r4
   377fc:	200f      	movs	r0, #15
   377fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   37802:	f7fe bc7d 	b.w	36100 <am_hal_gpio_state_write>
   37806:	bf00      	nop
   37808:	1000dc4c 	.word	0x1000dc4c

0003780c <am_bsp_low_power_init>:
   3780c:	b508      	push	{r3, lr}
   3780e:	f7ff fa03 	bl	36c18 <am_hal_pwrctrl_low_power_init>
   37812:	2100      	movs	r1, #0
   37814:	4608      	mov	r0, r1
   37816:	f7ff fad9 	bl	36dcc <am_hal_pwrctrl_control>
   3781a:	f00a fe05 	bl	42428 <am_hal_rtc_osc_disable>
   3781e:	4b05      	ldr	r3, [pc, #20]	@ (37834 <am_bsp_low_power_init+0x28>)
   37820:	2037      	movs	r0, #55	@ 0x37
   37822:	6819      	ldr	r1, [r3, #0]
   37824:	f7fe fc40 	bl	360a8 <am_hal_gpio_pinconfig>
   37828:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3782c:	2100      	movs	r1, #0
   3782e:	2037      	movs	r0, #55	@ 0x37
   37830:	f7fe bc66 	b.w	36100 <am_hal_gpio_state_write>
   37834:	0004bc5c 	.word	0x0004bc5c

00037838 <am_bsp_itm_printf_enable>:
   37838:	4b18      	ldr	r3, [pc, #96]	@ (3789c <am_bsp_itm_printf_enable+0x64>)
   3783a:	689b      	ldr	r3, [r3, #8]
   3783c:	02da      	lsls	r2, r3, #11
   3783e:	d529      	bpl.n	37894 <am_bsp_itm_printf_enable+0x5c>
   37840:	b510      	push	{r4, lr}
   37842:	4b17      	ldr	r3, [pc, #92]	@ (378a0 <am_bsp_itm_printf_enable+0x68>)
   37844:	f8d3 4a7c 	ldr.w	r4, [r3, #2684]	@ 0xa7c
   37848:	f014 0401 	ands.w	r4, r4, #1
   3784c:	b082      	sub	sp, #8
   3784e:	d01e      	beq.n	3788e <am_bsp_itm_printf_enable+0x56>
   37850:	a801      	add	r0, sp, #4
   37852:	f009 f9f3 	bl	40c3c <am_hal_dcu_get>
   37856:	9b01      	ldr	r3, [sp, #4]
   37858:	06db      	lsls	r3, r3, #27
   3785a:	d512      	bpl.n	37882 <am_bsp_itm_printf_enable+0x4a>
   3785c:	4b11      	ldr	r3, [pc, #68]	@ (378a4 <am_bsp_itm_printf_enable+0x6c>)
   3785e:	2201      	movs	r2, #1
   37860:	701a      	strb	r2, [r3, #0]
   37862:	f7fe fcad 	bl	361c0 <am_hal_itm_enable>
   37866:	4810      	ldr	r0, [pc, #64]	@ (378a8 <am_bsp_itm_printf_enable+0x70>)
   37868:	f7ff fec2 	bl	375f0 <am_hal_tpiu_enable>
   3786c:	4b0f      	ldr	r3, [pc, #60]	@ (378ac <am_bsp_itm_printf_enable+0x74>)
   3786e:	201c      	movs	r0, #28
   37870:	6819      	ldr	r1, [r3, #0]
   37872:	f7fe fc19 	bl	360a8 <am_hal_gpio_pinconfig>
   37876:	480e      	ldr	r0, [pc, #56]	@ (378b0 <am_bsp_itm_printf_enable+0x78>)
   37878:	f7f9 feea 	bl	31650 <am_util_stdio_printf_init>
   3787c:	2000      	movs	r0, #0
   3787e:	b002      	add	sp, #8
   37880:	bd10      	pop	{r4, pc}
   37882:	2110      	movs	r1, #16
   37884:	4620      	mov	r0, r4
   37886:	f009 fa1f 	bl	40cc8 <am_hal_dcu_update>
   3788a:	2800      	cmp	r0, #0
   3788c:	d0e6      	beq.n	3785c <am_bsp_itm_printf_enable+0x24>
   3788e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   37892:	e7f4      	b.n	3787e <am_bsp_itm_printf_enable+0x46>
   37894:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   37898:	4770      	bx	lr
   3789a:	bf00      	nop
   3789c:	40021000 	.word	0x40021000
   378a0:	400c0000 	.word	0x400c0000
   378a4:	10053800 	.word	0x10053800
   378a8:	000f4240 	.word	0x000f4240
   378ac:	1000dc48 	.word	0x1000dc48
   378b0:	000362dd 	.word	0x000362dd

000378b4 <am_bsp_uart_printf_enable>:
   378b4:	b510      	push	{r4, lr}
   378b6:	4c14      	ldr	r4, [pc, #80]	@ (37908 <am_bsp_uart_printf_enable+0x54>)
   378b8:	2000      	movs	r0, #0
   378ba:	4621      	mov	r1, r4
   378bc:	f00a fea4 	bl	42608 <am_hal_uart_initialize>
   378c0:	b9f8      	cbnz	r0, 37902 <am_bsp_uart_printf_enable+0x4e>
   378c2:	4602      	mov	r2, r0
   378c4:	4611      	mov	r1, r2
   378c6:	6820      	ldr	r0, [r4, #0]
   378c8:	f00a feea 	bl	426a0 <am_hal_uart_power_control>
   378cc:	b9c8      	cbnz	r0, 37902 <am_bsp_uart_printf_enable+0x4e>
   378ce:	490f      	ldr	r1, [pc, #60]	@ (3790c <am_bsp_uart_printf_enable+0x58>)
   378d0:	6820      	ldr	r0, [r4, #0]
   378d2:	f00a ff41 	bl	42758 <am_hal_uart_configure>
   378d6:	b9a0      	cbnz	r0, 37902 <am_bsp_uart_printf_enable+0x4e>
   378d8:	4b0d      	ldr	r3, [pc, #52]	@ (37910 <am_bsp_uart_printf_enable+0x5c>)
   378da:	200c      	movs	r0, #12
   378dc:	6819      	ldr	r1, [r3, #0]
   378de:	f7fe fbe3 	bl	360a8 <am_hal_gpio_pinconfig>
   378e2:	b970      	cbnz	r0, 37902 <am_bsp_uart_printf_enable+0x4e>
   378e4:	4b0b      	ldr	r3, [pc, #44]	@ (37914 <am_bsp_uart_printf_enable+0x60>)
   378e6:	202f      	movs	r0, #47	@ 0x2f
   378e8:	6819      	ldr	r1, [r3, #0]
   378ea:	f7fe fbdd 	bl	360a8 <am_hal_gpio_pinconfig>
   378ee:	4604      	mov	r4, r0
   378f0:	b938      	cbnz	r0, 37902 <am_bsp_uart_printf_enable+0x4e>
   378f2:	4b09      	ldr	r3, [pc, #36]	@ (37918 <am_bsp_uart_printf_enable+0x64>)
   378f4:	4809      	ldr	r0, [pc, #36]	@ (3791c <am_bsp_uart_printf_enable+0x68>)
   378f6:	2202      	movs	r2, #2
   378f8:	701a      	strb	r2, [r3, #0]
   378fa:	f7f9 fea9 	bl	31650 <am_util_stdio_printf_init>
   378fe:	4620      	mov	r0, r4
   37900:	bd10      	pop	{r4, pc}
   37902:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   37906:	bd10      	pop	{r4, pc}
   37908:	10053804 	.word	0x10053804
   3790c:	0004bf50 	.word	0x0004bf50
   37910:	1000dba8 	.word	0x1000dba8
   37914:	1000dba4 	.word	0x1000dba4
   37918:	10053800 	.word	0x10053800
   3791c:	0003777d 	.word	0x0003777d

00037920 <am_bsp_uart_printf_disable>:
   37920:	b570      	push	{r4, r5, r6, lr}
   37922:	4c10      	ldr	r4, [pc, #64]	@ (37964 <am_bsp_uart_printf_disable+0x44>)
   37924:	7825      	ldrb	r5, [r4, #0]
   37926:	2d02      	cmp	r5, #2
   37928:	d000      	beq.n	3792c <am_bsp_uart_printf_disable+0xc>
   3792a:	bd70      	pop	{r4, r5, r6, pc}
   3792c:	4e0e      	ldr	r6, [pc, #56]	@ (37968 <am_bsp_uart_printf_disable+0x48>)
   3792e:	6830      	ldr	r0, [r6, #0]
   37930:	f00b f966 	bl	42c00 <am_hal_uart_tx_flush>
   37934:	2000      	movs	r0, #0
   37936:	f7f9 fe8b 	bl	31650 <am_util_stdio_printf_init>
   3793a:	2200      	movs	r2, #0
   3793c:	4629      	mov	r1, r5
   3793e:	6830      	ldr	r0, [r6, #0]
   37940:	f00a feae 	bl	426a0 <am_hal_uart_power_control>
   37944:	6830      	ldr	r0, [r6, #0]
   37946:	f00a fe97 	bl	42678 <am_hal_uart_deinitialize>
   3794a:	4b08      	ldr	r3, [pc, #32]	@ (3796c <am_bsp_uart_printf_disable+0x4c>)
   3794c:	681d      	ldr	r5, [r3, #0]
   3794e:	200c      	movs	r0, #12
   37950:	4629      	mov	r1, r5
   37952:	f7fe fba9 	bl	360a8 <am_hal_gpio_pinconfig>
   37956:	4629      	mov	r1, r5
   37958:	202f      	movs	r0, #47	@ 0x2f
   3795a:	f7fe fba5 	bl	360a8 <am_hal_gpio_pinconfig>
   3795e:	2300      	movs	r3, #0
   37960:	7023      	strb	r3, [r4, #0]
   37962:	bd70      	pop	{r4, r5, r6, pc}
   37964:	10053800 	.word	0x10053800
   37968:	10053804 	.word	0x10053804
   3796c:	0004bc58 	.word	0x0004bc58

00037970 <am_bsp_iom_pins_enable>:
   37970:	2807      	cmp	r0, #7
   37972:	d825      	bhi.n	379c0 <am_bsp_iom_pins_enable+0x50>
   37974:	ea41 0180 	orr.w	r1, r1, r0, lsl #2
   37978:	b508      	push	{r3, lr}
   3797a:	291d      	cmp	r1, #29
   3797c:	d81f      	bhi.n	379be <am_bsp_iom_pins_enable+0x4e>
   3797e:	e8df f011 	tbh	[pc, r1, lsl #1]
   37982:	010e      	.short	0x010e
   37984:	001e0102 	.word	0x001e0102
   37988:	00ec001e 	.word	0x00ec001e
   3798c:	001e00e0 	.word	0x001e00e0
   37990:	00ca001e 	.word	0x00ca001e
   37994:	001e00be 	.word	0x001e00be
   37998:	00a8001e 	.word	0x00a8001e
   3799c:	001e009c 	.word	0x001e009c
   379a0:	0086001e 	.word	0x0086001e
   379a4:	001e001e 	.word	0x001e001e
   379a8:	0070001e 	.word	0x0070001e
   379ac:	001e0064 	.word	0x001e0064
   379b0:	004e001e 	.word	0x004e001e
   379b4:	001e0042 	.word	0x001e0042
   379b8:	002c001e 	.word	0x002c001e
   379bc:	0020      	.short	0x0020
   379be:	bd08      	pop	{r3, pc}
   379c0:	4770      	bx	lr
   379c2:	4b82      	ldr	r3, [pc, #520]	@ (37bcc <am_bsp_iom_pins_enable+0x25c>)
   379c4:	2016      	movs	r0, #22
   379c6:	6819      	ldr	r1, [r3, #0]
   379c8:	f7fe fb6e 	bl	360a8 <am_hal_gpio_pinconfig>
   379cc:	4b80      	ldr	r3, [pc, #512]	@ (37bd0 <am_bsp_iom_pins_enable+0x260>)
   379ce:	2017      	movs	r0, #23
   379d0:	6819      	ldr	r1, [r3, #0]
   379d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   379d6:	f7fe bb67 	b.w	360a8 <am_hal_gpio_pinconfig>
   379da:	4b7e      	ldr	r3, [pc, #504]	@ (37bd4 <am_bsp_iom_pins_enable+0x264>)
   379dc:	2016      	movs	r0, #22
   379de:	6819      	ldr	r1, [r3, #0]
   379e0:	f7fe fb62 	bl	360a8 <am_hal_gpio_pinconfig>
   379e4:	4b7c      	ldr	r3, [pc, #496]	@ (37bd8 <am_bsp_iom_pins_enable+0x268>)
   379e6:	2018      	movs	r0, #24
   379e8:	6819      	ldr	r1, [r3, #0]
   379ea:	f7fe fb5d 	bl	360a8 <am_hal_gpio_pinconfig>
   379ee:	4b7b      	ldr	r3, [pc, #492]	@ (37bdc <am_bsp_iom_pins_enable+0x26c>)
   379f0:	2017      	movs	r0, #23
   379f2:	6819      	ldr	r1, [r3, #0]
   379f4:	f7fe fb58 	bl	360a8 <am_hal_gpio_pinconfig>
   379f8:	4b79      	ldr	r3, [pc, #484]	@ (37be0 <am_bsp_iom_pins_enable+0x270>)
   379fa:	2058      	movs	r0, #88	@ 0x58
   379fc:	6819      	ldr	r1, [r3, #0]
   379fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   37a02:	f7fe bb51 	b.w	360a8 <am_hal_gpio_pinconfig>
   37a06:	4b77      	ldr	r3, [pc, #476]	@ (37be4 <am_bsp_iom_pins_enable+0x274>)
   37a08:	203d      	movs	r0, #61	@ 0x3d
   37a0a:	6819      	ldr	r1, [r3, #0]
   37a0c:	f7fe fb4c 	bl	360a8 <am_hal_gpio_pinconfig>
   37a10:	4b75      	ldr	r3, [pc, #468]	@ (37be8 <am_bsp_iom_pins_enable+0x278>)
   37a12:	203e      	movs	r0, #62	@ 0x3e
   37a14:	6819      	ldr	r1, [r3, #0]
   37a16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   37a1a:	f7fe bb45 	b.w	360a8 <am_hal_gpio_pinconfig>
   37a1e:	4b73      	ldr	r3, [pc, #460]	@ (37bec <am_bsp_iom_pins_enable+0x27c>)
   37a20:	203d      	movs	r0, #61	@ 0x3d
   37a22:	6819      	ldr	r1, [r3, #0]
   37a24:	f7fe fb40 	bl	360a8 <am_hal_gpio_pinconfig>
   37a28:	4b71      	ldr	r3, [pc, #452]	@ (37bf0 <am_bsp_iom_pins_enable+0x280>)
   37a2a:	203f      	movs	r0, #63	@ 0x3f
   37a2c:	6819      	ldr	r1, [r3, #0]
   37a2e:	f7fe fb3b 	bl	360a8 <am_hal_gpio_pinconfig>
   37a32:	4b70      	ldr	r3, [pc, #448]	@ (37bf4 <am_bsp_iom_pins_enable+0x284>)
   37a34:	203e      	movs	r0, #62	@ 0x3e
   37a36:	6819      	ldr	r1, [r3, #0]
   37a38:	f7fe fb36 	bl	360a8 <am_hal_gpio_pinconfig>
   37a3c:	4b6e      	ldr	r3, [pc, #440]	@ (37bf8 <am_bsp_iom_pins_enable+0x288>)
   37a3e:	201e      	movs	r0, #30
   37a40:	6819      	ldr	r1, [r3, #0]
   37a42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   37a46:	f7fe bb2f 	b.w	360a8 <am_hal_gpio_pinconfig>
   37a4a:	4b6c      	ldr	r3, [pc, #432]	@ (37bfc <am_bsp_iom_pins_enable+0x28c>)
   37a4c:	202f      	movs	r0, #47	@ 0x2f
   37a4e:	6819      	ldr	r1, [r3, #0]
   37a50:	f7fe fb2a 	bl	360a8 <am_hal_gpio_pinconfig>
   37a54:	4b6a      	ldr	r3, [pc, #424]	@ (37c00 <am_bsp_iom_pins_enable+0x290>)
   37a56:	2030      	movs	r0, #48	@ 0x30
   37a58:	6819      	ldr	r1, [r3, #0]
   37a5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   37a5e:	f7fe bb23 	b.w	360a8 <am_hal_gpio_pinconfig>
   37a62:	4b68      	ldr	r3, [pc, #416]	@ (37c04 <am_bsp_iom_pins_enable+0x294>)
   37a64:	202f      	movs	r0, #47	@ 0x2f
   37a66:	6819      	ldr	r1, [r3, #0]
   37a68:	f7fe fb1e 	bl	360a8 <am_hal_gpio_pinconfig>
   37a6c:	4b66      	ldr	r3, [pc, #408]	@ (37c08 <am_bsp_iom_pins_enable+0x298>)
   37a6e:	2031      	movs	r0, #49	@ 0x31
   37a70:	6819      	ldr	r1, [r3, #0]
   37a72:	f7fe fb19 	bl	360a8 <am_hal_gpio_pinconfig>
   37a76:	4b65      	ldr	r3, [pc, #404]	@ (37c0c <am_bsp_iom_pins_enable+0x29c>)
   37a78:	2030      	movs	r0, #48	@ 0x30
   37a7a:	6819      	ldr	r1, [r3, #0]
   37a7c:	f7fe fb14 	bl	360a8 <am_hal_gpio_pinconfig>
   37a80:	4b63      	ldr	r3, [pc, #396]	@ (37c10 <am_bsp_iom_pins_enable+0x2a0>)
   37a82:	203c      	movs	r0, #60	@ 0x3c
   37a84:	6819      	ldr	r1, [r3, #0]
   37a86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   37a8a:	f7fe bb0d 	b.w	360a8 <am_hal_gpio_pinconfig>
   37a8e:	4b61      	ldr	r3, [pc, #388]	@ (37c14 <am_bsp_iom_pins_enable+0x2a4>)
   37a90:	2022      	movs	r0, #34	@ 0x22
   37a92:	6819      	ldr	r1, [r3, #0]
   37a94:	f7fe fb08 	bl	360a8 <am_hal_gpio_pinconfig>
   37a98:	4b5f      	ldr	r3, [pc, #380]	@ (37c18 <am_bsp_iom_pins_enable+0x2a8>)
   37a9a:	2024      	movs	r0, #36	@ 0x24
   37a9c:	6819      	ldr	r1, [r3, #0]
   37a9e:	f7fe fb03 	bl	360a8 <am_hal_gpio_pinconfig>
   37aa2:	4b5e      	ldr	r3, [pc, #376]	@ (37c1c <am_bsp_iom_pins_enable+0x2ac>)
   37aa4:	2023      	movs	r0, #35	@ 0x23
   37aa6:	6819      	ldr	r1, [r3, #0]
   37aa8:	f7fe fafe 	bl	360a8 <am_hal_gpio_pinconfig>
   37aac:	4b5c      	ldr	r3, [pc, #368]	@ (37c20 <am_bsp_iom_pins_enable+0x2b0>)
   37aae:	2036      	movs	r0, #54	@ 0x36
   37ab0:	6819      	ldr	r1, [r3, #0]
   37ab2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   37ab6:	f7fe baf7 	b.w	360a8 <am_hal_gpio_pinconfig>
   37aba:	4b5a      	ldr	r3, [pc, #360]	@ (37c24 <am_bsp_iom_pins_enable+0x2b4>)
   37abc:	201f      	movs	r0, #31
   37abe:	6819      	ldr	r1, [r3, #0]
   37ac0:	f7fe faf2 	bl	360a8 <am_hal_gpio_pinconfig>
   37ac4:	4b58      	ldr	r3, [pc, #352]	@ (37c28 <am_bsp_iom_pins_enable+0x2b8>)
   37ac6:	2020      	movs	r0, #32
   37ac8:	6819      	ldr	r1, [r3, #0]
   37aca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   37ace:	f7fe baeb 	b.w	360a8 <am_hal_gpio_pinconfig>
   37ad2:	4b56      	ldr	r3, [pc, #344]	@ (37c2c <am_bsp_iom_pins_enable+0x2bc>)
   37ad4:	201f      	movs	r0, #31
   37ad6:	6819      	ldr	r1, [r3, #0]
   37ad8:	f7fe fae6 	bl	360a8 <am_hal_gpio_pinconfig>
   37adc:	4b54      	ldr	r3, [pc, #336]	@ (37c30 <am_bsp_iom_pins_enable+0x2c0>)
   37ade:	2021      	movs	r0, #33	@ 0x21
   37ae0:	6819      	ldr	r1, [r3, #0]
   37ae2:	f7fe fae1 	bl	360a8 <am_hal_gpio_pinconfig>
   37ae6:	4b53      	ldr	r3, [pc, #332]	@ (37c34 <am_bsp_iom_pins_enable+0x2c4>)
   37ae8:	2020      	movs	r0, #32
   37aea:	6819      	ldr	r1, [r3, #0]
   37aec:	f7fe fadc 	bl	360a8 <am_hal_gpio_pinconfig>
   37af0:	4b51      	ldr	r3, [pc, #324]	@ (37c38 <am_bsp_iom_pins_enable+0x2c8>)
   37af2:	2055      	movs	r0, #85	@ 0x55
   37af4:	6819      	ldr	r1, [r3, #0]
   37af6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   37afa:	f7fe bad5 	b.w	360a8 <am_hal_gpio_pinconfig>
   37afe:	4b4f      	ldr	r3, [pc, #316]	@ (37c3c <am_bsp_iom_pins_enable+0x2cc>)
   37b00:	2019      	movs	r0, #25
   37b02:	6819      	ldr	r1, [r3, #0]
   37b04:	f7fe fad0 	bl	360a8 <am_hal_gpio_pinconfig>
   37b08:	4b4d      	ldr	r3, [pc, #308]	@ (37c40 <am_bsp_iom_pins_enable+0x2d0>)
   37b0a:	201a      	movs	r0, #26
   37b0c:	6819      	ldr	r1, [r3, #0]
   37b0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   37b12:	f7fe bac9 	b.w	360a8 <am_hal_gpio_pinconfig>
   37b16:	4b4b      	ldr	r3, [pc, #300]	@ (37c44 <am_bsp_iom_pins_enable+0x2d4>)
   37b18:	2019      	movs	r0, #25
   37b1a:	6819      	ldr	r1, [r3, #0]
   37b1c:	f7fe fac4 	bl	360a8 <am_hal_gpio_pinconfig>
   37b20:	4b49      	ldr	r3, [pc, #292]	@ (37c48 <am_bsp_iom_pins_enable+0x2d8>)
   37b22:	201b      	movs	r0, #27
   37b24:	6819      	ldr	r1, [r3, #0]
   37b26:	f7fe fabf 	bl	360a8 <am_hal_gpio_pinconfig>
   37b2a:	4b48      	ldr	r3, [pc, #288]	@ (37c4c <am_bsp_iom_pins_enable+0x2dc>)
   37b2c:	201a      	movs	r0, #26
   37b2e:	6819      	ldr	r1, [r3, #0]
   37b30:	f7fe faba 	bl	360a8 <am_hal_gpio_pinconfig>
   37b34:	4b46      	ldr	r3, [pc, #280]	@ (37c50 <am_bsp_iom_pins_enable+0x2e0>)
   37b36:	2025      	movs	r0, #37	@ 0x25
   37b38:	6819      	ldr	r1, [r3, #0]
   37b3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   37b3e:	f7fe bab3 	b.w	360a8 <am_hal_gpio_pinconfig>
   37b42:	4b44      	ldr	r3, [pc, #272]	@ (37c54 <am_bsp_iom_pins_enable+0x2e4>)
   37b44:	2008      	movs	r0, #8
   37b46:	6819      	ldr	r1, [r3, #0]
   37b48:	f7fe faae 	bl	360a8 <am_hal_gpio_pinconfig>
   37b4c:	4b42      	ldr	r3, [pc, #264]	@ (37c58 <am_bsp_iom_pins_enable+0x2e8>)
   37b4e:	2009      	movs	r0, #9
   37b50:	6819      	ldr	r1, [r3, #0]
   37b52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   37b56:	f7fe baa7 	b.w	360a8 <am_hal_gpio_pinconfig>
   37b5a:	4b40      	ldr	r3, [pc, #256]	@ (37c5c <am_bsp_iom_pins_enable+0x2ec>)
   37b5c:	2008      	movs	r0, #8
   37b5e:	6819      	ldr	r1, [r3, #0]
   37b60:	f7fe faa2 	bl	360a8 <am_hal_gpio_pinconfig>
   37b64:	4b3e      	ldr	r3, [pc, #248]	@ (37c60 <am_bsp_iom_pins_enable+0x2f0>)
   37b66:	200a      	movs	r0, #10
   37b68:	6819      	ldr	r1, [r3, #0]
   37b6a:	f7fe fa9d 	bl	360a8 <am_hal_gpio_pinconfig>
   37b6e:	4b3d      	ldr	r3, [pc, #244]	@ (37c64 <am_bsp_iom_pins_enable+0x2f4>)
   37b70:	2009      	movs	r0, #9
   37b72:	6819      	ldr	r1, [r3, #0]
   37b74:	f7fe fa98 	bl	360a8 <am_hal_gpio_pinconfig>
   37b78:	4b3b      	ldr	r3, [pc, #236]	@ (37c68 <am_bsp_iom_pins_enable+0x2f8>)
   37b7a:	200b      	movs	r0, #11
   37b7c:	6819      	ldr	r1, [r3, #0]
   37b7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   37b82:	f7fe ba91 	b.w	360a8 <am_hal_gpio_pinconfig>
   37b86:	4b39      	ldr	r3, [pc, #228]	@ (37c6c <am_bsp_iom_pins_enable+0x2fc>)
   37b88:	2005      	movs	r0, #5
   37b8a:	6819      	ldr	r1, [r3, #0]
   37b8c:	f7fe fa8c 	bl	360a8 <am_hal_gpio_pinconfig>
   37b90:	4b37      	ldr	r3, [pc, #220]	@ (37c70 <am_bsp_iom_pins_enable+0x300>)
   37b92:	2006      	movs	r0, #6
   37b94:	6819      	ldr	r1, [r3, #0]
   37b96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   37b9a:	f7fe ba85 	b.w	360a8 <am_hal_gpio_pinconfig>
   37b9e:	4b35      	ldr	r3, [pc, #212]	@ (37c74 <am_bsp_iom_pins_enable+0x304>)
   37ba0:	2005      	movs	r0, #5
   37ba2:	6819      	ldr	r1, [r3, #0]
   37ba4:	f7fe fa80 	bl	360a8 <am_hal_gpio_pinconfig>
   37ba8:	4b33      	ldr	r3, [pc, #204]	@ (37c78 <am_bsp_iom_pins_enable+0x308>)
   37baa:	2007      	movs	r0, #7
   37bac:	6819      	ldr	r1, [r3, #0]
   37bae:	f7fe fa7b 	bl	360a8 <am_hal_gpio_pinconfig>
   37bb2:	4b32      	ldr	r3, [pc, #200]	@ (37c7c <am_bsp_iom_pins_enable+0x30c>)
   37bb4:	2006      	movs	r0, #6
   37bb6:	6819      	ldr	r1, [r3, #0]
   37bb8:	f7fe fa76 	bl	360a8 <am_hal_gpio_pinconfig>
   37bbc:	4b30      	ldr	r3, [pc, #192]	@ (37c80 <am_bsp_iom_pins_enable+0x310>)
   37bbe:	2048      	movs	r0, #72	@ 0x48
   37bc0:	6819      	ldr	r1, [r3, #0]
   37bc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   37bc6:	f7fe ba6f 	b.w	360a8 <am_hal_gpio_pinconfig>
   37bca:	bf00      	nop
   37bcc:	1000dc40 	.word	0x1000dc40
   37bd0:	1000dc44 	.word	0x1000dc44
   37bd4:	1000dc3c 	.word	0x1000dc3c
   37bd8:	10053820 	.word	0x10053820
   37bdc:	1000dc38 	.word	0x1000dc38
   37be0:	1000dc34 	.word	0x1000dc34
   37be4:	1000dc2c 	.word	0x1000dc2c
   37be8:	1000dc30 	.word	0x1000dc30
   37bec:	1000dc28 	.word	0x1000dc28
   37bf0:	1005381c 	.word	0x1005381c
   37bf4:	1000dc24 	.word	0x1000dc24
   37bf8:	1000dc20 	.word	0x1000dc20
   37bfc:	1000dc18 	.word	0x1000dc18
   37c00:	1000dc1c 	.word	0x1000dc1c
   37c04:	1000dc14 	.word	0x1000dc14
   37c08:	10053818 	.word	0x10053818
   37c0c:	1000dc10 	.word	0x1000dc10
   37c10:	1000dc0c 	.word	0x1000dc0c
   37c14:	1000dc08 	.word	0x1000dc08
   37c18:	10053814 	.word	0x10053814
   37c1c:	1000dc04 	.word	0x1000dc04
   37c20:	1000dc00 	.word	0x1000dc00
   37c24:	1000dbf8 	.word	0x1000dbf8
   37c28:	1000dbfc 	.word	0x1000dbfc
   37c2c:	1000dbf4 	.word	0x1000dbf4
   37c30:	10053810 	.word	0x10053810
   37c34:	1000dbf0 	.word	0x1000dbf0
   37c38:	1000dbec 	.word	0x1000dbec
   37c3c:	1000dbe4 	.word	0x1000dbe4
   37c40:	1000dbe8 	.word	0x1000dbe8
   37c44:	1000dbe0 	.word	0x1000dbe0
   37c48:	1005380c 	.word	0x1005380c
   37c4c:	1000dbdc 	.word	0x1000dbdc
   37c50:	1000dbd8 	.word	0x1000dbd8
   37c54:	1000dbd0 	.word	0x1000dbd0
   37c58:	1000dbd4 	.word	0x1000dbd4
   37c5c:	1000dbcc 	.word	0x1000dbcc
   37c60:	1000dbc4 	.word	0x1000dbc4
   37c64:	1000dbc8 	.word	0x1000dbc8
   37c68:	1000dbc0 	.word	0x1000dbc0
   37c6c:	1000dbb8 	.word	0x1000dbb8
   37c70:	1000dbbc 	.word	0x1000dbbc
   37c74:	1000dbb4 	.word	0x1000dbb4
   37c78:	10053808 	.word	0x10053808
   37c7c:	1000dbb0 	.word	0x1000dbb0
   37c80:	1000dbac 	.word	0x1000dbac

00037c84 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   37c84:	b570      	push	{r4, r5, r6, lr}
   37c86:	6803      	ldr	r3, [r0, #0]
   37c88:	b084      	sub	sp, #16
   37c8a:	2400      	movs	r4, #0
   37c8c:	699e      	ldr	r6, [r3, #24]
   37c8e:	9403      	str	r4, [sp, #12]
   37c90:	2310      	movs	r3, #16
   37c92:	4615      	mov	r5, r2
   37c94:	9302      	str	r3, [sp, #8]
   37c96:	e9cd 4400 	strd	r4, r4, [sp]
   37c9a:	466b      	mov	r3, sp
   37c9c:	6812      	ldr	r2, [r2, #0]
   37c9e:	47b0      	blx	r6
   37ca0:	f89d 3004 	ldrb.w	r3, [sp, #4]
   37ca4:	f003 0306 	and.w	r3, r3, #6
   37ca8:	2b06      	cmp	r3, #6
   37caa:	bf03      	ittte	eq
   37cac:	9b00      	ldreq	r3, [sp, #0]
   37cae:	602b      	streq	r3, [r5, #0]
   37cb0:	2001      	moveq	r0, #1
   37cb2:	4620      	movne	r0, r4
   37cb4:	b004      	add	sp, #16
   37cb6:	bd70      	pop	{r4, r5, r6, pc}

00037cb8 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   37cb8:	9800      	ldr	r0, [sp, #0]
   37cba:	4290      	cmp	r0, r2
   37cbc:	bf0c      	ite	eq
   37cbe:	2006      	moveq	r0, #6
   37cc0:	2001      	movne	r0, #1
   37cc2:	4770      	bx	lr

00037cc4 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   37cc4:	b510      	push	{r4, lr}
   37cc6:	4b03      	ldr	r3, [pc, #12]	@ (37cd4 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   37cc8:	6003      	str	r3, [r0, #0]
   37cca:	4604      	mov	r4, r0
   37ccc:	f000 f97c 	bl	37fc8 <_ZNSt9type_infoD1Ev>
   37cd0:	4620      	mov	r0, r4
   37cd2:	bd10      	pop	{r4, pc}
   37cd4:	0004bf94 	.word	0x0004bf94

00037cd8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   37cd8:	b510      	push	{r4, lr}
   37cda:	4b05      	ldr	r3, [pc, #20]	@ (37cf0 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
   37cdc:	6003      	str	r3, [r0, #0]
   37cde:	4604      	mov	r4, r0
   37ce0:	f000 f972 	bl	37fc8 <_ZNSt9type_infoD1Ev>
   37ce4:	4620      	mov	r0, r4
   37ce6:	2108      	movs	r1, #8
   37ce8:	f7fd fba2 	bl	35430 <_ZdlPvj>
   37cec:	4620      	mov	r0, r4
   37cee:	bd10      	pop	{r4, pc}
   37cf0:	0004bf94 	.word	0x0004bf94

00037cf4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   37cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   37cf8:	9f06      	ldr	r7, [sp, #24]
   37cfa:	9908      	ldr	r1, [sp, #32]
   37cfc:	9e09      	ldr	r6, [sp, #36]	@ 0x24
   37cfe:	428f      	cmp	r7, r1
   37d00:	4604      	mov	r4, r0
   37d02:	4690      	mov	r8, r2
   37d04:	461d      	mov	r5, r3
   37d06:	d00c      	beq.n	37d22 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>
   37d08:	4629      	mov	r1, r5
   37d0a:	4620      	mov	r0, r4
   37d0c:	f000 f978 	bl	38000 <_ZNKSt9type_info7__equalERKS_>
   37d10:	b120      	cbz	r0, 37d1c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x28>
   37d12:	2301      	movs	r3, #1
   37d14:	6037      	str	r7, [r6, #0]
   37d16:	f886 8004 	strb.w	r8, [r6, #4]
   37d1a:	71b3      	strb	r3, [r6, #6]
   37d1c:	2000      	movs	r0, #0
   37d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   37d22:	9907      	ldr	r1, [sp, #28]
   37d24:	f000 f96c 	bl	38000 <_ZNKSt9type_info7__equalERKS_>
   37d28:	2800      	cmp	r0, #0
   37d2a:	d0ed      	beq.n	37d08 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x14>
   37d2c:	f886 8005 	strb.w	r8, [r6, #5]
   37d30:	2000      	movs	r0, #0
   37d32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   37d36:	bf00      	nop

00037d38 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   37d38:	b538      	push	{r3, r4, r5, lr}
   37d3a:	4615      	mov	r5, r2
   37d3c:	461c      	mov	r4, r3
   37d3e:	f000 f95f 	bl	38000 <_ZNKSt9type_info7__equalERKS_>
   37d42:	b900      	cbnz	r0, 37d46 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0xe>
   37d44:	bd38      	pop	{r3, r4, r5, pc}
   37d46:	2208      	movs	r2, #8
   37d48:	2306      	movs	r3, #6
   37d4a:	6025      	str	r5, [r4, #0]
   37d4c:	60e2      	str	r2, [r4, #12]
   37d4e:	7123      	strb	r3, [r4, #4]
   37d50:	bd38      	pop	{r3, r4, r5, pc}
   37d52:	bf00      	nop

00037d54 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   37d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   37d58:	4606      	mov	r6, r0
   37d5a:	4617      	mov	r7, r2
   37d5c:	461d      	mov	r5, r3
   37d5e:	460c      	mov	r4, r1
   37d60:	f000 f94e 	bl	38000 <_ZNKSt9type_info7__equalERKS_>
   37d64:	b948      	cbnz	r0, 37d7a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   37d66:	2d03      	cmp	r5, #3
   37d68:	d807      	bhi.n	37d7a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   37d6a:	6823      	ldr	r3, [r4, #0]
   37d6c:	463a      	mov	r2, r7
   37d6e:	4631      	mov	r1, r6
   37d70:	4620      	mov	r0, r4
   37d72:	695b      	ldr	r3, [r3, #20]
   37d74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   37d78:	4718      	bx	r3
   37d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   37d7e:	bf00      	nop

00037d80 <_ZNK10__cxxabiv120__function_type_info15__is_function_pEv>:
   37d80:	2001      	movs	r0, #1
   37d82:	4770      	bx	lr

00037d84 <_ZN10__cxxabiv120__function_type_infoD1Ev>:
   37d84:	b510      	push	{r4, lr}
   37d86:	4b03      	ldr	r3, [pc, #12]	@ (37d94 <_ZN10__cxxabiv120__function_type_infoD1Ev+0x10>)
   37d88:	6003      	str	r3, [r0, #0]
   37d8a:	4604      	mov	r4, r0
   37d8c:	f000 f91c 	bl	37fc8 <_ZNSt9type_infoD1Ev>
   37d90:	4620      	mov	r0, r4
   37d92:	bd10      	pop	{r4, pc}
   37d94:	0004bff4 	.word	0x0004bff4

00037d98 <_ZN10__cxxabiv120__function_type_infoD0Ev>:
   37d98:	b510      	push	{r4, lr}
   37d9a:	4b05      	ldr	r3, [pc, #20]	@ (37db0 <_ZN10__cxxabiv120__function_type_infoD0Ev+0x18>)
   37d9c:	6003      	str	r3, [r0, #0]
   37d9e:	4604      	mov	r4, r0
   37da0:	f000 f912 	bl	37fc8 <_ZNSt9type_infoD1Ev>
   37da4:	4620      	mov	r0, r4
   37da6:	2108      	movs	r1, #8
   37da8:	f7fd fb42 	bl	35430 <_ZdlPvj>
   37dac:	4620      	mov	r0, r4
   37dae:	bd10      	pop	{r4, pc}
   37db0:	0004bff4 	.word	0x0004bff4

00037db4 <__cxa_guard_acquire>:
   37db4:	6803      	ldr	r3, [r0, #0]
   37db6:	07db      	lsls	r3, r3, #31
   37db8:	d405      	bmi.n	37dc6 <__cxa_guard_acquire+0x12>
   37dba:	7843      	ldrb	r3, [r0, #1]
   37dbc:	b92b      	cbnz	r3, 37dca <__cxa_guard_acquire+0x16>
   37dbe:	2301      	movs	r3, #1
   37dc0:	7043      	strb	r3, [r0, #1]
   37dc2:	4618      	mov	r0, r3
   37dc4:	4770      	bx	lr
   37dc6:	2000      	movs	r0, #0
   37dc8:	4770      	bx	lr
   37dca:	b510      	push	{r4, lr}
   37dcc:	2004      	movs	r0, #4
   37dce:	f000 f9f5 	bl	381bc <__cxa_allocate_exception>
   37dd2:	4604      	mov	r4, r0
   37dd4:	f000 f826 	bl	37e24 <_ZN9__gnu_cxx20recursive_init_errorC1Ev>
   37dd8:	4a02      	ldr	r2, [pc, #8]	@ (37de4 <__cxa_guard_acquire+0x30>)
   37dda:	4903      	ldr	r1, [pc, #12]	@ (37de8 <__cxa_guard_acquire+0x34>)
   37ddc:	4620      	mov	r0, r4
   37dde:	f000 fed7 	bl	38b90 <__cxa_throw>
   37de2:	bf00      	nop
   37de4:	00037df5 	.word	0x00037df5
   37de8:	0004c030 	.word	0x0004c030

00037dec <__cxa_guard_release>:
   37dec:	2301      	movs	r3, #1
   37dee:	6003      	str	r3, [r0, #0]
   37df0:	4770      	bx	lr
   37df2:	bf00      	nop

00037df4 <_ZN9__gnu_cxx20recursive_init_errorD1Ev>:
   37df4:	b510      	push	{r4, lr}
   37df6:	4b03      	ldr	r3, [pc, #12]	@ (37e04 <_ZN9__gnu_cxx20recursive_init_errorD1Ev+0x10>)
   37df8:	6003      	str	r3, [r0, #0]
   37dfa:	4604      	mov	r4, r0
   37dfc:	f000 fb4e 	bl	3849c <_ZNSt9exceptionD1Ev>
   37e00:	4620      	mov	r0, r4
   37e02:	bd10      	pop	{r4, pc}
   37e04:	0004c044 	.word	0x0004c044

00037e08 <_ZN9__gnu_cxx20recursive_init_errorD0Ev>:
   37e08:	b510      	push	{r4, lr}
   37e0a:	4b05      	ldr	r3, [pc, #20]	@ (37e20 <_ZN9__gnu_cxx20recursive_init_errorD0Ev+0x18>)
   37e0c:	6003      	str	r3, [r0, #0]
   37e0e:	4604      	mov	r4, r0
   37e10:	f000 fb44 	bl	3849c <_ZNSt9exceptionD1Ev>
   37e14:	4620      	mov	r0, r4
   37e16:	2104      	movs	r1, #4
   37e18:	f7fd fb0a 	bl	35430 <_ZdlPvj>
   37e1c:	4620      	mov	r0, r4
   37e1e:	bd10      	pop	{r4, pc}
   37e20:	0004c044 	.word	0x0004c044

00037e24 <_ZN9__gnu_cxx20recursive_init_errorC1Ev>:
   37e24:	4b01      	ldr	r3, [pc, #4]	@ (37e2c <_ZN9__gnu_cxx20recursive_init_errorC1Ev+0x8>)
   37e26:	6003      	str	r3, [r0, #0]
   37e28:	4770      	bx	lr
   37e2a:	bf00      	nop
   37e2c:	0004c044 	.word	0x0004c044

00037e30 <_ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv>:
   37e30:	2001      	movs	r0, #1
   37e32:	4770      	bx	lr

00037e34 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>:
   37e34:	b510      	push	{r4, lr}
   37e36:	4b03      	ldr	r3, [pc, #12]	@ (37e44 <_ZN10__cxxabiv119__pointer_type_infoD1Ev+0x10>)
   37e38:	6003      	str	r3, [r0, #0]
   37e3a:	4604      	mov	r4, r0
   37e3c:	f000 ff1c 	bl	38c78 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
   37e40:	4620      	mov	r0, r4
   37e42:	bd10      	pop	{r4, pc}
   37e44:	0004c088 	.word	0x0004c088

00037e48 <_ZN10__cxxabiv119__pointer_type_infoD0Ev>:
   37e48:	b510      	push	{r4, lr}
   37e4a:	4b05      	ldr	r3, [pc, #20]	@ (37e60 <_ZN10__cxxabiv119__pointer_type_infoD0Ev+0x18>)
   37e4c:	6003      	str	r3, [r0, #0]
   37e4e:	4604      	mov	r4, r0
   37e50:	f000 ff12 	bl	38c78 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
   37e54:	4620      	mov	r0, r4
   37e56:	2110      	movs	r1, #16
   37e58:	f7fd faea 	bl	35430 <_ZdlPvj>
   37e5c:	4620      	mov	r0, r4
   37e5e:	bd10      	pop	{r4, pc}
   37e60:	0004c088 	.word	0x0004c088

00037e64 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
   37e64:	b570      	push	{r4, r5, r6, lr}
   37e66:	2b01      	cmp	r3, #1
   37e68:	4605      	mov	r5, r0
   37e6a:	b082      	sub	sp, #8
   37e6c:	68c0      	ldr	r0, [r0, #12]
   37e6e:	461c      	mov	r4, r3
   37e70:	460e      	mov	r6, r1
   37e72:	d909      	bls.n	37e88 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x24>
   37e74:	68e8      	ldr	r0, [r5, #12]
   37e76:	68f1      	ldr	r1, [r6, #12]
   37e78:	6805      	ldr	r5, [r0, #0]
   37e7a:	1ca3      	adds	r3, r4, #2
   37e7c:	692c      	ldr	r4, [r5, #16]
   37e7e:	46a4      	mov	ip, r4
   37e80:	b002      	add	sp, #8
   37e82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   37e86:	4760      	bx	ip
   37e88:	4907      	ldr	r1, [pc, #28]	@ (37ea8 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x44>)
   37e8a:	9201      	str	r2, [sp, #4]
   37e8c:	f000 f8b8 	bl	38000 <_ZNKSt9type_info7__equalERKS_>
   37e90:	9a01      	ldr	r2, [sp, #4]
   37e92:	2800      	cmp	r0, #0
   37e94:	d0ee      	beq.n	37e74 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x10>
   37e96:	68f0      	ldr	r0, [r6, #12]
   37e98:	6803      	ldr	r3, [r0, #0]
   37e9a:	68db      	ldr	r3, [r3, #12]
   37e9c:	4798      	blx	r3
   37e9e:	f080 0001 	eor.w	r0, r0, #1
   37ea2:	b2c0      	uxtb	r0, r0
   37ea4:	b002      	add	sp, #8
   37ea6:	bd70      	pop	{r4, r5, r6, pc}
   37ea8:	0004c258 	.word	0x0004c258

00037eac <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   37eac:	b510      	push	{r4, lr}
   37eae:	4b03      	ldr	r3, [pc, #12]	@ (37ebc <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   37eb0:	6003      	str	r3, [r0, #0]
   37eb2:	4604      	mov	r4, r0
   37eb4:	f7ff ff06 	bl	37cc4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   37eb8:	4620      	mov	r0, r4
   37eba:	bd10      	pop	{r4, pc}
   37ebc:	0004c0e0 	.word	0x0004c0e0

00037ec0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   37ec0:	b510      	push	{r4, lr}
   37ec2:	4b05      	ldr	r3, [pc, #20]	@ (37ed8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
   37ec4:	6003      	str	r3, [r0, #0]
   37ec6:	4604      	mov	r4, r0
   37ec8:	f7ff fefc 	bl	37cc4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   37ecc:	4620      	mov	r0, r4
   37ece:	210c      	movs	r1, #12
   37ed0:	f7fd faae 	bl	35430 <_ZdlPvj>
   37ed4:	4620      	mov	r0, r4
   37ed6:	bd10      	pop	{r4, pc}
   37ed8:	0004c0e0 	.word	0x0004c0e0

00037edc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   37edc:	b570      	push	{r4, r5, r6, lr}
   37ede:	b082      	sub	sp, #8
   37ee0:	4604      	mov	r4, r0
   37ee2:	9e06      	ldr	r6, [sp, #24]
   37ee4:	4296      	cmp	r6, r2
   37ee6:	460d      	mov	r5, r1
   37ee8:	d009      	beq.n	37efe <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x22>
   37eea:	68a0      	ldr	r0, [r4, #8]
   37eec:	6804      	ldr	r4, [r0, #0]
   37eee:	9606      	str	r6, [sp, #24]
   37ef0:	6a24      	ldr	r4, [r4, #32]
   37ef2:	4629      	mov	r1, r5
   37ef4:	46a4      	mov	ip, r4
   37ef6:	b002      	add	sp, #8
   37ef8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   37efc:	4760      	bx	ip
   37efe:	4619      	mov	r1, r3
   37f00:	9201      	str	r2, [sp, #4]
   37f02:	9300      	str	r3, [sp, #0]
   37f04:	f000 f87c 	bl	38000 <_ZNKSt9type_info7__equalERKS_>
   37f08:	e9dd 3200 	ldrd	r3, r2, [sp]
   37f0c:	2800      	cmp	r0, #0
   37f0e:	d0ec      	beq.n	37eea <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   37f10:	2006      	movs	r0, #6
   37f12:	b002      	add	sp, #8
   37f14:	bd70      	pop	{r4, r5, r6, pc}
   37f16:	bf00      	nop

00037f18 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   37f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37f1c:	460d      	mov	r5, r1
   37f1e:	b081      	sub	sp, #4
   37f20:	4619      	mov	r1, r3
   37f22:	e9dd 8b0a 	ldrd	r8, fp, [sp, #40]	@ 0x28
   37f26:	e9dd a90c 	ldrd	sl, r9, [sp, #48]	@ 0x30
   37f2a:	461c      	mov	r4, r3
   37f2c:	4607      	mov	r7, r0
   37f2e:	4616      	mov	r6, r2
   37f30:	f000 f866 	bl	38000 <_ZNKSt9type_info7__equalERKS_>
   37f34:	b980      	cbnz	r0, 37f58 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
   37f36:	45d0      	cmp	r8, sl
   37f38:	d027      	beq.n	37f8a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x72>
   37f3a:	68b8      	ldr	r0, [r7, #8]
   37f3c:	4623      	mov	r3, r4
   37f3e:	6804      	ldr	r4, [r0, #0]
   37f40:	e9cd a90c 	strd	sl, r9, [sp, #48]	@ 0x30
   37f44:	e9cd 8b0a 	strd	r8, fp, [sp, #40]	@ 0x28
   37f48:	69e4      	ldr	r4, [r4, #28]
   37f4a:	4632      	mov	r2, r6
   37f4c:	4629      	mov	r1, r5
   37f4e:	46a4      	mov	ip, r4
   37f50:	b001      	add	sp, #4
   37f52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37f56:	4760      	bx	ip
   37f58:	2d00      	cmp	r5, #0
   37f5a:	f8c9 8000 	str.w	r8, [r9]
   37f5e:	f889 6004 	strb.w	r6, [r9, #4]
   37f62:	db0c      	blt.n	37f7e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x66>
   37f64:	44a8      	add	r8, r5
   37f66:	45c2      	cmp	sl, r8
   37f68:	bf14      	ite	ne
   37f6a:	f04f 0801 	movne.w	r8, #1
   37f6e:	f04f 0806 	moveq.w	r8, #6
   37f72:	f889 8006 	strb.w	r8, [r9, #6]
   37f76:	2000      	movs	r0, #0
   37f78:	b001      	add	sp, #4
   37f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37f7e:	3502      	adds	r5, #2
   37f80:	d1f9      	bne.n	37f76 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e>
   37f82:	2301      	movs	r3, #1
   37f84:	f889 3006 	strb.w	r3, [r9, #6]
   37f88:	e7f5      	b.n	37f76 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e>
   37f8a:	4659      	mov	r1, fp
   37f8c:	4638      	mov	r0, r7
   37f8e:	f000 f837 	bl	38000 <_ZNKSt9type_info7__equalERKS_>
   37f92:	2800      	cmp	r0, #0
   37f94:	d0d1      	beq.n	37f3a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x22>
   37f96:	f889 6005 	strb.w	r6, [r9, #5]
   37f9a:	e7ec      	b.n	37f76 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e>

00037f9c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   37f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   37fa0:	4606      	mov	r6, r0
   37fa2:	460f      	mov	r7, r1
   37fa4:	4614      	mov	r4, r2
   37fa6:	461d      	mov	r5, r3
   37fa8:	f7ff fec6 	bl	37d38 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   37fac:	b948      	cbnz	r0, 37fc2 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   37fae:	68b0      	ldr	r0, [r6, #8]
   37fb0:	6801      	ldr	r1, [r0, #0]
   37fb2:	4622      	mov	r2, r4
   37fb4:	698c      	ldr	r4, [r1, #24]
   37fb6:	462b      	mov	r3, r5
   37fb8:	4639      	mov	r1, r7
   37fba:	46a4      	mov	ip, r4
   37fbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   37fc0:	4760      	bx	ip
   37fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   37fc6:	bf00      	nop

00037fc8 <_ZNSt9type_infoD1Ev>:
   37fc8:	4770      	bx	lr
   37fca:	bf00      	nop

00037fcc <_ZNKSt9type_info14__is_pointer_pEv>:
   37fcc:	2000      	movs	r0, #0
   37fce:	4770      	bx	lr

00037fd0 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
   37fd0:	2000      	movs	r0, #0
   37fd2:	4770      	bx	lr

00037fd4 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
   37fd4:	4288      	cmp	r0, r1
   37fd6:	d011      	beq.n	37ffc <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x28>
   37fd8:	b508      	push	{r3, lr}
   37fda:	6840      	ldr	r0, [r0, #4]
   37fdc:	7803      	ldrb	r3, [r0, #0]
   37fde:	2b2a      	cmp	r3, #42	@ 0x2a
   37fe0:	d00a      	beq.n	37ff8 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x24>
   37fe2:	6849      	ldr	r1, [r1, #4]
   37fe4:	780b      	ldrb	r3, [r1, #0]
   37fe6:	2b2a      	cmp	r3, #42	@ 0x2a
   37fe8:	bf08      	it	eq
   37fea:	3101      	addeq	r1, #1
   37fec:	f7e0 f908 	bl	18200 <strcmp>
   37ff0:	fab0 f080 	clz	r0, r0
   37ff4:	0940      	lsrs	r0, r0, #5
   37ff6:	bd08      	pop	{r3, pc}
   37ff8:	2000      	movs	r0, #0
   37ffa:	bd08      	pop	{r3, pc}
   37ffc:	2001      	movs	r0, #1
   37ffe:	4770      	bx	lr

00038000 <_ZNKSt9type_info7__equalERKS_>:
   38000:	4281      	cmp	r1, r0
   38002:	d011      	beq.n	38028 <_ZNKSt9type_info7__equalERKS_+0x28>
   38004:	b508      	push	{r3, lr}
   38006:	6840      	ldr	r0, [r0, #4]
   38008:	7803      	ldrb	r3, [r0, #0]
   3800a:	2b2a      	cmp	r3, #42	@ 0x2a
   3800c:	d00a      	beq.n	38024 <_ZNKSt9type_info7__equalERKS_+0x24>
   3800e:	6849      	ldr	r1, [r1, #4]
   38010:	780b      	ldrb	r3, [r1, #0]
   38012:	2b2a      	cmp	r3, #42	@ 0x2a
   38014:	bf08      	it	eq
   38016:	3101      	addeq	r1, #1
   38018:	f7e0 f8f2 	bl	18200 <strcmp>
   3801c:	fab0 f080 	clz	r0, r0
   38020:	0940      	lsrs	r0, r0, #5
   38022:	bd08      	pop	{r3, pc}
   38024:	2000      	movs	r0, #0
   38026:	bd08      	pop	{r3, pc}
   38028:	2001      	movs	r0, #1
   3802a:	4770      	bx	lr

0003802c <_ZSt19__throw_logic_errorPKc>:
   3802c:	b538      	push	{r3, r4, r5, lr}
   3802e:	4605      	mov	r5, r0
   38030:	2008      	movs	r0, #8
   38032:	f000 f8c3 	bl	381bc <__cxa_allocate_exception>
   38036:	4629      	mov	r1, r5
   38038:	4604      	mov	r4, r0
   3803a:	f000 ffc3 	bl	38fc4 <_ZNSt11logic_errorC1EPKc>
   3803e:	4a05      	ldr	r2, [pc, #20]	@ (38054 <_ZSt19__throw_logic_errorPKc+0x28>)
   38040:	4905      	ldr	r1, [pc, #20]	@ (38058 <_ZSt19__throw_logic_errorPKc+0x2c>)
   38042:	4620      	mov	r0, r4
   38044:	f000 fda4 	bl	38b90 <__cxa_throw>
   38048:	4620      	mov	r0, r4
   3804a:	f000 f8cf 	bl	381ec <__cxa_free_exception>
   3804e:	f000 f95d 	bl	3830c <__cxa_end_cleanup>
   38052:	bf00      	nop
   38054:	00038eb5 	.word	0x00038eb5
   38058:	0004c30c 	.word	0x0004c30c

0003805c <_ZSt20__throw_length_errorPKc>:
   3805c:	b538      	push	{r3, r4, r5, lr}
   3805e:	4605      	mov	r5, r0
   38060:	2008      	movs	r0, #8
   38062:	f000 f8ab 	bl	381bc <__cxa_allocate_exception>
   38066:	4629      	mov	r1, r5
   38068:	4604      	mov	r4, r0
   3806a:	f000 ffeb 	bl	39044 <_ZNSt12length_errorC1EPKc>
   3806e:	4a05      	ldr	r2, [pc, #20]	@ (38084 <_ZSt20__throw_length_errorPKc+0x28>)
   38070:	4905      	ldr	r1, [pc, #20]	@ (38088 <_ZSt20__throw_length_errorPKc+0x2c>)
   38072:	4620      	mov	r0, r4
   38074:	f000 fd8c 	bl	38b90 <__cxa_throw>
   38078:	4620      	mov	r0, r4
   3807a:	f000 f8b7 	bl	381ec <__cxa_free_exception>
   3807e:	f000 f945 	bl	3830c <__cxa_end_cleanup>
   38082:	bf00      	nop
   38084:	00038ef5 	.word	0x00038ef5
   38088:	0004c32c 	.word	0x0004c32c

0003808c <_ZNKSt17bad_function_call4whatEv>:
   3808c:	4800      	ldr	r0, [pc, #0]	@ (38090 <_ZNKSt17bad_function_call4whatEv+0x4>)
   3808e:	4770      	bx	lr
   38090:	000440a8 	.word	0x000440a8

00038094 <_ZNSt17bad_function_callD1Ev>:
   38094:	b510      	push	{r4, lr}
   38096:	4b03      	ldr	r3, [pc, #12]	@ (380a4 <_ZNSt17bad_function_callD1Ev+0x10>)
   38098:	6003      	str	r3, [r0, #0]
   3809a:	4604      	mov	r4, r0
   3809c:	f000 f9fe 	bl	3849c <_ZNSt9exceptionD1Ev>
   380a0:	4620      	mov	r0, r4
   380a2:	bd10      	pop	{r4, pc}
   380a4:	0004c148 	.word	0x0004c148

000380a8 <_ZNSt17bad_function_callD0Ev>:
   380a8:	b510      	push	{r4, lr}
   380aa:	4b05      	ldr	r3, [pc, #20]	@ (380c0 <_ZNSt17bad_function_callD0Ev+0x18>)
   380ac:	6003      	str	r3, [r0, #0]
   380ae:	4604      	mov	r4, r0
   380b0:	f000 f9f4 	bl	3849c <_ZNSt9exceptionD1Ev>
   380b4:	4620      	mov	r0, r4
   380b6:	f7fd f9b9 	bl	3542c <_ZdlPv>
   380ba:	4620      	mov	r0, r4
   380bc:	bd10      	pop	{r4, pc}
   380be:	bf00      	nop
   380c0:	0004c148 	.word	0x0004c148

000380c4 <_ZSt25__throw_bad_function_callv>:
   380c4:	b508      	push	{r3, lr}
   380c6:	2004      	movs	r0, #4
   380c8:	f000 f878 	bl	381bc <__cxa_allocate_exception>
   380cc:	4b02      	ldr	r3, [pc, #8]	@ (380d8 <_ZSt25__throw_bad_function_callv+0x14>)
   380ce:	4a03      	ldr	r2, [pc, #12]	@ (380dc <_ZSt25__throw_bad_function_callv+0x18>)
   380d0:	4903      	ldr	r1, [pc, #12]	@ (380e0 <_ZSt25__throw_bad_function_callv+0x1c>)
   380d2:	6003      	str	r3, [r0, #0]
   380d4:	f000 fd5c 	bl	38b90 <__cxa_throw>
   380d8:	0004c148 	.word	0x0004c148
   380dc:	00038095 	.word	0x00038095
   380e0:	0004c134 	.word	0x0004c134

000380e4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>:
   380e4:	491e      	ldr	r1, [pc, #120]	@ (38160 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x7c>)
   380e6:	684b      	ldr	r3, [r1, #4]
   380e8:	b530      	push	{r4, r5, lr}
   380ea:	f850 5c08 	ldr.w	r5, [r0, #-8]
   380ee:	f1a0 0408 	sub.w	r4, r0, #8
   380f2:	b32b      	cbz	r3, 38140 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x5c>
   380f4:	eb04 0e05 	add.w	lr, r4, r5
   380f8:	4573      	cmp	r3, lr
   380fa:	d821      	bhi.n	38140 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x5c>
   380fc:	685a      	ldr	r2, [r3, #4]
   380fe:	d026      	beq.n	3814e <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x6a>
   38100:	f101 0c04 	add.w	ip, r1, #4
   38104:	b932      	cbnz	r2, 38114 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x30>
   38106:	e00e      	b.n	38126 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x42>
   38108:	6851      	ldr	r1, [r2, #4]
   3810a:	f103 0c04 	add.w	ip, r3, #4
   3810e:	4613      	mov	r3, r2
   38110:	b139      	cbz	r1, 38122 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x3e>
   38112:	460a      	mov	r2, r1
   38114:	4596      	cmp	lr, r2
   38116:	d8f7      	bhi.n	38108 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x24>
   38118:	bf02      	ittt	eq
   3811a:	e9de 2100 	ldrdeq	r2, r1, [lr]
   3811e:	6059      	streq	r1, [r3, #4]
   38120:	18ad      	addeq	r5, r5, r2
   38122:	f8dc 3000 	ldr.w	r3, [ip]
   38126:	681a      	ldr	r2, [r3, #0]
   38128:	1899      	adds	r1, r3, r2
   3812a:	428c      	cmp	r4, r1
   3812c:	d00c      	beq.n	38148 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x64>
   3812e:	685b      	ldr	r3, [r3, #4]
   38130:	f840 3c04 	str.w	r3, [r0, #-4]
   38134:	f8dc 3000 	ldr.w	r3, [ip]
   38138:	f840 5c08 	str.w	r5, [r0, #-8]
   3813c:	605c      	str	r4, [r3, #4]
   3813e:	bd30      	pop	{r4, r5, pc}
   38140:	f840 3c04 	str.w	r3, [r0, #-4]
   38144:	604c      	str	r4, [r1, #4]
   38146:	bd30      	pop	{r4, r5, pc}
   38148:	442a      	add	r2, r5
   3814a:	601a      	str	r2, [r3, #0]
   3814c:	bd30      	pop	{r4, r5, pc}
   3814e:	681b      	ldr	r3, [r3, #0]
   38150:	f840 2c04 	str.w	r2, [r0, #-4]
   38154:	442b      	add	r3, r5
   38156:	f840 3c08 	str.w	r3, [r0, #-8]
   3815a:	604c      	str	r4, [r1, #4]
   3815c:	bd30      	pop	{r4, r5, pc}
   3815e:	bf00      	nop
   38160:	10053828 	.word	0x10053828

00038164 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>:
   38164:	4914      	ldr	r1, [pc, #80]	@ (381b8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x54>)
   38166:	f100 0308 	add.w	r3, r0, #8
   3816a:	6848      	ldr	r0, [r1, #4]
   3816c:	2b08      	cmp	r3, #8
   3816e:	bf38      	it	cc
   38170:	2308      	movcc	r3, #8
   38172:	b1f8      	cbz	r0, 381b4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x50>
   38174:	3307      	adds	r3, #7
   38176:	f023 0307 	bic.w	r3, r3, #7
   3817a:	3104      	adds	r1, #4
   3817c:	e002      	b.n	38184 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x20>
   3817e:	1d01      	adds	r1, r0, #4
   38180:	6840      	ldr	r0, [r0, #4]
   38182:	b180      	cbz	r0, 381a6 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x42>
   38184:	6802      	ldr	r2, [r0, #0]
   38186:	4293      	cmp	r3, r2
   38188:	d8f9      	bhi.n	3817e <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x1a>
   3818a:	b430      	push	{r4, r5}
   3818c:	1ad4      	subs	r4, r2, r3
   3818e:	2c07      	cmp	r4, #7
   38190:	6845      	ldr	r5, [r0, #4]
   38192:	d909      	bls.n	381a8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x44>
   38194:	18c2      	adds	r2, r0, r3
   38196:	6055      	str	r5, [r2, #4]
   38198:	50c4      	str	r4, [r0, r3]
   3819a:	6808      	ldr	r0, [r1, #0]
   3819c:	bc30      	pop	{r4, r5}
   3819e:	6003      	str	r3, [r0, #0]
   381a0:	3008      	adds	r0, #8
   381a2:	600a      	str	r2, [r1, #0]
   381a4:	4770      	bx	lr
   381a6:	4770      	bx	lr
   381a8:	6002      	str	r2, [r0, #0]
   381aa:	462a      	mov	r2, r5
   381ac:	3008      	adds	r0, #8
   381ae:	bc30      	pop	{r4, r5}
   381b0:	600a      	str	r2, [r1, #0]
   381b2:	4770      	bx	lr
   381b4:	4770      	bx	lr
   381b6:	bf00      	nop
   381b8:	10053828 	.word	0x10053828

000381bc <__cxa_allocate_exception>:
   381bc:	b510      	push	{r4, lr}
   381be:	f100 0480 	add.w	r4, r0, #128	@ 0x80
   381c2:	4620      	mov	r0, r4
   381c4:	f007 fb60 	bl	3f888 <malloc>
   381c8:	4603      	mov	r3, r0
   381ca:	b130      	cbz	r0, 381da <__cxa_allocate_exception+0x1e>
   381cc:	2280      	movs	r2, #128	@ 0x80
   381ce:	2100      	movs	r1, #0
   381d0:	4618      	mov	r0, r3
   381d2:	f7ee fe83 	bl	26edc <memset>
   381d6:	3080      	adds	r0, #128	@ 0x80
   381d8:	bd10      	pop	{r4, pc}
   381da:	4620      	mov	r0, r4
   381dc:	f7ff ffc2 	bl	38164 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>
   381e0:	4603      	mov	r3, r0
   381e2:	2800      	cmp	r0, #0
   381e4:	d1f2      	bne.n	381cc <__cxa_allocate_exception+0x10>
   381e6:	f000 fc67 	bl	38ab8 <_ZSt9terminatev>
   381ea:	bf00      	nop

000381ec <__cxa_free_exception>:
   381ec:	4b06      	ldr	r3, [pc, #24]	@ (38208 <__cxa_free_exception+0x1c>)
   381ee:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   381f2:	3880      	subs	r0, #128	@ 0x80
   381f4:	4413      	add	r3, r2
   381f6:	4298      	cmp	r0, r3
   381f8:	d203      	bcs.n	38202 <__cxa_free_exception+0x16>
   381fa:	4282      	cmp	r2, r0
   381fc:	d201      	bcs.n	38202 <__cxa_free_exception+0x16>
   381fe:	f7ff bf71 	b.w	380e4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
   38202:	f007 bb49 	b.w	3f898 <free>
   38206:	bf00      	nop
   38208:	10053828 	.word	0x10053828

0003820c <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
   3820c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   38210:	4d39      	ldr	r5, [pc, #228]	@ (382f8 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0xec>)
   38212:	483a      	ldr	r0, [pc, #232]	@ (382fc <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0xf0>)
   38214:	b088      	sub	sp, #32
   38216:	2600      	movs	r6, #0
   38218:	e9c5 6601 	strd	r6, r6, [r5, #4]
   3821c:	60ee      	str	r6, [r5, #12]
   3821e:	f007 fb25 	bl	3f86c <getenv>
   38222:	4b37      	ldr	r3, [pc, #220]	@ (38300 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0xf4>)
   38224:	4a37      	ldr	r2, [pc, #220]	@ (38304 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0xf8>)
   38226:	2108      	movs	r1, #8
   38228:	e9cd 1302 	strd	r1, r3, [sp, #8]
   3822c:	2309      	movs	r3, #9
   3822e:	e9cd 6304 	strd	r6, r3, [sp, #16]
   38232:	2304      	movs	r3, #4
   38234:	e9cd 2306 	strd	r2, r3, [sp, #24]
   38238:	2800      	cmp	r0, #0
   3823a:	d03c      	beq.n	382b6 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0xaa>
   3823c:	4e32      	ldr	r6, [pc, #200]	@ (38308 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0xfc>)
   3823e:	4604      	mov	r4, r0
   38240:	7823      	ldrb	r3, [r4, #0]
   38242:	2b3a      	cmp	r3, #58	@ 0x3a
   38244:	bf08      	it	eq
   38246:	3401      	addeq	r4, #1
   38248:	220f      	movs	r2, #15
   3824a:	4621      	mov	r1, r4
   3824c:	4630      	mov	r0, r6
   3824e:	f7ee fd29 	bl	26ca4 <memcmp>
   38252:	b910      	cbnz	r0, 3825a <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x4e>
   38254:	7be3      	ldrb	r3, [r4, #15]
   38256:	2b2e      	cmp	r3, #46	@ 0x2e
   38258:	d017      	beq.n	3828a <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x7e>
   3825a:	4620      	mov	r0, r4
   3825c:	213a      	movs	r1, #58	@ 0x3a
   3825e:	f7f1 fd31 	bl	29cc4 <strchr>
   38262:	4604      	mov	r4, r0
   38264:	2800      	cmp	r0, #0
   38266:	d1eb      	bne.n	38240 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x34>
   38268:	9a07      	ldr	r2, [sp, #28]
   3826a:	9c04      	ldr	r4, [sp, #16]
   3826c:	2a40      	cmp	r2, #64	@ 0x40
   3826e:	bfa8      	it	ge
   38270:	2240      	movge	r2, #64	@ 0x40
   38272:	2c00      	cmp	r4, #0
   38274:	bf08      	it	eq
   38276:	2406      	moveq	r4, #6
   38278:	343e      	adds	r4, #62	@ 0x3e
   3827a:	fb02 f404 	mul.w	r4, r2, r4
   3827e:	00a4      	lsls	r4, r4, #2
   38280:	60ec      	str	r4, [r5, #12]
   38282:	b9dc      	cbnz	r4, 382bc <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0xb0>
   38284:	b008      	add	sp, #32
   38286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3828a:	3410      	adds	r4, #16
   3828c:	af02      	add	r7, sp, #8
   3828e:	f8d7 8000 	ldr.w	r8, [r7]
   38292:	6878      	ldr	r0, [r7, #4]
   38294:	4621      	mov	r1, r4
   38296:	4642      	mov	r2, r8
   38298:	f1b8 0f00 	cmp.w	r8, #0
   3829c:	d002      	beq.n	382a4 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x98>
   3829e:	f7ee fd01 	bl	26ca4 <memcmp>
   382a2:	b918      	cbnz	r0, 382ac <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0xa0>
   382a4:	f814 3008 	ldrb.w	r3, [r4, r8]
   382a8:	2b3d      	cmp	r3, #61	@ 0x3d
   382aa:	d011      	beq.n	382d0 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0xc4>
   382ac:	370c      	adds	r7, #12
   382ae:	ab08      	add	r3, sp, #32
   382b0:	429f      	cmp	r7, r3
   382b2:	d1ec      	bne.n	3828e <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x82>
   382b4:	e7d1      	b.n	3825a <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x4e>
   382b6:	f44f 6488 	mov.w	r4, #1088	@ 0x440
   382ba:	60ec      	str	r4, [r5, #12]
   382bc:	4620      	mov	r0, r4
   382be:	f007 fae3 	bl	3f888 <malloc>
   382c2:	60a8      	str	r0, [r5, #8]
   382c4:	b1a8      	cbz	r0, 382f2 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0xe6>
   382c6:	2300      	movs	r3, #0
   382c8:	e9c0 4300 	strd	r4, r3, [r0]
   382cc:	6068      	str	r0, [r5, #4]
   382ce:	e7d9      	b.n	38284 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x78>
   382d0:	f108 0001 	add.w	r0, r8, #1
   382d4:	4420      	add	r0, r4
   382d6:	2200      	movs	r2, #0
   382d8:	a901      	add	r1, sp, #4
   382da:	f007 fb8b 	bl	3f9f4 <strtoul>
   382de:	9c01      	ldr	r4, [sp, #4]
   382e0:	7823      	ldrb	r3, [r4, #0]
   382e2:	2b3a      	cmp	r3, #58	@ 0x3a
   382e4:	d001      	beq.n	382ea <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0xde>
   382e6:	2b00      	cmp	r3, #0
   382e8:	d1b7      	bne.n	3825a <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x4e>
   382ea:	2800      	cmp	r0, #0
   382ec:	bfa8      	it	ge
   382ee:	60b8      	strge	r0, [r7, #8]
   382f0:	e7b3      	b.n	3825a <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x4e>
   382f2:	60e8      	str	r0, [r5, #12]
   382f4:	e7c6      	b.n	38284 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x78>
   382f6:	bf00      	nop
   382f8:	10053828 	.word	0x10053828
   382fc:	000440bc 	.word	0x000440bc
   38300:	000440d0 	.word	0x000440d0
   38304:	000440dc 	.word	0x000440dc
   38308:	000440e8 	.word	0x000440e8

0003830c <__cxa_end_cleanup>:
   3830c:	b41e      	push	{r1, r2, r3, r4}
   3830e:	f000 f88d 	bl	3842c <__gnu_end_cleanup>
   38312:	bc1e      	pop	{r1, r2, r3, r4}
   38314:	f7e1 f83c 	bl	19390 <_Unwind_Resume>

00038318 <__cxa_type_match>:
   38318:	b5f0      	push	{r4, r5, r6, r7, lr}
   3831a:	7802      	ldrb	r2, [r0, #0]
   3831c:	2a47      	cmp	r2, #71	@ 0x47
   3831e:	b083      	sub	sp, #12
   38320:	460c      	mov	r4, r1
   38322:	461d      	mov	r5, r3
   38324:	d019      	beq.n	3835a <__cxa_type_match+0x42>
   38326:	4e26      	ldr	r6, [pc, #152]	@ (383c0 <__cxa_type_match+0xa8>)
   38328:	2000      	movs	r0, #0
   3832a:	6833      	ldr	r3, [r6, #0]
   3832c:	9001      	str	r0, [sp, #4]
   3832e:	689b      	ldr	r3, [r3, #8]
   38330:	4630      	mov	r0, r6
   38332:	4798      	blx	r3
   38334:	b178      	cbz	r0, 38356 <__cxa_type_match+0x3e>
   38336:	9b01      	ldr	r3, [sp, #4]
   38338:	681b      	ldr	r3, [r3, #0]
   3833a:	9301      	str	r3, [sp, #4]
   3833c:	2702      	movs	r7, #2
   3833e:	6823      	ldr	r3, [r4, #0]
   38340:	4631      	mov	r1, r6
   38342:	4620      	mov	r0, r4
   38344:	691e      	ldr	r6, [r3, #16]
   38346:	aa01      	add	r2, sp, #4
   38348:	2301      	movs	r3, #1
   3834a:	47b0      	blx	r6
   3834c:	bb38      	cbnz	r0, 3839e <__cxa_type_match+0x86>
   3834e:	4607      	mov	r7, r0
   38350:	4638      	mov	r0, r7
   38352:	b003      	add	sp, #12
   38354:	bdf0      	pop	{r4, r5, r6, r7, pc}
   38356:	2701      	movs	r7, #1
   38358:	e7f1      	b.n	3833e <__cxa_type_match+0x26>
   3835a:	7843      	ldrb	r3, [r0, #1]
   3835c:	2b4e      	cmp	r3, #78	@ 0x4e
   3835e:	d1e2      	bne.n	38326 <__cxa_type_match+0xe>
   38360:	7883      	ldrb	r3, [r0, #2]
   38362:	2b55      	cmp	r3, #85	@ 0x55
   38364:	d1df      	bne.n	38326 <__cxa_type_match+0xe>
   38366:	78c3      	ldrb	r3, [r0, #3]
   38368:	2b43      	cmp	r3, #67	@ 0x43
   3836a:	d1dc      	bne.n	38326 <__cxa_type_match+0xe>
   3836c:	7903      	ldrb	r3, [r0, #4]
   3836e:	2b46      	cmp	r3, #70	@ 0x46
   38370:	d01a      	beq.n	383a8 <__cxa_type_match+0x90>
   38372:	2b43      	cmp	r3, #67	@ 0x43
   38374:	d1d7      	bne.n	38326 <__cxa_type_match+0xe>
   38376:	7943      	ldrb	r3, [r0, #5]
   38378:	2b2b      	cmp	r3, #43	@ 0x2b
   3837a:	d1d4      	bne.n	38326 <__cxa_type_match+0xe>
   3837c:	7983      	ldrb	r3, [r0, #6]
   3837e:	2b2b      	cmp	r3, #43	@ 0x2b
   38380:	d1d1      	bne.n	38326 <__cxa_type_match+0xe>
   38382:	79c3      	ldrb	r3, [r0, #7]
   38384:	2b01      	cmp	r3, #1
   38386:	d8ce      	bhi.n	38326 <__cxa_type_match+0xe>
   38388:	f850 6c20 	ldr.w	r6, [r0, #-32]
   3838c:	f04f 0300 	mov.w	r3, #0
   38390:	9301      	str	r3, [sp, #4]
   38392:	bf0a      	itet	eq
   38394:	4630      	moveq	r0, r6
   38396:	3058      	addne	r0, #88	@ 0x58
   38398:	f856 6c78 	ldreq.w	r6, [r6, #-120]
   3839c:	e7c5      	b.n	3832a <__cxa_type_match+0x12>
   3839e:	9b01      	ldr	r3, [sp, #4]
   383a0:	602b      	str	r3, [r5, #0]
   383a2:	4638      	mov	r0, r7
   383a4:	b003      	add	sp, #12
   383a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   383a8:	7943      	ldrb	r3, [r0, #5]
   383aa:	2b4f      	cmp	r3, #79	@ 0x4f
   383ac:	d1bb      	bne.n	38326 <__cxa_type_match+0xe>
   383ae:	7983      	ldrb	r3, [r0, #6]
   383b0:	2b52      	cmp	r3, #82	@ 0x52
   383b2:	d1b8      	bne.n	38326 <__cxa_type_match+0xe>
   383b4:	79c0      	ldrb	r0, [r0, #7]
   383b6:	2800      	cmp	r0, #0
   383b8:	d1b5      	bne.n	38326 <__cxa_type_match+0xe>
   383ba:	4e02      	ldr	r6, [pc, #8]	@ (383c4 <__cxa_type_match+0xac>)
   383bc:	e7b5      	b.n	3832a <__cxa_type_match+0x12>
   383be:	bf00      	nop
   383c0:	0004c1d8 	.word	0x0004c1d8
   383c4:	0004c1ac 	.word	0x0004c1ac

000383c8 <__cxa_begin_cleanup>:
   383c8:	b510      	push	{r4, lr}
   383ca:	4604      	mov	r4, r0
   383cc:	f000 f87e 	bl	384cc <__cxa_get_globals>
   383d0:	4622      	mov	r2, r4
   383d2:	f812 3920 	ldrb.w	r3, [r2], #-32
   383d6:	2b47      	cmp	r3, #71	@ 0x47
   383d8:	d004      	beq.n	383e4 <__cxa_begin_cleanup+0x1c>
   383da:	6883      	ldr	r3, [r0, #8]
   383dc:	bb23      	cbnz	r3, 38428 <__cxa_begin_cleanup+0x60>
   383de:	6082      	str	r2, [r0, #8]
   383e0:	2001      	movs	r0, #1
   383e2:	bd10      	pop	{r4, pc}
   383e4:	7863      	ldrb	r3, [r4, #1]
   383e6:	2b4e      	cmp	r3, #78	@ 0x4e
   383e8:	d1f7      	bne.n	383da <__cxa_begin_cleanup+0x12>
   383ea:	78a3      	ldrb	r3, [r4, #2]
   383ec:	2b55      	cmp	r3, #85	@ 0x55
   383ee:	d1f4      	bne.n	383da <__cxa_begin_cleanup+0x12>
   383f0:	78e3      	ldrb	r3, [r4, #3]
   383f2:	2b43      	cmp	r3, #67	@ 0x43
   383f4:	d1f1      	bne.n	383da <__cxa_begin_cleanup+0x12>
   383f6:	7923      	ldrb	r3, [r4, #4]
   383f8:	2b43      	cmp	r3, #67	@ 0x43
   383fa:	d1ee      	bne.n	383da <__cxa_begin_cleanup+0x12>
   383fc:	7963      	ldrb	r3, [r4, #5]
   383fe:	2b2b      	cmp	r3, #43	@ 0x2b
   38400:	d1eb      	bne.n	383da <__cxa_begin_cleanup+0x12>
   38402:	79a3      	ldrb	r3, [r4, #6]
   38404:	2b2b      	cmp	r3, #43	@ 0x2b
   38406:	d1e8      	bne.n	383da <__cxa_begin_cleanup+0x12>
   38408:	79e3      	ldrb	r3, [r4, #7]
   3840a:	2b01      	cmp	r3, #1
   3840c:	d8e5      	bhi.n	383da <__cxa_begin_cleanup+0x12>
   3840e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   38412:	3301      	adds	r3, #1
   38414:	2b01      	cmp	r3, #1
   38416:	f844 3c04 	str.w	r3, [r4, #-4]
   3841a:	d1e1      	bne.n	383e0 <__cxa_begin_cleanup+0x18>
   3841c:	6883      	ldr	r3, [r0, #8]
   3841e:	f844 3c08 	str.w	r3, [r4, #-8]
   38422:	6082      	str	r2, [r0, #8]
   38424:	2001      	movs	r0, #1
   38426:	bd10      	pop	{r4, pc}
   38428:	f000 fb46 	bl	38ab8 <_ZSt9terminatev>

0003842c <__gnu_end_cleanup>:
   3842c:	b508      	push	{r3, lr}
   3842e:	f000 f84d 	bl	384cc <__cxa_get_globals>
   38432:	6883      	ldr	r3, [r0, #8]
   38434:	b383      	cbz	r3, 38498 <__gnu_end_cleanup+0x6c>
   38436:	f893 2020 	ldrb.w	r2, [r3, #32]
   3843a:	2a47      	cmp	r2, #71	@ 0x47
   3843c:	d004      	beq.n	38448 <__gnu_end_cleanup+0x1c>
   3843e:	2200      	movs	r2, #0
   38440:	6082      	str	r2, [r0, #8]
   38442:	f103 0020 	add.w	r0, r3, #32
   38446:	bd08      	pop	{r3, pc}
   38448:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
   3844c:	2a4e      	cmp	r2, #78	@ 0x4e
   3844e:	d1f6      	bne.n	3843e <__gnu_end_cleanup+0x12>
   38450:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
   38454:	2a55      	cmp	r2, #85	@ 0x55
   38456:	d1f2      	bne.n	3843e <__gnu_end_cleanup+0x12>
   38458:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
   3845c:	2a43      	cmp	r2, #67	@ 0x43
   3845e:	d1ee      	bne.n	3843e <__gnu_end_cleanup+0x12>
   38460:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
   38464:	2a43      	cmp	r2, #67	@ 0x43
   38466:	d1ea      	bne.n	3843e <__gnu_end_cleanup+0x12>
   38468:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
   3846c:	2a2b      	cmp	r2, #43	@ 0x2b
   3846e:	d1e6      	bne.n	3843e <__gnu_end_cleanup+0x12>
   38470:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
   38474:	2a2b      	cmp	r2, #43	@ 0x2b
   38476:	d1e2      	bne.n	3843e <__gnu_end_cleanup+0x12>
   38478:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
   3847c:	2a01      	cmp	r2, #1
   3847e:	d8de      	bhi.n	3843e <__gnu_end_cleanup+0x12>
   38480:	69da      	ldr	r2, [r3, #28]
   38482:	3a01      	subs	r2, #1
   38484:	61da      	str	r2, [r3, #28]
   38486:	2a00      	cmp	r2, #0
   38488:	d1db      	bne.n	38442 <__gnu_end_cleanup+0x16>
   3848a:	6999      	ldr	r1, [r3, #24]
   3848c:	6081      	str	r1, [r0, #8]
   3848e:	2200      	movs	r2, #0
   38490:	619a      	str	r2, [r3, #24]
   38492:	f103 0020 	add.w	r0, r3, #32
   38496:	bd08      	pop	{r3, pc}
   38498:	f000 fb0e 	bl	38ab8 <_ZSt9terminatev>

0003849c <_ZNSt9exceptionD1Ev>:
   3849c:	4770      	bx	lr
   3849e:	bf00      	nop

000384a0 <_ZNSt13bad_exceptionD1Ev>:
   384a0:	4770      	bx	lr
   384a2:	bf00      	nop

000384a4 <_ZGTtNKSt9exception4whatEv>:
   384a4:	4800      	ldr	r0, [pc, #0]	@ (384a8 <_ZGTtNKSt9exception4whatEv+0x4>)
   384a6:	4770      	bx	lr
   384a8:	000440f8 	.word	0x000440f8

000384ac <_ZGTtNKSt13bad_exception4whatEv>:
   384ac:	4800      	ldr	r0, [pc, #0]	@ (384b0 <_ZGTtNKSt13bad_exception4whatEv+0x4>)
   384ae:	4770      	bx	lr
   384b0:	00044108 	.word	0x00044108

000384b4 <_ZNSt13bad_exceptionD0Ev>:
   384b4:	b510      	push	{r4, lr}
   384b6:	2104      	movs	r1, #4
   384b8:	4604      	mov	r4, r0
   384ba:	f7fc ffb9 	bl	35430 <_ZdlPvj>
   384be:	4620      	mov	r0, r4
   384c0:	bd10      	pop	{r4, pc}
   384c2:	bf00      	nop

000384c4 <__cxa_get_globals_fast>:
   384c4:	4800      	ldr	r0, [pc, #0]	@ (384c8 <__cxa_get_globals_fast+0x4>)
   384c6:	4770      	bx	lr
   384c8:	10053838 	.word	0x10053838

000384cc <__cxa_get_globals>:
   384cc:	4800      	ldr	r0, [pc, #0]	@ (384d0 <__cxa_get_globals+0x4>)
   384ce:	4770      	bx	lr
   384d0:	10053838 	.word	0x10053838

000384d4 <_ZL28read_encoded_value_with_basehjPKhPj>:
   384d4:	2850      	cmp	r0, #80	@ 0x50
   384d6:	b570      	push	{r4, r5, r6, lr}
   384d8:	d01d      	beq.n	38516 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
   384da:	4684      	mov	ip, r0
   384dc:	f000 000f 	and.w	r0, r0, #15
   384e0:	280c      	cmp	r0, #12
   384e2:	d855      	bhi.n	38590 <_ZL28read_encoded_value_with_basehjPKhPj+0xbc>
   384e4:	e8df f000 	tbb	[pc, r0]
   384e8:	07264407 	.word	0x07264407
   384ec:	5454541e 	.word	0x5454541e
   384f0:	07222a54 	.word	0x07222a54
   384f4:	1e          	.byte	0x1e
   384f5:	00          	.byte	0x00
   384f6:	4610      	mov	r0, r2
   384f8:	f850 6b04 	ldr.w	r6, [r0], #4
   384fc:	b14e      	cbz	r6, 38512 <_ZL28read_encoded_value_with_basehjPKhPj+0x3e>
   384fe:	f00c 0470 	and.w	r4, ip, #112	@ 0x70
   38502:	2c10      	cmp	r4, #16
   38504:	bf08      	it	eq
   38506:	4611      	moveq	r1, r2
   38508:	440e      	add	r6, r1
   3850a:	f01c 0f80 	tst.w	ip, #128	@ 0x80
   3850e:	bf18      	it	ne
   38510:	6836      	ldrne	r6, [r6, #0]
   38512:	601e      	str	r6, [r3, #0]
   38514:	bd70      	pop	{r4, r5, r6, pc}
   38516:	1cd0      	adds	r0, r2, #3
   38518:	f020 0003 	bic.w	r0, r0, #3
   3851c:	f850 6b04 	ldr.w	r6, [r0], #4
   38520:	601e      	str	r6, [r3, #0]
   38522:	bd70      	pop	{r4, r5, r6, pc}
   38524:	4610      	mov	r0, r2
   38526:	f850 6b08 	ldr.w	r6, [r0], #8
   3852a:	e7e7      	b.n	384fc <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
   3852c:	4610      	mov	r0, r2
   3852e:	f930 6b02 	ldrsh.w	r6, [r0], #2
   38532:	e7e3      	b.n	384fc <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
   38534:	4610      	mov	r0, r2
   38536:	f830 6b02 	ldrh.w	r6, [r0], #2
   3853a:	e7df      	b.n	384fc <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
   3853c:	2600      	movs	r6, #0
   3853e:	4610      	mov	r0, r2
   38540:	4634      	mov	r4, r6
   38542:	f810 5b01 	ldrb.w	r5, [r0], #1
   38546:	f005 0e7f 	and.w	lr, r5, #127	@ 0x7f
   3854a:	fa0e fe04 	lsl.w	lr, lr, r4
   3854e:	f015 0f80 	tst.w	r5, #128	@ 0x80
   38552:	ea46 060e 	orr.w	r6, r6, lr
   38556:	f104 0407 	add.w	r4, r4, #7
   3855a:	d1f2      	bne.n	38542 <_ZL28read_encoded_value_with_basehjPKhPj+0x6e>
   3855c:	2c1f      	cmp	r4, #31
   3855e:	d8cd      	bhi.n	384fc <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
   38560:	066d      	lsls	r5, r5, #25
   38562:	d5cb      	bpl.n	384fc <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
   38564:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
   38568:	fa05 f404 	lsl.w	r4, r5, r4
   3856c:	4326      	orrs	r6, r4
   3856e:	e7c6      	b.n	384fe <_ZL28read_encoded_value_with_basehjPKhPj+0x2a>
   38570:	2600      	movs	r6, #0
   38572:	4610      	mov	r0, r2
   38574:	4634      	mov	r4, r6
   38576:	f810 5b01 	ldrb.w	r5, [r0], #1
   3857a:	f005 0e7f 	and.w	lr, r5, #127	@ 0x7f
   3857e:	fa0e fe04 	lsl.w	lr, lr, r4
   38582:	062d      	lsls	r5, r5, #24
   38584:	ea46 060e 	orr.w	r6, r6, lr
   38588:	f104 0407 	add.w	r4, r4, #7
   3858c:	d4f3      	bmi.n	38576 <_ZL28read_encoded_value_with_basehjPKhPj+0xa2>
   3858e:	e7b5      	b.n	384fc <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
   38590:	f7ec fef6 	bl	25380 <abort>

00038594 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
   38594:	28ff      	cmp	r0, #255	@ 0xff
   38596:	b508      	push	{r3, lr}
   38598:	4603      	mov	r3, r0
   3859a:	d012      	beq.n	385c2 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2e>
   3859c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
   385a0:	2b30      	cmp	r3, #48	@ 0x30
   385a2:	4608      	mov	r0, r1
   385a4:	d013      	beq.n	385ce <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3a>
   385a6:	d805      	bhi.n	385b4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   385a8:	2b20      	cmp	r3, #32
   385aa:	d109      	bne.n	385c0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
   385ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   385b0:	f008 ba67 	b.w	40a82 <_Unwind_GetTextRelBase>
   385b4:	2b40      	cmp	r3, #64	@ 0x40
   385b6:	d106      	bne.n	385c6 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x32>
   385b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   385bc:	f008 ba4e 	b.w	40a5c <_Unwind_GetRegionStart>
   385c0:	d803      	bhi.n	385ca <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x36>
   385c2:	2000      	movs	r0, #0
   385c4:	bd08      	pop	{r3, pc}
   385c6:	2b50      	cmp	r3, #80	@ 0x50
   385c8:	d0fb      	beq.n	385c2 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2e>
   385ca:	f7ec fed9 	bl	25380 <abort>
   385ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   385d2:	f008 ba53 	b.w	40a7c <_Unwind_GetDataRelBase>
   385d6:	bf00      	nop

000385d8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
   385d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   385da:	460c      	mov	r4, r1
   385dc:	4615      	mov	r5, r2
   385de:	4606      	mov	r6, r0
   385e0:	b108      	cbz	r0, 385e6 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
   385e2:	f008 fa3b 	bl	40a5c <_Unwind_GetRegionStart>
   385e6:	6028      	str	r0, [r5, #0]
   385e8:	f814 7b01 	ldrb.w	r7, [r4], #1
   385ec:	2fff      	cmp	r7, #255	@ 0xff
   385ee:	d128      	bne.n	38642 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x6a>
   385f0:	6068      	str	r0, [r5, #4]
   385f2:	4620      	mov	r0, r4
   385f4:	f810 3b01 	ldrb.w	r3, [r0], #1
   385f8:	2bff      	cmp	r3, #255	@ 0xff
   385fa:	d032      	beq.n	38662 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x8a>
   385fc:	2310      	movs	r3, #16
   385fe:	2400      	movs	r4, #0
   38600:	752b      	strb	r3, [r5, #20]
   38602:	4622      	mov	r2, r4
   38604:	f810 1b01 	ldrb.w	r1, [r0], #1
   38608:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
   3860c:	4093      	lsls	r3, r2
   3860e:	0609      	lsls	r1, r1, #24
   38610:	ea44 0403 	orr.w	r4, r4, r3
   38614:	f102 0207 	add.w	r2, r2, #7
   38618:	d4f4      	bmi.n	38604 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x2c>
   3861a:	4404      	add	r4, r0
   3861c:	60ec      	str	r4, [r5, #12]
   3861e:	f810 3b01 	ldrb.w	r3, [r0], #1
   38622:	756b      	strb	r3, [r5, #21]
   38624:	2400      	movs	r4, #0
   38626:	4622      	mov	r2, r4
   38628:	f810 1b01 	ldrb.w	r1, [r0], #1
   3862c:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
   38630:	4093      	lsls	r3, r2
   38632:	431c      	orrs	r4, r3
   38634:	060b      	lsls	r3, r1, #24
   38636:	f102 0207 	add.w	r2, r2, #7
   3863a:	d4f5      	bmi.n	38628 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x50>
   3863c:	4404      	add	r4, r0
   3863e:	612c      	str	r4, [r5, #16]
   38640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   38642:	4631      	mov	r1, r6
   38644:	4638      	mov	r0, r7
   38646:	f7ff ffa5 	bl	38594 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   3864a:	1d2b      	adds	r3, r5, #4
   3864c:	4601      	mov	r1, r0
   3864e:	4622      	mov	r2, r4
   38650:	4638      	mov	r0, r7
   38652:	f7ff ff3f 	bl	384d4 <_ZL28read_encoded_value_with_basehjPKhPj>
   38656:	4604      	mov	r4, r0
   38658:	4620      	mov	r0, r4
   3865a:	f810 3b01 	ldrb.w	r3, [r0], #1
   3865e:	2bff      	cmp	r3, #255	@ 0xff
   38660:	d1cc      	bne.n	385fc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x24>
   38662:	752b      	strb	r3, [r5, #20]
   38664:	2400      	movs	r4, #0
   38666:	e7d9      	b.n	3861c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x44>

00038668 <__gxx_personality_v0>:
   38668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3866c:	f000 0303 	and.w	r3, r0, #3
   38670:	b095      	sub	sp, #84	@ 0x54
   38672:	2400      	movs	r4, #0
   38674:	2b01      	cmp	r3, #1
   38676:	940a      	str	r4, [sp, #40]	@ 0x28
   38678:	460f      	mov	r7, r1
   3867a:	4616      	mov	r6, r2
   3867c:	f000 80a4 	beq.w	387c8 <__gxx_personality_v0+0x160>
   38680:	2b02      	cmp	r3, #2
   38682:	d10a      	bne.n	3869a <__gxx_personality_v0+0x32>
   38684:	4631      	mov	r1, r6
   38686:	4638      	mov	r0, r7
   38688:	f008 f9d2 	bl	40a30 <__gnu_unwind_frame>
   3868c:	2800      	cmp	r0, #0
   3868e:	f040 8090 	bne.w	387b2 <__gxx_personality_v0+0x14a>
   38692:	2008      	movs	r0, #8
   38694:	b015      	add	sp, #84	@ 0x54
   38696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3869a:	2b00      	cmp	r3, #0
   3869c:	f040 81fd 	bne.w	38a9a <__gxx_personality_v0+0x432>
   386a0:	f010 0408 	ands.w	r4, r0, #8
   386a4:	d1ee      	bne.n	38684 <__gxx_personality_v0+0x1c>
   386a6:	ab0e      	add	r3, sp, #56	@ 0x38
   386a8:	f04f 0801 	mov.w	r8, #1
   386ac:	9302      	str	r3, [sp, #8]
   386ae:	9b02      	ldr	r3, [sp, #8]
   386b0:	9300      	str	r3, [sp, #0]
   386b2:	2300      	movs	r3, #0
   386b4:	220c      	movs	r2, #12
   386b6:	4619      	mov	r1, r3
   386b8:	4630      	mov	r0, r6
   386ba:	970e      	str	r7, [sp, #56]	@ 0x38
   386bc:	f007 fcd0 	bl	40060 <_Unwind_VRS_Set>
   386c0:	4630      	mov	r0, r6
   386c2:	f008 f9d1 	bl	40a68 <_Unwind_GetLanguageSpecificData>
   386c6:	9003      	str	r0, [sp, #12]
   386c8:	2800      	cmp	r0, #0
   386ca:	d0db      	beq.n	38684 <__gxx_personality_v0+0x1c>
   386cc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   386d0:	ea44 0308 	orr.w	r3, r4, r8
   386d4:	4630      	mov	r0, r6
   386d6:	9304      	str	r3, [sp, #16]
   386d8:	f7ff ff7e 	bl	385d8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   386dc:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
   386e0:	9306      	str	r3, [sp, #24]
   386e2:	4682      	mov	sl, r0
   386e4:	4631      	mov	r1, r6
   386e6:	4618      	mov	r0, r3
   386e8:	f7ff ff54 	bl	38594 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   386ec:	f10d 0834 	add.w	r8, sp, #52	@ 0x34
   386f0:	2300      	movs	r3, #0
   386f2:	9005      	str	r0, [sp, #20]
   386f4:	9010      	str	r0, [sp, #64]	@ 0x40
   386f6:	4619      	mov	r1, r3
   386f8:	f8cd 8000 	str.w	r8, [sp]
   386fc:	220f      	movs	r2, #15
   386fe:	4630      	mov	r0, r6
   38700:	f007 fc86 	bl	40010 <_Unwind_VRS_Get>
   38704:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   38706:	f8dd 9048 	ldr.w	r9, [sp, #72]	@ 0x48
   3870a:	f023 0301 	bic.w	r3, r3, #1
   3870e:	45ca      	cmp	sl, r9
   38710:	f103 35ff 	add.w	r5, r3, #4294967295	@ 0xffffffff
   38714:	d233      	bcs.n	3877e <__gxx_personality_v0+0x116>
   38716:	f89d b04d 	ldrb.w	fp, [sp, #77]	@ 0x4d
   3871a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
   3871c:	2100      	movs	r1, #0
   3871e:	4658      	mov	r0, fp
   38720:	f7ff ff38 	bl	38594 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   38724:	4652      	mov	r2, sl
   38726:	4601      	mov	r1, r0
   38728:	ab0b      	add	r3, sp, #44	@ 0x2c
   3872a:	4658      	mov	r0, fp
   3872c:	f7ff fed2 	bl	384d4 <_ZL28read_encoded_value_with_basehjPKhPj>
   38730:	2100      	movs	r1, #0
   38732:	4682      	mov	sl, r0
   38734:	4658      	mov	r0, fp
   38736:	f7ff ff2d 	bl	38594 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   3873a:	4652      	mov	r2, sl
   3873c:	4601      	mov	r1, r0
   3873e:	ab0c      	add	r3, sp, #48	@ 0x30
   38740:	4658      	mov	r0, fp
   38742:	f7ff fec7 	bl	384d4 <_ZL28read_encoded_value_with_basehjPKhPj>
   38746:	2100      	movs	r1, #0
   38748:	4682      	mov	sl, r0
   3874a:	4658      	mov	r0, fp
   3874c:	f7ff ff22 	bl	38594 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   38750:	4652      	mov	r2, sl
   38752:	4601      	mov	r1, r0
   38754:	4643      	mov	r3, r8
   38756:	4658      	mov	r0, fp
   38758:	f7ff febc 	bl	384d4 <_ZL28read_encoded_value_with_basehjPKhPj>
   3875c:	4682      	mov	sl, r0
   3875e:	2000      	movs	r0, #0
   38760:	4602      	mov	r2, r0
   38762:	f81a 1b01 	ldrb.w	r1, [sl], #1
   38766:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
   3876a:	4093      	lsls	r3, r2
   3876c:	4318      	orrs	r0, r3
   3876e:	060b      	lsls	r3, r1, #24
   38770:	f102 0207 	add.w	r2, r2, #7
   38774:	d4f5      	bmi.n	38762 <__gxx_personality_v0+0xfa>
   38776:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   38778:	4423      	add	r3, r4
   3877a:	42ab      	cmp	r3, r5
   3877c:	d91d      	bls.n	387ba <__gxx_personality_v0+0x152>
   3877e:	f04f 0a00 	mov.w	sl, #0
   38782:	46d3      	mov	fp, sl
   38784:	2301      	movs	r3, #1
   38786:	9a04      	ldr	r2, [sp, #16]
   38788:	07d1      	lsls	r1, r2, #31
   3878a:	d577      	bpl.n	3887c <__gxx_personality_v0+0x214>
   3878c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   3878e:	461c      	mov	r4, r3
   38790:	2300      	movs	r3, #0
   38792:	4619      	mov	r1, r3
   38794:	f8cd 8000 	str.w	r8, [sp]
   38798:	4630      	mov	r0, r6
   3879a:	220d      	movs	r2, #13
   3879c:	f007 fc38 	bl	40010 <_Unwind_VRS_Get>
   387a0:	9b03      	ldr	r3, [sp, #12]
   387a2:	e9c7 3b0b 	strd	r3, fp, [r7, #44]	@ 0x2c
   387a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   387a8:	623b      	str	r3, [r7, #32]
   387aa:	e9c7 4a09 	strd	r4, sl, [r7, #36]	@ 0x24
   387ae:	2006      	movs	r0, #6
   387b0:	e770      	b.n	38694 <__gxx_personality_v0+0x2c>
   387b2:	2009      	movs	r0, #9
   387b4:	b015      	add	sp, #84	@ 0x54
   387b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   387ba:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
   387bc:	4413      	add	r3, r2
   387be:	42ab      	cmp	r3, r5
   387c0:	d864      	bhi.n	3888c <__gxx_personality_v0+0x224>
   387c2:	45ca      	cmp	sl, r9
   387c4:	d3aa      	bcc.n	3871c <__gxx_personality_v0+0xb4>
   387c6:	e7da      	b.n	3877e <__gxx_personality_v0+0x116>
   387c8:	ab0e      	add	r3, sp, #56	@ 0x38
   387ca:	f010 0408 	ands.w	r4, r0, #8
   387ce:	9302      	str	r3, [sp, #8]
   387d0:	d002      	beq.n	387d8 <__gxx_personality_v0+0x170>
   387d2:	f04f 0802 	mov.w	r8, #2
   387d6:	e76a      	b.n	386ae <__gxx_personality_v0+0x46>
   387d8:	9300      	str	r3, [sp, #0]
   387da:	6a0d      	ldr	r5, [r1, #32]
   387dc:	4623      	mov	r3, r4
   387de:	220d      	movs	r2, #13
   387e0:	4621      	mov	r1, r4
   387e2:	4630      	mov	r0, r6
   387e4:	f007 fc14 	bl	40010 <_Unwind_VRS_Get>
   387e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   387ea:	429d      	cmp	r5, r3
   387ec:	d1f1      	bne.n	387d2 <__gxx_personality_v0+0x16a>
   387ee:	9b02      	ldr	r3, [sp, #8]
   387f0:	9300      	str	r3, [sp, #0]
   387f2:	4621      	mov	r1, r4
   387f4:	4623      	mov	r3, r4
   387f6:	220c      	movs	r2, #12
   387f8:	4630      	mov	r0, r6
   387fa:	970e      	str	r7, [sp, #56]	@ 0x38
   387fc:	f007 fc30 	bl	40060 <_Unwind_VRS_Set>
   38800:	f8d7 b030 	ldr.w	fp, [r7, #48]	@ 0x30
   38804:	e9d7 430a 	ldrd	r4, r3, [r7, #40]	@ 0x28
   38808:	f1bb 0f00 	cmp.w	fp, #0
   3880c:	d03b      	beq.n	38886 <__gxx_personality_v0+0x21e>
   3880e:	9303      	str	r3, [sp, #12]
   38810:	46a2      	mov	sl, r4
   38812:	f10d 0834 	add.w	r8, sp, #52	@ 0x34
   38816:	f1ba 0f00 	cmp.w	sl, #0
   3881a:	f2c0 80ff 	blt.w	38a1c <__gxx_personality_v0+0x3b4>
   3881e:	2503      	movs	r5, #3
   38820:	2300      	movs	r3, #0
   38822:	461a      	mov	r2, r3
   38824:	4619      	mov	r1, r3
   38826:	f8cd 8000 	str.w	r8, [sp]
   3882a:	4630      	mov	r0, r6
   3882c:	970d      	str	r7, [sp, #52]	@ 0x34
   3882e:	f007 fc17 	bl	40060 <_Unwind_VRS_Set>
   38832:	2300      	movs	r3, #0
   38834:	4619      	mov	r1, r3
   38836:	2201      	movs	r2, #1
   38838:	f8cd 8000 	str.w	r8, [sp]
   3883c:	4630      	mov	r0, r6
   3883e:	940d      	str	r4, [sp, #52]	@ 0x34
   38840:	f007 fc0e 	bl	40060 <_Unwind_VRS_Set>
   38844:	2300      	movs	r3, #0
   38846:	4619      	mov	r1, r3
   38848:	220f      	movs	r2, #15
   3884a:	f8cd 8000 	str.w	r8, [sp]
   3884e:	4630      	mov	r0, r6
   38850:	f007 fbde 	bl	40010 <_Unwind_VRS_Get>
   38854:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
   38856:	f8cd 8000 	str.w	r8, [sp]
   3885a:	f002 0201 	and.w	r2, r2, #1
   3885e:	2300      	movs	r3, #0
   38860:	ea42 020b 	orr.w	r2, r2, fp
   38864:	920d      	str	r2, [sp, #52]	@ 0x34
   38866:	4630      	mov	r0, r6
   38868:	220f      	movs	r2, #15
   3886a:	4619      	mov	r1, r3
   3886c:	f007 fbf8 	bl	40060 <_Unwind_VRS_Set>
   38870:	2d02      	cmp	r5, #2
   38872:	d060      	beq.n	38936 <__gxx_personality_v0+0x2ce>
   38874:	2007      	movs	r0, #7
   38876:	b015      	add	sp, #84	@ 0x54
   38878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3887c:	9a04      	ldr	r2, [sp, #16]
   3887e:	0712      	lsls	r2, r2, #28
   38880:	d45d      	bmi.n	3893e <__gxx_personality_v0+0x2d6>
   38882:	2b01      	cmp	r3, #1
   38884:	d16b      	bne.n	3895e <__gxx_personality_v0+0x2f6>
   38886:	4638      	mov	r0, r7
   38888:	f006 fee4 	bl	3f654 <__cxa_call_terminate>
   3888c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   3888e:	2b00      	cmp	r3, #0
   38890:	f43f aef8 	beq.w	38684 <__gxx_personality_v0+0x1c>
   38894:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
   38896:	eb03 0b02 	add.w	fp, r3, r2
   3889a:	2800      	cmp	r0, #0
   3889c:	f000 80e1 	beq.w	38a62 <__gxx_personality_v0+0x3fa>
   388a0:	3801      	subs	r0, #1
   388a2:	eb09 0400 	add.w	r4, r9, r0
   388a6:	f1bb 0f00 	cmp.w	fp, #0
   388aa:	f43f aeeb 	beq.w	38684 <__gxx_personality_v0+0x1c>
   388ae:	9b04      	ldr	r3, [sp, #16]
   388b0:	f013 0308 	ands.w	r3, r3, #8
   388b4:	9308      	str	r3, [sp, #32]
   388b6:	f000 80d8 	beq.w	38a6a <__gxx_personality_v0+0x402>
   388ba:	4b79      	ldr	r3, [pc, #484]	@ (38aa0 <__gxx_personality_v0+0x438>)
   388bc:	603b      	str	r3, [r7, #0]
   388be:	4b79      	ldr	r3, [pc, #484]	@ (38aa4 <__gxx_personality_v0+0x43c>)
   388c0:	607b      	str	r3, [r7, #4]
   388c2:	9b06      	ldr	r3, [sp, #24]
   388c4:	9607      	str	r6, [sp, #28]
   388c6:	f003 0207 	and.w	r2, r3, #7
   388ca:	f8cd b018 	str.w	fp, [sp, #24]
   388ce:	f04f 0900 	mov.w	r9, #0
   388d2:	9209      	str	r2, [sp, #36]	@ 0x24
   388d4:	469b      	mov	fp, r3
   388d6:	2100      	movs	r1, #0
   388d8:	460a      	mov	r2, r1
   388da:	f814 0b01 	ldrb.w	r0, [r4], #1
   388de:	f000 037f 	and.w	r3, r0, #127	@ 0x7f
   388e2:	4093      	lsls	r3, r2
   388e4:	0605      	lsls	r5, r0, #24
   388e6:	ea41 0103 	orr.w	r1, r1, r3
   388ea:	f102 0207 	add.w	r2, r2, #7
   388ee:	d4f4      	bmi.n	388da <__gxx_personality_v0+0x272>
   388f0:	2a1f      	cmp	r2, #31
   388f2:	d805      	bhi.n	38900 <__gxx_personality_v0+0x298>
   388f4:	0640      	lsls	r0, r0, #25
   388f6:	d503      	bpl.n	38900 <__gxx_personality_v0+0x298>
   388f8:	2301      	movs	r3, #1
   388fa:	4093      	lsls	r3, r2
   388fc:	425b      	negs	r3, r3
   388fe:	4319      	orrs	r1, r3
   38900:	2500      	movs	r5, #0
   38902:	468a      	mov	sl, r1
   38904:	4626      	mov	r6, r4
   38906:	462a      	mov	r2, r5
   38908:	f816 0b01 	ldrb.w	r0, [r6], #1
   3890c:	f000 037f 	and.w	r3, r0, #127	@ 0x7f
   38910:	4093      	lsls	r3, r2
   38912:	431d      	orrs	r5, r3
   38914:	0603      	lsls	r3, r0, #24
   38916:	f102 0207 	add.w	r2, r2, #7
   3891a:	d4f5      	bmi.n	38908 <__gxx_personality_v0+0x2a0>
   3891c:	2a1f      	cmp	r2, #31
   3891e:	d820      	bhi.n	38962 <__gxx_personality_v0+0x2fa>
   38920:	0646      	lsls	r6, r0, #25
   38922:	d51e      	bpl.n	38962 <__gxx_personality_v0+0x2fa>
   38924:	2301      	movs	r3, #1
   38926:	4093      	lsls	r3, r2
   38928:	425b      	negs	r3, r3
   3892a:	431d      	orrs	r5, r3
   3892c:	bb59      	cbnz	r1, 38986 <__gxx_personality_v0+0x31e>
   3892e:	f04f 0901 	mov.w	r9, #1
   38932:	442c      	add	r4, r5
   38934:	e7cf      	b.n	388d6 <__gxx_personality_v0+0x26e>
   38936:	4638      	mov	r0, r7
   38938:	f7ff fd46 	bl	383c8 <__cxa_begin_cleanup>
   3893c:	e79a      	b.n	38874 <__gxx_personality_v0+0x20c>
   3893e:	2b01      	cmp	r3, #1
   38940:	f000 80a9 	beq.w	38a96 <__gxx_personality_v0+0x42e>
   38944:	f1ba 0f00 	cmp.w	sl, #0
   38948:	f2c0 80a1 	blt.w	38a8e <__gxx_personality_v0+0x426>
   3894c:	4654      	mov	r4, sl
   3894e:	2503      	movs	r5, #3
   38950:	e766      	b.n	38820 <__gxx_personality_v0+0x1b8>
   38952:	9b04      	ldr	r3, [sp, #16]
   38954:	07db      	lsls	r3, r3, #31
   38956:	e9dd b606 	ldrd	fp, r6, [sp, #24]
   3895a:	f53f af17 	bmi.w	3878c <__gxx_personality_v0+0x124>
   3895e:	4654      	mov	r4, sl
   38960:	e759      	b.n	38816 <__gxx_personality_v0+0x1ae>
   38962:	b981      	cbnz	r1, 38986 <__gxx_personality_v0+0x31e>
   38964:	f04f 0901 	mov.w	r9, #1
   38968:	2d00      	cmp	r5, #0
   3896a:	d1e2      	bne.n	38932 <__gxx_personality_v0+0x2ca>
   3896c:	464b      	mov	r3, r9
   3896e:	e9dd b606 	ldrd	fp, r6, [sp, #24]
   38972:	2b00      	cmp	r3, #0
   38974:	f43f ae86 	beq.w	38684 <__gxx_personality_v0+0x1c>
   38978:	9b04      	ldr	r3, [sp, #16]
   3897a:	07d8      	lsls	r0, r3, #31
   3897c:	f53f ae82 	bmi.w	38684 <__gxx_personality_v0+0x1c>
   38980:	2400      	movs	r4, #0
   38982:	2502      	movs	r5, #2
   38984:	e74c      	b.n	38820 <__gxx_personality_v0+0x1b8>
   38986:	2900      	cmp	r1, #0
   38988:	dc21      	bgt.n	389ce <__gxx_personality_v0+0x366>
   3898a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
   3898e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
   38990:	1a5b      	subs	r3, r3, r1
   38992:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
   38996:	eb06 0683 	add.w	r6, r6, r3, lsl #2
   3899a:	b10f      	cbz	r7, 389a0 <__gxx_personality_v0+0x338>
   3899c:	9b08      	ldr	r3, [sp, #32]
   3899e:	b12b      	cbz	r3, 389ac <__gxx_personality_v0+0x344>
   389a0:	2900      	cmp	r1, #0
   389a2:	d1e1      	bne.n	38968 <__gxx_personality_v0+0x300>
   389a4:	e9dd b606 	ldrd	fp, r6, [sp, #24]
   389a8:	2303      	movs	r3, #3
   389aa:	e6ec      	b.n	38786 <__gxx_personality_v0+0x11e>
   389ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   389ae:	930d      	str	r3, [sp, #52]	@ 0x34
   389b0:	b921      	cbnz	r1, 389bc <__gxx_personality_v0+0x354>
   389b2:	e063      	b.n	38a7c <__gxx_personality_v0+0x414>
   389b4:	f856 1f04 	ldr.w	r1, [r6, #4]!
   389b8:	2900      	cmp	r1, #0
   389ba:	d0ca      	beq.n	38952 <__gxx_personality_v0+0x2ea>
   389bc:	4431      	add	r1, r6
   389be:	4643      	mov	r3, r8
   389c0:	2200      	movs	r2, #0
   389c2:	4638      	mov	r0, r7
   389c4:	f7ff fca8 	bl	38318 <__cxa_type_match>
   389c8:	2800      	cmp	r0, #0
   389ca:	d0f3      	beq.n	389b4 <__gxx_personality_v0+0x34c>
   389cc:	e7cc      	b.n	38968 <__gxx_personality_v0+0x300>
   389ce:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
   389d2:	d044      	beq.n	38a5e <__gxx_personality_v0+0x3f6>
   389d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
   389d6:	2a04      	cmp	r2, #4
   389d8:	d85f      	bhi.n	38a9a <__gxx_personality_v0+0x432>
   389da:	e8df f002 	tbb	[pc, r2]
   389de:	5e03      	.short	0x5e03
   389e0:	031c      	.short	0x031c
   389e2:	19          	.byte	0x19
   389e3:	00          	.byte	0x00
   389e4:	008b      	lsls	r3, r1, #2
   389e6:	425b      	negs	r3, r3
   389e8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
   389ea:	9905      	ldr	r1, [sp, #20]
   389ec:	441a      	add	r2, r3
   389ee:	4658      	mov	r0, fp
   389f0:	4643      	mov	r3, r8
   389f2:	f7ff fd6f 	bl	384d4 <_ZL28read_encoded_value_with_basehjPKhPj>
   389f6:	990d      	ldr	r1, [sp, #52]	@ 0x34
   389f8:	2900      	cmp	r1, #0
   389fa:	d0d3      	beq.n	389a4 <__gxx_personality_v0+0x33c>
   389fc:	2f00      	cmp	r7, #0
   389fe:	d0b3      	beq.n	38968 <__gxx_personality_v0+0x300>
   38a00:	ab0a      	add	r3, sp, #40	@ 0x28
   38a02:	2200      	movs	r2, #0
   38a04:	4638      	mov	r0, r7
   38a06:	f7ff fc87 	bl	38318 <__cxa_type_match>
   38a0a:	2800      	cmp	r0, #0
   38a0c:	d0ac      	beq.n	38968 <__gxx_personality_v0+0x300>
   38a0e:	e7c9      	b.n	389a4 <__gxx_personality_v0+0x33c>
   38a10:	00cb      	lsls	r3, r1, #3
   38a12:	425b      	negs	r3, r3
   38a14:	e7e8      	b.n	389e8 <__gxx_personality_v0+0x380>
   38a16:	004b      	lsls	r3, r1, #1
   38a18:	425b      	negs	r3, r3
   38a1a:	e7e5      	b.n	389e8 <__gxx_personality_v0+0x380>
   38a1c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   38a20:	4630      	mov	r0, r6
   38a22:	f7ff fdd9 	bl	385d8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   38a26:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
   38a2a:	4631      	mov	r1, r6
   38a2c:	f7ff fdb2 	bl	38594 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   38a30:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
   38a34:	1b12      	subs	r2, r2, r4
   38a36:	4605      	mov	r5, r0
   38a38:	9811      	ldr	r0, [sp, #68]	@ 0x44
   38a3a:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
   38a3e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   38a42:	b133      	cbz	r3, 38a52 <__gxx_personality_v0+0x3ea>
   38a44:	4602      	mov	r2, r0
   38a46:	2300      	movs	r3, #0
   38a48:	f852 1f04 	ldr.w	r1, [r2, #4]!
   38a4c:	3301      	adds	r3, #1
   38a4e:	2900      	cmp	r1, #0
   38a50:	d1fa      	bne.n	38a48 <__gxx_personality_v0+0x3e0>
   38a52:	e9c7 350a 	strd	r3, r5, [r7, #40]	@ 0x28
   38a56:	2304      	movs	r3, #4
   38a58:	6378      	str	r0, [r7, #52]	@ 0x34
   38a5a:	633b      	str	r3, [r7, #48]	@ 0x30
   38a5c:	e6df      	b.n	3881e <__gxx_personality_v0+0x1b6>
   38a5e:	2300      	movs	r3, #0
   38a60:	e7c2      	b.n	389e8 <__gxx_personality_v0+0x380>
   38a62:	f1bb 0f00 	cmp.w	fp, #0
   38a66:	d187      	bne.n	38978 <__gxx_personality_v0+0x310>
   38a68:	e60c      	b.n	38684 <__gxx_personality_v0+0x1c>
   38a6a:	79fb      	ldrb	r3, [r7, #7]
   38a6c:	2b01      	cmp	r3, #1
   38a6e:	bf0c      	ite	eq
   38a70:	f857 3c20 	ldreq.w	r3, [r7, #-32]
   38a74:	f107 0358 	addne.w	r3, r7, #88	@ 0x58
   38a78:	930a      	str	r3, [sp, #40]	@ 0x28
   38a7a:	e722      	b.n	388c2 <__gxx_personality_v0+0x25a>
   38a7c:	461c      	mov	r4, r3
   38a7e:	9b04      	ldr	r3, [sp, #16]
   38a80:	07dd      	lsls	r5, r3, #31
   38a82:	e9dd b606 	ldrd	fp, r6, [sp, #24]
   38a86:	f53f ae83 	bmi.w	38790 <__gxx_personality_v0+0x128>
   38a8a:	4654      	mov	r4, sl
   38a8c:	e6c3      	b.n	38816 <__gxx_personality_v0+0x1ae>
   38a8e:	f000 f821 	bl	38ad4 <_ZSt10unexpectedv>
   38a92:	f006 fe59 	bl	3f748 <__cxa_begin_catch>
   38a96:	f000 f80f 	bl	38ab8 <_ZSt9terminatev>
   38a9a:	f7ec fc71 	bl	25380 <abort>
   38a9e:	bf00      	nop
   38aa0:	43554e47 	.word	0x43554e47
   38aa4:	00524f46 	.word	0x00524f46

00038aa8 <_ZN10__cxxabiv111__terminateEPFvvE>:
   38aa8:	b508      	push	{r3, lr}
   38aaa:	4780      	blx	r0
   38aac:	f7ec fc68 	bl	25380 <abort>
   38ab0:	f006 fe4a 	bl	3f748 <__cxa_begin_catch>
   38ab4:	f7ec fc64 	bl	25380 <abort>

00038ab8 <_ZSt9terminatev>:
   38ab8:	b508      	push	{r3, lr}
   38aba:	4b03      	ldr	r3, [pc, #12]	@ (38ac8 <_ZSt9terminatev+0x10>)
   38abc:	6818      	ldr	r0, [r3, #0]
   38abe:	f3bf 8f5b 	dmb	ish
   38ac2:	f7ff fff1 	bl	38aa8 <_ZN10__cxxabiv111__terminateEPFvvE>
   38ac6:	bf00      	nop
   38ac8:	1000dc58 	.word	0x1000dc58

00038acc <_ZN10__cxxabiv112__unexpectedEPFvvE>:
   38acc:	b508      	push	{r3, lr}
   38ace:	4780      	blx	r0
   38ad0:	f7ff fff2 	bl	38ab8 <_ZSt9terminatev>

00038ad4 <_ZSt10unexpectedv>:
   38ad4:	b508      	push	{r3, lr}
   38ad6:	4b03      	ldr	r3, [pc, #12]	@ (38ae4 <_ZSt10unexpectedv+0x10>)
   38ad8:	6818      	ldr	r0, [r3, #0]
   38ada:	f3bf 8f5b 	dmb	ish
   38ade:	f7ff fff5 	bl	38acc <_ZN10__cxxabiv112__unexpectedEPFvvE>
   38ae2:	bf00      	nop
   38ae4:	1000dc54 	.word	0x1000dc54

00038ae8 <_ZSt13get_terminatev>:
   38ae8:	4b02      	ldr	r3, [pc, #8]	@ (38af4 <_ZSt13get_terminatev+0xc>)
   38aea:	6818      	ldr	r0, [r3, #0]
   38aec:	f3bf 8f5b 	dmb	ish
   38af0:	4770      	bx	lr
   38af2:	bf00      	nop
   38af4:	1000dc58 	.word	0x1000dc58

00038af8 <_ZSt14get_unexpectedv>:
   38af8:	4b02      	ldr	r3, [pc, #8]	@ (38b04 <_ZSt14get_unexpectedv+0xc>)
   38afa:	6818      	ldr	r0, [r3, #0]
   38afc:	f3bf 8f5b 	dmb	ish
   38b00:	4770      	bx	lr
   38b02:	bf00      	nop
   38b04:	1000dc54 	.word	0x1000dc54

00038b08 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
   38b08:	2801      	cmp	r0, #1
   38b0a:	b510      	push	{r4, lr}
   38b0c:	d81a      	bhi.n	38b44 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3c>
   38b0e:	f3bf 8f5b 	dmb	ish
   38b12:	f1a1 0328 	sub.w	r3, r1, #40	@ 0x28
   38b16:	e853 2f00 	ldrex	r2, [r3]
   38b1a:	3a01      	subs	r2, #1
   38b1c:	e843 2000 	strex	r0, r2, [r3]
   38b20:	2800      	cmp	r0, #0
   38b22:	d1f8      	bne.n	38b16 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
   38b24:	f3bf 8f5b 	dmb	ish
   38b28:	b95a      	cbnz	r2, 38b42 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3a>
   38b2a:	f851 3c1c 	ldr.w	r3, [r1, #-28]
   38b2e:	f101 0458 	add.w	r4, r1, #88	@ 0x58
   38b32:	b10b      	cbz	r3, 38b38 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x30>
   38b34:	4620      	mov	r0, r4
   38b36:	4798      	blx	r3
   38b38:	4620      	mov	r0, r4
   38b3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   38b3e:	f7ff bb55 	b.w	381ec <__cxa_free_exception>
   38b42:	bd10      	pop	{r4, pc}
   38b44:	f851 0c14 	ldr.w	r0, [r1, #-20]
   38b48:	f7ff ffae 	bl	38aa8 <_ZN10__cxxabiv111__terminateEPFvvE>

00038b4c <__cxa_init_primary_exception>:
   38b4c:	2300      	movs	r3, #0
   38b4e:	b510      	push	{r4, lr}
   38b50:	e940 121e 	strd	r1, r2, [r0, #-120]	@ 0x78
   38b54:	f840 3c80 	str.w	r3, [r0, #-128]
   38b58:	4604      	mov	r4, r0
   38b5a:	f7ff ffcd 	bl	38af8 <_ZSt14get_unexpectedv>
   38b5e:	f844 0c70 	str.w	r0, [r4, #-112]
   38b62:	f7ff ffc1 	bl	38ae8 <_ZSt13get_terminatev>
   38b66:	4907      	ldr	r1, [pc, #28]	@ (38b84 <__cxa_init_primary_exception+0x38>)
   38b68:	4a07      	ldr	r2, [pc, #28]	@ (38b88 <__cxa_init_primary_exception+0x3c>)
   38b6a:	4b08      	ldr	r3, [pc, #32]	@ (38b8c <__cxa_init_primary_exception+0x40>)
   38b6c:	f844 1c58 	str.w	r1, [r4, #-88]
   38b70:	f844 2c54 	str.w	r2, [r4, #-84]
   38b74:	f844 0c6c 	str.w	r0, [r4, #-108]
   38b78:	f844 3c50 	str.w	r3, [r4, #-80]
   38b7c:	f1a4 0080 	sub.w	r0, r4, #128	@ 0x80
   38b80:	bd10      	pop	{r4, pc}
   38b82:	bf00      	nop
   38b84:	43554e47 	.word	0x43554e47
   38b88:	002b2b43 	.word	0x002b2b43
   38b8c:	00038b09 	.word	0x00038b09

00038b90 <__cxa_throw>:
   38b90:	b570      	push	{r4, r5, r6, lr}
   38b92:	4604      	mov	r4, r0
   38b94:	460d      	mov	r5, r1
   38b96:	4616      	mov	r6, r2
   38b98:	f7ff fc98 	bl	384cc <__cxa_get_globals>
   38b9c:	6843      	ldr	r3, [r0, #4]
   38b9e:	3301      	adds	r3, #1
   38ba0:	4632      	mov	r2, r6
   38ba2:	4629      	mov	r1, r5
   38ba4:	6043      	str	r3, [r0, #4]
   38ba6:	4620      	mov	r0, r4
   38ba8:	f7ff ffd0 	bl	38b4c <__cxa_init_primary_exception>
   38bac:	4604      	mov	r4, r0
   38bae:	2301      	movs	r3, #1
   38bb0:	f844 3b28 	str.w	r3, [r4], #40
   38bb4:	4620      	mov	r0, r4
   38bb6:	f7e0 fbd9 	bl	1936c <_Unwind_RaiseException>
   38bba:	4620      	mov	r0, r4
   38bbc:	f006 fdc4 	bl	3f748 <__cxa_begin_catch>
   38bc0:	f7ff ff7a 	bl	38ab8 <_ZSt9terminatev>

00038bc4 <__cxa_rethrow>:
   38bc4:	b510      	push	{r4, lr}
   38bc6:	f7ff fc81 	bl	384cc <__cxa_get_globals>
   38bca:	e9d0 4200 	ldrd	r4, r2, [r0]
   38bce:	3201      	adds	r2, #1
   38bd0:	6042      	str	r2, [r0, #4]
   38bd2:	b164      	cbz	r4, 38bee <__cxa_rethrow+0x2a>
   38bd4:	f894 2020 	ldrb.w	r2, [r4, #32]
   38bd8:	2a47      	cmp	r2, #71	@ 0x47
   38bda:	d00a      	beq.n	38bf2 <__cxa_rethrow+0x2e>
   38bdc:	2200      	movs	r2, #0
   38bde:	6002      	str	r2, [r0, #0]
   38be0:	3420      	adds	r4, #32
   38be2:	4620      	mov	r0, r4
   38be4:	f7e0 fbe6 	bl	193b4 <_Unwind_Resume_or_Rethrow>
   38be8:	4620      	mov	r0, r4
   38bea:	f006 fdad 	bl	3f748 <__cxa_begin_catch>
   38bee:	f7ff ff63 	bl	38ab8 <_ZSt9terminatev>
   38bf2:	f894 2021 	ldrb.w	r2, [r4, #33]	@ 0x21
   38bf6:	2a4e      	cmp	r2, #78	@ 0x4e
   38bf8:	d1f0      	bne.n	38bdc <__cxa_rethrow+0x18>
   38bfa:	f894 2022 	ldrb.w	r2, [r4, #34]	@ 0x22
   38bfe:	2a55      	cmp	r2, #85	@ 0x55
   38c00:	d1ec      	bne.n	38bdc <__cxa_rethrow+0x18>
   38c02:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
   38c06:	2a43      	cmp	r2, #67	@ 0x43
   38c08:	d1e8      	bne.n	38bdc <__cxa_rethrow+0x18>
   38c0a:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
   38c0e:	2a43      	cmp	r2, #67	@ 0x43
   38c10:	d1e4      	bne.n	38bdc <__cxa_rethrow+0x18>
   38c12:	f894 2025 	ldrb.w	r2, [r4, #37]	@ 0x25
   38c16:	2a2b      	cmp	r2, #43	@ 0x2b
   38c18:	d1e0      	bne.n	38bdc <__cxa_rethrow+0x18>
   38c1a:	f894 2026 	ldrb.w	r2, [r4, #38]	@ 0x26
   38c1e:	2a2b      	cmp	r2, #43	@ 0x2b
   38c20:	d1dc      	bne.n	38bdc <__cxa_rethrow+0x18>
   38c22:	f894 2027 	ldrb.w	r2, [r4, #39]	@ 0x27
   38c26:	2a01      	cmp	r2, #1
   38c28:	d8d8      	bhi.n	38bdc <__cxa_rethrow+0x18>
   38c2a:	6962      	ldr	r2, [r4, #20]
   38c2c:	4252      	negs	r2, r2
   38c2e:	6162      	str	r2, [r4, #20]
   38c30:	e7d6      	b.n	38be0 <__cxa_rethrow+0x1c>
   38c32:	bf00      	nop

00038c34 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
   38c34:	b510      	push	{r4, lr}
   38c36:	4b03      	ldr	r3, [pc, #12]	@ (38c44 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev+0x10>)
   38c38:	6003      	str	r3, [r0, #0]
   38c3a:	4604      	mov	r4, r0
   38c3c:	f7ff f9c4 	bl	37fc8 <_ZNSt9type_infoD1Ev>
   38c40:	4620      	mov	r0, r4
   38c42:	bd10      	pop	{r4, pc}
   38c44:	0004c230 	.word	0x0004c230

00038c48 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
   38c48:	b510      	push	{r4, lr}
   38c4a:	4b05      	ldr	r3, [pc, #20]	@ (38c60 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev+0x18>)
   38c4c:	6003      	str	r3, [r0, #0]
   38c4e:	4604      	mov	r4, r0
   38c50:	f7ff f9ba 	bl	37fc8 <_ZNSt9type_infoD1Ev>
   38c54:	4620      	mov	r0, r4
   38c56:	2108      	movs	r1, #8
   38c58:	f7fc fbea 	bl	35430 <_ZdlPvj>
   38c5c:	4620      	mov	r0, r4
   38c5e:	bd10      	pop	{r4, pc}
   38c60:	0004c230 	.word	0x0004c230

00038c64 <_ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj>:
   38c64:	68c0      	ldr	r0, [r0, #12]
   38c66:	68c9      	ldr	r1, [r1, #12]
   38c68:	b410      	push	{r4}
   38c6a:	6804      	ldr	r4, [r0, #0]
   38c6c:	6924      	ldr	r4, [r4, #16]
   38c6e:	3302      	adds	r3, #2
   38c70:	46a4      	mov	ip, r4
   38c72:	f85d 4b04 	ldr.w	r4, [sp], #4
   38c76:	4760      	bx	ip

00038c78 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>:
   38c78:	b510      	push	{r4, lr}
   38c7a:	4b03      	ldr	r3, [pc, #12]	@ (38c88 <_ZN10__cxxabiv117__pbase_type_infoD1Ev+0x10>)
   38c7c:	6003      	str	r3, [r0, #0]
   38c7e:	4604      	mov	r4, r0
   38c80:	f7ff f9a2 	bl	37fc8 <_ZNSt9type_infoD1Ev>
   38c84:	4620      	mov	r0, r4
   38c86:	bd10      	pop	{r4, pc}
   38c88:	0004c298 	.word	0x0004c298

00038c8c <_ZN10__cxxabiv117__pbase_type_infoD0Ev>:
   38c8c:	b510      	push	{r4, lr}
   38c8e:	4b05      	ldr	r3, [pc, #20]	@ (38ca4 <_ZN10__cxxabiv117__pbase_type_infoD0Ev+0x18>)
   38c90:	6003      	str	r3, [r0, #0]
   38c92:	4604      	mov	r4, r0
   38c94:	f7ff f998 	bl	37fc8 <_ZNSt9type_infoD1Ev>
   38c98:	4620      	mov	r0, r4
   38c9a:	2110      	movs	r1, #16
   38c9c:	f7fc fbc8 	bl	35430 <_ZdlPvj>
   38ca0:	4620      	mov	r0, r4
   38ca2:	bd10      	pop	{r4, pc}
   38ca4:	0004c298 	.word	0x0004c298

00038ca8 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>:
   38ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   38cac:	4607      	mov	r7, r0
   38cae:	4690      	mov	r8, r2
   38cb0:	4699      	mov	r9, r3
   38cb2:	460e      	mov	r6, r1
   38cb4:	f7ff f9a4 	bl	38000 <_ZNKSt9type_info7__equalERKS_>
   38cb8:	b118      	cbz	r0, 38cc2 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1a>
   38cba:	2501      	movs	r5, #1
   38cbc:	4628      	mov	r0, r5
   38cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   38cc2:	4604      	mov	r4, r0
   38cc4:	4605      	mov	r5, r0
   38cc6:	4931      	ldr	r1, [pc, #196]	@ (38d8c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xe4>)
   38cc8:	4630      	mov	r0, r6
   38cca:	f7ff f999 	bl	38000 <_ZNKSt9type_info7__equalERKS_>
   38cce:	b150      	cbz	r0, 38ce6 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x3e>
   38cd0:	683b      	ldr	r3, [r7, #0]
   38cd2:	492f      	ldr	r1, [pc, #188]	@ (38d90 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xe8>)
   38cd4:	f853 0c04 	ldr.w	r0, [r3, #-4]
   38cd8:	f7ff f992 	bl	38000 <_ZNKSt9type_info7__equalERKS_>
   38cdc:	2800      	cmp	r0, #0
   38cde:	d033      	beq.n	38d48 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xa0>
   38ce0:	f8c8 4000 	str.w	r4, [r8]
   38ce4:	e7e9      	b.n	38cba <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x12>
   38ce6:	6833      	ldr	r3, [r6, #0]
   38ce8:	f853 1c04 	ldr.w	r1, [r3, #-4]
   38cec:	683b      	ldr	r3, [r7, #0]
   38cee:	f853 0c04 	ldr.w	r0, [r3, #-4]
   38cf2:	f7ff f985 	bl	38000 <_ZNKSt9type_info7__equalERKS_>
   38cf6:	2800      	cmp	r0, #0
   38cf8:	d037      	beq.n	38d6a <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xc2>
   38cfa:	f019 0f01 	tst.w	r9, #1
   38cfe:	d0dd      	beq.n	38cbc <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x14>
   38d00:	68b2      	ldr	r2, [r6, #8]
   38d02:	68b9      	ldr	r1, [r7, #8]
   38d04:	f002 0060 	and.w	r0, r2, #96	@ 0x60
   38d08:	f001 0360 	and.w	r3, r1, #96	@ 0x60
   38d0c:	ea30 0403 	bics.w	r4, r0, r3
   38d10:	bf18      	it	ne
   38d12:	401a      	andne	r2, r3
   38d14:	ea22 0201 	bic.w	r2, r2, r1
   38d18:	ea23 0300 	bic.w	r3, r3, r0
   38d1c:	4313      	orrs	r3, r2
   38d1e:	d1cd      	bne.n	38cbc <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x14>
   38d20:	07cb      	lsls	r3, r1, #31
   38d22:	683b      	ldr	r3, [r7, #0]
   38d24:	699c      	ldr	r4, [r3, #24]
   38d26:	4b1b      	ldr	r3, [pc, #108]	@ (38d94 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xec>)
   38d28:	bf58      	it	pl
   38d2a:	f029 0901 	bicpl.w	r9, r9, #1
   38d2e:	429c      	cmp	r4, r3
   38d30:	d123      	bne.n	38d7a <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xd2>
   38d32:	68f8      	ldr	r0, [r7, #12]
   38d34:	68f1      	ldr	r1, [r6, #12]
   38d36:	6802      	ldr	r2, [r0, #0]
   38d38:	6914      	ldr	r4, [r2, #16]
   38d3a:	f109 0302 	add.w	r3, r9, #2
   38d3e:	4642      	mov	r2, r8
   38d40:	46a4      	mov	ip, r4
   38d42:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   38d46:	4760      	bx	ip
   38d48:	683b      	ldr	r3, [r7, #0]
   38d4a:	4913      	ldr	r1, [pc, #76]	@ (38d98 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xf0>)
   38d4c:	f853 0c04 	ldr.w	r0, [r3, #-4]
   38d50:	f7ff f956 	bl	38000 <_ZNKSt9type_info7__equalERKS_>
   38d54:	2800      	cmp	r0, #0
   38d56:	d0c6      	beq.n	38ce6 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x3e>
   38d58:	68f8      	ldr	r0, [r7, #12]
   38d5a:	6803      	ldr	r3, [r0, #0]
   38d5c:	68db      	ldr	r3, [r3, #12]
   38d5e:	4798      	blx	r3
   38d60:	b138      	cbz	r0, 38d72 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xca>
   38d62:	4b0e      	ldr	r3, [pc, #56]	@ (38d9c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xf4>)
   38d64:	f8c8 3000 	str.w	r3, [r8]
   38d68:	e7a7      	b.n	38cba <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x12>
   38d6a:	4605      	mov	r5, r0
   38d6c:	4628      	mov	r0, r5
   38d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   38d72:	4b0b      	ldr	r3, [pc, #44]	@ (38da0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xf8>)
   38d74:	f8c8 3000 	str.w	r3, [r8]
   38d78:	e79f      	b.n	38cba <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x12>
   38d7a:	464b      	mov	r3, r9
   38d7c:	4642      	mov	r2, r8
   38d7e:	4631      	mov	r1, r6
   38d80:	4638      	mov	r0, r7
   38d82:	46a4      	mov	ip, r4
   38d84:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   38d88:	4760      	bx	ip
   38d8a:	bf00      	nop
   38d8c:	0004c24c 	.word	0x0004c24c
   38d90:	0004c074 	.word	0x0004c074
   38d94:	00038c65 	.word	0x00038c65
   38d98:	0004c2f0 	.word	0x0004c2f0
   38d9c:	0004c2b8 	.word	0x0004c2b8
   38da0:	0004c2b4 	.word	0x0004c2b4

00038da4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
   38da4:	b570      	push	{r4, r5, r6, lr}
   38da6:	4b3b      	ldr	r3, [pc, #236]	@ (38e94 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf0>)
   38da8:	781a      	ldrb	r2, [r3, #0]
   38daa:	b082      	sub	sp, #8
   38dac:	2a00      	cmp	r2, #0
   38dae:	d141      	bne.n	38e34 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x90>
   38db0:	2401      	movs	r4, #1
   38db2:	701c      	strb	r4, [r3, #0]
   38db4:	f006 fd4c 	bl	3f850 <__cxa_current_exception_type>
   38db8:	2800      	cmp	r0, #0
   38dba:	d031      	beq.n	38e20 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x7c>
   38dbc:	6844      	ldr	r4, [r0, #4]
   38dbe:	4d36      	ldr	r5, [pc, #216]	@ (38e98 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
   38dc0:	7823      	ldrb	r3, [r4, #0]
   38dc2:	2b2a      	cmp	r3, #42	@ 0x2a
   38dc4:	bf08      	it	eq
   38dc6:	3401      	addeq	r4, #1
   38dc8:	2200      	movs	r2, #0
   38dca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   38dce:	4611      	mov	r1, r2
   38dd0:	ab01      	add	r3, sp, #4
   38dd2:	9001      	str	r0, [sp, #4]
   38dd4:	4620      	mov	r0, r4
   38dd6:	f006 fbc1 	bl	3f55c <__cxa_demangle>
   38dda:	682b      	ldr	r3, [r5, #0]
   38ddc:	2230      	movs	r2, #48	@ 0x30
   38dde:	68db      	ldr	r3, [r3, #12]
   38de0:	4606      	mov	r6, r0
   38de2:	2101      	movs	r1, #1
   38de4:	482d      	ldr	r0, [pc, #180]	@ (38e9c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
   38de6:	f006 fefb 	bl	3fbe0 <fwrite>
   38dea:	9b01      	ldr	r3, [sp, #4]
   38dec:	b193      	cbz	r3, 38e14 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x70>
   38dee:	682b      	ldr	r3, [r5, #0]
   38df0:	4620      	mov	r0, r4
   38df2:	68d9      	ldr	r1, [r3, #12]
   38df4:	f006 fe98 	bl	3fb28 <fputs>
   38df8:	682b      	ldr	r3, [r5, #0]
   38dfa:	4829      	ldr	r0, [pc, #164]	@ (38ea0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
   38dfc:	68db      	ldr	r3, [r3, #12]
   38dfe:	2202      	movs	r2, #2
   38e00:	2101      	movs	r1, #1
   38e02:	f006 feed 	bl	3fbe0 <fwrite>
   38e06:	9b01      	ldr	r3, [sp, #4]
   38e08:	b913      	cbnz	r3, 38e10 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6c>
   38e0a:	4630      	mov	r0, r6
   38e0c:	f006 fd44 	bl	3f898 <free>
   38e10:	f7ff fed8 	bl	38bc4 <__cxa_rethrow>
   38e14:	682b      	ldr	r3, [r5, #0]
   38e16:	4630      	mov	r0, r6
   38e18:	68d9      	ldr	r1, [r3, #12]
   38e1a:	f006 fe85 	bl	3fb28 <fputs>
   38e1e:	e7eb      	b.n	38df8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x54>
   38e20:	4b1d      	ldr	r3, [pc, #116]	@ (38e98 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
   38e22:	4820      	ldr	r0, [pc, #128]	@ (38ea4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
   38e24:	681b      	ldr	r3, [r3, #0]
   38e26:	222d      	movs	r2, #45	@ 0x2d
   38e28:	68db      	ldr	r3, [r3, #12]
   38e2a:	4621      	mov	r1, r4
   38e2c:	f006 fed8 	bl	3fbe0 <fwrite>
   38e30:	f7ec faa6 	bl	25380 <abort>
   38e34:	4b18      	ldr	r3, [pc, #96]	@ (38e98 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
   38e36:	481c      	ldr	r0, [pc, #112]	@ (38ea8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
   38e38:	681b      	ldr	r3, [r3, #0]
   38e3a:	221d      	movs	r2, #29
   38e3c:	68db      	ldr	r3, [r3, #12]
   38e3e:	2101      	movs	r1, #1
   38e40:	f006 fece 	bl	3fbe0 <fwrite>
   38e44:	f7ec fa9c 	bl	25380 <abort>
   38e48:	2901      	cmp	r1, #1
   38e4a:	460c      	mov	r4, r1
   38e4c:	d119      	bne.n	38e82 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xde>
   38e4e:	f006 fc7b 	bl	3f748 <__cxa_begin_catch>
   38e52:	6803      	ldr	r3, [r0, #0]
   38e54:	689b      	ldr	r3, [r3, #8]
   38e56:	4798      	blx	r3
   38e58:	682b      	ldr	r3, [r5, #0]
   38e5a:	4621      	mov	r1, r4
   38e5c:	68db      	ldr	r3, [r3, #12]
   38e5e:	4604      	mov	r4, r0
   38e60:	220b      	movs	r2, #11
   38e62:	4812      	ldr	r0, [pc, #72]	@ (38eac <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
   38e64:	f006 febc 	bl	3fbe0 <fwrite>
   38e68:	682b      	ldr	r3, [r5, #0]
   38e6a:	4620      	mov	r0, r4
   38e6c:	68d9      	ldr	r1, [r3, #12]
   38e6e:	f006 fe5b 	bl	3fb28 <fputs>
   38e72:	682b      	ldr	r3, [r5, #0]
   38e74:	200a      	movs	r0, #10
   38e76:	68d9      	ldr	r1, [r3, #12]
   38e78:	f006 fdea 	bl	3fa50 <fputc>
   38e7c:	f006 fca2 	bl	3f7c4 <__cxa_end_catch>
   38e80:	e7d6      	b.n	38e30 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
   38e82:	f006 fc61 	bl	3f748 <__cxa_begin_catch>
   38e86:	f006 fc9d 	bl	3f7c4 <__cxa_end_catch>
   38e8a:	e7d1      	b.n	38e30 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
   38e8c:	f006 fc9a 	bl	3f7c4 <__cxa_end_catch>
   38e90:	f7ff fa3c 	bl	3830c <__cxa_end_cleanup>
   38e94:	10053844 	.word	0x10053844
   38e98:	1000d540 	.word	0x1000d540
   38e9c:	0004413c 	.word	0x0004413c
   38ea0:	00044170 	.word	0x00044170
   38ea4:	00044174 	.word	0x00044174
   38ea8:	0004411c 	.word	0x0004411c
   38eac:	000441a4 	.word	0x000441a4

00038eb0 <_ZNKSt11logic_error4whatEv>:
   38eb0:	6840      	ldr	r0, [r0, #4]
   38eb2:	4770      	bx	lr

00038eb4 <_ZNSt11logic_errorD1Ev>:
   38eb4:	b510      	push	{r4, lr}
   38eb6:	6843      	ldr	r3, [r0, #4]
   38eb8:	4a0c      	ldr	r2, [pc, #48]	@ (38eec <_ZNSt11logic_errorD1Ev+0x38>)
   38eba:	490d      	ldr	r1, [pc, #52]	@ (38ef0 <_ZNSt11logic_errorD1Ev+0x3c>)
   38ebc:	4604      	mov	r4, r0
   38ebe:	f1a3 000c 	sub.w	r0, r3, #12
   38ec2:	4290      	cmp	r0, r2
   38ec4:	b082      	sub	sp, #8
   38ec6:	6021      	str	r1, [r4, #0]
   38ec8:	d105      	bne.n	38ed6 <_ZNSt11logic_errorD1Ev+0x22>
   38eca:	4620      	mov	r0, r4
   38ecc:	f7ff fae6 	bl	3849c <_ZNSt9exceptionD1Ev>
   38ed0:	4620      	mov	r0, r4
   38ed2:	b002      	add	sp, #8
   38ed4:	bd10      	pop	{r4, pc}
   38ed6:	f853 2c04 	ldr.w	r2, [r3, #-4]
   38eda:	1e51      	subs	r1, r2, #1
   38edc:	2a00      	cmp	r2, #0
   38ede:	f843 1c04 	str.w	r1, [r3, #-4]
   38ee2:	dcf2      	bgt.n	38eca <_ZNSt11logic_errorD1Ev+0x16>
   38ee4:	a901      	add	r1, sp, #4
   38ee6:	f000 f8e3 	bl	390b0 <_ZNSs4_Rep10_M_destroyERKSaIcE>
   38eea:	e7ee      	b.n	38eca <_ZNSt11logic_errorD1Ev+0x16>
   38eec:	10053848 	.word	0x10053848
   38ef0:	0004c340 	.word	0x0004c340

00038ef4 <_ZNSt12length_errorD1Ev>:
   38ef4:	b510      	push	{r4, lr}
   38ef6:	6843      	ldr	r3, [r0, #4]
   38ef8:	4a0c      	ldr	r2, [pc, #48]	@ (38f2c <_ZNSt12length_errorD1Ev+0x38>)
   38efa:	490d      	ldr	r1, [pc, #52]	@ (38f30 <_ZNSt12length_errorD1Ev+0x3c>)
   38efc:	4604      	mov	r4, r0
   38efe:	f1a3 000c 	sub.w	r0, r3, #12
   38f02:	4290      	cmp	r0, r2
   38f04:	b082      	sub	sp, #8
   38f06:	6021      	str	r1, [r4, #0]
   38f08:	d105      	bne.n	38f16 <_ZNSt12length_errorD1Ev+0x22>
   38f0a:	4620      	mov	r0, r4
   38f0c:	f7ff fac6 	bl	3849c <_ZNSt9exceptionD1Ev>
   38f10:	4620      	mov	r0, r4
   38f12:	b002      	add	sp, #8
   38f14:	bd10      	pop	{r4, pc}
   38f16:	f853 2c04 	ldr.w	r2, [r3, #-4]
   38f1a:	1e51      	subs	r1, r2, #1
   38f1c:	2a00      	cmp	r2, #0
   38f1e:	f843 1c04 	str.w	r1, [r3, #-4]
   38f22:	dcf2      	bgt.n	38f0a <_ZNSt12length_errorD1Ev+0x16>
   38f24:	a901      	add	r1, sp, #4
   38f26:	f000 f8c3 	bl	390b0 <_ZNSs4_Rep10_M_destroyERKSaIcE>
   38f2a:	e7ee      	b.n	38f0a <_ZNSt12length_errorD1Ev+0x16>
   38f2c:	10053848 	.word	0x10053848
   38f30:	0004c340 	.word	0x0004c340

00038f34 <_ZNSt11logic_errorD0Ev>:
   38f34:	b510      	push	{r4, lr}
   38f36:	6843      	ldr	r3, [r0, #4]
   38f38:	4a0e      	ldr	r2, [pc, #56]	@ (38f74 <_ZNSt11logic_errorD0Ev+0x40>)
   38f3a:	490f      	ldr	r1, [pc, #60]	@ (38f78 <_ZNSt11logic_errorD0Ev+0x44>)
   38f3c:	4604      	mov	r4, r0
   38f3e:	f1a3 000c 	sub.w	r0, r3, #12
   38f42:	4290      	cmp	r0, r2
   38f44:	b082      	sub	sp, #8
   38f46:	6021      	str	r1, [r4, #0]
   38f48:	d108      	bne.n	38f5c <_ZNSt11logic_errorD0Ev+0x28>
   38f4a:	4620      	mov	r0, r4
   38f4c:	f7ff faa6 	bl	3849c <_ZNSt9exceptionD1Ev>
   38f50:	4620      	mov	r0, r4
   38f52:	f7fc fa6b 	bl	3542c <_ZdlPv>
   38f56:	4620      	mov	r0, r4
   38f58:	b002      	add	sp, #8
   38f5a:	bd10      	pop	{r4, pc}
   38f5c:	f853 2c04 	ldr.w	r2, [r3, #-4]
   38f60:	1e51      	subs	r1, r2, #1
   38f62:	2a00      	cmp	r2, #0
   38f64:	f843 1c04 	str.w	r1, [r3, #-4]
   38f68:	dcef      	bgt.n	38f4a <_ZNSt11logic_errorD0Ev+0x16>
   38f6a:	a901      	add	r1, sp, #4
   38f6c:	f000 f8a0 	bl	390b0 <_ZNSs4_Rep10_M_destroyERKSaIcE>
   38f70:	e7eb      	b.n	38f4a <_ZNSt11logic_errorD0Ev+0x16>
   38f72:	bf00      	nop
   38f74:	10053848 	.word	0x10053848
   38f78:	0004c340 	.word	0x0004c340

00038f7c <_ZNSt12length_errorD0Ev>:
   38f7c:	b510      	push	{r4, lr}
   38f7e:	6843      	ldr	r3, [r0, #4]
   38f80:	4a0e      	ldr	r2, [pc, #56]	@ (38fbc <_ZNSt12length_errorD0Ev+0x40>)
   38f82:	490f      	ldr	r1, [pc, #60]	@ (38fc0 <_ZNSt12length_errorD0Ev+0x44>)
   38f84:	4604      	mov	r4, r0
   38f86:	f1a3 000c 	sub.w	r0, r3, #12
   38f8a:	4290      	cmp	r0, r2
   38f8c:	b082      	sub	sp, #8
   38f8e:	6021      	str	r1, [r4, #0]
   38f90:	d108      	bne.n	38fa4 <_ZNSt12length_errorD0Ev+0x28>
   38f92:	4620      	mov	r0, r4
   38f94:	f7ff fa82 	bl	3849c <_ZNSt9exceptionD1Ev>
   38f98:	4620      	mov	r0, r4
   38f9a:	f7fc fa47 	bl	3542c <_ZdlPv>
   38f9e:	4620      	mov	r0, r4
   38fa0:	b002      	add	sp, #8
   38fa2:	bd10      	pop	{r4, pc}
   38fa4:	f853 2c04 	ldr.w	r2, [r3, #-4]
   38fa8:	1e51      	subs	r1, r2, #1
   38faa:	2a00      	cmp	r2, #0
   38fac:	f843 1c04 	str.w	r1, [r3, #-4]
   38fb0:	dcef      	bgt.n	38f92 <_ZNSt12length_errorD0Ev+0x16>
   38fb2:	a901      	add	r1, sp, #4
   38fb4:	f000 f87c 	bl	390b0 <_ZNSs4_Rep10_M_destroyERKSaIcE>
   38fb8:	e7eb      	b.n	38f92 <_ZNSt12length_errorD0Ev+0x16>
   38fba:	bf00      	nop
   38fbc:	10053848 	.word	0x10053848
   38fc0:	0004c340 	.word	0x0004c340

00038fc4 <_ZNSt11logic_errorC1EPKc>:
   38fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   38fc6:	4b1b      	ldr	r3, [pc, #108]	@ (39034 <_ZNSt11logic_errorC1EPKc+0x70>)
   38fc8:	6003      	str	r3, [r0, #0]
   38fca:	b083      	sub	sp, #12
   38fcc:	4604      	mov	r4, r0
   38fce:	b349      	cbz	r1, 39024 <_ZNSt11logic_errorC1EPKc+0x60>
   38fd0:	4608      	mov	r0, r1
   38fd2:	460d      	mov	r5, r1
   38fd4:	f7df fb74 	bl	186c0 <strlen>
   38fd8:	4607      	mov	r7, r0
   38fda:	b920      	cbnz	r0, 38fe6 <_ZNSt11logic_errorC1EPKc+0x22>
   38fdc:	4b16      	ldr	r3, [pc, #88]	@ (39038 <_ZNSt11logic_errorC1EPKc+0x74>)
   38fde:	6063      	str	r3, [r4, #4]
   38fe0:	4620      	mov	r0, r4
   38fe2:	b003      	add	sp, #12
   38fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   38fe6:	aa01      	add	r2, sp, #4
   38fe8:	2100      	movs	r1, #0
   38fea:	f000 f835 	bl	39058 <_ZNSs4_Rep9_S_createEjjRKSaIcE>
   38fee:	2f01      	cmp	r7, #1
   38ff0:	4606      	mov	r6, r0
   38ff2:	f100 030c 	add.w	r3, r0, #12
   38ff6:	d00c      	beq.n	39012 <_ZNSt11logic_errorC1EPKc+0x4e>
   38ff8:	4618      	mov	r0, r3
   38ffa:	4629      	mov	r1, r5
   38ffc:	463a      	mov	r2, r7
   38ffe:	f7df fabf 	bl	18580 <memcpy>
   39002:	4603      	mov	r3, r0
   39004:	4a0d      	ldr	r2, [pc, #52]	@ (3903c <_ZNSt11logic_errorC1EPKc+0x78>)
   39006:	4296      	cmp	r6, r2
   39008:	d106      	bne.n	39018 <_ZNSt11logic_errorC1EPKc+0x54>
   3900a:	4620      	mov	r0, r4
   3900c:	6063      	str	r3, [r4, #4]
   3900e:	b003      	add	sp, #12
   39010:	bdf0      	pop	{r4, r5, r6, r7, pc}
   39012:	782a      	ldrb	r2, [r5, #0]
   39014:	7302      	strb	r2, [r0, #12]
   39016:	e7f5      	b.n	39004 <_ZNSt11logic_errorC1EPKc+0x40>
   39018:	2200      	movs	r2, #0
   3901a:	60b2      	str	r2, [r6, #8]
   3901c:	6037      	str	r7, [r6, #0]
   3901e:	443e      	add	r6, r7
   39020:	7332      	strb	r2, [r6, #12]
   39022:	e7f2      	b.n	3900a <_ZNSt11logic_errorC1EPKc+0x46>
   39024:	4806      	ldr	r0, [pc, #24]	@ (39040 <_ZNSt11logic_errorC1EPKc+0x7c>)
   39026:	f7ff f801 	bl	3802c <_ZSt19__throw_logic_errorPKc>
   3902a:	4620      	mov	r0, r4
   3902c:	f7ff fa36 	bl	3849c <_ZNSt9exceptionD1Ev>
   39030:	f7ff f96c 	bl	3830c <__cxa_end_cleanup>
   39034:	0004c340 	.word	0x0004c340
   39038:	10053854 	.word	0x10053854
   3903c:	10053848 	.word	0x10053848
   39040:	000441b0 	.word	0x000441b0

00039044 <_ZNSt12length_errorC1EPKc>:
   39044:	b510      	push	{r4, lr}
   39046:	4604      	mov	r4, r0
   39048:	f7ff ffbc 	bl	38fc4 <_ZNSt11logic_errorC1EPKc>
   3904c:	4b01      	ldr	r3, [pc, #4]	@ (39054 <_ZNSt12length_errorC1EPKc+0x10>)
   3904e:	6023      	str	r3, [r4, #0]
   39050:	4620      	mov	r0, r4
   39052:	bd10      	pop	{r4, pc}
   39054:	0004c354 	.word	0x0004c354

00039058 <_ZNSs4_Rep9_S_createEjjRKSaIcE>:
   39058:	4b13      	ldr	r3, [pc, #76]	@ (390a8 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x50>)
   3905a:	4298      	cmp	r0, r3
   3905c:	b510      	push	{r4, lr}
   3905e:	d81f      	bhi.n	390a0 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x48>
   39060:	4288      	cmp	r0, r1
   39062:	4604      	mov	r4, r0
   39064:	d914      	bls.n	39090 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x38>
   39066:	004a      	lsls	r2, r1, #1
   39068:	4290      	cmp	r0, r2
   3906a:	bf38      	it	cc
   3906c:	4614      	movcc	r4, r2
   3906e:	f104 021d 	add.w	r2, r4, #29
   39072:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
   39076:	f104 000d 	add.w	r0, r4, #13
   3907a:	d90b      	bls.n	39094 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x3c>
   3907c:	42a1      	cmp	r1, r4
   3907e:	d209      	bcs.n	39094 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x3c>
   39080:	f504 5480 	add.w	r4, r4, #4096	@ 0x1000
   39084:	f3c2 020b 	ubfx	r2, r2, #0, #12
   39088:	1aa4      	subs	r4, r4, r2
   3908a:	429c      	cmp	r4, r3
   3908c:	bf28      	it	cs
   3908e:	461c      	movcs	r4, r3
   39090:	f104 000d 	add.w	r0, r4, #13
   39094:	f7fc f9c6 	bl	35424 <_Znwj>
   39098:	2200      	movs	r2, #0
   3909a:	e9c0 4201 	strd	r4, r2, [r0, #4]
   3909e:	bd10      	pop	{r4, pc}
   390a0:	4802      	ldr	r0, [pc, #8]	@ (390ac <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x54>)
   390a2:	f7fe ffdb 	bl	3805c <_ZSt20__throw_length_errorPKc>
   390a6:	bf00      	nop
   390a8:	3ffffffc 	.word	0x3ffffffc
   390ac:	000441dc 	.word	0x000441dc

000390b0 <_ZNSs4_Rep10_M_destroyERKSaIcE>:
   390b0:	f7fc b9bc 	b.w	3542c <_ZdlPv>

000390b4 <d_make_comp>:
   390b4:	2931      	cmp	r1, #49	@ 0x31
   390b6:	b570      	push	{r4, r5, r6, lr}
   390b8:	4684      	mov	ip, r0
   390ba:	d83c      	bhi.n	39136 <d_make_comp+0x82>
   390bc:	2928      	cmp	r1, #40	@ 0x28
   390be:	d90a      	bls.n	390d6 <d_make_comp+0x22>
   390c0:	f1a1 0029 	sub.w	r0, r1, #41	@ 0x29
   390c4:	2808      	cmp	r0, #8
   390c6:	d834      	bhi.n	39132 <d_make_comp+0x7e>
   390c8:	e8df f000 	tbb	[pc, r0]
   390cc:	3318191a 	.word	0x3318191a
   390d0:	411a1a18 	.word	0x411a1a18
   390d4:	19          	.byte	0x19
   390d5:	00          	.byte	0x00
   390d6:	290a      	cmp	r1, #10
   390d8:	d90e      	bls.n	390f8 <d_make_comp+0x44>
   390da:	f1a1 050b 	sub.w	r5, r1, #11
   390de:	482f      	ldr	r0, [pc, #188]	@ (3919c <d_make_comp+0xe8>)
   390e0:	b2ed      	uxtb	r5, r5
   390e2:	2401      	movs	r4, #1
   390e4:	40ac      	lsls	r4, r5
   390e6:	4020      	ands	r0, r4
   390e8:	bb88      	cbnz	r0, 3914e <d_make_comp+0x9a>
   390ea:	f414 1f7f 	tst.w	r4, #4177920	@ 0x3fc000
   390ee:	d107      	bne.n	39100 <d_make_comp+0x4c>
   390f0:	482b      	ldr	r0, [pc, #172]	@ (391a0 <d_make_comp+0xec>)
   390f2:	4020      	ands	r0, r4
   390f4:	b910      	cbnz	r0, 390fc <d_make_comp+0x48>
   390f6:	bd70      	pop	{r4, r5, r6, pc}
   390f8:	2904      	cmp	r1, #4
   390fa:	d816      	bhi.n	3912a <d_make_comp+0x76>
   390fc:	b1ca      	cbz	r2, 39132 <d_make_comp+0x7e>
   390fe:	b1c3      	cbz	r3, 39132 <d_make_comp+0x7e>
   39100:	e9dc 4005 	ldrd	r4, r0, [ip, #20]
   39104:	4284      	cmp	r4, r0
   39106:	da14      	bge.n	39132 <d_make_comp+0x7e>
   39108:	f8dc 5010 	ldr.w	r5, [ip, #16]
   3910c:	eb04 0e84 	add.w	lr, r4, r4, lsl #2
   39110:	eb05 008e 	add.w	r0, r5, lr, lsl #2
   39114:	3401      	adds	r4, #1
   39116:	2600      	movs	r6, #0
   39118:	e9c0 6601 	strd	r6, r6, [r0, #4]
   3911c:	f8cc 4014 	str.w	r4, [ip, #20]
   39120:	f805 102e 	strb.w	r1, [r5, lr, lsl #2]
   39124:	e9c0 2303 	strd	r2, r3, [r0, #12]
   39128:	bd70      	pop	{r4, r5, r6, pc}
   3912a:	f1a1 0009 	sub.w	r0, r1, #9
   3912e:	2801      	cmp	r0, #1
   39130:	d90d      	bls.n	3914e <d_make_comp+0x9a>
   39132:	2000      	movs	r0, #0
   39134:	bd70      	pop	{r4, r5, r6, pc}
   39136:	294f      	cmp	r1, #79	@ 0x4f
   39138:	d80c      	bhi.n	39154 <d_make_comp+0xa0>
   3913a:	2933      	cmp	r1, #51	@ 0x33
   3913c:	d9f9      	bls.n	39132 <d_make_comp+0x7e>
   3913e:	f1a1 0534 	sub.w	r5, r1, #52	@ 0x34
   39142:	4818      	ldr	r0, [pc, #96]	@ (391a4 <d_make_comp+0xf0>)
   39144:	b2ed      	uxtb	r5, r5
   39146:	2401      	movs	r4, #1
   39148:	40ac      	lsls	r4, r5
   3914a:	4020      	ands	r0, r4
   3914c:	b1f0      	cbz	r0, 3918c <d_make_comp+0xd8>
   3914e:	2a00      	cmp	r2, #0
   39150:	d1d6      	bne.n	39100 <d_make_comp+0x4c>
   39152:	e7ee      	b.n	39132 <d_make_comp+0x7e>
   39154:	f1a1 0052 	sub.w	r0, r1, #82	@ 0x52
   39158:	2809      	cmp	r0, #9
   3915a:	d8d1      	bhi.n	39100 <d_make_comp+0x4c>
   3915c:	a401      	add	r4, pc, #4	@ (adr r4, 39164 <d_make_comp+0xb0>)
   3915e:	f854 f020 	ldr.w	pc, [r4, r0, lsl #2]
   39162:	bf00      	nop
   39164:	0003914f 	.word	0x0003914f
   39168:	000390ff 	.word	0x000390ff
   3916c:	000390ff 	.word	0x000390ff
   39170:	000390fd 	.word	0x000390fd
   39174:	0003914f 	.word	0x0003914f
   39178:	0003914f 	.word	0x0003914f
   3917c:	00039101 	.word	0x00039101
   39180:	0003914f 	.word	0x0003914f
   39184:	0003914f 	.word	0x0003914f
   39188:	0003914f 	.word	0x0003914f
   3918c:	4806      	ldr	r0, [pc, #24]	@ (391a8 <d_make_comp+0xf4>)
   3918e:	4020      	ands	r0, r4
   39190:	2800      	cmp	r0, #0
   39192:	d1b3      	bne.n	390fc <d_make_comp+0x48>
   39194:	294e      	cmp	r1, #78	@ 0x4e
   39196:	d0b3      	beq.n	39100 <d_make_comp+0x4c>
   39198:	bd70      	pop	{r4, r5, r6, pc}
   3919a:	bf00      	nop
   3919c:	2f801ffe 	.word	0x2f801ffe
   391a0:	00400001 	.word	0x00400001
   391a4:	01c71107 	.word	0x01c71107
   391a8:	0a002ef8 	.word	0x0a002ef8

000391ac <d_number>:
   391ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   391ae:	68c2      	ldr	r2, [r0, #12]
   391b0:	7811      	ldrb	r1, [r2, #0]
   391b2:	296e      	cmp	r1, #110	@ 0x6e
   391b4:	4686      	mov	lr, r0
   391b6:	d025      	beq.n	39204 <d_number+0x58>
   391b8:	3930      	subs	r1, #48	@ 0x30
   391ba:	b2cb      	uxtb	r3, r1
   391bc:	2b09      	cmp	r3, #9
   391be:	d82b      	bhi.n	39218 <d_number+0x6c>
   391c0:	2600      	movs	r6, #0
   391c2:	4d16      	ldr	r5, [pc, #88]	@ (3921c <d_number+0x70>)
   391c4:	2000      	movs	r0, #0
   391c6:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
   391ca:	e002      	b.n	391d2 <d_number+0x26>
   391cc:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
   391d0:	dc15      	bgt.n	391fe <d_number+0x52>
   391d2:	3201      	adds	r2, #1
   391d4:	f8ce 200c 	str.w	r2, [lr, #12]
   391d8:	7813      	ldrb	r3, [r2, #0]
   391da:	3b30      	subs	r3, #48	@ 0x30
   391dc:	fa5f fc83 	uxtb.w	ip, r3
   391e0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   391e4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
   391e8:	f1bc 0f09 	cmp.w	ip, #9
   391ec:	4619      	mov	r1, r3
   391ee:	eba4 0303 	sub.w	r3, r4, r3
   391f2:	fba5 7303 	umull	r7, r3, r5, r3
   391f6:	d9e9      	bls.n	391cc <d_number+0x20>
   391f8:	b106      	cbz	r6, 391fc <d_number+0x50>
   391fa:	4240      	negs	r0, r0
   391fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   391fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   39202:	bdf0      	pop	{r4, r5, r6, r7, pc}
   39204:	1c53      	adds	r3, r2, #1
   39206:	60c3      	str	r3, [r0, #12]
   39208:	7851      	ldrb	r1, [r2, #1]
   3920a:	3930      	subs	r1, #48	@ 0x30
   3920c:	b2ca      	uxtb	r2, r1
   3920e:	2a09      	cmp	r2, #9
   39210:	d802      	bhi.n	39218 <d_number+0x6c>
   39212:	461a      	mov	r2, r3
   39214:	2601      	movs	r6, #1
   39216:	e7d4      	b.n	391c2 <d_number+0x16>
   39218:	2000      	movs	r0, #0
   3921a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3921c:	cccccccd 	.word	0xcccccccd

00039220 <d_call_offset>:
   39220:	b510      	push	{r4, lr}
   39222:	4604      	mov	r4, r0
   39224:	b929      	cbnz	r1, 39232 <d_call_offset+0x12>
   39226:	68c3      	ldr	r3, [r0, #12]
   39228:	781a      	ldrb	r2, [r3, #0]
   3922a:	b16a      	cbz	r2, 39248 <d_call_offset+0x28>
   3922c:	1c5a      	adds	r2, r3, #1
   3922e:	60c2      	str	r2, [r0, #12]
   39230:	7819      	ldrb	r1, [r3, #0]
   39232:	2968      	cmp	r1, #104	@ 0x68
   39234:	d00c      	beq.n	39250 <d_call_offset+0x30>
   39236:	2976      	cmp	r1, #118	@ 0x76
   39238:	d106      	bne.n	39248 <d_call_offset+0x28>
   3923a:	4620      	mov	r0, r4
   3923c:	f7ff ffb6 	bl	391ac <d_number>
   39240:	68e3      	ldr	r3, [r4, #12]
   39242:	781a      	ldrb	r2, [r3, #0]
   39244:	2a5f      	cmp	r2, #95	@ 0x5f
   39246:	d001      	beq.n	3924c <d_call_offset+0x2c>
   39248:	2000      	movs	r0, #0
   3924a:	bd10      	pop	{r4, pc}
   3924c:	3301      	adds	r3, #1
   3924e:	60e3      	str	r3, [r4, #12]
   39250:	4620      	mov	r0, r4
   39252:	f7ff ffab 	bl	391ac <d_number>
   39256:	68e3      	ldr	r3, [r4, #12]
   39258:	781a      	ldrb	r2, [r3, #0]
   3925a:	2a5f      	cmp	r2, #95	@ 0x5f
   3925c:	d1f4      	bne.n	39248 <d_call_offset+0x28>
   3925e:	3301      	adds	r3, #1
   39260:	60e3      	str	r3, [r4, #12]
   39262:	2001      	movs	r0, #1
   39264:	bd10      	pop	{r4, pc}
   39266:	bf00      	nop

00039268 <d_discriminator>:
   39268:	68c3      	ldr	r3, [r0, #12]
   3926a:	781a      	ldrb	r2, [r3, #0]
   3926c:	2a5f      	cmp	r2, #95	@ 0x5f
   3926e:	d001      	beq.n	39274 <d_discriminator+0xc>
   39270:	2001      	movs	r0, #1
   39272:	4770      	bx	lr
   39274:	b510      	push	{r4, lr}
   39276:	1c5a      	adds	r2, r3, #1
   39278:	60c2      	str	r2, [r0, #12]
   3927a:	785a      	ldrb	r2, [r3, #1]
   3927c:	2a5f      	cmp	r2, #95	@ 0x5f
   3927e:	4604      	mov	r4, r0
   39280:	d004      	beq.n	3928c <d_discriminator+0x24>
   39282:	f7ff ff93 	bl	391ac <d_number>
   39286:	43c0      	mvns	r0, r0
   39288:	0fc0      	lsrs	r0, r0, #31
   3928a:	bd10      	pop	{r4, pc}
   3928c:	3302      	adds	r3, #2
   3928e:	60c3      	str	r3, [r0, #12]
   39290:	f7ff ff8c 	bl	391ac <d_number>
   39294:	2800      	cmp	r0, #0
   39296:	db07      	blt.n	392a8 <d_discriminator+0x40>
   39298:	2809      	cmp	r0, #9
   3929a:	dc01      	bgt.n	392a0 <d_discriminator+0x38>
   3929c:	2001      	movs	r0, #1
   3929e:	bd10      	pop	{r4, pc}
   392a0:	68e3      	ldr	r3, [r4, #12]
   392a2:	781a      	ldrb	r2, [r3, #0]
   392a4:	2a5f      	cmp	r2, #95	@ 0x5f
   392a6:	d001      	beq.n	392ac <d_discriminator+0x44>
   392a8:	2000      	movs	r0, #0
   392aa:	bd10      	pop	{r4, pc}
   392ac:	3301      	adds	r3, #1
   392ae:	60e3      	str	r3, [r4, #12]
   392b0:	e7f4      	b.n	3929c <d_discriminator+0x34>
   392b2:	bf00      	nop

000392b4 <d_count_templates_scopes>:
   392b4:	2900      	cmp	r1, #0
   392b6:	f000 8091 	beq.w	393dc <d_count_templates_scopes+0x128>
   392ba:	b538      	push	{r3, r4, r5, lr}
   392bc:	4605      	mov	r5, r0
   392be:	460c      	mov	r4, r1
   392c0:	68a2      	ldr	r2, [r4, #8]
   392c2:	2a01      	cmp	r2, #1
   392c4:	dc35      	bgt.n	39332 <d_count_templates_scopes+0x7e>
   392c6:	f8d5 011c 	ldr.w	r0, [r5, #284]	@ 0x11c
   392ca:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
   392ce:	dc30      	bgt.n	39332 <d_count_templates_scopes+0x7e>
   392d0:	7823      	ldrb	r3, [r4, #0]
   392d2:	3201      	adds	r2, #1
   392d4:	2b41      	cmp	r3, #65	@ 0x41
   392d6:	60a2      	str	r2, [r4, #8]
   392d8:	d82c      	bhi.n	39334 <d_count_templates_scopes+0x80>
   392da:	2b22      	cmp	r3, #34	@ 0x22
   392dc:	d818      	bhi.n	39310 <d_count_templates_scopes+0x5c>
   392de:	3b01      	subs	r3, #1
   392e0:	b2da      	uxtb	r2, r3
   392e2:	2a21      	cmp	r2, #33	@ 0x21
   392e4:	d825      	bhi.n	39332 <d_count_templates_scopes+0x7e>
   392e6:	2b21      	cmp	r3, #33	@ 0x21
   392e8:	d823      	bhi.n	39332 <d_count_templates_scopes+0x7e>
   392ea:	e8df f003 	tbb	[pc, r3]
   392ee:	5151      	.short	0x5151
   392f0:	22227051 	.word	0x22227051
   392f4:	51511f1f 	.word	0x51511f1f
   392f8:	51515151 	.word	0x51515151
   392fc:	51515151 	.word	0x51515151
   39300:	51515151 	.word	0x51515151
   39304:	51512251 	.word	0x51512251
   39308:	51515151 	.word	0x51515151
   3930c:	51515151 	.word	0x51515151
   39310:	f1a3 0c23 	sub.w	ip, r3, #35	@ 0x23
   39314:	4932      	ldr	r1, [pc, #200]	@ (393e0 <d_count_templates_scopes+0x12c>)
   39316:	fa5f fc8c 	uxtb.w	ip, ip
   3931a:	2201      	movs	r2, #1
   3931c:	fa02 f20c 	lsl.w	r2, r2, ip
   39320:	4011      	ands	r1, r2
   39322:	bba9      	cbnz	r1, 39390 <d_count_templates_scopes+0xdc>
   39324:	0792      	lsls	r2, r2, #30
   39326:	d148      	bne.n	393ba <d_count_templates_scopes+0x106>
   39328:	2b33      	cmp	r3, #51	@ 0x33
   3932a:	d102      	bne.n	39332 <d_count_templates_scopes+0x7e>
   3932c:	6924      	ldr	r4, [r4, #16]
   3932e:	2c00      	cmp	r4, #0
   39330:	d1c6      	bne.n	392c0 <d_count_templates_scopes+0xc>
   39332:	bd38      	pop	{r3, r4, r5, pc}
   39334:	3b44      	subs	r3, #68	@ 0x44
   39336:	b2da      	uxtb	r2, r3
   39338:	2a11      	cmp	r2, #17
   3933a:	d8fa      	bhi.n	39332 <d_count_templates_scopes+0x7e>
   3933c:	2b11      	cmp	r3, #17
   3933e:	d8f8      	bhi.n	39332 <d_count_templates_scopes+0x7e>
   39340:	a201      	add	r2, pc, #4	@ (adr r2, 39348 <d_count_templates_scopes+0x94>)
   39342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   39346:	bf00      	nop
   39348:	00039391 	.word	0x00039391
   3934c:	000393b3 	.word	0x000393b3
   39350:	000393b3 	.word	0x000393b3
   39354:	000393b3 	.word	0x000393b3
   39358:	000393b3 	.word	0x000393b3
   3935c:	00039333 	.word	0x00039333
   39360:	00039391 	.word	0x00039391
   39364:	00039391 	.word	0x00039391
   39368:	00039391 	.word	0x00039391
   3936c:	00039391 	.word	0x00039391
   39370:	00039391 	.word	0x00039391
   39374:	00039391 	.word	0x00039391
   39378:	00039391 	.word	0x00039391
   3937c:	00039391 	.word	0x00039391
   39380:	00039333 	.word	0x00039333
   39384:	00039333 	.word	0x00039333
   39388:	00039333 	.word	0x00039333
   3938c:	000393b3 	.word	0x000393b3
   39390:	68e1      	ldr	r1, [r4, #12]
   39392:	3001      	adds	r0, #1
   39394:	f8c5 011c 	str.w	r0, [r5, #284]	@ 0x11c
   39398:	4628      	mov	r0, r5
   3939a:	f7ff ff8b 	bl	392b4 <d_count_templates_scopes>
   3939e:	6921      	ldr	r1, [r4, #16]
   393a0:	4628      	mov	r0, r5
   393a2:	f7ff ff87 	bl	392b4 <d_count_templates_scopes>
   393a6:	f8d5 311c 	ldr.w	r3, [r5, #284]	@ 0x11c
   393aa:	3b01      	subs	r3, #1
   393ac:	f8c5 311c 	str.w	r3, [r5, #284]	@ 0x11c
   393b0:	bd38      	pop	{r3, r4, r5, pc}
   393b2:	68e4      	ldr	r4, [r4, #12]
   393b4:	2c00      	cmp	r4, #0
   393b6:	d183      	bne.n	392c0 <d_count_templates_scopes+0xc>
   393b8:	e7bb      	b.n	39332 <d_count_templates_scopes+0x7e>
   393ba:	68e1      	ldr	r1, [r4, #12]
   393bc:	780b      	ldrb	r3, [r1, #0]
   393be:	2b05      	cmp	r3, #5
   393c0:	d1e7      	bne.n	39392 <d_count_templates_scopes+0xde>
   393c2:	f8d5 3138 	ldr.w	r3, [r5, #312]	@ 0x138
   393c6:	3301      	adds	r3, #1
   393c8:	f8c5 3138 	str.w	r3, [r5, #312]	@ 0x138
   393cc:	e7e1      	b.n	39392 <d_count_templates_scopes+0xde>
   393ce:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
   393d2:	68e1      	ldr	r1, [r4, #12]
   393d4:	3301      	adds	r3, #1
   393d6:	f8c5 3144 	str.w	r3, [r5, #324]	@ 0x144
   393da:	e7da      	b.n	39392 <d_count_templates_scopes+0xde>
   393dc:	4770      	bx	lr
   393de:	bf00      	nop
   393e0:	7ffe7dec 	.word	0x7ffe7dec

000393e4 <d_index_template_argument.part.0>:
   393e4:	b920      	cbnz	r0, 393f0 <d_index_template_argument.part.0+0xc>
   393e6:	e009      	b.n	393fc <d_index_template_argument.part.0+0x18>
   393e8:	b139      	cbz	r1, 393fa <d_index_template_argument.part.0+0x16>
   393ea:	6900      	ldr	r0, [r0, #16]
   393ec:	3901      	subs	r1, #1
   393ee:	b130      	cbz	r0, 393fe <d_index_template_argument.part.0+0x1a>
   393f0:	7803      	ldrb	r3, [r0, #0]
   393f2:	2b2f      	cmp	r3, #47	@ 0x2f
   393f4:	d0f8      	beq.n	393e8 <d_index_template_argument.part.0+0x4>
   393f6:	2000      	movs	r0, #0
   393f8:	4770      	bx	lr
   393fa:	68c0      	ldr	r0, [r0, #12]
   393fc:	4770      	bx	lr
   393fe:	4770      	bx	lr

00039400 <d_growable_string_callback_adapter>:
   39400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   39404:	4614      	mov	r4, r2
   39406:	6852      	ldr	r2, [r2, #4]
   39408:	68a5      	ldr	r5, [r4, #8]
   3940a:	f8d4 800c 	ldr.w	r8, [r4, #12]
   3940e:	1c4b      	adds	r3, r1, #1
   39410:	4413      	add	r3, r2
   39412:	42ab      	cmp	r3, r5
   39414:	b082      	sub	sp, #8
   39416:	460e      	mov	r6, r1
   39418:	4607      	mov	r7, r0
   3941a:	d814      	bhi.n	39446 <d_growable_string_callback_adapter+0x46>
   3941c:	f1b8 0f00 	cmp.w	r8, #0
   39420:	d10e      	bne.n	39440 <d_growable_string_callback_adapter+0x40>
   39422:	6863      	ldr	r3, [r4, #4]
   39424:	6820      	ldr	r0, [r4, #0]
   39426:	4632      	mov	r2, r6
   39428:	4418      	add	r0, r3
   3942a:	4639      	mov	r1, r7
   3942c:	f7df f8a8 	bl	18580 <memcpy>
   39430:	e9d4 3200 	ldrd	r3, r2, [r4]
   39434:	4433      	add	r3, r6
   39436:	f803 8002 	strb.w	r8, [r3, r2]
   3943a:	6863      	ldr	r3, [r4, #4]
   3943c:	4433      	add	r3, r6
   3943e:	6063      	str	r3, [r4, #4]
   39440:	b002      	add	sp, #8
   39442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   39446:	f1b8 0f00 	cmp.w	r8, #0
   3944a:	d1f9      	bne.n	39440 <d_growable_string_callback_adapter+0x40>
   3944c:	b17d      	cbz	r5, 3946e <d_growable_string_callback_adapter+0x6e>
   3944e:	006d      	lsls	r5, r5, #1
   39450:	42ab      	cmp	r3, r5
   39452:	d8fc      	bhi.n	3944e <d_growable_string_callback_adapter+0x4e>
   39454:	6820      	ldr	r0, [r4, #0]
   39456:	4629      	mov	r1, r5
   39458:	f006 fa26 	bl	3f8a8 <realloc>
   3945c:	b160      	cbz	r0, 39478 <d_growable_string_callback_adapter+0x78>
   3945e:	f8d4 800c 	ldr.w	r8, [r4, #12]
   39462:	6020      	str	r0, [r4, #0]
   39464:	60a5      	str	r5, [r4, #8]
   39466:	f1b8 0f00 	cmp.w	r8, #0
   3946a:	d0da      	beq.n	39422 <d_growable_string_callback_adapter+0x22>
   3946c:	e7e8      	b.n	39440 <d_growable_string_callback_adapter+0x40>
   3946e:	2b02      	cmp	r3, #2
   39470:	f04f 0502 	mov.w	r5, #2
   39474:	d8eb      	bhi.n	3944e <d_growable_string_callback_adapter+0x4e>
   39476:	e7ed      	b.n	39454 <d_growable_string_callback_adapter+0x54>
   39478:	9001      	str	r0, [sp, #4]
   3947a:	6820      	ldr	r0, [r4, #0]
   3947c:	f006 fa0c 	bl	3f898 <free>
   39480:	9b01      	ldr	r3, [sp, #4]
   39482:	2201      	movs	r2, #1
   39484:	e9c4 3300 	strd	r3, r3, [r4]
   39488:	e9c4 3202 	strd	r3, r2, [r4, #8]
   3948c:	e7d8      	b.n	39440 <d_growable_string_callback_adapter+0x40>
   3948e:	bf00      	nop

00039490 <next_is_type_qual.isra.0>:
   39490:	7803      	ldrb	r3, [r0, #0]
   39492:	2b4b      	cmp	r3, #75	@ 0x4b
   39494:	d017      	beq.n	394c6 <next_is_type_qual.isra.0+0x36>
   39496:	d80e      	bhi.n	394b6 <next_is_type_qual.isra.0+0x26>
   39498:	2b44      	cmp	r3, #68	@ 0x44
   3949a:	d116      	bne.n	394ca <next_is_type_qual.isra.0+0x3a>
   3949c:	7840      	ldrb	r0, [r0, #1]
   3949e:	f1a0 0377 	sub.w	r3, r0, #119	@ 0x77
   394a2:	2b01      	cmp	r3, #1
   394a4:	d90f      	bls.n	394c6 <next_is_type_qual.isra.0+0x36>
   394a6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
   394aa:	f1a0 004f 	sub.w	r0, r0, #79	@ 0x4f
   394ae:	fab0 f080 	clz	r0, r0
   394b2:	0940      	lsrs	r0, r0, #5
   394b4:	4770      	bx	lr
   394b6:	2b56      	cmp	r3, #86	@ 0x56
   394b8:	d005      	beq.n	394c6 <next_is_type_qual.isra.0+0x36>
   394ba:	f1a3 0072 	sub.w	r0, r3, #114	@ 0x72
   394be:	fab0 f080 	clz	r0, r0
   394c2:	0940      	lsrs	r0, r0, #5
   394c4:	4770      	bx	lr
   394c6:	2001      	movs	r0, #1
   394c8:	4770      	bx	lr
   394ca:	2000      	movs	r0, #0
   394cc:	4770      	bx	lr
   394ce:	bf00      	nop

000394d0 <d_append_char>:
   394d0:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
   394d4:	2bff      	cmp	r3, #255	@ 0xff
   394d6:	b570      	push	{r4, r5, r6, lr}
   394d8:	4604      	mov	r4, r0
   394da:	460d      	mov	r5, r1
   394dc:	d006      	beq.n	394ec <d_append_char+0x1c>
   394de:	1c5a      	adds	r2, r3, #1
   394e0:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
   394e4:	54e5      	strb	r5, [r4, r3]
   394e6:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   394ea:	bd70      	pop	{r4, r5, r6, pc}
   394ec:	2600      	movs	r6, #0
   394ee:	4619      	mov	r1, r3
   394f0:	f880 60ff 	strb.w	r6, [r0, #255]	@ 0xff
   394f4:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	@ 0x108
   394f8:	4798      	blx	r3
   394fa:	f8d4 1128 	ldr.w	r1, [r4, #296]	@ 0x128
   394fe:	2201      	movs	r2, #1
   39500:	4633      	mov	r3, r6
   39502:	4411      	add	r1, r2
   39504:	f8c4 1128 	str.w	r1, [r4, #296]	@ 0x128
   39508:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
   3950c:	54e5      	strb	r5, [r4, r3]
   3950e:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   39512:	bd70      	pop	{r4, r5, r6, pc}

00039514 <d_lookup_template_argument>:
   39514:	f8d0 3110 	ldr.w	r3, [r0, #272]	@ 0x110
   39518:	b18b      	cbz	r3, 3953e <d_lookup_template_argument+0x2a>
   3951a:	685a      	ldr	r2, [r3, #4]
   3951c:	68cb      	ldr	r3, [r1, #12]
   3951e:	6910      	ldr	r0, [r2, #16]
   39520:	2b00      	cmp	r3, #0
   39522:	db0b      	blt.n	3953c <d_lookup_template_argument+0x28>
   39524:	b920      	cbnz	r0, 39530 <d_lookup_template_argument+0x1c>
   39526:	e006      	b.n	39536 <d_lookup_template_argument+0x22>
   39528:	b13b      	cbz	r3, 3953a <d_lookup_template_argument+0x26>
   3952a:	6900      	ldr	r0, [r0, #16]
   3952c:	3b01      	subs	r3, #1
   3952e:	b110      	cbz	r0, 39536 <d_lookup_template_argument+0x22>
   39530:	7802      	ldrb	r2, [r0, #0]
   39532:	2a2f      	cmp	r2, #47	@ 0x2f
   39534:	d0f8      	beq.n	39528 <d_lookup_template_argument+0x14>
   39536:	2000      	movs	r0, #0
   39538:	4770      	bx	lr
   3953a:	68c0      	ldr	r0, [r0, #12]
   3953c:	4770      	bx	lr
   3953e:	2301      	movs	r3, #1
   39540:	f8c0 3118 	str.w	r3, [r0, #280]	@ 0x118
   39544:	e7f7      	b.n	39536 <d_lookup_template_argument+0x22>
   39546:	bf00      	nop

00039548 <d_find_pack>:
   39548:	2900      	cmp	r1, #0
   3954a:	d041      	beq.n	395d0 <d_find_pack+0x88>
   3954c:	b538      	push	{r3, r4, r5, lr}
   3954e:	4605      	mov	r5, r0
   39550:	460c      	mov	r4, r1
   39552:	7823      	ldrb	r3, [r4, #0]
   39554:	2b33      	cmp	r3, #51	@ 0x33
   39556:	d81d      	bhi.n	39594 <d_find_pack+0x4c>
   39558:	2b33      	cmp	r3, #51	@ 0x33
   3955a:	d824      	bhi.n	395a6 <d_find_pack+0x5e>
   3955c:	e8df f003 	tbb	[pc, r3]
   39560:	2323232b 	.word	0x2323232b
   39564:	282b2d23 	.word	0x282b2d23
   39568:	23232328 	.word	0x23232328
   3956c:	23232323 	.word	0x23232323
   39570:	23232323 	.word	0x23232323
   39574:	23232323 	.word	0x23232323
   39578:	2323232b 	.word	0x2323232b
   3957c:	23232323 	.word	0x23232323
   39580:	23232323 	.word	0x23232323
   39584:	2b232323 	.word	0x2b232323
   39588:	23232323 	.word	0x23232323
   3958c:	23232323 	.word	0x23232323
   39590:	282b2323 	.word	0x282b2323
   39594:	3b42      	subs	r3, #66	@ 0x42
   39596:	b2db      	uxtb	r3, r3
   39598:	2b1a      	cmp	r3, #26
   3959a:	d804      	bhi.n	395a6 <d_find_pack+0x5e>
   3959c:	4a0d      	ldr	r2, [pc, #52]	@ (395d4 <d_find_pack+0x8c>)
   3959e:	fa22 f303 	lsr.w	r3, r2, r3
   395a2:	07db      	lsls	r3, r3, #31
   395a4:	d407      	bmi.n	395b6 <d_find_pack+0x6e>
   395a6:	68e1      	ldr	r1, [r4, #12]
   395a8:	4628      	mov	r0, r5
   395aa:	f7ff ffcd 	bl	39548 <d_find_pack>
   395ae:	b918      	cbnz	r0, 395b8 <d_find_pack+0x70>
   395b0:	6924      	ldr	r4, [r4, #16]
   395b2:	2c00      	cmp	r4, #0
   395b4:	d1cd      	bne.n	39552 <d_find_pack+0xa>
   395b6:	2000      	movs	r0, #0
   395b8:	bd38      	pop	{r3, r4, r5, pc}
   395ba:	4621      	mov	r1, r4
   395bc:	4628      	mov	r0, r5
   395be:	f7ff ffa9 	bl	39514 <d_lookup_template_argument>
   395c2:	2800      	cmp	r0, #0
   395c4:	d0f7      	beq.n	395b6 <d_find_pack+0x6e>
   395c6:	7803      	ldrb	r3, [r0, #0]
   395c8:	2b2f      	cmp	r3, #47	@ 0x2f
   395ca:	d0f5      	beq.n	395b8 <d_find_pack+0x70>
   395cc:	2000      	movs	r0, #0
   395ce:	e7f3      	b.n	395b8 <d_find_pack+0x70>
   395d0:	2000      	movs	r0, #0
   395d2:	4770      	bx	lr
   395d4:	04000ce3 	.word	0x04000ce3

000395d8 <d_append_string>:
   395d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   395dc:	4604      	mov	r4, r0
   395de:	4608      	mov	r0, r1
   395e0:	460d      	mov	r5, r1
   395e2:	f7df f86d 	bl	186c0 <strlen>
   395e6:	b340      	cbz	r0, 3963a <d_append_string+0x62>
   395e8:	3d01      	subs	r5, #1
   395ea:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   395ee:	182f      	adds	r7, r5, r0
   395f0:	f04f 0800 	mov.w	r8, #0
   395f4:	e009      	b.n	3960a <d_append_string+0x32>
   395f6:	460b      	mov	r3, r1
   395f8:	42bd      	cmp	r5, r7
   395fa:	f101 0101 	add.w	r1, r1, #1
   395fe:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   39602:	54e6      	strb	r6, [r4, r3]
   39604:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   39608:	d017      	beq.n	3963a <d_append_string+0x62>
   3960a:	29ff      	cmp	r1, #255	@ 0xff
   3960c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   39610:	d1f1      	bne.n	395f6 <d_append_string+0x1e>
   39612:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   39616:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3961a:	4620      	mov	r0, r4
   3961c:	4798      	blx	r3
   3961e:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   39622:	2101      	movs	r1, #1
   39624:	2300      	movs	r3, #0
   39626:	440a      	add	r2, r1
   39628:	42bd      	cmp	r5, r7
   3962a:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3962e:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   39632:	54e6      	strb	r6, [r4, r3]
   39634:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   39638:	d1e7      	bne.n	3960a <d_append_string+0x32>
   3963a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3963e:	bf00      	nop

00039640 <d_template_param>:
   39640:	b538      	push	{r3, r4, r5, lr}
   39642:	68c2      	ldr	r2, [r0, #12]
   39644:	7813      	ldrb	r3, [r2, #0]
   39646:	2b54      	cmp	r3, #84	@ 0x54
   39648:	d124      	bne.n	39694 <d_template_param+0x54>
   3964a:	1c53      	adds	r3, r2, #1
   3964c:	60c3      	str	r3, [r0, #12]
   3964e:	7852      	ldrb	r2, [r2, #1]
   39650:	2a5f      	cmp	r2, #95	@ 0x5f
   39652:	4604      	mov	r4, r0
   39654:	d020      	beq.n	39698 <d_template_param+0x58>
   39656:	2a6e      	cmp	r2, #110	@ 0x6e
   39658:	d01c      	beq.n	39694 <d_template_param+0x54>
   3965a:	f7ff fda7 	bl	391ac <d_number>
   3965e:	1c41      	adds	r1, r0, #1
   39660:	d418      	bmi.n	39694 <d_template_param+0x54>
   39662:	68e3      	ldr	r3, [r4, #12]
   39664:	781a      	ldrb	r2, [r3, #0]
   39666:	2a5f      	cmp	r2, #95	@ 0x5f
   39668:	d114      	bne.n	39694 <d_template_param+0x54>
   3966a:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
   3966e:	3301      	adds	r3, #1
   39670:	4282      	cmp	r2, r0
   39672:	60e3      	str	r3, [r4, #12]
   39674:	da0e      	bge.n	39694 <d_template_param+0x54>
   39676:	6923      	ldr	r3, [r4, #16]
   39678:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
   3967c:	eb03 008c 	add.w	r0, r3, ip, lsl #2
   39680:	3201      	adds	r2, #1
   39682:	2500      	movs	r5, #0
   39684:	e9c0 5501 	strd	r5, r5, [r0, #4]
   39688:	6162      	str	r2, [r4, #20]
   3968a:	2205      	movs	r2, #5
   3968c:	f803 202c 	strb.w	r2, [r3, ip, lsl #2]
   39690:	60c1      	str	r1, [r0, #12]
   39692:	bd38      	pop	{r3, r4, r5, pc}
   39694:	2000      	movs	r0, #0
   39696:	bd38      	pop	{r3, r4, r5, pc}
   39698:	2100      	movs	r1, #0
   3969a:	e7e6      	b.n	3966a <d_template_param+0x2a>

0003969c <d_append_num>:
   3969c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   396a0:	b088      	sub	sp, #32
   396a2:	460a      	mov	r2, r1
   396a4:	4604      	mov	r4, r0
   396a6:	491a      	ldr	r1, [pc, #104]	@ (39710 <d_append_num+0x74>)
   396a8:	a801      	add	r0, sp, #4
   396aa:	f006 f9b1 	bl	3fa10 <sprintf>
   396ae:	a801      	add	r0, sp, #4
   396b0:	f7df f806 	bl	186c0 <strlen>
   396b4:	b340      	cbz	r0, 39708 <d_append_num+0x6c>
   396b6:	ad01      	add	r5, sp, #4
   396b8:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   396bc:	182f      	adds	r7, r5, r0
   396be:	f04f 0800 	mov.w	r8, #0
   396c2:	e009      	b.n	396d8 <d_append_num+0x3c>
   396c4:	460b      	mov	r3, r1
   396c6:	42bd      	cmp	r5, r7
   396c8:	f101 0101 	add.w	r1, r1, #1
   396cc:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   396d0:	54e6      	strb	r6, [r4, r3]
   396d2:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   396d6:	d017      	beq.n	39708 <d_append_num+0x6c>
   396d8:	29ff      	cmp	r1, #255	@ 0xff
   396da:	f815 6b01 	ldrb.w	r6, [r5], #1
   396de:	d1f1      	bne.n	396c4 <d_append_num+0x28>
   396e0:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   396e4:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   396e8:	4620      	mov	r0, r4
   396ea:	4798      	blx	r3
   396ec:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   396f0:	2101      	movs	r1, #1
   396f2:	2300      	movs	r3, #0
   396f4:	440a      	add	r2, r1
   396f6:	42bd      	cmp	r5, r7
   396f8:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   396fc:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   39700:	54e6      	strb	r6, [r4, r3]
   39702:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   39706:	d1e7      	bne.n	396d8 <d_append_num+0x3c>
   39708:	b008      	add	sp, #32
   3970a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3970e:	bf00      	nop
   39710:	000441f4 	.word	0x000441f4

00039714 <d_source_name>:
   39714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   39718:	4604      	mov	r4, r0
   3971a:	f7ff fd47 	bl	391ac <d_number>
   3971e:	1e05      	subs	r5, r0, #0
   39720:	dd44      	ble.n	397ac <d_source_name+0x98>
   39722:	68e6      	ldr	r6, [r4, #12]
   39724:	6863      	ldr	r3, [r4, #4]
   39726:	1b9b      	subs	r3, r3, r6
   39728:	429d      	cmp	r5, r3
   3972a:	dc3b      	bgt.n	397a4 <d_source_name+0x90>
   3972c:	68a2      	ldr	r2, [r4, #8]
   3972e:	1973      	adds	r3, r6, r5
   39730:	0752      	lsls	r2, r2, #29
   39732:	60e3      	str	r3, [r4, #12]
   39734:	d504      	bpl.n	39740 <d_source_name+0x2c>
   39736:	5d72      	ldrb	r2, [r6, r5]
   39738:	2a24      	cmp	r2, #36	@ 0x24
   3973a:	bf04      	itt	eq
   3973c:	3301      	addeq	r3, #1
   3973e:	60e3      	streq	r3, [r4, #12]
   39740:	2d09      	cmp	r5, #9
   39742:	e9d4 7805 	ldrd	r7, r8, [r4, #20]
   39746:	dd1f      	ble.n	39788 <d_source_name+0x74>
   39748:	4927      	ldr	r1, [pc, #156]	@ (397e8 <d_source_name+0xd4>)
   3974a:	2208      	movs	r2, #8
   3974c:	4630      	mov	r0, r6
   3974e:	f7ed faa9 	bl	26ca4 <memcmp>
   39752:	b930      	cbnz	r0, 39762 <d_source_name+0x4e>
   39754:	7a33      	ldrb	r3, [r6, #8]
   39756:	2b2e      	cmp	r3, #46	@ 0x2e
   39758:	d02b      	beq.n	397b2 <d_source_name+0x9e>
   3975a:	2b5f      	cmp	r3, #95	@ 0x5f
   3975c:	d029      	beq.n	397b2 <d_source_name+0x9e>
   3975e:	2b24      	cmp	r3, #36	@ 0x24
   39760:	d027      	beq.n	397b2 <d_source_name+0x9e>
   39762:	4547      	cmp	r7, r8
   39764:	da1e      	bge.n	397a4 <d_source_name+0x90>
   39766:	6920      	ldr	r0, [r4, #16]
   39768:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   3976c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   39770:	3701      	adds	r7, #1
   39772:	2300      	movs	r3, #0
   39774:	e9c0 3301 	strd	r3, r3, [r0, #4]
   39778:	6167      	str	r7, [r4, #20]
   3977a:	2300      	movs	r3, #0
   3977c:	e9c0 3301 	strd	r3, r3, [r0, #4]
   39780:	e9c0 6503 	strd	r6, r5, [r0, #12]
   39784:	7003      	strb	r3, [r0, #0]
   39786:	e00e      	b.n	397a6 <d_source_name+0x92>
   39788:	4547      	cmp	r7, r8
   3978a:	da0b      	bge.n	397a4 <d_source_name+0x90>
   3978c:	6920      	ldr	r0, [r4, #16]
   3978e:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   39792:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   39796:	3701      	adds	r7, #1
   39798:	2300      	movs	r3, #0
   3979a:	e9c0 3301 	strd	r3, r3, [r0, #4]
   3979e:	6167      	str	r7, [r4, #20]
   397a0:	2e00      	cmp	r6, #0
   397a2:	d1ea      	bne.n	3977a <d_source_name+0x66>
   397a4:	2000      	movs	r0, #0
   397a6:	62a0      	str	r0, [r4, #40]	@ 0x28
   397a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   397ac:	2000      	movs	r0, #0
   397ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   397b2:	7a73      	ldrb	r3, [r6, #9]
   397b4:	2b4e      	cmp	r3, #78	@ 0x4e
   397b6:	d1d4      	bne.n	39762 <d_source_name+0x4e>
   397b8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   397ba:	3316      	adds	r3, #22
   397bc:	1b5b      	subs	r3, r3, r5
   397be:	4547      	cmp	r7, r8
   397c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
   397c2:	daef      	bge.n	397a4 <d_source_name+0x90>
   397c4:	6921      	ldr	r1, [r4, #16]
   397c6:	4a09      	ldr	r2, [pc, #36]	@ (397ec <d_source_name+0xd8>)
   397c8:	eb07 0087 	add.w	r0, r7, r7, lsl #2
   397cc:	0085      	lsls	r5, r0, #2
   397ce:	2300      	movs	r3, #0
   397d0:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   397d4:	3701      	adds	r7, #1
   397d6:	6167      	str	r7, [r4, #20]
   397d8:	e9c0 3301 	strd	r3, r3, [r0, #4]
   397dc:	554b      	strb	r3, [r1, r5]
   397de:	2315      	movs	r3, #21
   397e0:	e9c0 2303 	strd	r2, r3, [r0, #12]
   397e4:	e7df      	b.n	397a6 <d_source_name+0x92>
   397e6:	bf00      	nop
   397e8:	000441f8 	.word	0x000441f8
   397ec:	00044204 	.word	0x00044204

000397f0 <d_substitution>:
   397f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   397f4:	68c3      	ldr	r3, [r0, #12]
   397f6:	781a      	ldrb	r2, [r3, #0]
   397f8:	2a53      	cmp	r2, #83	@ 0x53
   397fa:	d126      	bne.n	3984a <d_substitution+0x5a>
   397fc:	1c5a      	adds	r2, r3, #1
   397fe:	60c2      	str	r2, [r0, #12]
   39800:	4604      	mov	r4, r0
   39802:	7858      	ldrb	r0, [r3, #1]
   39804:	b348      	cbz	r0, 3985a <d_substitution+0x6a>
   39806:	1c9a      	adds	r2, r3, #2
   39808:	60e2      	str	r2, [r4, #12]
   3980a:	7858      	ldrb	r0, [r3, #1]
   3980c:	285f      	cmp	r0, #95	@ 0x5f
   3980e:	d046      	beq.n	3989e <d_substitution+0xae>
   39810:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
   39814:	b2da      	uxtb	r2, r3
   39816:	2a09      	cmp	r2, #9
   39818:	d81b      	bhi.n	39852 <d_substitution+0x62>
   3981a:	2200      	movs	r2, #0
   3981c:	e005      	b.n	3982a <d_substitution+0x3a>
   3981e:	60e5      	str	r5, [r4, #12]
   39820:	7808      	ldrb	r0, [r1, #0]
   39822:	285f      	cmp	r0, #95	@ 0x5f
   39824:	d031      	beq.n	3988a <d_substitution+0x9a>
   39826:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
   3982a:	b2d9      	uxtb	r1, r3
   3982c:	2909      	cmp	r1, #9
   3982e:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
   39832:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   39836:	d81e      	bhi.n	39876 <d_substitution+0x86>
   39838:	3b30      	subs	r3, #48	@ 0x30
   3983a:	429a      	cmp	r2, r3
   3983c:	d805      	bhi.n	3984a <d_substitution+0x5a>
   3983e:	68e1      	ldr	r1, [r4, #12]
   39840:	7808      	ldrb	r0, [r1, #0]
   39842:	461a      	mov	r2, r3
   39844:	1c4d      	adds	r5, r1, #1
   39846:	2800      	cmp	r0, #0
   39848:	d1e9      	bne.n	3981e <d_substitution+0x2e>
   3984a:	2500      	movs	r5, #0
   3984c:	4628      	mov	r0, r5
   3984e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   39852:	f1a0 0241 	sub.w	r2, r0, #65	@ 0x41
   39856:	2a19      	cmp	r2, #25
   39858:	d9df      	bls.n	3981a <d_substitution+0x2a>
   3985a:	68a3      	ldr	r3, [r4, #8]
   3985c:	071b      	lsls	r3, r3, #28
   3985e:	d420      	bmi.n	398a2 <d_substitution+0xb2>
   39860:	bb09      	cbnz	r1, 398a6 <d_substitution+0xb6>
   39862:	4b43      	ldr	r3, [pc, #268]	@ (39970 <d_substitution+0x180>)
   39864:	f103 05c4 	add.w	r5, r3, #196	@ 0xc4
   39868:	781a      	ldrb	r2, [r3, #0]
   3986a:	4282      	cmp	r2, r0
   3986c:	d023      	beq.n	398b6 <d_substitution+0xc6>
   3986e:	331c      	adds	r3, #28
   39870:	42ab      	cmp	r3, r5
   39872:	d1f9      	bne.n	39868 <d_substitution+0x78>
   39874:	e7e9      	b.n	3984a <d_substitution+0x5a>
   39876:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
   3987a:	2b19      	cmp	r3, #25
   3987c:	d8e5      	bhi.n	3984a <d_substitution+0x5a>
   3987e:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
   39882:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   39886:	3b37      	subs	r3, #55	@ 0x37
   39888:	e7d7      	b.n	3983a <d_substitution+0x4a>
   3988a:	3301      	adds	r3, #1
   3988c:	6a22      	ldr	r2, [r4, #32]
   3988e:	429a      	cmp	r2, r3
   39890:	d9db      	bls.n	3984a <d_substitution+0x5a>
   39892:	69e2      	ldr	r2, [r4, #28]
   39894:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   39898:	4628      	mov	r0, r5
   3989a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3989e:	2300      	movs	r3, #0
   398a0:	e7f4      	b.n	3988c <d_substitution+0x9c>
   398a2:	2101      	movs	r1, #1
   398a4:	e7dd      	b.n	39862 <d_substitution+0x72>
   398a6:	68e3      	ldr	r3, [r4, #12]
   398a8:	7819      	ldrb	r1, [r3, #0]
   398aa:	3943      	subs	r1, #67	@ 0x43
   398ac:	2901      	cmp	r1, #1
   398ae:	bf8c      	ite	hi
   398b0:	2100      	movhi	r1, #0
   398b2:	2101      	movls	r1, #1
   398b4:	e7d5      	b.n	39862 <d_substitution+0x72>
   398b6:	695e      	ldr	r6, [r3, #20]
   398b8:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
   398bc:	b1ae      	cbz	r6, 398ea <d_substitution+0xfa>
   398be:	4282      	cmp	r2, r0
   398c0:	f8d3 8018 	ldr.w	r8, [r3, #24]
   398c4:	da52      	bge.n	3996c <d_substitution+0x17c>
   398c6:	6927      	ldr	r7, [r4, #16]
   398c8:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
   398cc:	eb07 058c 	add.w	r5, r7, ip, lsl #2
   398d0:	f04f 0e00 	mov.w	lr, #0
   398d4:	e9c5 ee01 	strd	lr, lr, [r5, #4]
   398d8:	3201      	adds	r2, #1
   398da:	f04f 0e18 	mov.w	lr, #24
   398de:	6162      	str	r2, [r4, #20]
   398e0:	f807 e02c 	strb.w	lr, [r7, ip, lsl #2]
   398e4:	e9c5 6803 	strd	r6, r8, [r5, #12]
   398e8:	62a5      	str	r5, [r4, #40]	@ 0x28
   398ea:	2900      	cmp	r1, #0
   398ec:	d039      	beq.n	39962 <d_substitution+0x172>
   398ee:	e9d3 7103 	ldrd	r7, r1, [r3, #12]
   398f2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   398f4:	4282      	cmp	r2, r0
   398f6:	440b      	add	r3, r1
   398f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
   398fa:	da35      	bge.n	39968 <d_substitution+0x178>
   398fc:	6923      	ldr	r3, [r4, #16]
   398fe:	eb02 0082 	add.w	r0, r2, r2, lsl #2
   39902:	eb03 0580 	add.w	r5, r3, r0, lsl #2
   39906:	3201      	adds	r2, #1
   39908:	2600      	movs	r6, #0
   3990a:	e9c5 6601 	strd	r6, r6, [r5, #4]
   3990e:	6162      	str	r2, [r4, #20]
   39910:	2218      	movs	r2, #24
   39912:	f803 2020 	strb.w	r2, [r3, r0, lsl #2]
   39916:	e9c5 7103 	strd	r7, r1, [r5, #12]
   3991a:	68e3      	ldr	r3, [r4, #12]
   3991c:	781a      	ldrb	r2, [r3, #0]
   3991e:	2a42      	cmp	r2, #66	@ 0x42
   39920:	d194      	bne.n	3984c <d_substitution+0x5c>
   39922:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
   39924:	3301      	adds	r3, #1
   39926:	60e3      	str	r3, [r4, #12]
   39928:	4620      	mov	r0, r4
   3992a:	f7ff fef3 	bl	39714 <d_source_name>
   3992e:	462a      	mov	r2, r5
   39930:	4603      	mov	r3, r0
   39932:	214d      	movs	r1, #77	@ 0x4d
   39934:	4620      	mov	r0, r4
   39936:	f7ff fbbd 	bl	390b4 <d_make_comp>
   3993a:	68e3      	ldr	r3, [r4, #12]
   3993c:	781a      	ldrb	r2, [r3, #0]
   3993e:	2a42      	cmp	r2, #66	@ 0x42
   39940:	4605      	mov	r5, r0
   39942:	d0ef      	beq.n	39924 <d_substitution+0x134>
   39944:	62a6      	str	r6, [r4, #40]	@ 0x28
   39946:	2800      	cmp	r0, #0
   39948:	f43f af7f 	beq.w	3984a <d_substitution+0x5a>
   3994c:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
   39950:	4293      	cmp	r3, r2
   39952:	f6bf af7a 	bge.w	3984a <d_substitution+0x5a>
   39956:	69e1      	ldr	r1, [r4, #28]
   39958:	1c5a      	adds	r2, r3, #1
   3995a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   3995e:	6222      	str	r2, [r4, #32]
   39960:	e774      	b.n	3984c <d_substitution+0x5c>
   39962:	e9d3 7101 	ldrd	r7, r1, [r3, #4]
   39966:	e7c4      	b.n	398f2 <d_substitution+0x102>
   39968:	2500      	movs	r5, #0
   3996a:	e7d6      	b.n	3991a <d_substitution+0x12a>
   3996c:	2500      	movs	r5, #0
   3996e:	e7bb      	b.n	398e8 <d_substitution+0xf8>
   39970:	0004c36c 	.word	0x0004c36c

00039974 <d_maybe_module_name>:
   39974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   39976:	68c3      	ldr	r3, [r0, #12]
   39978:	781a      	ldrb	r2, [r3, #0]
   3997a:	2a57      	cmp	r2, #87	@ 0x57
   3997c:	d128      	bne.n	399d0 <d_maybe_module_name+0x5c>
   3997e:	4604      	mov	r4, r0
   39980:	460e      	mov	r6, r1
   39982:	e007      	b.n	39994 <d_maybe_module_name+0x20>
   39984:	69e5      	ldr	r5, [r4, #28]
   39986:	68e3      	ldr	r3, [r4, #12]
   39988:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
   3998c:	6221      	str	r1, [r4, #32]
   3998e:	781a      	ldrb	r2, [r3, #0]
   39990:	2a57      	cmp	r2, #87	@ 0x57
   39992:	d11d      	bne.n	399d0 <d_maybe_module_name+0x5c>
   39994:	1c5a      	adds	r2, r3, #1
   39996:	60e2      	str	r2, [r4, #12]
   39998:	785a      	ldrb	r2, [r3, #1]
   3999a:	2a50      	cmp	r2, #80	@ 0x50
   3999c:	f04f 0553 	mov.w	r5, #83	@ 0x53
   399a0:	d102      	bne.n	399a8 <d_maybe_module_name+0x34>
   399a2:	3302      	adds	r3, #2
   399a4:	60e3      	str	r3, [r4, #12]
   399a6:	2554      	movs	r5, #84	@ 0x54
   399a8:	4620      	mov	r0, r4
   399aa:	6837      	ldr	r7, [r6, #0]
   399ac:	f7ff feb2 	bl	39714 <d_source_name>
   399b0:	463a      	mov	r2, r7
   399b2:	4603      	mov	r3, r0
   399b4:	4629      	mov	r1, r5
   399b6:	4620      	mov	r0, r4
   399b8:	f7ff fb7c 	bl	390b4 <d_make_comp>
   399bc:	6030      	str	r0, [r6, #0]
   399be:	b130      	cbz	r0, 399ce <d_maybe_module_name+0x5a>
   399c0:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
   399c4:	429a      	cmp	r2, r3
   399c6:	f102 0101 	add.w	r1, r2, #1
   399ca:	dbdb      	blt.n	39984 <d_maybe_module_name+0x10>
   399cc:	2000      	movs	r0, #0
   399ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   399d0:	2001      	movs	r0, #1
   399d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000399d4 <d_type>:
   399d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   399d8:	68c1      	ldr	r1, [r0, #12]
   399da:	b085      	sub	sp, #20
   399dc:	4604      	mov	r4, r0
   399de:	4608      	mov	r0, r1
   399e0:	f7ff fd56 	bl	39490 <next_is_type_qual.isra.0>
   399e4:	b9f0      	cbnz	r0, 39a24 <d_type+0x50>
   399e6:	780b      	ldrb	r3, [r1, #0]
   399e8:	2b55      	cmp	r3, #85	@ 0x55
   399ea:	d84d      	bhi.n	39a88 <d_type+0xb4>
   399ec:	2b40      	cmp	r3, #64	@ 0x40
   399ee:	d978      	bls.n	39ae2 <d_type+0x10e>
   399f0:	3b41      	subs	r3, #65	@ 0x41
   399f2:	2b14      	cmp	r3, #20
   399f4:	d875      	bhi.n	39ae2 <d_type+0x10e>
   399f6:	e8df f013 	tbh	[pc, r3, lsl #1]
   399fa:	014b      	.short	0x014b
   399fc:	01370074 	.word	0x01370074
   39a00:	007400f7 	.word	0x007400f7
   39a04:	00a50145 	.word	0x00a50145
   39a08:	00740074 	.word	0x00740074
   39a0c:	00740074 	.word	0x00740074
   39a10:	018a0074 	.word	0x018a0074
   39a14:	00970074 	.word	0x00970074
   39a18:	00740089 	.word	0x00740089
   39a1c:	0074007b 	.word	0x0074007b
   39a20:	00b300cb 	.word	0x00b300cb
   39a24:	2200      	movs	r2, #0
   39a26:	4669      	mov	r1, sp
   39a28:	4620      	mov	r0, r4
   39a2a:	f001 f9c9 	bl	3adc0 <d_cv_qualifiers>
   39a2e:	4605      	mov	r5, r0
   39a30:	2800      	cmp	r0, #0
   39a32:	f000 819c 	beq.w	39d6e <d_type+0x39a>
   39a36:	68e3      	ldr	r3, [r4, #12]
   39a38:	781b      	ldrb	r3, [r3, #0]
   39a3a:	2b46      	cmp	r3, #70	@ 0x46
   39a3c:	4620      	mov	r0, r4
   39a3e:	d020      	beq.n	39a82 <d_type+0xae>
   39a40:	f7ff ffc8 	bl	399d4 <d_type>
   39a44:	6028      	str	r0, [r5, #0]
   39a46:	2800      	cmp	r0, #0
   39a48:	f000 8191 	beq.w	39d6e <d_type+0x39a>
   39a4c:	7803      	ldrb	r3, [r0, #0]
   39a4e:	3b1f      	subs	r3, #31
   39a50:	2b01      	cmp	r3, #1
   39a52:	d805      	bhi.n	39a60 <d_type+0x8c>
   39a54:	9a00      	ldr	r2, [sp, #0]
   39a56:	68c3      	ldr	r3, [r0, #12]
   39a58:	60c2      	str	r2, [r0, #12]
   39a5a:	682a      	ldr	r2, [r5, #0]
   39a5c:	9200      	str	r2, [sp, #0]
   39a5e:	602b      	str	r3, [r5, #0]
   39a60:	9800      	ldr	r0, [sp, #0]
   39a62:	2800      	cmp	r0, #0
   39a64:	f000 8183 	beq.w	39d6e <d_type+0x39a>
   39a68:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
   39a6c:	4293      	cmp	r3, r2
   39a6e:	f280 817e 	bge.w	39d6e <d_type+0x39a>
   39a72:	69e1      	ldr	r1, [r4, #28]
   39a74:	1c5a      	adds	r2, r3, #1
   39a76:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   39a7a:	6222      	str	r2, [r4, #32]
   39a7c:	b005      	add	sp, #20
   39a7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   39a82:	f000 fbf1 	bl	3a268 <d_function_type>
   39a86:	e7dd      	b.n	39a44 <d_type+0x70>
   39a88:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
   39a8c:	4605      	mov	r5, r0
   39a8e:	b2d0      	uxtb	r0, r2
   39a90:	2819      	cmp	r0, #25
   39a92:	d826      	bhi.n	39ae2 <d_type+0x10e>
   39a94:	4ea8      	ldr	r6, [pc, #672]	@ (39d38 <d_type+0x364>)
   39a96:	2301      	movs	r3, #1
   39a98:	4083      	lsls	r3, r0
   39a9a:	401e      	ands	r6, r3
   39a9c:	2e00      	cmp	r6, #0
   39a9e:	f040 82c9 	bne.w	3a034 <d_type+0x660>
   39aa2:	2814      	cmp	r0, #20
   39aa4:	d11d      	bne.n	39ae2 <d_type+0x10e>
   39aa6:	3101      	adds	r1, #1
   39aa8:	60e1      	str	r1, [r4, #12]
   39aaa:	4620      	mov	r0, r4
   39aac:	f7ff fe32 	bl	39714 <d_source_name>
   39ab0:	4633      	mov	r3, r6
   39ab2:	4602      	mov	r2, r0
   39ab4:	2128      	movs	r1, #40	@ 0x28
   39ab6:	4620      	mov	r0, r4
   39ab8:	f7ff fafc 	bl	390b4 <d_make_comp>
   39abc:	4605      	mov	r5, r0
   39abe:	9000      	str	r0, [sp, #0]
   39ac0:	2d00      	cmp	r5, #0
   39ac2:	f000 8154 	beq.w	39d6e <d_type+0x39a>
   39ac6:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
   39aca:	4293      	cmp	r3, r2
   39acc:	f280 814f 	bge.w	39d6e <d_type+0x39a>
   39ad0:	69e1      	ldr	r1, [r4, #28]
   39ad2:	9800      	ldr	r0, [sp, #0]
   39ad4:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
   39ad8:	1c5a      	adds	r2, r3, #1
   39ada:	6222      	str	r2, [r4, #32]
   39adc:	b005      	add	sp, #20
   39ade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   39ae2:	2101      	movs	r1, #1
   39ae4:	4620      	mov	r0, r4
   39ae6:	b005      	add	sp, #20
   39ae8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   39aec:	f001 ba12 	b.w	3af14 <d_name>
   39af0:	3101      	adds	r1, #1
   39af2:	60e1      	str	r1, [r4, #12]
   39af4:	4620      	mov	r0, r4
   39af6:	f7ff ff6d 	bl	399d4 <d_type>
   39afa:	2300      	movs	r3, #0
   39afc:	4602      	mov	r2, r0
   39afe:	2123      	movs	r1, #35	@ 0x23
   39b00:	4620      	mov	r0, r4
   39b02:	f7ff fad7 	bl	390b4 <d_make_comp>
   39b06:	4605      	mov	r5, r0
   39b08:	9000      	str	r0, [sp, #0]
   39b0a:	e7d9      	b.n	39ac0 <d_type+0xec>
   39b0c:	3101      	adds	r1, #1
   39b0e:	60e1      	str	r1, [r4, #12]
   39b10:	4620      	mov	r0, r4
   39b12:	f7ff ff5f 	bl	399d4 <d_type>
   39b16:	2300      	movs	r3, #0
   39b18:	4602      	mov	r2, r0
   39b1a:	2122      	movs	r1, #34	@ 0x22
   39b1c:	4620      	mov	r0, r4
   39b1e:	f7ff fac9 	bl	390b4 <d_make_comp>
   39b22:	4605      	mov	r5, r0
   39b24:	9000      	str	r0, [sp, #0]
   39b26:	e7cb      	b.n	39ac0 <d_type+0xec>
   39b28:	3101      	adds	r1, #1
   39b2a:	60e1      	str	r1, [r4, #12]
   39b2c:	4620      	mov	r0, r4
   39b2e:	f7ff ff51 	bl	399d4 <d_type>
   39b32:	2300      	movs	r3, #0
   39b34:	4602      	mov	r2, r0
   39b36:	2124      	movs	r1, #36	@ 0x24
   39b38:	4620      	mov	r0, r4
   39b3a:	f7ff fabb 	bl	390b4 <d_make_comp>
   39b3e:	4605      	mov	r5, r0
   39b40:	9000      	str	r0, [sp, #0]
   39b42:	e7bd      	b.n	39ac0 <d_type+0xec>
   39b44:	3101      	adds	r1, #1
   39b46:	60e1      	str	r1, [r4, #12]
   39b48:	4620      	mov	r0, r4
   39b4a:	f7ff ff43 	bl	399d4 <d_type>
   39b4e:	2300      	movs	r3, #0
   39b50:	4602      	mov	r2, r0
   39b52:	2126      	movs	r1, #38	@ 0x26
   39b54:	4620      	mov	r0, r4
   39b56:	f7ff faad 	bl	390b4 <d_make_comp>
   39b5a:	4605      	mov	r5, r0
   39b5c:	9000      	str	r0, [sp, #0]
   39b5e:	e7af      	b.n	39ac0 <d_type+0xec>
   39b60:	3101      	adds	r1, #1
   39b62:	60e1      	str	r1, [r4, #12]
   39b64:	4620      	mov	r0, r4
   39b66:	f7ff fdd5 	bl	39714 <d_source_name>
   39b6a:	68e3      	ldr	r3, [r4, #12]
   39b6c:	9000      	str	r0, [sp, #0]
   39b6e:	781a      	ldrb	r2, [r3, #0]
   39b70:	2a49      	cmp	r2, #73	@ 0x49
   39b72:	4605      	mov	r5, r0
   39b74:	f000 827e 	beq.w	3a074 <d_type+0x6a0>
   39b78:	4620      	mov	r0, r4
   39b7a:	f7ff ff2b 	bl	399d4 <d_type>
   39b7e:	462b      	mov	r3, r5
   39b80:	4602      	mov	r2, r0
   39b82:	2121      	movs	r1, #33	@ 0x21
   39b84:	4620      	mov	r0, r4
   39b86:	f7ff fa95 	bl	390b4 <d_make_comp>
   39b8a:	4605      	mov	r5, r0
   39b8c:	9000      	str	r0, [sp, #0]
   39b8e:	e797      	b.n	39ac0 <d_type+0xec>
   39b90:	4620      	mov	r0, r4
   39b92:	f7ff fd55 	bl	39640 <d_template_param>
   39b96:	68e6      	ldr	r6, [r4, #12]
   39b98:	9000      	str	r0, [sp, #0]
   39b9a:	7833      	ldrb	r3, [r6, #0]
   39b9c:	2b49      	cmp	r3, #73	@ 0x49
   39b9e:	4605      	mov	r5, r0
   39ba0:	d18e      	bne.n	39ac0 <d_type+0xec>
   39ba2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   39ba4:	2b00      	cmp	r3, #0
   39ba6:	f040 829b 	bne.w	3a0e0 <d_type+0x70c>
   39baa:	2800      	cmp	r0, #0
   39bac:	f000 80df 	beq.w	39d6e <d_type+0x39a>
   39bb0:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
   39bb4:	428a      	cmp	r2, r1
   39bb6:	f280 80da 	bge.w	39d6e <d_type+0x39a>
   39bba:	69e1      	ldr	r1, [r4, #28]
   39bbc:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   39bc0:	3201      	adds	r2, #1
   39bc2:	6222      	str	r2, [r4, #32]
   39bc4:	7832      	ldrb	r2, [r6, #0]
   39bc6:	3a49      	subs	r2, #73	@ 0x49
   39bc8:	2a01      	cmp	r2, #1
   39bca:	d805      	bhi.n	39bd8 <d_type+0x204>
   39bcc:	3601      	adds	r6, #1
   39bce:	60e6      	str	r6, [r4, #12]
   39bd0:	4620      	mov	r0, r4
   39bd2:	f001 fea7 	bl	3b924 <d_template_args_1>
   39bd6:	4603      	mov	r3, r0
   39bd8:	462a      	mov	r2, r5
   39bda:	2104      	movs	r1, #4
   39bdc:	4620      	mov	r0, r4
   39bde:	f7ff fa69 	bl	390b4 <d_make_comp>
   39be2:	4605      	mov	r5, r0
   39be4:	9000      	str	r0, [sp, #0]
   39be6:	e76b      	b.n	39ac0 <d_type+0xec>
   39be8:	1c4b      	adds	r3, r1, #1
   39bea:	60e3      	str	r3, [r4, #12]
   39bec:	784b      	ldrb	r3, [r1, #1]
   39bee:	2b00      	cmp	r3, #0
   39bf0:	f000 80bd 	beq.w	39d6e <d_type+0x39a>
   39bf4:	1c8b      	adds	r3, r1, #2
   39bf6:	60e3      	str	r3, [r4, #12]
   39bf8:	784b      	ldrb	r3, [r1, #1]
   39bfa:	3b46      	subs	r3, #70	@ 0x46
   39bfc:	2b30      	cmp	r3, #48	@ 0x30
   39bfe:	f200 80b6 	bhi.w	39d6e <d_type+0x39a>
   39c02:	e8df f013 	tbh	[pc, r3, lsl #1]
   39c06:	00b6      	.short	0x00b6
   39c08:	00b400b4 	.word	0x00b400b4
   39c0c:	00b400b4 	.word	0x00b400b4
   39c10:	00b400b4 	.word	0x00b400b4
   39c14:	00b400b4 	.word	0x00b400b4
   39c18:	00b400b4 	.word	0x00b400b4
   39c1c:	00b400b4 	.word	0x00b400b4
   39c20:	009b00b4 	.word	0x009b00b4
   39c24:	00b400b4 	.word	0x00b400b4
   39c28:	00b400b4 	.word	0x00b400b4
   39c2c:	00b400b4 	.word	0x00b400b4
   39c30:	00b400b4 	.word	0x00b400b4
   39c34:	00b400b4 	.word	0x00b400b4
   39c38:	00b400b4 	.word	0x00b400b4
   39c3c:	00b401c5 	.word	0x00b401c5
   39c40:	01ad00f5 	.word	0x01ad00f5
   39c44:	017d0195 	.word	0x017d0195
   39c48:	016500b4 	.word	0x016500b4
   39c4c:	00b401f3 	.word	0x00b401f3
   39c50:	00b400b4 	.word	0x00b400b4
   39c54:	01db00b4 	.word	0x01db00b4
   39c58:	020b00b4 	.word	0x020b00b4
   39c5c:	00b400b4 	.word	0x00b400b4
   39c60:	009b014d 	.word	0x009b014d
   39c64:	010a0135 	.word	0x010a0135
   39c68:	3101      	adds	r1, #1
   39c6a:	60e1      	str	r1, [r4, #12]
   39c6c:	4620      	mov	r0, r4
   39c6e:	f7ff feb1 	bl	399d4 <d_type>
   39c72:	2300      	movs	r3, #0
   39c74:	4602      	mov	r2, r0
   39c76:	2125      	movs	r1, #37	@ 0x25
   39c78:	4620      	mov	r0, r4
   39c7a:	f7ff fa1b 	bl	390b4 <d_make_comp>
   39c7e:	4605      	mov	r5, r0
   39c80:	9000      	str	r0, [sp, #0]
   39c82:	e71d      	b.n	39ac0 <d_type+0xec>
   39c84:	4620      	mov	r0, r4
   39c86:	f000 faef 	bl	3a268 <d_function_type>
   39c8a:	4605      	mov	r5, r0
   39c8c:	9000      	str	r0, [sp, #0]
   39c8e:	e717      	b.n	39ac0 <d_type+0xec>
   39c90:	1c48      	adds	r0, r1, #1
   39c92:	60e0      	str	r0, [r4, #12]
   39c94:	784a      	ldrb	r2, [r1, #1]
   39c96:	2a5f      	cmp	r2, #95	@ 0x5f
   39c98:	f000 81ea 	beq.w	3a070 <d_type+0x69c>
   39c9c:	3a30      	subs	r2, #48	@ 0x30
   39c9e:	2a09      	cmp	r2, #9
   39ca0:	f200 81f5 	bhi.w	3a08e <d_type+0x6ba>
   39ca4:	4603      	mov	r3, r0
   39ca6:	461d      	mov	r5, r3
   39ca8:	3301      	adds	r3, #1
   39caa:	60e3      	str	r3, [r4, #12]
   39cac:	781a      	ldrb	r2, [r3, #0]
   39cae:	3a30      	subs	r2, #48	@ 0x30
   39cb0:	2a09      	cmp	r2, #9
   39cb2:	d9f8      	bls.n	39ca6 <d_type+0x2d2>
   39cb4:	eba5 0e01 	sub.w	lr, r5, r1
   39cb8:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
   39cbc:	428a      	cmp	r2, r1
   39cbe:	da56      	bge.n	39d6e <d_type+0x39a>
   39cc0:	f8d4 8010 	ldr.w	r8, [r4, #16]
   39cc4:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
   39cc8:	2100      	movs	r1, #0
   39cca:	eb08 078c 	add.w	r7, r8, ip, lsl #2
   39cce:	3201      	adds	r2, #1
   39cd0:	458e      	cmp	lr, r1
   39cd2:	e9c7 1101 	strd	r1, r1, [r7, #4]
   39cd6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
   39cda:	6162      	str	r2, [r4, #20]
   39cdc:	dd47      	ble.n	39d6e <d_type+0x39a>
   39cde:	e9c7 1101 	strd	r1, r1, [r7, #4]
   39ce2:	f808 100c 	strb.w	r1, [r8, ip]
   39ce6:	e9c7 0e03 	strd	r0, lr, [r7, #12]
   39cea:	786a      	ldrb	r2, [r5, #1]
   39cec:	4618      	mov	r0, r3
   39cee:	2a5f      	cmp	r2, #95	@ 0x5f
   39cf0:	d13d      	bne.n	39d6e <d_type+0x39a>
   39cf2:	3001      	adds	r0, #1
   39cf4:	60e0      	str	r0, [r4, #12]
   39cf6:	4620      	mov	r0, r4
   39cf8:	f7ff fe6c 	bl	399d4 <d_type>
   39cfc:	463a      	mov	r2, r7
   39cfe:	4603      	mov	r3, r0
   39d00:	212a      	movs	r1, #42	@ 0x2a
   39d02:	4620      	mov	r0, r4
   39d04:	f7ff f9d6 	bl	390b4 <d_make_comp>
   39d08:	4605      	mov	r5, r0
   39d0a:	9000      	str	r0, [sp, #0]
   39d0c:	e6d8      	b.n	39ac0 <d_type+0xec>
   39d0e:	3101      	adds	r1, #1
   39d10:	60e1      	str	r1, [r4, #12]
   39d12:	4620      	mov	r0, r4
   39d14:	f7ff fe5e 	bl	399d4 <d_type>
   39d18:	4605      	mov	r5, r0
   39d1a:	b340      	cbz	r0, 39d6e <d_type+0x39a>
   39d1c:	4620      	mov	r0, r4
   39d1e:	f7ff fe59 	bl	399d4 <d_type>
   39d22:	4603      	mov	r3, r0
   39d24:	b318      	cbz	r0, 39d6e <d_type+0x39a>
   39d26:	462a      	mov	r2, r5
   39d28:	212b      	movs	r1, #43	@ 0x2b
   39d2a:	4620      	mov	r0, r4
   39d2c:	f7ff f9c2 	bl	390b4 <d_make_comp>
   39d30:	4605      	mov	r5, r0
   39d32:	9000      	str	r0, [sp, #0]
   39d34:	e6c4      	b.n	39ac0 <d_type+0xec>
   39d36:	bf00      	nop
   39d38:	03ec7bff 	.word	0x03ec7bff
   39d3c:	2301      	movs	r3, #1
   39d3e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
   39d40:	6323      	str	r3, [r4, #48]	@ 0x30
   39d42:	4620      	mov	r0, r4
   39d44:	f000 fd8c 	bl	3a860 <d_expression_1>
   39d48:	6325      	str	r5, [r4, #48]	@ 0x30
   39d4a:	4602      	mov	r2, r0
   39d4c:	2300      	movs	r3, #0
   39d4e:	2144      	movs	r1, #68	@ 0x44
   39d50:	4620      	mov	r0, r4
   39d52:	f7ff f9af 	bl	390b4 <d_make_comp>
   39d56:	4605      	mov	r5, r0
   39d58:	9000      	str	r0, [sp, #0]
   39d5a:	b140      	cbz	r0, 39d6e <d_type+0x39a>
   39d5c:	68e3      	ldr	r3, [r4, #12]
   39d5e:	781a      	ldrb	r2, [r3, #0]
   39d60:	b12a      	cbz	r2, 39d6e <d_type+0x39a>
   39d62:	1c5a      	adds	r2, r3, #1
   39d64:	60e2      	str	r2, [r4, #12]
   39d66:	781b      	ldrb	r3, [r3, #0]
   39d68:	2b45      	cmp	r3, #69	@ 0x45
   39d6a:	f43f aeac 	beq.w	39ac6 <d_type+0xf2>
   39d6e:	2000      	movs	r0, #0
   39d70:	e684      	b.n	39a7c <d_type+0xa8>
   39d72:	4620      	mov	r0, r4
   39d74:	f7ff fa1a 	bl	391ac <d_number>
   39d78:	68e3      	ldr	r3, [r4, #12]
   39d7a:	781d      	ldrb	r5, [r3, #0]
   39d7c:	2d62      	cmp	r5, #98	@ 0x62
   39d7e:	4602      	mov	r2, r0
   39d80:	f000 81d2 	beq.w	3a128 <d_type+0x754>
   39d84:	2d78      	cmp	r5, #120	@ 0x78
   39d86:	d002      	beq.n	39d8e <d_type+0x3ba>
   39d88:	2d5f      	cmp	r5, #95	@ 0x5f
   39d8a:	d1f0      	bne.n	39d6e <d_type+0x39a>
   39d8c:	2500      	movs	r5, #0
   39d8e:	e9d4 1005 	ldrd	r1, r0, [r4, #20]
   39d92:	4281      	cmp	r1, r0
   39d94:	fa0f fe82 	sxth.w	lr, r2
   39d98:	f103 0301 	add.w	r3, r3, #1
   39d9c:	f280 81ed 	bge.w	3a17a <d_type+0x7a6>
   39da0:	6927      	ldr	r7, [r4, #16]
   39da2:	2014      	movs	r0, #20
   39da4:	fb01 f000 	mul.w	r0, r1, r0
   39da8:	183e      	adds	r6, r7, r0
   39daa:	3101      	adds	r1, #1
   39dac:	f04f 0c00 	mov.w	ip, #0
   39db0:	e9c6 cc01 	strd	ip, ip, [r6, #4]
   39db4:	6161      	str	r1, [r4, #20]
   39db6:	f04f 0c5c 	mov.w	ip, #92	@ 0x5c
   39dba:	49bc      	ldr	r1, [pc, #752]	@ (3a0ac <d_type+0x6d8>)
   39dbc:	f807 c000 	strb.w	ip, [r7, r0]
   39dc0:	60f1      	str	r1, [r6, #12]
   39dc2:	f8a6 e010 	strh.w	lr, [r6, #16]
   39dc6:	49ba      	ldr	r1, [pc, #744]	@ (3a0b0 <d_type+0x6dc>)
   39dc8:	74b5      	strb	r5, [r6, #18]
   39dca:	a801      	add	r0, sp, #4
   39dcc:	60e3      	str	r3, [r4, #12]
   39dce:	9600      	str	r6, [sp, #0]
   39dd0:	f005 fe1e 	bl	3fa10 <sprintf>
   39dd4:	a801      	add	r0, sp, #4
   39dd6:	f7de fc73 	bl	186c0 <strlen>
   39dda:	68f3      	ldr	r3, [r6, #12]
   39ddc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
   39dde:	685b      	ldr	r3, [r3, #4]
   39de0:	4413      	add	r3, r2
   39de2:	2d00      	cmp	r5, #0
   39de4:	bf18      	it	ne
   39de6:	3301      	addne	r3, #1
   39de8:	4403      	add	r3, r0
   39dea:	9800      	ldr	r0, [sp, #0]
   39dec:	62e3      	str	r3, [r4, #44]	@ 0x2c
   39dee:	e645      	b.n	39a7c <d_type+0xa8>
   39df0:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   39df4:	4293      	cmp	r3, r2
   39df6:	daba      	bge.n	39d6e <d_type+0x39a>
   39df8:	6922      	ldr	r2, [r4, #16]
   39dfa:	49ae      	ldr	r1, [pc, #696]	@ (3a0b4 <d_type+0x6e0>)
   39dfc:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   39e00:	0085      	lsls	r5, r0, #2
   39e02:	3301      	adds	r3, #1
   39e04:	6163      	str	r3, [r4, #20]
   39e06:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   39e0a:	2300      	movs	r3, #0
   39e0c:	e9c0 3301 	strd	r3, r3, [r0, #4]
   39e10:	5553      	strb	r3, [r2, r5]
   39e12:	230e      	movs	r3, #14
   39e14:	e9c0 1303 	strd	r1, r3, [r0, #12]
   39e18:	e630      	b.n	39a7c <d_type+0xa8>
   39e1a:	788b      	ldrb	r3, [r1, #2]
   39e1c:	2b5f      	cmp	r3, #95	@ 0x5f
   39e1e:	f000 819e 	beq.w	3a15e <d_type+0x78a>
   39e22:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   39e26:	4293      	cmp	r3, r2
   39e28:	daa1      	bge.n	39d6e <d_type+0x39a>
   39e2a:	6922      	ldr	r2, [r4, #16]
   39e2c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   39e30:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   39e34:	3301      	adds	r3, #1
   39e36:	2000      	movs	r0, #0
   39e38:	e9c5 0001 	strd	r0, r0, [r5, #4]
   39e3c:	6163      	str	r3, [r4, #20]
   39e3e:	2343      	movs	r3, #67	@ 0x43
   39e40:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   39e44:	4620      	mov	r0, r4
   39e46:	f7ff f9b1 	bl	391ac <d_number>
   39e4a:	60e8      	str	r0, [r5, #12]
   39e4c:	68e3      	ldr	r3, [r4, #12]
   39e4e:	781a      	ldrb	r2, [r3, #0]
   39e50:	2a5f      	cmp	r2, #95	@ 0x5f
   39e52:	d18c      	bne.n	39d6e <d_type+0x39a>
   39e54:	3301      	adds	r3, #1
   39e56:	60e3      	str	r3, [r4, #12]
   39e58:	4620      	mov	r0, r4
   39e5a:	f7ff fdbb 	bl	399d4 <d_type>
   39e5e:	462a      	mov	r2, r5
   39e60:	4603      	mov	r3, r0
   39e62:	212d      	movs	r1, #45	@ 0x2d
   39e64:	4620      	mov	r0, r4
   39e66:	f7ff f925 	bl	390b4 <d_make_comp>
   39e6a:	4605      	mov	r5, r0
   39e6c:	9000      	str	r0, [sp, #0]
   39e6e:	e627      	b.n	39ac0 <d_type+0xec>
   39e70:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   39e74:	4293      	cmp	r3, r2
   39e76:	f280 8185 	bge.w	3a184 <d_type+0x7b0>
   39e7a:	6922      	ldr	r2, [r4, #16]
   39e7c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   39e80:	eb02 0081 	add.w	r0, r2, r1, lsl #2
   39e84:	3301      	adds	r3, #1
   39e86:	2500      	movs	r5, #0
   39e88:	e9c0 5501 	strd	r5, r5, [r0, #4]
   39e8c:	6163      	str	r3, [r4, #20]
   39e8e:	2327      	movs	r3, #39	@ 0x27
   39e90:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   39e94:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   39e96:	4a88      	ldr	r2, [pc, #544]	@ (3a0b8 <d_type+0x6e4>)
   39e98:	60c2      	str	r2, [r0, #12]
   39e9a:	3307      	adds	r3, #7
   39e9c:	62e3      	str	r3, [r4, #44]	@ 0x2c
   39e9e:	e5ed      	b.n	39a7c <d_type+0xa8>
   39ea0:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   39ea4:	4293      	cmp	r3, r2
   39ea6:	f280 816d 	bge.w	3a184 <d_type+0x7b0>
   39eaa:	6922      	ldr	r2, [r4, #16]
   39eac:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   39eb0:	eb02 0081 	add.w	r0, r2, r1, lsl #2
   39eb4:	3301      	adds	r3, #1
   39eb6:	2500      	movs	r5, #0
   39eb8:	e9c0 5501 	strd	r5, r5, [r0, #4]
   39ebc:	6163      	str	r3, [r4, #20]
   39ebe:	2327      	movs	r3, #39	@ 0x27
   39ec0:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   39ec4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   39ec6:	4a7d      	ldr	r2, [pc, #500]	@ (3a0bc <d_type+0x6e8>)
   39ec8:	60c2      	str	r2, [r0, #12]
   39eca:	3308      	adds	r3, #8
   39ecc:	62e3      	str	r3, [r4, #44]	@ 0x2c
   39ece:	e5d5      	b.n	39a7c <d_type+0xa8>
   39ed0:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   39ed4:	4293      	cmp	r3, r2
   39ed6:	f280 8155 	bge.w	3a184 <d_type+0x7b0>
   39eda:	6922      	ldr	r2, [r4, #16]
   39edc:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   39ee0:	eb02 0081 	add.w	r0, r2, r1, lsl #2
   39ee4:	3301      	adds	r3, #1
   39ee6:	2500      	movs	r5, #0
   39ee8:	e9c0 5501 	strd	r5, r5, [r0, #4]
   39eec:	6163      	str	r3, [r4, #20]
   39eee:	2327      	movs	r3, #39	@ 0x27
   39ef0:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   39ef4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   39ef6:	4a72      	ldr	r2, [pc, #456]	@ (3a0c0 <d_type+0x6ec>)
   39ef8:	60c2      	str	r2, [r0, #12]
   39efa:	3304      	adds	r3, #4
   39efc:	62e3      	str	r3, [r4, #44]	@ 0x2c
   39efe:	e5bd      	b.n	39a7c <d_type+0xa8>
   39f00:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   39f04:	4293      	cmp	r3, r2
   39f06:	f280 813d 	bge.w	3a184 <d_type+0x7b0>
   39f0a:	6922      	ldr	r2, [r4, #16]
   39f0c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   39f10:	eb02 0081 	add.w	r0, r2, r1, lsl #2
   39f14:	3301      	adds	r3, #1
   39f16:	2500      	movs	r5, #0
   39f18:	e9c0 5501 	strd	r5, r5, [r0, #4]
   39f1c:	6163      	str	r3, [r4, #20]
   39f1e:	2327      	movs	r3, #39	@ 0x27
   39f20:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   39f24:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   39f26:	4a67      	ldr	r2, [pc, #412]	@ (3a0c4 <d_type+0x6f0>)
   39f28:	60c2      	str	r2, [r0, #12]
   39f2a:	3309      	adds	r3, #9
   39f2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
   39f2e:	e5a5      	b.n	39a7c <d_type+0xa8>
   39f30:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   39f34:	4293      	cmp	r3, r2
   39f36:	f280 8125 	bge.w	3a184 <d_type+0x7b0>
   39f3a:	6922      	ldr	r2, [r4, #16]
   39f3c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   39f40:	eb02 0081 	add.w	r0, r2, r1, lsl #2
   39f44:	3301      	adds	r3, #1
   39f46:	2500      	movs	r5, #0
   39f48:	e9c0 5501 	strd	r5, r5, [r0, #4]
   39f4c:	6163      	str	r3, [r4, #20]
   39f4e:	2327      	movs	r3, #39	@ 0x27
   39f50:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   39f54:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   39f56:	4a5c      	ldr	r2, [pc, #368]	@ (3a0c8 <d_type+0x6f4>)
   39f58:	60c2      	str	r2, [r0, #12]
   39f5a:	330a      	adds	r3, #10
   39f5c:	62e3      	str	r3, [r4, #44]	@ 0x2c
   39f5e:	e58d      	b.n	39a7c <d_type+0xa8>
   39f60:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   39f64:	4293      	cmp	r3, r2
   39f66:	f280 810d 	bge.w	3a184 <d_type+0x7b0>
   39f6a:	6922      	ldr	r2, [r4, #16]
   39f6c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   39f70:	eb02 0081 	add.w	r0, r2, r1, lsl #2
   39f74:	3301      	adds	r3, #1
   39f76:	2500      	movs	r5, #0
   39f78:	e9c0 5501 	strd	r5, r5, [r0, #4]
   39f7c:	6163      	str	r3, [r4, #20]
   39f7e:	2327      	movs	r3, #39	@ 0x27
   39f80:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   39f84:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   39f86:	4a51      	ldr	r2, [pc, #324]	@ (3a0cc <d_type+0x6f8>)
   39f88:	60c2      	str	r2, [r0, #12]
   39f8a:	3309      	adds	r3, #9
   39f8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
   39f8e:	e575      	b.n	39a7c <d_type+0xa8>
   39f90:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   39f94:	4293      	cmp	r3, r2
   39f96:	f6bf aeea 	bge.w	39d6e <d_type+0x39a>
   39f9a:	6922      	ldr	r2, [r4, #16]
   39f9c:	494c      	ldr	r1, [pc, #304]	@ (3a0d0 <d_type+0x6fc>)
   39f9e:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   39fa2:	0085      	lsls	r5, r0, #2
   39fa4:	3301      	adds	r3, #1
   39fa6:	6163      	str	r3, [r4, #20]
   39fa8:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   39fac:	2300      	movs	r3, #0
   39fae:	e9c0 3301 	strd	r3, r3, [r0, #4]
   39fb2:	5553      	strb	r3, [r2, r5]
   39fb4:	2304      	movs	r3, #4
   39fb6:	e9c0 1303 	strd	r1, r3, [r0, #12]
   39fba:	e55f      	b.n	39a7c <d_type+0xa8>
   39fbc:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   39fc0:	4293      	cmp	r3, r2
   39fc2:	f280 80df 	bge.w	3a184 <d_type+0x7b0>
   39fc6:	6922      	ldr	r2, [r4, #16]
   39fc8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   39fcc:	eb02 0081 	add.w	r0, r2, r1, lsl #2
   39fd0:	3301      	adds	r3, #1
   39fd2:	2500      	movs	r5, #0
   39fd4:	e9c0 5501 	strd	r5, r5, [r0, #4]
   39fd8:	6163      	str	r3, [r4, #20]
   39fda:	2327      	movs	r3, #39	@ 0x27
   39fdc:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   39fe0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   39fe2:	4a3c      	ldr	r2, [pc, #240]	@ (3a0d4 <d_type+0x700>)
   39fe4:	60c2      	str	r2, [r0, #12]
   39fe6:	3311      	adds	r3, #17
   39fe8:	62e3      	str	r3, [r4, #44]	@ 0x2c
   39fea:	e547      	b.n	39a7c <d_type+0xa8>
   39fec:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   39ff0:	4293      	cmp	r3, r2
   39ff2:	f280 80c7 	bge.w	3a184 <d_type+0x7b0>
   39ff6:	6922      	ldr	r2, [r4, #16]
   39ff8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   39ffc:	eb02 0081 	add.w	r0, r2, r1, lsl #2
   3a000:	3301      	adds	r3, #1
   3a002:	2500      	movs	r5, #0
   3a004:	e9c0 5501 	strd	r5, r5, [r0, #4]
   3a008:	6163      	str	r3, [r4, #20]
   3a00a:	2327      	movs	r3, #39	@ 0x27
   3a00c:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   3a010:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   3a012:	4a31      	ldr	r2, [pc, #196]	@ (3a0d8 <d_type+0x704>)
   3a014:	60c2      	str	r2, [r0, #12]
   3a016:	3308      	adds	r3, #8
   3a018:	62e3      	str	r3, [r4, #44]	@ 0x2c
   3a01a:	e52f      	b.n	39a7c <d_type+0xa8>
   3a01c:	4620      	mov	r0, r4
   3a01e:	f7ff fcd9 	bl	399d4 <d_type>
   3a022:	2300      	movs	r3, #0
   3a024:	4602      	mov	r2, r0
   3a026:	214c      	movs	r1, #76	@ 0x4c
   3a028:	4620      	mov	r0, r4
   3a02a:	f7ff f843 	bl	390b4 <d_make_comp>
   3a02e:	4605      	mov	r5, r0
   3a030:	9000      	str	r0, [sp, #0]
   3a032:	e545      	b.n	39ac0 <d_type+0xec>
   3a034:	4829      	ldr	r0, [pc, #164]	@ (3a0dc <d_type+0x708>)
   3a036:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   3a03a:	eb00 0283 	add.w	r2, r0, r3, lsl #2
   3a03e:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
   3a042:	4283      	cmp	r3, r0
   3a044:	f280 80a1 	bge.w	3a18a <d_type+0x7b6>
   3a048:	6926      	ldr	r6, [r4, #16]
   3a04a:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   3a04e:	eb06 008c 	add.w	r0, r6, ip, lsl #2
   3a052:	3301      	adds	r3, #1
   3a054:	e9c0 5501 	strd	r5, r5, [r0, #4]
   3a058:	6163      	str	r3, [r4, #20]
   3a05a:	2327      	movs	r3, #39	@ 0x27
   3a05c:	f806 302c 	strb.w	r3, [r6, ip, lsl #2]
   3a060:	60c2      	str	r2, [r0, #12]
   3a062:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   3a064:	6852      	ldr	r2, [r2, #4]
   3a066:	3101      	adds	r1, #1
   3a068:	4413      	add	r3, r2
   3a06a:	60e1      	str	r1, [r4, #12]
   3a06c:	62e3      	str	r3, [r4, #44]	@ 0x2c
   3a06e:	e505      	b.n	39a7c <d_type+0xa8>
   3a070:	2700      	movs	r7, #0
   3a072:	e63e      	b.n	39cf2 <d_type+0x31e>
   3a074:	3301      	adds	r3, #1
   3a076:	60e3      	str	r3, [r4, #12]
   3a078:	4620      	mov	r0, r4
   3a07a:	f001 fc53 	bl	3b924 <d_template_args_1>
   3a07e:	462a      	mov	r2, r5
   3a080:	4603      	mov	r3, r0
   3a082:	2104      	movs	r1, #4
   3a084:	4620      	mov	r0, r4
   3a086:	f7ff f815 	bl	390b4 <d_make_comp>
   3a08a:	4605      	mov	r5, r0
   3a08c:	e574      	b.n	39b78 <d_type+0x1a4>
   3a08e:	2301      	movs	r3, #1
   3a090:	6b25      	ldr	r5, [r4, #48]	@ 0x30
   3a092:	6323      	str	r3, [r4, #48]	@ 0x30
   3a094:	4620      	mov	r0, r4
   3a096:	f000 fbe3 	bl	3a860 <d_expression_1>
   3a09a:	6325      	str	r5, [r4, #48]	@ 0x30
   3a09c:	4607      	mov	r7, r0
   3a09e:	2800      	cmp	r0, #0
   3a0a0:	f43f ae65 	beq.w	39d6e <d_type+0x39a>
   3a0a4:	68e0      	ldr	r0, [r4, #12]
   3a0a6:	7802      	ldrb	r2, [r0, #0]
   3a0a8:	e621      	b.n	39cee <d_type+0x31a>
   3a0aa:	bf00      	nop
   3a0ac:	0004cb68 	.word	0x0004cb68
   3a0b0:	000441f4 	.word	0x000441f4
   3a0b4:	00044224 	.word	0x00044224
   3a0b8:	0004cb18 	.word	0x0004cb18
   3a0bc:	0004cb2c 	.word	0x0004cb2c
   3a0c0:	0004cb04 	.word	0x0004cb04
   3a0c4:	0004cac8 	.word	0x0004cac8
   3a0c8:	0004caf0 	.word	0x0004caf0
   3a0cc:	0004cadc 	.word	0x0004cadc
   3a0d0:	0004421c 	.word	0x0004421c
   3a0d4:	0004cb54 	.word	0x0004cb54
   3a0d8:	0004cb40 	.word	0x0004cb40
   3a0dc:	0004c8c0 	.word	0x0004c8c0
   3a0e0:	1c73      	adds	r3, r6, #1
   3a0e2:	60e3      	str	r3, [r4, #12]
   3a0e4:	4620      	mov	r0, r4
   3a0e6:	f8d4 9014 	ldr.w	r9, [r4, #20]
   3a0ea:	f8d4 8020 	ldr.w	r8, [r4, #32]
   3a0ee:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
   3a0f0:	f001 fc18 	bl	3b924 <d_template_args_1>
   3a0f4:	68e3      	ldr	r3, [r4, #12]
   3a0f6:	781b      	ldrb	r3, [r3, #0]
   3a0f8:	2b49      	cmp	r3, #73	@ 0x49
   3a0fa:	d006      	beq.n	3a10a <d_type+0x736>
   3a0fc:	60e6      	str	r6, [r4, #12]
   3a0fe:	f8c4 9014 	str.w	r9, [r4, #20]
   3a102:	f8c4 8020 	str.w	r8, [r4, #32]
   3a106:	62e7      	str	r7, [r4, #44]	@ 0x2c
   3a108:	e4da      	b.n	39ac0 <d_type+0xec>
   3a10a:	2d00      	cmp	r5, #0
   3a10c:	f43f ae2f 	beq.w	39d6e <d_type+0x39a>
   3a110:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
   3a114:	429a      	cmp	r2, r3
   3a116:	f6bf ae2a 	bge.w	39d6e <d_type+0x39a>
   3a11a:	69e1      	ldr	r1, [r4, #28]
   3a11c:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
   3a120:	3201      	adds	r2, #1
   3a122:	4603      	mov	r3, r0
   3a124:	6222      	str	r2, [r4, #32]
   3a126:	e557      	b.n	39bd8 <d_type+0x204>
   3a128:	2810      	cmp	r0, #16
   3a12a:	f47f ae20 	bne.w	39d6e <d_type+0x39a>
   3a12e:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
   3a132:	3301      	adds	r3, #1
   3a134:	428a      	cmp	r2, r1
   3a136:	60e3      	str	r3, [r4, #12]
   3a138:	da24      	bge.n	3a184 <d_type+0x7b0>
   3a13a:	6920      	ldr	r0, [r4, #16]
   3a13c:	2314      	movs	r3, #20
   3a13e:	fb02 f303 	mul.w	r3, r2, r3
   3a142:	18c1      	adds	r1, r0, r3
   3a144:	3201      	adds	r2, #1
   3a146:	2500      	movs	r5, #0
   3a148:	e9c1 5501 	strd	r5, r5, [r1, #4]
   3a14c:	6162      	str	r2, [r4, #20]
   3a14e:	2227      	movs	r2, #39	@ 0x27
   3a150:	54c2      	strb	r2, [r0, r3]
   3a152:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   3a154:	4a0e      	ldr	r2, [pc, #56]	@ (3a190 <d_type+0x7bc>)
   3a156:	9100      	str	r1, [sp, #0]
   3a158:	60ca      	str	r2, [r1, #12]
   3a15a:	330f      	adds	r3, #15
   3a15c:	e645      	b.n	39dea <d_type+0x416>
   3a15e:	3103      	adds	r1, #3
   3a160:	2301      	movs	r3, #1
   3a162:	6b26      	ldr	r6, [r4, #48]	@ 0x30
   3a164:	60e1      	str	r1, [r4, #12]
   3a166:	6323      	str	r3, [r4, #48]	@ 0x30
   3a168:	4620      	mov	r0, r4
   3a16a:	f000 fb79 	bl	3a860 <d_expression_1>
   3a16e:	6326      	str	r6, [r4, #48]	@ 0x30
   3a170:	4605      	mov	r5, r0
   3a172:	2800      	cmp	r0, #0
   3a174:	f47f ae6a 	bne.w	39e4c <d_type+0x478>
   3a178:	e5f9      	b.n	39d6e <d_type+0x39a>
   3a17a:	4906      	ldr	r1, [pc, #24]	@ (3a194 <d_type+0x7c0>)
   3a17c:	60e3      	str	r3, [r4, #12]
   3a17e:	a801      	add	r0, sp, #4
   3a180:	f005 fc46 	bl	3fa10 <sprintf>
   3a184:	2300      	movs	r3, #0
   3a186:	68db      	ldr	r3, [r3, #12]
   3a188:	deff      	udf	#255	@ 0xff
   3a18a:	68eb      	ldr	r3, [r5, #12]
   3a18c:	deff      	udf	#255	@ 0xff
   3a18e:	bf00      	nop
   3a190:	0004cb7c 	.word	0x0004cb7c
   3a194:	000441f4 	.word	0x000441f4

0003a198 <d_parmlist>:
   3a198:	b530      	push	{r4, r5, lr}
   3a19a:	4604      	mov	r4, r0
   3a19c:	b083      	sub	sp, #12
   3a19e:	68e2      	ldr	r2, [r4, #12]
   3a1a0:	2300      	movs	r3, #0
   3a1a2:	9301      	str	r3, [sp, #4]
   3a1a4:	7813      	ldrb	r3, [r2, #0]
   3a1a6:	2b4f      	cmp	r3, #79	@ 0x4f
   3a1a8:	ad01      	add	r5, sp, #4
   3a1aa:	4620      	mov	r0, r4
   3a1ac:	d017      	beq.n	3a1de <d_parmlist+0x46>
   3a1ae:	d81f      	bhi.n	3a1f0 <d_parmlist+0x58>
   3a1b0:	2b2e      	cmp	r3, #46	@ 0x2e
   3a1b2:	d017      	beq.n	3a1e4 <d_parmlist+0x4c>
   3a1b4:	2b45      	cmp	r3, #69	@ 0x45
   3a1b6:	d015      	beq.n	3a1e4 <d_parmlist+0x4c>
   3a1b8:	b1a3      	cbz	r3, 3a1e4 <d_parmlist+0x4c>
   3a1ba:	f7ff fc0b 	bl	399d4 <d_type>
   3a1be:	4602      	mov	r2, r0
   3a1c0:	2300      	movs	r3, #0
   3a1c2:	212e      	movs	r1, #46	@ 0x2e
   3a1c4:	4620      	mov	r0, r4
   3a1c6:	b33a      	cbz	r2, 3a218 <d_parmlist+0x80>
   3a1c8:	f7fe ff74 	bl	390b4 <d_make_comp>
   3a1cc:	6028      	str	r0, [r5, #0]
   3a1ce:	b318      	cbz	r0, 3a218 <d_parmlist+0x80>
   3a1d0:	68e2      	ldr	r2, [r4, #12]
   3a1d2:	7813      	ldrb	r3, [r2, #0]
   3a1d4:	2b4f      	cmp	r3, #79	@ 0x4f
   3a1d6:	f100 0510 	add.w	r5, r0, #16
   3a1da:	4620      	mov	r0, r4
   3a1dc:	d1e7      	bne.n	3a1ae <d_parmlist+0x16>
   3a1de:	7853      	ldrb	r3, [r2, #1]
   3a1e0:	2b45      	cmp	r3, #69	@ 0x45
   3a1e2:	d1ea      	bne.n	3a1ba <d_parmlist+0x22>
   3a1e4:	9801      	ldr	r0, [sp, #4]
   3a1e6:	b1b8      	cbz	r0, 3a218 <d_parmlist+0x80>
   3a1e8:	6903      	ldr	r3, [r0, #16]
   3a1ea:	b13b      	cbz	r3, 3a1fc <d_parmlist+0x64>
   3a1ec:	b003      	add	sp, #12
   3a1ee:	bd30      	pop	{r4, r5, pc}
   3a1f0:	2b52      	cmp	r3, #82	@ 0x52
   3a1f2:	d1e2      	bne.n	3a1ba <d_parmlist+0x22>
   3a1f4:	7853      	ldrb	r3, [r2, #1]
   3a1f6:	2b45      	cmp	r3, #69	@ 0x45
   3a1f8:	d1df      	bne.n	3a1ba <d_parmlist+0x22>
   3a1fa:	e7f3      	b.n	3a1e4 <d_parmlist+0x4c>
   3a1fc:	68c2      	ldr	r2, [r0, #12]
   3a1fe:	7811      	ldrb	r1, [r2, #0]
   3a200:	2927      	cmp	r1, #39	@ 0x27
   3a202:	d1f3      	bne.n	3a1ec <d_parmlist+0x54>
   3a204:	68d2      	ldr	r2, [r2, #12]
   3a206:	7c11      	ldrb	r1, [r2, #16]
   3a208:	2909      	cmp	r1, #9
   3a20a:	d1ef      	bne.n	3a1ec <d_parmlist+0x54>
   3a20c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
   3a20e:	6852      	ldr	r2, [r2, #4]
   3a210:	1a89      	subs	r1, r1, r2
   3a212:	62e1      	str	r1, [r4, #44]	@ 0x2c
   3a214:	60c3      	str	r3, [r0, #12]
   3a216:	e7e9      	b.n	3a1ec <d_parmlist+0x54>
   3a218:	2000      	movs	r0, #0
   3a21a:	b003      	add	sp, #12
   3a21c:	bd30      	pop	{r4, r5, pc}
   3a21e:	bf00      	nop

0003a220 <d_bare_function_type>:
   3a220:	b570      	push	{r4, r5, r6, lr}
   3a222:	68c3      	ldr	r3, [r0, #12]
   3a224:	781a      	ldrb	r2, [r3, #0]
   3a226:	2a4a      	cmp	r2, #74	@ 0x4a
   3a228:	4605      	mov	r5, r0
   3a22a:	d01a      	beq.n	3a262 <d_bare_function_type+0x42>
   3a22c:	b181      	cbz	r1, 3a250 <d_bare_function_type+0x30>
   3a22e:	4628      	mov	r0, r5
   3a230:	f7ff fbd0 	bl	399d4 <d_type>
   3a234:	4604      	mov	r4, r0
   3a236:	b190      	cbz	r0, 3a25e <d_bare_function_type+0x3e>
   3a238:	4628      	mov	r0, r5
   3a23a:	f7ff ffad 	bl	3a198 <d_parmlist>
   3a23e:	4603      	mov	r3, r0
   3a240:	b168      	cbz	r0, 3a25e <d_bare_function_type+0x3e>
   3a242:	4622      	mov	r2, r4
   3a244:	4628      	mov	r0, r5
   3a246:	2129      	movs	r1, #41	@ 0x29
   3a248:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3a24c:	f7fe bf32 	b.w	390b4 <d_make_comp>
   3a250:	4628      	mov	r0, r5
   3a252:	460c      	mov	r4, r1
   3a254:	f7ff ffa0 	bl	3a198 <d_parmlist>
   3a258:	4603      	mov	r3, r0
   3a25a:	2800      	cmp	r0, #0
   3a25c:	d1f1      	bne.n	3a242 <d_bare_function_type+0x22>
   3a25e:	2000      	movs	r0, #0
   3a260:	bd70      	pop	{r4, r5, r6, pc}
   3a262:	3301      	adds	r3, #1
   3a264:	60c3      	str	r3, [r0, #12]
   3a266:	e7e2      	b.n	3a22e <d_bare_function_type+0xe>

0003a268 <d_function_type>:
   3a268:	b570      	push	{r4, r5, r6, lr}
   3a26a:	4604      	mov	r4, r0
   3a26c:	6880      	ldr	r0, [r0, #8]
   3a26e:	f410 2080 	ands.w	r0, r0, #262144	@ 0x40000
   3a272:	d10b      	bne.n	3a28c <d_function_type+0x24>
   3a274:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
   3a276:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
   3a27a:	d806      	bhi.n	3a28a <d_function_type+0x22>
   3a27c:	1c51      	adds	r1, r2, #1
   3a27e:	68e3      	ldr	r3, [r4, #12]
   3a280:	63e1      	str	r1, [r4, #60]	@ 0x3c
   3a282:	7819      	ldrb	r1, [r3, #0]
   3a284:	2946      	cmp	r1, #70	@ 0x46
   3a286:	d007      	beq.n	3a298 <d_function_type+0x30>
   3a288:	63e2      	str	r2, [r4, #60]	@ 0x3c
   3a28a:	bd70      	pop	{r4, r5, r6, pc}
   3a28c:	68e3      	ldr	r3, [r4, #12]
   3a28e:	781a      	ldrb	r2, [r3, #0]
   3a290:	2a46      	cmp	r2, #70	@ 0x46
   3a292:	d001      	beq.n	3a298 <d_function_type+0x30>
   3a294:	2000      	movs	r0, #0
   3a296:	bd70      	pop	{r4, r5, r6, pc}
   3a298:	1c5a      	adds	r2, r3, #1
   3a29a:	60e2      	str	r2, [r4, #12]
   3a29c:	785a      	ldrb	r2, [r3, #1]
   3a29e:	2a59      	cmp	r2, #89	@ 0x59
   3a2a0:	bf04      	itt	eq
   3a2a2:	3302      	addeq	r3, #2
   3a2a4:	60e3      	streq	r3, [r4, #12]
   3a2a6:	2101      	movs	r1, #1
   3a2a8:	4620      	mov	r0, r4
   3a2aa:	f7ff ffb9 	bl	3a220 <d_bare_function_type>
   3a2ae:	68e5      	ldr	r5, [r4, #12]
   3a2b0:	782b      	ldrb	r3, [r5, #0]
   3a2b2:	2b52      	cmp	r3, #82	@ 0x52
   3a2b4:	d01a      	beq.n	3a2ec <d_function_type+0x84>
   3a2b6:	2b4f      	cmp	r3, #79	@ 0x4f
   3a2b8:	d00a      	beq.n	3a2d0 <d_function_type+0x68>
   3a2ba:	2b45      	cmp	r3, #69	@ 0x45
   3a2bc:	68a3      	ldr	r3, [r4, #8]
   3a2be:	bf06      	itte	eq
   3a2c0:	3501      	addeq	r5, #1
   3a2c2:	60e5      	streq	r5, [r4, #12]
   3a2c4:	2000      	movne	r0, #0
   3a2c6:	035b      	lsls	r3, r3, #13
   3a2c8:	d4df      	bmi.n	3a28a <d_function_type+0x22>
   3a2ca:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
   3a2cc:	3a01      	subs	r2, #1
   3a2ce:	e7db      	b.n	3a288 <d_function_type+0x20>
   3a2d0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   3a2d2:	2120      	movs	r1, #32
   3a2d4:	3303      	adds	r3, #3
   3a2d6:	1c6e      	adds	r6, r5, #1
   3a2d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
   3a2da:	4602      	mov	r2, r0
   3a2dc:	2300      	movs	r3, #0
   3a2de:	60e6      	str	r6, [r4, #12]
   3a2e0:	4620      	mov	r0, r4
   3a2e2:	f7fe fee7 	bl	390b4 <d_make_comp>
   3a2e6:	786b      	ldrb	r3, [r5, #1]
   3a2e8:	4635      	mov	r5, r6
   3a2ea:	e7e6      	b.n	3a2ba <d_function_type+0x52>
   3a2ec:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   3a2ee:	211f      	movs	r1, #31
   3a2f0:	3302      	adds	r3, #2
   3a2f2:	e7f0      	b.n	3a2d6 <d_function_type+0x6e>

0003a2f4 <d_template_parm>:
   3a2f4:	68c3      	ldr	r3, [r0, #12]
   3a2f6:	781a      	ldrb	r2, [r3, #0]
   3a2f8:	2a54      	cmp	r2, #84	@ 0x54
   3a2fa:	d142      	bne.n	3a382 <d_template_parm+0x8e>
   3a2fc:	b570      	push	{r4, r5, r6, lr}
   3a2fe:	785a      	ldrb	r2, [r3, #1]
   3a300:	3a6e      	subs	r2, #110	@ 0x6e
   3a302:	4604      	mov	r4, r0
   3a304:	460d      	mov	r5, r1
   3a306:	2a0b      	cmp	r2, #11
   3a308:	d811      	bhi.n	3a32e <d_template_parm+0x3a>
   3a30a:	e8df f002 	tbb	[pc, r2]
   3a30e:	101c      	.short	0x101c
   3a310:	10101006 	.word	0x10101006
   3a314:	1010102a 	.word	0x1010102a
   3a318:	1210      	.short	0x1210
   3a31a:	3302      	adds	r3, #2
   3a31c:	4629      	mov	r1, r5
   3a31e:	60c3      	str	r3, [r0, #12]
   3a320:	f7ff ffe8 	bl	3a2f4 <d_template_parm>
   3a324:	215b      	movs	r1, #91	@ 0x5b
   3a326:	4602      	mov	r2, r0
   3a328:	b938      	cbnz	r0, 3a33a <d_template_parm+0x46>
   3a32a:	2301      	movs	r3, #1
   3a32c:	602b      	str	r3, [r5, #0]
   3a32e:	2000      	movs	r0, #0
   3a330:	bd70      	pop	{r4, r5, r6, pc}
   3a332:	3302      	adds	r3, #2
   3a334:	60c3      	str	r3, [r0, #12]
   3a336:	2158      	movs	r1, #88	@ 0x58
   3a338:	2200      	movs	r2, #0
   3a33a:	4620      	mov	r0, r4
   3a33c:	2300      	movs	r3, #0
   3a33e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3a342:	f7fe beb7 	b.w	390b4 <d_make_comp>
   3a346:	3302      	adds	r3, #2
   3a348:	60c3      	str	r3, [r0, #12]
   3a34a:	f7ff fb43 	bl	399d4 <d_type>
   3a34e:	4602      	mov	r2, r0
   3a350:	2800      	cmp	r0, #0
   3a352:	d0ea      	beq.n	3a32a <d_template_parm+0x36>
   3a354:	4620      	mov	r0, r4
   3a356:	2159      	movs	r1, #89	@ 0x59
   3a358:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3a35c:	2300      	movs	r3, #0
   3a35e:	f7fe bea9 	b.w	390b4 <d_make_comp>
   3a362:	3302      	adds	r3, #2
   3a364:	60c3      	str	r3, [r0, #12]
   3a366:	4629      	mov	r1, r5
   3a368:	f000 f80e 	bl	3a388 <d_template_head>
   3a36c:	4602      	mov	r2, r0
   3a36e:	2800      	cmp	r0, #0
   3a370:	d0db      	beq.n	3a32a <d_template_parm+0x36>
   3a372:	68e3      	ldr	r3, [r4, #12]
   3a374:	7819      	ldrb	r1, [r3, #0]
   3a376:	2945      	cmp	r1, #69	@ 0x45
   3a378:	d1d7      	bne.n	3a32a <d_template_parm+0x36>
   3a37a:	3301      	adds	r3, #1
   3a37c:	60e3      	str	r3, [r4, #12]
   3a37e:	215a      	movs	r1, #90	@ 0x5a
   3a380:	e7db      	b.n	3a33a <d_template_parm+0x46>
   3a382:	2000      	movs	r0, #0
   3a384:	4770      	bx	lr
   3a386:	bf00      	nop

0003a388 <d_template_head>:
   3a388:	b570      	push	{r4, r5, r6, lr}
   3a38a:	b082      	sub	sp, #8
   3a38c:	2300      	movs	r3, #0
   3a38e:	4605      	mov	r5, r0
   3a390:	460e      	mov	r6, r1
   3a392:	9301      	str	r3, [sp, #4]
   3a394:	ac01      	add	r4, sp, #4
   3a396:	e002      	b.n	3a39e <d_template_head+0x16>
   3a398:	6023      	str	r3, [r4, #0]
   3a39a:	f103 0410 	add.w	r4, r3, #16
   3a39e:	4631      	mov	r1, r6
   3a3a0:	4628      	mov	r0, r5
   3a3a2:	f7ff ffa7 	bl	3a2f4 <d_template_parm>
   3a3a6:	4603      	mov	r3, r0
   3a3a8:	2800      	cmp	r0, #0
   3a3aa:	d1f5      	bne.n	3a398 <d_template_head+0x10>
   3a3ac:	9a01      	ldr	r2, [sp, #4]
   3a3ae:	b132      	cbz	r2, 3a3be <d_template_head+0x36>
   3a3b0:	2157      	movs	r1, #87	@ 0x57
   3a3b2:	4628      	mov	r0, r5
   3a3b4:	b002      	add	sp, #8
   3a3b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3a3ba:	f7fe be7b 	b.w	390b4 <d_make_comp>
   3a3be:	b002      	add	sp, #8
   3a3c0:	bd70      	pop	{r4, r5, r6, pc}
   3a3c2:	bf00      	nop

0003a3c4 <d_operator_name>:
   3a3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3a3c6:	68c3      	ldr	r3, [r0, #12]
   3a3c8:	781f      	ldrb	r7, [r3, #0]
   3a3ca:	4606      	mov	r6, r0
   3a3cc:	b3a7      	cbz	r7, 3a438 <d_operator_name+0x74>
   3a3ce:	1c5a      	adds	r2, r3, #1
   3a3d0:	60c2      	str	r2, [r0, #12]
   3a3d2:	f893 e001 	ldrb.w	lr, [r3, #1]
   3a3d6:	781f      	ldrb	r7, [r3, #0]
   3a3d8:	f1be 0f00 	cmp.w	lr, #0
   3a3dc:	d12e      	bne.n	3a43c <d_operator_name+0x78>
   3a3de:	4d38      	ldr	r5, [pc, #224]	@ (3a4c0 <d_operator_name+0xfc>)
   3a3e0:	2148      	movs	r1, #72	@ 0x48
   3a3e2:	2200      	movs	r2, #0
   3a3e4:	1a8b      	subs	r3, r1, r2
   3a3e6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   3a3ea:	eb02 0363 	add.w	r3, r2, r3, asr #1
   3a3ee:	0118      	lsls	r0, r3, #4
   3a3f0:	eb05 1c03 	add.w	ip, r5, r3, lsl #4
   3a3f4:	582c      	ldr	r4, [r5, r0]
   3a3f6:	7820      	ldrb	r0, [r4, #0]
   3a3f8:	42b8      	cmp	r0, r7
   3a3fa:	d006      	beq.n	3a40a <d_operator_name+0x46>
   3a3fc:	bf94      	ite	ls
   3a3fe:	1c5a      	addls	r2, r3, #1
   3a400:	4619      	movhi	r1, r3
   3a402:	428a      	cmp	r2, r1
   3a404:	d1ee      	bne.n	3a3e4 <d_operator_name+0x20>
   3a406:	2000      	movs	r0, #0
   3a408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3a40a:	7860      	ldrb	r0, [r4, #1]
   3a40c:	4570      	cmp	r0, lr
   3a40e:	d1f5      	bne.n	3a3fc <d_operator_name+0x38>
   3a410:	e9d6 3205 	ldrd	r3, r2, [r6, #20]
   3a414:	4293      	cmp	r3, r2
   3a416:	daf6      	bge.n	3a406 <d_operator_name+0x42>
   3a418:	6932      	ldr	r2, [r6, #16]
   3a41a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   3a41e:	eb02 0081 	add.w	r0, r2, r1, lsl #2
   3a422:	3301      	adds	r3, #1
   3a424:	2400      	movs	r4, #0
   3a426:	e9c0 4401 	strd	r4, r4, [r0, #4]
   3a42a:	6173      	str	r3, [r6, #20]
   3a42c:	2332      	movs	r3, #50	@ 0x32
   3a42e:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   3a432:	f8c0 c00c 	str.w	ip, [r0, #12]
   3a436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3a438:	46be      	mov	lr, r7
   3a43a:	e7d0      	b.n	3a3de <d_operator_name+0x1a>
   3a43c:	1c9a      	adds	r2, r3, #2
   3a43e:	60c2      	str	r2, [r0, #12]
   3a440:	2f76      	cmp	r7, #118	@ 0x76
   3a442:	f893 e001 	ldrb.w	lr, [r3, #1]
   3a446:	d11f      	bne.n	3a488 <d_operator_name+0xc4>
   3a448:	f1ae 0430 	sub.w	r4, lr, #48	@ 0x30
   3a44c:	b2e3      	uxtb	r3, r4
   3a44e:	2b09      	cmp	r3, #9
   3a450:	d8c5      	bhi.n	3a3de <d_operator_name+0x1a>
   3a452:	f7ff f95f 	bl	39714 <d_source_name>
   3a456:	e9d6 3105 	ldrd	r3, r1, [r6, #20]
   3a45a:	428b      	cmp	r3, r1
   3a45c:	4602      	mov	r2, r0
   3a45e:	dad2      	bge.n	3a406 <d_operator_name+0x42>
   3a460:	6937      	ldr	r7, [r6, #16]
   3a462:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   3a466:	eb07 0081 	add.w	r0, r7, r1, lsl #2
   3a46a:	3301      	adds	r3, #1
   3a46c:	2500      	movs	r5, #0
   3a46e:	e9c0 5501 	strd	r5, r5, [r0, #4]
   3a472:	0089      	lsls	r1, r1, #2
   3a474:	6173      	str	r3, [r6, #20]
   3a476:	2a00      	cmp	r2, #0
   3a478:	d0c5      	beq.n	3a406 <d_operator_name+0x42>
   3a47a:	2333      	movs	r3, #51	@ 0x33
   3a47c:	e9c0 5501 	strd	r5, r5, [r0, #4]
   3a480:	547b      	strb	r3, [r7, r1]
   3a482:	e9c0 4203 	strd	r4, r2, [r0, #12]
   3a486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3a488:	2f63      	cmp	r7, #99	@ 0x63
   3a48a:	d1a8      	bne.n	3a3de <d_operator_name+0x1a>
   3a48c:	f1be 0f76 	cmp.w	lr, #118	@ 0x76
   3a490:	d1a5      	bne.n	3a3de <d_operator_name+0x1a>
   3a492:	e9d0 340c 	ldrd	r3, r4, [r0, #48]	@ 0x30
   3a496:	fab3 f383 	clz	r3, r3
   3a49a:	095b      	lsrs	r3, r3, #5
   3a49c:	6343      	str	r3, [r0, #52]	@ 0x34
   3a49e:	f7ff fa99 	bl	399d4 <d_type>
   3a4a2:	6b73      	ldr	r3, [r6, #52]	@ 0x34
   3a4a4:	4602      	mov	r2, r0
   3a4a6:	b133      	cbz	r3, 3a4b6 <d_operator_name+0xf2>
   3a4a8:	2300      	movs	r3, #0
   3a4aa:	2135      	movs	r1, #53	@ 0x35
   3a4ac:	4630      	mov	r0, r6
   3a4ae:	f7fe fe01 	bl	390b4 <d_make_comp>
   3a4b2:	6374      	str	r4, [r6, #52]	@ 0x34
   3a4b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3a4b6:	2134      	movs	r1, #52	@ 0x34
   3a4b8:	4630      	mov	r0, r6
   3a4ba:	f7fe fdfb 	bl	390b4 <d_make_comp>
   3a4be:	e7f8      	b.n	3a4b2 <d_operator_name+0xee>
   3a4c0:	0004c430 	.word	0x0004c430

0003a4c4 <d_unqualified_name>:
   3a4c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3a4c8:	b084      	sub	sp, #16
   3a4ca:	460e      	mov	r6, r1
   3a4cc:	a901      	add	r1, sp, #4
   3a4ce:	4604      	mov	r4, r0
   3a4d0:	9201      	str	r2, [sp, #4]
   3a4d2:	f7ff fa4f 	bl	39974 <d_maybe_module_name>
   3a4d6:	2800      	cmp	r0, #0
   3a4d8:	f000 80ec 	beq.w	3a6b4 <d_unqualified_name+0x1f0>
   3a4dc:	68e2      	ldr	r2, [r4, #12]
   3a4de:	7813      	ldrb	r3, [r2, #0]
   3a4e0:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
   3a4e4:	2909      	cmp	r1, #9
   3a4e6:	d979      	bls.n	3a5dc <d_unqualified_name+0x118>
   3a4e8:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
   3a4ec:	2919      	cmp	r1, #25
   3a4ee:	d829      	bhi.n	3a544 <d_unqualified_name+0x80>
   3a4f0:	2b6f      	cmp	r3, #111	@ 0x6f
   3a4f2:	6b27      	ldr	r7, [r4, #48]	@ 0x30
   3a4f4:	f000 80a1 	beq.w	3a63a <d_unqualified_name+0x176>
   3a4f8:	4620      	mov	r0, r4
   3a4fa:	f7ff ff63 	bl	3a3c4 <d_operator_name>
   3a4fe:	6327      	str	r7, [r4, #48]	@ 0x30
   3a500:	4605      	mov	r5, r0
   3a502:	2800      	cmp	r0, #0
   3a504:	f000 80c8 	beq.w	3a698 <d_unqualified_name+0x1d4>
   3a508:	7803      	ldrb	r3, [r0, #0]
   3a50a:	2b32      	cmp	r3, #50	@ 0x32
   3a50c:	d16a      	bne.n	3a5e4 <d_unqualified_name+0x120>
   3a50e:	68c2      	ldr	r2, [r0, #12]
   3a510:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   3a512:	6891      	ldr	r1, [r2, #8]
   3a514:	6812      	ldr	r2, [r2, #0]
   3a516:	3307      	adds	r3, #7
   3a518:	440b      	add	r3, r1
   3a51a:	62e3      	str	r3, [r4, #44]	@ 0x2c
   3a51c:	7813      	ldrb	r3, [r2, #0]
   3a51e:	2b6c      	cmp	r3, #108	@ 0x6c
   3a520:	d160      	bne.n	3a5e4 <d_unqualified_name+0x120>
   3a522:	7853      	ldrb	r3, [r2, #1]
   3a524:	2b69      	cmp	r3, #105	@ 0x69
   3a526:	d15d      	bne.n	3a5e4 <d_unqualified_name+0x120>
   3a528:	7893      	ldrb	r3, [r2, #2]
   3a52a:	2b00      	cmp	r3, #0
   3a52c:	d15a      	bne.n	3a5e4 <d_unqualified_name+0x120>
   3a52e:	4620      	mov	r0, r4
   3a530:	f7ff f8f0 	bl	39714 <d_source_name>
   3a534:	462a      	mov	r2, r5
   3a536:	4603      	mov	r3, r0
   3a538:	2137      	movs	r1, #55	@ 0x37
   3a53a:	4620      	mov	r0, r4
   3a53c:	f7fe fdba 	bl	390b4 <d_make_comp>
   3a540:	4605      	mov	r5, r0
   3a542:	e04f      	b.n	3a5e4 <d_unqualified_name+0x120>
   3a544:	2b44      	cmp	r3, #68	@ 0x44
   3a546:	f000 8081 	beq.w	3a64c <d_unqualified_name+0x188>
   3a54a:	f1a3 0143 	sub.w	r1, r3, #67	@ 0x43
   3a54e:	2901      	cmp	r1, #1
   3a550:	f240 808d 	bls.w	3a66e <d_unqualified_name+0x1aa>
   3a554:	2b4c      	cmp	r3, #76	@ 0x4c
   3a556:	f000 80a1 	beq.w	3a69c <d_unqualified_name+0x1d8>
   3a55a:	2b55      	cmp	r3, #85	@ 0x55
   3a55c:	f040 80aa 	bne.w	3a6b4 <d_unqualified_name+0x1f0>
   3a560:	7853      	ldrb	r3, [r2, #1]
   3a562:	2b6c      	cmp	r3, #108	@ 0x6c
   3a564:	f000 80ef 	beq.w	3a746 <d_unqualified_name+0x282>
   3a568:	2b74      	cmp	r3, #116	@ 0x74
   3a56a:	f040 80a3 	bne.w	3a6b4 <d_unqualified_name+0x1f0>
   3a56e:	1c53      	adds	r3, r2, #1
   3a570:	60e3      	str	r3, [r4, #12]
   3a572:	7853      	ldrb	r3, [r2, #1]
   3a574:	9d01      	ldr	r5, [sp, #4]
   3a576:	2b74      	cmp	r3, #116	@ 0x74
   3a578:	f040 808e 	bne.w	3a698 <d_unqualified_name+0x1d4>
   3a57c:	1c93      	adds	r3, r2, #2
   3a57e:	60e3      	str	r3, [r4, #12]
   3a580:	7892      	ldrb	r2, [r2, #2]
   3a582:	2a5f      	cmp	r2, #95	@ 0x5f
   3a584:	f000 8161 	beq.w	3a84a <d_unqualified_name+0x386>
   3a588:	2a6e      	cmp	r2, #110	@ 0x6e
   3a58a:	f000 8162 	beq.w	3a852 <d_unqualified_name+0x38e>
   3a58e:	4620      	mov	r0, r4
   3a590:	f7fe fe0c 	bl	391ac <d_number>
   3a594:	3001      	adds	r0, #1
   3a596:	d47f      	bmi.n	3a698 <d_unqualified_name+0x1d4>
   3a598:	68e3      	ldr	r3, [r4, #12]
   3a59a:	781a      	ldrb	r2, [r3, #0]
   3a59c:	2a5f      	cmp	r2, #95	@ 0x5f
   3a59e:	d17b      	bne.n	3a698 <d_unqualified_name+0x1d4>
   3a5a0:	3301      	adds	r3, #1
   3a5a2:	6962      	ldr	r2, [r4, #20]
   3a5a4:	60e3      	str	r3, [r4, #12]
   3a5a6:	69a3      	ldr	r3, [r4, #24]
   3a5a8:	429a      	cmp	r2, r3
   3a5aa:	da75      	bge.n	3a698 <d_unqualified_name+0x1d4>
   3a5ac:	6923      	ldr	r3, [r4, #16]
   3a5ae:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   3a5b2:	eb03 0581 	add.w	r5, r3, r1, lsl #2
   3a5b6:	3201      	adds	r2, #1
   3a5b8:	2700      	movs	r7, #0
   3a5ba:	e9c5 7701 	strd	r7, r7, [r5, #4]
   3a5be:	6162      	str	r2, [r4, #20]
   3a5c0:	2249      	movs	r2, #73	@ 0x49
   3a5c2:	f803 2021 	strb.w	r2, [r3, r1, lsl #2]
   3a5c6:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
   3a5ca:	4293      	cmp	r3, r2
   3a5cc:	60e8      	str	r0, [r5, #12]
   3a5ce:	da63      	bge.n	3a698 <d_unqualified_name+0x1d4>
   3a5d0:	69e2      	ldr	r2, [r4, #28]
   3a5d2:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
   3a5d6:	3301      	adds	r3, #1
   3a5d8:	6223      	str	r3, [r4, #32]
   3a5da:	e003      	b.n	3a5e4 <d_unqualified_name+0x120>
   3a5dc:	4620      	mov	r0, r4
   3a5de:	f7ff f899 	bl	39714 <d_source_name>
   3a5e2:	4605      	mov	r5, r0
   3a5e4:	9b01      	ldr	r3, [sp, #4]
   3a5e6:	b12b      	cbz	r3, 3a5f4 <d_unqualified_name+0x130>
   3a5e8:	462a      	mov	r2, r5
   3a5ea:	2155      	movs	r1, #85	@ 0x55
   3a5ec:	4620      	mov	r0, r4
   3a5ee:	f7fe fd61 	bl	390b4 <d_make_comp>
   3a5f2:	4605      	mov	r5, r0
   3a5f4:	68e3      	ldr	r3, [r4, #12]
   3a5f6:	781a      	ldrb	r2, [r3, #0]
   3a5f8:	2a42      	cmp	r2, #66	@ 0x42
   3a5fa:	d00b      	beq.n	3a614 <d_unqualified_name+0x150>
   3a5fc:	b136      	cbz	r6, 3a60c <d_unqualified_name+0x148>
   3a5fe:	462b      	mov	r3, r5
   3a600:	4632      	mov	r2, r6
   3a602:	2101      	movs	r1, #1
   3a604:	4620      	mov	r0, r4
   3a606:	f7fe fd55 	bl	390b4 <d_make_comp>
   3a60a:	4605      	mov	r5, r0
   3a60c:	4628      	mov	r0, r5
   3a60e:	b004      	add	sp, #16
   3a610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3a614:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
   3a616:	3301      	adds	r3, #1
   3a618:	60e3      	str	r3, [r4, #12]
   3a61a:	4620      	mov	r0, r4
   3a61c:	f7ff f87a 	bl	39714 <d_source_name>
   3a620:	462a      	mov	r2, r5
   3a622:	4603      	mov	r3, r0
   3a624:	214d      	movs	r1, #77	@ 0x4d
   3a626:	4620      	mov	r0, r4
   3a628:	f7fe fd44 	bl	390b4 <d_make_comp>
   3a62c:	68e3      	ldr	r3, [r4, #12]
   3a62e:	781a      	ldrb	r2, [r3, #0]
   3a630:	2a42      	cmp	r2, #66	@ 0x42
   3a632:	4605      	mov	r5, r0
   3a634:	d0ef      	beq.n	3a616 <d_unqualified_name+0x152>
   3a636:	62a7      	str	r7, [r4, #40]	@ 0x28
   3a638:	e7e0      	b.n	3a5fc <d_unqualified_name+0x138>
   3a63a:	7853      	ldrb	r3, [r2, #1]
   3a63c:	2b6e      	cmp	r3, #110	@ 0x6e
   3a63e:	f47f af5b 	bne.w	3a4f8 <d_unqualified_name+0x34>
   3a642:	3202      	adds	r2, #2
   3a644:	2300      	movs	r3, #0
   3a646:	60e2      	str	r2, [r4, #12]
   3a648:	6323      	str	r3, [r4, #48]	@ 0x30
   3a64a:	e755      	b.n	3a4f8 <d_unqualified_name+0x34>
   3a64c:	7853      	ldrb	r3, [r2, #1]
   3a64e:	2b43      	cmp	r3, #67	@ 0x43
   3a650:	d05b      	beq.n	3a70a <d_unqualified_name+0x246>
   3a652:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
   3a654:	b119      	cbz	r1, 3a65e <d_unqualified_name+0x19a>
   3a656:	7808      	ldrb	r0, [r1, #0]
   3a658:	b190      	cbz	r0, 3a680 <d_unqualified_name+0x1bc>
   3a65a:	2818      	cmp	r0, #24
   3a65c:	d010      	beq.n	3a680 <d_unqualified_name+0x1bc>
   3a65e:	3b30      	subs	r3, #48	@ 0x30
   3a660:	2b05      	cmp	r3, #5
   3a662:	d819      	bhi.n	3a698 <d_unqualified_name+0x1d4>
   3a664:	e8df f003 	tbb	[pc, r3]
   3a668:	184b2845 	.word	0x184b2845
   3a66c:	4e48      	.short	0x4e48
   3a66e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
   3a670:	2900      	cmp	r1, #0
   3a672:	f000 80b1 	beq.w	3a7d8 <d_unqualified_name+0x314>
   3a676:	780b      	ldrb	r3, [r1, #0]
   3a678:	b113      	cbz	r3, 3a680 <d_unqualified_name+0x1bc>
   3a67a:	2b18      	cmp	r3, #24
   3a67c:	f040 80ac 	bne.w	3a7d8 <d_unqualified_name+0x314>
   3a680:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   3a682:	6908      	ldr	r0, [r1, #16]
   3a684:	4403      	add	r3, r0
   3a686:	62e3      	str	r3, [r4, #44]	@ 0x2c
   3a688:	7813      	ldrb	r3, [r2, #0]
   3a68a:	2b43      	cmp	r3, #67	@ 0x43
   3a68c:	f000 80a4 	beq.w	3a7d8 <d_unqualified_name+0x314>
   3a690:	2b44      	cmp	r3, #68	@ 0x44
   3a692:	bf08      	it	eq
   3a694:	7853      	ldrbeq	r3, [r2, #1]
   3a696:	d0e2      	beq.n	3a65e <d_unqualified_name+0x19a>
   3a698:	2500      	movs	r5, #0
   3a69a:	e7a3      	b.n	3a5e4 <d_unqualified_name+0x120>
   3a69c:	3201      	adds	r2, #1
   3a69e:	60e2      	str	r2, [r4, #12]
   3a6a0:	4620      	mov	r0, r4
   3a6a2:	f7ff f837 	bl	39714 <d_source_name>
   3a6a6:	4605      	mov	r5, r0
   3a6a8:	b120      	cbz	r0, 3a6b4 <d_unqualified_name+0x1f0>
   3a6aa:	4620      	mov	r0, r4
   3a6ac:	f7fe fddc 	bl	39268 <d_discriminator>
   3a6b0:	2800      	cmp	r0, #0
   3a6b2:	d197      	bne.n	3a5e4 <d_unqualified_name+0x120>
   3a6b4:	2500      	movs	r5, #0
   3a6b6:	e7a9      	b.n	3a60c <d_unqualified_name+0x148>
   3a6b8:	f04f 0c02 	mov.w	ip, #2
   3a6bc:	3202      	adds	r2, #2
   3a6be:	60e2      	str	r2, [r4, #12]
   3a6c0:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   3a6c4:	4293      	cmp	r3, r2
   3a6c6:	dae7      	bge.n	3a698 <d_unqualified_name+0x1d4>
   3a6c8:	6927      	ldr	r7, [r4, #16]
   3a6ca:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   3a6ce:	eb07 0582 	add.w	r5, r7, r2, lsl #2
   3a6d2:	3301      	adds	r3, #1
   3a6d4:	2000      	movs	r0, #0
   3a6d6:	e9c5 0001 	strd	r0, r0, [r5, #4]
   3a6da:	0092      	lsls	r2, r2, #2
   3a6dc:	6163      	str	r3, [r4, #20]
   3a6de:	2900      	cmp	r1, #0
   3a6e0:	d0da      	beq.n	3a698 <d_unqualified_name+0x1d4>
   3a6e2:	2308      	movs	r3, #8
   3a6e4:	e9c5 0001 	strd	r0, r0, [r5, #4]
   3a6e8:	54bb      	strb	r3, [r7, r2]
   3a6ea:	f885 c00c 	strb.w	ip, [r5, #12]
   3a6ee:	6129      	str	r1, [r5, #16]
   3a6f0:	e778      	b.n	3a5e4 <d_unqualified_name+0x120>
   3a6f2:	f04f 0c01 	mov.w	ip, #1
   3a6f6:	e7e1      	b.n	3a6bc <d_unqualified_name+0x1f8>
   3a6f8:	f04f 0c04 	mov.w	ip, #4
   3a6fc:	e7de      	b.n	3a6bc <d_unqualified_name+0x1f8>
   3a6fe:	f04f 0c03 	mov.w	ip, #3
   3a702:	e7db      	b.n	3a6bc <d_unqualified_name+0x1f8>
   3a704:	f04f 0c05 	mov.w	ip, #5
   3a708:	e7d8      	b.n	3a6bc <d_unqualified_name+0x1f8>
   3a70a:	3202      	adds	r2, #2
   3a70c:	60e2      	str	r2, [r4, #12]
   3a70e:	2700      	movs	r7, #0
   3a710:	4620      	mov	r0, r4
   3a712:	f7fe ffff 	bl	39714 <d_source_name>
   3a716:	2300      	movs	r3, #0
   3a718:	4602      	mov	r2, r0
   3a71a:	2152      	movs	r1, #82	@ 0x52
   3a71c:	4620      	mov	r0, r4
   3a71e:	f7fe fcc9 	bl	390b4 <d_make_comp>
   3a722:	46b8      	mov	r8, r7
   3a724:	4607      	mov	r7, r0
   3a726:	f1b8 0f00 	cmp.w	r8, #0
   3a72a:	d00a      	beq.n	3a742 <d_unqualified_name+0x27e>
   3a72c:	f8c8 0010 	str.w	r0, [r8, #16]
   3a730:	2f00      	cmp	r7, #0
   3a732:	d0b1      	beq.n	3a698 <d_unqualified_name+0x1d4>
   3a734:	68e3      	ldr	r3, [r4, #12]
   3a736:	781a      	ldrb	r2, [r3, #0]
   3a738:	2a45      	cmp	r2, #69	@ 0x45
   3a73a:	d1e9      	bne.n	3a710 <d_unqualified_name+0x24c>
   3a73c:	3301      	adds	r3, #1
   3a73e:	60e3      	str	r3, [r4, #12]
   3a740:	e750      	b.n	3a5e4 <d_unqualified_name+0x120>
   3a742:	4605      	mov	r5, r0
   3a744:	e7f4      	b.n	3a730 <d_unqualified_name+0x26c>
   3a746:	1c53      	adds	r3, r2, #1
   3a748:	60e3      	str	r3, [r4, #12]
   3a74a:	7853      	ldrb	r3, [r2, #1]
   3a74c:	2b6c      	cmp	r3, #108	@ 0x6c
   3a74e:	d1a3      	bne.n	3a698 <d_unqualified_name+0x1d4>
   3a750:	3202      	adds	r2, #2
   3a752:	2300      	movs	r3, #0
   3a754:	60e2      	str	r2, [r4, #12]
   3a756:	a903      	add	r1, sp, #12
   3a758:	4620      	mov	r0, r4
   3a75a:	9303      	str	r3, [sp, #12]
   3a75c:	f7ff fe14 	bl	3a388 <d_template_head>
   3a760:	f8dd 800c 	ldr.w	r8, [sp, #12]
   3a764:	4607      	mov	r7, r0
   3a766:	f1b8 0f00 	cmp.w	r8, #0
   3a76a:	d195      	bne.n	3a698 <d_unqualified_name+0x1d4>
   3a76c:	4620      	mov	r0, r4
   3a76e:	f7ff fd13 	bl	3a198 <d_parmlist>
   3a772:	2800      	cmp	r0, #0
   3a774:	d090      	beq.n	3a698 <d_unqualified_name+0x1d4>
   3a776:	2f00      	cmp	r7, #0
   3a778:	d069      	beq.n	3a84e <d_unqualified_name+0x38a>
   3a77a:	6138      	str	r0, [r7, #16]
   3a77c:	68e2      	ldr	r2, [r4, #12]
   3a77e:	7813      	ldrb	r3, [r2, #0]
   3a780:	2b45      	cmp	r3, #69	@ 0x45
   3a782:	d189      	bne.n	3a698 <d_unqualified_name+0x1d4>
   3a784:	1c53      	adds	r3, r2, #1
   3a786:	60e3      	str	r3, [r4, #12]
   3a788:	7852      	ldrb	r2, [r2, #1]
   3a78a:	2a5f      	cmp	r2, #95	@ 0x5f
   3a78c:	d00d      	beq.n	3a7aa <d_unqualified_name+0x2e6>
   3a78e:	2a6e      	cmp	r2, #110	@ 0x6e
   3a790:	d082      	beq.n	3a698 <d_unqualified_name+0x1d4>
   3a792:	4620      	mov	r0, r4
   3a794:	f7fe fd0a 	bl	391ac <d_number>
   3a798:	f110 0801 	adds.w	r8, r0, #1
   3a79c:	f53f af7c 	bmi.w	3a698 <d_unqualified_name+0x1d4>
   3a7a0:	68e3      	ldr	r3, [r4, #12]
   3a7a2:	781a      	ldrb	r2, [r3, #0]
   3a7a4:	2a5f      	cmp	r2, #95	@ 0x5f
   3a7a6:	f47f af77 	bne.w	3a698 <d_unqualified_name+0x1d4>
   3a7aa:	3301      	adds	r3, #1
   3a7ac:	60e3      	str	r3, [r4, #12]
   3a7ae:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   3a7b2:	4293      	cmp	r3, r2
   3a7b4:	f6bf af70 	bge.w	3a698 <d_unqualified_name+0x1d4>
   3a7b8:	6922      	ldr	r2, [r4, #16]
   3a7ba:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   3a7be:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   3a7c2:	3301      	adds	r3, #1
   3a7c4:	2000      	movs	r0, #0
   3a7c6:	e9c5 0001 	strd	r0, r0, [r5, #4]
   3a7ca:	6163      	str	r3, [r4, #20]
   3a7cc:	2347      	movs	r3, #71	@ 0x47
   3a7ce:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   3a7d2:	e9c5 7803 	strd	r7, r8, [r5, #12]
   3a7d6:	e705      	b.n	3a5e4 <d_unqualified_name+0x120>
   3a7d8:	7853      	ldrb	r3, [r2, #1]
   3a7da:	2b49      	cmp	r3, #73	@ 0x49
   3a7dc:	d024      	beq.n	3a828 <d_unqualified_name+0x364>
   3a7de:	f1a3 0031 	sub.w	r0, r3, #49	@ 0x31
   3a7e2:	2804      	cmp	r0, #4
   3a7e4:	f63f af58 	bhi.w	3a698 <d_unqualified_name+0x1d4>
   3a7e8:	3b30      	subs	r3, #48	@ 0x30
   3a7ea:	3202      	adds	r2, #2
   3a7ec:	b2df      	uxtb	r7, r3
   3a7ee:	60e2      	str	r2, [r4, #12]
   3a7f0:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   3a7f4:	4293      	cmp	r3, r2
   3a7f6:	f6bf af4f 	bge.w	3a698 <d_unqualified_name+0x1d4>
   3a7fa:	f8d4 c010 	ldr.w	ip, [r4, #16]
   3a7fe:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   3a802:	eb0c 0582 	add.w	r5, ip, r2, lsl #2
   3a806:	3301      	adds	r3, #1
   3a808:	2000      	movs	r0, #0
   3a80a:	e9c5 0001 	strd	r0, r0, [r5, #4]
   3a80e:	0092      	lsls	r2, r2, #2
   3a810:	6163      	str	r3, [r4, #20]
   3a812:	2900      	cmp	r1, #0
   3a814:	f43f af40 	beq.w	3a698 <d_unqualified_name+0x1d4>
   3a818:	2307      	movs	r3, #7
   3a81a:	e9c5 0001 	strd	r0, r0, [r5, #4]
   3a81e:	f80c 3002 	strb.w	r3, [ip, r2]
   3a822:	732f      	strb	r7, [r5, #12]
   3a824:	6129      	str	r1, [r5, #16]
   3a826:	e6dd      	b.n	3a5e4 <d_unqualified_name+0x120>
   3a828:	1c53      	adds	r3, r2, #1
   3a82a:	60e3      	str	r3, [r4, #12]
   3a82c:	7893      	ldrb	r3, [r2, #2]
   3a82e:	f1a3 0131 	sub.w	r1, r3, #49	@ 0x31
   3a832:	2904      	cmp	r1, #4
   3a834:	f63f af30 	bhi.w	3a698 <d_unqualified_name+0x1d4>
   3a838:	3203      	adds	r2, #3
   3a83a:	3b30      	subs	r3, #48	@ 0x30
   3a83c:	60e2      	str	r2, [r4, #12]
   3a83e:	4620      	mov	r0, r4
   3a840:	b2df      	uxtb	r7, r3
   3a842:	f7ff f8c7 	bl	399d4 <d_type>
   3a846:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
   3a848:	e7d2      	b.n	3a7f0 <d_unqualified_name+0x32c>
   3a84a:	2000      	movs	r0, #0
   3a84c:	e6a8      	b.n	3a5a0 <d_unqualified_name+0xdc>
   3a84e:	4607      	mov	r7, r0
   3a850:	e794      	b.n	3a77c <d_unqualified_name+0x2b8>
   3a852:	2d00      	cmp	r5, #0
   3a854:	f43f aed2 	beq.w	3a5fc <d_unqualified_name+0x138>
   3a858:	462b      	mov	r3, r5
   3a85a:	2500      	movs	r5, #0
   3a85c:	e6c4      	b.n	3a5e8 <d_unqualified_name+0x124>
   3a85e:	bf00      	nop

0003a860 <d_expression_1>:
   3a860:	68c2      	ldr	r2, [r0, #12]
   3a862:	7813      	ldrb	r3, [r2, #0]
   3a864:	2b4c      	cmp	r3, #76	@ 0x4c
   3a866:	f000 80fa 	beq.w	3aa5e <d_expression_1+0x1fe>
   3a86a:	2b54      	cmp	r3, #84	@ 0x54
   3a86c:	f000 80f9 	beq.w	3aa62 <d_expression_1+0x202>
   3a870:	2b73      	cmp	r3, #115	@ 0x73
   3a872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3a876:	4604      	mov	r4, r0
   3a878:	d024      	beq.n	3a8c4 <d_expression_1+0x64>
   3a87a:	2b66      	cmp	r3, #102	@ 0x66
   3a87c:	d05a      	beq.n	3a934 <d_expression_1+0xd4>
   3a87e:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
   3a882:	2909      	cmp	r1, #9
   3a884:	d947      	bls.n	3a916 <d_expression_1+0xb6>
   3a886:	2b6f      	cmp	r3, #111	@ 0x6f
   3a888:	d040      	beq.n	3a90c <d_expression_1+0xac>
   3a88a:	2b69      	cmp	r3, #105	@ 0x69
   3a88c:	f040 823b 	bne.w	3ad06 <d_expression_1+0x4a6>
   3a890:	7853      	ldrb	r3, [r2, #1]
   3a892:	2b6c      	cmp	r3, #108	@ 0x6c
   3a894:	d11c      	bne.n	3a8d0 <d_expression_1+0x70>
   3a896:	3202      	adds	r2, #2
   3a898:	60c2      	str	r2, [r0, #12]
   3a89a:	2500      	movs	r5, #0
   3a89c:	7811      	ldrb	r1, [r2, #0]
   3a89e:	2900      	cmp	r1, #0
   3a8a0:	f000 808c 	beq.w	3a9bc <d_expression_1+0x15c>
   3a8a4:	7853      	ldrb	r3, [r2, #1]
   3a8a6:	2b00      	cmp	r3, #0
   3a8a8:	f000 8088 	beq.w	3a9bc <d_expression_1+0x15c>
   3a8ac:	2145      	movs	r1, #69	@ 0x45
   3a8ae:	4620      	mov	r0, r4
   3a8b0:	f000 fa4c 	bl	3ad4c <d_exprlist>
   3a8b4:	462a      	mov	r2, r5
   3a8b6:	4603      	mov	r3, r0
   3a8b8:	2131      	movs	r1, #49	@ 0x31
   3a8ba:	4620      	mov	r0, r4
   3a8bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3a8c0:	f7fe bbf8 	b.w	390b4 <d_make_comp>
   3a8c4:	7853      	ldrb	r3, [r2, #1]
   3a8c6:	2b72      	cmp	r3, #114	@ 0x72
   3a8c8:	d07a      	beq.n	3a9c0 <d_expression_1+0x160>
   3a8ca:	2b70      	cmp	r3, #112	@ 0x70
   3a8cc:	f000 8153 	beq.w	3ab76 <d_expression_1+0x316>
   3a8d0:	4620      	mov	r0, r4
   3a8d2:	f7ff fd77 	bl	3a3c4 <d_operator_name>
   3a8d6:	4605      	mov	r5, r0
   3a8d8:	2800      	cmp	r0, #0
   3a8da:	d06f      	beq.n	3a9bc <d_expression_1+0x15c>
   3a8dc:	7803      	ldrb	r3, [r0, #0]
   3a8de:	2b32      	cmp	r3, #50	@ 0x32
   3a8e0:	d058      	beq.n	3a994 <d_expression_1+0x134>
   3a8e2:	2b33      	cmp	r3, #51	@ 0x33
   3a8e4:	f000 80bf 	beq.w	3aa66 <d_expression_1+0x206>
   3a8e8:	2b34      	cmp	r3, #52	@ 0x34
   3a8ea:	d167      	bne.n	3a9bc <d_expression_1+0x15c>
   3a8ec:	68e3      	ldr	r3, [r4, #12]
   3a8ee:	781a      	ldrb	r2, [r3, #0]
   3a8f0:	2a5f      	cmp	r2, #95	@ 0x5f
   3a8f2:	f000 81ec 	beq.w	3acce <d_expression_1+0x46e>
   3a8f6:	4620      	mov	r0, r4
   3a8f8:	f7ff ffb2 	bl	3a860 <d_expression_1>
   3a8fc:	4603      	mov	r3, r0
   3a8fe:	462a      	mov	r2, r5
   3a900:	4620      	mov	r0, r4
   3a902:	2137      	movs	r1, #55	@ 0x37
   3a904:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3a908:	f7fe bbd4 	b.w	390b4 <d_make_comp>
   3a90c:	7853      	ldrb	r3, [r2, #1]
   3a90e:	2b6e      	cmp	r3, #110	@ 0x6e
   3a910:	d1de      	bne.n	3a8d0 <d_expression_1+0x70>
   3a912:	3202      	adds	r2, #2
   3a914:	60c2      	str	r2, [r0, #12]
   3a916:	2200      	movs	r2, #0
   3a918:	4611      	mov	r1, r2
   3a91a:	4620      	mov	r0, r4
   3a91c:	f7ff fdd2 	bl	3a4c4 <d_unqualified_name>
   3a920:	4605      	mov	r5, r0
   3a922:	2800      	cmp	r0, #0
   3a924:	d04a      	beq.n	3a9bc <d_expression_1+0x15c>
   3a926:	68e3      	ldr	r3, [r4, #12]
   3a928:	781a      	ldrb	r2, [r3, #0]
   3a92a:	2a49      	cmp	r2, #73	@ 0x49
   3a92c:	d064      	beq.n	3a9f8 <d_expression_1+0x198>
   3a92e:	4628      	mov	r0, r5
   3a930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3a934:	7853      	ldrb	r3, [r2, #1]
   3a936:	2b70      	cmp	r3, #112	@ 0x70
   3a938:	d1ca      	bne.n	3a8d0 <d_expression_1+0x70>
   3a93a:	1c93      	adds	r3, r2, #2
   3a93c:	60c3      	str	r3, [r0, #12]
   3a93e:	7893      	ldrb	r3, [r2, #2]
   3a940:	2b54      	cmp	r3, #84	@ 0x54
   3a942:	f000 810f 	beq.w	3ab64 <d_expression_1+0x304>
   3a946:	2b5f      	cmp	r3, #95	@ 0x5f
   3a948:	f000 809d 	beq.w	3aa86 <d_expression_1+0x226>
   3a94c:	2b6e      	cmp	r3, #110	@ 0x6e
   3a94e:	d035      	beq.n	3a9bc <d_expression_1+0x15c>
   3a950:	f7fe fc2c 	bl	391ac <d_number>
   3a954:	1c41      	adds	r1, r0, #1
   3a956:	d431      	bmi.n	3a9bc <d_expression_1+0x15c>
   3a958:	68e3      	ldr	r3, [r4, #12]
   3a95a:	781a      	ldrb	r2, [r3, #0]
   3a95c:	2a5f      	cmp	r2, #95	@ 0x5f
   3a95e:	d12d      	bne.n	3a9bc <d_expression_1+0x15c>
   3a960:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
   3a964:	3301      	adds	r3, #1
   3a966:	4291      	cmp	r1, r2
   3a968:	60e3      	str	r3, [r4, #12]
   3a96a:	d027      	beq.n	3a9bc <d_expression_1+0x15c>
   3a96c:	3002      	adds	r0, #2
   3a96e:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   3a972:	4293      	cmp	r3, r2
   3a974:	da22      	bge.n	3a9bc <d_expression_1+0x15c>
   3a976:	6922      	ldr	r2, [r4, #16]
   3a978:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   3a97c:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   3a980:	3301      	adds	r3, #1
   3a982:	2600      	movs	r6, #0
   3a984:	e9c5 6601 	strd	r6, r6, [r5, #4]
   3a988:	6163      	str	r3, [r4, #20]
   3a98a:	2306      	movs	r3, #6
   3a98c:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   3a990:	60e8      	str	r0, [r5, #12]
   3a992:	e7cc      	b.n	3a92e <d_expression_1+0xce>
   3a994:	68c1      	ldr	r1, [r0, #12]
   3a996:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   3a998:	688a      	ldr	r2, [r1, #8]
   3a99a:	680e      	ldr	r6, [r1, #0]
   3a99c:	3a02      	subs	r2, #2
   3a99e:	4413      	add	r3, r2
   3a9a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
   3a9a2:	7833      	ldrb	r3, [r6, #0]
   3a9a4:	2b73      	cmp	r3, #115	@ 0x73
   3a9a6:	d134      	bne.n	3aa12 <d_expression_1+0x1b2>
   3a9a8:	7872      	ldrb	r2, [r6, #1]
   3a9aa:	2a74      	cmp	r2, #116	@ 0x74
   3a9ac:	d131      	bne.n	3aa12 <d_expression_1+0x1b2>
   3a9ae:	78b2      	ldrb	r2, [r6, #2]
   3a9b0:	bb7a      	cbnz	r2, 3aa12 <d_expression_1+0x1b2>
   3a9b2:	4620      	mov	r0, r4
   3a9b4:	f7ff f80e 	bl	399d4 <d_type>
   3a9b8:	4603      	mov	r3, r0
   3a9ba:	e7a0      	b.n	3a8fe <d_expression_1+0x9e>
   3a9bc:	2500      	movs	r5, #0
   3a9be:	e7b6      	b.n	3a92e <d_expression_1+0xce>
   3a9c0:	1c93      	adds	r3, r2, #2
   3a9c2:	6b81      	ldr	r1, [r0, #56]	@ 0x38
   3a9c4:	60c3      	str	r3, [r0, #12]
   3a9c6:	7893      	ldrb	r3, [r2, #2]
   3a9c8:	b149      	cbz	r1, 3a9de <d_expression_1+0x17e>
   3a9ca:	2b55      	cmp	r3, #85	@ 0x55
   3a9cc:	f200 8151 	bhi.w	3ac72 <d_expression_1+0x412>
   3a9d0:	2b42      	cmp	r3, #66	@ 0x42
   3a9d2:	f200 8136 	bhi.w	3ac42 <d_expression_1+0x3e2>
   3a9d6:	3b30      	subs	r3, #48	@ 0x30
   3a9d8:	2b09      	cmp	r3, #9
   3a9da:	f240 813a 	bls.w	3ac52 <d_expression_1+0x3f2>
   3a9de:	4620      	mov	r0, r4
   3a9e0:	f7fe fff8 	bl	399d4 <d_type>
   3a9e4:	4601      	mov	r1, r0
   3a9e6:	2200      	movs	r2, #0
   3a9e8:	4620      	mov	r0, r4
   3a9ea:	f7ff fd6b 	bl	3a4c4 <d_unqualified_name>
   3a9ee:	68e3      	ldr	r3, [r4, #12]
   3a9f0:	781a      	ldrb	r2, [r3, #0]
   3a9f2:	2a49      	cmp	r2, #73	@ 0x49
   3a9f4:	4605      	mov	r5, r0
   3a9f6:	d19a      	bne.n	3a92e <d_expression_1+0xce>
   3a9f8:	3301      	adds	r3, #1
   3a9fa:	60e3      	str	r3, [r4, #12]
   3a9fc:	4620      	mov	r0, r4
   3a9fe:	f000 ff91 	bl	3b924 <d_template_args_1>
   3aa02:	462a      	mov	r2, r5
   3aa04:	4603      	mov	r3, r0
   3aa06:	2104      	movs	r1, #4
   3aa08:	4620      	mov	r0, r4
   3aa0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3aa0e:	f7fe bb51 	b.w	390b4 <d_make_comp>
   3aa12:	68cf      	ldr	r7, [r1, #12]
   3aa14:	2f03      	cmp	r7, #3
   3aa16:	d8d1      	bhi.n	3a9bc <d_expression_1+0x15c>
   3aa18:	e8df f007 	tbb	[pc, r7]
   3aa1c:	446e022d 	.word	0x446e022d
   3aa20:	7832      	ldrb	r2, [r6, #0]
   3aa22:	2a70      	cmp	r2, #112	@ 0x70
   3aa24:	d033      	beq.n	3aa8e <d_expression_1+0x22e>
   3aa26:	2a6d      	cmp	r2, #109	@ 0x6d
   3aa28:	d031      	beq.n	3aa8e <d_expression_1+0x22e>
   3aa2a:	2700      	movs	r7, #0
   3aa2c:	2b73      	cmp	r3, #115	@ 0x73
   3aa2e:	f040 809d 	bne.w	3ab6c <d_expression_1+0x30c>
   3aa32:	7873      	ldrb	r3, [r6, #1]
   3aa34:	2b50      	cmp	r3, #80	@ 0x50
   3aa36:	f040 8099 	bne.w	3ab6c <d_expression_1+0x30c>
   3aa3a:	78b3      	ldrb	r3, [r6, #2]
   3aa3c:	2b00      	cmp	r3, #0
   3aa3e:	f040 8095 	bne.w	3ab6c <d_expression_1+0x30c>
   3aa42:	4620      	mov	r0, r4
   3aa44:	f000 ff6e 	bl	3b924 <d_template_args_1>
   3aa48:	4603      	mov	r3, r0
   3aa4a:	2f00      	cmp	r7, #0
   3aa4c:	f43f af57 	beq.w	3a8fe <d_expression_1+0x9e>
   3aa50:	461a      	mov	r2, r3
   3aa52:	2139      	movs	r1, #57	@ 0x39
   3aa54:	4620      	mov	r0, r4
   3aa56:	f7fe fb2d 	bl	390b4 <d_make_comp>
   3aa5a:	4603      	mov	r3, r0
   3aa5c:	e74f      	b.n	3a8fe <d_expression_1+0x9e>
   3aa5e:	f000 bea7 	b.w	3b7b0 <d_expr_primary>
   3aa62:	f7fe bded 	b.w	39640 <d_template_param>
   3aa66:	68c3      	ldr	r3, [r0, #12]
   3aa68:	2b01      	cmp	r3, #1
   3aa6a:	f43f af44 	beq.w	3a8f6 <d_expression_1+0x96>
   3aa6e:	2b02      	cmp	r3, #2
   3aa70:	d0a4      	beq.n	3a9bc <d_expression_1+0x15c>
   3aa72:	2b00      	cmp	r3, #0
   3aa74:	d1a2      	bne.n	3a9bc <d_expression_1+0x15c>
   3aa76:	462a      	mov	r2, r5
   3aa78:	4620      	mov	r0, r4
   3aa7a:	2300      	movs	r3, #0
   3aa7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3aa80:	2136      	movs	r1, #54	@ 0x36
   3aa82:	f7fe bb17 	b.w	390b4 <d_make_comp>
   3aa86:	3203      	adds	r2, #3
   3aa88:	60c2      	str	r2, [r0, #12]
   3aa8a:	2001      	movs	r0, #1
   3aa8c:	e76f      	b.n	3a96e <d_expression_1+0x10e>
   3aa8e:	7871      	ldrb	r1, [r6, #1]
   3aa90:	4291      	cmp	r1, r2
   3aa92:	d1ca      	bne.n	3aa2a <d_expression_1+0x1ca>
   3aa94:	68e2      	ldr	r2, [r4, #12]
   3aa96:	7811      	ldrb	r1, [r2, #0]
   3aa98:	295f      	cmp	r1, #95	@ 0x5f
   3aa9a:	d1c7      	bne.n	3aa2c <d_expression_1+0x1cc>
   3aa9c:	3201      	adds	r2, #1
   3aa9e:	60e2      	str	r2, [r4, #12]
   3aaa0:	7833      	ldrb	r3, [r6, #0]
   3aaa2:	e7c2      	b.n	3aa2a <d_expression_1+0x1ca>
   3aaa4:	2b71      	cmp	r3, #113	@ 0x71
   3aaa6:	d172      	bne.n	3ab8e <d_expression_1+0x32e>
   3aaa8:	7872      	ldrb	r2, [r6, #1]
   3aaaa:	2a75      	cmp	r2, #117	@ 0x75
   3aaac:	d16f      	bne.n	3ab8e <d_expression_1+0x32e>
   3aaae:	78b2      	ldrb	r2, [r6, #2]
   3aab0:	2a00      	cmp	r2, #0
   3aab2:	d16c      	bne.n	3ab8e <d_expression_1+0x32e>
   3aab4:	4620      	mov	r0, r4
   3aab6:	f7ff fed3 	bl	3a860 <d_expression_1>
   3aaba:	4606      	mov	r6, r0
   3aabc:	4620      	mov	r0, r4
   3aabe:	f7ff fecf 	bl	3a860 <d_expression_1>
   3aac2:	4607      	mov	r7, r0
   3aac4:	4620      	mov	r0, r4
   3aac6:	f7ff fecb 	bl	3a860 <d_expression_1>
   3aaca:	4603      	mov	r3, r0
   3aacc:	2800      	cmp	r0, #0
   3aace:	f43f af75 	beq.w	3a9bc <d_expression_1+0x15c>
   3aad2:	463a      	mov	r2, r7
   3aad4:	213c      	movs	r1, #60	@ 0x3c
   3aad6:	4620      	mov	r0, r4
   3aad8:	f7fe faec 	bl	390b4 <d_make_comp>
   3aadc:	4632      	mov	r2, r6
   3aade:	4603      	mov	r3, r0
   3aae0:	213b      	movs	r1, #59	@ 0x3b
   3aae2:	4620      	mov	r0, r4
   3aae4:	f7fe fae6 	bl	390b4 <d_make_comp>
   3aae8:	462a      	mov	r2, r5
   3aaea:	4603      	mov	r3, r0
   3aaec:	213a      	movs	r1, #58	@ 0x3a
   3aaee:	4620      	mov	r0, r4
   3aaf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3aaf4:	f7fe bade 	b.w	390b4 <d_make_comp>
   3aaf8:	68eb      	ldr	r3, [r5, #12]
   3aafa:	681b      	ldr	r3, [r3, #0]
   3aafc:	785a      	ldrb	r2, [r3, #1]
   3aafe:	2a63      	cmp	r2, #99	@ 0x63
   3ab00:	f000 80bc 	beq.w	3ac7c <d_expression_1+0x41c>
   3ab04:	7833      	ldrb	r3, [r6, #0]
   3ab06:	2b66      	cmp	r3, #102	@ 0x66
   3ab08:	f000 80dc 	beq.w	3acc4 <d_expression_1+0x464>
   3ab0c:	2b64      	cmp	r3, #100	@ 0x64
   3ab0e:	f040 80d0 	bne.w	3acb2 <d_expression_1+0x452>
   3ab12:	7873      	ldrb	r3, [r6, #1]
   3ab14:	2b69      	cmp	r3, #105	@ 0x69
   3ab16:	f040 80cc 	bne.w	3acb2 <d_expression_1+0x452>
   3ab1a:	78b2      	ldrb	r2, [r6, #2]
   3ab1c:	2a00      	cmp	r2, #0
   3ab1e:	f040 80c8 	bne.w	3acb2 <d_expression_1+0x452>
   3ab22:	4611      	mov	r1, r2
   3ab24:	4620      	mov	r0, r4
   3ab26:	f7ff fccd 	bl	3a4c4 <d_unqualified_name>
   3ab2a:	4607      	mov	r7, r0
   3ab2c:	7833      	ldrb	r3, [r6, #0]
   3ab2e:	2b63      	cmp	r3, #99	@ 0x63
   3ab30:	d15f      	bne.n	3abf2 <d_expression_1+0x392>
   3ab32:	7872      	ldrb	r2, [r6, #1]
   3ab34:	2a6c      	cmp	r2, #108	@ 0x6c
   3ab36:	d15c      	bne.n	3abf2 <d_expression_1+0x392>
   3ab38:	78b2      	ldrb	r2, [r6, #2]
   3ab3a:	2a00      	cmp	r2, #0
   3ab3c:	d159      	bne.n	3abf2 <d_expression_1+0x392>
   3ab3e:	2145      	movs	r1, #69	@ 0x45
   3ab40:	4620      	mov	r0, r4
   3ab42:	f000 f903 	bl	3ad4c <d_exprlist>
   3ab46:	4606      	mov	r6, r0
   3ab48:	4633      	mov	r3, r6
   3ab4a:	463a      	mov	r2, r7
   3ab4c:	2139      	movs	r1, #57	@ 0x39
   3ab4e:	4620      	mov	r0, r4
   3ab50:	f7fe fab0 	bl	390b4 <d_make_comp>
   3ab54:	462a      	mov	r2, r5
   3ab56:	4603      	mov	r3, r0
   3ab58:	2138      	movs	r1, #56	@ 0x38
   3ab5a:	4620      	mov	r0, r4
   3ab5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3ab60:	f7fe baa8 	b.w	390b4 <d_make_comp>
   3ab64:	3203      	adds	r2, #3
   3ab66:	60c2      	str	r2, [r0, #12]
   3ab68:	2000      	movs	r0, #0
   3ab6a:	e700      	b.n	3a96e <d_expression_1+0x10e>
   3ab6c:	4620      	mov	r0, r4
   3ab6e:	f7ff fe77 	bl	3a860 <d_expression_1>
   3ab72:	4603      	mov	r3, r0
   3ab74:	e769      	b.n	3aa4a <d_expression_1+0x1ea>
   3ab76:	3202      	adds	r2, #2
   3ab78:	60c2      	str	r2, [r0, #12]
   3ab7a:	f7ff fe71 	bl	3a860 <d_expression_1>
   3ab7e:	2300      	movs	r3, #0
   3ab80:	4602      	mov	r2, r0
   3ab82:	214c      	movs	r1, #76	@ 0x4c
   3ab84:	4620      	mov	r0, r4
   3ab86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3ab8a:	f7fe ba93 	b.w	390b4 <d_make_comp>
   3ab8e:	2b64      	cmp	r3, #100	@ 0x64
   3ab90:	d105      	bne.n	3ab9e <d_expression_1+0x33e>
   3ab92:	7873      	ldrb	r3, [r6, #1]
   3ab94:	2b58      	cmp	r3, #88	@ 0x58
   3ab96:	d102      	bne.n	3ab9e <d_expression_1+0x33e>
   3ab98:	78b3      	ldrb	r3, [r6, #2]
   3ab9a:	2b00      	cmp	r3, #0
   3ab9c:	d08a      	beq.n	3aab4 <d_expression_1+0x254>
   3ab9e:	7833      	ldrb	r3, [r6, #0]
   3aba0:	2b66      	cmp	r3, #102	@ 0x66
   3aba2:	f000 809c 	beq.w	3acde <d_expression_1+0x47e>
   3aba6:	2b6e      	cmp	r3, #110	@ 0x6e
   3aba8:	f47f af08 	bne.w	3a9bc <d_expression_1+0x15c>
   3abac:	7873      	ldrb	r3, [r6, #1]
   3abae:	2b77      	cmp	r3, #119	@ 0x77
   3abb0:	d002      	beq.n	3abb8 <d_expression_1+0x358>
   3abb2:	2b61      	cmp	r3, #97	@ 0x61
   3abb4:	f47f af02 	bne.w	3a9bc <d_expression_1+0x15c>
   3abb8:	215f      	movs	r1, #95	@ 0x5f
   3abba:	4620      	mov	r0, r4
   3abbc:	f000 f8c6 	bl	3ad4c <d_exprlist>
   3abc0:	4606      	mov	r6, r0
   3abc2:	4620      	mov	r0, r4
   3abc4:	f7fe ff06 	bl	399d4 <d_type>
   3abc8:	68e3      	ldr	r3, [r4, #12]
   3abca:	781a      	ldrb	r2, [r3, #0]
   3abcc:	2a45      	cmp	r2, #69	@ 0x45
   3abce:	4607      	mov	r7, r0
   3abd0:	f000 8095 	beq.w	3acfe <d_expression_1+0x49e>
   3abd4:	2a70      	cmp	r2, #112	@ 0x70
   3abd6:	f000 8086 	beq.w	3ace6 <d_expression_1+0x486>
   3abda:	2a69      	cmp	r2, #105	@ 0x69
   3abdc:	f47f aeee 	bne.w	3a9bc <d_expression_1+0x15c>
   3abe0:	785b      	ldrb	r3, [r3, #1]
   3abe2:	2b6c      	cmp	r3, #108	@ 0x6c
   3abe4:	f47f aeea 	bne.w	3a9bc <d_expression_1+0x15c>
   3abe8:	4620      	mov	r0, r4
   3abea:	f7ff fe39 	bl	3a860 <d_expression_1>
   3abee:	4603      	mov	r3, r0
   3abf0:	e76f      	b.n	3aad2 <d_expression_1+0x272>
   3abf2:	2b64      	cmp	r3, #100	@ 0x64
   3abf4:	d150      	bne.n	3ac98 <d_expression_1+0x438>
   3abf6:	7872      	ldrb	r2, [r6, #1]
   3abf8:	2a74      	cmp	r2, #116	@ 0x74
   3abfa:	d14d      	bne.n	3ac98 <d_expression_1+0x438>
   3abfc:	78b2      	ldrb	r2, [r6, #2]
   3abfe:	2a00      	cmp	r2, #0
   3ac00:	d14a      	bne.n	3ac98 <d_expression_1+0x438>
   3ac02:	68e3      	ldr	r3, [r4, #12]
   3ac04:	781a      	ldrb	r2, [r3, #0]
   3ac06:	2a67      	cmp	r2, #103	@ 0x67
   3ac08:	d058      	beq.n	3acbc <d_expression_1+0x45c>
   3ac0a:	2a73      	cmp	r2, #115	@ 0x73
   3ac0c:	d102      	bne.n	3ac14 <d_expression_1+0x3b4>
   3ac0e:	785b      	ldrb	r3, [r3, #1]
   3ac10:	2b72      	cmp	r3, #114	@ 0x72
   3ac12:	d049      	beq.n	3aca8 <d_expression_1+0x448>
   3ac14:	2200      	movs	r2, #0
   3ac16:	4611      	mov	r1, r2
   3ac18:	4620      	mov	r0, r4
   3ac1a:	f7ff fc53 	bl	3a4c4 <d_unqualified_name>
   3ac1e:	68e3      	ldr	r3, [r4, #12]
   3ac20:	781a      	ldrb	r2, [r3, #0]
   3ac22:	2a49      	cmp	r2, #73	@ 0x49
   3ac24:	4606      	mov	r6, r0
   3ac26:	d18f      	bne.n	3ab48 <d_expression_1+0x2e8>
   3ac28:	3301      	adds	r3, #1
   3ac2a:	60e3      	str	r3, [r4, #12]
   3ac2c:	4620      	mov	r0, r4
   3ac2e:	f000 fe79 	bl	3b924 <d_template_args_1>
   3ac32:	4632      	mov	r2, r6
   3ac34:	4603      	mov	r3, r0
   3ac36:	2104      	movs	r1, #4
   3ac38:	4620      	mov	r0, r4
   3ac3a:	f7fe fa3b 	bl	390b4 <d_make_comp>
   3ac3e:	4606      	mov	r6, r0
   3ac40:	e782      	b.n	3ab48 <d_expression_1+0x2e8>
   3ac42:	4a41      	ldr	r2, [pc, #260]	@ (3ad48 <d_expression_1+0x4e8>)
   3ac44:	3b43      	subs	r3, #67	@ 0x43
   3ac46:	b2db      	uxtb	r3, r3
   3ac48:	fa22 f303 	lsr.w	r3, r2, r3
   3ac4c:	07db      	lsls	r3, r3, #31
   3ac4e:	f57f aec6 	bpl.w	3a9de <d_expression_1+0x17e>
   3ac52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
   3ac56:	63a3      	str	r3, [r4, #56]	@ 0x38
   3ac58:	2100      	movs	r1, #0
   3ac5a:	4620      	mov	r0, r4
   3ac5c:	f000 fe94 	bl	3b988 <d_prefix>
   3ac60:	68e3      	ldr	r3, [r4, #12]
   3ac62:	781a      	ldrb	r2, [r3, #0]
   3ac64:	2a45      	cmp	r2, #69	@ 0x45
   3ac66:	4601      	mov	r1, r0
   3ac68:	f47f aebd 	bne.w	3a9e6 <d_expression_1+0x186>
   3ac6c:	3301      	adds	r3, #1
   3ac6e:	60e3      	str	r3, [r4, #12]
   3ac70:	e6b9      	b.n	3a9e6 <d_expression_1+0x186>
   3ac72:	3b61      	subs	r3, #97	@ 0x61
   3ac74:	2b19      	cmp	r3, #25
   3ac76:	f63f aeb2 	bhi.w	3a9de <d_expression_1+0x17e>
   3ac7a:	e7ea      	b.n	3ac52 <d_expression_1+0x3f2>
   3ac7c:	781b      	ldrb	r3, [r3, #0]
   3ac7e:	f1a3 0272 	sub.w	r2, r3, #114	@ 0x72
   3ac82:	2a01      	cmp	r2, #1
   3ac84:	d903      	bls.n	3ac8e <d_expression_1+0x42e>
   3ac86:	3b63      	subs	r3, #99	@ 0x63
   3ac88:	2b01      	cmp	r3, #1
   3ac8a:	f63f af3b 	bhi.w	3ab04 <d_expression_1+0x2a4>
   3ac8e:	4620      	mov	r0, r4
   3ac90:	f7fe fea0 	bl	399d4 <d_type>
   3ac94:	4607      	mov	r7, r0
   3ac96:	e749      	b.n	3ab2c <d_expression_1+0x2cc>
   3ac98:	2b70      	cmp	r3, #112	@ 0x70
   3ac9a:	d105      	bne.n	3aca8 <d_expression_1+0x448>
   3ac9c:	7873      	ldrb	r3, [r6, #1]
   3ac9e:	2b74      	cmp	r3, #116	@ 0x74
   3aca0:	d102      	bne.n	3aca8 <d_expression_1+0x448>
   3aca2:	78b3      	ldrb	r3, [r6, #2]
   3aca4:	2b00      	cmp	r3, #0
   3aca6:	d0ac      	beq.n	3ac02 <d_expression_1+0x3a2>
   3aca8:	4620      	mov	r0, r4
   3acaa:	f7ff fdd9 	bl	3a860 <d_expression_1>
   3acae:	4606      	mov	r6, r0
   3acb0:	e74a      	b.n	3ab48 <d_expression_1+0x2e8>
   3acb2:	4620      	mov	r0, r4
   3acb4:	f7ff fdd4 	bl	3a860 <d_expression_1>
   3acb8:	4607      	mov	r7, r0
   3acba:	e737      	b.n	3ab2c <d_expression_1+0x2cc>
   3acbc:	785b      	ldrb	r3, [r3, #1]
   3acbe:	2b73      	cmp	r3, #115	@ 0x73
   3acc0:	d1a8      	bne.n	3ac14 <d_expression_1+0x3b4>
   3acc2:	e7f1      	b.n	3aca8 <d_expression_1+0x448>
   3acc4:	4620      	mov	r0, r4
   3acc6:	f7ff fb7d 	bl	3a3c4 <d_operator_name>
   3acca:	4607      	mov	r7, r0
   3accc:	e72e      	b.n	3ab2c <d_expression_1+0x2cc>
   3acce:	3301      	adds	r3, #1
   3acd0:	60e3      	str	r3, [r4, #12]
   3acd2:	2145      	movs	r1, #69	@ 0x45
   3acd4:	4620      	mov	r0, r4
   3acd6:	f000 f839 	bl	3ad4c <d_exprlist>
   3acda:	4603      	mov	r3, r0
   3acdc:	e60f      	b.n	3a8fe <d_expression_1+0x9e>
   3acde:	4620      	mov	r0, r4
   3ace0:	f7ff fb70 	bl	3a3c4 <d_operator_name>
   3ace4:	e6e9      	b.n	3aaba <d_expression_1+0x25a>
   3ace6:	785a      	ldrb	r2, [r3, #1]
   3ace8:	2a69      	cmp	r2, #105	@ 0x69
   3acea:	f47f ae67 	bne.w	3a9bc <d_expression_1+0x15c>
   3acee:	3302      	adds	r3, #2
   3acf0:	60e3      	str	r3, [r4, #12]
   3acf2:	2145      	movs	r1, #69	@ 0x45
   3acf4:	4620      	mov	r0, r4
   3acf6:	f000 f829 	bl	3ad4c <d_exprlist>
   3acfa:	4603      	mov	r3, r0
   3acfc:	e6e9      	b.n	3aad2 <d_expression_1+0x272>
   3acfe:	3301      	adds	r3, #1
   3ad00:	60e3      	str	r3, [r4, #12]
   3ad02:	2300      	movs	r3, #0
   3ad04:	e6e5      	b.n	3aad2 <d_expression_1+0x272>
   3ad06:	2b74      	cmp	r3, #116	@ 0x74
   3ad08:	d012      	beq.n	3ad30 <d_expression_1+0x4d0>
   3ad0a:	2b75      	cmp	r3, #117	@ 0x75
   3ad0c:	f47f ade0 	bne.w	3a8d0 <d_expression_1+0x70>
   3ad10:	3201      	adds	r2, #1
   3ad12:	60c2      	str	r2, [r0, #12]
   3ad14:	f7fe fcfe 	bl	39714 <d_source_name>
   3ad18:	4605      	mov	r5, r0
   3ad1a:	4620      	mov	r0, r4
   3ad1c:	f000 fe02 	bl	3b924 <d_template_args_1>
   3ad20:	462a      	mov	r2, r5
   3ad22:	4603      	mov	r3, r0
   3ad24:	213f      	movs	r1, #63	@ 0x3f
   3ad26:	4620      	mov	r0, r4
   3ad28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3ad2c:	f7fe b9c2 	b.w	390b4 <d_make_comp>
   3ad30:	7853      	ldrb	r3, [r2, #1]
   3ad32:	2b6c      	cmp	r3, #108	@ 0x6c
   3ad34:	f47f adcc 	bne.w	3a8d0 <d_expression_1+0x70>
   3ad38:	3202      	adds	r2, #2
   3ad3a:	60c2      	str	r2, [r0, #12]
   3ad3c:	f7fe fe4a 	bl	399d4 <d_type>
   3ad40:	68e2      	ldr	r2, [r4, #12]
   3ad42:	4605      	mov	r5, r0
   3ad44:	e5aa      	b.n	3a89c <d_expression_1+0x3c>
   3ad46:	bf00      	nop
   3ad48:	00040201 	.word	0x00040201

0003ad4c <d_exprlist>:
   3ad4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3ad50:	68c2      	ldr	r2, [r0, #12]
   3ad52:	460e      	mov	r6, r1
   3ad54:	7811      	ldrb	r1, [r2, #0]
   3ad56:	b082      	sub	sp, #8
   3ad58:	2300      	movs	r3, #0
   3ad5a:	42b1      	cmp	r1, r6
   3ad5c:	4604      	mov	r4, r0
   3ad5e:	9301      	str	r3, [sp, #4]
   3ad60:	d024      	beq.n	3adac <d_exprlist+0x60>
   3ad62:	ad01      	add	r5, sp, #4
   3ad64:	2701      	movs	r7, #1
   3ad66:	e009      	b.n	3ad7c <d_exprlist+0x30>
   3ad68:	f7fe f9a4 	bl	390b4 <d_make_comp>
   3ad6c:	6028      	str	r0, [r5, #0]
   3ad6e:	f100 0510 	add.w	r5, r0, #16
   3ad72:	b188      	cbz	r0, 3ad98 <d_exprlist+0x4c>
   3ad74:	68e3      	ldr	r3, [r4, #12]
   3ad76:	781a      	ldrb	r2, [r3, #0]
   3ad78:	42b2      	cmp	r2, r6
   3ad7a:	d011      	beq.n	3ada0 <d_exprlist+0x54>
   3ad7c:	f8d4 8030 	ldr.w	r8, [r4, #48]	@ 0x30
   3ad80:	6327      	str	r7, [r4, #48]	@ 0x30
   3ad82:	4620      	mov	r0, r4
   3ad84:	f7ff fd6c 	bl	3a860 <d_expression_1>
   3ad88:	4602      	mov	r2, r0
   3ad8a:	2300      	movs	r3, #0
   3ad8c:	212e      	movs	r1, #46	@ 0x2e
   3ad8e:	4620      	mov	r0, r4
   3ad90:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
   3ad94:	2a00      	cmp	r2, #0
   3ad96:	d1e7      	bne.n	3ad68 <d_exprlist+0x1c>
   3ad98:	2000      	movs	r0, #0
   3ad9a:	b002      	add	sp, #8
   3ad9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3ada0:	9801      	ldr	r0, [sp, #4]
   3ada2:	3301      	adds	r3, #1
   3ada4:	60e3      	str	r3, [r4, #12]
   3ada6:	b002      	add	sp, #8
   3ada8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3adac:	3201      	adds	r2, #1
   3adae:	60c2      	str	r2, [r0, #12]
   3adb0:	212e      	movs	r1, #46	@ 0x2e
   3adb2:	461a      	mov	r2, r3
   3adb4:	b002      	add	sp, #8
   3adb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3adba:	f7fe b97b 	b.w	390b4 <d_make_comp>
   3adbe:	bf00      	nop

0003adc0 <d_cv_qualifiers>:
   3adc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3adc4:	4691      	mov	r9, r2
   3adc6:	f009 0301 	and.w	r3, r9, #1
   3adca:	68c2      	ldr	r2, [r0, #12]
   3adcc:	2b00      	cmp	r3, #0
   3adce:	460f      	mov	r7, r1
   3add0:	b083      	sub	sp, #12
   3add2:	7811      	ldrb	r1, [r2, #0]
   3add4:	4604      	mov	r4, r0
   3add6:	bf15      	itete	ne
   3add8:	f04f 0a1e 	movne.w	sl, #30
   3addc:	f04f 0a1b 	moveq.w	sl, #27
   3ade0:	f04f 081d 	movne.w	r8, #29
   3ade4:	f04f 081a 	moveq.w	r8, #26
   3ade8:	bf14      	ite	ne
   3adea:	261c      	movne	r6, #28
   3adec:	2619      	moveq	r6, #25
   3adee:	463d      	mov	r5, r7
   3adf0:	f04f 0b01 	mov.w	fp, #1
   3adf4:	e01b      	b.n	3ae2e <d_cv_qualifiers+0x6e>
   3adf6:	2956      	cmp	r1, #86	@ 0x56
   3adf8:	d032      	beq.n	3ae60 <d_cv_qualifiers+0xa0>
   3adfa:	294b      	cmp	r1, #75	@ 0x4b
   3adfc:	d036      	beq.n	3ae6c <d_cv_qualifiers+0xac>
   3adfe:	7853      	ldrb	r3, [r2, #1]
   3ae00:	b34b      	cbz	r3, 3ae56 <d_cv_qualifiers+0x96>
   3ae02:	1c93      	adds	r3, r2, #2
   3ae04:	60e3      	str	r3, [r4, #12]
   3ae06:	7853      	ldrb	r3, [r2, #1]
   3ae08:	2b78      	cmp	r3, #120	@ 0x78
   3ae0a:	d035      	beq.n	3ae78 <d_cv_qualifiers+0xb8>
   3ae0c:	2b6f      	cmp	r3, #111	@ 0x6f
   3ae0e:	d152      	bne.n	3aeb6 <d_cv_qualifiers+0xf6>
   3ae10:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   3ae12:	3309      	adds	r3, #9
   3ae14:	62e3      	str	r3, [r4, #44]	@ 0x2c
   3ae16:	2150      	movs	r1, #80	@ 0x50
   3ae18:	2300      	movs	r3, #0
   3ae1a:	2200      	movs	r2, #0
   3ae1c:	4620      	mov	r0, r4
   3ae1e:	f7fe f949 	bl	390b4 <d_make_comp>
   3ae22:	6028      	str	r0, [r5, #0]
   3ae24:	b1b8      	cbz	r0, 3ae56 <d_cv_qualifiers+0x96>
   3ae26:	68e2      	ldr	r2, [r4, #12]
   3ae28:	7811      	ldrb	r1, [r2, #0]
   3ae2a:	f100 050c 	add.w	r5, r0, #12
   3ae2e:	4610      	mov	r0, r2
   3ae30:	f7fe fb2e 	bl	39490 <next_is_type_qual.isra.0>
   3ae34:	b330      	cbz	r0, 3ae84 <d_cv_qualifiers+0xc4>
   3ae36:	1c53      	adds	r3, r2, #1
   3ae38:	2972      	cmp	r1, #114	@ 0x72
   3ae3a:	60e3      	str	r3, [r4, #12]
   3ae3c:	d1db      	bne.n	3adf6 <d_cv_qualifiers+0x36>
   3ae3e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   3ae40:	3309      	adds	r3, #9
   3ae42:	62e3      	str	r3, [r4, #44]	@ 0x2c
   3ae44:	4631      	mov	r1, r6
   3ae46:	2300      	movs	r3, #0
   3ae48:	2200      	movs	r2, #0
   3ae4a:	4620      	mov	r0, r4
   3ae4c:	f7fe f932 	bl	390b4 <d_make_comp>
   3ae50:	6028      	str	r0, [r5, #0]
   3ae52:	2800      	cmp	r0, #0
   3ae54:	d1e7      	bne.n	3ae26 <d_cv_qualifiers+0x66>
   3ae56:	2500      	movs	r5, #0
   3ae58:	4628      	mov	r0, r5
   3ae5a:	b003      	add	sp, #12
   3ae5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ae60:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   3ae62:	3309      	adds	r3, #9
   3ae64:	62e3      	str	r3, [r4, #44]	@ 0x2c
   3ae66:	4641      	mov	r1, r8
   3ae68:	2300      	movs	r3, #0
   3ae6a:	e7d6      	b.n	3ae1a <d_cv_qualifiers+0x5a>
   3ae6c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   3ae6e:	3306      	adds	r3, #6
   3ae70:	62e3      	str	r3, [r4, #44]	@ 0x2c
   3ae72:	4651      	mov	r1, sl
   3ae74:	2300      	movs	r3, #0
   3ae76:	e7d0      	b.n	3ae1a <d_cv_qualifiers+0x5a>
   3ae78:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   3ae7a:	3311      	adds	r3, #17
   3ae7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
   3ae7e:	214e      	movs	r1, #78	@ 0x4e
   3ae80:	2300      	movs	r3, #0
   3ae82:	e7ca      	b.n	3ae1a <d_cv_qualifiers+0x5a>
   3ae84:	f1b9 0f00 	cmp.w	r9, #0
   3ae88:	d1e6      	bne.n	3ae58 <d_cv_qualifiers+0x98>
   3ae8a:	2946      	cmp	r1, #70	@ 0x46
   3ae8c:	d1e4      	bne.n	3ae58 <d_cv_qualifiers+0x98>
   3ae8e:	42bd      	cmp	r5, r7
   3ae90:	d0e2      	beq.n	3ae58 <d_cv_qualifiers+0x98>
   3ae92:	201d      	movs	r0, #29
   3ae94:	211e      	movs	r1, #30
   3ae96:	221c      	movs	r2, #28
   3ae98:	e007      	b.n	3aeaa <d_cv_qualifiers+0xea>
   3ae9a:	2b1b      	cmp	r3, #27
   3ae9c:	d037      	beq.n	3af0e <d_cv_qualifiers+0x14e>
   3ae9e:	2b19      	cmp	r3, #25
   3aea0:	d100      	bne.n	3aea4 <d_cv_qualifiers+0xe4>
   3aea2:	703a      	strb	r2, [r7, #0]
   3aea4:	370c      	adds	r7, #12
   3aea6:	42bd      	cmp	r5, r7
   3aea8:	d0d6      	beq.n	3ae58 <d_cv_qualifiers+0x98>
   3aeaa:	683f      	ldr	r7, [r7, #0]
   3aeac:	783b      	ldrb	r3, [r7, #0]
   3aeae:	2b1a      	cmp	r3, #26
   3aeb0:	d1f3      	bne.n	3ae9a <d_cv_qualifiers+0xda>
   3aeb2:	7038      	strb	r0, [r7, #0]
   3aeb4:	e7f6      	b.n	3aea4 <d_cv_qualifiers+0xe4>
   3aeb6:	2b4f      	cmp	r3, #79	@ 0x4f
   3aeb8:	d116      	bne.n	3aee8 <d_cv_qualifiers+0x128>
   3aeba:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   3aebc:	3309      	adds	r3, #9
   3aebe:	62e3      	str	r3, [r4, #44]	@ 0x2c
   3aec0:	4620      	mov	r0, r4
   3aec2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
   3aec4:	f8c4 b030 	str.w	fp, [r4, #48]	@ 0x30
   3aec8:	9301      	str	r3, [sp, #4]
   3aeca:	f7ff fcc9 	bl	3a860 <d_expression_1>
   3aece:	9b01      	ldr	r3, [sp, #4]
   3aed0:	6323      	str	r3, [r4, #48]	@ 0x30
   3aed2:	4603      	mov	r3, r0
   3aed4:	2800      	cmp	r0, #0
   3aed6:	d0be      	beq.n	3ae56 <d_cv_qualifiers+0x96>
   3aed8:	68e2      	ldr	r2, [r4, #12]
   3aeda:	7811      	ldrb	r1, [r2, #0]
   3aedc:	2945      	cmp	r1, #69	@ 0x45
   3aede:	d1ba      	bne.n	3ae56 <d_cv_qualifiers+0x96>
   3aee0:	3201      	adds	r2, #1
   3aee2:	60e2      	str	r2, [r4, #12]
   3aee4:	2150      	movs	r1, #80	@ 0x50
   3aee6:	e798      	b.n	3ae1a <d_cv_qualifiers+0x5a>
   3aee8:	2b77      	cmp	r3, #119	@ 0x77
   3aeea:	d1b4      	bne.n	3ae56 <d_cv_qualifiers+0x96>
   3aeec:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   3aeee:	3306      	adds	r3, #6
   3aef0:	62e3      	str	r3, [r4, #44]	@ 0x2c
   3aef2:	4620      	mov	r0, r4
   3aef4:	f7ff f950 	bl	3a198 <d_parmlist>
   3aef8:	4603      	mov	r3, r0
   3aefa:	2800      	cmp	r0, #0
   3aefc:	d0ab      	beq.n	3ae56 <d_cv_qualifiers+0x96>
   3aefe:	68e2      	ldr	r2, [r4, #12]
   3af00:	7811      	ldrb	r1, [r2, #0]
   3af02:	2945      	cmp	r1, #69	@ 0x45
   3af04:	d1a7      	bne.n	3ae56 <d_cv_qualifiers+0x96>
   3af06:	3201      	adds	r2, #1
   3af08:	60e2      	str	r2, [r4, #12]
   3af0a:	2151      	movs	r1, #81	@ 0x51
   3af0c:	e785      	b.n	3ae1a <d_cv_qualifiers+0x5a>
   3af0e:	7039      	strb	r1, [r7, #0]
   3af10:	e7c8      	b.n	3aea4 <d_cv_qualifiers+0xe4>
   3af12:	bf00      	nop

0003af14 <d_name>:
   3af14:	b5f0      	push	{r4, r5, r6, r7, lr}
   3af16:	68c2      	ldr	r2, [r0, #12]
   3af18:	7813      	ldrb	r3, [r2, #0]
   3af1a:	3b4e      	subs	r3, #78	@ 0x4e
   3af1c:	b085      	sub	sp, #20
   3af1e:	4604      	mov	r4, r0
   3af20:	460e      	mov	r6, r1
   3af22:	2b0c      	cmp	r3, #12
   3af24:	d808      	bhi.n	3af38 <d_name+0x24>
   3af26:	e8df f003 	tbb	[pc, r3]
   3af2a:	077c      	.short	0x077c
   3af2c:	2d070707 	.word	0x2d070707
   3af30:	07072307 	.word	0x07072307
   3af34:	0707      	.short	0x0707
   3af36:	4a          	.byte	0x4a
   3af37:	00          	.byte	0x00
   3af38:	2500      	movs	r5, #0
   3af3a:	462f      	mov	r7, r5
   3af3c:	462a      	mov	r2, r5
   3af3e:	4639      	mov	r1, r7
   3af40:	4620      	mov	r0, r4
   3af42:	f7ff fabf 	bl	3a4c4 <d_unqualified_name>
   3af46:	68e3      	ldr	r3, [r4, #12]
   3af48:	781a      	ldrb	r2, [r3, #0]
   3af4a:	2a49      	cmp	r2, #73	@ 0x49
   3af4c:	4605      	mov	r5, r0
   3af4e:	f000 808a 	beq.w	3b066 <d_name+0x152>
   3af52:	b156      	cbz	r6, 3af6a <d_name+0x56>
   3af54:	2d00      	cmp	r5, #0
   3af56:	d062      	beq.n	3b01e <d_name+0x10a>
   3af58:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
   3af5c:	4293      	cmp	r3, r2
   3af5e:	da5e      	bge.n	3b01e <d_name+0x10a>
   3af60:	69e1      	ldr	r1, [r4, #28]
   3af62:	1c5a      	adds	r2, r3, #1
   3af64:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
   3af68:	6222      	str	r2, [r4, #32]
   3af6a:	4628      	mov	r0, r5
   3af6c:	b005      	add	sp, #20
   3af6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3af70:	2200      	movs	r2, #0
   3af72:	4611      	mov	r1, r2
   3af74:	f7ff faa6 	bl	3a4c4 <d_unqualified_name>
   3af78:	4605      	mov	r5, r0
   3af7a:	2e00      	cmp	r6, #0
   3af7c:	d1ea      	bne.n	3af54 <d_name+0x40>
   3af7e:	4628      	mov	r0, r5
   3af80:	b005      	add	sp, #20
   3af82:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3af84:	7853      	ldrb	r3, [r2, #1]
   3af86:	2b74      	cmp	r3, #116	@ 0x74
   3af88:	f000 808d 	beq.w	3b0a6 <d_name+0x192>
   3af8c:	2700      	movs	r7, #0
   3af8e:	2100      	movs	r1, #0
   3af90:	4620      	mov	r0, r4
   3af92:	f7fe fc2d 	bl	397f0 <d_substitution>
   3af96:	4605      	mov	r5, r0
   3af98:	2800      	cmp	r0, #0
   3af9a:	d040      	beq.n	3b01e <d_name+0x10a>
   3af9c:	7803      	ldrb	r3, [r0, #0]
   3af9e:	3b53      	subs	r3, #83	@ 0x53
   3afa0:	2b01      	cmp	r3, #1
   3afa2:	d9cb      	bls.n	3af3c <d_name+0x28>
   3afa4:	2f00      	cmp	r7, #0
   3afa6:	d13a      	bne.n	3b01e <d_name+0x10a>
   3afa8:	68e3      	ldr	r3, [r4, #12]
   3afaa:	781a      	ldrb	r2, [r3, #0]
   3afac:	2a49      	cmp	r2, #73	@ 0x49
   3afae:	d1dc      	bne.n	3af6a <d_name+0x56>
   3afb0:	3301      	adds	r3, #1
   3afb2:	60e3      	str	r3, [r4, #12]
   3afb4:	4620      	mov	r0, r4
   3afb6:	f000 fcb5 	bl	3b924 <d_template_args_1>
   3afba:	4603      	mov	r3, r0
   3afbc:	e064      	b.n	3b088 <d_name+0x174>
   3afbe:	1c53      	adds	r3, r2, #1
   3afc0:	60c3      	str	r3, [r0, #12]
   3afc2:	7853      	ldrb	r3, [r2, #1]
   3afc4:	2b47      	cmp	r3, #71	@ 0x47
   3afc6:	d001      	beq.n	3afcc <d_name+0xb8>
   3afc8:	2b54      	cmp	r3, #84	@ 0x54
   3afca:	d167      	bne.n	3b09c <d_name+0x188>
   3afcc:	4620      	mov	r0, r4
   3afce:	f000 f99f 	bl	3b310 <d_special_name>
   3afd2:	4605      	mov	r5, r0
   3afd4:	b31d      	cbz	r5, 3b01e <d_name+0x10a>
   3afd6:	68e3      	ldr	r3, [r4, #12]
   3afd8:	781a      	ldrb	r2, [r3, #0]
   3afda:	2a45      	cmp	r2, #69	@ 0x45
   3afdc:	d11f      	bne.n	3b01e <d_name+0x10a>
   3afde:	1c5a      	adds	r2, r3, #1
   3afe0:	60e2      	str	r2, [r4, #12]
   3afe2:	785a      	ldrb	r2, [r3, #1]
   3afe4:	2a73      	cmp	r2, #115	@ 0x73
   3afe6:	f000 80ed 	beq.w	3b1c4 <d_name+0x2b0>
   3afea:	2a64      	cmp	r2, #100	@ 0x64
   3afec:	f000 8095 	beq.w	3b11a <d_name+0x206>
   3aff0:	2100      	movs	r1, #0
   3aff2:	4620      	mov	r0, r4
   3aff4:	f7ff ff8e 	bl	3af14 <d_name>
   3aff8:	4603      	mov	r3, r0
   3affa:	2800      	cmp	r0, #0
   3affc:	f000 80e0 	beq.w	3b1c0 <d_name+0x2ac>
   3b000:	7802      	ldrb	r2, [r0, #0]
   3b002:	2a47      	cmp	r2, #71	@ 0x47
   3b004:	f000 80c5 	beq.w	3b192 <d_name+0x27e>
   3b008:	2a49      	cmp	r2, #73	@ 0x49
   3b00a:	f000 80c2 	beq.w	3b192 <d_name+0x27e>
   3b00e:	9001      	str	r0, [sp, #4]
   3b010:	4620      	mov	r0, r4
   3b012:	f7fe f929 	bl	39268 <d_discriminator>
   3b016:	9b01      	ldr	r3, [sp, #4]
   3b018:	2800      	cmp	r0, #0
   3b01a:	f040 80ba 	bne.w	3b192 <d_name+0x27e>
   3b01e:	2500      	movs	r5, #0
   3b020:	e7a3      	b.n	3af6a <d_name+0x56>
   3b022:	3201      	adds	r2, #1
   3b024:	60c2      	str	r2, [r0, #12]
   3b026:	a903      	add	r1, sp, #12
   3b028:	2201      	movs	r2, #1
   3b02a:	f7ff fec9 	bl	3adc0 <d_cv_qualifiers>
   3b02e:	4605      	mov	r5, r0
   3b030:	2800      	cmp	r0, #0
   3b032:	d0f4      	beq.n	3b01e <d_name+0x10a>
   3b034:	68e3      	ldr	r3, [r4, #12]
   3b036:	781a      	ldrb	r2, [r3, #0]
   3b038:	2a52      	cmp	r2, #82	@ 0x52
   3b03a:	f000 80bd 	beq.w	3b1b8 <d_name+0x2a4>
   3b03e:	2a4f      	cmp	r2, #79	@ 0x4f
   3b040:	d052      	beq.n	3b0e8 <d_name+0x1d4>
   3b042:	2101      	movs	r1, #1
   3b044:	4620      	mov	r0, r4
   3b046:	f000 fc9f 	bl	3b988 <d_prefix>
   3b04a:	6028      	str	r0, [r5, #0]
   3b04c:	2800      	cmp	r0, #0
   3b04e:	d0e6      	beq.n	3b01e <d_name+0x10a>
   3b050:	68e3      	ldr	r3, [r4, #12]
   3b052:	781a      	ldrb	r2, [r3, #0]
   3b054:	2a45      	cmp	r2, #69	@ 0x45
   3b056:	d1e2      	bne.n	3b01e <d_name+0x10a>
   3b058:	3301      	adds	r3, #1
   3b05a:	9d03      	ldr	r5, [sp, #12]
   3b05c:	60e3      	str	r3, [r4, #12]
   3b05e:	2e00      	cmp	r6, #0
   3b060:	f47f af78 	bne.w	3af54 <d_name+0x40>
   3b064:	e781      	b.n	3af6a <d_name+0x56>
   3b066:	2800      	cmp	r0, #0
   3b068:	d0d9      	beq.n	3b01e <d_name+0x10a>
   3b06a:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
   3b06e:	428a      	cmp	r2, r1
   3b070:	dad5      	bge.n	3b01e <d_name+0x10a>
   3b072:	69e1      	ldr	r1, [r4, #28]
   3b074:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   3b078:	3201      	adds	r2, #1
   3b07a:	6222      	str	r2, [r4, #32]
   3b07c:	781a      	ldrb	r2, [r3, #0]
   3b07e:	3a49      	subs	r2, #73	@ 0x49
   3b080:	2a01      	cmp	r2, #1
   3b082:	bf88      	it	hi
   3b084:	2300      	movhi	r3, #0
   3b086:	d993      	bls.n	3afb0 <d_name+0x9c>
   3b088:	462a      	mov	r2, r5
   3b08a:	2104      	movs	r1, #4
   3b08c:	4620      	mov	r0, r4
   3b08e:	f7fe f811 	bl	390b4 <d_make_comp>
   3b092:	4605      	mov	r5, r0
   3b094:	2e00      	cmp	r6, #0
   3b096:	f47f af5d 	bne.w	3af54 <d_name+0x40>
   3b09a:	e766      	b.n	3af6a <d_name+0x56>
   3b09c:	2100      	movs	r1, #0
   3b09e:	f000 f8b7 	bl	3b210 <d_encoding.part.0>
   3b0a2:	4605      	mov	r5, r0
   3b0a4:	e796      	b.n	3afd4 <d_name+0xc0>
   3b0a6:	e9d0 3105 	ldrd	r3, r1, [r0, #20]
   3b0aa:	1c90      	adds	r0, r2, #2
   3b0ac:	428b      	cmp	r3, r1
   3b0ae:	60e0      	str	r0, [r4, #12]
   3b0b0:	f280 80a5 	bge.w	3b1fe <d_name+0x2ea>
   3b0b4:	6921      	ldr	r1, [r4, #16]
   3b0b6:	eb03 0783 	add.w	r7, r3, r3, lsl #2
   3b0ba:	00b8      	lsls	r0, r7, #2
   3b0bc:	3301      	adds	r3, #1
   3b0be:	6163      	str	r3, [r4, #20]
   3b0c0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   3b0c4:	2300      	movs	r3, #0
   3b0c6:	e9c7 3301 	strd	r3, r3, [r7, #4]
   3b0ca:	540b      	strb	r3, [r1, r0]
   3b0cc:	4b4e      	ldr	r3, [pc, #312]	@ (3b208 <d_name+0x2f4>)
   3b0ce:	60fb      	str	r3, [r7, #12]
   3b0d0:	2303      	movs	r3, #3
   3b0d2:	613b      	str	r3, [r7, #16]
   3b0d4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   3b0d6:	3303      	adds	r3, #3
   3b0d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
   3b0da:	7893      	ldrb	r3, [r2, #2]
   3b0dc:	2b53      	cmp	r3, #83	@ 0x53
   3b0de:	bf18      	it	ne
   3b0e0:	2500      	movne	r5, #0
   3b0e2:	f47f af2b 	bne.w	3af3c <d_name+0x28>
   3b0e6:	e752      	b.n	3af8e <d_name+0x7a>
   3b0e8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
   3b0ea:	2120      	movs	r1, #32
   3b0ec:	3203      	adds	r2, #3
   3b0ee:	3301      	adds	r3, #1
   3b0f0:	60e3      	str	r3, [r4, #12]
   3b0f2:	2300      	movs	r3, #0
   3b0f4:	62e2      	str	r2, [r4, #44]	@ 0x2c
   3b0f6:	4620      	mov	r0, r4
   3b0f8:	461a      	mov	r2, r3
   3b0fa:	f7fd ffdb 	bl	390b4 <d_make_comp>
   3b0fe:	2101      	movs	r1, #1
   3b100:	4607      	mov	r7, r0
   3b102:	4620      	mov	r0, r4
   3b104:	f000 fc40 	bl	3b988 <d_prefix>
   3b108:	6028      	str	r0, [r5, #0]
   3b10a:	2800      	cmp	r0, #0
   3b10c:	d087      	beq.n	3b01e <d_name+0x10a>
   3b10e:	2f00      	cmp	r7, #0
   3b110:	d09e      	beq.n	3b050 <d_name+0x13c>
   3b112:	9b03      	ldr	r3, [sp, #12]
   3b114:	60fb      	str	r3, [r7, #12]
   3b116:	9703      	str	r7, [sp, #12]
   3b118:	e79a      	b.n	3b050 <d_name+0x13c>
   3b11a:	1c9a      	adds	r2, r3, #2
   3b11c:	60e2      	str	r2, [r4, #12]
   3b11e:	789b      	ldrb	r3, [r3, #2]
   3b120:	2b5f      	cmp	r3, #95	@ 0x5f
   3b122:	d06e      	beq.n	3b202 <d_name+0x2ee>
   3b124:	2b6e      	cmp	r3, #110	@ 0x6e
   3b126:	f43f af7a 	beq.w	3b01e <d_name+0x10a>
   3b12a:	4620      	mov	r0, r4
   3b12c:	f7fe f83e 	bl	391ac <d_number>
   3b130:	1c47      	adds	r7, r0, #1
   3b132:	f53f af74 	bmi.w	3b01e <d_name+0x10a>
   3b136:	68e2      	ldr	r2, [r4, #12]
   3b138:	7813      	ldrb	r3, [r2, #0]
   3b13a:	2b5f      	cmp	r3, #95	@ 0x5f
   3b13c:	f47f af6f 	bne.w	3b01e <d_name+0x10a>
   3b140:	3201      	adds	r2, #1
   3b142:	2100      	movs	r1, #0
   3b144:	60e2      	str	r2, [r4, #12]
   3b146:	4620      	mov	r0, r4
   3b148:	f7ff fee4 	bl	3af14 <d_name>
   3b14c:	4601      	mov	r1, r0
   3b14e:	b160      	cbz	r0, 3b16a <d_name+0x256>
   3b150:	7803      	ldrb	r3, [r0, #0]
   3b152:	2b47      	cmp	r3, #71	@ 0x47
   3b154:	d009      	beq.n	3b16a <d_name+0x256>
   3b156:	2b49      	cmp	r3, #73	@ 0x49
   3b158:	d007      	beq.n	3b16a <d_name+0x256>
   3b15a:	9001      	str	r0, [sp, #4]
   3b15c:	4620      	mov	r0, r4
   3b15e:	f7fe f883 	bl	39268 <d_discriminator>
   3b162:	9901      	ldr	r1, [sp, #4]
   3b164:	2800      	cmp	r0, #0
   3b166:	f43f af5a 	beq.w	3b01e <d_name+0x10a>
   3b16a:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
   3b16e:	429a      	cmp	r2, r3
   3b170:	da26      	bge.n	3b1c0 <d_name+0x2ac>
   3b172:	6920      	ldr	r0, [r4, #16]
   3b174:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
   3b178:	eb00 038c 	add.w	r3, r0, ip, lsl #2
   3b17c:	3201      	adds	r2, #1
   3b17e:	f04f 0e00 	mov.w	lr, #0
   3b182:	e9c3 ee01 	strd	lr, lr, [r3, #4]
   3b186:	6162      	str	r2, [r4, #20]
   3b188:	2248      	movs	r2, #72	@ 0x48
   3b18a:	f800 202c 	strb.w	r2, [r0, ip, lsl #2]
   3b18e:	e9c3 1703 	strd	r1, r7, [r3, #12]
   3b192:	782a      	ldrb	r2, [r5, #0]
   3b194:	2a03      	cmp	r2, #3
   3b196:	d105      	bne.n	3b1a4 <d_name+0x290>
   3b198:	692a      	ldr	r2, [r5, #16]
   3b19a:	7811      	ldrb	r1, [r2, #0]
   3b19c:	2929      	cmp	r1, #41	@ 0x29
   3b19e:	bf04      	itt	eq
   3b1a0:	2100      	moveq	r1, #0
   3b1a2:	60d1      	streq	r1, [r2, #12]
   3b1a4:	462a      	mov	r2, r5
   3b1a6:	2102      	movs	r1, #2
   3b1a8:	4620      	mov	r0, r4
   3b1aa:	f7fd ff83 	bl	390b4 <d_make_comp>
   3b1ae:	4605      	mov	r5, r0
   3b1b0:	2e00      	cmp	r6, #0
   3b1b2:	f47f aecf 	bne.w	3af54 <d_name+0x40>
   3b1b6:	e6d8      	b.n	3af6a <d_name+0x56>
   3b1b8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
   3b1ba:	211f      	movs	r1, #31
   3b1bc:	3202      	adds	r2, #2
   3b1be:	e796      	b.n	3b0ee <d_name+0x1da>
   3b1c0:	2300      	movs	r3, #0
   3b1c2:	e7e6      	b.n	3b192 <d_name+0x27e>
   3b1c4:	3302      	adds	r3, #2
   3b1c6:	60e3      	str	r3, [r4, #12]
   3b1c8:	4620      	mov	r0, r4
   3b1ca:	f7fe f84d 	bl	39268 <d_discriminator>
   3b1ce:	2800      	cmp	r0, #0
   3b1d0:	f43f af25 	beq.w	3b01e <d_name+0x10a>
   3b1d4:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
   3b1d8:	429a      	cmp	r2, r3
   3b1da:	daf1      	bge.n	3b1c0 <d_name+0x2ac>
   3b1dc:	6921      	ldr	r1, [r4, #16]
   3b1de:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   3b1e2:	0098      	lsls	r0, r3, #2
   3b1e4:	3201      	adds	r2, #1
   3b1e6:	6162      	str	r2, [r4, #20]
   3b1e8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   3b1ec:	2200      	movs	r2, #0
   3b1ee:	e9c3 2201 	strd	r2, r2, [r3, #4]
   3b1f2:	540a      	strb	r2, [r1, r0]
   3b1f4:	4a05      	ldr	r2, [pc, #20]	@ (3b20c <d_name+0x2f8>)
   3b1f6:	60da      	str	r2, [r3, #12]
   3b1f8:	220e      	movs	r2, #14
   3b1fa:	611a      	str	r2, [r3, #16]
   3b1fc:	e7c9      	b.n	3b192 <d_name+0x27e>
   3b1fe:	2700      	movs	r7, #0
   3b200:	e768      	b.n	3b0d4 <d_name+0x1c0>
   3b202:	2700      	movs	r7, #0
   3b204:	e79c      	b.n	3b140 <d_name+0x22c>
   3b206:	bf00      	nop
   3b208:	00044244 	.word	0x00044244
   3b20c:	00044234 	.word	0x00044234

0003b210 <d_encoding.part.0>:
   3b210:	b570      	push	{r4, r5, r6, lr}
   3b212:	460e      	mov	r6, r1
   3b214:	2100      	movs	r1, #0
   3b216:	4605      	mov	r5, r0
   3b218:	f7ff fe7c 	bl	3af14 <d_name>
   3b21c:	2800      	cmp	r0, #0
   3b21e:	d049      	beq.n	3b2b4 <d_encoding.part.0+0xa4>
   3b220:	4604      	mov	r4, r0
   3b222:	b1ee      	cbz	r6, 3b260 <d_encoding.part.0+0x50>
   3b224:	68ab      	ldr	r3, [r5, #8]
   3b226:	07db      	lsls	r3, r3, #31
   3b228:	d41a      	bmi.n	3b260 <d_encoding.part.0+0x50>
   3b22a:	7823      	ldrb	r3, [r4, #0]
   3b22c:	2b4e      	cmp	r3, #78	@ 0x4e
   3b22e:	f1a3 011c 	sub.w	r1, r3, #28
   3b232:	f1a3 0250 	sub.w	r2, r3, #80	@ 0x50
   3b236:	d035      	beq.n	3b2a4 <d_encoding.part.0+0x94>
   3b238:	d832      	bhi.n	3b2a0 <d_encoding.part.0+0x90>
   3b23a:	2904      	cmp	r1, #4
   3b23c:	d932      	bls.n	3b2a4 <d_encoding.part.0+0x94>
   3b23e:	2b02      	cmp	r3, #2
   3b240:	d10c      	bne.n	3b25c <d_encoding.part.0+0x4c>
   3b242:	6923      	ldr	r3, [r4, #16]
   3b244:	2b00      	cmp	r3, #0
   3b246:	d035      	beq.n	3b2b4 <d_encoding.part.0+0xa4>
   3b248:	781a      	ldrb	r2, [r3, #0]
   3b24a:	2a4e      	cmp	r2, #78	@ 0x4e
   3b24c:	f1a2 001c 	sub.w	r0, r2, #28
   3b250:	f1a2 0150 	sub.w	r1, r2, #80	@ 0x50
   3b254:	d02a      	beq.n	3b2ac <d_encoding.part.0+0x9c>
   3b256:	d827      	bhi.n	3b2a8 <d_encoding.part.0+0x98>
   3b258:	2804      	cmp	r0, #4
   3b25a:	d927      	bls.n	3b2ac <d_encoding.part.0+0x9c>
   3b25c:	4620      	mov	r0, r4
   3b25e:	bd70      	pop	{r4, r5, r6, pc}
   3b260:	68eb      	ldr	r3, [r5, #12]
   3b262:	781b      	ldrb	r3, [r3, #0]
   3b264:	2b00      	cmp	r3, #0
   3b266:	d0f9      	beq.n	3b25c <d_encoding.part.0+0x4c>
   3b268:	2b45      	cmp	r3, #69	@ 0x45
   3b26a:	d0f7      	beq.n	3b25c <d_encoding.part.0+0x4c>
   3b26c:	4621      	mov	r1, r4
   3b26e:	780b      	ldrb	r3, [r1, #0]
   3b270:	2b04      	cmp	r3, #4
   3b272:	d033      	beq.n	3b2dc <d_encoding.part.0+0xcc>
   3b274:	d821      	bhi.n	3b2ba <d_encoding.part.0+0xaa>
   3b276:	2b02      	cmp	r3, #2
   3b278:	d12e      	bne.n	3b2d8 <d_encoding.part.0+0xc8>
   3b27a:	6909      	ldr	r1, [r1, #16]
   3b27c:	2900      	cmp	r1, #0
   3b27e:	d1f6      	bne.n	3b26e <d_encoding.part.0+0x5e>
   3b280:	4628      	mov	r0, r5
   3b282:	f7fe ffcd 	bl	3a220 <d_bare_function_type>
   3b286:	4603      	mov	r3, r0
   3b288:	b1a0      	cbz	r0, 3b2b4 <d_encoding.part.0+0xa4>
   3b28a:	b916      	cbnz	r6, 3b292 <d_encoding.part.0+0x82>
   3b28c:	7822      	ldrb	r2, [r4, #0]
   3b28e:	2a02      	cmp	r2, #2
   3b290:	d034      	beq.n	3b2fc <d_encoding.part.0+0xec>
   3b292:	4622      	mov	r2, r4
   3b294:	4628      	mov	r0, r5
   3b296:	2103      	movs	r1, #3
   3b298:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3b29c:	f7fd bf0a 	b.w	390b4 <d_make_comp>
   3b2a0:	2a01      	cmp	r2, #1
   3b2a2:	d8db      	bhi.n	3b25c <d_encoding.part.0+0x4c>
   3b2a4:	68e4      	ldr	r4, [r4, #12]
   3b2a6:	e7c0      	b.n	3b22a <d_encoding.part.0+0x1a>
   3b2a8:	2901      	cmp	r1, #1
   3b2aa:	d8d7      	bhi.n	3b25c <d_encoding.part.0+0x4c>
   3b2ac:	68db      	ldr	r3, [r3, #12]
   3b2ae:	6123      	str	r3, [r4, #16]
   3b2b0:	2b00      	cmp	r3, #0
   3b2b2:	d1c9      	bne.n	3b248 <d_encoding.part.0+0x38>
   3b2b4:	2400      	movs	r4, #0
   3b2b6:	4620      	mov	r0, r4
   3b2b8:	bd70      	pop	{r4, r5, r6, pc}
   3b2ba:	2b4e      	cmp	r3, #78	@ 0x4e
   3b2bc:	d006      	beq.n	3b2cc <d_encoding.part.0+0xbc>
   3b2be:	f1a3 021c 	sub.w	r2, r3, #28
   3b2c2:	f1a3 0350 	sub.w	r3, r3, #80	@ 0x50
   3b2c6:	d805      	bhi.n	3b2d4 <d_encoding.part.0+0xc4>
   3b2c8:	2a04      	cmp	r2, #4
   3b2ca:	d805      	bhi.n	3b2d8 <d_encoding.part.0+0xc8>
   3b2cc:	68c9      	ldr	r1, [r1, #12]
   3b2ce:	2900      	cmp	r1, #0
   3b2d0:	d1cd      	bne.n	3b26e <d_encoding.part.0+0x5e>
   3b2d2:	e7d5      	b.n	3b280 <d_encoding.part.0+0x70>
   3b2d4:	2b01      	cmp	r3, #1
   3b2d6:	d9f9      	bls.n	3b2cc <d_encoding.part.0+0xbc>
   3b2d8:	2100      	movs	r1, #0
   3b2da:	e7d1      	b.n	3b280 <d_encoding.part.0+0x70>
   3b2dc:	68cb      	ldr	r3, [r1, #12]
   3b2de:	b15b      	cbz	r3, 3b2f8 <d_encoding.part.0+0xe8>
   3b2e0:	7819      	ldrb	r1, [r3, #0]
   3b2e2:	2908      	cmp	r1, #8
   3b2e4:	f101 32ff 	add.w	r2, r1, #4294967295	@ 0xffffffff
   3b2e8:	d80d      	bhi.n	3b306 <d_encoding.part.0+0xf6>
   3b2ea:	2906      	cmp	r1, #6
   3b2ec:	d8f4      	bhi.n	3b2d8 <d_encoding.part.0+0xc8>
   3b2ee:	2a01      	cmp	r2, #1
   3b2f0:	d802      	bhi.n	3b2f8 <d_encoding.part.0+0xe8>
   3b2f2:	691b      	ldr	r3, [r3, #16]
   3b2f4:	2b00      	cmp	r3, #0
   3b2f6:	d1f3      	bne.n	3b2e0 <d_encoding.part.0+0xd0>
   3b2f8:	2101      	movs	r1, #1
   3b2fa:	e7c1      	b.n	3b280 <d_encoding.part.0+0x70>
   3b2fc:	7802      	ldrb	r2, [r0, #0]
   3b2fe:	2a29      	cmp	r2, #41	@ 0x29
   3b300:	bf08      	it	eq
   3b302:	60c6      	streq	r6, [r0, #12]
   3b304:	e7c5      	b.n	3b292 <d_encoding.part.0+0x82>
   3b306:	3935      	subs	r1, #53	@ 0x35
   3b308:	bf18      	it	ne
   3b30a:	2101      	movne	r1, #1
   3b30c:	e7b8      	b.n	3b280 <d_encoding.part.0+0x70>
   3b30e:	bf00      	nop

0003b310 <d_special_name>:
   3b310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3b314:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
   3b316:	68c3      	ldr	r3, [r0, #12]
   3b318:	f101 0214 	add.w	r2, r1, #20
   3b31c:	62c2      	str	r2, [r0, #44]	@ 0x2c
   3b31e:	781a      	ldrb	r2, [r3, #0]
   3b320:	2a54      	cmp	r2, #84	@ 0x54
   3b322:	b082      	sub	sp, #8
   3b324:	4604      	mov	r4, r0
   3b326:	d029      	beq.n	3b37c <d_special_name+0x6c>
   3b328:	2a47      	cmp	r2, #71	@ 0x47
   3b32a:	d123      	bne.n	3b374 <d_special_name+0x64>
   3b32c:	1c5a      	adds	r2, r3, #1
   3b32e:	60c2      	str	r2, [r0, #12]
   3b330:	785a      	ldrb	r2, [r3, #1]
   3b332:	b1fa      	cbz	r2, 3b374 <d_special_name+0x64>
   3b334:	1c9a      	adds	r2, r3, #2
   3b336:	60c2      	str	r2, [r0, #12]
   3b338:	785a      	ldrb	r2, [r3, #1]
   3b33a:	2a56      	cmp	r2, #86	@ 0x56
   3b33c:	f200 80e5 	bhi.w	3b50a <d_special_name+0x1fa>
   3b340:	2a40      	cmp	r2, #64	@ 0x40
   3b342:	d917      	bls.n	3b374 <d_special_name+0x64>
   3b344:	3a41      	subs	r2, #65	@ 0x41
   3b346:	2a15      	cmp	r2, #21
   3b348:	d814      	bhi.n	3b374 <d_special_name+0x64>
   3b34a:	e8df f002 	tbb	[pc, r2]
   3b34e:	13d2      	.short	0x13d2
   3b350:	13131313 	.word	0x13131313
   3b354:	130b1313 	.word	0x130b1313
   3b358:	13131313 	.word	0x13131313
   3b35c:	b4131313 	.word	0xb4131313
   3b360:	91139d13 	.word	0x91139d13
   3b364:	2500      	movs	r5, #0
   3b366:	a901      	add	r1, sp, #4
   3b368:	9501      	str	r5, [sp, #4]
   3b36a:	f7fe fb03 	bl	39974 <d_maybe_module_name>
   3b36e:	2800      	cmp	r0, #0
   3b370:	f040 811c 	bne.w	3b5ac <d_special_name+0x29c>
   3b374:	2000      	movs	r0, #0
   3b376:	b002      	add	sp, #8
   3b378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3b37c:	1c5a      	adds	r2, r3, #1
   3b37e:	60c2      	str	r2, [r0, #12]
   3b380:	785a      	ldrb	r2, [r3, #1]
   3b382:	2a00      	cmp	r2, #0
   3b384:	d0f6      	beq.n	3b374 <d_special_name+0x64>
   3b386:	1c9a      	adds	r2, r3, #2
   3b388:	60c2      	str	r2, [r0, #12]
   3b38a:	785b      	ldrb	r3, [r3, #1]
   3b38c:	3b41      	subs	r3, #65	@ 0x41
   3b38e:	2b35      	cmp	r3, #53	@ 0x35
   3b390:	d8f0      	bhi.n	3b374 <d_special_name+0x64>
   3b392:	a201      	add	r2, pc, #4	@ (adr r2, 3b398 <d_special_name+0x88>)
   3b394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   3b398:	0003b5d5 	.word	0x0003b5d5
   3b39c:	0003b375 	.word	0x0003b375
   3b3a0:	0003b5e1 	.word	0x0003b5e1
   3b3a4:	0003b375 	.word	0x0003b375
   3b3a8:	0003b375 	.word	0x0003b375
   3b3ac:	0003b615 	.word	0x0003b615
   3b3b0:	0003b375 	.word	0x0003b375
   3b3b4:	0003b621 	.word	0x0003b621
   3b3b8:	0003b65b 	.word	0x0003b65b
   3b3bc:	0003b6ef 	.word	0x0003b6ef
   3b3c0:	0003b375 	.word	0x0003b375
   3b3c4:	0003b375 	.word	0x0003b375
   3b3c8:	0003b375 	.word	0x0003b375
   3b3cc:	0003b375 	.word	0x0003b375
   3b3d0:	0003b375 	.word	0x0003b375
   3b3d4:	0003b375 	.word	0x0003b375
   3b3d8:	0003b375 	.word	0x0003b375
   3b3dc:	0003b375 	.word	0x0003b375
   3b3e0:	0003b6e3 	.word	0x0003b6e3
   3b3e4:	0003b6fb 	.word	0x0003b6fb
   3b3e8:	0003b375 	.word	0x0003b375
   3b3ec:	0003b667 	.word	0x0003b667
   3b3f0:	0003b677 	.word	0x0003b677
   3b3f4:	0003b375 	.word	0x0003b375
   3b3f8:	0003b375 	.word	0x0003b375
   3b3fc:	0003b375 	.word	0x0003b375
   3b400:	0003b375 	.word	0x0003b375
   3b404:	0003b375 	.word	0x0003b375
   3b408:	0003b375 	.word	0x0003b375
   3b40c:	0003b375 	.word	0x0003b375
   3b410:	0003b375 	.word	0x0003b375
   3b414:	0003b375 	.word	0x0003b375
   3b418:	0003b375 	.word	0x0003b375
   3b41c:	0003b375 	.word	0x0003b375
   3b420:	0003b685 	.word	0x0003b685
   3b424:	0003b375 	.word	0x0003b375
   3b428:	0003b375 	.word	0x0003b375
   3b42c:	0003b375 	.word	0x0003b375
   3b430:	0003b375 	.word	0x0003b375
   3b434:	0003b6bb 	.word	0x0003b6bb
   3b438:	0003b375 	.word	0x0003b375
   3b43c:	0003b375 	.word	0x0003b375
   3b440:	0003b375 	.word	0x0003b375
   3b444:	0003b375 	.word	0x0003b375
   3b448:	0003b375 	.word	0x0003b375
   3b44c:	0003b375 	.word	0x0003b375
   3b450:	0003b375 	.word	0x0003b375
   3b454:	0003b375 	.word	0x0003b375
   3b458:	0003b375 	.word	0x0003b375
   3b45c:	0003b375 	.word	0x0003b375
   3b460:	0003b375 	.word	0x0003b375
   3b464:	0003b375 	.word	0x0003b375
   3b468:	0003b375 	.word	0x0003b375
   3b46c:	0003b62f 	.word	0x0003b62f
   3b470:	2100      	movs	r1, #0
   3b472:	f7ff fd4f 	bl	3af14 <d_name>
   3b476:	2300      	movs	r3, #0
   3b478:	4602      	mov	r2, r0
   3b47a:	2113      	movs	r1, #19
   3b47c:	4620      	mov	r0, r4
   3b47e:	b002      	add	sp, #8
   3b480:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3b484:	f7fd be16 	b.w	390b4 <d_make_comp>
   3b488:	789a      	ldrb	r2, [r3, #2]
   3b48a:	2a00      	cmp	r2, #0
   3b48c:	f000 809a 	beq.w	3b5c4 <d_special_name+0x2b4>
   3b490:	1cda      	adds	r2, r3, #3
   3b492:	60c2      	str	r2, [r0, #12]
   3b494:	789a      	ldrb	r2, [r3, #2]
   3b496:	78db      	ldrb	r3, [r3, #3]
   3b498:	2a6e      	cmp	r2, #110	@ 0x6e
   3b49a:	f000 816a 	beq.w	3b772 <d_special_name+0x462>
   3b49e:	2b47      	cmp	r3, #71	@ 0x47
   3b4a0:	d002      	beq.n	3b4a8 <d_special_name+0x198>
   3b4a2:	2b54      	cmp	r3, #84	@ 0x54
   3b4a4:	f040 808e 	bne.w	3b5c4 <d_special_name+0x2b4>
   3b4a8:	4620      	mov	r0, r4
   3b4aa:	f7ff ff31 	bl	3b310 <d_special_name>
   3b4ae:	4602      	mov	r2, r0
   3b4b0:	2300      	movs	r3, #0
   3b4b2:	214a      	movs	r1, #74	@ 0x4a
   3b4b4:	e7e2      	b.n	3b47c <d_special_name+0x16c>
   3b4b6:	2100      	movs	r1, #0
   3b4b8:	f7ff fd2c 	bl	3af14 <d_name>
   3b4bc:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
   3b4c0:	4291      	cmp	r1, r2
   3b4c2:	4606      	mov	r6, r0
   3b4c4:	f280 8084 	bge.w	3b5d0 <d_special_name+0x2c0>
   3b4c8:	6922      	ldr	r2, [r4, #16]
   3b4ca:	eb01 0081 	add.w	r0, r1, r1, lsl #2
   3b4ce:	eb02 0580 	add.w	r5, r2, r0, lsl #2
   3b4d2:	2300      	movs	r3, #0
   3b4d4:	e9c5 3301 	strd	r3, r3, [r5, #4]
   3b4d8:	3101      	adds	r1, #1
   3b4da:	2343      	movs	r3, #67	@ 0x43
   3b4dc:	6161      	str	r1, [r4, #20]
   3b4de:	f802 3020 	strb.w	r3, [r2, r0, lsl #2]
   3b4e2:	4620      	mov	r0, r4
   3b4e4:	f7fd fe62 	bl	391ac <d_number>
   3b4e8:	60e8      	str	r0, [r5, #12]
   3b4ea:	462b      	mov	r3, r5
   3b4ec:	4632      	mov	r2, r6
   3b4ee:	2116      	movs	r1, #22
   3b4f0:	e7c4      	b.n	3b47c <d_special_name+0x16c>
   3b4f2:	789b      	ldrb	r3, [r3, #2]
   3b4f4:	2b47      	cmp	r3, #71	@ 0x47
   3b4f6:	d060      	beq.n	3b5ba <d_special_name+0x2aa>
   3b4f8:	2b54      	cmp	r3, #84	@ 0x54
   3b4fa:	d05e      	beq.n	3b5ba <d_special_name+0x2aa>
   3b4fc:	2100      	movs	r1, #0
   3b4fe:	f7ff fe87 	bl	3b210 <d_encoding.part.0>
   3b502:	4602      	mov	r2, r0
   3b504:	2300      	movs	r3, #0
   3b506:	2117      	movs	r1, #23
   3b508:	e7b8      	b.n	3b47c <d_special_name+0x16c>
   3b50a:	2a72      	cmp	r2, #114	@ 0x72
   3b50c:	f47f af32 	bne.w	3b374 <d_special_name+0x64>
   3b510:	f7fd fe4c 	bl	391ac <d_number>
   3b514:	2801      	cmp	r0, #1
   3b516:	f77f af2d 	ble.w	3b374 <d_special_name+0x64>
   3b51a:	68e3      	ldr	r3, [r4, #12]
   3b51c:	781a      	ldrb	r2, [r3, #0]
   3b51e:	2a00      	cmp	r2, #0
   3b520:	f43f af28 	beq.w	3b374 <d_special_name+0x64>
   3b524:	1c5e      	adds	r6, r3, #1
   3b526:	60e6      	str	r6, [r4, #12]
   3b528:	781b      	ldrb	r3, [r3, #0]
   3b52a:	2b5f      	cmp	r3, #95	@ 0x5f
   3b52c:	f47f af22 	bne.w	3b374 <d_special_name+0x64>
   3b530:	2200      	movs	r2, #0
   3b532:	1e45      	subs	r5, r0, #1
   3b534:	4617      	mov	r7, r2
   3b536:	f04f 0842 	mov.w	r8, #66	@ 0x42
   3b53a:	7833      	ldrb	r3, [r6, #0]
   3b53c:	2b00      	cmp	r3, #0
   3b53e:	f43f af19 	beq.w	3b374 <d_special_name+0x64>
   3b542:	2b24      	cmp	r3, #36	@ 0x24
   3b544:	f040 80e1 	bne.w	3b70a <d_special_name+0x3fa>
   3b548:	7873      	ldrb	r3, [r6, #1]
   3b54a:	2b53      	cmp	r3, #83	@ 0x53
   3b54c:	f000 8109 	beq.w	3b762 <d_special_name+0x452>
   3b550:	2b5f      	cmp	r3, #95	@ 0x5f
   3b552:	f000 8104 	beq.w	3b75e <d_special_name+0x44e>
   3b556:	2b24      	cmp	r3, #36	@ 0x24
   3b558:	f47f af0c 	bne.w	3b374 <d_special_name+0x64>
   3b55c:	4619      	mov	r1, r3
   3b55e:	e9d4 0305 	ldrd	r0, r3, [r4, #20]
   3b562:	68e6      	ldr	r6, [r4, #12]
   3b564:	4298      	cmp	r0, r3
   3b566:	f106 0602 	add.w	r6, r6, #2
   3b56a:	f280 80fc 	bge.w	3b766 <d_special_name+0x456>
   3b56e:	f8d4 c010 	ldr.w	ip, [r4, #16]
   3b572:	eb00 0e80 	add.w	lr, r0, r0, lsl #2
   3b576:	eb0c 038e 	add.w	r3, ip, lr, lsl #2
   3b57a:	3001      	adds	r0, #1
   3b57c:	e9c3 7701 	strd	r7, r7, [r3, #4]
   3b580:	3d02      	subs	r5, #2
   3b582:	6160      	str	r0, [r4, #20]
   3b584:	f80c 802e 	strb.w	r8, [ip, lr, lsl #2]
   3b588:	60d9      	str	r1, [r3, #12]
   3b58a:	60e6      	str	r6, [r4, #12]
   3b58c:	2a00      	cmp	r2, #0
   3b58e:	f000 80e4 	beq.w	3b75a <d_special_name+0x44a>
   3b592:	2141      	movs	r1, #65	@ 0x41
   3b594:	4620      	mov	r0, r4
   3b596:	f7fd fd8d 	bl	390b4 <d_make_comp>
   3b59a:	4602      	mov	r2, r0
   3b59c:	2800      	cmp	r0, #0
   3b59e:	f43f aee9 	beq.w	3b374 <d_special_name+0x64>
   3b5a2:	2d00      	cmp	r5, #0
   3b5a4:	dcc9      	bgt.n	3b53a <d_special_name+0x22a>
   3b5a6:	2300      	movs	r3, #0
   3b5a8:	2140      	movs	r1, #64	@ 0x40
   3b5aa:	e767      	b.n	3b47c <d_special_name+0x16c>
   3b5ac:	9a01      	ldr	r2, [sp, #4]
   3b5ae:	2a00      	cmp	r2, #0
   3b5b0:	f43f aee0 	beq.w	3b374 <d_special_name+0x64>
   3b5b4:	462b      	mov	r3, r5
   3b5b6:	2156      	movs	r1, #86	@ 0x56
   3b5b8:	e760      	b.n	3b47c <d_special_name+0x16c>
   3b5ba:	4620      	mov	r0, r4
   3b5bc:	f7ff fea8 	bl	3b310 <d_special_name>
   3b5c0:	4602      	mov	r2, r0
   3b5c2:	e79f      	b.n	3b504 <d_special_name+0x1f4>
   3b5c4:	2100      	movs	r1, #0
   3b5c6:	4620      	mov	r0, r4
   3b5c8:	f7ff fe22 	bl	3b210 <d_encoding.part.0>
   3b5cc:	4602      	mov	r2, r0
   3b5ce:	e76f      	b.n	3b4b0 <d_special_name+0x1a0>
   3b5d0:	2500      	movs	r5, #0
   3b5d2:	e78a      	b.n	3b4ea <d_special_name+0x1da>
   3b5d4:	f000 f97a 	bl	3b8cc <d_template_arg>
   3b5d8:	2300      	movs	r3, #0
   3b5da:	4602      	mov	r2, r0
   3b5dc:	2130      	movs	r1, #48	@ 0x30
   3b5de:	e74d      	b.n	3b47c <d_special_name+0x16c>
   3b5e0:	f7fe f9f8 	bl	399d4 <d_type>
   3b5e4:	4605      	mov	r5, r0
   3b5e6:	4620      	mov	r0, r4
   3b5e8:	f7fd fde0 	bl	391ac <d_number>
   3b5ec:	2800      	cmp	r0, #0
   3b5ee:	f6ff aec1 	blt.w	3b374 <d_special_name+0x64>
   3b5f2:	68e3      	ldr	r3, [r4, #12]
   3b5f4:	781a      	ldrb	r2, [r3, #0]
   3b5f6:	2a5f      	cmp	r2, #95	@ 0x5f
   3b5f8:	f47f aebc 	bne.w	3b374 <d_special_name+0x64>
   3b5fc:	3301      	adds	r3, #1
   3b5fe:	60e3      	str	r3, [r4, #12]
   3b600:	4620      	mov	r0, r4
   3b602:	f7fe f9e7 	bl	399d4 <d_type>
   3b606:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
   3b608:	3105      	adds	r1, #5
   3b60a:	62e1      	str	r1, [r4, #44]	@ 0x2c
   3b60c:	4602      	mov	r2, r0
   3b60e:	462b      	mov	r3, r5
   3b610:	210b      	movs	r1, #11
   3b612:	e733      	b.n	3b47c <d_special_name+0x16c>
   3b614:	f7fe f9de 	bl	399d4 <d_type>
   3b618:	2300      	movs	r3, #0
   3b61a:	4602      	mov	r2, r0
   3b61c:	210e      	movs	r1, #14
   3b61e:	e72d      	b.n	3b47c <d_special_name+0x16c>
   3b620:	2100      	movs	r1, #0
   3b622:	f7ff fc77 	bl	3af14 <d_name>
   3b626:	2300      	movs	r3, #0
   3b628:	4602      	mov	r2, r0
   3b62a:	2114      	movs	r1, #20
   3b62c:	e726      	b.n	3b47c <d_special_name+0x16c>
   3b62e:	2176      	movs	r1, #118	@ 0x76
   3b630:	f7fd fdf6 	bl	39220 <d_call_offset>
   3b634:	2800      	cmp	r0, #0
   3b636:	f43f ae9d 	beq.w	3b374 <d_special_name+0x64>
   3b63a:	68e3      	ldr	r3, [r4, #12]
   3b63c:	781b      	ldrb	r3, [r3, #0]
   3b63e:	2b47      	cmp	r3, #71	@ 0x47
   3b640:	f000 80a2 	beq.w	3b788 <d_special_name+0x478>
   3b644:	2b54      	cmp	r3, #84	@ 0x54
   3b646:	f000 809f 	beq.w	3b788 <d_special_name+0x478>
   3b64a:	2100      	movs	r1, #0
   3b64c:	4620      	mov	r0, r4
   3b64e:	f7ff fddf 	bl	3b210 <d_encoding.part.0>
   3b652:	4602      	mov	r2, r0
   3b654:	2300      	movs	r3, #0
   3b656:	2110      	movs	r1, #16
   3b658:	e710      	b.n	3b47c <d_special_name+0x16c>
   3b65a:	f7fe f9bb 	bl	399d4 <d_type>
   3b65e:	2300      	movs	r3, #0
   3b660:	4602      	mov	r2, r0
   3b662:	210c      	movs	r1, #12
   3b664:	e70a      	b.n	3b47c <d_special_name+0x16c>
   3b666:	310f      	adds	r1, #15
   3b668:	62c1      	str	r1, [r0, #44]	@ 0x2c
   3b66a:	f7fe f9b3 	bl	399d4 <d_type>
   3b66e:	2300      	movs	r3, #0
   3b670:	4602      	mov	r2, r0
   3b672:	2109      	movs	r1, #9
   3b674:	e702      	b.n	3b47c <d_special_name+0x16c>
   3b676:	2100      	movs	r1, #0
   3b678:	f7ff fc4c 	bl	3af14 <d_name>
   3b67c:	2300      	movs	r3, #0
   3b67e:	4602      	mov	r2, r0
   3b680:	2115      	movs	r1, #21
   3b682:	e6fb      	b.n	3b47c <d_special_name+0x16c>
   3b684:	2100      	movs	r1, #0
   3b686:	f7fd fdcb 	bl	39220 <d_call_offset>
   3b68a:	2800      	cmp	r0, #0
   3b68c:	f43f ae72 	beq.w	3b374 <d_special_name+0x64>
   3b690:	2100      	movs	r1, #0
   3b692:	4620      	mov	r0, r4
   3b694:	f7fd fdc4 	bl	39220 <d_call_offset>
   3b698:	2800      	cmp	r0, #0
   3b69a:	f43f ae6b 	beq.w	3b374 <d_special_name+0x64>
   3b69e:	68e3      	ldr	r3, [r4, #12]
   3b6a0:	781b      	ldrb	r3, [r3, #0]
   3b6a2:	2b47      	cmp	r3, #71	@ 0x47
   3b6a4:	d07f      	beq.n	3b7a6 <d_special_name+0x496>
   3b6a6:	2b54      	cmp	r3, #84	@ 0x54
   3b6a8:	d07d      	beq.n	3b7a6 <d_special_name+0x496>
   3b6aa:	2100      	movs	r1, #0
   3b6ac:	4620      	mov	r0, r4
   3b6ae:	f7ff fdaf 	bl	3b210 <d_encoding.part.0>
   3b6b2:	4602      	mov	r2, r0
   3b6b4:	2300      	movs	r3, #0
   3b6b6:	2111      	movs	r1, #17
   3b6b8:	e6e0      	b.n	3b47c <d_special_name+0x16c>
   3b6ba:	2168      	movs	r1, #104	@ 0x68
   3b6bc:	f7fd fdb0 	bl	39220 <d_call_offset>
   3b6c0:	2800      	cmp	r0, #0
   3b6c2:	f43f ae57 	beq.w	3b374 <d_special_name+0x64>
   3b6c6:	68e3      	ldr	r3, [r4, #12]
   3b6c8:	781b      	ldrb	r3, [r3, #0]
   3b6ca:	2b47      	cmp	r3, #71	@ 0x47
   3b6cc:	d061      	beq.n	3b792 <d_special_name+0x482>
   3b6ce:	2b54      	cmp	r3, #84	@ 0x54
   3b6d0:	d05f      	beq.n	3b792 <d_special_name+0x482>
   3b6d2:	2100      	movs	r1, #0
   3b6d4:	4620      	mov	r0, r4
   3b6d6:	f7ff fd9b 	bl	3b210 <d_encoding.part.0>
   3b6da:	4602      	mov	r2, r0
   3b6dc:	2300      	movs	r3, #0
   3b6de:	210f      	movs	r1, #15
   3b6e0:	e6cc      	b.n	3b47c <d_special_name+0x16c>
   3b6e2:	f7fe f977 	bl	399d4 <d_type>
   3b6e6:	2300      	movs	r3, #0
   3b6e8:	4602      	mov	r2, r0
   3b6ea:	210d      	movs	r1, #13
   3b6ec:	e6c6      	b.n	3b47c <d_special_name+0x16c>
   3b6ee:	f7fe f971 	bl	399d4 <d_type>
   3b6f2:	2300      	movs	r3, #0
   3b6f4:	4602      	mov	r2, r0
   3b6f6:	2112      	movs	r1, #18
   3b6f8:	e6c0      	b.n	3b47c <d_special_name+0x16c>
   3b6fa:	310a      	adds	r1, #10
   3b6fc:	62c1      	str	r1, [r0, #44]	@ 0x2c
   3b6fe:	f7fe f969 	bl	399d4 <d_type>
   3b702:	2300      	movs	r3, #0
   3b704:	4602      	mov	r2, r0
   3b706:	210a      	movs	r1, #10
   3b708:	e6b8      	b.n	3b47c <d_special_name+0x16c>
   3b70a:	f106 3cff 	add.w	ip, r6, #4294967295	@ 0xffffffff
   3b70e:	2100      	movs	r1, #0
   3b710:	e004      	b.n	3b71c <d_special_name+0x40c>
   3b712:	2b24      	cmp	r3, #36	@ 0x24
   3b714:	d006      	beq.n	3b724 <d_special_name+0x414>
   3b716:	3101      	adds	r1, #1
   3b718:	42a9      	cmp	r1, r5
   3b71a:	d003      	beq.n	3b724 <d_special_name+0x414>
   3b71c:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
   3b720:	2b00      	cmp	r3, #0
   3b722:	d1f6      	bne.n	3b712 <d_special_name+0x402>
   3b724:	e9d4 0305 	ldrd	r0, r3, [r4, #20]
   3b728:	4298      	cmp	r0, r3
   3b72a:	da1e      	bge.n	3b76a <d_special_name+0x45a>
   3b72c:	f8d4 c010 	ldr.w	ip, [r4, #16]
   3b730:	eb00 0e80 	add.w	lr, r0, r0, lsl #2
   3b734:	eb0c 038e 	add.w	r3, ip, lr, lsl #2
   3b738:	3001      	adds	r0, #1
   3b73a:	e9c3 7701 	strd	r7, r7, [r3, #4]
   3b73e:	6160      	str	r0, [r4, #20]
   3b740:	2900      	cmp	r1, #0
   3b742:	f43f ae17 	beq.w	3b374 <d_special_name+0x64>
   3b746:	e9c3 7701 	strd	r7, r7, [r3, #4]
   3b74a:	f80c 702e 	strb.w	r7, [ip, lr, lsl #2]
   3b74e:	e9c3 6103 	strd	r6, r1, [r3, #12]
   3b752:	68e6      	ldr	r6, [r4, #12]
   3b754:	1a6d      	subs	r5, r5, r1
   3b756:	440e      	add	r6, r1
   3b758:	e717      	b.n	3b58a <d_special_name+0x27a>
   3b75a:	461a      	mov	r2, r3
   3b75c:	e721      	b.n	3b5a2 <d_special_name+0x292>
   3b75e:	212e      	movs	r1, #46	@ 0x2e
   3b760:	e6fd      	b.n	3b55e <d_special_name+0x24e>
   3b762:	212f      	movs	r1, #47	@ 0x2f
   3b764:	e6fb      	b.n	3b55e <d_special_name+0x24e>
   3b766:	60e6      	str	r6, [r4, #12]
   3b768:	e604      	b.n	3b374 <d_special_name+0x64>
   3b76a:	68e3      	ldr	r3, [r4, #12]
   3b76c:	440b      	add	r3, r1
   3b76e:	60e3      	str	r3, [r4, #12]
   3b770:	e600      	b.n	3b374 <d_special_name+0x64>
   3b772:	2b47      	cmp	r3, #71	@ 0x47
   3b774:	d012      	beq.n	3b79c <d_special_name+0x48c>
   3b776:	2b54      	cmp	r3, #84	@ 0x54
   3b778:	d010      	beq.n	3b79c <d_special_name+0x48c>
   3b77a:	2100      	movs	r1, #0
   3b77c:	f7ff fd48 	bl	3b210 <d_encoding.part.0>
   3b780:	4602      	mov	r2, r0
   3b782:	2300      	movs	r3, #0
   3b784:	214b      	movs	r1, #75	@ 0x4b
   3b786:	e679      	b.n	3b47c <d_special_name+0x16c>
   3b788:	4620      	mov	r0, r4
   3b78a:	f7ff fdc1 	bl	3b310 <d_special_name>
   3b78e:	4602      	mov	r2, r0
   3b790:	e760      	b.n	3b654 <d_special_name+0x344>
   3b792:	4620      	mov	r0, r4
   3b794:	f7ff fdbc 	bl	3b310 <d_special_name>
   3b798:	4602      	mov	r2, r0
   3b79a:	e79f      	b.n	3b6dc <d_special_name+0x3cc>
   3b79c:	4620      	mov	r0, r4
   3b79e:	f7ff fdb7 	bl	3b310 <d_special_name>
   3b7a2:	4602      	mov	r2, r0
   3b7a4:	e7ed      	b.n	3b782 <d_special_name+0x472>
   3b7a6:	4620      	mov	r0, r4
   3b7a8:	f7ff fdb2 	bl	3b310 <d_special_name>
   3b7ac:	4602      	mov	r2, r0
   3b7ae:	e781      	b.n	3b6b4 <d_special_name+0x3a4>

0003b7b0 <d_expr_primary>:
   3b7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3b7b2:	68c2      	ldr	r2, [r0, #12]
   3b7b4:	7813      	ldrb	r3, [r2, #0]
   3b7b6:	2b4c      	cmp	r3, #76	@ 0x4c
   3b7b8:	d132      	bne.n	3b820 <d_expr_primary+0x70>
   3b7ba:	1c53      	adds	r3, r2, #1
   3b7bc:	60c3      	str	r3, [r0, #12]
   3b7be:	7851      	ldrb	r1, [r2, #1]
   3b7c0:	295f      	cmp	r1, #95	@ 0x5f
   3b7c2:	4604      	mov	r4, r0
   3b7c4:	d04a      	beq.n	3b85c <d_expr_primary+0xac>
   3b7c6:	295a      	cmp	r1, #90	@ 0x5a
   3b7c8:	d113      	bne.n	3b7f2 <d_expr_primary+0x42>
   3b7ca:	1c5a      	adds	r2, r3, #1
   3b7cc:	60e2      	str	r2, [r4, #12]
   3b7ce:	785b      	ldrb	r3, [r3, #1]
   3b7d0:	2b47      	cmp	r3, #71	@ 0x47
   3b7d2:	d03c      	beq.n	3b84e <d_expr_primary+0x9e>
   3b7d4:	2b54      	cmp	r3, #84	@ 0x54
   3b7d6:	d03a      	beq.n	3b84e <d_expr_primary+0x9e>
   3b7d8:	2100      	movs	r1, #0
   3b7da:	4620      	mov	r0, r4
   3b7dc:	f7ff fd18 	bl	3b210 <d_encoding.part.0>
   3b7e0:	68e3      	ldr	r3, [r4, #12]
   3b7e2:	781a      	ldrb	r2, [r3, #0]
   3b7e4:	4606      	mov	r6, r0
   3b7e6:	2a45      	cmp	r2, #69	@ 0x45
   3b7e8:	d11a      	bne.n	3b820 <d_expr_primary+0x70>
   3b7ea:	3301      	adds	r3, #1
   3b7ec:	60e3      	str	r3, [r4, #12]
   3b7ee:	4630      	mov	r0, r6
   3b7f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3b7f2:	f7fe f8ef 	bl	399d4 <d_type>
   3b7f6:	4606      	mov	r6, r0
   3b7f8:	b190      	cbz	r0, 3b820 <d_expr_primary+0x70>
   3b7fa:	7803      	ldrb	r3, [r0, #0]
   3b7fc:	68e7      	ldr	r7, [r4, #12]
   3b7fe:	2b27      	cmp	r3, #39	@ 0x27
   3b800:	d011      	beq.n	3b826 <d_expr_primary+0x76>
   3b802:	783d      	ldrb	r5, [r7, #0]
   3b804:	2d6e      	cmp	r5, #110	@ 0x6e
   3b806:	d052      	beq.n	3b8ae <d_expr_primary+0xfe>
   3b808:	213d      	movs	r1, #61	@ 0x3d
   3b80a:	2d45      	cmp	r5, #69	@ 0x45
   3b80c:	d055      	beq.n	3b8ba <d_expr_primary+0x10a>
   3b80e:	463b      	mov	r3, r7
   3b810:	e003      	b.n	3b81a <d_expr_primary+0x6a>
   3b812:	60e3      	str	r3, [r4, #12]
   3b814:	781d      	ldrb	r5, [r3, #0]
   3b816:	2d45      	cmp	r5, #69	@ 0x45
   3b818:	d027      	beq.n	3b86a <d_expr_primary+0xba>
   3b81a:	3301      	adds	r3, #1
   3b81c:	2d00      	cmp	r5, #0
   3b81e:	d1f8      	bne.n	3b812 <d_expr_primary+0x62>
   3b820:	2600      	movs	r6, #0
   3b822:	4630      	mov	r0, r6
   3b824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3b826:	68c3      	ldr	r3, [r0, #12]
   3b828:	7c1a      	ldrb	r2, [r3, #16]
   3b82a:	b11a      	cbz	r2, 3b834 <d_expr_primary+0x84>
   3b82c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
   3b82e:	6859      	ldr	r1, [r3, #4]
   3b830:	1a52      	subs	r2, r2, r1
   3b832:	62e2      	str	r2, [r4, #44]	@ 0x2c
   3b834:	4924      	ldr	r1, [pc, #144]	@ (3b8c8 <d_expr_primary+0x118>)
   3b836:	6818      	ldr	r0, [r3, #0]
   3b838:	f7dc fce2 	bl	18200 <strcmp>
   3b83c:	783d      	ldrb	r5, [r7, #0]
   3b83e:	2800      	cmp	r0, #0
   3b840:	d1e0      	bne.n	3b804 <d_expr_primary+0x54>
   3b842:	2d45      	cmp	r5, #69	@ 0x45
   3b844:	d03d      	beq.n	3b8c2 <d_expr_primary+0x112>
   3b846:	2d6e      	cmp	r5, #110	@ 0x6e
   3b848:	d031      	beq.n	3b8ae <d_expr_primary+0xfe>
   3b84a:	213d      	movs	r1, #61	@ 0x3d
   3b84c:	e7df      	b.n	3b80e <d_expr_primary+0x5e>
   3b84e:	4620      	mov	r0, r4
   3b850:	f7ff fd5e 	bl	3b310 <d_special_name>
   3b854:	68e3      	ldr	r3, [r4, #12]
   3b856:	4606      	mov	r6, r0
   3b858:	781a      	ldrb	r2, [r3, #0]
   3b85a:	e7c4      	b.n	3b7e6 <d_expr_primary+0x36>
   3b85c:	1c93      	adds	r3, r2, #2
   3b85e:	60c3      	str	r3, [r0, #12]
   3b860:	7892      	ldrb	r2, [r2, #2]
   3b862:	2a5a      	cmp	r2, #90	@ 0x5a
   3b864:	d0b1      	beq.n	3b7ca <d_expr_primary+0x1a>
   3b866:	2600      	movs	r6, #0
   3b868:	e7bd      	b.n	3b7e6 <d_expr_primary+0x36>
   3b86a:	1bdd      	subs	r5, r3, r7
   3b86c:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
   3b870:	429a      	cmp	r2, r3
   3b872:	da24      	bge.n	3b8be <d_expr_primary+0x10e>
   3b874:	f8d4 e010 	ldr.w	lr, [r4, #16]
   3b878:	eb02 0082 	add.w	r0, r2, r2, lsl #2
   3b87c:	eb0e 0380 	add.w	r3, lr, r0, lsl #2
   3b880:	ea4f 0c80 	mov.w	ip, r0, lsl #2
   3b884:	2000      	movs	r0, #0
   3b886:	3201      	adds	r2, #1
   3b888:	4285      	cmp	r5, r0
   3b88a:	e9c3 0001 	strd	r0, r0, [r3, #4]
   3b88e:	6162      	str	r2, [r4, #20]
   3b890:	dd15      	ble.n	3b8be <d_expr_primary+0x10e>
   3b892:	e9c3 0001 	strd	r0, r0, [r3, #4]
   3b896:	f80e 000c 	strb.w	r0, [lr, ip]
   3b89a:	e9c3 7503 	strd	r7, r5, [r3, #12]
   3b89e:	4632      	mov	r2, r6
   3b8a0:	4620      	mov	r0, r4
   3b8a2:	f7fd fc07 	bl	390b4 <d_make_comp>
   3b8a6:	68e3      	ldr	r3, [r4, #12]
   3b8a8:	4606      	mov	r6, r0
   3b8aa:	781a      	ldrb	r2, [r3, #0]
   3b8ac:	e79b      	b.n	3b7e6 <d_expr_primary+0x36>
   3b8ae:	1c7b      	adds	r3, r7, #1
   3b8b0:	60e3      	str	r3, [r4, #12]
   3b8b2:	787d      	ldrb	r5, [r7, #1]
   3b8b4:	213e      	movs	r1, #62	@ 0x3e
   3b8b6:	461f      	mov	r7, r3
   3b8b8:	e7a7      	b.n	3b80a <d_expr_primary+0x5a>
   3b8ba:	2500      	movs	r5, #0
   3b8bc:	e7d6      	b.n	3b86c <d_expr_primary+0xbc>
   3b8be:	2300      	movs	r3, #0
   3b8c0:	e7ed      	b.n	3b89e <d_expr_primary+0xee>
   3b8c2:	3701      	adds	r7, #1
   3b8c4:	60e7      	str	r7, [r4, #12]
   3b8c6:	e7ac      	b.n	3b822 <d_expr_primary+0x72>
   3b8c8:	00044248 	.word	0x00044248

0003b8cc <d_template_arg>:
   3b8cc:	b538      	push	{r3, r4, r5, lr}
   3b8ce:	68c3      	ldr	r3, [r0, #12]
   3b8d0:	781a      	ldrb	r2, [r3, #0]
   3b8d2:	2a4c      	cmp	r2, #76	@ 0x4c
   3b8d4:	d01b      	beq.n	3b90e <d_template_arg+0x42>
   3b8d6:	4604      	mov	r4, r0
   3b8d8:	d808      	bhi.n	3b8ec <d_template_arg+0x20>
   3b8da:	3a49      	subs	r2, #73	@ 0x49
   3b8dc:	2a01      	cmp	r2, #1
   3b8de:	d81a      	bhi.n	3b916 <d_template_arg+0x4a>
   3b8e0:	3301      	adds	r3, #1
   3b8e2:	60c3      	str	r3, [r0, #12]
   3b8e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3b8e8:	f000 b81c 	b.w	3b924 <d_template_args_1>
   3b8ec:	2a58      	cmp	r2, #88	@ 0x58
   3b8ee:	d112      	bne.n	3b916 <d_template_arg+0x4a>
   3b8f0:	3301      	adds	r3, #1
   3b8f2:	2201      	movs	r2, #1
   3b8f4:	6b05      	ldr	r5, [r0, #48]	@ 0x30
   3b8f6:	60c3      	str	r3, [r0, #12]
   3b8f8:	6302      	str	r2, [r0, #48]	@ 0x30
   3b8fa:	f7fe ffb1 	bl	3a860 <d_expression_1>
   3b8fe:	68e3      	ldr	r3, [r4, #12]
   3b900:	6325      	str	r5, [r4, #48]	@ 0x30
   3b902:	781a      	ldrb	r2, [r3, #0]
   3b904:	2a45      	cmp	r2, #69	@ 0x45
   3b906:	d10b      	bne.n	3b920 <d_template_arg+0x54>
   3b908:	3301      	adds	r3, #1
   3b90a:	60e3      	str	r3, [r4, #12]
   3b90c:	bd38      	pop	{r3, r4, r5, pc}
   3b90e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3b912:	f7ff bf4d 	b.w	3b7b0 <d_expr_primary>
   3b916:	4620      	mov	r0, r4
   3b918:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3b91c:	f7fe b85a 	b.w	399d4 <d_type>
   3b920:	2000      	movs	r0, #0
   3b922:	bd38      	pop	{r3, r4, r5, pc}

0003b924 <d_template_args_1>:
   3b924:	b570      	push	{r4, r5, r6, lr}
   3b926:	68c3      	ldr	r3, [r0, #12]
   3b928:	6a86      	ldr	r6, [r0, #40]	@ 0x28
   3b92a:	781a      	ldrb	r2, [r3, #0]
   3b92c:	2a45      	cmp	r2, #69	@ 0x45
   3b92e:	b082      	sub	sp, #8
   3b930:	4604      	mov	r4, r0
   3b932:	d01f      	beq.n	3b974 <d_template_args_1+0x50>
   3b934:	2300      	movs	r3, #0
   3b936:	9301      	str	r3, [sp, #4]
   3b938:	ad01      	add	r5, sp, #4
   3b93a:	e009      	b.n	3b950 <d_template_args_1+0x2c>
   3b93c:	f7fd fbba 	bl	390b4 <d_make_comp>
   3b940:	6028      	str	r0, [r5, #0]
   3b942:	f100 0510 	add.w	r5, r0, #16
   3b946:	b160      	cbz	r0, 3b962 <d_template_args_1+0x3e>
   3b948:	68e3      	ldr	r3, [r4, #12]
   3b94a:	781a      	ldrb	r2, [r3, #0]
   3b94c:	2a45      	cmp	r2, #69	@ 0x45
   3b94e:	d00b      	beq.n	3b968 <d_template_args_1+0x44>
   3b950:	4620      	mov	r0, r4
   3b952:	f7ff ffbb 	bl	3b8cc <d_template_arg>
   3b956:	4602      	mov	r2, r0
   3b958:	2300      	movs	r3, #0
   3b95a:	212f      	movs	r1, #47	@ 0x2f
   3b95c:	4620      	mov	r0, r4
   3b95e:	2a00      	cmp	r2, #0
   3b960:	d1ec      	bne.n	3b93c <d_template_args_1+0x18>
   3b962:	2000      	movs	r0, #0
   3b964:	b002      	add	sp, #8
   3b966:	bd70      	pop	{r4, r5, r6, pc}
   3b968:	9801      	ldr	r0, [sp, #4]
   3b96a:	62a6      	str	r6, [r4, #40]	@ 0x28
   3b96c:	3301      	adds	r3, #1
   3b96e:	60e3      	str	r3, [r4, #12]
   3b970:	b002      	add	sp, #8
   3b972:	bd70      	pop	{r4, r5, r6, pc}
   3b974:	1c5a      	adds	r2, r3, #1
   3b976:	2300      	movs	r3, #0
   3b978:	60c2      	str	r2, [r0, #12]
   3b97a:	212f      	movs	r1, #47	@ 0x2f
   3b97c:	461a      	mov	r2, r3
   3b97e:	b002      	add	sp, #8
   3b980:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3b984:	f7fd bb96 	b.w	390b4 <d_make_comp>

0003b988 <d_prefix>:
   3b988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3b98a:	68c5      	ldr	r5, [r0, #12]
   3b98c:	4606      	mov	r6, r0
   3b98e:	460f      	mov	r7, r1
   3b990:	2400      	movs	r4, #0
   3b992:	782b      	ldrb	r3, [r5, #0]
   3b994:	2b44      	cmp	r3, #68	@ 0x44
   3b996:	d00a      	beq.n	3b9ae <d_prefix+0x26>
   3b998:	3b49      	subs	r3, #73	@ 0x49
   3b99a:	2b0b      	cmp	r3, #11
   3b99c:	d80c      	bhi.n	3b9b8 <d_prefix+0x30>
   3b99e:	e8df f003 	tbb	[pc, r3]
   3b9a2:	0b3a      	.short	0x0b3a
   3b9a4:	0b370b0b 	.word	0x0b370b0b
   3b9a8:	0b0b0b0b 	.word	0x0b0b0b0b
   3b9ac:	2329      	.short	0x2329
   3b9ae:	786b      	ldrb	r3, [r5, #1]
   3b9b0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
   3b9b4:	2b54      	cmp	r3, #84	@ 0x54
   3b9b6:	d03d      	beq.n	3ba34 <d_prefix+0xac>
   3b9b8:	2200      	movs	r2, #0
   3b9ba:	4621      	mov	r1, r4
   3b9bc:	4630      	mov	r0, r6
   3b9be:	f7fe fd81 	bl	3a4c4 <d_unqualified_name>
   3b9c2:	4604      	mov	r4, r0
   3b9c4:	2c00      	cmp	r4, #0
   3b9c6:	d03b      	beq.n	3ba40 <d_prefix+0xb8>
   3b9c8:	68f5      	ldr	r5, [r6, #12]
   3b9ca:	782b      	ldrb	r3, [r5, #0]
   3b9cc:	2b45      	cmp	r3, #69	@ 0x45
   3b9ce:	d038      	beq.n	3ba42 <d_prefix+0xba>
   3b9d0:	2f00      	cmp	r7, #0
   3b9d2:	d0de      	beq.n	3b992 <d_prefix+0xa>
   3b9d4:	e9d6 3208 	ldrd	r3, r2, [r6, #32]
   3b9d8:	4293      	cmp	r3, r2
   3b9da:	da31      	bge.n	3ba40 <d_prefix+0xb8>
   3b9dc:	69f2      	ldr	r2, [r6, #28]
   3b9de:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
   3b9e2:	3301      	adds	r3, #1
   3b9e4:	6233      	str	r3, [r6, #32]
   3b9e6:	e7d4      	b.n	3b992 <d_prefix+0xa>
   3b9e8:	bb54      	cbnz	r4, 3ba40 <d_prefix+0xb8>
   3b9ea:	4630      	mov	r0, r6
   3b9ec:	f7fd fe28 	bl	39640 <d_template_param>
   3b9f0:	4604      	mov	r4, r0
   3b9f2:	e7e7      	b.n	3b9c4 <d_prefix+0x3c>
   3b9f4:	2101      	movs	r1, #1
   3b9f6:	4630      	mov	r0, r6
   3b9f8:	f7fd fefa 	bl	397f0 <d_substitution>
   3b9fc:	4602      	mov	r2, r0
   3b9fe:	b1f8      	cbz	r0, 3ba40 <d_prefix+0xb8>
   3ba00:	7803      	ldrb	r3, [r0, #0]
   3ba02:	3b53      	subs	r3, #83	@ 0x53
   3ba04:	2b01      	cmp	r3, #1
   3ba06:	d9d8      	bls.n	3b9ba <d_prefix+0x32>
   3ba08:	b9d4      	cbnz	r4, 3ba40 <d_prefix+0xb8>
   3ba0a:	68f5      	ldr	r5, [r6, #12]
   3ba0c:	4604      	mov	r4, r0
   3ba0e:	e7c0      	b.n	3b992 <d_prefix+0xa>
   3ba10:	3501      	adds	r5, #1
   3ba12:	60f5      	str	r5, [r6, #12]
   3ba14:	e7bd      	b.n	3b992 <d_prefix+0xa>
   3ba16:	b19c      	cbz	r4, 3ba40 <d_prefix+0xb8>
   3ba18:	3501      	adds	r5, #1
   3ba1a:	60f5      	str	r5, [r6, #12]
   3ba1c:	4630      	mov	r0, r6
   3ba1e:	f7ff ff81 	bl	3b924 <d_template_args_1>
   3ba22:	4603      	mov	r3, r0
   3ba24:	b160      	cbz	r0, 3ba40 <d_prefix+0xb8>
   3ba26:	4622      	mov	r2, r4
   3ba28:	2104      	movs	r1, #4
   3ba2a:	4630      	mov	r0, r6
   3ba2c:	f7fd fb42 	bl	390b4 <d_make_comp>
   3ba30:	4604      	mov	r4, r0
   3ba32:	e7c7      	b.n	3b9c4 <d_prefix+0x3c>
   3ba34:	b924      	cbnz	r4, 3ba40 <d_prefix+0xb8>
   3ba36:	4630      	mov	r0, r6
   3ba38:	f7fd ffcc 	bl	399d4 <d_type>
   3ba3c:	4604      	mov	r4, r0
   3ba3e:	e7c1      	b.n	3b9c4 <d_prefix+0x3c>
   3ba40:	2400      	movs	r4, #0
   3ba42:	4620      	mov	r0, r4
   3ba44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3ba46:	bf00      	nop

0003ba48 <d_print_comp_inner>:
   3ba48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ba4c:	4604      	mov	r4, r0
   3ba4e:	b097      	sub	sp, #92	@ 0x5c
   3ba50:	2a00      	cmp	r2, #0
   3ba52:	f000 8083 	beq.w	3bb5c <d_print_comp_inner+0x114>
   3ba56:	f8d0 7118 	ldr.w	r7, [r0, #280]	@ 0x118
   3ba5a:	2f00      	cmp	r7, #0
   3ba5c:	f040 8081 	bne.w	3bb62 <d_print_comp_inner+0x11a>
   3ba60:	7816      	ldrb	r6, [r2, #0]
   3ba62:	4693      	mov	fp, r2
   3ba64:	2e5c      	cmp	r6, #92	@ 0x5c
   3ba66:	d879      	bhi.n	3bb5c <d_print_comp_inner+0x114>
   3ba68:	e8df f016 	tbh	[pc, r6, lsl #1]
   3ba6c:	01740a2e 	.word	0x01740a2e
   3ba70:	05f70174 	.word	0x05f70174
   3ba74:	005d05bc 	.word	0x005d05bc
   3ba78:	0107058f 	.word	0x0107058f
   3ba7c:	0247087c 	.word	0x0247087c
   3ba80:	02df0221 	.word	0x02df0221
   3ba84:	029302b9 	.word	0x029302b9
   3ba88:	0407026d 	.word	0x0407026d
   3ba8c:	03bb03e1 	.word	0x03bb03e1
   3ba90:	038e0395 	.word	0x038e0395
   3ba94:	03420368 	.word	0x03420368
   3ba98:	01fb031c 	.word	0x01fb031c
   3ba9c:	007e01d0 	.word	0x007e01d0
   3baa0:	007e007e 	.word	0x007e007e
   3baa4:	009c009c 	.word	0x009c009c
   3baa8:	009c009c 	.word	0x009c009c
   3baac:	009c009c 	.word	0x009c009c
   3bab0:	0127009c 	.word	0x0127009c
   3bab4:	009c0127 	.word	0x009c0127
   3bab8:	0a02009c 	.word	0x0a02009c
   3babc:	05950093 	.word	0x05950093
   3bac0:	00ba06a1 	.word	0x00ba06a1
   3bac4:	00ba0078 	.word	0x00ba0078
   3bac8:	01490149 	.word	0x01490149
   3bacc:	067c0569 	.word	0x067c0569
   3bad0:	078a0649 	.word	0x078a0649
   3bad4:	07430078 	.word	0x07430078
   3bad8:	0726073b 	.word	0x0726073b
   3badc:	007807ec 	.word	0x007807ec
   3bae0:	007807b0 	.word	0x007807b0
   3bae4:	00d20078 	.word	0x00d20078
   3bae8:	084f00d2 	.word	0x084f00d2
   3baec:	087308b6 	.word	0x087308b6
   3baf0:	09d208dc 	.word	0x09d208dc
   3baf4:	09140764 	.word	0x09140764
   3baf8:	018401aa 	.word	0x018401aa
   3bafc:	07000078 	.word	0x07000078
   3bb00:	093a0960 	.word	0x093a0960
   3bb04:	089a0986 	.word	0x089a0986
   3bb08:	08ea009c 	.word	0x08ea009c
   3bb0c:	009c009c 	.word	0x009c009c
   3bb10:	010a042d 	.word	0x010a042d
   3bb14:	048e010a 	.word	0x048e010a
   3bb18:	050e0468 	.word	0x050e0468
   3bb1c:	009304e8 	.word	0x009304e8
   3bb20:	049f04aa 	.word	0x049f04aa
   3bb24:	053c      	.short	0x053c
   3bb26:	f8d2 800c 	ldr.w	r8, [r2, #12]
   3bb2a:	f8d0 3120 	ldr.w	r3, [r0, #288]	@ 0x120
   3bb2e:	f108 0201 	add.w	r2, r8, #1
   3bb32:	4293      	cmp	r3, r2
   3bb34:	f341 8470 	ble.w	3d418 <d_print_comp_inner+0x19d0>
   3bb38:	f8d0 3110 	ldr.w	r3, [r0, #272]	@ 0x110
   3bb3c:	685b      	ldr	r3, [r3, #4]
   3bb3e:	68db      	ldr	r3, [r3, #12]
   3bb40:	4641      	mov	r1, r8
   3bb42:	b15b      	cbz	r3, 3bb5c <d_print_comp_inner+0x114>
   3bb44:	f1b8 0f00 	cmp.w	r8, #0
   3bb48:	d104      	bne.n	3bb54 <d_print_comp_inner+0x10c>
   3bb4a:	f001 bcea 	b.w	3d522 <d_print_comp_inner+0x1ada>
   3bb4e:	2900      	cmp	r1, #0
   3bb50:	f001 84e7 	beq.w	3d522 <d_print_comp_inner+0x1ada>
   3bb54:	691b      	ldr	r3, [r3, #16]
   3bb56:	3901      	subs	r1, #1
   3bb58:	2b00      	cmp	r3, #0
   3bb5a:	d1f8      	bne.n	3bb4e <d_print_comp_inner+0x106>
   3bb5c:	2301      	movs	r3, #1
   3bb5e:	f8c4 3118 	str.w	r3, [r4, #280]	@ 0x118
   3bb62:	b017      	add	sp, #92	@ 0x5c
   3bb64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bb68:	f8d0 1114 	ldr.w	r1, [r0, #276]	@ 0x114
   3bb6c:	468c      	mov	ip, r1
   3bb6e:	2900      	cmp	r1, #0
   3bb70:	f002 81a6 	beq.w	3dec0 <d_print_comp_inner+0x2478>
   3bb74:	460b      	mov	r3, r1
   3bb76:	e001      	b.n	3bb7c <d_print_comp_inner+0x134>
   3bb78:	681b      	ldr	r3, [r3, #0]
   3bb7a:	b1ab      	cbz	r3, 3bba8 <d_print_comp_inner+0x160>
   3bb7c:	689a      	ldr	r2, [r3, #8]
   3bb7e:	2a00      	cmp	r2, #0
   3bb80:	d1fa      	bne.n	3bb78 <d_print_comp_inner+0x130>
   3bb82:	685a      	ldr	r2, [r3, #4]
   3bb84:	7812      	ldrb	r2, [r2, #0]
   3bb86:	f1a2 0019 	sub.w	r0, r2, #25
   3bb8a:	2802      	cmp	r0, #2
   3bb8c:	d80c      	bhi.n	3bba8 <d_print_comp_inner+0x160>
   3bb8e:	4296      	cmp	r6, r2
   3bb90:	d1f2      	bne.n	3bb78 <d_print_comp_inner+0x130>
   3bb92:	f8db 200c 	ldr.w	r2, [fp, #12]
   3bb96:	2111      	movs	r1, #17
   3bb98:	4620      	mov	r0, r4
   3bb9a:	b017      	add	sp, #92	@ 0x5c
   3bb9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3bba0:	f002 ba20 	b.w	3dfe4 <d_print_comp>
   3bba4:	f8d0 1114 	ldr.w	r1, [r0, #276]	@ 0x114
   3bba8:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
   3bbac:	9309      	str	r3, [sp, #36]	@ 0x24
   3bbae:	2300      	movs	r3, #0
   3bbb0:	e9cd b307 	strd	fp, r3, [sp, #28]
   3bbb4:	aa06      	add	r2, sp, #24
   3bbb6:	f8c4 2114 	str.w	r2, [r4, #276]	@ 0x114
   3bbba:	9106      	str	r1, [sp, #24]
   3bbbc:	f8db 200c 	ldr.w	r2, [fp, #12]
   3bbc0:	2111      	movs	r1, #17
   3bbc2:	4620      	mov	r0, r4
   3bbc4:	f002 fa0e 	bl	3dfe4 <d_print_comp>
   3bbc8:	9b08      	ldr	r3, [sp, #32]
   3bbca:	2b00      	cmp	r3, #0
   3bbcc:	f001 83f1 	beq.w	3d3b2 <d_print_comp_inner+0x196a>
   3bbd0:	9b06      	ldr	r3, [sp, #24]
   3bbd2:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
   3bbd6:	2f00      	cmp	r7, #0
   3bbd8:	d0c3      	beq.n	3bb62 <d_print_comp_inner+0x11a>
   3bbda:	f8c4 8110 	str.w	r8, [r4, #272]	@ 0x110
   3bbde:	e7c0      	b.n	3bb62 <d_print_comp_inner+0x11a>
   3bbe0:	e9d0 3244 	ldrd	r3, r2, [r0, #272]	@ 0x110
   3bbe4:	a906      	add	r1, sp, #24
   3bbe6:	2000      	movs	r0, #0
   3bbe8:	e9cd 2b06 	strd	r2, fp, [sp, #24]
   3bbec:	9008      	str	r0, [sp, #32]
   3bbee:	f8c4 1114 	str.w	r1, [r4, #276]	@ 0x114
   3bbf2:	f8db 2010 	ldr.w	r2, [fp, #16]
   3bbf6:	9309      	str	r3, [sp, #36]	@ 0x24
   3bbf8:	2111      	movs	r1, #17
   3bbfa:	4620      	mov	r0, r4
   3bbfc:	f002 f9f2 	bl	3dfe4 <d_print_comp>
   3bc00:	9b08      	ldr	r3, [sp, #32]
   3bc02:	2b00      	cmp	r3, #0
   3bc04:	f001 855e 	beq.w	3d6c4 <d_print_comp_inner+0x1c7c>
   3bc08:	9b06      	ldr	r3, [sp, #24]
   3bc0a:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
   3bc0e:	e7a8      	b.n	3bb62 <d_print_comp_inner+0x11a>
   3bc10:	68d2      	ldr	r2, [r2, #12]
   3bc12:	7813      	ldrb	r3, [r2, #0]
   3bc14:	2b27      	cmp	r3, #39	@ 0x27
   3bc16:	f041 845b 	bne.w	3d4d0 <d_print_comp_inner+0x1a88>
   3bc1a:	68d3      	ldr	r3, [r2, #12]
   3bc1c:	7c1f      	ldrb	r7, [r3, #16]
   3bc1e:	2f06      	cmp	r7, #6
   3bc20:	f201 859e 	bhi.w	3d760 <d_print_comp_inner+0x1d18>
   3bc24:	b12f      	cbz	r7, 3bc32 <d_print_comp_inner+0x1ea>
   3bc26:	f8db 3010 	ldr.w	r3, [fp, #16]
   3bc2a:	781b      	ldrb	r3, [r3, #0]
   3bc2c:	2b00      	cmp	r3, #0
   3bc2e:	f002 80ed 	beq.w	3de0c <d_print_comp_inner+0x23c4>
   3bc32:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3bc36:	29ff      	cmp	r1, #255	@ 0xff
   3bc38:	f001 8736 	beq.w	3daa8 <d_print_comp_inner+0x2060>
   3bc3c:	1c4b      	adds	r3, r1, #1
   3bc3e:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
   3bc42:	2328      	movs	r3, #40	@ 0x28
   3bc44:	5463      	strb	r3, [r4, r1]
   3bc46:	4620      	mov	r0, r4
   3bc48:	2111      	movs	r1, #17
   3bc4a:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3bc4e:	f002 f9c9 	bl	3dfe4 <d_print_comp>
   3bc52:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3bc56:	29ff      	cmp	r1, #255	@ 0xff
   3bc58:	f001 8716 	beq.w	3da88 <d_print_comp_inner+0x2040>
   3bc5c:	1c4b      	adds	r3, r1, #1
   3bc5e:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
   3bc62:	2329      	movs	r3, #41	@ 0x29
   3bc64:	5463      	strb	r3, [r4, r1]
   3bc66:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3bc6a:	f89b 3000 	ldrb.w	r3, [fp]
   3bc6e:	2b3e      	cmp	r3, #62	@ 0x3e
   3bc70:	f001 86fc 	beq.w	3da6c <d_print_comp_inner+0x2024>
   3bc74:	2f08      	cmp	r7, #8
   3bc76:	f001 86ec 	beq.w	3da52 <d_print_comp_inner+0x200a>
   3bc7a:	f8db 2010 	ldr.w	r2, [fp, #16]
   3bc7e:	e78a      	b.n	3bb96 <d_print_comp_inner+0x14e>
   3bc80:	68d2      	ldr	r2, [r2, #12]
   3bc82:	2a00      	cmp	r2, #0
   3bc84:	f001 8427 	beq.w	3d4d6 <d_print_comp_inner+0x1a8e>
   3bc88:	2111      	movs	r1, #17
   3bc8a:	f002 f9ab 	bl	3dfe4 <d_print_comp>
   3bc8e:	f89b 3000 	ldrb.w	r3, [fp]
   3bc92:	2b54      	cmp	r3, #84	@ 0x54
   3bc94:	f001 8422 	beq.w	3d4dc <d_print_comp_inner+0x1a94>
   3bc98:	f8db 300c 	ldr.w	r3, [fp, #12]
   3bc9c:	2b00      	cmp	r3, #0
   3bc9e:	d0ec      	beq.n	3bc7a <d_print_comp_inner+0x232>
   3bca0:	262e      	movs	r6, #46	@ 0x2e
   3bca2:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3bca6:	29ff      	cmp	r1, #255	@ 0xff
   3bca8:	f001 8770 	beq.w	3db8c <d_print_comp_inner+0x2144>
   3bcac:	1c4b      	adds	r3, r1, #1
   3bcae:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
   3bcb2:	5466      	strb	r6, [r4, r1]
   3bcb4:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3bcb8:	e7df      	b.n	3bc7a <d_print_comp_inner+0x232>
   3bcba:	68d2      	ldr	r2, [r2, #12]
   3bcbc:	f8d0 9120 	ldr.w	r9, [r0, #288]	@ 0x120
   3bcc0:	7813      	ldrb	r3, [r2, #0]
   3bcc2:	f1b9 0f00 	cmp.w	r9, #0
   3bcc6:	d103      	bne.n	3bcd0 <d_print_comp_inner+0x288>
   3bcc8:	2b05      	cmp	r3, #5
   3bcca:	f001 8725 	beq.w	3db18 <d_print_comp_inner+0x20d0>
   3bcce:	464f      	mov	r7, r9
   3bcd0:	4610      	mov	r0, r2
   3bcd2:	2b23      	cmp	r3, #35	@ 0x23
   3bcd4:	f001 84fd 	beq.w	3d6d2 <d_print_comp_inner+0x1c8a>
   3bcd8:	429e      	cmp	r6, r3
   3bcda:	f8d4 c114 	ldr.w	ip, [r4, #276]	@ 0x114
   3bcde:	f001 85c0 	beq.w	3d862 <d_print_comp_inner+0x1e1a>
   3bce2:	2b24      	cmp	r3, #36	@ 0x24
   3bce4:	f001 8186 	beq.w	3cff4 <d_print_comp_inner+0x15ac>
   3bce8:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
   3bcec:	9309      	str	r3, [sp, #36]	@ 0x24
   3bcee:	ab06      	add	r3, sp, #24
   3bcf0:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
   3bcf4:	2300      	movs	r3, #0
   3bcf6:	e9cd cb06 	strd	ip, fp, [sp, #24]
   3bcfa:	9308      	str	r3, [sp, #32]
   3bcfc:	e760      	b.n	3bbc0 <d_print_comp_inner+0x178>
   3bcfe:	68d2      	ldr	r2, [r2, #12]
   3bd00:	b112      	cbz	r2, 3bd08 <d_print_comp_inner+0x2c0>
   3bd02:	2111      	movs	r1, #17
   3bd04:	f002 f96e 	bl	3dfe4 <d_print_comp>
   3bd08:	f8db 3010 	ldr.w	r3, [fp, #16]
   3bd0c:	2b00      	cmp	r3, #0
   3bd0e:	f43f af28 	beq.w	3bb62 <d_print_comp_inner+0x11a>
   3bd12:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3bd16:	29fd      	cmp	r1, #253	@ 0xfd
   3bd18:	f201 8591 	bhi.w	3d83e <d_print_comp_inner+0x1df6>
   3bd1c:	49d6      	ldr	r1, [pc, #856]	@ (3c078 <d_print_comp_inner+0x630>)
   3bd1e:	4620      	mov	r0, r4
   3bd20:	f7fd fc5a 	bl	395d8 <d_append_string>
   3bd24:	f8db 2010 	ldr.w	r2, [fp, #16]
   3bd28:	f8d4 5128 	ldr.w	r5, [r4, #296]	@ 0x128
   3bd2c:	f8d4 6100 	ldr.w	r6, [r4, #256]	@ 0x100
   3bd30:	2111      	movs	r1, #17
   3bd32:	4620      	mov	r0, r4
   3bd34:	f002 f956 	bl	3dfe4 <d_print_comp>
   3bd38:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3bd3c:	42ab      	cmp	r3, r5
   3bd3e:	f47f af10 	bne.w	3bb62 <d_print_comp_inner+0x11a>
   3bd42:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   3bd46:	42b3      	cmp	r3, r6
   3bd48:	f47f af0b 	bne.w	3bb62 <d_print_comp_inner+0x11a>
   3bd4c:	3b02      	subs	r3, #2
   3bd4e:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
   3bd52:	e706      	b.n	3bb62 <d_print_comp_inner+0x11a>
   3bd54:	68d2      	ldr	r2, [r2, #12]
   3bd56:	2111      	movs	r1, #17
   3bd58:	f002 f944 	bl	3dfe4 <d_print_comp>
   3bd5c:	49c7      	ldr	r1, [pc, #796]	@ (3c07c <d_print_comp_inner+0x634>)
   3bd5e:	4620      	mov	r0, r4
   3bd60:	f7fd fc3a 	bl	395d8 <d_append_string>
   3bd64:	f8db 7010 	ldr.w	r7, [fp, #16]
   3bd68:	783b      	ldrb	r3, [r7, #0]
   3bd6a:	2b48      	cmp	r3, #72	@ 0x48
   3bd6c:	f001 80e8 	beq.w	3cf40 <d_print_comp_inner+0x14f8>
   3bd70:	463a      	mov	r2, r7
   3bd72:	e710      	b.n	3bb96 <d_print_comp_inner+0x14e>
   3bd74:	4ec2      	ldr	r6, [pc, #776]	@ (3c080 <d_print_comp_inner+0x638>)
   3bd76:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3bd7a:	f106 0907 	add.w	r9, r6, #7
   3bd7e:	f04f 0800 	mov.w	r8, #0
   3bd82:	e009      	b.n	3bd98 <d_print_comp_inner+0x350>
   3bd84:	460b      	mov	r3, r1
   3bd86:	3101      	adds	r1, #1
   3bd88:	454e      	cmp	r6, r9
   3bd8a:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3bd8e:	54e5      	strb	r5, [r4, r3]
   3bd90:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   3bd94:	f001 81eb 	beq.w	3d16e <d_print_comp_inner+0x1726>
   3bd98:	29ff      	cmp	r1, #255	@ 0xff
   3bd9a:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   3bd9e:	d1f1      	bne.n	3bd84 <d_print_comp_inner+0x33c>
   3bda0:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3bda4:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3bda8:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3bdac:	4620      	mov	r0, r4
   3bdae:	4798      	blx	r3
   3bdb0:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3bdb4:	2101      	movs	r1, #1
   3bdb6:	440a      	add	r2, r1
   3bdb8:	2300      	movs	r3, #0
   3bdba:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3bdbe:	e7e3      	b.n	3bd88 <d_print_comp_inner+0x340>
   3bdc0:	4eb0      	ldr	r6, [pc, #704]	@ (3c084 <d_print_comp_inner+0x63c>)
   3bdc2:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3bdc6:	f106 091c 	add.w	r9, r6, #28
   3bdca:	f04f 0800 	mov.w	r8, #0
   3bdce:	e009      	b.n	3bde4 <d_print_comp_inner+0x39c>
   3bdd0:	460b      	mov	r3, r1
   3bdd2:	3101      	adds	r1, #1
   3bdd4:	454e      	cmp	r6, r9
   3bdd6:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3bdda:	54e5      	strb	r5, [r4, r3]
   3bddc:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   3bde0:	f43f aed7 	beq.w	3bb92 <d_print_comp_inner+0x14a>
   3bde4:	29ff      	cmp	r1, #255	@ 0xff
   3bde6:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   3bdea:	d1f1      	bne.n	3bdd0 <d_print_comp_inner+0x388>
   3bdec:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3bdf0:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3bdf4:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3bdf8:	4620      	mov	r0, r4
   3bdfa:	4798      	blx	r3
   3bdfc:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3be00:	2101      	movs	r1, #1
   3be02:	440a      	add	r2, r1
   3be04:	2300      	movs	r3, #0
   3be06:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3be0a:	e7e3      	b.n	3bdd4 <d_print_comp_inner+0x38c>
   3be0c:	e9d2 5303 	ldrd	r5, r3, [r2, #12]
   3be10:	2b00      	cmp	r3, #0
   3be12:	f43f aea6 	beq.w	3bb62 <d_print_comp_inner+0x11a>
   3be16:	442b      	add	r3, r5
   3be18:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3be1c:	3d01      	subs	r5, #1
   3be1e:	1e5f      	subs	r7, r3, #1
   3be20:	f04f 0800 	mov.w	r8, #0
   3be24:	e009      	b.n	3be3a <d_print_comp_inner+0x3f2>
   3be26:	460b      	mov	r3, r1
   3be28:	3101      	adds	r1, #1
   3be2a:	42af      	cmp	r7, r5
   3be2c:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3be30:	54e6      	strb	r6, [r4, r3]
   3be32:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3be36:	f43f ae94 	beq.w	3bb62 <d_print_comp_inner+0x11a>
   3be3a:	29ff      	cmp	r1, #255	@ 0xff
   3be3c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   3be40:	d1f1      	bne.n	3be26 <d_print_comp_inner+0x3de>
   3be42:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3be46:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3be4a:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3be4e:	4620      	mov	r0, r4
   3be50:	4798      	blx	r3
   3be52:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3be56:	2101      	movs	r1, #1
   3be58:	440a      	add	r2, r1
   3be5a:	2300      	movs	r3, #0
   3be5c:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3be60:	e7e3      	b.n	3be2a <d_print_comp_inner+0x3e2>
   3be62:	4e89      	ldr	r6, [pc, #548]	@ (3c088 <d_print_comp_inner+0x640>)
   3be64:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3be68:	f106 0911 	add.w	r9, r6, #17
   3be6c:	f04f 0800 	mov.w	r8, #0
   3be70:	e009      	b.n	3be86 <d_print_comp_inner+0x43e>
   3be72:	460b      	mov	r3, r1
   3be74:	3101      	adds	r1, #1
   3be76:	45b1      	cmp	r9, r6
   3be78:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3be7c:	54e5      	strb	r5, [r4, r3]
   3be7e:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   3be82:	f43f ae86 	beq.w	3bb92 <d_print_comp_inner+0x14a>
   3be86:	29ff      	cmp	r1, #255	@ 0xff
   3be88:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   3be8c:	d1f1      	bne.n	3be72 <d_print_comp_inner+0x42a>
   3be8e:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3be92:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3be96:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3be9a:	4620      	mov	r0, r4
   3be9c:	4798      	blx	r3
   3be9e:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3bea2:	2101      	movs	r1, #1
   3bea4:	440a      	add	r2, r1
   3bea6:	2300      	movs	r3, #0
   3bea8:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3beac:	e7e3      	b.n	3be76 <d_print_comp_inner+0x42e>
   3beae:	4e77      	ldr	r6, [pc, #476]	@ (3c08c <d_print_comp_inner+0x644>)
   3beb0:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3beb4:	f106 0908 	add.w	r9, r6, #8
   3beb8:	f04f 0800 	mov.w	r8, #0
   3bebc:	e009      	b.n	3bed2 <d_print_comp_inner+0x48a>
   3bebe:	460b      	mov	r3, r1
   3bec0:	3101      	adds	r1, #1
   3bec2:	45b1      	cmp	r9, r6
   3bec4:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3bec8:	54e5      	strb	r5, [r4, r3]
   3beca:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   3bece:	f43f ae60 	beq.w	3bb92 <d_print_comp_inner+0x14a>
   3bed2:	29ff      	cmp	r1, #255	@ 0xff
   3bed4:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   3bed8:	d1f1      	bne.n	3bebe <d_print_comp_inner+0x476>
   3beda:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3bede:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3bee2:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3bee6:	4620      	mov	r0, r4
   3bee8:	4798      	blx	r3
   3beea:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3beee:	2101      	movs	r1, #1
   3bef0:	440a      	add	r2, r1
   3bef2:	2300      	movs	r3, #0
   3bef4:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3bef8:	e7e3      	b.n	3bec2 <d_print_comp_inner+0x47a>
   3befa:	4e65      	ldr	r6, [pc, #404]	@ (3c090 <d_print_comp_inner+0x648>)
   3befc:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3bf00:	f106 090b 	add.w	r9, r6, #11
   3bf04:	f04f 0800 	mov.w	r8, #0
   3bf08:	e009      	b.n	3bf1e <d_print_comp_inner+0x4d6>
   3bf0a:	460b      	mov	r3, r1
   3bf0c:	3101      	adds	r1, #1
   3bf0e:	45b1      	cmp	r9, r6
   3bf10:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3bf14:	54e5      	strb	r5, [r4, r3]
   3bf16:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   3bf1a:	f43f ae3a 	beq.w	3bb92 <d_print_comp_inner+0x14a>
   3bf1e:	29ff      	cmp	r1, #255	@ 0xff
   3bf20:	f816 5b01 	ldrb.w	r5, [r6], #1
   3bf24:	d1f1      	bne.n	3bf0a <d_print_comp_inner+0x4c2>
   3bf26:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3bf2a:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3bf2e:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3bf32:	4620      	mov	r0, r4
   3bf34:	4798      	blx	r3
   3bf36:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3bf3a:	2101      	movs	r1, #1
   3bf3c:	440a      	add	r2, r1
   3bf3e:	2300      	movs	r3, #0
   3bf40:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3bf44:	e7e3      	b.n	3bf0e <d_print_comp_inner+0x4c6>
   3bf46:	4e53      	ldr	r6, [pc, #332]	@ (3c094 <d_print_comp_inner+0x64c>)
   3bf48:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3bf4c:	f106 0910 	add.w	r9, r6, #16
   3bf50:	f04f 0800 	mov.w	r8, #0
   3bf54:	e009      	b.n	3bf6a <d_print_comp_inner+0x522>
   3bf56:	460b      	mov	r3, r1
   3bf58:	3101      	adds	r1, #1
   3bf5a:	45b1      	cmp	r9, r6
   3bf5c:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3bf60:	54e5      	strb	r5, [r4, r3]
   3bf62:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   3bf66:	f43f ae14 	beq.w	3bb92 <d_print_comp_inner+0x14a>
   3bf6a:	29ff      	cmp	r1, #255	@ 0xff
   3bf6c:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   3bf70:	d1f1      	bne.n	3bf56 <d_print_comp_inner+0x50e>
   3bf72:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3bf76:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3bf7a:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3bf7e:	4620      	mov	r0, r4
   3bf80:	4798      	blx	r3
   3bf82:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3bf86:	2101      	movs	r1, #1
   3bf88:	440a      	add	r2, r1
   3bf8a:	2300      	movs	r3, #0
   3bf8c:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3bf90:	e7e3      	b.n	3bf5a <d_print_comp_inner+0x512>
   3bf92:	4e41      	ldr	r6, [pc, #260]	@ (3c098 <d_print_comp_inner+0x650>)
   3bf94:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3bf98:	f106 0912 	add.w	r9, r6, #18
   3bf9c:	f04f 0800 	mov.w	r8, #0
   3bfa0:	e009      	b.n	3bfb6 <d_print_comp_inner+0x56e>
   3bfa2:	460b      	mov	r3, r1
   3bfa4:	3101      	adds	r1, #1
   3bfa6:	454e      	cmp	r6, r9
   3bfa8:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3bfac:	54e5      	strb	r5, [r4, r3]
   3bfae:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   3bfb2:	f43f adee 	beq.w	3bb92 <d_print_comp_inner+0x14a>
   3bfb6:	29ff      	cmp	r1, #255	@ 0xff
   3bfb8:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   3bfbc:	d1f1      	bne.n	3bfa2 <d_print_comp_inner+0x55a>
   3bfbe:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3bfc2:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3bfc6:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3bfca:	4620      	mov	r0, r4
   3bfcc:	4798      	blx	r3
   3bfce:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3bfd2:	2101      	movs	r1, #1
   3bfd4:	440a      	add	r2, r1
   3bfd6:	2300      	movs	r3, #0
   3bfd8:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3bfdc:	e7e3      	b.n	3bfa6 <d_print_comp_inner+0x55e>
   3bfde:	4e2f      	ldr	r6, [pc, #188]	@ (3c09c <d_print_comp_inner+0x654>)
   3bfe0:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3bfe4:	f106 090d 	add.w	r9, r6, #13
   3bfe8:	f04f 0800 	mov.w	r8, #0
   3bfec:	e009      	b.n	3c002 <d_print_comp_inner+0x5ba>
   3bfee:	460b      	mov	r3, r1
   3bff0:	3101      	adds	r1, #1
   3bff2:	454e      	cmp	r6, r9
   3bff4:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3bff8:	54e5      	strb	r5, [r4, r3]
   3bffa:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   3bffe:	f43f adc8 	beq.w	3bb92 <d_print_comp_inner+0x14a>
   3c002:	29ff      	cmp	r1, #255	@ 0xff
   3c004:	f816 5b01 	ldrb.w	r5, [r6], #1
   3c008:	d1f1      	bne.n	3bfee <d_print_comp_inner+0x5a6>
   3c00a:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3c00e:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3c012:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3c016:	4620      	mov	r0, r4
   3c018:	4798      	blx	r3
   3c01a:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3c01e:	2101      	movs	r1, #1
   3c020:	440a      	add	r2, r1
   3c022:	2300      	movs	r3, #0
   3c024:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3c028:	e7e3      	b.n	3bff2 <d_print_comp_inner+0x5aa>
   3c02a:	4e1d      	ldr	r6, [pc, #116]	@ (3c0a0 <d_print_comp_inner+0x658>)
   3c02c:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3c030:	f106 0918 	add.w	r9, r6, #24
   3c034:	f04f 0800 	mov.w	r8, #0
   3c038:	e009      	b.n	3c04e <d_print_comp_inner+0x606>
   3c03a:	460b      	mov	r3, r1
   3c03c:	3101      	adds	r1, #1
   3c03e:	454e      	cmp	r6, r9
   3c040:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3c044:	54e5      	strb	r5, [r4, r3]
   3c046:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   3c04a:	f001 8177 	beq.w	3d33c <d_print_comp_inner+0x18f4>
   3c04e:	29ff      	cmp	r1, #255	@ 0xff
   3c050:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   3c054:	d1f1      	bne.n	3c03a <d_print_comp_inner+0x5f2>
   3c056:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3c05a:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3c05e:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3c062:	4620      	mov	r0, r4
   3c064:	4798      	blx	r3
   3c066:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3c06a:	2101      	movs	r1, #1
   3c06c:	440a      	add	r2, r1
   3c06e:	2300      	movs	r3, #0
   3c070:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3c074:	e7e3      	b.n	3c03e <d_print_comp_inner+0x5f6>
   3c076:	bf00      	nop
   3c078:	00044264 	.word	0x00044264
   3c07c:	00044268 	.word	0x00044268
   3c080:	000444c7 	.word	0x000444c7
   3c084:	000444a7 	.word	0x000444a7
   3c088:	000443d7 	.word	0x000443d7
   3c08c:	000442cb 	.word	0x000442cb
   3c090:	000442c0 	.word	0x000442c0
   3c094:	0004431f 	.word	0x0004431f
   3c098:	0004430b 	.word	0x0004430b
   3c09c:	000442fc 	.word	0x000442fc
   3c0a0:	000442d7 	.word	0x000442d7
   3c0a4:	4eca      	ldr	r6, [pc, #808]	@ (3c3d0 <d_print_comp_inner+0x988>)
   3c0a6:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3c0aa:	f106 0915 	add.w	r9, r6, #21
   3c0ae:	f04f 0800 	mov.w	r8, #0
   3c0b2:	e009      	b.n	3c0c8 <d_print_comp_inner+0x680>
   3c0b4:	460b      	mov	r3, r1
   3c0b6:	3101      	adds	r1, #1
   3c0b8:	45b1      	cmp	r9, r6
   3c0ba:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3c0be:	54e5      	strb	r5, [r4, r3]
   3c0c0:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   3c0c4:	f001 8149 	beq.w	3d35a <d_print_comp_inner+0x1912>
   3c0c8:	29ff      	cmp	r1, #255	@ 0xff
   3c0ca:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   3c0ce:	d1f1      	bne.n	3c0b4 <d_print_comp_inner+0x66c>
   3c0d0:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3c0d4:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3c0d8:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3c0dc:	4620      	mov	r0, r4
   3c0de:	4798      	blx	r3
   3c0e0:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3c0e4:	2101      	movs	r1, #1
   3c0e6:	440a      	add	r2, r1
   3c0e8:	2300      	movs	r3, #0
   3c0ea:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3c0ee:	e7e3      	b.n	3c0b8 <d_print_comp_inner+0x670>
   3c0f0:	4eb8      	ldr	r6, [pc, #736]	@ (3c3d4 <d_print_comp_inner+0x98c>)
   3c0f2:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3c0f6:	f106 0919 	add.w	r9, r6, #25
   3c0fa:	f04f 0800 	mov.w	r8, #0
   3c0fe:	e009      	b.n	3c114 <d_print_comp_inner+0x6cc>
   3c100:	460b      	mov	r3, r1
   3c102:	3101      	adds	r1, #1
   3c104:	45b1      	cmp	r9, r6
   3c106:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3c10a:	54e5      	strb	r5, [r4, r3]
   3c10c:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   3c110:	f43f ad3f 	beq.w	3bb92 <d_print_comp_inner+0x14a>
   3c114:	29ff      	cmp	r1, #255	@ 0xff
   3c116:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   3c11a:	d1f1      	bne.n	3c100 <d_print_comp_inner+0x6b8>
   3c11c:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3c120:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3c124:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3c128:	4620      	mov	r0, r4
   3c12a:	4798      	blx	r3
   3c12c:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3c130:	2101      	movs	r1, #1
   3c132:	440a      	add	r2, r1
   3c134:	2300      	movs	r3, #0
   3c136:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3c13a:	e7e3      	b.n	3c104 <d_print_comp_inner+0x6bc>
   3c13c:	4ea6      	ldr	r6, [pc, #664]	@ (3c3d8 <d_print_comp_inner+0x990>)
   3c13e:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3c142:	f106 0916 	add.w	r9, r6, #22
   3c146:	f04f 0800 	mov.w	r8, #0
   3c14a:	e009      	b.n	3c160 <d_print_comp_inner+0x718>
   3c14c:	460b      	mov	r3, r1
   3c14e:	3101      	adds	r1, #1
   3c150:	45b1      	cmp	r9, r6
   3c152:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3c156:	54e5      	strb	r5, [r4, r3]
   3c158:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   3c15c:	f43f ad19 	beq.w	3bb92 <d_print_comp_inner+0x14a>
   3c160:	29ff      	cmp	r1, #255	@ 0xff
   3c162:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   3c166:	d1f1      	bne.n	3c14c <d_print_comp_inner+0x704>
   3c168:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3c16c:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3c170:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3c174:	4620      	mov	r0, r4
   3c176:	4798      	blx	r3
   3c178:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3c17c:	2101      	movs	r1, #1
   3c17e:	440a      	add	r2, r1
   3c180:	2300      	movs	r3, #0
   3c182:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3c186:	e7e3      	b.n	3c150 <d_print_comp_inner+0x708>
   3c188:	4994      	ldr	r1, [pc, #592]	@ (3c3dc <d_print_comp_inner+0x994>)
   3c18a:	f7fd fa25 	bl	395d8 <d_append_string>
   3c18e:	f8db 200c 	ldr.w	r2, [fp, #12]
   3c192:	2111      	movs	r1, #17
   3c194:	e500      	b.n	3bb98 <d_print_comp_inner+0x150>
   3c196:	4e92      	ldr	r6, [pc, #584]	@ (3c3e0 <d_print_comp_inner+0x998>)
   3c198:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3c19c:	f106 090f 	add.w	r9, r6, #15
   3c1a0:	f04f 0800 	mov.w	r8, #0
   3c1a4:	e009      	b.n	3c1ba <d_print_comp_inner+0x772>
   3c1a6:	460b      	mov	r3, r1
   3c1a8:	3101      	adds	r1, #1
   3c1aa:	45b1      	cmp	r9, r6
   3c1ac:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3c1b0:	54e5      	strb	r5, [r4, r3]
   3c1b2:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   3c1b6:	f43f acec 	beq.w	3bb92 <d_print_comp_inner+0x14a>
   3c1ba:	29ff      	cmp	r1, #255	@ 0xff
   3c1bc:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   3c1c0:	d1f1      	bne.n	3c1a6 <d_print_comp_inner+0x75e>
   3c1c2:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3c1c6:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3c1ca:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3c1ce:	4620      	mov	r0, r4
   3c1d0:	4798      	blx	r3
   3c1d2:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3c1d6:	2101      	movs	r1, #1
   3c1d8:	440a      	add	r2, r1
   3c1da:	2300      	movs	r3, #0
   3c1dc:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3c1e0:	e7e3      	b.n	3c1aa <d_print_comp_inner+0x762>
   3c1e2:	4e80      	ldr	r6, [pc, #512]	@ (3c3e4 <d_print_comp_inner+0x99c>)
   3c1e4:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3c1e8:	f106 091a 	add.w	r9, r6, #26
   3c1ec:	f04f 0800 	mov.w	r8, #0
   3c1f0:	e009      	b.n	3c206 <d_print_comp_inner+0x7be>
   3c1f2:	460b      	mov	r3, r1
   3c1f4:	3101      	adds	r1, #1
   3c1f6:	45b1      	cmp	r9, r6
   3c1f8:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3c1fc:	54e5      	strb	r5, [r4, r3]
   3c1fe:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   3c202:	f43f acc6 	beq.w	3bb92 <d_print_comp_inner+0x14a>
   3c206:	29ff      	cmp	r1, #255	@ 0xff
   3c208:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   3c20c:	d1f1      	bne.n	3c1f2 <d_print_comp_inner+0x7aa>
   3c20e:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3c212:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3c216:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3c21a:	4620      	mov	r0, r4
   3c21c:	4798      	blx	r3
   3c21e:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3c222:	2101      	movs	r1, #1
   3c224:	440a      	add	r2, r1
   3c226:	2300      	movs	r3, #0
   3c228:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3c22c:	e7e3      	b.n	3c1f6 <d_print_comp_inner+0x7ae>
   3c22e:	4e6e      	ldr	r6, [pc, #440]	@ (3c3e8 <d_print_comp_inner+0x9a0>)
   3c230:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3c234:	f106 0911 	add.w	r9, r6, #17
   3c238:	f04f 0800 	mov.w	r8, #0
   3c23c:	e009      	b.n	3c252 <d_print_comp_inner+0x80a>
   3c23e:	460b      	mov	r3, r1
   3c240:	3101      	adds	r1, #1
   3c242:	45b1      	cmp	r9, r6
   3c244:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3c248:	54e5      	strb	r5, [r4, r3]
   3c24a:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   3c24e:	f43f aca0 	beq.w	3bb92 <d_print_comp_inner+0x14a>
   3c252:	29ff      	cmp	r1, #255	@ 0xff
   3c254:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   3c258:	d1f1      	bne.n	3c23e <d_print_comp_inner+0x7f6>
   3c25a:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3c25e:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3c262:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3c266:	4620      	mov	r0, r4
   3c268:	4798      	blx	r3
   3c26a:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3c26e:	2101      	movs	r1, #1
   3c270:	440a      	add	r2, r1
   3c272:	2300      	movs	r3, #0
   3c274:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3c278:	e7e3      	b.n	3c242 <d_print_comp_inner+0x7fa>
   3c27a:	4e5c      	ldr	r6, [pc, #368]	@ (3c3ec <d_print_comp_inner+0x9a4>)
   3c27c:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3c280:	f106 0915 	add.w	r9, r6, #21
   3c284:	f04f 0800 	mov.w	r8, #0
   3c288:	e009      	b.n	3c29e <d_print_comp_inner+0x856>
   3c28a:	460b      	mov	r3, r1
   3c28c:	3101      	adds	r1, #1
   3c28e:	45b1      	cmp	r9, r6
   3c290:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3c294:	54e5      	strb	r5, [r4, r3]
   3c296:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   3c29a:	f43f ac7a 	beq.w	3bb92 <d_print_comp_inner+0x14a>
   3c29e:	29ff      	cmp	r1, #255	@ 0xff
   3c2a0:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   3c2a4:	d1f1      	bne.n	3c28a <d_print_comp_inner+0x842>
   3c2a6:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3c2aa:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3c2ae:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3c2b2:	4620      	mov	r0, r4
   3c2b4:	4798      	blx	r3
   3c2b6:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3c2ba:	2101      	movs	r1, #1
   3c2bc:	440a      	add	r2, r1
   3c2be:	2300      	movs	r3, #0
   3c2c0:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3c2c4:	e7e3      	b.n	3c28e <d_print_comp_inner+0x846>
   3c2c6:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3c2ca:	29ff      	cmp	r1, #255	@ 0xff
   3c2cc:	f001 8338 	beq.w	3d940 <d_print_comp_inner+0x1ef8>
   3c2d0:	1c4a      	adds	r2, r1, #1
   3c2d2:	235b      	movs	r3, #91	@ 0x5b
   3c2d4:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
   3c2d8:	f04f 0800 	mov.w	r8, #0
   3c2dc:	5463      	strb	r3, [r4, r1]
   3c2de:	465f      	mov	r7, fp
   3c2e0:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3c2e4:	68fa      	ldr	r2, [r7, #12]
   3c2e6:	2111      	movs	r1, #17
   3c2e8:	4620      	mov	r0, r4
   3c2ea:	f001 fe7b 	bl	3dfe4 <d_print_comp>
   3c2ee:	693f      	ldr	r7, [r7, #16]
   3c2f0:	2f00      	cmp	r7, #0
   3c2f2:	f001 8010 	beq.w	3d316 <d_print_comp_inner+0x18ce>
   3c2f6:	4d3e      	ldr	r5, [pc, #248]	@ (3c3f0 <d_print_comp_inner+0x9a8>)
   3c2f8:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3c2fc:	f105 0902 	add.w	r9, r5, #2
   3c300:	e008      	b.n	3c314 <d_print_comp_inner+0x8cc>
   3c302:	460b      	mov	r3, r1
   3c304:	3101      	adds	r1, #1
   3c306:	454d      	cmp	r5, r9
   3c308:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3c30c:	54e6      	strb	r6, [r4, r3]
   3c30e:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3c312:	d0e7      	beq.n	3c2e4 <d_print_comp_inner+0x89c>
   3c314:	29ff      	cmp	r1, #255	@ 0xff
   3c316:	f815 6b01 	ldrb.w	r6, [r5], #1
   3c31a:	d1f2      	bne.n	3c302 <d_print_comp_inner+0x8ba>
   3c31c:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3c320:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3c324:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3c328:	4620      	mov	r0, r4
   3c32a:	4798      	blx	r3
   3c32c:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3c330:	2101      	movs	r1, #1
   3c332:	440a      	add	r2, r1
   3c334:	2300      	movs	r3, #0
   3c336:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3c33a:	e7e4      	b.n	3c306 <d_print_comp_inner+0x8be>
   3c33c:	4e2d      	ldr	r6, [pc, #180]	@ (3c3f4 <d_print_comp_inner+0x9ac>)
   3c33e:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3c342:	f106 0917 	add.w	r9, r6, #23
   3c346:	f04f 0800 	mov.w	r8, #0
   3c34a:	e009      	b.n	3c360 <d_print_comp_inner+0x918>
   3c34c:	460b      	mov	r3, r1
   3c34e:	3101      	adds	r1, #1
   3c350:	45b1      	cmp	r9, r6
   3c352:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3c356:	54e5      	strb	r5, [r4, r3]
   3c358:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   3c35c:	f43f ac19 	beq.w	3bb92 <d_print_comp_inner+0x14a>
   3c360:	29ff      	cmp	r1, #255	@ 0xff
   3c362:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   3c366:	d1f1      	bne.n	3c34c <d_print_comp_inner+0x904>
   3c368:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3c36c:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3c370:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3c374:	4620      	mov	r0, r4
   3c376:	4798      	blx	r3
   3c378:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3c37c:	2101      	movs	r1, #1
   3c37e:	440a      	add	r2, r1
   3c380:	2300      	movs	r3, #0
   3c382:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3c386:	e7e3      	b.n	3c350 <d_print_comp_inner+0x908>
   3c388:	2111      	movs	r1, #17
   3c38a:	68d2      	ldr	r2, [r2, #12]
   3c38c:	f001 fe2a 	bl	3dfe4 <d_print_comp>
   3c390:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3c394:	29ff      	cmp	r1, #255	@ 0xff
   3c396:	f001 8279 	beq.w	3d88c <d_print_comp_inner+0x1e44>
   3c39a:	1c4a      	adds	r2, r1, #1
   3c39c:	2340      	movs	r3, #64	@ 0x40
   3c39e:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
   3c3a2:	5463      	strb	r3, [r4, r1]
   3c3a4:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3c3a8:	e467      	b.n	3bc7a <d_print_comp_inner+0x232>
   3c3aa:	68d2      	ldr	r2, [r2, #12]
   3c3ac:	2111      	movs	r1, #17
   3c3ae:	f001 fe19 	bl	3dfe4 <d_print_comp>
   3c3b2:	4911      	ldr	r1, [pc, #68]	@ (3c3f8 <d_print_comp_inner+0x9b0>)
   3c3b4:	4620      	mov	r0, r4
   3c3b6:	b017      	add	sp, #92	@ 0x5c
   3c3b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c3bc:	f7fd b90c 	b.w	395d8 <d_append_string>
   3c3c0:	4e0e      	ldr	r6, [pc, #56]	@ (3c3fc <d_print_comp_inner+0x9b4>)
   3c3c2:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3c3c6:	f106 0908 	add.w	r9, r6, #8
   3c3ca:	f04f 0800 	mov.w	r8, #0
   3c3ce:	e021      	b.n	3c414 <d_print_comp_inner+0x9cc>
   3c3d0:	000443bf 	.word	0x000443bf
   3c3d4:	000443a3 	.word	0x000443a3
   3c3d8:	0004438b 	.word	0x0004438b
   3c3dc:	00044378 	.word	0x00044378
   3c3e0:	00044367 	.word	0x00044367
   3c3e4:	0004434b 	.word	0x0004434b
   3c3e8:	00044337 	.word	0x00044337
   3c3ec:	00044333 	.word	0x00044333
   3c3f0:	00044264 	.word	0x00044264
   3c3f4:	000442a7 	.word	0x000442a7
   3c3f8:	00044474 	.word	0x00044474
   3c3fc:	000444fb 	.word	0x000444fb
   3c400:	460b      	mov	r3, r1
   3c402:	3101      	adds	r1, #1
   3c404:	45b1      	cmp	r9, r6
   3c406:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3c40a:	54e5      	strb	r5, [r4, r3]
   3c40c:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   3c410:	f000 864a 	beq.w	3d0a8 <d_print_comp_inner+0x1660>
   3c414:	29ff      	cmp	r1, #255	@ 0xff
   3c416:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   3c41a:	d1f1      	bne.n	3c400 <d_print_comp_inner+0x9b8>
   3c41c:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3c420:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3c424:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3c428:	4620      	mov	r0, r4
   3c42a:	4798      	blx	r3
   3c42c:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3c430:	2101      	movs	r1, #1
   3c432:	440a      	add	r2, r1
   3c434:	2300      	movs	r3, #0
   3c436:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3c43a:	e7e3      	b.n	3c404 <d_print_comp_inner+0x9bc>
   3c43c:	4dc5      	ldr	r5, [pc, #788]	@ (3c754 <d_print_comp_inner+0xd0c>)
   3c43e:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3c442:	f105 0708 	add.w	r7, r5, #8
   3c446:	f04f 0800 	mov.w	r8, #0
   3c44a:	e009      	b.n	3c460 <d_print_comp_inner+0xa18>
   3c44c:	460b      	mov	r3, r1
   3c44e:	3101      	adds	r1, #1
   3c450:	42af      	cmp	r7, r5
   3c452:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3c456:	54e6      	strb	r6, [r4, r3]
   3c458:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3c45c:	f43f ab81 	beq.w	3bb62 <d_print_comp_inner+0x11a>
   3c460:	29ff      	cmp	r1, #255	@ 0xff
   3c462:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   3c466:	d1f1      	bne.n	3c44c <d_print_comp_inner+0xa04>
   3c468:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3c46c:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3c470:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3c474:	4620      	mov	r0, r4
   3c476:	4798      	blx	r3
   3c478:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3c47c:	2101      	movs	r1, #1
   3c47e:	440a      	add	r2, r1
   3c480:	2300      	movs	r3, #0
   3c482:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3c486:	e7e3      	b.n	3c450 <d_print_comp_inner+0xa08>
   3c488:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3c48c:	29ff      	cmp	r1, #255	@ 0xff
   3c48e:	f001 81ec 	beq.w	3d86a <d_print_comp_inner+0x1e22>
   3c492:	1c4a      	adds	r2, r1, #1
   3c494:	233c      	movs	r3, #60	@ 0x3c
   3c496:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
   3c49a:	5463      	strb	r3, [r4, r1]
   3c49c:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3c4a0:	f8db 700c 	ldr.w	r7, [fp, #12]
   3c4a4:	b187      	cbz	r7, 3c4c8 <d_print_comp_inner+0xa80>
   3c4a6:	f04f 0800 	mov.w	r8, #0
   3c4aa:	46c1      	mov	r9, r8
   3c4ac:	f1b8 0f00 	cmp.w	r8, #0
   3c4b0:	f040 857c 	bne.w	3cfac <d_print_comp_inner+0x1564>
   3c4b4:	463a      	mov	r2, r7
   3c4b6:	2111      	movs	r1, #17
   3c4b8:	4620      	mov	r0, r4
   3c4ba:	f001 fd93 	bl	3dfe4 <d_print_comp>
   3c4be:	693f      	ldr	r7, [r7, #16]
   3c4c0:	f108 0801 	add.w	r8, r8, #1
   3c4c4:	2f00      	cmp	r7, #0
   3c4c6:	d1f1      	bne.n	3c4ac <d_print_comp_inner+0xa64>
   3c4c8:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3c4cc:	29ff      	cmp	r1, #255	@ 0xff
   3c4ce:	f001 8250 	beq.w	3d972 <d_print_comp_inner+0x1f2a>
   3c4d2:	1c4a      	adds	r2, r1, #1
   3c4d4:	233e      	movs	r3, #62	@ 0x3e
   3c4d6:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
   3c4da:	5463      	strb	r3, [r4, r1]
   3c4dc:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3c4e0:	f7ff bb3f 	b.w	3bb62 <d_print_comp_inner+0x11a>
   3c4e4:	68d2      	ldr	r2, [r2, #12]
   3c4e6:	e9d2 6300 	ldrd	r6, r3, [r2]
   3c4ea:	2b00      	cmp	r3, #0
   3c4ec:	f000 8592 	beq.w	3d014 <d_print_comp_inner+0x15cc>
   3c4f0:	4433      	add	r3, r6
   3c4f2:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3c4f6:	3e01      	subs	r6, #1
   3c4f8:	f103 39ff 	add.w	r9, r3, #4294967295	@ 0xffffffff
   3c4fc:	f04f 0800 	mov.w	r8, #0
   3c500:	e009      	b.n	3c516 <d_print_comp_inner+0xace>
   3c502:	460b      	mov	r3, r1
   3c504:	3101      	adds	r1, #1
   3c506:	45b1      	cmp	r9, r6
   3c508:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3c50c:	54e5      	strb	r5, [r4, r3]
   3c50e:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   3c512:	f000 857f 	beq.w	3d014 <d_print_comp_inner+0x15cc>
   3c516:	29ff      	cmp	r1, #255	@ 0xff
   3c518:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   3c51c:	d1f1      	bne.n	3c502 <d_print_comp_inner+0xaba>
   3c51e:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3c522:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3c526:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3c52a:	4620      	mov	r0, r4
   3c52c:	4798      	blx	r3
   3c52e:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3c532:	2101      	movs	r1, #1
   3c534:	440a      	add	r2, r1
   3c536:	2300      	movs	r3, #0
   3c538:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3c53c:	e7e3      	b.n	3c506 <d_print_comp_inner+0xabe>
   3c53e:	4e86      	ldr	r6, [pc, #536]	@ (3c758 <d_print_comp_inner+0xd10>)
   3c540:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3c544:	f106 091e 	add.w	r9, r6, #30
   3c548:	f04f 0800 	mov.w	r8, #0
   3c54c:	e009      	b.n	3c562 <d_print_comp_inner+0xb1a>
   3c54e:	460b      	mov	r3, r1
   3c550:	3101      	adds	r1, #1
   3c552:	45b1      	cmp	r9, r6
   3c554:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3c558:	54e5      	strb	r5, [r4, r3]
   3c55a:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   3c55e:	f43f ab18 	beq.w	3bb92 <d_print_comp_inner+0x14a>
   3c562:	29ff      	cmp	r1, #255	@ 0xff
   3c564:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   3c568:	d1f1      	bne.n	3c54e <d_print_comp_inner+0xb06>
   3c56a:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3c56e:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3c572:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3c576:	4620      	mov	r0, r4
   3c578:	4798      	blx	r3
   3c57a:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3c57e:	2101      	movs	r1, #1
   3c580:	440a      	add	r2, r1
   3c582:	2300      	movs	r3, #0
   3c584:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3c588:	e7e3      	b.n	3c552 <d_print_comp_inner+0xb0a>
   3c58a:	68d5      	ldr	r5, [r2, #12]
   3c58c:	2d00      	cmp	r5, #0
   3c58e:	f040 876c 	bne.w	3d46a <d_print_comp_inner+0x1a22>
   3c592:	4972      	ldr	r1, [pc, #456]	@ (3c75c <d_print_comp_inner+0xd14>)
   3c594:	e70e      	b.n	3c3b4 <d_print_comp_inner+0x96c>
   3c596:	68d2      	ldr	r2, [r2, #12]
   3c598:	f8d0 c114 	ldr.w	ip, [r0, #276]	@ 0x114
   3c59c:	b1ca      	cbz	r2, 3c5d2 <d_print_comp_inner+0xb8a>
   3c59e:	ab06      	add	r3, sp, #24
   3c5a0:	f8c0 3114 	str.w	r3, [r0, #276]	@ 0x114
   3c5a4:	2300      	movs	r3, #0
   3c5a6:	9308      	str	r3, [sp, #32]
   3c5a8:	2111      	movs	r1, #17
   3c5aa:	f8d0 3110 	ldr.w	r3, [r0, #272]	@ 0x110
   3c5ae:	9309      	str	r3, [sp, #36]	@ 0x24
   3c5b0:	e9cd cb06 	strd	ip, fp, [sp, #24]
   3c5b4:	f001 fd16 	bl	3dfe4 <d_print_comp>
   3c5b8:	9b08      	ldr	r3, [sp, #32]
   3c5ba:	9a06      	ldr	r2, [sp, #24]
   3c5bc:	f8c4 2114 	str.w	r2, [r4, #276]	@ 0x114
   3c5c0:	2b00      	cmp	r3, #0
   3c5c2:	f47f aace 	bne.w	3bb62 <d_print_comp_inner+0x11a>
   3c5c6:	2120      	movs	r1, #32
   3c5c8:	4620      	mov	r0, r4
   3c5ca:	f7fc ff81 	bl	394d0 <d_append_char>
   3c5ce:	f8d4 c114 	ldr.w	ip, [r4, #276]	@ 0x114
   3c5d2:	4663      	mov	r3, ip
   3c5d4:	465a      	mov	r2, fp
   3c5d6:	2111      	movs	r1, #17
   3c5d8:	4620      	mov	r0, r4
   3c5da:	b017      	add	sp, #92	@ 0x5c
   3c5dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c5e0:	f002 b840 	b.w	3e664 <d_print_function_type>
   3c5e4:	2300      	movs	r3, #0
   3c5e6:	f8d0 8114 	ldr.w	r8, [r0, #276]	@ 0x114
   3c5ea:	f8d0 7148 	ldr.w	r7, [r0, #328]	@ 0x148
   3c5ee:	f8c4 2148 	str.w	r2, [r4, #328]	@ 0x148
   3c5f2:	2111      	movs	r1, #17
   3c5f4:	f8c0 3114 	str.w	r3, [r0, #276]	@ 0x114
   3c5f8:	68d2      	ldr	r2, [r2, #12]
   3c5fa:	f001 fcf3 	bl	3dfe4 <d_print_comp>
   3c5fe:	f894 3104 	ldrb.w	r3, [r4, #260]	@ 0x104
   3c602:	2b3c      	cmp	r3, #60	@ 0x3c
   3c604:	f001 821f 	beq.w	3da46 <d_print_comp_inner+0x1ffe>
   3c608:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3c60c:	29ff      	cmp	r1, #255	@ 0xff
   3c60e:	f001 820a 	beq.w	3da26 <d_print_comp_inner+0x1fde>
   3c612:	1c4b      	adds	r3, r1, #1
   3c614:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
   3c618:	233c      	movs	r3, #60	@ 0x3c
   3c61a:	5463      	strb	r3, [r4, r1]
   3c61c:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3c620:	f8db 2010 	ldr.w	r2, [fp, #16]
   3c624:	2111      	movs	r1, #17
   3c626:	4620      	mov	r0, r4
   3c628:	f001 fcdc 	bl	3dfe4 <d_print_comp>
   3c62c:	f894 3104 	ldrb.w	r3, [r4, #260]	@ 0x104
   3c630:	2b3e      	cmp	r3, #62	@ 0x3e
   3c632:	f001 81f2 	beq.w	3da1a <d_print_comp_inner+0x1fd2>
   3c636:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3c63a:	29ff      	cmp	r1, #255	@ 0xff
   3c63c:	f001 81dd 	beq.w	3d9fa <d_print_comp_inner+0x1fb2>
   3c640:	1c4b      	adds	r3, r1, #1
   3c642:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
   3c646:	233e      	movs	r3, #62	@ 0x3e
   3c648:	5463      	strb	r3, [r4, r1]
   3c64a:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3c64e:	f8c4 8114 	str.w	r8, [r4, #276]	@ 0x114
   3c652:	f8c4 7148 	str.w	r7, [r4, #328]	@ 0x148
   3c656:	f7ff ba84 	b.w	3bb62 <d_print_comp_inner+0x11a>
   3c65a:	f8d2 800c 	ldr.w	r8, [r2, #12]
   3c65e:	f8d0 9114 	ldr.w	r9, [r0, #276]	@ 0x114
   3c662:	2200      	movs	r2, #0
   3c664:	f8c0 2114 	str.w	r2, [r0, #276]	@ 0x114
   3c668:	f1b8 0f00 	cmp.w	r8, #0
   3c66c:	f43f aa76 	beq.w	3bb5c <d_print_comp_inner+0x114>
   3c670:	ae06      	add	r6, sp, #24
   3c672:	f8d0 1110 	ldr.w	r1, [r0, #272]	@ 0x110
   3c676:	4633      	mov	r3, r6
   3c678:	4694      	mov	ip, r2
   3c67a:	4610      	mov	r0, r2
   3c67c:	4645      	mov	r5, r8
   3c67e:	e9c3 2500 	strd	r2, r5, [r3]
   3c682:	e9c3 0102 	strd	r0, r1, [r3, #8]
   3c686:	782a      	ldrb	r2, [r5, #0]
   3c688:	2a4e      	cmp	r2, #78	@ 0x4e
   3c68a:	469e      	mov	lr, r3
   3c68c:	f1a2 0a1c 	sub.w	sl, r2, #28
   3c690:	f1a2 0850 	sub.w	r8, r2, #80	@ 0x50
   3c694:	f10c 0701 	add.w	r7, ip, #1
   3c698:	f000 86b1 	beq.w	3d3fe <d_print_comp_inner+0x19b6>
   3c69c:	f200 86ab 	bhi.w	3d3f6 <d_print_comp_inner+0x19ae>
   3c6a0:	f1ba 0f04 	cmp.w	sl, #4
   3c6a4:	f240 86ab 	bls.w	3d3fe <d_print_comp_inner+0x19b6>
   3c6a8:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
   3c6ac:	782b      	ldrb	r3, [r5, #0]
   3c6ae:	2b02      	cmp	r3, #2
   3c6b0:	46a8      	mov	r8, r5
   3c6b2:	f001 80fd 	beq.w	3d8b0 <d_print_comp_inner+0x1e68>
   3c6b6:	2b04      	cmp	r3, #4
   3c6b8:	d104      	bne.n	3c6c4 <d_print_comp_inner+0xc7c>
   3c6ba:	e9cd 1804 	strd	r1, r8, [sp, #16]
   3c6be:	ab04      	add	r3, sp, #16
   3c6c0:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
   3c6c4:	f8db 2010 	ldr.w	r2, [fp, #16]
   3c6c8:	2111      	movs	r1, #17
   3c6ca:	4620      	mov	r0, r4
   3c6cc:	f001 fc8a 	bl	3dfe4 <d_print_comp>
   3c6d0:	f898 3000 	ldrb.w	r3, [r8]
   3c6d4:	2b04      	cmp	r3, #4
   3c6d6:	bf04      	itt	eq
   3c6d8:	9b04      	ldreq	r3, [sp, #16]
   3c6da:	f8c4 3110 	streq.w	r3, [r4, #272]	@ 0x110
   3c6de:	eb06 1507 	add.w	r5, r6, r7, lsl #4
   3c6e2:	f04f 0820 	mov.w	r8, #32
   3c6e6:	f855 7c08 	ldr.w	r7, [r5, #-8]
   3c6ea:	2f00      	cmp	r7, #0
   3c6ec:	f000 8668 	beq.w	3d3c0 <d_print_comp_inner+0x1978>
   3c6f0:	3d10      	subs	r5, #16
   3c6f2:	42ae      	cmp	r6, r5
   3c6f4:	d1f7      	bne.n	3c6e6 <d_print_comp_inner+0xc9e>
   3c6f6:	f8c4 9114 	str.w	r9, [r4, #276]	@ 0x114
   3c6fa:	f7ff ba32 	b.w	3bb62 <d_print_comp_inner+0x11a>
   3c6fe:	f8d2 900c 	ldr.w	r9, [r2, #12]
   3c702:	4d17      	ldr	r5, [pc, #92]	@ (3c760 <d_print_comp_inner+0xd18>)
   3c704:	f8d9 a008 	ldr.w	sl, [r9, #8]
   3c708:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3c70c:	f105 0708 	add.w	r7, r5, #8
   3c710:	f04f 0800 	mov.w	r8, #0
   3c714:	e009      	b.n	3c72a <d_print_comp_inner+0xce2>
   3c716:	460a      	mov	r2, r1
   3c718:	3101      	adds	r1, #1
   3c71a:	42bd      	cmp	r5, r7
   3c71c:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3c720:	54a6      	strb	r6, [r4, r2]
   3c722:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3c726:	f000 84ed 	beq.w	3d104 <d_print_comp_inner+0x16bc>
   3c72a:	29ff      	cmp	r1, #255	@ 0xff
   3c72c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   3c730:	d1f1      	bne.n	3c716 <d_print_comp_inner+0xcce>
   3c732:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3c736:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3c73a:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3c73e:	4620      	mov	r0, r4
   3c740:	4798      	blx	r3
   3c742:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3c746:	2101      	movs	r1, #1
   3c748:	440b      	add	r3, r1
   3c74a:	2200      	movs	r2, #0
   3c74c:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3c750:	e7e3      	b.n	3c71a <d_print_comp_inner+0xcd2>
   3c752:	bf00      	nop
   3c754:	000444ef 	.word	0x000444ef
   3c758:	00044287 	.word	0x00044287
   3c75c:	00044478 	.word	0x00044478
   3c760:	00044407 	.word	0x00044407
   3c764:	e9d2 2503 	ldrd	r2, r5, [r2, #12]
   3c768:	b112      	cbz	r2, 3c770 <d_print_comp_inner+0xd28>
   3c76a:	2111      	movs	r1, #17
   3c76c:	f001 fc3a 	bl	3dfe4 <d_print_comp>
   3c770:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3c774:	29ff      	cmp	r1, #255	@ 0xff
   3c776:	f001 812e 	beq.w	3d9d6 <d_print_comp_inner+0x1f8e>
   3c77a:	1c4a      	adds	r2, r1, #1
   3c77c:	237b      	movs	r3, #123	@ 0x7b
   3c77e:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
   3c782:	4620      	mov	r0, r4
   3c784:	5463      	strb	r3, [r4, r1]
   3c786:	462a      	mov	r2, r5
   3c788:	2111      	movs	r1, #17
   3c78a:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3c78e:	f001 fc29 	bl	3dfe4 <d_print_comp>
   3c792:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3c796:	29ff      	cmp	r1, #255	@ 0xff
   3c798:	f000 8579 	beq.w	3d28e <d_print_comp_inner+0x1846>
   3c79c:	1c4a      	adds	r2, r1, #1
   3c79e:	237d      	movs	r3, #125	@ 0x7d
   3c7a0:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
   3c7a4:	5463      	strb	r3, [r4, r1]
   3c7a6:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3c7aa:	f7ff b9da 	b.w	3bb62 <d_print_comp_inner+0x11a>
   3c7ae:	f8d0 c114 	ldr.w	ip, [r0, #276]	@ 0x114
   3c7b2:	f8d0 3110 	ldr.w	r3, [r0, #272]	@ 0x110
   3c7b6:	9309      	str	r3, [sp, #36]	@ 0x24
   3c7b8:	ae06      	add	r6, sp, #24
   3c7ba:	2300      	movs	r3, #0
   3c7bc:	46e1      	mov	r9, ip
   3c7be:	f8cd c018 	str.w	ip, [sp, #24]
   3c7c2:	f8c0 6114 	str.w	r6, [r0, #276]	@ 0x114
   3c7c6:	9207      	str	r2, [sp, #28]
   3c7c8:	9308      	str	r3, [sp, #32]
   3c7ca:	f1bc 0f00 	cmp.w	ip, #0
   3c7ce:	f001 837a 	beq.w	3dec6 <d_print_comp_inner+0x247e>
   3c7d2:	f04f 0801 	mov.w	r8, #1
   3c7d6:	4667      	mov	r7, ip
   3c7d8:	46c6      	mov	lr, r8
   3c7da:	4635      	mov	r5, r6
   3c7dc:	e01a      	b.n	3c814 <d_print_comp_inner+0xdcc>
   3c7de:	68bb      	ldr	r3, [r7, #8]
   3c7e0:	b9b3      	cbnz	r3, 3c810 <d_print_comp_inner+0xdc8>
   3c7e2:	f1b8 0f03 	cmp.w	r8, #3
   3c7e6:	f63f a9b9 	bhi.w	3bb5c <d_print_comp_inner+0x114>
   3c7ea:	ab16      	add	r3, sp, #88	@ 0x58
   3c7ec:	eb03 1a08 	add.w	sl, r3, r8, lsl #4
   3c7f0:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   3c7f4:	f1aa 0c40 	sub.w	ip, sl, #64	@ 0x40
   3c7f8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
   3c7fc:	f84a 5c40 	str.w	r5, [sl, #-64]
   3c800:	eb06 1508 	add.w	r5, r6, r8, lsl #4
   3c804:	f8c4 5114 	str.w	r5, [r4, #276]	@ 0x114
   3c808:	f108 0801 	add.w	r8, r8, #1
   3c80c:	f8c7 e008 	str.w	lr, [r7, #8]
   3c810:	683f      	ldr	r7, [r7, #0]
   3c812:	b127      	cbz	r7, 3c81e <d_print_comp_inner+0xdd6>
   3c814:	687b      	ldr	r3, [r7, #4]
   3c816:	781b      	ldrb	r3, [r3, #0]
   3c818:	3b19      	subs	r3, #25
   3c81a:	2b02      	cmp	r3, #2
   3c81c:	d9df      	bls.n	3c7de <d_print_comp_inner+0xd96>
   3c81e:	f8db 2010 	ldr.w	r2, [fp, #16]
   3c822:	2111      	movs	r1, #17
   3c824:	4620      	mov	r0, r4
   3c826:	f001 fbdd 	bl	3dfe4 <d_print_comp>
   3c82a:	9b08      	ldr	r3, [sp, #32]
   3c82c:	f8c4 9114 	str.w	r9, [r4, #276]	@ 0x114
   3c830:	2b00      	cmp	r3, #0
   3c832:	f47f a996 	bne.w	3bb62 <d_print_comp_inner+0x11a>
   3c836:	f1b8 0f01 	cmp.w	r8, #1
   3c83a:	d90e      	bls.n	3c85a <d_print_comp_inner+0xe12>
   3c83c:	eb06 1608 	add.w	r6, r6, r8, lsl #4
   3c840:	f856 2c0c 	ldr.w	r2, [r6, #-12]
   3c844:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
   3c848:	2111      	movs	r1, #17
   3c84a:	4620      	mov	r0, r4
   3c84c:	f001 fbf8 	bl	3e040 <d_print_mod>
   3c850:	f1b8 0f01 	cmp.w	r8, #1
   3c854:	f1a6 0610 	sub.w	r6, r6, #16
   3c858:	d1f2      	bne.n	3c840 <d_print_comp_inner+0xdf8>
   3c85a:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
   3c85e:	465a      	mov	r2, fp
   3c860:	2111      	movs	r1, #17
   3c862:	4620      	mov	r0, r4
   3c864:	f002 f908 	bl	3ea78 <d_print_array_type>
   3c868:	f7ff b97b 	b.w	3bb62 <d_print_comp_inner+0x11a>
   3c86c:	4ec4      	ldr	r6, [pc, #784]	@ (3cb80 <d_print_comp_inner+0x1138>)
   3c86e:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3c872:	f106 090e 	add.w	r9, r6, #14
   3c876:	f04f 0800 	mov.w	r8, #0
   3c87a:	e009      	b.n	3c890 <d_print_comp_inner+0xe48>
   3c87c:	460b      	mov	r3, r1
   3c87e:	3101      	adds	r1, #1
   3c880:	45b1      	cmp	r9, r6
   3c882:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3c886:	54e5      	strb	r5, [r4, r3]
   3c888:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   3c88c:	f000 8513 	beq.w	3d2b6 <d_print_comp_inner+0x186e>
   3c890:	29ff      	cmp	r1, #255	@ 0xff
   3c892:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   3c896:	d1f1      	bne.n	3c87c <d_print_comp_inner+0xe34>
   3c898:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3c89c:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3c8a0:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3c8a4:	4620      	mov	r0, r4
   3c8a6:	4798      	blx	r3
   3c8a8:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3c8ac:	2101      	movs	r1, #1
   3c8ae:	440a      	add	r2, r1
   3c8b0:	2300      	movs	r3, #0
   3c8b2:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3c8b6:	e7e3      	b.n	3c880 <d_print_comp_inner+0xe38>
   3c8b8:	e9d2 6503 	ldrd	r6, r5, [r2, #12]
   3c8bc:	7833      	ldrb	r3, [r6, #0]
   3c8be:	2b32      	cmp	r3, #50	@ 0x32
   3c8c0:	f000 869e 	beq.w	3d600 <d_print_comp_inner+0x1bb8>
   3c8c4:	2b34      	cmp	r3, #52	@ 0x34
   3c8c6:	f000 870f 	beq.w	3d6e8 <d_print_comp_inner+0x1ca0>
   3c8ca:	4632      	mov	r2, r6
   3c8cc:	2111      	movs	r1, #17
   3c8ce:	f002 f9ab 	bl	3ec28 <d_print_expr_op>
   3c8d2:	462a      	mov	r2, r5
   3c8d4:	2111      	movs	r1, #17
   3c8d6:	4620      	mov	r0, r4
   3c8d8:	b017      	add	sp, #92	@ 0x5c
   3c8da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c8de:	f002 bb9f 	b.w	3f020 <d_print_subexpr>
   3c8e2:	68d2      	ldr	r2, [r2, #12]
   3c8e4:	2111      	movs	r1, #17
   3c8e6:	4620      	mov	r0, r4
   3c8e8:	b017      	add	sp, #92	@ 0x5c
   3c8ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c8ee:	f002 b99b 	b.w	3ec28 <d_print_expr_op>
   3c8f2:	49a4      	ldr	r1, [pc, #656]	@ (3cb84 <d_print_comp_inner+0x113c>)
   3c8f4:	f7fc fe70 	bl	395d8 <d_append_string>
   3c8f8:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
   3c8fc:	b133      	cbz	r3, 3c90c <d_print_comp_inner+0xec4>
   3c8fe:	f8d4 1110 	ldr.w	r1, [r4, #272]	@ 0x110
   3c902:	9106      	str	r1, [sp, #24]
   3c904:	aa06      	add	r2, sp, #24
   3c906:	f8c4 2110 	str.w	r2, [r4, #272]	@ 0x110
   3c90a:	9307      	str	r3, [sp, #28]
   3c90c:	f8db 200c 	ldr.w	r2, [fp, #12]
   3c910:	7813      	ldrb	r3, [r2, #0]
   3c912:	2b04      	cmp	r3, #4
   3c914:	f000 8644 	beq.w	3d5a0 <d_print_comp_inner+0x1b58>
   3c918:	2111      	movs	r1, #17
   3c91a:	4620      	mov	r0, r4
   3c91c:	f001 fb62 	bl	3dfe4 <d_print_comp>
   3c920:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
   3c924:	2b00      	cmp	r3, #0
   3c926:	f43f a91c 	beq.w	3bb62 <d_print_comp_inner+0x11a>
   3c92a:	9b06      	ldr	r3, [sp, #24]
   3c92c:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
   3c930:	f7ff b917 	b.w	3bb62 <d_print_comp_inner+0x11a>
   3c934:	4e94      	ldr	r6, [pc, #592]	@ (3cb88 <d_print_comp_inner+0x1140>)
   3c936:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3c93a:	f106 090a 	add.w	r9, r6, #10
   3c93e:	f04f 0800 	mov.w	r8, #0
   3c942:	e009      	b.n	3c958 <d_print_comp_inner+0xf10>
   3c944:	460b      	mov	r3, r1
   3c946:	3101      	adds	r1, #1
   3c948:	454e      	cmp	r6, r9
   3c94a:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3c94e:	54e5      	strb	r5, [r4, r3]
   3c950:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   3c954:	f000 83d3 	beq.w	3d0fe <d_print_comp_inner+0x16b6>
   3c958:	29ff      	cmp	r1, #255	@ 0xff
   3c95a:	f816 5b01 	ldrb.w	r5, [r6], #1
   3c95e:	d1f1      	bne.n	3c944 <d_print_comp_inner+0xefc>
   3c960:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3c964:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3c968:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3c96c:	4620      	mov	r0, r4
   3c96e:	4798      	blx	r3
   3c970:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3c974:	2101      	movs	r1, #1
   3c976:	440a      	add	r2, r1
   3c978:	2300      	movs	r3, #0
   3c97a:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3c97e:	e7e3      	b.n	3c948 <d_print_comp_inner+0xf00>
   3c980:	4e82      	ldr	r6, [pc, #520]	@ (3cb8c <d_print_comp_inner+0x1144>)
   3c982:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3c986:	f106 0909 	add.w	r9, r6, #9
   3c98a:	f04f 0800 	mov.w	r8, #0
   3c98e:	e009      	b.n	3c9a4 <d_print_comp_inner+0xf5c>
   3c990:	460b      	mov	r3, r1
   3c992:	3101      	adds	r1, #1
   3c994:	45b1      	cmp	r9, r6
   3c996:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3c99a:	54e5      	strb	r5, [r4, r3]
   3c99c:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   3c9a0:	f43f a96b 	beq.w	3bc7a <d_print_comp_inner+0x232>
   3c9a4:	29ff      	cmp	r1, #255	@ 0xff
   3c9a6:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   3c9aa:	d1f1      	bne.n	3c990 <d_print_comp_inner+0xf48>
   3c9ac:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3c9b0:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3c9b4:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3c9b8:	4620      	mov	r0, r4
   3c9ba:	4798      	blx	r3
   3c9bc:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3c9c0:	2101      	movs	r1, #1
   3c9c2:	440a      	add	r2, r1
   3c9c4:	2300      	movs	r3, #0
   3c9c6:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3c9ca:	e7e3      	b.n	3c994 <d_print_comp_inner+0xf4c>
   3c9cc:	6913      	ldr	r3, [r2, #16]
   3c9ce:	781a      	ldrb	r2, [r3, #0]
   3c9d0:	2a3b      	cmp	r2, #59	@ 0x3b
   3c9d2:	f47f a8c3 	bne.w	3bb5c <d_print_comp_inner+0x114>
   3c9d6:	691b      	ldr	r3, [r3, #16]
   3c9d8:	781b      	ldrb	r3, [r3, #0]
   3c9da:	2b3c      	cmp	r3, #60	@ 0x3c
   3c9dc:	f47f a8be 	bne.w	3bb5c <d_print_comp_inner+0x114>
   3c9e0:	465a      	mov	r2, fp
   3c9e2:	2111      	movs	r1, #17
   3c9e4:	f002 fb96 	bl	3f114 <d_maybe_print_fold_expression>
   3c9e8:	2800      	cmp	r0, #0
   3c9ea:	f47f a8ba 	bne.w	3bb62 <d_print_comp_inner+0x11a>
   3c9ee:	465a      	mov	r2, fp
   3c9f0:	2111      	movs	r1, #17
   3c9f2:	4620      	mov	r0, r4
   3c9f4:	f002 fcc2 	bl	3f37c <d_maybe_print_designated_init>
   3c9f8:	2800      	cmp	r0, #0
   3c9fa:	f47f a8b2 	bne.w	3bb62 <d_print_comp_inner+0x11a>
   3c9fe:	e9db 8303 	ldrd	r8, r3, [fp, #12]
   3ca02:	e9d3 6303 	ldrd	r6, r3, [r3, #12]
   3ca06:	f8d8 200c 	ldr.w	r2, [r8, #12]
   3ca0a:	4961      	ldr	r1, [pc, #388]	@ (3cb90 <d_print_comp_inner+0x1148>)
   3ca0c:	6810      	ldr	r0, [r2, #0]
   3ca0e:	e9d3 7503 	ldrd	r7, r5, [r3, #12]
   3ca12:	f7db fbf5 	bl	18200 <strcmp>
   3ca16:	2800      	cmp	r0, #0
   3ca18:	f041 8293 	bne.w	3df42 <d_print_comp_inner+0x24fa>
   3ca1c:	4632      	mov	r2, r6
   3ca1e:	4620      	mov	r0, r4
   3ca20:	2111      	movs	r1, #17
   3ca22:	f002 fafd 	bl	3f020 <d_print_subexpr>
   3ca26:	4642      	mov	r2, r8
   3ca28:	4620      	mov	r0, r4
   3ca2a:	2111      	movs	r1, #17
   3ca2c:	f002 f8fc 	bl	3ec28 <d_print_expr_op>
   3ca30:	4620      	mov	r0, r4
   3ca32:	463a      	mov	r2, r7
   3ca34:	2111      	movs	r1, #17
   3ca36:	f002 faf3 	bl	3f020 <d_print_subexpr>
   3ca3a:	4956      	ldr	r1, [pc, #344]	@ (3cb94 <d_print_comp_inner+0x114c>)
   3ca3c:	4620      	mov	r0, r4
   3ca3e:	f7fc fdcb 	bl	395d8 <d_append_string>
   3ca42:	e746      	b.n	3c8d2 <d_print_comp_inner+0xe8a>
   3ca44:	6913      	ldr	r3, [r2, #16]
   3ca46:	781b      	ldrb	r3, [r3, #0]
   3ca48:	2b39      	cmp	r3, #57	@ 0x39
   3ca4a:	f47f a887 	bne.w	3bb5c <d_print_comp_inner+0x114>
   3ca4e:	68d2      	ldr	r2, [r2, #12]
   3ca50:	68d3      	ldr	r3, [r2, #12]
   3ca52:	681b      	ldr	r3, [r3, #0]
   3ca54:	7859      	ldrb	r1, [r3, #1]
   3ca56:	2963      	cmp	r1, #99	@ 0x63
   3ca58:	f001 8038 	beq.w	3dacc <d_print_comp_inner+0x2084>
   3ca5c:	465a      	mov	r2, fp
   3ca5e:	2111      	movs	r1, #17
   3ca60:	4620      	mov	r0, r4
   3ca62:	f002 fb57 	bl	3f114 <d_maybe_print_fold_expression>
   3ca66:	2800      	cmp	r0, #0
   3ca68:	f47f a87b 	bne.w	3bb62 <d_print_comp_inner+0x11a>
   3ca6c:	465a      	mov	r2, fp
   3ca6e:	2111      	movs	r1, #17
   3ca70:	4620      	mov	r0, r4
   3ca72:	f002 fc83 	bl	3f37c <d_maybe_print_designated_init>
   3ca76:	2800      	cmp	r0, #0
   3ca78:	f47f a873 	bne.w	3bb62 <d_print_comp_inner+0x11a>
   3ca7c:	f8db 300c 	ldr.w	r3, [fp, #12]
   3ca80:	781a      	ldrb	r2, [r3, #0]
   3ca82:	2a32      	cmp	r2, #50	@ 0x32
   3ca84:	f001 820a 	beq.w	3de9c <d_print_comp_inner+0x2454>
   3ca88:	68db      	ldr	r3, [r3, #12]
   3ca8a:	4943      	ldr	r1, [pc, #268]	@ (3cb98 <d_print_comp_inner+0x1150>)
   3ca8c:	6818      	ldr	r0, [r3, #0]
   3ca8e:	f7db fbb7 	bl	18200 <strcmp>
   3ca92:	f8db 3010 	ldr.w	r3, [fp, #16]
   3ca96:	68da      	ldr	r2, [r3, #12]
   3ca98:	b918      	cbnz	r0, 3caa2 <d_print_comp_inner+0x105a>
   3ca9a:	7813      	ldrb	r3, [r2, #0]
   3ca9c:	2b03      	cmp	r3, #3
   3ca9e:	f001 8269 	beq.w	3df74 <d_print_comp_inner+0x252c>
   3caa2:	2111      	movs	r1, #17
   3caa4:	4620      	mov	r0, r4
   3caa6:	f002 fabb 	bl	3f020 <d_print_subexpr>
   3caaa:	f8db 600c 	ldr.w	r6, [fp, #12]
   3caae:	493b      	ldr	r1, [pc, #236]	@ (3cb9c <d_print_comp_inner+0x1154>)
   3cab0:	68f3      	ldr	r3, [r6, #12]
   3cab2:	681f      	ldr	r7, [r3, #0]
   3cab4:	4638      	mov	r0, r7
   3cab6:	f7db fba3 	bl	18200 <strcmp>
   3caba:	2800      	cmp	r0, #0
   3cabc:	f001 81d5 	beq.w	3de6a <d_print_comp_inner+0x2422>
   3cac0:	4935      	ldr	r1, [pc, #212]	@ (3cb98 <d_print_comp_inner+0x1150>)
   3cac2:	4638      	mov	r0, r7
   3cac4:	f7db fb9c 	bl	18200 <strcmp>
   3cac8:	2800      	cmp	r0, #0
   3caca:	f041 8233 	bne.w	3df34 <d_print_comp_inner+0x24ec>
   3cace:	f8db 3010 	ldr.w	r3, [fp, #16]
   3cad2:	2111      	movs	r1, #17
   3cad4:	691a      	ldr	r2, [r3, #16]
   3cad6:	4620      	mov	r0, r4
   3cad8:	f002 faa2 	bl	3f020 <d_print_subexpr>
   3cadc:	f8db 300c 	ldr.w	r3, [fp, #12]
   3cae0:	781a      	ldrb	r2, [r3, #0]
   3cae2:	2a32      	cmp	r2, #50	@ 0x32
   3cae4:	f47f a83d 	bne.w	3bb62 <d_print_comp_inner+0x11a>
   3cae8:	68db      	ldr	r3, [r3, #12]
   3caea:	689a      	ldr	r2, [r3, #8]
   3caec:	2a01      	cmp	r2, #1
   3caee:	f47f a838 	bne.w	3bb62 <d_print_comp_inner+0x11a>
   3caf2:	685b      	ldr	r3, [r3, #4]
   3caf4:	781b      	ldrb	r3, [r3, #0]
   3caf6:	2b3e      	cmp	r3, #62	@ 0x3e
   3caf8:	f47f a833 	bne.w	3bb62 <d_print_comp_inner+0x11a>
   3cafc:	2129      	movs	r1, #41	@ 0x29
   3cafe:	4620      	mov	r0, r4
   3cb00:	b017      	add	sp, #92	@ 0x5c
   3cb02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3cb06:	f7fc bce3 	b.w	394d0 <d_append_char>
   3cb0a:	2111      	movs	r1, #17
   3cb0c:	68d2      	ldr	r2, [r2, #12]
   3cb0e:	f001 fa69 	bl	3dfe4 <d_print_comp>
   3cb12:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3cb16:	29ff      	cmp	r1, #255	@ 0xff
   3cb18:	f000 8700 	beq.w	3d91c <d_print_comp_inner+0x1ed4>
   3cb1c:	1c4a      	adds	r2, r1, #1
   3cb1e:	2328      	movs	r3, #40	@ 0x28
   3cb20:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
   3cb24:	5463      	strb	r3, [r4, r1]
   3cb26:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3cb2a:	f8db 2010 	ldr.w	r2, [fp, #16]
   3cb2e:	2111      	movs	r1, #17
   3cb30:	4620      	mov	r0, r4
   3cb32:	f001 fa57 	bl	3dfe4 <d_print_comp>
   3cb36:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3cb3a:	29ff      	cmp	r1, #255	@ 0xff
   3cb3c:	f000 84d1 	beq.w	3d4e2 <d_print_comp_inner+0x1a9a>
   3cb40:	1c4a      	adds	r2, r1, #1
   3cb42:	2329      	movs	r3, #41	@ 0x29
   3cb44:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
   3cb48:	5463      	strb	r3, [r4, r1]
   3cb4a:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3cb4e:	f7ff b808 	b.w	3bb62 <d_print_comp_inner+0x11a>
   3cb52:	68d2      	ldr	r2, [r2, #12]
   3cb54:	2111      	movs	r1, #17
   3cb56:	f001 fa45 	bl	3dfe4 <d_print_comp>
   3cb5a:	f8db 2010 	ldr.w	r2, [fp, #16]
   3cb5e:	2111      	movs	r1, #17
   3cb60:	f7ff b81a 	b.w	3bb98 <d_print_comp_inner+0x150>
   3cb64:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3cb68:	29ff      	cmp	r1, #255	@ 0xff
   3cb6a:	f000 8712 	beq.w	3d992 <d_print_comp_inner+0x1f4a>
   3cb6e:	1c4a      	adds	r2, r1, #1
   3cb70:	237e      	movs	r3, #126	@ 0x7e
   3cb72:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
   3cb76:	5463      	strb	r3, [r4, r1]
   3cb78:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3cb7c:	f7ff b87d 	b.w	3bc7a <d_print_comp_inner+0x232>
   3cb80:	000444d3 	.word	0x000444d3
   3cb84:	00044414 	.word	0x00044414
   3cb88:	00044468 	.word	0x00044468
   3cb8c:	00044413 	.word	0x00044413
   3cb90:	0004442c 	.word	0x0004442c
   3cb94:	00044430 	.word	0x00044430
   3cb98:	00044424 	.word	0x00044424
   3cb9c:	00044428 	.word	0x00044428
   3cba0:	68d2      	ldr	r2, [r2, #12]
   3cba2:	2111      	movs	r1, #17
   3cba4:	f001 fa1e 	bl	3dfe4 <d_print_comp>
   3cba8:	49ce      	ldr	r1, [pc, #824]	@ (3cee4 <d_print_comp_inner+0x149c>)
   3cbaa:	4620      	mov	r0, r4
   3cbac:	f7fc fd14 	bl	395d8 <d_append_string>
   3cbb0:	f8db 2010 	ldr.w	r2, [fp, #16]
   3cbb4:	2111      	movs	r1, #17
   3cbb6:	4620      	mov	r0, r4
   3cbb8:	f001 fa14 	bl	3dfe4 <d_print_comp>
   3cbbc:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3cbc0:	29ff      	cmp	r1, #255	@ 0xff
   3cbc2:	f000 849e 	beq.w	3d502 <d_print_comp_inner+0x1aba>
   3cbc6:	1c4a      	adds	r2, r1, #1
   3cbc8:	235d      	movs	r3, #93	@ 0x5d
   3cbca:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
   3cbce:	5463      	strb	r3, [r4, r1]
   3cbd0:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3cbd4:	f7fe bfc5 	b.w	3bb62 <d_print_comp_inner+0x11a>
   3cbd8:	4ec3      	ldr	r6, [pc, #780]	@ (3cee8 <d_print_comp_inner+0x14a0>)
   3cbda:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3cbde:	f106 090e 	add.w	r9, r6, #14
   3cbe2:	f04f 0800 	mov.w	r8, #0
   3cbe6:	e009      	b.n	3cbfc <d_print_comp_inner+0x11b4>
   3cbe8:	460b      	mov	r3, r1
   3cbea:	3101      	adds	r1, #1
   3cbec:	45b1      	cmp	r9, r6
   3cbee:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3cbf2:	54e5      	strb	r5, [r4, r3]
   3cbf4:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   3cbf8:	f43e afcb 	beq.w	3bb92 <d_print_comp_inner+0x14a>
   3cbfc:	29ff      	cmp	r1, #255	@ 0xff
   3cbfe:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   3cc02:	d1f1      	bne.n	3cbe8 <d_print_comp_inner+0x11a0>
   3cc04:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3cc08:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3cc0c:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3cc10:	4620      	mov	r0, r4
   3cc12:	4798      	blx	r3
   3cc14:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3cc18:	2101      	movs	r1, #1
   3cc1a:	440a      	add	r2, r1
   3cc1c:	2300      	movs	r3, #0
   3cc1e:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3cc22:	e7e3      	b.n	3cbec <d_print_comp_inner+0x11a4>
   3cc24:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3cc28:	7b15      	ldrb	r5, [r2, #12]
   3cc2a:	29ff      	cmp	r1, #255	@ 0xff
   3cc2c:	f000 822b 	beq.w	3d086 <d_print_comp_inner+0x163e>
   3cc30:	1c4b      	adds	r3, r1, #1
   3cc32:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
   3cc36:	5465      	strb	r5, [r4, r1]
   3cc38:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   3cc3c:	f7fe bf91 	b.w	3bb62 <d_print_comp_inner+0x11a>
   3cc40:	4eaa      	ldr	r6, [pc, #680]	@ (3ceec <d_print_comp_inner+0x14a4>)
   3cc42:	68d2      	ldr	r2, [r2, #12]
   3cc44:	2111      	movs	r1, #17
   3cc46:	f001 f9cd 	bl	3dfe4 <d_print_comp>
   3cc4a:	f04f 0800 	mov.w	r8, #0
   3cc4e:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3cc52:	f106 0908 	add.w	r9, r6, #8
   3cc56:	e009      	b.n	3cc6c <d_print_comp_inner+0x1224>
   3cc58:	460b      	mov	r3, r1
   3cc5a:	3101      	adds	r1, #1
   3cc5c:	45b1      	cmp	r9, r6
   3cc5e:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3cc62:	54e5      	strb	r5, [r4, r3]
   3cc64:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   3cc68:	f000 8321 	beq.w	3d2ae <d_print_comp_inner+0x1866>
   3cc6c:	29ff      	cmp	r1, #255	@ 0xff
   3cc6e:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   3cc72:	d1f1      	bne.n	3cc58 <d_print_comp_inner+0x1210>
   3cc74:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3cc78:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3cc7c:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3cc80:	4620      	mov	r0, r4
   3cc82:	4798      	blx	r3
   3cc84:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3cc88:	2101      	movs	r1, #1
   3cc8a:	440a      	add	r2, r1
   3cc8c:	2300      	movs	r3, #0
   3cc8e:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3cc92:	e7e3      	b.n	3cc5c <d_print_comp_inner+0x1214>
   3cc94:	4e96      	ldr	r6, [pc, #600]	@ (3cef0 <d_print_comp_inner+0x14a8>)
   3cc96:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3cc9a:	f106 091d 	add.w	r9, r6, #29
   3cc9e:	f04f 0800 	mov.w	r8, #0
   3cca2:	e009      	b.n	3ccb8 <d_print_comp_inner+0x1270>
   3cca4:	460b      	mov	r3, r1
   3cca6:	3101      	adds	r1, #1
   3cca8:	454e      	cmp	r6, r9
   3ccaa:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3ccae:	54e5      	strb	r5, [r4, r3]
   3ccb0:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   3ccb4:	f43e af6d 	beq.w	3bb92 <d_print_comp_inner+0x14a>
   3ccb8:	29ff      	cmp	r1, #255	@ 0xff
   3ccba:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   3ccbe:	d1f1      	bne.n	3cca4 <d_print_comp_inner+0x125c>
   3ccc0:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3ccc4:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3ccc8:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3cccc:	4620      	mov	r0, r4
   3ccce:	4798      	blx	r3
   3ccd0:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3ccd4:	2101      	movs	r1, #1
   3ccd6:	440a      	add	r2, r1
   3ccd8:	2300      	movs	r3, #0
   3ccda:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3ccde:	e7e3      	b.n	3cca8 <d_print_comp_inner+0x1260>
   3cce0:	4e84      	ldr	r6, [pc, #528]	@ (3cef4 <d_print_comp_inner+0x14ac>)
   3cce2:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3cce6:	f106 091a 	add.w	r9, r6, #26
   3ccea:	f04f 0800 	mov.w	r8, #0
   3ccee:	e009      	b.n	3cd04 <d_print_comp_inner+0x12bc>
   3ccf0:	460b      	mov	r3, r1
   3ccf2:	3101      	adds	r1, #1
   3ccf4:	454e      	cmp	r6, r9
   3ccf6:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3ccfa:	54e5      	strb	r5, [r4, r3]
   3ccfc:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   3cd00:	f43e af47 	beq.w	3bb92 <d_print_comp_inner+0x14a>
   3cd04:	29ff      	cmp	r1, #255	@ 0xff
   3cd06:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   3cd0a:	d1f1      	bne.n	3ccf0 <d_print_comp_inner+0x12a8>
   3cd0c:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3cd10:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3cd14:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3cd18:	4620      	mov	r0, r4
   3cd1a:	4798      	blx	r3
   3cd1c:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3cd20:	2101      	movs	r1, #1
   3cd22:	440a      	add	r2, r1
   3cd24:	2300      	movs	r3, #0
   3cd26:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3cd2a:	e7e3      	b.n	3ccf4 <d_print_comp_inner+0x12ac>
   3cd2c:	4e72      	ldr	r6, [pc, #456]	@ (3cef8 <d_print_comp_inner+0x14b0>)
   3cd2e:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3cd32:	f106 0916 	add.w	r9, r6, #22
   3cd36:	f04f 0800 	mov.w	r8, #0
   3cd3a:	e009      	b.n	3cd50 <d_print_comp_inner+0x1308>
   3cd3c:	460b      	mov	r3, r1
   3cd3e:	3101      	adds	r1, #1
   3cd40:	45b1      	cmp	r9, r6
   3cd42:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3cd46:	54e5      	strb	r5, [r4, r3]
   3cd48:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   3cd4c:	f43e af21 	beq.w	3bb92 <d_print_comp_inner+0x14a>
   3cd50:	29ff      	cmp	r1, #255	@ 0xff
   3cd52:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   3cd56:	d1f1      	bne.n	3cd3c <d_print_comp_inner+0x12f4>
   3cd58:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3cd5c:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3cd60:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3cd64:	4620      	mov	r0, r4
   3cd66:	4798      	blx	r3
   3cd68:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3cd6c:	2101      	movs	r1, #1
   3cd6e:	440a      	add	r2, r1
   3cd70:	2300      	movs	r3, #0
   3cd72:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3cd76:	e7e3      	b.n	3cd40 <d_print_comp_inner+0x12f8>
   3cd78:	f8d0 7120 	ldr.w	r7, [r0, #288]	@ 0x120
   3cd7c:	f8d2 a00c 	ldr.w	sl, [r2, #12]
   3cd80:	2f00      	cmp	r7, #0
   3cd82:	f040 8331 	bne.w	3d3e8 <d_print_comp_inner+0x19a0>
   3cd86:	4651      	mov	r1, sl
   3cd88:	f7fc fbde 	bl	39548 <d_find_pack>
   3cd8c:	2800      	cmp	r0, #0
   3cd8e:	f000 832b 	beq.w	3d3e8 <d_print_comp_inner+0x19a0>
   3cd92:	46bb      	mov	fp, r7
   3cd94:	e005      	b.n	3cda2 <d_print_comp_inner+0x135a>
   3cd96:	68c3      	ldr	r3, [r0, #12]
   3cd98:	b133      	cbz	r3, 3cda8 <d_print_comp_inner+0x1360>
   3cd9a:	6900      	ldr	r0, [r0, #16]
   3cd9c:	f10b 0b01 	add.w	fp, fp, #1
   3cda0:	b130      	cbz	r0, 3cdb0 <d_print_comp_inner+0x1368>
   3cda2:	7803      	ldrb	r3, [r0, #0]
   3cda4:	2b2f      	cmp	r3, #47	@ 0x2f
   3cda6:	d0f6      	beq.n	3cd96 <d_print_comp_inner+0x134e>
   3cda8:	f1bb 0f00 	cmp.w	fp, #0
   3cdac:	f43e aed9 	beq.w	3bb62 <d_print_comp_inner+0x11a>
   3cdb0:	f04f 0800 	mov.w	r8, #0
   3cdb4:	f8c4 7124 	str.w	r7, [r4, #292]	@ 0x124
   3cdb8:	4652      	mov	r2, sl
   3cdba:	2111      	movs	r1, #17
   3cdbc:	4620      	mov	r0, r4
   3cdbe:	3701      	adds	r7, #1
   3cdc0:	f001 f910 	bl	3dfe4 <d_print_comp>
   3cdc4:	455f      	cmp	r7, fp
   3cdc6:	f43e aecc 	beq.w	3bb62 <d_print_comp_inner+0x11a>
   3cdca:	4d4c      	ldr	r5, [pc, #304]	@ (3cefc <d_print_comp_inner+0x14b4>)
   3cdcc:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3cdd0:	f105 0902 	add.w	r9, r5, #2
   3cdd4:	e008      	b.n	3cde8 <d_print_comp_inner+0x13a0>
   3cdd6:	460a      	mov	r2, r1
   3cdd8:	3101      	adds	r1, #1
   3cdda:	45a9      	cmp	r9, r5
   3cddc:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3cde0:	54a6      	strb	r6, [r4, r2]
   3cde2:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3cde6:	d0e5      	beq.n	3cdb4 <d_print_comp_inner+0x136c>
   3cde8:	29ff      	cmp	r1, #255	@ 0xff
   3cdea:	f815 6b01 	ldrb.w	r6, [r5], #1
   3cdee:	d1f2      	bne.n	3cdd6 <d_print_comp_inner+0x138e>
   3cdf0:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3cdf4:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3cdf8:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3cdfc:	4620      	mov	r0, r4
   3cdfe:	4798      	blx	r3
   3ce00:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3ce04:	2101      	movs	r1, #1
   3ce06:	440b      	add	r3, r1
   3ce08:	2200      	movs	r2, #0
   3ce0a:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3ce0e:	e7e4      	b.n	3cdda <d_print_comp_inner+0x1392>
   3ce10:	68d2      	ldr	r2, [r2, #12]
   3ce12:	493b      	ldr	r1, [pc, #236]	@ (3cf00 <d_print_comp_inner+0x14b8>)
   3ce14:	a806      	add	r0, sp, #24
   3ce16:	f002 fdfb 	bl	3fa10 <sprintf>
   3ce1a:	a806      	add	r0, sp, #24
   3ce1c:	f7db fc50 	bl	186c0 <strlen>
   3ce20:	2800      	cmp	r0, #0
   3ce22:	f43e ae9e 	beq.w	3bb62 <d_print_comp_inner+0x11a>
   3ce26:	ad06      	add	r5, sp, #24
   3ce28:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3ce2c:	182f      	adds	r7, r5, r0
   3ce2e:	f04f 0800 	mov.w	r8, #0
   3ce32:	e009      	b.n	3ce48 <d_print_comp_inner+0x1400>
   3ce34:	460b      	mov	r3, r1
   3ce36:	3101      	adds	r1, #1
   3ce38:	42af      	cmp	r7, r5
   3ce3a:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3ce3e:	54e6      	strb	r6, [r4, r3]
   3ce40:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3ce44:	f43e ae8d 	beq.w	3bb62 <d_print_comp_inner+0x11a>
   3ce48:	29ff      	cmp	r1, #255	@ 0xff
   3ce4a:	f815 6b01 	ldrb.w	r6, [r5], #1
   3ce4e:	d1f1      	bne.n	3ce34 <d_print_comp_inner+0x13ec>
   3ce50:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3ce54:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3ce58:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3ce5c:	4620      	mov	r0, r4
   3ce5e:	4798      	blx	r3
   3ce60:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3ce64:	2101      	movs	r1, #1
   3ce66:	440a      	add	r2, r1
   3ce68:	2300      	movs	r3, #0
   3ce6a:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3ce6e:	e7e3      	b.n	3ce38 <d_print_comp_inner+0x13f0>
   3ce70:	68d2      	ldr	r2, [r2, #12]
   3ce72:	e9d2 5300 	ldrd	r5, r3, [r2]
   3ce76:	2b00      	cmp	r3, #0
   3ce78:	f43e ae73 	beq.w	3bb62 <d_print_comp_inner+0x11a>
   3ce7c:	442b      	add	r3, r5
   3ce7e:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3ce82:	3d01      	subs	r5, #1
   3ce84:	1e5f      	subs	r7, r3, #1
   3ce86:	f04f 0800 	mov.w	r8, #0
   3ce8a:	e009      	b.n	3cea0 <d_print_comp_inner+0x1458>
   3ce8c:	460b      	mov	r3, r1
   3ce8e:	3101      	adds	r1, #1
   3ce90:	42af      	cmp	r7, r5
   3ce92:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3ce96:	54e6      	strb	r6, [r4, r3]
   3ce98:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3ce9c:	f43e ae61 	beq.w	3bb62 <d_print_comp_inner+0x11a>
   3cea0:	29ff      	cmp	r1, #255	@ 0xff
   3cea2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   3cea6:	d1f1      	bne.n	3ce8c <d_print_comp_inner+0x1444>
   3cea8:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3ceac:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3ceb0:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3ceb4:	4620      	mov	r0, r4
   3ceb6:	4798      	blx	r3
   3ceb8:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3cebc:	2101      	movs	r1, #1
   3cebe:	440a      	add	r2, r1
   3cec0:	2300      	movs	r3, #0
   3cec2:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3cec6:	e7e3      	b.n	3ce90 <d_print_comp_inner+0x1448>
   3cec8:	e9d2 5303 	ldrd	r5, r3, [r2, #12]
   3cecc:	2b00      	cmp	r3, #0
   3cece:	f43e ae48 	beq.w	3bb62 <d_print_comp_inner+0x11a>
   3ced2:	442b      	add	r3, r5
   3ced4:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3ced8:	3d01      	subs	r5, #1
   3ceda:	1e5f      	subs	r7, r3, #1
   3cedc:	f04f 0800 	mov.w	r8, #0
   3cee0:	e01a      	b.n	3cf18 <d_print_comp_inner+0x14d0>
   3cee2:	bf00      	nop
   3cee4:	0004425c 	.word	0x0004425c
   3cee8:	00044457 	.word	0x00044457
   3ceec:	000444e3 	.word	0x000444e3
   3cef0:	00044487 	.word	0x00044487
   3cef4:	000443eb 	.word	0x000443eb
   3cef8:	000443ef 	.word	0x000443ef
   3cefc:	00044264 	.word	0x00044264
   3cf00:	000441f4 	.word	0x000441f4
   3cf04:	460b      	mov	r3, r1
   3cf06:	3101      	adds	r1, #1
   3cf08:	42af      	cmp	r7, r5
   3cf0a:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3cf0e:	54e6      	strb	r6, [r4, r3]
   3cf10:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3cf14:	f43e ae25 	beq.w	3bb62 <d_print_comp_inner+0x11a>
   3cf18:	29ff      	cmp	r1, #255	@ 0xff
   3cf1a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   3cf1e:	d1f1      	bne.n	3cf04 <d_print_comp_inner+0x14bc>
   3cf20:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3cf24:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3cf28:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3cf2c:	4620      	mov	r0, r4
   3cf2e:	4798      	blx	r3
   3cf30:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3cf34:	2101      	movs	r1, #1
   3cf36:	440a      	add	r2, r1
   3cf38:	2300      	movs	r3, #0
   3cf3a:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3cf3e:	e7e3      	b.n	3cf08 <d_print_comp_inner+0x14c0>
   3cf40:	49cb      	ldr	r1, [pc, #812]	@ (3d270 <d_print_comp_inner+0x1828>)
   3cf42:	4620      	mov	r0, r4
   3cf44:	f7fc fb48 	bl	395d8 <d_append_string>
   3cf48:	693a      	ldr	r2, [r7, #16]
   3cf4a:	49ca      	ldr	r1, [pc, #808]	@ (3d274 <d_print_comp_inner+0x182c>)
   3cf4c:	3201      	adds	r2, #1
   3cf4e:	a806      	add	r0, sp, #24
   3cf50:	f002 fd5e 	bl	3fa10 <sprintf>
   3cf54:	a806      	add	r0, sp, #24
   3cf56:	f7db fbb3 	bl	186c0 <strlen>
   3cf5a:	4681      	mov	r9, r0
   3cf5c:	2800      	cmp	r0, #0
   3cf5e:	f000 8500 	beq.w	3d962 <d_print_comp_inner+0x1f1a>
   3cf62:	ad06      	add	r5, sp, #24
   3cf64:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3cf68:	44a9      	add	r9, r5
   3cf6a:	f04f 0800 	mov.w	r8, #0
   3cf6e:	e009      	b.n	3cf84 <d_print_comp_inner+0x153c>
   3cf70:	460b      	mov	r3, r1
   3cf72:	3101      	adds	r1, #1
   3cf74:	45a9      	cmp	r9, r5
   3cf76:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3cf7a:	54e6      	strb	r6, [r4, r3]
   3cf7c:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3cf80:	f000 84ef 	beq.w	3d962 <d_print_comp_inner+0x1f1a>
   3cf84:	29ff      	cmp	r1, #255	@ 0xff
   3cf86:	f815 6b01 	ldrb.w	r6, [r5], #1
   3cf8a:	d1f1      	bne.n	3cf70 <d_print_comp_inner+0x1528>
   3cf8c:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3cf90:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3cf94:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3cf98:	4620      	mov	r0, r4
   3cf9a:	4798      	blx	r3
   3cf9c:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3cfa0:	2101      	movs	r1, #1
   3cfa2:	440a      	add	r2, r1
   3cfa4:	2300      	movs	r3, #0
   3cfa6:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3cfaa:	e7e3      	b.n	3cf74 <d_print_comp_inner+0x152c>
   3cfac:	4db2      	ldr	r5, [pc, #712]	@ (3d278 <d_print_comp_inner+0x1830>)
   3cfae:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3cfb2:	f105 0a02 	add.w	sl, r5, #2
   3cfb6:	e009      	b.n	3cfcc <d_print_comp_inner+0x1584>
   3cfb8:	460a      	mov	r2, r1
   3cfba:	3101      	adds	r1, #1
   3cfbc:	45aa      	cmp	sl, r5
   3cfbe:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3cfc2:	54a6      	strb	r6, [r4, r2]
   3cfc4:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3cfc8:	f43f aa74 	beq.w	3c4b4 <d_print_comp_inner+0xa6c>
   3cfcc:	29ff      	cmp	r1, #255	@ 0xff
   3cfce:	f815 6b01 	ldrb.w	r6, [r5], #1
   3cfd2:	d1f1      	bne.n	3cfb8 <d_print_comp_inner+0x1570>
   3cfd4:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3cfd8:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3cfdc:	f884 90ff 	strb.w	r9, [r4, #255]	@ 0xff
   3cfe0:	4620      	mov	r0, r4
   3cfe2:	4798      	blx	r3
   3cfe4:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3cfe8:	2101      	movs	r1, #1
   3cfea:	440b      	add	r3, r1
   3cfec:	2200      	movs	r2, #0
   3cfee:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3cff2:	e7e3      	b.n	3cfbc <d_print_comp_inner+0x1574>
   3cff4:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
   3cff8:	68c2      	ldr	r2, [r0, #12]
   3cffa:	9309      	str	r3, [sp, #36]	@ 0x24
   3cffc:	ab06      	add	r3, sp, #24
   3cffe:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
   3d002:	2300      	movs	r3, #0
   3d004:	e9cd cb06 	strd	ip, fp, [sp, #24]
   3d008:	9308      	str	r3, [sp, #32]
   3d00a:	2a00      	cmp	r2, #0
   3d00c:	f47e add8 	bne.w	3bbc0 <d_print_comp_inner+0x178>
   3d010:	f7fe bdd4 	b.w	3bbbc <d_print_comp_inner+0x174>
   3d014:	f9bb 2010 	ldrsh.w	r2, [fp, #16]
   3d018:	4996      	ldr	r1, [pc, #600]	@ (3d274 <d_print_comp_inner+0x182c>)
   3d01a:	a806      	add	r0, sp, #24
   3d01c:	f002 fcf8 	bl	3fa10 <sprintf>
   3d020:	a806      	add	r0, sp, #24
   3d022:	f7db fb4d 	bl	186c0 <strlen>
   3d026:	b320      	cbz	r0, 3d072 <d_print_comp_inner+0x162a>
   3d028:	ae06      	add	r6, sp, #24
   3d02a:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3d02e:	eb06 0900 	add.w	r9, r6, r0
   3d032:	f04f 0800 	mov.w	r8, #0
   3d036:	e008      	b.n	3d04a <d_print_comp_inner+0x1602>
   3d038:	460b      	mov	r3, r1
   3d03a:	3101      	adds	r1, #1
   3d03c:	45b1      	cmp	r9, r6
   3d03e:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3d042:	54e5      	strb	r5, [r4, r3]
   3d044:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   3d048:	d013      	beq.n	3d072 <d_print_comp_inner+0x162a>
   3d04a:	29ff      	cmp	r1, #255	@ 0xff
   3d04c:	f816 5b01 	ldrb.w	r5, [r6], #1
   3d050:	d1f2      	bne.n	3d038 <d_print_comp_inner+0x15f0>
   3d052:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3d056:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3d05a:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3d05e:	4620      	mov	r0, r4
   3d060:	4798      	blx	r3
   3d062:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3d066:	2101      	movs	r1, #1
   3d068:	440a      	add	r2, r1
   3d06a:	2300      	movs	r3, #0
   3d06c:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3d070:	e7e4      	b.n	3d03c <d_print_comp_inner+0x15f4>
   3d072:	f89b 5012 	ldrb.w	r5, [fp, #18]
   3d076:	2d00      	cmp	r5, #0
   3d078:	f43e ad73 	beq.w	3bb62 <d_print_comp_inner+0x11a>
   3d07c:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3d080:	29ff      	cmp	r1, #255	@ 0xff
   3d082:	f47f add5 	bne.w	3cc30 <d_print_comp_inner+0x11e8>
   3d086:	2600      	movs	r6, #0
   3d088:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3d08c:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3d090:	f884 60ff 	strb.w	r6, [r4, #255]	@ 0xff
   3d094:	4620      	mov	r0, r4
   3d096:	4798      	blx	r3
   3d098:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3d09c:	2301      	movs	r3, #1
   3d09e:	441a      	add	r2, r3
   3d0a0:	4631      	mov	r1, r6
   3d0a2:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3d0a6:	e5c4      	b.n	3cc32 <d_print_comp_inner+0x11ea>
   3d0a8:	4d74      	ldr	r5, [pc, #464]	@ (3d27c <d_print_comp_inner+0x1834>)
   3d0aa:	f8db 200c 	ldr.w	r2, [fp, #12]
   3d0ae:	2111      	movs	r1, #17
   3d0b0:	4620      	mov	r0, r4
   3d0b2:	f000 ff97 	bl	3dfe4 <d_print_comp>
   3d0b6:	f04f 0800 	mov.w	r8, #0
   3d0ba:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3d0be:	1daf      	adds	r7, r5, #6
   3d0c0:	e009      	b.n	3d0d6 <d_print_comp_inner+0x168e>
   3d0c2:	460b      	mov	r3, r1
   3d0c4:	3101      	adds	r1, #1
   3d0c6:	42bd      	cmp	r5, r7
   3d0c8:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3d0cc:	54e6      	strb	r6, [r4, r3]
   3d0ce:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3d0d2:	f43e ad46 	beq.w	3bb62 <d_print_comp_inner+0x11a>
   3d0d6:	29ff      	cmp	r1, #255	@ 0xff
   3d0d8:	f815 6b01 	ldrb.w	r6, [r5], #1
   3d0dc:	d1f1      	bne.n	3d0c2 <d_print_comp_inner+0x167a>
   3d0de:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3d0e2:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3d0e6:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3d0ea:	4620      	mov	r0, r4
   3d0ec:	4798      	blx	r3
   3d0ee:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3d0f2:	2101      	movs	r1, #1
   3d0f4:	440a      	add	r2, r1
   3d0f6:	2300      	movs	r3, #0
   3d0f8:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3d0fc:	e7e3      	b.n	3d0c6 <d_print_comp_inner+0x167e>
   3d0fe:	f8db 200c 	ldr.w	r2, [fp, #12]
   3d102:	e514      	b.n	3cb2e <d_print_comp_inner+0x10e6>
   3d104:	f8d9 5004 	ldr.w	r5, [r9, #4]
   3d108:	782b      	ldrb	r3, [r5, #0]
   3d10a:	3b61      	subs	r3, #97	@ 0x61
   3d10c:	2b19      	cmp	r3, #25
   3d10e:	f240 82d2 	bls.w	3d6b6 <d_print_comp_inner+0x1c6e>
   3d112:	f10a 37ff 	add.w	r7, sl, #4294967295	@ 0xffffffff
   3d116:	5deb      	ldrb	r3, [r5, r7]
   3d118:	2b20      	cmp	r3, #32
   3d11a:	bf18      	it	ne
   3d11c:	4657      	movne	r7, sl
   3d11e:	2f00      	cmp	r7, #0
   3d120:	f43e ad1f 	beq.w	3bb62 <d_print_comp_inner+0x11a>
   3d124:	3d01      	subs	r5, #1
   3d126:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3d12a:	442f      	add	r7, r5
   3d12c:	f04f 0800 	mov.w	r8, #0
   3d130:	e009      	b.n	3d146 <d_print_comp_inner+0x16fe>
   3d132:	460b      	mov	r3, r1
   3d134:	3101      	adds	r1, #1
   3d136:	42bd      	cmp	r5, r7
   3d138:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3d13c:	54e6      	strb	r6, [r4, r3]
   3d13e:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3d142:	f43e ad0e 	beq.w	3bb62 <d_print_comp_inner+0x11a>
   3d146:	29ff      	cmp	r1, #255	@ 0xff
   3d148:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   3d14c:	d1f1      	bne.n	3d132 <d_print_comp_inner+0x16ea>
   3d14e:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3d152:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3d156:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3d15a:	4620      	mov	r0, r4
   3d15c:	4798      	blx	r3
   3d15e:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3d162:	2101      	movs	r1, #1
   3d164:	440a      	add	r2, r1
   3d166:	2300      	movs	r3, #0
   3d168:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3d16c:	e7e3      	b.n	3d136 <d_print_comp_inner+0x16ee>
   3d16e:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
   3d172:	f8db 700c 	ldr.w	r7, [fp, #12]
   3d176:	9304      	str	r3, [sp, #16]
   3d178:	f04f 0900 	mov.w	r9, #0
   3d17c:	ab04      	add	r3, sp, #16
   3d17e:	f8d4 5120 	ldr.w	r5, [r4, #288]	@ 0x120
   3d182:	f8cd 9014 	str.w	r9, [sp, #20]
   3d186:	f8c4 9120 	str.w	r9, [r4, #288]	@ 0x120
   3d18a:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
   3d18e:	b11f      	cbz	r7, 3d198 <d_print_comp_inner+0x1750>
   3d190:	783b      	ldrb	r3, [r7, #0]
   3d192:	2b57      	cmp	r3, #87	@ 0x57
   3d194:	f000 850a 	beq.w	3dbac <d_print_comp_inner+0x2164>
   3d198:	2301      	movs	r3, #1
   3d19a:	ae06      	add	r6, sp, #24
   3d19c:	29ff      	cmp	r1, #255	@ 0xff
   3d19e:	f8c4 3120 	str.w	r3, [r4, #288]	@ 0x120
   3d1a2:	f000 8407 	beq.w	3d9b4 <d_print_comp_inner+0x1f6c>
   3d1a6:	1c4b      	adds	r3, r1, #1
   3d1a8:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
   3d1ac:	2328      	movs	r3, #40	@ 0x28
   3d1ae:	5463      	strb	r3, [r4, r1]
   3d1b0:	463a      	mov	r2, r7
   3d1b2:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3d1b6:	2111      	movs	r1, #17
   3d1b8:	4f31      	ldr	r7, [pc, #196]	@ (3d280 <d_print_comp_inner+0x1838>)
   3d1ba:	4620      	mov	r0, r4
   3d1bc:	f000 ff12 	bl	3dfe4 <d_print_comp>
   3d1c0:	9b04      	ldr	r3, [sp, #16]
   3d1c2:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3d1c6:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
   3d1ca:	f8c4 5120 	str.w	r5, [r4, #288]	@ 0x120
   3d1ce:	f107 0a02 	add.w	sl, r7, #2
   3d1d2:	f04f 0900 	mov.w	r9, #0
   3d1d6:	e008      	b.n	3d1ea <d_print_comp_inner+0x17a2>
   3d1d8:	460b      	mov	r3, r1
   3d1da:	3101      	adds	r1, #1
   3d1dc:	4557      	cmp	r7, sl
   3d1de:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3d1e2:	54e5      	strb	r5, [r4, r3]
   3d1e4:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   3d1e8:	d013      	beq.n	3d212 <d_print_comp_inner+0x17ca>
   3d1ea:	29ff      	cmp	r1, #255	@ 0xff
   3d1ec:	f817 5b01 	ldrb.w	r5, [r7], #1
   3d1f0:	d1f2      	bne.n	3d1d8 <d_print_comp_inner+0x1790>
   3d1f2:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3d1f6:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3d1fa:	f884 90ff 	strb.w	r9, [r4, #255]	@ 0xff
   3d1fe:	4620      	mov	r0, r4
   3d200:	4798      	blx	r3
   3d202:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3d206:	2101      	movs	r1, #1
   3d208:	440a      	add	r2, r1
   3d20a:	2300      	movs	r3, #0
   3d20c:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3d210:	e7e4      	b.n	3d1dc <d_print_comp_inner+0x1794>
   3d212:	f8db 2010 	ldr.w	r2, [fp, #16]
   3d216:	4917      	ldr	r1, [pc, #92]	@ (3d274 <d_print_comp_inner+0x182c>)
   3d218:	3201      	adds	r2, #1
   3d21a:	4630      	mov	r0, r6
   3d21c:	f002 fbf8 	bl	3fa10 <sprintf>
   3d220:	4630      	mov	r0, r6
   3d222:	f7db fa4d 	bl	186c0 <strlen>
   3d226:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3d22a:	b368      	cbz	r0, 3d288 <d_print_comp_inner+0x1840>
   3d22c:	1837      	adds	r7, r6, r0
   3d22e:	f04f 0800 	mov.w	r8, #0
   3d232:	e008      	b.n	3d246 <d_print_comp_inner+0x17fe>
   3d234:	460b      	mov	r3, r1
   3d236:	3101      	adds	r1, #1
   3d238:	42be      	cmp	r6, r7
   3d23a:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3d23e:	54e5      	strb	r5, [r4, r3]
   3d240:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   3d244:	d020      	beq.n	3d288 <d_print_comp_inner+0x1840>
   3d246:	29ff      	cmp	r1, #255	@ 0xff
   3d248:	f816 5b01 	ldrb.w	r5, [r6], #1
   3d24c:	d1f2      	bne.n	3d234 <d_print_comp_inner+0x17ec>
   3d24e:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3d252:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3d256:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3d25a:	4620      	mov	r0, r4
   3d25c:	4798      	blx	r3
   3d25e:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3d262:	2101      	movs	r1, #1
   3d264:	440a      	add	r2, r1
   3d266:	2300      	movs	r3, #0
   3d268:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3d26c:	e7e4      	b.n	3d238 <d_print_comp_inner+0x17f0>
   3d26e:	bf00      	nop
   3d270:	0004426c 	.word	0x0004426c
   3d274:	000441f4 	.word	0x000441f4
   3d278:	00044264 	.word	0x00044264
   3d27c:	00044508 	.word	0x00044508
   3d280:	000444d0 	.word	0x000444d0
   3d284:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3d288:	29ff      	cmp	r1, #255	@ 0xff
   3d28a:	f47f aa87 	bne.w	3c79c <d_print_comp_inner+0xd54>
   3d28e:	2500      	movs	r5, #0
   3d290:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   3d294:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
   3d298:	4620      	mov	r0, r4
   3d29a:	4798      	blx	r3
   3d29c:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3d2a0:	2201      	movs	r2, #1
   3d2a2:	4413      	add	r3, r2
   3d2a4:	4629      	mov	r1, r5
   3d2a6:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3d2aa:	f7ff ba78 	b.w	3c79e <d_print_comp_inner+0xd56>
   3d2ae:	f8db 2010 	ldr.w	r2, [fp, #16]
   3d2b2:	2111      	movs	r1, #17
   3d2b4:	e47f      	b.n	3cbb6 <d_print_comp_inner+0x116e>
   3d2b6:	f8db 200c 	ldr.w	r2, [fp, #12]
   3d2ba:	49cc      	ldr	r1, [pc, #816]	@ (3d5ec <d_print_comp_inner+0x1ba4>)
   3d2bc:	3201      	adds	r2, #1
   3d2be:	a806      	add	r0, sp, #24
   3d2c0:	f002 fba6 	bl	3fa10 <sprintf>
   3d2c4:	a806      	add	r0, sp, #24
   3d2c6:	f7db f9fb 	bl	186c0 <strlen>
   3d2ca:	2800      	cmp	r0, #0
   3d2cc:	d0da      	beq.n	3d284 <d_print_comp_inner+0x183c>
   3d2ce:	ad06      	add	r5, sp, #24
   3d2d0:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3d2d4:	182f      	adds	r7, r5, r0
   3d2d6:	f04f 0800 	mov.w	r8, #0
   3d2da:	e008      	b.n	3d2ee <d_print_comp_inner+0x18a6>
   3d2dc:	460b      	mov	r3, r1
   3d2de:	3101      	adds	r1, #1
   3d2e0:	42bd      	cmp	r5, r7
   3d2e2:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3d2e6:	54e6      	strb	r6, [r4, r3]
   3d2e8:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3d2ec:	d0cc      	beq.n	3d288 <d_print_comp_inner+0x1840>
   3d2ee:	29ff      	cmp	r1, #255	@ 0xff
   3d2f0:	f815 6b01 	ldrb.w	r6, [r5], #1
   3d2f4:	d1f2      	bne.n	3d2dc <d_print_comp_inner+0x1894>
   3d2f6:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3d2fa:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3d2fe:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3d302:	4620      	mov	r0, r4
   3d304:	4798      	blx	r3
   3d306:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3d30a:	2101      	movs	r1, #1
   3d30c:	440a      	add	r2, r1
   3d30e:	2300      	movs	r3, #0
   3d310:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3d314:	e7e4      	b.n	3d2e0 <d_print_comp_inner+0x1898>
   3d316:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3d31a:	29ff      	cmp	r1, #255	@ 0xff
   3d31c:	f47f ac53 	bne.w	3cbc6 <d_print_comp_inner+0x117e>
   3d320:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   3d324:	f884 70ff 	strb.w	r7, [r4, #255]	@ 0xff
   3d328:	4620      	mov	r0, r4
   3d32a:	4798      	blx	r3
   3d32c:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3d330:	2201      	movs	r2, #1
   3d332:	4413      	add	r3, r2
   3d334:	4639      	mov	r1, r7
   3d336:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3d33a:	e445      	b.n	3cbc8 <d_print_comp_inner+0x1180>
   3d33c:	f8db 200c 	ldr.w	r2, [fp, #12]
   3d340:	2111      	movs	r1, #17
   3d342:	4620      	mov	r0, r4
   3d344:	f000 fe4e 	bl	3dfe4 <d_print_comp>
   3d348:	49a9      	ldr	r1, [pc, #676]	@ (3d5f0 <d_print_comp_inner+0x1ba8>)
   3d34a:	4620      	mov	r0, r4
   3d34c:	f7fc f944 	bl	395d8 <d_append_string>
   3d350:	f8db 2010 	ldr.w	r2, [fp, #16]
   3d354:	2111      	movs	r1, #17
   3d356:	f7fe bc1f 	b.w	3bb98 <d_print_comp_inner+0x150>
   3d35a:	4ea6      	ldr	r6, [pc, #664]	@ (3d5f4 <d_print_comp_inner+0x1bac>)
   3d35c:	f8db 2010 	ldr.w	r2, [fp, #16]
   3d360:	2111      	movs	r1, #17
   3d362:	4620      	mov	r0, r4
   3d364:	f000 fe3e 	bl	3dfe4 <d_print_comp>
   3d368:	f04f 0800 	mov.w	r8, #0
   3d36c:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3d370:	f106 0905 	add.w	r9, r6, #5
   3d374:	e009      	b.n	3d38a <d_print_comp_inner+0x1942>
   3d376:	460b      	mov	r3, r1
   3d378:	3101      	adds	r1, #1
   3d37a:	45b1      	cmp	r9, r6
   3d37c:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3d380:	54e5      	strb	r5, [r4, r3]
   3d382:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   3d386:	f43e ac04 	beq.w	3bb92 <d_print_comp_inner+0x14a>
   3d38a:	29ff      	cmp	r1, #255	@ 0xff
   3d38c:	f816 5b01 	ldrb.w	r5, [r6], #1
   3d390:	d1f1      	bne.n	3d376 <d_print_comp_inner+0x192e>
   3d392:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3d396:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3d39a:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3d39e:	4620      	mov	r0, r4
   3d3a0:	4798      	blx	r3
   3d3a2:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3d3a6:	2101      	movs	r1, #1
   3d3a8:	440a      	add	r2, r1
   3d3aa:	2300      	movs	r3, #0
   3d3ac:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3d3b0:	e7e3      	b.n	3d37a <d_print_comp_inner+0x1932>
   3d3b2:	465a      	mov	r2, fp
   3d3b4:	2111      	movs	r1, #17
   3d3b6:	4620      	mov	r0, r4
   3d3b8:	f000 fe42 	bl	3e040 <d_print_mod>
   3d3bc:	f7fe bc08 	b.w	3bbd0 <d_print_comp_inner+0x188>
   3d3c0:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   3d3c4:	2bff      	cmp	r3, #255	@ 0xff
   3d3c6:	f000 84aa 	beq.w	3dd1e <d_print_comp_inner+0x22d6>
   3d3ca:	1c5a      	adds	r2, r3, #1
   3d3cc:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
   3d3d0:	2111      	movs	r1, #17
   3d3d2:	f804 8003 	strb.w	r8, [r4, r3]
   3d3d6:	f855 2c0c 	ldr.w	r2, [r5, #-12]
   3d3da:	f884 8104 	strb.w	r8, [r4, #260]	@ 0x104
   3d3de:	4620      	mov	r0, r4
   3d3e0:	f000 fe2e 	bl	3e040 <d_print_mod>
   3d3e4:	f7ff b984 	b.w	3c6f0 <d_print_comp_inner+0xca8>
   3d3e8:	4652      	mov	r2, sl
   3d3ea:	2111      	movs	r1, #17
   3d3ec:	4620      	mov	r0, r4
   3d3ee:	f001 fe17 	bl	3f020 <d_print_subexpr>
   3d3f2:	f7fe bfde 	b.w	3c3b2 <d_print_comp_inner+0x96a>
   3d3f6:	f1b8 0f01 	cmp.w	r8, #1
   3d3fa:	f63f a955 	bhi.w	3c6a8 <d_print_comp_inner+0xc60>
   3d3fe:	68ed      	ldr	r5, [r5, #12]
   3d400:	4672      	mov	r2, lr
   3d402:	2d00      	cmp	r5, #0
   3d404:	f000 85c4 	beq.w	3df90 <d_print_comp_inner+0x2548>
   3d408:	2f04      	cmp	r7, #4
   3d40a:	f103 0310 	add.w	r3, r3, #16
   3d40e:	f000 8166 	beq.w	3d6de <d_print_comp_inner+0x1c96>
   3d412:	46bc      	mov	ip, r7
   3d414:	f7ff b933 	b.w	3c67e <d_print_comp_inner+0xc36>
   3d418:	2b00      	cmp	r3, #0
   3d41a:	f000 81bc 	beq.w	3d796 <d_print_comp_inner+0x1d4e>
   3d41e:	4e76      	ldr	r6, [pc, #472]	@ (3d5f8 <d_print_comp_inner+0x1bb0>)
   3d420:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3d424:	f106 0905 	add.w	r9, r6, #5
   3d428:	f04f 0800 	mov.w	r8, #0
   3d42c:	e009      	b.n	3d442 <d_print_comp_inner+0x19fa>
   3d42e:	460b      	mov	r3, r1
   3d430:	3101      	adds	r1, #1
   3d432:	45b1      	cmp	r9, r6
   3d434:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3d438:	54e5      	strb	r5, [r4, r3]
   3d43a:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   3d43e:	f000 81cb 	beq.w	3d7d8 <d_print_comp_inner+0x1d90>
   3d442:	29ff      	cmp	r1, #255	@ 0xff
   3d444:	f816 5b01 	ldrb.w	r5, [r6], #1
   3d448:	d1f1      	bne.n	3d42e <d_print_comp_inner+0x19e6>
   3d44a:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3d44e:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3d452:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3d456:	4620      	mov	r0, r4
   3d458:	4798      	blx	r3
   3d45a:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3d45e:	2101      	movs	r1, #1
   3d460:	440a      	add	r2, r1
   3d462:	2300      	movs	r3, #0
   3d464:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3d468:	e7e3      	b.n	3d432 <d_print_comp_inner+0x19ea>
   3d46a:	4964      	ldr	r1, [pc, #400]	@ (3d5fc <d_print_comp_inner+0x1bb4>)
   3d46c:	f7fc f8b4 	bl	395d8 <d_append_string>
   3d470:	495e      	ldr	r1, [pc, #376]	@ (3d5ec <d_print_comp_inner+0x1ba4>)
   3d472:	462a      	mov	r2, r5
   3d474:	a806      	add	r0, sp, #24
   3d476:	f002 facb 	bl	3fa10 <sprintf>
   3d47a:	a806      	add	r0, sp, #24
   3d47c:	f7db f920 	bl	186c0 <strlen>
   3d480:	b318      	cbz	r0, 3d4ca <d_print_comp_inner+0x1a82>
   3d482:	ad06      	add	r5, sp, #24
   3d484:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3d488:	182f      	adds	r7, r5, r0
   3d48a:	f04f 0800 	mov.w	r8, #0
   3d48e:	e008      	b.n	3d4a2 <d_print_comp_inner+0x1a5a>
   3d490:	460b      	mov	r3, r1
   3d492:	3101      	adds	r1, #1
   3d494:	42af      	cmp	r7, r5
   3d496:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3d49a:	54e6      	strb	r6, [r4, r3]
   3d49c:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3d4a0:	d013      	beq.n	3d4ca <d_print_comp_inner+0x1a82>
   3d4a2:	29ff      	cmp	r1, #255	@ 0xff
   3d4a4:	f815 6b01 	ldrb.w	r6, [r5], #1
   3d4a8:	d1f2      	bne.n	3d490 <d_print_comp_inner+0x1a48>
   3d4aa:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3d4ae:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3d4b2:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3d4b6:	4620      	mov	r0, r4
   3d4b8:	4798      	blx	r3
   3d4ba:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3d4be:	2101      	movs	r1, #1
   3d4c0:	440a      	add	r2, r1
   3d4c2:	2300      	movs	r3, #0
   3d4c4:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3d4c8:	e7e4      	b.n	3d494 <d_print_comp_inner+0x1a4c>
   3d4ca:	217d      	movs	r1, #125	@ 0x7d
   3d4cc:	f7ff bb17 	b.w	3cafe <d_print_comp_inner+0x10b6>
   3d4d0:	2700      	movs	r7, #0
   3d4d2:	f7fe bbae 	b.w	3bc32 <d_print_comp_inner+0x1ea>
   3d4d6:	2e54      	cmp	r6, #84	@ 0x54
   3d4d8:	f47e abcf 	bne.w	3bc7a <d_print_comp_inner+0x232>
   3d4dc:	263a      	movs	r6, #58	@ 0x3a
   3d4de:	f7fe bbe0 	b.w	3bca2 <d_print_comp_inner+0x25a>
   3d4e2:	2500      	movs	r5, #0
   3d4e4:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   3d4e8:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
   3d4ec:	4620      	mov	r0, r4
   3d4ee:	4798      	blx	r3
   3d4f0:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3d4f4:	2201      	movs	r2, #1
   3d4f6:	4413      	add	r3, r2
   3d4f8:	4629      	mov	r1, r5
   3d4fa:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3d4fe:	f7ff bb20 	b.w	3cb42 <d_print_comp_inner+0x10fa>
   3d502:	2500      	movs	r5, #0
   3d504:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   3d508:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
   3d50c:	4620      	mov	r0, r4
   3d50e:	4798      	blx	r3
   3d510:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3d514:	2201      	movs	r2, #1
   3d516:	4413      	add	r3, r2
   3d518:	4629      	mov	r1, r5
   3d51a:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3d51e:	f7ff bb53 	b.w	3cbc8 <d_print_comp_inner+0x1180>
   3d522:	781a      	ldrb	r2, [r3, #0]
   3d524:	2a5b      	cmp	r2, #91	@ 0x5b
   3d526:	d104      	bne.n	3d532 <d_print_comp_inner+0x1aea>
   3d528:	68db      	ldr	r3, [r3, #12]
   3d52a:	2b00      	cmp	r3, #0
   3d52c:	f43e ab16 	beq.w	3bb5c <d_print_comp_inner+0x114>
   3d530:	781a      	ldrb	r2, [r3, #0]
   3d532:	3a58      	subs	r2, #88	@ 0x58
   3d534:	2a02      	cmp	r2, #2
   3d536:	f240 80e5 	bls.w	3d704 <d_print_comp_inner+0x1cbc>
   3d53a:	2301      	movs	r3, #1
   3d53c:	f8c4 3118 	str.w	r3, [r4, #280]	@ 0x118
   3d540:	492a      	ldr	r1, [pc, #168]	@ (3d5ec <d_print_comp_inner+0x1ba4>)
   3d542:	4642      	mov	r2, r8
   3d544:	a806      	add	r0, sp, #24
   3d546:	f002 fa63 	bl	3fa10 <sprintf>
   3d54a:	a806      	add	r0, sp, #24
   3d54c:	f7db f8b8 	bl	186c0 <strlen>
   3d550:	2800      	cmp	r0, #0
   3d552:	f43e ab06 	beq.w	3bb62 <d_print_comp_inner+0x11a>
   3d556:	ad06      	add	r5, sp, #24
   3d558:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3d55c:	182f      	adds	r7, r5, r0
   3d55e:	f04f 0800 	mov.w	r8, #0
   3d562:	e009      	b.n	3d578 <d_print_comp_inner+0x1b30>
   3d564:	460b      	mov	r3, r1
   3d566:	3101      	adds	r1, #1
   3d568:	42af      	cmp	r7, r5
   3d56a:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3d56e:	54e6      	strb	r6, [r4, r3]
   3d570:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3d574:	f43e aaf5 	beq.w	3bb62 <d_print_comp_inner+0x11a>
   3d578:	29ff      	cmp	r1, #255	@ 0xff
   3d57a:	f815 6b01 	ldrb.w	r6, [r5], #1
   3d57e:	d1f1      	bne.n	3d564 <d_print_comp_inner+0x1b1c>
   3d580:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3d584:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3d588:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3d58c:	4620      	mov	r0, r4
   3d58e:	4798      	blx	r3
   3d590:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3d594:	2101      	movs	r1, #1
   3d596:	440a      	add	r2, r1
   3d598:	2300      	movs	r3, #0
   3d59a:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3d59e:	e7e3      	b.n	3d568 <d_print_comp_inner+0x1b20>
   3d5a0:	68d2      	ldr	r2, [r2, #12]
   3d5a2:	2111      	movs	r1, #17
   3d5a4:	4620      	mov	r0, r4
   3d5a6:	f000 fd1d 	bl	3dfe4 <d_print_comp>
   3d5aa:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
   3d5ae:	b113      	cbz	r3, 3d5b6 <d_print_comp_inner+0x1b6e>
   3d5b0:	9b06      	ldr	r3, [sp, #24]
   3d5b2:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
   3d5b6:	f894 3104 	ldrb.w	r3, [r4, #260]	@ 0x104
   3d5ba:	2b3c      	cmp	r3, #60	@ 0x3c
   3d5bc:	f000 83f2 	beq.w	3dda4 <d_print_comp_inner+0x235c>
   3d5c0:	213c      	movs	r1, #60	@ 0x3c
   3d5c2:	4620      	mov	r0, r4
   3d5c4:	f7fb ff84 	bl	394d0 <d_append_char>
   3d5c8:	f8db 300c 	ldr.w	r3, [fp, #12]
   3d5cc:	2111      	movs	r1, #17
   3d5ce:	691a      	ldr	r2, [r3, #16]
   3d5d0:	4620      	mov	r0, r4
   3d5d2:	f000 fd07 	bl	3dfe4 <d_print_comp>
   3d5d6:	f894 3104 	ldrb.w	r3, [r4, #260]	@ 0x104
   3d5da:	2b3e      	cmp	r3, #62	@ 0x3e
   3d5dc:	f000 83dd 	beq.w	3dd9a <d_print_comp_inner+0x2352>
   3d5e0:	213e      	movs	r1, #62	@ 0x3e
   3d5e2:	4620      	mov	r0, r4
   3d5e4:	f7fb ff74 	bl	394d0 <d_append_char>
   3d5e8:	f7fe babb 	b.w	3bb62 <d_print_comp_inner+0x11a>
   3d5ec:	000441f4 	.word	0x000441f4
   3d5f0:	000442f4 	.word	0x000442f4
   3d5f4:	000443b8 	.word	0x000443b8
   3d5f8:	00044280 	.word	0x00044280
   3d5fc:	00044480 	.word	0x00044480
   3d600:	68f3      	ldr	r3, [r6, #12]
   3d602:	681f      	ldr	r7, [r3, #0]
   3d604:	783b      	ldrb	r3, [r7, #0]
   3d606:	f1b3 0261 	subs.w	r2, r3, #97	@ 0x61
   3d60a:	d103      	bne.n	3d614 <d_print_comp_inner+0x1bcc>
   3d60c:	787a      	ldrb	r2, [r7, #1]
   3d60e:	3a64      	subs	r2, #100	@ 0x64
   3d610:	bf08      	it	eq
   3d612:	78ba      	ldrbeq	r2, [r7, #2]
   3d614:	7829      	ldrb	r1, [r5, #0]
   3d616:	b912      	cbnz	r2, 3d61e <d_print_comp_inner+0x1bd6>
   3d618:	2903      	cmp	r1, #3
   3d61a:	f000 83e1 	beq.w	3dde0 <d_print_comp_inner+0x2398>
   3d61e:	2939      	cmp	r1, #57	@ 0x39
   3d620:	f000 8434 	beq.w	3de8c <d_print_comp_inner+0x2444>
   3d624:	2b73      	cmp	r3, #115	@ 0x73
   3d626:	d11f      	bne.n	3d668 <d_print_comp_inner+0x1c20>
   3d628:	787a      	ldrb	r2, [r7, #1]
   3d62a:	2a5a      	cmp	r2, #90	@ 0x5a
   3d62c:	f040 8389 	bne.w	3dd42 <d_print_comp_inner+0x22fa>
   3d630:	f897 8002 	ldrb.w	r8, [r7, #2]
   3d634:	f1b8 0f00 	cmp.w	r8, #0
   3d638:	f040 8383 	bne.w	3dd42 <d_print_comp_inner+0x22fa>
   3d63c:	4629      	mov	r1, r5
   3d63e:	4620      	mov	r0, r4
   3d640:	f7fb ff82 	bl	39548 <d_find_pack>
   3d644:	b930      	cbnz	r0, 3d654 <d_print_comp_inner+0x1c0c>
   3d646:	e008      	b.n	3d65a <d_print_comp_inner+0x1c12>
   3d648:	68c3      	ldr	r3, [r0, #12]
   3d64a:	b133      	cbz	r3, 3d65a <d_print_comp_inner+0x1c12>
   3d64c:	6900      	ldr	r0, [r0, #16]
   3d64e:	f108 0801 	add.w	r8, r8, #1
   3d652:	b110      	cbz	r0, 3d65a <d_print_comp_inner+0x1c12>
   3d654:	7803      	ldrb	r3, [r0, #0]
   3d656:	2b2f      	cmp	r3, #47	@ 0x2f
   3d658:	d0f6      	beq.n	3d648 <d_print_comp_inner+0x1c00>
   3d65a:	4641      	mov	r1, r8
   3d65c:	4620      	mov	r0, r4
   3d65e:	b017      	add	sp, #92	@ 0x5c
   3d660:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d664:	f7fc b81a 	b.w	3969c <d_append_num>
   3d668:	4632      	mov	r2, r6
   3d66a:	2111      	movs	r1, #17
   3d66c:	4620      	mov	r0, r4
   3d66e:	f001 fadb 	bl	3ec28 <d_print_expr_op>
   3d672:	783b      	ldrb	r3, [r7, #0]
   3d674:	2b67      	cmp	r3, #103	@ 0x67
   3d676:	d107      	bne.n	3d688 <d_print_comp_inner+0x1c40>
   3d678:	787a      	ldrb	r2, [r7, #1]
   3d67a:	2a73      	cmp	r2, #115	@ 0x73
   3d67c:	d104      	bne.n	3d688 <d_print_comp_inner+0x1c40>
   3d67e:	78ba      	ldrb	r2, [r7, #2]
   3d680:	b912      	cbnz	r2, 3d688 <d_print_comp_inner+0x1c40>
   3d682:	462a      	mov	r2, r5
   3d684:	f7fe ba87 	b.w	3bb96 <d_print_comp_inner+0x14e>
   3d688:	2b73      	cmp	r3, #115	@ 0x73
   3d68a:	f47f a922 	bne.w	3c8d2 <d_print_comp_inner+0xe8a>
   3d68e:	787b      	ldrb	r3, [r7, #1]
   3d690:	2b74      	cmp	r3, #116	@ 0x74
   3d692:	f47f a91e 	bne.w	3c8d2 <d_print_comp_inner+0xe8a>
   3d696:	78bb      	ldrb	r3, [r7, #2]
   3d698:	2b00      	cmp	r3, #0
   3d69a:	f47f a91a 	bne.w	3c8d2 <d_print_comp_inner+0xe8a>
   3d69e:	2128      	movs	r1, #40	@ 0x28
   3d6a0:	4620      	mov	r0, r4
   3d6a2:	f7fb ff15 	bl	394d0 <d_append_char>
   3d6a6:	2111      	movs	r1, #17
   3d6a8:	462a      	mov	r2, r5
   3d6aa:	4620      	mov	r0, r4
   3d6ac:	f000 fc9a 	bl	3dfe4 <d_print_comp>
   3d6b0:	2129      	movs	r1, #41	@ 0x29
   3d6b2:	f7ff ba24 	b.w	3cafe <d_print_comp_inner+0x10b6>
   3d6b6:	2120      	movs	r1, #32
   3d6b8:	4620      	mov	r0, r4
   3d6ba:	f7fb ff09 	bl	394d0 <d_append_char>
   3d6be:	f8d9 5004 	ldr.w	r5, [r9, #4]
   3d6c2:	e526      	b.n	3d112 <d_print_comp_inner+0x16ca>
   3d6c4:	465a      	mov	r2, fp
   3d6c6:	2111      	movs	r1, #17
   3d6c8:	4620      	mov	r0, r4
   3d6ca:	f000 fcb9 	bl	3e040 <d_print_mod>
   3d6ce:	f7fe ba9b 	b.w	3bc08 <d_print_comp_inner+0x1c0>
   3d6d2:	68c2      	ldr	r2, [r0, #12]
   3d6d4:	f8d4 c114 	ldr.w	ip, [r4, #276]	@ 0x114
   3d6d8:	4683      	mov	fp, r0
   3d6da:	f7fe bb05 	b.w	3bce8 <d_print_comp_inner+0x2a0>
   3d6de:	2301      	movs	r3, #1
   3d6e0:	e9c4 e345 	strd	lr, r3, [r4, #276]	@ 0x114
   3d6e4:	f7fe ba3d 	b.w	3bb62 <d_print_comp_inner+0x11a>
   3d6e8:	2128      	movs	r1, #40	@ 0x28
   3d6ea:	f7fb fef1 	bl	394d0 <d_append_char>
   3d6ee:	4620      	mov	r0, r4
   3d6f0:	68f2      	ldr	r2, [r6, #12]
   3d6f2:	2111      	movs	r1, #17
   3d6f4:	f000 fc76 	bl	3dfe4 <d_print_comp>
   3d6f8:	2129      	movs	r1, #41	@ 0x29
   3d6fa:	4620      	mov	r0, r4
   3d6fc:	f7fb fee8 	bl	394d0 <d_append_char>
   3d700:	f7ff b8e7 	b.w	3c8d2 <d_print_comp_inner+0xe8a>
   3d704:	4bdc      	ldr	r3, [pc, #880]	@ (3da78 <d_print_comp_inner+0x2030>)
   3d706:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
   3d70a:	4628      	mov	r0, r5
   3d70c:	f7da ffd8 	bl	186c0 <strlen>
   3d710:	2800      	cmp	r0, #0
   3d712:	f43f af15 	beq.w	3d540 <d_print_comp_inner+0x1af8>
   3d716:	3d01      	subs	r5, #1
   3d718:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3d71c:	182f      	adds	r7, r5, r0
   3d71e:	f04f 0900 	mov.w	r9, #0
   3d722:	e009      	b.n	3d738 <d_print_comp_inner+0x1cf0>
   3d724:	460b      	mov	r3, r1
   3d726:	3101      	adds	r1, #1
   3d728:	42af      	cmp	r7, r5
   3d72a:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3d72e:	54e6      	strb	r6, [r4, r3]
   3d730:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3d734:	f43f af04 	beq.w	3d540 <d_print_comp_inner+0x1af8>
   3d738:	29ff      	cmp	r1, #255	@ 0xff
   3d73a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   3d73e:	d1f1      	bne.n	3d724 <d_print_comp_inner+0x1cdc>
   3d740:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3d744:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3d748:	f884 90ff 	strb.w	r9, [r4, #255]	@ 0xff
   3d74c:	4620      	mov	r0, r4
   3d74e:	4798      	blx	r3
   3d750:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3d754:	2101      	movs	r1, #1
   3d756:	440a      	add	r2, r1
   3d758:	2300      	movs	r3, #0
   3d75a:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3d75e:	e7e3      	b.n	3d728 <d_print_comp_inner+0x1ce0>
   3d760:	2f07      	cmp	r7, #7
   3d762:	f47e aa66 	bne.w	3bc32 <d_print_comp_inner+0x1ea>
   3d766:	f8db 3010 	ldr.w	r3, [fp, #16]
   3d76a:	7819      	ldrb	r1, [r3, #0]
   3d76c:	2900      	cmp	r1, #0
   3d76e:	f47e aa60 	bne.w	3bc32 <d_print_comp_inner+0x1ea>
   3d772:	6919      	ldr	r1, [r3, #16]
   3d774:	2901      	cmp	r1, #1
   3d776:	f47e aa5c 	bne.w	3bc32 <d_print_comp_inner+0x1ea>
   3d77a:	2e3d      	cmp	r6, #61	@ 0x3d
   3d77c:	f47e aa59 	bne.w	3bc32 <d_print_comp_inner+0x1ea>
   3d780:	68db      	ldr	r3, [r3, #12]
   3d782:	781b      	ldrb	r3, [r3, #0]
   3d784:	2b30      	cmp	r3, #48	@ 0x30
   3d786:	f000 841f 	beq.w	3dfc8 <d_print_comp_inner+0x2580>
   3d78a:	2b31      	cmp	r3, #49	@ 0x31
   3d78c:	f47e aa51 	bne.w	3bc32 <d_print_comp_inner+0x1ea>
   3d790:	49ba      	ldr	r1, [pc, #744]	@ (3da7c <d_print_comp_inner+0x2034>)
   3d792:	f7fe be0f 	b.w	3c3b4 <d_print_comp_inner+0x96c>
   3d796:	4659      	mov	r1, fp
   3d798:	f7fb febc 	bl	39514 <d_lookup_template_argument>
   3d79c:	4602      	mov	r2, r0
   3d79e:	2800      	cmp	r0, #0
   3d7a0:	f43e a9dc 	beq.w	3bb5c <d_print_comp_inner+0x114>
   3d7a4:	7803      	ldrb	r3, [r0, #0]
   3d7a6:	2b2f      	cmp	r3, #47	@ 0x2f
   3d7a8:	d109      	bne.n	3d7be <d_print_comp_inner+0x1d76>
   3d7aa:	f8d4 1124 	ldr.w	r1, [r4, #292]	@ 0x124
   3d7ae:	2900      	cmp	r1, #0
   3d7b0:	db05      	blt.n	3d7be <d_print_comp_inner+0x1d76>
   3d7b2:	f7fb fe17 	bl	393e4 <d_index_template_argument.part.0>
   3d7b6:	4602      	mov	r2, r0
   3d7b8:	2800      	cmp	r0, #0
   3d7ba:	f43e a9cf 	beq.w	3bb5c <d_print_comp_inner+0x114>
   3d7be:	f8d4 5110 	ldr.w	r5, [r4, #272]	@ 0x110
   3d7c2:	682b      	ldr	r3, [r5, #0]
   3d7c4:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
   3d7c8:	2111      	movs	r1, #17
   3d7ca:	4620      	mov	r0, r4
   3d7cc:	f000 fc0a 	bl	3dfe4 <d_print_comp>
   3d7d0:	f8c4 5110 	str.w	r5, [r4, #272]	@ 0x110
   3d7d4:	f7fe b9c5 	b.w	3bb62 <d_print_comp_inner+0x11a>
   3d7d8:	f8db 200c 	ldr.w	r2, [fp, #12]
   3d7dc:	49a8      	ldr	r1, [pc, #672]	@ (3da80 <d_print_comp_inner+0x2038>)
   3d7de:	3201      	adds	r2, #1
   3d7e0:	a806      	add	r0, sp, #24
   3d7e2:	f002 f915 	bl	3fa10 <sprintf>
   3d7e6:	a806      	add	r0, sp, #24
   3d7e8:	f7da ff6a 	bl	186c0 <strlen>
   3d7ec:	4607      	mov	r7, r0
   3d7ee:	2800      	cmp	r0, #0
   3d7f0:	f43e a9b7 	beq.w	3bb62 <d_print_comp_inner+0x11a>
   3d7f4:	ad06      	add	r5, sp, #24
   3d7f6:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3d7fa:	442f      	add	r7, r5
   3d7fc:	f04f 0800 	mov.w	r8, #0
   3d800:	e009      	b.n	3d816 <d_print_comp_inner+0x1dce>
   3d802:	460b      	mov	r3, r1
   3d804:	3101      	adds	r1, #1
   3d806:	42af      	cmp	r7, r5
   3d808:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3d80c:	54e6      	strb	r6, [r4, r3]
   3d80e:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3d812:	f43e a9a6 	beq.w	3bb62 <d_print_comp_inner+0x11a>
   3d816:	29ff      	cmp	r1, #255	@ 0xff
   3d818:	f815 6b01 	ldrb.w	r6, [r5], #1
   3d81c:	d1f1      	bne.n	3d802 <d_print_comp_inner+0x1dba>
   3d81e:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3d822:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3d826:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3d82a:	4620      	mov	r0, r4
   3d82c:	4798      	blx	r3
   3d82e:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3d832:	2101      	movs	r1, #1
   3d834:	440a      	add	r2, r1
   3d836:	2300      	movs	r3, #0
   3d838:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3d83c:	e7e3      	b.n	3d806 <d_print_comp_inner+0x1dbe>
   3d83e:	2600      	movs	r6, #0
   3d840:	5466      	strb	r6, [r4, r1]
   3d842:	4620      	mov	r0, r4
   3d844:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   3d848:	4798      	blx	r3
   3d84a:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3d84e:	f8c4 6100 	str.w	r6, [r4, #256]	@ 0x100
   3d852:	3301      	adds	r3, #1
   3d854:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3d858:	f7fe ba60 	b.w	3bd1c <d_print_comp_inner+0x2d4>
   3d85c:	f8d4 c114 	ldr.w	ip, [r4, #276]	@ 0x114
   3d860:	464f      	mov	r7, r9
   3d862:	68c2      	ldr	r2, [r0, #12]
   3d864:	4683      	mov	fp, r0
   3d866:	f7fe ba3f 	b.w	3bce8 <d_print_comp_inner+0x2a0>
   3d86a:	2600      	movs	r6, #0
   3d86c:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
   3d870:	f8d0 210c 	ldr.w	r2, [r0, #268]	@ 0x10c
   3d874:	f880 60ff 	strb.w	r6, [r0, #255]	@ 0xff
   3d878:	4798      	blx	r3
   3d87a:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3d87e:	2201      	movs	r2, #1
   3d880:	4413      	add	r3, r2
   3d882:	4631      	mov	r1, r6
   3d884:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3d888:	f7fe be04 	b.w	3c494 <d_print_comp_inner+0xa4c>
   3d88c:	2600      	movs	r6, #0
   3d88e:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3d892:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3d896:	f884 60ff 	strb.w	r6, [r4, #255]	@ 0xff
   3d89a:	4620      	mov	r0, r4
   3d89c:	4798      	blx	r3
   3d89e:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3d8a2:	2201      	movs	r2, #1
   3d8a4:	4413      	add	r3, r2
   3d8a6:	4631      	mov	r1, r6
   3d8a8:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3d8ac:	f7fe bd76 	b.w	3c39c <d_print_comp_inner+0x954>
   3d8b0:	f8d8 8010 	ldr.w	r8, [r8, #16]
   3d8b4:	f898 3000 	ldrb.w	r3, [r8]
   3d8b8:	2b48      	cmp	r3, #72	@ 0x48
   3d8ba:	f000 8278 	beq.w	3ddae <d_print_comp_inner+0x2366>
   3d8be:	eb06 1c0c 	add.w	ip, r6, ip, lsl #4
   3d8c2:	468a      	mov	sl, r1
   3d8c4:	4665      	mov	r5, ip
   3d8c6:	f898 3000 	ldrb.w	r3, [r8]
   3d8ca:	2b4e      	cmp	r3, #78	@ 0x4e
   3d8cc:	f1a3 011c 	sub.w	r1, r3, #28
   3d8d0:	f1a3 0250 	sub.w	r2, r3, #80	@ 0x50
   3d8d4:	d007      	beq.n	3d8e6 <d_print_comp_inner+0x1e9e>
   3d8d6:	d804      	bhi.n	3d8e2 <d_print_comp_inner+0x1e9a>
   3d8d8:	2904      	cmp	r1, #4
   3d8da:	d904      	bls.n	3d8e6 <d_print_comp_inner+0x1e9e>
   3d8dc:	4651      	mov	r1, sl
   3d8de:	f7fe beea 	b.w	3c6b6 <d_print_comp_inner+0xc6e>
   3d8e2:	2a01      	cmp	r2, #1
   3d8e4:	d8fa      	bhi.n	3d8dc <d_print_comp_inner+0x1e94>
   3d8e6:	2f04      	cmp	r7, #4
   3d8e8:	46ae      	mov	lr, r5
   3d8ea:	f43e a937 	beq.w	3bb5c <d_print_comp_inner+0x114>
   3d8ee:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   3d8f2:	f105 0c10 	add.w	ip, r5, #16
   3d8f6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
   3d8fa:	2300      	movs	r3, #0
   3d8fc:	612d      	str	r5, [r5, #16]
   3d8fe:	e9ce 8301 	strd	r8, r3, [lr, #4]
   3d902:	f8d8 800c 	ldr.w	r8, [r8, #12]
   3d906:	f8ce a00c 	str.w	sl, [lr, #12]
   3d90a:	3701      	adds	r7, #1
   3d90c:	4665      	mov	r5, ip
   3d90e:	f8c4 c114 	str.w	ip, [r4, #276]	@ 0x114
   3d912:	f1b8 0f00 	cmp.w	r8, #0
   3d916:	d1d6      	bne.n	3d8c6 <d_print_comp_inner+0x1e7e>
   3d918:	f7fe b920 	b.w	3bb5c <d_print_comp_inner+0x114>
   3d91c:	2600      	movs	r6, #0
   3d91e:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3d922:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3d926:	f884 60ff 	strb.w	r6, [r4, #255]	@ 0xff
   3d92a:	4620      	mov	r0, r4
   3d92c:	4798      	blx	r3
   3d92e:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3d932:	2201      	movs	r2, #1
   3d934:	4413      	add	r3, r2
   3d936:	4631      	mov	r1, r6
   3d938:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3d93c:	f7ff b8ef 	b.w	3cb1e <d_print_comp_inner+0x10d6>
   3d940:	2600      	movs	r6, #0
   3d942:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
   3d946:	f8d0 210c 	ldr.w	r2, [r0, #268]	@ 0x10c
   3d94a:	f880 60ff 	strb.w	r6, [r0, #255]	@ 0xff
   3d94e:	4798      	blx	r3
   3d950:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3d954:	2201      	movs	r2, #1
   3d956:	4413      	add	r3, r2
   3d958:	4631      	mov	r1, r6
   3d95a:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3d95e:	f7fe bcb8 	b.w	3c2d2 <d_print_comp_inner+0x88a>
   3d962:	4948      	ldr	r1, [pc, #288]	@ (3da84 <d_print_comp_inner+0x203c>)
   3d964:	4620      	mov	r0, r4
   3d966:	f7fb fe37 	bl	395d8 <d_append_string>
   3d96a:	68ff      	ldr	r7, [r7, #12]
   3d96c:	463a      	mov	r2, r7
   3d96e:	f7fe b912 	b.w	3bb96 <d_print_comp_inner+0x14e>
   3d972:	2500      	movs	r5, #0
   3d974:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   3d978:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
   3d97c:	4620      	mov	r0, r4
   3d97e:	4798      	blx	r3
   3d980:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3d984:	2201      	movs	r2, #1
   3d986:	4413      	add	r3, r2
   3d988:	4629      	mov	r1, r5
   3d98a:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3d98e:	f7fe bda1 	b.w	3c4d4 <d_print_comp_inner+0xa8c>
   3d992:	2600      	movs	r6, #0
   3d994:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
   3d998:	f8d0 210c 	ldr.w	r2, [r0, #268]	@ 0x10c
   3d99c:	f880 60ff 	strb.w	r6, [r0, #255]	@ 0xff
   3d9a0:	4798      	blx	r3
   3d9a2:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3d9a6:	2201      	movs	r2, #1
   3d9a8:	4413      	add	r3, r2
   3d9aa:	4631      	mov	r1, r6
   3d9ac:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3d9b0:	f7ff b8de 	b.w	3cb70 <d_print_comp_inner+0x1128>
   3d9b4:	f04f 0800 	mov.w	r8, #0
   3d9b8:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   3d9bc:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3d9c0:	4620      	mov	r0, r4
   3d9c2:	4798      	blx	r3
   3d9c4:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3d9c8:	3301      	adds	r3, #1
   3d9ca:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3d9ce:	4641      	mov	r1, r8
   3d9d0:	2301      	movs	r3, #1
   3d9d2:	f7ff bbe9 	b.w	3d1a8 <d_print_comp_inner+0x1760>
   3d9d6:	2600      	movs	r6, #0
   3d9d8:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3d9dc:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3d9e0:	f884 60ff 	strb.w	r6, [r4, #255]	@ 0xff
   3d9e4:	4620      	mov	r0, r4
   3d9e6:	4798      	blx	r3
   3d9e8:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3d9ec:	2201      	movs	r2, #1
   3d9ee:	4413      	add	r3, r2
   3d9f0:	4631      	mov	r1, r6
   3d9f2:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3d9f6:	f7fe bec1 	b.w	3c77c <d_print_comp_inner+0xd34>
   3d9fa:	2500      	movs	r5, #0
   3d9fc:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   3da00:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
   3da04:	4620      	mov	r0, r4
   3da06:	4798      	blx	r3
   3da08:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3da0c:	3301      	adds	r3, #1
   3da0e:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3da12:	4629      	mov	r1, r5
   3da14:	2301      	movs	r3, #1
   3da16:	f7fe be14 	b.w	3c642 <d_print_comp_inner+0xbfa>
   3da1a:	2120      	movs	r1, #32
   3da1c:	4620      	mov	r0, r4
   3da1e:	f7fb fd57 	bl	394d0 <d_append_char>
   3da22:	f7fe be08 	b.w	3c636 <d_print_comp_inner+0xbee>
   3da26:	2600      	movs	r6, #0
   3da28:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   3da2c:	f884 60ff 	strb.w	r6, [r4, #255]	@ 0xff
   3da30:	4620      	mov	r0, r4
   3da32:	4798      	blx	r3
   3da34:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3da38:	3301      	adds	r3, #1
   3da3a:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3da3e:	4631      	mov	r1, r6
   3da40:	2301      	movs	r3, #1
   3da42:	f7fe bde7 	b.w	3c614 <d_print_comp_inner+0xbcc>
   3da46:	2120      	movs	r1, #32
   3da48:	4620      	mov	r0, r4
   3da4a:	f7fb fd41 	bl	394d0 <d_append_char>
   3da4e:	f7fe bddb 	b.w	3c608 <d_print_comp_inner+0xbc0>
   3da52:	215b      	movs	r1, #91	@ 0x5b
   3da54:	4620      	mov	r0, r4
   3da56:	f7fb fd3b 	bl	394d0 <d_append_char>
   3da5a:	2111      	movs	r1, #17
   3da5c:	f8db 2010 	ldr.w	r2, [fp, #16]
   3da60:	4620      	mov	r0, r4
   3da62:	f000 fabf 	bl	3dfe4 <d_print_comp>
   3da66:	215d      	movs	r1, #93	@ 0x5d
   3da68:	f7ff b849 	b.w	3cafe <d_print_comp_inner+0x10b6>
   3da6c:	212d      	movs	r1, #45	@ 0x2d
   3da6e:	4620      	mov	r0, r4
   3da70:	f7fb fd2e 	bl	394d0 <d_append_char>
   3da74:	f7fe b8fe 	b.w	3bc74 <d_print_comp_inner+0x22c>
   3da78:	0004c360 	.word	0x0004c360
   3da7c:	00044450 	.word	0x00044450
   3da80:	000441f4 	.word	0x000441f4
   3da84:	0004427c 	.word	0x0004427c
   3da88:	2600      	movs	r6, #0
   3da8a:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   3da8e:	f884 60ff 	strb.w	r6, [r4, #255]	@ 0xff
   3da92:	4620      	mov	r0, r4
   3da94:	4798      	blx	r3
   3da96:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3da9a:	3301      	adds	r3, #1
   3da9c:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3daa0:	4631      	mov	r1, r6
   3daa2:	2301      	movs	r3, #1
   3daa4:	f7fe b8db 	b.w	3bc5e <d_print_comp_inner+0x216>
   3daa8:	2600      	movs	r6, #0
   3daaa:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   3daae:	f884 60ff 	strb.w	r6, [r4, #255]	@ 0xff
   3dab2:	4620      	mov	r0, r4
   3dab4:	4798      	blx	r3
   3dab6:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3daba:	f8db 200c 	ldr.w	r2, [fp, #12]
   3dabe:	3301      	adds	r3, #1
   3dac0:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3dac4:	4631      	mov	r1, r6
   3dac6:	2301      	movs	r3, #1
   3dac8:	f7fe b8b9 	b.w	3bc3e <d_print_comp_inner+0x1f6>
   3dacc:	781b      	ldrb	r3, [r3, #0]
   3dace:	f1a3 0172 	sub.w	r1, r3, #114	@ 0x72
   3dad2:	2901      	cmp	r1, #1
   3dad4:	d903      	bls.n	3dade <d_print_comp_inner+0x2096>
   3dad6:	3b63      	subs	r3, #99	@ 0x63
   3dad8:	2b01      	cmp	r3, #1
   3dada:	f63e afbf 	bhi.w	3ca5c <d_print_comp_inner+0x1014>
   3dade:	2111      	movs	r1, #17
   3dae0:	4620      	mov	r0, r4
   3dae2:	f001 f8a1 	bl	3ec28 <d_print_expr_op>
   3dae6:	213c      	movs	r1, #60	@ 0x3c
   3dae8:	4620      	mov	r0, r4
   3daea:	f7fb fcf1 	bl	394d0 <d_append_char>
   3daee:	f8db 3010 	ldr.w	r3, [fp, #16]
   3daf2:	2111      	movs	r1, #17
   3daf4:	68da      	ldr	r2, [r3, #12]
   3daf6:	4620      	mov	r0, r4
   3daf8:	f000 fa74 	bl	3dfe4 <d_print_comp>
   3dafc:	49bf      	ldr	r1, [pc, #764]	@ (3ddfc <d_print_comp_inner+0x23b4>)
   3dafe:	4620      	mov	r0, r4
   3db00:	f7fb fd6a 	bl	395d8 <d_append_string>
   3db04:	f8db 3010 	ldr.w	r3, [fp, #16]
   3db08:	2111      	movs	r1, #17
   3db0a:	691a      	ldr	r2, [r3, #16]
   3db0c:	4620      	mov	r0, r4
   3db0e:	f000 fa69 	bl	3dfe4 <d_print_comp>
   3db12:	2129      	movs	r1, #41	@ 0x29
   3db14:	f7fe bff3 	b.w	3cafe <d_print_comp_inner+0x10b6>
   3db18:	f8d0 7134 	ldr.w	r7, [r0, #308]	@ 0x134
   3db1c:	2f00      	cmp	r7, #0
   3db1e:	f340 81de 	ble.w	3dede <d_print_comp_inner+0x2496>
   3db22:	f8d0 c130 	ldr.w	ip, [r0, #304]	@ 0x130
   3db26:	464b      	mov	r3, r9
   3db28:	4660      	mov	r0, ip
   3db2a:	e004      	b.n	3db36 <d_print_comp_inner+0x20ee>
   3db2c:	429f      	cmp	r7, r3
   3db2e:	f100 0008 	add.w	r0, r0, #8
   3db32:	f000 81d4 	beq.w	3dede <d_print_comp_inner+0x2496>
   3db36:	f85c 1033 	ldr.w	r1, [ip, r3, lsl #3]
   3db3a:	428a      	cmp	r2, r1
   3db3c:	f103 0301 	add.w	r3, r3, #1
   3db40:	d1f4      	bne.n	3db2c <d_print_comp_inner+0x20e4>
   3db42:	2800      	cmp	r0, #0
   3db44:	f000 81cb 	beq.w	3dede <d_print_comp_inner+0x2496>
   3db48:	f8d4 712c 	ldr.w	r7, [r4, #300]	@ 0x12c
   3db4c:	2f00      	cmp	r7, #0
   3db4e:	f000 8136 	beq.w	3ddbe <d_print_comp_inner+0x2376>
   3db52:	463b      	mov	r3, r7
   3db54:	e003      	b.n	3db5e <d_print_comp_inner+0x2116>
   3db56:	685b      	ldr	r3, [r3, #4]
   3db58:	2b00      	cmp	r3, #0
   3db5a:	f000 8130 	beq.w	3ddbe <d_print_comp_inner+0x2376>
   3db5e:	6819      	ldr	r1, [r3, #0]
   3db60:	4291      	cmp	r1, r2
   3db62:	d003      	beq.n	3db6c <d_print_comp_inner+0x2124>
   3db64:	4559      	cmp	r1, fp
   3db66:	d1f6      	bne.n	3db56 <d_print_comp_inner+0x210e>
   3db68:	429f      	cmp	r7, r3
   3db6a:	d0f4      	beq.n	3db56 <d_print_comp_inner+0x210e>
   3db6c:	4611      	mov	r1, r2
   3db6e:	4620      	mov	r0, r4
   3db70:	9200      	str	r2, [sp, #0]
   3db72:	f7fb fccf 	bl	39514 <d_lookup_template_argument>
   3db76:	9a00      	ldr	r2, [sp, #0]
   3db78:	2800      	cmp	r0, #0
   3db7a:	f43d afef 	beq.w	3bb5c <d_print_comp_inner+0x114>
   3db7e:	7803      	ldrb	r3, [r0, #0]
   3db80:	2b2f      	cmp	r3, #47	@ 0x2f
   3db82:	f000 8164 	beq.w	3de4e <d_print_comp_inner+0x2406>
   3db86:	464f      	mov	r7, r9
   3db88:	f7fe b8a3 	b.w	3bcd2 <d_print_comp_inner+0x28a>
   3db8c:	2700      	movs	r7, #0
   3db8e:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   3db92:	f884 70ff 	strb.w	r7, [r4, #255]	@ 0xff
   3db96:	4620      	mov	r0, r4
   3db98:	4798      	blx	r3
   3db9a:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3db9e:	3301      	adds	r3, #1
   3dba0:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3dba4:	4639      	mov	r1, r7
   3dba6:	2301      	movs	r3, #1
   3dba8:	f7fe b881 	b.w	3bcae <d_print_comp_inner+0x266>
   3dbac:	213c      	movs	r1, #60	@ 0x3c
   3dbae:	4620      	mov	r0, r4
   3dbb0:	9705      	str	r7, [sp, #20]
   3dbb2:	f7fb fc8d 	bl	394d0 <d_append_char>
   3dbb6:	f8d7 a00c 	ldr.w	sl, [r7, #12]
   3dbba:	ae06      	add	r6, sp, #24
   3dbbc:	f1ba 0f00 	cmp.w	sl, #0
   3dbc0:	d063      	beq.n	3dc8a <d_print_comp_inner+0x2242>
   3dbc2:	e9cd 7501 	strd	r7, r5, [sp, #4]
   3dbc6:	4633      	mov	r3, r6
   3dbc8:	f8cd b00c 	str.w	fp, [sp, #12]
   3dbcc:	4656      	mov	r6, sl
   3dbce:	469a      	mov	sl, r3
   3dbd0:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
   3dbd4:	1c5a      	adds	r2, r3, #1
   3dbd6:	f8c4 2120 	str.w	r2, [r4, #288]	@ 0x120
   3dbda:	2b00      	cmp	r3, #0
   3dbdc:	f040 808b 	bne.w	3dcf6 <d_print_comp_inner+0x22ae>
   3dbe0:	4632      	mov	r2, r6
   3dbe2:	2111      	movs	r1, #17
   3dbe4:	4620      	mov	r0, r4
   3dbe6:	f000 f9fd 	bl	3dfe4 <d_print_comp>
   3dbea:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   3dbee:	2bff      	cmp	r3, #255	@ 0xff
   3dbf0:	f000 8086 	beq.w	3dd00 <d_print_comp_inner+0x22b8>
   3dbf4:	1c59      	adds	r1, r3, #1
   3dbf6:	2220      	movs	r2, #32
   3dbf8:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3dbfc:	54e2      	strb	r2, [r4, r3]
   3dbfe:	f884 2104 	strb.w	r2, [r4, #260]	@ 0x104
   3dc02:	7833      	ldrb	r3, [r6, #0]
   3dc04:	f8d4 2120 	ldr.w	r2, [r4, #288]	@ 0x120
   3dc08:	9100      	str	r1, [sp, #0]
   3dc0a:	2b5b      	cmp	r3, #91	@ 0x5b
   3dc0c:	bf04      	itt	eq
   3dc0e:	68f6      	ldreq	r6, [r6, #12]
   3dc10:	7833      	ldrbeq	r3, [r6, #0]
   3dc12:	3b58      	subs	r3, #88	@ 0x58
   3dc14:	2b02      	cmp	r3, #2
   3dc16:	f102 38ff 	add.w	r8, r2, #4294967295	@ 0xffffffff
   3dc1a:	d942      	bls.n	3dca2 <d_print_comp_inner+0x225a>
   3dc1c:	2301      	movs	r3, #1
   3dc1e:	f8c4 3118 	str.w	r3, [r4, #280]	@ 0x118
   3dc22:	4977      	ldr	r1, [pc, #476]	@ (3de00 <d_print_comp_inner+0x23b8>)
   3dc24:	4642      	mov	r2, r8
   3dc26:	4650      	mov	r0, sl
   3dc28:	f001 fef2 	bl	3fa10 <sprintf>
   3dc2c:	4650      	mov	r0, sl
   3dc2e:	f7da fd47 	bl	186c0 <strlen>
   3dc32:	b310      	cbz	r0, 3dc7a <d_print_comp_inner+0x2232>
   3dc34:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3dc38:	eb0a 0800 	add.w	r8, sl, r0
   3dc3c:	4655      	mov	r5, sl
   3dc3e:	e008      	b.n	3dc52 <d_print_comp_inner+0x220a>
   3dc40:	460a      	mov	r2, r1
   3dc42:	3101      	adds	r1, #1
   3dc44:	45a8      	cmp	r8, r5
   3dc46:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3dc4a:	54a7      	strb	r7, [r4, r2]
   3dc4c:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
   3dc50:	d013      	beq.n	3dc7a <d_print_comp_inner+0x2232>
   3dc52:	29ff      	cmp	r1, #255	@ 0xff
   3dc54:	f815 7b01 	ldrb.w	r7, [r5], #1
   3dc58:	d1f2      	bne.n	3dc40 <d_print_comp_inner+0x21f8>
   3dc5a:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3dc5e:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3dc62:	f884 90ff 	strb.w	r9, [r4, #255]	@ 0xff
   3dc66:	4620      	mov	r0, r4
   3dc68:	4798      	blx	r3
   3dc6a:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3dc6e:	2101      	movs	r1, #1
   3dc70:	440b      	add	r3, r1
   3dc72:	2200      	movs	r2, #0
   3dc74:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3dc78:	e7e4      	b.n	3dc44 <d_print_comp_inner+0x21fc>
   3dc7a:	6936      	ldr	r6, [r6, #16]
   3dc7c:	2e00      	cmp	r6, #0
   3dc7e:	d1a7      	bne.n	3dbd0 <d_print_comp_inner+0x2188>
   3dc80:	e9dd 7501 	ldrd	r7, r5, [sp, #4]
   3dc84:	f8dd b00c 	ldr.w	fp, [sp, #12]
   3dc88:	4656      	mov	r6, sl
   3dc8a:	213e      	movs	r1, #62	@ 0x3e
   3dc8c:	4620      	mov	r0, r4
   3dc8e:	f7fb fc1f 	bl	394d0 <d_append_char>
   3dc92:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
   3dc96:	693f      	ldr	r7, [r7, #16]
   3dc98:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3dc9c:	3301      	adds	r3, #1
   3dc9e:	f7ff ba7d 	b.w	3d19c <d_print_comp_inner+0x1754>
   3dca2:	4a58      	ldr	r2, [pc, #352]	@ (3de04 <d_print_comp_inner+0x23bc>)
   3dca4:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   3dca8:	4628      	mov	r0, r5
   3dcaa:	f7da fd09 	bl	186c0 <strlen>
   3dcae:	9900      	ldr	r1, [sp, #0]
   3dcb0:	2800      	cmp	r0, #0
   3dcb2:	d0b6      	beq.n	3dc22 <d_print_comp_inner+0x21da>
   3dcb4:	3d01      	subs	r5, #1
   3dcb6:	eb05 0b00 	add.w	fp, r5, r0
   3dcba:	e008      	b.n	3dcce <d_print_comp_inner+0x2286>
   3dcbc:	460a      	mov	r2, r1
   3dcbe:	3101      	adds	r1, #1
   3dcc0:	455d      	cmp	r5, fp
   3dcc2:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3dcc6:	54a7      	strb	r7, [r4, r2]
   3dcc8:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
   3dccc:	d0a9      	beq.n	3dc22 <d_print_comp_inner+0x21da>
   3dcce:	29ff      	cmp	r1, #255	@ 0xff
   3dcd0:	f815 7f01 	ldrb.w	r7, [r5, #1]!
   3dcd4:	d1f2      	bne.n	3dcbc <d_print_comp_inner+0x2274>
   3dcd6:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3dcda:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3dcde:	f884 90ff 	strb.w	r9, [r4, #255]	@ 0xff
   3dce2:	4620      	mov	r0, r4
   3dce4:	4798      	blx	r3
   3dce6:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3dcea:	2101      	movs	r1, #1
   3dcec:	440b      	add	r3, r1
   3dcee:	2200      	movs	r2, #0
   3dcf0:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3dcf4:	e7e4      	b.n	3dcc0 <d_print_comp_inner+0x2278>
   3dcf6:	4944      	ldr	r1, [pc, #272]	@ (3de08 <d_print_comp_inner+0x23c0>)
   3dcf8:	4620      	mov	r0, r4
   3dcfa:	f7fb fc6d 	bl	395d8 <d_append_string>
   3dcfe:	e76f      	b.n	3dbe0 <d_print_comp_inner+0x2198>
   3dd00:	4619      	mov	r1, r3
   3dd02:	f884 90ff 	strb.w	r9, [r4, #255]	@ 0xff
   3dd06:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   3dd0a:	4620      	mov	r0, r4
   3dd0c:	4798      	blx	r3
   3dd0e:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3dd12:	2101      	movs	r1, #1
   3dd14:	440a      	add	r2, r1
   3dd16:	2300      	movs	r3, #0
   3dd18:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3dd1c:	e76b      	b.n	3dbf6 <d_print_comp_inner+0x21ae>
   3dd1e:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3dd22:	f884 70ff 	strb.w	r7, [r4, #255]	@ 0xff
   3dd26:	4619      	mov	r1, r3
   3dd28:	4620      	mov	r0, r4
   3dd2a:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3dd2e:	4798      	blx	r3
   3dd30:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3dd34:	3201      	adds	r2, #1
   3dd36:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3dd3a:	463b      	mov	r3, r7
   3dd3c:	2201      	movs	r2, #1
   3dd3e:	f7ff bb45 	b.w	3d3cc <d_print_comp_inner+0x1984>
   3dd42:	2b73      	cmp	r3, #115	@ 0x73
   3dd44:	f47f ac90 	bne.w	3d668 <d_print_comp_inner+0x1c20>
   3dd48:	787b      	ldrb	r3, [r7, #1]
   3dd4a:	2b50      	cmp	r3, #80	@ 0x50
   3dd4c:	f47f ac8c 	bne.w	3d668 <d_print_comp_inner+0x1c20>
   3dd50:	78bb      	ldrb	r3, [r7, #2]
   3dd52:	2b00      	cmp	r3, #0
   3dd54:	f47f ac88 	bne.w	3d668 <d_print_comp_inner+0x1c20>
   3dd58:	461e      	mov	r6, r3
   3dd5a:	e003      	b.n	3dd64 <d_print_comp_inner+0x231c>
   3dd5c:	3601      	adds	r6, #1
   3dd5e:	692d      	ldr	r5, [r5, #16]
   3dd60:	2d00      	cmp	r5, #0
   3dd62:	d048      	beq.n	3ddf6 <d_print_comp_inner+0x23ae>
   3dd64:	782b      	ldrb	r3, [r5, #0]
   3dd66:	2b2f      	cmp	r3, #47	@ 0x2f
   3dd68:	d145      	bne.n	3ddf6 <d_print_comp_inner+0x23ae>
   3dd6a:	68eb      	ldr	r3, [r5, #12]
   3dd6c:	2b00      	cmp	r3, #0
   3dd6e:	d042      	beq.n	3ddf6 <d_print_comp_inner+0x23ae>
   3dd70:	781a      	ldrb	r2, [r3, #0]
   3dd72:	2a4c      	cmp	r2, #76	@ 0x4c
   3dd74:	d1f2      	bne.n	3dd5c <d_print_comp_inner+0x2314>
   3dd76:	68d9      	ldr	r1, [r3, #12]
   3dd78:	4620      	mov	r0, r4
   3dd7a:	f7fb fbe5 	bl	39548 <d_find_pack>
   3dd7e:	4602      	mov	r2, r0
   3dd80:	b148      	cbz	r0, 3dd96 <d_print_comp_inner+0x234e>
   3dd82:	2200      	movs	r2, #0
   3dd84:	e004      	b.n	3dd90 <d_print_comp_inner+0x2348>
   3dd86:	68c1      	ldr	r1, [r0, #12]
   3dd88:	b129      	cbz	r1, 3dd96 <d_print_comp_inner+0x234e>
   3dd8a:	6900      	ldr	r0, [r0, #16]
   3dd8c:	3201      	adds	r2, #1
   3dd8e:	b110      	cbz	r0, 3dd96 <d_print_comp_inner+0x234e>
   3dd90:	7801      	ldrb	r1, [r0, #0]
   3dd92:	292f      	cmp	r1, #47	@ 0x2f
   3dd94:	d0f7      	beq.n	3dd86 <d_print_comp_inner+0x233e>
   3dd96:	4416      	add	r6, r2
   3dd98:	e7e1      	b.n	3dd5e <d_print_comp_inner+0x2316>
   3dd9a:	2120      	movs	r1, #32
   3dd9c:	4620      	mov	r0, r4
   3dd9e:	f7fb fb97 	bl	394d0 <d_append_char>
   3dda2:	e41d      	b.n	3d5e0 <d_print_comp_inner+0x1b98>
   3dda4:	2120      	movs	r1, #32
   3dda6:	4620      	mov	r0, r4
   3dda8:	f7fb fb92 	bl	394d0 <d_append_char>
   3ddac:	e408      	b.n	3d5c0 <d_print_comp_inner+0x1b78>
   3ddae:	f8d8 800c 	ldr.w	r8, [r8, #12]
   3ddb2:	f1b8 0f00 	cmp.w	r8, #0
   3ddb6:	f47f ad82 	bne.w	3d8be <d_print_comp_inner+0x1e76>
   3ddba:	f7fd becf 	b.w	3bb5c <d_print_comp_inner+0x114>
   3ddbe:	6843      	ldr	r3, [r0, #4]
   3ddc0:	f8d4 8110 	ldr.w	r8, [r4, #272]	@ 0x110
   3ddc4:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
   3ddc8:	4611      	mov	r1, r2
   3ddca:	4620      	mov	r0, r4
   3ddcc:	9200      	str	r2, [sp, #0]
   3ddce:	f7fb fba1 	bl	39514 <d_lookup_template_argument>
   3ddd2:	2800      	cmp	r0, #0
   3ddd4:	f000 80e4 	beq.w	3dfa0 <d_print_comp_inner+0x2558>
   3ddd8:	9a00      	ldr	r2, [sp, #0]
   3ddda:	f04f 0901 	mov.w	r9, #1
   3ddde:	e6ce      	b.n	3db7e <d_print_comp_inner+0x2136>
   3dde0:	68ea      	ldr	r2, [r5, #12]
   3dde2:	7811      	ldrb	r1, [r2, #0]
   3dde4:	2901      	cmp	r1, #1
   3dde6:	f47f ac1d 	bne.w	3d624 <d_print_comp_inner+0x1bdc>
   3ddea:	6929      	ldr	r1, [r5, #16]
   3ddec:	7809      	ldrb	r1, [r1, #0]
   3ddee:	2929      	cmp	r1, #41	@ 0x29
   3ddf0:	bf08      	it	eq
   3ddf2:	4615      	moveq	r5, r2
   3ddf4:	e416      	b.n	3d624 <d_print_comp_inner+0x1bdc>
   3ddf6:	4631      	mov	r1, r6
   3ddf8:	e430      	b.n	3d65c <d_print_comp_inner+0x1c14>
   3ddfa:	bf00      	nop
   3ddfc:	00044420 	.word	0x00044420
   3de00:	000441f4 	.word	0x000441f4
   3de04:	0004c360 	.word	0x0004c360
   3de08:	00044264 	.word	0x00044264
   3de0c:	2e3e      	cmp	r6, #62	@ 0x3e
   3de0e:	f000 80cb 	beq.w	3dfa8 <d_print_comp_inner+0x2560>
   3de12:	f8db 2010 	ldr.w	r2, [fp, #16]
   3de16:	2111      	movs	r1, #17
   3de18:	4620      	mov	r0, r4
   3de1a:	3f02      	subs	r7, #2
   3de1c:	f000 f8e2 	bl	3dfe4 <d_print_comp>
   3de20:	2f04      	cmp	r7, #4
   3de22:	f63d ae9e 	bhi.w	3bb62 <d_print_comp_inner+0x11a>
   3de26:	e8df f007 	tbb	[pc, r7]
   3de2a:	0c0f      	.short	0x0c0f
   3de2c:	0609      	.short	0x0609
   3de2e:	03          	.byte	0x03
   3de2f:	00          	.byte	0x00
   3de30:	4967      	ldr	r1, [pc, #412]	@ (3dfd0 <d_print_comp_inner+0x2588>)
   3de32:	f7fe babf 	b.w	3c3b4 <d_print_comp_inner+0x96c>
   3de36:	4967      	ldr	r1, [pc, #412]	@ (3dfd4 <d_print_comp_inner+0x258c>)
   3de38:	f7fe babc 	b.w	3c3b4 <d_print_comp_inner+0x96c>
   3de3c:	4966      	ldr	r1, [pc, #408]	@ (3dfd8 <d_print_comp_inner+0x2590>)
   3de3e:	f7fe bab9 	b.w	3c3b4 <d_print_comp_inner+0x96c>
   3de42:	216c      	movs	r1, #108	@ 0x6c
   3de44:	f7fe be5b 	b.w	3cafe <d_print_comp_inner+0x10b6>
   3de48:	2175      	movs	r1, #117	@ 0x75
   3de4a:	f7fe be58 	b.w	3cafe <d_print_comp_inner+0x10b6>
   3de4e:	f8d4 1124 	ldr.w	r1, [r4, #292]	@ 0x124
   3de52:	2900      	cmp	r1, #0
   3de54:	f2c0 80ac 	blt.w	3dfb0 <d_print_comp_inner+0x2568>
   3de58:	f7fb fac4 	bl	393e4 <d_index_template_argument.part.0>
   3de5c:	2800      	cmp	r0, #0
   3de5e:	f000 809b 	beq.w	3df98 <d_print_comp_inner+0x2550>
   3de62:	7803      	ldrb	r3, [r0, #0]
   3de64:	464f      	mov	r7, r9
   3de66:	f7fd bf34 	b.w	3bcd2 <d_print_comp_inner+0x28a>
   3de6a:	4620      	mov	r0, r4
   3de6c:	215b      	movs	r1, #91	@ 0x5b
   3de6e:	f7fb fb2f 	bl	394d0 <d_append_char>
   3de72:	f8db 3010 	ldr.w	r3, [fp, #16]
   3de76:	4620      	mov	r0, r4
   3de78:	691a      	ldr	r2, [r3, #16]
   3de7a:	2111      	movs	r1, #17
   3de7c:	f000 f8b2 	bl	3dfe4 <d_print_comp>
   3de80:	215d      	movs	r1, #93	@ 0x5d
   3de82:	4620      	mov	r0, r4
   3de84:	f7fb fb24 	bl	394d0 <d_append_char>
   3de88:	f7fe be28 	b.w	3cadc <d_print_comp_inner+0x1094>
   3de8c:	68ea      	ldr	r2, [r5, #12]
   3de8e:	2111      	movs	r1, #17
   3de90:	4620      	mov	r0, r4
   3de92:	f001 f8c5 	bl	3f020 <d_print_subexpr>
   3de96:	4632      	mov	r2, r6
   3de98:	f7fe bd24 	b.w	3c8e4 <d_print_comp_inner+0xe9c>
   3de9c:	68da      	ldr	r2, [r3, #12]
   3de9e:	6891      	ldr	r1, [r2, #8]
   3dea0:	2901      	cmp	r1, #1
   3dea2:	f47e adf1 	bne.w	3ca88 <d_print_comp_inner+0x1040>
   3dea6:	6852      	ldr	r2, [r2, #4]
   3dea8:	7812      	ldrb	r2, [r2, #0]
   3deaa:	2a3e      	cmp	r2, #62	@ 0x3e
   3deac:	f47e adec 	bne.w	3ca88 <d_print_comp_inner+0x1040>
   3deb0:	2128      	movs	r1, #40	@ 0x28
   3deb2:	4620      	mov	r0, r4
   3deb4:	f7fb fb0c 	bl	394d0 <d_append_char>
   3deb8:	f8db 300c 	ldr.w	r3, [fp, #12]
   3debc:	f7fe bde4 	b.w	3ca88 <d_print_comp_inner+0x1040>
   3dec0:	68d2      	ldr	r2, [r2, #12]
   3dec2:	f7fd bf11 	b.w	3bce8 <d_print_comp_inner+0x2a0>
   3dec6:	6912      	ldr	r2, [r2, #16]
   3dec8:	2111      	movs	r1, #17
   3deca:	f000 f88b 	bl	3dfe4 <d_print_comp>
   3dece:	9b08      	ldr	r3, [sp, #32]
   3ded0:	f8c4 9114 	str.w	r9, [r4, #276]	@ 0x114
   3ded4:	2b00      	cmp	r3, #0
   3ded6:	f43e acc0 	beq.w	3c85a <d_print_comp_inner+0xe12>
   3deda:	f7fd be42 	b.w	3bb62 <d_print_comp_inner+0x11a>
   3dede:	f8d4 3138 	ldr.w	r3, [r4, #312]	@ 0x138
   3dee2:	429f      	cmp	r7, r3
   3dee4:	f6bd ae3a 	bge.w	3bb5c <d_print_comp_inner+0x114>
   3dee8:	f8d4 1130 	ldr.w	r1, [r4, #304]	@ 0x130
   3deec:	f8d4 c110 	ldr.w	ip, [r4, #272]	@ 0x110
   3def0:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
   3def4:	1c78      	adds	r0, r7, #1
   3def6:	f8c4 0134 	str.w	r0, [r4, #308]	@ 0x134
   3defa:	3304      	adds	r3, #4
   3defc:	f841 2037 	str.w	r2, [r1, r7, lsl #3]
   3df00:	f1bc 0f00 	cmp.w	ip, #0
   3df04:	d05d      	beq.n	3dfc2 <d_print_comp_inner+0x257a>
   3df06:	e9d4 7050 	ldrd	r7, r0, [r4, #320]	@ 0x140
   3df0a:	4696      	mov	lr, r2
   3df0c:	4665      	mov	r5, ip
   3df0e:	e00d      	b.n	3df2c <d_print_comp_inner+0x24e4>
   3df10:	f8d4 113c 	ldr.w	r1, [r4, #316]	@ 0x13c
   3df14:	686a      	ldr	r2, [r5, #4]
   3df16:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
   3df1a:	3701      	adds	r7, #1
   3df1c:	f8c4 7140 	str.w	r7, [r4, #320]	@ 0x140
   3df20:	604a      	str	r2, [r1, #4]
   3df22:	6019      	str	r1, [r3, #0]
   3df24:	682d      	ldr	r5, [r5, #0]
   3df26:	460b      	mov	r3, r1
   3df28:	2d00      	cmp	r5, #0
   3df2a:	d049      	beq.n	3dfc0 <d_print_comp_inner+0x2578>
   3df2c:	42b8      	cmp	r0, r7
   3df2e:	dcef      	bgt.n	3df10 <d_print_comp_inner+0x24c8>
   3df30:	f7fd be14 	b.w	3bb5c <d_print_comp_inner+0x114>
   3df34:	4632      	mov	r2, r6
   3df36:	2111      	movs	r1, #17
   3df38:	4620      	mov	r0, r4
   3df3a:	f000 fe75 	bl	3ec28 <d_print_expr_op>
   3df3e:	f7fe bdc6 	b.w	3cace <d_print_comp_inner+0x1086>
   3df42:	4926      	ldr	r1, [pc, #152]	@ (3dfdc <d_print_comp_inner+0x2594>)
   3df44:	4620      	mov	r0, r4
   3df46:	f7fb fb47 	bl	395d8 <d_append_string>
   3df4a:	68f3      	ldr	r3, [r6, #12]
   3df4c:	b143      	cbz	r3, 3df60 <d_print_comp_inner+0x2518>
   3df4e:	2111      	movs	r1, #17
   3df50:	4620      	mov	r0, r4
   3df52:	4632      	mov	r2, r6
   3df54:	f001 f864 	bl	3f020 <d_print_subexpr>
   3df58:	2120      	movs	r1, #32
   3df5a:	4620      	mov	r0, r4
   3df5c:	f7fb fab8 	bl	394d0 <d_append_char>
   3df60:	463a      	mov	r2, r7
   3df62:	2111      	movs	r1, #17
   3df64:	4620      	mov	r0, r4
   3df66:	f000 f83d 	bl	3dfe4 <d_print_comp>
   3df6a:	2d00      	cmp	r5, #0
   3df6c:	f47e acb1 	bne.w	3c8d2 <d_print_comp_inner+0xe8a>
   3df70:	f7fd bdf7 	b.w	3bb62 <d_print_comp_inner+0x11a>
   3df74:	6913      	ldr	r3, [r2, #16]
   3df76:	68d2      	ldr	r2, [r2, #12]
   3df78:	781b      	ldrb	r3, [r3, #0]
   3df7a:	2b29      	cmp	r3, #41	@ 0x29
   3df7c:	bf1c      	itt	ne
   3df7e:	2301      	movne	r3, #1
   3df80:	f8c4 3118 	strne.w	r3, [r4, #280]	@ 0x118
   3df84:	2111      	movs	r1, #17
   3df86:	4620      	mov	r0, r4
   3df88:	f001 f84a 	bl	3f020 <d_print_subexpr>
   3df8c:	f7fe bd8d 	b.w	3caaa <d_print_comp_inner+0x1062>
   3df90:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
   3df94:	f7fd bde2 	b.w	3bb5c <d_print_comp_inner+0x114>
   3df98:	f1b9 0f00 	cmp.w	r9, #0
   3df9c:	f43d adde 	beq.w	3bb5c <d_print_comp_inner+0x114>
   3dfa0:	f8c4 8110 	str.w	r8, [r4, #272]	@ 0x110
   3dfa4:	f7fd bdda 	b.w	3bb5c <d_print_comp_inner+0x114>
   3dfa8:	212d      	movs	r1, #45	@ 0x2d
   3dfaa:	f7fb fa91 	bl	394d0 <d_append_char>
   3dfae:	e730      	b.n	3de12 <d_print_comp_inner+0x23ca>
   3dfb0:	2e2f      	cmp	r6, #47	@ 0x2f
   3dfb2:	f43f ac53 	beq.w	3d85c <d_print_comp_inner+0x1e14>
   3dfb6:	f8d4 c114 	ldr.w	ip, [r4, #276]	@ 0x114
   3dfba:	464f      	mov	r7, r9
   3dfbc:	f7fd be94 	b.w	3bce8 <d_print_comp_inner+0x2a0>
   3dfc0:	4672      	mov	r2, lr
   3dfc2:	2100      	movs	r1, #0
   3dfc4:	6019      	str	r1, [r3, #0]
   3dfc6:	e5d1      	b.n	3db6c <d_print_comp_inner+0x2124>
   3dfc8:	4905      	ldr	r1, [pc, #20]	@ (3dfe0 <d_print_comp_inner+0x2598>)
   3dfca:	f7fe b9f3 	b.w	3c3b4 <d_print_comp_inner+0x96c>
   3dfce:	bf00      	nop
   3dfd0:	00044444 	.word	0x00044444
   3dfd4:	00044440 	.word	0x00044440
   3dfd8:	0004443c 	.word	0x0004443c
   3dfdc:	00044434 	.word	0x00044434
   3dfe0:	00044448 	.word	0x00044448

0003dfe4 <d_print_comp>:
   3dfe4:	b530      	push	{r4, r5, lr}
   3dfe6:	4605      	mov	r5, r0
   3dfe8:	b083      	sub	sp, #12
   3dfea:	b31a      	cbz	r2, 3e034 <d_print_comp+0x50>
   3dfec:	6853      	ldr	r3, [r2, #4]
   3dfee:	2b01      	cmp	r3, #1
   3dff0:	4614      	mov	r4, r2
   3dff2:	dc1f      	bgt.n	3e034 <d_print_comp+0x50>
   3dff4:	f8d0 111c 	ldr.w	r1, [r0, #284]	@ 0x11c
   3dff8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
   3dffc:	dc1a      	bgt.n	3e034 <d_print_comp+0x50>
   3dffe:	3301      	adds	r3, #1
   3e000:	6053      	str	r3, [r2, #4]
   3e002:	3101      	adds	r1, #1
   3e004:	f8d0 312c 	ldr.w	r3, [r0, #300]	@ 0x12c
   3e008:	f8c0 111c 	str.w	r1, [r0, #284]	@ 0x11c
   3e00c:	f8c0 d12c 	str.w	sp, [r0, #300]	@ 0x12c
   3e010:	2111      	movs	r1, #17
   3e012:	e9cd 2300 	strd	r2, r3, [sp]
   3e016:	f7fd fd17 	bl	3ba48 <d_print_comp_inner>
   3e01a:	6862      	ldr	r2, [r4, #4]
   3e01c:	f8d5 311c 	ldr.w	r3, [r5, #284]	@ 0x11c
   3e020:	9901      	ldr	r1, [sp, #4]
   3e022:	f8c5 112c 	str.w	r1, [r5, #300]	@ 0x12c
   3e026:	3a01      	subs	r2, #1
   3e028:	3b01      	subs	r3, #1
   3e02a:	6062      	str	r2, [r4, #4]
   3e02c:	f8c5 311c 	str.w	r3, [r5, #284]	@ 0x11c
   3e030:	b003      	add	sp, #12
   3e032:	bd30      	pop	{r4, r5, pc}
   3e034:	2301      	movs	r3, #1
   3e036:	f8c5 3118 	str.w	r3, [r5, #280]	@ 0x118
   3e03a:	b003      	add	sp, #12
   3e03c:	bd30      	pop	{r4, r5, pc}
   3e03e:	bf00      	nop

0003e040 <d_print_mod>:
   3e040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3e044:	7813      	ldrb	r3, [r2, #0]
   3e046:	3b03      	subs	r3, #3
   3e048:	4615      	mov	r5, r2
   3e04a:	4604      	mov	r4, r0
   3e04c:	2b4e      	cmp	r3, #78	@ 0x4e
   3e04e:	d850      	bhi.n	3e0f2 <d_print_mod+0xb2>
   3e050:	e8df f013 	tbh	[pc, r3, lsl #1]
   3e054:	004f0118 	.word	0x004f0118
   3e058:	004f004f 	.word	0x004f004f
   3e05c:	004f004f 	.word	0x004f004f
   3e060:	004f004f 	.word	0x004f004f
   3e064:	004f004f 	.word	0x004f004f
   3e068:	004f004f 	.word	0x004f004f
   3e06c:	004f004f 	.word	0x004f004f
   3e070:	004f004f 	.word	0x004f004f
   3e074:	004f004f 	.word	0x004f004f
   3e078:	004f004f 	.word	0x004f004f
   3e07c:	004f004f 	.word	0x004f004f
   3e080:	007b0055 	.word	0x007b0055
   3e084:	005500a1 	.word	0x005500a1
   3e088:	00a1007b 	.word	0x00a1007b
   3e08c:	00f800eb 	.word	0x00f800eb
   3e090:	027c0105 	.word	0x027c0105
   3e094:	012c011e 	.word	0x012c011e
   3e098:	01750150 	.word	0x01750150
   3e09c:	004f004f 	.word	0x004f004f
   3e0a0:	004f004f 	.word	0x004f004f
   3e0a4:	004f019a 	.word	0x004f019a
   3e0a8:	004f01c9 	.word	0x004f01c9
   3e0ac:	004f004f 	.word	0x004f004f
   3e0b0:	004f004f 	.word	0x004f004f
   3e0b4:	004f004f 	.word	0x004f004f
   3e0b8:	004f004f 	.word	0x004f004f
   3e0bc:	004f004f 	.word	0x004f004f
   3e0c0:	004f004f 	.word	0x004f004f
   3e0c4:	004f004f 	.word	0x004f004f
   3e0c8:	004f004f 	.word	0x004f004f
   3e0cc:	004f004f 	.word	0x004f004f
   3e0d0:	004f004f 	.word	0x004f004f
   3e0d4:	004f004f 	.word	0x004f004f
   3e0d8:	004f004f 	.word	0x004f004f
   3e0dc:	004f004f 	.word	0x004f004f
   3e0e0:	004f004f 	.word	0x004f004f
   3e0e4:	004f004f 	.word	0x004f004f
   3e0e8:	01ef004f 	.word	0x01ef004f
   3e0ec:	022a004f 	.word	0x022a004f
   3e0f0:	00c5      	.short	0x00c5
   3e0f2:	462a      	mov	r2, r5
   3e0f4:	2111      	movs	r1, #17
   3e0f6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3e0fa:	f7ff bf73 	b.w	3dfe4 <d_print_comp>
   3e0fe:	4dd1      	ldr	r5, [pc, #836]	@ (3e444 <d_print_mod+0x404>)
   3e100:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3e104:	f105 0709 	add.w	r7, r5, #9
   3e108:	f04f 0800 	mov.w	r8, #0
   3e10c:	e009      	b.n	3e122 <d_print_mod+0xe2>
   3e10e:	460b      	mov	r3, r1
   3e110:	3101      	adds	r1, #1
   3e112:	42af      	cmp	r7, r5
   3e114:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3e118:	54e6      	strb	r6, [r4, r3]
   3e11a:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3e11e:	f000 80c3 	beq.w	3e2a8 <d_print_mod+0x268>
   3e122:	29ff      	cmp	r1, #255	@ 0xff
   3e124:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   3e128:	d1f1      	bne.n	3e10e <d_print_mod+0xce>
   3e12a:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3e12e:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3e132:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3e136:	4620      	mov	r0, r4
   3e138:	4798      	blx	r3
   3e13a:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3e13e:	2101      	movs	r1, #1
   3e140:	440a      	add	r2, r1
   3e142:	2300      	movs	r3, #0
   3e144:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3e148:	e7e3      	b.n	3e112 <d_print_mod+0xd2>
   3e14a:	4dbf      	ldr	r5, [pc, #764]	@ (3e448 <d_print_mod+0x408>)
   3e14c:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3e150:	f105 0709 	add.w	r7, r5, #9
   3e154:	f04f 0800 	mov.w	r8, #0
   3e158:	e009      	b.n	3e16e <d_print_mod+0x12e>
   3e15a:	460b      	mov	r3, r1
   3e15c:	3101      	adds	r1, #1
   3e15e:	42af      	cmp	r7, r5
   3e160:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3e164:	54e6      	strb	r6, [r4, r3]
   3e166:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3e16a:	f000 809d 	beq.w	3e2a8 <d_print_mod+0x268>
   3e16e:	29ff      	cmp	r1, #255	@ 0xff
   3e170:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   3e174:	d1f1      	bne.n	3e15a <d_print_mod+0x11a>
   3e176:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3e17a:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3e17e:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3e182:	4620      	mov	r0, r4
   3e184:	4798      	blx	r3
   3e186:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3e18a:	2101      	movs	r1, #1
   3e18c:	440a      	add	r2, r1
   3e18e:	2300      	movs	r3, #0
   3e190:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3e194:	e7e3      	b.n	3e15e <d_print_mod+0x11e>
   3e196:	4dad      	ldr	r5, [pc, #692]	@ (3e44c <d_print_mod+0x40c>)
   3e198:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3e19c:	1daf      	adds	r7, r5, #6
   3e19e:	f04f 0800 	mov.w	r8, #0
   3e1a2:	e008      	b.n	3e1b6 <d_print_mod+0x176>
   3e1a4:	460b      	mov	r3, r1
   3e1a6:	3101      	adds	r1, #1
   3e1a8:	42af      	cmp	r7, r5
   3e1aa:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3e1ae:	54e6      	strb	r6, [r4, r3]
   3e1b0:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3e1b4:	d078      	beq.n	3e2a8 <d_print_mod+0x268>
   3e1b6:	29ff      	cmp	r1, #255	@ 0xff
   3e1b8:	f815 6b01 	ldrb.w	r6, [r5], #1
   3e1bc:	d1f2      	bne.n	3e1a4 <d_print_mod+0x164>
   3e1be:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3e1c2:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3e1c6:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3e1ca:	4620      	mov	r0, r4
   3e1cc:	4798      	blx	r3
   3e1ce:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3e1d2:	2101      	movs	r1, #1
   3e1d4:	440a      	add	r2, r1
   3e1d6:	2300      	movs	r3, #0
   3e1d8:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3e1dc:	e7e4      	b.n	3e1a8 <d_print_mod+0x168>
   3e1de:	4e9c      	ldr	r6, [pc, #624]	@ (3e450 <d_print_mod+0x410>)
   3e1e0:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3e1e4:	f106 0806 	add.w	r8, r6, #6
   3e1e8:	f04f 0900 	mov.w	r9, #0
   3e1ec:	e009      	b.n	3e202 <d_print_mod+0x1c2>
   3e1ee:	460a      	mov	r2, r1
   3e1f0:	3101      	adds	r1, #1
   3e1f2:	4546      	cmp	r6, r8
   3e1f4:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3e1f8:	54a7      	strb	r7, [r4, r2]
   3e1fa:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
   3e1fe:	f000 8178 	beq.w	3e4f2 <d_print_mod+0x4b2>
   3e202:	29ff      	cmp	r1, #255	@ 0xff
   3e204:	f816 7b01 	ldrb.w	r7, [r6], #1
   3e208:	d1f1      	bne.n	3e1ee <d_print_mod+0x1ae>
   3e20a:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3e20e:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3e212:	f884 90ff 	strb.w	r9, [r4, #255]	@ 0xff
   3e216:	4620      	mov	r0, r4
   3e218:	4798      	blx	r3
   3e21a:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3e21e:	2101      	movs	r1, #1
   3e220:	440b      	add	r3, r1
   3e222:	2200      	movs	r2, #0
   3e224:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3e228:	e7e3      	b.n	3e1f2 <d_print_mod+0x1b2>
   3e22a:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
   3e22e:	2bff      	cmp	r3, #255	@ 0xff
   3e230:	f000 81c9 	beq.w	3e5c6 <d_print_mod+0x586>
   3e234:	2220      	movs	r2, #32
   3e236:	1c59      	adds	r1, r3, #1
   3e238:	f8c0 1100 	str.w	r1, [r0, #256]	@ 0x100
   3e23c:	54c2      	strb	r2, [r0, r3]
   3e23e:	f880 2104 	strb.w	r2, [r0, #260]	@ 0x104
   3e242:	e027      	b.n	3e294 <d_print_mod+0x254>
   3e244:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
   3e248:	2bff      	cmp	r3, #255	@ 0xff
   3e24a:	f000 81ad 	beq.w	3e5a8 <d_print_mod+0x568>
   3e24e:	1c59      	adds	r1, r3, #1
   3e250:	2220      	movs	r2, #32
   3e252:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3e256:	54e2      	strb	r2, [r4, r3]
   3e258:	f884 2104 	strb.w	r2, [r4, #260]	@ 0x104
   3e25c:	e028      	b.n	3e2b0 <d_print_mod+0x270>
   3e25e:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3e262:	29ff      	cmp	r1, #255	@ 0xff
   3e264:	f000 8190 	beq.w	3e588 <d_print_mod+0x548>
   3e268:	1c4a      	adds	r2, r1, #1
   3e26a:	2320      	movs	r3, #32
   3e26c:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
   3e270:	5463      	strb	r3, [r4, r1]
   3e272:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3e276:	692a      	ldr	r2, [r5, #16]
   3e278:	4620      	mov	r0, r4
   3e27a:	2111      	movs	r1, #17
   3e27c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3e280:	f7ff beb0 	b.w	3dfe4 <d_print_comp>
   3e284:	68ea      	ldr	r2, [r5, #12]
   3e286:	2111      	movs	r1, #17
   3e288:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3e28c:	f7ff beaa 	b.w	3dfe4 <d_print_comp>
   3e290:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3e294:	29ff      	cmp	r1, #255	@ 0xff
   3e296:	f000 81b5 	beq.w	3e604 <d_print_mod+0x5c4>
   3e29a:	1c4a      	adds	r2, r1, #1
   3e29c:	2326      	movs	r3, #38	@ 0x26
   3e29e:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
   3e2a2:	5463      	strb	r3, [r4, r1]
   3e2a4:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3e2a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3e2ac:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3e2b0:	4d68      	ldr	r5, [pc, #416]	@ (3e454 <d_print_mod+0x414>)
   3e2b2:	f04f 0800 	mov.w	r8, #0
   3e2b6:	1caf      	adds	r7, r5, #2
   3e2b8:	e008      	b.n	3e2cc <d_print_mod+0x28c>
   3e2ba:	460b      	mov	r3, r1
   3e2bc:	3101      	adds	r1, #1
   3e2be:	42af      	cmp	r7, r5
   3e2c0:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3e2c4:	54e6      	strb	r6, [r4, r3]
   3e2c6:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3e2ca:	d0ed      	beq.n	3e2a8 <d_print_mod+0x268>
   3e2cc:	29ff      	cmp	r1, #255	@ 0xff
   3e2ce:	f815 6b01 	ldrb.w	r6, [r5], #1
   3e2d2:	d1f2      	bne.n	3e2ba <d_print_mod+0x27a>
   3e2d4:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3e2d8:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3e2dc:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3e2e0:	4620      	mov	r0, r4
   3e2e2:	4798      	blx	r3
   3e2e4:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3e2e8:	2101      	movs	r1, #1
   3e2ea:	440a      	add	r2, r1
   3e2ec:	2300      	movs	r3, #0
   3e2ee:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3e2f2:	e7e4      	b.n	3e2be <d_print_mod+0x27e>
   3e2f4:	4d58      	ldr	r5, [pc, #352]	@ (3e458 <d_print_mod+0x418>)
   3e2f6:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3e2fa:	f105 0709 	add.w	r7, r5, #9
   3e2fe:	f04f 0800 	mov.w	r8, #0
   3e302:	e008      	b.n	3e316 <d_print_mod+0x2d6>
   3e304:	460b      	mov	r3, r1
   3e306:	3101      	adds	r1, #1
   3e308:	42bd      	cmp	r5, r7
   3e30a:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3e30e:	54e6      	strb	r6, [r4, r3]
   3e310:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3e314:	d0c8      	beq.n	3e2a8 <d_print_mod+0x268>
   3e316:	29ff      	cmp	r1, #255	@ 0xff
   3e318:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   3e31c:	d1f2      	bne.n	3e304 <d_print_mod+0x2c4>
   3e31e:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3e322:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3e326:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3e32a:	4620      	mov	r0, r4
   3e32c:	4798      	blx	r3
   3e32e:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3e332:	2101      	movs	r1, #1
   3e334:	440a      	add	r2, r1
   3e336:	2300      	movs	r3, #0
   3e338:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3e33c:	e7e4      	b.n	3e308 <d_print_mod+0x2c8>
   3e33e:	4d47      	ldr	r5, [pc, #284]	@ (3e45c <d_print_mod+0x41c>)
   3e340:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3e344:	f105 070b 	add.w	r7, r5, #11
   3e348:	f04f 0800 	mov.w	r8, #0
   3e34c:	e008      	b.n	3e360 <d_print_mod+0x320>
   3e34e:	460b      	mov	r3, r1
   3e350:	3101      	adds	r1, #1
   3e352:	42af      	cmp	r7, r5
   3e354:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3e358:	54e6      	strb	r6, [r4, r3]
   3e35a:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3e35e:	d0a3      	beq.n	3e2a8 <d_print_mod+0x268>
   3e360:	29ff      	cmp	r1, #255	@ 0xff
   3e362:	f815 6b01 	ldrb.w	r6, [r5], #1
   3e366:	d1f2      	bne.n	3e34e <d_print_mod+0x30e>
   3e368:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3e36c:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3e370:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3e374:	4620      	mov	r0, r4
   3e376:	4798      	blx	r3
   3e378:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3e37c:	2101      	movs	r1, #1
   3e37e:	440a      	add	r2, r1
   3e380:	2300      	movs	r3, #0
   3e382:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3e386:	e7e4      	b.n	3e352 <d_print_mod+0x312>
   3e388:	f890 3104 	ldrb.w	r3, [r0, #260]	@ 0x104
   3e38c:	2b28      	cmp	r3, #40	@ 0x28
   3e38e:	f040 80d1 	bne.w	3e534 <d_print_mod+0x4f4>
   3e392:	68ea      	ldr	r2, [r5, #12]
   3e394:	4d32      	ldr	r5, [pc, #200]	@ (3e460 <d_print_mod+0x420>)
   3e396:	2111      	movs	r1, #17
   3e398:	4620      	mov	r0, r4
   3e39a:	f7ff fe23 	bl	3dfe4 <d_print_comp>
   3e39e:	f04f 0800 	mov.w	r8, #0
   3e3a2:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3e3a6:	1cef      	adds	r7, r5, #3
   3e3a8:	e009      	b.n	3e3be <d_print_mod+0x37e>
   3e3aa:	460b      	mov	r3, r1
   3e3ac:	3101      	adds	r1, #1
   3e3ae:	42af      	cmp	r7, r5
   3e3b0:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3e3b4:	54e6      	strb	r6, [r4, r3]
   3e3b6:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3e3ba:	f43f af75 	beq.w	3e2a8 <d_print_mod+0x268>
   3e3be:	29ff      	cmp	r1, #255	@ 0xff
   3e3c0:	f815 6b01 	ldrb.w	r6, [r5], #1
   3e3c4:	d1f1      	bne.n	3e3aa <d_print_mod+0x36a>
   3e3c6:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3e3ca:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3e3ce:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3e3d2:	4620      	mov	r0, r4
   3e3d4:	4798      	blx	r3
   3e3d6:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3e3da:	2101      	movs	r1, #1
   3e3dc:	440a      	add	r2, r1
   3e3de:	2300      	movs	r3, #0
   3e3e0:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3e3e4:	e7e3      	b.n	3e3ae <d_print_mod+0x36e>
   3e3e6:	4e1f      	ldr	r6, [pc, #124]	@ (3e464 <d_print_mod+0x424>)
   3e3e8:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3e3ec:	f106 080a 	add.w	r8, r6, #10
   3e3f0:	f04f 0900 	mov.w	r9, #0
   3e3f4:	e009      	b.n	3e40a <d_print_mod+0x3ca>
   3e3f6:	460a      	mov	r2, r1
   3e3f8:	3101      	adds	r1, #1
   3e3fa:	4546      	cmp	r6, r8
   3e3fc:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3e400:	54a7      	strb	r7, [r4, r2]
   3e402:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
   3e406:	f000 8083 	beq.w	3e510 <d_print_mod+0x4d0>
   3e40a:	29ff      	cmp	r1, #255	@ 0xff
   3e40c:	f816 7b01 	ldrb.w	r7, [r6], #1
   3e410:	d1f1      	bne.n	3e3f6 <d_print_mod+0x3b6>
   3e412:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3e416:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3e41a:	f884 90ff 	strb.w	r9, [r4, #255]	@ 0xff
   3e41e:	4620      	mov	r0, r4
   3e420:	4798      	blx	r3
   3e422:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3e426:	2101      	movs	r1, #1
   3e428:	440b      	add	r3, r1
   3e42a:	2200      	movs	r2, #0
   3e42c:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3e430:	e7e3      	b.n	3e3fa <d_print_mod+0x3ba>
   3e432:	4d0d      	ldr	r5, [pc, #52]	@ (3e468 <d_print_mod+0x428>)
   3e434:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3e438:	f105 0711 	add.w	r7, r5, #17
   3e43c:	f04f 0800 	mov.w	r8, #0
   3e440:	e01e      	b.n	3e480 <d_print_mod+0x440>
   3e442:	bf00      	nop
   3e444:	0004450f 	.word	0x0004450f
   3e448:	0004451b 	.word	0x0004451b
   3e44c:	00044528 	.word	0x00044528
   3e450:	00044550 	.word	0x00044550
   3e454:	00044558 	.word	0x00044558
   3e458:	0004455b 	.word	0x0004455b
   3e45c:	00044568 	.word	0x00044568
   3e460:	00044574 	.word	0x00044574
   3e464:	00044578 	.word	0x00044578
   3e468:	0004452f 	.word	0x0004452f
   3e46c:	460b      	mov	r3, r1
   3e46e:	3101      	adds	r1, #1
   3e470:	42af      	cmp	r7, r5
   3e472:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3e476:	54e6      	strb	r6, [r4, r3]
   3e478:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3e47c:	f43f af14 	beq.w	3e2a8 <d_print_mod+0x268>
   3e480:	29ff      	cmp	r1, #255	@ 0xff
   3e482:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   3e486:	d1f1      	bne.n	3e46c <d_print_mod+0x42c>
   3e488:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3e48c:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3e490:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3e494:	4620      	mov	r0, r4
   3e496:	4798      	blx	r3
   3e498:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3e49c:	2101      	movs	r1, #1
   3e49e:	440a      	add	r2, r1
   3e4a0:	2300      	movs	r3, #0
   3e4a2:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3e4a6:	e7e3      	b.n	3e470 <d_print_mod+0x430>
   3e4a8:	4e6d      	ldr	r6, [pc, #436]	@ (3e660 <d_print_mod+0x620>)
   3e4aa:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3e4ae:	f106 0809 	add.w	r8, r6, #9
   3e4b2:	f04f 0900 	mov.w	r9, #0
   3e4b6:	e008      	b.n	3e4ca <d_print_mod+0x48a>
   3e4b8:	460a      	mov	r2, r1
   3e4ba:	3101      	adds	r1, #1
   3e4bc:	45b0      	cmp	r8, r6
   3e4be:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3e4c2:	54a7      	strb	r7, [r4, r2]
   3e4c4:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
   3e4c8:	d013      	beq.n	3e4f2 <d_print_mod+0x4b2>
   3e4ca:	29ff      	cmp	r1, #255	@ 0xff
   3e4cc:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   3e4d0:	d1f2      	bne.n	3e4b8 <d_print_mod+0x478>
   3e4d2:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3e4d6:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3e4da:	f884 90ff 	strb.w	r9, [r4, #255]	@ 0xff
   3e4de:	4620      	mov	r0, r4
   3e4e0:	4798      	blx	r3
   3e4e2:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3e4e6:	2101      	movs	r1, #1
   3e4e8:	440b      	add	r3, r1
   3e4ea:	2200      	movs	r2, #0
   3e4ec:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3e4f0:	e7e4      	b.n	3e4bc <d_print_mod+0x47c>
   3e4f2:	692a      	ldr	r2, [r5, #16]
   3e4f4:	2a00      	cmp	r2, #0
   3e4f6:	f43f aed7 	beq.w	3e2a8 <d_print_mod+0x268>
   3e4fa:	29ff      	cmp	r1, #255	@ 0xff
   3e4fc:	d032      	beq.n	3e564 <d_print_mod+0x524>
   3e4fe:	1c48      	adds	r0, r1, #1
   3e500:	2328      	movs	r3, #40	@ 0x28
   3e502:	f8c4 0100 	str.w	r0, [r4, #256]	@ 0x100
   3e506:	5463      	strb	r3, [r4, r1]
   3e508:	2111      	movs	r1, #17
   3e50a:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3e50e:	e001      	b.n	3e514 <d_print_mod+0x4d4>
   3e510:	68ea      	ldr	r2, [r5, #12]
   3e512:	2111      	movs	r1, #17
   3e514:	4620      	mov	r0, r4
   3e516:	f7ff fd65 	bl	3dfe4 <d_print_comp>
   3e51a:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3e51e:	29ff      	cmp	r1, #255	@ 0xff
   3e520:	d061      	beq.n	3e5e6 <d_print_mod+0x5a6>
   3e522:	1c4a      	adds	r2, r1, #1
   3e524:	2329      	movs	r3, #41	@ 0x29
   3e526:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
   3e52a:	5463      	strb	r3, [r4, r1]
   3e52c:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3e530:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3e534:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3e538:	29ff      	cmp	r1, #255	@ 0xff
   3e53a:	d072      	beq.n	3e622 <d_print_mod+0x5e2>
   3e53c:	1c4a      	adds	r2, r1, #1
   3e53e:	2320      	movs	r3, #32
   3e540:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
   3e544:	5463      	strb	r3, [r4, r1]
   3e546:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3e54a:	e722      	b.n	3e392 <d_print_mod+0x352>
   3e54c:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3e550:	29ff      	cmp	r1, #255	@ 0xff
   3e552:	d076      	beq.n	3e642 <d_print_mod+0x602>
   3e554:	1c4a      	adds	r2, r1, #1
   3e556:	232a      	movs	r3, #42	@ 0x2a
   3e558:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
   3e55c:	5463      	strb	r3, [r4, r1]
   3e55e:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3e562:	e6a1      	b.n	3e2a8 <d_print_mod+0x268>
   3e564:	2600      	movs	r6, #0
   3e566:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3e56a:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3e56e:	f884 60ff 	strb.w	r6, [r4, #255]	@ 0xff
   3e572:	4620      	mov	r0, r4
   3e574:	4798      	blx	r3
   3e576:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3e57a:	692a      	ldr	r2, [r5, #16]
   3e57c:	2001      	movs	r0, #1
   3e57e:	4403      	add	r3, r0
   3e580:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3e584:	4631      	mov	r1, r6
   3e586:	e7bb      	b.n	3e500 <d_print_mod+0x4c0>
   3e588:	2600      	movs	r6, #0
   3e58a:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
   3e58e:	f8d0 210c 	ldr.w	r2, [r0, #268]	@ 0x10c
   3e592:	f880 60ff 	strb.w	r6, [r0, #255]	@ 0xff
   3e596:	4798      	blx	r3
   3e598:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3e59c:	2201      	movs	r2, #1
   3e59e:	4413      	add	r3, r2
   3e5a0:	4631      	mov	r1, r6
   3e5a2:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3e5a6:	e660      	b.n	3e26a <d_print_mod+0x22a>
   3e5a8:	2500      	movs	r5, #0
   3e5aa:	4619      	mov	r1, r3
   3e5ac:	e9d0 6242 	ldrd	r6, r2, [r0, #264]	@ 0x108
   3e5b0:	f880 50ff 	strb.w	r5, [r0, #255]	@ 0xff
   3e5b4:	47b0      	blx	r6
   3e5b6:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3e5ba:	2101      	movs	r1, #1
   3e5bc:	440a      	add	r2, r1
   3e5be:	462b      	mov	r3, r5
   3e5c0:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3e5c4:	e644      	b.n	3e250 <d_print_mod+0x210>
   3e5c6:	2100      	movs	r1, #0
   3e5c8:	e9d0 5242 	ldrd	r5, r2, [r0, #264]	@ 0x108
   3e5cc:	f880 10ff 	strb.w	r1, [r0, #255]	@ 0xff
   3e5d0:	4619      	mov	r1, r3
   3e5d2:	47a8      	blx	r5
   3e5d4:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3e5d8:	2101      	movs	r1, #1
   3e5da:	2220      	movs	r2, #32
   3e5dc:	440b      	add	r3, r1
   3e5de:	7022      	strb	r2, [r4, #0]
   3e5e0:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3e5e4:	e659      	b.n	3e29a <d_print_mod+0x25a>
   3e5e6:	2500      	movs	r5, #0
   3e5e8:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   3e5ec:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
   3e5f0:	4620      	mov	r0, r4
   3e5f2:	4798      	blx	r3
   3e5f4:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3e5f8:	2201      	movs	r2, #1
   3e5fa:	4413      	add	r3, r2
   3e5fc:	4629      	mov	r1, r5
   3e5fe:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3e602:	e78f      	b.n	3e524 <d_print_mod+0x4e4>
   3e604:	2500      	movs	r5, #0
   3e606:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   3e60a:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
   3e60e:	4620      	mov	r0, r4
   3e610:	4798      	blx	r3
   3e612:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3e616:	2201      	movs	r2, #1
   3e618:	4413      	add	r3, r2
   3e61a:	4629      	mov	r1, r5
   3e61c:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3e620:	e63c      	b.n	3e29c <d_print_mod+0x25c>
   3e622:	2600      	movs	r6, #0
   3e624:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
   3e628:	f8d0 210c 	ldr.w	r2, [r0, #268]	@ 0x10c
   3e62c:	f880 60ff 	strb.w	r6, [r0, #255]	@ 0xff
   3e630:	4798      	blx	r3
   3e632:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3e636:	2201      	movs	r2, #1
   3e638:	4413      	add	r3, r2
   3e63a:	4631      	mov	r1, r6
   3e63c:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3e640:	e77d      	b.n	3e53e <d_print_mod+0x4fe>
   3e642:	2500      	movs	r5, #0
   3e644:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	@ 0x108
   3e648:	f880 50ff 	strb.w	r5, [r0, #255]	@ 0xff
   3e64c:	4798      	blx	r3
   3e64e:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3e652:	2201      	movs	r2, #1
   3e654:	4413      	add	r3, r2
   3e656:	4629      	mov	r1, r5
   3e658:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3e65c:	e77b      	b.n	3e556 <d_print_mod+0x516>
   3e65e:	bf00      	nop
   3e660:	00044543 	.word	0x00044543

0003e664 <d_print_function_type>:
   3e664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3e668:	4604      	mov	r4, r0
   3e66a:	4616      	mov	r6, r2
   3e66c:	461d      	mov	r5, r3
   3e66e:	2b00      	cmp	r3, #0
   3e670:	d066      	beq.n	3e740 <d_print_function_type+0xdc>
   3e672:	4f70      	ldr	r7, [pc, #448]	@ (3e834 <d_print_function_type+0x1d0>)
   3e674:	2001      	movs	r0, #1
   3e676:	689a      	ldr	r2, [r3, #8]
   3e678:	2a00      	cmp	r2, #0
   3e67a:	d161      	bne.n	3e740 <d_print_function_type+0xdc>
   3e67c:	685a      	ldr	r2, [r3, #4]
   3e67e:	7811      	ldrb	r1, [r2, #0]
   3e680:	3919      	subs	r1, #25
   3e682:	b2c9      	uxtb	r1, r1
   3e684:	2912      	cmp	r1, #18
   3e686:	fa00 f201 	lsl.w	r2, r0, r1
   3e68a:	d856      	bhi.n	3e73a <d_print_function_type+0xd6>
   3e68c:	423a      	tst	r2, r7
   3e68e:	d17d      	bne.n	3e78c <d_print_function_type+0x128>
   3e690:	f412 6f60 	tst.w	r2, #3584	@ 0xe00
   3e694:	d051      	beq.n	3e73a <d_print_function_type+0xd6>
   3e696:	f894 3104 	ldrb.w	r3, [r4, #260]	@ 0x104
   3e69a:	f003 02fd 	and.w	r2, r3, #253	@ 0xfd
   3e69e:	2a28      	cmp	r2, #40	@ 0x28
   3e6a0:	f000 80a6 	beq.w	3e7f0 <d_print_function_type+0x18c>
   3e6a4:	2b20      	cmp	r3, #32
   3e6a6:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3e6aa:	f040 8085 	bne.w	3e7b8 <d_print_function_type+0x154>
   3e6ae:	29ff      	cmp	r1, #255	@ 0xff
   3e6b0:	f000 808f 	beq.w	3e7d2 <d_print_function_type+0x16e>
   3e6b4:	1c4b      	adds	r3, r1, #1
   3e6b6:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
   3e6ba:	2328      	movs	r3, #40	@ 0x28
   3e6bc:	5463      	strb	r3, [r4, r1]
   3e6be:	f04f 0800 	mov.w	r8, #0
   3e6c2:	f8d4 7114 	ldr.w	r7, [r4, #276]	@ 0x114
   3e6c6:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3e6ca:	2111      	movs	r1, #17
   3e6cc:	f8c4 8114 	str.w	r8, [r4, #276]	@ 0x114
   3e6d0:	4643      	mov	r3, r8
   3e6d2:	462a      	mov	r2, r5
   3e6d4:	4620      	mov	r0, r4
   3e6d6:	f000 f8af 	bl	3e838 <d_print_mod_list>
   3e6da:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3e6de:	29ff      	cmp	r1, #255	@ 0xff
   3e6e0:	f000 8089 	beq.w	3e7f6 <d_print_function_type+0x192>
   3e6e4:	1c4b      	adds	r3, r1, #1
   3e6e6:	2229      	movs	r2, #41	@ 0x29
   3e6e8:	2bff      	cmp	r3, #255	@ 0xff
   3e6ea:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
   3e6ee:	5462      	strb	r2, [r4, r1]
   3e6f0:	f884 2104 	strb.w	r2, [r4, #260]	@ 0x104
   3e6f4:	d032      	beq.n	3e75c <d_print_function_type+0xf8>
   3e6f6:	2228      	movs	r2, #40	@ 0x28
   3e6f8:	1c59      	adds	r1, r3, #1
   3e6fa:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3e6fe:	54e2      	strb	r2, [r4, r3]
   3e700:	f884 2104 	strb.w	r2, [r4, #260]	@ 0x104
   3e704:	6932      	ldr	r2, [r6, #16]
   3e706:	b12a      	cbz	r2, 3e714 <d_print_function_type+0xb0>
   3e708:	2111      	movs	r1, #17
   3e70a:	4620      	mov	r0, r4
   3e70c:	f7ff fc6a 	bl	3dfe4 <d_print_comp>
   3e710:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3e714:	29ff      	cmp	r1, #255	@ 0xff
   3e716:	d040      	beq.n	3e79a <d_print_function_type+0x136>
   3e718:	1c4b      	adds	r3, r1, #1
   3e71a:	2229      	movs	r2, #41	@ 0x29
   3e71c:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
   3e720:	4620      	mov	r0, r4
   3e722:	5462      	strb	r2, [r4, r1]
   3e724:	2301      	movs	r3, #1
   3e726:	f884 2104 	strb.w	r2, [r4, #260]	@ 0x104
   3e72a:	2111      	movs	r1, #17
   3e72c:	462a      	mov	r2, r5
   3e72e:	f000 f883 	bl	3e838 <d_print_mod_list>
   3e732:	f8c4 7114 	str.w	r7, [r4, #276]	@ 0x114
   3e736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3e73a:	681b      	ldr	r3, [r3, #0]
   3e73c:	2b00      	cmp	r3, #0
   3e73e:	d19a      	bne.n	3e676 <d_print_function_type+0x12>
   3e740:	2300      	movs	r3, #0
   3e742:	f8d4 7114 	ldr.w	r7, [r4, #276]	@ 0x114
   3e746:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
   3e74a:	462a      	mov	r2, r5
   3e74c:	2111      	movs	r1, #17
   3e74e:	4620      	mov	r0, r4
   3e750:	f000 f872 	bl	3e838 <d_print_mod_list>
   3e754:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   3e758:	2bff      	cmp	r3, #255	@ 0xff
   3e75a:	d1cc      	bne.n	3e6f6 <d_print_function_type+0x92>
   3e75c:	4619      	mov	r1, r3
   3e75e:	2300      	movs	r3, #0
   3e760:	f884 30ff 	strb.w	r3, [r4, #255]	@ 0xff
   3e764:	4620      	mov	r0, r4
   3e766:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   3e76a:	4798      	blx	r3
   3e76c:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3e770:	3301      	adds	r3, #1
   3e772:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3e776:	2328      	movs	r3, #40	@ 0x28
   3e778:	7023      	strb	r3, [r4, #0]
   3e77a:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3e77e:	6932      	ldr	r2, [r6, #16]
   3e780:	2101      	movs	r1, #1
   3e782:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3e786:	2a00      	cmp	r2, #0
   3e788:	d1be      	bne.n	3e708 <d_print_function_type+0xa4>
   3e78a:	e7c5      	b.n	3e718 <d_print_function_type+0xb4>
   3e78c:	f894 3104 	ldrb.w	r3, [r4, #260]	@ 0x104
   3e790:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3e794:	2b20      	cmp	r3, #32
   3e796:	d08a      	beq.n	3e6ae <d_print_function_type+0x4a>
   3e798:	e00e      	b.n	3e7b8 <d_print_function_type+0x154>
   3e79a:	2600      	movs	r6, #0
   3e79c:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   3e7a0:	f884 60ff 	strb.w	r6, [r4, #255]	@ 0xff
   3e7a4:	4620      	mov	r0, r4
   3e7a6:	4798      	blx	r3
   3e7a8:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3e7ac:	3301      	adds	r3, #1
   3e7ae:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3e7b2:	4631      	mov	r1, r6
   3e7b4:	2301      	movs	r3, #1
   3e7b6:	e7b0      	b.n	3e71a <d_print_function_type+0xb6>
   3e7b8:	29ff      	cmp	r1, #255	@ 0xff
   3e7ba:	d02b      	beq.n	3e814 <d_print_function_type+0x1b0>
   3e7bc:	1c4b      	adds	r3, r1, #1
   3e7be:	2220      	movs	r2, #32
   3e7c0:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
   3e7c4:	5462      	strb	r2, [r4, r1]
   3e7c6:	4619      	mov	r1, r3
   3e7c8:	29ff      	cmp	r1, #255	@ 0xff
   3e7ca:	f884 2104 	strb.w	r2, [r4, #260]	@ 0x104
   3e7ce:	f47f af71 	bne.w	3e6b4 <d_print_function_type+0x50>
   3e7d2:	2700      	movs	r7, #0
   3e7d4:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   3e7d8:	f884 70ff 	strb.w	r7, [r4, #255]	@ 0xff
   3e7dc:	4620      	mov	r0, r4
   3e7de:	4798      	blx	r3
   3e7e0:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3e7e4:	3301      	adds	r3, #1
   3e7e6:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3e7ea:	4639      	mov	r1, r7
   3e7ec:	2301      	movs	r3, #1
   3e7ee:	e762      	b.n	3e6b6 <d_print_function_type+0x52>
   3e7f0:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3e7f4:	e75b      	b.n	3e6ae <d_print_function_type+0x4a>
   3e7f6:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   3e7fa:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3e7fe:	4620      	mov	r0, r4
   3e800:	4798      	blx	r3
   3e802:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3e806:	3301      	adds	r3, #1
   3e808:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3e80c:	2329      	movs	r3, #41	@ 0x29
   3e80e:	7023      	strb	r3, [r4, #0]
   3e810:	2301      	movs	r3, #1
   3e812:	e770      	b.n	3e6f6 <d_print_function_type+0x92>
   3e814:	2300      	movs	r3, #0
   3e816:	f884 30ff 	strb.w	r3, [r4, #255]	@ 0xff
   3e81a:	4620      	mov	r0, r4
   3e81c:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   3e820:	4798      	blx	r3
   3e822:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3e826:	2101      	movs	r1, #1
   3e828:	2220      	movs	r2, #32
   3e82a:	440b      	add	r3, r1
   3e82c:	7022      	strb	r2, [r4, #0]
   3e82e:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3e832:	e73f      	b.n	3e6b4 <d_print_function_type+0x50>
   3e834:	00043107 	.word	0x00043107

0003e838 <d_print_mod_list>:
   3e838:	2a00      	cmp	r2, #0
   3e83a:	f000 80c0 	beq.w	3e9be <d_print_mod_list+0x186>
   3e83e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3e842:	4605      	mov	r5, r0
   3e844:	b088      	sub	sp, #32
   3e846:	461e      	mov	r6, r3
   3e848:	4614      	mov	r4, r2
   3e84a:	2701      	movs	r7, #1
   3e84c:	f8d5 2118 	ldr.w	r2, [r5, #280]	@ 0x118
   3e850:	bb02      	cbnz	r2, 3e894 <d_print_mod_list+0x5c>
   3e852:	68a2      	ldr	r2, [r4, #8]
   3e854:	bb0a      	cbnz	r2, 3e89a <d_print_mod_list+0x62>
   3e856:	6862      	ldr	r2, [r4, #4]
   3e858:	7811      	ldrb	r1, [r2, #0]
   3e85a:	b936      	cbnz	r6, 3e86a <d_print_mod_list+0x32>
   3e85c:	294e      	cmp	r1, #78	@ 0x4e
   3e85e:	d01c      	beq.n	3e89a <d_print_mod_list+0x62>
   3e860:	d81f      	bhi.n	3e8a2 <d_print_mod_list+0x6a>
   3e862:	f1a1 031c 	sub.w	r3, r1, #28
   3e866:	2b04      	cmp	r3, #4
   3e868:	d917      	bls.n	3e89a <d_print_mod_list+0x62>
   3e86a:	68e3      	ldr	r3, [r4, #12]
   3e86c:	f8d5 8110 	ldr.w	r8, [r5, #272]	@ 0x110
   3e870:	60a7      	str	r7, [r4, #8]
   3e872:	2929      	cmp	r1, #41	@ 0x29
   3e874:	f8c5 3110 	str.w	r3, [r5, #272]	@ 0x110
   3e878:	d01e      	beq.n	3e8b8 <d_print_mod_list+0x80>
   3e87a:	292a      	cmp	r1, #42	@ 0x2a
   3e87c:	d026      	beq.n	3e8cc <d_print_mod_list+0x94>
   3e87e:	2902      	cmp	r1, #2
   3e880:	d02e      	beq.n	3e8e0 <d_print_mod_list+0xa8>
   3e882:	2111      	movs	r1, #17
   3e884:	4628      	mov	r0, r5
   3e886:	f7ff fbdb 	bl	3e040 <d_print_mod>
   3e88a:	6824      	ldr	r4, [r4, #0]
   3e88c:	f8c5 8110 	str.w	r8, [r5, #272]	@ 0x110
   3e890:	2c00      	cmp	r4, #0
   3e892:	d1db      	bne.n	3e84c <d_print_mod_list+0x14>
   3e894:	b008      	add	sp, #32
   3e896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3e89a:	6824      	ldr	r4, [r4, #0]
   3e89c:	2c00      	cmp	r4, #0
   3e89e:	d1d5      	bne.n	3e84c <d_print_mod_list+0x14>
   3e8a0:	e7f8      	b.n	3e894 <d_print_mod_list+0x5c>
   3e8a2:	3950      	subs	r1, #80	@ 0x50
   3e8a4:	2901      	cmp	r1, #1
   3e8a6:	d9f8      	bls.n	3e89a <d_print_mod_list+0x62>
   3e8a8:	68e3      	ldr	r3, [r4, #12]
   3e8aa:	f8d5 8110 	ldr.w	r8, [r5, #272]	@ 0x110
   3e8ae:	2101      	movs	r1, #1
   3e8b0:	60a1      	str	r1, [r4, #8]
   3e8b2:	f8c5 3110 	str.w	r3, [r5, #272]	@ 0x110
   3e8b6:	e7e4      	b.n	3e882 <d_print_mod_list+0x4a>
   3e8b8:	6823      	ldr	r3, [r4, #0]
   3e8ba:	2111      	movs	r1, #17
   3e8bc:	4628      	mov	r0, r5
   3e8be:	f7ff fed1 	bl	3e664 <d_print_function_type>
   3e8c2:	f8c5 8110 	str.w	r8, [r5, #272]	@ 0x110
   3e8c6:	b008      	add	sp, #32
   3e8c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3e8cc:	6823      	ldr	r3, [r4, #0]
   3e8ce:	2111      	movs	r1, #17
   3e8d0:	4628      	mov	r0, r5
   3e8d2:	f000 f8d1 	bl	3ea78 <d_print_array_type>
   3e8d6:	f8c5 8110 	str.w	r8, [r5, #272]	@ 0x110
   3e8da:	b008      	add	sp, #32
   3e8dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3e8e0:	2300      	movs	r3, #0
   3e8e2:	4e61      	ldr	r6, [pc, #388]	@ (3ea68 <d_print_mod_list+0x230>)
   3e8e4:	f8d5 7114 	ldr.w	r7, [r5, #276]	@ 0x114
   3e8e8:	68d2      	ldr	r2, [r2, #12]
   3e8ea:	f8c5 3114 	str.w	r3, [r5, #276]	@ 0x114
   3e8ee:	2111      	movs	r1, #17
   3e8f0:	4628      	mov	r0, r5
   3e8f2:	f7ff fb77 	bl	3dfe4 <d_print_comp>
   3e8f6:	f106 0902 	add.w	r9, r6, #2
   3e8fa:	f8d5 1100 	ldr.w	r1, [r5, #256]	@ 0x100
   3e8fe:	f8c5 7114 	str.w	r7, [r5, #276]	@ 0x114
   3e902:	e008      	b.n	3e916 <d_print_mod_list+0xde>
   3e904:	460b      	mov	r3, r1
   3e906:	3101      	adds	r1, #1
   3e908:	454e      	cmp	r6, r9
   3e90a:	f8c5 1100 	str.w	r1, [r5, #256]	@ 0x100
   3e90e:	54ef      	strb	r7, [r5, r3]
   3e910:	f885 7104 	strb.w	r7, [r5, #260]	@ 0x104
   3e914:	d013      	beq.n	3e93e <d_print_mod_list+0x106>
   3e916:	29ff      	cmp	r1, #255	@ 0xff
   3e918:	f816 7b01 	ldrb.w	r7, [r6], #1
   3e91c:	d1f2      	bne.n	3e904 <d_print_mod_list+0xcc>
   3e91e:	f04f 0a00 	mov.w	sl, #0
   3e922:	e9d5 3242 	ldrd	r3, r2, [r5, #264]	@ 0x108
   3e926:	f885 a0ff 	strb.w	sl, [r5, #255]	@ 0xff
   3e92a:	4628      	mov	r0, r5
   3e92c:	4798      	blx	r3
   3e92e:	f8d5 2128 	ldr.w	r2, [r5, #296]	@ 0x128
   3e932:	3201      	adds	r2, #1
   3e934:	4653      	mov	r3, sl
   3e936:	f8c5 2128 	str.w	r2, [r5, #296]	@ 0x128
   3e93a:	2101      	movs	r1, #1
   3e93c:	e7e4      	b.n	3e908 <d_print_mod_list+0xd0>
   3e93e:	6863      	ldr	r3, [r4, #4]
   3e940:	691c      	ldr	r4, [r3, #16]
   3e942:	7823      	ldrb	r3, [r4, #0]
   3e944:	2b48      	cmp	r3, #72	@ 0x48
   3e946:	d017      	beq.n	3e978 <d_print_mod_list+0x140>
   3e948:	2b4e      	cmp	r3, #78	@ 0x4e
   3e94a:	f1a3 0250 	sub.w	r2, r3, #80	@ 0x50
   3e94e:	f1a3 011c 	sub.w	r1, r3, #28
   3e952:	d00e      	beq.n	3e972 <d_print_mod_list+0x13a>
   3e954:	d80b      	bhi.n	3e96e <d_print_mod_list+0x136>
   3e956:	2904      	cmp	r1, #4
   3e958:	d90b      	bls.n	3e972 <d_print_mod_list+0x13a>
   3e95a:	4622      	mov	r2, r4
   3e95c:	2111      	movs	r1, #17
   3e95e:	4628      	mov	r0, r5
   3e960:	f7ff fb40 	bl	3dfe4 <d_print_comp>
   3e964:	f8c5 8110 	str.w	r8, [r5, #272]	@ 0x110
   3e968:	b008      	add	sp, #32
   3e96a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3e96e:	2a01      	cmp	r2, #1
   3e970:	d8f3      	bhi.n	3e95a <d_print_mod_list+0x122>
   3e972:	68e4      	ldr	r4, [r4, #12]
   3e974:	7823      	ldrb	r3, [r4, #0]
   3e976:	e7e7      	b.n	3e948 <d_print_mod_list+0x110>
   3e978:	4e3c      	ldr	r6, [pc, #240]	@ (3ea6c <d_print_mod_list+0x234>)
   3e97a:	f04f 0900 	mov.w	r9, #0
   3e97e:	f106 0a0d 	add.w	sl, r6, #13
   3e982:	e008      	b.n	3e996 <d_print_mod_list+0x15e>
   3e984:	460b      	mov	r3, r1
   3e986:	3101      	adds	r1, #1
   3e988:	4556      	cmp	r6, sl
   3e98a:	f8c5 1100 	str.w	r1, [r5, #256]	@ 0x100
   3e98e:	54ef      	strb	r7, [r5, r3]
   3e990:	f885 7104 	strb.w	r7, [r5, #260]	@ 0x104
   3e994:	d014      	beq.n	3e9c0 <d_print_mod_list+0x188>
   3e996:	29ff      	cmp	r1, #255	@ 0xff
   3e998:	f816 7b01 	ldrb.w	r7, [r6], #1
   3e99c:	d1f2      	bne.n	3e984 <d_print_mod_list+0x14c>
   3e99e:	f8d5 3108 	ldr.w	r3, [r5, #264]	@ 0x108
   3e9a2:	f8d5 210c 	ldr.w	r2, [r5, #268]	@ 0x10c
   3e9a6:	f885 90ff 	strb.w	r9, [r5, #255]	@ 0xff
   3e9aa:	4628      	mov	r0, r5
   3e9ac:	4798      	blx	r3
   3e9ae:	f8d5 2128 	ldr.w	r2, [r5, #296]	@ 0x128
   3e9b2:	2101      	movs	r1, #1
   3e9b4:	440a      	add	r2, r1
   3e9b6:	2300      	movs	r3, #0
   3e9b8:	f8c5 2128 	str.w	r2, [r5, #296]	@ 0x128
   3e9bc:	e7e4      	b.n	3e988 <d_print_mod_list+0x150>
   3e9be:	4770      	bx	lr
   3e9c0:	6922      	ldr	r2, [r4, #16]
   3e9c2:	492b      	ldr	r1, [pc, #172]	@ (3ea70 <d_print_mod_list+0x238>)
   3e9c4:	3201      	adds	r2, #1
   3e9c6:	a801      	add	r0, sp, #4
   3e9c8:	f001 f822 	bl	3fa10 <sprintf>
   3e9cc:	a801      	add	r0, sp, #4
   3e9ce:	f7d9 fe77 	bl	186c0 <strlen>
   3e9d2:	4682      	mov	sl, r0
   3e9d4:	b318      	cbz	r0, 3ea1e <d_print_mod_list+0x1e6>
   3e9d6:	ae01      	add	r6, sp, #4
   3e9d8:	f8d5 1100 	ldr.w	r1, [r5, #256]	@ 0x100
   3e9dc:	44b2      	add	sl, r6
   3e9de:	f04f 0900 	mov.w	r9, #0
   3e9e2:	e008      	b.n	3e9f6 <d_print_mod_list+0x1be>
   3e9e4:	460b      	mov	r3, r1
   3e9e6:	3101      	adds	r1, #1
   3e9e8:	4556      	cmp	r6, sl
   3e9ea:	f8c5 1100 	str.w	r1, [r5, #256]	@ 0x100
   3e9ee:	54ef      	strb	r7, [r5, r3]
   3e9f0:	f885 7104 	strb.w	r7, [r5, #260]	@ 0x104
   3e9f4:	d015      	beq.n	3ea22 <d_print_mod_list+0x1ea>
   3e9f6:	29ff      	cmp	r1, #255	@ 0xff
   3e9f8:	f816 7b01 	ldrb.w	r7, [r6], #1
   3e9fc:	d1f2      	bne.n	3e9e4 <d_print_mod_list+0x1ac>
   3e9fe:	f8d5 3108 	ldr.w	r3, [r5, #264]	@ 0x108
   3ea02:	f8d5 210c 	ldr.w	r2, [r5, #268]	@ 0x10c
   3ea06:	f885 90ff 	strb.w	r9, [r5, #255]	@ 0xff
   3ea0a:	4628      	mov	r0, r5
   3ea0c:	4798      	blx	r3
   3ea0e:	f8d5 2128 	ldr.w	r2, [r5, #296]	@ 0x128
   3ea12:	2101      	movs	r1, #1
   3ea14:	440a      	add	r2, r1
   3ea16:	2300      	movs	r3, #0
   3ea18:	f8c5 2128 	str.w	r2, [r5, #296]	@ 0x128
   3ea1c:	e7e4      	b.n	3e9e8 <d_print_mod_list+0x1b0>
   3ea1e:	f8d5 1100 	ldr.w	r1, [r5, #256]	@ 0x100
   3ea22:	4e14      	ldr	r6, [pc, #80]	@ (3ea74 <d_print_mod_list+0x23c>)
   3ea24:	f04f 0900 	mov.w	r9, #0
   3ea28:	f106 0a03 	add.w	sl, r6, #3
   3ea2c:	e008      	b.n	3ea40 <d_print_mod_list+0x208>
   3ea2e:	460b      	mov	r3, r1
   3ea30:	3101      	adds	r1, #1
   3ea32:	4556      	cmp	r6, sl
   3ea34:	f8c5 1100 	str.w	r1, [r5, #256]	@ 0x100
   3ea38:	54ef      	strb	r7, [r5, r3]
   3ea3a:	f885 7104 	strb.w	r7, [r5, #260]	@ 0x104
   3ea3e:	d098      	beq.n	3e972 <d_print_mod_list+0x13a>
   3ea40:	29ff      	cmp	r1, #255	@ 0xff
   3ea42:	f816 7b01 	ldrb.w	r7, [r6], #1
   3ea46:	d1f2      	bne.n	3ea2e <d_print_mod_list+0x1f6>
   3ea48:	f8d5 3108 	ldr.w	r3, [r5, #264]	@ 0x108
   3ea4c:	f8d5 210c 	ldr.w	r2, [r5, #268]	@ 0x10c
   3ea50:	f885 90ff 	strb.w	r9, [r5, #255]	@ 0xff
   3ea54:	4628      	mov	r0, r5
   3ea56:	4798      	blx	r3
   3ea58:	f8d5 2128 	ldr.w	r2, [r5, #296]	@ 0x128
   3ea5c:	2101      	movs	r1, #1
   3ea5e:	440a      	add	r2, r1
   3ea60:	2300      	movs	r3, #0
   3ea62:	f8c5 2128 	str.w	r2, [r5, #296]	@ 0x128
   3ea66:	e7e4      	b.n	3ea32 <d_print_mod_list+0x1fa>
   3ea68:	00044268 	.word	0x00044268
   3ea6c:	0004426c 	.word	0x0004426c
   3ea70:	000441f4 	.word	0x000441f4
   3ea74:	0004427c 	.word	0x0004427c

0003ea78 <d_print_array_type>:
   3ea78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3ea7c:	4604      	mov	r4, r0
   3ea7e:	4616      	mov	r6, r2
   3ea80:	b39b      	cbz	r3, 3eaea <d_print_array_type+0x72>
   3ea82:	461f      	mov	r7, r3
   3ea84:	e001      	b.n	3ea8a <d_print_array_type+0x12>
   3ea86:	681b      	ldr	r3, [r3, #0]
   3ea88:	b353      	cbz	r3, 3eae0 <d_print_array_type+0x68>
   3ea8a:	689d      	ldr	r5, [r3, #8]
   3ea8c:	2d00      	cmp	r5, #0
   3ea8e:	d1fa      	bne.n	3ea86 <d_print_array_type+0xe>
   3ea90:	685b      	ldr	r3, [r3, #4]
   3ea92:	781b      	ldrb	r3, [r3, #0]
   3ea94:	2b2a      	cmp	r3, #42	@ 0x2a
   3ea96:	d15e      	bne.n	3eb56 <d_print_array_type+0xde>
   3ea98:	2111      	movs	r1, #17
   3ea9a:	462b      	mov	r3, r5
   3ea9c:	463a      	mov	r2, r7
   3ea9e:	4620      	mov	r0, r4
   3eaa0:	f7ff feca 	bl	3e838 <d_print_mod_list>
   3eaa4:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3eaa8:	29ff      	cmp	r1, #255	@ 0xff
   3eaaa:	d02b      	beq.n	3eb04 <d_print_array_type+0x8c>
   3eaac:	225b      	movs	r2, #91	@ 0x5b
   3eaae:	1c4b      	adds	r3, r1, #1
   3eab0:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
   3eab4:	5462      	strb	r2, [r4, r1]
   3eab6:	f884 2104 	strb.w	r2, [r4, #260]	@ 0x104
   3eaba:	68f2      	ldr	r2, [r6, #12]
   3eabc:	b12a      	cbz	r2, 3eaca <d_print_array_type+0x52>
   3eabe:	2111      	movs	r1, #17
   3eac0:	4620      	mov	r0, r4
   3eac2:	f7ff fa8f 	bl	3dfe4 <d_print_comp>
   3eac6:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   3eaca:	2bff      	cmp	r3, #255	@ 0xff
   3eacc:	d033      	beq.n	3eb36 <d_print_array_type+0xbe>
   3eace:	1c59      	adds	r1, r3, #1
   3ead0:	225d      	movs	r2, #93	@ 0x5d
   3ead2:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3ead6:	54e2      	strb	r2, [r4, r3]
   3ead8:	f884 2104 	strb.w	r2, [r4, #260]	@ 0x104
   3eadc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3eae0:	463a      	mov	r2, r7
   3eae2:	2111      	movs	r1, #17
   3eae4:	4620      	mov	r0, r4
   3eae6:	f7ff fea7 	bl	3e838 <d_print_mod_list>
   3eaea:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   3eaee:	2bff      	cmp	r3, #255	@ 0xff
   3eaf0:	d071      	beq.n	3ebd6 <d_print_array_type+0x15e>
   3eaf2:	1c59      	adds	r1, r3, #1
   3eaf4:	2220      	movs	r2, #32
   3eaf6:	29ff      	cmp	r1, #255	@ 0xff
   3eaf8:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3eafc:	54e2      	strb	r2, [r4, r3]
   3eafe:	f884 2104 	strb.w	r2, [r4, #260]	@ 0x104
   3eb02:	d1d3      	bne.n	3eaac <d_print_array_type+0x34>
   3eb04:	2200      	movs	r2, #0
   3eb06:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3eb0a:	f884 20ff 	strb.w	r2, [r4, #255]	@ 0xff
   3eb0e:	4620      	mov	r0, r4
   3eb10:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3eb14:	4798      	blx	r3
   3eb16:	225b      	movs	r2, #91	@ 0x5b
   3eb18:	f8d4 1128 	ldr.w	r1, [r4, #296]	@ 0x128
   3eb1c:	7022      	strb	r2, [r4, #0]
   3eb1e:	f884 2104 	strb.w	r2, [r4, #260]	@ 0x104
   3eb22:	68f2      	ldr	r2, [r6, #12]
   3eb24:	2301      	movs	r3, #1
   3eb26:	4419      	add	r1, r3
   3eb28:	f8c4 1128 	str.w	r1, [r4, #296]	@ 0x128
   3eb2c:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
   3eb30:	2a00      	cmp	r2, #0
   3eb32:	d1c4      	bne.n	3eabe <d_print_array_type+0x46>
   3eb34:	e7cb      	b.n	3eace <d_print_array_type+0x56>
   3eb36:	2500      	movs	r5, #0
   3eb38:	4619      	mov	r1, r3
   3eb3a:	e9d4 6242 	ldrd	r6, r2, [r4, #264]	@ 0x108
   3eb3e:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
   3eb42:	4620      	mov	r0, r4
   3eb44:	47b0      	blx	r6
   3eb46:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3eb4a:	2101      	movs	r1, #1
   3eb4c:	440a      	add	r2, r1
   3eb4e:	462b      	mov	r3, r5
   3eb50:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3eb54:	e7bc      	b.n	3ead0 <d_print_array_type+0x58>
   3eb56:	f8df 80cc 	ldr.w	r8, [pc, #204]	@ 3ec24 <d_print_array_type+0x1ac>
   3eb5a:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3eb5e:	f108 0a02 	add.w	sl, r8, #2
   3eb62:	e00a      	b.n	3eb7a <d_print_array_type+0x102>
   3eb64:	460a      	mov	r2, r1
   3eb66:	45c2      	cmp	sl, r8
   3eb68:	f101 0101 	add.w	r1, r1, #1
   3eb6c:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3eb70:	f804 9002 	strb.w	r9, [r4, r2]
   3eb74:	f884 9104 	strb.w	r9, [r4, #260]	@ 0x104
   3eb78:	d01a      	beq.n	3ebb0 <d_print_array_type+0x138>
   3eb7a:	29ff      	cmp	r1, #255	@ 0xff
   3eb7c:	f818 9b01 	ldrb.w	r9, [r8], #1
   3eb80:	d1f0      	bne.n	3eb64 <d_print_array_type+0xec>
   3eb82:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3eb86:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3eb8a:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
   3eb8e:	4620      	mov	r0, r4
   3eb90:	4798      	blx	r3
   3eb92:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3eb96:	2101      	movs	r1, #1
   3eb98:	2200      	movs	r2, #0
   3eb9a:	440b      	add	r3, r1
   3eb9c:	45c2      	cmp	sl, r8
   3eb9e:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3eba2:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3eba6:	f804 9002 	strb.w	r9, [r4, r2]
   3ebaa:	f884 9104 	strb.w	r9, [r4, #260]	@ 0x104
   3ebae:	d1e4      	bne.n	3eb7a <d_print_array_type+0x102>
   3ebb0:	2111      	movs	r1, #17
   3ebb2:	2300      	movs	r3, #0
   3ebb4:	463a      	mov	r2, r7
   3ebb6:	4620      	mov	r0, r4
   3ebb8:	f7ff fe3e 	bl	3e838 <d_print_mod_list>
   3ebbc:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3ebc0:	29ff      	cmp	r1, #255	@ 0xff
   3ebc2:	d01b      	beq.n	3ebfc <d_print_array_type+0x184>
   3ebc4:	1c4b      	adds	r3, r1, #1
   3ebc6:	2229      	movs	r2, #41	@ 0x29
   3ebc8:	2bff      	cmp	r3, #255	@ 0xff
   3ebca:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
   3ebce:	5462      	strb	r2, [r4, r1]
   3ebd0:	f884 2104 	strb.w	r2, [r4, #260]	@ 0x104
   3ebd4:	d18d      	bne.n	3eaf2 <d_print_array_type+0x7a>
   3ebd6:	2200      	movs	r2, #0
   3ebd8:	4619      	mov	r1, r3
   3ebda:	f884 20ff 	strb.w	r2, [r4, #255]	@ 0xff
   3ebde:	f8d4 5108 	ldr.w	r5, [r4, #264]	@ 0x108
   3ebe2:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3ebe6:	4620      	mov	r0, r4
   3ebe8:	47a8      	blx	r5
   3ebea:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3ebee:	2101      	movs	r1, #1
   3ebf0:	2220      	movs	r2, #32
   3ebf2:	440b      	add	r3, r1
   3ebf4:	7022      	strb	r2, [r4, #0]
   3ebf6:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3ebfa:	e757      	b.n	3eaac <d_print_array_type+0x34>
   3ebfc:	2200      	movs	r2, #0
   3ebfe:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3ec02:	f884 20ff 	strb.w	r2, [r4, #255]	@ 0xff
   3ec06:	4620      	mov	r0, r4
   3ec08:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3ec0c:	4798      	blx	r3
   3ec0e:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3ec12:	f242 0229 	movw	r2, #8233	@ 0x2029
   3ec16:	3301      	adds	r3, #1
   3ec18:	2102      	movs	r1, #2
   3ec1a:	8022      	strh	r2, [r4, #0]
   3ec1c:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3ec20:	e744      	b.n	3eaac <d_print_array_type+0x34>
   3ec22:	bf00      	nop
   3ec24:	00044470 	.word	0x00044470

0003ec28 <d_print_expr_op>:
   3ec28:	7811      	ldrb	r1, [r2, #0]
   3ec2a:	2932      	cmp	r1, #50	@ 0x32
   3ec2c:	d002      	beq.n	3ec34 <d_print_expr_op+0xc>
   3ec2e:	2111      	movs	r1, #17
   3ec30:	f7ff b9d8 	b.w	3dfe4 <d_print_comp>
   3ec34:	68d3      	ldr	r3, [r2, #12]
   3ec36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3ec3a:	e9d3 5701 	ldrd	r5, r7, [r3, #4]
   3ec3e:	b367      	cbz	r7, 3ec9a <d_print_expr_op+0x72>
   3ec40:	442f      	add	r7, r5
   3ec42:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3ec46:	4604      	mov	r4, r0
   3ec48:	3d01      	subs	r5, #1
   3ec4a:	3f01      	subs	r7, #1
   3ec4c:	f04f 0800 	mov.w	r8, #0
   3ec50:	e009      	b.n	3ec66 <d_print_expr_op+0x3e>
   3ec52:	460b      	mov	r3, r1
   3ec54:	42bd      	cmp	r5, r7
   3ec56:	f101 0101 	add.w	r1, r1, #1
   3ec5a:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3ec5e:	54e6      	strb	r6, [r4, r3]
   3ec60:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3ec64:	d019      	beq.n	3ec9a <d_print_expr_op+0x72>
   3ec66:	29ff      	cmp	r1, #255	@ 0xff
   3ec68:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   3ec6c:	d1f1      	bne.n	3ec52 <d_print_expr_op+0x2a>
   3ec6e:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3ec72:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3ec76:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3ec7a:	4620      	mov	r0, r4
   3ec7c:	4798      	blx	r3
   3ec7e:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3ec82:	2101      	movs	r1, #1
   3ec84:	2300      	movs	r3, #0
   3ec86:	440a      	add	r2, r1
   3ec88:	42bd      	cmp	r5, r7
   3ec8a:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3ec8e:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3ec92:	54e6      	strb	r6, [r4, r3]
   3ec94:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3ec98:	d1e5      	bne.n	3ec66 <d_print_expr_op+0x3e>
   3ec9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3ec9e:	bf00      	nop

0003eca0 <d_demangle_callback.constprop.0>:
   3eca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3eca4:	b0e9      	sub	sp, #420	@ 0x1a4
   3eca6:	7803      	ldrb	r3, [r0, #0]
   3eca8:	af00      	add	r7, sp, #0
   3ecaa:	2b5f      	cmp	r3, #95	@ 0x5f
   3ecac:	4605      	mov	r5, r0
   3ecae:	4689      	mov	r9, r1
   3ecb0:	607a      	str	r2, [r7, #4]
   3ecb2:	f000 8130 	beq.w	3ef16 <d_demangle_callback.constprop.0+0x276>
   3ecb6:	499f      	ldr	r1, [pc, #636]	@ (3ef34 <d_demangle_callback.constprop.0+0x294>)
   3ecb8:	2208      	movs	r2, #8
   3ecba:	4628      	mov	r0, r5
   3ecbc:	f7e8 f960 	bl	26f80 <strncmp>
   3ecc0:	4603      	mov	r3, r0
   3ecc2:	2800      	cmp	r0, #0
   3ecc4:	f040 8083 	bne.w	3edce <d_demangle_callback.constprop.0+0x12e>
   3ecc8:	7a2a      	ldrb	r2, [r5, #8]
   3ecca:	2a2e      	cmp	r2, #46	@ 0x2e
   3eccc:	d078      	beq.n	3edc0 <d_demangle_callback.constprop.0+0x120>
   3ecce:	2a5f      	cmp	r2, #95	@ 0x5f
   3ecd0:	d076      	beq.n	3edc0 <d_demangle_callback.constprop.0+0x120>
   3ecd2:	2a24      	cmp	r2, #36	@ 0x24
   3ecd4:	d074      	beq.n	3edc0 <d_demangle_callback.constprop.0+0x120>
   3ecd6:	469b      	mov	fp, r3
   3ecd8:	2b00      	cmp	r3, #0
   3ecda:	f04f 0301 	mov.w	r3, #1
   3ecde:	64bb      	str	r3, [r7, #72]	@ 0x48
   3ece0:	bf14      	ite	ne
   3ece2:	2345      	movne	r3, #69	@ 0x45
   3ece4:	2346      	moveq	r3, #70	@ 0x46
   3ece6:	60bb      	str	r3, [r7, #8]
   3ece8:	f1ab 0302 	sub.w	r3, fp, #2
   3ecec:	b2db      	uxtb	r3, r3
   3ecee:	60fb      	str	r3, [r7, #12]
   3ecf0:	f04f 0a11 	mov.w	sl, #17
   3ecf4:	f8c7 9000 	str.w	r9, [r7]
   3ecf8:	4628      	mov	r0, r5
   3ecfa:	f7d9 fce1 	bl	186c0 <strlen>
   3ecfe:	0046      	lsls	r6, r0, #1
   3ed00:	2100      	movs	r1, #0
   3ed02:	182b      	adds	r3, r5, r0
   3ed04:	f5b6 6f00 	cmp.w	r6, #2048	@ 0x800
   3ed08:	e9c7 5304 	strd	r5, r3, [r7, #16]
   3ed0c:	e9c7 a506 	strd	sl, r5, [r7, #24]
   3ed10:	e9c7 1609 	strd	r1, r6, [r7, #36]	@ 0x24
   3ed14:	e9c7 100c 	strd	r1, r0, [r7, #48]	@ 0x30
   3ed18:	e9c7 110e 	strd	r1, r1, [r7, #56]	@ 0x38
   3ed1c:	e9c7 1110 	strd	r1, r1, [r7, #64]	@ 0x40
   3ed20:	64f9      	str	r1, [r7, #76]	@ 0x4c
   3ed22:	f200 8100 	bhi.w	3ef26 <d_demangle_callback.constprop.0+0x286>
   3ed26:	46e8      	mov	r8, sp
   3ed28:	0083      	lsls	r3, r0, #2
   3ed2a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   3ed2e:	eba8 02c0 	sub.w	r2, r8, r0, lsl #3
   3ed32:	3307      	adds	r3, #7
   3ed34:	4695      	mov	sp, r2
   3ed36:	f023 0307 	bic.w	r3, r3, #7
   3ed3a:	46e9      	mov	r9, sp
   3ed3c:	f1bb 0f01 	cmp.w	fp, #1
   3ed40:	ebad 0d03 	sub.w	sp, sp, r3
   3ed44:	f8c7 9020 	str.w	r9, [r7, #32]
   3ed48:	f8c7 d02c 	str.w	sp, [r7, #44]	@ 0x2c
   3ed4c:	d049      	beq.n	3ede2 <d_demangle_callback.constprop.0+0x142>
   3ed4e:	68fb      	ldr	r3, [r7, #12]
   3ed50:	2b01      	cmp	r3, #1
   3ed52:	d83e      	bhi.n	3edd2 <d_demangle_callback.constprop.0+0x132>
   3ed54:	7aeb      	ldrb	r3, [r5, #11]
   3ed56:	f105 040b 	add.w	r4, r5, #11
   3ed5a:	2b5f      	cmp	r3, #95	@ 0x5f
   3ed5c:	61fc      	str	r4, [r7, #28]
   3ed5e:	d103      	bne.n	3ed68 <d_demangle_callback.constprop.0+0xc8>
   3ed60:	7b2b      	ldrb	r3, [r5, #12]
   3ed62:	2b5a      	cmp	r3, #90	@ 0x5a
   3ed64:	f000 80b1 	beq.w	3eeca <d_demangle_callback.constprop.0+0x22a>
   3ed68:	4620      	mov	r0, r4
   3ed6a:	f7d9 fca9 	bl	186c0 <strlen>
   3ed6e:	2e00      	cmp	r6, #0
   3ed70:	f000 80c7 	beq.w	3ef02 <d_demangle_callback.constprop.0+0x262>
   3ed74:	2300      	movs	r3, #0
   3ed76:	2201      	movs	r2, #1
   3ed78:	e9c9 3301 	strd	r3, r3, [r9, #4]
   3ed7c:	627a      	str	r2, [r7, #36]	@ 0x24
   3ed7e:	2800      	cmp	r0, #0
   3ed80:	f000 80bf 	beq.w	3ef02 <d_demangle_callback.constprop.0+0x262>
   3ed84:	e9c9 4003 	strd	r4, r0, [r9, #12]
   3ed88:	f889 3000 	strb.w	r3, [r9]
   3ed8c:	2300      	movs	r3, #0
   3ed8e:	68b9      	ldr	r1, [r7, #8]
   3ed90:	464a      	mov	r2, r9
   3ed92:	f107 0010 	add.w	r0, r7, #16
   3ed96:	f7fa f98d 	bl	390b4 <d_make_comp>
   3ed9a:	4606      	mov	r6, r0
   3ed9c:	4620      	mov	r0, r4
   3ed9e:	f7d9 fc8f 	bl	186c0 <strlen>
   3eda2:	1823      	adds	r3, r4, r0
   3eda4:	61fb      	str	r3, [r7, #28]
   3eda6:	5c23      	ldrb	r3, [r4, r0]
   3eda8:	b913      	cbnz	r3, 3edb0 <d_demangle_callback.constprop.0+0x110>
   3edaa:	2e00      	cmp	r6, #0
   3edac:	f040 80c4 	bne.w	3ef38 <d_demangle_callback.constprop.0+0x298>
   3edb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
   3edb2:	3301      	adds	r3, #1
   3edb4:	f040 80a8 	bne.w	3ef08 <d_demangle_callback.constprop.0+0x268>
   3edb8:	2300      	movs	r3, #0
   3edba:	64bb      	str	r3, [r7, #72]	@ 0x48
   3edbc:	46c5      	mov	sp, r8
   3edbe:	e79b      	b.n	3ecf8 <d_demangle_callback.constprop.0+0x58>
   3edc0:	7a6b      	ldrb	r3, [r5, #9]
   3edc2:	2b44      	cmp	r3, #68	@ 0x44
   3edc4:	f000 811f 	beq.w	3f006 <d_demangle_callback.constprop.0+0x366>
   3edc8:	2b49      	cmp	r3, #73	@ 0x49
   3edca:	f000 8111 	beq.w	3eff0 <d_demangle_callback.constprop.0+0x350>
   3edce:	2300      	movs	r3, #0
   3edd0:	e781      	b.n	3ecd6 <d_demangle_callback.constprop.0+0x36>
   3edd2:	f107 0010 	add.w	r0, r7, #16
   3edd6:	f7fa fdfd 	bl	399d4 <d_type>
   3edda:	69fb      	ldr	r3, [r7, #28]
   3eddc:	4606      	mov	r6, r0
   3edde:	781b      	ldrb	r3, [r3, #0]
   3ede0:	e7e2      	b.n	3eda8 <d_demangle_callback.constprop.0+0x108>
   3ede2:	782b      	ldrb	r3, [r5, #0]
   3ede4:	2b5f      	cmp	r3, #95	@ 0x5f
   3ede6:	d1e3      	bne.n	3edb0 <d_demangle_callback.constprop.0+0x110>
   3ede8:	786b      	ldrb	r3, [r5, #1]
   3edea:	1c6a      	adds	r2, r5, #1
   3edec:	2b5a      	cmp	r3, #90	@ 0x5a
   3edee:	61fa      	str	r2, [r7, #28]
   3edf0:	d1de      	bne.n	3edb0 <d_demangle_callback.constprop.0+0x110>
   3edf2:	78ab      	ldrb	r3, [r5, #2]
   3edf4:	1caa      	adds	r2, r5, #2
   3edf6:	2b47      	cmp	r3, #71	@ 0x47
   3edf8:	61fa      	str	r2, [r7, #28]
   3edfa:	d07a      	beq.n	3eef2 <d_demangle_callback.constprop.0+0x252>
   3edfc:	2b54      	cmp	r3, #84	@ 0x54
   3edfe:	d078      	beq.n	3eef2 <d_demangle_callback.constprop.0+0x252>
   3ee00:	4659      	mov	r1, fp
   3ee02:	f107 0010 	add.w	r0, r7, #16
   3ee06:	f7fc fa03 	bl	3b210 <d_encoding.part.0>
   3ee0a:	4606      	mov	r6, r0
   3ee0c:	e9d7 2106 	ldrd	r2, r1, [r7, #24]
   3ee10:	07d2      	lsls	r2, r2, #31
   3ee12:	780b      	ldrb	r3, [r1, #0]
   3ee14:	d5c8      	bpl.n	3eda8 <d_demangle_callback.constprop.0+0x108>
   3ee16:	2b2e      	cmp	r3, #46	@ 0x2e
   3ee18:	d1c6      	bne.n	3eda8 <d_demangle_callback.constprop.0+0x108>
   3ee1a:	f04f 0900 	mov.w	r9, #0
   3ee1e:	4632      	mov	r2, r6
   3ee20:	784b      	ldrb	r3, [r1, #1]
   3ee22:	f1a3 0061 	sub.w	r0, r3, #97	@ 0x61
   3ee26:	2819      	cmp	r0, #25
   3ee28:	d905      	bls.n	3ee36 <d_demangle_callback.constprop.0+0x196>
   3ee2a:	2b5f      	cmp	r3, #95	@ 0x5f
   3ee2c:	d003      	beq.n	3ee36 <d_demangle_callback.constprop.0+0x196>
   3ee2e:	3b30      	subs	r3, #48	@ 0x30
   3ee30:	2b09      	cmp	r3, #9
   3ee32:	f200 80f1 	bhi.w	3f018 <d_demangle_callback.constprop.0+0x378>
   3ee36:	1c88      	adds	r0, r1, #2
   3ee38:	7803      	ldrb	r3, [r0, #0]
   3ee3a:	f1a3 0661 	sub.w	r6, r3, #97	@ 0x61
   3ee3e:	2e19      	cmp	r6, #25
   3ee40:	4604      	mov	r4, r0
   3ee42:	f1a3 0c30 	sub.w	ip, r3, #48	@ 0x30
   3ee46:	f100 0001 	add.w	r0, r0, #1
   3ee4a:	d9f5      	bls.n	3ee38 <d_demangle_callback.constprop.0+0x198>
   3ee4c:	f1bc 0f09 	cmp.w	ip, #9
   3ee50:	d9f2      	bls.n	3ee38 <d_demangle_callback.constprop.0+0x198>
   3ee52:	2b5f      	cmp	r3, #95	@ 0x5f
   3ee54:	d0f0      	beq.n	3ee38 <d_demangle_callback.constprop.0+0x198>
   3ee56:	2b2e      	cmp	r3, #46	@ 0x2e
   3ee58:	d112      	bne.n	3ee80 <d_demangle_callback.constprop.0+0x1e0>
   3ee5a:	7863      	ldrb	r3, [r4, #1]
   3ee5c:	3b30      	subs	r3, #48	@ 0x30
   3ee5e:	2b09      	cmp	r3, #9
   3ee60:	d80e      	bhi.n	3ee80 <d_demangle_callback.constprop.0+0x1e0>
   3ee62:	78a3      	ldrb	r3, [r4, #2]
   3ee64:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
   3ee68:	2809      	cmp	r0, #9
   3ee6a:	f104 0402 	add.w	r4, r4, #2
   3ee6e:	d8f2      	bhi.n	3ee56 <d_demangle_callback.constprop.0+0x1b6>
   3ee70:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   3ee74:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
   3ee78:	2809      	cmp	r0, #9
   3ee7a:	d9f9      	bls.n	3ee70 <d_demangle_callback.constprop.0+0x1d0>
   3ee7c:	2b2e      	cmp	r3, #46	@ 0x2e
   3ee7e:	d0ec      	beq.n	3ee5a <d_demangle_callback.constprop.0+0x1ba>
   3ee80:	e9d7 0309 	ldrd	r0, r3, [r7, #36]	@ 0x24
   3ee84:	4298      	cmp	r0, r3
   3ee86:	61fc      	str	r4, [r7, #28]
   3ee88:	eba4 0601 	sub.w	r6, r4, r1
   3ee8c:	da37      	bge.n	3eefe <d_demangle_callback.constprop.0+0x25e>
   3ee8e:	f8d7 c020 	ldr.w	ip, [r7, #32]
   3ee92:	eb00 0e80 	add.w	lr, r0, r0, lsl #2
   3ee96:	eb0c 038e 	add.w	r3, ip, lr, lsl #2
   3ee9a:	3001      	adds	r0, #1
   3ee9c:	2e00      	cmp	r6, #0
   3ee9e:	e9c3 9901 	strd	r9, r9, [r3, #4]
   3eea2:	6278      	str	r0, [r7, #36]	@ 0x24
   3eea4:	dd2b      	ble.n	3eefe <d_demangle_callback.constprop.0+0x25e>
   3eea6:	e9c3 9901 	strd	r9, r9, [r3, #4]
   3eeaa:	f80c 902e 	strb.w	r9, [ip, lr, lsl #2]
   3eeae:	e9c3 1603 	strd	r1, r6, [r3, #12]
   3eeb2:	214f      	movs	r1, #79	@ 0x4f
   3eeb4:	f107 0010 	add.w	r0, r7, #16
   3eeb8:	f7fa f8fc 	bl	390b4 <d_make_comp>
   3eebc:	7823      	ldrb	r3, [r4, #0]
   3eebe:	2b2e      	cmp	r3, #46	@ 0x2e
   3eec0:	4602      	mov	r2, r0
   3eec2:	f040 809e 	bne.w	3f002 <d_demangle_callback.constprop.0+0x362>
   3eec6:	4621      	mov	r1, r4
   3eec8:	e7aa      	b.n	3ee20 <d_demangle_callback.constprop.0+0x180>
   3eeca:	7b6b      	ldrb	r3, [r5, #13]
   3eecc:	f105 020d 	add.w	r2, r5, #13
   3eed0:	2b47      	cmp	r3, #71	@ 0x47
   3eed2:	61fa      	str	r2, [r7, #28]
   3eed4:	f107 0010 	add.w	r0, r7, #16
   3eed8:	d001      	beq.n	3eede <d_demangle_callback.constprop.0+0x23e>
   3eeda:	2b54      	cmp	r3, #84	@ 0x54
   3eedc:	d104      	bne.n	3eee8 <d_demangle_callback.constprop.0+0x248>
   3eede:	f7fc fa17 	bl	3b310 <d_special_name>
   3eee2:	69fc      	ldr	r4, [r7, #28]
   3eee4:	4681      	mov	r9, r0
   3eee6:	e751      	b.n	3ed8c <d_demangle_callback.constprop.0+0xec>
   3eee8:	f7fc f992 	bl	3b210 <d_encoding.part.0>
   3eeec:	69fc      	ldr	r4, [r7, #28]
   3eeee:	4681      	mov	r9, r0
   3eef0:	e74c      	b.n	3ed8c <d_demangle_callback.constprop.0+0xec>
   3eef2:	f107 0010 	add.w	r0, r7, #16
   3eef6:	f7fc fa0b 	bl	3b310 <d_special_name>
   3eefa:	4606      	mov	r6, r0
   3eefc:	e786      	b.n	3ee0c <d_demangle_callback.constprop.0+0x16c>
   3eefe:	2300      	movs	r3, #0
   3ef00:	e7d7      	b.n	3eeb2 <d_demangle_callback.constprop.0+0x212>
   3ef02:	f04f 0900 	mov.w	r9, #0
   3ef06:	e741      	b.n	3ed8c <d_demangle_callback.constprop.0+0xec>
   3ef08:	2000      	movs	r0, #0
   3ef0a:	f507 77d2 	add.w	r7, r7, #420	@ 0x1a4
   3ef0e:	46c5      	mov	sp, r8
   3ef10:	46bd      	mov	sp, r7
   3ef12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ef16:	7843      	ldrb	r3, [r0, #1]
   3ef18:	2b5a      	cmp	r3, #90	@ 0x5a
   3ef1a:	f47f aecc 	bne.w	3ecb6 <d_demangle_callback.constprop.0+0x16>
   3ef1e:	2300      	movs	r3, #0
   3ef20:	f04f 0b01 	mov.w	fp, #1
   3ef24:	e6d8      	b.n	3ecd8 <d_demangle_callback.constprop.0+0x38>
   3ef26:	4608      	mov	r0, r1
   3ef28:	f507 77d2 	add.w	r7, r7, #420	@ 0x1a4
   3ef2c:	46bd      	mov	sp, r7
   3ef2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ef32:	bf00      	nop
   3ef34:	000441f8 	.word	0x000441f8
   3ef38:	f107 0450 	add.w	r4, r7, #80	@ 0x50
   3ef3c:	2000      	movs	r0, #0
   3ef3e:	2100      	movs	r1, #0
   3ef40:	e9c7 0164 	strd	r0, r1, [r7, #400]	@ 0x190
   3ef44:	687a      	ldr	r2, [r7, #4]
   3ef46:	f8d7 9000 	ldr.w	r9, [r7]
   3ef4a:	f8c4 210c 	str.w	r2, [r4, #268]	@ 0x10c
   3ef4e:	4631      	mov	r1, r6
   3ef50:	4620      	mov	r0, r4
   3ef52:	e9c7 3361 	strd	r3, r3, [r7, #388]	@ 0x184
   3ef56:	e9c4 3344 	strd	r3, r3, [r4, #272]	@ 0x110
   3ef5a:	e9c4 3349 	strd	r3, r3, [r4, #292]	@ 0x124
   3ef5e:	e9c4 3346 	strd	r3, r3, [r4, #280]	@ 0x118
   3ef62:	60fb      	str	r3, [r7, #12]
   3ef64:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
   3ef68:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3ef6c:	f8c4 3120 	str.w	r3, [r4, #288]	@ 0x120
   3ef70:	f8c4 312c 	str.w	r3, [r4, #300]	@ 0x12c
   3ef74:	f8c4 9108 	str.w	r9, [r4, #264]	@ 0x108
   3ef78:	f7fa f99c 	bl	392b4 <d_count_templates_scopes>
   3ef7c:	f8d4 211c 	ldr.w	r2, [r4, #284]	@ 0x11c
   3ef80:	68fb      	ldr	r3, [r7, #12]
   3ef82:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
   3ef86:	da01      	bge.n	3ef8c <d_demangle_callback.constprop.0+0x2ec>
   3ef88:	f8c4 311c 	str.w	r3, [r4, #284]	@ 0x11c
   3ef8c:	f8d4 1138 	ldr.w	r1, [r4, #312]	@ 0x138
   3ef90:	f8d4 3144 	ldr.w	r3, [r4, #324]	@ 0x144
   3ef94:	2901      	cmp	r1, #1
   3ef96:	fb01 f303 	mul.w	r3, r1, r3
   3ef9a:	4632      	mov	r2, r6
   3ef9c:	bfb8      	it	lt
   3ef9e:	2101      	movlt	r1, #1
   3efa0:	466e      	mov	r6, sp
   3efa2:	eba6 01c1 	sub.w	r1, r6, r1, lsl #3
   3efa6:	2b01      	cmp	r3, #1
   3efa8:	468d      	mov	sp, r1
   3efaa:	f8c4 3144 	str.w	r3, [r4, #324]	@ 0x144
   3efae:	4668      	mov	r0, sp
   3efb0:	bfb8      	it	lt
   3efb2:	2301      	movlt	r3, #1
   3efb4:	eba0 03c3 	sub.w	r3, r0, r3, lsl #3
   3efb8:	469d      	mov	sp, r3
   3efba:	2500      	movs	r5, #0
   3efbc:	f8c4 1130 	str.w	r1, [r4, #304]	@ 0x130
   3efc0:	4620      	mov	r0, r4
   3efc2:	2111      	movs	r1, #17
   3efc4:	f8c4 d13c 	str.w	sp, [r4, #316]	@ 0x13c
   3efc8:	f8c4 5148 	str.w	r5, [r4, #328]	@ 0x148
   3efcc:	f7ff f80a 	bl	3dfe4 <d_print_comp>
   3efd0:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3efd4:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3efd8:	5465      	strb	r5, [r4, r1]
   3efda:	4620      	mov	r0, r4
   3efdc:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3efe0:	46b5      	mov	sp, r6
   3efe2:	4798      	blx	r3
   3efe4:	f8d4 0118 	ldr.w	r0, [r4, #280]	@ 0x118
   3efe8:	fab0 f080 	clz	r0, r0
   3efec:	0940      	lsrs	r0, r0, #5
   3efee:	e78c      	b.n	3ef0a <d_demangle_callback.constprop.0+0x26a>
   3eff0:	7aab      	ldrb	r3, [r5, #10]
   3eff2:	f1a3 035f 	sub.w	r3, r3, #95	@ 0x5f
   3eff6:	fab3 f383 	clz	r3, r3
   3effa:	095b      	lsrs	r3, r3, #5
   3effc:	ea4f 0b43 	mov.w	fp, r3, lsl #1
   3f000:	e66a      	b.n	3ecd8 <d_demangle_callback.constprop.0+0x38>
   3f002:	4606      	mov	r6, r0
   3f004:	e6d0      	b.n	3eda8 <d_demangle_callback.constprop.0+0x108>
   3f006:	7aab      	ldrb	r3, [r5, #10]
   3f008:	2b5f      	cmp	r3, #95	@ 0x5f
   3f00a:	f04f 0300 	mov.w	r3, #0
   3f00e:	f47f ae62 	bne.w	3ecd6 <d_demangle_callback.constprop.0+0x36>
   3f012:	f04f 0b03 	mov.w	fp, #3
   3f016:	e65f      	b.n	3ecd8 <d_demangle_callback.constprop.0+0x38>
   3f018:	69fb      	ldr	r3, [r7, #28]
   3f01a:	4616      	mov	r6, r2
   3f01c:	781b      	ldrb	r3, [r3, #0]
   3f01e:	e6c3      	b.n	3eda8 <d_demangle_callback.constprop.0+0x108>

0003f020 <d_print_subexpr>:
   3f020:	b570      	push	{r4, r5, r6, lr}
   3f022:	7813      	ldrb	r3, [r2, #0]
   3f024:	2b01      	cmp	r3, #1
   3f026:	b082      	sub	sp, #8
   3f028:	4615      	mov	r5, r2
   3f02a:	4604      	mov	r4, r0
   3f02c:	d903      	bls.n	3f036 <d_print_subexpr+0x16>
   3f02e:	2b31      	cmp	r3, #49	@ 0x31
   3f030:	d001      	beq.n	3f036 <d_print_subexpr+0x16>
   3f032:	2b06      	cmp	r3, #6
   3f034:	d136      	bne.n	3f0a4 <d_print_subexpr+0x84>
   3f036:	686b      	ldr	r3, [r5, #4]
   3f038:	2b01      	cmp	r3, #1
   3f03a:	dc2e      	bgt.n	3f09a <d_print_subexpr+0x7a>
   3f03c:	f8d4 211c 	ldr.w	r2, [r4, #284]	@ 0x11c
   3f040:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
   3f044:	dc29      	bgt.n	3f09a <d_print_subexpr+0x7a>
   3f046:	2601      	movs	r6, #1
   3f048:	3301      	adds	r3, #1
   3f04a:	3201      	adds	r2, #1
   3f04c:	606b      	str	r3, [r5, #4]
   3f04e:	2111      	movs	r1, #17
   3f050:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
   3f054:	f8c4 211c 	str.w	r2, [r4, #284]	@ 0x11c
   3f058:	f8c4 d12c 	str.w	sp, [r4, #300]	@ 0x12c
   3f05c:	462a      	mov	r2, r5
   3f05e:	4620      	mov	r0, r4
   3f060:	9301      	str	r3, [sp, #4]
   3f062:	9500      	str	r5, [sp, #0]
   3f064:	f7fc fcf0 	bl	3ba48 <d_print_comp_inner>
   3f068:	686a      	ldr	r2, [r5, #4]
   3f06a:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
   3f06e:	9901      	ldr	r1, [sp, #4]
   3f070:	f8c4 112c 	str.w	r1, [r4, #300]	@ 0x12c
   3f074:	3a01      	subs	r2, #1
   3f076:	3b01      	subs	r3, #1
   3f078:	606a      	str	r2, [r5, #4]
   3f07a:	f8c4 311c 	str.w	r3, [r4, #284]	@ 0x11c
   3f07e:	b97e      	cbnz	r6, 3f0a0 <d_print_subexpr+0x80>
   3f080:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3f084:	29ff      	cmp	r1, #255	@ 0xff
   3f086:	d024      	beq.n	3f0d2 <d_print_subexpr+0xb2>
   3f088:	1c4a      	adds	r2, r1, #1
   3f08a:	2329      	movs	r3, #41	@ 0x29
   3f08c:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
   3f090:	5463      	strb	r3, [r4, r1]
   3f092:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3f096:	b002      	add	sp, #8
   3f098:	bd70      	pop	{r4, r5, r6, pc}
   3f09a:	2301      	movs	r3, #1
   3f09c:	f8c4 3118 	str.w	r3, [r4, #280]	@ 0x118
   3f0a0:	b002      	add	sp, #8
   3f0a2:	bd70      	pop	{r4, r5, r6, pc}
   3f0a4:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
   3f0a8:	2bff      	cmp	r3, #255	@ 0xff
   3f0aa:	d021      	beq.n	3f0f0 <d_print_subexpr+0xd0>
   3f0ac:	1c59      	adds	r1, r3, #1
   3f0ae:	2228      	movs	r2, #40	@ 0x28
   3f0b0:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3f0b4:	54e2      	strb	r2, [r4, r3]
   3f0b6:	f884 2104 	strb.w	r2, [r4, #260]	@ 0x104
   3f0ba:	686b      	ldr	r3, [r5, #4]
   3f0bc:	2b01      	cmp	r3, #1
   3f0be:	dc04      	bgt.n	3f0ca <d_print_subexpr+0xaa>
   3f0c0:	f8d4 211c 	ldr.w	r2, [r4, #284]	@ 0x11c
   3f0c4:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
   3f0c8:	dd21      	ble.n	3f10e <d_print_subexpr+0xee>
   3f0ca:	2301      	movs	r3, #1
   3f0cc:	f8c4 3118 	str.w	r3, [r4, #280]	@ 0x118
   3f0d0:	e7d8      	b.n	3f084 <d_print_subexpr+0x64>
   3f0d2:	2500      	movs	r5, #0
   3f0d4:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   3f0d8:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
   3f0dc:	4620      	mov	r0, r4
   3f0de:	4798      	blx	r3
   3f0e0:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3f0e4:	2201      	movs	r2, #1
   3f0e6:	4413      	add	r3, r2
   3f0e8:	4629      	mov	r1, r5
   3f0ea:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3f0ee:	e7cc      	b.n	3f08a <d_print_subexpr+0x6a>
   3f0f0:	2600      	movs	r6, #0
   3f0f2:	4619      	mov	r1, r3
   3f0f4:	f880 60ff 	strb.w	r6, [r0, #255]	@ 0xff
   3f0f8:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	@ 0x108
   3f0fc:	4798      	blx	r3
   3f0fe:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3f102:	2101      	movs	r1, #1
   3f104:	440a      	add	r2, r1
   3f106:	4633      	mov	r3, r6
   3f108:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3f10c:	e7cf      	b.n	3f0ae <d_print_subexpr+0x8e>
   3f10e:	2600      	movs	r6, #0
   3f110:	e79a      	b.n	3f048 <d_print_subexpr+0x28>
   3f112:	bf00      	nop

0003f114 <d_maybe_print_fold_expression>:
   3f114:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f118:	68d3      	ldr	r3, [r2, #12]
   3f11a:	68db      	ldr	r3, [r3, #12]
   3f11c:	681b      	ldr	r3, [r3, #0]
   3f11e:	7819      	ldrb	r1, [r3, #0]
   3f120:	2966      	cmp	r1, #102	@ 0x66
   3f122:	d165      	bne.n	3f1f0 <d_maybe_print_fold_expression+0xdc>
   3f124:	6912      	ldr	r2, [r2, #16]
   3f126:	f8d0 7124 	ldr.w	r7, [r0, #292]	@ 0x124
   3f12a:	e9d2 8a03 	ldrd	r8, sl, [r2, #12]
   3f12e:	f89a 2000 	ldrb.w	r2, [sl]
   3f132:	2a3c      	cmp	r2, #60	@ 0x3c
   3f134:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
   3f138:	bf08      	it	eq
   3f13a:	e9da a903 	ldrdeq	sl, r9, [sl, #12]
   3f13e:	f8c0 2124 	str.w	r2, [r0, #292]	@ 0x124
   3f142:	785b      	ldrb	r3, [r3, #1]
   3f144:	bf18      	it	ne
   3f146:	f04f 0900 	movne.w	r9, #0
   3f14a:	2b6c      	cmp	r3, #108	@ 0x6c
   3f14c:	4604      	mov	r4, r0
   3f14e:	f000 809b 	beq.w	3f288 <d_maybe_print_fold_expression+0x174>
   3f152:	d850      	bhi.n	3f1f6 <d_maybe_print_fold_expression+0xe2>
   3f154:	2b4c      	cmp	r3, #76	@ 0x4c
   3f156:	d002      	beq.n	3f15e <d_maybe_print_fold_expression+0x4a>
   3f158:	2b52      	cmp	r3, #82	@ 0x52
   3f15a:	f040 8090 	bne.w	3f27e <d_maybe_print_fold_expression+0x16a>
   3f15e:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3f162:	29ff      	cmp	r1, #255	@ 0xff
   3f164:	f000 80f4 	beq.w	3f350 <d_maybe_print_fold_expression+0x23c>
   3f168:	1c4b      	adds	r3, r1, #1
   3f16a:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
   3f16e:	2328      	movs	r3, #40	@ 0x28
   3f170:	5463      	strb	r3, [r4, r1]
   3f172:	4652      	mov	r2, sl
   3f174:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3f178:	2111      	movs	r1, #17
   3f17a:	4620      	mov	r0, r4
   3f17c:	4d7c      	ldr	r5, [pc, #496]	@ (3f370 <d_maybe_print_fold_expression+0x25c>)
   3f17e:	f7ff ff4f 	bl	3f020 <d_print_subexpr>
   3f182:	2111      	movs	r1, #17
   3f184:	4642      	mov	r2, r8
   3f186:	4620      	mov	r0, r4
   3f188:	f7ff fd4e 	bl	3ec28 <d_print_expr_op>
   3f18c:	f04f 0a00 	mov.w	sl, #0
   3f190:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3f194:	f105 0b03 	add.w	fp, r5, #3
   3f198:	e009      	b.n	3f1ae <d_maybe_print_fold_expression+0x9a>
   3f19a:	460a      	mov	r2, r1
   3f19c:	45ab      	cmp	fp, r5
   3f19e:	f101 0101 	add.w	r1, r1, #1
   3f1a2:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3f1a6:	54a6      	strb	r6, [r4, r2]
   3f1a8:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3f1ac:	d019      	beq.n	3f1e2 <d_maybe_print_fold_expression+0xce>
   3f1ae:	29ff      	cmp	r1, #255	@ 0xff
   3f1b0:	f815 6b01 	ldrb.w	r6, [r5], #1
   3f1b4:	d1f1      	bne.n	3f19a <d_maybe_print_fold_expression+0x86>
   3f1b6:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3f1ba:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3f1be:	f884 a0ff 	strb.w	sl, [r4, #255]	@ 0xff
   3f1c2:	4620      	mov	r0, r4
   3f1c4:	4798      	blx	r3
   3f1c6:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3f1ca:	2101      	movs	r1, #1
   3f1cc:	2200      	movs	r2, #0
   3f1ce:	440b      	add	r3, r1
   3f1d0:	45ab      	cmp	fp, r5
   3f1d2:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3f1d6:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3f1da:	54a6      	strb	r6, [r4, r2]
   3f1dc:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3f1e0:	d1e5      	bne.n	3f1ae <d_maybe_print_fold_expression+0x9a>
   3f1e2:	4642      	mov	r2, r8
   3f1e4:	2111      	movs	r1, #17
   3f1e6:	4620      	mov	r0, r4
   3f1e8:	f7ff fd1e 	bl	3ec28 <d_print_expr_op>
   3f1ec:	464a      	mov	r2, r9
   3f1ee:	e07d      	b.n	3f2ec <d_maybe_print_fold_expression+0x1d8>
   3f1f0:	2000      	movs	r0, #0
   3f1f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f1f6:	2b72      	cmp	r3, #114	@ 0x72
   3f1f8:	d141      	bne.n	3f27e <d_maybe_print_fold_expression+0x16a>
   3f1fa:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3f1fe:	29ff      	cmp	r1, #255	@ 0xff
   3f200:	f000 8098 	beq.w	3f334 <d_maybe_print_fold_expression+0x220>
   3f204:	1c4b      	adds	r3, r1, #1
   3f206:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
   3f20a:	2328      	movs	r3, #40	@ 0x28
   3f20c:	5463      	strb	r3, [r4, r1]
   3f20e:	4652      	mov	r2, sl
   3f210:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3f214:	2111      	movs	r1, #17
   3f216:	4620      	mov	r0, r4
   3f218:	4d56      	ldr	r5, [pc, #344]	@ (3f374 <d_maybe_print_fold_expression+0x260>)
   3f21a:	f7ff ff01 	bl	3f020 <d_print_subexpr>
   3f21e:	4642      	mov	r2, r8
   3f220:	2111      	movs	r1, #17
   3f222:	4620      	mov	r0, r4
   3f224:	f7ff fd00 	bl	3ec28 <d_print_expr_op>
   3f228:	f04f 0900 	mov.w	r9, #0
   3f22c:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3f230:	f105 0804 	add.w	r8, r5, #4
   3f234:	e009      	b.n	3f24a <d_maybe_print_fold_expression+0x136>
   3f236:	460a      	mov	r2, r1
   3f238:	45a8      	cmp	r8, r5
   3f23a:	f101 0101 	add.w	r1, r1, #1
   3f23e:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3f242:	54a6      	strb	r6, [r4, r2]
   3f244:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3f248:	d019      	beq.n	3f27e <d_maybe_print_fold_expression+0x16a>
   3f24a:	29ff      	cmp	r1, #255	@ 0xff
   3f24c:	f815 6b01 	ldrb.w	r6, [r5], #1
   3f250:	d1f1      	bne.n	3f236 <d_maybe_print_fold_expression+0x122>
   3f252:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3f256:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3f25a:	f884 90ff 	strb.w	r9, [r4, #255]	@ 0xff
   3f25e:	4620      	mov	r0, r4
   3f260:	4798      	blx	r3
   3f262:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3f266:	2101      	movs	r1, #1
   3f268:	2200      	movs	r2, #0
   3f26a:	440b      	add	r3, r1
   3f26c:	45a8      	cmp	r8, r5
   3f26e:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3f272:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3f276:	54a6      	strb	r6, [r4, r2]
   3f278:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3f27c:	d1e5      	bne.n	3f24a <d_maybe_print_fold_expression+0x136>
   3f27e:	f8c4 7124 	str.w	r7, [r4, #292]	@ 0x124
   3f282:	2001      	movs	r0, #1
   3f284:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f288:	4d3b      	ldr	r5, [pc, #236]	@ (3f378 <d_maybe_print_fold_expression+0x264>)
   3f28a:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3f28e:	f04f 0900 	mov.w	r9, #0
   3f292:	f105 0b04 	add.w	fp, r5, #4
   3f296:	e009      	b.n	3f2ac <d_maybe_print_fold_expression+0x198>
   3f298:	460a      	mov	r2, r1
   3f29a:	455d      	cmp	r5, fp
   3f29c:	f101 0101 	add.w	r1, r1, #1
   3f2a0:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3f2a4:	54a6      	strb	r6, [r4, r2]
   3f2a6:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3f2aa:	d019      	beq.n	3f2e0 <d_maybe_print_fold_expression+0x1cc>
   3f2ac:	29ff      	cmp	r1, #255	@ 0xff
   3f2ae:	f815 6b01 	ldrb.w	r6, [r5], #1
   3f2b2:	d1f1      	bne.n	3f298 <d_maybe_print_fold_expression+0x184>
   3f2b4:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3f2b8:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3f2bc:	f884 90ff 	strb.w	r9, [r4, #255]	@ 0xff
   3f2c0:	4620      	mov	r0, r4
   3f2c2:	4798      	blx	r3
   3f2c4:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3f2c8:	2101      	movs	r1, #1
   3f2ca:	2200      	movs	r2, #0
   3f2cc:	440b      	add	r3, r1
   3f2ce:	455d      	cmp	r5, fp
   3f2d0:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3f2d4:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3f2d8:	54a6      	strb	r6, [r4, r2]
   3f2da:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3f2de:	d1e5      	bne.n	3f2ac <d_maybe_print_fold_expression+0x198>
   3f2e0:	4642      	mov	r2, r8
   3f2e2:	2111      	movs	r1, #17
   3f2e4:	4620      	mov	r0, r4
   3f2e6:	f7ff fc9f 	bl	3ec28 <d_print_expr_op>
   3f2ea:	4652      	mov	r2, sl
   3f2ec:	2111      	movs	r1, #17
   3f2ee:	4620      	mov	r0, r4
   3f2f0:	f7ff fe96 	bl	3f020 <d_print_subexpr>
   3f2f4:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3f2f8:	29ff      	cmp	r1, #255	@ 0xff
   3f2fa:	d00a      	beq.n	3f312 <d_maybe_print_fold_expression+0x1fe>
   3f2fc:	1c4a      	adds	r2, r1, #1
   3f2fe:	2329      	movs	r3, #41	@ 0x29
   3f300:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
   3f304:	2001      	movs	r0, #1
   3f306:	5463      	strb	r3, [r4, r1]
   3f308:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3f30c:	f8c4 7124 	str.w	r7, [r4, #292]	@ 0x124
   3f310:	e7b8      	b.n	3f284 <d_maybe_print_fold_expression+0x170>
   3f312:	2500      	movs	r5, #0
   3f314:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3f318:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3f31c:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
   3f320:	4620      	mov	r0, r4
   3f322:	4798      	blx	r3
   3f324:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3f328:	2201      	movs	r2, #1
   3f32a:	4413      	add	r3, r2
   3f32c:	4629      	mov	r1, r5
   3f32e:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3f332:	e7e4      	b.n	3f2fe <d_maybe_print_fold_expression+0x1ea>
   3f334:	2500      	movs	r5, #0
   3f336:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	@ 0x108
   3f33a:	f880 50ff 	strb.w	r5, [r0, #255]	@ 0xff
   3f33e:	4798      	blx	r3
   3f340:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3f344:	3301      	adds	r3, #1
   3f346:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3f34a:	4629      	mov	r1, r5
   3f34c:	2301      	movs	r3, #1
   3f34e:	e75a      	b.n	3f206 <d_maybe_print_fold_expression+0xf2>
   3f350:	2500      	movs	r5, #0
   3f352:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   3f356:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
   3f35a:	4620      	mov	r0, r4
   3f35c:	4798      	blx	r3
   3f35e:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3f362:	3301      	adds	r3, #1
   3f364:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3f368:	4629      	mov	r1, r5
   3f36a:	2301      	movs	r3, #1
   3f36c:	e6fd      	b.n	3f16a <d_maybe_print_fold_expression+0x56>
   3f36e:	bf00      	nop
   3f370:	00044474 	.word	0x00044474
   3f374:	0004458c 	.word	0x0004458c
   3f378:	00044584 	.word	0x00044584

0003f37c <d_maybe_print_designated_init>:
   3f37c:	7813      	ldrb	r3, [r2, #0]
   3f37e:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
   3f382:	2b38      	cmp	r3, #56	@ 0x38
   3f384:	d001      	beq.n	3f38a <d_maybe_print_designated_init+0xe>
   3f386:	2000      	movs	r0, #0
   3f388:	4770      	bx	lr
   3f38a:	68d3      	ldr	r3, [r2, #12]
   3f38c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3f390:	68db      	ldr	r3, [r3, #12]
   3f392:	681e      	ldr	r6, [r3, #0]
   3f394:	7833      	ldrb	r3, [r6, #0]
   3f396:	2b64      	cmp	r3, #100	@ 0x64
   3f398:	d002      	beq.n	3f3a0 <d_maybe_print_designated_init+0x24>
   3f39a:	2000      	movs	r0, #0
   3f39c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3f3a0:	7873      	ldrb	r3, [r6, #1]
   3f3a2:	2b69      	cmp	r3, #105	@ 0x69
   3f3a4:	4604      	mov	r4, r0
   3f3a6:	d011      	beq.n	3f3cc <d_maybe_print_designated_init+0x50>
   3f3a8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
   3f3ac:	2b58      	cmp	r3, #88	@ 0x58
   3f3ae:	d1f4      	bne.n	3f39a <d_maybe_print_designated_init+0x1e>
   3f3b0:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3f3b4:	6913      	ldr	r3, [r2, #16]
   3f3b6:	29ff      	cmp	r1, #255	@ 0xff
   3f3b8:	e9d3 5703 	ldrd	r5, r7, [r3, #12]
   3f3bc:	f000 808c 	beq.w	3f4d8 <d_maybe_print_designated_init+0x15c>
   3f3c0:	1c4b      	adds	r3, r1, #1
   3f3c2:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
   3f3c6:	235b      	movs	r3, #91	@ 0x5b
   3f3c8:	5463      	strb	r3, [r4, r1]
   3f3ca:	e00c      	b.n	3f3e6 <d_maybe_print_designated_init+0x6a>
   3f3cc:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3f3d0:	6913      	ldr	r3, [r2, #16]
   3f3d2:	29ff      	cmp	r1, #255	@ 0xff
   3f3d4:	e9d3 5703 	ldrd	r5, r7, [r3, #12]
   3f3d8:	f000 80af 	beq.w	3f53a <d_maybe_print_designated_init+0x1be>
   3f3dc:	1c4b      	adds	r3, r1, #1
   3f3de:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
   3f3e2:	232e      	movs	r3, #46	@ 0x2e
   3f3e4:	5463      	strb	r3, [r4, r1]
   3f3e6:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3f3ea:	462a      	mov	r2, r5
   3f3ec:	2111      	movs	r1, #17
   3f3ee:	4620      	mov	r0, r4
   3f3f0:	f7fe fdf8 	bl	3dfe4 <d_print_comp>
   3f3f4:	7873      	ldrb	r3, [r6, #1]
   3f3f6:	2b58      	cmp	r3, #88	@ 0x58
   3f3f8:	d038      	beq.n	3f46c <d_maybe_print_designated_init+0xf0>
   3f3fa:	2b69      	cmp	r3, #105	@ 0x69
   3f3fc:	d00b      	beq.n	3f416 <d_maybe_print_designated_init+0x9a>
   3f3fe:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3f402:	29ff      	cmp	r1, #255	@ 0xff
   3f404:	f000 8088 	beq.w	3f518 <d_maybe_print_designated_init+0x19c>
   3f408:	1c4a      	adds	r2, r1, #1
   3f40a:	235d      	movs	r3, #93	@ 0x5d
   3f40c:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
   3f410:	5463      	strb	r3, [r4, r1]
   3f412:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3f416:	783b      	ldrb	r3, [r7, #0]
   3f418:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
   3f41c:	2b38      	cmp	r3, #56	@ 0x38
   3f41e:	d012      	beq.n	3f446 <d_maybe_print_designated_init+0xca>
   3f420:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3f424:	29ff      	cmp	r1, #255	@ 0xff
   3f426:	d066      	beq.n	3f4f6 <d_maybe_print_designated_init+0x17a>
   3f428:	1c4a      	adds	r2, r1, #1
   3f42a:	233d      	movs	r3, #61	@ 0x3d
   3f42c:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
   3f430:	4620      	mov	r0, r4
   3f432:	5463      	strb	r3, [r4, r1]
   3f434:	463a      	mov	r2, r7
   3f436:	2111      	movs	r1, #17
   3f438:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3f43c:	f7ff fdf0 	bl	3f020 <d_print_subexpr>
   3f440:	2001      	movs	r0, #1
   3f442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3f446:	68fb      	ldr	r3, [r7, #12]
   3f448:	68db      	ldr	r3, [r3, #12]
   3f44a:	681b      	ldr	r3, [r3, #0]
   3f44c:	781a      	ldrb	r2, [r3, #0]
   3f44e:	2a64      	cmp	r2, #100	@ 0x64
   3f450:	d1e6      	bne.n	3f420 <d_maybe_print_designated_init+0xa4>
   3f452:	785b      	ldrb	r3, [r3, #1]
   3f454:	2b69      	cmp	r3, #105	@ 0x69
   3f456:	d003      	beq.n	3f460 <d_maybe_print_designated_init+0xe4>
   3f458:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
   3f45c:	2b58      	cmp	r3, #88	@ 0x58
   3f45e:	d1df      	bne.n	3f420 <d_maybe_print_designated_init+0xa4>
   3f460:	463a      	mov	r2, r7
   3f462:	2111      	movs	r1, #17
   3f464:	4620      	mov	r0, r4
   3f466:	f7fe fdbd 	bl	3dfe4 <d_print_comp>
   3f46a:	e7e9      	b.n	3f440 <d_maybe_print_designated_init+0xc4>
   3f46c:	4d3a      	ldr	r5, [pc, #232]	@ (3f558 <d_maybe_print_designated_init+0x1dc>)
   3f46e:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3f472:	f105 0a05 	add.w	sl, r5, #5
   3f476:	f04f 0900 	mov.w	r9, #0
   3f47a:	e00a      	b.n	3f492 <d_maybe_print_designated_init+0x116>
   3f47c:	460b      	mov	r3, r1
   3f47e:	45aa      	cmp	sl, r5
   3f480:	f101 0101 	add.w	r1, r1, #1
   3f484:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3f488:	f804 8003 	strb.w	r8, [r4, r3]
   3f48c:	f884 8104 	strb.w	r8, [r4, #260]	@ 0x104
   3f490:	d01a      	beq.n	3f4c8 <d_maybe_print_designated_init+0x14c>
   3f492:	29ff      	cmp	r1, #255	@ 0xff
   3f494:	f815 8b01 	ldrb.w	r8, [r5], #1
   3f498:	d1f0      	bne.n	3f47c <d_maybe_print_designated_init+0x100>
   3f49a:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3f49e:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3f4a2:	f884 90ff 	strb.w	r9, [r4, #255]	@ 0xff
   3f4a6:	4620      	mov	r0, r4
   3f4a8:	4798      	blx	r3
   3f4aa:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3f4ae:	2101      	movs	r1, #1
   3f4b0:	2300      	movs	r3, #0
   3f4b2:	440a      	add	r2, r1
   3f4b4:	45aa      	cmp	sl, r5
   3f4b6:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3f4ba:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3f4be:	f804 8003 	strb.w	r8, [r4, r3]
   3f4c2:	f884 8104 	strb.w	r8, [r4, #260]	@ 0x104
   3f4c6:	d1e4      	bne.n	3f492 <d_maybe_print_designated_init+0x116>
   3f4c8:	68fa      	ldr	r2, [r7, #12]
   3f4ca:	2111      	movs	r1, #17
   3f4cc:	4620      	mov	r0, r4
   3f4ce:	f7fe fd89 	bl	3dfe4 <d_print_comp>
   3f4d2:	693f      	ldr	r7, [r7, #16]
   3f4d4:	7873      	ldrb	r3, [r6, #1]
   3f4d6:	e790      	b.n	3f3fa <d_maybe_print_designated_init+0x7e>
   3f4d8:	f04f 0800 	mov.w	r8, #0
   3f4dc:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   3f4e0:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3f4e4:	4798      	blx	r3
   3f4e6:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3f4ea:	3301      	adds	r3, #1
   3f4ec:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3f4f0:	4641      	mov	r1, r8
   3f4f2:	2301      	movs	r3, #1
   3f4f4:	e765      	b.n	3f3c2 <d_maybe_print_designated_init+0x46>
   3f4f6:	2500      	movs	r5, #0
   3f4f8:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3f4fc:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3f500:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
   3f504:	4620      	mov	r0, r4
   3f506:	4798      	blx	r3
   3f508:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3f50c:	2201      	movs	r2, #1
   3f50e:	4413      	add	r3, r2
   3f510:	4629      	mov	r1, r5
   3f512:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3f516:	e788      	b.n	3f42a <d_maybe_print_designated_init+0xae>
   3f518:	2500      	movs	r5, #0
   3f51a:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3f51e:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3f522:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
   3f526:	4620      	mov	r0, r4
   3f528:	4798      	blx	r3
   3f52a:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3f52e:	2201      	movs	r2, #1
   3f530:	4413      	add	r3, r2
   3f532:	4629      	mov	r1, r5
   3f534:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3f538:	e767      	b.n	3f40a <d_maybe_print_designated_init+0x8e>
   3f53a:	f04f 0800 	mov.w	r8, #0
   3f53e:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   3f542:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3f546:	4798      	blx	r3
   3f548:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3f54c:	3301      	adds	r3, #1
   3f54e:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3f552:	4641      	mov	r1, r8
   3f554:	2301      	movs	r3, #1
   3f556:	e742      	b.n	3f3de <d_maybe_print_designated_init+0x62>
   3f558:	00044594 	.word	0x00044594

0003f55c <__cxa_demangle>:
   3f55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3f560:	461e      	mov	r6, r3
   3f562:	b084      	sub	sp, #16
   3f564:	2800      	cmp	r0, #0
   3f566:	d03f      	beq.n	3f5e8 <__cxa_demangle+0x8c>
   3f568:	460c      	mov	r4, r1
   3f56a:	4615      	mov	r5, r2
   3f56c:	b109      	cbz	r1, 3f572 <__cxa_demangle+0x16>
   3f56e:	2a00      	cmp	r2, #0
   3f570:	d03a      	beq.n	3f5e8 <__cxa_demangle+0x8c>
   3f572:	2300      	movs	r3, #0
   3f574:	4927      	ldr	r1, [pc, #156]	@ (3f614 <__cxa_demangle+0xb8>)
   3f576:	466a      	mov	r2, sp
   3f578:	e9cd 3300 	strd	r3, r3, [sp]
   3f57c:	e9cd 3302 	strd	r3, r3, [sp, #8]
   3f580:	f7ff fb8e 	bl	3eca0 <d_demangle_callback.constprop.0>
   3f584:	2800      	cmp	r0, #0
   3f586:	d035      	beq.n	3f5f4 <__cxa_demangle+0x98>
   3f588:	9b03      	ldr	r3, [sp, #12]
   3f58a:	9f00      	ldr	r7, [sp, #0]
   3f58c:	b9d3      	cbnz	r3, 3f5c4 <__cxa_demangle+0x68>
   3f58e:	f8dd 8008 	ldr.w	r8, [sp, #8]
   3f592:	2f00      	cmp	r7, #0
   3f594:	d037      	beq.n	3f606 <__cxa_demangle+0xaa>
   3f596:	b324      	cbz	r4, 3f5e2 <__cxa_demangle+0x86>
   3f598:	4638      	mov	r0, r7
   3f59a:	f7d9 f891 	bl	186c0 <strlen>
   3f59e:	682b      	ldr	r3, [r5, #0]
   3f5a0:	4298      	cmp	r0, r3
   3f5a2:	d218      	bcs.n	3f5d6 <__cxa_demangle+0x7a>
   3f5a4:	1c42      	adds	r2, r0, #1
   3f5a6:	4639      	mov	r1, r7
   3f5a8:	4620      	mov	r0, r4
   3f5aa:	f7d8 ffe9 	bl	18580 <memcpy>
   3f5ae:	4638      	mov	r0, r7
   3f5b0:	f000 f972 	bl	3f898 <free>
   3f5b4:	4627      	mov	r7, r4
   3f5b6:	b10e      	cbz	r6, 3f5bc <__cxa_demangle+0x60>
   3f5b8:	2300      	movs	r3, #0
   3f5ba:	6033      	str	r3, [r6, #0]
   3f5bc:	4638      	mov	r0, r7
   3f5be:	b004      	add	sp, #16
   3f5c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3f5c4:	f04f 0801 	mov.w	r8, #1
   3f5c8:	2f00      	cmp	r7, #0
   3f5ca:	d1e4      	bne.n	3f596 <__cxa_demangle+0x3a>
   3f5cc:	b186      	cbz	r6, 3f5f0 <__cxa_demangle+0x94>
   3f5ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
   3f5d2:	6033      	str	r3, [r6, #0]
   3f5d4:	e00c      	b.n	3f5f0 <__cxa_demangle+0x94>
   3f5d6:	4620      	mov	r0, r4
   3f5d8:	f000 f95e 	bl	3f898 <free>
   3f5dc:	f8c5 8000 	str.w	r8, [r5]
   3f5e0:	e7e9      	b.n	3f5b6 <__cxa_demangle+0x5a>
   3f5e2:	2d00      	cmp	r5, #0
   3f5e4:	d1fa      	bne.n	3f5dc <__cxa_demangle+0x80>
   3f5e6:	e7e6      	b.n	3f5b6 <__cxa_demangle+0x5a>
   3f5e8:	b116      	cbz	r6, 3f5f0 <__cxa_demangle+0x94>
   3f5ea:	f06f 0302 	mvn.w	r3, #2
   3f5ee:	6033      	str	r3, [r6, #0]
   3f5f0:	2700      	movs	r7, #0
   3f5f2:	e7e3      	b.n	3f5bc <__cxa_demangle+0x60>
   3f5f4:	9800      	ldr	r0, [sp, #0]
   3f5f6:	f000 f94f 	bl	3f898 <free>
   3f5fa:	2e00      	cmp	r6, #0
   3f5fc:	d0f8      	beq.n	3f5f0 <__cxa_demangle+0x94>
   3f5fe:	f06f 0301 	mvn.w	r3, #1
   3f602:	6033      	str	r3, [r6, #0]
   3f604:	e7f4      	b.n	3f5f0 <__cxa_demangle+0x94>
   3f606:	2e00      	cmp	r6, #0
   3f608:	d0f2      	beq.n	3f5f0 <__cxa_demangle+0x94>
   3f60a:	f1b8 0f01 	cmp.w	r8, #1
   3f60e:	d1f6      	bne.n	3f5fe <__cxa_demangle+0xa2>
   3f610:	e7dd      	b.n	3f5ce <__cxa_demangle+0x72>
   3f612:	bf00      	nop
   3f614:	00039401 	.word	0x00039401

0003f618 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
   3f618:	7803      	ldrb	r3, [r0, #0]
   3f61a:	2b47      	cmp	r3, #71	@ 0x47
   3f61c:	d001      	beq.n	3f622 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0xa>
   3f61e:	2000      	movs	r0, #0
   3f620:	4770      	bx	lr
   3f622:	7843      	ldrb	r3, [r0, #1]
   3f624:	2b4e      	cmp	r3, #78	@ 0x4e
   3f626:	d1fa      	bne.n	3f61e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   3f628:	7883      	ldrb	r3, [r0, #2]
   3f62a:	2b55      	cmp	r3, #85	@ 0x55
   3f62c:	d1f7      	bne.n	3f61e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   3f62e:	78c3      	ldrb	r3, [r0, #3]
   3f630:	2b43      	cmp	r3, #67	@ 0x43
   3f632:	d1f4      	bne.n	3f61e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   3f634:	7903      	ldrb	r3, [r0, #4]
   3f636:	2b43      	cmp	r3, #67	@ 0x43
   3f638:	d1f1      	bne.n	3f61e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   3f63a:	7943      	ldrb	r3, [r0, #5]
   3f63c:	2b2b      	cmp	r3, #43	@ 0x2b
   3f63e:	d1ee      	bne.n	3f61e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   3f640:	7983      	ldrb	r3, [r0, #6]
   3f642:	2b2b      	cmp	r3, #43	@ 0x2b
   3f644:	d1eb      	bne.n	3f61e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   3f646:	79c0      	ldrb	r0, [r0, #7]
   3f648:	2801      	cmp	r0, #1
   3f64a:	bf8c      	ite	hi
   3f64c:	2000      	movhi	r0, #0
   3f64e:	2001      	movls	r0, #1
   3f650:	4770      	bx	lr
   3f652:	bf00      	nop

0003f654 <__cxa_call_terminate>:
   3f654:	b510      	push	{r4, lr}
   3f656:	b130      	cbz	r0, 3f666 <__cxa_call_terminate+0x12>
   3f658:	4604      	mov	r4, r0
   3f65a:	f000 f875 	bl	3f748 <__cxa_begin_catch>
   3f65e:	4620      	mov	r0, r4
   3f660:	f7ff ffda 	bl	3f618 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   3f664:	b908      	cbnz	r0, 3f66a <__cxa_call_terminate+0x16>
   3f666:	f7f9 fa27 	bl	38ab8 <_ZSt9terminatev>
   3f66a:	f854 0c14 	ldr.w	r0, [r4, #-20]
   3f66e:	f7f9 fa1b 	bl	38aa8 <_ZN10__cxxabiv111__terminateEPFvvE>
   3f672:	bf00      	nop

0003f674 <__cxa_call_unexpected>:
   3f674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f678:	b083      	sub	sp, #12
   3f67a:	4602      	mov	r2, r0
   3f67c:	f7ff ffcc 	bl	3f618 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   3f680:	b138      	cbz	r0, 3f692 <__cxa_call_unexpected+0x1e>
   3f682:	e952 8406 	ldrd	r8, r4, [r2, #-24]
   3f686:	e9d2 750c 	ldrd	r7, r5, [r2, #48]	@ 0x30
   3f68a:	f8d2 a028 	ldr.w	sl, [r2, #40]	@ 0x28
   3f68e:	2600      	movs	r6, #0
   3f690:	e005      	b.n	3f69e <__cxa_call_unexpected+0x2a>
   3f692:	4604      	mov	r4, r0
   3f694:	4680      	mov	r8, r0
   3f696:	2601      	movs	r6, #1
   3f698:	4605      	mov	r5, r0
   3f69a:	4607      	mov	r7, r0
   3f69c:	4682      	mov	sl, r0
   3f69e:	4610      	mov	r0, r2
   3f6a0:	f000 f852 	bl	3f748 <__cxa_begin_catch>
   3f6a4:	b10e      	cbz	r6, 3f6aa <__cxa_call_unexpected+0x36>
   3f6a6:	f7f9 fa15 	bl	38ad4 <_ZSt10unexpectedv>
   3f6aa:	4640      	mov	r0, r8
   3f6ac:	f7f9 fa0e 	bl	38acc <_ZN10__cxxabiv112__unexpectedEPFvvE>
   3f6b0:	f000 f84a 	bl	3f748 <__cxa_begin_catch>
   3f6b4:	b10e      	cbz	r6, 3f6ba <__cxa_call_unexpected+0x46>
   3f6b6:	f7f9 f9ff 	bl	38ab8 <_ZSt9terminatev>
   3f6ba:	f7f8 ff03 	bl	384c4 <__cxa_get_globals_fast>
   3f6be:	6803      	ldr	r3, [r0, #0]
   3f6c0:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
   3f6c4:	2a01      	cmp	r2, #1
   3f6c6:	bf0c      	ite	eq
   3f6c8:	681a      	ldreq	r2, [r3, #0]
   3f6ca:	f103 0278 	addne.w	r2, r3, #120	@ 0x78
   3f6ce:	9200      	str	r2, [sp, #0]
   3f6d0:	f027 0803 	bic.w	r8, r7, #3
   3f6d4:	f103 0b20 	add.w	fp, r3, #32
   3f6d8:	f04f 0900 	mov.w	r9, #0
   3f6dc:	45ca      	cmp	sl, r9
   3f6de:	dd1a      	ble.n	3f716 <__cxa_call_unexpected+0xa2>
   3f6e0:	682f      	ldr	r7, [r5, #0]
   3f6e2:	b107      	cbz	r7, 3f6e6 <__cxa_call_unexpected+0x72>
   3f6e4:	442f      	add	r7, r5
   3f6e6:	466b      	mov	r3, sp
   3f6e8:	2200      	movs	r2, #0
   3f6ea:	4639      	mov	r1, r7
   3f6ec:	4658      	mov	r0, fp
   3f6ee:	f7f8 fe13 	bl	38318 <__cxa_type_match>
   3f6f2:	b108      	cbz	r0, 3f6f8 <__cxa_call_unexpected+0x84>
   3f6f4:	f7f9 fa66 	bl	38bc4 <__cxa_rethrow>
   3f6f8:	683b      	ldr	r3, [r7, #0]
   3f6fa:	9001      	str	r0, [sp, #4]
   3f6fc:	490f      	ldr	r1, [pc, #60]	@ (3f73c <__cxa_call_unexpected+0xc8>)
   3f6fe:	4638      	mov	r0, r7
   3f700:	aa01      	add	r2, sp, #4
   3f702:	691f      	ldr	r7, [r3, #16]
   3f704:	2301      	movs	r3, #1
   3f706:	47b8      	blx	r7
   3f708:	2800      	cmp	r0, #0
   3f70a:	bf18      	it	ne
   3f70c:	4606      	movne	r6, r0
   3f70e:	f109 0901 	add.w	r9, r9, #1
   3f712:	4445      	add	r5, r8
   3f714:	e7e2      	b.n	3f6dc <__cxa_call_unexpected+0x68>
   3f716:	b146      	cbz	r6, 3f72a <__cxa_call_unexpected+0xb6>
   3f718:	2004      	movs	r0, #4
   3f71a:	f7f8 fd4f 	bl	381bc <__cxa_allocate_exception>
   3f71e:	4b08      	ldr	r3, [pc, #32]	@ (3f740 <__cxa_call_unexpected+0xcc>)
   3f720:	4a08      	ldr	r2, [pc, #32]	@ (3f744 <__cxa_call_unexpected+0xd0>)
   3f722:	4906      	ldr	r1, [pc, #24]	@ (3f73c <__cxa_call_unexpected+0xc8>)
   3f724:	6003      	str	r3, [r0, #0]
   3f726:	f7f9 fa33 	bl	38b90 <__cxa_throw>
   3f72a:	4620      	mov	r0, r4
   3f72c:	f7f9 f9bc 	bl	38aa8 <_ZN10__cxxabiv111__terminateEPFvvE>
   3f730:	f000 f848 	bl	3f7c4 <__cxa_end_catch>
   3f734:	f000 f846 	bl	3f7c4 <__cxa_end_catch>
   3f738:	f7f8 fde8 	bl	3830c <__cxa_end_cleanup>
   3f73c:	0004c180 	.word	0x0004c180
   3f740:	0004c1e8 	.word	0x0004c1e8
   3f744:	000384a1 	.word	0x000384a1

0003f748 <__cxa_begin_catch>:
   3f748:	b538      	push	{r3, r4, r5, lr}
   3f74a:	4604      	mov	r4, r0
   3f74c:	f7f8 febe 	bl	384cc <__cxa_get_globals>
   3f750:	4622      	mov	r2, r4
   3f752:	6805      	ldr	r5, [r0, #0]
   3f754:	f812 3920 	ldrb.w	r3, [r2], #-32
   3f758:	2b47      	cmp	r3, #71	@ 0x47
   3f75a:	d003      	beq.n	3f764 <__cxa_begin_catch+0x1c>
   3f75c:	bb85      	cbnz	r5, 3f7c0 <__cxa_begin_catch+0x78>
   3f75e:	6002      	str	r2, [r0, #0]
   3f760:	4628      	mov	r0, r5
   3f762:	bd38      	pop	{r3, r4, r5, pc}
   3f764:	7863      	ldrb	r3, [r4, #1]
   3f766:	2b4e      	cmp	r3, #78	@ 0x4e
   3f768:	d1f8      	bne.n	3f75c <__cxa_begin_catch+0x14>
   3f76a:	78a3      	ldrb	r3, [r4, #2]
   3f76c:	2b55      	cmp	r3, #85	@ 0x55
   3f76e:	d1f5      	bne.n	3f75c <__cxa_begin_catch+0x14>
   3f770:	78e3      	ldrb	r3, [r4, #3]
   3f772:	2b43      	cmp	r3, #67	@ 0x43
   3f774:	d1f2      	bne.n	3f75c <__cxa_begin_catch+0x14>
   3f776:	7923      	ldrb	r3, [r4, #4]
   3f778:	2b43      	cmp	r3, #67	@ 0x43
   3f77a:	d1ef      	bne.n	3f75c <__cxa_begin_catch+0x14>
   3f77c:	7963      	ldrb	r3, [r4, #5]
   3f77e:	2b2b      	cmp	r3, #43	@ 0x2b
   3f780:	d1ec      	bne.n	3f75c <__cxa_begin_catch+0x14>
   3f782:	79a3      	ldrb	r3, [r4, #6]
   3f784:	2b2b      	cmp	r3, #43	@ 0x2b
   3f786:	d1e9      	bne.n	3f75c <__cxa_begin_catch+0x14>
   3f788:	79e3      	ldrb	r3, [r4, #7]
   3f78a:	2b01      	cmp	r3, #1
   3f78c:	d8e6      	bhi.n	3f75c <__cxa_begin_catch+0x14>
   3f78e:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   3f792:	2b00      	cmp	r3, #0
   3f794:	db11      	blt.n	3f7ba <__cxa_begin_catch+0x72>
   3f796:	3301      	adds	r3, #1
   3f798:	f844 3c0c 	str.w	r3, [r4, #-12]
   3f79c:	6843      	ldr	r3, [r0, #4]
   3f79e:	3b01      	subs	r3, #1
   3f7a0:	6043      	str	r3, [r0, #4]
   3f7a2:	4295      	cmp	r5, r2
   3f7a4:	bf18      	it	ne
   3f7a6:	f844 5c10 	strne.w	r5, [r4, #-16]
   3f7aa:	6a65      	ldr	r5, [r4, #36]	@ 0x24
   3f7ac:	bf18      	it	ne
   3f7ae:	6002      	strne	r2, [r0, #0]
   3f7b0:	4620      	mov	r0, r4
   3f7b2:	f000 fc25 	bl	40000 <_Unwind_Complete>
   3f7b6:	4628      	mov	r0, r5
   3f7b8:	bd38      	pop	{r3, r4, r5, pc}
   3f7ba:	f1c3 0301 	rsb	r3, r3, #1
   3f7be:	e7eb      	b.n	3f798 <__cxa_begin_catch+0x50>
   3f7c0:	f7f9 f97a 	bl	38ab8 <_ZSt9terminatev>

0003f7c4 <__cxa_end_catch>:
   3f7c4:	b508      	push	{r3, lr}
   3f7c6:	f7f8 fe7d 	bl	384c4 <__cxa_get_globals_fast>
   3f7ca:	6803      	ldr	r3, [r0, #0]
   3f7cc:	b37b      	cbz	r3, 3f82e <__cxa_end_catch+0x6a>
   3f7ce:	f893 2020 	ldrb.w	r2, [r3, #32]
   3f7d2:	2a47      	cmp	r2, #71	@ 0x47
   3f7d4:	d007      	beq.n	3f7e6 <__cxa_end_catch+0x22>
   3f7d6:	2200      	movs	r2, #0
   3f7d8:	6002      	str	r2, [r0, #0]
   3f7da:	f103 0020 	add.w	r0, r3, #32
   3f7de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3f7e2:	f000 bc0f 	b.w	40004 <_Unwind_DeleteException>
   3f7e6:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
   3f7ea:	2a4e      	cmp	r2, #78	@ 0x4e
   3f7ec:	d1f3      	bne.n	3f7d6 <__cxa_end_catch+0x12>
   3f7ee:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
   3f7f2:	2a55      	cmp	r2, #85	@ 0x55
   3f7f4:	d1ef      	bne.n	3f7d6 <__cxa_end_catch+0x12>
   3f7f6:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
   3f7fa:	2a43      	cmp	r2, #67	@ 0x43
   3f7fc:	d1eb      	bne.n	3f7d6 <__cxa_end_catch+0x12>
   3f7fe:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
   3f802:	2a43      	cmp	r2, #67	@ 0x43
   3f804:	d1e7      	bne.n	3f7d6 <__cxa_end_catch+0x12>
   3f806:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
   3f80a:	2a2b      	cmp	r2, #43	@ 0x2b
   3f80c:	d1e3      	bne.n	3f7d6 <__cxa_end_catch+0x12>
   3f80e:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
   3f812:	2a2b      	cmp	r2, #43	@ 0x2b
   3f814:	d1df      	bne.n	3f7d6 <__cxa_end_catch+0x12>
   3f816:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
   3f81a:	2a01      	cmp	r2, #1
   3f81c:	d8db      	bhi.n	3f7d6 <__cxa_end_catch+0x12>
   3f81e:	695a      	ldr	r2, [r3, #20]
   3f820:	2a00      	cmp	r2, #0
   3f822:	db05      	blt.n	3f830 <__cxa_end_catch+0x6c>
   3f824:	3a01      	subs	r2, #1
   3f826:	d008      	beq.n	3f83a <__cxa_end_catch+0x76>
   3f828:	1c51      	adds	r1, r2, #1
   3f82a:	d00e      	beq.n	3f84a <__cxa_end_catch+0x86>
   3f82c:	615a      	str	r2, [r3, #20]
   3f82e:	bd08      	pop	{r3, pc}
   3f830:	3201      	adds	r2, #1
   3f832:	d1fb      	bne.n	3f82c <__cxa_end_catch+0x68>
   3f834:	6919      	ldr	r1, [r3, #16]
   3f836:	6001      	str	r1, [r0, #0]
   3f838:	e7f8      	b.n	3f82c <__cxa_end_catch+0x68>
   3f83a:	691a      	ldr	r2, [r3, #16]
   3f83c:	6002      	str	r2, [r0, #0]
   3f83e:	f103 0020 	add.w	r0, r3, #32
   3f842:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3f846:	f000 bbdd 	b.w	40004 <_Unwind_DeleteException>
   3f84a:	f7f9 f935 	bl	38ab8 <_ZSt9terminatev>
   3f84e:	bf00      	nop

0003f850 <__cxa_current_exception_type>:
   3f850:	b508      	push	{r3, lr}
   3f852:	f7f8 fe3b 	bl	384cc <__cxa_get_globals>
   3f856:	6800      	ldr	r0, [r0, #0]
   3f858:	b130      	cbz	r0, 3f868 <__cxa_current_exception_type+0x18>
   3f85a:	f890 3027 	ldrb.w	r3, [r0, #39]	@ 0x27
   3f85e:	2b01      	cmp	r3, #1
   3f860:	bf04      	itt	eq
   3f862:	6800      	ldreq	r0, [r0, #0]
   3f864:	3878      	subeq	r0, #120	@ 0x78
   3f866:	6800      	ldr	r0, [r0, #0]
   3f868:	bd08      	pop	{r3, pc}
   3f86a:	bf00      	nop

0003f86c <getenv>:
   3f86c:	b500      	push	{lr}
   3f86e:	4b05      	ldr	r3, [pc, #20]	@ (3f884 <getenv+0x18>)
   3f870:	b083      	sub	sp, #12
   3f872:	4601      	mov	r1, r0
   3f874:	aa01      	add	r2, sp, #4
   3f876:	6818      	ldr	r0, [r3, #0]
   3f878:	f7e7 fe54 	bl	27524 <_findenv_r>
   3f87c:	b003      	add	sp, #12
   3f87e:	f85d fb04 	ldr.w	pc, [sp], #4
   3f882:	bf00      	nop
   3f884:	1000d540 	.word	0x1000d540

0003f888 <malloc>:
   3f888:	4b02      	ldr	r3, [pc, #8]	@ (3f894 <malloc+0xc>)
   3f88a:	4601      	mov	r1, r0
   3f88c:	6818      	ldr	r0, [r3, #0]
   3f88e:	f7e7 be89 	b.w	275a4 <_malloc_r>
   3f892:	bf00      	nop
   3f894:	1000d540 	.word	0x1000d540

0003f898 <free>:
   3f898:	4b02      	ldr	r3, [pc, #8]	@ (3f8a4 <free+0xc>)
   3f89a:	4601      	mov	r1, r0
   3f89c:	6818      	ldr	r0, [r3, #0]
   3f89e:	f7e7 bd45 	b.w	2732c <_free_r>
   3f8a2:	bf00      	nop
   3f8a4:	1000d540 	.word	0x1000d540

0003f8a8 <realloc>:
   3f8a8:	b410      	push	{r4}
   3f8aa:	4c04      	ldr	r4, [pc, #16]	@ (3f8bc <realloc+0x14>)
   3f8ac:	4603      	mov	r3, r0
   3f8ae:	460a      	mov	r2, r1
   3f8b0:	6820      	ldr	r0, [r4, #0]
   3f8b2:	f85d 4b04 	ldr.w	r4, [sp], #4
   3f8b6:	4619      	mov	r1, r3
   3f8b8:	f7e9 bfb6 	b.w	29828 <_realloc_r>
   3f8bc:	1000d540 	.word	0x1000d540

0003f8c0 <_strtoul_l.isra.0>:
   3f8c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3f8c4:	4607      	mov	r7, r0
   3f8c6:	4849      	ldr	r0, [pc, #292]	@ (3f9ec <_strtoul_l.isra.0+0x12c>)
   3f8c8:	460e      	mov	r6, r1
   3f8ca:	4635      	mov	r5, r6
   3f8cc:	f816 eb01 	ldrb.w	lr, [r6], #1
   3f8d0:	f810 c00e 	ldrb.w	ip, [r0, lr]
   3f8d4:	f01c 0c08 	ands.w	ip, ip, #8
   3f8d8:	d1f7      	bne.n	3f8ca <_strtoul_l.isra.0+0xa>
   3f8da:	f1be 0f2d 	cmp.w	lr, #45	@ 0x2d
   3f8de:	d05a      	beq.n	3f996 <_strtoul_l.isra.0+0xd6>
   3f8e0:	f1be 0f2b 	cmp.w	lr, #43	@ 0x2b
   3f8e4:	bf03      	ittte	eq
   3f8e6:	f896 e000 	ldrbeq.w	lr, [r6]
   3f8ea:	4664      	moveq	r4, ip
   3f8ec:	1cae      	addeq	r6, r5, #2
   3f8ee:	4664      	movne	r4, ip
   3f8f0:	b94b      	cbnz	r3, 3f906 <_strtoul_l.isra.0+0x46>
   3f8f2:	f1be 0f30 	cmp.w	lr, #48	@ 0x30
   3f8f6:	d05c      	beq.n	3f9b2 <_strtoul_l.isra.0+0xf2>
   3f8f8:	230a      	movs	r3, #10
   3f8fa:	f8df 80f4 	ldr.w	r8, [pc, #244]	@ 3f9f0 <_strtoul_l.isra.0+0x130>
   3f8fe:	f04f 0a05 	mov.w	sl, #5
   3f902:	4699      	mov	r9, r3
   3f904:	e00a      	b.n	3f91c <_strtoul_l.isra.0+0x5c>
   3f906:	2b10      	cmp	r3, #16
   3f908:	d04a      	beq.n	3f9a0 <_strtoul_l.isra.0+0xe0>
   3f90a:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
   3f90e:	fbb8 f8f3 	udiv	r8, r8, r3
   3f912:	fb03 fa08 	mul.w	sl, r3, r8
   3f916:	ea6f 0a0a 	mvn.w	sl, sl
   3f91a:	4699      	mov	r9, r3
   3f91c:	2500      	movs	r5, #0
   3f91e:	4628      	mov	r0, r5
   3f920:	e005      	b.n	3f92e <_strtoul_l.isra.0+0x6e>
   3f922:	d02c      	beq.n	3f97e <_strtoul_l.isra.0+0xbe>
   3f924:	fb09 c000 	mla	r0, r9, r0, ip
   3f928:	2501      	movs	r5, #1
   3f92a:	f816 eb01 	ldrb.w	lr, [r6], #1
   3f92e:	f1ae 0c30 	sub.w	ip, lr, #48	@ 0x30
   3f932:	f1bc 0f09 	cmp.w	ip, #9
   3f936:	d906      	bls.n	3f946 <_strtoul_l.isra.0+0x86>
   3f938:	f1ae 0c41 	sub.w	ip, lr, #65	@ 0x41
   3f93c:	f1bc 0f19 	cmp.w	ip, #25
   3f940:	d80b      	bhi.n	3f95a <_strtoul_l.isra.0+0x9a>
   3f942:	f1ae 0c37 	sub.w	ip, lr, #55	@ 0x37
   3f946:	4563      	cmp	r3, ip
   3f948:	dd10      	ble.n	3f96c <_strtoul_l.isra.0+0xac>
   3f94a:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
   3f94e:	d0ec      	beq.n	3f92a <_strtoul_l.isra.0+0x6a>
   3f950:	4540      	cmp	r0, r8
   3f952:	d9e6      	bls.n	3f922 <_strtoul_l.isra.0+0x62>
   3f954:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
   3f958:	e7e7      	b.n	3f92a <_strtoul_l.isra.0+0x6a>
   3f95a:	f1ae 0c61 	sub.w	ip, lr, #97	@ 0x61
   3f95e:	f1bc 0f19 	cmp.w	ip, #25
   3f962:	d803      	bhi.n	3f96c <_strtoul_l.isra.0+0xac>
   3f964:	f1ae 0c57 	sub.w	ip, lr, #87	@ 0x57
   3f968:	4563      	cmp	r3, ip
   3f96a:	dcee      	bgt.n	3f94a <_strtoul_l.isra.0+0x8a>
   3f96c:	1c6b      	adds	r3, r5, #1
   3f96e:	d00b      	beq.n	3f988 <_strtoul_l.isra.0+0xc8>
   3f970:	b104      	cbz	r4, 3f974 <_strtoul_l.isra.0+0xb4>
   3f972:	4240      	negs	r0, r0
   3f974:	b10a      	cbz	r2, 3f97a <_strtoul_l.isra.0+0xba>
   3f976:	b965      	cbnz	r5, 3f992 <_strtoul_l.isra.0+0xd2>
   3f978:	6011      	str	r1, [r2, #0]
   3f97a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3f97e:	45d4      	cmp	ip, sl
   3f980:	ddd0      	ble.n	3f924 <_strtoul_l.isra.0+0x64>
   3f982:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
   3f986:	e7d0      	b.n	3f92a <_strtoul_l.isra.0+0x6a>
   3f988:	2322      	movs	r3, #34	@ 0x22
   3f98a:	603b      	str	r3, [r7, #0]
   3f98c:	4628      	mov	r0, r5
   3f98e:	2a00      	cmp	r2, #0
   3f990:	d0f3      	beq.n	3f97a <_strtoul_l.isra.0+0xba>
   3f992:	1e71      	subs	r1, r6, #1
   3f994:	e7f0      	b.n	3f978 <_strtoul_l.isra.0+0xb8>
   3f996:	f896 e000 	ldrb.w	lr, [r6]
   3f99a:	2401      	movs	r4, #1
   3f99c:	1cae      	adds	r6, r5, #2
   3f99e:	e7a7      	b.n	3f8f0 <_strtoul_l.isra.0+0x30>
   3f9a0:	f1be 0f30 	cmp.w	lr, #48	@ 0x30
   3f9a4:	d011      	beq.n	3f9ca <_strtoul_l.isra.0+0x10a>
   3f9a6:	f04f 0a0f 	mov.w	sl, #15
   3f9aa:	f06f 4870 	mvn.w	r8, #4026531840	@ 0xf0000000
   3f9ae:	4699      	mov	r9, r3
   3f9b0:	e7b4      	b.n	3f91c <_strtoul_l.isra.0+0x5c>
   3f9b2:	7833      	ldrb	r3, [r6, #0]
   3f9b4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
   3f9b8:	2b58      	cmp	r3, #88	@ 0x58
   3f9ba:	d00b      	beq.n	3f9d4 <_strtoul_l.isra.0+0x114>
   3f9bc:	2308      	movs	r3, #8
   3f9be:	f04f 0a07 	mov.w	sl, #7
   3f9c2:	f06f 4860 	mvn.w	r8, #3758096384	@ 0xe0000000
   3f9c6:	4699      	mov	r9, r3
   3f9c8:	e7a8      	b.n	3f91c <_strtoul_l.isra.0+0x5c>
   3f9ca:	7830      	ldrb	r0, [r6, #0]
   3f9cc:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
   3f9d0:	2858      	cmp	r0, #88	@ 0x58
   3f9d2:	d1e8      	bne.n	3f9a6 <_strtoul_l.isra.0+0xe6>
   3f9d4:	f04f 0910 	mov.w	r9, #16
   3f9d8:	f896 e001 	ldrb.w	lr, [r6, #1]
   3f9dc:	f04f 0a0f 	mov.w	sl, #15
   3f9e0:	3602      	adds	r6, #2
   3f9e2:	f06f 4870 	mvn.w	r8, #4026531840	@ 0xf0000000
   3f9e6:	464b      	mov	r3, r9
   3f9e8:	e798      	b.n	3f91c <_strtoul_l.isra.0+0x5c>
   3f9ea:	bf00      	nop
   3f9ec:	0004b5f1 	.word	0x0004b5f1
   3f9f0:	19999999 	.word	0x19999999

0003f9f4 <strtoul>:
   3f9f4:	b410      	push	{r4}
   3f9f6:	4c05      	ldr	r4, [pc, #20]	@ (3fa0c <strtoul+0x18>)
   3f9f8:	4684      	mov	ip, r0
   3f9fa:	4613      	mov	r3, r2
   3f9fc:	6820      	ldr	r0, [r4, #0]
   3f9fe:	f85d 4b04 	ldr.w	r4, [sp], #4
   3fa02:	460a      	mov	r2, r1
   3fa04:	4661      	mov	r1, ip
   3fa06:	f7ff bf5b 	b.w	3f8c0 <_strtoul_l.isra.0>
   3fa0a:	bf00      	nop
   3fa0c:	1000d540 	.word	0x1000d540

0003fa10 <sprintf>:
   3fa10:	b40e      	push	{r1, r2, r3}
   3fa12:	b510      	push	{r4, lr}
   3fa14:	b09d      	sub	sp, #116	@ 0x74
   3fa16:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
   3fa1a:	ab1f      	add	r3, sp, #124	@ 0x7c
   3fa1c:	9104      	str	r1, [sp, #16]
   3fa1e:	9107      	str	r1, [sp, #28]
   3fa20:	4909      	ldr	r1, [pc, #36]	@ (3fa48 <sprintf+0x38>)
   3fa22:	f853 2b04 	ldr.w	r2, [r3], #4
   3fa26:	9002      	str	r0, [sp, #8]
   3fa28:	9006      	str	r0, [sp, #24]
   3fa2a:	4c08      	ldr	r4, [pc, #32]	@ (3fa4c <sprintf+0x3c>)
   3fa2c:	6808      	ldr	r0, [r1, #0]
   3fa2e:	9301      	str	r3, [sp, #4]
   3fa30:	a902      	add	r1, sp, #8
   3fa32:	9405      	str	r4, [sp, #20]
   3fa34:	f7e8 f880 	bl	27b38 <_svfprintf_r>
   3fa38:	9b02      	ldr	r3, [sp, #8]
   3fa3a:	2200      	movs	r2, #0
   3fa3c:	701a      	strb	r2, [r3, #0]
   3fa3e:	b01d      	add	sp, #116	@ 0x74
   3fa40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3fa44:	b003      	add	sp, #12
   3fa46:	4770      	bx	lr
   3fa48:	1000d540 	.word	0x1000d540
   3fa4c:	ffff0208 	.word	0xffff0208

0003fa50 <fputc>:
   3fa50:	4b14      	ldr	r3, [pc, #80]	@ (3faa4 <fputc+0x54>)
   3fa52:	b570      	push	{r4, r5, r6, lr}
   3fa54:	681e      	ldr	r6, [r3, #0]
   3fa56:	4605      	mov	r5, r0
   3fa58:	460c      	mov	r4, r1
   3fa5a:	b10e      	cbz	r6, 3fa60 <fputc+0x10>
   3fa5c:	6b73      	ldr	r3, [r6, #52]	@ 0x34
   3fa5e:	b1e3      	cbz	r3, 3fa9a <fputc+0x4a>
   3fa60:	6e63      	ldr	r3, [r4, #100]	@ 0x64
   3fa62:	07d8      	lsls	r0, r3, #31
   3fa64:	d402      	bmi.n	3fa6c <fputc+0x1c>
   3fa66:	89a3      	ldrh	r3, [r4, #12]
   3fa68:	0599      	lsls	r1, r3, #22
   3fa6a:	d512      	bpl.n	3fa92 <fputc+0x42>
   3fa6c:	4622      	mov	r2, r4
   3fa6e:	4629      	mov	r1, r5
   3fa70:	4630      	mov	r0, r6
   3fa72:	f000 f8c5 	bl	3fc00 <_putc_r>
   3fa76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
   3fa78:	07da      	lsls	r2, r3, #31
   3fa7a:	4605      	mov	r5, r0
   3fa7c:	d402      	bmi.n	3fa84 <fputc+0x34>
   3fa7e:	89a3      	ldrh	r3, [r4, #12]
   3fa80:	059b      	lsls	r3, r3, #22
   3fa82:	d501      	bpl.n	3fa88 <fputc+0x38>
   3fa84:	4628      	mov	r0, r5
   3fa86:	bd70      	pop	{r4, r5, r6, pc}
   3fa88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
   3fa8a:	f7e7 fb75 	bl	27178 <__retarget_lock_release_recursive>
   3fa8e:	4628      	mov	r0, r5
   3fa90:	bd70      	pop	{r4, r5, r6, pc}
   3fa92:	6da0      	ldr	r0, [r4, #88]	@ 0x58
   3fa94:	f7e7 fb6e 	bl	27174 <__retarget_lock_acquire_recursive>
   3fa98:	e7e8      	b.n	3fa6c <fputc+0x1c>
   3fa9a:	4630      	mov	r0, r6
   3fa9c:	f7e6 fe9c 	bl	267d8 <__sinit>
   3faa0:	e7de      	b.n	3fa60 <fputc+0x10>
   3faa2:	bf00      	nop
   3faa4:	1000d540 	.word	0x1000d540

0003faa8 <_fputs_r>:
   3faa8:	b530      	push	{r4, r5, lr}
   3faaa:	b087      	sub	sp, #28
   3faac:	4605      	mov	r5, r0
   3faae:	4608      	mov	r0, r1
   3fab0:	4614      	mov	r4, r2
   3fab2:	9101      	str	r1, [sp, #4]
   3fab4:	f7d8 fe04 	bl	186c0 <strlen>
   3fab8:	aa01      	add	r2, sp, #4
   3faba:	2301      	movs	r3, #1
   3fabc:	e9cd 0202 	strd	r0, r2, [sp, #8]
   3fac0:	9005      	str	r0, [sp, #20]
   3fac2:	9304      	str	r3, [sp, #16]
   3fac4:	b10d      	cbz	r5, 3faca <_fputs_r+0x22>
   3fac6:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
   3fac8:	b353      	cbz	r3, 3fb20 <_fputs_r+0x78>
   3faca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
   3facc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   3fad0:	07d2      	lsls	r2, r2, #31
   3fad2:	d401      	bmi.n	3fad8 <_fputs_r+0x30>
   3fad4:	0598      	lsls	r0, r3, #22
   3fad6:	d51d      	bpl.n	3fb14 <_fputs_r+0x6c>
   3fad8:	0499      	lsls	r1, r3, #18
   3fada:	d406      	bmi.n	3faea <_fputs_r+0x42>
   3fadc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
   3fade:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
   3fae2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
   3fae6:	81a3      	strh	r3, [r4, #12]
   3fae8:	6662      	str	r2, [r4, #100]	@ 0x64
   3faea:	aa03      	add	r2, sp, #12
   3faec:	4628      	mov	r0, r5
   3faee:	4621      	mov	r1, r4
   3faf0:	f7e6 fed4 	bl	2689c <__sfvwrite_r>
   3faf4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
   3faf6:	07da      	lsls	r2, r3, #31
   3faf8:	4605      	mov	r5, r0
   3fafa:	d402      	bmi.n	3fb02 <_fputs_r+0x5a>
   3fafc:	89a3      	ldrh	r3, [r4, #12]
   3fafe:	059b      	lsls	r3, r3, #22
   3fb00:	d502      	bpl.n	3fb08 <_fputs_r+0x60>
   3fb02:	4628      	mov	r0, r5
   3fb04:	b007      	add	sp, #28
   3fb06:	bd30      	pop	{r4, r5, pc}
   3fb08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
   3fb0a:	f7e7 fb35 	bl	27178 <__retarget_lock_release_recursive>
   3fb0e:	4628      	mov	r0, r5
   3fb10:	b007      	add	sp, #28
   3fb12:	bd30      	pop	{r4, r5, pc}
   3fb14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
   3fb16:	f7e7 fb2d 	bl	27174 <__retarget_lock_acquire_recursive>
   3fb1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   3fb1e:	e7db      	b.n	3fad8 <_fputs_r+0x30>
   3fb20:	4628      	mov	r0, r5
   3fb22:	f7e6 fe59 	bl	267d8 <__sinit>
   3fb26:	e7d0      	b.n	3faca <_fputs_r+0x22>

0003fb28 <fputs>:
   3fb28:	b410      	push	{r4}
   3fb2a:	4c04      	ldr	r4, [pc, #16]	@ (3fb3c <fputs+0x14>)
   3fb2c:	4603      	mov	r3, r0
   3fb2e:	460a      	mov	r2, r1
   3fb30:	6820      	ldr	r0, [r4, #0]
   3fb32:	f85d 4b04 	ldr.w	r4, [sp], #4
   3fb36:	4619      	mov	r1, r3
   3fb38:	f7ff bfb6 	b.w	3faa8 <_fputs_r>
   3fb3c:	1000d540 	.word	0x1000d540

0003fb40 <_fwrite_r>:
   3fb40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3fb44:	b086      	sub	sp, #24
   3fb46:	fb02 f503 	mul.w	r5, r2, r3
   3fb4a:	4698      	mov	r8, r3
   3fb4c:	ab01      	add	r3, sp, #4
   3fb4e:	9303      	str	r3, [sp, #12]
   3fb50:	2301      	movs	r3, #1
   3fb52:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
   3fb54:	9101      	str	r1, [sp, #4]
   3fb56:	4617      	mov	r7, r2
   3fb58:	9502      	str	r5, [sp, #8]
   3fb5a:	9505      	str	r5, [sp, #20]
   3fb5c:	9304      	str	r3, [sp, #16]
   3fb5e:	4606      	mov	r6, r0
   3fb60:	b110      	cbz	r0, 3fb68 <_fwrite_r+0x28>
   3fb62:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   3fb64:	2b00      	cmp	r3, #0
   3fb66:	d038      	beq.n	3fbda <_fwrite_r+0x9a>
   3fb68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
   3fb6a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   3fb6e:	07d8      	lsls	r0, r3, #31
   3fb70:	d401      	bmi.n	3fb76 <_fwrite_r+0x36>
   3fb72:	0591      	lsls	r1, r2, #22
   3fb74:	d526      	bpl.n	3fbc4 <_fwrite_r+0x84>
   3fb76:	0493      	lsls	r3, r2, #18
   3fb78:	d406      	bmi.n	3fb88 <_fwrite_r+0x48>
   3fb7a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
   3fb7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
   3fb80:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
   3fb84:	81a2      	strh	r2, [r4, #12]
   3fb86:	6663      	str	r3, [r4, #100]	@ 0x64
   3fb88:	4630      	mov	r0, r6
   3fb8a:	aa03      	add	r2, sp, #12
   3fb8c:	4621      	mov	r1, r4
   3fb8e:	f7e6 fe85 	bl	2689c <__sfvwrite_r>
   3fb92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
   3fb94:	b178      	cbz	r0, 3fbb6 <_fwrite_r+0x76>
   3fb96:	07da      	lsls	r2, r3, #31
   3fb98:	d506      	bpl.n	3fba8 <_fwrite_r+0x68>
   3fb9a:	9b05      	ldr	r3, [sp, #20]
   3fb9c:	1ae8      	subs	r0, r5, r3
   3fb9e:	fbb0 f0f7 	udiv	r0, r0, r7
   3fba2:	b006      	add	sp, #24
   3fba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3fba8:	89a3      	ldrh	r3, [r4, #12]
   3fbaa:	059b      	lsls	r3, r3, #22
   3fbac:	d4f5      	bmi.n	3fb9a <_fwrite_r+0x5a>
   3fbae:	6da0      	ldr	r0, [r4, #88]	@ 0x58
   3fbb0:	f7e7 fae2 	bl	27178 <__retarget_lock_release_recursive>
   3fbb4:	e7f1      	b.n	3fb9a <_fwrite_r+0x5a>
   3fbb6:	07d8      	lsls	r0, r3, #31
   3fbb8:	d402      	bmi.n	3fbc0 <_fwrite_r+0x80>
   3fbba:	89a3      	ldrh	r3, [r4, #12]
   3fbbc:	0599      	lsls	r1, r3, #22
   3fbbe:	d507      	bpl.n	3fbd0 <_fwrite_r+0x90>
   3fbc0:	4640      	mov	r0, r8
   3fbc2:	e7ee      	b.n	3fba2 <_fwrite_r+0x62>
   3fbc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
   3fbc6:	f7e7 fad5 	bl	27174 <__retarget_lock_acquire_recursive>
   3fbca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   3fbce:	e7d2      	b.n	3fb76 <_fwrite_r+0x36>
   3fbd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
   3fbd2:	f7e7 fad1 	bl	27178 <__retarget_lock_release_recursive>
   3fbd6:	4640      	mov	r0, r8
   3fbd8:	e7e3      	b.n	3fba2 <_fwrite_r+0x62>
   3fbda:	f7e6 fdfd 	bl	267d8 <__sinit>
   3fbde:	e7c3      	b.n	3fb68 <_fwrite_r+0x28>

0003fbe0 <fwrite>:
   3fbe0:	b510      	push	{r4, lr}
   3fbe2:	4c06      	ldr	r4, [pc, #24]	@ (3fbfc <fwrite+0x1c>)
   3fbe4:	b082      	sub	sp, #8
   3fbe6:	4684      	mov	ip, r0
   3fbe8:	6820      	ldr	r0, [r4, #0]
   3fbea:	9300      	str	r3, [sp, #0]
   3fbec:	4613      	mov	r3, r2
   3fbee:	460a      	mov	r2, r1
   3fbf0:	4661      	mov	r1, ip
   3fbf2:	f7ff ffa5 	bl	3fb40 <_fwrite_r>
   3fbf6:	b002      	add	sp, #8
   3fbf8:	bd10      	pop	{r4, pc}
   3fbfa:	bf00      	nop
   3fbfc:	1000d540 	.word	0x1000d540

0003fc00 <_putc_r>:
   3fc00:	b570      	push	{r4, r5, r6, lr}
   3fc02:	460e      	mov	r6, r1
   3fc04:	4614      	mov	r4, r2
   3fc06:	4605      	mov	r5, r0
   3fc08:	b110      	cbz	r0, 3fc10 <_putc_r+0x10>
   3fc0a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   3fc0c:	2b00      	cmp	r3, #0
   3fc0e:	d02f      	beq.n	3fc70 <_putc_r+0x70>
   3fc10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
   3fc12:	07d8      	lsls	r0, r3, #31
   3fc14:	d402      	bmi.n	3fc1c <_putc_r+0x1c>
   3fc16:	89a3      	ldrh	r3, [r4, #12]
   3fc18:	0599      	lsls	r1, r3, #22
   3fc1a:	d520      	bpl.n	3fc5e <_putc_r+0x5e>
   3fc1c:	68a3      	ldr	r3, [r4, #8]
   3fc1e:	3b01      	subs	r3, #1
   3fc20:	2b00      	cmp	r3, #0
   3fc22:	60a3      	str	r3, [r4, #8]
   3fc24:	da19      	bge.n	3fc5a <_putc_r+0x5a>
   3fc26:	69a2      	ldr	r2, [r4, #24]
   3fc28:	4293      	cmp	r3, r2
   3fc2a:	db0f      	blt.n	3fc4c <_putc_r+0x4c>
   3fc2c:	b2f0      	uxtb	r0, r6
   3fc2e:	280a      	cmp	r0, #10
   3fc30:	d00c      	beq.n	3fc4c <_putc_r+0x4c>
   3fc32:	6823      	ldr	r3, [r4, #0]
   3fc34:	1c5a      	adds	r2, r3, #1
   3fc36:	6022      	str	r2, [r4, #0]
   3fc38:	4605      	mov	r5, r0
   3fc3a:	701e      	strb	r6, [r3, #0]
   3fc3c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
   3fc3e:	07da      	lsls	r2, r3, #31
   3fc40:	d402      	bmi.n	3fc48 <_putc_r+0x48>
   3fc42:	89a3      	ldrh	r3, [r4, #12]
   3fc44:	059b      	lsls	r3, r3, #22
   3fc46:	d50e      	bpl.n	3fc66 <_putc_r+0x66>
   3fc48:	4628      	mov	r0, r5
   3fc4a:	bd70      	pop	{r4, r5, r6, pc}
   3fc4c:	4628      	mov	r0, r5
   3fc4e:	4622      	mov	r2, r4
   3fc50:	4631      	mov	r1, r6
   3fc52:	f7e9 ffe1 	bl	29c18 <__swbuf_r>
   3fc56:	4605      	mov	r5, r0
   3fc58:	e7f0      	b.n	3fc3c <_putc_r+0x3c>
   3fc5a:	b2f0      	uxtb	r0, r6
   3fc5c:	e7e9      	b.n	3fc32 <_putc_r+0x32>
   3fc5e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
   3fc60:	f7e7 fa88 	bl	27174 <__retarget_lock_acquire_recursive>
   3fc64:	e7da      	b.n	3fc1c <_putc_r+0x1c>
   3fc66:	6da0      	ldr	r0, [r4, #88]	@ 0x58
   3fc68:	f7e7 fa86 	bl	27178 <__retarget_lock_release_recursive>
   3fc6c:	4628      	mov	r0, r5
   3fc6e:	bd70      	pop	{r4, r5, r6, pc}
   3fc70:	f7e6 fdb2 	bl	267d8 <__sinit>
   3fc74:	e7cc      	b.n	3fc10 <_putc_r+0x10>
   3fc76:	bf00      	nop

0003fc78 <selfrel_offset31>:
   3fc78:	6803      	ldr	r3, [r0, #0]
   3fc7a:	005a      	lsls	r2, r3, #1
   3fc7c:	bf4c      	ite	mi
   3fc7e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
   3fc82:	f023 4300 	bicpl.w	r3, r3, #2147483648	@ 0x80000000
   3fc86:	4418      	add	r0, r3
   3fc88:	4770      	bx	lr
   3fc8a:	bf00      	nop

0003fc8c <search_EIT_table>:
   3fc8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3fc90:	b359      	cbz	r1, 3fcea <search_EIT_table+0x5e>
   3fc92:	f101 38ff 	add.w	r8, r1, #4294967295	@ 0xffffffff
   3fc96:	4605      	mov	r5, r0
   3fc98:	4616      	mov	r6, r2
   3fc9a:	4647      	mov	r7, r8
   3fc9c:	f04f 0a00 	mov.w	sl, #0
   3fca0:	eb0a 0107 	add.w	r1, sl, r7
   3fca4:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   3fca8:	1049      	asrs	r1, r1, #1
   3fcaa:	eb05 09c1 	add.w	r9, r5, r1, lsl #3
   3fcae:	4648      	mov	r0, r9
   3fcb0:	f7ff ffe2 	bl	3fc78 <selfrel_offset31>
   3fcb4:	4588      	cmp	r8, r1
   3fcb6:	ea4f 04c1 	mov.w	r4, r1, lsl #3
   3fcba:	4603      	mov	r3, r0
   3fcbc:	d010      	beq.n	3fce0 <search_EIT_table+0x54>
   3fcbe:	f104 0008 	add.w	r0, r4, #8
   3fcc2:	42b3      	cmp	r3, r6
   3fcc4:	4428      	add	r0, r5
   3fcc6:	d807      	bhi.n	3fcd8 <search_EIT_table+0x4c>
   3fcc8:	f7ff ffd6 	bl	3fc78 <selfrel_offset31>
   3fccc:	3801      	subs	r0, #1
   3fcce:	42b0      	cmp	r0, r6
   3fcd0:	d208      	bcs.n	3fce4 <search_EIT_table+0x58>
   3fcd2:	f101 0a01 	add.w	sl, r1, #1
   3fcd6:	e7e3      	b.n	3fca0 <search_EIT_table+0x14>
   3fcd8:	458a      	cmp	sl, r1
   3fcda:	d006      	beq.n	3fcea <search_EIT_table+0x5e>
   3fcdc:	1e4f      	subs	r7, r1, #1
   3fcde:	e7df      	b.n	3fca0 <search_EIT_table+0x14>
   3fce0:	42b0      	cmp	r0, r6
   3fce2:	d8f9      	bhi.n	3fcd8 <search_EIT_table+0x4c>
   3fce4:	4648      	mov	r0, r9
   3fce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3fcea:	f04f 0900 	mov.w	r9, #0
   3fcee:	4648      	mov	r0, r9
   3fcf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0003fcf4 <__gnu_unwind_get_pr_addr>:
   3fcf4:	2801      	cmp	r0, #1
   3fcf6:	d009      	beq.n	3fd0c <__gnu_unwind_get_pr_addr+0x18>
   3fcf8:	2802      	cmp	r0, #2
   3fcfa:	d005      	beq.n	3fd08 <__gnu_unwind_get_pr_addr+0x14>
   3fcfc:	4b04      	ldr	r3, [pc, #16]	@ (3fd10 <__gnu_unwind_get_pr_addr+0x1c>)
   3fcfe:	2800      	cmp	r0, #0
   3fd00:	bf0c      	ite	eq
   3fd02:	4618      	moveq	r0, r3
   3fd04:	2000      	movne	r0, #0
   3fd06:	4770      	bx	lr
   3fd08:	4802      	ldr	r0, [pc, #8]	@ (3fd14 <__gnu_unwind_get_pr_addr+0x20>)
   3fd0a:	4770      	bx	lr
   3fd0c:	4802      	ldr	r0, [pc, #8]	@ (3fd18 <__gnu_unwind_get_pr_addr+0x24>)
   3fd0e:	4770      	bx	lr
   3fd10:	000403d5 	.word	0x000403d5
   3fd14:	000403e5 	.word	0x000403e5
   3fd18:	000403dd 	.word	0x000403dd

0003fd1c <get_eit_entry>:
   3fd1c:	b530      	push	{r4, r5, lr}
   3fd1e:	4b22      	ldr	r3, [pc, #136]	@ (3fda8 <get_eit_entry+0x8c>)
   3fd20:	b083      	sub	sp, #12
   3fd22:	4604      	mov	r4, r0
   3fd24:	1e8d      	subs	r5, r1, #2
   3fd26:	b343      	cbz	r3, 3fd7a <get_eit_entry+0x5e>
   3fd28:	a901      	add	r1, sp, #4
   3fd2a:	4628      	mov	r0, r5
   3fd2c:	f3af 8000 	nop.w
   3fd30:	b1f0      	cbz	r0, 3fd70 <get_eit_entry+0x54>
   3fd32:	9901      	ldr	r1, [sp, #4]
   3fd34:	462a      	mov	r2, r5
   3fd36:	f7ff ffa9 	bl	3fc8c <search_EIT_table>
   3fd3a:	4601      	mov	r1, r0
   3fd3c:	b1c0      	cbz	r0, 3fd70 <get_eit_entry+0x54>
   3fd3e:	f7ff ff9b 	bl	3fc78 <selfrel_offset31>
   3fd42:	684b      	ldr	r3, [r1, #4]
   3fd44:	64a0      	str	r0, [r4, #72]	@ 0x48
   3fd46:	2b01      	cmp	r3, #1
   3fd48:	d02b      	beq.n	3fda2 <get_eit_entry+0x86>
   3fd4a:	2b00      	cmp	r3, #0
   3fd4c:	f101 0004 	add.w	r0, r1, #4
   3fd50:	db25      	blt.n	3fd9e <get_eit_entry+0x82>
   3fd52:	f7ff ff91 	bl	3fc78 <selfrel_offset31>
   3fd56:	2300      	movs	r3, #0
   3fd58:	6523      	str	r3, [r4, #80]	@ 0x50
   3fd5a:	6803      	ldr	r3, [r0, #0]
   3fd5c:	64e0      	str	r0, [r4, #76]	@ 0x4c
   3fd5e:	2b00      	cmp	r3, #0
   3fd60:	db12      	blt.n	3fd88 <get_eit_entry+0x6c>
   3fd62:	f7ff ff89 	bl	3fc78 <selfrel_offset31>
   3fd66:	4603      	mov	r3, r0
   3fd68:	2000      	movs	r0, #0
   3fd6a:	6123      	str	r3, [r4, #16]
   3fd6c:	b003      	add	sp, #12
   3fd6e:	bd30      	pop	{r4, r5, pc}
   3fd70:	2300      	movs	r3, #0
   3fd72:	2009      	movs	r0, #9
   3fd74:	6123      	str	r3, [r4, #16]
   3fd76:	b003      	add	sp, #12
   3fd78:	bd30      	pop	{r4, r5, pc}
   3fd7a:	4b0c      	ldr	r3, [pc, #48]	@ (3fdac <get_eit_entry+0x90>)
   3fd7c:	490c      	ldr	r1, [pc, #48]	@ (3fdb0 <get_eit_entry+0x94>)
   3fd7e:	1ac9      	subs	r1, r1, r3
   3fd80:	10c9      	asrs	r1, r1, #3
   3fd82:	4618      	mov	r0, r3
   3fd84:	9101      	str	r1, [sp, #4]
   3fd86:	e7d5      	b.n	3fd34 <get_eit_entry+0x18>
   3fd88:	f3c3 6003 	ubfx	r0, r3, #24, #4
   3fd8c:	f7ff ffb2 	bl	3fcf4 <__gnu_unwind_get_pr_addr>
   3fd90:	1e03      	subs	r3, r0, #0
   3fd92:	bf0c      	ite	eq
   3fd94:	2009      	moveq	r0, #9
   3fd96:	2000      	movne	r0, #0
   3fd98:	6123      	str	r3, [r4, #16]
   3fd9a:	b003      	add	sp, #12
   3fd9c:	bd30      	pop	{r4, r5, pc}
   3fd9e:	2301      	movs	r3, #1
   3fda0:	e7da      	b.n	3fd58 <get_eit_entry+0x3c>
   3fda2:	2300      	movs	r3, #0
   3fda4:	2005      	movs	r0, #5
   3fda6:	e7e0      	b.n	3fd6a <get_eit_entry+0x4e>
   3fda8:	00000000 	.word	0x00000000
   3fdac:	0004ced4 	.word	0x0004ced4
   3fdb0:	0004d0b4 	.word	0x0004d0b4

0003fdb4 <restore_non_core_regs>:
   3fdb4:	6803      	ldr	r3, [r0, #0]
   3fdb6:	07da      	lsls	r2, r3, #31
   3fdb8:	b510      	push	{r4, lr}
   3fdba:	4604      	mov	r4, r0
   3fdbc:	d406      	bmi.n	3fdcc <restore_non_core_regs+0x18>
   3fdbe:	079b      	lsls	r3, r3, #30
   3fdc0:	f100 0050 	add.w	r0, r0, #80	@ 0x50
   3fdc4:	d509      	bpl.n	3fdda <restore_non_core_regs+0x26>
   3fdc6:	f7d9 fa69 	bl	1929c <__gnu_Unwind_Restore_VFP_D>
   3fdca:	6823      	ldr	r3, [r4, #0]
   3fdcc:	0759      	lsls	r1, r3, #29
   3fdce:	d509      	bpl.n	3fde4 <restore_non_core_regs+0x30>
   3fdd0:	071a      	lsls	r2, r3, #28
   3fdd2:	d50e      	bpl.n	3fdf2 <restore_non_core_regs+0x3e>
   3fdd4:	06db      	lsls	r3, r3, #27
   3fdd6:	d513      	bpl.n	3fe00 <restore_non_core_regs+0x4c>
   3fdd8:	bd10      	pop	{r4, pc}
   3fdda:	f7d9 fa57 	bl	1928c <__gnu_Unwind_Restore_VFP>
   3fdde:	6823      	ldr	r3, [r4, #0]
   3fde0:	0759      	lsls	r1, r3, #29
   3fde2:	d4f5      	bmi.n	3fdd0 <restore_non_core_regs+0x1c>
   3fde4:	f104 00d8 	add.w	r0, r4, #216	@ 0xd8
   3fde8:	f7d9 fa60 	bl	192ac <__gnu_Unwind_Restore_VFP_D_16_to_31>
   3fdec:	6823      	ldr	r3, [r4, #0]
   3fdee:	071a      	lsls	r2, r3, #28
   3fdf0:	d4f0      	bmi.n	3fdd4 <restore_non_core_regs+0x20>
   3fdf2:	f504 70ac 	add.w	r0, r4, #344	@ 0x158
   3fdf6:	f7d9 fa61 	bl	192bc <__gnu_Unwind_Restore_WMMXD>
   3fdfa:	6823      	ldr	r3, [r4, #0]
   3fdfc:	06db      	lsls	r3, r3, #27
   3fdfe:	d4eb      	bmi.n	3fdd8 <restore_non_core_regs+0x24>
   3fe00:	f504 70ec 	add.w	r0, r4, #472	@ 0x1d8
   3fe04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3fe08:	f7d9 ba9c 	b.w	19344 <__gnu_Unwind_Restore_WMMXC>

0003fe0c <_Unwind_decode_typeinfo_ptr.constprop.0>:
   3fe0c:	4603      	mov	r3, r0
   3fe0e:	6800      	ldr	r0, [r0, #0]
   3fe10:	b100      	cbz	r0, 3fe14 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
   3fe12:	4418      	add	r0, r3
   3fe14:	4770      	bx	lr
   3fe16:	bf00      	nop

0003fe18 <_Unwind_DebugHook>:
   3fe18:	4770      	bx	lr
   3fe1a:	bf00      	nop

0003fe1c <unwind_phase2>:
   3fe1c:	b570      	push	{r4, r5, r6, lr}
   3fe1e:	4604      	mov	r4, r0
   3fe20:	460e      	mov	r6, r1
   3fe22:	6c31      	ldr	r1, [r6, #64]	@ 0x40
   3fe24:	4620      	mov	r0, r4
   3fe26:	f7ff ff79 	bl	3fd1c <get_eit_entry>
   3fe2a:	4605      	mov	r5, r0
   3fe2c:	b988      	cbnz	r0, 3fe52 <unwind_phase2+0x36>
   3fe2e:	6c32      	ldr	r2, [r6, #64]	@ 0x40
   3fe30:	6162      	str	r2, [r4, #20]
   3fe32:	6923      	ldr	r3, [r4, #16]
   3fe34:	4632      	mov	r2, r6
   3fe36:	4621      	mov	r1, r4
   3fe38:	2001      	movs	r0, #1
   3fe3a:	4798      	blx	r3
   3fe3c:	2808      	cmp	r0, #8
   3fe3e:	d0f0      	beq.n	3fe22 <unwind_phase2+0x6>
   3fe40:	2807      	cmp	r0, #7
   3fe42:	d106      	bne.n	3fe52 <unwind_phase2+0x36>
   3fe44:	4628      	mov	r0, r5
   3fe46:	6c31      	ldr	r1, [r6, #64]	@ 0x40
   3fe48:	f7ff ffe6 	bl	3fe18 <_Unwind_DebugHook>
   3fe4c:	1d30      	adds	r0, r6, #4
   3fe4e:	f7d9 fa11 	bl	19274 <__restore_core_regs>
   3fe52:	f7e5 fa95 	bl	25380 <abort>
   3fe56:	bf00      	nop

0003fe58 <unwind_phase2_forced>:
   3fe58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3fe5c:	f101 0c04 	add.w	ip, r1, #4
   3fe60:	68c7      	ldr	r7, [r0, #12]
   3fe62:	f8d0 8018 	ldr.w	r8, [r0, #24]
   3fe66:	4606      	mov	r6, r0
   3fe68:	4691      	mov	r9, r2
   3fe6a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   3fe6e:	f5ad 7d76 	sub.w	sp, sp, #984	@ 0x3d8
   3fe72:	ac03      	add	r4, sp, #12
   3fe74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   3fe76:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   3fe7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   3fe7c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   3fe80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   3fe82:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   3fe86:	ad02      	add	r5, sp, #8
   3fe88:	f04f 0e00 	mov.w	lr, #0
   3fe8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   3fe90:	f8c5 e000 	str.w	lr, [r5]
   3fe94:	e021      	b.n	3feda <unwind_phase2_forced+0x82>
   3fe96:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
   3fe98:	6173      	str	r3, [r6, #20]
   3fe9a:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
   3fe9e:	4629      	mov	r1, r5
   3fea0:	a87c      	add	r0, sp, #496	@ 0x1f0
   3fea2:	f7d8 fb6d 	bl	18580 <memcpy>
   3fea6:	6933      	ldr	r3, [r6, #16]
   3fea8:	aa7c      	add	r2, sp, #496	@ 0x1f0
   3feaa:	4631      	mov	r1, r6
   3feac:	4650      	mov	r0, sl
   3feae:	4798      	blx	r3
   3feb0:	9b8a      	ldr	r3, [sp, #552]	@ 0x228
   3feb2:	64ab      	str	r3, [r5, #72]	@ 0x48
   3feb4:	4649      	mov	r1, r9
   3feb6:	e9cd 5800 	strd	r5, r8, [sp]
   3feba:	4682      	mov	sl, r0
   3febc:	4633      	mov	r3, r6
   3febe:	2001      	movs	r0, #1
   3fec0:	4632      	mov	r2, r6
   3fec2:	47b8      	blx	r7
   3fec4:	4681      	mov	r9, r0
   3fec6:	bb30      	cbnz	r0, 3ff16 <unwind_phase2_forced+0xbe>
   3fec8:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
   3fecc:	a97c      	add	r1, sp, #496	@ 0x1f0
   3fece:	4628      	mov	r0, r5
   3fed0:	f7d8 fb56 	bl	18580 <memcpy>
   3fed4:	f1ba 0f08 	cmp.w	sl, #8
   3fed8:	d11a      	bne.n	3ff10 <unwind_phase2_forced+0xb8>
   3feda:	6c29      	ldr	r1, [r5, #64]	@ 0x40
   3fedc:	4630      	mov	r0, r6
   3fede:	f7ff ff1d 	bl	3fd1c <get_eit_entry>
   3fee2:	f109 0909 	add.w	r9, r9, #9
   3fee6:	4604      	mov	r4, r0
   3fee8:	fa5f fa89 	uxtb.w	sl, r9
   3feec:	2800      	cmp	r0, #0
   3feee:	d0d2      	beq.n	3fe96 <unwind_phase2_forced+0x3e>
   3fef0:	6bab      	ldr	r3, [r5, #56]	@ 0x38
   3fef2:	64ab      	str	r3, [r5, #72]	@ 0x48
   3fef4:	4632      	mov	r2, r6
   3fef6:	e9cd 5800 	strd	r5, r8, [sp]
   3fefa:	4633      	mov	r3, r6
   3fefc:	f04a 0110 	orr.w	r1, sl, #16
   3ff00:	2001      	movs	r0, #1
   3ff02:	47b8      	blx	r7
   3ff04:	b938      	cbnz	r0, 3ff16 <unwind_phase2_forced+0xbe>
   3ff06:	4620      	mov	r0, r4
   3ff08:	f50d 7d76 	add.w	sp, sp, #984	@ 0x3d8
   3ff0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3ff10:	f1ba 0f07 	cmp.w	sl, #7
   3ff14:	d005      	beq.n	3ff22 <unwind_phase2_forced+0xca>
   3ff16:	2409      	movs	r4, #9
   3ff18:	4620      	mov	r0, r4
   3ff1a:	f50d 7d76 	add.w	sp, sp, #984	@ 0x3d8
   3ff1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3ff22:	4648      	mov	r0, r9
   3ff24:	6c29      	ldr	r1, [r5, #64]	@ 0x40
   3ff26:	f7ff ff77 	bl	3fe18 <_Unwind_DebugHook>
   3ff2a:	a803      	add	r0, sp, #12
   3ff2c:	f7d9 f9a2 	bl	19274 <__restore_core_regs>

0003ff30 <__gnu_Unwind_RaiseException>:
   3ff30:	b5f0      	push	{r4, r5, r6, r7, lr}
   3ff32:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
   3ff34:	640b      	str	r3, [r1, #64]	@ 0x40
   3ff36:	f101 0c04 	add.w	ip, r1, #4
   3ff3a:	460e      	mov	r6, r1
   3ff3c:	4605      	mov	r5, r0
   3ff3e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   3ff42:	b0fb      	sub	sp, #492	@ 0x1ec
   3ff44:	ac01      	add	r4, sp, #4
   3ff46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   3ff48:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   3ff4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   3ff4e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   3ff52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   3ff54:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   3ff58:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
   3ff5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   3ff60:	9700      	str	r7, [sp, #0]
   3ff62:	e006      	b.n	3ff72 <__gnu_Unwind_RaiseException+0x42>
   3ff64:	692b      	ldr	r3, [r5, #16]
   3ff66:	466a      	mov	r2, sp
   3ff68:	4629      	mov	r1, r5
   3ff6a:	4798      	blx	r3
   3ff6c:	2808      	cmp	r0, #8
   3ff6e:	4604      	mov	r4, r0
   3ff70:	d108      	bne.n	3ff84 <__gnu_Unwind_RaiseException+0x54>
   3ff72:	9910      	ldr	r1, [sp, #64]	@ 0x40
   3ff74:	4628      	mov	r0, r5
   3ff76:	f7ff fed1 	bl	3fd1c <get_eit_entry>
   3ff7a:	2800      	cmp	r0, #0
   3ff7c:	d0f2      	beq.n	3ff64 <__gnu_Unwind_RaiseException+0x34>
   3ff7e:	2009      	movs	r0, #9
   3ff80:	b07b      	add	sp, #492	@ 0x1ec
   3ff82:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3ff84:	4668      	mov	r0, sp
   3ff86:	f7ff ff15 	bl	3fdb4 <restore_non_core_regs>
   3ff8a:	2c06      	cmp	r4, #6
   3ff8c:	d1f7      	bne.n	3ff7e <__gnu_Unwind_RaiseException+0x4e>
   3ff8e:	4631      	mov	r1, r6
   3ff90:	4628      	mov	r0, r5
   3ff92:	f7ff ff43 	bl	3fe1c <unwind_phase2>
   3ff96:	bf00      	nop

0003ff98 <__gnu_Unwind_ForcedUnwind>:
   3ff98:	60c1      	str	r1, [r0, #12]
   3ff9a:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
   3ff9c:	6182      	str	r2, [r0, #24]
   3ff9e:	6419      	str	r1, [r3, #64]	@ 0x40
   3ffa0:	2200      	movs	r2, #0
   3ffa2:	4619      	mov	r1, r3
   3ffa4:	f7ff bf58 	b.w	3fe58 <unwind_phase2_forced>

0003ffa8 <__gnu_Unwind_Resume>:
   3ffa8:	b570      	push	{r4, r5, r6, lr}
   3ffaa:	68c6      	ldr	r6, [r0, #12]
   3ffac:	6943      	ldr	r3, [r0, #20]
   3ffae:	640b      	str	r3, [r1, #64]	@ 0x40
   3ffb0:	b9ae      	cbnz	r6, 3ffde <__gnu_Unwind_Resume+0x36>
   3ffb2:	6903      	ldr	r3, [r0, #16]
   3ffb4:	460a      	mov	r2, r1
   3ffb6:	4604      	mov	r4, r0
   3ffb8:	460d      	mov	r5, r1
   3ffba:	4601      	mov	r1, r0
   3ffbc:	2002      	movs	r0, #2
   3ffbe:	4798      	blx	r3
   3ffc0:	2807      	cmp	r0, #7
   3ffc2:	d005      	beq.n	3ffd0 <__gnu_Unwind_Resume+0x28>
   3ffc4:	2808      	cmp	r0, #8
   3ffc6:	d10f      	bne.n	3ffe8 <__gnu_Unwind_Resume+0x40>
   3ffc8:	4629      	mov	r1, r5
   3ffca:	4620      	mov	r0, r4
   3ffcc:	f7ff ff26 	bl	3fe1c <unwind_phase2>
   3ffd0:	4630      	mov	r0, r6
   3ffd2:	6c29      	ldr	r1, [r5, #64]	@ 0x40
   3ffd4:	f7ff ff20 	bl	3fe18 <_Unwind_DebugHook>
   3ffd8:	1d28      	adds	r0, r5, #4
   3ffda:	f7d9 f94b 	bl	19274 <__restore_core_regs>
   3ffde:	2201      	movs	r2, #1
   3ffe0:	f7ff ff3a 	bl	3fe58 <unwind_phase2_forced>
   3ffe4:	f7e5 f9cc 	bl	25380 <abort>
   3ffe8:	f7e5 f9ca 	bl	25380 <abort>

0003ffec <__gnu_Unwind_Resume_or_Rethrow>:
   3ffec:	68c2      	ldr	r2, [r0, #12]
   3ffee:	b122      	cbz	r2, 3fffa <__gnu_Unwind_Resume_or_Rethrow+0xe>
   3fff0:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
   3fff2:	640a      	str	r2, [r1, #64]	@ 0x40
   3fff4:	2200      	movs	r2, #0
   3fff6:	f7ff bf2f 	b.w	3fe58 <unwind_phase2_forced>
   3fffa:	f7ff bf99 	b.w	3ff30 <__gnu_Unwind_RaiseException>
   3fffe:	bf00      	nop

00040000 <_Unwind_Complete>:
   40000:	4770      	bx	lr
   40002:	bf00      	nop

00040004 <_Unwind_DeleteException>:
   40004:	6883      	ldr	r3, [r0, #8]
   40006:	4601      	mov	r1, r0
   40008:	b10b      	cbz	r3, 4000e <_Unwind_DeleteException+0xa>
   4000a:	2001      	movs	r0, #1
   4000c:	4718      	bx	r3
   4000e:	4770      	bx	lr

00040010 <_Unwind_VRS_Get>:
   40010:	2905      	cmp	r1, #5
   40012:	d815      	bhi.n	40040 <_Unwind_VRS_Get+0x30>
   40014:	e8df f001 	tbb	[pc, r1]
   40018:	0314030a 	.word	0x0314030a
   4001c:	0503      	.short	0x0503
   4001e:	2001      	movs	r0, #1
   40020:	4770      	bx	lr
   40022:	9a00      	ldr	r2, [sp, #0]
   40024:	6c43      	ldr	r3, [r0, #68]	@ 0x44
   40026:	6013      	str	r3, [r2, #0]
   40028:	2000      	movs	r0, #0
   4002a:	4770      	bx	lr
   4002c:	b943      	cbnz	r3, 40040 <_Unwind_VRS_Get+0x30>
   4002e:	2a0f      	cmp	r2, #15
   40030:	d806      	bhi.n	40040 <_Unwind_VRS_Get+0x30>
   40032:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   40036:	2000      	movs	r0, #0
   40038:	6853      	ldr	r3, [r2, #4]
   4003a:	9a00      	ldr	r2, [sp, #0]
   4003c:	6013      	str	r3, [r2, #0]
   4003e:	4770      	bx	lr
   40040:	2002      	movs	r0, #2
   40042:	4770      	bx	lr

00040044 <_Unwind_GetGR>:
   40044:	b500      	push	{lr}
   40046:	b085      	sub	sp, #20
   40048:	460a      	mov	r2, r1
   4004a:	2300      	movs	r3, #0
   4004c:	a903      	add	r1, sp, #12
   4004e:	9100      	str	r1, [sp, #0]
   40050:	4619      	mov	r1, r3
   40052:	f7ff ffdd 	bl	40010 <_Unwind_VRS_Get>
   40056:	9803      	ldr	r0, [sp, #12]
   40058:	b005      	add	sp, #20
   4005a:	f85d fb04 	ldr.w	pc, [sp], #4
   4005e:	bf00      	nop

00040060 <_Unwind_VRS_Set>:
   40060:	2905      	cmp	r1, #5
   40062:	d815      	bhi.n	40090 <_Unwind_VRS_Set+0x30>
   40064:	e8df f001 	tbb	[pc, r1]
   40068:	0314030a 	.word	0x0314030a
   4006c:	0503      	.short	0x0503
   4006e:	2001      	movs	r0, #1
   40070:	4770      	bx	lr
   40072:	9b00      	ldr	r3, [sp, #0]
   40074:	681b      	ldr	r3, [r3, #0]
   40076:	6443      	str	r3, [r0, #68]	@ 0x44
   40078:	2000      	movs	r0, #0
   4007a:	4770      	bx	lr
   4007c:	b943      	cbnz	r3, 40090 <_Unwind_VRS_Set+0x30>
   4007e:	2a0f      	cmp	r2, #15
   40080:	d806      	bhi.n	40090 <_Unwind_VRS_Set+0x30>
   40082:	9b00      	ldr	r3, [sp, #0]
   40084:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   40088:	681b      	ldr	r3, [r3, #0]
   4008a:	6053      	str	r3, [r2, #4]
   4008c:	2000      	movs	r0, #0
   4008e:	4770      	bx	lr
   40090:	2002      	movs	r0, #2
   40092:	4770      	bx	lr

00040094 <_Unwind_SetGR>:
   40094:	b510      	push	{r4, lr}
   40096:	b084      	sub	sp, #16
   40098:	2300      	movs	r3, #0
   4009a:	ac03      	add	r4, sp, #12
   4009c:	9203      	str	r2, [sp, #12]
   4009e:	9400      	str	r4, [sp, #0]
   400a0:	460a      	mov	r2, r1
   400a2:	4619      	mov	r1, r3
   400a4:	f7ff ffdc 	bl	40060 <_Unwind_VRS_Set>
   400a8:	b004      	add	sp, #16
   400aa:	bd10      	pop	{r4, pc}

000400ac <__gnu_Unwind_Backtrace>:
   400ac:	b570      	push	{r4, r5, r6, lr}
   400ae:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
   400b0:	6413      	str	r3, [r2, #64]	@ 0x40
   400b2:	f102 0c04 	add.w	ip, r2, #4
   400b6:	4605      	mov	r5, r0
   400b8:	460c      	mov	r4, r1
   400ba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   400be:	f5ad 7d10 	sub.w	sp, sp, #576	@ 0x240
   400c2:	f10d 0e5c 	add.w	lr, sp, #92	@ 0x5c
   400c6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   400ca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   400ce:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   400d2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   400d6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   400da:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   400de:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
   400e2:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
   400e6:	9616      	str	r6, [sp, #88]	@ 0x58
   400e8:	e010      	b.n	4010c <__gnu_Unwind_Backtrace+0x60>
   400ea:	f7ff ffd3 	bl	40094 <_Unwind_SetGR>
   400ee:	4621      	mov	r1, r4
   400f0:	a816      	add	r0, sp, #88	@ 0x58
   400f2:	47a8      	blx	r5
   400f4:	4603      	mov	r3, r0
   400f6:	aa16      	add	r2, sp, #88	@ 0x58
   400f8:	2008      	movs	r0, #8
   400fa:	4669      	mov	r1, sp
   400fc:	b983      	cbnz	r3, 40120 <__gnu_Unwind_Backtrace+0x74>
   400fe:	9b04      	ldr	r3, [sp, #16]
   40100:	4798      	blx	r3
   40102:	2805      	cmp	r0, #5
   40104:	4606      	mov	r6, r0
   40106:	d00c      	beq.n	40122 <__gnu_Unwind_Backtrace+0x76>
   40108:	2809      	cmp	r0, #9
   4010a:	d009      	beq.n	40120 <__gnu_Unwind_Backtrace+0x74>
   4010c:	9926      	ldr	r1, [sp, #152]	@ 0x98
   4010e:	4668      	mov	r0, sp
   40110:	f7ff fe04 	bl	3fd1c <get_eit_entry>
   40114:	4603      	mov	r3, r0
   40116:	210c      	movs	r1, #12
   40118:	466a      	mov	r2, sp
   4011a:	a816      	add	r0, sp, #88	@ 0x58
   4011c:	2b00      	cmp	r3, #0
   4011e:	d0e4      	beq.n	400ea <__gnu_Unwind_Backtrace+0x3e>
   40120:	2609      	movs	r6, #9
   40122:	a816      	add	r0, sp, #88	@ 0x58
   40124:	f7ff fe46 	bl	3fdb4 <restore_non_core_regs>
   40128:	4630      	mov	r0, r6
   4012a:	f50d 7d10 	add.w	sp, sp, #576	@ 0x240
   4012e:	bd70      	pop	{r4, r5, r6, pc}

00040130 <__gnu_unwind_pr_common>:
   40130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   40134:	4616      	mov	r6, r2
   40136:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
   40138:	b089      	sub	sp, #36	@ 0x24
   4013a:	460d      	mov	r5, r1
   4013c:	f852 1b04 	ldr.w	r1, [r2], #4
   40140:	9206      	str	r2, [sp, #24]
   40142:	f000 0c03 	and.w	ip, r0, #3
   40146:	2b00      	cmp	r3, #0
   40148:	d079      	beq.n	4023e <__gnu_unwind_pr_common+0x10e>
   4014a:	0c0c      	lsrs	r4, r1, #16
   4014c:	f88d 401d 	strb.w	r4, [sp, #29]
   40150:	0409      	lsls	r1, r1, #16
   40152:	b2e4      	uxtb	r4, r4
   40154:	9105      	str	r1, [sp, #20]
   40156:	eb02 0284 	add.w	r2, r2, r4, lsl #2
   4015a:	2102      	movs	r1, #2
   4015c:	f88d 101c 	strb.w	r1, [sp, #28]
   40160:	6d29      	ldr	r1, [r5, #80]	@ 0x50
   40162:	f1bc 0f02 	cmp.w	ip, #2
   40166:	bf08      	it	eq
   40168:	6baa      	ldreq	r2, [r5, #56]	@ 0x38
   4016a:	f011 0801 	ands.w	r8, r1, #1
   4016e:	d009      	beq.n	40184 <__gnu_unwind_pr_common+0x54>
   40170:	a905      	add	r1, sp, #20
   40172:	4630      	mov	r0, r6
   40174:	f000 fade 	bl	40734 <__gnu_unwind_execute>
   40178:	2800      	cmp	r0, #0
   4017a:	d156      	bne.n	4022a <__gnu_unwind_pr_common+0xfa>
   4017c:	2008      	movs	r0, #8
   4017e:	b009      	add	sp, #36	@ 0x24
   40180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   40184:	6817      	ldr	r7, [r2, #0]
   40186:	2f00      	cmp	r7, #0
   40188:	d0f2      	beq.n	40170 <__gnu_unwind_pr_common+0x40>
   4018a:	f000 0108 	and.w	r1, r0, #8
   4018e:	e9cd 1801 	strd	r1, r8, [sp, #4]
   40192:	46e3      	mov	fp, ip
   40194:	469a      	mov	sl, r3
   40196:	f1ba 0f02 	cmp.w	sl, #2
   4019a:	d04c      	beq.n	40236 <__gnu_unwind_pr_common+0x106>
   4019c:	8817      	ldrh	r7, [r2, #0]
   4019e:	8854      	ldrh	r4, [r2, #2]
   401a0:	f102 0904 	add.w	r9, r2, #4
   401a4:	6caa      	ldr	r2, [r5, #72]	@ 0x48
   401a6:	f024 0301 	bic.w	r3, r4, #1
   401aa:	210f      	movs	r1, #15
   401ac:	4630      	mov	r0, r6
   401ae:	eb03 0802 	add.w	r8, r3, r2
   401b2:	f7ff ff47 	bl	40044 <_Unwind_GetGR>
   401b6:	4580      	cmp	r8, r0
   401b8:	d83b      	bhi.n	40232 <__gnu_unwind_pr_common+0x102>
   401ba:	f027 0201 	bic.w	r2, r7, #1
   401be:	eb02 0308 	add.w	r3, r2, r8
   401c2:	4283      	cmp	r3, r0
   401c4:	bf94      	ite	ls
   401c6:	2300      	movls	r3, #0
   401c8:	2301      	movhi	r3, #1
   401ca:	0064      	lsls	r4, r4, #1
   401cc:	f004 0402 	and.w	r4, r4, #2
   401d0:	f007 0701 	and.w	r7, r7, #1
   401d4:	4327      	orrs	r7, r4
   401d6:	2f01      	cmp	r7, #1
   401d8:	d04e      	beq.n	40278 <__gnu_unwind_pr_common+0x148>
   401da:	2f02      	cmp	r7, #2
   401dc:	d035      	beq.n	4024a <__gnu_unwind_pr_common+0x11a>
   401de:	bb27      	cbnz	r7, 4022a <__gnu_unwind_pr_common+0xfa>
   401e0:	f1bb 0f00 	cmp.w	fp, #0
   401e4:	d002      	beq.n	401ec <__gnu_unwind_pr_common+0xbc>
   401e6:	2b00      	cmp	r3, #0
   401e8:	f040 80d3 	bne.w	40392 <__gnu_unwind_pr_common+0x262>
   401ec:	f109 0204 	add.w	r2, r9, #4
   401f0:	6817      	ldr	r7, [r2, #0]
   401f2:	2f00      	cmp	r7, #0
   401f4:	d1cf      	bne.n	40196 <__gnu_unwind_pr_common+0x66>
   401f6:	a905      	add	r1, sp, #20
   401f8:	4630      	mov	r0, r6
   401fa:	f8dd 8008 	ldr.w	r8, [sp, #8]
   401fe:	f000 fa99 	bl	40734 <__gnu_unwind_execute>
   40202:	b990      	cbnz	r0, 4022a <__gnu_unwind_pr_common+0xfa>
   40204:	f1b8 0f00 	cmp.w	r8, #0
   40208:	d0b8      	beq.n	4017c <__gnu_unwind_pr_common+0x4c>
   4020a:	210f      	movs	r1, #15
   4020c:	4630      	mov	r0, r6
   4020e:	f7ff ff19 	bl	40044 <_Unwind_GetGR>
   40212:	210e      	movs	r1, #14
   40214:	4602      	mov	r2, r0
   40216:	4630      	mov	r0, r6
   40218:	f7ff ff3c 	bl	40094 <_Unwind_SetGR>
   4021c:	4a6c      	ldr	r2, [pc, #432]	@ (403d0 <__gnu_unwind_pr_common+0x2a0>)
   4021e:	210f      	movs	r1, #15
   40220:	4630      	mov	r0, r6
   40222:	f7ff ff37 	bl	40094 <_Unwind_SetGR>
   40226:	2007      	movs	r0, #7
   40228:	e000      	b.n	4022c <__gnu_unwind_pr_common+0xfc>
   4022a:	2009      	movs	r0, #9
   4022c:	b009      	add	sp, #36	@ 0x24
   4022e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   40232:	2300      	movs	r3, #0
   40234:	e7c9      	b.n	401ca <__gnu_unwind_pr_common+0x9a>
   40236:	6854      	ldr	r4, [r2, #4]
   40238:	f102 0908 	add.w	r9, r2, #8
   4023c:	e7b2      	b.n	401a4 <__gnu_unwind_pr_common+0x74>
   4023e:	0209      	lsls	r1, r1, #8
   40240:	9105      	str	r1, [sp, #20]
   40242:	f88d 301d 	strb.w	r3, [sp, #29]
   40246:	2103      	movs	r1, #3
   40248:	e788      	b.n	4015c <__gnu_unwind_pr_common+0x2c>
   4024a:	f8d9 4000 	ldr.w	r4, [r9]
   4024e:	f024 4800 	bic.w	r8, r4, #2147483648	@ 0x80000000
   40252:	f1bb 0f00 	cmp.w	fp, #0
   40256:	d147      	bne.n	402e8 <__gnu_unwind_pr_common+0x1b8>
   40258:	b12b      	cbz	r3, 40266 <__gnu_unwind_pr_common+0x136>
   4025a:	9b01      	ldr	r3, [sp, #4]
   4025c:	2b00      	cmp	r3, #0
   4025e:	d05c      	beq.n	4031a <__gnu_unwind_pr_common+0x1ea>
   40260:	f1b8 0f00 	cmp.w	r8, #0
   40264:	d059      	beq.n	4031a <__gnu_unwind_pr_common+0x1ea>
   40266:	2c00      	cmp	r4, #0
   40268:	da01      	bge.n	4026e <__gnu_unwind_pr_common+0x13e>
   4026a:	f109 0904 	add.w	r9, r9, #4
   4026e:	f108 0201 	add.w	r2, r8, #1
   40272:	eb09 0282 	add.w	r2, r9, r2, lsl #2
   40276:	e7bb      	b.n	401f0 <__gnu_unwind_pr_common+0xc0>
   40278:	f1bb 0f00 	cmp.w	fp, #0
   4027c:	d11c      	bne.n	402b8 <__gnu_unwind_pr_common+0x188>
   4027e:	b1c3      	cbz	r3, 402b2 <__gnu_unwind_pr_common+0x182>
   40280:	f8d9 3004 	ldr.w	r3, [r9, #4]
   40284:	f8d9 2000 	ldr.w	r2, [r9]
   40288:	1c99      	adds	r1, r3, #2
   4028a:	ea4f 72d2 	mov.w	r2, r2, lsr #31
   4028e:	d0cc      	beq.n	4022a <__gnu_unwind_pr_common+0xfa>
   40290:	f105 0458 	add.w	r4, r5, #88	@ 0x58
   40294:	3301      	adds	r3, #1
   40296:	9404      	str	r4, [sp, #16]
   40298:	f000 808e 	beq.w	403b8 <__gnu_unwind_pr_common+0x288>
   4029c:	f109 0004 	add.w	r0, r9, #4
   402a0:	f7ff fdb4 	bl	3fe0c <_Unwind_decode_typeinfo_ptr.constprop.0>
   402a4:	ab04      	add	r3, sp, #16
   402a6:	4601      	mov	r1, r0
   402a8:	4628      	mov	r0, r5
   402aa:	f7f8 f835 	bl	38318 <__cxa_type_match>
   402ae:	2800      	cmp	r0, #0
   402b0:	d159      	bne.n	40366 <__gnu_unwind_pr_common+0x236>
   402b2:	f109 0208 	add.w	r2, r9, #8
   402b6:	e79b      	b.n	401f0 <__gnu_unwind_pr_common+0xc0>
   402b8:	210d      	movs	r1, #13
   402ba:	4630      	mov	r0, r6
   402bc:	f7ff fec2 	bl	40044 <_Unwind_GetGR>
   402c0:	6a2c      	ldr	r4, [r5, #32]
   402c2:	4284      	cmp	r4, r0
   402c4:	d1f5      	bne.n	402b2 <__gnu_unwind_pr_common+0x182>
   402c6:	6aab      	ldr	r3, [r5, #40]	@ 0x28
   402c8:	4599      	cmp	r9, r3
   402ca:	d1f2      	bne.n	402b2 <__gnu_unwind_pr_common+0x182>
   402cc:	4648      	mov	r0, r9
   402ce:	f7ff fcd3 	bl	3fc78 <selfrel_offset31>
   402d2:	210f      	movs	r1, #15
   402d4:	4602      	mov	r2, r0
   402d6:	4630      	mov	r0, r6
   402d8:	f7ff fedc 	bl	40094 <_Unwind_SetGR>
   402dc:	462a      	mov	r2, r5
   402de:	2100      	movs	r1, #0
   402e0:	4630      	mov	r0, r6
   402e2:	f7ff fed7 	bl	40094 <_Unwind_SetGR>
   402e6:	e79e      	b.n	40226 <__gnu_unwind_pr_common+0xf6>
   402e8:	210d      	movs	r1, #13
   402ea:	4630      	mov	r0, r6
   402ec:	f7ff feaa 	bl	40044 <_Unwind_GetGR>
   402f0:	6a2f      	ldr	r7, [r5, #32]
   402f2:	4287      	cmp	r7, r0
   402f4:	d1b7      	bne.n	40266 <__gnu_unwind_pr_common+0x136>
   402f6:	6aab      	ldr	r3, [r5, #40]	@ 0x28
   402f8:	4599      	cmp	r9, r3
   402fa:	d1b4      	bne.n	40266 <__gnu_unwind_pr_common+0x136>
   402fc:	2400      	movs	r4, #0
   402fe:	2304      	movs	r3, #4
   40300:	e9c5 430b 	strd	r4, r3, [r5, #44]	@ 0x2c
   40304:	444b      	add	r3, r9
   40306:	f8c5 8028 	str.w	r8, [r5, #40]	@ 0x28
   4030a:	636b      	str	r3, [r5, #52]	@ 0x34
   4030c:	f8d9 3000 	ldr.w	r3, [r9]
   40310:	42a3      	cmp	r3, r4
   40312:	db58      	blt.n	403c6 <__gnu_unwind_pr_common+0x296>
   40314:	2301      	movs	r3, #1
   40316:	9302      	str	r3, [sp, #8]
   40318:	e7a9      	b.n	4026e <__gnu_unwind_pr_common+0x13e>
   4031a:	f105 0358 	add.w	r3, r5, #88	@ 0x58
   4031e:	f8cd b00c 	str.w	fp, [sp, #12]
   40322:	f109 0704 	add.w	r7, r9, #4
   40326:	46b3      	mov	fp, r6
   40328:	2400      	movs	r4, #0
   4032a:	461e      	mov	r6, r3
   4032c:	e00b      	b.n	40346 <__gnu_unwind_pr_common+0x216>
   4032e:	4638      	mov	r0, r7
   40330:	9604      	str	r6, [sp, #16]
   40332:	f7ff fd6b 	bl	3fe0c <_Unwind_decode_typeinfo_ptr.constprop.0>
   40336:	2200      	movs	r2, #0
   40338:	4601      	mov	r1, r0
   4033a:	ab04      	add	r3, sp, #16
   4033c:	4628      	mov	r0, r5
   4033e:	f7f7 ffeb 	bl	38318 <__cxa_type_match>
   40342:	3704      	adds	r7, #4
   40344:	b9f8      	cbnz	r0, 40386 <__gnu_unwind_pr_common+0x256>
   40346:	4544      	cmp	r4, r8
   40348:	f104 0401 	add.w	r4, r4, #1
   4034c:	d1ef      	bne.n	4032e <__gnu_unwind_pr_common+0x1fe>
   4034e:	210d      	movs	r1, #13
   40350:	4658      	mov	r0, fp
   40352:	f7ff fe77 	bl	40044 <_Unwind_GetGR>
   40356:	9b04      	ldr	r3, [sp, #16]
   40358:	f8c5 9028 	str.w	r9, [r5, #40]	@ 0x28
   4035c:	4602      	mov	r2, r0
   4035e:	e9c5 2308 	strd	r2, r3, [r5, #32]
   40362:	2006      	movs	r0, #6
   40364:	e762      	b.n	4022c <__gnu_unwind_pr_common+0xfc>
   40366:	4604      	mov	r4, r0
   40368:	210d      	movs	r1, #13
   4036a:	4630      	mov	r0, r6
   4036c:	f7ff fe6a 	bl	40044 <_Unwind_GetGR>
   40370:	9e04      	ldr	r6, [sp, #16]
   40372:	6228      	str	r0, [r5, #32]
   40374:	2c02      	cmp	r4, #2
   40376:	bf04      	itt	eq
   40378:	62ee      	streq	r6, [r5, #44]	@ 0x2c
   4037a:	f105 062c 	addeq.w	r6, r5, #44	@ 0x2c
   4037e:	e9c5 6909 	strd	r6, r9, [r5, #36]	@ 0x24
   40382:	2006      	movs	r0, #6
   40384:	e752      	b.n	4022c <__gnu_unwind_pr_common+0xfc>
   40386:	465e      	mov	r6, fp
   40388:	f8d9 4000 	ldr.w	r4, [r9]
   4038c:	f8dd b00c 	ldr.w	fp, [sp, #12]
   40390:	e769      	b.n	40266 <__gnu_unwind_pr_common+0x136>
   40392:	4648      	mov	r0, r9
   40394:	f7ff fc70 	bl	3fc78 <selfrel_offset31>
   40398:	f109 0304 	add.w	r3, r9, #4
   4039c:	4604      	mov	r4, r0
   4039e:	63ab      	str	r3, [r5, #56]	@ 0x38
   403a0:	4628      	mov	r0, r5
   403a2:	f7f8 f811 	bl	383c8 <__cxa_begin_cleanup>
   403a6:	2800      	cmp	r0, #0
   403a8:	f43f af3f 	beq.w	4022a <__gnu_unwind_pr_common+0xfa>
   403ac:	4622      	mov	r2, r4
   403ae:	210f      	movs	r1, #15
   403b0:	4630      	mov	r0, r6
   403b2:	f7ff fe6f 	bl	40094 <_Unwind_SetGR>
   403b6:	e736      	b.n	40226 <__gnu_unwind_pr_common+0xf6>
   403b8:	4630      	mov	r0, r6
   403ba:	210d      	movs	r1, #13
   403bc:	f7ff fe42 	bl	40044 <_Unwind_GetGR>
   403c0:	4626      	mov	r6, r4
   403c2:	6228      	str	r0, [r5, #32]
   403c4:	e7db      	b.n	4037e <__gnu_unwind_pr_common+0x24e>
   403c6:	f108 0201 	add.w	r2, r8, #1
   403ca:	eb09 0082 	add.w	r0, r9, r2, lsl #2
   403ce:	e77e      	b.n	402ce <__gnu_unwind_pr_common+0x19e>
   403d0:	0003f675 	.word	0x0003f675

000403d4 <__aeabi_unwind_cpp_pr0>:
   403d4:	2300      	movs	r3, #0
   403d6:	f7ff beab 	b.w	40130 <__gnu_unwind_pr_common>
   403da:	bf00      	nop

000403dc <__aeabi_unwind_cpp_pr1>:
   403dc:	2301      	movs	r3, #1
   403de:	f7ff bea7 	b.w	40130 <__gnu_unwind_pr_common>
   403e2:	bf00      	nop

000403e4 <__aeabi_unwind_cpp_pr2>:
   403e4:	2302      	movs	r3, #2
   403e6:	f7ff bea3 	b.w	40130 <__gnu_unwind_pr_common>
   403ea:	bf00      	nop

000403ec <_Unwind_VRS_Pop>:
   403ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   403f0:	4606      	mov	r6, r0
   403f2:	b0c4      	sub	sp, #272	@ 0x110
   403f4:	4614      	mov	r4, r2
   403f6:	2905      	cmp	r1, #5
   403f8:	f200 80d8 	bhi.w	405ac <_Unwind_VRS_Pop+0x1c0>
   403fc:	e8df f011 	tbh	[pc, r1, lsl #1]
   40400:	002d0012 	.word	0x002d0012
   40404:	006c00d6 	.word	0x006c00d6
   40408:	00060091 	.word	0x00060091
   4040c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
   4040e:	2c00      	cmp	r4, #0
   40410:	f040 80cc 	bne.w	405ac <_Unwind_VRS_Pop+0x1c0>
   40414:	f853 2b04 	ldr.w	r2, [r3], #4
   40418:	6442      	str	r2, [r0, #68]	@ 0x44
   4041a:	6383      	str	r3, [r0, #56]	@ 0x38
   4041c:	2000      	movs	r0, #0
   4041e:	b044      	add	sp, #272	@ 0x110
   40420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   40424:	2b00      	cmp	r3, #0
   40426:	f040 80c1 	bne.w	405ac <_Unwind_VRS_Pop+0x1c0>
   4042a:	6b85      	ldr	r5, [r0, #56]	@ 0x38
   4042c:	fa1f fc84 	uxth.w	ip, r4
   40430:	2001      	movs	r0, #1
   40432:	f106 0e04 	add.w	lr, r6, #4
   40436:	fa00 f103 	lsl.w	r1, r0, r3
   4043a:	ea11 0f0c 	tst.w	r1, ip
   4043e:	462a      	mov	r2, r5
   40440:	d004      	beq.n	4044c <_Unwind_VRS_Pop+0x60>
   40442:	f852 1b04 	ldr.w	r1, [r2], #4
   40446:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]
   4044a:	4615      	mov	r5, r2
   4044c:	3301      	adds	r3, #1
   4044e:	2b10      	cmp	r3, #16
   40450:	d1f1      	bne.n	40436 <_Unwind_VRS_Pop+0x4a>
   40452:	04a7      	lsls	r7, r4, #18
   40454:	d4e2      	bmi.n	4041c <_Unwind_VRS_Pop+0x30>
   40456:	63b5      	str	r5, [r6, #56]	@ 0x38
   40458:	e7e0      	b.n	4041c <_Unwind_VRS_Pop+0x30>
   4045a:	2b01      	cmp	r3, #1
   4045c:	ea4f 4714 	mov.w	r7, r4, lsr #16
   40460:	b2a4      	uxth	r4, r4
   40462:	f000 8083 	beq.w	4056c <_Unwind_VRS_Pop+0x180>
   40466:	2b05      	cmp	r3, #5
   40468:	f040 80a0 	bne.w	405ac <_Unwind_VRS_Pop+0x1c0>
   4046c:	eb07 0804 	add.w	r8, r7, r4
   40470:	f1b8 0f20 	cmp.w	r8, #32
   40474:	f200 809a 	bhi.w	405ac <_Unwind_VRS_Pop+0x1c0>
   40478:	2f0f      	cmp	r7, #15
   4047a:	f240 8099 	bls.w	405b0 <_Unwind_VRS_Pop+0x1c4>
   4047e:	2c00      	cmp	r4, #0
   40480:	d0cc      	beq.n	4041c <_Unwind_VRS_Pop+0x30>
   40482:	6802      	ldr	r2, [r0, #0]
   40484:	0750      	lsls	r0, r2, #29
   40486:	f100 8118 	bmi.w	406ba <_Unwind_VRS_Pop+0x2ce>
   4048a:	9301      	str	r3, [sp, #4]
   4048c:	ad02      	add	r5, sp, #8
   4048e:	4628      	mov	r0, r5
   40490:	f7d8 ff10 	bl	192b4 <__gnu_Unwind_Save_VFP_D_16_to_31>
   40494:	ea4f 0c44 	mov.w	ip, r4, lsl #1
   40498:	f1a7 0010 	sub.w	r0, r7, #16
   4049c:	6bb1      	ldr	r1, [r6, #56]	@ 0x38
   4049e:	9b01      	ldr	r3, [sp, #4]
   404a0:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
   404a4:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   404a8:	f10c 0c01 	add.w	ip, ip, #1
   404ac:	3804      	subs	r0, #4
   404ae:	eb01 028c 	add.w	r2, r1, ip, lsl #2
   404b2:	f851 4b04 	ldr.w	r4, [r1], #4
   404b6:	f840 4f04 	str.w	r4, [r0, #4]!
   404ba:	4291      	cmp	r1, r2
   404bc:	d1f9      	bne.n	404b2 <_Unwind_VRS_Pop+0xc6>
   404be:	2b01      	cmp	r3, #1
   404c0:	f000 80de 	beq.w	40680 <_Unwind_VRS_Pop+0x294>
   404c4:	2f0f      	cmp	r7, #15
   404c6:	63b1      	str	r1, [r6, #56]	@ 0x38
   404c8:	d802      	bhi.n	404d0 <_Unwind_VRS_Pop+0xe4>
   404ca:	a822      	add	r0, sp, #136	@ 0x88
   404cc:	f7d8 fee6 	bl	1929c <__gnu_Unwind_Restore_VFP_D>
   404d0:	4628      	mov	r0, r5
   404d2:	f7d8 feeb 	bl	192ac <__gnu_Unwind_Restore_VFP_D_16_to_31>
   404d6:	e7a1      	b.n	4041c <_Unwind_VRS_Pop+0x30>
   404d8:	2b03      	cmp	r3, #3
   404da:	d167      	bne.n	405ac <_Unwind_VRS_Pop+0x1c0>
   404dc:	b2a7      	uxth	r7, r4
   404de:	eb07 4314 	add.w	r3, r7, r4, lsr #16
   404e2:	2b10      	cmp	r3, #16
   404e4:	ea4f 4414 	mov.w	r4, r4, lsr #16
   404e8:	d860      	bhi.n	405ac <_Unwind_VRS_Pop+0x1c0>
   404ea:	6803      	ldr	r3, [r0, #0]
   404ec:	0719      	lsls	r1, r3, #28
   404ee:	f100 80bf 	bmi.w	40670 <_Unwind_VRS_Pop+0x284>
   404f2:	ad22      	add	r5, sp, #136	@ 0x88
   404f4:	4628      	mov	r0, r5
   404f6:	f7d8 ff03 	bl	19300 <__gnu_Unwind_Save_WMMXD>
   404fa:	007a      	lsls	r2, r7, #1
   404fc:	6bb0      	ldr	r0, [r6, #56]	@ 0x38
   404fe:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   40502:	1e53      	subs	r3, r2, #1
   40504:	b142      	cbz	r2, 40518 <_Unwind_VRS_Pop+0x12c>
   40506:	1b01      	subs	r1, r0, r4
   40508:	5862      	ldr	r2, [r4, r1]
   4050a:	f844 2b04 	str.w	r2, [r4], #4
   4050e:	3b01      	subs	r3, #1
   40510:	1c5a      	adds	r2, r3, #1
   40512:	d1f9      	bne.n	40508 <_Unwind_VRS_Pop+0x11c>
   40514:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
   40518:	63b0      	str	r0, [r6, #56]	@ 0x38
   4051a:	4628      	mov	r0, r5
   4051c:	f7d8 fece 	bl	192bc <__gnu_Unwind_Restore_WMMXD>
   40520:	e77c      	b.n	4041c <_Unwind_VRS_Pop+0x30>
   40522:	2b00      	cmp	r3, #0
   40524:	d142      	bne.n	405ac <_Unwind_VRS_Pop+0x1c0>
   40526:	2c10      	cmp	r4, #16
   40528:	d840      	bhi.n	405ac <_Unwind_VRS_Pop+0x1c0>
   4052a:	6803      	ldr	r3, [r0, #0]
   4052c:	06dd      	lsls	r5, r3, #27
   4052e:	f100 8097 	bmi.w	40660 <_Unwind_VRS_Pop+0x274>
   40532:	ad22      	add	r5, sp, #136	@ 0x88
   40534:	4628      	mov	r0, r5
   40536:	f7d8 ff0f 	bl	19358 <__gnu_Unwind_Save_WMMXC>
   4053a:	6bb7      	ldr	r7, [r6, #56]	@ 0x38
   4053c:	4629      	mov	r1, r5
   4053e:	2300      	movs	r3, #0
   40540:	f04f 0c01 	mov.w	ip, #1
   40544:	fa0c f203 	lsl.w	r2, ip, r3
   40548:	4222      	tst	r2, r4
   4054a:	4638      	mov	r0, r7
   4054c:	f103 0301 	add.w	r3, r3, #1
   40550:	d003      	beq.n	4055a <_Unwind_VRS_Pop+0x16e>
   40552:	f850 2b04 	ldr.w	r2, [r0], #4
   40556:	600a      	str	r2, [r1, #0]
   40558:	4607      	mov	r7, r0
   4055a:	2b04      	cmp	r3, #4
   4055c:	f101 0104 	add.w	r1, r1, #4
   40560:	d1f0      	bne.n	40544 <_Unwind_VRS_Pop+0x158>
   40562:	63b7      	str	r7, [r6, #56]	@ 0x38
   40564:	4628      	mov	r0, r5
   40566:	f7d8 feed 	bl	19344 <__gnu_Unwind_Restore_WMMXC>
   4056a:	e757      	b.n	4041c <_Unwind_VRS_Pop+0x30>
   4056c:	193a      	adds	r2, r7, r4
   4056e:	2a10      	cmp	r2, #16
   40570:	d81c      	bhi.n	405ac <_Unwind_VRS_Pop+0x1c0>
   40572:	2f10      	cmp	r7, #16
   40574:	d01a      	beq.n	405ac <_Unwind_VRS_Pop+0x1c0>
   40576:	6802      	ldr	r2, [r0, #0]
   40578:	07d0      	lsls	r0, r2, #31
   4057a:	d508      	bpl.n	4058e <_Unwind_VRS_Pop+0x1a2>
   4057c:	4630      	mov	r0, r6
   4057e:	f022 0203 	bic.w	r2, r2, #3
   40582:	f840 2b50 	str.w	r2, [r0], #80
   40586:	9301      	str	r3, [sp, #4]
   40588:	f7d8 fe84 	bl	19294 <__gnu_Unwind_Save_VFP>
   4058c:	9b01      	ldr	r3, [sp, #4]
   4058e:	9301      	str	r3, [sp, #4]
   40590:	ad22      	add	r5, sp, #136	@ 0x88
   40592:	4628      	mov	r0, r5
   40594:	f7d8 fe7e 	bl	19294 <__gnu_Unwind_Save_VFP>
   40598:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
   4059a:	9b01      	ldr	r3, [sp, #4]
   4059c:	2c00      	cmp	r4, #0
   4059e:	d158      	bne.n	40652 <_Unwind_VRS_Pop+0x266>
   405a0:	3204      	adds	r2, #4
   405a2:	63b2      	str	r2, [r6, #56]	@ 0x38
   405a4:	4628      	mov	r0, r5
   405a6:	f7d8 fe71 	bl	1928c <__gnu_Unwind_Restore_VFP>
   405aa:	e737      	b.n	4041c <_Unwind_VRS_Pop+0x30>
   405ac:	2002      	movs	r0, #2
   405ae:	e736      	b.n	4041e <_Unwind_VRS_Pop+0x32>
   405b0:	f1b8 0f10 	cmp.w	r8, #16
   405b4:	6802      	ldr	r2, [r0, #0]
   405b6:	d965      	bls.n	40684 <_Unwind_VRS_Pop+0x298>
   405b8:	07d4      	lsls	r4, r2, #31
   405ba:	d572      	bpl.n	406a2 <_Unwind_VRS_Pop+0x2b6>
   405bc:	f022 0201 	bic.w	r2, r2, #1
   405c0:	f042 0202 	orr.w	r2, r2, #2
   405c4:	f840 2b50 	str.w	r2, [r0], #80
   405c8:	9301      	str	r3, [sp, #4]
   405ca:	f7d8 fe6b 	bl	192a4 <__gnu_Unwind_Save_VFP_D>
   405ce:	6832      	ldr	r2, [r6, #0]
   405d0:	9b01      	ldr	r3, [sp, #4]
   405d2:	f012 0f04 	tst.w	r2, #4
   405d6:	d166      	bne.n	406a6 <_Unwind_VRS_Pop+0x2ba>
   405d8:	ad22      	add	r5, sp, #136	@ 0x88
   405da:	4628      	mov	r0, r5
   405dc:	9301      	str	r3, [sp, #4]
   405de:	f7d8 fe61 	bl	192a4 <__gnu_Unwind_Save_VFP_D>
   405e2:	a802      	add	r0, sp, #8
   405e4:	f7d8 fe66 	bl	192b4 <__gnu_Unwind_Save_VFP_D_16_to_31>
   405e8:	f1c7 0110 	rsb	r1, r7, #16
   405ec:	0049      	lsls	r1, r1, #1
   405ee:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
   405f0:	9b01      	ldr	r3, [sp, #4]
   405f2:	f1a8 0c10 	sub.w	ip, r8, #16
   405f6:	1e4c      	subs	r4, r1, #1
   405f8:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
   405fc:	3401      	adds	r4, #1
   405fe:	3804      	subs	r0, #4
   40600:	eb02 0184 	add.w	r1, r2, r4, lsl #2
   40604:	f852 4b04 	ldr.w	r4, [r2], #4
   40608:	f840 4f04 	str.w	r4, [r0, #4]!
   4060c:	428a      	cmp	r2, r1
   4060e:	d1f9      	bne.n	40604 <_Unwind_VRS_Pop+0x218>
   40610:	f1bc 0f00 	cmp.w	ip, #0
   40614:	d05a      	beq.n	406cc <_Unwind_VRS_Pop+0x2e0>
   40616:	2f10      	cmp	r7, #16
   40618:	4638      	mov	r0, r7
   4061a:	bf38      	it	cc
   4061c:	2010      	movcc	r0, #16
   4061e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   40622:	3810      	subs	r0, #16
   40624:	ad02      	add	r5, sp, #8
   40626:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
   4062a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   4062e:	e73b      	b.n	404a8 <_Unwind_VRS_Pop+0xbc>
   40630:	4630      	mov	r0, r6
   40632:	f022 0201 	bic.w	r2, r2, #1
   40636:	f042 0202 	orr.w	r2, r2, #2
   4063a:	f840 2b50 	str.w	r2, [r0], #80
   4063e:	ad22      	add	r5, sp, #136	@ 0x88
   40640:	9301      	str	r3, [sp, #4]
   40642:	f7d8 fe2f 	bl	192a4 <__gnu_Unwind_Save_VFP_D>
   40646:	4628      	mov	r0, r5
   40648:	f7d8 fe2c 	bl	192a4 <__gnu_Unwind_Save_VFP_D>
   4064c:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
   4064e:	b324      	cbz	r4, 4069a <_Unwind_VRS_Pop+0x2ae>
   40650:	9b01      	ldr	r3, [sp, #4]
   40652:	0064      	lsls	r4, r4, #1
   40654:	3c01      	subs	r4, #1
   40656:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
   4065a:	f04f 0c00 	mov.w	ip, #0
   4065e:	e7cd      	b.n	405fc <_Unwind_VRS_Pop+0x210>
   40660:	f023 0310 	bic.w	r3, r3, #16
   40664:	6003      	str	r3, [r0, #0]
   40666:	f500 70ec 	add.w	r0, r0, #472	@ 0x1d8
   4066a:	f7d8 fe75 	bl	19358 <__gnu_Unwind_Save_WMMXC>
   4066e:	e760      	b.n	40532 <_Unwind_VRS_Pop+0x146>
   40670:	f023 0308 	bic.w	r3, r3, #8
   40674:	6003      	str	r3, [r0, #0]
   40676:	f500 70ac 	add.w	r0, r0, #344	@ 0x158
   4067a:	f7d8 fe41 	bl	19300 <__gnu_Unwind_Save_WMMXD>
   4067e:	e738      	b.n	404f2 <_Unwind_VRS_Pop+0x106>
   40680:	ad22      	add	r5, sp, #136	@ 0x88
   40682:	e78d      	b.n	405a0 <_Unwind_VRS_Pop+0x1b4>
   40684:	07d1      	lsls	r1, r2, #31
   40686:	d4d3      	bmi.n	40630 <_Unwind_VRS_Pop+0x244>
   40688:	ad22      	add	r5, sp, #136	@ 0x88
   4068a:	4628      	mov	r0, r5
   4068c:	9301      	str	r3, [sp, #4]
   4068e:	f7d8 fe09 	bl	192a4 <__gnu_Unwind_Save_VFP_D>
   40692:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
   40694:	9b01      	ldr	r3, [sp, #4]
   40696:	2c00      	cmp	r4, #0
   40698:	d1db      	bne.n	40652 <_Unwind_VRS_Pop+0x266>
   4069a:	4628      	mov	r0, r5
   4069c:	f7d8 fdfe 	bl	1929c <__gnu_Unwind_Restore_VFP_D>
   406a0:	e6bc      	b.n	4041c <_Unwind_VRS_Pop+0x30>
   406a2:	0754      	lsls	r4, r2, #29
   406a4:	d598      	bpl.n	405d8 <_Unwind_VRS_Pop+0x1ec>
   406a6:	4630      	mov	r0, r6
   406a8:	f022 0204 	bic.w	r2, r2, #4
   406ac:	f840 2bd8 	str.w	r2, [r0], #216
   406b0:	9301      	str	r3, [sp, #4]
   406b2:	f7d8 fdff 	bl	192b4 <__gnu_Unwind_Save_VFP_D_16_to_31>
   406b6:	9b01      	ldr	r3, [sp, #4]
   406b8:	e78e      	b.n	405d8 <_Unwind_VRS_Pop+0x1ec>
   406ba:	4630      	mov	r0, r6
   406bc:	f022 0204 	bic.w	r2, r2, #4
   406c0:	f840 2bd8 	str.w	r2, [r0], #216
   406c4:	9301      	str	r3, [sp, #4]
   406c6:	f7d8 fdf5 	bl	192b4 <__gnu_Unwind_Save_VFP_D_16_to_31>
   406ca:	e6df      	b.n	4048c <_Unwind_VRS_Pop+0xa0>
   406cc:	2b01      	cmp	r3, #1
   406ce:	f43f af67 	beq.w	405a0 <_Unwind_VRS_Pop+0x1b4>
   406d2:	2f0f      	cmp	r7, #15
   406d4:	63b2      	str	r2, [r6, #56]	@ 0x38
   406d6:	f63f aea1 	bhi.w	4041c <_Unwind_VRS_Pop+0x30>
   406da:	e7de      	b.n	4069a <_Unwind_VRS_Pop+0x2ae>

000406dc <next_unwind_byte>:
   406dc:	7a02      	ldrb	r2, [r0, #8]
   406de:	4603      	mov	r3, r0
   406e0:	b97a      	cbnz	r2, 40702 <next_unwind_byte+0x26>
   406e2:	7a42      	ldrb	r2, [r0, #9]
   406e4:	b1a2      	cbz	r2, 40710 <next_unwind_byte+0x34>
   406e6:	6841      	ldr	r1, [r0, #4]
   406e8:	3a01      	subs	r2, #1
   406ea:	b410      	push	{r4}
   406ec:	7242      	strb	r2, [r0, #9]
   406ee:	6808      	ldr	r0, [r1, #0]
   406f0:	2203      	movs	r2, #3
   406f2:	1d0c      	adds	r4, r1, #4
   406f4:	721a      	strb	r2, [r3, #8]
   406f6:	0202      	lsls	r2, r0, #8
   406f8:	605c      	str	r4, [r3, #4]
   406fa:	0e00      	lsrs	r0, r0, #24
   406fc:	bc10      	pop	{r4}
   406fe:	601a      	str	r2, [r3, #0]
   40700:	4770      	bx	lr
   40702:	6800      	ldr	r0, [r0, #0]
   40704:	3a01      	subs	r2, #1
   40706:	721a      	strb	r2, [r3, #8]
   40708:	0202      	lsls	r2, r0, #8
   4070a:	601a      	str	r2, [r3, #0]
   4070c:	0e00      	lsrs	r0, r0, #24
   4070e:	4770      	bx	lr
   40710:	20b0      	movs	r0, #176	@ 0xb0
   40712:	4770      	bx	lr

00040714 <_Unwind_GetGR.constprop.0>:
   40714:	b500      	push	{lr}
   40716:	b085      	sub	sp, #20
   40718:	aa03      	add	r2, sp, #12
   4071a:	2300      	movs	r3, #0
   4071c:	9200      	str	r2, [sp, #0]
   4071e:	4619      	mov	r1, r3
   40720:	220c      	movs	r2, #12
   40722:	f7ff fc75 	bl	40010 <_Unwind_VRS_Get>
   40726:	9803      	ldr	r0, [sp, #12]
   40728:	b005      	add	sp, #20
   4072a:	f85d fb04 	ldr.w	pc, [sp], #4
   4072e:	bf00      	nop

00040730 <unwind_UCB_from_context>:
   40730:	f7ff bff0 	b.w	40714 <_Unwind_GetGR.constprop.0>

00040734 <__gnu_unwind_execute>:
   40734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   40738:	4606      	mov	r6, r0
   4073a:	b085      	sub	sp, #20
   4073c:	460d      	mov	r5, r1
   4073e:	f04f 0800 	mov.w	r8, #0
   40742:	4628      	mov	r0, r5
   40744:	f7ff ffca 	bl	406dc <next_unwind_byte>
   40748:	28b0      	cmp	r0, #176	@ 0xb0
   4074a:	4604      	mov	r4, r0
   4074c:	f000 811c 	beq.w	40988 <__gnu_unwind_execute+0x254>
   40750:	0607      	lsls	r7, r0, #24
   40752:	d55b      	bpl.n	4080c <__gnu_unwind_execute+0xd8>
   40754:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
   40758:	2ba0      	cmp	r3, #160	@ 0xa0
   4075a:	d01a      	beq.n	40792 <__gnu_unwind_execute+0x5e>
   4075c:	d830      	bhi.n	407c0 <__gnu_unwind_execute+0x8c>
   4075e:	2b80      	cmp	r3, #128	@ 0x80
   40760:	f000 8082 	beq.w	40868 <__gnu_unwind_execute+0x134>
   40764:	2b90      	cmp	r3, #144	@ 0x90
   40766:	d127      	bne.n	407b8 <__gnu_unwind_execute+0x84>
   40768:	f000 030d 	and.w	r3, r0, #13
   4076c:	2b0d      	cmp	r3, #13
   4076e:	d023      	beq.n	407b8 <__gnu_unwind_execute+0x84>
   40770:	af02      	add	r7, sp, #8
   40772:	2300      	movs	r3, #0
   40774:	f000 020f 	and.w	r2, r0, #15
   40778:	4619      	mov	r1, r3
   4077a:	9700      	str	r7, [sp, #0]
   4077c:	4630      	mov	r0, r6
   4077e:	f7ff fc47 	bl	40010 <_Unwind_VRS_Get>
   40782:	2300      	movs	r3, #0
   40784:	9700      	str	r7, [sp, #0]
   40786:	220d      	movs	r2, #13
   40788:	4619      	mov	r1, r3
   4078a:	4630      	mov	r0, r6
   4078c:	f7ff fc68 	bl	40060 <_Unwind_VRS_Set>
   40790:	e7d7      	b.n	40742 <__gnu_unwind_execute+0xe>
   40792:	43c3      	mvns	r3, r0
   40794:	f003 0307 	and.w	r3, r3, #7
   40798:	f44f 627f 	mov.w	r2, #4080	@ 0xff0
   4079c:	411a      	asrs	r2, r3
   4079e:	0701      	lsls	r1, r0, #28
   407a0:	f402 627f 	and.w	r2, r2, #4080	@ 0xff0
   407a4:	d501      	bpl.n	407aa <__gnu_unwind_execute+0x76>
   407a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
   407aa:	2300      	movs	r3, #0
   407ac:	4619      	mov	r1, r3
   407ae:	4630      	mov	r0, r6
   407b0:	f7ff fe1c 	bl	403ec <_Unwind_VRS_Pop>
   407b4:	2800      	cmp	r0, #0
   407b6:	d0c4      	beq.n	40742 <__gnu_unwind_execute+0xe>
   407b8:	2009      	movs	r0, #9
   407ba:	b005      	add	sp, #20
   407bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   407c0:	2bb0      	cmp	r3, #176	@ 0xb0
   407c2:	d068      	beq.n	40896 <__gnu_unwind_execute+0x162>
   407c4:	2bc0      	cmp	r3, #192	@ 0xc0
   407c6:	d13d      	bne.n	40844 <__gnu_unwind_execute+0x110>
   407c8:	28c6      	cmp	r0, #198	@ 0xc6
   407ca:	f000 80ca 	beq.w	40962 <__gnu_unwind_execute+0x22e>
   407ce:	28c7      	cmp	r0, #199	@ 0xc7
   407d0:	f000 80df 	beq.w	40992 <__gnu_unwind_execute+0x25e>
   407d4:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
   407d8:	2bc0      	cmp	r3, #192	@ 0xc0
   407da:	f000 80ec 	beq.w	409b6 <__gnu_unwind_execute+0x282>
   407de:	28c8      	cmp	r0, #200	@ 0xc8
   407e0:	f000 80f7 	beq.w	409d2 <__gnu_unwind_execute+0x29e>
   407e4:	28c9      	cmp	r0, #201	@ 0xc9
   407e6:	d1e7      	bne.n	407b8 <__gnu_unwind_execute+0x84>
   407e8:	4628      	mov	r0, r5
   407ea:	f7ff ff77 	bl	406dc <next_unwind_byte>
   407ee:	0302      	lsls	r2, r0, #12
   407f0:	f000 000f 	and.w	r0, r0, #15
   407f4:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
   407f8:	3001      	adds	r0, #1
   407fa:	4302      	orrs	r2, r0
   407fc:	2101      	movs	r1, #1
   407fe:	2305      	movs	r3, #5
   40800:	4630      	mov	r0, r6
   40802:	f7ff fdf3 	bl	403ec <_Unwind_VRS_Pop>
   40806:	2800      	cmp	r0, #0
   40808:	d09b      	beq.n	40742 <__gnu_unwind_execute+0xe>
   4080a:	e7d5      	b.n	407b8 <__gnu_unwind_execute+0x84>
   4080c:	0083      	lsls	r3, r0, #2
   4080e:	b2db      	uxtb	r3, r3
   40810:	1d1f      	adds	r7, r3, #4
   40812:	f10d 0908 	add.w	r9, sp, #8
   40816:	2300      	movs	r3, #0
   40818:	4619      	mov	r1, r3
   4081a:	f8cd 9000 	str.w	r9, [sp]
   4081e:	220d      	movs	r2, #13
   40820:	4630      	mov	r0, r6
   40822:	f7ff fbf5 	bl	40010 <_Unwind_VRS_Get>
   40826:	9b02      	ldr	r3, [sp, #8]
   40828:	f8cd 9000 	str.w	r9, [sp]
   4082c:	0660      	lsls	r0, r4, #25
   4082e:	bf4c      	ite	mi
   40830:	1bdf      	submi	r7, r3, r7
   40832:	18ff      	addpl	r7, r7, r3
   40834:	2300      	movs	r3, #0
   40836:	220d      	movs	r2, #13
   40838:	4619      	mov	r1, r3
   4083a:	4630      	mov	r0, r6
   4083c:	9702      	str	r7, [sp, #8]
   4083e:	f7ff fc0f 	bl	40060 <_Unwind_VRS_Set>
   40842:	e77e      	b.n	40742 <__gnu_unwind_execute+0xe>
   40844:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
   40848:	2bd0      	cmp	r3, #208	@ 0xd0
   4084a:	d1b5      	bne.n	407b8 <__gnu_unwind_execute+0x84>
   4084c:	f000 0207 	and.w	r2, r0, #7
   40850:	3201      	adds	r2, #1
   40852:	2305      	movs	r3, #5
   40854:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
   40858:	2101      	movs	r1, #1
   4085a:	4630      	mov	r0, r6
   4085c:	f7ff fdc6 	bl	403ec <_Unwind_VRS_Pop>
   40860:	2800      	cmp	r0, #0
   40862:	f43f af6e 	beq.w	40742 <__gnu_unwind_execute+0xe>
   40866:	e7a7      	b.n	407b8 <__gnu_unwind_execute+0x84>
   40868:	4628      	mov	r0, r5
   4086a:	f7ff ff37 	bl	406dc <next_unwind_byte>
   4086e:	0224      	lsls	r4, r4, #8
   40870:	4320      	orrs	r0, r4
   40872:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
   40876:	d09f      	beq.n	407b8 <__gnu_unwind_execute+0x84>
   40878:	0104      	lsls	r4, r0, #4
   4087a:	2300      	movs	r3, #0
   4087c:	b2a2      	uxth	r2, r4
   4087e:	4619      	mov	r1, r3
   40880:	4630      	mov	r0, r6
   40882:	f7ff fdb3 	bl	403ec <_Unwind_VRS_Pop>
   40886:	2800      	cmp	r0, #0
   40888:	d196      	bne.n	407b8 <__gnu_unwind_execute+0x84>
   4088a:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
   4088e:	bf18      	it	ne
   40890:	f04f 0801 	movne.w	r8, #1
   40894:	e755      	b.n	40742 <__gnu_unwind_execute+0xe>
   40896:	f1a0 03b1 	sub.w	r3, r0, #177	@ 0xb1
   4089a:	2b04      	cmp	r3, #4
   4089c:	f200 80b5 	bhi.w	40a0a <__gnu_unwind_execute+0x2d6>
   408a0:	e8df f003 	tbb	[pc, r3]
   408a4:	0c162955 	.word	0x0c162955
   408a8:	03          	.byte	0x03
   408a9:	00          	.byte	0x00
   408aa:	aa03      	add	r2, sp, #12
   408ac:	2300      	movs	r3, #0
   408ae:	9200      	str	r2, [sp, #0]
   408b0:	4619      	mov	r1, r3
   408b2:	220d      	movs	r2, #13
   408b4:	4630      	mov	r0, r6
   408b6:	f7ff fbab 	bl	40010 <_Unwind_VRS_Get>
   408ba:	e742      	b.n	40742 <__gnu_unwind_execute+0xe>
   408bc:	2300      	movs	r3, #0
   408be:	461a      	mov	r2, r3
   408c0:	2105      	movs	r1, #5
   408c2:	4630      	mov	r0, r6
   408c4:	f7ff fd92 	bl	403ec <_Unwind_VRS_Pop>
   408c8:	2800      	cmp	r0, #0
   408ca:	f43f af3a 	beq.w	40742 <__gnu_unwind_execute+0xe>
   408ce:	e773      	b.n	407b8 <__gnu_unwind_execute+0x84>
   408d0:	4628      	mov	r0, r5
   408d2:	f7ff ff03 	bl	406dc <next_unwind_byte>
   408d6:	0302      	lsls	r2, r0, #12
   408d8:	f000 000f 	and.w	r0, r0, #15
   408dc:	3001      	adds	r0, #1
   408de:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
   408e2:	2301      	movs	r3, #1
   408e4:	4302      	orrs	r2, r0
   408e6:	4619      	mov	r1, r3
   408e8:	4630      	mov	r0, r6
   408ea:	f7ff fd7f 	bl	403ec <_Unwind_VRS_Pop>
   408ee:	2800      	cmp	r0, #0
   408f0:	f43f af27 	beq.w	40742 <__gnu_unwind_execute+0xe>
   408f4:	e760      	b.n	407b8 <__gnu_unwind_execute+0x84>
   408f6:	2300      	movs	r3, #0
   408f8:	f10d 0908 	add.w	r9, sp, #8
   408fc:	220d      	movs	r2, #13
   408fe:	4619      	mov	r1, r3
   40900:	f8cd 9000 	str.w	r9, [sp]
   40904:	4630      	mov	r0, r6
   40906:	f7ff fb83 	bl	40010 <_Unwind_VRS_Get>
   4090a:	4628      	mov	r0, r5
   4090c:	f7ff fee6 	bl	406dc <next_unwind_byte>
   40910:	0602      	lsls	r2, r0, #24
   40912:	9c02      	ldr	r4, [sp, #8]
   40914:	f04f 0702 	mov.w	r7, #2
   40918:	d50b      	bpl.n	40932 <__gnu_unwind_execute+0x1fe>
   4091a:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
   4091e:	40b8      	lsls	r0, r7
   40920:	4404      	add	r4, r0
   40922:	4628      	mov	r0, r5
   40924:	9402      	str	r4, [sp, #8]
   40926:	f7ff fed9 	bl	406dc <next_unwind_byte>
   4092a:	0603      	lsls	r3, r0, #24
   4092c:	f107 0707 	add.w	r7, r7, #7
   40930:	d4f3      	bmi.n	4091a <__gnu_unwind_execute+0x1e6>
   40932:	40b8      	lsls	r0, r7
   40934:	2300      	movs	r3, #0
   40936:	f504 7401 	add.w	r4, r4, #516	@ 0x204
   4093a:	4404      	add	r4, r0
   4093c:	f8cd 9000 	str.w	r9, [sp]
   40940:	220d      	movs	r2, #13
   40942:	4619      	mov	r1, r3
   40944:	4630      	mov	r0, r6
   40946:	9402      	str	r4, [sp, #8]
   40948:	f7ff fb8a 	bl	40060 <_Unwind_VRS_Set>
   4094c:	e6f9      	b.n	40742 <__gnu_unwind_execute+0xe>
   4094e:	4628      	mov	r0, r5
   40950:	f7ff fec4 	bl	406dc <next_unwind_byte>
   40954:	1e43      	subs	r3, r0, #1
   40956:	b2db      	uxtb	r3, r3
   40958:	2b0e      	cmp	r3, #14
   4095a:	4602      	mov	r2, r0
   4095c:	f67f af25 	bls.w	407aa <__gnu_unwind_execute+0x76>
   40960:	e72a      	b.n	407b8 <__gnu_unwind_execute+0x84>
   40962:	4628      	mov	r0, r5
   40964:	f7ff feba 	bl	406dc <next_unwind_byte>
   40968:	0302      	lsls	r2, r0, #12
   4096a:	f000 000f 	and.w	r0, r0, #15
   4096e:	3001      	adds	r0, #1
   40970:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
   40974:	2303      	movs	r3, #3
   40976:	4302      	orrs	r2, r0
   40978:	4619      	mov	r1, r3
   4097a:	4630      	mov	r0, r6
   4097c:	f7ff fd36 	bl	403ec <_Unwind_VRS_Pop>
   40980:	2800      	cmp	r0, #0
   40982:	f43f aede 	beq.w	40742 <__gnu_unwind_execute+0xe>
   40986:	e717      	b.n	407b8 <__gnu_unwind_execute+0x84>
   40988:	f1b8 0f00 	cmp.w	r8, #0
   4098c:	d02d      	beq.n	409ea <__gnu_unwind_execute+0x2b6>
   4098e:	2000      	movs	r0, #0
   40990:	e713      	b.n	407ba <__gnu_unwind_execute+0x86>
   40992:	4628      	mov	r0, r5
   40994:	f7ff fea2 	bl	406dc <next_unwind_byte>
   40998:	1e43      	subs	r3, r0, #1
   4099a:	b2db      	uxtb	r3, r3
   4099c:	2b0e      	cmp	r3, #14
   4099e:	4602      	mov	r2, r0
   409a0:	f63f af0a 	bhi.w	407b8 <__gnu_unwind_execute+0x84>
   409a4:	2300      	movs	r3, #0
   409a6:	2104      	movs	r1, #4
   409a8:	4630      	mov	r0, r6
   409aa:	f7ff fd1f 	bl	403ec <_Unwind_VRS_Pop>
   409ae:	2800      	cmp	r0, #0
   409b0:	f43f aec7 	beq.w	40742 <__gnu_unwind_execute+0xe>
   409b4:	e700      	b.n	407b8 <__gnu_unwind_execute+0x84>
   409b6:	f000 020f 	and.w	r2, r0, #15
   409ba:	3201      	adds	r2, #1
   409bc:	2303      	movs	r3, #3
   409be:	f442 2220 	orr.w	r2, r2, #655360	@ 0xa0000
   409c2:	4619      	mov	r1, r3
   409c4:	4630      	mov	r0, r6
   409c6:	f7ff fd11 	bl	403ec <_Unwind_VRS_Pop>
   409ca:	2800      	cmp	r0, #0
   409cc:	f43f aeb9 	beq.w	40742 <__gnu_unwind_execute+0xe>
   409d0:	e6f2      	b.n	407b8 <__gnu_unwind_execute+0x84>
   409d2:	4628      	mov	r0, r5
   409d4:	f7ff fe82 	bl	406dc <next_unwind_byte>
   409d8:	f000 02f0 	and.w	r2, r0, #240	@ 0xf0
   409dc:	f000 030f 	and.w	r3, r0, #15
   409e0:	3210      	adds	r2, #16
   409e2:	3301      	adds	r3, #1
   409e4:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
   409e8:	e708      	b.n	407fc <__gnu_unwind_execute+0xc8>
   409ea:	ac02      	add	r4, sp, #8
   409ec:	4643      	mov	r3, r8
   409ee:	4641      	mov	r1, r8
   409f0:	9400      	str	r4, [sp, #0]
   409f2:	220e      	movs	r2, #14
   409f4:	4630      	mov	r0, r6
   409f6:	f7ff fb0b 	bl	40010 <_Unwind_VRS_Get>
   409fa:	220f      	movs	r2, #15
   409fc:	9400      	str	r4, [sp, #0]
   409fe:	4643      	mov	r3, r8
   40a00:	4641      	mov	r1, r8
   40a02:	4630      	mov	r0, r6
   40a04:	f7ff fb2c 	bl	40060 <_Unwind_VRS_Set>
   40a08:	e7c1      	b.n	4098e <__gnu_unwind_execute+0x25a>
   40a0a:	f000 03fc 	and.w	r3, r0, #252	@ 0xfc
   40a0e:	2bb4      	cmp	r3, #180	@ 0xb4
   40a10:	f43f aed2 	beq.w	407b8 <__gnu_unwind_execute+0x84>
   40a14:	f000 0207 	and.w	r2, r0, #7
   40a18:	3201      	adds	r2, #1
   40a1a:	2301      	movs	r3, #1
   40a1c:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
   40a20:	4619      	mov	r1, r3
   40a22:	4630      	mov	r0, r6
   40a24:	f7ff fce2 	bl	403ec <_Unwind_VRS_Pop>
   40a28:	2800      	cmp	r0, #0
   40a2a:	f43f ae8a 	beq.w	40742 <__gnu_unwind_execute+0xe>
   40a2e:	e6c3      	b.n	407b8 <__gnu_unwind_execute+0x84>

00040a30 <__gnu_unwind_frame>:
   40a30:	b510      	push	{r4, lr}
   40a32:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
   40a34:	6853      	ldr	r3, [r2, #4]
   40a36:	b084      	sub	sp, #16
   40a38:	f04f 0c03 	mov.w	ip, #3
   40a3c:	3208      	adds	r2, #8
   40a3e:	021c      	lsls	r4, r3, #8
   40a40:	4608      	mov	r0, r1
   40a42:	0e1b      	lsrs	r3, r3, #24
   40a44:	a901      	add	r1, sp, #4
   40a46:	9401      	str	r4, [sp, #4]
   40a48:	9202      	str	r2, [sp, #8]
   40a4a:	f88d c00c 	strb.w	ip, [sp, #12]
   40a4e:	f88d 300d 	strb.w	r3, [sp, #13]
   40a52:	f7ff fe6f 	bl	40734 <__gnu_unwind_execute>
   40a56:	b004      	add	sp, #16
   40a58:	bd10      	pop	{r4, pc}
   40a5a:	bf00      	nop

00040a5c <_Unwind_GetRegionStart>:
   40a5c:	b508      	push	{r3, lr}
   40a5e:	f7ff fe67 	bl	40730 <unwind_UCB_from_context>
   40a62:	6c80      	ldr	r0, [r0, #72]	@ 0x48
   40a64:	bd08      	pop	{r3, pc}
   40a66:	bf00      	nop

00040a68 <_Unwind_GetLanguageSpecificData>:
   40a68:	b508      	push	{r3, lr}
   40a6a:	f7ff fe61 	bl	40730 <unwind_UCB_from_context>
   40a6e:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
   40a70:	79c3      	ldrb	r3, [r0, #7]
   40a72:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   40a76:	3008      	adds	r0, #8
   40a78:	bd08      	pop	{r3, pc}
   40a7a:	bf00      	nop

00040a7c <_Unwind_GetDataRelBase>:
   40a7c:	b508      	push	{r3, lr}
   40a7e:	f7e4 fc7f 	bl	25380 <abort>

00040a82 <_Unwind_GetTextRelBase>:
   40a82:	b508      	push	{r3, lr}
   40a84:	f7ff fffa 	bl	40a7c <_Unwind_GetDataRelBase>

00040a88 <ns_spi_dma_read_complete_cb>:

static void ns_spi_dma_read_complete_cb(void *pCallbackCtxt, uint32_t ui32TransactionStatus) {
    (void)pCallbackCtxt;
    (void)ui32TransactionStatus;
    // ns_lp_printf("SPI Read done\n");
    if (ns_spi_config.cb) {
   40a88:	4802      	ldr	r0, [pc, #8]	@ (40a94 <ns_spi_dma_read_complete_cb+0xc>)
   40a8a:	69c3      	ldr	r3, [r0, #28]
   40a8c:	b103      	cbz	r3, 40a90 <ns_spi_dma_read_complete_cb+0x8>
        ns_spi_config.cb(&ns_spi_config);
   40a8e:	4718      	bx	r3
    }
}
   40a90:	4770      	bx	lr
   40a92:	bf00      	nop
   40a94:	10057858 	.word	0x10057858

00040a98 <am_iomaster1_isr>:
void iom_isr(void) {
   40a98:	b510      	push	{r4, lr}
    uint32_t foo = am_hal_iom_interrupt_status_get(ns_spi_config.iomHandle, true, &ui32Status);
   40a9a:	4c0d      	ldr	r4, [pc, #52]	@ (40ad0 <am_iomaster1_isr+0x38>)
void iom_isr(void) {
   40a9c:	b082      	sub	sp, #8
    uint32_t foo = am_hal_iom_interrupt_status_get(ns_spi_config.iomHandle, true, &ui32Status);
   40a9e:	aa01      	add	r2, sp, #4
   40aa0:	2101      	movs	r1, #1
   40aa2:	6860      	ldr	r0, [r4, #4]
   40aa4:	f000 fdfc 	bl	416a0 <am_hal_iom_interrupt_status_get>
    if (!am_hal_iom_interrupt_status_get(ns_spi_config.iomHandle, true, &ui32Status)) {
   40aa8:	6860      	ldr	r0, [r4, #4]
   40aaa:	aa01      	add	r2, sp, #4
   40aac:	2101      	movs	r1, #1
   40aae:	f000 fdf7 	bl	416a0 <am_hal_iom_interrupt_status_get>
   40ab2:	b908      	cbnz	r0, 40ab8 <am_iomaster1_isr+0x20>
        if (ui32Status) {
   40ab4:	9901      	ldr	r1, [sp, #4]
   40ab6:	b909      	cbnz	r1, 40abc <am_iomaster1_isr+0x24>
}
   40ab8:	b002      	add	sp, #8
   40aba:	bd10      	pop	{r4, pc}
            am_hal_iom_interrupt_clear(ns_spi_config.iomHandle, ui32Status);
   40abc:	6860      	ldr	r0, [r4, #4]
   40abe:	f000 fe13 	bl	416e8 <am_hal_iom_interrupt_clear>
            am_hal_iom_interrupt_service(ns_spi_config.iomHandle, ui32Status);
   40ac2:	9901      	ldr	r1, [sp, #4]
   40ac4:	6860      	ldr	r0, [r4, #4]
   40ac6:	f000 fe23 	bl	41710 <am_hal_iom_interrupt_service>
}
   40aca:	b002      	add	sp, #8
   40acc:	bd10      	pop	{r4, pc}
   40ace:	bf00      	nop
   40ad0:	10057858 	.word	0x10057858

00040ad4 <ns_spi_interface_init>:
uint32_t ns_spi_interface_init(ns_spi_config_t *cfg, uint32_t speed, am_hal_iom_spi_mode_e mode) {
   40ad4:	b570      	push	{r4, r5, r6, lr}
   40ad6:	4604      	mov	r4, r0
    cfg->sIomCfg.eInterfaceMode = AM_HAL_IOM_SPI_MODE;
   40ad8:	2300      	movs	r3, #0
    cfg->sIomCfg.ui32NBTxnBufLength = sizeof(ns_spi_tcb_command_buffer) / sizeof(uint32_t);
   40ada:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
    cfg->sIomCfg.pNBTxnBuf = ns_spi_tcb_command_buffer;
   40ade:	4d1c      	ldr	r5, [pc, #112]	@ (40b50 <ns_spi_interface_init+0x7c>)
    cfg->sIomCfg.ui32NBTxnBufLength = sizeof(ns_spi_tcb_command_buffer) / sizeof(uint32_t);
   40ae0:	61a0      	str	r0, [r4, #24]
    cfg->sIomCfg.ui32ClockFreq = speed;
   40ae2:	60e1      	str	r1, [r4, #12]
    am_bsp_iom_pins_enable(cfg->iom, AM_HAL_IOM_SPI_MODE);
   40ae4:	f994 0000 	ldrsb.w	r0, [r4]
    cfg->sIomCfg.eInterfaceMode = AM_HAL_IOM_SPI_MODE;
   40ae8:	7223      	strb	r3, [r4, #8]
    am_bsp_iom_pins_enable(cfg->iom, AM_HAL_IOM_SPI_MODE);
   40aea:	4619      	mov	r1, r3
    cfg->sIomCfg.eSpiMode = mode;
   40aec:	7422      	strb	r2, [r4, #16]
    cfg->sIomCfg.pNBTxnBuf = ns_spi_tcb_command_buffer;
   40aee:	6165      	str	r5, [r4, #20]
    am_bsp_iom_pins_enable(cfg->iom, AM_HAL_IOM_SPI_MODE);
   40af0:	f7f6 ff3e 	bl	37970 <am_bsp_iom_pins_enable>
    if (am_hal_iom_initialize(cfg->iom, &(cfg->iomHandle)) ||
   40af4:	4621      	mov	r1, r4
   40af6:	f911 0b04 	ldrsb.w	r0, [r1], #4
   40afa:	f000 fd31 	bl	41560 <am_hal_iom_initialize>
   40afe:	b110      	cbz	r0, 40b06 <ns_spi_interface_init+0x32>
        return NS_SPI_STATUS_ERROR;
   40b00:	2501      	movs	r5, #1
}
   40b02:	4628      	mov	r0, r5
   40b04:	bd70      	pop	{r4, r5, r6, pc}
   40b06:	4602      	mov	r2, r0
        am_hal_iom_power_ctrl(cfg->iomHandle, AM_HAL_SYSCTRL_WAKE, false) ||
   40b08:	4611      	mov	r1, r2
   40b0a:	6860      	ldr	r0, [r4, #4]
   40b0c:	f000 ff88 	bl	41a20 <am_hal_iom_power_ctrl>
    if (am_hal_iom_initialize(cfg->iom, &(cfg->iomHandle)) ||
   40b10:	2800      	cmp	r0, #0
   40b12:	d1f5      	bne.n	40b00 <ns_spi_interface_init+0x2c>
        am_hal_iom_configure(cfg->iomHandle, &(cfg->sIomCfg))) {
   40b14:	6860      	ldr	r0, [r4, #4]
   40b16:	f104 0108 	add.w	r1, r4, #8
   40b1a:	f001 f871 	bl	41c00 <am_hal_iom_configure>
        am_hal_iom_power_ctrl(cfg->iomHandle, AM_HAL_SYSCTRL_WAKE, false) ||
   40b1e:	4605      	mov	r5, r0
   40b20:	2800      	cmp	r0, #0
   40b22:	d1ed      	bne.n	40b00 <ns_spi_interface_init+0x2c>
    am_hal_iom_enable(cfg->iomHandle);
   40b24:	6860      	ldr	r0, [r4, #4]
    memcpy(&ns_spi_config, cfg, sizeof(ns_spi_config_t));
   40b26:	4e0b      	ldr	r6, [pc, #44]	@ (40b54 <ns_spi_interface_init+0x80>)
    am_hal_iom_enable(cfg->iomHandle);
   40b28:	f000 fd42 	bl	415b0 <am_hal_iom_enable>
    memcpy(&ns_spi_config, cfg, sizeof(ns_spi_config_t));
   40b2c:	6820      	ldr	r0, [r4, #0]
   40b2e:	6861      	ldr	r1, [r4, #4]
   40b30:	68a2      	ldr	r2, [r4, #8]
   40b32:	68e3      	ldr	r3, [r4, #12]
   40b34:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   40b36:	69a2      	ldr	r2, [r4, #24]
   40b38:	69e3      	ldr	r3, [r4, #28]
   40b3a:	6920      	ldr	r0, [r4, #16]
   40b3c:	6961      	ldr	r1, [r4, #20]
   40b3e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   40b40:	4b05      	ldr	r3, [pc, #20]	@ (40b58 <ns_spi_interface_init+0x84>)
   40b42:	2280      	movs	r2, #128	@ 0x80
   40b44:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   40b48:	601a      	str	r2, [r3, #0]
}
   40b4a:	4628      	mov	r0, r5
   40b4c:	bd70      	pop	{r4, r5, r6, pc}
   40b4e:	bf00      	nop
   40b50:	10053858 	.word	0x10053858
   40b54:	10057858 	.word	0x10057858
   40b58:	e000e100 	.word	0xe000e100

00040b5c <ns_spi_read>:
    uint32_t csPin) {
   40b5c:	b500      	push	{lr}
   40b5e:	b08d      	sub	sp, #52	@ 0x34
    Transaction.bContinue = false;
   40b60:	2300      	movs	r3, #0
    uint32_t csPin) {
   40b62:	ed9d 7b0e 	vldr	d7, [sp, #56]	@ 0x38
    Transaction.ui32StatusSetClr = 0;
   40b66:	e9cd 3309 	strd	r3, r3, [sp, #36]	@ 0x24
    Transaction.ui32NumBytes = bufLen;
   40b6a:	9204      	str	r2, [sp, #16]
    Transaction.bContinue = false;
   40b6c:	f88d 3020 	strb.w	r3, [sp, #32]
    uint32_t csPin) {
   40b70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
    Transaction.eDirection = AM_HAL_IOM_RX;
   40b74:	f04f 0c01 	mov.w	ip, #1
   40b78:	f88d c014 	strb.w	ip, [sp, #20]
    Transaction.pui32RxBuffer = (uint32_t *)buf;
   40b7c:	9107      	str	r1, [sp, #28]
    Transaction.ui8RepeatCount = 0;
   40b7e:	f44f 7c80 	mov.w	ip, #256	@ 0x100
    err = am_hal_iom_blocking_transfer(cfg->iomHandle, &Transaction);
   40b82:	4669      	mov	r1, sp
   40b84:	6840      	ldr	r0, [r0, #4]
    Transaction.ui8RepeatCount = 0;
   40b86:	f8ad c021 	strh.w	ip, [sp, #33]	@ 0x21
    Transaction.ui64Instr = reg;
   40b8a:	ed8d 7b02 	vstr	d7, [sp, #8]
    Transaction.uPeerInfo.ui32SpiChipSelect = csPin;
   40b8e:	e9cd 3200 	strd	r3, r2, [sp]
    err = am_hal_iom_blocking_transfer(cfg->iomHandle, &Transaction);
   40b92:	f001 f9a1 	bl	41ed8 <am_hal_iom_blocking_transfer>
}
   40b96:	b00d      	add	sp, #52	@ 0x34
   40b98:	f85d fb04 	ldr.w	pc, [sp], #4

00040b9c <ns_spi_read_dma>:

uint32_t ns_spi_read_dma(
    ns_spi_config_t *cfg, const void *buf, uint32_t bufLen, uint64_t reg, uint32_t regLen,
    uint32_t csPin) {
   40b9c:	b510      	push	{r4, lr}
   40b9e:	b08c      	sub	sp, #48	@ 0x30
    uint32_t err;
    am_hal_iom_transfer_t Transaction;
    Transaction.ui8Priority = 1;
    Transaction.ui32InstrLen = regLen;
    Transaction.ui64Instr = reg;
    Transaction.eDirection = AM_HAL_IOM_RX;
   40ba0:	2401      	movs	r4, #1
    uint32_t csPin) {
   40ba2:	ed9d 7b0e 	vldr	d7, [sp, #56]	@ 0x38
    Transaction.eDirection = AM_HAL_IOM_RX;
   40ba6:	f88d 4014 	strb.w	r4, [sp, #20]
    Transaction.ui32NumBytes = bufLen;
    Transaction.pui32RxBuffer = (uint32_t *)buf;
    Transaction.bContinue = false;
    Transaction.ui8RepeatCount = 0;
   40baa:	f44f 7480 	mov.w	r4, #256	@ 0x100
   40bae:	f8ad 4021 	strh.w	r4, [sp, #33]	@ 0x21
    uint32_t csPin) {
   40bb2:	9c10      	ldr	r4, [sp, #64]	@ 0x40
    Transaction.ui32NumBytes = bufLen;
   40bb4:	9204      	str	r2, [sp, #16]
    Transaction.bContinue = false;
   40bb6:	2300      	movs	r3, #0
    Transaction.pui32RxBuffer = (uint32_t *)buf;
   40bb8:	9107      	str	r1, [sp, #28]
    Transaction.ui32InstrLen = regLen;
   40bba:	9401      	str	r4, [sp, #4]
    Transaction.ui32PauseCondition = 0;
    Transaction.ui32StatusSetClr = 0;
    Transaction.uPeerInfo.ui32SpiChipSelect = csPin;
    // ns_lp_printf("SPI Read DMA len of %d to 0x%x\n", bufLen, (uint32_t)buf);
    err = am_hal_iom_nonblocking_transfer(
   40bbc:	6840      	ldr	r0, [r0, #4]
    uint32_t csPin) {
   40bbe:	9c11      	ldr	r4, [sp, #68]	@ 0x44
    err = am_hal_iom_nonblocking_transfer(
   40bc0:	4a0b      	ldr	r2, [pc, #44]	@ (40bf0 <ns_spi_read_dma+0x54>)
    Transaction.bContinue = false;
   40bc2:	f88d 3020 	strb.w	r3, [sp, #32]
    err = am_hal_iom_nonblocking_transfer(
   40bc6:	4669      	mov	r1, sp
    Transaction.ui64Instr = reg;
   40bc8:	ed8d 7b02 	vstr	d7, [sp, #8]
    Transaction.ui32StatusSetClr = 0;
   40bcc:	e9cd 3309 	strd	r3, r3, [sp, #36]	@ 0x24
    Transaction.uPeerInfo.ui32SpiChipSelect = csPin;
   40bd0:	9400      	str	r4, [sp, #0]
    err = am_hal_iom_nonblocking_transfer(
   40bd2:	f001 fb4f 	bl	42274 <am_hal_iom_nonblocking_transfer>
        cfg->iomHandle, &Transaction, ns_spi_dma_read_complete_cb, 0);

    // err = am_hal_iom_blocking_transfer(cfg->iomHandle, &Transaction);
    if (err) {
   40bd6:	b910      	cbnz	r0, 40bde <ns_spi_read_dma+0x42>
        ns_lp_printf("SPI Read DMA Error %d\n", err);
        return err;
    }
    // return NS_SPI_STATUS_SUCCESS;
}
   40bd8:	4620      	mov	r0, r4
   40bda:	b00c      	add	sp, #48	@ 0x30
   40bdc:	bd10      	pop	{r4, pc}
   40bde:	4604      	mov	r4, r0
        ns_lp_printf("SPI Read DMA Error %d\n", err);
   40be0:	4621      	mov	r1, r4
   40be2:	4804      	ldr	r0, [pc, #16]	@ (40bf4 <ns_spi_read_dma+0x58>)
   40be4:	f7eb f9c0 	bl	2bf68 <ns_lp_printf>
}
   40be8:	4620      	mov	r0, r4
   40bea:	b00c      	add	sp, #48	@ 0x30
   40bec:	bd10      	pop	{r4, pc}
   40bee:	bf00      	nop
   40bf0:	00040a89 	.word	0x00040a89
   40bf4:	00044ae4 	.word	0x00044ae4

00040bf8 <ns_spi_write>:

uint32_t ns_spi_write(
    ns_spi_config_t *cfg, const void *buf, uint32_t bufLen, uint64_t reg, uint32_t regLen,
    uint32_t csPin) {
   40bf8:	b500      	push	{lr}
   40bfa:	b08d      	sub	sp, #52	@ 0x34
    am_hal_iom_transfer_t Transaction;
    Transaction.ui8Priority = 1;
    Transaction.ui32InstrLen = regLen;
    Transaction.ui64Instr = reg;
    Transaction.eDirection = AM_HAL_IOM_TX;
   40bfc:	2300      	movs	r3, #0
    uint32_t csPin) {
   40bfe:	ed9d 7b0e 	vldr	d7, [sp, #56]	@ 0x38
    Transaction.ui32NumBytes = bufLen;
    Transaction.pui32TxBuffer = (uint32_t *)buf;
    Transaction.bContinue = false;
    Transaction.ui8RepeatCount = 0;
    Transaction.ui32PauseCondition = 0;
    Transaction.ui32StatusSetClr = 0;
   40c02:	e9cd 3309 	strd	r3, r3, [sp, #36]	@ 0x24
    Transaction.eDirection = AM_HAL_IOM_TX;
   40c06:	f88d 3014 	strb.w	r3, [sp, #20]
    Transaction.ui32NumBytes = bufLen;
   40c0a:	9204      	str	r2, [sp, #16]
    Transaction.bContinue = false;
   40c0c:	f88d 3020 	strb.w	r3, [sp, #32]
    uint32_t csPin) {
   40c10:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
    Transaction.ui8RepeatCount = 0;
   40c14:	f44f 7c80 	mov.w	ip, #256	@ 0x100
    Transaction.pui32TxBuffer = (uint32_t *)buf;
   40c18:	9106      	str	r1, [sp, #24]
    Transaction.uPeerInfo.ui32SpiChipSelect = csPin;
    if (am_hal_iom_blocking_transfer(cfg->iomHandle, &Transaction)) {
   40c1a:	6840      	ldr	r0, [r0, #4]
    Transaction.ui8RepeatCount = 0;
   40c1c:	f8ad c021 	strh.w	ip, [sp, #33]	@ 0x21
    if (am_hal_iom_blocking_transfer(cfg->iomHandle, &Transaction)) {
   40c20:	4669      	mov	r1, sp
    Transaction.ui64Instr = reg;
   40c22:	ed8d 7b02 	vstr	d7, [sp, #8]
    Transaction.uPeerInfo.ui32SpiChipSelect = csPin;
   40c26:	e9cd 3200 	strd	r3, r2, [sp]
    if (am_hal_iom_blocking_transfer(cfg->iomHandle, &Transaction)) {
   40c2a:	f001 f955 	bl	41ed8 <am_hal_iom_blocking_transfer>
        return NS_SPI_STATUS_ERROR;
    }
    return NS_SPI_STATUS_SUCCESS;
}
   40c2e:	3800      	subs	r0, #0
   40c30:	bf18      	it	ne
   40c32:	2001      	movne	r0, #1
   40c34:	b00d      	add	sp, #52	@ 0x34
   40c36:	f85d fb04 	ldr.w	pc, [sp], #4
   40c3a:	bf00      	nop

00040c3c <am_hal_dcu_get>:
   40c3c:	b510      	push	{r4, lr}
   40c3e:	b082      	sub	sp, #8
   40c40:	4b1d      	ldr	r3, [pc, #116]	@ (40cb8 <am_hal_dcu_get+0x7c>)
   40c42:	9001      	str	r0, [sp, #4]
   40c44:	689b      	ldr	r3, [r3, #8]
   40c46:	02da      	lsls	r2, r3, #11
   40c48:	d532      	bpl.n	40cb0 <am_hal_dcu_get+0x74>
   40c4a:	4b1c      	ldr	r3, [pc, #112]	@ (40cbc <am_hal_dcu_get+0x80>)
   40c4c:	f8d3 3a7c 	ldr.w	r3, [r3, #2684]	@ 0xa7c
   40c50:	07db      	lsls	r3, r3, #31
   40c52:	d52d      	bpl.n	40cb0 <am_hal_dcu_get+0x74>
   40c54:	4a1a      	ldr	r2, [pc, #104]	@ (40cc0 <am_hal_dcu_get+0x84>)
   40c56:	4b1b      	ldr	r3, [pc, #108]	@ (40cc4 <am_hal_dcu_get+0x88>)
   40c58:	6812      	ldr	r2, [r2, #0]
   40c5a:	4686      	mov	lr, r0
   40c5c:	6818      	ldr	r0, [r3, #0]
   40c5e:	6813      	ldr	r3, [r2, #0]
   40c60:	6851      	ldr	r1, [r2, #4]
   40c62:	f1c0 0220 	rsb	r2, r0, #32
   40c66:	fa01 f202 	lsl.w	r2, r1, r2
   40c6a:	40c3      	lsrs	r3, r0
   40c6c:	4313      	orrs	r3, r2
   40c6e:	f1a0 0220 	sub.w	r2, r0, #32
   40c72:	fa21 f202 	lsr.w	r2, r1, r2
   40c76:	4313      	orrs	r3, r2
   40c78:	2200      	movs	r2, #0
   40c7a:	40c1      	lsrs	r1, r0
   40c7c:	4614      	mov	r4, r2
   40c7e:	f04f 0c01 	mov.w	ip, #1
   40c82:	f003 0007 	and.w	r0, r3, #7
   40c86:	2805      	cmp	r0, #5
   40c88:	bf08      	it	eq
   40c8a:	fa0c f002 	lsleq.w	r0, ip, r2
   40c8e:	f102 0201 	add.w	r2, r2, #1
   40c92:	ea4f 03d3 	mov.w	r3, r3, lsr #3
   40c96:	bf08      	it	eq
   40c98:	4304      	orreq	r4, r0
   40c9a:	2a14      	cmp	r2, #20
   40c9c:	ea43 7341 	orr.w	r3, r3, r1, lsl #29
   40ca0:	ea4f 01d1 	mov.w	r1, r1, lsr #3
   40ca4:	d1ed      	bne.n	40c82 <am_hal_dcu_get+0x46>
   40ca6:	2000      	movs	r0, #0
   40ca8:	f8ce 4000 	str.w	r4, [lr]
   40cac:	b002      	add	sp, #8
   40cae:	bd10      	pop	{r4, pc}
   40cb0:	2007      	movs	r0, #7
   40cb2:	b002      	add	sp, #8
   40cb4:	bd10      	pop	{r4, pc}
   40cb6:	bf00      	nop
   40cb8:	40021000 	.word	0x40021000
   40cbc:	400c0000 	.word	0x400c0000
   40cc0:	1000dc70 	.word	0x1000dc70
   40cc4:	10057878 	.word	0x10057878

00040cc8 <am_hal_dcu_update>:
   40cc8:	4b26      	ldr	r3, [pc, #152]	@ (40d64 <am_hal_dcu_update+0x9c>)
   40cca:	689b      	ldr	r3, [r3, #8]
   40ccc:	02db      	lsls	r3, r3, #11
   40cce:	d543      	bpl.n	40d58 <am_hal_dcu_update+0x90>
   40cd0:	4b25      	ldr	r3, [pc, #148]	@ (40d68 <am_hal_dcu_update+0xa0>)
   40cd2:	f8d3 3a7c 	ldr.w	r3, [r3, #2684]	@ 0xa7c
   40cd6:	07da      	lsls	r2, r3, #31
   40cd8:	d53e      	bpl.n	40d58 <am_hal_dcu_update+0x90>
   40cda:	4b24      	ldr	r3, [pc, #144]	@ (40d6c <am_hal_dcu_update+0xa4>)
   40cdc:	681b      	ldr	r3, [r3, #0]
   40cde:	b5f0      	push	{r4, r5, r6, r7, lr}
   40ce0:	2500      	movs	r5, #0
   40ce2:	0849      	lsrs	r1, r1, #1
   40ce4:	f103 073c 	add.w	r7, r3, #60	@ 0x3c
   40ce8:	462e      	mov	r6, r5
   40cea:	2407      	movs	r4, #7
   40cec:	f011 0f01 	tst.w	r1, #1
   40cf0:	f1a3 0220 	sub.w	r2, r3, #32
   40cf4:	ea4f 0151 	mov.w	r1, r1, lsr #1
   40cf8:	f1c3 0c20 	rsb	ip, r3, #32
   40cfc:	d00a      	beq.n	40d14 <am_hal_dcu_update+0x4c>
   40cfe:	fa04 f202 	lsl.w	r2, r4, r2
   40d02:	fa24 fc0c 	lsr.w	ip, r4, ip
   40d06:	fa04 fe03 	lsl.w	lr, r4, r3
   40d0a:	ea42 020c 	orr.w	r2, r2, ip
   40d0e:	ea4e 0505 	orr.w	r5, lr, r5
   40d12:	4316      	orrs	r6, r2
   40d14:	3303      	adds	r3, #3
   40d16:	429f      	cmp	r7, r3
   40d18:	d1e8      	bne.n	40cec <am_hal_dcu_update+0x24>
   40d1a:	4b15      	ldr	r3, [pc, #84]	@ (40d70 <am_hal_dcu_update+0xa8>)
   40d1c:	681b      	ldr	r3, [r3, #0]
   40d1e:	681a      	ldr	r2, [r3, #0]
   40d20:	685b      	ldr	r3, [r3, #4]
   40d22:	402a      	ands	r2, r5
   40d24:	4033      	ands	r3, r6
   40d26:	4313      	orrs	r3, r2
   40d28:	d11a      	bne.n	40d60 <am_hal_dcu_update+0x98>
   40d2a:	4b12      	ldr	r3, [pc, #72]	@ (40d74 <am_hal_dcu_update+0xac>)
   40d2c:	681b      	ldr	r3, [r3, #0]
   40d2e:	6819      	ldr	r1, [r3, #0]
   40d30:	685a      	ldr	r2, [r3, #4]
   40d32:	b198      	cbz	r0, 40d5c <am_hal_dcu_update+0x94>
   40d34:	4810      	ldr	r0, [pc, #64]	@ (40d78 <am_hal_dcu_update+0xb0>)
   40d36:	e9d0 4000 	ldrd	r4, r0, [r0]
   40d3a:	404c      	eors	r4, r1
   40d3c:	4050      	eors	r0, r2
   40d3e:	4025      	ands	r5, r4
   40d40:	4006      	ands	r6, r0
   40d42:	4056      	eors	r6, r2
   40d44:	4069      	eors	r1, r5
   40d46:	4a08      	ldr	r2, [pc, #32]	@ (40d68 <am_hal_dcu_update+0xa0>)
   40d48:	6019      	str	r1, [r3, #0]
   40d4a:	605e      	str	r6, [r3, #4]
   40d4c:	f8d2 3a7c 	ldr.w	r3, [r2, #2684]	@ 0xa7c
   40d50:	07db      	lsls	r3, r3, #31
   40d52:	d5fb      	bpl.n	40d4c <am_hal_dcu_update+0x84>
   40d54:	2000      	movs	r0, #0
   40d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
   40d58:	2007      	movs	r0, #7
   40d5a:	4770      	bx	lr
   40d5c:	4807      	ldr	r0, [pc, #28]	@ (40d7c <am_hal_dcu_update+0xb4>)
   40d5e:	e7ea      	b.n	40d36 <am_hal_dcu_update+0x6e>
   40d60:	2007      	movs	r0, #7
   40d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
   40d64:	40021000 	.word	0x40021000
   40d68:	400c0000 	.word	0x400c0000
   40d6c:	10057878 	.word	0x10057878
   40d70:	1000dc74 	.word	0x1000dc74
   40d74:	1000dc70 	.word	0x1000dc70
   40d78:	1000dc68 	.word	0x1000dc68
   40d7c:	1000dc60 	.word	0x1000dc60

00040d80 <iom_dummy_callback>:
   40d80:	4770      	bx	lr
   40d82:	bf00      	nop

00040d84 <internal_iom_find_pins>:
   40d84:	b570      	push	{r4, r5, r6, lr}
   40d86:	4b31      	ldr	r3, [pc, #196]	@ (40e4c <internal_iom_find_pins+0xc8>)
   40d88:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   40d8c:	2a00      	cmp	r2, #0
   40d8e:	d034      	beq.n	40dfa <internal_iom_find_pins+0x76>
   40d90:	eb03 0040 	add.w	r0, r3, r0, lsl #1
   40d94:	f64f 7eff 	movw	lr, #65535	@ 0xffff
   40d98:	8842      	ldrh	r2, [r0, #2]
   40d9a:	0915      	lsrs	r5, r2, #4
   40d9c:	00ab      	lsls	r3, r5, #2
   40d9e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
   40da2:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
   40da6:	f002 0c0f 	and.w	ip, r2, #15
   40daa:	681e      	ldr	r6, [r3, #0]
   40dac:	88c3      	ldrh	r3, [r0, #6]
   40dae:	8900      	ldrh	r0, [r0, #8]
   40db0:	091c      	lsrs	r4, r3, #4
   40db2:	f003 020f 	and.w	r2, r3, #15
   40db6:	00a3      	lsls	r3, r4, #2
   40db8:	f006 060f 	and.w	r6, r6, #15
   40dbc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
   40dc0:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
   40dc4:	4566      	cmp	r6, ip
   40dc6:	bf18      	it	ne
   40dc8:	4675      	movne	r5, lr
   40dca:	600d      	str	r5, [r1, #0]
   40dcc:	681b      	ldr	r3, [r3, #0]
   40dce:	f003 030f 	and.w	r3, r3, #15
   40dd2:	4293      	cmp	r3, r2
   40dd4:	bf18      	it	ne
   40dd6:	4674      	movne	r4, lr
   40dd8:	0902      	lsrs	r2, r0, #4
   40dda:	0093      	lsls	r3, r2, #2
   40ddc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
   40de0:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
   40de4:	604c      	str	r4, [r1, #4]
   40de6:	681b      	ldr	r3, [r3, #0]
   40de8:	f000 000f 	and.w	r0, r0, #15
   40dec:	f003 030f 	and.w	r3, r3, #15
   40df0:	4283      	cmp	r3, r0
   40df2:	bf18      	it	ne
   40df4:	4672      	movne	r2, lr
   40df6:	608a      	str	r2, [r1, #8]
   40df8:	bd70      	pop	{r4, r5, r6, pc}
   40dfa:	f833 c010 	ldrh.w	ip, [r3, r0, lsl #1]
   40dfe:	ea4f 141c 	mov.w	r4, ip, lsr #4
   40e02:	eb03 0040 	add.w	r0, r3, r0, lsl #1
   40e06:	00a3      	lsls	r3, r4, #2
   40e08:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
   40e0c:	f64f 75ff 	movw	r5, #65535	@ 0xffff
   40e10:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
   40e14:	608d      	str	r5, [r1, #8]
   40e16:	681b      	ldr	r3, [r3, #0]
   40e18:	8880      	ldrh	r0, [r0, #4]
   40e1a:	f003 030f 	and.w	r3, r3, #15
   40e1e:	0902      	lsrs	r2, r0, #4
   40e20:	f00c 0c0f 	and.w	ip, ip, #15
   40e24:	4563      	cmp	r3, ip
   40e26:	bf18      	it	ne
   40e28:	462c      	movne	r4, r5
   40e2a:	0093      	lsls	r3, r2, #2
   40e2c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
   40e30:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
   40e34:	600c      	str	r4, [r1, #0]
   40e36:	681b      	ldr	r3, [r3, #0]
   40e38:	f000 000f 	and.w	r0, r0, #15
   40e3c:	f003 030f 	and.w	r3, r3, #15
   40e40:	4283      	cmp	r3, r0
   40e42:	bf18      	it	ne
   40e44:	462a      	movne	r2, r5
   40e46:	604a      	str	r2, [r1, #4]
   40e48:	bd70      	pop	{r4, r5, r6, pc}
   40e4a:	bf00      	nop
   40e4c:	0004cb90 	.word	0x0004cb90

00040e50 <internal_iom_error_reset_disable_submodule.isra.0>:
   40e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   40e54:	4605      	mov	r5, r0
   40e56:	b08c      	sub	sp, #48	@ 0x30
   40e58:	f8d0 0864 	ldr.w	r0, [r0, #2148]	@ 0x864
   40e5c:	f8d5 8004 	ldr.w	r8, [r5, #4]
   40e60:	2300      	movs	r3, #0
   40e62:	e9cd 3303 	strd	r3, r3, [sp, #12]
   40e66:	9305      	str	r3, [sp, #20]
   40e68:	2800      	cmp	r0, #0
   40e6a:	f000 808c 	beq.w	40f86 <internal_iom_error_reset_disable_submodule.isra.0+0x136>
   40e6e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   40e72:	0046      	lsls	r6, r0, #1
   40e74:	f508 2480 	add.w	r4, r8, #262144	@ 0x40000
   40e78:	3450      	adds	r4, #80	@ 0x50
   40e7a:	0324      	lsls	r4, r4, #12
   40e7c:	2301      	movs	r3, #1
   40e7e:	f8d4 7388 	ldr.w	r7, [r4, #904]	@ 0x388
   40e82:	485f      	ldr	r0, [pc, #380]	@ (41000 <internal_iom_error_reset_disable_submodule.isra.0+0x1b0>)
   40e84:	9300      	str	r3, [sp, #0]
   40e86:	2206      	movs	r2, #6
   40e88:	2304      	movs	r3, #4
   40e8a:	f504 7112 	add.w	r1, r4, #584	@ 0x248
   40e8e:	f7f6 fc29 	bl	376e4 <am_hal_delay_us_status_check>
   40e92:	7a2a      	ldrb	r2, [r5, #8]
   40e94:	fab2 f282 	clz	r2, r2
   40e98:	4640      	mov	r0, r8
   40e9a:	a903      	add	r1, sp, #12
   40e9c:	0952      	lsrs	r2, r2, #5
   40e9e:	f7ff ff71 	bl	40d84 <internal_iom_find_pins>
   40ea2:	7a2b      	ldrb	r3, [r5, #8]
   40ea4:	f8dd 800c 	ldr.w	r8, [sp, #12]
   40ea8:	2b01      	cmp	r3, #1
   40eaa:	bf1c      	itt	ne
   40eac:	f64f 73ff 	movwne	r3, #65535	@ 0xffff
   40eb0:	9305      	strne	r3, [sp, #20]
   40eb2:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
   40eb6:	2b7e      	cmp	r3, #126	@ 0x7e
   40eb8:	bf94      	ite	ls
   40eba:	2301      	movls	r3, #1
   40ebc:	2300      	movhi	r3, #0
   40ebe:	f88d 301c 	strb.w	r3, [sp, #28]
   40ec2:	f240 8093 	bls.w	40fec <internal_iom_error_reset_disable_submodule.isra.0+0x19c>
   40ec6:	f8dd 8010 	ldr.w	r8, [sp, #16]
   40eca:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
   40ece:	2b7e      	cmp	r3, #126	@ 0x7e
   40ed0:	bf94      	ite	ls
   40ed2:	2301      	movls	r3, #1
   40ed4:	2300      	movhi	r3, #0
   40ed6:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
   40eda:	d97d      	bls.n	40fd8 <internal_iom_error_reset_disable_submodule.isra.0+0x188>
   40edc:	f8dd 8014 	ldr.w	r8, [sp, #20]
   40ee0:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
   40ee4:	2b7e      	cmp	r3, #126	@ 0x7e
   40ee6:	bf94      	ite	ls
   40ee8:	2301      	movls	r3, #1
   40eea:	2300      	movhi	r3, #0
   40eec:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
   40ef0:	d968      	bls.n	40fc4 <internal_iom_error_reset_disable_submodule.isra.0+0x174>
   40ef2:	7a2b      	ldrb	r3, [r5, #8]
   40ef4:	f8d4 211c 	ldr.w	r2, [r4, #284]	@ 0x11c
   40ef8:	3b00      	subs	r3, #0
   40efa:	bf18      	it	ne
   40efc:	2301      	movne	r3, #1
   40efe:	f3c2 0242 	ubfx	r2, r2, #1, #3
   40f02:	4293      	cmp	r3, r2
   40f04:	d005      	beq.n	40f12 <internal_iom_error_reset_disable_submodule.isra.0+0xc2>
   40f06:	f8d4 211c 	ldr.w	r2, [r4, #284]	@ 0x11c
   40f0a:	f3c2 1242 	ubfx	r2, r2, #5, #3
   40f0e:	4293      	cmp	r3, r2
   40f10:	d136      	bne.n	40f80 <internal_iom_error_reset_disable_submodule.isra.0+0x130>
   40f12:	2300      	movs	r3, #0
   40f14:	f8c4 311c 	str.w	r3, [r4, #284]	@ 0x11c
   40f18:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
   40f1c:	f36f 0341 	bfc	r3, #1, #1
   40f20:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
   40f24:	f8d4 3388 	ldr.w	r3, [r4, #904]	@ 0x388
   40f28:	f043 0302 	orr.w	r3, r3, #2
   40f2c:	f8c4 3388 	str.w	r3, [r4, #904]	@ 0x388
   40f30:	4630      	mov	r0, r6
   40f32:	f7f6 fb93 	bl	3765c <am_hal_delay_us>
   40f36:	f89d 301c 	ldrb.w	r3, [sp, #28]
   40f3a:	2b00      	cmp	r3, #0
   40f3c:	d139      	bne.n	40fb2 <internal_iom_error_reset_disable_submodule.isra.0+0x162>
   40f3e:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
   40f42:	bb6b      	cbnz	r3, 40fa0 <internal_iom_error_reset_disable_submodule.isra.0+0x150>
   40f44:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
   40f48:	bb2b      	cbnz	r3, 40f96 <internal_iom_error_reset_disable_submodule.isra.0+0x146>
   40f4a:	f8c4 7388 	str.w	r7, [r4, #904]	@ 0x388
   40f4e:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
   40f52:	f043 0302 	orr.w	r3, r3, #2
   40f56:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
   40f5a:	7a2b      	ldrb	r3, [r5, #8]
   40f5c:	f8d4 211c 	ldr.w	r2, [r4, #284]	@ 0x11c
   40f60:	3b00      	subs	r3, #0
   40f62:	f3c2 0242 	ubfx	r2, r2, #1, #3
   40f66:	bf18      	it	ne
   40f68:	2301      	movne	r3, #1
   40f6a:	4293      	cmp	r3, r2
   40f6c:	d00d      	beq.n	40f8a <internal_iom_error_reset_disable_submodule.isra.0+0x13a>
   40f6e:	f8d4 211c 	ldr.w	r2, [r4, #284]	@ 0x11c
   40f72:	f3c2 1242 	ubfx	r2, r2, #5, #3
   40f76:	4293      	cmp	r3, r2
   40f78:	bf04      	itt	eq
   40f7a:	2310      	moveq	r3, #16
   40f7c:	f8c4 311c 	streq.w	r3, [r4, #284]	@ 0x11c
   40f80:	b00c      	add	sp, #48	@ 0x30
   40f82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   40f86:	2606      	movs	r6, #6
   40f88:	e774      	b.n	40e74 <internal_iom_error_reset_disable_submodule.isra.0+0x24>
   40f8a:	2301      	movs	r3, #1
   40f8c:	f8c4 311c 	str.w	r3, [r4, #284]	@ 0x11c
   40f90:	b00c      	add	sp, #48	@ 0x30
   40f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   40f96:	990a      	ldr	r1, [sp, #40]	@ 0x28
   40f98:	9805      	ldr	r0, [sp, #20]
   40f9a:	f7f5 f885 	bl	360a8 <am_hal_gpio_pinconfig>
   40f9e:	e7d4      	b.n	40f4a <internal_iom_error_reset_disable_submodule.isra.0+0xfa>
   40fa0:	9908      	ldr	r1, [sp, #32]
   40fa2:	9804      	ldr	r0, [sp, #16]
   40fa4:	f7f5 f880 	bl	360a8 <am_hal_gpio_pinconfig>
   40fa8:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
   40fac:	2b00      	cmp	r3, #0
   40fae:	d0cc      	beq.n	40f4a <internal_iom_error_reset_disable_submodule.isra.0+0xfa>
   40fb0:	e7f1      	b.n	40f96 <internal_iom_error_reset_disable_submodule.isra.0+0x146>
   40fb2:	9906      	ldr	r1, [sp, #24]
   40fb4:	9803      	ldr	r0, [sp, #12]
   40fb6:	f7f5 f877 	bl	360a8 <am_hal_gpio_pinconfig>
   40fba:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
   40fbe:	2b00      	cmp	r3, #0
   40fc0:	d0c0      	beq.n	40f44 <internal_iom_error_reset_disable_submodule.isra.0+0xf4>
   40fc2:	e7ed      	b.n	40fa0 <internal_iom_error_reset_disable_submodule.isra.0+0x150>
   40fc4:	a90a      	add	r1, sp, #40	@ 0x28
   40fc6:	4640      	mov	r0, r8
   40fc8:	f7f5 f85e 	bl	36088 <am_hal_gpio_pinconfig_get>
   40fcc:	4b0d      	ldr	r3, [pc, #52]	@ (41004 <internal_iom_error_reset_disable_submodule.isra.0+0x1b4>)
   40fce:	4640      	mov	r0, r8
   40fd0:	6819      	ldr	r1, [r3, #0]
   40fd2:	f7f5 f869 	bl	360a8 <am_hal_gpio_pinconfig>
   40fd6:	e78c      	b.n	40ef2 <internal_iom_error_reset_disable_submodule.isra.0+0xa2>
   40fd8:	a908      	add	r1, sp, #32
   40fda:	4640      	mov	r0, r8
   40fdc:	f7f5 f854 	bl	36088 <am_hal_gpio_pinconfig_get>
   40fe0:	4b08      	ldr	r3, [pc, #32]	@ (41004 <internal_iom_error_reset_disable_submodule.isra.0+0x1b4>)
   40fe2:	4640      	mov	r0, r8
   40fe4:	6819      	ldr	r1, [r3, #0]
   40fe6:	f7f5 f85f 	bl	360a8 <am_hal_gpio_pinconfig>
   40fea:	e777      	b.n	40edc <internal_iom_error_reset_disable_submodule.isra.0+0x8c>
   40fec:	a906      	add	r1, sp, #24
   40fee:	4640      	mov	r0, r8
   40ff0:	f7f5 f84a 	bl	36088 <am_hal_gpio_pinconfig_get>
   40ff4:	4b03      	ldr	r3, [pc, #12]	@ (41004 <internal_iom_error_reset_disable_submodule.isra.0+0x1b4>)
   40ff6:	4640      	mov	r0, r8
   40ff8:	6819      	ldr	r1, [r3, #0]
   40ffa:	f7f5 f855 	bl	360a8 <am_hal_gpio_pinconfig>
   40ffe:	e762      	b.n	40ec6 <internal_iom_error_reset_disable_submodule.isra.0+0x76>
   41000:	0007a120 	.word	0x0007a120
   41004:	0004bc60 	.word	0x0004bc60

00041008 <internal_iom_reset_on_error>:
   41008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4100c:	6845      	ldr	r5, [r0, #4]
   4100e:	f505 2580 	add.w	r5, r5, #262144	@ 0x40000
   41012:	3550      	adds	r5, #80	@ 0x50
   41014:	032d      	lsls	r5, r5, #12
   41016:	2300      	movs	r3, #0
   41018:	f8d5 7200 	ldr.w	r7, [r5, #512]	@ 0x200
   4101c:	f8c5 3200 	str.w	r3, [r5, #512]	@ 0x200
   41020:	050b      	lsls	r3, r1, #20
   41022:	b08d      	sub	sp, #52	@ 0x34
   41024:	4606      	mov	r6, r0
   41026:	460c      	mov	r4, r1
   41028:	d51a      	bpl.n	41060 <internal_iom_reset_on_error+0x58>
   4102a:	f8d5 3218 	ldr.w	r3, [r5, #536]	@ 0x218
   4102e:	0798      	lsls	r0, r3, #30
   41030:	d427      	bmi.n	41082 <internal_iom_reset_on_error+0x7a>
   41032:	f8d5 3248 	ldr.w	r3, [r5, #584]	@ 0x248
   41036:	0799      	lsls	r1, r3, #30
   41038:	f140 8142 	bpl.w	412c0 <internal_iom_reset_on_error+0x2b8>
   4103c:	f8d5 3100 	ldr.w	r3, [r5, #256]	@ 0x100
   41040:	f3c3 4307 	ubfx	r3, r3, #16, #8
   41044:	2b03      	cmp	r3, #3
   41046:	d9f4      	bls.n	41032 <internal_iom_reset_on_error+0x2a>
   41048:	f8d5 3108 	ldr.w	r3, [r5, #264]	@ 0x108
   4104c:	e7f6      	b.n	4103c <internal_iom_reset_on_error+0x34>
   4104e:	2301      	movs	r3, #1
   41050:	9300      	str	r3, [sp, #0]
   41052:	48c5      	ldr	r0, [pc, #788]	@ (41368 <internal_iom_reset_on_error+0x360>)
   41054:	2304      	movs	r3, #4
   41056:	2206      	movs	r2, #6
   41058:	f505 7112 	add.w	r1, r5, #584	@ 0x248
   4105c:	f7f6 fb42 	bl	376e4 <am_hal_delay_us_status_check>
   41060:	f414 7f04 	tst.w	r4, #528	@ 0x210
   41064:	f040 8128 	bne.w	412b8 <internal_iom_reset_on_error+0x2b0>
   41068:	f8d5 3248 	ldr.w	r3, [r5, #584]	@ 0x248
   4106c:	079a      	lsls	r2, r3, #30
   4106e:	d419      	bmi.n	410a4 <internal_iom_reset_on_error+0x9c>
   41070:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
   41074:	f8c5 3208 	str.w	r3, [r5, #520]	@ 0x208
   41078:	f8c5 7200 	str.w	r7, [r5, #512]	@ 0x200
   4107c:	b00d      	add	sp, #52	@ 0x34
   4107e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41082:	f8d5 221c 	ldr.w	r2, [r5, #540]	@ 0x21c
   41086:	49b9      	ldr	r1, [pc, #740]	@ (4136c <internal_iom_reset_on_error+0x364>)
   41088:	2a00      	cmp	r2, #0
   4108a:	d0e0      	beq.n	4104e <internal_iom_reset_on_error+0x46>
   4108c:	f8d5 3100 	ldr.w	r3, [r5, #256]	@ 0x100
   41090:	f3c3 2307 	ubfx	r3, r3, #8, #8
   41094:	2b03      	cmp	r3, #3
   41096:	d9f9      	bls.n	4108c <internal_iom_reset_on_error+0x84>
   41098:	2a04      	cmp	r2, #4
   4109a:	f8c5 110c 	str.w	r1, [r5, #268]	@ 0x10c
   4109e:	d9d6      	bls.n	4104e <internal_iom_reset_on_error+0x46>
   410a0:	3a04      	subs	r2, #4
   410a2:	e7f1      	b.n	41088 <internal_iom_reset_on_error+0x80>
   410a4:	6870      	ldr	r0, [r6, #4]
   410a6:	f8d6 2864 	ldr.w	r2, [r6, #2148]	@ 0x864
   410aa:	f500 2480 	add.w	r4, r0, #262144	@ 0x40000
   410ae:	3450      	adds	r4, #80	@ 0x50
   410b0:	0324      	lsls	r4, r4, #12
   410b2:	2300      	movs	r3, #0
   410b4:	f8d4 912c 	ldr.w	r9, [r4, #300]	@ 0x12c
   410b8:	9305      	str	r3, [sp, #20]
   410ba:	e9cd 3303 	strd	r3, r3, [sp, #12]
   410be:	f009 0a1f 	and.w	sl, r9, #31
   410c2:	2a00      	cmp	r2, #0
   410c4:	f040 8118 	bne.w	412f8 <internal_iom_reset_on_error+0x2f0>
   410c8:	f04f 0806 	mov.w	r8, #6
   410cc:	7a32      	ldrb	r2, [r6, #8]
   410ce:	fab2 f282 	clz	r2, r2
   410d2:	a903      	add	r1, sp, #12
   410d4:	0952      	lsrs	r2, r2, #5
   410d6:	f7ff fe55 	bl	40d84 <internal_iom_find_pins>
   410da:	7a33      	ldrb	r3, [r6, #8]
   410dc:	f8dd b00c 	ldr.w	fp, [sp, #12]
   410e0:	2b01      	cmp	r3, #1
   410e2:	bf1c      	itt	ne
   410e4:	f64f 73ff 	movwne	r3, #65535	@ 0xffff
   410e8:	9305      	strne	r3, [sp, #20]
   410ea:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
   410ee:	2b7e      	cmp	r3, #126	@ 0x7e
   410f0:	bf94      	ite	ls
   410f2:	2301      	movls	r3, #1
   410f4:	2300      	movhi	r3, #0
   410f6:	f88d 301c 	strb.w	r3, [sp, #28]
   410fa:	f240 8102 	bls.w	41302 <internal_iom_reset_on_error+0x2fa>
   410fe:	f8dd b010 	ldr.w	fp, [sp, #16]
   41102:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
   41106:	2b7e      	cmp	r3, #126	@ 0x7e
   41108:	bf94      	ite	ls
   4110a:	2301      	movls	r3, #1
   4110c:	2300      	movhi	r3, #0
   4110e:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
   41112:	f240 812f 	bls.w	41374 <internal_iom_reset_on_error+0x36c>
   41116:	f8dd b014 	ldr.w	fp, [sp, #20]
   4111a:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
   4111e:	2b7e      	cmp	r3, #126	@ 0x7e
   41120:	bf94      	ite	ls
   41122:	2301      	movls	r3, #1
   41124:	2300      	movhi	r3, #0
   41126:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
   4112a:	f240 80f4 	bls.w	41316 <internal_iom_reset_on_error+0x30e>
   4112e:	4640      	mov	r0, r8
   41130:	f7f6 fa94 	bl	3765c <am_hal_delay_us>
   41134:	f89d 301c 	ldrb.w	r3, [sp, #28]
   41138:	2b00      	cmp	r3, #0
   4113a:	f040 80fd 	bne.w	41338 <internal_iom_reset_on_error+0x330>
   4113e:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
   41142:	2b00      	cmp	r3, #0
   41144:	f040 8101 	bne.w	4134a <internal_iom_reset_on_error+0x342>
   41148:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
   4114c:	2b00      	cmp	r3, #0
   4114e:	f040 8105 	bne.w	4135c <internal_iom_reset_on_error+0x354>
   41152:	f1ba 0f01 	cmp.w	sl, #1
   41156:	f000 8117 	beq.w	41388 <internal_iom_reset_on_error+0x380>
   4115a:	f24c 3950 	movw	r9, #50000	@ 0xc350
   4115e:	f04f 0800 	mov.w	r8, #0
   41162:	e090      	b.n	41286 <internal_iom_reset_on_error+0x27e>
   41164:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   41168:	f3c3 4307 	ubfx	r3, r3, #16, #8
   4116c:	2b03      	cmp	r3, #3
   4116e:	f240 8084 	bls.w	4127a <internal_iom_reset_on_error+0x272>
   41172:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   41176:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   4117a:	f3c3 4307 	ubfx	r3, r3, #16, #8
   4117e:	2b03      	cmp	r3, #3
   41180:	d97b      	bls.n	4127a <internal_iom_reset_on_error+0x272>
   41182:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   41186:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   4118a:	f3c3 4307 	ubfx	r3, r3, #16, #8
   4118e:	2b03      	cmp	r3, #3
   41190:	d973      	bls.n	4127a <internal_iom_reset_on_error+0x272>
   41192:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   41196:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   4119a:	f3c3 4307 	ubfx	r3, r3, #16, #8
   4119e:	2b03      	cmp	r3, #3
   411a0:	d96b      	bls.n	4127a <internal_iom_reset_on_error+0x272>
   411a2:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   411a6:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   411aa:	f3c3 4307 	ubfx	r3, r3, #16, #8
   411ae:	2b03      	cmp	r3, #3
   411b0:	d963      	bls.n	4127a <internal_iom_reset_on_error+0x272>
   411b2:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   411b6:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   411ba:	f3c3 4307 	ubfx	r3, r3, #16, #8
   411be:	2b03      	cmp	r3, #3
   411c0:	d95b      	bls.n	4127a <internal_iom_reset_on_error+0x272>
   411c2:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   411c6:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   411ca:	f3c3 4307 	ubfx	r3, r3, #16, #8
   411ce:	2b03      	cmp	r3, #3
   411d0:	d953      	bls.n	4127a <internal_iom_reset_on_error+0x272>
   411d2:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   411d6:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   411da:	f3c3 4307 	ubfx	r3, r3, #16, #8
   411de:	2b03      	cmp	r3, #3
   411e0:	d94b      	bls.n	4127a <internal_iom_reset_on_error+0x272>
   411e2:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   411e6:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   411ea:	f3c3 4307 	ubfx	r3, r3, #16, #8
   411ee:	2b03      	cmp	r3, #3
   411f0:	d943      	bls.n	4127a <internal_iom_reset_on_error+0x272>
   411f2:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   411f6:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   411fa:	f3c3 4307 	ubfx	r3, r3, #16, #8
   411fe:	2b03      	cmp	r3, #3
   41200:	d93b      	bls.n	4127a <internal_iom_reset_on_error+0x272>
   41202:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   41206:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   4120a:	f3c3 4307 	ubfx	r3, r3, #16, #8
   4120e:	2b03      	cmp	r3, #3
   41210:	d933      	bls.n	4127a <internal_iom_reset_on_error+0x272>
   41212:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   41216:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   4121a:	f3c3 4307 	ubfx	r3, r3, #16, #8
   4121e:	2b03      	cmp	r3, #3
   41220:	d92b      	bls.n	4127a <internal_iom_reset_on_error+0x272>
   41222:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   41226:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   4122a:	f3c3 4307 	ubfx	r3, r3, #16, #8
   4122e:	2b03      	cmp	r3, #3
   41230:	d923      	bls.n	4127a <internal_iom_reset_on_error+0x272>
   41232:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   41236:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   4123a:	f3c3 4307 	ubfx	r3, r3, #16, #8
   4123e:	2b03      	cmp	r3, #3
   41240:	d91b      	bls.n	4127a <internal_iom_reset_on_error+0x272>
   41242:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   41246:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   4124a:	f3c3 4307 	ubfx	r3, r3, #16, #8
   4124e:	2b03      	cmp	r3, #3
   41250:	d913      	bls.n	4127a <internal_iom_reset_on_error+0x272>
   41252:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   41256:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   4125a:	f3c3 4307 	ubfx	r3, r3, #16, #8
   4125e:	2b03      	cmp	r3, #3
   41260:	d90b      	bls.n	4127a <internal_iom_reset_on_error+0x272>
   41262:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   41266:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   4126a:	f3c3 4307 	ubfx	r3, r3, #16, #8
   4126e:	2b03      	cmp	r3, #3
   41270:	d903      	bls.n	4127a <internal_iom_reset_on_error+0x272>
   41272:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   41276:	f04f 0804 	mov.w	r8, #4
   4127a:	2001      	movs	r0, #1
   4127c:	f7f6 f9ee 	bl	3765c <am_hal_delay_us>
   41280:	f1b9 0901 	subs.w	r9, r9, #1
   41284:	d004      	beq.n	41290 <internal_iom_reset_on_error+0x288>
   41286:	f8d4 3248 	ldr.w	r3, [r4, #584]	@ 0x248
   4128a:	079b      	lsls	r3, r3, #30
   4128c:	f53f af6a 	bmi.w	41164 <internal_iom_reset_on_error+0x15c>
   41290:	f1b8 0f00 	cmp.w	r8, #0
   41294:	f47f aeec 	bne.w	41070 <internal_iom_reset_on_error+0x68>
   41298:	2301      	movs	r3, #1
   4129a:	9300      	str	r3, [sp, #0]
   4129c:	4832      	ldr	r0, [pc, #200]	@ (41368 <internal_iom_reset_on_error+0x360>)
   4129e:	2304      	movs	r3, #4
   412a0:	f504 7112 	add.w	r1, r4, #584	@ 0x248
   412a4:	2206      	movs	r2, #6
   412a6:	f7f6 fa1d 	bl	376e4 <am_hal_delay_us_status_check>
   412aa:	2800      	cmp	r0, #0
   412ac:	f47f aee0 	bne.w	41070 <internal_iom_reset_on_error+0x68>
   412b0:	4630      	mov	r0, r6
   412b2:	f7ff fdcd 	bl	40e50 <internal_iom_error_reset_disable_submodule.isra.0>
   412b6:	e6db      	b.n	41070 <internal_iom_reset_on_error+0x68>
   412b8:	4630      	mov	r0, r6
   412ba:	f7ff fdc9 	bl	40e50 <internal_iom_error_reset_disable_submodule.isra.0>
   412be:	e6d3      	b.n	41068 <internal_iom_reset_on_error+0x60>
   412c0:	2301      	movs	r3, #1
   412c2:	9300      	str	r3, [sp, #0]
   412c4:	4828      	ldr	r0, [pc, #160]	@ (41368 <internal_iom_reset_on_error+0x360>)
   412c6:	2304      	movs	r3, #4
   412c8:	2206      	movs	r2, #6
   412ca:	f505 7112 	add.w	r1, r5, #584	@ 0x248
   412ce:	f7f6 fa09 	bl	376e4 <am_hal_delay_us_status_check>
   412d2:	2800      	cmp	r0, #0
   412d4:	f47f aec4 	bne.w	41060 <internal_iom_reset_on_error+0x58>
   412d8:	f8d5 3100 	ldr.w	r3, [r5, #256]	@ 0x100
   412dc:	f3c3 4307 	ubfx	r3, r3, #16, #8
   412e0:	2b03      	cmp	r3, #3
   412e2:	f67f aebd 	bls.w	41060 <internal_iom_reset_on_error+0x58>
   412e6:	f8d5 3108 	ldr.w	r3, [r5, #264]	@ 0x108
   412ea:	f8d5 3100 	ldr.w	r3, [r5, #256]	@ 0x100
   412ee:	f3c3 4307 	ubfx	r3, r3, #16, #8
   412f2:	2b03      	cmp	r3, #3
   412f4:	d8f7      	bhi.n	412e6 <internal_iom_reset_on_error+0x2de>
   412f6:	e6b3      	b.n	41060 <internal_iom_reset_on_error+0x58>
   412f8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   412fc:	ea4f 0842 	mov.w	r8, r2, lsl #1
   41300:	e6e4      	b.n	410cc <internal_iom_reset_on_error+0xc4>
   41302:	a906      	add	r1, sp, #24
   41304:	4658      	mov	r0, fp
   41306:	f7f4 febf 	bl	36088 <am_hal_gpio_pinconfig_get>
   4130a:	4b19      	ldr	r3, [pc, #100]	@ (41370 <internal_iom_reset_on_error+0x368>)
   4130c:	4658      	mov	r0, fp
   4130e:	6819      	ldr	r1, [r3, #0]
   41310:	f7f4 feca 	bl	360a8 <am_hal_gpio_pinconfig>
   41314:	e6f3      	b.n	410fe <internal_iom_reset_on_error+0xf6>
   41316:	a90a      	add	r1, sp, #40	@ 0x28
   41318:	4658      	mov	r0, fp
   4131a:	f7f4 feb5 	bl	36088 <am_hal_gpio_pinconfig_get>
   4131e:	4b14      	ldr	r3, [pc, #80]	@ (41370 <internal_iom_reset_on_error+0x368>)
   41320:	4658      	mov	r0, fp
   41322:	6819      	ldr	r1, [r3, #0]
   41324:	f7f4 fec0 	bl	360a8 <am_hal_gpio_pinconfig>
   41328:	4640      	mov	r0, r8
   4132a:	f7f6 f997 	bl	3765c <am_hal_delay_us>
   4132e:	f89d 301c 	ldrb.w	r3, [sp, #28]
   41332:	2b00      	cmp	r3, #0
   41334:	f43f af03 	beq.w	4113e <internal_iom_reset_on_error+0x136>
   41338:	9906      	ldr	r1, [sp, #24]
   4133a:	9803      	ldr	r0, [sp, #12]
   4133c:	f7f4 feb4 	bl	360a8 <am_hal_gpio_pinconfig>
   41340:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
   41344:	2b00      	cmp	r3, #0
   41346:	f43f aeff 	beq.w	41148 <internal_iom_reset_on_error+0x140>
   4134a:	9908      	ldr	r1, [sp, #32]
   4134c:	9804      	ldr	r0, [sp, #16]
   4134e:	f7f4 feab 	bl	360a8 <am_hal_gpio_pinconfig>
   41352:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
   41356:	2b00      	cmp	r3, #0
   41358:	f43f aefb 	beq.w	41152 <internal_iom_reset_on_error+0x14a>
   4135c:	990a      	ldr	r1, [sp, #40]	@ 0x28
   4135e:	9805      	ldr	r0, [sp, #20]
   41360:	f7f4 fea2 	bl	360a8 <am_hal_gpio_pinconfig>
   41364:	e6f5      	b.n	41152 <internal_iom_reset_on_error+0x14a>
   41366:	bf00      	nop
   41368:	0007a120 	.word	0x0007a120
   4136c:	deadbeef 	.word	0xdeadbeef
   41370:	0004bc60 	.word	0x0004bc60
   41374:	a908      	add	r1, sp, #32
   41376:	4658      	mov	r0, fp
   41378:	f7f4 fe86 	bl	36088 <am_hal_gpio_pinconfig_get>
   4137c:	4b1e      	ldr	r3, [pc, #120]	@ (413f8 <internal_iom_reset_on_error+0x3f0>)
   4137e:	4658      	mov	r0, fp
   41380:	6819      	ldr	r1, [r3, #0]
   41382:	f7f4 fe91 	bl	360a8 <am_hal_gpio_pinconfig>
   41386:	e6c6      	b.n	41116 <internal_iom_reset_on_error+0x10e>
   41388:	f3c9 230b 	ubfx	r3, r9, #8, #12
   4138c:	2b00      	cmp	r3, #0
   4138e:	d083      	beq.n	41298 <internal_iom_reset_on_error+0x290>
   41390:	f8d6 2864 	ldr.w	r2, [r6, #2148]	@ 0x864
   41394:	6876      	ldr	r6, [r6, #4]
   41396:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 413fc <internal_iom_reset_on_error+0x3f4>
   4139a:	461c      	mov	r4, r3
   4139c:	fb02 f303 	mul.w	r3, r2, r3
   413a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   413a4:	ea4f 0883 	mov.w	r8, r3, lsl #2
   413a8:	f506 2680 	add.w	r6, r6, #262144	@ 0x40000
   413ac:	3650      	adds	r6, #80	@ 0x50
   413ae:	f1b8 0f01 	cmp.w	r8, #1
   413b2:	bf38      	it	cc
   413b4:	f04f 0801 	movcc.w	r8, #1
   413b8:	0336      	lsls	r6, r6, #12
   413ba:	f04f 0a00 	mov.w	sl, #0
   413be:	f8d6 3100 	ldr.w	r3, [r6, #256]	@ 0x100
   413c2:	f3c3 2307 	ubfx	r3, r3, #8, #8
   413c6:	2b03      	cmp	r3, #3
   413c8:	d808      	bhi.n	413dc <internal_iom_reset_on_error+0x3d4>
   413ca:	e00b      	b.n	413e4 <internal_iom_reset_on_error+0x3dc>
   413cc:	f8d6 3100 	ldr.w	r3, [r6, #256]	@ 0x100
   413d0:	f3c3 2307 	ubfx	r3, r3, #8, #8
   413d4:	2b03      	cmp	r3, #3
   413d6:	f1a4 0404 	sub.w	r4, r4, #4
   413da:	d903      	bls.n	413e4 <internal_iom_reset_on_error+0x3dc>
   413dc:	2c04      	cmp	r4, #4
   413de:	f8c6 910c 	str.w	r9, [r6, #268]	@ 0x10c
   413e2:	dcf3      	bgt.n	413cc <internal_iom_reset_on_error+0x3c4>
   413e4:	f10a 0a01 	add.w	sl, sl, #1
   413e8:	45d0      	cmp	r8, sl
   413ea:	f4ff ae41 	bcc.w	41070 <internal_iom_reset_on_error+0x68>
   413ee:	2001      	movs	r0, #1
   413f0:	f7f6 f934 	bl	3765c <am_hal_delay_us>
   413f4:	e7e3      	b.n	413be <internal_iom_reset_on_error+0x3b6>
   413f6:	bf00      	nop
   413f8:	0004bc60 	.word	0x0004bc60
   413fc:	deadbeef 	.word	0xdeadbeef

00041400 <am_hal_iom_CQAddTransaction>:
   41400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   41404:	4606      	mov	r6, r0
   41406:	6a40      	ldr	r0, [r0, #36]	@ 0x24
   41408:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
   4140c:	b083      	sub	sp, #12
   4140e:	f000 8093 	beq.w	41538 <am_hal_iom_CQAddTransaction+0x138>
   41412:	460d      	mov	r5, r1
   41414:	4690      	mov	r8, r2
   41416:	461f      	mov	r7, r3
   41418:	f8d6 0828 	ldr.w	r0, [r6, #2088]	@ 0x828
   4141c:	ab01      	add	r3, sp, #4
   4141e:	466a      	mov	r2, sp
   41420:	210b      	movs	r1, #11
   41422:	f001 fcd9 	bl	42dd8 <am_hal_cmdq_alloc_block>
   41426:	2800      	cmp	r0, #0
   41428:	f040 8086 	bne.w	41538 <am_hal_iom_CQAddTransaction+0x138>
   4142c:	e9d5 e902 	ldrd	lr, r9, [r5, #8]
   41430:	6873      	ldr	r3, [r6, #4]
   41432:	9c00      	ldr	r4, [sp, #0]
   41434:	7d2a      	ldrb	r2, [r5, #20]
   41436:	f503 2c80 	add.w	ip, r3, #262144	@ 0x40000
   4143a:	f10c 0c50 	add.w	ip, ip, #80	@ 0x50
   4143e:	ea4f 211e 	mov.w	r1, lr, lsr #8
   41442:	ea4f 3c0c 	mov.w	ip, ip, lsl #12
   41446:	ea41 6109 	orr.w	r1, r1, r9, lsl #24
   4144a:	682b      	ldr	r3, [r5, #0]
   4144c:	6161      	str	r1, [r4, #20]
   4144e:	f50c 7194 	add.w	r1, ip, #296	@ 0x128
   41452:	f8d5 9010 	ldr.w	r9, [r5, #16]
   41456:	6121      	str	r1, [r4, #16]
   41458:	f50c 7131 	add.w	r1, ip, #708	@ 0x2c4
   4145c:	61a1      	str	r1, [r4, #24]
   4145e:	f3c3 0109 	ubfx	r1, r3, #0, #10
   41462:	61e1      	str	r1, [r4, #28]
   41464:	f50c 7107 	add.w	r1, ip, #540	@ 0x21c
   41468:	62a1      	str	r1, [r4, #40]	@ 0x28
   4146a:	f50c 7a06 	add.w	sl, ip, #536	@ 0x218
   4146e:	f50c 7108 	add.w	r1, ip, #544	@ 0x220
   41472:	6260      	str	r0, [r4, #36]	@ 0x24
   41474:	f8c4 902c 	str.w	r9, [r4, #44]	@ 0x2c
   41478:	f8c4 a020 	str.w	sl, [r4, #32]
   4147c:	6321      	str	r1, [r4, #48]	@ 0x30
   4147e:	f895 1022 	ldrb.w	r1, [r5, #34]	@ 0x22
   41482:	0209      	lsls	r1, r1, #8
   41484:	f401 7180 	and.w	r1, r1, #256	@ 0x100
   41488:	2a00      	cmp	r2, #0
   4148a:	d15c      	bne.n	41546 <am_hal_iom_CQAddTransaction+0x146>
   4148c:	f8d5 b018 	ldr.w	fp, [r5, #24]
   41490:	f041 0102 	orr.w	r1, r1, #2
   41494:	e9c4 ba0d 	strd	fp, sl, [r4, #52]	@ 0x34
   41498:	f1b9 0f00 	cmp.w	r9, #0
   4149c:	d001      	beq.n	414a2 <am_hal_iom_CQAddTransaction+0xa2>
   4149e:	f041 0101 	orr.w	r1, r1, #1
   414a2:	63e1      	str	r1, [r4, #60]	@ 0x3c
   414a4:	f50c 7192 	add.w	r1, ip, #292	@ 0x124
   414a8:	6421      	str	r1, [r4, #64]	@ 0x40
   414aa:	7a31      	ldrb	r1, [r6, #8]
   414ac:	2900      	cmp	r1, #0
   414ae:	d147      	bne.n	41540 <am_hal_iom_CQAddTransaction+0x140>
   414b0:	18f1      	adds	r1, r6, r3
   414b2:	051b      	lsls	r3, r3, #20
   414b4:	f891 18a0 	ldrb.w	r1, [r1, #2208]	@ 0x8a0
   414b8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
   414bc:	6461      	str	r1, [r4, #68]	@ 0x44
   414be:	4927      	ldr	r1, [pc, #156]	@ (4155c <am_hal_iom_CQAddTransaction+0x15c>)
   414c0:	ea01 2909 	and.w	r9, r1, r9, lsl #8
   414c4:	ea49 0903 	orr.w	r9, r9, r3
   414c8:	686b      	ldr	r3, [r5, #4]
   414ca:	f895 1020 	ldrb.w	r1, [r5, #32]
   414ce:	011b      	lsls	r3, r3, #4
   414d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
   414d4:	2a01      	cmp	r2, #1
   414d6:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
   414da:	bf0c      	ite	eq
   414dc:	f049 0202 	orreq.w	r2, r9, #2
   414e0:	f049 0201 	orrne.w	r2, r9, #1
   414e4:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
   414e8:	4313      	orrs	r3, r2
   414ea:	64e3      	str	r3, [r4, #76]	@ 0x4c
   414ec:	f8d6 2838 	ldr.w	r2, [r6, #2104]	@ 0x838
   414f0:	6a69      	ldr	r1, [r5, #36]	@ 0x24
   414f2:	f50c 730f 	add.w	r3, ip, #572	@ 0x23c
   414f6:	60a3      	str	r3, [r4, #8]
   414f8:	6023      	str	r3, [r4, #0]
   414fa:	f50c 7390 	add.w	r3, ip, #288	@ 0x120
   414fe:	64a3      	str	r3, [r4, #72]	@ 0x48
   41500:	2a01      	cmp	r2, #1
   41502:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
   41506:	60e3      	str	r3, [r4, #12]
   41508:	d020      	beq.n	4154c <am_hal_iom_CQAddTransaction+0x14c>
   4150a:	2a02      	cmp	r2, #2
   4150c:	d003      	beq.n	41516 <am_hal_iom_CQAddTransaction+0x116>
   4150e:	f441 4300 	orr.w	r3, r1, #32768	@ 0x8000
   41512:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   41516:	f89d 1004 	ldrb.w	r1, [sp, #4]
   4151a:	6063      	str	r3, [r4, #4]
   4151c:	eb06 0181 	add.w	r1, r6, r1, lsl #2
   41520:	6aab      	ldr	r3, [r5, #40]	@ 0x28
   41522:	6563      	str	r3, [r4, #84]	@ 0x54
   41524:	f50c 750e 	add.w	r5, ip, #568	@ 0x238
   41528:	6525      	str	r5, [r4, #80]	@ 0x50
   4152a:	f8c1 8028 	str.w	r8, [r1, #40]	@ 0x28
   4152e:	f8c1 7428 	str.w	r7, [r1, #1064]	@ 0x428
   41532:	b003      	add	sp, #12
   41534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41538:	2005      	movs	r0, #5
   4153a:	b003      	add	sp, #12
   4153c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41540:	2300      	movs	r3, #0
   41542:	4619      	mov	r1, r3
   41544:	e7ba      	b.n	414bc <am_hal_iom_CQAddTransaction+0xbc>
   41546:	f8d5 b01c 	ldr.w	fp, [r5, #28]
   4154a:	e7a3      	b.n	41494 <am_hal_iom_CQAddTransaction+0x94>
   4154c:	f441 4300 	orr.w	r3, r1, #32768	@ 0x8000
   41550:	2202      	movs	r2, #2
   41552:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
   41556:	f8c6 2838 	str.w	r2, [r6, #2104]	@ 0x838
   4155a:	e7dc      	b.n	41516 <am_hal_iom_CQAddTransaction+0x116>
   4155c:	000fff00 	.word	0x000fff00

00041560 <am_hal_iom_initialize>:
   41560:	2807      	cmp	r0, #7
   41562:	d81a      	bhi.n	4159a <am_hal_iom_initialize+0x3a>
   41564:	b1e9      	cbz	r1, 415a2 <am_hal_iom_initialize+0x42>
   41566:	b530      	push	{r4, r5, lr}
   41568:	f640 0ca8 	movw	ip, #2216	@ 0x8a8
   4156c:	4d0e      	ldr	r5, [pc, #56]	@ (415a8 <am_hal_iom_initialize+0x48>)
   4156e:	fb0c fc00 	mul.w	ip, ip, r0
   41572:	eb05 040c 	add.w	r4, r5, ip
   41576:	4602      	mov	r2, r0
   41578:	78e3      	ldrb	r3, [r4, #3]
   4157a:	f013 0301 	ands.w	r3, r3, #1
   4157e:	d10e      	bne.n	4159e <am_hal_iom_initialize+0x3e>
   41580:	4618      	mov	r0, r3
   41582:	f855 300c 	ldr.w	r3, [r5, ip]
   41586:	f003 4e7c 	and.w	lr, r3, #4227858432	@ 0xfc000000
   4158a:	4b08      	ldr	r3, [pc, #32]	@ (415ac <am_hal_iom_initialize+0x4c>)
   4158c:	ea4e 0303 	orr.w	r3, lr, r3
   41590:	f845 300c 	str.w	r3, [r5, ip]
   41594:	6062      	str	r2, [r4, #4]
   41596:	600c      	str	r4, [r1, #0]
   41598:	bd30      	pop	{r4, r5, pc}
   4159a:	2005      	movs	r0, #5
   4159c:	4770      	bx	lr
   4159e:	2007      	movs	r0, #7
   415a0:	bd30      	pop	{r4, r5, pc}
   415a2:	2006      	movs	r0, #6
   415a4:	4770      	bx	lr
   415a6:	bf00      	nop
   415a8:	1005787c 	.word	0x1005787c
   415ac:	01123456 	.word	0x01123456

000415b0 <am_hal_iom_enable>:
   415b0:	2800      	cmp	r0, #0
   415b2:	d06b      	beq.n	4168c <am_hal_iom_enable+0xdc>
   415b4:	b530      	push	{r4, r5, lr}
   415b6:	6803      	ldr	r3, [r0, #0]
   415b8:	4a37      	ldr	r2, [pc, #220]	@ (41698 <am_hal_iom_enable+0xe8>)
   415ba:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   415be:	4293      	cmp	r3, r2
   415c0:	b085      	sub	sp, #20
   415c2:	4604      	mov	r4, r0
   415c4:	d155      	bne.n	41672 <am_hal_iom_enable+0xc2>
   415c6:	78c3      	ldrb	r3, [r0, #3]
   415c8:	079b      	lsls	r3, r3, #30
   415ca:	d455      	bmi.n	41678 <am_hal_iom_enable+0xc8>
   415cc:	6840      	ldr	r0, [r0, #4]
   415ce:	7a23      	ldrb	r3, [r4, #8]
   415d0:	f500 2280 	add.w	r2, r0, #262144	@ 0x40000
   415d4:	3250      	adds	r2, #80	@ 0x50
   415d6:	0311      	lsls	r1, r2, #12
   415d8:	3b00      	subs	r3, #0
   415da:	f8d1 211c 	ldr.w	r2, [r1, #284]	@ 0x11c
   415de:	bf18      	it	ne
   415e0:	2301      	movne	r3, #1
   415e2:	f3c2 0242 	ubfx	r2, r2, #1, #3
   415e6:	4293      	cmp	r3, r2
   415e8:	d04c      	beq.n	41684 <am_hal_iom_enable+0xd4>
   415ea:	f8d1 211c 	ldr.w	r2, [r1, #284]	@ 0x11c
   415ee:	f3c2 1242 	ubfx	r2, r2, #5, #3
   415f2:	4293      	cmp	r3, r2
   415f4:	d143      	bne.n	4167e <am_hal_iom_enable+0xce>
   415f6:	2310      	movs	r3, #16
   415f8:	f8c1 311c 	str.w	r3, [r1, #284]	@ 0x11c
   415fc:	68e3      	ldr	r3, [r4, #12]
   415fe:	b38b      	cbz	r3, 41664 <am_hal_iom_enable+0xb4>
   41600:	4a26      	ldr	r2, [pc, #152]	@ (4169c <am_hal_iom_enable+0xec>)
   41602:	9302      	str	r3, [sp, #8]
   41604:	2300      	movs	r3, #0
   41606:	6263      	str	r3, [r4, #36]	@ 0x24
   41608:	61e3      	str	r3, [r4, #28]
   4160a:	f8c1 2238 	str.w	r2, [r1, #568]	@ 0x238
   4160e:	6922      	ldr	r2, [r4, #16]
   41610:	f8c4 3854 	str.w	r3, [r4, #2132]	@ 0x854
   41614:	0852      	lsrs	r2, r2, #1
   41616:	f44f 7580 	mov.w	r5, #256	@ 0x100
   4161a:	f884 383c 	strb.w	r3, [r4, #2108]	@ 0x83c
   4161e:	f8c4 3838 	str.w	r3, [r4, #2104]	@ 0x838
   41622:	f8c4 3844 	str.w	r3, [r4, #2116]	@ 0x844
   41626:	f8c4 3840 	str.w	r3, [r4, #2112]	@ 0x840
   4162a:	f8c4 3830 	str.w	r3, [r4, #2096]	@ 0x830
   4162e:	f8c4 3828 	str.w	r3, [r4, #2088]	@ 0x828
   41632:	6223      	str	r3, [r4, #32]
   41634:	f8c4 385c 	str.w	r3, [r4, #2140]	@ 0x85c
   41638:	9201      	str	r2, [sp, #4]
   4163a:	2301      	movs	r3, #1
   4163c:	f604 0228 	addw	r2, r4, #2088	@ 0x828
   41640:	b2c0      	uxtb	r0, r0
   41642:	f8a4 582c 	strh.w	r5, [r4, #2092]	@ 0x82c
   41646:	a901      	add	r1, sp, #4
   41648:	f88d 300c 	strb.w	r3, [sp, #12]
   4164c:	f001 fb24 	bl	42c98 <am_hal_cmdq_init>
   41650:	6863      	ldr	r3, [r4, #4]
   41652:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
   41656:	3350      	adds	r3, #80	@ 0x50
   41658:	2202      	movs	r2, #2
   4165a:	031b      	lsls	r3, r3, #12
   4165c:	b9c0      	cbnz	r0, 41690 <am_hal_iom_enable+0xe0>
   4165e:	6225      	str	r5, [r4, #32]
   41660:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
   41664:	78e3      	ldrb	r3, [r4, #3]
   41666:	2000      	movs	r0, #0
   41668:	f043 0302 	orr.w	r3, r3, #2
   4166c:	70e3      	strb	r3, [r4, #3]
   4166e:	b005      	add	sp, #20
   41670:	bd30      	pop	{r4, r5, pc}
   41672:	2002      	movs	r0, #2
   41674:	b005      	add	sp, #20
   41676:	bd30      	pop	{r4, r5, pc}
   41678:	2000      	movs	r0, #0
   4167a:	b005      	add	sp, #20
   4167c:	bd30      	pop	{r4, r5, pc}
   4167e:	2009      	movs	r0, #9
   41680:	b005      	add	sp, #20
   41682:	bd30      	pop	{r4, r5, pc}
   41684:	2301      	movs	r3, #1
   41686:	f8c1 311c 	str.w	r3, [r1, #284]	@ 0x11c
   4168a:	e7b7      	b.n	415fc <am_hal_iom_enable+0x4c>
   4168c:	2002      	movs	r0, #2
   4168e:	4770      	bx	lr
   41690:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
   41694:	e7ee      	b.n	41674 <am_hal_iom_enable+0xc4>
   41696:	bf00      	nop
   41698:	01123456 	.word	0x01123456
   4169c:	00800040 	.word	0x00800040

000416a0 <am_hal_iom_interrupt_status_get>:
   416a0:	b1e0      	cbz	r0, 416dc <am_hal_iom_interrupt_status_get+0x3c>
   416a2:	6803      	ldr	r3, [r0, #0]
   416a4:	b410      	push	{r4}
   416a6:	4c0f      	ldr	r4, [pc, #60]	@ (416e4 <am_hal_iom_interrupt_status_get+0x44>)
   416a8:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   416ac:	42a3      	cmp	r3, r4
   416ae:	d111      	bne.n	416d4 <am_hal_iom_interrupt_status_get+0x34>
   416b0:	b1b2      	cbz	r2, 416e0 <am_hal_iom_interrupt_status_get+0x40>
   416b2:	6843      	ldr	r3, [r0, #4]
   416b4:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
   416b8:	3350      	adds	r3, #80	@ 0x50
   416ba:	031b      	lsls	r3, r3, #12
   416bc:	f8d3 0204 	ldr.w	r0, [r3, #516]	@ 0x204
   416c0:	b921      	cbnz	r1, 416cc <am_hal_iom_interrupt_status_get+0x2c>
   416c2:	6010      	str	r0, [r2, #0]
   416c4:	2000      	movs	r0, #0
   416c6:	f85d 4b04 	ldr.w	r4, [sp], #4
   416ca:	4770      	bx	lr
   416cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
   416d0:	4018      	ands	r0, r3
   416d2:	e7f6      	b.n	416c2 <am_hal_iom_interrupt_status_get+0x22>
   416d4:	2002      	movs	r0, #2
   416d6:	f85d 4b04 	ldr.w	r4, [sp], #4
   416da:	4770      	bx	lr
   416dc:	2002      	movs	r0, #2
   416de:	4770      	bx	lr
   416e0:	2006      	movs	r0, #6
   416e2:	e7f0      	b.n	416c6 <am_hal_iom_interrupt_status_get+0x26>
   416e4:	01123456 	.word	0x01123456

000416e8 <am_hal_iom_interrupt_clear>:
   416e8:	b170      	cbz	r0, 41708 <am_hal_iom_interrupt_clear+0x20>
   416ea:	6803      	ldr	r3, [r0, #0]
   416ec:	4a07      	ldr	r2, [pc, #28]	@ (4170c <am_hal_iom_interrupt_clear+0x24>)
   416ee:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   416f2:	4293      	cmp	r3, r2
   416f4:	d108      	bne.n	41708 <am_hal_iom_interrupt_clear+0x20>
   416f6:	6843      	ldr	r3, [r0, #4]
   416f8:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
   416fc:	3350      	adds	r3, #80	@ 0x50
   416fe:	031b      	lsls	r3, r3, #12
   41700:	2000      	movs	r0, #0
   41702:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
   41706:	4770      	bx	lr
   41708:	2002      	movs	r0, #2
   4170a:	4770      	bx	lr
   4170c:	01123456 	.word	0x01123456

00041710 <am_hal_iom_interrupt_service>:
   41710:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   41714:	b085      	sub	sp, #20
   41716:	2800      	cmp	r0, #0
   41718:	f000 80cb 	beq.w	418b2 <am_hal_iom_interrupt_service+0x1a2>
   4171c:	6803      	ldr	r3, [r0, #0]
   4171e:	4abd      	ldr	r2, [pc, #756]	@ (41a14 <am_hal_iom_interrupt_service+0x304>)
   41720:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   41724:	4293      	cmp	r3, r2
   41726:	4604      	mov	r4, r0
   41728:	f040 80c3 	bne.w	418b2 <am_hal_iom_interrupt_service+0x1a2>
   4172c:	f890 383c 	ldrb.w	r3, [r0, #2108]	@ 0x83c
   41730:	6847      	ldr	r7, [r0, #4]
   41732:	460e      	mov	r6, r1
   41734:	2b00      	cmp	r3, #0
   41736:	f040 80a4 	bne.w	41882 <am_hal_iom_interrupt_service+0x172>
   4173a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
   4173c:	2b00      	cmp	r3, #0
   4173e:	f000 80b3 	beq.w	418a8 <am_hal_iom_interrupt_service+0x198>
   41742:	f8d0 0828 	ldr.w	r0, [r0, #2088]	@ 0x828
   41746:	2800      	cmp	r0, #0
   41748:	f000 808a 	beq.w	41860 <am_hal_iom_interrupt_service+0x150>
   4174c:	4669      	mov	r1, sp
   4174e:	f001 fbf9 	bl	42f44 <am_hal_cmdq_get_status>
   41752:	4605      	mov	r5, r0
   41754:	2800      	cmp	r0, #0
   41756:	f040 8084 	bne.w	41862 <am_hal_iom_interrupt_service+0x152>
   4175a:	f884 0834 	strb.w	r0, [r4, #2100]	@ 0x834
   4175e:	9900      	ldr	r1, [sp, #0]
   41760:	69e3      	ldr	r3, [r4, #28]
   41762:	e011      	b.n	41788 <am_hal_iom_interrupt_service+0x78>
   41764:	f894 2834 	ldrb.w	r2, [r4, #2100]	@ 0x834
   41768:	f002 09ff 	and.w	r9, r2, #255	@ 0xff
   4176c:	b972      	cbnz	r2, 4178c <am_hal_iom_interrupt_service+0x7c>
   4176e:	3301      	adds	r3, #1
   41770:	6a62      	ldr	r2, [r4, #36]	@ 0x24
   41772:	61e3      	str	r3, [r4, #28]
   41774:	b2dd      	uxtb	r5, r3
   41776:	f105 080a 	add.w	r8, r5, #10
   4177a:	3a01      	subs	r2, #1
   4177c:	6262      	str	r2, [r4, #36]	@ 0x24
   4177e:	f854 2028 	ldr.w	r2, [r4, r8, lsl #2]
   41782:	2a00      	cmp	r2, #0
   41784:	f040 811e 	bne.w	419c4 <am_hal_iom_interrupt_service+0x2b4>
   41788:	4299      	cmp	r1, r3
   4178a:	d1eb      	bne.n	41764 <am_hal_iom_interrupt_service+0x54>
   4178c:	f894 2834 	ldrb.w	r2, [r4, #2100]	@ 0x834
   41790:	f002 01ff 	and.w	r1, r2, #255	@ 0xff
   41794:	2a00      	cmp	r2, #0
   41796:	d15f      	bne.n	41858 <am_hal_iom_interrupt_service+0x148>
   41798:	f644 227c 	movw	r2, #19068	@ 0x4a7c
   4179c:	ea16 0902 	ands.w	r9, r6, r2
   417a0:	d05a      	beq.n	41858 <am_hal_iom_interrupt_service+0x148>
   417a2:	3301      	adds	r3, #1
   417a4:	61e3      	str	r3, [r4, #28]
   417a6:	b2db      	uxtb	r3, r3
   417a8:	eb04 0583 	add.w	r5, r4, r3, lsl #2
   417ac:	6a63      	ldr	r3, [r4, #36]	@ 0x24
   417ae:	3b01      	subs	r3, #1
   417b0:	6263      	str	r3, [r4, #36]	@ 0x24
   417b2:	6aab      	ldr	r3, [r5, #40]	@ 0x28
   417b4:	2b00      	cmp	r3, #0
   417b6:	f000 811c 	beq.w	419f2 <am_hal_iom_interrupt_service+0x2e2>
   417ba:	f507 2880 	add.w	r8, r7, #262144	@ 0x40000
   417be:	f108 0850 	add.w	r8, r8, #80	@ 0x50
   417c2:	ea4f 3808 	mov.w	r8, r8, lsl #12
   417c6:	4608      	mov	r0, r1
   417c8:	f7f4 fa76 	bl	35cb8 <am_hal_daxi_control>
   417cc:	f8d8 2204 	ldr.w	r2, [r8, #516]	@ 0x204
   417d0:	6aab      	ldr	r3, [r5, #40]	@ 0x28
   417d2:	f8d5 0428 	ldr.w	r0, [r5, #1064]	@ 0x428
   417d6:	4316      	orrs	r6, r2
   417d8:	f016 0f6c 	tst.w	r6, #108	@ 0x6c
   417dc:	f040 8112 	bne.w	41a04 <am_hal_iom_interrupt_service+0x2f4>
   417e0:	05b2      	lsls	r2, r6, #22
   417e2:	f100 8112 	bmi.w	41a0a <am_hal_iom_interrupt_service+0x2fa>
   417e6:	06f2      	lsls	r2, r6, #27
   417e8:	f100 8111 	bmi.w	41a0e <am_hal_iom_interrupt_service+0x2fe>
   417ec:	f416 4f90 	tst.w	r6, #18432	@ 0x4800
   417f0:	bf14      	ite	ne
   417f2:	2101      	movne	r1, #1
   417f4:	2100      	moveq	r1, #0
   417f6:	4798      	blx	r3
   417f8:	f894 382c 	ldrb.w	r3, [r4, #2092]	@ 0x82c
   417fc:	2b02      	cmp	r3, #2
   417fe:	bf1c      	itt	ne
   41800:	2300      	movne	r3, #0
   41802:	62ab      	strne	r3, [r5, #40]	@ 0x28
   41804:	f8d8 3228 	ldr.w	r3, [r8, #552]	@ 0x228
   41808:	f36f 0300 	bfc	r3, #0, #1
   4180c:	f8c8 3228 	str.w	r3, [r8, #552]	@ 0x228
   41810:	f8d8 3218 	ldr.w	r3, [r8, #536]	@ 0x218
   41814:	f36f 0300 	bfc	r3, #0, #1
   41818:	f8c8 3218 	str.w	r3, [r8, #536]	@ 0x218
   4181c:	2300      	movs	r3, #0
   4181e:	f8c8 3224 	str.w	r3, [r8, #548]	@ 0x224
   41822:	4649      	mov	r1, r9
   41824:	4620      	mov	r0, r4
   41826:	f7ff fbef 	bl	41008 <internal_iom_reset_on_error>
   4182a:	f8d4 0828 	ldr.w	r0, [r4, #2088]	@ 0x828
   4182e:	f001 fbdb 	bl	42fe8 <am_hal_cmdq_error_resume>
   41832:	6a63      	ldr	r3, [r4, #36]	@ 0x24
   41834:	b183      	cbz	r3, 41858 <am_hal_iom_interrupt_service+0x148>
   41836:	6a63      	ldr	r3, [r4, #36]	@ 0x24
   41838:	b953      	cbnz	r3, 41850 <am_hal_iom_interrupt_service+0x140>
   4183a:	6863      	ldr	r3, [r4, #4]
   4183c:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
   41840:	3350      	adds	r3, #80	@ 0x50
   41842:	031b      	lsls	r3, r3, #12
   41844:	f503 720b 	add.w	r2, r3, #556	@ 0x22c
   41848:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
   4184c:	e9c3 2300 	strd	r2, r3, [r3]
   41850:	f8d4 0828 	ldr.w	r0, [r4, #2088]	@ 0x828
   41854:	f001 fa78 	bl	42d48 <am_hal_cmdq_enable>
   41858:	6a65      	ldr	r5, [r4, #36]	@ 0x24
   4185a:	2d00      	cmp	r5, #0
   4185c:	f000 80ad 	beq.w	419ba <am_hal_iom_interrupt_service+0x2aa>
   41860:	2500      	movs	r5, #0
   41862:	6a63      	ldr	r3, [r4, #36]	@ 0x24
   41864:	bb0b      	cbnz	r3, 418aa <am_hal_iom_interrupt_service+0x19a>
   41866:	f507 2780 	add.w	r7, r7, #262144	@ 0x40000
   4186a:	3750      	adds	r7, #80	@ 0x50
   4186c:	033f      	lsls	r7, r7, #12
   4186e:	6962      	ldr	r2, [r4, #20]
   41870:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
   41874:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
   41878:	f8c7 1208 	str.w	r1, [r7, #520]	@ 0x208
   4187c:	f8c7 2200 	str.w	r2, [r7, #512]	@ 0x200
   41880:	e013      	b.n	418aa <am_hal_iom_interrupt_service+0x19a>
   41882:	6981      	ldr	r1, [r0, #24]
   41884:	f640 0301 	movw	r3, #2049	@ 0x801
   41888:	430e      	orrs	r6, r1
   4188a:	421e      	tst	r6, r3
   4188c:	6186      	str	r6, [r0, #24]
   4188e:	d00b      	beq.n	418a8 <am_hal_iom_interrupt_service+0x198>
   41890:	f507 2780 	add.w	r7, r7, #262144	@ 0x40000
   41894:	3750      	adds	r7, #80	@ 0x50
   41896:	033f      	lsls	r7, r7, #12
   41898:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
   4189c:	07db      	lsls	r3, r3, #31
   4189e:	d50d      	bpl.n	418bc <am_hal_iom_interrupt_service+0x1ac>
   418a0:	f644 637c 	movw	r3, #20092	@ 0x4e7c
   418a4:	421e      	tst	r6, r3
   418a6:	d109      	bne.n	418bc <am_hal_iom_interrupt_service+0x1ac>
   418a8:	2500      	movs	r5, #0
   418aa:	4628      	mov	r0, r5
   418ac:	b005      	add	sp, #20
   418ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   418b2:	2502      	movs	r5, #2
   418b4:	4628      	mov	r0, r5
   418b6:	b005      	add	sp, #20
   418b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   418bc:	f8d4 2840 	ldr.w	r2, [r4, #2112]	@ 0x840
   418c0:	f8d4 3850 	ldr.w	r3, [r4, #2128]	@ 0x850
   418c4:	f8d4 5854 	ldr.w	r5, [r4, #2132]	@ 0x854
   418c8:	3a01      	subs	r2, #1
   418ca:	f8c4 2840 	str.w	r2, [r4, #2112]	@ 0x840
   418ce:	f8d4 2848 	ldr.w	r2, [r4, #2120]	@ 0x848
   418d2:	3301      	adds	r3, #1
   418d4:	f8c4 3850 	str.w	r3, [r4, #2128]	@ 0x850
   418d8:	fbb3 f1f2 	udiv	r1, r3, r2
   418dc:	fb02 3311 	mls	r3, r2, r1, r3
   418e0:	eb05 1543 	add.w	r5, r5, r3, lsl #5
   418e4:	69ab      	ldr	r3, [r5, #24]
   418e6:	b1cb      	cbz	r3, 4191c <am_hal_iom_interrupt_service+0x20c>
   418e8:	2100      	movs	r1, #0
   418ea:	4608      	mov	r0, r1
   418ec:	f7f4 f9e4 	bl	35cb8 <am_hal_daxi_control>
   418f0:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
   418f4:	69a1      	ldr	r1, [r4, #24]
   418f6:	430b      	orrs	r3, r1
   418f8:	f013 0f6c 	tst.w	r3, #108	@ 0x6c
   418fc:	e9d5 2006 	ldrd	r2, r0, [r5, #24]
   41900:	d172      	bne.n	419e8 <am_hal_iom_interrupt_service+0x2d8>
   41902:	059e      	lsls	r6, r3, #22
   41904:	d473      	bmi.n	419ee <am_hal_iom_interrupt_service+0x2de>
   41906:	06de      	lsls	r6, r3, #27
   41908:	d47a      	bmi.n	41a00 <am_hal_iom_interrupt_service+0x2f0>
   4190a:	f413 4f90 	tst.w	r3, #18432	@ 0x4800
   4190e:	bf14      	ite	ne
   41910:	2101      	movne	r1, #1
   41912:	2100      	moveq	r1, #0
   41914:	4790      	blx	r2
   41916:	2300      	movs	r3, #0
   41918:	69a6      	ldr	r6, [r4, #24]
   4191a:	61ab      	str	r3, [r5, #24]
   4191c:	f644 217c 	movw	r1, #19068	@ 0x4a7c
   41920:	4031      	ands	r1, r6
   41922:	d111      	bne.n	41948 <am_hal_iom_interrupt_service+0x238>
   41924:	f8d4 5840 	ldr.w	r5, [r4, #2112]	@ 0x840
   41928:	b9dd      	cbnz	r5, 41962 <am_hal_iom_interrupt_service+0x252>
   4192a:	f884 583c 	strb.w	r5, [r4, #2108]	@ 0x83c
   4192e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
   41932:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
   41936:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
   4193a:	f023 0301 	bic.w	r3, r3, #1
   4193e:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
   41942:	f8c7 2238 	str.w	r2, [r7, #568]	@ 0x238
   41946:	e7b0      	b.n	418aa <am_hal_iom_interrupt_service+0x19a>
   41948:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
   4194c:	2200      	movs	r2, #0
   4194e:	f36f 0300 	bfc	r3, #0, #1
   41952:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
   41956:	4620      	mov	r0, r4
   41958:	f8c7 2224 	str.w	r2, [r7, #548]	@ 0x224
   4195c:	f7ff fb54 	bl	41008 <internal_iom_reset_on_error>
   41960:	e7e0      	b.n	41924 <am_hal_iom_interrupt_service+0x214>
   41962:	f8d4 2850 	ldr.w	r2, [r4, #2128]	@ 0x850
   41966:	f8d4 3848 	ldr.w	r3, [r4, #2120]	@ 0x848
   4196a:	3201      	adds	r2, #1
   4196c:	fbb2 f1f3 	udiv	r1, r2, r3
   41970:	fb03 2211 	mls	r2, r3, r1, r2
   41974:	0151      	lsls	r1, r2, #5
   41976:	f8d4 3854 	ldr.w	r3, [r4, #2132]	@ 0x854
   4197a:	5858      	ldr	r0, [r3, r1]
   4197c:	eb03 1242 	add.w	r2, r3, r2, lsl #5
   41980:	6863      	ldr	r3, [r4, #4]
   41982:	6851      	ldr	r1, [r2, #4]
   41984:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
   41988:	3350      	adds	r3, #80	@ 0x50
   4198a:	031b      	lsls	r3, r3, #12
   4198c:	2500      	movs	r5, #0
   4198e:	f8c7 5224 	str.w	r5, [r7, #548]	@ 0x224
   41992:	61a5      	str	r5, [r4, #24]
   41994:	f8c3 0128 	str.w	r0, [r3, #296]	@ 0x128
   41998:	f8c3 12c4 	str.w	r1, [r3, #708]	@ 0x2c4
   4199c:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
   419a0:	f8c3 5218 	str.w	r5, [r3, #536]	@ 0x218
   419a4:	f8c3 021c 	str.w	r0, [r3, #540]	@ 0x21c
   419a8:	f8c3 1220 	str.w	r1, [r3, #544]	@ 0x220
   419ac:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
   419b0:	f8c3 1218 	str.w	r1, [r3, #536]	@ 0x218
   419b4:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
   419b8:	e777      	b.n	418aa <am_hal_iom_interrupt_service+0x19a>
   419ba:	f8d4 0828 	ldr.w	r0, [r4, #2088]	@ 0x828
   419be:	f001 f9ef 	bl	42da0 <am_hal_cmdq_disable>
   419c2:	e74e      	b.n	41862 <am_hal_iom_interrupt_service+0x152>
   419c4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
   419c8:	4649      	mov	r1, r9
   419ca:	4648      	mov	r0, r9
   419cc:	f7f4 f974 	bl	35cb8 <am_hal_daxi_control>
   419d0:	6aab      	ldr	r3, [r5, #40]	@ 0x28
   419d2:	f8d5 0428 	ldr.w	r0, [r5, #1064]	@ 0x428
   419d6:	4649      	mov	r1, r9
   419d8:	4798      	blx	r3
   419da:	f894 382c 	ldrb.w	r3, [r4, #2092]	@ 0x82c
   419de:	2b02      	cmp	r3, #2
   419e0:	bf18      	it	ne
   419e2:	f844 9028 	strne.w	r9, [r4, r8, lsl #2]
   419e6:	e6ba      	b.n	4175e <am_hal_iom_interrupt_service+0x4e>
   419e8:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
   419ec:	e792      	b.n	41914 <am_hal_iom_interrupt_service+0x204>
   419ee:	490a      	ldr	r1, [pc, #40]	@ (41a18 <am_hal_iom_interrupt_service+0x308>)
   419f0:	e790      	b.n	41914 <am_hal_iom_interrupt_service+0x204>
   419f2:	f507 2880 	add.w	r8, r7, #262144	@ 0x40000
   419f6:	f108 0850 	add.w	r8, r8, #80	@ 0x50
   419fa:	ea4f 3808 	mov.w	r8, r8, lsl #12
   419fe:	e701      	b.n	41804 <am_hal_iom_interrupt_service+0xf4>
   41a00:	4906      	ldr	r1, [pc, #24]	@ (41a1c <am_hal_iom_interrupt_service+0x30c>)
   41a02:	e787      	b.n	41914 <am_hal_iom_interrupt_service+0x204>
   41a04:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
   41a08:	e6f5      	b.n	417f6 <am_hal_iom_interrupt_service+0xe6>
   41a0a:	4903      	ldr	r1, [pc, #12]	@ (41a18 <am_hal_iom_interrupt_service+0x308>)
   41a0c:	e6f3      	b.n	417f6 <am_hal_iom_interrupt_service+0xe6>
   41a0e:	4903      	ldr	r1, [pc, #12]	@ (41a1c <am_hal_iom_interrupt_service+0x30c>)
   41a10:	e6f1      	b.n	417f6 <am_hal_iom_interrupt_service+0xe6>
   41a12:	bf00      	nop
   41a14:	01123456 	.word	0x01123456
   41a18:	08000001 	.word	0x08000001
   41a1c:	08000002 	.word	0x08000002

00041a20 <am_hal_iom_power_ctrl>:
   41a20:	2800      	cmp	r0, #0
   41a22:	f000 80c5 	beq.w	41bb0 <am_hal_iom_power_ctrl+0x190>
   41a26:	b530      	push	{r4, r5, lr}
   41a28:	6803      	ldr	r3, [r0, #0]
   41a2a:	4604      	mov	r4, r0
   41a2c:	4873      	ldr	r0, [pc, #460]	@ (41bfc <am_hal_iom_power_ctrl+0x1dc>)
   41a2e:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   41a32:	4283      	cmp	r3, r0
   41a34:	b083      	sub	sp, #12
   41a36:	d169      	bne.n	41b0c <am_hal_iom_power_ctrl+0xec>
   41a38:	2900      	cmp	r1, #0
   41a3a:	d06d      	beq.n	41b18 <am_hal_iom_power_ctrl+0xf8>
   41a3c:	3901      	subs	r1, #1
   41a3e:	2901      	cmp	r1, #1
   41a40:	d867      	bhi.n	41b12 <am_hal_iom_power_ctrl+0xf2>
   41a42:	78e3      	ldrb	r3, [r4, #3]
   41a44:	6860      	ldr	r0, [r4, #4]
   41a46:	f013 0f02 	tst.w	r3, #2
   41a4a:	f500 2380 	add.w	r3, r0, #262144	@ 0x40000
   41a4e:	f103 0350 	add.w	r3, r3, #80	@ 0x50
   41a52:	ea4f 3303 	mov.w	r3, r3, lsl #12
   41a56:	d00a      	beq.n	41a6e <am_hal_iom_power_ctrl+0x4e>
   41a58:	f8d3 1248 	ldr.w	r1, [r3, #584]	@ 0x248
   41a5c:	f001 0106 	and.w	r1, r1, #6
   41a60:	2904      	cmp	r1, #4
   41a62:	f040 80ba 	bne.w	41bda <am_hal_iom_power_ctrl+0x1ba>
   41a66:	6a61      	ldr	r1, [r4, #36]	@ 0x24
   41a68:	2900      	cmp	r1, #0
   41a6a:	f040 80b6 	bne.w	41bda <am_hal_iom_power_ctrl+0x1ba>
   41a6e:	b3d2      	cbz	r2, 41ae6 <am_hal_iom_power_ctrl+0xc6>
   41a70:	f8d3 1104 	ldr.w	r1, [r3, #260]	@ 0x104
   41a74:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
   41a78:	f8c4 2874 	str.w	r2, [r4, #2164]	@ 0x874
   41a7c:	f8c4 186c 	str.w	r1, [r4, #2156]	@ 0x86c
   41a80:	f8d3 111c 	ldr.w	r1, [r3, #284]	@ 0x11c
   41a84:	f8d3 2228 	ldr.w	r2, [r3, #552]	@ 0x228
   41a88:	f8c4 287c 	str.w	r2, [r4, #2172]	@ 0x87c
   41a8c:	f8c4 1878 	str.w	r1, [r4, #2168]	@ 0x878
   41a90:	f8d3 122c 	ldr.w	r1, [r3, #556]	@ 0x22c
   41a94:	f8d3 2234 	ldr.w	r2, [r3, #564]	@ 0x234
   41a98:	f8c4 2884 	str.w	r2, [r4, #2180]	@ 0x884
   41a9c:	f8c4 1880 	str.w	r1, [r4, #2176]	@ 0x880
   41aa0:	f8d3 123c 	ldr.w	r1, [r3, #572]	@ 0x23c
   41aa4:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
   41aa8:	f8c4 288c 	str.w	r2, [r4, #2188]	@ 0x88c
   41aac:	f8c4 1888 	str.w	r1, [r4, #2184]	@ 0x888
   41ab0:	f8d3 1244 	ldr.w	r1, [r3, #580]	@ 0x244
   41ab4:	f8d3 2280 	ldr.w	r2, [r3, #640]	@ 0x280
   41ab8:	f8c4 2894 	str.w	r2, [r4, #2196]	@ 0x894
   41abc:	f8c4 1890 	str.w	r1, [r4, #2192]	@ 0x890
   41ac0:	f8d3 12c0 	ldr.w	r1, [r3, #704]	@ 0x2c0
   41ac4:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
   41ac8:	f8c4 289c 	str.w	r2, [r4, #2204]	@ 0x89c
   41acc:	f8c4 1898 	str.w	r1, [r4, #2200]	@ 0x898
   41ad0:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
   41ad4:	f8d3 2228 	ldr.w	r2, [r3, #552]	@ 0x228
   41ad8:	f8c4 1870 	str.w	r1, [r4, #2160]	@ 0x870
   41adc:	07d1      	lsls	r1, r2, #31
   41ade:	d472      	bmi.n	41bc6 <am_hal_iom_power_ctrl+0x1a6>
   41ae0:	2201      	movs	r2, #1
   41ae2:	f884 2868 	strb.w	r2, [r4, #2152]	@ 0x868
   41ae6:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
   41aea:	f36f 0200 	bfc	r2, #0, #1
   41aee:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
   41af2:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
   41af6:	3001      	adds	r0, #1
   41af8:	f36f 1204 	bfc	r2, #4, #1
   41afc:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
   41b00:	b2c0      	uxtb	r0, r0
   41b02:	f7f4 ffc7 	bl	36a94 <am_hal_pwrctrl_periph_disable>
   41b06:	2000      	movs	r0, #0
   41b08:	b003      	add	sp, #12
   41b0a:	bd30      	pop	{r4, r5, pc}
   41b0c:	2002      	movs	r0, #2
   41b0e:	b003      	add	sp, #12
   41b10:	bd30      	pop	{r4, r5, pc}
   41b12:	2006      	movs	r0, #6
   41b14:	b003      	add	sp, #12
   41b16:	bd30      	pop	{r4, r5, pc}
   41b18:	2a00      	cmp	r2, #0
   41b1a:	d04b      	beq.n	41bb4 <am_hal_iom_power_ctrl+0x194>
   41b1c:	f894 3868 	ldrb.w	r3, [r4, #2152]	@ 0x868
   41b20:	2b00      	cmp	r3, #0
   41b22:	d05c      	beq.n	41bde <am_hal_iom_power_ctrl+0x1be>
   41b24:	6860      	ldr	r0, [r4, #4]
   41b26:	3001      	adds	r0, #1
   41b28:	b2c0      	uxtb	r0, r0
   41b2a:	f7f4 fee3 	bl	368f4 <am_hal_pwrctrl_periph_enable>
   41b2e:	6863      	ldr	r3, [r4, #4]
   41b30:	f8d4 086c 	ldr.w	r0, [r4, #2156]	@ 0x86c
   41b34:	f8d4 1874 	ldr.w	r1, [r4, #2164]	@ 0x874
   41b38:	f8d4 287c 	ldr.w	r2, [r4, #2172]	@ 0x87c
   41b3c:	f8d4 5870 	ldr.w	r5, [r4, #2160]	@ 0x870
   41b40:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
   41b44:	3350      	adds	r3, #80	@ 0x50
   41b46:	031b      	lsls	r3, r3, #12
   41b48:	f8c3 0104 	str.w	r0, [r3, #260]	@ 0x104
   41b4c:	f8d4 0880 	ldr.w	r0, [r4, #2176]	@ 0x880
   41b50:	f8c3 1118 	str.w	r1, [r3, #280]	@ 0x118
   41b54:	f8d4 1884 	ldr.w	r1, [r4, #2180]	@ 0x884
   41b58:	f8c3 022c 	str.w	r0, [r3, #556]	@ 0x22c
   41b5c:	f8d4 0888 	ldr.w	r0, [r4, #2184]	@ 0x888
   41b60:	f8c3 1234 	str.w	r1, [r3, #564]	@ 0x234
   41b64:	f8d4 188c 	ldr.w	r1, [r4, #2188]	@ 0x88c
   41b68:	f8c3 023c 	str.w	r0, [r3, #572]	@ 0x23c
   41b6c:	f8d4 0890 	ldr.w	r0, [r4, #2192]	@ 0x890
   41b70:	f8c3 1240 	str.w	r1, [r3, #576]	@ 0x240
   41b74:	f8d4 1894 	ldr.w	r1, [r4, #2196]	@ 0x894
   41b78:	f8c3 0244 	str.w	r0, [r3, #580]	@ 0x244
   41b7c:	f8d4 0898 	ldr.w	r0, [r4, #2200]	@ 0x898
   41b80:	f8c3 1280 	str.w	r1, [r3, #640]	@ 0x280
   41b84:	f8d4 189c 	ldr.w	r1, [r4, #2204]	@ 0x89c
   41b88:	f8c3 02c0 	str.w	r0, [r3, #704]	@ 0x2c0
   41b8c:	f8c3 1200 	str.w	r1, [r3, #512]	@ 0x200
   41b90:	f022 0001 	bic.w	r0, r2, #1
   41b94:	f8d4 1878 	ldr.w	r1, [r4, #2168]	@ 0x878
   41b98:	f8c3 5210 	str.w	r5, [r3, #528]	@ 0x210
   41b9c:	07d2      	lsls	r2, r2, #31
   41b9e:	f8c3 0228 	str.w	r0, [r3, #552]	@ 0x228
   41ba2:	f8c3 111c 	str.w	r1, [r3, #284]	@ 0x11c
   41ba6:	d41c      	bmi.n	41be2 <am_hal_iom_power_ctrl+0x1c2>
   41ba8:	2000      	movs	r0, #0
   41baa:	f884 0868 	strb.w	r0, [r4, #2152]	@ 0x868
   41bae:	e7ae      	b.n	41b0e <am_hal_iom_power_ctrl+0xee>
   41bb0:	2002      	movs	r0, #2
   41bb2:	4770      	bx	lr
   41bb4:	6860      	ldr	r0, [r4, #4]
   41bb6:	9201      	str	r2, [sp, #4]
   41bb8:	3001      	adds	r0, #1
   41bba:	b2c0      	uxtb	r0, r0
   41bbc:	f7f4 fe9a 	bl	368f4 <am_hal_pwrctrl_periph_enable>
   41bc0:	9a01      	ldr	r2, [sp, #4]
   41bc2:	4610      	mov	r0, r2
   41bc4:	e7a3      	b.n	41b0e <am_hal_iom_power_ctrl+0xee>
   41bc6:	f8d4 0828 	ldr.w	r0, [r4, #2088]	@ 0x828
   41bca:	f001 f8e9 	bl	42da0 <am_hal_cmdq_disable>
   41bce:	6860      	ldr	r0, [r4, #4]
   41bd0:	f500 2380 	add.w	r3, r0, #262144	@ 0x40000
   41bd4:	3350      	adds	r3, #80	@ 0x50
   41bd6:	031b      	lsls	r3, r3, #12
   41bd8:	e782      	b.n	41ae0 <am_hal_iom_power_ctrl+0xc0>
   41bda:	2003      	movs	r0, #3
   41bdc:	e797      	b.n	41b0e <am_hal_iom_power_ctrl+0xee>
   41bde:	2007      	movs	r0, #7
   41be0:	e795      	b.n	41b0e <am_hal_iom_power_ctrl+0xee>
   41be2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
   41be4:	b92a      	cbnz	r2, 41bf2 <am_hal_iom_power_ctrl+0x1d2>
   41be6:	f8d3 222c 	ldr.w	r2, [r3, #556]	@ 0x22c
   41bea:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
   41bee:	e9c2 3200 	strd	r3, r2, [r2]
   41bf2:	f8d4 0828 	ldr.w	r0, [r4, #2088]	@ 0x828
   41bf6:	f001 f8a7 	bl	42d48 <am_hal_cmdq_enable>
   41bfa:	e7d5      	b.n	41ba8 <am_hal_iom_power_ctrl+0x188>
   41bfc:	01123456 	.word	0x01123456

00041c00 <am_hal_iom_configure>:
   41c00:	b380      	cbz	r0, 41c64 <am_hal_iom_configure+0x64>
   41c02:	6803      	ldr	r3, [r0, #0]
   41c04:	4aa1      	ldr	r2, [pc, #644]	@ (41e8c <am_hal_iom_configure+0x28c>)
   41c06:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   41c0a:	4293      	cmp	r3, r2
   41c0c:	d12a      	bne.n	41c64 <am_hal_iom_configure+0x64>
   41c0e:	2900      	cmp	r1, #0
   41c10:	f000 810c 	beq.w	41e2c <am_hal_iom_configure+0x22c>
   41c14:	6843      	ldr	r3, [r0, #4]
   41c16:	2b07      	cmp	r3, #7
   41c18:	f200 8108 	bhi.w	41e2c <am_hal_iom_configure+0x22c>
   41c1c:	78c2      	ldrb	r2, [r0, #3]
   41c1e:	0792      	lsls	r2, r2, #30
   41c20:	f100 8106 	bmi.w	41e30 <am_hal_iom_configure+0x230>
   41c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   41c28:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
   41c2c:	3350      	adds	r3, #80	@ 0x50
   41c2e:	780a      	ldrb	r2, [r1, #0]
   41c30:	7202      	strb	r2, [r0, #8]
   41c32:	031b      	lsls	r3, r3, #12
   41c34:	f241 0410 	movw	r4, #4112	@ 0x1010
   41c38:	f8c3 4104 	str.w	r4, [r3, #260]	@ 0x104
   41c3c:	b1a2      	cbz	r2, 41c68 <am_hal_iom_configure+0x68>
   41c3e:	2a01      	cmp	r2, #1
   41c40:	f040 80f8 	bne.w	41e34 <am_hal_iom_configure+0x234>
   41c44:	684a      	ldr	r2, [r1, #4]
   41c46:	4c92      	ldr	r4, [pc, #584]	@ (41e90 <am_hal_iom_configure+0x290>)
   41c48:	42a2      	cmp	r2, r4
   41c4a:	f000 8114 	beq.w	41e76 <am_hal_iom_configure+0x276>
   41c4e:	4c91      	ldr	r4, [pc, #580]	@ (41e94 <am_hal_iom_configure+0x294>)
   41c50:	42a2      	cmp	r2, r4
   41c52:	f000 810b 	beq.w	41e6c <am_hal_iom_configure+0x26c>
   41c56:	4c90      	ldr	r4, [pc, #576]	@ (41e98 <am_hal_iom_configure+0x298>)
   41c58:	42a2      	cmp	r2, r4
   41c5a:	f000 8102 	beq.w	41e62 <am_hal_iom_configure+0x262>
   41c5e:	2006      	movs	r0, #6
   41c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41c64:	2002      	movs	r0, #2
   41c66:	4770      	bx	lr
   41c68:	7a0d      	ldrb	r5, [r1, #8]
   41c6a:	2d03      	cmp	r5, #3
   41c6c:	d8f7      	bhi.n	41c5e <am_hal_iom_configure+0x5e>
   41c6e:	684a      	ldr	r2, [r1, #4]
   41c70:	4c8a      	ldr	r4, [pc, #552]	@ (41e9c <am_hal_iom_configure+0x29c>)
   41c72:	42a2      	cmp	r2, r4
   41c74:	d8f3      	bhi.n	41c5e <am_hal_iom_configure+0x5e>
   41c76:	2a00      	cmp	r2, #0
   41c78:	f000 80e8 	beq.w	41e4c <am_hal_iom_configure+0x24c>
   41c7c:	4c88      	ldr	r4, [pc, #544]	@ (41ea0 <am_hal_iom_configure+0x2a0>)
   41c7e:	fbb4 fef2 	udiv	lr, r4, r2
   41c82:	fb02 441e 	mls	r4, r2, lr, r4
   41c86:	2c00      	cmp	r4, #0
   41c88:	bf18      	it	ne
   41c8a:	f10e 0e01 	addne.w	lr, lr, #1
   41c8e:	f1ce 0400 	rsb	r4, lr, #0
   41c92:	ea04 040e 	and.w	r4, r4, lr
   41c96:	fab4 f484 	clz	r4, r4
   41c9a:	f1c4 041f 	rsb	r4, r4, #31
   41c9e:	2c06      	cmp	r4, #6
   41ca0:	f241 66e2 	movw	r6, #5858	@ 0x16e2
   41ca4:	bfa8      	it	ge
   41ca6:	2406      	movge	r4, #6
   41ca8:	42b2      	cmp	r2, r6
   41caa:	f240 80c5 	bls.w	41e38 <am_hal_iom_configure+0x238>
   41cae:	4e7d      	ldr	r6, [pc, #500]	@ (41ea4 <am_hal_iom_configure+0x2a4>)
   41cb0:	42b2      	cmp	r2, r6
   41cb2:	f0c0 80e5 	bcc.w	41e80 <am_hal_iom_configure+0x280>
   41cb6:	4e79      	ldr	r6, [pc, #484]	@ (41e9c <am_hal_iom_configure+0x29c>)
   41cb8:	ebb2 0c06 	subs.w	ip, r2, r6
   41cbc:	bf18      	it	ne
   41cbe:	f04f 0c01 	movne.w	ip, #1
   41cc2:	ea4f 094c 	mov.w	r9, ip, lsl #1
   41cc6:	f109 0901 	add.w	r9, r9, #1
   41cca:	fa09 f604 	lsl.w	r6, r9, r4
   41cce:	fbbe faf6 	udiv	sl, lr, r6
   41cd2:	fb06 e61a 	mls	r6, r6, sl, lr
   41cd6:	2e00      	cmp	r6, #0
   41cd8:	bf18      	it	ne
   41cda:	f10a 0a01 	addne.w	sl, sl, #1
   41cde:	faba f78a 	clz	r7, sl
   41ce2:	f1c7 061f 	rsb	r6, r7, #31
   41ce6:	2e07      	cmp	r6, #7
   41ce8:	f240 80b2 	bls.w	41e50 <am_hal_iom_configure+0x250>
   41cec:	3c07      	subs	r4, #7
   41cee:	4434      	add	r4, r6
   41cf0:	1c66      	adds	r6, r4, #1
   41cf2:	2e07      	cmp	r6, #7
   41cf4:	f200 80aa 	bhi.w	41e4c <am_hal_iom_configure+0x24c>
   41cf8:	f1c7 0718 	rsb	r7, r7, #24
   41cfc:	f04f 0801 	mov.w	r8, #1
   41d00:	fa08 f807 	lsl.w	r8, r8, r7
   41d04:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
   41d08:	fa2a f707 	lsr.w	r7, sl, r7
   41d0c:	ea08 080a 	and.w	r8, r8, sl
   41d10:	f1b8 0f00 	cmp.w	r8, #0
   41d14:	bf0c      	ite	eq
   41d16:	46ba      	moveq	sl, r7
   41d18:	f107 0a01 	addne.w	sl, r7, #1
   41d1c:	4f62      	ldr	r7, [pc, #392]	@ (41ea8 <am_hal_iom_configure+0x2a8>)
   41d1e:	42ba      	cmp	r2, r7
   41d20:	f080 8098 	bcs.w	41e54 <am_hal_iom_configure+0x254>
   41d24:	2701      	movs	r7, #1
   41d26:	40a7      	lsls	r7, r4
   41d28:	45be      	cmp	lr, r7
   41d2a:	f000 8093 	beq.w	41e54 <am_hal_iom_configure+0x254>
   41d2e:	f10a 37ff 	add.w	r7, sl, #4294967295	@ 0xffffffff
   41d32:	46d3      	mov	fp, sl
   41d34:	f44f 5880 	mov.w	r8, #4096	@ 0x1000
   41d38:	ea4f 0e65 	mov.w	lr, r5, asr #1
   41d3c:	f1be 0f01 	cmp.w	lr, #1
   41d40:	ea4f 2ccc 	mov.w	ip, ip, lsl #11
   41d44:	bf08      	it	eq
   41d46:	f1aa 0e02 	subeq.w	lr, sl, #2
   41d4a:	ea4c 2c06 	orr.w	ip, ip, r6, lsl #8
   41d4e:	bf14      	ite	ne
   41d50:	ea4f 0e57 	movne.w	lr, r7, lsr #1
   41d54:	ea4f 0e5e 	moveq.w	lr, lr, lsr #1
   41d58:	ea4c 0c08 	orr.w	ip, ip, r8
   41d5c:	fa09 f404 	lsl.w	r4, r9, r4
   41d60:	ea4c 6c07 	orr.w	ip, ip, r7, lsl #24
   41d64:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
   41d68:	4f4d      	ldr	r7, [pc, #308]	@ (41ea0 <am_hal_iom_configure+0x2a0>)
   41d6a:	fb0b f404 	mul.w	r4, fp, r4
   41d6e:	f40e 0e7f 	and.w	lr, lr, #16711680	@ 0xff0000
   41d72:	fbb7 f9f4 	udiv	r9, r7, r4
   41d76:	ea4c 0c0e 	orr.w	ip, ip, lr
   41d7a:	fb04 7819 	mls	r8, r4, r9, r7
   41d7e:	ea4f 2e06 	mov.w	lr, r6, lsl #8
   41d82:	0864      	lsrs	r4, r4, #1
   41d84:	4e49      	ldr	r6, [pc, #292]	@ (41eac <am_hal_iom_configure+0x2ac>)
   41d86:	4544      	cmp	r4, r8
   41d88:	bf2c      	ite	cs
   41d8a:	464f      	movcs	r7, r9
   41d8c:	f109 0701 	addcc.w	r7, r9, #1
   41d90:	f8df 8140 	ldr.w	r8, [pc, #320]	@ 41ed4 <am_hal_iom_configure+0x2d4>
   41d94:	fba6 6407 	umull	r6, r4, r6, r7
   41d98:	4e45      	ldr	r6, [pc, #276]	@ (41eb0 <am_hal_iom_configure+0x2b0>)
   41d9a:	0c24      	lsrs	r4, r4, #16
   41d9c:	4547      	cmp	r7, r8
   41d9e:	fb06 7614 	mls	r6, r6, r4, r7
   41da2:	d905      	bls.n	41db0 <am_hal_iom_configure+0x1b0>
   41da4:	1e67      	subs	r7, r4, #1
   41da6:	403c      	ands	r4, r7
   41da8:	4334      	orrs	r4, r6
   41daa:	d101      	bne.n	41db0 <am_hal_iom_configure+0x1b0>
   41dac:	f44e 6c00 	orr.w	ip, lr, #2048	@ 0x800
   41db0:	f04c 0401 	orr.w	r4, ip, #1
   41db4:	f8c3 5280 	str.w	r5, [r3, #640]	@ 0x280
   41db8:	f8c3 4118 	str.w	r4, [r3, #280]	@ 0x118
   41dbc:	e9d1 4303 	ldrd	r4, r3, [r1, #12]
   41dc0:	f44f 757a 	mov.w	r5, #1000	@ 0x3e8
   41dc4:	4933      	ldr	r1, [pc, #204]	@ (41e94 <am_hal_iom_configure+0x294>)
   41dc6:	f8c0 5860 	str.w	r5, [r0, #2144]	@ 0x860
   41dca:	fbb1 f2f2 	udiv	r2, r1, r2
   41dce:	60c4      	str	r4, [r0, #12]
   41dd0:	f8c0 2864 	str.w	r2, [r0, #2148]	@ 0x864
   41dd4:	6103      	str	r3, [r0, #16]
   41dd6:	b31c      	cbz	r4, 41e20 <am_hal_iom_configure+0x220>
   41dd8:	4936      	ldr	r1, [pc, #216]	@ (41eb4 <am_hal_iom_configure+0x2b4>)
   41dda:	eb04 0583 	add.w	r5, r4, r3, lsl #2
   41dde:	428d      	cmp	r5, r1
   41de0:	bf94      	ite	ls
   41de2:	2101      	movls	r1, #1
   41de4:	2100      	movhi	r1, #0
   41de6:	ea4f 0283 	mov.w	r2, r3, lsl #2
   41dea:	f880 18a4 	strb.w	r1, [r0, #2212]	@ 0x8a4
   41dee:	d909      	bls.n	41e04 <am_hal_iom_configure+0x204>
   41df0:	f004 030f 	and.w	r3, r4, #15
   41df4:	1ad3      	subs	r3, r2, r3
   41df6:	340f      	adds	r4, #15
   41df8:	091b      	lsrs	r3, r3, #4
   41dfa:	f024 040f 	bic.w	r4, r4, #15
   41dfe:	009b      	lsls	r3, r3, #2
   41e00:	e9c0 4303 	strd	r4, r3, [r0, #12]
   41e04:	3b08      	subs	r3, #8
   41e06:	f246 015f 	movw	r1, #24671	@ 0x605f
   41e0a:	ebb1 0f83 	cmp.w	r1, r3, lsl #2
   41e0e:	ea4f 0283 	mov.w	r2, r3, lsl #2
   41e12:	d316      	bcc.n	41e42 <am_hal_iom_configure+0x242>
   41e14:	4b28      	ldr	r3, [pc, #160]	@ (41eb8 <am_hal_iom_configure+0x2b8>)
   41e16:	fba3 3202 	umull	r3, r2, r3, r2
   41e1a:	0992      	lsrs	r2, r2, #6
   41e1c:	f8c0 2858 	str.w	r2, [r0, #2136]	@ 0x858
   41e20:	2300      	movs	r3, #0
   41e22:	f8c0 38a0 	str.w	r3, [r0, #2208]	@ 0x8a0
   41e26:	4618      	mov	r0, r3
   41e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41e2c:	2006      	movs	r0, #6
   41e2e:	4770      	bx	lr
   41e30:	2007      	movs	r0, #7
   41e32:	4770      	bx	lr
   41e34:	2005      	movs	r0, #5
   41e36:	e713      	b.n	41c60 <am_hal_iom_configure+0x60>
   41e38:	f04f 0903 	mov.w	r9, #3
   41e3c:	f04f 0c01 	mov.w	ip, #1
   41e40:	e743      	b.n	41cca <am_hal_iom_configure+0xca>
   41e42:	f44f 7380 	mov.w	r3, #256	@ 0x100
   41e46:	f8c0 3858 	str.w	r3, [r0, #2136]	@ 0x858
   41e4a:	e7e9      	b.n	41e20 <am_hal_iom_configure+0x220>
   41e4c:	2401      	movs	r4, #1
   41e4e:	e7b1      	b.n	41db4 <am_hal_iom_configure+0x1b4>
   41e50:	1c66      	adds	r6, r4, #1
   41e52:	e763      	b.n	41d1c <am_hal_iom_configure+0x11c>
   41e54:	f10a 37ff 	add.w	r7, sl, #4294967295	@ 0xffffffff
   41e58:	f04f 0b01 	mov.w	fp, #1
   41e5c:	f04f 0800 	mov.w	r8, #0
   41e60:	e76a      	b.n	41d38 <am_hal_iom_configure+0x138>
   41e62:	4c16      	ldr	r4, [pc, #88]	@ (41ebc <am_hal_iom_configure+0x2bc>)
   41e64:	f8c3 42c0 	str.w	r4, [r3, #704]	@ 0x2c0
   41e68:	4c15      	ldr	r4, [pc, #84]	@ (41ec0 <am_hal_iom_configure+0x2c0>)
   41e6a:	e7a5      	b.n	41db8 <am_hal_iom_configure+0x1b8>
   41e6c:	4c15      	ldr	r4, [pc, #84]	@ (41ec4 <am_hal_iom_configure+0x2c4>)
   41e6e:	f8c3 42c0 	str.w	r4, [r3, #704]	@ 0x2c0
   41e72:	4c15      	ldr	r4, [pc, #84]	@ (41ec8 <am_hal_iom_configure+0x2c8>)
   41e74:	e7a0      	b.n	41db8 <am_hal_iom_configure+0x1b8>
   41e76:	4c15      	ldr	r4, [pc, #84]	@ (41ecc <am_hal_iom_configure+0x2cc>)
   41e78:	f8c3 42c0 	str.w	r4, [r3, #704]	@ 0x2c0
   41e7c:	4c14      	ldr	r4, [pc, #80]	@ (41ed0 <am_hal_iom_configure+0x2d0>)
   41e7e:	e79b      	b.n	41db8 <am_hal_iom_configure+0x1b8>
   41e80:	f04f 0901 	mov.w	r9, #1
   41e84:	f04f 0c00 	mov.w	ip, #0
   41e88:	e71f      	b.n	41cca <am_hal_iom_configure+0xca>
   41e8a:	bf00      	nop
   41e8c:	01123456 	.word	0x01123456
   41e90:	00061a80 	.word	0x00061a80
   41e94:	000f4240 	.word	0x000f4240
   41e98:	000186a0 	.word	0x000186a0
   41e9c:	02dc6c00 	.word	0x02dc6c00
   41ea0:	05b8d800 	.word	0x05b8d800
   41ea4:	01e84800 	.word	0x01e84800
   41ea8:	016e3600 	.word	0x016e3600
   41eac:	431bde83 	.word	0x431bde83
   41eb0:	0003d090 	.word	0x0003d090
   41eb4:	1005ffff 	.word	0x1005ffff
   41eb8:	aaaaaaab 	.word	0xaaaaaaab
   41ebc:	0003f070 	.word	0x0003f070
   41ec0:	773b1301 	.word	0x773b1301
   41ec4:	00023040 	.word	0x00023040
   41ec8:	0b051301 	.word	0x0b051301
   41ecc:	0003f270 	.word	0x0003f270
   41ed0:	1d0e1301 	.word	0x1d0e1301
   41ed4:	0003d08f 	.word	0x0003d08f

00041ed8 <am_hal_iom_blocking_transfer>:
   41ed8:	2800      	cmp	r0, #0
   41eda:	f000 813e 	beq.w	4215a <am_hal_iom_blocking_transfer+0x282>
   41ede:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   41ee2:	6803      	ldr	r3, [r0, #0]
   41ee4:	4abd      	ldr	r2, [pc, #756]	@ (421dc <am_hal_iom_blocking_transfer+0x304>)
   41ee6:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   41eea:	4293      	cmp	r3, r2
   41eec:	b087      	sub	sp, #28
   41eee:	4606      	mov	r6, r0
   41ef0:	f040 8117 	bne.w	42122 <am_hal_iom_blocking_transfer+0x24a>
   41ef4:	460d      	mov	r5, r1
   41ef6:	2900      	cmp	r1, #0
   41ef8:	f000 811c 	beq.w	42134 <am_hal_iom_blocking_transfer+0x25c>
   41efc:	f891 8014 	ldrb.w	r8, [r1, #20]
   41f00:	f1b8 0f01 	cmp.w	r8, #1
   41f04:	f200 811f 	bhi.w	42146 <am_hal_iom_blocking_transfer+0x26e>
   41f08:	f8d1 9010 	ldr.w	r9, [r1, #16]
   41f0c:	f1b9 0f00 	cmp.w	r9, #0
   41f10:	f000 8115 	beq.w	4213e <am_hal_iom_blocking_transfer+0x266>
   41f14:	f8d5 a004 	ldr.w	sl, [r5, #4]
   41f18:	f1ba 0f05 	cmp.w	sl, #5
   41f1c:	f200 810a 	bhi.w	42134 <am_hal_iom_blocking_transfer+0x25c>
   41f20:	ea4f 01ca 	mov.w	r1, sl, lsl #3
   41f24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
   41f28:	f1a1 0420 	sub.w	r4, r1, #32
   41f2c:	f1c1 0020 	rsb	r0, r1, #32
   41f30:	fa03 f201 	lsl.w	r2, r3, r1
   41f34:	fa03 f404 	lsl.w	r4, r3, r4
   41f38:	fa23 f000 	lsr.w	r0, r3, r0
   41f3c:	408b      	lsls	r3, r1
   41f3e:	68a9      	ldr	r1, [r5, #8]
   41f40:	9102      	str	r1, [sp, #8]
   41f42:	400b      	ands	r3, r1
   41f44:	4322      	orrs	r2, r4
   41f46:	68e9      	ldr	r1, [r5, #12]
   41f48:	9103      	str	r1, [sp, #12]
   41f4a:	4302      	orrs	r2, r0
   41f4c:	400a      	ands	r2, r1
   41f4e:	4313      	orrs	r3, r2
   41f50:	f040 80f0 	bne.w	42134 <am_hal_iom_blocking_transfer+0x25c>
   41f54:	f1b9 0f00 	cmp.w	r9, #0
   41f58:	f000 80fa 	beq.w	42150 <am_hal_iom_blocking_transfer+0x278>
   41f5c:	f1b8 0f00 	cmp.w	r8, #0
   41f60:	f000 80e4 	beq.w	4212c <am_hal_iom_blocking_transfer+0x254>
   41f64:	69eb      	ldr	r3, [r5, #28]
   41f66:	2b00      	cmp	r3, #0
   41f68:	f000 80e4 	beq.w	42134 <am_hal_iom_blocking_transfer+0x25c>
   41f6c:	7a33      	ldrb	r3, [r6, #8]
   41f6e:	2b01      	cmp	r3, #1
   41f70:	d004      	beq.n	41f7c <am_hal_iom_blocking_transfer+0xa4>
   41f72:	b93b      	cbnz	r3, 41f84 <am_hal_iom_blocking_transfer+0xac>
   41f74:	682b      	ldr	r3, [r5, #0]
   41f76:	2b04      	cmp	r3, #4
   41f78:	f200 80dc 	bhi.w	42134 <am_hal_iom_blocking_transfer+0x25c>
   41f7c:	f5b9 5f80 	cmp.w	r9, #4096	@ 0x1000
   41f80:	f080 80d8 	bcs.w	42134 <am_hal_iom_blocking_transfer+0x25c>
   41f84:	f896 382c 	ldrb.w	r3, [r6, #2092]	@ 0x82c
   41f88:	2b02      	cmp	r3, #2
   41f8a:	f000 80dc 	beq.w	42146 <am_hal_iom_blocking_transfer+0x26e>
   41f8e:	e9d5 3706 	ldrd	r3, r7, [r5, #24]
   41f92:	f04f 0b01 	mov.w	fp, #1
   41f96:	f8cd b000 	str.w	fp, [sp]
   41f9a:	6874      	ldr	r4, [r6, #4]
   41f9c:	9404      	str	r4, [sp, #16]
   41f9e:	f8d6 0860 	ldr.w	r0, [r6, #2144]	@ 0x860
   41fa2:	f895 4020 	ldrb.w	r4, [r5, #32]
   41fa6:	9405      	str	r4, [sp, #20]
   41fa8:	f1b8 0f00 	cmp.w	r8, #0
   41fac:	bf08      	it	eq
   41fae:	461f      	moveq	r7, r3
   41fb0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
   41fb4:	2300      	movs	r3, #0
   41fb6:	f106 0124 	add.w	r1, r6, #36	@ 0x24
   41fba:	f7f5 fb93 	bl	376e4 <am_hal_delay_us_status_check>
   41fbe:	4603      	mov	r3, r0
   41fc0:	2800      	cmp	r0, #0
   41fc2:	f040 80af 	bne.w	42124 <am_hal_iom_blocking_transfer+0x24c>
   41fc6:	9b04      	ldr	r3, [sp, #16]
   41fc8:	f8cd b000 	str.w	fp, [sp]
   41fcc:	f503 2480 	add.w	r4, r3, #262144	@ 0x40000
   41fd0:	3450      	adds	r4, #80	@ 0x50
   41fd2:	0324      	lsls	r4, r4, #12
   41fd4:	f504 7b12 	add.w	fp, r4, #584	@ 0x248
   41fd8:	2304      	movs	r3, #4
   41fda:	f8d6 0860 	ldr.w	r0, [r6, #2144]	@ 0x860
   41fde:	2206      	movs	r2, #6
   41fe0:	4659      	mov	r1, fp
   41fe2:	f7f5 fb7f 	bl	376e4 <am_hal_delay_us_status_check>
   41fe6:	4603      	mov	r3, r0
   41fe8:	2800      	cmp	r0, #0
   41fea:	f040 809b 	bne.w	42124 <am_hal_iom_blocking_transfer+0x24c>
   41fee:	f8d4 2200 	ldr.w	r2, [r4, #512]	@ 0x200
   41ff2:	9204      	str	r2, [sp, #16]
   41ff4:	f8c4 0200 	str.w	r0, [r4, #512]	@ 0x200
   41ff8:	f8d4 2218 	ldr.w	r2, [r4, #536]	@ 0x218
   41ffc:	f360 0200 	bfi	r2, r0, #0, #1
   42000:	f8c4 2218 	str.w	r2, [r4, #536]	@ 0x218
   42004:	682a      	ldr	r2, [r5, #0]
   42006:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
   4200a:	f8c4 1208 	str.w	r1, [r4, #520]	@ 0x208
   4200e:	f8c4 22c4 	str.w	r2, [r4, #708]	@ 0x2c4
   42012:	7a31      	ldrb	r1, [r6, #8]
   42014:	2900      	cmp	r1, #0
   42016:	f000 80a3 	beq.w	42160 <am_hal_iom_blocking_transfer+0x288>
   4201a:	f8c4 0124 	str.w	r0, [r4, #292]	@ 0x124
   4201e:	4a70      	ldr	r2, [pc, #448]	@ (421e0 <am_hal_iom_blocking_transfer+0x308>)
   42020:	f1b8 0f01 	cmp.w	r8, #1
   42024:	ea02 2909 	and.w	r9, r2, r9, lsl #8
   42028:	ea49 0303 	orr.w	r3, r9, r3
   4202c:	f000 80de 	beq.w	421ec <am_hal_iom_blocking_transfer+0x314>
   42030:	9a02      	ldr	r2, [sp, #8]
   42032:	9903      	ldr	r1, [sp, #12]
   42034:	692d      	ldr	r5, [r5, #16]
   42036:	0a12      	lsrs	r2, r2, #8
   42038:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
   4203c:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   42040:	f8d4 2100 	ldr.w	r2, [r4, #256]	@ 0x100
   42044:	f3c2 2207 	ubfx	r2, r2, #8, #8
   42048:	2a03      	cmp	r2, #3
   4204a:	46b9      	mov	r9, r7
   4204c:	d917      	bls.n	4207e <am_hal_iom_blocking_transfer+0x1a6>
   4204e:	b1b5      	cbz	r5, 4207e <am_hal_iom_blocking_transfer+0x1a6>
   42050:	f859 1b04 	ldr.w	r1, [r9], #4
   42054:	f8c4 110c 	str.w	r1, [r4, #268]	@ 0x10c
   42058:	2d03      	cmp	r5, #3
   4205a:	d90f      	bls.n	4207c <am_hal_iom_blocking_transfer+0x1a4>
   4205c:	3a04      	subs	r2, #4
   4205e:	f022 0203 	bic.w	r2, r2, #3
   42062:	3204      	adds	r2, #4
   42064:	4417      	add	r7, r2
   42066:	454f      	cmp	r7, r9
   42068:	f1a5 0504 	sub.w	r5, r5, #4
   4206c:	d007      	beq.n	4207e <am_hal_iom_blocking_transfer+0x1a6>
   4206e:	b135      	cbz	r5, 4207e <am_hal_iom_blocking_transfer+0x1a6>
   42070:	f859 2b04 	ldr.w	r2, [r9], #4
   42074:	f8c4 210c 	str.w	r2, [r4, #268]	@ 0x10c
   42078:	2d03      	cmp	r5, #3
   4207a:	d8f4      	bhi.n	42066 <am_hal_iom_blocking_transfer+0x18e>
   4207c:	4645      	mov	r5, r8
   4207e:	9a05      	ldr	r2, [sp, #20]
   42080:	ea43 130a 	orr.w	r3, r3, sl, lsl #4
   42084:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   42088:	9a02      	ldr	r2, [sp, #8]
   4208a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   4208e:	f043 0301 	orr.w	r3, r3, #1
   42092:	f8c4 3120 	str.w	r3, [r4, #288]	@ 0x120
   42096:	2d00      	cmp	r5, #0
   42098:	f000 8088 	beq.w	421ac <am_hal_iom_blocking_transfer+0x2d4>
   4209c:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   420a0:	f3c3 2307 	ubfx	r3, r3, #8, #8
   420a4:	2b03      	cmp	r3, #3
   420a6:	f200 8083 	bhi.w	421b0 <am_hal_iom_blocking_transfer+0x2d8>
   420aa:	4f4e      	ldr	r7, [pc, #312]	@ (421e4 <am_hal_iom_blocking_transfer+0x30c>)
   420ac:	e009      	b.n	420c2 <am_hal_iom_blocking_transfer+0x1ea>
   420ae:	3f01      	subs	r7, #1
   420b0:	d00d      	beq.n	420ce <am_hal_iom_blocking_transfer+0x1f6>
   420b2:	f7f5 fad3 	bl	3765c <am_hal_delay_us>
   420b6:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   420ba:	f3c3 2307 	ubfx	r3, r3, #8, #8
   420be:	2b03      	cmp	r3, #3
   420c0:	d876      	bhi.n	421b0 <am_hal_iom_blocking_transfer+0x2d8>
   420c2:	f8d4 3204 	ldr.w	r3, [r4, #516]	@ 0x204
   420c6:	07db      	lsls	r3, r3, #31
   420c8:	f04f 0001 	mov.w	r0, #1
   420cc:	d5ef      	bpl.n	420ae <am_hal_iom_blocking_transfer+0x1d6>
   420ce:	2701      	movs	r7, #1
   420d0:	2304      	movs	r3, #4
   420d2:	4845      	ldr	r0, [pc, #276]	@ (421e8 <am_hal_iom_blocking_transfer+0x310>)
   420d4:	9700      	str	r7, [sp, #0]
   420d6:	4659      	mov	r1, fp
   420d8:	2206      	movs	r2, #6
   420da:	f7f5 fb03 	bl	376e4 <am_hal_delay_us_status_check>
   420de:	4603      	mov	r3, r0
   420e0:	b980      	cbnz	r0, 42104 <am_hal_iom_blocking_transfer+0x22c>
   420e2:	f8d4 3204 	ldr.w	r3, [r4, #516]	@ 0x204
   420e6:	f013 0f6c 	tst.w	r3, #108	@ 0x6c
   420ea:	f040 80b6 	bne.w	4225a <am_hal_iom_blocking_transfer+0x382>
   420ee:	0599      	lsls	r1, r3, #22
   420f0:	f100 80b6 	bmi.w	42260 <am_hal_iom_blocking_transfer+0x388>
   420f4:	06da      	lsls	r2, r3, #27
   420f6:	f100 80b5 	bmi.w	42264 <am_hal_iom_blocking_transfer+0x38c>
   420fa:	f403 4390 	and.w	r3, r3, #18432	@ 0x4800
   420fe:	432b      	orrs	r3, r5
   42100:	d007      	beq.n	42112 <am_hal_iom_blocking_transfer+0x23a>
   42102:	463b      	mov	r3, r7
   42104:	f8d4 1204 	ldr.w	r1, [r4, #516]	@ 0x204
   42108:	9302      	str	r3, [sp, #8]
   4210a:	4630      	mov	r0, r6
   4210c:	f7fe ff7c 	bl	41008 <internal_iom_reset_on_error>
   42110:	9b02      	ldr	r3, [sp, #8]
   42112:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
   42116:	f8c4 2208 	str.w	r2, [r4, #520]	@ 0x208
   4211a:	9a04      	ldr	r2, [sp, #16]
   4211c:	f8c4 2200 	str.w	r2, [r4, #512]	@ 0x200
   42120:	e000      	b.n	42124 <am_hal_iom_blocking_transfer+0x24c>
   42122:	2302      	movs	r3, #2
   42124:	4618      	mov	r0, r3
   42126:	b007      	add	sp, #28
   42128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4212c:	69ab      	ldr	r3, [r5, #24]
   4212e:	2b00      	cmp	r3, #0
   42130:	f47f af1c 	bne.w	41f6c <am_hal_iom_blocking_transfer+0x94>
   42134:	2306      	movs	r3, #6
   42136:	4618      	mov	r0, r3
   42138:	b007      	add	sp, #28
   4213a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4213e:	f881 9014 	strb.w	r9, [r1, #20]
   42142:	46c8      	mov	r8, r9
   42144:	e6e6      	b.n	41f14 <am_hal_iom_blocking_transfer+0x3c>
   42146:	2307      	movs	r3, #7
   42148:	4618      	mov	r0, r3
   4214a:	b007      	add	sp, #28
   4214c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   42150:	7a33      	ldrb	r3, [r6, #8]
   42152:	2b01      	cmp	r3, #1
   42154:	f47f af0d 	bne.w	41f72 <am_hal_iom_blocking_transfer+0x9a>
   42158:	e714      	b.n	41f84 <am_hal_iom_blocking_transfer+0xac>
   4215a:	2302      	movs	r3, #2
   4215c:	4618      	mov	r0, r3
   4215e:	4770      	bx	lr
   42160:	18b1      	adds	r1, r6, r2
   42162:	0513      	lsls	r3, r2, #20
   42164:	f891 28a0 	ldrb.w	r2, [r1, #2208]	@ 0x8a0
   42168:	f8c4 2124 	str.w	r2, [r4, #292]	@ 0x124
   4216c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
   42170:	e755      	b.n	4201e <am_hal_iom_blocking_transfer+0x146>
   42172:	2b03      	cmp	r3, #3
   42174:	f8c8 1000 	str.w	r1, [r8]
   42178:	f1a5 0504 	sub.w	r5, r5, #4
   4217c:	f108 0804 	add.w	r8, r8, #4
   42180:	d968      	bls.n	42254 <am_hal_iom_blocking_transfer+0x37c>
   42182:	b19d      	cbz	r5, 421ac <am_hal_iom_blocking_transfer+0x2d4>
   42184:	2d03      	cmp	r5, #3
   42186:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
   4218a:	f1a3 0304 	sub.w	r3, r3, #4
   4218e:	d8f0      	bhi.n	42172 <am_hal_iom_blocking_transfer+0x29a>
   42190:	3d01      	subs	r5, #1
   42192:	f888 1000 	strb.w	r1, [r8]
   42196:	ea4f 2311 	mov.w	r3, r1, lsr #8
   4219a:	d007      	beq.n	421ac <am_hal_iom_blocking_transfer+0x2d4>
   4219c:	2d01      	cmp	r5, #1
   4219e:	f888 3001 	strb.w	r3, [r8, #1]
   421a2:	ea4f 4111 	mov.w	r1, r1, lsr #16
   421a6:	d001      	beq.n	421ac <am_hal_iom_blocking_transfer+0x2d4>
   421a8:	f888 1002 	strb.w	r1, [r8, #2]
   421ac:	2500      	movs	r5, #0
   421ae:	e78e      	b.n	420ce <am_hal_iom_blocking_transfer+0x1f6>
   421b0:	f005 0003 	and.w	r0, r5, #3
   421b4:	464a      	mov	r2, r9
   421b6:	f852 1b04 	ldr.w	r1, [r2], #4
   421ba:	f8c4 110c 	str.w	r1, [r4, #268]	@ 0x10c
   421be:	42a8      	cmp	r0, r5
   421c0:	eba9 0102 	sub.w	r1, r9, r2
   421c4:	4419      	add	r1, r3
   421c6:	f1a5 0504 	sub.w	r5, r5, #4
   421ca:	d004      	beq.n	421d6 <am_hal_iom_blocking_transfer+0x2fe>
   421cc:	2903      	cmp	r1, #3
   421ce:	d903      	bls.n	421d8 <am_hal_iom_blocking_transfer+0x300>
   421d0:	2d00      	cmp	r5, #0
   421d2:	d1f0      	bne.n	421b6 <am_hal_iom_blocking_transfer+0x2de>
   421d4:	e7ea      	b.n	421ac <am_hal_iom_blocking_transfer+0x2d4>
   421d6:	4645      	mov	r5, r8
   421d8:	4691      	mov	r9, r2
   421da:	e75c      	b.n	42096 <am_hal_iom_blocking_transfer+0x1be>
   421dc:	01123456 	.word	0x01123456
   421e0:	000fff00 	.word	0x000fff00
   421e4:	0007a121 	.word	0x0007a121
   421e8:	0007a120 	.word	0x0007a120
   421ec:	9a05      	ldr	r2, [sp, #20]
   421ee:	9903      	ldr	r1, [sp, #12]
   421f0:	692d      	ldr	r5, [r5, #16]
   421f2:	ea43 130a 	orr.w	r3, r3, sl, lsl #4
   421f6:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   421fa:	9a02      	ldr	r2, [sp, #8]
   421fc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   42200:	0a12      	lsrs	r2, r2, #8
   42202:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
   42206:	f043 0302 	orr.w	r3, r3, #2
   4220a:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   4220e:	f8c4 3120 	str.w	r3, [r4, #288]	@ 0x120
   42212:	2d00      	cmp	r5, #0
   42214:	d0ca      	beq.n	421ac <am_hal_iom_blocking_transfer+0x2d4>
   42216:	2200      	movs	r2, #0
   42218:	46b8      	mov	r8, r7
   4221a:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   4221e:	f3c3 4307 	ubfx	r3, r3, #16, #8
   42222:	2b03      	cmp	r3, #3
   42224:	d8ae      	bhi.n	42184 <am_hal_iom_blocking_transfer+0x2ac>
   42226:	4f10      	ldr	r7, [pc, #64]	@ (42268 <am_hal_iom_blocking_transfer+0x390>)
   42228:	e002      	b.n	42230 <am_hal_iom_blocking_transfer+0x358>
   4222a:	3f01      	subs	r7, #1
   4222c:	f43f af4f 	beq.w	420ce <am_hal_iom_blocking_transfer+0x1f6>
   42230:	2001      	movs	r0, #1
   42232:	b112      	cbz	r2, 4223a <am_hal_iom_blocking_transfer+0x362>
   42234:	42ab      	cmp	r3, r5
   42236:	f4ff af4a 	bcc.w	420ce <am_hal_iom_blocking_transfer+0x1f6>
   4223a:	f7f5 fa0f 	bl	3765c <am_hal_delay_us>
   4223e:	f8d4 2204 	ldr.w	r2, [r4, #516]	@ 0x204
   42242:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   42246:	f3c3 4307 	ubfx	r3, r3, #16, #8
   4224a:	2b03      	cmp	r3, #3
   4224c:	f002 0201 	and.w	r2, r2, #1
   42250:	d9eb      	bls.n	4222a <am_hal_iom_blocking_transfer+0x352>
   42252:	e797      	b.n	42184 <am_hal_iom_blocking_transfer+0x2ac>
   42254:	2d00      	cmp	r5, #0
   42256:	d1e0      	bne.n	4221a <am_hal_iom_blocking_transfer+0x342>
   42258:	e7a8      	b.n	421ac <am_hal_iom_blocking_transfer+0x2d4>
   4225a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
   4225e:	e751      	b.n	42104 <am_hal_iom_blocking_transfer+0x22c>
   42260:	4b02      	ldr	r3, [pc, #8]	@ (4226c <am_hal_iom_blocking_transfer+0x394>)
   42262:	e74f      	b.n	42104 <am_hal_iom_blocking_transfer+0x22c>
   42264:	4b02      	ldr	r3, [pc, #8]	@ (42270 <am_hal_iom_blocking_transfer+0x398>)
   42266:	e74d      	b.n	42104 <am_hal_iom_blocking_transfer+0x22c>
   42268:	0007a120 	.word	0x0007a120
   4226c:	08000001 	.word	0x08000001
   42270:	08000002 	.word	0x08000002

00042274 <am_hal_iom_nonblocking_transfer>:
   42274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   42278:	2800      	cmp	r0, #0
   4227a:	f000 8081 	beq.w	42380 <am_hal_iom_nonblocking_transfer+0x10c>
   4227e:	4604      	mov	r4, r0
   42280:	6800      	ldr	r0, [r0, #0]
   42282:	4615      	mov	r5, r2
   42284:	4a66      	ldr	r2, [pc, #408]	@ (42420 <am_hal_iom_nonblocking_transfer+0x1ac>)
   42286:	f020 407e 	bic.w	r0, r0, #4261412864	@ 0xfe000000
   4228a:	4290      	cmp	r0, r2
   4228c:	d178      	bne.n	42380 <am_hal_iom_nonblocking_transfer+0x10c>
   4228e:	2900      	cmp	r1, #0
   42290:	d07d      	beq.n	4238e <am_hal_iom_nonblocking_transfer+0x11a>
   42292:	7d0f      	ldrb	r7, [r1, #20]
   42294:	2f01      	cmp	r7, #1
   42296:	d86f      	bhi.n	42378 <am_hal_iom_nonblocking_transfer+0x104>
   42298:	f8d1 c010 	ldr.w	ip, [r1, #16]
   4229c:	f1bc 0f00 	cmp.w	ip, #0
   422a0:	d079      	beq.n	42396 <am_hal_iom_nonblocking_transfer+0x122>
   422a2:	6848      	ldr	r0, [r1, #4]
   422a4:	2805      	cmp	r0, #5
   422a6:	d872      	bhi.n	4238e <am_hal_iom_nonblocking_transfer+0x11a>
   422a8:	00c0      	lsls	r0, r0, #3
   422aa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
   422ae:	f1a0 0820 	sub.w	r8, r0, #32
   422b2:	f1c0 0e20 	rsb	lr, r0, #32
   422b6:	fa02 f600 	lsl.w	r6, r2, r0
   422ba:	fa02 f808 	lsl.w	r8, r2, r8
   422be:	fa22 fe0e 	lsr.w	lr, r2, lr
   422c2:	4082      	lsls	r2, r0
   422c4:	6888      	ldr	r0, [r1, #8]
   422c6:	ea46 0608 	orr.w	r6, r6, r8
   422ca:	4002      	ands	r2, r0
   422cc:	68c8      	ldr	r0, [r1, #12]
   422ce:	ea46 060e 	orr.w	r6, r6, lr
   422d2:	4030      	ands	r0, r6
   422d4:	4302      	orrs	r2, r0
   422d6:	d15a      	bne.n	4238e <am_hal_iom_nonblocking_transfer+0x11a>
   422d8:	f1bc 0f00 	cmp.w	ip, #0
   422dc:	d05f      	beq.n	4239e <am_hal_iom_nonblocking_transfer+0x12a>
   422de:	2f00      	cmp	r7, #0
   422e0:	d052      	beq.n	42388 <am_hal_iom_nonblocking_transfer+0x114>
   422e2:	69ca      	ldr	r2, [r1, #28]
   422e4:	2a00      	cmp	r2, #0
   422e6:	d052      	beq.n	4238e <am_hal_iom_nonblocking_transfer+0x11a>
   422e8:	7a22      	ldrb	r2, [r4, #8]
   422ea:	2a01      	cmp	r2, #1
   422ec:	d003      	beq.n	422f6 <am_hal_iom_nonblocking_transfer+0x82>
   422ee:	b92a      	cbnz	r2, 422fc <am_hal_iom_nonblocking_transfer+0x88>
   422f0:	680a      	ldr	r2, [r1, #0]
   422f2:	2a04      	cmp	r2, #4
   422f4:	d84b      	bhi.n	4238e <am_hal_iom_nonblocking_transfer+0x11a>
   422f6:	f5bc 5f80 	cmp.w	ip, #4096	@ 0x1000
   422fa:	d248      	bcs.n	4238e <am_hal_iom_nonblocking_transfer+0x11a>
   422fc:	6a48      	ldr	r0, [r1, #36]	@ 0x24
   422fe:	f010 0fe0 	tst.w	r0, #224	@ 0xe0
   42302:	d144      	bne.n	4238e <am_hal_iom_nonblocking_transfer+0x11a>
   42304:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
   42306:	f002 32e0 	and.w	r2, r2, #3772834016	@ 0xe0e0e0e0
   4230a:	f022 4260 	bic.w	r2, r2, #3758096384	@ 0xe0000000
   4230e:	2a00      	cmp	r2, #0
   42310:	d13d      	bne.n	4238e <am_hal_iom_nonblocking_transfer+0x11a>
   42312:	f8d4 2828 	ldr.w	r2, [r4, #2088]	@ 0x828
   42316:	b37a      	cbz	r2, 42378 <am_hal_iom_nonblocking_transfer+0x104>
   42318:	f894 282c 	ldrb.w	r2, [r4, #2092]	@ 0x82c
   4231c:	2a02      	cmp	r2, #2
   4231e:	d02b      	beq.n	42378 <am_hal_iom_nonblocking_transfer+0x104>
   42320:	f8d4 6838 	ldr.w	r6, [r4, #2104]	@ 0x838
   42324:	2e00      	cmp	r6, #0
   42326:	d03e      	beq.n	423a6 <am_hal_iom_nonblocking_transfer+0x132>
   42328:	bb30      	cbnz	r0, 42378 <am_hal_iom_nonblocking_transfer+0x104>
   4232a:	462f      	mov	r7, r5
   4232c:	463a      	mov	r2, r7
   4232e:	4620      	mov	r0, r4
   42330:	f7ff f866 	bl	41400 <am_hal_iom_CQAddTransaction>
   42334:	4606      	mov	r6, r0
   42336:	bb00      	cbnz	r0, 4237a <am_hal_iom_nonblocking_transfer+0x106>
   42338:	f7f3 ff3a 	bl	361b0 <am_hal_interrupt_master_disable>
   4233c:	1e39      	subs	r1, r7, #0
   4233e:	bf18      	it	ne
   42340:	2101      	movne	r1, #1
   42342:	4680      	mov	r8, r0
   42344:	f8d4 0828 	ldr.w	r0, [r4, #2088]	@ 0x828
   42348:	f000 fdc6 	bl	42ed8 <am_hal_cmdq_post_block>
   4234c:	4606      	mov	r6, r0
   4234e:	2800      	cmp	r0, #0
   42350:	d137      	bne.n	423c2 <am_hal_iom_nonblocking_transfer+0x14e>
   42352:	f8d4 3830 	ldr.w	r3, [r4, #2096]	@ 0x830
   42356:	6a62      	ldr	r2, [r4, #36]	@ 0x24
   42358:	3301      	adds	r3, #1
   4235a:	f8c4 3830 	str.w	r3, [r4, #2096]	@ 0x830
   4235e:	1c53      	adds	r3, r2, #1
   42360:	6263      	str	r3, [r4, #36]	@ 0x24
   42362:	2d00      	cmp	r5, #0
   42364:	d051      	beq.n	4240a <am_hal_iom_nonblocking_transfer+0x196>
   42366:	f884 082d 	strb.w	r0, [r4, #2093]	@ 0x82d
   4236a:	f8c4 085c 	str.w	r0, [r4, #2140]	@ 0x85c
   4236e:	b36a      	cbz	r2, 423cc <am_hal_iom_nonblocking_transfer+0x158>
   42370:	4640      	mov	r0, r8
   42372:	f7f3 ff21 	bl	361b8 <am_hal_interrupt_master_set>
   42376:	e000      	b.n	4237a <am_hal_iom_nonblocking_transfer+0x106>
   42378:	2607      	movs	r6, #7
   4237a:	4630      	mov	r0, r6
   4237c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   42380:	2602      	movs	r6, #2
   42382:	4630      	mov	r0, r6
   42384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   42388:	698a      	ldr	r2, [r1, #24]
   4238a:	2a00      	cmp	r2, #0
   4238c:	d1ac      	bne.n	422e8 <am_hal_iom_nonblocking_transfer+0x74>
   4238e:	2606      	movs	r6, #6
   42390:	4630      	mov	r0, r6
   42392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   42396:	f881 c014 	strb.w	ip, [r1, #20]
   4239a:	4667      	mov	r7, ip
   4239c:	e781      	b.n	422a2 <am_hal_iom_nonblocking_transfer+0x2e>
   4239e:	7a22      	ldrb	r2, [r4, #8]
   423a0:	2a01      	cmp	r2, #1
   423a2:	d1a4      	bne.n	422ee <am_hal_iom_nonblocking_transfer+0x7a>
   423a4:	e7aa      	b.n	422fc <am_hal_iom_nonblocking_transfer+0x88>
   423a6:	2d00      	cmp	r5, #0
   423a8:	d1bf      	bne.n	4232a <am_hal_iom_nonblocking_transfer+0xb6>
   423aa:	2a00      	cmp	r2, #0
   423ac:	d1bd      	bne.n	4232a <am_hal_iom_nonblocking_transfer+0xb6>
   423ae:	f8d4 0858 	ldr.w	r0, [r4, #2136]	@ 0x858
   423b2:	f8d4 285c 	ldr.w	r2, [r4, #2140]	@ 0x85c
   423b6:	4f1b      	ldr	r7, [pc, #108]	@ (42424 <am_hal_iom_nonblocking_transfer+0x1b0>)
   423b8:	ebb2 0f50 	cmp.w	r2, r0, lsr #1
   423bc:	bf38      	it	cc
   423be:	2700      	movcc	r7, #0
   423c0:	e7b4      	b.n	4232c <am_hal_iom_nonblocking_transfer+0xb8>
   423c2:	f8d4 0828 	ldr.w	r0, [r4, #2088]	@ 0x828
   423c6:	f000 fd6f 	bl	42ea8 <am_hal_cmdq_release_block>
   423ca:	e7d1      	b.n	42370 <am_hal_iom_nonblocking_transfer+0xfc>
   423cc:	6863      	ldr	r3, [r4, #4]
   423ce:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
   423d2:	3350      	adds	r3, #80	@ 0x50
   423d4:	031b      	lsls	r3, r3, #12
   423d6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
   423da:	f8d3 0200 	ldr.w	r0, [r3, #512]	@ 0x200
   423de:	6160      	str	r0, [r4, #20]
   423e0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
   423e4:	f646 227c 	movw	r2, #27260	@ 0x6a7c
   423e8:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
   423ec:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
   423f0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
   423f2:	b92a      	cbnz	r2, 42400 <am_hal_iom_nonblocking_transfer+0x18c>
   423f4:	f8d3 222c 	ldr.w	r2, [r3, #556]	@ 0x22c
   423f8:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
   423fc:	e9c2 3200 	strd	r3, r2, [r2]
   42400:	f8d4 0828 	ldr.w	r0, [r4, #2088]	@ 0x828
   42404:	f000 fca0 	bl	42d48 <am_hal_cmdq_enable>
   42408:	e7b2      	b.n	42370 <am_hal_iom_nonblocking_transfer+0xfc>
   4240a:	b117      	cbz	r7, 42412 <am_hal_iom_nonblocking_transfer+0x19e>
   4240c:	f8c4 085c 	str.w	r0, [r4, #2140]	@ 0x85c
   42410:	e7ad      	b.n	4236e <am_hal_iom_nonblocking_transfer+0xfa>
   42412:	f8d4 385c 	ldr.w	r3, [r4, #2140]	@ 0x85c
   42416:	3301      	adds	r3, #1
   42418:	f8c4 385c 	str.w	r3, [r4, #2140]	@ 0x85c
   4241c:	e7a7      	b.n	4236e <am_hal_iom_nonblocking_transfer+0xfa>
   4241e:	bf00      	nop
   42420:	01123456 	.word	0x01123456
   42424:	00040d81 	.word	0x00040d81

00042428 <am_hal_rtc_osc_disable>:
   42428:	4a03      	ldr	r2, [pc, #12]	@ (42438 <am_hal_rtc_osc_disable+0x10>)
   4242a:	6813      	ldr	r3, [r2, #0]
   4242c:	f043 0310 	orr.w	r3, r3, #16
   42430:	2000      	movs	r0, #0
   42432:	6013      	str	r3, [r2, #0]
   42434:	4770      	bx	lr
   42436:	bf00      	nop
   42438:	40004800 	.word	0x40004800

0004243c <nonblocking_read_sm.part.0>:
   4243c:	b530      	push	{r4, r5, lr}
   4243e:	b083      	sub	sp, #12
   42440:	4605      	mov	r5, r0
   42442:	f7f3 feb5 	bl	361b0 <am_hal_interrupt_master_disable>
   42446:	9001      	str	r0, [sp, #4]
   42448:	e9d5 100d 	ldrd	r1, r0, [r5, #52]	@ 0x34
   4244c:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
   4244e:	f895 4098 	ldrb.w	r4, [r5, #152]	@ 0x98
   42452:	1ac0      	subs	r0, r0, r3
   42454:	4419      	add	r1, r3
   42456:	2c00      	cmp	r4, #0
   42458:	d12e      	bne.n	424b8 <nonblocking_read_sm.part.0+0x7c>
   4245a:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
   4245c:	2800      	cmp	r0, #0
   4245e:	d045      	beq.n	424ec <nonblocking_read_sm.part.0+0xb0>
   42460:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
   42464:	321c      	adds	r2, #28
   42466:	0312      	lsls	r2, r2, #12
   42468:	3901      	subs	r1, #1
   4246a:	e008      	b.n	4247e <nonblocking_read_sm.part.0+0x42>
   4246c:	6813      	ldr	r3, [r2, #0]
   4246e:	f413 6f70 	tst.w	r3, #3840	@ 0xf00
   42472:	d107      	bne.n	42484 <nonblocking_read_sm.part.0+0x48>
   42474:	3401      	adds	r4, #1
   42476:	42a0      	cmp	r0, r4
   42478:	f801 3f01 	strb.w	r3, [r1, #1]!
   4247c:	d002      	beq.n	42484 <nonblocking_read_sm.part.0+0x48>
   4247e:	6993      	ldr	r3, [r2, #24]
   42480:	06db      	lsls	r3, r3, #27
   42482:	d5f3      	bpl.n	4246c <nonblocking_read_sm.part.0+0x30>
   42484:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
   42486:	4423      	add	r3, r4
   42488:	652b      	str	r3, [r5, #80]	@ 0x50
   4248a:	9801      	ldr	r0, [sp, #4]
   4248c:	f7f3 fe94 	bl	361b8 <am_hal_interrupt_master_set>
   42490:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
   42492:	6d2a      	ldr	r2, [r5, #80]	@ 0x50
   42494:	601a      	str	r2, [r3, #0]
   42496:	6d2a      	ldr	r2, [r5, #80]	@ 0x50
   42498:	6bab      	ldr	r3, [r5, #56]	@ 0x38
   4249a:	429a      	cmp	r2, r3
   4249c:	d001      	beq.n	424a2 <nonblocking_read_sm.part.0+0x66>
   4249e:	b003      	add	sp, #12
   424a0:	bd30      	pop	{r4, r5, pc}
   424a2:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
   424a4:	2000      	movs	r0, #0
   424a6:	f885 002c 	strb.w	r0, [r5, #44]	@ 0x2c
   424aa:	2b00      	cmp	r3, #0
   424ac:	d0f7      	beq.n	4249e <nonblocking_read_sm.part.0+0x62>
   424ae:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
   424b0:	b003      	add	sp, #12
   424b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   424b6:	4718      	bx	r3
   424b8:	f8d5 40a4 	ldr.w	r4, [r5, #164]	@ 0xa4
   424bc:	4284      	cmp	r4, r0
   424be:	bf28      	it	cs
   424c0:	4604      	movcs	r4, r0
   424c2:	4622      	mov	r2, r4
   424c4:	f105 009c 	add.w	r0, r5, #156	@ 0x9c
   424c8:	f000 fe14 	bl	430f4 <am_hal_queue_item_get>
   424cc:	2800      	cmp	r0, #0
   424ce:	d1d9      	bne.n	42484 <nonblocking_read_sm.part.0+0x48>
   424d0:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
   424d2:	f885 002c 	strb.w	r0, [r5, #44]	@ 0x2c
   424d6:	2b00      	cmp	r3, #0
   424d8:	d0d4      	beq.n	42484 <nonblocking_read_sm.part.0+0x48>
   424da:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
   424dc:	2001      	movs	r0, #1
   424de:	4798      	blx	r3
   424e0:	9801      	ldr	r0, [sp, #4]
   424e2:	b003      	add	sp, #12
   424e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   424e8:	f7f3 be66 	b.w	361b8 <am_hal_interrupt_master_set>
   424ec:	4604      	mov	r4, r0
   424ee:	e7c9      	b.n	42484 <nonblocking_read_sm.part.0+0x48>

000424f0 <nonblocking_write_sm>:
   424f0:	b570      	push	{r4, r5, r6, lr}
   424f2:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
   424f6:	b084      	sub	sp, #16
   424f8:	4604      	mov	r4, r0
   424fa:	b963      	cbnz	r3, 42516 <nonblocking_write_sm+0x26>
   424fc:	f894 307c 	ldrb.w	r3, [r4, #124]	@ 0x7c
   42500:	2b00      	cmp	r3, #0
   42502:	d130      	bne.n	42566 <nonblocking_write_sm+0x76>
   42504:	6e63      	ldr	r3, [r4, #100]	@ 0x64
   42506:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
   42508:	601a      	str	r2, [r3, #0]
   4250a:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
   4250c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
   4250e:	429a      	cmp	r2, r3
   42510:	d04e      	beq.n	425b0 <nonblocking_write_sm+0xc0>
   42512:	b004      	add	sp, #16
   42514:	bd70      	pop	{r4, r5, r6, pc}
   42516:	f7f3 fe4b 	bl	361b0 <am_hal_interrupt_master_disable>
   4251a:	e9d4 1517 	ldrd	r1, r5, [r4, #92]	@ 0x5c
   4251e:	9002      	str	r0, [sp, #8]
   42520:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
   42522:	f894 307c 	ldrb.w	r3, [r4, #124]	@ 0x7c
   42526:	1aad      	subs	r5, r5, r2
   42528:	4411      	add	r1, r2
   4252a:	2b00      	cmp	r3, #0
   4252c:	d14f      	bne.n	425ce <nonblocking_write_sm+0xde>
   4252e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
   42530:	b17d      	cbz	r5, 42552 <nonblocking_write_sm+0x62>
   42532:	f500 2080 	add.w	r0, r0, #262144	@ 0x40000
   42536:	301c      	adds	r0, #28
   42538:	0300      	lsls	r0, r0, #12
   4253a:	3901      	subs	r1, #1
   4253c:	e005      	b.n	4254a <nonblocking_write_sm+0x5a>
   4253e:	3301      	adds	r3, #1
   42540:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   42544:	6002      	str	r2, [r0, #0]
   42546:	429d      	cmp	r5, r3
   42548:	d003      	beq.n	42552 <nonblocking_write_sm+0x62>
   4254a:	6982      	ldr	r2, [r0, #24]
   4254c:	0696      	lsls	r6, r2, #26
   4254e:	d5f6      	bpl.n	4253e <nonblocking_write_sm+0x4e>
   42550:	461d      	mov	r5, r3
   42552:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
   42554:	442b      	add	r3, r5
   42556:	67a3      	str	r3, [r4, #120]	@ 0x78
   42558:	9802      	ldr	r0, [sp, #8]
   4255a:	f7f3 fe2d 	bl	361b8 <am_hal_interrupt_master_set>
   4255e:	f894 307c 	ldrb.w	r3, [r4, #124]	@ 0x7c
   42562:	2b00      	cmp	r3, #0
   42564:	d0ce      	beq.n	42504 <nonblocking_write_sm+0x14>
   42566:	6a65      	ldr	r5, [r4, #36]	@ 0x24
   42568:	f7f3 fe22 	bl	361b0 <am_hal_interrupt_master_disable>
   4256c:	f505 2580 	add.w	r5, r5, #262144	@ 0x40000
   42570:	351c      	adds	r5, #28
   42572:	9003      	str	r0, [sp, #12]
   42574:	032d      	lsls	r5, r5, #12
   42576:	f104 0680 	add.w	r6, r4, #128	@ 0x80
   4257a:	e00d      	b.n	42598 <nonblocking_write_sm+0xa8>
   4257c:	f000 fdba 	bl	430f4 <am_hal_queue_item_get>
   42580:	b190      	cbz	r0, 425a8 <nonblocking_write_sm+0xb8>
   42582:	6a62      	ldr	r2, [r4, #36]	@ 0x24
   42584:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
   42588:	321c      	adds	r2, #28
   4258a:	0312      	lsls	r2, r2, #12
   4258c:	6993      	ldr	r3, [r2, #24]
   4258e:	0699      	lsls	r1, r3, #26
   42590:	bf5c      	itt	pl
   42592:	f89d 3007 	ldrbpl.w	r3, [sp, #7]
   42596:	6013      	strpl	r3, [r2, #0]
   42598:	69ab      	ldr	r3, [r5, #24]
   4259a:	069b      	lsls	r3, r3, #26
   4259c:	f04f 0201 	mov.w	r2, #1
   425a0:	f10d 0107 	add.w	r1, sp, #7
   425a4:	4630      	mov	r0, r6
   425a6:	d5e9      	bpl.n	4257c <nonblocking_write_sm+0x8c>
   425a8:	9803      	ldr	r0, [sp, #12]
   425aa:	f7f3 fe05 	bl	361b8 <am_hal_interrupt_master_set>
   425ae:	e7a9      	b.n	42504 <nonblocking_write_sm+0x14>
   425b0:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
   425b4:	2b00      	cmp	r3, #0
   425b6:	d0ac      	beq.n	42512 <nonblocking_write_sm+0x22>
   425b8:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
   425ba:	2000      	movs	r0, #0
   425bc:	f884 0054 	strb.w	r0, [r4, #84]	@ 0x54
   425c0:	2b00      	cmp	r3, #0
   425c2:	d0a6      	beq.n	42512 <nonblocking_write_sm+0x22>
   425c4:	6f21      	ldr	r1, [r4, #112]	@ 0x70
   425c6:	b004      	add	sp, #16
   425c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   425cc:	4718      	bx	r3
   425ce:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
   425d2:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
   425d6:	1a9b      	subs	r3, r3, r2
   425d8:	429d      	cmp	r5, r3
   425da:	bf28      	it	cs
   425dc:	461d      	movcs	r5, r3
   425de:	462a      	mov	r2, r5
   425e0:	f104 0080 	add.w	r0, r4, #128	@ 0x80
   425e4:	f000 fd46 	bl	43074 <am_hal_queue_item_add>
   425e8:	2800      	cmp	r0, #0
   425ea:	d1b2      	bne.n	42552 <nonblocking_write_sm+0x62>
   425ec:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
   425ee:	f884 0054 	strb.w	r0, [r4, #84]	@ 0x54
   425f2:	2b00      	cmp	r3, #0
   425f4:	d0ad      	beq.n	42552 <nonblocking_write_sm+0x62>
   425f6:	6f21      	ldr	r1, [r4, #112]	@ 0x70
   425f8:	2001      	movs	r0, #1
   425fa:	4798      	blx	r3
   425fc:	9802      	ldr	r0, [sp, #8]
   425fe:	b004      	add	sp, #16
   42600:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   42604:	f7f3 bdd8 	b.w	361b8 <am_hal_interrupt_master_set>

00042608 <am_hal_uart_initialize>:
   42608:	2803      	cmp	r0, #3
   4260a:	d82a      	bhi.n	42662 <am_hal_uart_initialize+0x5a>
   4260c:	b369      	cbz	r1, 4266a <am_hal_uart_initialize+0x62>
   4260e:	680b      	ldr	r3, [r1, #0]
   42610:	b12b      	cbz	r3, 4261e <am_hal_uart_initialize+0x16>
   42612:	681b      	ldr	r3, [r3, #0]
   42614:	4a16      	ldr	r2, [pc, #88]	@ (42670 <am_hal_uart_initialize+0x68>)
   42616:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   4261a:	4293      	cmp	r3, r2
   4261c:	d023      	beq.n	42666 <am_hal_uart_initialize+0x5e>
   4261e:	b410      	push	{r4}
   42620:	22b8      	movs	r2, #184	@ 0xb8
   42622:	4c14      	ldr	r4, [pc, #80]	@ (42674 <am_hal_uart_initialize+0x6c>)
   42624:	fb00 f202 	mul.w	r2, r0, r2
   42628:	18a3      	adds	r3, r4, r2
   4262a:	6258      	str	r0, [r3, #36]	@ 0x24
   4262c:	58a0      	ldr	r0, [r4, r2]
   4262e:	f000 4c7e 	and.w	ip, r0, #4261412864	@ 0xfe000000
   42632:	480f      	ldr	r0, [pc, #60]	@ (42670 <am_hal_uart_initialize+0x68>)
   42634:	ea4c 0000 	orr.w	r0, ip, r0
   42638:	50a0      	str	r0, [r4, r2]
   4263a:	2000      	movs	r0, #0
   4263c:	2201      	movs	r2, #1
   4263e:	6798      	str	r0, [r3, #120]	@ 0x78
   42640:	7118      	strb	r0, [r3, #4]
   42642:	6518      	str	r0, [r3, #80]	@ 0x50
   42644:	6298      	str	r0, [r3, #40]	@ 0x28
   42646:	f883 002c 	strb.w	r0, [r3, #44]	@ 0x2c
   4264a:	f883 0054 	strb.w	r0, [r3, #84]	@ 0x54
   4264e:	f883 007c 	strb.w	r0, [r3, #124]	@ 0x7c
   42652:	f883 0098 	strb.w	r0, [r3, #152]	@ 0x98
   42656:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
   4265a:	f85d 4b04 	ldr.w	r4, [sp], #4
   4265e:	600b      	str	r3, [r1, #0]
   42660:	4770      	bx	lr
   42662:	2005      	movs	r0, #5
   42664:	4770      	bx	lr
   42666:	2007      	movs	r0, #7
   42668:	4770      	bx	lr
   4266a:	2006      	movs	r0, #6
   4266c:	4770      	bx	lr
   4266e:	bf00      	nop
   42670:	01ea9e06 	.word	0x01ea9e06
   42674:	1005bdbc 	.word	0x1005bdbc

00042678 <am_hal_uart_deinitialize>:
   42678:	b168      	cbz	r0, 42696 <am_hal_uart_deinitialize+0x1e>
   4267a:	6802      	ldr	r2, [r0, #0]
   4267c:	4b07      	ldr	r3, [pc, #28]	@ (4269c <am_hal_uart_deinitialize+0x24>)
   4267e:	f022 417e 	bic.w	r1, r2, #4261412864	@ 0xfe000000
   42682:	4299      	cmp	r1, r3
   42684:	d107      	bne.n	42696 <am_hal_uart_deinitialize+0x1e>
   42686:	2300      	movs	r3, #0
   42688:	f002 427e 	and.w	r2, r2, #4261412864	@ 0xfe000000
   4268c:	6243      	str	r3, [r0, #36]	@ 0x24
   4268e:	6002      	str	r2, [r0, #0]
   42690:	7103      	strb	r3, [r0, #4]
   42692:	4618      	mov	r0, r3
   42694:	4770      	bx	lr
   42696:	2002      	movs	r0, #2
   42698:	4770      	bx	lr
   4269a:	bf00      	nop
   4269c:	01ea9e06 	.word	0x01ea9e06

000426a0 <am_hal_uart_power_control>:
   426a0:	b530      	push	{r4, r5, lr}
   426a2:	4604      	mov	r4, r0
   426a4:	482b      	ldr	r0, [pc, #172]	@ (42754 <am_hal_uart_power_control+0xb4>)
   426a6:	6823      	ldr	r3, [r4, #0]
   426a8:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   426ac:	4283      	cmp	r3, r0
   426ae:	b083      	sub	sp, #12
   426b0:	d145      	bne.n	4273e <am_hal_uart_power_control+0x9e>
   426b2:	6a65      	ldr	r5, [r4, #36]	@ 0x24
   426b4:	f105 0009 	add.w	r0, r5, #9
   426b8:	b2c0      	uxtb	r0, r0
   426ba:	b309      	cbz	r1, 42700 <am_hal_uart_power_control+0x60>
   426bc:	3901      	subs	r1, #1
   426be:	2901      	cmp	r1, #1
   426c0:	d83a      	bhi.n	42738 <am_hal_uart_power_control+0x98>
   426c2:	f505 2580 	add.w	r5, r5, #262144	@ 0x40000
   426c6:	351c      	adds	r5, #28
   426c8:	032d      	lsls	r5, r5, #12
   426ca:	b17a      	cbz	r2, 426ec <am_hal_uart_power_control+0x4c>
   426cc:	6a2a      	ldr	r2, [r5, #32]
   426ce:	60a2      	str	r2, [r4, #8]
   426d0:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
   426d2:	60e2      	str	r2, [r4, #12]
   426d4:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
   426d6:	6122      	str	r2, [r4, #16]
   426d8:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
   426da:	6162      	str	r2, [r4, #20]
   426dc:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
   426de:	61a2      	str	r2, [r4, #24]
   426e0:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
   426e2:	61e2      	str	r2, [r4, #28]
   426e4:	2301      	movs	r3, #1
   426e6:	6baa      	ldr	r2, [r5, #56]	@ 0x38
   426e8:	6222      	str	r2, [r4, #32]
   426ea:	7123      	strb	r3, [r4, #4]
   426ec:	2400      	movs	r4, #0
   426ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
   426f2:	646b      	str	r3, [r5, #68]	@ 0x44
   426f4:	632c      	str	r4, [r5, #48]	@ 0x30
   426f6:	f7f4 f9cd 	bl	36a94 <am_hal_pwrctrl_periph_disable>
   426fa:	4620      	mov	r0, r4
   426fc:	b003      	add	sp, #12
   426fe:	bd30      	pop	{r4, r5, pc}
   42700:	b302      	cbz	r2, 42744 <am_hal_uart_power_control+0xa4>
   42702:	7923      	ldrb	r3, [r4, #4]
   42704:	b323      	cbz	r3, 42750 <am_hal_uart_power_control+0xb0>
   42706:	f505 2580 	add.w	r5, r5, #262144	@ 0x40000
   4270a:	9101      	str	r1, [sp, #4]
   4270c:	351c      	adds	r5, #28
   4270e:	f7f4 f8f1 	bl	368f4 <am_hal_pwrctrl_periph_enable>
   42712:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   42716:	032d      	lsls	r5, r5, #12
   42718:	9901      	ldr	r1, [sp, #4]
   4271a:	622a      	str	r2, [r5, #32]
   4271c:	626b      	str	r3, [r5, #36]	@ 0x24
   4271e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   42722:	62aa      	str	r2, [r5, #40]	@ 0x28
   42724:	62eb      	str	r3, [r5, #44]	@ 0x2c
   42726:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   4272a:	632a      	str	r2, [r5, #48]	@ 0x30
   4272c:	636b      	str	r3, [r5, #52]	@ 0x34
   4272e:	6a23      	ldr	r3, [r4, #32]
   42730:	63ab      	str	r3, [r5, #56]	@ 0x38
   42732:	4608      	mov	r0, r1
   42734:	7121      	strb	r1, [r4, #4]
   42736:	e000      	b.n	4273a <am_hal_uart_power_control+0x9a>
   42738:	2006      	movs	r0, #6
   4273a:	b003      	add	sp, #12
   4273c:	bd30      	pop	{r4, r5, pc}
   4273e:	2002      	movs	r0, #2
   42740:	b003      	add	sp, #12
   42742:	bd30      	pop	{r4, r5, pc}
   42744:	9201      	str	r2, [sp, #4]
   42746:	f7f4 f8d5 	bl	368f4 <am_hal_pwrctrl_periph_enable>
   4274a:	9a01      	ldr	r2, [sp, #4]
   4274c:	4610      	mov	r0, r2
   4274e:	e7f4      	b.n	4273a <am_hal_uart_power_control+0x9a>
   42750:	2007      	movs	r0, #7
   42752:	e7f2      	b.n	4273a <am_hal_uart_power_control+0x9a>
   42754:	01ea9e06 	.word	0x01ea9e06

00042758 <am_hal_uart_configure>:
   42758:	6803      	ldr	r3, [r0, #0]
   4275a:	4a50      	ldr	r2, [pc, #320]	@ (4289c <am_hal_uart_configure+0x144>)
   4275c:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   42760:	4293      	cmp	r3, r2
   42762:	b470      	push	{r4, r5, r6}
   42764:	f040 808f 	bne.w	42886 <am_hal_uart_configure+0x12e>
   42768:	6a43      	ldr	r3, [r0, #36]	@ 0x24
   4276a:	4d4d      	ldr	r5, [pc, #308]	@ (428a0 <am_hal_uart_configure+0x148>)
   4276c:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
   42770:	331c      	adds	r3, #28
   42772:	031b      	lsls	r3, r3, #12
   42774:	2200      	movs	r2, #0
   42776:	631a      	str	r2, [r3, #48]	@ 0x30
   42778:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
   4277a:	f042 0208 	orr.w	r2, r2, #8
   4277e:	631a      	str	r2, [r3, #48]	@ 0x30
   42780:	680c      	ldr	r4, [r1, #0]
   42782:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
   42784:	42ac      	cmp	r4, r5
   42786:	bf8c      	ite	hi
   42788:	2505      	movhi	r5, #5
   4278a:	2501      	movls	r5, #1
   4278c:	f365 1206 	bfi	r2, r5, #4, #3
   42790:	631a      	str	r2, [r3, #48]	@ 0x30
   42792:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
   42794:	f36f 0200 	bfc	r2, #0, #1
   42798:	631a      	str	r2, [r3, #48]	@ 0x30
   4279a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
   4279c:	f36f 2249 	bfc	r2, #9, #1
   427a0:	631a      	str	r2, [r3, #48]	@ 0x30
   427a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
   427a4:	f36f 2208 	bfc	r2, #8, #1
   427a8:	631a      	str	r2, [r3, #48]	@ 0x30
   427aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
   427ac:	f3c2 1202 	ubfx	r2, r2, #4, #3
   427b0:	3a01      	subs	r2, #1
   427b2:	b2d2      	uxtb	r2, r2
   427b4:	2a04      	cmp	r2, #4
   427b6:	d860      	bhi.n	4287a <am_hal_uart_configure+0x122>
   427b8:	4d3a      	ldr	r5, [pc, #232]	@ (428a4 <am_hal_uart_configure+0x14c>)
   427ba:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
   427be:	0124      	lsls	r4, r4, #4
   427c0:	42a5      	cmp	r5, r4
   427c2:	ea4f 1285 	mov.w	r2, r5, lsl #6
   427c6:	fbb5 f6f4 	udiv	r6, r5, r4
   427ca:	fbb2 f2f4 	udiv	r2, r2, r4
   427ce:	eba2 1286 	sub.w	r2, r2, r6, lsl #6
   427d2:	d35e      	bcc.n	42892 <am_hal_uart_configure+0x13a>
   427d4:	625e      	str	r6, [r3, #36]	@ 0x24
   427d6:	629a      	str	r2, [r3, #40]	@ 0x28
   427d8:	0892      	lsrs	r2, r2, #2
   427da:	eb02 1206 	add.w	r2, r2, r6, lsl #4
   427de:	fbb5 f2f2 	udiv	r2, r5, r2
   427e2:	6282      	str	r2, [r0, #40]	@ 0x28
   427e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
   427e6:	f36f 328e 	bfc	r2, #14, #1
   427ea:	631a      	str	r2, [r3, #48]	@ 0x30
   427ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
   427ee:	f36f 32cf 	bfc	r2, #15, #1
   427f2:	631a      	str	r2, [r3, #48]	@ 0x30
   427f4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
   427f6:	890a      	ldrh	r2, [r1, #8]
   427f8:	4302      	orrs	r2, r0
   427fa:	631a      	str	r2, [r3, #48]	@ 0x30
   427fc:	794a      	ldrb	r2, [r1, #5]
   427fe:	2a00      	cmp	r2, #0
   42800:	d045      	beq.n	4288e <am_hal_uart_configure+0x136>
   42802:	2a01      	cmp	r2, #1
   42804:	d000      	beq.n	42808 <am_hal_uart_configure+0xb0>
   42806:	2200      	movs	r2, #0
   42808:	4614      	mov	r4, r2
   4280a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
   4280c:	f36f 0000 	bfc	r0, #0, #1
   42810:	62d8      	str	r0, [r3, #44]	@ 0x2c
   42812:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
   42814:	f364 0041 	bfi	r0, r4, #1, #1
   42818:	62d8      	str	r0, [r3, #44]	@ 0x2c
   4281a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
   4281c:	f362 0082 	bfi	r0, r2, #2, #1
   42820:	62d8      	str	r0, [r3, #44]	@ 0x2c
   42822:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
   42824:	7988      	ldrb	r0, [r1, #6]
   42826:	f360 02c3 	bfi	r2, r0, #3, #1
   4282a:	62da      	str	r2, [r3, #44]	@ 0x2c
   4282c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
   4282e:	f042 0210 	orr.w	r2, r2, #16
   42832:	62da      	str	r2, [r3, #44]	@ 0x2c
   42834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
   42836:	7908      	ldrb	r0, [r1, #4]
   42838:	f360 1246 	bfi	r2, r0, #5, #2
   4283c:	62da      	str	r2, [r3, #44]	@ 0x2c
   4283e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
   42840:	f36f 12c7 	bfc	r2, #7, #1
   42844:	62da      	str	r2, [r3, #44]	@ 0x2c
   42846:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
   42848:	7a88      	ldrb	r0, [r1, #10]
   4284a:	f360 0202 	bfi	r2, r0, #0, #3
   4284e:	635a      	str	r2, [r3, #52]	@ 0x34
   42850:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
   42852:	7ac9      	ldrb	r1, [r1, #11]
   42854:	f361 02c5 	bfi	r2, r1, #3, #3
   42858:	635a      	str	r2, [r3, #52]	@ 0x34
   4285a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
   4285c:	f042 0201 	orr.w	r2, r2, #1
   42860:	631a      	str	r2, [r3, #48]	@ 0x30
   42862:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
   42864:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
   42868:	631a      	str	r2, [r3, #48]	@ 0x30
   4286a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
   4286c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   42870:	2400      	movs	r4, #0
   42872:	631a      	str	r2, [r3, #48]	@ 0x30
   42874:	4620      	mov	r0, r4
   42876:	bc70      	pop	{r4, r5, r6}
   42878:	4770      	bx	lr
   4287a:	2300      	movs	r3, #0
   4287c:	4c0a      	ldr	r4, [pc, #40]	@ (428a8 <am_hal_uart_configure+0x150>)
   4287e:	6283      	str	r3, [r0, #40]	@ 0x28
   42880:	4620      	mov	r0, r4
   42882:	bc70      	pop	{r4, r5, r6}
   42884:	4770      	bx	lr
   42886:	2402      	movs	r4, #2
   42888:	4620      	mov	r0, r4
   4288a:	bc70      	pop	{r4, r5, r6}
   4288c:	4770      	bx	lr
   4288e:	2401      	movs	r4, #1
   42890:	e7bb      	b.n	4280a <am_hal_uart_configure+0xb2>
   42892:	2300      	movs	r3, #0
   42894:	4c05      	ldr	r4, [pc, #20]	@ (428ac <am_hal_uart_configure+0x154>)
   42896:	6283      	str	r3, [r0, #40]	@ 0x28
   42898:	e7f2      	b.n	42880 <am_hal_uart_configure+0x128>
   4289a:	bf00      	nop
   4289c:	01ea9e06 	.word	0x01ea9e06
   428a0:	0016e360 	.word	0x0016e360
   428a4:	0004cbe0 	.word	0x0004cbe0
   428a8:	08000002 	.word	0x08000002
   428ac:	08000003 	.word	0x08000003

000428b0 <am_hal_uart_transfer>:
   428b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   428b2:	780b      	ldrb	r3, [r1, #0]
   428b4:	b08f      	sub	sp, #60	@ 0x3c
   428b6:	460d      	mov	r5, r1
   428b8:	4604      	mov	r4, r0
   428ba:	2b03      	cmp	r3, #3
   428bc:	f200 819e 	bhi.w	42bfc <am_hal_uart_transfer+0x34c>
   428c0:	e8df f003 	tbb	[pc, r3]
   428c4:	023dbb72 	.word	0x023dbb72
   428c8:	2800      	cmp	r0, #0
   428ca:	f000 8131 	beq.w	42b30 <am_hal_uart_transfer+0x280>
   428ce:	6803      	ldr	r3, [r0, #0]
   428d0:	4ab7      	ldr	r2, [pc, #732]	@ (42bb0 <am_hal_uart_transfer+0x300>)
   428d2:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   428d6:	4293      	cmp	r3, r2
   428d8:	f040 812a 	bne.w	42b30 <am_hal_uart_transfer+0x280>
   428dc:	68cb      	ldr	r3, [r1, #12]
   428de:	b10b      	cbz	r3, 428e4 <am_hal_uart_transfer+0x34>
   428e0:	2200      	movs	r2, #0
   428e2:	601a      	str	r2, [r3, #0]
   428e4:	f7f3 fc64 	bl	361b0 <am_hal_interrupt_master_disable>
   428e8:	f894 602c 	ldrb.w	r6, [r4, #44]	@ 0x2c
   428ec:	9004      	str	r0, [sp, #16]
   428ee:	2e00      	cmp	r6, #0
   428f0:	f040 812f 	bne.w	42b52 <am_hal_uart_transfer+0x2a2>
   428f4:	2301      	movs	r3, #1
   428f6:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
   428fa:	782b      	ldrb	r3, [r5, #0]
   428fc:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
   42900:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
   42904:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
   42908:	e9d5 2303 	ldrd	r2, r3, [r5, #12]
   4290c:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
   42910:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   42914:	69eb      	ldr	r3, [r5, #28]
   42916:	6526      	str	r6, [r4, #80]	@ 0x50
   42918:	64e3      	str	r3, [r4, #76]	@ 0x4c
   4291a:	e9c4 1211 	strd	r1, r2, [r4, #68]	@ 0x44
   4291e:	9804      	ldr	r0, [sp, #16]
   42920:	f7f3 fc4a 	bl	361b8 <am_hal_interrupt_master_set>
   42924:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
   42928:	2b00      	cmp	r3, #0
   4292a:	f040 8121 	bne.w	42b70 <am_hal_uart_transfer+0x2c0>
   4292e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
   42932:	2b00      	cmp	r3, #0
   42934:	f040 8109 	bne.w	42b4a <am_hal_uart_transfer+0x29a>
   42938:	2000      	movs	r0, #0
   4293a:	b00f      	add	sp, #60	@ 0x3c
   4293c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   4293e:	2800      	cmp	r0, #0
   42940:	f000 80f6 	beq.w	42b30 <am_hal_uart_transfer+0x280>
   42944:	6803      	ldr	r3, [r0, #0]
   42946:	4a9a      	ldr	r2, [pc, #616]	@ (42bb0 <am_hal_uart_transfer+0x300>)
   42948:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   4294c:	4293      	cmp	r3, r2
   4294e:	f040 80ef 	bne.w	42b30 <am_hal_uart_transfer+0x280>
   42952:	68cb      	ldr	r3, [r1, #12]
   42954:	b10b      	cbz	r3, 4295a <am_hal_uart_transfer+0xaa>
   42956:	2200      	movs	r2, #0
   42958:	601a      	str	r2, [r3, #0]
   4295a:	f7f3 fc29 	bl	361b0 <am_hal_interrupt_master_disable>
   4295e:	f894 6054 	ldrb.w	r6, [r4, #84]	@ 0x54
   42962:	9006      	str	r0, [sp, #24]
   42964:	2e00      	cmp	r6, #0
   42966:	f040 80f9 	bne.w	42b5c <am_hal_uart_transfer+0x2ac>
   4296a:	2301      	movs	r3, #1
   4296c:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
   42970:	782b      	ldrb	r3, [r5, #0]
   42972:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
   42976:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
   4297a:	e9c4 2317 	strd	r2, r3, [r4, #92]	@ 0x5c
   4297e:	e9d5 2303 	ldrd	r2, r3, [r5, #12]
   42982:	e9c4 2319 	strd	r2, r3, [r4, #100]	@ 0x64
   42986:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   4298a:	69eb      	ldr	r3, [r5, #28]
   4298c:	67a6      	str	r6, [r4, #120]	@ 0x78
   4298e:	f884 60b4 	strb.w	r6, [r4, #180]	@ 0xb4
   42992:	e9c4 121b 	strd	r1, r2, [r4, #108]	@ 0x6c
   42996:	9806      	ldr	r0, [sp, #24]
   42998:	6763      	str	r3, [r4, #116]	@ 0x74
   4299a:	f7f3 fc0d 	bl	361b8 <am_hal_interrupt_master_set>
   4299e:	4620      	mov	r0, r4
   429a0:	f7ff fda6 	bl	424f0 <nonblocking_write_sm>
   429a4:	4630      	mov	r0, r6
   429a6:	e0c4      	b.n	42b32 <am_hal_uart_transfer+0x282>
   429a8:	2800      	cmp	r0, #0
   429aa:	f000 80c1 	beq.w	42b30 <am_hal_uart_transfer+0x280>
   429ae:	6803      	ldr	r3, [r0, #0]
   429b0:	4a7f      	ldr	r2, [pc, #508]	@ (42bb0 <am_hal_uart_transfer+0x300>)
   429b2:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   429b6:	4293      	cmp	r3, r2
   429b8:	f040 80ba 	bne.w	42b30 <am_hal_uart_transfer+0x280>
   429bc:	68cb      	ldr	r3, [r1, #12]
   429be:	b10b      	cbz	r3, 429c4 <am_hal_uart_transfer+0x114>
   429c0:	2200      	movs	r2, #0
   429c2:	601a      	str	r2, [r3, #0]
   429c4:	f7f3 fbf4 	bl	361b0 <am_hal_interrupt_master_disable>
   429c8:	f894 6054 	ldrb.w	r6, [r4, #84]	@ 0x54
   429cc:	9000      	str	r0, [sp, #0]
   429ce:	2e00      	cmp	r6, #0
   429d0:	f040 80b1 	bne.w	42b36 <am_hal_uart_transfer+0x286>
   429d4:	2301      	movs	r3, #1
   429d6:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
   429da:	782b      	ldrb	r3, [r5, #0]
   429dc:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
   429e0:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
   429e4:	e9c4 2317 	strd	r2, r3, [r4, #92]	@ 0x5c
   429e8:	e9d5 2303 	ldrd	r2, r3, [r5, #12]
   429ec:	e9c4 2319 	strd	r2, r3, [r4, #100]	@ 0x64
   429f0:	e9d5 2305 	ldrd	r2, r3, [r5, #20]
   429f4:	e9c4 231b 	strd	r2, r3, [r4, #108]	@ 0x6c
   429f8:	69eb      	ldr	r3, [r5, #28]
   429fa:	67a6      	str	r6, [r4, #120]	@ 0x78
   429fc:	f884 60b4 	strb.w	r6, [r4, #180]	@ 0xb4
   42a00:	9800      	ldr	r0, [sp, #0]
   42a02:	6763      	str	r3, [r4, #116]	@ 0x74
   42a04:	f7f3 fbd8 	bl	361b8 <am_hal_interrupt_master_set>
   42a08:	4620      	mov	r0, r4
   42a0a:	f7ff fd71 	bl	424f0 <nonblocking_write_sm>
   42a0e:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
   42a12:	2b00      	cmp	r3, #0
   42a14:	d090      	beq.n	42938 <am_hal_uart_transfer+0x88>
   42a16:	4620      	mov	r0, r4
   42a18:	f7ff fd6a 	bl	424f0 <nonblocking_write_sm>
   42a1c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   42a20:	f7f4 fe1c 	bl	3765c <am_hal_delay_us>
   42a24:	692b      	ldr	r3, [r5, #16]
   42a26:	1c5a      	adds	r2, r3, #1
   42a28:	d0f1      	beq.n	42a0e <am_hal_uart_transfer+0x15e>
   42a2a:	3601      	adds	r6, #1
   42a2c:	42b3      	cmp	r3, r6
   42a2e:	d1ee      	bne.n	42a0e <am_hal_uart_transfer+0x15e>
   42a30:	2300      	movs	r3, #0
   42a32:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
   42a36:	2004      	movs	r0, #4
   42a38:	e07b      	b.n	42b32 <am_hal_uart_transfer+0x282>
   42a3a:	2800      	cmp	r0, #0
   42a3c:	d078      	beq.n	42b30 <am_hal_uart_transfer+0x280>
   42a3e:	6803      	ldr	r3, [r0, #0]
   42a40:	4a5b      	ldr	r2, [pc, #364]	@ (42bb0 <am_hal_uart_transfer+0x300>)
   42a42:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   42a46:	4293      	cmp	r3, r2
   42a48:	d172      	bne.n	42b30 <am_hal_uart_transfer+0x280>
   42a4a:	68cb      	ldr	r3, [r1, #12]
   42a4c:	b10b      	cbz	r3, 42a52 <am_hal_uart_transfer+0x1a2>
   42a4e:	2200      	movs	r2, #0
   42a50:	601a      	str	r2, [r3, #0]
   42a52:	f7f3 fbad 	bl	361b0 <am_hal_interrupt_master_disable>
   42a56:	f894 602c 	ldrb.w	r6, [r4, #44]	@ 0x2c
   42a5a:	9001      	str	r0, [sp, #4]
   42a5c:	2e00      	cmp	r6, #0
   42a5e:	f040 8082 	bne.w	42b66 <am_hal_uart_transfer+0x2b6>
   42a62:	2301      	movs	r3, #1
   42a64:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
   42a68:	782b      	ldrb	r3, [r5, #0]
   42a6a:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
   42a6e:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
   42a72:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
   42a76:	e9d5 2303 	ldrd	r2, r3, [r5, #12]
   42a7a:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
   42a7e:	e9d5 2305 	ldrd	r2, r3, [r5, #20]
   42a82:	e9c4 2311 	strd	r2, r3, [r4, #68]	@ 0x44
   42a86:	69eb      	ldr	r3, [r5, #28]
   42a88:	6526      	str	r6, [r4, #80]	@ 0x50
   42a8a:	64e3      	str	r3, [r4, #76]	@ 0x4c
   42a8c:	9801      	ldr	r0, [sp, #4]
   42a8e:	f7f3 fb93 	bl	361b8 <am_hal_interrupt_master_set>
   42a92:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
   42a96:	2b00      	cmp	r3, #0
   42a98:	f040 8090 	bne.w	42bbc <am_hal_uart_transfer+0x30c>
   42a9c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
   42aa0:	2b00      	cmp	r3, #0
   42aa2:	f43f af49 	beq.w	42938 <am_hal_uart_transfer+0x88>
   42aa6:	4620      	mov	r0, r4
   42aa8:	f7ff fcc8 	bl	4243c <nonblocking_read_sm.part.0>
   42aac:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
   42ab0:	2b00      	cmp	r3, #0
   42ab2:	f43f af41 	beq.w	42938 <am_hal_uart_transfer+0x88>
   42ab6:	2600      	movs	r6, #0
   42ab8:	f104 079c 	add.w	r7, r4, #156	@ 0x9c
   42abc:	e011      	b.n	42ae2 <am_hal_uart_transfer+0x232>
   42abe:	4620      	mov	r0, r4
   42ac0:	f7ff fcbc 	bl	4243c <nonblocking_read_sm.part.0>
   42ac4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   42ac8:	f7f4 fdc8 	bl	3765c <am_hal_delay_us>
   42acc:	692b      	ldr	r3, [r5, #16]
   42ace:	1c5a      	adds	r2, r3, #1
   42ad0:	d002      	beq.n	42ad8 <am_hal_uart_transfer+0x228>
   42ad2:	3601      	adds	r6, #1
   42ad4:	42b3      	cmp	r3, r6
   42ad6:	d033      	beq.n	42b40 <am_hal_uart_transfer+0x290>
   42ad8:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
   42adc:	2b00      	cmp	r3, #0
   42ade:	f43f af2b 	beq.w	42938 <am_hal_uart_transfer+0x88>
   42ae2:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
   42ae6:	2b00      	cmp	r3, #0
   42ae8:	d0e9      	beq.n	42abe <am_hal_uart_transfer+0x20e>
   42aea:	f7f3 fb61 	bl	361b0 <am_hal_interrupt_master_disable>
   42aee:	9003      	str	r0, [sp, #12]
   42af0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
   42af2:	f500 2080 	add.w	r0, r0, #262144	@ 0x40000
   42af6:	301c      	adds	r0, #28
   42af8:	0300      	lsls	r0, r0, #12
   42afa:	a906      	add	r1, sp, #24
   42afc:	2200      	movs	r2, #0
   42afe:	6983      	ldr	r3, [r0, #24]
   42b00:	06db      	lsls	r3, r3, #27
   42b02:	d409      	bmi.n	42b18 <am_hal_uart_transfer+0x268>
   42b04:	6803      	ldr	r3, [r0, #0]
   42b06:	f413 6f70 	tst.w	r3, #3840	@ 0xf00
   42b0a:	f102 0201 	add.w	r2, r2, #1
   42b0e:	d107      	bne.n	42b20 <am_hal_uart_transfer+0x270>
   42b10:	2a20      	cmp	r2, #32
   42b12:	f801 3b01 	strb.w	r3, [r1], #1
   42b16:	d1f2      	bne.n	42afe <am_hal_uart_transfer+0x24e>
   42b18:	a906      	add	r1, sp, #24
   42b1a:	4638      	mov	r0, r7
   42b1c:	f000 faaa 	bl	43074 <am_hal_queue_item_add>
   42b20:	9803      	ldr	r0, [sp, #12]
   42b22:	f7f3 fb49 	bl	361b8 <am_hal_interrupt_master_set>
   42b26:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
   42b2a:	2b00      	cmp	r3, #0
   42b2c:	d0ca      	beq.n	42ac4 <am_hal_uart_transfer+0x214>
   42b2e:	e7c6      	b.n	42abe <am_hal_uart_transfer+0x20e>
   42b30:	2002      	movs	r0, #2
   42b32:	b00f      	add	sp, #60	@ 0x3c
   42b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
   42b36:	9800      	ldr	r0, [sp, #0]
   42b38:	f7f3 fb3e 	bl	361b8 <am_hal_interrupt_master_set>
   42b3c:	481d      	ldr	r0, [pc, #116]	@ (42bb4 <am_hal_uart_transfer+0x304>)
   42b3e:	e7f8      	b.n	42b32 <am_hal_uart_transfer+0x282>
   42b40:	2300      	movs	r3, #0
   42b42:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
   42b46:	2004      	movs	r0, #4
   42b48:	e7f3      	b.n	42b32 <am_hal_uart_transfer+0x282>
   42b4a:	4620      	mov	r0, r4
   42b4c:	f7ff fc76 	bl	4243c <nonblocking_read_sm.part.0>
   42b50:	e6f2      	b.n	42938 <am_hal_uart_transfer+0x88>
   42b52:	9804      	ldr	r0, [sp, #16]
   42b54:	f7f3 fb30 	bl	361b8 <am_hal_interrupt_master_set>
   42b58:	4817      	ldr	r0, [pc, #92]	@ (42bb8 <am_hal_uart_transfer+0x308>)
   42b5a:	e7ea      	b.n	42b32 <am_hal_uart_transfer+0x282>
   42b5c:	9806      	ldr	r0, [sp, #24]
   42b5e:	f7f3 fb2b 	bl	361b8 <am_hal_interrupt_master_set>
   42b62:	4814      	ldr	r0, [pc, #80]	@ (42bb4 <am_hal_uart_transfer+0x304>)
   42b64:	e7e5      	b.n	42b32 <am_hal_uart_transfer+0x282>
   42b66:	9801      	ldr	r0, [sp, #4]
   42b68:	f7f3 fb26 	bl	361b8 <am_hal_interrupt_master_set>
   42b6c:	4812      	ldr	r0, [pc, #72]	@ (42bb8 <am_hal_uart_transfer+0x308>)
   42b6e:	e7e0      	b.n	42b32 <am_hal_uart_transfer+0x282>
   42b70:	f7f3 fb1e 	bl	361b0 <am_hal_interrupt_master_disable>
   42b74:	6a63      	ldr	r3, [r4, #36]	@ 0x24
   42b76:	9005      	str	r0, [sp, #20]
   42b78:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
   42b7c:	331c      	adds	r3, #28
   42b7e:	a906      	add	r1, sp, #24
   42b80:	0318      	lsls	r0, r3, #12
   42b82:	460d      	mov	r5, r1
   42b84:	6983      	ldr	r3, [r0, #24]
   42b86:	06db      	lsls	r3, r3, #27
   42b88:	d409      	bmi.n	42b9e <am_hal_uart_transfer+0x2ee>
   42b8a:	6803      	ldr	r3, [r0, #0]
   42b8c:	f413 6f70 	tst.w	r3, #3840	@ 0xf00
   42b90:	f106 0601 	add.w	r6, r6, #1
   42b94:	d108      	bne.n	42ba8 <am_hal_uart_transfer+0x2f8>
   42b96:	2e20      	cmp	r6, #32
   42b98:	f805 3b01 	strb.w	r3, [r5], #1
   42b9c:	d1f2      	bne.n	42b84 <am_hal_uart_transfer+0x2d4>
   42b9e:	4632      	mov	r2, r6
   42ba0:	f104 009c 	add.w	r0, r4, #156	@ 0x9c
   42ba4:	f000 fa66 	bl	43074 <am_hal_queue_item_add>
   42ba8:	9805      	ldr	r0, [sp, #20]
   42baa:	f7f3 fb05 	bl	361b8 <am_hal_interrupt_master_set>
   42bae:	e6be      	b.n	4292e <am_hal_uart_transfer+0x7e>
   42bb0:	01ea9e06 	.word	0x01ea9e06
   42bb4:	08000004 	.word	0x08000004
   42bb8:	08000005 	.word	0x08000005
   42bbc:	f7f3 faf8 	bl	361b0 <am_hal_interrupt_master_disable>
   42bc0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
   42bc2:	9002      	str	r0, [sp, #8]
   42bc4:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
   42bc8:	331c      	adds	r3, #28
   42bca:	a906      	add	r1, sp, #24
   42bcc:	4632      	mov	r2, r6
   42bce:	0318      	lsls	r0, r3, #12
   42bd0:	460e      	mov	r6, r1
   42bd2:	6983      	ldr	r3, [r0, #24]
   42bd4:	06df      	lsls	r7, r3, #27
   42bd6:	d409      	bmi.n	42bec <am_hal_uart_transfer+0x33c>
   42bd8:	6803      	ldr	r3, [r0, #0]
   42bda:	f413 6f70 	tst.w	r3, #3840	@ 0xf00
   42bde:	f102 0201 	add.w	r2, r2, #1
   42be2:	d107      	bne.n	42bf4 <am_hal_uart_transfer+0x344>
   42be4:	2a20      	cmp	r2, #32
   42be6:	f806 3b01 	strb.w	r3, [r6], #1
   42bea:	d1f2      	bne.n	42bd2 <am_hal_uart_transfer+0x322>
   42bec:	f104 009c 	add.w	r0, r4, #156	@ 0x9c
   42bf0:	f000 fa40 	bl	43074 <am_hal_queue_item_add>
   42bf4:	9802      	ldr	r0, [sp, #8]
   42bf6:	f7f3 fadf 	bl	361b8 <am_hal_interrupt_master_set>
   42bfa:	e74f      	b.n	42a9c <am_hal_uart_transfer+0x1ec>
   42bfc:	2001      	movs	r0, #1
   42bfe:	e798      	b.n	42b32 <am_hal_uart_transfer+0x282>

00042c00 <am_hal_uart_tx_flush>:
   42c00:	f890 30b4 	ldrb.w	r3, [r0, #180]	@ 0xb4
   42c04:	2b00      	cmp	r3, #0
   42c06:	d142      	bne.n	42c8e <am_hal_uart_tx_flush+0x8e>
   42c08:	b570      	push	{r4, r5, r6, lr}
   42c0a:	6a45      	ldr	r5, [r0, #36]	@ 0x24
   42c0c:	f505 2580 	add.w	r5, r5, #262144	@ 0x40000
   42c10:	351c      	adds	r5, #28
   42c12:	032d      	lsls	r5, r5, #12
   42c14:	4604      	mov	r4, r0
   42c16:	6bab      	ldr	r3, [r5, #56]	@ 0x38
   42c18:	07d9      	lsls	r1, r3, #31
   42c1a:	d512      	bpl.n	42c42 <am_hal_uart_tx_flush+0x42>
   42c1c:	f890 30b4 	ldrb.w	r3, [r0, #180]	@ 0xb4
   42c20:	b96b      	cbnz	r3, 42c3e <am_hal_uart_tx_flush+0x3e>
   42c22:	4d1c      	ldr	r5, [pc, #112]	@ (42c94 <am_hal_uart_tx_flush+0x94>)
   42c24:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
   42c26:	fbb5 f3f3 	udiv	r3, r5, r3
   42c2a:	3301      	adds	r3, #1
   42c2c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   42c30:	0058      	lsls	r0, r3, #1
   42c32:	f7f4 fd13 	bl	3765c <am_hal_delay_us>
   42c36:	f894 30b4 	ldrb.w	r3, [r4, #180]	@ 0xb4
   42c3a:	2b00      	cmp	r3, #0
   42c3c:	d0f2      	beq.n	42c24 <am_hal_uart_tx_flush+0x24>
   42c3e:	2000      	movs	r0, #0
   42c40:	bd70      	pop	{r4, r5, r6, pc}
   42c42:	f890 307c 	ldrb.w	r3, [r0, #124]	@ 0x7c
   42c46:	b183      	cbz	r3, 42c6a <am_hal_uart_tx_flush+0x6a>
   42c48:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
   42c4c:	b16b      	cbz	r3, 42c6a <am_hal_uart_tx_flush+0x6a>
   42c4e:	4e11      	ldr	r6, [pc, #68]	@ (42c94 <am_hal_uart_tx_flush+0x94>)
   42c50:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
   42c52:	fbb6 f0f0 	udiv	r0, r6, r0
   42c56:	3001      	adds	r0, #1
   42c58:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   42c5c:	0040      	lsls	r0, r0, #1
   42c5e:	f7f4 fcfd 	bl	3765c <am_hal_delay_us>
   42c62:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
   42c66:	2b00      	cmp	r3, #0
   42c68:	d1f2      	bne.n	42c50 <am_hal_uart_tx_flush+0x50>
   42c6a:	69ab      	ldr	r3, [r5, #24]
   42c6c:	071a      	lsls	r2, r3, #28
   42c6e:	d5e6      	bpl.n	42c3e <am_hal_uart_tx_flush+0x3e>
   42c70:	4e08      	ldr	r6, [pc, #32]	@ (42c94 <am_hal_uart_tx_flush+0x94>)
   42c72:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
   42c74:	fbb6 f3f3 	udiv	r3, r6, r3
   42c78:	3301      	adds	r3, #1
   42c7a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   42c7e:	0058      	lsls	r0, r3, #1
   42c80:	f7f4 fcec 	bl	3765c <am_hal_delay_us>
   42c84:	69ab      	ldr	r3, [r5, #24]
   42c86:	071b      	lsls	r3, r3, #28
   42c88:	d4f3      	bmi.n	42c72 <am_hal_uart_tx_flush+0x72>
   42c8a:	2000      	movs	r0, #0
   42c8c:	bd70      	pop	{r4, r5, r6, pc}
   42c8e:	2000      	movs	r0, #0
   42c90:	4770      	bx	lr
   42c92:	bf00      	nop
   42c94:	000f4240 	.word	0x000f4240

00042c98 <am_hal_cmdq_init>:
   42c98:	280a      	cmp	r0, #10
   42c9a:	d849      	bhi.n	42d30 <am_hal_cmdq_init+0x98>
   42c9c:	2900      	cmp	r1, #0
   42c9e:	d04b      	beq.n	42d38 <am_hal_cmdq_init+0xa0>
   42ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
   42ca2:	684e      	ldr	r6, [r1, #4]
   42ca4:	2e00      	cmp	r6, #0
   42ca6:	d041      	beq.n	42d2c <am_hal_cmdq_init+0x94>
   42ca8:	2a00      	cmp	r2, #0
   42caa:	d03f      	beq.n	42d2c <am_hal_cmdq_init+0x94>
   42cac:	680c      	ldr	r4, [r1, #0]
   42cae:	2c01      	cmp	r4, #1
   42cb0:	d93c      	bls.n	42d2c <am_hal_cmdq_init+0x94>
   42cb2:	4f22      	ldr	r7, [pc, #136]	@ (42d3c <am_hal_cmdq_init+0xa4>)
   42cb4:	f04f 0e2c 	mov.w	lr, #44	@ 0x2c
   42cb8:	fb0e fe00 	mul.w	lr, lr, r0
   42cbc:	eb07 030e 	add.w	r3, r7, lr
   42cc0:	78dd      	ldrb	r5, [r3, #3]
   42cc2:	f015 0501 	ands.w	r5, r5, #1
   42cc6:	d135      	bne.n	42d34 <am_hal_cmdq_init+0x9c>
   42cc8:	00e4      	lsls	r4, r4, #3
   42cca:	619c      	str	r4, [r3, #24]
   42ccc:	4434      	add	r4, r6
   42cce:	e9c3 6401 	strd	r6, r4, [r3, #4]
   42cd2:	e9c3 6604 	strd	r6, r6, [r3, #16]
   42cd6:	60de      	str	r6, [r3, #12]
   42cd8:	eb00 0c80 	add.w	ip, r0, r0, lsl #2
   42cdc:	4818      	ldr	r0, [pc, #96]	@ (42d40 <am_hal_cmdq_init+0xa8>)
   42cde:	f857 400e 	ldr.w	r4, [r7, lr]
   42ce2:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
   42ce6:	f8df c05c 	ldr.w	ip, [pc, #92]	@ 42d44 <am_hal_cmdq_init+0xac>
   42cea:	f004 447c 	and.w	r4, r4, #4227858432	@ 0xfc000000
   42cee:	ea44 040c 	orr.w	r4, r4, ip
   42cf2:	f847 400e 	str.w	r4, [r7, lr]
   42cf6:	6258      	str	r0, [r3, #36]	@ 0x24
   42cf8:	6880      	ldr	r0, [r0, #8]
   42cfa:	e9c3 5507 	strd	r5, r5, [r3, #28]
   42cfe:	6005      	str	r5, [r0, #0]
   42d00:	6a58      	ldr	r0, [r3, #36]	@ 0x24
   42d02:	68c0      	ldr	r0, [r0, #12]
   42d04:	6005      	str	r5, [r0, #0]
   42d06:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
   42d08:	4628      	mov	r0, r5
   42d0a:	e9d4 5704 	ldrd	r5, r7, [r4, #16]
   42d0e:	682c      	ldr	r4, [r5, #0]
   42d10:	433c      	orrs	r4, r7
   42d12:	602c      	str	r4, [r5, #0]
   42d14:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
   42d16:	6864      	ldr	r4, [r4, #4]
   42d18:	6026      	str	r6, [r4, #0]
   42d1a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
   42d1c:	7a09      	ldrb	r1, [r1, #8]
   42d1e:	6824      	ldr	r4, [r4, #0]
   42d20:	0049      	lsls	r1, r1, #1
   42d22:	f001 0102 	and.w	r1, r1, #2
   42d26:	6021      	str	r1, [r4, #0]
   42d28:	6013      	str	r3, [r2, #0]
   42d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   42d2c:	2006      	movs	r0, #6
   42d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   42d30:	2005      	movs	r0, #5
   42d32:	4770      	bx	lr
   42d34:	2007      	movs	r0, #7
   42d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   42d38:	2006      	movs	r0, #6
   42d3a:	4770      	bx	lr
   42d3c:	1005c09c 	.word	0x1005c09c
   42d40:	0004cbf4 	.word	0x0004cbf4
   42d44:	01cdcdcd 	.word	0x01cdcdcd

00042d48 <am_hal_cmdq_enable>:
   42d48:	b318      	cbz	r0, 42d92 <am_hal_cmdq_enable+0x4a>
   42d4a:	6803      	ldr	r3, [r0, #0]
   42d4c:	4a12      	ldr	r2, [pc, #72]	@ (42d98 <am_hal_cmdq_enable+0x50>)
   42d4e:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   42d52:	4293      	cmp	r3, r2
   42d54:	b510      	push	{r4, lr}
   42d56:	4604      	mov	r4, r0
   42d58:	d113      	bne.n	42d82 <am_hal_cmdq_enable+0x3a>
   42d5a:	78c1      	ldrb	r1, [r0, #3]
   42d5c:	f011 0102 	ands.w	r1, r1, #2
   42d60:	d111      	bne.n	42d86 <am_hal_cmdq_enable+0x3e>
   42d62:	4b0e      	ldr	r3, [pc, #56]	@ (42d9c <am_hal_cmdq_enable+0x54>)
   42d64:	6882      	ldr	r2, [r0, #8]
   42d66:	429a      	cmp	r2, r3
   42d68:	d80f      	bhi.n	42d8a <am_hal_cmdq_enable+0x42>
   42d6a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
   42d6c:	681a      	ldr	r2, [r3, #0]
   42d6e:	6813      	ldr	r3, [r2, #0]
   42d70:	f043 0301 	orr.w	r3, r3, #1
   42d74:	6013      	str	r3, [r2, #0]
   42d76:	78e3      	ldrb	r3, [r4, #3]
   42d78:	f043 0302 	orr.w	r3, r3, #2
   42d7c:	2000      	movs	r0, #0
   42d7e:	70e3      	strb	r3, [r4, #3]
   42d80:	bd10      	pop	{r4, pc}
   42d82:	2002      	movs	r0, #2
   42d84:	bd10      	pop	{r4, pc}
   42d86:	2000      	movs	r0, #0
   42d88:	bd10      	pop	{r4, pc}
   42d8a:	2001      	movs	r0, #1
   42d8c:	f7f2 ff94 	bl	35cb8 <am_hal_daxi_control>
   42d90:	e7eb      	b.n	42d6a <am_hal_cmdq_enable+0x22>
   42d92:	2002      	movs	r0, #2
   42d94:	4770      	bx	lr
   42d96:	bf00      	nop
   42d98:	01cdcdcd 	.word	0x01cdcdcd
   42d9c:	1005ffff 	.word	0x1005ffff

00042da0 <am_hal_cmdq_disable>:
   42da0:	4603      	mov	r3, r0
   42da2:	b1a8      	cbz	r0, 42dd0 <am_hal_cmdq_disable+0x30>
   42da4:	6802      	ldr	r2, [r0, #0]
   42da6:	490b      	ldr	r1, [pc, #44]	@ (42dd4 <am_hal_cmdq_disable+0x34>)
   42da8:	f022 427e 	bic.w	r2, r2, #4261412864	@ 0xfe000000
   42dac:	428a      	cmp	r2, r1
   42dae:	d10f      	bne.n	42dd0 <am_hal_cmdq_disable+0x30>
   42db0:	78c0      	ldrb	r0, [r0, #3]
   42db2:	f010 0002 	ands.w	r0, r0, #2
   42db6:	d00c      	beq.n	42dd2 <am_hal_cmdq_disable+0x32>
   42db8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
   42dba:	6811      	ldr	r1, [r2, #0]
   42dbc:	680a      	ldr	r2, [r1, #0]
   42dbe:	f022 0201 	bic.w	r2, r2, #1
   42dc2:	600a      	str	r2, [r1, #0]
   42dc4:	78da      	ldrb	r2, [r3, #3]
   42dc6:	f36f 0241 	bfc	r2, #1, #1
   42dca:	2000      	movs	r0, #0
   42dcc:	70da      	strb	r2, [r3, #3]
   42dce:	4770      	bx	lr
   42dd0:	2002      	movs	r0, #2
   42dd2:	4770      	bx	lr
   42dd4:	01cdcdcd 	.word	0x01cdcdcd

00042dd8 <am_hal_cmdq_alloc_block>:
   42dd8:	2800      	cmp	r0, #0
   42dda:	d060      	beq.n	42e9e <am_hal_cmdq_alloc_block+0xc6>
   42ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
   42dde:	4604      	mov	r4, r0
   42de0:	6800      	ldr	r0, [r0, #0]
   42de2:	461d      	mov	r5, r3
   42de4:	4b2f      	ldr	r3, [pc, #188]	@ (42ea4 <am_hal_cmdq_alloc_block+0xcc>)
   42de6:	f020 407e 	bic.w	r0, r0, #4261412864	@ 0xfe000000
   42dea:	4298      	cmp	r0, r3
   42dec:	b083      	sub	sp, #12
   42dee:	d146      	bne.n	42e7e <am_hal_cmdq_alloc_block+0xa6>
   42df0:	4616      	mov	r6, r2
   42df2:	2a00      	cmp	r2, #0
   42df4:	d049      	beq.n	42e8a <am_hal_cmdq_alloc_block+0xb2>
   42df6:	2d00      	cmp	r5, #0
   42df8:	d047      	beq.n	42e8a <am_hal_cmdq_alloc_block+0xb2>
   42dfa:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   42dfe:	429a      	cmp	r2, r3
   42e00:	d140      	bne.n	42e84 <am_hal_cmdq_alloc_block+0xac>
   42e02:	460f      	mov	r7, r1
   42e04:	f7f3 f9d4 	bl	361b0 <am_hal_interrupt_master_disable>
   42e08:	9001      	str	r0, [sp, #4]
   42e0a:	e9d4 2008 	ldrd	r2, r0, [r4, #32]
   42e0e:	6883      	ldr	r3, [r0, #8]
   42e10:	6819      	ldr	r1, [r3, #0]
   42e12:	f022 03ff 	bic.w	r3, r2, #255	@ 0xff
   42e16:	b2c9      	uxtb	r1, r1
   42e18:	430b      	orrs	r3, r1
   42e1a:	1ad2      	subs	r2, r2, r3
   42e1c:	2a00      	cmp	r2, #0
   42e1e:	bfb8      	it	lt
   42e20:	f5a3 7380 	sublt.w	r3, r3, #256	@ 0x100
   42e24:	61e3      	str	r3, [r4, #28]
   42e26:	6843      	ldr	r3, [r0, #4]
   42e28:	681b      	ldr	r3, [r3, #0]
   42e2a:	60e3      	str	r3, [r4, #12]
   42e2c:	9801      	ldr	r0, [sp, #4]
   42e2e:	f7f3 f9c3 	bl	361b8 <am_hal_interrupt_master_set>
   42e32:	e9d4 2307 	ldrd	r2, r3, [r4, #28]
   42e36:	1ad2      	subs	r2, r2, r3
   42e38:	f112 0ffe 	cmn.w	r2, #254	@ 0xfe
   42e3c:	d42d      	bmi.n	42e9a <am_hal_cmdq_alloc_block+0xc2>
   42e3e:	e9d4 c103 	ldrd	ip, r1, [r4, #12]
   42e42:	4561      	cmp	r1, ip
   42e44:	d324      	bcc.n	42e90 <am_hal_cmdq_alloc_block+0xb8>
   42e46:	1cba      	adds	r2, r7, #2
   42e48:	68a0      	ldr	r0, [r4, #8]
   42e4a:	eb01 0ec2 	add.w	lr, r1, r2, lsl #3
   42e4e:	4586      	cmp	lr, r0
   42e50:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   42e54:	d909      	bls.n	42e6a <am_hal_cmdq_alloc_block+0x92>
   42e56:	6860      	ldr	r0, [r4, #4]
   42e58:	3a08      	subs	r2, #8
   42e5a:	4402      	add	r2, r0
   42e5c:	4594      	cmp	ip, r2
   42e5e:	d91c      	bls.n	42e9a <am_hal_cmdq_alloc_block+0xc2>
   42e60:	6a62      	ldr	r2, [r4, #36]	@ 0x24
   42e62:	6852      	ldr	r2, [r2, #4]
   42e64:	e9c1 2000 	strd	r2, r0, [r1]
   42e68:	4601      	mov	r1, r0
   42e6a:	6031      	str	r1, [r6, #0]
   42e6c:	3301      	adds	r3, #1
   42e6e:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
   42e72:	2000      	movs	r0, #0
   42e74:	6223      	str	r3, [r4, #32]
   42e76:	602b      	str	r3, [r5, #0]
   42e78:	6161      	str	r1, [r4, #20]
   42e7a:	b003      	add	sp, #12
   42e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   42e7e:	2002      	movs	r0, #2
   42e80:	b003      	add	sp, #12
   42e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
   42e84:	2007      	movs	r0, #7
   42e86:	b003      	add	sp, #12
   42e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
   42e8a:	2006      	movs	r0, #6
   42e8c:	b003      	add	sp, #12
   42e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   42e90:	1c7a      	adds	r2, r7, #1
   42e92:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   42e96:	4594      	cmp	ip, r2
   42e98:	d8e7      	bhi.n	42e6a <am_hal_cmdq_alloc_block+0x92>
   42e9a:	2005      	movs	r0, #5
   42e9c:	e7f0      	b.n	42e80 <am_hal_cmdq_alloc_block+0xa8>
   42e9e:	2002      	movs	r0, #2
   42ea0:	4770      	bx	lr
   42ea2:	bf00      	nop
   42ea4:	01cdcdcd 	.word	0x01cdcdcd

00042ea8 <am_hal_cmdq_release_block>:
   42ea8:	b178      	cbz	r0, 42eca <am_hal_cmdq_release_block+0x22>
   42eaa:	6803      	ldr	r3, [r0, #0]
   42eac:	4a09      	ldr	r2, [pc, #36]	@ (42ed4 <am_hal_cmdq_release_block+0x2c>)
   42eae:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   42eb2:	4293      	cmp	r3, r2
   42eb4:	d109      	bne.n	42eca <am_hal_cmdq_release_block+0x22>
   42eb6:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   42eba:	429a      	cmp	r2, r3
   42ebc:	d007      	beq.n	42ece <am_hal_cmdq_release_block+0x26>
   42ebe:	6a03      	ldr	r3, [r0, #32]
   42ec0:	6142      	str	r2, [r0, #20]
   42ec2:	3b01      	subs	r3, #1
   42ec4:	6203      	str	r3, [r0, #32]
   42ec6:	2000      	movs	r0, #0
   42ec8:	4770      	bx	lr
   42eca:	2002      	movs	r0, #2
   42ecc:	4770      	bx	lr
   42ece:	2007      	movs	r0, #7
   42ed0:	4770      	bx	lr
   42ed2:	bf00      	nop
   42ed4:	01cdcdcd 	.word	0x01cdcdcd

00042ed8 <am_hal_cmdq_post_block>:
   42ed8:	b358      	cbz	r0, 42f32 <am_hal_cmdq_post_block+0x5a>
   42eda:	b538      	push	{r3, r4, r5, lr}
   42edc:	6803      	ldr	r3, [r0, #0]
   42ede:	4a17      	ldr	r2, [pc, #92]	@ (42f3c <am_hal_cmdq_post_block+0x64>)
   42ee0:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   42ee4:	4293      	cmp	r3, r2
   42ee6:	4604      	mov	r4, r0
   42ee8:	d116      	bne.n	42f18 <am_hal_cmdq_post_block+0x40>
   42eea:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
   42eee:	4293      	cmp	r3, r2
   42ef0:	d021      	beq.n	42f36 <am_hal_cmdq_post_block+0x5e>
   42ef2:	6a40      	ldr	r0, [r0, #36]	@ 0x24
   42ef4:	6883      	ldr	r3, [r0, #8]
   42ef6:	4319      	orrs	r1, r3
   42ef8:	6a23      	ldr	r3, [r4, #32]
   42efa:	f102 0508 	add.w	r5, r2, #8
   42efe:	e9c2 1300 	strd	r1, r3, [r2]
   42f02:	4a0f      	ldr	r2, [pc, #60]	@ (42f40 <am_hal_cmdq_post_block+0x68>)
   42f04:	68a1      	ldr	r1, [r4, #8]
   42f06:	4291      	cmp	r1, r2
   42f08:	e9c4 5504 	strd	r5, r5, [r4, #16]
   42f0c:	d806      	bhi.n	42f1c <am_hal_cmdq_post_block+0x44>
   42f0e:	68c2      	ldr	r2, [r0, #12]
   42f10:	b2db      	uxtb	r3, r3
   42f12:	6013      	str	r3, [r2, #0]
   42f14:	2000      	movs	r0, #0
   42f16:	bd38      	pop	{r3, r4, r5, pc}
   42f18:	2002      	movs	r0, #2
   42f1a:	bd38      	pop	{r3, r4, r5, pc}
   42f1c:	2100      	movs	r1, #0
   42f1e:	2001      	movs	r0, #1
   42f20:	f7f2 feca 	bl	35cb8 <am_hal_daxi_control>
   42f24:	e9d4 3008 	ldrd	r3, r0, [r4, #32]
   42f28:	68c2      	ldr	r2, [r0, #12]
   42f2a:	b2db      	uxtb	r3, r3
   42f2c:	6013      	str	r3, [r2, #0]
   42f2e:	2000      	movs	r0, #0
   42f30:	e7f1      	b.n	42f16 <am_hal_cmdq_post_block+0x3e>
   42f32:	2002      	movs	r0, #2
   42f34:	4770      	bx	lr
   42f36:	2007      	movs	r0, #7
   42f38:	bd38      	pop	{r3, r4, r5, pc}
   42f3a:	bf00      	nop
   42f3c:	01cdcdcd 	.word	0x01cdcdcd
   42f40:	1005ffff 	.word	0x1005ffff

00042f44 <am_hal_cmdq_get_status>:
   42f44:	2800      	cmp	r0, #0
   42f46:	d04b      	beq.n	42fe0 <am_hal_cmdq_get_status+0x9c>
   42f48:	b570      	push	{r4, r5, r6, lr}
   42f4a:	6803      	ldr	r3, [r0, #0]
   42f4c:	4a25      	ldr	r2, [pc, #148]	@ (42fe4 <am_hal_cmdq_get_status+0xa0>)
   42f4e:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   42f52:	4293      	cmp	r3, r2
   42f54:	b082      	sub	sp, #8
   42f56:	4604      	mov	r4, r0
   42f58:	d13c      	bne.n	42fd4 <am_hal_cmdq_get_status+0x90>
   42f5a:	460d      	mov	r5, r1
   42f5c:	2900      	cmp	r1, #0
   42f5e:	d03c      	beq.n	42fda <am_hal_cmdq_get_status+0x96>
   42f60:	f7f3 f926 	bl	361b0 <am_hal_interrupt_master_disable>
   42f64:	6a66      	ldr	r6, [r4, #36]	@ 0x24
   42f66:	9001      	str	r0, [sp, #4]
   42f68:	68b3      	ldr	r3, [r6, #8]
   42f6a:	6a22      	ldr	r2, [r4, #32]
   42f6c:	6819      	ldr	r1, [r3, #0]
   42f6e:	f022 03ff 	bic.w	r3, r2, #255	@ 0xff
   42f72:	b2c9      	uxtb	r1, r1
   42f74:	430b      	orrs	r3, r1
   42f76:	1ad2      	subs	r2, r2, r3
   42f78:	2a00      	cmp	r2, #0
   42f7a:	bfb8      	it	lt
   42f7c:	f5a3 7380 	sublt.w	r3, r3, #256	@ 0x100
   42f80:	61e3      	str	r3, [r4, #28]
   42f82:	6873      	ldr	r3, [r6, #4]
   42f84:	681b      	ldr	r3, [r3, #0]
   42f86:	60e3      	str	r3, [r4, #12]
   42f88:	9801      	ldr	r0, [sp, #4]
   42f8a:	f7f3 f915 	bl	361b8 <am_hal_interrupt_master_set>
   42f8e:	e9d4 0604 	ldrd	r0, r6, [r4, #16]
   42f92:	6a22      	ldr	r2, [r4, #32]
   42f94:	69e3      	ldr	r3, [r4, #28]
   42f96:	602b      	str	r3, [r5, #0]
   42f98:	6a63      	ldr	r3, [r4, #36]	@ 0x24
   42f9a:	4286      	cmp	r6, r0
   42f9c:	bf0c      	ite	eq
   42f9e:	4611      	moveq	r1, r2
   42fa0:	1e51      	subne	r1, r2, #1
   42fa2:	e9c5 1201 	strd	r1, r2, [r5, #4]
   42fa6:	e9d3 2006 	ldrd	r2, r0, [r3, #24]
   42faa:	e9d3 3108 	ldrd	r3, r1, [r3, #32]
   42fae:	6812      	ldr	r2, [r2, #0]
   42fb0:	4202      	tst	r2, r0
   42fb2:	bf14      	ite	ne
   42fb4:	2001      	movne	r0, #1
   42fb6:	2000      	moveq	r0, #0
   42fb8:	420a      	tst	r2, r1
   42fba:	bf14      	ite	ne
   42fbc:	2101      	movne	r1, #1
   42fbe:	2100      	moveq	r1, #0
   42fc0:	421a      	tst	r2, r3
   42fc2:	bf14      	ite	ne
   42fc4:	2301      	movne	r3, #1
   42fc6:	2300      	moveq	r3, #0
   42fc8:	7328      	strb	r0, [r5, #12]
   42fca:	2000      	movs	r0, #0
   42fcc:	7369      	strb	r1, [r5, #13]
   42fce:	73ab      	strb	r3, [r5, #14]
   42fd0:	b002      	add	sp, #8
   42fd2:	bd70      	pop	{r4, r5, r6, pc}
   42fd4:	2002      	movs	r0, #2
   42fd6:	b002      	add	sp, #8
   42fd8:	bd70      	pop	{r4, r5, r6, pc}
   42fda:	2006      	movs	r0, #6
   42fdc:	b002      	add	sp, #8
   42fde:	bd70      	pop	{r4, r5, r6, pc}
   42fe0:	2002      	movs	r0, #2
   42fe2:	4770      	bx	lr
   42fe4:	01cdcdcd 	.word	0x01cdcdcd

00042fe8 <am_hal_cmdq_error_resume>:
   42fe8:	2800      	cmp	r0, #0
   42fea:	d03c      	beq.n	43066 <am_hal_cmdq_error_resume+0x7e>
   42fec:	6803      	ldr	r3, [r0, #0]
   42fee:	4a20      	ldr	r2, [pc, #128]	@ (43070 <am_hal_cmdq_error_resume+0x88>)
   42ff0:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   42ff4:	4293      	cmp	r3, r2
   42ff6:	4684      	mov	ip, r0
   42ff8:	d135      	bne.n	43066 <am_hal_cmdq_error_resume+0x7e>
   42ffa:	78c0      	ldrb	r0, [r0, #3]
   42ffc:	f010 0002 	ands.w	r0, r0, #2
   43000:	d030      	beq.n	43064 <am_hal_cmdq_error_resume+0x7c>
   43002:	f8dc 2024 	ldr.w	r2, [ip, #36]	@ 0x24
   43006:	e9d2 1000 	ldrd	r1, r0, [r2]
   4300a:	680b      	ldr	r3, [r1, #0]
   4300c:	f023 0301 	bic.w	r3, r3, #1
   43010:	b430      	push	{r4, r5}
   43012:	6894      	ldr	r4, [r2, #8]
   43014:	600b      	str	r3, [r1, #0]
   43016:	6805      	ldr	r5, [r0, #0]
   43018:	682b      	ldr	r3, [r5, #0]
   4301a:	f023 0101 	bic.w	r1, r3, #1
   4301e:	42a1      	cmp	r1, r4
   43020:	462a      	mov	r2, r5
   43022:	d022      	beq.n	4306a <am_hal_cmdq_error_resume+0x82>
   43024:	4298      	cmp	r0, r3
   43026:	f102 0108 	add.w	r1, r2, #8
   4302a:	d009      	beq.n	43040 <am_hal_cmdq_error_resume+0x58>
   4302c:	6893      	ldr	r3, [r2, #8]
   4302e:	f023 0201 	bic.w	r2, r3, #1
   43032:	42a2      	cmp	r2, r4
   43034:	d00a      	beq.n	4304c <am_hal_cmdq_error_resume+0x64>
   43036:	460a      	mov	r2, r1
   43038:	4298      	cmp	r0, r3
   4303a:	f102 0108 	add.w	r1, r2, #8
   4303e:	d1f5      	bne.n	4302c <am_hal_cmdq_error_resume+0x44>
   43040:	6851      	ldr	r1, [r2, #4]
   43042:	680b      	ldr	r3, [r1, #0]
   43044:	f023 0201 	bic.w	r2, r3, #1
   43048:	42a2      	cmp	r2, r4
   4304a:	d1f4      	bne.n	43036 <am_hal_cmdq_error_resume+0x4e>
   4304c:	460d      	mov	r5, r1
   4304e:	600c      	str	r4, [r1, #0]
   43050:	6005      	str	r5, [r0, #0]
   43052:	f89c 3003 	ldrb.w	r3, [ip, #3]
   43056:	f36f 0341 	bfc	r3, #1, #1
   4305a:	2000      	movs	r0, #0
   4305c:	bc30      	pop	{r4, r5}
   4305e:	f88c 3003 	strb.w	r3, [ip, #3]
   43062:	4770      	bx	lr
   43064:	4770      	bx	lr
   43066:	2002      	movs	r0, #2
   43068:	4770      	bx	lr
   4306a:	4629      	mov	r1, r5
   4306c:	e7ef      	b.n	4304e <am_hal_cmdq_error_resume+0x66>
   4306e:	bf00      	nop
   43070:	01cdcdcd 	.word	0x01cdcdcd

00043074 <am_hal_queue_item_add>:
   43074:	b570      	push	{r4, r5, r6, lr}
   43076:	6905      	ldr	r5, [r0, #16]
   43078:	b082      	sub	sp, #8
   4307a:	4604      	mov	r4, r0
   4307c:	fb02 f505 	mul.w	r5, r2, r5
   43080:	460e      	mov	r6, r1
   43082:	f7f3 f895 	bl	361b0 <am_hal_interrupt_master_disable>
   43086:	9001      	str	r0, [sp, #4]
   43088:	68a3      	ldr	r3, [r4, #8]
   4308a:	68e2      	ldr	r2, [r4, #12]
   4308c:	1ad3      	subs	r3, r2, r3
   4308e:	42ab      	cmp	r3, r5
   43090:	d31c      	bcc.n	430cc <am_hal_queue_item_add+0x58>
   43092:	b18d      	cbz	r5, 430b8 <am_hal_queue_item_add+0x44>
   43094:	b30e      	cbz	r6, 430da <am_hal_queue_item_add+0x66>
   43096:	1e71      	subs	r1, r6, #1
   43098:	194e      	adds	r6, r1, r5
   4309a:	6823      	ldr	r3, [r4, #0]
   4309c:	6962      	ldr	r2, [r4, #20]
   4309e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   430a2:	54d0      	strb	r0, [r2, r3]
   430a4:	6823      	ldr	r3, [r4, #0]
   430a6:	68e0      	ldr	r0, [r4, #12]
   430a8:	3301      	adds	r3, #1
   430aa:	42b1      	cmp	r1, r6
   430ac:	fbb3 f2f0 	udiv	r2, r3, r0
   430b0:	fb00 3312 	mls	r3, r0, r2, r3
   430b4:	6023      	str	r3, [r4, #0]
   430b6:	d1f0      	bne.n	4309a <am_hal_queue_item_add+0x26>
   430b8:	68a2      	ldr	r2, [r4, #8]
   430ba:	4415      	add	r5, r2
   430bc:	60a5      	str	r5, [r4, #8]
   430be:	9801      	ldr	r0, [sp, #4]
   430c0:	f7f3 f87a 	bl	361b8 <am_hal_interrupt_master_set>
   430c4:	2601      	movs	r6, #1
   430c6:	4630      	mov	r0, r6
   430c8:	b002      	add	sp, #8
   430ca:	bd70      	pop	{r4, r5, r6, pc}
   430cc:	9801      	ldr	r0, [sp, #4]
   430ce:	f7f3 f873 	bl	361b8 <am_hal_interrupt_master_set>
   430d2:	2600      	movs	r6, #0
   430d4:	4630      	mov	r0, r6
   430d6:	b002      	add	sp, #8
   430d8:	bd70      	pop	{r4, r5, r6, pc}
   430da:	4631      	mov	r1, r6
   430dc:	6823      	ldr	r3, [r4, #0]
   430de:	3101      	adds	r1, #1
   430e0:	3301      	adds	r3, #1
   430e2:	428d      	cmp	r5, r1
   430e4:	fbb3 f0f2 	udiv	r0, r3, r2
   430e8:	fb02 3310 	mls	r3, r2, r0, r3
   430ec:	6023      	str	r3, [r4, #0]
   430ee:	d1f5      	bne.n	430dc <am_hal_queue_item_add+0x68>
   430f0:	e7e2      	b.n	430b8 <am_hal_queue_item_add+0x44>
   430f2:	bf00      	nop

000430f4 <am_hal_queue_item_get>:
   430f4:	b570      	push	{r4, r5, r6, lr}
   430f6:	6905      	ldr	r5, [r0, #16]
   430f8:	b082      	sub	sp, #8
   430fa:	4604      	mov	r4, r0
   430fc:	fb02 f505 	mul.w	r5, r2, r5
   43100:	460e      	mov	r6, r1
   43102:	f7f3 f855 	bl	361b0 <am_hal_interrupt_master_disable>
   43106:	9001      	str	r0, [sp, #4]
   43108:	68a3      	ldr	r3, [r4, #8]
   4310a:	42ab      	cmp	r3, r5
   4310c:	d31c      	bcc.n	43148 <am_hal_queue_item_get+0x54>
   4310e:	b18d      	cbz	r5, 43134 <am_hal_queue_item_get+0x40>
   43110:	b30e      	cbz	r6, 43156 <am_hal_queue_item_get+0x62>
   43112:	1e71      	subs	r1, r6, #1
   43114:	194e      	adds	r6, r1, r5
   43116:	6863      	ldr	r3, [r4, #4]
   43118:	6962      	ldr	r2, [r4, #20]
   4311a:	5cd3      	ldrb	r3, [r2, r3]
   4311c:	f801 3f01 	strb.w	r3, [r1, #1]!
   43120:	6863      	ldr	r3, [r4, #4]
   43122:	68e0      	ldr	r0, [r4, #12]
   43124:	3301      	adds	r3, #1
   43126:	42b1      	cmp	r1, r6
   43128:	fbb3 f2f0 	udiv	r2, r3, r0
   4312c:	fb00 3312 	mls	r3, r0, r2, r3
   43130:	6063      	str	r3, [r4, #4]
   43132:	d1f0      	bne.n	43116 <am_hal_queue_item_get+0x22>
   43134:	68a2      	ldr	r2, [r4, #8]
   43136:	1b55      	subs	r5, r2, r5
   43138:	60a5      	str	r5, [r4, #8]
   4313a:	9801      	ldr	r0, [sp, #4]
   4313c:	f7f3 f83c 	bl	361b8 <am_hal_interrupt_master_set>
   43140:	2601      	movs	r6, #1
   43142:	4630      	mov	r0, r6
   43144:	b002      	add	sp, #8
   43146:	bd70      	pop	{r4, r5, r6, pc}
   43148:	9801      	ldr	r0, [sp, #4]
   4314a:	f7f3 f835 	bl	361b8 <am_hal_interrupt_master_set>
   4314e:	2600      	movs	r6, #0
   43150:	4630      	mov	r0, r6
   43152:	b002      	add	sp, #8
   43154:	bd70      	pop	{r4, r5, r6, pc}
   43156:	68e2      	ldr	r2, [r4, #12]
   43158:	4631      	mov	r1, r6
   4315a:	6863      	ldr	r3, [r4, #4]
   4315c:	3101      	adds	r1, #1
   4315e:	3301      	adds	r3, #1
   43160:	428d      	cmp	r5, r1
   43162:	fbb3 f0f2 	udiv	r0, r3, r2
   43166:	fb02 3310 	mls	r3, r2, r0, r3
   4316a:	6063      	str	r3, [r4, #4]
   4316c:	d1f5      	bne.n	4315a <am_hal_queue_item_get+0x66>
   4316e:	e7e1      	b.n	43134 <am_hal_queue_item_get+0x40>
   43170:	0f0a0000 	.word	0x0f0a0000
   43174:	00000001 	.word	0x00000001
   43178:	03030102 	.word	0x03030102
   4317c:	00000001 	.word	0x00000001
   43180:	07000002 	.word	0x07000002
   43184:	00000100 	.word	0x00000100

00043188 <ns_core_V1_0_0>:
   43188:	00ca0000 00000001 00000000 6e61656d     ............mean
   43198:	00203a73 73697861 6925203a 0000000a     s: .axis: %i....
   431a8:	00206625 696c6128 26206e67 6c612820     %f .(align & (al
   431b8:	206e6769 2931202d 3d3d2029 00003020     ign - 1)) == 0..
   431c8:	64696f76 617b202a 796e6f6e 73756f6d     void* {anonymous
   431d8:	653a3a7d 6c615f69 656e6769 61635f64     }::ei_aligned_ca
   431e8:	636f6c6c 7a697328 2c745f65 7a697320     lloc(size_t, siz
   431f8:	29745f65 00000000 2f637273 65676465     e_t)....src/edge
   43208:	706d692d 65736c75 6764652f 6d692d65     -impulse/edge-im
   43218:	736c7570 64732d65 6c632f6b 69737361     pulse-sdk/classi
   43228:	72656966 5f69652f 67696c61 5f64656e     fier/ei_aligned_
   43238:	6c6c616d 682e636f 00000000 00727470     malloc.h....ptr.
   43248:	64696f76 6e617b20 6d796e6f 7d73756f     void {anonymous}
   43258:	69653a3a 696c615f 64656e67 6572665f     ::ei_aligned_fre
   43268:	6f762865 292a6469 00000000 6c696146     e(void*)....Fail
   43278:	74206465 6e69206f 61697469 657a696c     ed to initialize
   43288:	65687420 646f6d20 28206c65 6f727265      the model (erro
   43298:	6f632072 25206564 000a2964 65636552     r code %d)..Rece
   432a8:	64657669 6d616320 20617265 74746573     ived camera sett
   432b8:	73676e69 6f63203a 6172746e 25207473     ings: contrast %
   432c8:	62202c64 68676972 73656e74 64252073     d, brightness %d
   432d8:	7665202c 0a642520 00000000 65636552     , ev %d.....Rece
   432e8:	64657669 20642520 65747962 25203a73     ived %d bytes: %
   432f8:	00000a73 74636576 3a3a726f 725f4d5f     s...vector::_M_r
   43308:	6c6c6165 695f636f 7265736e 00000074     ealloc_insert...
   43318:	79617247 6c616373 00000065 3a525245     Grayscale...ERR:
   43328:	6e614320 20746f6e 646e6168 6920656c      Cannot handle i
   43338:	7475706e 70797420 25282065 000a2964     nput type (%d)..
   43348:	3a525245 706e6920 74207475 6f736e65     ERR: input tenso
   43358:	61682072 69732073 2520657a 79622064     r has size %d by
   43368:	2c736574 74756220 706e6920 6d207475     tes, but input m
   43378:	69727461 61682078 61682073 69732073     atrix has has si
   43388:	2520657a 79622064 0a736574 00000000     ze %d bytes.....
   43398:	3a525245 74756f20 20747570 736e6574     ERR: output tens
   433a8:	6820726f 73207361 20657a69 202c6425     or has size %d, 
   433b8:	20747562 75706e69 616d2074 78697274     but input matrix
   433c8:	73616820 73616820 7a697320 64252065      has has size %d
   433d8:	0000000a 3a525245 6e614320 20746f6e     ....ERR: Cannot 
   433e8:	646e6168 6f20656c 75707475 79742074     handle output ty
   433f8:	28206570 0a296425 00000000 3a525245     pe (%d).....ERR:
   43408:	756f5720 7720646c 65746972 74756f20      Would write out
   43418:	65646973 61656620 65727574 66756220     side feature buf
   43428:	0a726566 00000000 3a525245 6b6e5520     fer.....ERR: Unk
   43438:	6e776f6e 74786520 74636172 6e756620     nown extract fun
   43448:	6f697463 6f202c6e 20796c6e 4343464d     ction, only MFCC
   43458:	464d202c 6e612045 70732064 72746365     , MFE and spectr
   43468:	6172676f 7573206d 726f7070 0a646574     ogram supported.
   43478:	00000000 3a525245 69614620 2064656c     ....ERR: Failed 
   43488:	72206f74 44206e75 70205053 65636f72     to run DSP proce
   43498:	28207373 0a296425 00000000 74616546     ss (%d).....Feat
   434a8:	20657275 7274614d 203a7869 0000000a     ure Matrix: ....
   434b8:	6e6e7552 20676e69 75706d69 2e65736c     Running impulse.
   434c8:	000a2e2e 6e726157 3a676e69 47504a20     ....Warning: JPG
   434d8:	766f2031 72777265 65747469 00000a6e     1 overwritten...
   434e8:	6e726157 3a676e69 47504a20 766f2032     Warning: JPG2 ov
   434f8:	72777265 65747469 00000a6e 72206f4e     erwritten...No r
   43508:	6c757365 000a7374 762e6262 65756c61     esults..bb.value
   43518:	0a662520 00000000 65666e49 636e6572      %f.....Inferenc
   43528:	616c2065 636e6574 25203a79 6e202c64     e latency: %d, n
   43538:	725f6d75 6c757365 25207374 61202c64     um_results %d, a
   43548:	6c696176 0a642520 00000000 78257830     vail %d.....0x%x
   43558:	00000020 00206425 74636576 3a3a726f      ...%d .vector::
   43568:	645f4d5f 75616665 615f746c 6e657070     _M_default_appen
   43578:	00000064 3a525245 626f4d20 4e656c69     d...ERR: MobileN
   43588:	53207465 69204453 6f6e2073 75732074     et SSD is not su
   43598:	726f7070 20646574 45206e69 6f204e4f     pported in EON o
   435a8:	65542072 726f736e 776f6c46 74694c20     r TensorFlow Lit
   435b8:	694d2065 0a6f7263 00000000 3a525245     e Micro.....ERR:
   435c8:	766e4920 64696c61 74756f20 20747570      Invalid output 
   435d8:	65707974 64252820 6f662029 4f592072     type (%d) for YO
   435e8:	35764f4c 73616c20 616c2074 0a726579     LOv5 last layer.
   435f8:	00000000 3a525245 4c4f5920 6420584f     ....ERR: YOLOX d
   43608:	2073656f 20746f6e 70707573 2074726f     oes not support 
   43618:	6e617571 657a6974 6e692064 65726566     quantized infere
   43628:	0a65636e 00000000 3a525245 4c4f5920     nce.....ERR: YOL
   43638:	2037564f 73656f64 746f6e20 70757320     OV7 does not sup
   43648:	74726f70 61757120 7a69746e 69206465     port quantized i
   43658:	7265666e 65636e65 0000000a 3a525245     nference....ERR:
   43668:	766e4920 64696c61 74756f20 20747570      Invalid output 
   43678:	65707974 64252820 6f662029 41542072     type (%d) for TA
   43688:	616c204f 6c207473 72657961 0000000a     O last layer....
   43698:	3a525245 766e4920 64696c61 74756f20     ERR: Invalid out
   436a8:	20747570 65707974 64252820 6f662029     put type (%d) fo
   436b8:	41542072 4f59204f 33764f4c 79616c20     r TAO YOLOv3 lay
   436c8:	000a7265 3a525245 766e4920 64696c61     er..ERR: Invalid
   436d8:	74756f20 20747570 65707974 64252820      output type (%d
   436e8:	6f662029 41542072 4f59204f 34764f4c     ) for TAO YOLOv4
   436f8:	79616c20 000a7265 3a525245 736e5520      layer..ERR: Uns
   43708:	6f707075 64657472 6a626f20 20746365     upported object 
   43718:	65746564 6f697463 616c206e 6c207473     detection last l
   43728:	72657961 64252820 00000a29 093a7325     ayer (%d)...%s:.
   43738:	00000000 64657250 69746369 20736e6f     ....Predictions 
   43748:	6d697428 25203a65 736d2064 0a3a292e     (time: %d ms.):.
   43758:	00000000 74616546 73657275 64252820     ....Features (%d
   43768:	2e736d20 00203a29 4f464e49 00000000      ms.): .INFO....
   43778:	203a7325 00000000 75706d49 2065736c     %s: ....Impulse 
   43788:	6e69616d 6e696174 74732073 2e657461     maintains state.
   43798:	6c614320 7572206c 6c635f6e 69737361      Call run_classi
   437a8:	72656966 696e695f 20292874 72206f74     fier_init() to r
   437b8:	74657365 61747320 28206574 2e672e65     eset state (e.g.
   437c8:	20666920 61746164 72747320 206d6165      if data stream 
   437d8:	69207369 7265746e 74707572 292e6465     is interrupted.)
   437e8:	0000000a 65726f43 696e6920 61662074     ....Core init fa
   437f8:	64656c69 00000a2e 65776f50 6f632072     iled....Power co
   43808:	6769666e 69616620 2e64656c 0000000a     nfig failed.....
   43818:	656d6954 6e492072 46207469 656c6961     Timer Init Faile
   43828:	00000a64 20425355 74696e49 69614620     d...USB Init Fai
   43838:	0a64656c 00000000 20425355 74696e49     led.....USB Init
   43848:	63755320 73736563 0000000a 656d6143      Success....Came
   43858:	53206172 20706f74 6c696146 000a6465     ra Stop Failed..
   43868:	656d6143 49206172 2074696e 63637553     Camera Init Succ
   43878:	0a737365 00000000 b8939ff0 6e695420     ess......... Tin
   43888:	73695679 206e6f69 6f6d6544 00000a0a     yVision Demo....
   43898:	73657270 676e6973 75687320 72657474     pressing shutter
   438a8:	74756220 206e6f74 20726f66 74636970      button for pict
   438b8:	0a657275 00000000 6f636564 676e6964     ure.....decoding
   438c8:	616d6920 32206567 6e696620 6c206c61      image 2 final l
   438d8:	25206e65 75622064 72656666 6e656c5f     en %d buffer_len
   438e8:	32687467 2c642520 0a642520 00000000     gth2 %d, %d.....
   438f8:	6f636564 74206564 20656d69 61772032     decode time 2 wa
   43908:	64252073 0000000a 65666e49 636e6572     s %d....Inferenc
   43918:	69742065 7720656d 25207361 00000a64     e time was %d...
   43928:	69626d41 00000071 65636146 74656420     Ambiq...Face det
   43938:	69746365 2d206e6f 4d4f4620 202d204f     ection - FOMO - 
   43948:	65626d45 64656464 6c6e4f20 20656e69     Embedded Online 
   43958:	666e6f43 6e657265 00006563 67616d49     Conference..Imag
   43968:	61642065 202c6174 67616d49 4f202c65     e data, Image, O
   43978:	63656a62 65442074 74636574 206e6f69     bject Detection 
   43988:	616d4928 29736567 20332320 6f6c4328     (Images) #3 (Clo
   43998:	6f20656e 65762066 6f697372 3223206e     ne of version #2
   439a8:	00000029 67616d69 00000065 65636166     )...image...face
   439b8:	00000000 6f707865 746e656e 203d3c20     ....exponent <= 
   439c8:	00003133 65746e49 54726567 20657079     31..IntegerType 
   439d8:	6d6d6567 70776f6c 6f523a3a 69646e75     gemmlowp::Roundi
   439e8:	6944676e 65646976 4f507942 6e492854     ngDivideByPOT(In
   439f8:	65676574 70795472 69202c65 2029746e     tegerType, int) 
   43a08:	7469775b 6e492068 65676574 70795472     [with IntegerTyp
   43a18:	203d2065 676e6f6c 746e6920 0000005d     e = long int]...
   43a28:	2f637273 65676465 706d692d 65736c75     src/edge-impulse
   43a38:	6764652f 6d692d65 736c7570 64732d65     /edge-impulse-sd
   43a48:	68742f6b 5f647269 74726170 65672f79     k/third_party/ge
   43a58:	6f6c6d6d 662f7077 64657869 6e696f70     mmlowp/fixedpoin
   43a68:	69662f74 70646578 746e696f 0000682e     t/fixedpoint.h..
   43a78:	6f707865 746e656e 203d3e20 00000030     exponent >= 0...
   43a88:	00006625 3a525245 74654720 736e6554     %f..ERR: GetTens
   43a98:	6320726f 656c6c61 65622064 646e6f79     or called beyond
   43aa8:	58414d20 4c46545f 4156455f 4f435f4c      MAX_TFL_EVAL_CO
   43ab8:	20544e55 29642528 0000000a 3a525245     UNT (%d)....ERR:
   43ac8:	74654720 736e6554 6320726f 656c6c61      GetTensor calle
   43ad8:	65622064 646e6f79 58414d20 4c46545f     d beyond MAX_TFL
   43ae8:	4e45545f 5f524f53 4e554f43 25282054     _TENSOR_COUNT (%
   43af8:	000a2964 3a525245 69614620 2064656c     d)..ERR: Failed 
   43b08:	61206f74 636f6c6c 20657461 73726570     to allocate pers
   43b18:	65747369 6220746e 65666675 666f2072     istent buffer of
   43b28:	7a697320 64252065 6f64202c 6e207365      size %d, does n
   43b38:	6620746f 69207469 6574206e 726f736e     ot fit in tensor
   43b48:	65726120 6120616e 7220646e 68636165      arena and reach
   43b58:	45206465 414d5f49 564f5f58 4c465245     ed EI_MAX_OVERFL
   43b68:	425f574f 45464655 4f435f52 0a544e55     OW_BUFFER_COUNT.
   43b78:	00000000 3a525245 69614620 2064656c     ....ERR: Failed 
   43b88:	61206f74 636f6c6c 20657461 73726570     to allocate pers
   43b98:	65747369 6220746e 65666675 666f2072     istent buffer of
   43ba8:	7a697320 64252065 0000000a 3a525245      size %d....ERR:
   43bb8:	69614620 2064656c 61206f74 636f6c6c      Failed to alloc
   43bc8:	20657461 61726373 20686374 66667562     ate scratch buff
   43bd8:	6f207265 69732066 2520657a 72202c64     er of size %d, r
   43be8:	68636165 45206465 414d5f49 43535f58     eached EI_MAX_SC
   43bf8:	43544152 55425f48 52454646 554f435f     RATCH_BUFFER_COU
   43c08:	000a544e 3a525245 69614620 2064656c     NT..ERR: Failed 
   43c18:	61206f74 636f6c6c 20657461 61726373     to allocate scra
   43c28:	20686374 66667562 6f207265 69732066     tch buffer of si
   43c38:	2520657a 00000a64 3a525245 6e657420     ze %d...ERR: ten
   43c48:	20726f73 6e657261 73692061 6f6f7420     sor arena is too
   43c58:	616d7320 202c6c6c 73656f64 746f6e20      small, does not
   43c68:	74696620 646f6d20 2d206c65 65766520      fit model - eve
   43c78:	6977206e 756f6874 63732074 63746172     n without scratc
   43c88:	75622068 72656666 00000a73 7566202c     h buffers..., fu
   43c98:	6974636e 203a6e6f 00000000 65737361     nction: ....asse
   43ca8:	6f697472 2522206e 66202273 656c6961     rtion "%s" faile
   43cb8:	66203a64 20656c69 22732522 696c202c     d: file "%s", li
   43cc8:	2520656e 25732564 00000a73 33323130     ne %d%s%s...0123
   43cd8:	37363534 42413938 46454443 00000000     456789ABCDEF....
   43ce8:	33323130 37363534 62613938 66656463     0123456789abcdef
   43cf8:	00000000 6c756e28 0000296c 435f434c     ....(null)..LC_C
   43d08:	414c4c4f 00004554 435f434c 45505954     OLLATE..LC_CTYPE
   43d18:	00000000 4d5f434c 54454e4f 00595241     ....LC_MONETARY.
   43d28:	4e5f434c 52454d55 00004349 545f434c     LC_NUMERIC..LC_T
   43d38:	00454d49 4d5f434c 41535345 00534547     IME.LC_MESSAGES.
   43d48:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
   43d58:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   43d68:	6c6c6142 7320636f 65636375 64656465     Balloc succeeded
   43d78:	00000000 6c6f562f 73656d75 7461642f     ..../Volumes/dat
   43d88:	656a2f61 6e696b6e 6f772f73 70736b72     a/jenkins/worksp
   43d98:	2f656361 2d554e47 6c6f6f74 69616863     ace/GNU-toolchai
   43da8:	72612f6e 33312d6d 6372732f 77656e2f     n/arm-13/src/new
   43db8:	2d62696c 77677963 6e2f6e69 696c7765     lib-cygwin/newli
   43dc8:	696c2f62 732f6362 696c6474 74642f62     b/libc/stdlib/dt
   43dd8:	632e616f 00000000 6c6f562f 73656d75     oa.c..../Volumes
   43de8:	7461642f 656a2f61 6e696b6e 6f772f73     /data/jenkins/wo
   43df8:	70736b72 2f656361 2d554e47 6c6f6f74     rkspace/GNU-tool
   43e08:	69616863 72612f6e 33312d6d 6372732f     chain/arm-13/src
   43e18:	77656e2f 2d62696c 77677963 6e2f6e69     /newlib-cygwin/n
   43e28:	696c7765 696c2f62 732f6362 696c6474     ewlib/libc/stdli
   43e38:	706d2f62 2e636572 00000063 796e6954     b/mprec.c...Tiny
   43e48:	00425355 796e6954 20425355 69766544     USB.TinyUSB Devi
   43e58:	00006563 34333231 00003635 796e6954     ce..123456..Tiny
   43e68:	20425355 00434443 796e6954 20425355     USB CDC.TinyUSB 
   43e78:	55626557 00004253 6f727245 55203a72     WebUSB..Error: U
   43e88:	7075736e 74726f70 74206465 20657079     nsupported type 
   43e98:	5220666f 72462078 20656d61 64616548     of Rx Frame Head
   43ea8:	203a7265 000a6425 6e726157 3a676e69     er: %d..Warning:
   43eb8:	65685420 6d756e20 20726562 7220666f      The number of r
   43ec8:	69727765 676e6974 20736920 7265766f     ewriting is over
   43ed8:	0a642520 00000000 4f525245 65542052      %d.....ERROR Te
   43ee8:	6f43706d 696e6920 61662074 64656c69     mpCo init failed
   43ef8:	0000000a 706d6574 695f6f63 2874696e     ....tempco_init(
   43f08:	72452029 20726f72 6572202d 76726573     ) Error - reserv
   43f18:	6f697461 666f206e 65687420 43444120     ation of the ADC
   43f28:	736e6920 636e6174 61662065 64656c69      instance failed
   43f38:	00000a2e 706d6574 695f6f63 2874696e     ....tempco_init(
   43f48:	72452029 20726f72 4441202d 6f702043     ) Error - ADC po
   43f58:	20726577 66206e6f 656c6961 000a2e64     wer on failed...
   43f68:	706d6574 695f6f63 2874696e 72452029     tempco_init() Er
   43f78:	20726f72 6f63202d 6769666e 6e697275     ror - configurin
   43f88:	44412067 61662043 64656c69 00000a2e     g ADC failed....
   43f98:	4f525245 6d612052 6c61685f 7277705f     ERROR am_hal_pwr
   43fa8:	6c727463 6d65745f 5f6f6370 74696e69     ctrl_tempco_init
   43fb8:	72202928 72757465 2064656e 0a2e6425     () returned %d..
   43fc8:	00000000 6c696146 74206465 6f63206f     ....Failed to co
   43fd8:	6769666e 20657275 454d4954 2c642552     nfigure TIMER%d,
   43fe8:	74657220 206e7275 756c6176 64253d65      return value=%d
   43ff8:	00000a0d 6c696146 74206465 6e69206f     ....Failed to in
   44008:	63207469 72656d61 69742061 0a72656d     it camera timer.
   44018:	00000000 20697073 74697277 65722065     ....spi write re
   44028:	64252074 0000000a 74696157 20676e69     t %d....Waiting 
   44038:	20726f66 656d6163 63206172 75747061     for camera captu
   44048:	000a6572 5f504d35 00000032 72616579     re..5MP_2...year
   44058:	6425203a 0000000a 746e6f6d 25203a68     : %d....month: %
   44068:	00000a64 3a796164 0a642520 00000000     d...day: %d.....
   44078:	61677066 72657620 6e6f6973 6425203a     fpga version: %d
   44088:	0000000a 00504d33 00504d35 656d6954     ....3MP.5MP.Time
   44098:	6e492072 46207469 656c6961 000a2e64     r Init Failed...
   440a8:	5f646162 636e7566 6e6f6974 6c61635f     bad_function_cal
   440b8:	0000006c 42494c47 5f585843 414e5554     l...GLIBCXX_TUNA
   440c8:	53454c42 00000000 5f6a626f 657a6973     BLES....obj_size
   440d8:	00000000 5f6a626f 6e756f63 00000074     ....obj_count...
   440e8:	62696c67 2e787863 705f6865 006c6f6f     glibcxx.eh_pool.
   440f8:	3a647473 6378653a 69747065 00006e6f     std::exception..
   44108:	3a647473 6461623a 6378655f 69747065     std::bad_excepti
   44118:	00006e6f 6d726574 74616e69 61632065     on..terminate ca
   44128:	64656c6c 63657220 69737275 796c6576     lled recursively
   44138:	0000000a 6d726574 74616e69 61632065     ....terminate ca
   44148:	64656c6c 74666120 74207265 776f7268     lled after throw
   44158:	20676e69 69206e61 6174736e 2065636e     ing an instance 
   44168:	2720666f 00000000 00000a27 6d726574     of '....'...term
   44178:	74616e69 61632065 64656c6c 74697720     inate called wit
   44188:	74756f68 206e6120 69746361 65206576     hout an active e
   44198:	70656378 6e6f6974 0000000a 68772020     xception....  wh
   441a8:	29287461 0020203a 69736162 74735f63     at():  .basic_st
   441b8:	676e6972 535f3a3a 6e6f635f 75727473     ring::_S_constru
   441c8:	6e207463 206c6c75 20746f6e 696c6176     ct null not vali
   441d8:	00000064 69736162 74735f63 676e6972     d...basic_string
   441e8:	535f3a3a 6572635f 00657461 00006425     ::_S_create.%d..
   441f8:	4f4c475f 5f4c4142 00000000 6f6e6128     _GLOBAL_....(ano
   44208:	6f6d796e 6e207375 73656d61 65636170     nymous namespace
   44218:	00000029 6f747561 00000000 6c636564     )...auto....decl
   44228:	65707974 74756128 0000296f 69727473     type(auto)..stri
   44238:	6c20676e 72657469 00006c61 00647473     ng literal..std.
   44248:	6c636564 65707974 6c756e28 7274706c     decltype(nullptr
   44258:	00000029 6962615b 0000003a 0000202c     )...[abi:..., ..
   44268:	00003a3a 6665647b 746c7561 67726120     ::..{default arg
   44278:	00000023 003a3a7d 6f747561 0000003a     #...}::.auto:...
   44288:	706d6574 6574616c 72617020 74656d61     template paramet
   44298:	6f207265 63656a62 6f662074 00002072     er object for ..
   442a8:	74696e69 696c6169 2072657a 20726f66     initializer for 
   442b8:	75646f6d 0020656c 62617476 6620656c     module .vtable f
   442c8:	0020726f 20545456 20726f66 00000000     or .VTT for ....
   442d8:	736e6f63 63757274 6e6f6974 61747620     construction vta
   442e8:	20656c62 20726f66 00000000 2d6e692d     ble for ....-in-
   442f8:	00000000 65707974 6f666e69 726f6620     ....typeinfo for
   44308:	00000020 65707974 6f666e69 6d616e20      ...typeinfo nam
   44318:	6f662065 00002072 65707974 6f666e69     e for ..typeinfo
   44328:	206e6620 20726f66 00000000 2d6e6f6e      fn for ....non-
   44338:	74726976 206c6175 6e756874 6f74206b     virtual thunk to
   44348:	00000020 61766f63 6e616972 65722074      ...covariant re
   44358:	6e727574 75687420 74206b6e 0000206f     turn thunk to ..
   44368:	6176616a 616c4320 66207373 0020726f     java Class for .
   44378:	72617567 61762064 62616972 6620656c     guard variable f
   44388:	0020726f 20534c54 74696e69 6e756620     or .TLS init fun
   44398:	6f697463 6f66206e 00002072 20534c54     ction for ..TLS 
   443a8:	70617277 20726570 636e7566 6e6f6974     wrapper function
   443b8:	726f6620 00000020 65666572 636e6572      for ...referenc
   443c8:	65742065 726f706d 20797261 00000023     e temporary #...
   443d8:	64646968 61206e65 7361696c 726f6620     hidden alias for
   443e8:	00000020 2d6e6f6e 6e617274 74636173      ...non-transact
   443f8:	206e6f69 6e6f6c63 6f662065 00002072     ion clone for ..
   44408:	7265706f 726f7461 00000000 7265706f     operator....oper
   44418:	726f7461 00000020 0000283e 00006c63     ator ...>(..cl..
   44428:	00007869 00007571 00203a20 2077656e     ix..qu.. : .new 
   44438:	00000000 00006c75 00006c6c 006c6c75     ....ul..ll..ull.
   44448:	736c6166 00000065 65757274 00000000     false...true....
   44458:	6176616a 73657220 6372756f 00002065     java resource ..
   44468:	6c636564 65707974 00002820 002e2e2e     decltype (......
   44478:	73696874 00000000 7261707b 0000236d     this....{parm#..
   44488:	626f6c67 63206c61 74736e6f 74637572     global construct
   44498:	2073726f 6579656b 6f742064 00000020     ors keyed to ...
   444a8:	626f6c67 64206c61 72747365 6f746375     global destructo
   444b8:	6b207372 64657965 206f7420 00000000     rs keyed to ....
   444c8:	6d616c7b 00616462 00002329 6e6e757b     {lambda.)#..{unn
   444d8:	64656d61 70797420 00002365 6c635b20     amed type#.. [cl
   444e8:	20656e6f 00000000 65707974 656d616e     one ....typename
   444f8:	00000000 706d6574 6574616c 00000000     ....template....
   44508:	616c6320 00007373 73657220 63697274      class.. restric
   44518:	00000074 6c6f7620 6c697461 00000065     t... volatile...
   44528:	6e6f6320 00007473 61727420 6361736e      const.. transac
   44538:	6e6f6974 6661735f 00000065 656f6e20     tion_safe... noe
   44548:	70656378 00000074 72687420 0000776f     xcept... throw..
   44558:	00002626 6f435f20 656c706d 00000078     &&.. _Complex...
   44568:	6d495f20 6e696761 00797261 002a3a3a      _Imaginary.::*.
   44578:	765f5f20 6f746365 00002872 2e2e2e28      __vector(..(...
   44588:	00000000 292e2e2e 00000000 2e2e2e20     .......).... ...
   44598:	00000020 00005424 00004e24 00545424      ...$T..$N..$TT.
   445a8:	3a647473 6c6c613a 7461636f 0000726f     std::allocator..
   445b8:	6f6c6c61 6f746163 00000072 3a647473     allocator...std:
   445c8:	7361623a 735f6369 6e697274 00000067     :basic_string...
   445d8:	69736162 74735f63 676e6972 00000000     basic_string....
   445e8:	3a647473 7274733a 00676e69 3a647473     std::string.std:
   445f8:	7361623a 735f6369 6e697274 68633c67     :basic_string<ch
   44608:	202c7261 3a647473 6168633a 72745f72     ar, std::char_tr
   44618:	73746961 6168633c 202c3e72 3a647473     aits<char>, std:
   44628:	6c6c613a 7461636f 633c726f 3e726168     :allocator<char>
   44638:	00003e20 3a647473 7473693a 6d616572      >..std::istream
   44648:	00000000 3a647473 7361623a 695f6369     ....std::basic_i
   44658:	65727473 633c6d61 2c726168 64747320     stream<char, std
   44668:	68633a3a 745f7261 74696172 68633c73     ::char_traits<ch
   44678:	203e7261 0000003e 69736162 73695f63     ar> >...basic_is
   44688:	61657274 0000006d 3a647473 74736f3a     tream...std::ost
   44698:	6d616572 00000000 3a647473 7361623a     ream....std::bas
   446a8:	6f5f6369 65727473 633c6d61 2c726168     ic_ostream<char,
   446b8:	64747320 68633a3a 745f7261 74696172      std::char_trait
   446c8:	68633c73 203e7261 0000003e 69736162     s<char> >...basi
   446d8:	736f5f63 61657274 0000006d 3a647473     c_ostream...std:
   446e8:	736f693a 61657274 0000006d 3a647473     :iostream...std:
   446f8:	7361623a 695f6369 7274736f 3c6d6165     :basic_iostream<
   44708:	72616863 7473202c 633a3a64 5f726168     char, std::char_
   44718:	69617274 633c7374 3e726168 00003e20     traits<char> >..
   44728:	69736162 6f695f63 65727473 00006d61     basic_iostream..
   44738:	00004e61 00003d26 00005361 0000003d     aN..&=..aS..=...
   44748:	00006161 00006461 00000026 00006e61     aa..ad..&...an..
   44758:	67696c61 20666f6e 00000000 00007761     alignof ....aw..
   44768:	615f6f63 74696177 00000020 00007a61     co_await ...az..
   44778:	00006363 736e6f63 61635f74 00007473     cc..const_cast..
   44788:	00002928 00006d63 0000002c 00006f63     ()..cm..,...co..
   44798:	0000007e 00005664 00003d2f 00005864     ~...dV../=..dX..
   447a8:	2e2e2e5b 00003d5d 00006164 656c6564     [...]=..da..dele
   447b8:	5d5b6574 00000020 00006364 616e7964     te[] ...dc..dyna
   447c8:	5f63696d 74736163 00000000 00006564     mic_cast....de..
   447d8:	0000002a 00006964 00006c64 656c6564     *...di..dl..dele
   447e8:	00206574 00007364 00002a2e 00007464     te .ds...*..dt..
   447f8:	00007664 0000002f 00007864 00004f65     dv../...dx..eO..
   44808:	00003d5e 00006f65 0000005e 00007165     ^=..eo..^...eq..
   44818:	00003d3d 00004c66 00005266 00006c66     ==..fL..fR..fl..
   44828:	00007266 00006567 00003d3e 00007367     fr..ge..>=..gs..
   44838:	00007467 00005d5b 0000536c 003d3c3c     gt..[]..lS..<<=.
   44848:	00003d3c 0000696c 7265706f 726f7461     <=..li..operator
   44858:	00202222 0000736c 00003c3c 0000746c     "" .ls..<<..lt..
   44868:	0000003c 0000496d 00003d2d 00004c6d     <...mI..-=..mL..
   44878:	00003d2a 0000696d 0000002d 00006c6d     *=..mi..-...ml..
   44888:	00006d6d 00002d2d 0000616e 5b77656e     mm..--..na..new[
   44898:	0000005d 0000656e 00003d21 0000746e     ]...ne..!=..nt..
   448a8:	00000021 0000776e 0077656e 0000526f     !...nw..new.oR..
   448b8:	00003d7c 00006f6f 00007c7c 0000007c     |=..oo..||..|...
   448c8:	00004c70 00003d2b 00006c70 0000002b     pL..+=..pl..+...
   448d8:	00006d70 002a3e2d 00007070 00002b2b     pm..->*.pp..++..
   448e8:	00007370 00007470 00003e2d 0000003f     ps..pt..->..?...
   448f8:	00004d72 00003d25 00005372 003d3e3e     rM..%=..rS..>>=.
   44908:	00006372 6e696572 70726574 5f746572     rc..reinterpret_
   44918:	74736163 00000000 00006d72 00000025     cast....rm..%...
   44928:	00007372 00003e3e 00005073 657a6973     rs..>>..sP..size
   44938:	2e2e666f 0000002e 00005a73 00006373     of......sZ..sc..
   44948:	74617473 635f6369 00747361 003e3d3c     static_cast.<=>.
   44958:	657a6973 0020666f 00007a73 00007274     sizeof .sz..tr..
   44968:	6f726874 00000077 00007774 6f726874     throw...tw..thro
   44978:	00002077 6e676973 63206465 00726168     w ..signed char.
   44988:	6c6f6f62 00000000 6c6f6f62 006e6165     bool....boolean.
   44998:	72616863 00000000 65747962 00000000     char....byte....
   449a8:	62756f64 0000656c 676e6f6c 756f6420     double..long dou
   449b8:	00656c62 616f6c66 00000074 6c665f5f     ble.float...__fl
   449c8:	3174616f 00003832 69736e75 64656e67     oat128..unsigned
   449d8:	61686320 00000072 00746e69 69736e75      char...int.unsi
   449e8:	64656e67 746e6920 00000000 69736e75     gned int....unsi
   449f8:	64656e67 00000000 676e6f6c 00000000     gned....long....
   44a08:	69736e75 64656e67 6e6f6c20 00000067     unsigned long...
   44a18:	6e695f5f 38323174 00000000 69736e75     __int128....unsi
   44a28:	64656e67 695f5f20 3231746e 00000038     gned __int128...
   44a38:	726f6873 00000074 69736e75 64656e67     short...unsigned
   44a48:	6f687320 00007472 64696f76 00000000      short..void....
   44a58:	61686377 00745f72 676e6f6c 6e6f6c20     wchar_t.long lon
   44a68:	00000067 69736e75 64656e67 6e6f6c20     g...unsigned lon
   44a78:	6f6c2067 0000676e 69636564 336c616d     g long..decimal3
   44a88:	00000032 69636564 366c616d 00000034     2...decimal64...
   44a98:	69636564 316c616d 00003832 666c6168     decimal128..half
   44aa8:	00000000 72616863 00745f38 72616863     ....char8_t.char
   44ab8:	745f3631 00000000 72616863 745f3233     16_t....char32_t
   44ac8:	00000000 6f6c465f 00007461 3a647473     ...._Float..std:
   44ad8:	6c66623a 3174616f 00745f36 20495053     :bfloat16_t.SPI 
   44ae8:	64616552 414d4420 72724520 2520726f     Read DMA Error %
   44af8:	00000a64                                d...

00044afc <_ZTSFijjPfE>:
   44afc:	6a6a6946 00456650                       FijjPfE.

00044b04 <_ZTIFijjPfE>:
   44b04:	0004bff4 00044afc                       .....J..

00044b0c <_ZTSPFijjPfE>:
   44b0c:	6a694650 4566506a 00000000              PFijjPfE....

00044b18 <_ZTIPFijjPfE>:
   44b18:	0004c088 00044b0c 00000000 00044b04     .....K.......K..

00044b28 <_ZTSZN14SignalWithAxes10get_signalEvEUljjPfE_>:
   44b28:	34314e5a 6e676953 69576c61 78416874     ZN14SignalWithAx
   44b38:	30317365 5f746567 6e676973 76456c61     es10get_signalEv
   44b48:	6a6c5545 4566506a 0000005f              EUljjPfE_...

00044b54 <_ZTIZN14SignalWithAxes10get_signalEvEUljjPfE_>:
   44b54:	0004bf94 00044b28                       ....(K..

00044b5c <_ZL13ns_pwr_config>:
   44b5c:	0004ba2c 01010002 00010100 00000000     ,...............

00044b6c <_ZL16impulse_522036_0>:
   44b6c:	0007f734 00043928 00043930 00000001     4...(9..09......
   44b7c:	00043964 00000012 00002400 00002400     d9.......$...$..
   44b8c:	00000001 00002400 00000060 00000060     .....$..`...`...
   44b9c:	00000001 3f800000 00000000 00000001     .......?........
   44bac:	1000d07c 0000000a 0000000c 00000000     |...............
   44bbc:	00000120 00000001 00044bec 00000000      ........K......
   44bcc:	00000000 00000302 000439ac 00000900     .........9......
   44bdc:	00010004 1000d0b4 00000000 3e4ccccd     ..............L>

00044bec <_ZL18ei_learning_blocks>:
   44bec:	00000007 00000000 00020719 00044c10     .............L..
   44bfc:	00000000 00044c0c 00000001 00000120     .....L...... ...

00044c0c <_ZL26ei_learning_block_7_inputs>:
   44c0c:	00000003                                ....

00044c10 <_ZL26ei_learning_block_config_7>:
   44c10:	00030001 00000007 01000201 00000002     ................
   44c20:	3f000000 00000101 00044c2c              ...?....,L..

00044c2c <_ZL24ei_config_tflite_graph_7>:
   44c2c:	00000001 00024dc1 00025081 000250f5     .....M...P...P..
   44c3c:	00024ff5 0002503d                       .O..=P..

00044c44 <_ZN6tflite23kConvQuantizedDimensionE>:
   44c44:	00000000                                ....

00044c48 <_ZN6tflite17kConvOutputTensorE>:
   44c48:	00000000                                ....

00044c4c <_ZN6tflite15kConvBiasTensorE>:
   44c4c:	00000002                                ....

00044c50 <_ZN6tflite18kConvWeightsTensorE>:
   44c50:	00000001                                ....

00044c54 <_ZN6tflite16kConvInputTensorE>:
   44c54:	00000000                                ....

00044c58 <_ZN6tflite32kDepthwiseConvQuantizedDimensionE>:
   44c58:	00000003                                ....

00044c5c <_ZN6tflite26kDepthwiseConvOutputTensorE>:
   44c5c:	00000000                                ....

00044c60 <_ZN6tflite24kDepthwiseConvBiasTensorE>:
   44c60:	00000002                                ....

00044c64 <_ZN6tflite27kDepthwiseConvWeightsTensorE>:
   44c64:	00000001                                ....

00044c68 <_ZN6tflite25kDepthwiseConvInputTensorE>:
   44c68:	00000000                                ....

00044c6c <_ZTSN6tflite12MicroContextE>:
   44c6c:	6674364e 6574696c 694d3231 436f7263     N6tflite12MicroC
   44c7c:	65746e6f 00457478                       ontextE.

00044c84 <_ZTIN6tflite12MicroContextE>:
   44c84:	0004bf94 00044c6c                       ....lL..

00044c8c <_ZTVN6tflite12MicroContextE>:
   44c8c:	00000000 00044c84 00024829 0002487d     .....L..)H..}H..
   44c9c:	0002482d 0002488d 00024835 0002483d     -H...H..5H..=H..
   44cac:	000248e9 00024939 00024899 0002485d     .H..9I...H..]H..
   44cbc:	00024865                                eH..

00044cc0 <_ZTIN12_GLOBAL__N_115EonMicroContextE>:
   44cc0:	0004c0e0 00044ccc 00044c84              .....L...L..

00044ccc <_ZTSN12_GLOBAL__N_115EonMicroContextE>:
   44ccc:	32314e2a 4f4c475f 5f4c4142 315f4e5f     *N12_GLOBAL__N_1
   44cdc:	6f453531 63694d6e 6f436f72 7865746e     15EonMicroContex
   44cec:	00004574                                tE..

00044cf0 <_ZTVN12_GLOBAL__N_115EonMicroContextE>:
   44cf0:	00000000 00044cc0 00024d3d 00024d51     .....L..=M..QM..
   44d00:	00024d35 00024d6d 00024b2d 00024c49     5M..mM..-K..IL..
   44d10:	000248e9 00024939 00024899 00024b49     .H..9I...H..IK..
   44d20:	00024bd5                                .K..

00044d24 <_ZN12_GLOBAL__N_1L25tflTensors_subgraph_indexE>:
   44d24:	00000000 00000048                       ....H...

00044d2c <_ZN12_GLOBAL__N_18used_opsE>:
   44d2c:	02000100 00010300 02000100 00010300     ................
   44d3c:	02000100 02000100 04000000              ............

00044d48 <_ZN12_GLOBAL__N_110tensorDataE>:
   44d48:	00000902 10015f90 0004b5bc 00002400     ....._.......$..
   44d58:	00000001 0004b5a0 00000201 0004b580     ................
   44d68:	0004b568 00000020 00000000 00000000     h... ...........
   44d78:	00000901 0004b520 0004b504 00000048     .... .......H...
   44d88:	00000001 0004b4b0 00000201 0004b490     ................
   44d98:	0004b47c 00000020 00000001 0004b428     |... .......(...
   44da8:	00000901 0004b3e0 0004b3c4 00000048     ............H...
   44db8:	00000001 0004b370 00000201 0004b350     ....p.......P...
   44dc8:	0004b344 00000020 00000001 0004b2f0     D... ...........
   44dd8:	00000901 0004b2b0 0004b294 00000040     ............@...
   44de8:	00000001 0004b240 00000201 0004b220     ....@....... ...
   44df8:	0004b214 00000020 00000001 0004b1c0     .... ...........
   44e08:	00000901 0004b040 0004b024 00000180     ....@...$.......
   44e18:	00000001 0004ae90 00000201 0004add0     ................
   44e28:	0004adc4 000000c0 00000001 0004ac30     ............0...
   44e38:	00000901 0004aa80 0004aa64 000001b0     ........d.......
   44e48:	00000001 0004a8d0 00000201 0004a810     ................
   44e58:	0004a804 000000c0 00000001 0004a670     ............p...
   44e68:	00000901 0004a4f0 0004a4d4 00000180     ................
   44e78:	00000001 0004a480 00000201 0004a460     ............`...
   44e88:	0004a454 00000020 00000001 0004a400     T... ...........
   44e98:	00000901 0004a280 0004a264 00000180     ........d.......
   44ea8:	00000001 0004a0d0 00000201 0004a010     ................
   44eb8:	0004a004 000000c0 00000001 00049e70     ............p...
   44ec8:	00000901 00049cc0 00049ca4 000001b0     ................
   44ed8:	00000001 00049b10 00000201 00049a50     ............P...
   44ee8:	00049a44 000000c0 00000001 000498b0     D...............
   44ef8:	00000901 00049730 00049714 00000180     ....0...........
   44f08:	00000001 000496c0 00000201 000496a0     ................
   44f18:	00049694 00000020 00000001 00049640     .... .......@...
   44f28:	00000901 000494c0 000494a4 00000180     ................
   44f38:	00000001 00049310 00000201 00049250     ............P...
   44f48:	00049244 000000c0 00000001 000490b0     D...............
   44f58:	00000901 00048f00 00048ee4 000001b0     ................
   44f68:	00000001 00048d50 00000201 00048c90     ....P...........
   44f78:	00048c84 000000c0 00000001 00048af0     ................
   44f88:	00000901 00048970 00048954 00000180     ....p...T.......
   44f98:	00000001 00048900 00000201 000488e0     ................
   44fa8:	000488d4 00000020 00000001 00048880     .... ...........
   44fb8:	00000901 00048700 000486e4 00000180     ................
   44fc8:	00000001 00048550 00000201 00048490     ....P...........
   44fd8:	00048484 000000c0 00000001 000482f0     ................
   44fe8:	00000901 00048140 00048124 000001b0     ....@...$.......
   44ff8:	00000001 00047f90 00000201 00047ed0     .............~..
   45008:	00047ec4 000000c0 00000001 00047d30     .~..........0}..
   45018:	00000901 00047bb0 00047b94 00000180     .....{...{......
   45028:	00000001 00047b40 00000201 00047b20     ....@{...... {..
   45038:	00047b14 00000020 00000001 00047ac0     .{.. ........z..
   45048:	00000901 00047940 00047924 00000180     ....@y..$y......
   45058:	00000001 00047790 00000201 000476d0     .....w.......v..
   45068:	000476c4 000000c0 00000001 00047530     .v..........0u..
   45078:	00000901 00047380 00047364 000001b0     .....s..ds......
   45088:	00000001 000471d0 00000201 00047110     .....q.......q..
   45098:	00047104 000000c0 00000001 00046f70     .q..........po..
   450a8:	00000901 00046df0 00046dd4 00000180     .....m...m......
   450b8:	00000001 00046d80 00000201 00046d60     .....m......`m..
   450c8:	00046d54 00000020 00000001 00046d00     Tm.. ........m..
   450d8:	00000901 00046b80 00046b64 00000180     .....k..dk......
   450e8:	00000001 000469d0 00000201 00046910     .....i.......i..
   450f8:	00046904 000000c0 00000001 00046770     .i..........pg..
   45108:	00000901 00046170 00046154 00000600     ....pa..Ta......
   45118:	00000001 00046040 00000201 00045fc0     ....@`......._..
   45128:	00045fb4 00000080 00000001 00045ea0     ._...........^..
   45138:	00000901 00045e60 00045e44 00000040     ....`^..D^..@...
   45148:	00000001 00045e20 00000201 00045e18     .... ^.......^..
   45158:	00045e10 00000008 00000001 00045dec     .^...........]..
   45168:	00000902 1001ef90 00045dd8 00004800     .........]...H..
   45178:	00000001 00045dbc 00000902 10015f90     .....]......._..
   45188:	00045da8 00004800 00000001 00045d8c     .]...H.......]..
   45198:	00000902 1001a790 00045d78 00004800     ........x]...H..
   451a8:	00000001 00045d5c 00000902 10015f90     ....\]......._..
   451b8:	00045d48 00004800 00000001 00045d2c     H]...H......,]..
   451c8:	00000902 100321c0 00045d18 0001b000     .....!...]......
   451d8:	00000001 00045cfc 00000902 10015f90     .....\......._..
   451e8:	00045ce8 0001c230 00000001 00045ccc     .\..0........\..
   451f8:	00000902 100321c0 00045cb8 00006c00     .....!...\...l..
   45208:	00000001 00045c9c 00000902 10023790     .....\.......7..
   45218:	00045c88 00001200 00000001 00045c6c     .\..........l\..
   45228:	00000902 1001cb90 00045c58 00006c00     ........X\...l..
   45238:	00000001 00045c3c 00000902 10015f90     ....<\......._..
   45248:	00045c28 00006c00 00000001 00045c0c     (\...l.......\..
   45258:	00000902 1001cb90 00045bf8 00001200     .........[......
   45268:	00000001 00045bdc 00000902 10015f90     .....[......._..
   45278:	00045bc8 00001200 00000001 00045bac     .[...........[..
   45288:	00000902 1001d4c0 00045b98 00006c00     .........[...l..
   45298:	00000001 00045b7c 00000902 10015f90     ....|[......._..
   452a8:	00045b68 00007530 00000001 00045b4c     h[..0u......L[..
   452b8:	00000902 1001d4c0 00045b38 00001b00     ........8[......
   452c8:	00000001 00045b1c 00000902 10019a10     .....[..........
   452d8:	00045b08 00000480 00000001 00045aec     .[...........Z..
   452e8:	00000902 10017a90 00045ad8 00001b00     .....z...Z......
   452f8:	00000001 00045abc 00000902 10015f90     .....Z......._..
   45308:	00045aa8 00001b00 00000001 00045a8c     .Z...........Z..
   45318:	00000902 10017a90 00045a78 00000480     .....z..xZ......
   45328:	00000001 00045a5c 00000902 10019590     ....\Z..........
   45338:	00045a48 00000480 00000001 00045a2c     HZ..........,Z..
   45348:	00000902 10017a90 00045a18 00001b00     .....z...Z......
   45358:	00000001 000459fc 00000902 10015f90     .....Y......._..
   45368:	000459e8 00001b00 00000001 000459cc     .Y...........Y..
   45378:	00000902 10017f10 000459b8 00000480     .........Y......
   45388:	00000001 0004599c 00000902 10017a90     .....Y.......z..
   45398:	00045988 00000480 00000001 0004596c     .Y..........lY..
   453a8:	00000902 10015f90 00045958 00001b00     ....._..XY......
   453b8:	00000001 0004593c 00000902 10017a90     ....<Y.......z..
   453c8:	00045928 00001200 00000001 0004590c     (Y...........Y..
   453d8:	00000902 100160b0 000458f8 00000120     .....`...X.. ...
   453e8:	00000001 000458dc 00000902 10015f90     .....X......._..
   453f8:	000458c8 00000120 00000001 000458ac     .X.. ........X..

00045408 <_ZN12_GLOBAL__N_12g0L9outputs27E>:
   45408:	00000001 00000047                       ....G...

00045410 <_ZN12_GLOBAL__N_12g0L8inputs27E>:
   45410:	00000001 00000046                       ....F...

00045418 <_ZN12_GLOBAL__N_12g0L8opdata27E>:
   45418:	3f800000                                ...?

0004541c <_ZN12_GLOBAL__N_12g0L9outputs26E>:
   4541c:	00000001 00000046                       ....F...

00045424 <_ZN12_GLOBAL__N_12g0L8inputs26E>:
   45424:	00000003 00000045 0000002a 0000002b     ....E...*...+...

00045434 <_ZN12_GLOBAL__N_12g0L8opdata26E>:
   45434:	00000002 00000001 00000001 00000000     ................
   45444:	00000001 00000001                       ........

0004544c <_ZN12_GLOBAL__N_12g0L9outputs25E>:
   4544c:	00000001 00000045                       ....E...

00045454 <_ZN12_GLOBAL__N_12g0L8inputs25E>:
   45454:	00000003 00000044 00000028 00000029     ....D...(...)...

00045464 <_ZN12_GLOBAL__N_12g0L8opdata25E>:
   45464:	00000002 00000001 00000001 00000001     ................
   45474:	00000001 00000001                       ........

0004547c <_ZN12_GLOBAL__N_12g0L9outputs24E>:
   4547c:	00000001 00000044                       ....D...

00045484 <_ZN12_GLOBAL__N_12g0L8inputs24E>:
   45484:	00000003 00000043 00000026 00000027     ....C...&...'...

00045494 <_ZN12_GLOBAL__N_12g0L8opdata24E>:
   45494:	00000001 00000001 00000001 00000003     ................
   454a4:	00000001 00000001                       ........

000454ac <_ZN12_GLOBAL__N_12g0L9outputs23E>:
   454ac:	00000001 00000043                       ....C...

000454b4 <_ZN12_GLOBAL__N_12g0L8inputs23E>:
   454b4:	00000002 0000003f 00000042              ....?...B...

000454c0 <_ZN12_GLOBAL__N_12g0L8opdata23E>:
   454c0:	00000000                                ....

000454c4 <_ZN12_GLOBAL__N_12g0L9outputs22E>:
   454c4:	00000001 00000042                       ....B...

000454cc <_ZN12_GLOBAL__N_12g0L8inputs22E>:
   454cc:	00000003 00000041 00000024 00000025     ....A...$...%...

000454dc <_ZN12_GLOBAL__N_12g0L8opdata22E>:
   454dc:	00000001 00000001 00000001 00000000     ................
   454ec:	00000001 00000001                       ........

000454f4 <_ZN12_GLOBAL__N_12g0L9outputs21E>:
   454f4:	00000001 00000041                       ....A...

000454fc <_ZN12_GLOBAL__N_12g0L8inputs21E>:
   454fc:	00000003 00000040 00000022 00000023     ....@..."...#...

0004550c <_ZN12_GLOBAL__N_12g0L8opdata21E>:
   4550c:	00000001 00000001 00000001 00000001     ................
   4551c:	00000003 00000001 00000001              ............

00045528 <_ZN12_GLOBAL__N_12g0L9outputs20E>:
   45528:	00000001 00000040                       ....@...

00045530 <_ZN12_GLOBAL__N_12g0L8inputs20E>:
   45530:	00000003 0000003f 00000020 00000021     ....?... ...!...

00045540 <_ZN12_GLOBAL__N_12g0L8opdata20E>:
   45540:	00000001 00000001 00000001 00000003     ................
   45550:	00000001 00000001                       ........

00045558 <_ZN12_GLOBAL__N_12g0L9outputs19E>:
   45558:	00000001 0000003f                       ....?...

00045560 <_ZN12_GLOBAL__N_12g0L8inputs19E>:
   45560:	00000002 0000003b 0000003e              ....;...>...

0004556c <_ZN12_GLOBAL__N_12g0L8opdata19E>:
   4556c:	00000000                                ....

00045570 <_ZN12_GLOBAL__N_12g0L9outputs18E>:
   45570:	00000001 0000003e                       ....>...

00045578 <_ZN12_GLOBAL__N_12g0L8inputs18E>:
   45578:	00000003 0000003d 0000001e 0000001f     ....=...........

00045588 <_ZN12_GLOBAL__N_12g0L8opdata18E>:
   45588:	00000001 00000001 00000001 00000000     ................
   45598:	00000001 00000001                       ........

000455a0 <_ZN12_GLOBAL__N_12g0L9outputs17E>:
   455a0:	00000001 0000003d                       ....=...

000455a8 <_ZN12_GLOBAL__N_12g0L8inputs17E>:
   455a8:	00000003 0000003c 0000001c 0000001d     ....<...........

000455b8 <_ZN12_GLOBAL__N_12g0L8opdata17E>:
   455b8:	00000001 00000001 00000001 00000001     ................
   455c8:	00000003 00000001 00000001              ............

000455d4 <_ZN12_GLOBAL__N_12g0L9outputs16E>:
   455d4:	00000001 0000003c                       ....<...

000455dc <_ZN12_GLOBAL__N_12g0L8inputs16E>:
   455dc:	00000003 0000003b 0000001a 0000001b     ....;...........

000455ec <_ZN12_GLOBAL__N_12g0L8opdata16E>:
   455ec:	00000001 00000001 00000001 00000003     ................
   455fc:	00000001 00000001                       ........

00045604 <_ZN12_GLOBAL__N_12g0L9outputs15E>:
   45604:	00000001 0000003b                       ....;...

0004560c <_ZN12_GLOBAL__N_12g0L8inputs15E>:
   4560c:	00000003 0000003a 00000018 00000019     ....:...........

0004561c <_ZN12_GLOBAL__N_12g0L8opdata15E>:
   4561c:	00000001 00000001 00000001 00000000     ................
   4562c:	00000001 00000001                       ........

00045634 <_ZN12_GLOBAL__N_12g0L9outputs14E>:
   45634:	00000001 0000003a                       ....:...

0004563c <_ZN12_GLOBAL__N_12g0L8inputs14E>:
   4563c:	00000003 00000039 00000016 00000017     ....9...........

0004564c <_ZN12_GLOBAL__N_12g0L8opdata14E>:
   4564c:	00000002 00000002 00000002 00000001     ................
   4565c:	00000003 00000001 00000001              ............

00045668 <_ZN12_GLOBAL__N_12g0L9outputs13E>:
   45668:	00000001 00000039                       ....9...

00045670 <_ZN12_GLOBAL__N_12g0L8inputs13E>:
   45670:	00000002 00000038 00000001              ....8.......

0004567c <_ZN12_GLOBAL__N_12g0L9outputs12E>:
   4567c:	00000001 00000038                       ....8...

00045684 <_ZN12_GLOBAL__N_12g0L8inputs12E>:
   45684:	00000003 00000037 00000014 00000015     ....7...........

00045694 <_ZN12_GLOBAL__N_12g0L8opdata12E>:
   45694:	00000001 00000001 00000001 00000003     ................
   456a4:	00000001 00000001                       ........

000456ac <_ZN12_GLOBAL__N_12g0L9outputs11E>:
   456ac:	00000001 00000037                       ....7...

000456b4 <_ZN12_GLOBAL__N_12g0L8inputs11E>:
   456b4:	00000002 00000033 00000036              ....3...6...

000456c0 <_ZN12_GLOBAL__N_12g0L8opdata11E>:
   456c0:	00000000                                ....

000456c4 <_ZN12_GLOBAL__N_12g0L9outputs10E>:
   456c4:	00000001 00000036                       ....6...

000456cc <_ZN12_GLOBAL__N_12g0L8inputs10E>:
   456cc:	00000003 00000035 00000012 00000013     ....5...........

000456dc <_ZN12_GLOBAL__N_12g0L8opdata10E>:
   456dc:	00000001 00000001 00000001 00000000     ................
   456ec:	00000001 00000001                       ........

000456f4 <_ZN12_GLOBAL__N_12g0L8outputs9E>:
   456f4:	00000001 00000035                       ....5...

000456fc <_ZN12_GLOBAL__N_12g0L7inputs9E>:
   456fc:	00000003 00000034 00000010 00000011     ....4...........

0004570c <_ZN12_GLOBAL__N_12g0L7opdata9E>:
   4570c:	00000001 00000001 00000001 00000001     ................
   4571c:	00000003 00000001 00000001              ............

00045728 <_ZN12_GLOBAL__N_12g0L8outputs8E>:
   45728:	00000001 00000034                       ....4...

00045730 <_ZN12_GLOBAL__N_12g0L7inputs8E>:
   45730:	00000003 00000033 0000000e 0000000f     ....3...........

00045740 <_ZN12_GLOBAL__N_12g0L7opdata8E>:
   45740:	00000001 00000001 00000001 00000003     ................
   45750:	00000001 00000001                       ........

00045758 <_ZN12_GLOBAL__N_12g0L8outputs7E>:
   45758:	00000001 00000033                       ....3...

00045760 <_ZN12_GLOBAL__N_12g0L7inputs7E>:
   45760:	00000003 00000032 0000000c 0000000d     ....2...........

00045770 <_ZN12_GLOBAL__N_12g0L7opdata7E>:
   45770:	00000001 00000001 00000001 00000000     ................
   45780:	00000001 00000001                       ........

00045788 <_ZN12_GLOBAL__N_12g0L8outputs6E>:
   45788:	00000001 00000032                       ....2...

00045790 <_ZN12_GLOBAL__N_12g0L7inputs6E>:
   45790:	00000003 00000031 0000000a 0000000b     ....1...........

000457a0 <_ZN12_GLOBAL__N_12g0L7opdata6E>:
   457a0:	00000002 00000002 00000002 00000001     ................
   457b0:	00000003 00000001 00000001              ............

000457bc <_ZN12_GLOBAL__N_12g0L8outputs5E>:
   457bc:	00000001 00000031                       ....1...

000457c4 <_ZN12_GLOBAL__N_12g0L7inputs5E>:
   457c4:	00000002 00000030 00000001              ....0.......

000457d0 <_ZN12_GLOBAL__N_12g0L8outputs4E>:
   457d0:	00000001 00000030                       ....0...

000457d8 <_ZN12_GLOBAL__N_12g0L7inputs4E>:
   457d8:	00000003 0000002f 00000008 00000009     ..../...........

000457e8 <_ZN12_GLOBAL__N_12g0L7opdata4E>:
   457e8:	00000001 00000001 00000001 00000003     ................
   457f8:	00000001 00000001                       ........

00045800 <_ZN12_GLOBAL__N_12g0L8outputs3E>:
   45800:	00000001 0000002f                       ..../...

00045808 <_ZN12_GLOBAL__N_12g0L7inputs3E>:
   45808:	00000002 0000002c 0000002e              ....,.......

00045814 <_ZN12_GLOBAL__N_12g0L7opdata3E>:
   45814:	00000000                                ....

00045818 <_ZN12_GLOBAL__N_12g0L8outputs2E>:
   45818:	00000001 0000002e                       ........

00045820 <_ZN12_GLOBAL__N_12g0L7inputs2E>:
   45820:	00000003 0000002d 00000006 00000007     ....-...........

00045830 <_ZN12_GLOBAL__N_12g0L7opdata2E>:
   45830:	00000001 00000001 00000001 00000000     ................
   45840:	00000001 00000001                       ........

00045848 <_ZN12_GLOBAL__N_12g0L8outputs1E>:
   45848:	00000001 0000002d                       ....-...

00045850 <_ZN12_GLOBAL__N_12g0L7inputs1E>:
   45850:	00000003 0000002c 00000004 00000005     ....,...........

00045860 <_ZN12_GLOBAL__N_12g0L7opdata1E>:
   45860:	00000001 00000001 00000001 00000001     ................
   45870:	00000003 00000001 00000001              ............

0004587c <_ZN12_GLOBAL__N_12g0L8outputs0E>:
   4587c:	00000001 0000002c                       ....,...

00045884 <_ZN12_GLOBAL__N_12g0L7inputs0E>:
   45884:	00000003 00000000 00000002 00000003     ................

00045894 <_ZN12_GLOBAL__N_12g0L7opdata0E>:
   45894:	00000001 00000002 00000002 00000003     ................
   458a4:	00000001 00000001                       ........

000458ac <_ZN12_GLOBAL__N_12g0L7quant71E>:
   458ac:	000458c0 000458b8 00000000              .X...X......

000458b8 <_ZN12_GLOBAL__N_12g0L12quant71_zeroE>:
   458b8:	00000001 ffffff80                       ........

000458c0 <_ZN12_GLOBAL__N_12g0L13quant71_scaleE>:
   458c0:	00000001 3b800000                       .......;

000458c8 <_ZN12_GLOBAL__N_12g0L18tensor_dimension71E>:
   458c8:	00000004 00000001 0000000c 0000000c     ................
   458d8:	00000002                                ....

000458dc <_ZN12_GLOBAL__N_12g0L7quant70E>:
   458dc:	000458f0 000458e8 00000000              .X...X......

000458e8 <_ZN12_GLOBAL__N_12g0L12quant70_zeroE>:
   458e8:	00000001 fffffff1                       ........

000458f0 <_ZN12_GLOBAL__N_12g0L13quant70_scaleE>:
   458f0:	00000001 3d573d6a                       ....j=W=

000458f8 <_ZN12_GLOBAL__N_12g0L18tensor_dimension70E>:
   458f8:	00000004 00000001 0000000c 0000000c     ................
   45908:	00000002                                ....

0004590c <_ZN12_GLOBAL__N_12g0L7quant69E>:
   4590c:	00045920 00045918 00000000               Y...Y......

00045918 <_ZN12_GLOBAL__N_12g0L12quant69_zeroE>:
   45918:	00000001 ffffff80                       ........

00045920 <_ZN12_GLOBAL__N_12g0L13quant69_scaleE>:
   45920:	00000001 3cb2fba7                       .......<

00045928 <_ZN12_GLOBAL__N_12g0L18tensor_dimension69E>:
   45928:	00000004 00000001 0000000c 0000000c     ................
   45938:	00000020                                 ...

0004593c <_ZN12_GLOBAL__N_12g0L7quant68E>:
   4593c:	00045950 00045948 00000000              PY..HY......

00045948 <_ZN12_GLOBAL__N_12g0L12quant68_zeroE>:
   45948:	00000001 ffffff80                       ........

00045950 <_ZN12_GLOBAL__N_12g0L13quant68_scaleE>:
   45950:	00000001 3ca2355b                       ....[5.<

00045958 <_ZN12_GLOBAL__N_12g0L18tensor_dimension68E>:
   45958:	00000004 00000001 0000000c 0000000c     ................
   45968:	00000030                                0...

0004596c <_ZN12_GLOBAL__N_12g0L7quant67E>:
   4596c:	00045980 00045978 00000000              .Y..xY......

00045978 <_ZN12_GLOBAL__N_12g0L12quant67_zeroE>:
   45978:	00000001 fffffffe                       ........

00045980 <_ZN12_GLOBAL__N_12g0L13quant67_scaleE>:
   45980:	00000001 3da2c462                       ....b..=

00045988 <_ZN12_GLOBAL__N_12g0L18tensor_dimension67E>:
   45988:	00000004 00000001 0000000c 0000000c     ................
   45998:	00000008                                ....

0004599c <_ZN12_GLOBAL__N_12g0L7quant66E>:
   4599c:	000459b0 000459a8 00000000              .Y...Y......

000459a8 <_ZN12_GLOBAL__N_12g0L12quant66_zeroE>:
   459a8:	00000001 00000005                       ........

000459b0 <_ZN12_GLOBAL__N_12g0L13quant66_scaleE>:
   459b0:	00000001 3d3c1d9e                       ......<=

000459b8 <_ZN12_GLOBAL__N_12g0L18tensor_dimension66E>:
   459b8:	00000004 00000001 0000000c 0000000c     ................
   459c8:	00000008                                ....

000459cc <_ZN12_GLOBAL__N_12g0L7quant65E>:
   459cc:	000459e0 000459d8 00000000              .Y...Y......

000459d8 <_ZN12_GLOBAL__N_12g0L12quant65_zeroE>:
   459d8:	00000001 ffffff80                       ........

000459e0 <_ZN12_GLOBAL__N_12g0L13quant65_scaleE>:
   459e0:	00000001 3cc0c0c1                       .......<

000459e8 <_ZN12_GLOBAL__N_12g0L18tensor_dimension65E>:
   459e8:	00000004 00000001 0000000c 0000000c     ................
   459f8:	00000030                                0...

000459fc <_ZN12_GLOBAL__N_12g0L7quant64E>:
   459fc:	00045a10 00045a08 00000000              .Z...Z......

00045a08 <_ZN12_GLOBAL__N_12g0L12quant64_zeroE>:
   45a08:	00000001 ffffff80                       ........

00045a10 <_ZN12_GLOBAL__N_12g0L13quant64_scaleE>:
   45a10:	00000001 3c94eb8d                       .......<

00045a18 <_ZN12_GLOBAL__N_12g0L18tensor_dimension64E>:
   45a18:	00000004 00000001 0000000c 0000000c     ................
   45a28:	00000030                                0...

00045a2c <_ZN12_GLOBAL__N_12g0L7quant63E>:
   45a2c:	00045a40 00045a38 00000000              @Z..8Z......

00045a38 <_ZN12_GLOBAL__N_12g0L12quant63_zeroE>:
   45a38:	00000001 00000001                       ........

00045a40 <_ZN12_GLOBAL__N_12g0L13quant63_scaleE>:
   45a40:	00000001 3d68d66e                       ....n.h=

00045a48 <_ZN12_GLOBAL__N_12g0L18tensor_dimension63E>:
   45a48:	00000004 00000001 0000000c 0000000c     ................
   45a58:	00000008                                ....

00045a5c <_ZN12_GLOBAL__N_12g0L7quant62E>:
   45a5c:	00045a70 00045a68 00000000              pZ..hZ......

00045a68 <_ZN12_GLOBAL__N_12g0L12quant62_zeroE>:
   45a68:	00000001 fffffff1                       ........

00045a70 <_ZN12_GLOBAL__N_12g0L13quant62_scaleE>:
   45a70:	00000001 3d353145                       ....E15=

00045a78 <_ZN12_GLOBAL__N_12g0L18tensor_dimension62E>:
   45a78:	00000004 00000001 0000000c 0000000c     ................
   45a88:	00000008                                ....

00045a8c <_ZN12_GLOBAL__N_12g0L7quant61E>:
   45a8c:	00045aa0 00045a98 00000000              .Z...Z......

00045a98 <_ZN12_GLOBAL__N_12g0L12quant61_zeroE>:
   45a98:	00000001 ffffff80                       ........

00045aa0 <_ZN12_GLOBAL__N_12g0L13quant61_scaleE>:
   45aa0:	00000001 3cc0c0c1                       .......<

00045aa8 <_ZN12_GLOBAL__N_12g0L18tensor_dimension61E>:
   45aa8:	00000004 00000001 0000000c 0000000c     ................
   45ab8:	00000030                                0...

00045abc <_ZN12_GLOBAL__N_12g0L7quant60E>:
   45abc:	00045ad0 00045ac8 00000000              .Z...Z......

00045ac8 <_ZN12_GLOBAL__N_12g0L12quant60_zeroE>:
   45ac8:	00000001 ffffff80                       ........

00045ad0 <_ZN12_GLOBAL__N_12g0L13quant60_scaleE>:
   45ad0:	00000001 3ca9c6b3                       .......<

00045ad8 <_ZN12_GLOBAL__N_12g0L18tensor_dimension60E>:
   45ad8:	00000004 00000001 0000000c 0000000c     ................
   45ae8:	00000030                                0...

00045aec <_ZN12_GLOBAL__N_12g0L7quant59E>:
   45aec:	00045b00 00045af8 00000000              .[...Z......

00045af8 <_ZN12_GLOBAL__N_12g0L12quant59_zeroE>:
   45af8:	00000001 fffffffb                       ........

00045b00 <_ZN12_GLOBAL__N_12g0L13quant59_scaleE>:
   45b00:	00000001 3d5084e9                       ......P=

00045b08 <_ZN12_GLOBAL__N_12g0L18tensor_dimension59E>:
   45b08:	00000004 00000001 0000000c 0000000c     ................
   45b18:	00000008                                ....

00045b1c <_ZN12_GLOBAL__N_12g0L7quant58E>:
   45b1c:	00045b30 00045b28 00000000              0[..([......

00045b28 <_ZN12_GLOBAL__N_12g0L12quant58_zeroE>:
   45b28:	00000001 ffffff80                       ........

00045b30 <_ZN12_GLOBAL__N_12g0L13quant58_scaleE>:
   45b30:	00000001 3cc0c0c1                       .......<

00045b38 <_ZN12_GLOBAL__N_12g0L18tensor_dimension58E>:
   45b38:	00000004 00000001 0000000c 0000000c     ................
   45b48:	00000030                                0...

00045b4c <_ZN12_GLOBAL__N_12g0L7quant57E>:
   45b4c:	00045b60 00045b58 00000000              `[..X[......

00045b58 <_ZN12_GLOBAL__N_12g0L12quant57_zeroE>:
   45b58:	00000001 ffffff80                       ........

00045b60 <_ZN12_GLOBAL__N_12g0L13quant57_scaleE>:
   45b60:	00000001 3cc0c0c1                       .......<

00045b68 <_ZN12_GLOBAL__N_12g0L18tensor_dimension57E>:
   45b68:	00000004 00000001 00000019 00000019     ................
   45b78:	00000030                                0...

00045b7c <_ZN12_GLOBAL__N_12g0L7quant56E>:
   45b7c:	00045b90 00045b88 00000000              .[...[......

00045b88 <_ZN12_GLOBAL__N_12g0L12quant56_zeroE>:
   45b88:	00000001 ffffff80                       ........

00045b90 <_ZN12_GLOBAL__N_12g0L13quant56_scaleE>:
   45b90:	00000001 3cc0c0c1                       .......<

00045b98 <_ZN12_GLOBAL__N_12g0L18tensor_dimension56E>:
   45b98:	00000004 00000001 00000018 00000018     ................
   45ba8:	00000030                                0...

00045bac <_ZN12_GLOBAL__N_12g0L7quant55E>:
   45bac:	00045bc0 00045bb8 00000000              .[...[......

00045bb8 <_ZN12_GLOBAL__N_12g0L12quant55_zeroE>:
   45bb8:	00000001 ffffffee                       ........

00045bc0 <_ZN12_GLOBAL__N_12g0L13quant55_scaleE>:
   45bc0:	00000001 3dd08007                       .......=

00045bc8 <_ZN12_GLOBAL__N_12g0L18tensor_dimension55E>:
   45bc8:	00000004 00000001 00000018 00000018     ................
   45bd8:	00000008                                ....

00045bdc <_ZN12_GLOBAL__N_12g0L7quant54E>:
   45bdc:	00045bf0 00045be8 00000000              .[...[......

00045be8 <_ZN12_GLOBAL__N_12g0L12quant54_zeroE>:
   45be8:	00000001 ffffffe9                       ........

00045bf0 <_ZN12_GLOBAL__N_12g0L13quant54_scaleE>:
   45bf0:	00000001 3dcaca7c                       ....|..=

00045bf8 <_ZN12_GLOBAL__N_12g0L18tensor_dimension54E>:
   45bf8:	00000004 00000001 00000018 00000018     ................
   45c08:	00000008                                ....

00045c0c <_ZN12_GLOBAL__N_12g0L7quant53E>:
   45c0c:	00045c20 00045c18 00000000               \...\......

00045c18 <_ZN12_GLOBAL__N_12g0L12quant53_zeroE>:
   45c18:	00000001 ffffff80                       ........

00045c20 <_ZN12_GLOBAL__N_12g0L13quant53_scaleE>:
   45c20:	00000001 3cc0c0c1                       .......<

00045c28 <_ZN12_GLOBAL__N_12g0L18tensor_dimension53E>:
   45c28:	00000004 00000001 00000018 00000018     ................
   45c38:	00000030                                0...

00045c3c <_ZN12_GLOBAL__N_12g0L7quant52E>:
   45c3c:	00045c50 00045c48 00000000              P\..H\......

00045c48 <_ZN12_GLOBAL__N_12g0L12quant52_zeroE>:
   45c48:	00000001 ffffff80                       ........

00045c50 <_ZN12_GLOBAL__N_12g0L13quant52_scaleE>:
   45c50:	00000001 3cc0c0c1                       .......<

00045c58 <_ZN12_GLOBAL__N_12g0L18tensor_dimension52E>:
   45c58:	00000004 00000001 00000018 00000018     ................
   45c68:	00000030                                0...

00045c6c <_ZN12_GLOBAL__N_12g0L7quant51E>:
   45c6c:	00045c80 00045c78 00000000              .\..x\......

00045c78 <_ZN12_GLOBAL__N_12g0L12quant51_zeroE>:
   45c78:	00000001 00000006                       ........

00045c80 <_ZN12_GLOBAL__N_12g0L13quant51_scaleE>:
   45c80:	00000001 3d557863                       ....cxU=

00045c88 <_ZN12_GLOBAL__N_12g0L18tensor_dimension51E>:
   45c88:	00000004 00000001 00000018 00000018     ................
   45c98:	00000008                                ....

00045c9c <_ZN12_GLOBAL__N_12g0L7quant50E>:
   45c9c:	00045cb0 00045ca8 00000000              .\...\......

00045ca8 <_ZN12_GLOBAL__N_12g0L12quant50_zeroE>:
   45ca8:	00000001 ffffff80                       ........

00045cb0 <_ZN12_GLOBAL__N_12g0L13quant50_scaleE>:
   45cb0:	00000001 3cc0c0c1                       .......<

00045cb8 <_ZN12_GLOBAL__N_12g0L18tensor_dimension50E>:
   45cb8:	00000004 00000001 00000018 00000018     ................
   45cc8:	00000030                                0...

00045ccc <_ZN12_GLOBAL__N_12g0L7quant49E>:
   45ccc:	00045ce0 00045cd8 00000000              .\...\......

00045cd8 <_ZN12_GLOBAL__N_12g0L12quant49_zeroE>:
   45cd8:	00000001 ffffff80                       ........

00045ce0 <_ZN12_GLOBAL__N_12g0L13quant49_scaleE>:
   45ce0:	00000001 3cc0c0c1                       .......<

00045ce8 <_ZN12_GLOBAL__N_12g0L18tensor_dimension49E>:
   45ce8:	00000004 00000001 00000031 00000031     ........1...1...
   45cf8:	00000030                                0...

00045cfc <_ZN12_GLOBAL__N_12g0L7quant48E>:
   45cfc:	00045d10 00045d08 00000000              .]...]......

00045d08 <_ZN12_GLOBAL__N_12g0L12quant48_zeroE>:
   45d08:	00000001 ffffff80                       ........

00045d10 <_ZN12_GLOBAL__N_12g0L13quant48_scaleE>:
   45d10:	00000001 3cc0c0c1                       .......<

00045d18 <_ZN12_GLOBAL__N_12g0L18tensor_dimension48E>:
   45d18:	00000004 00000001 00000030 00000030     ........0...0...
   45d28:	00000030                                0...

00045d2c <_ZN12_GLOBAL__N_12g0L7quant47E>:
   45d2c:	00045d40 00045d38 00000000              @]..8]......

00045d38 <_ZN12_GLOBAL__N_12g0L12quant47_zeroE>:
   45d38:	00000001 ffffffff                       ........

00045d40 <_ZN12_GLOBAL__N_12g0L13quant47_scaleE>:
   45d40:	00000001 3d979155                       ....U..=

00045d48 <_ZN12_GLOBAL__N_12g0L18tensor_dimension47E>:
   45d48:	00000004 00000001 00000030 00000030     ........0...0...
   45d58:	00000008                                ....

00045d5c <_ZN12_GLOBAL__N_12g0L7quant46E>:
   45d5c:	00045d70 00045d68 00000000              p]..h]......

00045d68 <_ZN12_GLOBAL__N_12g0L12quant46_zeroE>:
   45d68:	00000001 0000001c                       ........

00045d70 <_ZN12_GLOBAL__N_12g0L13quant46_scaleE>:
   45d70:	00000001 3d76c942                       ....B.v=

00045d78 <_ZN12_GLOBAL__N_12g0L18tensor_dimension46E>:
   45d78:	00000004 00000001 00000030 00000030     ........0...0...
   45d88:	00000008                                ....

00045d8c <_ZN12_GLOBAL__N_12g0L7quant45E>:
   45d8c:	00045da0 00045d98 00000000              .]...]......

00045d98 <_ZN12_GLOBAL__N_12g0L12quant45_zeroE>:
   45d98:	00000001 ffffff80                       ........

00045da0 <_ZN12_GLOBAL__N_12g0L13quant45_scaleE>:
   45da0:	00000001 3cc0c0c1                       .......<

00045da8 <_ZN12_GLOBAL__N_12g0L18tensor_dimension45E>:
   45da8:	00000004 00000001 00000030 00000030     ........0...0...
   45db8:	00000008                                ....

00045dbc <_ZN12_GLOBAL__N_12g0L7quant44E>:
   45dbc:	00045dd0 00045dc8 00000000              .]...]......

00045dc8 <_ZN12_GLOBAL__N_12g0L12quant44_zeroE>:
   45dc8:	00000001 ffffff80                       ........

00045dd0 <_ZN12_GLOBAL__N_12g0L13quant44_scaleE>:
   45dd0:	00000001 3cc0c0c1                       .......<

00045dd8 <_ZN12_GLOBAL__N_12g0L18tensor_dimension44E>:
   45dd8:	00000004 00000001 00000030 00000030     ........0...0...
   45de8:	00000008                                ....

00045dec <_ZN12_GLOBAL__N_12g0L7quant43E>:
   45dec:	00045e04 00045df8 00000000              .^...]......

00045df8 <_ZN12_GLOBAL__N_12g0L12quant43_zeroE>:
   45df8:	00000002 00000000 00000000              ............

00045e04 <_ZN12_GLOBAL__N_12g0L13quant43_scaleE>:
   45e04:	00000002 38a6c4a5 38a4a951              .......8Q..8

00045e10 <_ZN12_GLOBAL__N_12g0L18tensor_dimension43E>:
   45e10:	00000001 00000002                       ........

00045e18 <_ZN12_GLOBAL__N_12g0L13tensor_data43E>:
   45e18:	0000e67f ffff19f6                       ........

00045e20 <_ZN12_GLOBAL__N_12g0L7quant42E>:
   45e20:	00045e38 00045e2c 00000000              8^..,^......

00045e2c <_ZN12_GLOBAL__N_12g0L12quant42_zeroE>:
   45e2c:	00000002 00000000 00000000              ............

00045e38 <_ZN12_GLOBAL__N_12g0L13quant42_scaleE>:
   45e38:	00000002 3b6e876e 3b6b8407              ....n.n;..k;

00045e44 <_ZN12_GLOBAL__N_12g0L18tensor_dimension42E>:
   45e44:	00000004 00000002 00000001 00000001     ................
   45e54:	00000020 00000000 00000000               ...........

00045e60 <_ZN12_GLOBAL__N_12g0L13tensor_data42E>:
   45e60:	c5e7e0c5 087f095d d7b0b32e f77fed55     ....].......U...
   45e70:	125df89f d67ae45a a51465dc 1715abbb     ..].Z.z..e......
   45e80:	bc9a7f61 ce0e6519 3c92a03d 482307be     a....e..=..<..#H
   45e90:	4c5963ad 34dbf6bf a8b3fc68 99735a40     .cYL...4h...@Zs.

00045ea0 <_ZN12_GLOBAL__N_12g0L7quant41E>:
   45ea0:	00045f30 00045eac 00000000              0_...^......

00045eac <_ZN12_GLOBAL__N_12g0L12quant41_zeroE>:
   45eac:	00000020 00000000 00000000 00000000      ...............
	...

00045f30 <_ZN12_GLOBAL__N_12g0L13quant41_scaleE>:
   45f30:	00000020 383eb062 383a6d7a 3842393e      ...b.>8zm:8>9B8
   45f40:	3834b876 383aa060 383e8d9d 383714c9     v.48`.:8..>8..78
   45f50:	382ef38a 383b52ca 382fc81f 3849fe27     ...8.R;8../8'.I8
   45f60:	3837ba26 383266e8 383d1d5f 383b15b9     &.78.f28_.=8..;8
   45f70:	383f3614 3838a9a5 383a03b8 383ec266     .6?8..88..:8f.>8
   45f80:	38333346 38338d17 3833e69e 385c3fd5     F338..38..38.?\8
   45f90:	383776f6 38403486 3832137e 3831d50d     .v78.4@8~.28..18
   45fa0:	38329824 38399a5a 383e05b7 383ac171     $.28Z.98..>8q.:8
   45fb0:	382d9a28                                (.-8

00045fb4 <_ZN12_GLOBAL__N_12g0L18tensor_dimension41E>:
   45fb4:	00000001 00000020 00000000              .... .......

00045fc0 <_ZN12_GLOBAL__N_12g0L13tensor_data41E>:
   45fc0:	000001dd 000001e5 000002c6 fffffe54     ............T...
   45fd0:	000001f0 00000159 00000212 fffffec7     ....Y...........
   45fe0:	fffffd35 ffffff2f 000002c6 000001aa     5.../...........
   45ff0:	00000085 0000015c 0000019e fffffee0     ....\...........
   46000:	fffffed6 000001fb fffffe79 0000017b     ........y...{...
   46010:	fffffe80 fffffdc9 00000482 00000157     ............W...
   46020:	00000153 ffffff92 ffffff27 ffffff90     S.......'.......
   46030:	00000151 000001df 0000018c fffffe8a     Q...............

00046040 <_ZN12_GLOBAL__N_12g0L7quant40E>:
   46040:	000460d0 0004604c 00000000              .`..L`......

0004604c <_ZN12_GLOBAL__N_12g0L12quant40_zeroE>:
   4604c:	00000020 00000000 00000000 00000000      ...............
	...

000460d0 <_ZN12_GLOBAL__N_12g0L13quant40_scaleE>:
   460d0:	00000020 3b167969 3b131c91 3b194371      ...iy.;...;qC.;
   460e0:	3b0e9bab 3b1344bb 3b165df9 3b10788b     ...;.D.;.].;.x.;
   460f0:	3b0a0e37 3b13d185 3b0ab5f7 3b1f64e8     7..;...;...;.d.;
   46100:	3b10fb09 3b0cc74a 3b153b64 3b13a155     ...;J..;d;.;U..;
   46110:	3b16e2e9 3b11b806 3b12c91d 3b1687a0     ...;...;...;...;
   46120:	3b0d688e 3b0daf6e 3b0df614 3b2dccf2     .h.;n..;...;..-;
   46130:	3b10c604 3b17abb2 3b0c8577 3b0c5431     ...;...;w..;1T.;
   46140:	3b0cee24 3b1275f7 3b15f2bc 3b135ed3     $..;.u.;...;.^.;
   46150:	3b08fdac                                ...;

00046154 <_ZN12_GLOBAL__N_12g0L18tensor_dimension40E>:
   46154:	00000004 00000020 00000001 00000001     .... ...........
   46164:	00000030 00000000 00000000              0...........

00046170 <_ZN12_GLOBAL__N_12g0L13tensor_data40E>:
   46170:	b12b4821 520b19c5 b495eb01 42d67fa4     !H+....R.......B
   46180:	10266729 22e1a6e7 7ef7a877 0e56bd47     )g&...."w..~G.V.
   46190:	c7265ca8 f1aa19f2 ba76e1aa 70bcf957     .\&.......v.W..p
   461a0:	2c550850 7f0bbe26 4cb4492c a7239c92     P.U,&...,I.L..#.
   461b0:	ea15e3c4 baac5f70 c6d2013a c5f03764     ....p_..:...d7..
   461c0:	b5a7a99b 0fd4c32d 1bfd790e 2bdf0834     ....-....y..4..+
   461d0:	a7b5eb10 154f1ddb ddc9e41e 94c55e3b     ......O.....;^..
   461e0:	2ddd38d2 252fdcbb d2e943b4 2cc1f2f5     .8.-../%.C.....,
   461f0:	1743e741 52d31abf 547fe73e 344f09ce     A.C....R>..T..O4
   46200:	a63d64a8 494c6968 ba2b0f66 7a6d286b     .d=.hiLIf.+.k(mz
   46210:	68bf4881 02a84dae 0e9a4d67 6fcb1f34     .H.h.M..gM..4..o
   46220:	9a191c98 c1a5d399 1bb8ce9c d9d88ba9     ................
   46230:	fb5f29ae d9ee114b cfa4491f a42768c1     .)_.K....I...h'.
   46240:	bce53041 ea9256ab 326294ed 297f9712     A0...V....b2...)
   46250:	cecd319e 9e92fa69 a1a16a75 deda5cfb     .1..i...uj...\..
   46260:	c9d773a4 44d8ed24 2d3aaff9 697528b3     .s..$..D..:-.(ui
   46270:	fe6e7f8c 72cf0e76 cad2389a 05492deb     ..n.v..r.8...-I.
   46280:	3e4946ae d6c4c771 c3f60357 fa0f7c74     .FI>q...W...t|..
   46290:	9f0af878 9d3fe797 7f285621 7eecbc3d     x.....?.!V(.=..~
   462a0:	632d68b7 23617892 9ca035c7 390aa5d5     .h-c.xa#.5.....9
   462b0:	564f12b4 3e0ed194 0a5532a9 eaa1599a     ..OV...>.2U..Y..
   462c0:	81c4334f badbe370 ddf6a314 4e6873cb     O3..p........shN
   462d0:	37cdfa4f bdf1974b 7244b66a 0aeed998     O..7K...j.Dr....
   462e0:	d747cf84 ab00fb7b 5aba208c c4a4b507     ..G.{.... .Z....
   462f0:	e781c3bb 8fe0f836 926e8958 ee8190da     ....6...X.n.....
   46300:	b24e440f b9523059 9b0295b7 f08ea6ab     .DN.Y0R.........
   46310:	6397eac7 acbe8d81 db1b17e3 51e1bcf0     ...c...........Q
   46320:	5016dadb 21553d1b 3c492c07 e8dc376e     ...P.=U!.,I<n7..
   46330:	a8b3bf11 e516559e 35e1bba3 33dc8141     .....U.....5A..3
   46340:	e277bead bcb5fbdf 09005b6c ec203c27     ..w.....l[..'< .
   46350:	b9bb38af b48e55de 4d619d41 0b482806     .8...U..A.aM.(H.
   46360:	2ab61d7f 56edd605 ebf66c1e a800c1a4     ...*...V.l......
   46370:	af77324b 7b44be78 442d1e58 11082df2     K2w.x.D{X.-D.-..
   46380:	aec3415d aee00367 fe2e3db4 a23fbf20     ]A..g....=.. .?.
   46390:	d6f85490 b84adede 62376baf 330a3a11     .T....J..k7b.:.3
   463a0:	bb905b28 b6cd7f14 8a75a13d eda32664     ([......=.u.d&..
   463b0:	7fa6e6ad aabdc80b 32e0f8df 4fc997b4     ...........2...O
   463c0:	7d1bd745 334ade94 0fc46ff9 545b9b6e     E..}..J3.o..n.[T
   463d0:	ab03db40 4d5a9f0b b9355d61 6cc9f72a     @.....ZMa]5.*..l
   463e0:	b45c1b41 c9322674 251c9e28 343264fa     A.\.t&2.(..%.d24
   463f0:	620f3d4b b7f6f57f bce0b370 fdd2a62a     K=.b....p...*...
   46400:	fb208bd0 1d4d944d 3f4ec6f8 3c48f94a     .. .M.M...N?J.H<
   46410:	3d61c9db fa19b240 c2e74d04 29ec7607     ..a=@....M...v.)
   46420:	a4f5eba1 ded22e00 1f53f1e2 dc56b652     ..........S.R.V.
   46430:	1f7d63e7 a6ab5124 1d7b7f72 d702be5a     .c}.$Q..r.{.Z...
   46440:	b4fd3917 2e0556a3 d46cca84 dbd1bfee     .9...V....l.....
   46450:	0d9854d8 e1c0a3dd 695df8f8 1881a8e8     .T........]i....
   46460:	dfce5c34 8ed36bdf c06674c2 9aa32650     4\...k...tf.P&..
   46470:	779514f6 6a62b853 b45625d0 e18154c8     ...wS.bj.%V..T..
   46480:	dfbe4f35 0c93e584 12c3b664 1f6c5ec7     5O......d....^l.
   46490:	0b11cec5 3f855bed c74e1b2b c091ef96     .....[.?+.N.....
   464a0:	d99762f4 6fdd2eed f568e929 b72b70e3     .b.....o).h..p+.
   464b0:	4fef5818 f4c8f71b bbcd13a3 a14c38e0     .X.O.........8L.
   464c0:	2fe6d635 2bead12e a2e97fe0 a2b61c7b     5../...+....{...
   464d0:	e48a8849 97890839 aea727c7 161457fa     I...9....'...W..
   464e0:	d1ac5111 1d102ca4 9521eb18 891a81e2     .Q...,....!.....
   464f0:	bb6747e0 a4bbd919 c0691099 bf5c1ee3     .Gg.......i...\.
   46500:	539d444c 0eca5677 db08e36d ce7e584d     LD.SwV..m...MX~.
   46510:	7de7a423 7f21b3ac ec14fc57 927a345a     #..}..!.W...Z4z.
   46520:	5aaae93d 13bfed99 2e38304c 6c9c37e6     =..Z....L08..7.l
   46530:	40e5a2f2 2b521361 fb16aebd a3fa9edd     ...@a.R+........
   46540:	266cbeeb e0628138 11b37385 01c6a7ff     ..l&8.b..s......
   46550:	bb546a38 188a0f6b eb9c8266 cdce0c29     8jT.k...f...)...
   46560:	a96a7245 cdabcade 9d1273e6 9899b4bf     Erj......s......
   46570:	91ade5dc c66e37dc ee492168 036d95c4     .....7n.h!I...m.
   46580:	66622392 1b82a087 07ce3803 448165ae     .#bf.....8...e.D
   46590:	f548c6fc 4b62aea7 1d0be61e a3e728da     ..H...bK.....(..
   465a0:	4fb00ec3 5706783e 2fe8158f c2cdbee2     ...O>x.W.../....
   465b0:	48347fd8 cfe6af23 0bcbf4e5 e17ceb50     ..4H#.......P.|.
   465c0:	da1001de 134812a9 9a3ca421 cb4c6092     ......H.!.<..`L.
   465d0:	203f3220 ff426c3c c6a4d044 7d025aa1      2? <lB.D....Z.}
   465e0:	ed71bd40 ab517602 926c377f 6da504a6     @.q..vQ..7l....m
   465f0:	69785c03 72a0f44a 61b2ab0a c0020a1e     .\xiJ..r...a....
   46600:	5ecf31ea 28eeef7f d0b149f6 ef6c7e62     .1.^...(.I..b~l.
   46610:	eefad468 aab1db18 2bb7770e c33d53df     h........w.+.S=.
   46620:	57f3f7e9 2f9613fa 333f39db 98584c98     ...W.../.9?3.LX.
   46630:	0395eedb 65e06c43 b5d9a116 42914245     ....Cl.e....EB.B
   46640:	7f64bcb9 79943a82 0d48678e 8d82a2ec     ..d..:.y.gH.....
   46650:	fafaad4f d3699056 01a1d82b ea24b4d2     O...V.i.+.....$.
   46660:	aaa70878 6049c52f 303fd9f3 d1c8f515     x.../.I`..?0....
   46670:	7a2e38f0 728160fd 98de0364 0e7d36f5     .8.z.`.rd....6}.
   46680:	7b852c3b fb04e0de f6df5e9d cc534e86     ;,.{.....^...NS.
   46690:	88f18628 9c5839e3 3cd54e8d 8143bd61     (....9X..N.<a.C.
   466a0:	6e26a375 d3ae3b74 42e23923 b473a147     u.&nt;..#9.BG.s.
   466b0:	52d67990 009b6b15 599ac747 911fbb49     .y.R.k..G..YI...
   466c0:	693255b7 ac0e546f 7f3ec258 30f220d2     .U2ioT..X.>.. .0
   466d0:	c9e013d3 7adb6c2e 3c00eea6 06f9787c     .....l.z...<|x..
   466e0:	102ff01e 992512f3 b8d3f5dc dcbefa4e     ../...%.....N...
   466f0:	71c9685a abb0c729 e792d16c 27d066de     Zh.q)...l....f.'
   46700:	00747290 e11eadf2 15f4dd7f 089a47c0     .rt..........G..
   46710:	c9ada1b9 0b3e6749 451e30bd 819d4165     ....Ig>..0.EeA..
   46720:	0f5a785f b97eb7fb 16d9411f 3410db5a     _xZ...~..A..Z..4
   46730:	201ddff6 e955e1ae 9fbdacfc e0df7d5c     ... ..U.....\}..
   46740:	d7497f27 a363f3b3 b741bfa1 1c5e9fa7     '.I...c...A...^.
   46750:	1ada30f9 0464d0e2 bae35b3a 43374fe5     .0....d.:[...O7C
   46760:	6d3a265f a9ee732f 2c9969f7 f82b6715     _&:m/s...i.,.g+.

00046770 <_ZN12_GLOBAL__N_12g0L7quant39E>:
   46770:	00046840 0004677c 00000000              @h..|g......

0004677c <_ZN12_GLOBAL__N_12g0L12quant39_zeroE>:
   4677c:	00000030 00000000 00000000 00000000     0...............
	...

00046840 <_ZN12_GLOBAL__N_12g0L13quant39_scaleE>:
   46840:	00000030 3970a758 397e8f19 393fb770     0...X.p9..~9p.?9
   46850:	398e8fdf 39290742 39829d40 3928ca78     ...9B.)9@..9x.(9
   46860:	3911f3b2 391e5066 39441a21 398736ad     ...9fP.9!.D9.6.9
   46870:	38b6ee17 39358b9b 39289190 39077cb0     ...8..59..(9.|.9
   46880:	391c3ee3 397116fd 3903d296 3969d4d1     .>.9..q9...9..i9
   46890:	39337bd7 392d9269 38392121 387fbf8e     .{39i.-9!!98...8
   468a0:	3984e761 395e25b8 3927ad48 396305b5     a..9.%^9H.'9..c9
   468b0:	395ccd39 397b8b4f 393be62a 39109306     9.\9O.{9*.;9...9
   468c0:	38b5ff88 394edd50 39a05831 38d3804e     ...8P.N91X.9N..8
   468d0:	3938cd2c 38dfaaed 3968bb72 398ab2ba     ,.89...8r.h9...9
   468e0:	39891967 3922cdde 39788ea2 38a2cdc3     g..9.."9..x9...8
   468f0:	3996faf9 3997394b 3955b0e3 395502eb     ...9K9.9..U9..U9
   46900:	39138e4c                                L..9

00046904 <_ZN12_GLOBAL__N_12g0L18tensor_dimension39E>:
   46904:	00000001 00000030 00000000              ....0.......

00046910 <_ZN12_GLOBAL__N_12g0L13tensor_data39E>:
   46910:	000005c7 fffffab7 00000f83 000007af     ................
   46920:	00000c84 000000ab 000007af 0000157e     ............~...
   46930:	fffff4e0 fffff89b fffffb21 00002303     ........!....#..
   46940:	00000e46 00000ee9 000019db fffff170     F...........p...
   46950:	fffff5f4 00001ec8 00000b20 000011e4     ........ .......
   46960:	00001302 00005fdf 00003dca 00000340     ....._...=..@...
   46970:	fffff8ed 00000640 fffffe56 fffffbaa     ....@...V.......
   46980:	00000750 00000946 0000133c 00002729     P...F...<...)'..
   46990:	fffffc3c 000000ef 000022dc 00000d08     <........"......
   469a0:	00001f6b 000009d9 0000053d fffffa6b     k.......=...k...
   469b0:	00000f39 fffff864 00002e28 fffffe56     9...d...(...V...
   469c0:	00000180 00000aad fffff6f1 00001510     ................

000469d0 <_ZN12_GLOBAL__N_12g0L7quant38E>:
   469d0:	00046aa0 000469dc 00000000              .j...i......

000469dc <_ZN12_GLOBAL__N_12g0L12quant38_zeroE>:
   469dc:	00000030 00000000 00000000 00000000     0...............
	...

00046aa0 <_ZN12_GLOBAL__N_12g0L13quant38_scaleE>:
   46aa0:	00000030 3b3d3ffe 3b482f61 3b16c40d     0....?=;a/H;...;
   46ab0:	3b6038ad 3b04ec80 3b4d6e14 3b04bcb2     .8`;...;.nM;...;
   46ac0:	3ae58d97 3af8ff08 3b1a36ef 3b54a9ef     ...:...:.6.;..T;
   46ad0:	3a8fdb2a 3b0ec466 3b048ff2 3ad5180c     *..:f..;...;...:
   46ae0:	3af5be37 3b3d97ca 3acf549a 3b37e286     7..:..=;.T.:..7;
   46af0:	3b0d255d 3b087f34 3a1195f0 3a491ece     ]%.;4..;...:..I:
   46b00:	3b5107f1 3b2eb253 3b03dc6d 3b3287be     ..Q;S..;m..;..2;
   46b10:	3b2da36a 3b45d072 3b13c386 3ae362e9     j.-;r.E;...;.b.:
   46b20:	3a8f1f90 3b22ad9c 3b7c3090 3aa6530f     ...:..";.0|;.S.:
   46b30:	3b1153ea 3aafe466 3b370541 3b5a24f3     .S.;f..:A.7;.$Z;
   46b40:	3b57a12b 3b000775 3b43771b 3a800760     +.W;u..;.wC;`..:
   46b50:	3b6d7639 3b6dd83c 3b280be7 3b278318     9vm;<.m;..(;..';
   46b60:	3ae81363                                c..:

00046b64 <_ZN12_GLOBAL__N_12g0L18tensor_dimension38E>:
   46b64:	00000004 00000030 00000001 00000001     ....0...........
   46b74:	00000008 00000000 00000000              ............

00046b80 <_ZN12_GLOBAL__N_12g0L13tensor_data38E>:
   46b80:	ef7f0df2 a9fe36fd bb44c95b 127fb8ec     .....6..[.D.....
   46b90:	b6463937 e57f17c2 eb071a02 097fc113     79F.............
   46ba0:	e1d1d97f 45e2c89e fe7f4821 da17d913     .......E!H......
   46bb0:	7fe97169 5f1b15b4 2705ffea dc81901c     iq....._...'....
   46bc0:	4dda3e73 cd811ec1 32d5e97f a61ad304     s>.M.......2....
   46bd0:	09f41342 0c267fe7 8c00ec7f 49c2c15b     B.....&.....[..I
   46be0:	da506dc1 7fa9440d 0eb1027f aa16b715     .mP..D..........
   46bf0:	efff206c f1b91c81 d796061b 746ace81     l ............jt
   46c00:	026dcefe debdce7f f75df11c fdb4c87f     ..m.......].....
   46c10:	377fda77 fdd81bdc b9443054 d40e81cf     w..7....T0D.....
   46c20:	7f40db35 50abc407 81bff25a 6906c631     5.@....PZ...1..i
   46c30:	c5b981c2 b87fcf42 d21c12ef e4098196     ....B...........
   46c40:	35400c7f 4aa0e2f3 b2e73153 7fedf8f0     ..@5...JS1......
   46c50:	8119e3a7 a7d0fd6d c5f37f70 0a1f430e     ....m...p....C..
   46c60:	0f067f23 6fedd5fa 6c6b1377 3381e52b     #......ow.kl+..3
   46c70:	69be9d7f 54b3062d 3212aa5f 3e818aad     ...i-..T_..2...>
   46c80:	811cb899 97d0e559 181bfd1c 2c7fbb1a     ....Y..........,
   46c90:	a36248b7 67b9b37f 6b0e0fb9 ea267f05     .Hb....g...k..&.
   46ca0:	81e0235f 2f17f52c 02f12524 2d3e7fbf     _#..,../$%....>-
   46cb0:	6c14bee9 7f043310 2881000b 42e3d9fd     ...l.3.....(...B
   46cc0:	08a91448 7fc334cd cf18ff2c fded818c     H....4..,.......
   46cd0:	70ae40b4 81de59f0 81de00ef b5f604f0     .@.p.Y..........
   46ce0:	4e21214e 21c67f13 16ea5107 f5b0df7f     N!!N...!.Q......
   46cf0:	7ffba638 60d1255b f137a0f6 202c187f     8...[%.`..7..., 

00046d00 <_ZN12_GLOBAL__N_12g0L7quant37E>:
   46d00:	00046d30 00046d0c 00000000              0m...m......

00046d0c <_ZN12_GLOBAL__N_12g0L12quant37_zeroE>:
   46d0c:	00000008 00000000 00000000 00000000     ................
	...

00046d30 <_ZN12_GLOBAL__N_12g0L13quant37_scaleE>:
   46d30:	00000008 39527656 3945db64 38a95356     ....VvR9d.E9VS.8
   46d40:	38fb02a0 38ee503e 391b4229 38d728b9     ...8>P.8)B.9.(.8
   46d50:	390e268d                                .&.9

00046d54 <_ZN12_GLOBAL__N_12g0L18tensor_dimension37E>:
   46d54:	00000001 00000008 00000000              ............

00046d60 <_ZN12_GLOBAL__N_12g0L13tensor_data37E>:
   46d60:	ffffdeb6 fffff263 000006b7 ffffdbb8     ....c...........
   46d70:	00000b93 fffff4b8 00002159 000024d0     ........Y!...$..

00046d80 <_ZN12_GLOBAL__N_12g0L7quant36E>:
   46d80:	00046db0 00046d8c 00000000              .m...m......

00046d8c <_ZN12_GLOBAL__N_12g0L12quant36_zeroE>:
   46d8c:	00000008 00000000 00000000 00000000     ................
	...

00046db0 <_ZN12_GLOBAL__N_12g0L13quant36_scaleE>:
   46db0:	00000008 3c0bc295 3c0363b0 3b60e2ae     .......<.c.<..`;
   46dc0:	3ba6afbe 3b9e4149 3bce33de 3b8ee10b     ...;IA.;.3.;...;
   46dd0:	3bbccb33                                3..;

00046dd4 <_ZN12_GLOBAL__N_12g0L18tensor_dimension36E>:
   46dd4:	00000004 00000008 00000001 00000001     ................
   46de4:	00000030 00000000 00000000              0...........

00046df0 <_ZN12_GLOBAL__N_12g0L13tensor_data36E>:
   46df0:	e413ec7f 25073b1c 0635a773 cd0f40d1     .....;.%s.5..@..
   46e00:	ebece012 e20bc507 d4dbd7c4 22df56e1     .............V."
   46e10:	dd0bd217 0dc1c23a 01b0e716 d535e239     ....:.......9.5.
   46e20:	3af80031 1f123934 06ffb241 f4dc172a     1..:49..A...*...
   46e30:	fcbbd5de 4c31d106 29fcbefd 7fc837e7     ......1L...).7..
   46e40:	eaeb2ce8 ebf7f1c6 2bdcefd1 ac08fc15     .,.........+....
   46e50:	23aee9d9 33f0e7b6 dda7ac9e f7812cd7     ...#...3.....,..
   46e60:	e723b148 f9ed516f 9d135429 fc320dd3     H.#.oQ..)T....2.
   46e70:	ba4020e0 6245fe3b fd245cd1 43d440b0     . @.;.Eb.\$..@.C
   46e80:	25f2effa 29f807ec e281534a 47e7ea13     ...%...)JS.....G
   46e90:	2cfeedcc 0d4901e7 30d30704 e6d51edf     ...,..I....0....
   46ea0:	0e1d160a 0724fb2e 143e4fc3 d6def21d     ......$..O>.....
   46eb0:	d30fb8e1 bcc36104 2247cc05 17ebe5c0     .....a....G"....
   46ec0:	29e80c42 e97ae3b2 09fbeb9d 3defef15     B..)..z........=
   46ed0:	34e42ac7 19f628dc 29d824d6 02f0347f     .*.4.(...$.).4..
   46ee0:	813abdbf c8de12e9 48cd48f8 0d3416b3     ..:......H.H..4.
   46ef0:	11443749 c2ed011d d300ba2e b627d7f3     I7D...........'.
   46f00:	fd39d9fb 3a291dee e5140f5e 21e5f8f2     ..9...):^......!
   46f10:	192abdc6 bf05bfc3 2c89159a 1538d717     ..*........,..8.
   46f20:	7f0c18e0 364c00f1 1936f2b9 c2e7d80f     ......L6..6.....
   46f30:	aa473fe2 df3f49d9 c35440c1 0ae0d7fb     .?G..I?..@T.....
   46f40:	ef0dfd13 d8d81609 1d5de081 061fea0a     ..........].....
   46f50:	f0012b11 d5f10fd5 0fdb0026 d1e3e9f7     .+......&.......
   46f60:	08e2cea1 01e6e435 ea2c0334 1028d713     ....5...4.,...(.

00046f70 <_ZN12_GLOBAL__N_12g0L7quant35E>:
   46f70:	00047040 00046f7c 00000000              @p..|o......

00046f7c <_ZN12_GLOBAL__N_12g0L12quant35_zeroE>:
   46f7c:	00000030 00000000 00000000 00000000     0...............
	...

00047040 <_ZN12_GLOBAL__N_12g0L13quant35_scaleE>:
   47040:	00000030 39760044 392406b7 38b9edc8     0...D.v9..$9...8
   47050:	38d66bab 393d9f54 38f69194 3982fffd     .k.8T.=9...8...9
   47060:	38f98d62 39187c00 39be1718 399946d1     b..8.|.9...9.F.9
   47070:	386e32ea 397786b9 3899c46c 3913588b     .2n8..w9l..8.X.9
   47080:	3937b111 38ebe094 38fdf02c 3907efce     ..79...8,..8...9
   47090:	396965bb 38abfdd7 391ec739 394af743     .ei9...89..9C.J9
   470a0:	393657de 3920654c 399c526b 395c3fb1     .W69Le 9kR.9.?\9
   470b0:	39c01ebd 38d84804 38a31879 3941ccbf     ...9.H.8y..8..A9
   470c0:	39483f66 38b1f701 39970a46 38a6cee5     f?H9...8F..9...8
   470d0:	3911fd16 3902f9b4 38a64bf9 38a16b0b     ...9...9.K.8.k.8
   470e0:	38a4fd2b 39594fa6 38d1ef9a 3952dd81     +..8.OY9...8..R9
   470f0:	39220e13 3915489a 389d9de9 38ebb5bb     .."9.H.9...8...8
   47100:	3917074f                                O..9

00047104 <_ZN12_GLOBAL__N_12g0L18tensor_dimension35E>:
   47104:	00000001 00000030 00000000              ....0.......

00047110 <_ZN12_GLOBAL__N_12g0L13tensor_data35E>:
   47110:	fffff53a fffffc13 00002da6 000004ff     :........-......
   47120:	fffffd09 ffffe510 fffffbb1 0000358f     .............5..
   47130:	00001826 fffff139 ffffeb96 ffffe498     &...9...........
   47140:	fffffe8c 00004a3c 0000294b fffffebd     ....<J..K)......
   47150:	000018f1 ffffe863 00000cbc fffff5ac     ....c...........
   47160:	000040df ffffef71 fffff994 fffffadb     .@..q...........
   47170:	0000114b ffffeebb 00000105 fffff938     K...........8...
   47180:	00001fdb ffff84df ffffef7a 00000127     ........z...'...
   47190:	fffff0d5 fffff674 fffffc06 fffff8ca     ....t...........
   471a0:	00002bcf ffffe9bb ffffff6a ffffc212     .+......j.......
   471b0:	fffff9cf 00001d67 ffffe766 fffffbd8     ....g...f.......
   471c0:	00000bc8 ffffe5b9 00002a52 fffff178     ........R*..x...

000471d0 <_ZN12_GLOBAL__N_12g0L7quant34E>:
   471d0:	000472a0 000471dc 00000003              .r...q......

000471dc <_ZN12_GLOBAL__N_12g0L12quant34_zeroE>:
   471dc:	00000030 00000000 00000000 00000000     0...............
	...

000472a0 <_ZN12_GLOBAL__N_12g0L13quant34_scaleE>:
   472a0:	00000030 3c53716f 3c0cfbe9 3b9fcf4d     0...oqS<...<M..;
   472b0:	3bb84c8d 3c22fc05 3bd3ee56 3c6131c9     .L.;.."<V..;.1a<
   472c0:	3bd67ed7 3c031045 3ca362f6 3c83be98     .~.;E..<.b.<...<
   472d0:	3b4cbcab 3c54c10b 3b842a8e 3bfd4b37     ..L;..T<.*.;7K.;
   472e0:	3c1de30b 3bcabdd3 3bda43e7 3be9ae57     ...<...;.C.;W..;
   472f0:	3c489c29 3b93d495 3c087926 3c2e7416     ).H<...;&y.<.t.<
   47300:	3c1cba56 3c09dd0e 3c865cae 3c3d4efa     V..<...<.\.<.N=<
   47310:	3ca5219b 3bb9e5fc 3b8c2f23 3c269335     .!.<...;#/.;5.&<
   47320:	3c2c1dfa 3b98f6ee 3c81d27b 3b8f600b     ..,<...;{..<.`.;
   47330:	3bfaf5ec 3be126fb 3b8eef83 3b8abe08     ...;.&.;...;...;
   47340:	3b8dcfbe 3c3ac895 3bb471c4 3c353e3f     ...;..:<.q.;?>5<
   47350:	3c0b4a29 3c004ffb 3b87799a 3bca98ff     )J.<.O.<.y.;...;
   47360:	3c01cfef                                ...<

00047364 <_ZN12_GLOBAL__N_12g0L18tensor_dimension34E>:
   47364:	00000004 00000001 00000003 00000003     ................
   47374:	00000030 00000000 00000000              0...........

00047380 <_ZN12_GLOBAL__N_12g0L13tensor_data34E>:
   47380:	39ef5050 10c90302 0f23c329 2ae28807     PP.9....).#....*
   47390:	0ab8276b eceb1550 fb161d43 ccf51dcd     k'..P...C.......
   473a0:	1b6c0e7f 217f0fdc cf994bb5 03daa71e     ..l....!.K......
   473b0:	5dad7f68 81be3a0d 2b7f1f36 faeaebe8     h..].:..6..+....
   473c0:	23af7fc5 e52c7f3f 7f0b0517 81ed6a81     ...#?.,......j..
   473d0:	5318e3fe 23687fb8 ff53b881 59812608     ...S..h#..S..&.Y
   473e0:	27fc3337 1bd9ff04 0d22b620 ece3af02     73.'.... .".....
   473f0:	feddf35e 27e81c48 f80d3d31 e0ee03fc     ^...H..'1=......
   47400:	135a0f66 056c18f0 483e4ad5 ee0a6d22     f.Z...l..J>H"m..
   47410:	5b81d0e7 e03e3416 7fd42e24 b3e9f27f     ...[.4>.$.......
   47420:	f8474ce0 9c161193 0a113e17 321e79f7     .LG......>...y.2
   47430:	21227f38 56caf6a6 815c0250 7ff3980d     8."!...VP.\.....
   47440:	81cd9d27 a97f0a7f 4e057f81 ea7f7f92     '..........N....
   47450:	7f124a81 fb7f0220 b1257f81 5d813c9b     .J.. .....%..<.]
   47460:	7a249f4c 7fe6367f 03eaba78 2dfbbc6c     L.$z.6..x...l..-
   47470:	398bd6ee e92e7fee 4cdc1f23 eaddfbee     ...9....#..L....
   47480:	dd7f55bc 7fb91b81 1a131504 26296f3a     .U..........:o)&
   47490:	81defefd 2400dccc 7cf4442d 54dc7ff9     .......$-D.|...T
   474a0:	0e00ece0 06f10af6 0f04f41f 21dda719     ...............!
   474b0:	070b0d5c fdfc0cc6 fbf6fe16 08320dff     \.............2.
   474c0:	ff7f0d15 334847f2 df7f4911 f6f482ca     .....GH3.I......
   474d0:	21b4fc81 f6c6fc81 46b4721a 7feedae9     ...!.....r.F....
   474e0:	e6a832ac e20919ba e38136ed 10467fc4     .2.......6....F.
   474f0:	171ce91b 3ec43ee5 e18681c5 678e5081     .....>.>.....P.g
   47500:	1107ece5 02f20209 f9f8d817 05e1aef8     ................
   47510:	125fe462 2206f9bd f1f4ef15 0a300e0b     b._...."......0.
   47520:	20510d1b 136c43fb 31c74914 d7f175e4     ..Q .Cl..I.1.u..

00047530 <_ZN12_GLOBAL__N_12g0L7quant33E>:
   47530:	00047600 0004753c 00000000              .v..<u......

0004753c <_ZN12_GLOBAL__N_12g0L12quant33_zeroE>:
   4753c:	00000030 00000000 00000000 00000000     0...............
	...

00047600 <_ZN12_GLOBAL__N_12g0L13quant33_scaleE>:
   47600:	00000030 37c2b7a8 390acfef 3935384e     0......7...9N859
   47610:	3945ff6b 393b3edb 393cd00e 38fa72f0     k.E9.>;9..<9.r.8
   47620:	3923abb9 38ed4a5e 38d743c2 388065ba     ..#9^J.8.C.8.e.8
   47630:	391d4bf3 38b6752a 392eb625 39198d8c     .K.9*u.8%..9...9
   47640:	392b3361 38e2a95b 3959e2cb 38a1e0d9     a3+9[..8..Y9...8
   47650:	3935f013 3909f3ce 3901744d 391c605e     ..59...9Mt.9^`.9
   47660:	38e7dcd8 3935d875 394105fb 39377c71     ...8u.59..A9q|79
   47670:	388b4811 3962f1f6 390085e1 393955ae     .H.8..b9...9.U99
   47680:	3894b182 393f9b6c 391c7fac 390f09ea     ...8l.?9...9...9
   47690:	397c57d2 395fb028 3916c958 39554b9a     .W|9(._9X..9.KU9
   476a0:	3938c9df 38855583 394cd8f9 389553c6     ..89.U.8..L9.S.8
   476b0:	390e0ead 3918b9fd 392d260f 3909146b     ...9...9.&-9k..9
   476c0:	3910efaf                                ...9

000476c4 <_ZN12_GLOBAL__N_12g0L18tensor_dimension33E>:
   476c4:	00000001 00000030 00000000              ....0.......

000476d0 <_ZN12_GLOBAL__N_12g0L13tensor_data33E>:
   476d0:	0000bbf5 00001788 00000686 000004f7     ................
   476e0:	00000fce 00000a9f 00001a90 00001053     ............S...
   476f0:	00001015 ffffe3a5 0000418d 000005e6     .........A......
   47700:	00002432 000008d7 00001232 0000094e     2$......2...N...
   47710:	00001b57 fffffc7d 00002f26 0000004a     W...}...&/..J...
   47720:	000013ce fffffcea 00000ea7 0000188c     ................
   47730:	00000896 fffff2bc 00000973 0000380c     ........s....8..
   47740:	00000371 000017b3 000006f8 0000335d     q...........]3..
   47750:	000002b8 00001489 fffffd3e fffff9ba     ........>.......
   47760:	000009ba 000009af 00000092 000007f0     ................
   47770:	00003a4b fffffc4b 00002f3b 00000c71     K:..K...;/..q...
   47780:	0000068a 000011b0 0000120e fffff625     ............%...

00047790 <_ZN12_GLOBAL__N_12g0L7quant32E>:
   47790:	00047860 0004779c 00000000              `x...w......

0004779c <_ZN12_GLOBAL__N_12g0L12quant32_zeroE>:
   4779c:	00000030 00000000 00000000 00000000     0...............
	...

00047860 <_ZN12_GLOBAL__N_12g0L13quant32_scaleE>:
   47860:	00000030 39d61670 3b189f01 3b473f5a     0...p..9...;Z?G;
   47870:	3b59b1bd 3b4ddf5a 3b4f9877 3b09ae81     ..Y;Z.M;w.O;...;
   47880:	3b33f3da 3b0272ab 3aecadce 3a8d2b91     ..3;.r.;...:.+.:
   47890:	3b2cf1c1 3ac89bbb 3b401771 3b28d403     ..,;...:q.@;..(;
   478a0:	3b3c3b45 3af935a5 3b6f8f98 3ab1fb54     E;<;.5.:..o;T..:
   478b0:	3b480967 3b17acfa 3b0e550e 3b2beebc     g.H;...;.U.;..+;
   478c0:	3afeed96 3b47ef6f 3b54399e 3b49bd33     ...:o.G;.9T;3.I;
   478d0:	3a992316 3b798579 3b0d4eea 3b4bc584     .#.:y.y;.N.;..K;
   478e0:	3aa37c37 3b52aafe 3b2c1127 3b1d449e     7|.:..R;'.,;.D.;
   478f0:	3b8ab910 3b75f0b8 3b25c95b 3b6a837f     ...;..u;[.%;..j;
   47900:	3b4b2bcc 3a929912 3b6139bb 3aa42e9f     .+K;...:.9a;...:
   47910:	3b1c3063 3b27eb68 3b3e5f8f 3b16b75e     c0.;h.';._>;^..;
   47920:	3b1f5ab6                                .Z.;

00047924 <_ZN12_GLOBAL__N_12g0L18tensor_dimension32E>:
   47924:	00000004 00000030 00000001 00000001     ....0...........
   47934:	00000008 00000000 00000000              ............

00047940 <_ZN12_GLOBAL__N_12g0L13tensor_data32E>:
   47940:	e9f02281 d3011f3d efddcd01 0e0981ce     ."..=...........
   47950:	cb0241c0 7fba2bc7 ef32293e e82681cb     .A...+..>)2...&.
   47960:	2398330e 22225681 d7262de6 f9bb81a2     .3.#.V"".-&.....
   47970:	e15f7fcc d616dcc0 442502f3 34018107     .._.......%D...4
   47980:	47b31b7f f38cb8b3 b3bfda69 7fd6e604     ...G....i.......
   47990:	7f08fe99 971a510a f1341518 5b7f700b     .....Q....4..p.[
   479a0:	9aca9cbb 2beed17f 39f1f7e2 4b33810d     .......+...9..3K
   479b0:	146e4b45 da9e8149 3e7f43d6 ba240ff2     EKn.I....C.>..$.
   479c0:	ba31dca8 fbcb057f fecfd624 28ee7ff7     ..1.....$......(
   479d0:	ce447fe9 a7592acd 7f4f7108 192e19ee     ..D..*Y..qO.....
   479e0:	81480a0a ee45ffbd 812253a4 017b4378     ..H...E..S".xC{.
   479f0:	41acdc4e 7fc4d32e d481b32a 61c0f142     N..A....*...B..a
   47a00:	0ca8eb2b 7f8c29c7 0a3be9ee d7aaf37f     +....)....;.....
   47a10:	e47f7205 ba41e7e2 b9762cd3 815f0c0a     .r....A..,v..._.
   47a20:	7f54ef49 6d22dd48 155d4147 50811dcd     I.T.H."mGA]....P
   47a30:	39b1fa2f 32d9d781 c66b7f12 877031ac     /..9...2..k..1p.
   47a40:	1ef7f33f d8207f6b 0881df19 47dfeb0e     ?...k. ........G
   47a50:	8113cb16 0bf745fd f66011ea eafb810b     .....E....`.....
   47a60:	81dd10f6 d6120bf3 a6edf63a b3ca7fb1     ........:.......
   47a70:	5ee7c84b 7fe9213f 491d517f fed358f1     K..^?!...Q.I.X..
   47a80:	e4819029 6abc0a15 9a81c6fb e9d5b0fb     )......j........
   47a90:	7f4d7145 3119dfb2 909ae47f 4026d2b6     EqM....1......&@
   47aa0:	a9754e03 814bfa9a 3881182b 420f1cd4     .Nu...K.+..8...B
   47ab0:	81b7d62e 35dcdf18 ba7e8155 0c0deb50     .......5U.~.P...

00047ac0 <_ZN12_GLOBAL__N_12g0L7quant31E>:
   47ac0:	00047af0 00047acc 00000000              .z...z......

00047acc <_ZN12_GLOBAL__N_12g0L12quant31_zeroE>:
   47acc:	00000008 00000000 00000000 00000000     ................
	...

00047af0 <_ZN12_GLOBAL__N_12g0L13quant31_scaleE>:
   47af0:	00000008 392e28df 38956706 389bc198     .....(.9.g.8...8
   47b00:	388cbbc5 38a75e43 38a2c200 388e1ed3     ...8C^.8...8...8
   47b10:	38aa7ae4                                .z.8

00047b14 <_ZN12_GLOBAL__N_12g0L18tensor_dimension31E>:
   47b14:	00000001 00000008 00000000              ............

00047b20 <_ZN12_GLOBAL__N_12g0L13tensor_data31E>:
   47b20:	ffffd3bd ffff79ca 000009c7 00001d38     .....y......8...
   47b30:	ffffc2bf 00000152 ffff90b5 fffff9d3     ....R...........

00047b40 <_ZN12_GLOBAL__N_12g0L7quant30E>:
   47b40:	00047b70 00047b4c 00000000              p{..L{......

00047b4c <_ZN12_GLOBAL__N_12g0L12quant30_zeroE>:
   47b4c:	00000008 00000000 00000000 00000000     ................
	...

00047b70 <_ZN12_GLOBAL__N_12g0L13quant30_scaleE>:
   47b70:	00000008 3be74e48 3b466cd4 3b4edd1e     ....HN.;.lF;..N;
   47b80:	3b3ae962 3b5e4931 3b5829a8 3b3cc0f0     b.:;1I^;.)X;..<;
   47b90:	3b626b37                                7kb;

00047b94 <_ZN12_GLOBAL__N_12g0L18tensor_dimension30E>:
   47b94:	00000004 00000008 00000001 00000001     ................
   47ba4:	00000030 00000000 00000000              0...........

00047bb0 <_ZN12_GLOBAL__N_12g0L13tensor_data30E>:
   47bb0:	38ac3734 dc9f1b0a d7f9eb05 012bfceb     47.8..........+.
   47bc0:	e42df230 fd30d915 0fefe20b fce702ee     0.-...0.........
   47bd0:	0c111635 e4223a7f e5fcea02 cb121b53     5....:".....S...
   47be0:	000c1e45 e6f2571a b3d4421f 2f0eea6e     E....W...B..n../
   47bf0:	a6182813 3a2ee57f 12281831 4b36c21c     .(.....:1.(...6K
   47c00:	72076d40 1d181a40 1a220d53 b86f2d19     @m.r@...S."..-o.
   47c10:	7f5511f2 31fb17cc bf0c421f 271968da     ..U....1.B...h.'
   47c20:	0045a6b6 add135fa f51bd8e2 f3fa1a97     ..E..5..........
   47c30:	d5a8dee2 e8b2150b 11dcc2e2 16e4b73c     ............<...
   47c40:	fab537eb 4007b60e 0ad2b365 3b08eaf6     .7.....@e......;
   47c50:	eaed0c15 26ba10f8 f228dee7 ca25e43c     .......&..(.<.%.
   47c60:	cddfe926 0fb3fa81 f723c2e5 dbf40cc8     &.........#.....
   47c70:	ee1dee39 41174ac0 2733c781 bbbac945     9....J.A..3'E...
   47c80:	e43b4559 26f1a00d 83d407d9 2358cac3     YE;....&......X#
   47c90:	5770fc56 1f353f42 e4cf280f c85f4357     V.pWB?5..(..WC_.
   47ca0:	5b12481d a2d2171f 05f81ea2 bf28421d     .H.[.........B(.
   47cb0:	25e3634d b7e9c0ec 3dd5b69a 2ce82c02     Mc.%.......=.,.,
   47cc0:	0946aafa 8fda7fdd dbf4daf6 61dbf4f5     ..F............a
   47cd0:	7ff9306f 4d1715aa 604fa51a d0e8db5c     o0.....M..O`\...
   47ce0:	1ab91444 02deeb50 d7cf4a0c 424cd312     D...P....J....LB
   47cf0:	6603d80e 0e00b26d 3f9755a9 ce697338     ...fm....U.?8si.
   47d00:	287f0e19 09a641d9 f5f563de fa0f3b2f     ...(.A...c../;..
   47d10:	04c7f5cc d10025f4 f3342af7 f210fe00     .....%...*4.....
   47d20:	2243f0a9 f524fc5d d2e4e1eb 170ce404     ..C"].$.........

00047d30 <_ZN12_GLOBAL__N_12g0L7quant29E>:
   47d30:	00047e00 00047d3c 00000000              .~..<}......

00047d3c <_ZN12_GLOBAL__N_12g0L12quant29_zeroE>:
   47d3c:	00000030 00000000 00000000 00000000     0...............
	...

00047e00 <_ZN12_GLOBAL__N_12g0L13quant29_scaleE>:
   47e00:	00000030 38cef595 38b02bf9 3a674abf     0......8.+.8.Jg:
   47e10:	3963fa42 3921ae2b 39046a13 3903cff2     B.c9+.!9.j.9...9
   47e20:	39cd6497 38ddacec 39c6784d 394c379c     .d.9...8Mx.9.7L9
   47e30:	38d62974 393846bd 38bb3775 390711a9     t).8.F89u7.8...9
   47e40:	38bdae19 38b4cb4e 3878d953 39cc416c     ...8N..8S.x8lA.9
   47e50:	388885ce 38c82742 39a72394 39349465     ...8B'.8.#.9e.49
   47e60:	3934d7c3 398c6241 3980ce09 3962598c     ..49Ab.9...9.Yb9
   47e70:	3989d0cb 39803613 3936fdc3 390b118b     ...9.6.9..69...9
   47e80:	38f41388 38b98057 3947b63e 39274ce5     ...8W..8>.G9.L'9
   47e90:	38cc88ab 3a253f8d 39249eb9 390fc277     ...8.?%:..$9w..9
   47ea0:	39e1db17 393225a3 391f7172 3948478f     ...9.%29rq.9.GH9
   47eb0:	39249431 3940b175 38913375 3905a722     1.$9u.@9u3.8"..9
   47ec0:	394d66a6                                .fM9

00047ec4 <_ZN12_GLOBAL__N_12g0L18tensor_dimension29E>:
   47ec4:	00000001 00000030 00000000              ....0.......

00047ed0 <_ZN12_GLOBAL__N_12g0L13tensor_data29E>:
   47ed0:	00002cdf ffffbf71 fffffb7a 00000b49     .,..q...z...I...
   47ee0:	00000176 00003163 00000a8e fffff87a     v...c1......z...
   47ef0:	ffffdea9 000007d2 fffff2fe ffffef9f     ................
   47f00:	ffffe824 ffffcd2c 000018aa 000000b6     $...,...........
   47f10:	ffffdef8 00006e90 fffff36b ffffcf5a     .....n..k...Z...
   47f20:	00003b11 00000558 fffffcaf fffff92d     .;..X.......-...
   47f30:	00000043 00000135 ffffeeca 0000071a     C...5...........
   47f40:	fffffe74 00000756 00000085 000047c3     t...V........G..
   47f50:	000049ac fffffd97 00001280 00004a36     .I..........6J..
   47f60:	fffffd0e 00003c0e 00000552 fffffc4d     .....<..R...M...
   47f70:	fffff3ef ffffe206 0000031c 00000b3d     ............=...
   47f80:	00000b86 00005f86 000031d8 ffffedc6     ....._...1......

00047f90 <_ZN12_GLOBAL__N_12g0L7quant28E>:
   47f90:	00048060 00047f9c 00000003              `...........

00047f9c <_ZN12_GLOBAL__N_12g0L12quant28_zeroE>:
   47f9c:	00000030 00000000 00000000 00000000     0...............
	...

00048060 <_ZN12_GLOBAL__N_12g0L13quant28_scaleE>:
   48060:	00000030 3b9c089c 3b84d265 3d2e60fc     0......;e..;.`.=
   48070:	3c2be148 3bf3cae6 3bc7a9d0 3bc6c168     H.+<...;...;h..;
   48080:	3c9ada49 3ba720ef 3c95a219 3c19f75e     I..<. .;...<^..<
   48090:	3ba176c4 3c0aeea2 3b8d2622 3bcbaa8a     .v.;...<"&.;...;
   480a0:	3b8f0198 3b884e8d 3b3b9d9a 3c99fec4     ...;.N.;..;;...<
   480b0:	3b4ddbaf 3b96e703 3c7c0601 3c082527     ..M;...;..|<'%.<
   480c0:	3c0857f1 3c53ae22 3c42387c 3c2aa71c     .W.<".S<|8B<..*<
   480d0:	3c4fcec4 3c415358 3c09f69b 3bd1b26b     ..O<XSA<...<k..;
   480e0:	3bb80473 3b8bdb11 3c1691ce 3bfc444e     s..;...;...<ND.;
   480f0:	3b9a347b 3cf92c29 3bf839a6 3bd8c53f     {4.;),.<.9.;?..;
   48100:	3caa47c5 3c064fa2 3bf06b4f 3c16ff5d     .G.<.O.<Ok.;]..<
   48110:	3bf829c5 3c114726 3b5af1a3 3bc987e5     .).;&G.<..Z;...;
   48120:	3c1adbd7                                ...<

00048124 <_ZN12_GLOBAL__N_12g0L18tensor_dimension28E>:
   48124:	00000004 00000001 00000003 00000003     ................
   48134:	00000030 00000000 00000000              0...........

00048140 <_ZN12_GLOBAL__N_12g0L13tensor_data28E>:
   48140:	072b00c5 0a1cc67f ff221dfe 0cb71402     ..+.......".....
   48150:	2ef1e056 fad504db ca2802ea b2287fe1     V.........(...(.
   48160:	9f7b6bc7 e681c609 c1ebf812 2181c2fe     .k{............!
   48170:	1efa5ad2 f177b4f1 7f360c46 27ea7f2f     .Z....w.F.6./..'
   48180:	440ab65b 8f69e3d6 11a32efe 8172a0e1     [..D..i.......r.
   48190:	c40dad81 1899e1c6 810cefce 3923921b     ..............#9
   481a0:	fd05f9ee 000fc52d dc111614 17b709ed     ....-...........
   481b0:	32f3d734 04c5fae1 8f25ff17 b4cd2fd9     4..2......%../..
   481c0:	ae6afc01 0ab0dc0a d2f80618 ea84a9f4     ..j.............
   481d0:	c2fb7881 f912b7fe 3e4a111c 22c15b4e     .x........J>N[."
   481e0:	6a11817f e5a5bce8 07e8f981 be5bfef1     ...j..........[.
   481f0:	bd937fb9 3f1abf22 36a222a0 db0481f8     ...."..?.".6....
   48200:	7f7f6e12 7f8156cd 58d9817f 927f607f     .n...V.....X.`..
   48210:	0f7faccf 077f7f81 7f4d6758 fe7fac7f     ........XgM.....
   48220:	81e398b3 455b7f7f 43dd7fc5 84003e7f     ......[E...C.>..
   48230:	cfe737c8 eb0788b8 3f700301 7acd6425     .7........p?%d.z
   48240:	7ffb905f e199a527 10ecf119 d0490cf6     _...'.........I.
   48250:	ae81deeb 812db111 457f1ebc 7ff495e9     ......-....E....
   48260:	f605f2f6 0519d818 337f1a22 6ddffc01     ........"..3...m
   48270:	01d6c856 2fd1fee8 e4def2f4 0a043e0d     V....../.....>..
   48280:	38c722df db28cedc 08f4f555 dd0906ea     .".8..(.U.......
   48290:	140b7fcf ba4e819d c245134b 7fc720c9     ......N.K.E.. ..
   482a0:	6fff0f4a 7f5309b9 027f8113 b2dcce16     J..o..S.........
   482b0:	afb8c7f9 271ac8c1 1ad2347f faa7cae2     .......'.4......
   482c0:	ff18ea29 0d0ad8e7 274e152e 3adc0315     ).........N'...:
   482d0:	13cfd12a 2cc5f6e7 bde5ed0f 0ff2fb0c     *......,........
   482e0:	37ebfee9 053ae5dd 03220134 1913caee     ...7..:.4.".....

000482f0 <_ZN12_GLOBAL__N_12g0L7quant27E>:
   482f0:	000483c0 000482fc 00000000              ............

000482fc <_ZN12_GLOBAL__N_12g0L12quant27_zeroE>:
   482fc:	00000030 00000000 00000000 00000000     0...............
	...

000483c0 <_ZN12_GLOBAL__N_12g0L13quant27_scaleE>:
   483c0:	00000030 398e5ab1 390517ca 38eb03f3     0....Z.9...9...8
   483d0:	392d0e3a 39310452 38e86433 3943ae46     :.-9R.193d.8F.C9
   483e0:	38c4f910 38987f6f 390744e6 3951e60a     ...8o..8.D.9..Q9
   483f0:	395a942b 39401e25 390a8ee9 393c5ae5     +.Z9%.@9...9.Z<9
   48400:	391126a3 394332ee 38f8d395 38eb6fa5     .&.9.2C9...8.o.8
   48410:	3924d64b 396a7715 38a1ec94 3965b92b     K.$9.wj9...8+.e9
   48420:	390563e5 388fe6f8 38e83078 391e77b4     .c.9...8x0.8.w.9
   48430:	38ba0315 3902b355 39168683 39a399c0     ...8U..9...9...9
   48440:	38b7adcb 3985a147 390f0944 38d02336     ...8G..9D..96#.8
   48450:	3911078f 3817ddd4 389feedf 390f37f6     ...9...8...8.7.9
   48460:	38a89c56 3912cf13 39917fed 390b1650     V..8...9...9P..9
   48470:	3905de2b 393ee19e 3932f812 3947921c     +..9..>9..29..G9
   48480:	38ec4cd7                                .L.8

00048484 <_ZN12_GLOBAL__N_12g0L18tensor_dimension27E>:
   48484:	00000001 00000030 00000000              ....0.......

00048490 <_ZN12_GLOBAL__N_12g0L13tensor_data27E>:
   48490:	0000024a 00001780 ffffe5e2 00000e71     J...........q...
   484a0:	00000bb5 000017f1 00000a44 0000252e     ........D....%..
   484b0:	000031a6 000016a7 fffff88a ffffff8b     .1..............
   484c0:	00000548 000012b4 00000b12 fffffc4d     H...........M...
   484d0:	ffffff8f 0000184b 00002032 000001a2     ....K...2 ......
   484e0:	0000088d 00002b57 000009d5 00001591     ....W+..........
   484f0:	000032ea 000020c5 00000696 00002959     .2... ......Y)..
   48500:	000008e1 00001622 fffffa12 00002528     ....".......(%..
   48510:	00000551 00001504 000019bd 0000159a     Q...............
   48520:	0000a48e 00002ea0 000011c2 0000305c     ............\0..
   48530:	000009d3 0000025a 00001521 000007c3     ....Z...!.......
   48540:	00000d5a 00000772 00000864 00000d29     Z...r...d...)...

00048550 <_ZN12_GLOBAL__N_12g0L7quant26E>:
   48550:	00048620 0004855c 00000000               ...\.......

0004855c <_ZN12_GLOBAL__N_12g0L12quant26_zeroE>:
   4855c:	00000030 00000000 00000000 00000000     0...............
	...

00048620 <_ZN12_GLOBAL__N_12g0L13quant26_scaleE>:
   48620:	00000030 3baec4de 3b23661a 3b1043c9     0......;.f#;.C.;
   48630:	3b54760e 3b595310 3b0ea76e 3b703cfb     .vT;.SY;n..;.<p;
   48640:	3af1d317 3abb38e6 3b261211 3b80d8c5     ...:.8.:..&;...;
   48650:	3b862cd4 3b6bdd28 3b2a1bce 3b673e91     .,.;(.k;..*;.>g;
   48660:	3b3233d6 3b6fa58d 3b18be24 3b1085e5     .32;..o;$..;...;
   48670:	3b4a5f0c 3b8fed50 3ac6cb87 3b8d0426     ._J;P..;...:&..;
   48680:	3b23c389 3ab0ab61 3b0e87ad 3b428d2a     ..#;a..:...;*.B;
   48690:	3ae45e2d 3b20762f 3b38cd01 3bc8da6d     -^.:/v ;..8;m..;
   486a0:	3ae180e1 3ba40ee5 3b2f9b31 3aff880e     ...:...;1./;...:
   486b0:	3b320daf 3a3a727f 3ac459c3 3b2fd485     ..2;.r::.Y.:../;
   486c0:	3acf0110 3b343cec 3bb2a175 3b2ac20a     ...:.<4;u..;..*;
   486d0:	3b2459a7 3b6a588e 3b5bb89c 3b750393     .Y$;.Xj;..[;..u;
   486e0:	3b110dad                                ...;

000486e4 <_ZN12_GLOBAL__N_12g0L18tensor_dimension26E>:
   486e4:	00000004 00000030 00000001 00000001     ....0...........
   486f4:	00000008 00000000 00000000              ............

00048700 <_ZN12_GLOBAL__N_12g0L13tensor_data26E>:
   48700:	1bdc81b2 cd34f4db a92b7ff1 60bda609     ......4...+....`
   48710:	0721b981 ea1c094c cd81db00 30e6d122     ..!.L......."..0
   48720:	e86f9dc9 0038bf7f a73142ec 7fc61e5f     ..o...8..B1._...
   48730:	46375b81 8c2205cd 1d3ff22e 68f98133     .[7F.."...?.3..h
   48740:	ddfb4aff b67f6a12 c8087f55 66d5bbb6     .J...j..U......f
   48750:	0619f31d b88124e8 c0930cb6 422a107f     .....$........*B
   48760:	03de2c5e 0812587f 30f38881 044231a6     ^,...X.....0.1B.
   48770:	78a25cf1 21f07fc6 b0eac0f7 3ae7427f     .\.x...!.....B.:
   48780:	3202a842 8127f12a 6781b6b5 8f4e5903     B..2*.'....g.YN.
   48790:	037fee47 e3ad98d8 261d7fe1 d5c18d6c     G..........&l...
   487a0:	d581f3bc fefcf81f 3936ed83 cb7f96a3     ..........69....
   487b0:	bc81f935 32fbf3e1 f17f29eb a3fc219f     5......2.)...!..
   487c0:	7f6774a3 cc0b5b7f 28b581cd ff3520c5     .tg..[.....(. 5.
   487d0:	c0887a74 31baed81 16b9393d eedf1381     tz.....1=9......
   487e0:	b91e4cec 818b584d b2fbf726 cd0d0381     .L..MX..&.......
   487f0:	7f2101af f0db112c acf99413 96bb3281     ..!.,........2..
   48800:	f517f981 1304e30a 9f81c632 13d005f6     ........2.......
   48810:	f97d5c3a ab59bd81 050f1663 c981de9c     :\}...Y.c.......
   48820:	d157017f 574bf401 f5f46973 2781514e     ..W...KWsi..NQ.'
   48830:	7f6a58d9 c0183de1 de7f2f21 11dccc4e     .Xj..=..!/..N...
   48840:	101b2948 ce2381be 7f14d01c 470348eb     H)....#......H.G
   48850:	d15790f3 1870da7f cf8bdc02 7dab237f     ..W...p......#.}
   48860:	f67fe66a 11c723fc e2131eec 53e781ab     j....#.........S
   48870:	214c53c7 8131e6ff 7f0af51d 474c88f3     .SL!..1.......LG

00048880 <_ZN12_GLOBAL__N_12g0L7quant25E>:
   48880:	000488b0 0004888c 00000000              ............

0004888c <_ZN12_GLOBAL__N_12g0L12quant25_zeroE>:
   4888c:	00000008 00000000 00000000 00000000     ................
	...

000488b0 <_ZN12_GLOBAL__N_12g0L13quant25_scaleE>:
   488b0:	00000008 38ddef64 39093c9c 38dc4c09     ....d..8.<.9.L.8
   488c0:	38efd455 3901f86e 38d66427 3950d99e     U..8n..9'd.8..P9
   488d0:	39622e52                                R.b9

000488d4 <_ZN12_GLOBAL__N_12g0L18tensor_dimension25E>:
   488d4:	00000001 00000008 00000000              ............

000488e0 <_ZN12_GLOBAL__N_12g0L13tensor_data25E>:
   488e0:	00001306 fffff845 00003641 ffffe6ab     ....E...A6......
   488f0:	ffffcf2e ffffc772 ffffdc67 fffff836     ....r...g...6...

00048900 <_ZN12_GLOBAL__N_12g0L7quant24E>:
   48900:	00048930 0004890c 00000000              0...........

0004890c <_ZN12_GLOBAL__N_12g0L12quant24_zeroE>:
   4890c:	00000008 00000000 00000000 00000000     ................
	...

00048930 <_ZN12_GLOBAL__N_12g0L13quant24_scaleE>:
   48930:	00000008 3b9360f8 3bb6447f 3b924a7e     .....`.;.D.;~J.;
   48940:	3b9f4300 3bac9df2 3b8e5e82 3c0ab083     .C.;...;.^.;...<
   48950:	3c1632c2                                .2.<

00048954 <_ZN12_GLOBAL__N_12g0L18tensor_dimension24E>:
   48954:	00000004 00000008 00000001 00000001     ................
   48964:	00000030 00000000 00000000              0...........

00048970 <_ZN12_GLOBAL__N_12g0L13tensor_data24E>:
   48970:	cc2be5ea 5a415132 36e9d064 eb0ae7e1     ..+.2QAZd..6....
   48980:	cb0a2a26 d8ad11e1 b611f41d 1a2915d8     &*............).
   48990:	0b3c291a 04b6d26f fce1bbc8 3481a8ba     .)<.o..........4
   489a0:	34d7fdf3 edd70a01 5a121bc4 7fe506e6     ...4.......Z....
   489b0:	e00c3a29 15b8ebd4 a9eef911 bac4f733     ):..........3...
   489c0:	c7e3e03d d4342323 d62e4704 eacadb00     =...##4..G......
   489d0:	fde2bc06 0b0512de eef30c6d 0521b6e1     ........m.....!.
   489e0:	f9e7c5fe 1f07309b e6d82d09 d32ad8e6     .....0...-....*.
   489f0:	34cf1d9f e9ee40b8 2bfde77f d7c4281b     ...4.@.....+.(..
   48a00:	3b5a94de f1ed9b18 cc357781 13e90a32     ..Z;.....w5.2...
   48a10:	29e12338 c21f5047 1d3c510d 0f0fbae1     8#.)GP...Q<.....
   48a20:	073304eb 27d8adf2 bd16f3e3 18fa0fb4     ..3....'........
   48a30:	4af034f5 fc070522 442e50ca 0d3c1703     .4.J"....P.D..<.
   48a40:	f3f79e07 39a3f255 1b1ce748 cef61833     ....U..9H...3...
   48a50:	0f057fce 1712e63e e7fe29e4 12dfcd00     ....>....)......
   48a60:	bcfbffea 1d781d81 e6eb4011 e33efd9a     ......x..@....>.
   48a70:	b1ca25b0 26fe6b01 12fd1e65 cb78f3eb     .%...k.&e.....x.
   48a80:	5a4a67f4 285a34eb 24e6ddea 391e36bf     .gJZ.4Z(...$.6.9
   48a90:	1cf7eb05 0412c7c8 082df31b 3a25eace     ..........-...%:
   48aa0:	c509c205 e3ffea48 290b000a 7f09052e     ....H......)....
   48ab0:	19f5f32b 1017f801 cfe32702 29edebfd     +........'.....)
   48ac0:	fbd6f0e7 0b06e604 00180428 01010af7     ........(.......
   48ad0:	fe02f81c e6090ac6 f5ccfb00 1d10eef2     ................
   48ae0:	091bf710 d8f57fec dfd100d9 f6bb3f15     .............?..

00048af0 <_ZN12_GLOBAL__N_12g0L7quant23E>:
   48af0:	00048bc0 00048afc 00000000              ............

00048afc <_ZN12_GLOBAL__N_12g0L12quant23_zeroE>:
   48afc:	00000030 00000000 00000000 00000000     0...............
	...

00048bc0 <_ZN12_GLOBAL__N_12g0L13quant23_scaleE>:
   48bc0:	00000030 398792c2 38e45897 38e097cc     0......9.X.8...8
   48bd0:	38cde939 387d8149 3918b476 38ecd720     9..8I.}8v..9 ..8
   48be0:	38bda9b7 39863b25 38830505 390940d0     ...8%;.9...8.@.9
   48bf0:	38cfc7f7 38b66487 394aa3a3 38b1d1e1     ...8.d.8..J9...8
   48c00:	38a3c1fd 38a7d0dc 39202609 39ca00ad     ...8...8.& 9...9
   48c10:	3896c10b 387a3be5 38a8ea95 38c61a79     ...8.;z8...8y..8
   48c20:	39198b6d 38b8ab89 38d47249 393acd70     m..9...8Ir.8p.:9
   48c30:	3943eff1 38fae35f 39438650 3911cb12     ..C9_..8P.C9...9
   48c40:	38b94989 388bec3d 38d59ff3 38a10b9a     .I.8=..8...8...8
   48c50:	38af20ea 38c60da0 38c82ac0 38b8ec7b     . .8...8.*.8{..8
   48c60:	38b60e46 390ad8f6 3954262a 3899eb67     F..8...9*&T9g..8
   48c70:	38bd268c 39576247 391b89fd 3981f5a1     .&.8GbW9...9...9
   48c80:	38fa9c18                                ...8

00048c84 <_ZN12_GLOBAL__N_12g0L18tensor_dimension23E>:
   48c84:	00000001 00000030 00000000              ....0.......

00048c90 <_ZN12_GLOBAL__N_12g0L13tensor_data23E>:
   48c90:	fffffe6e 000065e8 000062e6 fffff9df     n....e...b......
   48ca0:	ffffff93 ffffc795 00005d6e 00004555     ........n]..UE..
   48cb0:	ffffdb12 0000037a fffff928 000046ca     ....z...(....F..
   48cc0:	00004c0b ffffbed6 ffffd1f8 fffff8e4     .L..............
   48cd0:	ffffff1b 00006bca fffffd0d 00000076     .....k......v...
   48ce0:	0000a707 00002e41 ffffdc99 ffffe442     ....A.......B...
   48cf0:	00003f9a 00002e4c fffff59b fffff6fb     .?..L...........
   48d00:	ffffeea6 fffffe00 0000788a 0000017a     .........x..z...
   48d10:	ffffee43 00002a16 00003a26 000039ad     C....*..&:...9..
   48d20:	fffff1b7 0000a40a ffffeead fffffbb3     ................
   48d30:	000064c2 fffffd04 fffff565 00003974     .d......e...t9..
   48d40:	ffffff1e fffffcaf ffffe2d5 00003978     ............x9..

00048d50 <_ZN12_GLOBAL__N_12g0L7quant22E>:
   48d50:	00048e20 00048d5c 00000003               ...\.......

00048d5c <_ZN12_GLOBAL__N_12g0L12quant22_zeroE>:
   48d5c:	00000030 00000000 00000000 00000000     0...............
	...

00048e20 <_ZN12_GLOBAL__N_12g0L13quant22_scaleE>:
   48e20:	00000030 3c340eea 3b97a2d4 3b9524cd     0.....4<...;.$.;
   48e30:	3b88bce0 3b2857da 3bcacfac 3b9d46db     ...;.W(;...;.F.;
   48e40:	3b7be567 3c32468d 3b2e02aa 3bb64a14     g.{;.F2<...;.J.;
   48e50:	3b89faca 3b723d83 3c0690aa 3b6c2abe     ...;.=r;...<.*l;
   48e60:	3b597da4 3b5ee164 3bd4b284 3c862473     .}Y;d.^;...;s$.<
   48e70:	3b483862 3b262bc6 3b60578e 3b838d94     b8H;.+&;.W`;...;
   48e80:	3bcbed2c 3b7543d1 3b8d13e4 3bf818d8     ,..;.Cu;...;...;
   48e90:	3c021d56 3ba69afd 3c01d731 3bc1a1b3     V..<...;1..<...;
   48ea0:	3b7615a9 3b39d5c1 3b8ddc37 3b55e368     ..v;..9;7..;h.U;
   48eb0:	3b6897b6 3b83850c 3b84ec63 3b759a13     ..h;...;c..;..u;
   48ec0:	3b71caf4 3bb86826 3c0ce158 3b4c6ca5     ..q;&h.;X..<.lL;
   48ed0:	3b7b3732 3c0f0743 3bce9344 3c2c9a3a     27{;C..<D..;:.,<
   48ee0:	3ba66ba8                                .k.;

00048ee4 <_ZN12_GLOBAL__N_12g0L18tensor_dimension22E>:
   48ee4:	00000004 00000001 00000003 00000003     ................
   48ef4:	00000030 00000000 00000000              0...........

00048f00 <_ZN12_GLOBAL__N_12g0L13tensor_data22E>:
   48f00:	26ddc73f b1af3257 bf712f04 29614fce     ?..&W2.../q..Oa)
   48f10:	4e38b73b 462c99ac 4b52eec8 3dc17070     ;.8N..,F..RKpp.=
   48f20:	b587b530 114bb84c a82349b0 b9496e41     0...L.K..I#.AnI.
   48f30:	48c7b649 88a93c6a 94704113 477862a9     I..Hj<...Ap..bxG
   48f40:	6047a53b 65448db4 6361ceb4 56b67f79     ;.G`..De..acy..V
   48f50:	9c818c43 2b52b160 9a274993 ad517c55     C...`.R+.I'.U|Q.
   48f60:	19d8e22c cfe3022c d7261214 1c3328b5     ,...,.....&..(3.
   48f70:	0d19e712 2f21b5fb 3022f8e0 11ed4340     ......!/.."0@C..
   48f80:	cbbfcb20 2016e719 e10d2cdc c7172429      ...... .,..)$..
   48f90:	4abd9e2f a181546a a3656658 4a775fb5     /..JjT..Xfe.._wJ
   48fa0:	7f37a06c 66488389 6479b298 5aae7b72     l.7...Hf..ydr{.Z
   48fb0:	8f8b875e 48729a56 84647f9c af337559     ^...V.rH..d.Yu3.
   48fc0:	7f818133 81837f7f 817f7f7f 7f7f7f81     3...............
   48fd0:	7e38817f 7f7f8181 7f7f8181 7f816b7f     ..8~.........k..
   48fe0:	8192817f 7f7f817f 817f7481 81397f7f     .........t....9.
   48ff0:	42b3bf02 bec32036 ba2e2f46 38322ab7     ...B6 ..F/...*28
   49000:	2014e01e 3a3cb1e3 410df0b8 19df074a     ... ..<:...AJ...
   49010:	d2b99d37 4224d726 cc3531e5 a916002f     7...&.$B.15./...
   49020:	37d7c9e0 ffb82a19 bf263796 32432fc7     ...7.*...7&../C2
   49030:	3ab1ed35 2b27d4e0 2443c2af 20c5212a     5..:..'+..C$*!. 
   49040:	d6cfb72d 5533cb26 c44353de e89a0916     -...&.3U.SC.....
   49050:	55b5b281 05bb4822 bb2e3eae 4c41329e     ...U"H...>...2AL
   49060:	3d81e442 2b44b4cc 373ad196 29affe20     B..=..D+..:7 ..)
   49070:	bae59240 6e3ac438 ac6a5ae8 bc81ee27     @...8.:n.Zj.'...
   49080:	3bd6f0c1 f9001915 e22123a0 27201bd9     ...;.....#!... '
   49090:	17baf910 251ef8f6 25fe0bd8 0ae4ee1f     .......%...%....
   490a0:	e4fcdb1a 3309f311 f12b2800 d3cde606     .......3.(+.....

000490b0 <_ZN12_GLOBAL__N_12g0L7quant21E>:
   490b0:	00049180 000490bc 00000000              ............

000490bc <_ZN12_GLOBAL__N_12g0L12quant21_zeroE>:
   490bc:	00000030 00000000 00000000 00000000     0...............
	...

00049180 <_ZN12_GLOBAL__N_12g0L13quant21_scaleE>:
   49180:	00000030 399e2b56 3928058c 392d8e5e     0...V+.9..(9^.-9
   49190:	3999a335 3a045374 38c3a6c9 3989276d     5..9tS.:...8m'.9
   491a0:	398238d0 38de013c 39d031e6 3972354c     .8.9<..8.1.9L5r9
   491b0:	3997a54a 3932568a 39953ed0 39dbd8ca     J..9.V29.>.9...9
   491c0:	396130a5 398b624c 390347b7 3929c91a     .0a9Lb.9.G.9..)9
   491d0:	39c77fb5 39bdad03 3992a1a3 399f1755     ...9...9...9U..9
   491e0:	39986972 39acd23b 3956f5b9 39742776     ri.9;..9..V9v't9
   491f0:	3965f479 398de186 394ea601 38d209bf     y.e9...9..N9...8
   49200:	3981b97e 39b351a2 39a42441 3992f9c6     ~..9.Q.9A$.9...9
   49210:	39a7cad0 396b2ef3 38dafc8d 39c6db8d     ...9..k9...8...9
   49220:	398bfaa2 3914ff4a 39151842 39c29d54     ...9J..9B..9T..9
   49230:	399ab1b7 3995afaf 3977fd29 38cc9aed     ...9...9).w9...8
   49240:	3931276b                                k'19

00049244 <_ZN12_GLOBAL__N_12g0L18tensor_dimension21E>:
   49244:	00000001 00000030 00000000              ....0.......

00049250 <_ZN12_GLOBAL__N_12g0L13tensor_data21E>:
   49250:	fffff945 00001542 000012d8 fffffd17     E...B...........
   49260:	0000005e 0000263f 00000ce7 00000679     ^...?&......y...
   49270:	000026a7 00000576 fffff8e3 000006cd     .&..v...........
   49280:	00000ee8 000006d1 ffffff1c 0000032b     ............+...
   49290:	fffffaa3 00001e4b fffff4f3 fffffcf7     ....K...........
   492a0:	0000041a 000003b3 0000018b fffffe4c     ............L...
   492b0:	00000110 00000a7b fffff808 fffffa4c     ....{.......L...
   492c0:	fffffc67 fffff75c 00002be7 00000a3b     g...\....+..;...
   492d0:	000002c5 00000434 00000195 000004b5     ....4...........
   492e0:	00000591 000021ec 00000493 000001bb     .....!..........
   492f0:	00001b16 fffff8d6 0000022e 0000054f     ............O...
   49300:	fffff904 fffff82d 00002ad5 00000c25     ....-....*..%...

00049310 <_ZN12_GLOBAL__N_12g0L7quant20E>:
   49310:	000493e0 0004931c 00000000              ............

0004931c <_ZN12_GLOBAL__N_12g0L12quant20_zeroE>:
   4931c:	00000030 00000000 00000000 00000000     0...............
	...

000493e0 <_ZN12_GLOBAL__N_12g0L13quant20_scaleE>:
   493e0:	00000030 3b4233f4 3ace4cc5 3ad5185d     0....3B;.L.:]..:
   493f0:	3b3ca388 3ba278dc 3a703969 3b286669     ..<;.x.;i9p:if(;
   49400:	3b1fe382 3a884a69 3b7fa012 3b14b195     ...;iJ.:...;...;
   49410:	3b3a3172 3adaf76d 3b373efb 3b86f742     r1:;m..:.>7;B..;
   49420:	3b0a3eff 3b2b2356 3aa13021 3ad07732     .>.;V#+;!0.:2w.:
   49430:	3b74f2b7 3b68e321 3b34095a 3b4355b7     ..t;!.h;Z.4;.UC;
   49440:	3b3b224a 3b54315e 3b03f738 3b15e369     J";;^1T;8..;i..;
   49450:	3b0d2bdc 3b2e3430 3afdb9fd 3a80f1b5     .+.;04.;...:...:
   49460:	3b1f472f 3b5c2bb9 3b498930 3b347592     /G.;.+\;0.I;.u4;
   49470:	3b4e04a7 3b106190 3a86700d 3b74292a     ..N;.a.;.p.:*)t;
   49480:	3b2bde60 3ab6f0fc 3ab70fa4 3b6ef37b     `.+;...:...:{.n;
   49490:	3b3defaa 3b37c990 3b183e15 3a7b37be     ..=;..7;.>.;.7{:
   494a0:	3ad9833f                                ?..:

000494a4 <_ZN12_GLOBAL__N_12g0L18tensor_dimension20E>:
   494a4:	00000004 00000030 00000001 00000001     ....0...........
   494b4:	00000008 00000000 00000000              ............

000494c0 <_ZN12_GLOBAL__N_12g0L13tensor_data20E>:
   494c0:	08ce182b 1a8135dd f985c001 967febf5     +....5..........
   494d0:	cfb5d184 f88134e1 f611d8c0 e79481ec     .....4..........
   494e0:	0fd781d3 d8d9183a 2f5bdb44 a1b83a81     ....:...D.[/.:..
   494f0:	e0c38124 acd53df2 c8caaae8 11ff814b     $....=......K...
   49500:	37293926 7ff8d01b 05d0c7e7 f57fed2c     &9)7........,...
   49510:	11810ee3 9a5b111d 03dedf07 37051681     ......[........7
   49520:	2ee34867 f3557faf ee17f8d0 42008128     gH....U.....(..B
   49530:	2905d29c 8186420b 062d5b3b c37c2d81     ...).B..;[-..-|.
   49540:	470bc201 8103b2f3 f3177fb0 b2accec5     ...G............
   49550:	85937f59 b1976665 0bf54ce5 a1bc0b81     Y...ef...L......
   49560:	0b09fe81 33631815 1332f9dd 158197a7     ......c3..2.....
   49570:	f9d0ddfd 3d020681 f4ef043b 50ac3f7f     .......=;....?.P
   49580:	1dd5077f f90608a9 6535c519 681681d1     ..........5e...h
   49590:	400e7f1c e91de754 f0446889 6104b77f     ...@T....hD....a
   495a0:	dfbdb7b4 ed168156 2928ecc6 41b5aa7f     ....V.....()...A
   495b0:	948d2b7f b8aea0b4 4524051c 02240a81     .+........$E..$.
   495c0:	2a2f137f 3959c7e0 08d3227f 2f19c288     ../*..Y9."...../
   495d0:	16e8f62a b4107fd6 dcf1207f 7b209d22     *........ ..". {
   495e0:	9d46d3d8 8152ece1 3141b751 8125f572     ..F...R.Q.A1r.%.
   495f0:	e5077f45 4c1914e9 49b2fe1a 7fb4bfe4     E......L...I....
   49600:	dffbe3f1 271a811a c4812be7 8c426e5c     .......'.+..\nB.
   49610:	0cddcc1a 3b207f48 1ddf35fb be3aa981     ....H. ;.5....:.
   49620:	ddf3cb81 b3873637 14ca3cc7 7fb8fa21     ....76...<..!...
   49630:	fe7f31e6 29d2c8cf ced98b81 63d7756b     .1.....)....ku.c

00049640 <_ZN12_GLOBAL__N_12g0L7quant19E>:
   49640:	00049670 0004964c 00000000              p...L.......

0004964c <_ZN12_GLOBAL__N_12g0L12quant19_zeroE>:
   4964c:	00000008 00000000 00000000 00000000     ................
	...

00049670 <_ZN12_GLOBAL__N_12g0L13quant19_scaleE>:
   49670:	00000008 39131b18 390d8976 39195845     .......9v..9EX.9
   49680:	396252d0 3907708a 3914f505 38a4612d     .Rb9.p.9...9-a.8
   49690:	38f1a446                                F..8

00049694 <_ZN12_GLOBAL__N_12g0L18tensor_dimension19E>:
   49694:	00000001 00000008 00000000              ............

000496a0 <_ZN12_GLOBAL__N_12g0L13tensor_data19E>:
   496a0:	00002994 00003bcc 000010ef 00000bf7     .)...;..........
   496b0:	000007ae ffffcebf 00001830 ffffe26c     ........0...l...

000496c0 <_ZN12_GLOBAL__N_12g0L7quant18E>:
   496c0:	000496f0 000496cc 00000000              ............

000496cc <_ZN12_GLOBAL__N_12g0L12quant18_zeroE>:
   496cc:	00000008 00000000 00000000 00000000     ................
	...

000496f0 <_ZN12_GLOBAL__N_12g0L13quant18_scaleE>:
   496f0:	00000008 3bc35ffc 3bbbfa91 3bcba93c     ....._.;...;<..;
   49700:	3c164afe 3bb3e177 3bc5d56a 3b5a510f     .J.<w..;j..;.QZ;
   49710:	3ba07716                                .w.;

00049714 <_ZN12_GLOBAL__N_12g0L18tensor_dimension18E>:
   49714:	00000004 00000008 00000001 00000001     ................
   49724:	00000030 00000000 00000000              0...........

00049730 <_ZN12_GLOBAL__N_12g0L13tensor_data18E>:
   49730:	4467d327 061ad61b 11e336fb 062cb0ca     '.gD.....6....,.
   49740:	45e03d96 e5034ad6 e043cefe 6be51be9     .=.E.J....C....k
   49750:	aae1f3c1 f6dccec0 0a813ef3 341a1b35     .........>..5..4
   49760:	fc3de1c5 ded91ce2 e702f52f 17fe13ec     ..=...../.......
   49770:	f8151306 e9b8e6c9 dae4dc1b 81f6bb19     ................
   49780:	b6bdc2fe 19e5a6d4 9355f430 fde4f4ce     ........0.U.....
   49790:	28f758c3 dc10080e 5449d64e ca1c1160     .X.(....N.IT`...
   497a0:	1f0afd61 7f0f14f2 eb0cd796 aceb55fa     a............U..
   497b0:	b003ffec f1db07e8 f81ab358 f3018c1a     ........X.......
   497c0:	22c7eb3e 8c05ad53 a9c9fce2 14f67fe6     >.."S...........
   497d0:	d6c2eed7 ccf95020 be35286f c335a81b     .... P..o(5...5.
   497e0:	b86f3c33 30e60ed6 1bb65816 220a1dfa     3<o....0.X....."
   497f0:	48d61ec8 d61de663 22bdfcd6 c104ecd6     ...Hc......"....
   49800:	d4dc4509 bfba25d3 dd14f910 3ce2d725     .E...%......%..<
   49810:	b7b952f8 fbdac3c2 167fc641 c9c75405     .R......A....T..
   49820:	f4550337 253514fa fc46007f c01c3744     7.U...5%..F.D7..
   49830:	d61d21f1 290cb5c4 2b1aee12 e910e2d4     .!.....)...+....
   49840:	3bee32e7 cee2ff33 261d45f6 0547f7f1     .2.;3....E.&..G.
   49850:	0ff2c1fd 0afef81f 3769eed2 30dc435a     ..........i7ZC.0
   49860:	02ed8174 209edaf5 fbe042b7 cd42cfec     t...... .B....B.
   49870:	e9b90c5c 0b3902d6 b6fdbd47 18d53296     \.....9.G....2..
   49880:	e2c5ecf3 f9006a12 9a81c8fc d4c1382d     .....j......-8..
   49890:	1b6e19df f341b7f4 59b5e574 aee4fbd7     ..n...A.t..Y....
   498a0:	753344d1 d9e9c35e ef2cfdea ca06e9f9     .D3u^.....,.....

000498b0 <_ZN12_GLOBAL__N_12g0L7quant17E>:
   498b0:	00049980 000498bc 00000000              ............

000498bc <_ZN12_GLOBAL__N_12g0L12quant17_zeroE>:
   498bc:	00000030 00000000 00000000 00000000     0...............
	...

00049980 <_ZN12_GLOBAL__N_12g0L13quant17_scaleE>:
   49980:	00000030 399d2fd2 39037526 3a1a80b9     0..../.9&u.9...:
   49990:	392f2248 39509c20 399631a6 397969d2     H"/9 .P9.1.9.iy9
   499a0:	39525f27 39ac9f48 392f6bd6 39d8fb80     '_R9H..9.k/9...9
   499b0:	39575db8 390ab345 39078b46 39045b8c     .]W9E..9F..9.[.9
   499c0:	39e8365f 3982dc36 38c91faf 3922ad9e     _6.96..9...8.."9
   499d0:	3a07d411 398213b9 39ab81b9 394bced0     ...:...9...9..K9
   499e0:	3a53c4c4 398a42ae 399ca9bf 39478449     ..S:.B.9...9I.G9
   499f0:	39461e9a 396fb65b 394a5a1e 39bc0c61     ..F9[.o9.ZJ9a..9
   49a00:	3a083067 39e62f2a 38e3c6db 3a05ead1     g0.:*/.9...8...:
   49a10:	394d86a9 3946b1a1 38c07c2f 3a005fa2     ..M9..F9/|.8._.:
   49a20:	3a4f7053 395bc2af 3a45659b 3a1a01aa     SpO:..[9.eE:...:
   49a30:	394308be 39571fad 390a7ae8 3945d376     ..C9..W9.z.9v.E9
   49a40:	39753912                                .9u9

00049a44 <_ZN12_GLOBAL__N_12g0L18tensor_dimension17E>:
   49a44:	00000001 00000030 00000000              ....0.......

00049a50 <_ZN12_GLOBAL__N_12g0L13tensor_data17E>:
   49a50:	000001bf 00000a01 000000b8 ffffffe3     ................
   49a60:	ffffffb0 0000252e 00000168 fffff04e     .....%..h...N...
   49a70:	ffffe913 00000054 ffffe3a5 0000015e     ....T.......^...
   49a80:	ffffee0a ffffe63e fffffe0f 000000da     ....>...........
   49a90:	ffffdd6c 00003cbd fffff325 0000029c     l....<..%.......
   49aa0:	fffffe23 ffffff23 00000048 000002c3     #...#...H.......
   49ab0:	0000506e 000000dd fffffcf6 fffffbe0     nP..............
   49ac0:	fffffe21 fffffda2 000002d5 ffffde8e     !...............
   49ad0:	fffffbd7 0000321f 000001c0 000019d0     .....2..........
   49ae0:	ffffff1c ffffef6b ffffffe5 fffffd2d     ....k.......-...
   49af0:	ffffef34 fffffff1 00000eca 00001285     4...............
   49b00:	fffffb66 00001ce4 000007bd fffff6b1     f...............

00049b10 <_ZN12_GLOBAL__N_12g0L7quant16E>:
   49b10:	00049be0 00049b1c 00000003              ............

00049b1c <_ZN12_GLOBAL__N_12g0L12quant16_zeroE>:
   49b1c:	00000030 00000000 00000000 00000000     0...............
	...

00049be0 <_ZN12_GLOBAL__N_12g0L13quant16_scaleE>:
   49be0:	00000030 3c50c382 3bae9796 3ccd32f6     0.....P<...;.2.<
   49bf0:	3be89987 3c0a87ad 3c4779f0 3c25a045     ...;...<.yG<E.%<
   49c00:	3c0bb330 3c65438b 3be8fb38 3c901703     0..<.Ce<8..;...<
   49c10:	3c0f043c 3bb83618 3bb404f9 3bafc996     <..<.6.;...;...;
   49c20:	3c9a341b 3c2dcc77 3b858f0a 3bd80e95     .4.<w.-<...;...;
   49c30:	3cb465a7 3c2cc232 3c63c84a 3c075756     .e.<2.,<J.c<VW.<
   49c40:	3d0ca0aa 3c37a08f 3c501172 3c047dd8     ...=..7<r.P<.}.<
   49c50:	3c039052 3c1f2f18 3c065fd8 3c79c071     R..<./.<._.<q.y<
   49c60:	3cb4e049 3c98db52 3b97420d 3cb1dbde     I..<R..<.B.;...<
   49c70:	3c087b6c 3c03f1f5 3b7fa4ee 3caa7f03     l{.<...<...;...<
   49c80:	3d09c097 3c11ef48 3d031579 3ccc8a35     ...=H..<y..=5..<
   49c90:	3c0183ce 3c0edb09 3bb7eb3c 3c035e6c     ...<...<<..;l^.<
   49ca0:	3c22d7e6                                .."<

00049ca4 <_ZN12_GLOBAL__N_12g0L18tensor_dimension16E>:
   49ca4:	00000004 00000001 00000003 00000003     ................
   49cb4:	00000030 00000000 00000000              0...........

00049cc0 <_ZN12_GLOBAL__N_12g0L13tensor_data16E>:
   49cc0:	e627cff4 f3f2fd7f 07f827e4 d87f1640     ..'......'..@...
   49cd0:	eee3e912 19b6efe4 d1173189 feeb13f8     .........1......
   49ce0:	03111ce2 fa1e3b54 00f20f4b d8cdfb9c     ....T;..K.......
   49cf0:	e5ba9602 1326fbd3 7f43f912 7fbb42f3     ......&...C..B..
   49d00:	ce2db5fd 51a681ad 6c19ac81 0c7f2511     ..-....Q...l.%..
   49d10:	26d08a81 0e70aa7f f7e8f43e 0143f4cc     ...&..p.>.....C.
   49d20:	7ff3ed0b fca90631 eaebd3ea d0bc0331     ....1.......1...
   49d30:	f5011211 0cdc03fc 23e6bfd2 fca42003     ...........#. ..
   49d40:	1513460f 02814d06 1cf7fa1b 2fc10381     .F...M........./
   49d50:	fa7fb987 164bdbd4 0b0b5916 1f67202f     ......K..Y../ g.
   49d60:	265a8126 d731f758 c81deef5 3420351b     &.Z&X.1......5 4
   49d70:	7f019a29 8ed8310a aded591f 12b9ad25     )....1...Y..%...
   49d80:	b8bbb77f 7f7f81ff ce7f0b7f d5d82181     .............!..
   49d90:	7f7f8e7f 817f527f e46fe7fd 7f817f7f     .....R....o.....
   49da0:	987f8623 7f9d7fbe 817f8181 877f816f     #...........o...
   49db0:	490d8ef3 0dcbf3e6 31dd81f6 2abc0f4f     ...I.......1O..*
   49dc0:	10030114 e727eafa 4c810301 14500ac4     ......'....L..P.
   49dd0:	d4ed98f2 0d75083e 04d53219 7fbee941     ....>.u..2..A...
   49de0:	e21d77f4 f1d00d48 00fd0fe7 06620c3a     .w..H.......:.b.
   49df0:	cff602ec 09f90bf2 001cf2e4 fdee98d3     ................
   49e00:	20eb30fc 6a0f32c9 0bfe1010 d5e7011a     .0. .2.j........
   49e10:	12d45cfd 1efbdb1b da1b0721 b1b97f28     .\......!...(...
   49e20:	b05fe901 30f74ecf 7f077f3f 01eb98c3     .._..N.0?.......
   49e30:	00a88164 83e5dbbf 51c7e82d 0b0a1539     d.......-..Q9...
   49e40:	22f27f0e febf061a faf7eaed fab8fe36     ..."........6...
   49e50:	e5e10dfc fef704f4 11da19cf 0411b72a     ............*...
   49e60:	edff3909 020b3fd4 ef02f8e1 22f50712     .9...?........."

00049e70 <_ZN12_GLOBAL__N_12g0L7quant15E>:
   49e70:	00049f40 00049e7c 00000000              @...|.......

00049e7c <_ZN12_GLOBAL__N_12g0L12quant15_zeroE>:
   49e7c:	00000030 00000000 00000000 00000000     0...............
	...

00049f40 <_ZN12_GLOBAL__N_12g0L13quant15_scaleE>:
   49f40:	00000030 38f9182d 396aa349 38161afb     0...-..8I.j9...8
   49f50:	395f7d54 398cd376 390e4549 3949165a     T}_9v..9IE.9Z.I9
   49f60:	39f75557 3973d3ac 396abccf 38e86f7d     WU.9..s9..j9}o.8
   49f70:	39a153cd 39466eb6 394ecb5c 392ddc41     .S.9.nF9\.N9A.-9
   49f80:	3932b4d5 39266f79 393e4e38 39ace7fa     ..29yo&98N>9...9
   49f90:	3915d5f2 3974767e 3997e146 396c1f54     ...9~vt9F..9T.l9
   49fa0:	38a544a0 385b67e2 394148ae 396f8ab7     .D.8.g[8.HA9..o9
   49fb0:	3999356e 3a02f36c 390badb5 390a7dda     n5.9l..:...9.}.9
   49fc0:	38ac69ac 38a0c60b 391a35cf 38da5bed     .i.8...8.5.9.[.8
   49fd0:	392baa5d 399680e3 3936a5a7 38d61a00     ].+9...9..69...8
   49fe0:	39084150 395212d7 3895c757 38a722b9     PA.9..R9W..8.".8
   49ff0:	394e512b 390658c7 399ef5a6 393d2099     +QN9.X.9...9. =9
   4a000:	397aea66                                f.z9

0004a004 <_ZN12_GLOBAL__N_12g0L18tensor_dimension15E>:
   4a004:	00000001 00000030 00000000              ....0.......

0004a010 <_ZN12_GLOBAL__N_12g0L13tensor_data15E>:
   4a010:	00001c31 00000952 00008e09 fffff75f     1...R......._...
   4a020:	fffffa7c 00001eb3 fffffcc6 00000491     |...............
   4a030:	00000a23 000000a3 00001ef6 0000025d     #...........]...
   4a040:	00000b32 00000efb 00000cf7 000011ca     2...............
   4a050:	00000c24 00000bbb fffffc6c 0000186d     $.......l...m...
   4a060:	0000060c 00000187 00000592 00003176     ............v1..
   4a070:	00007497 000011d2 00000d2d fffffaec     .t......-.......
   4a080:	ffffff3a 00001859 00001a47 00002f43     :...Y...G...C/..
   4a090:	000031f0 000016d7 0000233c fffffaf8     .1......<#......
   4a0a0:	0000026f 000008e4 000021f5 00001a9a     o........!......
   4a0b0:	000002f0 000037c7 000036ad 00000f32     .....7...6..2...
   4a0c0:	00001b5c 000007c4 0000110d 00000346     \...........F...

0004a0d0 <_ZN12_GLOBAL__N_12g0L7quant14E>:
   4a0d0:	0004a1a0 0004a0dc 00000000              ............

0004a0dc <_ZN12_GLOBAL__N_12g0L12quant14_zeroE>:
   4a0dc:	00000030 00000000 00000000 00000000     0...............
	...

0004a1a0 <_ZN12_GLOBAL__N_12g0L13quant14_scaleE>:
   4a1a0:	00000030 3b155c5d 3b8cb141 3a3402cc     0...]\.;A..;..4:
   4a1b0:	3b8601fa 3ba8e201 3b2a9d82 3b712666     ...;...;..*;f&q;
   4a1c0:	3c144e09 3b9233c8 3b8cc08f 3b0b5f31     .N.<.3.;...;1_.;
   4a1d0:	3bc177f9 3b6df75a 3b77fe7b 3b507fa5     .w.;Z.m;{.w;..P;
   4a1e0:	3b564f62 3b47982c 3b64385d 3bcf5ab3     bOV;,.G;]8d;.Z.;
   4a1f0:	3b33b002 3b929569 3bb6239a 3b8d9522     ..3;i..;.#.;"..;
   4a200:	3ac631c9 3a838f1d 3b67cabb 3b8fa207     .1.:...:..g;...;
   4a210:	3bb7bb87 3c1d0a4d 3b2781ba 3b261555     ...;M..<..';U.&;
   4a220:	3acec33c 3ac0cdf9 3b38eefc 3b02ee71     <..:...:..8;q..;
   4a230:	3b4dddcf 3bb47d02 3b5b0931 3b0060e8     ..M;.}.;1.[;.`.;
   4a240:	3b2366ba 3b7bed37 3ab39e7f 3ac86f22     .f#;7.{;...:"o.:
   4a250:	3b776bf2 3b211cdc 3bbea10e 3b62cea6     .kw;..!;...;..b;
   4a260:	3b9673eb                                .s.;

0004a264 <_ZN12_GLOBAL__N_12g0L18tensor_dimension14E>:
   4a264:	00000004 00000030 00000001 00000001     ....0...........
   4a274:	00000008 00000000 00000000              ............

0004a280 <_ZN12_GLOBAL__N_12g0L13tensor_data14E>:
   4a280:	811027ec 7a1808a6 fdef0a5e 177f2eb1     .'.....z^.......
   4a290:	eadf72f6 81d252d9 7fadb33e eb01ce82     .r...R..>.......
   4a2a0:	f435bb2d 1c32fa81 a7f831ee 09e2fa81     -.5...2..1......
   4a2b0:	292eeb32 8bfadd7f 7f191f0a 17fcf61a     2..)............
   4a2c0:	d50f1d19 e00c7f21 17f21473 417fc8c8     ....!...s......A
   4a2d0:	ddb649fe c74d7f08 6681d9ec 4bee1fc5     .I....M....f...K
   4a2e0:	3035afa1 09d38121 331f2429 d90c7fc9     ..50!...)$.3....
   4a2f0:	0a0c8a0d 73819dba 0cf52da3 ce81fa69     .......s.-..i...
   4a300:	81a1575a 20677d3d 2d837f9a 8c13ecfa     ZW..=}g ...-....
   4a310:	7fa0ff26 c2d5dff8 1c090c74 337f09d2     &.......t......3
   4a320:	7fa9b72a c1e2e82e 9a7f2f1a 9820e529     *......../..). .
   4a330:	3881dfb3 71ff26ea 291b174b da3a7781     ...8.&.qK..).w:.
   4a340:	508100f2 422e1ed9 7fb4df29 f2e0f933     ...P...B)...3...
   4a350:	a87f14b7 f93e18f2 047f4ebd 1344f715     ......>..N....D.
   4a360:	8125a2cc eaff0de8 59f2b5b3 3dee81fb     ..%........Y...=
   4a370:	e97a2c81 1b46252f 815731c4 3c2210d2     .,z./%F..1W..."<
   4a380:	876152aa 7f07fc0f 30c67602 e3811418     .Ra......v.0....
   4a390:	937f075e d82f8fa4 6d25f65a 8114b753     ^...../.Z.%mS...
   4a3a0:	997f3e18 9422ed19 476dcdc9 f15b8102     .>...."...mG..[.
   4a3b0:	314d0450 187fcaea 09eeb329 40450281     P.M1....).....E@
   4a3c0:	668124d9 6eb92bcd 05d1ef91 10a80b7f     .$.f.+.n........
   4a3d0:	e1e846ac c7932a7f 7fdf7b7b 4f3396fe     .F...*..{{....3O
   4a3e0:	0e691900 df198127 4e7fb8fa 108befe3     ..i.'......N....
   4a3f0:	40878134 ef0016a8 f92ae79b e481224b     4..@......*.K"..

0004a400 <_ZN12_GLOBAL__N_12g0L7quant13E>:
   4a400:	0004a430 0004a40c 00000000              0...........

0004a40c <_ZN12_GLOBAL__N_12g0L12quant13_zeroE>:
   4a40c:	00000008 00000000 00000000 00000000     ................
	...

0004a430 <_ZN12_GLOBAL__N_12g0L13quant13_scaleE>:
   4a430:	00000008 391b7530 38fa350e 390244fd     ....0u.9.5.8.D.9
   4a440:	38862414 392d8e6c 38fd0e08 38f9bf7d     .$.8l.-9...8}..8
   4a450:	390027b7                                .'.9

0004a454 <_ZN12_GLOBAL__N_12g0L18tensor_dimension13E>:
   4a454:	00000001 00000008 00000000              ............

0004a460 <_ZN12_GLOBAL__N_12g0L13tensor_data13E>:
   4a460:	ffffcfd4 000004fd ffffc51d 000003bf     ................
   4a470:	00000b6c fffff0b0 00002a7d 000003cd     l.......}*......

0004a480 <_ZN12_GLOBAL__N_12g0L7quant12E>:
   4a480:	0004a4b0 0004a48c 00000000              ............

0004a48c <_ZN12_GLOBAL__N_12g0L12quant12_zeroE>:
   4a48c:	00000008 00000000 00000000 00000000     ................
	...

0004a4b0 <_ZN12_GLOBAL__N_12g0L13quant12_scaleE>:
   4a4b0:	00000008 3bce77a4 3ba6273b 3bad03a0     .....w.;;'.;...;
   4a4c0:	3b3227ea 3be68127 3ba80b51 3ba5d929     .'2;'..;Q..;)..;
   4a4d0:	3baa34bf                                .4.;

0004a4d4 <_ZN12_GLOBAL__N_12g0L18tensor_dimension12E>:
   4a4d4:	00000004 00000008 00000001 00000001     ................
   4a4e4:	00000030 00000000 00000000              0...........

0004a4f0 <_ZN12_GLOBAL__N_12g0L13tensor_data12E>:
   4a4f0:	46d96a2e 0be7fbfd e404c03f cbe0050b     .j.F....?.......
   4a500:	1020ec00 07dee2c8 fb191112 1de90e11     .. .............
   4a510:	81710ac2 74f41aea 010e0fe5 d51a28f2     ..q....t.....(..
   4a520:	361fd2ff e8ecf3f0 2a5ed72c b1d40a12     ...6....,.^*....
   4a530:	0c10277f f2231fba ccdea7cf db28c9f2     .'....#.......(.
   4a540:	0be2e6f5 d053f107 28c524ef 320f3f4e     ......S..$.(N?.2
   4a550:	f3f5e84a 483c696a e3fef8e3 1b372ef7     J...ji<H......7.
   4a560:	c13fdfe7 3bd5cfd6 1771a7a9 0fc8bc3b     ..?....;..q.;...
   4a570:	10635481 14f9f8f3 c70e3d1a d73712ea     .Tc......=....7.
   4a580:	f50ede4d 31177e77 3b20e6dc 1a492b81     M...w~.1.. ;.+I.
   4a590:	944a0909 582312a8 1836db0b f703c930     ..J...#X..6.0...
   4a5a0:	88be3c87 d044dd19 e48da135 3df32dc2     .<....D.5....-.=
   4a5b0:	d9e22927 edecf7f5 f4f5fa05 313deade     ')............=1
   4a5c0:	27def0d6 05f2f51b 35fdd9cd 1ceb0bf3     ...'.......5....
   4a5d0:	8119f1e1 35091af7 e7f3f305 ed530027     .......5....'.S.
   4a5e0:	35aa3640 1bfb0304 eacac9b1 1d2b171f     @6.5..........+.
   4a5f0:	7f28c229 32cacfbe 40dce71e 02c71c1e     ).(....2...@....
   4a600:	ffc905fc 42eb0ffc d5f84e12 c5121c7a     .......B.N..z...
   4a610:	d016b8df b6b1d8d7 2a8cbfdf 585fcccb     ...........*.._X
   4a620:	ed150981 0b433611 56b8f7f4 492adcb0     .....6C....V..*I
   4a630:	2457c90e a9f42b19 0fe2c5f4 3ef5efd6     ..W$.+.........>
   4a640:	29ee134b 05090d0d eff4f852 ebf3063c     K..)....R...<...
   4a650:	ffe3f8cb e5eaec02 fe0e8145 13eb6301     ........E....c..
   4a660:	d2c618b6 171b1af1 efdd451a e62a1fd4     .........E....*.

0004a670 <_ZN12_GLOBAL__N_12g0L7quant11E>:
   4a670:	0004a740 0004a67c 00000000              @...|.......

0004a67c <_ZN12_GLOBAL__N_12g0L12quant11_zeroE>:
   4a67c:	00000030 00000000 00000000 00000000     0...............
	...

0004a740 <_ZN12_GLOBAL__N_12g0L13quant11_scaleE>:
   4a740:	00000030 38d04ca9 39108be6 3a1e0842     0....L.8...9B..:
   4a750:	389d5e28 3a020eed 3a2b2ea3 39349ce0     (^.8...:..+:..49
   4a760:	393148a1 388f524b 3957b664 39e66306     .H19KR.8d.W9.c.9
   4a770:	39825e58 395c5b26 392f92a9 38686eca     X^.9&[\9../9.nh8
   4a780:	386c1502 38e61464 39e3edd0 388a2455     ..l8d..8...9U$.8
   4a790:	38c03080 3874ae1e 3a14ef7f 3a870d1a     .0.8..t8...:...:
   4a7a0:	39605e30 387a27c6 39092bf4 38c06c1e     0^`9.'z8.+.9.l.8
   4a7b0:	38e90433 392e6ae4 390616d8 39d02233     3..8.j.9...93".9
   4a7c0:	399a39ed 38d208d9 397b8de4 38a0835b     .9.9...8..{9[..8
   4a7d0:	3899e3f7 399abc82 39be0a44 38e17eb0     ...8...9D..9.~.8
   4a7e0:	394c982c 38b7a558 395f0dc0 38f5cfc4     ,.L9X..8.._9...8
   4a7f0:	39b30d75 38a9980c 3974c877 38c7c81a     u..9...8w.t9...8
   4a800:	3a0a40fb                                .@.:

0004a804 <_ZN12_GLOBAL__N_12g0L18tensor_dimension11E>:
   4a804:	00000001 00000030 00000000              ....0.......

0004a810 <_ZN12_GLOBAL__N_12g0L13tensor_data11E>:
   4a810:	00000272 0000220c 000000c8 fffffb1b     r...."..........
   4a820:	0000027c 000000da 00001c28 00001cbf     |.......(.......
   4a830:	000000fc ffffe4d3 fffffec7 0000026f     ............o...
   4a840:	00001bc2 000011f7 00005fc8 00004438     ........._..8D..
   4a850:	fffffcdc fffffac4 0000043b 00001aaa     ........;.......
   4a860:	00004435 0000036a fffffba3 ffffff83     5D..j...........
   4a870:	00001181 00000188 00001141 00004a05     ........A....J..
   4a880:	00001917 00002fee ffffffc1 0000078a     ...../..........
   4a890:	fffffb06 fffff563 ffffface 000001db     ....c...........
   4a8a0:	0000005d 000000b2 ffffff35 000010d5     ].......5.......
   4a8b0:	000018dc 000012ea ffffe7a5 0000021e     ................
   4a8c0:	000013b1 fffffbf9 0000257a ffffff18     ........z%......

0004a8d0 <_ZN12_GLOBAL__N_12g0L7quant10E>:
   4a8d0:	0004a9a0 0004a8dc 00000003              ............

0004a8dc <_ZN12_GLOBAL__N_12g0L12quant10_zeroE>:
   4a8dc:	00000030 00000000 00000000 00000000     0...............
	...

0004a9a0 <_ZN12_GLOBAL__N_12g0L13quant10_scaleE>:
   4a9a0:	00000030 3b8a52e8 3bbff9cd 3cd1e2f8     0....R.;...;...<
   4a9b0:	3b51010d 3cacbbd2 3ce359f0 3befe059     ..Q;...<.Y.<Y..;
   4a9c0:	3beb7476 3b3e594b 3c0f3f1e 3c98fdc2     vt.;KY>;.?.<...<
   4a9d0:	3c2d254d 3c125487 3be92ec8 3b1a5992     M%-<.T.<...;.Y.;
   4a9e0:	3b1cc5f3 3b98c98a 3c975bec 3b377841     ...;...;.[.<Ax7;
   4a9f0:	3b7f406a 3b227ba0 3cc5ce14 3d335d66     j@.;.{";...<f]3=
   4aa00:	3c14fe8c 3b261e69 3bb62e60 3b7f8f97     ...<i.&;`..;...;
   4aa10:	3b9abcca 3be7a5f7 3bb21657 3c8a36b6     ...;...;W..;.6.<
   4aa20:	3c4cd4ef 3b8b79e0 3c270c39 3b552e75     ..L<.y.;9.'<u.U;
   4aa30:	3b4c62c4 3c4d825d 3c7c65a2 3b95be21     .bL;].M<.e|<!..;
   4aa40:	3c07dd0d 3b73e798 3c141f21 3ba33bf8     ...<..s;!..<.;.;
   4aa50:	3c6dcddf 3b613df0 3c228d1f 3b84aae1     ..m<.=a;.."<...;
   4aa60:	3cb79e4d                                M..<

0004aa64 <_ZN12_GLOBAL__N_12g0L18tensor_dimension10E>:
   4aa64:	00000004 00000001 00000003 00000003     ................
   4aa74:	00000030 00000000 00000000              0...........

0004aa80 <_ZN12_GLOBAL__N_12g0L13tensor_data10E>:
   4aa80:	48a4aeef afb103aa d7783c32 c9b209fb     ...H....2<x.....
   4aa90:	d421a46a b4e490f6 81035e4c 4d38df06     j.!.....L^....8M
   4aaa0:	123d4536 0e254857 2b17f081 a0e33ec6     6E=.WH%....+.>..
   4aab0:	4626f761 0cc72b81 3b7d6d64 9b81b7f2     a.&F.+..dm};....
   4aac0:	ae60d878 257f7e91 8a30567f 7399d8b5     x.`..~.%.V0....s
   4aad0:	68667f5d b63a57ed cc0cada3 6ad966b7     ].fh.W:......f.j
   4aae0:	3d38fa6b fae20cb1 e10b4c19 d1d9fdb7     k.8=.....L......
   4aaf0:	f138532e 49b6e1c2 cf1d141f 261ae3ff     .S8....I.......&
   4ab00:	440c5e2e f42f1bfe 0d05f7c4 fcfc6ce0     .^.D../......l..
   4ab10:	536f8127 8181b758 d1654673 a38bfe02     '.oSX...sFe.....
   4ab20:	96317f5c 811e70df 92716f65 51bb8c03     \.1..p..eoq....Q
   4ab30:	3463fc6c 023f7a1e 6165e6ee 748f798c     l.c4.z?...ea.y.t
   4ab40:	7f01f37f 08a78179 397f7f7f 818281dc     ....y......9....
   4ab50:	817f407f 379a8181 8f7f7f71 7f7f8181     .@.....7q.......
   4ab60:	7f7f017f 817f7ffc ac7f8101 818a7f81     ................
   4ab70:	3f81f861 fad6c557 f214511b dce0fd81     a..?W....Q......
   4ab80:	e0449329 3e4504b1 d0002a2f 1ce0b8f5     ).D...E>/*......
   4ab90:	4a1af82b fa4c1503 f834f6e4 0dd451ba     +..J..L...4..Q..
   4aba0:	1e0bb841 aeb341fc 2e1e111f ebce060a     A....A..........
   4abb0:	c214dc19 a60ffdf5 f44a2a19 120a920d     .........*J.....
   4abc0:	103eaa3b 01091b81 8152f617 f3a739ac     ;.>.......R..9..
   4abd0:	39060536 00da5c06 811d3717 e1cba9f1     6..9.\...7......
   4abe0:	a033f62a 22e9f2dc da4b2f1d 0ee28fad     *.3...."./K.....
   4abf0:	1d3fa83a d0392314 646dba75 10814b83     :.?..#9.u.md.K..
   4ac00:	2efaf4e0 fde327ea 29d91108 05e9feba     .....'.....)....
   4ac10:	f8191c0c 1c1015da 00161711 f00cd0fc     ................
   4ac20:	140ed1ff 082ae90b f4150038 fce758d8     ......*.8....X..

0004ac30 <_ZN12_GLOBAL__N_12g0L6quant9E>:
   4ac30:	0004ad00 0004ac3c 00000000              ....<.......

0004ac3c <_ZN12_GLOBAL__N_12g0L11quant9_zeroE>:
   4ac3c:	00000030 00000000 00000000 00000000     0...............
	...

0004ad00 <_ZN12_GLOBAL__N_12g0L12quant9_scaleE>:
   4ad00:	00000030 39b7cf59 3a05ec5f 38aa7d28     0...Y..9_..:(}.8
   4ad10:	3a417d41 39f53413 39c52974 3ac12095     A}A:.4.9t).9. .:
   4ad20:	3a61f1a1 3a712c22 3a084452 3917de90     ..a:",q:RD.:...9
   4ad30:	39d4c6a1 39d073b0 3a7d8e8a 3a0b86cd     ...9.s.9..}:...:
   4ad40:	3ac91540 3a7e9afe 39a12854 3a82551e     @..:..~:T(.9.U.:
   4ad50:	3acafb6d 3a490d45 39c7adae 38eda692     m..:E.I:...9...8
   4ad60:	39cf6110 3a90080a 3a4014b5 3a6232b4     .a.9...:..@:.2b:
   4ad70:	39ddb1b0 3a67b832 3a2f2dfd 399202cd     ...92.g:.-/:...9
   4ad80:	3a030219 3a3a06b3 3981a3a0 39c2d485     ...:..::...9...9
   4ad90:	39a5e364 39e61a8b 3aa3d13f 39fb1d1c     d..9...9?..:...9
   4ada0:	3a0aeadf 3aa845f6 3a09613e 3a469b2c     ...:.E.:>a.:,.F:
   4adb0:	39780e28 3aad3a89 3a170458 3a0f2860     (.x9.:.:X..:`(.:
   4adc0:	39dde08e                                ...9

0004adc4 <_ZN12_GLOBAL__N_12g0L17tensor_dimension9E>:
   4adc4:	00000001 00000030 00000000              ....0.......

0004add0 <_ZN12_GLOBAL__N_12g0L12tensor_data9E>:
   4add0:	00002e4e 0000138b 000037b8 0000087d     N........7..}...
   4ade0:	0000105b 0000125b ffffee90 0000120d     [...[...........
   4adf0:	00000adf fffff4dd fffff1ee 00001511     ................
   4ae00:	fffff2e3 ffffecbe 00001e73 00000726     ........s...&...
   4ae10:	fffff799 000008d5 fffff892 00000caf     ................
   4ae20:	ffffffd8 000011e4 00000726 fffff5a0     ........&.......
   4ae30:	fffffebe ffffec4a 00000aff ffffee74     ....J.......t...
   4ae40:	0000106f 00002026 00000276 00000290     o...& ..v.......
   4ae50:	00001fc0 00002b7b 0000215c 000013aa     ....{+..\!......
   4ae60:	00001805 ffffed0d 000002d5 000013b5     ................
   4ae70:	fffffc92 ffffed74 0000106d 0000077e     ....t...m...~...
   4ae80:	0000011f ffffe5c9 ffffced5 000009b5     ................

0004ae90 <_ZN12_GLOBAL__N_12g0L6quant8E>:
   4ae90:	0004af60 0004ae9c 00000000              `...........

0004ae9c <_ZN12_GLOBAL__N_12g0L11quant8_zeroE>:
   4ae9c:	00000030 00000000 00000000 00000000     0...............
	...

0004af60 <_ZN12_GLOBAL__N_12g0L12quant8_scaleE>:
   4af60:	00000030 3b9b3a93 3be232ca 3a8ffaa5     0....:.;.2.;...:
   4af70:	3c23672f 3bcf1376 3ba68130 3ca318ec     /g#<v..;0..;...<
   4af80:	3c3ecfaa 3c4babfb 3be6281c 3b004139     ..><..K<.(.;9A.;
   4af90:	3bb3b0d5 3bb00a03 3c562169 3beba98f     ...;...;i!V<...;
   4afa0:	3ca9d0e7 3c57041f 3b881943 3c5c2228     ...<..W<C..;("\<
   4afb0:	3cab6b7b 3c29ca2a 3ba8a13e 3ac8b29b     {k.<*.)<>..;...:
   4afc0:	3baf2217 3c734565 3c2236b3 3c3f069f     .".;eEs<.6"<..?<
   4afd0:	3bbb38e4 3c43b053 3c13f0c1 3b769d53     .8.;S.C<...<S.v;
   4afe0:	3bdd4652 3c1d19b5 3b5af65e 3ba48913     RF.;...<^.Z;...;
   4aff0:	3b8c1803 3bc252fe 3c8a584d 3bd4113b     ...;.R.;MX.<;..;
   4b000:	3beaa232 3c8e1ba5 3be8095a 3c27b96b     2..;...<Z..;k.'<
   4b010:	3b517c05 3c924af7 3bff11df 3bf1cba0     .|Q;.J.<...;...;
   4b020:	3bbb6079                                y`.;

0004b024 <_ZN12_GLOBAL__N_12g0L17tensor_dimension8E>:
   4b024:	00000004 00000030 00000001 00000001     ....0...........
   4b034:	00000008 00000000 00000000              ............

0004b040 <_ZN12_GLOBAL__N_12g0L12tensor_data8E>:
   4b040:	81199697 fffcfdc1 fe62f181 0f0519d0     ..........b.....
   4b050:	7f1af018 fbeee51a f5e5bd97 e0d57f24     ............$...
   4b060:	fdf4e3fb b88109f9 01f4dcfd be810cf2     ................
   4b070:	f510087f fc0112bd 06f2e581 0a000c45     ............E...
   4b080:	f6f52b17 142b81e2 f9f3144b 7ff9fee9     .+....+.K.......
   4b090:	0b83fa74 7f2efba5 de076881 100dbd5a     t........h..Z...
   4b0a0:	0b93df7f eaf8fd34 f20e0b7f f40518e2     ....4...........
   4b0b0:	ef67af81 88daf643 f9004f1f 0ced81f4     ..g.C....O......
   4b0c0:	020ac1f5 070b7f0a f7ba8820 eece7fde     ........ .......
   4b0d0:	eff3ec28 f47f1bed 81fc17fd f4fe25f8     (............%..
   4b0e0:	0a4de2b0 81ff6738 ea25f7ee aa810af0     ..M.8g....%.....
   4b0f0:	7f08f243 2d33f3ee f887f07f 0409e520     C.....3-.... ...
   4b100:	231e14df af810107 06ac0b7f 1906f80f     ...#............
   4b110:	81e037ff fc0318e6 0396127f 501a3593     .7...........5.P
   4b120:	0feceb81 20fc0837 83f081f7 ecf01bf6     ....7.. ........
   4b130:	1e7f5cfe 22709626 2f81f9b1 675ee403     .\..&.p".../..^g
   4b140:	810285fa eef50bf3 8e00810f e6041006     ................
   4b150:	a220d2e7 4b7fc927 04390781 601ae893     .. .'..K..9....`
   4b160:	fb720f81 29de0ed5 f8fb0d7f 0e0213b7     ..r....)........
   4b170:	275002b7 7f32ca41 fc49fb81 05f70cbb     ..P'A.2...I.....
   4b180:	f0291ffd 337ff41b 02b7f47f f7090d37     ..)....3....7...
   4b190:	fa2081f0 ebfc0711 f77f6a05 0744a527     .. ......j..'.D.
   4b1a0:	6ffff707 00008103 f921e07f 030967c0     ...o......!..g..
   4b1b0:	6bf47f0a 281a7ffe e30b22f2 487fda1b     ...k...(.".....H

0004b1c0 <_ZN12_GLOBAL__N_12g0L6quant7E>:
   4b1c0:	0004b1f0 0004b1cc 00000000              ............

0004b1cc <_ZN12_GLOBAL__N_12g0L11quant7_zeroE>:
   4b1cc:	00000008 00000000 00000000 00000000     ................
	...

0004b1f0 <_ZN12_GLOBAL__N_12g0L12quant7_scaleE>:
   4b1f0:	00000008 3893f352 38fb5f06 38b7a75f     ....R..8._.8_..8
   4b200:	38625a97 38fff480 394f1ed2 38cf755c     .Zb8...8..O9\u.8
   4b210:	3935ec9b                                ..59

0004b214 <_ZN12_GLOBAL__N_12g0L17tensor_dimension7E>:
   4b214:	00000001 00000008 00000000              ............

0004b220 <_ZN12_GLOBAL__N_12g0L12tensor_data7E>:
   4b220:	00001078 ffffec86 fffffe8f 00000e58     x...........X...
   4b230:	00000914 000002bb fffff271 00000bd1     ........q.......

0004b240 <_ZN12_GLOBAL__N_12g0L6quant6E>:
   4b240:	0004b270 0004b24c 00000000              p...L.......

0004b24c <_ZN12_GLOBAL__N_12g0L11quant6_zeroE>:
   4b24c:	00000008 00000000 00000000 00000000     ................
	...

0004b270 <_ZN12_GLOBAL__N_12g0L12quant6_scaleE>:
   4b270:	00000008 3b447f28 3ba6ed1a 3b73ea4a     ....(.D;...;J.s;
   4b280:	3b165028 3ba9f85d 3c098a77 3b89c3ef     (P.;]..;w..<...;
   4b290:	3bf19e3d                                =..;

0004b294 <_ZN12_GLOBAL__N_12g0L17tensor_dimension6E>:
   4b294:	00000004 00000008 00000001 00000001     ................
   4b2a4:	00000008 00000000 00000000              ............

0004b2b0 <_ZN12_GLOBAL__N_12g0L12tensor_data6E>:
   4b2b0:	dfd500e9 fa8125ed 7ffc6115 ddf5f80a     .....%...a......
   4b2c0:	c4dbfd7f ca6231ba ab2a8109 391caa0d     .....1b...*....9
   4b2d0:	f7c4007e cf81fc1d 2804dd02 09008102     ~..........(....
   4b2e0:	0270ea7f 07fce16d fda1fe81 0523069e     ..p.m.........#.

0004b2f0 <_ZN12_GLOBAL__N_12g0L6quant5E>:
   4b2f0:	0004b320 0004b2fc 00000000               ...........

0004b2fc <_ZN12_GLOBAL__N_12g0L11quant5_zeroE>:
   4b2fc:	00000008 00000000 00000000 00000000     ................
	...

0004b320 <_ZN12_GLOBAL__N_12g0L12quant5_scaleE>:
   4b320:	00000008 3993616d 39d09389 396cfbf6     ....ma.9...9..l9
   4b330:	39b7067c 3974ae08 39a6ea9b 3a9b9291     |..9..t9...9...:
   4b340:	3b419265                                e.A;

0004b344 <_ZN12_GLOBAL__N_12g0L17tensor_dimension5E>:
   4b344:	00000001 00000008 00000000              ............

0004b350 <_ZN12_GLOBAL__N_12g0L12tensor_data5E>:
   4b350:	ffffd437 0000298e 00000196 ffffd0c5     7....)..........
   4b360:	fffffc50 ffffc946 0000015f 0000005f     P...F..._..._...

0004b370 <_ZN12_GLOBAL__N_12g0L6quant4E>:
   4b370:	0004b3a0 0004b37c 00000003              ....|.......

0004b37c <_ZN12_GLOBAL__N_12g0L11quant4_zeroE>:
   4b37c:	00000008 00000000 00000000 00000000     ................
	...

0004b3a0 <_ZN12_GLOBAL__N_12g0L12quant4_scaleE>:
   4b3a0:	00000008 3c43bd65 3c8a81f9 3c1d5f51     ....e.C<...<Q_.<
   4b3b0:	3c73149d 3c227b91 3c5daf96 3d4e9ea8     ..s<.{"<..]<..N=
   4b3c0:	3e008b37                                7..>

0004b3c4 <_ZN12_GLOBAL__N_12g0L17tensor_dimension4E>:
   4b3c4:	00000004 00000001 00000003 00000003     ................
   4b3d4:	00000008 00000000 00000000              ............

0004b3e0 <_ZN12_GLOBAL__N_12g0L12tensor_data4E>:
   4b3e0:	110d0201 1e080207 7fdb0106 1dfb01ed     ................
   4b3f0:	11f500fd 15fa02fe e77ffffd 2b90017f     ...............+
   4b400:	0597817f 81f17fa8 e90e01e4 297f01fd     ...............)
   4b410:	04090103 250f010b fdd20505 9bf603f3     .......%........
   4b420:	00f702fb 28fafe02                       .......(

0004b428 <_ZN12_GLOBAL__N_12g0L6quant3E>:
   4b428:	0004b458 0004b434 00000000              X...4.......

0004b434 <_ZN12_GLOBAL__N_12g0L11quant3_zeroE>:
   4b434:	00000008 00000000 00000000 00000000     ................
	...

0004b458 <_ZN12_GLOBAL__N_12g0L12quant3_scaleE>:
   4b458:	00000008 3921d548 393e2693 39142a63     ....H.!9.&>9c*.9
   4b468:	38bd4bfc 397b3b4b 39a181aa 374b86b1     .K.8K;{9...9..K7
   4b478:	37e76270                                pb.7

0004b47c <_ZN12_GLOBAL__N_12g0L17tensor_dimension3E>:
   4b47c:	00000001 00000008 00000000 00000000     ................
   4b48c:	00000000                                ....

0004b490 <_ZN12_GLOBAL__N_12g0L12tensor_data3E>:
   4b490:	0000417d 00002d54 00000252 000073f0     }A..T-..R....s..
   4b4a0:	00000a7a 00001e07 00013dd6 00000928     z........=..(...

0004b4b0 <_ZN12_GLOBAL__N_12g0L6quant2E>:
   4b4b0:	0004b4e0 0004b4bc 00000000              ............

0004b4bc <_ZN12_GLOBAL__N_12g0L11quant2_zeroE>:
   4b4bc:	00000008 00000000 00000000 00000000     ................
	...

0004b4e0 <_ZN12_GLOBAL__N_12g0L12quant2_scaleE>:
   4b4e0:	00000008 3d213372 3d3d686c 3d139638     ....r3!=lh==8..=
   4b4f0:	3cbc8eaf 3d7a400f 3da0e028 3b4abb2a     ...<.@z=(..=*.J;
   4b500:	3be67b0d                                .{.;

0004b504 <_ZN12_GLOBAL__N_12g0L17tensor_dimension2E>:
   4b504:	00000004 00000008 00000003 00000003     ................
   4b514:	00000001 00000000 00000000              ............

0004b520 <_ZN12_GLOBAL__N_12g0L12tensor_data2E>:
   4b520:	810831c7 2ed6ff78 237f39ff 08d4b1bd     .1..x....9.#....
   4b530:	1b1e05d7 814534d1 2ac62015 4a351435     .....4E.. .*5.5J
   4b540:	c681b01a 102fcb04 db046f81 00c8021f     ....../..o......
   4b550:	01027f00 adf000b5 fe81ea02 2b0bcef5     ...............+
   4b560:	fcec1d81 f348e5f4                       ......H.

0004b568 <_ZN12_GLOBAL__N_12g0L17tensor_dimension1E>:
   4b568:	00000002 00000004 00000002 00000000     ................
	...

0004b580 <_ZN12_GLOBAL__N_12g0L12tensor_data1E>:
	...
   4b58c:	00000001 00000000 00000001 00000000     ................
   4b59c:	00000000                                ....

0004b5a0 <_ZN12_GLOBAL__N_12g0L6quant0E>:
   4b5a0:	0004b5b4 0004b5ac 00000000              ............

0004b5ac <_ZN12_GLOBAL__N_12g0L11quant0_zeroE>:
   4b5ac:	00000001 ffffff80                       ........

0004b5b4 <_ZN12_GLOBAL__N_12g0L12quant0_scaleE>:
   4b5b4:	00000001 3b808081                       .......;

0004b5bc <_ZN12_GLOBAL__N_12g0L17tensor_dimension0E>:
   4b5bc:	00000004 00000001 00000060 00000060     ........`...`...
   4b5cc:	00000001                                ....

0004b5d0 <zeroes.0>:
   4b5d0:	30303030 30303030 30303030 30303030     0000000000000000

0004b5e0 <blanks.1>:
   4b5e0:	20202020 20202020 20202020 20202020                     

0004b5f0 <_ctype_>:
   4b5f0:	20202000 20202020 28282020 20282828     .         ((((( 
   4b600:	20202020 20202020 20202020 20202020                     
   4b610:	10108820 10101010 10101010 10101010      ...............
   4b620:	04040410 04040404 10040404 10101010     ................
   4b630:	41411010 41414141 01010101 01010101     ..AAAAAA........
   4b640:	01010101 01010101 01010101 10101010     ................
   4b650:	42421010 42424242 02020202 02020202     ..BBBBBB........
   4b660:	02020202 02020202 02020202 10101010     ................
   4b670:	00000020 00000000 00000000 00000000      ...............
	...

0004b6f4 <zeroes.0>:
   4b6f4:	30303030 30303030 30303030 30303030     0000000000000000

0004b704 <blanks.1>:
   4b704:	20202020 20202020 20202020 20202020                     

0004b714 <p05.0>:
   4b714:	00000005 00000019 0000007d              ........}...

0004b720 <__mprec_bigtens>:
   4b720:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   4b730:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   4b740:	7f73bf3c 75154fdd                       <.s..O.u

0004b748 <__mprec_tens>:
   4b748:	00000000 3ff00000 00000000 40240000     .......?......$@
   4b758:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   4b768:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   4b778:	00000000 412e8480 00000000 416312d0     .......A......cA
   4b788:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   4b798:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   4b7a8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   4b7b8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   4b7c8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   4b7d8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   4b7e8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   4b7f8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   4b808:	79d99db4 44ea7843                       ...yCx.D

0004b810 <desc_ms_os_20>:
   4b810:	0000000a 06030000 000800b2 00000001     ................
   4b820:	000800a8 00020002 001400a0 49570003     ..............WI
   4b830:	4253554e 00000000 00000000 00840000     NUSB............
   4b840:	00070004 0044002a 00760065 00630069     ....*.D.e.v.i.c.
   4b850:	00490065 0074006e 00720065 00610066     e.I.n.t.e.r.f.a.
   4b860:	00650063 00550047 00440049 00000073     c.e.G.U.I.D.s...
   4b870:	007b0050 00370039 00460035 00340034     P.{.9.7.5.F.4.4.
   4b880:	00390044 0030002d 00300044 002d0038     D.9.-.0.D.0.8.-.
   4b890:	00330034 00440046 0038002d 00330042     4.3.F.D.-.8.B.3.
   4b8a0:	002d0045 00320031 00430037 00380041     E.-.1.2.7.C.A.8.
   4b8b0:	00460041 00460046 00440039 0000007d     A.F.F.F.9.D.}...
   4b8c0:	00000000                                ....

0004b8c4 <desc_bos>:
   4b8c4:	00390f05 05101802 08b63800 a009a934     ..9......8..4...
   4b8d4:	a0fd8b47 b6158876 01010065 05101c01     G...v...e.......
   4b8e4:	dd60df00 c74589d8 65d29c4c 8a649e9d     ..`...E.L..e..d.
   4b8f4:	0300009f 0200b206 00000000              ............

0004b900 <desc_hs_configuration>:
   4b900:	00620209 a0000103 000b0832 00020202     ..b.....2.......
   4b910:	00040900 02020100 24050400 05012000     ...........$. ..
   4b920:	01000124 02022404 00062405 81050701     $....$...$......
   4b930:	10000803 00010409 00000a02 02050700     ................
   4b940:	00020002 02820507 09000200 02000204     ................
   4b950:	050000ff 02030507 07000200 00028305     ................
   4b960:	00000002                                ....

0004b964 <desc_fs_configuration>:
   4b964:	00620209 a0000103 000b0832 00020202     ..b.....2.......
   4b974:	00040900 02020100 24050400 05012000     ...........$. ..
   4b984:	01000124 02022404 00062405 81050701     $....$...$......
   4b994:	10000803 00010409 00000a02 02050700     ................
   4b9a4:	00004002 02820507 09000040 02000204     .@......@.......
   4b9b4:	050000ff 02030507 07000040 40028305     ........@......@
   4b9c4:	00000000                                ....

0004b9c8 <__compound_literal.0>:
   4b9c8:	00000409                                ....

0004b9cc <desc_device>:
   4b9cc:	02100112 400102ef 4011cafe 02010100     .......@...@....
   4b9dc:	00000103                                ....

0004b9e0 <desc_url>:
   4b9e0:	61010330 7169626d 672e6961 75687469     0..ambiqai.githu
   4b9f0:	6f692e62 6265772f 656c622d 7361642d     b.io/web-ble-das
   4ba00:	616f6268 2f736472 645f6369 2f6f6d65     hboards/ic_demo/
   4ba10:	00000000                                ....

0004ba14 <ns_power_current_version>:
   4ba14:	00ca0007 00000001 00000000              ............

0004ba20 <ns_power_oldest_supported_version>:
   4ba20:	00ca0007 00000000 00000001              ............

0004ba2c <ns_power_V1_0_0>:
   4ba2c:	00ca0007 00000001 00000000              ............

0004ba38 <ns_timer_current_version>:
   4ba38:	00ca0002 00000001 00000000              ............

0004ba44 <ns_timer_oldest_supported_version>:
   4ba44:	00ca0002 00000000 00000001              ............

0004ba50 <ns_timer_V1_0_0>:
   4ba50:	00ca0002 00000001 00000000              ............

0004ba5c <ns_camera_V1_0_0>:
   4ba5c:	00ca000a 00000001 00000000              ............

0004ba68 <ArducamcameraOperations>:
   4ba68:	0002ce55 0002d509 0002ccfd 0002cd49     U...........I...
   4ba78:	0002cdad 0002d1d1 0002cdf9 0002cf39     ............9...
   4ba88:	0002cf65 0002cec1 0002cee9 0002ce95     e...............
   4ba98:	0002ce79 0002cfb5 0002cc4d 0002d135     y.......M...5...
   4baa8:	0002cc69 0002cfd1 0002cfed 0002d009     i...............
   4bab8:	0002d041 0002d025 0002ce39 0002cc49     A...%...9...I...
   4bac8:	0002d49d 0002d4a1 0002d451 0002d0c1     ........Q.......
   4bad8:	0002d105 0002d0d5 0002d0e1 0002d18d     ................
   4bae8:	0002d1b1 0002d05d 0002d069 0002d075     ....]...i...u...
   4baf8:	0002d081 0002d0b1 0002d4a5 0002cc0d     ................
   4bb08:	0002d0ed 0002d209 0002d32d 0002cda5     ........-.......

0004bb18 <CSWTCH.318>:
   4bb18:	10050d60 10050d00 10050bb0 10050a60     `...........`...

0004bb28 <CSWTCH.316>:
   4bb28:	10050d70 10050d10 10050cb0 10050b60     p...........`...

0004bb38 <CSWTCH.311>:
   4bb38:	fffdffff fff1fff9 ffc1ffe1 ff01ff81     ................
   4bb48:	fc01fe01 f001f801 c001e001 00008001     ................

0004bb58 <CSWTCH.309>:
   4bb58:	00020001 00080004 00200010 00800040     .......... .@...
   4bb68:	02000100 08000400 20001000 00004000     ........... .@..

0004bb78 <gWinogradQuant>:
   4bb78:	a7b2b280 e897a7f6 d18097e8 6580d1db     ...............e
   4bb88:	b2c5c5b2 a78b4565 458ba7b1 97836023     ....eE.....E#`..
   4bb98:	23608397 80765b31 2e315b76 51656551     ..`#1[v.v[1.QeeQ
   4bba8:	4f452a2e 36232a45 251c2336 0a13131c     .*EOE*#66#.%....

0004bbb8 <ZAG>:
   4bbb8:	10080100 0a030209 19201811 05040b12     .......... .....
   4bbc8:	211a130c 22293028 060d141b 1c150e07     ...!(0)"........
   4bbd8:	38312a23 242b3239 170f161d 332c251e     #*1892+$.....%,3
   4bbe8:	2d343b3a 2e271f26 363d3c35 3f3e372f     :;4-&.'.5<=6/7>?

0004bbf8 <ns_usb_current_version>:
   4bbf8:	00ca0006 00000001 00000000              ............

0004bc04 <ns_usb_oldest_supported_version>:
   4bc04:	00ca0006 00000000 00000001              ............

0004bc10 <ns_usb_V1_0_0>:
   4bc10:	00ca0006 00000001 00000000              ............

0004bc1c <_usbd_driver>:
   4bc1c:	00032415 0003247d 000324a9 000325a5     .$..}$...$...%..
   4bc2c:	0003266d 00000000 00033bd1 00033c15     m&.......;...<..
   4bc3c:	00033c35 0002be45 00033d05 00000000     5<..E....=......

0004bc4c <am_hal_cachectrl_defaults>:
   4bc4c:	0000030e                                ....

0004bc50 <am_hal_daxi_defaults>:
   4bc50:	0f020100 00000001                       ........

0004bc58 <am_hal_gpio_pincfg_disabled>:
   4bc58:	00000003                                ....

0004bc5c <am_hal_gpio_pincfg_output>:
   4bc5c:	00000183                                ....

0004bc60 <am_hal_gpio_pincfg_pulledup_disabled>:
   4bc60:	0000e083                                ....

0004bc64 <g_ui32DSpintbl>:
   4bc64:	8fc007e0 e3fbffff 01ffffff 00000000     ................

0004bc74 <am_hal_pwrctrl_peripheral_control>:
   4bc74:	40021004 00000001 40021008 00000001     ...@.......@....
   4bc84:	40021004 00000002 40021008 0000001e     ...@.......@....
   4bc94:	40021004 00000004 40021008 0000001e     ...@.......@....
   4bca4:	40021004 00000008 40021008 0000001e     ...@.......@....
   4bcb4:	40021004 00000010 40021008 0000001e     ...@.......@....
   4bcc4:	40021004 00000020 40021008 000001e0     ...@ ......@....
   4bcd4:	40021004 00000040 40021008 000001e0     ...@@......@....
   4bce4:	40021004 00000080 40021008 000001e0     ...@.......@....
   4bcf4:	40021004 00000100 40021008 000001e0     ...@.......@....
   4bd04:	40021004 00000200 40021008 00001e00     ...@.......@....
   4bd14:	40021004 00000400 40021008 00001e00     ...@.......@....
   4bd24:	40021004 00000800 40021008 00001e00     ...@.......@....
   4bd34:	40021004 00001000 40021008 00001e00     ...@.......@....
   4bd44:	40021004 00002000 40021008 00002000     ...@. .....@. ..
   4bd54:	40021004 00004000 40021008 0001c000     ...@.@.....@....
   4bd64:	40021004 00008000 40021008 0001c000     ...@.......@....
   4bd74:	40021004 00010000 40021008 0001c000     ...@.......@....
   4bd84:	40021004 00020000 40021008 00020000     ...@.......@....
   4bd94:	40021004 00040000 40021008 00040000     ...@.......@....
   4bda4:	40021004 00080000 40021008 00080000     ...@.......@....
   4bdb4:	40021004 00100000 40021008 00100000     ...@.......@....
   4bdc4:	40021004 00200000 40021008 00200000     ...@.. ....@.. .
   4bdd4:	40021004 00400000 40021008 00400000     ...@..@....@..@.
   4bde4:	40021004 00800000 40021008 00800000     ...@.......@....
   4bdf4:	40021004 01000000 40021008 01000000     ...@.......@....
   4be04:	4002100c 00000001 40021010 000000ff     ...@.......@....
   4be14:	4002100c 00000002 40021010 000000ff     ...@.......@....
   4be24:	4002100c 00000004 40021010 000000ff     ...@.......@....
   4be34:	4002100c 00000008 40021010 000000ff     ...@.......@....
   4be44:	4002100c 00000010 40021010 000000ff     ...@.......@....
   4be54:	4002100c 00000020 40021010 000000ff     ...@ ......@....
   4be64:	4002100c 00000040 40021010 000000ff     ...@@......@....
   4be74:	4002100c 00000080 40021010 000000ff     ...@.......@....
   4be84:	4002100c 00000400 40021010 00000400     ...@.......@....

0004be94 <g_DefaultMcuMemCfg>:
   4be94:	07070102 00000001                       ........

0004be9c <g_DefaultSRAMCfg>:
   4be9c:	00000003 00000300                       ........

0004bea4 <g_VDDC_trimstbl>:
   4bea4:	3c003cec 7f7ff05a 00000000              .<.<Z.......

0004beb0 <g_VDDFLP_trimstbl>:
   4beb0:	f500f5ec 08fefffe fd1108fe 1afc1a11     ................
   4bec0:	2c23fb23 f9352cfa 3cf83c35 7f7ff75a     #.#,.,5.5<.<Z...
   4bed0:	00000000                                ....

0004bed4 <g_VDDF_trimstbl>:
   4bed4:	f500f5ec 08fefffe fd1108fe 1afc1a11     ................
   4bee4:	2c23fb23 f9352cfa 3cf83c35 7f7ff75a     #.#,.,5.5<.<Z...
   4bef4:	00000000                                ....

0004bef8 <g_memlpldo_trimstbl>:
   4bef8:	f208f2ee faf607f6 05fefa06 020402fe     ................
   4bf08:	0a060306 010e0a02 1200120e 1a16ff16     ................
   4bf18:	fd2a1afe 3cfc3c2a 7f7ffb5a 00000000     ..*.*<.<Z.......

0004bf28 <g_am_hal_bootrom_helper>:
   4bf28:	0800004d 08000051 08000055 08000059     M...Q...U...Y...
   4bf38:	0800006d 08000075 08000079 08000081     m...u...y.......
   4bf48:	08000099 0800009d                       ........

0004bf50 <g_sBspUartConfig>:
   4bf50:	0001c200 00000203 02020000              ............

0004bf5c <_ZTSN10__cxxabiv117__class_type_infoE>:
   4bf5c:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   4bf6c:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   4bf7c:	00000045                                E...

0004bf80 <_ZTIN10__cxxabiv117__class_type_infoE>:
   4bf80:	0004c0e0 0004bf5c 0004c114              ....\.......

0004bf8c <_ZTVN10__cxxabiv117__class_type_infoE>:
   4bf8c:	00000000 0004bf80 00037cc5 00037cd9     .........|...|..
   4bf9c:	00037fcd 00037fcd 00037d55 00037c85     ........U}...|..
   4bfac:	00037d39 00037cf5 00037cb9              9}...|...|..

0004bfb8 <_ZTSN10__cxxabiv120__function_type_infoE>:
   4bfb8:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   4bfc8:	6e75665f 6f697463 79745f6e 695f6570     _function_type_i
   4bfd8:	456f666e 00000000                       nfoE....

0004bfe0 <_ZTIN10__cxxabiv120__function_type_infoE>:
   4bfe0:	0004c0e0 0004bfb8 0004c114              ............

0004bfec <_ZTVN10__cxxabiv120__function_type_infoE>:
   4bfec:	00000000 0004bfe0 00037d85 00037d99     .........}...}..
   4bffc:	00037fcd 00037d81 00037fd5 00037fd1     .....}..........

0004c00c <_ZTSN9__gnu_cxx20recursive_init_errorE>:
   4c00c:	5f5f394e 5f756e67 32787863 63657230     N9__gnu_cxx20rec
   4c01c:	69737275 695f6576 5f74696e 6f727265     ursive_init_erro
   4c02c:	00004572                                rE..

0004c030 <_ZTIN9__gnu_cxx20recursive_init_errorE>:
   4c030:	0004c0e0 0004c00c 0004c164              ........d...

0004c03c <_ZTVN9__gnu_cxx20recursive_init_errorE>:
   4c03c:	00000000 0004c030 00037df5 00037e09     ....0....}...~..
   4c04c:	000384a5                                ....

0004c050 <_ZTSN10__cxxabiv119__pointer_type_infoE>:
   4c050:	5f30314e 7878635f 76696261 5f393131     N10__cxxabiv119_
   4c060:	696f705f 7265746e 7079745f 6e695f65     _pointer_type_in
   4c070:	00456f66                                foE.

0004c074 <_ZTIN10__cxxabiv119__pointer_type_infoE>:
   4c074:	0004c0e0 0004c050 0004c284              ....P.......

0004c080 <_ZTVN10__cxxabiv119__pointer_type_infoE>:
   4c080:	00000000 0004c074 00037e35 00037e49     ....t...5~..I~..
   4c090:	00037e31 00037fcd 00038ca9 00037fd1     1~..............
   4c0a0:	00037e65                                e~..

0004c0a4 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   4c0a4:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   4c0b4:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   4c0c4:	456f666e 00000000                       nfoE....

0004c0cc <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   4c0cc:	0004c0e0 0004c0a4 0004bf80              ............

0004c0d8 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   4c0d8:	00000000 0004c0cc 00037ead 00037ec1     .........~...~..
   4c0e8:	00037fcd 00037fcd 00037d55 00037c85     ........U}...|..
   4c0f8:	00037f9d 00037f19 00037edd              .........~..

0004c104 <_ZTSSt9type_info>:
   4c104:	74397453 5f657079 6f666e69 00000000     St9type_info....

0004c114 <_ZTISt9type_info>:
   4c114:	0004bf94 0004c104                       ........

0004c11c <_ZTSSt17bad_function_call>:
   4c11c:	37317453 5f646162 636e7566 6e6f6974     St17bad_function
   4c12c:	6c61635f 0000006c                       _call...

0004c134 <_ZTISt17bad_function_call>:
   4c134:	0004c0e0 0004c11c 0004c164              ........d...

0004c140 <_ZTVSt17bad_function_call>:
   4c140:	00000000 0004c134 00038095 000380a9     ....4...........
   4c150:	0003808d                                ....

0004c154 <_ZTSSt9exception>:
   4c154:	65397453 70656378 6e6f6974 00000000     St9exception....

0004c164 <_ZTISt9exception>:
   4c164:	0004bf94 0004c154                       ....T...

0004c16c <_ZTSSt13bad_exception>:
   4c16c:	33317453 5f646162 65637865 6f697470     St13bad_exceptio
   4c17c:	0000006e                                n...

0004c180 <_ZTISt13bad_exception>:
   4c180:	0004c0e0 0004c16c 0004c164              ....l...d...

0004c18c <_ZTSN10__cxxabiv115__forced_unwindE>:
   4c18c:	5f30314e 7878635f 76696261 5f353131     N10__cxxabiv115_
   4c19c:	726f665f 5f646563 69776e75 0045646e     _forced_unwindE.

0004c1ac <_ZTIN10__cxxabiv115__forced_unwindE>:
   4c1ac:	0004bf94 0004c18c                       ........

0004c1b4 <_ZTSN10__cxxabiv119__foreign_exceptionE>:
   4c1b4:	5f30314e 7878635f 76696261 5f393131     N10__cxxabiv119_
   4c1c4:	726f665f 6e676965 6378655f 69747065     _foreign_excepti
   4c1d4:	00456e6f                                onE.

0004c1d8 <_ZTIN10__cxxabiv119__foreign_exceptionE>:
   4c1d8:	0004bf94 0004c1b4                       ........

0004c1e0 <_ZTVSt13bad_exception>:
   4c1e0:	00000000 0004c180 000384a1 000384b5     ................
   4c1f0:	000384ad                                ....

0004c1f4 <_ZTSN10__cxxabiv123__fundamental_type_infoE>:
   4c1f4:	5f30314e 7878635f 76696261 5f333231     N10__cxxabiv123_
   4c204:	6e75665f 656d6164 6c61746e 7079745f     _fundamental_typ
   4c214:	6e695f65 00456f66                       e_infoE.

0004c21c <_ZTIN10__cxxabiv123__fundamental_type_infoE>:
   4c21c:	0004c0e0 0004c1f4 0004c114              ............

0004c228 <_ZTVN10__cxxabiv123__fundamental_type_infoE>:
   4c228:	00000000 0004c21c 00038c35 00038c49     ........5...I...
   4c238:	00037fcd 00037fcd 00037fd5 00037fd1     ................

0004c248 <_ZTSDn>:
   4c248:	00006e44                                Dn..

0004c24c <_ZTIDn>:
   4c24c:	0004c230 0004c248                       0...H...

0004c254 <_ZTSv>:
   4c254:	00000076                                v...

0004c258 <_ZTIv>:
   4c258:	0004c230 0004c254                       0...T...

0004c260 <_ZTSN10__cxxabiv117__pbase_type_infoE>:
   4c260:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   4c270:	6162705f 745f6573 5f657079 6f666e69     _pbase_type_info
   4c280:	00000045                                E...

0004c284 <_ZTIN10__cxxabiv117__pbase_type_infoE>:
   4c284:	0004c0e0 0004c260 0004c114              ....`.......

0004c290 <_ZTVN10__cxxabiv117__pbase_type_infoE>:
   4c290:	00000000 0004c284 00038c79 00038c8d     ........y.......
   4c2a0:	00037fcd 00037fcd 00038ca9 00037fd1     ................
   4c2b0:	00038c65                                e...

0004c2b4 <_ZZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvjE2pm>:
   4c2b4:	ffffffff                                ....

0004c2b8 <_ZZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvjE3pmf>:
	...

0004c2c0 <_ZTSN10__cxxabiv129__pointer_to_member_type_infoE>:
   4c2c0:	5f30314e 7878635f 76696261 5f393231     N10__cxxabiv129_
   4c2d0:	696f705f 7265746e 5f6f745f 626d656d     _pointer_to_memb
   4c2e0:	745f7265 5f657079 6f666e69 00000045     er_type_infoE...

0004c2f0 <_ZTIN10__cxxabiv129__pointer_to_member_type_infoE>:
   4c2f0:	0004c0e0 0004c2c0 0004c284              ............

0004c2fc <_ZTSSt11logic_error>:
   4c2fc:	31317453 69676f6c 72655f63 00726f72     St11logic_error.

0004c30c <_ZTISt11logic_error>:
   4c30c:	0004c0e0 0004c2fc 0004c164              ........d...

0004c318 <_ZTSSt12length_error>:
   4c318:	32317453 676e656c 655f6874 726f7272     St12length_error
   4c328:	00000000                                ....

0004c32c <_ZTISt12length_error>:
   4c32c:	0004c0e0 0004c318 0004c30c              ............

0004c338 <_ZTVSt11logic_error>:
   4c338:	00000000 0004c30c 00038eb5 00038f35     ............5...
   4c348:	00038eb1                                ....

0004c34c <_ZTVSt12length_error>:
   4c34c:	00000000 0004c32c 00038ef5 00038f7d     ....,.......}...
   4c35c:	00038eb1                                ....

0004c360 <CSWTCH.176>:
   4c360:	0004459c 000445a0 000445a4              .E...E...E..

0004c36c <standard_subs>:
   4c36c:	00000074 00044244 00000003 00044244     t...DB......DB..
   4c37c:	00000003 00000000 00000000 00000061     ............a...
   4c38c:	000445a8 0000000e 000445a8 0000000e     .E.......E......
   4c39c:	000445b8 00000009 00000062 000445c4     .E......b....E..
   4c3ac:	00000011 000445c4 00000011 000445d8     .....E.......E..
   4c3bc:	0000000c 00000073 000445e8 0000000b     ....s....E......
   4c3cc:	000445f4 00000046 000445d8 0000000c     .E..F....E......
   4c3dc:	00000069 0004463c 0000000c 0004464c     i...<F......LF..
   4c3ec:	00000031 00044680 0000000d 0000006f     1....F......o...
   4c3fc:	00044690 0000000c 000446a0 00000031     .F.......F..1...
   4c40c:	000446d4 0000000d 00000064 000446e4     .F......d....F..
   4c41c:	0000000d 000446f4 00000032 00044728     .....F..2...(G..
   4c42c:	0000000e                                ....

0004c430 <cplus_demangle_operators>:
   4c430:	00044738 0004473c 00000002 00000002     8G..<G..........
   4c440:	00044740 00044744 00000001 00000002     @G..DG..........
   4c450:	00044748 00044558 00000002 00000002     HG..XE..........
   4c460:	0004474c 00044750 00000001 00000001     LG..PG..........
   4c470:	00044754 00044750 00000001 00000002     TG..PG..........
   4c480:	00044ad0 00044758 00000008 00000001     .J..XG..........
   4c490:	00044764 00044768 00000009 00000001     dG..hG..........
   4c4a0:	00044774 00044758 00000008 00000001     tG..XG..........
   4c4b0:	00044778 0004477c 0000000a 00000002     xG..|G..........
   4c4c0:	00044424 00044788 00000002 00000002     $D...G..........
   4c4d0:	0004478c 00044790 00000001 00000002     .G...G..........
   4c4e0:	00044794 00044798 00000001 00000001     .G...G..........
   4c4f0:	0004479c 000447a0 00000002 00000002     .G...G..........
   4c500:	000447a4 000447a8 00000006 00000003     .G...G..........
   4c510:	000447b0 000447b4 00000009 00000001     .G...G..........
   4c520:	000447c0 000447c4 0000000c 00000002     .G...G..........
   4c530:	000447d4 000447d8 00000001 00000001     .G...G..........
   4c540:	000447dc 00044744 00000001 00000002     .G..DG..........
   4c550:	000447e0 000447e4 00000007 00000001     .G...G..........
   4c560:	000447ec 000447f0 00000002 00000002     .G...G..........
   4c570:	000447f4 0004493c 00000001 00000002     .G..<I..........
   4c580:	000447f8 000447fc 00000001 00000002     .G...G..........
   4c590:	00044800 000447ac 00000002 00000002     .H...G..........
   4c5a0:	00044804 00044808 00000002 00000002     .H...H..........
   4c5b0:	0004480c 00044810 00000001 00000002     .H...H..........
   4c5c0:	00044814 00044818 00000002 00000002     .H...H..........
   4c5d0:	0004481c 00044474 00000003 00000003     .H..tD..........
   4c5e0:	00044820 00044474 00000003 00000003      H..tD..........
   4c5f0:	00044824 00044474 00000003 00000002     $H..tD..........
   4c600:	00044828 00044474 00000003 00000002     (H..tD..........
   4c610:	0004482c 00044830 00000002 00000002     ,H..0H..........
   4c620:	00044834 00044268 00000002 00000001     4H..hB..........
   4c630:	00044838 0004467c 00000001 00000002     8H..|F..........
   4c640:	00044428 0004483c 00000002 00000002     (D..<H..........
   4c650:	00044840 00044844 00000003 00000002     @H..DH..........
   4c660:	000449ac 00044848 00000002 00000002     .I..HH..........
   4c670:	0004484c 00044850 0000000b 00000001     LH..PH..........
   4c680:	0004485c 00044860 00000002 00000002     \H..`H..........
   4c690:	00044864 00044868 00000001 00000002     dH..hH..........
   4c6a0:	0004486c 00044870 00000002 00000002     lH..pH..........
   4c6b0:	00044874 00044878 00000002 00000002     tH..xH..........
   4c6c0:	0004487c 00044880 00000001 00000002     |H...H..........
   4c6d0:	00044884 000447d8 00000001 00000002     .H...G..........
   4c6e0:	00044888 0004488c 00000002 00000001     .H...H..........
   4c6f0:	00044890 00044894 00000005 00000003     .H...H..........
   4c700:	0004489c 000448a0 00000002 00000002     .H...H..........
   4c710:	00044a7c 00044880 00000001 00000001     |J...H..........
   4c720:	000448a4 000448a8 00000001 00000001     .H...H..........
   4c730:	000448ac 000448b0 00000003 00000003     .H...H..........
   4c740:	000448b4 000448b8 00000002 00000002     .H...H..........
   4c750:	000448bc 000448c0 00000002 00000002     .H...H..........
   4c760:	000445b4 000448c4 00000001 00000002     .E...H..........
   4c770:	000448c8 000448cc 00000002 00000002     .H...H..........
   4c780:	000448d0 000448d4 00000001 00000002     .H...H..........
   4c790:	000448d8 000448dc 00000003 00000002     .H...H..........
   4c7a0:	000448e0 000448e4 00000002 00000001     .H...H..........
   4c7b0:	000448e8 000448d4 00000001 00000001     .H...H..........
   4c7c0:	000448ec 000448f0 00000002 00000002     .H...H..........
   4c7d0:	0004442c 000448f4 00000001 00000003     ,D...H..........
   4c7e0:	000448f8 000448fc 00000002 00000002     .H...H..........
   4c7f0:	00044900 00044904 00000003 00000002     .I...I..........
   4c800:	00044908 0004490c 00000010 00000002     .I...I..........
   4c810:	00044920 00044924 00000001 00000002      I..$I..........
   4c820:	00044928 0004492c 00000002 00000002     (I..,I..........
   4c830:	00044930 00044934 00000009 00000001     0I..4I..........
   4c840:	00044940 00044934 00000009 00000001     @I..4I..........
   4c850:	00044944 00044948 0000000b 00000002     DI..HI..........
   4c860:	0004450c 00044954 00000003 00000002     .E..TI..........
   4c870:	00044784 00044958 00000007 00000001     .G..XI..........
   4c880:	00044960 00044958 00000007 00000001     `I..XI..........
   4c890:	00044964 00044968 00000005 00000000     dI..hI..........
   4c8a0:	00044970 00044974 00000006 00000001     pI..tI..........
	...

0004c8c0 <cplus_demangle_builtin_types>:
   4c8c0:	0004497c 0000000b 0004497c 0000000b     |I......|I......
   4c8d0:	00000000 00044988 00000004 00044990     .....I.......I..
   4c8e0:	00000007 00000007 00044998 00000004     .........I......
   4c8f0:	000449a0 00000004 00000000 000449a8     .I...........I..
   4c900:	00000006 000449a8 00000006 00000008     .....I..........
   4c910:	000449b0 0000000b 000449b0 0000000b     .I.......I......
   4c920:	00000008 000449bc 00000005 000449bc     .....I.......I..
   4c930:	00000005 00000008 000449c4 0000000a     .........I......
   4c940:	000449c4 0000000a 00000008 000449d0     .I...........I..
   4c950:	0000000d 000449d0 0000000d 00000000     .....I..........
   4c960:	000449e0 00000003 000449e0 00000003     .I.......I......
   4c970:	00000001 000449e4 0000000c 000449f4     .....I.......I..
   4c980:	00000008 00000002 00000000 00000000     ................
	...
   4c99c:	00044a00 00000004 00044a00 00000004     .J.......J......
   4c9ac:	00000003 00044a08 0000000d 00044a08     .....J.......J..
   4c9bc:	0000000d 00000004 00044a18 00000008     .........J......
   4c9cc:	00044a18 00000008 00000000 00044a24     .J..........$J..
   4c9dc:	00000011 00044a24 00000011 00000000     ....$J..........
	...
   4ca28:	00044a38 00000005 00044a38 00000005     8J......8J......
   4ca38:	00000000 00044a40 0000000e 00044a40     ....@J......@J..
   4ca48:	0000000e 00000000 00000000 00000000     ................
	...
   4ca64:	00044a50 00000004 00044a50 00000004     PJ......PJ......
   4ca74:	00000009 00044a58 00000007 00044998     ....XJ.......I..
   4ca84:	00000004 00000000 00044a60 00000009     ........`J......
   4ca94:	00044a00 00000004 00000005 00044a6c     .J..........lJ..
   4caa4:	00000012 00044a6c 00000012 00000006     ....lJ..........
   4cab4:	00044474 00000003 00044474 00000003     tD......tD......
   4cac4:	00000000 00044a80 00000009 00044a80     .....J.......J..
   4cad4:	00000009 00000000 00044a8c 00000009     .........J......
   4cae4:	00044a8c 00000009 00000000 00044a98     .J...........J..
   4caf4:	0000000a 00044a98 0000000a 00000000     .....J..........
   4cb04:	00044aa4 00000004 00044aa4 00000004     .J.......J......
   4cb14:	00000008 00044aac 00000007 00044aac     .....J.......J..
   4cb24:	00000007 00000000 00044ab4 00000008     .........J......
   4cb34:	00044ab4 00000008 00000000 00044ac0     .J...........J..
   4cb44:	00000008 00044ac0 00000008 00000000     .....J..........
   4cb54:	00044248 00000011 00044248 00000011     HB......HB......
   4cb64:	00000000 00044acc 00000006 00044acc     .....J.......J..
   4cb74:	00000006 00000008 00044ad4 0000000f     .........J......
   4cb84:	00044ad4 0000000f 00000008              .J..........

0004cb90 <tIomPinAlloc>:
   4cb90:	00510050 00610060 00840070 00940085     P.Q.`.a.p.......
   4cba0:	00a40095 01910190 01a101a0 01f001b0     ................
   4cbb0:	020001f1 02100201 02210220 02310230     ........ .!.0.1.
   4cbc0:	02f00240 030002f1 03100301 03d103d0     @...............
   4cbd0:	03e103e0 016003f0 01700161 01800171     ......`.a.p.q...

0004cbe0 <CSWTCH.20>:
   4cbe0:	016e3600 00b71b00 005b8d80 002dc6c0     .6n.......[...-.
   4cbf0:	02dc6c00                                .l..

0004cbf4 <gAmHalCmdQReg>:
   4cbf4:	40050228 4005022c 40050240 40050244     (..@,..@@..@D..@
   4cc04:	4005023c 00008000 40050230 00000001     <..@....0..@....
   4cc14:	00000004 00000002 40051228 4005122c     ........(..@,..@
   4cc24:	40051240 40051244 4005123c 00008000     @..@D..@<..@....
   4cc34:	40051230 00000001 00000004 00000002     0..@............
   4cc44:	40052228 4005222c 40052240 40052244     (".@,".@@".@D".@
   4cc54:	4005223c 00008000 40052230 00000001     <".@....0".@....
   4cc64:	00000004 00000002 40053228 4005322c     ........(2.@,2.@
   4cc74:	40053240 40053244 4005323c 00008000     @2.@D2.@<2.@....
   4cc84:	40053230 00000001 00000004 00000002     02.@............
   4cc94:	40054228 4005422c 40054240 40054244     (B.@,B.@@B.@DB.@
   4cca4:	4005423c 00008000 40054230 00000001     <B.@....0B.@....
   4ccb4:	00000004 00000002 40055228 4005522c     ........(R.@,R.@
   4ccc4:	40055240 40055244 4005523c 00008000     @R.@DR.@<R.@....
   4ccd4:	40055230 00000001 00000004 00000002     0R.@............
   4cce4:	40056228 4005622c 40056240 40056244     (b.@,b.@@b.@Db.@
   4ccf4:	4005623c 00008000 40056230 00000001     <b.@....0b.@....
   4cd04:	00000004 00000002 40057228 4005722c     ........(r.@,r.@
   4cd14:	40057240 40057244 4005723c 00008000     @r.@Dr.@<r.@....
   4cd24:	40057230 00000001 00000004 00000002     0r.@............
   4cd34:	400602a0 400602a8 400602c0 400602c4     ...@...@...@...@
   4cd44:	400602b8 00004000 400602ac 00000001     ...@.@.....@....
   4cd54:	00000004 00000008 400612a0 400612a8     ...........@...@
   4cd64:	400612c0 400612c4 400612b8 00004000     ...@...@...@.@..
   4cd74:	400612ac 00000001 00000004 00000008     ...@............
   4cd84:	400622a0 400622a8 400622c0 400622c4     .".@.".@.".@.".@
   4cd94:	400622b8 00004000 400622ac 00000001     .".@.@...".@....
   4cda4:	00000004 00000008                       ........
