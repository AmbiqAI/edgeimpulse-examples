//*****************************************************************************
//
//! @file am_devices_ambt53_scpm.h
//!
//! @brief The implementation of Apollo interface to AMBT53 System Controller
//!        and Power Management (SCPM) module I2C driver.
//!
//! @addtogroup ambt53 AMBT53 Device Driver
//! @ingroup devices
//! @{
//
//*****************************************************************************

//*****************************************************************************
//
// ${copyright}
//
// This is part of revision ${version} of the AmbiqSuite Development Package.
//
//*****************************************************************************

#ifndef AM_DEVICES_AMBT53_SCPM_H
#define AM_DEVICES_AMBT53_SCPM_H

#ifdef __cplusplus
extern "C"
{
#endif

#include "am_util.h"
#include "am_mcu_apollo.h"

//*****************************************************************************
//
// Macro definitions.
//
//*****************************************************************************
typedef void (*AM_DEVICES_AMBT53_SCPM_Handler)(void);

typedef void (*am_devices_ambt53_handler)(void);

// Currently we don't have SCPM, thus disable these code
#define SCPM_IS_SUPPORTED   0
//*****************************************************************************
//! Maximum SCPM instance number.
//*****************************************************************************
#define AM_DEVICES_SCPM_MAX_DEVICE_NUM            1

//*****************************************************************************
//! @name SCPM I2C module definitions.
//! @{
//*****************************************************************************
#define SCPM_I2C_MODULE                       1
#define SCPM_I2C_FREQ                         AM_HAL_IOM_1MHZ
#define SCPM_I2C_SCL_PIN                      AM_BSP_GPIO_IOM1_SCL
#define SCPM_I2C_SDA_PIN                      AM_BSP_GPIO_IOM1_SDA
#define AM_DEVICES_SCPM_SLAVE_ADDR            0x08 //Depends on TRIMS_I2C_ADDR

#define AMBT53_SYS_IRQ_PIN                    80
#define AMBT53_32K_CLK_PIN                    64
#define AMBT53_SYS_IRQn                       GPIO0_405F_IRQn
#define ambt53_sys_irq_isr                    am_gpio0_405f_isr

#define SCPM_I2C_MAX_RETRY_CNT                3
//! @}
// ********************************SCPM********************************

//! @defgroup SCPM SCPM
//! @{

#define REG_SCPM_BASE_ADDR                             0x03000000
// All I2C accesses are treated at 32-bit word accesses.
// MCU should use the lower 16 LSBs for register addressing shifted to the right by 2 (because of word accesses)
// For example: to address register at 0x0300_0A54 I2C driver should use the following register address value in the I2C command
// (0x0A54 >>2) = 0x295
#define SCPM_I2C_ADDR(addr)                    (((addr - REG_SCPM_BASE_ADDR) >> 2) & 0xFFFF)

// SCPM Wireless Coexistence Interface Selection Registers
#define REG_SCPM_COEX_COUNT    (1)
#define SCPM_COEX_WCICFG_ADDR  (REG_SCPM_BASE_ADDR + 0x23C)
#define SCPM_COEX_WCICFG_MASK  ((uint32_t)0x00000003)
#define SCPM_COEX_WCICFG_RESET 0x00000000

// SCPM PLL Control Registers
#define REG_SCPM_PLL_COUNT (4)

#define SCPM_PLLCTL0_ADDR  (REG_SCPM_BASE_ADDR + 0x240)
#define SCPM_PLLCTL0_MASK  ((uint32_t)0x8000011F)
#define SCPM_PLLCTL0_RESET 0x00000000

#define SCPM_PLLDIV0_ADDR  (REG_SCPM_BASE_ADDR + 0x244)
#define SCPM_PLLDIV0_MASK  ((uint32_t)0x00FFFFFF)
#define SCPM_PLLDIV0_RESET 0x00000000

#define SCPM_PLLDIV1_ADDR  (REG_SCPM_BASE_ADDR + 0x248)
#define SCPM_PLLDIV1_MASK  ((uint32_t)0x07FF773F)
#define SCPM_PLLDIV1_RESET 0x00000000

#define SCPM_PLLSTAT_ADDR  (REG_SCPM_BASE_ADDR + 0x24C)
#define SCPM_PLLSTAT_MASK  ((uint32_t)0x400000000)
#define SCPM_PLLSTAT_RESET 0x00000000

// SCPM Clock Gate Registers
#define REG_SCPM_CG_COUNT (3)

#define SCPM_CG_AHBFABCG_ADDR  (REG_SCPM_BASE_ADDR + 0x250)
#define SCPM_CG_AHBFABCG_MASK  ((uint32_t)0x000000FF)
#define SCPM_CG_AHBFABCG_RESET 0x00000000

#define SCPM_CG_APBCG_ADDR  (REG_SCPM_BASE_ADDR + 0x254)
#define SCPM_CG_APBCG_MASK  ((uint32_t)0x0000000F)
#define SCPM_CG_APBCG_RESET 0x00000000

#define SCPM_CG_TDMCG_ADDR  (REG_SCPM_BASE_ADDR + 0x258)
#define SCPM_CG_TDMCG_MASK  ((uint32_t)0x000000003)
#define SCPM_CG_TDMCG_RESET 0x00000000

// SCPM Clock (SCLK) Control Registers
#define REG_SCPM_SCLK_COUNT (4)

#define SCPM_CLKCTL0_ADDR  (REG_SCPM_BASE_ADDR + 0x25C)
#define SCPM_CLKCTL0_MASK  ((uint32_t)0x00000F37)
#define SCPM_CLKCTL0_RESET 0x00000000

#define SCPM_CLKCTL1_ADDR  (REG_SCPM_BASE_ADDR + 0x260)
#define SCPM_CLKCTL1_MASK  ((uint32_t)0x3FFCC773)
#define SCPM_CLKCTL1_RESET 0x00000000

#define SCPM_CLKCTL2_ADDR  (REG_SCPM_BASE_ADDR + 0x264)
#define SCPM_CLKCTL2_MASK  ((uint32_t)0x00FFFFFF)
#define SCPM_CLKCTL2_RESET 0x00000000

#define SCPM_CLKDIS_ADDR (REG_SCPM_BASE_ADDR + 0x268)
#define SCPM_CLKDIS_MASK ((uint32_t)0x00000000)
#define SCPM_CLKDISRESET 0x00000000

// SCPM ANALOG Control Registers
#define REG_SCPM_ANA_CTL_COUNT (2)

#define SCPM_ANA_CTL_HFRC2CTL_ADDR  (REG_SCPM_BASE_ADDR + 0x270)
#define SCPM_ANA_CTL_HFRC2CTL_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_ANA_CTL_HFRC2CTL_RESET 0x00000000

#define SCPM_ANA_CTL_STATUS_ADDR  (REG_SCPM_BASE_ADDR + 0x274)
#define SCPM_ANA_CTL_STATUS_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_ANA_CTL_STATUS_RESET 0x00000000

// SCPM Power Control Registers
#define REG_SCPM_PWR_CTL_COUNT          (26)
#define SCPM_PWR_CTL_SIMOBUCKPWR_ADDR   (REG_SCPM_BASE_ADDR + 0x2C0)
#define SCPM_PWR_CTL_SIMOBUCKPWR_MASK   ((uint32_t)0x00FFFFFF)
#define SCPM_PWR_CTL_SIMOBUCKPWR_SRESET 0x00000000

#define SCPM_PWR_CTL_ALLPWREN_ADDR   (REG_SCPM_BASE_ADDR + 0x2C4)
#define SCPM_PWR_CTL_ALLPWREN_MASK   ((uint32_t)0xFFFFFFFF)
#define SCPM_PWR_CTL_ALLPWREN_SRESET 0x00000000

#define SCPM_PWR_CTL_ALLPWRSTATUS_ADDR   (REG_SCPM_BASE_ADDR + 0x2C8)
#define SCPM_PWR_CTL_ALLPWRSTATUS_MASK   ((uint32_t)0x003FFFFF)
#define SCPM_PWR_CTL_ALLPWRSTATUS_SRESET 0x000000c

#define SCPM_PWR_CTL_SSRAMPWREN_ADDR   (REG_SCPM_BASE_ADDR + 0x2CC)
#define SCPM_PWR_CTL_SSRAMPWREN_MASK   ((uint32_t)0x0000000F)
#define SCPM_PWR_CTL_SSRAMPWREN_SRESET 0x00000000

#define SCPM_PWR_CTL_SSRAMPWRSTATUS_ADDR   (REG_SCPM_BASE_ADDR + 0x2D0)
#define SCPM_PWR_CTL_SSRAMPWRSTATUS_MASK   ((uint32_t)0x0000000F)
#define SCPM_PWR_CTL_SSRAMPWRSTATUS_SRESET 0x00000000

#define SCPM_PWR_CTL_SSRAMRETCFG_ADDR   (REG_SCPM_BASE_ADDR + 0x2D4)
#define SCPM_PWR_CTL_SSRAMRETCFG_MASK   ((uint32_t)0x0000000F)
#define SCPM_PWR_CTL_SSRAMRETCFG_SRESET 0x00000000

#define SCPM_PWR_CTL_DSPMEMRETCFG_ADDR   (REG_SCPM_BASE_ADDR + 0x2D8)
#define SCPM_PWR_CTL_DSPMEMRETCFG_MASK   ((uint32_t)0x0000001F)
#define SCPM_PWR_CTL_DSPMEMRETCFG_SRESET 0x00000000

#define SCPM_PWR_CTL_DSPPERFREQ_ADDR   (REG_SCPM_BASE_ADDR + 0x2E0)
#define SCPM_PWR_CTL_DSPPERFREQ_MASK   ((uint32_t)0x0001FFFF)
#define SCPM_PWR_CTL_DSPPERFREQ_SRESET 0x00000000

#define SCPM_PWR_CTL_DSPTCMDLY_ADDR   (REG_SCPM_BASE_ADDR + 0x2E4)
#define SCPM_PWR_CTL_DSPTCMDLY_MASK   ((uint32_t)0x0000FFFF)
#define SCPM_PWR_CTL_DSPTCMDLY_SRESET 0x00000000

#define SCPM_PWR_CTL_DSPCACHEDLY_ADDR   (REG_SCPM_BASE_ADDR + 0x2E8)
#define SCPM_PWR_CTL_DSPCACHEDLY_MASK   ((uint32_t)0x0000FFFF)
#define SCPM_PWR_CTL_DSPCACHEDLY_SRESET 0x00000000

#define SCPM_PWR_CTL_BASSRAMDLY_ADDR   (REG_SCPM_BASE_ADDR + 0x2EC)
#define SCPM_PWR_CTL_BASSRAMDLY_MASK   ((uint32_t)0x0000FFFF)
#define SCPM_PWR_CTL_BASSRAMDLY_SRESET 0x00000000

#define SCPM_PWR_CTL_BASOTPDLY_ADDR   (REG_SCPM_BASE_ADDR + 0x2F0)
#define SCPM_PWR_CTL_BASOTPDLY_MASK   ((uint32_t)0x0003FFFF)
#define SCPM_PWR_CTL_BASOTPDLY_SRESET 0x00000000

#define SCPM_PWR_CTL_AONDLY_ADDR   (REG_SCPM_BASE_ADDR + 0x2F4)
#define SCPM_PWR_CTL_AONDLY_MASK   ((uint32_t)0xFFFFFFFF)
#define SCPM_PWR_CTL_AONDLY_SRESET 0x00000000

#define SCPM_PWR_CTL_AOHDLY_ADDR   (REG_SCPM_BASE_ADDR + 0x2F8)
#define SCPM_PWR_CTL_AOHDLY_MASK   ((uint32_t)0x0000FFFF)
#define SCPM_PWR_CTL_AOHDLY_SRESET 0x00000000

#define SCPM_PWR_CTL_DBGDLY_ADDR   (REG_SCPM_BASE_ADDR + 0x2FC)
#define SCPM_PWR_CTL_DBGDLY_MASK   ((uint32_t)0x0003FFFF)
#define SCPM_PWR_CTL_DBGDLY_SRESET 0x00000000

#define SCPM_PWR_CTL_AUDDDLY_ADDR   (REG_SCPM_BASE_ADDR + 0x300)
#define SCPM_PWR_CTL_AUDDDLY_MASK   ((uint32_t)0x0003FFFF)
#define SCPM_PWR_CTL_AUDDDLY_SRESET 0x00000000

#define SCPM_PWR_CTL_AUDHPDLY_ADDR   (REG_SCPM_BASE_ADDR + 0x304)
#define SCPM_PWR_CTL_AUDHPDLY_MASK   ((uint32_t)0x0003FFFF)
#define SCPM_PWR_CTL_AUDHPDLY_SRESET 0x00000000

#define SCPM_PWR_CTL_BASLDLY_ADDR   (REG_SCPM_BASE_ADDR + 0x308)
#define SCPM_PWR_CTL_BASLDLY_MASK   ((uint32_t)0x0003FFFF)
#define SCPM_PWR_CTL_BASLDLY_SRESET 0x00000000

#define SCPM_PWR_CTL_DSPEXMDLY_ADDR   (REG_SCPM_BASE_ADDR + 0x31C)
#define SCPM_PWR_CTL_DSPEXMDLY_MASK   ((uint32_t)0x0000FFFF)
#define SCPM_PWR_CTL_DSPEXMDLY_SRESET 0x00000000

#define SCPM_PWR_CTL_RFEXTDLY_ADDR   (REG_SCPM_BASE_ADDR + 0x320)
#define SCPM_PWR_CTL_RFEXTDLY_MASK   ((uint32_t)0x0003FFFF)
#define SCPM_PWR_CTL_RFEXTDLY_SRESET 0x00000000

#define SCPM_PWR_CTL_VDDSPLLDLY_ADDR   (REG_SCPM_BASE_ADDR + 0x324)
#define SCPM_PWR_CTL_VDDSPLLDLY_MASK   ((uint32_t)0x0003FFFF)
#define SCPM_PWR_CTL_VDDSPLLDLY_SRESET 0x00000000

#define SCPM_PWR_CTL_PWRACKOVR_ADDR   (REG_SCPM_BASE_ADDR + 0x328)
#define SCPM_PWR_CTL_PWRACKOVR_MASK   ((uint32_t)0x0001FFFF)
#define SCPM_PWR_CTL_PWRACKOVR_SRESET 0x00000000

#define SCPM_PWR_CTL_DIGPWRSWOVRD1_ADDR   (REG_SCPM_BASE_ADDR + 0x32C)
#define SCPM_PWR_CTL_DIGPWRSWOVRD1_MASK   ((uint32_t)0x00007FFF)
#define SCPM_PWR_CTL_DIGPWRSWOVRD1_SRESET 0x00000000

#define SCPM_PWR_CTL_DIGPWRSWOVRD2_ADDR   (REG_SCPM_BASE_ADDR + 0x330)
#define SCPM_PWR_CTL_DIGPWRSWOVRD2_MASK   ((uint32_t)0xFFFFFFFF)
#define SCPM_PWR_CTL_DIGPWRSWOVRD2_SRESET 0x00000000

#define SCPM_PWR_CTL_DIGPWRSWOVRD3_ADDR   (REG_SCPM_BASE_ADDR + 0x334)
#define SCPM_PWR_CTL_DIGPWRSWOVRD3_MASK   ((uint32_t)0x00007FFF)
#define SCPM_PWR_CTL_DIGPWRSWOVRD3_SRESET 0x00000000

#define SCPM_PWR_CTL_ANAPWRSWCTL_ADDR   (REG_SCPM_BASE_ADDR + 0x338)
#define SCPM_PWR_CTL_ANAPWRSWCTL_MASK   ((uint32_t)0x0000FFFF)
#define SCPM_PWR_CTL_ANAPWRSWCTL_SRESET 0x00000000

// SCPM Test Mode Registers
#define REG_SCPM_TEST_COUNT             (6)
#define SCPM_TESTMODE_TESTMODECTL_ADDR  (REG_SCPM_BASE_ADDR + 0x344)
#define SCPM_TESTMODE_TESTMODECTL_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_TESTMODE_TESTMODECTL_RESET 0x00000000

#define SCPM_TESTMODE_ANALOG0_ADDR  (REG_SCPM_BASE_ADDR + 0x348)
#define SCPM_TESTMODE_ANALOG0_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_TESTMODE_ANALOG0_RESET 0x00000000

#define SCPM_TESTMODE_ANALOG1_ADDR  (REG_SCPM_BASE_ADDR + 0x34C)
#define SCPM_TESTMODE_ANALOG1_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_TESTMODE_ANALOG1_RESET 0x00000000

#define SCPM_TESTMODE_CODEC0_ADDR  (REG_SCPM_BASE_ADDR + 0x350)
#define SCPM_TESTMODE_CODEC0_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_TESTMODE_CODEC0_RESET 0x00000000

#define SCPM_TESTMODE_CODEC1_ADDR  (REG_SCPM_BASE_ADDR + 0x354)
#define SCPM_TESTMODE_CODEC1_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_TESTMODE_CODEC1_RESET 0x00000000

#define SCPM_TESTMODE_OBSBUSMUXCTL_ADDR  (REG_SCPM_BASE_ADDR + 0x358)
#define SCPM_TESTMODE_OBSBUSMUXCTL_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_TESTMODE_OBSBUSMUXCTL_RESET 0x00000000

// SCPM Registers
#define REG_SCPM_REG_COUNT (7)
#define SCPM_SWRESET_ADDR  (REG_SCPM_BASE_ADDR + 0x400)
#define SCPM_SWRESET_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_SWRESET_RESET 0x00000000

#define SCPM_RSTGENCTL_ADDR  (REG_SCPM_BASE_ADDR + 0x420)
#define SCPM_RSTGENCTL_MASK  ((uint32_t)0x0000FFFF)
#define SCPM_RSTGENCTL_RESET 0x00000F0F

#define SCPM_RSTGENFORCECTL_ADDR  (REG_SCPM_BASE_ADDR + 0x424)
#define SCPM_RSTGENFORCECTL_MASK  ((uint32_t)0x0000007F)
#define SCPM_RSTGENFORCECTL_RESET 0x00000000

#define SCPM_I2CSTAT_ADDR  (REG_SCPM_BASE_ADDR + 0x428)
#define SCPM_I2CSTAT_MASK  ((uint32_t)0x07FFFF00)
#define SCPM_I2CSTAT_RESET 0x00000000

#define SCPM_SCPMCLKCTL_ADDR  (REG_SCPM_BASE_ADDR + 0x42C)
#define SCPM_SCPMCLKCTL_MASK  ((uint32_t)0x00000FFF)
#define SCPM_SCPMCLKCTL_RESET 0x00000000

#define SCPM_SCPMOTPMUXCTL_ADDR  (REG_SCPM_BASE_ADDR + 0x430)
#define SCPM_SCPMOTPMUXCTL_MASK  ((uint32_t)0x00000001)
#define SCPM_SCPMOTPMUXCTL_RESET 0x00000000

#define SCPM_SWRESETBLKS_ADDR  (REG_SCPM_BASE_ADDR + 0x434)
#define SCPM_SWRESETBLKS_MASK  ((uint32_t)0x003FFFFF)
#define SCPM_SWRESETBLKS_RESET 0x00000000

// SCPM DSP Registers
#define REG_SCPM_DSP_CTL_COUNT (10)

#define SCPM_DSP_DSPBOOTSTRAP_ADDR      (REG_SCPM_BASE_ADDR + 0x450)
#define SCPM_DSP_DSPBOOTSTRAP_MASK      ((uint32_t)0x00000003)
#define SCPM_DSP_SCPMDSPBOOTSTRAP_RESET 0x00000000

#define SCPM_DSP_DSPEVECTOR_ADDR  (REG_SCPM_BASE_ADDR + 0x454)
#define SCPM_DSP_DSPEVECTOR_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_DSP_DSPEVECTOR_RESET 0x00000000

#define SCPM_DSP_SCPMDSPSTAT_ADDR  (REG_SCPM_BASE_ADDR + 0x458)
#define SCPM_DSP_SCPMDSPSTAT_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_DSP_SCPMDSPSTAT_RESET 0x000000C6

#define SCPM_DSP_SCPMDSPTEST_ADDR  (REG_SCPM_BASE_ADDR + 0x45C)
#define SCPM_DSP_SCPMDSPTEST_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_DSP_SCPMDSPTEST_RESET 0x00000000

#define SCPM_DSP_SCPMDSPCXGPOUT_ADDR  (REG_SCPM_BASE_ADDR + 0x460)
#define SCPM_DSP_SCPMDSPCXGPOUT_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_DSP_SCPMDSPCXGPOUT_RESET 0x00000000

#define SCPM_DSP_SCPMDSPCTL1_ADDR  (REG_SCPM_BASE_ADDR + 0x464)
#define SCPM_DSP_SCPMDSPCTL1_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_DSP_SCPMDSPCTL1_RESET 0x00000040

#define SCPM_DSP_SCPMDSPCTL2_ADDR  (REG_SCPM_BASE_ADDR + 0x468)
#define SCPM_DSP_SCPMDSPCTL2_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_DSP_SCPMDSPCTL2_RESET 0x00000000

#define SCPM_DSP_SCPMDSPGPINSYS_ADDR  (REG_SCPM_BASE_ADDR + 0x46C)
#define SCPM_DSP_SCPMDSPGPINSYS_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_DSP_SCPMDSPGPINSYS_RESET 0x00000000

#define SCPM_DSP_SCPMDSPGPIN_ADDR  (REG_SCPM_BASE_ADDR + 0x470)
#define SCPM_DSP_SCPMDSPGPIN_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_DSP_SCPMDSPGPIN_RESET 0x00000000

#define SCPM_DSP_SCPMDSPCXGPDIR_ADDR  (REG_SCPM_BASE_ADDR + 0x474)
#define SCPM_DSP_SCPMDSPCXGPDIR_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_DSP_SCPMDSPCXGPDIR_RESET 0x00000000

// SCPM BTDM Control Registers
#define REG_SCPM_BTDM_CTL_COUNT (3)

#define SCPM_BTDM_BTDMCTL0_ADDR  (REG_SCPM_BASE_ADDR + 0x4A0)
#define SCPM_BTDM_BTDMCTL0_MASK  ((uint32_t)0xFFFFFC00)
#define SCPM_BTDM_BTDMCTL0_RESET 0x01000000

#define SCPM_BTDM_BTDMCTL1_ADDR  (REG_SCPM_BASE_ADDR + 0x4A4)
#define SCPM_BTDM_BTDMCTL1_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_BTDM_BTDMCTL1_RESET 0x00000000

#define SCPM_BTDM_BTDMSTATUS_ADDR  (REG_SCPM_BASE_ADDR + 0x4A8)
#define SCPM_BTDM_BTDMSTATUS_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_BTDM_BTDMSTATUS_RESET 0x00000000

// SCPM Memory Control Registers TODO
// 6E0
#define REG_SCPM_MEM_CTL_COUNT      (6)
#define SCPM_MEMC_SSRAMTCTL01_ADDR  (REG_SCPM_BASE_ADDR + 0x6E0)
#define SCPM_MEMC_SSRAMTCTL01_MASK  ((uint32_t)0x3FFF3FFF)
#define SCPM_MEMC_SSRAMTCTL01_RESET 0x003F003F

#define SCPM_MEMC_SSRAMTCTL32_ADDR  (REG_SCPM_BASE_ADDR + 0x6E4)
#define SCPM_MEMC_SSRAMTCTL32_MASK  ((uint32_t)0x3FFF3FFF)
#define SCPM_MEMC_SSRAMTCTL32_RESET 0x003F003F

#define SCPM_MEMC_IDTCMTCTL_ADDR  (REG_SCPM_BASE_ADDR + 0x6E8)
#define SCPM_MEMC_IDTCMTCTL_MASK  ((uint32_t)0x3FFF3FFF)
#define SCPM_MEMC_IDTCMTCTL_RESET 0x003F003F

#define SCPM_MEMC_IDCACHTCTL_ADDR  (REG_SCPM_BASE_ADDR + 0x6EC)
#define SCPM_MEMC_IDCACHTCTL_MASK  ((uint32_t)0x3FFF3FFF)
#define SCPM_MEMC_IDCACHTCTL_RESET 0x003F003F

#define SCPM_MEMC_IDTAGTCTL_ADDR  (REG_SCPM_BASE_ADDR + 0x6F0)
#define SCPM_MEMC_IDTAGTCTL_MASK  ((uint32_t)0x0FFF0FFF)
#define SCPM_MEMC_IDTAGTCTL_RESET 0x003F003F

#define SCPM_MEMC_BTBEXMTCTL_ADDR  (REG_SCPM_BASE_ADDR + 0x6F4)
#define SCPM_MEMC_BTBEXMTCTL_MASK  ((uint32_t)0x3FFF0FFF)
#define SCPM_MEMC_BTBEXMTCTL_RESET 0x003F003F

// SCPM AHB Fabric Control Registers
#define REG_SCPM_AHB_FAB_COUNT (9)

#define SCPM_AHB_FAB_SRAMB0A_ADDR  (REG_SCPM_BASE_ADDR + 0x680)
#define SCPM_AHB_FAB_SRAMB0A_MASK  ((uint32_t)0x1FFE0FFF)
#define SCPM_AHB_FAB_SRAMB0A_RESET 0x00000000

#define SCPM_AHB_FAB_SRAMB0B_ADDR  (REG_SCPM_BASE_ADDR + 0x684)
#define SCPM_AHB_FAB_SRAMB0B_MASK  ((uint32_t)0x0FFF0007)
#define SCPM_AHB_FAB_SRAMB0B_RESET 0x00000000

#define SCPM_AHB_FAB_SRAMB1A_ADDR  (REG_SCPM_BASE_ADDR + 0x688)
#define SCPM_AHB_FAB_SRAMB1A_MASK  ((uint32_t)0x1FFE0FFF)
#define SCPM_AHB_FAB_SRAMB1A_RESET 0x00000000

#define SCPM_AHB_FAB_SRAMB1B_ADDR  (REG_SCPM_BASE_ADDR + 0x68C)
#define SCPM_AHB_FAB_SRAMB1B_MASK  ((uint32_t)0x0FFF0007)
#define SCPM_AHB_FAB_SRAMB1B_RESET 0x00000000

#define SCPM_AHB_FAB_SRAMB2A_ADDR  (REG_SCPM_BASE_ADDR + 0x690)
#define SCPM_AHB_FAB_SRAMB2A_MASK  ((uint32_t)0x1FFE0FFF)
#define SCPM_AHB_FAB_SRAMB2A_RESET 0x00000000

#define SCPM_AHB_FAB_SRAMB2B_ADDR  (REG_SCPM_BASE_ADDR + 0x694)
#define SCPM_AHB_FAB_SRAMB2B_MASK  ((uint32_t)0x0FFF0007)
#define SCPM_AHB_FAB_SRAMB2B_RESET 0x00000000

#define SCPM_AHB_FAB_SRAMB3A_ADDR  (REG_SCPM_BASE_ADDR + 0x698)
#define SCPM_AHB_FAB_SRAMB3A_MASK  ((uint32_t)0x1FFE0FFF)
#define SCPM_AHB_FAB_SRAMB3A_RESET 0x00000000

#define SCPM_AHB_FAB_SRAMB3B_ADDR  (REG_SCPM_BASE_ADDR + 0x69C)
#define SCPM_AHB_FAB_SRAMB3B_MASK  ((uint32_t)0x0FFF0007)
#define SCPM_AHB_FAB_SRAMB3B_RESET 0x00000000

#define SCPM_AHB_FAB_ARBFPACTL_ADDR  (REG_SCPM_BASE_ADDR + 0x6A0)
#define SCPM_AHB_FAB_ARBFPACTL_MASK  ((uint32_t)0x00000001)
#define SCPM_AHB_FAB_ARBFPACTL_RESET 0x00000000
// SCPM OTP Registers TODO

// SCPM PAD Control Registers
#define REG_SCPM_PAD_CTL_COUNT (8)

#define SCPM_PAD_CTL_JTAGPADCTL_ADDR  (REG_SCPM_BASE_ADDR + 0x478)
#define SCPM_PAD_CTL_JTAGPADCTL_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_PAD_CTL_JTAGPADCTL_RESET 0x01010101

#define SCPM_PAD_CTL_XSPIPADCTL0_ADDR  (REG_SCPM_BASE_ADDR + 0x47C)
#define SCPM_PAD_CTL_XSPIPADCTL0_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_PAD_CTL_XSPIPADCTL0_RESET 0x01010101

#define SCPM_PAD_CTL_XSPIPADCTL1_ADDR  (REG_SCPM_BASE_ADDR + 0x480)
#define SCPM_PAD_CTL_XSPIPADCTL1_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_PAD_CTL_XSPIPADCTL1_RESET 0x01010101

#define SCPM_PAD_CTL_XSPIPADCTL2_ADDR  (REG_SCPM_BASE_ADDR + 0x484)
#define SCPM_PAD_CTL_XSPIPADCTL2_MASK  ((uint32_t)0x00FFFFFF)
#define SCPM_PAD_CTL_XSPIPADCTL2_RESET 0x00010101

#define SCPM_PAD_CTL_I2SPADCTL_ADDR  (REG_SCPM_BASE_ADDR + 0x488)
#define SCPM_PAD_CTL_I2SPADCTL_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_PAD_CTL_I2SPADCTL_RESET 0x01010101

#define SCPM_PAD_CTL_I2CPADCTL_ADDR  (REG_SCPM_BASE_ADDR + 0x48C)
#define SCPM_PAD_CTL_I2CPADCTL_MASK  ((uint32_t)0x0000FFFF)
#define SCPM_PAD_CTL_I2CPADCTL_RESET 0x0000C2C2

#define SCPM_PAD_CTL_CLKPADCTL_ADDR  (REG_SCPM_BASE_ADDR + 0x490)
#define SCPM_PAD_CTL_CLKPADCTL_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_PAD_CTL_CLKPADCTL_RESET 0x00020202

#define SCPM_PAD_CTL_MISCPADCTL_ADDR  (REG_SCPM_BASE_ADDR + 0x494)
#define SCPM_PAD_CTL_MISCPADCTL_MASK  ((uint32_t)0x00FFFFFF)
#define SCPM_PAD_CTL_MISCPADCTL_RESET 0x00020200

// SCPM PSU Registers
#define REG_SCPM_PSU_COUNT     (16)
#define SCPM_PSU_VDDCCTL_ADDR  (REG_SCPM_BASE_ADDR + 0x278)
#define SCPM_PSU_VDDCCTL_MASK  ((uint32_t)0xC000FFFF)
#define SCPM_PSU_VDDCCTL_RESET 0x00000000

#define SCPM_PSU_VDDSCTL_ADDR  (REG_SCPM_BASE_ADDR + 0x27C)
#define SCPM_PSU_VDDSCTL_MASK  ((uint32_t)0xC000FFFF)
#define SCPM_PSU_VDDSCTL_RESET 0x00000000

#define SCPM_PSU_VDDLCTL_ADDR  (REG_SCPM_BASE_ADDR + 0x280)
#define SCPM_PSU_VDDLCTL_MASK  ((uint32_t)0xC000FFFF)
#define SCPM_PSU_VDDLCTL_RESET 0x00000000

#define SCPM_PSU_VDDRFCTL_ADDR  (REG_SCPM_BASE_ADDR + 0x284)
#define SCPM_PSU_VDDRFCTL_MASK  ((uint32_t)0xC000FFFF)
#define SCPM_PSU_VDDRFCTL_RESET 0x00000000

#define SCPM_PSU_VDDRFPALCTL_ADDR  (REG_SCPM_BASE_ADDR + 0x288)
#define SCPM_PSU_VDDRFPALCTL_MASK  ((uint32_t)0xC000FFFF)
#define SCPM_PSU_VDDRFPALCTL_RESET 0x00000000

#define SCPM_PSU_VDDRFPAHCTL_ADDR  (REG_SCPM_BASE_ADDR + 0x28C)
#define SCPM_PSU_VDDRFPAHCTL_MASK  ((uint32_t)0xC000FF0F)
#define SCPM_PSU_VDDRFPAHCTL_RESET 0x00000000

#define SCPM_PSU_VDDAUDACTL_ADDR  (REG_SCPM_BASE_ADDR + 0x290)
#define SCPM_PSU_VDDAUDACTL_MASK  ((uint32_t)0xC0003F3F)
#define SCPM_PSU_VDDAUDACTL_RESET 0x00000000

#define SCPM_PSU_VDDAUDHPCTL_ADDR  (REG_SCPM_BASE_ADDR + 0x294)
#define SCPM_PSU_VDDAUDHPCTL_MASK  ((uint32_t)0xC0003F3F)
#define SCPM_PSU_VDDAUDHPCTL_RESET 0x00000000

#define SCPM_PSU_VDDPHYCTL_ADDR  (REG_SCPM_BASE_ADDR + 0x298)
#define SCPM_PSU_VDDPHYCTL_MASK  ((uint32_t)0xC0003F3F)
#define SCPM_PSU_VDDPHYCTL_RESET 0x00000000

#define SCPM_PSU_VDDRFHCTL_ADDR  (REG_SCPM_BASE_ADDR + 0x29C)
#define SCPM_PSU_VDDRFHCTL_MASK  ((uint32_t)0xC0003F3F)
#define SCPM_PSU_VDDRFHCTL_RESET 0x00000000

#define SCPM_PSU_VUSBCTL_ADDR  (REG_SCPM_BASE_ADDR + 0x2A0)
#define SCPM_PSU_VUSBCTL_MASK  ((uint32_t)0xC0003F3F)
#define SCPM_PSU_VUSBCTL_RESET 0x00000000

#define SCPM_PSU_REFCTRIM_ADDR  (REG_SCPM_BASE_ADDR + 0x2A4)
#define SCPM_PSU_REFCTRIM_MASK  ((uint32_t)0x000F0F0F)
#define SCPM_PSU_REFCTRIM_RESET 0x00000000

#define SCPM_PSU_SIMOCTL_ADDR  (REG_SCPM_BASE_ADDR + 0x2A8)
#define SCPM_PSU_SIMOCTL_MASK  ((uint32_t)0x83FF0707)
#define SCPM_PSU_SIMOCTL_RESET 0x00000000

#define SCPM_PSU_VDDAONCTL_ADDR  (REG_SCPM_BASE_ADDR + 0x2AC)
#define SCPM_PSU_VDDAONCTL_MASK  ((uint32_t)0xC000FF3F)
#define SCPM_PSU_VDDAONCTL_RESET 0x00000000

#define SCPM_PSU_PSUSTATUS_ADDR  (REG_SCPM_BASE_ADDR + 0x2B0)
#define SCPM_PSU_PSUSTATUS_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_PSU_PSUSTATUS_RESET 0x02000000

#define SCPM_PSU_PSUTEST_ADDR  (REG_SCPM_BASE_ADDR + 0x2B4)
#define SCPM_PSU_PSUTEST_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_PSU_PSUTEST_RESET 0x00000000

// SCPM IRQ Control Registers TODO
#define REG_SCPM_IRQ_CTRL_BASE_ADDR 0x03000000

#define REG_SCPM_IRQ_CTRL_COUNT 43

// MCU Interrupts 31-0 : ENABLE
#define SCPM_IRQ_CTRL_MCUINTRPT0EN_ADDR  (REG_SCPM_IRQ_CTRL_BASE_ADDR + 0x700)
#define SCPM_IRQ_CTRL_MCUINTRPT0EN_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_IRQ_CTRL_MCUINTRPT0EN_RESET 0x00000000

// MCU Interrupts 31-0 : STATUS
// Note that the interrupt status bits are edge triggered. WARNING: if a status
// bit is cleared while the combination of polarity and input are still asserted
// then this bit will not set again.
#define SCPM_IRQ_CTRL_MCUINTRPT0STAT_ADDR  (REG_SCPM_IRQ_CTRL_BASE_ADDR + 0x704)
#define SCPM_IRQ_CTRL_MCUINTRPT0STAT_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_IRQ_CTRL_MCUINTRPT0STAT_RESET 0x00000000

// MCU Interrupts 31-0 : CLEAR
#define SCPM_IRQ_CTRL_MCUINTRPT0CLR_ADDR  (REG_SCPM_IRQ_CTRL_BASE_ADDR + 0x708)
#define SCPM_IRQ_CTRL_MCUINTRPT0CLR_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_IRQ_CTRL_MCUINTRPT0CLR_RESET 0x00000000

// MCU Interrupts 31-0 : SET
#define SCPM_IRQ_CTRL_MCUINTRPT0SET_ADDR  (REG_SCPM_IRQ_CTRL_BASE_ADDR + 0x70C)
#define SCPM_IRQ_CTRL_MCUINTRPT0SET_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_IRQ_CTRL_MCUINTRPT0SET_RESET 0x00000000

// MCU Interrupts 63-32 : ENABLE
#define SCPM_IRQ_CTRL_MCUINTRPT1EN_ADDR  (REG_SCPM_IRQ_CTRL_BASE_ADDR + 0x710)
#define SCPM_IRQ_CTRL_MCUINTRPT1EN_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_IRQ_CTRL_MCUINTRPT1EN_RESET 0x00000000

// MCU Interrupts 63-32 : STATUS
// Note that the interrupt status bits are edge triggered. WARNING: if a status
// bit is cleared while the combination of polarity and input are still asserted
// then this bit will not set again.
#define SCPM_IRQ_CTRL_MCUINTRPT1STAT_ADDR  (REG_SCPM_IRQ_CTRL_BASE_ADDR + 0x714)
#define SCPM_IRQ_CTRL_MCUINTRPT1STAT_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_IRQ_CTRL_MCUINTRPT1STAT_RESET 0x00000000

// MCU Interrupts 63-32 : CLEAR
#define SCPM_IRQ_CTRL_MCUINTRPT1CLR_ADDR  (REG_SCPM_IRQ_CTRL_BASE_ADDR + 0x718)
#define SCPM_IRQ_CTRL_MCUINTRPT1CLR_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_IRQ_CTRL_MCUINTRPT1CLR_RESET 0x00000000

// MCU Interrupts 63-32 : SET
#define SCPM_IRQ_CTRL_MCUINTRPT1SET_ADDR  (REG_SCPM_IRQ_CTRL_BASE_ADDR + 0x71C)
#define SCPM_IRQ_CTRL_MCUINTRPT1SET_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_IRQ_CTRL_MCUINTRPT1SET_RESET 0x00000000

// DSP Interrupts 31-0 : ENABLE
#define SCPM_IRQ_CTRL_DSPINTRPT0EN_ADDR  (REG_SCPM_IRQ_CTRL_BASE_ADDR + 0x720)
#define SCPM_IRQ_CTRL_DSPINTRPT0EN_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_IRQ_CTRL_DSPINTRPT0EN_RESET 0x00000000

// DSP Interrupts 31-0 : STATUS
// Note that the interrupt status bits are edge triggered. WARNING: if a status
// bit is cleared while the combination of polarity and input are still asserted
// then this bit will not set again
#define SCPM_IRQ_CTRL_DSPINTRPT0STAT_ADDR  (REG_SCPM_IRQ_CTRL_BASE_ADDR + 0x724)
#define SCPM_IRQ_CTRL_DSPINTRPT0STAT_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_IRQ_CTRL_DSPINTRPT0STAT_RESET 0x00000000

// DSP Interrupts 31-0 : CLEAR
#define SCPM_IRQ_CTRL_DSPINTRPT0CLR_ADDR  (REG_SCPM_IRQ_CTRL_BASE_ADDR + 0x728)
#define SCPM_IRQ_CTRL_DSPINTRPT0CLR_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_IRQ_CTRL_DSPINTRPT0CLR_RESET 0x00000000

// DSP Interrupts 31-0 : SET
#define SCPM_IRQ_CTRL_DSPINTRPT0SET_ADDR  (REG_SCPM_IRQ_CTRL_BASE_ADDR + 0x72C)
#define SCPM_IRQ_CTRL_DSPINTRPT0SET_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_IRQ_CTRL_DSPINTRPT0SET_RESET 0x00000000

// DSP Interrupts 63-32 : ENABLE
#define SCPM_IRQ_CTRL_DSPINTRPT1EN_ADDR  (REG_SCPM_IRQ_CTRL_BASE_ADDR + 0x730)
#define SCPM_IRQ_CTRL_DSPINTRPT1EN_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_IRQ_CTRL_DSPINTRPT1EN_RESET 0x00000000

// DSP Interrupts 63-32 : STATUS
#define SCPM_IRQ_CTRL_DSPINTRPT1STAT_ADDR  (REG_SCPM_IRQ_CTRL_BASE_ADDR + 0x734)
#define SCPM_IRQ_CTRL_DSPINTRPT1STAT_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_IRQ_CTRL_DSPINTRPT1STAT_RESET 0x00000000

// DSP Interrupts 63-32 : CLEAR
#define SCPM_IRQ_CTRL_DSPINTRPT1CLR_ADDR  (REG_SCPM_IRQ_CTRL_BASE_ADDR + 0x738)
#define SCPM_IRQ_CTRL_DSPINTRPT1CLR_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_IRQ_CTRL_DSPINTRPT1CLR_RESET 0x00000000

// DSP Interrupts 63-32 : SET
#define SCPM_IRQ_CTRL_DSPINTRPT1SET_ADDR  (REG_SCPM_IRQ_CTRL_BASE_ADDR + 0x73C)
#define SCPM_IRQ_CTRL_DSPINTRPT1SET_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_IRQ_CTRL_DSPINTRPT1SET_RESET 0x00000000

// MCU INTRPT MASK 0 for INTRPT (31-0)
#define SCPM_IRQ_CTRL_MCUINTRPTMASK0_ADDR  (REG_SCPM_IRQ_CTRL_BASE_ADDR + 0x740)
#define SCPM_IRQ_CTRL_MCUINTRPTMASK0_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_IRQ_CTRL_MCUINTRPTMASK0_RESET 0xFFFFFFFF

// MCU INTRPT MASK 1 for INTRPT (63-32)
#define SCPM_IRQ_CTRL_MCUINTRPTMASK1_ADDR  (REG_SCPM_IRQ_CTRL_BASE_ADDR + 0x744)
#define SCPM_IRQ_CTRL_MCUINTRPTMASK1_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_IRQ_CTRL_MCUINTRPTMASK1_RESET 0xFFFFFFFF

// DSP INTRPT MASK 0 for INTRPT (31-0)
#define SCPM_IRQ_CTRL_DSPINTRPTMASK0_ADDR  (REG_SCPM_IRQ_CTRL_BASE_ADDR + 0x748)
#define SCPM_IRQ_CTRL_DSPINTRPTMASK0_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_IRQ_CTRL_DSPINTRPTMASK0_RESET 0xFFFFFFFF

// DSP INTRPT MASK 1 for INTRPT (63-32)
#define SCPM_IRQ_CTRL_DSPINTRPTMASK1_ADDR  (REG_SCPM_IRQ_CTRL_BASE_ADDR + 0x74C)
#define SCPM_IRQ_CTRL_DSPINTRPTMASK1_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_IRQ_CTRL_DSPINTRPTMASK1_RESET 0xFFFFFFFF

// MCU LVL INTRPT EN for GPIO (31-0)
#define SCPM_IRQ_CTRL_MCUEXTLVLINTEN0_ADDR  (REG_SCPM_IRQ_CTRL_BASE_ADDR + 0x750)
#define SCPM_IRQ_CTRL_MCUEXTLVLINTEN0_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_IRQ_CTRL_MCUEXTLVLINTEN0_RESET 0x00000000

// MCU LVL INTRPT Status for GPIO (31-0)
#define SCPM_IRQ_CTRL_MCUEXTLVLINTSTAT0_ADDR                                   \
    (REG_SCPM_IRQ_CTRL_BASE_ADDR + 0x754)
#define SCPM_IRQ_CTRL_MCUEXTLVLINTSTAT0_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_IRQ_CTRL_MCUEXTLVLINTSTAT0_RESET 0x00000000

// MCU LVL INTRPT Clear for GPIO (31-0)
#define SCPM_IRQ_CTRL_MCUEXTLVLINTCLR0_ADDR                                    \
    (REG_SCPM_IRQ_CTRL_BASE_ADDR + 0x758)
#define SCPM_IRQ_CTRL_MCUEXTLVLINTCLR0_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_IRQ_CTRL_MCUEXTLVLINTCLR0_RESET 0x00000000

// MCU LVL INTRPT Set for GPIO (31-0)
#define SCPM_IRQ_CTRL_MCUEXTLVLINTSET0_ADDR                                    \
    (REG_SCPM_IRQ_CTRL_BASE_ADDR + 0x75C)
#define SCPM_IRQ_CTRL_MCUEXTLVLINTSET0_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_IRQ_CTRL_MCUEXTLVLINTSET0_RESET 0x00000000

// MCU LVL INTRPT EN for GPIO (63-32)
#define SCPM_IRQ_CTRL_MCUEXTLVLINTEN1_ADDR  (REG_SCPM_IRQ_CTRL_BASE_ADDR + 0x760)
#define SCPM_IRQ_CTRL_MCUEXTLVLINTEN1_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_IRQ_CTRL_MCUEXTLVLINTEN1_RESET 0x00000000

// MCU LVL INTRPT Status for GPIO (63-32)
#define SCPM_IRQ_CTRL_MCUEXTLVLINTSTAT1_ADDR                                   \
    (REG_SCPM_IRQ_CTRL_BASE_ADDR + 0x764)
#define SCPM_IRQ_CTRL_MCUEXTLVLINTSTAT1_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_IRQ_CTRL_MCUEXTLVLINTSTAT1_RESET 0x00000000

// MCU LVL INTRPT Clear for GPIO (63-32)
#define SCPM_IRQ_CTRL_MCUEXTLVLINTCLR1_ADDR                                    \
    (REG_SCPM_IRQ_CTRL_BASE_ADDR + 0x768)
#define SCPM_IRQ_CTRL_MCUEXTLVLINTCLR1_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_IRQ_CTRL_MCUEXTLVLINTCLR1_RESET 0x00000000

// MCU LVL INTRPT Set for GPIO (63-32)
#define SCPM_IRQ_CTRL_MCUEXTLVLINTSET1_ADDR                                    \
    (REG_SCPM_IRQ_CTRL_BASE_ADDR + 0x76C)
#define SCPM_IRQ_CTRL_MCUEXTLVLINTSET1_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_IRQ_CTRL_MCUEXTLVLINTSET1_RESET 0x00000000

// DSP LVL INTRPT EN for GPIO (31-0)
#define SCPM_IRQ_CTRL_DSPEXTLVLINTEN0_ADDR  (REG_SCPM_IRQ_CTRL_BASE_ADDR + 0x770)
#define SCPM_IRQ_CTRL_DSPEXTLVLINTEN0_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_IRQ_CTRL_DSPEXTLVLINTEN0_RESET 0x00000000

// DSP LVL INTRPT Status for GPIO (31-0)
#define SCPM_IRQ_CTRL_DSPEXTLVLINTSTAT0_ADDR                                   \
    (REG_SCPM_IRQ_CTRL_BASE_ADDR + 0x774)
#define SCPM_IRQ_CTRL_DSPEXTLVLINTSTAT0_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_IRQ_CTRL_DSPEXTLVLINTSTAT0_RESET 0x00000000

// DSP LVL INTRPT Clear for GPIO (31-0)
#define SCPM_IRQ_CTRL_DSPEXTLVLINTCLR0_ADDR                                    \
    (REG_SCPM_IRQ_CTRL_BASE_ADDR + 0x778)
#define SCPM_IRQ_CTRL_DSPEXTLVLINTCLR0_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_IRQ_CTRL_DSPEXTLVLINTCLR0_RESET 0x00000000

// DSP LVL INTRPT Set for GPIO (31-0)
#define SCPM_IRQ_CTRL_DSPEXTLVLINTSET0_ADDR                                    \
    (REG_SCPM_IRQ_CTRL_BASE_ADDR + 0x77C)
#define SCPM_IRQ_CTRL_DSPEXTLVLINTSET0_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_IRQ_CTRL_DSPEXTLVLINTSET0_RESET 0x00000000

// DSP LVL INTRPT EN for GPIO (63-32)
#define SCPM_IRQ_CTRL_DSPEXTLVLINTEN1_ADDR  (REG_SCPM_IRQ_CTRL_BASE_ADDR + 0x780)
#define SCPM_IRQ_CTRL_DSPEXTLVLINTEN1_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_IRQ_CTRL_DSPEXTLVLINTEN1_RESET 0x00000000

// DSP LVL INTRPT Status for GPIO (63-32)
#define SCPM_IRQ_CTRL_DSPEXTLVLINTSTAT1_ADDR                                   \
    (REG_SCPM_IRQ_CTRL_BASE_ADDR + 0x784)
#define SCPM_IRQ_CTRL_DSPEXTLVLINTSTAT1_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_IRQ_CTRL_DSPEXTLVLINTSTAT1_RESET 0x00000000

// DSP LVL INTRPT Clear for GPIO (63-32)
#define SCPM_IRQ_CTRL_DSPEXTLVLINTCLR1_ADDR                                    \
    (REG_SCPM_IRQ_CTRL_BASE_ADDR + 0x788)
#define SCPM_IRQ_CTRL_DSPEXTLVLINTCLR1_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_IRQ_CTRL_DSPEXTLVLINTCLR1_RESET 0x00000000

// DSP LVL INTRPT Set for GPIO (63-32)
#define SCPM_IRQ_CTRL_DSPEXTLVLINTSET1_ADDR                                    \
    (REG_SCPM_IRQ_CTRL_BASE_ADDR + 0x78C)
#define SCPM_IRQ_CTRL_DSPEXTLVLINTSET1_MASK  ((uint32_t)0xFFFFFFFF)
#define SCPM_IRQ_CTRL_DSPEXTLVLINTSET1_RESET 0x00000000

// Interrupt Mode Select
#define SCPM_IRQ_CTRL_INTRPTMODESEL0_ADDR  (REG_SCPM_IRQ_CTRL_BASE_ADDR + 0x790)
#define SCPM_IRQ_CTRL_INTRPTMODESEL0_MASK  ((uint32_t)0x3FFFFFFF)
#define SCPM_IRQ_CTRL_INTRPTMODESEL0_RESET 0x00000000
// Each IRQ mode contains 10 IRQ's modes, each mode contains 3 bits
#define SCPM_IRQ_CTRL_INTRPTMODESEL_BIT_SIZE (3)
#define SCPM_IRQ_CTRL_INTRPTMODESEL_NUM (10)

// Interrupt Mode Select
#define SCPM_IRQ_CTRL_INTRPTMODESEL1_ADDR  (REG_SCPM_IRQ_CTRL_BASE_ADDR + 0x794)
#define SCPM_IRQ_CTRL_INTRPTMODESEL1_MASK  ((uint32_t)0x3FFFFFFF)
#define SCPM_IRQ_CTRL_INTRPTMODESEL1_RESET 0x00000000

// Interrupt Mode Select
#define SCPM_IRQ_CTRL_INTRPTMODESEL2_ADDR  (REG_SCPM_IRQ_CTRL_BASE_ADDR + 0x798)
#define SCPM_IRQ_CTRL_INTRPTMODESEL2_MASK  ((uint32_t)0x3FFFFFFF)
#define SCPM_IRQ_CTRL_INTRPTMODESEL2_RESET 0x00000000

#define SCPM_IRQ_CTRL_INTRPTMODESEL3_ADDR  (REG_SCPM_IRQ_CTRL_BASE_ADDR + 0x79C)
#define SCPM_IRQ_CTRL_INTRPTMODESEL3_MASK  ((uint32_t)0x3FFFFFFF)
#define SCPM_IRQ_CTRL_INTRPTMODESEL3_RESET 0x00000000

#define SCPM_IRQ_CTRL_INTRPTMODESEL4_ADDR  (REG_SCPM_IRQ_CTRL_BASE_ADDR + 0x7A0)
#define SCPM_IRQ_CTRL_INTRPTMODESEL4_MASK  ((uint32_t)0x3FFFFFFF)
#define SCPM_IRQ_CTRL_INTRPTMODESEL4_RESET 0x00000000

#define SCPM_IRQ_CTRL_INTRPTMODESEL5_ADDR  (REG_SCPM_IRQ_CTRL_BASE_ADDR + 0x7A4)
#define SCPM_IRQ_CTRL_INTRPTMODESEL5_MASK  ((uint32_t)0x3FFFFFFF)
#define SCPM_IRQ_CTRL_INTRPTMODESEL5_RESET 0x00000000

#define SCPM_IRQ_CTRL_INTRPTMODESEL6_ADDR  (REG_SCPM_IRQ_CTRL_BASE_ADDR + 0x7A8)
#define SCPM_IRQ_CTRL_INTRPTMODESEL6_MASK  ((uint32_t)0x3FFFFFFF)
#define SCPM_IRQ_CTRL_INTRPTMODESEL6_RESET 0x00000000

// -----------------------------  SCPM_SYS_CTRL  -----------------------------
//! @name SCPM_SYS_CTRL
//! @{
#define SCPM_SYS_CTRL_MCU_SW_LPC_EN_Pos       (0UL)              /*!< SCPM SYS_CTRL: mcu_sw_lpc_en (Bit 0)                            */
#define SCPM_SYS_CTRL_MCU_SW_LPC_EN_Msk       (0x1UL)            /*!< SCPM SYS_CTRL: mcu_sw_lpc_en (Bitfield-Mask: 0x1)               */
#define SCPM_SYS_CTRL_TRIMS_LOAD_EN_Pos       (1UL)              /*!< SCPM SYS_CTRL: trims_load_en (Bit 1)                            */
#define SCPM_SYS_CTRL_TRIMS_LOAD_EN_Msk       (0x2UL)            /*!< SCPM SYS_CTRL: trims_load_en (Bitfield-Mask: 0x2)               */
#define SCPM_SYS_CTRL_MCU_RSTN_OEN_Pos        (8UL)              /*!< SCPM SYS_CTRL: mcu_rstn_oen (Bit 8)                             */
#define SCPM_SYS_CTRL_MCU_RSTN_OEN_Msk        (0x100UL)          /*!< SCPM SYS_CTRL: mcu_rstn_oen (Bitfield-Mask: 0x100)              */
#define SCPM_SYS_CTRL_MCU_RSTN_DLY_Pos        (16UL)             /*!< SCPM SYS_CTRL: mcu_rstn_dly (Bit 16-19)                         */
#define SCPM_SYS_CTRL_MCU_RSTN_DLY_Msk        (0xF0000UL)        /*!< SCPM SYS_CTRL: mcu_rstn_dly (Bitfield-Mask: 0xf0000)            */
#define SCPM_SYS_CTRL_MCU_LFRC_DLY_Pos        (20UL)             /*!< SCPM SYS_CTRL: mcu_lfrc_dly (Bit 20-23)                         */
#define SCPM_SYS_CTRL_MCU_LFRC_DLY_Msk        (0xF00000UL)       /*!< SCPM SYS_CTRL: mcu_lfrc_dly (Bitfield-Mask: 0xf00000)           */
//! @}

// --------------------------  SCPM_SYS_CLK_SEL  -----------------------------
//! @name SCPM_SYS_CLK_SEL
//! @{
#define SCPM_SYS_CLK_SEL_ROSC_Pos             (0UL)
#define SCPM_SYS_CLK_SEL_ROSC_Msk             (0x3UL)
#define SCPM_SYS_CLK_SEL_HFRC_Pos             (2UL)
#define SCPM_SYS_CLK_SEL_HFRC_Msk             (0x4UL)
#define SCPM_SYS_CLK_SEL_PLL_REF_Pos          (3UL)
#define SCPM_SYS_CLK_SEL_PLL_REF_Msk          (0x8UL)
#define SCPM_SYS_CLK_SEL_SCPM_CSR_Pos         (4UL)
#define SCPM_SYS_CLK_SEL_SCPM_CSR_Msk         (0x10UL)
#define SCPM_SYS_CLK_SEL_MCU_HFCLK_Pos        (5UL)
#define SCPM_SYS_CLK_SEL_MCU_HFCLK_Msk        (0x60UL)
#define SCPM_SYS_CLK_SEL_BTDM_DSP_CLK_Pos     (8UL)
#define SCPM_SYS_CLK_SEL_BTDM_DSP_CLK_Msk     (0x3F00UL)
//! @}

// -----------------------------  SCPM_IRQ_CTRL  -----------------------------
//! @name SCPM_IRQ_CTRL
//! @{
#define SCPM_IRQ_CTRL_MODE_Pos                (0UL)
#define SCPM_IRQ_CTRL_MODE_Msk                (0x1UL)
#define SCPM_IRQ_CTRL_POLARITY_Pos            (1UL)
#define SCPM_IRQ_CTRL_POLARITY_Msk            (0x2UL)
#define SCPM_IRQ_CTRL_PULSE_WIDTH_Pos         (4UL)
#define SCPM_IRQ_CTRL_PULSE_WIDTH_Msk         (0xF0UL)
//! @}

// -----------------------------  SCPM_IRQ_MASK & STATUS -----------------------------
//! @name SCPM_IRQ_MASK AND STATUS
//! @{
#define SCPM_IRQ_VBUS_CON_Msk                 (0x1 << SCPM_IRQ_VBUS_CON_Pos)
#define SCPM_IRQ_VBUS_DISCON_Msk              (0x1 << SCPM_IRQ_VBUS_DISCON_Pos)
#define SCPM_IRQ_SYS_UVLO_Msk                 (0x1 << SCPM_IRQ_SYS_UVLO_Pos)
#define SCPM_IRQ_MCU_BOOT_WITH_KEY_Msk        (0x1 << SCPM_IRQ_MCU_BOOT_WITH_KEY_Pos)
#define SCPM_IRQ_ON_WITH_KEY_Msk              (0x1 << SCPM_IRQ_ON_WITH_KEY_Pos)
#define SCPM_IRQ_GPIO0_Msk                    (0x1 << SCPM_IRQ_GPIO0_Pos)
#define SCPM_IRQ_GPIO1_Msk                    (0x1 << SCPM_IRQ_GPIO1_Pos)
#define SCPM_IRQ_TRIM_LOAD_DONE_Msk           (0x1 << SCPM_IRQ_TRIM_LOAD_DONE_Pos)
#define SCPM_IRQ_DSP_WAKEN_UP_Msk             (0x1 << SCPM_IRQ_DSP_WAKEN_UP_Pos)
#define SCPM_IRQ_I2C_TIMEOUT_Msk              (0x1 << SCPM_IRQ_I2C_TIMEOUT_Pos)
#define SCPM_IRQ_MAILBOX_D2M_Msk              (0x1 << SCPM_IRQ_MAILBOX_THRESHOLD)
#define SCPM_IRQ_PD_TOP_PWR_ON_Msk            (0x1 << SCPM_IRQ_PD_TOP_PWR_ON_Pos)
#define SCPM_IRQ_PD_TOP_PWR_OFF_Msk           (0x1 << SCPM_IRQ_PD_TOP_PWR_OFF_Pos)
#define SCPM_IRQ_PD_BTDSP_PWR_ON_Msk          (0x1 << SCPM_IRQ_PD_BTDSP_PWR_ON_Pos)
#define SCPM_IRQ_PD_BTDSP_PWR_OFF_Msk         (0x1 << SCPM_IRQ_PD_BTDSP_PWR_OFF_Pos)
//! @}

// -----------------------------  SCPM_SW_RST_CTRL  --------------------------
//! @name SCPM_SW_RST_CTRL
//! @{
#define SCPM_SW_RST_CTRL_GLOBAL_SRST_Pos      (0UL)              /*!< SCPM SW_RST_CTRL: bt_dsp_global_srst (Bit 0)                   */
#define SCPM_SW_RST_CTRL_GLOBAL_SRST_Msk      (0x1UL)            /*!< SCPM SW_RST_CTRL: bt_dsp_global_srst (Bitfield-Mask: 0x1)      */
#define SCPM_SW_RST_CTRL_CX_SRST_Pos          (1UL)              /*!< SCPM SW_RST_CTRL: bt_dsp_cx_srst (Bit 1)                       */
#define SCPM_SW_RST_CTRL_CX_SRST_Msk          (0x2UL)            /*!< SCPM SW_RST_CTRL: bt_dsp_cx_srst (Bitfield-Mask: 0x2)          */
#define SCPM_SW_RST_CTRL_OCM_SRST_Pos         (2UL)              /*!< SCPM SW_RST_CTRL: bt_dsp_ocm_srst (Bit 2)                      */
#define SCPM_SW_RST_CTRL_OCM_SRST_Msk         (0x4UL)            /*!< SCPM SW_RST_CTRL: bt_dsp_ocm_srst (Bitfield-Mask: 0x4)         */
#define SCPM_SW_RST_CTRL_EXT_WDT_SRST_Pos     (3UL)              /*!< SCPM SW_RST_CTRL: bt_dsp_ext_wdt_srst (Bit 3)                  */
#define SCPM_SW_RST_CTRL_EXT_WDT_SRST_Msk     (0x8UL)            /*!< SCPM SW_RST_CTRL: bt_dsp_ext_wdt_srst (Bitfield-Mask: 0x8)     */
//! @}

/**
 ****************************************************************************************
 * SCPM_DSP_SCPMDSPCTL1_ADDR
 ****************************************************************************************
 */
typedef union
{
    struct
    {
        uint32_t force_active_state : 1;
        uint32_t ext_wakeup : 1; // external wake up
        uint32_t clk_sel    : 6; // clksel
        uint32_t reservd2   : 6;
        uint32_t force_radio_en:1;
        uint32_t force_osc_en:1;
        uint32_t ext_async_event:1;
        uint32_t ext_sys_nmi:1;
        uint32_t ext_sys_int:6;
        uint32_t external_wait:1;
        uint32_t mcu_wake:1;
        uint32_t ext_cxwake:2;
        uint32_t domain_en_DSPH:1;
        uint32_t globrstn:1;
        uint32_t ocmrst_n:1;
        uint32_t cxrstn: 1;
    } fields;
    uint32_t value;
} dsp_ctrl1_reg_t;

typedef union
{
    struct
    {
        uint32_t btdm_dsp_clk_status   : 1;
        uint32_t btdm_rtc_low_power_nrst : 1;
        uint32_t btdm_dsp_ceva_sys_rst_n    : 1;
        uint32_t btdm_dsp_cevax_seq_irre_r   : 1;
        uint32_t btdm_dsp_cevax_psu_dsp_idle_r:1;
        uint32_t btdm_dsp_cevax_psu_core_idle_r:1;
        uint32_t btdm_dsp_cevax_psu_cactive_r:1;
        uint32_t btdm_dsp_cevax_psu_csysack_r:1;

        uint32_t btdm_dsp_cevax_cverbit_r:1;
        uint32_t btdm_dsp_cevax_seq_eotbit_r:1;
        uint32_t btdm_dsp_cevax_seq_om_r:1;
        uint32_t osc_en:1;
        uint32_t deep_sleep_stat:1;
        uint32_t wakeup_req_trig:1;
        uint32_t deep_sleep_on:1;
        uint32_t radio_en:1;

        uint32_t cevax_mcci_mes_int:1;
        uint32_t cevax_mcci_rd_ind_r:1;
        uint32_t cevax_snoop_sn_int:1;
        uint32_t btdm_dsp_icu_vector_ack:1;
        uint32_t btdm_dsp_timer0_out:1;
        uint32_t btdm_dsp_timer1_out:1;
        uint32_t btdm_dsp_timer2_out:1;
        uint32_t btdm_dsp_timer3_out: 1;

        uint32_t reservd   : 7;
        uint32_t pwrdown_cxout0: 1;
    } fields;
    uint32_t value;
} dsp_status_reg_t;

typedef enum
{
    SCPM_SYS_CLK_SEL_SCPM_CSR_I2C   = 0,
    SCPM_SYS_CLK_SEL_SCPM_CSR_AHB   = 1
} SCPM_SYS_CLK_SEL_SCPM_CSR_Enum;

typedef enum
{
    // DIS  =   0       -   Interrupts are disabled for source 9
    SCPM_IRQ_DIS = 0,
    // INTFALL  =   1   -   Interrupts are enabled for falling edge transition on source 9
    SCPM_IRQ_NEG_EDGE,
    // INTRISE  =   2   -   Interrupts are enabled for rising edge transitions on source 9
    SCPM_IRQ_POS_EDGE,
    // INTANY   =   3   -   Interrupts are enabled for any edge transition on source 9
    SCPM_IRQ_BOTH_EDGE,
    // INTLVL0  =   4   -   Interrupts are enabled for level low on source 9
    SCPM_IRQ_LOW_LEVEL,
    // INTLVL1  =   5   -   Interrupts are enabled for level high on source 9
    SCPM_IRQ_HIGH_LEVEL
} scpm_irq_mode_e;

typedef enum
{
    SCPM_IRQ_MAILBOX_THRESHOLD = 14,
    SCPM_IRQ_MAILBOX_ERR       = 15,
    SCPM_IRQ_OSCEN = 32,
    SCPM_IRQ_CXOUT0 = 33,
    SCPM_IRQ_DSP_IDLE = 34,
    SCPM_IRQ_BTDM_DEEP_SLEEP = 35,
    SCPM_IRQ_NUM,
} scpm_irq_map_e;
//! @} // group

//*****************************************************************************
//! @name SCPM instance definition.
//! @{
//*****************************************************************************
typedef struct
{
    uint32_t                    ui32Module;
    void                        *pIomHandle;
    bool                        bOccupied;
} am_devices_scpm_t;

typedef enum
{
    AM_DEVICES_SCPM_STATUS_SUCCESS,
    AM_DEVICES_SCPM_STATUS_FAIL,
    AM_DEVICES_SCPM_STATUS_INVALID_HANDLE,
    AM_DEVICES_SCPM_STATUS_IN_USE,
    AM_DEVICES_SCPM_STATUS_TIMEOUT,
    AM_DEVICES_SCPM_STATUS_OUT_OF_RANGE,
    AM_DEVICES_SCPM_STATUS_INVALID_ARG,
    AM_DEVICES_SCPM_STATUS_INVALID_OPERATION,
    AM_DEVICES_SCPM_STATUS_MEM_ERR,
    AM_DEVICES_SCPM_STATUS_HW_ERR
} am_devices_scpm_status_e;

typedef struct
{
    uint32_t ui32ClockFreq;
    uint32_t *pNBTxnBuf;
    uint32_t ui32NBTxnBufLength;
} am_devices_scpm_config_t;
//! @}

//*****************************************************************************
//! SCPM requests
//*****************************************************************************
typedef enum
{
    AM_DEVICES_SCPM_REQ_GET_SLEEP_STATE,
    AM_DEVICES_SCPM_REQ_WAKEUP,
    AM_DEVICES_SCPM_REQ_GET_IRQ_STATUS,
    AM_DEVICES_SCPM_REQ_CLR_IRQ_STATUS,
    AM_DEVICES_SCPM_REQ_IRQ_CTRL,
    AM_DEVICES_SCPM_REQ_SW_RESET,
    AM_DEVICES_SCPM_REQ_RET_SRAM,
    AM_DEVICES_SCPM_REQ_STARTUP,
    AM_DEVICES_SCPM_REQ_SHUTDOWN,
    AM_DEVICES_SCPM_REQ_EN_TRIMS_LOAD,
    AM_DEVICES_SCPM_REQ_DIS_TRIMS_LOAD,
    AM_DEVICES_SCPM_REQ_MAX
}am_devices_scpm_request_e;

//*****************************************************************************
//! External AMBT53 module handle.
//*****************************************************************************
extern am_devices_scpm_t gAmSCPM[AM_DEVICES_SCPM_MAX_DEVICE_NUM];

//*****************************************************************************
//
// External function definitions.
//
//*****************************************************************************

//*****************************************************************************
// SCPM operation interface.
//*****************************************************************************
//*****************************************************************************
//
//! @brief Initialize the SCPM driver.
//!
//! @param ui32Module  - IOM device module number.
//! @param pDevConfig  -
//! @param ppHandle    -
//! @param ppIomHandle -
//!
//! @note This function should be called before any other am_devices_scpm
//! functions. It is used to set tell the other functions how to communicate
//! with the external spiflash hardware.
//!
//! @return Status from am_devices_scpm_status_e
//
//*****************************************************************************
extern uint32_t am_devices_scpm_init(uint32_t ui32Module, am_devices_scpm_config_t *pDevConfig, void **ppHandle, void **ppIomHandle);

//*****************************************************************************
//
//! @brief De-Initialize the SCPM driver.
//!
//! @param pHandle     - module handle
//!
//! This function reverses the initialization
//!
//! @return Status.
//
//*****************************************************************************
extern uint32_t am_devices_scpm_term(void *pHandle);

//*****************************************************************************
//
//! @brief Programs the given range of flash addresses.
//!
//! @param pHandle          - Device handle
//! @param pui8TxBuffer     - Buffer to write the external flash data from
//! @param ui32WriteAddress - Address to write to in the external flash
//! @param ui32NumBytes     - Number of bytes to write to the external flash
//!
//! This function uses the data in the provided pui8TxBuffer and copies it to
//! the external flash at the address given by ui32WriteAddress. It will copy
//! exactly ui32NumBytes of data from the original pui8TxBuffer pointer. The
//! user is responsible for ensuring that they do not overflow the target flash
//! memory or underflow the pui8TxBuffer array
//!
//! @return 32-bit status
//
//*****************************************************************************
extern uint32_t am_devices_scpm_blocking_write(void *pHandle, uint8_t *pui8TxBuffer,
                                                     uint32_t ui32WriteAddress,
                                                     uint32_t ui32NumBytes);

//*****************************************************************************
//
//! @brief Reads the contents of the fram into a buffer.
//!
//! @param pHandle          - Device Handle
//! @param pui8RxBuffer    - Buffer to store the received data from the flash
//! @param ui32ReadAddress - Address of desired data in external flash
//! @param ui32NumBytes     - Number of bytes to read from external flash
//!
//! This function reads the external flash at the provided address and stores
//! the received data into the provided buffer location. This function will
//! only store ui32NumBytes worth of data.
//!
//! @return 32-bit status
//
//*****************************************************************************
extern uint32_t am_devices_scpm_blocking_read(void *pHandle, uint8_t *pui8RxBuffer,
                                                    uint32_t ui32ReadAddress,
                                                    uint32_t ui32NumBytes);

//*****************************************************************************
//
//! @brief scpm control fucntion
//! @param pHandle
//! @param eRequest
//! @param pArgs
//! @return
//
//*****************************************************************************
extern uint32_t am_devices_scpm_control(void *pHandle,
                                                    am_devices_scpm_request_e eRequest,
                                                    void *pArgs);

//*****************************************************************************
//
//! @brief
//! @param addr
//! @param value
//! @return
//
//*****************************************************************************
inline static uint32_t SCPM_REG32_WR(uint32_t addr, uint32_t value)
{
    uint32_t status, cnt = 0;
    do
    {
        status = am_devices_scpm_blocking_write((void*)&gAmSCPM[0], (uint8_t*)&value, addr, 4);
        cnt++;

        if ( (cnt > SCPM_I2C_MAX_RETRY_CNT) || (status == AM_DEVICES_SCPM_STATUS_SUCCESS) )
        {
            break;
        }

    } while(1);

    if ( status != AM_DEVICES_SCPM_STATUS_SUCCESS )
    {
        am_util_stdio_printf("SCPM_REG32_WR Fail addr = 0x%08x,status = %d\r\n", addr, status);
    }
    return status;
}

//*****************************************************************************
//
//! @brief inline function
//! @param addr
//! @param pvalue
//! @return
//
//*****************************************************************************
inline static uint32_t SCPM_REG32_RD(uint32_t addr, uint32_t* pvalue)
{
    uint32_t status, cnt = 0;
    do
    {
        status = am_devices_scpm_blocking_read((void*)&gAmSCPM[0], (uint8_t*)pvalue, addr, 4);
        cnt++;
        if ( (cnt > SCPM_I2C_MAX_RETRY_CNT) || (status == AM_DEVICES_SCPM_STATUS_SUCCESS) )
        {
            break;
        }
    } while(1);

    if ( status != AM_DEVICES_SCPM_STATUS_SUCCESS )
    {
        am_util_stdio_printf("SCPM_REG32_RD Fail addr =0x%08x,status = %d\r\n", addr, status);
    }
    return status;
}

//*****************************************************************************
//
//! @brief Relay interrupts from the main SCPM module to individual handlers.
//
//*****************************************************************************
void am_devices_scpm_int_service(void);

//*****************************************************************************
//
//! @brief Unregister an interrupt handler from SCPM
//!
//! @param irq_num - interrupt source index
//! @return status from am_devices_scpm_status_e
//
//*****************************************************************************
uint32_t am_devices_ambt53_interrupt_unregister(scpm_irq_map_e irq_num);

//*****************************************************************************
//
//! @brief Register an interrupt handler for a specific ambt53 SCPM interrupt
//! source
//!
//! @param irq_num - interrupt source index
//! @param irq_mode - interrupt mode--level sensitive or edge sensitive
//! @param handler - interrupt handler for this interrupt
//! @return status from am_devices_scpm_status_e
//
//*****************************************************************************
uint32_t
am_devices_ambt53_interrupt_register(scpm_irq_map_e irq_num, scpm_irq_mode_e irq_mode,
                                    am_devices_ambt53_handler handler);

/**
 ****************************************************************************************
 * @brief init the scpm interrupt controller
 ****************************************************************************************
 */
void am_hal_scpm_intr_init(void);

/**
 ****************************************************************************************
 * @brief Update the scpm interrup sources' interrupt mode
 * @param int_idx interrupt index
 * @param intr_mode interrupt mode
 ****************************************************************************************
 */
void am_hal_scpm_intr_mode_update(scpm_irq_map_e int_idx, scpm_irq_mode_e intr_mode);

/**
 ****************************************************************************************
 * @brief Enable or disable the interrupt of scpm
 * @param int_idx interrupt index
 * @param enable true: enable, false:disable
 ****************************************************************************************
 */
void am_hal_scpm_intr_enable(scpm_irq_map_e int_idx, bool enable);

/**
 ****************************************************************************************
 * @brief clear the interrupt status of scpm
 * @param int_idx interrupt index
 ****************************************************************************************
 */
void am_hal_scpm_irq_clr(scpm_irq_map_e int_idx);

/**
 ****************************************************************************************
 * @brief Get the Ambt53 status register value
 * @return dsp_status      SCPMDSPSTA register value
 ****************************************************************************************
 */
uint32_t am_hal_scpm_get_dsp_status(void);

/**
 ****************************************************************************************
 * @brief Set the Ambt53 EVECTOR address
 * @param evector      32bits Ambt53 evector value
 ****************************************************************************************
 */
void am_hal_scpm_set_dsp_evector(uint32_t evector);

/**
 ****************************************************************************************
 * @brief Set external wake up, to wake up the Ambt53
 * @param N/A
 ****************************************************************************************
 */
void am_hal_scpm_set_ext_wakeup(void);

/**
****************************************************************************************
* @brief Release external wake up,it need to be released after the osc_en rising edge
*interrupt
* @param N/A
****************************************************************************************
*/
void am_hal_scpm_release_ext_wakeup(void);

/**
 ****************************************************************************************
 * @brief Set Ambt53 global reset
 * @param N/A
 ****************************************************************************************
 */
void am_hal_scpm_set_globrst(void);

/**
 ****************************************************************************************
 * @brief Release Ambt53 global reset
 * @param N/A
 ****************************************************************************************
 */
void am_hal_scpm_release_globrst(void);

/**
 ****************************************************************************************
 * @brief Set ambt53 core reset
 * @param N/A
 ****************************************************************************************
 */
void am_hal_scpm_set_cxrst(void);

/**
 ****************************************************************************************
 * @brief Release Ambt53 core reset
 * @param N/A
 ****************************************************************************************
 */
void am_hal_scpm_release_cxrst(void);

/**
 ****************************************************************************************
 * @brief Info the Ambt53 not enter power down mode
 * @param active_enable true:Ambt53 not enter power down,otherwise the Ambt53 can enter the power down
 ****************************************************************************************
 */
void am_hal_scpm_force_active_enable(bool active_enable);
#ifdef __cplusplus
}
#endif

#endif // AM_DEVICES_AMBT53_SCPM_H

//*****************************************************************************
//
// End Doxygen group.
//! @}
//
//*****************************************************************************

