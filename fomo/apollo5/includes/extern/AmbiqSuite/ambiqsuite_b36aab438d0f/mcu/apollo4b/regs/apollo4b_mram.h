/*
 * Copyright (c) 2020, Ambiq Micro, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * Third party software included in this distribution is subject to the
 * additional license terms as defined in the /docs/licenses directory.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * @file     apollo4b_mram.h
 * @brief    CMSIS HeaderFile
 * @version  1.0
 * @date     06. November 2020
 * @note     Generated by SVDConv V3.3.35 on Friday, 06.11.2020 15:52:21
 *           from File './apollo4b_x.svd',
 *           last modified on Friday, 06.11.2020 21:52:20
 */
#ifndef APOLLO4B_MRAM_H
#define APOLLO4B_MRAM_H

#ifdef __cplusplus
extern "C" {
#endif

/* ========================================  Start of section using anonymous unions  ======================================== */
#if defined (__CC_ARM)
  #pragma push
  #pragma anon_unions
#elif defined (__ICCARM__)
  #pragma language=extended
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wc11-extensions"
  #pragma clang diagnostic ignored "-Wreserved-id-macro"
  #pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
  #pragma clang diagnostic ignored "-Wnested-anon-types"
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning 586
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#else
  #warning Not supported compiler type
#endif

#define MRAM_BASE                   0x40014000UL

/* =========================================================================================================================== */
/* ================                                           MRAM                                            ================ */
/* =========================================================================================================================== */

/**
  * @brief MRAM Controller (MRAM)
  */

typedef struct {                                /*!< (@ 0x40014000) MRAM Structure                                             */

  union {
    __IOM uint32_t STATUS;                      /*!< (@ 0x00000000) MRAM Controller Status                                     */

    struct {
      __IOM uint32_t BUSY       : 1;            /*!< [0..0] Controller Busy. This bit reflects the status of the
                                                     most recently requested MRAM operation. When set to 1,
                                                     the MRAM Controller is still processing the last operation.
                                                     When set to 0, the controller is idle and ready to accept
                                                     a new command request.                                                    */
      __IOM uint32_t ADDRERROR  : 1;            /*!< [1..1] Write Address Error. When set to 1, this bit indicates
                                                     that an address has been written to the WRADDR register
                                                     which is outside the range of valid addresses for the MRAM
                                                     Memory. This bit will be cleared on a write to the WRADDR
                                                     register with a value that falls in the range of valid
                                                     addresses. Additionally, when a write to the Write Data
                                                     registers occurs and the Write Address is auto-incremented,
                                                     this bit will be set if the new address increments beyond
                                                     the end of the valid MRAM address space.                                  */
            uint32_t            : 30;
    } STATUS_b;
  } ;

  union {
    __IOM uint32_t CTRL;                        /*!< (@ 0x00000004) MRAM Controller Control                                    */

    struct {
      __IOM uint32_t LOAD       : 1;            /*!< [0..0] Writing a 1 to this bitfield initiates a programming
                                                     operation to the MRAM Information space. Writing a 0 to
                                                     this bitfield terminates the programming operation.                       */
      __IOM uint32_t CLRLOAD    : 1;            /*!< [1..1] Writing a 1 to this bitfield initiates a programming
                                                     operation to the MRAM Information space. Writing a 0 to
                                                     this bitfield terminates the programming operation.                       */
      __IOM uint32_t PROGRAM    : 1;            /*!< [2..2] Writing a 1 to this bitfield initiates a programming
                                                     operation to the MRAM Data space. Writing a 0 to this bitfield
                                                     terminates the programming operation.                                     */
      __IOM uint32_t GENCMD     : 1;            /*!< [3..3] Writing a 1 to this bitfield initiates a general command
                                                     to the TMC (see TMCCMD). TMCOVERRIDE must be enabled                      */
            uint32_t            : 28;
    } CTRL_b;
  } ;

  union {
    __IOM uint32_t ACCESS;                      /*!< (@ 0x00000008) Key Register for the MRAM Controller                       */

    struct {
      __IOM uint32_t ACCESS     : 32;           /*!< [31..0] Key register value.                                               */
    } ACCESS_b;
  } ;

  union {
    __IOM uint32_t WRADDR;                      /*!< (@ 0x0000000C) MRAM Controller Write Address                              */

    struct {
      __IOM uint32_t ADDR       : 24;           /*!< [23..0] The value written to this field contains the byte address
                                                     to use for the next Erase or Program operation to the MRAM
                                                     Instance. An instance address is required (i.e. 0-0x3FFFF).
                                                     If an invalid address is written, the Address Error bit
                                                     of the Status register will be set.                                       */
            uint32_t            : 6;
      __IOM uint32_t INFO0      : 1;            /*!< [30..30] Indicates programming operation applies to INFO0 space           */
      __IOM uint32_t INFO1      : 1;            /*!< [31..31] Indicates programming operation applies to INFO1 space.
                                                     Must be unlocked by INFO1 program key.                                    */
    } WRADDR_b;
  } ;

  union {
    __IOM uint32_t WDATA0;                      /*!< (@ 0x00000010) MRAM Controller Write Data0                                */

    struct {
      __IOM uint32_t DATA0      : 32;           /*!< [31..0] Data[31:0] when programming data/info spaces                      */
    } WDATA0_b;
  } ;

  union {
    __IOM uint32_t WDATA1;                      /*!< (@ 0x00000014) MRAM Controller Write Data1                                */

    struct {
      __IOM uint32_t DATA1      : 32;           /*!< [31..0] Data[63:32] when programming data/info spaces                     */
    } WDATA1_b;
  } ;

  union {
    __IOM uint32_t WDATA2;                      /*!< (@ 0x00000018) MRAM Controller Write Data2                                */

    struct {
      __IOM uint32_t DATA2      : 32;           /*!< [31..0] Data[95:64] when programming data/info spaces                     */
    } WDATA2_b;
  } ;

  union {
    __IOM uint32_t WDATA3;                      /*!< (@ 0x0000001C) MRAM Controller Write Data3                                */

    struct {
      __IOM uint32_t DATA3      : 32;           /*!< [31..0] Data[127:96] when programming data/info spaces                    */
    } WDATA3_b;
  } ;
  __IM  uint32_t  RESERVED[8];

  union {
    __IOM uint32_t KEY0;                        /*!< (@ 0x00000040) INFO1 Key0                                                 */

    struct {
      __IOM uint32_t KEY0       : 32;           /*!< [31..0] 128-bit key protecting INFO1 accesses                             */
    } KEY0_b;
  } ;

  union {
    __IOM uint32_t KEY1;                        /*!< (@ 0x00000044) INFO1 Key1                                                 */

    struct {
      __IOM uint32_t KEY1       : 32;           /*!< [31..0] 128-bit key protecting INFO1 accesses                             */
    } KEY1_b;
  } ;

  union {
    __IOM uint32_t KEY2;                        /*!< (@ 0x00000048) INFO1 Key2                                                 */

    struct {
      __IOM uint32_t KEY2       : 32;           /*!< [31..0] 128-bit key protecting INFO1 accesses                             */
    } KEY2_b;
  } ;

  union {
    __IOM uint32_t KEY3;                        /*!< (@ 0x0000004C) INFO1 Key3                                                 */

    struct {
      __IOM uint32_t KEY3       : 32;           /*!< [31..0] 128-bit key protecting INFO1 accesses                             */
    } KEY3_b;
  } ;

  union {
    __IOM uint32_t TMCCTRL;                     /*!< (@ 0x00000050) MRAM Controller Manual Control                             */

    struct {
      __IOM uint32_t TMCRST     : 1;            /*!< [0..0] Manual override on TMC reset (1=reset 0=out of reset)              */
      __IOM uint32_t TMCLPR     : 1;            /*!< [1..1] Manual override on TMC LPR (low power mode)                        */
      __IOM uint32_t TMCPD      : 1;            /*!< [2..2] Manual override on TMC PD (powerdown)                              */
      __IOM uint32_t TMCSLP     : 1;            /*!< [3..3] Manual override on TMC sleep                                       */
      __IOM uint32_t TMCOVERRIDE : 1;           /*!< [4..4] Manual override controle enable                                    */
            uint32_t            : 27;
    } TMCCTRL_b;
  } ;

  union {
    __IOM uint32_t TMCCMD;                      /*!< (@ 0x00000054) MRAM Controller Manual Command                             */

    struct {
      __IOM uint32_t TMCCMD     : 5;            /*!< [4..0] 4-bit command to send                                              */
      __IOM uint32_t TMCYADR    : 5;            /*!< [9..5] YADR value                                                         */
      __IOM uint32_t TMCXADR    : 12;           /*!< [21..10] XADR value                                                       */
      __IOM uint32_t TMCINFO0   : 1;            /*!< [22..22] Info0 control line                                               */
      __IOM uint32_t TMCINFO1   : 1;            /*!< [23..23] INFO1 control line                                               */
      __IOM uint32_t TMCSRAMDMA : 1;            /*!< [24..24] SRAM DMA control line                                            */
      __IOM uint32_t TMCIFREN1  : 1;            /*!< [25..25] Enable the access to TMC Info1 register                          */
            uint32_t            : 6;
    } TMCCMD_b;
  } ;

  union {
    __IOM uint32_t TMCSTAT;                     /*!< (@ 0x00000058) MRAM Controller Manual Status                              */

    struct {
      __IOM uint32_t TMCERROR   : 5;            /*!< [4..0] 128-bit key protecting INFO1 accesses                              */
            uint32_t            : 3;
      __IOM uint32_t TMCBUSY    : 1;            /*!< [8..8] 128-bit key protecting INFO1 accesses                              */
            uint32_t            : 23;
    } TMCSTAT_b;
  } ;
  __IM  uint32_t  RESERVED1;

  union {
    __IOM uint32_t TMCRD0;                      /*!< (@ 0x00000060) MRAM Controller Debug Read Data                            */

    struct {
      __IOM uint32_t TMCREAD0   : 32;           /*!< [31..0] Debug Read data                                                   */
    } TMCRD0_b;
  } ;

  union {
    __IOM uint32_t TMCRD1;                      /*!< (@ 0x00000064) MRAM Controller Debug Read Data                            */

    struct {
      __IOM uint32_t TMCREAD1   : 32;           /*!< [31..0] Debug Read data                                                   */
    } TMCRD1_b;
  } ;

  union {
    __IOM uint32_t TMCRD2;                      /*!< (@ 0x00000068) MRAM Controller Debug Read Data                            */

    struct {
      __IOM uint32_t TMCREAD2   : 32;           /*!< [31..0] Debug Read data                                                   */
    } TMCRD2_b;
  } ;

  union {
    __IOM uint32_t TMCRD3;                      /*!< (@ 0x0000006C) MRAM Controller Debug Read Data                            */

    struct {
      __IOM uint32_t TMCREAD3   : 32;           /*!< [31..0] Debug Read data                                                   */
    } TMCRD3_b;
  } ;

  union {
    __IOM uint32_t TMCREGIFDOUT;                /*!< (@ 0x00000070) MRAM Controller Debug Read Data                            */

    struct {
      __IOM uint32_t TMCREGDOUT : 32;           /*!< [31..0] Debug Read data                                                   */
    } TMCREGIFDOUT_b;
  } ;
} MRAM_Type;                                    /*!< Size = 116 (0x74)                                                         */

/* =========================================  End of section using anonymous unions  ========================================= */
#if defined (__CC_ARM)
  #pragma pop
#elif defined (__ICCARM__)
  /* leave anonymous unions enabled */
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic pop
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning restore
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#endif

/* =========================================================================================================================== */
/* ================                                           MRAM                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  STATUS  ========================================================= */
#define MRAM_STATUS_ADDRERROR_Pos         (1UL)                     /*!< ADDRERROR (Bit 1)                                     */
#define MRAM_STATUS_ADDRERROR_Msk         (0x2UL)                   /*!< ADDRERROR (Bitfield-Mask: 0x01)                       */
#define MRAM_STATUS_BUSY_Pos              (0UL)                     /*!< BUSY (Bit 0)                                          */
#define MRAM_STATUS_BUSY_Msk              (0x1UL)                   /*!< BUSY (Bitfield-Mask: 0x01)                            */
/* =========================================================  CTRL  ========================================================== */
#define MRAM_CTRL_GENCMD_Pos              (3UL)                     /*!< GENCMD (Bit 3)                                        */
#define MRAM_CTRL_GENCMD_Msk              (0x8UL)                   /*!< GENCMD (Bitfield-Mask: 0x01)                          */
#define MRAM_CTRL_PROGRAM_Pos             (2UL)                     /*!< PROGRAM (Bit 2)                                       */
#define MRAM_CTRL_PROGRAM_Msk             (0x4UL)                   /*!< PROGRAM (Bitfield-Mask: 0x01)                         */
#define MRAM_CTRL_CLRLOAD_Pos             (1UL)                     /*!< CLRLOAD (Bit 1)                                       */
#define MRAM_CTRL_CLRLOAD_Msk             (0x2UL)                   /*!< CLRLOAD (Bitfield-Mask: 0x01)                         */
#define MRAM_CTRL_LOAD_Pos                (0UL)                     /*!< LOAD (Bit 0)                                          */
#define MRAM_CTRL_LOAD_Msk                (0x1UL)                   /*!< LOAD (Bitfield-Mask: 0x01)                            */
/* ========================================================  ACCESS  ========================================================= */
#define MRAM_ACCESS_ACCESS_Pos            (0UL)                     /*!< ACCESS (Bit 0)                                        */
#define MRAM_ACCESS_ACCESS_Msk            (0xffffffffUL)            /*!< ACCESS (Bitfield-Mask: 0xffffffff)                    */
/* ========================================================  WRADDR  ========================================================= */
#define MRAM_WRADDR_INFO1_Pos             (31UL)                    /*!< INFO1 (Bit 31)                                        */
#define MRAM_WRADDR_INFO1_Msk             (0x80000000UL)            /*!< INFO1 (Bitfield-Mask: 0x01)                           */
#define MRAM_WRADDR_INFO0_Pos             (30UL)                    /*!< INFO0 (Bit 30)                                        */
#define MRAM_WRADDR_INFO0_Msk             (0x40000000UL)            /*!< INFO0 (Bitfield-Mask: 0x01)                           */
#define MRAM_WRADDR_ADDR_Pos              (0UL)                     /*!< ADDR (Bit 0)                                          */
#define MRAM_WRADDR_ADDR_Msk              (0xffffffUL)              /*!< ADDR (Bitfield-Mask: 0xffffff)                        */
/* ========================================================  WDATA0  ========================================================= */
#define MRAM_WDATA0_DATA0_Pos             (0UL)                     /*!< DATA0 (Bit 0)                                         */
#define MRAM_WDATA0_DATA0_Msk             (0xffffffffUL)            /*!< DATA0 (Bitfield-Mask: 0xffffffff)                     */
/* ========================================================  WDATA1  ========================================================= */
#define MRAM_WDATA1_DATA1_Pos             (0UL)                     /*!< DATA1 (Bit 0)                                         */
#define MRAM_WDATA1_DATA1_Msk             (0xffffffffUL)            /*!< DATA1 (Bitfield-Mask: 0xffffffff)                     */
/* ========================================================  WDATA2  ========================================================= */
#define MRAM_WDATA2_DATA2_Pos             (0UL)                     /*!< DATA2 (Bit 0)                                         */
#define MRAM_WDATA2_DATA2_Msk             (0xffffffffUL)            /*!< DATA2 (Bitfield-Mask: 0xffffffff)                     */
/* ========================================================  WDATA3  ========================================================= */
#define MRAM_WDATA3_DATA3_Pos             (0UL)                     /*!< DATA3 (Bit 0)                                         */
#define MRAM_WDATA3_DATA3_Msk             (0xffffffffUL)            /*!< DATA3 (Bitfield-Mask: 0xffffffff)                     */
/* =========================================================  KEY0  ========================================================== */
#define MRAM_KEY0_KEY0_Pos                (0UL)                     /*!< KEY0 (Bit 0)                                          */
#define MRAM_KEY0_KEY0_Msk                (0xffffffffUL)            /*!< KEY0 (Bitfield-Mask: 0xffffffff)                      */
/* =========================================================  KEY1  ========================================================== */
#define MRAM_KEY1_KEY1_Pos                (0UL)                     /*!< KEY1 (Bit 0)                                          */
#define MRAM_KEY1_KEY1_Msk                (0xffffffffUL)            /*!< KEY1 (Bitfield-Mask: 0xffffffff)                      */
/* =========================================================  KEY2  ========================================================== */
#define MRAM_KEY2_KEY2_Pos                (0UL)                     /*!< KEY2 (Bit 0)                                          */
#define MRAM_KEY2_KEY2_Msk                (0xffffffffUL)            /*!< KEY2 (Bitfield-Mask: 0xffffffff)                      */
/* =========================================================  KEY3  ========================================================== */
#define MRAM_KEY3_KEY3_Pos                (0UL)                     /*!< KEY3 (Bit 0)                                          */
#define MRAM_KEY3_KEY3_Msk                (0xffffffffUL)            /*!< KEY3 (Bitfield-Mask: 0xffffffff)                      */
/* ========================================================  TMCCTRL  ======================================================== */
#define MRAM_TMCCTRL_TMCOVERRIDE_Pos      (4UL)                     /*!< TMCOVERRIDE (Bit 4)                                   */
#define MRAM_TMCCTRL_TMCOVERRIDE_Msk      (0x10UL)                  /*!< TMCOVERRIDE (Bitfield-Mask: 0x01)                     */
#define MRAM_TMCCTRL_TMCSLP_Pos           (3UL)                     /*!< TMCSLP (Bit 3)                                        */
#define MRAM_TMCCTRL_TMCSLP_Msk           (0x8UL)                   /*!< TMCSLP (Bitfield-Mask: 0x01)                          */
#define MRAM_TMCCTRL_TMCPD_Pos            (2UL)                     /*!< TMCPD (Bit 2)                                         */
#define MRAM_TMCCTRL_TMCPD_Msk            (0x4UL)                   /*!< TMCPD (Bitfield-Mask: 0x01)                           */
#define MRAM_TMCCTRL_TMCLPR_Pos           (1UL)                     /*!< TMCLPR (Bit 1)                                        */
#define MRAM_TMCCTRL_TMCLPR_Msk           (0x2UL)                   /*!< TMCLPR (Bitfield-Mask: 0x01)                          */
#define MRAM_TMCCTRL_TMCRST_Pos           (0UL)                     /*!< TMCRST (Bit 0)                                        */
#define MRAM_TMCCTRL_TMCRST_Msk           (0x1UL)                   /*!< TMCRST (Bitfield-Mask: 0x01)                          */
/* ========================================================  TMCCMD  ========================================================= */
#define MRAM_TMCCMD_TMCIFREN1_Pos         (25UL)                    /*!< TMCIFREN1 (Bit 25)                                    */
#define MRAM_TMCCMD_TMCIFREN1_Msk         (0x2000000UL)             /*!< TMCIFREN1 (Bitfield-Mask: 0x01)                       */
#define MRAM_TMCCMD_TMCSRAMDMA_Pos        (24UL)                    /*!< TMCSRAMDMA (Bit 24)                                   */
#define MRAM_TMCCMD_TMCSRAMDMA_Msk        (0x1000000UL)             /*!< TMCSRAMDMA (Bitfield-Mask: 0x01)                      */
#define MRAM_TMCCMD_TMCINFO1_Pos          (23UL)                    /*!< TMCINFO1 (Bit 23)                                     */
#define MRAM_TMCCMD_TMCINFO1_Msk          (0x800000UL)              /*!< TMCINFO1 (Bitfield-Mask: 0x01)                        */
#define MRAM_TMCCMD_TMCINFO0_Pos          (22UL)                    /*!< TMCINFO0 (Bit 22)                                     */
#define MRAM_TMCCMD_TMCINFO0_Msk          (0x400000UL)              /*!< TMCINFO0 (Bitfield-Mask: 0x01)                        */
#define MRAM_TMCCMD_TMCXADR_Pos           (10UL)                    /*!< TMCXADR (Bit 10)                                      */
#define MRAM_TMCCMD_TMCXADR_Msk           (0x3ffc00UL)              /*!< TMCXADR (Bitfield-Mask: 0xfff)                        */
#define MRAM_TMCCMD_TMCYADR_Pos           (5UL)                     /*!< TMCYADR (Bit 5)                                       */
#define MRAM_TMCCMD_TMCYADR_Msk           (0x3e0UL)                 /*!< TMCYADR (Bitfield-Mask: 0x1f)                         */
#define MRAM_TMCCMD_TMCCMD_Pos            (0UL)                     /*!< TMCCMD (Bit 0)                                        */
#define MRAM_TMCCMD_TMCCMD_Msk            (0x1fUL)                  /*!< TMCCMD (Bitfield-Mask: 0x1f)                          */
/* ========================================================  TMCSTAT  ======================================================== */
#define MRAM_TMCSTAT_TMCBUSY_Pos          (8UL)                     /*!< TMCBUSY (Bit 8)                                       */
#define MRAM_TMCSTAT_TMCBUSY_Msk          (0x100UL)                 /*!< TMCBUSY (Bitfield-Mask: 0x01)                         */
#define MRAM_TMCSTAT_TMCERROR_Pos         (0UL)                     /*!< TMCERROR (Bit 0)                                      */
#define MRAM_TMCSTAT_TMCERROR_Msk         (0x1fUL)                  /*!< TMCERROR (Bitfield-Mask: 0x1f)                        */
/* ========================================================  TMCRD0  ========================================================= */
#define MRAM_TMCRD0_TMCREAD0_Pos          (0UL)                     /*!< TMCREAD0 (Bit 0)                                      */
#define MRAM_TMCRD0_TMCREAD0_Msk          (0xffffffffUL)            /*!< TMCREAD0 (Bitfield-Mask: 0xffffffff)                  */
/* ========================================================  TMCRD1  ========================================================= */
#define MRAM_TMCRD1_TMCREAD1_Pos          (0UL)                     /*!< TMCREAD1 (Bit 0)                                      */
#define MRAM_TMCRD1_TMCREAD1_Msk          (0xffffffffUL)            /*!< TMCREAD1 (Bitfield-Mask: 0xffffffff)                  */
/* ========================================================  TMCRD2  ========================================================= */
#define MRAM_TMCRD2_TMCREAD2_Pos          (0UL)                     /*!< TMCREAD2 (Bit 0)                                      */
#define MRAM_TMCRD2_TMCREAD2_Msk          (0xffffffffUL)            /*!< TMCREAD2 (Bitfield-Mask: 0xffffffff)                  */
/* ========================================================  TMCRD3  ========================================================= */
#define MRAM_TMCRD3_TMCREAD3_Pos          (0UL)                     /*!< TMCREAD3 (Bit 0)                                      */
#define MRAM_TMCRD3_TMCREAD3_Msk          (0xffffffffUL)            /*!< TMCREAD3 (Bitfield-Mask: 0xffffffff)                  */
/* =====================================================  TMCREGIFDOUT  ====================================================== */
#define MRAM_TMCREGIFDOUT_TMCREGDOUT_Pos  (0UL)                     /*!< TMCREGDOUT (Bit 0)                                    */
#define MRAM_TMCREGIFDOUT_TMCREGDOUT_Msk  (0xffffffffUL)            /*!< TMCREGDOUT (Bitfield-Mask: 0xffffffff)                */

/* =========================================================================================================================== */
/* ================                                           MRAM                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  STATUS  ========================================================= */
/* =============================================  MRAM STATUS ADDRERROR [1..1]  ============================================== */
typedef enum {                                  /*!< MRAM_STATUS_ADDRERROR                                                     */
  MRAM_STATUS_ADDRERROR_VALID          = 0,     /*!< VALID : The last address written to WRADDR was valid.                     */
  MRAM_STATUS_ADDRERROR_INVALID        = 1,     /*!< INVALID : Invalid address written to WRADDR.                              */
} MRAM_STATUS_ADDRERROR_Enum;

/* ================================================  MRAM STATUS BUSY [0..0]  ================================================ */
typedef enum {                                  /*!< MRAM_STATUS_BUSY                                                          */
  MRAM_STATUS_BUSY_IDLE                = 0,     /*!< IDLE : MRAM controller is idle and ready for a new command.               */
  MRAM_STATUS_BUSY_MRAMBUSY            = 1,     /*!< MRAMBUSY : MRAM controller is processing an operation.                    */
} MRAM_STATUS_BUSY_Enum;

/* =========================================================  CTRL  ========================================================== */
/* ================================================  MRAM CTRL GENCMD [3..3]  ================================================ */
typedef enum {                                  /*!< MRAM_CTRL_GENCMD                                                          */
  MRAM_CTRL_GENCMD_TERMINATE           = 0,     /*!< TERMINATE : Terminate the programming operation.                          */
  MRAM_CTRL_GENCMD_GO                  = 1,     /*!< GO : Initiate a programming operation to flash data.                      */
} MRAM_CTRL_GENCMD_Enum;

/* ===============================================  MRAM CTRL PROGRAM [2..2]  ================================================ */
typedef enum {                                  /*!< MRAM_CTRL_PROGRAM                                                         */
  MRAM_CTRL_PROGRAM_TERMINATE          = 0,     /*!< TERMINATE : Terminate the programming operation.                          */
  MRAM_CTRL_PROGRAM_GO                 = 1,     /*!< GO : Initiate a programming operation to flash data.                      */
} MRAM_CTRL_PROGRAM_Enum;

/* ===============================================  MRAM CTRL CLRLOAD [1..1]  ================================================ */
typedef enum {                                  /*!< MRAM_CTRL_CLRLOAD                                                         */
  MRAM_CTRL_CLRLOAD_GO                 = 1,     /*!< GO : Initiate a programming operation to flash info.                      */
} MRAM_CTRL_CLRLOAD_Enum;

/* =================================================  MRAM CTRL LOAD [0..0]  ================================================= */
typedef enum {                                  /*!< MRAM_CTRL_LOAD                                                            */
  MRAM_CTRL_LOAD_GO                    = 1,     /*!< GO : Initiate a programming operation to flash info.                      */
} MRAM_CTRL_LOAD_Enum;

/* ========================================================  ACCESS  ========================================================= */
/* ==============================================  MRAM ACCESS ACCESS [0..31]  =============================================== */
typedef enum {                                  /*!< MRAM_ACCESS_ACCESS                                                        */
  MRAM_ACCESS_ACCESS_Key               = 195,   /*!< Key : Key value to unlock the register.                                   */
} MRAM_ACCESS_ACCESS_Enum;

/* ========================================================  TMCCMD  ========================================================= */
/* ===============================================  MRAM TMCCMD TMCCMD [0..4]  =============================================== */
typedef enum {                                  /*!< MRAM_TMCCMD_TMCCMD                                                        */
  MRAM_TMCCMD_TMCCMD_NOP               = 0,     /*!< NOP : No operation                                                        */
  MRAM_TMCCMD_TMCCMD_READ              = 1,     /*!< READ : Perform read                                                       */
  MRAM_TMCCMD_TMCCMD_LOAD              = 2,     /*!< LOAD : Perform buffer load (pre-programming step)                         */
  MRAM_TMCCMD_TMCCMD_WRITE             = 3,     /*!< WRITE : Perform buffer write                                              */
  MRAM_TMCCMD_TMCCMD_CLRLOAD           = 4,     /*!< CLRLOAD : Clear Load Buffers                                              */
  MRAM_TMCCMD_TMCCMD_WRITECFG          = 5,     /*!< WRITECFG : Write Config                                                   */
  MRAM_TMCCMD_TMCCMD_READCFG           = 6,     /*!< READCFG : Read Config                                                     */
  MRAM_TMCCMD_TMCCMD_WAKEUP            = 12,    /*!< WAKEUP : Wake up command                                                  */
  MRAM_TMCCMD_TMCCMD_AUTOWAKEUP        = 13,    /*!< AUTOWAKEUP : Auto Wake up command                                         */
  MRAM_TMCCMD_TMCCMD_RECALL            = 22,    /*!< RECALL : Recall                                                           */
} MRAM_TMCCMD_TMCCMD_Enum;

#define MRAM                        ((MRAM_Type*)              MRAM_BASE)

#ifdef __cplusplus
}
#endif

#endif /* APOLLO4B_MRAM_H */

