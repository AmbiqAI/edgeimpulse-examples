
#ifndef PAH8002SET_H
#define PAH8002SET_H

#ifdef __cplusplus
extern "C"
{
#endif
#include "stdint.h"
#include "stdbool.h"
//#define DEBUG_8002
//#define LOG_8002
#define I2C_ID_PAH8002	0x15 //7-bit I2C address

uint8_t writeRegister(uint8_t addr, uint8_t data);
uint8_t readRegister(uint8_t addr, uint8_t *data);
uint8_t burstreadRegister(uint8_t addr, uint8_t *data, uint32_t rx_size);
uint32_t get_sys_tick(void);

//Accelerometer Sensor Functions
bool accelerometer_init(void);
void accelerometer_get_fifo(int16_t **fifo, uint32_t *fifo_size);
void accelerometer_start(void);
void accelerometer_stop(void);
#define I2C_ID_ACCEL	0x69
#define ACCE_FIFO_DEPTH 32

static int16_t _g_sensor_data[ACCE_FIFO_DEPTH*3] ;
static uint8_t _bmi160_exist = 0 ;

//Algorithm API Return Value
enum
{
    MSG_SUCCESS = 0,            //Normal
    MSG_ALG_NOT_OPEN,           //Without call pah8002_open(); function
    MSG_ALG_REOPEN,             //Call pah8002_open(); function more than 1 time
    MSG_MEMS_LEN_TOO_SHORT,     //Numbers of Accelerometer data(X,Y,Z) is shorter than Numbers of PPG data per channel
    MSG_NO_TOUCH,               //De-touch
    MSG_PPG_LEN_TOO_SHORT,      //Numbers of PPG data per channel is too short, ex. < 5 at 20Hz will return this flag
    MSG_FRAME_LOSS,             //Frame is not continuous
    MSG_HR_READY = 0x30,        //Heart rate value ready flag. MCU can get heart rate after getting this flag
};

//Algorithm API Data Format
typedef struct pah8002_data {
    uint8_t    frame_count;    //Frame Count
    uint32_t    time;           //FIFO Data Ready Interval, unit ms
    uint8_t     touch_flag;     //Touch Status, 1 for Touch and 0 for De-Touch 
    uint32_t    nf_ppg_channel; //Using channel numbers, ex.3
    uint32_t    nf_ppg_per_channel; //Numbers of PPG data per channel, ex.20 
    int32_t     *ppg_data;      //Pointer to FIFO Raw Data
    uint32_t    nf_mems;        //Numbers of Accelerometer data(X,Y,Z), must larger or equal than numbers of PPG data per channel, ex.25
    int16_t     *mems_data;     //Pointer to Accelerometer data
} pah8002_data_t;

//Algorithm API
#define PXIALG_API
PXIALG_API uint32_t pah8002_version(void);      //Call this function to determine the version of PXI algorithm.
PXIALG_API uint8_t pah8002_open(void);          //Call this function to open PXI algorithm.
PXIALG_API uint8_t pah8002_close(void);         //Call this function to close/reset PXI algorithm.
PXIALG_API uint8_t pah8002_entrance(pah8002_data_t *data8002);  //Call this function to send 8002 data to PXI algorithm.
PXIALG_API uint8_t pah8002_get_signal_grade(int16_t *grade);    //Call this function to get PPG signal grade. High signal grade is meant high signal quality.
PXIALG_API uint8_t pah8002_get_hr(float *hr);//Call this function to get heart rate value.

//Generic Parameters and Functions
#define TOTAL_CHANNELS  4   //Using channel numbers
#define HEART_RATE_MODE_SAMPLES_PER_CH_READ (15)    //Numbers of PPG data per channel
#define HEART_RATE_MODE_SAMPLES_PER_READ (TOTAL_CHANNELS* HEART_RATE_MODE_SAMPLES_PER_CH_READ)
#define TOTAL_CHANNELS_FOR_ALG	3  
//#define MEMS_ZERO   //Default accelerometer data are all zero
//#define PPG_MODE_ONLY
enum{   //Operation modes
    SUSPEND_MODE = 0,
    TOUCH_MODE,
    NORMAL_MODE,
    NORMAL_LONG_ET_MODE,
	STRESS_MODE,
	NONE,
};

static uint8_t _mode = NONE ;
static uint8_t pah8002_ppg_data[HEART_RATE_MODE_SAMPLES_PER_READ * 4] ;
static uint8_t _touch_flag = 0 ;
static volatile uint8_t _pah8002_interrupt = 0 ;
static pah8002_data_t _pah8002_data;
static uint32_t _timestamp = 0 ;
#ifdef MEMS_ZERO
static int16_t _mems_data[HEART_RATE_MODE_SAMPLES_PER_READ * 3] ;
#endif

static uint8_t _ir_dac = 0 ;
static uint8_t _ir_expo = 0 ;
static uint8_t _chip_id = 0 ;

bool pah8002_init(void);
uint8_t pah8002_task(void);
void pah8002_intr_isr(void);

static bool pah8002_sw_reset(void);
static bool pah8002_start(void);
static int pah8002_wakeup(void);
static int pah8002_check(void);

#define INIT_TOUCH_REG_ARRAY_SIZE (sizeof(init_touch_register_array)/sizeof(init_touch_register_array[0]))
#define INIT_PPG_REG_ARRAY_SIZE (sizeof(init_ppg_register_array)/sizeof(init_ppg_register_array[0]))
#define SUSPEND_REG_ARRAY_SIZE (sizeof(suspend_register_array)/sizeof(suspend_register_array[0]))
#define INIT_STRESS_REG_ARRAY_SIZE (sizeof(init_stress_register_array)/sizeof(init_stress_register_array[0]))
#define INIT_PPG_LONG_REG_ARRAY_SIZE (sizeof(init_ppg_long_register_array)/sizeof(init_ppg_long_register_array[0]))

//PAH8002 Setting for Different Modes
//Touch mode settings
static const uint8_t init_touch_register_array[][2] = {
{0x7f, 0x01},  //switch to bank1
{0x4C, 0x00},
{0xe6, 0xC8}, 
{0xe7, 0x00}, 
{0xF1, 0x00},
{0x07, 0x01},
{0xAE, 0x06},
{0xAF, 0x07},
//{0xBA, 0x48},
{0x6C, 0x10},
{0x6D, 0x10},
{0x7A, 0x01},
{0x6F, 0x10},
{0x7F, 0x00},  //switch to bank0
{0x08, 0xFF},
{0x09, 0x03},
{0x5A, 0x01},
{0x5C, 0x58}, //Touch Threshold
{0x5D, 0x02},
{0x60, 0x00},
{0x61, 0x02},
{0x64, 0x01},
{0x65, 0x01},
{0x35, 0x80},
{0x36, 0x02},
{0x84, 0x78},
{0x8C, 0x00},
{0x8E, 0x00},
{0xDE, 0x00},
{0xD9, 0x01},
{0xDD, 0x04},
{0x3B, 0x01},
{0x43, 0x00},
{0x47, 0x01},
{0x48, 0x00},
{0x49, 0x00},
{0x4A, 0x01},
{0x4D, 0x01},
{0x16, 0x01},
{0x13, 0x01},
{0x14, 0x01},
{0x15, 0x01},
{0x50, 0x01},
{0x51, 0x01},
{0x59, 0x00},
{0x57, 0x00},
{0x6B, 0x00},
{0x6C, 0x00},
{0x3E, 0x00},
{0x0D, 0x78},
{0x0E, 0x00},
{0x7F, 0x02},  //switch to bank2
{0x25, 0x04},
{0x29, 0x00},
{0x2d, 0x01},
{0x4F, 0x0C},
{0x66, 0x01},
{0x67, 0x01},
{0x68, 0x01},
{0x69, 0x01},
{0x6A, 0x01},
{0x6B, 0x01},
{0x6C, 0x01},
{0x6D, 0x01},
{0x6E, 0x01},
{0x6F, 0x01},
{0x70, 0x01},
{0x74, 0x01},
{0x76, 0x01},
{0x8D, 0x01},
{0x8F, 0x01},
{0x92, 0x00},
{0x7F, 0x01},  //switch to bank1
{0xA2, 0x40},
{0x7C, 0x01},
{0x4F, 0x07},
{0x3F, 0x04},
{0x0C, 0x05},
{0x4D, 0x05},
{0x52, 0x05},
{0x86, 0x50},
{0x92, 0x1C},
{0x98, 0x1D},
{0x9A, 0x42},
{0x81, 0x01},
{0x3B, 0x00},
{0xEA, 0xC9},
{0xA4, 0x50},
{0xA5, 0x00},
{0xA6, 0x52},
{0xA7, 0x00},
{0xA8, 0x53},
{0xA9, 0x00},
{0xD6, 0xFF},
{0xD7, 0x1F},
{0xD8, 0x01},
{0xD9, 0x00},
{0xDA, 0x10},
{0xDB, 0x00},
{0xDC, 0x16},
{0xDD, 0x00},
{0xDE, 0x17},
{0xDF, 0x00},
{0xE0, 0xFE},
{0xE1, 0x1F},
};

//PPG mode settings, 20Hz
static const uint8_t init_ppg_register_array[][2] = {
{0x7f, 0x01}, //switch to bank1
{0xE6, 0xC8},
{0xE7, 0x00},
{0x07, 0x01},
{0xAE, 0x06},
{0xAF, 0x07},
{0x4D, 0x00},
//{0xBA, 0x48},
{0xBB, 0x7C},
{0xBC, 0x7C},
{0xBD, 0x06},
{0xBE, 0x06},
{0xBF, 0x06},
{0xB1, 0x06},
{0xB2, 0x06},
{0xB3, 0x06},
{0x6A, 0x00}, 
{0x6B, 0x01}, 
{0x6C, 0x10},
{0x6D, 0x10},
{0x7A, 0x00},
{0x6F, 0x10},
{0x7F, 0x00}, //switch to bank0
{0x08, 0xFF},
{0x09, 0x03},
{0x4F, 0x0C},
{0xE6, 0x07},
{0x8C, 0x00},
{0xAE, 0x01},
{0xD0, 0x01},
{0x8E, 0x00},
{0xD2, 0x01},
{0xB0, 0x01},
{0x27, 0x80},
{0x28, 0x12},
{0x35, 0xC0},
{0x36, 0x12},
{0x37, 0xC0},
{0x38, 0x12},
{0x39, 0xC0},
{0x3A, 0x12},
{0xDE, 0x00},
{0xD9, 0x01},
{0xDD, 0x04},
{0x3B, 0x01},
{0x3C, 0x15},
{0x3D, 0x15},
{0x47, 0x01},
{0x48, 0x01},
{0x49, 0x01},
{0x4A, 0x01},
{0x4B, 0x00},
{0x4C, 0x00},
{0x4D, 0x00},
{0x16, 0x00},
{0x13, 0x01},
{0x14, 0x01},
{0x15, 0x01},
{0x50, 0x00},
{0x59, 0x00},
{0x56, 0x00},
{0x57, 0x00},
{0x6B, 0x01},
{0x6C, 0x00},
{0x8F, 0x01},
{0xB1, 0x01},
{0x3E, 0x02},
{0x3F, 0x04},
{0x40, 0x04},
{0x0D, 0x78},
{0x0E, 0x00}, 
{0x0F, 0xF0},
{0x10, 0x00},
{0x11, 0xF0},
{0x12, 0x00},
{0x6D, 0xF0},
{0x6E, 0x00},
{0x6F, 0x00},
{0x70, 0x02},
{0x71, 0x10},
{0x72, 0x00},
{0x77, 0x00},
{0x78, 0x0C},
{0x79, 0x00},
{0x7A, 0x08},
{0x7B, 0x00},
{0x7C, 0x0B},
{0x7D, 0x00},
{0x7E, 0x09},
{0x80, 0x00},
{0x81, 0x0D},
{0x82, 0x00},
{0x83, 0x07},
{0x85, 0x01},
{0x90, 0xF0},
{0x91, 0x00},
{0x92, 0x20},
{0x93, 0x12},
{0x94, 0x10},
{0x95, 0x00},
{0x9A, 0x00},
{0x9B, 0x0C},
{0x9C, 0x00},
{0x9D, 0x08},
{0x9E, 0x00},
{0x9F, 0x0B},
{0xA0, 0x00},
{0xA1, 0x09},
{0xA2, 0x00},
{0xA3, 0x0D},
{0xA4, 0x00},
{0xA5, 0x07},
{0xA7, 0x01},
{0xB2, 0xF0},
{0xB3, 0x00},
{0xB4, 0x20},
{0xB5, 0x12},
{0xB6, 0x10},
{0xB7, 0x00},
{0xBC, 0x00},
{0xBD, 0x0C},
{0xBE, 0x00},
{0xBF, 0x08},
{0xC0, 0x00},
{0xC1, 0x0B},
{0xC2, 0x00},
{0xC3, 0x09},
{0xC4, 0x00},
{0xC5, 0x0D},
{0xC6, 0x00},
{0xC7, 0x07},
{0xC9, 0x01},
{0x7F, 0x02}, //switch to bank2
{0x25, 0x02},
{0x29, 0x00},
{0x2d, 0x01},
{0x4F, 0x10},
{0x66, 0x01},
{0x67, 0x01},
{0x68, 0x01},
{0x69, 0x01},
{0x6A, 0x01},
{0x6B, 0x01},
{0x6C, 0x01},
{0x6D, 0x01},
{0x6E, 0x01},
{0x70, 0x01},
{0x7B, 0xFF},
{0x7F, 0x01}, //switch to bank1
{0xA2, 0x40},
{0x7C, 0x01},
{0x4F, 0x07},
{0x3F, 0x04},
{0x0C, 0x05},
{0x4D, 0x05},
{0x52, 0x05},
{0x86, 0x50},
{0x92, 0x1C},
{0x98, 0x1D},
{0x9A, 0x42},
{0x81, 0x01},
{0x3B, 0x00},
{0xEA, 0xC9},
{0xA4, 0x50},
{0xA5, 0x00},
{0xA6, 0x52},
{0xA7, 0x00},
{0xA8, 0x53},
{0xA9, 0x00},
{0xD6, 0x40},
{0xD7, 0x06},
{0xD8, 0x01},
{0xD9, 0x00},
{0xDA, 0x11},
{0xDB, 0x00},
{0xDC, 0x84},
{0xDD, 0x02},
{0xDE, 0x85},
{0xDF, 0x02},
{0xE0, 0x3F},
{0xE1, 0x06},
};

//Sleep mode settings
static const uint8_t suspend_register_array[][2] = {
{0x7f, 0x01}, //switch to bank1
{0x09, 0x01},
{0x23, 0x01},
{0xB4, 0x01},
{0xB7, 0x01},
{0xE6, 0xC8},
{0xE7, 0x00},
{0xF1, 0x00},
{0x07, 0x01}, 
{0xAE, 0x06}, 
{0xAF, 0x07}, 
{0xBA, 0x48}, 
{0x6C, 0x10}, 
{0x6D, 0x10}, 
{0x7A, 0x00},
{0x6F, 0x10}, 
{0x7F, 0x00}, //switch to bank0
{0x08, 0xFF},
{0x09, 0x03},
{0xD6, 0x01},
{0x5C, 0x00},
{0x5D, 0x05},
{0x60, 0x00},
{0x61, 0x03},
{0x64, 0x05},
{0x65, 0x05},
{0x35, 0x80},
{0x36, 0x02},
{0x8C, 0x00},
{0x8E, 0x00},
{0xDE, 0x00},
{0xD9, 0x01},
{0xDD, 0x04},
{0x3B, 0x01},
{0x47, 0x01},
{0x48, 0x00},
{0x49, 0x00},
{0x4A, 0x00},
{0x4D, 0x00},
{0x16, 0x00},
{0x13, 0x01},
{0x14, 0x01},
{0x15, 0x01},
{0x50, 0x01},
{0x51, 0x01},
{0x59, 0x00},
{0x57, 0x00},
{0x6B, 0x00},
{0x6C, 0x00},
{0x3E, 0x00},
{0x43, 0x00},
{0x0D, 0x78},
{0x0E, 0x00},
{0x7F, 0x02},//switch to bank2
{0x17, 0x00},
{0x18, 0x00},
{0x1F, 0x00},
{0x29, 0x00},
{0x2d, 0x01},
{0x2B, 0x00},
{0x2C, 0x00},
{0x31, 0x00}, 
{0x4F, 0x10},
{0x66, 0x01},
{0x67, 0x01},
{0x68, 0x01},
{0x69, 0x01},
{0x6A, 0x01},
{0x6B, 0x01},
{0x6C, 0x01},
{0x6D, 0x01},
{0x6E, 0x01},
{0x6F, 0x01},
{0x70, 0x01},
{0x74, 0x00},
{0x76, 0x01},
{0x78, 0x01},
{0x7A, 0x01},
{0x7B, 0xFF},
{0x8D, 0x01},
{0x8F, 0x01},
{0x92, 0x00},
{0x7F, 0x01},//switch to bank1
{0xA2, 0x40},
{0x7C, 0x01},
{0x4C, 0x01},
{0x4F, 0x07},
{0x3F, 0x04},
{0x0C, 0x05},
{0x4D, 0x05},
{0x52, 0x05},
{0x86, 0x50},
{0x92, 0x1C},
{0x98, 0x1D},
{0x9A, 0x42},
{0x81, 0x01},
{0x3B, 0x00},
{0xEA, 0xC9},
{0xA4, 0x50},
{0xA5, 0x00},
{0xA6, 0x52},
{0xA7, 0x00},
{0xA8, 0x53},
{0xA9, 0x00},
{0xD6, 0xFF},
{0xD7, 0x1F},
{0xD8, 0x01},
{0xD9, 0x00},
{0xDA, 0x10},
{0xDB, 0x00},
{0xDC, 0x13},
{0xDD, 0x00},
{0xDE, 0x14},
{0xDF, 0x00},
{0xE0, 0xFE},
{0xE1, 0x1F},
{0x7F, 0x01}, //switch to bank1
{0xd5, 0x01},
};

//PPG mode settings, 200Hz
static const uint8_t init_stress_register_array[][2] = {
{0x7f, 0x01}, //switch to bank1
{0xE6, 0xC8},
{0xE7, 0x00},
{0x07, 0x01}, 
{0xAE, 0x06}, 
{0xAF, 0x07}, 
{0x4D, 0x00},
//{0xBA, 0x48},
{0xBB, 0x7C},
{0xBC, 0x7C},
{0xBD, 0x06},
{0xBE, 0x06},
{0xBF, 0x06},
{0xB1, 0x06},
{0xB2, 0x06},
{0xB3, 0x06},
{0x6A, 0x00},
{0x6B, 0x01},
{0x6C, 0x10},
{0x6D, 0x10},
{0x7A, 0x00},
{0x6F, 0x08},
{0x7F, 0x00},//switch to bank0
{0x08, 0xFF},
{0x09, 0x03},
{0x4F, 0x0C},
{0xE6, 0x07},
{0x8C, 0x00},
{0xAE, 0x01},
{0xD0, 0x01},
{0x8E, 0x00},
{0xD2, 0x01},
{0xB0, 0x01},
{0x27, 0x60},
{0x28, 0x0F},
{0x35, 0xA0},
{0x36, 0x0F},
{0x37, 0xA0},
{0x38, 0x0F},
{0x39, 0xA0},
{0x3A, 0x0F},
{0xDE, 0x00},
{0xD9, 0x01},
{0xDD, 0x04},
{0x3B, 0x01},
{0x3C, 0x02},
{0x3D, 0x02},
{0x43, 0x00},
{0x44, 0x00},
{0x45, 0x00},
{0x47, 0x01},
{0x48, 0x01},
{0x49, 0x01},
{0x4A, 0x01},
{0x4B, 0x00},
{0x4C, 0x00},
{0x4D, 0x00},
{0x16, 0x00},
{0x13, 0x01},
{0x14, 0x01},
{0x15, 0x01},
{0x50, 0x00},
{0x59, 0x00},
{0x56, 0x00},
{0x57, 0x00},
{0x6B, 0x01},
{0x6C, 0x00},
{0x8F, 0x01},
{0xB1, 0x01},
{0x3E, 0x00},
{0x3F, 0x00},
{0x40, 0x00},
{0x0D, 0x78},
{0x0E, 0x00},
{0x0F, 0xF0},
{0x10, 0x00},
{0x11, 0xF0},
{0x12, 0x00},
{0x6D, 0xF0},
{0x6E, 0x00},
{0x6F, 0x00},
{0x70, 0x02},
{0x71, 0x10},
{0x72, 0x00},
{0x77, 0x00},
{0x78, 0x0C},
{0x79, 0x00},
{0x7A, 0x08},
{0x7B, 0x00},
{0x7C, 0x0B},
{0x7D, 0x00},
{0x7E, 0x09},
{0x80, 0x00},
{0x81, 0x0D},
{0x82, 0x00},
{0x83, 0x07},
{0x85, 0x01},
{0x90, 0xF0},
{0x91, 0x00},
{0x92, 0x40},
{0x93, 0x0F},
{0x94, 0x10},
{0x95, 0x00},
{0x9A, 0x00},
{0x9B, 0x0C},
{0x9C, 0x00},
{0x9D, 0x08},
{0x9E, 0x00},
{0x9F, 0x0B},
{0xA0, 0x00},
{0xA1, 0x09},
{0xA2, 0x00},
{0xA3, 0x0D},
{0xA4, 0x00},
{0xA5, 0x07},
{0xA7, 0x01},
{0xB2, 0xF0},
{0xB3, 0x00},
{0xB4, 0x40},
{0xB5, 0x0F},
{0xB6, 0x10},
{0xB7, 0x00},
{0xBC, 0x00},
{0xBD, 0x0C},
{0xBE, 0x00},
{0xBF, 0x08},
{0xC0, 0x00},
{0xC1, 0x0B},
{0xC2, 0x00},
{0xC3, 0x09},
{0xC4, 0x00},
{0xC5, 0x0D},
{0xC6, 0x00},
{0xC7, 0x07},
{0xC9, 0x01},
{0x7F, 0x02},//switch to bank2
{0x25, 0x02},
{0x29, 0x00},
{0x2d, 0x01},
{0x4F, 0x0C},
{0x66, 0x01},
{0x67, 0x01},
{0x68, 0x01},
{0x69, 0x01},
{0x6A, 0x01},
{0x6D, 0x01},
{0x6E, 0x01},
{0x70, 0x01},
{0x7B, 0xFF},
{0x7F, 0x01},//switch to bank1
{0x22, 0x50},
{0x48, 0x50},
{0xA2, 0x40},
{0x7C, 0x01},
{0x4F, 0x07},
{0x3F, 0x04},
{0x0C, 0x05},
{0x4D, 0x05},
{0x52, 0x05},
{0x86, 0x50},
{0x92, 0x1C},
{0x98, 0x1D},
{0x9A, 0x42},
{0x81, 0x01},
{0x3B, 0x00},
{0xEA, 0xC9},
{0xA4, 0x50},
{0xA5, 0x00},
{0xA6, 0x52},
{0xA7, 0x00},
{0xA8, 0x53},
{0xA9, 0x00},
{0xD6, 0xA0},
{0xD7, 0x00},
{0xD8, 0x01},
{0xD9, 0x00},
{0xDA, 0x2C},
{0xDB, 0x00},
{0xDC, 0x8B},
{0xDD, 0x00},
{0xDE, 0x8C},
{0xDF, 0x00},
{0xE0, 0x9F},
{0xE1, 0x00},
};

//
static const uint8_t init_ppg_long_register_array[][2] = {
{0x7f, 0x01},   //switch to bank1
{0xE6, 0xC8},
{0xE7, 0x00},
{0x07, 0x01},
{0xAE, 0x06},
{0xAF, 0x07},
{0x4D, 0x00},
//{0xBA, 0x48},
{0xBB, 0x7C},
{0xBC, 0x7C},
{0xBD, 0x06},
{0xBE, 0x06},
{0xBF, 0x06},
{0xB1, 0x06},
{0xB2, 0x06},
{0xB3, 0x06},
{0x6A, 0x00}, 
{0x6B, 0x01}, 
{0x6C, 0x10},
{0x6D, 0x10},
{0x7A, 0x00},
{0x6F, 0x10},
{0x7F, 0x00},   //switch to bank0
{0x08, 0xFF},
{0x09, 0x03},
{0x4F, 0x0C},
{0xE6, 0x07},
{0x8C, 0x00},
{0xAE, 0x01},
{0xD0, 0x01},
{0x8E, 0x00},
{0xD2, 0x01},
{0xB0, 0x01},
{0x27, 0x40},
{0x28, 0x25},
{0x35, 0x80},
{0x36, 0x25},
{0x37, 0x80},
{0x38, 0x25},
{0x39, 0x80},
{0x3A, 0x25},
{0xDE, 0x00},
{0xD9, 0x01},
{0xDD, 0x04},
{0x3B, 0x01},
{0x3C, 0x0A},
{0x3D, 0x0A},
{0x47, 0x01},
{0x48, 0x01},
{0x49, 0x01},
{0x4A, 0x01},
{0x4B, 0x00},
{0x4C, 0x00},
{0x4D, 0x00},
{0x16, 0x00},
{0x13, 0x01},
{0x14, 0x01},
{0x15, 0x01},
{0x50, 0x00},
{0x59, 0x00},
{0x56, 0x00},
{0x57, 0x00},
{0x6B, 0x01},
{0x6C, 0x00},
{0x8F, 0x01},
{0xB1, 0x01},
{0x3E, 0x02},
{0x3F, 0x02},
{0x40, 0x02},
{0x0D, 0x78},
{0x0E, 0x00}, 
{0x0F, 0xF0},
{0x10, 0x00},
{0x11, 0xF0},
{0x12, 0x00},
{0x6D, 0xF0},
{0x6E, 0x00},
{0x6F, 0x00},
{0x70, 0x02},
{0x71, 0x10},
{0x72, 0x00},
{0x77, 0x00},
{0x78, 0x0C},
{0x79, 0x00},
{0x7A, 0x08},
{0x7B, 0x00},
{0x7C, 0x0B},
{0x7D, 0x00},
{0x7E, 0x09},
{0x80, 0x00},
{0x81, 0x0D},
{0x82, 0x00},
{0x83, 0x07},
{0x85, 0x01},
{0x90, 0xF0},
{0x91, 0x00},
{0x92, 0x00},
{0x93, 0x25},
{0x94, 0x10},
{0x95, 0x00},
{0x9A, 0x00},
{0x9B, 0x0C},
{0x9C, 0x00},
{0x9D, 0x08},
{0x9E, 0x00},
{0x9F, 0x0B},
{0xA0, 0x00},
{0xA1, 0x09},
{0xA2, 0x00},
{0xA3, 0x0D},
{0xA4, 0x00},
{0xA5, 0x07},
{0xA7, 0x01},
{0xB2, 0xF0},
{0xB3, 0x00},
{0xB4, 0x00},
{0xB5, 0x25},
{0xB6, 0x10},
{0xB7, 0x00},
{0xBC, 0x00},
{0xBD, 0x0C},
{0xBE, 0x00},
{0xBF, 0x08},
{0xC0, 0x00},
{0xC1, 0x0B},
{0xC2, 0x00},
{0xC3, 0x09},
{0xC4, 0x00},
{0xC5, 0x0D},
{0xC6, 0x00},
{0xC7, 0x07},
{0xC9, 0x01},
{0x7F, 0x02},   //switch to bank2
{0x25, 0x02},
{0x29, 0x00},
{0x2d, 0x01},
{0x4F, 0x10},
{0x66, 0x01},
{0x67, 0x01},
{0x68, 0x01},
{0x69, 0x01},
{0x6A, 0x01},
{0x6B, 0x01},
{0x6C, 0x01},
{0x6D, 0x01},
{0x6E, 0x01},
{0x70, 0x01},
{0x7B, 0xFF},
{0x7F, 0x01},   //switch to bank1
{0xA2, 0x40},
{0x7C, 0x01},
{0x4F, 0x07},
{0x3F, 0x04},
{0x0C, 0x05},
{0x4D, 0x05},
{0x52, 0x05},
{0x86, 0x50},
{0x92, 0x1C},
{0x98, 0x1D},
{0x9A, 0x42},
{0x81, 0x01},
{0x3B, 0x00},
{0xEA, 0xC9},
{0xA4, 0x50},
{0xA5, 0x00},
{0xA6, 0x52},
{0xA7, 0x00},
{0xA8, 0x53},
{0xA9, 0x00},
{0xD6, 0x40},
{0xD7, 0x06},
{0xD8, 0x01},
{0xD9, 0x00},
{0xDA, 0x11},
{0xDB, 0x00},
{0xDC, 0xC4},
{0xDD, 0x02},
{0xDE, 0xC5},
{0xDF, 0x02},
{0xE0, 0x3F},
{0xE1, 0x06},
};

#ifdef __cplusplus
}
#endif

#endif // PAH8002SET_H

