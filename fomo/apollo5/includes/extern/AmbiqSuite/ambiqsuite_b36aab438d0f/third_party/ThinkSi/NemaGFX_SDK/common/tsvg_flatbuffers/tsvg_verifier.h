/* TSI 2023.gen */
// -----------------------------------------------------------------------------
// Copyright (c) 2008-23 Think Silicon Single Member PC
// Think Silicon Single Member PC Confidential Proprietary
// -----------------------------------------------------------------------------
//     All Rights reserved - Unpublished -rights reserved under
//         the Copyright laws of the European Union
//
//  This file includes the Confidential information of Think Silicon Single
//  Member PC The receiver of this Confidential Information shall not disclose
//  it to any third party and shall protect its confidentiality by using the
//  same degree of care, but not less then a reasonable degree of care, as the
//  receiver uses to protect receiver's own Confidential Information. The entire
//  notice must be reproduced on all authorized copies and copies may only be
//  made to the extent permitted by a licensing agreement from Think Silicon
//  Single Member PC.
//
//  The software/data is provided 'as is', without warranty of any kind,
//  expressed or implied, including but not limited to the warranties of
//  merchantability, fitness for a particular purpose and noninfringement. In no
//  event shall Think Silicon Single Member PC be liable for any claim, damages
//  or other liability, whether in an action of contract, tort or otherwise,
//  arising from, out of or in connection with the software.
//
//  For further information please contact:
//
//                    Think Silicon Single Member PC
//                    http://www.think-silicon.com
//                    Patras Science Park
//                    Rion Achaias 26504
//                    Greece
// -----------------------------------------------------------------------------

#ifndef TSVG_VERIFIER_H
#define TSVG_VERIFIER_H

/* Generated by flatcc 0.6.1-dev FlatBuffers schema compiler for C by dvide.com */

#ifndef TSVG_READER_H
#include "tsvg_reader.h"
#endif
#include "flatcc/flatcc_verifier.h"
#include "flatcc/flatcc_prologue.h"

static int Path_verify_table(flatcc_table_verifier_descriptor_t *td);
static int Grad_verify_table(flatcc_table_verifier_descriptor_t *td);
static int Paint_verify_table(flatcc_table_verifier_descriptor_t *td);
static int Predefined_verify_table(flatcc_table_verifier_descriptor_t *td);
static int Text_verify_table(flatcc_table_verifier_descriptor_t *td);
static int Stroke_verify_table(flatcc_table_verifier_descriptor_t *td);
static int Geometry_verify_table(flatcc_table_verifier_descriptor_t *td);
static int Svg_verify_table(flatcc_table_verifier_descriptor_t *td);

static int Path_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_vector_field(td, 0, 0, 1, 1, INT64_C(4294967295)) /* seg */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 1, 0, 4, 4, INT64_C(1073741823)) /* data */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 2, 0, 4, 4, INT64_C(1073741823)) /* matrix */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 3, 0, 4, 4, INT64_C(1073741823)) /* bbox */)) return ret;
    return flatcc_verify_ok;
}

static inline int Path_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, Path_identifier, &Path_verify_table);
}

static inline int Path_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, Path_type_identifier, &Path_verify_table);
}

static inline int Path_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &Path_verify_table);
}

static inline int Path_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &Path_verify_table);
}

static int Grad_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 4, 4) /* x1 */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 4, 4) /* y1 */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 4, 4) /* x2 */)) return ret;
    if ((ret = flatcc_verify_field(td, 3, 4, 4) /* y2 */)) return ret;
    if ((ret = flatcc_verify_field(td, 4, 4, 4) /* cx */)) return ret;
    if ((ret = flatcc_verify_field(td, 5, 4, 4) /* cy */)) return ret;
    if ((ret = flatcc_verify_field(td, 6, 4, 4) /* r */)) return ret;
    if ((ret = flatcc_verify_field(td, 7, 4, 4) /* sampling */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 8, 0, 4, 4, INT64_C(1073741823)) /* stops */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 9, 0, 4, 4, INT64_C(1073741823)) /* stopColors */)) return ret;
    if ((ret = flatcc_verify_field(td, 10, 1, 1) /* isLinear */)) return ret;
    if ((ret = flatcc_verify_field(td, 11, 4, 4) /* ry */)) return ret;
    if ((ret = flatcc_verify_field(td, 12, 1, 1) /* isUserSpace */)) return ret;
    return flatcc_verify_ok;
}

static inline int Grad_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, Grad_identifier, &Grad_verify_table);
}

static inline int Grad_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, Grad_type_identifier, &Grad_verify_table);
}

static inline int Grad_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &Grad_verify_table);
}

static inline int Grad_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &Grad_verify_table);
}

static int Paint_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 1, 1) /* type */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 4, 4) /* color */)) return ret;
    if ((ret = flatcc_verify_table_field(td, 2, 0, &Grad_verify_table) /* grad */)) return ret;
    if ((ret = flatcc_verify_field(td, 3, 4, 4) /* strokeWidth */)) return ret;
    if ((ret = flatcc_verify_field(td, 4, 4, 4) /* opacity */)) return ret;
    return flatcc_verify_ok;
}

static inline int Paint_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, Paint_identifier, &Paint_verify_table);
}

static inline int Paint_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, Paint_type_identifier, &Paint_verify_table);
}

static inline int Paint_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &Paint_verify_table);
}

static inline int Paint_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &Paint_verify_table);
}

static int Predefined_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 1, 1) /* shape */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 4, 4) /* x */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 4, 4) /* y */)) return ret;
    if ((ret = flatcc_verify_field(td, 3, 4, 4) /* x1 */)) return ret;
    if ((ret = flatcc_verify_field(td, 4, 4, 4) /* y1 */)) return ret;
    if ((ret = flatcc_verify_field(td, 5, 4, 4) /* x2 */)) return ret;
    if ((ret = flatcc_verify_field(td, 6, 4, 4) /* y2 */)) return ret;
    if ((ret = flatcc_verify_field(td, 7, 4, 4) /* width */)) return ret;
    if ((ret = flatcc_verify_field(td, 8, 4, 4) /* height */)) return ret;
    if ((ret = flatcc_verify_field(td, 9, 4, 4) /* rx */)) return ret;
    if ((ret = flatcc_verify_field(td, 10, 4, 4) /* ry */)) return ret;
    if ((ret = flatcc_verify_field(td, 11, 4, 4) /* r */)) return ret;
    if ((ret = flatcc_verify_field(td, 12, 4, 4) /* cx */)) return ret;
    if ((ret = flatcc_verify_field(td, 13, 4, 4) /* cy */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 14, 0, 4, 4, INT64_C(1073741823)) /* matrix */)) return ret;
    return flatcc_verify_ok;
}

static inline int Predefined_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, Predefined_identifier, &Predefined_verify_table);
}

static inline int Predefined_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, Predefined_type_identifier, &Predefined_verify_table);
}

static inline int Predefined_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &Predefined_verify_table);
}

static inline int Predefined_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &Predefined_verify_table);
}

static int Text_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 4, 4) /* x */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 4, 4) /* y */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 4, 4) /* size */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 3, 0) /* strText */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 4, 0, 4, 4, INT64_C(1073741823)) /* matrix */)) return ret;
    return flatcc_verify_ok;
}

static inline int Text_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, Text_identifier, &Text_verify_table);
}

static inline int Text_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, Text_type_identifier, &Text_verify_table);
}

static inline int Text_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &Text_verify_table);
}

static inline int Text_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &Text_verify_table);
}

static int Stroke_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 1, 1) /* join */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 1, 1) /* cap */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 4, 4) /* miterLimit */)) return ret;
    return flatcc_verify_ok;
}

static inline int Stroke_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, Stroke_identifier, &Stroke_verify_table);
}

static inline int Stroke_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, Stroke_type_identifier, &Stroke_verify_table);
}

static inline int Stroke_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &Stroke_verify_table);
}

static inline int Stroke_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &Stroke_verify_table);
}

static int Geometry_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_table_field(td, 0, 0, &Path_verify_table) /* path */)) return ret;
    if ((ret = flatcc_verify_table_field(td, 1, 0, &Paint_verify_table) /* fillPaint */)) return ret;
    if ((ret = flatcc_verify_table_field(td, 2, 0, &Paint_verify_table) /* strokePaint */)) return ret;
    if ((ret = flatcc_verify_field(td, 3, 1, 1) /* nonzero */)) return ret;
    if ((ret = flatcc_verify_table_field(td, 4, 0, &Predefined_verify_table) /* predefined */)) return ret;
    if ((ret = flatcc_verify_table_field(td, 5, 0, &Text_verify_table) /* text */)) return ret;
    if ((ret = flatcc_verify_table_field(td, 6, 0, &Stroke_verify_table) /* stroke */)) return ret;
    return flatcc_verify_ok;
}

static inline int Geometry_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, Geometry_identifier, &Geometry_verify_table);
}

static inline int Geometry_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, Geometry_type_identifier, &Geometry_verify_table);
}

static inline int Geometry_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &Geometry_verify_table);
}

static inline int Geometry_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &Geometry_verify_table);
}

static int Svg_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_table_vector_field(td, 0, 0, &Geometry_verify_table) /* geometries */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 4, 4) /* width */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 4, 4) /* height */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 3, 0, 4, 4, INT64_C(1073741823)) /* matrix */)) return ret;
    return flatcc_verify_ok;
}

static inline int Svg_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, Svg_identifier, &Svg_verify_table);
}

static inline int Svg_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, Svg_type_identifier, &Svg_verify_table);
}

static inline int Svg_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &Svg_verify_table);
}

static inline int Svg_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &Svg_verify_table);
}

#include "flatcc/flatcc_epilogue.h"
#endif /* TSVG_VERIFIER_H */
