/* TSI 2023.gen */
// -----------------------------------------------------------------------------
// Copyright (c) 2008-23 Think Silicon Single Member PC
// Think Silicon Single Member PC Confidential Proprietary
// -----------------------------------------------------------------------------
//     All Rights reserved - Unpublished -rights reserved under
//         the Copyright laws of the European Union
//
//  This file includes the Confidential information of Think Silicon Single
//  Member PC The receiver of this Confidential Information shall not disclose
//  it to any third party and shall protect its confidentiality by using the
//  same degree of care, but not less then a reasonable degree of care, as the
//  receiver uses to protect receiver's own Confidential Information. The entire
//  notice must be reproduced on all authorized copies and copies may only be
//  made to the extent permitted by a licensing agreement from Think Silicon
//  Single Member PC.
//
//  The software/data is provided 'as is', without warranty of any kind,
//  expressed or implied, including but not limited to the warranties of
//  merchantability, fitness for a particular purpose and noninfringement. In no
//  event shall Think Silicon Single Member PC be liable for any claim, damages
//  or other liability, whether in an action of contract, tort or otherwise,
//  arising from, out of or in connection with the software.
//
//  For further information please contact:
//
//                    Think Silicon Single Member PC
//                    http://www.think-silicon.com
//                    Patras Science Park
//                    Rion Achaias 26504
//                    Greece
// -----------------------------------------------------------------------------

#ifndef TSVG_READER_H
#define TSVG_READER_H

/* Generated by flatcc 0.6.1-dev FlatBuffers schema compiler for C by dvide.com */

#ifndef FLATBUFFERS_COMMON_READER_H
#include "flatbuffers_common_reader.h"
#endif
#include "flatcc/flatcc_flatbuffers.h"
#ifndef __alignas_is_defined
#include <stdalign.h>
#endif
#include "flatcc/flatcc_prologue.h"
#undef flatbuffers_identifier
#define flatbuffers_identifier "TSVG"
#undef flatbuffers_extension
#define flatbuffers_extension ".tsvg"


typedef const struct Path_table *Path_table_t;
typedef struct Path_table *Path_mutable_table_t;
typedef const flatbuffers_uoffset_t *Path_vec_t;
typedef flatbuffers_uoffset_t *Path_mutable_vec_t;
typedef const struct Grad_table *Grad_table_t;
typedef struct Grad_table *Grad_mutable_table_t;
typedef const flatbuffers_uoffset_t *Grad_vec_t;
typedef flatbuffers_uoffset_t *Grad_mutable_vec_t;
typedef const struct Paint_table *Paint_table_t;
typedef struct Paint_table *Paint_mutable_table_t;
typedef const flatbuffers_uoffset_t *Paint_vec_t;
typedef flatbuffers_uoffset_t *Paint_mutable_vec_t;
typedef const struct Predefined_table *Predefined_table_t;
typedef struct Predefined_table *Predefined_mutable_table_t;
typedef const flatbuffers_uoffset_t *Predefined_vec_t;
typedef flatbuffers_uoffset_t *Predefined_mutable_vec_t;
typedef const struct Text_table *Text_table_t;
typedef struct Text_table *Text_mutable_table_t;
typedef const flatbuffers_uoffset_t *Text_vec_t;
typedef flatbuffers_uoffset_t *Text_mutable_vec_t;
typedef const struct Stroke_table *Stroke_table_t;
typedef struct Stroke_table *Stroke_mutable_table_t;
typedef const flatbuffers_uoffset_t *Stroke_vec_t;
typedef flatbuffers_uoffset_t *Stroke_mutable_vec_t;
typedef const struct Geometry_table *Geometry_table_t;
typedef struct Geometry_table *Geometry_mutable_table_t;
typedef const flatbuffers_uoffset_t *Geometry_vec_t;
typedef flatbuffers_uoffset_t *Geometry_mutable_vec_t;
typedef const struct Svg_table *Svg_table_t;
typedef struct Svg_table *Svg_mutable_table_t;
typedef const flatbuffers_uoffset_t *Svg_vec_t;
typedef flatbuffers_uoffset_t *Svg_mutable_vec_t;
#ifndef Path_file_identifier
#define Path_file_identifier flatbuffers_identifier
#endif
/* deprecated, use Path_file_identifier */
#ifndef Path_identifier
#define Path_identifier flatbuffers_identifier
#endif
#define Path_type_hash ((flatbuffers_thash_t)0xeb66e456)
#define Path_type_identifier "\x56\xe4\x66\xeb"
#ifndef Grad_file_identifier
#define Grad_file_identifier flatbuffers_identifier
#endif
/* deprecated, use Grad_file_identifier */
#ifndef Grad_identifier
#define Grad_identifier flatbuffers_identifier
#endif
#define Grad_type_hash ((flatbuffers_thash_t)0x1fc6d539)
#define Grad_type_identifier "\x39\xd5\xc6\x1f"
#ifndef Paint_file_identifier
#define Paint_file_identifier flatbuffers_identifier
#endif
/* deprecated, use Paint_file_identifier */
#ifndef Paint_identifier
#define Paint_identifier flatbuffers_identifier
#endif
#define Paint_type_hash ((flatbuffers_thash_t)0x36b37bd3)
#define Paint_type_identifier "\xd3\x7b\xb3\x36"
#ifndef Predefined_file_identifier
#define Predefined_file_identifier flatbuffers_identifier
#endif
/* deprecated, use Predefined_file_identifier */
#ifndef Predefined_identifier
#define Predefined_identifier flatbuffers_identifier
#endif
#define Predefined_type_hash ((flatbuffers_thash_t)0x69823207)
#define Predefined_type_identifier "\x07\x32\x82\x69"
#ifndef Text_file_identifier
#define Text_file_identifier flatbuffers_identifier
#endif
/* deprecated, use Text_file_identifier */
#ifndef Text_identifier
#define Text_identifier flatbuffers_identifier
#endif
#define Text_type_hash ((flatbuffers_thash_t)0x3e142d5e)
#define Text_type_identifier "\x5e\x2d\x14\x3e"
#ifndef Stroke_file_identifier
#define Stroke_file_identifier flatbuffers_identifier
#endif
/* deprecated, use Stroke_file_identifier */
#ifndef Stroke_identifier
#define Stroke_identifier flatbuffers_identifier
#endif
#define Stroke_type_hash ((flatbuffers_thash_t)0xffb57955)
#define Stroke_type_identifier "\x55\x79\xb5\xff"
#ifndef Geometry_file_identifier
#define Geometry_file_identifier flatbuffers_identifier
#endif
/* deprecated, use Geometry_file_identifier */
#ifndef Geometry_identifier
#define Geometry_identifier flatbuffers_identifier
#endif
#define Geometry_type_hash ((flatbuffers_thash_t)0x243eddb1)
#define Geometry_type_identifier "\xb1\xdd\x3e\x24"
#ifndef Svg_file_identifier
#define Svg_file_identifier flatbuffers_identifier
#endif
/* deprecated, use Svg_file_identifier */
#ifndef Svg_identifier
#define Svg_identifier flatbuffers_identifier
#endif
#define Svg_type_hash ((flatbuffers_thash_t)0x49d22641)
#define Svg_type_identifier "\x41\x26\xd2\x49"

typedef uint8_t PredefinedShape_enum_t;
__flatbuffers_define_integer_type(PredefinedShape, PredefinedShape_enum_t, 8)
#define PredefinedShape_None ((PredefinedShape_enum_t)UINT8_C(0))
#define PredefinedShape_Rect ((PredefinedShape_enum_t)UINT8_C(1))
#define PredefinedShape_Line ((PredefinedShape_enum_t)UINT8_C(2))
#define PredefinedShape_Ellipse ((PredefinedShape_enum_t)UINT8_C(3))
#define PredefinedShape_Circle ((PredefinedShape_enum_t)UINT8_C(4))

static inline const char *PredefinedShape_name(PredefinedShape_enum_t value)
{
    switch (value) {
    case PredefinedShape_None: return "None";
    case PredefinedShape_Rect: return "Rect";
    case PredefinedShape_Line: return "Line";
    case PredefinedShape_Ellipse: return "Ellipse";
    case PredefinedShape_Circle: return "Circle";
    default: return "";
    }
}

static inline int PredefinedShape_is_known_value(PredefinedShape_enum_t value)
{
    switch (value) {
    case PredefinedShape_None: return 1;
    case PredefinedShape_Rect: return 1;
    case PredefinedShape_Line: return 1;
    case PredefinedShape_Ellipse: return 1;
    case PredefinedShape_Circle: return 1;
    default: return 0;
    }
}



struct Path_table { uint8_t unused__; };

static inline size_t Path_vec_len(Path_vec_t vec)
__flatbuffers_vec_len(vec)
static inline Path_table_t Path_vec_at(Path_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(Path_table_t, vec, i, 0)
__flatbuffers_table_as_root(Path)

__flatbuffers_define_vector_field(0, Path, seg, flatbuffers_uint8_vec_t, 0)
__flatbuffers_define_vector_field(1, Path, data, flatbuffers_float_vec_t, 0)
__flatbuffers_define_vector_field(2, Path, matrix, flatbuffers_float_vec_t, 0)
__flatbuffers_define_vector_field(3, Path, bbox, flatbuffers_float_vec_t, 0)

struct Grad_table { uint8_t unused__; };

static inline size_t Grad_vec_len(Grad_vec_t vec)
__flatbuffers_vec_len(vec)
static inline Grad_table_t Grad_vec_at(Grad_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(Grad_table_t, vec, i, 0)
__flatbuffers_table_as_root(Grad)

__flatbuffers_define_scalar_field(0, Grad, x1, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(1, Grad, y1, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(2, Grad, x2, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(3, Grad, y2, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(4, Grad, cx, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(5, Grad, cy, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(6, Grad, r, flatbuffers_float, float, 0.500000000f)
__flatbuffers_define_scalar_field(7, Grad, sampling, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_vector_field(8, Grad, stops, flatbuffers_float_vec_t, 0)
__flatbuffers_define_vector_field(9, Grad, stopColors, flatbuffers_uint32_vec_t, 0)
__flatbuffers_define_scalar_field(10, Grad, isLinear, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(1))
__flatbuffers_define_scalar_field(11, Grad, ry, flatbuffers_float, float, 0.500000000f)
__flatbuffers_define_scalar_field(12, Grad, isUserSpace, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(1))

struct Paint_table { uint8_t unused__; };

static inline size_t Paint_vec_len(Paint_vec_t vec)
__flatbuffers_vec_len(vec)
static inline Paint_table_t Paint_vec_at(Paint_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(Paint_table_t, vec, i, 0)
__flatbuffers_table_as_root(Paint)

__flatbuffers_define_scalar_field(0, Paint, type, flatbuffers_uint8, uint8_t, UINT8_C(0))
__flatbuffers_define_scalar_field(1, Paint, color, flatbuffers_uint32, uint32_t, UINT32_C(4278190080))
__flatbuffers_define_table_field(2, Paint, grad, Grad_table_t, 0)
__flatbuffers_define_scalar_field(3, Paint, strokeWidth, flatbuffers_float, float, 1.00000000f)
__flatbuffers_define_scalar_field(4, Paint, opacity, flatbuffers_float, float, 1.00000000f)

struct Predefined_table { uint8_t unused__; };

static inline size_t Predefined_vec_len(Predefined_vec_t vec)
__flatbuffers_vec_len(vec)
static inline Predefined_table_t Predefined_vec_at(Predefined_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(Predefined_table_t, vec, i, 0)
__flatbuffers_table_as_root(Predefined)

__flatbuffers_define_scalar_field(0, Predefined, shape, PredefinedShape, PredefinedShape_enum_t, UINT8_C(0))
__flatbuffers_define_scalar_field(1, Predefined, x, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(2, Predefined, y, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(3, Predefined, x1, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(4, Predefined, y1, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(5, Predefined, x2, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(6, Predefined, y2, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(7, Predefined, width, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(8, Predefined, height, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(9, Predefined, rx, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(10, Predefined, ry, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(11, Predefined, r, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(12, Predefined, cx, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(13, Predefined, cy, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_vector_field(14, Predefined, matrix, flatbuffers_float_vec_t, 0)

struct Text_table { uint8_t unused__; };

static inline size_t Text_vec_len(Text_vec_t vec)
__flatbuffers_vec_len(vec)
static inline Text_table_t Text_vec_at(Text_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(Text_table_t, vec, i, 0)
__flatbuffers_table_as_root(Text)

__flatbuffers_define_scalar_field(0, Text, x, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(1, Text, y, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(2, Text, size, flatbuffers_float, float, 12.0000000f)
__flatbuffers_define_string_field(3, Text, strText, 0)
__flatbuffers_define_vector_field(4, Text, matrix, flatbuffers_float_vec_t, 0)

struct Stroke_table { uint8_t unused__; };

static inline size_t Stroke_vec_len(Stroke_vec_t vec)
__flatbuffers_vec_len(vec)
static inline Stroke_table_t Stroke_vec_at(Stroke_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(Stroke_table_t, vec, i, 0)
__flatbuffers_table_as_root(Stroke)

__flatbuffers_define_scalar_field(0, Stroke, join, flatbuffers_uint8, uint8_t, UINT8_C(0))
__flatbuffers_define_scalar_field(1, Stroke, cap, flatbuffers_uint8, uint8_t, UINT8_C(0))
__flatbuffers_define_scalar_field(2, Stroke, miterLimit, flatbuffers_float, float, 4.00000000f)

struct Geometry_table { uint8_t unused__; };

static inline size_t Geometry_vec_len(Geometry_vec_t vec)
__flatbuffers_vec_len(vec)
static inline Geometry_table_t Geometry_vec_at(Geometry_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(Geometry_table_t, vec, i, 0)
__flatbuffers_table_as_root(Geometry)

__flatbuffers_define_table_field(0, Geometry, path, Path_table_t, 0)
__flatbuffers_define_table_field(1, Geometry, fillPaint, Paint_table_t, 0)
__flatbuffers_define_table_field(2, Geometry, strokePaint, Paint_table_t, 0)
__flatbuffers_define_scalar_field(3, Geometry, nonzero, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))
__flatbuffers_define_table_field(4, Geometry, predefined, Predefined_table_t, 0)
__flatbuffers_define_table_field(5, Geometry, text, Text_table_t, 0)
__flatbuffers_define_table_field(6, Geometry, stroke, Stroke_table_t, 0)

struct Svg_table { uint8_t unused__; };

static inline size_t Svg_vec_len(Svg_vec_t vec)
__flatbuffers_vec_len(vec)
static inline Svg_table_t Svg_vec_at(Svg_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(Svg_table_t, vec, i, 0)
__flatbuffers_table_as_root(Svg)

__flatbuffers_define_vector_field(0, Svg, geometries, Geometry_vec_t, 0)
__flatbuffers_define_scalar_field(1, Svg, width, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(2, Svg, height, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_vector_field(3, Svg, matrix, flatbuffers_float_vec_t, 0)


#include "flatcc/flatcc_epilogue.h"
#endif /* TSVG_READER_H */
