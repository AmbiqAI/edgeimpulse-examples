/*
 * Copyright (c) 2024, Ambiq Micro, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * Third party software included in this distribution is subject to the
 * additional license terms as defined in the /docs/licenses directory.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * @file     apollo510L_cm4.h
 * @brief    CMSIS HeaderFile
 * @version  1.0
 * @date     13. August 2024
 * @note     Generated by SVDConv V3.3.42 on Tuesday, 13.08.2024 13:30:27
 *           from File './apollo510L_cm4.svd',
 *           last modified on Tuesday, 13.08.2024 18:30:27
 */



/** @addtogroup Ambiq Micro
  * @{
  */


/** @addtogroup apollo510L_cm4
  * @{
  */


#ifndef APOLLO510L_CM4_H
#define APOLLO510L_CM4_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup Configuration_of_CMSIS
  * @{
  */



/* =========================================================================================================================== */
/* ================                                Interrupt Number Definition                                ================ */
/* =========================================================================================================================== */

typedef enum {
/* =======================================  ARM Cortex-M4 Specific Interrupt Numbers  ======================================== */
  Reset_IRQn                = -15,              /*!< -15  Reset Vector, invoked on Power up and warm reset                     */
  NonMaskableInt_IRQn       = -14,              /*!< -14  Non maskable Interrupt, cannot be stopped or preempted               */
  HardFault_IRQn            = -13,              /*!< -13  Hard Fault, all classes of Fault                                     */
  MemoryManagement_IRQn     = -12,              /*!< -12  Memory Management, MPU mismatch, including Access Violation
                                                     and No Match                                                              */
  BusFault_IRQn             = -11,              /*!< -11  Bus Fault, Pre-Fetch-, Memory Access Fault, other address/memory
                                                     related Fault                                                             */
  UsageFault_IRQn           = -10,              /*!< -10  Usage Fault, i.e. Undef Instruction, Illegal State Transition        */
  SVCall_IRQn               =  -5,              /*!< -5 System Service Call via SVC instruction                                */
  DebugMonitor_IRQn         =  -4,              /*!< -4 Debug Monitor                                                          */
  PendSV_IRQn               =  -2,              /*!< -2 Pendable request for system service                                    */
  SysTick_IRQn              =  -1,              /*!< -1 System Tick Timer                                                      */
/* =======================================  apollo510L_cm4 Specific Interrupt Numbers  ======================================= */
  BROWNOUT_IRQn             =   0,              /*!< 0  BROWNOUT_IRQ                                                           */
  WDT_IRQn                  =   1,              /*!< 1  WDT_IRQ                                                                */
  RTC_IRQn                  =   2,              /*!< 2  RTC_IRQ                                                                */
  TIMER_IRQn                =   3,              /*!< 3  TIMER_IRQ                                                              */
  STIMER_CMPR0_IRQn         =   4,              /*!< 4  STIMER_CMPR0_IRQ                                                       */
  STIMER_CMPR1_IRQn         =   5,              /*!< 5  STIMER_CMPR1_IRQ                                                       */
  STIMER_CMPR2_IRQn         =   6,              /*!< 6  STIMER_CMPR2_IRQ                                                       */
  STIMER_CMPR3_IRQn         =   7,              /*!< 7  STIMER_CMPR3_IRQ                                                       */
  STIMER_CMPR4_IRQn         =   8,              /*!< 8  STIMER_CMPR4_IRQ                                                       */
  STIMER_CMPR5_IRQn         =   9,              /*!< 9  STIMER_CMPR5_IRQ                                                       */
  STIMER_CMPR6_IRQn         =  10,              /*!< 10 STIMER_CMPR6_IRQ                                                       */
  STIMER_CMPR7_IRQn         =  11,              /*!< 11 STIMER_CMPR7_IRQ                                                       */
  STIMER_OVF_IRQn           =  12,              /*!< 12 STIMER_OVF_IRQ                                                         */
  TIMER0_IRQn               =  13,              /*!< 13 TIMER0_IRQ                                                             */
  TIMER1_IRQn               =  14,              /*!< 14 TIMER1_IRQ                                                             */
  TIMER2_IRQn               =  15,              /*!< 15 TIMER2_IRQ                                                             */
  TIMER3_IRQn               =  16,              /*!< 16 TIMER3_IRQ                                                             */
  IPC_PEND_MSG_IRQn         =  17,              /*!< 17 IPC_PEND_MSG_IRQ                                                       */
  IPC_ERR_IRQn              =  18,              /*!< 18 IPC_ERR_IRQ                                                            */
  MM_FIFO_IRQn              =  23,              /*!< 23 MM_FIFO_IRQ                                                            */
  MM_ERROR_IRQn             =  24,              /*!< 24 MM_ERROR_IRQ                                                           */
  MM_FINETGT_IRQn           =  25,              /*!< 25 MM_FINETGT_IRQ                                                         */
  MM_TS_TGT3_IRQn           =  26,              /*!< 26 MM_TS_TGT3_IRQ                                                         */
  MM_TS_TGT2_IRQn           =  27,              /*!< 27 MM_TS_TGT2_IRQ                                                         */
  MM_TS_TGT1_IRQn           =  28,              /*!< 28 MM_TS_TGT1_IRQ                                                         */
  MM_CRYPT_IRQn             =  29,              /*!< 29 MM_CRYPT_IRQ                                                           */
  MM_SLP_IRQn               =  30,              /*!< 30 MM_SLP_IRQ                                                             */
  MM_HSLOT_IRQn             =  31,              /*!< 31 MM_HSLOT_IRQ                                                           */
  MM_SW_IRQn                =  32,              /*!< 32 MM_SW_IRQ                                                              */
  MM_MAC154_ERR_IRQn        =  33,              /*!< 33 MM_MAC154_ERR_IRQ                                                      */
  BLE_ISOTS0_IRQn           =  36,              /*!< 36 BLE_ISOTS0_IRQ                                                         */
  BLE_ISOTS1_IRQn           =  37,              /*!< 37 BLE_ISOTS1_IRQ                                                         */
  BLE_ISOTS2_IRQn           =  38,              /*!< 38 BLE_ISOTS2_IRQ                                                         */
  BLE_ISOTS3_IRQn           =  39,              /*!< 39 BLE_ISOTS3_IRQ                                                         */
  BLE_ISOTS4_IRQn           =  40,              /*!< 40 BLE_ISOTS4_IRQ                                                         */
  BLE_ISOTS5_IRQn           =  41,              /*!< 41 BLE_ISOTS5_IRQ                                                         */
  BLE_ISOTS6_IRQn           =  42,              /*!< 42 BLE_ISOTS6_IRQ                                                         */
  BLE_ISOTS7_IRQn           =  43,              /*!< 43 BLE_ISOTS7_IRQ                                                         */
  BLE_HOP_IRQn              =  44,              /*!< 44 BLE_HOP_IRQ                                                            */
  BLE_ERROR_IRQn            =  45,              /*!< 45 BLE_ERROR_IRQ                                                          */
  BT_MWS_WCI_RX_IRQn        =  48,              /*!< 48 BT_MWS_WCI_RX_IRQ                                                      */
  BT_MWS_WCI_TX_IRQn        =  49,              /*!< 49 BT_MWS_WCI_TX_IRQ                                                      */
  BT_MWS_MT_OFF1_IRQn       =  50,              /*!< 50 BT_MWS_MT_OFF1_IRQ                                                     */
  BT_MWS_MT_OFF0_IRQn       =  51,              /*!< 51 BT_MWS_MT_OFF0_IRQ                                                     */
  BT_MWS_FR_SYNC_IRQn       =  52,              /*!< 52 BT_MWS_FR_SYNC_IRQ                                                     */
  BT_AUDIO1_IRQn            =  54,              /*!< 54 BT_AUDIO1_IRQ                                                          */
  BT_AUDIO0_IRQn            =  55,              /*!< 55 BT_AUDIO0_IRQ                                                          */
  BT_ERROR_IRQn             =  56,              /*!< 56 BT_ERROR_IRQ                                                           */
  RF_XCVR_RX_START_IRQn     =  59,              /*!< 59 RF_XCVR_RX_START_IRQ                                                   */
  RF_XCVR_RX_END_IRQn       =  60,              /*!< 60 RF_XCVR_RX_END_IRQ                                                     */
  RF_XCVR_RX_SYNC_DETECT_IRQn=  61,             /*!< 61 RF_XCVR_RX_SYNC_DETECT_IRQ                                             */
  RF_XCVR_RX_PH_DATA_IRQn   =  62,              /*!< 62 RF_XCVR_RX_PH_DATA_IRQ                                                 */
  RF_XCVR_RX_PH_END_IRQn    =  63,              /*!< 63 RF_XCVR_RX_PH_END_IRQ                                                  */
  RF_XCVR_TX_START_IRQn     =  64,              /*!< 64 RF_XCVR_TX_START_IRQ                                                   */
  RF_XCVR_TX_END_IRQn       =  65,              /*!< 65 RF_XCVR_TX_END_IRQ                                                     */
  RF_XCVR_TX_PH_READ_IRQn   =  66,              /*!< 66 RF_XCVR_TX_PH_READ_IRQ                                                 */
  RF_XCVR_TX_PH_END_IRQn    =  67,              /*!< 67 RF_XCVR_TX_PH_END_IRQ                                                  */
  RF_XCVR_GEN_BUS_ERR_IRQn  =  68,              /*!< 68 RF_XCVR_GEN_BUS_ERR_IRQ                                                */
  MAC_WAKEUP_TIMERS_IRQn    =  69,              /*!< 69 MAC_WAKEUP_TIMERS_IRQ                                                  */
  CMD_QUEUE_IRQn            =  70,              /*!< 70 CMD_QUEUE_IRQ                                                          */
  MAX_IRQn                  =  71               /*!< 71 Not a valid IRQ. The maximum IRQ is this value - 1.                    */
} IRQn_Type;



/* =========================================================================================================================== */
/* ================                           Processor and Core Peripheral Section                           ================ */
/* =========================================================================================================================== */

/* ===========================  Configuration of the ARM Cortex-M4 Processor and Core Peripherals  =========================== */
#define __CM4_REV                 0x0100U       /*!< CM4 Core Revision                                                         */
#define __NVIC_PRIO_BITS               3        /*!< Number of Bits used for Priority Levels                                   */
#define __Vendor_SysTickConfig         0        /*!< Set to 1 if different SysTick Config is used                              */
#define __VTOR_PRESENT                 1        /*!< Set to 1 if CPU supports Vector Table Offset Register                     */
#define __MPU_PRESENT                  1        /*!< MPU present                                                               */
#define __FPU_PRESENT                  1        /*!< FPU present                                                               */
#define __FPU_DP                       0        /*!< Double Precision FPU                                                      */
#define __DSP_PRESENT                  0        /*!< DSP extension present                                                     */
#define __ICACHE_PRESENT               1        /*!< Instruction Cache present                                                 */
#define __DCACHE_PRESENT               1        /*!< Data Cache present                                                        */
#define __ITCM_PRESENT                 1        /*!< Instruction TCM present                                                   */
#define __DTCM_PRESENT                 1        /*!< Data TCM present                                                          */
#define __SAUREGION_PRESENT            0        /*!< SAU region present                                                        */
#define __PMU_PRESENT                  0        /*!< PMU present                                                               */
#define __PMU_NUM_EVENTCNT             0        /*!< PMU Event Counters                                                        */


/** @} */ /* End of group Configuration_of_CMSIS */

#include "core_cm4.h"                           /*!< ARM Cortex-M4 processor and core peripherals                              */
#include "system_apollo510L_cm4.h"              /*!< apollo510L_cm4 System                                                     */

#ifndef __IM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __IM   __I
#endif
#ifndef __OM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __OM   __O
#endif
#ifndef __IOM                                   /*!< Fallback for older CMSIS versions                                         */
  #define __IOM  __IO
#endif


/* ========================================  Start of section using anonymous unions  ======================================== */
#if defined (__CC_ARM)
  #pragma push
  #pragma anon_unions
#elif defined (__ICCARM__)
  #pragma language=extended
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wc11-extensions"
  #pragma clang diagnostic ignored "-Wreserved-id-macro"
  #pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
  #pragma clang diagnostic ignored "-Wnested-anon-types"
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning 586
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#else
  #warning Not supported compiler type
#endif


/* =========================================================================================================================== */
/* ================                            Device Specific Peripheral Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                          CM4IPC                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Inter CPU communication (CM4IPC)
  */

typedef struct {                                /*!< (@ 0x40034000) CM4IPC Structure                                           */

  union {
    __IOM uint32_t M2DDATA;                     /*!< (@ 0x00000000) CM55 to CM4 message data                                   */

    struct {
      __IOM uint32_t M2DMESSAGE : 32;           /*!< [31..0] CM55 to CM4 message data                                          */
    } M2DDATA_b;
  } ;

  union {
    __IOM uint32_t D2MDATA;                     /*!< (@ 0x00000004) CM4 to CM55 message data                                   */

    struct {
      __IOM uint32_t D2MMESSAGE : 32;           /*!< [31..0] CM4 to CM55 message data                                          */
    } D2MDATA_b;
  } ;

  union {
    __IOM uint32_t STATUS;                      /*!< (@ 0x00000008) Channels status                                            */

    struct {
      __IOM uint32_t D2MEMPTY   : 1;            /*!< [0..0] CM4 to CM55 message data FIFO is empty                             */
      __IOM uint32_t D2MFULL    : 1;            /*!< [1..1] CM4 to CM55 message data FIFO is full                              */
      __IOM uint32_t D2MTHRESHOLDACTIVE : 1;    /*!< [2..2] CM4 to CM55 pending data is over threshold                         */
            uint32_t            : 1;
      __IOM uint32_t D2MPEND    : 6;            /*!< [9..4] CM4 to CM55 pending data number                                    */
            uint32_t            : 6;
      __IOM uint32_t M2DEMPTY   : 1;            /*!< [16..16] CM55 to CM4 message data FIFO is empty                           */
      __IOM uint32_t M2DFULL    : 1;            /*!< [17..17] CM55 to CM4 message data FIFO is full                            */
      __IOM uint32_t M2DTHRESHOLDACTIVE : 1;    /*!< [18..18] CM55 to CM4 pending data is over threshold                       */
            uint32_t            : 1;
      __IOM uint32_t M2DPEND    : 6;            /*!< [25..20] CM55 to CM4 pending data number                                  */
            uint32_t            : 6;
    } STATUS_b;
  } ;

  union {
    __IOM uint32_t M2DERROR;                    /*!< (@ 0x0000000C) CM55 to CM4 channel error                                  */

    struct {
      __IOM uint32_t M2DEMPTYERROR : 1;         /*!< [0..0] CM55 to CM4 message data FIFO underflow. Write '1' to
                                                     clear this bit                                                            */
      __IOM uint32_t M2DFULLERROR : 1;          /*!< [1..1] CM55 to CM4 message data FIFO overflow. Write '1' to
                                                     clear this bit                                                            */
            uint32_t            : 30;
    } M2DERROR_b;
  } ;

  union {
    __IOM uint32_t M2DIT;                       /*!< (@ 0x00000010) CM55 to CM4 channel interrupt threshold                    */

    struct {
      __IOM uint32_t M2DTHRESHOLD : 5;          /*!< [4..0] CM55 to CM4 message data threshold. Valid values: 31
                                                     to 1                                                                      */
            uint32_t            : 27;
    } M2DIT_b;
  } ;

  union {
    __IOM uint32_t M2DIS;                       /*!< (@ 0x00000014) CM55 to CM4 channel interrupt status                       */

    struct {
      __IOM uint32_t M2DTHRESHOLDIRQ : 1;       /*!< [0..0] CM55 to CM4 message threshold interrupt. Write '1' to
                                                     clear this bit                                                            */
      __IOM uint32_t M2DERRORIRQ : 1;           /*!< [1..1] CM55 to CM4 channel error interrupt. Write '1' to clear
                                                     this bit                                                                  */
            uint32_t            : 30;
    } M2DIS_b;
  } ;

  union {
    __IOM uint32_t M2DIE;                       /*!< (@ 0x00000018) CM55 to CM4 channel interrupt enable                       */

    struct {
      __IOM uint32_t M2DTHRESHOLDIRQEN : 1;     /*!< [0..0] CM55 to CM4 message threshold interrupt enable                     */
      __IOM uint32_t M2DERRORIRQEN : 1;         /*!< [1..1] CM55 to CM4 channel error interrupt enable                         */
            uint32_t            : 30;
    } M2DIE_b;
  } ;
  __IM  uint32_t  RESERVED;

  union {
    __IOM uint32_t D2MIT;                       /*!< (@ 0x00000020) CM4 to CM55 channel interrupt threshold                    */

    struct {
      __IOM uint32_t D2MTHRESHOLD : 5;          /*!< [4..0] CM4 to CM55 message data threshold. Valid values: 31
                                                     to 1                                                                      */
            uint32_t            : 27;
    } D2MIT_b;
  } ;

  union {
    __IOM uint32_t D2MIS;                       /*!< (@ 0x00000024) CM4 to CM55 channel interrupt status                       */

    struct {
      __IOM uint32_t D2MTHRESHOLDIRQ : 1;       /*!< [0..0] CM4 to CM55 message threshold interrupt                            */
      __IOM uint32_t D2MERRORIRQ : 1;           /*!< [1..1] CM4 to CM55 channel error interrupt                                */
            uint32_t            : 30;
    } D2MIS_b;
  } ;

  union {
    __IOM uint32_t D2MIE;                       /*!< (@ 0x00000028) CM4 to CM55 channel interrupt enable                       */

    struct {
      __IOM uint32_t D2MTHRESHOLDIRQEN : 1;     /*!< [0..0] CM4 to CM55 message threshold interrupt enable                     */
      __IOM uint32_t D2MERRORIRQEN : 1;         /*!< [1..1] CM4 to CM55 channel error interrupt enable                         */
            uint32_t            : 30;
    } D2MIE_b;
  } ;
} CM4IPC_Type;                                  /*!< Size = 44 (0x2c)                                                          */



/* =========================================================================================================================== */
/* ================                                        CM4MCUCTRL                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief CM4 MCU Control Logic (CM4MCUCTRL)
  */

typedef struct {                                /*!< (@ 0x4000A800) CM4MCUCTRL Structure                                       */

  union {
    __IOM uint32_t OBSSEL;                      /*!< (@ 0x00000000) OBS BUS Enable and Select options. OBSEN must
                                                                    be set to 1 to observe the Observation signals             */

    struct {
      __IOM uint32_t OBSEN      : 1;            /*!< [0..0] Enable the OBS BUS                                                 */
      __IOM uint32_t OBSSEL0    : 5;            /*!< [5..1] ERROR: desc VALUE MISSING                                          */
      __IOM uint32_t OBSSEL1    : 5;            /*!< [10..6] ERROR: desc VALUE MISSING                                         */
            uint32_t            : 21;
    } OBSSEL_b;
  } ;
  __IM  uint32_t  RESERVED[8];

  union {
    __IOM uint32_t CQFLAGSOUT;                  /*!< (@ 0x00000024) CQ Flags for consumption by Main Application
                                                                    Processor                                                  */

    struct {
      __IOM uint32_t CQOUTIOM0  : 2;            /*!< [1..0] CQ OUTFLAG for IOM0                                                */
      __IOM uint32_t CQOUTIOM1  : 2;            /*!< [3..2] CQ OUTFLAG for IOM1                                                */
      __IOM uint32_t CQOUTIOM2  : 2;            /*!< [5..4] CQ OUTFLAG for IOM2                                                */
      __IOM uint32_t CQOUTIOM3  : 2;            /*!< [7..6] CQ OUTFLAG for IOM3                                                */
      __IOM uint32_t CQOUTIOM4  : 2;            /*!< [9..8] CQ OUTFLAG for IOM4                                                */
      __IOM uint32_t CQOUTIOM5  : 2;            /*!< [11..10] CQ OUTFLAG for IOM5                                              */
      __IOM uint32_t CQOUTMSPI0 : 2;            /*!< [13..12] CQ OUTFLAG for MSPI0                                             */
      __IOM uint32_t CQOUTMSPI1 : 2;            /*!< [15..14] CQ OUTFLAG for MSPI1                                             */
      __IOM uint32_t CQOUTMSPI2 : 2;            /*!< [17..16] CQ OUTFLAG for MSPI2                                             */
            uint32_t            : 14;
    } CQFLAGSOUT_b;
  } ;

  union {
    __IOM uint32_t CQFLAGSIN;                   /*!< (@ 0x00000028) CQ Flags for consumption by Network Processor              */

    struct {
      __IOM uint32_t CQINIOM0   : 2;            /*!< [1..0] CQ INFLAG for IOM0                                                 */
      __IOM uint32_t CQINIOM1   : 2;            /*!< [3..2] CQ INFLAG for IOM1                                                 */
      __IOM uint32_t CQINIOM2   : 2;            /*!< [5..4] CQ INFLAG for IOM2                                                 */
      __IOM uint32_t CQINIOM3   : 2;            /*!< [7..6] CQ INFLAG for IOM3                                                 */
      __IOM uint32_t CQINIOM4   : 2;            /*!< [9..8] CQ INFLAG for IOM4                                                 */
      __IOM uint32_t CQINIOM5   : 2;            /*!< [11..10] CQ INFLAG for IOM5                                               */
      __IOM uint32_t CQINMSPI0  : 2;            /*!< [13..12] CQ INFLAG for MSPI0                                              */
      __IOM uint32_t CQINMSPI1  : 2;            /*!< [15..14] CQ INFLAG for MSPI1                                              */
      __IOM uint32_t CQINMSPI2  : 2;            /*!< [17..16] CQ INFLAG for MSPI2                                              */
            uint32_t            : 14;
    } CQFLAGSIN_b;
  } ;

  union {
    __IOM uint32_t TCMWPROT;                    /*!< (@ 0x0000002C) TCM Write Protect Bits. Each bit protects one
                                                                    8k region. Total TCM Size is 64K.                          */

    struct {
      __IOM uint32_t TCMWPROT0  : 1;            /*!< [0..0] TCM Write Protect 8K Region                                        */
      __IOM uint32_t TCMWPROT1  : 1;            /*!< [1..1] TCM Write Protect 8K Region                                        */
      __IOM uint32_t TCMWPROT2  : 1;            /*!< [2..2] TCM Write Protect 8K Region                                        */
      __IOM uint32_t TCMWPROT3  : 1;            /*!< [3..3] TCM Write Protect 8K Region                                        */
      __IOM uint32_t TCMWPROT4  : 1;            /*!< [4..4] TCM Write Protect 8K Region                                        */
      __IOM uint32_t TCMWPROT5  : 1;            /*!< [5..5] TCM Write Protect 8K Region                                        */
      __IOM uint32_t TCMWPROT6  : 1;            /*!< [6..6] TCM Write Protect 8K Region                                        */
      __IOM uint32_t TCMWPROT7  : 1;            /*!< [7..7] TCM Write Protect 8K Region                                        */
            uint32_t            : 24;
    } TCMWPROT_b;
  } ;

  union {
    __IOM uint32_t TCMRPROT;                    /*!< (@ 0x00000030) TCM Read Protect Bits. Each bit protects one
                                                                    8k region. Total TCM Size is 64K.                          */

    struct {
      __IOM uint32_t TCMRPROT0  : 1;            /*!< [0..0] TCM Write Protect 8K Region                                        */
      __IOM uint32_t TCMRPROT1  : 1;            /*!< [1..1] TCM Write Protect 8K Region                                        */
      __IOM uint32_t TCMRPROT2  : 1;            /*!< [2..2] TCM Write Protect 8K Region                                        */
      __IOM uint32_t TCMRPROT3  : 1;            /*!< [3..3] TCM Write Protect 8K Region                                        */
      __IOM uint32_t TCMRPROT4  : 1;            /*!< [4..4] TCM Write Protect 8K Region                                        */
      __IOM uint32_t TCMRPROT5  : 1;            /*!< [5..5] TCM Write Protect 8K Region                                        */
      __IOM uint32_t TCMRPROT6  : 1;            /*!< [6..6] TCM Write Protect 8K Region                                        */
      __IOM uint32_t TCMRPROT7  : 1;            /*!< [7..7] TCM Write Protect 8K Region                                        */
            uint32_t            : 24;
    } TCMRPROT_b;
  } ;
  __IM  uint32_t  RESERVED1[3];

  union {
    __IOM uint32_t CPUPWRCTRL;                  /*!< (@ 0x00000040) Miscellaneous Controls and Status Register                 */

    struct {
      __IOM uint32_t DEBUGPWREN : 1;            /*!< [0..0] Software Override to enabled Debug PWR                             */
      __IOM uint32_t SLEEPMODE  : 1;            /*!< [1..1] CM4 SLEEP MODE STATUS                                              */
      __IOM uint32_t PMUCLKSTATE : 1;           /*!< [2..2] State of PMU CLOCK                                                 */
      __IOM uint32_t FCLKSTATE  : 1;            /*!< [3..3] State of MAIN CPU CLOCK                                            */
      __IOM uint32_t CPUCLKOVEREN : 1;          /*!< [4..4] Override CPU CLOCK                                                 */
      __IOM uint32_t PMUEN      : 1;            /*!< [5..5] Enable CM4 PMU                                                     */
      __IOM uint32_t CM4NVMEN   : 1;            /*!< [6..6] CM4 will Enable NVM power domain in Main PWRCTRL                   */
            uint32_t            : 25;
    } CPUPWRCTRL_b;
  } ;

  union {
    __IOM uint32_t COREPWROFF;                  /*!< (@ 0x00000044) CM4 Power Control and Status                               */

    struct {
      __IOM uint32_t CPUPWROFF  : 1;            /*!< [0..0] M4 POWER OFF REQ FROM CPU. This bit is cleard by the
                                                     PWRCTRL after CPU power down is acknowledged by the CM4
                                                     PMU.                                                                      */
            uint32_t            : 31;
    } COREPWROFF_b;
  } ;

  union {
    __IOM uint32_t CM4TIMING0;                  /*!< (@ 0x00000048) CM4 Timing Reg 0                                           */

    struct {
      __IOM uint32_t VALUE0     : 1;            /*!< [0..0] CM4 Timing 0 Value                                                 */
            uint32_t            : 31;
    } CM4TIMING0_b;
  } ;

  union {
    __IOM uint32_t CM4TIMING1;                  /*!< (@ 0x0000004C) CM4 Timing Reg 1                                           */

    struct {
      __IOM uint32_t VALUE1     : 1;            /*!< [0..0] CM4 Timing 1 Value                                                 */
            uint32_t            : 31;
    } CM4TIMING1_b;
  } ;

  union {
    __IOM uint32_t CM4TIMING2;                  /*!< (@ 0x00000050) CM4 Timing Reg 2                                           */

    struct {
      __IOM uint32_t VALUE2     : 1;            /*!< [0..0] CM4 Timing 2 Value                                                 */
            uint32_t            : 31;
    } CM4TIMING2_b;
  } ;

  union {
    __IOM uint32_t CM4TIMING3;                  /*!< (@ 0x00000054) CM4 Timing Reg 3                                           */

    struct {
      __IOM uint32_t VALUE3     : 1;            /*!< [0..0] CM4 Timing 3 Value                                                 */
            uint32_t            : 31;
    } CM4TIMING3_b;
  } ;

  union {
    __IOM uint32_t CM4TIMING4;                  /*!< (@ 0x00000058) CM4 Timing Reg 4                                           */

    struct {
      __IOM uint32_t VALUE4     : 1;            /*!< [0..0] CM4 Timing 4 Value                                                 */
            uint32_t            : 31;
    } CM4TIMING4_b;
  } ;

  union {
    __IOM uint32_t CM4TIMING5;                  /*!< (@ 0x0000005C) CM4 Timing Reg 5                                           */

    struct {
      __IOM uint32_t VALUE5     : 1;            /*!< [0..0] CM4 Timing 5 Value                                                 */
            uint32_t            : 31;
    } CM4TIMING5_b;
  } ;

  union {
    __IOM uint32_t CM4TIMING6;                  /*!< (@ 0x00000060) CM4 Timing Reg 6                                           */

    struct {
      __IOM uint32_t VALUE6     : 1;            /*!< [0..0] CM4 Timing 6 Value                                                 */
            uint32_t            : 31;
    } CM4TIMING6_b;
  } ;

  union {
    __IOM uint32_t CM4TIMING7;                  /*!< (@ 0x00000064) CM4 Timing Reg 7                                           */

    struct {
      __IOM uint32_t VALUE7     : 1;            /*!< [0..0] CM4 Timing 7 Value                                                 */
            uint32_t            : 31;
    } CM4TIMING7_b;
  } ;

  union {
    __IOM uint32_t CM4TIMINGENABLE;             /*!< (@ 0x00000068) CM4 Timing Reg 7                                           */

    struct {
      __IOM uint32_t ENABLE0    : 1;            /*!< [0..0] Enable CM4 Timing Value 0                                          */
      __IOM uint32_t ENABLE1    : 1;            /*!< [1..1] Enable CM4 Timing Value 0                                          */
      __IOM uint32_t ENABLE2    : 1;            /*!< [2..2] Enable CM4 Timing Value 0                                          */
      __IOM uint32_t ENABLE3    : 1;            /*!< [3..3] Enable CM4 Timing Value 0                                          */
      __IOM uint32_t ENABLE4    : 1;            /*!< [4..4] Enable CM4 Timing Value 0                                          */
      __IOM uint32_t ENABLE5    : 1;            /*!< [5..5] Enable CM4 Timing Value 0                                          */
      __IOM uint32_t ENABLE6    : 1;            /*!< [6..6] Enable CM4 Timing Value 0                                          */
      __IOM uint32_t ENABLE7    : 1;            /*!< [7..7] Enable CM4 Timing Value 0                                          */
            uint32_t            : 24;
    } CM4TIMINGENABLE_b;
  } ;
  __IM  uint32_t  RESERVED2[5];

  union {
    __IOM uint32_t INTEN;                       /*!< (@ 0x00000080) Set bits in this register to allow this module
                                                                    to generate the corresponding interrupt.                   */

    struct {
      __IOM uint32_t INT0       : 1;            /*!< [0..0] INTERRUPT 0                                                        */
      __IOM uint32_t INT1       : 1;            /*!< [1..1] INTERRUPT 1                                                        */
      __IOM uint32_t INT2       : 1;            /*!< [2..2] INTERRUPT 2                                                        */
      __IOM uint32_t INT3       : 1;            /*!< [3..3] INTERRUPT 3                                                        */
      __IOM uint32_t INT4       : 1;            /*!< [4..4] INTERRUPT 4                                                        */
      __IOM uint32_t INT5       : 1;            /*!< [5..5] INTERRUPT 5                                                        */
      __IOM uint32_t INT6       : 1;            /*!< [6..6] INTERRUPT 6                                                        */
      __IOM uint32_t INT7       : 1;            /*!< [7..7] INTERRUPT 7                                                        */
      __IOM uint32_t INT8       : 1;            /*!< [8..8] INTERRUPT 8                                                        */
      __IOM uint32_t INT9       : 1;            /*!< [9..9] INTERRUPT 9                                                        */
      __IOM uint32_t INT10      : 1;            /*!< [10..10] INTERRUPT 10                                                     */
      __IOM uint32_t INT11      : 1;            /*!< [11..11] INTERRUPT 11                                                     */
      __IOM uint32_t INT12      : 1;            /*!< [12..12] INTERRUPT 12                                                     */
      __IOM uint32_t INT13      : 1;            /*!< [13..13] INTERRUPT 13                                                     */
      __IOM uint32_t INT14      : 1;            /*!< [14..14] INTERRUPT 14                                                     */
            uint32_t            : 17;
    } INTEN_b;
  } ;

  union {
    __IOM uint32_t INTSTAT;                     /*!< (@ 0x00000084) Read bits from this register to discover the
                                                                    cause of a recent interrupt.                               */

    struct {
      __IOM uint32_t INT0       : 1;            /*!< [0..0] INTERRUPT 0                                                        */
      __IOM uint32_t INT1       : 1;            /*!< [1..1] INTERRUPT 1                                                        */
      __IOM uint32_t INT2       : 1;            /*!< [2..2] INTERRUPT 2                                                        */
      __IOM uint32_t INT3       : 1;            /*!< [3..3] INTERRUPT 3                                                        */
      __IOM uint32_t INT4       : 1;            /*!< [4..4] INTERRUPT 4                                                        */
      __IOM uint32_t INT5       : 1;            /*!< [5..5] INTERRUPT 5                                                        */
      __IOM uint32_t INT6       : 1;            /*!< [6..6] INTERRUPT 6                                                        */
      __IOM uint32_t INT7       : 1;            /*!< [7..7] INTERRUPT 7                                                        */
      __IOM uint32_t INT8       : 1;            /*!< [8..8] INTERRUPT 8                                                        */
      __IOM uint32_t INT9       : 1;            /*!< [9..9] INTERRUPT 9                                                        */
      __IOM uint32_t INT10      : 1;            /*!< [10..10] INTERRUPT 10                                                     */
      __IOM uint32_t INT11      : 1;            /*!< [11..11] INTERRUPT 11                                                     */
      __IOM uint32_t INT12      : 1;            /*!< [12..12] INTERRUPT 12                                                     */
      __IOM uint32_t INT13      : 1;            /*!< [13..13] INTERRUPT 13                                                     */
      __IOM uint32_t INT14      : 1;            /*!< [14..14] INTERRUPT 14                                                     */
            uint32_t            : 17;
    } INTSTAT_b;
  } ;

  union {
    __IOM uint32_t INTCLR;                      /*!< (@ 0x00000088) Write a 1 to a bit in this register to clear
                                                                    the interrupt status associated with that
                                                                    bit.                                                       */

    struct {
      __IOM uint32_t INT0       : 1;            /*!< [0..0] INTERRUPT 0                                                        */
      __IOM uint32_t INT1       : 1;            /*!< [1..1] INTERRUPT 1                                                        */
      __IOM uint32_t INT2       : 1;            /*!< [2..2] INTERRUPT 2                                                        */
      __IOM uint32_t INT3       : 1;            /*!< [3..3] INTERRUPT 3                                                        */
      __IOM uint32_t INT4       : 1;            /*!< [4..4] INTERRUPT 4                                                        */
      __IOM uint32_t INT5       : 1;            /*!< [5..5] INTERRUPT 5                                                        */
      __IOM uint32_t INT6       : 1;            /*!< [6..6] INTERRUPT 6                                                        */
      __IOM uint32_t INT7       : 1;            /*!< [7..7] INTERRUPT 7                                                        */
      __IOM uint32_t INT8       : 1;            /*!< [8..8] INTERRUPT 8                                                        */
      __IOM uint32_t INT9       : 1;            /*!< [9..9] INTERRUPT 9                                                        */
      __IOM uint32_t INT10      : 1;            /*!< [10..10] INTERRUPT 10                                                     */
      __IOM uint32_t INT11      : 1;            /*!< [11..11] INTERRUPT 11                                                     */
      __IOM uint32_t INT12      : 1;            /*!< [12..12] INTERRUPT 12                                                     */
      __IOM uint32_t INT13      : 1;            /*!< [13..13] INTERRUPT 13                                                     */
      __IOM uint32_t INT14      : 1;            /*!< [14..14] INTERRUPT 14                                                     */
            uint32_t            : 17;
    } INTCLR_b;
  } ;

  union {
    __IOM uint32_t INTSET;                      /*!< (@ 0x0000008C) Write a 1 to a bit in this register to instantly
                                                                    generate an interrupt from this module.
                                                                    (Generally used for testing purposes).                     */

    struct {
      __IOM uint32_t INT0       : 1;            /*!< [0..0] INTERRUPT 0                                                        */
      __IOM uint32_t INT1       : 1;            /*!< [1..1] INTERRUPT 1                                                        */
      __IOM uint32_t INT2       : 1;            /*!< [2..2] INTERRUPT 2                                                        */
      __IOM uint32_t INT3       : 1;            /*!< [3..3] INTERRUPT 3                                                        */
      __IOM uint32_t INT4       : 1;            /*!< [4..4] INTERRUPT 4                                                        */
      __IOM uint32_t INT5       : 1;            /*!< [5..5] INTERRUPT 5                                                        */
      __IOM uint32_t INT6       : 1;            /*!< [6..6] INTERRUPT 6                                                        */
      __IOM uint32_t INT7       : 1;            /*!< [7..7] INTERRUPT 7                                                        */
      __IOM uint32_t INT8       : 1;            /*!< [8..8] INTERRUPT 8                                                        */
      __IOM uint32_t INT9       : 1;            /*!< [9..9] INTERRUPT 9                                                        */
      __IOM uint32_t INT10      : 1;            /*!< [10..10] INTERRUPT 10                                                     */
      __IOM uint32_t INT11      : 1;            /*!< [11..11] INTERRUPT 11                                                     */
      __IOM uint32_t INT12      : 1;            /*!< [12..12] INTERRUPT 12                                                     */
      __IOM uint32_t INT13      : 1;            /*!< [13..13] INTERRUPT 13                                                     */
      __IOM uint32_t INT14      : 1;            /*!< [14..14] INTERRUPT 14                                                     */
            uint32_t            : 17;
    } INTSET_b;
  } ;
} CM4MCUCTRL_Type;                              /*!< Size = 144 (0x90)                                                         */



/* =========================================================================================================================== */
/* ================                                         CM4RADIO                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Bluetooth/IEEE 802.15.4 Radio (CM4RADIO)
  */

typedef struct {                                /*!< (@ 0x40030000) CM4RADIO Structure                                         */

  union {
    __IOM uint32_t RCLKCONTROL;                 /*!< (@ 0x00000000) This register contains the control bits for the
                                                                    Radio clocks                                               */

    struct {
      __IOM uint32_t BBCLKSEL   : 2;            /*!< [1..0] Baseband master clock select                                       */
      __IOM uint32_t BBCLKOVERRIDE : 1;         /*!< [2..2] Baseband master clock override control                             */
      __IOM uint32_t MCUCLKSEL  : 1;            /*!< [3..3] MCU clock select (CM4)                                             */
      __IOM uint32_t TPIUCLKSEL : 2;            /*!< [5..4] TPIU clock select (CM4)                                            */
      __IOM uint32_t TPIUCLKEN  : 1;            /*!< [6..6] TPIU clock enable (CM4)                                            */
            uint32_t            : 25;
    } RCLKCONTROL_b;
  } ;

  union {
    __IOM uint32_t RCONTROL;                    /*!< (@ 0x00000004) This register contains the control bits for the
                                                                    Radio                                                      */

    struct {
      __IOM uint32_t XOCONFIG   : 26;           /*!< [25..0] IcyTRX XTAL Config, see IcyTRX integration guide for
                                                     more information                                                          */
      __IOM uint32_t OSCEN      : 1;            /*!< [26..26] Enable the RF XTAL oscillator                                    */
            uint32_t            : 5;
    } RCONTROL_b;
  } ;

  union {
    __IOM uint32_t BBCONTROL;                   /*!< (@ 0x00000008) This register contains the control bits for the
                                                                    Baseband                                                   */

    struct {
      __IOM uint32_t WAKEUPREQ  : 1;            /*!< [0..0] Wakeup request. Write a 1 to request that the Baseband
                                                     wake up from Deep Sleep mode. This bit automatically clears
                                                     when the wake up is complete. Refer to RW-DM-CORE-FS for
                                                     details of wake up from Deep Sleep                                        */
            uint32_t            : 31;
    } BBCONTROL_b;
  } ;

  union {
    __IOM uint32_t NPCONTROL;                   /*!< (@ 0x0000000C) This register contains the control bits for the
                                                                    Network Processor                                          */

    struct {
      __IOM uint32_t NPSWRSTDBG : 1;            /*!< [0..0] Software reset for CM4 DEBUG                                       */
      __IOM uint32_t NPWDREN    : 1;            /*!< [1..1] Watchdog Timer Reset Enable. NOTE: The WDT module must
                                                     also be configured for WDT reset. This includes enabling
                                                     the RESEN bit in WDTCFG register in Watch dog timer block                 */
      __IOM uint32_t TXENABLED  : 1;            /*!< [2..2] Transmit enabled status from the baseband (radio_out[6])           */
      __IOM uint32_t RXENABLED  : 1;            /*!< [3..3] Receive enabled status from the baseband (radio_out[7])            */
            uint32_t            : 28;
    } NPCONTROL_b;
  } ;

  union {
    __IOM uint32_t RADIOSTAT;                   /*!< (@ 0x00000010) This register contains the status bits for the
                                                                    Radio Subsystem                                            */

    struct {
      __IOM uint32_t NPCLRSTAT  : 1;            /*!< [0..0] Writing a 1 to this bit clears all the status bits in
                                                     this register                                                             */
      __IOM uint32_t NPAIRCRSTAT : 1;           /*!< [1..1] System reset request occurred (SYSRESETREQ from CM4)               */
      __IOM uint32_t NPDBGRSTAT : 1;            /*!< [2..2] Debugger reset occurred (CDBGRSTREQ from CM4 Debugger)             */
      __IOM uint32_t NPWDRSTAT  : 1;            /*!< [3..3] Watchdog timer reset occurred                                      */
      __IOM uint32_t NPSWPORSTAT : 1;           /*!< [4..4] Software POR reset occurred                                        */
            uint32_t            : 27;
    } RADIOSTAT_b;
  } ;

  union {
    __IOM uint32_t NPSWPOR;                     /*!< (@ 0x00000014) This is the CM4 software POR reset. Writing the
                                                                    key value to this register will trigger
                                                                    a POR to the system. This will cause a reset
                                                                    to all blocks except for registers in clock
                                                                    gen, RTC, power management unit, the stimer,
                                                                    and the power management unit                              */

    struct {
      __IOM uint32_t NPSWPORKEY : 8;            /*!< [7..0] 0xD4 generates a CM4 software POR reset                            */
            uint32_t            : 24;
    } NPSWPOR_b;
  } ;

  union {
    __IOM uint32_t RTUNE;                       /*!< (@ 0x00000018) This register contains the tune bits for the
                                                                    Radio                                                      */

    struct {
      __IOM uint32_t DIGLDOVREF : 7;            /*!< [6..0] Tune the reference voltage of the digital power domain
                                                     LDO (vddd power domain)                                                   */
      __IOM uint32_t DIGLDOCTRL : 3;            /*!< [9..7] Bias control of LDO OTA                                            */
      __IOM uint32_t REFELDOVREF : 7;           /*!< [16..10] Tune the reference voltage of the 'misc' power domain
                                                     LDO (vddmisc power domain)                                                */
      __IOM uint32_t REFELDOMISC : 3;           /*!< [19..17] Control LDO for the 'misc' power domain (vddmisc power
                                                     domain)                                                                   */
            uint32_t            : 12;
    } RTUNE_b;
  } ;

  union {
    __IOM uint32_t DBGCTRL;                     /*!< (@ 0x0000001C) This register controls the observe bus debug
                                                                    interface                                                  */

    struct {
      __IOM uint32_t OBSSEL     : 4;            /*!< [3..0] Select the bus to observe on the 16-bit GPIO debug bus             */
      __IOM uint32_t OBSEN      : 1;            /*!< [4..4] Enable the Radio observe bus                                       */
            uint32_t            : 27;
    } DBGCTRL_b;
  } ;

  union {
    __IOM uint32_t WLANCOEXCTRL;                /*!< (@ 0x00000020) This register controls WLAN coexisting interface
                                                                    (PTA)                                                      */

    struct {
      __IOM uint32_t WLANCOEXIFEN : 1;          /*!< [0..0] Enable WLAN COEX interface                                         */
      __IOM uint32_t FREQINV    : 1;            /*!< [1..1] Polarity Inverted for WLAN_COEX_FREQ when true                     */
      __IOM uint32_t PRIORITYINV : 1;           /*!< [2..2] Polarity Inverted for WLAN_COEX_PRIORITY when true                 */
      __IOM uint32_t REQINV     : 1;            /*!< [3..3] Polarity Inverted for WLAN_COEX_REQ when true                      */
      __IOM uint32_t GRANTINV   : 1;            /*!< [4..4] Polarity Inverted for WLAN_COEX_GRANT when true                    */
            uint32_t            : 11;
      __IOM uint32_t CHANRANGEBOTTOM : 8;       /*!< [23..16] WLAN channel range's bottom, range k is from 2402 +
                                                     kMHz, k = 0 ~ 78                                                          */
      __IOM uint32_t CHANRANGETOP : 8;          /*!< [31..24] WLAN channel range's top, range k is from 2402 + kMHz,
                                                     k = 0 ~ 78                                                                */
    } WLANCOEXCTRL_b;
  } ;

  union {
    __IOM uint32_t WCICOEXCTRL;                 /*!< (@ 0x00000024) This register controls the WCI coexisting interface
                                                                    (PTA)                                                      */

    struct {
      __IOM uint32_t WCICOEXIFSEL : 2;          /*!< [1..0] Select WCI COEX interface                                          */
            uint32_t            : 30;
    } WCICOEXCTRL_b;
  } ;

  union {
    __IOM uint32_t EXTRFDIRCTRL;                /*!< (@ 0x00000028) This register controls the external RF detection           */

    struct {
      __IOM uint32_t TXENBIT    : 1;            /*!< [0..0] Value to send on the TXEN GPIO (when selected)                     */
      __IOM uint32_t RXENBIT    : 1;            /*!< [1..1] Value to send on the RXEN GPIO (when selected)                     */
            uint32_t            : 23;
      __IOM uint32_t TXENSEL    : 2;            /*!< [26..25] Selects the signal transmitted on the TXEN GPIO                  */
      __IOM uint32_t RXENSEL    : 2;            /*!< [28..27] Selects the signal transmitted on the RXEN GPIO                  */
            uint32_t            : 3;
    } EXTRFDIRCTRL_b;
  } ;
} CM4RADIO_Type;                                /*!< Size = 44 (0x2c)                                                          */



/* =========================================================================================================================== */
/* ================                                            RTC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Real Time Clock (RTC)
  */

typedef struct {                                /*!< (@ 0x40004800) RTC Structure                                              */

  union {
    __IOM uint32_t RTCCTL;                      /*!< (@ 0x00000000) This is the register control for the RTC module.
                                                                    It enables counter writes and sets the alarm
                                                                    repeat interval.                                           */

    struct {
      __IOM uint32_t WRTC       : 1;            /*!< [0..0] Counter write control                                              */
      __IOM uint32_t RPT        : 3;            /*!< [3..1] Alarm repeat interval                                              */
      __IOM uint32_t RSTOP      : 1;            /*!< [4..4] RTC input clock control                                            */
      __IOM uint32_t HR1224     : 1;            /*!< [5..5] Hours Counter mode Only 24HR mode supported                        */
            uint32_t            : 26;
    } RTCCTL_b;
  } ;

  union {
    __IOM uint32_t RTCSTAT;                     /*!< (@ 0x00000004) This is the register status for the RTC module.            */

    struct {
      __IOM uint32_t WRITEBUSY  : 1;            /*!< [0..0] Indicates that an RTC update (write) is still in progress.
                                                     Writes are initiated by writing the CTTLOW register - CTRUP
                                                     must be written before CTRLOW to be updated (otherwise
                                                     it will retain its current value)                                         */
            uint32_t            : 31;
    } RTCSTAT_b;
  } ;
  __IM  uint32_t  RESERVED[6];

  union {
    __IOM uint32_t CTRLOW;                      /*!< (@ 0x00000020) This counter contains the values for hour, minutes,
                                                                    seconds and 100ths of a second Counter.                    */

    struct {
      __IOM uint32_t CTR100     : 8;            /*!< [7..0] 100ths of a second Counter. Contains the current value
                                                     for hundredths of a second.                                               */
      __IOM uint32_t CTRSEC     : 7;            /*!< [14..8] Seconds Counter. Contains the current value for seconds.          */
            uint32_t            : 1;
      __IOM uint32_t CTRMIN     : 7;            /*!< [22..16] Minutes Counter. Contains the current value for minutes.         */
            uint32_t            : 1;
      __IOM uint32_t CTRHR      : 6;            /*!< [29..24] Hours Counter. Contains the current value for hour.              */
            uint32_t            : 2;
    } CTRLOW_b;
  } ;

  union {
    __IOM uint32_t CTRUP;                       /*!< (@ 0x00000024) This register contains the day, month and year
                                                                    information. It contains which day in the
                                                                    week, and the century as well. The information
                                                                    of the century can also be derived from
                                                                    the year information. The 31st bit contains
                                                                    the error bit. See description in the register
                                                                    bit for condition when error is triggered.                 */

    struct {
      __IOM uint32_t CTRDATE    : 6;            /*!< [5..0] Date Counter. Contains the current value for date.                 */
            uint32_t            : 2;
      __IOM uint32_t CTRMO      : 5;            /*!< [12..8] Months Counter. Contains the current value for months.            */
            uint32_t            : 3;
      __IOM uint32_t CTRYR      : 8;            /*!< [23..16] Years Counter. Contains the current value for year.              */
      __IOM uint32_t CTRWKDY    : 3;            /*!< [26..24] Weekdays Counter. Contains the current value for weekdays.       */
            uint32_t            : 1;
      __IOM uint32_t CB         : 1;            /*!< [28..28] Century                                                          */
      __IOM uint32_t CEB        : 1;            /*!< [29..29] Century enable                                                   */
            uint32_t            : 1;
      __IOM uint32_t CTERR      : 1;            /*!< [31..31] Counter read error status. Error is triggered when
                                                     software reads the lower word of the counters, and fails
                                                     to read the upper counter within 1/100 second. This is
                                                     because when the lower counter is read, the upper counter
                                                     is held off from incrementing until it is read so that
                                                     the full time stamp can be read.                                          */
    } CTRUP_b;
  } ;
  __IM  uint32_t  RESERVED1[2];

  union {
    __IOM uint32_t ALMLOW;                      /*!< (@ 0x00000030) This register is the Alarm settings for hours,
                                                                    minutes, second and 1/100th seconds settings.              */

    struct {
      __IOM uint32_t ALM100     : 8;            /*!< [7..0] 100ths of a second Alarm. Contains the current value
                                                     for hundredths of a second alarm.                                         */
      __IOM uint32_t ALMSEC     : 7;            /*!< [14..8] Seconds Alarm. Contains the current value for second
                                                     alarm.                                                                    */
            uint32_t            : 1;
      __IOM uint32_t ALMMIN     : 7;            /*!< [22..16] Minutes Alarm. Contains the current value for minute
                                                     alarm.                                                                    */
            uint32_t            : 1;
      __IOM uint32_t ALMHR      : 6;            /*!< [29..24] Hours Alarm. Contains the current value for hour alarm.          */
            uint32_t            : 2;
    } ALMLOW_b;
  } ;

  union {
    __IOM uint32_t ALMUP;                       /*!< (@ 0x00000034) This register is the alarm settings for week,
                                                                    month and day.                                             */

    struct {
      __IOM uint32_t ALMDATE    : 6;            /*!< [5..0] Date Alarm. Contains the current value for date alarm.             */
            uint32_t            : 2;
      __IOM uint32_t ALMMO      : 5;            /*!< [12..8] Months Alarm. Contains the current value for months
                                                     alarm.                                                                    */
            uint32_t            : 3;
      __IOM uint32_t ALMWKDY    : 3;            /*!< [18..16] Weekdays Alarm. Contains the current value for weekdays
                                                     alarm.                                                                    */
            uint32_t            : 13;
    } ALMUP_b;
  } ;
  __IM  uint32_t  RESERVED2[114];

  union {
    __IOM uint32_t INTEN;                       /*!< (@ 0x00000200) Set bits in this register to allow this module
                                                                    to generate the corresponding interrupt.                   */

    struct {
      __IOM uint32_t ALM        : 1;            /*!< [0..0] RTC Alarm interrupt                                                */
            uint32_t            : 31;
    } INTEN_b;
  } ;

  union {
    __IOM uint32_t INTSTAT;                     /*!< (@ 0x00000204) Read bits from this register to discover the
                                                                    cause of a recent interrupt.                               */

    struct {
      __IOM uint32_t ALM        : 1;            /*!< [0..0] RTC Alarm interrupt                                                */
            uint32_t            : 31;
    } INTSTAT_b;
  } ;

  union {
    __IOM uint32_t INTCLR;                      /*!< (@ 0x00000208) Write a 1 to a bit in this register to clear
                                                                    the interrupt status associated with that
                                                                    bit.                                                       */

    struct {
      __IOM uint32_t ALM        : 1;            /*!< [0..0] RTC Alarm interrupt                                                */
            uint32_t            : 31;
    } INTCLR_b;
  } ;

  union {
    __IOM uint32_t INTSET;                      /*!< (@ 0x0000020C) Write a 1 to a bit in this register to instantly
                                                                    generate an interrupt from this module.
                                                                    (Generally used for testing purposes).                     */

    struct {
      __IOM uint32_t ALM        : 1;            /*!< [0..0] RTC Alarm interrupt                                                */
            uint32_t            : 31;
    } INTSET_b;
  } ;
} RTC_Type;                                     /*!< Size = 528 (0x210)                                                        */



/* =========================================================================================================================== */
/* ================                                         CM4STIMER                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief Counter/Timer (CM4STIMER)
  */

typedef struct {                                /*!< (@ 0x40008800) CM4STIMER Structure                                        */

  union {
    __IOM uint32_t STCFG;                       /*!< (@ 0x00000000) The STIMER Configuration Register contains the
                                                                    software control for selecting the clock
                                                                    divider and source feeding the system timer.               */

    struct {
      __IOM uint32_t CLKSEL     : 4;            /*!< [3..0] Selects an appropriate clock source and divider to use
                                                     for the System Timer clock.                                               */
            uint32_t            : 4;
      __IOM uint32_t COMPAREAEN : 1;            /*!< [8..8] Selects whether compare is enabled for the corresponding
                                                     SCMPR register. If compare is enabled, the interrupt status
                                                     is set once the comparision is met.                                       */
      __IOM uint32_t COMPAREBEN : 1;            /*!< [9..9] Selects whether compare is enabled for the corresponding
                                                     SCMPR register. If compare is enabled, the interrupt status
                                                     is set once the comparision is met.                                       */
      __IOM uint32_t COMPARECEN : 1;            /*!< [10..10] Selects whether compare is enabled for the corresponding
                                                     SCMPR register. If compare is enabled, the interrupt status
                                                     is set once the comparision is met.                                       */
      __IOM uint32_t COMPAREDEN : 1;            /*!< [11..11] Selects whether compare is enabled for the corresponding
                                                     SCMPR register. If compare is enabled, the interrupt status
                                                     is set once the comparision is met.                                       */
      __IOM uint32_t COMPAREEEN : 1;            /*!< [12..12] Selects whether compare is enabled for the corresponding
                                                     SCMPR register. If compare is enabled, the interrupt status
                                                     is set once the comparision is met.                                       */
      __IOM uint32_t COMPAREFEN : 1;            /*!< [13..13] Selects whether compare is enabled for the corresponding
                                                     SCMPR register. If compare is enabled, the interrupt status
                                                     is set once the comparision is met.                                       */
      __IOM uint32_t COMPAREGEN : 1;            /*!< [14..14] Selects whether compare is enabled for the corresponding
                                                     SCMPR register. If compare is enabled, the interrupt status
                                                     is set once the comparision is met.                                       */
      __IOM uint32_t COMPAREHEN : 1;            /*!< [15..15] Selects whether compare is enabled for the corresponding
                                                     SCMPR register. If compare is enabled, the interrupt status
                                                     is set once the comparision is met.                                       */
            uint32_t            : 14;
      __IOM uint32_t CLEAR      : 1;            /*!< [30..30] Set this bit to one to clear the System Timer register.
                                                     If this bit is set to '1', the system timer register will
                                                     stay cleared. It needs to be set to '0' for the system
                                                     timer to start running.                                                   */
      __IOM uint32_t FREEZE     : 1;            /*!< [31..31] Set this bit to one to freeze the clock input to the
                                                     COUNTER register. Once frozen, the value can be safely
                                                     written from the MCU. Unfreeze to resume.                                 */
    } STCFG_b;
  } ;

  union {
    __IOM uint32_t STTMR;                       /*!< (@ 0x00000004) The COUNTER Register contains the running count
                                                                    of time as maintained by incrementing for
                                                                    every rising clock edge of the clock source
                                                                    selected in the configuration register.
                                                                    It is this counter value that captured in
                                                                    the capture registers and it is this counter
                                                                    value that is compared against the various
                                                                    compare registers. This register cannot
                                                                    be written, but can be cleared to 0 for
                                                                    a deterministic value. Use the FREEZE bit
                                                                    will stop this counter from incrementing.                  */

    struct {
      __IOM uint32_t STTMR      : 32;           /*!< [31..0] Value of the 32-bit counter as it ticks over.                     */
    } STTMR_b;
  } ;
  __IM  uint32_t  RESERVED[2];

  union {
    __IOM uint32_t SCAPCTRL0;                   /*!< (@ 0x00000010) The STIMER Capture Control Register controls
                                                                    each of the 4 capture registers. It selects
                                                                    their GPIO pin number for a trigger source,
                                                                    enables a capture operation and sets the
                                                                    input polarity for the capture. NOTE: 8-bit
                                                                    writes can control individual capture registers
                                                                    atomically.                                                */

    struct {
      __IOM uint32_t STSEL0     : 7;            /*!< [6..0] STIMER Capture 0 Select.                                           */
            uint32_t            : 1;
      __IOM uint32_t STPOL0     : 1;            /*!< [8..8] STIMER Capture 0 Polarity.                                         */
      __IOM uint32_t CAPTURE0   : 1;            /*!< [9..9] Selects whether capture 0 is enabled for the specified
                                                     capture register.                                                         */
            uint32_t            : 22;
    } SCAPCTRL0_b;
  } ;

  union {
    __IOM uint32_t SCAPCTRL1;                   /*!< (@ 0x00000014) The STIMER Capture Control Register controls
                                                                    each of the 4 capture registers. It selects
                                                                    their GPIO pin number for a trigger source,
                                                                    enables a capture operation and sets the
                                                                    input polarity for the capture. NOTE: 8-bit
                                                                    writes can control individual capture registers
                                                                    atomically.                                                */

    struct {
      __IOM uint32_t STSEL1     : 7;            /*!< [6..0] STIMER Capture 1 Select.                                           */
            uint32_t            : 1;
      __IOM uint32_t STPOL1     : 1;            /*!< [8..8] STIMER Capture 1 Polarity.                                         */
      __IOM uint32_t CAPTURE1   : 1;            /*!< [9..9] Selects whether capture 1 is enabled for the specified
                                                     capture register.                                                         */
            uint32_t            : 22;
    } SCAPCTRL1_b;
  } ;

  union {
    __IOM uint32_t SCAPCTRL2;                   /*!< (@ 0x00000018) The STIMER Capture Control Register controls
                                                                    each of the 4 capture registers. It selects
                                                                    their GPIO pin number for a trigger source,
                                                                    enables a capture operation and sets the
                                                                    input polarity for the capture. NOTE: 8-bit
                                                                    writes can control individual capture registers
                                                                    atomically.                                                */

    struct {
      __IOM uint32_t STSEL2     : 7;            /*!< [6..0] STIMER Capture 2 Select.                                           */
            uint32_t            : 1;
      __IOM uint32_t STPOL2     : 1;            /*!< [8..8] STIMER Capture 2 Polarity.                                         */
      __IOM uint32_t CAPTURE2   : 1;            /*!< [9..9] Selects whether capture 2 is enabled for the specified
                                                     capture register.                                                         */
            uint32_t            : 22;
    } SCAPCTRL2_b;
  } ;

  union {
    __IOM uint32_t SCAPCTRL3;                   /*!< (@ 0x0000001C) The STIMER Capture Control Register controls
                                                                    each of the 4 capture registers. It selects
                                                                    their GPIO pin number for a trigger source,
                                                                    enables a capture operation and sets the
                                                                    input polarity for the capture. NOTE: 8-bit
                                                                    writes can control individual capture registers
                                                                    atomically.                                                */

    struct {
      __IOM uint32_t STSEL3     : 7;            /*!< [6..0] STIMER Capture 3 Select.                                           */
            uint32_t            : 1;
      __IOM uint32_t STPOL3     : 1;            /*!< [8..8] STIMER Capture 3 Polarity.                                         */
      __IOM uint32_t CAPTURE3   : 1;            /*!< [9..9] Selects whether capture 3 is enabled for the specified
                                                     capture register.                                                         */
            uint32_t            : 22;
    } SCAPCTRL3_b;
  } ;

  union {
    __IOM uint32_t SCMPR0;                      /*!< (@ 0x00000020) The VALUE in this bit field is used to compare
                                                                    against the VALUE in the COUNTER register.
                                                                    If the match criterion in the configuration
                                                                    register is met then a corresponding interrupt
                                                                    status bit is set. The match criterion is
                                                                    defined as COUNTER equal to COMPARE. To
                                                                    establish a desired value in this COMPARE
                                                                    register, write the number of ticks in the
                                                                    future to this register to indicate when
                                                                    to interrupt. The hardware does the addition
                                                                    to the COUNTER value in the STIMER clock
                                                                    domain so that the ma                                      */

    struct {
      __IOM uint32_t SCMPR0     : 32;           /*!< [31..0] Compare this value to the value in the COUNTER register
                                                     according to the match criterion, as selected in the COMPARE_A_EN
                                                     bit in the REG_CTIMER_STCFG register.                                     */
    } SCMPR0_b;
  } ;

  union {
    __IOM uint32_t SCMPR1;                      /*!< (@ 0x00000024) The VALUE in this bit field is used to compare
                                                                    against the VALUE in the COUNTER register.
                                                                    If the match criterion in the configuration
                                                                    register is met then a corresponding interrupt
                                                                    status bit is set. The match criterion is
                                                                    defined as COUNTER equal to COMPARE. To
                                                                    establish a desired value in this COMPARE
                                                                    register, write the number of ticks in the
                                                                    future to this register to indicate when
                                                                    to interrupt. The hardware does the addition
                                                                    to the COUNTER value in the STIMER clock
                                                                    domain so that the ma                                      */

    struct {
      __IOM uint32_t SCMPR1     : 32;           /*!< [31..0] Compare this value to the value in the COUNTER register
                                                     according to the match criterion, as selected in the COMPARE_A_EN
                                                     bit in the REG_CTIMER_STCFG register.                                     */
    } SCMPR1_b;
  } ;

  union {
    __IOM uint32_t SCMPR2;                      /*!< (@ 0x00000028) The VALUE in this bit field is used to compare
                                                                    against the VALUE in the COUNTER register.
                                                                    If the match criterion in the configuration
                                                                    register is met then a corresponding interrupt
                                                                    status bit is set. The match criterion is
                                                                    defined as COUNTER equal to COMPARE. To
                                                                    establish a desired value in this COMPARE
                                                                    register, write the number of ticks in the
                                                                    future to this register to indicate when
                                                                    to interrupt. The hardware does the addition
                                                                    to the COUNTER value in the STIMER clock
                                                                    domain so that the ma                                      */

    struct {
      __IOM uint32_t SCMPR2     : 32;           /*!< [31..0] Compare this value to the value in the COUNTER register
                                                     according to the match criterion, as selected in the COMPARE_A_EN
                                                     bit in the REG_CTIMER_STCFG register.                                     */
    } SCMPR2_b;
  } ;

  union {
    __IOM uint32_t SCMPR3;                      /*!< (@ 0x0000002C) The VALUE in this bit field is used to compare
                                                                    against the VALUE in the COUNTER register.
                                                                    If the match criterion in the configuration
                                                                    register is met then a corresponding interrupt
                                                                    status bit is set. The match criterion is
                                                                    defined as COUNTER equal to COMPARE. To
                                                                    establish a desired value in this COMPARE
                                                                    register, write the number of ticks in the
                                                                    future to this register to indicate when
                                                                    to interrupt. The hardware does the addition
                                                                    to the COUNTER value in the STIMER clock
                                                                    domain so that the ma                                      */

    struct {
      __IOM uint32_t SCMPR3     : 32;           /*!< [31..0] Compare this value to the value in the COUNTER register
                                                     according to the match criterion, as selected in the COMPARE_A_EN
                                                     bit in the REG_CTIMER_STCFG register.                                     */
    } SCMPR3_b;
  } ;

  union {
    __IOM uint32_t SCMPR4;                      /*!< (@ 0x00000030) The VALUE in this bit field is used to compare
                                                                    against the VALUE in the COUNTER register.
                                                                    If the match criterion in the configuration
                                                                    register is met then a corresponding interrupt
                                                                    status bit is set. The match criterion is
                                                                    defined as COUNTER equal to COMPARE. To
                                                                    establish a desired value in this COMPARE
                                                                    register, write the number of ticks in the
                                                                    future to this register to indicate when
                                                                    to interrupt. The hardware does the addition
                                                                    to the COUNTER value in the STIMER clock
                                                                    domain so that the ma                                      */

    struct {
      __IOM uint32_t SCMPR4     : 32;           /*!< [31..0] Compare this value to the value in the COUNTER register
                                                     according to the match criterion, as selected in the COMPARE_A_EN
                                                     bit in the REG_CTIMER_STCFG register.                                     */
    } SCMPR4_b;
  } ;

  union {
    __IOM uint32_t SCMPR5;                      /*!< (@ 0x00000034) The VALUE in this bit field is used to compare
                                                                    against the VALUE in the COUNTER register.
                                                                    If the match criterion in the configuration
                                                                    register is met then a corresponding interrupt
                                                                    status bit is set. The match criterion is
                                                                    defined as COUNTER equal to COMPARE. To
                                                                    establish a desired value in this COMPARE
                                                                    register, write the number of ticks in the
                                                                    future to this register to indicate when
                                                                    to interrupt. The hardware does the addition
                                                                    to the COUNTER value in the STIMER clock
                                                                    domain so that the ma                                      */

    struct {
      __IOM uint32_t SCMPR5     : 32;           /*!< [31..0] Compare this value to the value in the COUNTER register
                                                     according to the match criterion, as selected in the COMPARE_A_EN
                                                     bit in the REG_CTIMER_STCFG register.                                     */
    } SCMPR5_b;
  } ;

  union {
    __IOM uint32_t SCMPR6;                      /*!< (@ 0x00000038) The VALUE in this bit field is used to compare
                                                                    against the VALUE in the COUNTER register.
                                                                    If the match criterion in the configuration
                                                                    register is met then a corresponding interrupt
                                                                    status bit is set. The match criterion is
                                                                    defined as COUNTER equal to COMPARE. To
                                                                    establish a desired value in this COMPARE
                                                                    register, write the number of ticks in the
                                                                    future to this register to indicate when
                                                                    to interrupt. The hardware does the addition
                                                                    to the COUNTER value in the STIMER clock
                                                                    domain so that the ma                                      */

    struct {
      __IOM uint32_t SCMPR6     : 32;           /*!< [31..0] Compare this value to the value in the COUNTER register
                                                     according to the match criterion, as selected in the COMPARE_A_EN
                                                     bit in the REG_CTIMER_STCFG register.                                     */
    } SCMPR6_b;
  } ;

  union {
    __IOM uint32_t SCMPR7;                      /*!< (@ 0x0000003C) The VALUE in this bit field is used to compare
                                                                    against the VALUE in the COUNTER register.
                                                                    If the match criterion in the configuration
                                                                    register is met then a corresponding interrupt
                                                                    status bit is set. The match criterion is
                                                                    defined as COUNTER equal to COMPARE. To
                                                                    establish a desired value in this COMPARE
                                                                    register, write the number of ticks in the
                                                                    future to this register to indicate when
                                                                    to interrupt. The hardware does the addition
                                                                    to the COUNTER value in the STIMER clock
                                                                    domain so that the ma                                      */

    struct {
      __IOM uint32_t SCMPR7     : 32;           /*!< [31..0] Compare this value to the value in the COUNTER register
                                                     according to the match criterion, as selected in the COMPARE_A_EN
                                                     bit in the REG_CTIMER_STCFG register.                                     */
    } SCMPR7_b;
  } ;

  union {
    __IOM uint32_t SCAPT0;                      /*!< (@ 0x00000040) The STIMER capture Register 0 captures the VALUE
                                                                    in the COUNTER register whenever capture
                                                                    condition (event) occurs. This register
                                                                    holds a time stamp for the event.                          */

    struct {
      __IOM uint32_t SCAPT0     : 32;           /*!< [31..0] Whenever the event is detected, the value in the COUNTER
                                                     is copied into this register and the corresponding interrupt
                                                     status bit is set.                                                        */
    } SCAPT0_b;
  } ;

  union {
    __IOM uint32_t SCAPT1;                      /*!< (@ 0x00000044) The STIMER capture Register 1 captures the VALUE
                                                                    in the COUNTER register whenever capture
                                                                    condition (event) occurs. This register
                                                                    holds a time stamp for the event.                          */

    struct {
      __IOM uint32_t SCAPT1     : 32;           /*!< [31..0] Whenever the event is detected, the value in the COUNTER
                                                     is copied into this register and the corresponding interrupt
                                                     status bit is set.                                                        */
    } SCAPT1_b;
  } ;

  union {
    __IOM uint32_t SCAPT2;                      /*!< (@ 0x00000048) The STIMER capture Register 2 captures the VALUE
                                                                    in the COUNTER register whenever capture
                                                                    condition (event) occurs. This register
                                                                    holds a time stamp for the event.                          */

    struct {
      __IOM uint32_t SCAPT2     : 32;           /*!< [31..0] Whenever the event is detected, the value in the COUNTER
                                                     is copied into this register and the corresponding interrupt
                                                     status bit is set.                                                        */
    } SCAPT2_b;
  } ;

  union {
    __IOM uint32_t SCAPT3;                      /*!< (@ 0x0000004C) The STIMER capture Register 3 captures the VALUE
                                                                    in the COUNTER register whenever capture
                                                                    condition (event) occurs. This register
                                                                    holds a time stamp for the event.                          */

    struct {
      __IOM uint32_t SCAPT3     : 32;           /*!< [31..0] Whenever the event is detected, the value in the COUNTER
                                                     is copied into this register and the corresponding interrupt
                                                     status bit is set.                                                        */
    } SCAPT3_b;
  } ;

  union {
    __IOM uint32_t SNVR0;                       /*!< (@ 0x00000050) The SNVR0 Register contains a portion of the
                                                                    stored epoch offset associated with the
                                                                    time in the COUNTER register. This register
                                                                    is only reset by POI not by HRESETn. Its
                                                                    contents are intended to survive all reset
                                                                    level except POI and full power cycles.                    */

    struct {
      __IOM uint32_t SNVR0      : 32;           /*!< [31..0] Value of the 32-bit counter as it ticks over.                     */
    } SNVR0_b;
  } ;

  union {
    __IOM uint32_t SNVR1;                       /*!< (@ 0x00000054) The SNVR1 Register contains a portion of the
                                                                    stored epoch offset associated with the
                                                                    time in the COUNTER register. This register
                                                                    is only reset by POI not by HRESETn. Its
                                                                    contents are intended to survive all reset
                                                                    level except POI and full power cycles.                    */

    struct {
      __IOM uint32_t SNVR1      : 32;           /*!< [31..0] Value of the 32-bit counter as it ticks over.                     */
    } SNVR1_b;
  } ;

  union {
    __IOM uint32_t SNVR2;                       /*!< (@ 0x00000058) The SNVR2 Register contains a portion of the
                                                                    stored epoch offset associated with the
                                                                    time in the COUNTER register. This register
                                                                    is only reset by POI not by HRESETn. Its
                                                                    contents are intended to survive all reset
                                                                    level except POI and full power cycles.                    */

    struct {
      __IOM uint32_t SNVR2      : 32;           /*!< [31..0] Value of the 32-bit counter as it ticks over.                     */
    } SNVR2_b;
  } ;

  union {
    __IOM uint32_t SNVR3;                       /*!< (@ 0x0000005C) The SNVR3 Register contains a portion of the
                                                                    stored epoch offset associated with the
                                                                    time in the COUNTER register. This register
                                                                    is only reset by POI not by HRESETn. Its
                                                                    contents are intended to survive all reset
                                                                    level except POI and full power cycles.                    */

    struct {
      __IOM uint32_t SNVR3      : 32;           /*!< [31..0] Value of the 32-bit counter as it ticks over.                     */
    } SNVR3_b;
  } ;
  __IM  uint32_t  RESERVED1[40];

  union {
    __IOM uint32_t STMINTEN;                    /*!< (@ 0x00000100) Set bits in this register to allow this module
                                                                    to generate the corresponding interrupt.                   */

    struct {
      __IOM uint32_t COMPAREA   : 1;            /*!< [0..0] COUNTER is greater than or equal to COMPARE register
                                                     A.                                                                        */
      __IOM uint32_t COMPAREB   : 1;            /*!< [1..1] COUNTER is greater than or equal to COMPARE register
                                                     B.                                                                        */
      __IOM uint32_t COMPAREC   : 1;            /*!< [2..2] COUNTER is greater than or equal to COMPARE register
                                                     C.                                                                        */
      __IOM uint32_t COMPARED   : 1;            /*!< [3..3] COUNTER is greater than or equal to COMPARE register
                                                     D.                                                                        */
      __IOM uint32_t COMPAREE   : 1;            /*!< [4..4] COUNTER is greater than or equal to COMPARE register
                                                     E.                                                                        */
      __IOM uint32_t COMPAREF   : 1;            /*!< [5..5] COUNTER is greater than or equal to COMPARE register
                                                     F.                                                                        */
      __IOM uint32_t COMPAREG   : 1;            /*!< [6..6] COUNTER is greater than or equal to COMPARE register
                                                     G.                                                                        */
      __IOM uint32_t COMPAREH   : 1;            /*!< [7..7] COUNTER is greater than or equal to COMPARE register
                                                     H.                                                                        */
      __IOM uint32_t OVERFLOW   : 1;            /*!< [8..8] COUNTER over flowed from 0xFFFFFFFF back to 0x00000000.            */
      __IOM uint32_t CAPTUREA   : 1;            /*!< [9..9] CAPTURE register A has grabbed the value in the counter            */
      __IOM uint32_t CAPTUREB   : 1;            /*!< [10..10] CAPTURE register B has grabbed the value in the counter          */
      __IOM uint32_t CAPTUREC   : 1;            /*!< [11..11] CAPTURE register C has grabbed the value in the counter          */
      __IOM uint32_t CAPTURED   : 1;            /*!< [12..12] CAPTURE register D has grabbed the value in the counter          */
            uint32_t            : 19;
    } STMINTEN_b;
  } ;

  union {
    __IOM uint32_t STMINTSTAT;                  /*!< (@ 0x00000104) Read bits from this register to discover the
                                                                    cause of a recent interrupt.                               */

    struct {
      __IOM uint32_t COMPAREA   : 1;            /*!< [0..0] COUNTER is greater than or equal to COMPARE register
                                                     A.                                                                        */
      __IOM uint32_t COMPAREB   : 1;            /*!< [1..1] COUNTER is greater than or equal to COMPARE register
                                                     B.                                                                        */
      __IOM uint32_t COMPAREC   : 1;            /*!< [2..2] COUNTER is greater than or equal to COMPARE register
                                                     C.                                                                        */
      __IOM uint32_t COMPARED   : 1;            /*!< [3..3] COUNTER is greater than or equal to COMPARE register
                                                     D.                                                                        */
      __IOM uint32_t COMPAREE   : 1;            /*!< [4..4] COUNTER is greater than or equal to COMPARE register
                                                     E.                                                                        */
      __IOM uint32_t COMPAREF   : 1;            /*!< [5..5] COUNTER is greater than or equal to COMPARE register
                                                     F.                                                                        */
      __IOM uint32_t COMPAREG   : 1;            /*!< [6..6] COUNTER is greater than or equal to COMPARE register
                                                     G.                                                                        */
      __IOM uint32_t COMPAREH   : 1;            /*!< [7..7] COUNTER is greater than or equal to COMPARE register
                                                     H.                                                                        */
      __IOM uint32_t OVERFLOW   : 1;            /*!< [8..8] COUNTER over flowed from 0xFFFFFFFF back to 0x00000000.            */
      __IOM uint32_t CAPTUREA   : 1;            /*!< [9..9] CAPTURE register A has grabbed the value in the counter            */
      __IOM uint32_t CAPTUREB   : 1;            /*!< [10..10] CAPTURE register B has grabbed the value in the counter          */
      __IOM uint32_t CAPTUREC   : 1;            /*!< [11..11] CAPTURE register C has grabbed the value in the counter          */
      __IOM uint32_t CAPTURED   : 1;            /*!< [12..12] CAPTURE register D has grabbed the value in the counter          */
            uint32_t            : 19;
    } STMINTSTAT_b;
  } ;

  union {
    __IOM uint32_t STMINTCLR;                   /*!< (@ 0x00000108) Write a 1 to a bit in this register to clear
                                                                    the interrupt status associated with that
                                                                    bit.                                                       */

    struct {
      __IOM uint32_t COMPAREA   : 1;            /*!< [0..0] COUNTER is greater than or equal to COMPARE register
                                                     A.                                                                        */
      __IOM uint32_t COMPAREB   : 1;            /*!< [1..1] COUNTER is greater than or equal to COMPARE register
                                                     B.                                                                        */
      __IOM uint32_t COMPAREC   : 1;            /*!< [2..2] COUNTER is greater than or equal to COMPARE register
                                                     C.                                                                        */
      __IOM uint32_t COMPARED   : 1;            /*!< [3..3] COUNTER is greater than or equal to COMPARE register
                                                     D.                                                                        */
      __IOM uint32_t COMPAREE   : 1;            /*!< [4..4] COUNTER is greater than or equal to COMPARE register
                                                     E.                                                                        */
      __IOM uint32_t COMPAREF   : 1;            /*!< [5..5] COUNTER is greater than or equal to COMPARE register
                                                     F.                                                                        */
      __IOM uint32_t COMPAREG   : 1;            /*!< [6..6] COUNTER is greater than or equal to COMPARE register
                                                     G.                                                                        */
      __IOM uint32_t COMPAREH   : 1;            /*!< [7..7] COUNTER is greater than or equal to COMPARE register
                                                     H.                                                                        */
      __IOM uint32_t OVERFLOW   : 1;            /*!< [8..8] COUNTER over flowed from 0xFFFFFFFF back to 0x00000000.            */
      __IOM uint32_t CAPTUREA   : 1;            /*!< [9..9] CAPTURE register A has grabbed the value in the counter            */
      __IOM uint32_t CAPTUREB   : 1;            /*!< [10..10] CAPTURE register B has grabbed the value in the counter          */
      __IOM uint32_t CAPTUREC   : 1;            /*!< [11..11] CAPTURE register C has grabbed the value in the counter          */
      __IOM uint32_t CAPTURED   : 1;            /*!< [12..12] CAPTURE register D has grabbed the value in the counter          */
            uint32_t            : 19;
    } STMINTCLR_b;
  } ;

  union {
    __IOM uint32_t STMINTSET;                   /*!< (@ 0x0000010C) Write a 1 to a bit in this register to instantly
                                                                    generate an interrupt from this module.
                                                                    (Generally used for testing purposes).                     */

    struct {
      __IOM uint32_t COMPAREA   : 1;            /*!< [0..0] COUNTER is greater than or equal to COMPARE register
                                                     A.                                                                        */
      __IOM uint32_t COMPAREB   : 1;            /*!< [1..1] COUNTER is greater than or equal to COMPARE register
                                                     B.                                                                        */
      __IOM uint32_t COMPAREC   : 1;            /*!< [2..2] COUNTER is greater than or equal to COMPARE register
                                                     C.                                                                        */
      __IOM uint32_t COMPARED   : 1;            /*!< [3..3] COUNTER is greater than or equal to COMPARE register
                                                     D.                                                                        */
      __IOM uint32_t COMPAREE   : 1;            /*!< [4..4] COUNTER is greater than or equal to COMPARE register
                                                     E.                                                                        */
      __IOM uint32_t COMPAREF   : 1;            /*!< [5..5] COUNTER is greater than or equal to COMPARE register
                                                     F.                                                                        */
      __IOM uint32_t COMPAREG   : 1;            /*!< [6..6] COUNTER is greater than or equal to COMPARE register
                                                     G.                                                                        */
      __IOM uint32_t COMPAREH   : 1;            /*!< [7..7] COUNTER is greater than or equal to COMPARE register
                                                     H.                                                                        */
      __IOM uint32_t OVERFLOW   : 1;            /*!< [8..8] COUNTER over flowed from 0xFFFFFFFF back to 0x00000000.            */
      __IOM uint32_t CAPTUREA   : 1;            /*!< [9..9] CAPTURE register A has grabbed the value in the counter            */
      __IOM uint32_t CAPTUREB   : 1;            /*!< [10..10] CAPTURE register B has grabbed the value in the counter          */
      __IOM uint32_t CAPTUREC   : 1;            /*!< [11..11] CAPTURE register C has grabbed the value in the counter          */
      __IOM uint32_t CAPTURED   : 1;            /*!< [12..12] CAPTURE register D has grabbed the value in the counter          */
            uint32_t            : 19;
    } STMINTSET_b;
  } ;
} CM4STIMER_Type;                               /*!< Size = 272 (0x110)                                                        */



/* =========================================================================================================================== */
/* ================                                         CM4TIMER                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Counter/Timer (CM4TIMER)
  */

typedef struct {                                /*!< (@ 0x40008000) CM4TIMER Structure                                         */

  union {
    __IOM uint32_t CTRL;                        /*!< (@ 0x00000000) General Timer Controls                                     */

    struct {
            uint32_t            : 31;
      __IOM uint32_t RESET      : 1;            /*!< [31..31] Write to 1 to reset all timers (self-clearing)                   */
    } CTRL_b;
  } ;

  union {
    __IOM uint32_t STATUS;                      /*!< (@ 0x00000004) General Timer status                                       */

    struct {
      __IOM uint32_t ACTIVE     : 16;           /*!< [15..0] Indicates which timers are currnetly active (enabled)             */
      __IOM uint32_t NTIMERS    : 5;            /*!< [20..16] Indicates the number of timer blocks present in the
                                                     design                                                                    */
            uint32_t            : 11;
    } STATUS_b;
  } ;
  __IM  uint32_t  RESERVED[2];

  union {
    __IOM uint32_t GLOBEN;                      /*!< (@ 0x00000010) Alternate enables for all TIMERs.                          */

    struct {
      __IOM uint32_t ENB0       : 1;            /*!< [0..0] Alternate enable for timer 0                                       */
      __IOM uint32_t ENB1       : 1;            /*!< [1..1] Alternate enable for timer 1                                       */
      __IOM uint32_t ENB2       : 1;            /*!< [2..2] Alternate enable for timer 2                                       */
      __IOM uint32_t ENB3       : 1;            /*!< [3..3] Alternate enable for timer 3                                       */
            uint32_t            : 25;
      __IOM uint32_t ENABLEALLINPUTS : 1;       /*!< [29..29] Override to enable all GPIO inputs                               */
      __IOM uint32_t ADCEN      : 1;            /*!< [30..30] ADC controls enable for timer 3                                  */
            uint32_t            : 1;
    } GLOBEN_b;
  } ;
  __IM  uint32_t  RESERVED1[19];

  union {
    __IOM uint32_t INTEN;                       /*!< (@ 0x00000060) Set bits in this register to allow this module
                                                                    to generate the corresponding interrupt.                   */

    struct {
      __IOM uint32_t TMR00INT   : 1;            /*!< [0..0] Counter/Timer 0 interrupt based on CMP0.                           */
      __IOM uint32_t TMR01INT   : 1;            /*!< [1..1] Counter/Timer 0 interrupt based on CMP1.                           */
      __IOM uint32_t TMR10INT   : 1;            /*!< [2..2] Counter/Timer 1 interrupt based on CMP0.                           */
      __IOM uint32_t TMR11INT   : 1;            /*!< [3..3] Counter/Timer 1 interrupt based on CMP1.                           */
      __IOM uint32_t TMR20INT   : 1;            /*!< [4..4] Counter/Timer 2 interrupt based on CMP0.                           */
      __IOM uint32_t TMR21INT   : 1;            /*!< [5..5] Counter/Timer 2 interrupt based on CMP1.                           */
      __IOM uint32_t TMR30INT   : 1;            /*!< [6..6] Counter/Timer 3 interrupt based on CMP0.                           */
      __IOM uint32_t TMR31INT   : 1;            /*!< [7..7] Counter/Timer 3 interrupt based on CMP1.                           */
            uint32_t            : 24;
    } INTEN_b;
  } ;

  union {
    __IOM uint32_t INTSTAT;                     /*!< (@ 0x00000064) Read bits from this register to discover the
                                                                    cause of a recent interrupt.                               */

    struct {
      __IOM uint32_t TMR00INT   : 1;            /*!< [0..0] Counter/Timer 0 interrupt based on CMP0.                           */
      __IOM uint32_t TMR01INT   : 1;            /*!< [1..1] Counter/Timer 0 interrupt based on CMP1.                           */
      __IOM uint32_t TMR10INT   : 1;            /*!< [2..2] Counter/Timer 1 interrupt based on CMP0.                           */
      __IOM uint32_t TMR11INT   : 1;            /*!< [3..3] Counter/Timer 1 interrupt based on CMP1.                           */
      __IOM uint32_t TMR20INT   : 1;            /*!< [4..4] Counter/Timer 2 interrupt based on CMP0.                           */
      __IOM uint32_t TMR21INT   : 1;            /*!< [5..5] Counter/Timer 2 interrupt based on CMP1.                           */
      __IOM uint32_t TMR30INT   : 1;            /*!< [6..6] Counter/Timer 3 interrupt based on CMP0.                           */
      __IOM uint32_t TMR31INT   : 1;            /*!< [7..7] Counter/Timer 3 interrupt based on CMP1.                           */
            uint32_t            : 24;
    } INTSTAT_b;
  } ;

  union {
    __IOM uint32_t INTCLR;                      /*!< (@ 0x00000068) Write a 1 to a bit in this register to clear
                                                                    the interrupt status associated with that
                                                                    bit.                                                       */

    struct {
      __IOM uint32_t TMR00INT   : 1;            /*!< [0..0] Counter/Timer 0 interrupt based on CMP0.                           */
      __IOM uint32_t TMR01INT   : 1;            /*!< [1..1] Counter/Timer 0 interrupt based on CMP1.                           */
      __IOM uint32_t TMR10INT   : 1;            /*!< [2..2] Counter/Timer 1 interrupt based on CMP0.                           */
      __IOM uint32_t TMR11INT   : 1;            /*!< [3..3] Counter/Timer 1 interrupt based on CMP1.                           */
      __IOM uint32_t TMR20INT   : 1;            /*!< [4..4] Counter/Timer 2 interrupt based on CMP0.                           */
      __IOM uint32_t TMR21INT   : 1;            /*!< [5..5] Counter/Timer 2 interrupt based on CMP1.                           */
      __IOM uint32_t TMR30INT   : 1;            /*!< [6..6] Counter/Timer 3 interrupt based on CMP0.                           */
      __IOM uint32_t TMR31INT   : 1;            /*!< [7..7] Counter/Timer 3 interrupt based on CMP1.                           */
            uint32_t            : 24;
    } INTCLR_b;
  } ;

  union {
    __IOM uint32_t INTSET;                      /*!< (@ 0x0000006C) Write a 1 to a bit in this register to instantly
                                                                    generate an interrupt from this module.
                                                                    (Generally used for testing purposes).                     */

    struct {
      __IOM uint32_t TMR00INT   : 1;            /*!< [0..0] Counter/Timer 0 interrupt based on CMP0.                           */
      __IOM uint32_t TMR01INT   : 1;            /*!< [1..1] Counter/Timer 0 interrupt based on CMP1.                           */
      __IOM uint32_t TMR10INT   : 1;            /*!< [2..2] Counter/Timer 1 interrupt based on CMP0.                           */
      __IOM uint32_t TMR11INT   : 1;            /*!< [3..3] Counter/Timer 1 interrupt based on CMP1.                           */
      __IOM uint32_t TMR20INT   : 1;            /*!< [4..4] Counter/Timer 2 interrupt based on CMP0.                           */
      __IOM uint32_t TMR21INT   : 1;            /*!< [5..5] Counter/Timer 2 interrupt based on CMP1.                           */
      __IOM uint32_t TMR30INT   : 1;            /*!< [6..6] Counter/Timer 3 interrupt based on CMP0.                           */
      __IOM uint32_t TMR31INT   : 1;            /*!< [7..7] Counter/Timer 3 interrupt based on CMP1.                           */
            uint32_t            : 24;
    } INTSET_b;
  } ;
  __IM  uint32_t  RESERVED2[4];

  union {
    __IOM uint32_t OUTCFG0;                     /*!< (@ 0x00000080) Pad output configuration 0.                                */

    struct {
      __IOM uint32_t OUTCFG0    : 6;            /*!< [5..0] Pad output 0 configuration                                         */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG1    : 6;            /*!< [13..8] Pad output 1 configuration                                        */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG2    : 6;            /*!< [21..16] Pad output 2 configuration                                       */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG3    : 6;            /*!< [29..24] Pad output 3 configuration                                       */
            uint32_t            : 2;
    } OUTCFG0_b;
  } ;

  union {
    __IOM uint32_t OUTCFG1;                     /*!< (@ 0x00000084) Pad output configuration 0.                                */

    struct {
      __IOM uint32_t OUTCFG4    : 6;            /*!< [5..0] Pad output 4 configuration                                         */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG5    : 6;            /*!< [13..8] Pad output 5 configuration                                        */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG6    : 6;            /*!< [21..16] Pad output 6 configuration                                       */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG7    : 6;            /*!< [29..24] Pad output 7 configuration                                       */
            uint32_t            : 2;
    } OUTCFG1_b;
  } ;

  union {
    __IOM uint32_t OUTCFG2;                     /*!< (@ 0x00000088) Pad output configuration 0.                                */

    struct {
      __IOM uint32_t OUTCFG8    : 6;            /*!< [5..0] Pad output 8 configuration                                         */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG9    : 6;            /*!< [13..8] Pad output 9 configuration                                        */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG10   : 6;            /*!< [21..16] Pad output 10 configuration                                      */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG11   : 6;            /*!< [29..24] Pad output 11 configuration                                      */
            uint32_t            : 2;
    } OUTCFG2_b;
  } ;

  union {
    __IOM uint32_t OUTCFG3;                     /*!< (@ 0x0000008C) Pad output configuration 0.                                */

    struct {
      __IOM uint32_t OUTCFG12   : 6;            /*!< [5..0] Pad output 12 configuration                                        */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG13   : 6;            /*!< [13..8] Pad output 13 configuration                                       */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG14   : 6;            /*!< [21..16] Pad output 14 configuration                                      */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG15   : 6;            /*!< [29..24] Pad output 15 configuration                                      */
            uint32_t            : 2;
    } OUTCFG3_b;
  } ;

  union {
    __IOM uint32_t OUTCFG4;                     /*!< (@ 0x00000090) Pad output configuration 0.                                */

    struct {
      __IOM uint32_t OUTCFG16   : 6;            /*!< [5..0] Pad output 16 configuration                                        */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG17   : 6;            /*!< [13..8] Pad output 17 configuration                                       */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG18   : 6;            /*!< [21..16] Pad output 18 configuration                                      */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG19   : 6;            /*!< [29..24] Pad output 19 configuration                                      */
            uint32_t            : 2;
    } OUTCFG4_b;
  } ;

  union {
    __IOM uint32_t OUTCFG5;                     /*!< (@ 0x00000094) Pad output configuration 0.                                */

    struct {
      __IOM uint32_t OUTCFG20   : 6;            /*!< [5..0] Pad output 20 configuration                                        */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG21   : 6;            /*!< [13..8] Pad output 21 configuration                                       */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG22   : 6;            /*!< [21..16] Pad output 22 configuration                                      */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG23   : 6;            /*!< [29..24] Pad output 23 configuration                                      */
            uint32_t            : 2;
    } OUTCFG5_b;
  } ;

  union {
    __IOM uint32_t OUTCFG6;                     /*!< (@ 0x00000098) Pad output configuration 0.                                */

    struct {
      __IOM uint32_t OUTCFG24   : 6;            /*!< [5..0] Pad output 24 configuration                                        */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG25   : 6;            /*!< [13..8] Pad output 25 configuration                                       */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG26   : 6;            /*!< [21..16] Pad output 26 configuration                                      */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG27   : 6;            /*!< [29..24] Pad output 27 configuration                                      */
            uint32_t            : 2;
    } OUTCFG6_b;
  } ;

  union {
    __IOM uint32_t OUTCFG7;                     /*!< (@ 0x0000009C) Pad output configuration 0.                                */

    struct {
      __IOM uint32_t OUTCFG28   : 6;            /*!< [5..0] Pad output 28 configuration                                        */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG29   : 6;            /*!< [13..8] Pad output 29 configuration                                       */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG30   : 6;            /*!< [21..16] Pad output 30 configuration                                      */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG31   : 6;            /*!< [29..24] Pad output 31 configuration                                      */
            uint32_t            : 2;
    } OUTCFG7_b;
  } ;

  union {
    __IOM uint32_t OUTCFG8;                     /*!< (@ 0x000000A0) Pad output configuration 0.                                */

    struct {
      __IOM uint32_t OUTCFG32   : 6;            /*!< [5..0] Pad output 32 configuration                                        */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG33   : 6;            /*!< [13..8] Pad output 33 configuration                                       */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG34   : 6;            /*!< [21..16] Pad output 34 configuration                                      */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG35   : 6;            /*!< [29..24] Pad output 35 configuration                                      */
            uint32_t            : 2;
    } OUTCFG8_b;
  } ;

  union {
    __IOM uint32_t OUTCFG9;                     /*!< (@ 0x000000A4) Pad output configuration 0.                                */

    struct {
      __IOM uint32_t OUTCFG36   : 6;            /*!< [5..0] Pad output 36 configuration                                        */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG37   : 6;            /*!< [13..8] Pad output 37 configuration                                       */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG38   : 6;            /*!< [21..16] Pad output 38 configuration                                      */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG39   : 6;            /*!< [29..24] Pad output 39 configuration                                      */
            uint32_t            : 2;
    } OUTCFG9_b;
  } ;

  union {
    __IOM uint32_t OUTCFG10;                    /*!< (@ 0x000000A8) Pad output configuration 0.                                */

    struct {
      __IOM uint32_t OUTCFG40   : 6;            /*!< [5..0] Pad output 40 configuration                                        */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG41   : 6;            /*!< [13..8] Pad output 41 configuration                                       */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG42   : 6;            /*!< [21..16] Pad output 42 configuration                                      */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG43   : 6;            /*!< [29..24] Pad output 43 configuration                                      */
            uint32_t            : 2;
    } OUTCFG10_b;
  } ;

  union {
    __IOM uint32_t OUTCFG11;                    /*!< (@ 0x000000AC) Pad output configuration 0.                                */

    struct {
      __IOM uint32_t OUTCFG44   : 6;            /*!< [5..0] Pad output 44 configuration                                        */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG45   : 6;            /*!< [13..8] Pad output 45 configuration                                       */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG46   : 6;            /*!< [21..16] Pad output 46 configuration                                      */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG47   : 6;            /*!< [29..24] Pad output 47 configuration                                      */
            uint32_t            : 2;
    } OUTCFG11_b;
  } ;

  union {
    __IOM uint32_t OUTCFG12;                    /*!< (@ 0x000000B0) Pad output configuration 0.                                */

    struct {
      __IOM uint32_t OUTCFG48   : 6;            /*!< [5..0] Pad output 48 configuration                                        */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG49   : 6;            /*!< [13..8] Pad output 49 configuration                                       */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG50   : 6;            /*!< [21..16] Pad output 50 configuration                                      */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG51   : 6;            /*!< [29..24] Pad output 51 configuration                                      */
            uint32_t            : 2;
    } OUTCFG12_b;
  } ;

  union {
    __IOM uint32_t OUTCFG13;                    /*!< (@ 0x000000B4) Pad output configuration 0.                                */

    struct {
      __IOM uint32_t OUTCFG52   : 6;            /*!< [5..0] Pad output 52 configuration                                        */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG53   : 6;            /*!< [13..8] Pad output 53 configuration                                       */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG54   : 6;            /*!< [21..16] Pad output 54 configuration                                      */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG55   : 6;            /*!< [29..24] Pad output 55 configuration                                      */
            uint32_t            : 2;
    } OUTCFG13_b;
  } ;

  union {
    __IOM uint32_t OUTCFG14;                    /*!< (@ 0x000000B8) Pad output configuration 0.                                */

    struct {
      __IOM uint32_t OUTCFG56   : 6;            /*!< [5..0] Pad output 56 configuration                                        */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG57   : 6;            /*!< [13..8] Pad output 57 configuration                                       */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG58   : 6;            /*!< [21..16] Pad output 58 configuration                                      */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG59   : 6;            /*!< [29..24] Pad output 59 configuration                                      */
            uint32_t            : 2;
    } OUTCFG14_b;
  } ;

  union {
    __IOM uint32_t OUTCFG15;                    /*!< (@ 0x000000BC) Pad output configuration 0.                                */

    struct {
      __IOM uint32_t OUTCFG60   : 6;            /*!< [5..0] Pad output 60 configuration                                        */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG61   : 6;            /*!< [13..8] Pad output 61 configuration                                       */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG62   : 6;            /*!< [21..16] Pad output 62 configuration                                      */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG63   : 6;            /*!< [29..24] Pad output 63 configuration                                      */
            uint32_t            : 2;
    } OUTCFG15_b;
  } ;

  union {
    __IOM uint32_t OUTCFG16;                    /*!< (@ 0x000000C0) Pad output configuration 0.                                */

    struct {
      __IOM uint32_t OUTCFG64   : 6;            /*!< [5..0] Pad output 64 configuration                                        */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG65   : 6;            /*!< [13..8] Pad output 65 configuration                                       */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG66   : 6;            /*!< [21..16] Pad output 66 configuration                                      */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG67   : 6;            /*!< [29..24] Pad output 67 configuration                                      */
            uint32_t            : 2;
    } OUTCFG16_b;
  } ;

  union {
    __IOM uint32_t OUTCFG17;                    /*!< (@ 0x000000C4) Pad output configuration 0.                                */

    struct {
      __IOM uint32_t OUTCFG68   : 6;            /*!< [5..0] Pad output 68 configuration                                        */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG69   : 6;            /*!< [13..8] Pad output 69 configuration                                       */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG70   : 6;            /*!< [21..16] Pad output 70 configuration                                      */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG71   : 6;            /*!< [29..24] Pad output 71 configuration                                      */
            uint32_t            : 2;
    } OUTCFG17_b;
  } ;

  union {
    __IOM uint32_t OUTCFG18;                    /*!< (@ 0x000000C8) Pad output configuration 0.                                */

    struct {
      __IOM uint32_t OUTCFG72   : 6;            /*!< [5..0] Pad output 72 configuration                                        */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG73   : 6;            /*!< [13..8] Pad output 73 configuration                                       */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG74   : 6;            /*!< [21..16] Pad output 74 configuration                                      */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG75   : 6;            /*!< [29..24] Pad output 75 configuration                                      */
            uint32_t            : 2;
    } OUTCFG18_b;
  } ;

  union {
    __IOM uint32_t OUTCFG19;                    /*!< (@ 0x000000CC) Pad output configuration 0.                                */

    struct {
      __IOM uint32_t OUTCFG76   : 6;            /*!< [5..0] Pad output 76 configuration                                        */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG77   : 6;            /*!< [13..8] Pad output 77 configuration                                       */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG78   : 6;            /*!< [21..16] Pad output 78 configuration                                      */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG79   : 6;            /*!< [29..24] Pad output 79 configuration                                      */
            uint32_t            : 2;
    } OUTCFG19_b;
  } ;

  union {
    __IOM uint32_t OUTCFG20;                    /*!< (@ 0x000000D0) Pad output configuration 0.                                */

    struct {
      __IOM uint32_t OUTCFG80   : 6;            /*!< [5..0] Pad output 80 configuration                                        */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG81   : 6;            /*!< [13..8] Pad output 81 configuration                                       */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG82   : 6;            /*!< [21..16] Pad output 82 configuration                                      */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG83   : 6;            /*!< [29..24] Pad output 83 configuration                                      */
            uint32_t            : 2;
    } OUTCFG20_b;
  } ;

  union {
    __IOM uint32_t OUTCFG21;                    /*!< (@ 0x000000D4) Pad output configuration 0.                                */

    struct {
      __IOM uint32_t OUTCFG84   : 6;            /*!< [5..0] Pad output 84 configuration                                        */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG85   : 6;            /*!< [13..8] Pad output 85 configuration                                       */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG86   : 6;            /*!< [21..16] Pad output 86 configuration                                      */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG87   : 6;            /*!< [29..24] Pad output 87 configuration                                      */
            uint32_t            : 2;
    } OUTCFG21_b;
  } ;

  union {
    __IOM uint32_t OUTCFG22;                    /*!< (@ 0x000000D8) Pad output configuration 0.                                */

    struct {
      __IOM uint32_t OUTCFG88   : 6;            /*!< [5..0] Pad output 88 configuration                                        */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG89   : 6;            /*!< [13..8] Pad output 89 configuration                                       */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG90   : 6;            /*!< [21..16] Pad output 90 configuration                                      */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG91   : 6;            /*!< [29..24] Pad output 91 configuration                                      */
            uint32_t            : 2;
    } OUTCFG22_b;
  } ;

  union {
    __IOM uint32_t OUTCFG23;                    /*!< (@ 0x000000DC) Pad output configuration 0.                                */

    struct {
      __IOM uint32_t OUTCFG92   : 6;            /*!< [5..0] Pad output 92 configuration                                        */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG93   : 6;            /*!< [13..8] Pad output 93 configuration                                       */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG94   : 6;            /*!< [21..16] Pad output 94 configuration                                      */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG95   : 6;            /*!< [29..24] Pad output 95 configuration                                      */
            uint32_t            : 2;
    } OUTCFG23_b;
  } ;

  union {
    __IOM uint32_t OUTCFG24;                    /*!< (@ 0x000000E0) Pad output configuration 0.                                */

    struct {
      __IOM uint32_t OUTCFG96   : 6;            /*!< [5..0] Pad output 96 configuration                                        */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG97   : 6;            /*!< [13..8] Pad output 97 configuration                                       */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG98   : 6;            /*!< [21..16] Pad output 98 configuration                                      */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG99   : 6;            /*!< [29..24] Pad output 99 configuration                                      */
            uint32_t            : 2;
    } OUTCFG24_b;
  } ;

  union {
    __IOM uint32_t OUTCFG25;                    /*!< (@ 0x000000E4) Pad output configuration 0.                                */

    struct {
      __IOM uint32_t OUTCFG100  : 6;            /*!< [5..0] Pad output 100 configuration                                       */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG101  : 6;            /*!< [13..8] Pad output 101 configuration                                      */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG102  : 6;            /*!< [21..16] Pad output 102 configuration                                     */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG103  : 6;            /*!< [29..24] Pad output 103 configuration                                     */
            uint32_t            : 2;
    } OUTCFG25_b;
  } ;

  union {
    __IOM uint32_t OUTCFG26;                    /*!< (@ 0x000000E8) Pad output configuration 0.                                */

    struct {
      __IOM uint32_t OUTCFG104  : 6;            /*!< [5..0] Pad output 104 configuration                                       */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG105  : 6;            /*!< [13..8] Pad output 105 configuration                                      */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG106  : 6;            /*!< [21..16] Pad output 106 configuration                                     */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG107  : 6;            /*!< [29..24] Pad output 107 configuration                                     */
            uint32_t            : 2;
    } OUTCFG26_b;
  } ;

  union {
    __IOM uint32_t OUTCFG27;                    /*!< (@ 0x000000EC) Pad output configuration 0.                                */

    struct {
      __IOM uint32_t OUTCFG108  : 6;            /*!< [5..0] Pad output 108 configuration                                       */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG109  : 6;            /*!< [13..8] Pad output 109 configuration                                      */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG110  : 6;            /*!< [21..16] Pad output 110 configuration                                     */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG111  : 6;            /*!< [29..24] Pad output 111 configuration                                     */
            uint32_t            : 2;
    } OUTCFG27_b;
  } ;

  union {
    __IOM uint32_t OUTCFG28;                    /*!< (@ 0x000000F0) Pad output configuration 0.                                */

    struct {
      __IOM uint32_t OUTCFG112  : 6;            /*!< [5..0] Pad output 112 configuration                                       */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG113  : 6;            /*!< [13..8] Pad output 113 configuration                                      */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG114  : 6;            /*!< [21..16] Pad output 114 configuration                                     */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG115  : 6;            /*!< [29..24] Pad output 115 configuration                                     */
            uint32_t            : 2;
    } OUTCFG28_b;
  } ;

  union {
    __IOM uint32_t OUTCFG29;                    /*!< (@ 0x000000F4) Pad output configuration 0.                                */

    struct {
      __IOM uint32_t OUTCFG116  : 6;            /*!< [5..0] Pad output 116 configuration                                       */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG117  : 6;            /*!< [13..8] Pad output 117 configuration                                      */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG118  : 6;            /*!< [21..16] Pad output 118 configuration                                     */
            uint32_t            : 2;
      __IOM uint32_t OUTCFG119  : 6;            /*!< [29..24] Pad output 119 configuration                                     */
            uint32_t            : 2;
    } OUTCFG29_b;
  } ;
  __IM  uint32_t  RESERVED3[66];

  union {
    __IOM uint32_t CTRL0;                       /*!< (@ 0x00000200) This includes the Control bit fields for timer
                                                                    0.                                                         */

    struct {
      __IOM uint32_t TMR0EN     : 1;            /*!< [0..0] Counter/Timer 0 Enable bit.                                        */
      __IOM uint32_t TMR0CLR    : 1;            /*!< [1..1] Counter/Timer Clear bit.                                           */
      __IOM uint32_t TMR0POL0   : 1;            /*!< [2..2] Counter/Timer 0 output 0 polarity.                                 */
      __IOM uint32_t TMR0POL1   : 1;            /*!< [3..3] Counter/Timer 0 output 1 polarity.                                 */
      __IOM uint32_t TMR0FN     : 4;            /*!< [7..4] Counter/Timer 0 Function Select. For all Functions, CMP0
                                                     marks the end of timer cycle, and thus restarts the timer.                */
      __IOM uint32_t TMR0CLK    : 8;            /*!< [15..8] Counter/Timer 0 Clock Select.                                     */
      __IOM uint32_t TMR0TMODE  : 2;            /*!< [17..16] Counter/Timer 0 Trigger Mode                                     */
            uint32_t            : 6;
      __IOM uint32_t TMR0LMT    : 8;            /*!< [31..24] This field decides the number of iterations of Counter/Timer
                                                     0. For Single/Repeat Patterns, it indicates number of bits
                                                     to be shifted out and so, max value is 63.                                */
    } CTRL0_b;
  } ;

  union {
    __IOM uint32_t TIMER0;                      /*!< (@ 0x00000204) This register holds the running time or event
                                                                    count for timer 0.                                         */

    struct {
      __IOM uint32_t TIMER0     : 32;           /*!< [31..0] Counter/Timer 0                                                   */
    } TIMER0_b;
  } ;

  union {
    __IOM uint32_t TMR0CMP0;                    /*!< (@ 0x00000208) This contains the Compare limits for timer 0.
                                                                    This is the primary comparator that can
                                                                    be used to mark the END of a timer cycle
                                                                    (and thus restart the timer for repeat modes)              */

    struct {
      __IOM uint32_t TMR0CMP0   : 32;           /*!< [31..0] Counter/Timer 0 End Compare Register. For MEASURE mode
                                                     indicates the high phase sample count.                                    */
    } TMR0CMP0_b;
  } ;

  union {
    __IOM uint32_t TMR0CMP1;                    /*!< (@ 0x0000020C) This comparator is used as a secondary compare
                                                                    count for modes that generate pulses. For
                                                                    MEASURE mode indicates the low phase sample
                                                                    count.                                                     */

    struct {
      __IOM uint32_t TMR0CMP1   : 32;           /*!< [31..0] Holds the secondary comparator that can be used to generate
                                                     a PWM or generate secondary pulses. CMP0 should ALWAYS
                                                     be used first.                                                            */
    } TMR0CMP1_b;
  } ;

  union {
    __IOM uint32_t MODE0;                       /*!< (@ 0x00000210) The mode register contains optional mode controls
                                                                    for the timer                                              */

    struct {
            uint32_t            : 8;
      __IOM uint32_t TMR0TRIGSEL : 8;           /*!< [15..8] Counter/Timer 0 Trigger Source Selection                          */
            uint32_t            : 16;
    } MODE0_b;
  } ;

  union {
    __IOM uint32_t TMR0LMTVAL;                  /*!< (@ 0x00000214) This is an internal counter in the hardware that
                                                                    counts down from TMR_LMT to 1                              */

    struct {
      __IOM uint32_t TMR0LMTVAL : 8;            /*!< [7..0] Counter/Timer 0 Limit Readback                                     */
            uint32_t            : 24;
    } TMR0LMTVAL_b;
  } ;
  __IM  uint32_t  RESERVED4[2];

  union {
    __IOM uint32_t CTRL1;                       /*!< (@ 0x00000220) This includes the Control bit fields for timer
                                                                    1.                                                         */

    struct {
      __IOM uint32_t TMR1EN     : 1;            /*!< [0..0] Counter/Timer 1 Enable bit.                                        */
      __IOM uint32_t TMR1CLR    : 1;            /*!< [1..1] Counter/Timer Clear bit.                                           */
      __IOM uint32_t TMR1POL0   : 1;            /*!< [2..2] Counter/Timer 1 output 0 polarity.                                 */
      __IOM uint32_t TMR1POL1   : 1;            /*!< [3..3] Counter/Timer 1 output 1 polarity.                                 */
      __IOM uint32_t TMR1FN     : 4;            /*!< [7..4] Counter/Timer 1 Function Select. For all Functions, CMP0
                                                     marks the end of timer cycle, and thus restarts the timer.                */
      __IOM uint32_t TMR1CLK    : 8;            /*!< [15..8] Counter/Timer 1 Clock Select.                                     */
      __IOM uint32_t TMR1TMODE  : 2;            /*!< [17..16] Counter/Timer 1 Trigger Mode                                     */
            uint32_t            : 6;
      __IOM uint32_t TMR1LMT    : 8;            /*!< [31..24] This field decides the number of iterations of Counter/Timer
                                                     1. For Single/Repeat Patterns, it indicates number of bits
                                                     to be shifted out and so, max value is 63.                                */
    } CTRL1_b;
  } ;

  union {
    __IOM uint32_t TIMER1;                      /*!< (@ 0x00000224) This register holds the running time or event
                                                                    count for timer 1.                                         */

    struct {
      __IOM uint32_t TIMER1     : 32;           /*!< [31..0] Counter/Timer 1                                                   */
    } TIMER1_b;
  } ;

  union {
    __IOM uint32_t TMR1CMP0;                    /*!< (@ 0x00000228) This contains the Compare limits for timer 1.
                                                                    This is the primary comparator that can
                                                                    be used to mark the END of a timer cycle
                                                                    (and thus restart the timer for repeat modes)              */

    struct {
      __IOM uint32_t TMR1CMP0   : 32;           /*!< [31..0] Counter/Timer 1 End Compare Register. For MEASURE mode
                                                     indicates the high phase sample count.                                    */
    } TMR1CMP0_b;
  } ;

  union {
    __IOM uint32_t TMR1CMP1;                    /*!< (@ 0x0000022C) This comparator is used as a secondary compare
                                                                    count for modes that generate pulses. For
                                                                    MEASURE mode indicates the low phase sample
                                                                    count.                                                     */

    struct {
      __IOM uint32_t TMR1CMP1   : 32;           /*!< [31..0] Holds the secondary comparator that can be used to generate
                                                     a PWM or generate secondary pulses. CMP0 should ALWAYS
                                                     be used first.                                                            */
    } TMR1CMP1_b;
  } ;

  union {
    __IOM uint32_t MODE1;                       /*!< (@ 0x00000230) The mode register contains optional mode controls
                                                                    for the timer                                              */

    struct {
            uint32_t            : 8;
      __IOM uint32_t TMR1TRIGSEL : 8;           /*!< [15..8] Counter/Timer 1 Trigger Source Selection                          */
            uint32_t            : 16;
    } MODE1_b;
  } ;

  union {
    __IOM uint32_t TMR1LMTVAL;                  /*!< (@ 0x00000234) This is an internal counter in the hardware that
                                                                    counts down from TMR_LMT to 1                              */

    struct {
      __IOM uint32_t TMR1LMTVAL : 8;            /*!< [7..0] Counter/Timer 1 Limit Readback                                     */
            uint32_t            : 24;
    } TMR1LMTVAL_b;
  } ;
  __IM  uint32_t  RESERVED5[2];

  union {
    __IOM uint32_t CTRL2;                       /*!< (@ 0x00000240) This includes the Control bit fields for timer
                                                                    2.                                                         */

    struct {
      __IOM uint32_t TMR2EN     : 1;            /*!< [0..0] Counter/Timer 2 Enable bit.                                        */
      __IOM uint32_t TMR2CLR    : 1;            /*!< [1..1] Counter/Timer Clear bit.                                           */
      __IOM uint32_t TMR2POL0   : 1;            /*!< [2..2] Counter/Timer 2 output 0 polarity.                                 */
      __IOM uint32_t TMR2POL1   : 1;            /*!< [3..3] Counter/Timer 2 output 1 polarity.                                 */
      __IOM uint32_t TMR2FN     : 4;            /*!< [7..4] Counter/Timer 2 Function Select. For all Functions, CMP0
                                                     marks the end of timer cycle, and thus restarts the timer.                */
      __IOM uint32_t TMR2CLK    : 8;            /*!< [15..8] Counter/Timer 2 Clock Select.                                     */
      __IOM uint32_t TMR2TMODE  : 2;            /*!< [17..16] Counter/Timer 2 Trigger Mode                                     */
            uint32_t            : 6;
      __IOM uint32_t TMR2LMT    : 8;            /*!< [31..24] This field decides the number of iterations of Counter/Timer
                                                     2. For Single/Repeat Patterns, it indicates number of bits
                                                     to be shifted out and so, max value is 63.                                */
    } CTRL2_b;
  } ;

  union {
    __IOM uint32_t TIMER2;                      /*!< (@ 0x00000244) This register holds the running time or event
                                                                    count for timer 2.                                         */

    struct {
      __IOM uint32_t TIMER2     : 32;           /*!< [31..0] Counter/Timer 2                                                   */
    } TIMER2_b;
  } ;

  union {
    __IOM uint32_t TMR2CMP0;                    /*!< (@ 0x00000248) This contains the Compare limits for timer 2.
                                                                    This is the primary comparator that can
                                                                    be used to mark the END of a timer cycle
                                                                    (and thus restart the timer for repeat modes)              */

    struct {
      __IOM uint32_t TMR2CMP0   : 32;           /*!< [31..0] Counter/Timer 2 End Compare Register. For MEASURE mode
                                                     indicates the high phase sample count.                                    */
    } TMR2CMP0_b;
  } ;

  union {
    __IOM uint32_t TMR2CMP1;                    /*!< (@ 0x0000024C) This comparator is used as a secondary compare
                                                                    count for modes that generate pulses. For
                                                                    MEASURE mode indicates the low phase sample
                                                                    count.                                                     */

    struct {
      __IOM uint32_t TMR2CMP1   : 32;           /*!< [31..0] Holds the secondary comparator that can be used to generate
                                                     a PWM or generate secondary pulses. CMP0 should ALWAYS
                                                     be used first.                                                            */
    } TMR2CMP1_b;
  } ;

  union {
    __IOM uint32_t MODE2;                       /*!< (@ 0x00000250) The mode register contains optional mode controls
                                                                    for the timer                                              */

    struct {
            uint32_t            : 8;
      __IOM uint32_t TMR2TRIGSEL : 8;           /*!< [15..8] Counter/Timer 2 Trigger Source Selection                          */
            uint32_t            : 16;
    } MODE2_b;
  } ;

  union {
    __IOM uint32_t TMR2LMTVAL;                  /*!< (@ 0x00000254) This is an internal counter in the hardware that
                                                                    counts down from TMR_LMT to 1                              */

    struct {
      __IOM uint32_t TMR2LMTVAL : 8;            /*!< [7..0] Counter/Timer 2 Limit Readback                                     */
            uint32_t            : 24;
    } TMR2LMTVAL_b;
  } ;
  __IM  uint32_t  RESERVED6[2];

  union {
    __IOM uint32_t CTRL3;                       /*!< (@ 0x00000260) This includes the Control bit fields for timer
                                                                    3.                                                         */

    struct {
      __IOM uint32_t TMR3EN     : 1;            /*!< [0..0] Counter/Timer 3 Enable bit.                                        */
      __IOM uint32_t TMR3CLR    : 1;            /*!< [1..1] Counter/Timer Clear bit.                                           */
      __IOM uint32_t TMR3POL0   : 1;            /*!< [2..2] Counter/Timer 3 output 0 polarity.                                 */
      __IOM uint32_t TMR3POL1   : 1;            /*!< [3..3] Counter/Timer 3 output 1 polarity.                                 */
      __IOM uint32_t TMR3FN     : 4;            /*!< [7..4] Counter/Timer 3 Function Select. For all Functions, CMP0
                                                     marks the end of timer cycle, and thus restarts the timer.                */
      __IOM uint32_t TMR3CLK    : 8;            /*!< [15..8] Counter/Timer 3 Clock Select.                                     */
      __IOM uint32_t TMR3TMODE  : 2;            /*!< [17..16] Counter/Timer 3 Trigger Mode                                     */
            uint32_t            : 6;
      __IOM uint32_t TMR3LMT    : 8;            /*!< [31..24] This field decides the number of iterations of Counter/Timer
                                                     3. For Single/Repeat Patterns, it indicates number of bits
                                                     to be shifted out and so, max value is 63.                                */
    } CTRL3_b;
  } ;

  union {
    __IOM uint32_t TIMER3;                      /*!< (@ 0x00000264) This register holds the running time or event
                                                                    count for timer 3.                                         */

    struct {
      __IOM uint32_t TIMER3     : 32;           /*!< [31..0] Counter/Timer 3                                                   */
    } TIMER3_b;
  } ;

  union {
    __IOM uint32_t TMR3CMP0;                    /*!< (@ 0x00000268) This contains the Compare limits for timer 3.
                                                                    This is the primary comparator that can
                                                                    be used to mark the END of a timer cycle
                                                                    (and thus restart the timer for repeat modes)              */

    struct {
      __IOM uint32_t TMR3CMP0   : 32;           /*!< [31..0] Counter/Timer 3 End Compare Register. For MEASURE mode
                                                     indicates the high phase sample count.                                    */
    } TMR3CMP0_b;
  } ;

  union {
    __IOM uint32_t TMR3CMP1;                    /*!< (@ 0x0000026C) This comparator is used as a secondary compare
                                                                    count for modes that generate pulses. For
                                                                    MEASURE mode indicates the low phase sample
                                                                    count.                                                     */

    struct {
      __IOM uint32_t TMR3CMP1   : 32;           /*!< [31..0] Holds the secondary comparator that can be used to generate
                                                     a PWM or generate secondary pulses. CMP0 should ALWAYS
                                                     be used first.                                                            */
    } TMR3CMP1_b;
  } ;

  union {
    __IOM uint32_t MODE3;                       /*!< (@ 0x00000270) The mode register contains optional mode controls
                                                                    for the timer                                              */

    struct {
            uint32_t            : 8;
      __IOM uint32_t TMR3TRIGSEL : 8;           /*!< [15..8] Counter/Timer 3 Trigger Source Selection                          */
            uint32_t            : 16;
    } MODE3_b;
  } ;

  union {
    __IOM uint32_t TMR3LMTVAL;                  /*!< (@ 0x00000274) This is an internal counter in the hardware that
                                                                    counts down from TMR_LMT to 1                              */

    struct {
      __IOM uint32_t TMR3LMTVAL : 8;            /*!< [7..0] Counter/Timer 3 Limit Readback                                     */
            uint32_t            : 24;
    } TMR3LMTVAL_b;
  } ;
  __IM  uint32_t  RESERVED7[96];

  union {
    __IOM uint32_t TIMERSPARES;                 /*!< (@ 0x000003F8) Timer Spare Regs                                           */

    struct {
      __IOM uint32_t TMRSPARES  : 32;           /*!< [31..0] Placeholer spare registes that can be used as needed
                                                     for future use                                                            */
    } TIMERSPARES_b;
  } ;
} CM4TIMER_Type;                                /*!< Size = 1020 (0x3fc)                                                       */



/* =========================================================================================================================== */
/* ================                                          CM4WDT                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Watchdog Timer (CM4WDT)
  */

typedef struct {                                /*!< (@ 0x40006000) CM4WDT Structure                                           */

  union {
    __IOM uint32_t CFG;                         /*!< (@ 0x00000000) This is the configuration register for the watch
                                                                    dog timer. It controls the enable, interrupt
                                                                    set, clocks for the timer, the compare values
                                                                    for the counters to trigger a reset or interrupt.
                                                                    This register can only be written to if
                                                                    the watch dog timer is unlocked (WDTLOCK
                                                                    is not set).                                               */

    struct {
      __IOM uint32_t WDTEN      : 1;            /*!< [0..0] This bitfield enables the WDT.                                     */
      __IOM uint32_t INTEN      : 1;            /*!< [1..1] This bitfield enables the WDT interrupt. Note : This
                                                     bit must be set before the interrupt status bit will reflect
                                                     a watchdog timer expiration. The IER interrupt register
                                                     must also be enabled for a WDT interrupt to be sent to
                                                     the NVIC.                                                                 */
      __IOM uint32_t RESEN      : 1;            /*!< [2..2] This bitfield enables the WDT reset. This needs to be
                                                     set together with the WDREN bit in REG_RSTGEN_CFG register
                                                     (in reset gen) to trigger the reset.                                      */
            uint32_t            : 5;
      __IOM uint32_t RESVAL     : 8;            /*!< [15..8] This bitfield is the compare value for counter bits
                                                     7:0 to generate a watchdog reset. This will cause a software
                                                     reset.                                                                    */
      __IOM uint32_t INTVAL     : 8;            /*!< [23..16] This bitfield is the compare value for counter bits
                                                     7:0 to generate a watchdog interrupt.                                     */
      __IOM uint32_t CLKSEL     : 3;            /*!< [26..24] Select the frequency for the WDT. All values not enumerated
                                                     below are undefined.                                                      */
            uint32_t            : 5;
    } CFG_b;
  } ;

  union {
    __IOM uint32_t RSTRT;                       /*!< (@ 0x00000004) This register will Restart the watchdog timer.
                                                                    Writing a special key value into this register
                                                                    will result in the watch dog timer being
                                                                    reset, so that the count will start again.
                                                                    It is expected that the software will periodically
                                                                    write to this register to indicate that
                                                                    the system is functional. The watch dog
                                                                    timer can continue running when the system
                                                                    is in deep sleep, and the interrupt will
                                                                    trigger the wake. After the wake, the core
                                                                    can reset the watch dog timer.                             */

    struct {
      __IOM uint32_t RSTRT      : 8;            /*!< [7..0] Writing 0xB2 to WDTRSTRT restarts the watchdog timer.
                                                     This is a write only register. Reading this register will
                                                     only provide all 0.                                                       */
            uint32_t            : 24;
    } RSTRT_b;
  } ;

  union {
    __IOM uint32_t LOCK;                        /*!< (@ 0x00000008) This register locks the watch dog timer. Once
                                                                    it is locked, the configuration register
                                                                    (WDTCFG) for watch dog timer cannot be written
                                                                    to.                                                        */

    struct {
      __IOM uint32_t LOCK       : 8;            /*!< [7..0] Writing 0x3A locks the watchdog timer. Once locked, the
                                                     WDTCFG reg cannot be written and WDTEN is set.                            */
            uint32_t            : 24;
    } LOCK_b;
  } ;

  union {
    __IOM uint32_t COUNT;                       /*!< (@ 0x0000000C) This register holds the current count for the
                                                                    watch dog timer. This is a read only register.
                                                                    SW cannot set the value in the counter,
                                                                    but can reset it.                                          */

    struct {
      __IOM uint32_t COUNT      : 8;            /*!< [7..0] Read-Only current value of the WDT counter                         */
            uint32_t            : 24;
    } COUNT_b;
  } ;
  __IM  uint32_t  RESERVED[124];

  union {
    __IOM uint32_t WDTIEREN;                    /*!< (@ 0x00000200) Set bits in this register to allow this module
                                                                    to generate the corresponding interrupt.                   */

    struct {
      __IOM uint32_t WDTINT     : 1;            /*!< [0..0] Watchdog Timer Interrupt.                                          */
            uint32_t            : 31;
    } WDTIEREN_b;
  } ;

  union {
    __IOM uint32_t WDTIERSTAT;                  /*!< (@ 0x00000204) Read bits from this register to discover the
                                                                    cause of a recent interrupt.                               */

    struct {
      __IOM uint32_t WDTINT     : 1;            /*!< [0..0] Watchdog Timer Interrupt.                                          */
            uint32_t            : 31;
    } WDTIERSTAT_b;
  } ;

  union {
    __IOM uint32_t WDTIERCLR;                   /*!< (@ 0x00000208) Write a 1 to a bit in this register to clear
                                                                    the interrupt status associated with that
                                                                    bit.                                                       */

    struct {
      __IOM uint32_t WDTINT     : 1;            /*!< [0..0] Watchdog Timer Interrupt.                                          */
            uint32_t            : 31;
    } WDTIERCLR_b;
  } ;

  union {
    __IOM uint32_t WDTIERSET;                   /*!< (@ 0x0000020C) Write a 1 to a bit in this register to instantly
                                                                    generate an interrupt from this module.
                                                                    (Generally used for testing purposes).                     */

    struct {
      __IOM uint32_t WDTINT     : 1;            /*!< [0..0] Watchdog Timer Interrupt.                                          */
            uint32_t            : 31;
    } WDTIERSET_b;
  } ;
} CM4WDT_Type;                                  /*!< Size = 528 (0x210)                                                        */


/** @} */ /* End of group Device_Peripheral_peripherals */


/* =========================================================================================================================== */
/* ================                          Device Specific Peripheral Address Map                           ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripheralAddr
  * @{
  */

#define CM4IPC_BASE                 0x40034000UL
#define CM4MCUCTRL_BASE             0x4000A800UL
#define CM4RADIO_BASE               0x40030000UL
#define RTC_BASE                    0x40004800UL
#define CM4STIMER_BASE              0x40008800UL
#define CM4TIMER_BASE               0x40008000UL
#define CM4WDT_BASE                 0x40006000UL

/** @} */ /* End of group Device_Peripheral_peripheralAddr */


/* =========================================================================================================================== */
/* ================                                  Peripheral declaration                                   ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_declaration
  * @{
  */

#define CM4IPC                      ((CM4IPC_Type*)            CM4IPC_BASE)
#define CM4MCUCTRL                  ((CM4MCUCTRL_Type*)        CM4MCUCTRL_BASE)
#define CM4RADIO                    ((CM4RADIO_Type*)          CM4RADIO_BASE)
#define RTC                         ((RTC_Type*)               RTC_BASE)
#define CM4STIMER                   ((CM4STIMER_Type*)         CM4STIMER_BASE)
#define CM4TIMER                    ((CM4TIMER_Type*)          CM4TIMER_BASE)
#define CM4WDT                      ((CM4WDT_Type*)            CM4WDT_BASE)

/** @} */ /* End of group Device_Peripheral_declaration */


/* =========================================  End of section using anonymous unions  ========================================= */
#if defined (__CC_ARM)
  #pragma pop
#elif defined (__ICCARM__)
  /* leave anonymous unions enabled */
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic pop
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning restore
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#endif


/* =========================================================================================================================== */
/* ================                                Pos/Mask Peripheral Section                                ================ */
/* =========================================================================================================================== */


/** @addtogroup PosMask_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                          CM4IPC                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  M2DDATA  ======================================================== */
#define CM4IPC_M2DDATA_M2DMESSAGE_Pos     (0UL)                     /*!< M2DMESSAGE (Bit 0)                                    */
#define CM4IPC_M2DDATA_M2DMESSAGE_Msk     (0xffffffffUL)            /*!< M2DMESSAGE (Bitfield-Mask: 0xffffffff)                */
/* ========================================================  D2MDATA  ======================================================== */
#define CM4IPC_D2MDATA_D2MMESSAGE_Pos     (0UL)                     /*!< D2MMESSAGE (Bit 0)                                    */
#define CM4IPC_D2MDATA_D2MMESSAGE_Msk     (0xffffffffUL)            /*!< D2MMESSAGE (Bitfield-Mask: 0xffffffff)                */
/* ========================================================  STATUS  ========================================================= */
#define CM4IPC_STATUS_M2DPEND_Pos         (20UL)                    /*!< M2DPEND (Bit 20)                                      */
#define CM4IPC_STATUS_M2DPEND_Msk         (0x3f00000UL)             /*!< M2DPEND (Bitfield-Mask: 0x3f)                         */
#define CM4IPC_STATUS_M2DTHRESHOLDACTIVE_Pos (18UL)                 /*!< M2DTHRESHOLDACTIVE (Bit 18)                           */
#define CM4IPC_STATUS_M2DTHRESHOLDACTIVE_Msk (0x40000UL)            /*!< M2DTHRESHOLDACTIVE (Bitfield-Mask: 0x01)              */
#define CM4IPC_STATUS_M2DFULL_Pos         (17UL)                    /*!< M2DFULL (Bit 17)                                      */
#define CM4IPC_STATUS_M2DFULL_Msk         (0x20000UL)               /*!< M2DFULL (Bitfield-Mask: 0x01)                         */
#define CM4IPC_STATUS_M2DEMPTY_Pos        (16UL)                    /*!< M2DEMPTY (Bit 16)                                     */
#define CM4IPC_STATUS_M2DEMPTY_Msk        (0x10000UL)               /*!< M2DEMPTY (Bitfield-Mask: 0x01)                        */
#define CM4IPC_STATUS_D2MPEND_Pos         (4UL)                     /*!< D2MPEND (Bit 4)                                       */
#define CM4IPC_STATUS_D2MPEND_Msk         (0x3f0UL)                 /*!< D2MPEND (Bitfield-Mask: 0x3f)                         */
#define CM4IPC_STATUS_D2MTHRESHOLDACTIVE_Pos (2UL)                  /*!< D2MTHRESHOLDACTIVE (Bit 2)                            */
#define CM4IPC_STATUS_D2MTHRESHOLDACTIVE_Msk (0x4UL)                /*!< D2MTHRESHOLDACTIVE (Bitfield-Mask: 0x01)              */
#define CM4IPC_STATUS_D2MFULL_Pos         (1UL)                     /*!< D2MFULL (Bit 1)                                       */
#define CM4IPC_STATUS_D2MFULL_Msk         (0x2UL)                   /*!< D2MFULL (Bitfield-Mask: 0x01)                         */
#define CM4IPC_STATUS_D2MEMPTY_Pos        (0UL)                     /*!< D2MEMPTY (Bit 0)                                      */
#define CM4IPC_STATUS_D2MEMPTY_Msk        (0x1UL)                   /*!< D2MEMPTY (Bitfield-Mask: 0x01)                        */
/* =======================================================  M2DERROR  ======================================================== */
#define CM4IPC_M2DERROR_M2DFULLERROR_Pos  (1UL)                     /*!< M2DFULLERROR (Bit 1)                                  */
#define CM4IPC_M2DERROR_M2DFULLERROR_Msk  (0x2UL)                   /*!< M2DFULLERROR (Bitfield-Mask: 0x01)                    */
#define CM4IPC_M2DERROR_M2DEMPTYERROR_Pos (0UL)                     /*!< M2DEMPTYERROR (Bit 0)                                 */
#define CM4IPC_M2DERROR_M2DEMPTYERROR_Msk (0x1UL)                   /*!< M2DEMPTYERROR (Bitfield-Mask: 0x01)                   */
/* =========================================================  M2DIT  ========================================================= */
#define CM4IPC_M2DIT_M2DTHRESHOLD_Pos     (0UL)                     /*!< M2DTHRESHOLD (Bit 0)                                  */
#define CM4IPC_M2DIT_M2DTHRESHOLD_Msk     (0x1fUL)                  /*!< M2DTHRESHOLD (Bitfield-Mask: 0x1f)                    */
/* =========================================================  M2DIS  ========================================================= */
#define CM4IPC_M2DIS_M2DERRORIRQ_Pos      (1UL)                     /*!< M2DERRORIRQ (Bit 1)                                   */
#define CM4IPC_M2DIS_M2DERRORIRQ_Msk      (0x2UL)                   /*!< M2DERRORIRQ (Bitfield-Mask: 0x01)                     */
#define CM4IPC_M2DIS_M2DTHRESHOLDIRQ_Pos  (0UL)                     /*!< M2DTHRESHOLDIRQ (Bit 0)                               */
#define CM4IPC_M2DIS_M2DTHRESHOLDIRQ_Msk  (0x1UL)                   /*!< M2DTHRESHOLDIRQ (Bitfield-Mask: 0x01)                 */
/* =========================================================  M2DIE  ========================================================= */
#define CM4IPC_M2DIE_M2DERRORIRQEN_Pos    (1UL)                     /*!< M2DERRORIRQEN (Bit 1)                                 */
#define CM4IPC_M2DIE_M2DERRORIRQEN_Msk    (0x2UL)                   /*!< M2DERRORIRQEN (Bitfield-Mask: 0x01)                   */
#define CM4IPC_M2DIE_M2DTHRESHOLDIRQEN_Pos (0UL)                    /*!< M2DTHRESHOLDIRQEN (Bit 0)                             */
#define CM4IPC_M2DIE_M2DTHRESHOLDIRQEN_Msk (0x1UL)                  /*!< M2DTHRESHOLDIRQEN (Bitfield-Mask: 0x01)               */
/* =========================================================  D2MIT  ========================================================= */
#define CM4IPC_D2MIT_D2MTHRESHOLD_Pos     (0UL)                     /*!< D2MTHRESHOLD (Bit 0)                                  */
#define CM4IPC_D2MIT_D2MTHRESHOLD_Msk     (0x1fUL)                  /*!< D2MTHRESHOLD (Bitfield-Mask: 0x1f)                    */
/* =========================================================  D2MIS  ========================================================= */
#define CM4IPC_D2MIS_D2MERRORIRQ_Pos      (1UL)                     /*!< D2MERRORIRQ (Bit 1)                                   */
#define CM4IPC_D2MIS_D2MERRORIRQ_Msk      (0x2UL)                   /*!< D2MERRORIRQ (Bitfield-Mask: 0x01)                     */
#define CM4IPC_D2MIS_D2MTHRESHOLDIRQ_Pos  (0UL)                     /*!< D2MTHRESHOLDIRQ (Bit 0)                               */
#define CM4IPC_D2MIS_D2MTHRESHOLDIRQ_Msk  (0x1UL)                   /*!< D2MTHRESHOLDIRQ (Bitfield-Mask: 0x01)                 */
/* =========================================================  D2MIE  ========================================================= */
#define CM4IPC_D2MIE_D2MERRORIRQEN_Pos    (1UL)                     /*!< D2MERRORIRQEN (Bit 1)                                 */
#define CM4IPC_D2MIE_D2MERRORIRQEN_Msk    (0x2UL)                   /*!< D2MERRORIRQEN (Bitfield-Mask: 0x01)                   */
#define CM4IPC_D2MIE_D2MTHRESHOLDIRQEN_Pos (0UL)                    /*!< D2MTHRESHOLDIRQEN (Bit 0)                             */
#define CM4IPC_D2MIE_D2MTHRESHOLDIRQEN_Msk (0x1UL)                  /*!< D2MTHRESHOLDIRQEN (Bitfield-Mask: 0x01)               */


/* =========================================================================================================================== */
/* ================                                        CM4MCUCTRL                                         ================ */
/* =========================================================================================================================== */

/* ========================================================  OBSSEL  ========================================================= */
#define CM4MCUCTRL_OBSSEL_OBSSEL1_Pos     (6UL)                     /*!< OBSSEL1 (Bit 6)                                       */
#define CM4MCUCTRL_OBSSEL_OBSSEL1_Msk     (0x7c0UL)                 /*!< OBSSEL1 (Bitfield-Mask: 0x1f)                         */
#define CM4MCUCTRL_OBSSEL_OBSSEL0_Pos     (1UL)                     /*!< OBSSEL0 (Bit 1)                                       */
#define CM4MCUCTRL_OBSSEL_OBSSEL0_Msk     (0x3eUL)                  /*!< OBSSEL0 (Bitfield-Mask: 0x1f)                         */
#define CM4MCUCTRL_OBSSEL_OBSEN_Pos       (0UL)                     /*!< OBSEN (Bit 0)                                         */
#define CM4MCUCTRL_OBSSEL_OBSEN_Msk       (0x1UL)                   /*!< OBSEN (Bitfield-Mask: 0x01)                           */
/* ======================================================  CQFLAGSOUT  ======================================================= */
#define CM4MCUCTRL_CQFLAGSOUT_CQOUTMSPI2_Pos (16UL)                 /*!< CQOUTMSPI2 (Bit 16)                                   */
#define CM4MCUCTRL_CQFLAGSOUT_CQOUTMSPI2_Msk (0x30000UL)            /*!< CQOUTMSPI2 (Bitfield-Mask: 0x03)                      */
#define CM4MCUCTRL_CQFLAGSOUT_CQOUTMSPI1_Pos (14UL)                 /*!< CQOUTMSPI1 (Bit 14)                                   */
#define CM4MCUCTRL_CQFLAGSOUT_CQOUTMSPI1_Msk (0xc000UL)             /*!< CQOUTMSPI1 (Bitfield-Mask: 0x03)                      */
#define CM4MCUCTRL_CQFLAGSOUT_CQOUTMSPI0_Pos (12UL)                 /*!< CQOUTMSPI0 (Bit 12)                                   */
#define CM4MCUCTRL_CQFLAGSOUT_CQOUTMSPI0_Msk (0x3000UL)             /*!< CQOUTMSPI0 (Bitfield-Mask: 0x03)                      */
#define CM4MCUCTRL_CQFLAGSOUT_CQOUTIOM5_Pos (10UL)                  /*!< CQOUTIOM5 (Bit 10)                                    */
#define CM4MCUCTRL_CQFLAGSOUT_CQOUTIOM5_Msk (0xc00UL)               /*!< CQOUTIOM5 (Bitfield-Mask: 0x03)                       */
#define CM4MCUCTRL_CQFLAGSOUT_CQOUTIOM4_Pos (8UL)                   /*!< CQOUTIOM4 (Bit 8)                                     */
#define CM4MCUCTRL_CQFLAGSOUT_CQOUTIOM4_Msk (0x300UL)               /*!< CQOUTIOM4 (Bitfield-Mask: 0x03)                       */
#define CM4MCUCTRL_CQFLAGSOUT_CQOUTIOM3_Pos (6UL)                   /*!< CQOUTIOM3 (Bit 6)                                     */
#define CM4MCUCTRL_CQFLAGSOUT_CQOUTIOM3_Msk (0xc0UL)                /*!< CQOUTIOM3 (Bitfield-Mask: 0x03)                       */
#define CM4MCUCTRL_CQFLAGSOUT_CQOUTIOM2_Pos (4UL)                   /*!< CQOUTIOM2 (Bit 4)                                     */
#define CM4MCUCTRL_CQFLAGSOUT_CQOUTIOM2_Msk (0x30UL)                /*!< CQOUTIOM2 (Bitfield-Mask: 0x03)                       */
#define CM4MCUCTRL_CQFLAGSOUT_CQOUTIOM1_Pos (2UL)                   /*!< CQOUTIOM1 (Bit 2)                                     */
#define CM4MCUCTRL_CQFLAGSOUT_CQOUTIOM1_Msk (0xcUL)                 /*!< CQOUTIOM1 (Bitfield-Mask: 0x03)                       */
#define CM4MCUCTRL_CQFLAGSOUT_CQOUTIOM0_Pos (0UL)                   /*!< CQOUTIOM0 (Bit 0)                                     */
#define CM4MCUCTRL_CQFLAGSOUT_CQOUTIOM0_Msk (0x3UL)                 /*!< CQOUTIOM0 (Bitfield-Mask: 0x03)                       */
/* =======================================================  CQFLAGSIN  ======================================================= */
#define CM4MCUCTRL_CQFLAGSIN_CQINMSPI2_Pos (16UL)                   /*!< CQINMSPI2 (Bit 16)                                    */
#define CM4MCUCTRL_CQFLAGSIN_CQINMSPI2_Msk (0x30000UL)              /*!< CQINMSPI2 (Bitfield-Mask: 0x03)                       */
#define CM4MCUCTRL_CQFLAGSIN_CQINMSPI1_Pos (14UL)                   /*!< CQINMSPI1 (Bit 14)                                    */
#define CM4MCUCTRL_CQFLAGSIN_CQINMSPI1_Msk (0xc000UL)               /*!< CQINMSPI1 (Bitfield-Mask: 0x03)                       */
#define CM4MCUCTRL_CQFLAGSIN_CQINMSPI0_Pos (12UL)                   /*!< CQINMSPI0 (Bit 12)                                    */
#define CM4MCUCTRL_CQFLAGSIN_CQINMSPI0_Msk (0x3000UL)               /*!< CQINMSPI0 (Bitfield-Mask: 0x03)                       */
#define CM4MCUCTRL_CQFLAGSIN_CQINIOM5_Pos (10UL)                    /*!< CQINIOM5 (Bit 10)                                     */
#define CM4MCUCTRL_CQFLAGSIN_CQINIOM5_Msk (0xc00UL)                 /*!< CQINIOM5 (Bitfield-Mask: 0x03)                        */
#define CM4MCUCTRL_CQFLAGSIN_CQINIOM4_Pos (8UL)                     /*!< CQINIOM4 (Bit 8)                                      */
#define CM4MCUCTRL_CQFLAGSIN_CQINIOM4_Msk (0x300UL)                 /*!< CQINIOM4 (Bitfield-Mask: 0x03)                        */
#define CM4MCUCTRL_CQFLAGSIN_CQINIOM3_Pos (6UL)                     /*!< CQINIOM3 (Bit 6)                                      */
#define CM4MCUCTRL_CQFLAGSIN_CQINIOM3_Msk (0xc0UL)                  /*!< CQINIOM3 (Bitfield-Mask: 0x03)                        */
#define CM4MCUCTRL_CQFLAGSIN_CQINIOM2_Pos (4UL)                     /*!< CQINIOM2 (Bit 4)                                      */
#define CM4MCUCTRL_CQFLAGSIN_CQINIOM2_Msk (0x30UL)                  /*!< CQINIOM2 (Bitfield-Mask: 0x03)                        */
#define CM4MCUCTRL_CQFLAGSIN_CQINIOM1_Pos (2UL)                     /*!< CQINIOM1 (Bit 2)                                      */
#define CM4MCUCTRL_CQFLAGSIN_CQINIOM1_Msk (0xcUL)                   /*!< CQINIOM1 (Bitfield-Mask: 0x03)                        */
#define CM4MCUCTRL_CQFLAGSIN_CQINIOM0_Pos (0UL)                     /*!< CQINIOM0 (Bit 0)                                      */
#define CM4MCUCTRL_CQFLAGSIN_CQINIOM0_Msk (0x3UL)                   /*!< CQINIOM0 (Bitfield-Mask: 0x03)                        */
/* =======================================================  TCMWPROT  ======================================================== */
#define CM4MCUCTRL_TCMWPROT_TCMWPROT7_Pos (7UL)                     /*!< TCMWPROT7 (Bit 7)                                     */
#define CM4MCUCTRL_TCMWPROT_TCMWPROT7_Msk (0x80UL)                  /*!< TCMWPROT7 (Bitfield-Mask: 0x01)                       */
#define CM4MCUCTRL_TCMWPROT_TCMWPROT6_Pos (6UL)                     /*!< TCMWPROT6 (Bit 6)                                     */
#define CM4MCUCTRL_TCMWPROT_TCMWPROT6_Msk (0x40UL)                  /*!< TCMWPROT6 (Bitfield-Mask: 0x01)                       */
#define CM4MCUCTRL_TCMWPROT_TCMWPROT5_Pos (5UL)                     /*!< TCMWPROT5 (Bit 5)                                     */
#define CM4MCUCTRL_TCMWPROT_TCMWPROT5_Msk (0x20UL)                  /*!< TCMWPROT5 (Bitfield-Mask: 0x01)                       */
#define CM4MCUCTRL_TCMWPROT_TCMWPROT4_Pos (4UL)                     /*!< TCMWPROT4 (Bit 4)                                     */
#define CM4MCUCTRL_TCMWPROT_TCMWPROT4_Msk (0x10UL)                  /*!< TCMWPROT4 (Bitfield-Mask: 0x01)                       */
#define CM4MCUCTRL_TCMWPROT_TCMWPROT3_Pos (3UL)                     /*!< TCMWPROT3 (Bit 3)                                     */
#define CM4MCUCTRL_TCMWPROT_TCMWPROT3_Msk (0x8UL)                   /*!< TCMWPROT3 (Bitfield-Mask: 0x01)                       */
#define CM4MCUCTRL_TCMWPROT_TCMWPROT2_Pos (2UL)                     /*!< TCMWPROT2 (Bit 2)                                     */
#define CM4MCUCTRL_TCMWPROT_TCMWPROT2_Msk (0x4UL)                   /*!< TCMWPROT2 (Bitfield-Mask: 0x01)                       */
#define CM4MCUCTRL_TCMWPROT_TCMWPROT1_Pos (1UL)                     /*!< TCMWPROT1 (Bit 1)                                     */
#define CM4MCUCTRL_TCMWPROT_TCMWPROT1_Msk (0x2UL)                   /*!< TCMWPROT1 (Bitfield-Mask: 0x01)                       */
#define CM4MCUCTRL_TCMWPROT_TCMWPROT0_Pos (0UL)                     /*!< TCMWPROT0 (Bit 0)                                     */
#define CM4MCUCTRL_TCMWPROT_TCMWPROT0_Msk (0x1UL)                   /*!< TCMWPROT0 (Bitfield-Mask: 0x01)                       */
/* =======================================================  TCMRPROT  ======================================================== */
#define CM4MCUCTRL_TCMRPROT_TCMRPROT7_Pos (7UL)                     /*!< TCMRPROT7 (Bit 7)                                     */
#define CM4MCUCTRL_TCMRPROT_TCMRPROT7_Msk (0x80UL)                  /*!< TCMRPROT7 (Bitfield-Mask: 0x01)                       */
#define CM4MCUCTRL_TCMRPROT_TCMRPROT6_Pos (6UL)                     /*!< TCMRPROT6 (Bit 6)                                     */
#define CM4MCUCTRL_TCMRPROT_TCMRPROT6_Msk (0x40UL)                  /*!< TCMRPROT6 (Bitfield-Mask: 0x01)                       */
#define CM4MCUCTRL_TCMRPROT_TCMRPROT5_Pos (5UL)                     /*!< TCMRPROT5 (Bit 5)                                     */
#define CM4MCUCTRL_TCMRPROT_TCMRPROT5_Msk (0x20UL)                  /*!< TCMRPROT5 (Bitfield-Mask: 0x01)                       */
#define CM4MCUCTRL_TCMRPROT_TCMRPROT4_Pos (4UL)                     /*!< TCMRPROT4 (Bit 4)                                     */
#define CM4MCUCTRL_TCMRPROT_TCMRPROT4_Msk (0x10UL)                  /*!< TCMRPROT4 (Bitfield-Mask: 0x01)                       */
#define CM4MCUCTRL_TCMRPROT_TCMRPROT3_Pos (3UL)                     /*!< TCMRPROT3 (Bit 3)                                     */
#define CM4MCUCTRL_TCMRPROT_TCMRPROT3_Msk (0x8UL)                   /*!< TCMRPROT3 (Bitfield-Mask: 0x01)                       */
#define CM4MCUCTRL_TCMRPROT_TCMRPROT2_Pos (2UL)                     /*!< TCMRPROT2 (Bit 2)                                     */
#define CM4MCUCTRL_TCMRPROT_TCMRPROT2_Msk (0x4UL)                   /*!< TCMRPROT2 (Bitfield-Mask: 0x01)                       */
#define CM4MCUCTRL_TCMRPROT_TCMRPROT1_Pos (1UL)                     /*!< TCMRPROT1 (Bit 1)                                     */
#define CM4MCUCTRL_TCMRPROT_TCMRPROT1_Msk (0x2UL)                   /*!< TCMRPROT1 (Bitfield-Mask: 0x01)                       */
#define CM4MCUCTRL_TCMRPROT_TCMRPROT0_Pos (0UL)                     /*!< TCMRPROT0 (Bit 0)                                     */
#define CM4MCUCTRL_TCMRPROT_TCMRPROT0_Msk (0x1UL)                   /*!< TCMRPROT0 (Bitfield-Mask: 0x01)                       */
/* ======================================================  CPUPWRCTRL  ======================================================= */
#define CM4MCUCTRL_CPUPWRCTRL_CM4NVMEN_Pos (6UL)                    /*!< CM4NVMEN (Bit 6)                                      */
#define CM4MCUCTRL_CPUPWRCTRL_CM4NVMEN_Msk (0x40UL)                 /*!< CM4NVMEN (Bitfield-Mask: 0x01)                        */
#define CM4MCUCTRL_CPUPWRCTRL_PMUEN_Pos   (5UL)                     /*!< PMUEN (Bit 5)                                         */
#define CM4MCUCTRL_CPUPWRCTRL_PMUEN_Msk   (0x20UL)                  /*!< PMUEN (Bitfield-Mask: 0x01)                           */
#define CM4MCUCTRL_CPUPWRCTRL_CPUCLKOVEREN_Pos (4UL)                /*!< CPUCLKOVEREN (Bit 4)                                  */
#define CM4MCUCTRL_CPUPWRCTRL_CPUCLKOVEREN_Msk (0x10UL)             /*!< CPUCLKOVEREN (Bitfield-Mask: 0x01)                    */
#define CM4MCUCTRL_CPUPWRCTRL_FCLKSTATE_Pos (3UL)                   /*!< FCLKSTATE (Bit 3)                                     */
#define CM4MCUCTRL_CPUPWRCTRL_FCLKSTATE_Msk (0x8UL)                 /*!< FCLKSTATE (Bitfield-Mask: 0x01)                       */
#define CM4MCUCTRL_CPUPWRCTRL_PMUCLKSTATE_Pos (2UL)                 /*!< PMUCLKSTATE (Bit 2)                                   */
#define CM4MCUCTRL_CPUPWRCTRL_PMUCLKSTATE_Msk (0x4UL)               /*!< PMUCLKSTATE (Bitfield-Mask: 0x01)                     */
#define CM4MCUCTRL_CPUPWRCTRL_SLEEPMODE_Pos (1UL)                   /*!< SLEEPMODE (Bit 1)                                     */
#define CM4MCUCTRL_CPUPWRCTRL_SLEEPMODE_Msk (0x2UL)                 /*!< SLEEPMODE (Bitfield-Mask: 0x01)                       */
#define CM4MCUCTRL_CPUPWRCTRL_DEBUGPWREN_Pos (0UL)                  /*!< DEBUGPWREN (Bit 0)                                    */
#define CM4MCUCTRL_CPUPWRCTRL_DEBUGPWREN_Msk (0x1UL)                /*!< DEBUGPWREN (Bitfield-Mask: 0x01)                      */
/* ======================================================  COREPWROFF  ======================================================= */
#define CM4MCUCTRL_COREPWROFF_CPUPWROFF_Pos (0UL)                   /*!< CPUPWROFF (Bit 0)                                     */
#define CM4MCUCTRL_COREPWROFF_CPUPWROFF_Msk (0x1UL)                 /*!< CPUPWROFF (Bitfield-Mask: 0x01)                       */
/* ======================================================  CM4TIMING0  ======================================================= */
#define CM4MCUCTRL_CM4TIMING0_VALUE0_Pos  (0UL)                     /*!< VALUE0 (Bit 0)                                        */
#define CM4MCUCTRL_CM4TIMING0_VALUE0_Msk  (0x1UL)                   /*!< VALUE0 (Bitfield-Mask: 0x01)                          */
/* ======================================================  CM4TIMING1  ======================================================= */
#define CM4MCUCTRL_CM4TIMING1_VALUE1_Pos  (0UL)                     /*!< VALUE1 (Bit 0)                                        */
#define CM4MCUCTRL_CM4TIMING1_VALUE1_Msk  (0x1UL)                   /*!< VALUE1 (Bitfield-Mask: 0x01)                          */
/* ======================================================  CM4TIMING2  ======================================================= */
#define CM4MCUCTRL_CM4TIMING2_VALUE2_Pos  (0UL)                     /*!< VALUE2 (Bit 0)                                        */
#define CM4MCUCTRL_CM4TIMING2_VALUE2_Msk  (0x1UL)                   /*!< VALUE2 (Bitfield-Mask: 0x01)                          */
/* ======================================================  CM4TIMING3  ======================================================= */
#define CM4MCUCTRL_CM4TIMING3_VALUE3_Pos  (0UL)                     /*!< VALUE3 (Bit 0)                                        */
#define CM4MCUCTRL_CM4TIMING3_VALUE3_Msk  (0x1UL)                   /*!< VALUE3 (Bitfield-Mask: 0x01)                          */
/* ======================================================  CM4TIMING4  ======================================================= */
#define CM4MCUCTRL_CM4TIMING4_VALUE4_Pos  (0UL)                     /*!< VALUE4 (Bit 0)                                        */
#define CM4MCUCTRL_CM4TIMING4_VALUE4_Msk  (0x1UL)                   /*!< VALUE4 (Bitfield-Mask: 0x01)                          */
/* ======================================================  CM4TIMING5  ======================================================= */
#define CM4MCUCTRL_CM4TIMING5_VALUE5_Pos  (0UL)                     /*!< VALUE5 (Bit 0)                                        */
#define CM4MCUCTRL_CM4TIMING5_VALUE5_Msk  (0x1UL)                   /*!< VALUE5 (Bitfield-Mask: 0x01)                          */
/* ======================================================  CM4TIMING6  ======================================================= */
#define CM4MCUCTRL_CM4TIMING6_VALUE6_Pos  (0UL)                     /*!< VALUE6 (Bit 0)                                        */
#define CM4MCUCTRL_CM4TIMING6_VALUE6_Msk  (0x1UL)                   /*!< VALUE6 (Bitfield-Mask: 0x01)                          */
/* ======================================================  CM4TIMING7  ======================================================= */
#define CM4MCUCTRL_CM4TIMING7_VALUE7_Pos  (0UL)                     /*!< VALUE7 (Bit 0)                                        */
#define CM4MCUCTRL_CM4TIMING7_VALUE7_Msk  (0x1UL)                   /*!< VALUE7 (Bitfield-Mask: 0x01)                          */
/* ====================================================  CM4TIMINGENABLE  ==================================================== */
#define CM4MCUCTRL_CM4TIMINGENABLE_ENABLE7_Pos (7UL)                /*!< ENABLE7 (Bit 7)                                       */
#define CM4MCUCTRL_CM4TIMINGENABLE_ENABLE7_Msk (0x80UL)             /*!< ENABLE7 (Bitfield-Mask: 0x01)                         */
#define CM4MCUCTRL_CM4TIMINGENABLE_ENABLE6_Pos (6UL)                /*!< ENABLE6 (Bit 6)                                       */
#define CM4MCUCTRL_CM4TIMINGENABLE_ENABLE6_Msk (0x40UL)             /*!< ENABLE6 (Bitfield-Mask: 0x01)                         */
#define CM4MCUCTRL_CM4TIMINGENABLE_ENABLE5_Pos (5UL)                /*!< ENABLE5 (Bit 5)                                       */
#define CM4MCUCTRL_CM4TIMINGENABLE_ENABLE5_Msk (0x20UL)             /*!< ENABLE5 (Bitfield-Mask: 0x01)                         */
#define CM4MCUCTRL_CM4TIMINGENABLE_ENABLE4_Pos (4UL)                /*!< ENABLE4 (Bit 4)                                       */
#define CM4MCUCTRL_CM4TIMINGENABLE_ENABLE4_Msk (0x10UL)             /*!< ENABLE4 (Bitfield-Mask: 0x01)                         */
#define CM4MCUCTRL_CM4TIMINGENABLE_ENABLE3_Pos (3UL)                /*!< ENABLE3 (Bit 3)                                       */
#define CM4MCUCTRL_CM4TIMINGENABLE_ENABLE3_Msk (0x8UL)              /*!< ENABLE3 (Bitfield-Mask: 0x01)                         */
#define CM4MCUCTRL_CM4TIMINGENABLE_ENABLE2_Pos (2UL)                /*!< ENABLE2 (Bit 2)                                       */
#define CM4MCUCTRL_CM4TIMINGENABLE_ENABLE2_Msk (0x4UL)              /*!< ENABLE2 (Bitfield-Mask: 0x01)                         */
#define CM4MCUCTRL_CM4TIMINGENABLE_ENABLE1_Pos (1UL)                /*!< ENABLE1 (Bit 1)                                       */
#define CM4MCUCTRL_CM4TIMINGENABLE_ENABLE1_Msk (0x2UL)              /*!< ENABLE1 (Bitfield-Mask: 0x01)                         */
#define CM4MCUCTRL_CM4TIMINGENABLE_ENABLE0_Pos (0UL)                /*!< ENABLE0 (Bit 0)                                       */
#define CM4MCUCTRL_CM4TIMINGENABLE_ENABLE0_Msk (0x1UL)              /*!< ENABLE0 (Bitfield-Mask: 0x01)                         */
/* =========================================================  INTEN  ========================================================= */
#define CM4MCUCTRL_INTEN_INT14_Pos        (14UL)                    /*!< INT14 (Bit 14)                                        */
#define CM4MCUCTRL_INTEN_INT14_Msk        (0x4000UL)                /*!< INT14 (Bitfield-Mask: 0x01)                           */
#define CM4MCUCTRL_INTEN_INT13_Pos        (13UL)                    /*!< INT13 (Bit 13)                                        */
#define CM4MCUCTRL_INTEN_INT13_Msk        (0x2000UL)                /*!< INT13 (Bitfield-Mask: 0x01)                           */
#define CM4MCUCTRL_INTEN_INT12_Pos        (12UL)                    /*!< INT12 (Bit 12)                                        */
#define CM4MCUCTRL_INTEN_INT12_Msk        (0x1000UL)                /*!< INT12 (Bitfield-Mask: 0x01)                           */
#define CM4MCUCTRL_INTEN_INT11_Pos        (11UL)                    /*!< INT11 (Bit 11)                                        */
#define CM4MCUCTRL_INTEN_INT11_Msk        (0x800UL)                 /*!< INT11 (Bitfield-Mask: 0x01)                           */
#define CM4MCUCTRL_INTEN_INT10_Pos        (10UL)                    /*!< INT10 (Bit 10)                                        */
#define CM4MCUCTRL_INTEN_INT10_Msk        (0x400UL)                 /*!< INT10 (Bitfield-Mask: 0x01)                           */
#define CM4MCUCTRL_INTEN_INT9_Pos         (9UL)                     /*!< INT9 (Bit 9)                                          */
#define CM4MCUCTRL_INTEN_INT9_Msk         (0x200UL)                 /*!< INT9 (Bitfield-Mask: 0x01)                            */
#define CM4MCUCTRL_INTEN_INT8_Pos         (8UL)                     /*!< INT8 (Bit 8)                                          */
#define CM4MCUCTRL_INTEN_INT8_Msk         (0x100UL)                 /*!< INT8 (Bitfield-Mask: 0x01)                            */
#define CM4MCUCTRL_INTEN_INT7_Pos         (7UL)                     /*!< INT7 (Bit 7)                                          */
#define CM4MCUCTRL_INTEN_INT7_Msk         (0x80UL)                  /*!< INT7 (Bitfield-Mask: 0x01)                            */
#define CM4MCUCTRL_INTEN_INT6_Pos         (6UL)                     /*!< INT6 (Bit 6)                                          */
#define CM4MCUCTRL_INTEN_INT6_Msk         (0x40UL)                  /*!< INT6 (Bitfield-Mask: 0x01)                            */
#define CM4MCUCTRL_INTEN_INT5_Pos         (5UL)                     /*!< INT5 (Bit 5)                                          */
#define CM4MCUCTRL_INTEN_INT5_Msk         (0x20UL)                  /*!< INT5 (Bitfield-Mask: 0x01)                            */
#define CM4MCUCTRL_INTEN_INT4_Pos         (4UL)                     /*!< INT4 (Bit 4)                                          */
#define CM4MCUCTRL_INTEN_INT4_Msk         (0x10UL)                  /*!< INT4 (Bitfield-Mask: 0x01)                            */
#define CM4MCUCTRL_INTEN_INT3_Pos         (3UL)                     /*!< INT3 (Bit 3)                                          */
#define CM4MCUCTRL_INTEN_INT3_Msk         (0x8UL)                   /*!< INT3 (Bitfield-Mask: 0x01)                            */
#define CM4MCUCTRL_INTEN_INT2_Pos         (2UL)                     /*!< INT2 (Bit 2)                                          */
#define CM4MCUCTRL_INTEN_INT2_Msk         (0x4UL)                   /*!< INT2 (Bitfield-Mask: 0x01)                            */
#define CM4MCUCTRL_INTEN_INT1_Pos         (1UL)                     /*!< INT1 (Bit 1)                                          */
#define CM4MCUCTRL_INTEN_INT1_Msk         (0x2UL)                   /*!< INT1 (Bitfield-Mask: 0x01)                            */
#define CM4MCUCTRL_INTEN_INT0_Pos         (0UL)                     /*!< INT0 (Bit 0)                                          */
#define CM4MCUCTRL_INTEN_INT0_Msk         (0x1UL)                   /*!< INT0 (Bitfield-Mask: 0x01)                            */
/* ========================================================  INTSTAT  ======================================================== */
#define CM4MCUCTRL_INTSTAT_INT14_Pos      (14UL)                    /*!< INT14 (Bit 14)                                        */
#define CM4MCUCTRL_INTSTAT_INT14_Msk      (0x4000UL)                /*!< INT14 (Bitfield-Mask: 0x01)                           */
#define CM4MCUCTRL_INTSTAT_INT13_Pos      (13UL)                    /*!< INT13 (Bit 13)                                        */
#define CM4MCUCTRL_INTSTAT_INT13_Msk      (0x2000UL)                /*!< INT13 (Bitfield-Mask: 0x01)                           */
#define CM4MCUCTRL_INTSTAT_INT12_Pos      (12UL)                    /*!< INT12 (Bit 12)                                        */
#define CM4MCUCTRL_INTSTAT_INT12_Msk      (0x1000UL)                /*!< INT12 (Bitfield-Mask: 0x01)                           */
#define CM4MCUCTRL_INTSTAT_INT11_Pos      (11UL)                    /*!< INT11 (Bit 11)                                        */
#define CM4MCUCTRL_INTSTAT_INT11_Msk      (0x800UL)                 /*!< INT11 (Bitfield-Mask: 0x01)                           */
#define CM4MCUCTRL_INTSTAT_INT10_Pos      (10UL)                    /*!< INT10 (Bit 10)                                        */
#define CM4MCUCTRL_INTSTAT_INT10_Msk      (0x400UL)                 /*!< INT10 (Bitfield-Mask: 0x01)                           */
#define CM4MCUCTRL_INTSTAT_INT9_Pos       (9UL)                     /*!< INT9 (Bit 9)                                          */
#define CM4MCUCTRL_INTSTAT_INT9_Msk       (0x200UL)                 /*!< INT9 (Bitfield-Mask: 0x01)                            */
#define CM4MCUCTRL_INTSTAT_INT8_Pos       (8UL)                     /*!< INT8 (Bit 8)                                          */
#define CM4MCUCTRL_INTSTAT_INT8_Msk       (0x100UL)                 /*!< INT8 (Bitfield-Mask: 0x01)                            */
#define CM4MCUCTRL_INTSTAT_INT7_Pos       (7UL)                     /*!< INT7 (Bit 7)                                          */
#define CM4MCUCTRL_INTSTAT_INT7_Msk       (0x80UL)                  /*!< INT7 (Bitfield-Mask: 0x01)                            */
#define CM4MCUCTRL_INTSTAT_INT6_Pos       (6UL)                     /*!< INT6 (Bit 6)                                          */
#define CM4MCUCTRL_INTSTAT_INT6_Msk       (0x40UL)                  /*!< INT6 (Bitfield-Mask: 0x01)                            */
#define CM4MCUCTRL_INTSTAT_INT5_Pos       (5UL)                     /*!< INT5 (Bit 5)                                          */
#define CM4MCUCTRL_INTSTAT_INT5_Msk       (0x20UL)                  /*!< INT5 (Bitfield-Mask: 0x01)                            */
#define CM4MCUCTRL_INTSTAT_INT4_Pos       (4UL)                     /*!< INT4 (Bit 4)                                          */
#define CM4MCUCTRL_INTSTAT_INT4_Msk       (0x10UL)                  /*!< INT4 (Bitfield-Mask: 0x01)                            */
#define CM4MCUCTRL_INTSTAT_INT3_Pos       (3UL)                     /*!< INT3 (Bit 3)                                          */
#define CM4MCUCTRL_INTSTAT_INT3_Msk       (0x8UL)                   /*!< INT3 (Bitfield-Mask: 0x01)                            */
#define CM4MCUCTRL_INTSTAT_INT2_Pos       (2UL)                     /*!< INT2 (Bit 2)                                          */
#define CM4MCUCTRL_INTSTAT_INT2_Msk       (0x4UL)                   /*!< INT2 (Bitfield-Mask: 0x01)                            */
#define CM4MCUCTRL_INTSTAT_INT1_Pos       (1UL)                     /*!< INT1 (Bit 1)                                          */
#define CM4MCUCTRL_INTSTAT_INT1_Msk       (0x2UL)                   /*!< INT1 (Bitfield-Mask: 0x01)                            */
#define CM4MCUCTRL_INTSTAT_INT0_Pos       (0UL)                     /*!< INT0 (Bit 0)                                          */
#define CM4MCUCTRL_INTSTAT_INT0_Msk       (0x1UL)                   /*!< INT0 (Bitfield-Mask: 0x01)                            */
/* ========================================================  INTCLR  ========================================================= */
#define CM4MCUCTRL_INTCLR_INT14_Pos       (14UL)                    /*!< INT14 (Bit 14)                                        */
#define CM4MCUCTRL_INTCLR_INT14_Msk       (0x4000UL)                /*!< INT14 (Bitfield-Mask: 0x01)                           */
#define CM4MCUCTRL_INTCLR_INT13_Pos       (13UL)                    /*!< INT13 (Bit 13)                                        */
#define CM4MCUCTRL_INTCLR_INT13_Msk       (0x2000UL)                /*!< INT13 (Bitfield-Mask: 0x01)                           */
#define CM4MCUCTRL_INTCLR_INT12_Pos       (12UL)                    /*!< INT12 (Bit 12)                                        */
#define CM4MCUCTRL_INTCLR_INT12_Msk       (0x1000UL)                /*!< INT12 (Bitfield-Mask: 0x01)                           */
#define CM4MCUCTRL_INTCLR_INT11_Pos       (11UL)                    /*!< INT11 (Bit 11)                                        */
#define CM4MCUCTRL_INTCLR_INT11_Msk       (0x800UL)                 /*!< INT11 (Bitfield-Mask: 0x01)                           */
#define CM4MCUCTRL_INTCLR_INT10_Pos       (10UL)                    /*!< INT10 (Bit 10)                                        */
#define CM4MCUCTRL_INTCLR_INT10_Msk       (0x400UL)                 /*!< INT10 (Bitfield-Mask: 0x01)                           */
#define CM4MCUCTRL_INTCLR_INT9_Pos        (9UL)                     /*!< INT9 (Bit 9)                                          */
#define CM4MCUCTRL_INTCLR_INT9_Msk        (0x200UL)                 /*!< INT9 (Bitfield-Mask: 0x01)                            */
#define CM4MCUCTRL_INTCLR_INT8_Pos        (8UL)                     /*!< INT8 (Bit 8)                                          */
#define CM4MCUCTRL_INTCLR_INT8_Msk        (0x100UL)                 /*!< INT8 (Bitfield-Mask: 0x01)                            */
#define CM4MCUCTRL_INTCLR_INT7_Pos        (7UL)                     /*!< INT7 (Bit 7)                                          */
#define CM4MCUCTRL_INTCLR_INT7_Msk        (0x80UL)                  /*!< INT7 (Bitfield-Mask: 0x01)                            */
#define CM4MCUCTRL_INTCLR_INT6_Pos        (6UL)                     /*!< INT6 (Bit 6)                                          */
#define CM4MCUCTRL_INTCLR_INT6_Msk        (0x40UL)                  /*!< INT6 (Bitfield-Mask: 0x01)                            */
#define CM4MCUCTRL_INTCLR_INT5_Pos        (5UL)                     /*!< INT5 (Bit 5)                                          */
#define CM4MCUCTRL_INTCLR_INT5_Msk        (0x20UL)                  /*!< INT5 (Bitfield-Mask: 0x01)                            */
#define CM4MCUCTRL_INTCLR_INT4_Pos        (4UL)                     /*!< INT4 (Bit 4)                                          */
#define CM4MCUCTRL_INTCLR_INT4_Msk        (0x10UL)                  /*!< INT4 (Bitfield-Mask: 0x01)                            */
#define CM4MCUCTRL_INTCLR_INT3_Pos        (3UL)                     /*!< INT3 (Bit 3)                                          */
#define CM4MCUCTRL_INTCLR_INT3_Msk        (0x8UL)                   /*!< INT3 (Bitfield-Mask: 0x01)                            */
#define CM4MCUCTRL_INTCLR_INT2_Pos        (2UL)                     /*!< INT2 (Bit 2)                                          */
#define CM4MCUCTRL_INTCLR_INT2_Msk        (0x4UL)                   /*!< INT2 (Bitfield-Mask: 0x01)                            */
#define CM4MCUCTRL_INTCLR_INT1_Pos        (1UL)                     /*!< INT1 (Bit 1)                                          */
#define CM4MCUCTRL_INTCLR_INT1_Msk        (0x2UL)                   /*!< INT1 (Bitfield-Mask: 0x01)                            */
#define CM4MCUCTRL_INTCLR_INT0_Pos        (0UL)                     /*!< INT0 (Bit 0)                                          */
#define CM4MCUCTRL_INTCLR_INT0_Msk        (0x1UL)                   /*!< INT0 (Bitfield-Mask: 0x01)                            */
/* ========================================================  INTSET  ========================================================= */
#define CM4MCUCTRL_INTSET_INT14_Pos       (14UL)                    /*!< INT14 (Bit 14)                                        */
#define CM4MCUCTRL_INTSET_INT14_Msk       (0x4000UL)                /*!< INT14 (Bitfield-Mask: 0x01)                           */
#define CM4MCUCTRL_INTSET_INT13_Pos       (13UL)                    /*!< INT13 (Bit 13)                                        */
#define CM4MCUCTRL_INTSET_INT13_Msk       (0x2000UL)                /*!< INT13 (Bitfield-Mask: 0x01)                           */
#define CM4MCUCTRL_INTSET_INT12_Pos       (12UL)                    /*!< INT12 (Bit 12)                                        */
#define CM4MCUCTRL_INTSET_INT12_Msk       (0x1000UL)                /*!< INT12 (Bitfield-Mask: 0x01)                           */
#define CM4MCUCTRL_INTSET_INT11_Pos       (11UL)                    /*!< INT11 (Bit 11)                                        */
#define CM4MCUCTRL_INTSET_INT11_Msk       (0x800UL)                 /*!< INT11 (Bitfield-Mask: 0x01)                           */
#define CM4MCUCTRL_INTSET_INT10_Pos       (10UL)                    /*!< INT10 (Bit 10)                                        */
#define CM4MCUCTRL_INTSET_INT10_Msk       (0x400UL)                 /*!< INT10 (Bitfield-Mask: 0x01)                           */
#define CM4MCUCTRL_INTSET_INT9_Pos        (9UL)                     /*!< INT9 (Bit 9)                                          */
#define CM4MCUCTRL_INTSET_INT9_Msk        (0x200UL)                 /*!< INT9 (Bitfield-Mask: 0x01)                            */
#define CM4MCUCTRL_INTSET_INT8_Pos        (8UL)                     /*!< INT8 (Bit 8)                                          */
#define CM4MCUCTRL_INTSET_INT8_Msk        (0x100UL)                 /*!< INT8 (Bitfield-Mask: 0x01)                            */
#define CM4MCUCTRL_INTSET_INT7_Pos        (7UL)                     /*!< INT7 (Bit 7)                                          */
#define CM4MCUCTRL_INTSET_INT7_Msk        (0x80UL)                  /*!< INT7 (Bitfield-Mask: 0x01)                            */
#define CM4MCUCTRL_INTSET_INT6_Pos        (6UL)                     /*!< INT6 (Bit 6)                                          */
#define CM4MCUCTRL_INTSET_INT6_Msk        (0x40UL)                  /*!< INT6 (Bitfield-Mask: 0x01)                            */
#define CM4MCUCTRL_INTSET_INT5_Pos        (5UL)                     /*!< INT5 (Bit 5)                                          */
#define CM4MCUCTRL_INTSET_INT5_Msk        (0x20UL)                  /*!< INT5 (Bitfield-Mask: 0x01)                            */
#define CM4MCUCTRL_INTSET_INT4_Pos        (4UL)                     /*!< INT4 (Bit 4)                                          */
#define CM4MCUCTRL_INTSET_INT4_Msk        (0x10UL)                  /*!< INT4 (Bitfield-Mask: 0x01)                            */
#define CM4MCUCTRL_INTSET_INT3_Pos        (3UL)                     /*!< INT3 (Bit 3)                                          */
#define CM4MCUCTRL_INTSET_INT3_Msk        (0x8UL)                   /*!< INT3 (Bitfield-Mask: 0x01)                            */
#define CM4MCUCTRL_INTSET_INT2_Pos        (2UL)                     /*!< INT2 (Bit 2)                                          */
#define CM4MCUCTRL_INTSET_INT2_Msk        (0x4UL)                   /*!< INT2 (Bitfield-Mask: 0x01)                            */
#define CM4MCUCTRL_INTSET_INT1_Pos        (1UL)                     /*!< INT1 (Bit 1)                                          */
#define CM4MCUCTRL_INTSET_INT1_Msk        (0x2UL)                   /*!< INT1 (Bitfield-Mask: 0x01)                            */
#define CM4MCUCTRL_INTSET_INT0_Pos        (0UL)                     /*!< INT0 (Bit 0)                                          */
#define CM4MCUCTRL_INTSET_INT0_Msk        (0x1UL)                   /*!< INT0 (Bitfield-Mask: 0x01)                            */


/* =========================================================================================================================== */
/* ================                                         CM4RADIO                                          ================ */
/* =========================================================================================================================== */

/* ======================================================  RCLKCONTROL  ====================================================== */
#define CM4RADIO_RCLKCONTROL_TPIUCLKEN_Pos (6UL)                    /*!< TPIUCLKEN (Bit 6)                                     */
#define CM4RADIO_RCLKCONTROL_TPIUCLKEN_Msk (0x40UL)                 /*!< TPIUCLKEN (Bitfield-Mask: 0x01)                       */
#define CM4RADIO_RCLKCONTROL_TPIUCLKSEL_Pos (4UL)                   /*!< TPIUCLKSEL (Bit 4)                                    */
#define CM4RADIO_RCLKCONTROL_TPIUCLKSEL_Msk (0x30UL)                /*!< TPIUCLKSEL (Bitfield-Mask: 0x03)                      */
#define CM4RADIO_RCLKCONTROL_MCUCLKSEL_Pos (3UL)                    /*!< MCUCLKSEL (Bit 3)                                     */
#define CM4RADIO_RCLKCONTROL_MCUCLKSEL_Msk (0x8UL)                  /*!< MCUCLKSEL (Bitfield-Mask: 0x01)                       */
#define CM4RADIO_RCLKCONTROL_BBCLKOVERRIDE_Pos (2UL)                /*!< BBCLKOVERRIDE (Bit 2)                                 */
#define CM4RADIO_RCLKCONTROL_BBCLKOVERRIDE_Msk (0x4UL)              /*!< BBCLKOVERRIDE (Bitfield-Mask: 0x01)                   */
#define CM4RADIO_RCLKCONTROL_BBCLKSEL_Pos (0UL)                     /*!< BBCLKSEL (Bit 0)                                      */
#define CM4RADIO_RCLKCONTROL_BBCLKSEL_Msk (0x3UL)                   /*!< BBCLKSEL (Bitfield-Mask: 0x03)                        */
/* =======================================================  RCONTROL  ======================================================== */
#define CM4RADIO_RCONTROL_OSCEN_Pos       (26UL)                    /*!< OSCEN (Bit 26)                                        */
#define CM4RADIO_RCONTROL_OSCEN_Msk       (0x4000000UL)             /*!< OSCEN (Bitfield-Mask: 0x01)                           */
#define CM4RADIO_RCONTROL_XOCONFIG_Pos    (0UL)                     /*!< XOCONFIG (Bit 0)                                      */
#define CM4RADIO_RCONTROL_XOCONFIG_Msk    (0x3ffffffUL)             /*!< XOCONFIG (Bitfield-Mask: 0x3ffffff)                   */
/* =======================================================  BBCONTROL  ======================================================= */
#define CM4RADIO_BBCONTROL_WAKEUPREQ_Pos  (0UL)                     /*!< WAKEUPREQ (Bit 0)                                     */
#define CM4RADIO_BBCONTROL_WAKEUPREQ_Msk  (0x1UL)                   /*!< WAKEUPREQ (Bitfield-Mask: 0x01)                       */
/* =======================================================  NPCONTROL  ======================================================= */
#define CM4RADIO_NPCONTROL_RXENABLED_Pos  (3UL)                     /*!< RXENABLED (Bit 3)                                     */
#define CM4RADIO_NPCONTROL_RXENABLED_Msk  (0x8UL)                   /*!< RXENABLED (Bitfield-Mask: 0x01)                       */
#define CM4RADIO_NPCONTROL_TXENABLED_Pos  (2UL)                     /*!< TXENABLED (Bit 2)                                     */
#define CM4RADIO_NPCONTROL_TXENABLED_Msk  (0x4UL)                   /*!< TXENABLED (Bitfield-Mask: 0x01)                       */
#define CM4RADIO_NPCONTROL_NPWDREN_Pos    (1UL)                     /*!< NPWDREN (Bit 1)                                       */
#define CM4RADIO_NPCONTROL_NPWDREN_Msk    (0x2UL)                   /*!< NPWDREN (Bitfield-Mask: 0x01)                         */
#define CM4RADIO_NPCONTROL_NPSWRSTDBG_Pos (0UL)                     /*!< NPSWRSTDBG (Bit 0)                                    */
#define CM4RADIO_NPCONTROL_NPSWRSTDBG_Msk (0x1UL)                   /*!< NPSWRSTDBG (Bitfield-Mask: 0x01)                      */
/* =======================================================  RADIOSTAT  ======================================================= */
#define CM4RADIO_RADIOSTAT_NPSWPORSTAT_Pos (4UL)                    /*!< NPSWPORSTAT (Bit 4)                                   */
#define CM4RADIO_RADIOSTAT_NPSWPORSTAT_Msk (0x10UL)                 /*!< NPSWPORSTAT (Bitfield-Mask: 0x01)                     */
#define CM4RADIO_RADIOSTAT_NPWDRSTAT_Pos  (3UL)                     /*!< NPWDRSTAT (Bit 3)                                     */
#define CM4RADIO_RADIOSTAT_NPWDRSTAT_Msk  (0x8UL)                   /*!< NPWDRSTAT (Bitfield-Mask: 0x01)                       */
#define CM4RADIO_RADIOSTAT_NPDBGRSTAT_Pos (2UL)                     /*!< NPDBGRSTAT (Bit 2)                                    */
#define CM4RADIO_RADIOSTAT_NPDBGRSTAT_Msk (0x4UL)                   /*!< NPDBGRSTAT (Bitfield-Mask: 0x01)                      */
#define CM4RADIO_RADIOSTAT_NPAIRCRSTAT_Pos (1UL)                    /*!< NPAIRCRSTAT (Bit 1)                                   */
#define CM4RADIO_RADIOSTAT_NPAIRCRSTAT_Msk (0x2UL)                  /*!< NPAIRCRSTAT (Bitfield-Mask: 0x01)                     */
#define CM4RADIO_RADIOSTAT_NPCLRSTAT_Pos  (0UL)                     /*!< NPCLRSTAT (Bit 0)                                     */
#define CM4RADIO_RADIOSTAT_NPCLRSTAT_Msk  (0x1UL)                   /*!< NPCLRSTAT (Bitfield-Mask: 0x01)                       */
/* ========================================================  NPSWPOR  ======================================================== */
#define CM4RADIO_NPSWPOR_NPSWPORKEY_Pos   (0UL)                     /*!< NPSWPORKEY (Bit 0)                                    */
#define CM4RADIO_NPSWPOR_NPSWPORKEY_Msk   (0xffUL)                  /*!< NPSWPORKEY (Bitfield-Mask: 0xff)                      */
/* =========================================================  RTUNE  ========================================================= */
#define CM4RADIO_RTUNE_REFELDOMISC_Pos    (17UL)                    /*!< REFELDOMISC (Bit 17)                                  */
#define CM4RADIO_RTUNE_REFELDOMISC_Msk    (0xe0000UL)               /*!< REFELDOMISC (Bitfield-Mask: 0x07)                     */
#define CM4RADIO_RTUNE_REFELDOVREF_Pos    (10UL)                    /*!< REFELDOVREF (Bit 10)                                  */
#define CM4RADIO_RTUNE_REFELDOVREF_Msk    (0x1fc00UL)               /*!< REFELDOVREF (Bitfield-Mask: 0x7f)                     */
#define CM4RADIO_RTUNE_DIGLDOCTRL_Pos     (7UL)                     /*!< DIGLDOCTRL (Bit 7)                                    */
#define CM4RADIO_RTUNE_DIGLDOCTRL_Msk     (0x380UL)                 /*!< DIGLDOCTRL (Bitfield-Mask: 0x07)                      */
#define CM4RADIO_RTUNE_DIGLDOVREF_Pos     (0UL)                     /*!< DIGLDOVREF (Bit 0)                                    */
#define CM4RADIO_RTUNE_DIGLDOVREF_Msk     (0x7fUL)                  /*!< DIGLDOVREF (Bitfield-Mask: 0x7f)                      */
/* ========================================================  DBGCTRL  ======================================================== */
#define CM4RADIO_DBGCTRL_OBSEN_Pos        (4UL)                     /*!< OBSEN (Bit 4)                                         */
#define CM4RADIO_DBGCTRL_OBSEN_Msk        (0x10UL)                  /*!< OBSEN (Bitfield-Mask: 0x01)                           */
#define CM4RADIO_DBGCTRL_OBSSEL_Pos       (0UL)                     /*!< OBSSEL (Bit 0)                                        */
#define CM4RADIO_DBGCTRL_OBSSEL_Msk       (0xfUL)                   /*!< OBSSEL (Bitfield-Mask: 0x0f)                          */
/* =====================================================  WLANCOEXCTRL  ====================================================== */
#define CM4RADIO_WLANCOEXCTRL_CHANRANGETOP_Pos (24UL)               /*!< CHANRANGETOP (Bit 24)                                 */
#define CM4RADIO_WLANCOEXCTRL_CHANRANGETOP_Msk (0xff000000UL)       /*!< CHANRANGETOP (Bitfield-Mask: 0xff)                    */
#define CM4RADIO_WLANCOEXCTRL_CHANRANGEBOTTOM_Pos (16UL)            /*!< CHANRANGEBOTTOM (Bit 16)                              */
#define CM4RADIO_WLANCOEXCTRL_CHANRANGEBOTTOM_Msk (0xff0000UL)      /*!< CHANRANGEBOTTOM (Bitfield-Mask: 0xff)                 */
#define CM4RADIO_WLANCOEXCTRL_GRANTINV_Pos (4UL)                    /*!< GRANTINV (Bit 4)                                      */
#define CM4RADIO_WLANCOEXCTRL_GRANTINV_Msk (0x10UL)                 /*!< GRANTINV (Bitfield-Mask: 0x01)                        */
#define CM4RADIO_WLANCOEXCTRL_REQINV_Pos  (3UL)                     /*!< REQINV (Bit 3)                                        */
#define CM4RADIO_WLANCOEXCTRL_REQINV_Msk  (0x8UL)                   /*!< REQINV (Bitfield-Mask: 0x01)                          */
#define CM4RADIO_WLANCOEXCTRL_PRIORITYINV_Pos (2UL)                 /*!< PRIORITYINV (Bit 2)                                   */
#define CM4RADIO_WLANCOEXCTRL_PRIORITYINV_Msk (0x4UL)               /*!< PRIORITYINV (Bitfield-Mask: 0x01)                     */
#define CM4RADIO_WLANCOEXCTRL_FREQINV_Pos (1UL)                     /*!< FREQINV (Bit 1)                                       */
#define CM4RADIO_WLANCOEXCTRL_FREQINV_Msk (0x2UL)                   /*!< FREQINV (Bitfield-Mask: 0x01)                         */
#define CM4RADIO_WLANCOEXCTRL_WLANCOEXIFEN_Pos (0UL)                /*!< WLANCOEXIFEN (Bit 0)                                  */
#define CM4RADIO_WLANCOEXCTRL_WLANCOEXIFEN_Msk (0x1UL)              /*!< WLANCOEXIFEN (Bitfield-Mask: 0x01)                    */
/* ======================================================  WCICOEXCTRL  ====================================================== */
#define CM4RADIO_WCICOEXCTRL_WCICOEXIFSEL_Pos (0UL)                 /*!< WCICOEXIFSEL (Bit 0)                                  */
#define CM4RADIO_WCICOEXCTRL_WCICOEXIFSEL_Msk (0x3UL)               /*!< WCICOEXIFSEL (Bitfield-Mask: 0x03)                    */
/* =====================================================  EXTRFDIRCTRL  ====================================================== */
#define CM4RADIO_EXTRFDIRCTRL_RXENSEL_Pos (27UL)                    /*!< RXENSEL (Bit 27)                                      */
#define CM4RADIO_EXTRFDIRCTRL_RXENSEL_Msk (0x18000000UL)            /*!< RXENSEL (Bitfield-Mask: 0x03)                         */
#define CM4RADIO_EXTRFDIRCTRL_TXENSEL_Pos (25UL)                    /*!< TXENSEL (Bit 25)                                      */
#define CM4RADIO_EXTRFDIRCTRL_TXENSEL_Msk (0x6000000UL)             /*!< TXENSEL (Bitfield-Mask: 0x03)                         */
#define CM4RADIO_EXTRFDIRCTRL_RXENBIT_Pos (1UL)                     /*!< RXENBIT (Bit 1)                                       */
#define CM4RADIO_EXTRFDIRCTRL_RXENBIT_Msk (0x2UL)                   /*!< RXENBIT (Bitfield-Mask: 0x01)                         */
#define CM4RADIO_EXTRFDIRCTRL_TXENBIT_Pos (0UL)                     /*!< TXENBIT (Bit 0)                                       */
#define CM4RADIO_EXTRFDIRCTRL_TXENBIT_Msk (0x1UL)                   /*!< TXENBIT (Bitfield-Mask: 0x01)                         */


/* =========================================================================================================================== */
/* ================                                            RTC                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  RTCCTL  ========================================================= */
#define RTC_RTCCTL_HR1224_Pos             (5UL)                     /*!< HR1224 (Bit 5)                                        */
#define RTC_RTCCTL_HR1224_Msk             (0x20UL)                  /*!< HR1224 (Bitfield-Mask: 0x01)                          */
#define RTC_RTCCTL_RSTOP_Pos              (4UL)                     /*!< RSTOP (Bit 4)                                         */
#define RTC_RTCCTL_RSTOP_Msk              (0x10UL)                  /*!< RSTOP (Bitfield-Mask: 0x01)                           */
#define RTC_RTCCTL_RPT_Pos                (1UL)                     /*!< RPT (Bit 1)                                           */
#define RTC_RTCCTL_RPT_Msk                (0xeUL)                   /*!< RPT (Bitfield-Mask: 0x07)                             */
#define RTC_RTCCTL_WRTC_Pos               (0UL)                     /*!< WRTC (Bit 0)                                          */
#define RTC_RTCCTL_WRTC_Msk               (0x1UL)                   /*!< WRTC (Bitfield-Mask: 0x01)                            */
/* ========================================================  RTCSTAT  ======================================================== */
#define RTC_RTCSTAT_WRITEBUSY_Pos         (0UL)                     /*!< WRITEBUSY (Bit 0)                                     */
#define RTC_RTCSTAT_WRITEBUSY_Msk         (0x1UL)                   /*!< WRITEBUSY (Bitfield-Mask: 0x01)                       */
/* ========================================================  CTRLOW  ========================================================= */
#define RTC_CTRLOW_CTRHR_Pos              (24UL)                    /*!< CTRHR (Bit 24)                                        */
#define RTC_CTRLOW_CTRHR_Msk              (0x3f000000UL)            /*!< CTRHR (Bitfield-Mask: 0x3f)                           */
#define RTC_CTRLOW_CTRMIN_Pos             (16UL)                    /*!< CTRMIN (Bit 16)                                       */
#define RTC_CTRLOW_CTRMIN_Msk             (0x7f0000UL)              /*!< CTRMIN (Bitfield-Mask: 0x7f)                          */
#define RTC_CTRLOW_CTRSEC_Pos             (8UL)                     /*!< CTRSEC (Bit 8)                                        */
#define RTC_CTRLOW_CTRSEC_Msk             (0x7f00UL)                /*!< CTRSEC (Bitfield-Mask: 0x7f)                          */
#define RTC_CTRLOW_CTR100_Pos             (0UL)                     /*!< CTR100 (Bit 0)                                        */
#define RTC_CTRLOW_CTR100_Msk             (0xffUL)                  /*!< CTR100 (Bitfield-Mask: 0xff)                          */
/* =========================================================  CTRUP  ========================================================= */
#define RTC_CTRUP_CTERR_Pos               (31UL)                    /*!< CTERR (Bit 31)                                        */
#define RTC_CTRUP_CTERR_Msk               (0x80000000UL)            /*!< CTERR (Bitfield-Mask: 0x01)                           */
#define RTC_CTRUP_CEB_Pos                 (29UL)                    /*!< CEB (Bit 29)                                          */
#define RTC_CTRUP_CEB_Msk                 (0x20000000UL)            /*!< CEB (Bitfield-Mask: 0x01)                             */
#define RTC_CTRUP_CB_Pos                  (28UL)                    /*!< CB (Bit 28)                                           */
#define RTC_CTRUP_CB_Msk                  (0x10000000UL)            /*!< CB (Bitfield-Mask: 0x01)                              */
#define RTC_CTRUP_CTRWKDY_Pos             (24UL)                    /*!< CTRWKDY (Bit 24)                                      */
#define RTC_CTRUP_CTRWKDY_Msk             (0x7000000UL)             /*!< CTRWKDY (Bitfield-Mask: 0x07)                         */
#define RTC_CTRUP_CTRYR_Pos               (16UL)                    /*!< CTRYR (Bit 16)                                        */
#define RTC_CTRUP_CTRYR_Msk               (0xff0000UL)              /*!< CTRYR (Bitfield-Mask: 0xff)                           */
#define RTC_CTRUP_CTRMO_Pos               (8UL)                     /*!< CTRMO (Bit 8)                                         */
#define RTC_CTRUP_CTRMO_Msk               (0x1f00UL)                /*!< CTRMO (Bitfield-Mask: 0x1f)                           */
#define RTC_CTRUP_CTRDATE_Pos             (0UL)                     /*!< CTRDATE (Bit 0)                                       */
#define RTC_CTRUP_CTRDATE_Msk             (0x3fUL)                  /*!< CTRDATE (Bitfield-Mask: 0x3f)                         */
/* ========================================================  ALMLOW  ========================================================= */
#define RTC_ALMLOW_ALMHR_Pos              (24UL)                    /*!< ALMHR (Bit 24)                                        */
#define RTC_ALMLOW_ALMHR_Msk              (0x3f000000UL)            /*!< ALMHR (Bitfield-Mask: 0x3f)                           */
#define RTC_ALMLOW_ALMMIN_Pos             (16UL)                    /*!< ALMMIN (Bit 16)                                       */
#define RTC_ALMLOW_ALMMIN_Msk             (0x7f0000UL)              /*!< ALMMIN (Bitfield-Mask: 0x7f)                          */
#define RTC_ALMLOW_ALMSEC_Pos             (8UL)                     /*!< ALMSEC (Bit 8)                                        */
#define RTC_ALMLOW_ALMSEC_Msk             (0x7f00UL)                /*!< ALMSEC (Bitfield-Mask: 0x7f)                          */
#define RTC_ALMLOW_ALM100_Pos             (0UL)                     /*!< ALM100 (Bit 0)                                        */
#define RTC_ALMLOW_ALM100_Msk             (0xffUL)                  /*!< ALM100 (Bitfield-Mask: 0xff)                          */
/* =========================================================  ALMUP  ========================================================= */
#define RTC_ALMUP_ALMWKDY_Pos             (16UL)                    /*!< ALMWKDY (Bit 16)                                      */
#define RTC_ALMUP_ALMWKDY_Msk             (0x70000UL)               /*!< ALMWKDY (Bitfield-Mask: 0x07)                         */
#define RTC_ALMUP_ALMMO_Pos               (8UL)                     /*!< ALMMO (Bit 8)                                         */
#define RTC_ALMUP_ALMMO_Msk               (0x1f00UL)                /*!< ALMMO (Bitfield-Mask: 0x1f)                           */
#define RTC_ALMUP_ALMDATE_Pos             (0UL)                     /*!< ALMDATE (Bit 0)                                       */
#define RTC_ALMUP_ALMDATE_Msk             (0x3fUL)                  /*!< ALMDATE (Bitfield-Mask: 0x3f)                         */
/* =========================================================  INTEN  ========================================================= */
#define RTC_INTEN_ALM_Pos                 (0UL)                     /*!< ALM (Bit 0)                                           */
#define RTC_INTEN_ALM_Msk                 (0x1UL)                   /*!< ALM (Bitfield-Mask: 0x01)                             */
/* ========================================================  INTSTAT  ======================================================== */
#define RTC_INTSTAT_ALM_Pos               (0UL)                     /*!< ALM (Bit 0)                                           */
#define RTC_INTSTAT_ALM_Msk               (0x1UL)                   /*!< ALM (Bitfield-Mask: 0x01)                             */
/* ========================================================  INTCLR  ========================================================= */
#define RTC_INTCLR_ALM_Pos                (0UL)                     /*!< ALM (Bit 0)                                           */
#define RTC_INTCLR_ALM_Msk                (0x1UL)                   /*!< ALM (Bitfield-Mask: 0x01)                             */
/* ========================================================  INTSET  ========================================================= */
#define RTC_INTSET_ALM_Pos                (0UL)                     /*!< ALM (Bit 0)                                           */
#define RTC_INTSET_ALM_Msk                (0x1UL)                   /*!< ALM (Bitfield-Mask: 0x01)                             */


/* =========================================================================================================================== */
/* ================                                         CM4STIMER                                         ================ */
/* =========================================================================================================================== */

/* =========================================================  STCFG  ========================================================= */
#define CM4STIMER_STCFG_FREEZE_Pos        (31UL)                    /*!< FREEZE (Bit 31)                                       */
#define CM4STIMER_STCFG_FREEZE_Msk        (0x80000000UL)            /*!< FREEZE (Bitfield-Mask: 0x01)                          */
#define CM4STIMER_STCFG_CLEAR_Pos         (30UL)                    /*!< CLEAR (Bit 30)                                        */
#define CM4STIMER_STCFG_CLEAR_Msk         (0x40000000UL)            /*!< CLEAR (Bitfield-Mask: 0x01)                           */
#define CM4STIMER_STCFG_COMPAREHEN_Pos    (15UL)                    /*!< COMPAREHEN (Bit 15)                                   */
#define CM4STIMER_STCFG_COMPAREHEN_Msk    (0x8000UL)                /*!< COMPAREHEN (Bitfield-Mask: 0x01)                      */
#define CM4STIMER_STCFG_COMPAREGEN_Pos    (14UL)                    /*!< COMPAREGEN (Bit 14)                                   */
#define CM4STIMER_STCFG_COMPAREGEN_Msk    (0x4000UL)                /*!< COMPAREGEN (Bitfield-Mask: 0x01)                      */
#define CM4STIMER_STCFG_COMPAREFEN_Pos    (13UL)                    /*!< COMPAREFEN (Bit 13)                                   */
#define CM4STIMER_STCFG_COMPAREFEN_Msk    (0x2000UL)                /*!< COMPAREFEN (Bitfield-Mask: 0x01)                      */
#define CM4STIMER_STCFG_COMPAREEEN_Pos    (12UL)                    /*!< COMPAREEEN (Bit 12)                                   */
#define CM4STIMER_STCFG_COMPAREEEN_Msk    (0x1000UL)                /*!< COMPAREEEN (Bitfield-Mask: 0x01)                      */
#define CM4STIMER_STCFG_COMPAREDEN_Pos    (11UL)                    /*!< COMPAREDEN (Bit 11)                                   */
#define CM4STIMER_STCFG_COMPAREDEN_Msk    (0x800UL)                 /*!< COMPAREDEN (Bitfield-Mask: 0x01)                      */
#define CM4STIMER_STCFG_COMPARECEN_Pos    (10UL)                    /*!< COMPARECEN (Bit 10)                                   */
#define CM4STIMER_STCFG_COMPARECEN_Msk    (0x400UL)                 /*!< COMPARECEN (Bitfield-Mask: 0x01)                      */
#define CM4STIMER_STCFG_COMPAREBEN_Pos    (9UL)                     /*!< COMPAREBEN (Bit 9)                                    */
#define CM4STIMER_STCFG_COMPAREBEN_Msk    (0x200UL)                 /*!< COMPAREBEN (Bitfield-Mask: 0x01)                      */
#define CM4STIMER_STCFG_COMPAREAEN_Pos    (8UL)                     /*!< COMPAREAEN (Bit 8)                                    */
#define CM4STIMER_STCFG_COMPAREAEN_Msk    (0x100UL)                 /*!< COMPAREAEN (Bitfield-Mask: 0x01)                      */
#define CM4STIMER_STCFG_CLKSEL_Pos        (0UL)                     /*!< CLKSEL (Bit 0)                                        */
#define CM4STIMER_STCFG_CLKSEL_Msk        (0xfUL)                   /*!< CLKSEL (Bitfield-Mask: 0x0f)                          */
/* =========================================================  STTMR  ========================================================= */
#define CM4STIMER_STTMR_STTMR_Pos         (0UL)                     /*!< STTMR (Bit 0)                                         */
#define CM4STIMER_STTMR_STTMR_Msk         (0xffffffffUL)            /*!< STTMR (Bitfield-Mask: 0xffffffff)                     */
/* =======================================================  SCAPCTRL0  ======================================================= */
#define CM4STIMER_SCAPCTRL0_CAPTURE0_Pos  (9UL)                     /*!< CAPTURE0 (Bit 9)                                      */
#define CM4STIMER_SCAPCTRL0_CAPTURE0_Msk  (0x200UL)                 /*!< CAPTURE0 (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_SCAPCTRL0_STPOL0_Pos    (8UL)                     /*!< STPOL0 (Bit 8)                                        */
#define CM4STIMER_SCAPCTRL0_STPOL0_Msk    (0x100UL)                 /*!< STPOL0 (Bitfield-Mask: 0x01)                          */
#define CM4STIMER_SCAPCTRL0_STSEL0_Pos    (0UL)                     /*!< STSEL0 (Bit 0)                                        */
#define CM4STIMER_SCAPCTRL0_STSEL0_Msk    (0x7fUL)                  /*!< STSEL0 (Bitfield-Mask: 0x7f)                          */
/* =======================================================  SCAPCTRL1  ======================================================= */
#define CM4STIMER_SCAPCTRL1_CAPTURE1_Pos  (9UL)                     /*!< CAPTURE1 (Bit 9)                                      */
#define CM4STIMER_SCAPCTRL1_CAPTURE1_Msk  (0x200UL)                 /*!< CAPTURE1 (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_SCAPCTRL1_STPOL1_Pos    (8UL)                     /*!< STPOL1 (Bit 8)                                        */
#define CM4STIMER_SCAPCTRL1_STPOL1_Msk    (0x100UL)                 /*!< STPOL1 (Bitfield-Mask: 0x01)                          */
#define CM4STIMER_SCAPCTRL1_STSEL1_Pos    (0UL)                     /*!< STSEL1 (Bit 0)                                        */
#define CM4STIMER_SCAPCTRL1_STSEL1_Msk    (0x7fUL)                  /*!< STSEL1 (Bitfield-Mask: 0x7f)                          */
/* =======================================================  SCAPCTRL2  ======================================================= */
#define CM4STIMER_SCAPCTRL2_CAPTURE2_Pos  (9UL)                     /*!< CAPTURE2 (Bit 9)                                      */
#define CM4STIMER_SCAPCTRL2_CAPTURE2_Msk  (0x200UL)                 /*!< CAPTURE2 (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_SCAPCTRL2_STPOL2_Pos    (8UL)                     /*!< STPOL2 (Bit 8)                                        */
#define CM4STIMER_SCAPCTRL2_STPOL2_Msk    (0x100UL)                 /*!< STPOL2 (Bitfield-Mask: 0x01)                          */
#define CM4STIMER_SCAPCTRL2_STSEL2_Pos    (0UL)                     /*!< STSEL2 (Bit 0)                                        */
#define CM4STIMER_SCAPCTRL2_STSEL2_Msk    (0x7fUL)                  /*!< STSEL2 (Bitfield-Mask: 0x7f)                          */
/* =======================================================  SCAPCTRL3  ======================================================= */
#define CM4STIMER_SCAPCTRL3_CAPTURE3_Pos  (9UL)                     /*!< CAPTURE3 (Bit 9)                                      */
#define CM4STIMER_SCAPCTRL3_CAPTURE3_Msk  (0x200UL)                 /*!< CAPTURE3 (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_SCAPCTRL3_STPOL3_Pos    (8UL)                     /*!< STPOL3 (Bit 8)                                        */
#define CM4STIMER_SCAPCTRL3_STPOL3_Msk    (0x100UL)                 /*!< STPOL3 (Bitfield-Mask: 0x01)                          */
#define CM4STIMER_SCAPCTRL3_STSEL3_Pos    (0UL)                     /*!< STSEL3 (Bit 0)                                        */
#define CM4STIMER_SCAPCTRL3_STSEL3_Msk    (0x7fUL)                  /*!< STSEL3 (Bitfield-Mask: 0x7f)                          */
/* ========================================================  SCMPR0  ========================================================= */
#define CM4STIMER_SCMPR0_SCMPR0_Pos       (0UL)                     /*!< SCMPR0 (Bit 0)                                        */
#define CM4STIMER_SCMPR0_SCMPR0_Msk       (0xffffffffUL)            /*!< SCMPR0 (Bitfield-Mask: 0xffffffff)                    */
/* ========================================================  SCMPR1  ========================================================= */
#define CM4STIMER_SCMPR1_SCMPR1_Pos       (0UL)                     /*!< SCMPR1 (Bit 0)                                        */
#define CM4STIMER_SCMPR1_SCMPR1_Msk       (0xffffffffUL)            /*!< SCMPR1 (Bitfield-Mask: 0xffffffff)                    */
/* ========================================================  SCMPR2  ========================================================= */
#define CM4STIMER_SCMPR2_SCMPR2_Pos       (0UL)                     /*!< SCMPR2 (Bit 0)                                        */
#define CM4STIMER_SCMPR2_SCMPR2_Msk       (0xffffffffUL)            /*!< SCMPR2 (Bitfield-Mask: 0xffffffff)                    */
/* ========================================================  SCMPR3  ========================================================= */
#define CM4STIMER_SCMPR3_SCMPR3_Pos       (0UL)                     /*!< SCMPR3 (Bit 0)                                        */
#define CM4STIMER_SCMPR3_SCMPR3_Msk       (0xffffffffUL)            /*!< SCMPR3 (Bitfield-Mask: 0xffffffff)                    */
/* ========================================================  SCMPR4  ========================================================= */
#define CM4STIMER_SCMPR4_SCMPR4_Pos       (0UL)                     /*!< SCMPR4 (Bit 0)                                        */
#define CM4STIMER_SCMPR4_SCMPR4_Msk       (0xffffffffUL)            /*!< SCMPR4 (Bitfield-Mask: 0xffffffff)                    */
/* ========================================================  SCMPR5  ========================================================= */
#define CM4STIMER_SCMPR5_SCMPR5_Pos       (0UL)                     /*!< SCMPR5 (Bit 0)                                        */
#define CM4STIMER_SCMPR5_SCMPR5_Msk       (0xffffffffUL)            /*!< SCMPR5 (Bitfield-Mask: 0xffffffff)                    */
/* ========================================================  SCMPR6  ========================================================= */
#define CM4STIMER_SCMPR6_SCMPR6_Pos       (0UL)                     /*!< SCMPR6 (Bit 0)                                        */
#define CM4STIMER_SCMPR6_SCMPR6_Msk       (0xffffffffUL)            /*!< SCMPR6 (Bitfield-Mask: 0xffffffff)                    */
/* ========================================================  SCMPR7  ========================================================= */
#define CM4STIMER_SCMPR7_SCMPR7_Pos       (0UL)                     /*!< SCMPR7 (Bit 0)                                        */
#define CM4STIMER_SCMPR7_SCMPR7_Msk       (0xffffffffUL)            /*!< SCMPR7 (Bitfield-Mask: 0xffffffff)                    */
/* ========================================================  SCAPT0  ========================================================= */
#define CM4STIMER_SCAPT0_SCAPT0_Pos       (0UL)                     /*!< SCAPT0 (Bit 0)                                        */
#define CM4STIMER_SCAPT0_SCAPT0_Msk       (0xffffffffUL)            /*!< SCAPT0 (Bitfield-Mask: 0xffffffff)                    */
/* ========================================================  SCAPT1  ========================================================= */
#define CM4STIMER_SCAPT1_SCAPT1_Pos       (0UL)                     /*!< SCAPT1 (Bit 0)                                        */
#define CM4STIMER_SCAPT1_SCAPT1_Msk       (0xffffffffUL)            /*!< SCAPT1 (Bitfield-Mask: 0xffffffff)                    */
/* ========================================================  SCAPT2  ========================================================= */
#define CM4STIMER_SCAPT2_SCAPT2_Pos       (0UL)                     /*!< SCAPT2 (Bit 0)                                        */
#define CM4STIMER_SCAPT2_SCAPT2_Msk       (0xffffffffUL)            /*!< SCAPT2 (Bitfield-Mask: 0xffffffff)                    */
/* ========================================================  SCAPT3  ========================================================= */
#define CM4STIMER_SCAPT3_SCAPT3_Pos       (0UL)                     /*!< SCAPT3 (Bit 0)                                        */
#define CM4STIMER_SCAPT3_SCAPT3_Msk       (0xffffffffUL)            /*!< SCAPT3 (Bitfield-Mask: 0xffffffff)                    */
/* =========================================================  SNVR0  ========================================================= */
#define CM4STIMER_SNVR0_SNVR0_Pos         (0UL)                     /*!< SNVR0 (Bit 0)                                         */
#define CM4STIMER_SNVR0_SNVR0_Msk         (0xffffffffUL)            /*!< SNVR0 (Bitfield-Mask: 0xffffffff)                     */
/* =========================================================  SNVR1  ========================================================= */
#define CM4STIMER_SNVR1_SNVR1_Pos         (0UL)                     /*!< SNVR1 (Bit 0)                                         */
#define CM4STIMER_SNVR1_SNVR1_Msk         (0xffffffffUL)            /*!< SNVR1 (Bitfield-Mask: 0xffffffff)                     */
/* =========================================================  SNVR2  ========================================================= */
#define CM4STIMER_SNVR2_SNVR2_Pos         (0UL)                     /*!< SNVR2 (Bit 0)                                         */
#define CM4STIMER_SNVR2_SNVR2_Msk         (0xffffffffUL)            /*!< SNVR2 (Bitfield-Mask: 0xffffffff)                     */
/* =========================================================  SNVR3  ========================================================= */
#define CM4STIMER_SNVR3_SNVR3_Pos         (0UL)                     /*!< SNVR3 (Bit 0)                                         */
#define CM4STIMER_SNVR3_SNVR3_Msk         (0xffffffffUL)            /*!< SNVR3 (Bitfield-Mask: 0xffffffff)                     */
/* =======================================================  STMINTEN  ======================================================== */
#define CM4STIMER_STMINTEN_CAPTURED_Pos   (12UL)                    /*!< CAPTURED (Bit 12)                                     */
#define CM4STIMER_STMINTEN_CAPTURED_Msk   (0x1000UL)                /*!< CAPTURED (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTEN_CAPTUREC_Pos   (11UL)                    /*!< CAPTUREC (Bit 11)                                     */
#define CM4STIMER_STMINTEN_CAPTUREC_Msk   (0x800UL)                 /*!< CAPTUREC (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTEN_CAPTUREB_Pos   (10UL)                    /*!< CAPTUREB (Bit 10)                                     */
#define CM4STIMER_STMINTEN_CAPTUREB_Msk   (0x400UL)                 /*!< CAPTUREB (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTEN_CAPTUREA_Pos   (9UL)                     /*!< CAPTUREA (Bit 9)                                      */
#define CM4STIMER_STMINTEN_CAPTUREA_Msk   (0x200UL)                 /*!< CAPTUREA (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTEN_OVERFLOW_Pos   (8UL)                     /*!< OVERFLOW (Bit 8)                                      */
#define CM4STIMER_STMINTEN_OVERFLOW_Msk   (0x100UL)                 /*!< OVERFLOW (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTEN_COMPAREH_Pos   (7UL)                     /*!< COMPAREH (Bit 7)                                      */
#define CM4STIMER_STMINTEN_COMPAREH_Msk   (0x80UL)                  /*!< COMPAREH (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTEN_COMPAREG_Pos   (6UL)                     /*!< COMPAREG (Bit 6)                                      */
#define CM4STIMER_STMINTEN_COMPAREG_Msk   (0x40UL)                  /*!< COMPAREG (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTEN_COMPAREF_Pos   (5UL)                     /*!< COMPAREF (Bit 5)                                      */
#define CM4STIMER_STMINTEN_COMPAREF_Msk   (0x20UL)                  /*!< COMPAREF (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTEN_COMPAREE_Pos   (4UL)                     /*!< COMPAREE (Bit 4)                                      */
#define CM4STIMER_STMINTEN_COMPAREE_Msk   (0x10UL)                  /*!< COMPAREE (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTEN_COMPARED_Pos   (3UL)                     /*!< COMPARED (Bit 3)                                      */
#define CM4STIMER_STMINTEN_COMPARED_Msk   (0x8UL)                   /*!< COMPARED (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTEN_COMPAREC_Pos   (2UL)                     /*!< COMPAREC (Bit 2)                                      */
#define CM4STIMER_STMINTEN_COMPAREC_Msk   (0x4UL)                   /*!< COMPAREC (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTEN_COMPAREB_Pos   (1UL)                     /*!< COMPAREB (Bit 1)                                      */
#define CM4STIMER_STMINTEN_COMPAREB_Msk   (0x2UL)                   /*!< COMPAREB (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTEN_COMPAREA_Pos   (0UL)                     /*!< COMPAREA (Bit 0)                                      */
#define CM4STIMER_STMINTEN_COMPAREA_Msk   (0x1UL)                   /*!< COMPAREA (Bitfield-Mask: 0x01)                        */
/* ======================================================  STMINTSTAT  ======================================================= */
#define CM4STIMER_STMINTSTAT_CAPTURED_Pos (12UL)                    /*!< CAPTURED (Bit 12)                                     */
#define CM4STIMER_STMINTSTAT_CAPTURED_Msk (0x1000UL)                /*!< CAPTURED (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTSTAT_CAPTUREC_Pos (11UL)                    /*!< CAPTUREC (Bit 11)                                     */
#define CM4STIMER_STMINTSTAT_CAPTUREC_Msk (0x800UL)                 /*!< CAPTUREC (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTSTAT_CAPTUREB_Pos (10UL)                    /*!< CAPTUREB (Bit 10)                                     */
#define CM4STIMER_STMINTSTAT_CAPTUREB_Msk (0x400UL)                 /*!< CAPTUREB (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTSTAT_CAPTUREA_Pos (9UL)                     /*!< CAPTUREA (Bit 9)                                      */
#define CM4STIMER_STMINTSTAT_CAPTUREA_Msk (0x200UL)                 /*!< CAPTUREA (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTSTAT_OVERFLOW_Pos (8UL)                     /*!< OVERFLOW (Bit 8)                                      */
#define CM4STIMER_STMINTSTAT_OVERFLOW_Msk (0x100UL)                 /*!< OVERFLOW (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTSTAT_COMPAREH_Pos (7UL)                     /*!< COMPAREH (Bit 7)                                      */
#define CM4STIMER_STMINTSTAT_COMPAREH_Msk (0x80UL)                  /*!< COMPAREH (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTSTAT_COMPAREG_Pos (6UL)                     /*!< COMPAREG (Bit 6)                                      */
#define CM4STIMER_STMINTSTAT_COMPAREG_Msk (0x40UL)                  /*!< COMPAREG (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTSTAT_COMPAREF_Pos (5UL)                     /*!< COMPAREF (Bit 5)                                      */
#define CM4STIMER_STMINTSTAT_COMPAREF_Msk (0x20UL)                  /*!< COMPAREF (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTSTAT_COMPAREE_Pos (4UL)                     /*!< COMPAREE (Bit 4)                                      */
#define CM4STIMER_STMINTSTAT_COMPAREE_Msk (0x10UL)                  /*!< COMPAREE (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTSTAT_COMPARED_Pos (3UL)                     /*!< COMPARED (Bit 3)                                      */
#define CM4STIMER_STMINTSTAT_COMPARED_Msk (0x8UL)                   /*!< COMPARED (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTSTAT_COMPAREC_Pos (2UL)                     /*!< COMPAREC (Bit 2)                                      */
#define CM4STIMER_STMINTSTAT_COMPAREC_Msk (0x4UL)                   /*!< COMPAREC (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTSTAT_COMPAREB_Pos (1UL)                     /*!< COMPAREB (Bit 1)                                      */
#define CM4STIMER_STMINTSTAT_COMPAREB_Msk (0x2UL)                   /*!< COMPAREB (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTSTAT_COMPAREA_Pos (0UL)                     /*!< COMPAREA (Bit 0)                                      */
#define CM4STIMER_STMINTSTAT_COMPAREA_Msk (0x1UL)                   /*!< COMPAREA (Bitfield-Mask: 0x01)                        */
/* =======================================================  STMINTCLR  ======================================================= */
#define CM4STIMER_STMINTCLR_CAPTURED_Pos  (12UL)                    /*!< CAPTURED (Bit 12)                                     */
#define CM4STIMER_STMINTCLR_CAPTURED_Msk  (0x1000UL)                /*!< CAPTURED (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTCLR_CAPTUREC_Pos  (11UL)                    /*!< CAPTUREC (Bit 11)                                     */
#define CM4STIMER_STMINTCLR_CAPTUREC_Msk  (0x800UL)                 /*!< CAPTUREC (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTCLR_CAPTUREB_Pos  (10UL)                    /*!< CAPTUREB (Bit 10)                                     */
#define CM4STIMER_STMINTCLR_CAPTUREB_Msk  (0x400UL)                 /*!< CAPTUREB (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTCLR_CAPTUREA_Pos  (9UL)                     /*!< CAPTUREA (Bit 9)                                      */
#define CM4STIMER_STMINTCLR_CAPTUREA_Msk  (0x200UL)                 /*!< CAPTUREA (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTCLR_OVERFLOW_Pos  (8UL)                     /*!< OVERFLOW (Bit 8)                                      */
#define CM4STIMER_STMINTCLR_OVERFLOW_Msk  (0x100UL)                 /*!< OVERFLOW (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTCLR_COMPAREH_Pos  (7UL)                     /*!< COMPAREH (Bit 7)                                      */
#define CM4STIMER_STMINTCLR_COMPAREH_Msk  (0x80UL)                  /*!< COMPAREH (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTCLR_COMPAREG_Pos  (6UL)                     /*!< COMPAREG (Bit 6)                                      */
#define CM4STIMER_STMINTCLR_COMPAREG_Msk  (0x40UL)                  /*!< COMPAREG (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTCLR_COMPAREF_Pos  (5UL)                     /*!< COMPAREF (Bit 5)                                      */
#define CM4STIMER_STMINTCLR_COMPAREF_Msk  (0x20UL)                  /*!< COMPAREF (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTCLR_COMPAREE_Pos  (4UL)                     /*!< COMPAREE (Bit 4)                                      */
#define CM4STIMER_STMINTCLR_COMPAREE_Msk  (0x10UL)                  /*!< COMPAREE (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTCLR_COMPARED_Pos  (3UL)                     /*!< COMPARED (Bit 3)                                      */
#define CM4STIMER_STMINTCLR_COMPARED_Msk  (0x8UL)                   /*!< COMPARED (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTCLR_COMPAREC_Pos  (2UL)                     /*!< COMPAREC (Bit 2)                                      */
#define CM4STIMER_STMINTCLR_COMPAREC_Msk  (0x4UL)                   /*!< COMPAREC (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTCLR_COMPAREB_Pos  (1UL)                     /*!< COMPAREB (Bit 1)                                      */
#define CM4STIMER_STMINTCLR_COMPAREB_Msk  (0x2UL)                   /*!< COMPAREB (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTCLR_COMPAREA_Pos  (0UL)                     /*!< COMPAREA (Bit 0)                                      */
#define CM4STIMER_STMINTCLR_COMPAREA_Msk  (0x1UL)                   /*!< COMPAREA (Bitfield-Mask: 0x01)                        */
/* =======================================================  STMINTSET  ======================================================= */
#define CM4STIMER_STMINTSET_CAPTURED_Pos  (12UL)                    /*!< CAPTURED (Bit 12)                                     */
#define CM4STIMER_STMINTSET_CAPTURED_Msk  (0x1000UL)                /*!< CAPTURED (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTSET_CAPTUREC_Pos  (11UL)                    /*!< CAPTUREC (Bit 11)                                     */
#define CM4STIMER_STMINTSET_CAPTUREC_Msk  (0x800UL)                 /*!< CAPTUREC (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTSET_CAPTUREB_Pos  (10UL)                    /*!< CAPTUREB (Bit 10)                                     */
#define CM4STIMER_STMINTSET_CAPTUREB_Msk  (0x400UL)                 /*!< CAPTUREB (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTSET_CAPTUREA_Pos  (9UL)                     /*!< CAPTUREA (Bit 9)                                      */
#define CM4STIMER_STMINTSET_CAPTUREA_Msk  (0x200UL)                 /*!< CAPTUREA (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTSET_OVERFLOW_Pos  (8UL)                     /*!< OVERFLOW (Bit 8)                                      */
#define CM4STIMER_STMINTSET_OVERFLOW_Msk  (0x100UL)                 /*!< OVERFLOW (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTSET_COMPAREH_Pos  (7UL)                     /*!< COMPAREH (Bit 7)                                      */
#define CM4STIMER_STMINTSET_COMPAREH_Msk  (0x80UL)                  /*!< COMPAREH (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTSET_COMPAREG_Pos  (6UL)                     /*!< COMPAREG (Bit 6)                                      */
#define CM4STIMER_STMINTSET_COMPAREG_Msk  (0x40UL)                  /*!< COMPAREG (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTSET_COMPAREF_Pos  (5UL)                     /*!< COMPAREF (Bit 5)                                      */
#define CM4STIMER_STMINTSET_COMPAREF_Msk  (0x20UL)                  /*!< COMPAREF (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTSET_COMPAREE_Pos  (4UL)                     /*!< COMPAREE (Bit 4)                                      */
#define CM4STIMER_STMINTSET_COMPAREE_Msk  (0x10UL)                  /*!< COMPAREE (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTSET_COMPARED_Pos  (3UL)                     /*!< COMPARED (Bit 3)                                      */
#define CM4STIMER_STMINTSET_COMPARED_Msk  (0x8UL)                   /*!< COMPARED (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTSET_COMPAREC_Pos  (2UL)                     /*!< COMPAREC (Bit 2)                                      */
#define CM4STIMER_STMINTSET_COMPAREC_Msk  (0x4UL)                   /*!< COMPAREC (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTSET_COMPAREB_Pos  (1UL)                     /*!< COMPAREB (Bit 1)                                      */
#define CM4STIMER_STMINTSET_COMPAREB_Msk  (0x2UL)                   /*!< COMPAREB (Bitfield-Mask: 0x01)                        */
#define CM4STIMER_STMINTSET_COMPAREA_Pos  (0UL)                     /*!< COMPAREA (Bit 0)                                      */
#define CM4STIMER_STMINTSET_COMPAREA_Msk  (0x1UL)                   /*!< COMPAREA (Bitfield-Mask: 0x01)                        */


/* =========================================================================================================================== */
/* ================                                         CM4TIMER                                          ================ */
/* =========================================================================================================================== */

/* =========================================================  CTRL  ========================================================== */
#define CM4TIMER_CTRL_RESET_Pos           (31UL)                    /*!< RESET (Bit 31)                                        */
#define CM4TIMER_CTRL_RESET_Msk           (0x80000000UL)            /*!< RESET (Bitfield-Mask: 0x01)                           */
/* ========================================================  STATUS  ========================================================= */
#define CM4TIMER_STATUS_NTIMERS_Pos       (16UL)                    /*!< NTIMERS (Bit 16)                                      */
#define CM4TIMER_STATUS_NTIMERS_Msk       (0x1f0000UL)              /*!< NTIMERS (Bitfield-Mask: 0x1f)                         */
#define CM4TIMER_STATUS_ACTIVE_Pos        (0UL)                     /*!< ACTIVE (Bit 0)                                        */
#define CM4TIMER_STATUS_ACTIVE_Msk        (0xffffUL)                /*!< ACTIVE (Bitfield-Mask: 0xffff)                        */
/* ========================================================  GLOBEN  ========================================================= */
#define CM4TIMER_GLOBEN_ADCEN_Pos         (30UL)                    /*!< ADCEN (Bit 30)                                        */
#define CM4TIMER_GLOBEN_ADCEN_Msk         (0x40000000UL)            /*!< ADCEN (Bitfield-Mask: 0x01)                           */
#define CM4TIMER_GLOBEN_ENABLEALLINPUTS_Pos (29UL)                  /*!< ENABLEALLINPUTS (Bit 29)                              */
#define CM4TIMER_GLOBEN_ENABLEALLINPUTS_Msk (0x20000000UL)          /*!< ENABLEALLINPUTS (Bitfield-Mask: 0x01)                 */
#define CM4TIMER_GLOBEN_ENB3_Pos          (3UL)                     /*!< ENB3 (Bit 3)                                          */
#define CM4TIMER_GLOBEN_ENB3_Msk          (0x8UL)                   /*!< ENB3 (Bitfield-Mask: 0x01)                            */
#define CM4TIMER_GLOBEN_ENB2_Pos          (2UL)                     /*!< ENB2 (Bit 2)                                          */
#define CM4TIMER_GLOBEN_ENB2_Msk          (0x4UL)                   /*!< ENB2 (Bitfield-Mask: 0x01)                            */
#define CM4TIMER_GLOBEN_ENB1_Pos          (1UL)                     /*!< ENB1 (Bit 1)                                          */
#define CM4TIMER_GLOBEN_ENB1_Msk          (0x2UL)                   /*!< ENB1 (Bitfield-Mask: 0x01)                            */
#define CM4TIMER_GLOBEN_ENB0_Pos          (0UL)                     /*!< ENB0 (Bit 0)                                          */
#define CM4TIMER_GLOBEN_ENB0_Msk          (0x1UL)                   /*!< ENB0 (Bitfield-Mask: 0x01)                            */
/* =========================================================  INTEN  ========================================================= */
#define CM4TIMER_INTEN_TMR31INT_Pos       (7UL)                     /*!< TMR31INT (Bit 7)                                      */
#define CM4TIMER_INTEN_TMR31INT_Msk       (0x80UL)                  /*!< TMR31INT (Bitfield-Mask: 0x01)                        */
#define CM4TIMER_INTEN_TMR30INT_Pos       (6UL)                     /*!< TMR30INT (Bit 6)                                      */
#define CM4TIMER_INTEN_TMR30INT_Msk       (0x40UL)                  /*!< TMR30INT (Bitfield-Mask: 0x01)                        */
#define CM4TIMER_INTEN_TMR21INT_Pos       (5UL)                     /*!< TMR21INT (Bit 5)                                      */
#define CM4TIMER_INTEN_TMR21INT_Msk       (0x20UL)                  /*!< TMR21INT (Bitfield-Mask: 0x01)                        */
#define CM4TIMER_INTEN_TMR20INT_Pos       (4UL)                     /*!< TMR20INT (Bit 4)                                      */
#define CM4TIMER_INTEN_TMR20INT_Msk       (0x10UL)                  /*!< TMR20INT (Bitfield-Mask: 0x01)                        */
#define CM4TIMER_INTEN_TMR11INT_Pos       (3UL)                     /*!< TMR11INT (Bit 3)                                      */
#define CM4TIMER_INTEN_TMR11INT_Msk       (0x8UL)                   /*!< TMR11INT (Bitfield-Mask: 0x01)                        */
#define CM4TIMER_INTEN_TMR10INT_Pos       (2UL)                     /*!< TMR10INT (Bit 2)                                      */
#define CM4TIMER_INTEN_TMR10INT_Msk       (0x4UL)                   /*!< TMR10INT (Bitfield-Mask: 0x01)                        */
#define CM4TIMER_INTEN_TMR01INT_Pos       (1UL)                     /*!< TMR01INT (Bit 1)                                      */
#define CM4TIMER_INTEN_TMR01INT_Msk       (0x2UL)                   /*!< TMR01INT (Bitfield-Mask: 0x01)                        */
#define CM4TIMER_INTEN_TMR00INT_Pos       (0UL)                     /*!< TMR00INT (Bit 0)                                      */
#define CM4TIMER_INTEN_TMR00INT_Msk       (0x1UL)                   /*!< TMR00INT (Bitfield-Mask: 0x01)                        */
/* ========================================================  INTSTAT  ======================================================== */
#define CM4TIMER_INTSTAT_TMR31INT_Pos     (7UL)                     /*!< TMR31INT (Bit 7)                                      */
#define CM4TIMER_INTSTAT_TMR31INT_Msk     (0x80UL)                  /*!< TMR31INT (Bitfield-Mask: 0x01)                        */
#define CM4TIMER_INTSTAT_TMR30INT_Pos     (6UL)                     /*!< TMR30INT (Bit 6)                                      */
#define CM4TIMER_INTSTAT_TMR30INT_Msk     (0x40UL)                  /*!< TMR30INT (Bitfield-Mask: 0x01)                        */
#define CM4TIMER_INTSTAT_TMR21INT_Pos     (5UL)                     /*!< TMR21INT (Bit 5)                                      */
#define CM4TIMER_INTSTAT_TMR21INT_Msk     (0x20UL)                  /*!< TMR21INT (Bitfield-Mask: 0x01)                        */
#define CM4TIMER_INTSTAT_TMR20INT_Pos     (4UL)                     /*!< TMR20INT (Bit 4)                                      */
#define CM4TIMER_INTSTAT_TMR20INT_Msk     (0x10UL)                  /*!< TMR20INT (Bitfield-Mask: 0x01)                        */
#define CM4TIMER_INTSTAT_TMR11INT_Pos     (3UL)                     /*!< TMR11INT (Bit 3)                                      */
#define CM4TIMER_INTSTAT_TMR11INT_Msk     (0x8UL)                   /*!< TMR11INT (Bitfield-Mask: 0x01)                        */
#define CM4TIMER_INTSTAT_TMR10INT_Pos     (2UL)                     /*!< TMR10INT (Bit 2)                                      */
#define CM4TIMER_INTSTAT_TMR10INT_Msk     (0x4UL)                   /*!< TMR10INT (Bitfield-Mask: 0x01)                        */
#define CM4TIMER_INTSTAT_TMR01INT_Pos     (1UL)                     /*!< TMR01INT (Bit 1)                                      */
#define CM4TIMER_INTSTAT_TMR01INT_Msk     (0x2UL)                   /*!< TMR01INT (Bitfield-Mask: 0x01)                        */
#define CM4TIMER_INTSTAT_TMR00INT_Pos     (0UL)                     /*!< TMR00INT (Bit 0)                                      */
#define CM4TIMER_INTSTAT_TMR00INT_Msk     (0x1UL)                   /*!< TMR00INT (Bitfield-Mask: 0x01)                        */
/* ========================================================  INTCLR  ========================================================= */
#define CM4TIMER_INTCLR_TMR31INT_Pos      (7UL)                     /*!< TMR31INT (Bit 7)                                      */
#define CM4TIMER_INTCLR_TMR31INT_Msk      (0x80UL)                  /*!< TMR31INT (Bitfield-Mask: 0x01)                        */
#define CM4TIMER_INTCLR_TMR30INT_Pos      (6UL)                     /*!< TMR30INT (Bit 6)                                      */
#define CM4TIMER_INTCLR_TMR30INT_Msk      (0x40UL)                  /*!< TMR30INT (Bitfield-Mask: 0x01)                        */
#define CM4TIMER_INTCLR_TMR21INT_Pos      (5UL)                     /*!< TMR21INT (Bit 5)                                      */
#define CM4TIMER_INTCLR_TMR21INT_Msk      (0x20UL)                  /*!< TMR21INT (Bitfield-Mask: 0x01)                        */
#define CM4TIMER_INTCLR_TMR20INT_Pos      (4UL)                     /*!< TMR20INT (Bit 4)                                      */
#define CM4TIMER_INTCLR_TMR20INT_Msk      (0x10UL)                  /*!< TMR20INT (Bitfield-Mask: 0x01)                        */
#define CM4TIMER_INTCLR_TMR11INT_Pos      (3UL)                     /*!< TMR11INT (Bit 3)                                      */
#define CM4TIMER_INTCLR_TMR11INT_Msk      (0x8UL)                   /*!< TMR11INT (Bitfield-Mask: 0x01)                        */
#define CM4TIMER_INTCLR_TMR10INT_Pos      (2UL)                     /*!< TMR10INT (Bit 2)                                      */
#define CM4TIMER_INTCLR_TMR10INT_Msk      (0x4UL)                   /*!< TMR10INT (Bitfield-Mask: 0x01)                        */
#define CM4TIMER_INTCLR_TMR01INT_Pos      (1UL)                     /*!< TMR01INT (Bit 1)                                      */
#define CM4TIMER_INTCLR_TMR01INT_Msk      (0x2UL)                   /*!< TMR01INT (Bitfield-Mask: 0x01)                        */
#define CM4TIMER_INTCLR_TMR00INT_Pos      (0UL)                     /*!< TMR00INT (Bit 0)                                      */
#define CM4TIMER_INTCLR_TMR00INT_Msk      (0x1UL)                   /*!< TMR00INT (Bitfield-Mask: 0x01)                        */
/* ========================================================  INTSET  ========================================================= */
#define CM4TIMER_INTSET_TMR31INT_Pos      (7UL)                     /*!< TMR31INT (Bit 7)                                      */
#define CM4TIMER_INTSET_TMR31INT_Msk      (0x80UL)                  /*!< TMR31INT (Bitfield-Mask: 0x01)                        */
#define CM4TIMER_INTSET_TMR30INT_Pos      (6UL)                     /*!< TMR30INT (Bit 6)                                      */
#define CM4TIMER_INTSET_TMR30INT_Msk      (0x40UL)                  /*!< TMR30INT (Bitfield-Mask: 0x01)                        */
#define CM4TIMER_INTSET_TMR21INT_Pos      (5UL)                     /*!< TMR21INT (Bit 5)                                      */
#define CM4TIMER_INTSET_TMR21INT_Msk      (0x20UL)                  /*!< TMR21INT (Bitfield-Mask: 0x01)                        */
#define CM4TIMER_INTSET_TMR20INT_Pos      (4UL)                     /*!< TMR20INT (Bit 4)                                      */
#define CM4TIMER_INTSET_TMR20INT_Msk      (0x10UL)                  /*!< TMR20INT (Bitfield-Mask: 0x01)                        */
#define CM4TIMER_INTSET_TMR11INT_Pos      (3UL)                     /*!< TMR11INT (Bit 3)                                      */
#define CM4TIMER_INTSET_TMR11INT_Msk      (0x8UL)                   /*!< TMR11INT (Bitfield-Mask: 0x01)                        */
#define CM4TIMER_INTSET_TMR10INT_Pos      (2UL)                     /*!< TMR10INT (Bit 2)                                      */
#define CM4TIMER_INTSET_TMR10INT_Msk      (0x4UL)                   /*!< TMR10INT (Bitfield-Mask: 0x01)                        */
#define CM4TIMER_INTSET_TMR01INT_Pos      (1UL)                     /*!< TMR01INT (Bit 1)                                      */
#define CM4TIMER_INTSET_TMR01INT_Msk      (0x2UL)                   /*!< TMR01INT (Bitfield-Mask: 0x01)                        */
#define CM4TIMER_INTSET_TMR00INT_Pos      (0UL)                     /*!< TMR00INT (Bit 0)                                      */
#define CM4TIMER_INTSET_TMR00INT_Msk      (0x1UL)                   /*!< TMR00INT (Bitfield-Mask: 0x01)                        */
/* ========================================================  OUTCFG0  ======================================================== */
#define CM4TIMER_OUTCFG0_OUTCFG3_Pos      (24UL)                    /*!< OUTCFG3 (Bit 24)                                      */
#define CM4TIMER_OUTCFG0_OUTCFG3_Msk      (0x3f000000UL)            /*!< OUTCFG3 (Bitfield-Mask: 0x3f)                         */
#define CM4TIMER_OUTCFG0_OUTCFG2_Pos      (16UL)                    /*!< OUTCFG2 (Bit 16)                                      */
#define CM4TIMER_OUTCFG0_OUTCFG2_Msk      (0x3f0000UL)              /*!< OUTCFG2 (Bitfield-Mask: 0x3f)                         */
#define CM4TIMER_OUTCFG0_OUTCFG1_Pos      (8UL)                     /*!< OUTCFG1 (Bit 8)                                       */
#define CM4TIMER_OUTCFG0_OUTCFG1_Msk      (0x3f00UL)                /*!< OUTCFG1 (Bitfield-Mask: 0x3f)                         */
#define CM4TIMER_OUTCFG0_OUTCFG0_Pos      (0UL)                     /*!< OUTCFG0 (Bit 0)                                       */
#define CM4TIMER_OUTCFG0_OUTCFG0_Msk      (0x3fUL)                  /*!< OUTCFG0 (Bitfield-Mask: 0x3f)                         */
/* ========================================================  OUTCFG1  ======================================================== */
#define CM4TIMER_OUTCFG1_OUTCFG7_Pos      (24UL)                    /*!< OUTCFG7 (Bit 24)                                      */
#define CM4TIMER_OUTCFG1_OUTCFG7_Msk      (0x3f000000UL)            /*!< OUTCFG7 (Bitfield-Mask: 0x3f)                         */
#define CM4TIMER_OUTCFG1_OUTCFG6_Pos      (16UL)                    /*!< OUTCFG6 (Bit 16)                                      */
#define CM4TIMER_OUTCFG1_OUTCFG6_Msk      (0x3f0000UL)              /*!< OUTCFG6 (Bitfield-Mask: 0x3f)                         */
#define CM4TIMER_OUTCFG1_OUTCFG5_Pos      (8UL)                     /*!< OUTCFG5 (Bit 8)                                       */
#define CM4TIMER_OUTCFG1_OUTCFG5_Msk      (0x3f00UL)                /*!< OUTCFG5 (Bitfield-Mask: 0x3f)                         */
#define CM4TIMER_OUTCFG1_OUTCFG4_Pos      (0UL)                     /*!< OUTCFG4 (Bit 0)                                       */
#define CM4TIMER_OUTCFG1_OUTCFG4_Msk      (0x3fUL)                  /*!< OUTCFG4 (Bitfield-Mask: 0x3f)                         */
/* ========================================================  OUTCFG2  ======================================================== */
#define CM4TIMER_OUTCFG2_OUTCFG11_Pos     (24UL)                    /*!< OUTCFG11 (Bit 24)                                     */
#define CM4TIMER_OUTCFG2_OUTCFG11_Msk     (0x3f000000UL)            /*!< OUTCFG11 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG2_OUTCFG10_Pos     (16UL)                    /*!< OUTCFG10 (Bit 16)                                     */
#define CM4TIMER_OUTCFG2_OUTCFG10_Msk     (0x3f0000UL)              /*!< OUTCFG10 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG2_OUTCFG9_Pos      (8UL)                     /*!< OUTCFG9 (Bit 8)                                       */
#define CM4TIMER_OUTCFG2_OUTCFG9_Msk      (0x3f00UL)                /*!< OUTCFG9 (Bitfield-Mask: 0x3f)                         */
#define CM4TIMER_OUTCFG2_OUTCFG8_Pos      (0UL)                     /*!< OUTCFG8 (Bit 0)                                       */
#define CM4TIMER_OUTCFG2_OUTCFG8_Msk      (0x3fUL)                  /*!< OUTCFG8 (Bitfield-Mask: 0x3f)                         */
/* ========================================================  OUTCFG3  ======================================================== */
#define CM4TIMER_OUTCFG3_OUTCFG15_Pos     (24UL)                    /*!< OUTCFG15 (Bit 24)                                     */
#define CM4TIMER_OUTCFG3_OUTCFG15_Msk     (0x3f000000UL)            /*!< OUTCFG15 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG3_OUTCFG14_Pos     (16UL)                    /*!< OUTCFG14 (Bit 16)                                     */
#define CM4TIMER_OUTCFG3_OUTCFG14_Msk     (0x3f0000UL)              /*!< OUTCFG14 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG3_OUTCFG13_Pos     (8UL)                     /*!< OUTCFG13 (Bit 8)                                      */
#define CM4TIMER_OUTCFG3_OUTCFG13_Msk     (0x3f00UL)                /*!< OUTCFG13 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG3_OUTCFG12_Pos     (0UL)                     /*!< OUTCFG12 (Bit 0)                                      */
#define CM4TIMER_OUTCFG3_OUTCFG12_Msk     (0x3fUL)                  /*!< OUTCFG12 (Bitfield-Mask: 0x3f)                        */
/* ========================================================  OUTCFG4  ======================================================== */
#define CM4TIMER_OUTCFG4_OUTCFG19_Pos     (24UL)                    /*!< OUTCFG19 (Bit 24)                                     */
#define CM4TIMER_OUTCFG4_OUTCFG19_Msk     (0x3f000000UL)            /*!< OUTCFG19 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG4_OUTCFG18_Pos     (16UL)                    /*!< OUTCFG18 (Bit 16)                                     */
#define CM4TIMER_OUTCFG4_OUTCFG18_Msk     (0x3f0000UL)              /*!< OUTCFG18 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG4_OUTCFG17_Pos     (8UL)                     /*!< OUTCFG17 (Bit 8)                                      */
#define CM4TIMER_OUTCFG4_OUTCFG17_Msk     (0x3f00UL)                /*!< OUTCFG17 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG4_OUTCFG16_Pos     (0UL)                     /*!< OUTCFG16 (Bit 0)                                      */
#define CM4TIMER_OUTCFG4_OUTCFG16_Msk     (0x3fUL)                  /*!< OUTCFG16 (Bitfield-Mask: 0x3f)                        */
/* ========================================================  OUTCFG5  ======================================================== */
#define CM4TIMER_OUTCFG5_OUTCFG23_Pos     (24UL)                    /*!< OUTCFG23 (Bit 24)                                     */
#define CM4TIMER_OUTCFG5_OUTCFG23_Msk     (0x3f000000UL)            /*!< OUTCFG23 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG5_OUTCFG22_Pos     (16UL)                    /*!< OUTCFG22 (Bit 16)                                     */
#define CM4TIMER_OUTCFG5_OUTCFG22_Msk     (0x3f0000UL)              /*!< OUTCFG22 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG5_OUTCFG21_Pos     (8UL)                     /*!< OUTCFG21 (Bit 8)                                      */
#define CM4TIMER_OUTCFG5_OUTCFG21_Msk     (0x3f00UL)                /*!< OUTCFG21 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG5_OUTCFG20_Pos     (0UL)                     /*!< OUTCFG20 (Bit 0)                                      */
#define CM4TIMER_OUTCFG5_OUTCFG20_Msk     (0x3fUL)                  /*!< OUTCFG20 (Bitfield-Mask: 0x3f)                        */
/* ========================================================  OUTCFG6  ======================================================== */
#define CM4TIMER_OUTCFG6_OUTCFG27_Pos     (24UL)                    /*!< OUTCFG27 (Bit 24)                                     */
#define CM4TIMER_OUTCFG6_OUTCFG27_Msk     (0x3f000000UL)            /*!< OUTCFG27 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG6_OUTCFG26_Pos     (16UL)                    /*!< OUTCFG26 (Bit 16)                                     */
#define CM4TIMER_OUTCFG6_OUTCFG26_Msk     (0x3f0000UL)              /*!< OUTCFG26 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG6_OUTCFG25_Pos     (8UL)                     /*!< OUTCFG25 (Bit 8)                                      */
#define CM4TIMER_OUTCFG6_OUTCFG25_Msk     (0x3f00UL)                /*!< OUTCFG25 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG6_OUTCFG24_Pos     (0UL)                     /*!< OUTCFG24 (Bit 0)                                      */
#define CM4TIMER_OUTCFG6_OUTCFG24_Msk     (0x3fUL)                  /*!< OUTCFG24 (Bitfield-Mask: 0x3f)                        */
/* ========================================================  OUTCFG7  ======================================================== */
#define CM4TIMER_OUTCFG7_OUTCFG31_Pos     (24UL)                    /*!< OUTCFG31 (Bit 24)                                     */
#define CM4TIMER_OUTCFG7_OUTCFG31_Msk     (0x3f000000UL)            /*!< OUTCFG31 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG7_OUTCFG30_Pos     (16UL)                    /*!< OUTCFG30 (Bit 16)                                     */
#define CM4TIMER_OUTCFG7_OUTCFG30_Msk     (0x3f0000UL)              /*!< OUTCFG30 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG7_OUTCFG29_Pos     (8UL)                     /*!< OUTCFG29 (Bit 8)                                      */
#define CM4TIMER_OUTCFG7_OUTCFG29_Msk     (0x3f00UL)                /*!< OUTCFG29 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG7_OUTCFG28_Pos     (0UL)                     /*!< OUTCFG28 (Bit 0)                                      */
#define CM4TIMER_OUTCFG7_OUTCFG28_Msk     (0x3fUL)                  /*!< OUTCFG28 (Bitfield-Mask: 0x3f)                        */
/* ========================================================  OUTCFG8  ======================================================== */
#define CM4TIMER_OUTCFG8_OUTCFG35_Pos     (24UL)                    /*!< OUTCFG35 (Bit 24)                                     */
#define CM4TIMER_OUTCFG8_OUTCFG35_Msk     (0x3f000000UL)            /*!< OUTCFG35 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG8_OUTCFG34_Pos     (16UL)                    /*!< OUTCFG34 (Bit 16)                                     */
#define CM4TIMER_OUTCFG8_OUTCFG34_Msk     (0x3f0000UL)              /*!< OUTCFG34 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG8_OUTCFG33_Pos     (8UL)                     /*!< OUTCFG33 (Bit 8)                                      */
#define CM4TIMER_OUTCFG8_OUTCFG33_Msk     (0x3f00UL)                /*!< OUTCFG33 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG8_OUTCFG32_Pos     (0UL)                     /*!< OUTCFG32 (Bit 0)                                      */
#define CM4TIMER_OUTCFG8_OUTCFG32_Msk     (0x3fUL)                  /*!< OUTCFG32 (Bitfield-Mask: 0x3f)                        */
/* ========================================================  OUTCFG9  ======================================================== */
#define CM4TIMER_OUTCFG9_OUTCFG39_Pos     (24UL)                    /*!< OUTCFG39 (Bit 24)                                     */
#define CM4TIMER_OUTCFG9_OUTCFG39_Msk     (0x3f000000UL)            /*!< OUTCFG39 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG9_OUTCFG38_Pos     (16UL)                    /*!< OUTCFG38 (Bit 16)                                     */
#define CM4TIMER_OUTCFG9_OUTCFG38_Msk     (0x3f0000UL)              /*!< OUTCFG38 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG9_OUTCFG37_Pos     (8UL)                     /*!< OUTCFG37 (Bit 8)                                      */
#define CM4TIMER_OUTCFG9_OUTCFG37_Msk     (0x3f00UL)                /*!< OUTCFG37 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG9_OUTCFG36_Pos     (0UL)                     /*!< OUTCFG36 (Bit 0)                                      */
#define CM4TIMER_OUTCFG9_OUTCFG36_Msk     (0x3fUL)                  /*!< OUTCFG36 (Bitfield-Mask: 0x3f)                        */
/* =======================================================  OUTCFG10  ======================================================== */
#define CM4TIMER_OUTCFG10_OUTCFG43_Pos    (24UL)                    /*!< OUTCFG43 (Bit 24)                                     */
#define CM4TIMER_OUTCFG10_OUTCFG43_Msk    (0x3f000000UL)            /*!< OUTCFG43 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG10_OUTCFG42_Pos    (16UL)                    /*!< OUTCFG42 (Bit 16)                                     */
#define CM4TIMER_OUTCFG10_OUTCFG42_Msk    (0x3f0000UL)              /*!< OUTCFG42 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG10_OUTCFG41_Pos    (8UL)                     /*!< OUTCFG41 (Bit 8)                                      */
#define CM4TIMER_OUTCFG10_OUTCFG41_Msk    (0x3f00UL)                /*!< OUTCFG41 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG10_OUTCFG40_Pos    (0UL)                     /*!< OUTCFG40 (Bit 0)                                      */
#define CM4TIMER_OUTCFG10_OUTCFG40_Msk    (0x3fUL)                  /*!< OUTCFG40 (Bitfield-Mask: 0x3f)                        */
/* =======================================================  OUTCFG11  ======================================================== */
#define CM4TIMER_OUTCFG11_OUTCFG47_Pos    (24UL)                    /*!< OUTCFG47 (Bit 24)                                     */
#define CM4TIMER_OUTCFG11_OUTCFG47_Msk    (0x3f000000UL)            /*!< OUTCFG47 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG11_OUTCFG46_Pos    (16UL)                    /*!< OUTCFG46 (Bit 16)                                     */
#define CM4TIMER_OUTCFG11_OUTCFG46_Msk    (0x3f0000UL)              /*!< OUTCFG46 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG11_OUTCFG45_Pos    (8UL)                     /*!< OUTCFG45 (Bit 8)                                      */
#define CM4TIMER_OUTCFG11_OUTCFG45_Msk    (0x3f00UL)                /*!< OUTCFG45 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG11_OUTCFG44_Pos    (0UL)                     /*!< OUTCFG44 (Bit 0)                                      */
#define CM4TIMER_OUTCFG11_OUTCFG44_Msk    (0x3fUL)                  /*!< OUTCFG44 (Bitfield-Mask: 0x3f)                        */
/* =======================================================  OUTCFG12  ======================================================== */
#define CM4TIMER_OUTCFG12_OUTCFG51_Pos    (24UL)                    /*!< OUTCFG51 (Bit 24)                                     */
#define CM4TIMER_OUTCFG12_OUTCFG51_Msk    (0x3f000000UL)            /*!< OUTCFG51 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG12_OUTCFG50_Pos    (16UL)                    /*!< OUTCFG50 (Bit 16)                                     */
#define CM4TIMER_OUTCFG12_OUTCFG50_Msk    (0x3f0000UL)              /*!< OUTCFG50 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG12_OUTCFG49_Pos    (8UL)                     /*!< OUTCFG49 (Bit 8)                                      */
#define CM4TIMER_OUTCFG12_OUTCFG49_Msk    (0x3f00UL)                /*!< OUTCFG49 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG12_OUTCFG48_Pos    (0UL)                     /*!< OUTCFG48 (Bit 0)                                      */
#define CM4TIMER_OUTCFG12_OUTCFG48_Msk    (0x3fUL)                  /*!< OUTCFG48 (Bitfield-Mask: 0x3f)                        */
/* =======================================================  OUTCFG13  ======================================================== */
#define CM4TIMER_OUTCFG13_OUTCFG55_Pos    (24UL)                    /*!< OUTCFG55 (Bit 24)                                     */
#define CM4TIMER_OUTCFG13_OUTCFG55_Msk    (0x3f000000UL)            /*!< OUTCFG55 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG13_OUTCFG54_Pos    (16UL)                    /*!< OUTCFG54 (Bit 16)                                     */
#define CM4TIMER_OUTCFG13_OUTCFG54_Msk    (0x3f0000UL)              /*!< OUTCFG54 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG13_OUTCFG53_Pos    (8UL)                     /*!< OUTCFG53 (Bit 8)                                      */
#define CM4TIMER_OUTCFG13_OUTCFG53_Msk    (0x3f00UL)                /*!< OUTCFG53 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG13_OUTCFG52_Pos    (0UL)                     /*!< OUTCFG52 (Bit 0)                                      */
#define CM4TIMER_OUTCFG13_OUTCFG52_Msk    (0x3fUL)                  /*!< OUTCFG52 (Bitfield-Mask: 0x3f)                        */
/* =======================================================  OUTCFG14  ======================================================== */
#define CM4TIMER_OUTCFG14_OUTCFG59_Pos    (24UL)                    /*!< OUTCFG59 (Bit 24)                                     */
#define CM4TIMER_OUTCFG14_OUTCFG59_Msk    (0x3f000000UL)            /*!< OUTCFG59 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG14_OUTCFG58_Pos    (16UL)                    /*!< OUTCFG58 (Bit 16)                                     */
#define CM4TIMER_OUTCFG14_OUTCFG58_Msk    (0x3f0000UL)              /*!< OUTCFG58 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG14_OUTCFG57_Pos    (8UL)                     /*!< OUTCFG57 (Bit 8)                                      */
#define CM4TIMER_OUTCFG14_OUTCFG57_Msk    (0x3f00UL)                /*!< OUTCFG57 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG14_OUTCFG56_Pos    (0UL)                     /*!< OUTCFG56 (Bit 0)                                      */
#define CM4TIMER_OUTCFG14_OUTCFG56_Msk    (0x3fUL)                  /*!< OUTCFG56 (Bitfield-Mask: 0x3f)                        */
/* =======================================================  OUTCFG15  ======================================================== */
#define CM4TIMER_OUTCFG15_OUTCFG63_Pos    (24UL)                    /*!< OUTCFG63 (Bit 24)                                     */
#define CM4TIMER_OUTCFG15_OUTCFG63_Msk    (0x3f000000UL)            /*!< OUTCFG63 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG15_OUTCFG62_Pos    (16UL)                    /*!< OUTCFG62 (Bit 16)                                     */
#define CM4TIMER_OUTCFG15_OUTCFG62_Msk    (0x3f0000UL)              /*!< OUTCFG62 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG15_OUTCFG61_Pos    (8UL)                     /*!< OUTCFG61 (Bit 8)                                      */
#define CM4TIMER_OUTCFG15_OUTCFG61_Msk    (0x3f00UL)                /*!< OUTCFG61 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG15_OUTCFG60_Pos    (0UL)                     /*!< OUTCFG60 (Bit 0)                                      */
#define CM4TIMER_OUTCFG15_OUTCFG60_Msk    (0x3fUL)                  /*!< OUTCFG60 (Bitfield-Mask: 0x3f)                        */
/* =======================================================  OUTCFG16  ======================================================== */
#define CM4TIMER_OUTCFG16_OUTCFG67_Pos    (24UL)                    /*!< OUTCFG67 (Bit 24)                                     */
#define CM4TIMER_OUTCFG16_OUTCFG67_Msk    (0x3f000000UL)            /*!< OUTCFG67 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG16_OUTCFG66_Pos    (16UL)                    /*!< OUTCFG66 (Bit 16)                                     */
#define CM4TIMER_OUTCFG16_OUTCFG66_Msk    (0x3f0000UL)              /*!< OUTCFG66 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG16_OUTCFG65_Pos    (8UL)                     /*!< OUTCFG65 (Bit 8)                                      */
#define CM4TIMER_OUTCFG16_OUTCFG65_Msk    (0x3f00UL)                /*!< OUTCFG65 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG16_OUTCFG64_Pos    (0UL)                     /*!< OUTCFG64 (Bit 0)                                      */
#define CM4TIMER_OUTCFG16_OUTCFG64_Msk    (0x3fUL)                  /*!< OUTCFG64 (Bitfield-Mask: 0x3f)                        */
/* =======================================================  OUTCFG17  ======================================================== */
#define CM4TIMER_OUTCFG17_OUTCFG71_Pos    (24UL)                    /*!< OUTCFG71 (Bit 24)                                     */
#define CM4TIMER_OUTCFG17_OUTCFG71_Msk    (0x3f000000UL)            /*!< OUTCFG71 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG17_OUTCFG70_Pos    (16UL)                    /*!< OUTCFG70 (Bit 16)                                     */
#define CM4TIMER_OUTCFG17_OUTCFG70_Msk    (0x3f0000UL)              /*!< OUTCFG70 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG17_OUTCFG69_Pos    (8UL)                     /*!< OUTCFG69 (Bit 8)                                      */
#define CM4TIMER_OUTCFG17_OUTCFG69_Msk    (0x3f00UL)                /*!< OUTCFG69 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG17_OUTCFG68_Pos    (0UL)                     /*!< OUTCFG68 (Bit 0)                                      */
#define CM4TIMER_OUTCFG17_OUTCFG68_Msk    (0x3fUL)                  /*!< OUTCFG68 (Bitfield-Mask: 0x3f)                        */
/* =======================================================  OUTCFG18  ======================================================== */
#define CM4TIMER_OUTCFG18_OUTCFG75_Pos    (24UL)                    /*!< OUTCFG75 (Bit 24)                                     */
#define CM4TIMER_OUTCFG18_OUTCFG75_Msk    (0x3f000000UL)            /*!< OUTCFG75 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG18_OUTCFG74_Pos    (16UL)                    /*!< OUTCFG74 (Bit 16)                                     */
#define CM4TIMER_OUTCFG18_OUTCFG74_Msk    (0x3f0000UL)              /*!< OUTCFG74 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG18_OUTCFG73_Pos    (8UL)                     /*!< OUTCFG73 (Bit 8)                                      */
#define CM4TIMER_OUTCFG18_OUTCFG73_Msk    (0x3f00UL)                /*!< OUTCFG73 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG18_OUTCFG72_Pos    (0UL)                     /*!< OUTCFG72 (Bit 0)                                      */
#define CM4TIMER_OUTCFG18_OUTCFG72_Msk    (0x3fUL)                  /*!< OUTCFG72 (Bitfield-Mask: 0x3f)                        */
/* =======================================================  OUTCFG19  ======================================================== */
#define CM4TIMER_OUTCFG19_OUTCFG79_Pos    (24UL)                    /*!< OUTCFG79 (Bit 24)                                     */
#define CM4TIMER_OUTCFG19_OUTCFG79_Msk    (0x3f000000UL)            /*!< OUTCFG79 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG19_OUTCFG78_Pos    (16UL)                    /*!< OUTCFG78 (Bit 16)                                     */
#define CM4TIMER_OUTCFG19_OUTCFG78_Msk    (0x3f0000UL)              /*!< OUTCFG78 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG19_OUTCFG77_Pos    (8UL)                     /*!< OUTCFG77 (Bit 8)                                      */
#define CM4TIMER_OUTCFG19_OUTCFG77_Msk    (0x3f00UL)                /*!< OUTCFG77 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG19_OUTCFG76_Pos    (0UL)                     /*!< OUTCFG76 (Bit 0)                                      */
#define CM4TIMER_OUTCFG19_OUTCFG76_Msk    (0x3fUL)                  /*!< OUTCFG76 (Bitfield-Mask: 0x3f)                        */
/* =======================================================  OUTCFG20  ======================================================== */
#define CM4TIMER_OUTCFG20_OUTCFG83_Pos    (24UL)                    /*!< OUTCFG83 (Bit 24)                                     */
#define CM4TIMER_OUTCFG20_OUTCFG83_Msk    (0x3f000000UL)            /*!< OUTCFG83 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG20_OUTCFG82_Pos    (16UL)                    /*!< OUTCFG82 (Bit 16)                                     */
#define CM4TIMER_OUTCFG20_OUTCFG82_Msk    (0x3f0000UL)              /*!< OUTCFG82 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG20_OUTCFG81_Pos    (8UL)                     /*!< OUTCFG81 (Bit 8)                                      */
#define CM4TIMER_OUTCFG20_OUTCFG81_Msk    (0x3f00UL)                /*!< OUTCFG81 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG20_OUTCFG80_Pos    (0UL)                     /*!< OUTCFG80 (Bit 0)                                      */
#define CM4TIMER_OUTCFG20_OUTCFG80_Msk    (0x3fUL)                  /*!< OUTCFG80 (Bitfield-Mask: 0x3f)                        */
/* =======================================================  OUTCFG21  ======================================================== */
#define CM4TIMER_OUTCFG21_OUTCFG87_Pos    (24UL)                    /*!< OUTCFG87 (Bit 24)                                     */
#define CM4TIMER_OUTCFG21_OUTCFG87_Msk    (0x3f000000UL)            /*!< OUTCFG87 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG21_OUTCFG86_Pos    (16UL)                    /*!< OUTCFG86 (Bit 16)                                     */
#define CM4TIMER_OUTCFG21_OUTCFG86_Msk    (0x3f0000UL)              /*!< OUTCFG86 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG21_OUTCFG85_Pos    (8UL)                     /*!< OUTCFG85 (Bit 8)                                      */
#define CM4TIMER_OUTCFG21_OUTCFG85_Msk    (0x3f00UL)                /*!< OUTCFG85 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG21_OUTCFG84_Pos    (0UL)                     /*!< OUTCFG84 (Bit 0)                                      */
#define CM4TIMER_OUTCFG21_OUTCFG84_Msk    (0x3fUL)                  /*!< OUTCFG84 (Bitfield-Mask: 0x3f)                        */
/* =======================================================  OUTCFG22  ======================================================== */
#define CM4TIMER_OUTCFG22_OUTCFG91_Pos    (24UL)                    /*!< OUTCFG91 (Bit 24)                                     */
#define CM4TIMER_OUTCFG22_OUTCFG91_Msk    (0x3f000000UL)            /*!< OUTCFG91 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG22_OUTCFG90_Pos    (16UL)                    /*!< OUTCFG90 (Bit 16)                                     */
#define CM4TIMER_OUTCFG22_OUTCFG90_Msk    (0x3f0000UL)              /*!< OUTCFG90 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG22_OUTCFG89_Pos    (8UL)                     /*!< OUTCFG89 (Bit 8)                                      */
#define CM4TIMER_OUTCFG22_OUTCFG89_Msk    (0x3f00UL)                /*!< OUTCFG89 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG22_OUTCFG88_Pos    (0UL)                     /*!< OUTCFG88 (Bit 0)                                      */
#define CM4TIMER_OUTCFG22_OUTCFG88_Msk    (0x3fUL)                  /*!< OUTCFG88 (Bitfield-Mask: 0x3f)                        */
/* =======================================================  OUTCFG23  ======================================================== */
#define CM4TIMER_OUTCFG23_OUTCFG95_Pos    (24UL)                    /*!< OUTCFG95 (Bit 24)                                     */
#define CM4TIMER_OUTCFG23_OUTCFG95_Msk    (0x3f000000UL)            /*!< OUTCFG95 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG23_OUTCFG94_Pos    (16UL)                    /*!< OUTCFG94 (Bit 16)                                     */
#define CM4TIMER_OUTCFG23_OUTCFG94_Msk    (0x3f0000UL)              /*!< OUTCFG94 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG23_OUTCFG93_Pos    (8UL)                     /*!< OUTCFG93 (Bit 8)                                      */
#define CM4TIMER_OUTCFG23_OUTCFG93_Msk    (0x3f00UL)                /*!< OUTCFG93 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG23_OUTCFG92_Pos    (0UL)                     /*!< OUTCFG92 (Bit 0)                                      */
#define CM4TIMER_OUTCFG23_OUTCFG92_Msk    (0x3fUL)                  /*!< OUTCFG92 (Bitfield-Mask: 0x3f)                        */
/* =======================================================  OUTCFG24  ======================================================== */
#define CM4TIMER_OUTCFG24_OUTCFG99_Pos    (24UL)                    /*!< OUTCFG99 (Bit 24)                                     */
#define CM4TIMER_OUTCFG24_OUTCFG99_Msk    (0x3f000000UL)            /*!< OUTCFG99 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG24_OUTCFG98_Pos    (16UL)                    /*!< OUTCFG98 (Bit 16)                                     */
#define CM4TIMER_OUTCFG24_OUTCFG98_Msk    (0x3f0000UL)              /*!< OUTCFG98 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG24_OUTCFG97_Pos    (8UL)                     /*!< OUTCFG97 (Bit 8)                                      */
#define CM4TIMER_OUTCFG24_OUTCFG97_Msk    (0x3f00UL)                /*!< OUTCFG97 (Bitfield-Mask: 0x3f)                        */
#define CM4TIMER_OUTCFG24_OUTCFG96_Pos    (0UL)                     /*!< OUTCFG96 (Bit 0)                                      */
#define CM4TIMER_OUTCFG24_OUTCFG96_Msk    (0x3fUL)                  /*!< OUTCFG96 (Bitfield-Mask: 0x3f)                        */
/* =======================================================  OUTCFG25  ======================================================== */
#define CM4TIMER_OUTCFG25_OUTCFG103_Pos   (24UL)                    /*!< OUTCFG103 (Bit 24)                                    */
#define CM4TIMER_OUTCFG25_OUTCFG103_Msk   (0x3f000000UL)            /*!< OUTCFG103 (Bitfield-Mask: 0x3f)                       */
#define CM4TIMER_OUTCFG25_OUTCFG102_Pos   (16UL)                    /*!< OUTCFG102 (Bit 16)                                    */
#define CM4TIMER_OUTCFG25_OUTCFG102_Msk   (0x3f0000UL)              /*!< OUTCFG102 (Bitfield-Mask: 0x3f)                       */
#define CM4TIMER_OUTCFG25_OUTCFG101_Pos   (8UL)                     /*!< OUTCFG101 (Bit 8)                                     */
#define CM4TIMER_OUTCFG25_OUTCFG101_Msk   (0x3f00UL)                /*!< OUTCFG101 (Bitfield-Mask: 0x3f)                       */
#define CM4TIMER_OUTCFG25_OUTCFG100_Pos   (0UL)                     /*!< OUTCFG100 (Bit 0)                                     */
#define CM4TIMER_OUTCFG25_OUTCFG100_Msk   (0x3fUL)                  /*!< OUTCFG100 (Bitfield-Mask: 0x3f)                       */
/* =======================================================  OUTCFG26  ======================================================== */
#define CM4TIMER_OUTCFG26_OUTCFG107_Pos   (24UL)                    /*!< OUTCFG107 (Bit 24)                                    */
#define CM4TIMER_OUTCFG26_OUTCFG107_Msk   (0x3f000000UL)            /*!< OUTCFG107 (Bitfield-Mask: 0x3f)                       */
#define CM4TIMER_OUTCFG26_OUTCFG106_Pos   (16UL)                    /*!< OUTCFG106 (Bit 16)                                    */
#define CM4TIMER_OUTCFG26_OUTCFG106_Msk   (0x3f0000UL)              /*!< OUTCFG106 (Bitfield-Mask: 0x3f)                       */
#define CM4TIMER_OUTCFG26_OUTCFG105_Pos   (8UL)                     /*!< OUTCFG105 (Bit 8)                                     */
#define CM4TIMER_OUTCFG26_OUTCFG105_Msk   (0x3f00UL)                /*!< OUTCFG105 (Bitfield-Mask: 0x3f)                       */
#define CM4TIMER_OUTCFG26_OUTCFG104_Pos   (0UL)                     /*!< OUTCFG104 (Bit 0)                                     */
#define CM4TIMER_OUTCFG26_OUTCFG104_Msk   (0x3fUL)                  /*!< OUTCFG104 (Bitfield-Mask: 0x3f)                       */
/* =======================================================  OUTCFG27  ======================================================== */
#define CM4TIMER_OUTCFG27_OUTCFG111_Pos   (24UL)                    /*!< OUTCFG111 (Bit 24)                                    */
#define CM4TIMER_OUTCFG27_OUTCFG111_Msk   (0x3f000000UL)            /*!< OUTCFG111 (Bitfield-Mask: 0x3f)                       */
#define CM4TIMER_OUTCFG27_OUTCFG110_Pos   (16UL)                    /*!< OUTCFG110 (Bit 16)                                    */
#define CM4TIMER_OUTCFG27_OUTCFG110_Msk   (0x3f0000UL)              /*!< OUTCFG110 (Bitfield-Mask: 0x3f)                       */
#define CM4TIMER_OUTCFG27_OUTCFG109_Pos   (8UL)                     /*!< OUTCFG109 (Bit 8)                                     */
#define CM4TIMER_OUTCFG27_OUTCFG109_Msk   (0x3f00UL)                /*!< OUTCFG109 (Bitfield-Mask: 0x3f)                       */
#define CM4TIMER_OUTCFG27_OUTCFG108_Pos   (0UL)                     /*!< OUTCFG108 (Bit 0)                                     */
#define CM4TIMER_OUTCFG27_OUTCFG108_Msk   (0x3fUL)                  /*!< OUTCFG108 (Bitfield-Mask: 0x3f)                       */
/* =======================================================  OUTCFG28  ======================================================== */
#define CM4TIMER_OUTCFG28_OUTCFG115_Pos   (24UL)                    /*!< OUTCFG115 (Bit 24)                                    */
#define CM4TIMER_OUTCFG28_OUTCFG115_Msk   (0x3f000000UL)            /*!< OUTCFG115 (Bitfield-Mask: 0x3f)                       */
#define CM4TIMER_OUTCFG28_OUTCFG114_Pos   (16UL)                    /*!< OUTCFG114 (Bit 16)                                    */
#define CM4TIMER_OUTCFG28_OUTCFG114_Msk   (0x3f0000UL)              /*!< OUTCFG114 (Bitfield-Mask: 0x3f)                       */
#define CM4TIMER_OUTCFG28_OUTCFG113_Pos   (8UL)                     /*!< OUTCFG113 (Bit 8)                                     */
#define CM4TIMER_OUTCFG28_OUTCFG113_Msk   (0x3f00UL)                /*!< OUTCFG113 (Bitfield-Mask: 0x3f)                       */
#define CM4TIMER_OUTCFG28_OUTCFG112_Pos   (0UL)                     /*!< OUTCFG112 (Bit 0)                                     */
#define CM4TIMER_OUTCFG28_OUTCFG112_Msk   (0x3fUL)                  /*!< OUTCFG112 (Bitfield-Mask: 0x3f)                       */
/* =======================================================  OUTCFG29  ======================================================== */
#define CM4TIMER_OUTCFG29_OUTCFG119_Pos   (24UL)                    /*!< OUTCFG119 (Bit 24)                                    */
#define CM4TIMER_OUTCFG29_OUTCFG119_Msk   (0x3f000000UL)            /*!< OUTCFG119 (Bitfield-Mask: 0x3f)                       */
#define CM4TIMER_OUTCFG29_OUTCFG118_Pos   (16UL)                    /*!< OUTCFG118 (Bit 16)                                    */
#define CM4TIMER_OUTCFG29_OUTCFG118_Msk   (0x3f0000UL)              /*!< OUTCFG118 (Bitfield-Mask: 0x3f)                       */
#define CM4TIMER_OUTCFG29_OUTCFG117_Pos   (8UL)                     /*!< OUTCFG117 (Bit 8)                                     */
#define CM4TIMER_OUTCFG29_OUTCFG117_Msk   (0x3f00UL)                /*!< OUTCFG117 (Bitfield-Mask: 0x3f)                       */
#define CM4TIMER_OUTCFG29_OUTCFG116_Pos   (0UL)                     /*!< OUTCFG116 (Bit 0)                                     */
#define CM4TIMER_OUTCFG29_OUTCFG116_Msk   (0x3fUL)                  /*!< OUTCFG116 (Bitfield-Mask: 0x3f)                       */
/* =========================================================  CTRL0  ========================================================= */
#define CM4TIMER_CTRL0_TMR0LMT_Pos        (24UL)                    /*!< TMR0LMT (Bit 24)                                      */
#define CM4TIMER_CTRL0_TMR0LMT_Msk        (0xff000000UL)            /*!< TMR0LMT (Bitfield-Mask: 0xff)                         */
#define CM4TIMER_CTRL0_TMR0TMODE_Pos      (16UL)                    /*!< TMR0TMODE (Bit 16)                                    */
#define CM4TIMER_CTRL0_TMR0TMODE_Msk      (0x30000UL)               /*!< TMR0TMODE (Bitfield-Mask: 0x03)                       */
#define CM4TIMER_CTRL0_TMR0CLK_Pos        (8UL)                     /*!< TMR0CLK (Bit 8)                                       */
#define CM4TIMER_CTRL0_TMR0CLK_Msk        (0xff00UL)                /*!< TMR0CLK (Bitfield-Mask: 0xff)                         */
#define CM4TIMER_CTRL0_TMR0FN_Pos         (4UL)                     /*!< TMR0FN (Bit 4)                                        */
#define CM4TIMER_CTRL0_TMR0FN_Msk         (0xf0UL)                  /*!< TMR0FN (Bitfield-Mask: 0x0f)                          */
#define CM4TIMER_CTRL0_TMR0POL1_Pos       (3UL)                     /*!< TMR0POL1 (Bit 3)                                      */
#define CM4TIMER_CTRL0_TMR0POL1_Msk       (0x8UL)                   /*!< TMR0POL1 (Bitfield-Mask: 0x01)                        */
#define CM4TIMER_CTRL0_TMR0POL0_Pos       (2UL)                     /*!< TMR0POL0 (Bit 2)                                      */
#define CM4TIMER_CTRL0_TMR0POL0_Msk       (0x4UL)                   /*!< TMR0POL0 (Bitfield-Mask: 0x01)                        */
#define CM4TIMER_CTRL0_TMR0CLR_Pos        (1UL)                     /*!< TMR0CLR (Bit 1)                                       */
#define CM4TIMER_CTRL0_TMR0CLR_Msk        (0x2UL)                   /*!< TMR0CLR (Bitfield-Mask: 0x01)                         */
#define CM4TIMER_CTRL0_TMR0EN_Pos         (0UL)                     /*!< TMR0EN (Bit 0)                                        */
#define CM4TIMER_CTRL0_TMR0EN_Msk         (0x1UL)                   /*!< TMR0EN (Bitfield-Mask: 0x01)                          */
/* ========================================================  TIMER0  ========================================================= */
#define CM4TIMER_TIMER0_TIMER0_Pos        (0UL)                     /*!< TIMER0 (Bit 0)                                        */
#define CM4TIMER_TIMER0_TIMER0_Msk        (0xffffffffUL)            /*!< TIMER0 (Bitfield-Mask: 0xffffffff)                    */
/* =======================================================  TMR0CMP0  ======================================================== */
#define CM4TIMER_TMR0CMP0_TMR0CMP0_Pos    (0UL)                     /*!< TMR0CMP0 (Bit 0)                                      */
#define CM4TIMER_TMR0CMP0_TMR0CMP0_Msk    (0xffffffffUL)            /*!< TMR0CMP0 (Bitfield-Mask: 0xffffffff)                  */
/* =======================================================  TMR0CMP1  ======================================================== */
#define CM4TIMER_TMR0CMP1_TMR0CMP1_Pos    (0UL)                     /*!< TMR0CMP1 (Bit 0)                                      */
#define CM4TIMER_TMR0CMP1_TMR0CMP1_Msk    (0xffffffffUL)            /*!< TMR0CMP1 (Bitfield-Mask: 0xffffffff)                  */
/* =========================================================  MODE0  ========================================================= */
#define CM4TIMER_MODE0_TMR0TRIGSEL_Pos    (8UL)                     /*!< TMR0TRIGSEL (Bit 8)                                   */
#define CM4TIMER_MODE0_TMR0TRIGSEL_Msk    (0xff00UL)                /*!< TMR0TRIGSEL (Bitfield-Mask: 0xff)                     */
/* ======================================================  TMR0LMTVAL  ======================================================= */
#define CM4TIMER_TMR0LMTVAL_TMR0LMTVAL_Pos (0UL)                    /*!< TMR0LMTVAL (Bit 0)                                    */
#define CM4TIMER_TMR0LMTVAL_TMR0LMTVAL_Msk (0xffUL)                 /*!< TMR0LMTVAL (Bitfield-Mask: 0xff)                      */
/* =========================================================  CTRL1  ========================================================= */
#define CM4TIMER_CTRL1_TMR1LMT_Pos        (24UL)                    /*!< TMR1LMT (Bit 24)                                      */
#define CM4TIMER_CTRL1_TMR1LMT_Msk        (0xff000000UL)            /*!< TMR1LMT (Bitfield-Mask: 0xff)                         */
#define CM4TIMER_CTRL1_TMR1TMODE_Pos      (16UL)                    /*!< TMR1TMODE (Bit 16)                                    */
#define CM4TIMER_CTRL1_TMR1TMODE_Msk      (0x30000UL)               /*!< TMR1TMODE (Bitfield-Mask: 0x03)                       */
#define CM4TIMER_CTRL1_TMR1CLK_Pos        (8UL)                     /*!< TMR1CLK (Bit 8)                                       */
#define CM4TIMER_CTRL1_TMR1CLK_Msk        (0xff00UL)                /*!< TMR1CLK (Bitfield-Mask: 0xff)                         */
#define CM4TIMER_CTRL1_TMR1FN_Pos         (4UL)                     /*!< TMR1FN (Bit 4)                                        */
#define CM4TIMER_CTRL1_TMR1FN_Msk         (0xf0UL)                  /*!< TMR1FN (Bitfield-Mask: 0x0f)                          */
#define CM4TIMER_CTRL1_TMR1POL1_Pos       (3UL)                     /*!< TMR1POL1 (Bit 3)                                      */
#define CM4TIMER_CTRL1_TMR1POL1_Msk       (0x8UL)                   /*!< TMR1POL1 (Bitfield-Mask: 0x01)                        */
#define CM4TIMER_CTRL1_TMR1POL0_Pos       (2UL)                     /*!< TMR1POL0 (Bit 2)                                      */
#define CM4TIMER_CTRL1_TMR1POL0_Msk       (0x4UL)                   /*!< TMR1POL0 (Bitfield-Mask: 0x01)                        */
#define CM4TIMER_CTRL1_TMR1CLR_Pos        (1UL)                     /*!< TMR1CLR (Bit 1)                                       */
#define CM4TIMER_CTRL1_TMR1CLR_Msk        (0x2UL)                   /*!< TMR1CLR (Bitfield-Mask: 0x01)                         */
#define CM4TIMER_CTRL1_TMR1EN_Pos         (0UL)                     /*!< TMR1EN (Bit 0)                                        */
#define CM4TIMER_CTRL1_TMR1EN_Msk         (0x1UL)                   /*!< TMR1EN (Bitfield-Mask: 0x01)                          */
/* ========================================================  TIMER1  ========================================================= */
#define CM4TIMER_TIMER1_TIMER1_Pos        (0UL)                     /*!< TIMER1 (Bit 0)                                        */
#define CM4TIMER_TIMER1_TIMER1_Msk        (0xffffffffUL)            /*!< TIMER1 (Bitfield-Mask: 0xffffffff)                    */
/* =======================================================  TMR1CMP0  ======================================================== */
#define CM4TIMER_TMR1CMP0_TMR1CMP0_Pos    (0UL)                     /*!< TMR1CMP0 (Bit 0)                                      */
#define CM4TIMER_TMR1CMP0_TMR1CMP0_Msk    (0xffffffffUL)            /*!< TMR1CMP0 (Bitfield-Mask: 0xffffffff)                  */
/* =======================================================  TMR1CMP1  ======================================================== */
#define CM4TIMER_TMR1CMP1_TMR1CMP1_Pos    (0UL)                     /*!< TMR1CMP1 (Bit 0)                                      */
#define CM4TIMER_TMR1CMP1_TMR1CMP1_Msk    (0xffffffffUL)            /*!< TMR1CMP1 (Bitfield-Mask: 0xffffffff)                  */
/* =========================================================  MODE1  ========================================================= */
#define CM4TIMER_MODE1_TMR1TRIGSEL_Pos    (8UL)                     /*!< TMR1TRIGSEL (Bit 8)                                   */
#define CM4TIMER_MODE1_TMR1TRIGSEL_Msk    (0xff00UL)                /*!< TMR1TRIGSEL (Bitfield-Mask: 0xff)                     */
/* ======================================================  TMR1LMTVAL  ======================================================= */
#define CM4TIMER_TMR1LMTVAL_TMR1LMTVAL_Pos (0UL)                    /*!< TMR1LMTVAL (Bit 0)                                    */
#define CM4TIMER_TMR1LMTVAL_TMR1LMTVAL_Msk (0xffUL)                 /*!< TMR1LMTVAL (Bitfield-Mask: 0xff)                      */
/* =========================================================  CTRL2  ========================================================= */
#define CM4TIMER_CTRL2_TMR2LMT_Pos        (24UL)                    /*!< TMR2LMT (Bit 24)                                      */
#define CM4TIMER_CTRL2_TMR2LMT_Msk        (0xff000000UL)            /*!< TMR2LMT (Bitfield-Mask: 0xff)                         */
#define CM4TIMER_CTRL2_TMR2TMODE_Pos      (16UL)                    /*!< TMR2TMODE (Bit 16)                                    */
#define CM4TIMER_CTRL2_TMR2TMODE_Msk      (0x30000UL)               /*!< TMR2TMODE (Bitfield-Mask: 0x03)                       */
#define CM4TIMER_CTRL2_TMR2CLK_Pos        (8UL)                     /*!< TMR2CLK (Bit 8)                                       */
#define CM4TIMER_CTRL2_TMR2CLK_Msk        (0xff00UL)                /*!< TMR2CLK (Bitfield-Mask: 0xff)                         */
#define CM4TIMER_CTRL2_TMR2FN_Pos         (4UL)                     /*!< TMR2FN (Bit 4)                                        */
#define CM4TIMER_CTRL2_TMR2FN_Msk         (0xf0UL)                  /*!< TMR2FN (Bitfield-Mask: 0x0f)                          */
#define CM4TIMER_CTRL2_TMR2POL1_Pos       (3UL)                     /*!< TMR2POL1 (Bit 3)                                      */
#define CM4TIMER_CTRL2_TMR2POL1_Msk       (0x8UL)                   /*!< TMR2POL1 (Bitfield-Mask: 0x01)                        */
#define CM4TIMER_CTRL2_TMR2POL0_Pos       (2UL)                     /*!< TMR2POL0 (Bit 2)                                      */
#define CM4TIMER_CTRL2_TMR2POL0_Msk       (0x4UL)                   /*!< TMR2POL0 (Bitfield-Mask: 0x01)                        */
#define CM4TIMER_CTRL2_TMR2CLR_Pos        (1UL)                     /*!< TMR2CLR (Bit 1)                                       */
#define CM4TIMER_CTRL2_TMR2CLR_Msk        (0x2UL)                   /*!< TMR2CLR (Bitfield-Mask: 0x01)                         */
#define CM4TIMER_CTRL2_TMR2EN_Pos         (0UL)                     /*!< TMR2EN (Bit 0)                                        */
#define CM4TIMER_CTRL2_TMR2EN_Msk         (0x1UL)                   /*!< TMR2EN (Bitfield-Mask: 0x01)                          */
/* ========================================================  TIMER2  ========================================================= */
#define CM4TIMER_TIMER2_TIMER2_Pos        (0UL)                     /*!< TIMER2 (Bit 0)                                        */
#define CM4TIMER_TIMER2_TIMER2_Msk        (0xffffffffUL)            /*!< TIMER2 (Bitfield-Mask: 0xffffffff)                    */
/* =======================================================  TMR2CMP0  ======================================================== */
#define CM4TIMER_TMR2CMP0_TMR2CMP0_Pos    (0UL)                     /*!< TMR2CMP0 (Bit 0)                                      */
#define CM4TIMER_TMR2CMP0_TMR2CMP0_Msk    (0xffffffffUL)            /*!< TMR2CMP0 (Bitfield-Mask: 0xffffffff)                  */
/* =======================================================  TMR2CMP1  ======================================================== */
#define CM4TIMER_TMR2CMP1_TMR2CMP1_Pos    (0UL)                     /*!< TMR2CMP1 (Bit 0)                                      */
#define CM4TIMER_TMR2CMP1_TMR2CMP1_Msk    (0xffffffffUL)            /*!< TMR2CMP1 (Bitfield-Mask: 0xffffffff)                  */
/* =========================================================  MODE2  ========================================================= */
#define CM4TIMER_MODE2_TMR2TRIGSEL_Pos    (8UL)                     /*!< TMR2TRIGSEL (Bit 8)                                   */
#define CM4TIMER_MODE2_TMR2TRIGSEL_Msk    (0xff00UL)                /*!< TMR2TRIGSEL (Bitfield-Mask: 0xff)                     */
/* ======================================================  TMR2LMTVAL  ======================================================= */
#define CM4TIMER_TMR2LMTVAL_TMR2LMTVAL_Pos (0UL)                    /*!< TMR2LMTVAL (Bit 0)                                    */
#define CM4TIMER_TMR2LMTVAL_TMR2LMTVAL_Msk (0xffUL)                 /*!< TMR2LMTVAL (Bitfield-Mask: 0xff)                      */
/* =========================================================  CTRL3  ========================================================= */
#define CM4TIMER_CTRL3_TMR3LMT_Pos        (24UL)                    /*!< TMR3LMT (Bit 24)                                      */
#define CM4TIMER_CTRL3_TMR3LMT_Msk        (0xff000000UL)            /*!< TMR3LMT (Bitfield-Mask: 0xff)                         */
#define CM4TIMER_CTRL3_TMR3TMODE_Pos      (16UL)                    /*!< TMR3TMODE (Bit 16)                                    */
#define CM4TIMER_CTRL3_TMR3TMODE_Msk      (0x30000UL)               /*!< TMR3TMODE (Bitfield-Mask: 0x03)                       */
#define CM4TIMER_CTRL3_TMR3CLK_Pos        (8UL)                     /*!< TMR3CLK (Bit 8)                                       */
#define CM4TIMER_CTRL3_TMR3CLK_Msk        (0xff00UL)                /*!< TMR3CLK (Bitfield-Mask: 0xff)                         */
#define CM4TIMER_CTRL3_TMR3FN_Pos         (4UL)                     /*!< TMR3FN (Bit 4)                                        */
#define CM4TIMER_CTRL3_TMR3FN_Msk         (0xf0UL)                  /*!< TMR3FN (Bitfield-Mask: 0x0f)                          */
#define CM4TIMER_CTRL3_TMR3POL1_Pos       (3UL)                     /*!< TMR3POL1 (Bit 3)                                      */
#define CM4TIMER_CTRL3_TMR3POL1_Msk       (0x8UL)                   /*!< TMR3POL1 (Bitfield-Mask: 0x01)                        */
#define CM4TIMER_CTRL3_TMR3POL0_Pos       (2UL)                     /*!< TMR3POL0 (Bit 2)                                      */
#define CM4TIMER_CTRL3_TMR3POL0_Msk       (0x4UL)                   /*!< TMR3POL0 (Bitfield-Mask: 0x01)                        */
#define CM4TIMER_CTRL3_TMR3CLR_Pos        (1UL)                     /*!< TMR3CLR (Bit 1)                                       */
#define CM4TIMER_CTRL3_TMR3CLR_Msk        (0x2UL)                   /*!< TMR3CLR (Bitfield-Mask: 0x01)                         */
#define CM4TIMER_CTRL3_TMR3EN_Pos         (0UL)                     /*!< TMR3EN (Bit 0)                                        */
#define CM4TIMER_CTRL3_TMR3EN_Msk         (0x1UL)                   /*!< TMR3EN (Bitfield-Mask: 0x01)                          */
/* ========================================================  TIMER3  ========================================================= */
#define CM4TIMER_TIMER3_TIMER3_Pos        (0UL)                     /*!< TIMER3 (Bit 0)                                        */
#define CM4TIMER_TIMER3_TIMER3_Msk        (0xffffffffUL)            /*!< TIMER3 (Bitfield-Mask: 0xffffffff)                    */
/* =======================================================  TMR3CMP0  ======================================================== */
#define CM4TIMER_TMR3CMP0_TMR3CMP0_Pos    (0UL)                     /*!< TMR3CMP0 (Bit 0)                                      */
#define CM4TIMER_TMR3CMP0_TMR3CMP0_Msk    (0xffffffffUL)            /*!< TMR3CMP0 (Bitfield-Mask: 0xffffffff)                  */
/* =======================================================  TMR3CMP1  ======================================================== */
#define CM4TIMER_TMR3CMP1_TMR3CMP1_Pos    (0UL)                     /*!< TMR3CMP1 (Bit 0)                                      */
#define CM4TIMER_TMR3CMP1_TMR3CMP1_Msk    (0xffffffffUL)            /*!< TMR3CMP1 (Bitfield-Mask: 0xffffffff)                  */
/* =========================================================  MODE3  ========================================================= */
#define CM4TIMER_MODE3_TMR3TRIGSEL_Pos    (8UL)                     /*!< TMR3TRIGSEL (Bit 8)                                   */
#define CM4TIMER_MODE3_TMR3TRIGSEL_Msk    (0xff00UL)                /*!< TMR3TRIGSEL (Bitfield-Mask: 0xff)                     */
/* ======================================================  TMR3LMTVAL  ======================================================= */
#define CM4TIMER_TMR3LMTVAL_TMR3LMTVAL_Pos (0UL)                    /*!< TMR3LMTVAL (Bit 0)                                    */
#define CM4TIMER_TMR3LMTVAL_TMR3LMTVAL_Msk (0xffUL)                 /*!< TMR3LMTVAL (Bitfield-Mask: 0xff)                      */
/* ======================================================  TIMERSPARES  ====================================================== */
#define CM4TIMER_TIMERSPARES_TMRSPARES_Pos (0UL)                    /*!< TMRSPARES (Bit 0)                                     */
#define CM4TIMER_TIMERSPARES_TMRSPARES_Msk (0xffffffffUL)           /*!< TMRSPARES (Bitfield-Mask: 0xffffffff)                 */


/* =========================================================================================================================== */
/* ================                                          CM4WDT                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  CFG  ========================================================== */
#define CM4WDT_CFG_CLKSEL_Pos             (24UL)                    /*!< CLKSEL (Bit 24)                                       */
#define CM4WDT_CFG_CLKSEL_Msk             (0x7000000UL)             /*!< CLKSEL (Bitfield-Mask: 0x07)                          */
#define CM4WDT_CFG_INTVAL_Pos             (16UL)                    /*!< INTVAL (Bit 16)                                       */
#define CM4WDT_CFG_INTVAL_Msk             (0xff0000UL)              /*!< INTVAL (Bitfield-Mask: 0xff)                          */
#define CM4WDT_CFG_RESVAL_Pos             (8UL)                     /*!< RESVAL (Bit 8)                                        */
#define CM4WDT_CFG_RESVAL_Msk             (0xff00UL)                /*!< RESVAL (Bitfield-Mask: 0xff)                          */
#define CM4WDT_CFG_RESEN_Pos              (2UL)                     /*!< RESEN (Bit 2)                                         */
#define CM4WDT_CFG_RESEN_Msk              (0x4UL)                   /*!< RESEN (Bitfield-Mask: 0x01)                           */
#define CM4WDT_CFG_INTEN_Pos              (1UL)                     /*!< INTEN (Bit 1)                                         */
#define CM4WDT_CFG_INTEN_Msk              (0x2UL)                   /*!< INTEN (Bitfield-Mask: 0x01)                           */
#define CM4WDT_CFG_WDTEN_Pos              (0UL)                     /*!< WDTEN (Bit 0)                                         */
#define CM4WDT_CFG_WDTEN_Msk              (0x1UL)                   /*!< WDTEN (Bitfield-Mask: 0x01)                           */
/* =========================================================  RSTRT  ========================================================= */
#define CM4WDT_RSTRT_RSTRT_Pos            (0UL)                     /*!< RSTRT (Bit 0)                                         */
#define CM4WDT_RSTRT_RSTRT_Msk            (0xffUL)                  /*!< RSTRT (Bitfield-Mask: 0xff)                           */
/* =========================================================  LOCK  ========================================================== */
#define CM4WDT_LOCK_LOCK_Pos              (0UL)                     /*!< LOCK (Bit 0)                                          */
#define CM4WDT_LOCK_LOCK_Msk              (0xffUL)                  /*!< LOCK (Bitfield-Mask: 0xff)                            */
/* =========================================================  COUNT  ========================================================= */
#define CM4WDT_COUNT_COUNT_Pos            (0UL)                     /*!< COUNT (Bit 0)                                         */
#define CM4WDT_COUNT_COUNT_Msk            (0xffUL)                  /*!< COUNT (Bitfield-Mask: 0xff)                           */
/* =======================================================  WDTIEREN  ======================================================== */
#define CM4WDT_WDTIEREN_WDTINT_Pos        (0UL)                     /*!< WDTINT (Bit 0)                                        */
#define CM4WDT_WDTIEREN_WDTINT_Msk        (0x1UL)                   /*!< WDTINT (Bitfield-Mask: 0x01)                          */
/* ======================================================  WDTIERSTAT  ======================================================= */
#define CM4WDT_WDTIERSTAT_WDTINT_Pos      (0UL)                     /*!< WDTINT (Bit 0)                                        */
#define CM4WDT_WDTIERSTAT_WDTINT_Msk      (0x1UL)                   /*!< WDTINT (Bitfield-Mask: 0x01)                          */
/* =======================================================  WDTIERCLR  ======================================================= */
#define CM4WDT_WDTIERCLR_WDTINT_Pos       (0UL)                     /*!< WDTINT (Bit 0)                                        */
#define CM4WDT_WDTIERCLR_WDTINT_Msk       (0x1UL)                   /*!< WDTINT (Bitfield-Mask: 0x01)                          */
/* =======================================================  WDTIERSET  ======================================================= */
#define CM4WDT_WDTIERSET_WDTINT_Pos       (0UL)                     /*!< WDTINT (Bit 0)                                        */
#define CM4WDT_WDTIERSET_WDTINT_Msk       (0x1UL)                   /*!< WDTINT (Bitfield-Mask: 0x01)                          */

/** @} */ /* End of group PosMask_peripherals */


/* =========================================================================================================================== */
/* ================                           Enumerated Values Peripheral Section                            ================ */
/* =========================================================================================================================== */


/** @addtogroup EnumValue_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                          CM4IPC                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  M2DDATA  ======================================================== */
/* ========================================================  D2MDATA  ======================================================== */
/* ========================================================  STATUS  ========================================================= */
/* =======================================================  M2DERROR  ======================================================== */
/* =========================================================  M2DIT  ========================================================= */
/* =========================================================  M2DIS  ========================================================= */
/* =========================================================  M2DIE  ========================================================= */
/* =========================================================  D2MIT  ========================================================= */
/* =========================================================  D2MIS  ========================================================= */
/* =========================================================  D2MIE  ========================================================= */


/* =========================================================================================================================== */
/* ================                                        CM4MCUCTRL                                         ================ */
/* =========================================================================================================================== */

/* ========================================================  OBSSEL  ========================================================= */
/* ===========================================  CM4MCUCTRL OBSSEL OBSSEL1 [6..10]  =========================================== */
typedef enum {                                  /*!< CM4MCUCTRL_OBSSEL_OBSSEL1                                                 */
  CM4MCUCTRL_OBSSEL_OBSSEL1_BTDBG01    = 0,     /*!< BTDBG01 : bt_dbg0[7:0] and bt_dbg1[7:0] from RW-MM                        */
  CM4MCUCTRL_OBSSEL_OBSSEL1_BTDBG23    = 1,     /*!< BTDBG23 : bt_dbg2[7:0] and bt_dbg3[7:0] from RW-MM                        */
  CM4MCUCTRL_OBSSEL_OBSSEL1_MAC154DBG01 = 2,    /*!< MAC154DBG01 : mac154_dbg0[7:0] and mac154_dbg1[7:0] from RW-MM            */
  CM4MCUCTRL_OBSSEL_OBSSEL1_MAC154DBG23 = 3,    /*!< MAC154DBG23 : mac154_dbg2[7:0] and mac154_dbg3[7:0] from RW-MM            */
  CM4MCUCTRL_OBSSEL_OBSSEL1_BLEDBG01   = 4,     /*!< BLEDBG01 : ble_dbg0[7:0] and ble_dbg1[7:0] from RW-MM                     */
  CM4MCUCTRL_OBSSEL_OBSSEL1_BLEDBG23   = 5,     /*!< BLEDBG23 : ble_dbg2[7:0] and ble_dbg3[7:0] from RW-MM                     */
  CM4MCUCTRL_OBSSEL_OBSSEL1_MMDBG01    = 6,     /*!< MMDBG01 : mm_dbg0[7:0] and mm_dbg1[7:0] from RW-MM                        */
  CM4MCUCTRL_OBSSEL_OBSSEL1_MMDBG23    = 7,     /*!< MMDBG23 : mm_dbg2[7:0] and mm_dbg3[7:0] from RW-MM                        */
  CM4MCUCTRL_OBSSEL_OBSSEL1_GPIO0      = 8,     /*!< GPIO0 : GPIO_OUT[7:0] from IcyTRX                                         */
  CM4MCUCTRL_OBSSEL_OBSSEL1_GPIO1      = 9,     /*!< GPIO1 : GPIO_OUT[15:8] from IcyTRX                                        */
  CM4MCUCTRL_OBSSEL_OBSSEL1_PMUSTATE   = 10,    /*!< PMUSTATE : pmu_state[3:0] from Radio PMU                                  */
  CM4MCUCTRL_OBSSEL_OBSSEL1_CM4TIMINGBT = 11,   /*!< CM4TIMINGBT : CM4 Timing (8-bits) and bt_dbg0[7:0]                        */
  CM4MCUCTRL_OBSSEL_OBSSEL1_CM4TIMINGBLE = 12,  /*!< CM4TIMINGBLE : CM4 Timing (8-bits) and ble_dbg0[7:0]                      */
  CM4MCUCTRL_OBSSEL_OBSSEL1_CM4TIMINGMAC154 = 13,/*!< CM4TIMINGMAC154 : CM4 Timing (8-bits) and mac154_dbg0[7:0]               */
  CM4MCUCTRL_OBSSEL_OBSSEL1_CM4TIMINGMM = 14,   /*!< CM4TIMINGMM : CM4 Timing (8-bits) and mm_dbg0[7:0]                        */
} CM4MCUCTRL_OBSSEL_OBSSEL1_Enum;

/* ===========================================  CM4MCUCTRL OBSSEL OBSSEL0 [1..5]  ============================================ */
typedef enum {                                  /*!< CM4MCUCTRL_OBSSEL_OBSSEL0                                                 */
  CM4MCUCTRL_OBSSEL_OBSSEL0_BTDBG01    = 0,     /*!< BTDBG01 : bt_dbg0[7:0] and bt_dbg1[7:0] from RW-MM                        */
  CM4MCUCTRL_OBSSEL_OBSSEL0_BTDBG23    = 1,     /*!< BTDBG23 : bt_dbg2[7:0] and bt_dbg3[7:0] from RW-MM                        */
  CM4MCUCTRL_OBSSEL_OBSSEL0_MAC154DBG01 = 2,    /*!< MAC154DBG01 : mac154_dbg0[7:0] and mac154_dbg1[7:0] from RW-MM            */
  CM4MCUCTRL_OBSSEL_OBSSEL0_MAC154DBG23 = 3,    /*!< MAC154DBG23 : mac154_dbg2[7:0] and mac154_dbg3[7:0] from RW-MM            */
  CM4MCUCTRL_OBSSEL_OBSSEL0_BLEDBG01   = 4,     /*!< BLEDBG01 : ble_dbg0[7:0] and ble_dbg1[7:0] from RW-MM                     */
  CM4MCUCTRL_OBSSEL_OBSSEL0_BLEDBG23   = 5,     /*!< BLEDBG23 : ble_dbg2[7:0] and ble_dbg3[7:0] from RW-MM                     */
  CM4MCUCTRL_OBSSEL_OBSSEL0_MMDBG01    = 6,     /*!< MMDBG01 : mm_dbg0[7:0] and mm_dbg1[7:0] from RW-MM                        */
  CM4MCUCTRL_OBSSEL_OBSSEL0_MMDBG23    = 7,     /*!< MMDBG23 : mm_dbg2[7:0] and mm_dbg3[7:0] from RW-MM                        */
  CM4MCUCTRL_OBSSEL_OBSSEL0_GPIO0      = 8,     /*!< GPIO0 : GPIO_OUT[7:0] from IcyTRX                                         */
  CM4MCUCTRL_OBSSEL_OBSSEL0_GPIO1      = 9,     /*!< GPIO1 : GPIO_OUT[15:8] from IcyTRX                                        */
  CM4MCUCTRL_OBSSEL_OBSSEL0_PMUSTATE   = 10,    /*!< PMUSTATE : pmu_state[3:0] from Radio PMU                                  */
  CM4MCUCTRL_OBSSEL_OBSSEL0_CM4TIMINGBT = 11,   /*!< CM4TIMINGBT : CM4 Timing (8-bits) and bt_dbg0[7:0]                        */
  CM4MCUCTRL_OBSSEL_OBSSEL0_CM4TIMINGBLE = 12,  /*!< CM4TIMINGBLE : CM4 Timing (8-bits) and ble_dbg0[7:0]                      */
  CM4MCUCTRL_OBSSEL_OBSSEL0_CM4TIMINGMAC154 = 13,/*!< CM4TIMINGMAC154 : CM4 Timing (8-bits) and mac154_dbg0[7:0]               */
  CM4MCUCTRL_OBSSEL_OBSSEL0_CM4TIMINGMM = 14,   /*!< CM4TIMINGMM : CM4 Timing (8-bits) and mm_dbg0[7:0]                        */
} CM4MCUCTRL_OBSSEL_OBSSEL0_Enum;

/* ======================================================  CQFLAGSOUT  ======================================================= */
/* =======================================================  CQFLAGSIN  ======================================================= */
/* =======================================================  TCMWPROT  ======================================================== */
/* =======================================================  TCMRPROT  ======================================================== */
/* ======================================================  CPUPWRCTRL  ======================================================= */
/* =========================================  CM4MCUCTRL CPUPWRCTRL CM4NVMEN [6..6]  ========================================= */
typedef enum {                                  /*!< CM4MCUCTRL_CPUPWRCTRL_CM4NVMEN                                            */
  CM4MCUCTRL_CPUPWRCTRL_CM4NVMEN_EN    = 1,     /*!< EN : ENABLE                                                               */
  CM4MCUCTRL_CPUPWRCTRL_CM4NVMEN_DIS   = 0,     /*!< DIS : DISABLE                                                             */
} CM4MCUCTRL_CPUPWRCTRL_CM4NVMEN_Enum;

/* ==========================================  CM4MCUCTRL CPUPWRCTRL PMUEN [5..5]  =========================================== */
typedef enum {                                  /*!< CM4MCUCTRL_CPUPWRCTRL_PMUEN                                               */
  CM4MCUCTRL_CPUPWRCTRL_PMUEN_EN       = 1,     /*!< EN : ENABLE                                                               */
  CM4MCUCTRL_CPUPWRCTRL_PMUEN_DIS      = 0,     /*!< DIS : DISABLE                                                             */
} CM4MCUCTRL_CPUPWRCTRL_PMUEN_Enum;

/* =======================================  CM4MCUCTRL CPUPWRCTRL CPUCLKOVEREN [4..4]  ======================================= */
typedef enum {                                  /*!< CM4MCUCTRL_CPUPWRCTRL_CPUCLKOVEREN                                        */
  CM4MCUCTRL_CPUPWRCTRL_CPUCLKOVEREN_EN = 1,    /*!< EN : ENABLE                                                               */
  CM4MCUCTRL_CPUPWRCTRL_CPUCLKOVEREN_DIS = 0,   /*!< DIS : DISABLE                                                             */
} CM4MCUCTRL_CPUPWRCTRL_CPUCLKOVEREN_Enum;

/* ========================================  CM4MCUCTRL CPUPWRCTRL FCLKSTATE [3..3]  ========================================= */
typedef enum {                                  /*!< CM4MCUCTRL_CPUPWRCTRL_FCLKSTATE                                           */
  CM4MCUCTRL_CPUPWRCTRL_FCLKSTATE_ON   = 1,     /*!< ON : CPU CLOCK IS RUNNING (ON).                                           */
  CM4MCUCTRL_CPUPWRCTRL_FCLKSTATE_OFF  = 0,     /*!< OFF : CPU CLOCK IS NOT RUNNING (OFF).                                     */
} CM4MCUCTRL_CPUPWRCTRL_FCLKSTATE_Enum;

/* =======================================  CM4MCUCTRL CPUPWRCTRL PMUCLKSTATE [2..2]  ======================================== */
typedef enum {                                  /*!< CM4MCUCTRL_CPUPWRCTRL_PMUCLKSTATE                                         */
  CM4MCUCTRL_CPUPWRCTRL_PMUCLKSTATE_ON = 1,     /*!< ON : PMU CLOCK IS RUNNING (ON).                                           */
  CM4MCUCTRL_CPUPWRCTRL_PMUCLKSTATE_OFF = 0,    /*!< OFF : PMU CLOCK IS NOT RUNNING (OFF).                                     */
} CM4MCUCTRL_CPUPWRCTRL_PMUCLKSTATE_Enum;

/* ========================================  CM4MCUCTRL CPUPWRCTRL SLEEPMODE [1..1]  ========================================= */
typedef enum {                                  /*!< CM4MCUCTRL_CPUPWRCTRL_SLEEPMODE                                           */
  CM4MCUCTRL_CPUPWRCTRL_SLEEPMODE_ARMSLEEP = 1, /*!< ARMSLEEP : Indicated CM4 is in ARM light sleep with CLKIN/FCLK
                                                     enabled                                                                   */
  CM4MCUCTRL_CPUPWRCTRL_SLEEPMODE_AMBIQSLEEP = 0,/*!< AMBIQSLEEP : Indicated CM4 is in AMBIQ light sleep with CLKIN/FCLK
                                                     disabled                                                                  */
} CM4MCUCTRL_CPUPWRCTRL_SLEEPMODE_Enum;

/* ======================================================  COREPWROFF  ======================================================= */
/* ========================================  CM4MCUCTRL COREPWROFF CPUPWROFF [0..0]  ========================================= */
typedef enum {                                  /*!< CM4MCUCTRL_COREPWROFF_CPUPWROFF                                           */
  CM4MCUCTRL_COREPWROFF_CPUPWROFF_OFF  = 1,     /*!< OFF : POWER OFF CM4                                                       */
} CM4MCUCTRL_COREPWROFF_CPUPWROFF_Enum;

/* ======================================================  CM4TIMING0  ======================================================= */
/* ======================================================  CM4TIMING1  ======================================================= */
/* ======================================================  CM4TIMING2  ======================================================= */
/* ======================================================  CM4TIMING3  ======================================================= */
/* ======================================================  CM4TIMING4  ======================================================= */
/* ======================================================  CM4TIMING5  ======================================================= */
/* ======================================================  CM4TIMING6  ======================================================= */
/* ======================================================  CM4TIMING7  ======================================================= */
/* ====================================================  CM4TIMINGENABLE  ==================================================== */
/* =========================================================  INTEN  ========================================================= */
/* ========================================================  INTSTAT  ======================================================== */
/* ========================================================  INTCLR  ========================================================= */
/* ========================================================  INTSET  ========================================================= */


/* =========================================================================================================================== */
/* ================                                         CM4RADIO                                          ================ */
/* =========================================================================================================================== */

/* ======================================================  RCLKCONTROL  ====================================================== */
/* =========================================  CM4RADIO RCLKCONTROL TPIUCLKEN [6..6]  ========================================= */
typedef enum {                                  /*!< CM4RADIO_RCLKCONTROL_TPIUCLKEN                                            */
  CM4RADIO_RCLKCONTROL_TPIUCLKEN_DISABLE = 0,   /*!< DISABLE : Disable TPIU clock                                              */
  CM4RADIO_RCLKCONTROL_TPIUCLKEN_ENABLE = 1,    /*!< ENABLE : Enable TPIU clock                                                */
} CM4RADIO_RCLKCONTROL_TPIUCLKEN_Enum;

/* ========================================  CM4RADIO RCLKCONTROL TPIUCLKSEL [4..5]  ========================================= */
typedef enum {                                  /*!< CM4RADIO_RCLKCONTROL_TPIUCLKSEL                                           */
  CM4RADIO_RCLKCONTROL_TPIUCLKSEL_HFRC_24MHz = 0,/*!< HFRC_24MHz : Select 24MHz HFRC clock                                     */
  CM4RADIO_RCLKCONTROL_TPIUCLKSEL_HFRC_12MHz = 1,/*!< HFRC_12MHz : Select 12MHz HFRC clock                                     */
  CM4RADIO_RCLKCONTROL_TPIUCLKSEL_HFRC_3MHz = 2,/*!< HFRC_3MHz : Select 3MHz HFRC clock                                        */
  CM4RADIO_RCLKCONTROL_TPIUCLKSEL_HFRC_1_5MHz = 3,/*!< HFRC_1_5MHz : Select 1.5MHz HFRC clock                                  */
} CM4RADIO_RCLKCONTROL_TPIUCLKSEL_Enum;

/* =========================================  CM4RADIO RCLKCONTROL MCUCLKSEL [3..3]  ========================================= */
typedef enum {                                  /*!< CM4RADIO_RCLKCONTROL_MCUCLKSEL                                            */
  CM4RADIO_RCLKCONTROL_MCUCLKSEL_HFRC_96MHz = 0,/*!< HFRC_96MHz : Select 96MHz HFRC clock                                      */
  CM4RADIO_RCLKCONTROL_MCUCLKSEL_HFRC_48MHz = 1,/*!< HFRC_48MHz : Select 48MHz HFRC clock                                      */
} CM4RADIO_RCLKCONTROL_MCUCLKSEL_Enum;

/* =======================================  CM4RADIO RCLKCONTROL BBCLKOVERRIDE [2..2]  ======================================= */
typedef enum {                                  /*!< CM4RADIO_RCLKCONTROL_BBCLKOVERRIDE                                        */
  CM4RADIO_RCLKCONTROL_BBCLKOVERRIDE_NORMALOP = 0,/*!< NORMALOP : Normal operation                                             */
  CM4RADIO_RCLKCONTROL_BBCLKOVERRIDE_ALWAYSON = 1,/*!< ALWAYSON : Baseband master clock always on                              */
} CM4RADIO_RCLKCONTROL_BBCLKOVERRIDE_Enum;

/* =========================================  CM4RADIO RCLKCONTROL BBCLKSEL [0..1]  ========================================== */
typedef enum {                                  /*!< CM4RADIO_RCLKCONTROL_BBCLKSEL                                             */
  CM4RADIO_RCLKCONTROL_BBCLKSEL_HFRC_12MHz = 0, /*!< HFRC_12MHz : Select 12MHz HFRC clock                                      */
  CM4RADIO_RCLKCONTROL_BBCLKSEL_HFRC_24MHz = 1, /*!< HFRC_24MHz : Select 24MHz HFRC clock                                      */
  CM4RADIO_RCLKCONTROL_BBCLKSEL_RF_XTAL_12MHz = 2,/*!< RF_XTAL_12MHz : Select 12MHz RF XTAL clock                              */
  CM4RADIO_RCLKCONTROL_BBCLKSEL_RF_XTAL_24MHz = 3,/*!< RF_XTAL_24MHz : Select 24MHz RF XTAL clock                              */
} CM4RADIO_RCLKCONTROL_BBCLKSEL_Enum;

/* =======================================================  RCONTROL  ======================================================== */
/* ===========================================  CM4RADIO RCONTROL OSCEN [26..26]  ============================================ */
typedef enum {                                  /*!< CM4RADIO_RCONTROL_OSCEN                                                   */
  CM4RADIO_RCONTROL_OSCEN_OFF          = 0,     /*!< OFF : HW controls the RF XTAL oscillator                                  */
  CM4RADIO_RCONTROL_OSCEN_ON           = 1,     /*!< ON : RF XTAL oscillator is turned on                                      */
} CM4RADIO_RCONTROL_OSCEN_Enum;

/* =======================================================  BBCONTROL  ======================================================= */
/* ==========================================  CM4RADIO BBCONTROL WAKEUPREQ [0..0]  ========================================== */
typedef enum {                                  /*!< CM4RADIO_BBCONTROL_WAKEUPREQ                                              */
  CM4RADIO_BBCONTROL_WAKEUPREQ_OFF     = 0,     /*!< OFF : Normal operation                                                    */
  CM4RADIO_BBCONTROL_WAKEUPREQ_WAKEUP  = 1,     /*!< WAKEUP : Request wakeup                                                   */
} CM4RADIO_BBCONTROL_WAKEUPREQ_Enum;

/* =======================================================  NPCONTROL  ======================================================= */
/* =========================================  CM4RADIO NPCONTROL NPSWRSTDBG [0..0]  ========================================== */
typedef enum {                                  /*!< CM4RADIO_NPCONTROL_NPSWRSTDBG                                             */
  CM4RADIO_NPCONTROL_NPSWRSTDBG_NORMALOP = 0,   /*!< NORMALOP : Normal operation                                               */
  CM4RADIO_NPCONTROL_NPSWRSTDBG_RESET  = 1,     /*!< RESET : Hold CM4 DEBUG feature in reset                                   */
} CM4RADIO_NPCONTROL_NPSWRSTDBG_Enum;

/* =======================================================  RADIOSTAT  ======================================================= */
/* ========================================================  NPSWPOR  ======================================================== */
/* ==========================================  CM4RADIO NPSWPOR NPSWPORKEY [0..7]  =========================================== */
typedef enum {                                  /*!< CM4RADIO_NPSWPOR_NPSWPORKEY                                               */
  CM4RADIO_NPSWPOR_NPSWPORKEY_KEYVALUE = 212,   /*!< KEYVALUE : Writing 0xD4 key value generates a CM4 software POR
                                                     reset                                                                     */
  CM4RADIO_NPSWPOR_NPSWPORKEY_DEFAULT  = 0,     /*!< DEFAULT : Default value                                                   */
} CM4RADIO_NPSWPOR_NPSWPORKEY_Enum;

/* =========================================================  RTUNE  ========================================================= */
/* ========================================================  DBGCTRL  ======================================================== */
/* =============================================  CM4RADIO DBGCTRL OBSEN [4..4]  ============================================= */
typedef enum {                                  /*!< CM4RADIO_DBGCTRL_OBSEN                                                    */
  CM4RADIO_DBGCTRL_OBSEN_DISABLE       = 0,     /*!< DISABLE : Disable observe bus                                             */
  CM4RADIO_DBGCTRL_OBSEN_ENABLE        = 1,     /*!< ENABLE : Enable observe bus                                               */
} CM4RADIO_DBGCTRL_OBSEN_Enum;

/* ============================================  CM4RADIO DBGCTRL OBSSEL [0..3]  ============================================= */
typedef enum {                                  /*!< CM4RADIO_DBGCTRL_OBSSEL                                                   */
  CM4RADIO_DBGCTRL_OBSSEL_BTLSB        = 0,     /*!< BTLSB : bt_dbg0[7:0] and bt_dbg1[7:0] from RW-MM                          */
  CM4RADIO_DBGCTRL_OBSSEL_BTMSB        = 1,     /*!< BTMSB : bt_dbg2[7:0] and bt_dbg3[7:0] from RW-MM                          */
  CM4RADIO_DBGCTRL_OBSSEL_MAC154LSB    = 2,     /*!< MAC154LSB : mac154_dbg0[7:0] and mac154_dbg1[7:0] from RW-MM              */
  CM4RADIO_DBGCTRL_OBSSEL_MAC154MSB    = 3,     /*!< MAC154MSB : mac154_dbg2[7:0] and mac154_dbg3[7:0] from RW-MM              */
  CM4RADIO_DBGCTRL_OBSSEL_BLELSB       = 4,     /*!< BLELSB : ble_dbg0[7:0] and ble_dbg1[7:0] from RW-MM                       */
  CM4RADIO_DBGCTRL_OBSSEL_BLEMSB       = 5,     /*!< BLEMSB : ble_dbg2[7:0] and ble_dbg3[7:0] from RW-MM                       */
  CM4RADIO_DBGCTRL_OBSSEL_MMLSB        = 6,     /*!< MMLSB : mm_dbg0[7:0] and mm_dbg1[7:0] from RW-MM                          */
  CM4RADIO_DBGCTRL_OBSSEL_MMMSB        = 7,     /*!< MMMSB : mm_dbg2[7:0] and mm_dbg3[7:0] from RW-MM                          */
  CM4RADIO_DBGCTRL_OBSSEL_ICYTRX       = 8,     /*!< ICYTRX : gpio_out[9:0] from IcyTRX-DM                                     */
  CM4RADIO_DBGCTRL_OBSSEL_RADIOPMU     = 9,     /*!< RADIOPMU : pmu_state[3:0] from Radio PMU                                  */
  CM4RADIO_DBGCTRL_OBSSEL_CM4BT        = 10,    /*!< CM4BT : CM4 timing (8-bits) and bt_dbg0[7:0]                              */
  CM4RADIO_DBGCTRL_OBSSEL_CM4BLE       = 11,    /*!< CM4BLE : CM4 timing (8-bits) and ble_dbg0[7:0]                            */
  CM4RADIO_DBGCTRL_OBSSEL_CM4MAC154    = 12,    /*!< CM4MAC154 : CM4 timing (8-bits) and mac154_dbg0[7:0]                      */
  CM4RADIO_DBGCTRL_OBSSEL_CM4MM        = 13,    /*!< CM4MM : CM4 timing (8-bits) and mm_dbg0[7:0]                              */
} CM4RADIO_DBGCTRL_OBSSEL_Enum;

/* =====================================================  WLANCOEXCTRL  ====================================================== */
/* ======================================================  WCICOEXCTRL  ====================================================== */
/* =======================================  CM4RADIO WCICOEXCTRL WCICOEXIFSEL [0..1]  ======================================== */
typedef enum {                                  /*!< CM4RADIO_WCICOEXCTRL_WCICOEXIFSEL                                         */
  CM4RADIO_WCICOEXCTRL_WCICOEXIFSEL_NONE = 0,   /*!< NONE : WCI COEX interface not enabled                                     */
  CM4RADIO_WCICOEXCTRL_WCICOEXIFSEL_WCI1WIRE = 1,/*!< WCI1WIRE : Select WCI 1-Wire interface                                   */
  CM4RADIO_WCICOEXCTRL_WCICOEXIFSEL_WCI2WIRE = 2,/*!< WCI2WIRE : Select WCI 2-Wire interface                                   */
} CM4RADIO_WCICOEXCTRL_WCICOEXIFSEL_Enum;

/* =====================================================  EXTRFDIRCTRL  ====================================================== */
/* ========================================  CM4RADIO EXTRFDIRCTRL RXENSEL [27..28]  ========================================= */
typedef enum {                                  /*!< CM4RADIO_EXTRFDIRCTRL_RXENSEL                                             */
  CM4RADIO_EXTRFDIRCTRL_RXENSEL_LOGIC0 = 0,     /*!< LOGIC0 : Select logic 0                                                   */
  CM4RADIO_EXTRFDIRCTRL_RXENSEL_REGBIT1 = 1,    /*!< REGBIT1 : Select bit 1 from this register                                 */
  CM4RADIO_EXTRFDIRCTRL_RXENSEL_RADIO7 = 2,     /*!< RADIO7 : IcyTRX radio_out[7]                                              */
  CM4RADIO_EXTRFDIRCTRL_RXENSEL_RADIO7ANDGPIO5 = 3,/*!< RADIO7ANDGPIO5 : IcyTRX radio_out[7] ANDed with IcyTRX GPIO[5]         */
} CM4RADIO_EXTRFDIRCTRL_RXENSEL_Enum;

/* ========================================  CM4RADIO EXTRFDIRCTRL TXENSEL [25..26]  ========================================= */
typedef enum {                                  /*!< CM4RADIO_EXTRFDIRCTRL_TXENSEL                                             */
  CM4RADIO_EXTRFDIRCTRL_TXENSEL_LOGIC0 = 0,     /*!< LOGIC0 : Select logic 0                                                   */
  CM4RADIO_EXTRFDIRCTRL_TXENSEL_REGBIT0 = 1,    /*!< REGBIT0 : Select bit 0 from this register                                 */
  CM4RADIO_EXTRFDIRCTRL_TXENSEL_RADIO6 = 2,     /*!< RADIO6 : IcyTRX radio_out[6]                                              */
  CM4RADIO_EXTRFDIRCTRL_TXENSEL_RADIO6ANDGPIO5 = 3,/*!< RADIO6ANDGPIO5 : IcyTRX radio_out[6] ANDed with IcyTRX GPIO[5]         */
} CM4RADIO_EXTRFDIRCTRL_TXENSEL_Enum;



/* =========================================================================================================================== */
/* ================                                            RTC                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  RTCCTL  ========================================================= */
/* ===============================================  RTC RTCCTL HR1224 [5..5]  ================================================ */
typedef enum {                                  /*!< RTC_RTCCTL_HR1224                                                         */
  RTC_RTCCTL_HR1224_24HR               = 0,     /*!< 24HR : Hours in 24 hour mode                                              */
  RTC_RTCCTL_HR1224_DISABLED           = 1,     /*!< DISABLED : Disable the 24 hour mode                                       */
} RTC_RTCCTL_HR1224_Enum;

/* ================================================  RTC RTCCTL RSTOP [4..4]  ================================================ */
typedef enum {                                  /*!< RTC_RTCCTL_RSTOP                                                          */
  RTC_RTCCTL_RSTOP_RUN                 = 0,     /*!< RUN : Allow the RTC input clock to run                                    */
  RTC_RTCCTL_RSTOP_STOP                = 1,     /*!< STOP : Stop the RTC input clock                                           */
} RTC_RTCCTL_RSTOP_Enum;

/* =================================================  RTC RTCCTL RPT [1..3]  ================================================= */
typedef enum {                                  /*!< RTC_RTCCTL_RPT                                                            */
  RTC_RTCCTL_RPT_DIS                   = 0,     /*!< DIS : Alarm interrupt disabled                                            */
  RTC_RTCCTL_RPT_YEAR                  = 1,     /*!< YEAR : Interrupt every year                                               */
  RTC_RTCCTL_RPT_MONTH                 = 2,     /*!< MONTH : Interrupt every month                                             */
  RTC_RTCCTL_RPT_WEEK                  = 3,     /*!< WEEK : Interrupt every week                                               */
  RTC_RTCCTL_RPT_DAY                   = 4,     /*!< DAY : Interrupt every day                                                 */
  RTC_RTCCTL_RPT_HR                    = 5,     /*!< HR : Interrupt every hour                                                 */
  RTC_RTCCTL_RPT_MIN                   = 6,     /*!< MIN : Interrupt every minute                                              */
  RTC_RTCCTL_RPT_SEC                   = 7,     /*!< SEC : Interrupt every second/10th/100th                                   */
} RTC_RTCCTL_RPT_Enum;

/* ================================================  RTC RTCCTL WRTC [0..0]  ================================================= */
typedef enum {                                  /*!< RTC_RTCCTL_WRTC                                                           */
  RTC_RTCCTL_WRTC_DIS                  = 0,     /*!< DIS : Counter writes are disabled                                         */
  RTC_RTCCTL_WRTC_EN                   = 1,     /*!< EN : Counter writes are enabled                                           */
} RTC_RTCCTL_WRTC_Enum;

/* ========================================================  RTCSTAT  ======================================================== */
/* ========================================================  CTRLOW  ========================================================= */
/* =========================================================  CTRUP  ========================================================= */
/* ===============================================  RTC CTRUP CTERR [31..31]  ================================================ */
typedef enum {                                  /*!< RTC_CTRUP_CTERR                                                           */
  RTC_CTRUP_CTERR_NOERR                = 0,     /*!< NOERR : No read error occurred                                            */
  RTC_CTRUP_CTERR_RDERR                = 1,     /*!< RDERR : Read error occurred                                               */
} RTC_CTRUP_CTERR_Enum;

/* ================================================  RTC CTRUP CEB [29..29]  ================================================= */
typedef enum {                                  /*!< RTC_CTRUP_CEB                                                             */
  RTC_CTRUP_CEB_DIS                    = 0,     /*!< DIS : Disable the Century bit from changing                               */
  RTC_CTRUP_CEB_EN                     = 1,     /*!< EN : Enable the Century bit to change                                     */
} RTC_CTRUP_CEB_Enum;

/* =================================================  RTC CTRUP CB [28..28]  ================================================= */
typedef enum {                                  /*!< RTC_CTRUP_CB                                                              */
  RTC_CTRUP_CB_2000                    = 0,     /*!< 2000 : Century is 2000s                                                   */
  RTC_CTRUP_CB_1900_2100               = 1,     /*!< 1900_2100 : Century is 1900s/2100s                                        */
} RTC_CTRUP_CB_Enum;

/* ========================================================  ALMLOW  ========================================================= */
/* =========================================================  ALMUP  ========================================================= */
/* =========================================================  INTEN  ========================================================= */
/* ========================================================  INTSTAT  ======================================================== */
/* ========================================================  INTCLR  ========================================================= */
/* ========================================================  INTSET  ========================================================= */


/* =========================================================================================================================== */
/* ================                                         CM4STIMER                                         ================ */
/* =========================================================================================================================== */

/* =========================================================  STCFG  ========================================================= */
/* ============================================  CM4STIMER STCFG FREEZE [31..31]  ============================================ */
typedef enum {                                  /*!< CM4STIMER_STCFG_FREEZE                                                    */
  CM4STIMER_STCFG_FREEZE_THAW          = 0,     /*!< THAW : Let the COUNTER register run on its input clock.                   */
  CM4STIMER_STCFG_FREEZE_FREEZE        = 1,     /*!< FREEZE : Stop the COUNTER register for loading.                           */
} CM4STIMER_STCFG_FREEZE_Enum;

/* ============================================  CM4STIMER STCFG CLEAR [30..30]  ============================================= */
typedef enum {                                  /*!< CM4STIMER_STCFG_CLEAR                                                     */
  CM4STIMER_STCFG_CLEAR_RUN            = 0,     /*!< RUN : Let the COUNTER register run on its input clock.                    */
  CM4STIMER_STCFG_CLEAR_CLEAR          = 1,     /*!< CLEAR : Stop the COUNTER register for loading.                            */
} CM4STIMER_STCFG_CLEAR_Enum;

/* ==========================================  CM4STIMER STCFG COMPAREHEN [15..15]  ========================================== */
typedef enum {                                  /*!< CM4STIMER_STCFG_COMPAREHEN                                                */
  CM4STIMER_STCFG_COMPAREHEN_DISABLE   = 0,     /*!< DISABLE : Compare H disabled.                                             */
  CM4STIMER_STCFG_COMPAREHEN_ENABLE    = 1,     /*!< ENABLE : Compare H enabled.                                               */
} CM4STIMER_STCFG_COMPAREHEN_Enum;

/* ==========================================  CM4STIMER STCFG COMPAREGEN [14..14]  ========================================== */
typedef enum {                                  /*!< CM4STIMER_STCFG_COMPAREGEN                                                */
  CM4STIMER_STCFG_COMPAREGEN_DISABLE   = 0,     /*!< DISABLE : Compare G disabled.                                             */
  CM4STIMER_STCFG_COMPAREGEN_ENABLE    = 1,     /*!< ENABLE : Compare G enabled.                                               */
} CM4STIMER_STCFG_COMPAREGEN_Enum;

/* ==========================================  CM4STIMER STCFG COMPAREFEN [13..13]  ========================================== */
typedef enum {                                  /*!< CM4STIMER_STCFG_COMPAREFEN                                                */
  CM4STIMER_STCFG_COMPAREFEN_DISABLE   = 0,     /*!< DISABLE : Compare F disabled.                                             */
  CM4STIMER_STCFG_COMPAREFEN_ENABLE    = 1,     /*!< ENABLE : Compare F enabled.                                               */
} CM4STIMER_STCFG_COMPAREFEN_Enum;

/* ==========================================  CM4STIMER STCFG COMPAREEEN [12..12]  ========================================== */
typedef enum {                                  /*!< CM4STIMER_STCFG_COMPAREEEN                                                */
  CM4STIMER_STCFG_COMPAREEEN_DISABLE   = 0,     /*!< DISABLE : Compare E disabled.                                             */
  CM4STIMER_STCFG_COMPAREEEN_ENABLE    = 1,     /*!< ENABLE : Compare E enabled.                                               */
} CM4STIMER_STCFG_COMPAREEEN_Enum;

/* ==========================================  CM4STIMER STCFG COMPAREDEN [11..11]  ========================================== */
typedef enum {                                  /*!< CM4STIMER_STCFG_COMPAREDEN                                                */
  CM4STIMER_STCFG_COMPAREDEN_DISABLE   = 0,     /*!< DISABLE : Compare D disabled.                                             */
  CM4STIMER_STCFG_COMPAREDEN_ENABLE    = 1,     /*!< ENABLE : Compare D enabled.                                               */
} CM4STIMER_STCFG_COMPAREDEN_Enum;

/* ==========================================  CM4STIMER STCFG COMPARECEN [10..10]  ========================================== */
typedef enum {                                  /*!< CM4STIMER_STCFG_COMPARECEN                                                */
  CM4STIMER_STCFG_COMPARECEN_DISABLE   = 0,     /*!< DISABLE : Compare C disabled.                                             */
  CM4STIMER_STCFG_COMPARECEN_ENABLE    = 1,     /*!< ENABLE : Compare C enabled.                                               */
} CM4STIMER_STCFG_COMPARECEN_Enum;

/* ===========================================  CM4STIMER STCFG COMPAREBEN [9..9]  =========================================== */
typedef enum {                                  /*!< CM4STIMER_STCFG_COMPAREBEN                                                */
  CM4STIMER_STCFG_COMPAREBEN_DISABLE   = 0,     /*!< DISABLE : Compare B disabled.                                             */
  CM4STIMER_STCFG_COMPAREBEN_ENABLE    = 1,     /*!< ENABLE : Compare B enabled.                                               */
} CM4STIMER_STCFG_COMPAREBEN_Enum;

/* ===========================================  CM4STIMER STCFG COMPAREAEN [8..8]  =========================================== */
typedef enum {                                  /*!< CM4STIMER_STCFG_COMPAREAEN                                                */
  CM4STIMER_STCFG_COMPAREAEN_DISABLE   = 0,     /*!< DISABLE : Compare A disabled.                                             */
  CM4STIMER_STCFG_COMPAREAEN_ENABLE    = 1,     /*!< ENABLE : Compare A enabled.                                               */
} CM4STIMER_STCFG_COMPAREAEN_Enum;

/* =============================================  CM4STIMER STCFG CLKSEL [0..3]  ============================================= */
typedef enum {                                  /*!< CM4STIMER_STCFG_CLKSEL                                                    */
  CM4STIMER_STCFG_CLKSEL_NOCLK         = 0,     /*!< NOCLK : No clock enabled.                                                 */
  CM4STIMER_STCFG_CLKSEL_HFRC_3MHz     = 1,     /*!< HFRC_3MHz : 3M from HFRC clock divider.                                   */
  CM4STIMER_STCFG_CLKSEL_HFRC_187KHz   = 2,     /*!< HFRC_187KHz : 187K from the HFRC clock divider.                           */
  CM4STIMER_STCFG_CLKSEL_XT_32K        = 3,     /*!< XT_32K : 32768Hz from the crystal oscillator                              */
  CM4STIMER_STCFG_CLKSEL_XT_16K        = 4,     /*!< XT_16K : 16384Hz from the crystal oscillator                              */
  CM4STIMER_STCFG_CLKSEL_XT_1K         = 5,     /*!< XT_1K : 1024Hz from the crystal oscillator.                               */
  CM4STIMER_STCFG_CLKSEL_LFRC_1KHZ     = 6,     /*!< LFRC_1KHZ : Approximately 1KHz from the LFRC oscillator (uncalibrated).   */
} CM4STIMER_STCFG_CLKSEL_Enum;

/* =========================================================  STTMR  ========================================================= */
/* =======================================================  SCAPCTRL0  ======================================================= */
/* ==========================================  CM4STIMER SCAPCTRL0 CAPTURE0 [9..9]  ========================================== */
typedef enum {                                  /*!< CM4STIMER_SCAPCTRL0_CAPTURE0                                              */
  CM4STIMER_SCAPCTRL0_CAPTURE0_DISABLE = 0,     /*!< DISABLE : Capture function disabled.                                      */
  CM4STIMER_SCAPCTRL0_CAPTURE0_ENABLE  = 1,     /*!< ENABLE : Capture function enabled.                                        */
} CM4STIMER_SCAPCTRL0_CAPTURE0_Enum;

/* ===========================================  CM4STIMER SCAPCTRL0 STPOL0 [8..8]  =========================================== */
typedef enum {                                  /*!< CM4STIMER_SCAPCTRL0_STPOL0                                                */
  CM4STIMER_SCAPCTRL0_STPOL0_CAPLH     = 0,     /*!< CAPLH : Capture on low to high GPIO transition                            */
  CM4STIMER_SCAPCTRL0_STPOL0_CAPHL     = 1,     /*!< CAPHL : Capture on high to low GPIO transition                            */
} CM4STIMER_SCAPCTRL0_STPOL0_Enum;

/* =======================================================  SCAPCTRL1  ======================================================= */
/* ==========================================  CM4STIMER SCAPCTRL1 CAPTURE1 [9..9]  ========================================== */
typedef enum {                                  /*!< CM4STIMER_SCAPCTRL1_CAPTURE1                                              */
  CM4STIMER_SCAPCTRL1_CAPTURE1_DISABLE = 0,     /*!< DISABLE : Capture function disabled.                                      */
  CM4STIMER_SCAPCTRL1_CAPTURE1_ENABLE  = 1,     /*!< ENABLE : Capture function enabled.                                        */
} CM4STIMER_SCAPCTRL1_CAPTURE1_Enum;

/* ===========================================  CM4STIMER SCAPCTRL1 STPOL1 [8..8]  =========================================== */
typedef enum {                                  /*!< CM4STIMER_SCAPCTRL1_STPOL1                                                */
  CM4STIMER_SCAPCTRL1_STPOL1_CAPLH     = 0,     /*!< CAPLH : Capture on low to high GPIO transition                            */
  CM4STIMER_SCAPCTRL1_STPOL1_CAPHL     = 1,     /*!< CAPHL : Capture on high to low GPIO transition                            */
} CM4STIMER_SCAPCTRL1_STPOL1_Enum;

/* =======================================================  SCAPCTRL2  ======================================================= */
/* ==========================================  CM4STIMER SCAPCTRL2 CAPTURE2 [9..9]  ========================================== */
typedef enum {                                  /*!< CM4STIMER_SCAPCTRL2_CAPTURE2                                              */
  CM4STIMER_SCAPCTRL2_CAPTURE2_DISABLE = 0,     /*!< DISABLE : Capture function disabled.                                      */
  CM4STIMER_SCAPCTRL2_CAPTURE2_ENABLE  = 1,     /*!< ENABLE : Capture function enabled.                                        */
} CM4STIMER_SCAPCTRL2_CAPTURE2_Enum;

/* ===========================================  CM4STIMER SCAPCTRL2 STPOL2 [8..8]  =========================================== */
typedef enum {                                  /*!< CM4STIMER_SCAPCTRL2_STPOL2                                                */
  CM4STIMER_SCAPCTRL2_STPOL2_CAPLH     = 0,     /*!< CAPLH : Capture on low to high GPIO transition                            */
  CM4STIMER_SCAPCTRL2_STPOL2_CAPHL     = 1,     /*!< CAPHL : Capture on high to low GPIO transition                            */
} CM4STIMER_SCAPCTRL2_STPOL2_Enum;

/* =======================================================  SCAPCTRL3  ======================================================= */
/* ==========================================  CM4STIMER SCAPCTRL3 CAPTURE3 [9..9]  ========================================== */
typedef enum {                                  /*!< CM4STIMER_SCAPCTRL3_CAPTURE3                                              */
  CM4STIMER_SCAPCTRL3_CAPTURE3_DISABLE = 0,     /*!< DISABLE : Capture function disabled.                                      */
  CM4STIMER_SCAPCTRL3_CAPTURE3_ENABLE  = 1,     /*!< ENABLE : Capture function enabled.                                        */
} CM4STIMER_SCAPCTRL3_CAPTURE3_Enum;

/* ===========================================  CM4STIMER SCAPCTRL3 STPOL3 [8..8]  =========================================== */
typedef enum {                                  /*!< CM4STIMER_SCAPCTRL3_STPOL3                                                */
  CM4STIMER_SCAPCTRL3_STPOL3_CAPLH     = 0,     /*!< CAPLH : Capture on low to high GPIO transition                            */
  CM4STIMER_SCAPCTRL3_STPOL3_CAPHL     = 1,     /*!< CAPHL : Capture on high to low GPIO transition                            */
} CM4STIMER_SCAPCTRL3_STPOL3_Enum;

/* ========================================================  SCMPR0  ========================================================= */
/* ========================================================  SCMPR1  ========================================================= */
/* ========================================================  SCMPR2  ========================================================= */
/* ========================================================  SCMPR3  ========================================================= */
/* ========================================================  SCMPR4  ========================================================= */
/* ========================================================  SCMPR5  ========================================================= */
/* ========================================================  SCMPR6  ========================================================= */
/* ========================================================  SCMPR7  ========================================================= */
/* ========================================================  SCAPT0  ========================================================= */
/* ========================================================  SCAPT1  ========================================================= */
/* ========================================================  SCAPT2  ========================================================= */
/* ========================================================  SCAPT3  ========================================================= */
/* =========================================================  SNVR0  ========================================================= */
/* =========================================================  SNVR1  ========================================================= */
/* =========================================================  SNVR2  ========================================================= */
/* =========================================================  SNVR3  ========================================================= */
/* =======================================================  STMINTEN  ======================================================== */
/* =========================================  CM4STIMER STMINTEN CAPTURED [12..12]  ========================================== */
typedef enum {                                  /*!< CM4STIMER_STMINTEN_CAPTURED                                               */
  CM4STIMER_STMINTEN_CAPTURED_CAPD_INT = 1,     /*!< CAPD_INT : Capture D interrupt status bit was set.                        */
  CM4STIMER_STMINTEN_CAPTURED_CAPD_DEFAULT = 0, /*!< CAPD_DEFAULT : Capture D interrupt status default/not set.                */
} CM4STIMER_STMINTEN_CAPTURED_Enum;

/* =========================================  CM4STIMER STMINTEN CAPTUREC [11..11]  ========================================== */
typedef enum {                                  /*!< CM4STIMER_STMINTEN_CAPTUREC                                               */
  CM4STIMER_STMINTEN_CAPTUREC_CAPC_INT = 1,     /*!< CAPC_INT : CAPTURE C interrupt status bit was set.                        */
  CM4STIMER_STMINTEN_CAPTUREC_CAPC_DEFAULT = 0, /*!< CAPC_DEFAULT : CAPTURE C interrupt status default/not set.                */
} CM4STIMER_STMINTEN_CAPTUREC_Enum;

/* =========================================  CM4STIMER STMINTEN CAPTUREB [10..10]  ========================================== */
typedef enum {                                  /*!< CM4STIMER_STMINTEN_CAPTUREB                                               */
  CM4STIMER_STMINTEN_CAPTUREB_CAPB_INT = 1,     /*!< CAPB_INT : CAPTURE B interrupt status bit was set.                        */
  CM4STIMER_STMINTEN_CAPTUREB_CAPB_DEFAULT = 0, /*!< CAPB_DEFAULT : CAPTURE B interrupt status default/not set.                */
} CM4STIMER_STMINTEN_CAPTUREB_Enum;

/* ==========================================  CM4STIMER STMINTEN CAPTUREA [9..9]  =========================================== */
typedef enum {                                  /*!< CM4STIMER_STMINTEN_CAPTUREA                                               */
  CM4STIMER_STMINTEN_CAPTUREA_CAPA_INT = 1,     /*!< CAPA_INT : CAPTURE A interrupt status bit was set.                        */
  CM4STIMER_STMINTEN_CAPTUREA_CAPA_DEFAULT = 0, /*!< CAPA_DEFAULT : CAPTURE A interrupt status default/not set.                */
} CM4STIMER_STMINTEN_CAPTUREA_Enum;

/* ==========================================  CM4STIMER STMINTEN OVERFLOW [8..8]  =========================================== */
typedef enum {                                  /*!< CM4STIMER_STMINTEN_OVERFLOW                                               */
  CM4STIMER_STMINTEN_OVERFLOW_OFLOW_INT = 1,    /*!< OFLOW_INT : Overflow interrupt status bit was set.                        */
  CM4STIMER_STMINTEN_OVERFLOW_OFLOW_DEFAULT = 0,/*!< OFLOW_DEFAULT : Overflow interrupt status bit default/not set.            */
} CM4STIMER_STMINTEN_OVERFLOW_Enum;

/* ==========================================  CM4STIMER STMINTEN COMPAREH [7..7]  =========================================== */
typedef enum {                                  /*!< CM4STIMER_STMINTEN_COMPAREH                                               */
  CM4STIMER_STMINTEN_COMPAREH_COMPARED = 1,     /*!< COMPARED : COUNTER greater than or equal to COMPARE register.             */
  CM4STIMER_STMINTEN_COMPAREH_DEFAULT  = 0,     /*!< DEFAULT : COUNTER less than COMPARE register.                             */
} CM4STIMER_STMINTEN_COMPAREH_Enum;

/* ==========================================  CM4STIMER STMINTEN COMPAREG [6..6]  =========================================== */
typedef enum {                                  /*!< CM4STIMER_STMINTEN_COMPAREG                                               */
  CM4STIMER_STMINTEN_COMPAREG_COMPARED = 1,     /*!< COMPARED : COUNTER greater than or equal to COMPARE register.             */
  CM4STIMER_STMINTEN_COMPAREG_DEFAULT  = 0,     /*!< DEFAULT : COUNTER less than COMPARE register.                             */
} CM4STIMER_STMINTEN_COMPAREG_Enum;

/* ==========================================  CM4STIMER STMINTEN COMPAREF [5..5]  =========================================== */
typedef enum {                                  /*!< CM4STIMER_STMINTEN_COMPAREF                                               */
  CM4STIMER_STMINTEN_COMPAREF_COMPARED = 1,     /*!< COMPARED : COUNTER greater than or equal to COMPARE register.             */
  CM4STIMER_STMINTEN_COMPAREF_DEFAULT  = 0,     /*!< DEFAULT : COUNTER less than COMPARE register.                             */
} CM4STIMER_STMINTEN_COMPAREF_Enum;

/* ==========================================  CM4STIMER STMINTEN COMPAREE [4..4]  =========================================== */
typedef enum {                                  /*!< CM4STIMER_STMINTEN_COMPAREE                                               */
  CM4STIMER_STMINTEN_COMPAREE_COMPARED = 1,     /*!< COMPARED : COUNTER greater than or equal to COMPARE register.             */
  CM4STIMER_STMINTEN_COMPAREE_DEFAULT  = 0,     /*!< DEFAULT : COUNTER less than COMPARE register.                             */
} CM4STIMER_STMINTEN_COMPAREE_Enum;

/* ==========================================  CM4STIMER STMINTEN COMPARED [3..3]  =========================================== */
typedef enum {                                  /*!< CM4STIMER_STMINTEN_COMPARED                                               */
  CM4STIMER_STMINTEN_COMPARED_COMPARED = 1,     /*!< COMPARED : COUNTER greater than or equal to COMPARE register.             */
  CM4STIMER_STMINTEN_COMPARED_DEFAULT  = 0,     /*!< DEFAULT : COUNTER less than COMPARE register.                             */
} CM4STIMER_STMINTEN_COMPARED_Enum;

/* ==========================================  CM4STIMER STMINTEN COMPAREC [2..2]  =========================================== */
typedef enum {                                  /*!< CM4STIMER_STMINTEN_COMPAREC                                               */
  CM4STIMER_STMINTEN_COMPAREC_COMPARED = 1,     /*!< COMPARED : COUNTER greater than or equal to COMPARE register.             */
  CM4STIMER_STMINTEN_COMPAREC_DEFAULT  = 0,     /*!< DEFAULT : COUNTER less than COMPARE register.                             */
} CM4STIMER_STMINTEN_COMPAREC_Enum;

/* ==========================================  CM4STIMER STMINTEN COMPAREB [1..1]  =========================================== */
typedef enum {                                  /*!< CM4STIMER_STMINTEN_COMPAREB                                               */
  CM4STIMER_STMINTEN_COMPAREB_COMPARED = 1,     /*!< COMPARED : COUNTER greater than or equal to COMPARE register.             */
  CM4STIMER_STMINTEN_COMPAREB_DEFAULT  = 0,     /*!< DEFAULT : COUNTER less than COMPARE register.                             */
} CM4STIMER_STMINTEN_COMPAREB_Enum;

/* ==========================================  CM4STIMER STMINTEN COMPAREA [0..0]  =========================================== */
typedef enum {                                  /*!< CM4STIMER_STMINTEN_COMPAREA                                               */
  CM4STIMER_STMINTEN_COMPAREA_COMPARED = 1,     /*!< COMPARED : COUNTER greater than or equal to COMPARE register.             */
  CM4STIMER_STMINTEN_COMPAREA_DEFAULT  = 0,     /*!< DEFAULT : COUNTER less than COMPARE register.                             */
} CM4STIMER_STMINTEN_COMPAREA_Enum;

/* ======================================================  STMINTSTAT  ======================================================= */
/* ========================================  CM4STIMER STMINTSTAT CAPTURED [12..12]  ========================================= */
typedef enum {                                  /*!< CM4STIMER_STMINTSTAT_CAPTURED                                             */
  CM4STIMER_STMINTSTAT_CAPTURED_CAPD_INT = 1,   /*!< CAPD_INT : Capture D interrupt status bit was set.                        */
  CM4STIMER_STMINTSTAT_CAPTURED_CAPD_DEFAULT = 0,/*!< CAPD_DEFAULT : Capture D interrupt status default/not set.               */
} CM4STIMER_STMINTSTAT_CAPTURED_Enum;

/* ========================================  CM4STIMER STMINTSTAT CAPTUREC [11..11]  ========================================= */
typedef enum {                                  /*!< CM4STIMER_STMINTSTAT_CAPTUREC                                             */
  CM4STIMER_STMINTSTAT_CAPTUREC_CAPC_INT = 1,   /*!< CAPC_INT : CAPTURE C interrupt status bit was set.                        */
  CM4STIMER_STMINTSTAT_CAPTUREC_CAPC_DEFAULT = 0,/*!< CAPC_DEFAULT : CAPTURE C interrupt status default/not set.               */
} CM4STIMER_STMINTSTAT_CAPTUREC_Enum;

/* ========================================  CM4STIMER STMINTSTAT CAPTUREB [10..10]  ========================================= */
typedef enum {                                  /*!< CM4STIMER_STMINTSTAT_CAPTUREB                                             */
  CM4STIMER_STMINTSTAT_CAPTUREB_CAPB_INT = 1,   /*!< CAPB_INT : CAPTURE B interrupt status bit was set.                        */
  CM4STIMER_STMINTSTAT_CAPTUREB_CAPB_DEFAULT = 0,/*!< CAPB_DEFAULT : CAPTURE B interrupt status default/not set.               */
} CM4STIMER_STMINTSTAT_CAPTUREB_Enum;

/* =========================================  CM4STIMER STMINTSTAT CAPTUREA [9..9]  ========================================== */
typedef enum {                                  /*!< CM4STIMER_STMINTSTAT_CAPTUREA                                             */
  CM4STIMER_STMINTSTAT_CAPTUREA_CAPA_INT = 1,   /*!< CAPA_INT : CAPTURE A interrupt status bit was set.                        */
  CM4STIMER_STMINTSTAT_CAPTUREA_CAPA_DEFAULT = 0,/*!< CAPA_DEFAULT : CAPTURE A interrupt status default/not set.               */
} CM4STIMER_STMINTSTAT_CAPTUREA_Enum;

/* =========================================  CM4STIMER STMINTSTAT OVERFLOW [8..8]  ========================================== */
typedef enum {                                  /*!< CM4STIMER_STMINTSTAT_OVERFLOW                                             */
  CM4STIMER_STMINTSTAT_OVERFLOW_OFLOW_INT = 1,  /*!< OFLOW_INT : Overflow interrupt status bit was set.                        */
  CM4STIMER_STMINTSTAT_OVERFLOW_OFLOW_DEFAULT = 0,/*!< OFLOW_DEFAULT : Overflow interrupt status bit default/not set.          */
} CM4STIMER_STMINTSTAT_OVERFLOW_Enum;

/* =========================================  CM4STIMER STMINTSTAT COMPAREH [7..7]  ========================================== */
typedef enum {                                  /*!< CM4STIMER_STMINTSTAT_COMPAREH                                             */
  CM4STIMER_STMINTSTAT_COMPAREH_COMPARED = 1,   /*!< COMPARED : COUNTER greater than or equal to COMPARE register.             */
  CM4STIMER_STMINTSTAT_COMPAREH_DEFAULT = 0,    /*!< DEFAULT : COUNTER less than COMPARE register.                             */
} CM4STIMER_STMINTSTAT_COMPAREH_Enum;

/* =========================================  CM4STIMER STMINTSTAT COMPAREG [6..6]  ========================================== */
typedef enum {                                  /*!< CM4STIMER_STMINTSTAT_COMPAREG                                             */
  CM4STIMER_STMINTSTAT_COMPAREG_COMPARED = 1,   /*!< COMPARED : COUNTER greater than or equal to COMPARE register.             */
  CM4STIMER_STMINTSTAT_COMPAREG_DEFAULT = 0,    /*!< DEFAULT : COUNTER less than COMPARE register.                             */
} CM4STIMER_STMINTSTAT_COMPAREG_Enum;

/* =========================================  CM4STIMER STMINTSTAT COMPAREF [5..5]  ========================================== */
typedef enum {                                  /*!< CM4STIMER_STMINTSTAT_COMPAREF                                             */
  CM4STIMER_STMINTSTAT_COMPAREF_COMPARED = 1,   /*!< COMPARED : COUNTER greater than or equal to COMPARE register.             */
  CM4STIMER_STMINTSTAT_COMPAREF_DEFAULT = 0,    /*!< DEFAULT : COUNTER less than COMPARE register.                             */
} CM4STIMER_STMINTSTAT_COMPAREF_Enum;

/* =========================================  CM4STIMER STMINTSTAT COMPAREE [4..4]  ========================================== */
typedef enum {                                  /*!< CM4STIMER_STMINTSTAT_COMPAREE                                             */
  CM4STIMER_STMINTSTAT_COMPAREE_COMPARED = 1,   /*!< COMPARED : COUNTER greater than or equal to COMPARE register.             */
  CM4STIMER_STMINTSTAT_COMPAREE_DEFAULT = 0,    /*!< DEFAULT : COUNTER less than COMPARE register.                             */
} CM4STIMER_STMINTSTAT_COMPAREE_Enum;

/* =========================================  CM4STIMER STMINTSTAT COMPARED [3..3]  ========================================== */
typedef enum {                                  /*!< CM4STIMER_STMINTSTAT_COMPARED                                             */
  CM4STIMER_STMINTSTAT_COMPARED_COMPARED = 1,   /*!< COMPARED : COUNTER greater than or equal to COMPARE register.             */
  CM4STIMER_STMINTSTAT_COMPARED_DEFAULT = 0,    /*!< DEFAULT : COUNTER less than COMPARE register.                             */
} CM4STIMER_STMINTSTAT_COMPARED_Enum;

/* =========================================  CM4STIMER STMINTSTAT COMPAREC [2..2]  ========================================== */
typedef enum {                                  /*!< CM4STIMER_STMINTSTAT_COMPAREC                                             */
  CM4STIMER_STMINTSTAT_COMPAREC_COMPARED = 1,   /*!< COMPARED : COUNTER greater than or equal to COMPARE register.             */
  CM4STIMER_STMINTSTAT_COMPAREC_DEFAULT = 0,    /*!< DEFAULT : COUNTER less than COMPARE register.                             */
} CM4STIMER_STMINTSTAT_COMPAREC_Enum;

/* =========================================  CM4STIMER STMINTSTAT COMPAREB [1..1]  ========================================== */
typedef enum {                                  /*!< CM4STIMER_STMINTSTAT_COMPAREB                                             */
  CM4STIMER_STMINTSTAT_COMPAREB_COMPARED = 1,   /*!< COMPARED : COUNTER greater than or equal to COMPARE register.             */
  CM4STIMER_STMINTSTAT_COMPAREB_DEFAULT = 0,    /*!< DEFAULT : COUNTER less than COMPARE register.                             */
} CM4STIMER_STMINTSTAT_COMPAREB_Enum;

/* =========================================  CM4STIMER STMINTSTAT COMPAREA [0..0]  ========================================== */
typedef enum {                                  /*!< CM4STIMER_STMINTSTAT_COMPAREA                                             */
  CM4STIMER_STMINTSTAT_COMPAREA_COMPARED = 1,   /*!< COMPARED : COUNTER greater than or equal to COMPARE register.             */
  CM4STIMER_STMINTSTAT_COMPAREA_DEFAULT = 0,    /*!< DEFAULT : COUNTER less than COMPARE register.                             */
} CM4STIMER_STMINTSTAT_COMPAREA_Enum;

/* =======================================================  STMINTCLR  ======================================================= */
/* =========================================  CM4STIMER STMINTCLR CAPTURED [12..12]  ========================================= */
typedef enum {                                  /*!< CM4STIMER_STMINTCLR_CAPTURED                                              */
  CM4STIMER_STMINTCLR_CAPTURED_CAPD_INT = 1,    /*!< CAPD_INT : Capture D interrupt status bit was set.                        */
  CM4STIMER_STMINTCLR_CAPTURED_CAPD_DEFAULT = 0,/*!< CAPD_DEFAULT : Capture D interrupt status default/not set.                */
} CM4STIMER_STMINTCLR_CAPTURED_Enum;

/* =========================================  CM4STIMER STMINTCLR CAPTUREC [11..11]  ========================================= */
typedef enum {                                  /*!< CM4STIMER_STMINTCLR_CAPTUREC                                              */
  CM4STIMER_STMINTCLR_CAPTUREC_CAPC_INT = 1,    /*!< CAPC_INT : CAPTURE C interrupt status bit was set.                        */
  CM4STIMER_STMINTCLR_CAPTUREC_CAPC_DEFAULT = 0,/*!< CAPC_DEFAULT : CAPTURE C interrupt status default/not set.                */
} CM4STIMER_STMINTCLR_CAPTUREC_Enum;

/* =========================================  CM4STIMER STMINTCLR CAPTUREB [10..10]  ========================================= */
typedef enum {                                  /*!< CM4STIMER_STMINTCLR_CAPTUREB                                              */
  CM4STIMER_STMINTCLR_CAPTUREB_CAPB_INT = 1,    /*!< CAPB_INT : CAPTURE B interrupt status bit was set.                        */
  CM4STIMER_STMINTCLR_CAPTUREB_CAPB_DEFAULT = 0,/*!< CAPB_DEFAULT : CAPTURE B interrupt status default/not set.                */
} CM4STIMER_STMINTCLR_CAPTUREB_Enum;

/* ==========================================  CM4STIMER STMINTCLR CAPTUREA [9..9]  ========================================== */
typedef enum {                                  /*!< CM4STIMER_STMINTCLR_CAPTUREA                                              */
  CM4STIMER_STMINTCLR_CAPTUREA_CAPA_INT = 1,    /*!< CAPA_INT : CAPTURE A interrupt status bit was set.                        */
  CM4STIMER_STMINTCLR_CAPTUREA_CAPA_DEFAULT = 0,/*!< CAPA_DEFAULT : CAPTURE A interrupt status default/not set.                */
} CM4STIMER_STMINTCLR_CAPTUREA_Enum;

/* ==========================================  CM4STIMER STMINTCLR OVERFLOW [8..8]  ========================================== */
typedef enum {                                  /*!< CM4STIMER_STMINTCLR_OVERFLOW                                              */
  CM4STIMER_STMINTCLR_OVERFLOW_OFLOW_INT = 1,   /*!< OFLOW_INT : Overflow interrupt status bit was set.                        */
  CM4STIMER_STMINTCLR_OVERFLOW_OFLOW_DEFAULT = 0,/*!< OFLOW_DEFAULT : Overflow interrupt status bit default/not set.           */
} CM4STIMER_STMINTCLR_OVERFLOW_Enum;

/* ==========================================  CM4STIMER STMINTCLR COMPAREH [7..7]  ========================================== */
typedef enum {                                  /*!< CM4STIMER_STMINTCLR_COMPAREH                                              */
  CM4STIMER_STMINTCLR_COMPAREH_COMPARED = 1,    /*!< COMPARED : COUNTER greater than or equal to COMPARE register.             */
  CM4STIMER_STMINTCLR_COMPAREH_DEFAULT = 0,     /*!< DEFAULT : COUNTER less than COMPARE register.                             */
} CM4STIMER_STMINTCLR_COMPAREH_Enum;

/* ==========================================  CM4STIMER STMINTCLR COMPAREG [6..6]  ========================================== */
typedef enum {                                  /*!< CM4STIMER_STMINTCLR_COMPAREG                                              */
  CM4STIMER_STMINTCLR_COMPAREG_COMPARED = 1,    /*!< COMPARED : COUNTER greater than or equal to COMPARE register.             */
  CM4STIMER_STMINTCLR_COMPAREG_DEFAULT = 0,     /*!< DEFAULT : COUNTER less than COMPARE register.                             */
} CM4STIMER_STMINTCLR_COMPAREG_Enum;

/* ==========================================  CM4STIMER STMINTCLR COMPAREF [5..5]  ========================================== */
typedef enum {                                  /*!< CM4STIMER_STMINTCLR_COMPAREF                                              */
  CM4STIMER_STMINTCLR_COMPAREF_COMPARED = 1,    /*!< COMPARED : COUNTER greater than or equal to COMPARE register.             */
  CM4STIMER_STMINTCLR_COMPAREF_DEFAULT = 0,     /*!< DEFAULT : COUNTER less than COMPARE register.                             */
} CM4STIMER_STMINTCLR_COMPAREF_Enum;

/* ==========================================  CM4STIMER STMINTCLR COMPAREE [4..4]  ========================================== */
typedef enum {                                  /*!< CM4STIMER_STMINTCLR_COMPAREE                                              */
  CM4STIMER_STMINTCLR_COMPAREE_COMPARED = 1,    /*!< COMPARED : COUNTER greater than or equal to COMPARE register.             */
  CM4STIMER_STMINTCLR_COMPAREE_DEFAULT = 0,     /*!< DEFAULT : COUNTER less than COMPARE register.                             */
} CM4STIMER_STMINTCLR_COMPAREE_Enum;

/* ==========================================  CM4STIMER STMINTCLR COMPARED [3..3]  ========================================== */
typedef enum {                                  /*!< CM4STIMER_STMINTCLR_COMPARED                                              */
  CM4STIMER_STMINTCLR_COMPARED_COMPARED = 1,    /*!< COMPARED : COUNTER greater than or equal to COMPARE register.             */
  CM4STIMER_STMINTCLR_COMPARED_DEFAULT = 0,     /*!< DEFAULT : COUNTER less than COMPARE register.                             */
} CM4STIMER_STMINTCLR_COMPARED_Enum;

/* ==========================================  CM4STIMER STMINTCLR COMPAREC [2..2]  ========================================== */
typedef enum {                                  /*!< CM4STIMER_STMINTCLR_COMPAREC                                              */
  CM4STIMER_STMINTCLR_COMPAREC_COMPARED = 1,    /*!< COMPARED : COUNTER greater than or equal to COMPARE register.             */
  CM4STIMER_STMINTCLR_COMPAREC_DEFAULT = 0,     /*!< DEFAULT : COUNTER less than COMPARE register.                             */
} CM4STIMER_STMINTCLR_COMPAREC_Enum;

/* ==========================================  CM4STIMER STMINTCLR COMPAREB [1..1]  ========================================== */
typedef enum {                                  /*!< CM4STIMER_STMINTCLR_COMPAREB                                              */
  CM4STIMER_STMINTCLR_COMPAREB_COMPARED = 1,    /*!< COMPARED : COUNTER greater than or equal to COMPARE register.             */
  CM4STIMER_STMINTCLR_COMPAREB_DEFAULT = 0,     /*!< DEFAULT : COUNTER less than COMPARE register.                             */
} CM4STIMER_STMINTCLR_COMPAREB_Enum;

/* ==========================================  CM4STIMER STMINTCLR COMPAREA [0..0]  ========================================== */
typedef enum {                                  /*!< CM4STIMER_STMINTCLR_COMPAREA                                              */
  CM4STIMER_STMINTCLR_COMPAREA_COMPARED = 1,    /*!< COMPARED : COUNTER greater than or equal to COMPARE register.             */
  CM4STIMER_STMINTCLR_COMPAREA_DEFAULT = 0,     /*!< DEFAULT : COUNTER less than COMPARE register.                             */
} CM4STIMER_STMINTCLR_COMPAREA_Enum;

/* =======================================================  STMINTSET  ======================================================= */
/* =========================================  CM4STIMER STMINTSET CAPTURED [12..12]  ========================================= */
typedef enum {                                  /*!< CM4STIMER_STMINTSET_CAPTURED                                              */
  CM4STIMER_STMINTSET_CAPTURED_CAPD_INT = 1,    /*!< CAPD_INT : Capture D interrupt status bit was set.                        */
  CM4STIMER_STMINTSET_CAPTURED_CAPD_DEFAULT = 0,/*!< CAPD_DEFAULT : Capture D interrupt status default/not set.                */
} CM4STIMER_STMINTSET_CAPTURED_Enum;

/* =========================================  CM4STIMER STMINTSET CAPTUREC [11..11]  ========================================= */
typedef enum {                                  /*!< CM4STIMER_STMINTSET_CAPTUREC                                              */
  CM4STIMER_STMINTSET_CAPTUREC_CAPC_INT = 1,    /*!< CAPC_INT : CAPTURE C interrupt status bit was set.                        */
  CM4STIMER_STMINTSET_CAPTUREC_CAPC_DEFAULT = 0,/*!< CAPC_DEFAULT : CAPTURE C interrupt status default/not set.                */
} CM4STIMER_STMINTSET_CAPTUREC_Enum;

/* =========================================  CM4STIMER STMINTSET CAPTUREB [10..10]  ========================================= */
typedef enum {                                  /*!< CM4STIMER_STMINTSET_CAPTUREB                                              */
  CM4STIMER_STMINTSET_CAPTUREB_CAPB_INT = 1,    /*!< CAPB_INT : CAPTURE B interrupt status bit was set.                        */
  CM4STIMER_STMINTSET_CAPTUREB_CAPB_DEFAULT = 0,/*!< CAPB_DEFAULT : CAPTURE B interrupt status default/not set.                */
} CM4STIMER_STMINTSET_CAPTUREB_Enum;

/* ==========================================  CM4STIMER STMINTSET CAPTUREA [9..9]  ========================================== */
typedef enum {                                  /*!< CM4STIMER_STMINTSET_CAPTUREA                                              */
  CM4STIMER_STMINTSET_CAPTUREA_CAPA_INT = 1,    /*!< CAPA_INT : CAPTURE A interrupt status bit was set.                        */
  CM4STIMER_STMINTSET_CAPTUREA_CAPA_DEFAULT = 0,/*!< CAPA_DEFAULT : CAPTURE A interrupt status default/not set.                */
} CM4STIMER_STMINTSET_CAPTUREA_Enum;

/* ==========================================  CM4STIMER STMINTSET OVERFLOW [8..8]  ========================================== */
typedef enum {                                  /*!< CM4STIMER_STMINTSET_OVERFLOW                                              */
  CM4STIMER_STMINTSET_OVERFLOW_OFLOW_INT = 1,   /*!< OFLOW_INT : Overflow interrupt status bit was set.                        */
  CM4STIMER_STMINTSET_OVERFLOW_OFLOW_DEFAULT = 0,/*!< OFLOW_DEFAULT : Overflow interrupt status bit default/not set.           */
} CM4STIMER_STMINTSET_OVERFLOW_Enum;

/* ==========================================  CM4STIMER STMINTSET COMPAREH [7..7]  ========================================== */
typedef enum {                                  /*!< CM4STIMER_STMINTSET_COMPAREH                                              */
  CM4STIMER_STMINTSET_COMPAREH_COMPARED = 1,    /*!< COMPARED : COUNTER greater than or equal to COMPARE register.             */
  CM4STIMER_STMINTSET_COMPAREH_DEFAULT = 0,     /*!< DEFAULT : COUNTER less than COMPARE register.                             */
} CM4STIMER_STMINTSET_COMPAREH_Enum;

/* ==========================================  CM4STIMER STMINTSET COMPAREG [6..6]  ========================================== */
typedef enum {                                  /*!< CM4STIMER_STMINTSET_COMPAREG                                              */
  CM4STIMER_STMINTSET_COMPAREG_COMPARED = 1,    /*!< COMPARED : COUNTER greater than or equal to COMPARE register.             */
  CM4STIMER_STMINTSET_COMPAREG_DEFAULT = 0,     /*!< DEFAULT : COUNTER less than COMPARE register.                             */
} CM4STIMER_STMINTSET_COMPAREG_Enum;

/* ==========================================  CM4STIMER STMINTSET COMPAREF [5..5]  ========================================== */
typedef enum {                                  /*!< CM4STIMER_STMINTSET_COMPAREF                                              */
  CM4STIMER_STMINTSET_COMPAREF_COMPARED = 1,    /*!< COMPARED : COUNTER greater than or equal to COMPARE register.             */
  CM4STIMER_STMINTSET_COMPAREF_DEFAULT = 0,     /*!< DEFAULT : COUNTER less than COMPARE register.                             */
} CM4STIMER_STMINTSET_COMPAREF_Enum;

/* ==========================================  CM4STIMER STMINTSET COMPAREE [4..4]  ========================================== */
typedef enum {                                  /*!< CM4STIMER_STMINTSET_COMPAREE                                              */
  CM4STIMER_STMINTSET_COMPAREE_COMPARED = 1,    /*!< COMPARED : COUNTER greater than or equal to COMPARE register.             */
  CM4STIMER_STMINTSET_COMPAREE_DEFAULT = 0,     /*!< DEFAULT : COUNTER less than COMPARE register.                             */
} CM4STIMER_STMINTSET_COMPAREE_Enum;

/* ==========================================  CM4STIMER STMINTSET COMPARED [3..3]  ========================================== */
typedef enum {                                  /*!< CM4STIMER_STMINTSET_COMPARED                                              */
  CM4STIMER_STMINTSET_COMPARED_COMPARED = 1,    /*!< COMPARED : COUNTER greater than or equal to COMPARE register.             */
  CM4STIMER_STMINTSET_COMPARED_DEFAULT = 0,     /*!< DEFAULT : COUNTER less than COMPARE register.                             */
} CM4STIMER_STMINTSET_COMPARED_Enum;

/* ==========================================  CM4STIMER STMINTSET COMPAREC [2..2]  ========================================== */
typedef enum {                                  /*!< CM4STIMER_STMINTSET_COMPAREC                                              */
  CM4STIMER_STMINTSET_COMPAREC_COMPARED = 1,    /*!< COMPARED : COUNTER greater than or equal to COMPARE register.             */
  CM4STIMER_STMINTSET_COMPAREC_DEFAULT = 0,     /*!< DEFAULT : COUNTER less than COMPARE register.                             */
} CM4STIMER_STMINTSET_COMPAREC_Enum;

/* ==========================================  CM4STIMER STMINTSET COMPAREB [1..1]  ========================================== */
typedef enum {                                  /*!< CM4STIMER_STMINTSET_COMPAREB                                              */
  CM4STIMER_STMINTSET_COMPAREB_COMPARED = 1,    /*!< COMPARED : COUNTER greater than or equal to COMPARE register.             */
  CM4STIMER_STMINTSET_COMPAREB_DEFAULT = 0,     /*!< DEFAULT : COUNTER less than COMPARE register.                             */
} CM4STIMER_STMINTSET_COMPAREB_Enum;

/* ==========================================  CM4STIMER STMINTSET COMPAREA [0..0]  ========================================== */
typedef enum {                                  /*!< CM4STIMER_STMINTSET_COMPAREA                                              */
  CM4STIMER_STMINTSET_COMPAREA_COMPARED = 1,    /*!< COMPARED : COUNTER greater than or equal to COMPARE register.             */
  CM4STIMER_STMINTSET_COMPAREA_DEFAULT = 0,     /*!< DEFAULT : COUNTER less than COMPARE register.                             */
} CM4STIMER_STMINTSET_COMPAREA_Enum;



/* =========================================================================================================================== */
/* ================                                         CM4TIMER                                          ================ */
/* =========================================================================================================================== */

/* =========================================================  CTRL  ========================================================== */
/* ========================================================  STATUS  ========================================================= */
/* ========================================================  GLOBEN  ========================================================= */
/* ============================================  CM4TIMER GLOBEN ADCEN [30..30]  ============================================= */
typedef enum {                                  /*!< CM4TIMER_GLOBEN_ADCEN                                                     */
  CM4TIMER_GLOBEN_ADCEN_EN             = 1,     /*!< EN : Timer Enabled. TMREN enable is used.                                 */
  CM4TIMER_GLOBEN_ADCEN_DIS            = 0,     /*!< DIS : Disable TIMER .                                                     */
} CM4TIMER_GLOBEN_ADCEN_Enum;

/* =======================================  CM4TIMER GLOBEN ENABLEALLINPUTS [29..29]  ======================================== */
typedef enum {                                  /*!< CM4TIMER_GLOBEN_ENABLEALLINPUTS                                           */
  CM4TIMER_GLOBEN_ENABLEALLINPUTS_EN   = 1,     /*!< EN : Override to enable all inputs from GPIO                              */
  CM4TIMER_GLOBEN_ENABLEALLINPUTS_DIS  = 0,     /*!< DIS : Normal mode where inputs from GPIO are enabled based on
                                                     enabled clock and triggers.                                               */
} CM4TIMER_GLOBEN_ENABLEALLINPUTS_Enum;

/* ==============================================  CM4TIMER GLOBEN ENB3 [3..3]  ============================================== */
typedef enum {                                  /*!< CM4TIMER_GLOBEN_ENB3                                                      */
  CM4TIMER_GLOBEN_ENB3_EN              = 1,     /*!< EN : Timer Enabled. TMR3EN enable is used.                                */
  CM4TIMER_GLOBEN_ENB3_DIS             = 0,     /*!< DIS : Disable TIMER 3.                                                    */
} CM4TIMER_GLOBEN_ENB3_Enum;

/* ==============================================  CM4TIMER GLOBEN ENB2 [2..2]  ============================================== */
typedef enum {                                  /*!< CM4TIMER_GLOBEN_ENB2                                                      */
  CM4TIMER_GLOBEN_ENB2_EN              = 1,     /*!< EN : Timer Enabled. TMR2EN enable is used.                                */
  CM4TIMER_GLOBEN_ENB2_DIS             = 0,     /*!< DIS : Disable TIMER 2.                                                    */
} CM4TIMER_GLOBEN_ENB2_Enum;

/* ==============================================  CM4TIMER GLOBEN ENB1 [1..1]  ============================================== */
typedef enum {                                  /*!< CM4TIMER_GLOBEN_ENB1                                                      */
  CM4TIMER_GLOBEN_ENB1_EN              = 1,     /*!< EN : Timer Enabled. TMR1EN enable is used.                                */
  CM4TIMER_GLOBEN_ENB1_DIS             = 0,     /*!< DIS : Disable TIMER 1.                                                    */
} CM4TIMER_GLOBEN_ENB1_Enum;

/* ==============================================  CM4TIMER GLOBEN ENB0 [0..0]  ============================================== */
typedef enum {                                  /*!< CM4TIMER_GLOBEN_ENB0                                                      */
  CM4TIMER_GLOBEN_ENB0_EN              = 1,     /*!< EN : Timer Enabled. TMR0EN enable is used.                                */
  CM4TIMER_GLOBEN_ENB0_DIS             = 0,     /*!< DIS : Disable TIMER 0.                                                    */
} CM4TIMER_GLOBEN_ENB0_Enum;

/* =========================================================  INTEN  ========================================================= */
/* ========================================================  INTSTAT  ======================================================== */
/* ========================================================  INTCLR  ========================================================= */
/* ========================================================  INTSET  ========================================================= */
/* ========================================================  OUTCFG0  ======================================================== */
/* ===========================================  CM4TIMER OUTCFG0 OUTCFG3 [24..29]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG0_OUTCFG3                                                  */
  CM4TIMER_OUTCFG0_OUTCFG3_TIMER00     = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG0_OUTCFG3_TIMER01     = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG0_OUTCFG3_TIMER10     = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG0_OUTCFG3_TIMER11     = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG0_OUTCFG3_TIMER20     = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG0_OUTCFG3_TIMER21     = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG0_OUTCFG3_TIMER30     = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG0_OUTCFG3_TIMER31     = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG0_OUTCFG3_STIMER0     = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG0_OUTCFG3_STIMER1     = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG0_OUTCFG3_STIMER2     = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG0_OUTCFG3_STIMER3     = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG0_OUTCFG3_STIMER4     = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG0_OUTCFG3_STIMER5     = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG0_OUTCFG3_STIMER6     = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG0_OUTCFG3_STIMER7     = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG0_OUTCFG3_DISABLED    = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG0_OUTCFG3_Enum;

/* ===========================================  CM4TIMER OUTCFG0 OUTCFG2 [16..21]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG0_OUTCFG2                                                  */
  CM4TIMER_OUTCFG0_OUTCFG2_TIMER00     = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG0_OUTCFG2_TIMER01     = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG0_OUTCFG2_TIMER10     = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG0_OUTCFG2_TIMER11     = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG0_OUTCFG2_TIMER20     = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG0_OUTCFG2_TIMER21     = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG0_OUTCFG2_TIMER30     = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG0_OUTCFG2_TIMER31     = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG0_OUTCFG2_STIMER0     = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG0_OUTCFG2_STIMER1     = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG0_OUTCFG2_STIMER2     = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG0_OUTCFG2_STIMER3     = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG0_OUTCFG2_STIMER4     = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG0_OUTCFG2_STIMER5     = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG0_OUTCFG2_STIMER6     = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG0_OUTCFG2_STIMER7     = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG0_OUTCFG2_DISABLED    = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG0_OUTCFG2_Enum;

/* ===========================================  CM4TIMER OUTCFG0 OUTCFG1 [8..13]  ============================================ */
typedef enum {                                  /*!< CM4TIMER_OUTCFG0_OUTCFG1                                                  */
  CM4TIMER_OUTCFG0_OUTCFG1_TIMER00     = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG0_OUTCFG1_TIMER01     = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG0_OUTCFG1_TIMER10     = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG0_OUTCFG1_TIMER11     = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG0_OUTCFG1_TIMER20     = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG0_OUTCFG1_TIMER21     = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG0_OUTCFG1_TIMER30     = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG0_OUTCFG1_TIMER31     = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG0_OUTCFG1_STIMER0     = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG0_OUTCFG1_STIMER1     = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG0_OUTCFG1_STIMER2     = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG0_OUTCFG1_STIMER3     = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG0_OUTCFG1_STIMER4     = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG0_OUTCFG1_STIMER5     = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG0_OUTCFG1_STIMER6     = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG0_OUTCFG1_STIMER7     = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG0_OUTCFG1_DISABLED    = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG0_OUTCFG1_Enum;

/* ============================================  CM4TIMER OUTCFG0 OUTCFG0 [0..5]  ============================================ */
typedef enum {                                  /*!< CM4TIMER_OUTCFG0_OUTCFG0                                                  */
  CM4TIMER_OUTCFG0_OUTCFG0_TIMER00     = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG0_OUTCFG0_TIMER01     = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG0_OUTCFG0_TIMER10     = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG0_OUTCFG0_TIMER11     = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG0_OUTCFG0_TIMER20     = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG0_OUTCFG0_TIMER21     = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG0_OUTCFG0_TIMER30     = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG0_OUTCFG0_TIMER31     = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG0_OUTCFG0_STIMER0     = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG0_OUTCFG0_STIMER1     = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG0_OUTCFG0_STIMER2     = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG0_OUTCFG0_STIMER3     = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG0_OUTCFG0_STIMER4     = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG0_OUTCFG0_STIMER5     = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG0_OUTCFG0_STIMER6     = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG0_OUTCFG0_STIMER7     = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG0_OUTCFG0_DISABLED    = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG0_OUTCFG0_Enum;

/* ========================================================  OUTCFG1  ======================================================== */
/* ===========================================  CM4TIMER OUTCFG1 OUTCFG7 [24..29]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG1_OUTCFG7                                                  */
  CM4TIMER_OUTCFG1_OUTCFG7_TIMER00     = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG1_OUTCFG7_TIMER01     = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG1_OUTCFG7_TIMER10     = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG1_OUTCFG7_TIMER11     = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG1_OUTCFG7_TIMER20     = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG1_OUTCFG7_TIMER21     = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG1_OUTCFG7_TIMER30     = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG1_OUTCFG7_TIMER31     = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG1_OUTCFG7_STIMER0     = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG1_OUTCFG7_STIMER1     = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG1_OUTCFG7_STIMER2     = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG1_OUTCFG7_STIMER3     = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG1_OUTCFG7_STIMER4     = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG1_OUTCFG7_STIMER5     = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG1_OUTCFG7_STIMER6     = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG1_OUTCFG7_STIMER7     = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG1_OUTCFG7_DISABLED    = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG1_OUTCFG7_Enum;

/* ===========================================  CM4TIMER OUTCFG1 OUTCFG6 [16..21]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG1_OUTCFG6                                                  */
  CM4TIMER_OUTCFG1_OUTCFG6_TIMER00     = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG1_OUTCFG6_TIMER01     = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG1_OUTCFG6_TIMER10     = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG1_OUTCFG6_TIMER11     = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG1_OUTCFG6_TIMER20     = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG1_OUTCFG6_TIMER21     = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG1_OUTCFG6_TIMER30     = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG1_OUTCFG6_TIMER31     = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG1_OUTCFG6_STIMER0     = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG1_OUTCFG6_STIMER1     = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG1_OUTCFG6_STIMER2     = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG1_OUTCFG6_STIMER3     = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG1_OUTCFG6_STIMER4     = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG1_OUTCFG6_STIMER5     = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG1_OUTCFG6_STIMER6     = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG1_OUTCFG6_STIMER7     = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG1_OUTCFG6_DISABLED    = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG1_OUTCFG6_Enum;

/* ===========================================  CM4TIMER OUTCFG1 OUTCFG5 [8..13]  ============================================ */
typedef enum {                                  /*!< CM4TIMER_OUTCFG1_OUTCFG5                                                  */
  CM4TIMER_OUTCFG1_OUTCFG5_TIMER00     = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG1_OUTCFG5_TIMER01     = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG1_OUTCFG5_TIMER10     = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG1_OUTCFG5_TIMER11     = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG1_OUTCFG5_TIMER20     = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG1_OUTCFG5_TIMER21     = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG1_OUTCFG5_TIMER30     = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG1_OUTCFG5_TIMER31     = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG1_OUTCFG5_STIMER0     = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG1_OUTCFG5_STIMER1     = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG1_OUTCFG5_STIMER2     = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG1_OUTCFG5_STIMER3     = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG1_OUTCFG5_STIMER4     = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG1_OUTCFG5_STIMER5     = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG1_OUTCFG5_STIMER6     = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG1_OUTCFG5_STIMER7     = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG1_OUTCFG5_DISABLED    = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG1_OUTCFG5_Enum;

/* ============================================  CM4TIMER OUTCFG1 OUTCFG4 [0..5]  ============================================ */
typedef enum {                                  /*!< CM4TIMER_OUTCFG1_OUTCFG4                                                  */
  CM4TIMER_OUTCFG1_OUTCFG4_TIMER00     = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG1_OUTCFG4_TIMER01     = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG1_OUTCFG4_TIMER10     = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG1_OUTCFG4_TIMER11     = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG1_OUTCFG4_TIMER20     = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG1_OUTCFG4_TIMER21     = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG1_OUTCFG4_TIMER30     = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG1_OUTCFG4_TIMER31     = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG1_OUTCFG4_STIMER0     = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG1_OUTCFG4_STIMER1     = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG1_OUTCFG4_STIMER2     = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG1_OUTCFG4_STIMER3     = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG1_OUTCFG4_STIMER4     = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG1_OUTCFG4_STIMER5     = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG1_OUTCFG4_STIMER6     = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG1_OUTCFG4_STIMER7     = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG1_OUTCFG4_DISABLED    = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG1_OUTCFG4_Enum;

/* ========================================================  OUTCFG2  ======================================================== */
/* ==========================================  CM4TIMER OUTCFG2 OUTCFG11 [24..29]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG2_OUTCFG11                                                 */
  CM4TIMER_OUTCFG2_OUTCFG11_TIMER00    = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG2_OUTCFG11_TIMER01    = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG2_OUTCFG11_TIMER10    = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG2_OUTCFG11_TIMER11    = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG2_OUTCFG11_TIMER20    = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG2_OUTCFG11_TIMER21    = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG2_OUTCFG11_TIMER30    = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG2_OUTCFG11_TIMER31    = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG2_OUTCFG11_STIMER0    = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG2_OUTCFG11_STIMER1    = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG2_OUTCFG11_STIMER2    = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG2_OUTCFG11_STIMER3    = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG2_OUTCFG11_STIMER4    = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG2_OUTCFG11_STIMER5    = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG2_OUTCFG11_STIMER6    = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG2_OUTCFG11_STIMER7    = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG2_OUTCFG11_DISABLED   = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG2_OUTCFG11_Enum;

/* ==========================================  CM4TIMER OUTCFG2 OUTCFG10 [16..21]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG2_OUTCFG10                                                 */
  CM4TIMER_OUTCFG2_OUTCFG10_TIMER00    = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG2_OUTCFG10_TIMER01    = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG2_OUTCFG10_TIMER10    = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG2_OUTCFG10_TIMER11    = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG2_OUTCFG10_TIMER20    = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG2_OUTCFG10_TIMER21    = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG2_OUTCFG10_TIMER30    = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG2_OUTCFG10_TIMER31    = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG2_OUTCFG10_STIMER0    = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG2_OUTCFG10_STIMER1    = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG2_OUTCFG10_STIMER2    = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG2_OUTCFG10_STIMER3    = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG2_OUTCFG10_STIMER4    = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG2_OUTCFG10_STIMER5    = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG2_OUTCFG10_STIMER6    = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG2_OUTCFG10_STIMER7    = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG2_OUTCFG10_DISABLED   = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG2_OUTCFG10_Enum;

/* ===========================================  CM4TIMER OUTCFG2 OUTCFG9 [8..13]  ============================================ */
typedef enum {                                  /*!< CM4TIMER_OUTCFG2_OUTCFG9                                                  */
  CM4TIMER_OUTCFG2_OUTCFG9_TIMER00     = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG2_OUTCFG9_TIMER01     = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG2_OUTCFG9_TIMER10     = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG2_OUTCFG9_TIMER11     = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG2_OUTCFG9_TIMER20     = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG2_OUTCFG9_TIMER21     = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG2_OUTCFG9_TIMER30     = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG2_OUTCFG9_TIMER31     = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG2_OUTCFG9_STIMER0     = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG2_OUTCFG9_STIMER1     = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG2_OUTCFG9_STIMER2     = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG2_OUTCFG9_STIMER3     = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG2_OUTCFG9_STIMER4     = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG2_OUTCFG9_STIMER5     = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG2_OUTCFG9_STIMER6     = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG2_OUTCFG9_STIMER7     = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG2_OUTCFG9_DISABLED    = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG2_OUTCFG9_Enum;

/* ============================================  CM4TIMER OUTCFG2 OUTCFG8 [0..5]  ============================================ */
typedef enum {                                  /*!< CM4TIMER_OUTCFG2_OUTCFG8                                                  */
  CM4TIMER_OUTCFG2_OUTCFG8_TIMER00     = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG2_OUTCFG8_TIMER01     = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG2_OUTCFG8_TIMER10     = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG2_OUTCFG8_TIMER11     = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG2_OUTCFG8_TIMER20     = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG2_OUTCFG8_TIMER21     = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG2_OUTCFG8_TIMER30     = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG2_OUTCFG8_TIMER31     = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG2_OUTCFG8_STIMER0     = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG2_OUTCFG8_STIMER1     = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG2_OUTCFG8_STIMER2     = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG2_OUTCFG8_STIMER3     = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG2_OUTCFG8_STIMER4     = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG2_OUTCFG8_STIMER5     = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG2_OUTCFG8_STIMER6     = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG2_OUTCFG8_STIMER7     = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG2_OUTCFG8_DISABLED    = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG2_OUTCFG8_Enum;

/* ========================================================  OUTCFG3  ======================================================== */
/* ==========================================  CM4TIMER OUTCFG3 OUTCFG15 [24..29]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG3_OUTCFG15                                                 */
  CM4TIMER_OUTCFG3_OUTCFG15_TIMER00    = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG3_OUTCFG15_TIMER01    = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG3_OUTCFG15_TIMER10    = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG3_OUTCFG15_TIMER11    = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG3_OUTCFG15_TIMER20    = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG3_OUTCFG15_TIMER21    = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG3_OUTCFG15_TIMER30    = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG3_OUTCFG15_TIMER31    = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG3_OUTCFG15_STIMER0    = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG3_OUTCFG15_STIMER1    = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG3_OUTCFG15_STIMER2    = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG3_OUTCFG15_STIMER3    = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG3_OUTCFG15_STIMER4    = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG3_OUTCFG15_STIMER5    = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG3_OUTCFG15_STIMER6    = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG3_OUTCFG15_STIMER7    = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG3_OUTCFG15_DISABLED   = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG3_OUTCFG15_Enum;

/* ==========================================  CM4TIMER OUTCFG3 OUTCFG14 [16..21]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG3_OUTCFG14                                                 */
  CM4TIMER_OUTCFG3_OUTCFG14_TIMER00    = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG3_OUTCFG14_TIMER01    = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG3_OUTCFG14_TIMER10    = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG3_OUTCFG14_TIMER11    = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG3_OUTCFG14_TIMER20    = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG3_OUTCFG14_TIMER21    = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG3_OUTCFG14_TIMER30    = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG3_OUTCFG14_TIMER31    = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG3_OUTCFG14_STIMER0    = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG3_OUTCFG14_STIMER1    = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG3_OUTCFG14_STIMER2    = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG3_OUTCFG14_STIMER3    = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG3_OUTCFG14_STIMER4    = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG3_OUTCFG14_STIMER5    = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG3_OUTCFG14_STIMER6    = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG3_OUTCFG14_STIMER7    = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG3_OUTCFG14_DISABLED   = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG3_OUTCFG14_Enum;

/* ===========================================  CM4TIMER OUTCFG3 OUTCFG13 [8..13]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG3_OUTCFG13                                                 */
  CM4TIMER_OUTCFG3_OUTCFG13_TIMER00    = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG3_OUTCFG13_TIMER01    = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG3_OUTCFG13_TIMER10    = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG3_OUTCFG13_TIMER11    = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG3_OUTCFG13_TIMER20    = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG3_OUTCFG13_TIMER21    = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG3_OUTCFG13_TIMER30    = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG3_OUTCFG13_TIMER31    = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG3_OUTCFG13_STIMER0    = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG3_OUTCFG13_STIMER1    = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG3_OUTCFG13_STIMER2    = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG3_OUTCFG13_STIMER3    = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG3_OUTCFG13_STIMER4    = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG3_OUTCFG13_STIMER5    = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG3_OUTCFG13_STIMER6    = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG3_OUTCFG13_STIMER7    = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG3_OUTCFG13_DISABLED   = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG3_OUTCFG13_Enum;

/* ===========================================  CM4TIMER OUTCFG3 OUTCFG12 [0..5]  ============================================ */
typedef enum {                                  /*!< CM4TIMER_OUTCFG3_OUTCFG12                                                 */
  CM4TIMER_OUTCFG3_OUTCFG12_TIMER00    = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG3_OUTCFG12_TIMER01    = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG3_OUTCFG12_TIMER10    = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG3_OUTCFG12_TIMER11    = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG3_OUTCFG12_TIMER20    = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG3_OUTCFG12_TIMER21    = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG3_OUTCFG12_TIMER30    = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG3_OUTCFG12_TIMER31    = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG3_OUTCFG12_STIMER0    = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG3_OUTCFG12_STIMER1    = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG3_OUTCFG12_STIMER2    = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG3_OUTCFG12_STIMER3    = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG3_OUTCFG12_STIMER4    = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG3_OUTCFG12_STIMER5    = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG3_OUTCFG12_STIMER6    = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG3_OUTCFG12_STIMER7    = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG3_OUTCFG12_DISABLED   = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG3_OUTCFG12_Enum;

/* ========================================================  OUTCFG4  ======================================================== */
/* ==========================================  CM4TIMER OUTCFG4 OUTCFG19 [24..29]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG4_OUTCFG19                                                 */
  CM4TIMER_OUTCFG4_OUTCFG19_TIMER00    = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG4_OUTCFG19_TIMER01    = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG4_OUTCFG19_TIMER10    = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG4_OUTCFG19_TIMER11    = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG4_OUTCFG19_TIMER20    = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG4_OUTCFG19_TIMER21    = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG4_OUTCFG19_TIMER30    = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG4_OUTCFG19_TIMER31    = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG4_OUTCFG19_STIMER0    = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG4_OUTCFG19_STIMER1    = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG4_OUTCFG19_STIMER2    = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG4_OUTCFG19_STIMER3    = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG4_OUTCFG19_STIMER4    = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG4_OUTCFG19_STIMER5    = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG4_OUTCFG19_STIMER6    = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG4_OUTCFG19_STIMER7    = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG4_OUTCFG19_DISABLED   = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG4_OUTCFG19_Enum;

/* ==========================================  CM4TIMER OUTCFG4 OUTCFG18 [16..21]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG4_OUTCFG18                                                 */
  CM4TIMER_OUTCFG4_OUTCFG18_TIMER00    = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG4_OUTCFG18_TIMER01    = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG4_OUTCFG18_TIMER10    = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG4_OUTCFG18_TIMER11    = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG4_OUTCFG18_TIMER20    = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG4_OUTCFG18_TIMER21    = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG4_OUTCFG18_TIMER30    = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG4_OUTCFG18_TIMER31    = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG4_OUTCFG18_STIMER0    = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG4_OUTCFG18_STIMER1    = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG4_OUTCFG18_STIMER2    = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG4_OUTCFG18_STIMER3    = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG4_OUTCFG18_STIMER4    = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG4_OUTCFG18_STIMER5    = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG4_OUTCFG18_STIMER6    = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG4_OUTCFG18_STIMER7    = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG4_OUTCFG18_DISABLED   = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG4_OUTCFG18_Enum;

/* ===========================================  CM4TIMER OUTCFG4 OUTCFG17 [8..13]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG4_OUTCFG17                                                 */
  CM4TIMER_OUTCFG4_OUTCFG17_TIMER00    = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG4_OUTCFG17_TIMER01    = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG4_OUTCFG17_TIMER10    = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG4_OUTCFG17_TIMER11    = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG4_OUTCFG17_TIMER20    = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG4_OUTCFG17_TIMER21    = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG4_OUTCFG17_TIMER30    = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG4_OUTCFG17_TIMER31    = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG4_OUTCFG17_STIMER0    = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG4_OUTCFG17_STIMER1    = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG4_OUTCFG17_STIMER2    = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG4_OUTCFG17_STIMER3    = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG4_OUTCFG17_STIMER4    = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG4_OUTCFG17_STIMER5    = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG4_OUTCFG17_STIMER6    = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG4_OUTCFG17_STIMER7    = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG4_OUTCFG17_DISABLED   = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG4_OUTCFG17_Enum;

/* ===========================================  CM4TIMER OUTCFG4 OUTCFG16 [0..5]  ============================================ */
typedef enum {                                  /*!< CM4TIMER_OUTCFG4_OUTCFG16                                                 */
  CM4TIMER_OUTCFG4_OUTCFG16_TIMER00    = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG4_OUTCFG16_TIMER01    = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG4_OUTCFG16_TIMER10    = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG4_OUTCFG16_TIMER11    = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG4_OUTCFG16_TIMER20    = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG4_OUTCFG16_TIMER21    = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG4_OUTCFG16_TIMER30    = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG4_OUTCFG16_TIMER31    = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG4_OUTCFG16_STIMER0    = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG4_OUTCFG16_STIMER1    = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG4_OUTCFG16_STIMER2    = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG4_OUTCFG16_STIMER3    = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG4_OUTCFG16_STIMER4    = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG4_OUTCFG16_STIMER5    = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG4_OUTCFG16_STIMER6    = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG4_OUTCFG16_STIMER7    = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG4_OUTCFG16_DISABLED   = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG4_OUTCFG16_Enum;

/* ========================================================  OUTCFG5  ======================================================== */
/* ==========================================  CM4TIMER OUTCFG5 OUTCFG23 [24..29]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG5_OUTCFG23                                                 */
  CM4TIMER_OUTCFG5_OUTCFG23_TIMER00    = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG5_OUTCFG23_TIMER01    = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG5_OUTCFG23_TIMER10    = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG5_OUTCFG23_TIMER11    = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG5_OUTCFG23_TIMER20    = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG5_OUTCFG23_TIMER21    = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG5_OUTCFG23_TIMER30    = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG5_OUTCFG23_TIMER31    = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG5_OUTCFG23_STIMER0    = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG5_OUTCFG23_STIMER1    = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG5_OUTCFG23_STIMER2    = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG5_OUTCFG23_STIMER3    = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG5_OUTCFG23_STIMER4    = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG5_OUTCFG23_STIMER5    = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG5_OUTCFG23_STIMER6    = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG5_OUTCFG23_STIMER7    = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG5_OUTCFG23_DISABLED   = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG5_OUTCFG23_Enum;

/* ==========================================  CM4TIMER OUTCFG5 OUTCFG22 [16..21]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG5_OUTCFG22                                                 */
  CM4TIMER_OUTCFG5_OUTCFG22_TIMER00    = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG5_OUTCFG22_TIMER01    = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG5_OUTCFG22_TIMER10    = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG5_OUTCFG22_TIMER11    = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG5_OUTCFG22_TIMER20    = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG5_OUTCFG22_TIMER21    = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG5_OUTCFG22_TIMER30    = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG5_OUTCFG22_TIMER31    = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG5_OUTCFG22_STIMER0    = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG5_OUTCFG22_STIMER1    = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG5_OUTCFG22_STIMER2    = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG5_OUTCFG22_STIMER3    = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG5_OUTCFG22_STIMER4    = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG5_OUTCFG22_STIMER5    = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG5_OUTCFG22_STIMER6    = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG5_OUTCFG22_STIMER7    = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG5_OUTCFG22_DISABLED   = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG5_OUTCFG22_Enum;

/* ===========================================  CM4TIMER OUTCFG5 OUTCFG21 [8..13]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG5_OUTCFG21                                                 */
  CM4TIMER_OUTCFG5_OUTCFG21_TIMER00    = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG5_OUTCFG21_TIMER01    = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG5_OUTCFG21_TIMER10    = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG5_OUTCFG21_TIMER11    = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG5_OUTCFG21_TIMER20    = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG5_OUTCFG21_TIMER21    = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG5_OUTCFG21_TIMER30    = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG5_OUTCFG21_TIMER31    = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG5_OUTCFG21_STIMER0    = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG5_OUTCFG21_STIMER1    = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG5_OUTCFG21_STIMER2    = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG5_OUTCFG21_STIMER3    = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG5_OUTCFG21_STIMER4    = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG5_OUTCFG21_STIMER5    = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG5_OUTCFG21_STIMER6    = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG5_OUTCFG21_STIMER7    = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG5_OUTCFG21_DISABLED   = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG5_OUTCFG21_Enum;

/* ===========================================  CM4TIMER OUTCFG5 OUTCFG20 [0..5]  ============================================ */
typedef enum {                                  /*!< CM4TIMER_OUTCFG5_OUTCFG20                                                 */
  CM4TIMER_OUTCFG5_OUTCFG20_TIMER00    = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG5_OUTCFG20_TIMER01    = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG5_OUTCFG20_TIMER10    = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG5_OUTCFG20_TIMER11    = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG5_OUTCFG20_TIMER20    = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG5_OUTCFG20_TIMER21    = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG5_OUTCFG20_TIMER30    = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG5_OUTCFG20_TIMER31    = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG5_OUTCFG20_STIMER0    = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG5_OUTCFG20_STIMER1    = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG5_OUTCFG20_STIMER2    = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG5_OUTCFG20_STIMER3    = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG5_OUTCFG20_STIMER4    = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG5_OUTCFG20_STIMER5    = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG5_OUTCFG20_STIMER6    = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG5_OUTCFG20_STIMER7    = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG5_OUTCFG20_DISABLED   = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG5_OUTCFG20_Enum;

/* ========================================================  OUTCFG6  ======================================================== */
/* ==========================================  CM4TIMER OUTCFG6 OUTCFG27 [24..29]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG6_OUTCFG27                                                 */
  CM4TIMER_OUTCFG6_OUTCFG27_TIMER00    = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG6_OUTCFG27_TIMER01    = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG6_OUTCFG27_TIMER10    = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG6_OUTCFG27_TIMER11    = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG6_OUTCFG27_TIMER20    = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG6_OUTCFG27_TIMER21    = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG6_OUTCFG27_TIMER30    = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG6_OUTCFG27_TIMER31    = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG6_OUTCFG27_STIMER0    = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG6_OUTCFG27_STIMER1    = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG6_OUTCFG27_STIMER2    = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG6_OUTCFG27_STIMER3    = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG6_OUTCFG27_STIMER4    = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG6_OUTCFG27_STIMER5    = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG6_OUTCFG27_STIMER6    = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG6_OUTCFG27_STIMER7    = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG6_OUTCFG27_DISABLED   = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG6_OUTCFG27_Enum;

/* ==========================================  CM4TIMER OUTCFG6 OUTCFG26 [16..21]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG6_OUTCFG26                                                 */
  CM4TIMER_OUTCFG6_OUTCFG26_TIMER00    = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG6_OUTCFG26_TIMER01    = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG6_OUTCFG26_TIMER10    = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG6_OUTCFG26_TIMER11    = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG6_OUTCFG26_TIMER20    = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG6_OUTCFG26_TIMER21    = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG6_OUTCFG26_TIMER30    = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG6_OUTCFG26_TIMER31    = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG6_OUTCFG26_STIMER0    = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG6_OUTCFG26_STIMER1    = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG6_OUTCFG26_STIMER2    = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG6_OUTCFG26_STIMER3    = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG6_OUTCFG26_STIMER4    = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG6_OUTCFG26_STIMER5    = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG6_OUTCFG26_STIMER6    = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG6_OUTCFG26_STIMER7    = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG6_OUTCFG26_DISABLED   = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG6_OUTCFG26_Enum;

/* ===========================================  CM4TIMER OUTCFG6 OUTCFG25 [8..13]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG6_OUTCFG25                                                 */
  CM4TIMER_OUTCFG6_OUTCFG25_TIMER00    = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG6_OUTCFG25_TIMER01    = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG6_OUTCFG25_TIMER10    = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG6_OUTCFG25_TIMER11    = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG6_OUTCFG25_TIMER20    = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG6_OUTCFG25_TIMER21    = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG6_OUTCFG25_TIMER30    = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG6_OUTCFG25_TIMER31    = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG6_OUTCFG25_STIMER0    = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG6_OUTCFG25_STIMER1    = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG6_OUTCFG25_STIMER2    = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG6_OUTCFG25_STIMER3    = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG6_OUTCFG25_STIMER4    = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG6_OUTCFG25_STIMER5    = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG6_OUTCFG25_STIMER6    = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG6_OUTCFG25_STIMER7    = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG6_OUTCFG25_DISABLED   = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG6_OUTCFG25_Enum;

/* ===========================================  CM4TIMER OUTCFG6 OUTCFG24 [0..5]  ============================================ */
typedef enum {                                  /*!< CM4TIMER_OUTCFG6_OUTCFG24                                                 */
  CM4TIMER_OUTCFG6_OUTCFG24_TIMER00    = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG6_OUTCFG24_TIMER01    = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG6_OUTCFG24_TIMER10    = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG6_OUTCFG24_TIMER11    = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG6_OUTCFG24_TIMER20    = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG6_OUTCFG24_TIMER21    = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG6_OUTCFG24_TIMER30    = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG6_OUTCFG24_TIMER31    = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG6_OUTCFG24_STIMER0    = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG6_OUTCFG24_STIMER1    = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG6_OUTCFG24_STIMER2    = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG6_OUTCFG24_STIMER3    = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG6_OUTCFG24_STIMER4    = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG6_OUTCFG24_STIMER5    = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG6_OUTCFG24_STIMER6    = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG6_OUTCFG24_STIMER7    = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG6_OUTCFG24_DISABLED   = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG6_OUTCFG24_Enum;

/* ========================================================  OUTCFG7  ======================================================== */
/* ==========================================  CM4TIMER OUTCFG7 OUTCFG31 [24..29]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG7_OUTCFG31                                                 */
  CM4TIMER_OUTCFG7_OUTCFG31_TIMER00    = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG7_OUTCFG31_TIMER01    = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG7_OUTCFG31_TIMER10    = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG7_OUTCFG31_TIMER11    = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG7_OUTCFG31_TIMER20    = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG7_OUTCFG31_TIMER21    = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG7_OUTCFG31_TIMER30    = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG7_OUTCFG31_TIMER31    = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG7_OUTCFG31_STIMER0    = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG7_OUTCFG31_STIMER1    = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG7_OUTCFG31_STIMER2    = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG7_OUTCFG31_STIMER3    = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG7_OUTCFG31_STIMER4    = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG7_OUTCFG31_STIMER5    = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG7_OUTCFG31_STIMER6    = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG7_OUTCFG31_STIMER7    = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG7_OUTCFG31_DISABLED   = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG7_OUTCFG31_Enum;

/* ==========================================  CM4TIMER OUTCFG7 OUTCFG30 [16..21]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG7_OUTCFG30                                                 */
  CM4TIMER_OUTCFG7_OUTCFG30_TIMER00    = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG7_OUTCFG30_TIMER01    = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG7_OUTCFG30_TIMER10    = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG7_OUTCFG30_TIMER11    = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG7_OUTCFG30_TIMER20    = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG7_OUTCFG30_TIMER21    = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG7_OUTCFG30_TIMER30    = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG7_OUTCFG30_TIMER31    = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG7_OUTCFG30_STIMER0    = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG7_OUTCFG30_STIMER1    = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG7_OUTCFG30_STIMER2    = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG7_OUTCFG30_STIMER3    = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG7_OUTCFG30_STIMER4    = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG7_OUTCFG30_STIMER5    = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG7_OUTCFG30_STIMER6    = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG7_OUTCFG30_STIMER7    = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG7_OUTCFG30_DISABLED   = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG7_OUTCFG30_Enum;

/* ===========================================  CM4TIMER OUTCFG7 OUTCFG29 [8..13]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG7_OUTCFG29                                                 */
  CM4TIMER_OUTCFG7_OUTCFG29_TIMER00    = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG7_OUTCFG29_TIMER01    = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG7_OUTCFG29_TIMER10    = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG7_OUTCFG29_TIMER11    = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG7_OUTCFG29_TIMER20    = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG7_OUTCFG29_TIMER21    = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG7_OUTCFG29_TIMER30    = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG7_OUTCFG29_TIMER31    = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG7_OUTCFG29_STIMER0    = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG7_OUTCFG29_STIMER1    = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG7_OUTCFG29_STIMER2    = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG7_OUTCFG29_STIMER3    = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG7_OUTCFG29_STIMER4    = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG7_OUTCFG29_STIMER5    = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG7_OUTCFG29_STIMER6    = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG7_OUTCFG29_STIMER7    = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG7_OUTCFG29_DISABLED   = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG7_OUTCFG29_Enum;

/* ===========================================  CM4TIMER OUTCFG7 OUTCFG28 [0..5]  ============================================ */
typedef enum {                                  /*!< CM4TIMER_OUTCFG7_OUTCFG28                                                 */
  CM4TIMER_OUTCFG7_OUTCFG28_TIMER00    = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG7_OUTCFG28_TIMER01    = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG7_OUTCFG28_TIMER10    = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG7_OUTCFG28_TIMER11    = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG7_OUTCFG28_TIMER20    = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG7_OUTCFG28_TIMER21    = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG7_OUTCFG28_TIMER30    = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG7_OUTCFG28_TIMER31    = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG7_OUTCFG28_STIMER0    = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG7_OUTCFG28_STIMER1    = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG7_OUTCFG28_STIMER2    = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG7_OUTCFG28_STIMER3    = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG7_OUTCFG28_STIMER4    = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG7_OUTCFG28_STIMER5    = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG7_OUTCFG28_STIMER6    = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG7_OUTCFG28_STIMER7    = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG7_OUTCFG28_DISABLED   = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG7_OUTCFG28_Enum;

/* ========================================================  OUTCFG8  ======================================================== */
/* ==========================================  CM4TIMER OUTCFG8 OUTCFG35 [24..29]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG8_OUTCFG35                                                 */
  CM4TIMER_OUTCFG8_OUTCFG35_TIMER00    = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG8_OUTCFG35_TIMER01    = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG8_OUTCFG35_TIMER10    = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG8_OUTCFG35_TIMER11    = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG8_OUTCFG35_TIMER20    = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG8_OUTCFG35_TIMER21    = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG8_OUTCFG35_TIMER30    = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG8_OUTCFG35_TIMER31    = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG8_OUTCFG35_STIMER0    = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG8_OUTCFG35_STIMER1    = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG8_OUTCFG35_STIMER2    = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG8_OUTCFG35_STIMER3    = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG8_OUTCFG35_STIMER4    = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG8_OUTCFG35_STIMER5    = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG8_OUTCFG35_STIMER6    = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG8_OUTCFG35_STIMER7    = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG8_OUTCFG35_DISABLED   = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG8_OUTCFG35_Enum;

/* ==========================================  CM4TIMER OUTCFG8 OUTCFG34 [16..21]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG8_OUTCFG34                                                 */
  CM4TIMER_OUTCFG8_OUTCFG34_TIMER00    = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG8_OUTCFG34_TIMER01    = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG8_OUTCFG34_TIMER10    = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG8_OUTCFG34_TIMER11    = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG8_OUTCFG34_TIMER20    = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG8_OUTCFG34_TIMER21    = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG8_OUTCFG34_TIMER30    = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG8_OUTCFG34_TIMER31    = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG8_OUTCFG34_STIMER0    = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG8_OUTCFG34_STIMER1    = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG8_OUTCFG34_STIMER2    = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG8_OUTCFG34_STIMER3    = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG8_OUTCFG34_STIMER4    = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG8_OUTCFG34_STIMER5    = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG8_OUTCFG34_STIMER6    = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG8_OUTCFG34_STIMER7    = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG8_OUTCFG34_DISABLED   = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG8_OUTCFG34_Enum;

/* ===========================================  CM4TIMER OUTCFG8 OUTCFG33 [8..13]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG8_OUTCFG33                                                 */
  CM4TIMER_OUTCFG8_OUTCFG33_TIMER00    = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG8_OUTCFG33_TIMER01    = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG8_OUTCFG33_TIMER10    = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG8_OUTCFG33_TIMER11    = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG8_OUTCFG33_TIMER20    = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG8_OUTCFG33_TIMER21    = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG8_OUTCFG33_TIMER30    = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG8_OUTCFG33_TIMER31    = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG8_OUTCFG33_STIMER0    = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG8_OUTCFG33_STIMER1    = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG8_OUTCFG33_STIMER2    = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG8_OUTCFG33_STIMER3    = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG8_OUTCFG33_STIMER4    = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG8_OUTCFG33_STIMER5    = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG8_OUTCFG33_STIMER6    = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG8_OUTCFG33_STIMER7    = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG8_OUTCFG33_DISABLED   = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG8_OUTCFG33_Enum;

/* ===========================================  CM4TIMER OUTCFG8 OUTCFG32 [0..5]  ============================================ */
typedef enum {                                  /*!< CM4TIMER_OUTCFG8_OUTCFG32                                                 */
  CM4TIMER_OUTCFG8_OUTCFG32_TIMER00    = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG8_OUTCFG32_TIMER01    = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG8_OUTCFG32_TIMER10    = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG8_OUTCFG32_TIMER11    = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG8_OUTCFG32_TIMER20    = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG8_OUTCFG32_TIMER21    = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG8_OUTCFG32_TIMER30    = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG8_OUTCFG32_TIMER31    = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG8_OUTCFG32_STIMER0    = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG8_OUTCFG32_STIMER1    = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG8_OUTCFG32_STIMER2    = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG8_OUTCFG32_STIMER3    = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG8_OUTCFG32_STIMER4    = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG8_OUTCFG32_STIMER5    = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG8_OUTCFG32_STIMER6    = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG8_OUTCFG32_STIMER7    = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG8_OUTCFG32_DISABLED   = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG8_OUTCFG32_Enum;

/* ========================================================  OUTCFG9  ======================================================== */
/* ==========================================  CM4TIMER OUTCFG9 OUTCFG39 [24..29]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG9_OUTCFG39                                                 */
  CM4TIMER_OUTCFG9_OUTCFG39_TIMER00    = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG9_OUTCFG39_TIMER01    = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG9_OUTCFG39_TIMER10    = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG9_OUTCFG39_TIMER11    = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG9_OUTCFG39_TIMER20    = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG9_OUTCFG39_TIMER21    = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG9_OUTCFG39_TIMER30    = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG9_OUTCFG39_TIMER31    = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG9_OUTCFG39_STIMER0    = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG9_OUTCFG39_STIMER1    = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG9_OUTCFG39_STIMER2    = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG9_OUTCFG39_STIMER3    = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG9_OUTCFG39_STIMER4    = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG9_OUTCFG39_STIMER5    = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG9_OUTCFG39_STIMER6    = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG9_OUTCFG39_STIMER7    = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG9_OUTCFG39_DISABLED   = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG9_OUTCFG39_Enum;

/* ==========================================  CM4TIMER OUTCFG9 OUTCFG38 [16..21]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG9_OUTCFG38                                                 */
  CM4TIMER_OUTCFG9_OUTCFG38_TIMER00    = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG9_OUTCFG38_TIMER01    = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG9_OUTCFG38_TIMER10    = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG9_OUTCFG38_TIMER11    = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG9_OUTCFG38_TIMER20    = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG9_OUTCFG38_TIMER21    = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG9_OUTCFG38_TIMER30    = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG9_OUTCFG38_TIMER31    = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG9_OUTCFG38_STIMER0    = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG9_OUTCFG38_STIMER1    = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG9_OUTCFG38_STIMER2    = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG9_OUTCFG38_STIMER3    = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG9_OUTCFG38_STIMER4    = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG9_OUTCFG38_STIMER5    = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG9_OUTCFG38_STIMER6    = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG9_OUTCFG38_STIMER7    = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG9_OUTCFG38_DISABLED   = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG9_OUTCFG38_Enum;

/* ===========================================  CM4TIMER OUTCFG9 OUTCFG37 [8..13]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG9_OUTCFG37                                                 */
  CM4TIMER_OUTCFG9_OUTCFG37_TIMER00    = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG9_OUTCFG37_TIMER01    = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG9_OUTCFG37_TIMER10    = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG9_OUTCFG37_TIMER11    = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG9_OUTCFG37_TIMER20    = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG9_OUTCFG37_TIMER21    = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG9_OUTCFG37_TIMER30    = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG9_OUTCFG37_TIMER31    = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG9_OUTCFG37_STIMER0    = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG9_OUTCFG37_STIMER1    = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG9_OUTCFG37_STIMER2    = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG9_OUTCFG37_STIMER3    = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG9_OUTCFG37_STIMER4    = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG9_OUTCFG37_STIMER5    = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG9_OUTCFG37_STIMER6    = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG9_OUTCFG37_STIMER7    = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG9_OUTCFG37_DISABLED   = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG9_OUTCFG37_Enum;

/* ===========================================  CM4TIMER OUTCFG9 OUTCFG36 [0..5]  ============================================ */
typedef enum {                                  /*!< CM4TIMER_OUTCFG9_OUTCFG36                                                 */
  CM4TIMER_OUTCFG9_OUTCFG36_TIMER00    = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG9_OUTCFG36_TIMER01    = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG9_OUTCFG36_TIMER10    = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG9_OUTCFG36_TIMER11    = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG9_OUTCFG36_TIMER20    = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG9_OUTCFG36_TIMER21    = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG9_OUTCFG36_TIMER30    = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG9_OUTCFG36_TIMER31    = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG9_OUTCFG36_STIMER0    = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG9_OUTCFG36_STIMER1    = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG9_OUTCFG36_STIMER2    = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG9_OUTCFG36_STIMER3    = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG9_OUTCFG36_STIMER4    = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG9_OUTCFG36_STIMER5    = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG9_OUTCFG36_STIMER6    = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG9_OUTCFG36_STIMER7    = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG9_OUTCFG36_DISABLED   = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG9_OUTCFG36_Enum;

/* =======================================================  OUTCFG10  ======================================================== */
/* ==========================================  CM4TIMER OUTCFG10 OUTCFG43 [24..29]  ========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG10_OUTCFG43                                                */
  CM4TIMER_OUTCFG10_OUTCFG43_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG10_OUTCFG43_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG10_OUTCFG43_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG10_OUTCFG43_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG10_OUTCFG43_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG10_OUTCFG43_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG10_OUTCFG43_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG10_OUTCFG43_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG10_OUTCFG43_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG10_OUTCFG43_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG10_OUTCFG43_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG10_OUTCFG43_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG10_OUTCFG43_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG10_OUTCFG43_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG10_OUTCFG43_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG10_OUTCFG43_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG10_OUTCFG43_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG10_OUTCFG43_Enum;

/* ==========================================  CM4TIMER OUTCFG10 OUTCFG42 [16..21]  ========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG10_OUTCFG42                                                */
  CM4TIMER_OUTCFG10_OUTCFG42_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG10_OUTCFG42_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG10_OUTCFG42_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG10_OUTCFG42_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG10_OUTCFG42_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG10_OUTCFG42_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG10_OUTCFG42_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG10_OUTCFG42_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG10_OUTCFG42_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG10_OUTCFG42_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG10_OUTCFG42_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG10_OUTCFG42_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG10_OUTCFG42_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG10_OUTCFG42_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG10_OUTCFG42_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG10_OUTCFG42_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG10_OUTCFG42_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG10_OUTCFG42_Enum;

/* ==========================================  CM4TIMER OUTCFG10 OUTCFG41 [8..13]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG10_OUTCFG41                                                */
  CM4TIMER_OUTCFG10_OUTCFG41_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG10_OUTCFG41_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG10_OUTCFG41_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG10_OUTCFG41_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG10_OUTCFG41_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG10_OUTCFG41_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG10_OUTCFG41_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG10_OUTCFG41_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG10_OUTCFG41_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG10_OUTCFG41_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG10_OUTCFG41_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG10_OUTCFG41_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG10_OUTCFG41_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG10_OUTCFG41_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG10_OUTCFG41_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG10_OUTCFG41_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG10_OUTCFG41_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG10_OUTCFG41_Enum;

/* ===========================================  CM4TIMER OUTCFG10 OUTCFG40 [0..5]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG10_OUTCFG40                                                */
  CM4TIMER_OUTCFG10_OUTCFG40_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG10_OUTCFG40_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG10_OUTCFG40_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG10_OUTCFG40_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG10_OUTCFG40_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG10_OUTCFG40_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG10_OUTCFG40_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG10_OUTCFG40_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG10_OUTCFG40_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG10_OUTCFG40_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG10_OUTCFG40_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG10_OUTCFG40_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG10_OUTCFG40_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG10_OUTCFG40_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG10_OUTCFG40_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG10_OUTCFG40_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG10_OUTCFG40_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG10_OUTCFG40_Enum;

/* =======================================================  OUTCFG11  ======================================================== */
/* ==========================================  CM4TIMER OUTCFG11 OUTCFG47 [24..29]  ========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG11_OUTCFG47                                                */
  CM4TIMER_OUTCFG11_OUTCFG47_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG11_OUTCFG47_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG11_OUTCFG47_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG11_OUTCFG47_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG11_OUTCFG47_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG11_OUTCFG47_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG11_OUTCFG47_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG11_OUTCFG47_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG11_OUTCFG47_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG11_OUTCFG47_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG11_OUTCFG47_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG11_OUTCFG47_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG11_OUTCFG47_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG11_OUTCFG47_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG11_OUTCFG47_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG11_OUTCFG47_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG11_OUTCFG47_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG11_OUTCFG47_Enum;

/* ==========================================  CM4TIMER OUTCFG11 OUTCFG46 [16..21]  ========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG11_OUTCFG46                                                */
  CM4TIMER_OUTCFG11_OUTCFG46_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG11_OUTCFG46_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG11_OUTCFG46_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG11_OUTCFG46_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG11_OUTCFG46_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG11_OUTCFG46_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG11_OUTCFG46_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG11_OUTCFG46_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG11_OUTCFG46_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG11_OUTCFG46_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG11_OUTCFG46_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG11_OUTCFG46_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG11_OUTCFG46_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG11_OUTCFG46_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG11_OUTCFG46_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG11_OUTCFG46_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG11_OUTCFG46_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG11_OUTCFG46_Enum;

/* ==========================================  CM4TIMER OUTCFG11 OUTCFG45 [8..13]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG11_OUTCFG45                                                */
  CM4TIMER_OUTCFG11_OUTCFG45_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG11_OUTCFG45_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG11_OUTCFG45_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG11_OUTCFG45_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG11_OUTCFG45_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG11_OUTCFG45_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG11_OUTCFG45_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG11_OUTCFG45_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG11_OUTCFG45_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG11_OUTCFG45_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG11_OUTCFG45_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG11_OUTCFG45_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG11_OUTCFG45_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG11_OUTCFG45_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG11_OUTCFG45_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG11_OUTCFG45_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG11_OUTCFG45_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG11_OUTCFG45_Enum;

/* ===========================================  CM4TIMER OUTCFG11 OUTCFG44 [0..5]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG11_OUTCFG44                                                */
  CM4TIMER_OUTCFG11_OUTCFG44_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG11_OUTCFG44_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG11_OUTCFG44_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG11_OUTCFG44_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG11_OUTCFG44_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG11_OUTCFG44_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG11_OUTCFG44_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG11_OUTCFG44_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG11_OUTCFG44_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG11_OUTCFG44_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG11_OUTCFG44_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG11_OUTCFG44_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG11_OUTCFG44_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG11_OUTCFG44_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG11_OUTCFG44_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG11_OUTCFG44_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG11_OUTCFG44_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG11_OUTCFG44_Enum;

/* =======================================================  OUTCFG12  ======================================================== */
/* ==========================================  CM4TIMER OUTCFG12 OUTCFG51 [24..29]  ========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG12_OUTCFG51                                                */
  CM4TIMER_OUTCFG12_OUTCFG51_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG12_OUTCFG51_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG12_OUTCFG51_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG12_OUTCFG51_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG12_OUTCFG51_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG12_OUTCFG51_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG12_OUTCFG51_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG12_OUTCFG51_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG12_OUTCFG51_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG12_OUTCFG51_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG12_OUTCFG51_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG12_OUTCFG51_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG12_OUTCFG51_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG12_OUTCFG51_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG12_OUTCFG51_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG12_OUTCFG51_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG12_OUTCFG51_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG12_OUTCFG51_Enum;

/* ==========================================  CM4TIMER OUTCFG12 OUTCFG50 [16..21]  ========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG12_OUTCFG50                                                */
  CM4TIMER_OUTCFG12_OUTCFG50_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG12_OUTCFG50_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG12_OUTCFG50_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG12_OUTCFG50_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG12_OUTCFG50_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG12_OUTCFG50_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG12_OUTCFG50_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG12_OUTCFG50_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG12_OUTCFG50_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG12_OUTCFG50_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG12_OUTCFG50_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG12_OUTCFG50_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG12_OUTCFG50_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG12_OUTCFG50_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG12_OUTCFG50_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG12_OUTCFG50_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG12_OUTCFG50_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG12_OUTCFG50_Enum;

/* ==========================================  CM4TIMER OUTCFG12 OUTCFG49 [8..13]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG12_OUTCFG49                                                */
  CM4TIMER_OUTCFG12_OUTCFG49_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG12_OUTCFG49_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG12_OUTCFG49_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG12_OUTCFG49_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG12_OUTCFG49_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG12_OUTCFG49_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG12_OUTCFG49_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG12_OUTCFG49_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG12_OUTCFG49_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG12_OUTCFG49_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG12_OUTCFG49_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG12_OUTCFG49_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG12_OUTCFG49_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG12_OUTCFG49_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG12_OUTCFG49_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG12_OUTCFG49_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG12_OUTCFG49_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG12_OUTCFG49_Enum;

/* ===========================================  CM4TIMER OUTCFG12 OUTCFG48 [0..5]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG12_OUTCFG48                                                */
  CM4TIMER_OUTCFG12_OUTCFG48_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG12_OUTCFG48_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG12_OUTCFG48_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG12_OUTCFG48_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG12_OUTCFG48_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG12_OUTCFG48_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG12_OUTCFG48_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG12_OUTCFG48_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG12_OUTCFG48_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG12_OUTCFG48_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG12_OUTCFG48_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG12_OUTCFG48_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG12_OUTCFG48_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG12_OUTCFG48_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG12_OUTCFG48_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG12_OUTCFG48_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG12_OUTCFG48_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG12_OUTCFG48_Enum;

/* =======================================================  OUTCFG13  ======================================================== */
/* ==========================================  CM4TIMER OUTCFG13 OUTCFG55 [24..29]  ========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG13_OUTCFG55                                                */
  CM4TIMER_OUTCFG13_OUTCFG55_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG13_OUTCFG55_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG13_OUTCFG55_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG13_OUTCFG55_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG13_OUTCFG55_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG13_OUTCFG55_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG13_OUTCFG55_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG13_OUTCFG55_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG13_OUTCFG55_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG13_OUTCFG55_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG13_OUTCFG55_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG13_OUTCFG55_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG13_OUTCFG55_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG13_OUTCFG55_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG13_OUTCFG55_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG13_OUTCFG55_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG13_OUTCFG55_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG13_OUTCFG55_Enum;

/* ==========================================  CM4TIMER OUTCFG13 OUTCFG54 [16..21]  ========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG13_OUTCFG54                                                */
  CM4TIMER_OUTCFG13_OUTCFG54_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG13_OUTCFG54_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG13_OUTCFG54_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG13_OUTCFG54_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG13_OUTCFG54_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG13_OUTCFG54_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG13_OUTCFG54_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG13_OUTCFG54_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG13_OUTCFG54_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG13_OUTCFG54_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG13_OUTCFG54_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG13_OUTCFG54_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG13_OUTCFG54_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG13_OUTCFG54_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG13_OUTCFG54_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG13_OUTCFG54_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG13_OUTCFG54_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG13_OUTCFG54_Enum;

/* ==========================================  CM4TIMER OUTCFG13 OUTCFG53 [8..13]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG13_OUTCFG53                                                */
  CM4TIMER_OUTCFG13_OUTCFG53_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG13_OUTCFG53_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG13_OUTCFG53_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG13_OUTCFG53_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG13_OUTCFG53_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG13_OUTCFG53_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG13_OUTCFG53_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG13_OUTCFG53_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG13_OUTCFG53_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG13_OUTCFG53_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG13_OUTCFG53_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG13_OUTCFG53_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG13_OUTCFG53_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG13_OUTCFG53_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG13_OUTCFG53_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG13_OUTCFG53_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG13_OUTCFG53_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG13_OUTCFG53_Enum;

/* ===========================================  CM4TIMER OUTCFG13 OUTCFG52 [0..5]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG13_OUTCFG52                                                */
  CM4TIMER_OUTCFG13_OUTCFG52_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG13_OUTCFG52_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG13_OUTCFG52_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG13_OUTCFG52_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG13_OUTCFG52_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG13_OUTCFG52_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG13_OUTCFG52_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG13_OUTCFG52_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG13_OUTCFG52_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG13_OUTCFG52_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG13_OUTCFG52_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG13_OUTCFG52_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG13_OUTCFG52_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG13_OUTCFG52_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG13_OUTCFG52_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG13_OUTCFG52_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG13_OUTCFG52_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG13_OUTCFG52_Enum;

/* =======================================================  OUTCFG14  ======================================================== */
/* ==========================================  CM4TIMER OUTCFG14 OUTCFG59 [24..29]  ========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG14_OUTCFG59                                                */
  CM4TIMER_OUTCFG14_OUTCFG59_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG14_OUTCFG59_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG14_OUTCFG59_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG14_OUTCFG59_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG14_OUTCFG59_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG14_OUTCFG59_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG14_OUTCFG59_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG14_OUTCFG59_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG14_OUTCFG59_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG14_OUTCFG59_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG14_OUTCFG59_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG14_OUTCFG59_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG14_OUTCFG59_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG14_OUTCFG59_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG14_OUTCFG59_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG14_OUTCFG59_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG14_OUTCFG59_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG14_OUTCFG59_Enum;

/* ==========================================  CM4TIMER OUTCFG14 OUTCFG58 [16..21]  ========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG14_OUTCFG58                                                */
  CM4TIMER_OUTCFG14_OUTCFG58_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG14_OUTCFG58_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG14_OUTCFG58_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG14_OUTCFG58_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG14_OUTCFG58_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG14_OUTCFG58_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG14_OUTCFG58_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG14_OUTCFG58_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG14_OUTCFG58_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG14_OUTCFG58_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG14_OUTCFG58_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG14_OUTCFG58_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG14_OUTCFG58_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG14_OUTCFG58_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG14_OUTCFG58_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG14_OUTCFG58_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG14_OUTCFG58_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG14_OUTCFG58_Enum;

/* ==========================================  CM4TIMER OUTCFG14 OUTCFG57 [8..13]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG14_OUTCFG57                                                */
  CM4TIMER_OUTCFG14_OUTCFG57_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG14_OUTCFG57_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG14_OUTCFG57_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG14_OUTCFG57_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG14_OUTCFG57_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG14_OUTCFG57_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG14_OUTCFG57_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG14_OUTCFG57_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG14_OUTCFG57_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG14_OUTCFG57_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG14_OUTCFG57_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG14_OUTCFG57_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG14_OUTCFG57_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG14_OUTCFG57_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG14_OUTCFG57_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG14_OUTCFG57_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG14_OUTCFG57_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG14_OUTCFG57_Enum;

/* ===========================================  CM4TIMER OUTCFG14 OUTCFG56 [0..5]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG14_OUTCFG56                                                */
  CM4TIMER_OUTCFG14_OUTCFG56_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG14_OUTCFG56_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG14_OUTCFG56_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG14_OUTCFG56_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG14_OUTCFG56_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG14_OUTCFG56_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG14_OUTCFG56_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG14_OUTCFG56_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG14_OUTCFG56_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG14_OUTCFG56_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG14_OUTCFG56_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG14_OUTCFG56_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG14_OUTCFG56_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG14_OUTCFG56_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG14_OUTCFG56_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG14_OUTCFG56_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG14_OUTCFG56_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG14_OUTCFG56_Enum;

/* =======================================================  OUTCFG15  ======================================================== */
/* ==========================================  CM4TIMER OUTCFG15 OUTCFG63 [24..29]  ========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG15_OUTCFG63                                                */
  CM4TIMER_OUTCFG15_OUTCFG63_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG15_OUTCFG63_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG15_OUTCFG63_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG15_OUTCFG63_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG15_OUTCFG63_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG15_OUTCFG63_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG15_OUTCFG63_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG15_OUTCFG63_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG15_OUTCFG63_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG15_OUTCFG63_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG15_OUTCFG63_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG15_OUTCFG63_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG15_OUTCFG63_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG15_OUTCFG63_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG15_OUTCFG63_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG15_OUTCFG63_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG15_OUTCFG63_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG15_OUTCFG63_Enum;

/* ==========================================  CM4TIMER OUTCFG15 OUTCFG62 [16..21]  ========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG15_OUTCFG62                                                */
  CM4TIMER_OUTCFG15_OUTCFG62_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG15_OUTCFG62_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG15_OUTCFG62_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG15_OUTCFG62_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG15_OUTCFG62_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG15_OUTCFG62_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG15_OUTCFG62_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG15_OUTCFG62_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG15_OUTCFG62_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG15_OUTCFG62_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG15_OUTCFG62_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG15_OUTCFG62_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG15_OUTCFG62_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG15_OUTCFG62_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG15_OUTCFG62_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG15_OUTCFG62_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG15_OUTCFG62_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG15_OUTCFG62_Enum;

/* ==========================================  CM4TIMER OUTCFG15 OUTCFG61 [8..13]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG15_OUTCFG61                                                */
  CM4TIMER_OUTCFG15_OUTCFG61_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG15_OUTCFG61_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG15_OUTCFG61_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG15_OUTCFG61_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG15_OUTCFG61_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG15_OUTCFG61_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG15_OUTCFG61_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG15_OUTCFG61_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG15_OUTCFG61_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG15_OUTCFG61_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG15_OUTCFG61_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG15_OUTCFG61_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG15_OUTCFG61_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG15_OUTCFG61_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG15_OUTCFG61_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG15_OUTCFG61_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG15_OUTCFG61_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG15_OUTCFG61_Enum;

/* ===========================================  CM4TIMER OUTCFG15 OUTCFG60 [0..5]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG15_OUTCFG60                                                */
  CM4TIMER_OUTCFG15_OUTCFG60_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG15_OUTCFG60_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG15_OUTCFG60_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG15_OUTCFG60_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG15_OUTCFG60_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG15_OUTCFG60_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG15_OUTCFG60_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG15_OUTCFG60_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG15_OUTCFG60_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG15_OUTCFG60_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG15_OUTCFG60_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG15_OUTCFG60_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG15_OUTCFG60_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG15_OUTCFG60_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG15_OUTCFG60_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG15_OUTCFG60_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG15_OUTCFG60_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG15_OUTCFG60_Enum;

/* =======================================================  OUTCFG16  ======================================================== */
/* ==========================================  CM4TIMER OUTCFG16 OUTCFG67 [24..29]  ========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG16_OUTCFG67                                                */
  CM4TIMER_OUTCFG16_OUTCFG67_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG16_OUTCFG67_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG16_OUTCFG67_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG16_OUTCFG67_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG16_OUTCFG67_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG16_OUTCFG67_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG16_OUTCFG67_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG16_OUTCFG67_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG16_OUTCFG67_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG16_OUTCFG67_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG16_OUTCFG67_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG16_OUTCFG67_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG16_OUTCFG67_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG16_OUTCFG67_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG16_OUTCFG67_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG16_OUTCFG67_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG16_OUTCFG67_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG16_OUTCFG67_Enum;

/* ==========================================  CM4TIMER OUTCFG16 OUTCFG66 [16..21]  ========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG16_OUTCFG66                                                */
  CM4TIMER_OUTCFG16_OUTCFG66_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG16_OUTCFG66_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG16_OUTCFG66_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG16_OUTCFG66_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG16_OUTCFG66_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG16_OUTCFG66_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG16_OUTCFG66_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG16_OUTCFG66_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG16_OUTCFG66_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG16_OUTCFG66_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG16_OUTCFG66_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG16_OUTCFG66_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG16_OUTCFG66_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG16_OUTCFG66_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG16_OUTCFG66_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG16_OUTCFG66_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG16_OUTCFG66_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG16_OUTCFG66_Enum;

/* ==========================================  CM4TIMER OUTCFG16 OUTCFG65 [8..13]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG16_OUTCFG65                                                */
  CM4TIMER_OUTCFG16_OUTCFG65_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG16_OUTCFG65_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG16_OUTCFG65_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG16_OUTCFG65_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG16_OUTCFG65_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG16_OUTCFG65_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG16_OUTCFG65_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG16_OUTCFG65_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG16_OUTCFG65_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG16_OUTCFG65_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG16_OUTCFG65_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG16_OUTCFG65_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG16_OUTCFG65_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG16_OUTCFG65_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG16_OUTCFG65_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG16_OUTCFG65_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG16_OUTCFG65_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG16_OUTCFG65_Enum;

/* ===========================================  CM4TIMER OUTCFG16 OUTCFG64 [0..5]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG16_OUTCFG64                                                */
  CM4TIMER_OUTCFG16_OUTCFG64_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG16_OUTCFG64_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG16_OUTCFG64_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG16_OUTCFG64_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG16_OUTCFG64_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG16_OUTCFG64_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG16_OUTCFG64_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG16_OUTCFG64_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG16_OUTCFG64_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG16_OUTCFG64_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG16_OUTCFG64_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG16_OUTCFG64_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG16_OUTCFG64_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG16_OUTCFG64_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG16_OUTCFG64_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG16_OUTCFG64_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG16_OUTCFG64_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG16_OUTCFG64_Enum;

/* =======================================================  OUTCFG17  ======================================================== */
/* ==========================================  CM4TIMER OUTCFG17 OUTCFG71 [24..29]  ========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG17_OUTCFG71                                                */
  CM4TIMER_OUTCFG17_OUTCFG71_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG17_OUTCFG71_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG17_OUTCFG71_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG17_OUTCFG71_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG17_OUTCFG71_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG17_OUTCFG71_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG17_OUTCFG71_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG17_OUTCFG71_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG17_OUTCFG71_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG17_OUTCFG71_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG17_OUTCFG71_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG17_OUTCFG71_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG17_OUTCFG71_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG17_OUTCFG71_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG17_OUTCFG71_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG17_OUTCFG71_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG17_OUTCFG71_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG17_OUTCFG71_Enum;

/* ==========================================  CM4TIMER OUTCFG17 OUTCFG70 [16..21]  ========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG17_OUTCFG70                                                */
  CM4TIMER_OUTCFG17_OUTCFG70_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG17_OUTCFG70_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG17_OUTCFG70_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG17_OUTCFG70_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG17_OUTCFG70_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG17_OUTCFG70_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG17_OUTCFG70_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG17_OUTCFG70_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG17_OUTCFG70_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG17_OUTCFG70_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG17_OUTCFG70_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG17_OUTCFG70_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG17_OUTCFG70_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG17_OUTCFG70_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG17_OUTCFG70_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG17_OUTCFG70_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG17_OUTCFG70_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG17_OUTCFG70_Enum;

/* ==========================================  CM4TIMER OUTCFG17 OUTCFG69 [8..13]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG17_OUTCFG69                                                */
  CM4TIMER_OUTCFG17_OUTCFG69_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG17_OUTCFG69_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG17_OUTCFG69_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG17_OUTCFG69_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG17_OUTCFG69_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG17_OUTCFG69_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG17_OUTCFG69_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG17_OUTCFG69_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG17_OUTCFG69_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG17_OUTCFG69_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG17_OUTCFG69_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG17_OUTCFG69_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG17_OUTCFG69_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG17_OUTCFG69_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG17_OUTCFG69_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG17_OUTCFG69_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG17_OUTCFG69_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG17_OUTCFG69_Enum;

/* ===========================================  CM4TIMER OUTCFG17 OUTCFG68 [0..5]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG17_OUTCFG68                                                */
  CM4TIMER_OUTCFG17_OUTCFG68_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG17_OUTCFG68_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG17_OUTCFG68_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG17_OUTCFG68_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG17_OUTCFG68_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG17_OUTCFG68_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG17_OUTCFG68_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG17_OUTCFG68_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG17_OUTCFG68_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG17_OUTCFG68_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG17_OUTCFG68_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG17_OUTCFG68_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG17_OUTCFG68_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG17_OUTCFG68_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG17_OUTCFG68_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG17_OUTCFG68_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG17_OUTCFG68_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG17_OUTCFG68_Enum;

/* =======================================================  OUTCFG18  ======================================================== */
/* ==========================================  CM4TIMER OUTCFG18 OUTCFG75 [24..29]  ========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG18_OUTCFG75                                                */
  CM4TIMER_OUTCFG18_OUTCFG75_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG18_OUTCFG75_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG18_OUTCFG75_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG18_OUTCFG75_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG18_OUTCFG75_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG18_OUTCFG75_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG18_OUTCFG75_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG18_OUTCFG75_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG18_OUTCFG75_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG18_OUTCFG75_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG18_OUTCFG75_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG18_OUTCFG75_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG18_OUTCFG75_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG18_OUTCFG75_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG18_OUTCFG75_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG18_OUTCFG75_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG18_OUTCFG75_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG18_OUTCFG75_Enum;

/* ==========================================  CM4TIMER OUTCFG18 OUTCFG74 [16..21]  ========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG18_OUTCFG74                                                */
  CM4TIMER_OUTCFG18_OUTCFG74_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG18_OUTCFG74_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG18_OUTCFG74_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG18_OUTCFG74_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG18_OUTCFG74_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG18_OUTCFG74_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG18_OUTCFG74_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG18_OUTCFG74_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG18_OUTCFG74_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG18_OUTCFG74_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG18_OUTCFG74_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG18_OUTCFG74_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG18_OUTCFG74_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG18_OUTCFG74_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG18_OUTCFG74_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG18_OUTCFG74_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG18_OUTCFG74_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG18_OUTCFG74_Enum;

/* ==========================================  CM4TIMER OUTCFG18 OUTCFG73 [8..13]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG18_OUTCFG73                                                */
  CM4TIMER_OUTCFG18_OUTCFG73_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG18_OUTCFG73_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG18_OUTCFG73_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG18_OUTCFG73_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG18_OUTCFG73_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG18_OUTCFG73_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG18_OUTCFG73_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG18_OUTCFG73_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG18_OUTCFG73_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG18_OUTCFG73_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG18_OUTCFG73_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG18_OUTCFG73_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG18_OUTCFG73_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG18_OUTCFG73_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG18_OUTCFG73_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG18_OUTCFG73_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG18_OUTCFG73_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG18_OUTCFG73_Enum;

/* ===========================================  CM4TIMER OUTCFG18 OUTCFG72 [0..5]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG18_OUTCFG72                                                */
  CM4TIMER_OUTCFG18_OUTCFG72_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG18_OUTCFG72_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG18_OUTCFG72_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG18_OUTCFG72_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG18_OUTCFG72_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG18_OUTCFG72_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG18_OUTCFG72_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG18_OUTCFG72_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG18_OUTCFG72_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG18_OUTCFG72_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG18_OUTCFG72_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG18_OUTCFG72_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG18_OUTCFG72_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG18_OUTCFG72_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG18_OUTCFG72_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG18_OUTCFG72_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG18_OUTCFG72_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG18_OUTCFG72_Enum;

/* =======================================================  OUTCFG19  ======================================================== */
/* ==========================================  CM4TIMER OUTCFG19 OUTCFG79 [24..29]  ========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG19_OUTCFG79                                                */
  CM4TIMER_OUTCFG19_OUTCFG79_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG19_OUTCFG79_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG19_OUTCFG79_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG19_OUTCFG79_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG19_OUTCFG79_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG19_OUTCFG79_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG19_OUTCFG79_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG19_OUTCFG79_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG19_OUTCFG79_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG19_OUTCFG79_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG19_OUTCFG79_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG19_OUTCFG79_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG19_OUTCFG79_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG19_OUTCFG79_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG19_OUTCFG79_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG19_OUTCFG79_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG19_OUTCFG79_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG19_OUTCFG79_Enum;

/* ==========================================  CM4TIMER OUTCFG19 OUTCFG78 [16..21]  ========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG19_OUTCFG78                                                */
  CM4TIMER_OUTCFG19_OUTCFG78_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG19_OUTCFG78_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG19_OUTCFG78_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG19_OUTCFG78_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG19_OUTCFG78_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG19_OUTCFG78_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG19_OUTCFG78_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG19_OUTCFG78_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG19_OUTCFG78_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG19_OUTCFG78_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG19_OUTCFG78_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG19_OUTCFG78_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG19_OUTCFG78_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG19_OUTCFG78_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG19_OUTCFG78_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG19_OUTCFG78_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG19_OUTCFG78_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG19_OUTCFG78_Enum;

/* ==========================================  CM4TIMER OUTCFG19 OUTCFG77 [8..13]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG19_OUTCFG77                                                */
  CM4TIMER_OUTCFG19_OUTCFG77_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG19_OUTCFG77_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG19_OUTCFG77_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG19_OUTCFG77_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG19_OUTCFG77_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG19_OUTCFG77_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG19_OUTCFG77_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG19_OUTCFG77_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG19_OUTCFG77_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG19_OUTCFG77_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG19_OUTCFG77_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG19_OUTCFG77_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG19_OUTCFG77_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG19_OUTCFG77_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG19_OUTCFG77_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG19_OUTCFG77_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG19_OUTCFG77_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG19_OUTCFG77_Enum;

/* ===========================================  CM4TIMER OUTCFG19 OUTCFG76 [0..5]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG19_OUTCFG76                                                */
  CM4TIMER_OUTCFG19_OUTCFG76_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG19_OUTCFG76_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG19_OUTCFG76_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG19_OUTCFG76_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG19_OUTCFG76_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG19_OUTCFG76_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG19_OUTCFG76_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG19_OUTCFG76_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG19_OUTCFG76_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG19_OUTCFG76_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG19_OUTCFG76_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG19_OUTCFG76_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG19_OUTCFG76_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG19_OUTCFG76_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG19_OUTCFG76_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG19_OUTCFG76_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG19_OUTCFG76_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG19_OUTCFG76_Enum;

/* =======================================================  OUTCFG20  ======================================================== */
/* ==========================================  CM4TIMER OUTCFG20 OUTCFG83 [24..29]  ========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG20_OUTCFG83                                                */
  CM4TIMER_OUTCFG20_OUTCFG83_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG20_OUTCFG83_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG20_OUTCFG83_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG20_OUTCFG83_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG20_OUTCFG83_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG20_OUTCFG83_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG20_OUTCFG83_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG20_OUTCFG83_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG20_OUTCFG83_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG20_OUTCFG83_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG20_OUTCFG83_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG20_OUTCFG83_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG20_OUTCFG83_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG20_OUTCFG83_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG20_OUTCFG83_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG20_OUTCFG83_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG20_OUTCFG83_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG20_OUTCFG83_Enum;

/* ==========================================  CM4TIMER OUTCFG20 OUTCFG82 [16..21]  ========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG20_OUTCFG82                                                */
  CM4TIMER_OUTCFG20_OUTCFG82_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG20_OUTCFG82_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG20_OUTCFG82_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG20_OUTCFG82_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG20_OUTCFG82_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG20_OUTCFG82_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG20_OUTCFG82_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG20_OUTCFG82_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG20_OUTCFG82_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG20_OUTCFG82_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG20_OUTCFG82_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG20_OUTCFG82_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG20_OUTCFG82_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG20_OUTCFG82_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG20_OUTCFG82_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG20_OUTCFG82_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG20_OUTCFG82_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG20_OUTCFG82_Enum;

/* ==========================================  CM4TIMER OUTCFG20 OUTCFG81 [8..13]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG20_OUTCFG81                                                */
  CM4TIMER_OUTCFG20_OUTCFG81_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG20_OUTCFG81_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG20_OUTCFG81_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG20_OUTCFG81_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG20_OUTCFG81_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG20_OUTCFG81_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG20_OUTCFG81_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG20_OUTCFG81_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG20_OUTCFG81_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG20_OUTCFG81_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG20_OUTCFG81_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG20_OUTCFG81_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG20_OUTCFG81_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG20_OUTCFG81_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG20_OUTCFG81_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG20_OUTCFG81_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG20_OUTCFG81_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG20_OUTCFG81_Enum;

/* ===========================================  CM4TIMER OUTCFG20 OUTCFG80 [0..5]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG20_OUTCFG80                                                */
  CM4TIMER_OUTCFG20_OUTCFG80_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG20_OUTCFG80_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG20_OUTCFG80_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG20_OUTCFG80_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG20_OUTCFG80_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG20_OUTCFG80_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG20_OUTCFG80_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG20_OUTCFG80_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG20_OUTCFG80_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG20_OUTCFG80_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG20_OUTCFG80_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG20_OUTCFG80_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG20_OUTCFG80_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG20_OUTCFG80_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG20_OUTCFG80_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG20_OUTCFG80_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG20_OUTCFG80_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG20_OUTCFG80_Enum;

/* =======================================================  OUTCFG21  ======================================================== */
/* ==========================================  CM4TIMER OUTCFG21 OUTCFG87 [24..29]  ========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG21_OUTCFG87                                                */
  CM4TIMER_OUTCFG21_OUTCFG87_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG21_OUTCFG87_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG21_OUTCFG87_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG21_OUTCFG87_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG21_OUTCFG87_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG21_OUTCFG87_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG21_OUTCFG87_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG21_OUTCFG87_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG21_OUTCFG87_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG21_OUTCFG87_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG21_OUTCFG87_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG21_OUTCFG87_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG21_OUTCFG87_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG21_OUTCFG87_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG21_OUTCFG87_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG21_OUTCFG87_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG21_OUTCFG87_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG21_OUTCFG87_Enum;

/* ==========================================  CM4TIMER OUTCFG21 OUTCFG86 [16..21]  ========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG21_OUTCFG86                                                */
  CM4TIMER_OUTCFG21_OUTCFG86_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG21_OUTCFG86_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG21_OUTCFG86_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG21_OUTCFG86_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG21_OUTCFG86_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG21_OUTCFG86_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG21_OUTCFG86_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG21_OUTCFG86_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG21_OUTCFG86_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG21_OUTCFG86_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG21_OUTCFG86_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG21_OUTCFG86_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG21_OUTCFG86_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG21_OUTCFG86_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG21_OUTCFG86_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG21_OUTCFG86_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG21_OUTCFG86_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG21_OUTCFG86_Enum;

/* ==========================================  CM4TIMER OUTCFG21 OUTCFG85 [8..13]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG21_OUTCFG85                                                */
  CM4TIMER_OUTCFG21_OUTCFG85_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG21_OUTCFG85_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG21_OUTCFG85_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG21_OUTCFG85_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG21_OUTCFG85_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG21_OUTCFG85_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG21_OUTCFG85_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG21_OUTCFG85_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG21_OUTCFG85_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG21_OUTCFG85_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG21_OUTCFG85_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG21_OUTCFG85_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG21_OUTCFG85_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG21_OUTCFG85_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG21_OUTCFG85_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG21_OUTCFG85_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG21_OUTCFG85_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG21_OUTCFG85_Enum;

/* ===========================================  CM4TIMER OUTCFG21 OUTCFG84 [0..5]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG21_OUTCFG84                                                */
  CM4TIMER_OUTCFG21_OUTCFG84_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG21_OUTCFG84_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG21_OUTCFG84_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG21_OUTCFG84_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG21_OUTCFG84_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG21_OUTCFG84_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG21_OUTCFG84_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG21_OUTCFG84_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG21_OUTCFG84_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG21_OUTCFG84_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG21_OUTCFG84_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG21_OUTCFG84_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG21_OUTCFG84_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG21_OUTCFG84_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG21_OUTCFG84_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG21_OUTCFG84_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG21_OUTCFG84_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG21_OUTCFG84_Enum;

/* =======================================================  OUTCFG22  ======================================================== */
/* ==========================================  CM4TIMER OUTCFG22 OUTCFG91 [24..29]  ========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG22_OUTCFG91                                                */
  CM4TIMER_OUTCFG22_OUTCFG91_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG22_OUTCFG91_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG22_OUTCFG91_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG22_OUTCFG91_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG22_OUTCFG91_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG22_OUTCFG91_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG22_OUTCFG91_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG22_OUTCFG91_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG22_OUTCFG91_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG22_OUTCFG91_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG22_OUTCFG91_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG22_OUTCFG91_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG22_OUTCFG91_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG22_OUTCFG91_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG22_OUTCFG91_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG22_OUTCFG91_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG22_OUTCFG91_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG22_OUTCFG91_Enum;

/* ==========================================  CM4TIMER OUTCFG22 OUTCFG90 [16..21]  ========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG22_OUTCFG90                                                */
  CM4TIMER_OUTCFG22_OUTCFG90_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG22_OUTCFG90_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG22_OUTCFG90_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG22_OUTCFG90_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG22_OUTCFG90_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG22_OUTCFG90_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG22_OUTCFG90_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG22_OUTCFG90_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG22_OUTCFG90_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG22_OUTCFG90_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG22_OUTCFG90_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG22_OUTCFG90_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG22_OUTCFG90_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG22_OUTCFG90_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG22_OUTCFG90_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG22_OUTCFG90_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG22_OUTCFG90_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG22_OUTCFG90_Enum;

/* ==========================================  CM4TIMER OUTCFG22 OUTCFG89 [8..13]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG22_OUTCFG89                                                */
  CM4TIMER_OUTCFG22_OUTCFG89_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG22_OUTCFG89_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG22_OUTCFG89_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG22_OUTCFG89_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG22_OUTCFG89_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG22_OUTCFG89_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG22_OUTCFG89_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG22_OUTCFG89_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG22_OUTCFG89_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG22_OUTCFG89_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG22_OUTCFG89_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG22_OUTCFG89_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG22_OUTCFG89_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG22_OUTCFG89_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG22_OUTCFG89_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG22_OUTCFG89_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG22_OUTCFG89_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG22_OUTCFG89_Enum;

/* ===========================================  CM4TIMER OUTCFG22 OUTCFG88 [0..5]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG22_OUTCFG88                                                */
  CM4TIMER_OUTCFG22_OUTCFG88_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG22_OUTCFG88_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG22_OUTCFG88_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG22_OUTCFG88_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG22_OUTCFG88_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG22_OUTCFG88_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG22_OUTCFG88_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG22_OUTCFG88_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG22_OUTCFG88_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG22_OUTCFG88_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG22_OUTCFG88_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG22_OUTCFG88_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG22_OUTCFG88_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG22_OUTCFG88_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG22_OUTCFG88_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG22_OUTCFG88_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG22_OUTCFG88_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG22_OUTCFG88_Enum;

/* =======================================================  OUTCFG23  ======================================================== */
/* ==========================================  CM4TIMER OUTCFG23 OUTCFG95 [24..29]  ========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG23_OUTCFG95                                                */
  CM4TIMER_OUTCFG23_OUTCFG95_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG23_OUTCFG95_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG23_OUTCFG95_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG23_OUTCFG95_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG23_OUTCFG95_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG23_OUTCFG95_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG23_OUTCFG95_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG23_OUTCFG95_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG23_OUTCFG95_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG23_OUTCFG95_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG23_OUTCFG95_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG23_OUTCFG95_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG23_OUTCFG95_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG23_OUTCFG95_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG23_OUTCFG95_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG23_OUTCFG95_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG23_OUTCFG95_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG23_OUTCFG95_Enum;

/* ==========================================  CM4TIMER OUTCFG23 OUTCFG94 [16..21]  ========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG23_OUTCFG94                                                */
  CM4TIMER_OUTCFG23_OUTCFG94_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG23_OUTCFG94_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG23_OUTCFG94_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG23_OUTCFG94_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG23_OUTCFG94_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG23_OUTCFG94_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG23_OUTCFG94_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG23_OUTCFG94_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG23_OUTCFG94_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG23_OUTCFG94_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG23_OUTCFG94_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG23_OUTCFG94_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG23_OUTCFG94_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG23_OUTCFG94_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG23_OUTCFG94_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG23_OUTCFG94_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG23_OUTCFG94_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG23_OUTCFG94_Enum;

/* ==========================================  CM4TIMER OUTCFG23 OUTCFG93 [8..13]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG23_OUTCFG93                                                */
  CM4TIMER_OUTCFG23_OUTCFG93_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG23_OUTCFG93_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG23_OUTCFG93_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG23_OUTCFG93_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG23_OUTCFG93_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG23_OUTCFG93_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG23_OUTCFG93_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG23_OUTCFG93_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG23_OUTCFG93_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG23_OUTCFG93_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG23_OUTCFG93_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG23_OUTCFG93_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG23_OUTCFG93_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG23_OUTCFG93_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG23_OUTCFG93_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG23_OUTCFG93_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG23_OUTCFG93_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG23_OUTCFG93_Enum;

/* ===========================================  CM4TIMER OUTCFG23 OUTCFG92 [0..5]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG23_OUTCFG92                                                */
  CM4TIMER_OUTCFG23_OUTCFG92_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG23_OUTCFG92_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG23_OUTCFG92_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG23_OUTCFG92_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG23_OUTCFG92_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG23_OUTCFG92_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG23_OUTCFG92_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG23_OUTCFG92_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG23_OUTCFG92_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG23_OUTCFG92_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG23_OUTCFG92_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG23_OUTCFG92_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG23_OUTCFG92_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG23_OUTCFG92_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG23_OUTCFG92_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG23_OUTCFG92_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG23_OUTCFG92_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG23_OUTCFG92_Enum;

/* =======================================================  OUTCFG24  ======================================================== */
/* ==========================================  CM4TIMER OUTCFG24 OUTCFG99 [24..29]  ========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG24_OUTCFG99                                                */
  CM4TIMER_OUTCFG24_OUTCFG99_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG24_OUTCFG99_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG24_OUTCFG99_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG24_OUTCFG99_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG24_OUTCFG99_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG24_OUTCFG99_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG24_OUTCFG99_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG24_OUTCFG99_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG24_OUTCFG99_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG24_OUTCFG99_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG24_OUTCFG99_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG24_OUTCFG99_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG24_OUTCFG99_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG24_OUTCFG99_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG24_OUTCFG99_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG24_OUTCFG99_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG24_OUTCFG99_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG24_OUTCFG99_Enum;

/* ==========================================  CM4TIMER OUTCFG24 OUTCFG98 [16..21]  ========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG24_OUTCFG98                                                */
  CM4TIMER_OUTCFG24_OUTCFG98_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG24_OUTCFG98_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG24_OUTCFG98_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG24_OUTCFG98_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG24_OUTCFG98_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG24_OUTCFG98_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG24_OUTCFG98_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG24_OUTCFG98_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG24_OUTCFG98_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG24_OUTCFG98_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG24_OUTCFG98_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG24_OUTCFG98_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG24_OUTCFG98_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG24_OUTCFG98_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG24_OUTCFG98_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG24_OUTCFG98_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG24_OUTCFG98_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG24_OUTCFG98_Enum;

/* ==========================================  CM4TIMER OUTCFG24 OUTCFG97 [8..13]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG24_OUTCFG97                                                */
  CM4TIMER_OUTCFG24_OUTCFG97_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG24_OUTCFG97_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG24_OUTCFG97_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG24_OUTCFG97_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG24_OUTCFG97_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG24_OUTCFG97_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG24_OUTCFG97_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG24_OUTCFG97_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG24_OUTCFG97_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG24_OUTCFG97_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG24_OUTCFG97_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG24_OUTCFG97_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG24_OUTCFG97_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG24_OUTCFG97_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG24_OUTCFG97_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG24_OUTCFG97_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG24_OUTCFG97_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG24_OUTCFG97_Enum;

/* ===========================================  CM4TIMER OUTCFG24 OUTCFG96 [0..5]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG24_OUTCFG96                                                */
  CM4TIMER_OUTCFG24_OUTCFG96_TIMER00   = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG24_OUTCFG96_TIMER01   = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG24_OUTCFG96_TIMER10   = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG24_OUTCFG96_TIMER11   = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG24_OUTCFG96_TIMER20   = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG24_OUTCFG96_TIMER21   = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG24_OUTCFG96_TIMER30   = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG24_OUTCFG96_TIMER31   = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG24_OUTCFG96_STIMER0   = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG24_OUTCFG96_STIMER1   = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG24_OUTCFG96_STIMER2   = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG24_OUTCFG96_STIMER3   = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG24_OUTCFG96_STIMER4   = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG24_OUTCFG96_STIMER5   = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG24_OUTCFG96_STIMER6   = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG24_OUTCFG96_STIMER7   = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG24_OUTCFG96_DISABLED  = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG24_OUTCFG96_Enum;

/* =======================================================  OUTCFG25  ======================================================== */
/* =========================================  CM4TIMER OUTCFG25 OUTCFG103 [24..29]  ========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG25_OUTCFG103                                               */
  CM4TIMER_OUTCFG25_OUTCFG103_TIMER00  = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG25_OUTCFG103_TIMER01  = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG25_OUTCFG103_TIMER10  = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG25_OUTCFG103_TIMER11  = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG25_OUTCFG103_TIMER20  = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG25_OUTCFG103_TIMER21  = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG25_OUTCFG103_TIMER30  = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG25_OUTCFG103_TIMER31  = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG25_OUTCFG103_STIMER0  = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG25_OUTCFG103_STIMER1  = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG25_OUTCFG103_STIMER2  = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG25_OUTCFG103_STIMER3  = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG25_OUTCFG103_STIMER4  = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG25_OUTCFG103_STIMER5  = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG25_OUTCFG103_STIMER6  = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG25_OUTCFG103_STIMER7  = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG25_OUTCFG103_DISABLED = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG25_OUTCFG103_Enum;

/* =========================================  CM4TIMER OUTCFG25 OUTCFG102 [16..21]  ========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG25_OUTCFG102                                               */
  CM4TIMER_OUTCFG25_OUTCFG102_TIMER00  = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG25_OUTCFG102_TIMER01  = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG25_OUTCFG102_TIMER10  = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG25_OUTCFG102_TIMER11  = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG25_OUTCFG102_TIMER20  = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG25_OUTCFG102_TIMER21  = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG25_OUTCFG102_TIMER30  = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG25_OUTCFG102_TIMER31  = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG25_OUTCFG102_STIMER0  = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG25_OUTCFG102_STIMER1  = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG25_OUTCFG102_STIMER2  = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG25_OUTCFG102_STIMER3  = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG25_OUTCFG102_STIMER4  = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG25_OUTCFG102_STIMER5  = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG25_OUTCFG102_STIMER6  = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG25_OUTCFG102_STIMER7  = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG25_OUTCFG102_DISABLED = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG25_OUTCFG102_Enum;

/* ==========================================  CM4TIMER OUTCFG25 OUTCFG101 [8..13]  ========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG25_OUTCFG101                                               */
  CM4TIMER_OUTCFG25_OUTCFG101_TIMER00  = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG25_OUTCFG101_TIMER01  = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG25_OUTCFG101_TIMER10  = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG25_OUTCFG101_TIMER11  = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG25_OUTCFG101_TIMER20  = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG25_OUTCFG101_TIMER21  = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG25_OUTCFG101_TIMER30  = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG25_OUTCFG101_TIMER31  = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG25_OUTCFG101_STIMER0  = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG25_OUTCFG101_STIMER1  = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG25_OUTCFG101_STIMER2  = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG25_OUTCFG101_STIMER3  = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG25_OUTCFG101_STIMER4  = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG25_OUTCFG101_STIMER5  = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG25_OUTCFG101_STIMER6  = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG25_OUTCFG101_STIMER7  = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG25_OUTCFG101_DISABLED = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG25_OUTCFG101_Enum;

/* ==========================================  CM4TIMER OUTCFG25 OUTCFG100 [0..5]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG25_OUTCFG100                                               */
  CM4TIMER_OUTCFG25_OUTCFG100_TIMER00  = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG25_OUTCFG100_TIMER01  = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG25_OUTCFG100_TIMER10  = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG25_OUTCFG100_TIMER11  = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG25_OUTCFG100_TIMER20  = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG25_OUTCFG100_TIMER21  = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG25_OUTCFG100_TIMER30  = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG25_OUTCFG100_TIMER31  = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG25_OUTCFG100_STIMER0  = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG25_OUTCFG100_STIMER1  = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG25_OUTCFG100_STIMER2  = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG25_OUTCFG100_STIMER3  = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG25_OUTCFG100_STIMER4  = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG25_OUTCFG100_STIMER5  = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG25_OUTCFG100_STIMER6  = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG25_OUTCFG100_STIMER7  = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG25_OUTCFG100_DISABLED = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG25_OUTCFG100_Enum;

/* =======================================================  OUTCFG26  ======================================================== */
/* =========================================  CM4TIMER OUTCFG26 OUTCFG107 [24..29]  ========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG26_OUTCFG107                                               */
  CM4TIMER_OUTCFG26_OUTCFG107_TIMER00  = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG26_OUTCFG107_TIMER01  = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG26_OUTCFG107_TIMER10  = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG26_OUTCFG107_TIMER11  = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG26_OUTCFG107_TIMER20  = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG26_OUTCFG107_TIMER21  = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG26_OUTCFG107_TIMER30  = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG26_OUTCFG107_TIMER31  = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG26_OUTCFG107_STIMER0  = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG26_OUTCFG107_STIMER1  = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG26_OUTCFG107_STIMER2  = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG26_OUTCFG107_STIMER3  = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG26_OUTCFG107_STIMER4  = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG26_OUTCFG107_STIMER5  = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG26_OUTCFG107_STIMER6  = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG26_OUTCFG107_STIMER7  = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG26_OUTCFG107_DISABLED = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG26_OUTCFG107_Enum;

/* =========================================  CM4TIMER OUTCFG26 OUTCFG106 [16..21]  ========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG26_OUTCFG106                                               */
  CM4TIMER_OUTCFG26_OUTCFG106_TIMER00  = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG26_OUTCFG106_TIMER01  = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG26_OUTCFG106_TIMER10  = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG26_OUTCFG106_TIMER11  = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG26_OUTCFG106_TIMER20  = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG26_OUTCFG106_TIMER21  = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG26_OUTCFG106_TIMER30  = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG26_OUTCFG106_TIMER31  = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG26_OUTCFG106_STIMER0  = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG26_OUTCFG106_STIMER1  = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG26_OUTCFG106_STIMER2  = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG26_OUTCFG106_STIMER3  = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG26_OUTCFG106_STIMER4  = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG26_OUTCFG106_STIMER5  = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG26_OUTCFG106_STIMER6  = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG26_OUTCFG106_STIMER7  = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG26_OUTCFG106_DISABLED = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG26_OUTCFG106_Enum;

/* ==========================================  CM4TIMER OUTCFG26 OUTCFG105 [8..13]  ========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG26_OUTCFG105                                               */
  CM4TIMER_OUTCFG26_OUTCFG105_TIMER00  = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG26_OUTCFG105_TIMER01  = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG26_OUTCFG105_TIMER10  = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG26_OUTCFG105_TIMER11  = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG26_OUTCFG105_TIMER20  = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG26_OUTCFG105_TIMER21  = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG26_OUTCFG105_TIMER30  = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG26_OUTCFG105_TIMER31  = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG26_OUTCFG105_STIMER0  = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG26_OUTCFG105_STIMER1  = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG26_OUTCFG105_STIMER2  = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG26_OUTCFG105_STIMER3  = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG26_OUTCFG105_STIMER4  = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG26_OUTCFG105_STIMER5  = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG26_OUTCFG105_STIMER6  = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG26_OUTCFG105_STIMER7  = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG26_OUTCFG105_DISABLED = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG26_OUTCFG105_Enum;

/* ==========================================  CM4TIMER OUTCFG26 OUTCFG104 [0..5]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG26_OUTCFG104                                               */
  CM4TIMER_OUTCFG26_OUTCFG104_TIMER00  = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG26_OUTCFG104_TIMER01  = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG26_OUTCFG104_TIMER10  = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG26_OUTCFG104_TIMER11  = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG26_OUTCFG104_TIMER20  = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG26_OUTCFG104_TIMER21  = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG26_OUTCFG104_TIMER30  = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG26_OUTCFG104_TIMER31  = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG26_OUTCFG104_STIMER0  = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG26_OUTCFG104_STIMER1  = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG26_OUTCFG104_STIMER2  = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG26_OUTCFG104_STIMER3  = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG26_OUTCFG104_STIMER4  = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG26_OUTCFG104_STIMER5  = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG26_OUTCFG104_STIMER6  = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG26_OUTCFG104_STIMER7  = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG26_OUTCFG104_DISABLED = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG26_OUTCFG104_Enum;

/* =======================================================  OUTCFG27  ======================================================== */
/* =========================================  CM4TIMER OUTCFG27 OUTCFG111 [24..29]  ========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG27_OUTCFG111                                               */
  CM4TIMER_OUTCFG27_OUTCFG111_TIMER00  = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG27_OUTCFG111_TIMER01  = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG27_OUTCFG111_TIMER10  = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG27_OUTCFG111_TIMER11  = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG27_OUTCFG111_TIMER20  = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG27_OUTCFG111_TIMER21  = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG27_OUTCFG111_TIMER30  = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG27_OUTCFG111_TIMER31  = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG27_OUTCFG111_STIMER0  = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG27_OUTCFG111_STIMER1  = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG27_OUTCFG111_STIMER2  = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG27_OUTCFG111_STIMER3  = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG27_OUTCFG111_STIMER4  = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG27_OUTCFG111_STIMER5  = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG27_OUTCFG111_STIMER6  = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG27_OUTCFG111_STIMER7  = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG27_OUTCFG111_DISABLED = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG27_OUTCFG111_Enum;

/* =========================================  CM4TIMER OUTCFG27 OUTCFG110 [16..21]  ========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG27_OUTCFG110                                               */
  CM4TIMER_OUTCFG27_OUTCFG110_TIMER00  = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG27_OUTCFG110_TIMER01  = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG27_OUTCFG110_TIMER10  = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG27_OUTCFG110_TIMER11  = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG27_OUTCFG110_TIMER20  = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG27_OUTCFG110_TIMER21  = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG27_OUTCFG110_TIMER30  = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG27_OUTCFG110_TIMER31  = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG27_OUTCFG110_STIMER0  = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG27_OUTCFG110_STIMER1  = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG27_OUTCFG110_STIMER2  = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG27_OUTCFG110_STIMER3  = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG27_OUTCFG110_STIMER4  = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG27_OUTCFG110_STIMER5  = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG27_OUTCFG110_STIMER6  = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG27_OUTCFG110_STIMER7  = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG27_OUTCFG110_DISABLED = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG27_OUTCFG110_Enum;

/* ==========================================  CM4TIMER OUTCFG27 OUTCFG109 [8..13]  ========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG27_OUTCFG109                                               */
  CM4TIMER_OUTCFG27_OUTCFG109_TIMER00  = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG27_OUTCFG109_TIMER01  = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG27_OUTCFG109_TIMER10  = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG27_OUTCFG109_TIMER11  = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG27_OUTCFG109_TIMER20  = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG27_OUTCFG109_TIMER21  = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG27_OUTCFG109_TIMER30  = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG27_OUTCFG109_TIMER31  = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG27_OUTCFG109_STIMER0  = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG27_OUTCFG109_STIMER1  = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG27_OUTCFG109_STIMER2  = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG27_OUTCFG109_STIMER3  = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG27_OUTCFG109_STIMER4  = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG27_OUTCFG109_STIMER5  = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG27_OUTCFG109_STIMER6  = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG27_OUTCFG109_STIMER7  = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG27_OUTCFG109_DISABLED = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG27_OUTCFG109_Enum;

/* ==========================================  CM4TIMER OUTCFG27 OUTCFG108 [0..5]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG27_OUTCFG108                                               */
  CM4TIMER_OUTCFG27_OUTCFG108_TIMER00  = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG27_OUTCFG108_TIMER01  = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG27_OUTCFG108_TIMER10  = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG27_OUTCFG108_TIMER11  = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG27_OUTCFG108_TIMER20  = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG27_OUTCFG108_TIMER21  = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG27_OUTCFG108_TIMER30  = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG27_OUTCFG108_TIMER31  = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG27_OUTCFG108_STIMER0  = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG27_OUTCFG108_STIMER1  = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG27_OUTCFG108_STIMER2  = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG27_OUTCFG108_STIMER3  = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG27_OUTCFG108_STIMER4  = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG27_OUTCFG108_STIMER5  = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG27_OUTCFG108_STIMER6  = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG27_OUTCFG108_STIMER7  = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG27_OUTCFG108_DISABLED = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG27_OUTCFG108_Enum;

/* =======================================================  OUTCFG28  ======================================================== */
/* =========================================  CM4TIMER OUTCFG28 OUTCFG115 [24..29]  ========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG28_OUTCFG115                                               */
  CM4TIMER_OUTCFG28_OUTCFG115_TIMER00  = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG28_OUTCFG115_TIMER01  = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG28_OUTCFG115_TIMER10  = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG28_OUTCFG115_TIMER11  = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG28_OUTCFG115_TIMER20  = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG28_OUTCFG115_TIMER21  = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG28_OUTCFG115_TIMER30  = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG28_OUTCFG115_TIMER31  = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG28_OUTCFG115_STIMER0  = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG28_OUTCFG115_STIMER1  = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG28_OUTCFG115_STIMER2  = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG28_OUTCFG115_STIMER3  = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG28_OUTCFG115_STIMER4  = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG28_OUTCFG115_STIMER5  = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG28_OUTCFG115_STIMER6  = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG28_OUTCFG115_STIMER7  = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG28_OUTCFG115_DISABLED = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG28_OUTCFG115_Enum;

/* =========================================  CM4TIMER OUTCFG28 OUTCFG114 [16..21]  ========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG28_OUTCFG114                                               */
  CM4TIMER_OUTCFG28_OUTCFG114_TIMER00  = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG28_OUTCFG114_TIMER01  = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG28_OUTCFG114_TIMER10  = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG28_OUTCFG114_TIMER11  = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG28_OUTCFG114_TIMER20  = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG28_OUTCFG114_TIMER21  = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG28_OUTCFG114_TIMER30  = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG28_OUTCFG114_TIMER31  = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG28_OUTCFG114_STIMER0  = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG28_OUTCFG114_STIMER1  = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG28_OUTCFG114_STIMER2  = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG28_OUTCFG114_STIMER3  = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG28_OUTCFG114_STIMER4  = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG28_OUTCFG114_STIMER5  = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG28_OUTCFG114_STIMER6  = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG28_OUTCFG114_STIMER7  = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG28_OUTCFG114_DISABLED = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG28_OUTCFG114_Enum;

/* ==========================================  CM4TIMER OUTCFG28 OUTCFG113 [8..13]  ========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG28_OUTCFG113                                               */
  CM4TIMER_OUTCFG28_OUTCFG113_TIMER00  = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG28_OUTCFG113_TIMER01  = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG28_OUTCFG113_TIMER10  = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG28_OUTCFG113_TIMER11  = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG28_OUTCFG113_TIMER20  = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG28_OUTCFG113_TIMER21  = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG28_OUTCFG113_TIMER30  = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG28_OUTCFG113_TIMER31  = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG28_OUTCFG113_STIMER0  = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG28_OUTCFG113_STIMER1  = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG28_OUTCFG113_STIMER2  = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG28_OUTCFG113_STIMER3  = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG28_OUTCFG113_STIMER4  = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG28_OUTCFG113_STIMER5  = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG28_OUTCFG113_STIMER6  = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG28_OUTCFG113_STIMER7  = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG28_OUTCFG113_DISABLED = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG28_OUTCFG113_Enum;

/* ==========================================  CM4TIMER OUTCFG28 OUTCFG112 [0..5]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG28_OUTCFG112                                               */
  CM4TIMER_OUTCFG28_OUTCFG112_TIMER00  = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG28_OUTCFG112_TIMER01  = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG28_OUTCFG112_TIMER10  = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG28_OUTCFG112_TIMER11  = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG28_OUTCFG112_TIMER20  = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG28_OUTCFG112_TIMER21  = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG28_OUTCFG112_TIMER30  = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG28_OUTCFG112_TIMER31  = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG28_OUTCFG112_STIMER0  = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG28_OUTCFG112_STIMER1  = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG28_OUTCFG112_STIMER2  = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG28_OUTCFG112_STIMER3  = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG28_OUTCFG112_STIMER4  = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG28_OUTCFG112_STIMER5  = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG28_OUTCFG112_STIMER6  = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG28_OUTCFG112_STIMER7  = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG28_OUTCFG112_DISABLED = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG28_OUTCFG112_Enum;

/* =======================================================  OUTCFG29  ======================================================== */
/* =========================================  CM4TIMER OUTCFG29 OUTCFG119 [24..29]  ========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG29_OUTCFG119                                               */
  CM4TIMER_OUTCFG29_OUTCFG119_TIMER00  = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG29_OUTCFG119_TIMER01  = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG29_OUTCFG119_TIMER10  = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG29_OUTCFG119_TIMER11  = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG29_OUTCFG119_TIMER20  = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG29_OUTCFG119_TIMER21  = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG29_OUTCFG119_TIMER30  = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG29_OUTCFG119_TIMER31  = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG29_OUTCFG119_STIMER0  = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG29_OUTCFG119_STIMER1  = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG29_OUTCFG119_STIMER2  = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG29_OUTCFG119_STIMER3  = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG29_OUTCFG119_STIMER4  = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG29_OUTCFG119_STIMER5  = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG29_OUTCFG119_STIMER6  = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG29_OUTCFG119_STIMER7  = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG29_OUTCFG119_DISABLED = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG29_OUTCFG119_Enum;

/* =========================================  CM4TIMER OUTCFG29 OUTCFG118 [16..21]  ========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG29_OUTCFG118                                               */
  CM4TIMER_OUTCFG29_OUTCFG118_TIMER00  = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG29_OUTCFG118_TIMER01  = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG29_OUTCFG118_TIMER10  = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG29_OUTCFG118_TIMER11  = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG29_OUTCFG118_TIMER20  = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG29_OUTCFG118_TIMER21  = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG29_OUTCFG118_TIMER30  = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG29_OUTCFG118_TIMER31  = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG29_OUTCFG118_STIMER0  = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG29_OUTCFG118_STIMER1  = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG29_OUTCFG118_STIMER2  = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG29_OUTCFG118_STIMER3  = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG29_OUTCFG118_STIMER4  = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG29_OUTCFG118_STIMER5  = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG29_OUTCFG118_STIMER6  = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG29_OUTCFG118_STIMER7  = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG29_OUTCFG118_DISABLED = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG29_OUTCFG118_Enum;

/* ==========================================  CM4TIMER OUTCFG29 OUTCFG117 [8..13]  ========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG29_OUTCFG117                                               */
  CM4TIMER_OUTCFG29_OUTCFG117_TIMER00  = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG29_OUTCFG117_TIMER01  = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG29_OUTCFG117_TIMER10  = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG29_OUTCFG117_TIMER11  = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG29_OUTCFG117_TIMER20  = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG29_OUTCFG117_TIMER21  = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG29_OUTCFG117_TIMER30  = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG29_OUTCFG117_TIMER31  = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG29_OUTCFG117_STIMER0  = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG29_OUTCFG117_STIMER1  = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG29_OUTCFG117_STIMER2  = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG29_OUTCFG117_STIMER3  = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG29_OUTCFG117_STIMER4  = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG29_OUTCFG117_STIMER5  = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG29_OUTCFG117_STIMER6  = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG29_OUTCFG117_STIMER7  = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG29_OUTCFG117_DISABLED = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG29_OUTCFG117_Enum;

/* ==========================================  CM4TIMER OUTCFG29 OUTCFG116 [0..5]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_OUTCFG29_OUTCFG116                                               */
  CM4TIMER_OUTCFG29_OUTCFG116_TIMER00  = 0,     /*!< TIMER00 : Output is Timer 0, output 0                                     */
  CM4TIMER_OUTCFG29_OUTCFG116_TIMER01  = 1,     /*!< TIMER01 : Output is Timer 0, output 1                                     */
  CM4TIMER_OUTCFG29_OUTCFG116_TIMER10  = 2,     /*!< TIMER10 : Output is Timer 1, output 0                                     */
  CM4TIMER_OUTCFG29_OUTCFG116_TIMER11  = 3,     /*!< TIMER11 : Output is Timer 1, output 1                                     */
  CM4TIMER_OUTCFG29_OUTCFG116_TIMER20  = 4,     /*!< TIMER20 : Output is Timer 2, output 0                                     */
  CM4TIMER_OUTCFG29_OUTCFG116_TIMER21  = 5,     /*!< TIMER21 : Output is Timer 2, output 1                                     */
  CM4TIMER_OUTCFG29_OUTCFG116_TIMER30  = 6,     /*!< TIMER30 : Output is Timer 3, output 0                                     */
  CM4TIMER_OUTCFG29_OUTCFG116_TIMER31  = 7,     /*!< TIMER31 : Output is Timer 3, output 1                                     */
  CM4TIMER_OUTCFG29_OUTCFG116_STIMER0  = 8,     /*!< STIMER0 : Output is STimer 0                                              */
  CM4TIMER_OUTCFG29_OUTCFG116_STIMER1  = 9,     /*!< STIMER1 : Output is STimer 1                                              */
  CM4TIMER_OUTCFG29_OUTCFG116_STIMER2  = 10,    /*!< STIMER2 : Output is STimer 2                                              */
  CM4TIMER_OUTCFG29_OUTCFG116_STIMER3  = 11,    /*!< STIMER3 : Output is STimer 3                                              */
  CM4TIMER_OUTCFG29_OUTCFG116_STIMER4  = 12,    /*!< STIMER4 : Output is STimer 4                                              */
  CM4TIMER_OUTCFG29_OUTCFG116_STIMER5  = 13,    /*!< STIMER5 : Output is STimer 5                                              */
  CM4TIMER_OUTCFG29_OUTCFG116_STIMER6  = 14,    /*!< STIMER6 : Output is STimer 6                                              */
  CM4TIMER_OUTCFG29_OUTCFG116_STIMER7  = 15,    /*!< STIMER7 : Output is STimer 7                                              */
  CM4TIMER_OUTCFG29_OUTCFG116_DISABLED = 63,    /*!< DISABLED : Output is disabled                                             */
} CM4TIMER_OUTCFG29_OUTCFG116_Enum;

/* =========================================================  CTRL0  ========================================================= */
/* ===========================================  CM4TIMER CTRL0 TMR0TMODE [16..17]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_CTRL0_TMR0TMODE                                                  */
  CM4TIMER_CTRL0_TMR0TMODE_DIS         = 0,     /*!< DIS : Trigger not enabled                                                 */
  CM4TIMER_CTRL0_TMR0TMODE_RISE        = 1,     /*!< RISE : Trigger on rising edge of TRIGSEL source                           */
  CM4TIMER_CTRL0_TMR0TMODE_FALL        = 2,     /*!< FALL : Trigger on falling edge of TRIGSEL source                          */
  CM4TIMER_CTRL0_TMR0TMODE_BOTH        = 3,     /*!< BOTH : Trigger on either edge of TRIGSEL source                           */
} CM4TIMER_CTRL0_TMR0TMODE_Enum;

/* ============================================  CM4TIMER CTRL0 TMR0CLK [8..15]  ============================================= */
typedef enum {                                  /*!< CM4TIMER_CTRL0_TMR0CLK                                                    */
  CM4TIMER_CTRL0_TMR0CLK_HFRC_3MHz     = 0,     /*!< HFRC_3MHz : 3M from HFRC clock divider.                                   */
  CM4TIMER_CTRL0_TMR0CLK_HFRC_187KHz   = 1,     /*!< HFRC_187KHz : 187K from the HFRC clock divider.                           */
  CM4TIMER_CTRL0_TMR0CLK_XT_32K        = 2,     /*!< XT_32K : 32768Hz from the crystal oscillator                              */
  CM4TIMER_CTRL0_TMR0CLK_XT_16K        = 3,     /*!< XT_16K : 16384Hz from the crystal oscillator                              */
  CM4TIMER_CTRL0_TMR0CLK_XT_1K         = 4,     /*!< XT_1K : 1024Hz from the crystal oscillator.                               */
  CM4TIMER_CTRL0_TMR0CLK_LFRC_1KHZ     = 5,     /*!< LFRC_1KHZ : Approximately 1KHz from the LFRC oscillator (uncalibrated).   */
  CM4TIMER_CTRL0_TMR0CLK_TMR00         = 32,    /*!< TMR00 : Clock source is TIMER 0 Output 0                                  */
  CM4TIMER_CTRL0_TMR0CLK_TMR01         = 33,    /*!< TMR01 : Clock source is TIMER 0 Output 1                                  */
  CM4TIMER_CTRL0_TMR0CLK_TMR10         = 34,    /*!< TMR10 : Clock source is TIMER 1 Output 0                                  */
  CM4TIMER_CTRL0_TMR0CLK_TMR11         = 35,    /*!< TMR11 : Clock source is TIMER 1 Output 1                                  */
  CM4TIMER_CTRL0_TMR0CLK_TMR20         = 36,    /*!< TMR20 : Clock source is TIMER 2 Output 0                                  */
  CM4TIMER_CTRL0_TMR0CLK_TMR21         = 37,    /*!< TMR21 : Clock source is TIMER 2 Output 1                                  */
  CM4TIMER_CTRL0_TMR0CLK_TMR30         = 38,    /*!< TMR30 : Clock source is TIMER 3 Output 0                                  */
  CM4TIMER_CTRL0_TMR0CLK_TMR31         = 39,    /*!< TMR31 : Clock source is TIMER 3 Output 1                                  */
  CM4TIMER_CTRL0_TMR0CLK_GPIO0         = 128,   /*!< GPIO0 : GPIO #0 is clock source                                           */
  CM4TIMER_CTRL0_TMR0CLK_GPIOn         = 129,   /*!< GPIOn : GPIO #n is clock source where n ranges from 1 thru 98.
                                                     The values for GPIO1 - GPIO98 are in the range 0x81 - 0xE2.
                                                     i.e., GPIO0 + n                                                           */
  CM4TIMER_CTRL0_TMR0CLK_GPIO99        = 227,   /*!< GPIO99 : GPIO #99 is clock source                                         */
} CM4TIMER_CTRL0_TMR0CLK_Enum;

/* =============================================  CM4TIMER CTRL0 TMR0FN [4..7]  ============================================== */
typedef enum {                                  /*!< CM4TIMER_CTRL0_TMR0FN                                                     */
  CM4TIMER_CTRL0_TMR0FN_EDGE           = 1,     /*!< EDGE : This Mode generates a single edge on OUT0/OUT1 when TIMER
                                                     value hits CMP0/CMP1 respectively. OUT[0]=0, counter increments
                                                     to CMP0, OUT[0]=1, counter stops. OUT[1] follows CMP1.                    */
  CM4TIMER_CTRL0_TMR0FN_UPCOUNT        = 2,     /*!< UPCOUNT : This mode is run up counter generating a pulse on
                                                     CMP. OUT[0]/OUT[1] is pulsed for one source clock period
                                                     when TIMER matches CMP0/CMP1 respectively. Timer repeats
                                                     for TMR_LMT iterations.                                                   */
  CM4TIMER_CTRL0_TMR0FN_PWM            = 4,     /*!< PWM : PWM mode. OUT0 and OUT1 are waveforms, and not just one
                                                     clock pulse. CMP1 dictates the low phase of the output
                                                     and CMP0 dictates the period. OUT[1]=~OUT[0].                             */
  CM4TIMER_CTRL0_TMR0FN_SINGLEPATTERN  = 12,    /*!< SINGLEPATTERN : Single pattern. OUT0=CMP0[TIMER], OUT1=CMP1[TIMER].
                                                     LMT field specifies length of pattern. When LMT GT 32 OUT0
                                                     and OUT1 is the same 64-bit pattern consisting of concatenated
                                                     CMP1,CMP0. When LMT LT 32 OUT0 and OUT1 are independent.
                                                     Both OUT0 and OUT1 can be inverted individually applications
                                                     with POL0/POL1 = 0x1.                                                     */
  CM4TIMER_CTRL0_TMR0FN_REPEATPATTERN  = 13,    /*!< REPEATPATTERN : Repeated pattern. Like SINGLEPATTERN mode, but
                                                     pattern repeats after reaching LMT.                                       */
} CM4TIMER_CTRL0_TMR0FN_Enum;

/* ============================================  CM4TIMER CTRL0 TMR0POL1 [3..3]  ============================================= */
typedef enum {                                  /*!< CM4TIMER_CTRL0_TMR0POL1                                                   */
  CM4TIMER_CTRL0_TMR0POL1_NORMAL       = 0,     /*!< NORMAL : The polarity of the TMR0OUT1 pin is the same as the
                                                     timer output.                                                             */
  CM4TIMER_CTRL0_TMR0POL1_INVERTED     = 1,     /*!< INVERTED : The polarity of the TMR0OUT1 pin is the inverse of
                                                     the timer output.                                                         */
} CM4TIMER_CTRL0_TMR0POL1_Enum;

/* ============================================  CM4TIMER CTRL0 TMR0POL0 [2..2]  ============================================= */
typedef enum {                                  /*!< CM4TIMER_CTRL0_TMR0POL0                                                   */
  CM4TIMER_CTRL0_TMR0POL0_NORMAL       = 0,     /*!< NORMAL : The polarity of the TMR0OUT0 pin is the same as the
                                                     timer output.                                                             */
  CM4TIMER_CTRL0_TMR0POL0_INVERTED     = 1,     /*!< INVERTED : The polarity of the TMR0OUT0 pin is the inverse of
                                                     the timer output.                                                         */
} CM4TIMER_CTRL0_TMR0POL0_Enum;

/* =============================================  CM4TIMER CTRL0 TMR0CLR [1..1]  ============================================= */
typedef enum {                                  /*!< CM4TIMER_CTRL0_TMR0CLR                                                    */
  CM4TIMER_CTRL0_TMR0CLR_CLEAR         = 1,     /*!< CLEAR : When written to a 1, the timer will automatically be
                                                     cleared to its reset state # (0 for count up counter, CMP0
                                                     for down counter)                                                         */
  CM4TIMER_CTRL0_TMR0CLR_DEFAULT       = 0,     /*!< DEFAULT : Default value set to 0. Timer works normally.                   */
} CM4TIMER_CTRL0_TMR0CLR_Enum;

/* =============================================  CM4TIMER CTRL0 TMR0EN [0..0]  ============================================== */
typedef enum {                                  /*!< CM4TIMER_CTRL0_TMR0EN                                                     */
  CM4TIMER_CTRL0_TMR0EN_DIS            = 0,     /*!< DIS : Counter/Timer 0 Disable.                                            */
  CM4TIMER_CTRL0_TMR0EN_EN             = 1,     /*!< EN : Counter/Timer 0 Enable.                                              */
} CM4TIMER_CTRL0_TMR0EN_Enum;

/* ========================================================  TIMER0  ========================================================= */
/* =======================================================  TMR0CMP0  ======================================================== */
/* =======================================================  TMR0CMP1  ======================================================== */
/* =========================================================  MODE0  ========================================================= */
/* ==========================================  CM4TIMER MODE0 TMR0TRIGSEL [8..15]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_MODE0_TMR0TRIGSEL                                                */
  CM4TIMER_MODE0_TMR0TRIGSEL_TMR00     = 0,     /*!< TMR00 : Trigger source is TIMER 0 Output 0                                */
  CM4TIMER_MODE0_TMR0TRIGSEL_TMR01     = 1,     /*!< TMR01 : Trigger source is TIMER 0 Output 1                                */
  CM4TIMER_MODE0_TMR0TRIGSEL_TMR10     = 2,     /*!< TMR10 : Trigger source is TIMER 1 Output 0                                */
  CM4TIMER_MODE0_TMR0TRIGSEL_TMR11     = 3,     /*!< TMR11 : Trigger source is TIMER 1 Output 1                                */
  CM4TIMER_MODE0_TMR0TRIGSEL_TMR20     = 4,     /*!< TMR20 : Trigger source is TIMER 2 Output 0                                */
  CM4TIMER_MODE0_TMR0TRIGSEL_TMR21     = 5,     /*!< TMR21 : Trigger source is TIMER 2 Output 1                                */
  CM4TIMER_MODE0_TMR0TRIGSEL_TMR30     = 6,     /*!< TMR30 : Trigger source is TIMER 3 Output 0                                */
  CM4TIMER_MODE0_TMR0TRIGSEL_TMR31     = 7,     /*!< TMR31 : Trigger source is TIMER 3 Output 1                                */
  CM4TIMER_MODE0_TMR0TRIGSEL_STMRCMP00 = 48,    /*!< STMRCMP00 : Trigger source is STIMER Compare 0                            */
  CM4TIMER_MODE0_TMR0TRIGSEL_STMRCMP10 = 49,    /*!< STMRCMP10 : Trigger source is STIMER Compare 1                            */
  CM4TIMER_MODE0_TMR0TRIGSEL_STMRCMP20 = 50,    /*!< STMRCMP20 : Trigger source is STIMER Compare 2                            */
  CM4TIMER_MODE0_TMR0TRIGSEL_STMRCMP30 = 51,    /*!< STMRCMP30 : Trigger source is STIMER Compare 3                            */
  CM4TIMER_MODE0_TMR0TRIGSEL_STMRCMP40 = 52,    /*!< STMRCMP40 : Trigger source is STIMER Compare 4                            */
  CM4TIMER_MODE0_TMR0TRIGSEL_STMRCMP50 = 53,    /*!< STMRCMP50 : Trigger source is STIMER Compare 5                            */
  CM4TIMER_MODE0_TMR0TRIGSEL_STMRCMP60 = 54,    /*!< STMRCMP60 : Trigger source is STIMER Compare 6                            */
  CM4TIMER_MODE0_TMR0TRIGSEL_STMRCMP70 = 55,    /*!< STMRCMP70 : Trigger source is STIMER Compare 7                            */
  CM4TIMER_MODE0_TMR0TRIGSEL_STMRCAP00 = 56,    /*!< STMRCAP00 : Trigger source is STIMER Capture 0                            */
  CM4TIMER_MODE0_TMR0TRIGSEL_STMRCAP10 = 57,    /*!< STMRCAP10 : Trigger source is STIMER Capture 1                            */
  CM4TIMER_MODE0_TMR0TRIGSEL_STMRCAP20 = 58,    /*!< STMRCAP20 : Trigger source is STIMER Capture 2                            */
  CM4TIMER_MODE0_TMR0TRIGSEL_STMRCAP30 = 59,    /*!< STMRCAP30 : Trigger source is STIMER Capture 3                            */
  CM4TIMER_MODE0_TMR0TRIGSEL_GPIO0     = 128,   /*!< GPIO0 : Trigger source is GPIO #0                                         */
  CM4TIMER_MODE0_TMR0TRIGSEL_GPIO123   = 251,   /*!< GPIO123 : Trigger source is GPIO #123                                     */
  CM4TIMER_MODE0_TMR0TRIGSEL_GPIO127   = 255,   /*!< GPIO127 : Trigger source is GPIO #127                                     */
} CM4TIMER_MODE0_TMR0TRIGSEL_Enum;

/* ======================================================  TMR0LMTVAL  ======================================================= */
/* =========================================================  CTRL1  ========================================================= */
/* ===========================================  CM4TIMER CTRL1 TMR1TMODE [16..17]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_CTRL1_TMR1TMODE                                                  */
  CM4TIMER_CTRL1_TMR1TMODE_DIS         = 0,     /*!< DIS : Trigger not enabled                                                 */
  CM4TIMER_CTRL1_TMR1TMODE_RISE        = 1,     /*!< RISE : Trigger on rising edge of TRIGSEL source                           */
  CM4TIMER_CTRL1_TMR1TMODE_FALL        = 2,     /*!< FALL : Trigger on falling edge of TRIGSEL source                          */
  CM4TIMER_CTRL1_TMR1TMODE_BOTH        = 3,     /*!< BOTH : Trigger on either edge of TRIGSEL source                           */
} CM4TIMER_CTRL1_TMR1TMODE_Enum;

/* ============================================  CM4TIMER CTRL1 TMR1CLK [8..15]  ============================================= */
typedef enum {                                  /*!< CM4TIMER_CTRL1_TMR1CLK                                                    */
  CM4TIMER_CTRL1_TMR1CLK_HFRC_3MHz     = 0,     /*!< HFRC_3MHz : 3M from HFRC clock divider.                                   */
  CM4TIMER_CTRL1_TMR1CLK_HFRC_187KHz   = 1,     /*!< HFRC_187KHz : 187K from the HFRC clock divider.                           */
  CM4TIMER_CTRL1_TMR1CLK_XT_32K        = 2,     /*!< XT_32K : 32768Hz from the crystal oscillator                              */
  CM4TIMER_CTRL1_TMR1CLK_XT_16K        = 3,     /*!< XT_16K : 16384Hz from the crystal oscillator                              */
  CM4TIMER_CTRL1_TMR1CLK_XT_1K         = 4,     /*!< XT_1K : 1024Hz from the crystal oscillator.                               */
  CM4TIMER_CTRL1_TMR1CLK_LFRC_1KHZ     = 5,     /*!< LFRC_1KHZ : Approximately 1KHz from the LFRC oscillator (uncalibrated).   */
  CM4TIMER_CTRL1_TMR1CLK_TMR00         = 32,    /*!< TMR00 : Clock source is TIMER 0 Output 0                                  */
  CM4TIMER_CTRL1_TMR1CLK_TMR01         = 33,    /*!< TMR01 : Clock source is TIMER 0 Output 1                                  */
  CM4TIMER_CTRL1_TMR1CLK_TMR10         = 34,    /*!< TMR10 : Clock source is TIMER 1 Output 0                                  */
  CM4TIMER_CTRL1_TMR1CLK_TMR11         = 35,    /*!< TMR11 : Clock source is TIMER 1 Output 1                                  */
  CM4TIMER_CTRL1_TMR1CLK_TMR20         = 36,    /*!< TMR20 : Clock source is TIMER 2 Output 0                                  */
  CM4TIMER_CTRL1_TMR1CLK_TMR21         = 37,    /*!< TMR21 : Clock source is TIMER 2 Output 1                                  */
  CM4TIMER_CTRL1_TMR1CLK_TMR30         = 38,    /*!< TMR30 : Clock source is TIMER 3 Output 0                                  */
  CM4TIMER_CTRL1_TMR1CLK_TMR31         = 39,    /*!< TMR31 : Clock source is TIMER 3 Output 1                                  */
  CM4TIMER_CTRL1_TMR1CLK_GPIO0         = 128,   /*!< GPIO0 : GPIO #0 is clock source                                           */
  CM4TIMER_CTRL1_TMR1CLK_GPIOn         = 129,   /*!< GPIOn : GPIO #n is clock source where n ranges from 1 thru 98.
                                                     The values for GPIO1 - GPIO98 are in the range 0x81 - 0xE2.
                                                     i.e., GPIO0 + n                                                           */
  CM4TIMER_CTRL1_TMR1CLK_GPIO99        = 227,   /*!< GPIO99 : GPIO #99 is clock source                                         */
} CM4TIMER_CTRL1_TMR1CLK_Enum;

/* =============================================  CM4TIMER CTRL1 TMR1FN [4..7]  ============================================== */
typedef enum {                                  /*!< CM4TIMER_CTRL1_TMR1FN                                                     */
  CM4TIMER_CTRL1_TMR1FN_EDGE           = 1,     /*!< EDGE : This Mode generates a single edge on OUT0/OUT1 when TIMER
                                                     value hits CMP0/CMP1 respectively. OUT[0]=0, counter increments
                                                     to CMP0, OUT[0]=1, counter stops. OUT[1] follows CMP1.                    */
  CM4TIMER_CTRL1_TMR1FN_UPCOUNT        = 2,     /*!< UPCOUNT : This mode is run up counter generating a pulse on
                                                     CMP. OUT[0]/OUT[1] is pulsed for one source clock period
                                                     when TIMER matches CMP0/CMP1 respectively. Timer repeats
                                                     for TMR_LMT iterations.                                                   */
  CM4TIMER_CTRL1_TMR1FN_PWM            = 4,     /*!< PWM : PWM mode. OUT0 and OUT1 are waveforms, and not just one
                                                     clock pulse. CMP1 dictates the low phase of the output
                                                     and CMP0 dictates the period. OUT[1]=~OUT[0].                             */
  CM4TIMER_CTRL1_TMR1FN_SINGLEPATTERN  = 12,    /*!< SINGLEPATTERN : Single pattern. OUT0=CMP0[TIMER], OUT1=CMP1[TIMER].
                                                     LMT field specifies length of pattern. When LMT GT 32 OUT0
                                                     and OUT1 is the same 64-bit pattern consisting of concatenated
                                                     CMP1,CMP0. When LMT LT 32 OUT0 and OUT1 are independent.
                                                     Both OUT0 and OUT1 can be inverted individually applications
                                                     with POL0/POL1 = 0x1.                                                     */
  CM4TIMER_CTRL1_TMR1FN_REPEATPATTERN  = 13,    /*!< REPEATPATTERN : Repeated pattern. Like SINGLEPATTERN mode, but
                                                     pattern repeats after reaching LMT.                                       */
} CM4TIMER_CTRL1_TMR1FN_Enum;

/* ============================================  CM4TIMER CTRL1 TMR1POL1 [3..3]  ============================================= */
typedef enum {                                  /*!< CM4TIMER_CTRL1_TMR1POL1                                                   */
  CM4TIMER_CTRL1_TMR1POL1_NORMAL       = 0,     /*!< NORMAL : The polarity of the TMR1OUT1 pin is the same as the
                                                     timer output.                                                             */
  CM4TIMER_CTRL1_TMR1POL1_INVERTED     = 1,     /*!< INVERTED : The polarity of the TMR1OUT1 pin is the inverse of
                                                     the timer output.                                                         */
} CM4TIMER_CTRL1_TMR1POL1_Enum;

/* ============================================  CM4TIMER CTRL1 TMR1POL0 [2..2]  ============================================= */
typedef enum {                                  /*!< CM4TIMER_CTRL1_TMR1POL0                                                   */
  CM4TIMER_CTRL1_TMR1POL0_NORMAL       = 0,     /*!< NORMAL : The polarity of the TMR1OUT0 pin is the same as the
                                                     timer output.                                                             */
  CM4TIMER_CTRL1_TMR1POL0_INVERTED     = 1,     /*!< INVERTED : The polarity of the TMR1OUT0 pin is the inverse of
                                                     the timer output.                                                         */
} CM4TIMER_CTRL1_TMR1POL0_Enum;

/* =============================================  CM4TIMER CTRL1 TMR1CLR [1..1]  ============================================= */
typedef enum {                                  /*!< CM4TIMER_CTRL1_TMR1CLR                                                    */
  CM4TIMER_CTRL1_TMR1CLR_CLEAR         = 1,     /*!< CLEAR : When written to a 1, the timer will automatically be
                                                     cleared to its reset state # (0 for count up counter, CMP0
                                                     for down counter)                                                         */
  CM4TIMER_CTRL1_TMR1CLR_DEFAULT       = 0,     /*!< DEFAULT : Default value set to 0. Timer works normally.                   */
} CM4TIMER_CTRL1_TMR1CLR_Enum;

/* =============================================  CM4TIMER CTRL1 TMR1EN [0..0]  ============================================== */
typedef enum {                                  /*!< CM4TIMER_CTRL1_TMR1EN                                                     */
  CM4TIMER_CTRL1_TMR1EN_DIS            = 0,     /*!< DIS : Counter/Timer 1 Disable.                                            */
  CM4TIMER_CTRL1_TMR1EN_EN             = 1,     /*!< EN : Counter/Timer 1 Enable.                                              */
} CM4TIMER_CTRL1_TMR1EN_Enum;

/* ========================================================  TIMER1  ========================================================= */
/* =======================================================  TMR1CMP0  ======================================================== */
/* =======================================================  TMR1CMP1  ======================================================== */
/* =========================================================  MODE1  ========================================================= */
/* ==========================================  CM4TIMER MODE1 TMR1TRIGSEL [8..15]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_MODE1_TMR1TRIGSEL                                                */
  CM4TIMER_MODE1_TMR1TRIGSEL_TMR00     = 0,     /*!< TMR00 : Trigger source is TIMER 0 Output 0                                */
  CM4TIMER_MODE1_TMR1TRIGSEL_TMR01     = 1,     /*!< TMR01 : Trigger source is TIMER 0 Output 1                                */
  CM4TIMER_MODE1_TMR1TRIGSEL_TMR10     = 2,     /*!< TMR10 : Trigger source is TIMER 1 Output 0                                */
  CM4TIMER_MODE1_TMR1TRIGSEL_TMR11     = 3,     /*!< TMR11 : Trigger source is TIMER 1 Output 1                                */
  CM4TIMER_MODE1_TMR1TRIGSEL_TMR20     = 4,     /*!< TMR20 : Trigger source is TIMER 2 Output 0                                */
  CM4TIMER_MODE1_TMR1TRIGSEL_TMR21     = 5,     /*!< TMR21 : Trigger source is TIMER 2 Output 1                                */
  CM4TIMER_MODE1_TMR1TRIGSEL_TMR30     = 6,     /*!< TMR30 : Trigger source is TIMER 3 Output 0                                */
  CM4TIMER_MODE1_TMR1TRIGSEL_TMR31     = 7,     /*!< TMR31 : Trigger source is TIMER 3 Output 1                                */
  CM4TIMER_MODE1_TMR1TRIGSEL_STMRCMP00 = 48,    /*!< STMRCMP00 : Trigger source is STIMER Compare 0                            */
  CM4TIMER_MODE1_TMR1TRIGSEL_STMRCMP10 = 49,    /*!< STMRCMP10 : Trigger source is STIMER Compare 1                            */
  CM4TIMER_MODE1_TMR1TRIGSEL_STMRCMP20 = 50,    /*!< STMRCMP20 : Trigger source is STIMER Compare 2                            */
  CM4TIMER_MODE1_TMR1TRIGSEL_STMRCMP30 = 51,    /*!< STMRCMP30 : Trigger source is STIMER Compare 3                            */
  CM4TIMER_MODE1_TMR1TRIGSEL_STMRCMP40 = 52,    /*!< STMRCMP40 : Trigger source is STIMER Compare 4                            */
  CM4TIMER_MODE1_TMR1TRIGSEL_STMRCMP50 = 53,    /*!< STMRCMP50 : Trigger source is STIMER Compare 5                            */
  CM4TIMER_MODE1_TMR1TRIGSEL_STMRCMP60 = 54,    /*!< STMRCMP60 : Trigger source is STIMER Compare 6                            */
  CM4TIMER_MODE1_TMR1TRIGSEL_STMRCMP70 = 55,    /*!< STMRCMP70 : Trigger source is STIMER Compare 7                            */
  CM4TIMER_MODE1_TMR1TRIGSEL_STMRCAP00 = 56,    /*!< STMRCAP00 : Trigger source is STIMER Capture 0                            */
  CM4TIMER_MODE1_TMR1TRIGSEL_STMRCAP10 = 57,    /*!< STMRCAP10 : Trigger source is STIMER Capture 1                            */
  CM4TIMER_MODE1_TMR1TRIGSEL_STMRCAP20 = 58,    /*!< STMRCAP20 : Trigger source is STIMER Capture 2                            */
  CM4TIMER_MODE1_TMR1TRIGSEL_STMRCAP30 = 59,    /*!< STMRCAP30 : Trigger source is STIMER Capture 3                            */
  CM4TIMER_MODE1_TMR1TRIGSEL_GPIO0     = 128,   /*!< GPIO0 : Trigger source is GPIO #0                                         */
  CM4TIMER_MODE1_TMR1TRIGSEL_GPIO123   = 251,   /*!< GPIO123 : Trigger source is GPIO #123                                     */
  CM4TIMER_MODE1_TMR1TRIGSEL_GPIO127   = 255,   /*!< GPIO127 : Trigger source is GPIO #127                                     */
} CM4TIMER_MODE1_TMR1TRIGSEL_Enum;

/* ======================================================  TMR1LMTVAL  ======================================================= */
/* =========================================================  CTRL2  ========================================================= */
/* ===========================================  CM4TIMER CTRL2 TMR2TMODE [16..17]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_CTRL2_TMR2TMODE                                                  */
  CM4TIMER_CTRL2_TMR2TMODE_DIS         = 0,     /*!< DIS : Trigger not enabled                                                 */
  CM4TIMER_CTRL2_TMR2TMODE_RISE        = 1,     /*!< RISE : Trigger on rising edge of TRIGSEL source                           */
  CM4TIMER_CTRL2_TMR2TMODE_FALL        = 2,     /*!< FALL : Trigger on falling edge of TRIGSEL source                          */
  CM4TIMER_CTRL2_TMR2TMODE_BOTH        = 3,     /*!< BOTH : Trigger on either edge of TRIGSEL source                           */
} CM4TIMER_CTRL2_TMR2TMODE_Enum;

/* ============================================  CM4TIMER CTRL2 TMR2CLK [8..15]  ============================================= */
typedef enum {                                  /*!< CM4TIMER_CTRL2_TMR2CLK                                                    */
  CM4TIMER_CTRL2_TMR2CLK_HFRC_3MHz     = 0,     /*!< HFRC_3MHz : 3M from HFRC clock divider.                                   */
  CM4TIMER_CTRL2_TMR2CLK_HFRC_187KHz   = 1,     /*!< HFRC_187KHz : 187K from the HFRC clock divider.                           */
  CM4TIMER_CTRL2_TMR2CLK_XT_32K        = 2,     /*!< XT_32K : 32768Hz from the crystal oscillator                              */
  CM4TIMER_CTRL2_TMR2CLK_XT_16K        = 3,     /*!< XT_16K : 16384Hz from the crystal oscillator                              */
  CM4TIMER_CTRL2_TMR2CLK_XT_1K         = 4,     /*!< XT_1K : 1024Hz from the crystal oscillator.                               */
  CM4TIMER_CTRL2_TMR2CLK_LFRC_1KHZ     = 5,     /*!< LFRC_1KHZ : Approximately 1KHz from the LFRC oscillator (uncalibrated).   */
  CM4TIMER_CTRL2_TMR2CLK_TMR00         = 32,    /*!< TMR00 : Clock source is TIMER 0 Output 0                                  */
  CM4TIMER_CTRL2_TMR2CLK_TMR01         = 33,    /*!< TMR01 : Clock source is TIMER 0 Output 1                                  */
  CM4TIMER_CTRL2_TMR2CLK_TMR10         = 34,    /*!< TMR10 : Clock source is TIMER 1 Output 0                                  */
  CM4TIMER_CTRL2_TMR2CLK_TMR11         = 35,    /*!< TMR11 : Clock source is TIMER 1 Output 1                                  */
  CM4TIMER_CTRL2_TMR2CLK_TMR20         = 36,    /*!< TMR20 : Clock source is TIMER 2 Output 0                                  */
  CM4TIMER_CTRL2_TMR2CLK_TMR21         = 37,    /*!< TMR21 : Clock source is TIMER 2 Output 1                                  */
  CM4TIMER_CTRL2_TMR2CLK_TMR30         = 38,    /*!< TMR30 : Clock source is TIMER 3 Output 0                                  */
  CM4TIMER_CTRL2_TMR2CLK_TMR31         = 39,    /*!< TMR31 : Clock source is TIMER 3 Output 1                                  */
  CM4TIMER_CTRL2_TMR2CLK_GPIO0         = 128,   /*!< GPIO0 : GPIO #0 is clock source                                           */
  CM4TIMER_CTRL2_TMR2CLK_GPIOn         = 129,   /*!< GPIOn : GPIO #n is clock source where n ranges from 1 thru 98.
                                                     The values for GPIO1 - GPIO98 are in the range 0x81 - 0xE2.
                                                     i.e., GPIO0 + n                                                           */
  CM4TIMER_CTRL2_TMR2CLK_GPIO99        = 227,   /*!< GPIO99 : GPIO #99 is clock source                                         */
} CM4TIMER_CTRL2_TMR2CLK_Enum;

/* =============================================  CM4TIMER CTRL2 TMR2FN [4..7]  ============================================== */
typedef enum {                                  /*!< CM4TIMER_CTRL2_TMR2FN                                                     */
  CM4TIMER_CTRL2_TMR2FN_EDGE           = 1,     /*!< EDGE : This Mode generates a single edge on OUT0/OUT1 when TIMER
                                                     value hits CMP0/CMP1 respectively. OUT[0]=0, counter increments
                                                     to CMP0, OUT[0]=1, counter stops. OUT[1] follows CMP1.                    */
  CM4TIMER_CTRL2_TMR2FN_UPCOUNT        = 2,     /*!< UPCOUNT : This mode is run up counter generating a pulse on
                                                     CMP. OUT[0]/OUT[1] is pulsed for one source clock period
                                                     when TIMER matches CMP0/CMP1 respectively. Timer repeats
                                                     for TMR_LMT iterations.                                                   */
  CM4TIMER_CTRL2_TMR2FN_PWM            = 4,     /*!< PWM : PWM mode. OUT0 and OUT1 are waveforms, and not just one
                                                     clock pulse. CMP1 dictates the low phase of the output
                                                     and CMP0 dictates the period. OUT[1]=~OUT[0].                             */
  CM4TIMER_CTRL2_TMR2FN_SINGLEPATTERN  = 12,    /*!< SINGLEPATTERN : Single pattern. OUT0=CMP0[TIMER], OUT1=CMP1[TIMER].
                                                     LMT field specifies length of pattern. When LMT GT 32 OUT0
                                                     and OUT1 is the same 64-bit pattern consisting of concatenated
                                                     CMP1,CMP0. When LMT LT 32 OUT0 and OUT1 are independent.
                                                     Both OUT0 and OUT1 can be inverted individually applications
                                                     with POL0/POL1 = 0x1.                                                     */
  CM4TIMER_CTRL2_TMR2FN_REPEATPATTERN  = 13,    /*!< REPEATPATTERN : Repeated pattern. Like SINGLEPATTERN mode, but
                                                     pattern repeats after reaching LMT.                                       */
} CM4TIMER_CTRL2_TMR2FN_Enum;

/* ============================================  CM4TIMER CTRL2 TMR2POL1 [3..3]  ============================================= */
typedef enum {                                  /*!< CM4TIMER_CTRL2_TMR2POL1                                                   */
  CM4TIMER_CTRL2_TMR2POL1_NORMAL       = 0,     /*!< NORMAL : The polarity of the TMR2OUT1 pin is the same as the
                                                     timer output.                                                             */
  CM4TIMER_CTRL2_TMR2POL1_INVERTED     = 1,     /*!< INVERTED : The polarity of the TMR2OUT1 pin is the inverse of
                                                     the timer output.                                                         */
} CM4TIMER_CTRL2_TMR2POL1_Enum;

/* ============================================  CM4TIMER CTRL2 TMR2POL0 [2..2]  ============================================= */
typedef enum {                                  /*!< CM4TIMER_CTRL2_TMR2POL0                                                   */
  CM4TIMER_CTRL2_TMR2POL0_NORMAL       = 0,     /*!< NORMAL : The polarity of the TMR2OUT0 pin is the same as the
                                                     timer output.                                                             */
  CM4TIMER_CTRL2_TMR2POL0_INVERTED     = 1,     /*!< INVERTED : The polarity of the TMR2OUT0 pin is the inverse of
                                                     the timer output.                                                         */
} CM4TIMER_CTRL2_TMR2POL0_Enum;

/* =============================================  CM4TIMER CTRL2 TMR2CLR [1..1]  ============================================= */
typedef enum {                                  /*!< CM4TIMER_CTRL2_TMR2CLR                                                    */
  CM4TIMER_CTRL2_TMR2CLR_CLEAR         = 1,     /*!< CLEAR : When written to a 1, the timer will automatically be
                                                     cleared to its reset state # (0 for count up counter, CMP0
                                                     for down counter)                                                         */
  CM4TIMER_CTRL2_TMR2CLR_DEFAULT       = 0,     /*!< DEFAULT : Default value set to 0. Timer works normally.                   */
} CM4TIMER_CTRL2_TMR2CLR_Enum;

/* =============================================  CM4TIMER CTRL2 TMR2EN [0..0]  ============================================== */
typedef enum {                                  /*!< CM4TIMER_CTRL2_TMR2EN                                                     */
  CM4TIMER_CTRL2_TMR2EN_DIS            = 0,     /*!< DIS : Counter/Timer 2 Disable.                                            */
  CM4TIMER_CTRL2_TMR2EN_EN             = 1,     /*!< EN : Counter/Timer 2 Enable.                                              */
} CM4TIMER_CTRL2_TMR2EN_Enum;

/* ========================================================  TIMER2  ========================================================= */
/* =======================================================  TMR2CMP0  ======================================================== */
/* =======================================================  TMR2CMP1  ======================================================== */
/* =========================================================  MODE2  ========================================================= */
/* ==========================================  CM4TIMER MODE2 TMR2TRIGSEL [8..15]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_MODE2_TMR2TRIGSEL                                                */
  CM4TIMER_MODE2_TMR2TRIGSEL_TMR00     = 0,     /*!< TMR00 : Trigger source is TIMER 0 Output 0                                */
  CM4TIMER_MODE2_TMR2TRIGSEL_TMR01     = 1,     /*!< TMR01 : Trigger source is TIMER 0 Output 1                                */
  CM4TIMER_MODE2_TMR2TRIGSEL_TMR10     = 2,     /*!< TMR10 : Trigger source is TIMER 1 Output 0                                */
  CM4TIMER_MODE2_TMR2TRIGSEL_TMR11     = 3,     /*!< TMR11 : Trigger source is TIMER 1 Output 1                                */
  CM4TIMER_MODE2_TMR2TRIGSEL_TMR20     = 4,     /*!< TMR20 : Trigger source is TIMER 2 Output 0                                */
  CM4TIMER_MODE2_TMR2TRIGSEL_TMR21     = 5,     /*!< TMR21 : Trigger source is TIMER 2 Output 1                                */
  CM4TIMER_MODE2_TMR2TRIGSEL_TMR30     = 6,     /*!< TMR30 : Trigger source is TIMER 3 Output 0                                */
  CM4TIMER_MODE2_TMR2TRIGSEL_TMR31     = 7,     /*!< TMR31 : Trigger source is TIMER 3 Output 1                                */
  CM4TIMER_MODE2_TMR2TRIGSEL_STMRCMP00 = 48,    /*!< STMRCMP00 : Trigger source is STIMER Compare 0                            */
  CM4TIMER_MODE2_TMR2TRIGSEL_STMRCMP10 = 49,    /*!< STMRCMP10 : Trigger source is STIMER Compare 1                            */
  CM4TIMER_MODE2_TMR2TRIGSEL_STMRCMP20 = 50,    /*!< STMRCMP20 : Trigger source is STIMER Compare 2                            */
  CM4TIMER_MODE2_TMR2TRIGSEL_STMRCMP30 = 51,    /*!< STMRCMP30 : Trigger source is STIMER Compare 3                            */
  CM4TIMER_MODE2_TMR2TRIGSEL_STMRCMP40 = 52,    /*!< STMRCMP40 : Trigger source is STIMER Compare 4                            */
  CM4TIMER_MODE2_TMR2TRIGSEL_STMRCMP50 = 53,    /*!< STMRCMP50 : Trigger source is STIMER Compare 5                            */
  CM4TIMER_MODE2_TMR2TRIGSEL_STMRCMP60 = 54,    /*!< STMRCMP60 : Trigger source is STIMER Compare 6                            */
  CM4TIMER_MODE2_TMR2TRIGSEL_STMRCMP70 = 55,    /*!< STMRCMP70 : Trigger source is STIMER Compare 7                            */
  CM4TIMER_MODE2_TMR2TRIGSEL_STMRCAP00 = 56,    /*!< STMRCAP00 : Trigger source is STIMER Capture 0                            */
  CM4TIMER_MODE2_TMR2TRIGSEL_STMRCAP10 = 57,    /*!< STMRCAP10 : Trigger source is STIMER Capture 1                            */
  CM4TIMER_MODE2_TMR2TRIGSEL_STMRCAP20 = 58,    /*!< STMRCAP20 : Trigger source is STIMER Capture 2                            */
  CM4TIMER_MODE2_TMR2TRIGSEL_STMRCAP30 = 59,    /*!< STMRCAP30 : Trigger source is STIMER Capture 3                            */
  CM4TIMER_MODE2_TMR2TRIGSEL_GPIO0     = 128,   /*!< GPIO0 : Trigger source is GPIO #0                                         */
  CM4TIMER_MODE2_TMR2TRIGSEL_GPIO123   = 251,   /*!< GPIO123 : Trigger source is GPIO #123                                     */
  CM4TIMER_MODE2_TMR2TRIGSEL_GPIO127   = 255,   /*!< GPIO127 : Trigger source is GPIO #127                                     */
} CM4TIMER_MODE2_TMR2TRIGSEL_Enum;

/* ======================================================  TMR2LMTVAL  ======================================================= */
/* =========================================================  CTRL3  ========================================================= */
/* ===========================================  CM4TIMER CTRL3 TMR3TMODE [16..17]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_CTRL3_TMR3TMODE                                                  */
  CM4TIMER_CTRL3_TMR3TMODE_DIS         = 0,     /*!< DIS : Trigger not enabled                                                 */
  CM4TIMER_CTRL3_TMR3TMODE_RISE        = 1,     /*!< RISE : Trigger on rising edge of TRIGSEL source                           */
  CM4TIMER_CTRL3_TMR3TMODE_FALL        = 2,     /*!< FALL : Trigger on falling edge of TRIGSEL source                          */
  CM4TIMER_CTRL3_TMR3TMODE_BOTH        = 3,     /*!< BOTH : Trigger on either edge of TRIGSEL source                           */
} CM4TIMER_CTRL3_TMR3TMODE_Enum;

/* ============================================  CM4TIMER CTRL3 TMR3CLK [8..15]  ============================================= */
typedef enum {                                  /*!< CM4TIMER_CTRL3_TMR3CLK                                                    */
  CM4TIMER_CTRL3_TMR3CLK_HFRC_3MHz     = 0,     /*!< HFRC_3MHz : 3M from HFRC clock divider.                                   */
  CM4TIMER_CTRL3_TMR3CLK_HFRC_187KHz   = 1,     /*!< HFRC_187KHz : 187K from the HFRC clock divider.                           */
  CM4TIMER_CTRL3_TMR3CLK_XT_32K        = 2,     /*!< XT_32K : 32768Hz from the crystal oscillator                              */
  CM4TIMER_CTRL3_TMR3CLK_XT_16K        = 3,     /*!< XT_16K : 16384Hz from the crystal oscillator                              */
  CM4TIMER_CTRL3_TMR3CLK_XT_1K         = 4,     /*!< XT_1K : 1024Hz from the crystal oscillator.                               */
  CM4TIMER_CTRL3_TMR3CLK_LFRC_1KHZ     = 5,     /*!< LFRC_1KHZ : Approximately 1KHz from the LFRC oscillator (uncalibrated).   */
  CM4TIMER_CTRL3_TMR3CLK_TMR00         = 32,    /*!< TMR00 : Clock source is TIMER 0 Output 0                                  */
  CM4TIMER_CTRL3_TMR3CLK_TMR01         = 33,    /*!< TMR01 : Clock source is TIMER 0 Output 1                                  */
  CM4TIMER_CTRL3_TMR3CLK_TMR10         = 34,    /*!< TMR10 : Clock source is TIMER 1 Output 0                                  */
  CM4TIMER_CTRL3_TMR3CLK_TMR11         = 35,    /*!< TMR11 : Clock source is TIMER 1 Output 1                                  */
  CM4TIMER_CTRL3_TMR3CLK_TMR20         = 36,    /*!< TMR20 : Clock source is TIMER 2 Output 0                                  */
  CM4TIMER_CTRL3_TMR3CLK_TMR21         = 37,    /*!< TMR21 : Clock source is TIMER 2 Output 1                                  */
  CM4TIMER_CTRL3_TMR3CLK_TMR30         = 38,    /*!< TMR30 : Clock source is TIMER 3 Output 0                                  */
  CM4TIMER_CTRL3_TMR3CLK_TMR31         = 39,    /*!< TMR31 : Clock source is TIMER 3 Output 1                                  */
  CM4TIMER_CTRL3_TMR3CLK_GPIO0         = 128,   /*!< GPIO0 : GPIO #0 is clock source                                           */
  CM4TIMER_CTRL3_TMR3CLK_GPIOn         = 129,   /*!< GPIOn : GPIO #n is clock source where n ranges from 1 thru 98.
                                                     The values for GPIO1 - GPIO98 are in the range 0x81 - 0xE2.
                                                     i.e., GPIO0 + n                                                           */
  CM4TIMER_CTRL3_TMR3CLK_GPIO99        = 227,   /*!< GPIO99 : GPIO #99 is clock source                                         */
} CM4TIMER_CTRL3_TMR3CLK_Enum;

/* =============================================  CM4TIMER CTRL3 TMR3FN [4..7]  ============================================== */
typedef enum {                                  /*!< CM4TIMER_CTRL3_TMR3FN                                                     */
  CM4TIMER_CTRL3_TMR3FN_EDGE           = 1,     /*!< EDGE : This Mode generates a single edge on OUT0/OUT1 when TIMER
                                                     value hits CMP0/CMP1 respectively. OUT[0]=0, counter increments
                                                     to CMP0, OUT[0]=1, counter stops. OUT[1] follows CMP1.                    */
  CM4TIMER_CTRL3_TMR3FN_UPCOUNT        = 2,     /*!< UPCOUNT : This mode is run up counter generating a pulse on
                                                     CMP. OUT[0]/OUT[1] is pulsed for one source clock period
                                                     when TIMER matches CMP0/CMP1 respectively. Timer repeats
                                                     for TMR_LMT iterations.                                                   */
  CM4TIMER_CTRL3_TMR3FN_PWM            = 4,     /*!< PWM : PWM mode. OUT0 and OUT1 are waveforms, and not just one
                                                     clock pulse. CMP1 dictates the low phase of the output
                                                     and CMP0 dictates the period. OUT[1]=~OUT[0].                             */
  CM4TIMER_CTRL3_TMR3FN_SINGLEPATTERN  = 12,    /*!< SINGLEPATTERN : Single pattern. OUT0=CMP0[TIMER], OUT1=CMP1[TIMER].
                                                     LMT field specifies length of pattern. When LMT GT 32 OUT0
                                                     and OUT1 is the same 64-bit pattern consisting of concatenated
                                                     CMP1,CMP0. When LMT LT 32 OUT0 and OUT1 are independent.
                                                     Both OUT0 and OUT1 can be inverted individually applications
                                                     with POL0/POL1 = 0x1.                                                     */
  CM4TIMER_CTRL3_TMR3FN_REPEATPATTERN  = 13,    /*!< REPEATPATTERN : Repeated pattern. Like SINGLEPATTERN mode, but
                                                     pattern repeats after reaching LMT.                                       */
} CM4TIMER_CTRL3_TMR3FN_Enum;

/* ============================================  CM4TIMER CTRL3 TMR3POL1 [3..3]  ============================================= */
typedef enum {                                  /*!< CM4TIMER_CTRL3_TMR3POL1                                                   */
  CM4TIMER_CTRL3_TMR3POL1_NORMAL       = 0,     /*!< NORMAL : The polarity of the TMR3OUT1 pin is the same as the
                                                     timer output.                                                             */
  CM4TIMER_CTRL3_TMR3POL1_INVERTED     = 1,     /*!< INVERTED : The polarity of the TMR3OUT1 pin is the inverse of
                                                     the timer output.                                                         */
} CM4TIMER_CTRL3_TMR3POL1_Enum;

/* ============================================  CM4TIMER CTRL3 TMR3POL0 [2..2]  ============================================= */
typedef enum {                                  /*!< CM4TIMER_CTRL3_TMR3POL0                                                   */
  CM4TIMER_CTRL3_TMR3POL0_NORMAL       = 0,     /*!< NORMAL : The polarity of the TMR3OUT0 pin is the same as the
                                                     timer output.                                                             */
  CM4TIMER_CTRL3_TMR3POL0_INVERTED     = 1,     /*!< INVERTED : The polarity of the TMR3OUT0 pin is the inverse of
                                                     the timer output.                                                         */
} CM4TIMER_CTRL3_TMR3POL0_Enum;

/* =============================================  CM4TIMER CTRL3 TMR3CLR [1..1]  ============================================= */
typedef enum {                                  /*!< CM4TIMER_CTRL3_TMR3CLR                                                    */
  CM4TIMER_CTRL3_TMR3CLR_CLEAR         = 1,     /*!< CLEAR : When written to a 1, the timer will automatically be
                                                     cleared to its reset state # (0 for count up counter, CMP0
                                                     for down counter)                                                         */
  CM4TIMER_CTRL3_TMR3CLR_DEFAULT       = 0,     /*!< DEFAULT : Default value set to 0. Timer works normally.                   */
} CM4TIMER_CTRL3_TMR3CLR_Enum;

/* =============================================  CM4TIMER CTRL3 TMR3EN [0..0]  ============================================== */
typedef enum {                                  /*!< CM4TIMER_CTRL3_TMR3EN                                                     */
  CM4TIMER_CTRL3_TMR3EN_DIS            = 0,     /*!< DIS : Counter/Timer 3 Disable.                                            */
  CM4TIMER_CTRL3_TMR3EN_EN             = 1,     /*!< EN : Counter/Timer 3 Enable.                                              */
} CM4TIMER_CTRL3_TMR3EN_Enum;

/* ========================================================  TIMER3  ========================================================= */
/* =======================================================  TMR3CMP0  ======================================================== */
/* =======================================================  TMR3CMP1  ======================================================== */
/* =========================================================  MODE3  ========================================================= */
/* ==========================================  CM4TIMER MODE3 TMR3TRIGSEL [8..15]  =========================================== */
typedef enum {                                  /*!< CM4TIMER_MODE3_TMR3TRIGSEL                                                */
  CM4TIMER_MODE3_TMR3TRIGSEL_TMR00     = 0,     /*!< TMR00 : Trigger source is TIMER 0 Output 0                                */
  CM4TIMER_MODE3_TMR3TRIGSEL_TMR01     = 1,     /*!< TMR01 : Trigger source is TIMER 0 Output 1                                */
  CM4TIMER_MODE3_TMR3TRIGSEL_TMR10     = 2,     /*!< TMR10 : Trigger source is TIMER 1 Output 0                                */
  CM4TIMER_MODE3_TMR3TRIGSEL_TMR11     = 3,     /*!< TMR11 : Trigger source is TIMER 1 Output 1                                */
  CM4TIMER_MODE3_TMR3TRIGSEL_TMR20     = 4,     /*!< TMR20 : Trigger source is TIMER 2 Output 0                                */
  CM4TIMER_MODE3_TMR3TRIGSEL_TMR21     = 5,     /*!< TMR21 : Trigger source is TIMER 2 Output 1                                */
  CM4TIMER_MODE3_TMR3TRIGSEL_TMR30     = 6,     /*!< TMR30 : Trigger source is TIMER 3 Output 0                                */
  CM4TIMER_MODE3_TMR3TRIGSEL_TMR31     = 7,     /*!< TMR31 : Trigger source is TIMER 3 Output 1                                */
  CM4TIMER_MODE3_TMR3TRIGSEL_STMRCMP00 = 48,    /*!< STMRCMP00 : Trigger source is STIMER Compare 0                            */
  CM4TIMER_MODE3_TMR3TRIGSEL_STMRCMP10 = 49,    /*!< STMRCMP10 : Trigger source is STIMER Compare 1                            */
  CM4TIMER_MODE3_TMR3TRIGSEL_STMRCMP20 = 50,    /*!< STMRCMP20 : Trigger source is STIMER Compare 2                            */
  CM4TIMER_MODE3_TMR3TRIGSEL_STMRCMP30 = 51,    /*!< STMRCMP30 : Trigger source is STIMER Compare 3                            */
  CM4TIMER_MODE3_TMR3TRIGSEL_STMRCMP40 = 52,    /*!< STMRCMP40 : Trigger source is STIMER Compare 4                            */
  CM4TIMER_MODE3_TMR3TRIGSEL_STMRCMP50 = 53,    /*!< STMRCMP50 : Trigger source is STIMER Compare 5                            */
  CM4TIMER_MODE3_TMR3TRIGSEL_STMRCMP60 = 54,    /*!< STMRCMP60 : Trigger source is STIMER Compare 6                            */
  CM4TIMER_MODE3_TMR3TRIGSEL_STMRCMP70 = 55,    /*!< STMRCMP70 : Trigger source is STIMER Compare 7                            */
  CM4TIMER_MODE3_TMR3TRIGSEL_STMRCAP00 = 56,    /*!< STMRCAP00 : Trigger source is STIMER Capture 0                            */
  CM4TIMER_MODE3_TMR3TRIGSEL_STMRCAP10 = 57,    /*!< STMRCAP10 : Trigger source is STIMER Capture 1                            */
  CM4TIMER_MODE3_TMR3TRIGSEL_STMRCAP20 = 58,    /*!< STMRCAP20 : Trigger source is STIMER Capture 2                            */
  CM4TIMER_MODE3_TMR3TRIGSEL_STMRCAP30 = 59,    /*!< STMRCAP30 : Trigger source is STIMER Capture 3                            */
  CM4TIMER_MODE3_TMR3TRIGSEL_GPIO0     = 128,   /*!< GPIO0 : Trigger source is GPIO #0                                         */
  CM4TIMER_MODE3_TMR3TRIGSEL_GPIO123   = 251,   /*!< GPIO123 : Trigger source is GPIO #123                                     */
  CM4TIMER_MODE3_TMR3TRIGSEL_GPIO127   = 255,   /*!< GPIO127 : Trigger source is GPIO #127                                     */
} CM4TIMER_MODE3_TMR3TRIGSEL_Enum;

/* ======================================================  TMR3LMTVAL  ======================================================= */
/* ======================================================  TIMERSPARES  ====================================================== */


/* =========================================================================================================================== */
/* ================                                          CM4WDT                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  CFG  ========================================================== */
/* ==============================================  CM4WDT CFG CLKSEL [24..26]  =============================================== */
typedef enum {                                  /*!< CM4WDT_CFG_CLKSEL                                                         */
  CM4WDT_CFG_CLKSEL_OFF                = 0,     /*!< OFF : Low Power Mode. This setting disables the watch dog timer.          */
  CM4WDT_CFG_CLKSEL_LFRC_128HZ         = 1,     /*!< LFRC_128HZ : 128 Hz LFRC clock.                                           */
  CM4WDT_CFG_CLKSEL_LFRC_16HZ          = 2,     /*!< LFRC_16HZ : 16 Hz LFRC clock.                                             */
  CM4WDT_CFG_CLKSEL_LFRC_1HZ           = 3,     /*!< LFRC_1HZ : 1 Hz LFRC clock.                                               */
  CM4WDT_CFG_CLKSEL_LFRC_1_16HZ        = 4,     /*!< LFRC_1_16HZ : 1/16th Hz LFRC clock.                                       */
} CM4WDT_CFG_CLKSEL_Enum;

/* =========================================================  RSTRT  ========================================================= */
/* ===============================================  CM4WDT RSTRT RSTRT [0..7]  =============================================== */
typedef enum {                                  /*!< CM4WDT_RSTRT_RSTRT                                                        */
  CM4WDT_RSTRT_RSTRT_KEYVALUE          = 178,   /*!< KEYVALUE : This is the key value to write to WDTRSTRT to restart
                                                     the WDT. This is a write only register.                                   */
  CM4WDT_RSTRT_RSTRT_DEFAULT           = 0,     /*!< DEFAULT : Default/Reset value. This is a write only register.             */
} CM4WDT_RSTRT_RSTRT_Enum;

/* =========================================================  LOCK  ========================================================== */
/* ================================================  CM4WDT LOCK LOCK [0..7]  ================================================ */
typedef enum {                                  /*!< CM4WDT_LOCK_LOCK                                                          */
  CM4WDT_LOCK_LOCK_KEYVALUE            = 58,    /*!< KEYVALUE : This is the key value to write to WDTLOCK to lock
                                                     the WDT.                                                                  */
  CM4WDT_LOCK_LOCK_DEFAULT             = 0,     /*!< DEFAULT : Default/Reset value.                                            */
} CM4WDT_LOCK_LOCK_Enum;

/* =========================================================  COUNT  ========================================================= */
/* =======================================================  WDTIEREN  ======================================================== */
/* ======================================================  WDTIERSTAT  ======================================================= */
/* =======================================================  WDTIERCLR  ======================================================= */
/* =======================================================  WDTIERSET  ======================================================= */

/** @} */ /* End of group EnumValue_peripherals */


#ifdef __cplusplus
}
#endif

#endif /* APOLLO510L_CM4_H */


/** @} */ /* End of group apollo510L_cm4 */

/** @} */ /* End of group Ambiq Micro */
